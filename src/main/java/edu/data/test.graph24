class C{  private static void formatTwoDigits(int n,StringBuilder buf){  if (n < 10)   buf.append('0');  buf.append(n);}  }
class C{  protected void customPaint(Graphics2D g,int width,int height){}  }
class C{  public static File createUniqueFile(File targetFolder,String originalFile,boolean keepOriginal){  String mimeType=MimeTypeMap.getSingleton().getMimeTypeFromExtension(originalFile);  return createUniqueFile(targetFolder,originalFile,mimeType,keepOriginal);}  }
class C{  public static void skip(DataInput in) throws IOException {  int length=WritableUtils.readVInt(in);  WritableUtils.skipFully(in,length);}  }
class C{  public static void recordPageEnd(){  TcStatSdk.getInstance(context).recordPageEnd();}  }
class C{  public boolean isOk(){  return ok;}  }
class C{  private void xmlInit() throws Exception {  String containerConfigURL=JProperties.getURL();  File confDir=null;  if (!JSpaceUtilities.isEmpty(containerConfigURL))   confDir=new File(new File(containerConfigURL).getParent());  if (confDir != null && confDir.canRead())   m_configDirectory=confDir.getPath(); else   m_configDirectory=SystemInfo.singleton().locations().config();  URL containerXMLURL=ResourceLoader.findContainerXML(_containerName);  if (containerXMLURL != null) {    m_ContainerFile=new File(new URI(containerXMLURL.toString()));    String _containerFileName=m_ContainerFile.getPath();    m_FileNameWithoutExtention=_containerFileName.substring(0,_containerFileName.length() - ".xml".length());  } else {    m_FileNameWithoutExtention=SystemInfo.singleton().locations().config() + File.separator + _containerName;  }synchronized (_lock) {    if (_containerEntry == null && m_ContainerFile == null && !JSpaceUtilities.isEmpty(_spaceName)) {      boolean isLoadOnStartup=false;      if (!isFirstSpaceCreated && !JSpaceUtilities.isEmpty(_spaceName))       isLoadOnStartup=true;      loadSpace(_spaceName,new JSpaceAttributes(_schemaName,_customProperties,isLoadOnStartup));      return;    }  }  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  DocumentBuilder builder=factory.newDocumentBuilder();  if (!JSpaceUtilities.isEmpty(containerConfigURL)) {    m_containerConfigFileDocument=builder.parse(containerConfigURL);    JSpaceUtilities.normalize(m_containerConfigFileDocument);    NodeList spConfNL=m_containerConfigFileDocument.getElementsByTagName(SPACE_CONFIG);    if (spConfNL.getLength() == 0) {      if (_logger.isLoggable(Level.FINE)) {        _logger.fine("<" + SPACE_CONFIG + "> tag does not exist in "+ m_configDirectory+ File.separator+ _containerName+ ".xml file. Space config XML file of space will not be created.");      }    } else     m_spaceConfigNode=spConfNL.item(0);  }  if (m_ContainerFile != null && m_ContainerFile.exists()) {    loadSpacesFromXMLFile(builder);    if (_logger.isLoggable(Level.FINE)) {      _logger.fine("This container " + _containerName + " loaded successful from "+ m_ContainerFile+ " XML file.");    }  }}  }
class C{  public static void trimEmptyTextNodes(Node node){  Element element=null;  if (node instanceof Document) {    element=((Document)node).getDocumentElement();  } else   if (node instanceof Element) {    element=(Element)node;  } else {    return;  }  List<Node> nodesToRemove=new ArrayList<Node>();  NodeList children=element.getChildNodes();  for (int i=0; i < children.getLength(); i++) {    Node child=children.item(i);    if (child instanceof Element) {      trimEmptyTextNodes(child);    } else     if (child instanceof Text) {      Text t=(Text)child;      if (t.getData().trim().length() == 0) {        nodesToRemove.add(child);      }    }  }  for (  Node n : nodesToRemove) {    element.removeChild(n);  }}  }
class C{  private void writeDataTofile(Object[][] recordHolderList,int entryCountLocal,File file) throws CarbonSortKeyAndGroupByException {  if (parameters.isSortFileCompressionEnabled() || parameters.isPrefetch()) {    writeSortTempFile(recordHolderList,entryCountLocal,file);    return;  }  writeData(recordHolderList,entryCountLocal,file);}  }
class C{  public File[] filterHiddenFiles(File[] files){  List<File> ret=new ArrayList<>();  for (  File file : files) {    if (!file.isHidden()) {      ret.add(file);    }  }  return ret.toArray(new File[ret.size()]);}  }
class C{  public boolean types_for_sites(){  return soot.PhaseOptions.getBoolean(options,"types-for-sites");}  }
class C{  public SyncHttpClient(int httpPort){  super(false,httpPort,443);}  }
class C{  public HashDataCache(DataCache<Pair<String,T>> cache,MessageDigest md){  this(cache,md.getAlgorithm());}  }
class C{  public int size(){  return getArray().length;}  }
class C{  public LocalCreation(Collection<Local> locals){  this(locals,DEFAULT_PREFIX);}  }
class C{  public FontAction(){  super();}  }
class C{  private AudioOption createOption5(ChannelType... channels){  AudioOption option=new AudioOption();  Stream.of(createTrack(new Channel(FL.name(),channels[0])),createTrack(new Channel(FR.name(),channels[1]))).forEach(null);  return option;}  }
class C{  public void addPointToEndOfPath(ChartData.DataPoint point){  int numPoints=mChartData.getNumPoints();  if (!mHasPath || numPoints < MAXIMUM_NUM_POINTS_FOR_POPULATE_PATH || (numPoints % DRAWN_POINTS_REDRAW_THRESHOLD == 0 && mChartOptions.isPinnedToNow())) {    populatePath(true);    postInvalidateOnAnimation();  } else {    if (mChartOptions.isPinnedToNow() && !mWasPinnedToNow) {      populatePath(true);      postInvalidateOnAnimation();    } else     if ((mChartOptions.isPinnedToNow()) || mChartOptions.getRenderedXMax() >= point.getX() || mLeadingEdgeIsDrawn) {      mPath.lineTo(getPathX(point.getX()),getPathY(point.getY()));      mXMaxInPath=point.getX();      transformPath();    }  }  mWasPinnedToNow=mChartOptions.isPinnedToNow();}  }
class C{  public long put(K key,long value){  int index=insertionIndex(key);  return doPut(key,value,index);}  }
class C{  @Override public void empty(Augmentations augmentations) throws XNIException {}  }
class C{  public IdQuery(String typeName,Object id,Object routing,int version){  this(typeName,id,routing,QueryResultType.DEFAULT,version);}  }
class C{  public AudioMoveToAlbumQuery(VkApiClient client,UserActor actor,List<Integer> audioIds){  super(client,"audio.moveToAlbum",OkResponse.class);  accessToken(actor.getAccessToken());  audioIds(audioIds);}  }
class C{  public LessSpacePredicate(Comparable<?> expectedValue){  super(expectedValue);}  }
class C{  public static void checkPolygon(List<Coordinate> geometry,Coordinate takeOffPoint,List<MappingService.AirMapAirspaceType> types,List<MappingService.AirMapAirspaceType> ignoredTypes,boolean weather,Date date,AirMapCallback<AirMapStatus> listener){  String url=statusPolygonUrl;  Map<String,String> params=AirMapStatus.getAsParams(takeOffPoint,types,ignoredTypes,weather,date);  params.put("geometry","POLYGON(" + makeGeoString(geometry) + ")");  AirMap.getClient().get(url,params,new GenericOkHttpCallback(listener,AirMapStatus.class));}  }
class C{  public PhotoAdapter(Context a,List<Photo> list){  this.a=a;  this.itemList=list;}  }
class C{  public void rightClick() throws InterruptedException {  click(InputEvent.BUTTON3_MASK);}  }
class C{  public ExtentModel(FeatureTypeConstraintModelUpdateInterface parent){  this.parentObj=parent;  columnList.add(Localisation.getString(FieldConfigBase.class,"FeatureTypeConstraintExtentModel.name"));  columnList.add(Localisation.getString(FieldConfigBase.class,"FeatureTypeConstraintExtentModel.minX"));  columnList.add(Localisation.getString(FieldConfigBase.class,"FeatureTypeConstraintExtentModel.minY"));  columnList.add(Localisation.getString(FieldConfigBase.class,"FeatureTypeConstraintExtentModel.maxX"));  columnList.add(Localisation.getString(FieldConfigBase.class,"FeatureTypeConstraintExtentModel.maxY"));}  }
class C{  public final TestSubscriber<T> assertNotComplete(){  int c=completionCount;  if (c == 1) {    throw new AssertionError("Completed",null);  }  if (c > 1) {    throw new AssertionError("Multiple completions: " + c,null);  }  return this;}  }
class C{  public static Histogram projectHistogram(Histogram hist,Set<String> fldNames){  Histogram pjtHist=new Histogram(fldNames);  for (  String fld : fldNames)   pjtHist.setBuckets(fld,hist.buckets(fld));  return pjtHist;}  }
class C{  public static String toString(byte[] input,String encoding) throws IOException {  return new String(input,encoding);}  }
class C{  public static Column std(DataFrame dataFrame,String columnName){  return functions.sqrt(var(dataFrame,columnName));}  }
class C{  public static List<File> walk(String path){  LinkedList<File> output=new LinkedList<File>();  File root=new File(path);  File[] list=root.listFiles();  if (list == null) {    return output;  }  for (  File f : list) {    if (f.isDirectory()) {      output.addAll(walk(f.getAbsolutePath()));    } else {      output.addLast(f);    }  }  return output;}  }
class C{  public void init$Children(){  children=new ASTNode[1];}  }
class C{  public S1Angle lat(){  return S1Angle.radians(latRadians);}  }
class C{  public static int patchFast(InputStream oldInputStream,InputStream diffInputStream,File newFile) throws IOException {  if (oldInputStream == null) {    return RETURN_OLD_FILE_ERR;  }  if (newFile == null) {    return RETURN_NEW_FILE_ERR;  }  if (diffInputStream == null) {    return RETURN_DIFF_FILE_ERR;  }  byte[] oldBytes=BSUtil.inputStreamToByte(oldInputStream);  byte[] diffBytes=BSUtil.inputStreamToByte(diffInputStream);  byte[] newBytes=patchFast(oldBytes,oldBytes.length,diffBytes,diffBytes.length,0);  OutputStream newOutputStream=new FileOutputStream(newFile);  try {    newOutputStream.write(newBytes);  }  finally {    newOutputStream.close();  }  return RETURN_SUCCESS;}  }
class C{  public void addChangeListener(ChangeListener cl){  if (!listeners.contains(cl))   listeners.add(cl);}  }
class C{  public static void clear(Color color){  offscreen.setColor(color);  offscreen.fillRect(0,0,width,height);  offscreen.setColor(penColor);  draw();}  }
class C{  public void delete() throws JMSException {}  }
class C{  public static Pose toDepthCameraOpenGlPose(TangoPoseData devicePose,DeviceExtrinsics extrinsics){  Matrix4 startServiceTdevice=tangoPoseToMatrix(devicePose);  Matrix4 openglTDevice=OPENGL_T_TANGO_WORLD.clone().multiply(startServiceTdevice);  Matrix4 openglWorldTOpenglCamera=openglTDevice.multiply(extrinsics.getDeviceTDepthCamera());  return matrixToPose(openglWorldTOpenglCamera);}  }
class C{  public static String byteCountToDisplaySize(BigInteger size){  String displaySize;  if (size.divide(ONE_EB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_EB_BI)) + " EB";  } else   if (size.divide(ONE_PB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_PB_BI)) + " PB";  } else   if (size.divide(ONE_TB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_TB_BI)) + " TB";  } else   if (size.divide(ONE_GB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_GB_BI)) + " GB";  } else   if (size.divide(ONE_MB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_MB_BI)) + " MB";  } else   if (size.divide(ONE_KB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_KB_BI)) + " KB";  } else {    displaySize=String.valueOf(size) + " bytes";  }  return displaySize;}  }
class C{  public Permission addParent(String name,boolean value){  PluginManager pm=Bukkit.getServer().getPluginManager();  String lname=name.toLowerCase(java.util.Locale.ENGLISH);  Permission perm=pm.getPermission(lname);  if (perm == null) {    perm=new Permission(lname);    pm.addPermission(perm);  }  addParent(perm,value);  return perm;}  }
class C{  public void removeHeader(){  setHeader(null);}  }
class C{  @Override public boolean onScaleBegin(ScaleGestureDetector detector){  return true;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Snare_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200315,skillname);}  }
class C{  public static boolean isButtonPressed(InputEvent e,int button){  return (e.getModifiers() & button) == button;}  }
class C{  public LazyObject(String raw) throws LazyException {  LazyParser parser=new LazyParser(raw);  parser.tokenize();  if (parser.root.type != LazyNode.OBJECT) {    throw new LazyException("JSON Object must start with {",0);  }  root=parser.root;  cbuf=parser.cbuf;}  }
class C{  public static boolean addBlockedUser(Player player,Player blockedPlayer,String reason){  if (DAOManager.getDAO(BlockListDAO.class).addBlockedUser(player.getObjectId(),blockedPlayer.getObjectId(),reason)) {    player.getBlockList().add(new BlockedPlayer(blockedPlayer.getCommonData(),reason));    player.getClientConnection().sendPacket(new SM_BLOCK_RESPONSE(SM_BLOCK_RESPONSE.BLOCK_SUCCESSFUL,blockedPlayer.getName()));    player.getClientConnection().sendPacket(new SM_BLOCK_LIST());    return true;  }  return false;}  }
class C{  public NetworkResponse(int statusCode,byte[] data,Map<String,String> headers,boolean notModified){  this.statusCode=statusCode;  this.data=data;  this.headers=headers;  this.notModified=notModified;}  }
class C{  private static void log(int level,int stackOffset,String tag,Formatter formatter,Logger logger,String msg,Object... params){  checkInitOrUseDefaultConfig();  if (logger == null) {    logger=mConfig.getLogger();  }  if (TextUtils.isEmpty(msg) && params.length == 0) {    PLog.w("You're logging with empty msg and arguments, output would be force change to " + "empty msg in empty msg level !!");    level=mConfig.getEmptyMsgLevel();    msg=mConfig.getEmptyMsg();  }  if (TextUtils.isEmpty(tag) && mConfig.isUseAutoTag()) {    int offset=STACK_TRACE_INDEX + mConfig.getGlobalStackOffset() + stackOffset;    tag=StackTraceUtil.generateAutoTag(offset);  }  if ((!TextUtils.isEmpty(tag)) && mConfig.isForceConcatGlobalTag()) {    tag=mConfig.getGlobalTag() + "-" + tag;  } else   if (TextUtils.isEmpty(tag)) {    tag=mConfig.getGlobalTag();  }  if (!mConfig.getController().isLogEnabled(level,tag,msg)) {    return;  }  String logContent;  boolean isFormattedCorrectly=false;  try {    logContent=formatter.format(msg,params);    isFormattedCorrectly=true;  } catch (  Exception ignored) {    logContent=msg;  }  if ((logContent != null) && ((!isFormattedCorrectly) || (!formatter.isPreWrappedFormat()))) {    logContent=wrapLine(logContent,mConfig.getMaxLengthPerLine());  }  String lineInfo=null;  if (mConfig.isKeepLineNumber()) {    int offsetFromZero=STACK_TRACE_INDEX + mConfig.getGlobalStackOffset() + stackOffset;    lineInfo=StackTraceUtil.generateStackInfo(mConfig.isKeepInnerClass(),offsetFromZero);  }  if (logContent != null && lineInfo != null) {    if (logContent.indexOf('\n') != -1) {      logContent=lineInfo + "\n" + logContent;    } else {      logContent=lineInfo + logContent;    }  }  if (logContent != null) {    callLoggerPrint(level,tag,logContent,logger);  }}  }
class C{  public Builder fill(Boolean fill){  this.fill=fill;  return this;}  }
class C{  public CloseShieldInputStream(InputStream in){  super(in);}  }
class C{  public void changePermissions(Legion legion,short deputyPermission,short centurionPermission,short legionarPermission,short volunteerPermission){  if (legion.setLegionPermissions(deputyPermission,centurionPermission,legionarPermission,volunteerPermission)) {    PacketSendUtility.broadcastPacketToLegion(legion,new SM_LEGION_EDIT(0x02,legion));  }}  }
class C{  public static void updateVisible(VisualItem item,boolean val){  item.setStartVisible(item.isVisible());  item.setVisible(val);  item.setEndVisible(val);}  }
class C{  public void loadUrl(String url,JSONObject props) throws JSONException {  LOG.d("App","App.loadUrl(" + url + ","+ props+ ")");  int wait=0;  boolean openExternal=false;  boolean clearHistory=false;  HashMap<String,Object> params=new HashMap<String,Object>();  if (props != null) {    JSONArray keys=props.names();    for (int i=0; i < keys.length(); i++) {      String key=keys.getString(i);      if (key.equals("wait")) {        wait=props.getInt(key);      } else       if (key.equalsIgnoreCase("openexternal")) {        openExternal=props.getBoolean(key);      } else       if (key.equalsIgnoreCase("clearhistory")) {        clearHistory=props.getBoolean(key);      } else {        Object value=props.get(key);        if (value == null) {        } else         if (value.getClass().equals(String.class)) {          params.put(key,(String)value);        } else         if (value.getClass().equals(Boolean.class)) {          params.put(key,(Boolean)value);        } else         if (value.getClass().equals(Integer.class)) {          params.put(key,(Integer)value);        }      }    }  }  if (wait > 0) {    try {synchronized (this) {        this.wait(wait);      }    } catch (    InterruptedException e) {      e.printStackTrace();    }  }  this.webView.showWebPage(url,openExternal,clearHistory,params);}  }
class C{  public static float acos(float fValue){  if (-1.0f < fValue) {    if (fValue < 1.0f) {      return (float)Math.acos(fValue);    }    return 0.0f;  }  return PI;}  }
class C{  public static String toString(JSONArray ja) throws JSONException {  Object e;  int i;  JSONObject jo;  String k;  Iterator keys;  int length;  StringBuilder sb=new StringBuilder();  String tagName;  String v;  tagName=ja.getString(0);  XML.noSpace(tagName);  tagName=XML.escape(tagName);  sb.append('<');  sb.append(tagName);  e=ja.opt(1);  if (e instanceof JSONObject) {    i=2;    jo=(JSONObject)e;    keys=jo.keys();    while (keys.hasNext()) {      k=keys.next().toString();      XML.noSpace(k);      v=jo.optString(k);      if (v != null) {        sb.append(' ');        sb.append(XML.escape(k));        sb.append('=');        sb.append('"');        sb.append(XML.escape(v));        sb.append('"');      }    }  } else {    i=1;  }  length=ja.length();  if (i >= length) {    sb.append('/');    sb.append('>');  } else {    sb.append('>');    do {      e=ja.get(i);      i+=1;      if (e != null) {        if (e instanceof String) {          sb.append(XML.escape(e.toString()));        } else         if (e instanceof JSONObject) {          sb.append(toString((JSONObject)e));        } else         if (e instanceof JSONArray) {          sb.append(toString((JSONArray)e));        }      }    } while (i < length);    sb.append('<');    sb.append('/');    sb.append(tagName);    sb.append('>');  }  return sb.toString();}  }
class C{  public void unRegister(Object listener){  eventBus.unregister(listener);  Logs.info("un register an listener({})",listener);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_BUDDYLIST_BUDDYS_LIST_FULL(String value0){  return new SM_SYSTEM_MESSAGE(1400543,value0);}  }
class C{  public VideoSaveQuery repeat(Boolean value){  return unsafeParam("repeat",value);}  }
class C{  public AudioSearchQuery performerOnly(Boolean value){  return unsafeParam("performer_only",value);}  }
class C{  public int compare(MatchData o1,MatchData o2){  if (o1.firstPosInRef < o2.firstPosInRef)   return -1;  if (o1.firstPosInRef > o2.firstPosInRef)   return 1;  if (o1.lastPosInRef < o2.lastPosInRef)   return 1;  if (o1.lastPosInRef > o2.lastPosInRef)   return -1;  if (o1.read.getId() < o2.read.getId())   return -1;  if (o1.read.getId() > o2.read.getId())   return 1;  return 0;}  }
class C{  public static void updatePilot(AirMapPilot pilot,AirMapCallback<AirMapPilot> listener){  String url=String.format(pilotByIdUrl,pilot.getPilotId());  AirMap.getClient().patch(url,pilot.getAsParams(),new GenericOkHttpCallback(listener,AirMapPilot.class));}  }
class C{  private Map<Metrics,List<ManagedLedgerImpl>> groupLedgersByDimension(){  Map<Metrics,List<ManagedLedgerImpl>> ledgersByDimensionMap=Maps.newHashMap();  Map<String,ManagedLedgerImpl> ledgersMap=getManagedLedgers();  for (  Entry<String,ManagedLedgerImpl> e : ledgersMap.entrySet()) {    String ledgerName=e.getKey();    ManagedLedgerImpl ledger=e.getValue();    String namespace=parseNamespaceFromLedgerName(ledgerName);    Metrics metrics=createMetricsByDimension(namespace);    populateDimensionMap(ledgersByDimensionMap,metrics,ledger);  }  return ledgersByDimensionMap;}  }
class C{  public ChangeSet removeFromMap(String path,Serializable key){  return add(new RemoveFromMapSpaceEntryMutator(path,key));}  }
class C{  private boolean isAfterParent(final BSPTree<Sphere1D> node){  final BSPTree<Sphere1D> parent=node.getParent();  if (parent == null) {    return false;  } else {    return node == childAfter(parent);  }}  }
class C{  public boolean do_tlo(){  return soot.PhaseOptions.getBoolean(options,"do-tlo");}  }
class C{  public static Tuple median(Iterator tuples,String field,Comparator cmp){  Object[] t=new Tuple[100];  int i=0;  for (; tuples.hasNext(); ++i) {    if (i >= t.length)     t=ArrayLib.resize(t,3 * t.length / 2);    t[i]=(Tuple)tuples.next();  }  ArrayLib.trim(t,i);  Object[] v=new Object[t.length];  int[] idx=new int[t.length];  for (i=0; i < t.length; ++i) {    idx[i]=i;    v[i]=((Tuple)t[i]).get(field);  }  ArrayLib.sort(v,idx,cmp);  return (Tuple)t[idx[idx.length / 2]];}  }
class C{  @Override public void onBindViewHolder(){  if (unbinder == null)   unbinder=ButterKnife.bind(this,itemView);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public BodyDeclList fullCopy(){  BodyDeclList tree=(BodyDeclList)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public char nextClean() throws JSONException {  for (; ; ) {    char c=this.next();    if (c == 0 || c > ' ') {      return c;    }  }}  }
class C{  private int klattRule8(Element segment){  Element syllable=getSyllable(segment);  if (hasAccent(syllable)) {    if (isInNucleus(segment)) {      return getPropertyAsInteger("rule8.accent");    }  }  return 100;}  }
class C{  private void updateScreenNumber(@Nullable DesignSurface surface){  if (surface != null) {    myXScreenNumber=!surface.isStackVertically() && surface.getScreenMode() == BOTH ? 2 : 1;    myYScreenNumber=surface.isStackVertically() && surface.getScreenMode() == BOTH ? 2 : 1;  }}  }
class C{  static int applyMaskPenaltyRule1(ByteMatrix matrix){  return applyMaskPenaltyRule1Internal(matrix,true) + applyMaskPenaltyRule1Internal(matrix,false);}  }
class C{  public SketchSetOperationPostAggregation withSize(int size){  return new SketchSetOperationPostAggregation(getName(),getFunc(),getFields(),size);}  }
class C{  static boolean isNewerVersionAvailable(Context context){  assert Looper.myLooper() != Looper.getMainLooper();  if (!sEnableUpdateDetection) {    return false;  }  if ("".equals(getMarketURL(context))) {    return false;  }  VersionNumberGetter getter=getVersionNumberGetter();  String currentStr=getter.getCurrentlyUsedVersion(context);  String latestStr=getter.getLatestKnownVersion(context,PREF_PACKAGE,PREF_LATEST_VERSION);  VersionNumber currentVersionNumber=VersionNumber.fromString(currentStr);  VersionNumber latestVersionNumber=VersionNumber.fromString(latestStr);  if (currentVersionNumber == null || latestVersionNumber == null) {    return false;  }  return currentVersionNumber.isSmallerThan(latestVersionNumber);}  }
class C{  @Deprecated public static ZNRecord generateConfigForOnlineOffline(){  ZNRecord record=new ZNRecord("OnlineOffline");  record.setSimpleField(StateModelDefinitionProperty.INITIAL_STATE.toString(),"OFFLINE");  List<String> statePriorityList=new ArrayList<String>();  statePriorityList.add("ONLINE");  statePriorityList.add("OFFLINE");  statePriorityList.add("DROPPED");  record.setListField(StateModelDefinitionProperty.STATE_PRIORITY_LIST.toString(),statePriorityList);  for (  String state : statePriorityList) {    String key=state + ".meta";    Map<String,String> metadata=new HashMap<String,String>();    if (state.equals("ONLINE")) {      metadata.put("count","R");      record.setMapField(key,metadata);    }    if (state.equals("OFFLINE")) {      metadata.put("count","-1");      record.setMapField(key,metadata);    }    if (state.equals("DROPPED")) {      metadata.put("count","-1");      record.setMapField(key,metadata);    }  }  for (  String state : statePriorityList) {    String key=state + ".next";    if (state.equals("ONLINE")) {      Map<String,String> metadata=new HashMap<String,String>();      metadata.put("OFFLINE","OFFLINE");      metadata.put("DROPPED","OFFLINE");      record.setMapField(key,metadata);    }    if (state.equals("OFFLINE")) {      Map<String,String> metadata=new HashMap<String,String>();      metadata.put("ONLINE","ONLINE");      metadata.put("DROPPED","DROPPED");      record.setMapField(key,metadata);    }  }  List<String> stateTransitionPriorityList=new ArrayList<String>();  stateTransitionPriorityList.add("OFFLINE-ONLINE");  stateTransitionPriorityList.add("ONLINE-OFFLINE");  stateTransitionPriorityList.add("OFFLINE-DROPPED");  record.setListField(StateModelDefinitionProperty.STATE_TRANSITION_PRIORITYLIST.toString(),stateTransitionPriorityList);  return record;}  }
class C{  public synchronized void startPreview(){  Camera theCamera=camera;  if (theCamera != null && !previewing) {    theCamera.startPreview();    previewing=true;    autoFocusManager=new AutoFocusManager(context,camera);  }}  }
class C{  public static final boolean readFromStream(InputStream in,byte[] buf,int offset,int len) throws IOException {  int totalBytesRead=0;  while (totalBytesRead < len) {    int bytesRead=in.read(buf,offset + totalBytesRead,len - totalBytesRead);    if (bytesRead < 0) {      return false;    }    totalBytesRead+=bytesRead;  }  return true;}  }
class C{  @NonNull public static TextDrawable createAvatar(String accountName,float radiusInDp) throws UnsupportedEncodingException, NoSuchAlgorithmException {  int[] rgb=BitmapUtils.calculateRGB(accountName);  TextDrawable avatar=new TextDrawable(accountName.substring(0,1).toUpperCase(),rgb[0],rgb[1],rgb[2],radiusInDp);  return avatar;}  }
class C{  public boolean isGuaranteedDelivery(){  return this.guaranteedDelivery;}  }
class C{  public void init$Children(){  children=new ASTNode[3];  setChild(new Opt(),2);}  }
class C{  protected GroupsDeleteLinkQuery groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  public boolean retainEntries(TObjectLongProcedure<K> procedure){  boolean modified=false;  K[] keys=(K[])_set;  long[] values=_values;  tempDisableAutoCompaction();  try {    for (int i=keys.length; i-- > 0; ) {      if (keys[i] != FREE && keys[i] != REMOVED && !procedure.execute(keys[i],values[i])) {        removeAt(i);        modified=true;      }    }  }  finally {    reenableAutoCompaction(true);  }  return modified;}  }
class C{  public DynamicTemplateParameterContext appendParameter(DynamicContextParameters param,String paramValue,ContextInfo contextInfo){  return appendParameter(param,paramValue,false,contextInfo);}  }
class C{  public Object[] keys(){  Object[] keys=new Object[size()];  K[] k=(K[])_set;  for (int i=k.length, j=0; i-- > 0; ) {    if (k[i] != FREE && k[i] != REMOVED) {      keys[j++]=k[i];    }  }  return keys;}  }
class C{  public static KeyStore createEmptyKeyStore(String keyStoreType,String provider){  if (keyStoreType == null) {    keyStoreType="BKS";  }  KeyStore keyStore;  try {    if (provider == null) {      keyStore=KeyStore.getInstance(keyStoreType);    } else {      keyStore=KeyStore.getInstance(keyStoreType,provider);    }    keyStore.load(null,null);  } catch (  KeyStoreException|CertificateException|NoSuchAlgorithmException|NoSuchProviderException|IOException e) {    throw new KeyStoreAccessException("Error creating or initializing new KeyStore of type: " + keyStoreType,e);  }  return keyStore;}  }
class C{  public void xtnLockEntryOnTemplateOperation(Context context,IEntryHolder eh,ITemplateHolder th,XtnEntry alreadyLockedXtn){  if (th.getXidOriginated() != alreadyLockedXtn && th.getXidOriginated() != null)   th.getXidOriginated().lock();}  }
class C{  public static Object parseFile(String resourceFolder,String resourceName,String schemaResource,Class<?> classToParse){  String fullResourceName=resourceFolder + resourceName;  logger.debug("Reading : " + fullResourceName);  InputStream inputStream=ParseXML.class.getResourceAsStream(fullResourceName);  if (inputStream == null) {    File file=new File(fullResourceName);    if (!file.exists()) {      ConsoleManager.getInstance().error(ParseXML.class,Localisation.getField(ParseXML.class,"ParseXML.failedToFindResource") + fullResourceName);      return null;    }    try {      inputStream=new FileInputStream(file);    } catch (    FileNotFoundException e) {      ConsoleManager.getInstance().error(ParseXML.class,Localisation.getField(ParseXML.class,"ParseXML.failedToFindResource") + fullResourceName);      return null;    }  }  ValidationEventCollector vec=new ValidationEventCollector();  URL xsdURL=ParseXML.class.getResource(schemaResource);  try {    SchemaFactory sf=SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);    Schema schema=sf.newSchema(xsdURL);    JAXBContext jaxbContext=JAXBContext.newInstance(classToParse);    Unmarshaller jaxbUnmarshaller=jaxbContext.createUnmarshaller();    jaxbUnmarshaller.setSchema(schema);    jaxbUnmarshaller.setEventHandler(vec);    return jaxbUnmarshaller.unmarshal(inputStream);  } catch (  SAXException e) {    ConsoleManager.getInstance().exception(ParseXML.class,e);  }catch (  javax.xml.bind.UnmarshalException ex) {    if (vec != null && vec.hasEvents()) {      for (      ValidationEvent ve : vec.getEvents()) {        String msg=ve.getMessage();        ValidationEventLocator vel=ve.getLocator();        String message=String.format("%s %s %s %s %s %d %s %d %s",Localisation.getField(ParseXML.class,"ParseXML.failedToValidate"),fullResourceName,Localisation.getField(ParseXML.class,"ParseXML.usingXSD"),xsdURL.toString(),Localisation.getField(ParseXML.class,"ParseXML.line"),vel.getLineNumber(),Localisation.getField(ParseXML.class,"ParseXML.column"),vel.getColumnNumber(),msg);        ConsoleManager.getInstance().error(ParseXML.class,message);      }    }  }catch (  JAXBException e) {    ConsoleManager.getInstance().exception(ParseXML.class,e);  }  return null;}  }
class C{  private Date parseDate(String date){  Calendar calendar=Calendar.getInstance();  try {    calendar.setTime(DateFormat.getDateInstance(DateFormat.SHORT).parse(date));  } catch (  ParseException e) {  }  calendar.set(Calendar.HOUR_OF_DAY,0);  calendar.set(Calendar.MINUTE,0);  calendar.set(Calendar.SECOND,0);  return calendar.getTime();}  }
class C{  public LoadObject(int state){  this.state=state;}  }
class C{  public AudioSaveQuery artist(String value){  return unsafeParam("artist",value);}  }
class C{  public void collapse(TreePath[] paths){  for (  TreePath path : paths) {    collapse((DefaultMutableTreeNode)path.getLastPathComponent());  }}  }
class C{  void onRendererCrashed(){  if (mRestoreStartedAtMillis != -1) {    mRestoreStartedAtMillis=-1;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATKDrain_INTERVAL_HEAL_MP_TO_B(String skilltarget,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201162,skilltarget,num0,skillname);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Bleed_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200308,skillname);}  }
class C{  public void insertData(int offset,String data) throws DOMException {  internalInsertData(offset,data,false);}  }
class C{  protected AuthSignupQuery lastName(String value){  return unsafeParam("last_name",value);}  }
class C{  public boolean isContent(){  return state == State.CONTENT;}  }
class C{  @Override protected void onPrimaryColorChanged(boolean shouldAnimate){  if (mBackgroundColorSet)   return;  mBackgroundColorSet=true;  int primaryColor=getToolbarDataProvider().getPrimaryColor();  getBackground().setColor(primaryColor);  mUseDarkColors=!ColorUtils.shoudUseLightForegroundOnBackground(primaryColor);  updateVisualsForState();}  }
class C{  public static Field create(MessageType parent,FieldDescriptorProto proto,String path,@Nullable Oneof oneof){  return new Field(parent,proto,path,oneof,proto.getName());}  }
class C{  public static void write(String data,Writer output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  private void initPasswordListener(View shareView){  mOnPasswordInteractionListener=new OnPasswordInteractionListener();  ((SwitchCompat)shareView.findViewById(R.id.shareViaLinkPasswordSwitch)).setOnCheckedChangeListener(mOnPasswordInteractionListener);  shareView.findViewById(R.id.shareViaLinkPasswordLabel).setOnClickListener(mOnPasswordInteractionListener);  shareView.findViewById(R.id.shareViaLinkPasswordValue).setOnClickListener(mOnPasswordInteractionListener);}  }
class C{  @Nullable public static Labels fromSnippets(KindredSnippets[] snippets){  for (  KindredSnippets obj : snippets) {    if (obj instanceof Labels) {      return (Labels)obj;    }  }  return null;}  }
class C{  private void close(Collection<WatchedObject> bucket,SocketAddress serverAddress,Exception e,long originalInvocationVersion) throws IOException {  for (  WatchedObject watched : bucket) {    long currentWatchedInvocationVersion=watched.getVersion();    if (!RequestResponseTimeoutObserver.DISABLE_RESPONSE_WATCH && currentWatchedInvocationVersion > originalInvocationVersion) {      if (_logger.isLoggable(Level.FINER)) {        _logger.log(Level.FINER,"Not closing invalid connection as current invocation version does not match" + " original invocation version. [original version=" + originalInvocationVersion + ", current version="+ currentWatchedInvocationVersion+ "original message ["+ getInvalidConnectionMessage(serverAddress,watched.getSocket(),watched)+ "["+ e+ "]]");      }      continue;    }    try {      watched.stopWatch();      watched.setException(e);      Level closeConnectionLoggingLevel=getCloseConnectionLoggingLevel();      if (_logger.isLoggable(closeConnectionLoggingLevel)) {        String invalidConnectionMessage=getInvalidConnectionMessage(serverAddress,watched.getSocket(),watched);        _logger.log(closeConnectionLoggingLevel,invalidConnectionMessage + "[" + e+ "]",e);      }      if (watched.getSocket().isBlocking()) {        watched.getSocket().close();      } else {        AsyncContext context=((CPeer)watched.getClient()).getAsyncContext();        if (context != null) {          context.setSelectionKey(null);          context.close(new ClosedChannelException());        }      }    } catch (    Exception ex) {      if (_logger.isLoggable(Level.FINE)) {        _logger.log(Level.FINE,getFailureToCloseInvalidConnectionMessage(serverAddress,watched.getSocket()),ex);      }    }  }}  }
class C{  private void onException(Exception e){  if (e instanceof IllegalArgumentException) {  } else {  }  finishedTasks++;}  }
class C{  private static void markChecked(String category,String name,boolean createWithProject){  String key=getCheckKey(category,name,createWithProject);  ourTemplatesChecked.add(key);}  }
class C{  public static void main(String[] args) throws IOException, URISyntaxException {  if (!new Convert().convertTTML(args)) {    System.exit(1);  }}  }
class C{  public static PublicKey generatePublicKey(String encodedPublicKey){  try {    byte[] decodedKey=Base64.decode(encodedPublicKey);    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }catch (  InvalidKeySpecException e) {    Log.e(TAG,"Invalid key specification.");    throw new IllegalArgumentException(e);  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");    throw new IllegalArgumentException(e);  }}  }
class C{  public NegExpr newNegExpr(Value op){  return new JNegExpr(op);}  }
class C{  public boolean routeExists(String to){  RoutesMap routesMap=forwardTable.get(to);  if (routesMap == null) {    return false;  }  return (routesMap.size() > 0);}  }
class C{  public static ProbeItemDescriptor discreteBarItem(String name,String description,ItemValueFormatter formatter,double dataFactor,long minValue,long maxValue,float lineWidth,Color lineColor,Color fillColor,int width,boolean fixedWidth){  if (lineColor == null && fillColor == null)   throw new IllegalArgumentException("Either lineColor or fillColor must be defined");  return discreteItem(name,description,formatter,dataFactor,minValue,maxValue,lineWidth,lineColor,fillColor,width,fixedWidth,false,fillColor == null);}  }
class C{  public static Zmat o(Zmat A,Zdiagmat D) throws JampackException {  if (D.order != A.nrow || D.order != A.ncol) {    throw new JampackException("Matrices not conformable for addition");  }  Zmat C=new Zmat(A);  for (int i=0; i < A.nrow; i++) {    C.re[i][i]=C.re[i][i] + D.re[i];    C.im[i][i]=C.im[i][i] + D.im[i];  }  return C;}  }
class C{  protected int indexFor(int h,int length){  return h & (length - 1);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.camera);  CameraManager.init(getApplication());  viewfinderView=(ViewfinderView)findViewById(R.id.viewfinder_view);  cancelScanButton=(Button)this.findViewById(R.id.btn_cancel_scan);  hasSurface=false;  inactivityTimer=new InactivityTimer(this);}  }
class C{  private void delayedHide(int delayMillis){  mHideHandler.removeCallbacks(mHideRunnable);  mHideHandler.postDelayed(mHideRunnable,delayMillis);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_QUEST_SYSTEMMSG_ACQUIRE_QUEST(String value0){  return new SM_SYSTEM_MESSAGE(1300613,value0);}  }
class C{  @Scheduled(fixedRate=300000,initialDelay=300000) public void refreshAllUnknownTags(){  if (LOG.isTraceEnabled()) {    LOG.trace("refreshAllUnknownTags() - Start refreshing all unknown tags ... ");  }  Set<Long> unknownTags=new HashSet<>();  try {    if (!cache.isHistoryModeEnabled()) {      for (      Tag cdt : cache.getAllSubscribedDataTags()) {        if (!cdt.getDataTagQuality().isExistingTag()) {          unknownTags.add(cdt.getId());        }      }      if (!unknownTags.isEmpty()) {        if (LOG.isDebugEnabled()) {          LOG.debug("refreshAllUnknownTags() - trying to refresh " + unknownTags.size() + " tags marked as UNKNOWN ...");        }        cache.refresh(unknownTags);      }    }  } catch (  Exception e) {    LOG.error("refreshAllUnknownTags() - An error occured while trying to refresh all unknown tags from the server.",e);  }  if (LOG.isTraceEnabled()) {    LOG.trace("refreshAllUnknownTags() - Scheduled task finished. Next call in 5 minutes.");  }}  }
class C{  protected CreateIndexRequestBuilder prepareCreateIndexRequestBuilder(String index){  log.debug("Prepare ES request to create new index {} with {} shards and {} replicas",index,shards,replicas);  CreateIndexRequestBuilder builder=client.admin().indices().prepareCreate(index);  Settings indexSettings=Settings.settingsBuilder().put("number_of_shards",shards).put("number_of_replicas",replicas).build();  builder.setSettings(indexSettings);  return builder;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SwitchHPMP_Instant_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200581,skilltarget,skillname);}  }
class C{  private String proxyToString(Object proxy){  Class[] interfaces=proxy.getClass().getInterfaces();  Class iface=null;  for (int i=interfaces.length; --i >= 0; iface=interfaces[i]) {    if (interfaces[i] == RemoteMethodControl.class) {      break;    }  }  if (iface == null) {    return "Proxy[" + this + "]";  }  String n=iface.getName();  int dot=n.lastIndexOf('.');  if (dot >= 0) {    n=n.substring(dot + 1);  }  return "Proxy[" + n + ","+ this+ "]";}  }
class C{  public static String substituteParams(String sql,List<Integer> paramOrder) throws IOException {  if (sql.indexOf("?") == -1)   return sql;  paramOrder.clear();  StreamTokenizer tok=new StreamTokenizer(new StringReader(sql));  tok.resetSyntax();  tok.quoteChar('\'');  tok.wordChars('0','9');  tok.wordChars('?','?');  StringBuilder buf=new StringBuilder(sql.length());  for (int ttype; (ttype=tok.nextToken()) != StreamTokenizer.TT_EOF; ) {switch (ttype) {case StreamTokenizer.TT_WORD:      if (tok.sval.startsWith("?")) {        buf.append("?");        String pIndex=tok.sval.substring(1);        if (pIndex.length() > 0) {          paramOrder.add(Integer.valueOf(pIndex));        } else {          paramOrder.add(paramOrder.size() + 1);        }      } else       buf.append(tok.sval);    break;case '\'':  buf.append('\'');if (tok.sval != null) {  buf.append(tok.sval);  buf.append('\'');}break;default :buf.append((char)ttype);}}return buf.toString();}  }
class C{  public void sendCatchMeClickedInitNumber(){  for (int i=0; i < roomClients.size(); i++)   if (roomClients.get(i).getsEnteredRoom().equals(getsRoomName())) {    roomClients.get(i).setnCatchmePlayCount(getnCatchmePlayCount());    roomClients.get(i).sendPacket(Settings._ANSWER_CATCHME_INIT_PLAY_CLICKED_NUMBER + "",roomClients.get(i).getnCatchmePlayCount() + "");  }}  }
class C{  public boolean isDrawBarShadowEnabled(){  return mDrawBarShadow;}  }
class C{  static public void delTree(String dirName,String excludedDirName){  File dir=new File(dirName);  File[] files=dir.listFiles();  if (files != null) {    for (int i=0; i < files.length; i++) {      if (files[i].isFile())       files[i].delete(); else {        if (excludedDirName != null && files[i].getPath().equalsIgnoreCase(dir + File.separator + excludedDirName))         continue;        delTree(files[i].getPath(),excludedDirName);      }    }    dir.delete();  }}  }
class C{  protected AbstractPolynomialSolver(final double absoluteAccuracy){  super(absoluteAccuracy);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public int length(){  return Histogram.length() + Graph.length();}  }
class C{  public void addParameter(ParameterDeclaration node){  List<ParameterDeclaration> list=(parent == null || state == null) ? getParameterListNoTransform() : getParameterList();  list.addChild(node);}  }
class C{  private void removeEquipmentCommands(Equipment equipment,ConfigurationElementReport equipmentReport){  for (  Long commandTagId : new ArrayList<Long>(equipment.getCommandTagIds())) {    ConfigurationElementReport commandReport=new ConfigurationElementReport(Action.REMOVE,Entity.COMMANDTAG,commandTagId);    equipmentReport.addSubReport(commandReport);    commandTagConfigHandler.removeCommandTag(commandTagId,commandReport);  }}  }
class C{  public void increaseNestingLevel(){  currentNestingLevel++;}  }
class C{  public int size(){  return m_clauses.size();}  }
class C{  public void updateKey(byte[] blowfishKey){  this.blowfishKey=blowfishKey;  System.arraycopy(SBOX_INIT_0,0,sBoxes[0],0,256);  System.arraycopy(SBOX_INIT_1,0,sBoxes[1],0,256);  System.arraycopy(SBOX_INIT_2,0,sBoxes[2],0,256);  System.arraycopy(SBOX_INIT_3,0,sBoxes[3],0,256);  initArrays();}  }
class C{  public static boolean needRecalculate(String returnAdjustmentTypeId){  return "RET_PROMOTION_ADJ".equals(returnAdjustmentTypeId) || "RET_DISCOUNT_ADJ".equals(returnAdjustmentTypeId) || "RET_SALES_TAX_ADJ".equals(returnAdjustmentTypeId);}  }
class C{  public JobRequestFailedException(String message,Throwable cause){  super(message,cause);}  }
class C{  @Override public void addView(View child,int index,ViewGroup.LayoutParams params){  if (child.getId() == R.id.card_root) {    super.addView(child,index,params);  } else   if (child instanceof ActionButton) {    addActionButton((ActionButton)child);  }}  }
class C{  public boolean hasCategoryOptionGroupSet(){  return categoryOptionGroupSet != null;}  }
class C{  @NotNull @VisibleForTesting Collection<Constraint> validateStringType(@Nullable Project project,@Nullable Module module,@Nullable SourceProvider provider,@Nullable String packageName,@Nullable String value,@Nullable Set<Object> relatedValues){  GlobalSearchScope searchScope=module != null ? GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(module) : GlobalSearchScope.EMPTY_SCOPE;  Set<Constraint> violations=Sets.newHashSet();  if (value == null || value.isEmpty()) {    if (constraints.contains(Constraint.NONEMPTY)) {      violations.add(Constraint.NONEMPTY);    }    return violations;  }  boolean exists=false;  String fqName=(packageName != null && value.indexOf('.') == -1 ? packageName + "." : "") + value;  if (constraints.contains(Constraint.ACTIVITY)) {    if (!isValidFullyQualifiedJavaIdentifier(fqName)) {      violations.add(Constraint.ACTIVITY);    }    if (project != null) {      PsiClass aClass=JavaPsiFacade.getInstance(project).findClass(fqName,searchScope);      PsiClass activityClass=JavaPsiFacade.getInstance(project).findClass(SdkConstants.CLASS_ACTIVITY,GlobalSearchScope.allScope(project));      exists=aClass != null && activityClass != null && aClass.isInheritor(activityClass,true);    }  }  if (constraints.contains(Constraint.APILEVEL)) {  }  if (constraints.contains(Constraint.CLASS)) {    if (!isValidFullyQualifiedJavaIdentifier(fqName)) {      violations.add(Constraint.CLASS);    }    if (project != null) {      exists=existsClassFile(project,searchScope,provider,fqName);    }  }  if (constraints.contains(Constraint.PACKAGE)) {    if (!isValidFullyQualifiedJavaIdentifier(value)) {      violations.add(Constraint.PACKAGE);    }    if (project != null) {      exists=existsPackage(project,provider,value);    }  }  if (constraints.contains(Constraint.MODULE)) {    if (project != null) {      exists=ModuleManager.getInstance(project).findModuleByName(value) != null;    }  }  if (constraints.contains(Constraint.APP_PACKAGE)) {    String message=AndroidUtils.validateAndroidPackageName(value);    if (message != null) {      violations.add(Constraint.APP_PACKAGE);    }    if (project != null) {      exists=existsPackage(project,provider,value);    }  }  if (constraints.contains(Constraint.LAYOUT)) {    String resourceNameError=ResourceNameValidator.create(false,ResourceFolderType.LAYOUT).getErrorText(value);    if (resourceNameError != null) {      violations.add(Constraint.LAYOUT);    }    exists=provider != null ? existsResourceFile(provider,module,ResourceFolderType.LAYOUT,ResourceType.LAYOUT,value) : existsResourceFile(module,ResourceType.LAYOUT,value);  }  if (constraints.contains(Constraint.DRAWABLE)) {    String resourceNameError=ResourceNameValidator.create(false,ResourceFolderType.DRAWABLE).getErrorText(value);    if (resourceNameError != null) {      violations.add(Constraint.DRAWABLE);    }    exists=provider != null ? existsResourceFile(provider,module,ResourceFolderType.DRAWABLE,ResourceType.DRAWABLE,value) : existsResourceFile(module,ResourceType.DRAWABLE,value);  }  if (constraints.contains(Constraint.ID)) {  }  if (constraints.contains(Constraint.VALUES)) {    String resourceNameError=ResourceNameValidator.create(false,ResourceFolderType.VALUES).getErrorText(value);    if (resourceNameError != null) {      violations.add(Constraint.VALUES);    }    if (provider != null) {      for (      File resDir : provider.getResDirectories()) {        if (existsResourceFile(resDir,ResourceFolderType.VALUES,value)) {          exists=true;          break;        }      }    }  }  if (constraints.contains(Constraint.STRING)) {    String resourceNameError=ResourceNameValidator.create(false,ResourceFolderType.VALUES).getErrorText(value);    if (resourceNameError != null) {      violations.add(Constraint.STRING);    }  }  if (constraints.contains(Constraint.SOURCE_SET_FOLDER)) {    if (module != null) {      AndroidFacet facet=AndroidFacet.getInstance(module);      if (facet != null) {        String modulePath=AndroidRootUtil.getModuleDirPath(module);        if (modulePath != null) {          File file=new File(FileUtil.toSystemDependentName(modulePath),value);          VirtualFile vFile=VfsUtil.findFileByIoFile(file,true);          exists=!IdeaSourceProvider.getSourceProvidersForFile(facet,vFile,null).isEmpty();        }      }    }  }  if (relatedValues != null && relatedValues.contains(value)) {    exists=true;  }  if (constraints.contains(Constraint.UNIQUE) && exists) {    violations.add(Constraint.UNIQUE);  } else   if (constraints.contains(Constraint.EXISTS) && !exists) {    violations.add(Constraint.EXISTS);  }  if (constraints.contains(Constraint.URI_AUTHORITY)) {    if (!value.matches(URI_AUTHORITY_REGEX + "(;" + URI_AUTHORITY_REGEX+ ")*")) {      violations.add(Constraint.URI_AUTHORITY);    }  }  return violations;}  }
class C{  public void clearDiscCache(){  checkConfiguration();  configuration.discCache.clear();}  }
class C{  public String toString(cp_info constant_pool[]){  CONSTANT_Class_info cc=(CONSTANT_Class_info)(constant_pool[class_index]);  CONSTANT_NameAndType_info cn=(CONSTANT_NameAndType_info)(constant_pool[name_and_type_index]);  return cc.toString(constant_pool) + "." + cn.toString(constant_pool);}  }
class C{  public static final HalfEllipse scale(HalfEllipse halfEllipse,double scale){  if (halfEllipse == null)   throw new NullPointerException(Messages.getString("geometry.nullShape"));  if (scale <= 0)   throw new IllegalArgumentException(Messages.getString("geometry.invalidScale"));  return new HalfEllipse(halfEllipse.getWidth() * scale,halfEllipse.getHeight() * scale);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_ABSORBED_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201086,skillcaster,skillname);}  }
class C{  public static void addExceptionAfterUnit(Body b,String exceptionType,Unit u,String m){  LocalCreation lc=new LocalCreation(b.getLocals());  Local l=lc.newLocal(RefType.v(exceptionType));  List<Unit> newUnits=new ArrayList<Unit>();  Unit u1=Jimple.v().newAssignStmt(l,Jimple.v().newNewExpr(RefType.v(exceptionType)));  Unit u2=Jimple.v().newInvokeStmt(Jimple.v().newSpecialInvokeExpr(l,Scene.v().makeMethodRef(Scene.v().getSootClass(exceptionType),"<init>",Collections.singletonList((Type)RefType.v("java.lang.String")),VoidType.v(),false),StringConstant.v(m)));  Unit u3=Jimple.v().newThrowStmt(l);  newUnits.add(u1);  newUnits.add(u2);  newUnits.add(u3);  b.getUnits().insertBefore(newUnits,u);}  }
class C{  public static double sum(Iterator tuples,String field){  try {    double sum=0;    while (tuples.hasNext()) {      sum+=((Tuple)tuples.next()).getDouble(field);    }    return sum;  } catch (  Exception e) {    return Double.NaN;  }}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,Writer writer) throws IOException {  if (lines == null) {    return;  }  if (lineEnding == null) {    lineEnding=LINE_SEPARATOR;  }  for (  Object line : lines) {    if (line != null) {      writer.write(line.toString());    }    writer.write(lineEnding);  }}  }
class C{  public static void addDeepLinkAtCaret(@NotNull Project project,@NotNull Editor editor,@NotNull PsiFile file){  PsiElement psiElement=file.findElementAt(editor.getCaretModel().getOffset());  if (psiElement != null) {    XmlTag activity=findXmlTagByName(psiElement,SdkConstants.TAG_ACTIVITY);    XmlTag manifest=((XmlFile)file).getRootTag();    if (activity != null && manifest != null) {      String prefix=manifest.getPrefixByNamespace(SdkConstants.ANDROID_URI);      String activityName=activity.getAttributeValue(SdkConstants.ATTR_NAME,SdkConstants.ANDROID_URI);      String pathPrefix=activityName == null ? "/" : "/" + generatePathPrefix(activityName);      String tagContent=String.format(IF_CONTENT_FORMAT,prefix != null ? prefix : SdkConstants.ANDROID_NS_NAME,pathPrefix);      XmlTag intentFilter=activity.createChildTag(SdkConstants.TAG_INTENT_FILTER,null,tagContent,false);      XmlTag tagAdded=activity.addSubTag(intentFilter,false);      activity.addBefore(createXmlComment(project,IF_COMMENT_TEXT),tagAdded);      XmlTag dataTag=tagAdded.findFirstSubTag(SdkConstants.TAG_DATA);      if (dataTag != null) {        tagAdded.addBefore(createXmlComment(project,DATA_COMMENT_TEXT),dataTag);      }    }  }}  }
class C{  public Single<AuthResult> createUserWithEmailAndPassword(final String _email,final String _password){  return observeSingleValue(firebaseAuth.createUserWithEmailAndPassword(_email,_password));}  }
class C{  public void begin(int size){  outputData=new byte[size / 2];  curIndex=0;}  }
class C{  private void showEmpty(){  progressBar.setVisibility(View.GONE);  recyclerView.setVisibility(View.GONE);  emptyTextView.setVisibility(View.VISIBLE);}  }
class C{  @VisibleForTesting static boolean shouldOpenAfterDownload(DownloadInfo downloadInfo){  String type=downloadInfo.getMimeType();  return downloadInfo.hasUserGesture() && !isAttachment(downloadInfo.getContentDisposition()) && MIME_TYPES_TO_OPEN.contains(type);}  }
class C{  public ISVNRepositoryLocation createRepository(Properties configuration) throws SVNException {  SVNRepositoryLocation location=SVNRepositoryLocation.fromProperties(configuration);  SVNRepositoryLocation existingLocation=(SVNRepositoryLocation)repositories.get(location.getLocation());  if (existingLocation != null) {    throw new SVNException(new SVNStatus(SVNStatus.ERROR,Policy.bind("SVNProvider.alreadyExists")));  }  return location;}  }
class C{  public static int binomial(RandomGenerator rng,int n,double p){  if ((p < 0) || (p > 1)) {    return 0;  }  int c=0;  for (int i=0; i < n; i++) {    if (rng.nextDouble() < p) {      c++;    }  }  return c;}  }
class C{  public boolean isBatching(){  return batch;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_FPHeal_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200518,skilltarget,skillname);}  }
class C{  public synchronized <T extends BaseListener>void doSubscription(final Set<Long> tagIds,final T listener){  if (tagIds == null) {    String error="Called with null parameter (id collection). Ignoring request.";    log.warn("doSubscription() : " + error);    throw new IllegalArgumentException(error);  }  if (listener == null) {    String error="Called with null parameter (BaseTagListener). Ignoring request.";    log.warn("doSubscription() : " + error);    throw new IllegalArgumentException(error);  }  if (tagIds.isEmpty()) {    String info="Called with empty tag id list. Ignoring request.";    log.info("doSubscription() : " + info);    return;  }  if (log.isDebugEnabled()) {    log.debug(String.format("doSubscription() : called for %d tags.",tagIds.size()));  }  try {    cache.subscribe(tagIds,listener);    tagUpdateListeners.add(listener);  } catch (  CacheSynchronizationException cse) {    log.error("doSubscription() : Cache error occured while subscribing to data tags ==> Rolling back subscription.",cse);    cache.unsubscribeDataTags(tagIds,listener);    throw cse;  }}  }
class C{  public static UByte valueOf(long value) throws NumberFormatException {  return valueOfUnchecked(rangeCheck(value));}  }
class C{  private void inflateConnectedTextColor(){  if (mConnectedTextColor != R.color.connectivity_color) {    connectivityText.setTextColor(ColorUtil.getColorWrapper(mContext,mConnectedTextColor));  }}  }
class C{  public final void load(String locale){  if (locale != null)   locale=locale.replace('-','_');  try {    URL url=locale == null ? this.getDefaultLanguageFile() : this.getClass().getResource("/assets/rewimod/lang/" + locale + ".lang");    if (url == null) {      url=this.getDefaultLanguageFile();    }    InputStreamReader reader=new InputStreamReader(url.openStream(),StandardCharsets.UTF_8);    this.parse(new BufferedReader(reader));  } catch (  IOException ex) {    RewiMod.LOGGER.fatal("Error while loading Language File",ex);  }}  }
class C{  protected void constructPDG(){  Hashtable<Block,Region> block2region=this.m_regionAnalysis.getBlock2RegionMap();  DominatorTree<Block> pdom=this.m_regionAnalysis.getPostDominatorTree();  DominatorTree<Block> dom=this.m_regionAnalysis.getDominatorTree();  List<Region> regions2process=new LinkedList<Region>();  Region topLevelRegion=this.m_regionAnalysis.getTopLevelRegion();  m_strongRegionStartID=m_weakRegions.size();  PDGNode pdgnode=new PDGNode(topLevelRegion,PDGNode.Type.REGION);  this.addNode(pdgnode);  this.m_obj2pdgNode.put(topLevelRegion,pdgnode);  this.m_startNode=pdgnode;  topLevelRegion.setParent(null);  Set<Region> processedRegions=new HashSet<Region>();  regions2process.add(topLevelRegion);  while (!regions2process.isEmpty()) {    Region r=regions2process.remove(0);    processedRegions.add(r);    pdgnode=this.m_obj2pdgNode.get(r);    List<Block> blocks=r.getBlocks();    Hashtable<Region,List<Block>> toBeRemoved=new Hashtable<Region,List<Block>>();    PDGNode prevPDGNodeInRegion=null;    PDGNode curNodeInRegion=null;    for (Iterator<Block> itr=blocks.iterator(); itr.hasNext(); ) {      Block a=itr.next();      PDGNode pdgNodeOfA=null;      if (!this.m_obj2pdgNode.containsKey(a)) {        pdgNodeOfA=new PDGNode(a,PDGNode.Type.CFGNODE);        this.addNode(pdgNodeOfA);        this.m_obj2pdgNode.put(a,pdgNodeOfA);      } else       pdgNodeOfA=this.m_obj2pdgNode.get(a);      this.addEdge(pdgnode,pdgNodeOfA,"dependency");      pdgnode.addDependent(pdgNodeOfA);      curNodeInRegion=pdgNodeOfA;      List<Block> bs=this.m_blockCFG.getSuccsOf(a);      for (Iterator<Block> bItr=bs.iterator(); bItr.hasNext(); ) {        List<Block> dependents=new ArrayList<Block>();        Block b=bItr.next();        if (b.equals(a))         throw new RuntimeException("PDG construction: A and B are not supposed to be the same node!");        DominatorNode<Block> aDode=pdom.getDode(a);        DominatorNode<Block> bDode=pdom.getDode(b);        if (pdom.isDominatorOf(bDode,aDode))         continue;        DominatorNode<Block> aParentDode=aDode.getParent();        DominatorNode<Block> dode=bDode;        while (dode != aParentDode) {          dependents.add((Block)dode.getGode());          if (dode.getParent() == null)           break;          dode=dode.getParent();        }        if (pdgNodeOfA.getAttrib() != PDGNode.Attribute.CONDHEADER) {          PDGNode oldA=pdgNodeOfA;          pdgNodeOfA=new ConditionalPDGNode(pdgNodeOfA);          this.replaceInGraph(pdgNodeOfA,oldA);          pdgnode.removeDependent(oldA);          this.m_obj2pdgNode.put(a,pdgNodeOfA);          pdgnode.addDependent(pdgNodeOfA);          pdgNodeOfA.setAttrib(PDGNode.Attribute.CONDHEADER);          curNodeInRegion=pdgNodeOfA;        }        List<Block> copyOfDependents=new ArrayList<Block>();        copyOfDependents.addAll(dependents);        Region regionOfB=block2region.get(b);        PDGNode pdgnodeOfBRegion=null;        if (!this.m_obj2pdgNode.containsKey(regionOfB)) {          pdgnodeOfBRegion=new PDGNode(regionOfB,PDGNode.Type.REGION);          this.addNode(pdgnodeOfBRegion);          this.m_obj2pdgNode.put(regionOfB,pdgnodeOfBRegion);        } else         pdgnodeOfBRegion=this.m_obj2pdgNode.get(regionOfB);        regionOfB.setParent(r);        r.addChildRegion(regionOfB);        this.addEdge(pdgNodeOfA,pdgnodeOfBRegion,"dependency");        pdgNodeOfA.addDependent(pdgnodeOfBRegion);        if (!processedRegions.contains(regionOfB)) {          regions2process.add(regionOfB);        }        copyOfDependents.remove(b);        copyOfDependents.removeAll(regionOfB.getBlocks());        while (!copyOfDependents.isEmpty()) {          Block depB=copyOfDependents.remove(0);          Region rdepB=block2region.get(depB);          PDGNode depBPDGNode=this.m_obj2pdgNode.get(depB);          if (depBPDGNode == null) {            PDGNode pdgnodeOfdepBRegion=null;            if (!this.m_obj2pdgNode.containsKey(rdepB)) {              pdgnodeOfdepBRegion=new PDGNode(rdepB,PDGNode.Type.REGION);              this.addNode(pdgnodeOfdepBRegion);              this.m_obj2pdgNode.put(rdepB,pdgnodeOfdepBRegion);            } else             pdgnodeOfdepBRegion=this.m_obj2pdgNode.get(rdepB);            rdepB.setParent(regionOfB);            regionOfB.addChildRegion(rdepB);            this.addEdge(pdgnodeOfBRegion,pdgnodeOfdepBRegion,"dependency");            pdgnodeOfBRegion.addDependent(pdgnodeOfdepBRegion);            if (!processedRegions.contains(rdepB)) {              regions2process.add(rdepB);            }            copyOfDependents.removeAll(rdepB.getBlocks());            continue;          }          if (dependents.containsAll(rdepB.getBlocks())) {            PDGNode pdgnodeOfdepBRegion=null;            if (!this.m_obj2pdgNode.containsKey(rdepB)) {              pdgnodeOfdepBRegion=new PDGNode(rdepB,PDGNode.Type.REGION);              this.addNode(pdgnodeOfdepBRegion);              this.m_obj2pdgNode.put(rdepB,pdgnodeOfdepBRegion);            } else             pdgnodeOfdepBRegion=this.m_obj2pdgNode.get(rdepB);            this.addEdge(pdgnodeOfBRegion,pdgnodeOfdepBRegion,"dependency");            pdgnodeOfBRegion.addDependent(pdgnodeOfdepBRegion);            if (!processedRegions.contains(rdepB)) {              regions2process.add(rdepB);            }            copyOfDependents.removeAll(rdepB.getBlocks());            continue;          } else {            PDGNode predPDGofdepB=(PDGNode)this.getPredsOf(depBPDGNode).get(0);            assert (this.m_obj2pdgNode.containsKey(rdepB));            PDGNode pdgnodeOfdepBRegion=this.m_obj2pdgNode.get(rdepB);            if (predPDGofdepB == pdgnodeOfdepBRegion) {              Region newRegion=new Region(this.m_strongRegionStartID++,topLevelRegion.getSootMethod(),topLevelRegion.getSootClass(),this.m_cfg);              newRegion.add(depB);              this.m_strongRegions.add(newRegion);              List<Block> blocks2BRemoved;              if (toBeRemoved.contains(predPDGofdepB))               blocks2BRemoved=toBeRemoved.get(predPDGofdepB); else {                blocks2BRemoved=new ArrayList<Block>();                toBeRemoved.put(rdepB,blocks2BRemoved);              }              blocks2BRemoved.add(depB);              PDGNode newpdgnode=new LoopedPDGNode(newRegion,PDGNode.Type.REGION,depBPDGNode);              this.addNode(newpdgnode);              this.m_obj2pdgNode.put(newRegion,newpdgnode);              newpdgnode.setAttrib(PDGNode.Attribute.LOOPHEADER);              depBPDGNode.setAttrib(PDGNode.Attribute.LOOPHEADER);              this.removeEdge(pdgnodeOfdepBRegion,depBPDGNode,"dependency");              pdgnodeOfdepBRegion.removeDependent(depBPDGNode);              this.addEdge(pdgnodeOfdepBRegion,newpdgnode,"dependency");              this.addEdge(newpdgnode,depBPDGNode,"dependency");              pdgnodeOfdepBRegion.addDependent(newpdgnode);              newpdgnode.addDependent(depBPDGNode);              if (depB == a) {                PDGNode loopBodyPDGNode=(PDGNode)this.getSuccsOf(depBPDGNode).get(0);                this.addEdge(depBPDGNode,newpdgnode,"dependency-back");                ((LoopedPDGNode)newpdgnode).setBody(loopBodyPDGNode);                depBPDGNode.addBackDependent(newpdgnode);                curNodeInRegion=newpdgnode;              } else {                pdgnodeOfBRegion.addBackDependent(newpdgnode);                this.addEdge(pdgnodeOfBRegion,newpdgnode,"dependency-back");                PDGNode loopBodyPDGNode=null;                List<PDGNode> successors=this.getSuccsOf(depBPDGNode);                Iterator<PDGNode> succItr=successors.iterator();                while (succItr.hasNext()) {                  PDGNode succRPDGNode=succItr.next();                  assert (succRPDGNode.getType() == PDGNode.Type.REGION);                  Region succR=(Region)succRPDGNode.getNode();                  Block h=succR.getBlocks().get(0);                  DominatorNode<Block> hdode=dom.getDode(h);                  DominatorNode<Block> adode=dom.getDode(a);                  if (dom.isDominatorOf(hdode,adode)) {                    loopBodyPDGNode=succRPDGNode;                    break;                  }                }                assert (loopBodyPDGNode != null);                ((LoopedPDGNode)newpdgnode).setBody(loopBodyPDGNode);                PDGNode prev=depBPDGNode.getPrev();                if (prev != null) {                  this.removeEdge(prev,depBPDGNode,"controlflow");                  this.addEdge(prev,newpdgnode,"controlflow");                  prev.setNext(newpdgnode);                  newpdgnode.setPrev(prev);                  depBPDGNode.setPrev(null);                }                PDGNode next=depBPDGNode.getNext();                if (next != null) {                  this.removeEdge(depBPDGNode,next,"controlflow");                  this.addEdge(newpdgnode,next,"controlflow");                  newpdgnode.setNext(next);                  next.setPrev(newpdgnode);                  depBPDGNode.setNext(null);                }              }            } else {              this.addEdge(pdgnodeOfBRegion,predPDGofdepB,"dependency-back");              pdgnodeOfBRegion.addBackDependent(predPDGofdepB);            }          }        }      }      if (prevPDGNodeInRegion != null) {        this.addEdge(prevPDGNodeInRegion,curNodeInRegion,"controlflow");        prevPDGNodeInRegion.setNext(curNodeInRegion);        curNodeInRegion.setPrev(prevPDGNodeInRegion);      }      prevPDGNodeInRegion=curNodeInRegion;    }    Enumeration<Region> itr1=toBeRemoved.keys();    while (itr1.hasMoreElements()) {      Region region=itr1.nextElement();      Iterator<Block> blockItr=toBeRemoved.get(region).iterator();      while (blockItr.hasNext())       region.remove(blockItr.next());    }  }}  }
class C{  public void destroyView() throws CanceledException {  MeganProperties.removePropertiesListListener(getJMenuBar().getRecentFilesListener());  super.destroyView();}  }
class C{  @Override public void onClick(View view){switch (view.getId()) {case R.id.container_loading_view_large_feedbackBtn:    collectionsPresenter.initRefresh(getContext());  break;}}  }
class C{  public ShoppingCart(Delegator delegator,String productStoreId,String webSiteId,Locale locale,String currencyUom){  this(delegator,productStoreId,webSiteId,locale,currencyUom,null,null);}  }
class C{  public void messageArrived(final String topic,final MqttMessage message){  logger.debug("[{}] Received message on topic \"{}\". Payload = \"{}\"",messageQueue.size(),topic,new String(message.getPayload()));  final long newId=MessageIdGenerator.getNewId();  final FormattedMqttMessage receivedMessage=new FormattedMqttMessage(newId,topic,message,connection);  final List<String> matchingSubscriptions=connection.getTopicMatcher().getMatchingSubscriptions(receivedMessage.getTopic());  receivedMessage.setMatchingSubscriptionTopics(matchingSubscriptions);  logger.trace("Matching subscriptions for message on {} = {}",receivedMessage.getTopic(),matchingSubscriptions);  if (connectionSettings.getMessageLog().isLogBeforeScripts()) {    logMessage(new FormattedMqttMessage(receivedMessage));  }  final FormattedMqttMessage formattedMessage=new FormattedMqttMessage(newId,topic,message,connection);  if (connectionSettings.getFormatter() != null) {    formattingManager.formatMessage(formattedMessage,(FormatterDetails)connectionSettings.getFormatter());  }  for (  final String matchingSubscriptionTopic : matchingSubscriptions) {    final BaseMqttSubscription subscription=connection.getMqttSubscriptionForTopic(matchingSubscriptionTopic);    if (subscription.isScriptActive()) {      scriptManager.runScriptWithReceivedMessage(subscription.getScript(),receivedMessage);    }    if (subscription.getStore() != null) {      subscription.getStore().messageReceived(formattedMessage);    }  }  if (!connectionSettings.getMessageLog().isLogBeforeScripts()) {    logMessage(receivedMessage);  }}  }
class C{  public void close(){  getDiskCache().close();}  }
class C{  public List<GenericValue> makeAllQuoteAdjustments(){  List<GenericValue> quoteAdjs=FastList.newInstance();  for (  GenericValue orderAdj : makeAllAdjustments()) {    GenericValue quoteAdj=this.getDelegator().makeValue("QuoteAdjustment");    quoteAdj.put("quoteAdjustmentId",orderAdj.get("orderAdjustmentId"));    quoteAdj.put("quoteAdjustmentTypeId",orderAdj.get("orderAdjustmentTypeId"));    quoteAdj.put("quoteItemSeqId",orderAdj.get("orderItemSeqId"));    quoteAdj.put("comments",orderAdj.get("comments"));    quoteAdj.put("description",orderAdj.get("description"));    quoteAdj.put("amount",orderAdj.get("amount"));    quoteAdj.put("productPromoId",orderAdj.get("productPromoId"));    quoteAdj.put("productPromoRuleId",orderAdj.get("productPromoRuleId"));    quoteAdj.put("productPromoActionSeqId",orderAdj.get("productPromoActionSeqId"));    quoteAdj.put("productFeatureId",orderAdj.get("productFeatureId"));    quoteAdj.put("correspondingProductId",orderAdj.get("correspondingProductId"));    quoteAdj.put("sourceReferenceId",orderAdj.get("sourceReferenceId"));    quoteAdj.put("sourcePercentage",orderAdj.get("sourcePercentage"));    quoteAdj.put("customerReferenceId",orderAdj.get("customerReferenceId"));    quoteAdj.put("primaryGeoId",orderAdj.get("primaryGeoId"));    quoteAdj.put("secondaryGeoId",orderAdj.get("secondaryGeoId"));    quoteAdj.put("exemptAmount",orderAdj.get("exemptAmount"));    quoteAdj.put("taxAuthGeoId",orderAdj.get("taxAuthGeoId"));    quoteAdj.put("taxAuthPartyId",orderAdj.get("taxAuthPartyId"));    quoteAdj.put("overrideGlAccountId",orderAdj.get("overrideGlAccountId"));    quoteAdj.put("includeInTax",orderAdj.get("includeInTax"));    quoteAdj.put("includeInShipping",orderAdj.get("includeInShipping"));    quoteAdj.put("createdDate",orderAdj.get("createdDate"));    quoteAdj.put("createdByUserLogin",orderAdj.get("createdByUserLogin"));    quoteAdjs.add(quoteAdj);  }  return quoteAdjs;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  addPreferencesFromResource(R.xml.perference);  initView();}  }
class C{  public void drawLabel(Node v,boolean selected){  viewer.getNV(v).drawLabel(gc,viewer.trans,viewer.getFont(),selected);  if (selected)   hiliteLabel(v,(NodeData)v.getData());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_CaseHeal_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200798,skillcaster,skillname);}  }
class C{  private static boolean isMatch(String left,String right){  left=null != left ? left : "";  right=null != right ? right : "";  return StringUtils.getJaroWinklerDistance(left,right) > 0.85;}  }
class C{  public int hashCode(){  return hash(descs);}  }
class C{  public Builder markerZoomAnimation(Boolean markerZoomAnimation){  this.markerZoomAnimation=markerZoomAnimation;  return this;}  }
class C{  public List<GenericValue> makeAllOrderPaymentInfos(LocalDispatcher dispatcher){  Delegator delegator=this.getDelegator();  List<GenericValue> allOpPrefs=new LinkedList<GenericValue>();  BigDecimal remainingAmount=this.getGrandTotal().subtract(this.getPaymentTotal());  remainingAmount=remainingAmount.setScale(2,BigDecimal.ROUND_HALF_UP);  if (getBillingAccountId() != null && this.billingAccountAmt.compareTo(BigDecimal.ZERO) <= 0) {    BigDecimal billingAccountAvailableAmount=CheckOutHelper.availableAccountBalance(getBillingAccountId(),dispatcher);    if (this.billingAccountAmt.compareTo(BigDecimal.ZERO) == 0 && billingAccountAvailableAmount.compareTo(BigDecimal.ZERO) > 0) {      this.billingAccountAmt=billingAccountAvailableAmount;    }    if (remainingAmount.compareTo(getBillingAccountAmount()) < 0) {      this.billingAccountAmt=remainingAmount;    }    if (billingAccountAvailableAmount.compareTo(getBillingAccountAmount()) < 0) {      this.billingAccountAmt=billingAccountAvailableAmount;    }  }  for (  CartPaymentInfo inf : paymentInfo) {    if (inf.amount == null) {      inf.amount=remainingAmount;      remainingAmount=BigDecimal.ZERO;    }    allOpPrefs.addAll(inf.makeOrderPaymentInfos(delegator,this));  }  return allOpPrefs;}  }
class C{  public Matcher(Selector.XPath xpath,FieldActivator activator,int initialDepth){  super(xpath);  fFieldActivator=activator;  fInitialDepth=initialDepth;}  }
class C{  public void remove(String key){  internalMap.remove(key);}  }
class C{  protected void paintArrow(Graphics2D g2,double x,double y,int w,int h,boolean topDown){  int intX=(int)(x + 0.5);  int intY=(int)(y + 0.5);  if (orientation == VERTICAL) {    if (w % 2 == 0) {      w=w - 1;    }    if (topDown) {      for (int i=0; i < (w / 2 + 1); i++) {        g2.drawLine(intX + i,intY + i,intX + w - i - 1,intY + i);      }    } else {      for (int i=0; i < (w / 2 + 1); i++) {        g2.drawLine(intX + w / 2 - i,intY + i,intX + w - w / 2 + i - 1,intY + i);      }    }  } else {    if (h % 2 == 0) {      h=h - 1;    }    if (topDown) {      for (int i=0; i < (h / 2 + 1); i++) {        g2.drawLine(intX + i,intY + i,intX + i,intY + h - i - 1);      }    } else {      for (int i=0; i < (h / 2 + 1); i++) {        g2.drawLine(intX + i,intY + h / 2 - i,intX + i,intY + h - h / 2 + i - 1);      }    }  }}  }
class C{  @Override public DOMASWriter createDOMASWriter(){  String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NOT_SUPPORTED_ERR",null);  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,msg);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public TypeVariable fullCopy(){  TypeVariable tree=(TypeVariable)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  private Collection<Var> migrateAsEntity(SQLTable currentTable){  Var type=var().isa("entity-type").id(currentTable.getEntityType());  return Lists.newArrayList(type);}  }
class C{  private static boolean isURIString(String p_uric){  if (p_uric == null) {    return false;  }  int end=p_uric.length();  char testChar='\0';  for (int i=0; i < end; i++) {    testChar=p_uric.charAt(i);    if (testChar == '%') {      if (i + 2 >= end || !isHex(p_uric.charAt(i + 1)) || !isHex(p_uric.charAt(i + 2))) {        return false;      } else {        i+=2;        continue;      }    }    if (isURICharacter(testChar)) {      continue;    } else {      return false;    }  }  return true;}  }
class C{  public void my_readFromParcel(Parcel in){  x=in.readFloat();  y=in.readFloat();}  }
class C{  private void init(final AttributeSet attrs){  Typeface typeface;  if (!isInEditMode() && (typeface=CustomFontUtils.getTypeFace(this,attrs)) != null) {    super.setTypeface(typeface,typeface.getStyle());  }}  }
class C{  private void addContribution(final SubHyperplane<Euclidean3D> facet,final boolean reversed){  @SuppressWarnings("unchecked") final AbstractSubHyperplane<Euclidean3D,Euclidean2D> absFacet=(AbstractSubHyperplane<Euclidean3D,Euclidean2D>)facet;  final Plane plane=(Plane)facet.getHyperplane();  final double scal=plane.getNormal().dotProduct(w);  if (FastMath.abs(scal) > 1.0e-3) {    Vector2D[][] vertices=((PolygonsSet)absFacet.getRemainingRegion()).getVertices();    if ((scal < 0) ^ reversed) {      final Vector2D[][] newVertices=new Vector2D[vertices.length][];      for (int i=0; i < vertices.length; ++i) {        final Vector2D[] loop=vertices[i];        final Vector2D[] newLoop=new Vector2D[loop.length];        if (loop[0] == null) {          newLoop[0]=null;          for (int j=1; j < loop.length; ++j) {            newLoop[j]=loop[loop.length - j];          }        } else {          for (int j=0; j < loop.length; ++j) {            newLoop[j]=loop[loop.length - (j + 1)];          }        }        newVertices[i]=newLoop;      }      vertices=newVertices;    }    final ArrayList<SubHyperplane<Euclidean2D>> edges=new ArrayList<SubHyperplane<Euclidean2D>>();    for (    Vector2D[] loop : vertices) {      final boolean closed=loop[0] != null;      int previous=closed ? (loop.length - 1) : 1;      Vector3D previous3D=plane.toSpace((Point<Euclidean2D>)loop[previous]);      int current=(previous + 1) % loop.length;      Vector2D pPoint=new Vector2D(previous3D.dotProduct(u),previous3D.dotProduct(v));      while (current < loop.length) {        final Vector3D current3D=plane.toSpace((Point<Euclidean2D>)loop[current]);        final Vector2D cPoint=new Vector2D(current3D.dotProduct(u),current3D.dotProduct(v));        final org.hipparchus.geometry.euclidean.twod.Line line=new org.hipparchus.geometry.euclidean.twod.Line(pPoint,cPoint,tolerance);        SubHyperplane<Euclidean2D> edge=line.wholeHyperplane();        if (closed || (previous != 1)) {          final double angle=line.getAngle() + 0.5 * FastMath.PI;          final org.hipparchus.geometry.euclidean.twod.Line l=new org.hipparchus.geometry.euclidean.twod.Line(pPoint,angle,tolerance);          edge=edge.split(l).getPlus();        }        if (closed || (current != (loop.length - 1))) {          final double angle=line.getAngle() + 0.5 * FastMath.PI;          final org.hipparchus.geometry.euclidean.twod.Line l=new org.hipparchus.geometry.euclidean.twod.Line(cPoint,angle,tolerance);          edge=edge.split(l).getMinus();        }        edges.add(edge);        previous=current++;        previous3D=current3D;        pPoint=cPoint;      }    }    final PolygonsSet projectedFacet=new PolygonsSet(edges,tolerance);    projected=(PolygonsSet)new RegionFactory<Euclidean2D>().union(projected,projectedFacet);  }}  }
class C{  public void removeAllGraphModelListeners(){  m_listeners.clear();}  }
class C{  public static <E>Stream<Map.Entry<E,E>> crossProduct(Stream<E> stream){  Objects.requireNonNull(stream);  CrossProductOrderedSpliterator<E> spliterator=CrossProductOrderedSpliterator.of(stream.spliterator());  return StreamSupport.stream(spliterator,stream.isParallel()).onClose(null);}  }
class C{  public static <S,T>Aggregate<S,Map<String,T>> select(Set<NamedAggregate<? super S,? extends T>> aggregates){  return Aggregates.select(ImmutableSet.copyOf(aggregates));}  }
class C{  public static boolean initAsync(String Version,Context AppContext,LoaderCallbackInterface Callback){  return AsyncServiceHelper.initOpenCV(Version,AppContext,Callback);}  }
class C{  @Subscribe public void onEvent(SearchInPosition event){  List<LatLng> list=MapHelper.getSearchArea(event.getSteps(),new LatLng(event.getPosition().latitude,event.getPosition().longitude));  snackMe(getString(R.string.toast_searching));  nianticManager.getGyms(event.getPosition().latitude,event.getPosition().longitude,0D);  nianticManager.getPokeStops(event.getPosition().latitude,event.getPosition().longitude,0D);  nianticManager.getLuredPokemon(event.getPosition().latitude,event.getPosition().longitude,0D);  for (  LatLng p : list) {    nianticManager.getCatchablePokemon(p.latitude,p.longitude,0D);  }}  }
class C{  public final boolean isRemoved(){  return isRemoved;}  }
class C{  public CategoryFragmentPopupManageImplementor(PopupManageView view){  this.view=view;}  }
class C{  public Matrix solve(Matrix B){  return (m == n ? (new LUDecomposition(this)).solve(B) : (new QRDecomposition(this)).solve(B));}  }
class C{  private ReggieStat removeReggieStat(ServiceID id){  if (id == null)   throw new NullPointerException("id is null");  ReggieStat rStat=null;synchronized (discoveryTimes) {    for (Iterator it=discoveryTimes.iterator(); it.hasNext(); ) {      ReggieStat rt=(ReggieStat)it.next();      if (rt.serviceID.equals(id)) {        rStat=rt;        discoveryTimes.remove(rt);        break;      }    }  }  return (rStat);}  }
class C{  public static void i(String msg){  if (LOG_ENABLE) {    Log.i(TAG,buildMsg(msg));  }}  }
class C{  public void erasePurchase(String sku){  if (mPurchaseMap.containsKey(sku))   mPurchaseMap.remove(sku);}  }
class C{  public void finishGathering(Player player){  if (currentGatherer == player.getObjectId()) {    if (state == GatherState.GATHERING) {      task.abort();    }    currentGatherer=0;    state=GatherState.IDLE;  }}  }
class C{  @Override public void endEntity(String name,Augmentations augs) throws XNIException {  super.endEntity(name,augs);  if (fScannerState == SCANNER_STATE_END_OF_INPUT)   return;  boolean reportEntity=fReportEntity;  if (name.startsWith("%")) {    reportEntity=peekReportEntity();    int startMarkUpDepth=popPEStack();    if (startMarkUpDepth == 0 && startMarkUpDepth < fMarkUpDepth) {      fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"ILL_FORMED_PARAMETER_ENTITY_WHEN_USED_IN_DECL",new Object[]{fEntityManager.fCurrentEntity.name},XMLErrorReporter.SEVERITY_FATAL_ERROR);    }    if (startMarkUpDepth != fMarkUpDepth) {      reportEntity=false;      if (fValidation) {        fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"ImproperDeclarationNesting",new Object[]{name},XMLErrorReporter.SEVERITY_ERROR);      }    }    if (fEntityScanner.isExternal()) {      fExtEntityDepth--;    }    if (fDTDHandler != null && reportEntity) {      fDTDHandler.endParameterEntity(name,augs);    }  } else   if (name.equals("[dtd]")) {    if (fIncludeSectDepth != 0) {      reportFatalError("IncludeSectUnterminated",null);    }    fScannerState=SCANNER_STATE_END_OF_INPUT;    fEntityManager.endExternalSubset();    if (fDTDHandler != null) {      fDTDHandler.endExternalSubset(null);      fDTDHandler.endDTD(null);    }    fExtEntityDepth--;  }}  }
class C{  public UsersGetSubscriptionsQueryWithExtended fields(List<UserField> value){  return unsafeParam("fields",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Snare_END_ME_TO_B(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200477,skilltarget);}  }
class C{  public boolean isApplicable(){  RemoteServiceBrowser remoteServiceBrowser=(RemoteServiceBrowser)getViewer();  return remoteServiceBrowser != null && remoteServiceBrowser.getServicePanel() != null && remoteServiceBrowser.getServicePanel().getSelectedFiles().size() > 0;}  }
class C{  public static void addStrut(JComponent b,boolean horiz,int size){  if (size < 1)   return;  b.add(horiz ? Box.createHorizontalStrut(size) : Box.createVerticalStrut(size));}  }
class C{  private Optional<Data<Input,Output>> match_(Input input){  return Optional.ofNullable(recent_.get()).filter(null);}  }
class C{  @Override public int hashCode(){  int h=3542;  for (  final T a : data) {    h^=a.hashCode();  }  return h;}  }
class C{  public void init$Children(){  children=new ASTNode[3];  setChild(new List(),1);  setChild(new List(),2);}  }
class C{  public static void main(String[] args) throws Exception {  LOGGER.info("starting {}",Main.class.getSimpleName());  TimeZone.setDefault(getTimeZone("UTC"));  DateTimeZone.setDefault(UTC);  ServiceManager serviceManager=new ServiceManager().addModules(ApiModule.class,MetricsModule.class).addServices(getEnabledWebServices()).addServices(getEnabledMetricsServices()).addServices(EventLogService.class);  serviceManager.start();  LOGGER.info("started {}",Main.class.getSimpleName());}  }
class C{  private void finalizeSootData(){  Scene.v().releaseReachableMethods();  Scene.v().getReachableMethods();  if (!opts.geom_trans()) {    for (    IVarAbstraction pn : pointers) {      if (pn != pn.getRepresentative()) {        continue;      }      if (pn.hasPTResult()) {        pn.keepPointsToOnly();        Node vn=pn.getWrappedNode();        vn.discardP2Set();      }    }  } else {    transformToCIResult();  }}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output,String encoding) throws IOException {  writeLines(lines,lineEnding,output,Charsets.toCharset(encoding));}  }
class C{  private void hanning(int size){  int start=(windowFunction.length - size) / 2;  int stop=(windowFunction.length + size) / 2;  double factor=twoPI / (size - 1.0d);  for (int i=0; start < stop; start++, i++)   windowFunction[i]=0.5 * (1 - Math.cos(factor * i));}  }
class C{  public void removeMostRecentValue() throws MathIllegalStateException {  try {    eDA.discardMostRecentElements(1);  } catch (  MathIllegalArgumentException ex) {    throw new MathIllegalStateException(LocalizedCoreFormats.NO_DATA);  }}  }
class C{  public IdsQuery(String typeName,Object[] ids){  this(typeName,ids,null,null,QueryResultType.DEFAULT);}  }
class C{  public XorExpr newXorExpr(Value op1,Value op2){  return new JXorExpr(op1,op2);}  }
class C{  private Iterator<Iterable<Row>> rowScan(DeltaPlacement placement,ByteBufferRange keyRange,ReadConsistency consistency){  ByteBuffer startToken=keyRange.getStart();  ByteBuffer endToken=keyRange.getEnd();  checkArgument(AstyanaxStorage.compareKeys(startToken,endToken) < 0,"Cannot scan rows which loop from maximum- to minimum-token");  TableDDL tableDDL=placement.getDeltaTableDDL();  Statement statement=selectFrom(tableDDL).where(gt(token(tableDDL.getRowKeyColumnName()),startToken)).and(lte(token(tableDDL.getRowKeyColumnName()),endToken)).setConsistencyLevel(SorConsistencies.toCql(consistency));  return deltaQueryAsync(placement,statement,false);}  }
class C{  public static boolean equalOverShorterOfBoth(byte[] a,byte[] b){  int top=Math.min(a.length,b.length);  for (int i=0; i < top; i++) {    if (a[i] != b[i])     return false;  }  return true;}  }
class C{  public void writeDouble(double a) throws IOException {  byteBuffer.putDouble(0,a);  byteBuffer.rewind();  byteBuffer.get(bytes,0,8);  swap(bytes,8);  outs.write(bytes,0,8);}  }
class C{  public GSMapMessageImpl(GSSessionImpl session,HashMap<String,Object> map) throws JMSException {  super(session,MAP);  Body=map;}  }
class C{  public CommitJob(Transaction tr,TaskManager pool,WakeupManager wm,ClientLog log,ParticipantHandle[] handles,Object xid){  super(pool,wm,false);  if (log == null)   throw new IllegalArgumentException("CommitJob: CommitJob: " + "log is null");  this.log=log;  if (!(tr instanceof ServerTransaction))   throw new IllegalArgumentException("PrepareJob: PrepareJob: " + "must be a ServerTransaction");  this.tr=(ServerTransaction)tr;  if (handles == null)   throw new IllegalArgumentException("PrepareJob: PrepareJob: " + "must have participants");  if (handles.length == 0)   throw new IllegalArgumentException("PrepareJob: PrepareJob: " + "must have participants");  this.handles=handles;  _xid=xid;}  }
class C{  public boolean executeImmediately(final String command,CommandManager commandManager){  System.err.println("Executing: " + command);  try {    if (doc.getProgressListener() == null) {      ProgressListener progressListener=new ProgressPercentage();      doc.setProgressListener(progressListener);    }    if (commandManager != null)     commandManager.execute(command); else     throw new Exception("Internal error: commandManager==null");    if (viewer == null || !viewer.isLocked()) {      notifyUpdateViewer(Director.ENABLE_STATE);      WaitUntilAllViewersAreUptoDate();      notifyUnlockInput();    }    return true;  } catch (  CanceledException ex) {    System.err.println("USER CANCELED EXECUTE");    NotificationsInSwing.showInformation("USER CANCELED EXECUTE");    return false;  }catch (  Exception ex) {    NotificationsInSwing.showError("Command failed: " + ex.getMessage());    return false;  }}  }
class C{  public static void attributeNames(SimpleMethod method,Element element,String... validAttributeNames) throws ValidationException {  Set<String> validNames=new HashSet<String>();  for (  String name : validAttributeNames) {    validNames.add(name);  }  NamedNodeMap nnm=element.getAttributes();  for (int i=0; i < nnm.getLength(); i++) {    String attributeName=nnm.item(i).getNodeName();    if (!validNames.contains(attributeName)) {      handleError("Attribute name \"" + attributeName + "\" is not valid.",method,element);    }  }}  }
class C{  @Override public void startContentModel(String elementName,Augmentations augs) throws XNIException {  if (fValidation) {    fDTDElementDeclName=elementName;    fMixedElementTypes.clear();  }  if (fDTDGrammar != null)   fDTDGrammar.startContentModel(elementName,augs);  if (fDTDContentModelHandler != null) {    fDTDContentModelHandler.startContentModel(elementName,augs);  }}  }
class C{  private void log(final Level level,final Object o,final Throwable t){  if (logger.isEnabledFor(level)) {    NDC.push(ndcPush);    logger.log(level,o,t);    NDC.pop();  }}  }
class C{  public synchronized void damageReport(Rectangle2D region){  if (m_damageRedraw)   m_clip.union(region);}  }
class C{  public void onTick(){  ACLMessage msg;synchronized (myAgent) {    if ((msg=myAgent.receive()) == null) {      return;    }    if (msg.getPerformative() == ACLMessage.CANCEL) {      myAgent.doDelete();      return;    }    if (msg.getPerformative() != ACLMessage.INFORM) {synchronized (System.err) {        System.err.println("Ignoring message with unknown performative...");      }      return;    }    try {      Object[] oTexts=(Object[])msg.getContentObject();      String[] sTexts=new String[3];      sTexts[0]=(String)oTexts[0];      try {        ByteArrayInputStream bIn=new ByteArrayInputStream((byte[])oTexts[1]);        GZIPInputStream gzIn=new GZIPInputStream(bIn);        int iChar;        StringBuffer sbBuf=new StringBuffer();        while ((iChar=gzIn.read()) > -1)         sbBuf.append((char)iChar);        sTexts[1]=sbBuf.toString();      } catch (      IOException ioe) {synchronized (System.err) {          ioe.printStackTrace(System.err);        }        sTexts[1]=new String((byte[])oTexts[1]);      }      try {        ByteArrayInputStream bIn=new ByteArrayInputStream((byte[])oTexts[2]);        GZIPInputStream gzIn=new GZIPInputStream(bIn);        int iChar;        StringBuffer sbBuf=new StringBuffer();        while ((iChar=gzIn.read()) > -1)         sbBuf.append((char)iChar);        sTexts[2]=sbBuf.toString();      } catch (      IOException ioe) {synchronized (System.err) {          ioe.printStackTrace(System.err);        }        sTexts[2]=new String((byte[])oTexts[2]);      }      NGramDocumentComparatorAgent a=(NGramDocumentComparatorAgent)myAgent;      a.addBehaviour(new CalcBehaviour(sTexts[1],sTexts[2],a.WordMin,a.WordMax,a.WordDist,a.CharMin,a.CharMax,a.CharDist,a.Do.equals("char") || a.Do.equals("all"),a.Do.equals("word") || a.Do.equals("all"),a.Silent,sTexts[0]));      if (!a.Silent)       System.err.println("Successfully received texts:" + sTexts[0]);    } catch (    UnreadableException ex) {synchronized (System.err) {        System.err.println("Cannot read input texts...");        System.err.flush();        ex.printStackTrace();      }    }  }}  }
class C{  private void assertTable(){  if (mTable == null) {    throw new IllegalStateException("Table not specified");  }}  }
class C{  public void leftClick(int x,int y,int delay) throws InterruptedException {  move(x,y);  click(InputEvent.BUTTON1_MASK,delay);}  }
class C{  public static long copyLarge(InputStream input,OutputStream output,byte[] buffer) throws IOException {  long count=0;  int n=0;  while (EOF != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  return count;}  }
class C{  private void initializeArrays(){  final int size=maxOrder / 2;  if ((sequence == null) || (sequence.length != size)) {    sequence=new int[size];    costPerStep=new int[size];    coeff=new double[size][];    costPerTimeUnit=new double[size];    optimalStep=new double[size];  }  for (int k=0; k < size; ++k) {    sequence[k]=4 * k + 2;  }  costPerStep[0]=sequence[0] + 1;  for (int k=1; k < size; ++k) {    costPerStep[k]=costPerStep[k - 1] + sequence[k];  }  for (int k=0; k < size; ++k) {    coeff[k]=(k > 0) ? new double[k] : null;    for (int l=0; l < k; ++l) {      final double ratio=((double)sequence[k]) / sequence[k - l - 1];      coeff[k][l]=1.0 / (ratio * ratio - 1.0);    }  }}  }
class C{  public static int calculatevCenterServerCount(int vmconcurrentcount,int vcvmlimit){  Float f=((float)vmconcurrentcount / (float)vcvmlimit);  f=(float)Math.ceil(f);  final int i=f.intValue();  return i;}  }
class C{  public SpaceTypeDescriptor create(){  applyDefaults();  final String[] superTypesNames=getSuperTypesNames(_typeName,_superTypeDescriptor);  final PropertyInfo[] fixedProperties=initFixedProperties(_fixedProperties,_superTypeDescriptor,_storageType);  final Map<String,SpaceIndex> indexes=initIndexes(_indexes,fixedProperties,_idPropertyName,_superTypeDescriptor);  final String codeBase=null;  final EntryType entryType=_objectClass == null ? EntryType.DOCUMENT_JAVA : EntryType.OBJECT_JAVA;  if (!_supportsDynamicProperties) {    validatePropertyExists(_idPropertyName,fixedProperties);    validatePropertyExists(_routingPropertyName,fixedProperties);  }  return new TypeDesc(_typeName,codeBase,superTypesNames,fixedProperties,_supportsDynamicProperties,indexes,_idPropertyName,_idAutoGenerate,null,_routingPropertyName,_fifoGroupingPropertyPath,_fifoGroupingIndexes,_systemType,_fifoSupport,_replicable,_supportsOptimisticLocking,_storageType,entryType,_objectClass,ExternalEntry.class,_documentWrapperClass,null,DotNetStorageType.NULL,_blobstoreEnabled,_sequenceNumberPropertyName,_queryExtensionsInfo);}  }
class C{  @Override public boolean equals(Object that){  if (this == that) {    return true;  }  if (that == null) {    return false;  }  if (getClass() != that.getClass()) {    return false;  }  TaskScheduler other=(TaskScheduler)that;  return (this.getId() == null ? other.getId() == null : this.getId().equals(other.getId())) && (this.getGroupId() == null ? other.getGroupId() == null : this.getGroupId().equals(other.getGroupId())) && (this.getTaskName() == null ? other.getTaskName() == null : this.getTaskName().equals(other.getTaskName()))&& (this.getTaskType() == null ? other.getTaskType() == null : this.getTaskType().equals(other.getTaskType()))&& (this.getTaskDesc() == null ? other.getTaskDesc() == null : this.getTaskDesc().equals(other.getTaskDesc()))&& (this.getTaskCron() == null ? other.getTaskCron() == null : this.getTaskCron().equals(other.getTaskCron()))&& (this.getTaskPreviousFireTime() == null ? other.getTaskPreviousFireTime() == null : this.getTaskPreviousFireTime().equals(other.getTaskPreviousFireTime()))&& (this.getTaskNextFireTime() == null ? other.getTaskNextFireTime() == null : this.getTaskNextFireTime().equals(other.getTaskNextFireTime()))&& (this.getContactEmail() == null ? other.getContactEmail() == null : this.getContactEmail().equals(other.getContactEmail()))&& (this.getEnable() == null ? other.getEnable() == null : this.getEnable().equals(other.getEnable()))&& (this.getCreateBy() == null ? other.getCreateBy() == null : this.getCreateBy().equals(other.getCreateBy()))&& (this.getCreateTime() == null ? other.getCreateTime() == null : this.getCreateTime().equals(other.getCreateTime()))&& (this.getUpdateBy() == null ? other.getUpdateBy() == null : this.getUpdateBy().equals(other.getUpdateBy()))&& (this.getUpdateTime() == null ? other.getUpdateTime() == null : this.getUpdateTime().equals(other.getUpdateTime()));}  }
class C{  @Deprecated public static String removeJava2IANAMapping(String javaEncoding){  return (String)fJava2IANAMap.remove(javaEncoding);}  }
class C{  public static char[] fix83600(char[] signature){  if (signature == null || signature.length < 2)   return signature;  return Signature.removeCapture(signature);}  }
class C{  public void unregister(Class<?> service,Object provider){  ArrayList<ServiceUnregisterEvent> unregisteredEvents=new ArrayList<ServiceUnregisterEvent>();synchronized (providers) {    Iterator<Map.Entry<Class<?>,List<RegisteredServiceProvider<?>>>> it=providers.entrySet().iterator();    try {      while (it.hasNext()) {        Map.Entry<Class<?>,List<RegisteredServiceProvider<?>>> entry=it.next();        if (entry.getKey() != service) {          continue;        }        Iterator<RegisteredServiceProvider<?>> it2=entry.getValue().iterator();        try {          while (it2.hasNext()) {            RegisteredServiceProvider<?> registered=it2.next();            if (registered.getProvider() == provider) {              it2.remove();              unregisteredEvents.add(new ServiceUnregisterEvent(registered));            }          }        } catch (        NoSuchElementException e) {        }        if (entry.getValue().size() == 0) {          it.remove();        }      }    } catch (    NoSuchElementException e) {    }  }  for (  ServiceUnregisterEvent event : unregisteredEvents) {    Bukkit.getServer().getPluginManager().callEvent(event);  }}  }
class C{  public static boolean isXML11Invalid(int c){  return !isXML11Valid(c);}  }
class C{  public boolean isOptimal(int optimalQueries){  return getLargestGroupSize() >= optimalQueries;}  }
class C{  public void onRetry(){}  }
class C{  public final void remove(String... names){  if (data != null && names != null) {    for (    String name : names) {      remove(name);    }  }}  }
class C{  public S2LatLng toLatLng(){  return new S2LatLng(toPointRaw());}  }
class C{  public void activate(){  if (!myActive) {    myActive=true;    myConfiguration.addListener(myConfigurationListener);    ResourceNotificationManager manager=ResourceNotificationManager.getInstance(myFile.getProject());    ResourceVersion version=manager.addListener(this,myFacet,myFile,myConfiguration);    if (!version.equals(myRenderedVersion) || (myConfiguration.getModificationCount() != myConfigurationModificationCount)) {      String theme=myConfiguration.getTheme();      if (theme != null && !theme.startsWith(ANDROID_STYLE_RESOURCE_PREFIX) && !myProjectResourceRepository.hasResourceItem(theme)) {        myConfiguration.setTheme(myConfiguration.getConfigurationManager().computePreferredTheme(myConfiguration));      }      requestModelUpdate();      myModelVersion.myResourceVersion.incrementAndGet();    }  }}  }
class C{  public RabbitMqCommand writeOutputTo(OutputStream outputStream){  this.outputStream=outputStream;  return this;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_CANT_ENTER_FOR_TIMEOVER(String worldname0){  return new SM_SYSTEM_MESSAGE(1400235,worldname0);}  }
class C{  public String toString(){  return val ? "ClientAuthentication.YES" : "ClientAuthentication.NO";}  }
class C{  public void toAll(List<EntityPlayerMP> players){  PacketWrapper packet=new PacketWrapper(channel,new Packet(this));  players.stream().map(null).forEach(null);}  }
class C{  private static boolean haveChecked(File templateFile,boolean createWithProject){  return haveChecked(templateFile.getParentFile().getName(),templateFile.getName(),createWithProject);}  }
class C{  public String toString(int maxKeysToPrint){  return asPriorityQueue().toString(maxKeysToPrint,false);}  }
class C{  public short put(K key,short value){  int index=insertionIndex(key);  return doPut(key,value,index);}  }
class C{  private ArticlesUtils(){}  }
class C{  public TextPartsBuilder addTextPart(@StringRes int textRes,@ColorRes int bgColorRes){  return addTextPart(mContext.getText(textRes),getColor(mContext,bgColorRes));}  }
class C{  public static int arraySize(final int expected,final float f){  final long s=Math.max(2,nextPowerOfTwo((long)Math.ceil(expected / f)));  if (s > (1 << 30))   throw new IllegalArgumentException("Too large (" + expected + " expected elements with load factor "+ f+ ")");  return (int)s;}  }
class C{  public static void rgb888ToColor(Color color,int value){  color.r=((value & 0x00ff0000) >>> 16) / 255f;  color.g=((value & 0x0000ff00) >>> 8) / 255f;  color.b=((value & 0x000000ff)) / 255f;}  }
class C{  public Object findFeature(String pathAndFeature){  int lastDot;  String feature;  String path;  Item item;  FeatureProcessor fp;  Voice voice=getOwnerRelation().getUtterance().getVoice();  Object results=null;  lastDot=pathAndFeature.lastIndexOf(".");  if (lastDot == -1) {    feature=pathAndFeature;    path=null;  } else {    feature=pathAndFeature.substring(lastDot + 1);    path=pathAndFeature.substring(0,lastDot);  }  item=findItem(path);  if (item != null) {    fp=voice.getFeatureProcessor(feature);    if (fp != null) {      try {        results=fp.process(item);      } catch (      ProcessException pe) {        System.err.println("Trouble while processing " + fp.toString());      }    } else {      results=item.getFeatures().getObject(feature);    }  }  results=(results == null) ? "0" : results;  return results;}  }
class C{  private int reorderRegressors(int[] list,int pos1){  int next;  int i;  int l;  if (list.length < 1 || list.length > nvars + 1 - pos1) {    return -1;  }  next=pos1;  i=pos1;  while (i < nvars) {    l=vorder[i];    for (int j=0; j < list.length; j++) {      if (l == list[j] && i > next) {        this.vmove(i,next);        ++next;        if (next >= list.length + pos1) {          return 0;        } else {          break;        }      }    }    ++i;  }  return 0;}  }
class C{  private int start(){  if ((this.status == AccelListener.RUNNING) || (this.status == AccelListener.STARTING)) {    startTimeout();    return this.status;  }  this.setStatus(AccelListener.STARTING);  List<Sensor> list=this.sensorManager.getSensorList(Sensor.TYPE_ACCELEROMETER);  if ((list != null) && (list.size() > 0)) {    this.mSensor=list.get(0);    if (this.sensorManager.registerListener(this,this.mSensor,SensorManager.SENSOR_DELAY_UI)) {      this.setStatus(AccelListener.STARTING);    } else {      this.setStatus(AccelListener.ERROR_FAILED_TO_START);      this.fail(AccelListener.ERROR_FAILED_TO_START,"Device sensor returned an error.");      return this.status;    }    ;  } else {    this.setStatus(AccelListener.ERROR_FAILED_TO_START);    this.fail(AccelListener.ERROR_FAILED_TO_START,"No sensors found to register accelerometer listening to.");    return this.status;  }  startTimeout();  return this.status;}  }
class C{  public static String upperCaseFirst(String input){  if (input.charAt(0) >= 'a' && input.charAt(0) <= 'z') {    return ("" + input.charAt(0)).toUpperCase() + input.substring(1);  } else {    return input;  }}  }
class C{  @Override public double[] makeDensityTestValues(){  return new double[]{0.000756494565517,0.0109109752919,0.0303377878006,0.0637967988952,0.128289492005,0.000756494565517,0.0109109752919,0.0303377878006,0.0637967988952,0.128289492005};}  }
class C{  public LeadsGetUsersQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  @Override public void onSensorsFromAllNodesSelected(Map<String,List<DeviceSensor>> selectedSensors){  Log.d(TAG,"Sensors from all nodes selected");  this.selectedSensors=selectedSensors;  for (  Map.Entry<String,List<DeviceSensor>> selectedSensorsEntry : selectedSensors.entrySet()) {    for (    DeviceSensor deviceSensor : selectedSensorsEntry.getValue()) {      Bundle bundle=new Bundle();      bundle.putString(FirebaseAnalytics.Param.ITEM_ID,String.valueOf(deviceSensor.getType()));      bundle.putString(FirebaseAnalytics.Param.ITEM_NAME,deviceSensor.getName());      bundle.putString(FirebaseAnalytics.Param.ITEM_CATEGORY,deviceSensor.getStringType());      app.getAnalytics().logEvent(FirebaseAnalytics.Event.VIEW_ITEM,bundle);    }  }}  }
class C{  public CM_QUIT(int opcode,State state,State... restStates){  super(opcode,state,restStates);}  }
class C{  public static final int daysBetween(Date early,Date late){  Calendar c1=Calendar.getInstance();  Calendar c2=Calendar.getInstance();  c1.setTime(early);  c2.setTime(late);  return daysBetween(c1,c2);}  }
class C{  private void handleInitializerBlocks(soot.SootMethod sootMethod){  ArrayList<Block> initializerBlocks=((soot.javaToJimple.PolyglotMethodSource)sootMethod.getSource()).getInitializerBlocks();  if (initializerBlocks != null) {    handleStaticBlocks(initializerBlocks);  }}  }
class C{  @Override public void write(OutputStream os) throws IOException {  AtomicReference<CsvSchema> schema=new AtomicReference<>();  AtomicBoolean isFirstRow=new AtomicBoolean(true);  ObjectMapper csvMapper=objectMappers.getCsvMapper();  try {    entries.peek(null).forEachOrdered(null);  } catch (  RuntimeException re) {    throw new IOException(re);  }}  }
class C{  public boolean types_for_sites(){  return soot.PhaseOptions.getBoolean(options,"types-for-sites");}  }
class C{  public Disk accelerate(double factor){  return new Disk(position,speed.multiply(factor),radius);}  }
class C{  private boolean isDictionaryMetaFileModified(CarbonFile carbonFile,long fileTimeStamp,long endOffset){  return carbonFile.isFileModified(fileTimeStamp,endOffset);}  }
class C{  public Future execute(Collection<T> coll,CompletionCallback callback){  if (callback == null)   throw new IllegalArgumentException("Callback cannot be null");  TaskManagerImpl taskManager=new TaskManagerImpl(this.executor_,this.task_,coll,callback);  this.executor_.execute(taskManager);  return new Future(taskManager);}  }
class C{  public ThreadPoolPermission(String name){  super(name);}  }
class C{  public static boolean isInSphere(final VisibleObject obj,final float centerX,final float centerY,final float centerZ,final float radius){  float dx=(obj.getX() - centerX);  float dy=(obj.getY() - centerY);  float dz=(obj.getZ() - centerZ);  return dx * dx + dy * dy + dz * dz < radius * radius;}  }
class C{  @Override public AudioInputStream synthesize(int backchannelNumber,AudioFileFormat aft) throws SynthesisException {  if (backchannelNumber > vMLSAFeaturesReader.getNumberOfUnits()) {    throw new IllegalArgumentException("requesting unit should not be more than number of units");  }  if (backchannelNumber < 0) {    throw new IllegalArgumentException("requesting unit index should not be less than zero");  }  double[] lf0=vMLSAFeaturesReader.getUnitLF0(backchannelNumber);  boolean[] voiced=vMLSAFeaturesReader.getVoicedFrames(backchannelNumber);  double[][] mgc=vMLSAFeaturesReader.getUnitMGCs(backchannelNumber);  double[][] strengths=vMLSAFeaturesReader.getUnitStrengths(backchannelNumber);  return synthesizeUsingMLSAVocoder(mgc,strengths,lf0,voiced,aft);}  }
class C{  public void notifyDataSetChanged(){  internalAdapter.notifyDataSetChanged();}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  private Bitmap drawOnFace(SparseArray<Face> faceArray,int stroke,int color){  Bitmap outBitmap=Bitmap.createBitmap(getMyPhoto().getWidth(),getMyPhoto().getHeight(),Bitmap.Config.RGB_565);  Canvas canvas=new Canvas(outBitmap);  canvas.drawBitmap(getMyPhoto(),0,0,null);  for (int i=0; i < faceArray.size(); i++) {    int key=faceArray.keyAt(i);    Face face=faceArray.get(key);    drawRectangle(canvas,face.getPosition(),face.getWidth(),face.getHeight(),stroke,color);    this.listLandMarkPhoto=face.getLandmarks();  }  return outBitmap;}  }
class C{  protected AdsImportTargetContactsQuery accountId(int value){  return unsafeParam("account_id",value);}  }
class C{  public static String toFileSizeString(long fileSize){  DecimalFormat df=new DecimalFormat("0.00");  String fileSizeString;  if (fileSize < KB) {    fileSizeString=fileSize + "B";  } else   if (fileSize < MB) {    fileSizeString=df.format((double)fileSize / KB) + "K";  } else   if (fileSize < GB) {    fileSizeString=df.format((double)fileSize / MB) + "M";  } else {    fileSizeString=df.format((double)fileSize / GB) + "G";  }  return fileSizeString;}  }
class C{  public ReceiveResultBehaviour(ResultsAgent a,long lInterval,PrintStream pResultOutput){  super(a,lInterval);  myAgent=a;  Interval=lInterval;  pOut=pResultOutput;}  }
class C{  public boolean merge_stringbuffer(){  return soot.PhaseOptions.getBoolean(options,"merge-stringbuffer");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ProcATK_Instant_Ratio_ME_TO_SELF(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200391,num0,skillname);}  }
class C{  private static void writeResource(ResourceCreator resourceCreator,String resourceName,byte[] data) throws IOException {  OutputStream os=resourceCreator.createResource(resourceName);  try {    os.write(data);  }  finally {    try {      os.close();    } catch (    IOException ex) {    }  }}  }
class C{  @Override public boolean satisfiedBy(Granularity that){  return true;}  }
class C{  @Deployment public void testRepetitionJobEntityEvents() throws Exception {  Clock previousClock=processEngineConfiguration.getClock();  Clock testClock=new DefaultClockImpl();  processEngineConfiguration.setClock(testClock);  Date now=new Date();  testClock.setCurrentTime(now);  Calendar nowCalendar=new GregorianCalendar();  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("testRepetitionJobEvents");  Job theJob=managementService.createTimerJobQuery().processInstanceId(processInstance.getId()).singleResult();  assertNotNull(theJob);  assertEquals(3,listener.getEventsReceived().size());  ActivitiEvent event=listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.ENTITY_CREATED,event.getType());  checkEventContext(event,theJob);  event=listener.getEventsReceived().get(1);  assertEquals(ActivitiEventType.ENTITY_INITIALIZED,event.getType());  checkEventContext(event,theJob);  event=listener.getEventsReceived().get(2);  assertEquals(ActivitiEventType.TIMER_SCHEDULED,event.getType());  checkEventContext(event,theJob);  listener.clearEventsReceived();  waitForJobExecutorToProcessAllJobs(2000,200);  assertEquals(0,listener.getEventsReceived().size());  assertEquals(1,managementService.createTimerJobQuery().processInstanceId(processInstance.getId()).count());  Job firstTimerInstance=managementService.createTimerJobQuery().processInstanceId(processInstance.getId()).singleResult();  nowCalendar.add(Calendar.HOUR,1);  nowCalendar.add(Calendar.MINUTE,5);  testClock.setCurrentTime(nowCalendar.getTime());  waitForJobExecutorToProcessAllJobs(2000,200);  assertEquals(1,managementService.createTimerJobQuery().processInstanceId(processInstance.getId()).count());  Job secondTimerInstance=managementService.createTimerJobQuery().processInstanceId(processInstance.getId()).singleResult();  assertTrue(firstTimerInstance.getId() != secondTimerInstance.getId());  checkEventCount(1,ActivitiEventType.TIMER_FIRED);  checkEventContext(filterEvents(ActivitiEventType.TIMER_FIRED).get(0),firstTimerInstance);  checkEventCount(1,ActivitiEventType.TIMER_SCHEDULED);  checkEventContext(filterEvents(ActivitiEventType.TIMER_SCHEDULED).get(0),secondTimerInstance);  listener.clearEventsReceived();  nowCalendar.add(Calendar.HOUR,1);  nowCalendar.add(Calendar.MINUTE,5);  testClock.setCurrentTime(nowCalendar.getTime());  waitForJobExecutorToProcessAllJobs(2000,200);  assertEquals(0,managementService.createTimerJobQuery().processInstanceId(processInstance.getId()).count());  nowCalendar.add(Calendar.HOUR,1);  nowCalendar.add(Calendar.MINUTE,5);  testClock.setCurrentTime(nowCalendar.getTime());  waitForJobExecutorToProcessAllJobs(2000,200);  assertEquals(0,managementService.createTimerJobQuery().processInstanceId(processInstance.getId()).count());  checkEventCount(1,ActivitiEventType.TIMER_FIRED);  checkEventContext(filterEvents(ActivitiEventType.TIMER_FIRED).get(0),secondTimerInstance);  checkEventCount(0,ActivitiEventType.TIMER_SCHEDULED);  listener.clearEventsReceived();  processEngineConfiguration.setClock(previousClock);}  }
class C{  public TimeoutExpiredException(boolean committed){  this.committed=committed;}  }
class C{  public static void checkLocation(int location,String label){  if (location < 0) {    throw new RuntimeException("Unable to locate '" + label + "' in program");  }}  }
class C{  @Override public final void writeByte(int v) throws IOException {  dis.writeByte(v);}  }
class C{  public Boolean isShared(){  return (Boolean)getAttributes().get(Attributes.SHARED);}  }
class C{  public MessagesSendQuery(VkApiClient client,Actor actor){  super(client,"messages.send",Integer.class);  accessToken(actor.getAccessToken());}  }
class C{  public void addValue(double value){  secondMoment.increment(value);  minImpl.increment(value);  maxImpl.increment(value);  sumImpl.increment(value);  sumOfSquaresImpl.increment(value);  sumOfLogsImpl.increment(value);  n++;}  }
class C{  public static void writeLines(File file,Collection<?> lines) throws IOException {  writeLines(file,null,lines,null,false);}  }
class C{  public void mergeGraph(DocumentNGramGraph dgOtherGraph,double fWeightPercent){  if (dgOtherGraph == this)   return;  for (int iCurLvl=MinSize; iCurLvl <= MaxSize; iCurLvl++) {    UniqueVertexGraph gGraph=getGraphLevelByNGramSize(iCurLvl);    UniqueVertexGraph gOtherGraph=dgOtherGraph.getGraphLevelByNGramSize(iCurLvl);    if (gOtherGraph == null)     continue;    java.util.Iterator iIter=gOtherGraph.getEdgeSet().iterator();    ArrayList<String> lOtherNodes=new ArrayList<String>();    while (iIter.hasNext()) {      WeightedEdge weCurItem=(WeightedEdge)iIter.next();      String sHead=weCurItem.getVertexA().getLabel();      String sTail=weCurItem.getVertexB().getLabel();      double dWeight=weCurItem.getWeight();      lOtherNodes.clear();      lOtherNodes.add(sTail);      createWeightedEdgesConnecting(gGraph,sHead,lOtherNodes,dWeight,dWeight,fWeightPercent);    }  }}  }
class C{  public void init$Children(){}  }
class C{  public PolyhedronsSet(final double xMin,final double xMax,final double yMin,final double yMax,final double zMin,final double zMax,final double tolerance){  super(buildBoundary(xMin,xMax,yMin,yMax,zMin,zMax,tolerance),tolerance);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Bleed_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200920,skilltarget,skillcaster,skillname);}  }
class C{  public RoleAlreadyExistsException(Throwable cause){  super(cause);}  }
class C{  public static Map<String,Object> conditionFalseService(DispatchContext dctx,Map<String,?> context){  Map<String,Object> result=ServiceUtil.returnSuccess();  result.put("conditionReply",Boolean.FALSE);  return result;}  }
class C{  public static <T>boolean containsAny(Collection<T> source,Collection<T> candidates){  if (isEmpty(source) || isEmpty(candidates))   return false;  for (  T candidate : candidates)   if (source.contains(candidate))   return true;  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Disease_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200279,skillname);}  }
class C{  public ThrowableSet add(ThrowableSet s) throws ThrowableSet.AlreadyHasExclusionsException {  if (INSTRUMENTING) {    Manager.v().addsOfSet++;  }  if (exceptionsExcluded.size() > 0 || s.exceptionsExcluded.size() > 0) {    throw new AlreadyHasExclusionsException("ThrowableSet.Add(ThrowableSet): attempt to add to [" + this.toString() + "] after removals recorded.");  }  ThrowableSet result=getMemoizedAdds(s);  if (result == null) {    if (INSTRUMENTING) {      Manager.v().addsInclusionFromSearch++;      Manager.v().addsExclusionWithoutSearch++;    }    result=this.add(s.exceptionsIncluded);    memoizedAdds.put(s,result);  } else   if (INSTRUMENTING) {    Manager.v().addsInclusionFromMemo++;    Manager.v().addsExclusionWithoutSearch++;  }  return result;}  }
class C{  public ReaderModeActivityDelegate(ChromeActivity activity){  mActivity=activity;}  }
class C{  @Override public byte process(Target target){  Element segment=navigator.getElement(target);  if (segment == null)   return values.get("0");  if (!segment.getTagName().equals(MaryXML.PHONE))   return 0;  String ph=segment.getAttribute("p");  String phoneClass=phones2Classes.get(ph);  if (phoneClass == null) {    return values.get("0");  }  return values.get(phoneClass);}  }
class C{  public ZoomControl(){}  }
class C{  public AxisLabelLayout(String group,AxisLayout layout){  this(group,layout,null,50);}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length == 0 && System.getProperty("user.name").equals("huson")) {    args=new String[]{"-ref","/Users/huson/data/michael/test/dna/references-aligned.fasta","-rea","/Users/huson/data/michael/test/dna/reads-aligned.fasta"};    args=new String[]{"-ref","/Users/huson/data/michael/test/references-aligned-sg.fasta","-rea","/Users/huson/data/michael/test/reads-aligned-sg.fasta","-d2p","-f","BlastNText"};    args=new String[]{"-ref","/Users/huson/data/michael/adam/try-alignments/880_rpoB_sequences_min_1000_AAs.mafft","-rea","/Users/huson/data/michael/adam/try-alignments/use","-d2p","-o","/Users/huson/data/michael/adam/try-alignments/out.blastn","-f","BlastNText","-n","880_rpoB_sequences_min_1000_AAs|kegg|3043"};    args=new String[]{"-ref","/Users/huson/data/michael/test/references-aligned.fasta","-rea","/Users/huson/data/michael/test/reads-aligned.fasta","-d2p","-f","BlastNText"};    args=new String[]{"-ref","/Users/huson/data/michael/adam/try-alignments/references-aligned.fasta","-rea","/Users/huson/data/michael/adam/try-alignments/use","-d2p","-o","/Users/huson/data/michael/adam/try-alignments/SRR172902-rpoB.blastn","-f","BlastNText","-n","880_rpoB_sequences_min_1000_AAs|kegg|3043","-r","/Users/huson/data/michael/adam/try-alignments/SRR172902-rpoB.fasta"};    args=new String[]{"-ref","/Users/huson/data/michael/adam/try-alignments/references-top-aligned.fasta","-rea","/Users/huson/data/michael/adam/try-alignments/use","-d2p","-o","/Users/huson/data/michael/adam/try-alignments/SRR172902-rpoB.blastn","-f","BlastNText","-n","references-top|kegg|3043","-r","/Users/huson/data/michael/adam/try-alignments/SRR172902-rpoB.fasta"};    args=new String[]{"-ref","/Users/huson/data/michael/adam/try-alignments/one-aligned.fasta","-rea","/Users/huson/data/michael/adam/try-alignments/two-reads-aligned.fasta","-d2p","-o","/Users/huson/data/michael/adam/try-alignments/two.blastn","-f","BlastNText","-n","references-top|kegg|3043"};    args=new String[]{"-ref","/Users/huson/data/michael/adam/try-alignments/references-82-aligned.fasta","-rea","/Users/huson/data/michael/adam/try-alignments/use82","-d2p","-o","/Users/huson/data/michael/adam/try-alignments/SRR172902-rpoB-82.blastn","-f","BlastNText","-n","references-top|kegg|3043","-r","/Users/huson/data/michael/adam/try-alignments/SRR172902-rpoB.fasta"};  }  try {    long start=System.currentTimeMillis();    (new MergeAlignments()).run(args);    System.err.println("Time: " + ((System.currentTimeMillis() - start) / 1000) + "s");    System.exit(0);  } catch (  Exception ex) {    Basic.caught(ex);    System.exit(1);  }}  }
class C{  public void put(String key,int value){  int hash=(key.hashCode() & 0x7FFFFFFF) % HASHTABLE_SIZE;  Object[] bucket=fHashTable[hash];  if (bucket == null) {    bucket=new Object[1 + 2 * INITIAL_BUCKET_SIZE];    bucket[0]=new int[]{1};    bucket[1]=key;    bucket[2]=new int[]{value};    fHashTable[hash]=bucket;  } else {    int count=((int[])bucket[0])[0];    int offset=1 + 2 * count;    if (offset == bucket.length) {      int newSize=count + INITIAL_BUCKET_SIZE;      Object[] newBucket=new Object[1 + 2 * newSize];      System.arraycopy(bucket,0,newBucket,0,offset);      bucket=newBucket;      fHashTable[hash]=bucket;    }    boolean found=false;    int j=1;    for (int i=0; i < count; i++) {      if (bucket[j] == key) {        ((int[])bucket[j + 1])[0]=value;        found=true;        break;      }      j+=2;    }    if (!found) {      bucket[offset++]=key;      bucket[offset]=new int[]{value};      ((int[])bucket[0])[0]=++count;    }  }}  }
class C{  public int threshold(){  return soot.PhaseOptions.getInt(options,"threshold");}  }
class C{  public final boolean isExternal(){  return fCurrentEntity.isExternal();}  }
class C{  @Override public String toString(){  return "ViterbiPath score " + score + " leads to candidate unit "+ candidate.getUnit();}  }
class C{  private boolean checkPacket(byte[] packet){  return ((((packet[0] ^ iv[2]) & 0xFF) == ((mapleVersion >> 8) & 0xFF)) && (((packet[1] ^ iv[3]) & 0xFF) == (mapleVersion & 0xFF)));}  }
class C{  public static SubEquipmentCacheObject createTestSubEquipment(){  SubEquipmentCacheObject subEquipmentCacheObject=new SubEquipmentCacheObject(new Long(101),"Test SubEquipment","Test desc","Test class name",new Long(1222),new Long(5000300),10,new Long(1223),new Long(100));  subEquipmentCacheObject.setStatusDescription("Status description");  subEquipmentCacheObject.setStatusTime(new Timestamp(System.currentTimeMillis()));  subEquipmentCacheObject.setSupervisionStatus(SupervisionStatus.DOWN);  return subEquipmentCacheObject;}  }
class C{  public static <T>Stream<T> opt2stream(Optional<T> opt){  return opt.map(null).orElseGet(null);}  }
class C{  public boolean containsSymbol(String symbol){  int bucket=hash(symbol) % fTableSize;  int length=symbol.length();  OUTER:   for (Entry entry=fBuckets[bucket]; entry != null; entry=entry.next) {    if (length == entry.characters.length) {      for (int i=0; i < length; i++) {        if (symbol.charAt(i) != entry.characters[i]) {          continue OUTER;        }      }      return true;    }  }  return false;}  }
class C{  public VisibilityViewFilter(@NonNull final int[] viewVisibilities){  this.viewVisibilities=viewVisibilities;}  }
class C{  public OrderedScheduler build(){  if (corePoolSize <= 0) {    corePoolSize=Runtime.getRuntime().availableProcessors();  }  if (null == threadFactory) {    threadFactory=Executors.defaultThreadFactory();  }  return new OrderedScheduler(name,corePoolSize,threadFactory,traceTaskExecution,traceTaskExecutionWarnTimeUs,statsLogger,perExecutorStatsLogger);}  }
class C{  public static Boolean toBoolean(String value){  if ("Y".equalsIgnoreCase(value)) {    return true;  } else   if ("N".equalsIgnoreCase(value)) {    return false;  } else {    return null;  }}  }
class C{  public static String scheduleService(HttpServletRequest request,HttpServletResponse response){  Security security=(Security)request.getAttribute("security");  GenericValue userLogin=(GenericValue)request.getSession().getAttribute("userLogin");  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  Locale locale=UtilHttp.getLocale(request);  TimeZone timeZone=UtilHttp.getTimeZone(request);  Map<String,Object> params=UtilHttp.getParameterMap(request);  String jobName=(String)params.remove("JOB_NAME");  String serviceName=(String)params.remove("SERVICE_NAME");  String poolName=(String)params.remove("POOL_NAME");  String serviceTime=(String)params.remove("SERVICE_TIME");  String serviceEndTime=(String)params.remove("SERVICE_END_TIME");  String serviceFreq=(String)params.remove("SERVICE_FREQUENCY");  String serviceIntr=(String)params.remove("SERVICE_INTERVAL");  String serviceCnt=(String)params.remove("SERVICE_COUNT");  String retryCnt=(String)params.remove("SERVICE_MAXRETRY");  String eventId=(String)params.remove("SERVICE_EVENTID");  Map<String,Integer> freqMap=new HashMap<String,Integer>();  freqMap.put("SECONDLY",Integer.valueOf(1));  freqMap.put("MINUTELY",Integer.valueOf(2));  freqMap.put("HOURLY",Integer.valueOf(3));  freqMap.put("DAILY",Integer.valueOf(4));  freqMap.put("WEEKLY",Integer.valueOf(5));  freqMap.put("MONTHLY",Integer.valueOf(6));  freqMap.put("YEARLY",Integer.valueOf(7));  long startTime=(new Date()).getTime();  long endTime=0;  int maxRetry=-1;  int count=1;  int interval=1;  int frequency=RecurrenceRule.DAILY;  StringBuilder errorBuf=new StringBuilder();  if (serviceName == null) {    String errMsg=UtilProperties.getMessage(CoreEvents.err_resource,"coreEvents.must_specify_service",locale);    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  ModelService modelService=null;  try {    modelService=dispatcher.getDispatchContext().getModelService(serviceName);  } catch (  GenericServiceException e) {    Debug.logError(e,"Error looking up ModelService for serviceName [" + serviceName + "]",module);    String errMsg=UtilProperties.getMessage(CoreEvents.err_resource,"coreEvents.error_modelservice_for_srv_name",locale);    request.setAttribute("_ERROR_MESSAGE_",errMsg + " [" + serviceName+ "]: "+ e.toString());    return "error";  }  if (modelService == null) {    String errMsg=UtilProperties.getMessage(CoreEvents.err_resource,"coreEvents.service_name_not_find",locale);    request.setAttribute("_ERROR_MESSAGE_",errMsg + " [" + serviceName+ "]");    return "error";  }  Map<String,Object> serviceContext=new HashMap<String,Object>();  Iterator<String> ci=modelService.getInParamNames().iterator();  while (ci.hasNext()) {    String name=ci.next();    if ("userLogin".equals(name))     continue;    if ("locale".equals(name))     continue;    Object value=request.getParameter(name);    if (value == null) {      value=request.getAttribute(name);    }    if (value == null) {      value=request.getSession().getAttribute(name);    }    if (value == null) {      continue;    }    if (value instanceof String && ((String)value).length() == 0) {      value=null;    }    serviceContext.put(name,value);  }  serviceContext=modelService.makeValid(serviceContext,ModelService.IN_PARAM,true,null,timeZone,locale);  if (userLogin != null) {    serviceContext.put("userLogin",userLogin);  }  if (locale != null) {    serviceContext.put("locale",locale);  }  if (!modelService.export && !security.hasPermission("SERVICE_INVOKE_ANY",request.getSession())) {    String errMsg=UtilProperties.getMessage(CoreEvents.err_resource,"coreEvents.not_authorized_to_call",locale);    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  if (UtilValidate.isNotEmpty(serviceTime)) {    try {      Timestamp ts1=Timestamp.valueOf(serviceTime);      startTime=ts1.getTime();    } catch (    IllegalArgumentException e) {      try {        startTime=Long.parseLong(serviceTime);      } catch (      NumberFormatException nfe) {        String errMsg=UtilProperties.getMessage(CoreEvents.err_resource,"coreEvents.invalid_format_time",locale);        errorBuf.append(errMsg);      }    }    if (startTime < (new Date()).getTime()) {      String errMsg=UtilProperties.getMessage(CoreEvents.err_resource,"coreEvents.service_time_already_passed",locale);      errorBuf.append(errMsg);    }  }  if (UtilValidate.isNotEmpty(serviceEndTime)) {    try {      Timestamp ts1=Timestamp.valueOf(serviceEndTime);      endTime=ts1.getTime();    } catch (    IllegalArgumentException e) {      try {        endTime=Long.parseLong(serviceTime);      } catch (      NumberFormatException nfe) {        String errMsg=UtilProperties.getMessage(CoreEvents.err_resource,"coreEvents.invalid_format_time",locale);        errorBuf.append(errMsg);      }    }    if (endTime < (new Date()).getTime()) {      String errMsg=UtilProperties.getMessage(CoreEvents.err_resource,"coreEvents.service_time_already_passed",locale);      errorBuf.append(errMsg);    }  }  if (UtilValidate.isNotEmpty(serviceIntr)) {    try {      interval=Integer.parseInt(serviceIntr);    } catch (    NumberFormatException nfe) {      String errMsg=UtilProperties.getMessage(CoreEvents.err_resource,"coreEvents.invalid_format_interval",locale);      errorBuf.append(errMsg);    }  }  if (UtilValidate.isNotEmpty(serviceCnt)) {    try {      count=Integer.parseInt(serviceCnt);    } catch (    NumberFormatException nfe) {      String errMsg=UtilProperties.getMessage(CoreEvents.err_resource,"coreEvents.invalid_format_count",locale);      errorBuf.append(errMsg);    }  }  if (UtilValidate.isNotEmpty(serviceFreq)) {    int parsedValue=0;    try {      parsedValue=Integer.parseInt(serviceFreq);      if (parsedValue > 0 && parsedValue < 8)       frequency=parsedValue;    } catch (    NumberFormatException nfe) {      parsedValue=0;    }    if (parsedValue == 0) {      if (!freqMap.containsKey(serviceFreq.toUpperCase())) {        String errMsg=UtilProperties.getMessage(CoreEvents.err_resource,"coreEvents.invalid_format_frequency",locale);        errorBuf.append(errMsg);      } else {        frequency=freqMap.get(serviceFreq.toUpperCase()).intValue();      }    }  }  if (UtilValidate.isNotEmpty(retryCnt)) {    int parsedValue=-2;    try {      parsedValue=Integer.parseInt(retryCnt);    } catch (    NumberFormatException e) {      parsedValue=-2;    }    if (parsedValue > -2) {      maxRetry=parsedValue;    } else {      maxRetry=modelService.maxRetry;    }  } else {    maxRetry=modelService.maxRetry;  }  if (eventId != null && eventId.isEmpty()) {    eventId=null;  }  if (errorBuf.length() > 0) {    request.setAttribute("_ERROR_MESSAGE_",errorBuf.toString());    return "error";  }  Map<String,Object> syncServiceResult=null;  try {    if (null != request.getParameter("_RUN_SYNC_") && request.getParameter("_RUN_SYNC_").equals("Y")) {      syncServiceResult=dispatcher.runSync(serviceName,serviceContext);    } else {      dispatcher.schedule(jobName,poolName,serviceName,serviceContext,startTime,frequency,interval,count,endTime,maxRetry,eventId);    }  } catch (  GenericServiceException e) {    String errMsg=UtilProperties.getMessage(CoreEvents.err_resource,"coreEvents.service_dispatcher_exception",locale);    request.setAttribute("_ERROR_MESSAGE_",errMsg + e.getMessage());    return "error";  }  String errMsg=UtilProperties.getMessage(CoreEvents.err_resource,"coreEvents.service_scheduled",locale);  request.setAttribute("_EVENT_MESSAGE_",errMsg);  if (null != syncServiceResult) {    request.getSession().setAttribute("_RUN_SYNC_RESULT_",syncServiceResult);    return "sync_success";  }  return "success";}  }
class C{  public void remove(){  throw new UnsupportedOperationException();}  }
class C{  public RemoteVideoInfo(RemoteVideoInfo other){  this(other.title,other.durationMillis,other.state,other.currentTimeMillis,other.errorMessage);}  }
class C{  private static void extractRectItem(SvgTree avg,SvgLeafNode child,Node currentGroupNode){  logger.log(Level.FINE,"Rect found" + currentGroupNode.getTextContent());  if (currentGroupNode.getNodeType() == Node.ELEMENT_NODE) {    float x=0;    float y=0;    float width=Float.NaN;    float height=Float.NaN;    NamedNodeMap a=currentGroupNode.getAttributes();    int len=a.getLength();    boolean pureTransparent=false;    for (int j=0; j < len; j++) {      Node n=a.item(j);      String name=n.getNodeName();      String value=n.getNodeValue();      if (name.equals(SVG_STYLE)) {        addStyleToPath(child,value);        if (value.contains("opacity:0;")) {          pureTransparent=true;        }      } else       if (presentationMap.containsKey(name)) {        child.fillPresentationAttributes(name,value);      } else       if (name.equals("clip-path") && value.startsWith("url(#SVGID_")) {      } else       if (name.equals("x")) {        x=Float.parseFloat(value);      } else       if (name.equals("y")) {        y=Float.parseFloat(value);      } else       if (name.equals("width")) {        width=Float.parseFloat(value);      } else       if (name.equals("height")) {        height=Float.parseFloat(value);      } else       if (name.equals("style")) {      }    }    if (!pureTransparent && avg != null && !Float.isNaN(x) && !Float.isNaN(y) && !Float.isNaN(width) && !Float.isNaN(height)) {      PathBuilder builder=new PathBuilder();      builder.absoluteMoveTo(x,y);      builder.relativeHorizontalTo(width);      builder.relativeVerticalTo(height);      builder.relativeHorizontalTo(-width);      builder.relativeClose();      child.setPathData(builder.toString());    }  }}  }
class C{  public void removeStyle(Style styleToDelete){  List<Style> styleList=null;  if (this.symbolData.getStyledLayer() instanceof NamedLayerImpl) {    NamedLayerImpl namedLayer=(NamedLayerImpl)this.symbolData.getStyledLayer();    styleList=namedLayer.styles();  } else   if (this.symbolData.getStyledLayer() instanceof UserLayerImpl) {    UserLayerImpl userLayer=(UserLayerImpl)this.symbolData.getStyledLayer();    styleList=userLayer.userStyles();  }  if (styleList != null) {    int indexFound=-1;    int index=0;    for (    Style style : styleList) {      if (style == styleToDelete) {        indexFound=index;        break;      } else {        index++;      }    }    if (indexFound > -1) {      styleList.remove(indexFound);    }  }}  }
class C{  public static final void drawLineSegment(GL2 gl,Segment segment,boolean points){  Vector2 p1=segment.getPoint1();  Vector2 p2=segment.getPoint2();  RenderUtilities.drawLineSegment(gl,p1.x,p1.y,p2.x,p2.y,points);}  }
class C{  private void displaySitePermissions(){  addPreferencesFromResource(R.xml.single_website_preferences);  ListAdapter preferences=getPreferenceScreen().getRootAdapter();  for (int i=0; i < preferences.getCount(); ++i) {    Preference preference=(Preference)preferences.getItem(i);    if (PREF_SITE_TITLE.equals(preference.getKey())) {      preference.setTitle(mSite.getTitle());    } else     if (PREF_CLEAR_DATA.equals(preference.getKey())) {      long usage=mSite.getTotalUsage();      if (usage > 0) {        Context context=preference.getContext();        preference.setTitle(String.format(context.getString(R.string.origin_settings_storage_usage_brief),Formatter.formatShortFileSize(context,usage)));        ((ClearWebsiteStorage)preference).setConfirmationListener(this);      } else {        getPreferenceScreen().removePreference(preference);      }    } else     if (PREF_RESET_SITE.equals(preference.getKey())) {      preference.setOnPreferenceClickListener(this);    } else     if (PREF_CAMERA_CAPTURE_PERMISSION.equals(preference.getKey())) {      setUpListPreference(preference,mSite.getCameraPermission());    } else     if (PREF_COOKIES_PERMISSION.equals(preference.getKey())) {      setUpListPreference(preference,mSite.getCookiePermission());    } else     if (PREF_FULLSCREEN_PERMISSION.equals(preference.getKey())) {      preference.setEnabled(false);      setUpListPreference(preference,mSite.getFullscreenPermission());    } else     if (PREF_JAVASCRIPT_PERMISSION.equals(preference.getKey())) {      setUpListPreference(preference,mSite.getJavaScriptPermission());    } else     if (PREF_LOCATION_ACCESS.equals(preference.getKey())) {      setUpLocationPreference(preference);    } else     if (PREF_MIC_CAPTURE_PERMISSION.equals(preference.getKey())) {      setUpListPreference(preference,mSite.getMicrophonePermission());    } else     if (PREF_MIDI_SYSEX_PERMISSION.equals(preference.getKey())) {      setUpListPreference(preference,mSite.getMidiPermission());    } else     if (PREF_POPUP_PERMISSION.equals(preference.getKey())) {      setUpListPreference(preference,mSite.getPopupPermission());    } else     if (PREF_PROTECTED_MEDIA_IDENTIFIER_PERMISSION.equals(preference.getKey())) {      setUpListPreference(preference,mSite.getProtectedMediaIdentifierPermission());    } else     if (PREF_PUSH_NOTIFICATIONS_PERMISSION.equals(preference.getKey())) {      setUpListPreference(preference,mSite.getPushNotificationPermission());    }  }  PreferenceScreen preferenceScreen=getPreferenceScreen();  SiteSettingsCategory categoryWithWarning=getWarningCategory();  if (categoryWithWarning == null) {    getPreferenceScreen().removePreference(preferenceScreen.findPreference(PREF_OS_PERMISSIONS_WARNING));    getPreferenceScreen().removePreference(preferenceScreen.findPreference(PREF_OS_PERMISSIONS_WARNING_EXTRA));    getPreferenceScreen().removePreference(preferenceScreen.findPreference(PREF_OS_PERMISSIONS_WARNING_DIVIDER));  } else {    Preference osWarning=preferenceScreen.findPreference(PREF_OS_PERMISSIONS_WARNING);    Preference osWarningExtra=preferenceScreen.findPreference(PREF_OS_PERMISSIONS_WARNING_EXTRA);    categoryWithWarning.configurePermissionIsOffPreferences(osWarning,osWarningExtra,getActivity(),false);    if (osWarning.getTitle() == null) {      getPreferenceScreen().removePreference(preferenceScreen.findPreference(PREF_OS_PERMISSIONS_WARNING));    } else     if (osWarningExtra.getTitle() == null) {      getPreferenceScreen().removePreference(preferenceScreen.findPreference(PREF_OS_PERMISSIONS_WARNING_EXTRA));    }  }  if (!hasUsagePreferences()) {    Preference heading=preferenceScreen.findPreference(PREF_USAGE);    preferenceScreen.removePreference(heading);  }  if (!hasPermissionsPreferences()) {    Preference heading=preferenceScreen.findPreference(PREF_PERMISSIONS);    preferenceScreen.removePreference(heading);  }}  }
class C{  protected String positions(Token[] tokens){  StringBuilder buf=new StringBuilder();  for (  Token token : tokens) {    if (isIgnored(token.kind)) {      continue;    }    if (buf.length() > 0) {      buf.append(' ');    }    buf.append('[').append(token.left).append(',').append(token.right).append(')');  }  return buf.toString();}  }
class C{  private void tryScrollBackToTopAbortRefresh(){  tryScrollBackToTop();}  }
class C{  public IndexSelectPlan(TablePlan tp,IndexInfo ii,ConstantRange searchRange,Transaction tx){  this.tp=tp;  this.ii=ii;  this.searchRange=searchRange;  this.tx=tx;  Map<String,ConstantRange> ranges=new HashMap<String,ConstantRange>();  ranges.put(ii.fieldName(),searchRange);  hist=SelectPlan.constantRangeHistogram(tp.histogram(),ranges);}  }
class C{  public Expression lessThanEqual(Value v1,Value v2){  return new BinaryExpression(v1,v2,ExpressionType.LESS_THAN_OR_EQUAL);}  }
class C{  protected void removeStmts(List<IfStmt> deadStmts){  Chain units=sb.getUnits();  Iterator<IfStmt> deadIt=deadStmts.iterator();  while (deadIt.hasNext()) {    Unit dead=deadIt.next();    units.remove(dead);    dead.clearUnitBoxes();  }}  }
class C{  public MqttMessageLogParser() throws XMLException {  super(LoggedMqttMessage.class);}  }
class C{  public void run(){  PrintStream pOut=null;  if (OutFile.length() != 0) {    try {      pOut=new PrintStream(OutFile);    } catch (    FileNotFoundException fnfe) {      System.err.println("Cannot output to selected file:\n" + fnfe.getMessage());      return;    }  }  try {    doOptimizedEval(OutputSemaphore,pOut,WordMin,WordMax,WordDist,CharMin,CharMax,CharDist,Do.equals("char") || Do.equals("all"),Do.equals("word") || Do.equals("all"),SummaryDir,ModelDir,Threads,Silent,Progress);  } catch (  Exception ex) {    ex.printStackTrace(System.err);  }  if (pOut != null)   pOut.close();}  }
class C{  public static Bitmap decodeSampledBitmapFromFile(String filename,int reqWidth,int reqHeight){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeFile(filename,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  options.inJustDecodeBounds=false;  return BitmapFactory.decodeFile(filename,options);}  }
class C{  private void updateSymbol(){  if (!Controller.getInstance().isPopulating()) {    if (parentObj != null) {      parentObj.wktValueUpdated();    }  }}  }
class C{  public static ShoppingCartItem makeItem(Integer cartLocation,String productId,BigDecimal selectedAmount,BigDecimal quantity,BigDecimal unitPrice,Timestamp reservStart,BigDecimal reservLength,BigDecimal reservPersons,Timestamp shipBeforeDate,Timestamp shipAfterDate,Map<String,GenericValue> additionalProductFeatureAndAppls,Map<String,Object> attributes,String prodCatalogId,ProductConfigWrapper configWrapper,String itemType,ShoppingCart.ShoppingCartItemGroup itemGroup,LocalDispatcher dispatcher,ShoppingCart cart,Boolean triggerExternalOpsBool,Boolean triggerPriceRulesBool,String parentProductId,Boolean skipInventoryChecks,Boolean skipProductChecks) throws CartItemModifyException, ItemNotFoundException {  return makeItem(cartLocation,productId,selectedAmount,quantity,unitPrice,reservStart,reservLength,reservPersons,null,null,shipBeforeDate,shipAfterDate,additionalProductFeatureAndAppls,attributes,prodCatalogId,configWrapper,itemType,itemGroup,dispatcher,cart,triggerExternalOpsBool,triggerPriceRulesBool,parentProductId,skipInventoryChecks,skipProductChecks);}  }
class C{  protected OCUpload(Parcel source){  readFromParcel(source);}  }
class C{  private void resolveCaptures(){  Set<String> captures=new HashSet<>();  getVarSet().forEach(null);  captures.forEach(null);}  }
class C{  public TIntObjectHashMap(int initialCapacity,TIntHashingStrategy strategy){  super(initialCapacity,strategy);}  }
class C{  @Override public WebDriver frame(String nameOrId){  frameSwitcher.putFramePathOnStack(nameOrId);  return targetLocator.frame(nameOrId);}  }
class C{  public Provider<T> withKey(Object key){  this.key=key.toString();  return new Provider<>(this);}  }
class C{  private void writeSourceSinkDomPair(SourceSinkDomPair pair,Document document,Element rootElement){  final Element pairElement;  final Element sourceSinkElement;switch (pair.getType()) {case SourceDomPair:    pairElement=document.createElement("sourcedompair");  sourceSinkElement=document.createElement("source");break;case SinkDomPair:pairElement=document.createElement("sinkdompair");sourceSinkElement=document.createElement("sink");break;default :throw new RuntimeException("Invalid source/sink domain pair type");}rootElement.appendChild(pairElement);pairElement.appendChild(sourceSinkElement);writeSourceSinkSpec(pair.getSourceOrSink(),document,sourceSinkElement);writeDomainSpec(pair.getDomain(),document,pairElement);}  }
class C{  @deprecated protected int writeValueAndFinal(int i,boolean isFinal){}  }
class C{  public List<X509Certificate> checkClientTrusted(X509Certificate[] chain,String authType,String hostname) throws CertificateException {  return checkTrusted(chain,authType,hostname,true);}  }
class C{  public static boolean isPaymentType(GenericValue payment,String inputTypeId) throws GenericEntityException {  if (payment == null) {    return false;  }  GenericValue paymentType=payment.getRelatedOne("PaymentType",true);  if (paymentType == null) {    throw new GenericEntityException("Cannot find PaymentType for paymentId " + payment.getString("paymentId"));  }  String paymentTypeId=paymentType.getString("paymentTypeId");  if (inputTypeId.equals(paymentTypeId)) {    return true;  }  return isPaymentTypeRecurse(paymentType,inputTypeId);}  }
class C{  public static ProbeItemDescriptor discreteFillItem(String name,String description,ItemValueFormatter formatter,double dataFactor,long minValue,long maxValue){  return discreteOutlineItem(name,description,formatter,dataFactor,minValue,maxValue,DEFAULT_LINE_WIDTH,null,DEFAULT_COLOR);}  }
class C{  @Override protected boolean processTU(ITextUnit textUnit){  Property note=textUnit.getProperty(Property.NOTE);  if (note != null) {    String comments=note.toString();    char quote="\"".charAt(0);    comments=StringUtils.trimLeadingCharacter(comments,quote);    comments=StringUtils.trimTrailingCharacter(comments,quote);    note.setValue(comments);  }  return super.processTU(textUnit);}  }
class C{  public void addChangeListener(ChangeListener cl){  if (!m_listeners.contains(cl))   m_listeners.add(cl);}  }
class C{  private static DataSource makeInnerQuery(DruidAggregationQuery<?> query,double weight){  DruidAggregationQuery<?> innerQuery=query.getInnermostQuery();  List<Aggregation> aggregations;  aggregations=Collections.singletonList(new CountAggregation("ignored"));  List<PostAggregation> postAggregations;  postAggregations=Collections.singletonList(new ConstantPostAggregation("count",weight));  if (!(innerQuery.getQueryType() instanceof DefaultQueryType)) {    return null;  }  DefaultQueryType innerQueryType=(DefaultQueryType)innerQuery.getQueryType();switch (innerQueryType) {case GROUP_BY:    GroupByQuery inner=new GroupByQuery(innerQuery.getDataSource(),innerQuery.getGranularity(),innerQuery.getDimensions(),innerQuery.getFilter(),(Having)null,aggregations,postAggregations,innerQuery.getIntervals(),stripColumnsFromLimitSpec(innerQuery));  return new QueryDataSource(inner);case TOP_N:TopNQuery topNQuery=(TopNQuery)innerQuery;GroupByQuery transformed=new GroupByQuery(new UnionDataSource(topNQuery.getDataSource().getPhysicalTables()),topNQuery.getGranularity(),topNQuery.getDimensions(),topNQuery.getFilter(),null,aggregations,postAggregations,topNQuery.getIntervals(),null);return new QueryDataSource(transformed);default :return null;}}  }
class C{  public NumericEntityEscaper(){  this(0,Integer.MAX_VALUE,true);}  }
class C{  protected void notifyDataInvalidatedEvent(){  if (datasetObservers != null) {    for (    DataSetObserver observer : datasetObservers) {      observer.onInvalidated();    }  }}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public SubLine(final Segment segment){  super(segment.getLine(),buildIntervalSet(segment.getStart(),segment.getEnd(),segment.getLine().getTolerance()));}  }
class C{  private void createSynchronized(polyglot.ast.Synchronized synchStmt){  soot.Value sootExpr=base().createAggressiveExpr(synchStmt.expr(),false,false);  soot.jimple.EnterMonitorStmt enterMon=soot.jimple.Jimple.v().newEnterMonitorStmt(sootExpr);  body.getUnits().add(enterMon);  if (beforeReturn == null) {    beforeReturn=new ArrayList<List<Stmt>>();  }  if (afterReturn == null) {    afterReturn=new ArrayList<List<Stmt>>();  }  beforeReturn.add(new ArrayList<Stmt>());  afterReturn.add(new ArrayList<Stmt>());  if (monitorStack == null) {    monitorStack=new Stack<Value>();  }  monitorStack.push(sootExpr);  Util.addLnPosTags(enterMon.getOpBox(),synchStmt.expr().position());  Util.addLnPosTags(enterMon,synchStmt.expr().position());  soot.jimple.Stmt startNoop=soot.jimple.Jimple.v().newNopStmt();  body.getUnits().add(startNoop);  createBlock(synchStmt.body());  soot.jimple.ExitMonitorStmt exitMon=soot.jimple.Jimple.v().newExitMonitorStmt(sootExpr);  body.getUnits().add(exitMon);  monitorStack.pop();  Util.addLnPosTags(exitMon.getOpBox(),synchStmt.expr().position());  Util.addLnPosTags(exitMon,synchStmt.expr().position());  soot.jimple.Stmt endSynchNoop=soot.jimple.Jimple.v().newNopStmt();  soot.jimple.Stmt gotoEnd=soot.jimple.Jimple.v().newGotoStmt(endSynchNoop);  soot.jimple.Stmt endNoop=soot.jimple.Jimple.v().newNopStmt();  body.getUnits().add(endNoop);  body.getUnits().add(gotoEnd);  soot.jimple.Stmt catchAllBeforeNoop=soot.jimple.Jimple.v().newNopStmt();  body.getUnits().add(catchAllBeforeNoop);  soot.Local formalLocal=lg.generateLocal(soot.RefType.v("java.lang.Throwable"));  soot.jimple.CaughtExceptionRef exceptRef=soot.jimple.Jimple.v().newCaughtExceptionRef();  soot.jimple.Stmt stmt=soot.jimple.Jimple.v().newIdentityStmt(formalLocal,exceptRef);  body.getUnits().add(stmt);  soot.jimple.Stmt catchBeforeNoop=soot.jimple.Jimple.v().newNopStmt();  body.getUnits().add(catchBeforeNoop);  soot.Local local=lg.generateLocal(soot.RefType.v("java.lang.Throwable"));  soot.jimple.Stmt assign=soot.jimple.Jimple.v().newAssignStmt(local,formalLocal);  body.getUnits().add(assign);  soot.jimple.ExitMonitorStmt catchExitMon=soot.jimple.Jimple.v().newExitMonitorStmt(sootExpr);  body.getUnits().add(catchExitMon);  Util.addLnPosTags(catchExitMon.getOpBox(),synchStmt.expr().position());  soot.jimple.Stmt catchAfterNoop=soot.jimple.Jimple.v().newNopStmt();  body.getUnits().add(catchAfterNoop);  soot.jimple.Stmt throwStmt=soot.jimple.Jimple.v().newThrowStmt(local);  body.getUnits().add(throwStmt);  body.getUnits().add(endSynchNoop);  List<Stmt> before=beforeReturn.get(beforeReturn.size() - 1);  List<Stmt> after=afterReturn.get(afterReturn.size() - 1);  if (before.size() > 0) {    addToExceptionList(startNoop,before.get(0),catchAllBeforeNoop,soot.Scene.v().getSootClass("java.lang.Throwable"));    for (int i=1; i < before.size(); i++) {      addToExceptionList(after.get(i - 1),before.get(i),catchAllBeforeNoop,soot.Scene.v().getSootClass("java.lang.Throwable"));    }    addToExceptionList(after.get(after.size() - 1),endNoop,catchAllBeforeNoop,soot.Scene.v().getSootClass("java.lang.Throwable"));  } else {    addToExceptionList(startNoop,endNoop,catchAllBeforeNoop,soot.Scene.v().getSootClass("java.lang.Throwable"));  }  beforeReturn.remove(before);  afterReturn.remove(after);  addToExceptionList(catchBeforeNoop,catchAfterNoop,catchAllBeforeNoop,soot.Scene.v().getSootClass("java.lang.Throwable"));}  }
class C{  @Override public void performWriteRequest(InsertAllRequest request,String topic,Set<Schema> schemas){  InsertAllResponse writeResponse=bigQuery.insertAll(request);  if (writeResponse.hasErrors() && onlyContainsInvalidSchemaErrors(writeResponse.insertErrors())) {    schemaManager.updateSchema(request.table(),topic,schemas);  }  while (writeResponse.hasErrors()) {    logger.trace("insertion failed");    if (onlyContainsInvalidSchemaErrors(writeResponse.insertErrors())) {      logger.debug("re-attempting insertion");      writeResponse=bigQuery.insertAll(request);    } else {      throw new BigQueryConnectException(writeResponse.insertErrors());    }  }  logger.debug("table insertion completed successfully");}  }
class C{  public void addTypeArgument(Access node){  List<Access> list=(parent == null || state == null) ? getTypeArgumentListNoTransform() : getTypeArgumentList();  list.addChild(node);}  }
class C{  public List<String> top(int n){  List<String> top=new ArrayList<>();  CategoryColumn copy=this.copy();  copy.sortDescending();  for (int i=0; i < n; i++) {    top.add(copy.get(i));  }  return top;}  }
class C{  public static String deflate(String previous,String current){  if (previous == null)   return current;  StringBuilder buf=new StringBuilder();  int start1=0;  int start2=0;  while (start1 < previous.length() && start2 < current.length()) {    int end1=start1;    int end2=start2;    while (end1 <= previous.length() && end2 <= current.length()) {      int c1=(end1 < previous.length() ? previous.charAt(end1) : '\t');      int c2=(end2 < current.length() ? current.charAt(end2) : '\t');      if (c1 == c2) {        if (c1 == '\t') {          buf.append("&");          break;        } else {          end1++;          end2++;        }      } else {        while (end1 < previous.length() && previous.charAt(end1) != '\t') {          end1++;        }        while (end2 < current.length() && current.charAt(end2) != '\t') {          end2++;        }        for (int i=start2; i < end2; i++)         buf.append(current.charAt(i));        break;      }    }    start1=end1 + 1;    start2=end2 + 1;    if (start2 < current.length())     buf.append("\t");  }  return buf.toString();}  }
class C{  public static void stopMethodTracing(){  if (isDebug) {    Debug.stopMethodTracing();  }}  }
class C{  public PlacesAddQuery(VkApiClient client,UserActor actor,String title,float latitude,float longitude){  super(client,"places.add",AddResponse.class);  accessToken(actor.getAccessToken());  title(title);  latitude(latitude);  longitude(longitude);}  }
class C{  @NotNull public ImageOverlayBuilder toClipboard(){  new CopyImagetoClipBoard().copyImage(bufferedImage);  return this;}  }
class C{  public static QueueClientFactory forClusterAndHttpClient(String clusterName,Client client){  return new QueueClientFactory(clusterName,client);}  }
class C{  @Override public double nextGaussian(){  return randomGenerator.nextGaussian();}  }
class C{  public static void markText(JTextComponent pane,int start,int end,SimpleMarker marker){  try {    Highlighter hiliter=pane.getHighlighter();    int selStart=pane.getSelectionStart();    int selEnd=pane.getSelectionEnd();    if (selStart == selEnd || end < selStart || start > selStart) {      hiliter.addHighlight(start,end,marker);      return;    }    if (selStart > start && selStart < end) {      hiliter.addHighlight(start,selStart,marker);    }    if (selEnd > start && selEnd < end) {      hiliter.addHighlight(selEnd,end,marker);    }  } catch (  BadLocationException ex) {    LOG.log(Level.SEVERE,null,ex);  }}  }
class C{  public static void prepareOut(Object[] newOutArr,ByteBuffer[] byteBufferArr,Object[] out,int dimCount){  byte[] nonDictionaryCols=RemoveDictionaryUtil.packByteBufferIntoSingleByteArray(byteBufferArr);  Integer[] dimArray=new Integer[dimCount];  for (int i=0; i < dimCount; i++) {    dimArray[i]=(Integer)out[i];  }  Object[] measureArray=new Object[out.length - dimCount];  int index=0;  for (int j=dimCount; j < out.length; j++) {    measureArray[index++]=out[j];  }  newOutArr[IgnoreDictionary.DIMENSION_INDEX_IN_ROW.getIndex()]=dimArray;  newOutArr[IgnoreDictionary.BYTE_ARRAY_INDEX_IN_ROW.getIndex()]=nonDictionaryCols;  newOutArr[IgnoreDictionary.MEASURES_INDEX_IN_ROW.getIndex()]=measureArray;}  }
class C{  public void cleanPAG(){  simple.clear();  load.clear();  store.clear();  alloc.clear();  simpleInv.clear();  loadInv.clear();  storeInv.clear();  allocInv.clear();}  }
class C{  private TimeUUIDs(){}  }
class C{  public boolean onOverrideUrlLoading(String url){  for (  PluginEntry entry : this.entryMap.values()) {    CordovaPlugin plugin=pluginMap.get(entry.service);    if (plugin != null && plugin.onOverrideUrlLoading(url)) {      return true;    }  }  return false;}  }
class C{  protected Object entryInitialFlow(){  return emptySet.clone();}  }
class C{  int size(){  return 0;}  }
class C{  public static String relativize(String targetPath,String basePath){  if (basePath == null || basePath.equals(""))   return targetPath;  if (targetPath == null || targetPath.equals(""))   return "";  String pathSeparator=File.separator;  String normalizedTargetPath=FilenameUtils.normalizeNoEndSeparator(targetPath);  String normalizedBasePath=FilenameUtils.normalizeNoEndSeparator(basePath);  if (basePath.equals(targetPath))   return "";  if (pathSeparator.equals("/")) {    normalizedTargetPath=FilenameUtils.separatorsToUnix(normalizedTargetPath);    normalizedBasePath=FilenameUtils.separatorsToUnix(normalizedBasePath);  } else   if (pathSeparator.equals("\\")) {    normalizedTargetPath=FilenameUtils.separatorsToWindows(normalizedTargetPath);    normalizedBasePath=FilenameUtils.separatorsToWindows(normalizedBasePath);  } else {    throw new IllegalArgumentException("Unrecognised dir separator '" + pathSeparator + "'");  }  String[] base=normalizedBasePath.split(Pattern.quote(pathSeparator));  String[] target=normalizedTargetPath.split(Pattern.quote(pathSeparator));  StringBuilder common=new StringBuilder();  int commonIndex=0;  while (commonIndex < target.length && commonIndex < base.length && target[commonIndex].equals(base[commonIndex])) {    common.append(target[commonIndex]).append(pathSeparator);    commonIndex++;  }  if (commonIndex == 0) {    return targetPath;  }  boolean baseIsFile=true;  File baseResource=new File(normalizedBasePath);  if (baseResource.exists()) {    baseIsFile=baseResource.isFile();  } else   if (basePath.endsWith(pathSeparator)) {    baseIsFile=false;  }  StringBuilder relative=new StringBuilder();  if (base.length != commonIndex) {    int numDirsUp=baseIsFile ? base.length - commonIndex - 1 : base.length - commonIndex;    for (int i=0; i < numDirsUp; i++) {      relative.append("..").append(pathSeparator);    }  }  relative.append(normalizedTargetPath.substring(common.length()));  relative=Strings.replace(relative,File.separator,"/");  return relative.toString();}  }
class C{  public AdsGetAdsQuery clientId(Integer value){  return unsafeParam("client_id",value);}  }
class C{  public String patch_addPadding(LinkedList<Patch> patches){  short paddingLength=this.Patch_Margin;  String nullPadding="";  for (short x=1; x <= paddingLength; x++) {    nullPadding+=String.valueOf((char)x);  }  for (  Patch aPatch : patches) {    aPatch.start1+=paddingLength;    aPatch.start2+=paddingLength;  }  Patch patch=patches.getFirst();  LinkedList<Diff> diffs=patch.diffs;  if (diffs.isEmpty() || diffs.getFirst().operation != Operation.EQUAL) {    diffs.addFirst(new Diff(Operation.EQUAL,nullPadding));    patch.start1-=paddingLength;    patch.start2-=paddingLength;    patch.length1+=paddingLength;    patch.length2+=paddingLength;  } else   if (paddingLength > diffs.getFirst().text.length()) {    Diff firstDiff=diffs.getFirst();    int extraLength=paddingLength - firstDiff.text.length();    firstDiff.text=nullPadding.substring(firstDiff.text.length()) + firstDiff.text;    patch.start1-=extraLength;    patch.start2-=extraLength;    patch.length1+=extraLength;    patch.length2+=extraLength;  }  patch=patches.getLast();  diffs=patch.diffs;  if (diffs.isEmpty() || diffs.getLast().operation != Operation.EQUAL) {    diffs.addLast(new Diff(Operation.EQUAL,nullPadding));    patch.length1+=paddingLength;    patch.length2+=paddingLength;  } else   if (paddingLength > diffs.getLast().text.length()) {    Diff lastDiff=diffs.getLast();    int extraLength=paddingLength - lastDiff.text.length();    lastDiff.text+=nullPadding.substring(0,extraLength);    patch.length1+=extraLength;    patch.length2+=extraLength;  }  return nullPadding;}  }
class C{  public static float abs(final float x){  return Float.intBitsToFloat(MASK_NON_SIGN_INT & Float.floatToRawIntBits(x));}  }
class C{  public DefaultScrollableDataIterator(SQLQuery sqlQuery,SessionFactory sessionFactory,int fetchSize,boolean performOrderById){  super(sqlQuery,sessionFactory,fetchSize,performOrderById);}  }
class C{  public static boolean isLaunchErrorActivityWhenInBackground(){  return launchErrorActivityWhenInBackground;}  }
class C{  public static String nullSafeToString(boolean[] array){  if (array == null) {    return NULL_STRING;  }  int length=array.length;  if (length == 0) {    return EMPTY_ARRAY;  }  StringBuffer buffer=new StringBuffer();  for (int i=0; i < length; i++) {    if (i == 0) {      buffer.append(ARRAY_START);    } else {      buffer.append(ARRAY_ELEMENT_SEPARATOR);    }    buffer.append(array[i]);  }  buffer.append(ARRAY_END);  return buffer.toString();}  }
class C{  TxnManagerImpl(String[] args,LifeCycle lc,boolean persistent,boolean lookupRegister) throws Exception {  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.entering(TxnManagerImpl.class.getName(),"TxnManagerImpl",new Object[]{Arrays.asList(args),lc,Boolean.valueOf(persistent)});  }  lifeCycle=lc;  this.persistent=persistent;  this.lookupRegister=lookupRegister;  for (int j=0; j < IDSIZE; j++) {    _idGens[j]=new IdGenT();  }  try {    init(args);  } catch (  Throwable e) {    cleanup();    initFailed(e);  }  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.exiting(TxnManagerImpl.class.getName(),"TxnManagerImpl");  }  finer_par_logger=participantLogger.isLoggable(Level.FINER);  finest_par_logger=participantLogger.isLoggable(Level.FINEST);  finer_op_logger=operationsLogger.isLoggable(Level.FINER);  finest_op_logger=operationsLogger.isLoggable(Level.FINEST);  finer_tr_logger=transactionsLogger.isLoggable(Level.FINER);  finest_tr_logger=transactionsLogger.isLoggable(Level.FINEST);}  }
class C{  public long skip(long n){  if (_position + n > _count)   n=_count - _position;  if (n < 0)   return 0;  _position+=n;  return n;}  }
class C{  public static Var map(Resource resource){  if (isHasResourceResource(resource)) {    return var();  }  Var var=base(resource);  var=var.value(resource.getValue());  return var;}  }
class C{  public int createDeferredTextNode(String data,boolean ignorableWhitespace){  int nodeIndex=createNode(Node.TEXT_NODE);  int chunk=nodeIndex >> CHUNK_SHIFT;  int index=nodeIndex & CHUNK_MASK;  setChunkValue(fNodeValue,data,chunk,index);  setChunkIndex(fNodeExtra,ignorableWhitespace ? 1 : 0,chunk,index);  return nodeIndex;}  }
class C{  public static Boolean stringToBoolean(String value){  return Boolean.valueOf(value);}  }
class C{  public Map<Object,SpaceDocument> readDocumentsByKeys(SpaceDocumentColumnFamilyMapper mapper,String typeName,Object[] keyValues){  Map<Object,SpaceDocument> result=Collections.emptyMap();  ColumnFamilyMetadata metadata=metadataCache.getColumnFamilyMetadata(typeName);  if (metadata == null) {    metadata=fetchColumnFamilyMetadata(typeName,mapper);    if (metadata == null) {      return result;    }  }  ColumnFamilyTemplate<Object,String> template=getTemplate(metadata);  SpaceDocumentMapper hectorMapper=getMapperTemplate(metadata,mapper);  MappedColumnFamilyResult<Object,String,SpaceDocument> queryResult=template.queryColumns(Arrays.asList(keyValues),hectorMapper);  for (int i=0; i < keyValues.length; i++) {    if (queryResult.hasResults()) {      if (result.isEmpty()) {        result=new HashMap<Object,SpaceDocument>();      }      result.put(queryResult.getKey(),queryResult.getRow());    }    if (i < keyValues.length - 1) {      queryResult.next();    }  }  return result;}  }
class C{  public static ByteBuf inflate(ByteBuf buffer) throws DataFormatException {  ByteBuf source=null;  ByteBuf decompressed=PooledByteBufAllocator.DEFAULT.directBuffer();  try {    if (!buffer.isDirect()) {      ByteBuf temporary=PooledByteBufAllocator.DEFAULT.directBuffer();      temporary.writeBytes(buffer);      source=temporary;    } else {      source=buffer;    }    inflaterLocal.get().process(source,decompressed);    return decompressed;  } catch (  DataFormatException e) {    decompressed.release();    throw e;  } finally {    if (source != null && source != buffer) {      source.release();    }  }}  }
class C{  public void init$Children(){  children=new ASTNode[1];}  }
class C{  public void stopApplet(){  checkApplet();  logInfo(LogArea.CONFIG,"stopApplet() --> %s.stop()",applet.getClass().getName());  applet.stop();}  }
class C{  private boolean visitStaticFieldAccess(int opcode,String owner,String name,String desc,AccessRight accessRight){  if (accessRight != AccessRight.PUBLIC) {switch (opcode) {case Opcodes.GETSTATIC:      if (DEBUG) {        System.out.println("Get static field " + name);      }    visitLdcInsn(Type.getType("L" + owner + ";"));  push(name);invokeStatic(RUNTIME_TYPE,Method.getMethod("Object getStaticPrivateField(Class, String)"));ByteCodeUtils.unbox(this,Type.getType(desc));return true;case Opcodes.PUTSTATIC:if (DEBUG) {System.out.println("Set static field " + name);}box(Type.getType(desc));visitLdcInsn(Type.getType("L" + owner + ";"));push(name);invokeStatic(RUNTIME_TYPE,Method.getMethod("void setStaticPrivateField(Object, Class, String)"));return true;default :throw new RuntimeException("VisitStaticFieldAccess called with wrong opcode " + opcode);}}return false;}  }
class C{  @Override public double[] makeCumulativeTestPoints(){  return new double[]{0.0346808448626,0.0937009113303,0.143313661184,0.202008445998,0.293728320107,20.8026639595,8.74589525602,5.98756512605,4.38737418741,3.10751166664};}  }
class C{  public ClearModifiers(ClearModifiers modifiers1,ClearModifiers modifiers2,ClearModifiers modifiers3){  super(modifiers1,modifiers2,modifiers3);}  }
class C{  public static boolean isArrow(char c){  return isRange(c,'\u2190','\u21FF') || isRange(c,'\u27F0','\u27FF') || isRange(c,'\u2900','\u297F');}  }
class C{  public String[] upload_file(String group_name,long file_size,UploadCallback callback,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {  final String master_filename=null;  final String prefix_name=null;  return this.do_upload_file(ProtoCommon.STORAGE_PROTO_CMD_UPLOAD_FILE,group_name,master_filename,prefix_name,file_ext_name,file_size,callback,meta_list);}  }
class C{  protected Decision suggestCategory(SimpleTextDocument dDoc){  SimpleTextDocument stdTemp=new SimpleTextDocument();  stdTemp.setDataString(dDoc.getTempDataString());  if (Model == null)   createSVMModel(dTolerance,dCost,dGamma);  if (Model == null)   return new Decision(dDoc,"",1.0,new HashMap());  double dPrediction=-1;  svm_node[] naDoc=documentToNodeArray(stdTemp);  try {    FileWriter fw=new FileWriter("test.dat");    String sLine=String.valueOf(0) + " ";    for (int iElem=0; iElem < naDoc.length; iElem++) {      sLine+=String.valueOf(naDoc[iElem].index) + ":" + String.valueOf(naDoc[iElem].value)+ " ";    }    fw.write(sLine + "\n");    fw.close();  } catch (  Exception e) {    e.printStackTrace();  }  try {    int iRes=-1;    Process p=(new ProcessBuilder("svmpredict.exe","test.dat","model.dat","output")).start();    InputStreamReader reader=new InputStreamReader(p.getInputStream());    BufferedReader buf_reader=new BufferedReader(reader);    String line;    while ((line=buf_reader.readLine()) != null)     ;    FileReader fRes=new FileReader("output");    BufferedReader brOutput=new BufferedReader(fRes);    String sCur=brOutput.readLine();    if (sCur != "")     dPrediction=Double.valueOf(sCur);  } catch (  Exception ioe) {    ioe.printStackTrace();    dPrediction=-1;  }  try {    String sCategory=(String)CategoryList.get((int)dPrediction);    Decision dRes=new Decision(dDoc,sCategory,1.0,new HashMap());    return dRes;  } catch (  Exception e) {    Decision dRes=new Decision(dDoc,"",1.0,new HashMap());    return dRes;  }}  }
class C{  private static Configuration configure(Configuration config,String hibernateFile){  if (hibernateFile == null)   return config.configure(); else   return config.configure(hibernateFile);}  }
class C{  public static String describeElements(@Nullable PsiElement[] elements){  if (elements == null) {    return "Empty";  }  StringBuilder sb=new StringBuilder();  for (  PsiElement target : elements) {    appendElementDescription(sb,target);  }  return sb.toString();}  }
class C{  public Bucket(String label,String experimentID,double allocationPercent,boolean isControl,String description,String payload,String state){  this.setLabel(label).setExperimentID(experimentID).setAllocationPercent(allocationPercent).setControl(isControl).setDescription(description).setPayload(payload).setState(state);}  }
class C{  public MarketSearchQueryWithExtended priceFrom(Integer value){  return unsafeParam("price_from",value);}  }
class C{  public int createDeferredDocument(){  int nodeIndex=createNode(Node.DOCUMENT_NODE);  return nodeIndex;}  }
class C{  protected boolean isToolbarOverlay(){  return false;}  }
class C{  Relation(String name,Utterance owner){  this.name=name;  this.owner=owner;  head=null;  tail=null;}  }
class C{  public boolean isValidCountryCodeTld(String ccTld){  ccTld=unicodeToASCII(ccTld);  return Arrays.binarySearch(COUNTRY_CODE_TLDS,chompLeadingDot(ccTld.toLowerCase(Locale.ENGLISH))) >= 0;}  }
class C{  @Override public Filter createFilter(List<Expression> parameterList){  IsNullImpl filter=null;  if ((parameterList == null) || parameterList.isEmpty()) {    filter=new IsNullExtended();  } else {    filter=new IsNullExtended(parameterList.get(0));  }  return filter;}  }
class C{  public static String utf8BytesToString(byte[] bytes,int start,int length){  char[] chars=localBuffer.get();  if (chars == null || chars.length < length) {    chars=new char[length];    localBuffer.set(chars);  }  int outAt=0;  for (int at=start; length > 0; ) {    int v0=bytes[at] & 0xFF;    char out;switch (v0 >> 4) {case 0x00:case 0x01:case 0x02:case 0x03:case 0x04:case 0x05:case 0x06:case 0x07:{        length--;        if (v0 == 0) {          return throwBadUtf8(v0,at);        }        out=(char)v0;        at++;        break;      }case 0x0c:case 0x0d:{      length-=2;      if (length < 0) {        return throwBadUtf8(v0,at);      }      int v1=bytes[at + 1] & 0xFF;      if ((v1 & 0xc0) != 0x80) {        return throwBadUtf8(v1,at + 1);      }      int value=((v0 & 0x1f) << 6) | (v1 & 0x3f);      if ((value != 0) && (value < 0x80)) {        return throwBadUtf8(v1,at + 1);      }      out=(char)value;      at+=2;      break;    }case 0x0e:{    length-=3;    if (length < 0) {      return throwBadUtf8(v0,at);    }    int v1=bytes[at + 1] & 0xFF;    if ((v1 & 0xc0) != 0x80) {      return throwBadUtf8(v1,at + 1);    }    int v2=bytes[at + 2] & 0xFF;    if ((v2 & 0xc0) != 0x80) {      return throwBadUtf8(v2,at + 2);    }    int value=((v0 & 0x0f) << 12) | ((v1 & 0x3f) << 6) | (v2 & 0x3f);    if (value < 0x800) {      return throwBadUtf8(v2,at + 2);    }    out=(char)value;    at+=3;    break;  }default :{  return throwBadUtf8(v0,at);}}chars[outAt]=out;outAt++;}return new String(chars,0,outAt);}  }
class C{  public PhotosSaveQuery groupId(Integer value){  return unsafeParam("group_id",value);}  }
class C{  @Override public void onWebsocketPing(WebSocket conn,Framedata f){  FramedataImpl1 resp=new FramedataImpl1(f);  resp.setOptcode(Opcode.PONG);  conn.sendFrame(resp);}  }
class C{  public static File[] convertFileCollectionToFileArray(Collection<File> files){  return files.toArray(new File[files.size()]);}  }
class C{  public int length(){  return Histogram.length() + Graph.length();}  }
class C{  private static String doGetPath(String filename,int separatorAdd){  if (filename == null) {    return null;  }  int prefix=getPrefixLength(filename);  if (prefix < 0) {    return null;  }  int index=indexOfLastSeparator(filename);  int endIndex=index + separatorAdd;  if (prefix >= filename.length() || index < 0 || prefix >= endIndex) {    return "";  }  return filename.substring(prefix,endIndex);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SwitchHostile_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200456,skilltarget,skillname);}  }
class C{  public void writeDouble(double value) throws JMSException {  initializeWriting();  try {    this.dataOut.writeDouble(value);  } catch (  IOException ioe) {    JMSException jmsEx=new JMSException("Could not write data:" + ioe.toString());    jmsEx.setLinkedException(ioe);    throw jmsEx;  }}  }
class C{  static void writeShort(final byte[] b,final int index,final int s){  b[index]=(byte)(s >>> 8);  b[index + 1]=(byte)s;}  }
class C{  public synchronized void close(){}  }
class C{  public AdsCreateCampaignsQuery createCampaigns(UserActor actor,int accountId,String data){  return new AdsCreateCampaignsQuery(getClient(),actor,accountId,data);}  }
class C{  public boolean preConcat(Matrix other){  float[] otherValue=new float[9];  other.getValues(otherValue);  float[] newValue=new float[9];  newValue[MSCALE_X]=MATRIX[MSCALE_X] * otherValue[MSCALE_X] + MATRIX[MSKEW_X] * otherValue[MSKEW_Y] + MATRIX[MTRANS_X] * otherValue[MPERSP_0];  newValue[MSKEW_X]=MATRIX[MSCALE_X] * otherValue[MSKEW_X] + MATRIX[MSKEW_X] * otherValue[MSCALE_Y] + MATRIX[MTRANS_X] * otherValue[MPERSP_1];  newValue[MTRANS_X]=MATRIX[MSCALE_X] * otherValue[MTRANS_X] + MATRIX[MSKEW_X] * otherValue[MTRANS_Y] + MATRIX[MTRANS_X] * otherValue[MPERSP_2];  newValue[MSKEW_Y]=MATRIX[MSKEW_Y] * otherValue[MSCALE_X] + MATRIX[MSCALE_Y] * otherValue[MSKEW_Y] + MATRIX[MTRANS_Y] * otherValue[MPERSP_0];  newValue[MSCALE_Y]=MATRIX[MSKEW_Y] * otherValue[MSKEW_X] + MATRIX[MSCALE_Y] * otherValue[MSCALE_Y] + MATRIX[MTRANS_Y] * otherValue[MPERSP_1];  newValue[MTRANS_Y]=MATRIX[MSKEW_Y] * otherValue[MTRANS_X] + MATRIX[MSCALE_Y] * otherValue[MTRANS_Y] + MATRIX[MTRANS_Y] * otherValue[MPERSP_2];  newValue[MPERSP_0]=MATRIX[MPERSP_0] * otherValue[MSCALE_X] + MATRIX[MPERSP_1] * otherValue[MSKEW_Y] + MATRIX[MPERSP_2] * otherValue[MPERSP_0];  newValue[MPERSP_1]=MATRIX[MPERSP_0] * otherValue[MSKEW_X] + MATRIX[MPERSP_1] * otherValue[MSCALE_Y] + MATRIX[MPERSP_2] * otherValue[MPERSP_1];  newValue[MPERSP_2]=MATRIX[MPERSP_0] * otherValue[MTRANS_X] + MATRIX[MPERSP_1] * otherValue[MTRANS_Y] + MATRIX[MPERSP_2] * otherValue[MPERSP_2];  setValues(newValue);  return true;}  }
class C{  private void updateSymbol(){  if (!Controller.getInstance().isPopulating()) {    StandardData standardData=getStandardData();    Expression transformation=fieldConfigVisitor.getExpression(FieldIdEnum.TRANSFORMATION);    FeatureTypeStyle existingFTS=SelectedSymbol.getInstance().getFeatureTypeStyle();    if (existingFTS != null) {      List<org.opengis.style.Rule> newRuleList=new ArrayList<org.opengis.style.Rule>();      for (      org.opengis.style.Rule rule : existingFTS.rules()) {        newRuleList.add(rule);      }      FeatureTypeStyle fts=(FeatureTypeStyle)getStyleFactory().featureTypeStyle(standardData.name,(org.opengis.style.Description)standardData.description,existingFTS.getFeatureInstanceIDs(),existingFTS.featureTypeNames(),existingFTS.semanticTypeIdentifiers(),newRuleList);      if (transformation != null) {        fts.setTransformation(transformation);      }      SelectedSymbol.getInstance().replaceFeatureTypeStyle(fts);      this.fireUpdateSymbol();    }  }}  }
class C{  @Override protected void fillUtterance(Utterance utterance,Element sentence){  fillUtterance(utterance,sentence,true,true,false);}  }
class C{  public int drawText(Segment segment,int x,int y,Graphics graphics,TabExpander e,int startOffset){  graphics.setFont(graphics.getFont().deriveFont(getFontStyle()));  FontMetrics fontMetrics=graphics.getFontMetrics();  int a=fontMetrics.getAscent();  int h=a + fontMetrics.getDescent();  int w=Utilities.getTabbedTextWidth(segment,fontMetrics,0,e,startOffset);  int rX=x - 1;  int rY=y - a;  int rW=w + 2;  int rH=h;  if ((getFontStyle() & 0x10) != 0) {    graphics.setColor(Color.decode("#EEEEEE"));    graphics.fillRect(rX,rY,rW,rH);  }  graphics.setColor(getColor());  x=Utilities.drawTabbedText(segment,x,y,graphics,e,startOffset);  if ((getFontStyle() & 0x8) != 0) {    graphics.setColor(Color.RED);    graphics.drawRect(rX,rY,rW,rH);  }  return x;}  }
class C{  public Job build(){  mValidator.ensureValid(this);  return new Job(this);}  }
class C{  @NotNull public CreateFaceListAction createFaceList(@NotNull String faceListId,@Nullable String name,@Nullable String userData){  Validation.validate(faceListId,"^[a-z0-9_-]{1,64}$",new ParameterValidationException("faceListId","Valid character is letter in lower case or digit or '-' or '_', maximum length is 64."));  Validation.validate(name,"^.{1,128}$",new ParameterValidationException("name","The maximum length is 128"));  Validation.validate(Utils.blankIfNull(userData),16,new ParameterValidationException("userData","The size limit is 16KB"));  return new CreateFaceListAction(cognitiveContext,faceListId,name,userData);}  }
class C{  public static int darker(int c){  return rgba(Math.max(0,(int)(scale * red(c))),Math.max(0,(int)(scale * green(c))),Math.max(0,(int)(scale * blue(c))),alpha(c));}  }
class C{  public DTW(double[][] signal,double[][] reference){  this.signal=signal;  this.reference=reference;  this.distanceFunction="Euclidean";  setCost(dpDistance());}  }
class C{  public void init$Children(){  children=new ASTNode[3];  setChild(new Opt(),0);  setChild(new List(),2);}  }
class C{  public NeighborHighlightControl(){  this(null);}  }
class C{  public FriendsGetRequestsQueryWithNeedMutual out(Boolean value){  return unsafeParam("out",value);}  }
class C{  public Builder fillColor(String fillColor){  this.fillColor=fillColor;  return this;}  }
class C{  private double computeOneFrameDistance(double[] l1,double[] l2,boolean isBark,double upperFreqInHz){  int maxInd1=MathUtils.getLargestIndexSmallerThan(l1,upperFreqInHz);  int maxInd2=MathUtils.getLargestIndexSmallerThan(l2,upperFreqInHz);  int maxInd=Math.min(maxInd1,maxInd2);  double[] tmp1;  double[] tmp2;  if (maxInd + 1 == l1.length) {    tmp1=l1;  } else {    tmp1=new double[maxInd + 1];    System.arraycopy(l1,0,tmp1,0,maxInd + 1);  }  if (maxInd + 1 == l2.length) {    tmp2=l2;  } else {    tmp2=new double[maxInd + 1];    System.arraycopy(l2,0,tmp2,0,maxInd + 1);  }  double distance;  if (!isBark) {    distance=SignalProcUtils.getRmsDistance(tmp1,tmp2);  } else {    distance=SignalProcUtils.getRmsDistance(SignalProcUtils.freq2bark(tmp1),SignalProcUtils.freq2bark(tmp2));  }  return distance;}  }
class C{  public void init$Children(){  children=new ASTNode[5];  setChild(new Opt(),1);  setChild(new List(),2);  setChild(new List(),3);  setChild(new List(),4);}  }
class C{  public SiteAdminActionBar waitToBeDisplayed(){  bobcatWait.withTimeout(Timeouts.BIG).until(ExpectedConditions.visibilityOf(currentScope));  return this;}  }
class C{  public int length(){  return Histogram.length() + Graph.length();}  }
class C{  protected void fireGraphEvent(Table t,int first,int last,int col,int type){  if (type == EventConstants.UPDATE && col == VisualItem.IDX_VALIDATED && t == getNodeTable()) {    VisualTable nodes=(VisualTable)t;    VisualTable edges=(VisualTable)getEdgeTable();    for (int i=first; i <= last; ++i) {      if (nodes.isValidated(i))       continue;      IntIterator erows=edgeRows(i);      while (erows.hasNext()) {        int erow=erows.nextInt();        edges.setValidated(erow,false);      }    }  }  super.fireGraphEvent(t,first,last,col,type);}  }
class C{  private Map loadMappedBinaryLexicon(FileInputStream is,int estimatedSize) throws IOException {  FileChannel fc=is.getChannel();  MappedByteBuffer bb=fc.map(FileChannel.MapMode.READ_ONLY,0,(int)fc.size());  bb.load();  int size=0;  int numEntries=0;  List phonemeList=new ArrayList();  Map lexicon=new LinkedHashMap(estimatedSize * 4 / 3);  if (bb.getInt() != MAGIC) {    throw new Error("bad magic number in lexicon");  }  if (bb.getInt() != VERSION) {    throw new Error("bad version number in lexicon");  }  size=bb.getInt();  for (int i=0; i < size; i++) {    String phoneme=getString(bb);    phonemeList.add(phoneme);  }  numEntries=bb.getInt();  for (int i=0; i < numEntries; i++) {    String wordAndPos=getString(bb);    String pos=Character.toString(wordAndPos.charAt(wordAndPos.length() - 1));    if (!partsOfSpeech.contains(pos)) {      partsOfSpeech.add(pos);    }    int numPhonemes=bb.get();    String[] phonemes=new String[numPhonemes];    for (int j=0; j < numPhonemes; j++) {      phonemes[j]=(String)phonemeList.get(bb.get());    }    lexicon.put(wordAndPos,phonemes);  }  fc.close();  return lexicon;}  }
class C{  public boolean isSelectionFindable(){  return selected.size() > 0;}  }
class C{  public EntityQuery select(Set<String> fieldsToSelect){  this.fieldsToSelect=fieldsToSelect;  return this;}  }
class C{  public boolean hasStickyHeader(View itemView,int orientation,int position){  int offset, margin;  mDimensionCalculator.initMargins(mTempRect1,itemView);  if (orientation == LinearLayout.VERTICAL) {    offset=itemView.getTop();    margin=mTempRect1.top;  } else {    offset=itemView.getLeft();    margin=mTempRect1.left;  }  return offset <= margin && mAdapter.getHeaderId(position) >= 0;}  }
class C{  public static String utf8BytesWithUtf16LengthToString(@Nonnull byte[] bytes,int start,int utf16Length,@Nullable int[] readLength){  char[] chars=localBuffer.get();  if (chars == null || chars.length < utf16Length) {    chars=new char[utf16Length];    localBuffer.set(chars);  }  int outAt=0;  int at=0;  for (at=start; utf16Length > 0; utf16Length--) {    int v0=bytes[at] & 0xFF;    char out;switch (v0 >> 4) {case 0x00:case 0x01:case 0x02:case 0x03:case 0x04:case 0x05:case 0x06:case 0x07:{        if (v0 == 0) {          return throwBadUtf8(v0,at);        }        out=(char)v0;        at++;        break;      }case 0x0c:case 0x0d:{      int v1=bytes[at + 1] & 0xFF;      if ((v1 & 0xc0) != 0x80) {        return throwBadUtf8(v1,at + 1);      }      int value=((v0 & 0x1f) << 6) | (v1 & 0x3f);      if ((value != 0) && (value < 0x80)) {        return throwBadUtf8(v1,at + 1);      }      out=(char)value;      at+=2;      break;    }case 0x0e:{    int v1=bytes[at + 1] & 0xFF;    if ((v1 & 0xc0) != 0x80) {      return throwBadUtf8(v1,at + 1);    }    int v2=bytes[at + 2] & 0xFF;    if ((v2 & 0xc0) != 0x80) {      return throwBadUtf8(v2,at + 2);    }    int value=((v0 & 0x0f) << 12) | ((v1 & 0x3f) << 6) | (v2 & 0x3f);    if (value < 0x800) {      return throwBadUtf8(v2,at + 2);    }    out=(char)value;    at+=3;    break;  }default :{  return throwBadUtf8(v0,at);}}chars[outAt]=out;outAt++;}if (readLength != null && readLength.length > 0) {readLength[0]=at - start;readLength[0]=at - start;}return new String(chars,0,outAt);}  }
class C{  public RecoveryMgr(long txNum,boolean isReadOnly){  this.txNum=txNum;  if (!isReadOnly && enableLogging)   new StartRecord(txNum).writeToLog();}  }
class C{  public PriorityQueue priorityQueue(int concurrency,PriorityQueue.PriorityComparator comparator){  return new PriorityQueue(this.executor_,concurrency,comparator);}  }
class C{  public static String encrypt(String input){  if (encryptionService == null || input == null || input.length() == 0) {    return input;  }  return ENCRYPTION_PREFIX + encryptionService.encrypt(input);}  }
class C{  public void drawChartTransposed(Graphics2D gc){  gc.setFont(getFont(ChartViewer.FontKeys.XAxisFont.toString()));}  }
class C{  public GSTextMessageImpl() throws JMSException {  super();}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public static boolean dateIsValid(String dateString){  return dateString.matches(DEFAULT_DATE_REGEX);}  }
class C{  public static void validateHostnameOrIpAddress(X509Certificate certificate,String hostname) throws UaException {  boolean dnsNameMatches=validateSubjectAltNameField(certificate,SUBJECT_ALT_NAME_DNS_NAME,null);  boolean ipAddressMatches=validateSubjectAltNameField(certificate,SUBJECT_ALT_NAME_IP_ADDRESS,null);  if (!(dnsNameMatches || ipAddressMatches)) {    throw new UaException(StatusCodes.Bad_CertificateHostNameInvalid);  }}  }
class C{  public void toString(StringBuffer sb){  getModifiers().toString(sb);  for (int i=0; i < getNumTypeAccess(); ++i) {    if (i > 0)     sb.append(" | ");    getTypeAccess(i).toString(sb);  }  sb.append(" " + getID());}  }
class C{  public static Table read(ResultSet resultSet,String tableName) throws SQLException {  ResultSetMetaData metaData=resultSet.getMetaData();  Table table=Table.create(tableName);  for (int i=1; i <= metaData.getColumnCount(); i++) {    String name=metaData.getColumnName(i);    ColumnType type=SQL_TYPE_TO_TABLESAW_TYPE.get(metaData.getColumnType(i));    Preconditions.checkState(type != null,"No column type found for %s as specified for column %s",metaData.getColumnType(i),name);    Column newColumn=TypeUtils.newColumn(name,type);    table.addColumn(newColumn);  }  while (resultSet.next()) {    for (int i=1; i <= metaData.getColumnCount(); i++) {      Column column=table.column(i - 1);      column.addCell(resultSet.getString(i));    }  }  return table;}  }
class C{  public void updateStyle(int[] selectedRows,StyleWrapper styleWrapper){  for (int index=0; index < selectedRows.length; index++) {    GeoServerLayer layer=getLayer(selectedRows[index]);    layer.setStyle(styleWrapper);    layerMap.put(layer,Boolean.TRUE);  }  this.fireTableDataChanged();}  }
class C{  public static boolean equalsIncludingNaN(double x,double y,double eps){  return equalsIncludingNaN(x,y) || (FastMath.abs(y - x) <= eps);}  }
class C{  private static boolean inStringArray(String value,String[] stringArray){  for (int i=0; i < stringArray.length; i++) {    if (stringArray[i].equals(value)) {      return true;    }  }  return false;}  }
class C{  public static float lerp(float start,float end,float progress){  return start - progress * (start - end);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_OTHER_combine_FAIL(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400148,value0,value1);}  }
class C{  LogSegmentMetadata completeLogSegment(String zkPath,long newLastTxId,int recordCount,long lastEntryId,long lastSlotId,long startSequenceId){  assert this.lastTxId == DistributedLogConstants.INVALID_TXID;  return new Mutator(this).setZkPath(zkPath).setLastDLSN(new DLSN(this.lastDLSN.getLogSegmentSequenceNo(),lastEntryId,lastSlotId)).setLastTxId(newLastTxId).setInprogress(false).setCompletionTime(Utils.nowInMillis()).setRecordCount(recordCount).setStartSequenceId(startSequenceId).build();}  }
class C{  public static boolean isShowErrorDetailsFromIntent(Intent intent){  return intent.getBooleanExtra(CustomActivityOnCrash.EXTRA_SHOW_ERROR_DETAILS,true);}  }
class C{  private void flushAndRelease(){  final int flushResult=LameUtil.flush(mp3Buffer);  if (flushResult > 0) {    try {      mFileOutputStream.write(mp3Buffer,0,flushResult);    } catch (    IOException e) {      e.printStackTrace();    } finally {      if (mFileOutputStream != null) {        try {          mFileOutputStream.close();        } catch (        IOException e) {          e.printStackTrace();        }      }      LameUtil.close();    }  }}  }
class C{  private FunctionsEx(){  throw new IllegalStateException("No instances!");}  }
class C{  public Matrix arrayRightDivide(Matrix B){  checkMatrixDimensions(B);  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=A[i][j] / B.A[i][j];    }  }  return X;}  }
class C{  boolean awaitExchange(E e,int start){  for (int step=0, totalSpins=0; (step < ARENA_LENGTH) && (totalSpins < SPINS); step++) {    int index=(start + step) & ARENA_MASK;    AtomicReference<Object> slot=arena[index];    Object found=slot.get();    if ((found == WAITER) && slot.compareAndSet(WAITER,e)) {      return true;    } else     if ((found == FREE) && slot.compareAndSet(FREE,e)) {      int slotSpins=0;      for (; ; ) {        found=slot.get();        if (found != e) {          return true;        } else         if ((slotSpins >= SPINS_PER_STEP) && (slot.compareAndSet(e,FREE))) {          totalSpins+=slotSpins;          break;        }        slotSpins++;      }    }  }  return false;}  }
class C{  public void onNameClear(View view){  setName(null);}  }
class C{  public ObjectFactory(){}  }
class C{  @Override public boolean isEnabled(){  return true;}  }
class C{  @Override public int[] unrank(){  if (k == 0)   return new int[0];  int[] combi=new int[k];  long rank=count - 1 - currentIndex;  long e=(n - k) * count / n;  int t=n - k + 1;  int m=k;  int p=n - 1;  do {    if (e <= rank) {      combi[k - m]=n - t - m + 1;      if (e > 0) {        rank=rank - e;        e=m * e / p;      }      m--;      p--;    } else {      e=(p - m) * e / p;      t--;      p--;    }  } while (m > 0);  return combi;}  }
class C{  @NotNull public BoolProperty useForegroundColor(){  return myUseForegroundColor;}  }
class C{  public int typeIndexFromClassDefIndex(int classDefIndex){  checkBounds(classDefIndex,tableOfContents.classDefs.size);  int position=tableOfContents.classDefs.off + (SizeOf.CLASS_DEF_ITEM * classDefIndex);  return data.getInt(position);}  }
class C{  public AccountGetCountersQuery filter(List<AccountGetCountersFilter> value){  return unsafeParam("filter",value);}  }
class C{  public ShadowedGrammarPool(XMLGrammarPool grammarPool){  fGrammarPool=grammarPool;}  }
class C{  public boolean containsTuple(Tuple t){  return (t.getTable() == this && isValidRow(t.getRow()));}  }
class C{  public Builder position(String position){  this.position=position;  return this;}  }
class C{  @Override public void write(DataOutput raf) throws IOException {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  DataOutputStream dos=new DataOutputStream(baos);  BufferedOutputStream bos=new BufferedOutputStream(dos);  dos.writeLong(duration);  dos.writeInt(floatData.length);  for (  float fl : floatData) {    dos.writeFloat(fl);  }  raf.write(baos.toByteArray());}  }
class C{  void callUserDataHandlers(Node n,Node c,short operation,Hashtable userData){  if (userData == null || userData.isEmpty()) {    return;  }  Iterator entries=userData.entrySet().iterator();  while (entries.hasNext()) {    Map.Entry entry=(Map.Entry)entries.next();    String key=(String)entry.getKey();    UserDataRecord r=(UserDataRecord)entry.getValue();    if (r.fHandler != null) {      r.fHandler.handle(operation,key,r.fData,n,c);    }  }}  }
class C{  private static void logInfo(Object actual,Object expected,SerializationStrategy strategy,boolean equalItems){  String logString=String.format("Comparing actual %s to expected %s (must be " + (equalItems ? "" : "un") + "equal):\n\t%s\n\t%s",actual.getClass().getSimpleName(),expected.getClass().getSimpleName(),actual,expected);  if (expected instanceof ModelItem) {    logString+=String.format("\n\tStrategy: %s",(strategy == null ? ((ModelItem)expected).getSerializationStrategy() : strategy));  }  LOGGER.info(logString);}  }
class C{  @SafeVarargs public static <K,V>Map<K,V> Map(Tuple2<K,V>... kvs){  if ((kvs == null) || (kvs.length == 0)) {    return Collections.emptyMap();  }  Map<K,V> map=new HashMap<>(kvs.length);  for (  Tuple2<K,V> t : kvs) {    map.put(t._1,t._2);  }  return Collections.unmodifiableMap(map);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonSkillArea_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201150,skillcaster,skillname);}  }
class C{  public double overflow(){  return m_overflow;}  }
class C{  public static <E>DoubleStream shiftingWindowAveragingInt(Stream<E> stream,int rollingFactor,ToIntFunction<? super E> mapper){  Objects.requireNonNull(stream);  Objects.requireNonNull(mapper);  IntStream intStream=stream.mapToInt(mapper);  return shiftingWindowAveragingInt(intStream,rollingFactor);}  }
class C{  private String detectScriptUrlPerDNS() throws IOException {  String result=null;  String fqdn=InetAddress.getLocalHost().getCanonicalHostName();  if (fqdn.equalsIgnoreCase("localhost") || fqdn.length() == 0 || Character.isDigit(fqdn.charAt(0))) {    return result;  }  Logger.log(getClass(),LogLevel.TRACE,"Searching per DNS guessing.");  int index=fqdn.indexOf('.');  while (index != -1 && result == null) {    fqdn=fqdn.substring(index + 1);    if (fqdn.indexOf('.') == -1) {      break;    }    try {      URL lookupURL=new URL("http://wpad." + fqdn + "/wpad.dat");      Logger.log(getClass(),LogLevel.TRACE,"Trying url: {0}",lookupURL);      HttpURLConnection con=(HttpURLConnection)lookupURL.openConnection(Proxy.NO_PROXY);      con.setInstanceFollowRedirects(true);      con.setRequestProperty("accept","application/x-ns-proxy-autoconfig");      if (con.getResponseCode() == 200) {        result=lookupURL.toString();      }      con.disconnect();    } catch (    UnknownHostException e) {      Logger.log(getClass(),LogLevel.DEBUG,"Not available!");    }    index=fqdn.indexOf('.');  }  return result;}  }
class C{  public int start_state(){  return 0;}  }
class C{  @Override public Attr createAttributeNS(String namespaceURI,String qualifiedName,String localName) throws DOMException {  return new PSVIAttrNSImpl(this,namespaceURI,qualifiedName,localName);}  }
class C{  public boolean geom_trans(){  return soot.PhaseOptions.getBoolean(options,"geom-trans");}  }
class C{  public boolean isFile(){  return false;}  }
class C{  protected AdsGetAdsLayoutQuery accountId(int value){  return unsafeParam("account_id",value);}  }
class C{  public DiskBasedCache(File rootDirectory,int maxCacheSizeInBytes){  mRootDirectory=rootDirectory;  mMaxCacheSizeInBytes=maxCacheSizeInBytes;}  }
class C{  public Argument(String name,String value){  this(name);  _value=value;}  }
class C{  public static <V>boolean isEmpty(V[] sourceArray){  return (sourceArray == null || sourceArray.length == 0);}  }
class C{  public RemoteFileEditorInput(ISVNRemoteFile file,IProgressMonitor monitor){  this.file=file;  try {    initializeStorage(file,monitor);  } catch (  TeamException e) {    SVNUIPlugin.log(e);  }}  }
class C{  private boolean isInRange(final SourceDataTag currentSourceDataTag,final ValueUpdate update){  boolean result=false;  if (!this.dataTagValueValidator.isInRange(currentSourceDataTag,update.getValue())) {    this.equipmentLogger.warn(format("\tin range : the value of tag[%d] was out of range and will only be propagated the first time to the server",currentSourceDataTag.getId()));    this.equipmentLogger.debug(format("\tinvalidating tag[%d] with quality OUT_OF_BOUNDS",currentSourceDataTag.getId()));    StringBuffer qDesc=new StringBuffer("source value is out of bounds (");    if (currentSourceDataTag.getMinValue() != null)     qDesc.append("min: ").append(currentSourceDataTag.getMinValue()).append(" ");    if (currentSourceDataTag.getMaxValue() != null)     qDesc.append("max: ").append(currentSourceDataTag.getMaxValue());    qDesc.append(")");    SourceDataTagQuality quality=new SourceDataTagQuality(SourceDataTagQualityCode.OUT_OF_BOUNDS,qDesc.toString());    this.equipmentSender.update(currentSourceDataTag.getId(),update,quality);  } else {    result=true;  }  return result;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Root_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200435,skilltarget,skillname);}  }
class C{  public void logEquals(){  for (int i=0; i < A.length; i++)   for (int j=0; j < A[i].length; j++)   A[i][j]=Math.log(A[i][j]);}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  public Zmat qhb(Zmat B) throws JampackException {  if (B.ncol != ncol) {    throw new JampackException("Inconsistent dimensions.");  }  Zmat C=new Zmat(B);  for (int k=0; k < ntran; k++) {    House.ua(U[k],C,C.bx + k,C.rx,C.bx,C.cx);  }  return C;}  }
class C{  public Builder(){}  }
class C{  public void mouseExited(MouseEvent me){  stillDownWithoutMoving=false;}  }
class C{  public boolean isPassive(){synchronized (lock) {    return passive;  }}  }
class C{  private static void paintHorizontalConstraint(NlGraphics graphics,ConstraintType type,NlComponent sourceNode,Rectangle sourceBounds,NlComponent targetNode,Rectangle targetBounds,boolean highlightTargetEdge,TextDirection textDirection){  SegmentType sourceSegmentTypeX=type.sourceSegmentTypeX;  SegmentType targetSegmentTypeX=type.targetSegmentTypeX;  Insets targetMargins=targetNode.getMargins();  assert sourceSegmentTypeX != SegmentType.UNKNOWN;  assert targetBounds != null;  int sourceX=sourceSegmentTypeX.getX(textDirection,sourceNode,sourceBounds);  int targetX=targetSegmentTypeX == SegmentType.UNKNOWN ? sourceX : targetSegmentTypeX.getX(textDirection,targetNode,targetBounds);  if (highlightTargetEdge && type.isRelativeToParentEdge()) {    graphics.useStyle(DROP_ZONE_ACTIVE);    graphics.fillRect(targetX - PARENT_RECT_SIZE / 2,targetBounds.y,PARENT_RECT_SIZE,targetBounds.height);  }  int maxTop=Math.max(sourceBounds.y,targetBounds.y);  int minBottom=Math.min(y2(sourceBounds),y2(targetBounds));  int center=(maxTop + minBottom) / 2;  if (center > sourceBounds.y && center < y2(sourceBounds)) {    if (textDirection.isRightSegment(targetSegmentTypeX) && targetMargins.right > 5) {      int sharedX=targetX + targetMargins.right;      if (sourceX > sharedX + 2) {        graphics.useStyle(GUIDELINE_DASHED);        graphics.drawLine(sharedX,targetBounds.y,sharedX,y2(targetBounds));        graphics.useStyle(GUIDELINE);        graphics.drawArrow(sourceX,center,sharedX + 2,center);        graphics.drawArrow(targetX,center,sharedX - 3,center);      } else {        graphics.useStyle(GUIDELINE);        graphics.drawArrow(targetX,center,sourceX,center);      }      return;    } else     if (textDirection.isLeftSegment(targetSegmentTypeX) && targetMargins.left > 5) {      int sharedX=targetX - targetMargins.left;      if (sourceX < sharedX - 2) {        graphics.useStyle(GUIDELINE_DASHED);        graphics.drawLine(sharedX,targetBounds.y,sharedX,y2(targetBounds));        graphics.useStyle(GUIDELINE);        graphics.drawArrow(sourceX,center,sharedX - 3,center);        graphics.drawArrow(targetX,center,sharedX + 3,center);      } else {        graphics.useStyle(GUIDELINE);        graphics.drawArrow(targetX,center,sourceX,center);      }      return;    }    if (sourceX == targetX) {      if (textDirection.isRightSegment(sourceSegmentTypeX)) {        sourceX-=2 * ARROW_SIZE;      } else       if (textDirection.isLeftSegment(sourceSegmentTypeX)) {        sourceX+=2 * ARROW_SIZE;      } else {        assert sourceSegmentTypeX == SegmentType.CENTER_VERTICAL : sourceSegmentTypeX;        sourceX+=sourceBounds.width / 2 - 2 * ARROW_SIZE;      }    }    graphics.useStyle(GUIDELINE);    graphics.drawArrow(sourceX,center,targetX,center);    return;  }  int sharedX=targetSegmentTypeX == SegmentType.UNKNOWN ? sourceX : targetSegmentTypeX.getX(textDirection,targetNode,targetBounds);  if (type.relativeToMargin) {    if (textDirection.isLeftSegment(targetSegmentTypeX)) {      sharedX-=targetMargins.left;    } else     if (textDirection.isRightSegment(targetSegmentTypeX)) {      sharedX+=targetMargins.right;    }  }  int startY, endY;  if (center <= sourceBounds.y) {    startY=targetBounds.y + targetBounds.height / 4;    endY=y2(sourceBounds);  } else {    assert (center >= y2(sourceBounds));    startY=sourceBounds.y;    endY=targetBounds.y + 3 * targetBounds.height / 2;  }  int y=sourceBounds.y + sourceBounds.height / 4;  graphics.useStyle(GUIDELINE_DASHED);  graphics.drawLine(sharedX,startY,sharedX,endY);  if (Math.abs(sharedX - sourceX) < 2 * ARROW_SIZE) {    if (textDirection.isLeftSegment(sourceSegmentTypeX)) {      sharedX=sourceX;      sourceX=sharedX + 2 * ARROW_SIZE;    } else {      sharedX=sourceX;      sourceX=sharedX - 2 * ARROW_SIZE;    }  }  graphics.useStyle(GUIDELINE);  graphics.drawArrow(sourceX,y,sharedX,y);  int ty=centerY(targetBounds);  if (textDirection.isLeftSegment(targetSegmentTypeX)) {    int tx=targetBounds.x;    int margin=targetMargins.left;    if (margin == 0 || !type.relativeToMargin) {      graphics.drawArrow(tx + 2 * ARROW_SIZE,ty,tx,ty);    } else {      graphics.drawArrow(tx,ty,tx - margin,ty);    }  } else {    assert textDirection.isRightSegment(targetSegmentTypeX);    int tx=x2(targetBounds);    int margin=targetMargins.right;    if (margin == 0 || !type.relativeToMargin) {      graphics.drawArrow(tx - 2 * ARROW_SIZE,ty,tx,ty);    } else {      graphics.drawArrow(tx,ty,tx + margin,ty);    }  }}  }
class C{  public void addSamplePoint(final double x,final double[]... value) throws MathIllegalArgumentException, MathRuntimeException {  for (int i=0; i < value.length; ++i) {    final double[] y=value[i].clone();    if (i > 1) {      double inv=1.0 / CombinatoricsUtils.factorial(i);      for (int j=0; j < y.length; ++j) {        y[j]*=inv;      }    }    final int n=abscissae.size();    bottomDiagonal.add(n - i,y);    double[] bottom0=y;    for (int j=i; j < n; ++j) {      final double[] bottom1=bottomDiagonal.get(n - (j + 1));      final double inv=1.0 / (x - abscissae.get(n - (j + 1)));      if (Double.isInfinite(inv)) {        throw new MathIllegalArgumentException(LocalizedCoreFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO,x);      }      for (int k=0; k < y.length; ++k) {        bottom1[k]=inv * (bottom0[k] - bottom1[k]);      }      bottom0=bottom1;    }    topDiagonal.add(bottom0.clone());    abscissae.add(x);  }}  }
class C{  public synchronized void resetColumns(SegmentMetadata segmentMetadata,DimensionDictionary dimensionDictionary){synchronized (mutex) {    Map<String,Set<Interval>> dimensionIntervals=segmentMetadata.getDimensionIntervals();    Map<String,Set<Interval>> metricIntervals=segmentMetadata.getMetricIntervals();    workingIntervals.clear();    for (    Map.Entry<String,Set<Interval>> nameIntervals : dimensionIntervals.entrySet()) {      String physicalName=nameIntervals.getKey();      String apiName=getLogicalColumnName(physicalName);      Dimension dimension=dimensionDictionary.findByApiName(apiName);      if (dimension == null) {        continue;      }      DimensionColumn dimensionColumn=DimensionColumn.addNewDimensionColumn(this,dimension);      workingIntervals.put(dimensionColumn,nameIntervals.getValue());    }    for (    Map.Entry<String,Set<Interval>> nameIntervals : metricIntervals.entrySet()) {      MetricColumn metricColumn=MetricColumn.addNewMetricColumn(this,nameIntervals.getKey());      workingIntervals.put(metricColumn,nameIntervals.getValue());    }    commit();  }}  }
class C{  public boolean removeCondition(FallbackCondition condition){  return this.fallbackConditions.remove(condition);}  }
class C{  public Object clone(){  byte[] newData=new byte[length];  System.arraycopy(data,0,newData,0,newData.length);  ShortMessage msg=new ShortMessage(newData);  return msg;}  }
class C{  public static String encode(byte[] data){  int start=0;  int len=data.length;  StringBuffer buf=new StringBuffer(data.length * 3 / 2);  int end=len - 3;  int i=start;  int n=0;  while (i <= end) {    int d=((((int)data[i]) & 0x0ff) << 16) | ((((int)data[i + 1]) & 0x0ff) << 8) | (((int)data[i + 2]) & 0x0ff);    buf.append(legalChars[(d >> 18) & 63]);    buf.append(legalChars[(d >> 12) & 63]);    buf.append(legalChars[(d >> 6) & 63]);    buf.append(legalChars[d & 63]);    i+=3;    if (n++ >= 14) {      n=0;    }  }  if (i == start + len - 2) {    int d=((((int)data[i]) & 0x0ff) << 16) | ((((int)data[i + 1]) & 255) << 8);    buf.append(legalChars[(d >> 18) & 63]);    buf.append(legalChars[(d >> 12) & 63]);    buf.append(legalChars[(d >> 6) & 63]);    buf.append("=");  } else   if (i == start + len - 1) {    int d=(((int)data[i]) & 0x0ff) << 16;    buf.append(legalChars[(d >> 18) & 63]);    buf.append(legalChars[(d >> 12) & 63]);    buf.append("==");  }  return buf.toString();}  }
class C{  private boolean containsKey(final int key,final int index){  return (key != 0 || states[index] == FULL) && keys[index] == key;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("RegexValidator{");  for (int i=0; i < patterns.length; i++) {    if (i > 0) {      buffer.append(",");    }    buffer.append(patterns[i].pattern());  }  buffer.append("}");  return buffer.toString();}  }
class C{  public XML11Serializer(Writer writer,OutputFormat format){  super(writer,format);  _format.setVersion("1.1");}  }
class C{  @Override public int hash(char[] buffer,int offset,int length){  return fSymbolTable.hash(buffer,offset,length);}  }
class C{  public DirectoryAccessDeniedException(String message,Throwable cause){  super(message,cause);}  }
class C{  public boolean isApplicable(){  return getViewer() instanceof GraphView && ((GraphView)getViewer()).getSelectedNodes().size() > 0;}  }
class C{  public static long copyLarge(Reader input,Writer output,char[] buffer) throws IOException {  long count=0;  int n=0;  while (EOF != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  return count;}  }
class C{  public PrefixFileFilter(List<String> prefixes,IOCase caseSensitivity){  if (prefixes == null) {    throw new IllegalArgumentException("The list of prefixes must not be null");  }  this.prefixes=prefixes.toArray(new String[prefixes.size()]);  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  private TestItem verifyTestItem(final String testItemId,FinishTestItemRQ finishExecutionRQ,Optional<Status> actualStatus){  TestItem testItem=testItemRepository.findOne(testItemId);  try {    expect(testItem,notNull()).verify(TEST_ITEM_NOT_FOUND,testItemId);    expect(testItem,not(Preconditions.TEST_ITEM_FINISHED)).verify(REPORTING_ITEM_ALREADY_FINISHED,testItem.getId());    boolean statusProvided=actualStatus.isPresent();    List<TestItem> descendants=testItemRepository.findDescendants(testItem.getId());    boolean hasDescendants=!descendants.isEmpty();    expect(!statusProvided && !hasDescendants,Predicates.equalTo(Boolean.FALSE),formattedSupplier("There is no status provided from request and there are no descendants to check statistics for test item id '{}'",testItemId)).verify();    expect(descendants,not(Preconditions.HAS_IN_PROGRESS_ITEMS)).verify(FINISH_ITEM_NOT_ALLOWED,formattedSupplier("Test item '{}' has descendants with '{}' status. All descendants '{}'",testItemId,IN_PROGRESS.name(),descendants));    expect(finishExecutionRQ,Preconditions.finishSameTimeOrLater(testItem.getStartTime())).verify(FINISH_TIME_EARLIER_THAN_START_TIME,finishExecutionRQ.getEndTime(),testItem.getStartTime(),testItemId);  } catch (  BusinessRuleViolationException e) {    fail().withError(AMBIGUOUS_TEST_ITEM_STATUS,e.getMessage());  }  return testItem;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public LTExpr fullCopy(){  LTExpr tree=(LTExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static String asSql(String expression){  if (expression == null) {    return null;  }  for (  String key : EL_SQL_MAP.keySet()) {    expression=expression.replaceAll(key,EL_SQL_MAP.get(key));  }  return expression;}  }
class C{  public static boolean openEditor(@NotNull Project project,@NotNull VirtualFile vFile){  OpenFileDescriptor descriptor;  if (vFile.getFileType() == StdFileTypes.XML && AndroidEditorSettings.getInstance().getGlobalState().isPreferXmlEditor()) {    descriptor=new OpenFileDescriptor(project,vFile,0);  } else {    descriptor=new OpenFileDescriptor(project,vFile);  }  return !FileEditorManager.getInstance(project).openEditor(descriptor,true).isEmpty();}  }
class C{  public static void sendWarehouseInfo(Player player,boolean sendAccountWh){  List<Item> items=player.getStorage(StorageType.REGULAR_WAREHOUSE.getId()).getItems();  int whSize=player.getWarehouseSize();  int itemsSize=items.size();  boolean firstPacket=true;  if (itemsSize != 0) {    int index=0;    while (index + 10 < itemsSize) {      PacketSendUtility.sendPacket(player,new SM_WAREHOUSE_INFO(items.subList(index,index + 10),StorageType.REGULAR_WAREHOUSE.getId(),whSize,firstPacket,player));      index+=10;      firstPacket=false;    }    PacketSendUtility.sendPacket(player,new SM_WAREHOUSE_INFO(items.subList(index,itemsSize),StorageType.REGULAR_WAREHOUSE.getId(),whSize,firstPacket,player));  }  PacketSendUtility.sendPacket(player,new SM_WAREHOUSE_INFO(null,StorageType.REGULAR_WAREHOUSE.getId(),whSize,false,player));  if (sendAccountWh) {    PacketSendUtility.sendPacket(player,new SM_WAREHOUSE_INFO(player.getStorage(StorageType.ACCOUNT_WAREHOUSE.getId()).getItemsWithKinah(),StorageType.ACCOUNT_WAREHOUSE.getId(),0,true,player));  }  PacketSendUtility.sendPacket(player,new SM_WAREHOUSE_INFO(null,StorageType.ACCOUNT_WAREHOUSE.getId(),0,false,player));}  }
class C{  private void streamAndCompressInput(){  try {    byte[] newline="\n".getBytes(Charsets.UTF_8);    while (!_closed && fetchNextRow()) {      _rawOut.write(_buffer.array(),0,_buffer.limit());      _rawOut.write(newline);    }    _rawOut.close();  } catch (  Exception e) {    try {      Closer closer=Closer.create();      closer.register(_rawOut);      closer.register(_gzipIn);      closer.close();    } catch (    IOException ignore) {    }    if (!_closed) {      _inputException=e instanceof IOException ? (IOException)e : new IOException(e);    }  }}  }
class C{  private JsonElement convert(IBasicOverposterLayerProperties basicOverposterLayerProperties){  JsonObject jsonObject=null;  if (basicOverposterLayerProperties != null) {    jsonObject=new JsonObject();    try {      jsonObject.addProperty(LabelEngineLayerPropertiesKey.BASIC_OVERPOSTER_LAYER_BUFFER_RATIO,basicOverposterLayerProperties.getBufferRatio());      jsonObject.addProperty(LabelEngineLayerPropertiesKey.BASIC_OVERPOSTER_LAYER_FEATURE_TYPE,basicOverposterLayerProperties.getFeatureType());      jsonObject.addProperty(LabelEngineLayerPropertiesKey.BASIC_OVERPOSTER_LAYER_FEATURE_WEIGHT,basicOverposterLayerProperties.getFeatureWeight());      jsonObject.addProperty(LabelEngineLayerPropertiesKey.BASIC_OVERPOSTER_LAYER_LABEL_WEIGHT,basicOverposterLayerProperties.getLabelWeight());      jsonObject.addProperty(LabelEngineLayerPropertiesKey.BASIC_OVERPOSTER_LAYER_LINE_OFFSET,basicOverposterLayerProperties.getLineOffset());      jsonObject.addProperty(LabelEngineLayerPropertiesKey.BASIC_OVERPOSTER_LAYER_NUM_LABELS_OPTION,basicOverposterLayerProperties.getNumLabelsOption());      jsonObject.addProperty(LabelEngineLayerPropertiesKey.BASIC_OVERPOSTER_LAYER_POINT_PLACEMENT_METHOD,basicOverposterLayerProperties.getPointPlacementMethod());      ILineLabelPlacementPriorities lineLabelProperties=basicOverposterLayerProperties.getLineLabelPlacementPriorities();      if (lineLabelProperties != null) {        JsonObject jsonLineLabelProperties=new JsonObject();        jsonLineLabelProperties.addProperty(LabelEngineLayerPropertiesKey.BASIC_OVERPOSTER_LAYER_LINE_ABOVE_AFTER,lineLabelProperties.getAboveAfter());        jsonLineLabelProperties.addProperty(LabelEngineLayerPropertiesKey.BASIC_OVERPOSTER_LAYER_LINE_ABOVE_ALONG,lineLabelProperties.getAboveAlong());        jsonLineLabelProperties.addProperty(LabelEngineLayerPropertiesKey.BASIC_OVERPOSTER_LAYER_LINE_ABOVE_BEFORE,lineLabelProperties.getAboveBefore());        jsonLineLabelProperties.addProperty(LabelEngineLayerPropertiesKey.BASIC_OVERPOSTER_LAYER_LINE_ABOVE_END,lineLabelProperties.getAboveEnd());        jsonLineLabelProperties.addProperty(LabelEngineLayerPropertiesKey.BASIC_OVERPOSTER_LAYER_LINE_ABOVE_START,lineLabelProperties.getAboveStart());        jsonLineLabelProperties.addProperty(LabelEngineLayerPropertiesKey.BASIC_OVERPOSTER_LAYER_LINE_BELOW_AFTER,lineLabelProperties.getBelowAfter());        jsonLineLabelProperties.addProperty(LabelEngineLayerPropertiesKey.BASIC_OVERPOSTER_LAYER_LINE_BELOW_ALONG,lineLabelProperties.getBelowAlong());        jsonLineLabelProperties.addProperty(LabelEngineLayerPropertiesKey.BASIC_OVERPOSTER_LAYER_LINE_BELOW_BEFORE,lineLabelProperties.getBelowBefore());        jsonLineLabelProperties.addProperty(LabelEngineLayerPropertiesKey.BASIC_OVERPOSTER_LAYER_LINE_BELOW_END,lineLabelProperties.getBelowEnd());        jsonLineLabelProperties.addProperty(LabelEngineLayerPropertiesKey.BASIC_OVERPOSTER_LAYER_LINE_BELOW_START,lineLabelProperties.getBelowStart());        jsonLineLabelProperties.addProperty(LabelEngineLayerPropertiesKey.BASIC_OVERPOSTER_LAYER_LINE_CENTRE_AFTER,lineLabelProperties.getCenterAfter());        jsonLineLabelProperties.addProperty(LabelEngineLayerPropertiesKey.BASIC_OVERPOSTER_LAYER_LINE_CENTRE_ALONG,lineLabelProperties.getCenterAlong());        jsonLineLabelProperties.addProperty(LabelEngineLayerPropertiesKey.BASIC_OVERPOSTER_LAYER_LINE_CENTRE_BEFORE,lineLabelProperties.getCenterBefore());        jsonLineLabelProperties.addProperty(LabelEngineLayerPropertiesKey.BASIC_OVERPOSTER_LAYER_LINE_CENTRE_END,lineLabelProperties.getCenterEnd());        jsonLineLabelProperties.addProperty(LabelEngineLayerPropertiesKey.BASIC_OVERPOSTER_LAYER_LINE_CENTRE_START,lineLabelProperties.getCenterStart());        jsonObject.add(LabelEngineLayerPropertiesKey.BASIC_OVERPOSTER_LAYER_LINE_LABEL_PLACEMENT_PRIORITIES,jsonLineLabelProperties);      }      ILineLabelPosition lineLabelPosition=basicOverposterLayerProperties.getLineLabelPosition();      if (lineLabelPosition != null) {        JsonObject jsonLineLabelPosition=new JsonObject();        jsonLineLabelPosition.addProperty(LabelEngineLayerPropertiesKey.LINE_LABEL_POSITION_OFFSET,lineLabelPosition.getOffset());        jsonLineLabelPosition.addProperty(LabelEngineLayerPropertiesKey.LINE_LABEL_POSITION_IS_ABOVE,lineLabelPosition.isAbove());        jsonLineLabelPosition.addProperty(LabelEngineLayerPropertiesKey.LINE_LABEL_POSITION_IS_AT_END,lineLabelPosition.isAtEnd());        jsonLineLabelPosition.addProperty(LabelEngineLayerPropertiesKey.LINE_LABEL_POSITION_IS_AT_START,lineLabelPosition.isAtStart());        jsonLineLabelPosition.addProperty(LabelEngineLayerPropertiesKey.LINE_LABEL_POSITION_IS_BELOW,lineLabelPosition.isBelow());        jsonLineLabelPosition.addProperty(LabelEngineLayerPropertiesKey.LINE_LABEL_POSITION_IS_HORIZONTAL,lineLabelPosition.isHorizontal());        jsonLineLabelPosition.addProperty(LabelEngineLayerPropertiesKey.LINE_LABEL_POSITION_IS_IN_LINE,lineLabelPosition.isInLine());        jsonLineLabelPosition.addProperty(LabelEngineLayerPropertiesKey.LINE_LABEL_POSITION_IS_LEFT,lineLabelPosition.isLeft());        jsonLineLabelPosition.addProperty(LabelEngineLayerPropertiesKey.LINE_LABEL_POSITION_IS_ON_TOP,lineLabelPosition.isOnTop());        jsonLineLabelPosition.addProperty(LabelEngineLayerPropertiesKey.LINE_LABEL_POSITION_IS_PARALLEL,lineLabelPosition.isParallel());        jsonLineLabelPosition.addProperty(LabelEngineLayerPropertiesKey.LINE_LABEL_POSITION_IS_PERPENDICULAR,lineLabelPosition.isPerpendicular());        jsonLineLabelPosition.addProperty(LabelEngineLayerPropertiesKey.LINE_LABEL_POSITION_IS_PRODUCE_CURVED_LABELS,lineLabelPosition.isProduceCurvedLabels());        jsonLineLabelPosition.addProperty(LabelEngineLayerPropertiesKey.LINE_LABEL_POSITION_IS_RIGHT,lineLabelPosition.isRight());        jsonObject.add(LabelEngineLayerPropertiesKey.LINE_LABEL_POSITION,jsonLineLabelPosition);      }    } catch (    AutomationException e) {      e.printStackTrace();    }catch (    IOException e) {      e.printStackTrace();    }  }  return jsonObject;}  }
class C{  public boolean hasMoreElements(){  if (iterator == null)   return false;  return iterator.hasNext();}  }
class C{  public static void println(long x){  out.println(x);}  }
class C{  public HttpClient(String url){  this.url=url;}  }
class C{  public static List<Target> createTargetsWithPauses(List<Element> segmentsAndBoundaries,String silenceSymbol){  List<Target> targets=new ArrayList<Target>();  if (segmentsAndBoundaries.size() == 0)   return targets;  Element last=segmentsAndBoundaries.get(segmentsAndBoundaries.size() - 1);  if (!last.getTagName().equals(MaryXML.BOUNDARY)) {    Element finalPause=MaryXML.createElement(last.getOwnerDocument(),MaryXML.BOUNDARY);    Element token=(Element)DomUtils.getAncestor(last,MaryXML.TOKEN);    Element parent=(Element)token.getParentNode();    parent.appendChild(finalPause);    segmentsAndBoundaries.add(finalPause);  }  for (  Element sOrB : segmentsAndBoundaries) {    String phone=UnitSelector.getPhoneSymbol(sOrB);    Target t=(Target)sOrB.getUserData("target");    if (t == null) {      t=new Target(phone,sOrB);      sOrB.setUserData("target",t,Target.targetFeatureCloner);    }    targets.add(t);  }  return targets;}  }
class C{  public void writePartialMessageToMessage(Message message,int endIndex){  int startIndexOfPartialMessage=message.offset + endIndex;  int lengthOfPartialMessage=(message.offset + message.length) - endIndex;  System.arraycopy(message.sharedArray,startIndexOfPartialMessage,this.sharedArray,this.offset,lengthOfPartialMessage);}  }
class C{  private void updateEmptyView(){  boolean hasRunsOrLabels=false;  int emptyIndex=-1;  final int count=mItems.size();  for (int index=0; index < count; ++index) {    int viewType=mItems.get(index).getViewType();switch (viewType) {case VIEW_TYPE_EMPTY:      emptyIndex=index;    break;case VIEW_TYPE_RUN_CARD:case VIEW_TYPE_EXPERIMENT_PICTURE_LABEL:case VIEW_TYPE_EXPERIMENT_TEXT_LABEL:case VIEW_TYPE_EXPERIMENT_TRIGGER_LABEL:  hasRunsOrLabels=true;break;}if (hasRunsOrLabels) {break;}}if (hasRunsOrLabels && emptyIndex != -1) {removeEmptyView(emptyIndex,true);} else if (!hasRunsOrLabels && emptyIndex == -1) {addEmptyView(true);}}  }
class C{  public void openDriver(SurfaceHolder holder) throws IOException {  if (camera == null) {    camera=Camera.open();    if (camera == null) {      throw new IOException();    }    camera.setPreviewDisplay(holder);    if (!initialized) {      initialized=true;      configManager.initFromCameraParameters(camera);    }    configManager.setDesiredCameraParameters(camera);    FlashlightManager.enableFlashlight();  }}  }
class C{  private static boolean isLessThanOneWeek(Date date){  Calendar calendar=Calendar.getInstance();  calendar.add(Calendar.DAY_OF_MONTH,-6);  return date.after(calendar.getTime());}  }
class C{  public static UByte ubyte(String value) throws NumberFormatException {  return value == null ? null : UByte.valueOf(value);}  }
class C{  @Override public IBinder onBind(Intent intent){  return sSyncAdapter.getSyncAdapterBinder();}  }
class C{  @Nullable public static Label createIfValid(String label){  if (validate(label)) {    return new Label(label);  }  return null;}  }
class C{  Node(K key,Object value,Node<K,V> next){  this.key=key;  this.value=value;  this.next=next;}  }
class C{  public DefaultingVolatileIntervalsService(VolatileIntervalsFunction defaultIntervalsFunction,Map<PhysicalTable,VolatileIntervalsFunction> intervalsFunctions){  this.intervalsFunctions=new DefaultingDictionary<>(defaultIntervalsFunction,intervalsFunctions);}  }
class C{  @NotNull public FindSimilarSet findSimilar(@NotNull String faceListId,@NotNull String imageUrl){  Face singleFace=findSingleFace(imageUrl);  List<FindSimilar> result=faceTaskBuilder.findSimilarFace(singleFace.faceId,Collections.emptyList(),faceListId,20).withResult();  FaceList faceList=faceListBuilder.getFaceList(faceListId).withResult();  return new FindSimilarSet(singleFace,faceList,result);}  }
class C{  public JsonArray add(double value){  values.add(Json.value(value));  return this;}  }
class C{  public void writeLong(long a) throws IOException {  io.write((byte)(a >> 56));  io.write((byte)(a >> 48));  io.write((byte)(a >> 40));  io.write((byte)(a >> 32));  io.write((byte)(a >> 24));  io.write((byte)(a >> 16));  io.write((byte)(a >> 8));  io.write((byte)(a));}  }
class C{  @Override public void occurrence(short occurrence,Augmentations augs) throws XNIException {  if (fDTDGrammar != null)   fDTDGrammar.occurrence(occurrence,augs);  if (fDTDContentModelHandler != null) {    fDTDContentModelHandler.occurrence(occurrence,augs);  }}  }
class C{  public void end(){  String tag=(String)m_tagStack.remove(m_tagStack.size() - 1);  spacing();  m_out.print('<');  m_out.print('/');  m_out.print(tag);  m_out.print('>');  println();}  }
class C{  public SiteAdminPage createNewPageReusingDialog(String title,String name,String templateName){  createPageWindow.createPage(title,name,templateName);  grid.waitForLoaderNotPresent();  return this;}  }
class C{  public VideoRemoveFromAlbumQuery albumIds(Integer... value){  return unsafeParam("album_ids",value);}  }
class C{  public DocumentNGramGaussNormGraph(int iMinSize,int iMaxSize,int iCorrelationWindow){  MinSize=iMinSize;  MaxSize=iMaxSize;  CorrelationWindow=iCorrelationWindow;  InitGraphs();}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public void onTargetLongClick(TapTargetView view){  onTargetClick(view);}  }
class C{  private void toggleOptionals(@NotNull Optional<Device> device,boolean deviceChange){  boolean IsDevicePresent=device.isPresent();  Hardware deviceDefaultHardware=IsDevicePresent ? device.get().getDefaultHardware() : null;  myChangeSystemImageButton.setEnabled(IsDevicePresent);  myFrontCameraCombo.setEnabled(IsDevicePresent && deviceDefaultHardware.getCamera(CameraLocation.FRONT) != null);  myBackCameraCombo.setEnabled(IsDevicePresent && deviceDefaultHardware.getCamera(CameraLocation.BACK) != null);  myOrientationToggle.setEnabled(IsDevicePresent && device.get().getDefaultState().getOrientation() != ScreenOrientation.SQUARE);  myEnableComputerKeyboard.setEnabled(IsDevicePresent && !deviceDefaultHardware.getKeyboard().equals(Keyboard.QWERTY));  if (deviceChange) {    ScreenOrientation orientation=IsDevicePresent ? device.get().getDefaultState().getOrientation() : ScreenOrientation.PORTRAIT;    myOrientationToggle.setSelectedElement(orientation);  }  File customSkin=getModel().getAvdDeviceData().customSkinFile().getValueOrNull();  File backupSkin=getModel().backupSkinFile().getValueOrNull();  if (backupSkin != null && customSkin == null) {    getModel().hasDeviceFrame().set(false);  }  File hardwareSkin=null;  if (IsDevicePresent && getModel().systemImage().get().isPresent()) {    hardwareSkin=AvdWizardUtils.resolveSkinPath(deviceDefaultHardware.getSkinFile(),getModel().systemImage().getValue(),FileOpUtils.create());    myDeviceName.setIcon(DeviceDefinitionPreview.getIcon(getModel().getAvdDeviceData()));    myDeviceName.setText(getModel().device().getValue().getDisplayName());    updateDeviceDetails();  }  if (customSkin == null) {    if (backupSkin != null) {      customSkin=backupSkin;    } else {      customSkin=hardwareSkin;    }  }  if (customSkin != null) {    mySkinComboBox.getComboBox().setSelectedItem(customSkin);    getModel().getAvdDeviceData().customSkinFile().setValue(customSkin);  }}  }
class C{  private static StringBuilder dump(StringBuilder _lbuffer,long value){  for (int j=0; j < 8; j++) {    _lbuffer.append(_hexcodes[(int)(value >> _shifts[j]) & 15]);  }  return _lbuffer;}  }
class C{  public CPU(String name,long user,long nice,long system,long idle,long irq){  this.name=name;  this.user=user;  this.nice=nice;  this.system=system;  this.idle=idle;  this.irq=irq;  CPU c=last.get(name);  if (c != null) {    prev.put(name,c);  }  last.put(name,this);}  }
class C{  public void clearAll(){  if (items != null) {    items.clear();  }  if (emptyItems != null) {    emptyItems.clear();  }}  }
class C{  public static void writeResultFile(String filename,Map<String,List<QueryResponseJSON>> resultMap) throws IOException {  try (BufferedWriter bw=new BufferedWriter(new FileWriter(new File(filename)))){    for (    Entry<String,List<QueryResponseJSON>> entry : resultMap.entrySet()) {      for (      QueryResponseJSON hitJSON : entry.getValue()) {        bw.write(hitJSON.getJSONString());        bw.newLine();      }    }  } }  }
class C{  public PerformanceTableModel(){  Vector<String> vSysID=new Vector<String>();  Vector<String> vTopicID=new Vector<String>();  Vector<Double> vPerformance=new Vector<Double>();  lCols=new TreeMap<String,Vector>();  lCols.put(COLUMNNAME_SYSTEMID,vSysID);  lCols.put(COLUMNNAME_TOPICID,vTopicID);  lCols.put(COLUMNNAME_PERFORMANCE,vPerformance);}  }
class C{  public Vector<MBROLAPhoneme> convertSampa(MBROLAPhoneme maryPhoneme){  Vector<MBROLAPhoneme> phones=new Vector<MBROLAPhoneme>();  String marySampa=maryPhoneme.getSymbol();  if (sampa2voiceMap != null && sampa2voiceMap.containsKey(marySampa)) {    String newSampa=sampa2voiceMap.get(marySampa);    Vector<String> newSampas=new Vector<String>();    StringTokenizer st=new StringTokenizer(newSampa);    while (st.hasMoreTokens()) {      newSampas.add(st.nextToken());    }    int n=newSampas.size();    int totalDur=maryPhoneme.getDuration();    Vector<int[]> allTargets=maryPhoneme.getTargets();    for (int i=0; i < newSampas.size(); i++) {      String sampa=newSampas.get(i);      int dur=totalDur / n;      Vector<int[]> newTargets=null;      int maxP=100 * (i + 1) / n;      boolean ok=true;      while (allTargets != null && allTargets.size() > 0 && ok) {        int[] oldTarget=allTargets.get(0);        if (oldTarget[0] <= maxP) {          int[] newTarget=new int[2];          newTarget[0]=oldTarget[0] * n;          newTarget[1]=oldTarget[1];          if (newTargets == null)           newTargets=new Vector<int[]>();          newTargets.add(newTarget);          allTargets.remove(0);        } else {          ok=false;        }      }      MBROLAPhoneme mp=new MBROLAPhoneme(sampa,dur,newTargets,maryPhoneme.getVoiceQuality());      phones.add(mp);    }  } else {    phones.add(maryPhoneme);  }  return phones;}  }
class C{  public boolean isFullyZoomedOutX(){  return !(mScaleX > mMinScaleX || mMinScaleX > 1f);}  }
class C{  protected TimbreDistribution(){  super();}  }
class C{  @Override public MapStack<K> standAloneStack(){  MapStack<K> standAlone=MapStack.create(this);  return standAlone;}  }
class C{  public static void copy(InputStream input,Writer output,String encoding) throws IOException {  InputStreamReader in=new InputStreamReader(input,encoding);  copy(in,output);}  }
class C{  private Integer compareDateValues(Long loadValue,Long userValue){  return loadValue.compareTo(userValue);}  }
class C{  public void clearSession(){  session.setAccessToken(null);}  }
class C{  public TrackReads(String bam,GenomicCoords gc,int maxReadStack) throws IOException {  if (!Utils.bamHasIndex(bam)) {    System.err.println("\nAlignment file " + bam + " has no index.\n");    throw new RuntimeException();  }  this.setFilename(bam);  this.setGc(gc);  this.maxReadStack=maxReadStack;  this.update();}  }
class C{  public static String formatRateString(float rate){  return String.format(Locale.US,"%.2fx",rate);}  }
class C{  protected PollsEditQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  public String[] upload_file(String group_name,String master_filename,String prefix_name,byte[] file_buff,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {  if ((group_name == null || group_name.length() == 0) || (master_filename == null || master_filename.length() == 0) || (prefix_name == null)) {    throw new MyException("invalid arguement");  }  return this.do_upload_file(ProtoCommon.STORAGE_PROTO_CMD_UPLOAD_SLAVE_FILE,group_name,master_filename,prefix_name,file_ext_name,file_buff.length,new UploadBuff(file_buff,0,file_buff.length),meta_list);}  }
class C{  public void clear(){  m_trie=new Trie(m_trie.isCaseSensitive());  super.clear();}  }
class C{  public CommandBuilder withLongSwitchIfPresent(Map<String,Object> properties,String... keys){  withLongSwitchIfPresent(properties,UnaryOperator.identity(),keys);  return this;}  }
class C{  protected PhotosSaveWallPhotoQuery photo(String value){  return unsafeParam("photo",value);}  }
class C{  static byte[] stringDigest(String s) throws NumberFormatException {  byte[] result=new byte[(s.length() + 1) / 2];  int rpos=result.length;  int last=-1;  for (int spos=s.length(); --spos >= 0; ) {    int digit=Character.digit(s.charAt(spos),16);    if (digit < 0) {      throw new NumberFormatException("Illegal hex digit: '" + s.charAt(spos) + "'");    }    if (last < 0) {      last=digit;    } else {      result[--rpos]=(byte)(last + (digit << 4));      last=-1;    }  }  if (last >= 0) {    result[--rpos]=(byte)last;  }  return result;}  }
class C{  public AppsGetQuery(VkApiClient client,UserActor actor){  super(client,"apps.get",GetResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public static String formatSpelledOutAmount(Double amount,Locale locale){  return formatSpelledOutAmount(amount.doubleValue(),locale);}  }
class C{  public static int nextPrime(int desiredCapacity){  int i=java.util.Arrays.binarySearch(primeCapacities,desiredCapacity);  if (i < 0) {    i=-i - 1;  }  return primeCapacities[i];}  }
class C{  private static BSPTree<Sphere1D> buildTree(final double lower,final double upper,final double tolerance) throws MathIllegalArgumentException {  if (Precision.equals(lower,upper,0) || (upper - lower) >= MathUtils.TWO_PI) {    return new BSPTree<Sphere1D>(Boolean.TRUE);  } else   if (lower > upper) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.ENDPOINTS_NOT_AN_INTERVAL,lower,upper,true);  }  final double normalizedLower=MathUtils.normalizeAngle(lower,FastMath.PI);  final double normalizedUpper=normalizedLower + (upper - lower);  final SubHyperplane<Sphere1D> lowerCut=new LimitAngle(new S1Point(normalizedLower),false,tolerance).wholeHyperplane();  if (normalizedUpper <= MathUtils.TWO_PI) {    final SubHyperplane<Sphere1D> upperCut=new LimitAngle(new S1Point(normalizedUpper),true,tolerance).wholeHyperplane();    return new BSPTree<Sphere1D>(lowerCut,new BSPTree<Sphere1D>(Boolean.FALSE),new BSPTree<Sphere1D>(upperCut,new BSPTree<Sphere1D>(Boolean.FALSE),new BSPTree<Sphere1D>(Boolean.TRUE),null),null);  } else {    final SubHyperplane<Sphere1D> upperCut=new LimitAngle(new S1Point(normalizedUpper - MathUtils.TWO_PI),true,tolerance).wholeHyperplane();    return new BSPTree<Sphere1D>(lowerCut,new BSPTree<Sphere1D>(upperCut,new BSPTree<Sphere1D>(Boolean.FALSE),new BSPTree<Sphere1D>(Boolean.TRUE),null),new BSPTree<Sphere1D>(Boolean.TRUE),null);  }}  }
class C{  public void disableAllChecks(){  super.reset();  setLeadingWS(false);  setTrailingWS(false);  setEmptyTarget(false);  setEmptySource(false);  setTargetSameAsSource(false);  setTargetSameAsSourceForSameLanguage(false);  setTargetSameAsSourceWithCodes(false);  setCodeDifference(false);  setGuessOpenClose(false);  setCheckXliffSchema(false);  setCheckPatterns(false);  setCheckWithLT(false);  setTranslateLTMsg(false);  setLtBilingualMode(false);  setDoubledWord(false);  setCorruptedCharacters(false);  setCheckMaxCharLength(false);  setCheckMinCharLength(false);  setCheckStorageSize(false);  setCheckAbsoluteMaxCharLength(false);  setCheckAllowedCharacters(false);  setCheckCharacters(false);  setCheckTerms(false);  setStringMode(false);  setBetweenCodes(false);  setCheckBlacklist(false);}  }
class C{  public PermissionCollection newPermissionCollection(){  return new GrantPermissionCollection();}  }
class C{  public static void createTable(Database db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"THEME_LIST\" ("+ "\"JSON_STRING\" TEXT,"+ "\"CREATED_TIME\" INTEGER);");}  }
class C{  public CountIntegrationTest(){  setResponseLogLengthLimit(1000);  dateFormat=new SimpleDateFormat("yyyy-MM-dd");  Calendar cal=Calendar.getInstance();  cal.add(Calendar.DATE,-1);  yesterday=dateFormat.format(cal.getTime());  yesterday+="T00:00:00+0000";  cal=Calendar.getInstance();  cal.add(Calendar.DATE,0);  today=dateFormat.format(cal.getTime());  today+="T00:00:00+0000";  cal=Calendar.getInstance();  cal.add(Calendar.DATE,1);  tomorrow=dateFormat.format(cal.getTime());  tomorrow+="T00:00:00+0000";  cal=Calendar.getInstance();  cal.add(Calendar.DATE,4);  tomorrowPlus3=dateFormat.format(cal.getTime());  tomorrowPlus3+="T00:00:00+0000";  cal=Calendar.getInstance();  cal.add(Calendar.DATE,3);  tomorrowPlus2=dateFormat.format(cal.getTime());  tomorrowPlus2+="T00:00:00+0000";  cal=Calendar.getInstance();  cal.add(Calendar.DATE,2);  tomorrowPlus1=dateFormat.format(cal.getTime());  tomorrowPlus1+="T00:00:00+0000";  cal=Calendar.getInstance();  cal.add(Calendar.DATE,-4);  yesterdayMinus3=dateFormat.format(cal.getTime());  yesterdayMinus3+="T00:00:00+0000";  experiment=ExperimentFactory.createExperiment();  experiment.startTime=yesterday;  experiment.endTime=tomorrowPlus3;  experiment.samplingPercent=1.0;  experiment.label="experiment";  experiment.applicationName=QBO + UUID.randomUUID();  DefaultNameExclusionStrategy experimentComparisonStrategy=new DefaultNameExclusionStrategy("creationTime","modificationTime","ruleJson");  experiment.setSerializationStrategy(experimentComparisonStrategy);}  }
class C{  @Override public synchronized void stop(){  try {    LOGGER.info("Stopping JMS update containers listening for tag updates from the DAQ layer.");    subscriptionChecker.cancel();    ThreadPoolExecutor shutdownExecutor=new ThreadPoolExecutor(10,10,1,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>());    Collection<ContainerShutdownTask> containerTasks=new ArrayList<ContainerShutdownTask>();    for (    Map.Entry<Long,DefaultMessageListenerContainer> entry : jmsContainers.entrySet()) {      ContainerShutdownTask containerShutdownTask=new ContainerShutdownTask(entry.getValue());      containerTasks.add(containerShutdownTask);    }    shutdownExecutor.invokeAll(containerTasks,60,TimeUnit.SECONDS);    shutdownExecutor.shutdown();    jmsContainers.clear();    threadPool.shutdown();  } catch (  Exception e) {    LOGGER.error("Exception caught while closing down the Spring listener/JMS thread pool",e);  }}  }
class C{  public Fraction abs(){  Fraction ret;  if (numerator >= 0) {    ret=this;  } else {    ret=negate();  }  return ret;}  }
class C{  public boolean hasErrors(){  return getDiagCollector().hasErrors();}  }
class C{  public static List<String> maxNoNodes(List<TableBlockInfo> blockList){  boolean useIndex=true;  Integer maxOccurence=0;  String maxNode=null;  Map<String,Integer> nodeAndOccurenceMapping=new TreeMap<>();  for (  TableBlockInfo block : blockList) {    for (    String node : block.getLocations()) {      Integer nodeOccurence=nodeAndOccurenceMapping.get(node);      if (null == nodeOccurence) {        nodeAndOccurenceMapping.put(node,1);      } else {        nodeOccurence++;      }    }  }  Integer previousValueOccurence=null;  for (  Map.Entry<String,Integer> entry : nodeAndOccurenceMapping.entrySet()) {    if (entry.getValue() > maxOccurence) {      maxOccurence=entry.getValue();      maxNode=entry.getKey();    }    if (null == previousValueOccurence) {      previousValueOccurence=entry.getValue();    } else {      if (previousValueOccurence != entry.getValue()) {        useIndex=false;      }    }  }  if (useIndex) {    return new ArrayList<>(nodeAndOccurenceMapping.keySet());  }  List<String> node=new ArrayList<>(1);  node.add(maxNode);  return node;}  }
class C{  private void initializeContentModelStacks(){  if (fOpStack == null) {    fOpStack=new short[8];    fGroupIndexStack=new int[8][];    fGroupIndexStackSizes=new int[8];  } else   if (fDepth == fOpStack.length) {    short[] newOpStack=new short[fDepth * 2];    System.arraycopy(fOpStack,0,newOpStack,0,fDepth);    fOpStack=newOpStack;    int[][] newGroupIndexStack=new int[fDepth * 2][];    System.arraycopy(fGroupIndexStack,0,newGroupIndexStack,0,fDepth);    fGroupIndexStack=newGroupIndexStack;    int[] newGroupIndexStackLengths=new int[fDepth * 2];    System.arraycopy(fGroupIndexStackSizes,0,newGroupIndexStackLengths,0,fDepth);    fGroupIndexStackSizes=newGroupIndexStackLengths;  }  fOpStack[fDepth]=-1;  fGroupIndexStackSizes[fDepth]=0;}  }
class C{  private String flattenComment(String string){  StringBuffer buffer=new StringBuffer(string.length() + 20);  boolean skipAdjacentLineSeparator=true;  for (int i=0; i < string.length(); i++) {    char c=string.charAt(i);    if (c == '\r' || c == '\n') {      if (!skipAdjacentLineSeparator)       buffer.append(Policy.bind("separator"));      skipAdjacentLineSeparator=true;    } else {      buffer.append(c);      skipAdjacentLineSeparator=false;    }  }  return buffer.toString();}  }
class C{  protected int[] fht(int[] x) throws MathIllegalArgumentException {  final int n=x.length;  final int halfN=n / 2;  if (!ArithmeticUtils.isPowerOfTwo(n)) {    throw new MathIllegalArgumentException(LocalizedFFTFormats.NOT_POWER_OF_TWO,Integer.valueOf(n));  }  int[] yPrevious=new int[n];  int[] yCurrent=x.clone();  for (int j=1; j < n; j<<=1) {    final int[] yTmp=yCurrent;    yCurrent=yPrevious;    yPrevious=yTmp;    for (int i=0; i < halfN; ++i) {      final int twoI=2 * i;      yCurrent[i]=yPrevious[twoI] + yPrevious[twoI + 1];    }    for (int i=halfN; i < n; ++i) {      final int twoI=2 * i;      yCurrent[i]=yPrevious[twoI - n] - yPrevious[twoI - n + 1];    }  }  return yCurrent;}  }
class C{  @Override public String toString(){  return String.format("%s=%s",debugName,value);}  }
class C{  public static boolean isGlyphFlag(){  return glyphFlag;}  }
class C{  private void updateSelfTableForeignKey(DataSupport baseObj,ContentValues values){  Map<String,Long> associatedModelMap=baseObj.getAssociatedModelsMapWithoutFK();  for (  String associatedTable : associatedModelMap.keySet()) {    String fkName=getForeignKeyColumnName(associatedTable);    values.put(fkName,associatedModelMap.get(associatedTable));  }}  }
class C{  public static void overrideSymbolSet(SymbolInfo[] override){  symbols=override;}  }
class C{  public static int decodeVIntSize(byte value){  if (value >= -112) {    return 1;  } else   if (value < -120) {    return -119 - value;  }  return -111 - value;}  }
class C{  private Font extractFont(){  Font font=null;  Expression fontFamily=fieldConfigVisitor.getExpression(FieldIdEnum.FONT_FAMILY);  Expression fontSize=fieldConfigVisitor.getExpression(FieldIdEnum.FONT_SIZE);  Expression fontStyle=fieldConfigVisitor.getExpression(FieldIdEnum.FONT_STYLE);  Expression fontWeight=fieldConfigVisitor.getExpression(FieldIdEnum.FONT_WEIGHT);  List<Expression> fontFamilyList=new ArrayList<Expression>();  fontFamilyList.add(fontFamily);  if ((fontFamilyList == null) || (fontStyle == null) || (fontWeight == null)|| (fontSize == null)) {    font=getStyleFactory().getDefaultFont();  } else {    font=(Font)getStyleFactory().font(fontFamilyList,fontStyle,fontWeight,fontSize);  }  return font;}  }
class C{  public static void writeLines(File file,Collection<?> lines,String lineEnding,boolean append) throws IOException {  writeLines(file,null,lines,lineEnding,append);}  }
class C{  private boolean isDerivedByRestriction(String ancestorNS,String ancestorName,int derivationMethod,XSTypeDefinition type){  XSTypeDefinition oldType=null;  while (type != null && type != oldType) {    if (ancestorNS != null && ancestorNS.equals(SchemaSymbols.URI_SCHEMAFORSCHEMA) && ancestorName.equals(SchemaSymbols.ATTVAL_ANYSIMPLETYPE)) {      return false;    }    if ((ancestorName.equals(type.getName())) && (ancestorNS != null && ancestorNS.equals(type.getNamespace())) || ((type.getNamespace() == null && ancestorNS == null))) {      return true;    }    if (type instanceof XSSimpleTypeDecl) {      if (ancestorNS.equals(SchemaSymbols.URI_SCHEMAFORSCHEMA) && ancestorName.equals(SchemaSymbols.ATTVAL_ANYTYPE)) {        ancestorName=SchemaSymbols.ATTVAL_ANYSIMPLETYPE;      }      return ((XSSimpleTypeDecl)type).isDOMDerivedFrom(ancestorNS,ancestorName,derivationMethod);    } else {      if (((XSComplexTypeDecl)type).getDerivationMethod() != XSConstants.DERIVATION_RESTRICTION) {        return false;      }    }    oldType=type;    type=type.getBaseType();  }  return false;}  }
class C{  public boolean next(){  return seek(MDB_NEXT);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Petrification_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200771,skillcaster,skillname);}  }
class C{  public void add(String line){  this.graph.append(line);}  }
class C{  static public void copyFiles(String[] files,String destPath) throws IOException {  int ch;  BufferedOutputStream bos;  BufferedInputStream bis;  for (int i=0; i < files.length; i++) {    String fileName=files[i].substring(files[i].lastIndexOf("/"));    bis=new BufferedInputStream(new FileInputStream(files[i]));    bos=new BufferedOutputStream(new FileOutputStream(destPath + fileName));    while ((ch=bis.read()) != -1)     bos.write(ch);    bos.flush();    bos.close();    bis.close();  }}  }
class C{  public static <V,V1 extends V,V2 extends V,V3 extends V,V4 extends V,V5 extends V>Map<String,V> toMap(String name1,V1 value1,String name2,V2 value2,String name3,V3 value3,String name4,V4 value4,String name5,V5 value5){  return populateMap(new HashMap<String,V>(),name1,value1,name2,value2,name3,value3,name4,value4,name5,value5);}  }
class C{  private void cleanup(int imageType,Uri oldImage,Uri newImage,Bitmap bitmap){  if (bitmap != null) {    bitmap.recycle();  }  (new File(FileHelper.stripFileProtocol(oldImage.toString()))).delete();  checkForDuplicateImage(imageType);  if (this.saveToPhotoAlbum && newImage != null) {    this.scanForGallery(newImage);  }  System.gc();}  }
class C{  private BooleanQuery containsFilterQuery(String luceneFieldName,ApiFilter filter){  return filter.getValues().stream().map(null).map(null).collect(getBooleanQueryCollector(BooleanClause.Occur.SHOULD)).build();}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public Dims fullCopy(){  Dims tree=(Dims)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static boolean containsString(final String fileName,final String searchString) throws IOException {  File inFile=new File(fileName);  if (inFile.exists()) {    BufferedReader in=new BufferedReader(new FileReader(inFile));    try {      return containsString(in,searchString);    }  finally {      if (in != null)       in.close();    }  } else {    return false;  }}  }
class C{  protected void accumulateLabel(String path){  String name=getLabel(path);  if (!labels.contains(name))   labels.add(name);}  }
class C{  @Override public double[] makeCumulativeTestValues(){  return new double[]{0,0,1};}  }
class C{  public static final double sum(double[] a){  double sum=0;  for (int i=0; i < a.length; ++i) {    sum+=a[i];  }  return sum;}  }
class C{  public Builder expression(final String expression){  this.expression=expression;  return this;}  }
class C{  public final boolean isFinished(){  return mScrollerX.mFinished && mScrollerY.mFinished;}  }
class C{  public DocumentWordDistroGraph(){  MinSize=1;  MaxSize=2;  CorrelationWindow=3;}  }
class C{  public static void showProfile(Activity activity,String pilotId,@Nullable HashMap<String,String> extras){  if ((pilotId == null || pilotId.isEmpty()) && AirMap.hasValidAuthenticatedUser()) {    pilotId=AirMap.getUserId();  }  Intent intent=new Intent(activity,ProfileActivity.class);  intent.putExtra(ProfileActivity.ARG_PILOT_ID,pilotId);  if (extras != null) {    intent.putExtra(CreateFlightActivity.KEY_VALUE_EXTRAS,extras);  }  activity.startActivity(intent);}  }
class C{  public String toString(){  try {    return '[' + join(",") + ']';  } catch (  Exception e) {    return null;  }}  }
class C{  public DecisionSupport(Map hCategoryEstimations,String sSuggestedCategory,String sCorrectCategory){  CategoryEstimations=new TreeMap();  CategoryEstimations.putAll(hCategoryEstimations);  SuggestedCategory=new String(sSuggestedCategory);  CorrectCategory=new String(sCorrectCategory);}  }
class C{  public synchronized void parseCatalog(String mimeType,InputStream is) throws IOException, CatalogException {  default_override=catalogManager.getPreferPublic();  catalogManager.debug.message(4,"Parse " + mimeType + " catalog on input stream");  CatalogReader reader=null;  if (readerMap.containsKey(mimeType)) {    int arrayPos=((Integer)readerMap.get(mimeType)).intValue();    reader=(CatalogReader)readerArr.get(arrayPos);  }  if (reader == null) {    String msg="No CatalogReader for MIME type: " + mimeType;    catalogManager.debug.message(2,msg);    throw new CatalogException(CatalogException.UNPARSEABLE,msg);  }  reader.readCatalog(this,is);  parsePendingCatalogs();}  }
class C{  @Override public String toString(){  return getTime("h:mm:ss.cs");}  }
class C{  public static String clearLastViewedProducts(HttpServletRequest request,HttpServletResponse response){  HttpSession session=request.getSession();  if (session != null) {    session.setAttribute("lastViewedProducts",FastList.newInstance());  }  return "success";}  }
class C{  @SuppressWarnings("unchecked") public final S withValueSupplier(Splittable.LongIndexed<T> valueSupplier){  this.valueSupplier=valueSupplier;  return (S)this;}  }
class C{  public TShortLongHashMap(int initialCapacity,float loadFactor,TShortHashingStrategy strategy){  super(initialCapacity,loadFactor,strategy);}  }
class C{  private void releaseUselessResources(){  offlineProcessor.destroy();  offlineProcessor=null;  IFigureManager.cleanCache();  System.gc();}  }
class C{  public static void FindPhotoCrop(Activity activity,Uri uri){  if (uri == null) {    imgUri=createImageUri(activity);  } else {    imgUri=uri;  }  Intent intent=new Intent(Intent.ACTION_GET_CONTENT);  intent.setDataAndType(imgUri,"image/*").putExtra(MediaStore.EXTRA_OUTPUT,imgUri).putExtra("crop","true").putExtra("scale",true).putExtra("aspectX",1).putExtra("aspectY",1).putExtra("outputX",300).putExtra("outputY",300).putExtra("outputFormat",Bitmap.CompressFormat.JPEG.toString()).putExtra("noFaceDetection",true).putExtra("scaleUpIfNeeded",true).putExtra("return-data",false);  activity.startActivityForResult(intent,REQUEST_CODE_ALBUM_CROP);}  }
class C{  protected MarketAddToAlbumQuery itemId(int value){  return unsafeParam("item_id",value);}  }
class C{  public static short[] quantize(float[] f,float fMin,float fRange){  int len=f.length;  short[] ret=new short[len];  for (int i=0; i < len; i++)   ret[i]=quantize(f[i],fMin,fRange);  return (ret);}  }
class C{  protected void spawnHelpers(int npcId,int count,int distance){  if (!isAlreadyDead()) {    for (int i=0; i < count; i++) {      SpawnTemplate summon=null;      summon=rndSpawnInRange(npcId,distance);      VisibleObject npc=SpawnEngine.spawnObject(summon,getPosition().getInstanceId());      PacketSendUtility.broadcastPacket(getOwner(),new SM_NPC_INFO((Npc)npc,""));synchronized (spawnedNpc) {        spawnedNpc.add(npc.getObjectId());      }    }  }}  }
class C{  @Override protected void onStopLoading(){  cancelLoad();}  }
class C{  static void scheduleNow(Activity a){  getInstance()._schedule(a,System.currentTimeMillis());}  }
class C{  public PraatTextfileDoubleDataSource(Reader reader){  super(reader);  try {    String line=this.reader.readLine().trim();    if (!line.startsWith("File type = \"ooTextFile")) {      throw new IllegalArgumentException("Expected Praat file, got first line: " + line);    }    line=this.reader.readLine();    line=this.reader.readLine().trim();    if (!line.equals("")) {      throw new IllegalArgumentException("Expected empty third line, got: " + line);    }    line=this.reader.readLine();    line=this.reader.readLine();    line=this.reader.readLine();  } catch (  IOException ioe) {    ioe.printStackTrace();  }}  }
class C{  public static void appendSourceDescription(@NotNull StringBuilder sb,@Nullable PsiFile file,int offset,@Nullable Segment segment){  if (file != null && segment != null) {    if (ResourceHelper.getFolderType(file) != null) {      assertNotNull(file.getParent());      sb.append(file.getParent().getName());      sb.append("/");    }    sb.append(file.getName());    sb.append(':');    String text=file.getText();    int lineNumber=1;    for (int i=0; i < offset; i++) {      if (text.charAt(i) == '\n') {        lineNumber++;      }    }    sb.append(lineNumber);    sb.append(":");    sb.append('\n');    int startOffset=segment.getStartOffset();    int endOffset=segment.getEndOffset();    assertTrue(offset == -1 || offset >= startOffset);    assertTrue(offset == -1 || offset <= endOffset);    int lineStart=startOffset;    while (lineStart > 0 && text.charAt(lineStart - 1) != '\n') {      lineStart--;    }    while (lineStart < startOffset && Character.isWhitespace(text.charAt(lineStart))) {      lineStart++;    }    int lineEnd=startOffset;    while (lineEnd < text.length() && text.charAt(lineEnd) != '\n') {      lineEnd++;    }    String indent="  ";    sb.append(indent);    sb.append(text.substring(lineStart,lineEnd));    sb.append('\n');    sb.append(indent);    for (int i=lineStart; i < lineEnd; i++) {      if (i == offset) {        sb.append('|');      } else       if (i >= startOffset && i <= endOffset) {        sb.append('~');      } else {        sb.append(' ');      }    }  } else {    sb.append(offset);    sb.append(":?");  }  sb.append('\n');}  }
class C{  public ConnectTimeoutException(){  super();}  }
class C{  public static long now(){  return (new Date()).getTime();}  }
class C{  public static String quickAddChosenVariant(HttpServletRequest request,HttpServletResponse response){  String errMsg="";  Delegator delegator=(Delegator)request.getAttribute("delegator");  String productId=request.getParameter("productId");  String variantProductId=request.getParameter("variantProductId");  String featureTypeSizeStr=request.getParameter("featureTypeSize");  if (UtilValidate.isEmpty(productId)) {    errMsg=UtilProperties.getMessage(resource,"variantevents.productId_required_but_missing",UtilHttp.getLocale(request));    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  if (UtilValidate.isEmpty(variantProductId)) {    errMsg=UtilProperties.getMessage(resource,"variantevents.variantProductId_required_but_missing_enter_an_id",UtilHttp.getLocale(request));    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  int featureTypeSize=0;  try {    featureTypeSize=Integer.parseInt(featureTypeSizeStr);  } catch (  NumberFormatException e) {    Map<String,String> messageMap=UtilMisc.toMap("featureTypeSizeStr",featureTypeSizeStr);    errMsg=UtilProperties.getMessage(resource,"variantevents.featureTypeSize_not_number",messageMap,UtilHttp.getLocale(request));    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  try {    boolean beganTransacton=TransactionUtil.begin();    try {      GenericValue product=EntityQuery.use(delegator).from("Product").where("productId",productId).queryOne();      if (product == null) {        Map<String,String> messageMap=UtilMisc.toMap("productId",productId);        errMsg=UtilProperties.getMessage(resource,"variantevents.product_not_found_with_ID",messageMap,UtilHttp.getLocale(request));        TransactionUtil.rollback(beganTransacton,errMsg,null);        request.setAttribute("_ERROR_MESSAGE_",errMsg);        return "error";      }      GenericValue variantProduct=EntityQuery.use(delegator).from("Product").where("productId",variantProductId).queryOne();      if (variantProduct == null) {        variantProduct=GenericValue.create(product);        variantProduct.set("productId",variantProductId);        variantProduct.set("isVirtual","N");        variantProduct.set("isVariant","Y");        variantProduct.set("primaryProductCategoryId",null);        variantProduct.create();      } else {        variantProduct.set("isVirtual","N");        variantProduct.set("isVariant","Y");        variantProduct.set("primaryProductCategoryId",null);        variantProduct.store();      }      GenericValue productAssoc=delegator.makeValue("ProductAssoc",UtilMisc.toMap("productId",productId,"productIdTo",variantProductId,"productAssocTypeId","PRODUCT_VARIANT","fromDate",UtilDateTime.nowTimestamp()));      productAssoc.create();      for (int i=0; i < featureTypeSize; i++) {        String productFeatureId=request.getParameter("feature_" + i);        if (productFeatureId == null) {          Map<String,String> messageMap=UtilMisc.toMap("i",Integer.toString(i));          errMsg=UtilProperties.getMessage(resource,"variantevents.productFeatureId_for_feature_type_number_not_found",messageMap,UtilHttp.getLocale(request));          TransactionUtil.rollback(beganTransacton,errMsg,null);          request.setAttribute("_ERROR_MESSAGE_",errMsg);          return "error";        }        GenericValue productFeature=EntityQuery.use(delegator).from("ProductFeature").where("productFeatureId",productFeatureId).queryOne();        GenericValue productFeatureAppl=delegator.makeValue("ProductFeatureAppl",UtilMisc.toMap("productId",variantProductId,"productFeatureId",productFeatureId,"productFeatureApplTypeId","STANDARD_FEATURE","fromDate",UtilDateTime.nowTimestamp()));        if (productFeature != null) {          productFeatureAppl.set("sequenceNum",productFeature.get("defaultSequenceNum"));        }        productFeatureAppl.create();      }      TransactionUtil.commit(beganTransacton);    } catch (    GenericEntityException e) {      Map<String,String> messageMap=UtilMisc.toMap("errMessage",e.toString());      errMsg=UtilProperties.getMessage(resource,"variantevents.entity_error_quick_add_variant_data",messageMap,UtilHttp.getLocale(request));      TransactionUtil.rollback(beganTransacton,errMsg,null);      Debug.logError(e,"Entity error creating quick add variant data",module);      request.setAttribute("_ERROR_MESSAGE_",errMsg);      return "error";    }  } catch (  GenericTransactionException e) {    Debug.logError(e,"Transaction error creating quick add variant data",module);    Map<String,String> messageMap=UtilMisc.toMap("errMessage",e.toString());    errMsg=UtilProperties.getMessage(resource,"variantevents.transaction_error_quick_add_variant_data",messageMap,UtilHttp.getLocale(request));    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  Map<String,String> messageMap=UtilMisc.toMap("variantProductId",variantProductId);  String sucMsg=UtilProperties.getMessage(resource,"variantevents.successfully_created_variant_product_with_id",messageMap,UtilHttp.getLocale(request));  request.setAttribute("_EVENT_MESSAGE_",sucMsg);  return "success";}  }
class C{  public static boolean isMainScreenActivated(Context context){  return SharedPrefsUtils.getBoolean(Constants.SHARED_PREFS.KEY_FLAG_MAINSCREEN,false,context);}  }
class C{  public static List<Issue> returnDASTProxyRelativeUrlIssueList(final Report reportFromWhichIssuesToBeTransformed){  List<Issue> issuesToBeTransformed=reportFromWhichIssuesToBeTransformed.getIssues();  List<Issue> finalIssuesList=new LinkedList<Issue>();  for (  Issue issue : issuesToBeTransformed) {    String dastProxyRelativeBugUIUrl=RootConfiguration.getProperties().getProperty(AppScanConstants.PROPERTIES_OPERATING_ENVIRONMENT_BASE_URL_IDENTIFIER) + "issue?report=" + reportFromWhichIssuesToBeTransformed.getReportId()+ "&&issue="+ issue.getIssuePrimaryKey().getIssueId();    issue.setDastProxyBugUIIssueUrl(dastProxyRelativeBugUIUrl);    finalIssuesList.add(issue);  }  return finalIssuesList;}  }
class C{  @deprecated public OverlayBundle(String[] baseNames,Locale locale){  this.baseNames=baseNames;  this.locale=locale;  this.bundles=new ResourceBundle[baseNames.length];}  }
class C{  public String process(Item seg) throws ProcessException {  return segCodaCtype(seg,"f");}  }
class C{  public static LineString lineString(Collection<Point> points){  return lineString(points.toArray(new Point[points.size()]));}  }
class C{  public DHCPMessage(byte[] ibuf,InetAddress inServername,int inPort){  initialize();  internalize(ibuf);  this.destination_IP=inServername;  this.gPort=inPort;}  }
class C{  public Object nextMeta() throws JSONException {  char c;  char q;  do {    c=next();  } while (Character.isWhitespace(c));switch (c) {case 0:    throw syntaxError("Misshaped meta tag");case '<':  return XML.LT;case '>':return XML.GT;case '/':return XML.SLASH;case '=':return XML.EQ;case '!':return XML.BANG;case '?':return XML.QUEST;case '"':case '\'':q=c;for (; ; ) {c=next();if (c == 0) {throw syntaxError("Unterminated string");}if (c == q) {return Boolean.TRUE;}}default :for (; ; ) {c=next();if (Character.isWhitespace(c)) {return Boolean.TRUE;}switch (c) {case 0:case '<':case '>':case '/':case '=':case '!':case '?':case '"':case '\'':back();return Boolean.TRUE;}}}}  }
class C{  @PluginFactory public static PigeonAsyncAppender createAppender(@PluginElement("AppenderRef") final AppenderRef[] appenderRefs,@PluginAttribute("errorRef") @PluginAliases("error-ref") final String errorRef,@PluginAttribute(value="blocking",defaultBoolean=true) final boolean blocking,@PluginAttribute(value="bufferSize",defaultInt=DEFAULT_QUEUE_SIZE) final int size,@PluginAttribute("name") final String name,@PluginAttribute(value="includeLocation",defaultBoolean=false) final boolean includeLocation,@PluginElement("Filter") final Filter filter,@PluginConfiguration final Configuration config,@PluginAttribute(value="ignoreExceptions",defaultBoolean=true) final boolean ignoreExceptions){  if (name == null) {    LOGGER.error("No name provided for AsyncAppender");    return null;  }  if (appenderRefs == null) {    LOGGER.error("No appender references provided to AsyncAppender {}",name);  }  return new PigeonAsyncAppender(name,filter,appenderRefs,errorRef,size,blocking,ignoreExceptions,config,includeLocation);}  }
class C{  @Override public Object clone(){  return GenericPK.create(this);}  }
class C{  public void closeDriver(){  if (camera != null) {    FlashlightManager.disableFlashlight();    camera.release();    camera=null;  }}  }
class C{  public FeatureVector readFeatureVector(int currentUnitIndex,DataInput input) throws IOException {  byte[] bytes=new byte[numByteFeatures];  input.readFully(bytes);  short[] shorts=new short[numShortFeatures];  for (int i=0; i < shorts.length; i++) {    shorts[i]=input.readShort();  }  float[] floats=new float[numContinuousFeatures];  for (int i=0; i < floats.length; i++) {    floats[i]=input.readFloat();  }  return new FeatureVector(bytes,shorts,floats,currentUnitIndex);}  }
class C{  public NIOConfiguration(){  super();}  }
class C{  public static void decodeFileToFile(String infile,String outfile) throws java.io.IOException {  byte[] decoded=Base64.decodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(decoded);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  @Override public void onUpdateCommandTag(final ISourceCommandTag sourceCommandTag,final ISourceCommandTag oldSourceCommandTag,final ChangeReport changeReport){  if (hasSourceTimeoutChanged(sourceCommandTag,oldSourceCommandTag)) {    changeReport.appendError("Source timeout changes might affect " + "the equipment. But there is no implementation. That " + "means you have to restart the DAQ.");    changeReport.setState(CHANGE_STATE.REBOOT);  }  if (hasNameChanged(sourceCommandTag,oldSourceCommandTag)) {    changeReport.appendError("Name changes might affect " + "the equipment. But there is no implementation. That " + "means you have to restart the DAQ.");    changeReport.setState(CHANGE_STATE.REBOOT);  }  if (hasHardwareAddressChanged(sourceCommandTag.getHardwareAddress(),oldSourceCommandTag.getHardwareAddress())) {    changeReport.appendError("Changes to the hardware address might affect " + "the equipment. But there is no implementation. That " + "means you have to restart the DAQ.");    changeReport.setState(CHANGE_STATE.REBOOT);  }  if (!changeReport.getState().equals(CHANGE_STATE.REBOOT)) {    changeReport.setState(CHANGE_STATE.SUCCESS);  }}  }
class C{  @Override protected void initData(){}  }
class C{  public void onNotify(File path,SVNNodeKind kind){  this.path=path;  if (monitor != null) {    monitor.worked(1);    subTask();  }}  }
class C{  public static String toString(InputStream input,String encoding) throws IOException {  return toString(input,Charsets.toCharset(encoding));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Poison_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200925,skilltarget,skillcaster,skillname);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_DICE_CUSTOM_OTHER(String value0,int num1,int num2){  return new SM_SYSTEM_MESSAGE(1400127,value0,num1,num2);}  }
class C{  public void releaseScan() throws SAException {  if (_curValueList != null) {    _curValueList.releaseScan();    _curValueList=null;  }}  }
class C{  public static byte[] packHeader(byte cmd,long pkg_len,byte errno) throws UnsupportedEncodingException {  byte[] header;  byte[] hex_len;  header=new byte[FDFS_PROTO_PKG_LEN_SIZE + 2];  Arrays.fill(header,(byte)0);  hex_len=ProtoCommon.long2buff(pkg_len);  System.arraycopy(hex_len,0,header,0,hex_len.length);  header[PROTO_HEADER_CMD_INDEX]=cmd;  header[PROTO_HEADER_STATUS_INDEX]=errno;  return header;}  }
class C{  protected final int computeHashCode(){  int hash=17;  hash=hash * 31 + this.collidable.hashCode();  hash=hash * 31 + this.fixture.hashCode();  return hash;}  }
class C{  public Requestor(String[] groups,int port,boolean delayFlag) throws IOException {  super("GS-multicast-discovery-request");  setDaemon(true);  sock=new MulticastSocket(Constants.getDiscoveryPort());  sock.setTimeToLive(multicastRequestConstraints.getMulticastTimeToLive(Constants.getTtl()));  responsePort=port;  this.groups=groups == null ? new String[0] : groups;  this.delayFlag=delayFlag;}  }
class C{  public String toLocaleId(){  return qualifier == ANY_QUALIFIER ? "" : qualifier.getTag();}  }
class C{  public static Map<String,Object> releaseOrderPaymentPreference(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  GenericValue userLogin=(GenericValue)context.get("userLogin");  String orderPaymentPreferenceId=(String)context.get("orderPaymentPreferenceId");  Locale locale=(Locale)context.get("locale");  Map<String,Object> result=ServiceUtil.returnSuccess();  GenericValue paymentPref=null;  try {    paymentPref=EntityQuery.use(delegator).from("OrderPaymentPreference").where("orderPaymentPreferenceId",orderPaymentPreferenceId).queryOne();  } catch (  GenericEntityException e) {    Debug.logWarning(e,"Problem getting OrderPaymentPreference for orderPaymentPreferenceId " + orderPaymentPreferenceId,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingProblemGettingOrderPaymentPreferences",locale) + " " + orderPaymentPreferenceId);  }  if (paymentPref == null) {    Debug.logWarning("Could not find OrderPaymentPreference with orderPaymentPreferenceId: " + orderPaymentPreferenceId,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingProblemGettingOrderPaymentPreferences",locale) + " " + orderPaymentPreferenceId);  }  GenericValue orderHeader=null;  String orderId=paymentPref.getString("orderId");  try {    orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",orderId).queryOne();  } catch (  GenericEntityException e) {    Debug.logWarning(e,"Problem getting OrderHeader for orderId " + orderId,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceOrder,"OrderOrderNotFound",UtilMisc.toMap("orderId",orderId),locale));  }  if (orderHeader == null) {    Debug.logWarning("Could not find OrderHeader with orderId: " + orderId + "; not processing payments.",module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceOrder,"OrderOrderNotFound",UtilMisc.toMap("orderId",orderId),locale));  }  OrderReadHelper orh=new OrderReadHelper(orderHeader);  String currency=orh.getCurrency();  String serviceName=null;  String paymentConfig=null;  String paymentGatewayConfigId=null;  GenericValue paymentSettings=getPaymentSettings(orderHeader,paymentPref,RELEASE_SERVICE_TYPE,false);  if (paymentSettings != null) {    String customMethodId=paymentSettings.getString("paymentCustomMethodId");    if (UtilValidate.isNotEmpty(customMethodId)) {      serviceName=getPaymentCustomMethod(orh.getOrderHeader().getDelegator(),customMethodId);    }    if (UtilValidate.isEmpty(serviceName)) {      serviceName=paymentSettings.getString("paymentService");    }    paymentConfig=paymentSettings.getString("paymentPropertiesPath");    paymentGatewayConfigId=paymentSettings.getString("paymentGatewayConfigId");    if (serviceName == null) {      Debug.logWarning("No payment release service for - " + paymentPref.getString("paymentMethodTypeId"),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resourceOrder,"AccountingTroubleCallingReleaseOrderPaymentPreferenceService",locale) + " " + paymentPref.getString("paymentMethodTypeId"));    }  } else {    Debug.logWarning("No payment release settings found for - " + paymentPref.getString("paymentMethodTypeId"),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceOrder,"AccountingTroubleCallingReleaseOrderPaymentPreferenceService",locale) + " " + paymentPref.getString("paymentMethodTypeId"));  }  if (UtilValidate.isEmpty(paymentConfig)) {    paymentConfig="payment.properties";  }  GenericValue authTransaction=PaymentGatewayServices.getAuthTransaction(paymentPref);  Map<String,Object> releaseContext=FastMap.newInstance();  releaseContext.put("orderPaymentPreference",paymentPref);  releaseContext.put("releaseAmount",authTransaction.getBigDecimal("amount"));  releaseContext.put("currency",currency);  releaseContext.put("paymentConfig",paymentConfig);  releaseContext.put("paymentGatewayConfigId",paymentGatewayConfigId);  releaseContext.put("userLogin",userLogin);  Map<String,Object> releaseResult=null;  try {    releaseResult=dispatcher.runSync(serviceName,releaseContext,TX_TIME,true);  } catch (  GenericServiceException e) {    Debug.logError(e,"Problem releasing payment",module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceOrder,"AccountingTroubleCallingReleaseOrderPaymentPreferenceService",locale));  }  if (releaseResult != null && !ServiceUtil.isError(releaseResult)) {    Map<String,Object> releaseResRes;    try {      ModelService model=dctx.getModelService("processReleaseResult");      releaseResult.put("orderPaymentPreference",paymentPref);      releaseResult.put("userLogin",userLogin);      Map<String,Object> resCtx=model.makeValid(releaseResult,ModelService.IN_PARAM);      releaseResRes=dispatcher.runSync(model.name,resCtx);    } catch (    GenericServiceException e) {      Debug.logError(e,"Trouble processing the release results",module);      return ServiceUtil.returnError(UtilProperties.getMessage(resourceOrder,"AccountingTroubleCallingReleaseOrderPaymentPreferenceService",locale) + " " + e.getMessage());    }    if (releaseResRes != null && ServiceUtil.isError(releaseResRes)) {      return ServiceUtil.returnError(ServiceUtil.getErrorMessage(releaseResRes));    }  } else   if (ServiceUtil.isError(releaseResult)) {    saveError(dispatcher,userLogin,paymentPref,releaseResult,RELEASE_SERVICE_TYPE,"PGT_RELEASE");    result=ServiceUtil.returnError(ServiceUtil.getErrorMessage(releaseResult));  }  return result;}  }
class C{  private static WritableWorkbook openWorkbook(OutputStream outputStream) throws IOException {  WorkbookSettings ws=new WorkbookSettings();  ws.setEncoding("UTF-8");  return Workbook.createWorkbook(outputStream,ws);}  }
class C{  private List<String> wordEdits(String word){  List<String> closeWords=new ArrayList<String>();  for (int i=1; i < word.length() + 1; i++) {    for (char character='a'; character <= 'z'; character++) {      StringBuilder sb=new StringBuilder(word);      sb.insert(i,character);      closeWords.add(sb.toString());    }    if (closeWords.size() > this.VARIATIONSCOUNT) {      return closeWords;    }  }  for (int i=1; i < word.length(); i++) {    for (char character='a'; character <= 'z'; character++) {      StringBuilder sb=new StringBuilder(word);      sb.setCharAt(i,character);      closeWords.add(sb.toString());      sb=new StringBuilder(word);      sb.deleteCharAt(i);      closeWords.add(sb.toString());    }    if (closeWords.size() > this.VARIATIONSCOUNT) {      return closeWords;    }  }  return closeWords;}  }
class C{  public GeometricDistribution(double p) throws MathIllegalArgumentException {  if (p <= 0 || p > 1) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.OUT_OF_RANGE_LEFT,p,0,1);  }  probabilityOfSuccess=p;  logProbabilityOfSuccess=FastMath.log(p);  log1mProbabilityOfSuccess=FastMath.log1p(-p);}  }
class C{  public void loadStreamConf(Optional<DistributedLogConfiguration> streamConfiguration){  if (!streamConfiguration.isPresent()) {    return;  }  ArrayList<Object> ignoredSettings=new ArrayList<Object>();  Iterator iterator=streamConfiguration.get().getKeys();  while (iterator.hasNext()) {    Object setting=iterator.next();    if (setting instanceof String && streamSettings.contains(setting)) {      String settingStr=(String)setting;      setProperty(settingStr,streamConfiguration.get().getProperty(settingStr));    } else {      ignoredSettings.add(setting);    }  }  if (LOG.isWarnEnabled() && !ignoredSettings.isEmpty()) {    LOG.warn("invalid stream configuration override(s): {}",StringUtils.join(ignoredSettings,";"));  }}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public void readRow() throws CarbonSortKeyAndGroupByException {  if (prefetch) {    fillDataForPrefetch();  } else   if (isSortTempFileCompressionEnabled) {    if (bufferRowCounter >= bufferSize) {      try {        new DataFetcher(false).call();        bufferRowCounter=0;      } catch (      Exception e) {        LOGGER.error(e);        throw new CarbonSortKeyAndGroupByException(tempFile + " Problem while reading",e);      }    }    prefetchRecordsProceesed++;    returnRow=currentBuffer[bufferRowCounter++];  } else {    Object[] outRow=getRowFromStream();    this.returnRow=outRow;  }}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  executeImmediately(getSyntax());}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GUILD_EVENT_LOSE_FIELDARTIFACT(String value1,String value0){  return new SM_SYSTEM_MESSAGE(1400302,value1,value0);}  }
class C{  public static int binaryLogUp(long n_){  int k=0;  while ((1L << k) < n_)   k++;  return k;}  }
class C{  public static void ellipse(double x,double y,double semiMajorAxis,double semiMinorAxis){  if (!(semiMajorAxis >= 0))   throw new IllegalArgumentException("ellipse semimajor axis must be nonnegative");  if (!(semiMinorAxis >= 0))   throw new IllegalArgumentException("ellipse semiminor axis must be nonnegative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * semiMajorAxis);  double hs=factorY(2 * semiMinorAxis);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.draw(new Ellipse2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  public static void main(String[] args){  CharMap4 charMap4=new CharMap4();  charMap4.loadConfig();  charMap4.setTTFString("ttf://Symbol#221");  charMap4.showDialog();}  }
class C{  public void disposeRepository(ISVNRepositoryLocation repository) throws SVNException {  ((SVNRepositoryLocation)repository).dispose();  removeFromRepositoriesCache(repository);}  }
class C{  protected void onPrepareRingtonePickerIntent(Intent ringtonePickerIntent){  ringtonePickerIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_EXISTING_URI,onRestoreRingtone());  ringtonePickerIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_SHOW_DEFAULT,mShowDefault);  if (mShowDefault) {    ringtonePickerIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_DEFAULT_URI,RingtoneManager.getDefaultUri(getRingtoneType()));  }  ringtonePickerIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_SHOW_SILENT,mShowSilent);  ringtonePickerIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_TYPE,mRingtoneType);  ringtonePickerIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_TITLE,getTitle());}  }
class C{  public synchronized long size(){  return size;}  }
class C{  public CoreDocumentImpl(DocumentType doctype,boolean grammarAccess){  this(grammarAccess);  if (doctype != null) {    DocumentTypeImpl doctypeImpl;    try {      doctypeImpl=(DocumentTypeImpl)doctype;    } catch (    ClassCastException e) {      String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"WRONG_DOCUMENT_ERR",null);      throw new DOMException(DOMException.WRONG_DOCUMENT_ERR,msg);    }    doctypeImpl.ownerDocument=this;    appendChild(doctype);  }}  }
class C{  public void applyEffect(){  if (isFearEffect()) {    if (getEffected().isInState(CreatureState.GLIDING)) {      if (getEffected() instanceof Player) {        if (!((Player)getEffected()).isInFlyingMode()) {          ((Player)getEffected()).getFlyController().onStopGliding(true);          return;        }      }    }  }  if (effectHate != 0) {    if (getEffected() instanceof Npc && !isDelayedDamage() && !isPetOrder()&& !isSummoning()) {      getEffected().getAggroList().addHate(effector,1);    }    effector.getController().broadcastHate(effectHate);  }  if (skillTemplate.getEffects() == null || successEffects.isEmpty()) {    return;  }  for (  EffectTemplate template : successEffects.values()) {    if (getEffected() != null) {      if (getEffected().getLifeStats().isAlreadyDead() && !skillTemplate.hasResurrectEffect()) {        continue;      }    }    template.applyEffect(this);    template.startSubEffect(this);  }}  }
class C{  public static Object[] ordinalArray(TupleSet tuples,String field){  return ordinalArray(tuples,field,DefaultLiteralComparator.getInstance());}  }
class C{  public void toAll(){  toAll(OpenModLoader.getSidedHandler().getServer().getPlayerList().getPlayerList());}  }
class C{  @Override protected void onPostExecute(Boolean result){  mAdapter.notifyDataSetChanged();  mCurrentDialog.dismiss();  mCurrentDialog=null;  findViewById(R.id.ok).setEnabled(true);  if (result) {    Toast t=Toast.makeText(ErrorsWhileCopyingHandlerActivity.this,getString(R.string.foreign_files_success),Toast.LENGTH_LONG);    t.show();    finish();  } else {    Toast t=Toast.makeText(ErrorsWhileCopyingHandlerActivity.this,getString(R.string.foreign_files_fail),Toast.LENGTH_LONG);    t.show();  }}  }
class C{  public String codeOwner(List<CodeOwner> codeOwners){  long currentUnix=System.currentTimeMillis() / 1000L;  double best=0;  String owner="Unknown";  for (  CodeOwner codeOwner : codeOwners) {    double age=(currentUnix - codeOwner.getMostRecentUnixCommitTimestamp()) / 60 / 60;    double calc=codeOwner.getNoLines() / Math.pow((age),1.8);    if (calc > best) {      best=calc;      owner=codeOwner.getName();    }  }  return owner;}  }
class C{  public static double ssTotal(double[] residuals,double[] targetAttribute){  return ssReg(residuals,targetAttribute) + ssError(residuals,targetAttribute);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  verify(reqs);  verify(prefs);  for (int i=prefs.length; --i >= 0; ) {    if (Constraint.contains(reqs,reqs.length,prefs[i])) {      throw new InvalidObjectException("cannot create constraint with redundant elements");    }  }  setRelative(reqs,REL_REQS);  setRelative(prefs,REL_REQS);}  }
class C{  public IntArrayList values(){  return values;}  }
class C{  public DocumentNGramDistroGraph[] intersectAndDeltaDistroGraph(DocumentNGramDistroGraph dgOtherGraph){  DocumentNGramDistroGraph dgUnion=(DocumentNGramDistroGraph)clone();  dgUnion.mergeDistroGraph(dgOtherGraph);  DocumentNGramDistroGraph[] res=new DocumentNGramDistroGraph[2];  DocumentNGramDistroGraph dgIntersection=intersectDistroGraph(dgOtherGraph);  res[0]=dgIntersection;  for (int iCurLvl=MinSize; iCurLvl <= MaxSize; iCurLvl++) {    UniqueVertexGraph gUnion=dgUnion.getGraphLevelByNGramSize(iCurLvl);    UniqueVertexGraph gIntersection=dgIntersection.getGraphLevelByNGramSize(iCurLvl);    EdgeCachedLocator eclLocator=new EdgeCachedLocator(10);    if (gIntersection == null)     continue;    java.util.Iterator iIter=gIntersection.getEdgeSet().iterator();    while (iIter.hasNext()) {      WeightedEdge weCurItem=(WeightedEdge)iIter.next();      Edge eEdge=eclLocator.locateDirectedEdgeInGraph(gUnion,weCurItem.getVertexA(),weCurItem.getVertexB());      if (eEdge != null)       try {        gUnion.removeEdge(eEdge);        dgUnion.getEdgesToDistros().remove(eEdge);      } catch (      Exception ex) {        ex.printStackTrace();      }    }  }  res[1]=dgUnion;  return res;}  }
class C{  @Override public void write(byte[] b,int off,int len){  if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return;  }synchronized (this) {    int newcount=count + len;    int remaining=len;    int inBufferPos=count - filledBufferSum;    while (remaining > 0) {      int part=Math.min(remaining,currentBuffer.length - inBufferPos);      System.arraycopy(b,off + len - remaining,currentBuffer,inBufferPos,part);      remaining-=part;      if (remaining > 0) {        needNewBuffer(newcount);        inBufferPos=0;      }    }    count=newcount;  }}  }
class C{  private void appendWithMerge(Interval interval){  if (interval.toDurationMillis() == 0) {    return;  }  if (isEmpty()) {    addLast(interval);    return;  }  final Interval previous=peekLast();  if (interval.getStart().isBefore(previous.getStart())) {    mergeInner(interval);    return;  }  if (previous.gap(interval) != null) {    addLast(interval);    return;  }  removeLast();  Interval newEnd=new Interval(Math.min(previous.getStartMillis(),interval.getStartMillis()),Math.max(previous.getEndMillis(),interval.getEndMillis()));  addLast(newEnd);}  }
class C{  public static String randomID(){  return System.currentTimeMillis() + "";}  }
class C{  public ByteArray(){}  }
class C{  public boolean equals(Object o){  if (!(o instanceof Matrix3f) || o == null) {    return false;  }  if (this == o) {    return true;  }  Matrix3f comp=(Matrix3f)o;  if (Float.compare(m00,comp.m00) != 0) {    return false;  }  if (Float.compare(m01,comp.m01) != 0) {    return false;  }  if (Float.compare(m02,comp.m02) != 0) {    return false;  }  if (Float.compare(m10,comp.m10) != 0) {    return false;  }  if (Float.compare(m11,comp.m11) != 0) {    return false;  }  if (Float.compare(m12,comp.m12) != 0) {    return false;  }  if (Float.compare(m20,comp.m20) != 0) {    return false;  }  if (Float.compare(m21,comp.m21) != 0) {    return false;  }  if (Float.compare(m22,comp.m22) != 0) {    return false;  }  return true;}  }
class C{  public StartupException(String msg){  super(msg);}  }
class C{  protected boolean isFileExistsForGivenColumn(DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier){  PathService pathService=CarbonCommonFactory.getPathService();  CarbonTablePath carbonTablePath=pathService.getCarbonTablePath(dictionaryColumnUniqueIdentifier.getColumnIdentifier(),carbonStorePath,dictionaryColumnUniqueIdentifier.getCarbonTableIdentifier());  String dictionaryFilePath=carbonTablePath.getDictionaryFilePath(dictionaryColumnUniqueIdentifier.getColumnIdentifier().getColumnId());  String dictionaryMetadataFilePath=carbonTablePath.getDictionaryMetaFilePath(dictionaryColumnUniqueIdentifier.getColumnIdentifier().getColumnId());  return CarbonUtil.isFileExists(dictionaryFilePath) && CarbonUtil.isFileExists(dictionaryMetadataFilePath);}  }
class C{  public boolean load(@NotNull Configuration configuration,@NotNull Palette palette,boolean reload){  return load(configuration,palette,reload,null,null);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_MY_ATTACK(int num1,String value0){  return new SM_SYSTEM_MESSAGE(1200000,num1,value0);}  }
class C{  protected final void fireColumnEvent(int idx,boolean prev){  Object[] lstnrs=m_listeners.getArray();  for (int i=0; i < lstnrs.length; ++i)   ((ColumnListener)lstnrs[i]).columnChanged(this,idx,prev);}  }
class C{  public void recover(TxnManagerTransaction tmt) throws CannotRecoverException {  try {    for (int i=0; i < parts.length; i++) {      tmt.add(parts[i]);    }    tmt.modifyTxnState(ABORTED);  } catch (  InternalManagerException ime) {    throw new CannotRecoverException("AbortRecord: recover: " + ime.getMessage());  }  if (logger.isLoggable(Level.FINEST)) {    logger.log(Level.FINEST,"AbortJob:recover recovered");  }}  }
class C{  private Slot insertSlotAt(final int position,@NonNull final Slot slot){  if (position < 0 || size < position) {    throw new IndexOutOfBoundsException("New slot position should be inside the mask. Or on the tail (position = size)");  }  final Slot toInsert=new Slot(slot);  Slot currentSlot=getSlot(position);  Slot leftNeighbour;  Slot rightNeighbour=null;  if (currentSlot == null) {    leftNeighbour=lastSlot;  } else {    leftNeighbour=currentSlot.getPrevSlot();    rightNeighbour=currentSlot;  }  toInsert.setNextSlot(rightNeighbour);  toInsert.setPrevSlot(leftNeighbour);  if (rightNeighbour != null) {    rightNeighbour.setPrevSlot(toInsert);  }  if (leftNeighbour != null) {    leftNeighbour.setNextSlot(toInsert);  }  if (position == 0) {    firstSlot=toInsert;  } else   if (position == size) {    lastSlot=toInsert;  }  size++;  return toInsert;}  }
class C{  private void initResourcesIfNecessary(){  if (centerDrawable == null) {    centerDrawable=getContext().getResources().getDrawable(wheelForeground);  }  if (topShadow == null) {    topShadow=new GradientDrawable(Orientation.TOP_BOTTOM,SHADOWS_COLORS);  }  if (bottomShadow == null) {    bottomShadow=new GradientDrawable(Orientation.BOTTOM_TOP,SHADOWS_COLORS);  }  setBackgroundResource(wheelBackground);}  }
class C{  @Override public double[] makeDensityTestValues(){  return new double[]{0d,0.00396825396825,0.0992063492063,0.396825396825,0.396825396825,0.0992063492063,0.00396825396825,0d};}  }
class C{  public CreateSiteWindow selectTemplate(String exactTemplateName){  WebElement template=currentWindow.findElement(By.xpath(".//div[contains(@class, " + "'template-title') and text() = \"" + exactTemplateName + "\"]"));  template.click();  return this;}  }
class C{  static public ObjectInputStream createArtifactObjectInputStream(String pathname) throws IOException {  return new ObjectInputStream(createArtifactInputStream(pathname));}  }
class C{  @PUT @Path("/{applicationName}/priorities") @Produces(APPLICATION_JSON) @ApiOperation(value="Create global priority list for an application",notes="Experiments can only be placed in a priority list in DRAFT, RUNNING, and PAUSED states.") @Timed public Response createPriorities(@PathParam("applicationName") @ApiParam(value="Application Name") final Application.Name applicationName,@ApiParam(required=true,defaultValue=DEFAULT_MODEXP) final ExperimentIDList experimentIDList,@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String authorizationHeader){  authorization.checkUserPermissions(authorization.getUser(authorizationHeader),applicationName,UPDATE);  priorities.createPriorities(applicationName,experimentIDList,true);  return httpHeader.headers(NO_CONTENT).build();}  }
class C{  public final java_cup.runtime.Symbol CUP$parser$do_action(int CUP$parser$act_num,java_cup.runtime.lr_parser CUP$parser$parser,java.util.Stack CUP$parser$stack,int CUP$parser$top) throws java.lang.Exception {  java_cup.runtime.Symbol CUP$parser$result;switch (CUP$parser$act_num) {case 198:{      Object RESULT=null;      int nameleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 5)).left;      int nameright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 5)).right;      String name=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 5)).value;      int attrleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;      int attrright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;      Object attr=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;      RESULT=classFile.makeAnnotElem(name,'@',attr);      CUP$parser$result=new java_cup.runtime.Symbol(80,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 7)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);    }  return CUP$parser$result;case 197:{  Object RESULT=null;  int nameleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 5)).left;  int nameright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 5)).right;  String name=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 5)).value;  int listleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;  int listright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;  Object list=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;  RESULT=classFile.makeArrayElem(name,'[',list);  CUP$parser$result=new java_cup.runtime.Symbol(80,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 7)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 196:{Object RESULT=null;int nameleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;int nameright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;String name=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;int descleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int descright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;String desc=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;RESULT=classFile.makeClassElem(name,'c',desc);CUP$parser$result=new java_cup.runtime.Symbol(80,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 4)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 195:{Object RESULT=null;int nameleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;int nameright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;String name=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;int tnameleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;int tnameright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;String tname=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;int cnameleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int cnameright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;String cname=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;RESULT=classFile.makeEnumElem(name,'e',tname,cname);CUP$parser$result=new java_cup.runtime.Symbol(80,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 5)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 194:{Object RESULT=null;int nameleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;int nameright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;String name=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;int valleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int valright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;String val=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;RESULT=classFile.makeConstantElem(name,'s',val);CUP$parser$result=new java_cup.runtime.Symbol(80,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 4)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 193:{Object RESULT=null;int nameleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;int nameright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;String name=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;int valleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int valright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;Object val=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;RESULT=classFile.makeConstantElem(name,'D',val);CUP$parser$result=new java_cup.runtime.Symbol(80,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 4)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 192:{Object RESULT=null;int nameleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;int nameright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;String name=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;int valleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int valright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;Object val=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;RESULT=classFile.makeConstantElem(name,'F',val);CUP$parser$result=new java_cup.runtime.Symbol(80,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 4)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 191:{Object RESULT=null;int nameleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;int nameright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;String name=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;int valleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int valright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;Object val=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;RESULT=classFile.makeConstantElem(name,'J',val);CUP$parser$result=new java_cup.runtime.Symbol(80,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 4)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 190:{Object RESULT=null;int nameleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;int nameright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;String name=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;int valleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int valright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;Integer val=(Integer)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;RESULT=classFile.makeConstantElem(name,'Z',val);CUP$parser$result=new java_cup.runtime.Symbol(80,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 4)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 189:{Object RESULT=null;int nameleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;int nameright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;String name=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;int valleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int valright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;Integer val=(Integer)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;RESULT=classFile.makeConstantElem(name,'C',val);CUP$parser$result=new java_cup.runtime.Symbol(80,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 4)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 188:{Object RESULT=null;int nameleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;int nameright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;String name=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;int valleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int valright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;Integer val=(Integer)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;RESULT=classFile.makeConstantElem(name,'B',val);CUP$parser$result=new java_cup.runtime.Symbol(80,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 4)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 187:{Object RESULT=null;int nameleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;int nameright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;String name=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;int valleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int valright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;Integer val=(Integer)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;RESULT=classFile.makeConstantElem(name,'S',val);CUP$parser$result=new java_cup.runtime.Symbol(80,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 4)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 186:{Object RESULT=null;int nameleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;int nameright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;String name=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;int valleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int valright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;Integer val=(Integer)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;RESULT=classFile.makeConstantElem(name,'I',val);CUP$parser$result=new java_cup.runtime.Symbol(80,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 4)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 185:{Object RESULT=null;int elemleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int elemright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;Object elem=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;RESULT=classFile.makeNewElemValPairList(elem);CUP$parser$result=new java_cup.runtime.Symbol(77,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 184:{Object RESULT=null;int listleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int listright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;Object list=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;int elemleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int elemright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;Object elem=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;RESULT=classFile.mergeNewElemValPair(list,elem);CUP$parser$result=new java_cup.runtime.Symbol(77,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 183:{Object RESULT=null;RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(87,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 182:{Object RESULT=null;int listleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int listright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;Object list=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;RESULT=list;CUP$parser$result=new java_cup.runtime.Symbol(87,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 181:{Object RESULT=null;int annotation_typeleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 5)).left;int annotation_typeright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 5)).right;String annotation_type=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 5)).value;int elemsleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;int elemsright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;Object elems=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;RESULT=classFile.makeAnnotation(annotation_type,elems);CUP$parser$result=new java_cup.runtime.Symbol(76,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 6)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 180:{Object RESULT=null;int elemleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int elemright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;Object elem=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;RESULT=classFile.makeNewAnnotationList(elem);CUP$parser$result=new java_cup.runtime.Symbol(75,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 179:{Object RESULT=null;int listleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int listright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;Object list=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;int elemleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int elemright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;Object elem=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;RESULT=classFile.mergeNewAnnotation(list,elem);CUP$parser$result=new java_cup.runtime.Symbol(75,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 178:{Object RESULT=null;RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(86,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 177:{Object RESULT=null;int listleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int listright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;Object list=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;RESULT=list;CUP$parser$result=new java_cup.runtime.Symbol(86,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 176:{Object RESULT=null;int tvalleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 5)).left;int tvalright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 5)).right;Object tval=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 5)).value;int listleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;int listright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;Object list=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;RESULT=classFile.makeVisibilityAnnotation(tval,list);CUP$parser$result=new java_cup.runtime.Symbol(74,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 5)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 175:{Object RESULT=null;RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(85,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 174:{Object RESULT=null;int attrleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int attrright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;Object attr=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;RESULT=attr;CUP$parser$result=new java_cup.runtime.Symbol(85,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 173:{Object RESULT=null;RESULT="RuntimeInvisibleParameter";CUP$parser$result=new java_cup.runtime.Symbol(84,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 172:{Object RESULT=null;RESULT="RuntimeVisibleParameter";CUP$parser$result=new java_cup.runtime.Symbol(84,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 171:{Object RESULT=null;RESULT="RuntimeInvisible";CUP$parser$result=new java_cup.runtime.Symbol(73,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 170:{Object RESULT=null;RESULT="RuntimeVisible";CUP$parser$result=new java_cup.runtime.Symbol(73,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 169:{Object RESULT=null;RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(5,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 168:{Object RESULT=null;int sigleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int sigright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;String sig=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;RESULT=sig;CUP$parser$result=new java_cup.runtime.Symbol(5,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 167:{Object RESULT=null;RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(4,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 166:{Object RESULT=null;RESULT="deprecated";CUP$parser$result=new java_cup.runtime.Symbol(4,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 165:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(67,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 164:{Object RESULT=null;int cleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;int cright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;String c=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;int mleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;int mright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;String m=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;int sleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int sright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;String s=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;classFile.addEnclMethAttr(c,m,s);CUP$parser$result=new java_cup.runtime.Symbol(67,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 4)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 163:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(66,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 162:{Object RESULT=null;classFile.addClassSynthAttr();CUP$parser$result=new java_cup.runtime.Symbol(66,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 161:{Object RESULT=null;classFile.endInnerClassAttr();CUP$parser$result=new java_cup.runtime.Symbol(65,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 160:{Object RESULT=null;int aleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 6)).left;int aright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 6)).right;String a=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 6)).value;int bleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 5)).left;int bright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 5)).right;String b=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 5)).value;int cleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 4)).left;int cright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 4)).right;String c=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 4)).value;int dleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;int dright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;Short d=(Short)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;classFile.addInnerClassSpec(a,b,c,(short)d.intValue());CUP$parser$result=new java_cup.runtime.Symbol(64,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 7)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 159:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(63,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 158:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(63,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 157:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(62,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 156:{Object RESULT=null;classFile.addInnerClassAttr();CUP$parser$result=new java_cup.runtime.Symbol(62,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 155:{Object RESULT=null;int wleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;int wright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;String w=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;int vleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int vright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;String v=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;byte[] data=Base64.decode(v.toCharArray());classFile.addGenericAttrToField(w,data);CUP$parser$result=new java_cup.runtime.Symbol(61,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 154:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(60,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 153:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(60,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 152:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(59,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 151:{Object RESULT=null;int wleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;int wright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;String w=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;int vleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int vright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;String v=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;byte[] data=Base64.decode(v.toCharArray());classFile.addGenericAttrToMethod(w,data);CUP$parser$result=new java_cup.runtime.Symbol(57,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 150:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(56,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 149:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(56,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 148:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(55,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 147:{Object RESULT=null;int wleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;int wright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;String w=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;int vleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int vright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;String v=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;byte[] data=Base64.decode(v.toCharArray());classFile.addGenericAttrToClass(new GenericAttr(w,data));CUP$parser$result=new java_cup.runtime.Symbol(53,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 146:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(52,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 145:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(52,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 144:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(51,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 143:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(51,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 142:{Object RESULT=null;int wleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int wright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;String w=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;classFile.endTableswitch(w);CUP$parser$result=new java_cup.runtime.Symbol(44,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 141:{Object RESULT=null;int wleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int wright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;String w=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;classFile.addTableswitch(w);CUP$parser$result=new java_cup.runtime.Symbol(45,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 140:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(47,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 139:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(47,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 138:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(46,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 137:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(46,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 136:{Object RESULT=null;int lowleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;int lowright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;Integer low=(Integer)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;int highleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int highright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;Integer high=(Integer)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;classFile.newTableswitch(low.intValue(),high.intValue());CUP$parser$result=new java_cup.runtime.Symbol(42,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 135:{Object RESULT=null;int lowleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int lowright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;Integer low=(Integer)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;classFile.newTableswitch(low.intValue());CUP$parser$result=new java_cup.runtime.Symbol(42,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 134:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(41,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 133:{Object RESULT=null;int wleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int wright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;String w=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;classFile.endLookupswitch(w);CUP$parser$result=new java_cup.runtime.Symbol(27,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 132:{Object RESULT=null;int ileft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;int iright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;Integer i=(Integer)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;int wleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int wright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;String w=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;classFile.addLookupswitch(i.intValue(),w);CUP$parser$result=new java_cup.runtime.Symbol(28,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 131:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(30,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 130:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(30,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 129:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(29,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 128:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(29,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 127:{Object RESULT=null;classFile.newLookupswitch();CUP$parser$result=new java_cup.runtime.Symbol(26,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 126:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(25,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 125:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(11,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 124:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(11,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 123:{Object RESULT=null;int ileft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int iright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;String i=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;int nleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int nright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;String n=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;classFile.plantString(i,n);CUP$parser$result=new java_cup.runtime.Symbol(35,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 122:{Object RESULT=null;int ileft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;int iright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;String i=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;int n1left=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;int n1right=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;String n1=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;int n2left=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int n2right=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;String n2=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;int n3left=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int n3right=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;String n3=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;classFile.plant(i,n1,n2,n3);CUP$parser$result=new java_cup.runtime.Symbol(35,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 121:{Object RESULT=null;int ileft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;int iright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;String i=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;int n1left=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int n1right=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;String n1=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;int n2left=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int n2right=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;String n2=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;classFile.plant(i,n1,n2);CUP$parser$result=new java_cup.runtime.Symbol(35,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 120:{Object RESULT=null;int ileft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;int iright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;String i=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;int nleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int nright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;String n=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;int n2left=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int n2right=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;Integer n2=(Integer)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;classFile.plant(i,n,n2.intValue());CUP$parser$result=new java_cup.runtime.Symbol(35,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 119:{Object RESULT=null;int ileft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int iright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;String i=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;int nleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int nright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;String n=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;classFile.plant(i,n);CUP$parser$result=new java_cup.runtime.Symbol(35,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 118:{Object RESULT=null;int ileft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int iright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;String i=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;int nleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int nright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;Number n=(Number)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;classFile.plant(i,n);CUP$parser$result=new java_cup.runtime.Symbol(35,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 117:{Object RESULT=null;int ileft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int iright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;String i=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;int nleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int nright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;Integer n=(Integer)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;classFile.plant(i,n.intValue());CUP$parser$result=new java_cup.runtime.Symbol(35,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 116:{Object RESULT=null;int ileft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;int iright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;String i=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;int n1left=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int n1right=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;Integer n1=(Integer)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;int n2left=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int n2right=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;Integer n2=(Integer)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;classFile.plant(i,n1.intValue(),n2.intValue());CUP$parser$result=new java_cup.runtime.Symbol(35,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 115:{Object RESULT=null;int ileft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int iright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;String i=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;classFile.plant(i);CUP$parser$result=new java_cup.runtime.Symbol(35,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 114:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(18,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 113:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(18,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 112:{Object RESULT=null;int nameleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int nameright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;String name=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;int vleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int vright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;String v=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;scanner.dict.put(name,v);CUP$parser$result=new java_cup.runtime.Symbol(34,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 111:{Object RESULT=null;int nameleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int nameright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;String name=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;int vleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int vright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;Number v=(Number)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;scanner.dict.put(name,v);CUP$parser$result=new java_cup.runtime.Symbol(34,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 110:{Object RESULT=null;int nameleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int nameright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;String name=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;int vleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int vright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;String v=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;scanner.dict.put(name,v);CUP$parser$result=new java_cup.runtime.Symbol(34,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 109:{Object RESULT=null;int nameleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int nameright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;String name=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;int vleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int vright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;Integer v=(Integer)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;scanner.dict.put(name,v);CUP$parser$result=new java_cup.runtime.Symbol(34,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 108:{Object RESULT=null;int aclassleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 6)).left;int aclassright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 6)).right;String aclass=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 6)).value;int fromlableft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 4)).left;int fromlabright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 4)).right;String fromlab=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 4)).value;int tolableft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;int tolabright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;String tolab=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;int branchlableft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int branchlabright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;String branchlab=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;classFile.addCatch(aclass,fromlab,tolab,branchlab);CUP$parser$result=new java_cup.runtime.Symbol(9,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 6)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 107:{Object RESULT=null;int sleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int sright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;String s=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;classFile.addThrow(s);CUP$parser$result=new java_cup.runtime.Symbol(48,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 106:{Object RESULT=null;int vleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int vright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;Integer v=(Integer)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;classFile.addLine(v.intValue());CUP$parser$result=new java_cup.runtime.Symbol(43,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 105:{Object RESULT=null;int wleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int wright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;String w=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;int vleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int vright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;Integer v=(Integer)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;if (w.equals("locals") || w.equals("vars")) classFile.setVarSize((short)v.intValue()); else if (w.equals("stack")) classFile.setStackSize((short)v.intValue()); else classFile.report_error(".limit expected \"stack\" or \"locals\", but got " + w);CUP$parser$result=new java_cup.runtime.Symbol(24,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 104:{Object RESULT=null;int regleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;int regright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;Integer reg=(Integer)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;int nameleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int nameright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;String name=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;int sigleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int sigright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;String sig=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;classFile.addVar(null,null,name,sig,reg.intValue());CUP$parser$result=new java_cup.runtime.Symbol(49,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 103:{Object RESULT=null;int regleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 7)).left;int regright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 7)).right;Integer reg=(Integer)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 7)).value;int nameleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 5)).left;int nameright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 5)).right;String name=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 5)).value;int sigleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 4)).left;int sigright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 4)).right;String sig=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 4)).value;int slableft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;int slabright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;String slab=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;int elableft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int elabright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;String elab=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;classFile.addVar(slab,elab,name,sig,reg.intValue());CUP$parser$result=new java_cup.runtime.Symbol(49,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 7)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 102:{Object RESULT=null;int wleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int wright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;String w=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;int vleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int vright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;String v=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;classFile.addSootCodeAttr(w,v);CUP$parser$result=new java_cup.runtime.Symbol(50,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 101:{Object RESULT=null;int defleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;int defright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;Object def=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;classFile.addMethAnnotDefault(def);CUP$parser$result=new java_cup.runtime.Symbol(81,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 100:{Object RESULT=null;int elemleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int elemright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;Object elem=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;RESULT=classFile.makeNewAnnotAttrList(elem);CUP$parser$result=new java_cup.runtime.Symbol(83,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 99:{Object RESULT=null;int listleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int listright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;Object list=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;int elemleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int elemright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;Object elem=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;RESULT=classFile.mergeNewAnnotAttr(list,elem);CUP$parser$result=new java_cup.runtime.Symbol(83,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 98:{Object RESULT=null;int kindleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 4)).left;int kindright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 4)).right;Object kind=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 4)).value;int listleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;int listright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;Object list=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;RESULT=classFile.makeParameterVisibilityAnnotation(kind,list);if (kind.equals("RuntimeVisible")) classFile.addMethParamAnnotAttrVisible(RESULT); else classFile.addMethParamAnnotAttrInvisible(RESULT);CUP$parser$result=new java_cup.runtime.Symbol(82,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 5)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 97:{Object RESULT=null;int tvalleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 4)).left;int tvalright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 4)).right;Object tval=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 4)).value;int listleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;int listright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;Object list=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;RESULT=classFile.makeVisibilityAnnotation(tval,list);if (tval.equals("RuntimeVisible")) classFile.addMethAnnotAttrVisible(RESULT); else classFile.addMethAnnotAttrInvisible(RESULT);CUP$parser$result=new java_cup.runtime.Symbol(78,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 4)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 96:{Object RESULT=null;int sleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int sright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;String s=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;classFile.addMethSigAttr(s);CUP$parser$result=new java_cup.runtime.Symbol(70,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 95:{Object RESULT=null;classFile.addMethDeprAttr();CUP$parser$result=new java_cup.runtime.Symbol(69,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 94:{Object RESULT=null;classFile.addMethSynthAttr();CUP$parser$result=new java_cup.runtime.Symbol(68,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 93:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(13,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 92:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(13,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 91:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(13,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 90:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(13,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 89:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(13,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 88:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(13,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 87:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(13,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 86:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(13,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 85:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(13,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 84:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(13,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 83:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(13,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 82:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(13,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 81:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(13,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 80:{Object RESULT=null;int labelleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int labelright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;String label=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;classFile.plantLabel(label);CUP$parser$result=new java_cup.runtime.Symbol(23,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 79:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(39,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 78:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(39,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 77:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(39,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 76:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(39,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 75:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(39,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 74:{Object RESULT=null;if (((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).value != null) RESULT=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;CUP$parser$result=new java_cup.runtime.Symbol(37,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 73:{Object RESULT=null;classFile.setLine(scanner.token_line_num);CUP$parser$result=new java_cup.runtime.Symbol(90,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 72:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(38,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 71:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(38,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 70:{Object RESULT=null;classFile.endMethod();CUP$parser$result=new java_cup.runtime.Symbol(14,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 69:{Object RESULT=null;int ileft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;int iright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;Short i=(Short)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;int nameleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int nameright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;String name=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;String split[]=ScannerUtils.splitMethodSignature(name);classFile.newMethod(split[0],split[1],i.intValue());CUP$parser$result=new java_cup.runtime.Symbol(12,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 68:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(32,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 67:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(32,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 66:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(54,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 65:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(54,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 64:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(31,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 63:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(31,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 62:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(33,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 61:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(33,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 60:{Object RESULT=null;int sleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int sright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;String s=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;RESULT=s;CUP$parser$result=new java_cup.runtime.Symbol(3,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 59:{Object RESULT=null;int nleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int nright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;Number n=(Number)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;RESULT=n;CUP$parser$result=new java_cup.runtime.Symbol(3,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 58:{Object RESULT=null;int ileft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int iright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;Integer i=(Integer)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;RESULT=i;CUP$parser$result=new java_cup.runtime.Symbol(3,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 57:{Object RESULT=null;RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(2,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 56:{Object RESULT=null;int vleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int vright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;Object v=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;RESULT=v;CUP$parser$result=new java_cup.runtime.Symbol(2,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 55:{Object RESULT=null;int aleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 9)).left;int aright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 9)).right;Short a=(Short)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 9)).value;int nameleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 8)).left;int nameright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 8)).right;String name=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 8)).value;int sigleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 7)).left;int sigright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 7)).right;String sig=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 7)).value;int vleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 6)).left;int vright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 6)).right;Object v=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 6)).value;int dep_attrleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;int dep_attrright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;Object dep_attr=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;int sig_attrleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;int sig_attrright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;Object sig_attr=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;int vis_annot_attr1left=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int vis_annot_attr1right=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;Object vis_annot_attr1=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;int vis_annot_attr2left=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int vis_annot_attr2right=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;Object vis_annot_attr2=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;classFile.addField((short)a.intValue(),name,sig,v,"synth",dep_attr,sig_attr,vis_annot_attr1,vis_annot_attr2);CUP$parser$result=new java_cup.runtime.Symbol(16,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 10)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 54:{Object RESULT=null;int aleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 8)).left;int aright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 8)).right;Short a=(Short)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 8)).value;int nameleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 7)).left;int nameright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 7)).right;String name=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 7)).value;int sigleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 6)).left;int sigright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 6)).right;String sig=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 6)).value;int vleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 5)).left;int vright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 5)).right;Object v=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 5)).value;int dep_attrleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;int dep_attrright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;Object dep_attr=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;int sig_attrleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;int sig_attrright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;Object sig_attr=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;int vis_annot_attr1left=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int vis_annot_attr1right=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;Object vis_annot_attr1=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;int vis_annot_attr2left=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int vis_annot_attr2right=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;Object vis_annot_attr2=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;classFile.addField((short)a.intValue(),name,sig,v,dep_attr,sig_attr,vis_annot_attr1,vis_annot_attr2);CUP$parser$result=new java_cup.runtime.Symbol(16,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 9)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 53:{Object RESULT=null;int aleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 8)).left;int aright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 8)).right;Short a=(Short)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 8)).value;int nameleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 7)).left;int nameright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 7)).right;String name=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 7)).value;int sigleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 6)).left;int sigright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 6)).right;String sig=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 6)).value;int vleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 5)).left;int vright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 5)).right;Object v=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 5)).value;int dep_attrleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;int dep_attrright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;Object dep_attr=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;int sig_attrleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int sig_attrright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;Object sig_attr=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;int vis_annot_attrleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int vis_annot_attrright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;Object vis_annot_attr=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;classFile.addField((short)a.intValue(),name,sig,v,"synth",dep_attr,sig_attr,vis_annot_attr,null);CUP$parser$result=new java_cup.runtime.Symbol(16,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 9)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 52:{Object RESULT=null;int aleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 7)).left;int aright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 7)).right;Short a=(Short)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 7)).value;int nameleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 6)).left;int nameright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 6)).right;String name=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 6)).value;int sigleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 5)).left;int sigright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 5)).right;String sig=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 5)).value;int vleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 4)).left;int vright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 4)).right;Object v=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 4)).value;int dep_attrleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;int dep_attrright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;Object dep_attr=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;int sig_attrleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int sig_attrright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;Object sig_attr=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;int vis_annot_attrleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int vis_annot_attrright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;Object vis_annot_attr=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;classFile.addField((short)a.intValue(),name,sig,v,dep_attr,sig_attr,vis_annot_attr,null);CUP$parser$result=new java_cup.runtime.Symbol(16,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 8)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 51:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(58,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 50:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(58,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 49:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(15,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 48:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(15,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 47:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(17,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 46:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(17,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 45:{Object RESULT=null;int annot_attrleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int annot_attrright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;Object annot_attr=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;int annot_attr2left=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int annot_attr2right=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;Object annot_attr2=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;if (((VisibilityAnnotationAttr)annot_attr).getKind().equals("RuntimeVisible")) classFile.addClassAnnotAttrVisible(annot_attr); else classFile.addClassAnnotAttrInvisible(annot_attr);if (((VisibilityAnnotationAttr)annot_attr2).getKind().equals("RuntimeVisible")) classFile.addClassAnnotAttrVisible(annot_attr2); else classFile.addClassAnnotAttrInvisible(annot_attr2);CUP$parser$result=new java_cup.runtime.Symbol(79,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 44:{Object RESULT=null;int annot_attrleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int annot_attrright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;Object annot_attr=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;if (annot_attr != null) {if (((VisibilityAnnotationAttr)annot_attr).getKind().equals("RuntimeVisible")) classFile.addClassAnnotAttrVisible(annot_attr); else classFile.addClassAnnotAttrInvisible(annot_attr);}CUP$parser$result=new java_cup.runtime.Symbol(79,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 43:{Object RESULT=null;int sig_attrleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int sig_attrright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;Object sig_attr=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;classFile.addClassSigAttr(sig_attr);CUP$parser$result=new java_cup.runtime.Symbol(72,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 42:{Object RESULT=null;int dep_attrleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int dep_attrright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;Object dep_attr=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;classFile.addClassDeprAttr(dep_attr);CUP$parser$result=new java_cup.runtime.Symbol(71,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 41:{Object RESULT=null;int nameleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int nameright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;String name=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;classFile.addInterface(name);CUP$parser$result=new java_cup.runtime.Symbol(21,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 40:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(20,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 39:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(20,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 38:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(19,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 37:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(19,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 36:{Object RESULT=null;classFile.setNoSuperClass();CUP$parser$result=new java_cup.runtime.Symbol(40,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 35:{Object RESULT=null;int nameleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int nameright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;String name=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;classFile.setSuperClass(name);CUP$parser$result=new java_cup.runtime.Symbol(40,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 34:{Object RESULT=null;access_val|=RuntimeConstants.ACC_ENUM;CUP$parser$result=new java_cup.runtime.Symbol(6,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 33:{Object RESULT=null;access_val|=RuntimeConstants.ACC_ANNOTATION;CUP$parser$result=new java_cup.runtime.Symbol(6,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 32:{Object RESULT=null;access_val|=RuntimeConstants.ACC_STRICTFP;CUP$parser$result=new java_cup.runtime.Symbol(6,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 31:{Object RESULT=null;access_val|=RuntimeConstants.ACC_ABSTRACT;CUP$parser$result=new java_cup.runtime.Symbol(6,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 30:{Object RESULT=null;access_val|=RuntimeConstants.ACC_INTERFACE;CUP$parser$result=new java_cup.runtime.Symbol(6,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 29:{Object RESULT=null;access_val|=RuntimeConstants.ACC_NATIVE;CUP$parser$result=new java_cup.runtime.Symbol(6,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 28:{Object RESULT=null;access_val|=RuntimeConstants.ACC_TRANSIENT;CUP$parser$result=new java_cup.runtime.Symbol(6,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 27:{Object RESULT=null;access_val|=RuntimeConstants.ACC_VOLATILE;CUP$parser$result=new java_cup.runtime.Symbol(6,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 26:{Object RESULT=null;access_val|=RuntimeConstants.ACC_SYNCHRONIZED;CUP$parser$result=new java_cup.runtime.Symbol(6,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 25:{Object RESULT=null;access_val|=RuntimeConstants.ACC_FINAL;CUP$parser$result=new java_cup.runtime.Symbol(6,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 24:{Object RESULT=null;access_val|=RuntimeConstants.ACC_STATIC;CUP$parser$result=new java_cup.runtime.Symbol(6,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 23:{Object RESULT=null;access_val|=RuntimeConstants.ACC_PROTECTED;CUP$parser$result=new java_cup.runtime.Symbol(6,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 22:{Object RESULT=null;access_val|=RuntimeConstants.ACC_PRIVATE;CUP$parser$result=new java_cup.runtime.Symbol(6,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 21:{Object RESULT=null;access_val|=RuntimeConstants.ACC_PUBLIC;CUP$parser$result=new java_cup.runtime.Symbol(6,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 20:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(7,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 19:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(7,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 18:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(8,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 17:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(8,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 16:{Short RESULT=null;if (((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value != null) RESULT=(Short)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;RESULT=new Short(access_val);CUP$parser$result=new java_cup.runtime.Symbol(88,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 15:{Object RESULT=null;access_val=0;CUP$parser$result=new java_cup.runtime.Symbol(89,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 14:{String RESULT=null;RESULT="default";CUP$parser$result=new java_cup.runtime.Symbol(1,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 13:{String RESULT=null;RESULT="tableswitch";CUP$parser$result=new java_cup.runtime.Symbol(1,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 12:{String RESULT=null;RESULT="lookupswitch";CUP$parser$result=new java_cup.runtime.Symbol(1,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 11:{String RESULT=null;RESULT="method";CUP$parser$result=new java_cup.runtime.Symbol(1,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 10:{String RESULT=null;RESULT="is";CUP$parser$result=new java_cup.runtime.Symbol(1,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 9:{String RESULT=null;RESULT="using";CUP$parser$result=new java_cup.runtime.Symbol(1,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 8:{String RESULT=null;RESULT="to";CUP$parser$result=new java_cup.runtime.Symbol(1,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 7:{String RESULT=null;RESULT="from";CUP$parser$result=new java_cup.runtime.Symbol(1,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 6:{String RESULT=null;int wleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;int wright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;String w=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;RESULT=ScannerUtils.convertDots(w);CUP$parser$result=new java_cup.runtime.Symbol(1,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 5:{Object RESULT=null;int aleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;int aright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;Short a=(Short)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;int nameleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int nameright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;String name=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;classFile.setClass(name,(short)(a.intValue() | RuntimeConstants.ACC_INTERFACE));CUP$parser$result=new java_cup.runtime.Symbol(10,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 4:{Object RESULT=null;int aleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;int aright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;Short a=(Short)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;int nameleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int nameright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;String name=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;classFile.setClass(name,(short)(a.intValue() | RuntimeConstants.ACC_SUPER));CUP$parser$result=new java_cup.runtime.Symbol(10,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 3:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(36,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 2:{Object RESULT=null;int wleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int wright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;String w=(String)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;classFile.setSource(w);CUP$parser$result=new java_cup.runtime.Symbol(36,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;case 1:{Object RESULT=null;int start_valleft=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;int start_valright=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;Object start_val=(Object)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;RESULT=start_val;CUP$parser$result=new java_cup.runtime.Symbol(0,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}CUP$parser$parser.done_parsing();return CUP$parser$result;case 0:{Object RESULT=null;CUP$parser$result=new java_cup.runtime.Symbol(22,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 12)).left,((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 0)).right,RESULT);}return CUP$parser$result;default :throw new Exception("Invalid action number found in internal parse table");}}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=1;  result=prime * result + ((databaseName == null) ? 0 : databaseName.hashCode());  result=prime * result + ((tableUniqueName == null) ? 0 : tableUniqueName.hashCode());  return result;}  }
class C{  public static String[] readAllLines(){  ArrayList<String> lines=new ArrayList<String>();  while (hasNextLine()) {    lines.add(readLine());  }  return lines.toArray(new String[0]);}  }
class C{  private void cleanStates(){  System.err.println("Cleaning microbial attributes file:");  for (  String attribute : attribute2states.keySet()) {    String[] originalStates=attribute2states.get(attribute).toArray(new String[attribute2states.get(attribute).size()]);    String[] states=new String[originalStates.length];    for (int i=0; i < states.length; i++) {      states[i]=originalStates[i].toLowerCase().replaceAll(":",": ").replaceAll(",","").replaceAll(" or "," ").replaceAll(" and "," ").replaceAll("-"," ");      if (states[i].endsWith("s"))       states[i]=states[i].substring(0,states[i].length() - 1);      if (attribute.equals("Endospores") && states[i].equals("n"))       states[i]="no";      states[i]=states[i].trim();    }    int[] mapTo=new int[states.length];    for (int i=0; i < mapTo.length; i++)     mapTo[i]=i;    for (int i=0; i < states.length; i++) {      Set<String> iSet=new HashSet<>();      iSet.addAll(Arrays.asList(states[i].split(" ")));      for (int j=i + 1; j < states.length; j++) {        boolean same=false;        Set<String> jSet=new HashSet<>();        jSet.addAll(Arrays.asList(states[j].split(" ")));        if (iSet.equals(jSet))         same=true;        if (same) {          System.err.println(attribute + ": '" + originalStates[i]+ "' == '"+ originalStates[j]+ "'");          for (int k=0; k < mapTo.length; k++) {            if (mapTo[k] == j)             mapTo[k]=i;          }        }      }    }    String[] bestStates=new String[originalStates.length];    for (int i=0; i < mapTo.length; i++) {      int j=mapTo[i];      if (j <= i) {        String newBestState=Basic.capitalizeWords(originalStates[i]).replaceAll(" In "," in ").replaceAll(" And "," and ").replaceAll(" Or "," or ");        if (newBestState.endsWith(",") || newBestState.endsWith("."))         newBestState=newBestState.substring(0,newBestState.length() - 1);        if (bestStates[j] == null || newBestState.length() < bestStates[j].length() || newBestState.compareTo(bestStates[j]) < 0)         bestStates[j]=newBestState;      }    }    for (int i=0; i < mapTo.length; i++) {      int j=mapTo[i];      if (j <= i) {        attribute2states.get(attribute).remove(originalStates[i]);        if (i == j) {          attribute2states.get(attribute).add(bestStates[j]);        }        String oldKey=attribute + ":" + originalStates[i];        String newKey=attribute + ":" + bestStates[j];        Set<Integer> taxa=attributeAndState2taxa.get(oldKey);        for (        Integer t : taxa) {          tax2attributeAndState.get(t).remove(oldKey);          tax2attributeAndState.get(t).add(newKey);        }        attributeAndState2taxa.keySet().remove(oldKey);        attributeAndState2taxa.put(newKey,taxa);      }    }  }  System.err.println("Done");}  }
class C{  @Override public void valueChanged(ListSelectionEvent e){  if (!e.getValueIsAdjusting()) {    int selectedIndex=segmentList.getSelectedIndex();    if (wktGeometry.getNoOfSegments() == 1) {      if (selectedIndex >= 0) {        tablePointModel.populate(wktGeometry.getSegmentList(0).get(selectedIndex));      }    } else {      int multiSelectedIndex=multiList.getSelectedIndex();      if (selectedIndex < 0) {        selectedIndex=0;      }      WKTSegmentList wktPointList=null;      List<WKTSegmentList> segmentList2=wktGeometry.getSegmentList(multiSelectedIndex);      if ((segmentList2 != null) && (selectedIndex >= 0) && (selectedIndex < segmentList2.size())) {        wktPointList=segmentList2.get(selectedIndex);      }      tablePointModel.populate(wktPointList);    }    updateSegmentButtons();  }}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  protected void appendTreeItemToRoot(TreeItem<WeakRef<Node>> treeItemChild){  rootItem.getChildren().add(treeItemChild);}  }
class C{  public void disableLabels(Collection<String> labels){  disabledLabels.addAll(labels);}  }
class C{  public static PictureAttributes createPictureAttributes(){  return new PictureAttributes();}  }
class C{  public SimplePollingContainerConfigurer eventListenerMethod(Object eventListener,String methodName){  MethodEventListenerAdapter methodEventListenerAdapter=new MethodEventListenerAdapter();  methodEventListenerAdapter.setDelegate(eventListener);  methodEventListenerAdapter.setMethodName(methodName);  methodEventListenerAdapter.afterPropertiesSet();  pollingEventListenerContainer.setEventListener(methodEventListenerAdapter);  return this;}  }
class C{  public static IngredientsFragment newInstance(Recipe recipe,int sectionNumber){  IngredientsFragment fragment=new IngredientsFragment();  fragment.recipe=recipe;  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  public Vector2f add(Vector2f vec){  if (null == vec) {    logger.warning("Provided vector is null, null returned.");    return null;  }  return new Vector2f(x + vec.x,y + vec.y);}  }
class C{  public boolean isSuccess(){  return success;}  }
class C{  public boolean isDefaultVal(){  return defaultVal;}  }
class C{  protected static void assertSummaryStatisticsEquals(StreamingStatistics expected,StreamingStatistics observed,double delta){  UnitTestUtils.assertEquals(expected.getMax(),observed.getMax(),0);  UnitTestUtils.assertEquals(expected.getMin(),observed.getMin(),0);  Assert.assertEquals(expected.getN(),observed.getN());  UnitTestUtils.assertEquals(expected.getSum(),observed.getSum(),delta);  UnitTestUtils.assertEquals(expected.getMean(),observed.getMean(),delta);  UnitTestUtils.assertEquals(expected.getStandardDeviation(),observed.getStandardDeviation(),delta);  UnitTestUtils.assertEquals(expected.getVariance(),observed.getVariance(),delta);}  }
class C{  public void remove(Legion legion){  legionsById.remove(legion.getLegionId());  legionsByName.remove(legion.getLegionName().toLowerCase());}  }
class C{  @Override public synchronized void clear(){  File[] files=mRootDirectory.listFiles();  if (files != null) {    for (    File file : files) {      file.delete();    }  }  mEntries.clear();  mTotalSize=0;  VolleyLog.d("Cache cleared.");}  }
class C{  private int computeNumberOfLettersInPerfectOverlap(Lane iLane,Lane jLane){  final int firstCoordinate=Math.max(iLane.getFirstNonGapPosition(),jLane.getFirstNonGapPosition());  final int lastCoordinate=Math.min(iLane.getLastNonGapPosition(),jLane.getLastNonGapPosition());  int count=0;  for (int i=firstCoordinate; i < lastCoordinate; i++) {    char iChar=Character.toLowerCase(iLane.charAt(i));    char jChar=Character.toLowerCase(jLane.charAt(i));    if (iChar != jChar && iChar != 'n' && jChar != 'n')     return 0; else     if (Character.isLetter(iChar))     count++;  }  return count;}  }
class C{  public static void unbanChar(int playerId){  DAOManager.getDAO(PlayerPunishmentsDAO.class).unpunishPlayer(playerId,PunishmentType.CHARBAN);}  }
class C{  @Override public void start(BundleContext bc) throws Exception {  context=bc;  logger.debug("Z-Wave binding started. Version {}",ZWaveActivator.getVersion());}  }
class C{  public void clear(){  super.clear();  Object[] keys=_set;  long[] vals=_values;  Arrays.fill(_set,0,_set.length,FREE);  Arrays.fill(_values,0,_values.length,(long)0);}  }
class C{  @Override public void redo(Transaction tx){}  }
class C{  public SecureGetTransactionsHistoryQuery(VkApiClient client,ServiceActor actor){  super(client,"secure.getTransactionsHistory",Utils.buildParametrizedType(List.class,Transaction.class));  accessToken(actor.getAccessToken());  clientSecret(actor.getClientSecret());}  }
class C{  protected void writeLSD() throws IOException {  writeShort(width);  writeShort(height);  out.write((0x80 | 0x70 | 0x00| palSize));  out.write(0);  out.write(0);}  }
class C{  public static String removeAccesTrackingCodeCookie(HttpServletRequest request,HttpServletResponse response){  Cookie[] cookies=request.getCookies();  if (cookies != null) {    for (    Cookie cookie : cookies) {      if (cookie.getName().endsWith("_ACCESS")) {        cookie.setMaxAge(0);        response.addCookie(cookie);      }    }  }  return "success";}  }
class C{  @Deprecated public static void write(StringBuffer data,Writer output) throws IOException {  if (data != null) {    output.write(data.toString());  }}  }
class C{  public static void aph(Zmat A,Rot P,int ii1,int ii2,int jj1,int jj2){  double t1r, t1i, t2r, t2i;  A.dirty=true;  int i1=ii1 - A.basex;  int i2=ii2 - A.basex;  int j1=jj1 - A.basex;  int j2=jj2 - A.basex;  for (int i=i1; i <= i2; i++) {    t1r=P.c * A.re[i][j1] + P.sr * A.re[i][j2] + P.si * A.im[i][j2];    t1i=P.c * A.im[i][j1] + P.sr * A.im[i][j2] - P.si * A.re[i][j2];    t2r=P.c * A.re[i][j2] - P.sr * A.re[i][j1] + P.si * A.im[i][j1];    t2i=P.c * A.im[i][j2] - P.sr * A.im[i][j1] - P.si * A.re[i][j1];    A.re[i][j1]=t1r;    A.im[i][j1]=t1i;    A.re[i][j2]=t2r;    A.im[i][j2]=t2i;  }}  }
class C{  private void checkCallingPackage() throws SecurityException {  String callingPkg=null;  if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.KITKAT) {    callingPkg=getCallingPackage();  }  if ("org.kustom.wallpaper".equals(callingPkg))   return;  if ("org.kustom.widget".equals(callingPkg))   return;  throw new SecurityException("Unauthorized");}  }
class C{  private int klattRule7(Element segment){  Element token=getToken(segment);  Element syllable=getSyllable(segment);  int stress=getStress(syllable);  if (stress == 2 || stress == 0) {    if (isInOnset(segment)) {      if (isLiquid(segment) || isGlide(segment)) {        return (getPropertyAsInteger("rule7.onset.liquids"));      } else {        return (getPropertyAsInteger("rule7.others"));      }    } else     if (isInNucleus(segment)) {      if (isWordMedial(syllable)) {        return (getPropertyAsInteger("rule7.nucleus.medial"));      } else {        return (getPropertyAsInteger("rule7.nucleus.others"));      }    } else {      return (getPropertyAsInteger("rule7.others"));    }  }  return 100;}  }
class C{  private void fillTableMenu(IMenuManager manager){  manager.add(getRefreshAction());  Action action=getAddPropertyAction();  try {    if (resource != null)     action.setEnabled(resource.isManaged()); else     action.setEnabled(false);  } catch (  SVNException e) {    action.setEnabled(false);  }  manager.add(action);  manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));}  }
class C{  public boolean isComponentPresent(Class<?> componentClass){  final String cssClassName=new AemComponentHandler(componentClass).getCssClassName();  return isComponentPresent(cssClassName);}  }
class C{  public void reset(){  _count=0;}  }
class C{  public void addOnPageChangeListener(ViewPager.OnPageChangeListener onPageChangeListener){  this.onPageChangeListener=onPageChangeListener;}  }
class C{  public void updateClassification(ClassificationType classificationType,Map<Integer,ListOfLongs> classId2locations) throws IOException {  getClassificationsFooter().setStart(classificationType,io.getPosition());  getClassificationsFooter().setDo(classificationType);  final ClassificationBlockRMA3 classificationBlock=new ClassificationBlockRMA3(classificationType);  for (  Integer classId : classId2locations.keySet()) {    classificationBlock.setSum(classId,classId2locations.get(classId).size());  }  classificationBlock.write(io,classId2locations);  getClassificationsFooter().setEnd(classificationType,io.getPosition());}  }
class C{  @RequestMapping(value="/{id}",method=GET,produces=APPLICATION_JSON_VALUE) public ResponseEntity<UserDTO> findById(@PathVariable Integer id) throws URISyntaxException {  log.debug("Find by id User : {}",id);  return Optional.ofNullable(userDTOService.findOne(id)).map(null).orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));}  }
class C{  public static boolean wildcardMatch(String filename,String wildcardMatcher,IOCase caseSensitivity){  if (filename == null && wildcardMatcher == null) {    return true;  }  if (filename == null || wildcardMatcher == null) {    return false;  }  if (caseSensitivity == null) {    caseSensitivity=IOCase.SENSITIVE;  }  String[] wcs=splitOnTokens(wildcardMatcher);  boolean anyChars=false;  int textIdx=0;  int wcsIdx=0;  Stack<int[]> backtrack=new Stack<int[]>();  do {    if (backtrack.size() > 0) {      int[] array=backtrack.pop();      wcsIdx=array[0];      textIdx=array[1];      anyChars=true;    }    while (wcsIdx < wcs.length) {      if (wcs[wcsIdx].equals("?")) {        textIdx++;        if (textIdx > filename.length()) {          break;        }        anyChars=false;      } else       if (wcs[wcsIdx].equals("*")) {        anyChars=true;        if (wcsIdx == wcs.length - 1) {          textIdx=filename.length();        }      } else {        if (anyChars) {          textIdx=caseSensitivity.checkIndexOf(filename,textIdx,wcs[wcsIdx]);          if (textIdx == -1) {            break;          }          int repeat=caseSensitivity.checkIndexOf(filename,textIdx + 1,wcs[wcsIdx]);          if (repeat >= 0) {            backtrack.push(new int[]{wcsIdx,repeat});          }        } else {          if (!caseSensitivity.checkRegionMatches(filename,textIdx,wcs[wcsIdx])) {            break;          }        }        textIdx+=wcs[wcsIdx].length();        anyChars=false;      }      wcsIdx++;    }    if (wcsIdx == wcs.length && textIdx == filename.length()) {      return true;    }  } while (backtrack.size() > 0);  return false;}  }
class C{  public static AboutFragment newInstance(String param1,String param2){  AboutFragment fragment=new AboutFragment();  Bundle args=new Bundle();  args.putString(ARG_PARAM1,param1);  args.putString(ARG_PARAM2,param2);  fragment.setArguments(args);  return fragment;}  }
class C{  public EventBuilder minPriority(){  this.event.setPriority(Thread.MIN_PRIORITY);  return this;}  }
class C{  public static Maybe<LoginResult> requestAdditionalPermission(@NonNull final List<PermissionHelper> permissions,@NonNull final Activity activity){  checkNotNull(permissions,"permissions == null");  checkNotNull(activity,"activity == null");  ReactiveFB.getSessionManager().setActivity(activity);  return Maybe.create(new AdditionalPermissionOnSubscribe(permissions));}  }
class C{  public boolean createTabWithWebContents(WebContents webContents,int parentId,TabLaunchType type,String url,int startedBy){  if (url == null)   url="";  int pageTransition=startedBy == DocumentMetricIds.STARTED_BY_CHROME_HOME_RECENT_TABS ? PageTransition.RELOAD : PageTransition.AUTO_TOPLEVEL;  AsyncTabCreationParams asyncParams=new AsyncTabCreationParams(new LoadUrlParams(url,pageTransition),webContents);  asyncParams.setDocumentStartedBy(startedBy);  createNewTab(asyncParams,type,parentId);  return true;}  }
class C{  @Override public String toString(){  return "FPS: " + currentFPS;}  }
class C{  public void showMetrics(){}  }
class C{  private void ensureCapacity(int newsize){  if (data == null) {    data=new int[newsize + 15];  } else   if (newsize > data.length) {    int newdata[]=new int[newsize + 15];    System.arraycopy(data,0,newdata,0,data.length);    data=newdata;  }}  }
class C{  private String makeSAM(String queryName,String refName,float bitScore,float expect,float percentIdentity,int queryStart,int referenceStart,int referenceEnd,String line) throws IOException {  final StringBuilder buffer=new StringBuilder();  buffer.append(queryName).append("\t");  boolean reverseComplemented=(referenceStart > referenceEnd);  if (reverseComplemented) {    buffer.append(0x10);  } else   buffer.append(0);  buffer.append("\t");  buffer.append(refName).append("\t");  if (reverseComplemented)   buffer.append(referenceEnd).append("\t"); else   buffer.append(referenceStart).append("\t");  buffer.append("255\t");  buffer.append("*\t");  buffer.append("*\t");  buffer.append("0\t");  buffer.append("0\t");  buffer.append("*\t");  buffer.append("*\t");  buffer.append(String.format("AS:i:%d\t",(int)Math.round(bitScore)));  buffer.append(String.format("ZE:f:%g\t",expect));  buffer.append(String.format("ZI:i:%d\t",(int)Math.round(percentIdentity)));  buffer.append(String.format("ZS:i:%s\t",queryStart));  buffer.append(String.format("AL:Z:%s\t",Basic.replaceSpaces(line,' ')));  return buffer.toString();}  }
class C{  private int[] determineDimensions(int sourceCodeWords,int errorCorrectionCodeWords) throws WriterException {  float ratio=0.0f;  int[] dimension=null;  for (int cols=minCols; cols <= maxCols; cols++) {    int rows=calculateNumberOfRows(sourceCodeWords,errorCorrectionCodeWords,cols);    if (rows < minRows) {      break;    }    if (rows > maxRows) {      continue;    }    float newRatio=((17 * cols + 69) * DEFAULT_MODULE_WIDTH) / (rows * HEIGHT);    if (dimension != null && Math.abs(newRatio - PREFERRED_RATIO) > Math.abs(ratio - PREFERRED_RATIO)) {      continue;    }    ratio=newRatio;    dimension=new int[]{cols,rows};  }  if (dimension == null) {    int rows=calculateNumberOfRows(sourceCodeWords,errorCorrectionCodeWords,minCols);    if (rows < minRows) {      dimension=new int[]{minCols,minRows};    }  }  if (dimension == null) {    throw new WriterException("Unable to fit message in columns");  }  return dimension;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_PetOrderUnSummon_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201204,skilltarget,skillname);}  }
class C{  @Override public void endExternalSubset(Augmentations augs) throws XNIException {  endParameterEntity("[dtd]",augs);}  }
class C{  private boolean isUserLimitReachedLocked(){  int nUsers=mUsers.size();  return nUsers >= VUserManager.getMaxSupportedUsers();}  }
class C{  public WallGetCommentsQuery startCommentId(Integer value){  return unsafeParam("start_comment_id",value);}  }
class C{  public NormalizerAdapter(){}  }
class C{  public static AuthToken update(long uid,String sid,String ip){  String token=UID.random(20);  long expired=System.currentTimeMillis() + Global.getLong("token.expired",X.AWEEK);  String id=UID.id(uid,sid,ip,token);  V v=V.create("uid",uid).set("sid",sid).set("token",token).set("expired",expired).set("ip",ip);  try {    if (Helper.exists(id,AuthToken.class)) {      Helper.update(id,v,AuthToken.class);    } else {      Helper.insert(v.set(X.ID,id),AuthToken.class);    }  } catch (  Exception e1) {    log.error(e1.getMessage(),e1);  }  return load(id);}  }
class C{  @Override public String toString(){  return " at character " + pos + " of "+ in;}  }
class C{  public void synchronizedWithDatasource(){  assertIsMutable();  this.originalDbValues=Collections.unmodifiableMap(getAllFields());  this.clearChanged();}  }
class C{  private void listenAndTimer(final BleCallback bleCallback,int what,String uuid,BluetoothGattCallback callback){  bleCallback.setBluetoothGattCallback(callback);  liteBluetooth.addGattCallback(uuid,callback);  Message msg=handler.obtainMessage(what,bleCallback);  handler.sendMessageDelayed(msg,timeOutMillis);}  }
class C{  public void put(String label,String newLabel){  label2label.put(label,newLabel);}  }
class C{  public NavigableImagePanel(BufferedImage image) throws IOException {  this();  setImage(image);}  }
class C{  private Style createRGBStyle(AbstractGridCoverage2DReader reader,WritableRaster raster){  RasterSymbolizer sym=sf.getDefaultRasterSymbolizer();  GridCoverage2D cov=null;  try {    cov=reader.read(null);  } catch (  IOException giveUp) {    throw new RuntimeException(giveUp);  }  int numBands=cov.getNumSampleDimensions();  if (numBands < 3) {    createRGBImageSymbol(sym,cov,raster);  } else {    createRGBChannelSymbol(sym,cov,numBands);  }  return SLD.wrapSymbolizers(sym);}  }
class C{  public static boolean bringWebappToFront(int tabId){  if (tabId == Tab.INVALID_TAB_ID)   return false;  for (  WeakReference<Activity> activityRef : ApplicationStatus.getRunningActivities()) {    Activity activity=activityRef.get();    if (activity == null || !(activity instanceof WebappActivity))     continue;    WebappActivity webappActivity=(WebappActivity)activity;    if (webappActivity.getActivityTab() != null && webappActivity.getActivityTab().getId() == tabId) {      Tab tab=webappActivity.getActivityTab();      tab.getTabWebContentsDelegateAndroid().activateContents();      return true;    }  }  return false;}  }
class C{  public String shortenPfeat(String fea){  String s=fea;  s=s.replace("phone","phn");  s=s.replace("prev","p");  s=s.replace("next","n");  s=s.replace("sentence","snt");  s=s.replace("phrase","phr");  s=s.replace("word","wrd");  s=s.replace("from_","");  s=s.replace("to_","");  s=s.replace("in_","");  s=s.replace("is_","");  s=s.replace("break","brk");  s=s.replace("start","stt");  s=s.replace("accented","acc");  s=s.replace("accent","acc");  s=s.replace("stressed","str");  s=s.replace("punctuation","punc");  s=s.replace("frequency","freq");  s=s.replace("position","pos");  s=s.replace("halfphone_lr","lr");  return s;}  }
class C{  @Override protected void assertDependentMetricsExist(List<String> dependentMetrics){}  }
class C{  public void activate(){  if (!isViewAvailable())   return;  if (mActive) {    requestQueryFocus();    return;  }  mTabModelSelector.addObserver(mTabModelSelectorObserver);  for (  TabModel model : mTabModelSelector.getModels()) {    model.addObserver(mTabModelObserver);  }  mCurrentTab=mTabModelSelector.getCurrentTab();  mCurrentTab.addObserver(mTabObserver);  mFindInPageBridge=new FindInPageBridge(mCurrentTab.getWebContents());  mCurrentTab.getTabWebContentsDelegateAndroid().setFindResultListener(this);  mCurrentTab.getTabWebContentsDelegateAndroid().setFindMatchRectsListener(this);  initializeFindText();  mFindQuery.requestFocus();  showKeyboard();  setResultsBarVisibility(true);  mActive=true;  updateVisualsForTabModel(mTabModelSelector.isIncognitoSelected());  if (mObserver != null)   mObserver.onFindToolbarShown();}  }
class C{  public SimpleCurveFitter withStartPoint(double[] newStart){  return new SimpleCurveFitter(function,newStart.clone(),maxIter);}  }
class C{  public static boolean isDigit(char ch){  return ('0' <= ch && ch <= '9');}  }
class C{  public NumberedShardSpec(NoneShardSpec spec){  this.type="none";  this.partitionNum=spec.getPartitionNum();  this.partitions=this.partitionNum + 1;}  }
class C{  private void parseLine(List<Elem> elems,String line){  int i=0;  boolean lastWasOpenBrace=false;  StringBuilder sb=new StringBuilder();  while (i < line.length()) {    char ch=line.charAt(i++);    if (ch == '@') {      if (i < line.length() && line.charAt(i) == '@') {        sb.append('@');        i++;      } else       if (i < line.length() && line.charAt(i) == '\\') {        sb.append('\\');        i++;      } else       if (i < line.length() && line.charAt(i) == '#') {        sb.append('#');        i++;      } else       if (lastWasOpenBrace) {        sb.deleteCharAt(sb.length() - 1);        flushLiteral(elems,sb);        i=parseExpr(elems,line,i);      } else {        sb.append('@');        i++;      }      lastWasOpenBrace=false;    } else {      lastWasOpenBrace=ch == '{';      sb.append(ch);    }  }  flushLiteral(elems,sb);}  }
class C{  public static void dismissDialogSafely(Dialog dialog){  if (dialog != null && dialog.isShowing()) {    dialog.dismiss();  }}  }
class C{  public AllocDotField makeAllocDotField(AllocNode an,SparkField field){  AllocDotField ret=an.dot(field);  if (ret == null) {    ret=new AllocDotField(this,an,field);  }  return ret;}  }
class C{  public AdsUpdateCampaignsQuery(VkApiClient client,UserActor actor,int accountId,String data){  super(client,"ads.updateCampaigns",Integer.class);  accessToken(actor.getAccessToken());  accountId(accountId);  data(data);}  }
class C{  public boolean processOutgoingWakeupMessage(SerialMessage serialMessage){  if (isAwake) {    resetSleepTimer();    return true;  }  if (serialMessage.getPriority() == SerialMessagePriority.RealTime) {    logger.debug("NODE {}: Dropping RealTime message",getNode().getNodeId());    return false;  }  if (serialMessage.getMessagePayload().length >= 2 && serialMessage.getMessagePayload()[2] == (byte)WAKE_UP_NO_MORE_INFORMATION) {    logger.debug("NODE {}: Last MSG not queuing.",getNode().getNodeId());    return false;  }  if (this.wakeUpQueue.contains(serialMessage)) {    logger.debug("NODE {}: Message already on the wake-up queue. Removing original.",getNode().getNodeId());    wakeUpQueue.remove(serialMessage);  }  logger.debug("NODE {}: Putting message {} in wakeup queue.",getNode().getNodeId(),serialMessage.getMessageClass());  wakeUpQueue.add(serialMessage);  return false;}  }
class C{  public static <T extends TagValueUpdate>String toJson(T tagUpdate){  String result=null;  try {    result=mapper.writeValueAsString(tagUpdate);  } catch (  JsonProcessingException e) {    log.error("Serializing of tagUpdate failed: " + e.getMessage());  }  return result;}  }
class C{  public AppsGetFriendsListQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public AdsUpdateTargetGroupQuery domain(String value){  return unsafeParam("domain",value);}  }
class C{  public static boolean instanceOf(Object obj,Object typeObject){  Class<?> typeClass=typeObject.getClass();  return instanceOf(obj,typeClass);}  }
class C{  private PorterDuffColorFilter updateTintFilter(ColorStateList tint,PorterDuff.Mode tintMode){  if (tint == null || tintMode == null) {    return null;  }  final int color=tint.getColorForState(getState(),Color.TRANSPARENT);  return new PorterDuffColorFilter(color,tintMode);}  }
class C{  private boolean canAppointBrigadeGeneral(Player activePlayer,Player targetPlayer){  Legion legion=activePlayer.getLegion();  if (!isBrigadeGeneral(activePlayer)) {    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_CHANGE_MEMBER_RANK_DONT_HAVE_RIGHT);    return false;  }  if (isSelf(activePlayer,targetPlayer.getObjectId())) {    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_CHANGE_MASTER_ERROR_SELF);    return false;  } else   if (!legion.isMember(targetPlayer.getObjectId())) {    return false;  }  return true;}  }
class C{  @Override public void startAttlist(String elementName,Augmentations augs) throws XNIException {}  }
class C{  public void onBeforeSpawn(){}  }
class C{  public static boolean isEmpty(String string){  return string == null || string.trim().length() == 0;}  }
class C{  public CatchOptions usePokeball(Pokeball pokeBall){  this.pokeBall=pokeBall;  return this;}  }
class C{  private void toWagonFormat(IntAndFloatArrayLeafNode node,DataOutputStream out,String extension,PrintWriter pw) throws IOException {  StringBuilder sb=new StringBuilder();  int data[]=node.getIntData();  float floats[]=node.getFloatData();  sb.append("(((");  for (int i=0; i < data.length; i++) {    sb.append("(" + data[i] + " "+ floats[i]+ ")");    if (i + 1 != data.length) {      sb.append(" ");    }  }  sb.append(") 0))" + extension);  if (out != null) {    writeStringToOutput(sb.toString(),out);  } else {  }  if (pw != null) {    pw.println(sb.toString());  }}  }
class C{  protected GroupsIsMemberQuery groupId(String value){  return unsafeParam("group_id",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_DONT_DROP_ITEM_BY_WRONG_LEVEL(String value0){  return new SM_SYSTEM_MESSAGE(1400772,value0);}  }
class C{  public void loadState(final Graph graph,final Configuration configuration){  configuration.subset(PREFIX_SELECTED_TYPE_KEY).getKeys().forEachRemaining(null);  configuration.subset(PREFIX_PERSISTENT_PROPERTIES).getKeys().forEachRemaining(null);}  }
class C{  public void leftTrim(double second){  trim(second,0);}  }
class C{  public DefaultRetryPolicy(){  this(DEFAULT_TIMEOUT_MS,DEFAULT_MAX_RETRIES,DEFAULT_BACKOFF_MULT);}  }
class C{  public ThreadDumpDescriptor(ThreadDump threadDump){  super(threadDump,NbBundle.getMessage(ThreadDumpDescriptor.class,"DESCR_ThreadDump"),ICON);}  }
class C{  public void shutdown(){  Iterator<JmsSender> it=jmsSenders.iterator();  while (it.hasNext()) {    it.next().shutdown();  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SkillATKDrain_Instant_INTERVAL_HEAL_TO_B(int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201076,num0,skilltarget,skillname);}  }
class C{  public ScreenshotEntry(WebDriver webDriver,ReportFileCreator fileCreator) throws IOException {  this(webDriver,fileCreator,null);}  }
class C{  public void runSimulator(long timestep){  accumulate();  integrator.integrate(this,timestep);}  }
class C{  public static String readKeyValueCurrentUser(String keyPath,String valueName){  return readKeyValue(HKEY_CURRENT_USER,keyPath,valueName);}  }
class C{  private boolean handleVolumeKeyEvent(MediaRouteController controller,KeyEvent event){  if (!controller.isBeingCast())   return false;  int action=event.getAction();  int keyCode=event.getKeyCode();switch (keyCode) {case KeyEvent.KEYCODE_VOLUME_DOWN:    if (action == KeyEvent.ACTION_DOWN)     controller.setRemoteVolume(-1);  return true;case KeyEvent.KEYCODE_VOLUME_UP:if (action == KeyEvent.ACTION_DOWN) controller.setRemoteVolume(1);return true;default :return false;}}  }
class C{  public IStoredListIterator<T> next(IStoredListIterator<T> slh){  IStoredListIterator<T> slnext=nextPos((StoredListIterator<T>)slh);  if (slnext == null)   slh.release();  return slnext;}  }
class C{  public long optLong(String key){  return this.optLong(key,0);}  }
class C{  public void transformClass(SootClass sc,boolean removeAssignments){  SootMethod smInit=sc.getMethodByNameUnsafe("<clinit>");  if (smInit == null)   return;  Set<SootField> nonConstantFields=new HashSet<SootField>();  Map<SootField,ConstantValueTag> newTags=new HashMap<SootField,ConstantValueTag>();  Set<SootField> removeTagList=new HashSet<SootField>();  for (Iterator<Unit> itU=smInit.getActiveBody().getUnits().snapshotIterator(); itU.hasNext(); ) {    Unit u=itU.next();    if (u instanceof AssignStmt) {      AssignStmt assign=(AssignStmt)u;      if (assign.getLeftOp() instanceof StaticFieldRef && assign.getRightOp() instanceof Constant) {        SootField field=((StaticFieldRef)assign.getLeftOp()).getField();        if (nonConstantFields.contains(field))         continue;        if (field.getDeclaringClass().equals(sc) && field.isStatic() && field.isFinal()) {          boolean found=false;          for (          Tag t : field.getTags()) {            if (t instanceof ConstantValueTag) {              if (checkConstantValue((ConstantValueTag)t,(Constant)assign.getRightOp())) {                if (removeAssignments)                 itU.remove();              } else {                G.v().out.println("WARNING: Constant value for field '" + field + "' mismatch between code ("+ (Constant)assign.getRightOp()+ ") and constant table ("+ t+ ")");                removeTagList.add(field);              }              found=true;              break;            }          }          if (!found) {            if (!checkConstantValue(newTags.get(field),(Constant)assign.getRightOp())) {              nonConstantFields.add(field);              newTags.remove(field);              removeTagList.add(field);              continue;            }            ConstantValueTag newTag=createConstantTagFromValue((Constant)assign.getRightOp());            if (newTag != null)             newTags.put(field,newTag);          }        }      } else       if (assign.getLeftOp() instanceof StaticFieldRef) {        SootField sf=((StaticFieldRef)assign.getLeftOp()).getField();        removeTagList.add(sf);      }    }  }  for (  Entry<SootField,ConstantValueTag> entry : newTags.entrySet()) {    SootField field=entry.getKey();    if (removeTagList.contains(field))     continue;    field.addTag(entry.getValue());  }  if (removeAssignments && !newTags.isEmpty())   for (Iterator<Unit> itU=smInit.getActiveBody().getUnits().snapshotIterator(); itU.hasNext(); ) {    Unit u=itU.next();    if (u instanceof AssignStmt) {      AssignStmt assign=(AssignStmt)u;      if (assign.getLeftOp() instanceof FieldRef)       if (newTags.containsKey(((FieldRef)assign.getLeftOp()).getField()))       itU.remove();    }  }  for (  SootField sf : removeTagList) {    if (removeTagList.contains(sf)) {      List<Tag> toRemoveTagList=new ArrayList<Tag>();      for (      Tag t : sf.getTags()) {        if (t instanceof ConstantValueTag) {          toRemoveTagList.add(t);        }      }      for (      Tag t : toRemoveTagList) {        sf.getTags().remove(t);      }    }  }}  }
class C{  private static void organizeParts(String whole,String[] parts,int[] partsIndex,int len,String tokens) throws IllegalArgumentException {  int idx=tokens.length();  for (int i=len - 1; i >= 0; i--) {    if (parts[i] == null) {      throw new IllegalArgumentException(whole);    }    int nidx=tokens.lastIndexOf(parts[i].charAt(parts[i].length() - 1),idx - 1);    if (nidx == -1) {      throw new IllegalArgumentException(whole);    }    for (int j=nidx + 1; j < idx; j++) {      parts[j]=null;    }    idx=nidx;    parts[idx]=parts[i];    partsIndex[idx]=partsIndex[i];  }  for (idx--; idx >= 0; idx--) {    parts[idx]=null;  }}  }
class C{  public void clear(){  uid=0;  bitScore=0;  percentIdentity=0;  refSeqId=null;  expected=0;  length=0;  ignore=false;  text=null;  cName2id.clear();}  }
class C{  public void animateY(int durationMillis,EasingFunction easing){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorY=ObjectAnimator.ofFloat(this,"phaseY",0f,1f);  animatorY.setInterpolator(easing);  animatorY.setDuration(durationMillis);  animatorY.addUpdateListener(mListener);  animatorY.start();}  }
class C{  public static void write(File file,CharSequence data,String encoding) throws IOException {  write(file,data,encoding,false);}  }
class C{  public WallPostQuery guid(String value){  return unsafeParam("guid",value);}  }
class C{  public IObjectInfo<T> add(T subject){  return store_impl(subject);}  }
class C{  private static SecretKey loadSecretKey(){  final String PRIVATE_KEY_FILENAME="gs-private.key";  SecretKey secretKey=KeyFactory.loadKey(PRIVATE_KEY_FILENAME);  if (secretKey == null) {    secretKey=KeyFactory.generateKey(new byte[]{-83,-117,-82,-28,100,-16,18,18,-105,-124,-22,86,102,-34,107,123},"AES");  }  return secretKey;}  }
class C{  public final long readLong(){  final int byte1=bs.readByte();  final int byte2=bs.readByte();  final int byte3=bs.readByte();  final int byte4=bs.readByte();  final long byte5=bs.readByte();  final long byte6=bs.readByte();  final long byte7=bs.readByte();  final long byte8=bs.readByte();  return (long)((byte8 << 56) + (byte7 << 48) + (byte6 << 40)+ (byte5 << 32)+ (byte4 << 24)+ (byte3 << 16)+ (byte2 << 8)+ byte1);}  }
class C{  public static int copy(Reader input,Writer output) throws IOException {  char[] buffer=new char[DEFAULT_BUFFER_SIZE];  int count=0;  int n=0;  while (-1 != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  return count;}  }
class C{  public static byte[] decode(byte[] source) throws java.io.IOException {  byte[] decoded=null;  decoded=decode(source,0,source.length,Base64.NO_OPTIONS);  return decoded;}  }
class C{  public boolean onReceivedClientCertRequest(CordovaWebView view,ICordovaClientCertRequest request){  for (  CordovaPlugin plugin : this.pluginMap.values()) {    if (plugin != null && plugin.onReceivedClientCertRequest(app,request)) {      return true;    }  }  return false;}  }
class C{  public void addValue(double v){  if (windowSize != INFINITE_WINDOW) {    if (getN() == windowSize) {      eDA.addElementRolling(v);    } else     if (getN() < windowSize) {      eDA.addElement(v);    }  } else {    eDA.addElement(v);  }}  }
class C{  private void moveToState(final State newState,final boolean hasLifecycleMethodBeenCalled){  final State oldState=mState;  if (hasLifecycleMethodBeenCalled) {    if (newState != oldState) {      throw new IllegalStateException("first call moveToState(<state>, false);");    }  }  if (newState != oldState) {switch (oldState) {case INITIALIZED:      if (newState == State.VIEW_DETACHED) {        break;      } else {        throw new IllegalStateException("Can't move to state " + newState + ", the next state after INITIALIZED has to be VIEW_DETACHED");      }case VIEW_DETACHED:    if (newState == State.VIEW_ATTACHED) {      break;    } else     if (newState == State.DESTROYED) {      break;    } else {      throw new IllegalStateException("Can't move to state " + newState + ", the allowed states after VIEW_DETACHED are VIEW_ATTACHED or DESTROYED");    }case VIEW_ATTACHED:  if (newState == State.VIEW_DETACHED) {    break;  } else {    throw new IllegalStateException("Can't move to state " + newState + ", the next state after VIEW_ATTACHED has to be VIEW_DETACHED");  }case DESTROYED:throw new IllegalStateException("once destroyed the presenter can't be moved to a different state");}mState=newState;}for (int i=0; i < mLifecycleObservers.size(); i++) {mLifecycleObservers.get(i).onChange(newState,hasLifecycleMethodBeenCalled);}}  }
class C{  public boolean unlike(User user){  boolean unlike=this.likedBy.remove(user);  if (unlike) {    this.likes--;  }  return unlike;}  }
class C{  public IteratorBuilder addTemplate(Object template){  templates.add(template);  return this;}  }
class C{  public DotGraphEdge(DotGraphNode src,DotGraphNode dst){  this.start=src;  this.end=dst;  this.isDirected=true;}  }
class C{  @Override public void startDTD(XMLLocator locator,Augmentations augs) throws XNIException {  fInDTD=true;}  }
class C{  public Type type(){  return type;}  }
class C{  public ClassScanner(String packageName,Collection<Class> cacheValues){  this.packageName=packageName;  putPrimitivesInValueCache();  putInArgumentValueCache(cacheValues);}  }
class C{  public static String updateGeneric(HttpServletRequest request,HttpServletResponse response){  String entityName=request.getParameter("entityName");  Locale locale=UtilHttp.getLocale(request);  if (entityName == null || entityName.length() <= 0) {    String errMsg=UtilProperties.getMessage(GenericWebEvent.err_resource,"genericWebEvent.entity_name_not_specified",locale) + ".";    request.setAttribute("_ERROR_MESSAGE_",errMsg);    Debug.logWarning("[GenericWebEvent.updateGeneric] The entityName was not specified, but is required.",module);    return "error";  }  Security security=(Security)request.getAttribute("security");  Delegator delegator=(Delegator)request.getAttribute("delegator");  if (security == null) {    String errMsg=UtilProperties.getMessage(GenericWebEvent.err_resource,"genericWebEvent.security_object_not_found",locale) + ".";    request.setAttribute("_ERROR_MESSAGE_",errMsg);    Debug.logWarning("[updateGeneric] The security object was not found in the request, please check the control servlet init.",module);    return "error";  }  if (delegator == null) {    String errMsg=UtilProperties.getMessage(GenericWebEvent.err_resource,"genericWebEvent.delegator_object_not_found",locale) + ".";    request.setAttribute("_ERROR_MESSAGE_",errMsg);    Debug.logWarning("[updateGeneric] The delegator object was not found in the request, please check the control servlet init.",module);    return "error";  }  ModelReader reader=delegator.getModelReader();  ModelEntity entity=null;  try {    entity=reader.getModelEntity(entityName);  } catch (  GenericEntityException e) {    Debug.logError(e,module);  }  String updateMode=request.getParameter("UPDATE_MODE");  if (updateMode == null || updateMode.length() <= 0) {    String errMsg=UtilProperties.getMessage(GenericWebEvent.err_resource,"genericWebEvent.update_mode_not_specified",locale) + ".";    request.setAttribute("_ERROR_MESSAGE_",errMsg);    Debug.logWarning("[updateGeneric] Update Mode was not specified, but is required; entityName: " + entityName,module);    return "error";  }  if (!security.hasEntityPermission("ENTITY_DATA","_" + updateMode,request.getSession()) && !security.hasEntityPermission(entity.getPlainTableName(),"_" + updateMode,request.getSession())) {    Map<String,String> messageMap=UtilMisc.toMap("updateMode",updateMode,"entityName",entity.getEntityName(),"entityPlainTableName",entity.getPlainTableName());    String errMsg=UtilProperties.getMessage(GenericWebEvent.err_resource,"genericWebEvent.not_sufficient_permissions_01",messageMap,locale);    errMsg+=UtilProperties.getMessage(GenericWebEvent.err_resource,"genericWebEvent.not_sufficient_permissions_02",messageMap,locale) + ".";    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  GenericValue findByEntity=delegator.makeValue(entityName);  String errMsgPk="";  Iterator<ModelField> pksIter=entity.getPksIterator();  while (pksIter.hasNext()) {    String errMsg="";    ModelField field=pksIter.next();    ModelFieldType type=null;    try {      type=delegator.getEntityFieldType(entity,field.getType());    } catch (    GenericEntityException e) {      Debug.logWarning(e,module);      Map<String,String> messageMap=UtilMisc.toMap("fieldType",field.getType());      errMsg+=UtilProperties.getMessage(GenericWebEvent.err_resource,"genericWebEvent.fatal_error_param",messageMap,locale) + ".";    }    String fval=request.getParameter(field.getName());    if (UtilValidate.isNotEmpty(fval)) {      try {        findByEntity.setString(field.getName(),fval);      } catch (      Exception e) {        Map<String,String> messageMap=UtilMisc.toMap("fval",fval);        errMsg=errMsg + "<li>" + field.getColName()+ UtilProperties.getMessage(GenericWebEvent.err_resource,"genericWebEvent.conversion_failed",messageMap,locale)+ type.getJavaType()+ ".";        Debug.logWarning("[updateGeneric] " + field.getColName() + " conversion failed: \""+ fval+ "\" is not a valid "+ type.getJavaType()+ "; entityName: "+ entityName,module);      }    }  }  if (errMsgPk.length() > 0) {    request.setAttribute("_ERROR_MESSAGE_",errMsgPk);    return "error";  }  if (updateMode.equals("DELETE")) {    try {      delegator.removeByPrimaryKey(findByEntity.getPrimaryKey());    } catch (    GenericEntityException e) {      String errMsg=UtilProperties.getMessage(GenericWebEvent.err_resource,"genericWebEvent.delete_failed",locale) + ": " + e.toString();      Debug.logWarning(e,errMsg,module);      request.setAttribute("_ERROR_MESSAGE_",errMsg);      return "error";    }    return "success";  }  String errMsgNonPk="";  Iterator<ModelField> nopksIter=entity.getNopksIterator();  while (nopksIter.hasNext()) {    ModelField field=nopksIter.next();    ModelFieldType type=null;    try {      type=delegator.getEntityFieldType(entity,field.getType());    } catch (    GenericEntityException e) {      Debug.logWarning(e,module);      Map<String,String> messageMap=UtilMisc.toMap("fieldType",field.getType());      errMsgNonPk+=UtilProperties.getMessage(GenericWebEvent.err_resource,"genericWebEvent.fatal_error_param",messageMap,locale) + ".";    }    String fval=request.getParameter(field.getName());    if (UtilValidate.isNotEmpty(fval)) {      try {        findByEntity.setString(field.getName(),fval);      } catch (      Exception e) {        Map<String,String> messageMap=UtilMisc.toMap("fval",fval);        errMsgNonPk+=field.getColName() + UtilProperties.getMessage(GenericWebEvent.err_resource,"genericWebEvent.conversion_failed",messageMap,locale) + type.getJavaType()+ ".";        Debug.logWarning("[updateGeneric] " + field.getColName() + " conversion failed: \""+ fval+ "\" is not a valid "+ type.getJavaType()+ "; entityName: "+ entityName,module);      }    } else {      findByEntity.set(field.getName(),null);    }  }  if (errMsgNonPk.length() > 0) {    request.setAttribute("_ERROR_MESSAGE_",errMsgNonPk);    return "error";  }  if (updateMode.equals("CREATE")) {    GenericValue tempEntity=null;    try {      tempEntity=EntityQuery.use(delegator).from(findByEntity.getEntityName()).where(findByEntity.getPrimaryKey()).queryOne();    } catch (    GenericEntityException e) {      String errMsg=UtilProperties.getMessage(GenericWebEvent.err_resource,"genericWebEvent.create_failed_by_check",locale) + ": " + e.toString();      Debug.logWarning(e,errMsg,module);      request.setAttribute("_ERROR_MESSAGE_",errMsg);      return "error";    }    if (tempEntity != null) {      Map<String,String> messageMap=UtilMisc.toMap("primaryKey",findByEntity.getPrimaryKey().toString());      String errMsg="[updateGeneric] " + entity.getEntityName() + UtilProperties.getMessage(GenericWebEvent.err_resource,"genericWebEvent.already_exists_pk",messageMap,locale)+ ".";      Debug.logWarning(errMsg,module);    }  }  String errMsgParam="";  Iterator<ModelField> fieldIter=entity.getFieldsIterator();  while (fieldIter.hasNext()) {    ModelField field=fieldIter.next();    for (    String curValidate : field.getValidators()) {      Class<?>[] paramTypes=new Class[]{String.class};      Object[] params=new Object[]{findByEntity.get(field.getName()).toString()};      String className="org.ofbiz.base.util.UtilValidate";      String methodName=curValidate;      if (curValidate.indexOf('.') > 0) {        className=curValidate.substring(0,curValidate.lastIndexOf('.'));        methodName=curValidate.substring(curValidate.lastIndexOf('.') + 1);      }      Class<?> valClass;      try {        ClassLoader loader=Thread.currentThread().getContextClassLoader();        valClass=loader.loadClass(className);      } catch (      ClassNotFoundException cnfe) {        Debug.logError("[updateGeneric] Could not find validation class: " + className + "; ignoring.",module);        continue;      }      Method valMethod;      try {        valMethod=valClass.getMethod(methodName,paramTypes);      } catch (      NoSuchMethodException cnfe) {        Debug.logError("[updateGeneric] Could not find validation method: " + methodName + " of class "+ className+ "; ignoring.",module);        continue;      }      Boolean resultBool;      try {        resultBool=(Boolean)valMethod.invoke(null,params);      } catch (      Exception e) {        Debug.logError("[updateGeneric] Could not access validation method: " + methodName + " of class "+ className+ "; returning true.",module);        resultBool=Boolean.TRUE;      }      if (!resultBool.booleanValue()) {        Field msgField;        String message;        try {          msgField=valClass.getField(curValidate + "Msg");          message=(String)msgField.get(null);        } catch (        Exception e) {          Debug.logError("[updateGeneric] Could not find validation message field: " + curValidate + "Msg of class "+ className+ "; returning generic validation failure message.",module);          message=UtilProperties.getMessage(GenericWebEvent.err_resource,"genericWebEvent.validation_failed",locale) + ".";        }        errMsgParam+=field.getColName() + " " + curValidate+ " "+ UtilProperties.getMessage(GenericWebEvent.err_resource,"genericWebEvent.failed",locale)+ ": "+ message;        Debug.logWarning("[updateGeneric] " + field.getColName() + " "+ curValidate+ " failed: "+ message,module);      }    }  }  if (errMsgParam.length() > 0) {    errMsgParam=UtilProperties.getMessage(GenericWebEvent.err_resource,"genericWebEvent.following_error_occurred",locale) + errMsgParam;    request.setAttribute("_ERROR_MESSAGE_",errMsgParam);    return "error";  }  if (updateMode.equals("CREATE")) {    try {      delegator.create(findByEntity.getEntityName(),findByEntity.getAllFields());    } catch (    GenericEntityException e) {      Map<String,String> messageMap=UtilMisc.toMap("entityName",entity.getEntityName());      String errMsg=UtilProperties.getMessage(GenericWebEvent.err_resource,"genericWebEvent.creation_param_failed",messageMap,locale) + ": " + findByEntity.toString()+ ": "+ e.toString();      Debug.logWarning(e,errMsg,module);      request.setAttribute("_ERROR_MESSAGE_",errMsg);      return "error";    }  } else   if (updateMode.equals("UPDATE")) {    GenericValue value=delegator.makeValue(findByEntity.getEntityName(),findByEntity.getAllFields());    try {      value.store();    } catch (    GenericEntityException e) {      Map<String,String> messageMap=UtilMisc.toMap("entityName",entity.getEntityName());      String errMsg=UtilProperties.getMessage(GenericWebEvent.err_resource,"genericWebEvent.update_of_param_failed",messageMap,locale) + ": " + value.toString()+ ": "+ e.toString();      Debug.logWarning(e,errMsg,module);      request.setAttribute("_ERROR_MESSAGE_",errMsg);      return "error";    }  } else {    Map<String,String> messageMap=UtilMisc.toMap("updateMode",updateMode);    String errMsg=UtilProperties.getMessage(GenericWebEvent.err_resource,"genericWebEvent.update_of_param_failed",messageMap,locale) + ".";    request.setAttribute("_ERROR_MESSAGE_",errMsg);    Debug.logWarning("updateGeneric: Update Mode specified (" + updateMode + ") was not valid for entity: "+ findByEntity.toString(),module);    return "error";  }  return "success";}  }
class C{  @Override public void retry(VolleyError error) throws VolleyError {  mCurrentRetryCount++;  mCurrentTimeoutMs+=(mCurrentTimeoutMs * mBackoffMultiplier);  if (!hasAttemptRemaining()) {    throw error;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_EXTEND_ACCOUNT_WAREHOUSE_CANT_EXTEND_MORE_DUE_TO_MAXIMUM_EXTEND_LEVEL_BY_THIS_NPC(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1300441,value0,value1);}  }
class C{  public TIntHashSet(int initialCapacity,TIntHashingStrategy strategy){  super(initialCapacity,strategy);}  }
class C{  public boolean checkIfScanIsNotPresentForUser(final String userId,final String scanId) throws UnsupportedEncodingException, ParserConfigurationException, IOException, SAXException, DASTProxyException, XPathExpressionException {  LOGGER.debug("Inside checkIfScanIsNotPresentForUser...1");  boolean retValue=true;  try {    final XPathFactory factory=XPathFactory.newInstance();    final XPath xpath=factory.newXPath();    LOGGER.debug("Inside checkIfScanIsNotPresentForUser...2");    xpath.setNamespaceContext(_nsContext);    Document response=sendRESTRequestToASE(AppScanConstants.APPSCAN_BASE_URL + "folders/" + userId+ "/folderitems","");    LOGGER.debug("Inside checkIfScanIsNotPresentForUser...3...response...=" + response);    LOGGER.debug("Check if scan exists in the system. ");    checkForError(response,null);    final XPathExpression expr=xpath.compile("//ase:folder-items/ase:content-scan-job[contains(ase:id,'" + scanId + "')]/ase:id/text()");    LOGGER.debug("Inside checkIfScanIsNotPresentForUser...4....expr=" + expr);    final String id=(String)expr.evaluate(response,XPathConstants.STRING);    LOGGER.debug("Inside checkIfScanIsNotPresentForUser...5....id=" + id);    if (id != null && !id.isEmpty()) {      LOGGER.debug("Inside checkIfScanIsNotPresentForUser...6");      retValue=false;    }  } catch (  ConnectException ce) {    LOGGER.error("Failed in checking if the scan is present for user...userId=" + userId + " scanId="+ scanId);    LOGGER.error(ce);  }  return retValue;}  }
class C{  public Polygon2D(Polygon pol){  if (pol == null) {    throw new IndexOutOfBoundsException("null Polygon");  }  this.npoints=pol.npoints;  this.xpoints=new float[pol.npoints];  this.ypoints=new float[pol.npoints];  for (int i=0; i < pol.npoints; i++) {    xpoints[i]=pol.xpoints[i];    ypoints[i]=pol.ypoints[i];  }  calculatePath();}  }
class C{  public void emitWithGravity(View emiter,int gravity,int particlesPerSecond){  configureEmiter(emiter,gravity);  startEmiting(particlesPerSecond);}  }
class C{  protected int findNext(int from){  if (from < -1)   return -1;  final int to=this.allHeaders.size() - 1;  boolean found=false;  while (!found && (from < to)) {    from++;    found=filterHeader(from);  }  return found ? from : -1;}  }
class C{  private void saveTo(File file) throws IOException {  FileOutputStream fos=null;  try {    fos=new FileOutputStream(file);    ObjectOutputStream oos=new ObjectOutputStream(fos);    try {      oos.writeObject(this);    }  finally {      close(oos,false);    }  }  finally {    close(fos,false);  }}  }
class C{  private void cleanup(){  Iterator<Entry<Byte,Nonce>> iter=table.entrySet().iterator();  while (iter.hasNext()) {    Nonce nonce=iter.next().getValue();    if (nonce.getTimer() != null) {      long removeAt=nonce.getTimer().getExpiresAt() + 10000;      if (System.currentTimeMillis() > removeAt) {        logger.warn("NODE {}: Expiring nonce with id={}",node.getNodeId(),nonce.getNonceId());        iter.remove();        expiredNonceIdList.add(nonce.getNonceId());      }    }  }}  }
class C{  public ExtendedAnswerHolder update(IEntryPacket updated_entry,Transaction txn,long lease,long timeout,SpaceContext sc,boolean fromReplication,boolean origin,boolean newRouter,int modifiers) throws UnusableEntryException, UnknownTypeException, TransactionException, RemoteException, InterruptedException {  if (Modifiers.contains(modifiers,Modifiers.EXPLAIN_PLAN)) {    throw new UnsupportedOperationException("Sql explain plan is not supported for update operation");  }  return update(updated_entry,txn,lease,timeout,sc,fromReplication,origin,newRouter,modifiers,null);}  }
class C{  public Zmat(Z1 A){  Parameters.BaseIndexNotChangeable=true;  basex=Parameters.BaseIndex;  nrow=A.n;  ncol=1;  getProperties();  re=new double[nr][nc];  im=new double[nr][nc];  for (int i=0; i < nr; i++) {    re[i][0]=A.re[i];    im[i][0]=A.im[i];  }}  }
class C{  @Override public void endElement(QName element,Augmentations augs) throws XNIException {  if (DEBUG_EVENTS) {    System.out.println("==>endElement: " + element);  }  if (augs != null) {    ElementPSVI elementPSVI=(ElementPSVI)augs.getItem(Constants.ELEMENT_PSVI);    if (elementPSVI != null) {      ElementImpl elementNode=(ElementImpl)fCurrentNode;      if (fPSVI) {        ((PSVIElementNSImpl)fCurrentNode).setPSVI(elementPSVI);      }      if (elementNode instanceof ElementNSImpl) {        XSTypeDefinition type=elementPSVI.getMemberTypeDefinition();        if (type == null) {          type=elementPSVI.getTypeDefinition();        }        ((ElementNSImpl)elementNode).setType(type);      }      String normalizedValue=elementPSVI.getSchemaNormalizedValue();      if ((fConfiguration.features & DOMConfigurationImpl.DTNORMALIZATION) != 0) {        if (normalizedValue != null)         elementNode.setTextContent(normalizedValue);      } else {        String text=elementNode.getTextContent();        if (text.length() == 0) {          if (normalizedValue != null)           elementNode.setTextContent(normalizedValue);        }      }      return;    }  }  if (fCurrentNode instanceof ElementNSImpl) {    ((ElementNSImpl)fCurrentNode).setType(null);  }}  }
class C{  public static double[] weightsFor(double[] vector){  List<double[]> coords=coordSplit(vector);  double[] x=coords.get(0);  double[] y=coords.get(1);  double meanX=sum(x) / x.length;  double meanY=sum(y) / y.length;  double sumOfMeanDifferences=sumOfMeanDifferences(x,y);  double xDifferenceOfMean=sumOfMeanDifferencesOnePoint(x);  double w_1=sumOfMeanDifferences / xDifferenceOfMean;  double w_0=meanY - (w_1) * meanX;  double[] ret=new double[vector.length];  ret[0]=w_0;  ret[1]=w_1;  return ret;}  }
class C{  public static byte[] shortToUlaw(short[] samples){  if (samples == null)   return null;  byte[] ulaw=new byte[samples.length];  for (int i=0; i < samples.length; i++) {    ulaw[i]=shortToUlaw(samples[i]);  }  return ulaw;}  }
class C{  @Override public void cleanup(){  fEntityManager.closeReaders();}  }
class C{  public static double granularity(float range,int labelCount){  double rawInterval=range / labelCount;  double interval=Utils.roundToNextSignificant(rawInterval);  double intervalMagnitude=Utils.roundToNextSignificant(Math.pow(10,(int)Math.log10(interval)));  int intervalSigDigit=(int)(interval / intervalMagnitude);  if (intervalSigDigit > 5) {    interval=Math.floor(10 * intervalMagnitude);  }  return interval * 0.1;}  }
class C{  public void destroyView() throws CanceledException {  searchManager.getFindDialogAsToolBar().close();  frame.setVisible(false);  doc.getSampleSelection().removeSampleSelectionListener(selectionListener);  MeganProperties.removePropertiesListListener(menuBar.getRecentFilesListener());  dir.removeViewer(this);  frame.dispose();}  }
class C{  public static boolean checkSelfPermission(Context context,String permission){  return ContextCompat.checkSelfPermission(context,permission) != android.content.pm.PackageManager.PERMISSION_GRANTED;}  }
class C{  public ZoomToFitControl(int button){  this.m_button=button;}  }
class C{  public void putAllEnv(Map<String,? extends Object> values){  for (  Map.Entry<String,? extends Object> entry : values.entrySet()) {    this.putEnv(entry.getKey(),entry.getValue());  }}  }
class C{  public double calcPointToLineDistance(Entry startEntry,Entry endEntry,Entry entryPoint){  float xDiffEndStart=(float)endEntry.getXIndex() - (float)startEntry.getXIndex();  float xDiffEntryStart=(float)entryPoint.getXIndex() - (float)startEntry.getXIndex();  double normalLength=Math.sqrt((xDiffEndStart) * (xDiffEndStart) + (endEntry.getVal() - startEntry.getVal()) * (endEntry.getVal() - startEntry.getVal()));  return Math.abs((xDiffEntryStart) * (endEntry.getVal() - startEntry.getVal()) - (entryPoint.getVal() - startEntry.getVal()) * (xDiffEndStart)) / normalLength;}  }
class C{  @SuppressLint("NewApi") static private void findSupportedColorFormats(String mimeType){  SparseArray<ArrayList<String>> softwareCodecs=new SparseArray<ArrayList<String>>();  SparseArray<ArrayList<String>> hardwareCodecs=new SparseArray<ArrayList<String>>();  if (sSoftwareCodecs.containsKey(mimeType)) {    return;  }  Log.v(TAG,"Searching supported color formats for mime type \"" + mimeType + "\"...");  for (int j=MediaCodecList.getCodecCount() - 1; j >= 0; j--) {    MediaCodecInfo codecInfo=MediaCodecList.getCodecInfoAt(j);    if (!codecInfo.isEncoder())     continue;    String[] types=codecInfo.getSupportedTypes();    for (int i=0; i < types.length; i++) {      if (types[i].equalsIgnoreCase(mimeType)) {        MediaCodecInfo.CodecCapabilities capabilities=codecInfo.getCapabilitiesForType(mimeType);        boolean software=false;        for (int k=0; k < SOFTWARE_ENCODERS.length; k++) {          if (codecInfo.getName().equalsIgnoreCase(SOFTWARE_ENCODERS[i])) {            software=true;          }        }        for (int k=0; k < capabilities.colorFormats.length; k++) {          int format=capabilities.colorFormats[k];          if (software) {            if (softwareCodecs.get(format) == null)             softwareCodecs.put(format,new ArrayList<String>());            softwareCodecs.get(format).add(codecInfo.getName());          } else {            if (hardwareCodecs.get(format) == null)             hardwareCodecs.put(format,new ArrayList<String>());            hardwareCodecs.get(format).add(codecInfo.getName());          }        }      }    }  }  StringBuilder e=new StringBuilder();  e.append("Supported color formats on this phone: ");  for (int i=0; i < softwareCodecs.size(); i++)   e.append(softwareCodecs.keyAt(i) + ", ");  for (int i=0; i < hardwareCodecs.size(); i++)   e.append(hardwareCodecs.keyAt(i) + (i == hardwareCodecs.size() - 1 ? "." : ", "));  Log.v(TAG,e.toString());  sSoftwareCodecs.put(mimeType,softwareCodecs);  sHardwareCodecs.put(mimeType,hardwareCodecs);  return;}  }
class C{  private int findInsertionIndex(final int key){  return findInsertionIndex(keys,states,key,mask);}  }
class C{  private void startObservation(){  Log_OC.d(TAG,"Loading all kept-in-sync files from database to start watching them");  Cursor cursorOnKeptInSync=getContentResolver().query(ProviderTableMeta.CONTENT_URI,null,ProviderTableMeta.FILE_KEEP_IN_SYNC + " = ?",new String[]{String.valueOf(1)},null);  if (cursorOnKeptInSync != null) {    if (cursorOnKeptInSync.moveToFirst()) {      String localPath="";      String accountName="";      Account account=null;      do {        localPath=cursorOnKeptInSync.getString(cursorOnKeptInSync.getColumnIndex(ProviderTableMeta.FILE_STORAGE_PATH));        accountName=cursorOnKeptInSync.getString(cursorOnKeptInSync.getColumnIndex(ProviderTableMeta.FILE_ACCOUNT_OWNER));        account=new Account(accountName,MainApp.getAccountType());        if (!AccountUtils.exists(account,this) || localPath == null || localPath.length() <= 0) {          continue;        }        addObservedFile(localPath,account);      } while (cursorOnKeptInSync.moveToNext());    }    cursorOnKeptInSync.close();  }}  }
class C{  public <X extends DataSource>boolean hasProperties(Class<X> type){  return hasProperties(null,type);}  }
class C{  public static boolean audit(){  return audit.get() == null ? true : audit.get();}  }
class C{  public boolean isDurableWriteEnabled(){  return getBoolean(SERVER_DURABLE_WRITE_ENABLED,SERVER_DURABLE_WRITE_ENABLED_DEFAULT);}  }
class C{  public static boolean isTrue(boolean expression,String message){  if (!expression)   throw new AssertionFailedException("assertion failed: " + message);  return expression;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public ExprStmt fullCopy(){  ExprStmt tree=(ExprStmt)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public void install(Intent intentResult,Class<? extends AbstractResultService> serviceClass,AbstractPatch upgradePatch,AbstractPatch repairPatch){  sInstalled=true;  AbstractResultService.setResultServiceClass(serviceClass);  TinkerPatchService.setPatchProcessor(upgradePatch,repairPatch);  if (!isTinkerEnabled()) {    TinkerLog.e(TAG,"tinker is disabled");    return;  }  if (intentResult == null) {    throw new TinkerRuntimeException("intentResult must not be null.");  }  tinkerLoadResult=new TinkerLoadResult();  tinkerLoadResult.parseTinkerResult(getContext(),intentResult);  loadReporter.onLoadResult(patchDirectory,tinkerLoadResult.loadCode,tinkerLoadResult.costTime);  if (!loaded) {    TinkerLog.w(TAG,"tinker load fail!");  }}  }
class C{  public void disableDashedHighlightLine(){  mHighlightDashPathEffect=null;}  }
class C{  public MessagesGetChatUsersQueryWithChatIds nameCase(UsersNameCase value){  return unsafeParam("name_case",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FIND_POS_NPC_FOUND_DEV(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400548,value0,value1);}  }
class C{  @Override public final void processValue(final SourceDataTagValue sourceDataTagValue){  LOGGER.debug("entering processValue()..");  ProcessConfiguration processConfiguration=configurationController.getProcessConfiguration();  DataTagValueUpdate dataTagValueUpdate;  dataTagValueUpdate=new DataTagValueUpdate(processConfiguration.getProcessID(),processConfiguration.getprocessPIK());  dataTagValueUpdate.addValue(sourceDataTagValue);  LOGGER.trace("value added to value update message");  if (this.isEnabled) {    LOGGER.trace("not in test mode.");    jmsTemplate.setPriority(sourceDataTagValue.getPriority());    jmsTemplate.setTimeToLive(sourceDataTagValue.getTimeToLive());    if (sourceDataTagValue.isGuaranteedDelivery()) {      if (LOGGER.isDebugEnabled()) {        LOGGER.debug("\t sending PERSISTENT message");      }      jmsTemplate.setDeliveryMode(javax.jms.DeliveryMode.PERSISTENT);    } else {      if (LOGGER.isDebugEnabled()) {        LOGGER.debug("\t sending NON-PERSISTENT message");      }      jmsTemplate.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);    }    jmsTemplate.convertAndSend(dataTagValueUpdate);  }  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("leaving processValue()");  }}  }
class C{  public static Map<String,String> strToMap(String str,String delim,boolean trim){  return strToMap(str,delim,trim,null);}  }
class C{  public boolean isEnum(){  return kind == Type.TYPE_ENUM;}  }
class C{  public SM_PET(int actionId,PetCommonData commonData){  this.actionId=actionId;  this.commonData=commonData;}  }
class C{  public static Object calculateGenericExpression(String expression){  final JEP parser=getJep();  parser.parseExpression(expression);  Object result=parser.getValueAsObject();  return result;}  }
class C{  public static boolean isNamedProcess(Context context,String processName){  if (context == null) {    return false;  }  int pid=android.os.Process.myPid();  ActivityManager manager=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  List<RunningAppProcessInfo> processInfoList=manager.getRunningAppProcesses();  if (ListUtils.isEmpty(processInfoList)) {    return false;  }  for (  RunningAppProcessInfo processInfo : processInfoList) {    if (processInfo != null && processInfo.pid == pid && ObjectUtils.isEquals(processName,processInfo.processName)) {      return true;    }  }  return false;}  }
class C{  @Override public void revertToDefaultValue(){  populateField(defaultValue);}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public GroupsIsMemberQueryWithUserIds(VkApiClient client,UserActor actor,String groupId,List<Integer> userIds){  super(client,"groups.isMember",Utils.buildParametrizedType(List.class,MemberStatus.class));  accessToken(actor.getAccessToken());  groupId(groupId);  userIds(userIds);}  }
class C{  public double lngRadians(){  return lngRadians;}  }
class C{  protected String toString(AXmlNode node,int depth){  StringBuilder sb=new StringBuilder();  StringBuilder padding=new StringBuilder();  for (int i=0; i < depth; i++)   padding.append("	");  sb.append(padding).append(node.getTag());  for (  AXmlAttribute<?> attr : node.getAttributes().values()) {    sb.append("\n").append(padding).append("- ").append(attr.getName()).append(": ").append(attr.getValue());  }  for (  AXmlNode n : node.getChildren()) {    sb.append("\n").append(this.toString(n,depth + 1));  }  return sb.toString();}  }
class C{  @Override public void updateList(Set<GeoServerConnection> keySet){  int count=1;  for (  GeoServerConnection connection : keySet) {    PropertyManagerFactory.getInstance().updateValue(GEOSERVER_CONNECTION_FIELD,count,connection.encodeAsString());  }}  }
class C{  public static String decode(byte[] utf8) throws CharacterCodingException {  return decode(ByteBuffer.wrap(utf8),true);}  }
class C{  public AppsSendRequestQuery appId(Integer value){  return unsafeParam("app_id",value);}  }
class C{  protected MessagesGetByIdQuery messageIds(int... value){  return unsafeParam("message_ids",value);}  }
class C{  public static int sumFromTo(int iStart,int iEnd){  int iRes=0;  for (int iCnt=iStart; iCnt <= iEnd; iRes+=iCnt++)   ;  return iRes;}  }
class C{  public HeapDump(File file){  this(file,null);}  }
class C{  protected void resetInternalState(){  setStepStart(null);  setStepSize(FastMath.sqrt(minStep * maxStep));}  }
class C{  public static String createGuestShoppingListCookies(HttpServletRequest request,HttpServletResponse response){  Delegator delegator=(Delegator)request.getAttribute("delegator");  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  HttpSession session=request.getSession(true);  ShoppingCart cart=(ShoppingCart)session.getAttribute("shoppingCart");  GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");  Properties systemProps=System.getProperties();  String guestShoppingUserName="GuestShoppingListId_" + systemProps.getProperty("user.name").replace(" ","_");  String productStoreId=ProductStoreWorker.getProductStoreId(request);  int cookieAge=(60 * 60 * 24* 30);  String autoSaveListId=null;  Cookie[] cookies=request.getCookies();  if (UtilValidate.isNotEmpty(userLogin)) {    String partyId=userLogin.getString("partyId");    if (UtilValidate.isEmpty(partyId)) {      return "success";    }  }  if (cookies != null) {    for (    Cookie cookie : cookies) {      if (cookie.getName().equals(guestShoppingUserName)) {        autoSaveListId=cookie.getValue();        break;      }    }  }  if (ProductStoreWorker.autoSaveCart(delegator,productStoreId)) {    if (UtilValidate.isEmpty(autoSaveListId)) {      try {        Map<String,Object> listFields=UtilMisc.<String,Object>toMap("userLogin",userLogin,"productStoreId",productStoreId,"shoppingListTypeId","SLT_SPEC_PURP","listName",PERSISTANT_LIST_NAME);        Map<String,Object> newListResult=dispatcher.runSync("createShoppingList",listFields);        if (newListResult != null) {          autoSaveListId=(String)newListResult.get("shoppingListId");        }      } catch (      GeneralException e) {        Debug.logError(e,module);      }      Cookie guestShoppingListCookie=new Cookie(guestShoppingUserName,autoSaveListId);      guestShoppingListCookie.setMaxAge(cookieAge);      guestShoppingListCookie.setPath("/");      response.addCookie(guestShoppingListCookie);    }  }  if (UtilValidate.isNotEmpty(autoSaveListId)) {    if (UtilValidate.isNotEmpty(cart)) {      cart.setAutoSaveListId(autoSaveListId);    } else {      cart=ShoppingCartEvents.getCartObject(request);      cart.setAutoSaveListId(autoSaveListId);    }  }  return "success";}  }
class C{  public void addEmojiconGroup(List<EaseEmojiconGroupEntity> groupEntitieList){  for (int i=0; i < groupEntitieList.size(); i++) {    EaseEmojiconGroupEntity groupEntity=groupEntitieList.get(i);    emojiconGroupList.add(groupEntity);    pagerView.addEmojiconGroup(groupEntity,i == groupEntitieList.size() - 1 ? true : false);    tabBar.addTab(groupEntity.getIcon());  }}  }
class C{  public void fireJavascriptEvent(String action){  sendEventMessage(action);}  }
class C{  protected ArrayList computeNames(AbstractTextEditor editor){  IJavaElement jElem=getJavaElement(editor);  ArrayList names=new ArrayList();  if (jElem instanceof ICompilationUnit) {    ICompilationUnit cu=(ICompilationUnit)jElem;    return getNames(cu);  } else {    return names;  }}  }
class C{  public synchronized String toXML(final ConfigurationRequest configurationRequest) throws ParserConfigurationException, TransformerException {  DocumentBuilderFactory builderFactory=DocumentBuilderFactory.newInstance();  DocumentBuilder builder=builderFactory.newDocumentBuilder();  Document dom=builder.newDocument();  Element rootElt=dom.createElement(CONFIGURATION_XML_ROOT);  rootElt.setAttribute(CONFIGURATION_ID_ATTRIBUTE,Integer.toString(configurationRequest.getConfigId()));  dom.appendChild(rootElt);  TransformerFactory transformerFactory=TransformerFactory.newInstance();  Transformer transformer=transformerFactory.newTransformer();  StringWriter writer=new StringWriter();  Result result=new StreamResult(writer);  Source source=new DOMSource(dom);  transformer.transform(source,result);  return writer.getBuffer().toString();}  }
class C{  public V put(long key,V value){  int index=insertionIndex(key);  return doPut(key,value,index);}  }
class C{  public static int exportReadName2Taxon(String format,Director dir,File file,char separator,ProgressListener progressListener) throws IOException {  int totalLines=0;  try {    final MainViewer viewer=dir.getMainViewer();    try (BufferedWriter w=new BufferedWriter(new FileWriter(file))){      final IConnector connector=viewer.getDir().getDocument().getConnector();      final IClassificationBlock classificationBlock=connector.getClassificationBlock(ClassificationType.Taxonomy.toString());      final java.util.Collection<Integer> taxonIds=viewer.getSelectedIds();      progressListener.setSubtask("Read names to taxa");      progressListener.setMaximum(taxonIds.size());      progressListener.setProgress(0);      final boolean wantMatches=(format.endsWith("PathPercent"));      for (      int taxonId : taxonIds) {        Set<String> seen=new HashSet<>();        Set<Integer> allBelow;        Node v=viewer.getTaxId2Node(taxonId);        if (v.getOutDegree() == 0)         allBelow=TaxonomyData.getTree().getAllDescendants(taxonId); else {          allBelow=new HashSet<>();          allBelow.add(taxonId);        }        for (        int id : allBelow) {          if (classificationBlock.getSum(id) > 0) {            try (IReadBlockIterator it=connector.getReadsIterator(viewer.getClassName(),id,0,10000,true,wantMatches)){              while (it.hasNext()) {                final IReadBlock readBlock=it.next();                final String readId=readBlock.getReadName();                if (!seen.contains(readId)) {                  seen.add(readId);                  w.write(readId + separator + getTaxonLabelTarget(dir,format,taxonId,readBlock)+ "\n");                  totalLines++;                }              }            }             progressListener.checkForCancel();          }        }        progressListener.incrementProgress();      }    }   } catch (  CanceledException canceled) {    System.err.println("USER CANCELED");  }  return totalLines;}  }
class C{  XSElementDecl traverseGlobal(Element elmDecl,XSDocumentInfo schemaDoc,SchemaGrammar grammar){  Object[] attrValues=fAttrChecker.checkAttributes(elmDecl,true,schemaDoc);  XSElementDecl element=traverseNamedElement(elmDecl,attrValues,schemaDoc,grammar,true,null);  fAttrChecker.returnAttrArray(attrValues,schemaDoc);  return element;}  }
class C{  protected final void fireColumnEvent(int idx,double prev){  Object[] lstnrs=m_listeners.getArray();  for (int i=0; i < lstnrs.length; ++i)   ((ColumnListener)lstnrs[i]).columnChanged(this,idx,prev);}  }
class C{  public PhotosGetCommentsQuery startCommentId(Integer value){  return unsafeParam("start_comment_id",value);}  }
class C{  @Override public void undoAction(UndoInterface undoRedoObject){  String oldValueObj=(String)undoRedoObject.getOldValue();  functionComboBox.setSelectedItem(oldValueObj);}  }
class C{  protected LinkedHashSet<OrderByColumn> generateSortColumns(String apiSortQuery,Set<LogicalMetric> logicalMetrics,MetricDictionary metricDictionary) throws BadApiRequestException {  String sortMetricName;  List<String> metricWithDirection;  LinkedHashSet<OrderByColumn> metricSortColumns=new LinkedHashSet<>();  if ("".equals(apiSortQuery) || apiSortQuery == null) {    return metricSortColumns;  }  List<String> requestedSorts=Arrays.asList(apiSortQuery.split(","));  List<String> unknownMetrics=new ArrayList<>();  List<String> unmatchedMetrics=new ArrayList<>();  List<String> unsortableMetrics=new ArrayList<>();  for (  String sort : requestedSorts) {    metricWithDirection=Arrays.asList(sort.split("\\|"));    sortMetricName=metricWithDirection.get(0);    SortDirection sortDirection;    try {      sortDirection=metricWithDirection.size() == 2 ? SortDirection.valueOf(metricWithDirection.get(1).toUpperCase(Locale.ENGLISH)) : SortDirection.DESC;    } catch (    IllegalArgumentException ignored) {      String sortDirectionName=metricWithDirection.get(1);      LOG.debug(SORT_DIRECTION_INVALID.logFormat(sortDirectionName));      throw new BadApiRequestException(SORT_DIRECTION_INVALID.format(sortDirectionName));    }    LogicalMetric logicalMetric=metricDictionary.get(sortMetricName);    if (logicalMetric == null) {      unknownMetrics.add(sortMetricName);      continue;    }    if (!logicalMetrics.contains(logicalMetric)) {      unmatchedMetrics.add(sortMetricName);      continue;    }    if (logicalMetric.getTemplateDruidQuery() == null) {      unsortableMetrics.add(sortMetricName);      continue;    }    metricSortColumns.add(new OrderByColumn(logicalMetric,sortDirection));  }  if (!unknownMetrics.isEmpty()) {    LOG.debug(SORT_METRICS_UNDEFINED.logFormat(unknownMetrics.toString()));    throw new BadApiRequestException(SORT_METRICS_UNDEFINED.format(unknownMetrics.toString()));  }  if (!unmatchedMetrics.isEmpty()) {    LOG.debug(SORT_METRICS_NOT_IN_QUERY_FORMAT.logFormat(unmatchedMetrics.toString()));    throw new BadApiRequestException(SORT_METRICS_NOT_IN_QUERY_FORMAT.format(unmatchedMetrics.toString()));  }  if (!unsortableMetrics.isEmpty()) {    LOG.debug(SORT_METRICS_NOT_SORTABLE_FORMAT.logFormat(unsortableMetrics.toString()));    throw new BadApiRequestException(SORT_METRICS_NOT_SORTABLE_FORMAT.format(unsortableMetrics.toString()));  }  return metricSortColumns;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelBuffCounterATK_A_TO_ME(int num0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200661,num0,skillcaster,skillname);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MERCENARY_FOLLOWING_CANCELED_BY_TOO_DISTANCE(String value0){  return new SM_SYSTEM_MESSAGE(1400458,value0);}  }
class C{  @Override public void initiaize(File file,int entryCount) throws CarbonSortKeyAndGroupByException {  try {    stream=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(file),writeBufferSize));    stream.writeInt(entryCount);  } catch (  FileNotFoundException e1) {    throw new CarbonSortKeyAndGroupByException(e1);  }catch (  IOException e) {    throw new CarbonSortKeyAndGroupByException(e);  }}  }
class C{  public void execute(InnerQueryNode innerQueryNode,ISpaceProxy space,Transaction txn,int readModifier,int max) throws SQLException {  SelectQuery innerQuery=innerQueryNode.getInnerQuery();  innerQuery.validateQuery(space);  innerQuery.setPreparedValues(query.getPreparedValues());  innerQuery.setRouting(query.getRouting());  if (!innerQuery.isPrepared() && !innerQuery.containsSubQueries())   innerQuery.build();  ResponsePacket innerResponse=innerQuery.executeOnSpace(space,txn);  innerQueryNode.setResults(innerResponse.getResultEntry());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_PROCMPHeal_Instant_HEAL_ME_TO_SELF(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200394,num0,skillname);}  }
class C{  private void throwCloseConnection() throws ClosedChannelException {  ClosedChannelException closeEx=new ClosedChannelException();  closeEx.initCause(new IOException("Connection has been closed by peer"));  throw closeEx;}  }
class C{  public void updateWithItemHandler(String key){  remove(key);  put(key,itemHandler.get(key));}  }
class C{  public static void writeStringToFile(File file,String data,String encoding) throws IOException {  writeStringToFile(file,data,encoding,false);}  }
class C{  public static void main(String[] sArgs){  if (sArgs.length > 0) {    SymbolicGraph sg=new SymbolicGraph(1,7);    sg.setDataString(sArgs[0]);    System.out.println(utils.graphToDot(sg,true));  } else   try {    SymbolicGraph sg=new SymbolicGraph(1,1);    sg.addEdge(new VertexImpl("a"),new VertexImpl("b"));    sg.addEdge(new VertexImpl("b"),new VertexImpl("c"));    sg.addEdge(new VertexImpl("b"),new VertexImpl("d"));    sg.addEdge(new VertexImpl("e"),new VertexImpl("d"));    sg.addEdge(new VertexImpl("f"),new VertexImpl("e"));    sg.addEdge(new VertexImpl("f"),new VertexImpl("g"));    sg.addEdge(new VertexImpl("f"),new VertexImpl("h"));    sg.addEdge(new VertexImpl("c"),new VertexImpl("h"));    for (int iCnt=0; iCnt < 100; iCnt++)     System.err.println(sg.getShortestLinkBetween(new VertexImpl("a"),new VertexImpl("h")));  } catch (  Exception ex) {    ex.printStackTrace(System.err);  }}  }
class C{  protected void fireTupleEvent(Table t,int start,int end,int type){  if (m_tupleListeners != null && m_tupleListeners.size() > 0) {    Object[] lstnrs=m_tupleListeners.getArray();    Tuple[] tuples=new Tuple[end - start + 1];    for (int i=0, r=start; r <= end; ++r, ++i) {      tuples[i]=t.getTuple(r);    }    for (int i=0; i < lstnrs.length; ++i) {      TupleSetListener tsl=(TupleSetListener)lstnrs[i];      if (type == EventConstants.INSERT) {        tsl.tupleSetChanged(this,tuples,EMPTY_ARRAY);      } else {        tsl.tupleSetChanged(this,EMPTY_ARRAY,tuples);      }    }  }}  }
class C{  public TreeNodeIterator(Node root,boolean preorder){  m_preorder=preorder;  m_root=root;  m_stack=new ArrayList();  m_stack.add(root);  if (!preorder) {    for (Node n=root.getChild(0); n != null; n=n.getChild(0))     m_stack.add(n);  }}  }
class C{  protected void captureResponseSize(HttpContent httpContent){  ByteBuf bufferedContent=httpContent.content();  int contentSize=bufferedContent.readableBytes();  responseBodySize.addAndGet(contentSize);}  }
class C{  public String[] upload_file(String group_name,byte[] file_buff,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {  return this.do_upload_file(ProtoCommon.STORAGE_PROTO_CMD_UPLOAD_FILE,group_name,null,null,file_ext_name,file_buff.length,new UploadBuff(file_buff,0,file_buff.length),meta_list);}  }
class C{  public static void readFully(InputStream in,byte[] dst) throws IOException {  readFully(in,dst,0,dst.length);}  }
class C{  private void printGrantedAuthorities(final Auth0JWTToken principal){  for (  final GrantedAuthority grantedAuthority : principal.getAuthorities()) {    final String authority=grantedAuthority.getAuthority();    logger.info(authority);  }}  }
class C{  @Override public void onEviction(ResourceKey<K> resourceKey){  for (; ; ) {    Status status=resourceKey.getStatus();switch (status) {case IDLE:      if (resourceKey.goFromIdleToRetired()) {        cache.remove(resourceKey);        return;      }    break;default :  return;}}}  }
class C{  public Main(){}  }
class C{  public void addPaging(Integer pageSize,Integer pageIndex){  ParamValidationUtil.validateParamNotNull(pageSize,"pageSize");  ParamValidationUtil.validateParamNotNull(pageIndex,"pageIndex");  int offset=pageIndex * pageSize;  this.offset=offset;  this.limit=pageSize;  this.usePaging=true;}  }
class C{  public JSONObject accumulate(String key,Object value) throws JSONException {  testValidity(value);  Object o=opt(key);  if (o == null) {    put(key,value instanceof JSONArray ? new JSONArray().put(value) : value);  } else   if (o instanceof JSONArray) {    ((JSONArray)o).put(value);  } else {    put(key,new JSONArray().put(o).put(value));  }  return this;}  }
class C{  public void pow(final double[] x,final int xOffset,final double[] y,final int yOffset,final double[] result,final int resultOffset){  final double[] logX=new double[getSize()];  log(x,xOffset,logX,0);  final double[] yLogX=new double[getSize()];  multiply(logX,0,y,yOffset,yLogX,0);  exp(yLogX,0,result,resultOffset);}  }
class C{  public void updateConfiguration(@NotNull Configuration configuration){  myConfiguration=configuration;  invalidateGraphicsRenderer();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_ABYSS_DOOR_BROKEN(String value1,String value0){  return new SM_SYSTEM_MESSAGE(1301049,value1,value0);}  }
class C{  public Response(){  this(1024);  offset=0;}  }
class C{  @DataProvider public Object[][] badExperimentsPOST(){  Experiment experiment=new Experiment().setDescription("Sample hypothesis.");  return new Object[][]{new Object[]{new Experiment(experiment.setSamplingPercent(completeExperiment.samplingPercent)),"Experiment application name cannot be null or an empty string",HttpStatus.SC_BAD_REQUEST},new Object[]{new Experiment(experiment.setStartTime(completeExperiment.startTime)),"Experiment application name cannot be null or an empty string",HttpStatus.SC_BAD_REQUEST},new Object[]{new Experiment(experiment.setEndTime(completeExperiment.endTime)),"Experiment application name cannot be null or an empty string",HttpStatus.SC_BAD_REQUEST},new Object[]{new Experiment(experiment.setLabel(completeExperiment.label)),"Experiment application name cannot be null or an empty string",HttpStatus.SC_BAD_REQUEST},new Object[]{new Experiment(experiment.setApplication(ApplicationFactory.defaultApplication())),"An unique constraint was violated: An active experiment with label \"SW50ZWdyVGVzdA_1461232889078App_PRIMARY\".\"SW50ZWdyVGVzdA_Experiment_14612328892453\" already exists (id = 70139a10-489b-49bd-ac4c-c7c92ec79917) (null)",HttpStatus.SC_BAD_REQUEST},new Object[]{ExperimentFactory.createExperiment().setState(Constants.EXPERIMENT_STATE_DRAFT),"Unrecognized property \"state\"",HttpStatus.SC_BAD_REQUEST},new Object[]{ExperimentFactory.createCompleteExperiment().setStartTime((String)null),"Could not create experiment \"NewExperiment[id=20533222-2a3f-459d-b6b6-5e05ad1104e3,label=SW50ZWdyVGVzdA_Experiment_146123290282853,applicationName=SW50ZWdyVGVzdA_1461232889078App_PRIMARY,startTime=<null>,endTime=Thu Jun 02 10:01:42 UTC 2016,samplingPercent=1.0,description=A sample Experiment description.,rule=(salary < 10000) && (state = 'VA'),isPersonalizationEnabled=false,modelName=,modelVersion=,isRapidExperiment=false,userCap=0,creatorID=" + userName + "]\"",HttpStatus.SC_INTERNAL_SERVER_ERROR},new Object[]{ExperimentFactory.createCompleteExperiment().setEndTime((String)null),"Could not create experiment \"NewExperiment[id=97daea3b-1523-43e7-8d7c-d7eba2c18ff5,label=SW50ZWdyVGVzdA_Experiment_146123290282954,applicationName=SW50ZWdyVGVzdA_1461232889078App_PRIMARY,startTime=Thu Apr 21 10:01:42 UTC 2016,endTime=<null>,samplingPercent=1.0,description=A sample Experiment description.,rule=(salary < 10000) && (state = 'VA'),isPersonalizationEnabled=false,modelName=,modelVersion=,isRapidExperiment=false,userCap=0,creatorID=" + userName + "]\"",HttpStatus.SC_INTERNAL_SERVER_ERROR},new Object[]{null,"null",HttpStatus.SC_INTERNAL_SERVER_ERROR}};}  }
class C{  public int hashCode(){  return Float.floatToIntBits(value);}  }
class C{  public static void moveFile(String sourceFilePath,String destFilePath){  if (TextUtils.isEmpty(sourceFilePath) || TextUtils.isEmpty(destFilePath)) {    throw new RuntimeException("Both sourceFilePath and destFilePath cannot be null.");  }  moveFile(new File(sourceFilePath),new File(destFilePath));}  }
class C{  public Vector3D applyInverseTo(Vector3D u){  double x=u.getX();  double y=u.getY();  double z=u.getZ();  double s=q1 * x + q2 * y + q3 * z;  double m0=-q0;  return new Vector3D(2 * (m0 * (x * m0 - (q2 * z - q3 * y)) + s * q1) - x,2 * (m0 * (y * m0 - (q3 * x - q1 * z)) + s * q2) - y,2 * (m0 * (z * m0 - (q1 * y - q2 * x)) + s * q3) - z);}  }
class C{  @Override protected void parseOptimizationData(OptimizationData... optData){  super.parseOptimizationData(optData);  for (  OptimizationData data : optData) {    if (data instanceof Sigma) {      inputSigma=((Sigma)data).getSigma();      continue;    }    if (data instanceof PopulationSize) {      lambda=((PopulationSize)data).getPopulationSize();      continue;    }  }  checkParameters();}  }
class C{  protected final boolean isUpdateHeaderVisible(){  return mUpdateHeader == getChildAt(0);}  }
class C{  Node internalInsertBefore(Node newChild,Node refChild,boolean replace) throws DOMException {  CoreDocumentImpl ownerDocument=ownerDocument();  boolean errorChecking=ownerDocument.errorChecking;  if (newChild.getNodeType() == Node.DOCUMENT_FRAGMENT_NODE) {    if (errorChecking) {      for (Node kid=newChild.getFirstChild(); kid != null; kid=kid.getNextSibling()) {        if (!ownerDocument.isKidOK(this,kid)) {          String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"HIERARCHY_REQUEST_ERR",null);          throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR,msg);        }      }    }    while (newChild.hasChildNodes()) {      insertBefore(newChild.getFirstChild(),refChild);    }    return newChild;  }  if (newChild == refChild) {    refChild=refChild.getNextSibling();    removeChild(newChild);    insertBefore(newChild,refChild);    return newChild;  }  if (needsSyncChildren()) {    synchronizeChildren();  }  if (errorChecking) {    if (isReadOnly()) {      String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NO_MODIFICATION_ALLOWED_ERR",null);      throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,msg);    }    if (newChild.getOwnerDocument() != ownerDocument) {      String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"WRONG_DOCUMENT_ERR",null);      throw new DOMException(DOMException.WRONG_DOCUMENT_ERR,msg);    }    if (!ownerDocument.isKidOK(this,newChild)) {      String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"HIERARCHY_REQUEST_ERR",null);      throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR,msg);    }    if (refChild != null && refChild.getParentNode() != this) {      String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NOT_FOUND_ERR",null);      throw new DOMException(DOMException.NOT_FOUND_ERR,msg);    }    boolean treeSafe=true;    for (NodeImpl a=this; treeSafe && a != null; a=a.parentNode()) {      treeSafe=newChild != a;    }    if (!treeSafe) {      String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"HIERARCHY_REQUEST_ERR",null);      throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR,msg);    }  }  makeChildNode();  ownerDocument.insertingNode(this,replace);  ChildNode newInternal=(ChildNode)newChild;  Node oldparent=newInternal.parentNode();  if (oldparent != null) {    oldparent.removeChild(newInternal);  }  ChildNode refInternal=(ChildNode)refChild;  newInternal.ownerNode=this;  newInternal.isOwned(true);  ChildNode firstChild=(ChildNode)value;  if (firstChild == null) {    value=newInternal;    newInternal.isFirstChild(true);    newInternal.previousSibling=newInternal;  } else {    if (refInternal == null) {      ChildNode lastChild=firstChild.previousSibling;      lastChild.nextSibling=newInternal;      newInternal.previousSibling=lastChild;      firstChild.previousSibling=newInternal;    } else {      if (refChild == firstChild) {        firstChild.isFirstChild(false);        newInternal.nextSibling=firstChild;        newInternal.previousSibling=firstChild.previousSibling;        firstChild.previousSibling=newInternal;        value=newInternal;        newInternal.isFirstChild(true);      } else {        ChildNode prev=refInternal.previousSibling;        newInternal.nextSibling=refInternal;        prev.nextSibling=newInternal;        refInternal.previousSibling=newInternal;        newInternal.previousSibling=prev;      }    }  }  changed();  ownerDocument.insertedNode(this,newInternal,replace);  checkNormalizationAfterInsert(newInternal);  return newChild;}  }
class C{  public void refreshZoneImpl(){  getOwner().revalidateZones();}  }
class C{  public void configureDialog(List<ConfigurationEntry> config){  String currentTab=null;  for (  ConfigurationEntry entry : config) {    currentTab=changeTab(entry.getTab(),currentTab);    if (isNestedComponentDefined(entry)) {      NestedFieldTypes type=parseType(entry);switch (type) {case FIELDSET:        FieldsetConfig fieldsetConfig=new FieldsetConfig(entry,dialogFieldMap);      setFieldsetValue(fieldsetConfig);    break;case MULTIFIELD:  MultifieldConfig multifieldConfig=new MultifieldConfig(entry,dialogFieldMap);setMultifieldValue(multifieldConfig);break;default :return;}} else {setDialogValue(entry);}}}  }
class C{  public void mainDistancesPerFile(String folder1,String folder2) throws IOException {  long startTime=System.currentTimeMillis();  RmsLsfDistortionComputer r=new RmsLsfDistortionComputer();  folder1=StringUtils.checkLastSlash(folder1);  folder2=StringUtils.checkLastSlash(folder2);  BaselineAdaptationSet set1=new BaselineAdaptationSet(folder1);  BaselineAdaptationSet set2=new BaselineAdaptationSet(folder2);  boolean isBark=true;  double upperFreqInHz=8000;  int[] map=new int[set1.items.length];  for (int i=0; i < map.length; i++) {    if (!StringUtils.getFileName(set1.items[i].audioFile).equals(StringUtils.getFileName(set2.items[i].audioFile))) {      throw new IOException("Audio files in folders do not match:\n" + set1.items[i].audioFile + " doesn't match "+ set2.items[i].audioFile);    }    map[i]=i;  }  double[][] allDistances=r.getDistancesPerFile(set1,set2,isBark,upperFreqInHz,map);  assert allDistances.length == map.length;  System.out.println("RMSE Bark-scaled LSF distances between " + folder1 + " and "+ folder2);  double allMean=0;  double allPrevMean=0;  double allVariance=0;  long allN=0;  for (int i=0; i < map.length; i++) {    double oneMean=0;    double onePrevMean=0;    double oneVariance=0;    int oneN=0;    for (int j=0; j < allDistances[i].length; j++) {      double x=allDistances[i][j];      allN++;      allPrevMean=allMean;      allMean+=(x - allPrevMean) / allN;      allVariance+=(x - allPrevMean) * (x - allMean);      oneN++;      onePrevMean=oneMean;      oneMean+=(x - onePrevMean) / oneN;      oneVariance+=(x - onePrevMean) * (x - oneMean);    }    double oneStddev=Math.sqrt(oneVariance / oneN);    System.out.println(StringUtils.getFileName(set1.items[i].audioFile) + " mean " + oneMean+ " stddev "+ oneStddev);  }  double allStddev=Math.sqrt(allVariance / allN);  System.out.println("Global mean " + allMean + " stddev "+ allStddev);  long timeNeeded=System.currentTimeMillis() - startTime;  System.err.println("Computed distances between " + map.length + " files in "+ timeNeeded+ " ms");}  }
class C{  public void put(String key,InputStream stream,String name){  put(key,stream,name,null);}  }
class C{  private Base64(){}  }
class C{  private boolean regionDialingFromMatchesNumber(PhoneNumber number,String regionDialingFrom){  List<String> regionCodes=getRegionCodesForCountryCode(number.getCountryCode());  return regionCodes.contains(regionDialingFrom);}  }
class C{  public TIntHash(int initialCapacity,float loadFactor,TIntHashingStrategy strategy){  super(initialCapacity,loadFactor);  this._hashingStrategy=strategy;}  }
class C{  @Override public boolean equals(Object other){  if (this == other) {    return true;  }  if (other instanceof SparseGradient) {    final SparseGradient rhs=(SparseGradient)other;    if (!Precision.equals(value,rhs.value,1)) {      return false;    }    if (derivatives.size() != rhs.derivatives.size()) {      return false;    }    for (    final Map.Entry<Integer,Double> entry : derivatives.entrySet()) {      if (!rhs.derivatives.containsKey(entry.getKey())) {        return false;      }      if (!Precision.equals(entry.getValue(),rhs.derivatives.get(entry.getKey()),1)) {        return false;      }    }    return true;  }  return false;}  }
class C{  public static DocumentObjectConverter instance(){  return _instance;}  }
class C{  private float crossCheckVertical(int startI,int centerJ,int maxCount,int originalStateCountTotal){  BitMatrix image=this.image;  int maxI=image.getHeight();  int[] stateCount=getCrossCheckStateCount();  int i=startI;  while (i >= 0 && image.get(centerJ,i)) {    stateCount[2]++;    i--;  }  if (i < 0) {    return Float.NaN;  }  while (i >= 0 && !image.get(centerJ,i) && stateCount[1] <= maxCount) {    stateCount[1]++;    i--;  }  if (i < 0 || stateCount[1] > maxCount) {    return Float.NaN;  }  while (i >= 0 && image.get(centerJ,i) && stateCount[0] <= maxCount) {    stateCount[0]++;    i--;  }  if (stateCount[0] > maxCount) {    return Float.NaN;  }  i=startI + 1;  while (i < maxI && image.get(centerJ,i)) {    stateCount[2]++;    i++;  }  if (i == maxI) {    return Float.NaN;  }  while (i < maxI && !image.get(centerJ,i) && stateCount[3] < maxCount) {    stateCount[3]++;    i++;  }  if (i == maxI || stateCount[3] >= maxCount) {    return Float.NaN;  }  while (i < maxI && image.get(centerJ,i) && stateCount[4] < maxCount) {    stateCount[4]++;    i++;  }  if (stateCount[4] >= maxCount) {    return Float.NaN;  }  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2]+ stateCount[3]+ stateCount[4];  if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal) {    return Float.NaN;  }  return foundPatternCross(stateCount) ? centerFromEnd(stateCount,i) : Float.NaN;}  }
class C{  private TableOptionWrapper(){}  }
class C{  public void adjustBeginLineColumn(int newLine,int newCol){  int start=tokenBegin;  int len;  if (bufpos >= tokenBegin) {    len=bufpos - tokenBegin + inBuf + 1;  } else {    len=bufsize - tokenBegin + bufpos + 1 + inBuf;  }  int i=0, j=0, k=0;  int nextColDiff=0, columnDiff=0;  while (i < len && bufline[j=start % bufsize] == bufline[k=++start % bufsize]) {    bufline[j]=newLine;    nextColDiff=columnDiff + bufcolumn[k] - bufcolumn[j];    bufcolumn[j]=newCol + columnDiff;    columnDiff=nextColDiff;    i++;  }  if (i < len) {    bufline[j]=newLine++;    bufcolumn[j]=newCol + columnDiff;    while (i++ < len) {      if (bufline[j=start % bufsize] != bufline[++start % bufsize])       bufline[j]=newLine++; else       bufline[j]=newLine;    }  }  line=bufline[j];  column=bufcolumn[j];}  }
class C{  @Override public void onTokenRefresh(){  startService(new Intent(this,SaveFCMIdService.class));}  }
class C{  protected void handleIOException(IOException e) throws IOException {  throw e;}  }
class C{  public boolean isSynchronized(){  return Modifier.isSynchronized(this.getModifiers());}  }
class C{  void addFillComponents(Container panel,int[] cols,int[] rows){  Dimension filler=new Dimension(10,10);  boolean filled_cell_11=false;  CellConstraints cc=new CellConstraints();  if (cols.length > 0 && rows.length > 0) {    if (cols[0] == 1 && rows[0] == 1) {      panel.add(Box.createRigidArea(filler),cc.xy(1,1));      filled_cell_11=true;    }  }  for (int index=0; index < cols.length; index++) {    if (cols[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));  }  for (int index=0; index < rows.length; index++) {    if (rows[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));  }}  }
class C{  public static CacheHeader readHeader(InputStream is) throws IOException {  CacheHeader entry=new CacheHeader();  int magic=readInt(is);  if (magic != CACHE_MAGIC) {    throw new IOException();  }  entry.key=readString(is);  entry.etag=readString(is);  if (entry.etag.equals("")) {    entry.etag=null;  }  entry.serverDate=readLong(is);  entry.lastModified=readLong(is);  entry.ttl=readLong(is);  entry.softTtl=readLong(is);  entry.responseHeaders=readStringStringMap(is);  return entry;}  }
class C{  public float computeDistanceTo(float x,float y){  final RectF bounds=getClickTargetBounds();  float dx=Math.max(bounds.left - x,x - bounds.right);  float dy=Math.max(bounds.top - y,y - bounds.bottom);  return Math.max(0.0f,Math.max(dx,dy));}  }
class C{  public boolean isSensor(){  return this.sensor;}  }
class C{  public static ValueCompressonHolder.UnCompressValue unCompressMaxMin(DataType compDataType,DataType actualDataType){switch (compDataType) {case DATA_BYTE:    return new UnCompressMaxMinByte();case DATA_SHORT:  return new UnCompressMaxMinShort();case DATA_INT:return new UnCompressMaxMinInt();case DATA_LONG:return new UnCompressMaxMinLong();case DATA_FLOAT:return new UnCompressMaxMinFloat();default :return new UnCompressMaxMinDefault();}}  }
class C{  public final boolean contains(Node n){  return s.contains(n);}  }
class C{  public void closeAllTabs(boolean animate,boolean uponExit,boolean canUndo){  for (int i=0; i < getCount(); i++)   getTabAt(i).setClosing(true);  ArrayList<Integer> closedTabs=new ArrayList<Integer>();  while (getCount() > 0) {    Tab tab=getTabAt(0);    closedTabs.add(tab.getId());    closeTab(tab,animate,uponExit,canUndo,false);  }  if (!uponExit && canUndo && supportsPendingClosures()) {    for (    TabModelObserver obs : mObservers)     obs.allTabsPendingClosure(closedTabs);  }}  }
class C{  public PhotosGetUserPhotosQuery extended(Boolean value){  return unsafeParam("extended",value);}  }
class C{  @Override protected void runImpl(){  AionConnection client=getConnection();  Account account=client.getAccount();  if (client.getActivePlayer() != null) {    return;  }  if (!this.isCreate) {    client.sendPacket(new SM_CREATE_CHARACTER(null,SM_CREATE_CHARACTER.RESPONSE_CREATE_CHAR));    IDFactory.getInstance().releaseId(this.playerCommonData.getPlayerObjId());    return;  }  if (account.getMembership() >= MembershipConfig.CHARACTER_ADDITIONAL_ENABLE) {    if (MembershipConfig.CHARACTER_ADDITIONAL_COUNT <= account.size()) {      client.sendPacket(new SM_CREATE_CHARACTER(null,SM_CREATE_CHARACTER.RESPONSE_SERVER_LIMIT_EXCEEDED));      IDFactory.getInstance().releaseId(playerCommonData.getPlayerObjId());      return;    }  } else   if (GSConfig.CHARACTER_LIMIT_COUNT <= account.size()) {    client.sendPacket(new SM_CREATE_CHARACTER(null,SM_CREATE_CHARACTER.RESPONSE_SERVER_LIMIT_EXCEEDED));    IDFactory.getInstance().releaseId(playerCommonData.getPlayerObjId());    return;  }  if (!PlayerService.isFreeName(playerCommonData.getName())) {    if (GSConfig.CHARACTER_CREATION_MODE == 2) {      client.sendPacket(new SM_CREATE_CHARACTER(null,SM_CREATE_CHARACTER.RESPONSE_NAME_RESERVED));    } else {      client.sendPacket(new SM_CREATE_CHARACTER(null,SM_CREATE_CHARACTER.RESPONSE_NAME_ALREADY_USED));    }    IDFactory.getInstance().releaseId(playerCommonData.getPlayerObjId());    return;  }  if (PlayerService.isOldName(playerCommonData.getName())) {    client.sendPacket(new SM_CREATE_CHARACTER(null,SM_CREATE_CHARACTER.RESPONSE_NAME_ALREADY_USED));    IDFactory.getInstance().releaseId(playerCommonData.getPlayerObjId());    return;  }  if (!NameRestrictionService.isValidName(playerCommonData.getName())) {    client.sendPacket(new SM_CREATE_CHARACTER(null,SM_CREATE_CHARACTER.RESPONSE_INVALID_NAME));    IDFactory.getInstance().releaseId(playerCommonData.getPlayerObjId());    return;  }  if (NameRestrictionService.isForbiddenWord(playerCommonData.getName())) {    client.sendPacket(new SM_CREATE_CHARACTER(null,SM_CREATE_CHARACTER.RESPONSE_FORBIDDEN_CHAR_NAME));    IDFactory.getInstance().releaseId(playerCommonData.getPlayerObjId());    return;  }  if (!playerCommonData.getPlayerClass().isStartingClass()) {    client.sendPacket(new SM_CREATE_CHARACTER(null,SM_CREATE_CHARACTER.FAILED_TO_CREATE_THE_CHARACTER));    IDFactory.getInstance().releaseId(playerCommonData.getPlayerObjId());    return;  }  if (GSConfig.CHARACTER_CREATION_MODE == 0) {    for (    PlayerAccountData data : account.getSortedAccountsList()) {      if (data.getPlayerCommonData().getRace() != playerCommonData.getRace()) {        client.sendPacket(new SM_CREATE_CHARACTER(null,SM_CREATE_CHARACTER.FAILED_TO_CREATE_THE_CHARACTER));        IDFactory.getInstance().releaseId(playerCommonData.getPlayerObjId());        return;      }    }  }  AccountService.removeDeletedCharacters(account);  Player player=PlayerService.newPlayer(playerCommonData,playerAppearance,account);  if (!PlayerService.storeNewPlayer(player,account.getName(),account.getId())) {    client.sendPacket(new SM_CREATE_CHARACTER(null,SM_CREATE_CHARACTER.RESPONSE_DB_ERROR));    IDFactory.getInstance().releaseId(playerCommonData.getPlayerObjId());  } else {    List<Item> equipment=DAOManager.getDAO(InventoryDAO.class).loadEquipment(player.getObjectId());    PlayerAccountData accPlData=new PlayerAccountData(playerCommonData,null,playerAppearance,equipment,null);    accPlData.setCreationDate(new Timestamp(System.currentTimeMillis()));    PlayerService.storeCreationTime(player.getObjectId(),accPlData.getCreationDate());    account.addPlayerAccountData(accPlData);    client.sendPacket(new SM_CREATE_CHARACTER(accPlData,SM_CREATE_CHARACTER.RESPONSE_OK));  }}  }
class C{  static int[] sortUnique(int[] list){  Arrays.sort(list);  int count=1;  for (int i=1; i < list.length; i++) {    if (list[i] != list[i - 1]) {      count++;    }  }  int[] ret=new int[count];  count=1;  ret[0]=list[0];  for (int i=1; i < list.length; i++) {    if (list[i] != list[i - 1]) {      ret[count++]=list[i];    }  }  return ret;}  }
class C{  public XmlStreamWriter(File file,String defaultEncoding) throws FileNotFoundException {  this(new FileOutputStream(file),defaultEncoding);}  }
class C{  public static Map<String,Object> cleanSyncRemoveInfo(DispatchContext dctx,Map<String,? extends Object> context){  Debug.logInfo("Running cleanSyncRemoveInfo",module);  Delegator delegator=dctx.getDelegator();  Locale locale=(Locale)context.get("locale");  try {    double keepRemoveInfoHours=24;    List<GenericValue> entitySyncRemoveList=EntityQuery.use(delegator).from("EntitySync").queryList();    for (    GenericValue entitySyncRemove : entitySyncRemoveList) {      Double curKrih=entitySyncRemove.getDouble("keepRemoveInfoHours");      if (curKrih != null) {        double curKrihVal=curKrih.doubleValue();        if (curKrihVal > keepRemoveInfoHours) {          keepRemoveInfoHours=curKrihVal;        }      }    }    int keepSeconds=(int)Math.floor(keepRemoveInfoHours * 3600);    Calendar nowCal=Calendar.getInstance();    nowCal.setTimeInMillis(System.currentTimeMillis());    nowCal.add(Calendar.SECOND,-keepSeconds);    Timestamp keepAfterStamp=new Timestamp(nowCal.getTimeInMillis());    int numRemoved=delegator.removeByCondition("EntitySyncRemove",EntityCondition.makeCondition(ModelEntity.STAMP_TX_FIELD,EntityOperator.LESS_THAN,keepAfterStamp));    Debug.logInfo("In cleanSyncRemoveInfo removed [" + numRemoved + "] values with TX timestamp before ["+ keepAfterStamp+ "]",module);    return ServiceUtil.returnSuccess();  } catch (  GenericEntityException e) {    Debug.logError(e,"Error cleaning out EntitySyncRemove info: " + e.toString(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"EntityExtErrorCleaningEntitySyncRemove",UtilMisc.toMap("errorString",e.toString()),locale));  }}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set contract-gaps=");  boolean collapse=np.getBoolean();  np.matchIgnoreCase(";");  AlignmentViewer viewer=(AlignmentViewer)getViewer();  viewer.getAlignmentViewerPanel().getSelectedBlock().clear();  viewer.setContractGaps(collapse);}  }
class C{  @Nullable public Object loadClass(String className,Class<?>[] constructorSignature,Object[] constructorArgs) throws ClassNotFoundException {  if (RecyclerViewHelper.CN_RV_ADAPTER.equals(className)) {    className=RecyclerViewHelper.CN_CUSTOM_ADAPTER;    constructorSignature=ArrayUtil.EMPTY_CLASS_ARRAY;    constructorArgs=ArrayUtil.EMPTY_OBJECT_ARRAY;  }  return loadClass(className,constructorSignature,constructorArgs,false);}  }
class C{  void ack(){  this.ackTimeoutRegistry.clear(Topic.RPC,Actions.REQUEST,this.uid);}  }
class C{  public void onButtonClick(View v){  if (mBound) {    int num=mService.getRandomNumber();    Toast.makeText(this,"number: " + num,Toast.LENGTH_SHORT).show();  }}  }
class C{  public List<Object> splitByTextualElems(String text,Map<String,Map<String,Object>> entryMap,Map<String,Map<String,Object>> libMap,Map<String,Object> libInfo){  List<Object> res;  Map<String,Object> modelMap;  List<Object> prevSplit;  msgHandler.logDebug("====================================\n" + "splitByTextualElems: " + (text.length() > 400 ? text.substring(0,399) : text) + "\n"+ "====================================");  modelMap=FtlDocFileParser.makeObjectMap();  modelMap.put("type","text-raw");  res=splitByPat(text,rawTextPat,modelMap,"origText","value");  prevSplit=res;  res=new ArrayList<>();  modelMap=FtlDocFileParser.makeObjectMap();  modelMap.put("type","text-plain");  for (  Object part : prevSplit) {    if (part instanceof String) {      List<Object> listSplit=splitByPat((String)part,plainTextPat,modelMap,"origText","value");      res.addAll(listSplit);    } else {      res.add(part);    }  }  prevSplit=res;  res=new ArrayList<>();  modelMap=FtlDocFileParser.makeObjectMap();  modelMap.put("type","text-code");  for (  Object part : prevSplit) {    if (part instanceof String) {      List<Object> listSplit=splitByPat((String)part,codeTextPat,modelMap,"origText","value");      res.addAll(listSplit);    } else {      res.add(part);    }  }  prevSplit=res;  res=new ArrayList<>();  for (  Object part : prevSplit) {    if (part instanceof String) {      List<Object> listSplit=splitByLibEntryRefs((String)part,entryMap,libMap);      res.addAll(listSplit);    } else {      res.add(part);    }  }  prevSplit=res;  res=new ArrayList<>();  modelMap=FtlDocFileParser.makeObjectMap();  modelMap.put("type","link");  for (  Object part : prevSplit) {    if (part instanceof String) {      List<Object> listSplit=splitByPat((String)part,linkManualPat,modelMap,"origText","value");      List<Object> fixupListSplit=new ArrayList<Object>();      for (      Object listObj : listSplit) {        fixupListSplit.add(fixupLink(listObj,entryMap,libMap,libInfo));      }      res.addAll(fixupListSplit);    } else {      res.add(part);    }  }  prevSplit=res;  res=new ArrayList<>();  modelMap=FtlDocFileParser.makeObjectMap();  modelMap.put("type","link");  for (  Object part : prevSplit) {    if (part instanceof String) {      List<Object> listSplit=splitByPat((String)part,linkAutoPat,modelMap,"origText",null,"value");      List<Object> fixupListSplit=new ArrayList<Object>();      for (      Object listObj : listSplit) {        fixupListSplit.add(fixupLink(listObj,entryMap,libMap,libInfo));      }      res.addAll(fixupListSplit);    } else {      res.add(part);    }  }  return res;}  }
class C{  public CombiningCursor queryCombinings(){  QueryHelper qh=new QueryHelper();  qh.Columns=null;  qh.Table=S.TABLE_COMBINING;  qh.Selection=null;  qh.SelectionArgs=null;  qh.GroupBy=null;  qh.Having=null;  qh.OrderBy=null;  qh.Limit=null;  return new CombiningCursor(wrapJoinHelper(builderCursor(),qh));}  }
class C{  public static String toString(InputStream input,Charset encoding) throws IOException {  StringBuilderWriter sw=new StringBuilderWriter();  copy(input,sw,encoding);  return sw.toString();}  }
class C{  public int apply(ProgressListener progress) throws CanceledException {  final Graph overlapGraphWorkingCopy=new Graph();  final NodeMap<Node> new2oldNode=new NodeMap<>(overlapGraphWorkingCopy);  final EdgeMap<Edge> new2oldEdge=new EdgeMap<>(overlapGraphWorkingCopy);{    progress.setSubtask("Copying graph");    progress.setMaximum(overlapGraph.getNumberOfNodes() + overlapGraph.getNumberOfEdges());    progress.setProgress(0);    NodeMap<Node> old2newNode=new NodeMap<>(this.overlapGraph);    for (Node v=this.overlapGraph.getFirstNode(); v != null; v=this.overlapGraph.getNextNode(v)) {      final Node w=overlapGraphWorkingCopy.newNode(v.getInfo());      w.setData(v.getData());      new2oldNode.set(w,v);      old2newNode.set(v,w);      progress.incrementProgress();    }    for (Edge e=this.overlapGraph.getFirstEdge(); e != null; e=this.overlapGraph.getNextEdge(e)) {      final Edge f=overlapGraphWorkingCopy.newEdge(old2newNode.get(e.getSource()),old2newNode.get(e.getTarget()),e.getInfo());      new2oldEdge.set(f,e);      progress.incrementProgress();    }  }  if (progress instanceof ProgressPercentage)   ((ProgressPercentage)progress).reportTaskCompleted();  progress.setSubtask("Extracting paths");  progress.setMaximum(overlapGraphWorkingCopy.getNumberOfNodes());  progress.setProgress(0);  final List<Node> toDelete=new ArrayList<>(overlapGraphWorkingCopy.getNumberOfNodes());  final EdgeMap<Integer> edgeWeights=new EdgeMap<>(overlapGraphWorkingCopy);  for (Node v=overlapGraphWorkingCopy.getFirstNode(); v != null; v=v.getNext()) {    if (v.getInDegree() == 0) {      visitNodesRec(v,edgeWeights);    }    progress.incrementProgress();  }  if (progress instanceof ProgressPercentage)   ((ProgressPercentage)progress).reportTaskCompleted();  final List<Node[]> pathsList=new ArrayList<>();  progress.setSubtask("Extracting paths");  final int initialNumberOfEdges=overlapGraphWorkingCopy.getNumberOfEdges();  progress.setMaximum(initialNumberOfEdges);  progress.setProgress(0);  while (overlapGraphWorkingCopy.getNumberOfEdges() > 0) {    Edge bestEdge=overlapGraphWorkingCopy.getFirstEdge();    for (Edge e=overlapGraphWorkingCopy.getFirstEdge(); e != null; e=overlapGraphWorkingCopy.getNextEdge(e)) {      if (edgeWeights.get(e) > edgeWeights.get(bestEdge))       bestEdge=e;    }    Node v=bestEdge.getSource();    final List<Node> path=new ArrayList<>();    path.add(new2oldNode.get(bestEdge.getSource()));    int weight=edgeWeights.get(bestEdge);    while (v.getOutDegree() > 0) {      Node w=null;      for (Edge f=v.getFirstOutEdge(); f != null; f=v.getNextOutEdge(f)) {        int eWeight=edgeWeights.get(f);        if (eWeight == weight) {          w=f.getTarget();          weight-=(Integer)f.getInfo();          break;        }      }      if (w == null)       throw new RuntimeException("w==null");      path.add(new2oldNode.get(w));      toDelete.add(v);      v=w;    }    toDelete.add(v);    for (    Node z : toDelete) {      overlapGraphWorkingCopy.deleteNode(z);    }    toDelete.clear();    for (Edge z=overlapGraphWorkingCopy.getFirstEdge(); z != null; z=z.getNext()) {      edgeWeights.set(z,null);    }    for (Node z=overlapGraphWorkingCopy.getFirstNode(); z != null; z=z.getNext()) {      if (z.getInDegree() == 0) {        visitNodesRec(z,edgeWeights);      }    }    pathsList.add(path.toArray(new Node[path.size()]));    progress.setProgress(initialNumberOfEdges - overlapGraphWorkingCopy.getNumberOfEdges());  }  if (progress instanceof ProgressPercentage)   ((ProgressPercentage)progress).reportTaskCompleted();  final List<Node> singletonList=new ArrayList<>();  for (Node v=overlapGraphWorkingCopy.getFirstNode(); v != null; v=overlapGraphWorkingCopy.getNextNode(v)) {    int readId=(Integer)v.getInfo();    if (readId2ContainedReads != null && readId < readId2ContainedReads.length && readId2ContainedReads[readId] != null && readId2ContainedReads[readId].size() > 0)     pathsList.add(new Node[]{v}); else     singletonList.add(new2oldNode.get(v));  }  paths=pathsList.toArray(new Node[pathsList.size()][]);  singletons=singletonList.toArray(new Node[singletonList.size()]);  return paths.length;}  }
class C{  public Vector2f zero(){  x=y=0;  return this;}  }
class C{  @Override public double cost(Target target,Unit unit){  if (!(target instanceof HalfPhoneTarget))   throw new IllegalArgumentException("This target cost function can only be called for half-phone targets!");  HalfPhoneTarget hpTarget=(HalfPhoneTarget)target;  boolean isLeftHalf=hpTarget.isLeftHalf();  FeatureDefinition weights=isLeftHalf ? leftWeights : rightWeights;  WeightFunc[] weightFunctions=isLeftHalf ? leftWeightFunction : rightWeightFunction;  return cost(target,unit,weights,weightFunctions);}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public MinusExpr fullCopy(){  MinusExpr tree=(MinusExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  @Override public void addDictionaryChunk(List<byte[]> newDictionaryChunk){  if (dictionaryChunks.size() > 0) {    List<byte[]> lastDictionaryChunk=dictionaryChunks.get(dictionaryChunks.size() - 1);    int dictionaryOneChunkSize=CarbonUtil.getDictionaryChunkSize();    int differenceInLastDictionaryAndOneChunkSize=dictionaryOneChunkSize - lastDictionaryChunk.size();    if (differenceInLastDictionaryAndOneChunkSize > 0) {      if (differenceInLastDictionaryAndOneChunkSize >= newDictionaryChunk.size()) {        lastDictionaryChunk.addAll(newDictionaryChunk);      } else {        List<byte[]> subListOfNewDictionaryChunk=newDictionaryChunk.subList(0,differenceInLastDictionaryAndOneChunkSize);        lastDictionaryChunk.addAll(subListOfNewDictionaryChunk);        List<byte[]> remainingNewDictionaryChunk=newDictionaryChunk.subList(differenceInLastDictionaryAndOneChunkSize,newDictionaryChunk.size());        dictionaryChunks.add(remainingNewDictionaryChunk);      }    } else {      dictionaryChunks.add(newDictionaryChunk);    }  } else {    dictionaryChunks.add(newDictionaryChunk);  }}  }
class C{  private FilterType isDifferentArrayValue(final SourceDataTag currentTag,final Object newValue){  FilterType filtering=null;  SourceDataTagValue currentSDValue=currentTag.getCurrentValue();  if (currentSDValue.getValue() == null && newValue != null) {    this.equipmentLogger.trace("isCandidateForFiltering - Tag " + currentSDValue.getId() + " - Current Value null but we have a New value. Not candidate for filtering");    return FilterType.NO_FILTERING;  } else   if (currentSDValue.getValue() != null && currentSDValue.getValue().getClass().isArray() && newValue.getClass().isArray()) {    if (!Arrays.equals((Object[])currentSDValue.getValue(),(Object[])newValue)) {      this.equipmentLogger.trace("isCandidateForFiltering - Tag " + currentSDValue.getId() + " - Both Values are different (Current vs New) = ("+ currentSDValue.getValue()+ " vs "+ newValue+ "). Not candidate for filtering");      return FilterType.NO_FILTERING;    }  } else   if (currentSDValue.getValue() != null) {    if (!currentSDValue.getValue().equals(newValue)) {      this.equipmentLogger.trace("isCandidateForFiltering - Tag " + currentSDValue.getId() + " - Both Values are different (Current vs New) = ("+ currentSDValue.getValue()+ " vs "+ newValue+ "). Not candidate for filtering");      return FilterType.NO_FILTERING;    }  }  return filtering;}  }
class C{  public void cancelCurrentSkill(){  if (getOwner().getCastingSkill() == null) {    return;  }  Creature creature=getOwner();  Skill castingSkill=creature.getCastingSkill();  castingSkill.cancelCast();  creature.removeSkillCoolDown(castingSkill.getSkillTemplate().getCooldownId());  creature.setCasting(null);  PacketSendUtility.broadcastPacketAndReceive(creature,new SM_SKILL_CANCEL(creature,castingSkill.getSkillTemplate().getSkillId()));  if (getOwner().getAi2() instanceof NpcAI2) {    NpcAI2 npcAI=(NpcAI2)getOwner().getAi2();    npcAI.setSubStateIfNot(AISubState.NONE);    npcAI.onGeneralEvent(AIEventType.ATTACK_COMPLETE);    if (creature.getSkillNumber() > 0) {      creature.setSkillNumber(creature.getSkillNumber() - 1);    }  }}  }
class C{  public static double distance(Vector2D p1,Vector2D p2){  return p1.distance(p2);}  }
class C{  private static String replaceAll(String source,String search,String replace){  if (USE_REPLACE_ALL) {    return source.replaceAll(search,replace);  } else {    Pattern p=Pattern.compile(search);    Matcher m=p.matcher(source);    StringBuffer sb=new StringBuffer();    boolean atLeastOneFound=false;    while (m.find()) {      m.appendReplacement(sb,replace);      atLeastOneFound=true;    }    if (atLeastOneFound) {      m.appendTail(sb);      return sb.toString();    } else {      return source;    }  }}  }
class C{  public static boolean clearIfNotModified(HttpServletRequest request,HttpServletResponse response,Collection<? extends IdentifiableObject> objects){  String tag=QUOTE + IdentifiableObjectUtils.getLastUpdatedTag(objects) + QUOTE;  response.setHeader(HEADER_ETAG,tag);  String inputTag=request.getHeader(HEADER_IF_NONE_MATCH);  if (objects != null && inputTag != null && inputTag.equals(tag)) {    response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);    objects.clear();    return true;  }  return false;}  }
class C{  public SVNChangeSetCollector(ISynchronizePageConfiguration configuration){  super(configuration);}  }
class C{  protected AuthRestoreQuery phone(String value){  return unsafeParam("phone",value);}  }
class C{  public static Map<String,Object> createFile(DispatchContext dctx,Map<String,? extends Object> context){  return createFileMethod(dctx,context);}  }
class C{  public static void shareProject(ISVNRepositoryLocation location,IProject project,String remoteDirName,String comment,boolean createDirectory,IProgressMonitor monitor) throws TeamException {  ShareProjectCommand command=new ShareProjectCommand(location,project,remoteDirName,createDirectory);  command.setComment(comment);  command.run(monitor);}  }
class C{  public static void forceDeleteOnExit(File file) throws IOException {  if (file.isDirectory()) {    deleteDirectoryOnExit(file);  } else {    file.deleteOnExit();  }}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  private void needNewBuffer(int newcount){  if (currentBufferIndex < buffers.size() - 1) {    filledBufferSum+=currentBuffer.length;    currentBufferIndex++;    currentBuffer=buffers.get(currentBufferIndex);  } else {    int newBufferSize;    if (currentBuffer == null) {      newBufferSize=newcount;      filledBufferSum=0;    } else {      newBufferSize=Math.max(currentBuffer.length << 1,newcount - filledBufferSum);      filledBufferSum+=currentBuffer.length;    }    currentBufferIndex++;    currentBuffer=new byte[newBufferSize];    buffers.add(currentBuffer);  }}  }
class C{  public LogControllerTest(){  testLines=new String[numOfLines];  for (int i=0; i < numOfLines; i++) {    testLines[i]="Test Line " + i;  }}  }
class C{  public void endScope(){  if (isEnding || holdCount > 0) {    return;  }  isEnding=true;  for (int i=scopes.size() - 1; i >= 0; i--) {    scopes.get(i).onScopeEnd(this);  }  if (parentContext != null && hasErrors && propagatesErrors) {    parentContext.setHasError();  }}  }
class C{  protected boolean enabledForChrome(Context context){  if (mAndroidPermission.isEmpty())   return true;  return permissionOnInAndroid(mAndroidPermission,context);}  }
class C{  @SuppressWarnings("rawtypes") public static void validateField(Param param,Object value){  if (value == null) {    return;  }  Class acceptingClass=ACCEPTING_FIELDS.get(param);  if (!acceptingClass.isInstance(value)) {    String message=String.format("%s expects type %s but found %s",param.getName(),acceptingClass.getName(),value.getClass().getName());    throw new IllegalArgumentException(message);  }}  }
class C{  public OpenMapRealVector subtract(OpenMapRealVector v) throws MathIllegalArgumentException {  checkVectorDimensions(v.getDimension());  OpenMapRealVector res=copy();  Iterator iter=v.getEntries().iterator();  while (iter.hasNext()) {    iter.advance();    int key=iter.key();    if (entries.containsKey(key)) {      res.setEntry(key,entries.get(key) - iter.value());    } else {      res.setEntry(key,-iter.value());    }  }  return res;}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public static IndeterminateProgressDialog newInstance(int messageId,boolean cancelable){  IndeterminateProgressDialog fragment=new IndeterminateProgressDialog();  fragment.setStyle(DialogFragment.STYLE_NO_FRAME,R.style.ownCloud_AlertDialog);  Bundle args=new Bundle();  args.putInt(ARG_MESSAGE_ID,messageId);  args.putBoolean(ARG_CANCELABLE,cancelable);  fragment.setArguments(args);  return fragment;}  }
class C{  private void createField(String key,String labelString){  int row=textFieldMap.size();  int y=row * ROW_HEIGHT;  JLabel label=new JLabel(labelString);  label.setBounds(LABEL_X,y,LABEL_WIDTH,FIELD_HEIGHT);  panel.add(label);  JTextField textField=new JTextField();  textField.setBounds(FIELD_X,y,FIELD_WIDTH,FIELD_HEIGHT);  textFieldMap.put(key,textField);  panel.add(textField);}  }
class C{  public boolean isHighlightEnabled(){  for (int i=0, size=mDataSets.size(); i < size; i++) {    T set=mDataSets.get(i);    if (!set.isHighlightEnabled()) {      return false;    }  }  return true;}  }
class C{  public Builder minZoom(Number minZoom){  this.minZoom=minZoom;  return this;}  }
class C{  public void invalidateWheel(boolean clearCaches){  if (clearCaches) {    recycle.clearAll();    if (itemsLayout != null) {      itemsLayout.removeAllViews();    }    scrollingOffset=0;  } else   if (itemsLayout != null) {    recycle.recycleItems(itemsLayout,firstItem,new ItemsRange());  }  invalidate();}  }
class C{  protected MessagesGetChatUsersQueryWithFields fields(UserField... value){  return unsafeParam("fields",value);}  }
class C{  public static double sinh(double x){  boolean negate=false;  if (Double.isNaN(x)) {    return x;  }  if (x > 20) {    if (x >= LOG_MAX_VALUE) {      final double t=exp(0.5 * x);      return (0.5 * t) * t;    } else {      return 0.5 * exp(x);    }  } else   if (x < -20) {    if (x <= -LOG_MAX_VALUE) {      final double t=exp(-0.5 * x);      return (-0.5 * t) * t;    } else {      return -0.5 * exp(-x);    }  }  if (x == 0) {    return x;  }  if (x < 0.0) {    x=-x;    negate=true;  }  double result;  if (x > 0.25) {    double hiPrec[]=new double[2];    exp(x,0.0,hiPrec);    double ya=hiPrec[0] + hiPrec[1];    double yb=-(ya - hiPrec[0] - hiPrec[1]);    double temp=ya * HEX_40000000;    double yaa=ya + temp - temp;    double yab=ya - yaa;    double recip=1.0 / ya;    temp=recip * HEX_40000000;    double recipa=recip + temp - temp;    double recipb=recip - recipa;    recipb+=(1.0 - yaa * recipa - yaa * recipb - yab * recipa - yab * recipb) * recip;    recipb+=-yb * recip * recip;    recipa=-recipa;    recipb=-recipb;    temp=ya + recipa;    yb+=-(temp - ya - recipa);    ya=temp;    temp=ya + recipb;    yb+=-(temp - ya - recipb);    ya=temp;    result=ya + yb;    result*=0.5;  } else {    double hiPrec[]=new double[2];    expm1(x,hiPrec);    double ya=hiPrec[0] + hiPrec[1];    double yb=-(ya - hiPrec[0] - hiPrec[1]);    double denom=1.0 + ya;    double denomr=1.0 / denom;    double denomb=-(denom - 1.0 - ya) + yb;    double ratio=ya * denomr;    double temp=ratio * HEX_40000000;    double ra=ratio + temp - temp;    double rb=ratio - ra;    temp=denom * HEX_40000000;    double za=denom + temp - temp;    double zb=denom - za;    rb+=(ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;    rb+=yb * denomr;    rb+=-ya * denomb * denomr* denomr;    temp=ya + ra;    yb+=-(temp - ya - ra);    ya=temp;    temp=ya + rb;    yb+=-(temp - ya - rb);    ya=temp;    result=ya + yb;    result*=0.5;  }  if (negate) {    result=-result;  }  return result;}  }
class C{  public void store(String pathName,Storable value) throws IOException {  store(new Path(pathName),value);}  }
class C{  protected void readConfigFileNoScrollPane(VendorOptionFactoryInterface vendorOptionFactory,UpdateSymbolInterface parent,String filename){  internal_readConfigFile(vendorOptionFactory,parent.getClass(),parent,filename,false,false);}  }
class C{  public void addChangingListener(OnWheelChangedListener listener){  changingListeners.add(listener);}  }
class C{  @Override public void clearSelection(){  selectedPhotos.clear();}  }
class C{  public static Map<String,Object> startNextDay(GenericValue techDataCalendar,Timestamp dateFrom){  Map<String,Object> result=FastMap.newInstance();  Timestamp dateTo=null;  GenericValue techDataCalendarWeek=null;  try {    techDataCalendarWeek=techDataCalendar.getRelatedOne("TechDataCalendarWeek",true);  } catch (  GenericEntityException e) {    Debug.logError("Pb reading Calendar Week associated with calendar" + e.getMessage(),module);    return ServiceUtil.returnError("Pb reading Calendar Week associated with calendar");  }  Calendar cDateTrav=Calendar.getInstance();  cDateTrav.setTime(dateFrom);  Map<String,Object> position=dayStartCapacityAvailable(techDataCalendarWeek,cDateTrav.get(Calendar.DAY_OF_WEEK));  Time startTime=(Time)position.get("startTime");  int moveDay=((Integer)position.get("moveDay")).intValue();  dateTo=(moveDay == 0) ? dateFrom : UtilDateTime.getDayStart(dateFrom,moveDay);  Timestamp startAvailablePeriod=new Timestamp(UtilDateTime.getDayStart(dateTo).getTime() + startTime.getTime() + cDateTrav.get(Calendar.ZONE_OFFSET)+ cDateTrav.get(Calendar.DST_OFFSET));  if (dateTo.before(startAvailablePeriod)) {    dateTo=startAvailablePeriod;  } else {    dateTo=UtilDateTime.getNextDayStart(dateTo);    cDateTrav.setTime(dateTo);    position=dayStartCapacityAvailable(techDataCalendarWeek,cDateTrav.get(Calendar.DAY_OF_WEEK));    startTime=(Time)position.get("startTime");    moveDay=((Integer)position.get("moveDay")).intValue();    if (moveDay != 0)     dateTo=UtilDateTime.getDayStart(dateTo,moveDay);    dateTo.setTime(dateTo.getTime() + startTime.getTime() + cDateTrav.get(Calendar.ZONE_OFFSET)+ cDateTrav.get(Calendar.DST_OFFSET));  }  result.put("dateTo",dateTo);  result.put("nextCapacity",position.get("capacity"));  return result;}  }
class C{  public SelectorScopedLocatorFactory(SearchContext searchContext,By selector){  this.searchContext=searchContext;  this.selector=selector;}  }
class C{  public void discard(ServiceRegistrar proxy){synchronized (this) {    if (terminated) {      throw new IllegalStateException("discovery terminated");    }    if (proxy == null)     return;    LookupLocator lct=findRegFromProxy(proxy);    if (lct == null)     return;    LocatorReg reg=removeDiscoveredLocator(lct);    HashMap groupsMap=new HashMap(1);    groupsMap.put(reg.proxy,reg.memberGroups);    reg.proxy=null;    reg.memberGroups=null;    reg.fixupNextTryTime();    addToMap(reg);    if (!listeners.isEmpty()) {      addNotify((ArrayList)listeners.clone(),groupsMap,true);    }  }}  }
class C{  public ImageRecordReader(int height,int width,int channels){  super(height,width,channels,(PathLabelGenerator)null);}  }
class C{  public static void drawResizeHandleSelection(ViewTransform transform,Graphics2D g,ResizeHandle selectedResizeHandle){  Rectangle bounds=selectedResizeHandle.getSwingBounds(transform);  g.drawRect(bounds.x,bounds.y,bounds.width,bounds.height);}  }
class C{  public static void applyTopPercentFilter(double topPercent,double bestScore,float minPercentIdentity,IReadBlock readBlock,BitSet activeMatches){  if (topPercent > 0 && topPercent < 100) {    if (bestScore == 0) {      for (int i=activeMatches.nextSetBit(0); i != -1; i=activeMatches.nextSetBit(i + 1)) {        final IMatchBlock matchBlock=readBlock.getMatchBlock(i);        if (matchBlock.getPercentIdentity() >= minPercentIdentity) {          bestScore=Math.max(bestScore,matchBlock.getBitScore());        }      }    }    final double threshold=(1 - topPercent / 100.0) * bestScore;    for (int i=activeMatches.nextSetBit(0); i != -1; i=activeMatches.nextSetBit(i + 1)) {      final IMatchBlock matchBlock=readBlock.getMatchBlock(i);      if (matchBlock.getBitScore() < threshold && matchBlock.getPercentIdentity() >= minPercentIdentity)       activeMatches.set(i,false);    }  }}  }
class C{  public void requestRender(){  ourLock.lock();  ConstraintUtilities.renderModel(this);  ourLock.unlock();}  }
class C{  public boolean isCurrentSet(){  return currentTaxonIterator != null && currentTaxonId != null;}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException {  setHints(null);  return decodeInternal(image);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public PlaceholderMethodDecl fullCopy(){  PlaceholderMethodDecl tree=(PlaceholderMethodDecl)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  @SourceMonitored @SuppressWarnings("unchecked") public static Object simpleTypeConvert(Object obj,String type,String format,TimeZone timeZone,Locale locale,boolean noTypeFail) throws GeneralException {  if (obj == null || UtilValidate.isEmpty(type) || "Object".equals(type) || "java.lang.Object".equals(type)) {    return obj;  }  if ("PlainString".equals(type)) {    return obj.toString();  }  if (obj instanceof Node) {    Node node=(Node)obj;    String nodeValue=node.getTextContent();    if ("String".equals(type) || "java.lang.String".equals(type)) {      return nodeValue;    } else {      return simpleTypeConvert(nodeValue,type,format,timeZone,locale,noTypeFail);    }  }  int genericsStart=type.indexOf("<");  if (genericsStart != -1) {    type=type.substring(0,genericsStart);  }  Class<?> sourceClass=obj.getClass();  Class<?> targetClass=null;  try {    targetClass=loadClass(type);  } catch (  ClassNotFoundException e) {    throw new GeneralException("Conversion from " + sourceClass.getName() + " to "+ type+ " not currently supported",e);  }  if (sourceClass.equals(targetClass)) {    return obj;  }  if (obj instanceof String && ((String)obj).length() == 0) {    return null;  }  Converter<Object,Object> converter=null;  try {    converter=(Converter<Object,Object>)Converters.getConverter(sourceClass,targetClass);  } catch (  ClassNotFoundException e) {  }  if (converter != null) {    LocalizedConverter<Object,Object> localizedConverter=null;    try {      localizedConverter=(LocalizedConverter)converter;    } catch (    ClassCastException e) {    }    if (localizedConverter != null) {      if (timeZone == null) {        timeZone=TimeZone.getDefault();      }      if (locale == null) {        locale=Locale.getDefault();      }      try {        return localizedConverter.convert(obj,locale,timeZone,format);      } catch (      ConversionException e) {        Debug.logWarning(e,"Exception thrown while converting type: ",module);        throw new GeneralException(e.getMessage(),e);      }    }    try {      return converter.convert(obj);    } catch (    ConversionException e) {      Debug.logWarning(e,"Exception thrown while converting type: ",module);      throw new GeneralException(e.getMessage(),e);    }  }  if (targetClass.equals(String.class)) {    Debug.logWarning("No special conversion available for " + obj.getClass().getName() + " to String, returning object.toString().",module);    return obj.toString();  }  if (noTypeFail) {    throw new GeneralException("Conversion from " + obj.getClass().getName() + " to "+ type+ " not currently supported");  } else {    if (Debug.infoOn())     Debug.logInfo("No type conversion available for " + obj.getClass().getName() + " to "+ targetClass.getName()+ ", returning original object.",module);    return obj;  }}  }
class C{  public boolean hasStroke(){  return SLDTreeLeafFactory.getInstance().hasStroke(getSymbolizer());}  }
class C{  @Override int lookForSelectablePosition(int position,boolean lookDown){  final ListAdapter adapter=mAdapter;  if (adapter == null || isInTouchMode()) {    return INVALID_POSITION;  }  final int count=adapter.getCount();  if (!mAreAllItemsSelectable) {    if (lookDown) {      position=Math.max(0,position);      while (position < count && !adapter.isEnabled(position)) {        position++;      }    } else {      position=Math.min(position,count - 1);      while (position >= 0 && !adapter.isEnabled(position)) {        position--;      }    }    if (position < 0 || position >= count) {      return INVALID_POSITION;    }    return position;  } else {    if (position < 0 || position >= count) {      return INVALID_POSITION;    }    return position;  }}  }
class C{  public void add(String str){  if (!bList.contains(str))   bList.add(str);  hasChanged=true;}  }
class C{  @Override public boolean next(){  while (s.next())   if (pred.isSatisfied(s))   return true;  return false;}  }
class C{  public PhotosSaveMarketPhotoQuery cropData(String value){  return unsafeParam("crop_data",value);}  }
class C{  public boolean isPolygonVisible(Object parentObj,Object obj){  boolean enabled=false;  if (overallEnableSymbolizersOverride) {    enabled=(obj instanceof Rule) && (geometryType == GeometryTypeEnum.POLYGON);  }  return enabled;}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  private BinInfo findBin(double x){  BinInfo bin=new BinInfo();  bin.isInRange=false;  bin.isUnderflow=false;  bin.isOverflow=false;  if (x < m_min) {    bin.isUnderflow=true;  } else   if (x > m_max) {    bin.isOverflow=true;  } else {    double binWidth=this.getBandWidth();    for (int i=0; i < m_nbins; i++) {      double highEdge=m_min + (i + 1) * binWidth;      if (x <= highEdge) {        bin.isInRange=true;        bin.index=i;        break;      }    }  }  return bin;}  }
class C{  public JSONArray put(int index,int value) throws JSONException {  this.put(index,new Integer(value));  return this;}  }
class C{  public StateInconsistencyTest(Experiment experiment){  this.experiment=experiment;  comparisonStrategy=new DefaultNameExclusionStrategy("creationTime","modificationTime","ruleJson","id");  putStateStrategy=new DefaultNameInclusionStrategy("state");}  }
class C{  public XmlStreamWriter(OutputStream out,String defaultEncoding){  this.out=out;  this.defaultEncoding=defaultEncoding != null ? defaultEncoding : "UTF-8";}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  public double replaceMostRecentValue(double v) throws MathIllegalStateException {  return eDA.substituteMostRecentElement(v);}  }
class C{  public RabbitMqServer writeOutputTo(OutputStream outputStream){  this.outputStream=outputStream;  return this;}  }
class C{  public static void angleToDefaultAngle(double[] angle){  for (int i=0; i < angle.length; i++) {    angle[i]=angleToDefaultAngle(angle[i]);  }}  }
class C{  public String makeLiteral(Object object){  StringBuilder sb=new StringBuilder();  makeLiteral(sb,object,false);  return sb.toString();}  }
class C{  @Override public PolygonsSet wholeSpace(){  return new PolygonsSet(tolerance);}  }
class C{  public PagesSaveQuery pageId(Integer value){  return unsafeParam("page_id",value);}  }
class C{  private <T,S extends ParseTree>T parseQueryFragment(Function<GraqlParser,S> parseRule,BiFunction<QueryVisitor,S,T> visit,String queryString){  GraqlLexer lexer=getLexer(queryString);  GraqlErrorListener errorListener=new GraqlErrorListener(queryString);  lexer.removeErrorListeners();  lexer.addErrorListener(errorListener);  CommonTokenStream tokens=new CommonTokenStream(lexer);  return parseQueryFragment(parseRule,visit,errorListener,tokens);}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  private void ensureNamespaceExists(Result result){  DockerImage image=DockerImage.fromImageName(result.name);  if (image.getNamespace() == null) {    result.name=String.format("%s/%s",DEFAULT_NAMESPACE,image.getRepository());  }}  }
class C{  public SearchCollectionsObject(Context c){  this.adapter=new CollectionAdapter(c,new ArrayList<Collection>());  this.service=SearchService.getService();  this.searchQuery="";  this.photosPage=0;  this.refreshing=false;  this.loading=false;  this.over=false;}  }
class C{  public FileAlterationObserver(File directory){  this(directory,(FileFilter)null);}  }
class C{  public Argument(String name){  _name=name;}  }
class C{  public OrdersGetQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  @Override public void endGroup(Augmentations augs) throws XNIException {  if (!fMixed) {    if (fPrevNodeIndexStack[fDepth] != -1) {      fNodeIndexStack[fDepth]=addContentSpecNode(fOpStack[fDepth],fPrevNodeIndexStack[fDepth],fNodeIndexStack[fDepth]);    }    int nodeIndex=fNodeIndexStack[fDepth--];    fNodeIndexStack[fDepth]=nodeIndex;  }}  }
class C{  public EventHandlerGroup<T> and(final EventHandlerGroup<T> otherHandlerGroup){  final Sequence[] combinedSequences=new Sequence[this.sequences.length + otherHandlerGroup.sequences.length];  System.arraycopy(this.sequences,0,combinedSequences,0,this.sequences.length);  System.arraycopy(otherHandlerGroup.sequences,0,combinedSequences,this.sequences.length,otherHandlerGroup.sequences.length);  return new EventHandlerGroup<T>(disruptor,consumerRepository,combinedSequences);}  }
class C{  private static List<LoadMetadataDetails> identifySegmentsToBeMergedBasedOnLoadedDate(List<LoadMetadataDetails> listOfSegmentsBelowThresholdSize){  List<LoadMetadataDetails> loadsOfSameDate=new ArrayList<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  long numberOfDaysAllowedToMerge=0;  try {    numberOfDaysAllowedToMerge=Long.parseLong(CarbonProperties.getInstance().getProperty(CarbonCommonConstants.DAYS_ALLOWED_TO_COMPACT,CarbonCommonConstants.DEFAULT_DAYS_ALLOWED_TO_COMPACT));    if (numberOfDaysAllowedToMerge < 0 || numberOfDaysAllowedToMerge > 100) {      LOGGER.error("The specified value for property " + CarbonCommonConstants.DAYS_ALLOWED_TO_COMPACT + " is incorrect."+ " Correct value should be in range of 0 -100. Taking the default value.");      numberOfDaysAllowedToMerge=Long.parseLong(CarbonCommonConstants.DEFAULT_DAYS_ALLOWED_TO_COMPACT);    }  } catch (  NumberFormatException e) {    numberOfDaysAllowedToMerge=Long.parseLong(CarbonCommonConstants.DEFAULT_DAYS_ALLOWED_TO_COMPACT);  }  if (numberOfDaysAllowedToMerge > 0) {    boolean first=true;    Date segDate1=null;    SimpleDateFormat sdf=new SimpleDateFormat(CarbonCommonConstants.CARBON_TIMESTAMP);    for (    LoadMetadataDetails segment : listOfSegmentsBelowThresholdSize) {      if (first) {        segDate1=initializeFirstSegment(loadsOfSameDate,segment,sdf);        first=false;        continue;      }      String segmentDate=segment.getLoadStartTime();      Date segDate2=null;      try {        segDate2=sdf.parse(segmentDate);      } catch (      ParseException e) {        LOGGER.error("Error while parsing segment start time" + e.getMessage());      }      if (isTwoDatesPresentInRequiredRange(segDate1,segDate2,numberOfDaysAllowedToMerge)) {        loadsOfSameDate.add(segment);      } else       if (loadsOfSameDate.size() < 2) {        loadsOfSameDate.clear();        segDate1=initializeFirstSegment(loadsOfSameDate,segment,sdf);      } else {        break;      }    }  } else {    return listOfSegmentsBelowThresholdSize;  }  return loadsOfSameDate;}  }
class C{  public Set possibleTypes(){  Set ret=new HashSet();  ret.addAll(oldSet.possibleTypes());  ret.addAll(newSet.possibleTypes());  return ret;}  }
class C{  private void doPostConfigurationOfSubEquipmentControlTags(){  for (  Long key : getKeys()) {    doPostDbLoading(get(key));  }}  }
class C{  public Cal subtract(int field,int amount){switch (field) {case Calendar.YEAR:    dateTimeUnit=getCalendar().minusYears(dateTimeUnit,amount);case Calendar.MONTH:  dateTimeUnit=getCalendar().minusMonths(dateTimeUnit,amount);case Calendar.DAY_OF_MONTH:case Calendar.DAY_OF_YEAR:dateTimeUnit=getCalendar().minusDays(dateTimeUnit,amount);break;default :throw new UnsupportedOperationException();}return this;}  }
class C{  public VideoEditAlbumQuery groupId(Integer value){  return unsafeParam("group_id",value);}  }
class C{  public boolean isAutoRecoveryEnabled(){  return isAutoRecoveryEnabled;}  }
class C{  public List<SelectedUnit> selectUnits(List<Element> tokensAndBoundaries,marytts.modules.synthesis.Voice voice) throws SynthesisException {  long time=System.currentTimeMillis();  List<Element> segmentsAndBoundaries=new ArrayList<Element>();  for (  Element tOrB : tokensAndBoundaries) {    if (tOrB.getTagName().equals(MaryXML.BOUNDARY)) {      segmentsAndBoundaries.add(tOrB);    } else {      assert tOrB.getTagName().equals(MaryXML.TOKEN) : "Expected token, got " + tOrB.getTagName();      NodeList segs=tOrB.getElementsByTagName(MaryXML.PHONE);      for (int i=0, max=segs.getLength(); i < max; i++) {        segmentsAndBoundaries.add((Element)segs.item(i));      }    }  }  List<Target> targets=createTargets(segmentsAndBoundaries);  TargetCostFunction tcf=database.getTargetCostFunction();  for (  Target target : targets) {    tcf.computeTargetFeatures(target);  }  Viterbi viterbi;  if (sCostWeight < 0) {    viterbi=new Viterbi(targets,database,targetCostWeight,beamSize);  } else {    viterbi=new Viterbi(targets,database,targetCostWeight,sCostWeight,beamSize);  }  viterbi.apply();  List<SelectedUnit> selectedUnits=viterbi.getSelectedUnits();  if (selectedUnits == null) {    throw new IllegalStateException("Viterbi: can't find path");  }  long newtime=System.currentTimeMillis() - time;  Log.d(Mary.LOG,"Selection took " + newtime + " milliseconds");  return selectedUnits;}  }
class C{  public void actionPerformed(ActionEvent ev){  execute("set index=" + CalculateEcologicalIndices.CHISSQUARE + ";");}  }
class C{  public static final void emoteStartDancing1(Npc owner){  owner.unsetState(CreatureState.NPC_IDLE);  owner.setState(CreatureState.ACTIVE);  PacketSendUtility.broadcastPacket(owner,new SM_EMOTION(owner,EmotionType.EMOTE,134,0));}  }
class C{  public ImageFixture withThumbnailSize(int size){  myThumbnailSize=size;  return this;}  }
class C{  public static int clamp(int value,int min,int max){  if (value < min)   value=min;  if (value > max)   value=max;  return value;}  }
class C{  public int reduceFp(int value){  fpLock.lock();  try {    int newFp=this.currentFp - value;    if (newFp < 0) {      newFp=0;    }    this.currentFp=newFp;  }  finally {    fpLock.unlock();  }  onReduceFp();  return currentFp;}  }
class C{  public boolean mayAlias(Value v1,Value v2,Unit u){  Set<Set<Value>> res=getFlowBefore(u);  for (  Set<Value> set : res) {    if (set.contains(v1) && set.contains(v2))     return true;  }  return false;}  }
class C{  public OrExpr newOrExpr(Value op1,Value op2){  return new JOrExpr(op1,op2);}  }
class C{  @RequestMapping(value="/complete",method=POST,produces=APPLICATION_JSON_VALUE) public ResponseEntity<List<RoleDTO>> complete(@RequestBody AutoCompleteQuery acq) throws URISyntaxException {  List<RoleDTO> results=roleDTOService.complete(acq.query,acq.maxResults);  return new ResponseEntity<>(results,new HttpHeaders(),HttpStatus.OK);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CANT_MAIL_LEVEL(String value0){  return new SM_SYSTEM_MESSAGE(1400340,value0);}  }
class C{  public static List<EntityCondition> createConditionList(Map<String,? extends Object> parameters,List<ModelField> fieldList,Map<String,Object> queryStringMap,Delegator delegator,Map<String,?> context){  Set<String> processed=new LinkedHashSet<String>();  Set<String> keys=new LinkedHashSet<String>();  Map<String,ModelField> fieldMap=new LinkedHashMap<String,ModelField>();  for (  ModelField modelField : fieldList) {    fieldMap.put(modelField.getName(),modelField);  }  List<EntityCondition> result=new LinkedList<EntityCondition>();  for (  Map.Entry<String,? extends Object> entry : parameters.entrySet()) {    String parameterName=entry.getKey();    if (processed.contains(parameterName)) {      continue;    }    keys.clear();    String fieldName=parameterName;    Object fieldValue=null;    String operation=null;    boolean ignoreCase=false;    if (parameterName.endsWith("_ic") || parameterName.endsWith("_op")) {      fieldName=parameterName.substring(0,parameterName.length() - 3);    } else     if (parameterName.endsWith("_value")) {      fieldName=parameterName.substring(0,parameterName.length() - 6);    }    String key=fieldName.concat("_ic");    if (parameters.containsKey(key)) {      keys.add(key);      ignoreCase="Y".equals(parameters.get(key));    }    key=fieldName.concat("_op");    if (parameters.containsKey(key)) {      keys.add(key);      operation=(String)parameters.get(key);    }    key=fieldName.concat("_value");    if (parameters.containsKey(key)) {      keys.add(key);      fieldValue=parameters.get(key);    }    if (fieldName.endsWith("_fld0") || fieldName.endsWith("_fld1")) {      if (parameters.containsKey(fieldName)) {        keys.add(fieldName);      }      fieldName=fieldName.substring(0,fieldName.length() - 5);    }    if (parameters.containsKey(fieldName)) {      keys.add(fieldName);    }    processed.addAll(keys);    ModelField modelField=fieldMap.get(fieldName);    if (modelField == null) {      continue;    }    if (fieldValue == null) {      fieldValue=parameters.get(fieldName);    }    if (ObjectType.isEmpty(fieldValue) && !"empty".equals(operation)) {      continue;    }    result.add(createSingleCondition(modelField,operation,fieldValue,ignoreCase,delegator,context));    for (    String mapKey : keys) {      queryStringMap.put(mapKey,parameters.get(mapKey));    }  }  return result;}  }
