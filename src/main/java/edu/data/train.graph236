class C{  public static Usericon createTwitchIcon(Usericon.Type type,String channel,String urlString,String title){  return createIconFromUrl(type,channel,urlString,SOURCE_TWITCH,null,title);}  }
class C{  public boolean usesFieldAccess(){  if (hasAccess()) {    return getAccess().equals(JPA_ACCESS_FIELD);  } else {    return m_classAccessor.usesFieldAccess();  }}  }
class C{  public final void exitApp(){  Gdx.app.exit();}  }
class C{  public String encodeImage(Drawable drawable){  Bitmap bitmap=((BitmapDrawable)drawable).getBitmap();  ByteArrayOutputStream outStream=new ByteArrayOutputStream();  bitmap.compress(Bitmap.CompressFormat.PNG,COMPRESSION_LEVEL,outStream);  byte[] bitmapContent=outStream.toByteArray();  String encodedImage=Base64.encodeToString(bitmapContent,Base64.NO_WRAP);  StreamHandler.closeOutputStream(outStream,TAG);  return encodedImage;}  }
class C{  public JSONException syntaxError(String message){  return new JSONException(message + this.toString());}  }
class C{  Item(final short index,final Item i){  this.index=index;  type=i.type;  intVal=i.intVal;  longVal=i.longVal;  floatVal=i.floatVal;  doubleVal=i.doubleVal;  strVal1=i.strVal1;  strVal2=i.strVal2;  strVal3=i.strVal3;  hashCode=i.hashCode;}  }
class C{  public static MatrixBlock rmempty(MatrixBlock in,MatrixBlock ret,boolean rows,MatrixBlock select) throws DMLRuntimeException {  if (in.isEmptyBlock(false) && select == null) {    if (rows)     ret.reset(1,in.clen,in.sparse); else     ret.reset(in.rlen,1,in.sparse);    return ret;  }  if (rows)   return removeEmptyRows(in,ret,select); else   return removeEmptyColumns(in,ret,select);}  }
class C{  public String periodicPruningTipText(){  return "How often (number of instances) to prune " + "the dictionary of low frequency terms. " + "0 means don't prune. Setting a positive "+ "integer n means prune after every n instances";}  }
class C{  public void testStub() throws Exception {  FooRequest fooRequest=FooRequest.newBuilder().build();  BarRequest barRequest=BarRequest.newBuilder().build();  MockCallback<FooResponse> fooCallback=new MockCallback<FooResponse>();  MockCallback<BarResponse> barCallback=new MockCallback<BarResponse>();  RpcChannel mockChannel=control.createMock(RpcChannel.class);  TestService stub=TestService.newStub(mockChannel);  mockChannel.callMethod(EasyMock.same(fooDescriptor),EasyMock.same(mockController),EasyMock.same(fooRequest),EasyMock.same(FooResponse.getDefaultInstance()),this.<Message>wrapsCallback(fooCallback));  mockChannel.callMethod(EasyMock.same(barDescriptor),EasyMock.same(mockController),EasyMock.same(barRequest),EasyMock.same(BarResponse.getDefaultInstance()),this.<Message>wrapsCallback(barCallback));  control.replay();  stub.foo(mockController,fooRequest,fooCallback);  stub.bar(mockController,barRequest,barCallback);  control.verify();}  }
class C{  public void checkProfile(){  log("Checking profile.",Level.FINE);  this.processedPosts=new HashSet<String>();  this.wallPosts=new HashSet<String>();  try {    if (getConnection() == null) {      connect();    }    checkWall();    checkRSS();    checkAutoPost();  } catch (  Exception exception) {    log(exception);  }  log("Done checking profile.",Level.FINE);}  }
class C{  public static void error(final Throwable t){  if (JQuantLib.logger != null) {    JQuantLib.logger.error(t.getMessage(),t);  } else {    System.err.printf("ERROR: %s\n",t.getMessage());    System.err.println(t.getMessage());    t.printStackTrace(System.err);  }}  }
class C{  public String id(){  return id;}  }
class C{  protected void clearOutEvents(){}  }
class C{  public static <T>String path(TreeDef.Parented<T> treeDef,T node,Function<? super T,String> toString,String delimiter){  List<T> toRoot=toRoot(treeDef,node);  ListIterator<T> iterator=toRoot.listIterator(toRoot.size());  StringBuilder builder=new StringBuilder();  while (iterator.hasPrevious()) {    T segment=iterator.previous();    builder.append(toString.apply(segment));    if (iterator.hasPrevious()) {      builder.append(delimiter);    }  }  return builder.toString();}  }
class C{  public List<String> removeInitiatorDeclineDetails(URI initiator){  return Lists.newArrayList(ComputeSystemDialogProperties.getMessage("ComputeSystem.removeInitiatorDeclineDetails"));}  }
class C{  public Select<T> or(DataFilterClause filterClause){  mFilterCriteria.addClause(filterClause,DataFilterConjunction.OR);  return this;}  }
class C{  protected void installComboBoxListeners(){  if ((propertyChangeListener=createPropertyChangeListener()) != null) {    comboBox.addPropertyChangeListener(propertyChangeListener);  }  if ((itemListener=createItemListener()) != null) {    comboBox.addItemListener(itemListener);  }  installComboBoxModelListeners(comboBox.getModel());}  }
class C{  public Node addNode(){  throw new UnsupportedOperationException("Changes to graph structure not allowed for spanning trees.");}  }
class C{  public static void trace(byte level,String s){  trace(level,s,null);}  }
class C{  public void writeAnnotations(Writer out,byte[] data) throws IOException {  int rightWidth=getAnnotationWidth();  int leftWidth=outputWidth - rightWidth - 1;  String padding=Strings.repeat(" ",1000);  TwoColumnOutput twoc=new TwoColumnOutput(out,leftWidth,rightWidth,"|");  Integer[] keys=new Integer[annotatations.size()];  keys=annotatations.keySet().toArray(keys);  AnnotationEndpoint[] values=new AnnotationEndpoint[annotatations.size()];  values=annotatations.values().toArray(values);  for (int i=0; i < keys.length - 1; i++) {    int rangeStart=keys[i];    int rangeEnd=keys[i + 1];    AnnotationEndpoint annotations=values[i];    for (    AnnotationItem pointAnnotation : annotations.pointAnnotations) {      String paddingSub=padding.substring(0,pointAnnotation.indentLevel * 2);      twoc.write("",paddingSub + pointAnnotation.annotation);    }    String right;    AnnotationItem rangeAnnotation=annotations.rangeAnnotation;    if (rangeAnnotation != null) {      right=padding.substring(0,rangeAnnotation.indentLevel * 2);      right+=rangeAnnotation.annotation;    } else {      right="";    }    String left=Hex.dump(data,rangeStart,rangeEnd - rangeStart,rangeStart,hexCols,6);    twoc.write(left,right);  }  int lastKey=keys[keys.length - 1];  if (lastKey < data.length) {    String left=Hex.dump(data,lastKey,data.length - lastKey,lastKey,hexCols,6);    twoc.write(left,"");  }}  }
class C{  public void close(){  if (inputStream_ != null) {    try {      inputStream_.close();    } catch (    IOException iox) {      LOGGER.warn("Error closing input stream.",iox);    }    inputStream_=null;  }  if (outputStream_ != null) {    try {      outputStream_.close();    } catch (    IOException iox) {      LOGGER.warn("Error closing output stream.",iox);    }    outputStream_=null;  }}  }
class C{  @Deprecated public boolean isFillBelowLine(){  return mFillBelowLine.size() > 0;}  }
class C{  synchronized boolean ensureDatabase(){  if (mDb != null && mDb.isOpen()) {    return true;  }  SQLiteException lastSQLiteException=null;  for (int tries=0; tries < 2; tries++) {    try {      if (tries > 0) {        deleteDatabase();      }      mDb=getWritableDatabase();      break;    } catch (    SQLiteException e) {      lastSQLiteException=e;    }    try {      Thread.sleep(SLEEP_TIME_MS);    } catch (    InterruptedException ie) {      Thread.currentThread().interrupt();    }  }  if (mDb == null) {    throw lastSQLiteException;  }  mDb.setMaximumSize(DEFAULT_MAX_DB_SIZE);  return true;}  }
class C{  public void close() throws IOException {  if (!closed) {    finish();    if (usesDefaultDeflater)     def.end();    out.close();    closed=true;  }}  }
class C{  public String moveBack(){  Check.isTrue(currentIndex > 0,"currentIndex > 0");  currentIndex--;  return history.get(currentIndex);}  }
class C{  public XYSeries(String title,int scaleNumber){  mTitle=title;  mScaleNumber=scaleNumber;  initRange();}  }
class C{  public static boolean isAssociatedToAnyRpVplexTypes(Volume volume,DbClient dbClient){  return isAssociatedToRpVplexType(volume,dbClient,PersonalityTypes.SOURCE,PersonalityTypes.TARGET,PersonalityTypes.METADATA);}  }
class C{  @Override protected EClass eStaticClass(){  return ImPackage.Literals.SYMBOL_TABLE_ENTRY_INTERNAL;}  }
class C{  @Override public boolean contains(Value subvalue){  if (subvalue instanceof StringVal) {    StringVal stringval=(StringVal)subvalue;    if (stringval.template == null) {      stringval.template=Template.create(stringval.str);    }    return stringval.template.partialmatch(str).isMatching();  } else {    return subvalue.toString().contains(str);  }}  }
class C{  public double splitCritValue(Distribution bags){  return 0;}  }
class C{  public void unsetCompression(){  if (!canWriteCompressed()) {    throw new UnsupportedOperationException("Compression not supported");  }  if (getCompressionMode() != MODE_EXPLICIT) {    throw new IllegalStateException("Compression mode not MODE_EXPLICIT!");  }  this.compressionType=null;  this.compressionQuality=1.0F;}  }
class C{  protected void startClientConnections(){  for (  Node n : syncManager.getClusterConfig().getNodes()) {    doNodeConnect(n);  }}  }
class C{  private String genEnumeration(String propName,HashMap enums){  String objectName=propName + "Enumeration";  String key;  String value;  StringBuffer code=new StringBuffer("\n\t\tObject[] ");  code.append(objectName).append(" = new Object[] { \n");  Iterator iterator=enums.keySet().iterator();  while (iterator.hasNext()) {    key=(String)iterator.next();    value=(String)enums.get(key);    code.append("\t\t\t\"").append(key).append("\" ,   new Integer(");    code.append(value).append("), \"").append(value).append("\",\n");  }  code.replace(code.length() - 2,code.length(),"\n\t\t};\n");  enumcode+=code.toString();  return "         \"enumerationValues\", " + objectName + ",\n";}  }
class C{  @Override protected void tearDown() throws Exception {  setFixture(null);}  }
class C{  public static void addArgument(MethodCallExpr call,Expression arg){  List<Expression> args=call.getArgs();  if (args == null) {    args=new ArrayList<Expression>();    call.setArgs(args);  }  args.add(arg);}  }
class C{  public static Object callStaticMethod(Class<?> clazz,String methodName,Object... args){  try {    return findMethodBestMatch(clazz,methodName,args).invoke(null,args);  } catch (  IllegalAccessException e) {    DexposedBridge.log(e);    throw new IllegalAccessError(e.getMessage());  }catch (  IllegalArgumentException e) {    throw e;  }catch (  InvocationTargetException e) {    throw new InvocationTargetError(e.getCause());  }}  }
class C{  @LargeTest public void testSelectionOfInputElements2() throws Exception {  sExecutedTestCount++;  String html="<!DOCTYPE html>" + "<html>" + "<head>"+ "</head>"+ "<body>"+ "<div>"+ "First"+ "<input type=\"text\"/>"+ "<span>"+ "<input type=\"text\"/>"+ "</span>"+ "<button type=\"button\">Click Me!</button>"+ "<div>"+ "<input type=\"submit\"/>"+ "</div>"+ "<p>"+ "Second"+ "</p>"+ "</div>"+ "</body>"+ "</html>";  WebView webView=loadHTML(html);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("First");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("<input type=\"text\">");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("<input type=\"text\">");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("<button type=\"button\">Click Me!</button>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("<input type=\"submit\">");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("Second");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString(null);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("Second");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("<input type=\"submit\">");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("<button type=\"button\">Click Me!</button>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("<input type=\"text\">");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("<input type=\"text\">");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("First");}  }
class C{  public boolean after(Date when){  return getMillisOf(this) > getMillisOf(when);}  }
class C{  static Field lookupField(String className,String fieldName){  try {    Class<?> cl=Class.forName(className);    Field f=cl.getDeclaredField(fieldName);    setAccessible(f);    return f;  } catch (  ClassNotFoundException x) {    throw new AssertionError(x);  }catch (  NoSuchFieldException x) {    throw new AssertionError(x);  }}  }
class C{  public synchronized boolean isWriteHeaders(){  return writeHeaders;}  }
class C{  public void subscribe(GlowPlayer player){  for (  GlowObjective objective : objectives.values()) {    player.getSession().send(ScoreboardObjectiveMessage.create(objective.getName(),objective.getDisplayName()));  }  for (  DisplaySlot slot : DisplaySlot.values()) {    GlowObjective objective=displaySlots.get(slot);    String name=objective != null ? objective.getName() : "";    player.getSession().send(new ScoreboardDisplayMessage(GlowDisplaySlot.getId(slot),name));  }  for (  Entry<String,Set<GlowScore>> entry : scoreMap.entrySet()) {    for (    GlowScore score : entry.getValue()) {      player.getSession().send(new ScoreboardScoreMessage(entry.getKey(),score.getObjective().getName(),score.getScore()));    }  }  for (  GlowTeam team : teams.values()) {    player.getSession().send(team.getCreateMessage());  }  players.add(player);}  }
class C{  private static boolean isUnderRecording(){  instrumentation.waitForIdleSync();  View view=SOLO.getCurrentActivity().findViewById(R.id.track_controller_stop);  return view != null ? view.isEnabled() : false;}  }
class C{  @Override public void onWindowFocusChanged(boolean hasFocus){  super.onWindowFocusChanged(hasFocus);  if (init)   return;  init=true;  initBoom();}  }
class C{  public long totalMemory(){  return 0l;}  }
class C{  @TargetApi(Build.VERSION_CODES.HONEYCOMB) public PasswordEditText(@NonNull final Context context,@Nullable final AttributeSet attributeSet,final int defaultStyle){  super(context,attributeSet,defaultStyle);  initialize(attributeSet);}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public static WritableRaster copyRaster(Raster ras){  return copyRaster(ras,ras.getMinX(),ras.getMinY());}  }
class C{  IgfsOutputStreamProxyImpl(IgfsContext igfsCtx,IgfsPath path,IgfsFile info,int bufSize,@Nullable IgfsFileWorkerBatch batch){  super(igfsCtx,path,bufSize,batch);  assert batch != null;  this.info=info;}  }
class C{  public void removedFromDatasource(){  assertIsMutable();  this.clearChanged();  this.setImmutable();}  }
class C{  void compress(){  int limit=ncon;  int c[]=con;  quickSort(con,0,ncon - 1);  int d=0;  int pp1=-1;  for (int i=0; i < limit; i++) {    int p1=c[i];    if (pp1 != p1) {      c[d]=p1;      d++;    }    pp1=p1;  }  ncon=d;}  }
class C{  public ServletRequestContext(HttpServletRequest request){  this.request=request;}  }
class C{  @Inline static void compilePutfieldBarrierDoubleImm(Assembler asm,Offset fieldOffset,int locationMetadata,BaselineCompilerImpl compiler){  putfieldStoreBarrierHelper(asm,compiler,fieldOffset,locationMetadata,Entrypoints.doubleFieldWriteBarrierMethod);}  }
class C{  private void createParamObjects(SessionEditorNode sessionEditorNode){  SessionNode sessionNode=sessionEditorNode.getSessionNode();  Class[] modelClasses=sessionNode.getModelClasses();  for (  Class clazz : modelClasses) {    if (sessionNode.getParam(clazz) == null) {      SessionNodeModelConfig modelConfig=this.config.getModelConfig(clazz);      if (modelConfig == null) {        continue;      }      sessionNode.putParam(clazz,new Parameters(sessionNode.getParameters()));    }  }}  }
class C{  private void processSentence(JCas aJCas,String text,int zoneBegin){  BreakIterator bi=BreakIterator.getWordInstance(getLocale(aJCas));  bi.setText(text);  int last=bi.first() + zoneBegin;  int cur=bi.next();  while (cur != BreakIterator.DONE) {    cur+=zoneBegin;    Annotation token=createToken(aJCas,last,cur);    if (token != null) {      if (splitAtApostrophe) {        int i=token.getCoveredText().indexOf("'");        if (i > 0) {          i+=token.getBegin();          createToken(aJCas,i,token.getEnd());          token.setEnd(i);        }      }    }    last=cur;    cur=bi.next();  }}  }
class C{  public NonSymetricMemberKey(TMember member){  this(member.getName(),member.isStatic(),member.getMemberType());}  }
class C{  public XMLStreamException(String msg){  super(msg);}  }
class C{  @Override public void visitVarDef(final JCVariableDecl tree){  if (tree.mods.annotations.isEmpty()) {  } else   if (tree.sym == null) {    Assert.error("Visiting tree node before memberEnter");  } else   if (tree.sym.getKind() == ElementKind.PARAMETER) {  } else   if (tree.sym.getKind() == ElementKind.FIELD) {    if (sigOnly) {      TypeAnnotationPosition pos=new TypeAnnotationPosition();      pos.type=TargetType.FIELD;      pos.pos=tree.pos;      separateAnnotationsKinds(tree.vartype,tree.sym.type,tree.sym,pos);    }  } else   if (tree.sym.getKind() == ElementKind.LOCAL_VARIABLE) {    TypeAnnotationPosition pos=new TypeAnnotationPosition();    pos.type=TargetType.LOCAL_VARIABLE;    pos.pos=tree.pos;    pos.onLambda=currentLambda;    separateAnnotationsKinds(tree.vartype,tree.sym.type,tree.sym,pos);  } else   if (tree.sym.getKind() == ElementKind.EXCEPTION_PARAMETER) {    TypeAnnotationPosition pos=new TypeAnnotationPosition();    pos.type=TargetType.EXCEPTION_PARAMETER;    pos.pos=tree.pos;    pos.onLambda=currentLambda;    separateAnnotationsKinds(tree.vartype,tree.sym.type,tree.sym,pos);  } else   if (tree.sym.getKind() == ElementKind.RESOURCE_VARIABLE) {    TypeAnnotationPosition pos=new TypeAnnotationPosition();    pos.type=TargetType.RESOURCE_VARIABLE;    pos.pos=tree.pos;    pos.onLambda=currentLambda;    separateAnnotationsKinds(tree.vartype,tree.sym.type,tree.sym,pos);  } else   if (tree.sym.getKind() == ElementKind.ENUM_CONSTANT) {  } else {    Assert.error("Unhandled variable kind: " + tree + " of kind: "+ tree.sym.getKind());  }  push(tree);  scan(tree.mods);  scan(tree.vartype);  if (!sigOnly) {    scan(tree.init);  }  pop();}  }
class C{  public void print(){  System.out.println(token + "\t" + tag);}  }
class C{  public Percent add(Percent Percent){  assertDefined();  if (null == m_value) {    if (null == Percent.getBigDecimalValue()) {      return new Percent();    } else {      return new Percent(Percent.getBigDecimalValue());    }  }  BigDecimal value=m_value.add(Percent.getBigDecimalValue());  return new Percent(value);}  }
class C{  protected DoubleMatrix1D like1D(int size,int zero,int stride){  throw new InternalError();}  }
class C{  public BranchPolicyManager(){}  }
class C{  public String nextToken(){  int len=_string.length();  int start=_pos;  while (start < len && _del == _string.charAt(start))   start++;  if (start < len) {    _pos=_string.indexOf(_del,start);    if (start < _pos && _pos < len)     return _string.substring(start,_pos); else     return _string.substring(start);  }  throw new NoSuchElementException();}  }
class C{  @Deprecated public Tasks<VolumeRestRep> failoverTest(URI id,CopiesParam input){  return postTasks(input,getContinuousCopiesUrl() + "/failover-test",id);}  }
class C{  private File createFileReference(String title,MediaType mimeType,@Nullable String parentFolderId){  return new File().setTitle(title).setMimeType(mimeType.toString()).setParents(parentFolderId == null ? null : ImmutableList.of(new ParentReference().setId(parentFolderId)));}  }
class C{  public void treeNodesRemoved(TreeModelEvent e){}  }
class C{  private void scrollToChild(View child){  child.getDrawingRect(mTempRect);  offsetDescendantRectToMyCoords(child,mTempRect);  int scrollXDelta=computeScrollXDeltaToGetChildRectOnScreen(mTempRect);  int scrollYDelta=computeScrollYDeltaToGetChildRectOnScreen(mTempRect);  if (scrollXDelta != 0 && scrollYDelta != 0) {    scrollBy(scrollXDelta,scrollYDelta);  }}  }
class C{  public IntBloomFilter(final int n,final int d){  this.d=d;  bits=LongArrayBitVector.getInstance().length((long)Math.ceil((n * d / NATURAL_LOG_OF_2)));  m=bits.length() * Long.SIZE;  if (DEBUG)   System.err.println("Number of bits: " + m);  final MersenneTwister mersenneTwister=new MersenneTwister(new Random().nextInt());  a=new int[d];  b=new int[d];  for (int i=0; i < d; i++) {    a[i]=mersenneTwister.nextInt();    b[i]=mersenneTwister.nextInt();  }}  }
class C{  protected void countFacets(final AggregatableDocIter iter) throws IOException {  for (  BlockJoinFieldFacetAccumulator blockJoinFieldFacetAccumulator : blockJoinFieldFacetAccumulators) {    blockJoinFieldFacetAccumulator.updateCountsWithMatchedBlock(iter);  }}  }
class C{  @Override protected void onStart(){  super.onStart();  Log.d(TAG,"onStart() - the activity is about to become visible");}  }
class C{  private void applyUserRigths(AppContext ctx,UserGroup object){  Persistent<? extends GenericPK> parent=null;  Role role;  try {    parent=object.getParentObject(ctx);    role=AccessRightsUtils.getInstance().getRole(ctx.getUser(),parent);    object.setUserRole(role);  } catch (  InvalidCredentialsAPIException e) {    role=null;  }  if ((role == null) || (role.ordinal() < Role.READ.ordinal())) {    for (    String groutOid : ctx.getUser().getGroups()) {      if (groutOid.equals(object.getOid())) {        object.setUserRole(Role.READ);      }    }  }  AccessRightsUtils.getInstance().checkRole(ctx,object,Role.READ);}  }
class C{  @HLEFunction(nid=0x17C1684E,version=150) public int sceKernelReferThreadStatus(@CheckArgument("checkThreadIDAllow0") int uid,TPointer addr){  SceKernelThreadInfo thread=getThreadById(uid);  thread.write(addr);  return 0;}  }
class C{  private void checkCoordValidity(List<MapNode> nodes){  for (  MapNode n : nodes) {    double x=n.getLocation().getX();    double y=n.getLocation().getY();    if (x < 0 || x > getMaxX() || y < 0 || y > getMaxY()) {      throw new SettingsError("Map node " + n.getLocation() + " is out of world  bounds "+ "(x: 0..."+ getMaxX()+ " y: 0..."+ getMaxY()+ ")");    }  }}  }
class C{  public ClearableStringBuilder append(char ch){  sb.append(ch);  return this;}  }
class C{  public void processingInstruction(String target,String data) throws SAXException {  if (contentHandler != null) {    contentHandler.processingInstruction(target,data);  }}  }
class C{  protected boolean findLine(int pos){  if (pos == Position.NOPOS)   return false;  try {    if (buf == null && refBuf != null)     buf=refBuf.get();    if (buf == null) {      buf=initBuf(fileObject);      lineStart=0;      line=1;    } else     if (lineStart > pos) {      lineStart=0;      line=1;    }    int bp=lineStart;    while (bp < bufLen && bp < pos) {switch (buf[bp++]) {case CR:        if (bp < bufLen && buf[bp] == LF)         bp++;      line++;    lineStart=bp;  break;case LF:line++;lineStart=bp;break;}}return bp <= bufLen;} catch (IOException e) {log.directError("source.unavailable");buf=new char[0];return false;}}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public static RestoreSnapshotRequest restoreSnapshotRequest(String repository,String snapshot){  return new RestoreSnapshotRequest(repository,snapshot);}  }
class C{  @Override public void onAdded(final RPObject object){  if (isUser(object)) {    if (object.has("adminlevel")) {      adminlevel=object.getInt("adminlevel");    }  }}  }
class C{  public static void validate(Source source) throws Exception {  validate(schema,source,ErrorCodes.X_MALFORMED_OPTIONAL_PARTS_CONF);}  }
class C{  public static SessionFactory createSessionFactory(String fabricUrl,String username,String password,String fabricUser,String fabricPassword) throws Exception {  FabricMultiTenantConnectionProvider connProvider=new FabricMultiTenantConnectionProvider(fabricUrl,"employees","employees",username,password,fabricUser,fabricPassword);  ServiceRegistryBuilder srb=new ServiceRegistryBuilder();  srb.addService(org.hibernate.service.jdbc.connections.spi.MultiTenantConnectionProvider.class,connProvider);  srb.applySetting("hibernate.dialect","org.hibernate.dialect.MySQLInnoDBDialect");  Configuration config=new Configuration();  config.setProperty("hibernate.multiTenancy","DATABASE");  config.addResource("com/mysql/fabric/demo/employee.hbm.xml");  return config.buildSessionFactory(srb.buildServiceRegistry());}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SexecPackage.EXECUTION_NODE__NAME:    setName((String)newValue);  return;case SexecPackage.EXECUTION_NODE__REACTIONS:getReactions().clear();getReactions().addAll((Collection<? extends Reaction>)newValue);return;case SexecPackage.EXECUTION_NODE__SIMPLE_NAME:setSimpleName((String)newValue);return;case SexecPackage.EXECUTION_NODE__REACT_SEQUENCE:setReactSequence((Sequence)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public int read() throws IOException {  ensureOpen();  return read(singleByteBuf,0,1) == -1 ? -1 : Byte.toUnsignedInt(singleByteBuf[0]);}  }
class C{  @Override public boolean isPressed(){  boolean b=shouldActLikeButton() ? pressed : super.isPressed();  return b || (pressedWhenPopupVisible && comboBox.isPopupVisible());}  }
class C{  public TopFieldDocs searchAfter(ScoreDoc after,Query query,int numHits,Sort sort,boolean doDocScores,boolean doMaxScore) throws IOException {  if (after != null && !(after instanceof FieldDoc)) {    throw new IllegalArgumentException("after must be a FieldDoc; got " + after);  }  return searchAfter((FieldDoc)after,query,numHits,sort,doDocScores,doMaxScore);}  }
class C{  public void sendPacket(byte[] packet,int count){}  }
class C{  public static void writePlistFile(Map<String,Object> eoModelMap,String eomodeldFullPath,String filename,boolean useXml) throws FileNotFoundException, UnsupportedEncodingException {  PrintWriter plistWriter=new PrintWriter(new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File(eomodeldFullPath,filename)),"UTF-8")));  if (useXml) {    plistWriter.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");    plistWriter.println("<!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">");    plistWriter.println("<plist version=\"1.0\">");    writePlistPropertyMapXml(eoModelMap,0,plistWriter);    plistWriter.println("</plist>");  } else {    writePlistPropertyMap(eoModelMap,0,plistWriter,false);  }  plistWriter.close();}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  XPathContext xctxt=transformer.getXPathContext();  int sourceNode=xctxt.getCurrentNode();  if (m_test.bool(xctxt,sourceNode,this)) {    transformer.executeChildTemplates(this,true);  }}  }
class C{  @Override public void playDismissAnimation(){  dismissAnimation.play();}  }
class C{  private static String canonicalize(final SortedSet<QueryParameter> sortedParameters){  if (sortedParameters == null || sortedParameters.isEmpty()) {    return "";  }  final StringBuilder sb=new StringBuilder(100);  for (  QueryParameter parameter : sortedParameters) {    final String name=parameter.getName().toLowerCase();    if (IRRELEVANT_PARAMETERS.contains(name) || name.startsWith("utm_")) {      continue;    }    if (sb.length() > 0) {      sb.append('&');    }    sb.append(parameter.getName());    if (!parameter.getValue().isEmpty()) {      sb.append('=');      sb.append(parameter.getValue());    }  }  return sb.toString();}  }
class C{  private void addCircuitDialog(){  _dialog=new JDialog(_editor,Bundle.getMessage("TitleCircuitDialog"),true);  JPanel panel=new JPanel();  panel.setLayout(new BorderLayout(10,10));  JPanel mainPanel=new JPanel();  mainPanel.setLayout(new BoxLayout(mainPanel,BoxLayout.Y_AXIS));  mainPanel.add(Box.createVerticalStrut(STRUT_SIZE));  JPanel p=new JPanel();  p.add(new JLabel(Bundle.getMessage("createOBlock")));  mainPanel.add(p);  mainPanel.add(Box.createVerticalStrut(STRUT_SIZE));  mainPanel.add(makeSystemNamePanel());  mainPanel.add(Box.createVerticalStrut(STRUT_SIZE));  mainPanel.add(makeDoneButtonPanel(true));  panel.add(mainPanel);  _dialog.getContentPane().add(panel);  _dialog.setLocation(_editor.getLocation().x + 100,_editor.getLocation().y + 100);  _dialog.pack();  _dialog.setVisible(true);}  }
class C{  public StringRequest(int method,String url,Listener<String> listener,ErrorListener errorListener){  super(method,url,errorListener);  mListener=listener;}  }
class C{  @Override public void processDataTuple(KeyValPair<K,V> tuple){  K key=tuple.getKey();  double val=tuple.getValue().doubleValue();  ArrayList<SimpleMovingAverageObject> dataList=buffer.get(key);  if (dataList == null) {    dataList=new ArrayList<SimpleMovingAverageObject>(windowSize);    for (int i=0; i < windowSize; ++i) {      dataList.add(new SimpleMovingAverageObject());    }  }  dataList.get(currentstate).add(val);  buffer.put(key,dataList);}  }
class C{  public static void resetGlobals(){  NemGlobals.setTransactionFeeCalculator(null);  NemGlobals.setMosaicTransferFeeCalculator(null);  NemGlobals.setBlockChainConfiguration(null);}  }
class C{  public DailyTimeIntervalScheduleBuilder onSaturdayAndSunday(){  this.daysOfWeek=SATURDAY_AND_SUNDAY;  return this;}  }
class C{  void initInputFrame(final ClassWriter cw,final int access,final Type[] args,final int maxLocals){  inputLocals=new int[maxLocals];  inputStack=new int[0];  int i=0;  if ((access & Opcodes.ACC_STATIC) == 0) {    if ((access & MethodWriter.ACC_CONSTRUCTOR) == 0) {      inputLocals[i++]=OBJECT | cw.addType(cw.thisName);    } else {      inputLocals[i++]=UNINITIALIZED_THIS;    }  }  for (int j=0; j < args.length; ++j) {    int t=type(cw,args[j].getDescriptor());    inputLocals[i++]=t;    if (t == LONG || t == DOUBLE) {      inputLocals[i++]=TOP;    }  }  while (i < maxLocals) {    inputLocals[i++]=TOP;  }}  }
class C{  @Override public void flush() throws IOException {  if (out != null) {    out.flush();  }}  }
class C{  private void updateAppearance(){  if (mAdapter.getCount() > 0) {    mExpandActivityOverflowButton.setEnabled(true);  } else {    mExpandActivityOverflowButton.setEnabled(false);  }  final int activityCount=mAdapter.getActivityCount();  final int historySize=mAdapter.getHistorySize();  if (activityCount == 1 || activityCount > 1 && historySize > 0) {    mDefaultActivityButton.setVisibility(VISIBLE);    ResolveInfo activity=mAdapter.getDefaultActivity();    PackageManager packageManager=mContext.getPackageManager();    mDefaultActivityButtonImage.setImageDrawable(activity.loadIcon(packageManager));    if (mDefaultActionButtonContentDescription != 0) {      CharSequence label=activity.loadLabel(packageManager);      String contentDescription=mContext.getString(mDefaultActionButtonContentDescription,label);      mDefaultActivityButton.setContentDescription(contentDescription);    }  } else {    mDefaultActivityButton.setVisibility(View.GONE);  }  if (mDefaultActivityButton.getVisibility() == VISIBLE) {    mActivityChooserContent.setBackgroundDrawable(mActivityChooserContentBackground);  } else {    mActivityChooserContent.setBackgroundDrawable(null);  }}  }
class C{  public void close(){  try {    _socket.close();  } catch (  Exception e) {  }}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.wedding.com/";  String qualifiedName;  Document doc;  boolean done;  Element newElement;  String charact;  java.util.List illegalQNames=new java.util.ArrayList();  illegalQNames.add("person:{");  illegalQNames.add("person:}");  illegalQNames.add("person:~");  illegalQNames.add("person:'");  illegalQNames.add("person:!");  illegalQNames.add("person:@");  illegalQNames.add("person:#");  illegalQNames.add("person:$");  illegalQNames.add("person:%");  illegalQNames.add("person:^");  illegalQNames.add("person:&");  illegalQNames.add("person:*");  illegalQNames.add("person:(");  illegalQNames.add("person:)");  illegalQNames.add("person:+");  illegalQNames.add("person:=");  illegalQNames.add("person:[");  illegalQNames.add("person:]");  illegalQNames.add("person:\\");  illegalQNames.add("person:/");  illegalQNames.add("person:;");  illegalQNames.add("person:`");  illegalQNames.add("person:<");  illegalQNames.add("person:>");  illegalQNames.add("person:,");  illegalQNames.add("person:a ");  illegalQNames.add("person:\"");  doc=(Document)load("staffNS",false);  for (int indexN10098=0; indexN10098 < illegalQNames.size(); indexN10098++) {    qualifiedName=(String)illegalQNames.get(indexN10098);{      boolean success=false;      try {        newElement=doc.createElementNS(namespaceURI,qualifiedName);      } catch (      DOMException ex) {        success=(ex.code == DOMException.INVALID_CHARACTER_ERR);      }      assertTrue("throw_INVALID_CHARACTER_ERR",success);    }  }}  }
class C{  public RenderingContext(SharedContext sharedContext){  this.sharedContext=sharedContext;}  }
class C{  public final long docCount(){  return docCount;}  }
class C{  public static void sort(int[] array,int start,int end){  if (array == null) {    throw new NullPointerException();  }  checkBounds(array.length,start,end);  sort(start,end,array);}  }
class C{  @Override public int doStartTag() throws JspException {  Class<?> c=null;  int toScope=PageContext.PAGE_SCOPE;  if (scope != null) {    toScope=getScope(scope);  }  try {    c=Class.forName(clazz);  } catch (  ClassNotFoundException cnf) {    log.error("ClassNotFound - maybe a typo?");    throw new JspException(cnf.getMessage());  }  try {    if (var == null) {      Field[] fields=c.getDeclaredFields();      AccessibleObject.setAccessible(fields,true);      for (      Field field : fields) {        pageContext.setAttribute(field.getName(),field.get(this),toScope);      }    } else {      try {        Object value=c.getField(var).get(this);        pageContext.setAttribute(c.getField(var).getName(),value,toScope);      } catch (      NoSuchFieldException nsf) {        log.error(nsf.getMessage());        throw new JspException(nsf);      }    }  } catch (  IllegalAccessException iae) {    log.error("Illegal Access Exception - maybe a classloader issue?");    throw new JspException(iae);  }  return (SKIP_BODY);}  }
class C{  public void minusEquals(Polynomial B){  double[] A=new double[Math.max(order,B.order)];  for (int i=0; i <= order; i++)   A[i]=a[i];  for (int i=0; i <= B.order; i++)   A[i]-=B.a[i];  a=A;  order=A.length - 1;}  }
class C{  public Input(byte[] buffer,int offset,int count){  setBuffer(buffer,offset,count);}  }
class C{  public boolean hasSubstitutedParameters(){  if (this.wasInferred)   return this.originalMethod.hasSubstitutedParameters();  return super.hasSubstitutedParameters();}  }
class C{  @Override public void run(){  amIActive=true;  String outputHeader=null;  WhiteboxRaster image=null;  WhiteboxRaster output=null;  int cols=0;  int rows=0;  double imageNoData=-32768;  double outputNoData=-32768;  int numImages;  double z;  float progress=0;  int col, row;  int a, i;  String inputFilesString=null;  String[] imageFiles;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputFilesString=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  if (numImages < 2) {    showFeedback("At least two images must be specified.");    return;  }  try {    double[] data;    updateProgress("Calculating min values:",0);    for (a=0; a < numImages; a++) {      image=new WhiteboxRaster(imageFiles[a],"r");      imageNoData=image.getNoDataValue();      String label="Loop " + String.valueOf(a + 1) + " of "+ String.valueOf(numImages)+ ":";      if (a == 0) {        rows=image.getNumberRows();        cols=image.getNumberColumns();        outputNoData=imageNoData;        output=new WhiteboxRaster(outputHeader,"rw",imageFiles[0],WhiteboxRaster.DataType.FLOAT,outputNoData);        output.setPreferredPalette(image.getPreferredPalette());      } else {        if (image.getNumberColumns() != cols || image.getNumberRows() != rows) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }      }      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != imageNoData) {            z=output.getValue(row,col);            if (z != outputNoData) {              if ((data[col] * data[col]) > (z * z)) {                output.setValue(row,col,data[col]);              }            } else {              output.setValue(row,col,data[col]);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress(label,(int)progress);      }      image.close();      progress=a / (numImages - 1) * 100;      updateProgress("Calculating image average:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public EncryptionKey(int keyType,byte[] keyValue){  this(keyValue,keyType,null);}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  journalWriter.close();  journalWriter=null;}  }
class C{  private Order jsonToOrder(SimpleObject json){  Order order=new Order();  populateFromJson(order,json);  populateDefaultsForAllOrders(order);  populateDefaultsForNewOrder(order);  return order;}  }
class C{  public static void append(File file,Object text,String charset,boolean writeBom) throws IOException {  Writer writer=null;  try {    boolean shouldWriteBom=writeBom && !file.exists();    FileOutputStream out=new FileOutputStream(file,true);    if (shouldWriteBom) {      IOGroovyMethods.writeUTF16BomIfRequired(out,charset);    }    writer=new OutputStreamWriter(out,charset);    InvokerHelper.write(writer,text);    writer.flush();    Writer temp=writer;    writer=null;    temp.close();  }  finally {    closeWithWarning(writer);  }}  }
class C{  public CoordPanel(){  centerDelegate=new CenterSupport(this);  makeWidgets();}  }
class C{  public void totalReset(){  if (wantsEvents()) {    setWantsEvents(false);    if (unpickBtn != null) {      unpickBtn.doClick();    }    if (mouseDelegator != null) {      MapMouseMode[] modes=mouseDelegator.getMouseModes();      if (modes != null && modes.length > 0)       mouseDelegator.setActiveMouseMode(modes[0]);    }  }}  }
class C{  public static void writeCacheConfiguration(BinaryRawWriter writer,CacheConfiguration ccfg){  assert writer != null;  assert ccfg != null;  writeEnumInt(writer,ccfg.getAtomicityMode(),CacheConfiguration.DFLT_CACHE_ATOMICITY_MODE);  writeEnumInt(writer,ccfg.getAtomicWriteOrderMode());  writer.writeInt(ccfg.getBackups());  writeEnumInt(writer,ccfg.getCacheMode(),CacheConfiguration.DFLT_CACHE_MODE);  writer.writeBoolean(ccfg.isCopyOnRead());  writer.writeBoolean(ccfg.isEagerTtl());  writer.writeBoolean(ccfg.isSwapEnabled());  writer.writeBoolean(ccfg.isEvictSynchronized());  writer.writeInt(ccfg.getEvictSynchronizedConcurrencyLevel());  writer.writeInt(ccfg.getEvictSynchronizedKeyBufferSize());  writer.writeLong(ccfg.getEvictSynchronizedTimeout());  writer.writeBoolean(ccfg.isInvalidate());  writer.writeBoolean(ccfg.isStoreKeepBinary());  writer.writeBoolean(ccfg.isLoadPreviousValue());  writer.writeLong(ccfg.getDefaultLockTimeout());  writer.writeLong(ccfg.getLongQueryWarningTimeout());  writer.writeInt(ccfg.getMaxConcurrentAsyncOperations());  writer.writeFloat(ccfg.getEvictMaxOverflowRatio());  writeEnumInt(writer,ccfg.getMemoryMode(),CacheConfiguration.DFLT_MEMORY_MODE);  writer.writeString(ccfg.getName());  writer.writeLong(ccfg.getOffHeapMaxMemory());  writer.writeBoolean(ccfg.isReadFromBackup());  writer.writeInt(ccfg.getRebalanceBatchSize());  writer.writeLong(ccfg.getRebalanceDelay());  writeEnumInt(writer,ccfg.getRebalanceMode(),CacheConfiguration.DFLT_REBALANCE_MODE);  writer.writeLong(ccfg.getRebalanceThrottle());  writer.writeLong(ccfg.getRebalanceTimeout());  writer.writeBoolean(ccfg.isSqlEscapeAll());  writer.writeInt(ccfg.getSqlOnheapRowCacheSize());  writer.writeInt(ccfg.getStartSize());  writer.writeInt(ccfg.getWriteBehindBatchSize());  writer.writeBoolean(ccfg.isWriteBehindEnabled());  writer.writeLong(ccfg.getWriteBehindFlushFrequency());  writer.writeInt(ccfg.getWriteBehindFlushSize());  writer.writeInt(ccfg.getWriteBehindFlushThreadCount());  writeEnumInt(writer,ccfg.getWriteSynchronizationMode());  writer.writeBoolean(ccfg.isReadThrough());  writer.writeBoolean(ccfg.isWriteThrough());  if (ccfg.getCacheStoreFactory() instanceof PlatformDotNetCacheStoreFactoryNative)   writer.writeObject(((PlatformDotNetCacheStoreFactoryNative)ccfg.getCacheStoreFactory()).getNativeFactory()); else   writer.writeObject(null);  Collection<QueryEntity> qryEntities=ccfg.getQueryEntities();  if (qryEntities != null) {    writer.writeInt(qryEntities.size());    for (    QueryEntity e : qryEntities)     writeQueryEntity(writer,e);  } else   writer.writeInt(0);  NearCacheConfiguration nearCfg=ccfg.getNearConfiguration();  if (nearCfg != null) {    writer.writeBoolean(true);    writeNearConfiguration(writer,nearCfg);  } else   writer.writeBoolean(false);  writeEvictionPolicy(writer,ccfg.getEvictionPolicy());  writeAffinityFunction(writer,ccfg.getAffinity());}  }
class C{  public void goToNextColor(){  mColorIndex=(mColorIndex + 1) % (mColors.length);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:13.493 -0500",hash_original_method="5A25BF0F0E375260F6C2B96FBB0D25FE",hash_generated_method="44E0F7DF91D2F3BF7E701A42C087E724") public int sendCommand(int command) throws IOException {  return sendCommand(POP3Command._commands[command],null);}  }
class C{  @SuppressWarnings("unchecked") public Graph<V,E> apply(Graph<V,E> graph){  int currentDepth=0;  List<V> currentVertices=new ArrayList<V>();  Set<V> visitedVertices=new HashSet<V>();  Set<E> visitedEdges=new HashSet<E>();  Set<V> acceptedVertices=new HashSet<V>();  for (  V currentRoot : rootNodes) {    visitedVertices.add(currentRoot);    acceptedVertices.add(currentRoot);    currentVertices.add(currentRoot);  }  ArrayList<V> newVertices=null;  while (currentDepth < radiusK) {    newVertices=new ArrayList<V>();    for (    V currentVertex : currentVertices) {      Collection<E> edges=null;switch (edgeType) {case IN_OUT:        edges=graph.getIncidentEdges(currentVertex);      break;case IN:    edges=graph.getInEdges(currentVertex);  break;case OUT:edges=graph.getOutEdges(currentVertex);break;}for (E currentEdge : edges) {V currentNeighbor=graph.getOpposite(currentVertex,currentEdge);if (!visitedEdges.contains(currentEdge)) {visitedEdges.add(currentEdge);if (!visitedVertices.contains(currentNeighbor)) {visitedVertices.add(currentNeighbor);acceptedVertices.add(currentNeighbor);newVertices.add(currentNeighbor);}}}}currentVertices=newVertices;currentDepth++;}Graph<V,E> ug=null;try {ug=graph.getClass().newInstance();for (E edge : graph.getEdges()) {Pair<V> endpoints=graph.getEndpoints(edge);if (acceptedVertices.containsAll(endpoints)) {ug.addEdge(edge,endpoints.getFirst(),endpoints.getSecond());}}} catch (InstantiationException e) {throw new RuntimeException("Unable to create copy of existing graph: ",e);}catch (IllegalAccessException e) {throw new RuntimeException("Unable to create copy of existing graph: ",e);}return ug;}  }
class C{  public static String normalizeBreaks(String text){  text=text.replaceAll("<br>","");  return text;}  }
class C{  private void handleKeyEvent(Context context,Class<? extends Service> mediaServiceClass,KeyEvent keyEvent){switch (keyEvent.getKeyCode()) {case KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE:    sendPendingIntent(createPendingIntent(context,RemoteActions.ACTION_PLAY_PAUSE,mediaServiceClass));  break;case KeyEvent.KEYCODE_MEDIA_NEXT:sendPendingIntent(createPendingIntent(context,RemoteActions.ACTION_NEXT,mediaServiceClass));break;case KeyEvent.KEYCODE_MEDIA_PREVIOUS:sendPendingIntent(createPendingIntent(context,RemoteActions.ACTION_PREVIOUS,mediaServiceClass));break;default :}}  }
class C{  public void invalidateLayout(Container target){  checkContainer(target);  xChildren=null;  yChildren=null;  xTotal=null;  yTotal=null;}  }
class C{  public static int indexOf(long[] array,long value,int startIndex){  for (int i=startIndex; i < array.length; i++) {    if (array[i] == value) {      return i;    }  }  return -1;}  }
class C{  public static void stopProgressDialog(ProgressDialog progressDialog){  if (progressDialog != null && progressDialog.isShowing()) {    progressDialog.dismiss();  }}  }
class C{  public void increment() throws IOException {  writeCode(INCREMENT);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public DefaultIoFilterChainBuilder(){  entries=new CopyOnWriteArrayList<Entry>();}  }
class C{  public void putDouble(String key,double value){  editor.putLong(key,Double.doubleToLongBits(value));  editor.apply();}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  public void actionPerformed(ActionEvent e){  int ret=1;  while (ret == 1) {    JFileChooser chooser=getJFileChooser();    chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);    Component comp=(this.knowledgeEditable instanceof Component) ? (Component)this.knowledgeEditable : null;    chooser.showOpenDialog(comp);    File file=chooser.getSelectedFile();    if (file != null) {      Preferences.userRoot().put("fileSaveLocation",file.getParent());    }    KnowledgeLoaderWizard wizard=new KnowledgeLoaderWizard(file,knowledgeEditable);    wizard.setCommentIndicator(commentIndicator);    ret=JOptionPane.showOptionDialog(null,wizard,"Knowledge Import Wizard",JOptionPane.OK_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE,null,new String[]{"Cancel","Select Another File","Import Data"},"Import Data");    this.delimiters=wizard.getDelimiters();    this.commentIndicator=wizard.getCommentIndicator();    if (ret == JOptionPane.OK_OPTION) {      try {        DataReader reader=new DataReader();        IKnowledge knowledge=reader.parseKnowledge(file);        this.knowledgeEditable.setKnowledge(knowledge);      } catch (      Exception e1) {        String message=e1.getMessage() == null ? e1.getClass().getName() : e1.getMessage();        if ("".equals(message)) {          message="Could not load knowledge.";        }        JOptionPane.showMessageDialog(JOptionUtils.centeringComp(),message);      }    }  }}  }
class C{  private void refreshStats(){  if (processCPUTimeAvailable) {    Number processCpuTime=statsMap.get(StatsKey.VM_PROCESS_CPU_TIME);    if (processCpuTime == null) {      cpuUsage=MBeanJMXAdapter.VALUE_NOT_AVAILABLE;      return;    }    if (lastSystemTime == 0) {      lastSystemTime=System.currentTimeMillis();      return;    }    long cpuTime=processCpuTime.longValue();    if (lastProcessCpuTime == 0) {      lastProcessCpuTime=cpuTime;      return;    }    long systemTime=System.currentTimeMillis();    long denom=(systemTime - lastSystemTime) * 10000;    float processCpuUsage=(float)(cpuTime - lastProcessCpuTime) / denom;    lastSystemTime=systemTime;    lastProcessCpuTime=cpuTime;    cpuUsage=processCpuUsage;  }}  }
class C{  public void resetToMark() throws IOException {  if (stream != null) {    stream.reset();  } else {    reader.reset();  }}  }
class C{  @Override public E removeFirst(){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  protected void invokeMethod(FacesContext facesContext,Method method,Object instance,Object value){synchronized (instance) {    try {      boolean accessible=method.isAccessible();      method.setAccessible(false);      method.invoke(instance,value);      method.setAccessible(accessible);    } catch (    InvocationTargetException|IllegalArgumentException|IllegalAccessException ite) {      if (LOGGER.isLoggable(Level.WARNING)) {        LOGGER.log(Level.WARNING,"Unable to call method: " + method.getName(),ite);      }      if (facesContext.isProjectStage(ProjectStage.Development)) {        facesContext.addMessage(null,new FacesMessage("Unable to call method: " + method.getName(),"Unable to call method: " + method.getName()));      }    }  }}  }
class C{  private boolean runningOnWindows(){  return StringUtils.indexOfIgnoreCase(getSystemProperties().getProperty("os.name"),"WINDOWS") != -1;}  }
class C{  public void writingState(){  if (!this.writtenState) {    this.writtenState=true;    this.out=this.fast=new FastWriter(this.initialSize);  }}  }
class C{  public static int fromSqlIndex(int index){  return index - 1;}  }
class C{  @Override public void buildClassifier(Instances instances) throws Exception {  init(instances);  optimize();  wrapUp();}  }
class C{  @Override public void actionPerformed(ActionEvent event){  sendBitcoinConfirmPanel.setMessageText(" "," ");  WalletData perWalletModelData=this.bitcoinController.getModel().getActivePerWalletModelData();  boolean haveFilesChanged=this.bitcoinController.getFileHandler().haveFilesChanged(perWalletModelData);  if (haveFilesChanged) {    perWalletModelData.setFilesHaveBeenChangedByAnotherProcess(true);    this.bitcoinController.fireFilesHaveBeenChangedByAnotherProcess(perWalletModelData);  } else {    sendBitcoinConfirmPanel.setMessageText(controller.getLocaliser().getString("sendBitcoinNowAction.sendingBitcoin"),"");    String sendAddress=this.bitcoinController.getModel().getActiveWalletPreference(BitcoinModel.SEND_ADDRESS);    String sendLabel=this.bitcoinController.getModel().getActiveWalletPreference(BitcoinModel.SEND_LABEL);    if (sendLabel != null && !sendLabel.equals("")) {      WalletInfoData addressBook=perWalletModelData.getWalletInfo();      addressBook.addSendingAddress(new WalletAddressBookData(sendLabel,sendAddress));    }    char[] walletPassword=walletPasswordField.getPassword();    if (this.bitcoinController.getModel().getActiveWallet() != null && this.bitcoinController.getModel().getActiveWallet().getEncryptionType() != EncryptionType.UNENCRYPTED) {      if (walletPassword == null || walletPassword.length == 0) {        sendBitcoinConfirmPanel.setMessageText(controller.getLocaliser().getString("showExportPrivateKeysAction.youMustEnterTheWalletPassword"),"");        return;      }      try {        if (!this.bitcoinController.getModel().getActiveWallet().checkPassword(CharBuffer.wrap(walletPassword))) {          sendBitcoinConfirmPanel.setMessageText(controller.getLocaliser().getString("createNewReceivingAddressSubmitAction.passwordIsIncorrect"),"");          return;        }      } catch (      KeyCrypterException kce) {        log.debug(kce.getClass().getCanonicalName() + " " + kce.getMessage());        sendBitcoinConfirmPanel.setMessageText(controller.getLocaliser().getString("createNewReceivingAddressSubmitAction.passwordIsIncorrect"),"");        return;      }    }    if (!perWalletModelData.isBusy()) {      perWalletModelData.setBusy(true);      perWalletModelData.setBusyTaskVerbKey("sendBitcoinNowAction.sendingBitcoin");      this.bitcoinController.fireWalletBusyChange(true);      sendBitcoinConfirmPanel.setMessageText(controller.getLocaliser().getString("sendBitcoinNowAction.sendingBitcoin"),"");      sendBitcoinConfirmPanel.invalidate();      sendBitcoinConfirmPanel.validate();      sendBitcoinConfirmPanel.repaint();      performSend(perWalletModelData,sendRequest,CharBuffer.wrap(walletPassword));    }  }}  }
class C{  @Override public Query makeQuery(SpatialArgs args){  ValueSource shapeValueSource=makeShapeValueSource();  ShapePredicateValueSource predicateValueSource=new ShapePredicateValueSource(shapeValueSource,args.getOperation(),args.getShape());  return new PredicateValueSourceQuery(predicateValueSource);}  }
class C{  public void testThreeNodeExpireEvent() throws Throwable {  testSessionExpire(3);}  }
class C{  protected Map<String,Double> loadAFINN() throws FileNotFoundException {  Map<String,Double> afinnMap=new HashMap<String,Double>();  File file=new File("resources/lexi/AFINN-111.txt");  Scanner scanner=new Scanner(file);  while (scanner.hasNextLine()) {    String[] line=scanner.nextLine().split("\t");    if (line.length == 2) {      afinnMap.put(line[0],Double.valueOf(line[1]));    }  }  scanner.close();  return afinnMap;}  }
class C{  public Peer clone(){  Peer clone=new Peer(network.clone(),address);  return clone;}  }
class C{  @NotNull public OptionalDouble findOptionalDouble(@NotNull SqlQuery query){  Optional<Double> value=findOptional(Double.class,query);  return value.isPresent() ? OptionalDouble.of(value.get()) : OptionalDouble.empty();}  }
class C{  private void enableActionBarHeader(boolean aIsHeaderViewDisplayed){  mIsHeaderViewDisplayed=aIsHeaderViewDisplayed;  if (SHOW_ACTION_BAR_HEADER == aIsHeaderViewDisplayed) {    InputMethodManager imm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);    imm.hideSoftInputFromWindow(mEditText.getWindowToken(),0);    mActionBarCustomTitle.setVisibility(View.GONE);    mActionBarCustomTopic.setVisibility(View.GONE);    updateActionBarHeaderView();    mActionBarCustomArrowImageView.setImageResource(R.drawable.ic_arrow_drop_up_white);    mRoomHeaderView.setVisibility(View.VISIBLE);    mToolbar.setBackgroundColor(Color.TRANSPARENT);  } else {    if (View.VISIBLE == mRoomHeaderView.getVisibility()) {      mActionBarCustomTitle.setVisibility(View.VISIBLE);      if (!TextUtils.isEmpty(mActionBarCustomTopic.getText())) {        mActionBarCustomTopic.setVisibility(View.VISIBLE);      }      updateActionBarTitleAndTopic();      mActionBarCustomArrowImageView.setImageResource(R.drawable.ic_arrow_drop_down_white);      mRoomHeaderView.setVisibility(View.GONE);      mToolbar.setBackgroundColor(ContextCompat.getColor(this,R.color.vector_green_color));    }  }}  }
class C{  public HistoryUpdateResult clone(){  HistoryUpdateResult result=new HistoryUpdateResult();  result.StatusCode=StatusCode;  result.OperationResults=OperationResults == null ? null : OperationResults.clone();  result.DiagnosticInfos=DiagnosticInfos == null ? null : DiagnosticInfos.clone();  return result;}  }
class C{  public static boolean isPublic(int modifiers){  return (modifiers & PUBLIC) != 0;}  }
class C{  public void testNegativeRangeQuery(){  assertQ("Collated RangeQ: ",req("fl","id","q","sort_ar:[\u062F TO \u0698]","sort","id asc"),"//*[@numFound='0']");}  }
class C{  public void release(){  while (true) {    int cnt=activeCnt.get();    if (cnt == 0) {      if (log.isDebugEnabled())       log.debug("IPC IO not released (count was 0): " + this);      return;    }    if (activeCnt.compareAndSet(cnt,cnt - 1)) {      if (cnt == 1) {        ipcCache.remove(endpointAddr,this);        if (log.isDebugEnabled())         log.debug("IPC IO stopping as unused: " + this);        stop();      } else       if (log.isDebugEnabled())       log.debug("IPC IO released: " + this);      return;    }  }}  }
class C{  public long[] cloneBits(){  return bits.clone();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.871 -0400",hash_original_method="EB113DC613E865F1731A88848A368345",hash_generated_method="86FD479F44CA5E7D8023B9B1142C4511") public static IOFileFilter directoryFileFilter(){  return DirectoryFileFilter.DIRECTORY;}  }
class C{  public double optDouble(String key,double defaultValue){  try {    return this.getDouble(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  @Override public boolean containsValue(Object value){  throw new RuntimeException();}  }
class C{  private void checkDiskSpace(DockerClient client){  List<Image> images=client.listImagesCmd().exec();  if (!images.stream().anyMatch(null)) {    PullImageResultCallback callback=client.pullImageCmd("alpine:3.2").exec(new PullImageResultCallback());    callback.awaitSuccess();  }  CreateContainerResponse createContainerResponse=client.createContainerCmd("alpine:3.2").withCmd("df","-P").exec();  String id=createContainerResponse.getId();  client.startContainerCmd(id).exec();  LogContainerResultCallback callback=client.logContainerCmd(id).withStdOut(true).exec(new LogContainerCallback());  try {    WaitContainerResultCallback waitCallback=new WaitContainerResultCallback();    client.waitContainerCmd(id).exec(waitCallback);    waitCallback.awaitStarted();    callback.awaitCompletion();    String logResults=callback.toString();    DiskSpaceUsage df=parseAvailableDiskSpace(logResults);    LOGGER.info("Disk utilization in Docker environment is {} ({} )",df.usedPercent.map(null).orElse("unknown"),df.availableMB.map(null).orElse("unknown available"));    if (df.availableMB.orElseThrow(null) < 2048) {      LOGGER.error("Docker environment has less than 2GB free - execution is unlikely to succeed so will be aborted.");      throw new NotEnoughDiskSpaceException("Not enough disk space in Docker environment");    }  } catch (  InterruptedException e) {    throw new RuntimeException(e);  } finally {    try {      client.removeContainerCmd(id).withRemoveVolumes(true).withForce(true).exec();    } catch (    NotFoundException|InternalServerErrorException ignored) {    }  }}  }
class C{  private void initializePositions(){  if (prismView != null && activityHelper != null) {    if (prismPosition == PrismPosition.RIGHT) {      ViewCompat.setTranslationX(prismView,activityHelper.getWidth());    } else     if (prismPosition == PrismPosition.LEFT) {      ViewCompat.setTranslationX(prismView,-activityHelper.getWidth());    } else     if (prismPosition == PrismPosition.TOP) {      ViewCompat.setTranslationY(prismView,-activityHelper.getHeight());    } else     if (prismPosition == PrismPosition.BOTTOM) {      ViewCompat.setTranslationY(prismView,activityHelper.getHeight());    }  }}  }
class C{  protected void comm(char[] text,int length){}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case ImPackage.REFERENCING_ELEMENT_IM__REWIRED_TARGET:    setRewiredTarget((SymbolTableEntry)null);  return;}super.eUnset(featureID);}  }
class C{  public String pad(String value,int places,String padCharacter){  StringBuilder sb=new StringBuilder();  sb.append(value);  while (sb.length() < places) {    sb.append(padCharacter);  }  return sb.toString();}  }
class C{  public boolean isStarted(){  return mStarted;}  }
class C{  private static String generateMessage(final List<IGraphPanel> modifiedGraphs){  final StringBuilder stringBuilder=new StringBuilder();  stringBuilder.append("Save changes to the following graphs?");  stringBuilder.append('\n');  for (  final IGraphPanel panel : modifiedGraphs) {    stringBuilder.append("- " + CNameShortener.shorten(panel.getModel().getGraph().getRawView()) + "\n");  }  return stringBuilder.toString();}  }
class C{  void close() throws IOException {  wrapper.close();}  }
class C{  public void init(){  isDebug=(getInitParameter("debug") == null) ? false : Boolean.valueOf(getInitParameter("debug"));}  }
class C{  public boolean isRefinementsRequired(){  return !queuedRefinements.isEmpty();}  }
class C{  public SocketAddress(String hostName,int port){  Assert.isNotNull(hostName);  this.hostName=hostName;  this.port=port;}  }
class C{  @SuppressWarnings({"cast","unchecked"}) public final List<CheckIn> listCheckIn(final User user) throws ServiceException {  EndpointUtil.throwIfNotAdmin(user);  return ofy().load().type(CheckIn.class).list();}  }
class C{  public boolean isStocked(){  Object oo=get_Value(COLUMNNAME_IsStocked);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Buffer read() throws NetworkException {  do {    try {      RtpPacket rtpPacket=mRtpReceiver.readRtpPacket();      if (rtpPacket == null) {        throw new NetworkException("Unable to read RTP packet!");      }      mRtpPacketsBuffer.add(rtpPacket);    } catch (    TimeoutException e) {      if (!mIsClosed) {        if (mRtpStreamListener != null) {          mRtpStreamListener.rtpStreamAborted();        }      }      throw new NetworkException("RTP Packet reading timeout!",e);    }  } while (mRtpPacketsBuffer.size() <= MAX_RTP_PACKETS);  RtpPacket packet=mRtpPacketsBuffer.poll();  mBuffer.setData(packet.mData);  mBuffer.setLength(packet.payloadlength);  mBuffer.setOffset(0);  mBuffer.setFormat(mInputFormat);  mBuffer.setSequenceNumber(packet.seqnum);  mBuffer.setRTPMarker(packet.marker != 0);  mBuffer.setTimestamp(packet.timestamp);  if (packet.extensionHeader != null) {    ExtensionElement element=packet.extensionHeader.getElementById(mExtensionHeaderId);    if (element != null) {      mBuffer.setVideoOrientation(VideoOrientation.parse(element.data[0]));    }  }  mInputFormat=null;  return mBuffer;}  }
class C{  public static boolean isBodyInActiveColorEnabled(){  return bodyInActiveColorEnabled;}  }
class C{  public Cylinder(){  this.setUpGeometryCache();}  }
class C{  public SimpleNode parse(Reader reader,String templateName) throws ParseException {  return parse(reader,templateName,true);}  }
class C{  public static <K,V>Map<K,V> synchronizedMap(Map<K,V> map){  if (map == null) {    throw new NullPointerException();  }  return new SynchronizedMap<K,V>(map);}  }
class C{  public boolean contains(final long[] a){  int i=d, l=a.length;  long bits[]=this.bits;  while (i-- != 0)   if (!get(bits,hash(a,l,i)))   return false;  return true;}  }
class C{  @Override public boolean isValidJoin(Map<String,Object> row1,Map<String,Object> row2){  return false;}  }
class C{  public void postInitialize(){  List<ConfigurationPluginLoader> pluginLoaders=engine.getServices().getConfigSnapshot().getPluginLoaders();  for (  ConfigurationPluginLoader config : pluginLoaders) {    try {      PluginLoader plugin=(PluginLoader)engine.getServices().getEngineEnvContext().lookup("plugin-loader/" + config.getLoaderName());      plugin.postInitialize();    } catch (    Throwable t) {      String message="Error post-initializing plugin class " + config.getClassName() + ": "+ t.getMessage();      log.error(message,t);      throw new EPException(message,t);    }  }}  }
class C{  private void _processMouseDragged(MouseEvent e){  JComponent component=(JComponent)e.getComponent();  boolean stop=true;  if (component.isShowing()) {    Rectangle visibleRect=component.getVisibleRect();    stop=visibleRect.contains(e.getX(),e.getY());  }  if (stop) {    _stop(component);  } else {    start(component,e);  }}  }
class C{  void sendSetOffMessage(int state){  sendOpcSwReqMessage(adjustStateForInversion(state),false);}  }
class C{  public MonetaryFormat code(int codeShift,String code){  checkArgument(codeShift >= 0);  final String[] codes=null == this.codes ? new String[MAX_DECIMALS] : Arrays.copyOf(this.codes,this.codes.length);  codes[codeShift]=code;  return new MonetaryFormat(negativeSign,positiveSign,zeroDigit,decimalMark,minDecimals,decimalGroups,shift,roundingMode,codes,codeSeparator,codePrefixed);}  }
class C{  public boolean supportsBLOB(){  return m_db.supportsBLOB();}  }
class C{  protected void fireInsertUpdate(DocumentEvent evt){  if (tokenMarker != null) {    DocumentEvent.ElementChange ch=evt.getChange(getDefaultRootElement());    if (ch != null) {      tokenMarker.insertLines(ch.getIndex() + 1,ch.getChildrenAdded().length - ch.getChildrenRemoved().length);    }  }  super.fireInsertUpdate(evt);}  }
class C{  protected void endPrefixMapping(NamespaceStack stack,int stackSize) throws SAXException {  while (stack.size() > stackSize) {    Namespace namespace=stack.pop();    if (namespace != null) {      contentHandler.endPrefixMapping(namespace.getPrefix());    }  }}  }
class C{  public SnackbarBuilder backgroundColorRes(@ColorRes int backgroundColorResId){  this.backgroundColor=getColor(backgroundColorResId);  return this;}  }
class C{  public void addVCard(VCard vcard){  writer().write(vcard);}  }
class C{  public URI parseHtmlLink(String linkUri){  for (  HtmlLinkFormat format : htmlLinkFormats) {    String handle=format.parseHandle(linkUri);    if (handle == null) {      continue;    }    try {      return new URI(format.getProtocol(),handle,null);    } catch (    URISyntaxException e) {      throw new IllegalArgumentException(e);    }  }  return null;}  }
class C{  public boolean isAuthenticated(){  return token != null;}  }
class C{  public Surface rotate(float angle){  float sr=(float)Math.sin(angle);  float cr=(float)Math.cos(angle);  transform(cr,sr,-sr,cr,0,0);  return this;}  }
class C{  @AfterClass public static void tearDownAfterClass(TestContext context){  Async async=context.async();  jedis.close();  mainServer.close();  vertx.close(null);}  }
class C{  private void viewHelp(){  HelpInfo info=new HelpInfo();  info.createAndShowGui(m_frame);}  }
class C{  public synchronized void flush(){  map.clear();  this.notifyAll();}  }
class C{  private boolean journalRebuildRequired(){  final int REDUNDANT_OP_COMPACT_THRESHOLD=2000;  return redundantOpCount >= REDUNDANT_OP_COMPACT_THRESHOLD && redundantOpCount >= lruEntries.size();}  }
class C{  private void configureBounds(){  Drawable underlyingDrawable=getCurrent();  Rect bounds=getBounds();  int underlyingWidth=mUnderlyingWidth=underlyingDrawable.getIntrinsicWidth();  int underlyingHeight=mUnderlyingHeight=underlyingDrawable.getIntrinsicHeight();  if (underlyingWidth <= 0 || underlyingHeight <= 0) {    underlyingDrawable.setBounds(bounds);    mDrawMatrix=null;  } else {    underlyingDrawable.setBounds(0,0,underlyingWidth,underlyingHeight);    mDrawMatrix=mMatrix;  }}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  private boolean scrollToChildRect(Rect rect,boolean immediate){  final int delta=computeScrollDeltaToGetChildRectOnScreen(rect);  final boolean scroll=delta != 0;  if (scroll) {    if (immediate) {      scrollBy(delta,0);    } else {      smoothScrollBy(delta,0);    }  }  return scroll;}  }
class C{  public int size(){  return len >> 1;}  }
class C{  public static ReportMailingJobConfigurationData newInstance(final int id,final String name,final String value){  return new ReportMailingJobConfigurationData(id,name,value);}  }
class C{  protected void minimize(){  if (delegate != null) {    delegate.minimize();  }}  }
class C{  public AdditiveEpsilonIndicator(Problem problem,NondominatedPopulation referenceSet){  super(problem,referenceSet);}  }
class C{  public void inc(){  inc(1);}  }
class C{  public void attribClass(DiagnosticPosition pos,ClassSymbol c){  try {    annotate.flush();    attribClass(c);  } catch (  CompletionFailure ex) {    chk.completionError(pos,ex);  }}  }
class C{  @Override public void write(final int b) throws IOException {  cache[cachePosition]=(byte)b;  cachePosition++;  if (cachePosition == cache.length) {    flushCache();  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case FunctionblockPackage.PRIMITIVE_PARAM__TYPE:    return type != TYPE_EDEFAULT;case FunctionblockPackage.PRIMITIVE_PARAM__CONSTRAINT_RULE:  return constraintRule != null;}return super.eIsSet(featureID);}  }
class C{  public void add(final DiffPart diff){  this.parts.add(diff);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node newChild;  NodeList elementList;  Node employeeNode;  Node appendedChild;  doc=(Document)load("staff",true);  newChild=doc.getDocumentElement();  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);{    boolean success=false;    try {      appendedChild=employeeNode.appendChild(newChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.HIERARCHY_REQUEST_ERR);    }    assertTrue("throw_HIERARCHY_REQUEST_ERR",success);  }}  }
class C{  private static void openInBrowserWithTempFile(URI uri){  try {    File tempFile=File.createTempFile("rmredirect",".html");    tempFile.deleteOnExit();    try (FileWriter out=new FileWriter(tempFile)){      out.write(String.format("<!DOCTYPE html>\n" + "<html><meta http-equiv=\"refresh\" content=\"0; URL=%s\"><body>You are redirected to %s</body></html>",uri.toString(),uri.toString()));      Desktop.getDesktop().browse(tempFile.toURI());    }   } catch (  IOException e) {    showBrowserUnavailableMessage(uri.toString());  }}  }
class C{  public static CharSequence formatDuration(long millis){  final Resources res=Resources.getSystem();  if (millis >= HOUR_IN_MILLIS) {    final int hours=(int)((millis + 1800000) / HOUR_IN_MILLIS);    return res.getQuantityString(com.android.internal.R.plurals.duration_hours,hours,hours);  } else   if (millis >= MINUTE_IN_MILLIS) {    final int minutes=(int)((millis + 30000) / MINUTE_IN_MILLIS);    return res.getQuantityString(com.android.internal.R.plurals.duration_minutes,minutes,minutes);  } else {    final int seconds=(int)((millis + 500) / SECOND_IN_MILLIS);    return res.getQuantityString(com.android.internal.R.plurals.duration_seconds,seconds,seconds);  }}  }
class C{  protected Object lookupHandler(String urlPath,ServerWebExchange exchange) throws Exception {  Object handler=this.handlerMap.get(urlPath);  if (handler != null) {    return handleMatch(handler,urlPath,urlPath,exchange);  }  List<String> matches=new ArrayList<>();  for (  String pattern : this.handlerMap.keySet()) {    if (getPathMatcher().match(pattern,urlPath)) {      matches.add(pattern);    } else     if (useTrailingSlashMatch()) {      if (!pattern.endsWith("/") && getPathMatcher().match(pattern + "/",urlPath)) {        matches.add(pattern + "/");      }    }  }  String bestMatch=null;  Comparator<String> comparator=getPathMatcher().getPatternComparator(urlPath);  if (!matches.isEmpty()) {    Collections.sort(matches,comparator);    if (logger.isDebugEnabled()) {      logger.debug("Matching patterns for request [" + urlPath + "] are "+ matches);    }    bestMatch=matches.get(0);  }  if (bestMatch != null) {    handler=this.handlerMap.get(bestMatch);    if (handler == null) {      Assert.isTrue(bestMatch.endsWith("/"));      handler=this.handlerMap.get(bestMatch.substring(0,bestMatch.length() - 1));    }    String pathWithinMapping=getPathMatcher().extractPathWithinPattern(bestMatch,urlPath);    return handleMatch(handler,bestMatch,pathWithinMapping,exchange);  }  return null;}  }
class C{  public void addResultDetail(String name,String value,String details){  _heuristicResultDetails.add(new HeuristicResultDetails(name,value,details));}  }
class C{  private static void skipAnnotation(ByteBuffer buf,boolean complete){  if (complete)   buf.getShort();  int numMembers=buf.getShort() & 0xFFFF;  for (int i=0; i < numMembers; i++) {    buf.getShort();    skipMemberValue(buf);  }}  }
class C{  @Override public void resetOptions(){  super.resetOptions();  setFileExtension(MatlabLoader.FILE_EXTENSION);  setUseDouble(false);  setUseTabs(false);  m_HeaderWritten=false;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.496 -0500",hash_original_method="8E721A4E4DD3EA40820BFACA50BE3D1C",hash_generated_method="58BD281F5835739A9176EEFBD8CF5219") public void putBooleanArray(String key,boolean[] value){  unparcel();  mMap.put(key,value);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.CLASS_CONTENT___COMMENT_1:    return comment_1 != null && !comment_1.isEmpty();case UmplePackage.CLASS_CONTENT___CLASS_DEFINITION_1:  return classDefinition_1 != null && !classDefinition_1.isEmpty();case UmplePackage.CLASS_CONTENT___TRACE_1:return trace_1 != null && !trace_1.isEmpty();case UmplePackage.CLASS_CONTENT___POSITION_1:return position_1 != null && !position_1.isEmpty();case UmplePackage.CLASS_CONTENT___DISPLAY_COLOR_1:return displayColor_1 != null && !displayColor_1.isEmpty();case UmplePackage.CLASS_CONTENT___ABSTRACT_1:return abstract_1 != null && !abstract_1.isEmpty();case UmplePackage.CLASS_CONTENT___INVARIANT_1:return invariant_1 != null && !invariant_1.isEmpty();case UmplePackage.CLASS_CONTENT___SOFTWARE_PATTERN_1:return softwarePattern_1 != null && !softwarePattern_1.isEmpty();case UmplePackage.CLASS_CONTENT___DEPEND_1:return depend_1 != null && !depend_1.isEmpty();case UmplePackage.CLASS_CONTENT___SYMMETRIC_REFLEXIVE_ASSOCIATION_1:return symmetricReflexiveAssociation_1 != null && !symmetricReflexiveAssociation_1.isEmpty();case UmplePackage.CLASS_CONTENT___ATTRIBUTE_1:return attribute_1 != null && !attribute_1.isEmpty();case UmplePackage.CLASS_CONTENT___STATE_MACHINE_1:return stateMachine_1 != null && !stateMachine_1.isEmpty();case UmplePackage.CLASS_CONTENT___INLINE_ASSOCIATION_1:return inlineAssociation_1 != null && !inlineAssociation_1.isEmpty();case UmplePackage.CLASS_CONTENT___CONCRETE_METHOD_DECLARATION_1:return concreteMethodDeclaration_1 != null && !concreteMethodDeclaration_1.isEmpty();case UmplePackage.CLASS_CONTENT___CONSTANT_DECLARATION_1:return constantDeclaration_1 != null && !constantDeclaration_1.isEmpty();case UmplePackage.CLASS_CONTENT___EXTRA_CODE_1:return extraCode_1 != null && !extraCode_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  @Override public ServiceExceptionQueryTimeout rethrow(String msg){  return new ServiceExceptionQueryTimeout(msg,this);}  }
class C{  public ObjIdConcurrentMap(){  this(DEFAULT_INITIAL_CAPACITY,DEFAULT_LOAD_FACTOR,DEFAULT_CONCURRENCY_LEVEL);}  }
class C{  private void crossConstructPhase(List<int[]> partition,boolean eliminated[]){  int numImpurities=0;  List<Double> allPValues=new ArrayList<>();  Set failures[][]=new Set[partition.size()][];  for (int i=0; i < partition.size(); i++) {    int cluster[]=partition.get(i);    failures[i]=new Set[cluster.length];    for (int j=0; j < cluster.length; j++) {      failures[i][j]=new HashSet();    }  }  for (int p1=0; p1 < partition.size(); p1++) {    int cluster1[]=partition.get(p1);    for (int p2=p1 + 1; p2 < partition.size(); p2++) {      int cluster2[]=partition.get(p2);      for (int i=0; i < cluster1.length - 2; i++) {        if (eliminated[cluster1[i]]) {          continue;        }        for (int j=i + 1; j < cluster1.length - 1; j++) {          if (eliminated[cluster1[j]]) {            continue;          }          for (int k=j + 1; k < cluster1.length; k++) {            if (eliminated[cluster1[k]]) {              continue;            }            for (int l=0; l < cluster2.length; l++) {              if (eliminated[cluster2[l]]) {                continue;              }              allPValues.add(tetradTest.tetradPValue(cluster1[i],cluster1[j],cluster1[k],cluster2[l]));              allPValues.add(tetradTest.tetradPValue(cluster1[i],cluster1[j],cluster2[l],cluster1[k]));              allPValues.add(tetradTest.tetradPValue(cluster1[i],cluster1[k],cluster2[l],cluster1[j]));            }          }        }      }    }  }  if (allPValues.isEmpty())   return;  for (int p1=0; p1 < partition.size() - 1; p1++) {    int cluster1[]=partition.get(p1);    for (int p2=p1 + 1; p2 < partition.size(); p2++) {      int cluster2[]=partition.get(p2);      for (int i=0; i < cluster1.length - 1; i++) {        if (eliminated[cluster1[i]]) {          continue;        }        for (int j=i + 1; j < cluster1.length; j++) {          if (eliminated[cluster1[j]]) {            continue;          }          for (int k=0; k < cluster2.length - 1; k++) {            if (eliminated[cluster2[k]]) {              continue;            }            for (int l=k + 1; l < cluster2.length; l++) {              if (eliminated[cluster2[l]]) {                continue;              }              allPValues.add(tetradTest.tetradPValue(cluster1[i],cluster1[j],cluster2[k],cluster2[l]));            }          }        }      }    }  }  Collections.sort(allPValues);  int c=0;  while (allPValues.get(c) < tetradTest.getSignificance() * (c + 1.) / allPValues.size()) {    c++;  }  double cutoff=allPValues.get(c);  System.out.println("c = " + c + " cutoff = "+ allPValues.get(c));  double localPValues[]=new double[3];  for (int p1=0; p1 < partition.size(); p1++) {    int cluster1[]=partition.get(p1);    for (int p2=p1 + 1; p2 < partition.size(); p2++) {      int cluster2[]=partition.get(p2);      for (int i=0; i < cluster1.length - 2; i++) {        if (eliminated[cluster1[i]]) {          continue;        }        for (int j=i + 1; j < cluster1.length - 1; j++) {          if (eliminated[cluster1[j]]) {            continue;          }          for (int k=j + 1; k < cluster1.length; k++) {            if (eliminated[cluster1[k]]) {              continue;            }            for (int l=0; l < cluster2.length; l++) {              if (eliminated[cluster2[l]]) {                continue;              }              localPValues[0]=tetradTest.tetradPValue(cluster1[i],cluster1[j],cluster1[k],cluster2[l]);              localPValues[1]=tetradTest.tetradPValue(cluster1[i],cluster1[j],cluster2[l],cluster1[k]);              localPValues[2]=tetradTest.tetradPValue(cluster1[i],cluster1[k],cluster2[l],cluster1[j]);              for (int t=0; t < 3; t++) {                if (localPValues[t] < cutoff) {                  int newFailure[]=new int[4];                  newFailure[0]=cluster1[i];                  newFailure[1]=cluster1[j];                  newFailure[2]=cluster1[k];                  newFailure[3]=cluster2[l];                  failures[p1][i].add(newFailure);                  failures[p1][j].add(newFailure);                  failures[p1][k].add(newFailure);                  failures[p2][l].add(newFailure);                  numImpurities++;                }              }            }          }        }      }    }  }  for (int p1=0; p1 < partition.size() - 1; p1++) {    int cluster1[]=partition.get(p1);    for (int p2=p1 + 1; p2 < partition.size(); p2++) {      int cluster2[]=partition.get(p2);      for (int i=0; i < cluster1.length - 1; i++) {        if (eliminated[cluster1[i]]) {          continue;        }        for (int j=i + 1; j < cluster1.length; j++) {          if (eliminated[cluster1[j]]) {            continue;          }          for (int k=0; k < cluster2.length - 1; k++) {            if (eliminated[cluster2[k]]) {              continue;            }            for (int l=k + 1; l < cluster2.length; l++) {              if (eliminated[cluster2[l]]) {                continue;              }              if (tetradTest.tetradPValue(cluster1[i],cluster2[k],cluster1[j],cluster2[l]) < cutoff) {                int newFailure[]=new int[4];                newFailure[0]=cluster1[i];                newFailure[1]=cluster1[j];                newFailure[2]=cluster2[k];                newFailure[3]=cluster2[l];                failures[p1][i].add(newFailure);                failures[p1][j].add(newFailure);                failures[p2][k].add(newFailure);                failures[p2][l].add(newFailure);                numImpurities++;              }            }          }        }      }    }  }  if (numImpurities > 0) {    printlnMessage("Iteration 1   " + numImpurities + " of "+ allPValues.size()+ " tetrads fail the FDR test.");  } else {    printlnMessage("Needs NO pruning.");  }  while (numImpurities > 0) {    int max=Integer.MIN_VALUE;    int max_index_p=-1, max_index_i=-1;    for (int p=0; p < partition.size(); p++) {      int cluster[]=partition.get(p);      for (int i=0; i < cluster.length; i++) {        if (eliminated[cluster[i]]) {          continue;        }        if (failures[p][i].size() > max) {          max=failures[p][i].size();          max_index_p=p;          max_index_i=i;        }      }    }    eliminated[partition.get(max_index_p)[max_index_i]]=true;    numImpurities-=failures[max_index_p][max_index_i].size();    for (int p=0; p < partition.size(); p++) {      int cluster[]=partition.get(p);      for (int i=0; i < cluster.length; i++) {        if (eliminated[cluster[i]]) {          continue;        }        Set toRemove=new HashSet();        for (Iterator it=failures[p][i].iterator(); it.hasNext(); ) {          int impurity[]=(int[])it.next();          for (int j=0; j < 4; j++) {            if (impurity[j] == partition.get(max_index_p)[max_index_i]) {              toRemove.add(impurity);              break;            }          }        }        failures[p][i].removeAll(toRemove);      }    }    int[] cluster=partition.get(max_index_p);    String var=tetradTest.getVarNames()[(cluster[max_index_i])];    printlnMessage("Dropped " + var + "  Without it, "+ numImpurities+ " of "+ allPValues.size()+ " tetrads fail the FDR test.");  }}  }
class C{  private void readNextLine(BufferedReader reader,Queue<Double> entries) throws IOException {  String line=null;  do {    line=reader.readLine();    if (line == null) {      throw new EOFException("unexpectedly reached EOF");    }  } while ((line=line.trim()).isEmpty());  String[] tokens=line.split("\\s+");  for (int i=0; i < tokens.length; i++) {    entries.offer(Double.parseDouble(tokens[i]));  }}  }
class C{  @Override public void prestart(){}  }
class C{  public bdo addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public void skippedEntity(String name) throws SAXException {}  }
class C{  @Command(aliases="recycle",description="Cycles to the same map") public static void recycle(CommandContext cmd,@Optional Integer time){  if (time == null) {    time=30;  }  time*=20;  MatchThread matchThread=Cardinal.getMatchThread(cmd.getSender());  Cardinal.getModule(CycleModule.class).getNextCycle(Cardinal.getMatchThread(cmd.getSender())).setMap(matchThread.getCurrentMatch().getMap());  CycleCountdown countdown=Cardinal.getModule(CountdownModule.class).getCycleCountdown(matchThread);  countdown.setTime(time);  countdown.setCancelled(false);}  }
class C{  public void putInteger(long v,int tag){  putIntegerValue(v);  putTag(tag);}  }
class C{  static XMLName create(String defaultNamespaceUri,String name){  if (name == null)   throw new IllegalArgumentException();  int l=name.length();  if (l != 0) {    char firstChar=name.charAt(0);    if (firstChar == '*') {      if (l == 1) {        return XMLName.formStar();      }    } else     if (firstChar == '@') {      XMLName xmlName=XMLName.formProperty("",name.substring(1));      xmlName.setAttributeName();      return xmlName;    }  }  return XMLName.formProperty(defaultNamespaceUri,name);}  }
class C{  public LinkToolBar(){  labels=ResourceBundleUtil.getBundle("org.jhotdraw.samples.svg.Labels");  setName(labels.getString(getID() + ".toolbar"));  setDisclosureStateCount(3);}  }
class C{  @PrePersist @PreUpdate protected void preUpdate(){  if (this.createdDate == null) {    this.createdDate=new Date();  }}  }
class C{  private boolean targetInBannedPackage(SootMethod target){  for (  String pkg : BANNED_PACKAGES) {    if (target.getName().startsWith(pkg))     return true;  }  return false;}  }
class C{  public static TypeReference newTypeParameterReference(int sort,int paramIndex){  return new TypeReference((sort << 24) | (paramIndex << 16));}  }
class C{  public void forFilteredPlayersExecute(final Task<Player> task,final FilterCriteria<Player> filter){  for (  Player player : players.values()) {    if (filter.passes(player)) {      task.execute(player);    }  }}  }
class C{  private static Model createModel(Node topNode){  Model model=new Model();  for (int i=0; i < topNode.getChildNodes().getLength(); i++) {    Node node=topNode.getChildNodes().item(i);    if (node.getNodeName().equals("rule")) {      Rule rule=XMLRuleReader.getRule(node);      model.addRule(rule);    } else     if (XMLUtils.hasContent(node)) {      if (node.getNodeName().equals("#text")) {        throw new RuntimeException("cannot insert free text in <model>");      }      throw new RuntimeException("Invalid tag in <model>: " + node.getNodeName());    }  }  if (topNode.hasAttributes() && topNode.getAttributes().getNamedItem("trigger") != null) {    Pattern p=Pattern.compile("([\\w\\*\\^_\\-\\[\\]\\{\\}]+" + "(?:\\([\\w\\*,\\s\\^_\\-\\[\\]\\{\\}]+\\))?)" + "[\\w\\*\\^_\\-\\[\\]\\{\\}]*");    Matcher m=p.matcher(topNode.getAttributes().getNamedItem("trigger").getNodeValue());    while (m.find()) {      model.addTrigger(m.group());    }  } else {    throw new RuntimeException("<model> must have a 'trigger' attribute:" + XMLUtils.serialise(topNode));  }  if (topNode.getAttributes().getNamedItem("blocking") != null) {    boolean blocking=Boolean.parseBoolean(topNode.getAttributes().getNamedItem("blocking").getNodeValue());    model.setBlocking(blocking);  }  if (topNode.getAttributes().getNamedItem("id") != null) {    String id=topNode.getAttributes().getNamedItem("id").getNodeValue();    model.setId(id);  }  return model;}  }
class C{  public void testResequenceQuery() throws Throwable {  CompletableFuture<QueryResponse> future1=new CompletableFuture<>();  CompletableFuture<QueryResponse> future2=new CompletableFuture<>();  Connection connection=mock(Connection.class);  Mockito.<CompletableFuture<QueryResponse>>when(connection.send(any(QueryRequest.class))).thenReturn(future1).thenReturn(future2);  ClientSessionState state=new ClientSessionState(UUID.randomUUID()).setSessionId(1).setState(Session.State.OPEN);  Executor executor=new MockExecutor();  ThreadContext context=mock(ThreadContext.class);  when(context.executor()).thenReturn(executor);  ClientSessionSubmitter submitter=new ClientSessionSubmitter(connection,state,new ClientSequencer(state),context);  CompletableFuture<String> result1=submitter.submit(new TestQuery());  CompletableFuture<String> result2=submitter.submit(new TestQuery());  future2.complete(QueryResponse.builder().withStatus(Response.Status.OK).withIndex(10).withResult("Hello world again!").build());  assertEquals(state.getResponseIndex(),1);  assertFalse(result1.isDone());  assertFalse(result2.isDone());  future1.complete(QueryResponse.builder().withStatus(Response.Status.OK).withIndex(9).withResult("Hello world!").build());  assertTrue(result1.isDone());  assertEquals(result1.get(),"Hello world!");  assertTrue(result2.isDone());  assertEquals(result2.get(),"Hello world again!");  assertEquals(state.getResponseIndex(),10);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:54.858 -0500",hash_original_method="1E825B982EDCD87AA4529BBFDCDBA2F1",hash_generated_method="0B022ADB77E9F842F6D3E66104DE289B") public boolean equals(Object obj){  if (obj instanceof TimeStamp) {    return ntpTime == ((TimeStamp)obj).ntpValue();  }  return false;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAutoTransition_();}  }
class C{  public static char[] toCharArray(InputStream is,String encoding) throws IOException {  return toCharArray(is,Charsets.toCharset(encoding));}  }
class C{  public CIndegreeCriteriumPanel(final CIndegreeCriterium criterium){  super(new BorderLayout());  m_operatorBox=new CRelationBox(criterium);  m_inputField=new CTextInputField(criterium,new CDecFormatter(8));  initPanel();}  }
class C{  static String parseDesc(String desc,String sep){  String params="", param;  char c;  int i, len, arraylevel=0;  boolean didone=false;  len=desc.length();  for (i=0; i < len; i++) {    c=desc.charAt(i);    if (c == DESC_BYTE.charAt(0)) {      param="byte";    } else     if (c == DESC_CHAR.charAt(0)) {      param="char";    } else     if (c == DESC_DOUBLE.charAt(0)) {      param="double";    } else     if (c == DESC_FLOAT.charAt(0)) {      param="float";    } else     if (c == DESC_INT.charAt(0)) {      param="int";    } else     if (c == DESC_LONG.charAt(0)) {      param="long";    } else     if (c == DESC_SHORT.charAt(0)) {      param="short";    } else     if (c == DESC_BOOLEAN.charAt(0)) {      param="boolean";    } else     if (c == DESC_VOID.charAt(0)) {      param="void";    } else     if (c == DESC_ARRAY.charAt(0)) {      arraylevel++;      continue;    } else     if (c == DESC_OBJECT.charAt(0)) {      int j;      j=desc.indexOf(';',i + 1);      if (j < 0) {        G.v().out.println("Warning: Parse error -- can't find a ; in " + desc.substring(i + 1));        param="<error>";      } else {        if (j - i > 10 && desc.substring(i + 1,i + 11).compareTo("java/lang/") == 0)         i=i + 10;        param=desc.substring(i + 1,j);        param=param.replace('/','.');        i=j;      }    } else {      param="???";    }    if (didone)     params=params + sep;    params=params + param;    while (arraylevel > 0) {      params=params + "[]";      arraylevel--;    }    didone=true;  }  return params;}  }
class C{  public static String toHexString(byte[] bytes){  StringBuilder sb=new StringBuilder();  if (bytes == null) {    sb.append("null");  } else {    for (    byte b : bytes) {      sb.append(String.format("%02x",b & 0xFF));    }  }  return sb.toString();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Inject void initialize(Injector injector){  if (this.injector != null) {    throw new ConfigurationException(Collections.singletonList(new Message(FactoryProvider2.class,"Factories.create() factories may only be used in one Injector!")));  }  this.injector=injector;  for (  Method method : returnTypesByMethod.keySet()) {    Object[] args=new Object[method.getParameterTypes().length];    Arrays.fill(args,"dummy object for validating Factories");    getBindingFromNewInjector(method,args);  }}  }
class C{  public Object parse(URL url){  return parseURL(url,null);}  }
class C{  @JsonCreator public static ClusterTaskConfig create(@JsonProperty("cpus") double cpus,@JsonProperty("memory_mb") int memoryMb,@JsonProperty("disk_mb") int diskMb){  return new ClusterTaskConfig(cpus,memoryMb,diskMb);}  }
class C{  public void error(String message){  errorCallback.invoke(message);}  }
class C{  private void processVMAX3SLO(StorageSystem storageSystem,CIMInstance settingInstance){  String emcFastSetting=(String)settingInstance.getPropertyValue(Constants.EMC_FAST_SETTING);  if (!Strings.isNullOrEmpty(emcFastSetting)) {    String slo=(String)settingInstance.getPropertyValue(Constants.EMC_SLO);    Float avgResponseTimeValue=(Float)settingInstance.getPropertyValue(Constants.EMC_AVG_RESPONSE_TIME);    if (!Strings.isNullOrEmpty(slo) && !checkForNull(avgResponseTimeValue)) {      String avgResponseTime=avgResponseTimeValue.toString();      String workload=(String)settingInstance.getPropertyValue(Constants.EMC_WORKLOAD);      workload=Strings.isNullOrEmpty(workload) ? Constants.NONE : workload;      String sloName=generateSLOPolicyName(slo,workload,avgResponseTime);      sloNames.add(sloName);      String sloID=NativeGUIDGenerator.generateAutoTierPolicyNativeGuid(storageSystem.getNativeGuid(),sloName,NativeGUIDGenerator.SLO_POLICY);      AutoTieringPolicy autoTieringPolicy=getAutoTieringPolicyByNameFromDB(sloID,_dbClient);      createOrUpdateSLOBasedAutoTierPolicy(storageSystem,autoTieringPolicy,sloID,sloName,slo,workload,avgResponseTime);    } else {      _logger.warn(String.format("Setting %s had non-null EMCFastSetting property = '%s', " + "but its EMCSLO and/or EMCApproxAverageResponseTime property is null/empty.",settingInstance.getObjectPath().toString(),emcFastSetting));    }  }}  }
class C{  public IntegrationRuntimeException(Throwable cause){  super(cause);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.VARIABLE_DECLARATION_OR_BINDING___GET_VARIABLE_DECLARATIONS:    return getVariableDeclarations();}return super.eInvoke(operationID,arguments);}  }
class C{  @Override public void onGuiClosed(){  Keyboard.enableRepeatEvents(false);}  }
class C{  public DataException(Throwable cause){  super(cause);}  }
class C{  public void buildConfigurations() throws EmbeddingLDAPException {  StAXOMBuilder builder;  try {    builder=new StAXOMBuilder(configurationFileStream);  } catch (  XMLStreamException e) {    logger.error("Unable to build LDAP configurations.",e);    throw new EmbeddingLDAPException("Unable to build LDAP configurations",e);  }  OMElement documentElement=builder.getDocumentElement();  OMElement embeddedLdap=documentElement.getFirstChildWithName(new QName("EmbeddedLDAP"));  buildLDAPConfigurations(embeddedLdap);  if (ldapConfiguration.isEnable()) {    buildPartitionConfigurations(documentElement);    OMElement kdcConfigElement=documentElement.getFirstChildWithName(new QName("KDCServer"));    buildKDCConfigurations(kdcConfigElement);    this.partitionConfigurations.setKdcEnabled(this.kdcEnabled);    if (this.kdcEnabled) {      this.kdcConfigurations.setSystemAdminPassword(this.getConnectionPassword());      this.kdcConfigurations.setPartitionInfo(this.getPartitionConfigurations());    }  }}  }
class C{  public void createLogicalRouterLinkPortTier0(LogicalRouterLinkPortOnTier0CreateSpec spec,FutureCallback<LogicalRouterLinkPortOnTier0> responseCallback) throws IOException {  postAsync(LOGICAL_ROUTER_PORTS_BASE_PATH,serializeObjectAsJson(spec),HttpStatus.SC_CREATED,new TypeReference<LogicalRouterLinkPortOnTier0>(){  },responseCallback);}  }
class C{  public String message(){  return rawResponse.message();}  }
class C{  public byte[] asn1Encode() throws Asn1Exception, IOException {  DerOutputStream bytes=new DerOutputStream();  DerOutputStream temp=new DerOutputStream();  BigInteger bint=BigInteger.valueOf(this.nameType);  temp.putInteger(bint);  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x00),temp);  temp=new DerOutputStream();  DerValue der[]=new DerValue[nameStrings.length];  for (int i=0; i < nameStrings.length; i++) {    der[i]=new KerberosString(nameStrings[i]).toDerValue();  }  temp.putSequence(der);  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x01),temp);  temp=new DerOutputStream();  temp.write(DerValue.tag_Sequence,bytes);  return temp.toByteArray();}  }
class C{  public void remove(LogLine object){  if (mOriginalValues != null) {synchronized (mLock) {      mOriginalValues.remove(object);    }  } else {    mObjects.remove(object);  }  if (mNotifyOnChange)   notifyDataSetChanged();}  }
class C{  public void startRotate(float startAngle,float dAngle,int duration){  mMode=SCROLL_MODE;  mFinished=false;  mDuration=duration;  mStartTime=AnimationUtils.currentAnimationTimeMillis();  mStartAngle=startAngle;  mDeltaAngle=dAngle;}  }
class C{  private void reload(){  getLoaderManager().restartLoader(WIFI_LOADER_ID,null,WifiListContainer.this);}  }
class C{  public void replaceTables(DatabaseSession session,JPAMSchemaManager schemaManager,boolean createSequenceTables){  replaceTables(session,schemaManager,createSequenceTables,false);}  }
class C{  public void printInfo(){}  }
class C{  public boolean isPrivate(){  return privateFlag;}  }
class C{  public MqttConnectionDetailsWithOptions(final String id,final MqttConnectionDetails details) throws ConfigurationException {  this.id=id;  this.setProtocol(details.getProtocol());  this.setName(details.getName());  this.setClientID(details.getClientID());  this.getServerURI().addAll(details.getServerURI());  this.setConnectionTimeout(details.getConnectionTimeout());  this.setKeepAliveInterval(details.getKeepAliveInterval());  this.setCleanSession(details.isCleanSession());  this.setLastWillAndTestament(details.getLastWillAndTestament());  this.setUserCredentials(details.getUserCredentials());  this.setReconnectionSettings(details.getReconnectionSettings());  this.setSSL(details.getSSL());  final boolean sslEnabled=details.getSSL() != null && details.getSSL().getMode() != null && !details.getSSL().getMode().equals(SecureSocketModeEnum.DISABLED);  this.setWebSocket(details.isWebSocket());  MqttConfigurationUtils.completeServerURIs(this,sslEnabled,Boolean.TRUE.equals(this.isWebSocket()));  MqttConfigurationUtils.populateConnectionDefaults(this);  try {    populateMqttConnectOptions();  } catch (  IllegalArgumentException|SpyException e) {    throw new ConfigurationException("Invalid configuration parameters",e);  }}  }
class C{  protected int estimateNameValuePairLen(final NameValuePair nvp){  if (nvp == null)   return 0;  int result=nvp.getName().length();  final String value=nvp.getValue();  if (value != null) {    result+=3 + value.length();  }  return result;}  }
class C{  public void add(Point2D.Double c0){  add(new Node(0,c0,c0,c0));}  }
class C{  @Override public void process(final Task<Diff> task) throws ConfigurationException, IOException, SQLConsumerException {  int i=-1;  SQLEncoding[] queries=null;  try {    queries=sqlEncoder.encodeTask(task);    Statement query;    int size=queries.length;    for (i=0; i < size; i++) {      query=connection.createStatement();      query.executeUpdate(queries[i].getQuery());      query.close();    }  } catch (  SQLException e) {    String q;    if (queries == null || queries.length <= i || queries[i] == null) {      q="<unidentified query>";    } else {      q=queries[i].toString();    }    throw ErrorFactory.createSQLConsumerException(ErrorKeys.DIFFTOOL_SQLCONSUMER_DATABASEWRITER_EXCEPTION,q,e);  }catch (  DecodingException e) {    throw ErrorFactory.createSQLConsumerException(ErrorKeys.DIFFTOOL_SQLCONSUMER_DATABASEWRITER_EXCEPTION,e);  }catch (  EncodingException e) {    throw ErrorFactory.createSQLConsumerException(ErrorKeys.DIFFTOOL_SQLCONSUMER_FILEWRITER_EXCEPTION,e);  }}  }
class C{  private void activityFinished(String activityType,double time){  if (FreightConstants.START.equals(activityType) || FreightConstants.END.equals(activityType))   return;  Tour tour=this.scheduledTour.getTour();  if (FreightConstants.PICKUP.equals(activityType)) {    Pickup tourElement=(Pickup)tour.getTourElements().get(activityCounter);    notifyPickup(driverId,tourElement.getShipment(),time);    activityCounter+=2;  } else   if (FreightConstants.DELIVERY.equals(activityType)) {    Delivery tourElement=(Delivery)tour.getTourElements().get(activityCounter);    notifyDelivery(driverId,tourElement.getShipment(),time);    activityCounter+=2;  } else {    activityCounter+=2;  }}  }
class C{  public void printStackTrace(java.io.PrintWriter s){  if (exception == null) {    super.printStackTrace(s);  } else {synchronized (s) {      s.println(this);      super.printStackTrace(s);    }  }}  }
class C{  public final void testValidateUppercaseNotAllowingSpacesFails(){  char[] allowedCharacters=new char[]{'-'};  LetterOrNumberValidator characterOrNumberValidator=new LetterOrNumberValidator("foo",Case.UPPERCASE,false,allowedCharacters);  assertFalse(characterOrNumberValidator.validate("Ab 1-"));}  }
class C{  public void add(int position,Product product){  relatedProducts.add(position,product);  notifyItemInserted(position);}  }
class C{  public static IndexComponent createIterableFromColumn(NameComponentDescription rowKeyDesc,String columnNameToGetData,String codeToAccessValue){  return new IndexComponent(Preconditions.checkNotNull(rowKeyDesc),null,null,Preconditions.checkNotNull(columnNameToGetData),Preconditions.checkNotNull(codeToAccessValue),true);}  }
class C{  private static boolean isSemiPlanarYUV(int colorFormat){switch (colorFormat) {case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420Planar:case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420PackedPlanar:    return false;case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420SemiPlanar:case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420PackedSemiPlanar:case MediaCodecInfo.CodecCapabilities.COLOR_TI_FormatYUV420PackedSemiPlanar:  return true;default :throw new RuntimeException("unknown format " + colorFormat);}}  }
class C{  private static int analyze(Compiler compiler,int stepOpCodePos,int stepIndex) throws javax.xml.transform.TransformerException {  int stepType;  int stepCount=0;  int analysisResult=0x00000000;  while (OpCodes.ENDOP != (stepType=compiler.getOp(stepOpCodePos))) {    stepCount++;    boolean predAnalysis=analyzePredicate(compiler,stepOpCodePos,stepType);    if (predAnalysis)     analysisResult|=BIT_PREDICATE;switch (stepType) {case OpCodes.OP_VARIABLE:case OpCodes.OP_EXTFUNCTION:case OpCodes.OP_FUNCTION:case OpCodes.OP_GROUP:      analysisResult|=BIT_FILTER;    break;case OpCodes.FROM_ROOT:  analysisResult|=BIT_ROOT;break;case OpCodes.FROM_ANCESTORS:analysisResult|=BIT_ANCESTOR;break;case OpCodes.FROM_ANCESTORS_OR_SELF:analysisResult|=BIT_ANCESTOR_OR_SELF;break;case OpCodes.FROM_ATTRIBUTES:analysisResult|=BIT_ATTRIBUTE;break;case OpCodes.FROM_NAMESPACE:analysisResult|=BIT_NAMESPACE;break;case OpCodes.FROM_CHILDREN:analysisResult|=BIT_CHILD;break;case OpCodes.FROM_DESCENDANTS:analysisResult|=BIT_DESCENDANT;break;case OpCodes.FROM_DESCENDANTS_OR_SELF:if (2 == stepCount && BIT_ROOT == analysisResult) {analysisResult|=BIT_ANY_DESCENDANT_FROM_ROOT;}analysisResult|=BIT_DESCENDANT_OR_SELF;break;case OpCodes.FROM_FOLLOWING:analysisResult|=BIT_FOLLOWING;break;case OpCodes.FROM_FOLLOWING_SIBLINGS:analysisResult|=BIT_FOLLOWING_SIBLING;break;case OpCodes.FROM_PRECEDING:analysisResult|=BIT_PRECEDING;break;case OpCodes.FROM_PRECEDING_SIBLINGS:analysisResult|=BIT_PRECEDING_SIBLING;break;case OpCodes.FROM_PARENT:analysisResult|=BIT_PARENT;break;case OpCodes.FROM_SELF:analysisResult|=BIT_SELF;break;case OpCodes.MATCH_ATTRIBUTE:analysisResult|=(BIT_MATCH_PATTERN | BIT_ATTRIBUTE);break;case OpCodes.MATCH_ANY_ANCESTOR:analysisResult|=(BIT_MATCH_PATTERN | BIT_ANCESTOR);break;case OpCodes.MATCH_IMMEDIATE_ANCESTOR:analysisResult|=(BIT_MATCH_PATTERN | BIT_PARENT);break;default :throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NULL_ERROR_HANDLER,new Object[]{Integer.toString(stepType)}));}if (OpCodes.NODETYPE_NODE == compiler.getOp(stepOpCodePos + 3)) {analysisResult|=BIT_NODETEST_ANY;}stepOpCodePos=compiler.getNextStepPos(stepOpCodePos);if (stepOpCodePos < 0) break;}analysisResult|=(stepCount & BITS_COUNT);return analysisResult;}  }
class C{  public void testLoadScenario(){  System.out.println("loadScenario");  String scenarioFile="My Scenario";  WebResource mockWebResource=createMock(WebResource.class);  Audit mockAudit=createMock(Audit.class);  expect(mockWebResource.getAudit()).andReturn(mockAudit).once();  ScenarioLoaderFactory mockScenarioLoaderFactory=createMock(ScenarioLoaderFactory.class);  ScenarioLoader mockScenarioLoader=createMock(ScenarioLoader.class);  expect(mockScenarioLoaderFactory.create(mockWebResource,scenarioFile)).andReturn(mockScenarioLoader).once();  mockScenarioLoader.run();  expectLastCall().once();  List<Content> contentList=new ArrayList<Content>();  expect(mockScenarioLoader.getResult()).andReturn(contentList).once();  ContentDataService mockContentDataService=createMock(ContentDataService.class);  WebResourceDataService mockWebResourceDataService=createMock(WebResourceDataService.class);  expect(mockWebResourceDataService.saveOrUpdate(mockWebResource)).andReturn(mockWebResource).once();  replay(mockAudit);  replay(mockWebResource);  replay(mockWebResourceDataService);  replay(mockContentDataService);  replay(mockScenarioLoader);  replay(mockScenarioLoaderFactory);  ScenarioLoaderServiceImpl instance=new ScenarioLoaderServiceImpl();  instance.setContentDataService(mockContentDataService);  instance.setScenarioLoaderFactory(mockScenarioLoaderFactory);  instance.setWebResourceDataService(mockWebResourceDataService);  instance.loadScenario(mockWebResource,scenarioFile);  verify(mockAudit);  verify(mockWebResource);  verify(mockWebResourceDataService);  verify(mockContentDataService);  verify(mockScenarioLoader);  verify(mockScenarioLoaderFactory);}  }
class C{  public BaleenLogging(){  super();}  }
class C{  protected int determineNumAttributes(String row,int num){  int result;  int count;  result=num;  count=libsvmToArray(row).length;  if (count > result)   result=count;  return result;}  }
class C{  public BlindAnimation(View view){  this.view=view;  interpolator=new AccelerateDecelerateInterpolator();  duration=DURATION_LONG;  listener=null;}  }
class C{  private void runAndClean(Runnable run){  try {    run.run();  }  finally {    runnable=null;    timeoutFuture=null;  }}  }
class C{  private void doShader(PDFObject shaderObj) throws IOException {}  }
class C{  public ConnectionInfo(String u,Properties info){  u=remapURL(u);  this.originalURL=u;  if (!u.startsWith(Constants.START_URL)) {    throw DbException.getInvalidValueException("url",u);  }  this.url=u;  readProperties(info);  readSettingsFromURL();  setUserName(removeProperty("USER",""));  convertPasswords();  name=url.substring(Constants.START_URL.length());  parseName();  String recoverTest=removeProperty("RECOVER_TEST",null);  if (recoverTest != null) {    FilePathRec.register();    try {      Utils.callStaticMethod("org.h2.store.RecoverTester.init",recoverTest);    } catch (    Exception e) {      throw DbException.convert(e);    }    name="rec:" + name;  }}  }
class C{  @Override public ImmutableCollection<V> values(){  return valueList;}  }
class C{  static double asinh(double x){  return Math.log(x + Math.sqrt(x * x + 1.0));}  }
class C{  public AnimSVGPathSegList(){  itemList=new ArrayList(1);}  }
class C{  public void testSimpleRegistered() throws Exception {  checkSimple(true);}  }
class C{  public boolean storePreference(String optionName,String optionValue,IEclipsePreferences eclipsePreferences,Map otherOptions){  int optionLevel=this.getOptionLevel(optionName);  if (optionLevel == UNKNOWN_OPTION)   return false;switch (optionLevel) {case org.eclipse.jdt.internal.core.JavaModelManager.VALID_OPTION:    if (optionValue == null) {      eclipsePreferences.remove(optionName);    } else {      eclipsePreferences.put(optionName,optionValue);    }  break;case org.eclipse.jdt.internal.core.JavaModelManager.DEPRECATED_OPTION:eclipsePreferences.remove(optionName);String[] compatibleOptions=(String[])this.deprecatedOptions.get(optionName);for (int co=0, length=compatibleOptions.length; co < length; co++) {if (otherOptions != null && otherOptions.containsKey(compatibleOptions[co])) continue;if (optionValue == null) {eclipsePreferences.remove(compatibleOptions[co]);} else {eclipsePreferences.put(compatibleOptions[co],optionValue);}}break;default :return false;}return true;}  }
class C{  public static boolean assertEquals(final String msg,final long a,final long b){  if (a == b) {    return true;  }  throw new ExamException(msg + ":" + a+ " != "+ b);}  }
class C{  private void addTermWeights(Map<String,Flt> termWeightMap,Terms vector) throws IOException {  final TermsEnum termsEnum=vector.iterator(null);  final CharsRef spare=new CharsRef();  BytesRef text;  while ((text=termsEnum.next()) != null) {    UnicodeUtil.UTF8toUTF16(text,spare);    final String term=spare.toString();    if (isNoiseWord(term)) {      continue;    }    final int freq=(int)termsEnum.totalTermFreq();    Flt cnt=termWeightMap.get(term);    if (cnt == null) {      termWeightMap.put(term,new Flt(freq));    } else {      cnt.x+=freq;    }  }}  }
class C{  public static void show(int t){  defer=false;  draw();  try {    Thread.sleep(t);  } catch (  InterruptedException e) {    System.out.println("Error sleeping");  }  defer=true;}  }
class C{  public static MethodProxy find(Class type,Signature sig){  try {    Method m=type.getDeclaredMethod(MethodInterceptorGenerator.FIND_PROXY_NAME,MethodInterceptorGenerator.FIND_PROXY_TYPES);    return (MethodProxy)m.invoke(null,new Object[]{sig});  } catch (  NoSuchMethodException e) {    throw new IllegalArgumentException("Class " + type + " does not use a MethodInterceptor");  }catch (  IllegalAccessException e) {    throw new CodeGenerationException(e);  }catch (  InvocationTargetException e) {    throw new CodeGenerationException(e);  }}  }
class C{  public static void verifyGetterMethods(Class<?> clazz,MappedField... fields){  for (  MappedField field : fields) {    String fieldName=field.getName();    Class<?> fieldType=field.getType();    String customGet=field.getMethod();    if (!isNull(customGet) && !customGet.equals(Constants.DEFAULT_ACCESSOR_VALUE))     try {      clazz.getMethod(customGet);      continue;    } catch (    Exception e) {      Error.customMethod("get",customGet,clazz);    }    String methodName=getMethod(fieldType,fieldName);    try {      clazz.getMethod(methodName);    } catch (    Exception e) {      if (!isBoolean(fieldType))       Error.method(methodName,fieldName,clazz);      try {        methodName=(mGet(fieldName));        clazz.getMethod(methodName);      } catch (      Exception e1) {        Error.method(methodName,fieldName,clazz);      }    }    field.getMethod(methodName);  }}  }
class C{  public static double nextBurr1(double r,int nr,MersenneTwisterFast randomGenerator){  double y;  y=Math.exp(Math.log(randomGenerator.nextDouble()) / r);switch (nr) {case 2:    return (-Math.log(1 / y - 1));case 7:  return (Math.log(2 * y / (2 - 2 * y)) / 2);case 8:return (Math.log(Math.tan(y * Math.PI / 2.0)));case 10:return (Math.sqrt(-Math.log(1 - y)));}return 0;}  }
class C{  public String toString(){  return getClass().getName() + "[hgap=" + hgap+ ",vgap="+ vgap+ "]";}  }
class C{  public void testBug17251955() throws Exception {  Connection c1=null;  Statement st1=null;  Connection c2=null;  Properties props=new Properties();  Properties props1=new NonRegisteringDriver().parseURL(dbUrl,null);  String host=props1.getProperty(NonRegisteringDriver.HOST_PROPERTY_KEY,"localhost");  String url="jdbc:mysql://" + host;  if (!NonRegisteringDriver.isHostPropertiesList(host)) {    String port=props1.getProperty(NonRegisteringDriver.PORT_PROPERTY_KEY,"3306");    url=url + ":" + port;  }  try {    props.setProperty("characterEncoding","UTF-8");    c1=getConnectionWithProps(props);    st1=c1.createStatement();    createDatabase(st1,"`\u30C6\u30B9\u30C8\u30C6\u30B9\u30C8`");    createUser(st1,"'\u30C6\u30B9\u30C8\u30C6\u30B9\u30C8'@'%'","identified by 'msandbox'");    st1.execute("grant all on `\u30C6\u30B9\u30C8\u30C6\u30B9\u30C8`.* to '\u30C6\u30B9\u30C8\u30C6\u30B9\u30C8'@'%'");    props=getHostFreePropertiesFromTestsuiteUrl();    props.setProperty("user","\u30C6\u30B9\u30C8\u30C6\u30B9\u30C8\u30C6\u30B9\u30C8");    props.setProperty("password","msandbox");    props.remove(NonRegisteringDriver.DBNAME_PROPERTY_KEY);    c2=DriverManager.getConnection(url + "/\u30C6\u30B9\u30C8\u30C6\u30B9\u30C8\u30C6\u30B9\u30C8",props);    this.rs=c2.createStatement().executeQuery("select 1");    c2.close();  } catch (  SQLException e) {    assertFalse("e.getCause() instanceof java.lang.ArrayIndexOutOfBoundsException",e.getCause() instanceof java.lang.ArrayIndexOutOfBoundsException);    props.setProperty("user","\u30C6\u30B9\u30C8\u30C6\u30B9\u30C8");    c2=DriverManager.getConnection(url + "/\u30C6\u30B9\u30C8\u30C6\u30B9\u30C8",props);    this.rs=c2.createStatement().executeQuery("select 1");    c2.close();  } finally {    if (c2 != null) {      c2.close();    }    if (st1 != null) {      dropUser(st1,"'\u30C6\u30B9\u30C8\u30C6\u30B9\u30C8'@'%'");      dropDatabase(st1,"`\u30C6\u30B9\u30C8\u30C6\u30B9\u30C8`");      st1.close();    }    if (c1 != null) {      c1.close();    }  }}  }
class C{  public Set<String> keySet(){  return this.map.keySet();}  }
class C{  public boolean isAnyAxisInverted(){  if (mAxisLeft.isInverted())   return true;  if (mAxisRight.isInverted())   return true;  return false;}  }
class C{  public <T extends Event>void register(Class<T> event,Consumer<T> handler){  register(event,handler,EventPriority.NORMAL);}  }
class C{  private String readResponse(InputStreamReader in){  StringBuffer sb=new StringBuffer();  int Record_ID=0;  String ResponseText=null;  String RequestDocumentNo=null;  try {    int c;    while ((c=in.read()) != -1)     sb.append((char)c);    in.close();    log.fine(sb.toString());    String clear=URLDecoder.decode(sb.toString(),"UTF-8");    log.fine(clear);    StringTokenizer st=new StringTokenizer(clear,DELIMITER);    while (st.hasMoreElements()) {      String pair=st.nextToken();      try {        int index=pair.indexOf('=');        if (pair.startsWith("RECORDID=")) {          String info=pair.substring(index + 1);          Record_ID=Integer.parseInt(info);        } else         if (pair.startsWith("RESPONSE="))         ResponseText=pair.substring(index + 1); else         if (pair.startsWith("DOCUMENTNO="))         RequestDocumentNo=pair.substring(index + 1);      } catch (      Exception e) {        log.warning(pair + " - " + e.getMessage());      }    }  } catch (  Exception ex) {    log.log(Level.FINE,"",ex);    return "Reading-" + ex.getLocalizedMessage();  }  if (Record_ID != 0)   setRecord_ID(Record_ID);  if (ResponseText != null)   setResponseText(ResponseText);  if (RequestDocumentNo != null)   setRequestDocumentNo(RequestDocumentNo);  return null;}  }
class C{  public static RE mkPlus(RE x){  if (x.equals(epsilon) || x.equals(empty)) {    return epsilon;  }  RE res=new RE(ReOp.PLUS);  res.unaryArg=x;  return res;}  }
class C{  @Override protected MkAppTreeNode<O> createNewDirectoryNode(){  return new MkAppTreeNode<>(dirCapacity,false);}  }
class C{  public SieveRepositoryException(String message){  super(message);}  }
class C{  protected void changeCalled(){  int wn=clientgui.mechD.wPan.getSelectedWeaponNum();  if (ce() == null) {    return;  }  Mounted m=ce().getEquipment(wn);  if ((m == null)) {    return;  }  m.getCalledShot().switchCalledShot();  clientgui.getClient().sendCalledShotChange(cen,wn);  updateTarget();  clientgui.mechD.wPan.displayMech(ce());  clientgui.mechD.wPan.selectWeapon(wn);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:27.949 -0500",hash_original_method="ECBF15CE25304962FC64383EBA52129F",hash_generated_method="E2C8F6C46C537B5339E1E5CD392CDBEB") public ViewPropertyAnimator alphaBy(float value){  animatePropertyBy(ALPHA,value);  return this;}  }
class C{  public void shutdown() throws SQLException {  this.conn.shutdownServer();}  }
class C{  public String toString(){  return "\"" + getValue() + "\"";}  }
class C{  public ImplPermissionsBuilder(){}  }
class C{  public ObjectFactory(){}  }
class C{  public CreateRfQAction(JTree tree,JFrame window){  super(COMMAND,window);  setActionCommand(COMMAND);  this.tree=tree;  this.reasoner=new StorageReasoner();}  }
class C{  @Provides @Config("rdapLinkBase") public static String provideRdapLinkBase(){  return "https://nic.google/rdap/";}  }
class C{  private void sloRequest(final HttpServletRequest request,final HttpServletResponse httpResponse){  logger.info("Logout request received: ");  LogoutProcessor processor=this.getLogoutProcessor();  ValidationState validator=new SloRequestValidationState(request,this);  this.validationState=validator;  try {    validator.validate();    Message message=this.createMessage(validator,false);    this.getMessageStore().add(message);    processor.logoutRequest(message,request,httpResponse,this.getTenant());  } catch (  Exception error) {    logger.error("Logout request validation failed.",error);    if (validator.getValidationResult().isValid()) {      validator.setValidationResult(new ValidationResult(HttpServletResponse.SC_BAD_REQUEST,Error.BAD_REQUEST,error.getMessage()));    }    Message errorMessage=this.createMessage(validator,true);    processor.logoutError(errorMessage,request,httpResponse);    return;  }  try {    String redirectUrl=this.createResponseUrl(validator.getMessageID(),validator.getIssuerVal(),(SubjectData)validator.getMessageData(),validator.getRelayState());    logger.info("SP SAML Response URL is " + redirectUrl);    if (validator.getValidationResult().isValid()) {      if (redirectUrl != null) {        httpResponse.sendRedirect(redirectUrl);      } else {        logger.warn(String.format("SLO end point does not exist for IDP: %s, SLO response is not sent.",validator.getIssuerVal()));      }    }  } catch (  Exception error) {    processor.internalError(error,request,httpResponse);  }}  }
class C{  protected FinalizableWeakReference(T referent,FinalizableReferenceQueue queue){  super(referent,queue.queue);  queue.cleanUp();}  }
class C{  private static DirectedAcyclicGraph<Action,DefaultEdge> buildSubgraph(DirectedAcyclicGraph<Action,DefaultEdge> parentGraph,Set<Action> vertices) throws DirectedAcyclicGraph.CycleFoundException {  DirectedAcyclicGraph<Action,DefaultEdge> subgraph=new DirectedAcyclicGraph<>(DefaultEdge.class);  for (  Action vertex : vertices) {    subgraph.addVertex(vertex);  }  for (  Action vertex : vertices) {    for (    DefaultEdge edge : parentGraph.edgesOf(vertex)) {      subgraph.addDagEdge(parentGraph.getEdgeSource(edge),parentGraph.getEdgeTarget(edge),edge);    }  }  return subgraph;}  }
class C{  void deregisterAnimatedInternal(Animation cmp){  if (internalAnimatableComponents != null) {    internalAnimatableComponents.remove(cmp);  }}  }
class C{  public synchronized void remove(AddressbookEntry entry){  remove(entry.getName());}  }
class C{  public thead removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public void printCFDViolatingTuplesMap(){  int count=0;  System.out.println("\n" + Utils.padLeft("Num",5) + "   "+ Utils.padLeft("Index",5)+ "   "+ " CFD");  for (  int index : violatedTuplesMap.keySet()) {    StringBuilder row=new StringBuilder();    row.append(Utils.padLeft("" + (count++),5) + "   ");    row.append(Utils.padLeft("" + (index),5) + " : ");    for (    String CFD : violatedTuplesMap.get(index)) {      row.append(CFD + " | ");    }    row.delete(row.length() - 3,row.length());    System.out.println(row);  }}  }
class C{  public void recompose(StylesheetRoot root){  root.recomposeNamespaceAliases(this);}  }
class C{  Env<AttrContext> topLevelEnv(JCCompilationUnit tree){  Env<AttrContext> localEnv=new Env<AttrContext>(tree,new AttrContext());  localEnv.toplevel=tree;  localEnv.enclClass=predefClassDef;  tree.namedImportScope=new ImportScope(tree.packge);  tree.starImportScope=new StarImportScope(tree.packge);  localEnv.info.scope=tree.namedImportScope;  localEnv.info.lint=lint;  return localEnv;}  }
class C{  public boolean processIt(String processAction){  m_processMsg=null;  DocumentEngine engine=new DocumentEngine(this,getDocStatus());  return engine.processIt(processAction,getDocAction());}  }
class C{  public boolean hasTitle(){  return fieldSetFlags()[13];}  }
class C{  public SyncbaseTimingSpecifier(TimedElement owner,boolean isBegin,float offset,String syncbaseID,boolean syncBegin){  super(owner,isBegin,offset);  this.syncbaseID=syncbaseID;  this.syncBegin=syncBegin;  this.syncbaseElement=owner.getTimedElementById(syncbaseID);  syncbaseElement.addDependent(this,syncBegin);}  }
class C{  public static Map<String,String> convertOAuthResponse(String responseOauthRequest){  Map<String,String> responseElements=new HashMap<>();  String[] elements=responseOauthRequest.split("&");  for (  String element : elements) {    String[] keyValue=element.split("=");    responseElements.put(keyValue[0],keyValue[1]);  }  return responseElements;}  }
class C{  private ArrayList<LinkedDimGroup>[] divideIntoLinkedGroups(boolean isRows){  boolean fromEnd=!(isRows ? lc.isTopToBottom() : LayoutUtil.isLeftToRight(lc,container));  TreeSet<Integer> primIndexes=isRows ? rowIndexes : colIndexes;  TreeSet<Integer> secIndexes=isRows ? colIndexes : rowIndexes;  DimConstraint[] primDCs=(isRows ? rowConstr : colConstr).getConstaints();  ArrayList<LinkedDimGroup>[] groupLists=new ArrayList[primIndexes.size()];  int gIx=0;  for (  int i : primIndexes) {    DimConstraint dc;    if (i >= -MAX_GRID && i <= MAX_GRID) {      dc=primDCs[i >= primDCs.length ? primDCs.length - 1 : i];    } else {      dc=DOCK_DIM_CONSTRAINT;    }    ArrayList<LinkedDimGroup> groupList=new ArrayList<LinkedDimGroup>(2);    groupLists[gIx++]=groupList;    for (    Integer ix : secIndexes) {      Cell cell=isRows ? getCell(i,ix) : getCell(ix,i);      if (cell == null || cell.compWraps.size() == 0)       continue;      int span=(isRows ? cell.spany : cell.spanx);      if (span > 1)       span=convertSpanToSparseGrid(i,span,primIndexes);      boolean isPar=(cell.flowx == isRows);      if ((isPar == false && cell.compWraps.size() > 1) || span > 1) {        int linkType=isPar ? LinkedDimGroup.TYPE_PARALLEL : LinkedDimGroup.TYPE_SERIAL;        LinkedDimGroup lg=new LinkedDimGroup("p," + ix,span,linkType,!isRows,fromEnd);        lg.setCompWraps(cell.compWraps);        groupList.add(lg);      } else {        for (int cwIx=0; cwIx < cell.compWraps.size(); cwIx++) {          CompWrap cw=cell.compWraps.get(cwIx);          boolean rowBaselineAlign=(isRows && lc.isTopToBottom() && dc.getAlignOrDefault(!isRows) == UnitValue.BASELINE_IDENTITY);          boolean isBaseline=isRows && cw.isBaselineAlign(rowBaselineAlign);          String linkCtx=isBaseline ? "baseline" : null;          boolean foundList=false;          for (int glIx=0, lastGl=groupList.size() - 1; glIx <= lastGl; glIx++) {            LinkedDimGroup group=groupList.get(glIx);            if (group.linkCtx == linkCtx || linkCtx != null && linkCtx.equals(group.linkCtx)) {              group.addCompWrap(cw);              foundList=true;              break;            }          }          if (foundList == false) {            int linkType=isBaseline ? LinkedDimGroup.TYPE_BASELINE : LinkedDimGroup.TYPE_PARALLEL;            LinkedDimGroup lg=new LinkedDimGroup(linkCtx,1,linkType,!isRows,fromEnd);            lg.addCompWrap(cw);            groupList.add(lg);          }        }      }    }  }  return groupLists;}  }
class C{  public String serialize(Object object,String clientVariableName) throws ConverterException {  StringBuilder sb=new StringBuilder();  _serialize(clientVariableName,object,sb,new HashSet<Object>());  String str=sb.toString().trim();  return clientVariableName + "=" + str+ (StringUtil.endsWith(str,';') ? "" : ";");}  }
class C{  public void update(int from,int to,int value){  update(1,from,to,value);}  }
class C{  public boolean removeNode(@Nullable N node){  if (node == null)   return false;  rw.writeLock().lock();  try {    if (!nodes.remove(node))     return false;    for (Iterator<SortedSet<N>> it=circle.values().iterator(); it.hasNext(); ) {      SortedSet<N> set=it.next();      if (!set.remove(node))       continue;      if (set.isEmpty())       it.remove();    }    return true;  }  finally {    rw.writeLock().unlock();  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static DomainObject<?> verifyVersionAndKey(DomainObject<?> toBeUpdated,BaseVO template) throws ConcurrentModificationException {  if (toBeUpdated.getVersion() > template.getVersion()) {    ConcurrentModificationException cme=new ConcurrentModificationException(template);    logger.logWarn(Log4jLogger.SYSTEM_LOG,cme,LogMessageIdentifier.WARN_CONCURRENT_MODIFICATION,template.getClass().getSimpleName());    throw cme;  }  if (toBeUpdated.getKey() != template.getKey()) {    if (template.getKey() == 0) {      ConcurrentModificationException cme=new ConcurrentModificationException(template);      logger.logWarn(Log4jLogger.SYSTEM_LOG,cme,LogMessageIdentifier.WARN_OBJECT_CREATED_CONCURRENTLY,template.getClass().getSimpleName());      throw cme;    } else {      SaaSSystemException sse=new SaaSSystemException(String.format("Different object keys for type %s",DomainObject.getDomainClass(toBeUpdated).getSimpleName()));      logger.logError(Log4jLogger.SYSTEM_LOG,sse,LogMessageIdentifier.ERROR_DIFFERENT_KEY_TYPE,toBeUpdated.getClass().getSimpleName());      throw sse;    }  }  return toBeUpdated;}  }
class C{  public static boolean canExecuteSync(@NonNull File file){  assertIoOperationOnNonThread();  return file.canExecute();}  }
class C{  public HistoryEventImpl(){}  }
class C{  public final void reorderVariation(int varNo,int newPos){  if (currentNode.verifyChildren(currentPos))   updateListener();  int nChild=currentNode.children.size();  if ((varNo < 0) || (varNo >= nChild) || (newPos < 0)|| (newPos >= nChild))   return;  Node var=currentNode.children.get(varNo);  currentNode.children.remove(varNo);  currentNode.children.add(newPos,var);  int newDef=currentNode.defaultChild;  if (varNo == newDef) {    newDef=newPos;  } else {    if (varNo < newDef)     newDef--;    if (newPos <= newDef)     newDef++;  }  currentNode.defaultChild=newDef;  updateListener();}  }
class C{  public void parse(String[] lines){  this.lines=lines;  this.currLineIndex=-1;  if (mapper.setColumnOrder(parseLine(getNextLine()))) {    while (currLineIndex < lines.length - 1) {      String[] fields=parseLine(getNextLine());      if (fields.length >= mapper.getMappedFieldCount()) {        for (        CSVListener l : dispatcher) {          l.csvNewItemParsed(fields,mapper);        }      } else       if (fields.length > 1) {        for (        CSVListener l : dispatcher) {          l.csvNewItemFailure(fields,mapper);        }      }    }    for (    CSVListener l : dispatcher) {      l.csvParseSuccess(this);    }  } else {    for (    CSVListener l : dispatcher) {      l.csvParseFailure(this);    }  }}  }
class C{  public RawProperty addExtendedProperty(String name,String value,VCardDataType dataType){  RawProperty raw=new RawProperty(name,value,dataType);  addProperty(raw);  return raw;}  }
class C{  public static MWarehousePrice[] find(Properties ctx,int M_PriceList_Version_ID,int M_Warehouse_ID,String Value,String Name,String UPC,String SKU,String trxName){  StringBuffer sql=new StringBuffer("SELECT * FROM RV_WarehousePrice " + "WHERE M_PriceList_Version_ID=? AND M_Warehouse_ID=?");  StringBuffer sb=new StringBuffer();  Value=getFindParameter(Value);  if (Value != null)   sb.append("UPPER(Value) LIKE ?");  Name=getFindParameter(Name);  if (Name != null) {    if (sb.length() > 0)     sb.append(" OR ");    sb.append("UPPER(Name) LIKE ?");  }  if (UPC != null && UPC.length() > 0) {    if (sb.length() > 0)     sb.append(" OR ");    sb.append("UPC=?");  }  if (SKU != null && SKU.length() > 0) {    if (sb.length() > 0)     sb.append(" OR ");    sb.append("SKU=?");  }  if (sb.length() > 0)   sql.append(" AND (").append(sb).append(")");  sql.append(" ORDER BY Value");  String finalSQL=MRole.getDefault().addAccessSQL(sql.toString(),"RV_WarehousePrice",MRole.SQL_NOTQUALIFIED,MRole.SQL_RO);  s_log.fine("find - M_PriceList_Version_ID=" + M_PriceList_Version_ID + ", M_Warehouse_ID="+ M_Warehouse_ID+ " - "+ finalSQL);  ArrayList<MWarehousePrice> list=new ArrayList<MWarehousePrice>();  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(finalSQL,trxName);    int index=1;    pstmt.setInt(index++,M_PriceList_Version_ID);    pstmt.setInt(index++,M_Warehouse_ID);    if (Value != null)     pstmt.setString(index++,Value);    if (Name != null)     pstmt.setString(index++,Name);    if (UPC != null && UPC.length() > 0)     pstmt.setString(index++,UPC);    if (SKU != null && SKU.length() > 0)     pstmt.setString(index++,SKU);    ResultSet rs=pstmt.executeQuery();    while (rs.next())     list.add(new MWarehousePrice(ctx,rs,trxName));    rs.close();    pstmt.close();    pstmt=null;  } catch (  Exception e) {    s_log.log(Level.SEVERE,finalSQL,e);  }  try {    if (pstmt != null)     pstmt.close();    pstmt=null;  } catch (  Exception e) {    pstmt=null;  }  s_log.fine("find - #" + list.size());  MWarehousePrice[] retValue=new MWarehousePrice[list.size()];  list.toArray(retValue);  return retValue;}  }
class C{  private void calculatePath(){  mAboveWavePath.reset();  mBlowWavePath.reset();  getWaveOffset();  float y;  mAboveWavePath.moveTo(left,bottom);  for (float x=0; x <= mMaxRight; x+=X_SPACE) {    y=(float)(mWaveHeight * Math.sin(omega * x + mAboveOffset) + mWaveHeight);    mAboveWavePath.lineTo(x,y);  }  mAboveWavePath.lineTo(right,bottom);  mBlowWavePath.moveTo(left,bottom);  for (float x=0; x <= mMaxRight; x+=X_SPACE) {    y=(float)(mWaveHeight * Math.sin(omega * x + mBlowOffset) + mWaveHeight);    mBlowWavePath.lineTo(x,y);  }  mBlowWavePath.lineTo(right,bottom);}  }
class C{  public void addSavepoint(final String name){  if (savepoints == null) {    savepoints=database.newStringMap();  }  Savepoint sp=new Savepoint();  sp.savepointName=name;  transaction.addSavepoint(name);  savepoints.put(name,sp);}  }
class C{  public StartupMessage(){}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementremoveattributenomodificationallowederrEE.class,args);}  }
class C{  public void print(int x){  printHeader();  for (int i=0; i < size(); i++)   ((PrintStream)m_Streams.get(i)).print(x);  flush();}  }
class C{  public boolean hasFlag(int flag){  if ((engineFlags & flag) != 0) {    return true;  }  return false;}  }
class C{  protected void incrementDepthLimit(){  currDepthLimit++;}  }
class C{  public WebLogicWlstRuntimeConfigurationCapability(){  this.propertySupportMap.put(ServletPropertySet.PORT,Boolean.TRUE);  this.propertySupportMap.put(WebLogicPropertySet.LOCAL_WEBLOGIC_HOME,Boolean.TRUE);}  }
class C{  public static List<String> pruneAndDeterministicallySort(Collection<String> raw){  final boolean prune_dv=!defaultCodecSupportsMissingDocValues();  ArrayList<String> names=new ArrayList<>(37);  for (  String f : raw) {    if (f.equals("_version_")) {      continue;    }    if (prune_dv && (f.endsWith("_dv_last") || f.endsWith("_dv_first")) || f.endsWith("_dv")) {      continue;    }    names.add(f);  }  Collections.sort(names);  Collections.shuffle(names,random());  return Collections.<String>unmodifiableList(names);}  }
class C{  @Override public void RET(){}  }
class C{  @Override public void updateNull(String columnLabel) throws SQLException {  try {    debugCodeCall("updateNull",columnLabel);    update(columnLabel,ValueNull.INSTANCE);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private String zeroEndByteArrayToString(byte[] bytes) throws IOException {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  DataOutputStream dos=new DataOutputStream(baos);  for (int i=0; i < bytes.length && bytes[i] != 0; i++) {    dos.writeByte(bytes[i]);  }  return baos.toString();}  }
class C{  private void deleteServiceInstance(ServiceInstance serviceInstance,String locale) throws ServiceInstanceException {  ServiceInstance changedSI=null;  try {    changedSI=dao.markAsDeleted(serviceInstance);    besDao.terminateSubscription(changedSI,locale);  } catch (  ServiceInstanceNotFoundException e) {    logger.warn("The service instance '{}' doesn't exist any more.",serviceInstance.getInstanceId());  }catch (  BESNotificationException e) {    if (!(e.getCause() instanceof ObjectNotFoundException)) {      try {        dao.restoreInstance(changedSI);      } catch (      ServiceInstanceNotFoundException e1) {        throw new ServiceInstanceException(Messages.get(locale,"error_instance_not_exist",serviceInstance.getInstanceId()));      }      throw new ServiceInstanceException(getMessage(e));    }  }  try {    dao.deleteInstance(changedSI);  } catch (  ServiceInstanceNotFoundException e1) {    logger.warn("The service instance '{}' doesn't exist any more.",serviceInstance.getInstanceId());  }}  }
class C{  public void fling(long time,float x,float y,float velocityX,float velocityY){  getActiveStripLayoutHelper().fling(time,x,y,velocityX,velocityY);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {switch (Seeker.getInstance().guessImportedMediaMaskFast(getString(stack))) {case DBObject.MEDIA_MASK_DVD:    return "D";case DBObject.MEDIA_MASK_PICTURE:  return "P";case DBObject.MEDIA_MASK_MUSIC:return "M";case DBObject.MEDIA_MASK_BLURAY:return "B";default :return "V";}}  }
class C{  public static String format(double d,int decimals){  double factor=Math.pow(10,decimals);  double digits=Math.round(factor * d);  return ((int)Math.floor(digits / factor)) + "." + ((int)(digits % factor));}  }
class C{  public void reset(){  count=0;  for (int i=0; i != FR.length; i++) {    if (inlineIv) {      FR[i]=0;    } else {      FR[i]=IV[i];    }  }  cipher.reset();}  }
class C{  public boolean implicitlyCloseParentTagOnNewTag(String parentNodeName,String nodeName){  if (parentNodeName == null) {    return false;  }  parentNodeName=parentNodeName.toLowerCase();  nodeName=nodeName.toLowerCase();  for (int i=0; i < IMPLIED_ON_START.length; i+=2) {    if (StringUtil.equalsOne(parentNodeName,IMPLIED_ON_START[i]) != -1) {      if (StringUtil.equalsOne(nodeName,IMPLIED_ON_START[i + 1]) != -1) {        return true;      }    }  }  return false;}  }
class C{  public void endMakePrimary(long startTime,boolean timedOut,boolean failed){  long duration=getStatTime() - startTime;  endClientOp(duration,timedOut,failed);  this.stats.incInt(makePrimaryInProgressId,-1);  int endMakePrimaryId;  if (timedOut) {    endMakePrimaryId=makePrimaryTimedOutId;  } else   if (failed) {    endMakePrimaryId=makePrimaryFailedId;  } else {    endMakePrimaryId=makePrimaryId;  }  this.stats.incInt(endMakePrimaryId,1);  this.stats.incLong(makePrimaryDurationId,duration);}  }
class C{  public JSONObject put(String key,Map<String,Object> value) throws JSONException {  this.put(key,new JSONObject(value));  return this;}  }
class C{  private boolean issueCommand(String cmd) throws IOException {  if (!isConnected()) {    throw new IllegalStateException("Not connected");  }  if (replyPending) {    try {      completePending();    } catch (    sun.net.ftp.FtpProtocolException e) {    }  }  sendServer(cmd + "\r\n");  return readReply();}  }
class C{  private static BinlogEventV4 formBinLogTableMapEvent(String dbName,String tableName,long tableId){  BinlogEventV4HeaderImpl tableMapEventHeader=new BinlogEventV4HeaderImpl();  tableMapEventHeader.setTimestamp(System.currentTimeMillis());  tableMapEventHeader.setEventType(MySQLConstants.TABLE_MAP_EVENT);  tableMapEventHeader.setServerId(1);  TableMapEvent tableMapEvent=new TableMapEvent(tableMapEventHeader);  tableMapEvent.setTableId(tableId);  tableMapEvent.setDatabaseNameLength(dbName.length());  tableMapEvent.setDatabaseName(StringColumn.valueOf(dbName.getBytes()));  tableMapEvent.setTableNameLength(tableName.length());  tableMapEvent.setTableName(StringColumn.valueOf(tableName.getBytes()));  return tableMapEvent;}  }
class C{  public static final void exception(Throwable e){  logExpensive(Level.SEVERE,e.getMessage(),e);}  }
class C{  public boolean isRealTime(){  return this.isRealTime;}  }
class C{  protected File createTempDir() throws Exception {  File result=new File(tmpdir + File.separator + getClass().getName());  result.delete();  result.mkdirs();  return result;}  }
class C{  private static void testFile(File dir,String filename) throws IOException {  System.out.println("Listing Errors for " + filename);  Reader r=new BufferedReader(new FileReader(new File(dir,filename)));  StreamTokenizer st=new StreamTokenizer(r);  st.eolIsSignificant(true);  st.commentChar('#');  st.quoteChar('"');  st.wordChars('_','_');  while (st.nextToken() != StreamTokenizer.TT_EOF) {    String name=null;    String imageName=null;    String entryName=null;    if ((st.ttype == StreamTokenizer.TT_WORD) && st.sval.equalsIgnoreCase("include")) {      st.nextToken();      name=st.sval;      testFile(dir,name);    } else     if ((st.ttype == StreamTokenizer.TT_WORD) && st.sval.equalsIgnoreCase("chassis")) {      st.nextToken();      name=st.sval;      st.nextToken();      imageName=st.sval;      entryName="entry: chassis " + name + " ";      testImageName(dir,imageName,entryName);    } else     if ((st.ttype == StreamTokenizer.TT_WORD) && st.sval.equalsIgnoreCase("exact")) {      st.nextToken();      name=st.sval;      st.nextToken();      imageName=st.sval;      entryName="entry: exact " + name + " ";      testImageName(dir,imageName,entryName);    }  }  System.out.println("\n\n");}  }
class C{  public static Ed25519GroupElement p3(final Ed25519FieldElement X,final Ed25519FieldElement Y,final Ed25519FieldElement Z,final Ed25519FieldElement T){  return new Ed25519GroupElement(CoordinateSystem.P3,X,Y,Z,T);}  }
class C{  private static String makeSwingPropertiesFilename(){  String sep=File.separator;  String javaHome=System.getProperty("java.home");  if (javaHome == null) {    javaHome="<java.home undefined>";  }  return javaHome + sep + "lib"+ sep+ "swing.properties";}  }
class C{  public Digraph(In in){  try {    this.V=in.readInt();    if (V < 0)     throw new IllegalArgumentException("Number of vertices in a Digraph must be nonnegative");    indegree=new int[V];    adj=(Bag<Integer>[])new Bag[V];    for (int v=0; v < V; v++) {      adj[v]=new Bag<Integer>();    }    int E=in.readInt();    if (E < 0)     throw new IllegalArgumentException("Number of edges in a Digraph must be nonnegative");    for (int i=0; i < E; i++) {      int v=in.readInt();      int w=in.readInt();      addEdge(v,w);    }  } catch (  NoSuchElementException e) {    throw new InputMismatchException("Invalid input format in Digraph constructor");  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.263 -0500",hash_original_method="D2C6EAA3E751B808447D604FB6D29517",hash_generated_method="27B3A90E6485B3D9A0BC426A1CBFDEFB") public static boolean isJavaIdentifierStart(char c){  return isJavaIdentifierStart((int)c);}  }
class C{  public QueryStringQueryBuilder field(String field){  if (fields == null) {    fields=new ArrayList<>();  }  fields.add(field);  return this;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case StextPackage.EXIT_POINT_SPEC__EXITPOINT:    return EXITPOINT_EDEFAULT == null ? exitpoint != null : !EXITPOINT_EDEFAULT.equals(exitpoint);}return super.eIsSet(featureID);}  }
class C{  public void actionPerformed(ActionEvent e){  String license=LicenseUtils.license();  int index=license.indexOf("SUCH DAMAGES");  JTextArea textArea=new JTextArea(license);  textArea.setFont(new Font("Monospaced",Font.PLAIN,12));  JScrollPane scroll=new JScrollPane(textArea);  scroll.setPreferredSize(new Dimension(600,400));  textArea.setCaretPosition(index);  Box b=Box.createVerticalBox();  b.add(scroll);  JOptionPane.showMessageDialog(JOptionUtils.centeringComp(),b,"Warranty",JOptionPane.PLAIN_MESSAGE);}  }
class C{  public static void randomNumber(int[] num,int n){  for (int j=0; j < n; j++) {    num[j]=(int)(Math.random() * 10);  }}  }
class C{  private boolean isSelectionCommented(ISelection selection){  if (!(selection instanceof ITextSelection))   return false;  ITextSelection textSelection=(ITextSelection)selection;  if (textSelection.getStartLine() < 0 || textSelection.getEndLine() < 0)   return false;  IDocument document=getTextEditor().getDocumentProvider().getDocument(getTextEditor().getEditorInput());  try {    IRegion block=getTextBlockFromSelection(textSelection,document);    ITypedRegion[] regions=TextUtilities.computePartitioning(document,fDocumentPartitioning,block.getOffset(),block.getLength(),false);    int lineCount=0;    int[] lines=new int[regions.length * 2];    for (int i=0, j=0; i < regions.length; i++, j+=2) {      lines[j]=getFirstCompleteLineOfRegion(regions[i],document);      int length=regions[i].getLength();      int offset=regions[i].getOffset() + length;      if (length > 0)       offset--;      lines[j + 1]=(lines[j] == -1 ? -1 : document.getLineOfOffset(offset));      lineCount+=lines[j + 1] - lines[j] + 1;    }    for (int i=0, j=0; i < regions.length; i++, j+=2) {      String[] prefixes=(String[])fPrefixesMap.get(regions[i].getType());      if (prefixes != null && prefixes.length > 0 && lines[j] >= 0 && lines[j + 1] >= 0)       if (!isBlockCommented(lines[j],lines[j + 1],prefixes,document))       return false;    }    return true;  } catch (  BadLocationException x) {  }  return false;}  }
class C{  public DefaultPackagerFactory(){  this(null);}  }
class C{  public void newLine() throws IOException {  write(lineSeparator);}  }
class C{  @Override public void cascadeRegisterNewIfRequired(Object object,UnitOfWorkImpl uow,Map visitedObjects,boolean getAttributeValueFromObject){  Object objectReferenced=null;  if (getAttributeValueFromObject) {    objectReferenced=getAttributeValueFromObject(object);  } else {    objectReferenced=object;  }  if ((objectReferenced == null)) {    return;  }  if (!visitedObjects.containsKey(objectReferenced)) {    visitedObjects.put(objectReferenced,objectReferenced);    ObjectBuilder builder=getReferenceDescriptor(objectReferenced.getClass(),uow).getObjectBuilder();    builder.cascadeRegisterNewForCreate(objectReferenced,uow,visitedObjects);  }}  }
class C{  public void processGameEvents(){  final String METHOD_NAME="processGameEvents()";  getOwner().methodBegin(getClass(),METHOD_NAME);  GAME_LOCK.lock();  try {    LinkedList<GameEvent> eventsToProcessIterator=new LinkedList<>(getEventsToProcess());    int numEvents=eventsToProcessIterator.size();    for (int count=0; count < numEvents; count++) {      getOwner().log(getClass(),METHOD_NAME,"Processing event " + (count + 1) + " out of "+ numEvents);      GameEvent event=eventsToProcessIterator.get(count);      if (event == null) {        continue;      }      getOwner().log(getClass(),METHOD_NAME,"Processing " + event.toString());      getEventsToProcess().remove(event);      if (event instanceof GameEntityChangeEvent) {        if (getGame().getPhase() != IGame.Phase.PHASE_MOVEMENT) {          continue;        }        GameEntityChangeEvent changeEvent=(GameEntityChangeEvent)event;        if (changeEvent.getEntity() == null) {          continue;        }        Entity entity=getGame().getEntity(changeEvent.getEntity().getId());        if (entity == null) {          continue;        }        if (getGame().getPhase() == IGame.Phase.PHASE_FIRING) {          continue;        }        Coords position=entity.getPosition();        if (position == null) {          continue;        }        if (position.equals(getPathEnumerator().getLastKnownCoords(entity.getId()))) {          continue;        }        getOwner().log(getClass(),METHOD_NAME,"Received entity change event for " + changeEvent.getEntity().getDisplayName() + " (ID "+ entity.getId()+ ")");        Integer entityId=changeEvent.getEntity().getId();        dirtifyUnit(entityId);      } else       if (event instanceof GamePhaseChangeEvent) {        GamePhaseChangeEvent phaseChange=(GamePhaseChangeEvent)event;        getOwner().log(getClass(),METHOD_NAME,"Phase change detected: " + phaseChange.getNewPhase().name());        if (phaseChange.getNewPhase() == IGame.Phase.PHASE_MOVEMENT) {          getPathEnumerator().clear();          for (          Entity entity : getGame().getEntitiesVector()) {            if (entity.isActive() && entity.isDeployed() && entity.getPosition() != null) {              getDirtyUnits().add(entity.getId());            }          }        }      }    }    getOwner().log(getClass(),METHOD_NAME,"Events still to process: " + getEventsToProcess().size());  }  finally {    GAME_LOCK.unlock();    getOwner().methodEnd(getClass(),METHOD_NAME);  }}  }
class C{  public Map<String,String> loadCodenvyDefaultProperties(Version version,InstallType installType) throws IOException {  Path tmpDir=Paths.get(System.getProperty("java.io.tmpdir"));  String requestUrl=combinePaths(updateEndpoint,"/repository/public/download/codenvy-" + (installType == InstallType.MULTI_SERVER ? "multi" : "single") + "-server-properties/"+ version);  Path properties;  try {    properties=transport.download(requestUrl,tmpDir,MediaType.APPLICATION_OCTET_STREAM);  } catch (  IOException e) {    throw new IOException("Can't download installation properties. " + e.getMessage(),e);  }  try {    return doLoadCodenvyProperties(properties);  } catch (  IOException e) {    throw new ConfigException(format("Can't load properties: %s",e.getMessage()),e);  }}  }
class C{  public static ASTList concat(ASTList a,ASTList b){  if (a == null)   return b; else {    ASTList list=a;    while (list.right != null)     list=list.right;    list.right=b;    return a;  }}  }
class C{  public boolean isDisableWebPagePreview(){  return this.disable_web_page_preview;}  }
class C{  public static boolean parsePerlVersion(PsiBuilder b,int l){  if (VERSION_TOKENS.contains(b.getTokenType())) {    PsiBuilder.Marker m=b.mark();    b.advanceLexer();    m.collapse(VERSION_ELEMENT);    return true;  }  return false;}  }
class C{  public XYSeries toXYSeries(){  XYSeries xySeries=new XYSeries(mTitle);  int k=0;  for (  double value : mValues) {    xySeries.add(++k,value);  }  return xySeries;}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) private void createAllDmdDetails(final Property oldProperty,final Property newProperty,final Installment installment,final List<Installment> instList,final HashMap<Installment,TaxCalculationInfo> instTaxMap){  LOGGER.debug("Entered into createAllDmdDeatails");  LOGGER.debug("createAllDmdDeatails: oldProperty: " + oldProperty + ", newProperty: "+ newProperty+ ",installment: "+ installment+ ", instList: "+ instList);  final Set<EgDemandDetails> adjustedDmdDetailsSet=new HashSet<EgDemandDetails>();  final Map<String,Ptdemand> oldPtdemandMap=getPtdemandsAsInstMap(oldProperty.getPtDemandSet());  final Map<String,Ptdemand> newPtdemandMap=getPtdemandsAsInstMap(newProperty.getPtDemandSet());  Ptdemand ptDemandOld=new Ptdemand();  Ptdemand ptDemandNew=new Ptdemand();  Set<EgDemandDetails> newEgDemandDetailsSet=null;  Set<EgDemandDetails> oldEgDemandDetailsSet=null;  final List<String> adjstmntReasons=new ArrayList<String>(){    /** 
 */
    private static final long serialVersionUID=860234856101419601L;{      add(DEMANDRSN_CODE_GENERAL_TAX);      add(DEMANDRSN_CODE_VACANT_TAX);      add(DEMANDRSN_CODE_LIBRARY_CESS);      add(DEMANDRSN_CODE_SEWERAGE_TAX);      add(DEMANDRSN_CODE_EDUCATIONAL_CESS);    }  };  final List<String> rsnsForNewResProp=new ArrayList<String>(){    /** 
 */
    private static final long serialVersionUID=-1654413629447625291L;{      add(DEMANDRSN_CODE_GENERAL_TAX);      add(DEMANDRSN_CODE_VACANT_TAX);      add(DEMANDRSN_CODE_LIBRARY_CESS);      add(DEMANDRSN_CODE_SEWERAGE_TAX);      add(DEMANDRSN_CODE_EDUCATIONAL_CESS);    }  };  new ArrayList<String>(){    /** 
 */
    private static final long serialVersionUID=-8513477823231046385L;{      add(DEMANDRSN_CODE_GENERAL_TAX);      add(DEMANDRSN_CODE_VACANT_TAX);      add(DEMANDRSN_CODE_LIBRARY_CESS);      add(DEMANDRSN_CODE_SEWERAGE_TAX);      add(DEMANDRSN_CODE_EDUCATIONAL_CESS);    }  };  ptDemandOld=oldPtdemandMap.get(installment.getDescription());  ptDemandNew=newPtdemandMap.get(installment.getDescription());  LOGGER.info("instList==========" + instList);  final Map<Installment,Set<EgDemandDetails>> oldDemandDtlsMap=getEgDemandDetailsSetAsMap(new ArrayList(ptDemandOld.getEgDemandDetails()),instList);  LOGGER.info("oldDemandDtlsMap : " + oldDemandDtlsMap);  for (  final Installment inst : instList) {    oldEgDemandDetailsSet=new HashSet<EgDemandDetails>();    oldEgDemandDetailsSet=oldDemandDtlsMap.get(inst);    LOGGER.info("inst==========" + inst);    final Set<EgDemandDetails> demandDtls=demandDetails.get(inst);    if (demandDtls != null)     for (    final EgDemandDetails dd : demandDtls) {      final EgDemandDetails ddClone=(EgDemandDetails)dd.clone();      ddClone.setEgDemand(ptDemandNew);      adjustedDmdDetailsSet.add(ddClone);    } else {      EgDemandDetails oldEgdmndDetails=null;      EgDemandDetails newEgDmndDetails=null;      newEgDemandDetailsSet=new HashSet<EgDemandDetails>();      for (      final EgDemandDetails edd : ptDemandNew.getEgDemandDetails())       if (edd.getEgDemandReason().getEgInstallmentMaster().equals(inst))       newEgDemandDetailsSet.add((EgDemandDetails)edd.clone());      LOGGER.info("Old Demand Set:" + inst + "="+ oldEgDemandDetailsSet);      LOGGER.info("New Demand set:" + inst + "="+ newEgDemandDetailsSet);      if (!oldProperty.getIsExemptedFromTax() && !newProperty.getIsExemptedFromTax())       for (int i=0; i < adjstmntReasons.size(); i++) {        final String oldPropRsn=adjstmntReasons.get(i);        String newPropRsn=null;        newEgDmndDetails=getEgDemandDetailsForReason(newEgDemandDetailsSet,oldPropRsn);        if (newEgDmndDetails == null) {          newPropRsn=rsnsForNewResProp.get(i);          oldEgdmndDetails=getEgDemandDetailsForReason(oldEgDemandDetailsSet,oldPropRsn);          newEgDmndDetails=getEgDemandDetailsForReason(newEgDemandDetailsSet,newPropRsn);          if (newEgDmndDetails != null && oldEgdmndDetails != null)           newEgDmndDetails.setAmtCollected(newEgDmndDetails.getAmtCollected().add(oldEgdmndDetails.getAmtCollected())); else           continue;        }      } else       if (!oldProperty.getIsExemptedFromTax())       newEgDemandDetailsSet=adjustmentsForTaxExempted(ptDemandOld.getEgDemandDetails(),newEgDemandDetailsSet,inst);      adjustedDmdDetailsSet.addAll(newEgDemandDetailsSet);      demandDetails.put(inst,newEgDemandDetailsSet);    }  }  if (installment.equals(installment)) {    final Ptdemand ptdOld=oldPtdemandMap.get(installment.getDescription());    final Ptdemand ptdNew=newPtdemandMap.get(installment.getDescription());    ptdNew.setAmtCollected(ptdOld.getAmtCollected());  }  LOGGER.info("Exit from PropertyService.createAllDmdDeatails, Modify Adjustments for " + oldProperty.getBasicProperty().getUpicNo() + " And installment : "+ installment+ "\n\n"+ adjustedDmdDetailsSet);  ptDemandNew.setEgDemandDetails(adjustedDmdDetailsSet);  LOGGER.debug("Exiting from createAllDmdDeatails");}  }
class C{  @Override public Void visitWildcard(AnnotatedWildcardType wildcardAtm,Void aVoid){  if (visitedNodes.containsKey(wildcardAtm) || pause) {    return null;  }  visitedNodes.put(wildcardAtm,null);  final WildcardType wildcard=(WildcardType)wildcardAtm.getUnderlyingType();  Element typeParamElement=TypesUtils.wildcardToTypeParam(wildcard);  if (typeParamElement == null) {    typeParamElement=(parents.empty()) ? null : getTypeParamFromEnclosingClass(wildcardAtm,parents.peek());  }  if (typeParamElement != null) {    pause=true;    AnnotatedTypeVariable typeParam=(AnnotatedTypeVariable)typeFactory.getAnnotatedType(typeParamElement);    pause=false;    final Set<? extends AnnotationMirror> tops=typeFactory.getQualifierHierarchy().getTopAnnotations();    if (wildcard.isUnbound()) {      propagateExtendsBound(wildcardAtm,typeParam,tops);      propagateSuperBound(wildcardAtm,typeParam,tops);    } else     if (wildcard.isExtendsBound()) {      propagateSuperBound(wildcardAtm,typeParam,tops);    } else {      propagateExtendsBound(wildcardAtm,typeParam,tops);    }  }  scan(wildcardAtm.getExtendsBound(),null);  scan(wildcardAtm.getSuperBound(),null);  return null;}  }
class C{  public boolean isValid(Validator validator,ExceptionMessageListener receiver){  return validator.isValid(m_value,m_invalidValue,null,receiver);}  }
class C{  @DELETE @Path("/{id}/export") @CheckPermission(roles={Role.SYSTEM_MONITOR,Role.TENANT_ADMIN},acls={ACL.ANY}) public TaskResourceRep deleteFSExportRules(@PathParam("id") URI id,@QueryParam("allDirs") boolean allDirs,@QueryParam("subDir") String subDir,@QueryParam("unmountExport") boolean unmountExport){  _log.info("Delete Export Rules : request received for {}, with allDirs : {}, subDir : {}",new Object[]{id,allDirs,subDir});  String task=UUID.randomUUID().toString();  ArgValidator.checkFieldUriType(id,FileShare.class,"id");  FileShare fs=queryResource(id);  ArgValidator.checkEntity(fs,id,isIdEmbeddedInURL(id));  StorageSystem device=_dbClient.queryObject(StorageSystem.class,fs.getStorageDevice());  String path=fs.getPath();  _log.info("Export path found {} ",path);  List<FileExportRule> exportFileRulesTemp=queryDBFSExports(fs);  boolean subDirFound=false;  if (subDir != null && !subDir.isEmpty()) {    for (    FileExportRule rule : exportFileRulesTemp) {      if (rule.getExportPath().endsWith("/" + subDir)) {        subDirFound=true;      }    }    if (!subDirFound) {      _log.info("Sub-Directory {} doesnot exists, so deletion of Sub-Directory export rule from DB failed ",subDir);      throw APIException.badRequests.subDirNotFound(subDir);    }  }  Operation op=_dbClient.createTaskOpStatus(FileShare.class,fs.getId(),task,ResourceOperationTypeEnum.UNEXPORT_FILE_SYSTEM);  op.setDescription("Filesystem unexport");  try {    FileServiceApi fileServiceApi=getFileShareServiceImpl(fs,_dbClient);    fileServiceApi.deleteExportRules(device.getId(),fs.getId(),allDirs,subDir,unmountExport,task);    auditOp(OperationTypeEnum.UNEXPORT_FILE_SYSTEM,true,AuditLogManager.AUDITOP_BEGIN,fs.getId().toString(),device.getId().toString(),allDirs,subDir);  } catch (  BadRequestException e) {    op=_dbClient.error(FileShare.class,fs.getId(),task,e);    _log.error("Error Processing Export Updates {}",e.getMessage(),e);  }catch (  Exception e) {    _log.error("Error Processing Export Updates {}",e.getMessage(),e);    throw APIException.badRequests.unableToProcessRequest(e.getMessage());  }  return toTask(fs,task,op);}  }
class C{  FlexibleNode readExternalNode(HashMap<String,Taxon> translationList) throws ImportException, IOException {  FlexibleNode node=new FlexibleNode();  String label=readToken(":(),;");  Taxon taxon;  if (translationList.size() > 0) {    taxon=translationList.get(label);    if (taxon == null) {      throw new UnknownTaxonException("Taxon in tree, '" + label + "' is unknown");    }  } else {    taxon=new Taxon(label);  }  if (getLastMetaComment() != null) {    parseMigrationString(getLastMetaComment(),node);    clearLastMetaComment();  }  node.setTaxon(taxon);  int pop=Integer.parseInt(label.split("\\.")[0]);  node.setAttribute(POP,(pop - 1));  return node;}  }
class C{  public Version(@NonNull String version) throws ParseException {  final String[] numberStrings=version.split("\\.");  final int versionsCount=Math.min(NUMBERS_COUNT,numberStrings.length);  for (int i=0; i < versionsCount; i++) {    final String numberString=numberStrings[i];    final char firstChar=numberString.charAt(0);    if (firstChar == '-' || firstChar == '+') {      throw new VersionParseException(0);    }    try {      numbers[i]=Integer.parseInt(numberString);    } catch (    NumberFormatException e) {      throw new VersionParseException(version.indexOf(numberString));    }  }}  }
class C{  private static byte[] streamToBytes(InputStream in,int length) throws IOException {  byte[] bytes=new byte[length];  int count;  int pos=0;  while (pos < length && ((count=in.read(bytes,pos,length - pos)) != -1)) {    pos+=count;  }  if (pos != length) {    throw new IOException("Expected " + length + " bytes, read "+ pos+ " bytes");  }  return bytes;}  }
class C{  @Override protected String translate(final String name){  return "data/sprites/doors/" + name + ".png";}  }
class C{  public SpanManager insert(int offset,String str){  sb.insert(offset,str);  adjustLists(offset,str.length());  if (calculateSrcPositions)   for (int i=0; i < str.length(); i++)   ib.add(offset,-1);  return this;}  }
class C{  public boolean isChanged(){  return m_change;}  }
class C{  public void onPublish(CI1<GridDhtPartitionsReservation> unpublish){  assert unpublish != null;  if (!this.unpublish.compareAndSet(null,unpublish))   throw new IllegalStateException("Unpublishing closure can be set only once.");  if (reservations.get() == -1)   unregister();}  }
class C{  public ConnectionConfig(jmri.jmrix.NetworkPortAdapter p){  super(p);}  }
class C{  public Hashcypher(){}  }
class C{  public static ReilInstruction createBsh(final Address address,final ReilOperand firstOperand,final ReilOperand secondOperand,final ReilOperand thirdOperand){  return new ReilInstruction(address,ReilMnemonics.BSH,firstOperand,secondOperand,thirdOperand);}  }
class C{  public static TypeReference newSuperTypeReference(int itfIndex){  itfIndex&=0xFFFF;  return new TypeReference((CLASS_EXTENDS << 24) | (itfIndex << 8));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean isValidVnSyllable(){  return validViSyll;}  }
class C{  public static List<HttpCookie> parse(String header){  return new CookieParser(header).parse();}  }
class C{  public void cut(int startIndex,int endIndex){  selectText(startIndex,endIndex);  JTextComponent.this.cut();}  }
class C{  void processStore(Instruction s){  HeapOperand<?>[] A1=ssa.getHeapUses(s);  HeapOperand<?>[] A2=ssa.getHeapDefs(s);  if ((A1.length != 1) || (A2.length != 1)) {    throw new OptimizingCompilerException("IndexPropagation.processStore: store instruction defs or uses multiple heap variables?");  }  int valueNumber=-1;  if (PutField.conforms(s)) {    Object address=PutField.getRef(s);    valueNumber=valueNumbers.getValueNumber(address);  } else {    valueNumber=0;  }  addUpdateObjectDefEquation(A2[0].getHeapVariable(),A1[0].getHeapVariable(),valueNumber);}  }
class C{  protected Integer wrapKey(int k){  return new Integer(k);}  }
class C{  public static void importContent(DialogueSystem system,String file,String tag){  if (tag.equals("parameters")) {    BNetwork parameters=XMLStateReader.extractBayesianNetwork(file,tag);    for (    String oldParam : system.getState().getParameterIds()) {      if (!parameters.hasChanceNode(oldParam)) {        parameters.addNode(system.getState().getChanceNode(oldParam));      }    }    system.getState().setParameters(parameters);  } else {    BNetwork state=XMLStateReader.extractBayesianNetwork(file,tag);    system.addContent(new DialogueState(state));  }}  }
class C{  public void testBug25545() throws Exception {  if (!versionMeetsMinimum(5,0)) {    return;  }  createProcedure("testBug25545","() BEGIN SELECT 1; END");  String trustStorePath="src/testsuite/ssl-test-certs/test-cert-store";  System.setProperty("javax.net.ssl.keyStore",trustStorePath);  System.setProperty("javax.net.ssl.keyStorePassword","password");  System.setProperty("javax.net.ssl.trustStore",trustStorePath);  System.setProperty("javax.net.ssl.trustStorePassword","password");  Connection sslConn=null;  try {    Properties props=new Properties();    props.setProperty("useSSL","true");    props.setProperty("requireSSL","true");    sslConn=getConnectionWithProps(props);    sslConn.prepareCall("{ call testBug25545()}").execute();  }  finally {    if (sslConn != null) {      sslConn.close();    }  }}  }
class C{  public String buildSentence(){  String sentence="There was a problem assembling the sentence!";  sentence=String.format("%s %s %s %s %s.",subjectService.getWord().getString(),verbService.getWord().getString(),articleService.getWord().getString(),adjectiveService.getWord().getString(),nounService.getWord().getString());  return sentence;}  }
class C{  public Builder convertDurationsTo(TimeUnit durationUnit){  this.durationUnit=durationUnit;  return this;}  }
class C{  private int levelOfProofStepLexeme(Token tok){  String im=tok.image;  if (im.substring(1,2).equals("*")) {    return -1;  }  ;  if (im.substring(1,2).equals("+")) {    return -2;  }  ;  return new Integer(im.substring(1,im.indexOf('>'))).intValue();}  }
class C{  @Override public GamaPair<V,V> buildIndex(final IScope scope,final Object object){  return GamaPairType.staticCast(scope,object,type.getKeyType(),type.getContentType(),false);}  }
class C{  @Override protected void closeDialogOk(){  wtaPanel.commitChanges();  WinnerTakeAll wta=(WinnerTakeAll)wtaPanel.getGroup();  layoutPanel.commitChanges();  wta.setLayout(layoutPanel.getCurrentLayout());  wta.applyLayout();  wta.offset(networkPanel.getWhereToAdd().getX(),networkPanel.getWhereToAdd().getY());  networkPanel.getNetwork().addGroup(wta);  networkPanel.repaint();  super.closeDialogOk();}  }
class C{  public boolean isSetter(){  MemberType _memberType=this.getMemberType();  return Objects.equal(_memberType,MemberType.SETTER);}  }
class C{  protected String doIt() throws Exception {  StringBuffer sql=null;  int no=0;  String clientCheck=" AND AD_Client_ID=" + m_AD_Client_ID;  if (m_deleteOldImported) {    sql=new StringBuffer("DELETE I_HR_Movement " + "WHERE I_IsImported='Y'").append(clientCheck);    no=DB.executeUpdate(sql.toString(),get_TrxName());    log.info("Delete Old Imported =" + no);  }  sql=new StringBuffer("UPDATE I_HR_Movement " + "SET AD_Client_ID = COALESCE (AD_Client_ID, ").append(m_AD_Client_ID).append(")," + " AD_Org_ID = COALESCE (AD_Org_ID, 0)," + " IsActive = COALESCE (IsActive, 'Y'),"+ " Created = COALESCE (Created, SysDate),"+ " CreatedBy = COALESCE (CreatedBy, 0),"+ " Updated = COALESCE (Updated, SysDate),"+ " UpdatedBy = COALESCE (UpdatedBy, 0),"+ " I_ErrorMsg = ' ',"+ " I_IsImported = 'N' "+ "WHERE I_IsImported<>'Y' OR I_IsImported IS NULL");  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.info("Reset=" + no);  sql=new StringBuffer("UPDATE I_HR_Movement " + "SET HR_Process_ID=(SELECT HR_Process_ID FROM HR_Process p" + " WHERE I_HR_Movement.ProcessName=p.Name AND p.DocStatus IN ('DR', 'IP') AND I_HR_Movement.AD_Client_ID=p.AD_Client_ID) "+ "WHERE HR_Process_ID IS NULL AND ProcessName IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.info("HR_Process=" + no);  sql=new StringBuffer("UPDATE I_HR_Movement " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid HR Process,' " + "WHERE HR_Process_ID IS NULL AND ProcessName IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid HR Process=" + no);  sql=new StringBuffer("UPDATE I_HR_Movement " + "SET C_BPartner_ID=(SELECT C_BPartner_ID FROM C_BPartner bp" + " WHERE I_HR_Movement.BPartner_Value=bp.Value AND bp.IsEmployee = 'Y' AND I_HR_Movement.AD_Client_ID=bp.AD_Client_ID) "+ "WHERE C_BPartner_ID IS NULL AND BPartner_Value IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.info("BPartner=" + no);  sql=new StringBuffer("UPDATE I_HR_Movement " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid BPartner,' " + "WHERE C_BPartner_ID IS NULL AND BPartner_Value IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid BPartner=" + no);  sql=new StringBuffer("UPDATE I_HR_Movement " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=No Mandatory BPartner Value,' " + "WHERE BPartner_Value IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("No Mandatory BPartner Value=" + no);  sql=new StringBuffer("UPDATE I_HR_Movement " + "SET HR_Concept_ID=(SELECT HR_Concept_ID FROM HR_Concept c" + " WHERE I_HR_Movement.ConceptValue=c.Value AND c.IsManual='Y' AND c.IsActive='Y' AND c.Type!='E' AND I_HR_Movement.AD_Client_ID=c.AD_Client_ID) "+ "WHERE HR_Concept_ID IS NULL AND ConceptValue IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Concept from Value=" + no);  sql=new StringBuffer("UPDATE I_HR_Movement " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Concept, ' " + "WHERE HR_Concept_ID IS NULL AND ConceptValue IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid Concept=" + no);  sql=new StringBuffer("UPDATE I_HR_Movement " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=No Mandatory Process Name,' " + "WHERE ProcessName IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("No Mandatory Process Name=" + no);  sql=new StringBuffer("UPDATE I_HR_Movement " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=No Mandatory Concept Value,' " + "WHERE ConceptValue IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("No Mandatory Concept Value=" + no);  sql=new StringBuffer("UPDATE I_HR_Movement " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=No Mandatory ValidFrom,' " + "WHERE ValidFrom IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("No Mandatory ValidFrom=" + no);  sql=new StringBuffer("UPDATE I_HR_Movement " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=No Mandatory BPartner Value,' " + "WHERE BPartner_Value IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("No Mandatory BPartner Value=" + no);  sql=new StringBuffer("UPDATE I_HR_Movement " + "SET HR_Movement_ID=(SELECT HR_Movement_ID FROM HR_Movement m" + " WHERE m.HR_Process_ID=I_HR_Movement.HR_Process_ID AND"+ " m.C_BPartner_ID=I_HR_Movement.C_BPartner_ID AND"+ " m.HR_Concept_ID=I_HR_Movement.HR_Concept_ID AND"+ " TRUNC(m.ValidFrom)=TRUNC(I_HR_Movement.ValidFrom))"+ "WHERE HR_Movement_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set current existing movements=" + no);  commitEx();  int noInserthrm=0;  int noUpdatehrm=0;  log.fine("start inserting/updating ...");  sql=new StringBuffer("SELECT * FROM I_HR_Movement WHERE I_IsImported='N'").append(clientCheck);  PreparedStatement pstmt_setImported=null;  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt_setImported=DB.prepareStatement("UPDATE I_HR_Movement SET I_IsImported='Y', HR_Movement_ID=?, " + "Updated=SysDate, Processed='Y' WHERE I_HR_Movement_ID=?",get_TrxName());    pstmt=DB.prepareStatement(sql.toString(),get_TrxName());    rs=pstmt.executeQuery();    while (rs.next()) {      X_I_HR_Movement imp=new X_I_HR_Movement(getCtx(),rs,get_TrxName());      int I_HR_Movement_ID=imp.getI_HR_Movement_ID();      int HR_Movement_ID=imp.getHR_Movement_ID();      boolean newPayrollMovement=HR_Movement_ID == 0;      log.fine("I_HR_Movement_ID=" + I_HR_Movement_ID + ", HR_Movement_ID="+ HR_Movement_ID);      MHRMovement payrollMovement=null;      if (newPayrollMovement) {        payrollMovement=new MHRMovement(imp);        if (payrollMovement.save()) {          HR_Movement_ID=payrollMovement.getHR_Movement_ID();          log.finer("Insert HR Movement");          noInserthrm++;        } else {          StringBuffer sql0=new StringBuffer("UPDATE I_HR_Movement i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||").append(DB.TO_STRING("Insert HR Movement failed")).append("WHERE I_HR_Movement_ID=").append(I_HR_Movement_ID);          DB.executeUpdate(sql0.toString(),get_TrxName());          continue;        }      } else {        payrollMovement=new MHRMovement(getCtx(),HR_Movement_ID,get_TrxName());        MHRConcept payrollConcept=new MHRConcept(getCtx(),payrollMovement.getHR_Concept_ID(),get_TrxName());        payrollMovement.setAmount(null);        payrollMovement.setQty(null);        payrollMovement.setServiceDate(null);        payrollMovement.setTextMsg(null);        if (payrollConcept.getColumnType().equals(MHRConcept.COLUMNTYPE_Quantity)) {          payrollMovement.setQty(imp.getQty());        } else         if (payrollConcept.getColumnType().equals(MHRConcept.COLUMNTYPE_Amount)) {          payrollMovement.setAmount(imp.getAmount());        } else         if (payrollConcept.getColumnType().equals(MHRConcept.COLUMNTYPE_Date)) {          payrollMovement.setServiceDate(imp.getServiceDate());        } else         if (payrollConcept.getColumnType().equals(MHRConcept.COLUMNTYPE_Text)) {          payrollMovement.setTextMsg(imp.getTextMsg());        }        if (payrollMovement.save()) {          noUpdatehrm++;        } else {          StringBuffer sql0=new StringBuffer("UPDATE I_HR_Movement i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||").append(DB.TO_STRING("Update HR Movement failed")).append("WHERE I_HR_Movement_ID=").append(I_HR_Movement_ID);          DB.executeUpdate(sql0.toString(),get_TrxName());          continue;        }      }      pstmt_setImported.setInt(1,HR_Movement_ID);      pstmt_setImported.setInt(2,I_HR_Movement_ID);      no=pstmt_setImported.executeUpdate();      commitEx();    }  } catch (  SQLException e) {    throw e;  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;    DB.close(pstmt_setImported);    pstmt_setImported=null;  }  sql=new StringBuffer("UPDATE I_HR_Movement " + "SET I_IsImported='N', Updated=SysDate " + "WHERE I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  addLog(0,null,new BigDecimal(no),"@Errors@");  addLog(0,null,new BigDecimal(noInserthrm),"@HR_Movement_ID@: @Inserted@");  addLog(0,null,new BigDecimal(noUpdatehrm),"@HR_Movement_ID@: @Updated@");  return "";}  }
class C{  protected AbstractAttributeCondition(String value){  this.value=value;}  }
class C{  public boolean hasAttribute(String attribute){  return (containsKey(attribute));}  }
class C{  @Override public boolean supportsSchemasInDataManipulation(){  debugCodeCall("supportsSchemasInDataManipulation");  return true;}  }
class C{  public void testGetType() throws Exception {  assertEquals("did not get correct type","javax.sql.DataSource",resource.getType());}  }
class C{  public final void rotateToVector(Point2D vector){  rotation.rotateToVector(vector);}  }
class C{  protected XMLDocumentScanner createDocumentScanner(){  fNamespaceScanner=new XMLNSDocumentScannerMMImpl();  return fNamespaceScanner;}  }
class C{  private void updateUiAfterResponse(String feature,String state,String featureMetadata,String ruleMetadata,boolean cached){  featureButton.setText(state == Toggle.ENABLED ? Toggle.ENABLED : Toggle.DISABLED);  featureButton.setEnabled(state == Toggle.ENABLED);  featureMetadataTextView.setText("Feature Metadata: " + ruleMetadata);  ruleMetadataTextView.setText("Rule Metadata: " + ruleMetadata);  cachedTextView.setText("Cached: " + cached);}  }
class C{  public int hashCode(){  int h=0;  Iterator i=iterator();  while (i.hasNext()) {    Object obj=i.next();    if (obj != null)     h+=obj.hashCode();  }  return h;}  }
class C{  private void checkNullOrEmptyMappings(@Nullable Map<String,String> map) throws Exception {  BasicUserNameMapper mapper=create(map,false,null);  assertNull(mapper.map(null));  assertEquals("1",mapper.map("1"));  assertEquals("2",mapper.map("2"));  mapper=create(map,true,null);  assertNull(mapper.map(null));  assertNull(mapper.map("1"));  assertNull(mapper.map("2"));  mapper=create(map,false,"A");  assertNull(mapper.map(null));  assertEquals("1",mapper.map("1"));  assertEquals("2",mapper.map("2"));  mapper=create(map,true,"A");  assertEquals("A",mapper.map(null));  assertEquals("A",mapper.map("1"));  assertEquals("A",mapper.map("2"));}  }
class C{  public static int bitCount(long lng){  lng=(lng & 0x5555555555555555L) + ((lng >> 1) & 0x5555555555555555L);  lng=(lng & 0x3333333333333333L) + ((lng >> 2) & 0x3333333333333333L);  int i=(int)((lng >>> 32) + lng);  i=(i & 0x0F0F0F0F) + ((i >> 4) & 0x0F0F0F0F);  i=(i & 0x00FF00FF) + ((i >> 8) & 0x00FF00FF);  i=(i & 0x0000FFFF) + ((i >> 16) & 0x0000FFFF);  return i;}  }
class C{  protected int workclass(){  if (trueClass == -1)   return -1; else   return mapTrueLabelToWorkLabel.get(trueClass);}  }
class C{  public static String toString(int[] arr){  StringBuilder buf=new StringBuilder();  buf.append("\n");  for (  int anArr : arr) {    buf.append(anArr).append("\t");  }  return buf.toString();}  }
class C{  public void testNoMoveParentToItSelf() throws Exception {  final Collection<PyPresenterTestMemberEntry> memberNamesAndStatus=launchAndGetMembers("Foo","Bar");  compareMembers(memberNamesAndStatus,Matchers.containsInAnyOrder(new PyPresenterTestMemberEntry("__init__(self)",true,false,false),new PyPresenterTestMemberEntry("self.foo",true,false,false),new PyPresenterTestMemberEntry("extends Bar",false,false,false)));}  }
class C{  protected int writeObject(STWriter out,InstanceScope scope,Object o,String[] options){  int n=0;  if (o == null) {    if (options != null && options[Option.NULL.ordinal()] != null) {      o=options[Option.NULL.ordinal()];    } else     return 0;  }  if (o instanceof ST) {    scope=new InstanceScope(scope,(ST)o);    if (options != null && options[Option.WRAP.ordinal()] != null) {      try {        out.writeWrap(options[Option.WRAP.ordinal()]);      } catch (      IOException ioe) {        errMgr.IOError(scope.st,ErrorType.WRITE_IO_ERROR,ioe);      }    }    n=exec(out,scope);  } else {    o=convertAnythingIteratableToIterator(scope,o);    try {      if (o instanceof Iterator)       n=writeIterator(out,scope,o,options); else       n=writePOJO(out,scope,o,options);    } catch (    IOException ioe) {      errMgr.IOError(scope.st,ErrorType.WRITE_IO_ERROR,ioe,o);    }  }  return n;}  }
class C{  public static PeriodType seconds(){  PeriodType type=cSeconds;  if (type == null) {    type=new PeriodType("Seconds",new DurationFieldType[]{DurationFieldType.seconds()},new int[]{-1,-1,-1,-1,-1,-1,0,-1});    cSeconds=type;  }  return type;}  }
class C{  private void log(Level level,String message,Exception e){  LogRecord record=new LogRecord(level,message);  record.setLoggerName(logger.getName());  record.setThrown(e);  record.setSourceClassName(logger.getName());  record.setSourceMethodName(getMethodName());  logger.log(record);}  }
class C{  public static long nextLong(){  wasAccessed=true;  return currentNumber++;}  }
class C{  public static InstanceResult parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  InstanceResult object=new InstanceResult();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"instanceResult".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (InstanceResult)org.oscm.xsd.ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","desc").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setDesc(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","rc").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setRc(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));      reader.next();    } else {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","instance").equals(reader.getName())) {      object.setInstance(org.oscm.xsd.InstanceInfo.Factory.parse(reader));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public GraphicList(){}  }
class C{  public HostMultipathInfoLogicalUnitPolicy createMultipathPolicy(String name){  if (StringUtils.equalsIgnoreCase(name,VMW_PSP_FIXED)) {    HostMultipathInfoFixedLogicalUnitPolicy policy=new HostMultipathInfoFixedLogicalUnitPolicy();    policy.setPolicy(name);    policy.setPrefer("");    return policy;  } else {    HostMultipathInfoLogicalUnitPolicy policy=new HostMultipathInfoLogicalUnitPolicy();    policy.setPolicy(name);    return policy;  }}  }
class C{  public byte[] receive(){  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:46.865 -0500",hash_original_method="B94DA4BEBB849BE0C94AD11E29C73BAF",hash_generated_method="E4CAE05F1742E6F4D9EE56AAEC4DAE35") public ReasonParser(String reason){  super(reason);}  }
class C{  public final double meanPriorAbsoluteError(){  if (m_NoPriors) {    return Double.NaN;  }  return m_SumPriorAbsErr / m_WithClass;}  }
class C{  @Override public boolean containsKey(Object key){  return _map.containsKey(unwrapKey(key));}  }
class C{  @JsonSetter("types") public void addTypes(final TypeDefinitions newTypes){  types.putAll(newTypes);}  }
class C{  private boolean acceptSlaveConnection(Channel channel){  List<Config.ConfigMember> shardMembers=gondola.getConfig().getMembersInShard(shard.getShardId());  for (  Config.ConfigMember m : shardMembers) {    if (m.getMemberId() == channel.getRemoteMemberId()) {      logger.info("[{}-{}] Slave request from {} rejected: in the same shard",gondola.getHostId(),memberId,channel.getRemoteMemberId());      return false;    }  }  for (  Peer slave : slaves) {    if (slave.peerId == channel.getRemoteMemberId()) {      logger.info("[{}-{}] Slave request from {} accepted",gondola.getHostId(),memberId,channel.getRemoteMemberId());      try {        slave.setChannel(channel);      } catch (      GondolaException e) {        logger.error("Could not modify the slave's channel",e);        return false;      }      return true;    }  }  if (role != Role.LEADER) {    logger.info("[{}-{}] Slave request from {} rejected: not a leader",gondola.getHostId(),memberId,channel.getRemoteMemberId());    return false;  }  logger.info("[{}-{}] Slave request from {} accepted",gondola.getHostId(),memberId,channel.getRemoteMemberId());  Peer slave=new Peer(gondola,this,channel);  slaves.add(slave);  try {    slave.start();  } catch (  GondolaException e) {    logger.error("Could not start slave",e);    slaves.remove(slave);    slave.stop();    return false;  }  return true;}  }
class C{  public boolean isMute() throws TransientNetworkDisconnectionException, NoConnectionException {  checkConnectivity();  if (mVolumeType == VolumeType.STREAM) {    checkRemoteMediaPlayerAvailable();    return mRemoteMediaPlayer.getMediaStatus().isMute();  } else {    return isDeviceMute();  }}  }
class C{  public void handleAddressBookSelection(int id,String name,String value){}  }
class C{  public int nextInt(){  int result=super.nextInt();  println("nextInt=" + result);  return result;}  }
class C{  String encode(Encoder encoder,String str,int j){  final int n=str.length();  final int remaining=n - j;  if (remaining <= INPUT_BUFFER_SIZE && j <= OUTPUT_BUFFER_SIZE) {    str.getChars(0,j,_output.array(),0);    str.getChars(j,n,_input.array(),0);    _input.limit(remaining).position(0);    _output.clear().position(j);    CoderResult cr=encoder.encodeArrays(_input,_output,true);    if (cr.isUnderflow()) {      return new String(_output.array(),0,_output.position());    }    CharBuffer tmp=CharBuffer.allocate(_output.position() + encoder.maxEncodedLength(_input.remaining()));    tmp.put(_output.array(),0,_output.position());    cr=encoder.encodeArrays(_input,tmp,true);    if (cr.isOverflow()) {      throw new AssertionError("unexpected result from encoder");    }    return new String(tmp.array(),0,tmp.position());  } else {    final int m=j + encoder.maxEncodedLength(remaining);    CharBuffer buffer=CharBuffer.allocate(m);    str.getChars(0,j,buffer.array(),0);    str.getChars(j,n,buffer.array(),m - remaining);    CharBuffer input=buffer.duplicate();    input.limit(m).position(m - remaining);    buffer.position(j);    CoderResult cr=encoder.encodeArrays(input,buffer,true);    if (cr.isOverflow()) {      throw new AssertionError("unexpected result from encoder");    }    return new String(buffer.array(),0,buffer.position());  }}  }
class C{  public WHRActionNotice(){  try {    super.dynInit();    dynInit();    zkInit();  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);  }}  }
class C{  protected static int parseUnsignedInt(ByteArrayInputStream pduDataStream){  assert (null != pduDataStream);  int result=0;  int temp=pduDataStream.read();  if (temp == -1) {    return temp;  }  while ((temp & 0x80) != 0) {    result=result << 7;    result|=temp & 0x7F;    temp=pduDataStream.read();    if (temp == -1) {      return temp;    }  }  result=result << 7;  result|=temp & 0x7F;  return result;}  }
class C{  protected void addRectangleRoundedCorner(float x,float y,float radius,float start,float sweep,int slices,FloatBuffer buffer){  if (slices == 0f)   return;  float step=sweep / (float)slices;  float angle=start + step;  for (int i=1; i < slices; i++, angle+=step) {    buffer.put(x + (float)Math.cos(angle) * radius);    buffer.put(y + (float)Math.sin(angle) * radius);  }}  }
class C{  boolean canAccept(){  long freeFileHandles=getFreeFileDescriptorCount();  log.trace("canAccept({})",freeFileHandles);  return freeFileHandles > 0;}  }
class C{  protected LayerList[] createLayerLists(Element[] elements,AVList params){  ArrayList<LayerList> layerLists=new ArrayList<LayerList>();  for (  Element element : elements) {    try {      String href=WWXML.getText(element,"@href");      if (href != null && href.length() > 0) {        Object o=this.createFromConfigSource(href,params);        if (o == null)         continue;        if (o instanceof Layer) {          LayerList ll=new LayerList();          ll.add((Layer)o);          o=ll;        }        if (o instanceof LayerList) {          LayerList list=(LayerList)o;          if (list != null && list.size() > 0)           layerLists.add(list);        } else         if (o instanceof LayerList[]) {          LayerList[] lists=(LayerList[])o;          if (lists != null && lists.length > 0)           layerLists.addAll(Arrays.asList(lists));        } else {          String msg=Logging.getMessage("LayerFactory.UnexpectedTypeForLayer",o.getClass().getName());          Logging.logger().log(java.util.logging.Level.WARNING,msg);        }        continue;      }      String title=WWXML.getText(element,"@title");      Element[] children=WWXML.getElements(element,"./Layer",null);      if (children != null && children.length > 0) {        LayerList list=this.createLayerList(children,params);        if (list != null && list.size() > 0) {          layerLists.add(list);          if (title != null && title.length() > 0)           list.setValue(AVKey.DISPLAY_NAME,title);        }      }    } catch (    Exception e) {      Logging.logger().log(java.util.logging.Level.WARNING,e.getMessage(),e);    }  }  return layerLists.toArray(new LayerList[layerLists.size()]);}  }
class C{  public synchronized boolean engineIsKeyEntry(String alias){  token.ensureValid();  AliasInfo aliasInfo=aliasMap.get(alias);  if (aliasInfo == null || aliasInfo.type == ATTR_CLASS_CERT) {    return false;  }  return true;}  }
class C{  public boolean isObjectModelSupported(String objectModel){  if (objectModel == null) {    String fmsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_OBJECT_MODEL_NULL,new Object[]{this.getClass().getName()});    throw new NullPointerException(fmsg);  }  if (objectModel.length() == 0) {    String fmsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_OBJECT_MODEL_EMPTY,new Object[]{this.getClass().getName()});    throw new IllegalArgumentException(fmsg);  }  if (objectModel.equals(XPathFactory.DEFAULT_OBJECT_MODEL_URI)) {    return true;  }  return false;}  }
class C{  public void curve(double x,double y,double controlX,double controlY){  Curve curve=new Curve(x,y,controlX,controlY);  if (x < minX) {    minX=x;  }  if (y < minY) {    minY=y;  }  if (x > maxX) {    maxX=x;  }  if (y > maxY) {    maxY=y;  }  if (controlX < minX) {    minX=controlX;  }  if (controlY < minY) {    minY=controlY;  }  if (controlX > maxX) {    maxX=controlX;  }  if (controlY > maxY) {    maxY=controlY;  }  elements.add(curve);}  }
class C{  Carriers extractCarriers(Carriers carriers,ArrayList<String> retailerNames){  if (retailerNames == null) {    return carriers;  }  String carrierId;  Carriers tempCarriers=new Carriers();  for (  Carrier carrier : carriers.getCarriers().values()) {    carrierId=carrier.getId().toString();    for (    String retailerName : retailerNames)     if (carrierId.startsWith(retailerName)) {      tempCarriers.addCarrier(carrier);    }  }  return tempCarriers;}  }
class C{  @Override public void initFilterBean(){  String includesParam=getFilterConfig().getInitParameter(INCLUDES_PARAMETER);  if (StringUtils.isEmpty(includesParam)) {    includes=parsePatterns(DEFAULT_INCLUDES);  } else {    includes=parsePatterns(includesParam);  }  String excludesParam=getFilterConfig().getInitParameter(EXCLUDES_PARAMETER);  if (StringUtils.isEmpty(excludesParam)) {    excludes=parsePatterns(DEFAULT_EXCLUDES);  } else {    excludes=parsePatterns(excludesParam);  }  servletName=getFilterConfig().getInitParameter(SERVLETNAME_PARAMETER);}  }
class C{  private static HashMap<String,Object> readAmfEcmaArray(ParsableByteArray data){  int count=data.readUnsignedIntToInt();  HashMap<String,Object> array=new HashMap<>(count);  for (int i=0; i < count; i++) {    String key=readAmfString(data);    int type=readAmfType(data);    array.put(key,readAmfData(data,type));  }  return array;}  }
class C{  public void classFirst(boolean flag){  m_ClassFirst=flag;}  }
class C{  @SuppressWarnings("unchecked") @Override public <T>T deserialize(byte[] data,Class<T> clazz){  return (T)data;}  }
class C{  protected static boolean isFldidValid(Integer bookID,int fldid,String entidad){  int firstValidationField=Keys.EREG_FDR_MATTER + 1;  if (Repository.getInstance(entidad).isOutBook(bookID.toString()).booleanValue()) {    firstValidationField=Keys.SREG_FDR_MATTER + 1;  }  if (fldid >= firstValidationField) {    return true;  }  return false;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Min4(){  super("min4",4);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:03.676 -0500",hash_original_method="CBC1C8E9D5EE174118E047C6EC7B9670",hash_generated_method="2719D807D80AA6AF2DEB0C2EC2DD8C43") public final void discardPackets() throws IOException {  int to;  DatagramPacket datagram;  datagram=new DatagramPacket(new byte[PACKET_SIZE],PACKET_SIZE);  to=getSoTimeout();  setSoTimeout(1);  try {    while (true)     _socket_.receive(datagram);  } catch (  SocketException e) {  }catch (  InterruptedIOException e) {  }  setSoTimeout(to);}  }
class C{  public boolean isDirectory(){  return name.endsWith("/");}  }
class C{  @Override public void onStream(FramedStream stream) throws IOException {  stream.close(ErrorCode.REFUSED_STREAM);}  }
class C{  final byte[] lookupFirst(final byte[] key,final int buddyOffset){  final int index=lookupIndex(key);  if (index == -1)   return null;  if (hasRawRecords()) {    final long addr=getRawRecord(index);    if (addr != IRawStore.NULL)     return getBytes(readRawRecord(addr));  }  return getValues().get(index);}  }
class C{  public int diff_commonPrefix(String text1,String text2){  int n=Math.min(text1.length(),text2.length());  for (int i=0; i < n; i++) {    if (text1.charAt(i) != text2.charAt(i)) {      return i;    }  }  return n;}  }
class C{  public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }}  }
class C{  public Object put(Object key,Object value){  processQueue();  Object rtn=hash.put(key,SoftValueRef.create(key,value,queue));  if (rtn != null)   rtn=((SoftReference)rtn).get();  return rtn;}  }
class C{  private void endScope(int adr){  LocalVar v=lvar[adr];  if (v != null) {    if (v.isLastRangeInitialized()) {      char length=(char)(curCP() - v.lastRange().start_pc);      if (length < Character.MAX_VALUE) {        v.closeRange(length);        putVar(v);        fillLocalVarPosition(v);      }    }    lvar[adr]=null;  }  state.defined.excl(adr);}  }
class C{  static boolean isSpace(int ch){  return (ch >= '\u2000') || (ch <= '\u200a') || ch == '\u205f' || isLineBreak(ch);}  }
class C{  public void clearState(){}  }
class C{  public void clear(){  this.store.clear();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeIdNode;  Node nsNode;  String nsName;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employeeId");  employeeIdNode=elementList.item(1);  nsNode=employeeIdNode.getNextSibling();  nsName=nsNode.getNodeName();  if (equals("#text",nsName)) {    nsNode=nsNode.getNextSibling();    nsName=nsNode.getNodeName();  }  assertEquals("nodeName","name",nsName);}  }
class C{  public static void createStatechartModel(Resource resource,PreferencesHint preferencesHint){  Statechart statechart=SGraphFactory.eINSTANCE.createStatechart();  String lastSegment=resource.getURI().lastSegment();  String statechartName=lastSegment.substring(0,lastSegment.indexOf('.'));  statechart.setName(statechartName);  statechart.setSpecification(INITIAL_SPECIFICATION);  Diagram diagram=ViewService.createDiagram(statechart,StatechartDiagramEditor.ID,preferencesHint);  diagram.setElement(statechart);  resource.getContents().add(statechart);  resource.getContents().add(diagram);  Region region=SGraphFactory.eINSTANCE.createRegion();  region.setName(INITIAL_REGION_NAME);  statechart.getRegions().add(region);  Node regionView=ViewService.createNode(diagram,region,SemanticHints.REGION,preferencesHint);  setRegionViewLayoutConstraint(regionView);  Entry initialState=SGraphFactory.eINSTANCE.createEntry();  initialState.setKind(EntryKind.INITIAL);  region.getVertices().add(initialState);  Node initialStateView=ViewService.createNode(getRegionCompartmentView(regionView),initialState,SemanticHints.ENTRY,preferencesHint);  setInitialStateViewLayoutConstraint(initialStateView);  State state=SGraphFactory.eINSTANCE.createState();  state.setName("StateA");  region.getVertices().add(state);  Node stateNode=ViewService.createNode(getRegionCompartmentView(regionView),state,SemanticHints.STATE,preferencesHint);  setStateViewLayoutConstraint(stateNode);  Transition transition=SGraphFactory.eINSTANCE.createTransition();  transition.setSource(initialState);  transition.setTarget(state);  initialState.getOutgoingTransitions().add(transition);  ViewService.createEdge(initialStateView,stateNode,transition,SemanticHints.TRANSITION,preferencesHint);  Node textCompartment=ViewService.createNode(diagram,statechart,SemanticHints.STATECHART_TEXT,preferencesHint);  setTextCompartmentLayoutConstraint(textCompartment);}  }
class C{  public static boolean isInteger(String string){  try {    Integer.parseInt(string);  } catch (  NumberFormatException e) {    return false;  }  return true;}  }
class C{  void copyProductAndModifyParametersForUpgrade(Subscription subscription,Product targetProduct,PlatformUser currentUser,List<VOParameter> voTargetParameters) throws SubscriptionMigrationException, TechnicalServiceNotAliveException, ObjectNotFoundException {  ProvisioningType provisioningType=targetProduct.getTechnicalProduct().getProvisioningType();  Product targetProductCopy=copyProductForSubscription(targetProduct,subscription,false);  List<Parameter> modifiedParametersForLog=updateConfiguredParameterValues(targetProductCopy,voTargetParameters,subscription);  checkPlatformParameterConstraints(subscription,targetProductCopy,currentUser);  try {    if (provisioningType.equals(ProvisioningType.ASYNCHRONOUS)) {      subscription.setAsyncTempProduct(targetProductCopy);      handleAsyncUpgradeSubscription(subscription,targetProductCopy);    } else     if (provisioningType.equals(ProvisioningType.SYNCHRONOUS)) {      targetProductCopy.getPriceModel().setProvisioningCompleted(true);      subscription.bindToProduct(targetProductCopy);      if (isActivationAllowed(subscription,true)) {        appManager.activateInstance(subscription);        subscription.setStatus(SubscriptionStatus.ACTIVE);      }      if (subscription.getStatus() != SubscriptionStatus.PENDING) {        appManager.upgradeSubscription(subscription);      }    }  } catch (  TechnicalServiceNotAliveException e) {    sessionCtx.setRollbackOnly();    throw e;  }catch (  TechnicalServiceOperationException e1) {    sessionCtx.setRollbackOnly();    Object[] params;    String subscriptionId=subscription.getSubscriptionId();    if (e1.getMessageParams() != null && e1.getMessageParams().length > 1) {      params=new Object[]{subscriptionId,e1.getMessage(),e1.getMessageParams()[1]};    } else {      params=new Object[]{subscriptionId,e1.getMessage(),""};    }    SubscriptionMigrationException smf=new SubscriptionMigrationException("Modify ParameterSet failed",Reason.PARAMETER,params);    LOG.logError(Log4jLogger.SYSTEM_LOG,smf,LogMessageIdentifier.ERROR_MODIFY_PARAMETER_SET_FAILED);    throw smf;  }  audit.editSubscriptionParameterConfiguration(dataManager,targetProductCopy,modifiedParametersForLog);}  }
class C{  void findGlobs(String globPattern,Map<String,ClassReader> zipClasses,Map<String,ClassReader> inOutFound) throws LogAbortException {  globPattern=globPattern.replaceAll("\\$","\\\\\\$");  globPattern=globPattern.replaceAll("\\.","\\\\.");  globPattern=globPattern.replaceAll("\\*\\*","@");  globPattern=globPattern.replaceAll("\\*","[^.]*");  globPattern=globPattern.replaceAll("@",".*");  globPattern+="$";  Pattern regexp=Pattern.compile(globPattern);  for (  Entry<String,ClassReader> entry : zipClasses.entrySet()) {    String class_name=entry.getKey();    if (regexp.matcher(class_name).matches()) {      findClass(class_name,zipClasses,inOutFound);    }  }}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.TAGGED_TEMPLATE_STRING;}  }
class C{  public Blade put(String path,RouteHandler handler){  routers.route(path,handler,HttpMethod.PUT);  return this;}  }
class C{  private Node tryAppend(Node s,boolean haveData){  for (Node t=tail, p=t; ; ) {    Node n, u;    if (p == null && (p=head) == null) {      if (casHead(null,s))       return s;    } else     if (p.cannotPrecede(haveData))     return null; else     if ((n=p.next) != null)     p=p != t && t != (u=tail) ? (t=u) : (p != n) ? n : null; else     if (!p.casNext(null,s))     p=p.next; else {      if (p != t) {        while ((tail != t || !casTail(t,s)) && (t=tail) != null && (s=t.next) != null && (s=s.next) != null && s != t)         ;      }      return p;    }  }}  }
class C{  final public MutableString replace(final int start,int end,final CharSequence s){  final int length=length();  if (end > length)   end=length;  if (start > end)   throw new StringIndexOutOfBoundsException();  final int l=s.length();  final int newLength=length + l - end + start;  if (l == 0 && newLength == length)   return this;  if (newLength >= length) {    expand(newLength);    System.arraycopy(array,end,array,start + l,length - end);    getChars(s,0,l,array,start);    hashLength=hashLength < 0 ? -1 : newLength;  } else {    System.arraycopy(array,end,array,start + l,length - end);    getChars(s,0,l,array,start);    if (hashLength < 0) {      setCapacity(newLength);      hashLength=-1;    } else     hashLength=newLength;  }  return this;}  }
class C{  public E sample(){  return sample(new Random());}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public int size(){  return size;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.BLOCK__STATEMENTS:    getStatements().clear();  return;}super.eUnset(featureID);}  }
class C{  public boolean isHash(){  return hash;}  }
class C{  protected static void writeDefinitions(TableCreator creator,ByteBuffer buffer) throws IOException {  for (  IndexBuilder idx : creator.getIndexes()) {    writeDefinition(creator,idx,buffer);  }  for (  IndexBuilder idx : creator.getIndexes()) {    TableImpl.writeName(buffer,idx.getName(),creator.getCharset());  }}  }
class C{  public AbstractIterativeScorerWithPriors(Hypergraph<V,E> g,Function<V,? extends S> vertex_priors,double alpha){  super(g);  this.vertex_priors=vertex_priors;  this.alpha=alpha;  initialize();}  }
class C{  public boolean requestRouteToHostAddress(int networkType,InetAddress hostAddress){  byte[] address=hostAddress.getAddress();  try {    return mService.requestRouteToHostAddress(networkType,address);  } catch (  RemoteException e) {    return false;  }}  }
class C{  @Override protected void initialize(){  super.initialize();  m_CommandHistory=new Vector<String>();  m_HistoryPos=0;  m_Completion=new CommandlineCompletion();}  }
class C{  static int pow2(final int n){  return 1 << n;}  }
class C{  public static ParameterDatabase loadParameterDatabase(String[] args){  ParameterDatabase parameters=null;  for (int x=0; x < args.length - 1; x++)   if (args[x].equals(A_FILE))   try {    parameters=new ParameterDatabase(new File(new File(args[x + 1]).getAbsolutePath()),args);    break;  } catch (  Exception e) {    e.printStackTrace();    Output.initialError("An exception was generated upon reading the parameter file \"" + args[x + 1] + "\".\nHere it is:\n"+ e);  }  Class cls=null;  for (int x=0; x < args.length - 1; x++)   if (args[x].equals(A_AT))   try {    if (parameters != null)     Output.initialError("Both -file and -at arguments provided.  This is not permitted.\nFor help, try:  java ec.Evolve -help"); else     cls=Class.forName(args[x + 1]);    break;  } catch (  Exception e) {    e.printStackTrace();    Output.initialError("An exception was generated upon extracting the class to load the parameter file relative to: " + args[x + 1] + "\nFor help, try:  java ec.Evolve -help\n\n"+ e);  }  for (int x=0; x < args.length - 1; x++)   if (args[x].equals(A_FROM))   try {    if (parameters != null)     Output.initialError("Both -file and -from arguments provided.  This is not permitted.\nFor help, try:  java ec.Evolve -help"); else {      if (cls == null)       cls=Evolve.class;      parameters=new ParameterDatabase(args[x + 1],cls,args);      System.err.println("Using database resource location " + parameters.getLabel());    }    break;  } catch (  Exception e) {    e.printStackTrace();    Output.initialError("The parameter file is missing at the resource location: " + args[x + 1] + " relative to the class: "+ cls+ "\n\nFor help, try:  java ec.Evolve -help");  }  if (parameters == null)   Output.initialError("No parameter or checkpoint file was specified.\nFor help, try:   java ec.Evolve -help");  return parameters;}  }
class C{  public CViewLoader(final CGraphWindow window,final IViewContainer container,final INaviView view){  this.window=window;  this.container=Preconditions.checkNotNull(container,"Error: Container argument can not be null.");  this.view=Preconditions.checkNotNull(view,"Error: View argument can not be null.");}  }
class C{  private void notifyActionListeners(String command,SandboxBody body){  ActionListener[] listeners=this.getListeners(ActionListener.class);  int size=listeners.length;  BodyActionEvent event=new BodyActionEvent(this,ActionEvent.ACTION_PERFORMED,command,body);  for (int i=0; i < size; i++) {    listeners[i].actionPerformed(event);  }}  }
class C{  public Sha256Hash(String hexString){  checkArgument(hexString.length() == 64);  this.bytes=Hex.decode(hexString);}  }
class C{  protected void removeListeners(Accessible a){  removeListeners(a.getAccessibleContext());}  }
class C{  public void removeAll(){  if (elements != null) {    for (    ListElement element : elements) {      element.dispose();    }  }  elements=ELEMENTS_EMPTY;  selectedElementIndex=NONE;  widestLabelIndex=NONE;  topVisibleIndex=NONE;  bottomVisibleIndex=NONE;}  }
class C{  void downloadLast(){  getDelegator().reset(false);  for (  BoundingBox box : getDelegator().getBoundingBoxes()) {    if (box != null && box.isValidForApi())     downloadBox(box,true,null);  }}  }
class C{  protected void handleTableSelectionChanged(SelectionChangedEvent event){  int size=((IStructuredSelection)event.getSelection()).size();  envEditButton.setEnabled(size == 1);  envRemoveButton.setEnabled(size > 0);}  }
class C{  public void send(final AmqpMessage message) throws IOException {  checkClosed();  send(message,null);}  }
class C{  public String numFoldsTipText(){  return "The number of folds to use.";}  }
class C{  @Override public UpdateResponse deleteById(List<String> ids,int commitWithinMs) throws SolrServerException, IOException {  if (!this.writeEnabled)   return _dummyOKResponse;  UpdateResponse ur=null;  for (  SolrClient s : this.shards.server4read())   ur=s.deleteById(ids,commitWithinMs);  return ur;}  }
class C{  public MutableInterval(ReadableInstant start,ReadableDuration duration){  super(start,duration);}  }
class C{  protected void appendDetail(StringBuffer buffer,String fieldName,short value){  buffer.append(value);}  }
class C{  public void writeDetails(javax.xml.namespace.QName qname,org.apache.axis.encoding.SerializationContext context) throws java.io.IOException {  context.serialize(qname,null,this);}  }
class C{  @Override public synchronized List<AdapterCommand> diff(@NonNull List<T> newList){  return super.diff(newList);}  }
class C{  public boolean isNull(String key){  return JSONObject.NULL.equals(opt(key));}  }
class C{  public DurationConfigFieldBuilder globalDuration(final Duration globalDuration){  this.globalDuration=globalDuration;  return this;}  }
class C{  private double simplifyTolerance(double bufDistance){  return bufDistance * bufParams.getSimplifyFactor();}  }
class C{  public void runTest() throws Throwable {  Document doc;  Attr attribute;  String namespaceURI=null;  String qualifiedName="test";  String name;  String nodeName;  String nodeValue;  doc=(Document)load("staffNS",false);  attribute=doc.createAttributeNS(namespaceURI,qualifiedName);  nodeName=attribute.getNodeName();  nodeValue=attribute.getNodeValue();  assertEquals("documentcreateattributeNS01","test",nodeName);}  }
class C{  @Override public synchronized void reset() throws IOException {  iis.reset();}  }
class C{  void update(byte input){  if (first == true) {    md.update(secret);    md.update(pad1);    first=false;  }  md.update(input);}  }
class C{  public LabeledOMSpline(float latPoint,float lonPoint,int[] xPoints,int[] yPoints,int cMode){  super(latPoint,lonPoint,xPoints,yPoints,cMode);}  }
class C{  private void updateExistingRow(final SQLiteDatabase database,final long id,boolean bumpCount){  String stringId=String.valueOf(id);  database.beginTransaction();  final Cursor cursor=database.query(SongPlayCountColumns.NAME,null,WHERE_ID_EQUALS,new String[]{stringId},null,null,null);  if (cursor != null && cursor.moveToFirst()) {    int lastUpdatedIndex=cursor.getColumnIndex(SongPlayCountColumns.LAST_UPDATED_WEEK_INDEX);    int lastUpdatedWeek=cursor.getInt(lastUpdatedIndex);    int weekDiff=mNumberOfWeeksSinceEpoch - lastUpdatedWeek;    if (Math.abs(weekDiff) >= NUM_WEEKS) {      deleteEntry(database,stringId);      if (bumpCount) {        createNewPlayedEntry(database,id);      }    } else     if (weekDiff != 0) {      int[] playCounts=new int[NUM_WEEKS];      if (weekDiff > 0) {        for (int i=0; i < NUM_WEEKS - weekDiff; i++) {          playCounts[i + weekDiff]=cursor.getInt(getColumnIndexForWeek(i));        }      } else       if (weekDiff < 0) {        for (int i=0; i < NUM_WEEKS + weekDiff; i++) {          playCounts[i]=cursor.getInt(getColumnIndexForWeek(i - weekDiff));        }      }      if (bumpCount) {        playCounts[0]++;      }      float score=calculateScore(playCounts);      if (score < .01f) {        deleteEntry(database,stringId);      } else {        ContentValues values=new ContentValues(NUM_WEEKS + 2);        values.put(SongPlayCountColumns.LAST_UPDATED_WEEK_INDEX,mNumberOfWeeksSinceEpoch);        values.put(SongPlayCountColumns.PLAYCOUNTSCORE,score);        for (int i=0; i < NUM_WEEKS; i++) {          values.put(getColumnNameForWeek(i),playCounts[i]);        }        database.update(SongPlayCountColumns.NAME,values,WHERE_ID_EQUALS,new String[]{stringId});      }    } else     if (bumpCount) {      ContentValues values=new ContentValues(2);      int scoreIndex=cursor.getColumnIndex(SongPlayCountColumns.PLAYCOUNTSCORE);      float score=cursor.getFloat(scoreIndex) + getScoreMultiplierForWeek(0);      values.put(SongPlayCountColumns.PLAYCOUNTSCORE,score);      values.put(getColumnNameForWeek(0),cursor.getInt(getColumnIndexForWeek(0)) + 1);      database.update(SongPlayCountColumns.NAME,values,WHERE_ID_EQUALS,new String[]{stringId});    }    cursor.close();  } else   if (bumpCount) {    createNewPlayedEntry(database,id);  }  database.setTransactionSuccessful();  database.endTransaction();}  }
class C{  public VersionNumber(int majorNumber,int minorNumber){  this(majorNumber,minorNumber,0,null);}  }
class C{  public boolean isNewNull(){  Object oo=get_Value(COLUMNNAME_IsNewNull);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private Vector3 keyToTestPointCenter(String key){  Vector3 p=new Vector3();  String[] token=key.split("/");  if (token.length <= 1) {    return (p);  }  double w=worldWidth;  double l=worldLength;  for (int i=0; i < token.length; ++i) {    w/=2;    l/=2;    if (!token[i].isEmpty()) {      int q=Integer.valueOf(token[i]);switch (q) {case 1:        p.set(p.getX() - w,p.getY() + l,0);      break;case 2:    p.set(p.getX() + w,p.getY() + l,0);  break;case 3:p.set(p.getX() - w,p.getY() - l,0);break;case 4:p.set(p.getX() + w,p.getY() - l,0);break;}}}return (p);}  }
class C{  static String writeSpatialArgs(SpatialArgs args){  StringBuilder str=new StringBuilder();  str.append(args.getOperation().getName());  str.append('(');  str.append(args.getShape().toString());  if (args.getDistErrPct() != null)   str.append(" distErrPct=").append(String.format(Locale.ROOT,"%.2f%%",args.getDistErrPct() * 100d));  if (args.getDistErr() != null)   str.append(" distErr=").append(args.getDistErr());  str.append(')');  return str.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:48.072 -0500",hash_original_method="7B57FCA59F8E8ECF64401977C141F604",hash_generated_method="38CE04D38A0C314CB910E94916491B8F") public static XMLReader createXMLReader(String className) throws SAXException {  return loadClass(NewInstance.getClassLoader(),className);}  }
class C{  public static <T>T first(List<T> l){  return l.get(0);}  }
class C{  private void createDefaultWorld(OdorWorld world){  RotatingEntity mouse=new RotatingEntity(world);  mouse.setLocation(162,200);  world.addAgent(mouse);  BasicEntity object1=new BasicEntity("Swiss.gif",world);  object1.setLocation(36,107);  object1.setSmellSource(new SmellSource(SimbrainMath.multVector(new double[]{0.7,0.3,0.0,0.0,0.0,0.0,0.0,0.0},1),SmellSource.DecayFunction.GAUSSIAN,object1.getLocation()));  world.addEntity(object1);  BasicEntity object2=new BasicEntity("Gouda.gif",world);  object2.setLocation(169,32);  object2.setSmellSource(new SmellSource(SimbrainMath.multVector(new double[]{0.7,0.0,0.3,0.0,0.0,0.0,0.0,0.0},1),SmellSource.DecayFunction.GAUSSIAN,object1.getLocation()));  world.addEntity(object2);  BasicEntity object3=new BasicEntity("Bluecheese.gif",world);  object3.setLocation(304,87);  object3.setSmellSource(new SmellSource(SimbrainMath.multVector(new double[]{0.7,0.0,0.0,0.0,0.3,0.0,0.0,0.0},1),SmellSource.DecayFunction.GAUSSIAN,object1.getLocation()));  world.addEntity(object3);  BasicEntity object4=new BasicEntity("Tulip.gif",world);  object4.setLocation(80,351);  object4.setSmellSource(new SmellSource(SimbrainMath.multVector(new double[]{0.0,0.3,0.0,0.7,0.0,0.0,0.0,0.0},1),SmellSource.DecayFunction.GAUSSIAN,object1.getLocation()));  world.addEntity(object4);  BasicEntity object5=new BasicEntity("Pansy.gif",world);  object5.setLocation(251,370);  object5.setSmellSource(new SmellSource(SimbrainMath.multVector(new double[]{0.0,0.0,0.3,0.7,0.0,0.0,0.0,0.0},1),SmellSource.DecayFunction.GAUSSIAN,object1.getLocation()));  world.addEntity(object5);}  }
class C{  public void putLCR(PlogLCR LCR) throws ReplicatorException {  if (startSCN == 0) {    startSCN=LCR.SCN;  }  if (startPlogId == 0) {    startPlogId=LCR.getPlogId();  }  if (LCR.type == PlogLCR.ETYPE_TRANSACTIONS && LCR.subtype == PlogLCR.ESTYPE_TRAN_COMMIT) {    committed=true;    commitSCN=LCR.SCN;    commitTime=LCR.timestamp;  } else   if (LCR.type == PlogLCR.ETYPE_TRANSACTIONS && LCR.subtype == PlogLCR.ESTYPE_TRAN_ROLLBACK) {    empty=true;    LCRList.resize(0);    committed=true;  } else   if (LCR.type == PlogLCR.ETYPE_TRANSACTIONS && LCR.subtype == PlogLCR.ESTYPE_TRAN_ROLLBACK_TO_SAVEPOINT) {    int newSize=LCRList.size();    for (int i=LCRList.size() - 1; i >= 0; i--) {      if (LCRList.get(i).LCRid >= LCR.LCRSavepointId) {        newSize--;      } else       break;    }    LCRList.resize(newSize);  } else   if (LCR.type == PlogLCR.ETYPE_LCR_DATA) {    empty=false;    LCRList.add(LCR);    if (LCR.subtype == PlogLCR.ESTYPE_LCR_DDL)     this.transactionIsDML=false;  }}  }
class C{  private void registerUse(Instruction s,FieldReference fr){  if (VM.VerifyAssertions)   VM._assert(s.operator() != PHI);  RVMField f=fr.peekResolvedField();  HeapOperand<Object> H;  if (f == null) {    H=new HeapOperand<Object>(findOrCreateHeapVariable(fr));  } else {    if (heapTypes != null) {      if (!heapTypes.contains(f)) {        return;      }    }    H=new HeapOperand<Object>(findOrCreateHeapVariable(f));  }  HeapOperand<Object>[] Hprime=new HeapOperand[1];  Hprime[0]=H;  Hprime[0].setInstruction(s);  uses.put(s,Hprime);}  }
class C{  public static XMLTreeLocation beforeAnyOf(String... names){  if (names.length == 0) {    throw new IllegalArgumentException("Required not empty elements names");  }  return disjunctionChain(LocationType.BEFORE,names);}  }
class C{  public void merge(GrammarRuleNode other){  int n=other.getNumChoices();  for (int i=0; i < n; i++)   addChoice(other.getChoice(i));}  }
class C{  public RequestCreator noFade(){  noFade=true;  return this;}  }
class C{  public void init(StompDecoder decoder){}  }
class C{  public <T extends Comparable<T>>AdvancedStateMap.Builder withName(IProperty<T> property){  this.withName(null);  return this;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:04.081 -0500",hash_original_method="3EFD18F746D60C3172C5216CCD625C1E",hash_generated_method="F2F9C2909A53DF682B6C07C7CC473170") public void applyPattern(String template){  validatePattern(template);  pattern=template;}  }
class C{  public static void forceAccess(AccessibleObject accObject){  if (accObject.isAccessible() == true) {    return;  }  try {    accObject.setAccessible(true);  } catch (  SecurityException sex) {  }}  }
class C{  public void copyFrom(InputStream is) throws IOException {  this.array.copyFrom(is);}  }
class C{  private void addToRow(int[] fromRow,int[] toRow){  for (int i=toRow.length - 1; i >= 0; i--) {    toRow[i]=field.add(fromRow[i],toRow[i]);  }}  }
class C{  public static void writeln(Extent e,boolean flush){  write(e);  writelnWithFlush(flush);}  }
class C{  public InputStream openSchema(String name) throws IOException {  return openResource(name);}  }
class C{  protected LRUCache newInstance(int size,int newOverflow){  return new org.eclipse.jdt.internal.core.BufferCache(size,newOverflow);}  }
class C{  private static String lookupFieldReference(String code){  String fieldRef=fieldReferences.get(code);  if (null == fieldRef) {    loadFieldReference(code);    fieldRef=fieldReferences.get(code);  }  return fieldRef;}  }
class C{  Class<?> javaxToolsJavac(String packageName,String className,String source){  String fullClassName=packageName + "." + className;  StringWriter writer=new StringWriter();  JavaFileManager fileManager=new ClassFileManager(JAVA_COMPILER.getStandardFileManager(null,null,null));  ArrayList<JavaFileObject> compilationUnits=new ArrayList<JavaFileObject>();  compilationUnits.add(new StringJavaFileObject(fullClassName,source));synchronized (JAVA_COMPILER) {    JAVA_COMPILER.getTask(writer,fileManager,null,null,null,compilationUnits).call();  }  String output=writer.toString();  handleSyntaxError(output);  try {    return fileManager.getClassLoader(null).loadClass(fullClassName);  } catch (  ClassNotFoundException e) {    throw DbException.convert(e);  }}  }
class C{  @Override public void run(){  Context context=ApplicationStatus.getApplicationContext();  if (ChromeVersionInfo.isOfficialBuild()) {    Intent omahaIntent=OmahaClient.createInitializeIntent(context);    context.startService(omahaIntent);  }  DelayedInvalidationsController.getInstance().notifyPendingInvalidations(context);}  }
class C{  protected void initialize(Collection<ConfigurationEventTypeXMLDOM.XPathPropertyDesc> explicitXPathProperties,List<ExplicitPropertyDescriptor> additionalSchemaProperties){  Map<String,ExplicitPropertyDescriptor> namedProperties=new LinkedHashMap<String,ExplicitPropertyDescriptor>();  for (  ExplicitPropertyDescriptor desc : additionalSchemaProperties) {    namedProperties.put(desc.getDescriptor().getPropertyName(),desc);  }  String xpathExpression=null;  try {    for (    ConfigurationEventTypeXMLDOM.XPathPropertyDesc property : explicitXPathProperties) {      XPath xPath=xPathFactory.newXPath();      if (namespaceContext != null) {        xPath.setNamespaceContext(namespaceContext);      }      xpathExpression=property.getXpath();      if (log.isInfoEnabled()) {        log.info("Compiling XPath expression for property '" + property.getName() + "' as '"+ xpathExpression+ "'");      }      XPathExpression expression=xPath.compile(xpathExpression);      FragmentFactoryXPathPredefinedGetter fragmentFactory=null;      boolean isFragment=false;      if (property.getOptionaleventTypeName() != null) {        fragmentFactory=new FragmentFactoryXPathPredefinedGetter(this.getEventAdapterService(),property.getOptionaleventTypeName(),property.getName());        isFragment=true;      }      boolean isArray=false;      if (property.getType().equals(XPathConstants.NODESET)) {        isArray=true;      }      EventPropertyGetter getter=new XPathPropertyGetter(property.getName(),xpathExpression,expression,property.getType(),property.getOptionalCastToType(),fragmentFactory);      Class returnType=SchemaUtil.toReturnType(property.getType(),property.getOptionalCastToType());      EventPropertyDescriptor desc=new EventPropertyDescriptor(property.getName(),returnType,null,false,false,isArray,false,isFragment);      ExplicitPropertyDescriptor explicit=new ExplicitPropertyDescriptor(desc,getter,isArray,property.getOptionaleventTypeName());      namedProperties.put(desc.getPropertyName(),explicit);    }  } catch (  XPathExpressionException ex) {    throw new EPException("XPath expression could not be compiled for expression '" + xpathExpression + '\'',ex);  }  super.initialize(new ArrayList<ExplicitPropertyDescriptor>(namedProperties.values()));  startTimestampPropertyName=configurationEventTypeXMLDOM.getStartTimestampPropertyName();  endTimestampPropertyName=configurationEventTypeXMLDOM.getEndTimestampPropertyName();  EventTypeUtility.validateTimestampProperties(this,startTimestampPropertyName,endTimestampPropertyName);}  }
class C{  public void increase(){  value++;  if (!set) {    set=true;  }}  }
class C{  public void checkIfConfigExists(){  File config=new File(getFilesDir() + "/.MultiSystem/config.xml");  if (!config.exists()) {    final String[] tabNames={"tab0.xml","tab1.xml"};    final String[] configNames={"config.xml","icon.png"};    final String[] binNames={"install.sh","busybox","MultiSystem.tgz"};    FileHelper.createFolder(getFilesDir() + "/.MultiSystem");    FileHelper.createFolder(getFilesDir() + "/.MultiSystem/tabs");    FileHelper.createFolder(getFilesDir() + "/.MultiSystem/bin");    FileHelper.createFolder(getFilesDir() + "/.MultiSystem/tmp");    FileHelper.copyFromAssets(getBaseContext(),configNames,getFilesDir() + "/.MultiSystem");    FileHelper.copyFromAssets(getBaseContext(),tabNames,getFilesDir() + "/.MultiSystem/tabs");    FileHelper.copyFromAssets(getBaseContext(),binNames,getFilesDir() + "/.MultiSystem/bin");  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static boolean isNullOrEmpty(String s){  return s == null || s.length() == 0;}  }
class C{  int read(byte[] buffer,int offset,int length) throws IOException {  int readLength=0;  while (length > 0) {    while (_chunkLength <= 0) {      if (_isLastChunk)       return readLength == 0 ? -1 : readLength;      int code=read();switch (code) {case BC_BINARY_CHUNK:        _isLastChunk=false;      _chunkLength=(read() << 8) + read();    break;case BC_BINARY:  _isLastChunk=true;_chunkLength=(read() << 8) + read();break;case 0x20:case 0x21:case 0x22:case 0x23:case 0x24:case 0x25:case 0x26:case 0x27:case 0x28:case 0x29:case 0x2a:case 0x2b:case 0x2c:case 0x2d:case 0x2e:case 0x2f:_isLastChunk=true;_chunkLength=code - 0x20;break;case 0x34:case 0x35:case 0x36:case 0x37:_isLastChunk=true;_chunkLength=(code - 0x34) * 256 + read();break;default :throw expect("byte[]",code);}}int sublen=_chunkLength;if (length < sublen) sublen=length;if (_length <= _offset && !readBuffer()) return -1;if (_length - _offset < sublen) sublen=_length - _offset;System.arraycopy(_buffer,_offset,buffer,offset,sublen);_offset+=sublen;offset+=sublen;readLength+=sublen;length-=sublen;_chunkLength-=sublen;}return readLength;}  }
class C{  private NumericSummaryTable splitGroupingColumn(NumericSummaryTable groupTable){  List<Column> newColumns=new ArrayList<>();  List<Column> columns=sortedOriginal.columns(splitColumnNames);  for (  Column column : columns) {    Column newColumn=column.emptyCopy();    newColumns.add(newColumn);  }  for (int row=0; row < groupTable.rowCount(); row++) {    List<String> strings=SPLITTER.splitToList(groupTable.categoryColumn("Group").get(row));    for (int col=0; col < newColumns.size(); col++) {      newColumns.get(col).addCell(strings.get(col));    }  }  for (int col=0; col < newColumns.size(); col++) {    Column c=newColumns.get(col);    groupTable.addColumn(col,c);  }  groupTable.removeColumns("Group");  return groupTable;}  }
class C{  private void paintTabBorderImpl(Graphics2D g2d,boolean isEnableAt,boolean isSelected,boolean isRover,int x,int y,int w,int h){  if (isSelected)   __Icon9Factory__.getInstance().getTabbedPaneBgSelected().draw(g2d,x,y + 1,w,h); else {    if (isEnableAt && isRover)     __Icon9Factory__.getInstance().getTabbedPaneBgNormal_rover().draw(g2d,x,y + 1,w,h); else     __Icon9Factory__.getInstance().getTabbedPaneBgNormal().draw(g2d,x,y + 1,w,h);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.TRACE_OPTION___OPTION_1:    setOption_1(OPTION_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == null) {    return false;  }  if (obj == this) {    return true;  }  if (!(obj instanceof HistogramType)) {    return false;  }  HistogramType t=(HistogramType)obj;  if (!this.name.equals(t.name)) {    return false;  }  return true;}  }
class C{  @Override public void addRoute(BufferQueue<Long> inputTimestampBufferQueue,BufferQueueController<ImageProxy> outputStream){synchronized (mDispatchTable) {    mDispatchTable.add(new DispatchRecord(inputTimestampBufferQueue,outputStream));  }}  }
class C{  public URI(final String scheme,final String userinfo,final String host,final int port) throws URIException {  this(scheme,userinfo,host,port,null,null,null);}  }
class C{  public InputFile(String fileID){  this.file=null;  this.fileName=null;  this.fileID=fileID;}  }
class C{  public void testSize2ContinuousMode() throws Exception {}  }
class C{  public SaveAction(KseFrame kseFrame){  super(kseFrame);  putValue(ACCELERATOR_KEY,KeyStroke.getKeyStroke(res.getString("SaveAction.accelerator").charAt(0),Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));  putValue(LONG_DESCRIPTION,res.getString("SaveAction.statusbar"));  putValue(NAME,res.getString("SaveAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("SaveAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("SaveAction.image")))));}  }
class C{  XmlElement(Element domElem){  m_domElem=domElem;}  }
class C{  public void remoteRestartCoordinator(String nodeId,String type) throws LocalRepositoryException {  final String prefix=String.format("restart(): type=%s on %s",type,nodeId);  _log.debug(prefix);  final String[] cmd={_SYSTOOL_CMD,_SYSTOOL_REMOTE_SYSTOOL,nodeId,_SYSTOOL_RESTART_COORDINATOR,type};  final Exec.Result result=Exec.sudo(_SYSTOOL_TIMEOUT,cmd);  checkFailure(result,prefix);}  }
class C{  public static Document createNewDomFromNode(Node toClone){  Document newDoc=createDomDocument();  Node importedNode=newDoc.importNode(toClone,true);  newDoc.appendChild(importedNode);  return newDoc;}  }
class C{  public Stats snapshot(){  return new Stats(count,mean,sumOfSquaresOfDeltas,min,max);}  }
class C{  public Boolean isAllowJs(){  return allowJs;}  }
class C{  public int testAllSuite(File dirsrc,File dirdest,int maxfiles){  if (!dirdest.isDirectory())   throw new RuntimeException(dirdest + " not a directory");  int cont=0;  int conterr=0;  for (  File im1 : dirsrc.listFiles()) {    String name=im1.getName();    if (maxfiles > 0 && cont >= maxfiles)     break;    if (!im1.isFile())     continue;    if (!name.endsWith(".png"))     continue;    if (name.contains("_ni.png") || name.contains("_tc.png"))     continue;    try {      File orig=new File(dirdest,name);      copyFile(im1,orig);      cont++;      testmirror(orig,TestSupport.addSuffixToName(im1,"_ni"),TestSupport.addSuffixToName(im1,"_tc"));      if (name.startsWith("x")) {        System.err.println("this should have failed! " + name);        conterr++;      }    } catch (    Exception e) {      if (name.startsWith("x")) {        System.out.println("ok error with " + name + " "+ e.getMessage());      } else {        System.err.println("error with " + name + " "+ e.getMessage());        conterr++;        throw e instanceof RuntimeException ? (RuntimeException)e : new RuntimeException(e);      }    } finally {    }  }  System.out.println("Errors: " + conterr + "/"+ cont+ " images");  if (conterr == 0)   System.out.println("=========== SUCCESS ! ================"); else   System.out.println("---- THERE WERE ERRORS!  :-((( ");  return conterr;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:37.483 -0500",hash_original_method="7B4B42E004B10F53CC96D4FD27076B59",hash_generated_method="EC8B35621884B7BF7FC98A2548C7EE22") @Override public String toString(){  StringBuilder sb=new StringBuilder();  for (  String name : mValues.keySet()) {    String value=getAsString(name);    if (sb.length() > 0)     sb.append(" ");    sb.append(name + "=" + value);  }  return sb.toString();}  }
class C{  public static <T>Permutations<T> create(T[] in,T[] out,int m){  return new Permutations<T>(in,out,m);}  }
class C{  public void writeStream(StreamImpl source) throws IOException {  if (source == null)   return;  int len;  int length=_writeBuffer.length;  if (length <= _writeLength) {    int sublen=_writeLength;    _writeLength=0;    _source.write(_writeBuffer,0,sublen,false);    _position+=sublen;    _isFlushRequired=true;  }  while ((len=source.read(_writeBuffer,_writeLength,length - _writeLength)) >= 0) {    _writeLength+=len;    if (length <= _writeLength) {      int tmplen=_writeLength;      _writeLength=0;      _source.write(_writeBuffer,0,tmplen,false);      _position+=tmplen;      _isFlushRequired=true;    }  }  if (_isFlushOnNewline || _implicitFlush) {    flush();  }}  }
class C{  private static void updateClusterTenant(DbClient dbClient,URI dataCenterId,URI tenantId){  List<NamedElement> clustersUris=listChildren(dbClient,dataCenterId,Cluster.class,"label","vcenterDataCenter");  for (  NamedElement clusterUri : clustersUris) {    Cluster cluster=dbClient.queryObject(Cluster.class,clusterUri.getId());    if (cluster != null) {      cluster.setTenant(tenantId);      dbClient.persistObject(cluster);    }  }}  }
class C{  ScheduledFutureTask(Runnable r,V result,long ns){  super(r,result);  this.time=ns;  this.period=0;  this.sequenceNumber=sequencer.getAndIncrement();}  }
class C{  public ColtDataSet(ColtDataSet dataSet){  name=dataSet.name;  variables=new LinkedList<>(dataSet.variables);  tetradMatrix=dataSet.tetradMatrix.copy();  selection=new HashSet<>(dataSet.selection);  knowledge=dataSet.knowledge.copy();  this.nf=dataSet.nf;}  }
class C{  public boolean isReadable(long arc){switch ((int)arc) {case 3:case 2:    return true;default :  break;}return false;}  }
class C{  public Label(){}  }
class C{  public String buildUnionQuery(String[] subQueries,String sortOrder,String limit){  StringBuilder query=new StringBuilder(128);  int subQueryCount=subQueries.length;  String unionOperator=mDistinct ? " UNION " : " UNION ALL ";  for (int i=0; i < subQueryCount; i++) {    if (i > 0) {      query.append(unionOperator);    }    query.append(subQueries[i]);  }  appendClause(query," ORDER BY ",sortOrder);  appendClause(query," LIMIT ",limit);  return query.toString();}  }
class C{  public Date createdTime(){  return (Date)createdTime.clone();}  }
class C{  public void startPacket() throws IOException {  if (_refs != null) {    _refs.clear();    _refCount=0;  }  flushBuffer();  _isPacket=true;  _offset=4;  _buffer[0]=(byte)0x05;  _buffer[1]=(byte)0x55;  _buffer[2]=(byte)0x55;  _buffer[3]=(byte)0x55;}  }
class C{  protected void establishRoute(HttpRoute route,HttpContext context) throws HttpException, IOException {  HttpRouteDirector rowdy=new BasicRouteDirector();  int step;  do {    HttpRoute fact=managedConn.getRoute();    step=rowdy.nextStep(route,fact);switch (step) {case HttpRouteDirector.CONNECT_TARGET:case HttpRouteDirector.CONNECT_PROXY:      managedConn.open(route,context,this.params);    break;case HttpRouteDirector.TUNNEL_TARGET:{    boolean secure=createTunnelToTarget(route,context);    this.log.debug("Tunnel to target created.");    managedConn.tunnelTarget(secure,this.params);  }break;case HttpRouteDirector.TUNNEL_PROXY:{final int hop=fact.getHopCount() - 1;boolean secure=createTunnelToProxy(route,hop,context);this.log.debug("Tunnel to proxy created.");managedConn.tunnelProxy(route.getHopTarget(hop),secure,this.params);}break;case HttpRouteDirector.LAYER_PROTOCOL:managedConn.layerProtocol(context,this.params);break;case HttpRouteDirector.UNREACHABLE:throw new IllegalStateException("Unable to establish route." + "\nplanned = " + route + "\ncurrent = "+ fact);case HttpRouteDirector.COMPLETE:break;default :throw new IllegalStateException("Unknown step indicator " + step + " from RouteDirector.");}} while (step > HttpRouteDirector.COMPLETE);}  }
class C{  public SgmExcepcion(String message){  this(message,null);}  }
class C{  public String nextToken(String delims,boolean delimsAreTokens){  return (delimsAreTokens ? nextToken(null,delims) : nextToken(delims,null));}  }
class C{  public NodeIdentity(final KeyPair keyPair,final String name){  this.keyPair=keyPair;  this.address=Address.fromPublicKey(this.keyPair.getPublicKey());  this.name=name;}  }
class C{  void checkWrite() throws IOException {  if (checkEOF() || (getConnectionState() == cs_SENT_CLOSE)) {    throw new SocketException("Connection closed by remote host");  }}  }
class C{  public static byte[] externalize(Name name){  return externalize(name.getByteArray(),name.getByteOffset(),name.getByteLength());}  }
class C{  public boolean isHighlighted(){  return mHighlighted;}  }
class C{  public void close() throws IOException {  if (!closed) {    try {      byte buffer[]=new byte[BUFFER_SIZE];      while (read(buffer) >= 0) {      }    }  finally {      closed=true;    }  }}  }
class C{  public OrientedPortrayal2D(SimplePortrayal2D child,int offset,double scale){  this(child,offset,scale,Color.red);}  }
class C{  public void output(Vertex output){  if (!isEnabled() || (getSelector() == null)) {    return;  }  getSelector().setSelection(output);}  }
class C{  private void calculateMsgIndices2msgIdMap(){  m_msgIndices2msgIdMap=new int[m_msgId2msgIndicesMap.size()];  for (  Entry<Integer,Integer> entry : m_msgId2msgIndicesMap.getReverseTranslationMap().entrySet()) {    m_msgIndices2msgIdMap[entry.getKey()]=entry.getValue();  }}  }
class C{  public Builder useTraverserRequirements(final boolean value){  configuration.setProperty(USE_TRAVERSER_REQUIREMENTS_CFG_KEY,value);  return this;}  }
class C{  public void addQueryTable(String tableName) throws SQLException {  ensureNoTransactionInProgress();  this.currentConnection=null;  if (this.shardMapping == null) {    if (this.fabricConnection.getShardMapping(this.database,tableName) != null) {      setShardTable(tableName);    }  } else {    ShardMapping mappingForTableName=this.fabricConnection.getShardMapping(this.database,tableName);    if (mappingForTableName != null && !mappingForTableName.equals(this.shardMapping)) {      throw SQLError.createSQLException("Cross-shard query not allowed",SQLError.SQL_STATE_ILLEGAL_ARGUMENT,null,getExceptionInterceptor(),this);    }  }  this.queryTables.add(tableName);}  }
class C{  protected synchronized boolean schedule(DLockRequestMessage request){  if (!this.grantor.dm.isCurrentMember(request.getSender())) {    this.grantor.cleanupSuspendState(request);    return false;  }  if (!isGranted(false) && !hasWaitingRequests()) {    if (grantLockToRequest(request)) {      return true;    }  }  if (logger.isTraceEnabled(LogMarker.DLS)) {    logger.trace(LogMarker.DLS,"[DLockGrantToken.schedule] {} scheduling: {}",this,request);  }  if (this.pendingRequests == null) {    this.pendingRequests=new LinkedList();    this.dlock.getStats().incRequestQueues(1);  }  this.pendingRequests.add(request);  this.dlock.getStats().incPendingRequests(1);  return true;}  }
class C{  @Override public String replacePath(String inputURI){  if (inputURI.contains(TemporaryDirectoryManager.DIRECTORY_TEMPLATE)) {    return inputURI.replace(TemporaryDirectoryManager.DIRECTORY_TEMPLATE,TEMPLATE_DIRECTORY_NAME);  }  return inputURI;}  }
class C{  protected int readCodePoint() throws IOException {  int next=reader.read();  if (Character.isHighSurrogate((char)next)) {    next=Character.toCodePoint((char)next,(char)reader.read());  }  return next;}  }
class C{  public void updateDataPack(@NotNull VisiblePack dataPack){  myFilterUi.updateDataPack(dataPack);  myDetailsPanel.updateDataPack(dataPack);  myGraphTable.updateDataPack(dataPack);}  }
class C{  public BasicLinkedListNode(T value,BasicLinkedListNode<T> tail){  mNext=tail;  mValue=value;  if (tail == null) {    mSize=1;  } else {    mSize=tail.mSize + 1;  }}  }
class C{  public String kernelTipText(){  return "The kernel to use.";}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String s2=getString(stack);  String s1=getString(stack);  return new java.io.File(s1,s2);}  }
class C{  public void consume(){  consumed=true;}  }
class C{  public SpherePortrayal3D(Image image,double scale,int divisions){  this(appearanceForImage(image,true),false,true,scale,divisions);}  }
class C{  @CanIgnoreReturnValue public Stopwatch reset(){  elapsedNanos=0;  isRunning=false;  return this;}  }
class C{  public TeXParser(boolean isPartial,String parseString,TeXFormula formula){  this(parseString,formula,false);  this.isPartial=isPartial;  firstpass();}  }
class C{  public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:52.918 -0500",hash_original_method="C1B77E79BF2CF152F3FF34DFE43DC50B",hash_generated_method="6636A5B331B75E51FECFC6E1DA920798") public final boolean checkTag(int identifier){  return this.id == identifier || this.constrId == identifier;}  }
class C{  public static int testMonitor2Snippet(){  Integer x=new Integer(0);  Double y=new Double(0);  Object z=new Object();synchronized (x) {synchronized (y) {synchronized (z) {        notInlineable();        return x.intValue();      }    }  }}  }
class C{  public boolean isTrainEnRoute(){  return !getCurrentLocationName().equals(NONE) && getTrainDepartsRouteLocation() != getCurrentLocation();}  }
class C{  public NodeTextRep clone(){  NodeTextRep result=new NodeTextRep();  result.nodeText=new String[this.nodeText.length];  for (int i=0; i < result.nodeText.length; i++) {    result.nodeText[i]=this.nodeText[i];  }  result.mapping=null;  if (this.mapping != null) {    result.mapping=this.mapping.clone();    for (int i=0; i < result.mapping.length; i++) {      result.mapping[i]=new Vector<MappingPair>();      for (int j=0; j < this.mapping[i].size(); j++) {        result.mapping[i].add(this.mapping[i].elementAt(j).clone());      }    }  }  result.renaming=this.renaming.clone();  return result;}  }
class C{  public static int colorSpline(float x,int numKnots,int[] knots){  int span;  int numSpans=numKnots - 3;  float k0, k1, k2, k3;  float c0, c1, c2, c3;  if (numSpans < 1)   throw new IllegalArgumentException("Too few knots in spline");  x=clamp(x,0,1) * numSpans;  span=(int)x;  if (span > numKnots - 4)   span=numKnots - 4;  x-=span;  int v=0;  for (int i=0; i < 4; i++) {    int shift=i * 8;    k0=(knots[span] >> shift) & 0xff;    k1=(knots[span + 1] >> shift) & 0xff;    k2=(knots[span + 2] >> shift) & 0xff;    k3=(knots[span + 3] >> shift) & 0xff;    c3=m00 * k0 + m01 * k1 + m02 * k2 + m03 * k3;    c2=m10 * k0 + m11 * k1 + m12 * k2 + m13 * k3;    c1=m20 * k0 + m21 * k1 + m22 * k2 + m23 * k3;    c0=m30 * k0 + m31 * k1 + m32 * k2 + m33 * k3;    int n=(int)(((c3 * x + c2) * x + c1) * x + c0);    if (n < 0)     n=0; else     if (n > 255)     n=255;    v|=n << shift;  }  return v;}  }
class C{  public MinHash(final double error,final int dict_size,final long seed){  init(size(error),dict_size,new Random(seed));}  }
class C{  public String millis(){  return Long.toString(System.currentTimeMillis() / 1000L);}  }
class C{  static void simplify(ArrayList<PathParser.PathDataNode> from,ArrayList<PathParser.PathDataNode> to){  if (from.size() != to.size()) {    System.err.println("Cannot simplify lists of nodes of different sizes");    return;  }  System.out.println("Simplify lists with size " + from.size());  boolean removeIndexes[]=new boolean[from.size()];  int last=from.size() - 1;  for (int i=0; i < last; i++) {    if (from.get(i).isEqual(from.get(i + 1)) && to.get(i).isEqual(to.get(i + 1))) {      removeIndexes[i]=true;    }  }  Iterator iterators[]=new Iterator[]{from.iterator(),to.iterator()};  for (  Iterator it : iterators) {    int i=0;    while (it.hasNext()) {      it.next();      if (removeIndexes[i++])       it.remove();    }  }  System.out.println("Final size after simplify is " + from.size());}  }
class C{  public void clearLocations(){  super.removeElement(Where.KEY);}  }
class C{  protected List generateEventOffsets(){  this.baseMembershipId=EventID.getMembershipId(this.proxy.getTxMgr().getDM().getSystem());  this.baseThreadId=EventID.getThreadId();  this.baseSequenceId=EventID.getSequenceId();  List entries=getSortedEntries();  if (logger.isDebugEnabled()) {    logger.debug("generateEventOffsets() entries " + entries + " RegionState Map="+ this.regions);  }  Iterator it=entries.iterator();  while (it.hasNext()) {    TXEntryStateWithRegionAndKey o=(TXEntryStateWithRegionAndKey)it.next();    o.es.generateEventOffsets(this);  }  return entries;}  }
class C{  private boolean processOneRequest(InputStream in,OutputStream out,Socket socket) throws IOException, InterruptedException {  RecordedRequest request=readRequest(in,sequenceNumber);  if (request == null) {    return false;  }  MockResponse response=dispatch(request);  writeResponse(out,response);  if (response.getSocketPolicy() == SocketPolicy.DISCONNECT_AT_END) {    in.close();    out.close();  } else   if (response.getSocketPolicy() == SocketPolicy.SHUTDOWN_INPUT_AT_END) {    socket.shutdownInput();  } else   if (response.getSocketPolicy() == SocketPolicy.SHUTDOWN_OUTPUT_AT_END) {    socket.shutdownOutput();  }  sequenceNumber++;  return true;}  }
class C{  @Override public synchronized <T>void put(PropertyKey<T> key,@Nullable T value){  if (properties == null) {    if (value == null) {      return;    }    properties=new HashMap<>();  }  @SuppressWarnings("unchecked") PropertyKey<Object> k=(PropertyKey<Object>)key;  if (value != null) {    properties.put(k,value);  } else {    properties.remove(k);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:18.368 -0500",hash_original_method="D9B7EDD91437C9CF7E31BD236F25B8F3",hash_generated_method="069FA18CB3D91513A755E62D6A4898A5") private void measureAndAdjustDown(View child,int childIndex,int numChildren){  int oldHeight=child.getHeight();  measureItem(child);  if (child.getMeasuredHeight() != oldHeight) {    relayoutMeasuredItem(child);    final int heightDelta=child.getMeasuredHeight() - oldHeight;    for (int i=childIndex + 1; i < numChildren; i++) {      getChildAt(i).offsetTopAndBottom(heightDelta);    }  }}  }
class C{  public void printInfo(){}  }
class C{  public void firePropertyChange(String propertyName,int oldValue,int newValue){  firePropertyChange(propertyName,Integer.valueOf(oldValue),Integer.valueOf(newValue));}  }
class C{  protected void updateProgressBar(Integer position,long currentSize,long totalSize){  FileTransferProperties prop=mFileTransferAdapter.getItem(position);  prop.setStatus(Utils.getProgressLabel(currentSize,totalSize));  double progress=((double)currentSize / (double)totalSize) * 100.0;  prop.setProgress((int)progress);  mFileTransferAdapter.notifyDataSetChanged();}  }
class C{  public boolean hasMoreBlocks(){  return currentBlock < blocks.size() - 1;}  }
class C{  public boolean hasArg(){  return numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES;}  }
class C{  public boolean contains(int index){  return index >= getFirst() && index <= getLast();}  }
class C{  private boolean isInterleaved(ComponentSampleModel sm){  int numBands=sampleModel.getNumBands();  if (numBands == 1) {    return true;  }  int[] bankIndices=sm.getBankIndices();  for (int i=0; i < numBands; i++) {    if (bankIndices[i] != 0) {      return false;    }  }  int[] bandOffsets=sm.getBandOffsets();  int minOffset=bandOffsets[0];  int maxOffset=minOffset;  for (int i=1; i < numBands; i++) {    int offset=bandOffsets[i];    if (offset < minOffset) {      minOffset=offset;    }    if (offset > maxOffset) {      maxOffset=offset;    }  }  if (maxOffset - minOffset >= sm.getPixelStride()) {    return false;  }  return true;}  }
class C{  boolean isOrdered(){  return m_isOrdered;}  }
class C{  @Override public List<EvaluationStatistics> evaluate(MultiLabelClassifier classifier,Instances dataset){  List<EvaluationStatistics> result;  m_ActualNumThreads=ThreadUtils.getActualNumThreads(m_NumThreads,m_NumFolds);  log("Number of threads (" + ThreadUtils.SEQUENTIAL + " = sequential): "+ m_ActualNumThreads);  if (m_ActualNumThreads == ThreadUtils.SEQUENTIAL)   result=evaluateSequential(classifier,dataset); else   result=evaluateParallel(classifier,dataset);  if (m_Stopped)   result.clear();  return result;}  }
class C{  private void buildAndRunCollectorChain(QueryResult qr,Query query,Collector collector,QueryCommand cmd,DelegatingCollector postFilter) throws IOException {  EarlyTerminatingSortingCollector earlyTerminatingSortingCollector=null;  if (cmd.getSegmentTerminateEarly()) {    final Sort cmdSort=cmd.getSort();    final int cmdLen=cmd.getLen();    final Sort mergeSort=core.getSolrCoreState().getMergePolicySort();    if (cmdSort == null || cmdLen <= 0 || mergeSort == null || !EarlyTerminatingSortingCollector.canEarlyTerminate(cmdSort,mergeSort)) {      log.warn("unsupported combination: segmentTerminateEarly=true cmdSort={} cmdLen={} mergeSort={}",cmdSort,cmdLen,mergeSort);    } else {      collector=earlyTerminatingSortingCollector=new EarlyTerminatingSortingCollector(collector,cmdSort,cmd.getLen());    }  }  final boolean terminateEarly=cmd.getTerminateEarly();  if (terminateEarly) {    collector=new EarlyTerminatingCollector(collector,cmd.getLen());  }  final long timeAllowed=cmd.getTimeAllowed();  if (timeAllowed > 0) {    collector=new TimeLimitingCollector(collector,TimeLimitingCollector.getGlobalCounter(),timeAllowed);  }  if (postFilter != null) {    postFilter.setLastDelegate(collector);    collector=postFilter;  }  try {    super.search(query,collector);  } catch (  TimeLimitingCollector.TimeExceededException|ExitableDirectoryReader.ExitingReaderException x) {    log.warn("Query: [{}]; {}",query,x.getMessage());    qr.setPartialResults(true);  }catch (  EarlyTerminatingCollectorException etce) {    if (collector instanceof DelegatingCollector) {      ((DelegatingCollector)collector).finish();    }    throw etce;  } finally {    if (earlyTerminatingSortingCollector != null) {      qr.setSegmentTerminatedEarly(earlyTerminatingSortingCollector.terminatedEarly());    }  }  if (collector instanceof DelegatingCollector) {    ((DelegatingCollector)collector).finish();  }}  }
class C{  public DTLZ2(int numberOfVariables,int numberOfObjectives){  super(numberOfVariables,numberOfObjectives);}  }
class C{  public static SendableVideoMessageBuilder builder(){  return new SendableVideoMessageBuilder();}  }
class C{  public JSONWriter endArray() throws JSONException {  return this.end('a',']');}  }
class C{  public void testNoNamespaceThrowsException(){  String xPath="weblogic:app-deployment";  try {    util.selectElementMatchingXPath(xPath,testElement);    fail("should have thrown an exception");  } catch (  CargoException e) {    assertEquals("Cannot evaluate XPath: " + xPath,e.getMessage());  }}  }
class C{  protected void removeListaExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  logger.info("Inicio de removeListaExecuteLogic");  String id=request.getParameter(Constants.ID);  String name=request.getParameter("name");  if (StringUtils.isNotBlank(id)) {    StringBuffer idLista=new StringBuffer(id);    if (StringUtils.isNotBlank(name))     idLista.append("#").append(name);    if (!isListaDescriptoraEnUso(request,id)) {      ResultadoRegistrosVO res=getGestionDescripcionBI(request).deleteListasDescriptoras(new String[]{idLista.toString()});      if (!res.getErrores().isEmpty()) {        ActionErrors errores=obtenerErrores(request,true);        errores.add(res.getErrores());        goLastClientExecuteLogic(mapping,form,request,response);        return;      }    } else {      setReturnActionFordward(request,mapping.findForward("ver_lista_descriptora"));      return;    }  }  goBackExecuteLogic(mapping,form,request,response);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:43.546 -0500",hash_original_method="ABF871D717FCC2D87CA02E500CE54CBF",hash_generated_method="9AA95114BF009330E84F00F61CE83031") private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  int size=s.readInt();  allocateElements(size);  head=0;  tail=size;  for (int i=0; i < size; i++)   elements[i]=(E)s.readObject();}  }
class C{  public void d(Object str){  if (debug) {    if (logLevel <= Log.DEBUG) {      String name=getFunctionName();      if (name != null) {        Log.d(tag,name + "\n" + str+ "\n------------------------------------------------------------------------------");      } else {        Log.d(tag,str.toString());      }    }  }}  }
class C{  public void test_scheduleLjava_util_TimerTaskLjava_util_Date() throws Exception {  Timer t=null;  try {    t=new Timer();    TimerTestTask testTask=new TimerTestTask();    Date d=new Date(System.currentTimeMillis() + 100);    t.cancel();    try {      t.schedule(testTask,d);      fail("Scheduling a task after Timer.cancel() should throw exception");    } catch (    IllegalStateException expected) {    }    t=new Timer();    testTask=new TimerTestTask();    d=new Date(System.currentTimeMillis() + 100);    testTask.cancel();    try {      t.schedule(testTask,d);      fail("Scheduling a task after cancelling it should throw exception");    } catch (    IllegalStateException expected) {    }    t.cancel();    t=new Timer();    testTask=new TimerTestTask();    d=new Date(-100);    try {      t.schedule(testTask,d);      fail("Scheduling a task with negative date should throw IllegalArgumentException");    } catch (    IllegalArgumentException expected) {    }    t.cancel();    t=new Timer();    d=new Date(System.currentTimeMillis() + 100);    try {      t.schedule(null,d);      fail("Scheduling a null task should throw NullPointerException");    } catch (    NullPointerException expected) {    }    t.cancel();    t=new Timer();    testTask=new TimerTestTask();    try {      t.schedule(testTask,null);      fail("Scheduling a null date should throw NullPointerException");    } catch (    NullPointerException expected) {    }    t.cancel();    t=new Timer();    d=new Date(-100);    try {      t.schedule(null,d);      fail("Scheduling a null task with negative date should throw IllegalArgumentException first");    } catch (    IllegalArgumentException expected) {    }    t.cancel();    t=new Timer();    testTask=new TimerTestTask();    d=new Date(System.currentTimeMillis() + 200);    t.schedule(testTask,d);    awaitRun(testTask);    t.cancel();    t=new Timer();    testTask=new TimerTestTask();    testTask.incrementCount(true);    d=new Date(System.currentTimeMillis() + 100);    t.schedule(testTask,d);    testTask=new TimerTestTask();    testTask.incrementCount(true);    d=new Date(System.currentTimeMillis() + 150);    t.schedule(testTask,d);    testTask=new TimerTestTask();    testTask.incrementCount(true);    d=new Date(System.currentTimeMillis() + 70);    t.schedule(testTask,d);    testTask=new TimerTestTask();    testTask.incrementCount(true);    d=new Date(System.currentTimeMillis() + 10);    t.schedule(testTask,d);    Thread.sleep(400);    assertTrue("Multiple tasks should have incremented counter 4 times not " + timerCounter,timerCounter == 4);    t.cancel();  }  finally {    if (t != null)     t.cancel();  }}  }
class C{  public boolean testIsFinished(){synchronized (this) {    while (true) {      if (stopTest) {        return true;      } else {        try {          this.wait(60 * 1000);        } catch (        InterruptedException e) {          e.printStackTrace();        }      }    }  }}  }
class C{  public InMemoryMessageExchangeStore(final NetworkConfig config){  this(config,new InMemoryRandomTokenProvider(config));  LOGGER.log(Level.CONFIG,"using default TokenProvider {0}",InMemoryRandomTokenProvider.class.getName());}  }
class C{  public float textWidth(String str){  return g.textWidth(str);}  }
class C{  @Override public String toString(){  return displayName;}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){}  }
class C{  static void loadExternalConfigAndOverwriteMATSim4UrbanSimSettings(String externalMATSimConfigFileName,Config config) throws UncheckedIOException {  if (externalMATSimConfigFileName != null && Paths.pathExsits(externalMATSimConfigFileName)) {    log.info("Loading settings from external MATSim config: " + externalMATSimConfigFileName);    log.warn("NOTE: MATSim4UrbanSim settings will be overwritten by settings in the external config! Make sure that this is what you intended!");    new ConfigReader(config).readFile(externalMATSimConfigFileName);    log.info("... loading settings done!");  }}  }
class C{  public String generate(IStatusBar statusBar,KeyNamePair docTypeKNPair,String docActionSelected){  String info="";  String trxName=Trx.createTrxName("IVG");  Trx trx=Trx.get(trxName,true);  setSelectionActive(false);  statusBar.setStatusLine(Msg.getMsg(Env.getCtx(),"InvGenerateGen"));  statusBar.setStatusDB(String.valueOf(getSelection().size()));  int AD_Process_ID=0;  if (docTypeKNPair.getKey() == MRMA.Table_ID) {    AD_Process_ID=52002;  } else {    AD_Process_ID=134;  }  MPInstance instance=new MPInstance(Env.getCtx(),AD_Process_ID,0);  if (!instance.save()) {    info=Msg.getMsg(Env.getCtx(),"ProcessNoInstance");    return info;  }  StringBuffer insert=new StringBuffer();  insert.append("INSERT INTO T_SELECTION(AD_PINSTANCE_ID, T_SELECTION_ID) ");  int counter=0;  for (  Integer selectedId : getSelection()) {    counter++;    if (counter > 1)     insert.append(" UNION ");    insert.append("SELECT ");    insert.append(instance.getAD_PInstance_ID());    insert.append(", ");    insert.append(selectedId);    insert.append(" FROM DUAL ");    if (counter == 1000) {      if (DB.executeUpdate(insert.toString(),trxName) < 0) {        String msg="No Invoices";        info=msg;        log.config(msg);        trx.rollback();        return info;      }      insert=new StringBuffer();      insert.append("INSERT INTO T_SELECTION(AD_PINSTANCE_ID, T_SELECTION_ID) ");      counter=0;    }  }  if (counter > 0) {    if (DB.executeUpdate(insert.toString(),trxName) < 0) {      String msg="No Invoices";      info=msg;      log.config(msg);      trx.rollback();      return info;    }  }  ProcessInfo pi=new ProcessInfo("",AD_Process_ID);  pi.setAD_PInstance_ID(instance.getAD_PInstance_ID());  MPInstancePara para=new MPInstancePara(instance,10);  para.setParameter("Selection","Y");  if (!para.save()) {    String msg="No Selection Parameter added";    info=msg;    log.log(Level.SEVERE,msg);    return info;  }  para=new MPInstancePara(instance,20);  para.setParameter("DocAction",docActionSelected);  if (!para.save()) {    String msg="No DocAction Parameter added";    info=msg;    log.log(Level.SEVERE,msg);    return info;  }  setTrx(trx);  setProcessInfo(pi);  return info;}  }
class C{  public void onRowViewUpdate(NotificationBoard board,RowView rowView,NotificationEntry entry){  if (DBG)   Log.v(TAG,"onRowViewUpdate - " + entry.ID);  ImageView iconView=(ImageView)rowView.findViewById(R.id.icon);  TextView titleView=(TextView)rowView.findViewById(R.id.title);  TextView textView=(TextView)rowView.findViewById(R.id.text);  TextView whenView=(TextView)rowView.findViewById(R.id.when);  ProgressBar bar=(ProgressBar)rowView.findViewById(R.id.progress);  if (entry.iconDrawable != null) {    iconView.setImageDrawable(entry.iconDrawable);  } else   if (entry.smallIconRes != 0) {    iconView.setImageResource(entry.smallIconRes);  } else   if (entry.largeIconBitmap != null) {    iconView.setImageBitmap(entry.largeIconBitmap);  }  titleView.setText(entry.title);  textView.setText(entry.text);  if (entry.showWhen) {    whenView.setText(entry.whenFormatted);  }  if (entry.progressMax != 0 || entry.progressIndeterminate) {    bar.setVisibility(View.VISIBLE);    bar.setIndeterminate(entry.progressIndeterminate);    if (!entry.progressIndeterminate) {      bar.setMax(entry.progressMax);      bar.setProgress(entry.progress);    }  } else {    bar.setVisibility(View.GONE);  }}  }
class C{  public static float clamp(float value,float minValue,float maxValue){  return Math.max(minValue,Math.min(value,maxValue));}  }
class C{  public boolean pingEntity(String jid,long pingTimeout){  IQ result=ping(jid,pingTimeout);  if (result == null || result.getType() == IQ.Type.ERROR) {    return false;  }  pongReceived();  return true;}  }
class C{  public void copyChars(char[] text,int off,int len){  grow(len * UnicodeUtil.MAX_UTF8_BYTES_PER_CHAR);  ref.length=UnicodeUtil.UTF16toUTF8(text,off,len,ref.bytes);}  }
class C{  private static DetachISOResponse checkDetachISOResponse(DetachISOResponse detachISOResponse) throws RpcException {  logger.info("Checking {}",detachISOResponse);switch (detachISOResponse.getResult()) {case OK:    break;case ISO_NOT_ATTACHED:  logger.warn("detach_iso returned IsoNotAttachedException, response: {}",detachISOResponse);throw new IsoNotAttachedException(detachISOResponse.getError());case SYSTEM_ERROR:logger.warn("detach_iso returned SYSTEM_ERROR, response: {}",detachISOResponse);throw new SystemErrorException(detachISOResponse.getError());case VM_NOT_FOUND:logger.warn("detach_iso returned VmNotFoundException, response: {}",detachISOResponse);throw new VmNotFoundException(detachISOResponse.getError());default :throw new RpcException(String.format("Unknown result: %s",detachISOResponse.getResult()));}return detachISOResponse;}  }
class C{  public static void main(String[] args){  try {    Instances i;    if (args.length == 0) {      DataSource source=new DataSource(System.in);      i=source.getDataSet();      System.out.println(i.toSummaryString());    } else     if ((args.length == 1) && (!args[0].equals("-h")) && (!args[0].equals("help"))) {      DataSource source=new DataSource(args[0]);      i=source.getDataSet();      System.out.println(i.toSummaryString());    } else     if ((args.length == 3) && (args[0].toLowerCase().equals("merge"))) {      DataSource source1=new DataSource(args[1]);      DataSource source2=new DataSource(args[2]);      i=Instances.mergeInstances(source1.getDataSet(),source2.getDataSet());      System.out.println(i);    } else     if ((args.length == 3) && (args[0].toLowerCase().equals("append"))) {      DataSource source1=new DataSource(args[1]);      DataSource source2=new DataSource(args[2]);      String msg=source1.getStructure().equalHeadersMsg(source2.getStructure());      if (msg != null) {        throw new Exception("The two datasets have different headers:\n" + msg);      }      Instances structure=source1.getStructure();      System.out.println(source1.getStructure());      while (source1.hasMoreElements(structure)) {        System.out.println(source1.nextElement(structure));      }      structure=source2.getStructure();      while (source2.hasMoreElements(structure)) {        System.out.println(source2.nextElement(structure));      }    } else     if ((args.length == 3) && (args[0].toLowerCase().equals("headers"))) {      DataSource source1=new DataSource(args[1]);      DataSource source2=new DataSource(args[2]);      String msg=source1.getStructure().equalHeadersMsg(source2.getStructure());      if (msg == null) {        System.out.println("Headers match");      } else {        System.out.println("Headers don't match:\n" + msg);      }    } else     if ((args.length == 3) && (args[0].toLowerCase().equals("randomize"))) {      DataSource source=new DataSource(args[2]);      i=source.getDataSet();      i.randomize(new Random(Integer.parseInt(args[1])));      System.out.println(i);    } else {      System.err.println("\nUsage:\n" + "\tweka.core.Instances help\n" + "\t\tPrints this help\n"+ "\tweka.core.Instances <filename>\n"+ "\t\tOutputs dataset statistics\n"+ "\tweka.core.Instances merge <filename1> <filename2>\n"+ "\t\tMerges the datasets (must have same number of rows).\n"+ "\t\tGenerated dataset gets output on stdout.\n"+ "\tweka.core.Instances append <filename1> <filename2>\n"+ "\t\tAppends the second dataset to the first (must have same number of attributes).\n"+ "\t\tGenerated dataset gets output on stdout.\n"+ "\tweka.core.Instances headers <filename1> <filename2>\n"+ "\t\tCompares the structure of the two datasets and outputs whether they\n"+ "\t\tdiffer or not.\n"+ "\tweka.core.Instances randomize <seed> <filename>\n"+ "\t\tRandomizes the dataset and outputs it on stdout.\n");    }  } catch (  Exception ex) {    ex.printStackTrace();    System.err.println(ex.getMessage());  }}  }
class C{  public IJavaElement createElement(ClassScope scope,ICompilationUnit unit,HashSet existingElements,HashMap knownScopes){  return createElement(scope,scope.referenceContext.sourceStart,unit,existingElements,knownScopes);}  }
class C{  public void tableChanged(TableModelEvent e){  fireTableChanged(e);}  }
class C{  public boolean handleRemsetAddress(Address addr){  if (subspace.addressInRange(addr)) {    int index=subspace.getIndex(addr);    remsetStream.increment(index,(short)1);    this.totalRemset++;    return true;  } else {    return false;  }}  }
class C{  @Override public int hashCode(){  return this.name.hashCode();}  }
class C{  private final boolean checkJarForPackage(final JarFile jar){  Enumeration<JarEntry> jarEntries=jar.entries();  while (jarEntries.hasMoreElements()) {    JarEntry je=jarEntries.nextElement();    String entryName=je.getName();    if (entryName.startsWith(packageNameWithSlashes)) {      return true;    }  }  return false;}  }
class C{  public void done() throws IOException {  if (!initialStyles) {    writeInitialStyles();    initialStyles=true;  }  this.out.writeUBits(6,0);  this.out.flushBits();  if (shapeCount == 2) {    edgeOffsetTarget=(int)this.out.getBytesWritten();    fill0Index=-1;    fill1Index=-1;    lineIndex=-1;    moveXY=null;    outstandingChanges=true;    initialStyles=false;    shapeCount--;    return;  }  this.out.flush();  byte[] bytes=writer.bytes.toByteArray();  int edgeOffset=edgeOffsetTarget - edgeOffsetBase - 4;  byte[] offsetBytes=OutStream.uintTo4Bytes(edgeOffset);  bytes[edgeOffsetBase]=offsetBytes[0];  bytes[edgeOffsetBase + 1]=offsetBytes[1];  bytes[edgeOffsetBase + 2]=offsetBytes[2];  bytes[edgeOffsetBase + 3]=offsetBytes[3];  writer.out=null;  writer.bytes=null;  writer.tags.tag(writer.tagType,writer.longTag,bytes);}  }
class C{  public static Intent finishOtherTasksWithData(Uri data,int canonicalTaskId){  if (data == null || Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP)   return null;  String dataString=data.toString();  Context context=ApplicationStatus.getApplicationContext();  ActivityManager manager=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  List<ActivityManager.AppTask> tasksToFinish=new ArrayList<ActivityManager.AppTask>();  for (  ActivityManager.AppTask task : manager.getAppTasks()) {    RecentTaskInfo taskInfo=getTaskInfoFromTask(task);    if (taskInfo == null)     continue;    int taskId=taskInfo.id;    Intent baseIntent=taskInfo.baseIntent;    String taskData=baseIntent == null ? null : taskInfo.baseIntent.getDataString();    if (TextUtils.equals(dataString,taskData) && (taskId == -1 || taskId != canonicalTaskId)) {      tasksToFinish.add(task);    }  }  return finishAndRemoveTasks(tasksToFinish);}  }
class C{  public static void deleteAllHosts(int userId){  try {    sService.deleteAllHosts(userId);  } catch (  RemoteException e) {    throw new RuntimeException("system server dead?",e);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Attr attribute;  String namespaceURI="http://www.W3.org/2000/xmlns";  String qualifiedName="xmlns";  doc=(Document)load("staffNS",false);{    boolean success=false;    try {      attribute=doc.createAttributeNS(namespaceURI,qualifiedName);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("documentcreateattributeNS07",success);  }}  }
class C{  public Bindings add(String property,JTextComponent c){  registerPropertyChangeListener(c);  return add(new JTextComponentBinding(property,c,""));}  }
class C{  public static JLabel render(final JLabel l,Object value,final boolean isSelected,final boolean hasFocus){  l.setToolTipText(null);  if (value instanceof Boolean)   value=(Boolean)value ? LIcons.F_TICK : LIcons.F_CROSS;  if (value instanceof Icon) {    l.setIcon((Icon)value);    l.setText(null);  } else   if (value instanceof IRIcon) {    l.setIcon(((IRIcon)value).get());    l.setText(null);  } else {    if (value instanceof HasIcon) {      l.setIcon(((HasIcon)value).getIcon());    } else     if (value instanceof HasRIcon) {      final IRIcon ricon=((HasRIcon)value).getRicon();      l.setIcon(ricon == null ? null : ricon.get());    } else     l.setIcon(null);    if (value instanceof Number) {      if (value instanceof Double || value instanceof Float)       l.setText(LEnv.LANG.formatNumber(((Number)value).doubleValue(),2)); else       l.setText(LEnv.LANG.formatNumber(((Number)value).longValue()));    } else     if (value instanceof Date)     l.setText(LEnv.LANG.formatDateTime((Date)value)); else     if (value instanceof IPersonNameBean)     l.setText(LEnv.LANG.formatPersonName((IPersonNameBean)value)); else     if (value instanceof URL) {      l.setText(LUtils.htmlLinkText("mailto".equals(((URL)value).getProtocol()) ? ((URL)value).getPath() : value.toString()));      l.setToolTipText(LUtils.urlToolTip((URL)value));      final LRIcon ricon=LUtils.urlIcon((URL)value);      l.setIcon(ricon == null ? null : ricon.get());    }  }  return l;}  }
class C{  public NotificationChain basicSetReturnTypeRef(TypeRef newReturnTypeRef,NotificationChain msgs){  TypeRef oldReturnTypeRef=returnTypeRef;  returnTypeRef=newReturnTypeRef;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.FUNCTION_DECLARATION__RETURN_TYPE_REF,oldReturnTypeRef,newReturnTypeRef);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @Override public boolean hasWindowFocus(){  return mHijackFocus || super.hasWindowFocus();}  }
class C{  private static void updateGraphSettings(final GraphSettingsConfigItem graphSettings,final ZyGraphViewSettings settings){  graphSettings.setAutomaticLayouting(settings.getLayoutSettings().getAutomaticLayouting());  graphSettings.setProximityBrowsing(settings.getProximitySettings().getProximityBrowsing());  graphSettings.setProximityBrowsingThreshold(settings.getProximitySettings().getProximityBrowsingActivationThreshold());  graphSettings.setAutoLayoutDeactivationThreshold(settings.getLayoutSettings().getAutolayoutDeactivationThreshold());  graphSettings.setLayoutCalculationThreshold(settings.getLayoutSettings().getLayoutCalculationTimeWarningThreshold());  graphSettings.setVisibilityWarningThreshold(settings.getLayoutSettings().getVisibilityWarningTreshold());  graphSettings.setHierarchicMinimumLayerDistance(settings.getLayoutSettings().getHierarchicalSettings().getMinimumLayerDistance());  graphSettings.setHierarchicMinimumNodeDistance(settings.getLayoutSettings().getHierarchicalSettings().getMinimumNodeDistance());  graphSettings.setHierarchicMinimumEdgeDistance(settings.getLayoutSettings().getHierarchicalSettings().getMinimumEdgeDistance());  graphSettings.setHierarchicEdgeRoutingStyle(settings.getLayoutSettings().getHierarchicalSettings().getStyle().ordinal());  graphSettings.setHierarchicOrientation(settings.getLayoutSettings().getHierarchicalSettings().getOrientation().ordinal());  graphSettings.setOrthogonalMinimumNodeDistance(settings.getLayoutSettings().getOrthogonalSettings().getMinimumNodeDistance());  graphSettings.setOrthogonalLayoutStyle(settings.getLayoutSettings().getOrthogonalSettings().getStyle().ordinal());  graphSettings.setOrthogonalOrientation(settings.getLayoutSettings().getOrthogonalSettings().getOrientation().ordinal());  graphSettings.setCircularMinimumNodeDistance(settings.getLayoutSettings().getCircularSettings().getMinimumNodeDistance());  graphSettings.setCircularLayoutStyle(settings.getLayoutSettings().getCircularSettings().getStyle().ordinal());  graphSettings.setDefaultGraphLayout(settings.getLayoutSettings().getDefaultGraphLayout().ordinal());  graphSettings.setScrollSensitivity(settings.getMouseSettings().getScrollSensitivity());  graphSettings.setZoomSensitivity(settings.getMouseSettings().getZoomSensitivity());  graphSettings.setLayoutAnimation(settings.getLayoutSettings().getAnimateLayout());  graphSettings.setAnimationSpeed(settings.getDisplaySettings().getAnimationSpeed());  graphSettings.setGradientBackground(settings.getDisplaySettings().getGradientBackground());  graphSettings.setFunctionNodeInformation(settings.getDisplaySettings().getFunctionNodeInformation());  graphSettings.setAnimationSpeed(settings.getDisplaySettings().getAnimationSpeed());  graphSettings.setMouseWheelAction(settings.getMouseSettings().getMouseWheelAction().ordinal());  graphSettings.setProximityBrowsingChildren(settings.getProximitySettings().getProximityBrowsingChildren());  graphSettings.setProximityBrowsingParents(settings.getProximitySettings().getProximityBrowsingParents());  graphSettings.setEdgeHidingMode(settings.getEdgeSettings().getEdgeHidingMode().ordinal());  graphSettings.setEdgeHidingThreshold(settings.getEdgeSettings().getEdgeHidingThreshold());  graphSettings.setDrawBends(settings.getEdgeSettings().getDrawSelectedBends());}  }
class C{  Item newLong(final long value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(LONG).putLong(value);    result=new Item(index,key);    index+=2;    put(result);  }  return result;}  }
class C{  public boolean isSetDeleteRequest(){  return this.deleteRequest != null;}  }
class C{  protected void encodeElements(mxCodec enc,Object obj,Node node){  if (obj.getClass().isArray()) {    Object[] tmp=(Object[])obj;    for (int i=0; i < tmp.length; i++) {      encodeValue(enc,obj,null,tmp[i],node);    }  } else   if (obj instanceof Map) {    Iterator<Map.Entry> it=((Map)obj).entrySet().iterator();    while (it.hasNext()) {      Map.Entry e=it.next();      encodeValue(enc,obj,String.valueOf(e.getKey()),e.getValue(),node);    }  } else   if (obj instanceof Collection) {    Iterator it=((Collection)obj).iterator();    while (it.hasNext()) {      Object value=it.next();      encodeValue(enc,obj,null,value,node);    }  }}  }
class C{  public boolean insert(int val){  if (map.containsKey(val)) {    return false;  }  map.put(val,list.size());  list.add(val);  return true;}  }
class C{  public static boolean isOverlappingRoots(IPath rootPath1,IPath rootPath2){  if (rootPath1 == null || rootPath2 == null) {    return false;  }  return rootPath1.isPrefixOf(rootPath2) || rootPath2.isPrefixOf(rootPath1);}  }
class C{  protected boolean isEqualKey(Object key1,Object key2){  return (key1 == key2 || key1.equals(key2));}  }
class C{  public static boolean isFileExist(String filePath,FileType fileType,boolean performFileCheck) throws IOException {  filePath=filePath.replace("\\","/");switch (fileType) {case HDFS:case VIEWFS:    Path path=new Path(filePath);  FileSystem fs=path.getFileSystem(configuration);if (performFileCheck) {  return fs.exists(path) && fs.isFile(path);} else {  return fs.exists(path);}case LOCAL:default :File defaultFile=new File(filePath);if (performFileCheck) {return defaultFile.exists() && defaultFile.isFile();} else {return defaultFile.exists();}}}  }
class C{  @UiHandler("thirdChoiceButton") public void handleThirdChoiceClick(final ClickEvent event){  this.actionDelegate.thirdChoiceClicked();}  }
class C{  @Override public void run(){  amIActive=true;  String demHeader=null;  String upslopeAreaCreekHeader=null;  String outputHeader=null;  int numRows;  int numCols;  double elevation, elevationNeighbour;  int x, y;  double slope, maxSlope;  int flowDir;  int i;  List<StreamFlow> streamFlowList=new ArrayList<>();  List<StreamFlow> copyStreamFlowList;  StreamFlow streamFlow2;  List<Double> upstreamValues=new ArrayList<>();  float progress=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      demHeader=args[i];    } else     if (i == 1) {      upslopeAreaCreekHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((demHeader == null) || (upslopeAreaCreekHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    dem=new WhiteboxRaster(demHeader,"r");    upslopeAreaCreek=new WhiteboxRaster(upslopeAreaCreekHeader,"r");    numRows=dem.getNumberRows();    numCols=dem.getNumberColumns();    gridRes=dem.getCellSizeX();    medianUpstreamArea=new WhiteboxRaster(outputHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);    medianUpstreamArea.setPreferredPalette("blueyellow.pal");    medianUpstreamArea.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    medianUpstreamArea.setZUnits("dimensionless");    tmpDirectUpstreamCreekCellCount=new WhiteboxRaster(outputHeader.replace(".dep","_tmp1.dep"),"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);    tmpDirectUpstreamCreekCellCount.isTemporaryFile=true;    updateProgress("Loop 1 of 3:",0);    for (int row=0; row < numRows; row++) {      for (int col=0; col < numCols; col++) {        if (upslopeAreaCreek.getValue(row,col) == upslopeAreaCreek.getNoDataValue()) {          medianUpstreamArea.setValue(row,col,upslopeAreaCreek.getNoDataValue());        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 1 of 3:",(int)progress);    }    updateProgress("Loop 2 of 3:",0);    for (int row=0; row < numRows; row++) {      for (int col=0; col < numCols; col++) {        maxSlope=Double.MIN_VALUE;        flowDir=-1;        if (upslopeAreaCreek.getValue(row,col) > 0) {          elevation=dem.getValue(row,col);          for (int c=0; c < 8; c++) {            x=col + xd[c];            y=row + yd[c];            elevationNeighbour=dem.getValue(y,x);            if (upslopeAreaCreek.getValue(y,x) > 0 && elevationNeighbour < elevation) {              slope=(elevation - elevationNeighbour) / dd[c];              if (slope > maxSlope) {                maxSlope=slope;                flowDir=c;              }            }          }          for (int c=0; c < 8; c++) {            if (c == flowDir) {              x=col + xd[c];              y=row + yd[c];              tmpDirectUpstreamCreekCellCount.incrementValue(y,x,1);              streamFlowList.add(new StreamFlow(col,row,x,y,elevation));            }          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 2 of 3:",(int)progress);    }    streamFlowList=OrderStreamFlowList(streamFlowList);    copyStreamFlowList=new ArrayList<>(streamFlowList.subList(0,streamFlowList.size()));    updateProgress("Loop 3 of 3:",0);    for (    StreamFlow streamFlow : streamFlowList) {      i=streamFlowList.indexOf(streamFlow);      if (medianUpstreamArea.getValue(streamFlow.GetToY(),streamFlow.GetToX()) == 0) {        upstreamValues=new ArrayList<>();        FilterStreamFlowList(copyStreamFlowList,streamFlow);        MakeUpstreamList(copyStreamFlowList,streamFlow.GetToX(),streamFlow.GetToY(),upstreamValues);        Collections.sort(upstreamValues);        medianUpstreamArea.setValue(streamFlow.GetToY(),streamFlow.GetToX(),GetMedian(upstreamValues));        streamFlow2=streamFlow;        while ((tmpDirectUpstreamCreekCellCount.getValue(streamFlow2.GetToY(),streamFlow2.GetToX()) == 1) & (upstreamValues.size() > 2)) {          upstreamValues.remove(upslopeAreaCreek.getValue(streamFlow2.GetToY(),streamFlow2.GetToX()));          medianUpstreamArea.setValue(streamFlow2.GetFromY(),streamFlow2.GetFromX(),GetMedian(upstreamValues));          x=streamFlow2.GetFromX();          y=streamFlow2.GetFromY();          for (          StreamFlow tempStreamFlow : copyStreamFlowList) {            if (tempStreamFlow.GetToX() == x && tempStreamFlow.GetToY() == y) {              streamFlow2=tempStreamFlow;              break;            }          }        }        if (tmpDirectUpstreamCreekCellCount.getValue(streamFlow2.GetFromY(),streamFlow2.GetFromX()) == 0) {          x=streamFlow2.GetFromX();          y=streamFlow2.GetFromY();          medianUpstreamArea.setValue(y,x,upslopeAreaCreek.getValue(y,x));        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * (i + 1) / streamFlowList.size());      updateProgress("Loop 3 of 3:",(int)progress);    }    medianUpstreamArea.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    medianUpstreamArea.addMetadataEntry("Created on " + new Date());    dem.close();    upslopeAreaCreek.close();    medianUpstreamArea.close();    tmpDirectUpstreamCreekCellCount.close();    returnData(outputHeader);  } catch (  Exception e) {    showFeedback(e.getMessage());  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean rowInserted() throws SQLException {  checkCursor();  if (onInsertRow == true) {    throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.invalidop").toString());  }  return (((Row)getCurrentRow()).getInserted());}  }
class C{  public void walkGraph(Hashtable semNodesTable){  Integer uid=new Integer(myUID);  if (semNodesTable.get(uid) != null)   return;  semNodesTable.put(uid,this);  if (operator != null) {    operator.walkGraph(semNodesTable);  }  if (unboundedBoundSymbols != null && unboundedBoundSymbols.length > 0) {    for (int i=0; i < unboundedBoundSymbols.length; i++)     if (unboundedBoundSymbols[i] != null)     unboundedBoundSymbols[i].walkGraph(semNodesTable);  }  if (operands != null && operands.length > 0) {    for (int i=0; i < operands.length; i++)     if (operands[i] != null)     operands[i].walkGraph(semNodesTable);  }  if (ranges.length > 0) {    for (int i=0; i < ranges.length; i++)     if (ranges[i] != null)     ranges[i].walkGraph(semNodesTable);  }  if (boundedBoundSymbols != null && boundedBoundSymbols.length > 0) {    for (int i=0; i < boundedBoundSymbols.length; i++) {      if (boundedBoundSymbols[i] != null && boundedBoundSymbols[i].length > 0) {        for (int j=0; j < boundedBoundSymbols[i].length; j++) {          if (boundedBoundSymbols[i][j] != null)           boundedBoundSymbols[i][j].walkGraph(semNodesTable);        }      }    }  }}  }
class C{  public boolean isPrivateDnsRouteSet(){  return mPrivateDnsRouteSet.get();}  }
class C{  public PropertyAccessException(String message,Throwable cause){  super(message,cause);}  }
class C{  private void processPatch(DeleteVirtualNetworkWorkflowDocument state){  try {switch (state.taskState.subStage) {case CHECK_VM_EXISTENCE:      checkVmExistence(state);    break;case GET_NSX_CONFIGURATION:  getNsxConfiguration(state);break;case DELETE_LOGICAL_PORTS:deleteLogicalPorts(state);break;case DELETE_LOGICAL_ROUTER:deleteLogicalRouter(state);break;case DELETE_LOGICAL_SWITCH:deleteLogicalSwitch(state);break;case RELEASE_IP_ADDRESS_SPACE:releaseIpAddressSpace(state);break;case DELETE_NETWORK_ENTITY:deleteVirtualNetwork(state);break;}} catch (Throwable t) {fail(state,t);}}  }
class C{  public boolean understandsProperty(String propertyToTest){  return resolverSpi.understandsProperty(propertyToTest);}  }
class C{  public LUDecomposition(DoubleMatrix2D A){  quick=new LUDecompositionQuick(0);  quick.decompose(A.copy());}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static boolean isEmptyOrSpaces(@NotNull CharSequence text,int start,int end){  for (int i=start; i < end; i++) {    char c=text.charAt(i);    if (c != ' ' && c != '\t' && c != '\n') {      return false;    }  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:47.249 -0500",hash_original_method="B348DC5283F0EBC54D9A2FF780CFD084",hash_generated_method="188C7C000A6810285121AA6072D42B88") public RSeqParser(String rseq){  super(rseq);}  }
class C{  private void readObject(){}  }
class C{  public void connect(String dstName,int dstPort,int timeout) throws UnknownHostException, IOException, SocketTimeoutException {  if (DBG)   log("connect(dstName, dstPort, timeout) EX");}  }
class C{  private static CharSequence ensureValidName(Context context,Intent intent,CharSequence name){  if (name == null) {    try {      PackageManager pm=context.getPackageManager();      ActivityInfo info=pm.getActivityInfo(intent.getComponent(),0);      name=info.loadLabel(pm).toString();    } catch (    PackageManager.NameNotFoundException nnfe) {      return "";    }  }  return name;}  }
class C{  public void updateConfiguration(Configuration config,DisplayMetrics metrics){  updateConfiguration(config,metrics,null);}  }
class C{  @Override public void addHeader(String key,String value){  _conn.setRequestProperty(key,value);}  }
class C{  public static RawData inbound(byte[] data,InetSocketAddress address,Principal clientIdentity,CorrelationContext correlationContext,boolean isMulticast){  return new RawData(data,address,clientIdentity,correlationContext,isMulticast);}  }
class C{  public boolean connect(String accessToken) throws IOException {  if (callback != null) {    callback.start();  }  final Request request=new Request.Builder().url(url).addHeader("Connection","close").addHeader("Authorization","Bearer " + accessToken).build();  Response response=null;  try {    currentCall=client.newCall(request);    response=currentCall.execute();    final String boundary=getBoundary(response);    BufferedSource source=response.body().source();    Buffer buffer=new Buffer();    while (!source.exhausted()) {      source.read(buffer,8192);      AvsResponse val=new AvsResponse();      try {        val=ResponseParser.parseResponse(buffer.inputStream(),boundary,true);      } catch (      Exception exp) {        exp.printStackTrace();      }      if (callback != null) {        callback.success(val);      }    }  } catch (  IOException e) {    onError(callback,e);  } finally {    if (response != null) {      response.close();    }  }  return currentCall != null && currentCall.isCanceled();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case EipPackage.INVOCABLE_ENDPOINT__NAME:    setName(NAME_EDEFAULT);  return;case EipPackage.INVOCABLE_ENDPOINT__TO_CHANNELS:getToChannels().clear();return;case EipPackage.INVOCABLE_ENDPOINT__FROM_CHANNELS:getFromChannels().clear();return;case EipPackage.INVOCABLE_ENDPOINT__OWNED_SERVICE_INVOCATIONS:getOwnedServiceInvocations().clear();return;}super.eUnset(featureID);}  }
class C{  public boolean hasCache(){  final NodeVector nv=getVector();  return (nv != null);}  }
class C{  public void incrementSequence(){  Sequence sequence=getSequence();  if (sequence == null) {    setSequence(1);  } else {    sequence.increment();  }}  }
class C{  public void findAddress(View v){  animateAddFab(false);  mContactAddressMapper.startContactPicker(PICK_CONTACT_REQUEST);}  }
class C{  private static void clearAndRemoveQueue() throws IgniteException {  System.out.println("Queue size before clearing: " + queue.size());  queue.clear();  System.out.println("Queue size after clearing: " + queue.size());  queue.close();  try {    queue.poll();  } catch (  IllegalStateException expected) {    System.out.println("Expected exception - " + expected.getMessage());  }}  }
class C{  public String toJson(){  return JsonUtils.getSerializer().toJson(this);}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  processRequest(request,response);}  }
class C{  public SnippetInput[] toArray(){  return inputs.toArray(new SnippetInput[size()]);}  }
class C{  public static void sort(long[] array,int start,int end){  if (array == null) {    throw new NullPointerException();  }  checkBounds(array.length,start,end);  sort(start,end,array);}  }
class C{  String rrToString(){  StringBuffer sb=new StringBuffer();  sb.append(responsibleAddress);  sb.append(" ");  sb.append(errorAddress);  return sb.toString();}  }
class C{  public void startBridgeServer(int port) throws IOException {  startBridgeServer(port,CacheServer.DEFAULT_NOTIFY_BY_SUBSCRIPTION);}  }
class C{  @Override public void onChunkUnload(){  this.isChunkLoaded=false;  MinecraftForge.EVENT_BUS.post(new ChunkEvent.Unload(this));}  }
class C{  public TemplateModelException(String description,Throwable cause){  super(description,cause,null);}  }
class C{  static int mergeInhibitAnyPolicy(int inhibitAnyPolicy,X509CertImpl currCert) throws CertPathValidatorException {  if ((inhibitAnyPolicy > 0) && !X509CertImpl.isSelfIssued(currCert)) {    inhibitAnyPolicy--;  }  try {    InhibitAnyPolicyExtension inhAnyPolExt=(InhibitAnyPolicyExtension)currCert.getExtension(InhibitAnyPolicy_Id);    if (inhAnyPolExt == null)     return inhibitAnyPolicy;    int skipCerts=inhAnyPolExt.get(InhibitAnyPolicyExtension.SKIP_CERTS).intValue();    if (debug != null)     debug.println("PolicyChecker.mergeInhibitAnyPolicy() " + "skipCerts Index from cert = " + skipCerts);    if (skipCerts != -1) {      if (skipCerts < inhibitAnyPolicy) {        inhibitAnyPolicy=skipCerts;      }    }  } catch (  IOException e) {    if (debug != null) {      debug.println("PolicyChecker.mergeInhibitAnyPolicy " + "unexpected exception");      e.printStackTrace();    }    throw new CertPathValidatorException(e);  }  return inhibitAnyPolicy;}  }
class C{  public Boolean isNativeSnapshotSupported(){  return nativeSnapshotSupported;}  }
class C{  private void readSegmentIndex(ReadStream is,Segment10 segment) throws IOException {  int address=segment.length() - BLOCK_SIZE;  TempBuffer tBuf=TempBuffer.create();  byte[] buffer=tBuf.buffer();  is.position(address);  is.read(buffer,0,BLOCK_SIZE);  int tail=BitsUtil.readInt16(buffer,FOOTER_OFFSET);  if (tail < TABLE_KEY_SIZE + 8 || tail > BLOCK_SIZE - 8) {    return;  }  int offset=INDEX_OFFSET;  while (offset < tail) {    int type=buffer[offset++] & 0xff;    int pid=BitsUtil.readInt(buffer,offset);    offset+=4;    int nextPid=BitsUtil.readInt(buffer,offset);    offset+=4;    int entryAddress=BitsUtil.readInt(buffer,offset);    offset+=4;    int entryLength=BitsUtil.readInt(buffer,offset);    offset+=4;    if (pid <= 1) {      System.out.println("INVALID_PID: " + pid);      return;    }switch (PageType10.values()[type]) {case LEAF:      addLeaf(segment,pid,nextPid,entryAddress,entryLength);    break;case LEAF_DELTA:  addLeafDelta(segment,pid,nextPid,entryAddress,entryLength);break;default :System.out.println("UNKNOWN-SEGMENT: " + PageType10.values()[type]);}}}  }
class C{  public void focusLost(FocusEvent e){  commitChanges();}  }
class C{  public static long id(String key,String type) throws Exception {  JSONObject o=new JSONObject(file(home() + "/node/" + type+ "/id"+ path(hash(key))));  if (o.getString("key").equals(key))   return hash(key); else   throw new KeyFail("Root [" + type + "/"+ key+ "] not found!");}  }
class C{  protected void handleRuntimeException(RuntimeException err){  handleException(err);}  }
class C{  public void createConstraints(List<TableDefinition> tables,DatabaseSession session,JPAMSchemaManager schemaManager,boolean build){  buildConstraints(schemaManager,build);  for (  TableDefinition table : tables) {    try {      schemaManager.createUniqueConstraints(table);    } catch (    DatabaseException ex) {      if (!shouldIgnoreDatabaseException()) {        throw ex;      }    }  }  for (  TableDefinition table : tables) {    try {      schemaManager.createForeignConstraints(table);    } catch (    DatabaseException ex) {      if (!shouldIgnoreDatabaseException()) {        throw ex;      }    }  }}  }
class C{  public static String bind(String message){  return bind(message,null);}  }
class C{  public void commit() throws CommitConflictException {  checkClosed();  final TXStateProxy tx=getTXState();  if (tx == null) {    throw new IllegalStateException(LocalizedStrings.TXManagerImpl_THREAD_DOES_NOT_HAVE_AN_ACTIVE_TRANSACTION.toLocalizedString());  }  tx.checkJTA(LocalizedStrings.TXManagerImpl_CAN_NOT_COMMIT_THIS_TRANSACTION_BECAUSE_IT_IS_ENLISTED_WITH_A_JTA_TRANSACTION_USE_THE_JTA_MANAGER_TO_PERFORM_THE_COMMIT.toLocalizedString());  final long opStart=CachePerfStats.getStatTime();  final long lifeTime=opStart - tx.getBeginTime();  try {    setTXState(null);    tx.commit();  } catch (  CommitConflictException ex) {    saveTXStateForClientFailover(tx,TXCommitMessage.CMT_CONFLICT_MSG);    noteCommitFailure(opStart,lifeTime,tx);    cleanup(tx.getTransactionId());    throw ex;  }catch (  TransactionDataRebalancedException reb) {    saveTXStateForClientFailover(tx,TXCommitMessage.REBALANCE_MSG);    cleanup(tx.getTransactionId());    throw reb;  }catch (  UnsupportedOperationInTransactionException e) {    setTXState(tx);    throw e;  }catch (  RuntimeException e) {    saveTXStateForClientFailover(tx,TXCommitMessage.EXCEPTION_MSG);    cleanup(tx.getTransactionId());    throw e;  }  saveTXStateForClientFailover(tx);  cleanup(tx.getTransactionId());  noteCommitSuccess(opStart,lifeTime,tx);}  }
class C{  @SuppressWarnings("unchecked") public static void deleteAnnotationIfNeccessary(JavacNode annotation,Class<? extends Annotation> annotationType1,Class<? extends Annotation> annotationType2){  deleteAnnotationIfNeccessary0(annotation,annotationType1,annotationType2);}  }
class C{  public String[] queryUniqueIdentifiersForEntity(String entityType) throws InvalidArgument, InvalidSession, StorageFault {  final String methodName="queryUniqueIdentifiersForEntity(): ";  log.info(methodName + "Entry with entityType[" + entityType+ "]");  sslUtil.checkHttpRequest(true,true);  SOSManager sosManager=contextManager.getSOSManager();  List<String> returnIdArray=new ArrayList<String>();  try {    if (EntityTypeEnum.StorageProcessor.getValue().equals(entityType)) {      boolean supportsBlock=new Boolean(config.getConfigValue("config/service/storageTopology/storageArray/support-block-profile"));      if (!supportsBlock) {        log.error(methodName + "entity type [" + entityType+ "] is invalid since block profile is not supported");        throw FaultUtil.InvalidArgument("entity type [" + entityType + "] is invalid since block profile is not supported");      }    }    if (EntityTypeEnum.StorageFileSystem.getValue().equals(entityType)) {      boolean supportsFile=new Boolean(config.getConfigValue("config/service/storageTopology/storageArray/support-file-profile"));      if (!supportsFile) {        log.error(methodName + "entity type [" + entityType+ "] is invalid since file profile is not supported");        throw FaultUtil.InvalidArgument("entity type [" + entityType + "] is invalid since file profile is not supported");      }    }    if (EntityTypeEnum.StorageArray.getValue().equals(entityType)) {      sosManager.sync();      String storageArrayId=sosManager.getArrayId();      returnIdArray.add(storageArrayId);    } else     if (EntityTypeEnum.StorageProcessor.getValue().equals(entityType)) {      returnIdArray=Arrays.asList(sosManager.getStorageProcessorId());    } else     if (EntityTypeEnum.StoragePort.getValue().equals(entityType)) {      returnIdArray=sosManager.getStoragePortIds();    } else     if (EntityTypeEnum.StorageLun.getValue().equals(entityType)) {      returnIdArray=sosManager.getVolumeIds();    } else     if (EntityTypeEnum.StorageFileSystem.getValue().equals(entityType)) {      returnIdArray=sosManager.getFileSystemIds();    } else     if (EntityTypeEnum.StorageCapability.getValue().equals(entityType)) {      returnIdArray=sosManager.getCosIds(true);    } else {      log.error(methodName + "Invalid entity type: [" + entityType+ "]");      throw FaultUtil.InvalidArgument("Invalid entity type");    }  } catch (  InvalidArgument ia) {    log.error(methodName + "invalid argument",ia);    throw (ia);  }catch (  Exception e) {    log.error(methodName + "unknown exception occured",e);    handleExceptionsAsStorageFault(e);  }  log.info(methodName + "Exit returning number of entities[" + returnIdArray.size()+ "]");  return returnIdArray.toArray(new String[0]);}  }
class C{  @Override public void awake(){}  }
class C{  public void putUnknownHost(String hostname,String detailMessage){  cache.put(hostname,new AddressCacheEntry(detailMessage));}  }
class C{  boolean aboutEquals(float moduleSize,float i,float j){  if (Math.abs(i - getY()) <= moduleSize && Math.abs(j - getX()) <= moduleSize) {    float moduleSizeDiff=Math.abs(moduleSize - estimatedModuleSize);    return moduleSizeDiff <= 1.0f || moduleSizeDiff <= estimatedModuleSize;  }  return false;}  }
class C{  private boolean discardUpstreamMediaChunks(int queueLength){  if (mediaChunks.size() <= queueLength) {    return false;  }  long startTimeUs=0;  long endTimeUs=mediaChunks.getLast().endTimeUs;  BaseMediaChunk removed=null;  while (mediaChunks.size() > queueLength) {    removed=mediaChunks.removeLast();    startTimeUs=removed.startTimeUs;  }  sampleQueue.discardUpstreamSamples(removed.getFirstSampleIndex());  notifyUpstreamDiscarded(startTimeUs,endTimeUs);  return true;}  }
class C{  public void writeField(String name,String value) throws IOException {  if (name == null) {    throw new IllegalArgumentException("Name cannot be null or empty.");  }  out.writeBytes(PREFIX);  out.writeBytes(boundary);  out.writeBytes(NEWLINE);  out.writeBytes("Content-Disposition: form-data; name=\"" + name + "\"");  out.writeBytes(NEWLINE);  out.writeBytes(NEWLINE);  if (value != null) {    out.writeBytes(value);  }  out.writeBytes(NEWLINE);  out.flush();}  }
class C{  public void addNode(SimpleTreeNode newNode){  SimpleTreeNode root=(SimpleTreeNode)getRoot();  root.getChildren().add(newNode);  fireEvent(root,root.getChildCount() - 1,root.getChildCount() - 1,TreeDataEvent.INTERVAL_ADDED);}  }
class C{  public static Value JavaTime(){  int t=(int)System.currentTimeMillis();  return IntValue.gen(t & 0x7FFFFFFF);}  }
class C{  @Override public void run(){synchronized (this) {    pending=null;  }  SolrQueryRequest req=new LocalSolrQueryRequest(core,new ModifiableSolrParams());  try {    CommitUpdateCommand command=new CommitUpdateCommand(req,false);    command.openSearcher=openSearcher;    command.waitSearcher=waitSearcher;    command.softCommit=softCommit;    autoCommitCount.incrementAndGet();    core.getUpdateHandler().commit(command);  } catch (  Exception e) {    SolrException.log(log,"auto commit error...",e);  } finally {    req.close();  }}  }
class C{  public void putLST(String libname,LibrarySelectionTable lst){  lib_lstmap.put(libname,lst);}  }
class C{  public static Comparator<String> caseInsensitiveStringComparator(){  return CASE_INSENSITIVE_STRING_COMPARATOR;}  }
class C{  private static JLabel createLabel(final String string){  final JLabel label=new JLabel(string);  label.setBorder(new EmptyBorder(5,5,5,5));  return label;}  }
class C{  public Nothing(){}  }
class C{  public static int log2(long arg){  if (arg <= 0)   throw new IllegalArgumentException("log2() requires positive number!");  return 63 - Long.numberOfLeadingZeros(arg);}  }
class C{  public void receiveResultregisterVASACertificate(com.emc.storageos.vasa.VasaServiceStub.RegisterVASACertificateResponse result){}  }
class C{  public final void yyreset(java.io.Reader reader){  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  public void flushCaretShift(){  mySavedCaretShift=-1;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:47.398 -0500",hash_original_method="F09D38B717E770EDAB76B08B81548137",hash_generated_method="F09D38B717E770EDAB76B08B81548137") EmulatedFields emulatedFields(){  return emulatedFields;}  }
class C{  public void addCompareCol(int sortCol,Comparator comparator){  sortCols.add(new ArrayElementComparator(sortCol,comparator));}  }
class C{  protected void release(){  File file=new File(DriverActionCalled);  try {    file.createNewFile();  } catch (  IOException ex) {    throw new RuntimeException(ex);  }}  }
class C{  public RemoteSageFile(String hostname,File file,boolean forceActive) throws IOException {  this(hostname,file.getPath(),forceActive);}  }
class C{  @Override public void editPaste(){}  }
class C{  public void update(User user,String localUsername){  if (currentUser == user && isVisible()) {    setUser(user,localUsername);  }}  }
class C{  public <T extends DataObject>Iterator<T> iterator(String alias){  JClass jc=lookupAlias(alias);  return jc.iterator(engine);}  }
class C{  @Override public boolean isDirectory(){  return false;}  }
class C{  public Builder addFormDataPart(String name,String value){  return addPart(Part.createFormData(name,value));}  }
class C{  public void doMouseClicked(java.awt.event.MouseEvent e){  if (!_editor.getFlag(Editor.OPTION_CONTROLS,isControlling())) {    return;  }  if (e.isMetaDown() || e.isAltDown()) {    return;  }  if (light == null) {    log.error("No light connection, can't process click");    return;  }  if (log.isDebugEnabled()) {    log.debug("doMouseClicked state= " + light.getState());  }  if (light.getState() == jmri.Light.OFF) {    light.setState(jmri.Light.ON);  } else {    light.setState(jmri.Light.OFF);  }}  }
class C{  public void paintFigure(Graphics graphics,Rectangle paintArea,ResourceManager manager,RGB background){  graphics.setAdvanced(true);  graphics.setAntialias(SWT.ON);  graphics.translate(paintArea.x,paintArea.y);  Dimension svgImageSize=getSize();  graphics.scale(((float)paintArea.width) / svgImageSize.width,((float)paintArea.height) / svgImageSize.height);  boolean isNewManager=false;  if (manager == null) {    manager=new LocalResourceManager(JFaceResources.getResources());    isNewManager=true;  }  if (background != null) {    graphics.pushState();    graphics.setBackgroundColor(manager.createColor(background));    graphics.fillRectangle(0,0,svgImageSize.width,svgImageSize.height);    graphics.popState();  }  setResourceManager(manager);  paint(graphics,Display.getDefault());  if (isNewManager)   manager.dispose();}  }
class C{  public static String format(Locale loc,String format,Object... args){  if (format == null) {    throw new NullPointerException("null format argument");  }  int bufferSize=format.length() + (args == null ? 0 : args.length * 10);  Formatter f=new Formatter(new StringBuilder(bufferSize),loc);  return f.format(format,args).toString();}  }
class C{  public static String hashMap2String(HashMap<String,String> params){  StringBuilder st=new StringBuilder();  for (  String key : params.keySet()) {    st.append(key).append("=").append(params.get(key)).append("&");  }  st.deleteCharAt(st.lastIndexOf("&"));  return st.toString();}  }
class C{  private void resetInputActionIndices(){  mPinch0TabIndex=-1;  mPinch1TabIndex=-1;  mScrollingTab=null;  mDiscardingTab=null;  mLongPressSelected=-1;}  }
class C{  private byte[] hexStringToByteArray(String hexString){  int len=hexString.length();  byte[] data=new byte[len / 2];  for (int i=0; i < len; i+=2) {    data[i / 2]=(byte)((Character.digit(hexString.charAt(i),16) << 4) + Character.digit(hexString.charAt(i + 1),16));  }  return data;}  }
class C{  public void test_read_writeDouble() throws IOException {  RandomAccessFile raf=new java.io.RandomAccessFile(fileName,"rw");  raf.writeDouble(Double.MAX_VALUE);  raf.writeDouble(424242.4242);  raf.seek(0);  assertEquals("Test 1: Incorrect value written or read;",Double.MAX_VALUE,raf.readDouble());  assertEquals("Test 2: Incorrect value written or read;",424242.4242,raf.readDouble());  try {    raf.readDouble();    fail("Test 3: EOFException expected.");  } catch (  EOFException e) {  }  raf.close();  try {    raf.writeDouble(Double.MIN_VALUE);    fail("Test 4: IOException expected.");  } catch (  IOException e) {  }  try {    raf.readDouble();    fail("Test 5: IOException expected.");  } catch (  IOException e) {  }}  }
class C{  public GraphicsNodeMouseWheelEvent(GraphicsNode source,int id,long when,int modifiers,int lockState,int wheelDelta){  super(source,id,when,modifiers,lockState);  this.wheelDelta=wheelDelta;}  }
class C{  private void cancelAnimation(){  if (mStateAnimator != null) {    mStateAnimator.setDuration(0);    mStateAnimator.cancel();  }  mStateAnimator=null;}  }
class C{  public SearchableTextAreaPanel(JTextArea textArea){  this(textArea,false);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.822 -0400",hash_original_method="6B587AAF95AB16F29075A6F84F0CB503",hash_generated_method="2AA0CBCCEA11688643A1435A2354678F") public SizeFileFilter(long size,boolean acceptLarger){  if (size < 0) {    throw new IllegalArgumentException("The size must be non-negative");  }  this.size=size;  this.acceptLarger=acceptLarger;}  }
class C{  public void fillData(int leftResId,int stringResId,boolean useChevron){  fillData(leftResId,getResources().getString(stringResId),useChevron);}  }
class C{  ZipEntry(){}  }
class C{  public double distanceSq(final Int3D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  final double dz=(double)this.z - p.z;  return (dx * dx + dy * dy + dz * dz);}  }
class C{  public SampleReader(Reader reader,ParameterFile parameterFile){  this(new MatrixReader(reader,parameterFile.size()),parameterFile);}  }
class C{  public double bps(final Leg cashflows,final InterestRate irr,Date settlementDate){  if (settlementDate.isNull()) {    settlementDate=new Settings().evaluationDate();  }  final YieldTermStructure flatRate=new FlatForward(settlementDate,irr.rate(),irr.dayCounter(),irr.compounding(),irr.frequency());  return bps(cashflows,new Handle<YieldTermStructure>(flatRate),settlementDate,settlementDate);}  }
class C{  public void paintRadioButtonMenuItemBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public boolean isFullyConnected(){  for (  Node n : syncManager.getClusterConfig().getNodes()) {    if (n.getNodeId() != syncManager.getLocalNodeId() && !isConnected(n.getNodeId())) {      if (logger.isTraceEnabled()) {        logger.trace("[{}->{}] missing connection",syncManager.getLocalNodeId(),n.getNodeId());      }      return false;    }  }  return true;}  }
class C{  public static ArrayModifiableDBIDs newArray(DBIDs existing){  return DBIDFactory.FACTORY.newArray(existing);}  }
class C{  public static void insertEmptyData(ByteBuffer buffer,int len){  byte[] buf=buffer.array();  int pos=buffer.position();  int limit=buffer.limit();  System.arraycopy(buf,pos,buf,pos + len,limit - pos);  Arrays.fill(buf,pos,pos + len,(byte)0);  buffer.limit(limit + len);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:30.225 -0500",hash_original_method="ABF4FE035C950AC910A646D4B85E3F35",hash_generated_method="1422248BBCC1B2BAF9351E8A3DC0A5BE") @Override public long longValue(){  return value;}  }
class C{  public WordBreakSpellChecker(){}  }
class C{  public ISchedulingRule moveRule(IResource source,IResource destination){  return MultiRule.combine(parent(source),parent(destination));}  }
class C{  @Override public void actionPerformed(ActionEvent event){  String group=null;  if (Beans.hasProperty(wi,RosterGroupSelector.SELECTED_ROSTER_GROUP)) {    group=(String)Beans.getProperty(wi,RosterGroupSelector.SELECTED_ROSTER_GROUP);  }  if (group == null) {    group=(String)JOptionPane.showInputDialog(_who,"<html><b>Delete roster group</b><br>Roster entries in the group are not deleted.</html>","Delete Roster Group",JOptionPane.INFORMATION_MESSAGE,null,Roster.getDefault().getRosterGroupList().toArray(),null);  }  if (group == null || group.equals(Roster.ALLENTRIES)) {    return;  }  if (!userOK(group)) {    return;  }  Roster.getDefault().delRosterGroupList(group);  Roster.getDefault().writeRoster();}  }
class C{  public SearchRequest routing(String... routings){  this.routing=Strings.arrayToCommaDelimitedString(routings);  return this;}  }
class C{  public static boolean isSimilar(final String str1,final String str2,final double delta){  if ((str1 == null) || (str2 == null)) {    return (str1 == null) && (str2 == null);  }  final int len1=str1.length();  final int len2=str2.length();  if ((len1 == 0) || (len2 == 0)) {    return len1 == len2;  }  final int shorterLength=Math.min(len1,len2);  final int limit=(int)((shorterLength * delta * shorterLength + (shorterLength - 1)) / shorterLength);  return compareLevenshtein(str1,str2,limit);}  }
class C{  public int nameIndex(int i){  return ByteArray.readU16bit(info,i * 10 + 6);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static String createContact(String firstName,String familyName,String workPhone,String homePhone,String mobilePhone,String email){  return Display.getInstance().createContact(firstName,familyName,workPhone,homePhone,mobilePhone,email);}  }
class C{  public void addToSpriteGroup(BoneGroupSprite sprite){  for (  String name : sprite.getSpriteMap().keySet()) {    addToSpriteGroup(sprite.getBoneSprite(name));  }}  }
class C{  private ServiceRequestBuffer createDefaultStatsSRB(FbService service){  return createStatsSRB(service,0);}  }
class C{  static public String randomPositiveWhole(int length){  if (length == 0) {    return "";  }  StringBuilder output=new StringBuilder(length);  output.append(rnd.nextInt(8) + 1);  for (int i=0; i < length - 1; i++) {    output.append(rnd.nextInt(9));  }  return output.toString();}  }
class C{  private StringBuffer format(BigInteger number,StringBuffer result,FieldDelegate delegate,boolean formatLong){  if (multiplier != 1) {    number=number.multiply(getBigIntegerMultiplier());  }  boolean isNegative=number.signum() == -1;  if (isNegative) {    number=number.negate();  }synchronized (digitList) {    int maxIntDigits, minIntDigits, maxFraDigits, minFraDigits, maximumDigits;    if (formatLong) {      maxIntDigits=super.getMaximumIntegerDigits();      minIntDigits=super.getMinimumIntegerDigits();      maxFraDigits=super.getMaximumFractionDigits();      minFraDigits=super.getMinimumFractionDigits();      maximumDigits=maxIntDigits + maxFraDigits;    } else {      maxIntDigits=getMaximumIntegerDigits();      minIntDigits=getMinimumIntegerDigits();      maxFraDigits=getMaximumFractionDigits();      minFraDigits=getMinimumFractionDigits();      maximumDigits=maxIntDigits + maxFraDigits;      if (maximumDigits < 0) {        maximumDigits=Integer.MAX_VALUE;      }    }    digitList.set(isNegative,number,useExponentialNotation ? maximumDigits : 0);    return subformat(result,delegate,isNegative,true,maxIntDigits,minIntDigits,maxFraDigits,minFraDigits);  }}  }
class C{  public void testDouble() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(new DoubleDocValuesField("value",30.1));  doc.add(newStringField("value","30.1",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new DoubleDocValuesField("value",-1.3));  doc.add(newStringField("value","-1.3",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new DoubleDocValuesField("value",4.2333333333333));  doc.add(newStringField("value","4.2333333333333",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new DoubleDocValuesField("value",4.2333333333332));  doc.add(newStringField("value","4.2333333333332",Field.Store.YES));  writer.addDocument(doc);  IndexReader ir=writer.getReader();  writer.close();  IndexSearcher searcher=newSearcher(ir);  Sort sort=new Sort(new SortField("value",SortField.Type.DOUBLE));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(4,td.totalHits);  assertEquals("-1.3",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("4.2333333333332",searcher.doc(td.scoreDocs[1].doc).get("value"));  assertEquals("4.2333333333333",searcher.doc(td.scoreDocs[2].doc).get("value"));  assertEquals("30.1",searcher.doc(td.scoreDocs[3].doc).get("value"));  ir.close();  dir.close();}  }
class C{  public void drawTextBox(){  if (getVisible()) {    if (getEnableBackgroundDrawing()) {      drawRect(xPosition - 1,yPosition - 1,xPosition + width + 1,yPosition + height + 1,-6250336);      drawRect(xPosition,yPosition,xPosition + width,yPosition + height,-16777216);    }    int var1=isEnabled ? enabledColor : disabledColor;    int var2=cursorPosition - lineScrollOffset;    int var3=selectionEnd - lineScrollOffset;    String var4=fontRendererInstance.trimStringToWidth(text.substring(lineScrollOffset),getWidth());    boolean var5=var2 >= 0 && var2 <= var4.length();    boolean var6=isFocused && cursorCounter / 6 % 2 == 0 && var5;    int var7=enableBackgroundDrawing ? xPosition + 4 : xPosition;    int var8=enableBackgroundDrawing ? yPosition + (height - 8) / 2 : yPosition;    int var9=var7;    if (var3 > var4.length())     var3=var4.length();    if (var4.length() > 0) {      String var10=var5 ? var4.substring(0,var2) : var4;      var9=fontRendererInstance.drawStringWithShadow(var10,var7,var8,var1);    }    boolean var13=cursorPosition < text.length() || text.length() >= getMaxStringLength();    int var11=var9;    if (!var5)     var11=var2 > 0 ? var7 + width : var7; else     if (var13) {      var11=var9 - 1;      --var9;    }    if (var4.length() > 0 && var5 && var2 < var4.length())     var9=fontRendererInstance.drawStringWithShadow(var4.substring(var2),var9,var8,var1);    if (var6)     if (var13)     Gui.drawRect(var11,var8 - 1,var11 + 1,var8 + 1 + fontRendererInstance.FONT_HEIGHT,-3092272); else     fontRendererInstance.drawStringWithShadow("_",var11,var8,var1);    if (var3 != var2) {      int var12=var7 + fontRendererInstance.getStringWidth(var4.substring(0,var3));      drawCursorVertical(var11,var8 - 1,var12 - 1,var8 + 1 + fontRendererInstance.FONT_HEIGHT);    }  }}  }
class C{  public SUBSubtitleHandler(sage.media.format.ContainerFormat inFormat){  super(inFormat);}  }
class C{  protected void adjustBoundsForIcon(JInternalFrame.JDesktopIcon icon,int x,int y){  JDesktopPane c=icon.getDesktopPane();  int maxy=c.getHeight();  int w=iconWidth;  int h=iconHeight;  c.repaint(x,y,w,h);  x=x < 0 ? 0 : x;  y=y < 0 ? 0 : y;  y=y >= maxy ? (maxy - 1) : y;  int lx=(x / w) * w;  int ygap=maxy % h;  int ly=((y - ygap) / h) * h + ygap;  int dx=x - lx;  int dy=y - ly;  x=dx < w / 2 ? lx : lx + w;  y=dy < h / 2 ? ly : ((ly + h) < maxy ? ly + h : ly);  while (getIconAt(c,icon,x,y) != null) {    x+=w;  }  if (x > c.getWidth()) {    return;  }  if (icon.getParent() != null) {    setBoundsForFrame(icon,x,y,w,h);  } else {    icon.setLocation(x,y);  }}  }
class C{  public void invertedX(boolean v){  invertedX=v;}  }
class C{  public void visitJumpInsn(int opcode,Label label){  if (mv != null) {    mv.visitJumpInsn(opcode,label);  }}  }
class C{  public boolean isRegisterCustomerForSupplierPending(VOUserDetails user){  ArgumentValidator.notNull("user",user);  Query query=ds.createNamedQuery("TriggerProcessIdentifier.isRegisterCustomerForSupplierPending");  query.setParameter("pendingStates",TriggerProcess.getUnfinishedStatus());  query.setParameter("triggerType",TriggerType.REGISTER_CUSTOMER_FOR_SUPPLIER);  query.setParameter("userIdName",TriggerProcessIdentifierName.USER_ID);  query.setParameter("userId",user.getUserId());  query.setParameter("userEmailName",TriggerProcessIdentifierName.USER_EMAIL);  query.setParameter("userEmail",user.getEMail());  return ((Long)query.getSingleResult()).longValue() > 0;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.FUNCTION_DEFINITION__DEFINED_TYPE:    if (resolve)     return getDefinedType();  return basicGetDefinedType();case N4JSPackage.FUNCTION_DEFINITION__FPARS:return getFpars();case N4JSPackage.FUNCTION_DEFINITION__RETURN_TYPE_REF:return getReturnTypeRef();case N4JSPackage.FUNCTION_DEFINITION__GENERATOR:return isGenerator();case N4JSPackage.FUNCTION_DEFINITION__DECLARED_ASYNC:return isDeclaredAsync();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean isExternal(Resource input){  return externalResources.contains(input);}  }
class C{  public SkypeBuilder withLogger(Logger logger){  this.customLogger=logger;  return this;}  }
class C{  public BasicBlock allocateBasicBlock(){  return cfgSub.allocate();}  }
class C{  protected void cleanStationsAndNetwork(){  log.info("Clean Stations and Network...");  cleanSchedule();  removeNonUsedStopFacilities();  cleanModes();  removeNonUsedLinks();  log.info("Clean Stations and Network... done.");}  }
class C{  public InstrumentedAlgorithm(Algorithm algorithm,int frequency){  super(algorithm,frequency,FrequencyType.EVALUATIONS);  accumulator=new Accumulator();  collectors=new ArrayList<Collector>();}  }
class C{  @Override public void close() throws IOException {  closed=true;  scanner.close();  reader.close();  fsdis.close();}  }
class C{  public Output compileString(String string,Options options) throws CompilationException {  return compileString(string,null,null,options);}  }
class C{  public void clear(){  this.inBytes.set(0L);  this.inMsgs.set(0L);  this.outBytes.set(0L);  this.outMsgs.set(0L);  this.flushes.set(0L);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  private void handleHtmlDoOnlineDbBackup(RequestAndResponse requestAndResponse) throws IOException, ServletException {  final String csrft=requestAndResponse.getParameter("csrft");  final PageWrapper pageWrapper=new PageWrapper(requestAndResponse,servletText.pageTitleOnlineBackupDb(),true).setPaneId("onlineBackup");  pageWrapper.addHeader();  if (isTheCsrftWrong(requestAndResponse,csrft)) {    requestAndResponse.print(servletText.errorRequiresSignIn(false));  } else   if (!isUserAnAdmin(requestAndResponse)) {    requestAndResponse.print(servletText.errorPageNotAllowed());  } else {    final String destination=getDbBackupDestination().getPath();    final int numRowsExtracted=dbLogic.doCsvDbBackup(destination);    if (numRowsExtracted != -1) {      requestAndResponse.print(servletText.sentenceOnlineDbBackupWasSuccessful(numRowsExtracted));    } else {      requestAndResponse.print(servletText.sentenceOnlineDbBackupWasNotSuccessful());    }  }  pageWrapper.addFooter();}  }
class C{  public JSONObject(){  this.map=new HashMap<String,Object>();}  }
class C{  @Override public TaxReceiptArchive findById(TaxReceiptArchive entity) throws DataAccessException {  if (!entity.getId().trim().isEmpty()) {    return dynamoDBMapper.load(getType(),entity.getId());  } else {    return null;  }}  }
class C{  public void testValueOfLongMax(){  long longVal=Long.MAX_VALUE;  BigInteger aNumber=BigInteger.valueOf(longVal);  byte rBytes[]={127,-1,-1,-1,-1,-1,-1,-1};  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,aNumber.signum());}  }
class C{  public boolean equals(Object otherObj){  if (!(otherObj instanceof DoubleArrayList))   return super.equals(otherObj);  if (this == otherObj)   return true;  if (otherObj == null)   return false;  DoubleArrayList other=(DoubleArrayList)otherObj;  if (size() != other.size())   return false;  double[] theElements=elements();  double[] otherElements=other.elements();  for (int i=size(); --i >= 0; ) {    if (theElements[i] != otherElements[i])     return false;  }  return true;}  }
class C{  public static boolean isEquals(String actual,String expected){  return ObjectUtils.isEquals(actual,expected);}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  public static void copy(Resource in,OutputStream os,boolean closeOS) throws IOException {  InputStream is=null;  try {    is=toBufferedInputStream(in.getInputStream());  } catch (  IOException ioe) {    IOUtil.closeEL(is);    throw ioe;  }  copy(is,os,true,closeOS);}  }
class C{  @Override public void put(NumberVector val,double weight){  assert (val.getDimensionality() == elements.length);  if (weight == 0) {    return;  }  final double nwsum=weight + wsum;  for (int i=BitsUtil.nextSetBit(dims,0); i >= 0; i=BitsUtil.nextSetBit(dims,i + 1)) {    final double delta=val.doubleValue(i) - elements[i];    final double rval=delta * weight / nwsum;    elements[i]+=rval;  }  wsum=nwsum;}  }
class C{  public void onInputEvent(InputEvent event,int policyFlags){  sendInputEvent(event,policyFlags);}  }
class C{  public CompiledScript compile(final Reader script,final String language) throws ScriptException {  if (!scriptEngines.containsKey(language))   throw new IllegalArgumentException("Language [%s] not supported");  awaitControlOp();  final ScriptEngine scriptEngine=scriptEngines.get(language);  if (scriptEngine instanceof Compilable)   throw new UnsupportedOperationException(String.format("ScriptEngine for %s does not implement %s",language,Compilable.class.getName()));  final Compilable compilable=(Compilable)scriptEngine;  return compilable.compile(script);}  }
class C{  public static <K,V>ImmutableList<ImmutableMap<K,V>> partitionMap(Map<K,V> map,int size){  ImmutableList.Builder<ImmutableMap<K,V>> shards=new ImmutableList.Builder<>();  for (  Iterable<Map.Entry<K,V>> entriesShard : partition(map.entrySet(),size)) {    shards.add(ImmutableMap.copyOf(entriesShard));  }  return shards.build();}  }
class C{  private void checkPuts(int cnt,Ignite... ignites) throws Exception {  CountDownLatch latch=new CountDownLatch(ignites.length * cnt);  CacheEventListener lsnr=new CacheEventListener(latch,EVT_CACHE_OBJECT_PUT);  for (  Ignite ignite : ignites)   addListener(ignite,lsnr);  IgniteCache<Integer,String> cache1=ignites[0].cache(null);  for (int i=1; i <= cnt; i++)   cache1.put(i,"val" + i);  for (int i=1; i <= cnt; i++) {    String v=cache1.get(i);    assert v != null;    assert v.equals("val" + i);  }  latch.await(10,SECONDS);  for (  Ignite ignite : ignites) {    IgniteCache<Integer,String> cache=ignite.cache(null);    if (cache == cache1)     continue;    for (int i=1; i <= cnt; i++) {      String v=cache.get(i);      assert v != null;      assert v.equals("val" + i);    }  }  assert !cache1.isLocalLocked(1,false);  assert !cache1.isLocalLocked(2,false);  assert !cache1.isLocalLocked(3,false);  for (  Ignite ignite : ignites)   ignite.events().stopLocalListen(lsnr);}  }
class C{  public void trimToSize(){  this.elements.trimToSize();}  }
class C{  public static void run(AdSense adsense,String savedReportId) throws Exception {  System.out.println("=================================================================");  System.out.printf("Running saved report %s\n",savedReportId);  System.out.println("=================================================================");  Date today=new Date();  Calendar calendar=Calendar.getInstance();  calendar.setTime(today);  calendar.add(Calendar.DATE,-7);  Generate request=adsense.reports().saved().generate(savedReportId);  AdsenseReportsGenerateResponse response=request.execute();  if (response.getRows() != null && !response.getRows().isEmpty()) {    for (    AdsenseReportsGenerateResponse.Headers header : response.getHeaders()) {      System.out.printf("%25s",header.getName());    }    System.out.println();    for (    List<String> row : response.getRows()) {      for (      String column : row) {        System.out.printf("%25s",column);      }      System.out.println();    }    System.out.println();  } else {    System.out.println("No rows returned.");  }  System.out.println();}  }
class C{  public ExecutionItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:00.446 -0500",hash_original_method="F82C2754B23055580BC52097E43A638F",hash_generated_method="DFC273A3EF7088CF42618329463CB6DB") public void stopSpyStream(){  super._stopSpyStream();}  }
class C{  @VisibleForTesting void configureBounds(){  Drawable underlyingDrawable=getCurrent();  Rect bounds=getBounds();  int viewWidth=bounds.width();  int viewHeight=bounds.height();  int underlyingWidth=mUnderlyingWidth=underlyingDrawable.getIntrinsicWidth();  int underlyingHeight=mUnderlyingHeight=underlyingDrawable.getIntrinsicHeight();  if (underlyingWidth <= 0 || underlyingHeight <= 0) {    underlyingDrawable.setBounds(bounds);    mDrawMatrix=null;    return;  }  if (underlyingWidth == viewWidth && underlyingHeight == viewHeight) {    underlyingDrawable.setBounds(bounds);    mDrawMatrix=null;    return;  }  if (mScaleType == ScaleType.FIT_XY) {    underlyingDrawable.setBounds(bounds);    mDrawMatrix=null;    return;  }  underlyingDrawable.setBounds(0,0,underlyingWidth,underlyingHeight);  mScaleType.getTransform(mTempMatrix,bounds,underlyingWidth,underlyingHeight,(mFocusPoint != null) ? mFocusPoint.x : 0.5f,(mFocusPoint != null) ? mFocusPoint.y : 0.5f);  mDrawMatrix=mTempMatrix;}  }
class C{  public HttpPollerProcessor(String pollerType,String successRegex,String failureRegex,String uuidRegex,String progressRegex,int progressStuckTimeoutSeconds,long pollIntervalMillis,String pollerRequestTemplate,String jobIdPlaceHolder,int maxPollError){  super();  this.pollerType=pollerType;  this.successRegex=successRegex;  this.failureRegex=failureRegex;  this.setJobIdRegex(uuidRegex);  this.progressRegex=progressRegex;  this.progressStuckTimeoutSeconds=progressStuckTimeoutSeconds;  this.pollIntervalMillis=pollIntervalMillis;  this.pollerRequestTemplate=pollerRequestTemplate;  this.jobIdPlaceHolder=jobIdPlaceHolder;  this.setMaxPollError(maxPollError);}  }
class C{  public iframe addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void write(int b) throws IOException {  tmp[0]=(byte)b;  write(tmp,0,1);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:55.957 -0500",hash_original_method="129F7E351048C86B6490303416B23FF4",hash_generated_method="8A56BEE8B2FB9CBA199B3D2705E15405") public void send(byte[] data,InetAddress host) throws IOException {  send(data,data.length,host,DEFAULT_PORT);}  }
class C{  public boolean isEmpty(){  return messages.isEmpty();}  }
class C{  private void initialize(Class<OpsType> opsType,Interface instance) throws InstantiationException, IllegalAccessException {  mOpsInstance=opsType.newInstance();  mRetainedFragmentManager.put(opsType.getSimpleName(),mOpsInstance);  mOpsInstance.onConfiguration(instance,true);}  }
class C{  public static String[] split(String commandLine){  final List<String> list=new ArrayList<>();  boolean inquote=false;  boolean inDblQuote=false;  StringBuilder r=new StringBuilder();  for (int ip=0; ip < commandLine.length(); ) {    final char b=commandLine.charAt(ip++);switch (b) {case '\t':case ' ':      if (inquote || inDblQuote) {        r.append(b);      } else       if (r.length() > 0) {        list.add(r.toString());        r=new StringBuilder();      }    continue;case '\"':  if (inquote) {    r.append(b);  } else {    inDblQuote=!inDblQuote;  }continue;case '\'':if (inDblQuote) {r.append(b);} else {inquote=!inquote;}continue;case '\\':if (inquote || ip == commandLine.length()) {r.append(b);} else {r.append(commandLine.charAt(ip++));}continue;default :r.append(b);continue;}}if (r.length() > 0) {list.add(r.toString());}return list.toArray(new String[list.size()]);}  }
class C{  public static RequestBuilder delete(String url){  return new RequestBuilder(HTTPMethod.DELETE,url);}  }
class C{  public void clear(){  m_source.clear();  super.clear();}  }
class C{  private Set<String> tokenizer(String string){  HashSet<String> tokens=new HashSet<String>();  if (string != null && !string.equals("")) {    String tok[]=string.toLowerCase().split("([^a-z0-9])");    for (    String t : tok) {      if (t.length() < 3) {        continue;      }      if (t.matches(numPattern)) {        tokens.add(numReplacementString);        continue;      }      if (t.matches(stringPattern)) {        tokens.add(t);        continue;      }    }  }  return tokens;}  }
class C{  public GreekLowerCaseFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public boolean isInfoEnabled(){  return isEnabled(TraceSystem.INFO);}  }
class C{  @Override public OpenIndexRequest indices(String... indices){  this.indices=indices;  return this;}  }
class C{  protected void removeLeadingAndTrailingCommentsFromLiteral(ASTNode node){  int start=node.getStartPosition();  this.scanner.resetTo(start,start + node.getLength());  int token;  int startPosition=-1;  try {    while ((token=this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {switch (token) {case TerminalTokens.TokenNameIntegerLiteral:case TerminalTokens.TokenNameFloatingPointLiteral:case TerminalTokens.TokenNameLongLiteral:case TerminalTokens.TokenNameDoubleLiteral:case TerminalTokens.TokenNameCharacterLiteral:        if (startPosition == -1) {          startPosition=this.scanner.startPosition;        }      int end=this.scanner.currentPosition;    node.setSourceRange(startPosition,end - startPosition);  return;case TerminalTokens.TokenNameMINUS:startPosition=this.scanner.startPosition;break;}}} catch (InvalidInputException e) {}}  }
class C{  public void visitLookupSwitchInsn(Label dflt,int[] keys,Label[] labels){  if (mv != null) {    mv.visitLookupSwitchInsn(dflt,keys,labels);  }}  }
class C{  public double sum(){  return this.matrix.sum();}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case StextPackage.ENTRY_POINT_SPEC__ENTRYPOINT:    setEntrypoint((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.TRACE_CONDITION___LHS_1:    setLHS_1((String)newValue);  return;case UmplePackage.TRACE_CONDITION___CONDITION_RHS_1:getConditionRHS_1().clear();getConditionRHS_1().addAll((Collection<? extends ConditionRHS_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public boolean canSeeChunk(Key chunk){  return knownChunks.contains(chunk);}  }
class C{  public static void checkInputParameterType(String parameterName,Object parameterValue){  if (parameterName == null) {    throw new MLContextException("No parameter name supplied");  } else   if (parameterValue == null) {    throw new MLContextException("No parameter value supplied");  } else   if (!parameterName.startsWith("$")) {    throw new MLContextException("Input parameter name must start with a $");  }  Object o=parameterValue;  boolean supported=false;  for (  Class<?> clazz : BASIC_DATA_TYPES) {    if (o.getClass().equals(clazz)) {      supported=true;      break;    } else     if (clazz.isAssignableFrom(o.getClass())) {      supported=true;      break;    }  }  if (!supported) {    throw new MLContextException("Input parameter (\"" + parameterName + "\") value type not supported: "+ o.getClass());  }}  }
class C{  public void testEmptySynonyms() throws Exception {  Reader reader=new StringReader("GB");  TokenStream stream=whitespaceMockTokenizer(reader);  stream=tokenFilterFactory("Synonym",Version.LATEST,new StringMockResourceLoader(""),"synonyms","synonyms.txt").create(stream);  assertTokenStreamContents(stream,new String[]{"GB"});}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static BufferedImage createRGBImageFromYCCK(Raster ycckRaster,ICC_Profile cmykProfile){  BufferedImage image;  if (cmykProfile != null) {    ycckRaster=convertYCCKtoCMYK(ycckRaster);    image=createRGBImageFromCMYK(ycckRaster,cmykProfile);  } else {    int w=ycckRaster.getWidth(), h=ycckRaster.getHeight();    int[] rgb=new int[w * h];    int[] Y=ycckRaster.getSamples(0,0,w,h,0,(int[])null);    int[] Cb=ycckRaster.getSamples(0,0,w,h,1,(int[])null);    int[] Cr=ycckRaster.getSamples(0,0,w,h,2,(int[])null);    int[] K=ycckRaster.getSamples(0,0,w,h,3,(int[])null);    float vr, vg, vb;    for (int i=0, imax=Y.length; i < imax; i++) {      float k=K[i], y=Y[i], cb=Cb[i], cr=Cr[i];      vr=y + 1.402f * (cr - 128) - k;      vg=y - 0.34414f * (cb - 128) - 0.71414f * (cr - 128) - k;      vb=y + 1.772f * (cb - 128) - k;      rgb[i]=(0xff & (vr < 0.0f ? 0 : vr > 255.0f ? 0xff : (int)(vr + 0.5f))) << 16 | (0xff & (vg < 0.0f ? 0 : vg > 255.0f ? 0xff : (int)(vg + 0.5f))) << 8 | (0xff & (vb < 0.0f ? 0 : vb > 255.0f ? 0xff : (int)(vb + 0.5f)));    }    Raster rgbRaster=Raster.createPackedRaster(new DataBufferInt(rgb,rgb.length),w,h,w,new int[]{0xff0000,0xff00,0xff},null);    ColorSpace cs=ColorSpace.getInstance(ColorSpace.CS_sRGB);    ColorModel cm=new DirectColorModel(cs,24,0xff0000,0xff00,0xff,0x0,false,DataBuffer.TYPE_INT);    image=new BufferedImage(cm,(WritableRaster)rgbRaster,true,null);  }  return image;}  }
class C{  public final void sub(Matrix4f m1){  this.m00-=m1.m00;  this.m01-=m1.m01;  this.m02-=m1.m02;  this.m03-=m1.m03;  this.m10-=m1.m10;  this.m11-=m1.m11;  this.m12-=m1.m12;  this.m13-=m1.m13;  this.m20-=m1.m20;  this.m21-=m1.m21;  this.m22-=m1.m22;  this.m23-=m1.m23;  this.m30-=m1.m30;  this.m31-=m1.m31;  this.m32-=m1.m32;  this.m33-=m1.m33;}  }
class C{  public static void testWritable(Writable before,Configuration conf) throws Exception {  TestCase.assertEquals(before,writeRead(before,conf));}  }
class C{  public void visitIntInsn(int opcode,int operand){  if (mv != null) {    mv.visitIntInsn(opcode,operand);  }}  }
class C{  protected void removeAllIndexes(){  indexes.clear();}  }
class C{  private boolean isCompatibleWith0(TypeBinding otherType){  if (otherType == this)   return true;  if (otherType.id == TypeIds.T_JavaLangObject)   return true;  if (isEquivalentTo(otherType))   return true;switch (otherType.kind()) {case Binding.WILDCARD_TYPE:case Binding.INTERSECTION_TYPE:    return false;case Binding.TYPE_PARAMETER:  if (otherType.isCapture()) {    CaptureBinding otherCapture=(CaptureBinding)otherType;    TypeBinding otherLowerBound;    if ((otherLowerBound=otherCapture.lowerBound) != null) {      if (otherLowerBound.isArrayType())       return false;      return isCompatibleWith(otherLowerBound);    }  }case Binding.GENERIC_TYPE:case Binding.TYPE:case Binding.PARAMETERIZED_TYPE:case Binding.RAW_TYPE:switch (kind()) {case Binding.GENERIC_TYPE:case Binding.PARAMETERIZED_TYPE:case Binding.RAW_TYPE:  if (erasure() == otherType.erasure())   return false;}ReferenceBinding otherReferenceType=(ReferenceBinding)otherType;if (otherReferenceType.isInterface()) return implementsInterface(otherReferenceType,true);if (isInterface()) return false;return otherReferenceType.isSuperclassOf(this);default :return false;}}  }
class C{  public ConditionalExpression createConditionalExpression(){  ConditionalExpressionImpl conditionalExpression=new ConditionalExpressionImpl();  return conditionalExpression;}  }
class C{  public long lengthBetween(int start,int end){  final int fileStart=mFileNoLookup.lookup(start);  final int fileEnd=mFileNoLookup.lookup(end);  final int startIndex=start - mFileNoLookup.startSeq(fileStart);  final int endIndex=end - mFileNoLookup.startSeq(fileEnd);  long retLength=-mPointers[fileStart][startIndex];  for (int i=fileStart; i < fileEnd; i++) {    retLength+=mPointers[i][mPointers[i].length - 1];  }  retLength+=mPointers[fileEnd][endIndex];  return retLength;}  }
class C{  public void eraseViewIfNeeded(ViewGroup view){  if (view.getChildCount() > 0) {    view.removeAllViews();  }}  }
class C{  private static void recursiveAppendNumber(StringBuffer result,int n,int radix,int minDigits){  int digit=n % radix;  if (n >= radix || minDigits > 1) {    recursiveAppendNumber(result,n / radix,radix,minDigits - 1);  }  result.append(DIGITS[digit]);}  }
class C{  protected ReferenceUriSchemesSupported(int value){  super(value);}  }
class C{  public static boolean isKLVFillItem(byte[] key){  for (int i=0; i < KLVPacket.KEY_FIELD_SIZE; i++) {    if ((KLVPacket.KLV_FILL_ITEM_KEY_MASK[i] != 0) && (KLVPacket.KLV_FILL_ITEM_KEY[i] != key[i])) {      return false;    }  }  return true;}  }
class C{  public void fire(Session session,int type,boolean beforeAction){  if (rowBased || before != beforeAction || (typeMask & type) == 0) {    return;  }  load();  Connection c2=session.createConnection(false);  boolean old=false;  if (type != Trigger.SELECT) {    old=session.setCommitOrRollbackDisabled(true);  }  Value identity=session.getLastScopeIdentity();  try {    triggerCallback.fire(c2,null,null);  } catch (  Throwable e) {    throw DbException.get(ErrorCode.ERROR_EXECUTING_TRIGGER_3,e,getName(),triggerClassName != null ? triggerClassName : "..source..",e.toString());  } finally {    if (session.getLastTriggerIdentity() != null) {      session.setLastScopeIdentity(session.getLastTriggerIdentity());      session.setLastTriggerIdentity(null);    } else {      session.setLastScopeIdentity(identity);    }    if (type != Trigger.SELECT) {      session.setCommitOrRollbackDisabled(old);    }  }}  }
class C{  private void drawGrid(Mode mode,boolean drawToolTip){  Point currentMousePosition=this.controller.getMousePosition();  double gridSize=this.data.getCellSize();  if (this.data != null) {    this.imageContainer.setColor(Color.BLACK);    this.imageContainer.setLineThickness(1);    LinkedList<Cell> cells=new LinkedList<Cell>();    cellTree.getRectangle(new Rect(Double.NEGATIVE_INFINITY,Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY),cells);    this.selectedCell=null;    for (    Cell cell : cells) {      Coord cellCoord=cell.getCoord();      Coord transformedCoord=this.ctInverse.transform(new Coord(cellCoord.getX() - gridSize / 2,cellCoord.getY() - gridSize / 2));      Point2D cellCoordP2D=this.controller.geoToPixel(new Point2D.Double(transformedCoord.getY(),transformedCoord.getX()));      Coord cellPlusGridCoord=this.ctInverse.transform(new Coord(cellCoord.getX() + gridSize / 2,cellCoord.getY() + gridSize / 2));      Point2D cellPlusGridCoordP2D=this.controller.geoToPixel(new Point2D.Double(cellPlusGridCoord.getY(),cellPlusGridCoord.getX()));      int gridX1=(int)cellCoordP2D.getX();      int gridY1=(int)cellCoordP2D.getY();      int gridX2=(int)cellPlusGridCoordP2D.getX();      int gridY2=(int)cellPlusGridCoordP2D.getY();      if (gridX1 > gridX2) {        int temp=gridX2;        gridX2=gridX1;        gridX1=temp;      }      if (gridY1 > gridY2) {        int temp=gridY2;        gridY2=gridY1;        gridY1=temp;      }      this.imageContainer.setLineThickness(1);      if ((mode.equals(Mode.EVACUATION)) || (mode.equals(Mode.CLEARING))) {        AttributeData<Color> visData;        this.imageContainer.setColor(ToolConfig.COLOR_DISABLED_TRANSPARENT);        if (mode.equals(Mode.EVACUATION)) {          visData=data.getEvacuationTimeVisData();          if ((cell.getCount() > 0))           this.imageContainer.setColor(visData.getAttribute(cell.getId()));        } else         if (mode.equals(Mode.CLEARING)) {          visData=data.getClearingTimeVisData();          if (cell.getClearingTime() > 0)           this.imageContainer.setColor(visData.getAttribute(cell.getId()));        }        this.imageContainer.fillRect(gridX1,gridY1,gridX2 - gridX1,gridY2 - gridY1);      }      if (mode.equals(Mode.UTILIZATION)) {        this.imageContainer.setColor(ToolConfig.COLOR_GRID_UTILIZATION);        this.imageContainer.setLineThickness(2);        this.imageContainer.drawRect(gridX1,gridY1,gridX2 - gridX1,gridY2 - gridY1);        this.imageContainer.setColor(ToolConfig.COLOR_CELL);        this.imageContainer.fillRect(gridX1,gridY1,gridX2 - gridX1,gridY2 - gridY1);      } else {        this.imageContainer.setColor(ToolConfig.COLOR_GRID);        this.imageContainer.setLineThickness(1);        this.imageContainer.drawRect(gridX1,gridY1,gridX2 - gridX1,gridY2 - gridY1);      }      if (drawToolTip && currentMousePosition != null) {        int mouseX=this.controller.getMousePosition().x;        int mouseY=this.controller.getMousePosition().y;        if ((mouseX >= gridX1) && (mouseX < gridX2) && (mouseY >= gridY1)&& (mouseY < gridY2)) {          this.imageContainer.setColor(ToolConfig.COLOR_HOVER);          this.imageContainer.fillRect(gridX1,gridY1,gridX2 - gridX1,gridY2 - gridY1);          this.imageContainer.setLineThickness(3);          this.imageContainer.drawRect(gridX1,gridY1,gridX2 - gridX1,gridY2 - gridY1);          this.selectedCell=cell;        }      }    }    if ((this.selectedCell != null) && (this.controller.getMousePosition() != null)) {      Point mp=this.controller.getMousePosition();      this.imageContainer.setLineThickness(1);      this.imageContainer.setColor(new Color(0,0,0,90));      this.imageContainer.fillRect(this.controller.getMousePosition().x - 15,mp.y + 30,260,85);      this.imageContainer.setColor(Color.white);      this.imageContainer.fillRect(mp.x - 25,mp.y + 20,260,85);      this.imageContainer.setColor(Color.black);      this.imageContainer.drawRect(mp.x - 25,mp.y + 20,260,85);      this.imageContainer.setFont(ToolConfig.FONT_DEFAULT_BOLD);      this.imageContainer.drawString(mp.x - 15,mp.y + 40,"person count:");      this.imageContainer.drawString(mp.x - 15,mp.y + 60,"clearing time:");      this.imageContainer.drawString(mp.x - 15,mp.y + 80,"average evacuation time:");      this.imageContainer.setFont(ToolConfig.FONT_DEFAULT);      this.imageContainer.drawString(mp.x + 135,mp.y + 40,EAToolBox.getReadableTime(selectedCell.getCount(),Unit.PEOPLE));      this.imageContainer.drawString(mp.x + 135,mp.y + 60,EAToolBox.getReadableTime(selectedCell.getClearingTime(),Unit.TIME));      this.imageContainer.drawString(mp.x + 135,mp.y + 80,EAToolBox.getReadableTime(selectedCell.getTimeSum() / selectedCell.getCount(),Unit.TIME));    }    this.imageContainer.setColor(Color.black);  }}  }
class C{  private void removeResource(FacesContext context,UIComponent resource,UIViewRoot view){  view.removeComponentResource(context,resource,HEAD);  view.removeComponentResource(context,resource,TARGET);}  }
class C{  @Override protected void ensureNumberOfColumns(int numberOfColumns){  if (data.length >= numberOfColumns) {    return;  }  double[] newData=new double[numberOfColumns];  System.arraycopy(data,0,newData,0,data.length);  data=newData;}  }
class C{  @Override public void check(SnmpMibSubRequest req,int depth) throws SnmpStatusException {  for (Enumeration<SnmpVarBind> e=req.getElements(); e.hasMoreElements(); ) {    SnmpVarBind var=e.nextElement();    SnmpStatusException x=new SnmpStatusException(SnmpStatusException.noAccess);    req.registerCheckException(var,x);  }}  }
class C{  public int size(){  return (tail - head) & (elements.length - 1);}  }
class C{  private void correctTooHigh(int childCount){  int lastPosition=mFirstPosition + childCount - 1;  if (lastPosition == mItemCount - 1 && childCount > 0) {    final int lastBottom=getLowestChildBottom();    final int end=(getBottom() - getTop()) - getListPaddingBottom();    int bottomOffset=end - lastBottom;    final int firstTop=getHighestChildTop();    if (bottomOffset > 0 && (mFirstPosition > 0 || firstTop < getListPaddingTop())) {      if (mFirstPosition == 0) {        bottomOffset=Math.min(bottomOffset,getListPaddingTop() - firstTop);      }      offsetChildrenTopAndBottom(bottomOffset);      if (mFirstPosition > 0) {        int previousPosition=mFirstPosition - 1;        fillUp(previousPosition,getNextChildUpsBottom(previousPosition));        adjustViewsUpOrDown();      }    }  }}  }
class C{  public static String writeXMLString(Document doc){  try {    TransformerFactory tf=TransformerFactory.newInstance();    Transformer transformer=tf.newTransformer();    transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION,"yes");    transformer.setOutputProperty(OutputKeys.INDENT,"yes");    StringWriter writer=new StringWriter();    transformer.transform(new DOMSource(doc),new StreamResult(writer));    return writer.getBuffer().toString();  } catch (  TransformerConfigurationException e) {    log.warning(e.getMessage());  }catch (  TransformerException e) {    log.warning(e.getMessage());  }  return "";}  }
class C{  @Override public void onPageStarted(WebView view,String url,Bitmap favicon){  super.onPageStarted(view,url,favicon);  String newloc="";  if (url.startsWith("http:") || url.startsWith("https:") || url.startsWith("file:")) {    newloc=url;  } else   if (url.startsWith(WebView.SCHEME_TEL)) {    try {      Intent intent=new Intent(Intent.ACTION_DIAL);      intent.setData(Uri.parse(url));      cordova.getActivity().startActivity(intent);    } catch (    android.content.ActivityNotFoundException e) {      LOG.e(LOG_TAG,"Error dialing " + url + ": "+ e.toString());    }  } else   if (url.startsWith("geo:") || url.startsWith(WebView.SCHEME_MAILTO) || url.startsWith("market:")) {    try {      Intent intent=new Intent(Intent.ACTION_VIEW);      intent.setData(Uri.parse(url));      cordova.getActivity().startActivity(intent);    } catch (    android.content.ActivityNotFoundException e) {      LOG.e(LOG_TAG,"Error with " + url + ": "+ e.toString());    }  } else   if (url.startsWith("sms:")) {    try {      Intent intent=new Intent(Intent.ACTION_VIEW);      String address=null;      int parmIndex=url.indexOf('?');      if (parmIndex == -1) {        address=url.substring(4);      } else {        address=url.substring(4,parmIndex);        Uri uri=Uri.parse(url);        String query=uri.getQuery();        if (query != null) {          if (query.startsWith("body=")) {            intent.putExtra("sms_body",query.substring(5));          }        }      }      intent.setData(Uri.parse("sms:" + address));      intent.putExtra("address",address);      intent.setType("vnd.android-dir/mms-sms");      cordova.getActivity().startActivity(intent);    } catch (    android.content.ActivityNotFoundException e) {      LOG.e(LOG_TAG,"Error sending sms " + url + ":"+ e.toString());    }  } else {    newloc="http://" + url;  }  if (!newloc.equals(edittext.getText().toString())) {    edittext.setText(newloc);  }  try {    JSONObject obj=new JSONObject();    obj.put("type",LOAD_START_EVENT);    obj.put("url",newloc);    sendUpdate(obj,true);  } catch (  JSONException ex) {    Log.d(LOG_TAG,"Should never happen");  }}  }
class C{  public final CC alignX(String align){  hor.setAlign(ConstraintParser.parseUnitValueOrAlign(align,true,null));  return this;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof GradientBarPainter)) {    return false;  }  GradientBarPainter that=(GradientBarPainter)obj;  if (this.g1 != that.g1) {    return false;  }  if (this.g2 != that.g2) {    return false;  }  if (this.g3 != that.g3) {    return false;  }  return true;}  }
class C{  @Override public int hashCode(){  return year ^ (month << 27);}  }
class C{  public static int read(byte[] body,InputStream in) throws IOException {  byte[] buffer=new byte[1024 * 32];  int readlength=0;  int offset=0;  int bytesRead=-1;  try {    while (offset < body.length) {      if ((body.length - offset) > buffer.length) {        readlength=buffer.length;      } else {        readlength=body.length - offset;      }      bytesRead=in.read(buffer,0,readlength);      if (bytesRead != -1) {        System.arraycopy(buffer,0,body,offset,bytesRead);        offset+=bytesRead;      } else {        break;      }    }  } catch (  Exception e) {    LOG.warn("bytesRead:" + bytesRead + "; offset:"+ offset+ "; BODT_length:"+ body.length,e);    throw new IOException(e.getMessage());  } finally {    readlength=offset;  }  return readlength;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.387 -0400",hash_original_method="13A2E944F2DC31C8D9BCDECDB68E3CE6",hash_generated_method="7ECF7AEC58498795FA60F0915D4478F3") @DSSink(DSSinkKind.ENCODER) public Object encode(Object pObject) throws EncoderException {  if (pObject == null) {    return null;  } else   if (pObject instanceof byte[]) {    return encode((byte[])pObject);  } else   if (pObject instanceof String) {    return encode((String)pObject);  } else {    throw new EncoderException("Objects of type " + pObject.getClass().getName() + " cannot be URL encoded");  }}  }
class C{  private Object[] ensureCapacity(int minCapacity){  if (tmp.length < minCapacity) {    int newSize=minCapacity;{      newSize|=newSize >> 1;      newSize|=newSize >> 2;      newSize|=newSize >> 4;      newSize|=newSize >> 8;      newSize|=newSize >> 16;      newSize++;      if (newSize < 0)       newSize=minCapacity; else       newSize=Math.min(newSize,a.length >>> 1);    }    Object[] newArray=(Object[])new Object[newSize];    tmp=newArray;  }  return tmp;}  }
class C{  protected static float[][] convertValuesToMatrix(Element filterElement,BridgeContext ctx){  String s=filterElement.getAttributeNS(null,SVG_VALUES_ATTRIBUTE);  float[][] matrix=new float[4][5];  if (s.length() == 0) {    matrix[0][0]=1;    matrix[1][1]=1;    matrix[2][2]=1;    matrix[3][3]=1;    return matrix;  }  StringTokenizer tokens=new StringTokenizer(s," ,");  int n=0;  try {    while (n < 20 && tokens.hasMoreTokens()) {      matrix[n / 5][n % 5]=SVGUtilities.convertSVGNumber(tokens.nextToken());      n++;    }  } catch (  NumberFormatException nfEx) {    throw new BridgeException(ctx,filterElement,nfEx,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_VALUES_ATTRIBUTE,s,nfEx});  }  if (n != 20 || tokens.hasMoreTokens()) {    throw new BridgeException(ctx,filterElement,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_VALUES_ATTRIBUTE,s});  }  for (int i=0; i < 4; ++i) {    matrix[i][4]*=255;  }  return matrix;}  }
class C{  @Override public Eval<Boolean> noneMatch(final Predicate<? super T> predicate){  return Eval.later(null);}  }
class C{  public CipherParameters generateDerivedParameters(int keySize,int ivSize){  keySize=keySize / 8;  ivSize=ivSize / 8;  if ((keySize + ivSize) > digest.getDigestSize()) {    throw new IllegalArgumentException("Can't generate a derived key " + (keySize + ivSize) + " bytes long.");  }  byte[] dKey=generateDerivedKey();  return new ParametersWithIV(new KeyParameter(dKey,0,keySize),dKey,keySize,ivSize);}  }
class C{  public void openPneumatics(){  if (PneumaticsGUI.INSTANCE == null)   PneumaticsGUI.create();}  }
class C{  public URI buildAuthenticationRequestURI(ClientID clientID,URI redirectURI) throws AuthException {  try {    TokenSpec tokenSpec=new TokenSpec.Builder().refreshToken(false).idTokenGroups(GroupMembershipType.NONE).accessTokenGroups(GroupMembershipType.FULL).resourceServers(Arrays.asList(AuthOIDCClient.ResourceServer.rs_esxcloud.toString())).build();    return oidcClient.getOidcClient(clientID).buildAuthenticationRequestURI(redirectURI,ResponseType.idTokenAccessToken(),ResponseMode.FRAGMENT,tokenSpec,new State(LOGIN_STATE),new Nonce(LOGIN_REQUEST_NONCE));  } catch (  OIDCClientException e) {    throw new AuthException("Failed to build authentication request URI.",e);  }}  }
class C{  protected void engineSetMode(String mode){  if (!mode.equalsIgnoreCase("ECB")) {    throw new IllegalArgumentException("can't support mode " + mode);  }}  }
class C{  public boolean hasExpired(){  if (maxAge == -1l) {    return false;  }  boolean expired=false;  if (maxAge <= 0l) {    expired=true;  }  return expired;}  }
class C{  public void implicit_weight_table(int field){  int ref0, ref1, i, cur_poc, ref_start, ref_count0, ref_count1;  for (i=0; i < 2; i++) {    this.luma_weight_flag[i]=0;    this.chroma_weight_flag[i]=0;  }  if (field < 0) {    cur_poc=s.current_picture_ptr.poc;    if (this.ref_count[0] == 1 && this.ref_count[1] == 1 && 0 == this.mb_aff_frame && this.ref_list[0][0].poc + this.ref_list[1][0].poc == 2 * cur_poc) {      this.use_weight=0;      this.use_weight_chroma=0;      return;    }    ref_start=0;    ref_count0=(int)this.ref_count[0];    ref_count1=(int)this.ref_count[1];  } else {    cur_poc=s.current_picture_ptr.field_poc[field];    ref_start=16;    ref_count0=(int)(16 + 2 * this.ref_count[0]);    ref_count1=(int)(16 + 2 * this.ref_count[1]);  }  this.use_weight=2;  this.use_weight_chroma=2;  this.luma_log2_weight_denom=5;  this.chroma_log2_weight_denom=5;  for (ref0=ref_start; ref0 < ref_count0; ref0++) {    int poc0=this.ref_list[0][ref0].poc;    for (ref1=ref_start; ref1 < ref_count1; ref1++) {      int poc1=this.ref_list[1][ref1].poc;      int td=av_clip(poc1 - poc0,-128,127);      int w=32;      if (td != 0) {        int tb=av_clip(cur_poc - poc0,-128,127);        int tx=(16384 + (Math.abs(td) >> 1)) / td;        int dist_scale_factor=(tb * tx + 32) >> 8;        if (dist_scale_factor >= -64 && dist_scale_factor <= 128)         w=64 - dist_scale_factor;      }      if (field < 0) {        this.implicit_weight[ref0][ref1][0]=this.implicit_weight[ref0][ref1][1]=w;      } else {        this.implicit_weight[ref0][ref1][field]=w;      }    }  }}  }
class C{  public void configure(AnalysisContext analysisContext){  analysisContext.setBoolProperty(property,enabled);}  }
class C{  private void genEpilogue(int returnSize,int bytesPopped){  if (klass.hasBridgeFromNativeAnnotation()) {    adjustStack((method.getLocalWords() << LG_WORDSIZE) + (returnSize - bytesPopped),true);    JNICompiler.generateEpilogForJNIMethod(asm,this.method);  } else   if (klass.hasDynamicBridgeAnnotation()) {    asm.emitINT_Imm(0xFF);  } else {    if (method.hasBaselineSaveLSRegistersAnnotation()) {      int spaceToRelease=fp2spOffset(NO_SLOT).toInt() - bytesPopped - (4 * WORDSIZE);      adjustStack(spaceToRelease,true);      if (VM.VerifyAssertions)       VM._assert(EBP_SAVE_OFFSET.toInt() == -(4 * WORDSIZE));      asm.emitPOP_Reg(EBP);    } else {      int spaceToRelease=fp2spOffset(NO_SLOT).toInt() - bytesPopped - (3 * WORDSIZE);      adjustStack(spaceToRelease,true);    }    if (VM.VerifyAssertions)     VM._assert(EBX_SAVE_OFFSET.toInt() == -(3 * WORDSIZE));    asm.emitPOP_Reg(EBX);    if (VM.VerifyAssertions)     VM._assert(EDI_SAVE_OFFSET.toInt() == -(2 * WORDSIZE));    asm.emitPOP_Reg(EDI);    asm.emitPOP_Reg(ECX);    asm.emitPOP_RegDisp(TR,ArchEntrypoints.framePointerField.getOffset());    if (parameterWords == 0) {      asm.emitRET();    } else {      asm.emitRET_Imm(parameterWords << LG_WORDSIZE);    }  }}  }
class C{  public Matrix4d rotationZ(double ang){  double sin, cos;  sin=Math.sin(ang);  cos=Math.cos(ang);  m00=cos;  m01=sin;  m02=0.0;  m03=0.0;  m10=-sin;  m11=cos;  m12=0.0;  m13=0.0;  m20=0.0;  m21=0.0;  m22=1.0;  m23=0.0;  m30=0.0;  m31=0.0;  m32=0.0;  m33=1.0;  properties=PROPERTY_AFFINE;  return this;}  }
class C{  protected MapTile findCovering(int zoom,long i,long j){  while (zoom > 0) {    zoom--;    i=i / 2;    j=j / 2;    MapTile candidate=findTile(zoom,i,j);    if ((candidate != null) && (!candidate.loading())) {      return candidate;    }  }  return null;}  }
class C{  public PSPIdentifierForSellerException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public void removeSkuOnWarehouse(final long skuWarehouseId){  final SkuWarehouse skuWarehouse=skuWarehouseService.findById(skuWarehouseId);  skuWarehouse.setQuantity(BigDecimal.ZERO);  skuWarehouseService.update(skuWarehouse);}  }
class C{  @Override public void removeUpdate(javax.swing.event.DocumentEvent e){}  }
class C{  public void decreaseParStats(Statistics stats){synchronized (statsMap) {    primaryBucketCount-=statsMap.get(StatsKey.PRIMARY_BUCKET_COUNT).intValue();    bucketCount-=statsMap.get(StatsKey.BUCKET_COUNT).intValue();    totalBucketSize-=statsMap.get(StatsKey.TOTAL_BUCKET_SIZE).intValue();    removed=true;  }}  }
class C{  public boolean checkUserExists(String username){  boolean ret=false;  if (_localUsers.get(username) != null) {    _log.debug("user {} exists locally, roles={}",username,_localUsers.get(username).getRoles());    ret=true;  } else {    _log.debug("user {} does not exist locally",username);  }  return ret;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.TEXPORTABLE_ELEMENT__EXPORTED_NAME:    setExportedName((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public static <K,V>Map<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4,K k5,V v5,K k6,V v6,K k7,V v7,K k8,V v8,K k9,V v9){  return new ImmutableCollections.MapN<K,V>(k1,v1,k2,v2,k3,v3,k4,v4,k5,v5,k6,v6,k7,v7,k8,v8,k9,v9);}  }
class C{  public static StructuredTranslation fromKBestDerivation(final Sentence sourceSentence,final DerivationState derivationState){  final long startTime=System.currentTimeMillis();  final String translationString=removeSentenceMarkers(derivationState.getHypothesis());  return new StructuredTranslation(sourceSentence,translationString,extractTranslationTokens(translationString),derivationState.getModelCost(),derivationState.getWordAlignmentList(),derivationState.getFeatures().getMap(),(System.currentTimeMillis() - startTime) / 1000.0f);}  }
class C{  private int handleW(String value,DoubleMetaphoneResult result,int index){  if (contains(value,index,2,"WR")) {    result.append('R');    index+=2;  } else {    if (index == 0 && (isVowel(charAt(value,index + 1)) || contains(value,index,2,"WH"))) {      if (isVowel(charAt(value,index + 1))) {        result.append('A','F');      } else {        result.append('A');      }      index++;    } else     if ((index == value.length() - 1 && isVowel(charAt(value,index - 1))) || contains(value,index - 1,5,"EWSKI","EWSKY","OWSKI","OWSKY") || contains(value,0,3,"SCH")) {      result.appendAlternate('F');      index++;    } else     if (contains(value,index,4,"WICZ","WITZ")) {      result.append("TS","FX");      index+=4;    } else {      index++;    }  }  return index;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case FunctionblockPackage.OPERATION__NAME:    setName(NAME_EDEFAULT);  return;case FunctionblockPackage.OPERATION__PARAMS:getParams().clear();return;case FunctionblockPackage.OPERATION__RETURN_TYPE:setReturnType((ReturnType)null);return;case FunctionblockPackage.OPERATION__DESCRIPTION:setDescription(DESCRIPTION_EDEFAULT);return;case FunctionblockPackage.OPERATION__BREAKABLE:setBreakable(BREAKABLE_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public static void xmlWrongMethod(Class<?> aClass){  throw new WrongMethodException(MSG.INSTANCE.message(wrongMethodException1,aClass.getSimpleName()));}  }
class C{  private void computeCrcForWriting(){  crcengine=new CRC32();  crcengine.update(idbytes,0,4);  if (len > 0)   crcengine.update(data,0,len);  PngHelperInternal.writeInt4tobytes((int)crcengine.getValue(),crcval,0);}  }
class C{  public void flip(int i){  bits[i >> 5]^=1 << (i & 0x1F);}  }
class C{  private void handleFlawedDiscovery(String logAdapterClassName,ClassLoader classLoader,Throwable discoveryFlaw){  if (isDiagnosticsEnabled()) {    logDiagnostic("Could not instantiate Log '" + logAdapterClassName + "' -- "+ discoveryFlaw.getClass().getName()+ ": "+ discoveryFlaw.getLocalizedMessage());  }  if (!allowFlawedDiscovery) {    throw new LogConfigurationException(discoveryFlaw);  }}  }
class C{  public void runButtonActionPerformed(java.awt.event.ActionEvent e){  if (!mRunButton.isSelected()) {    return;  }  boolean ok=false;  for (int i=0; i < MAXSEQUENCE; i++) {    if (mUseField[i].isSelected()) {      ok=true;    }  }  if (!ok) {    mRunButton.setSelected(false);    return;  }  mNextSequenceElement=0;  sendNextItem();}  }
class C{  public HashCode append(final double value){  return append(Double.doubleToLongBits(value));}  }
class C{  public void addAll(Collection<? extends T> c){  elements.addAll(c);  length=c.size();}  }
class C{  public boolean isLessThan(Months other){  if (other == null) {    return getValue() < 0;  }  return getValue() < other.getValue();}  }
class C{  public void increment(double coord,double[] data){  double[] existing=get(coord);  for (int i=0; i < existing.length; i++) {    existing[i]+=data[i];  }}  }
class C{  static CopticDate ofEpochDay(long epochDay){  epochDay+=EPOCH_DAY_DIFFERENCE;  int prolepticYear=(int)(((epochDay * 4) + 1463) / 1461);  int startYearEpochDay=(prolepticYear - 1) * 365 + (prolepticYear / 4);  int doy0=(int)(epochDay - startYearEpochDay);  int month=doy0 / 30 + 1;  int dom=doy0 % 30 + 1;  return new CopticDate(prolepticYear,month,dom);}  }
class C{  @Override public String toString(){  return "ContainerItemSlot";}  }
class C{  public boolean isCoinbase(){  return coinbase;}  }
class C{  public static void originalGCD(int a[],int b[],int gcd[]){  if (isZero(a)) {    assign(gcd,a);    return;  }  if (isZero(b)) {    assign(gcd,b);    return;  }  a=copy(a);  b=copy(b);  while (!isZero(b)) {    if (compareTo(a,b) > 0) {      subtract(a,b,gcd,new int[1]);      assign(a,gcd);    } else {      subtract(b,a,gcd,new int[1]);      assign(b,gcd);    }  }  assign(gcd,a);}  }
class C{  private Snapshot findPiTSnapshot(ConsistencyGroupCopySnapshots copySnapshots,long apitTimeInMicroSeconds){  long min=Long.MAX_VALUE;  Snapshot closest=null;  for (  Snapshot snapshot : copySnapshots.getSnapshots()) {    final long diff=Math.abs(snapshot.getClosingTimeStamp().getTimeInMicroSeconds() - apitTimeInMicroSeconds);    logger.debug(String.format("Examining snapshot %s with closing timestamp %s. Determining if it's closest to provided point-in-time %s. Difference is %s",snapshot.getSnapshotUID().getId(),snapshot.getClosingTimeStamp().getTimeInMicroSeconds(),apitTimeInMicroSeconds,diff));    if (diff < min) {      min=diff;      closest=snapshot;    } else {      logger.info(String.format("Determined that snapshot %s with closing timestamp %s is closest to point-in-time %s",closest.getSnapshotUID().getId(),closest.getClosingTimeStamp().getTimeInMicroSeconds(),apitTimeInMicroSeconds));      break;    }  }  return closest;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 13:04:39.897 -0500",hash_original_method="D9B10BD78AF21FE8E9ED306574CD8D66",hash_generated_method="74AFE05E640A22336D6393FB5F1B6B90") public void load(InputStream stream) throws IOException {  load(stream,false);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:44.698 -0500",hash_original_method="DED4BD06169F84224562F0B1604E2BF3",hash_generated_method="130DA15736FD2AED20E191F76300EB40") public static Toast makeText(Context context,int resId,int duration) throws Resources.NotFoundException {  return makeText(context,context.getResources().getText(resId),duration);}  }
class C{  protected void close(ResultSet rs) throws SQLException {  DbUtils.close(rs);}  }
class C{  @Ignore public static String wrap(java.lang.String x){  return new String(x.toCharArray());}  }
class C{  protected void printXMLDecl() throws TranscoderException, XMLException, IOException {  if (xmlDeclaration == null) {    if (type == LexicalUnits.XML_DECL_START) {      if (scanner.next() != LexicalUnits.S) {        throw fatalError("space",null);      }      char[] space1=getCurrentValue();      if (scanner.next() != LexicalUnits.VERSION_IDENTIFIER) {        throw fatalError("token",new Object[]{"version"});      }      type=scanner.next();      char[] space2=null;      if (type == LexicalUnits.S) {        space2=getCurrentValue();        type=scanner.next();      }      if (type != LexicalUnits.EQ) {        throw fatalError("token",new Object[]{"="});      }      type=scanner.next();      char[] space3=null;      if (type == LexicalUnits.S) {        space3=getCurrentValue();        type=scanner.next();      }      if (type != LexicalUnits.STRING) {        throw fatalError("string",null);      }      char[] version=getCurrentValue();      char versionDelim=scanner.getStringDelimiter();      char[] space4=null;      char[] space5=null;      char[] space6=null;      char[] encoding=null;      char encodingDelim=0;      char[] space7=null;      char[] space8=null;      char[] space9=null;      char[] standalone=null;      char standaloneDelim=0;      char[] space10=null;      type=scanner.next();      if (type == LexicalUnits.S) {        space4=getCurrentValue();        type=scanner.next();        if (type == LexicalUnits.ENCODING_IDENTIFIER) {          type=scanner.next();          if (type == LexicalUnits.S) {            space5=getCurrentValue();            type=scanner.next();          }          if (type != LexicalUnits.EQ) {            throw fatalError("token",new Object[]{"="});          }          type=scanner.next();          if (type == LexicalUnits.S) {            space6=getCurrentValue();            type=scanner.next();          }          if (type != LexicalUnits.STRING) {            throw fatalError("string",null);          }          encoding=getCurrentValue();          encodingDelim=scanner.getStringDelimiter();          type=scanner.next();          if (type == LexicalUnits.S) {            space7=getCurrentValue();            type=scanner.next();          }        }        if (type == LexicalUnits.STANDALONE_IDENTIFIER) {          type=scanner.next();          if (type == LexicalUnits.S) {            space8=getCurrentValue();            type=scanner.next();          }          if (type != LexicalUnits.EQ) {            throw fatalError("token",new Object[]{"="});          }          type=scanner.next();          if (type == LexicalUnits.S) {            space9=getCurrentValue();            type=scanner.next();          }          if (type != LexicalUnits.STRING) {            throw fatalError("string",null);          }          standalone=getCurrentValue();          standaloneDelim=scanner.getStringDelimiter();          type=scanner.next();          if (type == LexicalUnits.S) {            space10=getCurrentValue();            type=scanner.next();          }        }      }      if (type != LexicalUnits.PI_END) {        throw fatalError("pi.end",null);      }      output.printXMLDecl(space1,space2,space3,version,versionDelim,space4,space5,space6,encoding,encodingDelim,space7,space8,space9,standalone,standaloneDelim,space10);      type=scanner.next();    }  } else {    output.printString(xmlDeclaration);    output.printNewline();    if (type == LexicalUnits.XML_DECL_START) {      if (scanner.next() != LexicalUnits.S) {        throw fatalError("space",null);      }      if (scanner.next() != LexicalUnits.VERSION_IDENTIFIER) {        throw fatalError("token",new Object[]{"version"});      }      type=scanner.next();      if (type == LexicalUnits.S) {        type=scanner.next();      }      if (type != LexicalUnits.EQ) {        throw fatalError("token",new Object[]{"="});      }      type=scanner.next();      if (type == LexicalUnits.S) {        type=scanner.next();      }      if (type != LexicalUnits.STRING) {        throw fatalError("string",null);      }      type=scanner.next();      if (type == LexicalUnits.S) {        type=scanner.next();        if (type == LexicalUnits.ENCODING_IDENTIFIER) {          type=scanner.next();          if (type == LexicalUnits.S) {            type=scanner.next();          }          if (type != LexicalUnits.EQ) {            throw fatalError("token",new Object[]{"="});          }          type=scanner.next();          if (type == LexicalUnits.S) {            type=scanner.next();          }          if (type != LexicalUnits.STRING) {            throw fatalError("string",null);          }          type=scanner.next();          if (type == LexicalUnits.S) {            type=scanner.next();          }        }        if (type == LexicalUnits.STANDALONE_IDENTIFIER) {          type=scanner.next();          if (type == LexicalUnits.S) {            type=scanner.next();          }          if (type != LexicalUnits.EQ) {            throw fatalError("token",new Object[]{"="});          }          type=scanner.next();          if (type == LexicalUnits.S) {            type=scanner.next();          }          if (type != LexicalUnits.STRING) {            throw fatalError("string",null);          }          type=scanner.next();          if (type == LexicalUnits.S) {            type=scanner.next();          }        }      }      if (type != LexicalUnits.PI_END) {        throw fatalError("pi.end",null);      }      type=scanner.next();    }  }}  }
class C{  public ProtocolEncoderException(){}  }
class C{  static Handler remove(Handler h,Label start,Label end){  if (h == null) {    return null;  } else {    h.next=remove(h.next,start,end);  }  int hstart=h.start.position;  int hend=h.end.position;  int s=start.position;  int e=end == null ? Integer.MAX_VALUE : end.position;  if (s < hend && e > hstart) {    if (s <= hstart) {      if (e >= hend) {        h=h.next;      } else {        h.start=end;      }    } else     if (e >= hend) {      h.end=start;    } else {      Handler g=new Handler();      g.start=end;      g.end=h.end;      g.handler=h.handler;      g.desc=h.desc;      g.type=h.type;      g.next=h.next;      h.end=start;      h.next=g;    }  }  return h;}  }
class C{  public static boolean isExpandableGroup(long composedId){  return (composedId != RecyclerView.NO_ID) && ((composedId & BIT_MASK_CHILD_ID) == BIT_MASK_CHILD_ID);}  }
class C{  protected DefaultLengthHandler(){}  }
class C{  String toString(int indentFactor,int indent) throws JSONException {  int len=length();  if (len == 0) {    return "[]";  }  int i;  StringBuffer sb=new StringBuffer("[");  if (len == 1) {    sb.append(JSONObject.valueToString(get(0),indentFactor,indent));  } else {    int newindent=indent + indentFactor;    sb.append('\n');    for (i=0; i < len; i+=1) {      if (i > 0) {        sb.append(",\n");      }      for (int j=0; j < newindent; j+=1) {        sb.append(' ');      }      sb.append(JSONObject.valueToString(get(i),indentFactor,newindent));    }    sb.append('\n');    for (i=0; i < indent; i+=1) {      sb.append(' ');    }  }  sb.append(']');  return sb.toString();}  }
class C{  public void write(PrintWriter output,Janitor janitor){  String description="General error during " + owner.getPhaseDescription() + ": ";  String message=cause.getMessage();  if (message != null) {    output.println(description + message);  } else {    output.println(description + cause);  }  output.println();  cause.printStackTrace(output);}  }
class C{  @Override public synchronized void println(int x){  print(x);  println();}  }
class C{  private List<Node> possibleParents(Node x,List<Node> adjx,IKnowledge knowledge){  List<Node> possibleParents=new LinkedList<>();  String _x=x.getName();  for (  Node z : adjx) {    String _z=z.getName();    if (possibleParentOf(_z,_x,knowledge)) {      possibleParents.add(z);    }  }  return possibleParents;}  }
class C{  private static List<StringWithOffset> expandLeftmost(StringWithOffset filePatternWithOffset) throws IOException {  String filePattern=filePatternWithOffset.string;  int leftmost=leftmostOuterCurlyContainingSlash(filePattern,filePatternWithOffset.offset);  if (leftmost == -1) {    return null;  }  int curlyOpen=0;  StringBuilder prefix=new StringBuilder(filePattern.substring(0,leftmost));  StringBuilder suffix=new StringBuilder();  List<String> alts=new ArrayList<String>();  StringBuilder alt=new StringBuilder();  StringBuilder cur=prefix;  for (int i=leftmost; i < filePattern.length(); i++) {    char c=filePattern.charAt(i);    if (cur == suffix) {      cur.append(c);    } else     if (c == '\\') {      i++;      if (i >= filePattern.length()) {        throw new IOException("Illegal file pattern: " + "An escaped character does not present for glob " + filePattern + " at "+ i);      }      c=filePattern.charAt(i);      cur.append(c);    } else     if (c == '{') {      if (curlyOpen++ == 0) {        alt.setLength(0);        cur=alt;      } else {        cur.append(c);      }    } else     if (c == '}' && curlyOpen > 0) {      if (--curlyOpen == 0) {        alts.add(alt.toString());        alt.setLength(0);        cur=suffix;      } else {        cur.append(c);      }    } else     if (c == ',') {      if (curlyOpen == 1) {        alts.add(alt.toString());        alt.setLength(0);      } else {        cur.append(c);      }    } else {      cur.append(c);    }  }  List<StringWithOffset> exp=new ArrayList<StringWithOffset>();  for (  String string : alts) {    exp.add(new StringWithOffset(prefix + string + suffix,prefix.length()));  }  return exp;}  }
class C{  double biCubicInterpolation(double xCoord,double yCoord){  try {    return interpolatingFunction.value(yCoord,xCoord);  } catch (  FunctionEvaluationException e) {    e.printStackTrace();  }  return Double.NaN;}  }
class C{  public boolean isSetFileSize(){  return EncodingUtils.testBit(issetBitfield,FILESIZE_ISSET_ID);}  }
class C{  public Movie useFunction(String movieName){  Movie movie=movieFunction.apply(movieName);  System.out.println("Movie created:" + movie);  return movie;}  }
class C{  @Nullable public static Map<String,String> readProperties(DataInput in) throws IOException {  int size=in.readInt();  if (size >= 0) {    Map<String,String> props=new HashMap<>(size);    for (int i=0; i < size; i++) {      byte idx=in.readByte();      String key;switch (idx) {case PROP_PERMISSION_IDX:        key=PROP_PERMISSION;      break;case PROP_PREFER_LOCAL_WRITES_IDX:    key=PROP_PREFER_LOCAL_WRITES;  break;case PROP_USER_NAME_IDX:key=PROP_USER_NAME;break;case PROP_GROUP_NAME_IDX:key=PROP_GROUP_NAME;break;default :key=U.readString(in);}props.put(key,U.readString(in));}return props;} else return null;}  }
class C{  public void init(InputStream is,OutputStream os){  this._is=is;  _os=os;  _flushOnNewline=false;  _closeChildOnClose=true;  _position=0;}  }
class C{  public void removeFromButtonsPanel(Component comp){  m_LayoutButtons.setRows(m_LayoutButtons.getRows() - 1);  m_PanelButtons.remove(comp);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.384 -0400",hash_original_method="ADB04057797F52456DB7F46168AA93CE",hash_generated_method="1479D060227502DB5CECF2708C5ECBEF") @DSSink(DSSinkKind.ENCODER) public byte[] encode(byte[] bytes){  return encodeUrl(WWW_FORM_URL,bytes);}  }
class C{  public static TypedOperation parse(String descr) throws OperationParseException {  String errorPrefix="Error parsing " + descr + " as description for field set statement: ";  int openParPos=descr.indexOf('(');  int closeParPos=descr.indexOf(')');  if (openParPos < 0) {    String msg=errorPrefix + " expecting parentheses.";    throw new OperationParseException(msg);  }  String prefix=descr.substring(0,openParPos);  int lastDotPos=prefix.lastIndexOf('.');  assert lastDotPos > 0 : "should be a period after the classname: " + descr;  String classname=prefix.substring(0,lastDotPos);  String opname=prefix.substring(lastDotPos + 1);  assert opname.equals("<set>") : "expecting <set>, saw " + opname;  assert (closeParPos > 0) : "no closing parentheses found.";  String fieldname=descr.substring(openParPos + 1,closeParPos);  AccessibleField accessibleField=FieldParser.parse(descr,classname,fieldname);  ClassOrInterfaceType classType=accessibleField.getDeclaringType();  Type fieldType;  fieldType=Type.forType(accessibleField.getRawField().getGenericType());  if (accessibleField.isFinal()) {    throw new OperationParseException("Cannot create setter for final field " + classname + "."+ opname);  }  List<Type> setInputTypeList=new ArrayList<>();  if (!accessibleField.isStatic()) {    setInputTypeList.add(classType);  }  setInputTypeList.add(fieldType);  return new TypedClassOperation(new FieldSet(accessibleField),classType,new TypeTuple(setInputTypeList),JavaTypes.VOID_TYPE);}  }
class C{  public static Collection<Object[]> wrap(final Collection<Integer> values){  return values.stream().map(null).collect(Collectors.toList());}  }
class C{  public FastVector(int capacity){  super(capacity);}  }
class C{  private final void removeAllChannels(){synchronized (_channels) {    _channels=new Hashtable<String,Hashtable<User,User>>();  }}  }
class C{  public boolean isFilterIQ(){  return filterIQ;}  }
class C{  public static Map<String,Object> alwaysApproveProcessor(DispatchContext dctx,Map<String,? extends Object> context){  Locale locale=(Locale)context.get("locale");  Map<String,Object> result=FastMap.newInstance();  Debug.logInfo("Test Processor Approving Credit Card",module);  String refNum=UtilDateTime.nowAsString();  result.put("authResult",Boolean.TRUE);  result.put("processAmount",context.get("processAmount"));  result.put("authRefNum",refNum);  result.put("authAltRefNum",refNum);  result.put("authCode","100");  result.put("authFlag","A");  result.put("authMessage",UtilProperties.getMessage(resource,"AccountingPaymentTestProcessor",locale));  return result;}  }
class C{  protected void initialNativeCheck() throws UnsatisfiedLinkError {}  }
class C{  @Override public void closeAndRun(String actionId,Runnable runnable){  ((Window)frame).closeAndRun(actionId,runnable);}  }
class C{  public static String checkNumeric(String data){  if (data == null || data.length() == 0)   return "";  StringBuffer sb=new StringBuffer();  for (int i=0; i < data.length(); i++) {    if (Character.isDigit(data.charAt(i)))     sb.append(data.charAt(i));  }  return sb.toString();}  }
class C{  protected void failPessimictic(){  IgniteCache<Object,Object> cache=jcache(0);  try (Transaction tx=grid(0).transactions().txStart(PESSIMISTIC,REPEATABLE_READ)){    cache.put(new TestKey(String.valueOf(++key)),"");    assert false : "p2p marshalling failed, but error response was not sent";  } catch (  CacheException e) {    assert X.hasCause(e,IOException.class);  }  assert readCnt.get() == 0;}  }
class C{  private byte[] entityToBytes(HttpEntity entity) throws IOException, ServerError {  PoolingByteArrayOutputStream bytes=new PoolingByteArrayOutputStream(mPool,(int)entity.getContentLength());  byte[] buffer=null;  try {    InputStream in=entity.getContent();    if (in == null) {      throw new ServerError();    }    buffer=mPool.getBuf(1024);    int count;    while ((count=in.read(buffer)) != -1) {      bytes.write(buffer,0,count);    }    return bytes.toByteArray();  }  finally {    try {      entity.consumeContent();    } catch (    IOException e) {      VolleyLog.v("Error occured when calling consumingContent");    }    mPool.returnBuf(buffer);    bytes.close();  }}  }
class C{  public JSUtils(){  resolver=new JavaScriptResolver();}  }
class C{  public final void trim(){  finishWriting();  if (this.buffer.limit() < this.buffer.capacity()) {    ByteBuffer bb=ByteBuffer.allocate(this.buffer.limit());    bb.put(this.buffer);    bb.flip();    this.buffer=bb;  }}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  TextView downloadTV=(TextView)this.findViewById(R.id.down_broadcast_image_tv);  downloadTV.setText(OBJECT_IMAGE_URL);  this.downloadBT=(Button)this.findViewById(R.id.down_broadcast_start_bt);  this.downloadIV=(ImageView)this.findViewById(R.id.down_broadcast_image_iv);}  }
class C{  private static LinkedList<GridTuple3<String,Long,File>> listFiles(File dir) throws IOException {  assert dir != null;  LinkedList<GridTuple3<String,Long,File>> paths=new LinkedList<>();  String[] configs=dir.list();  if (configs != null)   for (  String name : configs) {    File file=new File(dir,name);    if (file.isDirectory())     paths.addAll(listFiles(file)); else     if (file.getName().endsWith(".xml")) {      try (BufferedReader reader=new BufferedReader(new FileReader(file))){        boolean springCfg=false;        boolean ggCfg=false;        String line;        while ((line=reader.readLine()) != null) {          if (line.contains("http://www.springframework.org/schema/beans"))           springCfg=true;          if (line.contains("class=\"org.apache.ignite.configuration.IgniteConfiguration\""))           ggCfg=true;          if (springCfg && ggCfg)           break;        }        if (springCfg) {          String path=file.getAbsolutePath().substring(U.getIgniteHome().length());          if (path.startsWith(File.separator))           path=path.substring(File.separator.length());          if (!path.equals(DFLT_CFG)) {            if (!ggCfg)             path=Q_PREFIX + ' ' + path;            paths.add(F.t(path,file.lastModified(),file));          }        }      }     }  }  return paths;}  }
class C{  public static EndpointDescription[] selectBySecurityPolicy(EndpointDescription[] searchSet,SecurityPolicy policy){  List<EndpointDescription> result=new ArrayList<EndpointDescription>();  for (  EndpointDescription d : searchSet)   if (ObjectUtils.objectEquals(d.getSecurityPolicyUri(),policy.getPolicyUri()))   result.add(d);  return result.toArray(new EndpointDescription[result.size()]);}  }
class C{  public boolean isDoesNotExist(){  IJavaModelStatus javaModelStatus=getJavaModelStatus();  return javaModelStatus != null && javaModelStatus.isDoesNotExist();}  }
class C{  protected void checkEnoughDiskSpace(long requiredSize) throws IOException {  long freeSpace=downloadDir.toFile().getFreeSpace();  if (freeSpace < requiredSize) {    throw new IOException(format("Not enough disk space. Required %d bytes but available only %d bytes",requiredSize,freeSpace));  }}  }
class C{  public void handleClient() throws IOException {  boolean validQuery;  while (true) {    link.readAndParse();    validQuery=false;    System.out.println("TestLinkServer: fielding request");    LinkMapRequest graphicsQuery=link.getMapRequest();    LinkActionRequest gestureQuery=link.getActionRequest();    LinkActionList actionList=link.getActionList();    if (graphicsQuery != null) {      System.out.println((LinkMapRequest)graphicsQuery);      getRectangle(graphicsQuery,link);      validQuery=true;    }    if (gestureQuery != null) {      System.out.println(gestureQuery);      handleGesture(gestureQuery,link);      validQuery=true;    }    if (actionList != null) {      Vector graphicUpdates=actionList.getGraphicUpdates();      Iterator it=graphicUpdates.iterator();      while (it.hasNext()) {        GraphicUpdate gu=(GraphicUpdate)it.next();        if (gu != null) {          String id=gu.id;          System.out.println("TestLinkServer: graphic id = " + id);          OMGraphic graphic=gu.graphic;          int index=clientCreatedGraphics.getOMGraphicIndexWithId(id);          if (index != Link.UNKNOWN) {            System.out.println("TestLinkServer: modifying graphic");            clientCreatedGraphics.setOMGraphicAt(gu.graphic,index);          } else {            System.out.println("TestLinkServer: new graphic");            LinkProperties props=(LinkProperties)graphic.getAttribute(OMGraphic.APP_OBJECT);            props.setProperty(LPC_GRAPHICID,"graphic" + (newGraphicCounter++));            System.out.println("TestLinkServer: new graphic given id " + props);          }          clientCreatedGraphics.doAction(gu.graphic,new OMAction(gu.action));        }      }    }    if (!validQuery) {      huh(link);    }  }}  }
class C{  synchronized void ignoreSync(){  sync=null;}  }
class C{  private boolean isAvailable(){  if (jmdnsInstance != null) {    DNSStatefulObject dso=(DNSStatefulObject)jmdnsInstance;    return !(dso.isClosing() || dso.isClosed());  }  return false;}  }
class C{  protected void parseDefineBits(InStream in) throws IOException {  tagtypes.tagDefineBits(in.readUI16(),in.read());}  }
class C{  private void journalOverextended(final AbstractTask<?> task){  final double overextension=getJournalOverextended();  if (overextension >= 2d) {    log.error("overextended=" + (int)overextension + "x : "+ task.toString());  }}  }
class C{  protected ExecutionError(@Nullable String message){  super(message);}  }
class C{  public Throwable(String detailMessage,Throwable throwable){  this();  this.detailMessage=detailMessage;  cause=throwable;}  }
class C{  protected void processViews(SerializationConfig config,BeanSerializerBuilder builder){  List<BeanPropertyWriter> props=builder.getProperties();  boolean includeByDefault=config.isEnabled(SerializationConfig.Feature.DEFAULT_VIEW_INCLUSION);  final int propCount=props.size();  int viewsFound=0;  BeanPropertyWriter[] filtered=new BeanPropertyWriter[propCount];  for (int i=0; i < propCount; ++i) {    BeanPropertyWriter bpw=props.get(i);    Class<?>[] views=bpw.getViews();    if (views == null) {      if (includeByDefault) {        filtered[i]=bpw;      }    } else {      ++viewsFound;      filtered[i]=constructFilteredBeanWriter(bpw,views);    }  }  if (includeByDefault && viewsFound == 0) {    return;  }  builder.setFilteredProperties(filtered);}  }
class C{  public void close() throws java.io.IOException {  return;}  }
class C{  private void updateSelectAllCheckState(){  final CheckboxTableViewer viewer=((CheckboxTableViewer)getViewer());  final int checkedCount=getValidCheckedProjectsCount();  final int elementCount=removeNotValidVC(getProjects()).length;  if (checkedCount == elementCount && elementCount > 0) {    viewer.setChecked(SELECT_ALL_SPECIAL_PROJECT_INFO,true);    viewer.setGrayed(SELECT_ALL_SPECIAL_PROJECT_INFO,false);  } else   if (checkedCount == 0) {    viewer.setChecked(SELECT_ALL_SPECIAL_PROJECT_INFO,false);    viewer.setGrayed(SELECT_ALL_SPECIAL_PROJECT_INFO,false);  } else {    viewer.setChecked(SELECT_ALL_SPECIAL_PROJECT_INFO,true);    viewer.setGrayed(SELECT_ALL_SPECIAL_PROJECT_INFO,true);  }}  }
class C{  @Override public ImmutableSortedSet<K> keySet(){  return keySet;}  }
class C{  public String printString(){  StringWriter writer=new StringWriter();  if (instanceOf(Primitive.PARAGRAPH) && this.data == null) {    Collection<Vertex> sentences=orderedRelations(Primitive.SENTENCE);    if (sentences != null) {      boolean first=true;      String last="";      for (      Vertex each : sentences) {        if (last.length() > 0) {          Character terminator=last.charAt(last.length() - 1);          if (Character.isLetterOrDigit(terminator)) {            writer.write(".");          }        }        if (!first) {          writer.write("  ");        }        last=each.getData().toString();        writer.write(last);        first=false;      }    }  } else   if (instanceOf(Primitive.ARRAY)) {    Collection<Vertex> elements=orderedRelations(Primitive.ELEMENT);    writer.write("[");    if (elements != null) {      boolean first=true;      for (      Vertex each : elements) {        if (!first) {          writer.write(",  ");        }        writer.write(each.printString());        first=false;      }    }    writer.write("]");  } else   if (instanceOf(Primitive.LIST)) {    Collection<Vertex> elements=orderedRelations(Primitive.SEQUENCE);    writer.write("(");    if (elements != null) {      boolean first=true;      for (      Vertex each : elements) {        if (!first) {          writer.write(",  ");        }        writer.write(each.printString());        first=false;      }    }    writer.write(")");  } else   if (this.data != null) {    writer.write(this.data.toString());  } else   if (instanceOf(Primitive.FRAGMENT) || instanceOf(Primitive.SENTENCE)) {    return Language.printFragment(this,this.network.createVertex(Primitive.NULL),this.network.createVertex(Primitive.NULL),network);  } else   if (getName() != null) {    writer.write(getName());  } else {    writer.write("{" + String.valueOf(getId()) + "}");  }  return writer.toString();}  }
class C{  public StorageEntity createStorageEntity(String storageName){  return createStorageEntity(storageName,StoragePlatformEntity.S3);}  }
class C{  public String[] names(){  return metadata.keySet().toArray(new String[metadata.keySet().size()]);}  }
class C{  public RpfAttributes parseAttributes(BinaryFile binFile){  RpfLocationRecord lr=getRpfLocationRecord(LOC_ATTRIBUTE_SECTION_SUBHEADER);  if (lr == null) {    if (DEBUG_RPFDETAIL) {      Debug.error("RpfFileSections: attribute section not found!");    }    return null;  }  RpfAttributes attributes=new RpfAttributes();  if (attributes.read(binFile,lr.componentLocation)) {    if (DEBUG_RPFDETAIL)     Debug.output(attributes.toString());    return attributes;  }  return null;}  }
class C{  public void addTileEntity(TileEntity tileEntity){  this.addTileEntity(tileEntity.getPos(),tileEntity);  if (this.isCubeLoaded) {    this.getCubicWorld().addTileEntity(tileEntity);  }}  }
class C{  protected void firePositionClosed(TradePosition tradePosition){  Object[] listeners=this.listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == BrokerChangeListener.class) {      ((BrokerChangeListener)listeners[i + 1]).positionClosed(tradePosition);    }  }}  }
class C{  private static String fit(String s,int len){  int slen=s.length();  StringBuffer buf=new StringBuffer(s);  buf.setLength(len);  for (int i=slen; i < len; i++)   buf.setCharAt(i,' ');  return buf.toString();}  }
class C{  public void add_return(VasaAssociationObject param){  if (local_return == null) {    local_return=new VasaAssociationObject[]{};  }  local_returnTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(local_return);  list.add(param);  this.local_return=(VasaAssociationObject[])list.toArray(new VasaAssociationObject[list.size()]);}  }
class C{  public static void main(String[] args) throws Exception {  Model dataModel=JenaUtil.createMemoryModel();  dataModel.read(ValidationExample.class.getResourceAsStream("/sh/tests/core/property/class-001.test.ttl"),"urn:dummy",FileUtils.langTurtle);  Model shaclModel=SHACLSystemModel.getSHACLModel();  MultiUnion unionGraph=new MultiUnion(new Graph[]{shaclModel.getGraph(),dataModel.getGraph()});  Model shapesModel=ModelFactory.createModelForGraph(unionGraph);  SHACLFunctions.registerFunctions(shapesModel);  URI shapesGraphURI=URI.create("urn:x-shacl-shapes-graph:" + UUID.randomUUID().toString());  Dataset dataset=ARQFactory.get().getDataset(dataModel);  dataset.addNamedModel(shapesGraphURI.toString(),shapesModel);  Model results=ModelConstraintValidator.get().validateModel(dataset,shapesGraphURI,null,true,null,null);  System.out.println(ModelPrinter.get().print(results));}  }
class C{  public static boolean isLoad(int opcode){  return (flagsArray[opcode & 0xff] & LOAD) != 0;}  }
class C{  private Volume queryFullCopy(URI fullCopyURI){  return (Volume)queryResource(fullCopyURI);}  }
class C{  private void createGatheredEvent(String eventId,long creationTime,long subKey,long multiplier) throws NonUniqueBusinessKeyException {  GatheredEvent evt=new GatheredEvent();  evt.setEventId(eventId);  evt.setOccurrenceTime(creationTime);  evt.setType(EventType.SERVICE_EVENT);  evt.setSubscriptionTKey(subKey);  evt.setMultiplier(multiplier);  evt.setActor("actor");  dm.persist(evt);}  }
class C{  @Override public View newView(Context context,Cursor cursor,ViewGroup parent){  return mInflater.inflate(mLayout,parent,false);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public void addTranslation(float par1,float par2,float par3){  this.xOffset+=par1;  this.yOffset+=par2;  this.zOffset+=par3;}  }
class C{  private ComplianceFeature checkEncryptPolicy(org.wso2.emm.agent.beans.Operation operation){  boolean encryptStatus=(devicePolicyManager.getStorageEncryptionStatus() != devicePolicyManager.ENCRYPTION_STATUS_UNSUPPORTED && devicePolicyManager.getStorageEncryptionStatus() != devicePolicyManager.ENCRYPTION_STATUS_INACTIVE);  if ((operation.isEnabled() && encryptStatus) || (!operation.isEnabled() && !encryptStatus)) {    policy.setCompliance(true);  } else {    policy.setCompliance(false);    policy.setMessage(resources.getString(R.string.error_encrypt_policy));  }  return policy;}  }
class C{  public static void registerTileCodec(int comp,XTIFFTileCodec codec){  tileCodecs.put(new Integer(comp),codec);}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  void union(PurityGraph arg){  nodes.addAll(arg.nodes);  paramNodes.addAll(arg.paramNodes);  edges.putAll(arg.edges);  locals.putAll(arg.locals);  ret.addAll(arg.ret);  globEscape.addAll(arg.globEscape);  backEdges.putAll(arg.backEdges);  backLocals.putAll(arg.backLocals);  mutated.putAll(arg.mutated);  if (doCheck)   sanityCheck();}  }
class C{  public void delete() throws IOException {  close();  deleteContents(directory);}  }
class C{  @TargetApi(Build.VERSION_CODES.LOLLIPOP) private boolean isParentInAndroidOverview(){  ActivityManager activityManager=(ActivityManager)mActivity.getSystemService(Context.ACTIVITY_SERVICE);  for (  ActivityManager.AppTask task : activityManager.getAppTasks()) {    Intent taskIntent=DocumentUtils.getBaseIntentFromTask(task);    if (taskIntent != null && taskIntent.filterEquals(getParentIntent()))     return true;  }  return false;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.622 -0400",hash_original_method="0A174ACDCB49B94165896CFEF9819231",hash_generated_method="F5811F017433BFD7E87EDF7D2C287CBC") private static StringBuilder dump(StringBuilder _lbuffer,long value){  for (int j=0; j < 8; j++) {    _lbuffer.append(_hexcodes[(int)(value >> _shifts[j]) & 15]);  }  return _lbuffer;}  }
class C{  public boolean hasSuccessCount(){  return getSuccessCount() != 0;}  }
class C{  static PublicKey makeInheritedParamsKey(PublicKey keyValueKey,PublicKey keyParamsKey) throws CertPathValidatorException {  if (!(keyValueKey instanceof DSAPublicKey) || !(keyParamsKey instanceof DSAPublicKey))   throw new CertPathValidatorException("Input key is not " + "appropriate type for " + "inheriting parameters");  DSAParams params=((DSAPublicKey)keyParamsKey).getParams();  if (params == null)   throw new CertPathValidatorException("Key parameters missing");  try {    BigInteger y=((DSAPublicKey)keyValueKey).getY();    KeyFactory kf=KeyFactory.getInstance("DSA");    DSAPublicKeySpec ks=new DSAPublicKeySpec(y,params.getP(),params.getQ(),params.getG());    return kf.generatePublic(ks);  } catch (  GeneralSecurityException e) {    throw new CertPathValidatorException("Unable to generate key with" + " inherited parameters: " + e.getMessage(),e);  }}  }
class C{  protected boolean doInitialize(ResourceSpecifier specifier,Map<String,Object> additionalParams) throws ResourceInitializationException {  return true;}  }
class C{  @NotNull public PsiQuery parents(@NotNull final Class<? extends PsiElement> clazz,@NotNull final String name){  throw new RuntimeException("Not impl");}  }
class C{  private Object writeReplace(){  return new Ser(Ser.ZOT,this);}  }
class C{  public Task<FileShareRestRep> create(URI projectId,FileSystemParam input){  URI targetUri=client.uriBuilder(baseUrl).queryParam(PROJECT_PARAM,projectId).build();  return postTaskURI(input,targetUri);}  }
class C{  public static List<List<Integer>> subsetsWithDup(int[] num){  List<List<Integer>> res=new ArrayList<List<Integer>>();  if (null == num || num.length == 0)   return res;  Arrays.sort(num);  subsetsHelper(res,new ArrayList<Integer>(),num,0);  return res;}  }
class C{  public final void addParentView(View parentView){  parentViews.add(parentView);}  }
class C{  public PutIndexTemplateRequest name(String name){  this.name=name;  return this;}  }
class C{  private AutomonExpirable populateArgNamesAndValues_InExceptionContext(JoinPoint jp,Throwable throwable){  AutomonExpirable exceptionContext=get(throwable);  if (exceptionContext.getArgNamesAndValues() == null) {    exceptionContext.setArgNamesAndValues(Utils.getArgNameValuePairs(jp));  }  return exceptionContext;}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,int options){  if (source == null) {    throw new NullPointerException("Source array was null.");  }  if (destination == null) {    throw new NullPointerException("Destination array was null.");  }  if (srcOffset < 0 || srcOffset + 3 >= source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and still process four bytes.",source.length,srcOffset));  }  if (destOffset < 0 || destOffset + 2 >= destination.length) {    throw new IllegalArgumentException(String.format("Destination array with length %d cannot have offset of %d and still store three bytes.",destination.length,destOffset));  }  byte[] DECODABET=getDecodabet(options);  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6)| ((DECODABET[source[srcOffset + 3]] & 0xFF));    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected void noRecordSelected(){  m_C_Invoice_ID=0;  p_detailTaskPane.setCollapsed(true);  return;}  }
class C{  public void execute(Form form) throws XMPPException {  executeAction(Action.execute,form,packetReplyTimeout);}  }
class C{  public Builder withOpenSettingsButton(@StringRes int buttonTextResourceId){  return withOpenSettingsButton(rootView.getContext().getString(buttonTextResourceId));}  }
class C{  static ClassLoader findClassLoader() throws ConfigurationError {  SecuritySupport ss=SecuritySupport.getInstance();  ClassLoader context=ss.getContextClassLoader();  ClassLoader system=ss.getSystemClassLoader();  ClassLoader chain=system;  while (true) {    if (context == chain) {      ClassLoader current=ObjectFactory.class.getClassLoader();      chain=system;      while (true) {        if (current == chain) {          return system;        }        if (chain == null) {          break;        }        chain=ss.getParentClassLoader(chain);      }      return current;    }    if (chain == null) {      break;    }    chain=ss.getParentClassLoader(chain);  }  ;  return context;}  }
class C{  public static boolean mkdirs(String directoryName){  return new File(directoryName).mkdirs();}  }
class C{  public AllocatedSection allocateSection(AllocationRequest ar,Section ns){  AllocatedSection as=null;  Section nextSection=null;  int nextSectionSeqNo=0;  if (ar != null) {    ActiveTrain at=ar.getActiveTrain();    if (at.holdAllocation() || at.reachedRestartPoint()) {      return null;    }    Section s=ar.getSection();    if (s.getState() != Section.FREE) {      return null;    }    boolean checkOccupancy=true;    if ((at.getLastAllocatedSection() == null) && (s.containsBlock(at.getStartBlock()))) {      checkOccupancy=false;    }    if (checkOccupancy && (s.getOccupancy() == Section.OCCUPIED)) {      if (_AutoAllocate) {        return null;      }      int selectedValue=JOptionPane.showOptionDialog(dispatcherFrame,rb.getString("Question1"),rb.getString("WarningTitle"),JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,new Object[]{rb.getString("ButtonYes"),rb.getString("ButtonNo")},rb.getString("ButtonNo"));      if (selectedValue == 1) {        return null;      }    }    if (checkOccupancy && (!at.getStarted()) && at.getDelayedStart() != ActiveTrain.NODELAY) {      if (_AutoAllocate) {        return null;      }      int selectedValue=JOptionPane.showOptionDialog(dispatcherFrame,rb.getString("Question4"),rb.getString("WarningTitle"),JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,new Object[]{rb.getString("ButtonYes"),rb.getString("ButtonNo")},rb.getString("ButtonNo"));      if (selectedValue == 1) {        return null;      } else {        at.setStarted();        for (int i=delayedTrains.size() - 1; i >= 0; i--) {          if (delayedTrains.get(i) == at) {            delayedTrains.remove(i);          }        }      }    }    if (getSignalType() == SIGNALMAST && checkBlocksNotInAllocatedSection(s,ar) != null) {      return null;    }    if (ns != null) {      nextSection=ns;    } else     if ((ar.getSectionSeqNumber() != -99) && (at.getNextSectionSeqNumber() == ar.getSectionSeqNumber()) && (!((s == at.getEndBlockSection()) && (ar.getSectionSeqNumber() == at.getEndBlockSectionSequenceNumber())))&& (!(at.isAllocationReversed() && (ar.getSectionSeqNumber() == 1)))) {      int seqNum=ar.getSectionSeqNumber();      if (at.isAllocationReversed()) {        seqNum-=1;      } else {        seqNum+=1;      }      ArrayList<Section> secList=at.getTransit().getSectionListBySeq(seqNum);      if (secList.size() == 1) {        nextSection=secList.get(0);      } else       if (secList.size() > 1) {        if (_AutoAllocate) {          nextSection=autoChoice(secList,ar);        } else {          nextSection=dispatcherChoice(secList,ar);        }      }      nextSectionSeqNo=seqNum;    } else     if (at.getReverseAtEnd() && (!at.isAllocationReversed()) && (s == at.getEndBlockSection())&& (ar.getSectionSeqNumber() == at.getEndBlockSectionSequenceNumber())) {      nextSectionSeqNo=at.getEndBlockSectionSequenceNumber() - 1;      at.setAllocationReversed(true);      ArrayList<Section> secList=at.getTransit().getSectionListBySeq(nextSectionSeqNo);      if (secList.size() == 1) {        nextSection=secList.get(0);      } else       if (secList.size() > 1) {        if (_AutoAllocate) {          nextSection=autoChoice(secList,ar);        } else {          nextSection=dispatcherChoice(secList,ar);        }      }    } else     if (((!at.isAllocationReversed()) && (s == at.getEndBlockSection()) && (ar.getSectionSeqNumber() == at.getEndBlockSectionSequenceNumber())) || (at.isAllocationReversed() && (ar.getSectionSeqNumber() == 1))) {      if (at.getResetWhenDone()) {        if (at.getDelayedRestart() != ActiveTrain.NODELAY) {          at.holdAllocation(true);        }        nextSection=at.getSecondAllocatedSection();        nextSectionSeqNo=2;        at.setAllocationReversed(false);      }    }    ArrayList<Section> intermediateSections=new ArrayList<Section>();    Section mastHeldAtSection=null;    if (nextSection != null && ar.getSection().getProperty("intermediateSection") != null && ((Boolean)ar.getSection().getProperty("intermediateSection")).booleanValue()) {      String property="forwardMast";      if (at.isAllocationReversed()) {        property="reverseMast";      }      if (ar.getSection().getProperty(property) != null) {        SignalMast endMast=InstanceManager.getDefault(jmri.SignalMastManager.class).getSignalMast(ar.getSection().getProperty(property).toString());        if (endMast != null) {          if (endMast.getHeld()) {            mastHeldAtSection=ar.getSection();          }        }      }      ArrayList<TransitSection> tsList=ar.getActiveTrain().getTransit().getTransitSectionList();      boolean found=false;      if (at.isAllocationReversed()) {        for (int i=tsList.size() - 1; i > 0; i--) {          TransitSection ts=tsList.get(i);          if (ts.getSection() == ar.getSection() && ts.getSequenceNumber() == ar.getSectionSeqNumber()) {            found=true;          } else           if (found) {            if (ts.getSection().getProperty("intermediateSection") != null && ((Boolean)ts.getSection().getProperty("intermediateSection")).booleanValue()) {              intermediateSections.add(ts.getSection());            } else {              intermediateSections.add(ts.getSection());              break;            }          }        }      } else {        for (int i=0; i <= tsList.size() - 1; i++) {          TransitSection ts=tsList.get(i);          if (ts.getSection() == ar.getSection() && ts.getSequenceNumber() == ar.getSectionSeqNumber()) {            found=true;          } else           if (found) {            if (ts.getSection().getProperty("intermediateSection") != null && ((Boolean)ts.getSection().getProperty("intermediateSection")).booleanValue()) {              intermediateSections.add(ts.getSection());            } else {              intermediateSections.add(ts.getSection());              break;            }          }        }      }      boolean intermediatesOccupied=false;      for (int i=0; i < intermediateSections.size() - 1; i++) {        Section se=intermediateSections.get(i);        if (se.getState() == Section.FREE) {          Section conflict=checkBlocksNotInAllocatedSection(se,null);          if (conflict != null) {            return null;          } else {            if (mastHeldAtSection == null) {              if (se.getProperty(property) != null) {                SignalMast endMast=InstanceManager.getDefault(jmri.SignalMastManager.class).getSignalMast(se.getProperty(property).toString());                if (endMast != null && endMast.getHeld()) {                  mastHeldAtSection=se;                }              }            }          }        } else         if (at.getLastAllocatedSection() != null && se.getState() != at.getLastAllocatedSection().getState()) {          return null;        } else {          intermediatesOccupied=true;        }      }      if (intermediatesOccupied) {        intermediateSections=new ArrayList<Section>();      }    }    if ((_UseConnectivity) && (ar.getSectionSeqNumber() != -99)) {      if (!checkTurnoutStates(s,ar.getSectionSeqNumber(),nextSection,at,at.getLastAllocatedSection())) {        return null;      }      Section preSec=s;      Section tmpcur=nextSection;      int tmpSeqNo=nextSectionSeqNo;      for (int i=1; i < intermediateSections.size(); i++) {        Section se=intermediateSections.get(i);        if (preSec == mastHeldAtSection) {          log.debug("Section is beyond held mast do not set turnouts " + (tmpcur != null ? tmpcur.getDisplayName() : "null"));          break;        }        if (!checkTurnoutStates(tmpcur,tmpSeqNo,se,at,preSec)) {          return null;        }        preSec=tmpcur;        tmpcur=se;        if (at.isAllocationReversed()) {          tmpSeqNo-=1;        } else {          tmpSeqNo+=1;        }      }    }    as=allocateSection(at,s,ar.getSectionSeqNumber(),nextSection,nextSectionSeqNo,ar.getSectionDirection());    if (intermediateSections.size() > 1 && mastHeldAtSection != s) {      Section tmpcur=nextSection;      int tmpSeqNo=nextSectionSeqNo;      int tmpNxtSeqNo=tmpSeqNo;      if (at.isAllocationReversed()) {        tmpNxtSeqNo-=1;      } else {        tmpNxtSeqNo+=1;      }      for (int i=1; i < intermediateSections.size(); i++) {        if (tmpcur == mastHeldAtSection) {          log.debug("Section is beyond held mast do not allocate any more sections " + (tmpcur != null ? tmpcur.getDisplayName() : "null"));          break;        }        Section se=intermediateSections.get(i);        as=allocateSection(at,tmpcur,tmpSeqNo,se,tmpNxtSeqNo,ar.getSectionDirection());        tmpcur=se;        if (at.isAllocationReversed()) {          tmpSeqNo-=1;          tmpNxtSeqNo-=1;        } else {          tmpSeqNo+=1;          tmpNxtSeqNo+=1;        }      }    }    int ix=-1;    for (int i=0; i < allocationRequests.size(); i++) {      if (ar == allocationRequests.get(i)) {        ix=i;      }    }    allocationRequests.remove(ix);    ar.dispose();    allocationRequestTableModel.fireTableDataChanged();    activeTrainsTableModel.fireTableDataChanged();    if (allocatedSectionTableModel != null) {      allocatedSectionTableModel.fireTableDataChanged();    }    if (extraFrame != null) {      cancelExtraRequested(null);    }    if (_AutoAllocate) {      requestNextAllocation(at);      autoAllocate.scanAllocationRequestList(allocationRequests);    }  } else {    log.error("Null Allocation Request provided in request to allocate a section");  }  return as;}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("M_Warehouse_ID"))     p_M_Warehouse_ID=para[i].getParameterAsInt(); else     if (name.equals("C_BPartner_ID"))     p_C_BPartner_ID=para[i].getParameterAsInt(); else     if (name.equals("M_Product_Category_ID"))     p_M_Product_Category_ID=para[i].getParameterAsInt(); else     if (name.equals("IsKanban"))     isKanban=(String)para[i].getParameter(); else     if (name.equals("ReplenishmentCreate"))     p_ReplenishmentCreate=(String)para[i].getParameter(); else     if (name.equals("C_DocType_ID"))     p_C_DocType_ID=para[i].getParameterAsInt(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  public void updateSeries(CandleSeries source,int skip,boolean newBar){  if (source == null) {    throw new IllegalArgumentException("Null source (CandleSeries).");  }  if (source.getItemCount() > skip) {    CandleItem candleItem=(CandleItem)source.getDataItem(skip);    if (source.getItemCount() > 1) {      int index=this.indexOf(candleItem.getPeriod());      double xOpenPrev=0;      double xClosePrev=0;      if (index < 1) {        if (this.isEmpty()) {          xOpenPrev=candleItem.getOpen();          xClosePrev=candleItem.getClose();        } else {          HeikinAshiItem prevItem=(HeikinAshiItem)this.getDataItem(this.getItemCount() - 1);          xClosePrev=prevItem.getClose();          xOpenPrev=prevItem.getOpen();        }      } else {        HeikinAshiItem prevItem=(HeikinAshiItem)this.getDataItem(this.getItemCount() - 2);        xClosePrev=prevItem.getClose();        xOpenPrev=prevItem.getOpen();      }      double xClose=(candleItem.getOpen() + candleItem.getHigh() + candleItem.getLow()+ candleItem.getClose()) / 4;      double xOpen=(xOpenPrev + xClosePrev) / 2;      double xHigh=Math.max(candleItem.getHigh(),Math.max(xClosePrev,xOpenPrev));      double xLow=Math.min(candleItem.getLow(),Math.min(xClosePrev,xOpenPrev));      if (index < 0) {        this.add(new HeikinAshiItem(source.getContract(),candleItem.getPeriod(),xOpen,xHigh,xLow,xClose,candleItem.getLastUpdateDate()),false);      } else {        HeikinAshiItem currDataItem=(HeikinAshiItem)this.getDataItem(index);        currDataItem.setOpen(xOpen);        currDataItem.setHigh(xHigh);        currDataItem.setLow(xLow);        currDataItem.setClose(xClose);        currDataItem.setLastUpdateDate(candleItem.getLastUpdateDate());      }    }  }}  }
class C{  public List<UsuarioVO> findByNameSurname(String name,String surname){  StringBuffer qual=new StringBuffer("WHERE ");  if (name == null) {    qual.append("(").append(DBUtils.generateLikeTokenField(CAMPO_NOMBRE,"",true)).append(DBUtils.OR).append(CAMPO_NOMBRE.getQualifiedName()).append(" IS NULL)");  } else   qual.append(DBUtils.generateLikeTokenField(CAMPO_NOMBRE,name,true));  qual.append(" AND ");  if (surname == null) {    qual.append("(").append(DBUtils.generateLikeTokenField(CAMPO_APELLIDOS,"",true)).append(DBUtils.OR).append(CAMPO_APELLIDOS.getQualifiedName()).append(" IS NULL)");  } else   qual.append(DBUtils.generateLikeTokenField(CAMPO_APELLIDOS,surname,true));  return getVOS(qual.toString(),TABLE_NAME,COL_DEFS,UsuarioVO.class);}  }
class C{  private JFind(java.awt.Frame parent,boolean modal){  super(parent,modal);}  }
class C{  public boolean isNearlyOrthogonalTo(DoubleVector v,double tolerance){  return Math.abs(this.dotProduct(v) / (this.norm() * v.norm())) < tolerance;}  }
class C{  public pre(Element element,int width){  setWidth(width);  addElement(element);}  }
class C{  public boolean isClosed(){  return STATUS_Closed.equals(m_status);}  }
class C{  public static Map<String,Object> returnError(String errorMessage){  return returnProblem(ModelService.RESPOND_ERROR,errorMessage,null,null,null);}  }
class C{  public Builder addRole(Role role){  roles.add(role);  return this;}  }
class C{  public void updateAllowImplicidQueryCall(Boolean allow) throws SecurityException {  checkWriteAccess();  boolean hasAccess=ConfigWebUtil.hasAccess(config,SecurityManager.TYPE_SETTING);  if (!hasAccess)   throw new SecurityException("no access to update scope setting");  Element scope=_getRootElement("scope");  scope.setAttribute("cascade-to-resultset",Caster.toString(allow,""));}  }
class C{  public static void putLong(final String key,final long value){  final Editor editor=getOptimusPref().edit();  editor.putLong(key,value);  editor.apply();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.TSTRUCT_SETTER__DEFINED_MEMBER:    return definedMember != null;}return super.eIsSet(featureID);}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  final RPAction summon=new RPAction();  final NameBuilder nameBuilder=new NameBuilder();  Integer x=null;  Integer y=null;  for (int i=0; i < params.length; ++i) {    final String str=params[i];    if (str != null) {      if (str.matches("[0-9].*")) {        try {          final Integer num=Integer.valueOf(str);          if (x == null) {            x=num;          } else           if (y == null) {            y=num;          } else {            nameBuilder.append(str);          }        } catch (        final NumberFormatException e) {          ClientSingletonRepository.getUserInterface().addEventLine(new StandardEventLine("Invalid number: " + str));          return true;        }      } else {        nameBuilder.append(str);      }    }  }  summon.put("type","summon");  summon.put("creature",nameBuilder.toString());  if (x != null) {    if (y != null) {      summon.put("x",x);      summon.put("y",y);    } else {      return false;    }  } else {    summon.put("x",(int)User.get().getX());    summon.put("y",(int)User.get().getY());  }  ClientSingletonRepository.getClientFramework().send(summon);  return true;}  }
class C{  public static <T extends Date>String dateFrom(T date){  checkNotNull(date);  return dateFrom(new DateTime(date));}  }
class C{  public Resin2xStandaloneLocalConfigurationCapability(){  this.propertySupportMap.put(GeneralPropertySet.PROTOCOL,Boolean.FALSE);  this.propertySupportMap.put(GeneralPropertySet.HOSTNAME,Boolean.FALSE);  this.propertySupportMap.put(DatasourcePropertySet.DATASOURCE,Boolean.TRUE);  this.propertySupportMap.put(ResourcePropertySet.RESOURCE,Boolean.TRUE);}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == NamedElement.class) {switch (baseOperationID) {case N4JSPackage.NAMED_ELEMENT___GET_NAME:      return N4JSPackage.N4_FIELD_DECLARATION___GET_NAME;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == N4MemberDeclaration.class) {switch (baseOperationID) {case N4JSPackage.N4_MEMBER_DECLARATION___GET_DEFINED_TYPE_ELEMENT:  return N4JSPackage.N4_FIELD_DECLARATION___GET_DEFINED_TYPE_ELEMENT;case N4JSPackage.N4_MEMBER_DECLARATION___IS_STATIC:return N4JSPackage.N4_FIELD_DECLARATION___IS_STATIC;case N4JSPackage.N4_MEMBER_DECLARATION___GET_NAME:return N4JSPackage.N4_FIELD_DECLARATION___GET_NAME;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == TypedElement.class) {switch (baseOperationID) {default :return -1;}}if (baseClass == ThisArgProvider.class) {switch (baseOperationID) {default :return -1;}}if (baseClass == PropertyNameOwner.class) {switch (baseOperationID) {case N4JSPackage.PROPERTY_NAME_OWNER___GET_NAME:return N4JSPackage.N4_FIELD_DECLARATION___GET_NAME;case N4JSPackage.PROPERTY_NAME_OWNER___IS_VALID_NAME:return N4JSPackage.N4_FIELD_DECLARATION___IS_VALID_NAME;default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public String name(){  return name;}  }
class C{  public static boolean isBlockPlacableOnSide(World world,int x,int y,int z,ForgeDirection dir){  if (world.isAirBlock(x,y,z))   return false;  final Block b=world.getBlock(x,y,z);  if (b != null) {    return b.isBlockSolid(world,x,y,z,dir.ordinal());  }  return false;}  }
class C{  public static DeactivateInstanceResponseE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  DeactivateInstanceResponseE object=new DeactivateInstanceResponseE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","deactivateInstanceResponse").equals(reader.getName())) {          object.setDeactivateInstanceResponse(org.oscm.xsd.DeactivateInstanceResponse.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  void queueIsEmpty(){  for (Node p=head; p != null; p=p.next) {    Itr it=p.get();    if (it != null) {      p.clear();      it.shutdown();    }  }  head=null;  itrs=null;}  }
class C{  public @Nonnull Block provideBlock(@Nonnull String name){  Block b=getBlock(name);  if (b != null) {    return b;  }  if (name.startsWith(getSystemPrefix() + typeLetter())) {    b=createNewBlock(name,null);  } else {    b=createNewBlock(makeSystemName(name),null);  }  return b;}  }
class C{  public WindowsSplitPaneDivider(BasicSplitPaneUI ui){  super(ui);}  }
class C{  public static Matrix identity(int n){  Matrix id=new Matrix(n,n);  for (int i=0; i < n; i++)   id.values[i][i]=1;  return id;}  }
class C{  @Override public void removeServerPortAlias(String portAlias){  JedisPool pool=new JedisPool(new JedisPoolConfig(),redisIp,Integer.parseInt(redisPort),3000);  Jedis jedis=pool.getResource();  try {    String frontend="frontend:" + portAlias;    logger.info(frontend);    jedis.del(frontend.toLowerCase());  } catch (  JedisConnectionException e) {    logger.error("HipacheRedisUtils Exception",e);  } finally {    if (jedis != null) {      pool.destroy();      pool.close();    }  }}  }
class C{  public void extraCerts() throws Exception {  SignatureVerifier verifier=createSignatureVerifier("extra-certs.xml");  verifier.verify(CORRECT_MEMBER,CORRECT_VALIDATION_DATE);}  }
class C{  public static boolean uploadWaypoint(String mapId,Waypoint waypoint,MapsClient mapsClient,String authToken,MapsGDataConverter mapsGDataConverter) throws ParseException, HttpException, IOException {  String featuresFeed=MapsClient.getFeaturesFeed(mapId);  MapsFeature feature=buildMapsMarkerFeature(waypoint.getName(),waypoint.getDescription(),waypoint.getIcon(),waypoint.getLocation());  Entry entry=mapsGDataConverter.getEntryForFeature(feature);  try {    mapsClient.createEntry(featuresFeed,authToken,entry);  } catch (  IOException e) {    Log.d(TAG,"Retry upload waypoint",e);    mapsClient.createEntry(featuresFeed,authToken,entry);  }  return true;}  }
class C{  public Literal createLiteral(){  LiteralImpl literal=new LiteralImpl();  return literal;}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/snapshot-sessions") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.ANY}) public TaskList createSnapshotSession(@PathParam("id") URI id,SnapshotSessionCreateParam param){  return getSnapshotSessionManager().createSnapshotSession(id,param,getFullCopyManager());}  }
class C{  public boolean replyOnError(){  return replyOnError;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  zone.setMoveToAllowed(false);}  }
class C{  public CSVParser(char separator,char quotechar,char escape,boolean strictQuotes){  this(separator,quotechar,escape,strictQuotes,DEFAULT_IGNORE_LEADING_WHITESPACE);}  }
class C{  public final long readLong() throws IOException {  readFully(scratch,0,SizeOf.LONG);  return Memory.peekLong(scratch,0,ByteOrder.BIG_ENDIAN);}  }
class C{  protected void removeClientProxy(CacheClientProxy proxy){  ClientProxyMembershipID client=proxy.getProxyID();  this._clientProxies.remove(client);  this._connectionListener.queueRemoved();  ((GemFireCacheImpl)this.getCache()).cleanupForClient(this,client);  if (!(proxy.clientConflation == HandShake.CONFLATION_ON)) {    ClientHealthMonitor chm=ClientHealthMonitor.getInstance();    if (chm != null) {      chm.numOfClientsPerVersion.decrementAndGet(proxy.getVersion().ordinal());    }  }}  }
class C{  public static void cancelThumbnailRequest(ContentResolver cr,long origId,long groupId){  InternalThumbnails.cancelThumbnailRequest(cr,origId,EXTERNAL_CONTENT_URI,groupId);}  }
