class C{  void markStaleChildren(){  if (!mHasStaleChildren) {    mHasStaleChildren=true;    requestLayout();  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.657 -0400",hash_original_method="B4759F01CF5E4CDF4AA4061B5D979652",hash_generated_method="C02ACDC6ABE91F179513EE3945969CFE") @Override public boolean accept(File file){  return !filter.accept(file);}  }
class C{  private int measureHeight(final int measureSpec){  float result;  final int specMode=MeasureSpec.getMode(measureSpec);  final int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)Math.ceil(result);}  }
class C{  public Map<Span,SuffixArraySample> lookupFrequentSourceNgrams(int sampleSize,int minOccurrences){  if (sampleSize >= minOccurrences)   throw new IllegalArgumentException();  if (srcSuffixArray.length == 0)   return Collections.emptyMap();  logger.info("Building query cache with threshold {}",minOccurrences);  Map<Span,SuffixArraySample> queryCache=new HashMap<>(1000);  int nCnt=1, nnCnt=1, nnnCnt=1;  int nStart=0, nnStart=0, nnnStart=0;  Suffix firstSuffix=new Suffix(srcSuffixArray[0],true);  Span nSpan=new Span(firstSuffix,1), nnSpan=new Span(firstSuffix,2), nnnSpan=new Span(firstSuffix,3);  for (int i=1; i < srcSuffixArray.length; ++i) {    Suffix suffix=new Suffix(srcSuffixArray[i],true);    Span nSpanThis=new Span(suffix,1);    Span nnSpanThis=new Span(suffix,2);    Span nnnSpanThis=new Span(suffix,3);    nCnt=checkSpan(nSpan,nSpanThis,nStart,i,nCnt,minOccurrences,sampleSize,queryCache);    if (nCnt == 1) {      nStart=i;      nSpan=nSpanThis;    }    nnCnt=checkSpan(nnSpan,nnSpanThis,nnStart,i,nnCnt,minOccurrences,sampleSize,queryCache);    if (nnCnt == 1) {      nnStart=i;      nnSpan=nnSpanThis;    }    nnnCnt=checkSpan(nnnSpan,nnnSpanThis,nnnStart,i,nnnCnt,minOccurrences,sampleSize,queryCache);    if (nnnCnt == 1) {      nnnStart=i;      nnnSpan=nnnSpanThis;    }  }  ;  logger.info("Query cache size: {}",queryCache.size());  logger.info("Creating target unigram caches for the count() function...");  this.tgtCountLBCache=new int[vocabulary.size()];  Arrays.fill(tgtCountLBCache,-1);  this.tgtCountUBCache=new int[vocabulary.size()];  Arrays.fill(tgtCountUBCache,-1);  int lastId=tgtBitext[tgtSuffixArray[0]];  for (int i=0; i < tgtSuffixArray.length; ++i) {    int tgtId=tgtBitext[tgtSuffixArray[i]];    assert tgtId >= 0;    if (tgtCountLBCache[tgtId] < 0) {      tgtCountLBCache[tgtId]=i;    }    if (lastId != tgtId) {      tgtCountUBCache[lastId]=i - 1;      assert tgtCountUBCache[lastId] >= tgtCountLBCache[lastId] : String.format("%d %d %d",i,lastId,tgtId);    }    lastId=tgtId;  }  tgtCountUBCache[lastId]=tgtSuffixArray.length;  assert tgtCountUBCache[lastId] >= tgtCountLBCache[lastId] : String.format("%d %d final",tgtSuffixArray.length,lastId);  logger.info("Finished building count() cache.");  return queryCache;}  }
class C{  @Override BufferedImage applyEffect(BufferedImage src,BufferedImage dst,int w,int h){  if (src == null || src.getType() != BufferedImage.TYPE_INT_ARGB) {    throw new IllegalArgumentException("Effect only works with " + "source images of type BufferedImage.TYPE_INT_ARGB.");  }  if (dst != null && dst.getType() != BufferedImage.TYPE_INT_ARGB) {    throw new IllegalArgumentException("Effect only works with " + "destination images of type BufferedImage.TYPE_INT_ARGB.");  }  double trangleAngle=Math.toRadians(angle - 90);  int offsetX=(int)(Math.sin(trangleAngle) * distance);  int offsetY=(int)(Math.cos(trangleAngle) * distance);  int tmpOffX=offsetX + size;  int tmpOffY=offsetX + size;  int tmpW=w + offsetX + size+ size;  int tmpH=h + offsetX + size;  int[] lineBuf=getArrayCache().getTmpIntArray(w);  byte[] tmpBuf1=getArrayCache().getTmpByteArray1(tmpW * tmpH);  Arrays.fill(tmpBuf1,(byte)0x00);  byte[] tmpBuf2=getArrayCache().getTmpByteArray2(tmpW * tmpH);  Raster srcRaster=src.getRaster();  for (int y=0; y < h; y++) {    int dy=(y + tmpOffY);    int offset=dy * tmpW;    srcRaster.getDataElements(0,y,w,1,lineBuf);    for (int x=0; x < w; x++) {      int dx=x + tmpOffX;      tmpBuf1[offset + dx]=(byte)((lineBuf[x] & 0xFF000000) >>> 24);    }  }  float[] kernel=EffectUtils.createGaussianKernel(size);  EffectUtils.blur(tmpBuf1,tmpBuf2,tmpW,tmpH,kernel,size);  EffectUtils.blur(tmpBuf2,tmpBuf1,tmpH,tmpW,kernel,size);  float spread=Math.min(1 / (1 - (0.01f * this.spread)),255);  for (int i=0; i < tmpBuf1.length; i++) {    int val=(int)(((int)tmpBuf1[i] & 0xFF) * spread);    tmpBuf1[i]=(val > 255) ? (byte)0xFF : (byte)val;  }  if (dst == null)   dst=new BufferedImage(w,h,BufferedImage.TYPE_INT_ARGB);  WritableRaster shadowRaster=dst.getRaster();  int red=color.getRed(), green=color.getGreen(), blue=color.getBlue();  for (int y=0; y < h; y++) {    int srcY=y + tmpOffY;    int shadowOffset=(srcY - offsetY) * tmpW;    for (int x=0; x < w; x++) {      int srcX=x + tmpOffX;      lineBuf[x]=tmpBuf1[shadowOffset + (srcX - offsetX)] << 24 | red << 16 | green << 8 | blue;    }    shadowRaster.setDataElements(0,y,w,1,lineBuf);  }  return dst;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public StrTokenizer(final String input){  super();  if (input != null) {    chars=input.toCharArray();  } else {    chars=null;  }}  }
class C{  public DeserializationSpeedMetric(int iterations){  this(iterations,false);}  }
class C{  public boolean isPreferencesValid(){  return false;}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'FEED_ACCOUNT' ("+ "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ,"+ "'NAME' TEXT,"+ "'RESERVED' TEXT);");}  }
class C{  public static boolean equal(File file1,File file2) throws IOException {  checkNotNull(file1);  checkNotNull(file2);  if (file1 == file2 || file1.equals(file2)) {    return true;  }  long len1=file1.length();  long len2=file2.length();  if (len1 != 0 && len2 != 0 && len1 != len2) {    return false;  }  return asByteSource(file1).contentEquals(asByteSource(file2));}  }
class C{  public Vector3d sub(Vector3fc v){  x-=v.x();  y-=v.y();  z-=v.z();  return this;}  }
class C{  public Album(Context context,Uri mediaUri){  super();  media.add(0,new Media(context,mediaUri));  setCurrentPhotoIndex(0);}  }
class C{  public static boolean equals(byte[] array1,byte[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  private static void printCloudletList(List<Cloudlet> list){  int size=list.size();  Cloudlet cloudlet;  String indent="    ";  Log.printLine();  Log.printLine("========== OUTPUT ==========");  Log.printLine("Cloudlet ID" + indent + "STATUS"+ indent+ "Data center ID"+ indent+ "VM ID"+ indent+ "Time"+ indent+ "Start Time"+ indent+ "Finish Time");  for (int i=0; i < size; i++) {    cloudlet=list.get(i);    Log.print(indent + cloudlet.getCloudletId() + indent+ indent);    if (cloudlet.getCloudletStatus() == Cloudlet.SUCCESS) {      Log.print("SUCCESS");      DecimalFormat dft=new DecimalFormat("###.##");      Log.printLine(indent + indent + cloudlet.getResourceId()+ indent+ indent+ indent+ cloudlet.getVmId()+ indent+ indent+ dft.format(cloudlet.getActualCPUTime())+ indent+ indent+ dft.format(cloudlet.getExecStartTime())+ indent+ indent+ dft.format(cloudlet.getFinishTime()));    }  }}  }
class C{  private void appendCharsetByteForHandshake(Buffer packet,String enc) throws SQLException {  int charsetIndex=0;  if (enc != null) {    charsetIndex=CharsetMapping.getCollationIndexForJavaEncoding(enc,this.connection);  }  if (charsetIndex == 0) {    charsetIndex=CharsetMapping.MYSQL_COLLATION_INDEX_utf8;  }  if (charsetIndex > 255) {    throw SQLError.createSQLException("Invalid character set index for encoding: " + enc,SQLError.SQL_STATE_ILLEGAL_ARGUMENT,getExceptionInterceptor());  }  packet.writeByte((byte)charsetIndex);}  }
class C{  public boolean recreateRSetStep(URI rpSystemId,List<URI> volumeIds,Map<String,RecreateReplicationSetRequestParams> rsetParams,String token) throws InternalException {  List<String> replicationSetNames=new ArrayList<String>();  try {    ProtectionSystem rpSystem=_dbClient.queryObject(ProtectionSystem.class,rpSystemId);    for (    URI volumeId : volumeIds) {      Volume volume=_dbClient.queryObject(Volume.class,volumeId);      replicationSetNames.add(volume.getRSetName());    }    RecoverPointClient rp=RPHelper.getRecoverPointClient(rpSystem);    _log.info("Sleeping for 15 seconds before rescanning bus to account for latencies.");    try {      Thread.sleep(15000);    } catch (    InterruptedException e) {      _log.warn("Thread sleep interrupted.  Allowing to continue without sleep");    }    rp.recreateReplicationSets(rsetParams);    WorkflowStepCompleter.stepSucceded(token);  } catch (  Exception e) {    _log.error(String.format("recreateRSetStep Failed - Replication Set(s): %s",replicationSetNames.toString()));    return stepFailed(token,e,"recreateRSetStep");  }  return true;}  }
class C{  public int compareTo(SavedField obj){  DateTimeField other=obj.iField;  int result=compareReverse(iField.getRangeDurationField(),other.getRangeDurationField());  if (result != 0) {    return result;  }  return compareReverse(iField.getDurationField(),other.getDurationField());}  }
class C{  public static void merge(ByteArrayOutputStream baos,List<byte[]> pcaps) throws IOException {  PcapByteInputStream is=null;  PcapByteOutputStream os=null;  ByteArrayOutputStream unsortedBaos=new ByteArrayOutputStream();  try {    int i=1;    for (    byte[] pcap : pcaps) {      is=new PcapByteInputStream(pcap);      if (i == 1) {        os=new PcapByteOutputStream(unsortedBaos,is.getGlobalHeader());      }      writePacket(is,os);      i++;      closeInput(is);    }  }  finally {    if (unsortedBaos != null) {      unsortedBaos.close();    }    closeOutput(os);    sort(baos,unsortedBaos.toByteArray());  }}  }
class C{  private static boolean isPropertyEnabled(Dictionary<?,?> properties,String propertyName){  boolean enabled=false;  try {    String flag=(String)properties.get(propertyName);    if (flag != null) {      enabled=flag.trim().equals("true");    }  } catch (  ClassCastException e) {    enabled=false;  }  return enabled;}  }
class C{  public void detectAndSendChanges(){  super.detectAndSendChanges();  for (int i=0; i < this.crafters.size(); ++i) {    ICrafting icrafting=(ICrafting)this.crafters.get(i);    icrafting.sendProgressBarUpdate(this,1,this.entity.energy);    icrafting.sendProgressBarUpdate(this,2,this.entity.reactantlevel);    icrafting.sendProgressBarUpdate(this,3,this.entity.fuellevel);    icrafting.sendProgressBarUpdate(this,4,this.entity.energy >> 16);    icrafting.sendProgressBarUpdate(this,5,this.entity.reactantlevel >> 16);    icrafting.sendProgressBarUpdate(this,6,this.entity.fuellevel >> 16);  }}  }
class C{  public boolean liveNodesContain(String name){  return liveNodes.contains(name);}  }
class C{  public float[] generateTransformedValuesScatter(List<? extends Entry> entries,float phaseY){  float[] valuePoints=new float[entries.size() * 2];  for (int j=0; j < valuePoints.length; j+=2) {    Entry e=entries.get(j / 2);    if (e != null) {      valuePoints[j]=e.getXIndex();      valuePoints[j + 1]=e.getVal() * phaseY;    }  }  pointValuesToPixel(valuePoints);  return valuePoints;}  }
class C{  public List<ConnectionRecord> retrieveHistory(ModeledAuthenticatedUser user,ModeledConnection connection) throws GuacamoleException {  String identifier=connection.getIdentifier();  if (hasObjectPermission(user,identifier,ObjectPermission.Type.READ)) {    List<ConnectionRecordModel> models=connectionRecordMapper.select(identifier);    List<ConnectionRecord> records=new ArrayList<ConnectionRecord>(tunnelService.getActiveConnections(connection));    Collections.reverse(records);    for (    ConnectionRecordModel model : models)     records.add(getObjectInstance(model));    return records;  }  throw new GuacamoleSecurityException("Permission denied.");}  }
class C{  public static void logPromoTapsRemaining(int promoTapsRemaining){  if (promoTapsRemaining >= 0) {    RecordHistogram.recordCountHistogram("Search.ContextualSearchPromoTapsRemaining",promoTapsRemaining);  }}  }
class C{  public static void removeNotUsedTransitLinks(TransitSchedule schedule,Network network,Set<String> modesToKeep,boolean keepOppositeLinks){  log.info("... Removing links that are not used by public transit");  Set<Id<Link>> usedTransitLinkIds=new HashSet<>();  for (  TransitLine line : schedule.getTransitLines().values()) {    for (    TransitRoute route : line.getRoutes().values()) {      if (route.getRoute() != null)       usedTransitLinkIds.addAll(ScheduleTools.getTransitRouteLinkIds(route));    }  }  Map<Id<Link>,? extends Link> links=network.getLinks();  if (keepOppositeLinks) {    for (    Id<Link> linkId : new HashSet<>(usedTransitLinkIds)) {      Link oppositeLink=NetworkTools.getOppositeLink(links.get(linkId));      if (oppositeLink != null)       usedTransitLinkIds.add(oppositeLink.getId());    }  }  int linksRemoved=0;  for (  Link link : new HashSet<>(network.getLinks().values())) {    if (!MiscUtils.setsShareMinOneStringEntry(link.getAllowedModes(),modesToKeep) && !usedTransitLinkIds.contains(link.getId())) {      network.removeLink(link.getId());      linksRemoved++;    } else     if (MiscUtils.setsShareMinOneStringEntry(link.getAllowedModes(),modesToKeep) && !usedTransitLinkIds.contains(link.getId())) {      link.setAllowedModes(MiscUtils.getSharedSetStringEntries(link.getAllowedModes(),modesToKeep));    }  }  for (  Node n : new HashSet<>(network.getNodes().values())) {    if (n.getOutLinks().size() == 0 && n.getInLinks().size() == 0) {      network.removeNode(n.getId());    }  }  log.info("    " + linksRemoved + " links removed");}  }
class C{  public boolean isTimeBased(){  Object oo=get_Value(COLUMNNAME_IsTimeBased);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public ObjectVirtualPoolBulkRep queryBulkResourceReps(List<URI> ids){  if (!ids.iterator().hasNext()) {    return new ObjectVirtualPoolBulkRep();  }  String shortVdcId=VdcUtil.getVdcId(VirtualArray.class,ids.iterator().next()).toString();  Iterator<VirtualPool> dbIterator;  if (shortVdcId.equals(VdcUtil.getLocalShortVdcId())) {    dbIterator=_dbClient.queryIterativeObjects(getResourceClass(),ids);  } else {    GeoServiceClient geoClient=_geoHelper.getClient(shortVdcId);    try {      dbIterator=geoClient.queryObjects(getResourceClass(),ids);    } catch (    Exception ex) {      _log.error("error retrieving bulk virtual pools from vdc " + shortVdcId,ex);      throw APIException.internalServerErrors.genericApisvcError("error retrieving remote virtual pool",ex);    }  }  return new ObjectVirtualPoolBulkRep(BulkList.wrapping(dbIterator,new mapObjectVirtualPoolWithResources(),new BulkList.VirtualPoolFilter(Type.object)));}  }
class C{  public static String copyValueOf(char[] data){  return new String(data,0,data.length);}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public SimpleRecurrentNetwork(final Network network,int numInputNodes,int numHiddenNodes,int numOutputNodes){  this(network,numInputNodes,numHiddenNodes,numOutputNodes,new SigmoidalRule(),new SigmoidalRule(),new Point2D.Double(0,0));}  }
class C{  public static int readFromFileChannel(FileChannel channel,long channelPosition,byte[] dest,int destOffset,int length) throws IOException {  ByteBuffer buffer=ByteBuffer.wrap(dest,destOffset,length);  return readFromFileChannel(channel,channelPosition,buffer);}  }
class C{  public WrappedByteBuffer clear(){  _buf=(java.nio.ByteBuffer)_buf.clear();  return this;}  }
class C{  public static int[] copy(int[] array){  if (array != null) {    int[] copy=new int[array.length];    System.arraycopy(array,0,copy,0,array.length);    return copy;  }  return null;}  }
class C{  private Object executeOr(PageContext pc,SQL sql,Query qr,ZExpression expression,int row) throws PageException {  int len=expression.nbOperands();  for (int i=0; i < len; i++) {    if (Caster.toBooleanValue(executeExp(pc,sql,qr,expression.getOperand(i),row)))     return Boolean.TRUE;  }  return Boolean.FALSE;}  }
class C{  private TokenImpl(int type){  fType=type;  fData=null;}  }
class C{  public Kernel createKernel() throws OperatorException {  Kernel kernel=null;  double lengthScale=getParameterAsDouble(PARAMETER_KERNEL_LENGTHSCALE);  double bias=getParameterAsDouble(PARAMETER_KERNEL_BIAS);  double degree=getParameterAsDouble(PARAMETER_KERNEL_DEGREE);  double a=getParameterAsDouble(PARAMETER_KERNEL_A);  double b=getParameterAsDouble(PARAMETER_KERNEL_B);  double sigma1=getParameterAsDouble(PARAMETER_KERNEL_SIGMA1);  double sigma2=getParameterAsDouble(PARAMETER_KERNEL_SIGMA2);  double sigma3=getParameterAsDouble(PARAMETER_KERNEL_SIGMA3);  double shift=getParameterAsDouble(PARAMETER_KERNEL_SHIFT);switch (getParameterAsInt(PARAMETER_KERNEL_TYPE)) {case 0:    kernel=new KernelRadial(lengthScale);  break;case 1:kernel=new KernelCauchy(lengthScale);break;case 2:kernel=new KernelLaplace(lengthScale);break;case 3:kernel=new KernelPoly(lengthScale,bias,degree);break;case 4:kernel=new KernelSigmoid(a,b);break;case 5:kernel=new KernelEpanechnikov(sigma1,degree);break;case 6:kernel=new KernelGaussianCombination(sigma1,sigma2,sigma3);break;case 7:kernel=new KernelMultiquadric(sigma1,shift);break;default :kernel=new KernelRadial(lengthScale);}return kernel;}  }
class C{  public void addTableBytes(int tag,byte[] data){  addTable(tag,ReadableFontData.createReadableFontData(data));}  }
class C{  public String[] showVersion() throws NetworkDeviceControllerException {  String[] returnVal=new String[2];  SSHPrompt[] prompts={SSHPrompt.MDS_POUND,SSHPrompt.MDS_GREATER_THAN};  StringBuilder buf=new StringBuilder();  SSHPrompt prompt=sendWaitFor(MDSDialogProperties.getString("MDSDialog.showVersion.cmd"),10000,prompts,buf);  String[] lines=getLines(buf);  String[] regex={MDSDialogProperties.getString("MDSDialog.showVersion.version.match"),MDSDialogProperties.getString("MDSDialog.showVersion.MDS.match"),MDSDialogProperties.getString("MDSDialog.showVersion.Nexus.match")};  String[] groups=new String[2];  for (  String line : lines) {    int index=match(line,regex,groups);switch (index) {case 0:      returnVal[1]=groups[0];    break;case 1:  returnVal[0]=groups[0];break;case 2:returnVal[0]=groups[0];break;}}return returnVal;}  }
class C{  public synchronized void stopCentral(){  doStopCentral=true;  if (activeStruct != null)   activeStruct.getOption().forceProgramToStop();  if (memoryManager == null) {    System.out.println("Memory manager has already been deleted!?");    return;  }  memoryManager.setManager_enabled(false);  userAdmin.stopUserAdmin();  transferManager.stopTransferManager();  try {    Thread.sleep(1000);  } catch (  Exception e) {  }  if (memoryManager.isAlive())   memoryManager.interrupt();  if (userAdmin.isAlive())   userAdmin.interrupt();  if (transferManager.isAlive())   transferManager.interrupt();  memoryManager=null;  userAdmin=null;  transferManager=null;}  }
class C{  private void analize(){  StringTokenizer tokenizer2=new StringTokenizer(sourceData,"|");  String nextToken=tokenizer2.nextToken();  ver=nextToken.substring(1,nextToken.length() - 1);  StringTokenizer tokenizer=new StringTokenizer(tokenizer2.nextToken(),",");  nextToken=tokenizer.nextToken();  logDocColName=nextToken.substring(1,nextToken.length() - 1);  nextToken=tokenizer.nextToken();  docColName=nextToken.substring(1,nextToken.length() - 1);  nextToken=tokenizer.nextToken();  docColFmtDef=Integer.parseInt(nextToken);  nextToken=tokenizer.nextToken();  primaryColName=nextToken.substring(1,nextToken.length() - 1);  nextToken=tokenizer.nextToken();  from=nextToken.substring(1,nextToken.length() - 1);  nextToken=tokenizer.nextToken();  where=nextToken.substring(1,nextToken.length() - 1);  nextToken=tokenizer.nextToken();  orderBy=nextToken.substring(1,nextToken.length() - 1);}  }
class C{  public static byte[] parseBssid2bytes(String bssid){  String bssidSplits[]=bssid.split(":");  byte[] result=new byte[bssidSplits.length];  for (int i=0; i < bssidSplits.length; i++) {    result[i]=(byte)Integer.parseInt(bssidSplits[i],16);  }  return result;}  }
class C{  public void updateFromAmt(){  MCommissionAmt[] amts=getAmts();  BigDecimal GrandTotal=Env.ZERO;  for (int i=0; i < amts.length; i++) {    MCommissionAmt amt=amts[i];    GrandTotal=GrandTotal.add(amt.getCommissionAmt());  }  setGrandTotal(GrandTotal);}  }
class C{  public void addRows(Assignment condition,Map<Value,Double> subtable){  CategoricalTable.Builder builder=table.computeIfAbsent(condition,null);  builder.addRows(subtable);}  }
class C{  static Object createArray(Class<?> cls,int length) throws OutOfMemoryError, NegativeArraySizeException {  if (cls == Void.TYPE)   throwNewIllegalArgumentException("Cannot create new array instance for the specified arguments");  RVMArray arrayType=java.lang.JikesRVMSupport.getTypeForClass(cls).getArrayTypeForElementType();  if (!arrayType.isInitialized()) {    arrayType.resolve();    arrayType.instantiate();    arrayType.initialize();  }  return RuntimeEntrypoints.resolvedNewArray(length,arrayType);}  }
class C{  public static void cleanUp(){  cleanup(getAllConnections());  cleanup(getServerConnections());}  }
class C{  public static JSONObject toJSONObject(Properties properties) throws JSONException {  JSONObject jo=new JSONObject();  if (properties != null && !properties.isEmpty()) {    Enumeration enumProperties=properties.propertyNames();    while (enumProperties.hasMoreElements()) {      String name=(String)enumProperties.nextElement();      jo.put(name,properties.getProperty(name));    }  }  return jo;}  }
class C{  void sendMessageToHandlerWithControllerReset(List<OFMessage> messages) throws Exception {  sendMessageToHandlerNoControllerReset(messages);}  }
class C{  private ProtocInvoker(Path discoveryRoot,ImmutableList<Path> protocIncludePaths){  this.protocIncludePaths=protocIncludePaths;  this.discoveryRoot=discoveryRoot;}  }
class C{  public void toString(final StringBuilder sb){  toString(this,sb);  sb.append(LS);}  }
class C{  public static void clearActionsFromString(OFFlowMod.Builder fmb,String inst,Logger log){  if (fmb.getVersion().compareTo(OFVersion.OF_11) < 0) {    log.error("Clear Actions Instruction not supported in OpenFlow 1.0");    return;  }  if (inst != null && inst.trim().isEmpty()) {    OFInstructionClearActions i=OFFactories.getFactory(fmb.getVersion()).instructions().clearActions();    log.debug("Appending ClearActions instruction: {}",i);    appendInstruction(fmb,i);    log.debug("All instructions after append: {}",fmb.getInstructions());  } else {    log.error("Got non-empty or null string, but ClearActions should not have any String sub-fields: {}",inst);  }}  }
class C{  private void writeStopData(final List<CountSimComparison> countSimComparisonList,final FolderType folder,String type){  Id stopid;  PlacemarkType placemark;  double relativeError;  Coord coord;  PointType point;  for (  CountSimComparison csc : countSimComparisonList) {    stopid=csc.getId();    Count count;    if (type.equals("board"))     count=this.boardCounts.getCount(stopid); else     count=this.alightCounts.getCount(stopid);    coord=this.coordTransform.transform(count.getCoord());    relativeError=csc.calculateRelativeError();    placemark=createPlacemark(stopid.toString(),csc,relativeError,csc.getHour(),type);    point=kmlObjectFactory.createPointType();    point.getCoordinates().add(Double.toString(coord.getX()) + "," + Double.toString(coord.getY())+ ",0.0");    placemark.setAbstractGeometryGroup(kmlObjectFactory.createPoint(point));    if (csc.getSimulationValue() == 0.0 && csc.getCountValue() == 0.0) {      placemark.setStyleUrl(this.greyMinusStyle.getId());    } else {      if (csc.getSimulationValue() > csc.getCountValue()) {        if (csc.getSimulationValue() < csc.getCountValue() * 1.5) {          placemark.setStyleUrl(this.greenCrossStyle.getId());        } else         if (csc.getSimulationValue() < csc.getCountValue() * 2) {          placemark.setStyleUrl(this.yellowCrossStyle.getId());        } else {          placemark.setStyleUrl(this.redCrossStyle.getId());        }      } else {        if (csc.getSimulationValue() > csc.getCountValue() * 0.75) {          placemark.setStyleUrl("#greenMinusStyle");        } else         if (csc.getSimulationValue() > csc.getCountValue() * 0.5) {          placemark.setStyleUrl("#yellowMinusStyle");        } else {          placemark.setStyleUrl("#redMinusStyle");        }      }    }    folder.getAbstractFeatureGroup().add(kmlObjectFactory.createPlacemark(placemark));  }}  }
class C{  public void mergeSharesToAssetAccountMappingChanges(final JsonElement element,final String paramName,final Long productId,final int accountTypeId,final String accountTypeName,final Map<String,Object> changes){  mergeProductToAccountMappingChanges(element,paramName,productId,accountTypeId,accountTypeName,changes,GLAccountType.ASSET,PortfolioProductType.SHARES);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  protected void init() throws IOException {  if (internalIn2 != null)   return;  String encoding;  byte bom[]=new byte[BOM_SIZE];  int n, unread;  n=internalIn.read(bom,0,bom.length);  if ((bom[0] == (byte)0xEF) && (bom[1] == (byte)0xBB) && (bom[2] == (byte)0xBF)) {    encoding="UTF-8";    unread=n - 3;  } else   if ((bom[0] == (byte)0xFE) && (bom[1] == (byte)0xFF)) {    encoding="UTF-16BE";    unread=n - 2;  } else   if ((bom[0] == (byte)0xFF) && (bom[1] == (byte)0xFE)) {    encoding="UTF-16LE";    unread=n - 2;  } else   if ((bom[0] == (byte)0x00) && (bom[1] == (byte)0x00) && (bom[2] == (byte)0xFE)&& (bom[3] == (byte)0xFF)) {    encoding="UTF-32BE";    unread=n - 4;  } else   if ((bom[0] == (byte)0xFF) && (bom[1] == (byte)0xFE) && (bom[2] == (byte)0x00)&& (bom[3] == (byte)0x00)) {    encoding="UTF-32LE";    unread=n - 4;  } else {    encoding=defaultEnc;    unread=n;  }  if (unread > 0)   internalIn.unread(bom,(n - unread),unread);  if (encoding == null) {    internalIn2=new InputStreamReader(internalIn);  } else {    internalIn2=new InputStreamReader(internalIn,encoding);  }}  }
class C{  @Override public void buildClassifier(Instances data) throws Exception {  getCapabilities().testWithFail(data);  m_theInstances=new Instances(data);  m_theInstances.deleteWithMissingClass();  m_rr=new Random(1);  if (m_theInstances.classAttribute().isNominal()) {    m_classPriorCounts=new double[data.classAttribute().numValues()];    Arrays.fill(m_classPriorCounts,1.0);    for (int i=0; i < data.numInstances(); i++) {      Instance curr=data.instance(i);      m_classPriorCounts[(int)curr.classValue()]+=curr.weight();    }    m_classPriors=m_classPriorCounts.clone();    Utils.normalize(m_classPriors);  }  setUpEvaluator();  if (m_theInstances.classAttribute().isNumeric()) {    m_disTransform=new weka.filters.unsupervised.attribute.Discretize();    m_classIsNominal=false;    ((weka.filters.unsupervised.attribute.Discretize)m_disTransform).setBins(10);    ((weka.filters.unsupervised.attribute.Discretize)m_disTransform).setInvertSelection(true);    String rangeList="";    rangeList+=(m_theInstances.classIndex() + 1);    ((weka.filters.unsupervised.attribute.Discretize)m_disTransform).setAttributeIndices(rangeList);  } else {    m_disTransform=new weka.filters.supervised.attribute.Discretize();    ((weka.filters.supervised.attribute.Discretize)m_disTransform).setUseBetterEncoding(true);    m_classIsNominal=true;  }  m_disTransform.setInputFormat(m_theInstances);  m_theInstances=Filter.useFilter(m_theInstances,m_disTransform);  m_numAttributes=m_theInstances.numAttributes();  m_numInstances=m_theInstances.numInstances();  m_majority=m_theInstances.meanOrMode(m_theInstances.classAttribute());  int[] selected=m_search.search(m_evaluator,m_theInstances);  m_decisionFeatures=new int[selected.length + 1];  System.arraycopy(selected,0,m_decisionFeatures,0,selected.length);  m_decisionFeatures[m_decisionFeatures.length - 1]=m_theInstances.classIndex();  m_delTransform=new Remove();  m_delTransform.setInvertSelection(true);  m_delTransform.setAttributeIndicesArray(m_decisionFeatures);  m_delTransform.setInputFormat(m_theInstances);  m_dtInstances=Filter.useFilter(m_theInstances,m_delTransform);  m_numAttributes=m_dtInstances.numAttributes();  m_entries=new Hashtable<DecisionTableHashKey,double[]>((int)(m_dtInstances.numInstances() * 1.5));  for (int i=0; i < m_numInstances; i++) {    Instance inst=m_dtInstances.instance(i);    insertIntoTable(inst,null);  }  if (m_useIBk) {    m_ibk=new IBk();    m_ibk.buildClassifier(m_theInstances);  }  if (m_saveMemory) {    m_theInstances=new Instances(m_theInstances,0);    m_dtInstances=new Instances(m_dtInstances,0);  }  m_evaluation=null;}  }
class C{  public void cast(final Type from,final Type to){  if (from != to) {    if (from == Type.DOUBLE_TYPE) {      if (to == Type.FLOAT_TYPE) {        mv.visitInsn(Opcodes.D2F);      } else       if (to == Type.LONG_TYPE) {        mv.visitInsn(Opcodes.D2L);      } else {        mv.visitInsn(Opcodes.D2I);        cast(Type.INT_TYPE,to);      }    } else     if (from == Type.FLOAT_TYPE) {      if (to == Type.DOUBLE_TYPE) {        mv.visitInsn(Opcodes.F2D);      } else       if (to == Type.LONG_TYPE) {        mv.visitInsn(Opcodes.F2L);      } else {        mv.visitInsn(Opcodes.F2I);        cast(Type.INT_TYPE,to);      }    } else     if (from == Type.LONG_TYPE) {      if (to == Type.DOUBLE_TYPE) {        mv.visitInsn(Opcodes.L2D);      } else       if (to == Type.FLOAT_TYPE) {        mv.visitInsn(Opcodes.L2F);      } else {        mv.visitInsn(Opcodes.L2I);        cast(Type.INT_TYPE,to);      }    } else {      if (to == Type.BYTE_TYPE) {        mv.visitInsn(Opcodes.I2B);      } else       if (to == Type.CHAR_TYPE) {        mv.visitInsn(Opcodes.I2C);      } else       if (to == Type.DOUBLE_TYPE) {        mv.visitInsn(Opcodes.I2D);      } else       if (to == Type.FLOAT_TYPE) {        mv.visitInsn(Opcodes.I2F);      } else       if (to == Type.LONG_TYPE) {        mv.visitInsn(Opcodes.I2L);      } else       if (to == Type.SHORT_TYPE) {        mv.visitInsn(Opcodes.I2S);      }    }  }}  }
class C{  public boolean containsTaskWithRequestId(String requestId) throws KeeperException, InterruptedException {  List<String> childNames=zookeeper.getChildren(dir,null,true);  for (  String childName : childNames) {    if (childName != null) {      try {        ZkNodeProps message=ZkNodeProps.load(zookeeper.getData(dir + "/" + childName,null,null,true));        if (message.containsKey(OverseerCollectionProcessor.ASYNC)) {          LOG.info(">>>> {}",message.get(OverseerCollectionProcessor.ASYNC));          if (message.get(OverseerCollectionProcessor.ASYNC).equals(requestId))           return true;        }      } catch (      KeeperException.NoNodeException e) {      }    }  }  return false;}  }
class C{  public boolean addEdge(Edge e){  if (!edges.add(e))   return false;  stream.add(e);  srcMap.put(e.getSrc(),e);  tgtMap.put(e.getTgt(),e);  unitMap.put(e.srcUnit(),e);  return true;}  }
class C{  @Override public void runCycle(){synchronized (statemachine) {    statemachine.runCycle();  }}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  void doDelete(NamedBean bean){  Logix l=(Logix)bean;  l.deActivateLogix();  _logixManager.deleteLogix(l);}  }
class C{  public GenericText(String value,AbstractDocument owner){  ownerDocument=owner;  setNodeValue(value);}  }
class C{  public void finalizeAttackAuto(){  finalizeAttack();  attackAborted=true;  attackFinished=true;  Result.getGlobalResult().add(new ResultEntry(ResultLevel.Info,"Attack Model EDT","Auto Finalization finished, attack closed"));}  }
class C{  public VirtualMachineError(){  super();}  }
class C{  private boolean parseSource(HttpMessage message,Source source,int depth,String baseURL){  log.debug("Parsing an HTML message...");  boolean resourcesfound=false;  List<Element> elements=source.getAllElements(HTMLElementName.A);  for (  Element el : elements) {    resourcesfound|=processAttributeElement(message,depth,baseURL,el,"href");  }  elements=source.getAllElements(HTMLElementName.AREA);  for (  Element el : elements) {    resourcesfound|=processAttributeElement(message,depth,baseURL,el,"href");  }  elements=source.getAllElements(HTMLElementName.FRAME);  for (  Element el : elements) {    resourcesfound|=processAttributeElement(message,depth,baseURL,el,"src");  }  elements=source.getAllElements(HTMLElementName.IFRAME);  for (  Element el : elements) {    resourcesfound|=processAttributeElement(message,depth,baseURL,el,"src");  }  elements=source.getAllElements(HTMLElementName.LINK);  for (  Element el : elements) {    resourcesfound|=processAttributeElement(message,depth,baseURL,el,"href");  }  elements=source.getAllElements(HTMLElementName.SCRIPT);  for (  Element el : elements) {    resourcesfound|=processAttributeElement(message,depth,baseURL,el,"src");  }  elements=source.getAllElements(HTMLElementName.IMG);  for (  Element el : elements) {    resourcesfound|=processAttributeElement(message,depth,baseURL,el,"src");  }  elements=source.getAllElements(HTMLElementName.META);  for (  Element el : elements) {    String equiv=el.getAttributeValue("http-equiv");    String content=el.getAttributeValue("content");    if (equiv != null && content != null) {      if (equiv.equalsIgnoreCase("refresh") || equiv.equalsIgnoreCase("location")) {        Matcher matcher=urlPattern.matcher(content);        if (matcher.find()) {          String url=matcher.group(1);          processURL(message,depth,url,baseURL);          resourcesfound=true;        }      }    }  }  return resourcesfound;}  }
class C{  private static void decodeTextSegment(BitSource bits,StringBuilder result) throws FormatException {  boolean upperShift=false;  int[] cValues=new int[3];  int shift=0;  do {    if (bits.available() == 8) {      return;    }    int firstByte=bits.readBits(8);    if (firstByte == 254) {      return;    }    parseTwoBytes(firstByte,bits.readBits(8),cValues);    for (int i=0; i < 3; i++) {      int cValue=cValues[i];switch (shift) {case 0:        if (cValue < 3) {          shift=cValue + 1;        } else         if (cValue < TEXT_BASIC_SET_CHARS.length) {          char textChar=TEXT_BASIC_SET_CHARS[cValue];          if (upperShift) {            result.append((char)(textChar + 128));            upperShift=false;          } else {            result.append(textChar);          }        } else {          throw FormatException.getFormatInstance();        }      break;case 1:    if (upperShift) {      result.append((char)(cValue + 128));      upperShift=false;    } else {      result.append((char)cValue);    }  shift=0;break;case 2:if (cValue < TEXT_SHIFT2_SET_CHARS.length) {char textChar=TEXT_SHIFT2_SET_CHARS[cValue];if (upperShift) {  result.append((char)(textChar + 128));  upperShift=false;} else {  result.append(textChar);}} else if (cValue == 27) {result.append((char)29);} else if (cValue == 30) {upperShift=true;} else {throw FormatException.getFormatInstance();}shift=0;break;case 3:if (cValue < TEXT_SHIFT3_SET_CHARS.length) {char textChar=TEXT_SHIFT3_SET_CHARS[cValue];if (upperShift) {result.append((char)(textChar + 128));upperShift=false;} else {result.append(textChar);}shift=0;} else {throw FormatException.getFormatInstance();}break;default :throw FormatException.getFormatInstance();}}} while (bits.available() > 0);}  }
class C{  public DocumentFragment createDocumentFragment(){  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  public <T>T fromXML(final String xml,final T root){  return fromXML(new StringReader(xml),root);}  }
class C{  public static int[] stableSort(double[] array){  int[] index=new int[array.length];  int[] newIndex=new int[array.length];  int[] helpIndex;  int numEqual;  array=(double[])array.clone();  for (int i=0; i < index.length; i++) {    index[i]=i;    if (Double.isNaN(array[i])) {      array[i]=Double.MAX_VALUE;    }  }  quickSort(array,index,0,array.length - 1);  int i=0;  while (i < index.length) {    numEqual=1;    for (int j=i + 1; ((j < index.length) && Utils.eq(array[index[i]],array[index[j]])); j++)     numEqual++;    if (numEqual > 1) {      helpIndex=new int[numEqual];      for (int j=0; j < numEqual; j++)       helpIndex[j]=i + j;      quickSort(index,helpIndex,0,numEqual - 1);      for (int j=0; j < numEqual; j++)       newIndex[i + j]=index[helpIndex[j]];      i+=numEqual;    } else {      newIndex[i]=index[i];      i++;    }  }  return newIndex;}  }
class C{  public static double MCMSEmaxFitness(GEPIndividual ind){  return 1000.0;}  }
class C{  public void shl(int size,Register dst,Register src,Register shift){  super.lsl(size,dst,src,shift);}  }
class C{  public static boolean isGitExeConfigured(@NotNull final Project project){  final GitExecutableValidator validator=GitVcs.getInstance(project).getExecutableValidator();  if (!validator.checkExecutableAndNotifyIfNeeded()) {    Messages.showWarningDialog(project,TfPluginBundle.message(TfPluginBundle.KEY_GIT_NOT_CONFIGURED),TfPluginBundle.message(TfPluginBundle.KEY_TF_GIT));    return false;  }  return true;}  }
class C{  public static void processImage(NetworkTable table){  ArrayList<MatOfPoint> contours=new ArrayList<MatOfPoint>();  double x, y, targetX, targetY, distance, azimuth;  int FrameCount=0;  long before=System.currentTimeMillis();  while (FrameCount < 5) {    contours.clear();    videoCapture.read(matOriginal);    Imgproc.cvtColor(matOriginal,matHSV,Imgproc.COLOR_BGR2HSV);    Core.inRange(matHSV,LOWER_BOUNDS,UPPER_BOUNDS,matThresh);    Imgproc.findContours(matThresh,contours,matHeirarchy,Imgproc.RETR_EXTERNAL,Imgproc.CHAIN_APPROX_SIMPLE);    for (    MatOfPoint mop : contours) {      Rect rec=Imgproc.boundingRect(mop);      Imgproc.rectangle(matOriginal,rec.br(),rec.tl(),RED);    }    for (Iterator<MatOfPoint> iterator=contours.iterator(); iterator.hasNext(); ) {      MatOfPoint matOfPoint=(MatOfPoint)iterator.next();      Rect rec=Imgproc.boundingRect(matOfPoint);      if (rec.height < 15 || rec.width < 15) {        iterator.remove();        continue;      }      float aspect=(float)rec.width / (float)rec.height;      if (aspect < 1.0)       iterator.remove();    }    table.putNumber("contours",contours.size());    table.flush();    if (contours.size() == 1) {      Rect rec=Imgproc.boundingRect(contours.get(0));      y=rec.br().y + rec.height / 2;      y=-((2 * (y / matOriginal.height())) - 1);      distance=(TOP_TARGET_HEIGHT - TOP_CAMERA_HEIGHT) / Math.tan((y * VERTICAL_FOV / 2.0 + CAMERA_ANGLE) * Math.PI / 180);      targetX=rec.tl().x + rec.width / 2;      targetX=(2 * (targetX / matOriginal.width())) - 1;      azimuth=normalize360(targetX * HORIZONTAL_FOV / 2.0 + 0);      Point center=new Point(rec.br().x - rec.width / 2 - 15,rec.br().y - rec.height / 2);      Point centerw=new Point(rec.br().x - rec.width / 2 - 15,rec.br().y - rec.height / 2 - 20);      table.putNumber("distance",distance - ROBOT_OFFSET_TO_FRONT);      table.putNumber("azimuth",azimuth);    }    Imgcodecs.imwrite("output.png",matOriginal);  }}  }
class C{  public DefaultExecutors(final ILogger logger){  mLogger=logger;  mBackgroundExecutor=(ThreadPoolExecutor)Executors.newCachedThreadPool();  mForegroundExecutor=new SynchronousExecutor();}  }
class C{  public static Bitmap downSample(final byte[] data,int downSampleFactor){  final BitmapFactory.Options opts=new BitmapFactory.Options();  opts.inSampleSize=downSampleFactor;  return BitmapFactory.decodeByteArray(data,0,data.length,opts);}  }
class C{  public static Polynomial serializableInstance(){  return new Polynomial(new ArrayList<PolynomialTerm>());}  }
class C{  public static JoinSetComposerPrototype makeComposerPrototype(String statementName,int statementId,OuterJoinDesc[] outerJoinDescList,ExprNode optionalFilterNode,EventType[] streamTypes,String[] streamNames,StreamJoinAnalysisResult streamJoinAnalysisResult,boolean queryPlanLogging,StatementContext statementContext,HistoricalViewableDesc historicalViewableDesc,ExprEvaluatorContext exprEvaluatorContext,boolean selectsRemoveStream,boolean hasAggregations,TableService tableService,boolean isOnDemandQuery,boolean allowIndexInit) throws ExprValidationException {  DependencyGraph historicalDependencyGraph=new DependencyGraph(streamTypes.length,false);  for (int i=0; i < streamTypes.length; i++) {    if (historicalViewableDesc.getHistorical()[i]) {      SortedSet<Integer> streamsThisStreamDependsOn=historicalViewableDesc.getDependenciesPerHistorical()[i];      historicalDependencyGraph.addDependency(i,streamsThisStreamDependsOn);    }  }  if (log.isDebugEnabled()) {    log.debug("Dependency graph: " + historicalDependencyGraph);  }  if ((historicalViewableDesc.isHasHistorical()) && (streamTypes.length == 2)) {    return makeComposerHistorical2Stream(outerJoinDescList,optionalFilterNode,streamTypes,historicalViewableDesc,queryPlanLogging,exprEvaluatorContext,statementContext,streamNames,allowIndexInit);  }  boolean isOuterJoins=!OuterJoinDesc.consistsOfAllInnerJoins(outerJoinDescList);  ExcludePlanHint hint=ExcludePlanHint.getHint(streamNames,statementContext);  QueryGraph queryGraph=new QueryGraph(streamTypes.length,hint,false);  if (outerJoinDescList.length > 0) {    OuterJoinAnalyzer.analyze(outerJoinDescList,queryGraph);    if (log.isDebugEnabled()) {      log.debug(".makeComposer After outer join queryGraph=\n" + queryGraph);    }  }  if (optionalFilterNode != null) {    FilterExprAnalyzer.analyze(optionalFilterNode,queryGraph,isOuterJoins);    if (log.isDebugEnabled()) {      log.debug(".makeComposer After filter expression queryGraph=\n" + queryGraph);    }    QueryGraph.fillEquivalentNav(streamTypes,queryGraph);    if (log.isDebugEnabled()) {      log.debug(".makeComposer After fill equiv. nav. queryGraph=\n" + queryGraph);    }  }  HistoricalStreamIndexList[] historicalStreamIndexLists=new HistoricalStreamIndexList[streamTypes.length];  QueryPlan queryPlan=QueryPlanBuilder.getPlan(streamTypes,outerJoinDescList,queryGraph,streamNames,historicalViewableDesc,historicalDependencyGraph,historicalStreamIndexLists,streamJoinAnalysisResult,queryPlanLogging,statementContext.getAnnotations(),exprEvaluatorContext);  HashSet<TableLookupIndexReqKey> usedIndexes=new HashSet<TableLookupIndexReqKey>();  QueryPlanIndex[] indexSpecs=queryPlan.getIndexSpecs();  for (int streamNum=0; streamNum < queryPlan.getExecNodeSpecs().length; streamNum++) {    QueryPlanNode planNode=queryPlan.getExecNodeSpecs()[streamNum];    if (planNode != null) {      planNode.addIndexes(usedIndexes);    }  }  for (  QueryPlanIndex indexSpec : indexSpecs) {    if (indexSpec == null) {      continue;    }    Map<TableLookupIndexReqKey,QueryPlanIndexItem> items=indexSpec.getItems();    TableLookupIndexReqKey[] indexNames=items.keySet().toArray(new TableLookupIndexReqKey[items.size()]);    for (    TableLookupIndexReqKey indexName : indexNames) {      if (!usedIndexes.contains(indexName)) {        items.remove(indexName);      }    }  }  QueryPlanIndexHook hook=QueryPlanIndexHookUtil.getHook(statementContext.getAnnotations());  if (queryPlanLogging && (queryPlanLog.isInfoEnabled() || hook != null)) {    queryPlanLog.info("Query plan: " + queryPlan.toQueryPlan());    if (hook != null) {      hook.join(queryPlan);    }  }  if (!isOnDemandQuery) {    for (    TableLookupIndexReqKey usedIndex : usedIndexes) {      if (usedIndex.getTableName() != null) {        tableService.getTableMetadata(usedIndex.getTableName()).addIndexReference(usedIndex.getName(),statementName);      }    }  }  boolean joinRemoveStream=selectsRemoveStream || hasAggregations;  return new JoinSetComposerPrototypeImpl(statementName,statementId,outerJoinDescList,optionalFilterNode,streamTypes,streamNames,streamJoinAnalysisResult,statementContext.getAnnotations(),historicalViewableDesc,exprEvaluatorContext,indexSpecs,queryPlan,historicalStreamIndexLists,joinRemoveStream,isOuterJoins,tableService,statementContext.getEventTableIndexService());}  }
class C{  public static void scaleFill(Bitmap src,Bitmap dest,int clearColor){  float ratio=Math.max(dest.getWidth() / (float)src.getWidth(),dest.getHeight() / (float)src.getHeight());  int newW=(int)(src.getWidth() * ratio);  int newH=(int)(src.getHeight() * ratio);  int paddingTop=(dest.getHeight() - (int)(src.getHeight() * ratio)) / 2;  int paddingLeft=(dest.getWidth() - (int)(src.getWidth() * ratio)) / 2;  scale(src,dest,clearColor,0,0,src.getWidth(),src.getHeight(),paddingLeft,paddingTop,newW + paddingLeft,newH + paddingTop);}  }
class C{  public int feed(IBytesConsumer consumer){  return feed(consumer,Integer.MAX_VALUE);}  }
class C{  public void dispatchToEvents(int nodeHandle,org.xml.sax.ContentHandler ch) throws org.xml.sax.SAXException {  DTMTreeWalker treeWalker=m_walker;  ContentHandler prevCH=treeWalker.getcontentHandler();  if (null != prevCH) {    treeWalker=new DTMTreeWalker();  }  treeWalker.setcontentHandler(ch);  treeWalker.setDTM(this);  try {    treeWalker.traverse(nodeHandle);  }  finally {    treeWalker.setcontentHandler(null);  }}  }
class C{  public int length(){  return text.length();}  }
class C{  public boolean isRequired(){  return required;}  }
class C{  public double doOperation() throws OperatorFailedException {  double priorPrecision=1.0 / prior.variance();  double priorMean=prior.mean();  double likelihoodPrecision=1.0 / likelihood.variance();  double total=0;  int n=0;  for (  Attribute<double[]> statistic : dataList) {    for (    double x : statistic.getAttributeValue()) {      if (isLog)       total+=Math.log(x); else       total+=x;      n++;    }  }  double precision=priorPrecision + likelihoodPrecision * n;  double mu=(priorPrecision * priorMean + likelihoodPrecision * total) / precision;  meanParameter.setParameterValue(0,MathUtils.nextGaussian() / Math.sqrt(precision) + mu);  return 0;}  }
class C{  public String sprintf(Object x) throws IllegalArgumentException {  Enumeration e=vFmt.elements();  ConversionSpecification cs=null;  char c=0;  StringBuffer sb=new StringBuffer();  while (e.hasMoreElements()) {    cs=(ConversionSpecification)e.nextElement();    c=cs.getConversionCharacter();    if (c == '\0')     sb.append(cs.getLiteral()); else     if (c == '%')     sb.append("%"); else {      if (x instanceof Byte)       sb.append(cs.internalsprintf(((Byte)x).byteValue())); else       if (x instanceof Short)       sb.append(cs.internalsprintf(((Short)x).shortValue())); else       if (x instanceof Integer)       sb.append(cs.internalsprintf(((Integer)x).intValue())); else       if (x instanceof Long)       sb.append(cs.internalsprintf(((Long)x).longValue())); else       if (x instanceof Float)       sb.append(cs.internalsprintf(((Float)x).floatValue())); else       if (x instanceof Double)       sb.append(cs.internalsprintf(((Double)x).doubleValue())); else       if (x instanceof Character)       sb.append(cs.internalsprintf(((Character)x).charValue())); else       if (x instanceof String)       sb.append(cs.internalsprintf((String)x)); else       sb.append(cs.internalsprintf(x));    }  }  return sb.toString();}  }
class C{  public List<String> indices(){  return indices;}  }
class C{  @GwtIncompatible public static <T>T[] concat(T[] first,T[] second,Class<T> type){  T[] result=newArray(type,first.length + second.length);  System.arraycopy(first,0,result,0,first.length);  System.arraycopy(second,0,result,first.length,second.length);  return result;}  }
class C{  public static boolean isExtension(String filename,Collection<String> extensions){  if (filename == null) {    return false;  }  if (extensions == null || extensions.isEmpty()) {    return indexOfExtension(filename) == -1;  }  String fileExt=getExtension(filename);  for (  String extension : extensions) {    if (fileExt.equals(extension)) {      return true;    }  }  return false;}  }
class C{  public void removeGroupChatComposingStatus(final String chatId){synchronized (getImsServiceSessionOperationLock()) {    mGroupChatComposingStatusToNotify.remove(chatId);  }}  }
class C{  public void rollbackExportGroupAddVolumes(URI storageURI,URI exportGroupURI,URI exportMaskURI,Map<URI,Integer> volumeMap,List<URI> initiatorURIs,String contextKey,String token) throws ControllerException {  List<URI> list=new ArrayList<URI>();  list.addAll(volumeMap.keySet());  ExportTaskCompleter taskCompleter=new ExportMaskRemoveVolumeCompleter(exportGroupURI,exportMaskURI,list,token);  try {    ExportOperationContext context=(ExportOperationContext)WorkflowService.getInstance().loadStepData(contextKey);    WorkflowService.getInstance().storeStepData(token,context);  } catch (  ClassCastException e) {    _log.info("Step {} has stored step data other than ExportOperationContext. Exception: {}",token,e);  }  doExportGroupRemoveVolumes(storageURI,exportGroupURI,exportMaskURI,list,initiatorURIs,taskCompleter,token);}  }
class C{  public GutterIconInfo addOffsetTrackingIcon(int offs,Icon icon) throws BadLocationException {  Position pos=textArea.getDocument().createPosition(offs);  GutterIconImpl ti=new GutterIconImpl(icon,pos);  if (trackingIcons == null) {    trackingIcons=new ArrayList(1);  }  int index=Collections.binarySearch(trackingIcons,ti);  if (index < 0) {    index=-(index + 1);  }  trackingIcons.add(index,ti);  repaint();  return ti;}  }
class C{  public static void negateBoolean(MethodVisitor mv){  Label endLabel=new Label();  Label falseLabel=new Label();  mv.visitJumpInsn(IFNE,falseLabel);  mv.visitInsn(ICONST_1);  mv.visitJumpInsn(GOTO,endLabel);  mv.visitLabel(falseLabel);  mv.visitInsn(ICONST_0);  mv.visitLabel(endLabel);}  }
class C{  public void disableRetransmissionAlerts(){  if (this.retransmissionAlertTimerTask != null && this.retransmissionAlertEnabled) {    this.retransmissionAlertTimerTask.cancel();    this.retransmissionAlertEnabled=false;    String dialogId=this.retransmissionAlertTimerTask.dialogId;    if (dialogId != null) {      sipStack.retransmissionAlertTransactions.remove(dialogId);    }    this.retransmissionAlertTimerTask=null;  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:31.074 -0500",hash_original_method="8561AF5B806E84C7CA40A0C40C944616",hash_generated_method="7E3D83D608B2A27BA6F8439F62F1167E") public MalformedCookieException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void testEquals(){  SoftwareAttribute softwareAttribute2=new SoftwareAttribute();  softwareAttribute2.setSoftware(softwareValue.getBytes());  assertEquals("testequals failed",softwareAttribute,softwareAttribute2);  softwareAttribute2=new SoftwareAttribute();  softwareAttribute2.setSoftware("some other software".getBytes());  assertFalse("testequals failed",softwareAttribute.equals(softwareAttribute2));  assertFalse("testequals failed",softwareAttribute.equals(null));}  }
class C{  private void animateShowSantaDestination(LatLng futurePosition){  final LatLng santaDestination=(mSanta != null) ? mSanta.getDestination() : null;  if (futurePosition == null || santaDestination == null) {    return;  }  mCameraUpdate=CameraUpdateFactory.newLatLngBounds(new LatLngBounds.Builder().include(futurePosition).include(santaDestination).build(),PADDING);  executeRunnable(mThreadAnimate);}  }
class C{  public Element removeEndStartModifier(){  setEndStartModifierDefined(false);  return (this);}  }
class C{  private static void debugPrintln(String msg){  if (debug) {    System.err.println("JAXP: " + msg);  }}  }
class C{  public void write(DataOutputStream s) throws IOException {  s.writeDouble(x_);  s.writeDouble(y_);  s.writeDouble(z_);}  }
class C{  public CuboidRegionParser(Element element) throws RegionException {  String minValue=element.getAttributeValue("min");  if (minValue == null) {    throw new MissingRegionAttributeException("min",element);  }  Vector min=Numbers.getVector(minValue);  if (min == null) {    throw new InvalidRegionAttributeException("min",element);  }  String maxValue=element.getAttributeValue("max");  if (maxValue == null) {    throw new MissingRegionAttributeException("max",element);  }  Vector max=Numbers.getVector(maxValue);  if (max == null) {    throw new InvalidRegionAttributeException("max",element);  }  this.cuboid=Cuboid.between(min,max);}  }
class C{  public void save() throws Exception {  String tmpPath=null;  ZipOutputStream zos=null;  try {    assert (out != null) || (path != null) : "Must supply either an output stream or a location";    if (out != null) {      zos=new ZipOutputStream(out);    } else     if (path != null) {      tmpPath=path + ".tmp";      zos=new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(FileUtil.openFile(tmpPath,true))));    }    for (    Map.Entry<String,VirtualFile> mapEntry : files.entrySet()) {      VirtualFile f=mapEntry.getValue();      ZipEntry entry=new ZipEntry(mapEntry.getKey());      entry.setTime(f.getLastModified());      zos.putNextEntry(entry);      BufferedInputStream in=new BufferedInputStream(f.getInputStream());      FileUtil.streamOutput(in,zos);      zos.closeEntry();    }    zos.close();    zos=null;    if ((out == null) && (path != null)) {      File tmpFile=new File(tmpPath);      File file=new File(path);      if (!FileUtils.renameFile(tmpFile,file)) {        throw new SwcException.SwcNotRenamed(tmpFile.getAbsolutePath(),file.getAbsolutePath());      }    }    files=null;  } catch (  Exception exception) {    exception.printStackTrace();  } finally {    try {      if (out != null) {        out.close();        out=null;      }    } catch (    IOException ioe) {    }    try {      if (zos != null)       zos.close();    } catch (    IOException ioe) {    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList childList;  String nullNS=null;  doc=(Document)load("staffNS",false);  childList=doc.getElementsByTagNameNS(nullNS,"0");  assertSize("documentgetelementsbytagnameNS04",0,childList);}  }
class C{  public URI normalize(){  if (opaque) {    return this;  }  String normalizedPath=normalize(path,false);  if (path.equals(normalizedPath)) {    return this;  }  URI result=duplicate();  result.path=normalizedPath;  result.setSchemeSpecificPart();  return result;}  }
class C{  public boolean isText(){  return false;}  }
class C{  private Boolean isInternetConnected(Context con){  Boolean connected=false;  try {    final ConnectivityManager connectivityManager=(ConnectivityManager)con.getSystemService(Context.CONNECTIVITY_SERVICE);    final NetworkInfo networkInfo=connectivityManager.getActiveNetworkInfo();    if (networkInfo.isConnected()) {      connected=true;    }  } catch (  Exception e) {    Log.e(TAG,"CheckConnectivity Exception: " + e.getMessage());  }  return connected;}  }
class C{  private void checkRemarks() throws Exception {  int index;  if (_remarks != null) {    index=_remarks.indexOf("\"");    if (index > -1)     AdminException.throwException(VolumeErrorCodes.EC_VOL_REMARKS_EXIST_QUOTES);  }}  }
class C{  protected Immutable_Impl(){  super();}  }
class C{  protected AbstractMRMessage enterNormalMode(){  return null;}  }
class C{  private RexNode convertIdentifier(Blackboard bb,SqlIdentifier identifier){  final SqlCall call=SqlUtil.makeCall(opTab,identifier);  if (call != null) {    return bb.convertExpression(call);  }  final SqlQualified qualified;  if (bb.scope != null) {    qualified=bb.scope.fullyQualify(identifier);  } else {    qualified=SqlQualified.create(null,1,null,identifier);  }  final Pair<RexNode,Map<String,Integer>> e0=bb.lookupExp(qualified);  RexNode e=e0.left;  for (  String name : qualified.suffixTranslated()) {    if (e == e0.left && e0.right != null) {      int i=e0.right.get(name);      e=rexBuilder.makeFieldAccess(e,i);    } else {      final boolean caseSensitive=true;      e=rexBuilder.makeFieldAccess(e,name,caseSensitive);    }  }  if (e instanceof RexInputRef) {    e=adjustInputRef(bb,(RexInputRef)e);  }  if (e0.left instanceof RexCorrelVariable) {    assert e instanceof RexFieldAccess;    final RexNode prev=bb.mapCorrelateToRex.put(((RexCorrelVariable)e0.left).id,(RexFieldAccess)e);    assert prev == null;  }  return e;}  }
class C{  private static int pack7Oid(byte[] in,int ioffset,int ilength,byte[] out,int ooffset){  byte[] pack=pack(in,ioffset,ilength,8,7);  int firstNonZero=pack.length - 1;  for (int i=pack.length - 2; i >= 0; i--) {    if (pack[i] != 0) {      firstNonZero=i;    }    pack[i]|=0x80;  }  System.arraycopy(pack,firstNonZero,out,ooffset,pack.length - firstNonZero);  return pack.length - firstNonZero;}  }
class C{  public void testDisableOR(){  Query expected=new TermQuery(new Term("field","foo|bar"));  assertEquals(expected,parseKeyword("foo|bar",~OR_OPERATOR));  expected=new TermQuery(new Term("field","|foo|bar"));  assertEquals(expected,parseKeyword("|foo|bar",~OR_OPERATOR));}  }
class C{  public boolean checkError(){  return pw.checkError();}  }
class C{  public DefaultMutableTreeNode action_loadBOM(MProduct Product,boolean setRoot){  int M_Product_ID=Product.get_ID();  MProduct M_Product=MProduct.get(Env.getCtx(),M_Product_ID);  MUOM UOM=new MUOM(Env.getCtx(),M_Product.getC_UOM_ID(),null);  DefaultMutableTreeNode root=new DefaultMutableTreeNode(new nodeUserObject(Msg.translate(Env.getCtx(),"M_Product_ID") + Msg.translate(Env.getCtx(),"Value") + ": "+ M_Product.getValue()+ " "+ Msg.translate(Env.getCtx(),"Name")+ ": "+ M_Product.getName()+ " "+ Msg.translate(Env.getCtx(),"C_UOM_ID")+ ": "+ UOM.getName(),M_Product,null,null));  if (setRoot) {    this.root=root;  }  dataBOM.clear();  if (false) {    String whereClause="M_Product_ID=?";    List<MPPProductBOMLine> bomlines=new Query(Env.getCtx(),MPPProductBOMLine.Table_Name,whereClause,null).setParameters(new Object[]{M_Product_ID}).list();    for (    MPPProductBOMLine bomline : bomlines) {      root.add(parent(bomline));    }  } else {    String whereClause="M_Product_ID=?";    List<MPPProductBOM> boms=new Query(Env.getCtx(),MPPProductBOM.Table_Name,whereClause,null).setParameters(new Object[]{M_Product_ID}).setOnlyActiveRecords(true).list();    for (    MPPProductBOM bom : boms) {      DefaultMutableTreeNode child=parent(bom);      root.add(child);    }  }  log.fine("root.getChildCount: " + root.getChildCount());  if (root.getChildCount() > 0) {    root=(DefaultMutableTreeNode)root.getFirstChild();  }  if (setRoot)   this.root=root;  return root;}  }
class C{  private void updateButtonForOcean(JButton button){  if (MetalLookAndFeel.usingOcean()) {    button.setFocusPainted(comboBox.isEditable());  }}  }
class C{  public Period(ReadableDuration duration,ReadableInstant endInstant,PeriodType type){  super(duration,endInstant,type);}  }
class C{  public NonBlockingStatsDClient(String prefix,String hostname,int port) throws StatsDClientException {  this(prefix,hostname,port,NO_OP_HANDLER);}  }
class C{  public javax2.sip.address.Address createAddress(String displayName,javax2.sip.address.URI uri){  if (uri == null)   throw new NullPointerException("null  URI");  AddressImpl addressImpl=new AddressImpl();  if (displayName != null)   addressImpl.setDisplayName(displayName);  addressImpl.setURI(uri);  return addressImpl;}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public static boolean hasQName(Node node,QName qname){  return qname.getNamespaceURI().equals(node.getNamespaceURI()) && qname.getLocalPart().equals(node.getLocalName());}  }
class C{  public Boolean isNfs41Supported(){  return nfs41Supported;}  }
class C{  public static TsconfigJson load(InputStream in){  return load(in,TsconfigJson.class);}  }
class C{  public static RevocationHash bruteForceHash(byte[] seed,byte[] target,int maxChildTries,int maxSiblingTries){  for (int i=0; i < maxChildTries; i++) {    for (int j=0; j < maxSiblingTries; j++) {      RevocationHash test=HashDerivation.calculateRevocationHash(seed,0,j);      if (Arrays.equals(test.getSecretHash(),target)) {        return new RevocationHash(i,j,test.getSecret(),test.getSecretHash());      }    }    seed=Tools.hashSecret(seed);  }  return null;}  }
class C{  public static Scsn cs_qr(Scs A,Scss S){  float Rx[], Vx[], Ax[], x[], Beta[];  int i, k, p, n, vnz, p1, top, m2, len, col, rnz, s[], leftmost[], Ap[], Ai[], parent[], Rp[], Ri[], Vp[], Vi[], w[], pinv[], q[];  Scs R, V;  Scsn N;  if (!Scs_util.CS_CSC(A) || S == null)   return (null);  n=A.n;  Ap=A.p;  Ai=A.i;  Ax=A.x;  q=S.q;  parent=S.parent;  pinv=S.pinv;  m2=S.m2;  vnz=S.lnz;  rnz=S.unz;  leftmost=S.leftmost;  w=new int[m2 + n];  x=new float[m2];  N=new Scsn();  s=w;  int s_offset=m2;  for (k=0; k < m2; k++)   x[k]=0;  N.L=V=Scs_util.cs_spalloc(m2,n,vnz,true,false);  N.U=R=Scs_util.cs_spalloc(m2,n,rnz,true,false);  N.B=Beta=new float[n];  Rp=R.p;  Ri=R.i;  Rx=R.x;  Vp=V.p;  Vi=V.i;  Vx=V.x;  for (i=0; i < m2; i++)   w[i]=-1;  rnz=0;  vnz=0;  for (k=0; k < n; k++) {    Rp[k]=rnz;    Vp[k]=p1=vnz;    w[k]=k;    Vi[vnz++]=k;    top=n;    col=q != null ? q[k] : k;    for (p=Ap[col]; p < Ap[col + 1]; p++) {      i=leftmost[Ai[p]];      for (len=0; w[i] != k; i=parent[i]) {        s[s_offset + (len++)]=i;        w[i]=k;      }      while (len > 0)       s[s_offset + (--top)]=s[s_offset + (--len)];      i=pinv[Ai[p]];      x[i]=Ax[p];      if (i > k && w[i] < k) {        Vi[vnz++]=i;        w[i]=k;      }    }    for (p=top; p < n; p++) {      i=s[s_offset + p];      Scs_happly.cs_happly(V,i,Beta[i],x);      Ri[rnz]=i;      Rx[rnz++]=x[i];      x[i]=0;      if (parent[i] == k)       vnz=Scs_scatter.cs_scatter(V,i,0,w,null,k,V,vnz);    }    for (p=p1; p < vnz; p++) {      Vx[p]=x[Vi[p]];      x[Vi[p]]=0;    }    Ri[rnz]=k;    float[] beta=new float[1];    beta[0]=Beta[k];    Rx[rnz++]=Scs_house.cs_house(Vx,p1,beta,vnz - p1);    Beta[k]=beta[0];  }  Rp[n]=rnz;  Vp[n]=vnz;  return N;}  }
class C{  public PolygonTransform(int targetWidth,int sides,boolean rotate){  this.targetWidth=targetWidth;  this.sides=sides;  this.rotate=rotate;}  }
class C{  private void speakMessage(){  if (androidTts == null) {    showDialog(DIALOG_LOADING);    ClearAllReceiver.removeCancel(getApplicationContext());    ClearAllReceiver.clearAll(false);    ReminderService.cancelReminder(getApplicationContext());    ManageNotification.update(this,smsPopupPager.getActiveMessage(),smsPopupPager.getPageCount());    androidTts=new TextToSpeech(SmsPopupActivity.this,androidTtsListener);  } else {    androidTts.speak(smsPopupPager.getActiveMessage().getMessageBody(),TextToSpeech.QUEUE_FLUSH,null);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:12.986 -0500",hash_original_method="56420943E8AF9990310F4859FACB8646",hash_generated_method="8745A21541E29843AB6A207C20FDB3B3") public void sort(Comparator<? super T> comparator){synchronized (mLock) {    if (mOriginalValues != null) {      Collections.sort(mOriginalValues,comparator);    } else {      Collections.sort(mObjects,comparator);    }  }  if (mNotifyOnChange)   notifyDataSetChanged();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:50.829 -0500",hash_original_method="E21A3F5A1E5C42E0733DFCD7E2B1A37B",hash_generated_method="F242D0BB1D05951AAF636A0347CCA641") public int next() throws IOException {  tagOffset=offset;  tag=read();  length=read();  if (length != 0x80) {    if ((length & 0x80) != 0) {      int numOctets=length & 0x7F;      if (numOctets > 5) {        throw new ASN1Exception("Too long encoding at [" + tagOffset + "]");      }      length=read();      for (int i=1; i < numOctets; i++) {        int ch=read();        length=(length << 8) + ch;      }      if (length > 0xFFFFFF) {        throw new ASN1Exception("Too long encoding at [" + tagOffset + "]");      }    }  } else {    length=INDEFINIT_LENGTH;  }  contentOffset=offset;  return tag;}  }
class C{  public void write(byte[] b,int off,int len) throws IOException {  if (def.finished()) {    throw new IOException("write beyond end of stream");  }  if ((off | len | (off + len)| (b.length - (off + len))) < 0) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return;  }  if (!def.finished()) {    def.setInput(b,off,len);    while (!def.needsInput()) {      deflate();    }  }}  }
class C{  public void updateGradeExtremities(double grade){  gradeExtremities.update(grade);}  }
class C{  public boolean isBrokerDisabled(){  return isBroker() && isPersistedRole(OrganizationRoleType.BROKER);}  }
class C{  public static byte combine2bytesToOne(byte high,byte low){  if (high < 0 || high > 0xf || low < 0 || low > 0xf) {    throw new RuntimeException("Out of Boundary");  }  return (byte)(high << 4 | low);}  }
class C{  private void lazyCalculatePaths(){  if (paths != null) {    return;  }  lazyCalculateMatrix();  THashMap<VertexPair<V>,GraphPath<V,E>> sps=new THashMap<VertexPair<V>,GraphPath<V,E>>();  int n=vertices.size();  nShortestPaths=0;  for (int i=0; i < n; i++) {    for (int j=0; j < n; j++) {      if (i == j) {        continue;      }      V v_i=vertices.get(i);      V v_j=vertices.get(j);      GraphPath<V,E> path=getShortestPathImpl(v_i,v_j);      if (path != null) {        sps.put(new VertexPair<V>(v_i,v_j),path);        nShortestPaths++;      }    }  }  this.paths=sps;}  }
class C{  public void reset(){  _list.reset();}  }
class C{  public NSECRecord(Name name,int dclass,long ttl,Name next,int[] types){  super(name,Type.NSEC,dclass,ttl);  this.next=checkName("next",next);  for (int i=0; i < types.length; i++) {    Type.check(types[i]);  }  this.types=new TypeBitmap(types);}  }
class C{  @Override public void flush() throws IOException {  super.flush();}  }
class C{  public float convertDpToPixels(float dp,Context context){  Resources resources=context.getResources();  DisplayMetrics metrics=resources.getDisplayMetrics();  float px=dp * (metrics.densityDpi / 160f);  return px;}  }
class C{  public SendableVoiceMessage.SendableVoiceMessageBuilder replyTo(Message replyTo){  this.replyTo=replyTo != null ? replyTo.getMessageId() : 0;  return this;}  }
class C{  public NetMapReader(String host,String port,NetMapConnector connector,String view) throws IOException {  netmapConn=connector;  if (view != null) {    setView(view);  }  DEBUG=Debug.debugging("netmap");  DEBUG_VERBOSE=Debug.debugging("netmap_verbose");  try {    s=connect(host,port);  } catch (  IOException e) {    throw e;  }}  }
class C{  private static void convertToHTML32(AttributeSet from,MutableAttributeSet to){  if (from == null) {    return;  }  Enumeration keys=from.getAttributeNames();  String value="";  while (keys.hasMoreElements()) {    Object key=keys.nextElement();    if (key instanceof CSS.Attribute) {      if ((key == CSS.Attribute.FONT_FAMILY) || (key == CSS.Attribute.FONT_SIZE) || (key == CSS.Attribute.COLOR)) {        createFontAttribute((CSS.Attribute)key,from,to);      } else       if (key == CSS.Attribute.FONT_WEIGHT) {        CSS.FontWeight weightValue=(CSS.FontWeight)from.getAttribute(CSS.Attribute.FONT_WEIGHT);        if ((weightValue != null) && (weightValue.getValue() > 400)) {          addAttribute(to,HTML.Tag.B,SimpleAttributeSet.EMPTY);        }      } else       if (key == CSS.Attribute.FONT_STYLE) {        String s=from.getAttribute(key).toString();        if (s.indexOf("italic") >= 0) {          addAttribute(to,HTML.Tag.I,SimpleAttributeSet.EMPTY);        }      } else       if (key == CSS.Attribute.TEXT_DECORATION) {        String decor=from.getAttribute(key).toString();        if (decor.indexOf("underline") >= 0) {          addAttribute(to,HTML.Tag.U,SimpleAttributeSet.EMPTY);        }        if (decor.indexOf("line-through") >= 0) {          addAttribute(to,HTML.Tag.STRIKE,SimpleAttributeSet.EMPTY);        }      } else       if (key == CSS.Attribute.VERTICAL_ALIGN) {        String vAlign=from.getAttribute(key).toString();        if (vAlign.indexOf("sup") >= 0) {          addAttribute(to,HTML.Tag.SUP,SimpleAttributeSet.EMPTY);        }        if (vAlign.indexOf("sub") >= 0) {          addAttribute(to,HTML.Tag.SUB,SimpleAttributeSet.EMPTY);        }      } else       if (key == CSS.Attribute.TEXT_ALIGN) {        addAttribute(to,HTML.Attribute.ALIGN,from.getAttribute(key).toString());      } else {        if (value.length() > 0) {          value=value + "; ";        }        value=value + key + ": "+ from.getAttribute(key);      }    } else {      Object attr=from.getAttribute(key);      if (attr instanceof AttributeSet) {        attr=((AttributeSet)attr).copyAttributes();      }      addAttribute(to,key,attr);    }  }  if (value.length() > 0) {    to.addAttribute(HTML.Attribute.STYLE,value);  }}  }
class C{  public static byte[] decode(byte[] source) throws Base64DecoderException {  return decode(source,0,source.length);}  }
class C{  public static Table createUnpartitionedTable(Configuration conf,HiveMetastoreClient ms,HiveObjectSpec tableSpec,TableType tableType,Path warehouseRoot) throws IOException, HiveMetastoreException {  Table table=new Table();  table.setDbName(tableSpec.getDbName());  table.setTableName(tableSpec.getTableName());  Map<String,String> parameters=new HashMap<>();  parameters.put(HiveParameterKeys.TLDT,Long.toString(System.currentTimeMillis()));  table.setParameters(parameters);  table.setPartitionKeys(new ArrayList<>());  table.setTableType(tableType.toString());  StorageDescriptor sd=new StorageDescriptor();  List<FieldSchema> columns=new ArrayList<>();  columns.add(new FieldSchema("key","string","my comment"));  sd.setCols(columns);  if (tableType == TableType.MANAGED_TABLE || tableType == TableType.EXTERNAL_TABLE) {    Path tableLocation=getPathForHiveObject(warehouseRoot,tableSpec);    sd.setLocation(tableLocation.toString());    createSomeTextFiles(conf,tableLocation);  } else   if (tableType == TableType.VIRTUAL_VIEW) {    table.setTableType(TableType.VIRTUAL_VIEW.toString());  }  table.setSd(sd);  if (!ms.existsDb(table.getDbName())) {    ms.createDatabase(new Database(table.getDbName(),null,null,null));  }  ms.createTable(table);  return table;}  }
class C{  @SuppressWarnings("OverlyLongMethod") private int process(int code,int currentPointer,final int[] program,final TTGraphicsState gs){  @SuppressWarnings("UnusedAssignment") int originalPointer=currentPointer;  int bytesToRead=0;  if (code >= 0xB0 && code <= 0xBF) {    bytesToRead=code % 8;    code-=bytesToRead;    bytesToRead++;  }  if (printOut && code < OPCODE_DESCRIPTIONS.length) {    System.out.println(OPCODE_DESCRIPTIONS[code]);  }  try {switch (code) {case SVTCAy:      gs.freedomVector=TTGraphicsState.y_axis;    gs.projectionVector=TTGraphicsState.y_axis;  gs.dualProjectionVector=TTGraphicsState.y_axis;break;case SVTCAx:gs.freedomVector=TTGraphicsState.x_axis;gs.projectionVector=TTGraphicsState.x_axis;gs.dualProjectionVector=TTGraphicsState.x_axis;break;case SPVTCAy:gs.projectionVector=TTGraphicsState.y_axis;gs.dualProjectionVector=TTGraphicsState.y_axis;break;case SPVTCAx:gs.projectionVector=TTGraphicsState.x_axis;gs.dualProjectionVector=TTGraphicsState.x_axis;break;case SFVTCAy:gs.freedomVector=TTGraphicsState.y_axis;break;case SFVTCAx:gs.freedomVector=TTGraphicsState.x_axis;break;case SPVTL0:{final int p1=stack.pop();final int p2=stack.pop();double xdiff=getDoubleFromF26Dot6(x[gs.zp2][p2] - x[gs.zp1][p1]);double ydiff=getDoubleFromF26Dot6(y[gs.zp2][p2] - y[gs.zp1][p1]);final double factor=Math.sqrt((xdiff * xdiff) + (ydiff * ydiff));xdiff/=factor;ydiff/=factor;gs.projectionVector=TTGraphicsState.createVector(storeDoubleAsF2Dot14(xdiff),storeDoubleAsF2Dot14(ydiff));gs.dualProjectionVector=gs.projectionVector;break;}case SPVTL1:{final int p1=stack.pop();final int p2=stack.pop();double xdiff=getDoubleFromF26Dot6(x[gs.zp2][p2] - x[gs.zp1][p1]);double ydiff=getDoubleFromF26Dot6(y[gs.zp2][p2] - y[gs.zp1][p1]);final double factor=Math.sqrt((xdiff * xdiff) + (ydiff * ydiff));xdiff/=factor;ydiff/=factor;gs.projectionVector=TTGraphicsState.createVector(storeDoubleAsF2Dot14(-ydiff),storeDoubleAsF2Dot14(xdiff));gs.dualProjectionVector=gs.projectionVector;break;}case SFVTL0:{final int p1=stack.pop();final int p2=stack.pop();double xdiff=getDoubleFromF26Dot6(x[gs.zp1][p2] - x[gs.zp2][p1]);double ydiff=getDoubleFromF26Dot6(y[gs.zp1][p2] - y[gs.zp2][p1]);final double factor=Math.sqrt((xdiff * xdiff) + (ydiff * ydiff));xdiff/=factor;ydiff/=factor;gs.freedomVector=TTGraphicsState.createVector(storeDoubleAsF2Dot14(xdiff),storeDoubleAsF2Dot14(ydiff));break;}case SFVTL1:{final int p1=stack.pop();final int p2=stack.pop();double xdiff=getDoubleFromF26Dot6(x[gs.zp1][p2] - x[gs.zp2][p1]);double ydiff=getDoubleFromF26Dot6(y[gs.zp1][p2] - y[gs.zp2][p1]);final double factor=Math.sqrt((xdiff * xdiff) + (ydiff * ydiff));xdiff/=factor;ydiff/=factor;gs.freedomVector=TTGraphicsState.createVector(storeDoubleAsF2Dot14(-ydiff),storeDoubleAsF2Dot14(xdiff));break;}case SPVFS:{final int y=stack.pop();final int x=stack.pop();gs.projectionVector=TTGraphicsState.createVector(x,y);gs.dualProjectionVector=gs.projectionVector;break;}case SFVFS:{final int y=stack.pop();final int x=stack.pop();gs.freedomVector=TTGraphicsState.createVector(x,y);break;}case GPV:{final int[] pv=TTGraphicsState.getVectorComponents(gs.projectionVector);stack.push(pv[0]);stack.push(pv[1]);break;}case GFV:{final int[] fv=TTGraphicsState.getVectorComponents(gs.freedomVector);stack.push(fv[0]);stack.push(fv[1]);break;}case SFVTPV:gs.freedomVector=gs.projectionVector;break;case ISECT:{final int b1=stack.pop();final int b0=stack.pop();final int a1=stack.pop();final int a0=stack.pop();final int ax=x[gs.zp1][a0];final int ay=y[gs.zp1][a0];final int adx=x[gs.zp1][a1] - ax;final int ady=y[gs.zp1][a1] - ay;final int bx=x[gs.zp0][b0];final int by=y[gs.zp0][b0];final int bdx=x[gs.zp0][b1] - bx;final int bdy=y[gs.zp0][b1] - by;final int x;final int y;if (adx == 0 && bdx == 0) {x=ax + bx / 2;y=(ay + by + (ay + ady)+ (by + bdy)) / 4;} else if (adx == 0) {final double bm=getDoubleFromF26Dot6(bdy) / getDoubleFromF26Dot6(bdx);final double bc=getDoubleFromF26Dot6(by) - (bm * getDoubleFromF26Dot6(bx));x=ax;y=storeDoubleAsF26Dot6((bm * getDoubleFromF26Dot6(ax)) + bc);} else if (bdx == 0) {final double am=getDoubleFromF26Dot6(ady) / getDoubleFromF26Dot6(adx);final double ac=getDoubleFromF26Dot6(ay) - (am * getDoubleFromF26Dot6(ax));x=bx;y=storeDoubleAsF26Dot6((am * getDoubleFromF26Dot6(bx)) + ac);} else {final double am=getDoubleFromF26Dot6(ady) / getDoubleFromF26Dot6(adx);final double ac=getDoubleFromF26Dot6(ay) - (am * getDoubleFromF26Dot6(ax));final double bm=getDoubleFromF26Dot6(bdy) / getDoubleFromF26Dot6(bdx);final double bc=getDoubleFromF26Dot6(by) - (bm * getDoubleFromF26Dot6(bx));if (am == bm) {x=(ax + bx + (ax + adx)+ (bx + bdx)) / 4;y=(ay + by + (ay + ady)+ (by + bdy)) / 4;} else {final double fx=(bc - ac) / (am - bm);x=storeDoubleAsF26Dot6(fx);y=storeDoubleAsF26Dot6((am * fx) + ac);}}final int p=stack.pop();this.x[gs.zp2][p]=x;this.y[gs.zp2][p]=y;break;}case SRP0:gs.rp0=stack.pop();break;case SRP1:gs.rp1=stack.pop();break;case SRP2:gs.rp2=stack.pop();break;case SZP0:{gs.zp0=stack.pop();break;}case SZP1:{final int value=stack.pop();if (value > 1 || value < 0) {System.out.println("ZP1 set incorrectly!");}gs.zp1=value;break;}case SZP2:{gs.zp2=stack.pop();break;}case SZPS:{final int value=stack.pop();gs.zp0=value;gs.zp1=value;gs.zp2=value;break;}case SLOOP:gs.loop=stack.pop();break;case RTG:gs.roundState=TTGraphicsState.g;gs.gridPeriod=1.0;break;case RTHG:gs.roundState=TTGraphicsState.hg;gs.gridPeriod=1.0;break;case SMD:gs.minimumDistance=stack.pop();break;case ELSE:{int curr=0;int nest=0;do {if (curr == EIF && nest != 0) {nest--;}currentPointer++;curr=program[currentPointer];if (curr == IF) {nest++;}if (curr == NPUSHB) {currentPointer++;currentPointer+=program[currentPointer];} else if (curr == NPUSHW) {currentPointer++;currentPointer+=program[currentPointer] * 2;} else if (curr >= PUSHB && curr <= PUSHB + 7) {currentPointer+=(curr + 1) - PUSHB;} else if (curr >= PUSHW && curr <= PUSHW + 7) {currentPointer+=((curr + 1) - PUSHW) * 2;}} while (curr != EIF || nest != 0);break;}case JMPR:{final int value=stack.pop();currentPointer=(currentPointer + value) - 1;if (currentPointer < 0) {throw new RuntimeException("Jumped back further than the start of the instruction.");}break;}case SCVTCI:gs.controlValueTableCutIn=stack.pop();break;case SSWCI:gs.singleWidthCutIn=stack.pop();break;case SSW:gs.singleWidthValue=stack.pop();break;case DUP:{final int value=stack.pop();stack.push(value);stack.push(value);break;}case POP:stack.pop();break;case CLEAR:stack=new Stack();break;case SWAP:{final int top=stack.pop();final int under=stack.pop();stack.push(top);stack.push(under);break;}case DEPTH:{stack.push(stack.size());break;}case CINDEX:{final int key=stack.pop();final int value=stack.elementAt(key);stack.push(value);break;}case MINDEX:{final int key=stack.pop();final int value=stack.remove(key);stack.push(value);break;}case ALIGNPTS:{final int p1=stack.pop();final int p2=stack.pop();final int p1loc=TTGraphicsState.getCoordsOnVector(gs.projectionVector,x[gs.zp1][p1],y[gs.zp1][p1]);final int p2loc=TTGraphicsState.getCoordsOnVector(gs.projectionVector,x[gs.zp0][p2],y[gs.zp0][p2]);final int target=(p1loc + p2loc) / 2;final int[] shift=gs.getFVMoveforPVDistance(target - p1loc);x[gs.zp1][p1]+=shift[0];y[gs.zp1][p1]+=shift[1];x[gs.zp0][p2]-=shift[0];y[gs.zp0][p2]-=shift[1];final int[] fv=TTGraphicsState.getVectorComponents(gs.freedomVector);if (fv[0] != 0) {touched[gs.zp1][p1][0]=true;touched[gs.zp0][p2][0]=true;}if (fv[1] != 0) {touched[gs.zp1][p1][1]=true;touched[gs.zp0][p2][1]=true;}break;}case UTP:{final int p=stack.pop();if (gs.freedomVector == TTGraphicsState.x_axis) {touched[gs.zp0][p][0]=false;} else if (gs.freedomVector == TTGraphicsState.y_axis) {touched[gs.zp0][p][1]=false;} else {touched[gs.zp0][p][0]=false;touched[gs.zp0][p][1]=false;}break;}case LOOPCALL:{final int func=stack.pop();final int count=stack.pop();final int[] function=functions.get(func);if (printGlyphInstructions && scalerRun) {System.out.println("Function " + func + " on line "+ currentPointer);print(function);System.out.println("");}for (int i=0; i < count; i++) {execute(function,gs);}if (printOut) {System.out.println("LOOPCALL finished");}break;}case CALL:{final int func=stack.pop();final int[] function=functions.get(func);if (printGlyphInstructions && scalerRun) {System.out.println("Function " + func + " on line "+ currentPointer);print(function);System.out.println("");}execute(function,gs);if (printOut) {System.out.println("CALL finished");}break;}case FDEF:{final int num=stack.pop();final int start=currentPointer;int curr;do {currentPointer++;curr=program[currentPointer];if (curr == NPUSHB) {currentPointer++;currentPointer+=program[currentPointer];} else if (curr == NPUSHW) {currentPointer++;currentPointer+=program[currentPointer] * 2;} else if (curr >= PUSHB && curr <= PUSHB + 7) {currentPointer+=(curr + 1) - PUSHB;} else if (curr >= PUSHW && curr <= PUSHW + 7) {currentPointer+=((curr + 1) - PUSHW) * 2;}} while (curr != ENDF);final int len=(currentPointer - start) - 1;currentPointer=start;final int[] function=new int[len];for (int i=0; i < len; i++) {currentPointer++;function[i]=program[currentPointer];}functions.put(num,function);currentPointer++;break;}case ENDF:break;case MDAP0:{final int p=stack.pop();gs.rp0=p;gs.rp1=p;if (gs.freedomVector == TTGraphicsState.x_axis) {touched[gs.zp0][p][0]=true;} else if (gs.freedomVector == TTGraphicsState.y_axis) {touched[gs.zp0][p][1]=true;} else {touched[gs.zp0][p][0]=true;touched[gs.zp0][p][1]=true;}break;}case MDAP1:{final int p=stack.pop();gs.rp0=p;gs.rp1=p;int m=TTGraphicsState.getCoordsOnVector(gs.projectionVector,x[gs.zp0][p],y[gs.zp0][p]);m=storeDoubleAsF26Dot6(gs.round(getDoubleFromF26Dot6(m))) - m;final int[] shift=gs.getFVMoveforPVDistance(m);x[gs.zp0][p]+=shift[0];y[gs.zp0][p]+=shift[1];final int[] fv=TTGraphicsState.getVectorComponents(gs.freedomVector);if (fv[0] != 0) {touched[gs.zp0][p][0]=true;}if (fv[1] != 0) {touched[gs.zp0][p][1]=true;}break;}case IUPy:{interpolateUntouchedPoints(IUPy);break;}case IUPx:{interpolateUntouchedPoints(IUPx);break;}case SHP0:{for (int i=0; i < gs.loop; i++) {final int p=stack.pop();if (p > x[gs.zp2].length || gs.rp2 > x[gs.zp1].length) {LogWriter.writeLog("Trying to use a point which doesn't exist! (SHP0, zone " + gs.zp2 + ')');break;}final int newRP=TTGraphicsState.getCoordsOnVector(gs.projectionVector,x[gs.zp1][gs.rp2],y[gs.zp1][gs.rp2]);final int oldRP=TTGraphicsState.getCoordsOnVector(gs.projectionVector,x[ORIGINAL + gs.zp1][gs.rp2],y[ORIGINAL + gs.zp1][gs.rp2]);final int pMove=newRP - oldRP;final int[] shift=gs.getFVMoveforPVDistance(pMove);x[gs.zp2][p]+=shift[0];y[gs.zp2][p]+=shift[1];final int[] fv=TTGraphicsState.getVectorComponents(gs.freedomVector);if (fv[0] != 0) {touched[gs.zp2][p][0]=true;}if (fv[1] != 0) {touched[gs.zp2][p][1]=true;}}gs.loop=1;break;}case SHP1:{for (int i=0; i < gs.loop; i++) {final int p=stack.pop();final int newRP=TTGraphicsState.getCoordsOnVector(gs.projectionVector,x[gs.zp0][gs.rp1],y[gs.zp0][gs.rp1]);final int oldRP=TTGraphicsState.getCoordsOnVector(gs.projectionVector,x[ORIGINAL + gs.zp0][gs.rp1],y[ORIGINAL + gs.zp0][gs.rp1]);final int shift=newRP - oldRP;final int[] move=gs.getFVMoveforPVDistance(shift);x[gs.zp2][p]+=move[0];y[gs.zp2][p]+=move[1];if (move[0] != 0) {touched[gs.zp2][p][0]=true;}if (move[1] != 0) {touched[gs.zp2][p][1]=true;}}gs.loop=1;break;}case SHC0:{final int c=stack.pop();final int[] contourLengths=new int[contour[GLYPH_ZONE].length];final int[] contourStarts=new int[contour[GLYPH_ZONE].length];int contourCount=0, lastContour=0;contourStarts[0]=0;for (int i=0; i < contour[GLYPH_ZONE].length; i++) {if (contour[GLYPH_ZONE][i]) {contourStarts[contourCount + 1]=i + 1;contourLengths[contourCount]=i + 1 - lastContour;lastContour=i + 1;contourCount++;}}final int newRP=TTGraphicsState.getCoordsOnVector(gs.projectionVector,x[gs.zp1][gs.rp2],y[gs.zp1][gs.rp2]);final int oldRP=TTGraphicsState.getCoordsOnVector(gs.projectionVector,x[ORIGINAL + gs.zp1][gs.rp2],y[ORIGINAL + gs.zp1][gs.rp2]);final int shift=newRP - oldRP;final int[] move=gs.getFVMoveforPVDistance(shift);for (int i=contourStarts[c]; i < contourStarts[c] + contourLengths[c]; i++) {if (gs.zp1 == gs.zp2 || i != gs.rp2) {x[gs.zp2][i]+=move[0];y[gs.zp2][i]+=move[1];}}break;}case SHC1:{final int c=stack.pop();final int[] contourLengths=new int[contour[GLYPH_ZONE].length];final int[] contourStarts=new int[contour[GLYPH_ZONE].length];int contourCount=0, lastContour=0;contourStarts[0]=0;for (int i=0; i < contour[GLYPH_ZONE].length; i++) {if (contour[GLYPH_ZONE][i]) {contourStarts[contourCount + 1]=i + 1;contourLengths[contourCount]=i + 1 - lastContour;lastContour=i + 1;contourCount++;}}final int newRP=TTGraphicsState.getCoordsOnVector(gs.projectionVector,x[gs.zp0][gs.rp1],y[gs.zp0][gs.rp1]);final int oldRP=TTGraphicsState.getCoordsOnVector(gs.projectionVector,x[ORIGINAL + gs.zp0][gs.rp1],y[ORIGINAL + gs.zp0][gs.rp1]);final int shift=newRP - oldRP;final int[] move=gs.getFVMoveforPVDistance(shift);for (int i=contourStarts[c]; i < contourStarts[c] + contourLengths[c]; i++) {if (gs.zp2 != gs.zp0 || i != gs.rp1) {x[gs.zp2][i]+=move[0];y[gs.zp2][i]+=move[1];}}break;}case SHZ0:{final int z=stack.pop();final int newRP=TTGraphicsState.getCoordsOnVector(gs.projectionVector,x[gs.zp1][gs.rp2],y[gs.zp1][gs.rp2]);final int oldRP=TTGraphicsState.getCoordsOnVector(gs.projectionVector,x[ORIGINAL + gs.zp1][gs.rp2],y[ORIGINAL + gs.zp1][gs.rp2]);final int shift=newRP - oldRP;final int[] move=gs.getFVMoveforPVDistance(shift);for (int i=0; i < x[z].length; i++) {if (z != gs.zp1 || i != gs.rp2) {x[z][i]+=move[0];y[z][i]+=move[1];}}break;}case SHZ1:{final int z=stack.pop();final int newRP=TTGraphicsState.getCoordsOnVector(gs.projectionVector,x[gs.zp0][gs.rp1],y[gs.zp0][gs.rp1]);final int oldRP=TTGraphicsState.getCoordsOnVector(gs.projectionVector,x[ORIGINAL + gs.zp0][gs.rp1],y[ORIGINAL + gs.zp0][gs.rp1]);final int shift=newRP - oldRP;final int[] move=gs.getFVMoveforPVDistance(shift);for (int i=0; i < x[z].length; i++) {if (z != gs.zp0 || i != gs.rp1) {x[z][i]+=move[0];y[z][i]+=move[1];}}break;}case SHPIX:{final int magnitude=stack.pop();final int[] fv=TTGraphicsState.getVectorComponents(gs.freedomVector);for (int i=0; i < gs.loop; i++) {final int point=stack.pop();x[gs.zp2][point]+=(magnitude * getDoubleFromF2Dot14(fv[0]) / 64);y[gs.zp2][point]+=(magnitude * getDoubleFromF2Dot14(fv[1]) / 64);if (fv[0] != 0) {touched[gs.zp2][point][0]=true;}if (fv[1] != 0) {touched[gs.zp2][point][1]=true;}}gs.loop=1;break;}case IP:{for (int i=0; i < gs.loop; i++) {final int p=stack.pop();if (p < 0 || p > x[gs.zp2].length || gs.rp1 > x[gs.zp0].length || gs.rp2 > x[gs.zp1].length) {LogWriter.writeLog("Trying to use a point which doesn't exist! (IP, zone " + gs.zp2 + ')');break;}final int originalRP1=TTGraphicsState.getCoordsOnVector(gs.dualProjectionVector,x[ORIGINAL + gs.zp0][gs.rp1],y[ORIGINAL + gs.zp0][gs.rp1]);final int originalRP2=TTGraphicsState.getCoordsOnVector(gs.dualProjectionVector,x[ORIGINAL + gs.zp1][gs.rp2],y[ORIGINAL + gs.zp1][gs.rp2]);if (originalRP1 != originalRP2) {final int originalP=TTGraphicsState.getCoordsOnVector(gs.dualProjectionVector,x[ORIGINAL + gs.zp2][p],y[ORIGINAL + gs.zp2][p]);final double pos=(double)(originalP - originalRP1) / (originalRP2 - originalRP1);final int newRP1=TTGraphicsState.getCoordsOnVector(gs.projectionVector,x[gs.zp0][gs.rp1],y[gs.zp0][gs.rp1]);final int newRP2=TTGraphicsState.getCoordsOnVector(gs.projectionVector,x[gs.zp1][gs.rp2],y[gs.zp1][gs.rp2]);final int pMove=(int)(((pos * (newRP2 - newRP1)) + newRP1) + 0.5) - originalP;final int[] shift=gs.getFVMoveforPVDistance(pMove);x[gs.zp2][p]+=shift[0];y[gs.zp2][p]+=shift[1];final int[] fv=TTGraphicsState.getVectorComponents(gs.freedomVector);if (fv[0] != 0) {touched[gs.zp2][p][0]=true;}if (fv[1] != 0) {touched[gs.zp2][p][1]=true;}}}gs.loop=1;break;}case MSIRP0:{final int d=stack.pop();final int p=stack.pop();final int[] shift=gs.getFVMoveforPVDistance(d - (TTGraphicsState.getCoordsOnVector(gs.projectionVector,x[gs.zp1][p],y[gs.zp1][p]) - TTGraphicsState.getCoordsOnVector(gs.projectionVector,x[gs.zp0][gs.rp0],y[gs.zp0][gs.rp0])));x[gs.zp1][p]+=shift[0];y[gs.zp1][p]+=shift[1];final int[] fv=TTGraphicsState.getVectorComponents(gs.freedomVector);if (fv[0] != 0) {touched[gs.zp1][p][0]=true;}if (fv[1] != 0) {touched[gs.zp1][p][1]=true;}gs.rp1=gs.rp0;gs.rp2=p;break;}case MSIRP1:{final int d=stack.pop();final int p=stack.pop();final int[] shift=gs.getFVMoveforPVDistance(d - (TTGraphicsState.getCoordsOnVector(gs.projectionVector,x[gs.zp1][p],y[gs.zp1][p]) - TTGraphicsState.getCoordsOnVector(gs.projectionVector,x[gs.zp0][gs.rp0],y[gs.zp0][gs.rp0])));x[gs.zp1][p]+=shift[0];y[gs.zp1][p]+=shift[1];final int[] fv=TTGraphicsState.getVectorComponents(gs.freedomVector);if (fv[0] != 0) {touched[gs.zp1][p][0]=true;}if (fv[1] != 0) {touched[gs.zp1][p][1]=true;}gs.rp1=gs.rp0;gs.rp2=p;gs.rp0=p;break;}case ALIGNRP:for (int i=0; i < gs.loop; i++) {final int p=stack.pop();final int target=TTGraphicsState.getCoordsOnVector(gs.projectionVector,x[gs.zp0][gs.rp0],y[gs.zp0][gs.rp0]);final int pMove=target - TTGraphicsState.getCoordsOnVector(gs.projectionVector,x[gs.zp1][p],y[gs.zp1][p]);final int[] shift=gs.getFVMoveforPVDistance(pMove);x[gs.zp1][p]+=shift[0];y[gs.zp1][p]+=shift[1];final int[] fv=TTGraphicsState.getVectorComponents(gs.freedomVector);if (fv[0] != 0) {touched[gs.zp1][p][0]=true;}if (fv[1] != 0) {touched[gs.zp1][p][1]=true;}}gs.loop=1;break;case RTDG:gs.roundState=TTGraphicsState.dg;gs.gridPeriod=1.0;break;case MIAP0:{final int cvtEntry=stack.pop();final int p=stack.pop();final int target=cvt.get(cvtEntry);final int current=TTGraphicsState.getCoordsOnVector(gs.projectionVector,x[gs.zp0][p],y[gs.zp0][p]);final int pMove=target - current;final int[] shift=gs.getFVMoveforPVDistance(pMove);x[gs.zp0][p]+=shift[0];y[gs.zp0][p]+=shift[1];final int[] fv=TTGraphicsState.getVectorComponents(gs.freedomVector);if (fv[0] != 0) {touched[gs.zp0][p][0]=true;}if (fv[1] != 0) {touched[gs.zp0][p][1]=true;}gs.rp0=gs.rp1=p;break;}case MIAP1:{final int cvtEntry=stack.pop();final int p=stack.pop();int target=cvt.get(cvtEntry);final int current=TTGraphicsState.getCoordsOnVector(gs.projectionVector,x[gs.zp0][p],y[gs.zp0][p]);int pMove=target - current;if (Math.abs(pMove) > gs.controlValueTableCutIn) {target=current;}target=storeDoubleAsF26Dot6(gs.round(getDoubleFromF26Dot6(target)));pMove=target - current;final int[] shift=gs.getFVMoveforPVDistance(pMove);x[gs.zp0][p]+=shift[0];y[gs.zp0][p]+=shift[1];final int[] fv=TTGraphicsState.getVectorComponents(gs.freedomVector);if (fv[0] != 0) {touched[gs.zp0][p][0]=true;}if (fv[1] != 0) {touched[gs.zp0][p][1]=true;}gs.rp0=gs.rp1=p;break;}case NPUSHB:currentPointer++;currentPointer=readFromIS(program[currentPointer],false,currentPointer,program);break;case NPUSHW:currentPointer++;currentPointer=readFromIS(program[currentPointer],true,currentPointer,program);break;case WS:{final int value=stack.pop();final int key=stack.pop();storage[key]=value;break;}case RS:{final int key=stack.pop();stack.push(storage[key]);break;}case WCVTP:{final int value=stack.pop();final int key=stack.pop();cvt.putInPixels(key,value);break;}case RCVT:{final int key=stack.pop();stack.push(cvt.get(key));break;}case GC0:{final int p=stack.pop();stack.push(TTGraphicsState.getCoordsOnVector(gs.projectionVector,x[gs.zp2][p],y[gs.zp2][p]));break;}case GC1:{final int p=stack.pop();stack.push(TTGraphicsState.getCoordsOnVector(gs.dualProjectionVector,x[ORIGINAL + gs.zp2][p],y[ORIGINAL + gs.zp2][p]));break;}case SCFS:{final int value=stack.pop();final int p=stack.pop();final int current=TTGraphicsState.getCoordsOnVector(gs.projectionVector,x[gs.zp2][p],y[gs.zp2][p]);final int pMove=value - current;final int[] shift=gs.getFVMoveforPVDistance(pMove);x[gs.zp2][p]+=shift[0];y[gs.zp2][p]+=shift[1];final int[] fv=TTGraphicsState.getVectorComponents(gs.freedomVector);if (fv[0] != 0) {touched[gs.zp2][p][0]=true;}if (fv[1] != 0) {touched[gs.zp2][p][1]=true;}break;}case MD0:{final int p1=stack.pop();final int p2=stack.pop();final int distance=TTGraphicsState.getCoordsOnVector(gs.projectionVector,x[gs.zp1][p2],y[gs.zp1][p2]) - TTGraphicsState.getCoordsOnVector(gs.projectionVector,x[gs.zp0][p1],y[gs.zp0][p1]);stack.push(distance);break;}case MD1:{final int p1=stack.pop();final int p2=stack.pop();final int distance=TTGraphicsState.getCoordsOnVector(gs.dualProjectionVector,x[ORIGINAL + gs.zp1][p2],y[ORIGINAL + gs.zp1][p2]) - TTGraphicsState.getCoordsOnVector(gs.dualProjectionVector,x[ORIGINAL + gs.zp0][p1],y[ORIGINAL + gs.zp0][p1]);stack.push(distance);break;}case MPPEM:{int pvppem=TTGraphicsState.getCoordsOnVector(gs.projectionVector,(int)(ppem * 64),(int)(ppem * 64)) / 64;if (pvppem < 0) {pvppem=-pvppem;}stack.push(pvppem);break;}case MPS:{stack.push((int)(ptSize * 64));break;}case FLIPON:gs.autoFlip=true;break;case FLIPOFF:gs.autoFlip=false;break;case DEBUG:stack.pop();break;case LT:{final int right=stack.pop();final int left=stack.pop();if (left < right) {stack.push(1);} else {stack.push(0);}break;}case LTEQ:{final int right=stack.pop();final int left=stack.pop();if (left <= right) {stack.push(1);} else {stack.push(0);}break;}case GT:{final int right=stack.pop();final int left=stack.pop();if (left > right) {stack.push(1);} else {stack.push(0);}break;}case GTEQ:{final int right=stack.pop();final int left=stack.pop();if (left >= right) {stack.push(1);} else {stack.push(0);}break;}case EQ:{final int right=stack.pop();final int left=stack.pop();if (left == right) {stack.push(1);} else {stack.push(0);}break;}case NEQ:{final int right=stack.pop();final int left=stack.pop();if (left != right) {stack.push(1);} else {stack.push(0);}break;}case ODD:{int value=stack.pop();value=storeDoubleAsF26Dot6(gs.round(getDoubleFromF26Dot6(value)));value=(value >> 6) % 2;stack.push(value);break;}case EVEN:{int value=stack.pop();value=storeDoubleAsF26Dot6(gs.round(getDoubleFromF26Dot6(value)));value=((value >> 6) + 1) % 2;stack.push(value);break;}case IF:{final boolean value=stack.pop() != 0;if (!value) {int curr=0;int nest=0;do {if (curr == EIF && nest != 0) {nest--;}currentPointer++;curr=program[currentPointer];if (curr == IF) {nest++;}if (curr == NPUSHB) {currentPointer++;currentPointer+=program[currentPointer];} else if (curr == NPUSHW) {currentPointer++;currentPointer+=program[currentPointer] * 2;} else if (curr >= PUSHB && curr <= PUSHB + 7) {currentPointer+=(curr + 1) - PUSHB;} else if (curr >= PUSHW && curr <= PUSHW + 7) {currentPointer+=((curr + 1) - PUSHW) * 2;}} while ((curr != ELSE && curr != EIF) || nest != 0);}break;}case EIF:break;case AND:{final boolean right=stack.pop() != 0;final boolean left=stack.pop() != 0;if (left && right) {stack.push(1);} else {stack.push(0);}break;}case OR:{final boolean right=stack.pop() != 0;final boolean left=stack.pop() != 0;if (left || right) {stack.push(1);} else {stack.push(0);}break;}case NOT:{final boolean value=stack.pop() != 0;if (!value) {stack.push(1);} else {stack.push(0);}break;}case DELTAP1:{final int loop=stack.pop();for (int i=0; i < loop; i++) {final int p=stack.pop();final int arg=stack.pop();final int ppem=gs.deltaBase + (arg >> 4);if (ppem == this.ppem) {int mag=(arg & 0xF) - 7;if (mag <= 0) {mag-=1;}final int pMove=storeDoubleAsF26Dot6(mag * (1 / Math.pow(2,gs.deltaShift)));final int[] shift=gs.getFVMoveforPVDistance(pMove);x[gs.zp0][p]+=shift[0];y[gs.zp0][p]+=shift[1];final int[] fv=TTGraphicsState.getVectorComponents(gs.freedomVector);if (fv[0] != 0) {touched[gs.zp0][p][0]=true;}if (fv[1] != 0) {touched[gs.zp0][p][1]=true;}}}break;}case SDB:gs.deltaBase=stack.pop();break;case SDS:gs.deltaShift=stack.pop();break;case ADD:stack.push(stack.pop() + stack.pop());break;case SUB:{final int right=stack.pop();final int left=stack.pop();stack.push(left - right);break;}case DIV:{final int right=stack.pop();final int left=stack.pop();if (right != 0) {stack.push((left * 64) / right);} else {stack.push(0);}break;}case MUL:{final int a=stack.pop();final int b=stack.pop();stack.push(a * b / 64);break;}case ABS:{int value=stack.pop();if (value < 0) {value=-value;}stack.push(value);break;}case NEG:stack.push(-stack.pop());break;case FLOOR:stack.push((stack.pop() >> 6) << 6);break;case CEILING:{int value=stack.pop();if ((value & 63) != 0) {value=(((value >> 6) + 1) << 6);}stack.push(value);break;}case ROUND00:{int n=stack.pop();n=engineCompensation(n,0);final double num=getDoubleFromF26Dot6(n);stack.push(storeDoubleAsF26Dot6(gs.round(num)));break;}case ROUND01:{int n=stack.pop();n=engineCompensation(n,1);final double num=getDoubleFromF26Dot6(n);stack.push(storeDoubleAsF26Dot6(gs.round(num)));break;}case ROUND10:{int n=stack.pop();n=engineCompensation(n,2);final double num=getDoubleFromF26Dot6(n);stack.push(storeDoubleAsF26Dot6(gs.round(num)));break;}case ROUND11:{int n=stack.pop();n=engineCompensation(n,3);final double num=getDoubleFromF26Dot6(n);stack.push(storeDoubleAsF26Dot6(gs.round(num)));break;}case NROUND00:stack.push(engineCompensation(stack.pop(),0));break;case NROUND01:stack.push(engineCompensation(stack.pop(),1));break;case NROUND10:stack.push(engineCompensation(stack.pop(),2));break;case NROUND11:stack.push(engineCompensation(stack.pop(),3));break;case WCVTF:{final int value=stack.pop();final int key=stack.pop();cvt.putInFUnits(key,value);break;}case DELTAP2:{final int loop=stack.pop();for (int i=0; i < loop; i++) {final int p=stack.pop();final int arg=stack.pop();final int ppem=gs.deltaBase + 16 + (arg >> 4);if (ppem == this.ppem) {int mag=(arg & 0xF) - 7;if (mag <= 0) {mag-=1;}final int pMove=storeDoubleAsF26Dot6(mag * (1 / Math.pow(2,gs.deltaShift)));final int[] shift=gs.getFVMoveforPVDistance(pMove);x[gs.zp0][p]+=shift[0];y[gs.zp0][p]+=shift[1];final int[] fv=TTGraphicsState.getVectorComponents(gs.freedomVector);if (fv[0] != 0) {touched[gs.zp0][p][0]=true;}if (fv[1] != 0) {touched[gs.zp0][p][1]=true;}}}break;}case DELTAP3:{final int loop=stack.pop();for (int i=0; i < loop; i++) {final int p=stack.pop();final int arg=stack.pop();final int ppem=gs.deltaBase + 32 + (arg >> 4);if (ppem == this.ppem) {int mag=(arg & 0xF) - 7;if (mag <= 0) {mag-=1;}final int pMove=storeDoubleAsF26Dot6(mag * (1 / Math.pow(2,gs.deltaShift)));final int[] shift=gs.getFVMoveforPVDistance(pMove);x[gs.zp0][p]+=shift[0];y[gs.zp0][p]+=shift[1];final int[] fv=TTGraphicsState.getVectorComponents(gs.freedomVector);if (fv[0] != 0) {touched[gs.zp0][p][0]=true;}if (fv[1] != 0) {touched[gs.zp0][p][1]=true;}}}break;}case DELTAC1:{final int loop=stack.pop();for (int i=0; i < loop; i++) {final int cvtEntry=stack.pop();final int arg=stack.pop();final int ppem=gs.deltaBase + (arg >> 4);if (ppem == this.ppem) {int mag=(arg & 0xF) - 7;if (mag <= 0) {mag-=1;}final int change=storeDoubleAsF26Dot6(mag * (1 / Math.pow(2,gs.deltaShift)));int value=cvt.get(cvtEntry);value+=change;cvt.putInPixels(cvtEntry,value);}}break;}case DELTAC2:{final int loop=stack.pop();for (int i=0; i < loop; i++) {final int cvtEntry=stack.pop();final int arg=stack.pop();final int ppem=gs.deltaBase + 16 + (arg >> 4);if (ppem == this.ppem) {int mag=(arg & 0xF) - 7;if (mag <= 0) {mag-=1;}final int change=storeDoubleAsF26Dot6(mag * (1 / Math.pow(2,gs.deltaShift)));int value=cvt.get(cvtEntry);value+=change;cvt.putInPixels(cvtEntry,value);}}break;}case DELTAC3:{final int loop=stack.pop();for (int i=0; i < loop; i++) {final int cvtEntry=stack.pop();final int arg=stack.pop();final int ppem=gs.deltaBase + 32 + (arg >> 4);if (ppem == this.ppem) {int mag=(arg & 0xF) - 7;if (mag <= 0) {mag-=1;}final int change=storeDoubleAsF26Dot6(mag * (1 / Math.pow(2,gs.deltaShift)));int value=cvt.get(cvtEntry);value+=change;cvt.putInPixels(cvtEntry,value);}}break;}case SROUND:gs.roundState=stack.pop();gs.gridPeriod=1.0;break;case S45ROUND:gs.roundState=stack.pop();gs.gridPeriod=0.7071067811865476;break;case JROT:{final boolean jump=stack.pop() != 0;final int amount=stack.pop();if (jump) {currentPointer=currentPointer + amount - 1;}break;}case JROF:{final boolean jump=stack.pop() != 0;final int amount=stack.pop();if (!jump) {currentPointer=currentPointer + amount - 1;}break;}case ROFF:gs.roundState=TTGraphicsState.off;break;case RUTG:gs.roundState=TTGraphicsState.utg;gs.gridPeriod=1.0;break;case RDTG:gs.roundState=TTGraphicsState.dtg;gs.gridPeriod=1.0;break;case SANGW:stack.pop();break;case AA:stack.pop();break;case FLIPPT:{for (int i=0; i < gs.loop; i++) {final int point=stack.pop();curve[gs.zp0][point]=!curve[gs.zp0][point];}gs.loop=1;break;}case FLIPRGON:{final int high=stack.pop();final int low=stack.pop();for (int i=low; i <= high; i++) {curve[gs.zp0][i]=true;}break;}case FLIPRGOFF:{final int high=stack.pop();final int low=stack.pop();for (int i=low; i <= high; i++) {curve[gs.zp0][i]=false;}break;}case SCANCTRL:stack.pop();break;case SDPVTL0:{final int p2=stack.pop();final int p1=stack.pop();double xdiff=getDoubleFromF26Dot6(x[gs.zp2][p2] - x[gs.zp1][p1]);double ydiff=getDoubleFromF26Dot6(y[gs.zp2][p2] - y[gs.zp1][p1]);double dxdiff=getDoubleFromF26Dot6(x[ORIGINAL + gs.zp2][p2] - x[ORIGINAL + gs.zp1][p1]);double dydiff=getDoubleFromF26Dot6(y[ORIGINAL + gs.zp2][p2] - y[ORIGINAL + gs.zp1][p1]);final double factor=Math.sqrt((xdiff * xdiff) + (ydiff * ydiff));final double dfactor=Math.sqrt((dxdiff * dxdiff) + (dydiff * dydiff));xdiff/=factor;ydiff/=factor;dxdiff/=dfactor;dydiff/=dfactor;gs.projectionVector=TTGraphicsState.createVector(storeDoubleAsF2Dot14(xdiff),storeDoubleAsF2Dot14(ydiff));gs.dualProjectionVector=TTGraphicsState.createVector(storeDoubleAsF2Dot14(dxdiff),storeDoubleAsF2Dot14(dydiff));break;}case SDPVTL1:{final int p2=stack.pop();final int p1=stack.pop();double xdiff=getDoubleFromF26Dot6(x[gs.zp2][p2] - x[gs.zp1][p1]);double ydiff=getDoubleFromF26Dot6(y[gs.zp2][p2] - y[gs.zp1][p1]);double dxdiff=getDoubleFromF26Dot6(x[ORIGINAL + gs.zp2][p2] - x[ORIGINAL + gs.zp1][p1]);double dydiff=getDoubleFromF26Dot6(y[ORIGINAL + gs.zp2][p2] - y[ORIGINAL + gs.zp1][p1]);final double factor=Math.sqrt((xdiff * xdiff) + (ydiff * ydiff));final double dfactor=Math.sqrt((dxdiff * dxdiff) + (dydiff * dydiff));xdiff/=factor;ydiff/=factor;dxdiff/=dfactor;dydiff/=dfactor;gs.projectionVector=TTGraphicsState.createVector(storeDoubleAsF2Dot14(ydiff),storeDoubleAsF2Dot14(-xdiff));gs.dualProjectionVector=TTGraphicsState.createVector(storeDoubleAsF2Dot14(dydiff),storeDoubleAsF2Dot14(-dxdiff));break;}case GETINFO:{final int selector=stack.pop();int result=0;if ((selector & 1) == 1) {result+=3;}stack.push(result);break;}case IDEF:{final int func=stack.pop();final int start=currentPointer;int curr;do {currentPointer++;curr=program[currentPointer];} while (curr != ENDF);final int len=(currentPointer - start) - 1;currentPointer=start;final int[] instruction=new int[len];for (int i=0; i < len; i++) {currentPointer++;instruction[i]=program[currentPointer];}instructions.put(func,instruction);currentPointer++;break;}case ROLL:{final int top=stack.pop();final int middle=stack.pop();final int bottom=stack.pop();stack.push(middle);stack.push(top);stack.push(bottom);break;}case MAX:{final int value1=stack.pop();final int value2=stack.pop();if (value1 > value2) {stack.push(value1);} else {stack.push(value2);}break;}case MIN:{final int value1=stack.pop();final int value2=stack.pop();if (value1 < value2) {stack.push(value1);} else {stack.push(value2);}break;}case SCANTYPE:stack.pop();break;case INSTCTRL:{final int s=stack.pop();final int value=stack.pop();if (s == 1) {gs.instructControl=value;} else if (s == 2) {useDefaultGS=value == 2;}break;}case PUSHB:if (printOut) {System.out.println("PUSHB1    - Push bytes from IS to stack");}currentPointer=readFromIS(bytesToRead,false,currentPointer,program);break;case PUSHW:if (printOut) {System.out.println("PUSHW1    - Push words from IS to stack");}currentPointer=readFromIS(bytesToRead,true,currentPointer,program);break;default :if (code >= MDRP && code < MDRP + 0x20) {final int args=code - MDRP;if (printOut) {System.out.println("MDRP      - Move direct relative point (" + Integer.toBinaryString(args) + ')');}boolean setRP0toP=false, useMinimumDistance=false, roundDistance=false;if ((args & paramRESETRP0) == paramRESETRP0) {setRP0toP=true;}if ((args & paramUSEMINDIST) == paramUSEMINDIST) {useMinimumDistance=true;}if ((args & paramROUND) == paramROUND) {roundDistance=true;}final int distanceType=args & 3;final int p=stack.pop();int originalDistance=TTGraphicsState.getCoordsOnVector(gs.dualProjectionVector,x[ORIGINAL + gs.zp1][p],y[ORIGINAL + gs.zp1][p]) - TTGraphicsState.getCoordsOnVector(gs.dualProjectionVector,x[ORIGINAL + gs.zp0][gs.rp0],y[ORIGINAL + gs.zp0][gs.rp0]);if (Math.abs(originalDistance) < gs.singleWidthCutIn) {if (originalDistance > 0) {originalDistance=gs.singleWidthValue;} else {originalDistance=-gs.singleWidthValue;}}originalDistance=engineCompensation(originalDistance,distanceType);if (roundDistance) {originalDistance=storeDoubleAsF26Dot6(gs.round(getDoubleFromF26Dot6(originalDistance)));}if (useMinimumDistance && Math.abs(originalDistance) < gs.minimumDistance) {if (originalDistance < 0) {originalDistance=-gs.minimumDistance;} else {originalDistance=gs.minimumDistance;}}final int target=TTGraphicsState.getCoordsOnVector(gs.projectionVector,x[gs.zp0][gs.rp0],y[gs.zp0][gs.rp0]) + originalDistance;final int pVMove=target - TTGraphicsState.getCoordsOnVector(gs.projectionVector,x[gs.zp1][p],y[gs.zp1][p]);final int[] shift=gs.getFVMoveforPVDistance(pVMove);x[gs.zp1][p]+=shift[0];y[gs.zp1][p]+=shift[1];final int[] fv=TTGraphicsState.getVectorComponents(gs.freedomVector);if (fv[0] != 0) {touched[gs.zp1][p][0]=true;}if (fv[1] != 0) {touched[gs.zp1][p][1]=true;}gs.rp1=gs.rp0;gs.rp2=p;if (setRP0toP) {gs.rp0=p;}} else if (code >= MIRP && code <= MIRP + 0x1F) {final int args=code - MIRP;if (printOut) {System.out.println("MIRP      - Move Indirect Relative Point(" + Integer.toBinaryString(args) + ')');}boolean setRP0toP=false, useMinimumDistance=false, roundDistanceAndCheckCutIn=false;if ((args & paramRESETRP0) == paramRESETRP0) {setRP0toP=true;}if ((args & paramUSEMINDIST) == paramUSEMINDIST) {useMinimumDistance=true;}if ((args & paramROUND) == paramROUND) {roundDistanceAndCheckCutIn=true;}final int distanceType=args & 3;int cvtEntry=cvt.get(stack.pop());final int p=stack.pop();int distance=TTGraphicsState.getCoordsOnVector(gs.dualProjectionVector,x[ORIGINAL + gs.zp1][p],y[ORIGINAL + gs.zp1][p]) - TTGraphicsState.getCoordsOnVector(gs.dualProjectionVector,x[ORIGINAL + gs.zp0][gs.rp0],y[ORIGINAL + gs.zp0][gs.rp0]);if (Math.abs(distance - gs.singleWidthValue) < gs.singleWidthCutIn) {distance=gs.singleWidthValue;}if (roundDistanceAndCheckCutIn) {if (gs.autoFlip && ((distance < 0 && cvtEntry > 0) || (distance > 0 && cvtEntry < 0))) {cvtEntry=-cvtEntry;}if (Math.abs(distance - cvtEntry) < gs.controlValueTableCutIn) {distance=cvtEntry;}}distance=engineCompensation(distance,distanceType);if (roundDistanceAndCheckCutIn) {distance=gs.round(distance);}if (useMinimumDistance && Math.abs(distance) < gs.minimumDistance) {if (distance > 0) {distance=gs.minimumDistance;} else {distance=-gs.minimumDistance;}}final int target=TTGraphicsState.getCoordsOnVector(gs.projectionVector,x[gs.zp0][gs.rp0],y[gs.zp0][gs.rp0]) + distance;final int pVMove=target - TTGraphicsState.getCoordsOnVector(gs.projectionVector,x[gs.zp1][p],y[gs.zp1][p]);final int[] shift=gs.getFVMoveforPVDistance(pVMove);x[gs.zp1][p]+=shift[0];y[gs.zp1][p]+=shift[1];final int[] fv=TTGraphicsState.getVectorComponents(gs.freedomVector);if (fv[0] != 0) {touched[gs.zp1][p][0]=true;}if (fv[1] != 0) {touched[gs.zp1][p][1]=true;}gs.rp1=gs.rp0;gs.rp2=p;if (setRP0toP) {gs.rp0=p;}} else if (instructions.containsKey(code)) {if (printOut) {System.out.println("I 0x" + Integer.toHexString(code) + "    - Custom Instruction");}execute(instructions.get(code),gs);if (printOut) {System.out.println("I 0x" + Integer.toHexString(code) + " finished");}} else if (LogWriter.isRunningFromIDE) {System.out.println("Unknown truetype opcode 0x" + Integer.toHexString(code) + " at line "+ currentPointer);}}} catch (final Exception e) {LogWriter.writeLog("Exception: " + e.getMessage() + " at line "+ currentPointer+ "- hinting turned off");BaseTTGlyph.useHinting=false;BaseTTGlyph.redecodePage=true;}if (showDebugWindow && debugWindow != null && debugWindow.isVisible()) {instructionsExecuted+=currentPointer + 1 - originalPointer;if (debugPointer == -1) {return debugPointer;}}return currentPointer;}  }
class C{  public ListSortedByKey(){  mKeyComparator=null;  mValueComparator=null;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public void reset(){  percentCoverage=0f;  scale=0;}  }
class C{  ThreadStack(String firstLine,String secondLine,String thirdLine,BufferedReader reader) throws IOException {  lines.add(firstLine);  lines.add(secondLine);  runnable=secondLine.contains("RUNNABLE");  lines.add(thirdLine);  String line=null;  while ((line=reader.readLine()) != null && line.trim().length() > 0) {    lines.add(line);  }}  }
class C{  public final void writeTo(OutputStream out,ByteBuffer buf) throws IOException {  if (getLength() > 0) {    if (this.part instanceof byte[]) {      byte[] bytes=(byte[])this.part;      out.write(bytes,0,bytes.length);    } else     if (this.part instanceof StoredObject) {      StoredObject so=(StoredObject)this.part;      ByteBuffer sobb=so.createDirectByteBuffer();      if (sobb != null) {        HeapDataOutputStream.writeByteBufferToStream(out,buf,sobb);      } else {        int bytesToSend=so.getDataSize();        long addr=so.getAddressForReadingData(0,bytesToSend);        while (bytesToSend > 0) {          if (buf.remaining() == 0) {            HeapDataOutputStream.flushStream(out,buf);          }          buf.put(AddressableMemoryManager.readByte(addr));          addr++;          bytesToSend--;        }      }    } else {      HeapDataOutputStream hdos=(HeapDataOutputStream)this.part;      hdos.sendTo(out,buf);      hdos.rewind();    }  }}  }
class C{  public double calcScore(BayesNet bayesNet) throws Exception {switch (m_nCVType) {case LOOCV:    return leaveOneOutCV(bayesNet);case CUMCV:  return cumulativeCV(bayesNet);case KFOLDCV:return kFoldCV(bayesNet,m_nNrOfFolds);default :throw new Exception("Unrecognized cross validation type encountered: " + m_nCVType);}}  }
class C{  public boolean hasOriginalEvent(){  return super.hasElement(OriginalEvent.KEY);}  }
class C{  public ZapToggleButton(Icon icon){  super(null,icon,false);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Iterator iterator(){  return new SimpleIterator(this.root);}  }
class C{  public String toString(){  String ret="";  for (int y=0; y < occH; y++) {    for (int x=0; x < occW + 1; x++) {      if ((x == xOff) || (x == xOff + w)) {        if ((y == yOff) || (y == yOff + h - 1))         ret+="+"; else         if ((y > yOff) && (y < yOff + h - 1))         ret+="|"; else         ret+=" ";      } else       if ((y == yOff) && (x > xOff) && (x < xOff + w))       ret+="-"; else       if ((y == yOff + h - 1) && (x > xOff) && (x < xOff + w))       ret+="_"; else       ret+=" ";      if (x == occW)       continue;      if (occupied[x + y * occW])       ret+="*"; else       ret+=".";    }    ret+="\n";  }  return ret;}  }
class C{  private void initializeLayout(){  Border padding=BorderFactory.createEmptyBorder(5,5,5,5);  JPanel tPanel=new JPanel();  tPanel.setLayout(new BoxLayout(tPanel,BoxLayout.X_AXIS));  tPanel.add(cbSynapseType);  tPanel.add(Box.createHorizontalStrut(20));  tPanel.add(displaySPTriangle);  tPanel.setAlignmentX(Component.CENTER_ALIGNMENT);  tPanel.setBorder(padding);  this.add(tPanel);  this.add(Box.createRigidArea(new Dimension(0,5)));  synapsePanel.setAlignmentX(Component.CENTER_ALIGNMENT);  synapsePanel.setBorder(padding);  synapsePanel.setVisible(displaySPTriangle.isDown());  this.add(synapsePanel);  TitledBorder tb2=BorderFactory.createTitledBorder("Update Rule");  this.setBorder(tb2);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:34.640 -0500",hash_original_method="7EB957F4647F2E9AB09EE1A296B7BEEF",hash_generated_method="4C820E660A2767B76BC387A5AB9B43EE") @Override public String toString(){  return "RefQueueWorker::" + this.workerThread;}  }
class C{  public void deleteTvShow(TvShow tvShow){  int oldValue=tvShowList.size();  tvShow.deleteFilesSafely();  tvShow.removeAllEpisodes();  tvShowList.remove(tvShow);  try {    TvShowModuleManager.getInstance().removeTvShowFromDb(tvShow);  } catch (  Exception e) {    LOGGER.error("problem removing TV show from DB: " + e.getMessage());  }  firePropertyChange(TV_SHOWS,null,tvShowList);  firePropertyChange(REMOVED_TV_SHOW,null,tvShow);  firePropertyChange(TV_SHOW_COUNT,oldValue,tvShowList.size());}  }
class C{  public void adjustBeginLineColumn(int newLine,int newCol){  int start=tokenBegin;  int len;  if (bufpos >= tokenBegin) {    len=bufpos - tokenBegin + inBuf + 1;  } else {    len=bufsize - tokenBegin + bufpos + 1 + inBuf;  }  int i=0, j=0, k=0;  int nextColDiff=0, columnDiff=0;  while (i < len && bufline[j=start % bufsize] == bufline[k=++start % bufsize]) {    bufline[j]=newLine;    nextColDiff=columnDiff + bufcolumn[k] - bufcolumn[j];    bufcolumn[j]=newCol + columnDiff;    columnDiff=nextColDiff;    i++;  }  if (i < len) {    bufline[j]=newLine++;    bufcolumn[j]=newCol + columnDiff;    while (i++ < len) {      if (bufline[j=start % bufsize] != bufline[++start % bufsize])       bufline[j]=newLine++; else       bufline[j]=newLine;    }  }  line=bufline[j];  column=bufcolumn[j];}  }
class C{  public static String toString(Object array){  return toString(array,"{}");}  }
class C{  public void insertAfter(E toInsert,E point){  innerChain.insertAfter(toInsert,point);}  }
class C{  public static void zipAndEncrypt(File inFile,File outFile,String password,AESEncrypter encrypter) throws IOException {  AesZipFileEncrypter enc=new AesZipFileEncrypter(outFile,encrypter);  try {    enc.add(inFile,password);  }  finally {    enc.close();  }}  }
class C{  public void testMultipleCreators() throws Exception {  MultiBean bean=MAPPER.readValue("123",MultiBean.class);  assertEquals(Integer.valueOf(123),bean.value);  bean=MAPPER.readValue(quote("abc"),MultiBean.class);  assertEquals("abc",bean.value);  bean=MAPPER.readValue("0.25",MultiBean.class);  assertEquals(Double.valueOf(0.25),bean.value);}  }
class C{  public DataPoint(X xValue,Y yValue){  this.xValue=xValue;  this.yValue=yValue;}  }
class C{  @Override protected void controllerInit() throws SQLException {  Statement stat=conn.createStatement();  for (int i=0; i < 20; i++) {    execute(stat,"DROP TABLE IF EXISTS TEST" + i);    execute(stat,"CREATE TABLE TEST" + i + "(ID INT PRIMARY KEY, NAME VARCHAR(255))");  }  for (int i=0; i < 20; i+=2) {    execute(stat,"DROP TABLE TEST" + i);  }  execute(stat,"DROP TABLE IF EXISTS TEST");  execute(stat,"CREATE TABLE TEST" + "(ID BIGINT GENERATED BY DEFAULT AS IDENTITY, " + "NAME VARCHAR(255), DATA CLOB)");}  }
class C{  protected void buildDirectCollectionTableDefinition(ManagedClass managedClass,Attribute managedAttribute,LinkedList<Entity> intrinsicEntity,LinkedList<Attribute> intrinsicAttribute,boolean isInherited,DirectCollectionMapping mapping,ClassDescriptor descriptor){  TableDefinition table=getTableDefFromDBTable(managedClass,managedAttribute,intrinsicEntity,mapping.getReferenceTable());  DatabaseField dbField;  DatabaseField targetField=null;  List<String> fkFieldNames=new ArrayList();  List<String> targetFieldNames=new ArrayList();  List<DatabaseField> fkFields=mapping.getReferenceKeyFields();  List<DatabaseField> targetFields=mapping.getSourceKeyFields();  for (int index=0; index < fkFields.size(); index++) {    DatabaseField fkField=fkFields.get(index);    targetField=targetFields.get(index);    fkFieldNames.add(fkField.getNameDelimited(databasePlatform));    targetFieldNames.add(targetField.getNameDelimited(databasePlatform));    fkField=resolveDatabaseField(fkField,targetField);    FieldDefinition fieldDef=getFieldDefFromDBField(intrinsicEntity.get(0),intrinsicAttribute,managedAttribute,false,true,false,isInherited,false,false,false,fkField);    if (!table.getFields().contains(fieldDef)) {      table.addField(fieldDef);    }  }  DatabaseTable targetTable=targetField.getTable();  TableDefinition targetTblDef=getTableDefFromDBTable(managedClass,intrinsicEntity,targetTable);  FieldDefinition fieldDef=getFieldDefFromDBField(intrinsicEntity.get(0),intrinsicAttribute,managedAttribute,false,false,false,isInherited,false,false,false,mapping.getDirectField());  if (!table.getFields().contains(fieldDef)) {    table.addField(fieldDef);  }  if (mapping.isDirectMapMapping() && !mapping.getContainerPolicy().isMappedKeyMapPolicy()) {    dbField=((DirectMapMapping)mapping).getDirectKeyField();    fieldDef=getFieldDefFromDBField(dbField);    if (!table.getFields().contains(fieldDef)) {      table.addField(fieldDef);    }  } else {    addFieldsForMappedKeyMapContainerPolicy(managedClass,managedAttribute,intrinsicEntity,intrinsicAttribute,isInherited,mapping.getContainerPolicy(),table);    if (mapping.getListOrderField() != null) {      fieldDef=getFieldDefFromDBField(mapping.getListOrderField());      if (!table.getFields().contains(fieldDef)) {        table.addField(fieldDef);      }    }  }  if (mapping.getDescriptor().hasTablePerClassPolicy()) {    return;  }  addForeignKeyConstraint(table,targetTblDef,fkFieldNames,targetFieldNames,mapping.isCascadeOnDeleteSetOnDatabase());}  }
class C{  @Override public void dumpContainerLogs(final File logFile) throws ContainerException {  if (overrideResultStatus != null) {    return;  }  logger.debug("Saving standard error files for id={}",job.getId());  if (logFile != null) {    try {      dumpLog(containerId,logFile);    } catch (    Exception e) {      logger.error("Docker container " + containerId + " failed to create log file",e);      throw new ContainerException("Docker container " + containerId + " failed to create log file");    }  }}  }
class C{  public Table(TableModel model,boolean includeHeader){  setUIID("Table");  this.includeHeader=includeHeader;  this.model=model;  updateModel();}  }
class C{  public void trimToSize(){  if (_data.length > size()) {    byte[] tmp=new byte[size()];    toNativeArray(tmp,0,tmp.length);    _data=tmp;  }}  }
class C{  protected void restoreFromContinuationData(Map<String,Object> data){  localProxyBuilder.set((FactoryBuilderSupport)data.get("proxyBuilder"));  contexts.set((LinkedList<Map<String,Object>>)data.get("contexts"));}  }
class C{  public BitSet(int nbits){  if (nbits < 0) {    throw new NegativeArraySizeException("nbits < 0: " + nbits);  }  bits=new long[(unitIndex(nbits - 1) + 1)];}  }
class C{  public void detach(){  super.detach();  if (m_canDetachNodeset) {    m_exprObj.detach();  }  m_exprObj=null;}  }
class C{  protected void focusGained(){}  }
class C{  private static boolean isSpace(char ch){  return XMLCharacterRecognizer.isWhiteSpace(ch);}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj)   return true;  if (obj == null)   return false;  if (getClass() != obj.getClass())   return false;  DebugCounterResource other=(DebugCounterResource)obj;  if (counterDesc == null) {    if (other.counterDesc != null)     return false;  } else   if (!counterDesc.equals(other.counterDesc))   return false;  if (counterHierarchy == null) {    if (other.counterHierarchy != null)     return false;  } else   if (!counterHierarchy.equals(other.counterHierarchy))   return false;  if (counterValue == null) {    if (other.counterValue != null)     return false;  } else   if (!counterValue.equals(other.counterValue))   return false;  if (metadata == null) {    if (other.metadata != null)     return false;  } else   if (!metadata.equals(other.metadata))   return false;  if (metadataString == null) {    if (other.metadataString != null)     return false;  } else   if (!metadataString.equals(other.metadataString))   return false;  if (moduleName == null) {    if (other.moduleName != null)     return false;  } else   if (!moduleName.equals(other.moduleName))   return false;  return true;}  }
class C{  public GuacamoleClientOverrunException(String message){  super(message);}  }
class C{  public void printAll(Graphics g){  setFlag(IS_PRINTING_ALL,true);  try {    print(g);  }  finally {    setFlag(IS_PRINTING_ALL,false);  }}  }
class C{  protected void finishInit(){}  }
class C{  public static int createIntegerSetting(final Map<String,String> rawSettings,final String settingName,final int defaultValue){  final String settingString=rawSettings.get(settingName);  if ((settingString != null) && Convert.isDecString(settingString)) {    try {      return Integer.parseInt(settingString);    } catch (    final NumberFormatException exception) {      CUtilityFunctions.logException(exception);      return defaultValue;    }  } else {    return defaultValue;  }}  }
class C{  public int canDisplayUpTo(CharacterIterator iter,int start,int limit){  AttributedCharacterIterator aci=null;  if (iter instanceof AttributedCharacterIterator) {    aci=(AttributedCharacterIterator)iter;  }  char c=iter.setIndex(start);  int currentIndex=start;  while (c != CharacterIterator.DONE && currentIndex < limit) {    boolean foundMatchingGlyph=false;    for (int i=0; i < glyphUnicodes.length; i++) {      if (glyphUnicodes[i].indexOf(c) == 0 && languageMatches(glyphLangs[i]) && orientationMatches(glyphOrientations[i]) && formMatches(glyphUnicodes[i],glyphForms[i],aci,currentIndex)) {        if (glyphUnicodes[i].length() == 1) {          foundMatchingGlyph=true;          break;        } else {          boolean matched=true;          for (int j=1; j < glyphUnicodes[i].length(); j++) {            c=iter.next();            if (glyphUnicodes[i].charAt(j) != c) {              matched=false;              break;            }          }          if (matched) {            foundMatchingGlyph=true;            break;          } else {            c=iter.setIndex(currentIndex);          }        }      }    }    if (!foundMatchingGlyph) {      return currentIndex;    }    c=iter.next();    currentIndex=iter.getIndex();  }  return -1;}  }
class C{  public boolean supportsTableCorrelationNames() throws SQLException {  return true;}  }
class C{  public static boolean isValid(double dbl){  return !Double.isNaN(dbl) && !Double.isInfinite(dbl);}  }
class C{  public void sendData(byte[][] data,int offset,int count,String targetHostName,int targetPort,long interval){  if ((data == null) || (data.length <= 0)) {    if (__IEsptouchTask.DEBUG) {      Log.e(TAG,"sendData(): data == null or length <= 0");    }    return;  }  for (int i=offset; !mIsStop && i < offset + count; i++) {    if (data[i].length == 0) {      continue;    }    try {      DatagramPacket localDatagramPacket=new DatagramPacket(data[i],data[i].length,InetAddress.getByName(targetHostName),targetPort);      this.mSocket.send(localDatagramPacket);    } catch (    UnknownHostException e) {      if (__IEsptouchTask.DEBUG) {        Log.e(TAG,"sendData(): UnknownHostException");      }      e.printStackTrace();      mIsStop=true;      break;    }catch (    IOException e) {      if (__IEsptouchTask.DEBUG) {        Log.e(TAG,"sendData(): IOException, but just ignore it");      }    }    try {      Thread.sleep(interval);    } catch (    InterruptedException e) {      e.printStackTrace();      if (__IEsptouchTask.DEBUG) {        Log.e(TAG,"sendData is Interrupted");      }      mIsStop=true;      break;    }  }  if (mIsStop) {    close();  }}  }
class C{  @Override public MultiMatchQueryBuilder boost(float boost){  this.boost=boost;  return this;}  }
class C{  public static Mapping<Boolean> bool(Constraint... constraints){  return new FieldMapping(InputMode.SINGLE,mkSimpleConverter(null),new MappingMeta("boolean",Boolean.class)).constraint(checking(null,"error.boolean",true)).constraint(constraints);}  }
class C{  public static File toFile(String parent,String path){  return new File(parent.replace(FILE_ANTI_SEPERATOR,FILE_SEPERATOR),path.replace(FILE_ANTI_SEPERATOR,FILE_SEPERATOR));}  }
class C{  public static org.oscm.vo.VOTag convertToApi(org.oscm.internal.vo.VOTag oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOTag newVO=new org.oscm.vo.VOTag();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setLocale(oldVO.getLocale());  newVO.setValue(oldVO.getValue());  newVO.setNumberReferences(oldVO.getNumberReferences());  return newVO;}  }
class C{  public synchronized List<Pair<event_type,String>> access_events(WebService.MessageAccessor ignored){  return _events;}  }
class C{  public void menuKeyTyped(MenuKeyEvent e){  if (!crossMenuMnemonic && BasicPopupMenuUI.getLastPopup() != null) {    return;  }  if (BasicPopupMenuUI.getPopups().size() != 0) {    return;  }  char key=Character.toLowerCase((char)menuItem.getMnemonic());  MenuElement path[]=e.getPath();  if (key == Character.toLowerCase(e.getKeyChar())) {    JPopupMenu popupMenu=((JMenu)menuItem).getPopupMenu();    ArrayList newList=new ArrayList(Arrays.asList(path));    newList.add(popupMenu);    MenuElement subs[]=popupMenu.getSubElements();    MenuElement sub=BasicPopupMenuUI.findEnabledChild(subs,-1,true);    if (sub != null) {      newList.add(sub);    }    MenuSelectionManager manager=e.getMenuSelectionManager();    MenuElement newPath[]=new MenuElement[0];    ;    newPath=(MenuElement[])newList.toArray(newPath);    manager.setSelectedPath(newPath);    e.consume();  }}  }
class C{  public boolean isDefault(){  Object oo=get_Value(COLUMNNAME_IsDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void testIdentity(){  assertNotNull(new IdentityStub());}  }
class C{  public void writeString(String key,String value){  if (writeParameter(key,value) != 0) {    mCache.put(key,value);  }}  }
class C{  public void clear(){  set.clear();  set.set(0,firstFreeBlock);}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);  builder.addAttribute(AMOUNT).setRequired(true);  builder.addAttribute(CURRENCY_CODE).setRequired(true);}  }
class C{  public static Test suite(){  return new TestSuite(SubsetByExpressionTest.class);}  }
class C{  public void bindCloudletToVm(int cloudletId,int vmId){  CloudletList.getById(getCloudletList(),cloudletId).setVmId(vmId);}  }
class C{  private QueryTask.QuerySpecification buildDatastoreSetQuery(){  QueryTask.Query kindClause=new QueryTask.Query().setTermPropertyName(ServiceDocument.FIELD_NAME_KIND).setTermMatchValue(Utils.buildKind(DatastoreService.State.class));  QueryTask.QuerySpecification querySpecification=new QueryTask.QuerySpecification();  querySpecification.query.addBooleanClause(kindClause);  querySpecification.options=EnumSet.of(QueryTask.QuerySpecification.QueryOption.EXPAND_CONTENT);  return querySpecification;}  }
class C{  private static DERSequence singleDigest(String digestMethodUri,byte[] digest) throws Exception {  DEROctetString digestValue=new DEROctetString(digest);  DERUTF8String digestMethod=new DERUTF8String(digestMethodUri);  DERSequence transforms=new DERSequence();  return new DERSequence(new ASN1Encodable[]{digestValue,digestMethod,transforms});}  }
class C{  public static ObjectAnimator ofPropertyValuesHolder(Object target,PropertyValuesHolder... values){  ObjectAnimator anim=new ObjectAnimator();  anim.mTarget=target;  anim.setValues(values);  return anim;}  }
class C{  private static void testJcmdPid_f() throws Exception {  File scrpitFile=new File(TEST_SRC,"dcmd-script.txt");  OutputAnalyzer output=JcmdBase.jcmd(VM_ARGS,new String[]{"-f",scrpitFile.getAbsolutePath()});  output.shouldHaveExitValue(0);  verifyOutputAgainstFile(output);}  }
class C{  public void close() throws IOException {  try {    if (!started) {      handler.startDocument();      if (!vcardsElementExists) {        start(VCARDS);      }    }    if (!vcardsElementExists) {      end(VCARDS);    }    handler.endDocument();  } catch (  SAXException e) {    throw new IOException(e);  }  if (writer != null) {    writer.close();  }}  }
class C{  public List<Tradestrategy> findTradestrategyContractDistinctByDateRange(final ZonedDateTime fromOpen,final ZonedDateTime toOpen){  return m_tradestrategyHome.findTradestrategyContractDistinctByDateRange(fromOpen,toOpen);}  }
class C{  @Deprecated public TagNode clean(URL url,String charset) throws IOException {  CharSequence content=Utils.readUrl(url,charset);  Reader reader=new StringReader(content.toString());  return clean(reader,new CleanTimeValues());}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaFile mf=(stack.getUIMgrSafe() != null) ? stack.getUIMgrSafe().getVideoFrame().getCurrFile() : null;  if (mf == null)   return null;  sage.jep.function.PostfixMathCommandI targetMeth=(sage.jep.function.PostfixMathCommandI)Catbert.getAPI().get("GetCaptureDeviceInputRecordingMediaFile");  stack.push(mf);  targetMeth.setCurNumberOfParameters(1);  targetMeth.run(stack);  return stack.pop();}  }
class C{  public final void compileFile(final String strFileName) throws JIPSyntaxErrorException {  Compile2.compile(strFileName,null,this);}  }
class C{  @ModelAttribute public void addDataToModel(ModelMap model){  SearchData dataForSearchBar=new SearchData();  dataForSearchBar.setSearchMode("natural");  dataForSearchBar.setCurrentPage(1);  dataForSearchBar.setQueryText(null);  dataForSearchBar.setNumberResultsPerPage(10);  model.put("advancedSearchData",dataForSearchBar);}  }
class C{  public static AffineTransformation createFromBaseLines(Coordinate src0,Coordinate src1,Coordinate dest0,Coordinate dest1){  Coordinate rotPt=new Coordinate(src0.x + dest1.x - dest0.x,src0.y + dest1.y - dest0.y);  double ang=Angle.angleBetweenOriented(src1,src0,rotPt);  double srcDist=src1.distance(src0);  double destDist=dest1.distance(dest0);  if (srcDist == 0.0)   return new AffineTransformation();  double scale=destDist / srcDist;  AffineTransformation trans=AffineTransformation.translationInstance(-src0.x,-src0.y);  trans.rotate(ang);  trans.scale(scale,scale);  trans.translate(dest0.x,dest0.y);  return trans;}  }
class C{  public void handleStatement(Statement arg0) throws RDFHandlerException {  stmtsAdded++;}  }
class C{  public static <T>HashSet<T> hashSet(){  return new HashSet<T>();}  }
class C{  public SelectClause add(String... propertyNames){  for (  String name : propertyNames) {    selectList.add(new SelectClauseExpression(new PropertyValueExpression(name)));  }  return this;}  }
class C{  protected void notifyAttemptToReconnectIn(int seconds){  if (isReconnectionAllowed()) {    for (    ConnectionListener listener : connection.connectionListeners) {      listener.reconnectingIn(seconds);    }  }}  }
class C{  public boolean isRequestFocusEnabled(){  return !getFlag(REQUEST_FOCUS_DISABLED);}  }
class C{  private static final byte[] asSortKey(final Object val){  if (val == null) {    return null;  }  if (val instanceof byte[]) {    return (byte[])val;  }synchronized (_keyBuilder) {    return _keyBuilder.getSortKey(val);  }}  }
class C{  protected synchronized boolean add(Set<String> stackTraceSet,final Throwable throwable){  if (this.on) {    String trace=convert(throwable);    return stackTraceSet.add(trace);  }  return false;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String propV=getString(stack);  String propN=getString(stack);  SeriesInfo si=getSeriesInfo(stack);  si.setProperty(propN,propV);  return null;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:36.849 -0500",hash_original_method="4AE67C9B14400A0313E10E10FEB59F4C",hash_generated_method="FDE84136AAB0B0938E6DA23A8AEBA619") @Override public void onDestroyView(){  mHandler.removeCallbacks(mRequestFocus);  mList=null;  mListShown=false;  mEmptyView=mProgressContainer=mListContainer=null;  mStandardEmptyView=null;  super.onDestroyView();}  }
class C{  public String toString(){  return String.format("numberOfElements = %d, sizeOfElement = %d%n",this.numberOfElements,this.sizeOfElement);}  }
class C{  public void test_wrap_ByteBuffer$ByteBuffer_02(){  String host="new host";  int port=8080;  ByteBuffer bb=ByteBuffer.allocate(10).asReadOnlyBuffer();  ByteBuffer[] bbA={ByteBuffer.allocate(5),ByteBuffer.allocate(10),ByteBuffer.allocate(5)};  SSLEngine sse=getEngine(host,port);  sse.setUseClientMode(true);  try {    sse.wrap(bbA,bb);    fail("ReadOnlyBufferException wasn't thrown");  } catch (  ReadOnlyBufferException iobe) {  }catch (  Exception e) {    fail(e + " was thrown instead of ReadOnlyBufferException");  }}  }
class C{  public static long abs(long a){  return (a ^ (a >> 63)) - (a >> 63);}  }
class C{  public static InformationModelFactory init(){  try {    InformationModelFactory theInformationModelFactory=(InformationModelFactory)EPackage.Registry.INSTANCE.getEFactory(InformationModelPackage.eNS_URI);    if (theInformationModelFactory != null) {      return theInformationModelFactory;    }  } catch (  Exception exception) {    EcorePlugin.INSTANCE.log(exception);  }  return new InformationModelFactoryImpl();}  }
class C{  public final static <T>T foldRightMapToType(final Stream<T> stream,final Reducer<T> reducer){  return reducer.mapReduce(StreamUtils.reverse(stream));}  }
class C{  public String toUiString(){  StringBuilder sb=new StringBuilder();  Calendar dateTime=new GregorianCalendar(GMT);  long localTime=value;  if (tzShift != null) {    localTime+=tzShift.longValue() * 60000;  }  dateTime.setTimeInMillis(localTime);  try {    appendInt(sb,dateTime.get(Calendar.YEAR),4);    sb.append('-');    appendInt(sb,dateTime.get(Calendar.MONTH) + 1,2);    sb.append('-');    appendInt(sb,dateTime.get(Calendar.DAY_OF_MONTH),2);    if (!dateOnly) {      sb.append(' ');      appendInt(sb,dateTime.get(Calendar.HOUR_OF_DAY),2);      sb.append(':');      appendInt(sb,dateTime.get(Calendar.MINUTE),2);    }  } catch (  ArrayIndexOutOfBoundsException e) {    throw new RuntimeException(e);  }  return sb.toString();}  }
class C{  public Base64OutputStream(OutputStream out,int flags){  this(out,flags,true);}  }
class C{  private void cmd_customize(){  int AD_Window_ID=240;  int AD_PrintFormat_ID=m_reportEngine.getPrintFormat().get_ID();  AEnv.zoom(AD_Window_ID,MQuery.getEqualQuery("AD_PrintFormat_ID",AD_PrintFormat_ID));}  }
class C{  public void testRandomStrings() throws Exception {  Analyzer a=new GreekAnalyzer();  checkRandomData(random(),a,1000 * RANDOM_MULTIPLIER);  a.close();}  }
class C{  public void add(Name name,int type,long ttl,Tokenizer tokenizer) throws IOException {  newUpdate(Record.fromString(name,type,dclass,ttl,tokenizer,origin));}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  long x=getLong(stack);  return (x == 0) ? "" : Sage.tfjMed(x);}  }
class C{  public Alphabet(){  this(256);}  }
class C{  public void processStatementFilterMultiple(EPStatementAgentInstanceHandle handle,ArrayDeque<FilterHandleCallback> callbackList,EventBean theEvent){  handle.getStatementAgentInstanceLock().acquireWriteLock();  try {    if (handle.isHasVariables()) {      unisolatedServices.getVariableService().setLocalVersion();    }    handle.getMultiMatchHandler().handle(callbackList,theEvent);    handle.internalDispatch();  } catch (  RuntimeException ex) {    unisolatedServices.getExceptionHandlingService().handleException(ex,handle,ExceptionHandlerExceptionType.PROCESS,theEvent);  } finally {    if (handle.isHasTableAccess()) {      unisolatedServices.getTableService().getTableExprEvaluatorContext().releaseAcquiredLocks();    }    handle.getStatementAgentInstanceLock().releaseWriteLock();  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  CaptureDeviceInput conn=getCapDevInput(stack);  return new Integer(conn == null ? 0 : conn.getSaturation());}  }
class C{  public boolean isStopping(){  return mStopping;}  }
class C{  protected boolean oneSameNetwork(MACAddress m1,MACAddress m2){  String net1=macToGuid.get(m1);  String net2=macToGuid.get(m2);  if (net1 == null)   return false;  if (net2 == null)   return false;  return net1.equals(net2);}  }
class C{  public void print(){  String sTab=new String();  for (int i=0; i < m_nStartNode; i++) {    sTab=sTab + "  ";  }  System.out.println(sTab + "Count = " + m_nCount);  if (m_VaryNodes != null) {    for (int iNode=0; iNode < m_VaryNodes.length; iNode++) {      System.out.println(sTab + "Node " + (iNode + m_nStartNode));      m_VaryNodes[iNode].print(sTab);    }  } else {    System.out.println(m_Instances);  }}  }
class C{  public HyperGraphPeer(Json configuration,HyperGraph graph){  this(configuration);  this.graph=graph;}  }
class C{  protected static void addIntrospectProperties(Class clazz,List<InternalEventPropDescriptor> result){  PropertyDescriptor properties[]=introspect(clazz);  for (int i=0; i < properties.length; i++) {    PropertyDescriptor property=properties[i];    String propertyName=property.getName();    Method readMethod=property.getReadMethod();    EventPropertyType type=EventPropertyType.SIMPLE;    if (property instanceof IndexedPropertyDescriptor) {      readMethod=((IndexedPropertyDescriptor)property).getIndexedReadMethod();      type=EventPropertyType.INDEXED;    }    if (readMethod == null) {      continue;    }    result.add(new InternalEventPropDescriptor(propertyName,readMethod,type));  }}  }
class C{  public DotIndicator(final Context context,final AttributeSet attrs,final int defStyleAttr){  super(context,attrs,defStyleAttr);  init(attrs,defStyleAttr,0);}  }
class C{  public AnalogousStrategy(){}  }
class C{  public void testFindUsersActiveDirectory() throws Exception {  LdapManager mgr=getLdapAD();  List ret=null;  AndFilter filter=new AndFilter();  filter.and(new LikeFilter(mgr.getUsersReturningAttribute(LdapUserAttributeConstants.LDAP_USER_ATTRIBUTE_GIVEN_NAME),"*a*"));  try {    LdapSearchManagerVO searchMgrVO=new LdapSearchManagerVO();    searchMgrVO.setFilter(filter);    searchMgrVO.setAddUserClasses(true);    ret=mgr.findUsers(searchMgrVO);  } catch (  Exception e) {  }  assertEquals(22,ret.size());}  }
class C{  @Override public String toString(){  return ("anova(s = " + sigma + ", d = "+ degree+ ")");}  }
class C{  public static void stopThreads(IgniteLogger log){  busyLock.block();  try {    GridTestSafeThreadFactory.stopAllThreads(log);  }  finally {    busyLock.unblock();  }}  }
class C{  public static void main(String[] args){  double[][] matrix=getMatrix();  double[][] sortedMatrix=sortRows(matrix);  System.out.println("\nThe row-sorted array is");  for (int i=0; i < sortedMatrix.length; i++) {    for (int j=0; j < sortedMatrix.length; j++) {      System.out.print(sortedMatrix[i][j] + " ");    }    System.out.println();  }}  }
class C{  private void incrementCounter(Class<? extends Joint> clazz){  Integer n=N.get(clazz);  if (n == null) {    N.put(clazz,2);  } else {    N.put(clazz,n.intValue() + 1);  }}  }
class C{  public boolean isReviewEnabled(){  return reviewEnabled;}  }
class C{  public static JPanel createDialogButtonPanel(JButton jbPositive,JButton jbNegative,JButton[] jbOther,boolean resizable){  return createDialogButtonPanel((jbPositive == null ? null : new JButton[]{jbPositive}),jbNegative,jbOther,resizable,null);}  }
class C{  public InvalidNameException(String explanation){  super(explanation);}  }
class C{  @Override public <NV extends NumberVector>NV projectScaledToDataSpace(double[] v,NumberVector.Factory<NV> factory){  final int dim=v.length;  double[] vec=new double[dim];  for (int d=0; d < dim; d++) {    vec[d]=scales[d].getUnscaled(v[d]);  }  return factory.newNumberVector(vec);}  }
class C{  public CActionGraphExportPNG(final JFrame parent,final ZyGraph graph){  super("Export as PNG");  m_parent=parent;  m_graph=graph;}  }
class C{  private void addUserPermissions(Set<String> filterBy,URI id,Set<String> roles,Map<URI,Set<String>> permissionsMap){  if (CollectionUtils.isEmpty(roles)) {    _log.error("Invalid roles set");    return;  }  if (permissionsMap == null) {    permissionsMap=new HashMap<URI,Set<String>>();  }  for (  String role : roles) {    if (StringUtils.isBlank(role)) {      continue;    }    if (filterBy == null || filterBy.contains(role)) {      if (!permissionsMap.containsKey(id)) {        permissionsMap.put(id,new HashSet<String>());      }      _log.debug("Adding the role {} to the resource {}",role,id);      permissionsMap.get(id).add(role);    }  }}  }
class C{  public void add(final T value){  add(root,Collections.singleton(value));  rebalanceIfNecessary();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:58.863 -0500",hash_original_method="C232E4248F912FE02D45D4BF75A57DF4",hash_generated_method="C232E4248F912FE02D45D4BF75A57DF4") boolean _stateIsDo(int option){  return ((_options[option] & _DO_MASK) != 0);}  }
class C{  private TConversion(){}  }
class C{  public boolean add(E e){  if (offer(e))   return true; else   throw new IllegalStateException("Queue full");}  }
class C{  public static void main(String[] args) throws IOException {  boolean enableOutput=true;  boolean outputToFile=false;  String inputFolder=LrrRs.class.getClassLoader().getResource("workload/planetlab").getPath();  String outputFolder="output";  String workload="20110303";  String vmAllocationPolicy="lrr";  String vmSelectionPolicy="rs";  String parameter="1.2";  new PlanetLabRunner(enableOutput,outputToFile,inputFolder,outputFolder,workload,vmAllocationPolicy,vmSelectionPolicy,parameter);}  }
class C{  @DSComment("data structure class") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:37.463 -0500",hash_original_method="424C133E0D7FEE4B423B7AD7977A2226",hash_generated_method="62D31CA182F4473486D8FA372AA8A524") public Set<String> keySet(){  return mValues.keySet();}  }
class C{  public String join(String separator) throws JSONException {  int len=this.length();  StringBuilder sb=new StringBuilder();  for (int i=0; i < len; i+=1) {    if (i > 0) {      sb.append(separator);    }    sb.append(JSONObject.valueToString(this.myArrayList.get(i)));  }  return sb.toString();}  }
class C{  void codeAppend(Environment env,Context ctx,Assembler asm,ClassDeclaration sbClass,boolean needBuffer) throws ClassNotFound, AmbiguousMember {  ClassDefinition sourceClass=ctx.field.getClassDefinition();  ClassDefinition sbClsDef=sbClass.getClassDefinition(env);  MemberDefinition f;  if (needBuffer) {    asm.add(where,opc_new,sbClass);    asm.add(where,opc_dup);    if (equals("")) {      f=sbClsDef.matchMethod(env,sourceClass,idInit);    } else {      codeValue(env,ctx,asm);      ensureString(env,ctx,asm);      Type argType[]={Type.tString};      f=sbClsDef.matchMethod(env,sourceClass,idInit,argType);    }    asm.add(where,opc_invokespecial,f);  } else {    codeValue(env,ctx,asm);    Type argType[]={(type.inMask(TM_REFERENCE) && type != Type.tString) ? Type.tObject : type};    f=sbClsDef.matchMethod(env,sourceClass,idAppend,argType);    asm.add(where,opc_invokevirtual,f);  }}  }
class C{  public String eml(){  if (resource == null) {    return NOT_FOUND;  }  if (version == null) {    BigDecimal latestVersion=resource.getLastPublishedVersionsVersion();    if (latestVersion == null) {      return NOT_FOUND;    } else {      version=latestVersion;    }  }  data=dataDir.resourceEmlFile(resource.getShortname(),version);  mimeType="text/xml";  StringBuilder sb=new StringBuilder();  sb.append("eml-" + resource.getShortname());  if (version != null) {    sb.append("-v" + version.toPlainString());  }  sb.append(".xml");  filename=sb.toString();  return execute();}  }
class C{  public static Vector<BeanConnection> associatedConnections(Vector<Object> subFlow,Integer... tab){  int tabIndex=0;  if (tab.length > 0) {    tabIndex=tab[0].intValue();  }  Vector<BeanConnection> connections=TABBED_CONNECTIONS.get(tabIndex);  Vector<BeanConnection> associatedConnections=new Vector<BeanConnection>();  for (int i=0; i < connections.size(); i++) {    BeanConnection bc=connections.elementAt(i);    BeanInstance tempSource=bc.getSource();    BeanInstance tempTarget=bc.getTarget();    boolean sourceInSubFlow=false;    boolean targetInSubFlow=false;    for (int j=0; j < subFlow.size(); j++) {      BeanInstance toCheck=(BeanInstance)subFlow.elementAt(j);      if (toCheck == tempSource) {        sourceInSubFlow=true;      }      if (toCheck == tempTarget) {        targetInSubFlow=true;      }      if (sourceInSubFlow && targetInSubFlow) {        associatedConnections.add(bc);        break;      }    }  }  return associatedConnections;}  }
class C{  public MalformedTreeException(TextEdit parent,TextEdit child,String message){  super(message);  fParent=parent;  fChild=child;}  }
class C{  private void initValues(){  IPreferenceStore store=doGetPreferenceStore();  final List<String> selectedClasses=new ArrayList<String>(CheckerManager.getSelectedClasses());  for (  TableItem item : procTable.getItems()) {    int index=0;    while (index < selectedClasses.size()) {      if (item.getText(CLASSES.ordinal()).equals(selectedClasses.get(index))) {        item.setChecked(true);        selectedClasses.remove(index);      } else {        ++index;      }    }  }  optSkipUses.setText(store.getString(CheckerPreferences.PREF_CHECKER_A_SKIP_CLASSES));  optALint.setText(store.getString(CheckerPreferences.PREF_CHECKER_A_LINT));  optWarning.setSelection(store.getBoolean(CheckerPreferences.PREF_CHECKER_A_WARNS));  optFilenames.setSelection(store.getBoolean(CheckerPreferences.PREF_CHECKER_A_FILENAMES));  optNoMsgText.setSelection(store.getBoolean(CheckerPreferences.PREF_CHECKER_A_NO_MSG_TEXT));  optShowChecks.setSelection(store.getBoolean(CheckerPreferences.PREF_CHECKER_A_SHOW_CHECKS));  optFilter.setText(store.getString(CheckerPreferences.PREF_CHECKER_ERROR_FILTER_REGEX));  optVerbose.setSelection(store.getBoolean(CheckerPreferences.PREF_CHECKER_VERBOSE));  optJDKPath.setText(store.getString(CheckerPreferences.PREF_CHECKER_JDK_PATH));  optImplicitImports.setSelection(store.getBoolean(CheckerPreferences.PREF_CHECKER_IMPLICIT_IMPORTS));}  }
class C{  public static OpType fromId(byte id){  if (id == 0) {    return INDEX;  } else   if (id == 1) {    return CREATE;  } else {    throw new IllegalArgumentException("No type match for [" + id + "]");  }}  }
class C{  @Override public void updateObject(int columnIndex,Object x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateObject(" + columnIndex + ", x);");    }    update(columnIndex,convertToUnknownValue(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @NotNull public static List<PyFunction> addMethods(@NotNull final PyClass destination,final boolean skipIfExist,@NotNull final PyFunction... methods){  final PyStatementList destStatementList=destination.getStatementList();  final List<PyFunction> result=new ArrayList<PyFunction>(methods.length);  for (  final PyFunction method : methods) {    final PyFunction existingMethod=destination.findMethodByName(method.getName(),false);    if ((existingMethod != null) && skipIfExist) {      result.add(existingMethod);      continue;    }    final PyFunction newMethod=insertMethodInProperPlace(destStatementList,method);    result.add(newMethod);    restoreNamedReferences(newMethod);  }  PyPsiUtils.removeRedundantPass(destStatementList);  return result;}  }
class C{  public static void addChemicalOxidizerRecipe(ItemStack input,GasStack output){  addRecipe(Recipe.CHEMICAL_OXIDIZER,new OxidationRecipe(input,output));}  }
class C{  private Document makeRepoMetaData(final AggregationContext context){  final Document doc=this.xml.create();  final Element root=doc.createElement("repository-metadata");  doc.appendChild(root);  addElement(root,"version","1.0.0");  addElement(root,"id",context.getChannelId());  addElement(root,"name",context.getChannelId());  addElement(root,"layout","maven2");  addElement(root,"policy","mixed");  addElement(root,"url",makeUrl(context.getChannelId()));  return doc;}  }
class C{  private String buildReference(final long code,final String colorCode){  return "OUTFIT:" + Long.toString(code) + "@"+ colorCode;}  }
class C{  public void removeAllComponents(){  List<WorkspaceComponent> toRemove=new ArrayList<WorkspaceComponent>();synchronized (componentList) {    for (    WorkspaceComponent component : componentList) {      toRemove.add(component);    }    for (    WorkspaceComponent component : toRemove) {      removeWorkspaceComponent(component);    }  }}  }
class C{  public static Control transform(IItem item){  Control control=new Control();  if (item.getName() != null) {    control.setTitel(item.getName().replaceAll("\\s"," "));  }  control.setDescription(item.getDescription());  if (item.isMaturityLevelSupport()) {    control.setMaturity(item.getMaturity());    control.setWeight1(item.getWeight1());    control.setWeight2(item.getWeight2());    control.setThreshold1(item.getThreshold1());    control.setThreshold2(item.getThreshold2());  }  return control;}  }
class C{  public GuacamoleSession(HttpSession session){  logger.warn("GuacamoleSession is deprecated. It is no longer " + "necessary and its use will have no effect.");}  }
class C{  public void resetModelNames(){  pageStorage=new Hashtable();}  }
class C{  private Builder(){  super(org.apache.nutch.storage.Host.SCHEMA$);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_beforeCode_1_();}  }
class C{  private void unfade(){  mRoot.findViewById(R.id.preview_fader).setVisibility(View.GONE);}  }
class C{  private void addToPlayList(final long[] list,int position){  final int addlen=list.length;  if (position < 0) {    mPlayListLen=0;    position=0;  }  ensurePlayListCapacity(mPlayListLen + addlen);  if (position > mPlayListLen) {    position=mPlayListLen;  }  final int tailsize=mPlayListLen - position;  for (int i=tailsize; i > 0; i--) {    mPlayList[position + i]=mPlayList[position + i - addlen];  }  for (int i=0; i < addlen; i++) {    mPlayList[position + i]=list[i];  }  mPlayListLen+=addlen;  if (mPlayListLen == 0) {    closeCursor();    notifyChange(META_CHANGED);  }}  }
class C{  private void connect(){  Connection c=Connections.getInstance(context).getConnection(clientHandle);  c.changeConnectionStatus(Connection.ConnectionStatus.CONNECTED);  c.addAction("Client Connected");}  }
class C{  void jbInit() throws Exception {  mainPanel.setLayout(mainLayout);  centerPanel.setLayout(centerLayout);  this.getContentPane().add(mainPanel);  mainPanel.add(centerPanel,BorderLayout.CENTER);  mainPanel.add(confirmPanel,BorderLayout.SOUTH);  confirmPanel.addActionListener(this);}  }
class C{  @Override public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  Node xpathOwnerNode=(Node)xctxt.getOwnerObject();  if (xpathOwnerNode == null) {    return null;  }  int xpathOwnerNodeDTM=xctxt.getDTMHandleFromNode(xpathOwnerNode);  int currentNode=xctxt.getCurrentNode();  DTM dtm=xctxt.getDTM(currentNode);  int docContext=dtm.getDocument();  if (DTM.NULL == docContext) {    error(xctxt,XPATHErrorResources.ER_CONTEXT_HAS_NO_OWNERDOC,null);  }{    Document currentDoc=XMLUtils.getOwnerDocument(dtm.getNode(currentNode));    Document xpathOwnerDoc=XMLUtils.getOwnerDocument(xpathOwnerNode);    if (currentDoc != xpathOwnerDoc) {      throw new TransformerException(I18n.translate("xpath.funcHere.documentsDiffer"));    }  }  XNodeSet nodes=new XNodeSet(xctxt.getDTMManager());  NodeSetDTM nodeSet=nodes.mutableNodeset();{    int hereNode=DTM.NULL;switch (dtm.getNodeType(xpathOwnerNodeDTM)) {case Node.ATTRIBUTE_NODE:case Node.PROCESSING_INSTRUCTION_NODE:{        hereNode=xpathOwnerNodeDTM;        nodeSet.addNode(hereNode);        break;      }case Node.TEXT_NODE:{      hereNode=dtm.getParent(xpathOwnerNodeDTM);      nodeSet.addNode(hereNode);      break;    }default :  break;}}nodeSet.detach();return nodes;}  }
class C{  private void processVariables(Variables variables,BaseResponse reqResponse){  List<AssignmentData> bodyVariable=response.getAssignment().getBodyVariable();  List<AssignmentData> headerVariable=this.response.getAssignment().getHeaderVariable();  List<AssignmentData> cookieVariable=this.response.getAssignment().getCookieVariable();  if (reqResponse.getHttpCode() == -1) {    return;  }  for (  AssignmentData assignmentData : headerVariable) {    String headerKey=stripEquals(assignmentData.getValue());    if (ValidationUtil.isVariable(headerKey)) {      headerKey=variables.getVariable(headerKey);    } else     if (ValidationUtil.isFunction(headerKey)) {      headerKey=FunctionHandler.executeFunction(headerKey,variables);    }    headerKey=variables.evaluate(headerKey);    String realValue=reqResponse.getHttpHeader(headerKey);    if (realValue == null) {      realValue="";    }    LOG.debug("Setting variable " + assignmentData.getKey() + "="+ realValue);    variables.addVariable(assignmentData.getKey(),realValue);  }  for (  AssignmentData assignmentData : cookieVariable) {    String cookieKey=stripEquals(assignmentData.getValue());    if (ValidationUtil.isVariable(cookieKey)) {      cookieKey=variables.getVariable(cookieKey);    } else     if (ValidationUtil.isFunction(cookieKey)) {      cookieKey=FunctionHandler.executeFunction(cookieKey,variables);    }    cookieKey=variables.evaluate(cookieKey);    String realValue=reqResponse.getCookie(cookieKey);    if (realValue == null) {      realValue="";    }    variables.addVariable(assignmentData.getKey(),realValue);    LOG.debug("Setting variable " + assignmentData.getKey() + "="+ realValue);  }  for (  AssignmentData assignmentData : bodyVariable) {    variables.addVariable("RESPONSE_BODY",reqResponse.getResponseBody());    String value=stripEquals(assignmentData.getValue());    String realValue=null;    if (ValidationUtil.isFunction(value)) {      realValue=FunctionHandler.executeFunction(value,variables,reqResponse.getResponseBody());    } else {      value=variables.evaluate(value);      realValue=reqResponse.getValue(value);    }    if (realValue == null) {      realValue="";    }    variables.addVariable(assignmentData.getKey(),realValue);    LOG.debug("Setting variable " + assignmentData.getKey() + "="+ realValue);    variables.removeVariable("RESPONSE_BODY");  }}  }
class C{  public void addPoint(Vector3 point1,Vector3 point2){  mPoint1=point1;  mPoint2=point2;}  }
class C{  public static AvgProjectionExpression avgDistinct(String propertyName){  return new AvgProjectionExpression(getPropExpr(propertyName),true);}  }
class C{  public void reregister(){  getAllPlugins().add(this);  try {    registerDescriptions();  } catch (  Exception e) {    LogService.getRoot().log(Level.WARNING,"com.rapidminer.tools.plugin.Plugin.register_desc_runtime_failed",new Object[]{this.getName(),e.getMessage()});  }  try {    registerOperators();  } catch (  Exception e) {    LogService.getRoot().log(Level.WARNING,"com.rapidminer.tools.plugin.Plugin.register_operators_runtime_failed",new Object[]{this.getName(),e.getMessage()});  }}  }
class C{  public boolean isArrayAccess(){  return arrayAccess;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public static BufferedImage readRGBImageFromInvertedYCCK(InputStream in,ICC_Profile cmykProfile) throws IOException {  ImageInputStream inputStream=null;  ImageReader reader=ImageIO.getImageReadersByFormatName("JPEG").next();  inputStream=(in instanceof ImageInputStream) ? (ImageInputStream)in : ImageIO.createImageInputStream(in);  reader.setInput(inputStream);  Raster raster=reader.readRaster(0,null);  raster=convertInvertedYCCKToCMYK(raster);  BufferedImage image=createRGBImageFromCMYK(raster,cmykProfile);  return image;}  }
class C{  public CodepointCountFilterFactory(Map<String,String> args){  super(args);  min=requireInt(args,MIN_KEY);  max=requireInt(args,MAX_KEY);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public boolean isVeryVerbose(){  return logger.isLoggable(Level.VERYVERBOSE);}  }
class C{  public MalformedChallengeException(String message){  super(message);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Text textNode;  NodeList childNodes;  doc=(Document)load("hc_staff",false);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  childNodes=titleAttr.getChildNodes();  assertSize("childNodesSize",1,childNodes);  textNode=(Text)childNodes.item(0);  value=textNode.getNodeValue();  assertEquals("child1IsYes","Yes",value);  textNode=(Text)childNodes.item(1);  assertNull("secondItemIsNull",textNode);}  }
class C{  public boolean isGreaterThan(Weeks other){  if (other == null) {    return getValue() > 0;  }  return getValue() > other.getValue();}  }
class C{  private void shutdownTasks(){  if (this.singleThreadFederationScheduler != null) {    List<Runnable> l=this.singleThreadFederationScheduler.shutdownNow();  }}  }
class C{  public boolean isTagPresent(int tag){  return fieldIndex.containsKey(new Integer(tag));}  }
class C{  public void removeViewActivationListener(ViewActivationListener listener){  activationListeners.remove(listener);}  }
class C{  public int compareTo(Object o){  if (!(o instanceof CodeTemplate)) {    return -1;  }  CodeTemplate t2=(CodeTemplate)o;  return getID().compareTo(t2.getID());}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder("[");  for (int d=1; d <= dimension; d++) {    sb.append("" + getLeft(d) + ","+ getRight(d));    if (d != dimension) {      sb.append(" : ");    }  }  sb.append("]");  return sb.toString();}  }
class C{  public void runTest(){  try {    assureResultsDirectoryExists(RESULTS_DIR);    if (!isMatch(RESULTS_DIR,COMPARE_DIR,"index",FILE_EXT,FILE_EXT)) {      fail("Output is incorrect!");    } else {      System.out.println("Passed!");    }  } catch (  Exception e) {  }}  }
class C{  private void init(List<Neuron> sourceList,List<Neuron> targetList,NetworkPanel panel){  Synapse[][] weights=SimnetUtils.getWeightMatrix(sourceList,targetList);  WeightMatrix weightMatrix=new WeightMatrix(weights);  table=SimbrainJTable.createTable(weightMatrix);  table.disableTableModificationMenus();  List<String> rowHeaders=new ArrayList<String>();  for (  Neuron neuron : sourceList) {    rowHeaders.add(new String(neuron.getId()));  }  List<String> colHeaders=new ArrayList<String>();  for (  Neuron neuron : targetList) {    colHeaders.add(new String(neuron.getId()));  }  table.setColumnHeadings(colHeaders);  table.setRowHeadings(rowHeaders);  table.getData().fireTableStructureChanged();  this.setTable(table);}  }
class C{  public URLCanonicalizer(){}  }
class C{  private void attemptClaimDrag(){  mParent=getParent();  if (mParent != null) {    mParent.requestDisallowInterceptTouchEvent(true);  }}  }
class C{  public static boolean compareDoubles(double a,double b){  if (Double.isNaN(a) && Double.isNaN(b))   return true;  if (!Double.isInfinite(a) && !Double.isInfinite(b))   return Math.abs(a - b) <= EPSILON;  return a == b;}  }
class C{  public boolean equals(Object object){  if (this == object) {    return true;  } else   if (object instanceof Namespace) {    Namespace that=(Namespace)object;    if (hashCode() == that.hashCode()) {      return uri.equals(that.getURI()) && prefix.equals(that.getPrefix());    }  }  return false;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:06.828 -0500",hash_original_method="174FBE5747A707DB845F85C327785D51",hash_generated_method="FA57EACDCE0D3B1E10B241C2A5BB18B2") int findGroupPosition(long groupIdToMatch,int seedGroupPosition){  int count=mExpandableListAdapter.getGroupCount();  if (count == 0) {    return AdapterView.INVALID_POSITION;  }  if (groupIdToMatch == AdapterView.INVALID_ROW_ID) {    return AdapterView.INVALID_POSITION;  }  seedGroupPosition=Math.max(0,seedGroupPosition);  seedGroupPosition=Math.min(count - 1,seedGroupPosition);  long endTime=SystemClock.uptimeMillis() + AdapterView.SYNC_MAX_DURATION_MILLIS;  long rowId;  int first=seedGroupPosition;  int last=seedGroupPosition;  boolean next=false;  boolean hitFirst;  boolean hitLast;  ExpandableListAdapter adapter=getAdapter();  if (adapter == null) {    return AdapterView.INVALID_POSITION;  }  while (SystemClock.uptimeMillis() <= endTime) {    rowId=adapter.getGroupId(seedGroupPosition);    if (rowId == groupIdToMatch) {      return seedGroupPosition;    }    hitLast=last == count - 1;    hitFirst=first == 0;    if (hitLast && hitFirst) {      break;    }    if (hitFirst || (next && !hitLast)) {      last++;      seedGroupPosition=last;      next=false;    } else     if (hitLast || (!next && !hitFirst)) {      first--;      seedGroupPosition=first;      next=true;    }  }  return AdapterView.INVALID_POSITION;}  }
class C{  private void scaleByMax(){  double l_x=5000, h_x=-5000;  for (int noa=0; noa < m_groupNum; noa++) {    if (l_x > m_groups[noa].m_left) {      l_x=m_groups[noa].m_left;    }    if (h_x < m_groups[noa].m_right) {      h_x=m_groups[noa].m_right;    }  }  Edge e;  Node r, s;  double m_scale=h_x - l_x + 1;  if (m_groupNum > 0) {    r=m_groups[0].m_p;    r.setCenter((r.getCenter() - l_x) / m_scale);    for (int noa=0; noa < m_groupNum; noa++) {      r=m_groups[noa].m_p;      for (int nob=0; (e=r.getChild(nob)) != null; nob++) {        s=e.getTarget();        if (s.getParent(0) == e) {          s.setCenter((s.getCenter() - l_x) / m_scale);        }      }    }  }}  }
class C{  public static String toURI(String className) throws NullPointerException {  className=normalizeClassToURI(className);  return "urn:zest:type:" + className;}  }
class C{  public void addSpecDefinition(String[] specDefinition,String attributeName){  cfgBuffer.append("SPECIFICATION").append(SPACE);  cfgBuffer.append(specDefinition[0]).append(CR);  tlaBuffer.append(COMMENT).append("Specification ").append(ATTRIBUTE).append(attributeName).append(CR);  tlaBuffer.append(specDefinition[1]).append(CR).append(SEP).append(CR);}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_A:    return stateVector[0] == State.main_region_A;case main_region_B:  return stateVector[0] == State.main_region_B;default :return false;}}  }
class C{  protected int scenePaintPrio(){  return -1;}  }
class C{  public URI buildLogoutRequestURI(URI postLogoutRedirectEndpointURI,IDToken idToken,State state) throws OIDCClientException {  Validate.notNull(postLogoutRedirectEndpointURI,"postLogoutRedirectEndpointURI");  Validate.notNull(idToken,"idToken");  LogoutRequest logoutRequest=buildLogoutRequest(postLogoutRedirectEndpointURI,idToken,state);  return logoutRequest.toHttpRequest().getURI();}  }
class C{  public MBeanNotificationInfo(String[] notifTypes,String name,String description,Descriptor descriptor){  super(name,description,descriptor);  this.types=(notifTypes != null && notifTypes.length > 0) ? notifTypes.clone() : NO_TYPES;  this.arrayGettersSafe=MBeanInfo.arrayGettersSafe(this.getClass(),MBeanNotificationInfo.class);}  }
class C{  public static void removeCraftingRecipes(){  removeRecipeClass(RecipeFireworks.class);  removeRecipe(Items.DYE);  removeRecipe(Blocks.STAINED_HARDENED_CLAY);}  }
class C{  public WordChoiceProblem_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_Target=jcas.getRequiredFeatureDE(casType,"Target","uima.cas.String",featOkTst);  casFeatCode_Target=(null == casFeat_Target) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_Target).getCode();  casFeat_Candidate1=jcas.getRequiredFeatureDE(casType,"Candidate1","uima.cas.String",featOkTst);  casFeatCode_Candidate1=(null == casFeat_Candidate1) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_Candidate1).getCode();  casFeat_Candidate2=jcas.getRequiredFeatureDE(casType,"Candidate2","uima.cas.String",featOkTst);  casFeatCode_Candidate2=(null == casFeat_Candidate2) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_Candidate2).getCode();  casFeat_Candidate3=jcas.getRequiredFeatureDE(casType,"Candidate3","uima.cas.String",featOkTst);  casFeatCode_Candidate3=(null == casFeat_Candidate3) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_Candidate3).getCode();  casFeat_Candidate4=jcas.getRequiredFeatureDE(casType,"Candidate4","uima.cas.String",featOkTst);  casFeatCode_Candidate4=(null == casFeat_Candidate4) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_Candidate4).getCode();  casFeat_CorrectAnswer=jcas.getRequiredFeatureDE(casType,"CorrectAnswer","uima.cas.Integer",featOkTst);  casFeatCode_CorrectAnswer=(null == casFeat_CorrectAnswer) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_CorrectAnswer).getCode();}  }
class C{  public void add(PVector v){  x+=v.x;  y+=v.y;  z+=v.z;}  }
class C{  private static String escape(String str){  StringBuilder buffer=new StringBuilder();  for (int i=0; i < str.length(); i++) {    char ch=str.charAt(i);    if (Character.isDigit(ch) || Character.isUpperCase(ch) || Character.isLowerCase(ch)|| ch == '_') {      buffer.append(ch);    } else {      buffer.append("\\");      buffer.append(ch);    }  }  return buffer.toString();}  }
class C{  @Override public String toString(){  return faultCode + ": " + faultString;}  }
class C{  public static void wtf(String tag,String msg,Throwable tr){  println(ASSERT,tag,msg,tr);}  }
class C{  public static final String longToBinString(int a){  StringBuffer sb=new StringBuffer(32);  for (int i=0; i < 32; i++)   sb.append(BIT[(a >>> (31 - i)) & 0x1]);  return sb.toString();}  }
class C{  private void createSelectionPanel(boolean order,boolean invoice,boolean project){  int row=0;  selectionPanel.setBorder(new TitledBorder(Msg.translate(Env.getCtx(),"Selection")));  productField=new CComboBox(getProducts());  CLabel label=new CLabel(Msg.translate(Env.getCtx(),"M_Product_ID"));  label.setLabelFor(productField);  selectionPanel.add(label,new ALayoutConstraint(row++,0));  selectionPanel.add(productField);  productField.addActionListener(this);  label=new CLabel(productQty.getTitle());  label.setLabelFor(productQty);  selectionPanel.add(label);  selectionPanel.add(productQty);  productQty.setValue(Env.ONE);  productQty.addActionListener(this);  if (order) {    orderField=new CComboBox(getOrders());    label=new CLabel(Msg.translate(Env.getCtx(),"C_Order_ID"));    label.setLabelFor(orderField);    selectionPanel.add(label,new ALayoutConstraint(row++,0));    selectionPanel.add(orderField);    orderField.addActionListener(this);  }  if (invoice) {    invoiceField=new CComboBox(getInvoices());    label=new CLabel(Msg.translate(Env.getCtx(),"C_Invoice_ID"));    label.setLabelFor(invoiceField);    selectionPanel.add(label,new ALayoutConstraint(row++,0));    selectionPanel.add(invoiceField);    invoiceField.addActionListener(this);  }  if (project) {    projectField=new CComboBox(getProjects());    label=new CLabel(Msg.translate(Env.getCtx(),"C_Project_ID"));    label.setLabelFor(projectField);    selectionPanel.add(label,new ALayoutConstraint(row++,0));    selectionPanel.add(projectField);    projectField.addActionListener(this);  }  confirmPanel.getOKButton().setEnabled(false);  Dimension size=selectionPanel.getPreferredSize();  size.width=WINDOW_WIDTH;  selectionPanel.setPreferredSize(size);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:35.802 -0500",hash_original_method="9C43102AEBDE030DD3A73C704DCFC758",hash_generated_method="ED738DDC5DCEE837AA72AA1B9C5B8A26") public final int countDataTypes(){  return mDataTypes != null ? mDataTypes.size() : 0;}  }
class C{  public Domain findDomainByID(DomainPK domainPK){  for (  Domain domain : domains) {    if (domain.getId().equals(domainPK)) {      return domain;    }  }  return null;}  }
class C{  public Object visit(IncludeFilter filter,Object extraData){  filterBuilder=QueryBuilders.matchAllQuery();  return extraData;}  }
class C{  @Override public boolean beforeSampling(Sampler<?,?,?> sampler,SampledVertexDecorator<?> vertex){  return true;}  }
class C{  public IllegalArgumentException(){  super();}  }
class C{  static boolean isOSX(){  return getOperatingSystem().startsWith("Mac OS X");}  }
class C{  public void insertUpdate(FlowView fv,DocumentEvent e,Rectangle alloc){  sync(fv);  super.insertUpdate(fv,e,alloc);}  }
class C{  protected void markFlushed(){  if (doneLock != null) {    if (NSLogger.debugLogger)     Log.v("NSLogger",String.format("marking message %d as flushed",sequenceNumber));    doneLock.lock();    doneCondition.signal();    doneLock.unlock();  }}  }
class C{  public ModelSwitch(){  if (modelPackage == null) {    modelPackage=ModelPackage.eINSTANCE;  }}  }
class C{  public void onAllRenamingAttemptsTimeOut(OneSheeldDevice device){}  }
class C{  protected int next() throws IOException, ExifInvalidFormatException {  if (!mContainExifData) {    return EVENT_END;  }  int offset=mTiffStream.getReadByteCount();  int endOfTags=mIfdStartOffset + OFFSET_SIZE + TAG_SIZE * mNumOfTagInIfd;  if (offset < endOfTags) {    mTag=readTag();    if (mTag == null) {      return next();    }    if (mNeedToParseOffsetsInCurrentIfd) {      checkOffsetOrImageTag(mTag);    }    return EVENT_NEW_TAG;  } else   if (offset == endOfTags) {    if (mIfdType == IfdId.TYPE_IFD_0) {      long ifdOffset=readUnsignedLong();      if (isIfdRequested(IfdId.TYPE_IFD_1) || isThumbnailRequested()) {        if (ifdOffset != 0) {          registerIfd(IfdId.TYPE_IFD_1,ifdOffset);        }      }    } else {      int offsetSize=4;      if (mCorrespondingEvent.size() > 0) {        offsetSize=mCorrespondingEvent.firstEntry().getKey() - mTiffStream.getReadByteCount();      }      if (offsetSize < 4) {        Log.w(TAG,"Invalid size of link to next IFD: " + offsetSize);      } else {        long ifdOffset=readUnsignedLong();        if (ifdOffset != 0) {          Log.w(TAG,"Invalid link to next IFD: " + ifdOffset);        }      }    }  }  while (mCorrespondingEvent.size() != 0) {    Entry<Integer,Object> entry=mCorrespondingEvent.pollFirstEntry();    Object event=entry.getValue();    try {      skipTo(entry.getKey());    } catch (    IOException e) {      Log.w(TAG,"Failed to skip to data at: " + entry.getKey() + " for "+ event.getClass().getName()+ ", the file may be broken.");      continue;    }    if (event instanceof IfdEvent) {      mIfdType=((IfdEvent)event).ifd;      mNumOfTagInIfd=mTiffStream.readUnsignedShort();      mIfdStartOffset=entry.getKey();      if (mNumOfTagInIfd * TAG_SIZE + mIfdStartOffset + OFFSET_SIZE > mApp1End) {        Log.w(TAG,"Invalid size of IFD " + mIfdType);        return EVENT_END;      }      mNeedToParseOffsetsInCurrentIfd=needToParseOffsetsInCurrentIfd();      if (((IfdEvent)event).isRequested) {        return EVENT_START_OF_IFD;      } else {        skipRemainingTagsInCurrentIfd();      }    } else     if (event instanceof ImageEvent) {      mImageEvent=(ImageEvent)event;      return mImageEvent.type;    } else {      ExifTagEvent tagEvent=(ExifTagEvent)event;      mTag=tagEvent.tag;      if (mTag.getDataType() != ExifTag.TYPE_UNDEFINED) {        readFullTagValue(mTag);        checkOffsetOrImageTag(mTag);      }      if (tagEvent.isRequested) {        return EVENT_VALUE_OF_REGISTERED_TAG;      }    }  }  return EVENT_END;}  }
class C{  @Override public void remove(int offset,int length) throws BadLocationException {  super.remove(offset,length);  processChangedLines(offset,0);}  }
class C{  public NamePreservingRunnable(Runnable runnable,String newName){  this.runnable=runnable;  this.newName=newName;}  }
class C{  public int randomIndexChoice(List<Integer> weights,int omit){  int result=0, index;  double maxKey=0.0;  double u, key;  int weight;  for (ListIterator<Integer> it=weights.listIterator(); it.hasNext(); ) {    index=it.nextIndex();    weight=it.next();    if (index == omit)     continue;    u=random.nextDouble();    key=Math.pow(u,(1.0 / weight));    if (key > maxKey) {      maxKey=key;      result=index;    }  }  return result;}  }
class C{  public static byte[] generateAlternativeSeed(){  try {    ByteArrayOutputStream bout=new ByteArrayOutputStream();    DataOutputStream out=new DataOutputStream(bout);    out.writeLong(System.currentTimeMillis());    out.writeLong(System.nanoTime());    out.writeInt(new Object().hashCode());    Runtime runtime=Runtime.getRuntime();    out.writeLong(runtime.freeMemory());    out.writeLong(runtime.maxMemory());    out.writeLong(runtime.totalMemory());    try {      String s=System.getProperties().toString();      out.writeInt(s.length());      out.write(s.getBytes("UTF-8"));    } catch (    Exception e) {      warn("generateAlternativeSeed",e);    }    try {      Class<?> inetAddressClass=Class.forName("java.net.InetAddress");      Object localHost=inetAddressClass.getMethod("getLocalHost").invoke(null);      String hostName=inetAddressClass.getMethod("getHostName").invoke(localHost).toString();      out.writeUTF(hostName);      Object[] list=(Object[])inetAddressClass.getMethod("getAllByName",String.class).invoke(null,hostName);      Method getAddress=inetAddressClass.getMethod("getAddress");      for (      Object o : list) {        out.write((byte[])getAddress.invoke(o));      }    } catch (    Throwable e) {    }    for (int j=0; j < 16; j++) {      int i=0;      long end=System.currentTimeMillis();      while (end == System.currentTimeMillis()) {        i++;      }      out.writeInt(i);    }    out.close();    return bout.toByteArray();  } catch (  IOException e) {    warn("generateAlternativeSeed",e);    return new byte[1];  }}  }
class C{  public static final void putUpdatePlaylistEntryRequest(JSONObject updateObject) throws JSONException {  mPlaylistEntriesMutationsArray.put(new JSONObject().put("update",updateObject));}  }
class C{  public static SshServer createSshd(){  SshServer sshd=SshServer.setUpDefaultServer();  sshd.setPort(TEST_SSH_PORT);  sshd.setKeyPairProvider(new SimpleGeneratorHostKeyProvider(TEST_SSH_AUTH_PUBLIC_KEY.toAbsolutePath().toString()));  sshd.setPublickeyAuthenticator(null);  sshd.setCommandFactory(null);  return sshd;}  }
class C{  public void registerInput(String varName,JavaPairRDD<MatrixIndexes,MatrixBlock> rdd,long rlen,long clen) throws DMLRuntimeException {  registerInput(varName,rdd,rlen,clen,OptimizerUtils.DEFAULT_BLOCKSIZE,OptimizerUtils.DEFAULT_BLOCKSIZE);}  }
class C{  public SearchableBasedQuery(HGSearchable<Key,Value> searchable,Key key,ComparisonOperator operator){  this(searchable,hg.constant(key),operator);}  }
class C{  private final void growBuffer(){  final int columns=mColumns;  int newsize=size() + 1;  newsize=ArrayUtils.idealIntArraySize(newsize * columns) / columns;  int[] newvalues=new int[newsize * columns];  final int[] valuegap=mValueGap;  final int rowgapstart=mRowGapStart;  int after=mRows - (rowgapstart + mRowGapLength);  if (mValues != null) {    System.arraycopy(mValues,0,newvalues,0,columns * rowgapstart);    System.arraycopy(mValues,(mRows - after) * columns,newvalues,(newsize - after) * columns,after * columns);  }  for (int i=0; i < columns; i++) {    if (valuegap[i] >= rowgapstart) {      valuegap[i]+=newsize - mRows;      if (valuegap[i] < rowgapstart) {        valuegap[i]=rowgapstart;      }    }  }  mRowGapLength+=newsize - mRows;  mRows=newsize;  mValues=newvalues;}  }
class C{  final boolean isOwnedBy(AbstractQueuedLongSynchronizer sync){  return sync == AbstractQueuedLongSynchronizer.this;}  }
class C{  public PreRenderViewEvent(FacesContext facesContext,UIViewRoot root){  super(facesContext,root);}  }
class C{  public Address plus(int v){  return null;}  }
class C{  @ExceptionHandler(ConstraintViolationException.class) public ResponseEntity<ExceptionInfo> handleConstraintViolationException(final HttpServletRequest request,final Exception ex){  logRequest(request,ex);  final ExceptionInfo response=createExceptionInfo(new org.eclipse.hawkbit.repository.exception.ConstraintViolationException((ConstraintViolationException)ex));  return new ResponseEntity<>(response,HttpStatus.BAD_REQUEST);}  }
class C{  public void startExpiring(){  stateLock.writeLock().lock();  try {    if (!running) {      running=true;      expirerThread.start();    }  }  finally {    stateLock.writeLock().unlock();  }}  }
class C{  public static BufferedImage[] buildMipmaps(BufferedImage image,int mipmapImageType,int maxLevel){  if (image == null) {    String message=Logging.getMessage("nullValue.ImageIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (maxLevel < 0) {    String message=Logging.getMessage("generic.ArgumentOutOfRange","maxLevel < 0");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  BufferedImage[] mipMapLevels=new BufferedImage[1 + maxLevel];  if (image.getType() == mipmapImageType) {    mipMapLevels[0]=image;  } else {    mipMapLevels[0]=new BufferedImage(image.getWidth(),image.getHeight(),mipmapImageType);    getScaledCopy(image,mipMapLevels[0]);  }  for (int level=1; level <= maxLevel; level++) {    int width=Math.max(image.getWidth() >> level,1);    int height=Math.max(image.getHeight() >> level,1);    mipMapLevels[level]=new BufferedImage(width,height,mipmapImageType);    getScaledCopy(mipMapLevels[level - 1],mipMapLevels[level]);  }  return mipMapLevels;}  }
class C{  public static boolean isFullCopyResynchronizable(Volume volume,DbClient dbClient){  boolean result=false;  String replicaState=volume.getReplicaState();  if (isVolumeFullCopy(volume,dbClient) && replicaState != null && !replicaState.isEmpty()) {    ReplicationState state=ReplicationState.getEnumValue(replicaState);    if (state != null && state == ReplicationState.SYNCHRONIZED) {      result=true;    }  }  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 16:08:17.599 -0500",hash_original_method="B223AA795B2541C6B9FD98A707674E40",hash_generated_method="53329EC60F7B5E5DBC8DF852F6142EBD") public static String newStringUtf16Be(byte[] bytes){  return StringUtils.newString(bytes,CharEncoding.UTF_16BE);}  }
class C{  public synchronized void remove(int priority){  queue.remove(priority);  notifyAll();}  }
class C{  @Override public void revalidate(){}  }
class C{  public static synchronized boolean isFixtureLabeled(){  return fixtureLabeled;}  }
class C{  private Uri insertWaypoint(Uri url,ContentValues contentValues){  long rowId=db.insert(WaypointsColumns.TABLE_NAME,WaypointsColumns._ID,contentValues);  if (rowId >= 0) {    return ContentUris.appendId(WaypointsColumns.CONTENT_URI.buildUpon(),rowId).build();  }  throw new SQLException("Failed to insert a waypoint " + url);}  }
class C{  public void resolve(CompilationUnitScope scope){  internalResolve(scope);}  }
class C{  public BlockHeight(final Deserializer deserializer){  this(deserializer.readLong("height"));}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(')');  return result.toString();}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public boolean matches(User user,String text,String lowercaseText){  if (pattern != null && !pattern.matcher(text).matches()) {    return false;  }  if (caseSensitive != null && !text.contains(caseSensitive)) {    return false;  }  if (caseInsensitive != null && !lowercaseText.contains(caseInsensitive)) {    return false;  }  if (startsWith != null && !lowercaseText.startsWith(startsWith)) {    return false;  }  if (user == null) {    return appliesToInfo;  }  if (user != null && appliesToInfo) {    return false;  }  if (username != null && !username.equals(user.nick)) {    return false;  }  if (category != null && !user.hasCategory(category)) {    return false;  }  if (categoryNot != null && user.hasCategory(categoryNot)) {    return false;  }  if (!channels.isEmpty() && !channels.contains(user.getChannel())) {    return false;  }  if (!notChannels.isEmpty() && notChannels.contains(user.getChannel())) {    return false;  }  if (channelCategory != null && !user.hasCategory(channelCategory,user.getChannel())) {    return false;  }  if (channelCategoryNot != null && user.hasCategory(channelCategoryNot,user.getChannel())) {    return false;  }  if (!checkStatus(user,statusReq)) {    return false;  }  if (!checkStatus(user,statusReqNot)) {    return false;  }  return true;}  }
class C{  public static Change markNoMovementChange(final Collection<Unit> units){  final CompositeChange change=new CompositeChange();  for (  final Unit unit : units) {    if (TripleAUnit.get(unit).getMovementLeft() > 0) {      change.add(markNoMovementChange(unit));    }  }  if (change.isEmpty()) {    return EMPTY_CHANGE;  }  return change;}  }
class C{  @Override protected void recalculate(final MutableShoppingCart shoppingCart){  cartRepository.storeShoppingCart(shoppingCart);  super.recalculate(shoppingCart);}  }
class C{  private OptionalDouble(double value){  this.isPresent=true;  this.value=value;}  }
class C{  public void execute() throws BuildException {  if (src == null) {    throw new BuildException("src not set.");  } else   if (!src.isFile()) {    throw new BuildException("Expected src (" + src + ") is a file");  }  if (dest == null) {    throw new BuildException("dest not set.");  } else   if (!dest.isDirectory()) {    throw new BuildException("Expected dest (" + dest + ") is a directory");  }  File curFile=null;  try {    BufferedReader reader=new BufferedReader(new FileReader(src));    Writer writer=null;    String line=reader.readLine();    while (line != null) {      String matchStart="##NEW_FILE_STARTS_HERE ";      String matchEnd="##";      if (line.startsWith(matchStart) && line.endsWith(matchEnd)) {        String curFileName=line.substring(matchStart.length(),line.length() - matchEnd.length());        curFile=new File(dest,curFileName);        if (writer != null) {          writer.close();        }        writer=new FileWriter(curFile);      } else {        if (writer != null) {          writer.write(line);          writer.write('\n');        }      }      line=reader.readLine();    }    if (writer != null) {      writer.close();    }  } catch (  IOException e) {    throw new BuildException("Error splitting files " + src + " "+ curFile,e);  }}  }
class C{  public Long convertAmount(Long amount,String source,String target,Context context){  if (amount == null) {    throw new InvalidParameterException("Error converting amount, amount may not be null");  }  if (source == null) {    throw new InvalidParameterException("Error converting amount, source may not be null");  }  if (target == null) {    throw new InvalidParameterException("Error converting amount, target may not be null");  }  if (context == null) {    throw new InvalidParameterException("Error converting amount, context may not be null");  }  HttpURLConnection connection=null;  try {    String paymentProductPath=Constants.GC_GATEWAY_CONVERT_AMOUNT_PATH.replace("[cid]",configuration.getCustomerId());    String url=configuration.getBaseUrl() + paymentProductPath;    StringBuilder queryString=new StringBuilder();    queryString.append("?amount=").append(amount);    queryString.append("&source=").append(source);    queryString.append("&target=").append(target);    queryString.append("&").append(createCacheBusterParameter());    url+=queryString.toString();    connection=doHTTPGetRequest(url,configuration.getClientSessionId(),configuration.getMetadata(context));    String responseBody=new Scanner(connection.getInputStream(),"UTF-8").useDelimiter("\\A").next();    if (Constants.ENABLE_REQUEST_LOGGING) {      logResponse(connection,responseBody);    }    ConvertedAmountResponse convertedAmountResponse=gson.fromJson(responseBody,ConvertedAmountResponse.class);    return convertedAmountResponse.getConvertedAmount();  } catch (  CommunicationException e) {    Log.i(TAG,"Error converting amount:" + e.getMessage());    return null;  }catch (  Exception e) {    Log.i(TAG,"Error converting amount:" + e.getMessage());    return null;  } finally {    try {      if (connection != null) {        connection.getInputStream().close();        connection.disconnect();      }    } catch (    IOException e) {      Log.i(TAG,"Error converting amount:" + e.getMessage());    }  }}  }
class C{  public SQLExceptionChainBuilder(E root){  this.root=root;}  }
class C{  public Object[] array(){  return array;}  }
class C{  @AfterClass public static void tearDownClass() throws Exception {}  }
class C{  private boolean upOneFrameInternal(boolean set){  Address fp;  if (currentMethod != null && currentMethod.getDeclaringClass().hasBridgeFromNativeAnnotation()) {    fp=RuntimeEntrypoints.unwindNativeStackFrame(currentFramePointer);  } else {    fp=currentFramePointer;  }  Address prevFP=fp;  Address newFP=Magic.getCallerFramePointer(fp);  if (newFP.EQ(StackFrameLayout.getStackFrameSentinelFP())) {    return false;  }  Address newIP=Magic.getReturnAddress(prevFP);  int cmid=Magic.getCompiledMethodID(newFP);  while (cmid == StackFrameLayout.getInvisibleMethodID()) {    prevFP=newFP;    newFP=Magic.getCallerFramePointer(newFP);    if (newFP.EQ(StackFrameLayout.getStackFrameSentinelFP())) {      return false;    }    newIP=Magic.getReturnAddress(prevFP);    cmid=Magic.getCompiledMethodID(newFP);  }  if (set) {    CompiledMethod cm=CompiledMethods.getCompiledMethod(cmid);    currentFramePointer=newFP;    currentInstructionPointer=cm.getInstructionOffset(newIP);    cm.set(this,currentInstructionPointer);  }  return true;}  }
class C{  @Override public int size(){  int x=0;  for (  Segment<K,V> s : segments) {    x+=s.mapSize - s.queue2Size;  }  return x;}  }
class C{  protected void assertMissingRoles(String regionName,String[] roles){  Region region=getRootRegion(regionName);  Set missingRoles=RequiredRoles.checkForRequiredRoles(region);  assertNotNull(missingRoles);  assertEquals(roles.length,missingRoles.size());  for (Iterator iter=missingRoles.iterator(); iter.hasNext(); ) {    Role role=(Role)iter.next();    boolean found=false;    for (int i=0; i < roles.length; i++) {      if (role.getName().equals(roles[i])) {        found=true;        break;      }    }    assertTrue("Unexpected missing role: " + role.getName(),found);  }}  }
class C{  @Override public void stateChanged(ChangeEvent e){  updateFrameTitle();  updateMenu();  if (e.getSource() instanceof JComponent) {    setTabTitle((JComponent)e.getSource());  }}  }
class C{  public static cuDoubleComplex cuCdiv(cuDoubleComplex x,cuDoubleComplex y){  cuDoubleComplex quot;  double s=Math.abs(cuCreal(y)) + Math.abs(cuCimag(y));  double oos=1.0 / s;  double ars=cuCreal(x) * oos;  double ais=cuCimag(x) * oos;  double brs=cuCreal(y) * oos;  double bis=cuCimag(y) * oos;  s=(brs * brs) + (bis * bis);  oos=1.0 / s;  quot=cuCmplx(((ars * brs) + (ais * bis)) * oos,((ais * brs) - (ars * bis)) * oos);  return quot;}  }
class C{  public void pause(final Operator operator,final IOContainer iocontainer,final int breakpointType){  setProcessState(PROCESS_STATE_PAUSED);  fireBreakpointEvent(operator,iocontainer,breakpointType);  while (getProcessState() == Process.PROCESS_STATE_PAUSED) {synchronized (breakpointLock) {      try {        breakpointLock.wait();      } catch (      InterruptedException e) {      }    }  }}  }
class C{  public Empirical(double[] pdf,int interpolationType,RandomEngine randomGenerator){  setRandomGenerator(randomGenerator);  setState(pdf,interpolationType);}  }
class C{  public TrainingAndTestSet(MultipleObjectsBundle training,MultipleObjectsBundle test,ArrayList<ClassLabel> labels){  this.training=training;  this.test=test;  this.labels=labels;}  }
class C{  @Override public final boolean isPasswordSupplied(){  return fileAccess.isPasswordSupplied(getIO());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:09.135 -0500",hash_original_method="6E29908C529CE7846C11452C201BBB62",hash_generated_method="F651796C95C96FF9EA55C810F6C889F8") public int article(String messageId) throws IOException {  return sendCommand(NNTPCommand.ARTICLE,messageId);}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  @Override public int hashCode(){  int hash=7;  hash=83 * hash + this.rows;  hash=83 * hash + this.columns;  hash=83 * hash + Arrays.hashCode(this.data);  return hash;}  }
class C{  public void init(BufferedReader br) throws IOException {  m_writer=new BufferedWriter(new PipedWriter(m_reader));  String line=br.readLine();  write("<?xml version=\"1.0\"?>\n");  write("<?OFX ");  while (line.indexOf('<') != 0) {    if (line.length() > 0) {      write(line.replaceAll(":","=\"") + "\" ");    }    line=br.readLine();  }  write("?>\n");  while (line != null) {    m_ofx+=line + "\n";    line=br.readLine();  }  br.close();  new Thread(this).start();}  }
class C{  QName toQName(Class<?> outputClass){  String localPart;  String namespaceUri;  if (outputClass.isAnnotationPresent(XmlRootElement.class)) {    XmlRootElement annotation=outputClass.getAnnotation(XmlRootElement.class);    localPart=annotation.name();    namespaceUri=annotation.namespace();  } else   if (outputClass.isAnnotationPresent(XmlType.class)) {    XmlType annotation=outputClass.getAnnotation(XmlType.class);    localPart=annotation.name();    namespaceUri=annotation.namespace();  } else {    throw new IllegalArgumentException("Outputclass [" + outputClass + "] is "+ "neither annotated with @XmlRootElement nor @XmlType");  }  if (JAXB_DEFAULT_ANNOTATION_VALUE.equals(localPart)) {    localPart=ClassUtils.getShortNameAsProperty(outputClass);  }  if (JAXB_DEFAULT_ANNOTATION_VALUE.equals(namespaceUri)) {    Package outputClassPackage=outputClass.getPackage();    if (outputClassPackage != null && outputClassPackage.isAnnotationPresent(XmlSchema.class)) {      XmlSchema annotation=outputClassPackage.getAnnotation(XmlSchema.class);      namespaceUri=annotation.namespace();    } else {      namespaceUri=XMLConstants.NULL_NS_URI;    }  }  return new QName(namespaceUri,localPart);}  }
class C{  protected N4ClassifierDefinitionImpl(){  super();}  }
class C{  private static void saveManagerInfo(int pid,int status,File directory,int port,InetAddress bindAddress){  ManagerInfo info=new ManagerInfo(pid,status,port,bindAddress);  File infoFile=getManagerInfoFile(directory,true);  try {    FileOutputStream ostream=new FileOutputStream(infoFile);    DataOutputStream dos=new DataOutputStream(ostream);    DataSerializer.writeObject(info,dos);    ostream.close();  } catch (  IOException io) {    throw new GemFireIOException(LocalizedStrings.ManagerInfo_COULD_NOT_WRITE_FILE_0.toLocalizedString(infoFile),io);  }}  }
class C{  public SwitchPreference(Context context,AttributeSet attrs){  super(context,attrs);}  }
class C{  public AbstractDoubleList partFromTo(int from,int to){  if (size == 0)   return new DoubleArrayList(0);  checkRangeFromTo(from,to,size);  double[] part=new double[to - from + 1];  System.arraycopy(elements,from,part,0,to - from + 1);  return new DoubleArrayList(part);}  }
class C{  public Optional<T> last(){  Iterator<T> iterator=iterator();  T value=null;  while (iterator.hasNext())   value=iterator.next();  return Optional.of(value);}  }
class C{  @Override public void parse2(CompilationUnit unit,SymbolTable symbolTable){  Source generatedSource=null;  Source originalSource=unit.getSource();  FXGNode rootNode=(FXGNode)unit.getContext().getAttribute(FXG_DOM_ROOT);  boolean hasTextGraphic=false;  String baseClassName=null;  double version=1.0;  if (rootNode instanceof FlexGraphicNode) {    FlexGraphicNode graphicNode=(FlexGraphicNode)rootNode;    FXGVersion v=graphicNode.getVersion();    version=v != null ? v.asDouble() : 1.0;    hasTextGraphic=graphicNode.hasText;    baseClassName=graphicNode.baseClassName;  }  try {    generatedSource=generateSource(originalSource,symbolTable,version,hasTextGraphic,baseClassName);  } catch (  IOException ex) {    ThreadLocalToolkit.log(new SourceGenerationException(ex),originalSource);    return;  }  CompilationUnit interfaceUnit=delegateSubCompiler.parse1(generatedSource,symbolTable);  if (interfaceUnit != null) {    unit.getSource().addFileIncludes(interfaceUnit.getSource());    unit.getContext().setAttribute(DELEGATE_UNIT,interfaceUnit);    Source.transferMetaData(interfaceUnit,unit);  } else {    return;  }  delegateSubCompiler.parse2(interfaceUnit,symbolTable);}  }
class C{  public void onTabsViewShown(){  mUma.onTabsViewShown();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public JSONObject accumulate(String key,Object value) throws JSONException {  testValidity(value);  Object object=this.opt(key);  if (object == null) {    this.put(key,value instanceof org.json.JSONArray ? new org.json.JSONArray().put(value) : value);  } else   if (object instanceof org.json.JSONArray) {    ((org.json.JSONArray)object).put(value);  } else {    this.put(key,new org.json.JSONArray().put(object).put(value));  }  return this;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public SQLClientInfoException(String reason,Map<String,ClientInfoStatus> failedProperties){  super(reason);  this.failedProperties=new HashMap<String,ClientInfoStatus>(failedProperties);}  }
class C{  private boolean completeResponse(OperationResponse response,Runnable callback){  if (response == null) {    callback.run();    return true;  }  if (response.eventIndex() > eventIndex) {    EventCallback eventCallback=eventCallbacks.peek();    while (eventCallback != null && eventCallback.request.eventIndex() <= response.eventIndex()) {      eventCallbacks.remove();      eventCallback.run();      eventIndex=eventCallback.request.eventIndex();      eventCallback=eventCallbacks.peek();    }  }  if (response.eventIndex() <= eventIndex || (eventIndex == 0 && response.eventIndex() == state.getSessionId())) {    callback.run();    return true;  } else {    return false;  }}  }
class C{  public static String encodeHex(byte[] array,boolean zeroTerminated){  char[] cArray=new char[array.length * 2];  int j=0;  for (int i=0; i < array.length; i++) {    int index=array[i] & 0xFF;    if (index == 0 && zeroTerminated) {      break;    }    cArray[j++]=FIRST_CHAR[index];    cArray[j++]=SECOND_CHAR[index];  }  return new String(cArray,0,j);}  }
class C{  private static void blankInput() throws Exception {  Pattern p=Pattern.compile("abc",Pattern.CASE_INSENSITIVE);  Matcher m=p.matcher("");  if (m.find())   failCount++;  p=Pattern.compile("a*",Pattern.CASE_INSENSITIVE);  m=p.matcher("");  if (!m.find())   failCount++;  p=Pattern.compile("abc");  m=p.matcher("");  if (m.find())   failCount++;  p=Pattern.compile("a*");  m=p.matcher("");  if (!m.find())   failCount++;  report("Blank input");}  }
class C{  @Override public boolean advance() throws IOException {  try {    for (int i=0; i < shardIterators.size(); ++i) {      currentRecord=shardIterators.getCurrent().next();      if (currentRecord.isPresent()) {        return true;      } else {        shardIterators.moveForward();      }    }  } catch (  TransientKinesisException e) {    LOG.warn("Transient exception occurred",e);  }  return false;}  }
class C{  public FeedbackFilter(float distance,float angle,float rotation,float zoom){  this.distance=distance;  this.angle=angle;  this.rotation=rotation;  this.zoom=zoom;}  }
class C{  public boolean step(final Player player,final String text){  final Sentence sentence=ConversationParser.parse(text);  if (sentence.hasError()) {    logger.warn("problem parsing the sentence '" + text + "': "+ sentence.getErrorString());  }  return step(player,sentence);}  }
class C{  protected boolean haveSharedCellsRaw(DoubleMatrix3D other){  if (other instanceof SelectedDenseDoubleMatrix3D) {    SelectedDenseDoubleMatrix3D otherMatrix=(SelectedDenseDoubleMatrix3D)other;    return this.elements == otherMatrix.elements;  } else   if (other instanceof DenseDoubleMatrix3D) {    DenseDoubleMatrix3D otherMatrix=(DenseDoubleMatrix3D)other;    return this.elements == otherMatrix.elements;  }  return false;}  }
class C{  public void valueChanged(ListSelectionEvent e){  if (_table == null) {    return;  }  int row=_table.getSelectedRow();  if (log.isDebugEnabled()) {    log.debug("Table valueChanged: row= " + row);  }  remove(_iconFamilyPanel);  initIconFamiliesPanel();  add(_iconFamilyPanel,1);  if (row >= 0) {    if (_updateButton != null) {      _updateButton.setEnabled(true);      _updateButton.setToolTipText(null);    }    _showIconsButton.setEnabled(true);    _showIconsButton.setToolTipText(null);  } else {    if (_updateButton != null) {      _updateButton.setEnabled(false);      _updateButton.setToolTipText(Bundle.getMessage("ToolTipPickFromTable"));    }    _showIconsButton.setEnabled(false);    _showIconsButton.setToolTipText(Bundle.getMessage("ToolTipPickRowToShowIcon"));  }  validate();}  }
class C{  @Override public void endElement(String uri,String name,String qName){  setContent(content.toString().trim());  content=new StringBuilder();  inside="";  if (qName.equals("function"))   endFunction(); else   if (qName.equals("argument"))   endArg(); else   if (qName.equals("return"))   endReturn(); else   if (qName.equals("bundle"))   endBundle();}  }
class C{  private void applyMidSideStereo(ChannelElement cpe){  final IndividualChannelStream ics=cpe.ch[0].ics;  int ch0=0;  int ch1=0;  int idx=0;  final int offsets[]=ics.swbOffset;  for (int g=0; g < ics.numWindowGroups; g++) {    for (int i=0; i < ics.maxSfb; i++, idx++) {      if (cpe.msMask[idx] != 0 && cpe.ch[0].bandType[idx] < NOISE_BT && cpe.ch[1].bandType[idx] < NOISE_BT) {        for (int group=0; group < ics.groupLen[g]; group++) {          FloatDSP.butterflies(cpe.ch[0].coeffs,ch0 + group * 128 + offsets[i],cpe.ch[1].coeffs,ch1 + group * 128 + offsets[i],offsets[i + 1] - offsets[i]);        }      }    }    ch0+=ics.groupLen[g] * 128;    ch1+=ics.groupLen[g] * 128;  }}  }
class C{  private void ensureOpen() throws IOException {  if (closed) {    throw new IOException("Stream closed");  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrinsertbefore7.class,args);}  }
class C{  public static boolean initAsync(String Version,Context AppContext,LoaderCallbackInterface Callback){  return AsyncServiceHelper.initOpenCV(Version,AppContext,Callback);}  }
class C{  @Override public Token nextToken(){  Token t=super.nextToken();  while (t.getType() == STLexer.NEWLINE || t.getType() == STLexer.INDENT) {    t=super.nextToken();  }  return t;}  }
class C{  public void config(Window window){  if (measuredWidth == -1) {    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {      Point size=new Point();      window.getWindowManager().getDefaultDisplay().getSize(size);      measuredWidth=size.x;    } else {      measuredWidth=window.getWindowManager().getDefaultDisplay().getWidth();    }  }  if (measuredHeight == -1) {    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {      Point size=new Point();      window.getWindowManager().getDefaultDisplay().getSize(size);      measuredHeight=size.y;    } else {      measuredHeight=window.getWindowManager().getDefaultDisplay().getHeight();    }  }}  }
class C{  public UF9(){  this(30);}  }
class C{  public void writePage(ByteBuffer page,int pageNumber,int pageOffset) throws IOException {  assertWriting();  validatePageNumber(pageNumber);  page.rewind().position(pageOffset);  int writeLen=page.remaining();  if ((writeLen + pageOffset) > getFormat().PAGE_SIZE) {    throw new IllegalArgumentException("Page buffer is too large, size " + (writeLen + pageOffset));  }  ByteBuffer encodedPage=page;  if (pageNumber == 0) {    applyHeaderMask(page);  } else {    if (!_codecHandler.canEncodePartialPage()) {      if ((pageOffset > 0) && (writeLen < getFormat().PAGE_SIZE)) {        ByteBuffer fullPage=_fullPageEncodeBufferH.setPage(this,pageNumber);        fullPage.position(pageOffset);        fullPage.put(page);        fullPage.rewind();        page=fullPage;        pageOffset=0;        writeLen=getFormat().PAGE_SIZE;      } else {        _fullPageEncodeBufferH.possiblyInvalidate(pageNumber,null);      }    }    encodedPage=_codecHandler.encodePage(page,pageNumber,pageOffset);    encodedPage.position(pageOffset).limit(pageOffset + writeLen);  }  try {    _channel.write(encodedPage,(getPageOffset(pageNumber) + pageOffset));  }  finally {    if (pageNumber == 0) {      applyHeaderMask(page);    }  }}  }
class C{  public JLifeFormattedTextField(){}  }
class C{  public void updateParametersFrom(SQLiteDatabaseConfiguration other){  if (other == null) {    throw new IllegalArgumentException("other must not be null.");  }  if (!path.equals(other.path)) {    throw new IllegalArgumentException("other configuration must refer to " + "the same database.");  }  openFlags=other.openFlags;  maxSqlCacheSize=other.maxSqlCacheSize;  locale=other.locale;  foreignKeyConstraintsEnabled=other.foreignKeyConstraintsEnabled;  customFunctions.clear();  customFunctions.addAll(other.customFunctions);}  }
class C{  public ListNode mergeTwoListsRec(ListNode l1,ListNode l2){  if (l1 == null)   return l2;  if (l2 == null)   return l1;  if (l1.val < l2.val) {    l1.next=mergeTwoListsRec(l1.next,l2);    return l1;  } else {    l2.next=mergeTwoListsRec(l1,l2.next);    return l2;  }}  }
class C{  public static TypesFactory init(){  try {    TypesFactory theTypesFactory=(TypesFactory)EPackage.Registry.INSTANCE.getEFactory(TypesPackage.eNS_URI);    if (theTypesFactory != null) {      return theTypesFactory;    }  } catch (  Exception exception) {    EcorePlugin.INSTANCE.log(exception);  }  return new TypesFactoryImpl();}  }
class C{  @Override default Eval<IntSummaryStatistics> summaryStatisticsInt(final ToIntFunction<? super T> fn){  return Eval.later(null);}  }
class C{  void unregisterNotificationListener(ObjectName source) throws InstanceNotFoundException, ListenerNotFoundException {  mBeanServer.removeNotificationListener(source,this);}  }
class C{  public static void disable(){  debug(false);  info(false);  error(false);}  }
class C{  public static UnionCoder of(List<Coder<?>> elementCoders){  return new UnionCoder(elementCoders);}  }
class C{  private Type constrainInferredType(TypeParameter tp,Type inferredTypeArg,Map<TypeParameter,Type> argMap){  Type bounds=intersectionOfSupertypes(tp).substitute(argMap,null);  return intersectionType(bounds,inferredTypeArg,unit);}  }
class C{  @Deprecated public static double[] readDoubles(){  return new In().readAllDoubles();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node genderNode;  Node entRef;  Node entElement;  Node createdNode;  Node replacedChild;  int nodeType;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  genderNode=genderList.item(2);  entRef=genderNode.getFirstChild();  nodeType=(int)entRef.getNodeType();  if (equals(1,nodeType)) {    entRef=doc.createEntityReference("ent4");    assertNotNull("createdEntRefNotNull",entRef);  }  entElement=entRef.getFirstChild();  createdNode=doc.createElement("newChild");{    boolean success=false;    try {      replacedChild=entRef.replaceChild(createdNode,entElement);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public static boolean neeq(Object left,Object right) throws PageException {  return left != right;}  }
class C{  public STGroupFile(String fileName){  this(fileName,'<','>');}  }
class C{  private int readMethod(final ClassVisitor classVisitor,final Context context,int u){  char[] c=context.buffer;  context.access=readUnsignedShort(u);  context.name=readUTF8(u + 2,c);  context.desc=readUTF8(u + 4,c);  u+=6;  int code=0;  int exception=0;  String[] exceptions=null;  String signature=null;  int methodParameters=0;  int anns=0;  int ianns=0;  int tanns=0;  int itanns=0;  int dann=0;  int mpanns=0;  int impanns=0;  int firstAttribute=u;  Attribute attributes=null;  for (int i=readUnsignedShort(u); i > 0; --i) {    String attrName=readUTF8(u + 2,c);    if ("Code".equals(attrName)) {      if ((context.flags & SKIP_CODE) == 0) {        code=u + 8;      }    } else     if ("Exceptions".equals(attrName)) {      exceptions=new String[readUnsignedShort(u + 8)];      exception=u + 10;      for (int j=0; j < exceptions.length; ++j) {        exceptions[j]=readClass(exception,c);        exception+=2;      }    } else     if (SIGNATURES && "Signature".equals(attrName)) {      signature=readUTF8(u + 8,c);    } else     if ("Deprecated".equals(attrName)) {      context.access|=Opcodes.ACC_DEPRECATED;    } else     if (ANNOTATIONS && "RuntimeVisibleAnnotations".equals(attrName)) {      anns=u + 8;    } else     if (ANNOTATIONS && "RuntimeVisibleTypeAnnotations".equals(attrName)) {      tanns=u + 8;    } else     if (ANNOTATIONS && "AnnotationDefault".equals(attrName)) {      dann=u + 8;    } else     if ("Synthetic".equals(attrName)) {      context.access|=Opcodes.ACC_SYNTHETIC | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE;    } else     if (ANNOTATIONS && "RuntimeInvisibleAnnotations".equals(attrName)) {      ianns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {      itanns=u + 8;    } else     if (ANNOTATIONS && "RuntimeVisibleParameterAnnotations".equals(attrName)) {      mpanns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleParameterAnnotations".equals(attrName)) {      impanns=u + 8;    } else     if ("MethodParameters".equals(attrName)) {      methodParameters=u + 8;    } else {      Attribute attr=readAttribute(context.attrs,attrName,u + 8,readInt(u + 4),c,-1,null);      if (attr != null) {        attr.next=attributes;        attributes=attr;      }    }    u+=6 + readInt(u + 4);  }  u+=2;  MethodVisitor mv=classVisitor.visitMethod(context.access,context.name,context.desc,signature,exceptions);  if (mv == null) {    return u;  }  if (WRITER && mv instanceof MethodWriter) {    MethodWriter mw=(MethodWriter)mv;    if (mw.cw.cr == this && signature == mw.signature) {      boolean sameExceptions=false;      if (exceptions == null) {        sameExceptions=mw.exceptionCount == 0;      } else       if (exceptions.length == mw.exceptionCount) {        sameExceptions=true;        for (int j=exceptions.length - 1; j >= 0; --j) {          exception-=2;          if (mw.exceptions[j] != readUnsignedShort(exception)) {            sameExceptions=false;            break;          }        }      }      if (sameExceptions) {        mw.classReaderOffset=firstAttribute;        mw.classReaderLength=u - firstAttribute;        return u;      }    }  }  if (methodParameters != 0) {    for (int i=b[methodParameters] & 0xFF, v=methodParameters + 1; i > 0; --i, v=v + 4) {      mv.visitParameter(readUTF8(v,c),readUnsignedShort(v + 2));    }  }  if (ANNOTATIONS && dann != 0) {    AnnotationVisitor dv=mv.visitAnnotationDefault();    readAnnotationValue(dann,c,null,dv);    if (dv != null) {      dv.visitEnd();    }  }  if (ANNOTATIONS && anns != 0) {    for (int i=readUnsignedShort(anns), v=anns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,mv.visitAnnotation(readUTF8(v,c),true));    }  }  if (ANNOTATIONS && ianns != 0) {    for (int i=readUnsignedShort(ianns), v=ianns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,mv.visitAnnotation(readUTF8(v,c),false));    }  }  if (ANNOTATIONS && tanns != 0) {    for (int i=readUnsignedShort(tanns), v=tanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,mv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),true));    }  }  if (ANNOTATIONS && itanns != 0) {    for (int i=readUnsignedShort(itanns), v=itanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,mv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),false));    }  }  if (ANNOTATIONS && mpanns != 0) {    readParameterAnnotations(mv,context,mpanns,true);  }  if (ANNOTATIONS && impanns != 0) {    readParameterAnnotations(mv,context,impanns,false);  }  while (attributes != null) {    Attribute attr=attributes.next;    attributes.next=null;    mv.visitAttribute(attributes);    attributes=attr;  }  if (code != 0) {    mv.visitCode();    readCode(mv,context,code);  }  mv.visitEnd();  return u;}  }
class C{  public static void release(){  pcThreadLocal.set(null);}  }
class C{  public GeoShapeQueryBuilder queryName(String queryName){  this.queryName=queryName;  return this;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, rows, cols, x, y;  int progress=0;  double z, zN, noData, outputNoData;  int i, n;  int[] dX;  int[] dY;  double[] filterShape;  double[] data;  double largeValue=Float.POSITIVE_INFINITY;  int numPixelsInFilter;  int filterSize, midPoint, lowerQuartile;  boolean performLineThinning=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  filterSize=Integer.parseInt(args[2]);  performLineThinning=Boolean.parseBoolean(args[3]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    if (Math.floor(filterSize / 2d) == (filterSize / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSize++;    }    numPixelsInFilter=filterSize * filterSize;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPoint=(int)Math.floor(filterSize / 2);    double aSqr=midPoint * midPoint;    i=0;    for (row=0; row < filterSize; row++) {      for (col=0; col < filterSize; col++) {        dX[i]=col - midPoint;        dY[i]=row - midPoint;        z=(dX[i] * dX[i]) / aSqr + (dY[i] * dY[i]) / aSqr;        if (z > 1) {          filterShape[i]=0;        } else {          filterShape[i]=1;        }        i++;      }    }    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    rows=DEM.getNumberRows();    cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    outputNoData=-32768;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setNoDataValue(outputNoData);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    output.setZUnits("dimensionless");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          data=new double[numPixelsInFilter];          n=0;          for (i=0; i < numPixelsInFilter; i++) {            x=col + dX[i];            y=row + dY[i];            zN=DEM.getValue(y,x);            if (zN != noData) {              data[i]=zN;              n++;            } else {              data[i]=largeValue;            }          }          if (n > 0) {            Arrays.sort(data);            lowerQuartile=n / 4;            if (z <= data[lowerQuartile]) {              output.setValue(row,col,1);            }          }        } else {          output.setValue(row,col,outputNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    if (performLineThinning) {      long counter=0;      int loopNum=0;      int a;      dX=new int[]{1,1,1,0,-1,-1,-1,0};      dY=new int[]{-1,0,1,1,1,0,-1,-1};      int[][] elements={{6,7,0,4,3,2},{7,0,1,3,5},{0,1,2,4,5,6},{1,2,3,5,7},{2,3,4,6,7,0},{3,4,5,7,1},{4,5,6,0,1,2},{5,6,7,1,3}};      double[][] vals={{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1}};      double[] neighbours=new double[8];      boolean patternMatch=false;      do {        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        counter=0;        for (row=0; row < rows; row++) {          for (col=0; col < cols; col++) {            z=output.getValue(row,col);            if (z > 0 && z != noData) {              for (i=0; i < 8; i++) {                neighbours[i]=output.getValue(row + dY[i],col + dX[i]);              }              for (a=0; a < 8; a++) {                patternMatch=true;                for (i=0; i < elements[a].length; i++) {                  if (neighbours[elements[a][i]] != vals[a][i]) {                    patternMatch=false;                  }                }                if (patternMatch) {                  output.setValue(row,col,0);                  counter++;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress(progress);        }      } while (counter > 0);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static String runService(HttpServletRequest request,HttpServletResponse response){  String serviceName=request.getParameter("serviceName");  String mode=request.getParameter("mode");  Locale locale=UtilHttp.getLocale(request);  if (UtilValidate.isEmpty(serviceName)) {    String errMsg=UtilProperties.getMessage(CoreEvents.err_resource,"coreEvents.must_specify_service_name",locale);    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  if (UtilValidate.isEmpty(mode)) {    mode="sync";  }  Security security=(Security)request.getAttribute("security");  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  ModelService modelService=null;  try {    modelService=dispatcher.getDispatchContext().getModelService(serviceName);  } catch (  GenericServiceException e) {    Debug.logError(e,"Error looking up ModelService for serviceName [" + serviceName + "]",module);    String errMsg=UtilProperties.getMessage(CoreEvents.err_resource,"coreEvents.error_modelservice_for_srv_name",locale);    request.setAttribute("_ERROR_MESSAGE_",errMsg + "[" + serviceName+ "]: "+ e.toString());    return "error";  }  if (modelService == null) {    String errMsg=UtilProperties.getMessage(CoreEvents.err_resource,"coreEvents.service_name_not_find",locale);    request.setAttribute("_ERROR_MESSAGE_",errMsg + "[" + serviceName+ "]");    return "error";  }  if (!modelService.export && !security.hasPermission("SERVICE_INVOKE_ANY",request.getSession())) {    String errMsg=UtilProperties.getMessage(CoreEvents.err_resource,"coreEvents.not_authorized_to_call",locale);    request.setAttribute("_ERROR_MESSAGE_",errMsg + ".");    return "error";  }  Debug.logInfo("Running service named [" + serviceName + "] from event with mode ["+ mode+ "]",module);  Event event=new Event("service",mode,serviceName,false);  try {    return seh.invoke(event,null,request,response);  } catch (  EventHandlerException e) {    String errMsg=UtilProperties.getMessage(CoreEvents.err_resource,"coreEvents.service_eventhandler_exception",locale);    request.setAttribute("_ERROR_MESSAGE_",errMsg + ": " + e.getMessage());    return "error";  }}  }
class C{  @Override public void onFinishInflate(){  if (!alreadyInflated_) {    alreadyInflated_=true;    inflate(getContext(),layout.lv_file,this);    onViewChangedNotifier_.notifyViewChanged(this);  }  super.onFinishInflate();}  }
class C{  public static synchronized void closeCache(){  if (cache != null) {    cache.close();    cache=null;  }}  }
class C{  private void removeFromQueue(){  tempRemoveFromQueue();  previousInQueue=null;  nextInQueue=null;}  }
class C{  public void finish(){  setActive(false);  getRoot().setRectangleBottom(diagram.getVerticalPosition());}  }
class C{  public static void closeQuietly(Socket socket){  if (socket != null) {    try {      socket.close();    } catch (    Exception ignored) {    }  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case ERROR:  return isSetError();case TYPE:return isSetType();}throw new IllegalStateException();}  }
class C{  public static int[] indexOf(String[] searchStrings,String text,int offset){  int[] result={-1,-1};  int zeroIndex=-1;  for (int i=0; i < searchStrings.length; i++) {    int length=searchStrings[i].length();    if (length == 0) {      zeroIndex=i;      continue;    }    int index=text.indexOf(searchStrings[i],offset);    if (index >= 0) {      if (result[0] == -1) {        result[0]=index;        result[1]=i;      } else       if (index < result[0]) {        result[0]=index;        result[1]=i;      } else       if (index == result[0] && length > searchStrings[result[1]].length()) {        result[0]=index;        result[1]=i;      }    }  }  if (zeroIndex > -1 && result[0] == -1) {    result[0]=0;    result[1]=zeroIndex;  }  return result;}  }
class C{  public void addForeignKeyConstraint(ForeignKeyConstraint foreignKey){  if (!hasUserDefinedForeignKeyConstraints) {    if (!foreignKeyMap.containsKey(foreignKey.getName())) {      foreignKeyMap.put(foreignKey.getName(),foreignKey);    }  }}  }
class C{  public boolean canReadExpGolombCodedNum(){  int initialByteOffset=byteOffset;  int initialBitOffset=bitOffset;  int leadingZeros=0;  while (byteOffset < byteLimit && !readBit()) {    leadingZeros++;  }  boolean hitLimit=byteOffset == byteLimit;  byteOffset=initialByteOffset;  bitOffset=initialBitOffset;  return !hitLimit && bitsLeft() >= leadingZeros * 2 + 1;}  }
class C{  public Display3D(final double width,final double height,GUIState simulation,long interval){  this(width,height,simulation);}  }
class C{  public String toString(){  return names[value];}  }
class C{  public ResourceNode locateRelative(String sessionID,int levels) throws DirectoryException, DirectoryNotFoundException {  return locateRelative(sessionID,levels,getCurrentNode(sessionID));}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:46.903 -0500",hash_original_method="F653DD259DAF160B16141F9C028E5103",hash_generated_method="0204465D728032ACB5AFCD260826FD3D") private static boolean isToplevelClass(String fileName){  return fileName.indexOf('$') < 0;}  }
class C{  public boolean isDirectDictionaryColumns(){  List<ColumnExpression> listOfExp=new ArrayList<ColumnExpression>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  getColumnList(this,listOfExp);  for (  ColumnExpression ce : listOfExp) {    if (!ce.getCarbonColumn().hasEncoding(Encoding.DICTIONARY)) {      return true;    }  }  return false;}  }
class C{  public static SelectorExtractor selectorh(String query,int eq,String outType){  return new SelectorExtractor(query,eq,outType).htmlParser();}  }
class C{  private ArrayList<AStarNode> findNeighbours(AStarNode node){  ArrayList<AStarNode> r=new ArrayList<AStarNode>();  int x=node.x;  int y=node.y;  int z=node.z;  int dist=node.getG();  if (node.parent != null) {    int px=node.parent.x;    int py=node.parent.y;    int pz=node.parent.z;    boolean stairs=py != y;    int nY;    int dx=(x - px) / Math.max(Math.abs(x - px),1);    int dz=(z - pz) / Math.max(Math.abs(z - pz),1);    if (dx != 0 && dz != 0) {      if (stairs) {        return getAllNeighborsWithoutParent(x,y,z,dx,dz,node);      }      int leftY=0;      int rightY=0;      nY=getGroundNodeHeight(x,y,z + dz);      if (nY > 0) {        leftY=nY;        r.add(new AStarNode(x,nY,z + dz,dist + 1,node));      }      nY=getGroundNodeHeight(x + dx,y,z);      if (nY > 0) {        rightY=nY;        r.add(new AStarNode(x + dx,nY,z,dist + 1,node));      }      if (leftY != 0 || rightY != 0) {        r.add(new AStarNode(x + dx,Math.max(leftY,rightY),z + dz,dist + 2,node));      }      if (leftY != 0) {        if (getGroundNodeHeight(x - dx,py,z) == 0) {          r.add(new AStarNode(x - dx,leftY,z + dz,dist + 2,node));        }      }      if (rightY != 0) {        if (getGroundNodeHeight(x,py,z - dz) == 0) {          r.add(new AStarNode(x + dx,rightY,z - dz,dist + 2,node));        }      }    } else {      if (dx == 0) {        nY=getGroundNodeHeight(x,y,z + dz);        if (nY > 0) {          r.add(new AStarNode(x,nY,z + dz,dist + 1,node));          if (stairs) {            r.add(new AStarNode(x + 1,nY,z + dz,dist + 2,node));            r.add(new AStarNode(x - 1,nY,z + dz,dist + 2,node));          } else {            int nnY=getGroundNodeHeight(x + 1,nY,z);            if (nnY == 0) {              r.add(new AStarNode(x + 1,nY,z + dz,dist + 2,node));            }            nnY=getGroundNodeHeight(x - 1,nY,z);            if (nnY == 0) {              r.add(new AStarNode(x - 1,nY,z + dz,dist + 2,node));            }          }        }      } else {        nY=getGroundNodeHeight(x + dx,y,z);        if (nY > 0) {          r.add(new AStarNode(x + dx,nY,z,dist + 1,node));          if (stairs) {            r.add(new AStarNode(x + dx,nY,z + 1,dist + 2,node));            r.add(new AStarNode(x + dx,nY,z - 1,dist + 2,node));          } else {            int nnY=getGroundNodeHeight(x,nY,z + 1);            if (nnY == 0) {              r.add(new AStarNode(x + dx,nY,z + 1,dist + 2,node));            }            nnY=getGroundNodeHeight(x,nY,z - 1);            if (nnY == 0) {              r.add(new AStarNode(x + dx,nY,z - 1,dist + 2,node));            }          }        }      }    }  } else {    for (    int[] offset : neighbourOffsets) {      int nY=getGroundNodeHeight(x + offset[0],y,z + offset[1]);      if (nY > 0) {        r.add(new AStarNode(x + offset[0],nY,z + offset[1],nY,node));      }    }  }  return r;}  }
class C{  @Override public void addArtificialLinks(Network network){  Map<Tuple<Id<Node>,Id<Node>>,Link> existingLinks=new HashMap<>();  for (  Link l : network.getLinks().values()) {    existingLinks.put(new Tuple<>(l.getFromNode().getId(),l.getToNode().getId()),l);  }  for (  ArtificialLink a : necessaryArtificialLinks) {    Tuple<Id<Node>,Id<Node>> key=new Tuple<>(a.getFromNodeId(),a.getToNodeId());    Link existingLink=existingLinks.get(key);    if (existingLink == null) {      String newLinkIdStr=config.getPrefixArtificial() + artificialId++;      Id<Node> fromNodeId=a.getFromNodeId();      Node fromNode;      Id<Node> toNodeId=a.getToNodeId();      Node toNode;      if (!network.getNodes().containsKey(fromNodeId)) {        fromNode=network.getFactory().createNode(fromNodeId,a.getFromNodeCoord());        network.addNode(fromNode);      } else {        fromNode=network.getNodes().get(fromNodeId);      }      if (!network.getNodes().containsKey(toNodeId)) {        toNode=network.getFactory().createNode(toNodeId,a.getToNodeCoord());        network.addNode(toNode);      } else {        toNode=network.getNodes().get(toNodeId);      }      Link newLink=network.getFactory().createLink(Id.createLinkId(newLinkIdStr),fromNode,toNode);      newLink.setAllowedModes(a.getAllowedModes());      newLink.setLength(a.getLength());      newLink.setFreespeed(a.getFreespeed());      newLink.setCapacity(a.getCapacity());      network.addLink(newLink);      existingLinks.put(new Tuple<>(fromNodeId,toNodeId),newLink);    }  }}  }
class C{  public Employee(){}  }
class C{  public static Paint newBoarderPaint(float size,int color){  final Paint paint=new Paint();  paint.setAntiAlias(true);  paint.setColor(color);  paint.setStrokeWidth(size);  paint.setStyle(Paint.Style.STROKE);  return paint;}  }
class C{  private void deleteAckedMessages(){  for (  String id : this.ackedMessageIds) {    if (this.hasMessage(id) && !isSending(id)) {      this.deleteMessage(id,false);    }  }}  }
class C{  public static boolean isEmpty(String str){  if (str == null || str.length() == 0 || str.equalsIgnoreCase("null") || str.isEmpty() || str.equals("")) {    return true;  } else {    return false;  }}  }
class C{  protected void loadFrameInformation(RpfTocEntry rpfTocEntry){  try {    if (binFile == null && aTocFilePath != null) {      binFile=new BinaryBufferedFile(aTocFilePath);      binFile.byteOrder(aTocByteOrder);      readFrameInformation(binFile,rpfTocEntry);      binFile.close();      binFile=null;    }  } catch (  IOException ioe) {    Debug.error("RpfTocHandler: IO ERROR parsing file for frame information!\n\t" + ioe);  }catch (  FormatException fe) {    Debug.error("RpfTocHandler: Format ERROR parsing file for frame information!\n\t" + fe);  }}  }
class C{  public byte[] encode(){  char type=getAttributeType();  byte binValue[]=new byte[HEADER_LENGTH + getDataLength()];  binValue[0]=(byte)(type >> 8);  binValue[1]=(byte)(type & 0x00FF);  binValue[2]=(byte)(getDataLength() >> 8);  binValue[3]=(byte)(getDataLength() & 0x00FF);  return binValue;}  }
class C{  @SuppressWarnings({"unchecked"}) public <VV>EntryStream<K,VV> selectValues(Class<VV> clazz){  return (EntryStream<K,VV>)filter(null);}  }
class C{  protected void afterHide(){}  }
class C{  @Override public Pair<OperandSize,String> generate(final ITranslationEnvironment environment,final long offset,final List<ReilInstruction> instructions) throws InternalTranslationException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(instructions,"Error: Argument instructions can't be null");  Preconditions.checkArgument(offset >= 0,"Error: Argument offset can't be less than 0");  return new Pair<OperandSize,String>(OperandSize.BYTE,Helpers.ZERO_FLAG);}  }
class C{  public void select(int index){  setFocusIndex(index);  repaint(PAINT_FOCUS);  selectItem(index);}  }
class C{  public static <T>Promise<T> error(final Throwable throwable){  return from(Observable.<T>error(throwable));}  }
class C{  public void findEndBlock() throws IOException {  try {    String token;    do {      token=readToken(";");    } while (!token.equalsIgnoreCase("END") && !token.equalsIgnoreCase("ENDBLOCK"));  } catch (  EOFException e) {  }  nextBlock=UNKNOWN_BLOCK;}  }
class C{  public void rollbackMethodNull(String stepId) throws WorkflowException {  WorkflowStepCompleter.stepSucceded(stepId);}  }
class C{  public synchronized void ensureWatcher(){  if (poller == null) {    poller=new CloudDebugGlobalPoller();    poller.addListener(this);    poller.startBackgroundListening();  }}  }
class C{  @Override public int hashCode(){  return id;}  }
class C{  public static String remove(String source,String searchFor){  return StringUtils.replace(source,searchFor,"");}  }
class C{  public HtmlCode addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public int compareTo(DebugOffset other){  long a=(((long)lineNumber) << 32) | byteOffset;  long b=(((long)other.lineNumber) << 32) | other.byteOffset;  if (a < b)   return -1; else   if (a > b)   return 1; else   return 0;}  }
class C{  @Override public void visit(Tree.AttributeDeclaration that){  if (!isNativeHeader(that.getDeclarationModel()))   return;  if (errorFree(that)) {    gen.encodeAttributeOrGetter(that.getDeclarationModel());    super.visit(that);  }}  }
class C{  public static void linkResultDirectedEdges(Collection nodes){  for (Iterator nodeit=nodes.iterator(); nodeit.hasNext(); ) {    Node node=(Node)nodeit.next();    ((DirectedEdgeStar)node.getEdges()).linkResultDirectedEdges();  }}  }
class C{  private void push(JSONObject jo) throws JSONException {  if (this.top >= maxdepth) {    throw new JSONException("Nesting too deep.");  }  this.stack[this.top]=jo;  this.mode=jo == null ? 'a' : 'k';  this.top+=1;}  }
class C{  public static String toString(Object o,String defaultValue){  return toString(o,true,defaultValue);}  }
class C{  @Override public void onSlotChangedRemoved(final RPObject object,final String slotName,final RPObject sobject,final RPObject schanges){}  }
class C{  public byte[] evaluateChallenge(byte[] challengeData) throws SaslException {  if (challengeData.length > MAX_CHALLENGE_LENGTH) {    throw new SaslException("DIGEST-MD5: Invalid digest-challenge length. Got:  " + challengeData.length + " Expected < "+ MAX_CHALLENGE_LENGTH);  }  byte[][] challengeVal;switch (step) {case 2:    List<byte[]> realmChoices=new ArrayList<byte[]>(3);  challengeVal=parseDirectives(challengeData,DIRECTIVE_KEY,realmChoices,REALM);try {  processChallenge(challengeVal,realmChoices);  checkQopSupport(challengeVal[QOP],challengeVal[CIPHER]);  ++step;  return generateClientResponse(challengeVal[CHARSET]);} catch (SaslException e) {  step=0;  clearPassword();  throw e;}catch (IOException e) {  step=0;  clearPassword();  throw new SaslException("DIGEST-MD5: Error generating " + "digest response-value",e);}case 3:try {challengeVal=parseDirectives(challengeData,DIRECTIVE_KEY,null,REALM);validateResponseValue(challengeVal[RESPONSE_AUTH]);if (integrity && privacy) {  secCtx=new DigestPrivacy(true);} else if (integrity) {  secCtx=new DigestIntegrity(true);}return null;}  finally {clearPassword();step=0;completed=true;}default :throw new SaslException("DIGEST-MD5: Client at illegal state");}}  }
class C{  public Blade routeConf(String basePackage,String conf){  try {    Assert.notBlank(basePackage);    Assert.notBlank(conf);    InputStream ins=Blade.class.getResourceAsStream("/" + conf);    ClassPathRouteLoader routesLoader=new ClassPathRouteLoader(ins);    routesLoader.setBasePackage(basePackage);    List<Route> routes=routesLoader.load();    routers.addRoutes(routes);  } catch (  RouteException e) {    e.printStackTrace();  }catch (  ParseException e) {    e.printStackTrace();  }  return this;}  }
class C{  @Override public void onAction(final Player player,final RPAction action){  if (action.has(REASON)) {    player.setGrumpyMessage(action.get(REASON));  } else {    player.setGrumpyMessage(null);  }  player.notifyWorldAboutChanges();}  }
class C{  public void addNodesInDocOrder(NodeList nodelist,XPathContext support){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));  int nChildren=nodelist.getLength();  for (int i=0; i < nChildren; i++) {    Node node=nodelist.item(i);    if (null != node) {      addNodeInDocOrder(node,support);    }  }}  }
class C{  public Long deleteFileOrFolderByExternalIdAndType(String SID,Long externalFilesid,String externalType) throws AxisFault {  try {    Long users_id=sessionManagement.checkSession(SID);    Long User_level=userManagement.getUserLevelByID(users_id);    if (authLevelManagement.checkWebServiceLevel(User_level)) {      fileExplorerItemDao.deleteFileExplorerItemByExternalIdAndType(externalFilesid,externalType);    }  } catch (  Exception err) {    log.error("[deleteFileOrFolderByExternalIdAndType]",err);  }  return null;}  }
class C{  public static SampleField parseSampleLine(String line){  return new SampleField(line);}  }
class C{  public static boolean isDarculaAvailable(){  try {    Class.forName(DARCULA_LAF_CLASS);    if (JavaVersion.getJreVersion().isAtLeast(JavaVersion.JRE_VERSION_170)) {      return true;    }  } catch (  ClassNotFoundException e) {  }  return false;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:33.673 -0500",hash_original_method="4EEE31555E188404F99AA8E4E9247689",hash_generated_method="D9055B18C19E5B672900C34B338EABA1") private void offsetChildrenLeftAndRight(int offset){  for (int i=getChildCount() - 1; i >= 0; i--) {    getChildAt(i).offsetLeftAndRight(offset);  }}  }
class C{  public void addBottomResourceBundle(InternalRbmWrapper topInternalRbmWrapper){  this.rbmwStack.addToBottom(topInternalRbmWrapper);}  }
class C{  @DSComment("No action/impact") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:33.053 -0500",hash_original_method="EA60532C802B6FAE0DE9014BA74F497F",hash_generated_method="4D5EC13FAA0FD03AE14A617945F59CAE") @Override public void close() throws IOException {  if (!closed) {    inf.end();    closed=true;    eof=true;    super.close();  }}  }
class C{  @Override public void run(){  amIActive=true;  String outputHeader=null;  WhiteboxRaster image=null;  WhiteboxRaster output=null;  int row, col;  int nRows, nCols;  double z;  int progress=0;  int i, a;  double noData=-32768;  double outputNoData=-32768;  String inputDataString=null;  int numImages=0;  double sumOfWeights=0;  double d=0;  double weight=0;  double scaleMin=0;  double scaleMax=1;  double imageMin=0;  double imageMax=1;  double imageRange=1;  double[] data=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String[] dataSplit=args[0].split(";");  String[] constraints=args[1].split(";");  outputHeader=args[2];  String commonScale=args[3];  if (commonScale.equals("0-1")) {    scaleMin=0;    scaleMax=1;  } else   if (commonScale.equals("0-100")) {    scaleMin=0;    scaleMax=100;  } else   if (commonScale.equals("0-255")) {    scaleMin=0;    scaleMax=255;  }  if (outputHeader == null) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ArrayList<Boolean> costFactor=new ArrayList<Boolean>();    ArrayList<String> imageFiles=new ArrayList<String>();    ArrayList<Double> weights=new ArrayList<Double>();    for (a=0; a < dataSplit.length; a+=3) {      if (!dataSplit[a + 1].trim().equals("") && !dataSplit[a].trim().toLowerCase().equals("not specified")) {        costFactor.add(Boolean.parseBoolean(dataSplit[a]));        imageFiles.add(dataSplit[a + 1].trim());        weights.add(Double.parseDouble(dataSplit[a + 2]));        sumOfWeights+=weights.get(numImages);        numImages++;      }    }    if (numImages < 2) {      showFeedback("At least two factor images must be specified.");      return;    }    for (a=0; a < numImages; a++) {      d=weights.get(a) / sumOfWeights;      weights.set(a,d);    }    image=new WhiteboxRaster(imageFiles.get(0),"r");    nRows=image.getNumberRows();    nCols=image.getNumberColumns();    outputNoData=image.getNoDataValue();    output=new WhiteboxRaster(outputHeader,"rw",imageFiles.get(0),WhiteboxRaster.DataType.FLOAT,0);    for (i=0; i < numImages; i++) {      progress=(int)(100f * (i + 1) / numImages);      updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      weight=weights.get(i);      if (i > 0) {        image=new WhiteboxRaster(imageFiles.get(i),"r");        noData=image.getNoDataValue();        if (image.getNumberRows() != nRows || image.getNumberColumns() != nCols) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }      }      imageMin=image.getMinimumValue();      imageMax=image.getMaximumValue();      imageRange=imageMax - imageMin;      Boolean boolCost=costFactor.get(i);      for (row=0; row < nRows; row++) {        data=image.getRowValues(row);        for (col=0; col < nCols; col++) {          if (data[col] != noData) {            z=output.getValue(row,col);            if (z != outputNoData) {              if (!boolCost) {                d=(data[col] - imageMin) / imageRange * scaleMax;                output.setValue(row,col,z + d * weight);              } else {                d=(1 - (data[col] - imageMin) / imageRange) * scaleMax;                output.setValue(row,col,z + d * weight);              }            }          } else {            output.setValue(row,col,outputNoData);          }        }        if (cancelOp) {          cancelOperation();          return;        }      }      image.close();    }    for (i=0; i < constraints.length; i++) {      image=new WhiteboxRaster(constraints[i].trim(),"r");      noData=image.getNoDataValue();      if (image.getNumberRows() != nRows || image.getNumberColumns() != nCols) {        showFeedback("All input images must have the same dimensions (rows and columns).");        return;      }      for (row=0; row < nRows; row++) {        data=image.getRowValues(row);        for (col=0; col < nCols; col++) {          if (data[col] != noData && data[col] <= 0) {            if (output.getValue(row,col) != outputNoData) {              output.setValue(row,col,scaleMin);            }          } else {            output.setValue(row,col,outputNoData);          }        }        if (cancelOp) {          cancelOperation();          return;        }      }      image.close();    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private int coordinateToIndex(int x,int z,int y){  if (x < 0 || z < 0 || y < 0 || x >= WIDTH || z >= HEIGHT || y >= DEPTH)   throw new IndexOutOfBoundsException("Coords (x=" + x + ",y="+ y+ ",z="+ z+ ") invalid");  return (y * HEIGHT + z) * WIDTH + x;}  }
class C{  public TransferEntropyCalculatorKraskov(String calculatorName) throws InstantiationException, IllegalAccessException, ClassNotFoundException {  super(calculatorName);  if (calculatorName.equalsIgnoreCase(COND_MI_CALCULATOR_KRASKOV1)) {    kraskovAlgorithmNumber=1;  } else   if (calculatorName.equalsIgnoreCase(COND_MI_CALCULATOR_KRASKOV2)) {    kraskovAlgorithmNumber=2;  } else {    throw new ClassNotFoundException("Must be an underlying Kraskov-Grassberger conditional MI calculator");  }  props=new Hashtable<String,String>();}  }
class C{  public static Number floor(Number a){  if (isFloatingPoint(a)) {    return Math.floor(a.doubleValue());  } else {    return a.longValue();  }}  }
class C{  @Xpect @ParameterParser(syntax="('at' arg1=OFFSET)?") public void binding(@CommaSeparatedValuesExpectation ICommaSeparatedValuesExpectation expectation,ICrossEReferenceAndEObject arg1){  EObject eobj=arg1.getEObject();  ParameterizedPropertyAccessExpression ppae=EcoreUtil2.getContainerOfType(eobj,ParameterizedPropertyAccessExpression.class);  IdentifiableElement element;  if (ppae != null) {    element=ppae.getProperty();  } else   if (eobj instanceof IdentifiableElement) {    element=(IdentifiableElement)eobj;  } else {    throw new IllegalArgumentException("Cannot check binding for " + (eobj == null ? "null" : eobj.eClass().getName()));  }  String container="";  if (element instanceof TMember) {    container=((TMember)element).getContainingType().getName() + ".";  }  final String qn=container + element.getName();  expectation.assertEquals(Collections.singleton(qn));}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public DefRoot createDefRoot(){  DefRootImpl defRoot=new DefRootImpl();  return defRoot;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public void jumpToCurrentLocation(){  if (!topmostLayer.isVisible()) {    Log.i(TAG,"Location marker is not visible. Jump to current location skipped");    return;  }  PositionMarker pin=(PositionMarker)topmostLayer.getMapObject(POS_PIN_ID);  Point tempPoint=(pin.getPosition());  jumpTo(tempPoint);}  }
class C{  public static CharSequence partialEscape(CharSequence s){  StringBuilder sb=new StringBuilder();  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);    if (c == '\\' || c == '!' || c == '(' || c == ')' || c == ':' || c == '^' || c == '[' || c == ']' || c == '/' || c == '{' || c == '}' || c == '~' || c == '*' || c == '?') {      sb.append('\\');    }    sb.append(c);  }  return sb;}  }
class C{  public JsonMapper(Gson compact,Gson pretty,Gson compactSensitive,Gson prettySensitive){  this.compact=compact;  this.pretty=pretty;  this.compactSensitive=compactSensitive;  this.prettySensitive=prettySensitive;}  }
class C{  public void addInvoiceFact(MFactAcct fact){  m_facts.add(fact);}  }
class C{  public int size(){  return all.size();}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  if (null != m_template) {    XPathContext xctxt=transformer.getXPathContext();    VariableStack vars=xctxt.getVarStack();    int thisframe=vars.getStackFrame();    int nextFrame=vars.link(m_template.m_frameSize);    if (m_template.m_inArgsSize > 0) {      vars.clearLocalSlots(0,m_template.m_inArgsSize);      if (null != m_paramElems) {        int currentNode=xctxt.getCurrentNode();        vars.setStackFrame(thisframe);        int size=m_paramElems.length;        for (int i=0; i < size; i++) {          ElemWithParam ewp=m_paramElems[i];          if (ewp.m_index >= 0) {            XObject obj=ewp.getValue(transformer,currentNode);            vars.setLocalVariable(ewp.m_index,obj,nextFrame);          }        }        vars.setStackFrame(nextFrame);      }    }    SourceLocator savedLocator=xctxt.getSAXLocator();    try {      xctxt.setSAXLocator(m_template);      transformer.pushElemTemplateElement(m_template);      m_template.execute(transformer);    }  finally {      transformer.popElemTemplateElement();      xctxt.setSAXLocator(savedLocator);      vars.unlink(thisframe);    }  } else {    transformer.getMsgMgr().error(this,XSLTErrorResources.ER_TEMPLATE_NOT_FOUND,new Object[]{m_templateName});  }}  }
class C{  private boolean validAction(String action){  for (int i=0; i < ACTIONS.length; i++) {    if (ACTIONS[i].equals(action)) {      m_actionIndex=i;      return true;    }  }  return false;}  }
class C{  @Override public IList listValue(final IScope scope,final IType contentType,final boolean copy){  return GamaListFactory.createWithoutCasting(contentType,contentType.cast(scope,key,null,copy),contentType.cast(scope,value,null,copy));}  }
class C{  @Override protected void firePropertyChange(String propertyName,Object oldValue,Object newValue){  if (propertyName == "text" || ((propertyName == "font" || propertyName == "foreground") && oldValue != newValue && getClientProperty(javax.swing.plaf.basic.BasicHTML.propertyKey) != null)) {    super.firePropertyChange(propertyName,oldValue,newValue);  }}  }
class C{  public static void liftingFromBottom(View view,float baseRotation,float fromY,int duration,int startDelay){  ViewHelper.setRotationX(view,baseRotation);  ViewHelper.setTranslationY(view,fromY);  ViewPropertyAnimator.animate(view).setInterpolator(new AccelerateDecelerateInterpolator()).setDuration(duration).setStartDelay(startDelay).rotationX(0).translationY(0).start();}  }
class C{  public static String moduleWithFocus(){  TLAEditor editor=getTLAEditorWithFocus();  IFile file=((FileEditorInput)editor.getEditorInput()).getFile();  String name=ResourceHelper.getModuleName(file);  return name;}  }
class C{  public AccountHeaderBuilder withSelectionFirstLineShown(boolean selectionFirstLineShown){  this.mSelectionFirstLineShown=selectionFirstLineShown;  return this;}  }
class C{  public void newCluster(int i,GeneratorInterface curclus){}  }
class C{  public JSONArray(){  super();}  }
class C{  public String convertToIso8601(long time){  TimeZone tz=TimeZone.getTimeZone("UTC");  DateFormat df=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'");  df.setTimeZone(tz);  return df.format(time);}  }
class C{  public State(PlotRenderingInfo info){  super(info);}  }
class C{  private void initMediaPlayerVolume(){  AudioManager audioManager=(AudioManager)this.getSystemService(Context.AUDIO_SERVICE);  int maxVol=audioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC);  int minValue=firstCallAlert ? FIRST_PERCENT_VOLUME : DEFAULT_PERCENT_VOLUME;  int ratio=(audioManager.getStreamVolume(AudioManager.STREAM_MUSIC) * 100) / maxVol;  firstCallAlert=false;  if (ratio < minValue) {    setMediaPlayerVolume(minValue);  } else {    setMediaPlayerVolume(ratio);  }}  }
class C{  Authenticator(){  block=new byte[0];}  }
class C{  public void computePackageFragmentRoots(IClasspathEntry[] resolvedClasspath,ObjectVector accumulatedRoots,HashSet rootIDs,IClasspathEntry referringEntry,boolean retrieveExportedRoots,Map rootToResolvedEntries) throws JavaModelException {  if (referringEntry == null) {    rootIDs.add(rootID());  }  for (int i=0, length=resolvedClasspath.length; i < length; i++) {    computePackageFragmentRoots(resolvedClasspath[i],accumulatedRoots,rootIDs,referringEntry,retrieveExportedRoots,rootToResolvedEntries);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentgetelementsbytagnameNS05.class,args);}  }
class C{  public long numBits(){  if (n == 0)   return 0;  return offsets.numBits() + lcpLengths.numBits() + lcp2Bucket.numBits()+ transform.numBits();}  }
class C{  private void configureForCallInfoTextMessage(final ConversationViewHolder convViewHolder,final Conversation.ConversationElement convElement){  if (convViewHolder == null || mContext == null || convElement == null || convElement.call == null) {    return;  }  int pictureResID;  String histTxt;  String callNumber=CallContact.Phone.getShortenedNumber(convElement.call.number);  convViewHolder.mPhoto.setScaleY(1);  if (convElement.call.isMissed()) {    if (convElement.call.isIncoming()) {      pictureResID=R.drawable.ic_call_missed_black_24dp;    } else {      pictureResID=R.drawable.ic_call_missed_outgoing_black_24dp;      convViewHolder.mPhoto.setScaleY(-1);    }    histTxt=convElement.call.isIncoming() ? mContext.getString(R.string.notif_missed_incoming_call,callNumber) : mContext.getString(R.string.notif_missed_outgoing_call,callNumber);  } else {    pictureResID=(convElement.call.isIncoming()) ? R.drawable.ic_call_received_black_24dp : R.drawable.ic_call_made_black_24dp;    histTxt=convElement.call.isIncoming() ? mContext.getString(R.string.notif_incoming_call_title,callNumber) : mContext.getString(R.string.notif_outgoing_call_title,callNumber);  }  convViewHolder.mCid=convElement.call.getContactID();  convViewHolder.mPhoto.setImageResource(pictureResID);  convViewHolder.mHistTxt.setText(histTxt);  convViewHolder.mHistDetailTxt.setText(DateFormat.getDateTimeInstance().format(convElement.call.getStartDate()));}  }
class C{  public Filter createFilter(BridgeContext ctx,Element filterElement,Element filteredElement,GraphicsNode filteredNode,Filter inputFilter,Rectangle2D filterRegion,Map filterMap){  String uriStr=XLinkSupport.getXLinkHref(filterElement);  if (uriStr.length() == 0) {    throw new BridgeException(ctx,filterElement,ERR_ATTRIBUTE_MISSING,new Object[]{"xlink:href"});  }  Document document=filterElement.getOwnerDocument();  boolean isUse=uriStr.indexOf('#') != -1;  Element contentElement=null;  if (isUse) {    contentElement=document.createElementNS(SVG_NAMESPACE_URI,SVG_USE_TAG);  } else {    contentElement=document.createElementNS(SVG_NAMESPACE_URI,SVG_IMAGE_TAG);  }  contentElement.setAttributeNS(XLINK_NAMESPACE_URI,XLINK_HREF_QNAME,uriStr);  Element proxyElement=document.createElementNS(SVG_NAMESPACE_URI,SVG_G_TAG);  proxyElement.appendChild(contentElement);  Rectangle2D defaultRegion=filterRegion;  Element filterDefElement=(Element)(filterElement.getParentNode());  Rectangle2D primitiveRegion=SVGUtilities.getBaseFilterPrimitiveRegion(filterElement,filteredElement,filteredNode,defaultRegion,ctx);  contentElement.setAttributeNS(null,SVG_X_ATTRIBUTE,String.valueOf(primitiveRegion.getX()));  contentElement.setAttributeNS(null,SVG_Y_ATTRIBUTE,String.valueOf(primitiveRegion.getY()));  contentElement.setAttributeNS(null,SVG_WIDTH_ATTRIBUTE,String.valueOf(primitiveRegion.getWidth()));  contentElement.setAttributeNS(null,SVG_HEIGHT_ATTRIBUTE,String.valueOf(primitiveRegion.getHeight()));  GraphicsNode node=ctx.getGVTBuilder().build(ctx,proxyElement);  Filter filter=node.getGraphicsNodeRable(true);  short coordSystemType;  String s=SVGUtilities.getChainableAttributeNS(filterDefElement,null,SVG_PRIMITIVE_UNITS_ATTRIBUTE,ctx);  if (s.length() == 0) {    coordSystemType=SVGUtilities.USER_SPACE_ON_USE;  } else {    coordSystemType=SVGUtilities.parseCoordinateSystem(filterDefElement,SVG_PRIMITIVE_UNITS_ATTRIBUTE,s,ctx);  }  AffineTransform at=new AffineTransform();  if (coordSystemType == SVGUtilities.OBJECT_BOUNDING_BOX) {    at=SVGUtilities.toObjectBBox(at,filteredNode);  }  filter=new AffineRable8Bit(filter,at);  handleColorInterpolationFilters(filter,filterElement);  Rectangle2D primitiveRegionUserSpace=SVGUtilities.convertFilterPrimitiveRegion(filterElement,filteredElement,filteredNode,defaultRegion,filterRegion,ctx);  filter=new PadRable8Bit(filter,primitiveRegionUserSpace,PadMode.ZERO_PAD);  updateFilterMap(filterElement,filter,filterMap);  return filter;}  }
class C{  private static String _process_and_sort(String s,Boolean force_ascii){  list<String> tokens=x.String(full_process(s,force_ascii)).split();  String sorted_string=x.String(" ").join(x.sort(tokens));  return sorted_string.trim();}  }
class C{  public SimpleStringProperty scriptProperty(){  return this.script;}  }
class C{  private void stopRecording(){  if (DEBUG)   Log.v(TAG,"stopRecording:mMuxer=" + mMuxer);  mRecordButton.setColorFilter(0);  if (mMuxer != null) {    mMuxer.stopRecording();    mMuxer=null;  }}  }
class C{  public void testAuditCrashed(){  AuditServiceImpl instance=initialiseAuditService();  Audit mockAudit=EasyMock.createMock(Audit.class);  Exception mockException=EasyMock.createMock(Exception.class);  AuditServiceListener mockAuditServiceListener=EasyMock.createMock(AuditServiceListener.class);  mockAuditServiceListener.auditCrashed(mockAudit,mockException);  EasyMock.expectLastCall().anyTimes();  EasyMock.replay(mockAuditServiceListener);  EasyMock.replay(mockAudit);  EasyMock.replay(mockException);  instance.add(mockAuditServiceListener);  instance.auditCrashed(mockAudit,mockException);  EasyMock.verify(mockAudit);  EasyMock.verify(mockAuditServiceListener);  EasyMock.verify(mockException);}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  if (evt.getPropertyName().equals("KnownState")) {    Sensor s=(Sensor)evt.getSource();    Enumeration<NamedBeanHandle<Sensor>> en=indication.keys();    while (en.hasMoreElements()) {      NamedBeanHandle<Sensor> namedSensor=en.nextElement();      if (namedSensor.getBean() == s) {        Route r=indication.get(namedSensor);        String message="PRA" + s.getKnownState() + r.getSystemName();        for (        ControllerInterface listener : listeners) {          listener.sendPacketToDevice(message);        }        return;      }    }  }}  }
class C{  public <T>void addToRequestQueue(Request<T> req,String tag){  req.setTag(TextUtils.isEmpty(tag) ? TAG : tag);  getRequestQueue().add(req);}  }
class C{  static String valueToString(Object value) throws JSONException {  if (value == null) {    return "null";  }  if (value instanceof Number) {    return numberToString((Number)value);  }  if (value instanceof Boolean || value instanceof JSONObject || value instanceof JSONArray) {    return value.toString();  }  return quote(value.toString());}  }
class C{  public byte[] generateMwk(SecretKey mwkdes3){  byte[] zeros={0,0,0,0,0,0,0,0};  byte[] random=new byte[8];  Random ran=new Random();  ran.nextBytes(random);  Cipher cipher=this.getCipher(mwkdes3,Cipher.ENCRYPT_MODE);  byte[] encryptedZeros=new byte[0];  try {    encryptedZeros=cipher.doFinal(zeros);  } catch (  IllegalStateException e) {    Debug.logError(e,module);  }catch (  IllegalBlockSizeException e) {    Debug.logError(e,module);  }catch (  BadPaddingException e) {    Debug.logError(e,module);  }  byte[] newMwk=copyBytes(mwkdes3.getEncoded(),encryptedZeros,0);  newMwk=copyBytes(random,newMwk,0);  if (debug) {    Debug.logInfo("Random 8 byte : " + StringUtil.toHexString(random),module);    Debug.logInfo("Encrypted 0's : " + StringUtil.toHexString(encryptedZeros),module);    Debug.logInfo("Decrypted MWK : " + StringUtil.toHexString(mwkdes3.getEncoded()) + " / "+ mwkdes3.getEncoded().length,module);    Debug.logInfo("Encrypted MWK : " + StringUtil.toHexString(newMwk) + " / "+ newMwk.length,module);  }  return newMwk;}  }
class C{  public static String credential(String accessKey,DateTime date,String region){  return accessKey + "/" + date.toString(DateFormat.SIGNER_DATE_FORMAT)+ "/"+ region+ "/s3/aws4_request";}  }
class C{  public static byte[] decodeWebSafe(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decodeWebSafe(bytes,0,bytes.length);}  }
class C{  public static void wait(Object obj){synchronized (obj) {    try {      obj.wait();    } catch (    InterruptedException inex) {    }  }}  }
class C{  public static String parseSegmentName(String filename){  int idx=indexOfSegmentName(filename);  if (idx != -1) {    filename=filename.substring(0,idx);  }  return filename;}  }
class C{  protected Collection createCollectionFromHint(Object collectionTypeHint){  Class<? extends Collection> collectionType;  if (collectionTypeHint instanceof Class) {    collectionType=(Class<? extends Collection>)collectionTypeHint;  } else   if (collectionTypeHint instanceof String) {    try {      collectionType=Util.loadClass((String)collectionTypeHint,this);    } catch (    ClassNotFoundException cnfe) {      throw new FacesException(cnfe);    }  } else {    throw new FacesException("'collectionType' should resolve to type String or Class.  Found: " + collectionTypeHint.getClass().getName());  }  Collection c=createCollection(null,collectionType);  if (c == null) {    throw new FacesException("Unable to create collection type " + collectionType);  }  return c;}  }
class C{  public html(Element value){  setElementType("html");  addElement(value);}  }
class C{  public static void removeClusterFromHost(DbClient dbClient,Host host){  List<Initiator> initiators=ComputeSystemHelper.queryInitiators(dbClient,host.getId());  for (  Initiator initiator : initiators) {    initiator.setClusterName("");    dbClient.persistObject(initiator);  }  host.setCluster(NullColumnValueGetter.getNullURI());  dbClient.persistObject(host);}  }
class C{  public Ray(Vector2 start,Vector2 direction){  if (start == null)   throw new NullPointerException(Messages.getString("geometry.ray.nullStart"));  if (direction == null)   throw new NullPointerException(Messages.getString("geometry.ray.nullDirection"));  if (direction.isZero())   throw new IllegalArgumentException(Messages.getString("geometry.ray.zeroDirection"));  this.start=start;  this.direction=direction;}  }
class C{  public static Object instantiateObject(Class<?> clazz,Object... arguments) throws InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchMethodException {  return getConstructor(clazz,DataType.getPrimitive(arguments)).newInstance(arguments);}  }
class C{  public int cellToOffset(int row,int col){  return table.cellToOffset(row,col);}  }
class C{  protected JvmCompilationMeta createJvmCompilationMetaNode(String groupName,String groupOid,ObjectName groupObjname,MBeanServer server){  if (ManagementFactory.getCompilationMXBean() == null)   return null;  return super.createJvmCompilationMetaNode(groupName,groupOid,groupObjname,server);}  }
class C{  private void writeAsArrayList(List list,DataOutput out) throws IOException {  int size;  if (list == null) {    size=-1;  } else {    size=list.size();  }  InternalDataSerializer.writeArrayLength(size,out);  if (size > 0) {    for (int i=0; i < size; i++) {      DataSerializer.writeObject(list.get(i),out);    }  }}  }
class C{  public static final long transfer(InputStream in,File file) throws IOException {  FileOutputStream out=new FileOutputStream(file);  try {    return transfer(in,out);  }  finally {    out.close();  }}  }
class C{  void putChannel(final StoredClientChannel channel){  putChannel(channel,true);}  }
class C{  public void generateOptimizedLogicalXor(BlockScope currentScope,BranchLabel trueLabel,BranchLabel falseLabel,boolean valueRequired){  Constant condConst;  if ((this.left.implicitConversion & TypeIds.COMPILE_TYPE_MASK) == TypeIds.T_boolean) {    if ((condConst=this.left.optimizedBooleanConstant()) != Constant.NotAConstant) {      if (condConst.booleanValue() == true) {        this.left.generateOptimizedBoolean(currentScope,trueLabel,falseLabel,false);        this.right.generateOptimizedBoolean(currentScope,falseLabel,trueLabel,valueRequired);      } else {        this.left.generateOptimizedBoolean(currentScope,trueLabel,falseLabel,false);        this.right.generateOptimizedBoolean(currentScope,trueLabel,falseLabel,valueRequired);      }      return;    }    if ((condConst=this.right.optimizedBooleanConstant()) != Constant.NotAConstant) {      if (condConst.booleanValue() == true) {        this.left.generateOptimizedBoolean(currentScope,falseLabel,trueLabel,valueRequired);        this.right.generateOptimizedBoolean(currentScope,trueLabel,falseLabel,false);      } else {        this.left.generateOptimizedBoolean(currentScope,trueLabel,falseLabel,valueRequired);        this.right.generateOptimizedBoolean(currentScope,trueLabel,falseLabel,false);      }      return;    }  }  this.left.generateCode(currentScope,valueRequired);  this.right.generateCode(currentScope,valueRequired);}  }
class C{  protected void dynamicAddSkinEnableView(View view,String attrName,int attrValueResId){  mSkinInflaterFactory.dynamicAddSkinEnableView(this,view,attrName,attrValueResId);}  }
class C{  public static Builder builder(){  return new Builder();}  }
class C{  public void testCreateDocumentType1() throws Throwable {  Document doc;  DOMImplementation domImpl;  DocumentType newDocType;  Document ownerDocument;  String qualifiedName="test:root";  String publicId;  String systemId;  List<String> publicIds=new ArrayList<String>();  publicIds.add("1234");  publicIds.add("test");  List<String> systemIds=new ArrayList<String>();  systemIds.add("");  systemIds.add("test");  doc=(Document)load("staffNS",builder);  domImpl=doc.getImplementation();  for (int indexN1005D=0; indexN1005D < publicIds.size(); indexN1005D++) {    publicId=(String)publicIds.get(indexN1005D);    for (int indexN10061=0; indexN10061 < systemIds.size(); indexN10061++) {      systemId=(String)systemIds.get(indexN10061);      newDocType=domImpl.createDocumentType(qualifiedName,publicId,systemId);      assertNotNull("domimplementationcreatedocumenttype01_newDocType",newDocType);      ownerDocument=newDocType.getOwnerDocument();      assertNull("domimplementationcreatedocumenttype01_ownerDocument",ownerDocument);    }  }}  }
class C{  @Override protected void finishUp(){  super.finishUp();  if (!m_SaveForVisualization) {    return;  }  if (m_Instances.classAttribute().isNumeric() || m_pointSizeProportionalToMargin) {    scaleNumericPredictions();  }  if (m_Instances.attribute(m_ClassIndex).isNumeric()) {    if (m_Classifier instanceof IntervalEstimator) {      addPredictionIntervals();    }  }}  }
class C{  public Boolean checkAnyTaxPendingForSelectedFinancialYear(final SewerageDemandConnection sewerageDemandConnection,final Installment installment){  Boolean pendingTaxCollection=false;  if (sewerageDemandConnection != null && sewerageDemandConnection.getDemand() != null)   for (  final EgDemandDetails demandDtl : sewerageDemandConnection.getDemand().getEgDemandDetails())   if (demandDtl.getEgDemandReason().getEgInstallmentMaster().getId().equals(installment.getId()) && demandDtl.getAmount().subtract(demandDtl.getAmtCollected()).compareTo(BigDecimal.ZERO) > 0) {    pendingTaxCollection=true;    break;  }  return pendingTaxCollection;}  }
class C{  @Override protected void basicInvalidate(final EntryEventImpl event,boolean invokeCallbacks,final boolean forceNewEntry) throws EntryNotFoundException {  Object key=event.getKey();  if (key instanceof Long) {    boolean removedFromAvID=false;    Conflatable conflatable=null;    try {      conflatable=(Conflatable)this.get(key);      removedFromAvID=!this.owningQueue.isPrimary() && this.owningQueue.destroyFromAvailableIDs((Long)key);    } catch (    InterruptedException ie) {      Thread.currentThread().interrupt();      getCancelCriterion().checkCancelInProgress(ie);      return;    }    if (!removedFromAvID) {      return;    }    if (conflatable instanceof HAEventWrapper) {      this.owningQueue.decAndRemoveFromHAContainer((HAEventWrapper)conflatable);    }    this.owningQueue.stats.incEventsExpired();  }  this.entries.invalidate(event,invokeCallbacks,forceNewEntry,false);  return;}  }
class C{  public final boolean isAbstract(){  return Modifier.isAbstract(getModifiers());}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.STATE_MACHINE___ENUM_1:    return ((InternalEList<?>)getEnum_1()).basicRemove(otherEnd,msgs);case UmplePackage.STATE_MACHINE___INLINE_STATE_MACHINE_1:  return ((InternalEList<?>)getInlineStateMachine_1()).basicRemove(otherEnd,msgs);case UmplePackage.STATE_MACHINE___REFERENCED_STATE_MACHINE_1:return ((InternalEList<?>)getReferencedStateMachine_1()).basicRemove(otherEnd,msgs);case UmplePackage.STATE_MACHINE___ACTIVE_DEFINITION_1:return ((InternalEList<?>)getActiveDefinition_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public boolean isCallsEnabled(){  return callsEnabled;}  }
class C{  protected Node newNode(){  return new SVGOMFEMergeNodeElement();}  }
class C{  public boolean isSOTrx(){  Object oo=get_Value(COLUMNNAME_IsSOTrx);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void add(int element){  for (int i=0; i < size; i++) {    if (reg[i] == element) {      count[i]++;      return;    }  }  reg[size]=element;  count[size]=1;  size++;}  }
class C{  public void onUnloaded(){}  }
class C{  @ObjectiveCName("changeVideoAutoDownloadEnabled:") public void changeVideoAutoDownloadEnabled(boolean val){  modules.getSettingsModule().setVideoAutoDownloadEnabled(val);}  }
class C{  public boolean add(Object e){synchronized (this) {    Object[] elements=getArray();    int len=elements.length;    Object[] newElements=copyOf(elements,len + 1);    newElements[len]=e;    setArray(newElements);  }  return true;}  }
class C{  @Override public void writeSolrDocument(String name,SolrDocument doc,ReturnFields returnFields,int idx) throws IOException {  startTag("doc",name,false);  incLevel();  for (  String fname : doc.getFieldNames()) {    if (!returnFields.wantsField(fname)) {      continue;    }    Object val=doc.getFieldValue(fname);    if ("_explain_".equals(fname)) {      System.out.println(val);    }    writeVal(fname,val);  }  if (doc.hasChildDocuments()) {    for (    SolrDocument childDoc : doc.getChildDocuments()) {      writeSolrDocument(null,childDoc,new SolrReturnFields(),idx);    }  }  decLevel();  writer.write("</doc>");}  }
class C{  public DCryptoStrength(JFrame parent) throws CryptoException {  super(parent,res.getString("DCryptoStrength.Title"),ModalityType.DOCUMENT_MODAL);  initComponents();}  }
class C{  public static void main(String[] args){  try {    run(System.out);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public ControlFlowAnchorNode(@SuppressWarnings("unused") Invoke invoke){  this();}  }
class C{  @Inline public void processRoots(){  logMessage(5,"processing delayed root objects");  while (!rootLocations.isEmpty()) {    processRootEdge(rootLocations.pop(),true);  }}  }
class C{  public void adjustValuesBelow(int startRow,int column,int delta){  if (((startRow | column) < 0) || (startRow > size()) || (column >= width())) {    throw new IndexOutOfBoundsException(startRow + ", " + column);  }  if (startRow >= mRowGapStart) {    startRow+=mRowGapLength;  }  moveValueGapTo(column,startRow);  mValueGap[column + mColumns]+=delta;}  }
class C{  @Override public void writeCV(int CV,int val,ProgListener p) throws ProgrammerException {  mSlotMgr.writeCVOpsMode(CV,val,p,mAddress,mLongAddr);}  }
class C{  public static void shutdown(){  try {    if (MPlayerMediator.instance() != null) {      try {        MPlayerMediator.instance().showPlayerWindow(false);      } catch (      Throwable t) {      }    }  } catch (  Throwable ignored) {  }  Finalizer.shutdown();}  }
class C{  public boolean hasForeignCall(){  return hasForeignCall;}  }
class C{  final public int d(){  return d;}  }
class C{  public boolean isToRead(){  Iterator<VariableValue> i=variables.iterator();  while (i.hasNext()) {    VariableValue v=i.next();    if (v.isToRead()) {      return true;    }  }  return false;}  }
class C{  public Builder screenName(String screenName){  this.screenName=screenName;  return this;}  }
class C{  public void commit(Object source) throws Exception {  Collection<Variable> set=registry.values();  for (  Variable entry : set) {    Contact contact=entry.getContact();    Object value=entry.getValue();    contact.set(source,value);  }}  }
class C{  public void receiveErrorgetNumberOfServiceSessions(java.lang.Exception e){}  }
class C{  public long create_sample_size_atom(MP4DataStream bitstream) throws IOException {  create_full_atom(bitstream);  samples=new Vector<Integer>();  sampleSize=(int)bitstream.readBytes(4);  sampleCount=(int)bitstream.readBytes(4);  readed+=8;  if (sampleSize == 0) {    for (int i=0; i < sampleCount; i++) {      int size=(int)bitstream.readBytes(4);      samples.addElement(Integer.valueOf(size));      readed+=4;    }  }  return readed;}  }
class C{  public void pop() throws IOException {  print("pop",null);}  }
class C{  private void loadSimulatedHeavyData() throws Exception {  setLowestMeasuredPercentile(1.0);  setSampleCount(sentinelA,1000);  setSampleCount(sentinelB,1000);  setSampleCount(sentinelC,1000);  setSampleCount(sentinelD,1000);  setSampleCount(sentinelE,1000);  when(mbeanServer.getAttribute(sentinelA,"50thPercentile")).thenReturn(0.1);  when(mbeanServer.getAttribute(sentinelB,"75thPercentile")).thenReturn(0.1);  when(mbeanServer.getAttribute(sentinelC,"75thPercentile")).thenReturn(3.3);  when(mbeanServer.getAttribute(sentinelD,"75thPercentile")).thenReturn(4.3);  when(mbeanServer.getAttribute(sentinelE,"75thPercentile")).thenReturn(4.3);  when(mbeanServer.isRegistered(sentinelA)).thenReturn(Boolean.TRUE);  when(mbeanServer.isRegistered(sentinelB)).thenReturn(Boolean.TRUE);  when(mbeanServer.isRegistered(sentinelC)).thenReturn(Boolean.TRUE);  when(mbeanServer.isRegistered(sentinelD)).thenReturn(Boolean.TRUE);  when(mbeanServer.isRegistered(sentinelE)).thenReturn(Boolean.TRUE);  System.out.println("Start manual evaluation ...");  qosHandler.evaluateQoSActions();}  }
class C{  public void reset() throws IOException {  fInputStream.reset();}  }
class C{  public String delete(Boolean m_Client,Boolean m_User,Boolean m_Window,Boolean m_Org){  log.info("");  String m_UpdateResult;  StringBuffer sql=new StringBuffer("DELETE FROM AD_Preference WHERE ");  sql.append("AD_Client_ID=").append(m_Client ? m_AD_Client_ID : 0);  sql.append(" AND AD_Org_ID=").append(m_Org ? m_AD_Org_ID : 0);  if (m_User)   sql.append(" AND AD_User_ID=").append(m_AD_User_ID); else   sql.append(" AND AD_User_ID IS NULL");  if (m_Window)   sql.append(" AND AD_Window_ID=").append(m_AD_Window_ID); else   sql.append(" AND AD_Window_ID IS NULL");  sql.append(" AND Attribute='").append(m_Attribute).append("'");  log.fine(sql.toString());  int no=DB.executeUpdate(sql.toString(),null);  if (no > 0) {    Env.setContext(m_ctx,getContextKey(m_Window),(String)null);    m_UpdateResult=no + " Record Deleted";  } else   m_UpdateResult="Record not found for deletion";  return m_UpdateResult;}  }
class C{  public void playSequentially(List<Animator> items){  if (items != null && items.size() > 0) {    mNeedsSort=true;    if (items.size() == 1) {      play(items.get(0));    } else {      for (int i=0; i < items.size() - 1; ++i) {        play(items.get(i)).before(items.get(i + 1));      }    }  }}  }
class C{  public GreaterConstraint(double constraintValue){  super(Double.valueOf(constraintValue));}  }
class C{  public boolean hasPublisher(){  return hasExtension(Publisher.class);}  }
class C{  public org.apache.nutch.storage.WebPage.Builder clearHeaders(){  headers=null;  fieldSetFlags()[18]=false;  return this;}  }
class C{  public boolean isStationDeleted(){  return code == 2201;}  }
class C{  public static float ccpLength(final CGPoint v){  return (float)Math.sqrt(ccpLengthSQ(v));}  }
class C{  @Override @Deprecated public void shutdown(){  throw new UnsupportedOperationException();}  }
class C{  @SuppressWarnings("unchecked") PackageSettingBase(PackageSettingBase base){  super(base);  name=base.name;  realName=base.realName;  codePath=base.codePath;  codePathString=base.codePathString;  resourcePath=base.resourcePath;  resourcePathString=base.resourcePathString;  nativeLibraryPathString=base.nativeLibraryPathString;  timeStamp=base.timeStamp;  firstInstallTime=base.firstInstallTime;  lastUpdateTime=base.lastUpdateTime;  versionCode=base.versionCode;  uidError=base.uidError;  signatures=new PackageSignatures(base.signatures);  permissionsFixed=base.permissionsFixed;  haveGids=base.haveGids;  userState.clear();  for (int i=0; i < base.userState.size(); i++) {    userState.put(base.userState.keyAt(i),new PackageUserState(base.userState.valueAt(i)));  }  installStatus=base.installStatus;  origPackage=base.origPackage;  installerPackageName=base.installerPackageName;}  }
class C{  public String toDebugString(){  String info="SEQUENCE HAS " + getListSize() + " ELEMENTS.\n";  for (int i=0; i < list.size(); i++) {    RSSSequenceElement e=(RSSSequenceElement)list.get(i);    info+=e.toString() + "\n";  }  return info;}  }
class C{  public String index(){  return this.index;}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public static ArrayList<double[]> circleToPoly(final double lon,final double lat,final double radius){  double angle;  final int sides=25;  ArrayList<double[]> geometry=new ArrayList();  double[] lons=new double[sides];  double[] lats=new double[sides];  double[] pt=new double[2];  final int sidesLen=sides - 1;  for (int i=0; i < sidesLen; ++i) {    angle=(i * 360 / sides);    pt=XGeoProjectionUtils.pointFromLonLatBearing(lon,lat,angle,radius,pt);    lons[i]=pt[0];    lats[i]=pt[1];  }  lons[sidesLen]=lons[0];  lats[sidesLen]=lats[0];  geometry.add(lons);  geometry.add(lats);  return geometry;}  }
class C{  public AccountHeaderBuilder withAccountHeader(@LayoutRes int resLayout){  if (mActivity == null) {    throw new RuntimeException("please pass an activity first to use this call");  }  if (resLayout != -1) {    this.mAccountHeaderContainer=mActivity.getLayoutInflater().inflate(resLayout,null,false);  } else {    if (mCompactStyle) {      this.mAccountHeaderContainer=mActivity.getLayoutInflater().inflate(R.layout.material_drawer_compact_header,null,false);    } else {      this.mAccountHeaderContainer=mActivity.getLayoutInflater().inflate(R.layout.material_drawer_header,null,false);    }  }  return this;}  }
class C{  public static <T>T[] notNullElements(T[] array,String name){  notEmpty(Arrays.asList(array),name);  for (  T ele : array) {    notNull(ele,String.format("Collection %s element %s",name,ele));  }  return array;}  }
class C{  public static Date resetTime(Date date){  Calendar cal=new GregorianCalendar();  cal.setTime(date);  cal.set(Calendar.HOUR_OF_DAY,0);  cal.set(Calendar.MINUTE,0);  cal.set(Calendar.SECOND,0);  cal.set(Calendar.MILLISECOND,0);  return cal.getTime();}  }
class C{  public MultipleObjectsBundle generate(){  if (generators.isEmpty()) {    throw new AbortException("No clusters specified.");  }  final int dim=generators.get(0).getDim();  for (  GeneratorInterface c : generators) {    if (c.getDim() != dim) {      throw new AbortException("Cluster dimensions do not agree.");    }  }  MultipleObjectsBundle bundle=new MultipleObjectsBundle();  VectorFieldTypeInformation<DoubleVector> type=new VectorFieldTypeInformation<>(DoubleVector.FACTORY,dim);  bundle.appendColumn(type,new ArrayList<>());  bundle.appendColumn(TypeUtil.CLASSLABEL,new ArrayList<>());  bundle.appendColumn(TypeUtil.MODEL,new ArrayList<Model>());  ClassLabel[] labels=new ClassLabel[generators.size()];  Model[] models=new Model[generators.size()];  initLabelsAndModels(generators,labels,models,relabelClusters);  final AssignPoint assignment;  if (!testAgainstModel) {    assignment=new AssignPoint();  } else   if (relabelClusters == null) {    assignment=new TestModel();  } else   if (!relabelDistance) {    assignment=new AssignLabelsByDensity(labels);  } else {    assignment=new AssignLabelsByDistance(labels);  }  for (int i=0; i < labels.length; i++) {    final GeneratorInterface curclus=generators.get(i);    assignment.newCluster(i,curclus);    GeneratorInterfaceDynamic cursclus=(curclus instanceof GeneratorInterfaceDynamic) ? (GeneratorInterfaceDynamic)curclus : null;    int kept=0;    while (kept < curclus.getSize()) {      List<double[]> newp=curclus.generate(curclus.getSize() - kept);      for (      double[] p : newp) {        int bestc=assignment.getAssignment(i,p);        if (bestc < 0) {          cursclus.incrementDiscarded();          continue;        }        bundle.appendSimple(DoubleVector.wrap(p),labels[bestc],models[bestc]);        ++kept;      }    }  }  return bundle;}  }
class C{  public boolean isTop(final int revisionIndex){  if (this.first != null) {    return this.first.getRevisionIndex() == revisionIndex;  }  return false;}  }
class C{  public static Set<Map> showDiff(SolrDocumentList a,SolrDocumentList b,String aName,String bName){  System.err.println("######" + aName + ": "+ toStr(a,10));  System.err.println("######" + bName + ": "+ toStr(b,10));  System.err.println("###### sizes=" + a.size() + ","+ b.size());  Set<Map> setA=new HashSet<>();  for (  SolrDocument sdoc : a) {    setA.add(new HashMap(sdoc));  }  Set<Map> setB=new HashSet<>();  for (  SolrDocument sdoc : b) {    setB.add(new HashMap(sdoc));  }  Set<Map> onlyInA=new HashSet<>(setA);  onlyInA.removeAll(setB);  Set<Map> onlyInB=new HashSet<>(setB);  onlyInB.removeAll(setA);  if (onlyInA.size() > 0) {    System.err.println("###### Only in " + aName + ": "+ onlyInA);  }  if (onlyInB.size() > 0) {    System.err.println("###### Only in " + bName + ": "+ onlyInB);  }  onlyInA.addAll(onlyInB);  return onlyInA;}  }
class C{  private void checkParser(DateTimeParser parser){  if (parser == null) {    throw new IllegalArgumentException("No parser supplied");  }}  }
class C{  public void exec(LineConsumer output) throws IOException {  final String pidFilePath=NameGenerator.generate("/tmp/codenvy-docker-",".pid",8);  final String trap=String.format("trap '[ -z \"$(jobs -p)\" ] || kill $(jobs -p); [ -e %1$s ] && rm %1$s' EXIT",pidFilePath);  final String bashCommand=trap + "; echo $$>" + pidFilePath+ "; "+ command;  final Exec exec=docker.createExec(container,output == null,"/bin/bash","-c",bashCommand);  this.pidFilePath=pidFilePath;  docker.startExec(exec.getId(),new LogMessagePrinter(output));}  }
class C{  public Iterator<Edge> edgesOutOf(MethodOrMethodContext m){  return new TargetsOfMethodIterator(m);}  }
class C{  public void stop(){  m_progressBar.stop();  CGlobalProgressManager.instance().remove(this);}  }
class C{  public SymbolTableEntryInternal createSymbolTableEntryInternal(){  SymbolTableEntryInternalImpl symbolTableEntryInternal=new SymbolTableEntryInternalImpl();  return symbolTableEntryInternal;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override protected boolean accepts(final IProjectDescription desc){  return desc.hasNature(WorkbenchHelper.BUILTIN_NATURE);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:27.779 -0500",hash_original_method="A4F75F4D0C7ABF3196500E489B73A8D4",hash_generated_method="1C409EC5A63808531030BD45DA1B15CF") public int length(){  return count;}  }
class C{  protected void sequence_TFormalParameter(ISerializationContext context,TFormalParameter semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static Object populateObject(Object obj,ResourceBundle rb){  try {    Map<String,String> map=PropertiesHelper.convertBundleToMap(rb);    BeanUtils.copyProperties(obj,map);  } catch (  Exception e) {    log.error("Exception occurred populating object: " + e.getMessage());  }  return obj;}  }
class C{  private void closeAllChannelsExcept(String[] except){  Set<String> copy=c.getOpenChannels();  for (  String channel : copy) {    if (!Arrays.asList(except).contains(channel)) {      closeChannel(channel);    }  }}  }
class C{  public void serviceRevoked(BeanContextServiceRevokedEvent event){  if (null == event) {    throw new NullPointerException(Messages.getString("beans.1C"));  }  if (services.containsKey(event.serviceClass)) {    return;  }  fireServiceRevoked(event);  Object childs[]=copyChildren();  for (int i=0; i < childs.length; i++) {    if (childs[i] instanceof BeanContextServices) {      ((BeanContextServices)childs[i]).serviceRevoked(event);    }  }}  }
class C{  public boolean isFinalClose(){  Object oo=get_Value(COLUMNNAME_IsFinalClose);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static Builder builder(){  return new Builder(new QueryResponse());}  }
class C{  public void test_toString(){  int[] pos={0,1,1000,Integer.MAX_VALUE,(Integer.MAX_VALUE - 1)};  SSLEngineResult.Status[] enS=SSLEngineResult.Status.values();  SSLEngineResult.HandshakeStatus[] enHS=SSLEngineResult.HandshakeStatus.values();  for (int i=0; i < enS.length; i++) {    for (int j=0; j < enHS.length; j++) {      for (int n=0; n < pos.length; n++) {        for (int l=0; l < pos.length; ++l) {          SSLEngineResult res=new SSLEngineResult(enS[i],enHS[j],pos[n],pos[l]);          assertNotNull("Result of toSring() method is null",res.toString());        }      }    }  }}  }
class C{  public static Test suite(){  TestSuite suite=new TestSuite();  Vector<String> packages=new Vector<String>();  packages.add("weka.core");  suite.addTest(suite(TestCase.class.getName(),packages));  suite.addTest(weka.core.converters.AllTests.suite());  suite.addTest(weka.core.neighboursearch.AllTests.suite());  suite.addTest(weka.core.tokenizers.AllTests.suite());  return suite;}  }
class C{  public final void cleanup(Instances justHeaderInfo){  m_train=justHeaderInfo;  m_test=null;  if (!m_isLeaf) {    for (    ClassifierTree m_son : m_sons) {      m_son.cleanup(justHeaderInfo);    }  }}  }
class C{  static UnionImpl heapifyInstance(Memory srcMem,long seed){  Family.UNION.checkFamilyID(srcMem.getByte(FAMILY_BYTE));  UpdateSketch gadget=HeapQuickSelectSketch.getInstance(srcMem,seed);  UnionImpl unionImpl=new UnionImpl(gadget,seed);  unionImpl.unionMem_=null;  return unionImpl;}  }
class C{  @Override public int findColumn(String columnLabel) throws SQLException {  try {    debugCodeCall("findColumn",columnLabel);    return getColumnIndex(columnLabel);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-06 12:51:00.698 -0400",hash_original_method="89F7BEBA96D28BF6226033A5C6E3AB22",hash_generated_method="7D13CB052E4C45E86CBA189872B09F98") public Builder addMediaSize(MediaSize mediaSize,boolean isDefault){  if (mPrototype.mMediaSizes == null) {    mPrototype.mMediaSizes=new ArrayList<MediaSize>();  }  final int insertionIndex=mPrototype.mMediaSizes.size();  mPrototype.mMediaSizes.add(mediaSize);  if (isDefault) {    throwIfDefaultAlreadySpecified(PROPERTY_MEDIA_SIZE);    mPrototype.mDefaults[PROPERTY_MEDIA_SIZE]=insertionIndex;  }  return this;}  }
class C{  public void testTimeoutMultiThreaded() throws Exception {  doTestMultiThreads(true);}  }
class C{  public GridCacheSyncReplicatedPreloadSelfTest(){  super(false);}  }
class C{  @Override public void endWindow(){  count.emit(tcount);  except.emit(icount);  tcount=0;  icount=0;}  }
class C{  public int size(){  return size;}  }
class C{  protected final void checkColumnBounds(int columnIndex) throws SQLException {synchronized (checkClosed().getConnectionMutex()) {    if ((columnIndex < 1)) {      throw SQLError.createSQLException(Messages.getString("ResultSet.Column_Index_out_of_range_low",new Object[]{Integer.valueOf(columnIndex),Integer.valueOf(this.fields.length)}),SQLError.SQL_STATE_ILLEGAL_ARGUMENT,getExceptionInterceptor());    } else     if ((columnIndex > this.fields.length)) {      throw SQLError.createSQLException(Messages.getString("ResultSet.Column_Index_out_of_range_high",new Object[]{Integer.valueOf(columnIndex),Integer.valueOf(this.fields.length)}),SQLError.SQL_STATE_ILLEGAL_ARGUMENT,getExceptionInterceptor());    }    if (this.profileSql || this.useUsageAdvisor) {      this.columnUsed[columnIndex - 1]=true;    }  }}  }
class C{  public static void logOrderStatus(int orderId,String status,int filled,int remaining,double avgFillPrice,int permId,int parentId,double lastFillPrice,int clientId,String whyHeld){  _log.debug("orderId: " + orderId + " status: "+ status+ " filled: "+ filled+ " remaining: "+ remaining+ " avgFillPrice: "+ avgFillPrice+ " permId: "+ permId+ " parentId: "+ parentId+ " lastFillPrice: "+ lastFillPrice+ " clientId: "+ clientId+ " whyHeld: "+ whyHeld);}  }
class C{  public static int addPixel(int pixel,int newPixel,float weight){  int r=((pixel & 0x00ff0000) + (int)((newPixel & 0x00ff0000) * weight)) & 0x00ff0000;  int g=((pixel & 0x0000ff00) + (int)((newPixel & 0x0000ff00) * weight)) & 0x0000ff00;  int b=((pixel & 0x000000ff) + (int)((newPixel & 0x000000ff) * weight)) & 0x000000ff;  return 0xff000000 | r | g| b;}  }
class C{  public URI searchForLabel(String label,String language,String type){  URIBuilder builder=apiBuilder();  builder.addParameter("action","wbsearchentities");  builder.addParameter("search",label);  builder.addParameter("language",language);  builder.addParameter("type",type);  return build(builder);}  }
class C{  void localEscapes(Local l){  globEscape.addAll(locals.get(l));  if (doCheck)   sanityCheck();}  }
class C{  public void boundCheck(Scope scope,TypeReference[] argumentReferences){  if ((this.tagBits & TagBits.PassedBoundCheck) == 0) {    boolean hasErrors=false;    TypeVariableBinding[] typeVariables=this.type.typeVariables();    if (this.arguments != null && typeVariables != null) {      for (int i=0, length=typeVariables.length; i < length; i++) {        if (typeVariables[i].boundCheck(this,this.arguments[i]) != TypeConstants.OK) {          hasErrors=true;          if ((this.arguments[i].tagBits & TagBits.HasMissingType) == 0) {            scope.problemReporter().typeMismatchError(this.arguments[i],typeVariables[i],this.type,argumentReferences[i]);          }        }      }    }    if (!hasErrors)     this.tagBits|=TagBits.PassedBoundCheck;  }}  }
class C{  public GlowSession(GlowServer server,Channel channel,ConnectionManager connectionManager){  super(channel,ProtocolType.HANDSHAKE.getProtocol());  this.server=server;  this.connectionManager=connectionManager;  address=super.getAddress();}  }
class C{  private void updateProfileUserLdap(UseCaseConf useCaseConf,AuthenticationUser user) throws SecurityException {  Iuserusertype userusertype;  Transaction tran=null;  try {    Session session=HibernateUtil.currentSession(useCaseConf.getEntidadId());    tran=session.beginTransaction();    List list=ISicresQueries.getUserUserType(session,user.getId().intValue(),5);    if (list == null || list.isEmpty()) {      userusertype=new Iuserusertype();      userusertype.setUserid(user.getId().intValue());      userusertype.setProdid(5);      userusertype.setType(3);      session.save(userusertype);      session.flush();    } else {      userusertype=(Iuserusertype)list.get(0);      DBEntityDAOFactory.getCurrentDBEntityDAO().updateRole(userusertype.getUserid(),userusertype.getProdid(),3,useCaseConf.getEntidadId());    }    HibernateUtil.commitTransaction(tran);  } catch (  HibernateException hE) {    HibernateUtil.rollbackTransaction(tran);    logger.error("Imposible crear el permiso administrador");    throw new SecurityException(SecurityException.ERROR_SQL);  }catch (  Exception e) {    HibernateUtil.rollbackTransaction(tran);    logger.error("Imposible crear el permiso administrador");    throw new SecurityException(SecurityException.ERROR_USER_NOTFOUND);  } finally {    HibernateUtil.closeSession(useCaseConf.getEntidadId());  }}  }
class C{  public boolean isMergeAdjacentText(){  return mergeAdjacentText;}  }
class C{  @Override public void execute(StepInstance stepInstance,String temporaryFileDirectory){  double signatureLibraryReleaseValue=Double.parseDouble(signatureLibraryRelease);  if (signatureLibraryReleaseValue <= 2.74d) {    Set<RawProtein<PIRSFHmmer2RawMatch>> filteredRawMatches=new HashSet<RawProtein<PIRSFHmmer2RawMatch>>();    final String filteredMatchesFilePath=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,filteredMatchesFileName);    try {      Set<RawProtein<PIRSFHmmer2RawMatch>> rawMatches=PirsfMatchTempParser.parse(filteredMatchesFilePath);      filteredRawMatches.addAll(rawMatches);    } catch (    IOException e) {      throw new IllegalStateException("IOException thrown when parsing filtered matches file " + filteredMatchesFilePath);    }    final String blastedMatchesFilePath=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,blastedMatchesFileName);    try {      Set<RawProtein<PIRSFHmmer2RawMatch>> rawMatches=PirsfMatchTempParser.parse(blastedMatchesFilePath);      filteredRawMatches.addAll(rawMatches);    } catch (    IOException e) {      throw new IllegalStateException("IOException thrown when parsing blasted matches file " + blastedMatchesFilePath);    }    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("PIRSF: Retrieved " + filteredRawMatches.size() + " proteins.");      int matchCount=0;      for (      final RawProtein rawProtein : filteredRawMatches) {        matchCount+=rawProtein.getMatches().size();      }      LOGGER.debug("PIRSF: A total of " + matchCount + " raw matches.");    }    LOGGER.info("Persisting filtered raw matches...");    filteredMatchDAO.persist(filteredRawMatches);  } else {    throw new IllegalStateException("Step instance with ID " + stepInstance.getId() + " only supports signature library release version <= 2.74");  }}  }
class C{  public BigDecimal round(BigDecimal qty,boolean stdPrecision){  int precision=getStdPrecision();  if (!stdPrecision)   precision=getCostingPrecision();  if (qty.scale() > precision)   return qty.setScale(getStdPrecision(),BigDecimal.ROUND_HALF_UP);  return qty;}  }
class C{  private static void databaseUpdater(final CConnection connection,final String resource) throws CouldntUpdateDatabaseException {  final BufferedReader input=new BufferedReader(new InputStreamReader(ClassLoader.getSystemResourceAsStream(resource)));  final StringBuffer contents=new StringBuffer();  String line=null;  try {    while ((line=input.readLine()) != null) {      if (line.length() > 0 && line.charAt(0) == '#') {        continue;      }      contents.append(line);      contents.append('\n');    }    input.close();  } catch (  final IOException exception) {    throw new CouldntUpdateDatabaseException(exception.toString(),40);  }  try (PreparedStatement statement=connection.getConnection().prepareStatement(contents.toString())){    statement.execute();  } catch (  final SQLException exception) {    throw new CouldntUpdateDatabaseException(exception.toString(),41);  }}  }
class C{  public StringBuilder replace(int start,int end,String string){  replace0(start,end,string);  return this;}  }
class C{  @Override protected synchronized void write(long offset,byte[] b) throws IOException {  if (byteBuffer != null) {    byteBuffer.position((int)offset);    byteBuffer.put(b);  } else {    throw new IOException("Write failed, file " + getPath() + " not mapped for I/O");  }}  }
class C{  private int findProductRow(int M_Product_ID){  ListModelTable model=(ListModelTable)window.getWListbox().getModel();  KeyNamePair kp;  for (int i=0; i < model.getRowCount(); i++) {    kp=(KeyNamePair)model.getValueAt(i,4);    if (kp.getKey() == M_Product_ID) {      return (i);    }  }  return (-1);}  }
class C{  public InlineQueryResultCachedDocumentBuilder title(String title){  this.title=title;  return this;}  }
class C{  public void accept(Connection conn){synchronized (queue) {    queue.add(conn);    queue.notify();  }}  }
class C{  public BillingApplicationException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  private void tryPush(final Player pusher,final RPEntity pushed){  if (canPush(pusher,pushed)) {    final Direction dir=pusher.getDirectionToward(pushed);    final int x=pushed.getX() + dir.getdx();    final int y=pushed.getY() + dir.getdy();    final StendhalRPZone zone=pusher.getZone();    if (!zone.collides(pushed,x,y)) {      move(pusher,pushed,x,y);      if ((dir.oppositeDirection() == pushed.getDirection()) && !pushed.hasPath()) {        pushed.stop();      }      if (!(pushed instanceof Player)) {        pushed.setPath(null);      }    }  }}  }
class C{  public static void reload(KeyConfProvider conf){  LOG.trace("reload({})",conf.getClass());  instance=conf;}  }
class C{  public RaceControlPanel(){  add(goButton);  add(stopButton);}  }
class C{  private int numInRow(TicTacToeBoard board,int num,char mark){  int c, r;  int ct=0;  for (c=0; c < board.numColumns(); c++) {    if (countMark(board,c,0,0,1,board.numRows(),mark) == num) {      ct++;    }  }  for (r=0; r < board.numRows(); r++) {    if (countMark(board,0,r,1,0,board.numColumns(),mark) == num) {      ct++;    }  }  if (countMark(board,0,0,1,1,board.numColumns(),mark) == num) {    ct++;  }  if (countMark(board,0,2,1,-1,board.numColumns(),mark) == num) {    ct++;  }  return ct;}  }
class C{  public boolean containsTargetInternalSiteName(String destInternalSiteName){  if (this.getTargetRecommendations() != null) {    for (    RPRecommendation targetRec : this.getTargetRecommendations()) {      if (targetRec.getInternalSiteName().equals(destInternalSiteName)) {        return true;      }    }  }  return false;}  }
class C{  public PrivateOutputStream(BaseStream p,int maxSize){  mParent=p;  mArray=new ByteArrayOutputStream();  mMaxPacketSize=maxSize;  mOpen=true;}  }
class C{  public boolean shareText(CharSequence text,CharSequence type){  Intent intent=new Intent();  intent.addCategory(Intent.CATEGORY_DEFAULT);  intent.setAction(BS_PACKAGE + ".ENCODE");  intent.putExtra("ENCODE_TYPE",type);  intent.putExtra("ENCODE_DATA",text);  String targetAppPackage=findTargetAppPackage(intent);  if (targetAppPackage == null) {    showDownloadDialog();    return false;  }  intent.setPackage(targetAppPackage);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);  attachMoreExtras(intent);  activity.startActivity(intent);  return true;}  }
class C{  public static void registerHandler(String id,ICompleteClientHandler handler){  CompleteHandlerRegistry.HANDLER.put(id,handler);}  }
class C{  protected ArrayList<float[]> _forwardPoly(float[] rawllpts,int ltype,int nsegs,boolean isFilled){  double[] drawllpts=new double[rawllpts.length];  System.arraycopy(drawllpts,0,rawllpts,0,rawllpts.length);  return _forwardPoly(drawllpts,ltype,nsegs,isFilled);}  }
class C{  @Bean @ConditionalOnProperty("spring.mail.host") public MailSender smtpMailSender(JavaMailSender javaMailSender){  SmtpMailSender mailSender=new SmtpMailSender();  mailSender.setJavaMailSender(javaMailSender);  return mailSender;}  }
class C{  public Bucket(int itemSize,int maxLength,int inUseLength){  Preconditions.checkState(itemSize > 0);  Preconditions.checkState(maxLength >= 0);  Preconditions.checkState(inUseLength >= 0);  mItemSize=itemSize;  mMaxLength=maxLength;  mFreeList=new LinkedList();  mInUseLength=inUseLength;}  }
class C{  public final boolean isCaretBlinkEnabled(){  return caretBlinks;}  }
class C{  @Override public void onViewReleased(View releasedChild,float xVel,float yVel){  super.onViewReleased(releasedChild,xVel,yVel);  if (mAudioView.isDragViewAboveTheLimit()) {    mAudioView.moveOffScreen();  } else {    mAudioView.moveToOriginalPosition();  }}  }
class C{  public GraphEnvironment(FrameManager frameManager,GraphReader reader){  super(frameManager);  mGraphReader=reader;}  }
class C{  public static String generateOffset(int fileIndex,String singleFileOffset){  return fileIndex + DELIMITER + singleFileOffset;}  }
class C{  public IndexValue(int index,double value){  this.index=index;  this.value=value;}  }
class C{  public static Instances mergeInstances(Instances first,Instances second){  if (first.numInstances() != second.numInstances()) {    throw new IllegalArgumentException("Instance sets must be of the same size");  }  FastVector newAttributes=new FastVector();  for (int i=0; i < first.numAttributes(); i++) {    newAttributes.addElement(first.attribute(i));  }  for (int i=0; i < second.numAttributes(); i++) {    newAttributes.addElement(second.attribute(i));  }  Instances merged=new Instances(first.relationName() + '_' + second.relationName(),newAttributes,first.numInstances());  for (int i=0; i < first.numInstances(); i++) {    merged.add(first.instance(i).mergeInstance(second.instance(i)));  }  return merged;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:24.306 -0500",hash_original_method="4D5217EDB6A50C089202283FEC2465A8",hash_generated_method="2C47B4FF771B11706F9E0B58201D7C3E") public ReflectiveProperty(Class<T> propertyHolder,Class<V> valueType,String name){  super(valueType,name);  char firstLetter=Character.toUpperCase(name.charAt(0));  String theRest=name.substring(1);  String capitalizedName=firstLetter + theRest;  String getterName=PREFIX_GET + capitalizedName;  try {    mGetter=propertyHolder.getMethod(getterName,(Class<?>[])null);  } catch (  NoSuchMethodException e) {    getterName=PREFIX_IS + capitalizedName;    try {      mGetter=propertyHolder.getMethod(getterName,(Class<?>[])null);    } catch (    NoSuchMethodException e1) {      try {        mField=propertyHolder.getField(name);        Class fieldType=mField.getType();        if (!typesMatch(valueType,fieldType)) {          throw new NoSuchPropertyException("Underlying type (" + fieldType + ") "+ "does not match Property type ("+ valueType+ ")");        }        return;      } catch (      NoSuchFieldException e2) {        throw new NoSuchPropertyException("No accessor method or field found for" + " property with name " + name);      }    }  }  Class getterType=mGetter.getReturnType();  if (!typesMatch(valueType,getterType)) {    throw new NoSuchPropertyException("Underlying type (" + getterType + ") "+ "does not match Property type ("+ valueType+ ")");  }  String setterName=PREFIX_SET + capitalizedName;  try {    mSetter=propertyHolder.getMethod(setterName,getterType);  } catch (  NoSuchMethodException ignored) {  }}  }
class C{  private void checkForUnconnectedPorts(PortAllocationContext context){  Set<String> removedPorts=new HashSet<String>();  for (  StoragePort port : context._addressToStoragePort.values()) {    if (context._storagePortToSwitchName.containsKey(port) == false) {      _log.info(String.format("Port %s address (%s) is not currently connected to SAN switch;" + " removed from consideration for allocation",port.getPortName(),port.getPortNetworkId()));      removedPorts.add(port.getPortNetworkId());    }  }  for (  String key : removedPorts) {    context._addressToStoragePort.remove(key);  }}  }
class C{  @ObjectiveCName("changeAnimationAutoPlayEnabled:") public void changeAnimationAutoPlayEnabled(boolean val){  modules.getSettingsModule().setAnimationAutoPlayEnabled(val);}  }
class C{  public DistanceOp(Geometry g0,Geometry g1){  this(g0,g1,0.0);}  }
class C{  protected void innerToXContent(XContentBuilder builder,Params params) throws IOException {  causeToXContent(builder,params);}  }
class C{  public static PropertyValuesHolder ofObject(String propertyName,TypeEvaluator evaluator,Object... values){  PropertyValuesHolder pvh=new PropertyValuesHolder(propertyName);  pvh.setObjectValues(values);  pvh.setEvaluator(evaluator);  return pvh;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  void simplifyInside(){  Set<PurityNode> r=new HashSet<PurityNode>();  internalPassNodes(paramNodes,r,true);  internalPassNodes(ret,r,true);  internalPassNodes(globEscape,r,true);  internalPassNode(PurityGlobalNode.node,r,true);  Iterator it=nodes.iterator();  while (it.hasNext()) {    PurityNode n=(PurityNode)it.next();    if (n.isLoad())     internalPassNode(n,r,true);  }  it=(new LinkedList(nodes)).iterator();  while (it.hasNext()) {    PurityNode n=(PurityNode)it.next();    if (n.isInside() && !r.contains(n))     removeNode(n);  }  if (doCheck)   sanityCheck();}  }
class C{  public DateTime withDayOfWeek(int dayOfWeek){  return withMillis(getChronology().dayOfWeek().set(getMillis(),dayOfWeek));}  }
class C{  private ArrayList<IntegerVariable> ensureEmptyHeaderHeight(){  if (heights == null) {    heights=new ArrayList<IntegerVariable>();  }  MagicHeaderUtils.ensureCapacityWithEmptyObject(heights,1,IntegerVariable.class);  heights.set(0,mEmptyHeaderHeight);  return heights;}  }
class C{  @Override public Object anyValue(final IScope scope){  final int i=scope.getRandom().between(0,1);  return i == 0 ? key : value;}  }
class C{  @Override public CompletableFuture<T> reduce(final T identity,final BinaryOperator<T> accumulator){  return CompletableFuture.supplyAsync(null,exec);}  }
class C{  public void removeProject(final IProject project){  Check.notNull(project,"project");  log.debug(MessageFormat.format("Removing project {0}",project.getName()));  waitForManagerStartup();  TFSRepository repository;synchronized (projectDataLock) {    final ProjectRepositoryData projectData=projectDataMap.get(project);    if (projectData == null) {      log.error(MessageFormat.format("Project Manager does not contain project {0} (when removing)",project.getName()));      return;    }synchronized (projectData) {      repository=projectData.getRepository();    }    projectDataMap.remove(project);    if (repository != null) {      disconnectRepository(project,repository,true,false);    }  }  if (repository != null) {    TFSEclipseClientPlugin.getDefault().getResourceDataManager().removeProject(repository,project);  }  ((ProjectRepositoryManagerListener)listeners.getListener()).onProjectRemoved(project);}  }
class C{  public boolean closed(){  return this.closed;}  }
class C{  public CharConversionException(){}  }
class C{  boolean isWhiteSpace(char c){  if (('\t' == c) || ('\n' == c) || ('\r' == c)|| ('\u0020' == c))   return true;  return false;}  }
class C{  private void displayCommitB(@Nullable Revision revision){  boolean isEmpty=revision == null;  if (isEmpty) {    view.setCommitBDate("");    view.setCommitBRevision("");  } else {    view.setCommitBDate(dateTimeFormatter.getFormattedDate(revision.getCommitTime()));    view.setCommitBRevision(revision.getId());  }  view.setCommitBPanelVisible(!isEmpty);}  }
class C{  public int hashCode(){  if (hash == 0) {    int hash0=11;    hash0=hash0 * 31 + field.hashCode();    hash0=hash0 * 31 + a.hashCode();    hash0=hash0 * 31 + b.hashCode();    if (seed != null) {      for (int i=0; i < seed.length; i++) {        hash0=hash0 * 31 + seed[i];      }    } else {      hash0=hash0 * 31;    }    hash=hash0;  }  return hash;}  }
class C{  public Stacking(int folds,Regressor aggregatingRegressor,Regressor... baseRegressors){  this(folds,aggregatingRegressor,Arrays.asList(baseRegressors));}  }
class C{  public void characters(char[] ch,int start,int length) throws Exception {}  }
class C{  private static IgfsPath path(String p){  return new IgfsPath(p);}  }
class C{  public boolean isErrorEnabled(){  return (getLogger().isLoggable(Level.SEVERE));}  }
class C{  public void testRetrievalMyIsam() throws Exception {  double fullBegin=System.currentTimeMillis();  double averageQueryTimeMs=0;  double averageTraversalTimeMs=0;  for (int i=0; i < NUM_TESTS; i++) {    long queryBegin=System.currentTimeMillis();    this.rs=this.stmt.executeQuery("SELECT * FROM retrievalPerfTestMyIsam");    long queryEnd=System.currentTimeMillis();    averageQueryTimeMs+=((double)(queryEnd - queryBegin) / NUM_TESTS);    long traverseBegin=System.currentTimeMillis();    while (this.rs.next()) {      this.rs.getInt(1);      this.rs.getString(2);    }    long traverseEnd=System.currentTimeMillis();    averageTraversalTimeMs+=((double)(traverseEnd - traverseBegin) / NUM_TESTS);  }  double fullEnd=System.currentTimeMillis();  double fullTime=(fullEnd - fullBegin) / 1000;  double queriesPerSec=NUM_TESTS / fullTime;  double rowsPerSec=(NUM_ROWS * NUM_TESTS) / fullTime;  System.out.println("\nMyIsam Retrieval\n");  System.out.println("Full test took: " + fullTime + " seconds.");  System.out.println("Queries/second: " + queriesPerSec);  System.out.println("Rows/second: " + rowsPerSec);  System.out.println("Avg. Query Exec Time: " + averageQueryTimeMs + " ms");  System.out.println("Avg. Traversal Time: " + averageTraversalTimeMs + " ms");  assertTrue(fullTime < 45);}  }
class C{  public boolean intersectsFrustum(Frustum frustum){  if (frustum == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"BoundingBox","intersectsFrustum","missingFrustum"));  }  this.endPoint1.set(this.bottomCenter);  this.endPoint2.set(this.topCenter);  if (this.intersectsAt(frustum.near) < 0) {    return false;  }  if (this.intersectsAt(frustum.far) < 0) {    return false;  }  if (this.intersectsAt(frustum.left) < 0) {    return false;  }  if (this.intersectsAt(frustum.right) < 0) {    return false;  }  if (this.intersectsAt(frustum.top) < 0) {    return false;  }  if (this.intersectsAt(frustum.bottom) < 0) {    return false;  }  return true;}  }
class C{  private static void createInfoLabel(Composite parent,FormToolkit toolkit,String text){  Label label=toolkit.createLabel(parent,"");  if (null != text) {    label.setToolTipText(text);    label.setImage(InspectIT.getDefault().getImage(InspectITImages.IMG_INFORMATION));  }}  }
class C{  public Word xor(Word w2){  return null;}  }
class C{  @Override public CredentialsBuilder withPassword(String password){  this.password=password;  return this;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:33.762 -0500",hash_original_method="869521EFCB7C5245B063DFB17EC10284",hash_generated_method="C1528D544A2327E9216257B325B00EE3") @Override public boolean onKeyDown(int keyCode,KeyEvent event){switch (keyCode) {case KeyEvent.KEYCODE_DPAD_LEFT:    if (movePrevious()) {      playSoundEffect(SoundEffectConstants.NAVIGATION_LEFT);    }  return true;case KeyEvent.KEYCODE_DPAD_RIGHT:if (moveNext()) {  playSoundEffect(SoundEffectConstants.NAVIGATION_RIGHT);}return true;case KeyEvent.KEYCODE_DPAD_CENTER:case KeyEvent.KEYCODE_ENTER:mReceivedInvokeKeyDown=true;}return super.onKeyDown(keyCode,event);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:29.940 -0500",hash_original_method="F7B998F5AE180E31090E44B8A03A92F7",hash_generated_method="08FF0ED30143F58CAB4DEB62E6201927") @Override public boolean equals(Object obj){  return (obj == this);}  }
class C{  public void addActiveLineRangeListener(ActiveLineRangeListener l){  listenerList.add(ActiveLineRangeListener.class,l);}  }
class C{  public ByteOrder ordering(){  return this.blob.ordering();}  }
class C{  static public String generateSaveFileName(Context c,String fileName){  String path=getSaveFilePath(c) + File.separator + fileName;  return path;}  }
class C{  public boolean mustDeserialize(Object obj){  return obj != null && ctx.mustDeserialize(obj.getClass());}  }
class C{  protected Distribution findBestFit(final List<V> col,Adapter adapter,int d,double[] test){  Distribution best=null;  double bestq=Double.POSITIVE_INFINITY;  trials:   for (  DistributionEstimator<?> est : estimators) {    try {      Distribution dist=est.estimate(col,adapter);      for (int i=0; i < test.length; i++) {        test[i]=dist.cdf(col.get(i).doubleValue(d));        if (Double.isNaN(test[i])) {          LOG.warning("Got NaN after fitting " + est.toString() + ": "+ dist.toString());          continue trials;        }        if (Double.isInfinite(test[i])) {          LOG.warning("Got infinite value after fitting " + est.toString() + ": "+ dist.toString());          continue trials;        }      }      Arrays.sort(test);      double q=KolmogorovSmirnovTest.simpleTest(test);      if (LOG.isVeryVerbose()) {        LOG.veryverbose("Estimator " + est.toString() + " ("+ dist.toString()+ ") has maximum deviation "+ q+ " for dimension "+ d);      }      if (best == null || q < bestq) {        best=dist;        bestq=q;      }    } catch (    ArithmeticException e) {      if (LOG.isVeryVerbose()) {        LOG.veryverbose("Fitting distribution " + est + " failed: "+ e.getMessage());      }      continue trials;    }  }  if (LOG.isVerbose()) {    LOG.verbose("Best fit for dimension " + d + ": "+ best.toString());  }  return best;}  }
class C{  private long put(K key,long value,boolean ifNew){  if (key == null) {    long old=_nullValue;    _nullValue=value;    return old;  }  int hash=key.hashCode() & _mask;  while (true) {    K testKey=_keys[hash];    if (testKey == null || (_flags[hash] & DELETED) != 0) {      _keys[hash]=key;      _values[hash]=value;      _flags[hash]=0;      _size++;      if (_keys.length <= 2 * _size)       resize(2 * _keys.length);      return NULL;    } else     if (key != testKey && !testKey.equals(key)) {      hash=(hash + 1) & _mask;      continue;    } else     if (ifNew) {      return _values[hash];    } else {      long old=_values[hash];      _values[hash]=value;      return old;    }  }}  }
class C{  private static void logo(){  echo("Ignite Random Command Line Loader, ver. " + VER);  echo(COPYRIGHT);  echo("");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:02:38.085 -0400",hash_original_method="F1F4EB72DFF772C64E230B7C17B3D041",hash_generated_method="87E83F01FDF638CAA33BED1D66852668") public void dispose() throws SaslException {  if (m_state != STATE_DISPOSED) {    m_state=STATE_DISPOSED;  }}  }
class C{  public static String saveEntryParams(HttpServletRequest request,HttpServletResponse response){  GenericValue userLogin=(GenericValue)request.getSession().getAttribute("userLogin");  HttpSession session=request.getSession();  Delegator delegator=(Delegator)request.getAttribute("delegator");  if (userLogin == null) {    String username=request.getParameter("USERNAME");    String password=request.getParameter("PASSWORD");    if ((username != null) && ("true".equalsIgnoreCase(EntityUtilProperties.getPropertyValue("security.properties","username.lowercase",delegator)))) {      username=username.toLowerCase();    }    if ((password != null) && ("true".equalsIgnoreCase(EntityUtilProperties.getPropertyValue("security.properties","password.lowercase",delegator)))) {      password=password.toLowerCase();    }    if (username != null)     session.setAttribute("USERNAME",username);    if (password != null)     session.setAttribute("PASSWORD",password);  } else {    session.removeAttribute("USERNAME");    session.removeAttribute("PASSWORD");  }  return "success";}  }
class C{  public int numDistinctOptimal(String s,String t){  if (s == null || t == null)   return 0;  int m=t.length();  int n=s.length();  if (m > n)   return 0;  int[] dp=new int[m + 1];  dp[0]=1;  for (int i=1; i <= n; i++)   for (int j=m; j >= 1; j--)   if (t.charAt(j - 1) == s.charAt(i - 1))   dp[j]+=dp[j - 1];  return dp[m];}  }
class C{  public Drawable decideIcon(Context ctx,int iconColor,boolean tint,int paddingDp){  Drawable icon=getIcon();  if (mIIcon != null) {    icon=new IconicsDrawable(ctx,mIIcon).color(iconColor).sizeDp(24).paddingDp(paddingDp);  } else   if (getIconRes() != -1) {    icon=ContextCompat.getDrawable(ctx,getIconRes());  } else   if (getUri() != null) {    try {      InputStream inputStream=ctx.getContentResolver().openInputStream(getUri());      icon=Drawable.createFromStream(inputStream,getUri().toString());    } catch (    FileNotFoundException e) {    }  }  if (icon != null && tint && mIIcon == null) {    icon=icon.mutate();    icon.setColorFilter(iconColor,PorterDuff.Mode.SRC_IN);  }  return icon;}  }
class C{  private void pinDayOfMonth(){  int year=internalGet(YEAR);  int monthLen;  if (year > gregorianCutoverYear || year < gregorianCutoverYearJulian) {    monthLen=monthLength(internalGet(MONTH));  } else {    GregorianCalendar gc=getNormalizedCalendar();    monthLen=gc.getActualMaximum(DAY_OF_MONTH);  }  int dom=internalGet(DAY_OF_MONTH);  if (dom > monthLen) {    set(DAY_OF_MONTH,monthLen);  }}  }
class C{  protected ConfigAccessorMethod(Class<?> configInterface,Method method){  property=ConfigUtil.getPropertyName(configInterface,method);}  }
class C{  public XmlChecker(){  m_domParser=null;  m_onlyCheckValidity=true;  m_infoMsg=null;  m_valid=true;}  }
class C{  public void destroy(){  log.info("");}  }
class C{  private void executeHelp(String[] args){  if (args.length == 1) {    printMessage(COMMAND_HELP_MESSAGE);  } else   if (args.length == 2) {    if (HELP_MESSAGES.containsKey(args[1])) {      printMessage(HELP_MESSAGES.get(args[1]));    } else {      printMessage(HELP_MESSAGES.get("error"));    }  } else {    printMessage(COMMAND_HELP_MESSAGE);  }}  }
class C{  public boolean hasArchiveTotalFailure(){  return hasExtension(ArchiveTotalFailure.class);}  }
class C{  private void dumpData(Writer writer,PropertyMapping[] inCols,ExtensionMapping mapping,int dataFileRowSize,@Nullable Integer rowLimit,@Nullable DOI doi) throws GeneratorException, InterruptedException {  final String idSuffix=StringUtils.trimToEmpty(mapping.getIdSuffix());  final RecordFilter filter=mapping.getFilter();  int maxColumnIndex=mapping.getIdColumn() == null ? -1 : mapping.getIdColumn();  for (  PropertyMapping pm : mapping.getFields()) {    if (pm.getIndex() != null && maxColumnIndex < pm.getIndex()) {      maxColumnIndex=pm.getIndex();    }  }  int recordsWithError=0;  int linesWithWrongColumnNumber=0;  int recordsFiltered=0;  int emptyLines=0;  ClosableReportingIterator<String[]> iter=null;  int line=0;  try {    iter=sourceManager.rowIterator(mapping.getSource());    while (iter.hasNext()) {      line++;      if (line % 1000 == 0) {        checkForInterruption(line);        reportIfNeeded();      }      String[] in=iter.next();      if (in == null || in.length == 0) {        continue;      }      if (iter.hasRowError()) {        writePublicationLogMessage("Error reading line #" + line + "\n"+ iter.getErrorMessage());        recordsWithError++;        currRecordsSkipped++;      } else       if (isEmptyLine(in)) {        writePublicationLogMessage("Empty line was skipped. SourceBase:" + mapping.getSource().getName() + " Line #"+ line+ ": "+ printLine(in));        emptyLines++;        currRecordsSkipped++;      } else {        if (in.length <= maxColumnIndex) {          writePublicationLogMessage("Line with fewer columns than mapped. SourceBase:" + mapping.getSource().getName() + " Line #"+ line+ " has "+ in.length+ " Columns: "+ printLine(in));          String[] in2=new String[maxColumnIndex + 1];          System.arraycopy(in,0,in2,0,in.length);          in=in2;          linesWithWrongColumnNumber++;        }        String[] record=new String[dataFileRowSize];        boolean alreadyTranslated=false;        if (filter != null && filter.getColumn() != null && filter.getComparator() != null && filter.getParam() != null) {          boolean matchesFilter;          if (filter.getFilterTime() == RecordFilter.FilterTime.AfterTranslation) {            applyTranslations(inCols,in,record,mapping.isDoiUsedForDatasetId(),doi);            matchesFilter=filter.matches(in);            alreadyTranslated=true;          } else {            matchesFilter=filter.matches(in);          }          if (!matchesFilter) {            writePublicationLogMessage("Line did not match the filter criteria and was skipped. SourceBase:" + mapping.getSource().getName() + " Line #"+ line+ ": "+ printLine(in));            recordsFiltered++;            continue;          }        }        if (mapping.getIdColumn() == null) {          record[ID_COLUMN_INDEX]=null;        } else         if (mapping.getIdColumn().equals(ExtensionMapping.IDGEN_LINE_NUMBER)) {          record[ID_COLUMN_INDEX]=line + idSuffix;        } else         if (mapping.getIdColumn().equals(ExtensionMapping.IDGEN_UUID)) {          record[ID_COLUMN_INDEX]=UUID.randomUUID().toString();        } else         if (mapping.getIdColumn() >= 0) {          record[ID_COLUMN_INDEX]=(Strings.isNullOrEmpty(in[mapping.getIdColumn()])) ? idSuffix : in[mapping.getIdColumn()] + idSuffix;        }        if (!alreadyTranslated) {          applyTranslations(inCols,in,record,mapping.isDoiUsedForDatasetId(),doi);        }        String newRow=tabRow(record);        if (newRow != null) {          writer.write(newRow);          currRecords++;          if (rowLimit != null && currRecords >= rowLimit) {            break;          }        }      }    }  } catch (  InterruptedException e) {    setState(e);    throw e;  }catch (  Exception e) {    log.error("Fatal DwC-A Generator Error encountered",e);    setState(e);    throw new GeneratorException("Error writing data file for mapping " + mapping.getExtension().getTitle() + " in source "+ mapping.getSource().getName()+ ", line "+ line,e);  } finally {    if (iter != null) {      if (!iter.hasRowError() && iter.getErrorMessage() != null) {        writePublicationLogMessage("Error reading data: " + iter.getErrorMessage());      }      iter.close();    }  }  String mp=" for mapping " + mapping.getExtension().getTitle() + " in source "+ mapping.getSource().getName();  if (recordsWithError > 0) {    addMessage(Level.WARN,String.valueOf(recordsWithError) + " record(s) skipped due to errors" + mp);  } else {    writePublicationLogMessage("No lines were skipped due to errors" + mp);  }  if (emptyLines > 0) {    addMessage(Level.WARN,String.valueOf(emptyLines) + " empty line(s) skipped" + mp);  } else {    writePublicationLogMessage("No lines were skipped due to errors" + mp);  }  if (linesWithWrongColumnNumber > 0) {    addMessage(Level.WARN,String.valueOf(linesWithWrongColumnNumber) + " line(s) with fewer columns than mapped" + mp);  } else {    writePublicationLogMessage("No lines with fewer columns than mapped" + mp);  }  if (recordsFiltered > 0) {    addMessage(Level.INFO,String.valueOf(recordsFiltered) + " line(s) did not match the filter criteria and got skipped " + mp);  } else {    writePublicationLogMessage("All lines match the filter criteria" + mp);  }}  }
class C{  protected void themeSystemBars(int color){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    getWindow().setStatusBarColor(color);    if (SettingValues.colorNavBar) {      getWindow().setNavigationBarColor(color);    }  }}  }
class C{  protected void onPreGet(){}  }
class C{  public void gprint(String srcName,String format){  gprint(srcName,format,false);}  }
class C{  private void toggleQualityAndFormatSelector(View view){  ImageButton button=(ImageButton)view;  if (button.isSelected()) {    deselectQualityButton(button);  } else {    button.setSelected(true);    getActivity().findViewById(R.id.layout_yuv_qualities).setVisibility(View.VISIBLE);    getActivity().findViewById(R.id.layout_raw_qualities).setVisibility(View.VISIBLE);  }}  }
class C{  public void removeProjectedCount(int recursionLevel){  m_projectedCounts.removeCount(recursionLevel);}  }
class C{  public static int chargeElectricItem(ItemStack aStack,int aCharge,int aTier,boolean aIgnoreLimit,boolean aSimulate){  try {    if (isElectricItem(aStack)) {      int tTier=((ic2.api.item.IElectricItem)aStack.getItem()).getTier(aStack);      if (tTier < 0 || tTier == aTier || aTier == Integer.MAX_VALUE) {        if (!aIgnoreLimit && tTier >= 0)         aCharge=(int)Math.min(aCharge,V[Math.max(0,Math.min(V.length - 1,tTier))]);        if (aCharge > 0) {          int rCharge=(int)Math.max(0.0,ic2.api.item.ElectricItem.manager.charge(aStack,aCharge,tTier,true,aSimulate));          return rCharge + (rCharge * 4 > aTier ? aTier : 0);        }      }    }  } catch (  Throwable e) {  }  return 0;}  }
class C{  public static <NodeType extends ZyGraphNode<?>>String createTooltip(final AbstractZyGraph<NodeType,?> graph,final Node node){  Preconditions.checkNotNull(graph,"Error: Graph argument can not be null");  Preconditions.checkNotNull(node,"Error: Node argument can not be null");  final IZyNodeRealizer realizer=(IZyNodeRealizer)graph.getGraph().getRealizer(node);  if (realizer instanceof ZyProximityNodeRealizer<?>) {    return generateProximityNodeRealizer(graph,(ZyProximityNode<?>)realizer.getUserData().getNode());  } else {    final ZyLabelContent content=realizer.getNodeContent();    final boolean boldFirstLine=requiresBoldFirstLine(graph.getNode(node));    return HtmlGenerator.getHtml(content,GuiHelper.getMonospaceFont(),boldFirstLine);  }}  }
class C{  public LocalVariable visibleVariableByName(String name) throws AbsentInformationException {  validateStackFrame();  createVisibleVariables();  return visibleVariables.get(name);}  }
class C{  public ReportedData sendSimpleSearchForm(Connection con,Form searchForm,String searchService) throws XMPPException {  SimpleUserSearch search=new SimpleUserSearch();  search.setForm(searchForm);  search.setType(IQ.Type.SET);  search.setTo(searchService);  PacketCollector collector=con.createPacketCollector(new PacketIDFilter(search.getPacketID()));  con.sendPacket(search);  IQ response=(IQ)collector.nextResult(SmackConfiguration.getPacketReplyTimeout());  collector.cancel();  if (response == null) {    throw new XMPPException("No response from server on status set.");  }  if (response.getError() != null) {    throw new XMPPException(response.getError());  }  if (response instanceof SimpleUserSearch) {    return ((SimpleUserSearch)response).getReportedData();  }  return null;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @SuppressWarnings("LeakingThisInConstructor") public ThrottlesPreferencesPane(){  if (InstanceManager.getNullableDefault(ThrottlesPreferences.class) == null) {    InstanceManager.store(new ThrottlesPreferences(),ThrottlesPreferences.class);  }  ThrottlesPreferences tp=InstanceManager.getDefault(ThrottlesPreferences.class);  initComponents();  setComponents(tp);  checkConsistancy();  tp.addPropertyChangeListener(this);}  }
class C{  protected void endDocument() throws XMLStreamException, IOException {  this.writer.writeEndElement();  this.writer.writeEndElement();  this.writer.writeEndDocument();  this.writer.close();  this.zipStream.closeEntry();  this.zipStream.finish();}  }
class C{  @Override public void passivate(){  cleanupUserTransaction();  super.passivate();}  }
class C{  public boolean isRegMayDef(){  return (flags & REG_MAY_DEF) != 0;}  }
class C{  public static int writeInt(byte[] array,int offset,int v){  array[offset + 0]=(byte)(v >>> 24);  array[offset + 1]=(byte)(v >>> 16);  array[offset + 2]=(byte)(v >>> 8);  array[offset + 3]=(byte)(v >>> 0);  return SIZE_INT;}  }
class C{  public MXFCollection(Header header,List<E> entries,String name){  this.header=header;  this.entries=java.util.Collections.unmodifiableList(entries);  this.name=name;}  }
class C{  public int size(){  return values.size();}  }
class C{  public static boolean endsWithJavadoc(StringBuffer usercode){  String s=usercode.toString().trim();  if (!s.endsWith("*/"))   return false;  int i=s.lastIndexOf("/**");  if (i < 0)   return false;  return s.substring(i,s.length() - 2).indexOf("*/") < 0;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:51.783 -0500",hash_original_method="C2F32BB12488093B2694DF46B22F28A8",hash_generated_method="5FC61C32B37CC358D05CD0BB8A865408") public void warn(Object message){  log(Level.WARNING,String.valueOf(message),null);}  }
class C{  public static final ArrayList readListXml(InputStream in) throws XmlPullParserException, java.io.IOException {  XmlPullParser parser=Xml.newPullParser();  parser.setInput(in,null);  return (ArrayList)readValueXml(parser,new String[1]);}  }
class C{  public SourceProvider(ITypeRoot typeRoot,IDocument source,MethodDeclaration declaration){  this(typeRoot,declaration);  fSource=source;}  }
class C{  public void incFunctionExecutionExceptions(){  this._stats.incInt(_functionExecutionExceptions,1);  aggregateStats.incFunctionExecutionExceptions();}  }
class C{  public void rotate(){  mCurrentAngle.multiply(mAnglePerSample);  mCurrentAngle.fastNormalize();}  }
class C{  public boolean isDoubleSupportedAMD(){  return hasExtension("cl_amd_fp64");}  }
class C{  protected void decrementRepCount(){  moveRepHash[getRepHash()]--;}  }
class C{  public int rank(){  double eps=EPS;  double tol=Math.max(m,n) * s[0] * eps;  int r=0;  for (int i=0; i < s.length; i++) {    if (s[i] > tol) {      r++;    }  }  return r;}  }
class C{  public static long queryNumEntries(SQLiteDatabase db,String table,String selection,String[] selectionArgs){  String s=(!TextUtils.isEmpty(selection)) ? " where " + selection : "";  return longForQuery(db,"select count(*) from " + table + s,selectionArgs);}  }
class C{  public void pushValidatorInfo(ValidatorInfo info){  validatorStack.add(info);}  }
class C{  public static GpsTrailerCrypt generateAndInitializeNewUserDataEncryptingKey(int appId,SQLiteDatabase db){  try {    byte[] userDataKey=new byte[prefs.aesKeySize / 8];    new SecureRandom().nextBytes(userDataKey);    PublicKey publicKey=constructPublicKey();    Cipher cipher=Cipher.getInstance(INTERNAL_ASYMMETRIC_ENCRYPTION_ALGORITHM);    cipher.init(Cipher.ENCRYPT_MODE,publicKey);    byte[] cipherData=cipher.doFinal(userDataKey);    SQLiteStatement s=DbUtil.createOrGetStatement(db,"insert into USER_DATA_KEY (app_id, encrypted_key) values (?,?)");    s.bindLong(1,appId);    s.bindBlob(2,cipherData);    int userDataKeyId=(int)s.executeInsert();    return new GpsTrailerCrypt(userDataKeyId,userDataKey);  } catch (  Exception e) {    throw new IllegalStateException("Can't seem to encrypt a key",e);  }}  }
class C{  public void processParentCoverage(UberallsClient uberalls){  if (commenter.hasCoverageAvailable()) {    if (uberalls.isConfigured()) {      commenter.processParentCoverage(uberalls.getParentCoverage(diff.getBaseCommit()),diff.getBaseCommit(),diff.getBranch());    } else {      logger.info(LOGGING_TAG,"No Uberalls backend configured, skipping...");    }  } else {    logger.info(LOGGING_TAG,"No line coverage found, skipping...");  }}  }
class C{  private HttpResponse executePut(String bucketName,String objectName,Map<String,String> headerMap,Map<String,String> queryParamMap,String region,Object data,int length) throws InvalidBucketNameException, NoSuchAlgorithmException, InsufficientDataException, IOException, InvalidKeyException, NoResponseException, XmlPullParserException, ErrorResponseException, InternalException {  HttpResponse response=execute(Method.PUT,region,bucketName,objectName,headerMap,queryParamMap,"",data,length);  response.body().close();  return response;}  }
class C{  public void addWaypoint(Waypoint waypoint){synchronized (waypoints) {    waypoints.add(waypoint);  }}  }
class C{  public ServiceHost startService(Operation post,Service service){  if (service == null) {    throw new IllegalArgumentException("service is required");  }  if (isStopping()) {    post.fail(new IllegalStateException("ServiceHost not started"));    return this;  }  ProcessingStage stage=service.getProcessingStage();  if (isServiceStartingOrAvailable(stage)) {    post.complete();    return this;  }  if (service.getProcessingStage() == Service.ProcessingStage.STOPPED) {    log(Level.INFO,"Restarting service %s (%s)",service.getClass().getSimpleName(),post.getUri());  }  if (post.getUri() == null) {    post.setUri(UriUtils.buildUri(this,service.getClass()));  }  if (!post.hasReferer()) {    post.setReferer(post.getUri());  }  service.setHost(this);  URI serviceUri=post.getUri().normalize();  String servicePath=UriUtils.normalizeUriPath(serviceUri.getPath());  if (service.getSelfLink() == null) {    service.setSelfLink(servicePath);  }  if (post.getExpirationMicrosUtc() == 0) {    post.setExpiration(Utils.fromNowMicrosUtc(this.state.operationTimeoutMicros));  }  if (isHelperServicePath(servicePath)) {    if (!service.hasOption(Service.ServiceOption.UTILITY)) {      String errorMsg="Service is using an utility URI path but has not enabled " + ServiceOption.UTILITY;      log(Level.WARNING,errorMsg);      post.fail(new IllegalStateException(errorMsg));      return this;    }  } else   if (checkIfServiceExistsAndAttach(service,servicePath,post)) {    return this;  }  service.setProcessingStage(ProcessingStage.CREATED);  post.nestCompletion(null);  this.operationTracker.trackStartOperation(post);  if (!Utils.validateServiceOptions(this,service,post)) {    return this;  }  if (this.isAuthorizationEnabled() && post.getAuthorizationContext() == null) {    populateAuthorizationContext(post);  }  processServiceStart(ProcessingStage.INITIALIZING,service,post,post.hasBody());  return this;}  }
class C{  private int computeConstrainedBackoffCoefficient(int numFailedAttempts){  int n=Math.min(MAX_EXPONENT,numFailedAttempts);  int twoToThePowerOfN=1 << n;  return sRandom.nextInt(twoToThePowerOfN) + 1;}  }
class C{  public ElementType parent(){  return theType.parent();}  }
class C{  public void testStopAfterPause(){  int firstBatch=3;  int secondBatch=10;  EndToEndTestUtils.checkNotRecording();  EndToEndTestUtils.startRecording();  EndToEndTestUtils.checkUnderRecording();  EndToEndTestUtils.sendGps(firstBatch);  EndToEndTestUtils.pauseRecording();  EndToEndTestUtils.checkUnderPaused();  EndToEndTestUtils.sendGps(secondBatch,firstBatch);  EndToEndTestUtils.stopRecording(true);  checkTrackLocation(firstBatch,1,0);  EndToEndTestUtils.SOLO.goBack();  EndToEndTestUtils.checkNotRecording();}  }
class C{  public Object remove(int key){  Entry tab[]=table;  int hash=key;  int index=(hash & 0x7FFFFFFF) % tab.length;  for (Entry e=tab[index], prev=null; e != null; prev=e, e=e.next) {    if (e.hash == hash) {      if (prev != null) {        prev.next=e.next;      } else {        tab[index]=e.next;      }      count--;      Object oldValue=e.value;      e.value=null;      return oldValue;    }  }  return null;}  }
class C{  public void deactivateEncryption(){  this.encrypt=false;}  }
class C{  @Deprecated public void pauseAllActions(CCNode target){  this.pause(target);}  }
class C{  public RemoteCustomerOrderDeliveryDetailServiceImpl(final GenericDTOService<CustomerOrderDeliveryDetailDTO> customerOrderDeliveryDetailDTOGenericDTOService){  super(customerOrderDeliveryDetailDTOGenericDTOService);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:49.474 -0400",hash_original_method="DBD2848452E30EF8C99C53C0106675C8",hash_generated_method="CB837E92AA750BCEDB79E830FF7C9DB3") private static boolean contains(String value,int start,int length,String criteria1,String criteria2,String criteria3,String criteria4){  return contains(value,start,length,new String[]{criteria1,criteria2,criteria3,criteria4});}  }
class C{  public void elementRemoved(TimedElement e){}  }
class C{  @Deprecated public static String toString(byte[] input) throws IOException {  return new String(input);}  }
class C{  public CeylonRepoManagerBuilder noSystemRepo(boolean noSystemRepo){  this.noSystemRepo=noSystemRepo;  return this;}  }
class C{  @Override protected void finalize(){  try {    if (socket != null) {      socket.close();      socket=null;    }    threadService.terminate();  } catch (  Exception e) {    if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {      SNMP_ADAPTOR_LOGGER.logp(Level.FINER,dbgTag,"finalize","Exception in finalizer",e);    }  }}  }
class C{  public SearchSourceBuilder timeout(TimeValue timeout){  this.timeoutInMillis=timeout.millis();  return this;}  }
class C{  public InstantiatedType instantiate(List<ReferenceType> typeArguments){  if (typeArguments.size() != this.getTypeParameters().size()) {    throw new IllegalArgumentException("number of arguments and parameters must match");  }  Substitution<ReferenceType> substitution=Substitution.forArgs(this.getTypeParameters(),typeArguments);  for (int i=0; i < parameters.size(); i++) {    if (!parameters.get(i).getUpperTypeBound().isUpperBound(typeArguments.get(i),substitution)) {      throw new IllegalArgumentException("type argument " + typeArguments.get(i) + " does not match parameter bound "+ parameters.get(i).getUpperTypeBound());    }  }  return this.apply(substitution);}  }
class C{  public static void takeScreenShot(Context context,View view){  Bitmap bitmap=loadBitmapFromView(context,view);  String mPath=Environment.getExternalStorageDirectory() + File.separator + context.getPackageName()+ "."+ System.currentTimeMillis()+ ".png";  File imageFile=new File(mPath);  try {    OutputStream fout=new FileOutputStream(imageFile);    bitmap.compress(Bitmap.CompressFormat.PNG,90,fout);    Toast.makeText(context,"Screenshot saved: " + mPath,Toast.LENGTH_SHORT).show();    Log.i("Screenshot saved",mPath);    fout.flush();    fout.close();  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public boolean forwardIfCurrentAndNoWordAfter(String str){  int c=pos;  if (forwardIfCurrent(str)) {    if (!isCurrentBetween('a','z') && !isCurrent('_'))     return true;  }  pos=c;  return false;}  }
class C{  public synchronized void deleteObserver(Observer o){  obs.removeElement(o);}  }
class C{  public static TaskExecution createAndStoreEmptyTaskExecution(TaskRepository taskRepository){  return taskRepository.createTaskExecution();}  }
class C{  public void testWifiIdle(){  NetworkTemplate template=NetworkTemplate.buildTemplateWifiWildcard();  fetchStats(template);}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder(super.toString());  sb.append("IssuingDistributionPoint [\n  ");  if (distributionPoint != null) {    sb.append(distributionPoint);  }  if (revocationReasons != null) {    sb.append(revocationReasons);  }  sb.append((hasOnlyUserCerts) ? ("  Only contains user certs: true") : ("  Only contains user certs: false")).append("\n");  sb.append((hasOnlyCACerts) ? ("  Only contains CA certs: true") : ("  Only contains CA certs: false")).append("\n");  sb.append((hasOnlyAttributeCerts) ? ("  Only contains attribute certs: true") : ("  Only contains attribute certs: false")).append("\n");  sb.append((isIndirectCRL) ? ("  Indirect CRL: true") : ("  Indirect CRL: false")).append("\n");  sb.append("]\n");  return sb.toString();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void logAppend(long streamId,IgfsPath path,IgfsMode mode,int bufSize){  addEntry(new Entry(TYPE_OPEN_OUT,path.toString(),mode,streamId,bufSize,null,true,null,null,null,null,null,null,null,null,null,null,null,null,null));}  }
class C{  @Override protected void disconnectTransactions(StoredBlock oldBlock) throws PrunedException, BlockStoreException {  checkState(lock.isHeldByCurrentThread());  blockStore.beginDatabaseBatchWrite();  try {    StoredUndoableBlock undoBlock=blockStore.getUndoBlock(oldBlock.getHeader().getHash());    if (undoBlock == null)     throw new PrunedException(oldBlock.getHeader().getHash());    TransactionOutputChanges txOutChanges=undoBlock.getTxOutChanges();    for (    StoredTransactionOutput out : txOutChanges.txOutsSpent)     blockStore.addUnspentTransactionOutput(out);    for (    StoredTransactionOutput out : txOutChanges.txOutsCreated)     blockStore.removeUnspentTransactionOutput(out);  } catch (  PrunedException e) {    blockStore.abortDatabaseBatchWrite();    throw e;  }catch (  BlockStoreException e) {    blockStore.abortDatabaseBatchWrite();    throw e;  }}  }
class C{  public String describeParams(){  StringBuilder sb=new StringBuilder();  sb.append("\t").append("maxQueryTerms  : ").append(maxQueryTerms).append("\n");  sb.append("\t").append("minWordLen     : ").append(minWordLen).append("\n");  sb.append("\t").append("maxWordLen     : ").append(maxWordLen).append("\n");  sb.append("\t").append("fieldNames     : ");  String delim="";  for (  String fieldName : fieldNames) {    sb.append(delim).append(fieldName);    delim=", ";  }  sb.append("\n");  sb.append("\t").append("boost          : ").append(boost).append("\n");  sb.append("\t").append("minTermFreq    : ").append(minTermFreq).append("\n");  sb.append("\t").append("minDocFreq     : ").append(minDocFreq).append("\n");  return sb.toString();}  }
class C{  protected Timer(final Player player){  timerPlayer=player;}  }
class C{  @Override public void onServerUpdate(ServerBartender server){  if (server.isUp()) {    _tableManager.onServerStart();  }}  }
class C{  public Object newValue(){  return newVal;}  }
class C{  public X509Certificate generateSelfSigned(X500Name name,long validity,PublicKey publicKey,PrivateKey privateKey,SignatureType signatureType,BigInteger serialNumber) throws CryptoException {  return generateSelfSigned(name,validity,publicKey,privateKey,signatureType,serialNumber,null,new BouncyCastleProvider());}  }
class C{  public boolean useEnergy(double amount){  if (canUseEnergy(amount) && !FMLCommonHandler.instance().getEffectiveSide().isClient()) {    energyStored-=amount;    return true;  }  return false;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  String DEMHeader=null;  int row, col, x, y;  int progress=0;  double z;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  boolean flag=false;  double flowDir=0;  double pitElev=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      DEMHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster pntr=new WhiteboxRaster(inputHeader,"r");    int rows=pntr.getNumberRows();    int cols=pntr.getNumberColumns();    double noData=pntr.getNoDataValue();    WhiteboxRaster DEM=new WhiteboxRaster(DEMHeader,"r");    if (DEM.getNumberRows() != rows || DEM.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,-999);    output.setPreferredPalette(DEM.getPreferredPalette());    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        flowDir=pntr.getValue(row,col);        if (output.getValue(row,col) == -999 && flowDir != noData) {          flag=false;          x=col;          y=row;          do {            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / LnOf2);              x+=dX[c];              y+=dY[c];              if (output.getValue(y,x) != -999) {                pitElev=DEM.getValue(y,x) - output.getValue(y,x);                flag=true;              }            } else {              pitElev=DEM.getValue(y,x);              flag=true;            }          } while (!flag);          flag=false;          x=col;          y=row;          do {            z=DEM.getValue(y,x) - pitElev;            output.setValue(y,x,z);            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / LnOf2);              x+=dX[c];              y+=dY[c];              z=output.getValue(y,x);              if (z != -999) {                flag=true;              }            } else {              output.setValue(y,x,0);              flag=true;            }          } while (!flag);        } else         if (flowDir == noData) {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  CSVFormat(final char delimiter,final Character quoteChar,final Quote quotePolicy,final Character commentStart,final Character escape,final boolean ignoreSurroundingSpaces,final boolean ignoreEmptyLines,final String recordSeparator,final String nullString,final String[] header,final boolean skipHeaderRecord){  if (isLineBreak(delimiter)) {    throw new IllegalArgumentException("The delimiter cannot be a line break");  }  this.delimiter=delimiter;  this.quoteChar=quoteChar;  this.quotePolicy=quotePolicy;  this.commentStart=commentStart;  this.escape=escape;  this.ignoreSurroundingSpaces=ignoreSurroundingSpaces;  this.ignoreEmptyLines=ignoreEmptyLines;  this.recordSeparator=recordSeparator;  this.nullString=nullString;  this.header=header == null ? null : header.clone();  this.skipHeaderRecord=skipHeaderRecord;}  }
class C{  private boolean validateGroupChannelField(){  return swingChannelValueField.isValid();}  }
class C{  public static <E>Set<E> of(E e1,E e2,E e3,E e4,E e5,E e6,E e7,E e8){  return new ImmutableCollections.SetN<E>(e1,e2,e3,e4,e5,e6,e7,e8);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-05 00:22:07.157 -0400",hash_original_method="9A1D75666406C8990BC1AA416CDF9558",hash_generated_method="F777E5D4D97E11C071201352C1E45DFB") public static int classModifiers(){  return PUBLIC | PROTECTED | PRIVATE| ABSTRACT| STATIC| FINAL| STRICT;}  }
class C{  public void addPreMessageReceivedEventListener(Executor executor,PreMessageReceivedEventListener listener){  preMessageReceivedEventListeners.add(new ListenerRegistration<PreMessageReceivedEventListener>(listener,executor));}  }
class C{  public static void deleteByColumnValue(final CConnection connection,final String tableName,final String columnName,final int columnValue) throws CouldntDeleteException {  Preconditions.checkNotNull(connection,"IE00487: Connection argument can not be null");  Preconditions.checkNotNull(tableName,"IE00499: Table name argument can not be null");  Preconditions.checkNotNull(columnName,"IE00593: Column name argument can not be null");  Preconditions.checkArgument(columnValue >= 0,"IE00594: Column value argument can not be smaller then zero");  try {    connection.executeUpdate(String.format("DELETE FROM %s WHERE %s = %d",tableName,columnName,columnValue),true);  } catch (  final SQLException exception) {    throw new CouldntDeleteException(exception);  }}  }
class C{  public void appendToSubVer(String name,String version,@Nullable String comments){  checkSubVerComponent(name);  checkSubVerComponent(version);  if (comments != null) {    checkSubVerComponent(comments);    subVer=subVer.concat(String.format(Locale.US,"%s:%s(%s)/",name,version,comments));  } else {    subVer=subVer.concat(String.format(Locale.US,"%s:%s/",name,version));  }}  }
class C{  protected Unit(final UnitType type,final PlayerID owner,final GameData data){  super(data);  m_type=Preconditions.checkNotNull(type);  m_uid=new GUID();  setOwner(owner);}  }
class C{  public Command show(int top,int bottom,int left,int right){  return show(top,bottom,left,right,false,true);}  }
class C{  private JsonToken readLiteral() throws IOException {  value=nextLiteral(true);  if (valueLength == 0) {    throw syntaxError("Expected literal value");  }  token=decodeLiteral();  if (token == JsonToken.STRING) {    checkLenient();  }  return token;}  }
class C{  private void required(String attributeName,String attributValue) throws ApplicationException {  if (StringUtil.isEmpty(attributValue))   throw new ApplicationException("invalid attribute constellation for the tag zip","attribute [" + attributeName + "] is required, if action is ["+ action+ "]");}  }
class C{  public EventException(){  cause=null;}  }
class C{  protected final Date assign(final long serialNumber){  this.serialNumber=serialNumber;  return this;}  }
class C{  private static double limit(double min,double max,double val){  return (val < min) ? min : ((val > max) ? max : val);}  }
class C{  public void mark(final Label label){  mv.visitLabel(label);}  }
class C{  public String currentNodeId(){  return this.currentNodeId;}  }
class C{  public CertificateVerify(byte[] hash){  if (hash == null || hash.length == 0) {    fatalAlert(AlertProtocol.INTERNAL_ERROR,"INTERNAL ERROR: incorrect certificate verify hash");  }  this.signedHash=hash;  length=hash.length + 2;}  }
class C{  public CLDevice[] createSubDevicesByCounts(long... computeUnitsForEachSubDevice){  Pointer<SizeT> pProperties=allocateSizeTs(1 + computeUnitsForEachSubDevice.length + 1+ 1);  int i=0;  pProperties.setSizeTAtIndex(i++,CL_DEVICE_PARTITION_BY_COUNTS);  for (  long count : computeUnitsForEachSubDevice) {    pProperties.setSizeTAtIndex(i++,count);  }  pProperties.setSizeTAtIndex(i++,CL_DEVICE_PARTITION_BY_COUNTS_LIST_END);  return createSubDevices(pProperties);}  }
class C{  public void registerControlFlowEdge(int src,int dst,Frame[] frames,boolean isExceptionEdge){  if (!nodeRegistered)   throw new IllegalStateException("CFGGenrator.registerControlFlowEdge() cannot be called unless registerMethodNode() was called first");  if (frames == null)   throw new IllegalArgumentException("null given");  CFGFrame srcFrame=(CFGFrame)frames[src];  Frame dstFrame=frames[dst];  if (srcFrame == null)   throw new IllegalArgumentException("expect given frames to know srcFrame for " + src);  if (dstFrame == null) {    return;  }  srcFrame.successors.put(dst,(CFGFrame)dstFrame);  AbstractInsnNode srcNode=currentMethod.instructions.get(src);  AbstractInsnNode dstNode=currentMethod.instructions.get(dst);  BytecodeInstruction srcInstruction=BytecodeInstructionPool.getInstance(classLoader).getInstruction(className,methodName,src,srcNode);  BytecodeInstruction dstInstruction=BytecodeInstructionPool.getInstance(classLoader).getInstruction(className,methodName,dst,dstNode);  srcInstruction.setCFGFrame(srcFrame);  if (dstInstruction == null)   throw new IllegalStateException("expect BytecodeInstructionPool to know the instructions in the method of this edge");  if (null == rawGraph.addEdge(srcInstruction,dstInstruction,isExceptionEdge))   logger.error("internal error while adding edge");}  }
class C{  protected int retrieveEllipsisStartPosition(int start,int end){  this.scanner.resetTo(start,end);  try {    int token;    while ((token=this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {switch (token) {case TerminalTokens.TokenNameELLIPSIS:        return this.scanner.startPosition - 1;    }  }} catch (InvalidInputException e) {}return -1;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void detach(){  this.pool.detach();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4mfPackage.EXEC_MODULE__EXEC_MODULE:    return basicSetExecModule(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public Triple(final P prim,final S sec,final T third){  this.prim=prim;  this.sec=sec;  this.third=third;}  }
class C{  public void invalidate(){  setShouldCalcPreferredSize(true);  getComponentForm().revalidate();}  }
class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.MODULE_NAMESPACE_VIRTUAL_TYPE__AST_ELEMENT:    setAstElement((EObject)newValue);  return;case TypesPackage.MODULE_NAMESPACE_VIRTUAL_TYPE__MODULE:setModule((TModule)newValue);return;case TypesPackage.MODULE_NAMESPACE_VIRTUAL_TYPE__DECLARED_DYNAMIC:setDeclaredDynamic((Boolean)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void removePropertyChangeListener(java.beans.PropertyChangeListener listener){  if (listener == null) {    String msg=Logging.getMessage("nullValue.ListenerIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  this.getChangeSupport().addPropertyChangeListener(listener);}  }
class C{  public Class<?> loadClassImpl(String name,boolean resolve) throws ClassNotFoundException {  if (_entryCache != null) {    ClassEntry entry=_entryCache.get(name);    if (entry != null) {      Class<?> cl=entry.getEntryClass();      if (cl != null)       return cl;    }  }  Class<?> cl=findLoadedClass(name);  if (cl != null) {    if (resolve)     resolveClass(cl);    return cl;  }  if (_lifecycle.isDestroyed()) {    log().fine(L().l("Loading class {0} when class loader {1} has been closed.",name,this));    return super.loadClass(name,resolve);  }  boolean normalJdkOrder=isNormalJdkOrder(name);  if (_lifecycle.isBeforeInit())   init();  if (normalJdkOrder) {    ClassLoader parent=getParent();    try {      if (parent instanceof DynamicClassLoader)       cl=((DynamicClassLoader)parent).loadClassImpl(name,resolve); else       if (parent != null) {        cl=Class.forName(name,false,parent);      } else {        cl=findSystemClass(name);      }    } catch (    ClassNotFoundException e) {    }catch (    Error e) {      if (!(parent instanceof DynamicClassLoader)) {        log().finer(e + "\n  while loading " + name+ " (in "+ this+ ")");      }      throw e;    }    if (cl == null) {      cl=findImportClass(name);    }    if (cl == null) {      cl=findClassImpl(name);    }  } else {    try {      cl=findClass(name);    } catch (    ClassNotFoundException e) {      ClassLoader parent=getParent();      if (parent != null)       cl=Class.forName(name,false,parent); else       cl=findSystemClass(name);    }  }  if (resolve && cl != null)   resolveClass(cl);  return cl;}  }
class C{  public void selectDevice(ConnectableDevice device){  if (device != null) {    pendingDevice=device;    pendingDevice.addListener(this);    if (listener != null) {      listener.onPrepareDevice(device);    }    if (!device.isConnected()) {      device.connect();    } else {      onDeviceReady(device);    }  } else {    cleanupPending();  }}  }
class C{  public static AsymmetricKeyParameter createKey(InputStream inStr) throws IOException {  return createKey(SubjectPublicKeyInfo.getInstance(new ASN1InputStream(inStr).readObject()));}  }
class C{  public MutablePeriod(){  super(0L,null,null);}  }
class C{  public static ItemStack findMatchingRecipe(InventoryCrafting inv,World world){  ItemStack[] dmgItems=new ItemStack[2];  for (int i=0; i < inv.getSizeInventory(); i++) {    if (inv.getStackInSlot(i) != null) {      if (dmgItems[0] == null) {        dmgItems[0]=inv.getStackInSlot(i);      } else {        dmgItems[1]=inv.getStackInSlot(i);        break;      }    }  }  if ((dmgItems[0] == null) || (dmgItems[0].getItem() == null)) {    return null;  }  if ((dmgItems[1] != null) && (dmgItems[0].getItem() == dmgItems[1].getItem()) && (dmgItems[0].stackSize == 1)&& (dmgItems[1].stackSize == 1)&& dmgItems[0].getItem().isRepairable()) {    Item theItem=dmgItems[0].getItem();    int dmgDiff0=theItem.getMaxDamage() - dmgItems[0].getItemDamageForDisplay();    int dmgDiff1=theItem.getMaxDamage() - dmgItems[1].getItemDamageForDisplay();    int value=dmgDiff0 + dmgDiff1 + theItem.getMaxDamage() * 5 / 100;    int solve=Math.max(0,theItem.getMaxDamage() - value);    return new ItemStack(dmgItems[0].getItem(),1,solve);  }  for (  IRecipe recipe : (List<IRecipe>)CraftingManager.getInstance().getRecipeList()) {    if (recipe.matches(inv,world)) {      return recipe.getCraftingResult(inv);    }  }  return null;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(entitygetentityname.class,args);}  }
class C{  public HistoryItemPanel(int historyIndex,boolean queryFromConnectedApplication,String query,JTextArea queryingTextArea){  initComponents();  this.historyIndex=historyIndex;  this.queryFromConnectedApplication=queryFromConnectedApplication;  this.query=query;  this.queryingTextArea=queryingTextArea;  decorateHistoryItem();}  }
class C{  public void acquire(){  int n=refCount.incrementAndGet();}  }
class C{  public static void drawShape(DrawContext dc,String shape,double width,double height,int glMode,int cornerRadius){  if (!shape.equals(AVKey.SHAPE_NONE))   drawBuffer(dc,glMode,createShapeBuffer(shape,width,height,cornerRadius,null));}  }
class C{  @Override public void run(){  amIActive=true;  boolean isInputRaster=true;  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".shp")) {    isInputRaster=false;  }  String outputFile=args[1];  if (inputFile.isEmpty() || outputFile.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  if (inputFile.endsWith(".dep") && outputFile.endsWith(".shp")) {    outputFile=outputFile.replace(".shp",".dep");  }  if (inputFile.endsWith(".shp") && outputFile.endsWith(".dep")) {    outputFile=outputFile.replace(".dep",".shp");  }  try {    if (isInputRaster) {      String inputDataFile=inputFile.replace(".dep",".tas");      String outputDataFile=outputFile.replace(".dep",".tas");      FileUtilities.copyFile(new File(inputFile),new File(outputFile));      FileUtilities.copyFile(new File(inputDataFile),new File(outputDataFile));    } else {      File file=new File(inputFile);      if (file.exists()) {        FileUtilities.copyFile(new File(inputFile),new File(outputFile));      } else {        showFeedback("The input file does not exist.");        return;      }      file=new File(inputFile.replace(".shp",".shx"));      if (file.exists()) {        FileUtilities.copyFile(file,new File(outputFile.replace(".shp",".shx")));      }      file=new File(inputFile.replace(".shp",".dbf"));      if (file.exists()) {        FileUtilities.copyFile(file,new File(outputFile.replace(".shp",".dbf")));      }      file=new File(inputFile.replace(".shp",".prj"));      if (file.exists()) {        FileUtilities.copyFile(file,new File(outputFile.replace(".shp",".prj")));      }      file=new File(inputFile.replace(".shp",".sbn"));      if (file.exists()) {        FileUtilities.copyFile(file,new File(outputFile.replace(".shp",".sbn")));      }      file=new File(inputFile.replace(".shp",".sbx"));      if (file.exists()) {        FileUtilities.copyFile(file,new File(outputFile.replace(".shp",".sbx")));      }    }    showFeedback("Operation complete.");  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void printCoverage(HttpServletRequest request,HttpServletResponse response,String pathPrefix,String libName,CoverageAttributeTable cat,String covname) throws ServletException, IOException {  PrintWriter out=response.getWriter();  out.println("<H3><A NAME=\"" + libName + "_"+ covname+ "\">Coverage "+ buildURL(request,response,pathPrefix,"",covname)+ " for Library <A HREF=\"#"+ libName+ "\">"+ libName+ "</A></H3>");  HtmlListElement list=new HtmlListElement();  list.addElement("Description: " + cat.getCoverageDescription(covname));  list.addElement("Topology Level: " + cat.getCoverageTopologyLevel(covname));  String fcsURL=buildURL(request,response,pathPrefix,"fcs?" + Data.RowSelectParam + "="+ Data.RowSelectAll,"fcs");  list.addElement("Feature Class Schema: " + fcsURL);  CoverageTable ct=cat.getCoverageTable(covname);  for (Iterator i=ct.getFeatureClasses().values().iterator(); i.hasNext(); ) {    FeatureClassInfo fci=(FeatureClassInfo)i.next();    fci.close();  }  Map ftypeinfo=new TreeMap(ct.getFeatureTypeInfo());  if (ftypeinfo.size() == 0) {    list.addElement("No Feature Types in FCA");  } else {    HtmlListElement flist=new HtmlListElement("Feature Types (from " + buildURL(request,response,pathPrefix,"fca") + ")");    list.addElement(flist);    for (Iterator i=ftypeinfo.values().iterator(); i.hasNext(); ) {      CoverageTable.FeatureClassRec fcr=(CoverageTable.FeatureClassRec)i.next();      String name=fcr.feature_class.toLowerCase();      String desc=fcr.description;      String tstring="[unknown] ";      String suffix="";switch (fcr.type) {case CoverageTable.TEXT_FEATURETYPE:        tstring="[text feature] ";      suffix=".tft";    break;case CoverageTable.EDGE_FEATURETYPE:  tstring="[edge feature] ";suffix=".lft";break;case CoverageTable.AREA_FEATURETYPE:tstring="[area feature] ";suffix=".aft";break;case CoverageTable.UPOINT_FEATURETYPE:FeatureClassInfo fci=ct.getFeatureClassInfo(name);char type=(fci != null) ? fci.getFeatureType() : CoverageTable.SKIP_FEATURETYPE;if (type == CoverageTable.EPOINT_FEATURETYPE) {tstring="[entity point feature] ";} else if (type == CoverageTable.CPOINT_FEATURETYPE) {tstring="[connected point feature] ";} else {tstring="[missing point feature] ";}suffix=".pft";break;case CoverageTable.COMPLEX_FEATURETYPE:tstring="[complex feature] ";suffix=".cft";break;default :tstring="[unknown] ";suffix="";}String url=buildURL(request,response,pathPrefix,name + suffix,name);flist.addElement(url + ": " + tstring+ desc);}}try {HtmlListElement flist=new HtmlListElement("Feature Types (from " + fcsURL + ")");boolean generateflist=false;DcwRecordFile fcs=new DcwRecordFile(ct.getDataPath() + File.separator + "fcs"+ (ct.appendDot ? "." : ""));int featureClassColumn=fcs.whatColumn("feature_class");int table1Column=fcs.whatColumn("table1");List fcsl=new ArrayList(fcs.getColumnCount());while (fcs.parseRow(fcsl)) {String featureclass=((String)fcsl.get(featureClassColumn)).toLowerCase();String table1=((String)fcsl.get(table1Column)).toLowerCase();if (!ftypeinfo.containsKey(featureclass)) {ftypeinfo.put(featureclass,null);String type=null;if (table1.endsWith(".cft")) {type="complex feature";} else if (table1.endsWith(".pft")) {type="point feature";} else if (table1.endsWith(".lft")) {type="line feature";} else if (table1.endsWith(".aft")) {type="area feature";} else if (table1.endsWith(".tft")) {type="text feature";}if (type != null) {generateflist=true;flist.addElement(type + " " + buildURL(request,response,pathPrefix,table1,featureclass));}}}if (generateflist) {list.addElement(flist);}fcs.close();} catch (FormatException fe) {list.addElement("no fcs");}list.generate(out);}  }
class C{  public static boolean isAutoDegradeMaxSize(){  return autoDegradeMaxSize;}  }
class C{  @Override public void onNewIntent(Intent i){  super.onNewIntent(i);  if (mojiInputLayout.handleIntent(i))   return;  if (Moji.ACTION_LOCKED_CATEGORY_CLICK.equals(i.getAction())) {    lockedCategoryClick(i.getStringExtra(Moji.EXTRA_CATEGORY_NAME));  }}  }
class C{  protected Command executeSendCommand(SendCommandTask task,long timeout) throws PDUException, ResponseTimeoutException, InvalidResponseException, NegativeResponseException, IOException {  int seqNum=sequence.nextValue();  PendingResponse<Command> pendingResp=new PendingResponse<Command>(timeout);  pendingResponse.put(seqNum,pendingResp);  try {    task.executeTask(connection().getOutputStream(),seqNum);  } catch (  IOException e) {    logger.error("Failed sending " + task.getCommandName() + " command",e);    pendingResponse.remove(seqNum);    throw e;  }  try {    pendingResp.waitDone();    logger.debug("{} response received",task.getCommandName());  } catch (  ResponseTimeoutException e) {    pendingResponse.remove(seqNum);    logger.debug("Response timeout for {} with sessionIdSequence number {}",task.getCommandName(),seqNum);    throw e;  }catch (  InvalidResponseException e) {    pendingResponse.remove(seqNum);    throw e;  }  Command resp=pendingResp.getResponse();  validateResponse(resp);  return resp;}  }
class C{  public MoreLikeThisQueryBuilder queryName(String queryName){  this.queryName=queryName;  return this;}  }
class C{  public static int leastSignificantBit(final long value){  if (value == 0L)   return -1;  if ((value & 0xFFL) != 0)   return LEAST_SIGNIFICANT_BIT[(int)((value >>> 0) & 0xFF)] + 0;  if ((value & 0xFFFFL) != 0)   return LEAST_SIGNIFICANT_BIT[(int)((value >>> 8) & 0xFF)] + 8;  if ((value & 0xFFFFFFL) != 0)   return LEAST_SIGNIFICANT_BIT[(int)((value >>> 16) & 0xFF)] + 16;  if ((value & 0xFFFFFFFFL) != 0)   return LEAST_SIGNIFICANT_BIT[(int)((value >>> 24) & 0xFF)] + 24;  if ((value & 0xFFFFFFFFFFL) != 0)   return LEAST_SIGNIFICANT_BIT[(int)((value >>> 32) & 0xFF)] + 32;  if ((value & 0xFFFFFFFFFFFFL) != 0)   return LEAST_SIGNIFICANT_BIT[(int)((value >>> 40) & 0xFF)] + 40;  if ((value & 0xFFFFFFFFFFFFFFL) != 0)   return LEAST_SIGNIFICANT_BIT[(int)((value >>> 48) & 0xFF)] + 48;  return LEAST_SIGNIFICANT_BIT[(int)((value >>> 56) & 0xFFL)] + 56;}  }
class C{  public AbSlidingButton(Context context,AttributeSet attrs){  super(context,attrs);  init(context);}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == StructuralTypeRef.class) {switch (baseFeatureID) {case TypeRefsPackage.STRUCTURAL_TYPE_REF__AST_STRUCTURAL_MEMBERS:      return ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM__AST_STRUCTURAL_MEMBERS;case TypeRefsPackage.STRUCTURAL_TYPE_REF__STRUCTURAL_TYPE:    return ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM__STRUCTURAL_TYPE;case TypeRefsPackage.STRUCTURAL_TYPE_REF__GEN_STRUCTURAL_MEMBERS:  return ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM__GEN_STRUCTURAL_MEMBERS;case TypeRefsPackage.STRUCTURAL_TYPE_REF__POSTPONED_SUBSTITUTIONS:return ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM__POSTPONED_SUBSTITUTIONS;default :return -1;}}if (baseClass == ParameterizedTypeRefStructural.class) {switch (baseFeatureID) {default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public BoringLayout replaceOrMake(CharSequence source,TextPaint paint,int outerwidth,Alignment align,float spacingmult,float spacingadd,BoringLayout.Metrics metrics,boolean includepad){  replaceWith(source,paint,outerwidth,align,spacingmult,spacingadd);  mEllipsizedWidth=outerwidth;  mEllipsizedStart=0;  mEllipsizedCount=0;  init(source,paint,outerwidth,align,spacingmult,spacingadd,metrics,includepad,true);  return this;}  }
class C{  protected Segment(long millisecond){  this.segmentNumber=calculateSegmentNumber(millisecond);  this.segmentStart=SegmentedTimeline.this.startTime + this.segmentNumber * SegmentedTimeline.this.segmentSize;  this.segmentEnd=this.segmentStart + SegmentedTimeline.this.segmentSize - 1;  this.millisecond=millisecond;}  }
class C{  public void complainOnDeferredFinalChecks(BlockScope scope,FlowInfo flowInfo){  for (int i=0; i < this.assignCount; i++) {    VariableBinding variable=this.finalVariables[i];    if (variable == null)     continue;    boolean complained=false;    if (variable instanceof FieldBinding) {      if (flowInfo.isPotentiallyAssigned((FieldBinding)variable)) {        complained=true;        scope.problemReporter().duplicateInitializationOfBlankFinalField((FieldBinding)variable,this.finalAssignments[i]);      }    } else {      if (flowInfo.isPotentiallyAssigned((LocalVariableBinding)variable)) {        complained=true;        scope.problemReporter().duplicateInitializationOfFinalLocal((LocalVariableBinding)variable,this.finalAssignments[i]);      }    }    if (complained) {      FlowContext context=this.parent;      while (context != null) {        context.removeFinalAssignmentIfAny(this.finalAssignments[i]);        context=context.parent;      }    }  }}  }
class C{  public void fatalError(SAXParseException spe) throws SAXException {  String message="Fatal Error: " + getParseExceptionInfo(spe);  throw new SAXException(message);}  }
class C{  public InputStream post(String name1,Object value1,String name2,Object value2) throws IOException {  postCookies();  setParameter(name1,value1);  setParameter(name2,value2);  return doPost();}  }
class C{  public BloomFilter(final Hasher hash,final double c,final int n,final int k,final int metric){  this.h=hash;  this.expectedNumberOfFilterElements=n;  hash.setNumberOfRandomKeys(k);  this.k=k;  this.bitsPerElement=c;  this.bitSetSize=(int)Math.ceil(c * n);  hash.setMaxValue(bitSetSize);  numberOfAddedElements=0;  this.bitset=new BitSet(bitSetSize);  lastID++;  this.id=lastID;  this.metric=metric;}  }
class C{  public XmlTransformer(){  m_transformer=null;  m_source=null;}  }
class C{  public void add(int index,int[] intArray){  if (index > size) {    throwException2(index);  }  int addCount=intArray.length;  ensureCapacity(size + addCount);  int moveCount=size - index;  if (moveCount > 0)   System.arraycopy(data,index,data,index + addCount,moveCount);  System.arraycopy(data,index,intArray,0,moveCount);  size+=addCount;}  }
class C{  public CubicLineChart(XYMultipleSeriesDataset dataset,XYMultipleSeriesRenderer renderer,float smoothness){  super(dataset,renderer);  firstMultiplier=smoothness;  secondMultiplier=1 - firstMultiplier;}  }
class C{  protected int interpolateColor(int c1,int c2,float v){  return (int)ev.evaluate(v,c1,c2);}  }
class C{  public boolean isLacksThisOrSuperUsage(){  return lacksThisOrSuperUsage;}  }
class C{  public synchronized void close(){  if (isOpen()) {    writeTail();    super.close();  }}  }
class C{  void offline(){  if (!disconnected && !cleanSession) {    Exception e=new Exception("Android offline");    connectionLost(e);  }}  }
class C{  public RealVector(int dimension,short[] sparseOffsets){  this.isSparse=true;  this.dimension=dimension;  for (  Short offset : sparseOffsets) {    if ((offset == 0) || (offset > dimension) || (offset < -1 * dimension)) {      throw new IllegalArgumentException("Offsets too large for dimension!");    }  }  this.sparseOffsets=sparseOffsets;}  }
class C{  public static FunctionTable buildTable(){  String[] names=initNames();  FunctionTable functions=FunctionTable.allocate(JNIFunctions.FUNCTIONCOUNT);  RVMClass cls=TypeReference.JNIFunctions.peekType().asClass();  if (VM.VerifyAssertions)   VM._assert(cls.isInstantiated());  for (  RVMMethod mth : cls.getDeclaredMethods()) {    String methodName=mth.getName().toString();    int jniIndex=indexOf(names,methodName);    if (jniIndex != -1) {      functions.set(jniIndex,mth.getCurrentEntryCodeArray());    }  }  return functions;}  }
class C{  public void startDocument() throws IOException {}  }
class C{  public Constant findConstant(String constantName){  return constants.get(constantName);}  }
class C{  private MemberDefinition matchMethod(Environment env,ClassDefinition accessor,Identifier methodName,Type[] argumentTypes,boolean isAnonConstCall,Identifier accessPackage) throws AmbiguousMember, ClassNotFound {  if (allMethods == null || !allMethods.isFrozen()) {    throw new CompilerError("matchMethod called early");  }  MemberDefinition tentative=null;  List candidateList=null;  Iterator methods=allMethods.lookupName(methodName);  while (methods.hasNext()) {    MemberDefinition method=(MemberDefinition)methods.next();    if (!env.isApplicable(method,argumentTypes)) {      continue;    }    if (accessor != null) {      if (!accessor.canAccess(env,method)) {        continue;      }    } else     if (isAnonConstCall) {      if (method.isPrivate() || (method.isPackagePrivate() && accessPackage != null && !inSamePackage(accessPackage))) {        continue;      }    } else {    }    if (tentative == null) {      tentative=method;    } else {      if (env.isMoreSpecific(method,tentative)) {        tentative=method;      } else {        if (!env.isMoreSpecific(tentative,method)) {          if (candidateList == null) {            candidateList=new ArrayList();          }          candidateList.add(method);        }      }    }  }  if (tentative != null && candidateList != null) {    Iterator candidates=candidateList.iterator();    while (candidates.hasNext()) {      MemberDefinition method=(MemberDefinition)candidates.next();      if (!env.isMoreSpecific(tentative,method)) {        throw new AmbiguousMember(tentative,method);      }    }  }  return tentative;}  }
class C{  public HttpContainerBase(HttpContainerBuilder builder){  _systemManager=SystemManager.getCurrent();  Objects.requireNonNull(_systemManager);  _selfServer=builder.getServerSelf();  Objects.requireNonNull(_selfServer);  _serverHeader=builder.getServerHeader();  Objects.requireNonNull(_serverHeader);  _config=builder.config();  Objects.requireNonNull(_config);  String id=_selfServer.getId();  if ("".equals(id)) {    throw new IllegalStateException();  }  Thread thread=Thread.currentThread();  ClassLoader oldLoader=thread.getContextClassLoader();  try {    thread.setContextClassLoader(classLoader());    _lifecycle=new Lifecycle(log,toString(),Level.FINE);    _accessLogBufferSize=builder.getAccessLogBufferSize();    _invocationManager=createInvocationManager(builder);    Objects.requireNonNull(_invocationManager);  }  finally {    thread.setContextClassLoader(oldLoader);  }}  }
class C{  public void transformValues(TIntFunction function){  byte[] states=_states;  int[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (states[i] == FULL) {      values[i]=function.execute(values[i]);    }  }}  }
class C{  private void initializeUndoHistory(){  if (fHistory != null && fUndoContext != null)   fHistory.dispose(fUndoContext,true,true,false);}  }
class C{  public void init(KeyGenerationParameters param){  this.random=param.getRandom();  this.strength=(param.getStrength() + 7) / 8;  if (strength == 0 || strength == (168 / 8)) {    strength=DESedeParameters.DES_EDE_KEY_LENGTH;  } else   if (strength == (112 / 8)) {    strength=2 * DESedeParameters.DES_KEY_LENGTH;  } else   if (strength != DESedeParameters.DES_EDE_KEY_LENGTH && strength != (2 * DESedeParameters.DES_KEY_LENGTH)) {    throw new IllegalArgumentException("DESede key must be " + (DESedeParameters.DES_EDE_KEY_LENGTH * 8) + " or "+ (2 * 8 * DESedeParameters.DES_KEY_LENGTH)+ " bits long.");  }}  }
class C{  public void insertMovie(Movie movie){synchronized (movies) {    if (movies.contains(movie)) {      return;    }    int index=Collections.binarySearch(movies,movie,MOVIE_SET_COMPARATOR);    if (index < 0) {      movies.add(-index - 1,movie);      movieIds.add(-index - 1,movie.getDbId());    } else     if (index >= 0) {      movies.add(index,movie);      movieIds.add(index,movie.getDbId());    }    MovieSetArtworkHelper.updateArtwork(this);    saveToDb();  }  List<Movie> movies=new ArrayList<>(1);  movies.add(movie);  if (MovieModuleManager.MOVIE_SETTINGS.isEnableMovieSetArtworkMovieFolder()) {    MovieSetArtworkHelper.writeImagesToMovieFolder(this,movies);  }  firePropertyChange("addedMovie",null,movie);  firePropertyChange("movies",null,movies);}  }
class C{  public static <T extends Date>T firstOfMonth(T ts){  checkNotNull(ts);  T cloned=(T)ts.clone();  cloned.setTime(new DateTime(ts.getTime()).withTime(0,0,0,0).withDayOfMonth(1).getMillis());  return cloned;}  }
class C{  public boolean supportsLikeEscapeClause() throws SQLException {  return true;}  }
class C{  public void rotateAround(Vector3 axis,double angle){  rotateAround(axis,angle,true);}  }
class C{  public boolean isAssigned(){  return _server != null;}  }
class C{  protected CCSpriteSheet(String fileImage,int capacity){  this(CCTextureCache.sharedTextureCache().addImage(fileImage),capacity);}  }
class C{  public Frame(final Frame<? extends V> src){  this(src.locals,src.values.length - src.locals);  init(src);}  }
class C{  public void close() throws IOException {  super.close();  buf=null;}  }
class C{  public static QueryFunctions extractFunctions(String[] filterQueries){  final QueryFunctions result=new QueryFunctions();  if (isEmpty(filterQueries)) {    return result;  }  String[] arguments=new String[0];  for (  String unmodifiedAnalysis : filterQueries) {    String function=extractFunction(unmodifiedAnalysis);    String[] functions;    if (function.contains(FUNCTION_ARGUMENT_SPLITTER)) {      functions=function.split(FUNCTION_ARGUMENT_SPLITTER);    } else {      functions=new String[]{function};    }    for (    String subFunction : functions) {      if (subFunction.contains(AGGREGATION_ARGUMENT_DELIMITER)) {        arguments=extractAggregationParameter(subFunction);        subFunction=subFunction.substring(0,subFunction.indexOf(AGGREGATION_ARGUMENT_DELIMITER));      }      FunctionType type=FunctionType.valueOf(subFunction.toUpperCase());      addFunction(result,type,arguments);    }  }  return result;}  }
class C{  public void shift(float from,float to,int microseconds){  if (from < minimum) {    throw new IllegalArgumentException("Requested value " + from + " smaller than allowable minimum value "+ minimum+ ".");  }  if (from > maximum) {    throw new IllegalArgumentException("Requested value " + from + " exceeds allowable maximum value "+ maximum+ ".");  }  setValue(to);}  }
class C{  boolean is(PropertyName property){  String value=propertyMap.get(property);  return (value != null) && (value.toLowerCase().equals("true"));}  }
class C{  public static String base64UrlEncode(byte[] arg){  String s=Base64.encodeToString(arg,0);  s=s.split("=")[0];  s=s.replace('+','-');  s=s.replace('/','_');  return s;}  }
class C{  public AnnotationVisitor visitAnnotation(String name,String desc){  if (av != null) {    return av.visitAnnotation(name,desc);  }  return null;}  }
class C{  public final static Mat22 abs(final Mat22 R){  return R.abs();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  JvmThreadInstanceTableCache(JvmThreadInstanceTableMetaImpl meta,long validity){  this.validity=validity;  this.meta=meta;}  }
class C{  @Override public void useXMLExtraction(){  options.setXMLExtraction(true);}  }
class C{  @SuppressWarnings("rawtypes") private void collectAllRegionsDetails(SystemMemberCacheJmxImpl cache,RegionSubRegionSnapshot regionSnapshot,Map<String,Map<String,?>> regionsInfo,Map<String,ObjectName> existingRegionMbeans) throws AdminException, OperationsException, MBeanException, ReflectionException {  String fullPath=regionSnapshot.getFullPath();  if (!fullPath.equals(PLACE_HOLDER_ROOT_REGION)) {    fullPath=fullPath.substring(PLACE_HOLDER_ROOT_REGION.length() - 1);    String name=regionSnapshot.getName();    Integer entryCount=Integer.valueOf(regionSnapshot.getEntryCount());    Map<String,Object> details=new TreeMap<String,Object>();    details.put(REGION_NAME,name);    details.put(REGION_PATH,fullPath);    details.put(REGION_ENTRYCOUNT,entryCount);    ObjectName regionObjectName=existingRegionMbeans.get(fullPath);    if (regionObjectName == null) {      regionObjectName=cache.manageRegion(fullPath);    }    Object attribute=getAttribute(regionObjectName,"scope",NOT_AVAILABLE);    attribute=attribute != null ? attribute.toString() : attribute;    details.put(REGION_SCOPE,attribute);    attribute=getAttribute(regionObjectName,"dataPolicy",NOT_AVAILABLE);    attribute=attribute != null ? attribute.toString() : attribute;    details.put(REGION_DATAPOLICY,attribute);    SubscriptionAttributes interestPolicyAttr=(SubscriptionAttributes)getAttribute(regionObjectName,"subscriptionAttributes",null);    String interestPolicyStr=NOT_AVAILABLE;    if (interestPolicyAttr != null) {      InterestPolicy interestPolicy=interestPolicyAttr.getInterestPolicy();      if (interestPolicy != null) {        interestPolicyStr=interestPolicy.toString();      }    }    details.put(REGION_INTERESTPOLICY,interestPolicyStr);    attribute=getAttribute(regionObjectName,"diskWriteAttributes",NOT_AVAILABLE);    attribute=attribute != null ? attribute.toString() : attribute;    details.put(REGION_DISKATTRS,attribute);    regionsInfo.put(fullPath,details);  }  Set subRegionSnapshots=regionSnapshot.getSubRegionSnapshots();  for (Iterator iterator=subRegionSnapshots.iterator(); iterator.hasNext(); ) {    RegionSubRegionSnapshot subRegion=(RegionSubRegionSnapshot)iterator.next();    collectAllRegionsDetails(cache,subRegion,regionsInfo,existingRegionMbeans);  }}  }
class C{  public static void traceLock(String lockAction,ReentrantReadWriteLock lock){  if (!ENABLED_TRACE) {    return;  }  write(lockAction + " " + getLockInfo(lock));}  }
class C{  public void printVersion(){  System.out.println("The current version is " + VectorDrawableParser.VERSION);}  }
class C{  public AccountHeaderBuilder withSelectionListEnabled(boolean selectionListEnabled){  this.mSelectionListEnabled=selectionListEnabled;  return this;}  }
class C{  public static float[] toFloatArray(char[] array){  float[] result=new float[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(float)array[i];  }  return result;}  }
class C{  public static int readLEInt(byte[] b,int off){  return (((b[off + 3] & 0xff) << 24) | ((b[off + 2] & 0xff) << 16) | ((b[off + 1] & 0xff) << 8)| ((b[off + 0] & 0xff)));}  }
class C{  public StepBreakpointSetSynchronizer(final IDebugger debugger,final ListenerProvider<IDebugEventListener> listeners){  super(debugger,listeners);}  }
class C{  public void insert(final FluoClient fluo,final RyaStatement triple,final Optional<String> visibility){  insert(fluo,Collections.singleton(triple),visibility);}  }
class C{  private static boolean eq(Object o1,Object o2){  return o1 == o2 || o1 != null && o1.equals(o2);}  }
class C{  public static void shuffle(List<?> list,java.util.Random random){  @SuppressWarnings("unchecked") final List<Object> objectList=(List<Object>)list;  if (list instanceof RandomAccess) {    for (int i=objectList.size() - 1; i > 0; i--) {      int index=random.nextInt(i + 1);      objectList.set(index,objectList.set(i,objectList.get(index)));    }  } else {    Object[] array=objectList.toArray();    for (int i=array.length - 1; i > 0; i--) {      int index=random.nextInt(i + 1);      Object temp=array[i];      array[i]=array[index];      array[index]=temp;    }    int i=0;    ListIterator<Object> it=objectList.listIterator();    while (it.hasNext()) {      it.next();      it.set(array[i++]);    }  }}  }
class C{  public static boolean isMemoryLocked(){  return CLibrary.jnaMemoryLockable();}  }
class C{  public void testRadix2Pos(){  String value="101000011111000000110101010101010101010001001010101010101010010101010101010000100010010";  int radix=2;  BigInteger aNumber=new BigInteger(value,radix);  String result=aNumber.toString(radix);  assertTrue(result.equals(value));}  }
class C{  public String storageClass(){  return storageClass;}  }
class C{  public TypeVariable typeVariable(TypeNode typeNode){  TypeVariable result=typeVariableMap.get(typeNode);  if (result == null) {    int id=typeVariableList.size();    typeVariableList.add(null);    result=new TypeVariable(id,this,typeNode);    typeVariableList.set(id,result);    typeVariableMap.put(typeNode,result);  }  return result;}  }
class C{  public static boolean collectionIsAssignableFrom(Class<?> aClass){  return Collection.class.isAssignableFrom(aClass);}  }
class C{  protected CameraToolbar(){  toggleOrthoPerspAction=new ToggleOrthoPerspAction();  switchFrontViewAction=new SwitchFrontViewAction();  switchLeftViewAction=new SwitchLeftViewAction();  switchBackViewAction=new SwitchBackViewAction();  switchBottomViewAction=new SwitchBottomViewAction();  switchTopViewAction=new SwitchTopViewAction();  switchRightViewAction=new SwitchRightViewAction();  initComponents();}  }
class C{  protected Directive_Impl(){  super();}  }
class C{  private static void throwParse(PsiBuilder builder,GroovyParser parser){  PsiBuilder.Marker marker=builder.mark();  ParserUtils.getToken(builder,GroovyTokenTypes.kTHROW);  if (!AssignmentExpression.parse(builder,parser)) {    builder.error(GroovyBundle.message("expression.expected"));  }  marker.done(GroovyElementTypes.THROW_STATEMENT);}  }
class C{  public byte[] toByteArray() throws IOException {  if (bytes == null) {    try {      readBytes();    } catch (    IOException ioException) {    }    if ((bytes == null) || (bytes.length == 0)) {      zipFile.close();      readBytes();    }  }  return bytes;}  }
class C{  @CanIgnoreReturnValue public static <T>T checkNotNull(T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  public JSONArray(String source) throws JSONException {  this(new JSONTokener(source));}  }
class C{  private static void allocatePooled0(long memPtr,int cap){  assert !isExternal(memPtr);  assert isPooled(memPtr);  assert !isAcquired(memPtr);  long data=GridUnsafe.getLong(memPtr);  if (data == 0) {    data=GridUnsafe.allocateMemory(cap);    GridUnsafe.putLong(memPtr,data);    GridUnsafe.putInt(memPtr + MEM_HDR_OFF_CAP,cap);  } else {    int curCap=capacity(memPtr);    if (cap > curCap) {      data=GridUnsafe.reallocateMemory(data,cap);      GridUnsafe.putLong(memPtr,data);      GridUnsafe.putInt(memPtr + MEM_HDR_OFF_CAP,cap);    }  }  flags(memPtr,FLAG_POOLED | FLAG_ACQUIRED);}  }
class C{  public GuacamoleServerBusyException(String message){  super(message);}  }
class C{  public final void flushBuffer() throws IOException {  final StreamImpl source=_source;  if (_isDisableFlush || _source == null)   return;  final int len=_writeLength;  if (len > 0) {    _writeLength=0;    source.write(_writeBuffer,0,len,false);    _position+=len;    _isFlushRequired=true;    source.flushBuffer();  }}  }
class C{  public ToStringBuilder append(double value){  style.append(buffer,null,value);  return this;}  }
class C{  public static void validateReferenceType(int referenceType){  if (referenceType < 0 || referenceType > 4) {    throw new InvalidReferenceTypeException(referenceType);  }}  }
class C{  public void unbindTextures(){  int num=mTextureList.size();  if (mPlugins != null)   for (  IMaterialPlugin plugin : mPlugins)   plugin.unbindTextures();  for (int i=0; i < num; i++) {    ATexture texture=mTextureList.get(i);    GLES20.glBindTexture(texture.getGLTextureType(),0);  }  GLES20.glBindBuffer(GLES20.GL_ARRAY_BUFFER,0);}  }
class C{  void copyParentSets(BayesNet dest,BayesNet source){  int nNodes=source.getNrOfNodes();  for (int iNode=0; iNode < nNodes; iNode++) {    dest.getParentSet(iNode).copy(source.getParentSet(iNode));  }}  }
class C{  public SearchSourceBuilder(){}  }
class C{  public static void sign(File jadFile,File jarFile,RSAPrivateKey privateKey,X509Certificate[] certificateChain,int certificateNumber) throws IOException, CryptoException {  File tmpFile=File.createTempFile("kse","tmp");  tmpFile.deleteOnExit();  sign(jadFile,tmpFile,jarFile,privateKey,certificateChain,certificateNumber);  CopyUtil.copyClose(new FileInputStream(tmpFile),new FileOutputStream(jadFile));  tmpFile.delete();}  }
class C{  public WriteBuffer putChar(char x){  ensureCapacity(2).putChar(x);  return this;}  }
class C{  private float calculateDeltaY(){  int wireTension=15;  if (mProgress <= 50) {    return (mProgress * mWidth / wireTension) / 50 + Math.abs((mTarget - getProgress()) / wireTension) + Math.abs(mBubbleAngle);  } else {    return ((100 - mProgress) * mWidth / wireTension) / 50 + Math.abs((mTarget - getProgress()) / wireTension) + Math.abs(mBubbleAngle);  }}  }
class C{  protected Object toType(Calendar value){  return value.getTime();}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public char current(){  if (offset == end) {    return DONE;  }  return string.charAt(offset);}  }
class C{  public void increment(){  value++;}  }
class C{  public boolean isSelected(int position){  return getSelectedItems().contains(position);}  }
class C{  public Session(String name){  setName(name);}  }
class C{  public void error(String trace,Throwable e){  printTrace(trace,ERROR_LEVEL);  printTrace(ExceptionUtil.getFullStackTrace(e),ERROR_LEVEL);}  }
class C{  public DateTimeFormatter withZone(DateTimeZone zone){  if (iZone == zone) {    return this;  }  return new DateTimeFormatter(iPrinter,iParser,iLocale,false,iChrono,zone,iPivotYear,iDefaultYear);}  }
class C{  public static final double sRGBToLsRGB(double value){  if (value <= 0.003928)   return value / 12.92;  return Math.pow((value + 0.055) / 1.055,2.4);}  }
class C{  public void removeEventListener(OneToOneFileTransferListener listener) throws RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    WeakReference<IOneToOneFileTransferListener> weakRef=mOneToOneFileTransferListeners.remove(listener);    if (weakRef == null) {      return;    }    IOneToOneFileTransferListener rcsListener=weakRef.get();    if (rcsListener != null) {      mApi.removeEventListener2(rcsListener);    }  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public static XPath createXPath(Map<String,String> namespaces){  XPath xpath=getXPathFactory().newXPath();  xpath.setNamespaceContext(new NamespaceContextMap(namespaces));  return xpath;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.STRING_LIT___QUOTE_1:    return getQuote_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void leaveBusy(){  state().decrementAndGet();}  }
class C{  boolean isOdd(){  return isZero() ? false : ((value[offset + intLen - 1] & 1) == 1);}  }
class C{  public int nextInt(){  if (mti == N)   nextBlock();  int y=mt[mti++];  y^=y >>> 11;  y^=(y << 7) & TEMPERING_MASK_B;  y^=(y << 15) & TEMPERING_MASK_C;  y^=y >>> 18;  return y;}  }
class C{  protected boolean isOnlyIssue(){  return m_OnlyIssue;}  }
class C{  PermissiveMessenger(Handler target,String[] permissions){  this.messenger=new Messenger(target);  this.permissions=permissions;}  }
class C{  public static void replaceDirectory(Configuration conf,Path src,Path dest) throws IOException {  FileSystem fs=dest.getFileSystem(conf);  if (fs.exists(dest)) {    LOG.debug("Removing " + dest + " since it exists");    deleteDirectory(conf,dest);  }  LOG.debug("Renaming " + src + " to "+ dest);  fs.rename(src,dest);}  }
class C{  public boolean isConscious(){  return this.state.ordinal() > MentalState.UNCONSCIOUS.ordinal();}  }
class C{  static void blur(int[] srcPixels,int[] dstPixels,int width,int height,float[] kernel,int radius){  float a;  float r;  float g;  float b;  int ca;  int cr;  int cg;  int cb;  for (int y=0; y < height; y++) {    int index=y;    int offset=y * width;    for (int x=0; x < width; x++) {      a=r=g=b=0.0f;      for (int i=-radius; i <= radius; i++) {        int subOffset=x + i;        if (subOffset < 0 || subOffset >= width) {          subOffset=(x + width) % width;        }        int pixel=srcPixels[offset + subOffset];        float blurFactor=kernel[radius + i];        a+=blurFactor * ((pixel >> 24) & 0xFF);        r+=blurFactor * ((pixel >> 16) & 0xFF);        g+=blurFactor * ((pixel >> 8) & 0xFF);        b+=blurFactor * ((pixel) & 0xFF);      }      ca=(int)(a + 0.5f);      cr=(int)(r + 0.5f);      cg=(int)(g + 0.5f);      cb=(int)(b + 0.5f);      dstPixels[index]=((ca > 255 ? 255 : ca) << 24) | ((cr > 255 ? 255 : cr) << 16) | ((cg > 255 ? 255 : cg) << 8)| (cb > 255 ? 255 : cb);      index+=height;    }  }}  }
class C{  public Boolean wordConfidence(){  return wordConfidence;}  }
class C{  public PiePlot3D(){  this(null);}  }
class C{  public TextEditor outdent(int spaces){  return deleteAll("^(\\t|[ ]{1," + spaces + "})");}  }
class C{  public void newRepeat(){  mFormEntryController.newRepeat();}  }
class C{  public void add(TradelogSummary tradelogSummary){  this.tradelogSummary.add(tradelogSummary);}  }
class C{  public void updateCommitSeqno(THLEvent event) throws ReplicatorException, InterruptedException {  if (commitSeqno == null) {    if (logger.isDebugEnabled())     logger.debug("Seqno update is disabled: seqno=" + event.getSeqno());  } else {    long applyLatency=(System.currentTimeMillis() - event.getSourceTstamp().getTime()) / 1000;    ReplDBMSHeaderData header=new ReplDBMSHeaderData(event.getSeqno(),event.getFragno(),event.getLastFrag(),event.getSourceId(),event.getEpochNumber(),event.getEventId(),event.getShardId(),event.getSourceTstamp(),applyLatency);    commitSeqnoAccessor.updateLastCommitSeqno(header,applyLatency);  }}  }
class C{  public SubsetMapperTest(String name){  super(name);}  }
class C{  public LWL(Regressor regressor,int k,DistanceMetric dm,KernelFunction kf){  this(regressor,k,dm,kf,new DefaultVectorCollectionFactory<VecPaired<Vec,Double>>());}  }
class C{  public void addedDocument(int commitWithin){  if (docsUpperBound > 0) {    long docs=docsSinceCommit.incrementAndGet();    if (docs == docsUpperBound + 1) {      docsSinceCommit.set(0);      _scheduleCommitWithin(DOC_COMMIT_DELAY_MS);    }  }  _scheduleCommitWithinIfNeeded(commitWithin);}  }
class C{  public static TypeReference newTypeReference(int sort){  return new TypeReference(sort << 24);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return stack.getUIMgrSafe().getVideoFrame().getVideoBGColor();}  }
class C{  public BackGroundDrawer(Image mainImage){  this.mainImage=mainImage;}  }
class C{  public void removePropertyChangeListener(PropertyChangeListener pcl){  m_pcSupport.removePropertyChangeListener(pcl);}  }
class C{  public boolean match(String stringToMatch){  return pattern.matcher(stringToMatch).matches();}  }
class C{  public Rational divide(Rational secondRational){  BigInteger n=r[0].multiply(secondRational.getDenominator());  BigInteger d=r[1].multiply(secondRational.getNumerator());  return new Rational(n,d);}  }
class C{  public Frame[] analyze(CtMethod method) throws BadBytecode {  return analyze(method.getDeclaringClass(),method.getMethodInfo2());}  }
class C{  public void save(View view){  UserConfig config=new UserConfig();  config.user=MainActivity.connection.getUser().user;  EditText text=(EditText)findViewById(R.id.passwordText);  config.password=text.getText().toString().trim();  text=(EditText)findViewById(R.id.newPasswordText);  config.newPassword=text.getText().toString().trim();  text=(EditText)findViewById(R.id.hintText);  config.hint=text.getText().toString().trim();  text=(EditText)findViewById(R.id.nameText);  config.name=text.getText().toString().trim();  text=(EditText)findViewById(R.id.emailText);  config.email=text.getText().toString().trim();  text=(EditText)findViewById(R.id.websiteText);  config.website=text.getText().toString().trim();  text=(EditText)findViewById(R.id.bioText);  config.bio=text.getText().toString().trim();  CheckBox checkbox=(CheckBox)findViewById(R.id.showNameCheckBox);  config.showName=checkbox.isChecked();  HttpUpdateUserAction action=new HttpUpdateUserAction(this,config);  action.execute();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public final boolean sendValues(){  return true;}  }
class C{  public static void checkAndSetDateTimeParam(Element context,AVList params,String paramKey,String paramName,String pattern,XPath xpath){  if (context == null) {    String message=Logging.getMessage("nullValue.ElementIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (params == null) {    String message=Logging.getMessage("nullValue.ParametersIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (paramKey == null) {    String message=Logging.getMessage("nullValue.ParameterKeyIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (paramName == null) {    String message=Logging.getMessage("nullValue.ParameterNameIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (WWUtil.isEmpty(pattern)) {    String message=Logging.getMessage("nullValue.PatternIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Object o=params.getValue(paramKey);  if (o == null) {    Long d=getDateTimeInMillis(context,paramName,pattern,xpath);    if (d != null)     params.setValue(paramKey,d);  }}  }
class C{  public SuffixStringMatcher(String[] suffixes){  super();  for (int i=0; i < suffixes.length; i++)   addPatternBackward(suffixes[i]);}  }
class C{  public MBeanRule operation(String operation){  this.operations.add(operation);  return this;}  }
class C{  public boolean isConverged(){  return mConverged;}  }
class C{  private void sendUpdate(JSONObject obj,boolean keepCallback,PluginResult.Status status){  if (callbackContext != null) {    PluginResult result=new PluginResult(status,obj);    result.setKeepCallback(keepCallback);    callbackContext.sendPluginResult(result);    if (!keepCallback) {      callbackContext=null;    }  }}  }
class C{  public static Builder builder(){  return new Builder();}  }
class C{  private static void createPicassoDiskCache(Context context,long maxSize) throws IOException {  File httpCacheDir=new File(context.getCacheDir(),"picasso-cache");  httpCacheDir.mkdirs();  long freeDiskSpace=getFreeDiskSpace(httpCacheDir);  maxSize=Math.min(maxSize,freeDiskSpace / 2);  com.squareup.okhttp.Cache diskCache=new com.squareup.okhttp.Cache(httpCacheDir,maxSize);  diskCache.initialize();  picassoDiskCacheRef=new WeakReference<>(diskCache);}  }
class C{  public static int numberOfDaysInAYear(int year){  if (isLeapYear(year))   return 366; else   return 365;}  }
class C{  private Delimiter nextDelimiter(IgfsInputStream is,State state) throws IOException {  assert is != null;  assert state != null;  Map<Integer,Integer> parts=state.parts;  LinkedList<Delimiter> delimQueue=state.delims;  int nextByte=is.read();  while (nextByte != -1) {    for (int idx=0; idx < delims.length; idx++) {      byte[] delim=delims[idx];      int val=parts.containsKey(idx) ? parts.get(idx) : 0;      if (delim[val] == nextByte) {        if (val == delim.length - 1) {          parts.remove(idx);          Delimiter newDelim=new Delimiter(is.position() - delim.length,is.position());          boolean ignore=false;          int replaceIdx=-1;          for (int i=delimQueue.size() - 1; i >= 0; i--) {            Delimiter prevDelim=delimQueue.get(i);            if (prevDelim.start < newDelim.start) {              if (prevDelim.end > newDelim.start) {                ignore=true;                break;              }            } else             if (prevDelim.start == newDelim.start) {              replaceIdx=i;              break;            }          }          if (!ignore) {            if (replaceIdx >= 0)             delimQueue.removeAll(delimQueue.subList(replaceIdx,delimQueue.size()));            delimQueue.add(newDelim);          }        } else         parts.put(idx,++val);      } else       if (val != 0) {        if (delim[0] == nextByte) {          boolean shift=true;          for (int k=1; k < val; k++) {            if (delim[k] != nextByte) {              shift=false;              break;            }          }          if (!shift)           parts.put(idx,1);        } else         parts.remove(idx);      }    }    if (!delimQueue.isEmpty()) {      Delimiter delim=delimQueue.get(0);      if (is.position() - delim.end >= maxDelimLen)       return delimQueue.poll();    }    nextByte=is.read();  }  return delimQueue.poll();}  }
class C{  public void login(String email,String password) throws IOException, ParseException, URISyntaxException {  if (null != ws) {    ws.close();  }  this.email=email;  this.password=password;  try {    this.token=(String)((JSONObject)JSON_PARSER.parse(Requests.POST.makeRequest(DiscordEndpoints.LOGIN,new StringEntity("{\"email\":\"" + email + "\",\"password\":\""+ password+ "\"}"),new BasicNameValuePair("content-type","application/json")))).get("token");  } catch (  HTTP403Exception e) {    e.printStackTrace();  }  this.ws=new DiscordWS(new URI(obtainGateway(this.token)));}  }
class C{  public IgniteSpiMultiException(String msg,@Nullable Throwable cause){  super(msg,cause);}  }
class C{  public ResourceBundle findResourceBundle(String aBundleName,Locale locale){  Locale currentLocale=Locale.getDefault();  try {    Locale.setDefault(Locale.ENGLISH);    return ResourceBundle.getBundle(aBundleName,locale,Thread.currentThread().getContextClassLoader());  } catch (  Exception e) {    return ResourceBundle.getBundle(aBundleName,Locale.ENGLISH,Thread.currentThread().getContextClassLoader());  } finally {    Locale.setDefault(currentLocale);  }}  }
class C{  public String toString(){  if (m_displayMode == DISPLAY_TIME_FROM)   return getInfoTimeFrom(); else   if (m_displayMode == DISPLAY_TIME_FROM_TO)   return getInfoTimeFromTo(); else   if (m_displayMode == DISPLAY_DATETIME_FROM_TO)   return getInfoDateTimeFromTo(); else   if (m_displayMode == DISPLAY_NAME)   return m_name; else   if (m_displayMode == DISPLAY_NAME_DESCRIPTION)   return getInfoNameDescription(); else   if (m_displayMode == DISPLAY_FULL)   return getInfo();  StringBuffer sb=new StringBuffer("MAssignmentSlot[");  sb.append(m_startTime).append("-").append(m_endTime).append("-Status=").append(m_status).append(",Name=").append(m_name).append(",").append(m_description).append("]");  return sb.toString();}  }
class C{  public void put(K key,V val){  if (list != null) {    Entry lookup=list.get(key);    if (lookup == null) {      list=new Entry(key,val,list);    } else {      lookup.val=val;    }  } else {    list=new Entry(key,val,list);    size=size + 1;  }}  }
class C{  public void writeTag(String tag,long value){  writeTag(tag,Long.toString(value));}  }
class C{  public ExtendedType(int nodetype,String namespace,String localName,int hash){  this.nodetype=nodetype;  this.namespace=namespace;  this.localName=localName;  this.hash=hash;}  }
class C{  private void procFunctions0_4(int currCabId,int c){  if ((c & NceCmdStationMemory.FUNC_L_F0) != 0) {    cabData[currCabId].F0=true;  } else {    cabData[currCabId].F0=false;  }  if ((c & NceCmdStationMemory.FUNC_L_F1) != 0) {    cabData[currCabId].F1=true;  } else {    cabData[currCabId].F1=false;  }  if ((c & NceCmdStationMemory.FUNC_L_F2) != 0) {    cabData[currCabId].F2=true;  } else {    cabData[currCabId].F2=false;  }  if ((c & NceCmdStationMemory.FUNC_L_F3) != 0) {    cabData[currCabId].F3=true;  } else {    cabData[currCabId].F3=false;  }  if ((c & NceCmdStationMemory.FUNC_L_F4) != 0) {    cabData[currCabId].F4=true;  } else {    cabData[currCabId].F4=false;  }}  }
class C{  public DividerItemDecoration(@NonNull Context context,@DrawableRes int resId){  this(context,resId,0);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:57.406 -0500",hash_original_method="9A0B254F42B92476EDBA974C3F238399",hash_generated_method="EAA69C86A4E9505E19D8891B84BFB3BB") public ContextImpl(ContextImpl context){  mPackageInfo=context.mPackageInfo;  mBasePackageName=context.mBasePackageName;  mResources=context.mResources;  mMainThread=context.mMainThread;  mContentResolver=context.mContentResolver;  mOuterContext=this;}  }
class C{  protected Object createElementInfo(){  return new PackageFragmentRootInfo();}  }
class C{  public Holder(ObjectDigestInfo objectDigestInfo){  this.objectDigestInfo=objectDigestInfo;}  }
class C{  public static Monitor newMonitor(String name){  try {    Clock.stop();    return model.newMonitor(name);  }  finally {    Clock.start();  }}  }
class C{  public void add(String displayName,Method method){  if (method != null) {    m_Methods.put(displayName,method);  }}  }
class C{  public static byte[] decodeWebSafe(byte[] source) throws Base64DecoderException {  return decodeWebSafe(source,0,source.length);}  }
class C{  public void reportOccurences(List<Map<Id<Vehicle>,Integer>> maps){  for (int m=0; m < maps.size(); m++) {    Map<Id<Vehicle>,Integer> theMap=maps.get(m);    log.info(" Map " + (m + 1) + " ("+ theMap.size()+ " agents)");    Integer min=Integer.MAX_VALUE;    Integer max=Integer.MIN_VALUE;    for (    Id<Vehicle> id : theMap.keySet()) {      min=Math.min(min,theMap.get(id));      max=Math.max(max,theMap.get(id));    }    log.info("    Min usage: " + min + "; Max usage: "+ max);    List<Id<Link>> histList=new ArrayList<>();    Map<Id<Link>,Integer> histMap=new HashMap<Id<Link>,Integer>();    for (long h=min; h <= max; h++) {      Id<Link> id=Id.create(h,Link.class);      histList.add(id);      histMap.put(id,new Integer(0));    }    for (    Id<Vehicle> id : theMap.keySet()) {      int value=theMap.get(id);      histMap.put(Id.create(value,Link.class),new Integer(histMap.get(Id.create(value,Link.class)) + 1));    }    String s="";    for (    Id<Link> id : histList) {      s+=id.toString() + " (" + histMap.get(id)+ "); ";    }    log.info("    Link usage histogram:");    log.info("    " + s);  }}  }
class C{  public boolean containsSection(Section s){  for (int i=0; i < mTransitSectionList.size(); i++) {    TransitSection ts=mTransitSectionList.get(i);    if (ts.getSection() == s) {      return true;    }  }  return false;}  }
class C{  @Override public synchronized void publish(LogRecord record){  if (!isLoggable(record)) {    return;  }  int ix=(start + count) % buffer.length;  buffer[ix]=record;  if (count < buffer.length) {    count++;  } else {    start++;    start%=buffer.length;  }  if (record.getLevel().intValue() >= pushLevel.intValue()) {    push();  }}  }
class C{  public GetEpisodes(int tvshowid,int season,String... properties){  super();  addParameterToRequest("tvshowid",tvshowid);  addParameterToRequest("season",season);  addParameterToRequest("properties",properties);}  }
class C{  public static boolean onTouchEvent(TextView widget,Spannable buffer,MotionEvent event){  DragState[] ds;switch (event.getActionMasked()) {case MotionEvent.ACTION_DOWN:    ds=buffer.getSpans(0,buffer.length(),DragState.class);  for (int i=0; i < ds.length; i++) {    buffer.removeSpan(ds[i]);  }buffer.setSpan(new DragState(event.getX(),event.getY(),widget.getScrollX(),widget.getScrollY()),0,0,Spannable.SPAN_MARK_MARK);return true;case MotionEvent.ACTION_UP:ds=buffer.getSpans(0,buffer.length(),DragState.class);for (int i=0; i < ds.length; i++) {buffer.removeSpan(ds[i]);}if (ds.length > 0 && ds[0].mUsed) {return true;} else {return false;}case MotionEvent.ACTION_MOVE:ds=buffer.getSpans(0,buffer.length(),DragState.class);if (ds.length > 0) {if (ds[0].mFarEnough == false) {int slop=ViewConfiguration.get(widget.getContext()).getScaledTouchSlop();if (Math.abs(event.getX() - ds[0].mX) >= slop || Math.abs(event.getY() - ds[0].mY) >= slop) {ds[0].mFarEnough=true;}}if (ds[0].mFarEnough) {ds[0].mUsed=true;boolean cap=(event.getMetaState() & KeyEvent.META_SHIFT_ON) != 0 || MetaKeyKeyListener.getMetaState(buffer,MetaKeyKeyListener.META_SHIFT_ON) == 1 || MetaKeyKeyListener.getMetaState(buffer,MetaKeyKeyListener.META_SELECTING) != 0;float dx;float dy;if (cap) {dx=event.getX() - ds[0].mX;dy=event.getY() - ds[0].mY;} else {dx=ds[0].mX - event.getX();dy=ds[0].mY - event.getY();}ds[0].mX=event.getX();ds[0].mY=event.getY();int nx=widget.getScrollX() + (int)dx;int ny=widget.getScrollY() + (int)dy;int padding=widget.getTotalPaddingTop() + widget.getTotalPaddingBottom();Layout layout=widget.getLayout();ny=Math.min(ny,layout.getHeight() - (widget.getHeight() - padding));ny=Math.max(ny,0);int oldX=widget.getScrollX();int oldY=widget.getScrollY();scrollTo(widget,layout,nx,ny);if (oldX != widget.getScrollX() || oldY != widget.getScrollY()) {widget.cancelLongPress();}return true;}}}return false;}  }
class C{  @CanIgnoreReturnValue @Override public int remove(@Nullable Object element,int occurrences){  if (occurrences == 0) {    return count(element);  }  CollectPreconditions.checkPositive(occurrences,"occurences");  AtomicInteger existingCounter=Maps.safeGet(countMap,element);  if (existingCounter == null) {    return 0;  }  while (true) {    int oldValue=existingCounter.get();    if (oldValue != 0) {      int newValue=Math.max(0,oldValue - occurrences);      if (existingCounter.compareAndSet(oldValue,newValue)) {        if (newValue == 0) {          countMap.remove(element,existingCounter);        }        return oldValue;      }    } else {      return 0;    }  }}  }
class C{  public final boolean peekOrFalse(){  return (m_index > -1) ? m_values[m_index] : false;}  }
class C{  private void joinTrees(){  Map<Integer,Node<V>> rankArray=new HashMap<Integer,Node<V>>();  Node<V> next=this.root;  int counter=0;  do {    counter++;    next=next.right;  } while (next != this.root);  next=this.root;  for (int i=0; i < counter; i++) {    Node<V> node=next;    next=next.right;    int r=node.rank;    Node<V> other=rankArray.get(r);    while (other != null) {      if (node.key <= other.key) {        node.addChild(other);      } else {        other.addChild(node);        node=other;      }      rankArray.put(r,null);      r++;      other=rankArray.get(r);    }    rankArray.put(r,node);  }  double minKey=Double.POSITIVE_INFINITY;  for (  Node<V> node : rankArray.values()) {    if (node == null)     continue;    node.parent=null;    if (minKey == Double.POSITIVE_INFINITY) {      minKey=node.key;      this.root=node;      node.left=node;      node.right=node;    } else {      node.right=this.root.right;      node.left=this.root;      node.right.left=node;      node.left.right=node;      if (minKey > node.key) {        minKey=node.key;        this.root=node;      }    }  }}  }
class C{  public boolean isOtherOnly(){  return otherOnly;}  }
class C{  private final JsonToken _parserNumber2(char[] outBuf,int outPtr,boolean negative,int intPartLength) throws IOException, JsonParseException {  while (true) {    if (_inputPtr >= _inputEnd && !loadMore()) {      _textBuffer.setCurrentLength(outPtr);      return resetInt(negative,intPartLength);    }    int c=(int)_inputBuffer[_inputPtr++] & 0xFF;    if (c > INT_9 || c < INT_0) {      if (c == '.' || c == 'e' || c == 'E') {        return _parseFloatText(outBuf,outPtr,c,negative,intPartLength);      }      break;    }    if (outPtr >= outBuf.length) {      outBuf=_textBuffer.finishCurrentSegment();      outPtr=0;    }    outBuf[outPtr++]=(char)c;    ++intPartLength;  }  --_inputPtr;  _textBuffer.setCurrentLength(outPtr);  return resetInt(negative,intPartLength);}  }
class C{  public final boolean isForbidden(String var1,String var2){  if (isForbiddenByTiers(var1,var2)) {    return true;  } else {    KnowledgeEdge edge=new KnowledgeEdge(var1,var2);    return explicitlyForbiddenEdges.contains(edge);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:17.715 -0400",hash_original_method="BDDB4C21EB61EAF0B9C254BC012558D2",hash_generated_method="5632AA010137C3098D55DA2C3B5E845F") private Node firstOfMode(boolean isData){  for (Node p=head; p != null; p=succ(p)) {    if (!p.isMatched())     return (p.isData == isData) ? p : null;  }  return null;}  }
class C{  public MatrixStack(RealMatrix current){  this.stack=new Stack<>();  this.current=current;}  }
class C{  protected byte[] processMessage(byte[] in) throws Exception {  if ((in[0] & 0x1f) == Krb5.KRB_AS_REQ)   return processAsReq(in); else   return processTgsReq(in);}  }
class C{  @SuppressWarnings("unchecked") public static <K extends Parcelable,V extends Parcelable>Map<K,V> readHashMap(Parcel in,ClassLoader loader){  if (in == null) {    return null;  }  int size=in.readInt();  if (size == -1) {    return null;  }  Map<K,V> map=new HashMap<K,V>();  for (int i=0; i < size; i++) {    map.put((K)in.readParcelable(loader),(V)in.readParcelable(loader));  }  return map;}  }
class C{  public MultinomialNaiveBayes(){  this(1.0);}  }
class C{  public static void make(Project project,JComponent jComponent,MessageType type,String text){  StatusBar statusBar=WindowManager.getInstance().getStatusBar(project);  JBPopupFactory.getInstance().createHtmlTextBalloonBuilder(text,type,null).setFadeoutTime(7500).createBalloon().show(RelativePoint.getCenterOf(jComponent),Balloon.Position.above);}  }
class C{  public ThreadSafePrintable(Printable printDelegate){  this.printDelegate=printDelegate;}  }
class C{  public boolean checkPassword(String password){  final int userId=getCurrentOrCallingUserId();  try {    final boolean matched=getLockSettings().checkPassword(passwordToHash(password),userId);    if (matched && (userId == UserHandle.USER_OWNER)) {      KeyStore.getInstance().password(password);    }    return matched;  } catch (  RemoteException re) {    return true;  }}  }
class C{  public TaskHandle addDomainRefreshTask(String fullyQualifiedDomainName){  return addToQueue(TargetType.DOMAIN,fullyQualifiedDomainName,assertTldExists(getTldFromDomainName(fullyQualifiedDomainName)));}  }
class C{  public final int[] hash(final double[] vector){  return hashSignature(sb.signature(vector));}  }
class C{  protected Resource updateResourceVersion(Resource resource,BigDecimal oldVersion,BigDecimal newVersion){  Preconditions.checkNotNull(resource);  Preconditions.checkNotNull(oldVersion);  Preconditions.checkNotNull(newVersion);  if (!oldVersion.equals(newVersion)) {    try {      File oldEml=dataDir.resourceEmlFile(resource.getShortname(),oldVersion);      File newEml=dataDir.resourceEmlFile(resource.getShortname(),newVersion);      if (oldEml.exists() && !newEml.exists()) {        Files.move(oldEml,newEml);      }      File oldRtf=dataDir.resourceRtfFile(resource.getShortname(),oldVersion);      File newRtf=dataDir.resourceRtfFile(resource.getShortname(),newVersion);      if (oldRtf.exists() && !newRtf.exists()) {        Files.move(oldRtf,newRtf);      }      File oldDwca=dataDir.resourceDwcaFile(resource.getShortname(),oldVersion);      File newDwca=dataDir.resourceDwcaFile(resource.getShortname(),newVersion);      if (oldDwca.exists() && !newDwca.exists()) {        Files.move(oldDwca,newDwca);      }      resource.setEmlVersion(newVersion);    } catch (    IOException e) {      log.error("Failed to update version number for " + resource.getShortname(),e);      throw new InvalidConfigException(TYPE.CONFIG_WRITE,"Failed to update version number for " + resource.getShortname() + ": "+ e.getMessage());    }  }  return resource;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:55.726 -0500",hash_original_method="02FE733144FE02DDB0F8182E4A142CB0",hash_generated_method="AC4EA91A85FD0035D90E3AC2680C72BA") private void handleStartListening(Intent recognizerIntent){  if (!checkOpenConnection()) {    return;  }  try {    mService.startListening(recognizerIntent,mListener);    if (DBG)     Log.d(TAG,"service start listening command succeded");  } catch (  final RemoteException e) {    Log.e(TAG,"startListening() failed",e);    mListener.onError(ERROR_CLIENT);  }}  }
class C{  public static boolean isSupportedAttr(String attrName){  if (BACKGROUND.equals(attrName)) {    return true;  }  if (TEXT_COLOR.equals(attrName)) {    return true;  }  if (LIST_SELECTOR.equals(attrName)) {    return true;  }  if (DIVIDER.equals(attrName)) {    return true;  }  return false;}  }
class C{  static public void showMissingWarning(String method){  showWarning(method + "(), or this particular variation of it, " + "is not available with this renderer.");}  }
class C{  protected void incrementDictionaryAccessCount(DictionaryInfo dictionaryInfo){  dictionaryInfo.incrementAccessCount();}  }
class C{  public DefaultExternalTransition(State<S,E> source,State<S,E> target,Collection<Action<S,E>> actions,E event,Guard<S,E> guard,Trigger<S,E> trigger,SecurityRule securityRule){  super(source,target,actions,event,guard,trigger,securityRule);}  }
class C{  public void releaseCapacity(int capacityToRelease){  if (capacityToRelease <= 0) {    return;  }  List<Ticket> parentTicketsToRelease=new ArrayList<>();  mLock.lock();  try {    if (capacityToRelease > mCapacity) {      capacityToRelease=mCapacity;    }    mCapacity-=capacityToRelease;    int numParentTicketsToRelease=Math.min(mParentTickets.size(),capacityToRelease);    for (int i=0; i < numParentTicketsToRelease; i++) {      parentTicketsToRelease.add(mParentTickets.remove());    }    abortWaitersOnCapacityDecrease();  }  finally {    mLock.unlock();  }  for (  Ticket ticket : parentTicketsToRelease) {    ticket.close();  }  updateCurrentTicketCount();}  }
class C{  public Time parseTime(String text) throws DataParseException {  m_pos.setErrorIndex(0);  m_pos.setIndex(0);  Time t=null;  try {    t=Time.valueOf(text);    m_pos.setIndex(text.length());  } catch (  IllegalArgumentException e) {    t=null;  }  if (t == null) {    java.util.Date d1=m_dfmt.parse(text,m_pos);    if (d1 != null) {      t=new Time(d1.getTime());    }  }  if (t == null || m_pos.getIndex() < text.length()) {    throw new DataParseException("Could not parse Date: " + text);  } else {    return t;  }}  }
class C{  @Override public void process(V tuple){  Min.this.process(tuple);}  }
class C{  public final void reset(){  numTypes=numCoords=0;}  }
class C{  private void closeConnection(){  getZKHandle().getConnectionStateListenable().removeListener(this);  getZKHandle().close();}  }
class C{  @Override public void onClick(DialogInterface dialog,int which){  dialog.dismiss();  Intent intent=new Intent(getApplicationContext(),MainActivity.class);  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);  startActivity(intent);  setResult(RESULT_OK);  finish();}  }
class C{  public CreateProjectVisualPanel2(){  initComponents();}  }
class C{  private boolean verifyValueRangeUpperBoundInput(JComponent input){  JTextField textField=(JTextField)input;  String inputString=textField.getText();  try {    double valueUpperBound;    if (inputString.startsWith("-")) {      valueUpperBound=Double.parseDouble(inputString.substring(1));      valueUpperBound=-valueUpperBound;    } else {      valueUpperBound=Double.parseDouble(inputString);    }  } catch (  NumberFormatException e) {    textField.setForeground(Color.RED);    return false;  }  textField.setForeground(Color.BLACK);  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:58.052 -0400",hash_original_method="53CA0D043E68099722661EEB7F58526A",hash_generated_method="B835A170ADB5AF71D4480D31E173BD72") public FileAlterationMonitor(long interval){  this.interval=interval;}  }
class C{  public final int toInt(){  return mValue;}  }
class C{  public BucketMovedException(String msg){  super(msg);}  }
class C{  protected Size2D arrangeNF(BlockContainer container,Graphics2D g2,RectangleConstraint constraint){  return arrangeNN(container,g2);}  }
class C{  public static FunctionCall createFunctionCall(Model model,Resource function){  return model.createResource(function).as(FunctionCall.class);}  }
class C{  protected SecretKey engineGenerateSecret(String algorithm) throws IllegalStateException, NoSuchAlgorithmException, InvalidKeyException {  if (algorithm == null) {    throw new NoSuchAlgorithmException("null algorithm");  }  byte[] secret=engineGenerateSecret();  if (algorithm.equalsIgnoreCase("DES")) {    return new DESKey(secret);  } else   if (algorithm.equalsIgnoreCase("DESede") || algorithm.equalsIgnoreCase("TripleDES")) {    return new DESedeKey(secret);  } else   if (algorithm.equalsIgnoreCase("Blowfish")) {    int keysize=secret.length;    if (keysize >= BlowfishConstants.BLOWFISH_MAX_KEYSIZE)     keysize=BlowfishConstants.BLOWFISH_MAX_KEYSIZE;    SecretKeySpec skey=new SecretKeySpec(secret,0,keysize,"Blowfish");    return skey;  } else   if (algorithm.equalsIgnoreCase("AES")) {    int keysize=secret.length;    SecretKeySpec skey=null;    int idx=AESConstants.AES_KEYSIZES.length - 1;    while (skey == null && idx >= 0) {      if (keysize >= AESConstants.AES_KEYSIZES[idx]) {        keysize=AESConstants.AES_KEYSIZES[idx];        skey=new SecretKeySpec(secret,0,keysize,"AES");      }      idx--;    }    if (skey == null) {      throw new InvalidKeyException("Key material is too short");    }    return skey;  } else   if (algorithm.equals("TlsPremasterSecret")) {    return new SecretKeySpec(KeyUtil.trimZeroes(secret),"TlsPremasterSecret");  } else {    throw new NoSuchAlgorithmException("Unsupported secret key " + "algorithm: " + algorithm);  }}  }
class C{  private Object parseJsonFile(File jsonFormattedFile) throws IOException {  FileInputStream fileInputStream=new FileInputStream(jsonFormattedFile);  JsonReader jsonReader=new JsonReader(fileInputStream);  Object parsedObject=jsonReader.readObject();  jsonReader.close();  fileInputStream.close();  return parsedObject;}  }
class C{  protected void assertBackToState(int stateNum){  assertTrue(recorder.recorded(EC.TLC_BACK_TO_STATE));  List<Object> loop=recorder.getRecords(EC.TLC_BACK_TO_STATE);  assertTrue(loop.size() > 0);  Object[] object=(Object[])loop.get(0);  assertEquals(Integer.toString(stateNum),object[0]);}  }
class C{  public int viewToModel(float fx,float fy,Shape a,Position.Bias[] bias){  bias[0]=Position.Bias.Forward;  Rectangle alloc=a.getBounds();  RSyntaxDocument doc=(RSyntaxDocument)getDocument();  int x=(int)fx;  int y=(int)fy;  if (y < alloc.y) {    return getStartOffset();  } else   if (y > alloc.y + alloc.height) {    return getEndOffset() - 1;  } else {    Element map=doc.getDefaultRootElement();    int lineIndex=Math.abs((y - alloc.y) / lineHeight);    if (lineIndex >= map.getElementCount())     return getEndOffset() - 1;    Element line=map.getElement(lineIndex);    if (x < alloc.x)     return line.getStartOffset(); else     if (x > alloc.x + alloc.width)     return line.getEndOffset() - 1; else {      int p0=line.getStartOffset();      Token tokenList=doc.getTokenListForLine(lineIndex);      tabBase=alloc.x;      int offs=tokenList.getListOffset((RSyntaxTextArea)getContainer(),this,tabBase,x);      return offs != -1 ? offs : p0;    }  }}  }
class C{  AttributeKey<?> findAttribute(QName id){  return attributes.get(id);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean matches(Integer i){  if (m_Integer == null)   return false; else   if (i == null)   return false; else   return (m_Integer.intValue() == i.intValue());}  }
class C{  public void requestAuditReport(String authToken,String host) throws IOException {  Path path=Paths.get(InjectorBootstrap.INJECTOR.getInstance(Key.get(String.class,Names.named("installation-manager.audit_dir"))));  if (configManager.getHostUrl().equals(host)) {    transport.downloadWithoutProxy(host + "/api/audit",authToken,path,MediaType.TEXT_PLAIN);  } else {    transport.download(host + "/api/audit",authToken,path,MediaType.TEXT_PLAIN);  }}  }
class C{  public static void clearClassCache(ClassLoader ldr){  classCache.remove(ldr);}  }
class C{  public void resetConfig(){  MLContextUtil.setDefaultConfig();}  }
class C{  private ScreenOverlayType createLegend() throws IOException {  this.writer.addNonKMLFile(MatsimResource.getAsInputStream("countsKml/countsLegend240x300.png"),"countsLegend.png");  ScreenOverlayType overlay=kmlObjectFactory.createScreenOverlayType();  LinkType icon=kmlObjectFactory.createLinkType();  icon.setHref("./countsLegend.png");  overlay.setIcon(icon);  overlay.setName("Legend");  Vec2Type overlayXY=kmlObjectFactory.createVec2Type();  overlayXY.setX(0.0);  overlayXY.setY(0.0);  overlayXY.setXunits(UnitsEnumType.FRACTION);  overlayXY.setYunits(UnitsEnumType.FRACTION);  overlay.setOverlayXY(overlayXY);  Vec2Type screenXY=kmlObjectFactory.createVec2Type();  screenXY.setX(0.02);  screenXY.setY(0.07);  screenXY.setXunits(UnitsEnumType.FRACTION);  screenXY.setYunits(UnitsEnumType.FRACTION);  overlay.setScreenXY(screenXY);  return overlay;}  }
class C{  public static boolean isPointInRing(Coordinate p,Coordinate[] ring){  return locatePointInRing(p,ring) != Location.EXTERIOR;}  }
class C{  private BusControlSystem(int systemID){  busses=new HashMap<Integer,BusMovement>();  travellers=new HashMap<Integer,BusTravellerMovement>();}  }
class C{  public void logInfo(Object message,Throwable exception){  logInternal(INFO,message,exception);}  }
class C{  @Override public void prepareForSample(){  if (samplerThread.get() == null)   samplerThread.set(Boolean.TRUE);  prepareThreadStoreList();  ArrayList<ThreadStorage> removed=null;  for (  ThreadStorage ts : this.threadStoreList) {    if (!ts.isAlive()) {      if (removed == null) {        removed=new ArrayList<ThreadStorage>(64);      }      removed.add(ts);    }    if (ts.dirty) {      ts.dirty=false;      if (ts.intStore != null) {        for (int i=0; i < ts.intStore.length(); i++) {synchronized (this.intReadPrepLock[i]) {            int delta=ts.intStore.getAndSet(i,0);            if (delta != 0) {              this.intStorage.getAndAdd(i,delta);            }          }        }      }      if (ts.longStore != null) {        for (int i=0; i < ts.longStore.length(); i++) {synchronized (this.longReadPrepLock[i]) {            long delta=ts.longStore.getAndSet(i,0);            if (delta != 0) {              this.longStorage.getAndAdd(i,delta);            }          }        }      }    }  }  if (removed != null) {    this.threadStoreList.removeAll(removed);  }}  }
class C{  public void viterbiInference(List seq){  int i, j, k;  int seqLen=seq.size();  if (seqLen <= 0) {    return;  }  if (memorySize < seqLen) {    allocateMemory(seqLen);  }  computeVi(seq,0,Vi,true);  for (j=0; j < numLabels; j++) {    memory[0][j].first=Vi.vect[j];    memory[0][j].second=j;  }  divide(memory[0],sum(memory[0]));  for (i=1; i < seqLen; i++) {    computeVi(seq,i,Vi,true);    for (j=0; j < numLabels; j++) {      memory[i][j].first=0.0;      memory[i][j].second=0;      for (k=0; k < numLabels; k++) {        double tempVal=memory[i - 1][k].first * Mi.mtrx[k][j] * Vi.vect[j];        if (tempVal > memory[i][j].first) {          memory[i][j].first=tempVal;          memory[i][j].second=k;        }      }    }    divide(memory[i],sum(memory[i]));  }  int maxIdx=findMax(memory[seqLen - 1]);  ((Observation)seq.get(seqLen - 1)).modelLabel=maxIdx;  for (i=seqLen - 2; i >= 0; i--) {    ((Observation)seq.get(i)).modelLabel=memory[i + 1][maxIdx].second;    maxIdx=((Observation)seq.get(i)).modelLabel;  }}  }
class C{  private void prepareRevisions() throws VcsException, IOException {  doActionSilently(VcsConfiguration.StandardConfirmation.ADD);  doActionSilently(VcsConfiguration.StandardConfirmation.REMOVE);  FilePath folder=getChildPath(mySandboxRoot,FOLDER_NAME_1);  createDirInCommand(folder);  commit(getChanges().getChanges(),"rev. 1");  assertFolder(folder,0);  FilePath file=getChildPath(folder,FILE_NAME_1);  createFileInCommand(file,CONTENT_1);  commit(getChanges().getChanges(),"rev. 2");  assertFolder(folder,1);  assertFile(file,CONTENT_1,false);  rename(folder,FOLDER_NAME_2);  folder=getChildPath(mySandboxRoot,FOLDER_NAME_2);  commit(getChanges().getChanges(),"rev. 3");  assertFolder(folder,1);  file=getChildPath(folder,FILE_NAME_1);  rename(file,FILE_NAME_2);  commit(getChanges().getChanges(),"rev. 4");  file=getChildPath(folder,FILE_NAME_2);  assertFile(file,CONTENT_1,false);  editFiles(file);  setFileContent(file,CONTENT_2);  commit(getChanges().getChanges(),"rev. 5");  assertFile(file,CONTENT_2,false);}  }
class C{  public void testStress() throws InterruptedException, ExecutionException {  final int ntx=30;  final int nops=10000;  final Journal store=getStore();  try {{      final IndexMetadata indexMetadata=new IndexMetadata("testIndex",UUID.randomUUID());      indexMetadata.setIsolatable(true);      store.registerIndex(indexMetadata);      store.commit();    }    final List<Callable<Void>> tasks=new LinkedList<Callable<Void>>();    for (int i=0; i < ntx; i++) {      tasks.add(new ReadWriteTxTask(store,"testIndex",nops));    }    final List<Future<Void>> futures=store.getExecutorService().invokeAll(tasks);    int i=0;    int nok=0;    for (    Future<Void> future : futures) {      try {        future.get();        nok++;      } catch (      ExecutionException ex) {        if (InnerCause.isInnerCause(ex,ValidationError.class)) {          System.out.println("Note: task[" + i + "] could not be committed due to a write-write conflict.");        } else {          throw ex;        }      }      i++;    }    System.out.println("" + nok + " out of "+ tasks.size()+ " transactions were committed successfully.");    System.out.println("nops=" + (nops * tasks.size()) + ", rangeCount="+ store.getIndex("testIndex").rangeCount());    System.out.println(new Date().toString());  }  finally {    store.destroy();  }}  }
class C{  public void shutdown() throws InterruptedException, IOException {  channelGroup.shutdownNow();  channelGroup.awaitTermination(1,TimeUnit.SECONDS);}  }
class C{  @Override protected void preprocess(){  final Logging log=getLogger();  createStorage();  ArrayDBIDs ids=DBIDUtil.ensureArray(relation.getDBIDs());  if (log.isStatistics()) {    log.statistics(new LongStatistic(this.getClass().getName() + ".k",k));  }  Duration duration=log.isStatistics() ? log.newDuration(this.getClass().getName() + ".precomputation-time").begin() : null;  FiniteProgress progress=getLogger().isVerbose() ? new FiniteProgress("Materializing k nearest neighbors (k=" + k + ")",ids.size(),getLogger()) : null;  List<? extends KNNList> kNNList=null;  if (usebulk) {    kNNList=knnQuery.getKNNForBulkDBIDs(ids,k);    if (kNNList != null) {      int i=0;      for (DBIDIter id=ids.iter(); id.valid(); id.advance(), i++) {        storage.put(id,kNNList.get(i));        log.incrementProcessed(progress);      }    }  } else {    final boolean ismetric=getDistanceQuery().getDistanceFunction().isMetric();    for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {      if (ismetric && storage.get(iter) != null) {        log.incrementProcessed(progress);        continue;      }      KNNList knn=knnQuery.getKNNForDBID(iter,k);      storage.put(iter,knn);      if (ismetric) {        for (DoubleDBIDListIter it=knn.iter(); it.valid() && it.doubleValue() == 0.; it.advance()) {          storage.put(it,knn);        }      }      log.incrementProcessed(progress);    }  }  log.ensureCompleted(progress);  if (duration != null) {    log.statistics(duration.end());  }}  }
class C{  public static Class forName(final String className,final RuntimeException e){  try {    return Class.forName(className);  } catch (  ClassNotFoundException ignore) {    throw e;  }catch (  NoClassDefFoundError ignore) {    throw e;  }}  }
class C{  public ArrayIterator(Object array){  if (!array.getClass().isArray()) {    throw new IllegalArgumentException("Programmer error : internal ArrayIterator invoked w/o array");  }  this.array=array;  pos=0;  size=Array.getLength(this.array);}  }
class C{  private void unsortedIntervalAdded(ListDataEvent e){  int begin=e.getIndex0();  int end=e.getIndex1();  int nElementsAdded=end - begin + 1;  for (  SortedListEntry entry : sortedModel) {    int index=entry.getIndex();    if (index >= begin) {      entry.setIndex(index + nElementsAdded);    }  }  for (int x=begin; x <= end; ++x) {    SortedListEntry newEntry=new SortedListEntry(x);    int insertionPoint=findInsertionPoint(newEntry);    sortedModel.add(insertionPoint,newEntry);    fireIntervalAdded(ListDataEvent.INTERVAL_ADDED,insertionPoint,insertionPoint);  }}  }
class C{  private void endMyTurn(){  Entity next=clientgui.getClient().getGame().getNextEntity(clientgui.getClient().getGame().getTurnIndex());  if ((phase == clientgui.getClient().getGame().getPhase()) && (null != next) && (null != ce())&& (next.getOwnerId() != ce().getOwnerId())) {    clientgui.setDisplayVisible(false);  }  cen=Entity.NONE;  target(null);  clientgui.getBoardView().select(null);  clientgui.getBoardView().highlight(null);  clientgui.getBoardView().cursor(null);  clientgui.bv.clearFiringSolutionData();  clientgui.bv.clearMovementData();  clientgui.bv.clearFieldofF();  clientgui.setSelectedEntityNum(Entity.NONE);  disableButtons();}  }
class C{  public float lonE7ToX(int lon){  return GeoMath.lonE7ToX(map.getWidth(),viewBox,lon);}  }
class C{  public XML addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public NoMissingAttributesCondition(ExampleSet exampleSet,String parameterString){}  }
class C{  public static int random(int i){  return random(0,i);}  }
class C{  @Override public MemBufferHolder<SysMemAllocator> createBuffer(long size,boolean autoreclaim){  MemBufferHolder<SysMemAllocator> ret=null;  ByteBuffer bb=null;  if (currentMemory.get() + size > maxStoreCapacity) {    if (m_activegc) {      m_bufcollector.waitReclaimCoolDown(m_gctimeout);    }  }  if (currentMemory.get() + size <= maxStoreCapacity) {    bb=ByteBuffer.allocateDirect((int)size);  }  if (null != bb) {    ret=new MemBufferHolder<SysMemAllocator>(this,bb);    ret.setCollector(m_bufcollector);    if (autoreclaim) {      m_bufcollector.register(ret);    }    currentMemory.getAndAdd(size);  }  return ret;}  }
class C{  public MongoClients build(){  return new MongoClients(optionBuilder.build(),credentials);}  }
class C{  public Type attribType(JCTree tree,Env<AttrContext> env){  Type result=attribType(tree,env,Type.noType);  return result;}  }
class C{  public ExecutionState basicGetState(){  return state;}  }
class C{  public static DeterministicKey deriveChildKey(DeterministicKey parent,int childNumber){  return deriveChildKey(parent,new ChildNumber(childNumber));}  }
