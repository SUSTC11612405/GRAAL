class C{  public void makeNetworkFeatureCheckRequest(final CheckRequest checkRequest){  if (OkHttpUtils.isOkHttpAvailable()) {    OkHttpUtils.startCheck(checkRequest);  } else {    CheckLatestAsyncTask.start(checkRequest);  }}  }
class C{  private int readField(final ClassVisitor classVisitor,final Context context,int u){  char[] c=context.buffer;  int access=readUnsignedShort(u);  String name=readUTF8(u + 2,c);  String desc=readUTF8(u + 4,c);  u+=6;  String signature=null;  int anns=0;  int ianns=0;  int tanns=0;  int itanns=0;  Object value=null;  Attribute attributes=null;  for (int i=readUnsignedShort(u); i > 0; --i) {    String attrName=readUTF8(u + 2,c);    if ("ConstantValue".equals(attrName)) {      int item=readUnsignedShort(u + 8);      value=item == 0 ? null : readConst(item,c);    } else     if (SIGNATURES && "Signature".equals(attrName)) {      signature=readUTF8(u + 8,c);    } else     if ("Deprecated".equals(attrName)) {      access|=Opcodes.ACC_DEPRECATED;    } else     if ("Synthetic".equals(attrName)) {      access|=Opcodes.ACC_SYNTHETIC | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE;    } else     if (ANNOTATIONS && "RuntimeVisibleAnnotations".equals(attrName)) {      anns=u + 8;    } else     if (ANNOTATIONS && "RuntimeVisibleTypeAnnotations".equals(attrName)) {      tanns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleAnnotations".equals(attrName)) {      ianns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {      itanns=u + 8;    } else {      Attribute attr=readAttribute(context.attrs,attrName,u + 8,readInt(u + 4),c,-1,null);      if (attr != null) {        attr.next=attributes;        attributes=attr;      }    }    u+=6 + readInt(u + 4);  }  u+=2;  FieldVisitor fv=classVisitor.visitField(access,name,desc,signature,value);  if (fv == null) {    return u;  }  if (ANNOTATIONS && anns != 0) {    for (int i=readUnsignedShort(anns), v=anns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,fv.visitAnnotation(readUTF8(v,c),true));    }  }  if (ANNOTATIONS && ianns != 0) {    for (int i=readUnsignedShort(ianns), v=ianns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,fv.visitAnnotation(readUTF8(v,c),false));    }  }  if (ANNOTATIONS && tanns != 0) {    for (int i=readUnsignedShort(tanns), v=tanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,fv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),true));    }  }  if (ANNOTATIONS && itanns != 0) {    for (int i=readUnsignedShort(itanns), v=itanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,fv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),false));    }  }  while (attributes != null) {    Attribute attr=attributes.next;    attributes.next=null;    fv.visitAttribute(attributes);    attributes=attr;  }  fv.visitEnd();  return u;}  }
class C{  public SpiderGitParser(SpiderParam params){  super();  this.params=params;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private String resolveDefinitionDocument(String definitionName){  if (config.isSeparatedDefinitionsEnabled())   return new File(config.getSeparatedDefinitionsFolder(),markupDocBuilder.addFileExtension(normalizeName(definitionName))).getPath(); else   return markupDocBuilder.addFileExtension(config.getDefinitionsDocument());}  }
class C{  public int encode(byte[] data,int off,int length,OutputStream out) throws IOException {  int modulus=length % 3;  int dataLength=(length - modulus);  int a1, a2, a3;  for (int i=off; i < off + dataLength; i+=3) {    a1=data[i] & 0xff;    a2=data[i + 1] & 0xff;    a3=data[i + 2] & 0xff;    out.write(encodingTable[(a1 >>> 2) & 0x3f]);    out.write(encodingTable[((a1 << 4) | (a2 >>> 4)) & 0x3f]);    out.write(encodingTable[((a2 << 2) | (a3 >>> 6)) & 0x3f]);    out.write(encodingTable[a3 & 0x3f]);  }  int b1, b2, b3;  int d1, d2;switch (modulus) {case 0:    break;case 1:  d1=data[off + dataLength] & 0xff;b1=(d1 >>> 2) & 0x3f;b2=(d1 << 4) & 0x3f;out.write(encodingTable[b1]);out.write(encodingTable[b2]);out.write(padding);out.write(padding);break;case 2:d1=data[off + dataLength] & 0xff;d2=data[off + dataLength + 1] & 0xff;b1=(d1 >>> 2) & 0x3f;b2=((d1 << 4) | (d2 >>> 4)) & 0x3f;b3=(d2 << 2) & 0x3f;out.write(encodingTable[b1]);out.write(encodingTable[b2]);out.write(encodingTable[b3]);out.write(padding);break;}return (dataLength / 3) * 4 + ((modulus == 0) ? 0 : 4);}  }
class C{  public static boolean addURLProtocols(Class<?> location){  String ln=location.getPackage().getName();  String p=System.getProperty(PKGS);  boolean add=p == null || !p.contains(ln);  if (add) {    p=(CommonUtils.isEmptyTrimmed(p) ? "" : p + "|") + ln;    System.setProperty(PKGS,p);  }  return add;}  }
class C{  public TransitStopFacility createStopFacility(Id<TransitStopFacility> facilityId,Coord coord,String name,Id<Link> linkId){  TransitStopFacility newTransitStopFacility=scheduleFactory.createTransitStopFacility(facilityId,coord,false);  newTransitStopFacility.setName(name);  newTransitStopFacility.setLinkId(linkId);  return newTransitStopFacility;}  }
class C{  public void service(Mail mail) throws MailetException {  @SuppressWarnings("unchecked") Map<String,byte[]> attachments=(Map<String,byte[]>)mail.getAttribute(attributeName);  if (attachments != null) {    MimeMessage message;    try {      message=mail.getMessage();    } catch (    MessagingException e) {      throw new MailetException("Could not retrieve message from Mail object",e);    }    Iterator<byte[]> i=attachments.values().iterator();    try {      while (i.hasNext()) {        byte[] bytes=i.next();        InputStream is=new BufferedInputStream(new ByteArrayInputStream(bytes));        MimeBodyPart p=new MimeBodyPart(is);        if (!(message.isMimeType("multipart/*") && (message.getContent() instanceof MimeMultipart))) {          Object content=message.getContent();          String contentType=message.getContentType();          MimeMultipart mimeMultipart=new MimeMultipart();          message.setContent(mimeMultipart);          message.saveChanges();          mimeMultipart.setParent(message);          MimeBodyPart bodyPart=new MimeBodyPart();          mimeMultipart.addBodyPart(bodyPart);          bodyPart.setContent(content,contentType);        }        ((MimeMultipart)message.getContent()).addBodyPart(p);      }      message.saveChanges();    } catch (    MessagingException e) {      log("MessagingException in recoverAttachment",e);    }catch (    IOException e) {      log("IOException in recoverAttachment",e);    }  }}  }
class C{  @Override public int hashCode(){  return -initCondition.hashCode();}  }
class C{  public void stop(){  if (!mSearching)   return;  mSearching=false;  for (  DiscoveryProvider provider : discoveryProviders) {    provider.stop();  }  if (multicastLock.isHeld()) {    multicastLock.release();  }}  }
class C{  public ContentRootData(@NotNull ProjectSystemId owner,@NotNull String rootPath){  super(owner);  myRootPath=ExternalSystemApiUtil.toCanonicalPath(rootPath);}  }
class C{  public static Object executeScript(String filePath,String functionName,Map<String,Object> context,Object[] args){  try {    if (filePath.endsWith(".groovy")) {      return GroovyUtil.runScriptAtLocation(filePath,functionName,context);    }    return executeScript(filePath,functionName,createScriptContext(context),args);  } catch (  Exception e) {    String errMsg="Error running script at location [" + filePath + "]: "+ e.toString();    Debug.logWarning(e,errMsg,module);    throw new IllegalArgumentException(errMsg,e);  }}  }
class C{  public static boolean isTestEnabled(Class clazz,Method method){  String fullName=clazz.getName() + "." + method.getName();  if (excludes.containsKey(fullName))   return false; else   return true;}  }
class C{  public T caseTraceStateEntered(TraceStateEntered object){  return null;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  Node lchildNode;  String childName;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  lchildNode=employeeNode.getLastChild();  childName=lchildNode.getNodeName();  assertEquals("whitespace","#text",childName);}  }
class C{  @Deprecated public static XMethod findXMethod(JavaClass[] classList,String methodName,String methodSig){  return findXMethod(classList,methodName,methodSig,ANY_METHOD);}  }
class C{  public void readToToken(int tok,int offset) throws CoreException {  setOffset(offset);  readToToken(tok);}  }
class C{  public JSONArray optJSONArray(String key){  Object o=opt(key);  return o instanceof JSONArray ? (JSONArray)o : null;}  }
class C{  public Builder parallelCorpus(File parallelCorpus){  this.parallelCorpus=parallelCorpus;  return this;}  }
class C{  public void maybePerformFinishedAnimation(){  if (mAnimationProgress > ANIMATION_PROGRESS_STOPPED) {    return;  }  if (mAnimator != null) {    mAnimator.cancel();  }  setAnimationProgress(ANIMATION_PROGRESS_STARTED);  mAnimator=ObjectAnimator.ofFloat(this,"animationProgress",ANIMATION_PROGRESS_STARTED,ANIMATION_PROGRESS_COMPLETED);  mAnimator.start();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:57.832 -0500",hash_original_method="1F04B09633BC6FD3251DA0AD2BE516F3",hash_generated_method="983E9B9D79C85DB2DD69AA68A9F3DB51") public static void cancelThumbnailRequest(ContentResolver cr,long origId){  InternalThumbnails.cancelThumbnailRequest(cr,origId,EXTERNAL_CONTENT_URI,InternalThumbnails.DEFAULT_GROUP_ID);}  }
class C{  public Matrix4d m23(double m23){  this.m23=m23;  properties&=~(PROPERTY_IDENTITY | PROPERTY_AFFINE | PROPERTY_TRANSLATION);  return this;}  }
class C{  private void disableButtons(){  setConventionalEnabled(0);  setCommandEnabled(0);  setVibrabombEnabled(0);  setActiveEnabled(0);  setInfernoEnabled(0);  setRemoveMineEnabled(false);  butDone.setEnabled(false);}  }
class C{  public static String asString(URI value){  return value != null ? value.toString() : null;}  }
class C{  private void correctErrors(byte[] codewordBytes,int numDataCodewords) throws ChecksumException {  int numCodewords=codewordBytes.length;  int[] codewordsInts=new int[numCodewords];  for (int i=0; i < numCodewords; i++) {    codewordsInts[i]=codewordBytes[i] & 0xFF;  }  int numECCodewords=codewordBytes.length - numDataCodewords;  try {    rsDecoder.decode(codewordsInts,numECCodewords);  } catch (  ReedSolomonException rse) {    throw ChecksumException.getChecksumInstance();  }  for (int i=0; i < numDataCodewords; i++) {    codewordBytes[i]=(byte)codewordsInts[i];  }}  }
class C{  @Override public boolean isStandalone(){  return false;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override synchronized boolean isComparableTypeValid(ObjectName object,String attribute,Comparable<?> value){  final CounterMonitorObservedObject o=(CounterMonitorObservedObject)getObservedObject(object);  if (o == null)   return false;  if (value instanceof Integer) {    o.setType(INTEGER);  } else   if (value instanceof Byte) {    o.setType(BYTE);  } else   if (value instanceof Short) {    o.setType(SHORT);  } else   if (value instanceof Long) {    o.setType(LONG);  } else {    return false;  }  return true;}  }
class C{  private void saveAttachmentToFile(){  int index=cbContent.getSelectedIndex();  log.info("index=" + index);  if (m_attachment.getEntryCount() < index)   return;  String fileName=getFileName(index);  String ext=fileName.substring(fileName.lastIndexOf('.'));  log.config("Ext=" + ext);  JFileChooser chooser=new JFileChooser();  chooser.setDialogType(JFileChooser.SAVE_DIALOG);  chooser.setDialogTitle(Msg.getMsg(Env.getCtx(),"AttachmentSave"));  File f=new File(fileName);  chooser.setSelectedFile(f);  int returnVal=chooser.showSaveDialog(this);  if (returnVal != JFileChooser.APPROVE_OPTION)   return;  File saveFile=chooser.getSelectedFile();  if (saveFile == null)   return;  log.config("Save to " + saveFile.getAbsolutePath());  m_attachment.getEntryFile(index,saveFile);}  }
class C{  public JSONStringer object() throws JSONException {  if (this.mode == 'i') {    this.mode='o';  }  if (this.mode == 'o' || this.mode == 'a') {    this.append("{");    push('k');    this.comma=false;    return this;  }  throw new JSONException("Misplaced object.");}  }
class C{  private boolean listenerRemove0(Object topic,GridMessageListener expected){  if (topic instanceof GridTopic) {synchronized (sysLsnrsMux) {      return systemListenerChange(topic,expected,null);    }  } else   return lsnrMap.remove(topic,expected);}  }
class C{  public CheckedListIterator(ListIterator<E> i,Class<E> type){  this.i=i;  this.type=type;}  }
class C{  protected void add_rhs_part(production_part part) throws java.lang.Exception {  if (rhs_pos >= MAX_RHS)   throw new Exception("Internal Error: Productions limited to " + MAX_RHS + " symbols and actions");  rhs_parts[rhs_pos]=part;  rhs_pos++;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.951 -0500",hash_original_method="8508513C5D9E5D7A42B020CFB91803A3",hash_generated_method="CE66BF7B4E46285328F82EC9849A383E") public boolean startsWith(String prefix){  return getTaintBoolean();}  }
class C{  private void updateGrid(){  int delta=0;  int maxCols=0;  int rows;  for (int counter=0; counter < getChildCount(); counter++) {    TableRowElementInfo row=getRow(counter);    int prev=0;    for (int y=0; y < delta; y++) {      prev=Math.max(prev,getRow(counter - y - 1).getColumnCount(y + 2));    }    delta=Math.max(row.getRowCount(),delta);    delta--;    maxCols=Math.max(maxCols,row.getColumnCount() + prev);  }  rows=getChildCount() + delta;  grid=new TableCellElementInfo[rows][];  for (int counter=0; counter < rows; counter++) {    grid[counter]=new TableCellElementInfo[maxCols];  }  for (int counter=0; counter < rows; counter++) {    getRow(counter).updateGrid(counter);  }}  }
class C{  protected void drawRangeMarkers(Graphics2D g2,Rectangle2D dataArea,int index,Layer layer){  CategoryItemRenderer r=getRenderer(index);  if (r == null) {    return;  }  Collection markers=getRangeMarkers(index,layer);  ValueAxis axis=getRangeAxisForDataset(index);  if (markers != null && axis != null) {    Iterator iterator=markers.iterator();    while (iterator.hasNext()) {      Marker marker=(Marker)iterator.next();      r.drawRangeMarker(g2,this,axis,marker,dataArea);    }  }}  }
class C{  public PriceModelData(int position,long startDate,long endDate,BigDecimal netAmount){  this.position=position;  this.startDate=startDate;  this.endDate=endDate;  this.netAmount=netAmount;}  }
class C{  public ParameterizedLinkedHashMap(int initialCapacity,float loadFactor,boolean accessOrder,Equality keyEquality){  super(initialCapacity,loadFactor,keyEquality);  this.accessOrder=accessOrder;}  }
class C{  public void alignItemsHorizontally(){  alignItemsHorizontally(kDefaultPadding);}  }
class C{  @Interruptible public static void resolve() throws NoClassDefFoundError {  VM.disableGC();  Address fp=Magic.getCallerFramePointer(Magic.getFramePointer());  int cmid=Magic.getCompiledMethodID(fp);  OptCompiledMethod cm=(OptCompiledMethod)CompiledMethods.getCompiledMethod(cmid);  Address ip=Magic.getReturnAddressUnchecked(Magic.getFramePointer());  Offset offset=cm.getInstructionOffset(ip);  VM.enableGC();  OptLinker.resolveDynamicLink(cm,offset);}  }
class C{  public NetworkResponse(int statusCode,byte[] data,Map<String,String> headers,boolean notModified){  this.statusCode=statusCode;  this.data=data;  this.headers=headers;  this.notModified=notModified;}  }
class C{  public static byte[] decode(String input) throws ParseException {  if (input.length() == 0) {    return new byte[0];  }  byte[] input58=new byte[input.length()];  for (int i=0; i < input.length(); ++i) {    char c=input.charAt(i);    int digit=c < 128 ? INDEXES[c] : -1;    if (digit < 0) {      throw new ParseException("Illegal character " + c + " at position "+ i,i);    }    input58[i]=(byte)digit;  }  int zeros=0;  while (zeros < input58.length && input58[zeros] == 0) {    ++zeros;  }  byte[] decoded=new byte[input.length()];  int outputStart=decoded.length;  for (int inputStart=zeros; inputStart < input58.length; ) {    decoded[--outputStart]=divmod(input58,inputStart,58,256);    if (input58[inputStart] == 0) {      ++inputStart;    }  }  while (outputStart < decoded.length && decoded[outputStart] == 0) {    ++outputStart;  }  return Arrays.copyOfRange(decoded,outputStart - zeros,decoded.length);}  }
class C{  public static Vector2f dFdxLinear(float v0X,float v0Y,float f0X,float f0Y,float v1X,float v1Y,float f1X,float f1Y,float v2X,float v2Y,float f2X,float f2Y,Vector2f dest){  float v12Y=v1Y - v2Y;  float v02Y=v0Y - v2Y;  float den=v12Y * (v0X - v2X) + (v2X - v1X) * v02Y;  float l3_1=den - v12Y + v02Y;  float invDen=1.0f / den;  dest.x=invDen * (v12Y * f0X - v02Y * f1X + l3_1 * f2X) - f2X;  dest.y=invDen * (v12Y * f0Y - v02Y * f1Y + l3_1 * f2Y) - f2Y;  return dest;}  }
class C{  public AggregateTable(Visualization vis,String group,Schema schema){  super(vis,group,schema,TableAggregateItem.class);  m_aggregated=AGGREGATED_SCHEMA.instantiate();  m_aggregated.index(AGGREGATE);  m_aggregated.index(MEMBER_HASH);}  }
class C{  public void emptyElement(String element) throws IOException {  emptyElement(element,null);}  }
class C{  public Matrix4f scaleAroundLocal(float sx,float sy,float sz,float ox,float oy,float oz){  return scaleAroundLocal(sx,sy,sz,ox,oy,oz,this);}  }
class C{  public static <K,V>MutableMap<K,V> selectMapOnEntry(Map<K,V> map,Predicate2<? super K,? super V> predicate){  return MapIterate.selectMapOnEntry(map,predicate,UnifiedMap.newMap());}  }
class C{  protected ValueSource parseValueSource(boolean doConsumeDelimiter) throws SyntaxError {  ValueSource valueSource;  int ch=sp.peek();  if (ch >= '0' && ch <= '9' || ch == '.' || ch == '+' || ch == '-') {    Number num=sp.getNumber();    if (num instanceof Long) {      valueSource=new LongConstValueSource(num.longValue());    } else     if (num instanceof Double) {      valueSource=new DoubleConstValueSource(num.doubleValue());    } else {      valueSource=new ConstValueSource(num.floatValue());    }  } else   if (ch == '"' || ch == '\'') {    valueSource=new LiteralValueSource(sp.getQuotedString());  } else   if (ch == '$') {    sp.pos++;    String param=sp.getId();    String val=getParam(param);    if (val == null) {      throw new SyntaxError("Missing param " + param + " while parsing function '"+ sp.val+ "'");    }    QParser subParser=subQuery(val,"func");    if (subParser instanceof FunctionQParser) {      ((FunctionQParser)subParser).setParseMultipleSources(true);    }    Query subQuery=subParser.getQuery();    if (subQuery instanceof FunctionQuery) {      valueSource=((FunctionQuery)subQuery).getValueSource();    } else {      valueSource=new QueryValueSource(subQuery,0.0f);    }  } else {    String id=sp.getId();    if (sp.opt("(")) {      ValueSourceParser argParser=req.getCore().getValueSourceParser(id);      if (argParser == null) {        throw new SyntaxError("Unknown function " + id + " in FunctionQuery("+ sp+ ")");      }      valueSource=argParser.parse(this);      sp.expect(")");    } else {      if ("true".equals(id)) {        valueSource=new BoolConstValueSource(true);      } else       if ("false".equals(id)) {        valueSource=new BoolConstValueSource(false);      } else {        SchemaField f=req.getSchema().getField(id);        valueSource=f.getType().getValueSource(f,this);      }    }  }  if (doConsumeDelimiter)   consumeArgumentDelimiter();  return valueSource;}  }
class C{  public AESWrapCipher(int keySize){  cipher=new AESCrypt();  fixedKeySize=keySize;}  }
class C{  public boolean execute(String action,JSONArray args,CallbackContext callbackContext) throws JSONException {  CordovaArgs cordovaArgs=new CordovaArgs(args);  return execute(action,cordovaArgs,callbackContext);}  }
class C{  public DownloadInfo(){}  }
class C{  @SuppressWarnings("deprecation") @Override public void stop(){  Enumeration<String> en=m_listenees.keys();  while (en.hasMoreElements()) {    Object tempO=m_listenees.get(en.nextElement());    if (tempO instanceof BeanCommon) {      ((BeanCommon)tempO).stop();    }  }  if (m_buildThread != null) {    m_buildThread.interrupt();    m_buildThread.stop();    m_buildThread=null;    m_visual.setStatic();  }}  }
class C{  static Object newInstance(String className,ClassLoader cl,boolean doFallback) throws ConfigurationError {  try {    Class providerClass=findProviderClass(className,cl,doFallback);    Object instance=providerClass.newInstance();    debugPrintln("created new instance of " + providerClass + " using ClassLoader: "+ cl);    return instance;  } catch (  ClassNotFoundException x) {    throw new ConfigurationError("Provider " + className + " not found",x);  }catch (  Exception x) {    throw new ConfigurationError("Provider " + className + " could not be instantiated: "+ x,x);  }}  }
class C{  public Minute(){  this(new Date());}  }
class C{  protected void receivedServerHello(ServerHello message) throws HandshakeException {  if (serverHello != null && (message.getMessageSeq() == serverHello.getMessageSeq())) {    return;  }  serverHello=message;  usedProtocol=message.getServerVersion();  serverRandom=message.getRandom();  session.setSessionIdentifier(message.getSessionId());  session.setCipherSuite(message.getCipherSuite());  session.setCompressionMethod(message.getCompressionMethod());  if (message.getMaxFragmentLength() != null) {    MaxFragmentLengthExtension.Length maxFragmentLength=message.getMaxFragmentLength().getFragmentLength();    if (maxFragmentLength.code() == maxFragmentLengthCode) {      session.setMaxFragmentLength(maxFragmentLength.length());    } else {      throw new HandshakeException("Server wants to use other max. fragment size than proposed",new AlertMessage(AlertLevel.FATAL,AlertDescription.ILLEGAL_PARAMETER,message.getPeer()));    }  }  session.setSendRawPublicKey(CertificateType.RAW_PUBLIC_KEY.equals(serverHello.getClientCertificateType()));  session.setReceiveRawPublicKey(CertificateType.RAW_PUBLIC_KEY.equals(serverHello.getServerCertificateType()));}  }
class C{  public static String toTimeString(java.util.Date date){  if (date == null)   return "";  Calendar calendar=Calendar.getInstance();  calendar.setTime(date);  return (toTimeString(calendar.get(Calendar.HOUR_OF_DAY),calendar.get(Calendar.MINUTE),calendar.get(Calendar.SECOND)));}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  _JavaDocLexer(java.io.Reader in){  this.zzReader=in;}  }
class C{  private void updateStateViewLater(CSP csp,Assignment assignment){  stateViewCtrl.update(csp,assignment);  String txt1="Step " + stepCounter + ": ";  String txt2=assignment != null ? assignment.toString() : "Domain reduced";  simPaneCtrl.setStatus(txt1 + txt2);}  }
class C{  public EventDefinitionItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  private void emitMarkedLines(final HtmlEscapeStringBuilder out,final Line lines){  final HtmlEscapeStringBuilder in=new HtmlEscapeStringBuilder();  Line line=lines;  while (line != null) {    if (!line.isEmpty) {      in.append(line.value.substring(line.leading,line.value.length() - line.trailing));      if (line.trailing >= 2) {        in.appendHtml("<br>");      }    }    if (line.next != null) {      in.append('\n');    }    line=line.next;  }  this.recursiveEmitLine(out,in.toString(),0,MarkToken.NONE);}  }
class C{  public void removeTag(String tagKey){  if (tagKey == null) {    throw new IllegalArgumentException("Removing tag with key 'null'.");  } else   if (tagKey.isEmpty()) {    throw new IllegalArgumentException("Removing tag with empty key.");  } else   if (!tags.containsKey(tagKey)) {    throw new IllegalArgumentException("Removing tag with key '" + tagKey + "'.");  } else {    tags.remove(tagKey);  }}  }
class C{  public static DLSocketAddress deserialize(String lockId) throws IOException {  String parts[]=lockId.split(SEP);  if (3 != parts.length) {    throw new IOException("Invalid dl socket address " + lockId);  }  int version;  try {    version=Integer.parseInt(parts[0]);  } catch (  NumberFormatException nfe) {    throw new IOException("Invalid version found in " + lockId,nfe);  }  if (VERSION != version) {    throw new IOException("Invalid version " + version + " found in "+ lockId+ ", expected "+ VERSION);  }  int shardId;  try {    shardId=Integer.parseInt(parts[1]);  } catch (  NumberFormatException nfe) {    throw new IOException("Invalid shard id found in " + lockId,nfe);  }  InetSocketAddress address=parseSocketAddress(parts[2]);  return new DLSocketAddress(shardId,address);}  }
class C{  public void zoomIn(){  Matrix save=mViewPortHandler.zoomIn(getWidth() / 2f,-(getHeight() / 2f));  mViewPortHandler.refresh(save,this,true);}  }
class C{  public void emitAnewarray(int od,Type arrayType){  emitop(anewarray);  if (!alive)   return;  emit2(od);  state.pop(1);  state.push(arrayType);}  }
class C{  public Map<String,String> retrieveVacation(String user) throws IllegalArgumentException, IOException, ServiceException {  if (isBlankOrNullString(user)) {    throw new IllegalArgumentException();  }  logger.log(Level.INFO,"Getting vacation settings for user " + user + " ...");  GenericEntry vacationEntry=retrieveSettingsEntry(user,Constants.VACATION);  if (vacationEntry != null) {    Map<String,String> vacation=new HashMap<String,String>();    vacation.put(Constants.ENABLE,vacationEntry.getProperty(Constants.ENABLE));    vacation.put(Constants.SUBJECT,vacationEntry.getProperty(Constants.SUBJECT));    vacation.put(Constants.MESSAGE,vacationEntry.getProperty(Constants.MESSAGE));    vacation.put(Constants.CONTACTS_ONLY,vacationEntry.getProperty(Constants.CONTACTS_ONLY));    return vacation;  }  return null;}  }
class C{  public void reset(){  currentContext=new Context2(null);  currentContext.declarePrefix("xml",XMLNS);}  }
class C{  private static void run(Generator generator,DTBuilder builder,DateValue[] expected,boolean terminating) throws IteratorShortCircuitingException {  List<DateValue> actual=new ArrayList<DateValue>();  while (generator.generate(builder) && (terminating || actual.size() < expected.length)) {    actual.add(builder.toDate());  }  assertEquals(Arrays.asList(expected),actual);}  }
class C{  public final CC gapLeft(String boundsSize){  hor.setGapBefore(ConstraintParser.parseBoundSize(boundsSize,true,true));  return this;}  }
class C{  @Override public DataSet simulateData(int sampleSize,boolean latentDataSaved){  return simulateData(sampleSize,null,latentDataSaved);}  }
class C{  public E poll(){  return pollFirst();}  }
class C{  @Override public List<WorkOrderActivity> searchWOActivitiesFromRevEstimates(final Map<String,Object> criteriaMap){  logger.info("-------------------------Inside searchWOActivities-----------------------");  List<WorkOrderActivity> woActivityList;  String dynQuery="select distinct woa from WorkOrderActivity woa left join woa.activity.schedule schedule" + " left join woa.activity.nonSor nonSor where woa.id != null ";  Object[] params;  final List<Object> paramList=new ArrayList<Object>();  if (criteriaMap.get(WORKORDER_NO) != null) {    dynQuery=dynQuery + " and woa.workOrderEstimate.workOrder.parent.workOrderNumber = ? ";    paramList.add(criteriaMap.get(WORKORDER_NO));  }  if (criteriaMap.get(WORKORDER_ESTIMATE_ID) != null) {    dynQuery=dynQuery + " and woa.workOrderEstimate.estimate.parent.id = ? ";    paramList.add(criteriaMap.get(WORKORDER_ESTIMATE_ID));  }  if (criteriaMap.get(ACTIVITY_DESC) != null) {    dynQuery=dynQuery + " and (" + "(UPPER(schedule.description) like ?) or ("+ " UPPER(nonSor.description)  like ? ))";    paramList.add("%" + ((String)criteriaMap.get(ACTIVITY_DESC)).toUpperCase() + "%");    paramList.add("%" + ((String)criteriaMap.get(ACTIVITY_DESC)).toUpperCase() + "%");  }  if (criteriaMap.get(ACTIVITY_CODE) != null) {    dynQuery=dynQuery + " and " + "UPPER(schedule.code) like ? ";    paramList.add("%" + ((String)criteriaMap.get(ACTIVITY_CODE)).toUpperCase() + "%");  }  dynQuery=dynQuery + " and  woa.workOrderEstimate.estimate.egwStatus.code=?   ";  paramList.add(WorksConstants.APPROVED);  if (criteriaMap.get(REVISION_TYPE) != null) {    dynQuery=dynQuery + " and woa.activity.revisionType=?  ";    paramList.add(criteriaMap.get(REVISION_TYPE));  }  final Double extraPercentage=worksService.getConfigval();  double factor=1;  if (extraPercentage.doubleValue() > 0)   factor=1 + extraPercentage / 100;  if (!"Required".equals(worksService.getWorksConfigValue("ORDER_NUMBER_REQUIRED"))) {    dynQuery=dynQuery + "and ((woa.approvedQuantity*? > (select sum(mbd.quantity) as sumq from MBDetails mbd " + " where mbd.mbHeader.egwStatus.code != ? group by mbd.workOrderActivity "+ "having mbd.workOrderActivity.id = woa.id)) or (select sum(mbd.quantity) as sumq from MBDetails mbd "+ " where mbd.mbHeader.egwStatus.code != ? group by mbd.workOrderActivity "+ "having mbd.workOrderActivity.id = woa.id) is null)";    paramList.add(factor);    paramList.add(MBHeader.MeasurementBookStatus.CANCELLED.toString());    paramList.add(MBHeader.MeasurementBookStatus.CANCELLED.toString());  }  params=new Object[paramList.size()];  params=paramList.toArray(params);  woActivityList=genericService.findAllBy(dynQuery,params);  return woActivityList;}  }
class C{  public void addOperation(String type,String date,String filename,FileHistory history){  OperationMemo r=new OperationMemo();  r.type=type;  r.date=date;  r.filename=filename;  r.history=history;  list.add(r);}  }
class C{  void assertReceivedOnNext(List<T> items){  if (onNextEvents.size() != items.size()) {    assertionError("Number of items does not match. Provided: " + items.size() + "  Actual: "+ onNextEvents.size()+ ".\n"+ "Provided values: "+ items+ "\n"+ "Actual values: "+ onNextEvents+ "\n");  }  for (int i=0; i < items.size(); i++) {    T expected=items.get(i);    T actual=onNextEvents.get(i);    if (expected == null) {      if (actual != null) {        assertionError("Value at index: " + i + " expected to be [null] but was: ["+ actual+ "]\n");      }    } else     if (!expected.equals(actual)) {      assertionError("Value at index: " + i + " expected to be ["+ expected+ "] ("+ expected.getClass().getSimpleName()+ ") but was: ["+ actual+ "] ("+ (actual != null ? actual.getClass().getSimpleName() : "null")+ ")\n");    }  }}  }
class C{  public OSTenant mapToOsTenant(KeystoneTenant tenant){  if (tenant != null) {    OSTenant osTenant=new OSTenant();    osTenant.setOsId(tenant.getId());    osTenant.setDescription(getProperTenantDescription(tenant.getDescription()));    osTenant.setName(tenant.getName());    osTenant.setEnabled(Boolean.parseBoolean(tenant.getEnabled()));    osTenant.setExcluded(DEFAULT_EXCLUDED_TENANT_OPTION);    return osTenant;  }  throw APIException.internalServerErrors.targetIsNullOrEmpty("KeystoneTenant");}  }
class C{  public String globalInfo(){  return "Class for building and using a decision stump. Usually used in " + "conjunction with a boosting algorithm. Does regression (based on " + "mean-squared error) or classification (based on entropy). Missing "+ "is treated as a separate value.";}  }
class C{  public void saveSettings(boolean onExit){  if (onExit) {    if (settingsAlreadySavedOnExit) {      return;    }    settingsAlreadySavedOnExit=true;  }  LOGGER.info("Saving settings..");  System.out.println("Saving settings..");  if (g != null && g.guiCreated) {    g.saveWindowStates();  }  if (!onExit || !settings.getBoolean("dontSaveSettings")) {    addressbook.saveToFile();    settings.saveSettingsToJson();  }}  }
class C{  protected void error(String msg) throws javax.xml.transform.TransformerException {  error(msg,null);}  }
class C{  @Override public Long sort(final String key,final SortingParams sortingParameters,final String dstkey){  checkIsInMultiOrPipeline();  client.sort(key,sortingParameters,dstkey);  return client.getIntegerReply();}  }
class C{  public static double[][] convert1Dto2DDoubleArray(double[] array,int rows){  int cols=array.length / rows;  double[][] ret=new double[rows][cols];  for (int c=0; c < array.length; c++) {    ret[c % cols][c / cols]=array[c];  }  return ret;}  }
class C{  public void addMessage(final List<Record> messagesToAdd){  this.messages.addAll(messagesToAdd);}  }
class C{  static void removeFromBookmarks(Context context,ContentResolver cr,String url,String title){  Cursor cursor=null;  try {    Uri uri=BookmarkUtils.getBookmarksUri(context);    cursor=cr.query(uri,new String[]{BrowserContract.Bookmarks._ID},BrowserContract.Bookmarks.URL + " = ? AND " + BrowserContract.Bookmarks.TITLE+ " = ?",new String[]{url,title},null);    if (!cursor.moveToFirst()) {      return;    }    uri=ContentUris.withAppendedId(BrowserContract.Bookmarks.CONTENT_URI,cursor.getLong(0));    cr.delete(uri,null,null);    if (context != null) {      Toast.makeText(context,R.string.removed_from_bookmarks,Toast.LENGTH_LONG).show();    }  } catch (  IllegalStateException e) {    Log.e(LOGTAG,"removeFromBookmarks",e);  } finally {    if (cursor != null)     cursor.close();  }}  }
class C{  public static Connection connect(DBInstanceInfo db,DBCredential cred,MyPerfContext context) throws java.sql.SQLException {  java.util.Properties info=new java.util.Properties();  info.put("user",cred.getUsername());  info.put("password",cred.getPassword());  if ("oracle".equalsIgnoreCase(db.getDbType())) {    info.put("oracle.net.CONNECT_TIMEOUT",String.valueOf(context.getConnectionTimeout()));    info.put("oracle.net.READ_TIMEOUT",String.valueOf(context.getConnectionReadTimeout()));    info.put("oracle.jdbc.ReadTimeout",String.valueOf(context.getConnectionReadTimeout()));  } else   if ("mysql".equalsIgnoreCase(db.getDbType())) {    info.put("connectTimeout",String.valueOf(context.getConnectionTimeout()));    info.put("socketTimeout",String.valueOf(context.getConnectionReadTimeout()));  }  return DriverManager.getConnection(db.getConnectionString(),info);}  }
class C{  public JSONObject put(String key,double value){  super.put(key,new Double(value));  return this;}  }
class C{  private void initialize(){  this.setLayout(new CardLayout());  this.setName(getContextIndex() + ": " + PANEL_NAME);  this.setLayout(new GridBagLayout());  this.setBorder(new EmptyBorder(2,2,2,2));  this.add(new JLabel("<html><p>" + Constant.messages.getString("forceduser.panel.label.description") + "</p></html>"),LayoutHelper.getGBC(0,0,1,1.0D));  this.add(getUsersComboBox(),LayoutHelper.getGBC(0,2,1,1.0D,new Insets(5,0,0,0)));  this.add(new JLabel(),LayoutHelper.getGBC(0,99,1,1.0D,1.0D));}  }
class C{  public GeoDistanceBuilder addRange(String key,double from,double to){  ranges.add(new Range(key,from,to));  return this;}  }
class C{  public int compareTo(Object o) throws ClassCastException {  if (!(o instanceof XTIFFField))   throw new ClassCastException("comparator is not an XTIFFField");  if (o == null)   throw new NullPointerException("comparator");  return tag - ((XTIFFField)o).tag;}  }
class C{  public void done(){  stop("Completed.");  logger.log(priority,this);}  }
class C{  public void init(){  Box propsBox=Box.createVerticalBox();  propsBox.setOpaque(true);  propsBox.add(Box.createVerticalGlue());  JPanel runTools=new JPanel();  runTools.add(new JLabel("Iterate: "));  runTools.add(new JButton(runAction));  JButton stepButton=new JButton(stepAction);  stepButton.setHideActionText(true);  runTools.add(stepButton);  JButton resetButton=new JButton(resetAction);  resetButton.setHideActionText(true);  runTools.add(resetButton);  JButton randomizeButton=new JButton(randomizeAction);  randomizeButton.setHideActionText(true);  runTools.add(randomizeButton);  propsBox.add(runTools);  JSeparator separator=new JSeparator(SwingConstants.HORIZONTAL);  propsBox.add(separator);  LabelledItemPanel labelPanel=new LabelledItemPanel();  labelPanel.addItem("Iterations:",iterationsLabel);  propsBox.add(labelPanel);  add(propsBox);  update();}  }
class C{  public void addRepositoryConnectionListener(RepositoryConnectionListener listener){  conListeners.add(listener);}  }
class C{  public void removeCampo(DefCampo campo){  campos.remove(campo);}  }
class C{  public static boolean validateHostname(final String dnsServer,final String hostname){  try {    getAttribute(dnsServer,hostname,CONTEXT_ATTRIBUTE_A);  } catch (  NamingException e) {    Logger.error(e,e.getMessage());    return false;  }catch (  UnknownHostException e) {    Logger.error(e,e.getMessage());    return false;  }  return true;}  }
class C{  private void initializeStatically(){  bindingProcesor.initializeBindings();  stopwatch.resetAndLog("Binding initialization");  for (  InjectorShell shell : shells) {    shell.getInjector().index();  }  stopwatch.resetAndLog("Binding indexing");  injectionRequestProcessor.process(shells);  stopwatch.resetAndLog("Collecting injection requests");  bindingProcesor.runCreationListeners();  stopwatch.resetAndLog("Binding validation");  injectionRequestProcessor.validate();  stopwatch.resetAndLog("Static validation");  initializer.validateOustandingInjections(errors);  stopwatch.resetAndLog("Instance member validation");  new LookupProcessor(errors).process(shells);  for (  InjectorShell shell : shells) {    ((DeferredLookups)shell.getInjector().lookups).initialize(errors);  }  stopwatch.resetAndLog("Provider verification");  for (  InjectorShell shell : shells) {    if (!shell.getElements().isEmpty()) {      throw new AssertionError("Failed to execute " + shell.getElements());    }  }  errors.throwCreationExceptionIfErrorsExist();}  }
class C{  public static int createWindowNo(Container win){  int retValue=s_windows.size();  s_windows.add(win);  return retValue;}  }
class C{  private boolean findNodeFromTail(Node node){  Node t=tail;  for (; ; ) {    if (t == node)     return true;    if (t == null)     return false;    t=t.prev;  }}  }
class C{  public TeXFormula addStrut(int widthUnit,float width,int heightUnit,float height,int depthUnit,float depth) throws InvalidUnitException {  return add(new SpaceAtom(widthUnit,width,heightUnit,height,depthUnit,depth));}  }
class C{  private void appendAffix(StringBuffer buffer,String affixPattern,String expAffix,boolean localized){  if (affixPattern == null) {    appendAffix(buffer,expAffix,localized);  } else {    int i;    for (int pos=0; pos < affixPattern.length(); pos=i) {      i=affixPattern.indexOf(QUOTE,pos);      if (i < 0) {        appendAffix(buffer,affixPattern.substring(pos),localized);        break;      }      if (i > pos) {        appendAffix(buffer,affixPattern.substring(pos,i),localized);      }      char c=affixPattern.charAt(++i);      ++i;      if (c == QUOTE) {        buffer.append(c);      } else       if (c == CURRENCY_SIGN && i < affixPattern.length() && affixPattern.charAt(i) == CURRENCY_SIGN) {        ++i;        buffer.append(c);      } else       if (localized) {switch (c) {case PATTERN_PERCENT:          c=symbols.getPercent();        break;case PATTERN_PER_MILLE:      c=symbols.getPerMill();    break;case PATTERN_MINUS:  c=symbols.getMinusSign();break;}}buffer.append(c);}}}  }
class C{  @Override public void addPropertiesFile(String propertiesFile){  this.propertiesFiles.add(propertiesFile);}  }
class C{  public boolean isCallableConstructor(){  return false;}  }
class C{  public void handleOtherAnimationChanged(String type){}  }
class C{  public void collectMetrics(StorageSystem system,DbClient dbClient) throws Exception {  log.info("Collecting statistics for XtremIO system {}",system.getNativeGuid());  XtremIOClient xtremIOClient=XtremIOProvUtils.getXtremIOClient(dbClient,system,xtremioRestClientFactory);  if (!xtremIOClient.isVersion2()) {    throw XtremIOApiException.exceptions.meteringNotSupportedFor3xVersions();  }  String xtremIOClusterName=xtremIOClient.getClusterDetails(system.getSerialNumber()).getName();  collectXEnvCPUUtilization(system,dbClient,xtremIOClient,xtremIOClusterName);}  }
class C{  @DSComment("From safe class list") @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:18.078 -0500",hash_original_method="46001E95C0F59DFED22A324D2D070740",hash_generated_method="BF273AFD2BD6FD003E3BC80121842413") public synchronized StringBuffer append(char[] chars,int start,int length){  append0(chars,start,length);  return this;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_documentinvalidcharacterexceptioncreateelement.class,args);}  }
class C{  public RestResponse(IParserRequest<T> request,boolean isFromCache,Headers headers,T result,long millis,Exception e){  this.request=request;  this.isFromCache=isFromCache;  this.headers=headers;  this.result=result;  this.mNetworkMillis=millis;  this.mException=e;}  }
class C{  public Connection(String hostname,int port){  this.hostname=hostname;  this.port=port;}  }
class C{  public static ReceiveResponse receive(String receivingAddress,String callbackUrl,String apiCode) throws APIException, IOException {  Map<String,String> params=new HashMap<String,String>();  params.put("address",receivingAddress);  params.put("callback",callbackUrl);  params.put("method","create");  if (apiCode != null) {    params.put("api_code",apiCode);  }  String response=HttpClient.getInstance().post("api/receive",params);  JsonParser parser=new JsonParser();  JsonObject obj=parser.parse(response).getAsJsonObject();  return new ReceiveResponse(obj.get("fee_percent").getAsInt(),obj.get("destination").getAsString(),obj.get("input_address").getAsString(),obj.get("callback_url").getAsString());}  }
class C{  protected static int parseValueLength(ByteArrayInputStream pduDataStream){  assert (null != pduDataStream);  int temp=pduDataStream.read();  assert (-1 != temp);  int first=temp & 0xFF;  if (first <= SHORT_LENGTH_MAX) {    return first;  } else   if (first == LENGTH_QUOTE) {    return parseUnsignedInt(pduDataStream);  }  throw new RuntimeException("Value length > LENGTH_QUOTE!");}  }
class C{  public final void testRSAOtherPrimeInfo04(){  try {    new RSAOtherPrimeInfo(BigInteger.valueOf(1L),BigInteger.valueOf(2L),null);    fail("Expected NPE not thrown");  } catch (  NullPointerException e) {  }}  }
class C{  public boolean isCollidable(){  return s_collidable;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.182 -0400",hash_original_method="19B914B7C824D02A5C6108E11D6A0460",hash_generated_method="9EF4DE76442F72EC59DA5F3E6F972B88") public static String toString(InputStream input) throws IOException {  return toString(input,Charset.defaultCharset());}  }
class C{  static <T>void sort(T[] a,int lo,int hi,Comparator<? super T> c,T[] work,int workBase,int workLen){  int nRemaining=hi - lo;  if (nRemaining < 2)   return;  if (nRemaining < MIN_MERGE) {    int initRunLen=countRunAndMakeAscending(a,lo,hi,c);    binarySort(a,lo,hi,lo + initRunLen,c);    return;  }  TimSort<T> ts=new TimSort<>(a,c,work,workBase,workLen);  int minRun=minRunLength(nRemaining);  do {    int runLen=countRunAndMakeAscending(a,lo,hi,c);    if (runLen < minRun) {      int force=nRemaining <= minRun ? nRemaining : minRun;      binarySort(a,lo,lo + force,lo + runLen,c);      runLen=force;    }    ts.pushRun(lo,runLen);    ts.mergeCollapse();    lo+=runLen;    nRemaining-=runLen;  } while (nRemaining != 0);  ts.mergeForceCollapse();}  }
class C{  public static void processEventIds(final Context context,final Set<Long> eventIds){  final String senderId=context.getResources().getString(R.string.notification_sender_id);  if (senderId == null || senderId.isEmpty()) {    Log.i(TAG,"no sender configured");    return;  }  Map<Long,Long> eventsToCalendars=lookupEventToCalendarMap(context,eventIds);  Set<Long> calendars=new LinkedHashSet<Long>();  calendars.addAll(eventsToCalendars.values());  if (calendars.isEmpty()) {    Log.d(TAG,"found no calendars for events");    return;  }  Map<Long,Pair<String,String>> calendarsToAccounts=lookupCalendarToAccountMap(context,calendars);  if (calendarsToAccounts.isEmpty()) {    Log.d(TAG,"found no accounts for calendars");    return;  }  Set<String> accounts=new LinkedHashSet<String>();  for (  Pair<String,String> accountPair : calendarsToAccounts.values()) {    if (GOOGLE_ACCOUNT_TYPE.equals(accountPair.first)) {      accounts.add(accountPair.second);    }  }  SharedPreferences prefs=context.getSharedPreferences(GLOBAL_DISMISS_MANAGER_PREFS,Context.MODE_PRIVATE);  Set<String> existingAccounts=prefs.getStringSet(ACCOUNT_KEY,new HashSet<String>());  accounts.removeAll(existingAccounts);  if (accounts.isEmpty()) {    return;  }  CloudNotificationBackplane cnb=ExtensionsFactory.getCloudNotificationBackplane();  if (cnb.open(context)) {    for (    String account : accounts) {      try {        if (cnb.subscribeToGroup(senderId,account,account)) {          existingAccounts.add(account);        }      } catch (      IOException e) {      }    }    cnb.close();    prefs.edit().putStringSet(ACCOUNT_KEY,existingAccounts).commit();  }}  }
class C{  public ClassDefinition findScope(Environment env,ClassDefinition reqc){  ClassDefinition thisc=field.getClassDefinition();  while (thisc != null && !match(env,thisc,reqc)) {    thisc=thisc.getOuterClass();  }  return thisc;}  }
class C{  public void onFirmwareTestTimeOut(OneSheeldDevice device){}  }
class C{  @SuppressWarnings("deprecation") static HttpUriRequest createHttpRequest(Request<?> request,Map<String,String> additionalHeaders) throws AuthFailureError {switch (request.getMethod()) {case Method.DEPRECATED_GET_OR_POST:{      byte[] postBody=request.getPostBody();      if (postBody != null) {        HttpPost postRequest=new HttpPost(request.getUrl());        postRequest.addHeader(HEADER_CONTENT_TYPE,request.getPostBodyContentType());        HttpEntity entity;        entity=new ByteArrayEntity(postBody);        postRequest.setEntity(entity);        return postRequest;      } else {        return new HttpGet(request.getUrl());      }    }case Method.GET:  return new HttpGet(request.getUrl());case Method.DELETE:return new HttpDelete(request.getUrl());case Method.POST:{HttpPost postRequest=new HttpPost(request.getUrl());postRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(postRequest,request);return postRequest;}case Method.PUT:{HttpPut putRequest=new HttpPut(request.getUrl());putRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(putRequest,request);return putRequest;}default :throw new IllegalStateException("Unknown request method.");}}  }
class C{  private void decode(byte[] data,int width,int height){  long start=System.currentTimeMillis();  Result rawResult=null;  byte[] rotatedData=new byte[data.length];  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++)     rotatedData[x * height + height - y - 1]=data[x + y * width];  }  int tmp=width;  width=height;  height=tmp;  PlanarYUVLuminanceSource source=activity.getCameraManager().buildLuminanceSource(rotatedData,width,height);  if (source != null) {    BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));    try {      rawResult=multiFormatReader.decodeWithState(bitmap);    } catch (    ReaderException re) {    } finally {      multiFormatReader.reset();    }  }  Handler handler=activity.getHandler();  if (rawResult != null) {    long end=System.currentTimeMillis();    Log.d(TAG,"Found barcode in " + (end - start) + " ms");    if (handler != null) {      Message message=Message.obtain(handler,R.id.decode_succeeded,rawResult);      Bundle bundle=new Bundle();      bundleThumbnail(source,bundle);      message.setData(bundle);      message.sendToTarget();    }  } else {    if (handler != null) {      Message message=Message.obtain(handler,R.id.decode_failed);      message.sendToTarget();    }  }}  }
class C{  public void rebind(){  composite.texture1.setWrap(compositeWrapU,compositeWrapV);  composite.texture2.setWrap(compositeWrapU,compositeWrapV);  for (int i=0; i < buffers.size; i++) {    buffers.get(i).rebind();  }  for (  PostProcessorEffect e : effectsManager) {    e.rebind();  }}  }
class C{  private boolean hasPermission(String permission){  if (canMakeSmores()) {    return (checkSelfPermission(permission) == PackageManager.PERMISSION_GRANTED);  }  return true;}  }
class C{  public ImmutableStack(T head){  this(head,null);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MTransaction[");  sb.append(get_ID()).append(",").append(getMovementType()).append(",MovementDate=").append(getMovementDate()).append(",Qty=").append(getMovementQty()).append(",M_Product_ID=").append(getM_Product_ID()).append(",ASI=").append(getM_AttributeSetInstance_ID()).append("]");  return sb.toString();}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:56.238 -0500",hash_original_method="6B0ED73318E2DF96B368CBFEB9D8FD9F",hash_generated_method="4796F139349A7DF8E05A6ADB42FE147C") public final byte[] update(byte[] input,int inputOffset,int inputLen){  if (mode != ENCRYPT_MODE && mode != DECRYPT_MODE) {    throw new IllegalStateException();  }  if (input == null) {    throw new IllegalArgumentException("input == null");  }  if (inputOffset < 0 || inputLen < 0 || inputLen > input.length || inputOffset > input.length - inputLen) {    throw new IllegalArgumentException("Incorrect inputOffset/inputLen parameters");  }  if (input.length == 0) {    return null;  }  return spiImpl.engineUpdate(input,inputOffset,inputLen);}  }
class C{  public boolean isInInterval(C o){  if (null == lower || null == upper) {    return false;  }  boolean in=true;  if (isLowerInclusive()) {    in=lower.compareTo(o) <= 0;  } else {    in=lower.compareTo(o) < 0;  }  if (in) {    if (isUpperInclusive()) {      in=upper.compareTo(o) >= 0;    } else {      in=upper.compareTo(o) > 0;    }  }  return in;}  }
class C{  protected JScrollPane createScroller(){  JScrollPane sp=new JScrollPane(null,ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);  sp.setHorizontalScrollBar(null);  sp.setBorder(BorderFactory.createEmptyBorder());  return sp;}  }
class C{  @Override public RegularTimePeriod previous(){  RegularTimePeriod result=null;  long t=this.time;  if (t != Long.MIN_VALUE) {    result=new FixedMillisecond(t - 1);  }  return result;}  }
class C{  public void addUrl(View view){  if (mIsEditTextVisible) {    UiUtils.hideEditText(mUrlEditText);    mIsEditTextVisible=false;    int animRedId=R.anim.fab_rotate_backward;    mAddFab.startAnimation(AnimationUtils.loadAnimation(this,animRedId));    UiUtils.hideFab(mDownloadFab);  } else {    UiUtils.revealEditText(mUrlEditText);    mIsEditTextVisible=true;    mUrlEditText.requestFocus();    int animRedId=R.anim.fab_rotate_forward;    mAddFab.startAnimation(AnimationUtils.loadAnimation(this,animRedId));  }}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!WebEnv.initWeb(config))   throw new ServletException("WValuePreference.init");}  }
class C{  @Override public void analyse(Project project,SensorContext sensorContext){  List<DelphiProject> projects=delphiProjectHelper.getWorkgroupProjects();  for (  DelphiProject delphiProject : projects) {    CodeAnalysisCacheResults.resetCache();    parseFiles(delphiProject,project);    parsePackages(sensorContext);    processFiles(sensorContext);  }}  }
class C{  public final boolean equals(Object obj){  return ((CharKey)obj).m_char == m_char;}  }
class C{  public final DD selfAdd(double y){  double H, h, S, s, e, f;  S=hi + y;  e=S - hi;  s=S - e;  s=(y - e) + (hi - s);  f=s + lo;  H=S + f;  h=f + (S - H);  hi=H + h;  lo=h + (H - hi);  return this;}  }
class C{  private void prepareTsb(int position){  if (position == TAB_INDEX_DETAILS) {    timelineSettingsHandler.hideTimelineSettings();  } else {    ProductTimelineFragment productTimeline=(ProductTimelineFragment)NamedFragmentPagerAdapter.findFragmentByPosition(pagerAdapter,getChildFragmentManager(),R.id.pager,TAB_INDEX_TIMELINE);    if (productTimeline == null) {      productTimeline=(ProductTimelineFragment)pagerAdapter.getItem(TAB_INDEX_TIMELINE);    }    productTimeline.prepareTimelineSettings(timelineSettingsHandler);  }}  }
class C{  public MicroHessianInput(){}  }
class C{  public static HighlightBuilder highlight(){  return new HighlightBuilder();}  }
class C{  public boolean containsActiveRpVolumes(URI id){  URIQueryResultList result=new URIQueryResultList();  _dbClient.queryByConstraint(ContainmentConstraint.Factory.getStorageDeviceVolumeConstraint(id),result);  Iterator<URI> volumeUriItr=result.iterator();  while (volumeUriItr.hasNext()) {    Volume volume=_dbClient.queryObject(Volume.class,volumeUriItr.next());    if (volume != null && !volume.getInactive() && volume.getRpCopyName() != null && !volume.getRpCopyName().isEmpty()) {      return true;    }  }  return false;}  }
class C{  public static void deleteDirectory(File directory) throws IOException {  if (!directory.exists()) {    return;  }  cleanDirectory(directory);  if (!directory.delete()) {    String message="Unable to delete directory " + directory + ".";    throw new IOException(message);  }}  }
class C{  public static long of(int i){  return (1L << i);}  }
class C{  public boolean isKey(){  return getAD_Column().isKey();}  }
class C{  public static void aggregateBinaryMatrix(MatrixBlock in,MatrixBlock aggVal,MatrixBlock aggCorr) throws DMLRuntimeException {  if (!in.sparse && !aggVal.sparse && !aggCorr.sparse)   aggregateBinaryMatrixAllDense(in,aggVal,aggCorr); else   if (in.sparse && !aggVal.sparse && !aggCorr.sparse)   aggregateBinaryMatrixSparseDense(in,aggVal,aggCorr); else   if (in.sparse)   aggregateBinaryMatrixSparseGeneric(in,aggVal,aggCorr); else   aggregateBinaryMatrixDenseGeneric(in,aggVal,aggCorr);}  }
class C{  public void findAndInit(Object someObj){  if (someObj instanceof MapPanelChild && someObj instanceof Component) {    String parentName=((MapPanelChild)someObj).getParentName();    String myName=getPropertyPrefix();    boolean makeMyChild=(myName != null && parentName != null && myName.equalsIgnoreCase(parentName)) || (myName == null && parentName == null);    if (makeMyChild) {      logger.fine("HotwashPanel: adding " + someObj.getClass().getName() + " to "+ ((MapPanelChild)someObj).getPreferredLocation());      MapPanelChild mpc=(MapPanelChild)someObj;      addMapPanelChild(mpc);      revalidate();    }  }  if (someObj instanceof MapPanel) {    add((Component)someObj,BorderLayout.CENTER);  }}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.backgroundPaint=SerialUtilities.readPaint(stream);  this.foregroundPaint=SerialUtilities.readPaint(stream);  this.stroke=SerialUtilities.readStroke(stream);}  }
class C{  public static Date parse(String s) throws TextParseException {  if (s.length() != 14) {    throw new TextParseException("Invalid time encoding: " + s);  }  Calendar c=new GregorianCalendar(TimeZone.getTimeZone("UTC"));  c.clear();  try {    int year=Integer.parseInt(s.substring(0,4));    int month=Integer.parseInt(s.substring(4,6)) - 1;    int date=Integer.parseInt(s.substring(6,8));    int hour=Integer.parseInt(s.substring(8,10));    int minute=Integer.parseInt(s.substring(10,12));    int second=Integer.parseInt(s.substring(12,14));    c.set(year,month,date,hour,minute,second);  } catch (  NumberFormatException e) {    throw new TextParseException("Invalid time encoding: " + s);  }  return c.getTime();}  }
class C{  public void addStage(String name,String extractor,String applier,String filters){  conf.setString(ReplicatorConf.STAGE_ROOT + "." + name,SingleThreadStageTask.class.getName());  conf.setString(ReplicatorConf.STAGE_ROOT + "." + name+ ".extractor",extractor);  conf.setString(ReplicatorConf.STAGE_ROOT + "." + name+ ".applier",applier);  if (filters != null)   conf.setString(ReplicatorConf.STAGE_ROOT + "." + name+ ".filters",filters);}  }
class C{  public void registerSensorsForNode(SerialNode node){  java.util.Iterator<String> iter=getSystemNameList().iterator();  SerialNode tNode=null;  while (iter.hasNext()) {    String sName=iter.next();    if (sName == null) {      log.error("System name null during register Sensor");    } else {      log.debug("system name is " + sName);      if ((sName.charAt(0) == 'V') && (sName.charAt(1) == 'S')) {        tNode=SerialAddress.getNodeFromSystemName(sName);        if (tNode == node) {          node.registerSensor(getBySystemName(sName),(SerialAddress.getBitFromSystemName(sName) - 1));        }      }    }  }}  }
class C{  protected void fillContextDefaults(Context context){  context.put("generator",instance);  context.put("outputDirectory",getOutputPath());}  }
class C{  protected Object execute(){  init();  if (flag == null || flag.isEmpty()) {    listRemote();    return null;  } else   if ("add".equals(flag)) {    addRemote();    return null;  } else   if ("remove".equals(flag)) {    removeRemote();    return null;  } else   if ("set-default".equals(flag)) {    setDefault();    return null;  }  Ansi buffer=Ansi.ansi();  buffer.a("Invalid command '").a(flag).a(": should start with remote <add|remove> [remote-name]");  System.out.println(buffer.toString());  return null;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  String histoFile=null;  double range=0;  int numIterations=0;  double z=0;  int row, col;  float progress=0;  double[] data1;  double[] data2;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      histoFile=args[i];    } else     if (i == 3) {      range=Double.parseDouble(args[i]);    } else     if (i == 4) {      numIterations=Integer.parseInt(args[i]);    } else     if (i == 5) {      numBands=Integer.parseInt(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    DEM=new WhiteboxRaster(inputHeader,"r");    rows=DEM.getNumberRows();    cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    double[][] output=new double[rows][cols];    for (int iterationNum=0; iterationNum < numIterations; iterationNum++) {      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(0 * 100f / 5);      updateProgress("Loop " + (iterationNum + 1) + " of "+ numIterations+ ": ",(int)progress);      tempGrid1=new double[rows][cols];      tempGrid2=new double[rows][cols];      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          tempGrid2[row][col]=noData;        }      }      TurningBandSimulation(range);      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(1 * 100f / 5);      updateProgress("Loop " + (iterationNum + 1) + " of "+ numIterations+ ": ",(int)progress);      HistogramMatching(histoFile);      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(2 * 100f / 5);      updateProgress("Loop " + (iterationNum + 1) + " of "+ numIterations+ ": ",(int)progress);      for (row=0; row < rows; row++) {        data1=DEM.getRowValues(row);        for (col=0; col < cols; col++) {          if (data1[col] != noData) {            tempGrid1[row][col]=data1[col] + tempGrid2[row][col];          } else {            tempGrid1[row][col]=noData;          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(3 * 100f / 5);      updateProgress("Loop " + (iterationNum + 1) + " of "+ numIterations+ ": ",(int)progress);      FillDepressions();      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(4 * 100f / 5);      updateProgress("Loop " + (iterationNum + 1) + " of "+ numIterations+ ": ",(int)progress);      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          if (tempGrid2[row][col] > tempGrid1[row][col]) {            output[row][col]+=1;          }        }      }      progress=(float)(5 * 100f / 5);      updateProgress("Loop " + (iterationNum + 1) + " of "+ numIterations+ ": ",(int)progress);      if (cancelOp) {        cancelOperation();        return;      }    }    outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    outputFile.setPreferredPalette("spectrum.pal");    for (row=0; row < rows; row++) {      data1=DEM.getRowValues(row);      for (col=0; col < cols; col++) {        if (data1[col] != noData) {          outputFile.setValue(row,col,output[row][col]);        } else {          outputFile.setValue(row,col,noData);        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    DEM.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void focusGained(FocusEvent evt){}  }
class C{  public static void checkEncoding(String encoding) throws IOException {  try {    URLEncoder.encode("",encoding);  } catch (  UnsupportedEncodingException e) {    throw new IOException("invalid encoding [" + encoding + "]");  }}  }
class C{  @RequestMapping(value={"/",""},method=RequestMethod.POST) @ResponseBody public RestWrapper update(@ModelAttribute("bcq") @Valid BatchConsumpQueue batchConsumpQueue,BindingResult bindingResult,Principal principal){  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    batchConsumpQueue.setEndTs(DateConverter.stringToDate(batchConsumpQueue.getTableEndTS()));    batchConsumpQueue.setStartTs(DateConverter.stringToDate(batchConsumpQueue.getTableStartTS()));    batchConsumpQueue.setInsertTs(DateConverter.stringToDate(batchConsumpQueue.getTableInsertTS()));    if (batchConsumpQueue.getBatchMarking().isEmpty()) {      batchConsumpQueue.setBatchMarking(null);    }    com.wipro.ats.bdre.md.dao.jpa.BatchConsumpQueue jpaBcq=new com.wipro.ats.bdre.md.dao.jpa.BatchConsumpQueue();    jpaBcq.setQueueId(batchConsumpQueue.getQueueId());    jpaBcq.setSourceProcessId(batchConsumpQueue.getSourceProcessId());    jpaBcq.setInsertTs(batchConsumpQueue.getInsertTs());    jpaBcq.setStartTs(batchConsumpQueue.getStartTs());    jpaBcq.setEndTs(batchConsumpQueue.getEndTs());    if (batchConsumpQueue.getSourceBatchId() != null) {      Batch sourceBatch=new Batch();      sourceBatch.setBatchId(batchConsumpQueue.getSourceBatchId());      jpaBcq.setBatchBySourceBatchId(sourceBatch);    }    if (batchConsumpQueue.getSourceBatchId() != null) {      Batch targetBatch=new Batch();      targetBatch.setBatchId(batchConsumpQueue.getTargetBatchId());      jpaBcq.setBatchByTargetBatchId(targetBatch);    }    com.wipro.ats.bdre.md.dao.jpa.Process process=new Process();    process.setProcessId(batchConsumpQueue.getProcessId());    jpaBcq.setProcess(process);    BatchStatus batchStatus=new BatchStatus();    batchStatus.setBatchStateId(batchConsumpQueue.getBatchState());    jpaBcq.setBatchStatus(batchStatus);    jpaBcq.setBatchMarking(batchConsumpQueue.getBatchMarking());    batchConsumpQueueDAO.update(jpaBcq);    batchConsumpQueue.setTableStartTS(DateConverter.dateToString(batchConsumpQueue.getStartTs()));    batchConsumpQueue.setTableEndTS(DateConverter.dateToString(batchConsumpQueue.getEndTs()));    batchConsumpQueue.setTableInsertTS(DateConverter.dateToString(batchConsumpQueue.getInsertTs()));    restWrapper=new RestWrapper(batchConsumpQueue,RestWrapper.OK);    LOGGER.info(RECORDWITHID + batchConsumpQueue.getQueueId() + " updated in BatchConsumpQueue by User:"+ principal.getName()+ batchConsumpQueue);  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public DataSource<Void> prefetchToBitmapCache(ImageRequest imageRequest,Object callerContext){  if (!mIsPrefetchEnabledSupplier.get()) {    return DataSources.immediateFailedDataSource(PREFETCH_EXCEPTION);  }  try {    Producer<Void> producerSequence=mSuppressBitmapPrefetchingSupplier.get() ? mProducerSequenceFactory.getEncodedImagePrefetchProducerSequence(imageRequest) : mProducerSequenceFactory.getDecodedImagePrefetchProducerSequence(imageRequest);    return submitPrefetchRequest(producerSequence,imageRequest,ImageRequest.RequestLevel.FULL_FETCH,callerContext,Priority.MEDIUM);  } catch (  Exception exception) {    return DataSources.immediateFailedDataSource(exception);  }}  }
class C{  public Album(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:29.135 -0500",hash_original_method="98F63C51B8CE3B66A34B3D1691EEC660",hash_generated_method="57C0EB29DDC4CE42B3474704D7BE0604") public synchronized void cancel(){  cancelled=true;  tasks.reset();  this.notify();}  }
class C{  private void activateInputMethod(boolean updateCompositionArea){  if (inputMethodWindowContext != null && inputMethodWindowContext != this && inputMethodWindowContext.inputMethodLocator != null && !inputMethodWindowContext.inputMethodLocator.sameInputMethod(inputMethodLocator) && inputMethodWindowContext.inputMethod != null) {    inputMethodWindowContext.inputMethod.hideWindows();  }  inputMethodWindowContext=this;  if (inputMethod != null) {    if (previousInputMethod != inputMethod && previousInputMethod instanceof InputMethodAdapter) {      ((InputMethodAdapter)previousInputMethod).stopListening();    }    previousInputMethod=null;    if (log.isLoggable(PlatformLogger.Level.FINE)) {      log.fine("Current client component " + currentClientComponent);    }    if (inputMethod instanceof InputMethodAdapter) {      ((InputMethodAdapter)inputMethod).setClientComponent(currentClientComponent);    }    inputMethod.activate();    isInputMethodActive=true;    if (perInputMethodState != null) {      Boolean state=perInputMethodState.remove(inputMethod);      if (state != null) {        clientWindowNotificationEnabled=state.booleanValue();      }    }    if (clientWindowNotificationEnabled) {      if (!addedClientWindowListeners()) {        addClientWindowListeners();      }synchronized (this) {        if (clientWindowListened != null) {          notifyClientWindowChange(clientWindowListened);        }      }    } else {      if (addedClientWindowListeners()) {        removeClientWindowListeners();      }    }  }  InputMethodManager.getInstance().setInputContext(this);  ((InputMethodContext)this).grabCompositionArea(updateCompositionArea);}  }
class C{  public static ResultSet execute(Connection conn,Reader reader) throws SQLException {  Statement stat=conn.createStatement();  ResultSet rs=null;  ScriptReader r=new ScriptReader(reader);  while (true) {    String sql=r.readStatement();    if (sql == null) {      break;    }    if (sql.trim().length() == 0) {      continue;    }    boolean resultSet=stat.execute(sql);    if (resultSet) {      if (rs != null) {        rs.close();        rs=null;      }      rs=stat.getResultSet();    }  }  return rs;}  }
class C{  public int update(TestTable1 m){  return UPDATE(m).updateByExample(this.example);}  }
class C{  public MutableInterval(long startInstant,long endInstant,Chronology chronology){  super(startInstant,endInstant,chronology);}  }
class C{  boolean isReusable(){  return true;}  }
class C{  public MethodInfo(ConstPool cp,String methodname,MethodInfo src,Map classnameMap) throws BadBytecode {  this(cp);  read(src,methodname,classnameMap);}  }
class C{  public static IFile resolveFile(IDocument document){  IStructuredModel model=StructuredModelManager.getModelManager().getExistingModelForRead(document);  try {    return resolveFile(model);  }  finally {    model.releaseFromRead();  }}  }
class C{  public Quaterniond rotateTo(Vector3dc fromDir,Vector3dc toDir){  return rotateTo(fromDir.x(),fromDir.y(),fromDir.z(),toDir.x(),toDir.y(),toDir.z(),this);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  return pluggy == null ? "" : pluggy.getReleaseNotes();}  }
class C{  public FieldDoc(int doc,float score,Object[] fields){  super(doc,score);  this.fields=fields;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:27.799 -0500",hash_original_method="2FD14CE5C15BA6F91A4A0B21760850CD",hash_generated_method="D25CF56895B420B545C3566DEEFBA18C") private static String makeEmptyNull(String s){  if (s != null && s.length() == 0)   return null;  return s;}  }
class C{  public boolean isSetStoreName(){  return this.storeName != null;}  }
class C{  private static String[] toTrimmedTokens(String s,char sep){  int toks=0, sSize=s.length();  boolean disregardDoubles=sep == ' ';  int p=0;  for (int i=0; i < sSize; i++) {    char c=s.charAt(i);    if (c == '(') {      p++;    } else     if (c == ')') {      p--;    } else     if (p == 0 && c == sep) {      toks++;      while (disregardDoubles && i < sSize - 1 && s.charAt(i + 1) == ' ')       i++;    }    if (p < 0)     throw new IllegalArgumentException("Unbalanced parentheses: '" + s + "'");  }  if (p != 0)   throw new IllegalArgumentException("Unbalanced parentheses: '" + s + "'");  if (toks == 0)   return new String[]{s.trim()};  String[] retArr=new String[toks + 1];  int st=0, pNr=0;  p=0;  for (int i=0; i < sSize; i++) {    char c=s.charAt(i);    if (c == '(') {      p++;    } else     if (c == ')') {      p--;    } else     if (p == 0 && c == sep) {      retArr[pNr++]=s.substring(st,i).trim();      st=i + 1;      while (disregardDoubles && i < sSize - 1 && s.charAt(i + 1) == ' ')       i++;    }  }  retArr[pNr++]=s.substring(st,sSize).trim();  return retArr;}  }
class C{  @Override protected void onStop(){  super.onStop();  if (mAlertDialog != null && mAlertDialog.isShowing()) {    mAlertDialog.dismiss();  }}  }
class C{  public BaseResource createResource(final Class<? extends BaseResource> clazz){  try {    final BaseResource resource=clazz.newInstance();    injector.injectMembers(resource);    return resource;  } catch (  final Exception e) {    LOGGER.error("Error while creating resource for class: " + clazz + ";",e);    throw Throwables.propagate(e);  }}  }
class C{  private int doRegister(int registrations){  long adjust=((long)registrations << PARTIES_SHIFT) | registrations;  final Phaser parent=this.parent;  int phase;  for (; ; ) {    long s=(parent == null) ? state : reconcileState();    int counts=(int)s;    int parties=counts >>> PARTIES_SHIFT;    int unarrived=counts & UNARRIVED_MASK;    if (registrations > MAX_PARTIES - parties)     throw new IllegalStateException(badRegister(s));    phase=(int)(s >>> PHASE_SHIFT);    if (phase < 0)     break;    if (counts != EMPTY) {      if (parent == null || reconcileState() == s) {        if (unarrived == 0)         root.internalAwaitAdvance(phase,null); else         if (U.compareAndSwapLong(this,STATE,s,s + adjust))         break;      }    } else     if (parent == null) {      long next=((long)phase << PHASE_SHIFT) | adjust;      if (U.compareAndSwapLong(this,STATE,s,next))       break;    } else {synchronized (this) {        if (state == s) {          phase=parent.doRegister(1);          if (phase < 0)           break;          while (!U.compareAndSwapLong(this,STATE,s,((long)phase << PHASE_SHIFT) | adjust)) {            s=state;            phase=(int)(root.state >>> PHASE_SHIFT);          }          break;        }      }    }  }  return phase;}  }
class C{  public boolean isPorDefecto(){  return porDefecto;}  }
class C{  public boolean isPopupMenuVisible(){  ensurePopupMenuCreated();  return popupMenu.isVisible();}  }
class C{  @Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {  resp.setContentType("text/plain");  PrintWriter sendToClient=resp.getWriter();  for (  Video v : this.videos) {    sendToClient.write(v.getName() + " : " + v.getUrl()+ "\n");  }}  }
class C{  public void updateCrosshairX(Comparable rowKey,Comparable columnKey,int datasetIndex,double transX,PlotOrientation orientation){  Point2D anchor=getAnchor();  if (anchor != null) {    double anchorX=anchor.getX();    if (orientation == PlotOrientation.HORIZONTAL) {      anchorX=anchor.getY();    }    double d=Math.abs(transX - anchorX);    if (d < getCrosshairDistance()) {      this.rowKey=rowKey;      this.columnKey=columnKey;      setDatasetIndex(datasetIndex);      setCrosshairDistance(d);    }  }}  }
class C{  private void broadcastTimerTick(){  for (  Player p : players) {    StringBuilder sb=new StringBuilder();    List<DrawMessage> drawMessages=p.getBufferedDrawMessages();    if (drawMessages.size() > 0) {      for (int i=0; i < drawMessages.size(); i++) {        DrawMessage msg=drawMessages.get(i);        String s=String.valueOf(p.getLastReceivedMessageId()) + "," + msg.toString();        if (i > 0)         sb.append("|");        sb.append(s);      }      drawMessages.clear();      p.sendRoomMessage(MessageType.DRAW_MESSAGE,sb.toString());    }  }}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public JPanelConfigERP(){  initComponents();  jTextField1.getDocument().addDocumentListener(dirty);  jTextField2.getDocument().addDocumentListener(dirty);  jtxtId.getDocument().addDocumentListener(dirty);  jtxtName.getDocument().addDocumentListener(dirty);  jtxtPassword.getDocument().addDocumentListener(dirty);  jtxtUrl.getDocument().addDocumentListener(dirty);}  }
class C{  public void downloadSpreadsheet(String resourceId,String filepath,String format) throws IOException, MalformedURLException, ServiceException, DocumentListException {  if (resourceId == null || filepath == null || format == null) {    throw new DocumentListException("null passed in for required parameters");  }  UserToken docsToken=(UserToken)service.getAuthTokenFactory().getAuthToken();  UserToken spreadsheetsToken=(UserToken)spreadsheetsService.getAuthTokenFactory().getAuthToken();  service.setUserToken(spreadsheetsToken.getValue());  HashMap<String,String> parameters=new HashMap<String,String>();  parameters.put("key",resourceId.substring(resourceId.lastIndexOf(':') + 1));  parameters.put("exportFormat",format);  if (format.equals(DOWNLOAD_SPREADSHEET_FORMATS.get("csv")) || format.equals(DOWNLOAD_SPREADSHEET_FORMATS.get("tsv"))) {    parameters.put("gid","0");  }  URL url=buildUrl(SPREADSHEETS_HOST,URL_DOWNLOAD + "/spreadsheets" + URL_CATEGORY_EXPORT,parameters);  downloadFile(url,filepath);  service.setUserToken(docsToken.getValue());}  }
class C{  public Set<V> determineConnectedVertices(V v){  Set<V> visited=new LinkedHashSet<V>();  Queue<V> queue=new LinkedList<V>();  queue.add(v);  while (!queue.isEmpty()) {    V current=queue.poll();    if (visited.contains(current))     continue;    visited.add(current);    queue.addAll(getParents(current));    queue.addAll(getChildren(current));  }  return visited;}  }
class C{  @Override public void zoomRangeAxes(double factor,PlotRenderingInfo info,Point2D source){  zoomRangeAxes(factor,info,source,false);}  }
class C{  public boolean isDocOrdered(){  return m_exprObj.isDocOrdered();}  }
class C{  public static MethExecutorResult execute(String receiver,String selector,Object[] args){  try {    Class receiverClass=Class.forName(receiver);    Object res=null;    try {      Class[] paramTypes;      if (args == null) {        paramTypes=new Class[0];      } else {        paramTypes=new Class[args.length];        for (int i=0; i < args.length; i++) {          if (args[i] == null) {            paramTypes[i]=null;          } else {            paramTypes[i]=args[i].getClass();          }        }      }      Method theMethod=getMethod(receiverClass,selector,paramTypes);      theMethod.setAccessible(true);      res=theMethod.invoke(receiverClass,args);      return new MethExecutorResult(res);    } catch (    InvocationTargetException invTargEx) {      Throwable targEx=invTargEx.getTargetException();      if (targEx == null) {        return new MethExecutorResult(res);      } else {        return new MethExecutorResult(targEx);      }    }  } catch (  VirtualMachineError e) {    SystemFailure.initiateFailure(e);    throw e;  }catch (  Throwable t) {    return new MethExecutorResult(t);  }}  }
class C{  public static Parser parser(JsonFactory jsonFactory){  return new Parser(jsonFactory);}  }
class C{  public static long readSignedVarintLong(ByteBuffer buffer) throws IOException {  final long raw=readUnsignedVarintLong(buffer);  return (raw >>> 1) ^ -(raw & 1);}  }
class C{  public static boolean isPostJDK5(String bytecodeVersion){  return JDK5.equals(bytecodeVersion) || JDK6.equals(bytecodeVersion) || JDK7.equals(bytecodeVersion)|| JDK8.equals(bytecodeVersion);}  }
class C{  public InjectionProviderException(Throwable cause){  super(cause);}  }
class C{  public DerParser(InputStream in) throws IOException {  this.in=in;}  }
class C{  public static <T>SortedSet<T> plus(SortedSet<T> left,Collection<T> right){  return (SortedSet<T>)plus((Collection<T>)left,right);}  }
class C{  public boolean removeOldest(){  if (isEmpty()) {    return false;  }  tail=(tail + 1) % ringBuffer.length;  counter--;  return true;}  }
class C{  public String toString(){  return getCssText();}  }
class C{  public static WebElement findElementContainAfter(SearchContext parent,By by,String text,int timeoutInSeconds){  Preconditions.checkNotNull(parent);  Preconditions.checkNotNull(by);  Preconditions.checkArgument(!Strings.isNullOrEmpty(text));  try {    WebElementWait wait=new WebElementWait(parent,timeoutInSeconds);    return wait.until(null);  } catch (  TimeoutException e) {    throw new TimeoutException(String.format("Element %s did not contain text %s after %s seconds",by,text,timeoutInSeconds),e);  }}  }
class C{  void init(List<ColumnMetaData> columnMetaData){  this.columnMetaData=columnMetaData;  columnRoles.clear();  columnNames.clear();  int columnIndex=0;  for (  ColumnMetaData column : columnMetaData) {    addColumnToColumnsMaps(columnIndex,column);    if (!column.isRemoved()) {      selectedColumns.add(columnIndex);    }    columnIndex++;  }  checkForDuplicates();}  }
class C{  public DrawerBuilder withInnerShadow(boolean innerShadow){  this.mInnerShadow=innerShadow;  return this;}  }
class C{  private static int uarimaxEq(double value,double[] bv,int bvi[],BinaryOperator bOp) throws DMLRuntimeException {  int ix=Arrays.binarySearch(bv,value);  int ixMax=bv.length;  if (ix >= 0)   ixMax=bvi[ix] + 1;  return ixMax;}  }
class C{  public int parseToNode(Source source,SourceLocator locator,XPathContext xctxt) throws TransformerException {  try {    Object xowner=xctxt.getOwnerObject();    DTM dtm;    if (null != xowner && xowner instanceof org.apache.xml.dtm.DTMWSFilter) {      dtm=xctxt.getDTM(source,false,(org.apache.xml.dtm.DTMWSFilter)xowner,false,true);    } else {      dtm=xctxt.getDTM(source,false,null,false,true);    }    return dtm.getDocument();  } catch (  Exception e) {    throw new TransformerException(e.getMessage(),locator,e);  }}  }
class C{  public static ByteArray toByteArray(String s){  try {    return new ByteArray(s.getBytes("UTF-8"));  } catch (  UnsupportedEncodingException e) {    throw new IllegalStateException(e);  }}  }
class C{  public void updateShort(int columnIndex,short x) throws SQLException {  checkUpdatable();  getField(columnIndex).setShort(x);}  }
class C{  public boolean isRecordingScheduled(){  return recordingState == RecordingState.SCHEDULED;}  }
class C{  public static synchronized NumberIterator load(double from,double to){  return _load((int)from,(int)to,(int)to);}  }
class C{  ClassDoc classDoc(){  return implClass;}  }
class C{  public void unindex(Tuple t,String attrName){  throw new UnsupportedOperationException();}  }
class C{  public RequestHandle patch(Context context,String url,HttpEntity entity,String contentType,ResponseHandlerInterface responseHandler){  return sendRequest(httpClient,httpContext,addEntityToRequestBase(new HttpPatch(getURI(url)),entity),contentType,responseHandler,context);}  }
class C{  BluetoothInputDevice(Context context,ServiceListener l){  mContext=context;  mServiceListener=l;  mAdapter=BluetoothAdapter.getDefaultAdapter();  IBluetoothManager mgr=mAdapter.getBluetoothManager();  if (mgr != null) {    try {      mgr.registerStateChangeCallback(mBluetoothStateChangeCallback);    } catch (    RemoteException e) {      Log.e(TAG,"",e);    }  }  if (!context.bindService(new Intent(IBluetoothInputDevice.class.getName()),mConnection,0)) {    Log.e(TAG,"Could not bind to Bluetooth HID Service");  }}  }
class C{  private static String convertToQuotedString(String string){  if (string == null || string.length() == 0) {    return null;  }  if (string.charAt(0) == '"' && string.charAt(string.length() - 1) == '"') {    return string;  }  return '\"' + string + '\"';}  }
class C{  protected DefFmtEtiqueta createEtiqueta(String valorPredeterminado){  DefFmtEtiqueta etiqueta=new DefFmtEtiqueta();  etiqueta.getTitulo().setPredeterminado(valorPredeterminado);  return etiqueta;}  }
class C{  public void close(){  if (statement != null) {    try {      statement.close();    } catch (    SQLException e) {      if (logger.isDebugEnabled())       logger.debug("Unable to close statement",e);    }  }}  }
class C{  public static boolean hasBinding(Injector injector,Matcher<Class> matcher){  return !getBindingsOf(injector,matcher).isEmpty();}  }
class C{  public String convertExchangeTypeToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  public void removeObserver(NotificationObserver observer){  observers.remove(observer);}  }
class C{  protected boolean beforeDelete(){  if (isProcessed())   return false;  for (  MOrderLine line : getLines()) {    line.deleteEx(true);  }  return true;}  }
class C{  public static BufferedImage convertToRGB(BufferedImage image){  if ((image.getType() != BufferedImage.TYPE_INT_RGB)) {    try {      final BufferedImage raw_image=image;      image=new BufferedImage(image.getWidth(),image.getHeight(),BufferedImage.TYPE_INT_RGB);      new ColorConvertOp(ColorSpaces.hints).filter(raw_image,image);    } catch (    final Exception e) {      LogWriter.writeLog("Exception " + e + " converting to RGB");    }catch (    final Error ee) {      LogWriter.writeLog("Error " + ee + " converting to RGB");      image=null;    }  }  return image;}  }
class C{  public static String createName(String namePrefix,String typePath){  if (namePrefix == null)   namePrefix="TypePath";  String typePathString=typePath == null ? "" : typePath;  Matcher matcher=pattern.matcher(typePathString);  StringBuffer sb=new StringBuffer();  while (matcher.find()) {    if (matcher.group(1) != null)     matcher.appendReplacement(sb,matcher.group(1).toUpperCase()); else     matcher.appendReplacement(sb,"");  }  matcher.appendTail(sb);  if (sb.length() > 0)   sb.replace(0,1,sb.substring(0,1).toUpperCase());  if (sb.length() > 0) {    return String.format("%s(%s)",namePrefix,sb.toString());  } else {    return null;  }}  }
class C{  public _ChangeType(final _ChangeType_Flag[] flags){  super(flags);}  }
class C{  public char next(){  return pos < in.length() ? in.charAt(pos++) : '\0';}  }
class C{  public void endEntity(String name) throws org.xml.sax.SAXException {}  }
class C{  protected int readNmtoken() throws IOException, XMLException {  if (current == -1) {    throw createXMLException("unexpected.eof");  }  while (XMLUtilities.isXMLNameCharacter((char)current)) {    nextChar();  }  return LexicalUnits.NMTOKEN;}  }
class C{  @Override public int describeContents(){  return 0;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:40.638 -0500",hash_original_method="4A009EFCCF51C2EA640445D87C84D900",hash_generated_method="CEE34EAF88E6FC7D89B93DC2D9F3A4BD") public Item(CharSequence text){  mText=text;  mIntent=null;  mUri=null;}  }
class C{  private void populateData(Region region,Object[] data){  logger.info("PRQueryCacheClosedJUnitTest#populateData: Populating Data in the PR Region ");  for (int j=0; j < data.length; j++) {    region.put(new Integer(j),data[j]);  }}  }
class C{  private boolean isNormalJdkOrder(String className){  return true;}  }
class C{  public static String formatParams(ArrayList<? extends ParameterInterface> parameters){  if (parameters.size() == 0) {    return "";  }  StatementBuilder buff=new StatementBuilder();  int i=0;  boolean params=false;  for (  ParameterInterface p : parameters) {    if (p.isValueSet()) {      if (!params) {        buff.append(" {");        params=true;      }      buff.appendExceptFirst(", ");      Value v=p.getParamValue();      buff.append(++i).append(": ").append(v.getTraceSQL());    }  }  if (params) {    buff.append('}');  }  return buff.toString();}  }
class C{  protected void messageTransmited(byte[] msg){  log.debug("message transmitted");  if (!echo) {    return;  }  javax.swing.SwingUtilities.invokeLater(new Echo(this,new LocoNetMessage(msg)));}  }
class C{  public double transform(double value){  return log10(value);}  }
class C{  public String globalInfo(){  return "Outputs the predictions in XML.\n\n" + "The following DTD is used:\n\n" + DTD;}  }
class C{  public void animateBgAlpha(float finalAlpha,int duration){  int finalAlphaI=(int)(finalAlpha * 255f);  if (getAlpha() != finalAlphaI) {    mBackgroundAnim=cancelAnimator(mBackgroundAnim);    mBackgroundAnim=ObjectAnimator.ofInt(this,"alpha",finalAlphaI);    mBackgroundAnim.setDuration(duration);    mBackgroundAnim.start();  }}  }
class C{  public SignificantTermsBuilder include(long[] terms){  if (includePattern != null) {    throw new IllegalArgumentException("include clause must be an array of exact values or a regex, not both");  }  this.includeTerms=longsArrToStringArr(terms);  return this;}  }
class C{  public boolean isRenderPoints(SimpleSeriesRenderer renderer){  return ((XYSeriesRenderer)renderer).getPointStyle() != PointStyle.POINT;}  }
class C{  @Override public void writeAt(long logIndex,LogEntry logEntry){  this.throwWhenNotInRange(logIndex);  try {    this.storeWriteLock.lock();    long index=logIndex - this.startIndex + 1;    ByteBuffer buffer=ByteBuffer.allocate(Long.BYTES + 1 + logEntry.getValue().length);    buffer.putLong(logEntry.getTerm());    buffer.put(logEntry.getValueType().toByte());    buffer.put(logEntry.getValue());    long dataPosition=this.dataFile.length();    long indexPosition=(index - 1) * Long.BYTES;    if (indexPosition < this.indexFile.length()) {      this.indexFile.seek(indexPosition);      dataPosition=this.indexFile.readLong();    }    this.indexFile.seek(indexPosition);    this.dataFile.seek(dataPosition);    this.indexFile.writeLong(dataPosition);    this.dataFile.write(buffer.array());    if (this.indexFile.length() > this.indexFile.getFilePointer()) {      this.indexFile.setLength(this.indexFile.getFilePointer());    }    if (this.dataFile.length() > this.dataFile.getFilePointer()) {      this.dataFile.setLength(this.dataFile.getFilePointer());    }    if (index <= this.entriesInStore) {      this.buffer.trim(logIndex);    }    this.buffer.append(logEntry);    this.entriesInStore=index;  } catch (  IOException exception) {    this.logger.error("failed to write a log entry at a specific index to store",exception);    throw new RuntimeException(exception.getMessage(),exception);  } finally {    this.storeWriteLock.unlock();  }}  }
class C{  public Object eval(Reader in) throws EvalError {  return eval(in,globalNameSpace,"eval stream");}  }
class C{  private void addJarResource(File file) throws IOException {  JarFile jarFile=new JarFile(file);  addURL(file.toURI().toURL());  analyzeFile(file);  Enumeration<JarEntry> jarEntries=jarFile.entries();  while (jarEntries.hasMoreElements()) {    JarEntry jarEntry=jarEntries.nextElement();    if (!jarEntry.isDirectory() && isJar(jarEntry.getName())) {      addJarResource(jarEntryAsFile(jarFile,jarEntry));    }  }}  }
class C{  public Dimension preferredSize(int v){  return minimumSize(v);}  }
class C{  public Language language(){  return language;}  }
class C{  public static Set<XMethod> resolveMethodCallTargets(ReferenceType receiverType,InvokeInstruction invokeInstruction,ConstantPoolGen cpg,boolean receiverTypeIsExact) throws ClassNotFoundException {  if (invokeInstruction.getOpcode() == Constants.INVOKESTATIC) {    throw new IllegalArgumentException();  }  String methodName=invokeInstruction.getName(cpg);  String methodSig=invokeInstruction.getSignature(cpg);  if (receiverType instanceof ArrayType) {    try {      return Util.emptyOrNonnullSingleton(getXClass(objectDescriptor).findMethod(methodName,methodSig,false));    } catch (    CheckedAnalysisException e) {      return Collections.<XMethod>emptySet();    }  }  if (receiverType instanceof ObjectType) {    String receiverClassName=((ObjectType)receiverType).getClassName();    return resolveVirtualMethodCallTargets(receiverClassName,methodName,methodSig,receiverTypeIsExact,invokeInstruction instanceof INVOKESPECIAL);  }  assert receiverType instanceof NullType;  return Collections.<XMethod>emptySet();}  }
class C{  private Object writeReplace(){  return new Ser(Ser.JAPANESE_ERA_TYPE,this);}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.N4_ENUM_LITERAL__NAME:    return getName();case N4JSPackage.N4_ENUM_LITERAL__VALUE:  return getValue();case N4JSPackage.N4_ENUM_LITERAL__DEFINED_LITERAL:if (resolve) return getDefinedLiteral();return basicGetDefinedLiteral();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public DioriteTask start(){  return this.start(0);}  }
class C{  public Builder readRoles(List<String> readRoles){  this.readRoles=readRoles;  return this;}  }
class C{  public DuplicateEventException(String message){  super(message);}  }
class C{  public static int extractNoDictionaryCount(String noDictionaryDim){  return extractNoDictionaryDimsArr(noDictionaryDim).length;}  }
class C{  public static boolean isValidWithNetMask(String address){  return isValidIPv4WithNetmask(address) || isValidIPv6WithNetmask(address);}  }
class C{  public ReplicaSetDiscovery(ReplicationContext context){  this.context=context;  this.seedAddresses=context.hosts();}  }
class C{  public boolean disjointFrom(Span o){  if (start < o.start) {    return end <= o.start;  }  if (end > o.end) {    return start >= o.end;  }  return false;}  }
class C{  public String TFTransformTipText(){  return "Sets whether if the word frequencies should be transformed into:\n " + "   log(1+fij) \n" + "       where fij is the frequency of word i in document (instance) j.";}  }
class C{  public boolean isEmpty(){  return size == 0;}  }
class C{  public static WhiteList loadWhiteListFromJson(JSONObject value,FilePosition src,ImportResolver resolver,MessageQueue mq) throws IOException, ParseException {  return new JSONWhiteListLoader(src,resolver,mq).loadFrom(value);}  }
class C{  private void handleUnsubscribeFromProduct(TriggerProcess process,LocalizerFacade facade) throws IOException, WSDLException, ParserConfigurationException {  INotificationServiceAdapter serviceClient=getServiceClient(process.getTriggerDefinition());  VOTriggerProcess vo=TriggerProcessAssembler.toVOTriggerProcess(process,facade);  String subId=getParamValue(process.getParamValueForName(TriggerProcessParameterName.SUBSCRIPTION),String.class);  serviceClient.onUnsubscribeFromProduct(VOConverter.convertToApi(vo),subId);  updateProcessState(process);}  }
class C{  @Override public void onTokenRefresh(){  Intent intent=new Intent(this,RegistrationIntentService.class);  startService(intent);}  }
class C{  public static void writeCertificatePem(byte[] certBytes,OutputStream out) throws IOException {  try (PEMWriter writer=new PEMWriter(new OutputStreamWriter(out))){    writer.writeObject(readCertificate(certBytes));  } }  }
class C{  public BgzfInputStream(InputStream input){  mInputStream=input;  mCurrentBlock=new BgzfBlock();  mCurrentBlock.mData=new byte[MAX_BGZF_BLOCK];  mInflater=new Inflater(true);  mIOBuf=new byte[4096];  mUncompressBuf=new byte[MAX_BGZF_BLOCK * 2];  mBlockEndPos=0;  mBlockStartPos=0;  mCrc=new CRC32();}  }
class C{  public static byte[] decode(byte[] source,int off,int len,byte[] decodabet) throws Base64DecoderException {  int len34=len * 3 / 4;  byte[] outBuff=new byte[2 + len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=0; i < len; i++) {    sbiCrop=(byte)(source[i + off] & 0x7f);    sbiDecode=decodabet[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        if (sbiCrop == EQUALS_SIGN) {          int bytesLeft=len - i;          byte lastByte=(byte)(source[len - 1 + off] & 0x7f);          if (b4Posn == 0 || b4Posn == 1) {            throw new Base64DecoderException("invalid padding byte '=' at byte offset " + i);          } else           if ((b4Posn == 3 && bytesLeft > 2) || (b4Posn == 4 && bytesLeft > 1)) {            throw new Base64DecoderException("padding byte '=' falsely signals end of encoded value " + "at offset " + i);          } else           if (lastByte != EQUALS_SIGN && lastByte != NEW_LINE) {            throw new Base64DecoderException("encoded value has invalid trailing byte");          }          break;        }        b4[b4Posn++]=sbiCrop;        if (b4Posn == 4) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);          b4Posn=0;        }      }    } else {      throw new Base64DecoderException("Bad Base64 input character at " + i + ": "+ source[i + off]+ "(decimal)");    }  }  if (b4Posn != 0) {    if (b4Posn == 1) {      throw new Base64DecoderException("single trailing character at offset " + (len - 1));    }    b4[b4Posn++]=EQUALS_SIGN;    outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  @Override @Action(value="/reports/receiptRegisterReport-criteria") public String criteria(){  addRelatedEntity("department",Department.class,"name");  addRelatedEntity("status",EgwStatus.class,"description");  addDropdownData("servicetypeList",getPersistenceService().findAllByNamedQuery(CollectionConstants.QUERY_COLLECTION_SERVICS));  setupDropdownDataExcluding();  setReportParam(EGOV_FROM_DATE,new Date());  setReportParam(EGOV_TO_DATE,new Date());  serviceTypeMap.putAll(CollectionConstants.SERVICE_TYPE_CLASSIFICATION);  serviceTypeMap.remove(CollectionConstants.SERVICE_TYPE_PAYMENT);  return INDEX;}  }
class C{  public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {  return encodeObject(serializableObject,NO_OPTIONS);}  }
class C{  public PayloadScoreQuery(SpanQuery wrappedQuery,PayloadFunction function,boolean includeSpanScore){  this.wrappedQuery=Objects.requireNonNull(wrappedQuery);  this.function=Objects.requireNonNull(function);  this.includeSpanScore=includeSpanScore;}  }
class C{  public UndoEdit performEdits() throws MalformedTreeException, BadLocationException {  if (!fChecked) {    fRoot.dispatchCheckIntegrity(this);  } else {    if (fException != null)     throw fException;  }  return fRoot.dispatchPerformEdits(this);}  }
class C{  @Nonnull public BugInstance addCalledMethod(String className,String methodName,String methodSig,boolean isStatic){  return addMethod(MethodAnnotation.fromCalledMethod(className,methodName,methodSig,isStatic)).describe(MethodAnnotation.METHOD_CALLED);}  }
class C{  public static void notifyServerJoined(final ServerLocation location){  DistributedMember id=new InternalDistributedMember(location);  notifyListeners(id,false,EventType.JOINED);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof CombinedDomainXYPlot)) {    return false;  }  CombinedDomainXYPlot that=(CombinedDomainXYPlot)obj;  if (this.gap != that.gap) {    return false;  }  if (!ObjectUtilities.equal(this.subplots,that.subplots)) {    return false;  }  return super.equals(obj);}  }
class C{  public static TimestampValidityState load(DataInput is) throws IOException {  return new TimestampValidityState(is.readLong());}  }
class C{  public Enumeration<Register> enumerateFPRParameters(int n){  if (VM.VerifyAssertions) {    VM._assert(n <= NUMBER_DOUBLE_PARAM);  }  return new PhysicalRegisterEnumeration(FIRST_DOUBLE_PARAM,FIRST_DOUBLE_PARAM + n - 1);}  }
class C{  public BaseDateTime(Chronology chronology){  this(DateTimeUtils.currentTimeMillis(),chronology);}  }
class C{  protected void init(Table table,Graph graph,int row){  m_table=table;  m_graph=graph;  m_row=m_table.isValidRow(row) ? row : -1;}  }
class C{  public boolean isCreateNonDurableQueue(){  return createNonDurableQueue;}  }
class C{  public void stop(){  mRunning=false;  mStop=true;}  }
class C{  @Override public void acceptClusterer(BatchClustererEvent ce){  if (ce.getTestSet() == null || ce.getTestOrTrain() == BatchClustererEvent.TEST || ce.getTestSet().isStructureOnly()) {    return;  }  Instances trainHeader=new Instances(ce.getTestSet().getDataSet(),0);  String titleString=ce.getClusterer().getClass().getName();  titleString=titleString.substring(titleString.lastIndexOf('.') + 1,titleString.length());  String prefix="";  String relationName=(m_includeRelationName) ? trainHeader.relationName() : "";  try {    prefix=m_env.substitute(m_filenamePrefix);  } catch (  Exception ex) {    stop();    String message="[SerializedModelSaver] " + statusMessagePrefix() + " Can't save model. Reason: "+ ex.getMessage();    if (m_logger != null) {      m_logger.logMessage(message);      m_logger.statusMessage(statusMessagePrefix() + "ERROR (See log for details)");    } else {      System.err.println(message);    }    return;  }  String fileName="" + prefix + relationName+ titleString+ "_"+ ce.getSetNumber()+ "_"+ ce.getMaxSetNumber();  fileName=sanitizeFilename(fileName);  String dirName=m_directory.getPath();  try {    dirName=m_env.substitute(dirName);  } catch (  Exception ex) {    String message="[SerializedModelSaver] " + statusMessagePrefix() + " Can't save model. Reason: "+ ex.getMessage();    if (m_logger != null) {      m_logger.logMessage(message);      m_logger.statusMessage(statusMessagePrefix() + "ERROR (See log for details)");    } else {      System.err.println(message);    }    return;  }  File tempFile=new File(dirName);  fileName=tempFile.getAbsolutePath() + File.separator + fileName;  saveModel(fileName,trainHeader,ce.getClusterer());}  }
class C{  private void initResponseSource() throws IOException {  responseSource=ResponseSource.NETWORK;  if (!policy.getUseCaches())   return;  OkResponseCache responseCache=client.getOkResponseCache();  if (responseCache == null)   return;  CacheResponse candidate=responseCache.get(uri,method,requestHeaders.getHeaders().toMultimap(false));  if (candidate == null)   return;  Map<String,List<String>> responseHeadersMap=candidate.getHeaders();  cachedResponseBody=candidate.getBody();  if (!acceptCacheResponseType(candidate) || responseHeadersMap == null || cachedResponseBody == null) {    Util.closeQuietly(cachedResponseBody);    return;  }  RawHeaders rawResponseHeaders=RawHeaders.fromMultimap(responseHeadersMap,true);  cachedResponseHeaders=new ResponseHeaders(uri,rawResponseHeaders);  long now=System.currentTimeMillis();  this.responseSource=cachedResponseHeaders.chooseResponseSource(now,requestHeaders);  if (responseSource == ResponseSource.CACHE) {    this.cacheResponse=candidate;    setResponse(cachedResponseHeaders,cachedResponseBody);  } else   if (responseSource == ResponseSource.CONDITIONAL_CACHE) {    this.cacheResponse=candidate;  } else   if (responseSource == ResponseSource.NETWORK) {    Util.closeQuietly(cachedResponseBody);  } else {    throw new AssertionError();  }}  }
class C{  public SVGRasterizer(SVGDocument document){  this.input=new TranscoderInput(document);}  }
class C{  @Field(26) public Pointer<Pointer<Byte>> pbstrVal(){  return this.io.getPointerField(this,26);}  }
class C{  public static InsnList loadOperandStack(MarkerType markerType,StorageVariables storageVars,Frame<BasicValue> frame,int storageStackStartIdx,int storageStackLoadIdx,int count){  Validate.notNull(markerType);  Validate.notNull(storageVars);  Validate.notNull(frame);  Validate.isTrue(storageStackStartIdx >= 0);  Validate.isTrue(storageStackLoadIdx >= 0);  Validate.isTrue(count >= 0);  Validate.isTrue(storageStackLoadIdx >= storageStackStartIdx);  Validate.isTrue(storageStackStartIdx + count <= frame.getStackSize());  Validate.isTrue(storageStackStartIdx + count >= 0);  Variable intsVar=storageVars.getIntStorageVar();  Variable floatsVar=storageVars.getFloatStorageVar();  Variable longsVar=storageVars.getLongStorageVar();  Variable doublesVar=storageVars.getDoubleStorageVar();  Variable objectsVar=storageVars.getObjectStorageVar();  int intsCounter=0;  int floatsCounter=0;  int longsCounter=0;  int doublesCounter=0;  int objectsCounter=0;  InsnList ret=new InsnList();  for (int i=storageStackStartIdx; i < storageStackLoadIdx; i++) {    BasicValue basicValue=frame.getStack(i);    Type type=basicValue.getType();    if (type.getSort() == Type.OBJECT && "Lnull;".equals(type.getDescriptor())) {      continue;    }switch (type.getSort()) {case Type.BOOLEAN:case Type.BYTE:case Type.SHORT:case Type.CHAR:case Type.INT:      intsCounter++;    break;case Type.FLOAT:  floatsCounter++;break;case Type.LONG:longsCounter++;break;case Type.DOUBLE:doublesCounter++;break;case Type.ARRAY:case Type.OBJECT:objectsCounter++;break;case Type.METHOD:case Type.VOID:default :throw new IllegalArgumentException();}}ret.add(debugMarker(markerType,"Loading stack items"));for (int i=storageStackLoadIdx; i < storageStackLoadIdx + count; i++) {BasicValue basicValue=frame.getStack(i);Type type=basicValue.getType();if (type.getSort() == Type.OBJECT && "Lnull;".equals(type.getDescriptor())) {ret.add(debugMarker(markerType,"Loading null value at " + i));ret.add(new InsnNode(Opcodes.ACONST_NULL));continue;}ret.add(debugMarker(markerType,"Loading from container at" + i));switch (type.getSort()) {case Type.BOOLEAN:case Type.BYTE:case Type.SHORT:case Type.CHAR:case Type.INT:ret.add(debugMarker(markerType,"Loading int at " + i + " from storage index "+ intsCounter));ret.add(new VarInsnNode(Opcodes.ALOAD,intsVar.getIndex()));ret.add(new LdcInsnNode(intsCounter));ret.add(new InsnNode(Opcodes.IALOAD));intsCounter++;break;case Type.FLOAT:ret.add(debugMarker(markerType,"Loading float at " + i + " from storage index "+ floatsCounter));ret.add(new VarInsnNode(Opcodes.ALOAD,floatsVar.getIndex()));ret.add(new LdcInsnNode(floatsCounter));ret.add(new InsnNode(Opcodes.FALOAD));floatsCounter++;break;case Type.LONG:ret.add(debugMarker(markerType,"Loading long at " + i + " from storage index "+ longsCounter));ret.add(new VarInsnNode(Opcodes.ALOAD,longsVar.getIndex()));ret.add(new LdcInsnNode(longsCounter));ret.add(new InsnNode(Opcodes.LALOAD));longsCounter++;break;case Type.DOUBLE:ret.add(debugMarker(markerType,"Loading double at " + i + " from storage index "+ doublesCounter));ret.add(new VarInsnNode(Opcodes.ALOAD,doublesVar.getIndex()));ret.add(new LdcInsnNode(doublesCounter));ret.add(new InsnNode(Opcodes.DALOAD));doublesCounter++;break;case Type.ARRAY:case Type.OBJECT:ret.add(debugMarker(markerType,"Loading object at " + i + " from storage index "+ objectsCounter));ret.add(new VarInsnNode(Opcodes.ALOAD,objectsVar.getIndex()));ret.add(new LdcInsnNode(objectsCounter));ret.add(new InsnNode(Opcodes.AALOAD));ret.add(new TypeInsnNode(Opcodes.CHECKCAST,basicValue.getType().getInternalName()));objectsCounter++;break;case Type.METHOD:case Type.VOID:default :throw new IllegalArgumentException();}}return ret;}  }
class C{  public InputOutput<T> seekCeil(BytesRef target) throws IOException {  this.target=target;  targetLength=target.length;  super.doSeekCeil();  return setResult();}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public Sample millionMessagesSecondSample(int seconds){  int messages=MILLION * seconds;  long start=baseTime;  long end=start + TimeUnit.SECONDS.toNanos(seconds);  final ConnectionImpl nc=mock(ConnectionImpl.class);  when(nc.getStats()).thenReturn(new Statistics());  Sample stat=new Sample(messages,MSG_SIZE,start,end,nc);  stat.msgCnt=(long)messages;  stat.msgBytes=(long)messages * MSG_SIZE;  stat.ioBytes=stat.msgBytes;  return stat;}  }
class C{  public double doubleValue(){  return ((Double)value).doubleValue();}  }
class C{  public Input(IoBuffer buf){  super(buf);  amf3_mode=0;  stringReferences=new ArrayList<String>();  classReferences=new ArrayList<ClassReference>();}  }
class C{  static public Sort instance(){  if (instance == null)   instance=new Sort();  return instance;}  }
class C{  boolean arrowScroll(int direction){  try {    mInLayout=true;    final boolean handled=arrowScrollImpl(direction);    if (handled) {      playSoundEffect(SoundEffectConstants.getContantForFocusDirection(direction));    }    return handled;  }  finally {    mInLayout=false;  }}  }
class C{  private boolean calls_app_method(MethodOrMethodContext mc,Stack<SootMethod> stack){  CallGraph cg=PTABridge.v().getCallGraph();  logger.info("  cam: entering iterator, stack = {}",stack);  if (no_callback_methods.contains(mc.method().getName()))   return false;  if (system_depth(stack) > 5) {    no_callback_methods.add(mc.method().getName());    return false;  }  int ii=0;  for (Iterator<Edge> tit=cg.edgesOutOf(mc); tit.hasNext(); ) {    Edge e=tit.next();    SootMethod m=e.getTgt().method();    logger.info("  cam: considering method {} ({})",m,ii++);    if (no_callback_methods.contains(m.getName()))     continue;    if (m.toString().contains("<clinit>"))     continue;    if (!is_system(m)) {      logger.info("  cam: {} is not a system call");      return true;    }    if (!stack.contains(m)) {      stack.push(m);      boolean result=calls_app_method(e.getTgt(),stack);      stack.pop();      if (result) {        logger.info("  cam: {} true",m);        return true;      }    }  }  logger.info("  cam: {} is terminal",mc.method());  no_callback_methods.add(mc.method().getName());  return false;}  }
class C{  public boolean isOuter(){  if (type == ScopeType.FUNCTION) {    return false;  }  if (parent == null)   return true;  return parent.isOuter();}  }
class C{  private void updateScrollbarsFreeStanding(){  if (scrollpane == null) {    return;  }  Border border=scrollpane.getBorder();  Object value;  if (border instanceof MetalBorders.ScrollPaneBorder) {    value=Boolean.FALSE;  } else {    value=Boolean.TRUE;  }  JScrollBar sb=scrollpane.getHorizontalScrollBar();  if (sb != null) {    sb.putClientProperty(MetalScrollBarUI.FREE_STANDING_PROP,value);  }  sb=scrollpane.getVerticalScrollBar();  if (sb != null) {    sb.putClientProperty(MetalScrollBarUI.FREE_STANDING_PROP,value);  }}  }
class C{  public void putNum(final String key,final double value){  this.put(key,Formatter.number(value,this.localized));}  }
class C{  public void execute(){  System.out.println("A");  Object model=getDataModel();  if (model == null && getSourceGraph() != null) {    model=getSourceGraph();  }  if (model == null) {    throw new RuntimeException("Data source is unspecified. You may need to double click all your data boxes, \n" + "then click Save, and then right click on them and select Propagate Downstream. \n" + "The issue is that we use a seed to simulate from IM's, so your data is not saved to \n"+ "file when you save the session. It can, however, be recreated from the saved seed.");  }  Parameters params=getParams();  if (model instanceof Graph) {    GraphScore gesScore=new GraphScore((Graph)model);    fgs=new TsFgs2(gesScore);    fgs.setKnowledge((IKnowledge)getParams().get("knowledge",new Knowledge2()));    fgs.setVerbose(true);  } else {    double penaltyDiscount=params.getDouble("penaltyDiscount",4);    if (model instanceof DataSet) {      DataSet dataSet=(DataSet)model;      if (dataSet.isContinuous()) {        SemBicScore gesScore=new SemBicScore(new CovarianceMatrixOnTheFly((DataSet)model));        gesScore.setPenaltyDiscount(penaltyDiscount);        System.out.println("Score done");        fgs=new TsFgs2(gesScore);      } else       if (dataSet.isDiscrete()) {        double samplePrior=getParams().getDouble("samplePrior",1);        double structurePrior=getParams().getDouble("structurePrior",1);        BDeuScore score=new BDeuScore(dataSet);        score.setSamplePrior(samplePrior);        score.setStructurePrior(structurePrior);        fgs=new TsFgs2(score);      } else {        MixedBicScore gesScore=new MixedBicScore(dataSet);        gesScore.setPenaltyDiscount(penaltyDiscount);        fgs=new TsFgs2(gesScore);      }    } else     if (model instanceof ICovarianceMatrix) {      SemBicScore gesScore=new SemBicScore((ICovarianceMatrix)model);      gesScore.setPenaltyDiscount(penaltyDiscount);      gesScore.setPenaltyDiscount(penaltyDiscount);      fgs=new TsFgs2(gesScore);    } else     if (model instanceof DataModelList) {      DataModelList list=(DataModelList)model;      for (      DataModel dataModel : list) {        if (!(dataModel instanceof DataSet || dataModel instanceof ICovarianceMatrix)) {          throw new IllegalArgumentException("Need a combination of all continuous data sets or " + "covariance matrices, or else all discrete data sets, or else a single initialGraph.");        }      }      if (list.size() != 1) {        throw new IllegalArgumentException("FGS takes exactly one data set, covariance matrix, or initialGraph " + "as input. For multiple data sets as input, use IMaGES.");      }      if (allContinuous(list)) {        double penalty=getParams().getDouble("penaltyDiscount",4);        if (params.getBoolean("firstNontriangular",false)) {          SemBicScoreImages fgsScore=new SemBicScoreImages(list);          fgsScore.setPenaltyDiscount(penalty);          fgs=new TsFgs2(fgsScore);        } else {          SemBicScoreImages fgsScore=new SemBicScoreImages(list);          fgsScore.setPenaltyDiscount(penalty);          fgs=new TsFgs2(fgsScore);        }      } else       if (allDiscrete(list)) {        double structurePrior=getParams().getDouble("structurePrior",1);        double samplePrior=getParams().getDouble("samplePrior",1);        BdeuScoreImages fgsScore=new BdeuScoreImages(list);        fgsScore.setSamplePrior(samplePrior);        fgsScore.setStructurePrior(structurePrior);        if (params.getBoolean("firstNontriangular",false)) {          fgs=new TsFgs2(fgsScore);        } else {          fgs=new TsFgs2(fgsScore);        }      } else {        throw new IllegalArgumentException("Data must be either all discrete or all continuous.");      }    } else {      System.out.println("No viable input.");    }  }  fgs.setInitialGraph(initialGraph);  fgs.setKnowledge((IKnowledge)getParams().get("knowledge",new Knowledge2()));  fgs.setNumPatternsToStore(params.getInt("numPatternsToSave",1));  fgs.setVerbose(true);  Graph graph=fgs.search();  if (getSourceGraph() != null) {    GraphUtils.arrangeBySourceGraph(graph,getSourceGraph());  } else   if (((IKnowledge)getParams().get("knowledge",new Knowledge2())).isDefaultToKnowledgeLayout()) {    SearchGraphUtils.arrangeByKnowledgeTiers(graph,(IKnowledge)getParams().get("knowledge",new Knowledge2()));  } else {    GraphUtils.circleLayout(graph,200,200,150);  }  setResultGraph(graph);  this.topGraphs=new ArrayList<>(fgs.getTopGraphs());  if (topGraphs.isEmpty()) {    topGraphs.add(new ScoredGraph(getResultGraph(),Double.NaN));  }  setIndex(topGraphs.size() - 1);}  }
class C{  public static IndexFingerprint fromObject(Object o){  if (o instanceof IndexFingerprint)   return (IndexFingerprint)o;  Map map=null;  if (o instanceof Map) {    map=(Map)o;  } else   if (o instanceof NamedList) {    map=((NamedList)o).asShallowMap();  } else {    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Unknown type " + o);  }  IndexFingerprint f=new IndexFingerprint();  f.maxVersionSpecified=getLong(map,"maxVersionSpecified",Long.MAX_VALUE);  f.maxVersionEncountered=getLong(map,"maxVersionEncountered",-1);  f.maxInHash=getLong(map,"maxInHash",-1);  f.versionsHash=getLong(map,"versionsHash",-1);  f.numVersions=getLong(map,"numVersions",-1);  f.numDocs=getLong(map,"numDocs",-1);  f.maxDoc=getLong(map,"maxDoc",-1);  return f;}  }
class C{  @Override public boolean isSecure(){  return _sslSocket != null;}  }
class C{  public void testCrazyPrefixes1() throws Exception {  Query expected=new PrefixQuery(new Term("field","st*ar"));  assertEquals(expected,parse("st*ar*"));}  }
class C{  public <T extends JCTree>List<T> translate(List<T> trees){  if (trees == null)   return null;  for (List<T> l=trees; l.nonEmpty(); l=l.tail)   l.head=translate(l.head);  return trees;}  }
class C{  public void addAttributeID(char attributeID){  if (!contains(attributeID))   unknownAttributes.add(attributeID);}  }
class C{  public Builder addCompositeFieldClause(String parentFieldName,String nestedFieldName,String nestedFieldValue){  return addFieldClause(QuerySpecification.buildCompositeFieldName(parentFieldName,nestedFieldName),nestedFieldValue);}  }
class C{  public ClientConfig withRetryInterval(int retryInterval){  setRetryInterval(retryInterval);  return this;}  }
class C{  @Override synchronized public void requestThrottleSetup(LocoAddress address,boolean control){  _dccAddr=(DccLocoAddress)address;  _intAddr=_dccAddr.getNumber();  log.debug("Requesting session for throttle");  CanMessage msg=new CanMessage(3,tc.getCanid());  msg.setOpCode(CbusConstants.CBUS_RLOC);  if (((DccLocoAddress)address).isLongAddress()) {    _intAddr=_intAddr | 0xC000;  }  msg.setElement(1,(_intAddr / 256));  msg.setElement(2,_intAddr & 0xff);  tc.sendCanMessage(msg,this);  _handleExpected=true;  startThrottleRequestTimer();}  }
class C{  protected double[] distributionForInstanceProduct(Instance instance) throws Exception {  double[] probs=new double[instance.numClasses()];  for (int i=0; i < probs.length; i++) {    probs[i]=1.0;  }  int numPredictions=0;  for (int i=0; i < m_Classifiers.length; i++) {    double[] dist=getClassifier(i).distributionForInstance(instance);    if (Utils.sum(dist) > 0) {      for (int j=0; j < dist.length; j++) {        probs[j]*=dist[j];      }      numPredictions++;    }  }  for (int i=0; i < m_preBuiltClassifiers.size(); i++) {    double[] dist=m_preBuiltClassifiers.get(i).distributionForInstance(instance);    if (Utils.sum(dist) > 0) {      for (int j=0; j < dist.length; j++) {        probs[j]*=dist[j];      }      numPredictions++;    }  }  if (numPredictions == 0) {    return new double[instance.numClasses()];  }  if (Utils.sum(probs) > 0) {    Utils.normalize(probs);  }  return probs;}  }
class C{  public void paint(Graphics2D g2,Node node,Point2D point,AffineTransform transform){  Shape nodeShape=createNodeShape(node,point.getX(),point.getY());  nodeShape=transform.createTransformedShape(nodeShape);  Paint paint=getForeground();  if (colourDecorator != null) {    colourDecorator.setItem(node);    paint=colourDecorator.getPaint(paint);  }  g2.setPaint(paint);  g2.fill(nodeShape);  if (outlineStroke > 0.0F) {    g2.setPaint(outlinePaint);    g2.setStroke(new BasicStroke(outlineStroke));    g2.draw(nodeShape);  }}  }
class C{  @Override public void onEvent(Event e){  MHRProcess process=null;  if (((KeyNamePair)fieldProcess.getSelectedItem().getValue()).getKey() > 0) {    process=new MHRProcess(Env.getCtx(),((KeyNamePair)fieldProcess.getSelectedItem().getValue()).getKey(),null);    m_HR_Process_ID=process.get_ID();    if (e.getTarget() == fieldProcess) {      fieldEmployee.removeAllItems();      List<KeyNamePair> employeeData=getEmployeeValid(process);      for (      KeyNamePair vp : employeeData)       fieldEmployee.appendItem(vp.getName(),vp);    }  }  if (e.getTarget() == fieldEmployee) {    m_C_BPartner_ID=((KeyNamePair)fieldEmployee.getSelectedItem().getValue()).getKey();    fieldConcept.removeAllItems();    ArrayList<ValueNamePair> conceptData=getConcept(process,fieldProcess != null);    for (    ValueNamePair vp : conceptData)     fieldConcept.appendItem(vp.getName(),vp);  }  if (e.getTarget() == fieldConcept) {    ValueNamePair pp=(ValueNamePair)fieldConcept.getSelectedItem().getValue();    if (pp != null)     m_HR_Concept_ID=Integer.parseInt(((ValueNamePair)fieldConcept.getSelectedItem().getValue()).getValue());    if (m_HR_Concept_ID > 0) {      MHRConcept concept=MHRConcept.get(Env.getCtx(),m_HR_Concept_ID);      fieldColumnType.setValue(DB.getSQLValueStringEx(null,getSQL_ColumnType(Env.getCtx(),"?"),concept.getColumnType()));      fieldColumnType.setVisible(true);      sHR_Movement_ID=seekMovement((Timestamp)fieldValidFrom.getValue());      if (sHR_Movement_ID > 0) {        MHRMovement movementFound=new MHRMovement(Env.getCtx(),sHR_Movement_ID,null);        fieldDescription.setValue(movementFound.getDescription());        fieldText.setValue("");        fieldDate.setValue(null);        fieldQty.setValue(Env.ZERO);        fieldAmount.setValue(Env.ZERO);        if (concept.getColumnType().equals(X_HR_Concept.COLUMNTYPE_Quantity))         fieldQty.setValue(movementFound.getQty()); else         if (concept.getColumnType().equals(X_HR_Concept.COLUMNTYPE_Amount))         fieldAmount.setValue(movementFound.getAmount()); else         if (concept.getColumnType().equals(X_HR_Concept.COLUMNTYPE_Text))         fieldText.setValue(movementFound.getTextMsg()); else         if (concept.getColumnType().equals(X_HR_Concept.COLUMNTYPE_Date))         fieldDate.setValue(movementFound.getServiceDate());      }      if (concept.getColumnType().equals(X_HR_Concept.COLUMNTYPE_Quantity)) {        fieldQty.setVisible(true);        fieldQty.setReadWrite(true);        fieldAmount.setVisible(false);        fieldDate.setVisible(false);        fieldText.setVisible(false);      } else       if (concept.getColumnType().equals(X_HR_Concept.COLUMNTYPE_Amount)) {        fieldQty.setVisible(false);        fieldAmount.setVisible(true);        fieldAmount.setReadWrite(true);        fieldDate.setVisible(false);        fieldText.setVisible(false);      } else       if (concept.getColumnType().equals(X_HR_Concept.COLUMNTYPE_Date)) {        fieldQty.setVisible(false);        fieldAmount.setVisible(false);        fieldDate.setVisible(true);        fieldDate.setReadWrite(true);        fieldText.setVisible(false);      } else       if (concept.getColumnType().equals(X_HR_Concept.COLUMNTYPE_Text)) {        fieldText.setVisible(true);        fieldText.setReadWrite(true);        fieldAmount.setVisible(false);        fieldDate.setVisible(false);      }    }  }  if (e.getTarget() == bOk) {    if (fieldConcept.getSelectedItem() != null)     m_HR_Concept_ID=Integer.parseInt(((ValueNamePair)fieldConcept.getSelectedItem().getValue()).getValue());    if (m_HR_Concept_ID <= 0 || fieldProcess.getSelectedItem().getValue() == null || ((KeyNamePair)fieldProcess.getSelectedItem().getValue()).getKey() <= 0 || fieldEmployee.getSelectedItem().getValue() == null || ((KeyNamePair)fieldEmployee.getSelectedItem().getValue()).getKey() <= 0) {    } else {      saveMovement();    }  }  executeQuery();  return;}  }
class C{  public boolean isColumnParent(int index){  if (index < 0 || index >= m_columns.length)   return false;  return m_columns[index].IsParent;}  }
class C{  private List<Stat> processPortStatsInfo(Map<String,List<String>> interPortMap,Map<String,BigInteger> stringMapPortIOs,StorageSystem storageSystem,DbClient dbClient,Long sampleTime){  List<Stat> stat=new ArrayList<Stat>();  Stat fePortStat=null;  for (  Entry<String,List<String>> entry : interPortMap.entrySet()) {    String interfaceIP=entry.getKey();    List<String> portList=entry.getValue();    String portNativeGuid=NativeGUIDGenerator.generateNativeGuid(storageSystem,interfaceIP,NativeGUIDGenerator.PORT);    StoragePort storagePort=findExistingPort(portNativeGuid,dbClient);    _logger.info("interface {} and port details {}",interfaceIP,storagePort.getPortName());    BigInteger iovalue=new BigInteger("0");    for (    String physicalName : portList) {      iovalue=iovalue.add(stringMapPortIOs.get(physicalName));    }    Long iopes=iovalue.longValue() / portList.size();    Long kbytes=iopes / 1024;    _logger.info("processIPPortMetrics input data iops{} and time details {} iopes",iopes.toString(),sampleTime.toString());    storagePort.setPortSpeed(1L);    portMetricsProcessor.processIPPortMetrics(kbytes,iopes,storagePort,sampleTime);    fePortStat=preparePortStatInfo(portNativeGuid,storagePort.getId(),iopes,sampleTime);    stat.add(fePortStat);  }  return stat;}  }
class C{  public void addCmrRepositoryDefinition(CmrRepositoryDefinition cmrRepositoryDefinition){  if (!cmrRepositoryDefinitions.contains(cmrRepositoryDefinition)) {    for (    CmrRepositoryChangeListener repositoryChangeListener : cmrRepositoryChangeListeners) {      cmrRepositoryDefinition.addCmrRepositoryChangeListener(repositoryChangeListener);    }    cmrRepositoryDefinitions.add(cmrRepositoryDefinition);    savePreference();    for (    CmrRepositoryChangeListener repositoryChangeListener : cmrRepositoryChangeListeners) {      repositoryChangeListener.repositoryAdded(cmrRepositoryDefinition);    }    UpdateRepositoryJob updateRepositoryJob=new UpdateRepositoryJob(cmrRepositoryDefinition,true);    updateRepositoryJob.schedule();    repositoryUpdateJobMap.put(cmrRepositoryDefinition,updateRepositoryJob);  }}  }
class C{  public void parse(TabularFileParserConfig config,TabularFileHandler handler){  if (config == null)   throw new NullPointerException("TabularFileParser requires a non-null configuration.");  if (handler == null)   throw new NullPointerException("TabularFileParser requires a non-null handler.");  this.config=config;  boolean started=(config.getStartRegex() == null);  boolean ended=false;  try (BufferedReader reader=IOUtils.getBufferedReader(config.getFile(),config.getCharset())){    String line;    while ((line=reader.readLine()) != null && !ended) {      if (started) {        ended=isEnd(line);        if (!ended && !isComment(line)) {          handler.startRow(split(line));        }      } else {        started=isStart(line);      }    }  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  private GenericBeanDefinition createApplicationServlet(Class<? extends Application> applicationClass,String path){  GenericBeanDefinition applicationServletBean=new GenericBeanDefinition();  applicationServletBean.setFactoryBeanName(ResteasyApplicationBuilder.BEAN_NAME);  applicationServletBean.setFactoryMethodName("build");  Set<Class<?>> resources=allResources;  ConstructorArgumentValues values=new ConstructorArgumentValues();  values.addIndexedArgumentValue(0,applicationClass.getName());  values.addIndexedArgumentValue(1,path);  values.addIndexedArgumentValue(2,resources);  values.addIndexedArgumentValue(3,providers);  applicationServletBean.setConstructorArgumentValues(values);  applicationServletBean.setAutowireCandidate(false);  applicationServletBean.setScope("singleton");  return applicationServletBean;}  }
class C{  public Address __or__(final Object rhs){  return new Address(m_value.or(getBigInteger(rhs)));}  }
class C{  public Label(){}  }
class C{  public static long sleep(final long milliseconds){  final long t0=System.nanoTime();  try {    Thread.sleep(milliseconds);  } catch (  InterruptedException ignore) {    Thread.currentThread().interrupt();  }  return (System.nanoTime() - t0) / 1000;}  }
class C{  public void append(char[] c,int off,int len){  ensureCapacity(count + len);  System.arraycopy(c,off,buf,count,len);  count+=len;}  }
class C{  public boolean hasUniqueConcretization(){  return !isTop() && isUnbased() && !isNumberTop();}  }
class C{  private void createCache(Properties props) throws Exception {  DistributedSystem ds=getSystem(props);  cache=CacheFactory.create(ds);  assertNotNull(cache);}  }
class C{  public boolean isDirectory(){  return mDirectory;}  }
class C{  public static BoxDataSet serializableInstance(){  return new BoxDataSet(new ShortDataBox(4,4),null);}  }
class C{  protected Object createElementInfo(){  return new JavaProjectElementInfo();}  }
class C{  public final byte readByte() throws java.io.IOException {  return 0;}  }
class C{  public ProtocolCodecException(String message){  super(message);}  }
class C{  public static NalUnitHeader extract(byte[] h264Packet){  if (h264Packet == null) {    throw new RuntimeException("Cannot extract H264 header. Invalid H264 packet");  }  NalUnitHeader header=new NalUnitHeader(false,0,0);  extract(h264Packet,header);  return header;}  }
class C{  public static TypeReference newTryCatchReference(int tryCatchBlockIndex){  return new TypeReference((EXCEPTION_PARAMETER << 24) | (tryCatchBlockIndex << 8));}  }
class C{  public final LC height(String height){  setHeight(ConstraintParser.parseBoundSize(height,false,false));  return this;}  }
class C{  public static String quote(String s){  return "\"" + s + "\"";}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public boolean readOptions(){  String filename=modelDir + File.separator + optionFile;  BufferedReader fin=null;  String line;  try {    fin=new BufferedReader(new FileReader(filename));    System.out.println("Reading options ...");    while ((line=fin.readLine()) != null) {      String trimLine=line.trim();      if (trimLine.startsWith("#")) {        continue;      }      StringTokenizer strTok=new StringTokenizer(line,"= \t\r\n");      int len=strTok.countTokens();      if (len != 2) {        continue;      }      String strOpt=strTok.nextToken();      String strVal=strTok.nextToken();      if (strOpt.compareToIgnoreCase("trainDataFile") == 0) {        trainDataFile=strVal;      } else       if (strOpt.compareToIgnoreCase("testDataFile") == 0) {        testDataFile=strVal;      } else       if (strOpt.compareToIgnoreCase("isLogging") == 0) {        if (!(strVal.compareToIgnoreCase("true") == 0 || strVal.compareToIgnoreCase("false") == 0)) {          continue;        }        isLogging=Boolean.valueOf(strVal).booleanValue();      } else       if (strOpt.compareToIgnoreCase("cpRareThreshold") == 0) {        int numTemp=Integer.parseInt(strVal);        cpRareThreshold=numTemp;      } else       if (strOpt.compareToIgnoreCase("fRareThreshold") == 0) {        int numTemp=Integer.parseInt(strVal);        fRareThreshold=numTemp;      } else       if (strOpt.compareToIgnoreCase("numIterations") == 0) {        int numTemp=Integer.parseInt(strVal);        numIterations=numTemp;      } else       if (strOpt.compareToIgnoreCase("initLambdaVal") == 0) {        double numTemp=Double.parseDouble(strVal);        initLambdaVal=numTemp;      } else       if (strOpt.compareToIgnoreCase("sigmaSquare") == 0) {        double numTemp=Double.parseDouble(strVal);        sigmaSquare=numTemp;      } else       if (strOpt.compareToIgnoreCase("epsForConvergence") == 0) {        double numTemp=Double.parseDouble(strVal);        epsForConvergence=numTemp;      } else       if (strOpt.compareToIgnoreCase("mForHessian") == 0) {        int numTemp=Integer.parseInt(strVal);        mForHessian=numTemp;      } else       if (strOpt.compareToIgnoreCase("evaluateDuringTraining") == 0) {        if (!(strVal.compareToIgnoreCase("true") == 0 || strVal.compareToIgnoreCase("false") == 0)) {          continue;        }        evaluateDuringTraining=Boolean.valueOf(strVal).booleanValue();      } else       if (strOpt.compareToIgnoreCase("saveBestModel") == 0) {        if (!(strVal.compareToIgnoreCase("true") == 0 || strVal.compareToIgnoreCase("false") == 0)) {          continue;        }        saveBestModel=Boolean.valueOf(strVal).booleanValue();      } else       if (strOpt.compareToIgnoreCase("trainLogFile") == 0) {        trainLogFile=strVal;      } else       if (strOpt.compareToIgnoreCase("modelFile") == 0) {        modelFile=strVal;      } else {      }    }    System.out.println("Reading options completed!");  } catch (  IOException e) {    System.out.println(e.toString());    return false;  }  return true;}  }
class C{  public static void writeLines(final Collection<?> lines,final String lineEnding,final OutputStream output) throws IOException {  IOUtils.writeLines(lines,lineEnding,output,Charset.defaultCharset());}  }
class C{  private String generateFieldInfoInputs(){  java.lang.reflect.Field[] fields=pojoClass.getDeclaredFields();  StringBuilder sb=new StringBuilder();  for (int i=0; i < fields.length; i++) {    java.lang.reflect.Field f=fields[i];    Class<?> c=ClassUtils.primitiveToWrapper(f.getType());    sb.append(f.getName() + FIELD_SEPARATOR + f.getName()+ FIELD_SEPARATOR+ c.getSimpleName().toUpperCase()+ RECORD_SEPARATOR);  }  return sb.substring(0,sb.length() - 1);}  }
class C{  public FieldAnalysisRequest addFieldType(String fieldTypeName){  if (fieldTypes == null) {    fieldTypes=new LinkedList<>();  }  fieldTypes.add(fieldTypeName);  return this;}  }
class C{  public static boolean isToday(Calendar cal){  return isSameDay(cal,Calendar.getInstance());}  }
class C{  public void initializeChildDimensionsList(int childDimension){  listOfChildDimensions=new ArrayList<CarbonDimension>(childDimension);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public TypeVariable basicGetTypeVar(){  return typeVar;}  }
class C{  @Override public String toString(){  return super.toString() + "\ncons " + conservativeApproximation+ "\n";}  }
class C{  public Ray(double direction){  this(new Vector2(direction));}  }
class C{  private static boolean packageFound(String line,Class<?> aClass){  if (containsAll(line,"package",aClass.getPackage().getName(),";"))   return true;  return false;}  }
class C{  @Override public int executeUpdate() throws SQLException {  try {    debugCodeCall("executeUpdate");    checkClosed();    try {      return executeUpdateInternal();    }  finally {      afterWriting();    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public Pattern urlMustMatchPattern(){  if (this.crawlerurlmustmatch == null) {    final String r=get(CrawlAttribute.CRAWLER_URL_MUSTMATCH.key);    try {      this.crawlerurlmustmatch=(r == null || r.equals(CrawlProfile.MATCH_ALL_STRING)) ? CrawlProfile.MATCH_ALL_PATTERN : Pattern.compile(r,Pattern.CASE_INSENSITIVE);    } catch (    final PatternSyntaxException e) {      this.crawlerurlmustmatch=CrawlProfile.MATCH_NEVER_PATTERN;    }  }  return this.crawlerurlmustmatch;}  }
class C{  public StringCollectionRequestBuilder(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  public void embedShift(){  base.mutableAdd(shift);  shift=0;}  }
class C{  public void encode(OutputStream out) throws IOException {  DerOutputStream tmp=new DerOutputStream();  if (this.extensionValue == null) {    this.extensionId=PKIXExtensions.IssuingDistributionPoint_Id;    this.critical=false;    encodeThis();  }  super.encode(tmp);  out.write(tmp.toByteArray());}  }
class C{  public static ValueTime parse(String s){  try {    return fromNanos(DateTimeUtils.parseTimeNanos(s,0,s.length(),false));  } catch (  Exception e) {    throw DbException.get(ErrorCode.INVALID_DATETIME_CONSTANT_2,e,"TIME",s);  }}  }
class C{  public static <T>T min(Iterator<T> self,@ClosureParams(value=FromString.class,options={"T","T,T"}) Closure closure){  return min((Iterable<T>)toList(self),closure);}  }
class C{  public GF2nPolynomial(GF2nPolynomial a){  int i;  coeff=new GF2nElement[a.size];  size=a.size;  for (i=0; i < size; i++) {    coeff[i]=(GF2nElement)a.coeff[i].clone();  }}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.setCharacterEncoding("utf-8");  String school="henu";  UserSql userSql=new UserSql(school);  List<User> list=userSql.getUserList();  for (  User user : list) {    SchoolController schoolController=new SchoolController(school);    String basePath=request.getRealPath(File.separator);    String saveDir=basePath + "img" + File.separator+ "checkNum"+ File.separator;    String imgCode=schoolController.CheckNumUrl(saveDir);    String savePath=saveDir + "checkNum" + imgCode+ ".jpg";    OCR ocr=new OCR();    String code=ocr.getResult(savePath);    JSONObject jsonObject=schoolController.login(user.getUsername(),user.getPassword(),code);    if (jsonObject.get("result") != null && !"null".equals(jsonObject.get("result").toString())) {      schoolController.crawler(user.getUsername(),user.getPassword(),user.getId(),code);    }  }}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:41.278 -0500",hash_original_method="F404DEEFBF7AA691DD4FBAFA7C65E80C",hash_generated_method="5C022222B5B6AA1F11824DDE7B1E59F6") public void onFormResubmission(WebView view,Message dontResend,Message resend){  dontResend.sendToTarget();}  }
class C{  public int size(){  return toExport.size();}  }
class C{  public T remove(String name){  int idx=indexOf(name,0);  if (idx != -1)   return remove(idx);  return null;}  }
class C{  private Polygon readPolygonText() throws IOException, ParseException {  String nextToken=getNextEmptyOrOpener();  if (nextToken.equals(EMPTY)) {    return geometryFactory.createPolygon(geometryFactory.createLinearRing(new Coordinate[]{}),new LinearRing[]{});  }  ArrayList holes=new ArrayList();  LinearRing shell=readLinearRingText();  nextToken=getNextCloserOrComma();  while (nextToken.equals(COMMA)) {    LinearRing hole=readLinearRingText();    holes.add(hole);    nextToken=getNextCloserOrComma();  }  LinearRing[] array=new LinearRing[holes.size()];  return geometryFactory.createPolygon(shell,(LinearRing[])holes.toArray(array));}  }
class C{  private RawProtein<SmartRawMatch> filterByDerivedSequenceEvalue(RawProtein<SmartRawMatch> matchRawProtein){  final RawProtein<SmartRawMatch> filtered=new RawProtein<SmartRawMatch>(matchRawProtein.getProteinIdentifier());  for (  SmartRawMatch match : matchRawProtein.getMatches()) {    final SmartThresholdFileParser.SmartThreshold threshold=smartThresholds.getThresholdByModelId(match.getModelId());    if (threshold.getDerivedEvalue(match.getScore()) < threshold.getCutoff()) {      filtered.addMatch(match);    }  }  return filtered;}  }
class C{  private void updateEpisode(int state){  Timber.d("Updating episode, state: %d",state);  if (mMediaPlayer == null || mCurrentEpisode == null || mCurrentEpisode.getId() == -1) {    return;  }switch (state) {case MediaPlayerState.STATE_PLAYING:    mCurrentEpisode.setEpisodeStatus(EpisodeStatus.IN_PROGRESS);  break;case MediaPlayerState.STATE_PAUSED:case MediaPlayerState.STATE_IDLE:mCurrentEpisode.setEpisodeStatus(EpisodeStatus.PLAYED);mCurrentEpisode.setProgress(mMediaPlayer.getCurrentPosition() - MS_TO_REVERSE_ON_PAUSE);break;default :throw new IllegalArgumentException("Incorrect state for showing play pause notification");}AppPrefHelper appPrefHelper=AppPrefHelper.getInstance(this);appPrefHelper.setLastPlayedEpisodeId(mCurrentEpisode.getId());Bundle params=new Bundle();params.putLong(EpisodeModel.PARAM_EPISODE_PROGRESS,mCurrentEpisode.getProgress());params.putInt(EpisodeModel.PARAM_EPISODE_STATUS,mCurrentEpisode.getEpisodeStatus());EpisodeModel.updateEpisodeAsync(this,mCurrentEpisode.getId(),params);}  }
class C{  public boolean isSignatureValid(ContentVerifierProvider verifierProvider) throws CertException {  AttributeCertificateInfo acinfo=attrCert.getAcinfo();  if (!CertUtils.isAlgIdEqual(acinfo.getSignature(),attrCert.getSignatureAlgorithm())) {    throw new CertException("signature invalid - algorithm identifier mismatch");  }  ContentVerifier verifier;  try {    verifier=verifierProvider.get((acinfo.getSignature()));    OutputStream sOut=verifier.getOutputStream();    DEROutputStream dOut=new DEROutputStream(sOut);    dOut.writeObject(acinfo);    sOut.close();  } catch (  Exception e) {    throw new CertException("unable to process signature: " + e.getMessage(),e);  }  return verifier.verify(attrCert.getSignatureValue().getBytes());}  }
class C{  public void selectParameters(List<Parameter> parameters){  getParameter("tree");  getParameter("treeModel.internalNodeHeights");  getParameter("treeModel.allInternalNodeHeights");  Parameter rootHeightParameter=getParameter("treeModel.rootHeight");  if (rootHeightParameter.priorType == PriorType.NONE_TREE_PRIOR || !rootHeightParameter.isPriorEdited()) {    rootHeightParameter.setInitial(getInitialRootHeight());    rootHeightParameter.truncationLower=options.maximumTipHeight;    rootHeightParameter.uniformLower=options.maximumTipHeight;    rootHeightParameter.isTruncated=true;  }  if (options.useStarBEAST) {    rootHeightParameter.isCalibratedYule=treePrior.getNodeHeightPrior() == TreePriorType.SPECIES_YULE_CALIBRATION;  } else {    rootHeightParameter.isCalibratedYule=treePrior.getNodeHeightPrior() == TreePriorType.YULE_CALIBRATION;    parameters.add(rootHeightParameter);  }}  }
class C{  public static ExpandableComposite createExpandibleComposite(Composite parent,String label,int hspan,int fill){  ExpandableComposite ex=new ExpandableComposite(parent,SWT.NONE,ExpandableComposite.TWISTIE | ExpandableComposite.CLIENT_INDENT);  ex.setText(label);  ex.setFont(JFaceResources.getFontRegistry().getBold(JFaceResources.DIALOG_FONT));  GridData gd=new GridData(fill);  gd.horizontalSpan=hspan;  gd.grabExcessHorizontalSpace=true;  ex.setLayoutData(gd);  return ex;}  }
class C{  @Override public void close(){synchronized (lock) {    if (isOpen()) {      buf=null;    }  }}  }
class C{  @Override public void addEquipment(Mounted mounted,int loc,boolean rearMounted) throws LocationFullException {  super.addEquipment(mounted,loc,rearMounted);  String name=mounted.getType().getInternalName();  if (BattleArmor.CAMO_SYSTEM.equals(name)) {    hasCamoSystem=true;    camoName=name;  }  if (mounted.getType() instanceof ISBAPopUpMineLauncher) {    if (loc == BattleArmor.LOC_SQUAD) {      for (int i=LOC_TROOPER_1; i <= getTroopers(); i++) {        addEquipment(EquipmentType.get("BA-Mine Launcher Ammo"),loc);      }    }  }}  }
class C{  public synchronized void checkAccess(LicenseCheckerCallback callback){  if (mPolicy.allowAccess()) {    Log.i(TAG,"Using cached license response");    callback.allow(Policy.LICENSED);  } else {    LicenseValidator validator=new LicenseValidator(mPolicy,new NullDeviceLimiter(),callback,generateNonce(),mPackageName,mVersionCode);    if (mService == null) {      Log.i(TAG,"Binding to licensing service.");      try {        boolean bindResult=mContext.bindService(new Intent("com.android.vending.licensing.ILicensingService"),this,Context.BIND_AUTO_CREATE);        if (bindResult) {          mPendingChecks.offer(validator);        } else {          Log.e(TAG,"Could not bind to service.");          handleServiceConnectionError(validator);        }      } catch (      Exception e) {        callback.applicationError(LicenseCheckerCallback.ERROR_MISSING_PERMISSION);      }    } else {      mPendingChecks.offer(validator);      runChecks();    }  }}  }
class C{  @Deprecated public static void assertNotEquals(String itemName,int notExpected,int actual){  try {    if (notExpected == actual) {      Assert.fail(itemName + " should not be equal:<" + notExpected+ '>');    }  } catch (  AssertionError e) {    Verify.throwMangledException(e);  }}  }
class C{  synchronized void add(Object obj){  if (objList != null) {    objList.add(obj);  }}  }
class C{  private void ignoreIncomingCall(){  send("Ignoring incoming call");  ITelephony ts=getTelephonyService();  ts.silenceRinger();}  }
class C{  public String saveInstanceDataTipText(){  return "Whether to save the training data for visualization.";}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  @Override public void updateFloat(int columnIndex,float x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateFloat(" + columnIndex + ", "+ x+ "f);");    }    update(columnIndex,ValueFloat.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public String saveInstanceDataTipText(){  return "save instance information for visualization purposes";}  }
class C{  public TradeoffAnalytics(){  super(SERVICE_NAME);  if ((getEndPoint() == null) || getEndPoint().isEmpty()) {    setEndPoint(URL);  }}  }
class C{  public int nextNode(){  int nextNode=DTM.NULL;  AxesWalker walker=wi().getLastUsedWalker();  while (true) {    if (null == walker)     break;    nextNode=walker.getNextNode();    if (DTM.NULL == nextNode) {      walker=walker.m_prevWalker;    } else {      if (walker.acceptNode(nextNode) != DTMIterator.FILTER_ACCEPT) {        continue;      }      if (null == walker.m_nextWalker) {        wi().setLastUsedWalker(walker);        break;      } else {        AxesWalker prev=walker;        walker=walker.m_nextWalker;        walker.setRoot(nextNode);        walker.m_prevWalker=prev;        continue;      }    }  }  return nextNode;}  }
class C{  public static <S>Builder<S> builder(){  return new Builder<>(null);}  }
class C{  public void putAll(Map<String,Object> map){  items.putAll(map);}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.RETURN_STATEMENT;}  }
class C{  public MChangeLog(Properties ctx,int AD_ChangeLog_ID,String TrxName,int AD_Session_ID,int AD_Table_ID,int AD_Column_ID,int Record_ID,int AD_Client_ID,int AD_Org_ID,Object OldValue,Object NewValue){  this(ctx,AD_ChangeLog_ID,TrxName,AD_Session_ID,AD_Table_ID,AD_Column_ID,Record_ID,AD_Client_ID,AD_Org_ID,OldValue,NewValue,(String)null);}  }
class C{  @Override public void init(Connection conn,String schemaName,String triggerName,String tableName,boolean before,int type){}  }
class C{  public static float[] cubeToBounds(float[] target,float[] src){  assert src.length == 6;  return cubeToBounds(target,src[0],src[1],src[2],src[3],src[4],src[5]);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:27.547 -0500",hash_original_method="5EF6ACB57D96EC76628792297A2B7108",hash_generated_method="B08D25B23B7C0FE695D1FFB0CCA12B49") public DERGeneralizedTime(String time){  this.time=time;  try {    this.getDate();  } catch (  ParseException e) {    throw new IllegalArgumentException("invalid date string: " + e.getMessage());  }}  }
class C{  public Product(String sku){  this.sku=sku;}  }
class C{  @Override public void filter(final IScope scope,final IShape source,final Collection<? extends IShape> results){  getPopulation(scope).filter(scope,source,results);}  }
class C{  public boolean canSeekBackwards(){  return true;}  }
class C{  Iter(){  for (; ; ) {    next=findFirst();    if (next == null)     break;    Object x=next.value;    if (x != null && x != next) {      nextValue=(V)x;      break;    }  }}  }
class C{  public GraphMLReader() throws ParserConfigurationException, SAXException {  this(null,null);}  }
class C{  public static void matchModifiedStoragePoolsWithAllVirtualPool(List<StoragePool> updatedPoolList,DbClient dbClient,CoordinatorClient coordinator,StringBuffer errorMessage){  List<URI> vpoolURIs=dbClient.queryByType(VirtualPool.class,true);  Iterator<VirtualPool> vpoolListItr=dbClient.queryIterativeObjects(VirtualPool.class,vpoolURIs);  List<VirtualPool> vPoolsToUpdate=new ArrayList<VirtualPool>();  while (vpoolListItr.hasNext()) {    VirtualPool vpool=vpoolListItr.next();    matchvPoolWithStoragePools(vpool,updatedPoolList,dbClient,coordinator,null,errorMessage);    vPoolsToUpdate.add(vpool);  }  if (!vPoolsToUpdate.isEmpty()) {    persistUpdatedVpoolList(vPoolsToUpdate,dbClient);  }}  }
class C{  public PreferencesCookieStore(Context context){  cookiePrefs=context.getSharedPreferences(COOKIE_PREFS,Context.MODE_PRIVATE);  cookies=new ConcurrentHashMap<String,Cookie>();  String storedCookieNames=cookiePrefs.getString(COOKIE_NAME_STORE,null);  if (storedCookieNames != null) {    String[] cookieNames=TextUtils.split(storedCookieNames,",");    for (    String name : cookieNames) {      String encodedCookie=cookiePrefs.getString(COOKIE_NAME_PREFIX + name,null);      if (encodedCookie != null) {        Cookie decodedCookie=decodeCookie(encodedCookie);        if (decodedCookie != null) {          cookies.put(name,decodedCookie);        }      }    }    clearExpired(new Date());  }}  }
class C{  public ModbusUDPListener(){  try {    address=InetAddress.getByAddress(new byte[]{0,0,0,0});  } catch (  UnknownHostException e) {  }}  }
class C{  public static int readFromFileChannel(FileChannel channel,long channelPosition,ByteBuffer dest) throws IOException {  if (dest.isDirect() || (dest.remaining() < READ_CHUNK_SIZE)) {    return readSingleChunk(channel,channelPosition,dest);  } else {    int bytesRead=0;    int bytesToRead=dest.remaining();    ByteBuffer tmpBuffer=dest.duplicate();    try {      while (dest.hasRemaining()) {        tmpBuffer.limit(Math.min(dest.limit(),tmpBuffer.position() + READ_CHUNK_SIZE));        int read=readSingleChunk(channel,channelPosition,tmpBuffer);        if (read < 0) {          return read;        }        bytesRead+=read;        channelPosition+=read;        dest.position(tmpBuffer.position());      }    }  finally {      dest.position(tmpBuffer.position());    }    assert bytesRead == bytesToRead : "failed to read an entire buffer but also didn't get an EOF (read [" + bytesRead + "] needed ["+ bytesToRead+ "]";    return bytesRead;  }}  }
class C{  public static long[] unbox(List<Long> list){  long[] res=new long[list.size()];  for (int i=0; i < res.length; i++) {    res[i]=list.get(i);  }  return res;}  }
class C{  protected SurfaceData initAcceleratedSurface(){  SurfaceData sData;  Component comp=vImg.getComponent();  WComponentPeer peer=(comp != null) ? (WComponentPeer)comp.getPeer() : null;  try {    boolean forceback=false;    if (context instanceof Boolean) {      forceback=((Boolean)context).booleanValue();    }    if (forceback) {      sData=D3DSurfaceData.createData(peer,vImg);    } else {      D3DGraphicsConfig gc=(D3DGraphicsConfig)vImg.getGraphicsConfig();      ColorModel cm=gc.getColorModel(vImg.getTransparency());      int type=vImg.getForcedAccelSurfaceType();      if (type == UNDEFINED) {        type=RT_TEXTURE;      }      sData=D3DSurfaceData.createData(gc,vImg.getWidth(),vImg.getHeight(),cm,vImg,type);    }  } catch (  NullPointerException ex) {    sData=null;  }catch (  OutOfMemoryError er) {    sData=null;  }catch (  InvalidPipeException ipe) {    sData=null;  }  return sData;}  }
class C{  public MediaMultipart(IEntry entry,MediaSource media) throws MessagingException {  super("related");  Preconditions.checkNotNull(entry,"entry");  Preconditions.checkNotNull(media,"media");  atomPart=new MediaBodyPart(entry);  addBodyPart(atomPart);  mediaPart=new MediaBodyPart(media);  addBodyPart(mediaPart);}  }
class C{  public static void main(String[] args){  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    System.out.println();    System.out.println(">>> Binary objects cache query example started.");    CacheConfiguration<Integer,Organization> orgCacheCfg=new CacheConfiguration<>();    orgCacheCfg.setCacheMode(CacheMode.PARTITIONED);    orgCacheCfg.setName(ORGANIZATION_CACHE_NAME);    orgCacheCfg.setQueryEntities(Arrays.asList(createOrganizationQueryEntity()));    CacheConfiguration<EmployeeKey,Employee> employeeCacheCfg=new CacheConfiguration<>();    employeeCacheCfg.setCacheMode(CacheMode.PARTITIONED);    employeeCacheCfg.setName(EMPLOYEE_CACHE_NAME);    employeeCacheCfg.setQueryEntities(Arrays.asList(createEmployeeQueryEntity()));    try (IgniteCache<Integer,Organization> orgCache=ignite.getOrCreateCache(orgCacheCfg);IgniteCache<EmployeeKey,Employee> employeeCache=ignite.getOrCreateCache(employeeCacheCfg)){      if (ignite.cluster().forDataNodes(orgCache.getName()).nodes().isEmpty()) {        System.out.println();        System.out.println(">>> This example requires remote cache nodes to be started.");        System.out.println(">>> Please start at least 1 remote cache node.");        System.out.println(">>> Refer to example's javadoc for details on configuration.");        System.out.println();        return;      }      populateCache(orgCache,employeeCache);      IgniteCache<BinaryObject,BinaryObject> binaryCache=employeeCache.withKeepBinary();      sqlQuery(binaryCache);      sqlJoinQuery(binaryCache);      sqlFieldsQuery(binaryCache);      textQuery(binaryCache);      System.out.println();    }  finally {      ignite.destroyCache(ORGANIZATION_CACHE_NAME);      ignite.destroyCache(EMPLOYEE_CACHE_NAME);    }  } }  }
class C{  protected ClassLoaderLibrary newClassLoaderLibrary(AbstractClassLibrary parentLibrary){  return new ClassLoaderLibrary(parentLibrary);}  }
class C{  public void replace(StackablePath path){  check();  history.kill();  dispatcher.dispatch(add(History.NAV_TYPE_PUSH,path));}  }
class C{  @NotNull public static TokenSet andNot(@NotNull TokenSet a,@NotNull TokenSet b){  final TokenSet newSet=new TokenSet((short)Math.min(a.myShift,b.myShift),(short)Math.max(a.myMax,b.myMax));  for (int i=0; i < newSet.myWords.length; i++) {    final int ai=newSet.myShift - a.myShift + i;    final int bi=newSet.myShift - b.myShift + i;    newSet.myWords[i]=(0 <= ai && ai < a.myWords.length ? a.myWords[ai] : 0l) & ~(0 <= bi && bi < b.myWords.length ? b.myWords[bi] : 0l);  }  return newSet;}  }
class C{  @Override public void write(byte[] b,int off,int len) throws IOException {  flushBits();  out.write(b,off,len);}  }
class C{  public int maxPos(){  return maxPos;}  }
class C{  public static <E>Set<E> singleton(E object){  return new SingletonSet<E>(object);}  }
class C{  public static TimeSynchronizationSample createTimeSynchronizationSampleWithDuration(final long duration){  return new TimeSynchronizationSample(new Node(new NodeIdentity(new KeyPair(),"node"),new NodeEndpoint("http","10.10.10.12",13),null),new CommunicationTimeStamps(new NetworkTimeStamp(0),new NetworkTimeStamp(duration)),new CommunicationTimeStamps(new NetworkTimeStamp(duration / 2),new NetworkTimeStamp(duration / 2)));}  }
class C{  public RelationNotification(String notifType,Object sourceObj,long sequence,long timeStamp,String message,String id,String typeName,ObjectName objectName,List<ObjectName> unregMBeanList) throws IllegalArgumentException {  super(notifType,sourceObj,sequence,timeStamp,message);  if (!isValidBasicStrict(notifType,sourceObj,id,typeName) || !isValidCreate(notifType)) {    throw new IllegalArgumentException("Invalid parameter.");  }  relationId=id;  relationTypeName=typeName;  relationObjName=safeGetObjectName(objectName);  unregisterMBeanList=safeGetObjectNameList(unregMBeanList);}  }
class C{  public void writeValue(Value v){  int start=pos;  if (v == ValueNull.INSTANCE) {    data[pos++]=0;    return;  }  int type=v.getType();switch (type) {case Value.BOOLEAN:    writeByte((byte)(v.getBoolean().booleanValue() ? BOOLEAN_TRUE : BOOLEAN_FALSE));  break;case Value.BYTE:writeByte((byte)type);writeByte(v.getByte());break;case Value.SHORT:writeByte((byte)type);writeShortInt(v.getShort());break;case Value.INT:{int x=v.getInt();if (x < 0) {writeByte((byte)INT_NEG);writeVarInt(-x);} else if (x < 16) {writeByte((byte)(INT_0_15 + x));} else {writeByte((byte)type);writeVarInt(x);}break;}case Value.LONG:{long x=v.getLong();if (x < 0) {writeByte((byte)LONG_NEG);writeVarLong(-x);} else if (x < 8) {writeByte((byte)(LONG_0_7 + x));} else {writeByte((byte)type);writeVarLong(x);}break;}case Value.DECIMAL:{BigDecimal x=v.getBigDecimal();if (BigDecimal.ZERO.equals(x)) {writeByte((byte)DECIMAL_0_1);} else if (BigDecimal.ONE.equals(x)) {writeByte((byte)(DECIMAL_0_1 + 1));} else {int scale=x.scale();BigInteger b=x.unscaledValue();int bits=b.bitLength();if (bits <= 63) {if (scale == 0) {writeByte((byte)DECIMAL_SMALL_0);writeVarLong(b.longValue());} else {writeByte((byte)DECIMAL_SMALL);writeVarInt(scale);writeVarLong(b.longValue());}} else {writeByte((byte)type);writeVarInt(scale);byte[] bytes=b.toByteArray();writeVarInt(bytes.length);write(bytes,0,bytes.length);}}break;}case Value.TIME:if (SysProperties.STORE_LOCAL_TIME) {writeByte((byte)LOCAL_TIME);ValueTime t=(ValueTime)v;long nanos=t.getNanos();long millis=nanos / 1000000;nanos-=millis * 1000000;writeVarLong(millis);writeVarLong(nanos);} else {writeByte((byte)type);writeVarLong(DateTimeUtils.getTimeLocalWithoutDst(v.getTime()));}break;case Value.DATE:{if (SysProperties.STORE_LOCAL_TIME) {writeByte((byte)LOCAL_DATE);long x=((ValueDate)v).getDateValue();writeVarLong(x);} else {writeByte((byte)type);long x=DateTimeUtils.getTimeLocalWithoutDst(v.getDate());writeVarLong(x / MILLIS_PER_MINUTE);}break;}case Value.TIMESTAMP:{if (SysProperties.STORE_LOCAL_TIME) {writeByte((byte)LOCAL_TIMESTAMP);ValueTimestamp ts=(ValueTimestamp)v;long dateValue=ts.getDateValue();writeVarLong(dateValue);long nanos=ts.getTimeNanos();long millis=nanos / 1000000;nanos-=millis * 1000000;writeVarLong(millis);writeVarLong(nanos);} else {Timestamp ts=v.getTimestamp();writeByte((byte)type);writeVarLong(DateTimeUtils.getTimeLocalWithoutDst(ts));writeVarInt(ts.getNanos() % 1000000);}break;}case Value.JAVA_OBJECT:{writeByte((byte)type);byte[] b=v.getBytesNoCopy();int len=b.length;writeVarInt(len);write(b,0,len);break;}case Value.BYTES:{byte[] b=v.getBytesNoCopy();int len=b.length;if (len < 32) {writeByte((byte)(BYTES_0_31 + len));write(b,0,len);} else {writeByte((byte)type);writeVarInt(len);write(b,0,len);}break;}case Value.UUID:{writeByte((byte)type);ValueUuid uuid=(ValueUuid)v;writeLong(uuid.getHigh());writeLong(uuid.getLow());break;}case Value.STRING:{String s=v.getString();int len=s.length();if (len < 32) {writeByte((byte)(STRING_0_31 + len));writeStringWithoutLength(s,len);} else {writeByte((byte)type);writeString(s);}break;}case Value.STRING_IGNORECASE:case Value.STRING_FIXED:writeByte((byte)type);writeString(v.getString());break;case Value.DOUBLE:{double x=v.getDouble();if (x == 1.0d) {writeByte((byte)(DOUBLE_0_1 + 1));} else {long d=Double.doubleToLongBits(x);if (d == ValueDouble.ZERO_BITS) {writeByte((byte)DOUBLE_0_1);} else {writeByte((byte)type);writeVarLong(Long.reverse(d));}}break;}case Value.FLOAT:{float x=v.getFloat();if (x == 1.0f) {writeByte((byte)(FLOAT_0_1 + 1));} else {int f=Float.floatToIntBits(x);if (f == ValueFloat.ZERO_BITS) {writeByte((byte)FLOAT_0_1);} else {writeByte((byte)type);writeVarInt(Integer.reverse(f));}}break;}case Value.BLOB:case Value.CLOB:{writeByte((byte)type);if (v instanceof ValueLob) {ValueLob lob=(ValueLob)v;lob.convertToFileIfRequired();byte[] small=lob.getSmall();if (small == null) {int t=-1;if (!lob.isLinked()) {t=-2;}writeVarInt(t);writeVarInt(lob.getTableId());writeVarInt(lob.getObjectId());writeVarLong(lob.getPrecision());if (t == -2) {writeString(lob.getFileName());}} else {writeVarInt(small.length);write(small,0,small.length);}} else {ValueLobDb lob=(ValueLobDb)v;byte[] small=lob.getSmall();if (small == null) {writeVarInt(-3);writeVarInt(lob.getTableId());writeVarLong(lob.getLobId());writeVarLong(lob.getPrecision());} else {writeVarInt(small.length);write(small,0,small.length);}}break;}case Value.ARRAY:{writeByte((byte)type);Value[] list=((ValueArray)v).getList();writeVarInt(list.length);for (Value x : list) {writeValue(x);}break;}case Value.RESULT_SET:{writeByte((byte)type);try {ResultSet rs=v.getResultSet();rs.beforeFirst();ResultSetMetaData meta=rs.getMetaData();int columnCount=meta.getColumnCount();writeVarInt(columnCount);for (int i=0; i < columnCount; i++) {writeString(meta.getColumnName(i + 1));writeVarInt(meta.getColumnType(i + 1));writeVarInt(meta.getPrecision(i + 1));writeVarInt(meta.getScale(i + 1));}while (rs.next()) {writeByte((byte)1);for (int i=0; i < columnCount; i++) {int t=DataType.getValueTypeFromResultSet(meta,i + 1);Value val=DataType.readValue(null,rs,i + 1,t);writeValue(val);}}writeByte((byte)0);rs.beforeFirst();} catch (SQLException e) {throw DbException.convert(e);}break;}default :DbException.throwInternalError("type=" + v.getType());}if (SysProperties.CHECK2) {if (pos - start != getValueLen(v)) {throw DbException.throwInternalError("value size error: got " + (pos - start) + " expected "+ getValueLen(v));}}}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public boolean allowPrimary(){  return this.allowPrimary;}  }
class C{  public void revokeAdmin(Collection<String> jids) throws XMPPException {  changeAffiliationByOwner(jids,"member");}  }
class C{  public boolean containsKey(Object key){  int hash=getHash(key);  return getSegment(hash).containsKey(key,hash);}  }
class C{  protected void removeAllCurrentDownloads(){  Log.i(LOG_TAG,"Removing all current registered downloads...");  ArrayList<Long> ids=new ArrayList<Long>();  Cursor cursor=mDownloadManager.query(new Query());  try {    if (cursor.moveToFirst()) {      do {        int index=cursor.getColumnIndex(DownloadManager.COLUMN_ID);        long downloadId=cursor.getLong(index);        ids.add(downloadId);      } while (cursor.moveToNext());    }  }  finally {    cursor.close();  }  for (  long id : ids) {    mDownloadManager.remove(id);  }  cursor=mDownloadManager.query(new Query());  try {    assertEquals(0,cursor.getCount());  }  finally {    cursor.close();  }}  }
class C{  public boolean clearCart(){  this.cart.clear();  return true;}  }
class C{  void remove(){  active=false;}  }
class C{  public Message authResponse(ParameterList requestParams,String userSelId,String userSelClaimed,boolean authenticatedAndApproved,String opEndpoint,boolean signNow){  _log.info("Parsing authentication request...");  AuthRequest authReq;  boolean isVersion2=Message.OPENID2_NS.equals(requestParams.getParameterValue("openid.ns"));  try {    authReq=AuthRequest.createAuthRequest(requestParams,_realmVerifier);    return authResponse(authReq,userSelId,userSelClaimed,authenticatedAndApproved,opEndpoint,signNow);  } catch (  MessageException e) {    if (requestParams.hasParameter("openid.return_to")) {      _log.error("Invalid authentication request; " + "responding with an indirect error message.",e);      return IndirectError.createIndirectError(e,requestParams.getParameterValue("openid.return_to"),!isVersion2);    } else {      _log.error("Invalid authentication request; " + "responding with a direct error message.",e);      return DirectError.createDirectError(e,!isVersion2);    }  }}  }
class C{  public static Result oldHelp(){  return getHelp(Version.OLD);}  }
class C{  public Expression order(){  if (precedence() >= left.precedence()) {    UnaryExpression e=(UnaryExpression)left;    left=e.right;    e.right=order();    return e;  }  return this;}  }
class C{  protected String generateLabelString(CategoryDataset dataset,int row,int column){  ParamChecks.nullNotPermitted(dataset,"dataset");  String result;  Object[] items=createItemArray(dataset,row,column);  result=MessageFormat.format(this.labelFormat,items);  return result;}  }
class C{  public BlackVolatilityTermStructure(final int settlementDays,final Calendar cal,final BusinessDayConvention bdc){  super(settlementDays,cal,bdc,new DayCounter());}  }
class C{  public float adjustWidth(float width){switch (font.style) {case ITALIC:    return width + emwidth / 8;case BOLD_ITALIC:  return width + emwidth / 6;default :return width;}}  }
class C{  public void paintTabbedPaneTabBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int tabIndex,int orientation){  if (orientation == JTabbedPane.LEFT) {    AffineTransform transform=new AffineTransform();    transform.scale(-1,1);    transform.rotate(Math.toRadians(90));    paintBackground(context,g,y,x,h,w,transform);  } else   if (orientation == JTabbedPane.RIGHT) {    AffineTransform transform=new AffineTransform();    transform.rotate(Math.toRadians(90));    transform.translate(0,-(x + w));    paintBackground(context,g,y,0,h,w,transform);  } else   if (orientation == JTabbedPane.BOTTOM) {    AffineTransform transform=new AffineTransform();    transform.translate(x,y);    transform.scale(1,-1);    transform.translate(0,-h);    paintBackground(context,g,0,0,w,h,transform);  } else {    paintBackground(context,g,x,y,w,h,null);  }}  }
class C{  public void removeBytes(int offset,int len){  replaceBytes(offset,len,null);}  }
class C{  public boolean isNamespaceAware(){  return getFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES);}  }
class C{  public static int uniform(int a,int b){  if (b <= a)   throw new IllegalArgumentException("Invalid range");  if ((long)b - a >= Integer.MAX_VALUE)   throw new IllegalArgumentException("Invalid range");  return a + uniform(b - a);}  }
class C{  public Timex3Interval_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_TimexValueEB=jcas.getRequiredFeatureDE(casType,"TimexValueEB","uima.cas.String",featOkTst);  casFeatCode_TimexValueEB=(null == casFeat_TimexValueEB) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_TimexValueEB).getCode();  casFeat_TimexValueLE=jcas.getRequiredFeatureDE(casType,"TimexValueLE","uima.cas.String",featOkTst);  casFeatCode_TimexValueLE=(null == casFeat_TimexValueLE) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_TimexValueLE).getCode();  casFeat_TimexValueEE=jcas.getRequiredFeatureDE(casType,"TimexValueEE","uima.cas.String",featOkTst);  casFeatCode_TimexValueEE=(null == casFeat_TimexValueEE) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_TimexValueEE).getCode();  casFeat_TimexValueLB=jcas.getRequiredFeatureDE(casType,"TimexValueLB","uima.cas.String",featOkTst);  casFeatCode_TimexValueLB=(null == casFeat_TimexValueLB) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_TimexValueLB).getCode();  casFeat_emptyValue=jcas.getRequiredFeatureDE(casType,"emptyValue","uima.cas.String",featOkTst);  casFeatCode_emptyValue=(null == casFeat_emptyValue) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_emptyValue).getCode();  casFeat_beginTimex=jcas.getRequiredFeatureDE(casType,"beginTimex","uima.cas.String",featOkTst);  casFeatCode_beginTimex=(null == casFeat_beginTimex) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_beginTimex).getCode();  casFeat_endTimex=jcas.getRequiredFeatureDE(casType,"endTimex","uima.cas.String",featOkTst);  casFeatCode_endTimex=(null == casFeat_endTimex) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_endTimex).getCode();}  }
class C{  private int fixFontSize(float pointSize){  if (screenRes != 72) {    pointSize=(int)Math.round(pointSize * screenRes / 72.0);  }  return (int)pointSize;}  }
class C{  public span removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public void paintSpinnerBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public MpqParser(final MpqDataInput mpqDataInput) throws InvalidMpqArchiveException {  try {    this.mpqDataInput=mpqDataInput;    final byte[] magic=new byte[4];    mpqDataInput.read(ByteBuffer.wrap(magic));    if (UserData.isMpqMagicExt(magic)) {      mpqArchive.userData=readUserData();      mpqDataInput.position(mpqDataInput.position() + mpqArchive.userData.archiveHeaderOffset - (mpqArchive.userData.userDataSize + 12));      mpqDataInput.read(ByteBuffer.wrap(magic));    }    if (!Header.isMpqMagic(magic))     throw new InvalidMpqArchiveException("Invalid MPQ archive" + (mpqDataInput.getFile() == null ? "!" : ": " + mpqDataInput.getFile()));    mpqArchive.header=readHeader();    mpqArchive.blockSize=512 << mpqArchive.header.sectorSizeShift;    mpqDataInput.position(((long)mpqArchive.header.hashTableOffsetHigh << 32) + (mpqArchive.header.hashTableOffset & 0xFFFF_FFFFL) + (mpqArchive.userData == null ? 0 : mpqArchive.userData.archiveHeaderOffset));    mpqArchive.hashTables=readHashTableEntries(mpqArchive.header.hashTableEntries);    mpqDataInput.position(((long)mpqArchive.header.blockTableOffsetHigh << 32) + (mpqArchive.header.blockTableOffset & 0xFFFF_FFFFL) + (mpqArchive.userData == null ? 0 : mpqArchive.userData.archiveHeaderOffset));    mpqArchive.blockTables=readBlockTableEntries(mpqArchive.header.blockTableEntries);    if (mpqArchive.header.extendedBlockTableOffset > 0) {      mpqDataInput.position(mpqArchive.header.extendedBlockTableOffset + (mpqArchive.userData == null ? 0 : mpqArchive.userData.archiveHeaderOffset));      mpqArchive.extBlockTableHighOffsets=readExtBlockTableEntries(mpqArchive.header.blockTableEntries);    }    mpqArchive.blockTableIndices=new int[mpqArchive.header.blockTableEntries];    for (int i=0; i < mpqArchive.header.blockTableEntries; i++)     if ((mpqArchive.blockTables[i].flags & BlockTable.FLAG_FILE) != 0)     mpqArchive.blockTableIndices[mpqArchive.filesCount++]=i;  } catch (  final Exception e) {    close();    throw new InvalidMpqArchiveException(e.getMessage(),e);  }}  }
class C{  public static Set<AnnotationMirror> glbOfBounds(final AnnotatedIntersectionType isect,final QualifierHierarchy qualifierHierarchy){  Set<AnnotationMirror> result=AnnotationUtils.createAnnotationSet();  for (  final AnnotationMirror top : qualifierHierarchy.getTopAnnotations()) {    final AnnotationMirror glbAnno=glbOfBoundsInHierarchy(isect,top,qualifierHierarchy);    if (glbAnno != null) {      result.add(glbAnno);    }  }  return result;}  }
class C{  private void checkVplexConnectivity(StorageSystem storageSystem){  try {    VPlexControllerUtils.getVPlexAPIClient(VPlexApiFactory.getInstance(),storageSystem,dbClient);  } catch (  URISyntaxException ex) {    log.error("Couldn't connect to VPLEX: " + storageSystem.getLabel(),ex);  }catch (  Exception ex) {    log.error("Couldn't connect to VPLEX: " + storageSystem.getLabel(),ex);    throw ex;  }}  }
class C{  public PSPCommunicationException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public static synchronized void fdescribe(String description,SafeBlock block){  notAllowedWhenCIModeEnabled("fdescribe");  isValidContext("fdescribe");  ExampleGroupConfiguration config=new ExampleGroupConfiguration.Builder().description(description).executionFlag(FOCUSED).build();  contexts.get().current().addGroup(config,block);}  }
class C{  private void lineTo(float x,float y){  mPath.lineTo(mLastX=x,mLastY=y);}  }
class C{  @Override public int compareTo(final MapSize ms){  return area - ms.area;}  }
class C{  public void testPutAll(){  TungstenProperties tp1=new TungstenProperties();  TungstenProperties tp2=new TungstenProperties();  tp2.setString("a","a");  tp2.setString("b","b");  TungstenProperties tp3=new TungstenProperties();  tp3.setString("b","B");  tp3.setString("c","c");  tp2.putAll(tp1);  Assert.assertEquals("No change in size",2,tp2.size());  Assert.assertEquals("b is b","b",tp2.getString("b"));  tp2.putAll(tp3);  Assert.assertEquals("Added 1",3,tp2.size());  Assert.assertEquals("b is B","B",tp2.getString("b"));}  }
class C{  public Map<String,String> parse(final String str,char separator){  if (str == null) {    return new HashMap<String,String>();  }  return parse(str.toCharArray(),separator);}  }
class C{  public LineLayout(final double x,final double y,final double spacing,final LineOrientation orientation){  initialX=x;  initialY=y;  this.spacing=spacing;  this.orientation=orientation;}  }
class C{  public static void main(String[] args){  ArrayList<String> namesList=new ArrayList<String>();  namesList.add("Kelly");  namesList.add("John");  namesList.add("Peter");  namesList.add("Rose");  for (Iterator<String> i=namesList.iterator(); i.hasNext(); ) {    String name=i.next();    if (name.equals("Peter")) {      namesList.remove(name);    } else {      System.out.println(name);    }  }}  }
class C{  public void addRegExp(int regExpNum){  if (Options.DEBUG)   Out.debug("Adding nfa for regexp " + regExpNum + " :"+ Out.NL+ regExps.getRegExp(regExpNum));  IntPair nfa=insertNFA(regExps.getRegExp(regExpNum));  List<Integer> lexStates=regExps.getStates(regExpNum);  if (lexStates.isEmpty())   lexStates=scanner.states.getInclusiveStates();  for (  Integer stateNum : lexStates) {    if (!regExps.isBOL(regExpNum))     addEpsilonTransition(2 * stateNum,nfa.start);    addEpsilonTransition(2 * stateNum + 1,nfa.start);  }  if (regExps.getLookAhead(regExpNum) != null) {    Action a=regExps.getAction(regExpNum);    if (a.lookAhead() == Action.FINITE_CHOICE) {      insertLookAheadChoices(nfa.end,a,regExps.getLookAhead(regExpNum));      scanner.actions.remove(a);    } else {      RegExp r1=regExps.getRegExp(regExpNum);      RegExp r2=regExps.getLookAhead(regExpNum);      IntPair look=insertNFA(r2);      addEpsilonTransition(nfa.end,look.start);      action[look.end]=a;      isFinal[look.end]=true;      if (a.lookAhead() == Action.GENERAL_LOOK) {        IntPair forward=insertNFA(r1);        IntPair backward=insertNFA(r2.rev(macros));        isFinal[forward.end]=true;        action[forward.end]=new Action(Action.FORWARD_ACTION);        isFinal[backward.end]=true;        action[backward.end]=new Action(Action.BACKWARD_ACTION);        int entry=2 * (regExps.getLookEntry(regExpNum) + numLexStates);        addEpsilonTransition(entry,forward.start);        addEpsilonTransition(entry + 1,backward.start);        a.setEntryState(entry);      }    }  } else {    action[nfa.end]=regExps.getAction(regExpNum);    isFinal[nfa.end]=true;  }}  }
class C{  private DirichletBayesIm(BayesPm bayesPm,double symmetricAlpha) throws IllegalArgumentException {  this(bayesPm,null,symmetricAlpha);}  }
class C{  public static Boolean valueOf(final boolean b){  return b ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public static InheritanceTree createFromClassList(Collection<String> classNames) throws IllegalArgumentException {  if (classNames == null || classNames.isEmpty()) {    throw new IllegalArgumentException("No class name defined");  }  InheritanceTree inheritanceTree=new InheritanceTree();  for (  String className : classNames) {    if (className == null) {      throw new IllegalArgumentException("Null class name");    }    analyzeClassName(inheritanceTree,className);  }  Set<String> classes=new HashSet<>(inheritanceTree.getAllClasses());  for (  String className : classes) {    if (!classNames.contains(className))     inheritanceTree.removeClass(className);  }  return inheritanceTree;}  }
class C{  public static void addSpecialKey(String specialKeyName,int specialKeyCode){  if (SUPPORT_CSS) {    CSSEngine.addSpecialKey(specialKeyName,specialKeyCode);  } else {    System.out.println("HTMLComponent.addSpecialKey: Codename One was compiled with HTMLComponent.SUPPORT_CSS false, this method has no effect");  }}  }
class C{  public String origin(){  ensureEnabled();  return origins.isEmpty() ? "*" : origins.iterator().next();}  }
class C{  public static Collection<String> logFiles(){  Collection<String> res=new ArrayList<>(fileAppenders.size());  for (  FileAppender a : fileAppenders)   res.add(a.getFile());  return res;}  }
class C{  static void testModifyEventsQueuing(Path dir) throws IOException, InterruptedException {  final int nfiles=5 + rand.nextInt(10);  DirectoryEntry[] entries=new DirectoryEntry[nfiles];  for (int i=0; i < nfiles; i++) {    entries[i]=new DirectoryEntry(dir.resolve("foo" + i));    entries[i].deleteIfExists();    if (rand.nextBoolean())     entries[i].create();  }  try (WatchService watcher=dir.getFileSystem().newWatchService()){    dir.register(watcher,ENTRY_CREATE,ENTRY_DELETE,ENTRY_MODIFY);    for (int round=0; round < 10; round++) {      for (int i=0; i < 100; i++) {        DirectoryEntry entry=entries[rand.nextInt(nfiles)];        int action=rand.nextInt(10);switch (action) {case 0:          entry.create();        break;case 1:      entry.deleteIfExists();    break;default :  entry.modifyIfExists();}}WatchKey key=watcher.poll(15,TimeUnit.SECONDS);while (key != null) {Set<Path> modified=new HashSet<>();for (WatchEvent<?> event : key.pollEvents()) {WatchEvent.Kind<?> kind=event.kind();Path file=(kind == OVERFLOW) ? null : (Path)event.context();if (kind == ENTRY_MODIFY) {  boolean added=modified.add(file);  if (!added) {    throw new RuntimeException("ENTRY_MODIFY events not queued efficiently");  }} else {  if (file != null)   modified.remove(file);}}if (!key.reset()) throw new RuntimeException("Key is no longer valid");key=watcher.poll(2,TimeUnit.SECONDS);}}} }  }
class C{  public static JSONObject toJSONObject(String string) throws JSONException {  JSONObject jo=new JSONObject();  XMLTokener x=new XMLTokener(string);  while (x.more() && x.skipPast("<")) {    parse(x,jo,null);  }  return jo;}  }
class C{  public static SecurityGroup toApiRepresentation(SecurityGroupEntity entity){  return new SecurityGroup(entity.getName(),entity.isInherited());}  }
class C{  protected boolean onToolRightClick(GlowPlayer player,GlowBlock target,BlockFace face,ItemStack holding,Vector clickedLoc){  return false;}  }
class C{  static public ItemStack chiselBlock(final IContinuousInventory selected,final ActingPlayer player,final VoxelBlob vb,final World world,final BlockPos pos,final EnumFacing side,final int x,final int y,final int z,ItemStack output,final List<EntityItem> spawnlist){  final boolean isCreative=player.isCreative();  final int blk=vb.get(x,y,z);  if (blk == 0) {    return output;  }  if (!canMine(selected,Block.getStateById(blk),player.getPlayer(),world,pos)) {    return output;  }  selected.useItem(blk);  final boolean spawnBit=ChiselsAndBits.getItems().itemBlockBit != null;  if (!world.isRemote && !isCreative) {    double hitX=x * one_16th;    double hitY=y * one_16th;    double hitZ=z * one_16th;    final double offset=0.5;    hitX+=side.getFrontOffsetX() * offset;    hitY+=side.getFrontOffsetY() * offset;    hitZ+=side.getFrontOffsetZ() * offset;    if (output == null || !ItemChiseledBit.sameBit(output,blk) || output.stackSize == 64) {      output=ItemChiseledBit.createStack(blk,1,true);      if (spawnBit) {        spawnlist.add(new EntityItem(world,pos.getX() + hitX,pos.getY() + hitY,pos.getZ() + hitZ,output));      }    } else {      output.stackSize++;    }  } else {    output=ItemChiseledBit.createStack(blk,1,true);  }  vb.clear(x,y,z);  return output;}  }
class C{  public double[] apply(double[] v){  return unhomogeneVector(times(trans,homogeneVector(v)));}  }
class C{  public void run(){  while (!interrupted) {    boolean EOM=false;    boolean wasRunning=running;    isPumping=!interrupted && running;    while (!EOM && !interrupted && running) {      EOM=dataPump.pump();      try {        Thread.sleep(1);      } catch (      InterruptedException ie) {      }    }    if (Printer.debug) {      Printer.debug("Exited main pump loop because: ");      if (EOM)       Printer.debug(" -> EOM is reached");      if (!running)       Printer.debug(" -> running was set to false");      if (interrupted)       Printer.debug(" -> interrupted was set to true");    }    playThreadImplStop();    if (wasRunning) {      dataPump.notesOff(true);    }    if (EOM) {      dataPump.setTickPos(sequence.getTickLength());      MetaMessage message=new MetaMessage();      try {        message.setMessage(MidiUtils.META_END_OF_TRACK_TYPE,new byte[0],0);      } catch (      InvalidMidiDataException e1) {      }      sendMetaEvents(message);    }synchronized (lock) {      isPumping=false;      lock.notifyAll();      while (!running && !interrupted) {        try {          lock.wait();        } catch (        Exception ex) {        }      }    }  }  if (Printer.debug)   Printer.debug("end of play thread");}  }
class C{  public Dot(final Context context,final AttributeSet attrs){  super(context,attrs);  init(attrs,0,0);}  }
class C{  static boolean implementsInterface(Class<?> i,Class<?> target){  if (i.equals(target)) {    return true;  }  boolean rtn=false;  Class<?>[] superInterfaces=i.getInterfaces();  for (  Class<?> superInterface : superInterfaces) {    rtn=rtn || implementsInterface(superInterface,target);  }  return rtn;}  }
class C{  private static Map<SignatureLibrary,Set<Job>> clusterJobsBySignatureLibrary(List<Job> jobs){  Map<SignatureLibrary,Set<Job>> result=new HashMap<SignatureLibrary,Set<Job>>();  for (  Job job : jobs) {    SignatureLibraryRelease release=job.getLibraryRelease();    if (release != null) {      SignatureLibrary library=release.getLibrary();      Set<Job> jobsForLibrary=result.get(library);      if (jobsForLibrary == null) {        jobsForLibrary=new HashSet<Job>();      }      jobsForLibrary.add(job);      result.put(library,jobsForLibrary);    }  }  return result;}  }
class C{  @BeforeMethod void beforeMethod() throws Throwable {  serializer=new Serializer();  serializer.resolve(new ClientRequestTypeResolver(),new ClientResponseTypeResolver(),new ProtocolSerialization(),new ServerSerialization(),new StorageSerialization()).disableWhitelist();  storage=new Storage(StorageLevel.MEMORY);  members=createMembers(3);  transport=new LocalTransport(new LocalServerRegistry());  serverCtx=new SingleThreadContext("test-server",serializer);  new SingleThreadContext("test",serializer.clone()).executor().execute(null);  await(1000);}  }
class C{  public void start(){  Clip clip;  if ((clip=getClip()) == null || clip.isActive())   return;  BooleanControl muteControl=(BooleanControl)clip.getControl(BooleanControl.Type.MUTE);  FloatControl gainControl=(FloatControl)clip.getControl(FloatControl.Type.MASTER_GAIN);  gainControl.setValue(-80.0f);  clip.loop(Clip.LOOP_CONTINUOUSLY);  for (float gain=-30.0f; gain < 0.0f; gain+=6.0f)   try {    muteControl.setValue(true);    gainControl.setValue(gain);    muteControl.setValue(false);    Thread.sleep(600);  } catch (  InterruptedException e) {  }}  }
class C{  public Vector4f(float x,float y,float z,float w){  this.points[0]=x;  this.points[1]=y;  this.points[2]=z;  this.points[3]=w;}  }
class C{  @SuppressWarnings("unchecked") protected String doIt() throws Exception {  MViewDefinition join=new MViewDefinition(getCtx(),p_Record_ID,get_TrxName());  for (  MColumn attr : join.getEntityAttributes()) {    MViewColumn column=MViewColumn.get(join,attr);    if (column != null)     continue;    column=new MViewColumn(attr);    column.setAD_View_Definition_ID(join.getAD_View_Definition_ID());    column.setColumnSQL(join.getTableAlias() + "." + attr.getColumnName());    column.setColumnName(join.getTableAlias().toUpperCase() + "_" + attr.getColumnName());    column.setEntityType(join.getAD_View().getEntityType());    column.setAD_View_ID(join.getAD_View_ID());    column.saveEx();    addLog(attr.getColumnName());  }  return "@Ok@";}  }
class C{  private void listEntries(ContactsExampleParameters parameters) throws IOException, ServiceException {  if (parameters.isGroupFeed()) {    ContactGroupFeed groupFeed=service.getFeed(feedUrl,ContactGroupFeed.class);    System.err.println(groupFeed.getTitle().getPlainText());    for (    ContactGroupEntry entry : groupFeed.getEntries()) {      printGroup(entry);    }    System.err.println("Total: " + groupFeed.getEntries().size() + " groups found");  } else {    ContactFeed resultFeed=service.getFeed(feedUrl,ContactFeed.class);    System.err.println(resultFeed.getTitle().getPlainText());    for (    ContactEntry entry : resultFeed.getEntries()) {      printContact(entry);      Link photoLink=entry.getLink("http://schemas.google.com/contacts/2008/rel#photo","image/*");      if (photoLink.getEtag() != null) {        Service.GDataRequest request=service.createLinkQueryRequest(photoLink);        request.execute();        InputStream in=request.getResponseStream();        ByteArrayOutputStream out=new ByteArrayOutputStream();        RandomAccessFile file=new RandomAccessFile("/tmp/" + entry.getSelfLink().getHref().substring(entry.getSelfLink().getHref().lastIndexOf('/') + 1),"rw");        byte[] buffer=new byte[4096];        for (int read=0; (read=in.read(buffer)) != -1; out.write(buffer,0,read)) {        }        file.write(out.toByteArray());        file.close();        in.close();        request.end();      }    }    System.err.println("Total: " + resultFeed.getEntries().size() + " entries found");  }}  }
class C{  public void unregisterInterestRegistrationListener(InterestRegistrationListener listener){  final String s=LocalizedStrings.RemoteBridgeServer_INTERESTREGISTRATIONLISTENERS_CANNOT_BE_UNREGISTERED_FROM_A_REMOTE_BRIDGESERVER.toLocalizedString();  throw new UnsupportedOperationException(s);}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener l){  if (listeners == null) {    listeners=new ArrayList<PropertyChangeListener>(2);  }  if (!listeners.contains(l)) {    listeners.add(l);  }}  }
class C{  protected void updateIntensityHigh(double intensity){  notifyTargetIntensityChange(intensity);  setState(ON);}  }
class C{  public static Set<String> toSet(List<String> list,Comparator<String> comparator){  Set<String> set;  if (comparator == null)   set=new LinkedHashSet<>(); else   set=new TreeSet<>(comparator);  set.addAll(list);  return set;}  }
class C{  private static int indexOf(int fromIndex,CharSequence csq){  if (csq == null)   return 0;  int length=csq.length();  int j=fromIndex;  int i=(j < length) ? csq.charAt(j++) : 0;  i<<=16;  i|=(j < length) ? csq.charAt(j++) : 0;  return i;}  }
class C{  @Override public boolean isBorderOpaque(){  return false;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void addSubTree(Node parent,int index,List<Node> children){  List<NodeDescriptor> nodeDescriptors=convertTreeNodesHelper(children);  getWrapper(parent).addChildren(index,nodeDescriptors);  List<Node> nodes=new ArrayList<>();  for (  NodeDescriptor child : nodeDescriptors) {    nodes.add(child.getNode());  }  if (!nodes.isEmpty()) {    fireEvent(new StoreAddEvent(index,nodes));  }}  }
class C{  public void checkLFCaching(MethodHandle adapter1,MethodHandle adapter2){  try {    if (!adapter1.type().equals(adapter2.type())) {      throw new Error("TESTBUG: Types of the two method handles are not the same");    }    Object lambdaForm0=LambdaFormTestCase.INTERNAL_FORM.invoke(adapter1);    Object lambdaForm1=LambdaFormTestCase.INTERNAL_FORM.invoke(adapter2);    if (lambdaForm0 == null || lambdaForm1 == null) {      throw new Error("Unexpected error: One or both lambda forms of the method handles are null");    }    if (lambdaForm0 != lambdaForm1) {      if (noGCHappened()) {        System.err.println("Lambda form 0 toString is:");        System.err.println(lambdaForm0);        System.err.println("Lambda form 1 toString is:");        System.err.println(lambdaForm1);        throw new AssertionError("Error: Lambda forms of the two method handles" + " are not the same. LF cahing does not work");      } else {        System.err.println("LambdaForms differ, but there was a GC in between. Ignore the failure.");      }    }  } catch (  IllegalAccessException|IllegalArgumentException|SecurityException|InvocationTargetException ex) {    throw new Error("Unexpected exception",ex);  }}  }
class C{  public void mouseClicked(MouseEvent evt){  if (evt.isPopupTrigger()) {    if (this.isEnabled()) {      createPopup(evt.getPoint());    }  }}  }
class C{  public void forEachSrc(Allocation ain,Allocation aout){  blend(1,ain,aout);}  }
class C{  public String first(){  append("FIRST PAGE button pressed");  scroll(0);  return (null);}  }
class C{  public void testNextIntBounded2(){  SplittableRandom sr=new SplittableRandom();  for (int least=-15485863; least < MAX_INT_BOUND; least+=524959) {    for (int bound=least + 2; bound > least && bound < MAX_INT_BOUND; bound+=49979687) {      int f=sr.nextInt(least,bound);      assertTrue(least <= f && f < bound);      int i=0;      int j;      while (i < NCALLS && (j=sr.nextInt(least,bound)) == f) {        assertTrue(least <= j && j < bound);        ++i;      }      assertTrue(i < NCALLS);    }  }}  }
class C{  public AsyncResult UnregisterNodesAsync(RequestHeader RequestHeader,NodeId... NodesToUnregister){  UnregisterNodesRequest req=new UnregisterNodesRequest(RequestHeader,NodesToUnregister);  return channel.serviceRequestAsync(req);}  }
class C{  public UserActiveException(String message,Object[] params){  super(message,params);}  }
class C{  public static void writeByteArray(DataOutput out,@Nullable byte[] arr) throws IOException {  if (arr == null)   out.writeInt(-1); else {    out.writeInt(arr.length);    out.write(arr);  }}  }
class C{  private void addOracleDescriptor() throws IOException, JDOMException {  InputStream in=null;  try {    in=getResource("WEB-INF/orion-web.xml");    if (in != null) {      OrionWebXml descr=OrionWebXmlIo.parseOrionXml(in);      if (descr != null) {        this.webXml.addVendorDescriptor(descr);      }    }  }  finally {    if (in != null) {      in.close();    }  }}  }
class C{  public samp addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  @Override public QueryResponse query(SolrParams params,METHOD method) throws SolrServerException, IOException {  if (this.solr0 != null)   return this.solr0.query(params,method);  if (this.solr1 != null)   return this.solr1.query(params,method);  return null;}  }
class C{  private T[] ensureCapacity(int minCapacity){  if (tmp.length < minCapacity) {    int newSize=minCapacity;    newSize|=newSize >> 1;    newSize|=newSize >> 2;    newSize|=newSize >> 4;    newSize|=newSize >> 8;    newSize|=newSize >> 16;    newSize++;    if (newSize < 0)     newSize=minCapacity; else     newSize=Math.min(newSize,a.length >>> 1);    @SuppressWarnings({"unchecked","UnnecessaryLocalVariable"}) T[] newArray=(T[])new Object[newSize];    tmp=newArray;  }  return tmp;}  }
class C{  public static <T1,T2,T3,T4,R>Promise<R> join(Promise<T1> p1,Promise<T2> p2,Promise<T3> p3,Promise<T4> p4,final Func4<T1,T2,T3,T4,R> joinFunction){  return new Promise<R>(Observable.zip(p1.observable,p2.observable,p3.observable,p4.observable,joinFunction));}  }
class C{  protected void minimize(){  if (delegate != null) {    delegate.minimize();  }}  }
class C{  protected CCEaseAction(CCIntervalAction action){  super(action.getDuration());  other=action;}  }
class C{  public static Operation fromOrdinal(byte ordinal){  return VALUES[ordinal];}  }
class C{  protected AlgorithmParameters engineGenerateParameters(){  AlgorithmParameters algParams=null;  if (this.exponentSize == 0) {    this.exponentSize=this.primeSize - 1;  }  if (this.random == null)   this.random=SunJCE.getRandom();  try {    AlgorithmParameterGenerator paramGen;    DSAParameterSpec dsaParamSpec;    paramGen=AlgorithmParameterGenerator.getInstance("DSA");    paramGen.init(this.primeSize,random);    algParams=paramGen.generateParameters();    dsaParamSpec=algParams.getParameterSpec(DSAParameterSpec.class);    DHParameterSpec dhParamSpec;    if (this.exponentSize > 0) {      dhParamSpec=new DHParameterSpec(dsaParamSpec.getP(),dsaParamSpec.getG(),this.exponentSize);    } else {      dhParamSpec=new DHParameterSpec(dsaParamSpec.getP(),dsaParamSpec.getG());    }    algParams=AlgorithmParameters.getInstance("DH",SunJCE.getInstance());    algParams.init(dhParamSpec);  } catch (  InvalidParameterSpecException e) {    throw new RuntimeException(e.getMessage());  }catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e.getMessage());  }  return algParams;}  }
class C{  public static PublicKey generatePublicKey(String encodedPublicKey){  try {    byte[] decodedKey=Base64.decode(encodedPublicKey);    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }catch (  InvalidKeySpecException e) {    Log.e(TAG,"Invalid key specification.");    throw new IllegalArgumentException(e);  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");    throw new IllegalArgumentException(e);  }}  }
class C{  public boolean isValid(){  return System.currentTimeMillis() < creationTime + lifetime + (lifetime / 4);}  }
class C{  public V remove(Object o){  if (!(o instanceof List))   return null;  List<K> k=(List<K>)o;  final K first=k.get(0);  if (k.size() == 1) {    final Trie<K,V> remove=map.get(first);    if (remove == null)     return null;    remove.v=null;    if (remove.isEmpty())     map.remove(first);    return null;  }  final Trie<K,V> trie=map.get(first);  if (trie == null)   return null;  trie.remove(k.subList(1,k.size()));  if (trie.isEmpty() && trie.v == null)   map.remove(first);  return null;}  }
class C{  @Override public synchronized void remove(String key){  boolean deleted=getFileForKey(key).delete();  removeEntry(key);  if (!deleted) {    VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",key,getFilenameForKey(key));  }}  }
class C{  public void organizeTypeAnnotationsBodies(JCClassDecl tree){  new TypeAnnotationPositions(false).scan(tree);}  }
class C{  @Override protected RedisClient retrieve(){  JsonObject result=record().getMetadata().copy();  result.mergeIn(record().getLocation());  if (config != null) {    result.mergeIn(config);  }  return RedisClient.create(vertx,new RedisOptions(result));}  }
class C{  public void lock(){  buffer.flush().writeBoolean(16,true).flush();  locked=true;}  }
class C{  public FakeClock(){  this(START_OF_TIME);}  }
class C{  public List<DecoderFile> matchingDecoderList(String mfg,String family,String decoderMfgID,String decoderVersionID,String decoderProductID,String model){  return (matchingDecoderList(mfg,family,decoderMfgID,decoderVersionID,decoderProductID,model,null));}  }
class C{  public static Network loadNetwork(MutableScenario sc){  String facilitiesPath="test/input/playground/wrashid/parkingSearch/planLevel/chessFacilities.xml";  String networkFile="test/input/playground/wrashid/parkingSearch/planLevel/network.xml";  String inputPlansFile="test/input/playground/wrashid/parkingSearch/planLevel/chessPlans2.xml";  new MatsimFacilitiesReader(sc).readFile(facilitiesPath);  MatsimReader popReader=new PopulationReader(sc);  popReader.readFile(inputPlansFile);  new MatsimNetworkReader(sc.getNetwork()).readFile(networkFile);  return sc.getNetwork();}  }
class C{  public Constraint heightPercentage(int height){  this.height=height;  return this;}  }
class C{  public void addInterfaceDescription(String description){  findAttributeValues(LinkFormat.INTERFACE_DESCRIPTION).add(description);}  }
class C{  public void forgetBeans(){  mBeans.clear();}  }
class C{  @Override public <T>T unwrap(Class<T> iface) throws SQLException {  throw unsupported("unwrap");}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Boolean isDiskUuidEnabled(){  return diskUuidEnabled;}  }
class C{  public Model offsetWS(Vec3UV offset){  for (  Box box : this.modelBoxes) {    for (    Quad quad : box.quads) {      for (int i=0; i < 4; i++) {        Vec3UV vec=quad.vertices[i];        vec.x+=offset.x;        vec.y+=offset.y;        vec.z+=offset.z;      }    }  }  return this;}  }
class C{  public void veryverbose(CharSequence message,Throwable e){  log(Level.VERYVERBOSE,message,e);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:32.731 -0500",hash_original_method="80DDF5AC1394722FFD3DB956063197F8",hash_generated_method="2356D507E2722697A2CB39BCE5AF7681") public void removeParameter(String name){  uriParms.delete(name);}  }
class C{  public byte[] encode(){  char type=getAttributeType();  byte[] binValue=new byte[HEADER_LENGTH + getDataLength()];  binValue[0]=(byte)(type >> 8);  binValue[1]=(byte)(type & 0x00FF);  binValue[2]=(byte)(getDataLength() >> 8);  binValue[3]=(byte)(getDataLength() & 0x00FF);  binValue[4]=(byte)((priority & 0xFF000000L) >> 24);  binValue[5]=(byte)((priority & 0x00FF0000L) >> 16);  binValue[6]=(byte)((priority & 0x0000FF00L) >> 8);  binValue[7]=(byte)(priority & 0x000000FFL);  return binValue;}  }
class C{  public static <S>Comparator<Pair<S,?>> comparatorOfFirsts(Comparator<S> comparator){  return new FirstComparator<S>(comparator);}  }
class C{  public void addMsgWaiting(MwiType type,int count){  addMsgWaiting(type,count,MwiProfile.ID_1,false);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public DLSequence(ASN1Encodable[] array){  super(array);}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.paint=SerialUtilities.readPaint(stream);  this.stroke=SerialUtilities.readStroke(stream);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:46.956 -0500",hash_original_method="2AE2D90F3BED583D61A7D72DDE9D78E7",hash_generated_method="2AE2D90F3BED583D61A7D72DDE9D78E7") void add(View view){  final int id=view.getId();  final Node node=Node.acquire(view);  if (id != View.NO_ID) {    mKeyNodes.put(id,node);  }  mNodes.add(node);}  }
class C{  public final void sendNotice(String target,String notice){  _outQueue.add("NOTICE " + target + " :"+ notice);}  }
class C{  private void verifyContainingType(FieldDescriptor field){  if (field.getContainingType() != type) {    throw new IllegalArgumentException("FieldDescriptor does not match message type.");  }}  }
class C{  public boolean process(Trace trace,Node node,Direction direction,Map<String,?> headers,Object[] values){  if (issues != null) {    node.getIssues().addAll(issues);  }  if (predicate != null) {    return predicate.test(trace,node,direction,headers,values);  }  return true;}  }
class C{  public JSONArray(){}  }
class C{  public EliasFanoLongBigList(final ShortIterator iterator){  this(LongIterators.wrap(iterator));}  }
class C{  protected void doBefore(){}  }
class C{  public GuacamoleInsufficientCredentialsException(Throwable cause,CredentialsInfo credentialsInfo){  super(cause,credentialsInfo);}  }
class C{  public static QueryBuilder<ParsedBooleanQuery> ask(){  return new AbstractQueryBuilder<ParsedBooleanQuery>(new ParsedBooleanQuery());}  }
class C{  static <T>T[] arraysCopyOf(T[] original,int newLength){  T[] copy=newArray(original,newLength);  System.arraycopy(original,0,copy,0,Math.min(original.length,newLength));  return copy;}  }
class C{  public List makeListTipoNorma(){  List listaTiposNorma=new ArrayList();  PropertyBean propertyBean=new PropertyBean();  propertyBean.setValue(String.valueOf(TipoNorma.SIN_TIPO));  propertyBean.setLabel(TipoNorma.NINGUNO);  listaTiposNorma.add(propertyBean);  propertyBean=new PropertyBean();  propertyBean.setValue(String.valueOf(TipoNorma.NORMA_ISADG));  propertyBean.setLabel(TipoNorma.ISADG);  listaTiposNorma.add(propertyBean);  propertyBean=new PropertyBean();  propertyBean.setValue(String.valueOf(TipoNorma.NORMA_ISAAR));  propertyBean.setLabel(TipoNorma.ISAAR);  listaTiposNorma.add(propertyBean);  return listaTiposNorma;}  }
class C{  protected Expression or(int opPos) throws TransformerException {  return compileOperation(new Or(),opPos);}  }
class C{  public static void showShareMore(Activity context,final String title,final String url){  Intent intent=new Intent(Intent.ACTION_SEND);  intent.setType("text/plain");  intent.putExtra(Intent.EXTRA_SUBJECT,"Share: " + title);  intent.putExtra(Intent.EXTRA_TEXT,title + " " + url);  context.startActivity(Intent.createChooser(intent,"Choose to share"));}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  private CalendarEntity(){}  }
class C{  public final int length(){  return array.length;}  }
class C{  public LinkOMGraphicList(int initialCapacity){  super(initialCapacity);}  }
class C{  @Override public String toString(){  return "StatAlertsManagerAssignRequest from " + this.getSender();}  }
class C{  public ScriptNotFoundException(String message){  super(message);}  }
class C{  public void prune() throws Exception {  Evaluation nodeModelEval=null;  if (m_isLeaf) {    buildLinearModel(m_indices);    nodeModelEval=new Evaluation(m_instances);    nodeModelEval.evaluateModel(m_nodeModel,m_instances);    m_rootMeanSquaredError=nodeModelEval.rootMeanSquaredError();  } else {    if (m_left != null) {      m_left.prune();    }    if (m_right != null) {      m_right.prune();    }    buildLinearModel(m_indices);    nodeModelEval=new Evaluation(m_instances);    double rmsModel;    double adjustedErrorModel;    nodeModelEval.evaluateModel(m_nodeModel,m_instances);    rmsModel=nodeModelEval.rootMeanSquaredError();    adjustedErrorModel=rmsModel * pruningFactor(m_numInstances,m_nodeModel.numParameters() + 1);    Evaluation nodeEval=new Evaluation(m_instances);    double rmsSubTree;    double adjustedErrorNode;    int l_params=0, r_params=0;    nodeEval.evaluateModel(this,m_instances);    rmsSubTree=nodeEval.rootMeanSquaredError();    if (m_left != null) {      l_params=m_left.numParameters();    }    if (m_right != null) {      r_params=m_right.numParameters();    }    adjustedErrorNode=rmsSubTree * pruningFactor(m_numInstances,(l_params + r_params + 1));    if ((adjustedErrorModel <= adjustedErrorNode) || (adjustedErrorModel < (m_globalDeviation * 0.00001))) {      m_isLeaf=true;      m_right=null;      m_left=null;      m_numParameters=m_nodeModel.numParameters() + 1;      m_rootMeanSquaredError=rmsModel;    } else {      m_numParameters=(l_params + r_params + 1);      m_rootMeanSquaredError=rmsSubTree;    }  }  if (!m_saveInstances) {    m_instances=new Instances(m_instances,0);  }}  }
class C{  private void initialize(String xmlData,VMwareDatacenterInventory inventory) throws Exception {  hostList=new ArrayList<VMwareHost>();  storageList=new ArrayList<VMwareStorage>();  inventory.disableHostsAndStorages();  xmlConfig=new XMLHostConfiguration();  xmlConfig.load(new StringReader(xmlData));  List<HierarchicalConfiguration> hosts=xmlConfig.configurationsAt(ELEMENT_HOST);  for (  HierarchicalConfiguration host : hosts) {    String name=host.getString("[@name]");    VMwareHost vmHost=inventory.getHost(name);    if (vmHost == null) {      logger.warn("The configured host " + name + " is not available in the inventory.");    } else {      vmHost.setEnabled(host.getBoolean("[@enabled]",false));      vmHost.setMemoryLimit(VMwareValue.parse(host.getString("[@memory_limit]")));      vmHost.setCPULimit(VMwareValue.parse(host.getString("[@cpu_limit]")));      vmHost.setVMLimit(VMwareValue.parse(host.getString("[@vm_limit]")));      hostList.add(vmHost);      VMwareBalancer<VMwareStorage> stb=parseBalancer(host,StorageBalancer.class,SequentialStorageBalancer.class,inventory);      vmHost.setBalancer(stb);    }  }  List<HierarchicalConfiguration> storages=xmlConfig.configurationsAt(ELEMENT_STORAGE);  for (  HierarchicalConfiguration storage : storages) {    String name=storage.getString("[@name]");    VMwareStorage vmStorage=inventory.getStorage(name);    if (vmStorage == null) {      logger.warn("The configured storage " + name + " is not available in the inventory.");    } else {      vmStorage.setEnabled(storage.getBoolean("[@enabled]",false));      vmStorage.setLimit(VMwareValue.parse(storage.getString("[@limit]","90%")));      storageList.add(vmStorage);    }  }  balancer=parseBalancer(xmlConfig,HostBalancer.class,EquipartitionHostBalancer.class,inventory);}  }
class C{  public static void assertMinCosignatoriesModificationNotification(final Notification notification,final Account expectedMultisig,final MultisigMinCosignatoriesModification expectedModification){  final MultisigMinCosignatoriesModificationNotification n=(MultisigMinCosignatoriesModificationNotification)notification;  Assert.assertThat(n.getType(),IsEqual.equalTo(NotificationType.MinCosignatoriesModification));  Assert.assertThat(n.getMultisigAccount(),IsEqual.equalTo(expectedMultisig));  Assert.assertThat(n.getModification(),IsEqual.equalTo(expectedModification));}  }
class C{  public static BufferedWriter newWriter(File file,boolean append) throws IOException {  return new BufferedWriter(new FileWriter(file,append));}  }
class C{  private static boolean isActivityCanceled(int resultCode,Intent data){  if (resultCode == Activity.RESULT_CANCELED)   return true;  if (data == null || data.getData() == null) {    LOG.i("No data for form result, probably cancelled.");    return true;  }  return false;}  }
class C{  @Override public boolean canChildScrollUp(){  return this.webView.getScrollY() > 0;}  }
class C{  private HttpResponse executeHead(String bucketName,String objectName) throws InvalidBucketNameException, NoSuchAlgorithmException, InsufficientDataException, IOException, InvalidKeyException, NoResponseException, XmlPullParserException, ErrorResponseException, InternalException {  updateRegionCache(bucketName);  HttpResponse response=execute(Method.HEAD,BucketRegionCache.INSTANCE.region(bucketName),bucketName,objectName,null,null,null,null,0);  response.body().close();  return response;}  }
class C{  public Builder withEntryBufferSize(int entryBufferSize){  storage.entryBufferSize=Assert.arg(entryBufferSize,entryBufferSize > 0,"entryBufferSize must be positive");  return this;}  }
class C{  public CertId(DerInputStream derIn) throws IOException {  hashAlgId=AlgorithmId.parse(derIn.getDerValue());  issuerNameHash=derIn.getOctetString();  issuerKeyHash=derIn.getOctetString();  certSerialNumber=new SerialNumber(derIn);}  }
class C{  public boolean removeLastOccurrence(Object o){  if (o == null)   return false;  int mask=elements.length - 1;  int i=(tail - 1) & mask;  Object x;  while ((x=elements[i]) != null) {    if (o.equals(x)) {      delete(i);      return true;    }    i=(i - 1) & mask;  }  return false;}  }
class C{  public Vec2D(Vec2D clone){  this(clone.x(),clone.y());}  }
class C{  public void removeExtension(Extension ext){  nonRepeatingExtensionMap.remove(ext.getClass());}  }
class C{  public boolean isLSBAccess(){  return !MSBAccess;}  }
class C{  private static void addValidatorsToComponent(FacesContext ctx,Collection<String> validatorIds,EditableValueHolder editableValueHolder,LinkedList<ValidatorInfo> validatorStack){  if (validatorIds == null || validatorIds.isEmpty()) {    return;  }  Application application=ctx.getApplication();  Map<String,String> defaultValidatorInfo=application.getDefaultValidatorInfo();  Validator[] validators=editableValueHolder.getValidators();  for (  Map.Entry<String,String> defaultValidator : defaultValidatorInfo.entrySet()) {    for (    Validator validator : validators) {      if (defaultValidator.getValue().equals(validator.getClass().getName())) {        validatorIds.remove(defaultValidator.getKey());        break;      }    }  }  for (  String id : validatorIds) {    Validator v=application.createValidator(id);    if (validatorStack != null) {      for (int i=validatorStack.size() - 1; i >= 0; i--) {        ValidatorInfo info=validatorStack.get(i);        if (id.equals(info.getValidatorId())) {          info.applyAttributes(v);          break;        }      }    }    editableValueHolder.addValidator(v);  }}  }
class C{  public boolean isCaseSensitive(){  return caseSensitive;}  }
class C{  public Raster createChild(int x,int y,int width,int height,int x0,int y0,int[] bandList){  WritableRaster newRaster=createWritableChild(x,y,width,height,x0,y0,bandList);  return (Raster)newRaster;}  }
class C{  public void minusEquals(Complex c){  real-=c.real;  imag-=c.imag;}  }
class C{  public Bundler putSerializable(String key,Serializable value){  bundle.putSerializable(key,value);  return this;}  }
class C{  private boolean applySessionVariables(List<ReplOption> options) throws SQLException {  boolean sessionVarChange=false;  if (options != null && conn.supportsSessionVariables()) {    if (currentOptions == null)     currentOptions=new HashMap<String,String>();    for (    ReplOption statementDataOption : options) {      String optionName=statementDataOption.getOptionName();      String optionValue=statementDataOption.getOptionValue();      if (optionName.startsWith(ReplOptionParams.INTERNAL_OPTIONS_PREFIX))       continue;      if (ignoreSessionPattern != null) {        if (ignoreSessionPattern.matcher(optionName).matches()) {          if (logger.isDebugEnabled())           logger.debug("Ignoring session variable: " + optionName);          continue;        }      }      if (optionName.equals(StatementData.CREATE_OR_DROP_DB)) {        currentSchema=null;        continue;      }      String currentOptionValue=currentOptions.get(optionName);      if (currentOptionValue == null || !currentOptionValue.equalsIgnoreCase(optionValue)) {        String optionSetStatement=conn.prepareOptionSetStatement(optionName,optionValue);        if (optionSetStatement != null) {          if (logger.isDebugEnabled())           logger.debug("Issuing " + optionSetStatement);          statement.addBatch(optionSetStatement);        }        currentOptions.put(optionName,optionValue);        sessionVarChange=true;      }    }  }  return sessionVarChange;}  }
class C{  public RealFIRFilter_R_R(float[] coefficients,float gain){  super(coefficients,gain);}  }
class C{  public ContextedException(final String message){  super(message);  exceptionContext=new DefaultExceptionContext();}  }
class C{  protected Parameters(Bitmap hMapBitmap){  heightMapBitmap=hMapBitmap;}  }
class C{  static Object createObject(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {  Class factoryClass=lookUpFactoryClass(factoryId,propertiesFilename,fallbackClassName);  if (factoryClass == null) {    throw new ConfigurationError("Provider for " + factoryId + " cannot be found",null);  }  try {    Object instance=factoryClass.newInstance();    debugPrintln("created new instance of factory " + factoryId);    return instance;  } catch (  Exception x) {    throw new ConfigurationError("Provider for factory " + factoryId + " could not be instantiated: "+ x,x);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:14.419 -0500",hash_original_method="BC68EE684C76422271CAFE5D885C13B0",hash_generated_method="DD84DE362D634E6ABBF5E8C5669F17DC") private void clearRequestsList(int error,boolean loggable){  RILRequest rr;synchronized (mRequestsList) {    int count=mRequestsList.size();    if (RILJ_LOGD && loggable) {      Log.d(LOG_TAG,"WAKE_LOCK_TIMEOUT " + " mReqPending=" + mRequestMessagesPending + " mRequestList="+ count);    }    for (int i=0; i < count; i++) {      rr=mRequestsList.get(i);      if (RILJ_LOGD && loggable) {        Log.d(LOG_TAG,i + ": [" + rr.mSerial+ "] "+ requestToString(rr.mRequest));      }      rr.onError(error,null);      rr.release();    }    mRequestsList.clear();    mRequestMessagesWaiting=0;  }}  }
class C{  public final void run(){  while (shouldLive) {    System.gc();    removeOldStuff();    if (!refresh()) {      Address[] a=observer.getPeerAddresses();      if (a != null) synchronized (cache) {        for (int i=0; i < a.length; ++i)         cache.put(a[i].name,new ContributionBox(a[i],null));      }    }    for (int i=0; i < REFRESHRATE; i+=1000) {      try {        Thread.sleep(1000);      } catch (      InterruptedException e) {        shouldLive=false;      }      if (shouldLive == false)       break;      Thread.yield();    }  }  cache=null;  observer=null;}  }
class C{  public static boolean checkPermission(Context context,String permName){  int perm=context.checkCallingOrSelfPermission(permName);  return perm == PackageManager.PERMISSION_GRANTED;}  }
class C{  @Override public void updateUI(){  if (UIManager.get(getUIClassID()) != null) {    setUI((FontChooserUI)UIManager.getUI(this));  } else {    setUI(PaletteFontChooserUI.createUI(this));  }}  }
class C{  public Boolean isNpivOnNonRdmDisks(){  return npivOnNonRdmDisks;}  }
class C{  private final void encipher(int lr[],int off){  int i, n, l=lr[off], r=lr[off + 1];  l^=P[0];  for (i=0; i <= BLOWFISH_NUM_ROUNDS - 2; ) {    n=S[(l >> 24) & 0xff];    n+=S[0x100 | ((l >> 16) & 0xff)];    n^=S[0x200 | ((l >> 8) & 0xff)];    n+=S[0x300 | (l & 0xff)];    r^=n ^ P[++i];    n=S[(r >> 24) & 0xff];    n+=S[0x100 | ((r >> 16) & 0xff)];    n^=S[0x200 | ((r >> 8) & 0xff)];    n+=S[0x300 | (r & 0xff)];    l^=n ^ P[++i];  }  lr[off]=r ^ P[BLOWFISH_NUM_ROUNDS + 1];  lr[off + 1]=l;}  }
class C{  static String toString(Xid id){  if (id == null)   return "[NULL Xid]";  String s=id.getClass().getName();  s=s.substring(s.lastIndexOf('.') + 1);  s=s + " [FormatId=" + id.getFormatId()+ ", GlobalId="+ new String(id.getGlobalTransactionId()).trim()+ ", BranchQual="+ new String(id.getBranchQualifier()).trim()+ "]";  return s;}  }
class C{  @Override public String validate(Player player,RPAction action,ActionData data){  if (Jail.isInJail(player)) {    return "The strong security aura prevents you from doing that. Use /support <text> to contact an admin!";  }  return null;}  }
class C{  private int x(int x){  return x - getParent().getAbsoluteX();}  }
class C{  public static final void fillCircleFromTopLeft(GL2 gl,double sx,double sy,double w,double h){  double r=Math.min(w,h) * 0.5;  RenderUtilities.fillCircleFromCenter(gl,r,sx + r,sy - r);}  }
class C{  public static void d(String tag,String s,Object... args){  if (LDJSLOG.DEBUG >= LOGLEVEL)   Log.d(tag,String.format(s,args));}  }
class C{  public Wildcards wildcard(Wildcards.Flag flag){  int flags=flag.wildcard(this.flags);  if (flags == this.flags)   return this; else   return new Wildcards(flags);}  }
class C{  static void putToDb(Connection conn,Object key,Object val) throws SQLException {  PreparedStatement stmt=null;  try {    stmt=conn.prepareStatement(H2CacheStore.MERGE);    stmt.setBinaryStream(1,new ByteArrayInputStream(H2CacheStore.serialize(key)));    stmt.setBinaryStream(2,new ByteArrayInputStream(H2CacheStore.serialize(val)));    stmt.executeUpdate();  }  finally {    U.closeQuiet(stmt);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  double n;  double sum;  double sumOfTheSquares;  double average;  double stdDev;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  double alpha;  double globalMean;  double predefinedStdDev;  double yij=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  filterSizeX=Integer.parseInt(args[2]);  filterSizeY=Integer.parseInt(args[3]);  alpha=Double.parseDouble(args[4]);  if (alpha < 0 || alpha > 1.0) {    showFeedback("The alpha parameter should be within the range of \n0.0 and 1.0. Please reset and try again.");    return;  }  globalMean=Double.parseDouble(args[5]);  predefinedStdDev=Double.parseDouble(args[6]);  filterRounded=Boolean.parseBoolean(args[7]);  reflectAtBorders=Boolean.parseBoolean(args[8]);  if (inputHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          n=0;          sum=0;          sumOfTheSquares=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData) {              n+=filterShape[a];              sum+=z * filterShape[a];              sumOfTheSquares+=(z * filterShape[a]) * z;            }          }          if (n > 2) {            average=sum / n;            stdDev=(sumOfTheSquares / n) - (average * average);            if (stdDev > 0) {              stdDev=Math.sqrt(stdDev);              if (alpha >= 0 && alpha <= 1) {                yij=(alpha * globalMean) + ((1 - alpha) * average) + (z - average) * (predefinedStdDev / (stdDev + 1));                outputFile.setValue(row,col,yij);              }            } else {              outputFile.setValue(row,col,noData);            }          } else {            outputFile.setValue(row,col,noData);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static boolean rollback(boolean throwException,String trxName) throws SQLException {  try {    Connection conn=null;    Trx trx=trxName == null ? null : Trx.get(trxName,true);    if (trx != null)     return trx.rollback(true); else     conn=DB.getConnectionRW();    if (conn != null && !conn.getAutoCommit())     conn.rollback();  } catch (  SQLException e) {    log.log(Level.SEVERE,"[" + trxName + "]",e);    if (throwException)     throw e;    return false;  }  return true;}  }
class C{  protected void computeThresholds(Instances instances){  int i;  double[] values;  int[] sortedIndices;  int half;  int quarter;  double q1;  double q2;  double q3;  m_UpperExtremeValue=new double[m_AttributeIndices.length];  m_UpperOutlier=new double[m_AttributeIndices.length];  m_LowerOutlier=new double[m_AttributeIndices.length];  m_LowerExtremeValue=new double[m_AttributeIndices.length];  m_Median=new double[m_AttributeIndices.length];  m_IQR=new double[m_AttributeIndices.length];  for (i=0; i < m_AttributeIndices.length; i++) {    if (m_AttributeIndices[i] == NON_NUMERIC) {      continue;    }    values=instances.attributeToDoubleArray(m_AttributeIndices[i]);    sortedIndices=Utils.sort(values);    half=sortedIndices.length / 2;    quarter=half / 2;    if (sortedIndices.length % 2 == 1) {      q2=values[sortedIndices[half]];    } else {      q2=(values[sortedIndices[half]] + values[sortedIndices[half + 1]]) / 2;    }    if (half % 2 == 1) {      q1=values[sortedIndices[quarter]];      q3=values[sortedIndices[sortedIndices.length - quarter - 1]];    } else {      q1=(values[sortedIndices[quarter]] + values[sortedIndices[quarter + 1]]) / 2;      q3=(values[sortedIndices[sortedIndices.length - quarter - 1]] + values[sortedIndices[sortedIndices.length - quarter]]) / 2;    }    m_Median[i]=q2;    m_IQR[i]=q3 - q1;    m_UpperExtremeValue[i]=q3 + getExtremeValuesFactor() * m_IQR[i];    m_UpperOutlier[i]=q3 + getOutlierFactor() * m_IQR[i];    m_LowerOutlier[i]=q1 - getOutlierFactor() * m_IQR[i];    m_LowerExtremeValue[i]=q1 - getExtremeValuesFactor() * m_IQR[i];  }}  }
class C{  protected boolean addDependencies(DependencyContainer container){  if (_hasJNIReload) {    container.add(this);    return true;  } else   if (_sourcePath == null) {    container.add(_depend);    return false;  } else {    container.add(this);    return true;  }}  }
class C{  public String parameterize(String command,Map<String,String> parameters){  for (  String key : parameters.keySet()) {    String value=parameters.get(key);    command=command.replace(key,value);  }  return command;}  }
class C{  public boolean isUseDefaultUserName(){  return useDfltUsrName;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SGraphPackage.SCOPED_ELEMENT__SCOPES:    getScopes().clear();  return;case SGraphPackage.SCOPED_ELEMENT__NAMESPACE:setNamespace(NAMESPACE_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  @Override boolean isPathCompleted(X509Certificate cert){  for (  TrustAnchor anchor : trustAnchors) {    if (anchor.getTrustedCert() != null) {      if (cert.equals(anchor.getTrustedCert())) {        this.trustAnchor=anchor;        return true;      } else {        continue;      }    }    X500Principal principal=anchor.getCA();    PublicKey publicKey=anchor.getCAPublicKey();    if (principal != null && publicKey != null && principal.equals(cert.getSubjectX500Principal())) {      if (publicKey.equals(cert.getPublicKey())) {        this.trustAnchor=anchor;        return true;      }    }    if (principal == null || !principal.equals(cert.getIssuerX500Principal())) {      continue;    }    if (PKIX.isDSAPublicKeyWithoutParams(publicKey)) {      continue;    }    try {      cert.verify(publicKey,buildParams.sigProvider());    } catch (    InvalidKeyException ike) {      if (debug != null) {        debug.println("ForwardBuilder.isPathCompleted() invalid " + "DSA key found");      }      continue;    }catch (    GeneralSecurityException e) {      if (debug != null) {        debug.println("ForwardBuilder.isPathCompleted() " + "unexpected exception");        e.printStackTrace();      }      continue;    }    this.trustAnchor=anchor;    return true;  }  return false;}  }
class C{  public MosaicLevy(final MosaicTransferFeeType type,final Account recipient,final MosaicId mosaicId,final Quantity fee){  this.type=type;  this.recipient=recipient;  this.mosaicId=mosaicId;  this.fee=fee;  this.validate();}  }
class C{  public boolean isReturnToZero(){  return null == returnToZero ? _returnToZero : returnToZero.get();}  }
class C{  public DefaultRequest txRevenue(Double value){  setDouble(TRANSACTION_REVENUE,value);  return this;}  }
class C{  public ContractSet(){  contractMap=new HashMap<>();  maxArity=0;}  }
class C{  public SingleConsumerDisruptorQueue(int bufferSize,boolean singleProducer){  if (singleProducer) {    ringBuffer=RingBuffer.createSingleProducer(new Factory<T>(),normalizeBufferSize(bufferSize));  } else {    ringBuffer=RingBuffer.createMultiProducer(new Factory<T>(),normalizeBufferSize(bufferSize));  }  consumedSeq=new Sequence();  ringBuffer.addGatingSequences(consumedSeq);  barrier=ringBuffer.newBarrier();  long cursor=ringBuffer.getCursor();  consumedSeq.set(cursor);  knownPublishedSeq=cursor;}  }
class C{  public NotificationChain basicSetAnnotationList(AnnotationList newAnnotationList,NotificationChain msgs){  AnnotationList oldAnnotationList=annotationList;  annotationList=newAnnotationList;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.N4_TYPE_DECLARATION__ANNOTATION_LIST,oldAnnotationList,newAnnotationList);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private void step2(DBIDRef id,DBIDArrayIter it,int n,DistanceQuery<? super O> distQuery,WritableDoubleDataStore m){  for (it.seek(0); it.getOffset() < n; it.advance()) {    m.putDouble(it,distQuery.distance(it,id));  }}  }
class C{  public static boolean isCacheWindow(){  return getProperty(P_CACHE_WINDOW).equals("Y");}  }
class C{  public RunnableConsumer(BlockingQueue<Runnable> jobQueue){  this.jobQueue=jobQueue;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SGenPackage.FEATURE_PARAMETER__DEPRECATED:    return deprecated != DEPRECATED_EDEFAULT;case SGenPackage.FEATURE_PARAMETER__COMMENT:  return COMMENT_EDEFAULT == null ? comment != null : !COMMENT_EDEFAULT.equals(comment);case SGenPackage.FEATURE_PARAMETER__FEATURE_TYPE:return getFeatureType() != null;case SGenPackage.FEATURE_PARAMETER__OPTIONAL:return optional != OPTIONAL_EDEFAULT;case SGenPackage.FEATURE_PARAMETER__PARAMETER_TYPE:return parameterType != PARAMETER_TYPE_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public long computeJobCreate(long memPtr){  enter();  try {    return PlatformCallbackUtils.computeJobCreate(envPtr,memPtr);  }  finally {    leave();  }}  }
class C{  protected void addEmrStepAndSetWorkflowVariables(Object request,DelegateExecution execution) throws Exception {  Object emrStep=emrService.addStepToCluster(request);  EmrStepHelper stepHelper=emrStepHelperFactory.getStepHelper(request.getClass().getName());  String stepId=stepHelper.getStepId(emrStep);  setTaskWorkflowVariable(execution,VARIABLE_EMR_STEP_ID,stepId);}  }
class C{  private void initializeListeners(){  m_settings.getDisplaySettings().addListener(m_settingsListener);  m_settings.getEdgeSettings().addListener(m_edgeSettingsListener);  m_settings.getLayoutSettings().addListener(m_layoutSettingsListener);}  }
class C{  public static void main(String[] args){  JFrame frame=new JFrame(EditorPaneDemo.class.getAnnotation(DemoProperties.class).value());  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  frame.getContentPane().add(new EditorPaneDemo());  frame.setPreferredSize(new Dimension(800,600));  frame.pack();  frame.setLocationRelativeTo(null);  frame.setVisible(true);}  }
class C{  public ArrayList<String> find(String matchText){  ArrayList<String> result;  Enumeration<String> packages;  Iterator<String> names;  String name;  result=new ArrayList<String>();  packages=m_Cache.keys();  while (packages.hasMoreElements()) {    names=m_Cache.get(packages.nextElement()).iterator();    while (names.hasNext()) {      name=names.next();      if (name.contains(matchText)) {        result.add(name);      }    }  }  if (result.size() > 1) {    Collections.sort(result);  }  return result;}  }
class C{  private void verifyVirtualPoolResults() throws Exception {  log.info("Verifying VirtualPoolMultiVolumeConsistencyMigration.");  for (  URI virtualPoolURI : rpTestVirtualPoolURIs) {    VirtualPool virtualPool=_dbClient.queryObject(VirtualPool.class,virtualPoolURI);    Assert.assertTrue("VirtualPool %s does not specify RecoverPoint protection",VirtualPool.vPoolSpecifiesProtection(virtualPool));    if (VirtualPool.vPoolSpecifiesProtection(virtualPool)) {      Assert.assertTrue("Multi-volume consistency should be set for a RecoverPoint virtual pool",virtualPool.getMultivolumeConsistency());    }  }}  }
class C{  public RequestingUserName(String userName,Locale locale){  super(userName,locale);}  }
class C{  public Object opt(int index){  return (index < 0 || index >= this.length()) ? null : this.myArrayList.get(index);}  }
class C{  public static boolean moduleIsArmaType(@Nullable Module module){  if (module == null) {    return false;  }  return ModuleUtil.getModuleType(module) == ArmaModuleType.getInstance();}  }
class C{  public InfoBarLayout(Context context,InfoBarView infoBarView,int iconResourceId,Bitmap iconBitmap,CharSequence message){  super(context);  mInfoBarView=infoBarView;  Resources res=getResources();  mMargin=res.getDimensionPixelOffset(R.dimen.infobar_margin);  mIconSize=res.getDimensionPixelSize(R.dimen.infobar_icon_size);  mMinWidth=res.getDimensionPixelSize(R.dimen.infobar_min_width);  mAccentColor=res.getColor(R.color.infobar_accent_blue);  mCloseButton=new ImageButton(context);  mCloseButton.setId(R.id.infobar_close_button);  mCloseButton.setImageResource(R.drawable.btn_close);  TypedArray a=getContext().obtainStyledAttributes(new int[]{R.attr.selectableItemBackground});  Drawable closeButtonBackground=a.getDrawable(0);  a.recycle();  mCloseButton.setBackground(closeButtonBackground);  mCloseButton.setPadding(mMargin,mMargin,mMargin,mMargin);  mCloseButton.setOnClickListener(this);  mCloseButton.setContentDescription(res.getString(R.string.infobar_close));  mCloseButton.setLayoutParams(new LayoutParams(0,-mMargin,-mMargin,-mMargin));  if (iconResourceId != 0 || iconBitmap != null) {    mIconView=new ImageView(context);    if (iconResourceId != 0) {      mIconView.setImageResource(iconResourceId);    } else     if (iconBitmap != null) {      mIconView.setImageBitmap(iconBitmap);    }    mIconView.setLayoutParams(new LayoutParams(0,0,mMargin / 2,0));    mIconView.getLayoutParams().width=mIconSize;    mIconView.getLayoutParams().height=mIconSize;    mIconView.setFocusable(false);  }  mMessageTextView=(TextView)LayoutInflater.from(context).inflate(R.layout.infobar_text,null);  mMessageTextView.setText(message,TextView.BufferType.SPANNABLE);  mMessageTextView.setMovementMethod(LinkMovementMethod.getInstance());  mMessageTextView.setLinkTextColor(mAccentColor);  mMessageView=mMessageTextView;}  }
class C{  public byte[] asByteArray() throws IOException {  if (reader != null) {    throw new IllegalStateException("Cannot get raw bytes from a Reader object.");  }  InputStream in=buildInputStream();  return consumeInputStream(in);}  }
class C{  public FrameworkException(){  super();}  }
class C{  private IPushResult sendSingleMessage(String content,String receiver) throws IOException {  SingleMessage message=new SingleMessage();  message.setOffline(true);  message.setOfflineExpireTime(24 * 3600 * 1000);  message.setData(getTemplate(content));  message.setPushNetWorkType(0);  Target target=new Target();  target.setAppId(ConfigHelper.getString("GETUI.APP_ID"));  target.setClientId(receiver);  return getGetPush().pushMessageToSingle(message,target);}  }
class C{  public static void main(String argv[]){  System.out.println(getVersion());}  }
class C{  public MinimalPerfectHashFunction<T> build() throws IOException {  if (built)   throw new IllegalStateException("This builder has been already used");  built=true;  if (transform == null) {    if (chunkedHashStore != null)     transform=chunkedHashStore.transform(); else     throw new IllegalArgumentException("You must specify a TransformationStrategy, either explicitly or via a given ChunkedHashStore");  }  return new MinimalPerfectHashFunction<T>(keys,transform,signatureWidth,tempDir,chunkedHashStore);}  }
class C{  void fireActionEvent(){}  }
class C{  public DistinctIteration(Iteration<? extends E,? extends X> iter){  super(iter);  excludeSet=makeSet();}  }
class C{  public static String addQueryParam(String path,String key,String value){  return path + (path.contains("?") ? "&" : "?") + key+ "="+ value;}  }
class C{  public static double weibull(double lambda,double c){  double x=Math.pow(-Math.log(1 - raw()),1 / c) / lambda;  return x;}  }
class C{  public <T extends ICalProperty>boolean removeProperty(T property){  return properties.remove(property.getClass(),property);}  }
class C{  protected void fillAttributedStringBuffer(BridgeContext ctx,Element element,boolean top,TextPath textPath,Integer bidiLevel,Map initialAttributes,AttributedStringBuffer asb){  if ((!SVGUtilities.matchUserAgent(element,ctx.getUserAgent())) || (!CSSUtilities.convertDisplay(element))) {    return;  }  String s=XMLSupport.getXMLSpace(element);  boolean preserve=s.equals(SVG_PRESERVE_VALUE);  boolean prevEndsWithSpace;  Element nodeElement=element;  int elementStartChar=asb.length();  if (top) {    endLimit=0;  }  if (preserve) {    endLimit=asb.length();  }  Map map=initialAttributes == null ? new HashMap() : new HashMap(initialAttributes);  initialAttributes=getAttributeMap(ctx,element,textPath,bidiLevel,map);  Object o=map.get(TextAttribute.BIDI_EMBEDDING);  Integer subBidiLevel=bidiLevel;  if (o != null) {    subBidiLevel=(Integer)o;  }  for (Node n=getFirstChild(element); n != null; n=getNextSibling(n)) {    if (preserve) {      prevEndsWithSpace=false;    } else {      if (asb.length() == 0) {        prevEndsWithSpace=true;      } else {        prevEndsWithSpace=(asb.getLastChar() == ' ');      }    }switch (n.getNodeType()) {case Node.ELEMENT_NODE:      if (!SVG_NAMESPACE_URI.equals(n.getNamespaceURI()))       break;    nodeElement=(Element)n;  String ln=n.getLocalName();if (ln.equals(SVG_TSPAN_TAG) || ln.equals(SVG_ALT_GLYPH_TAG)) {  int before=asb.count;  fillAttributedStringBuffer(ctx,nodeElement,false,textPath,subBidiLevel,initialAttributes,asb);  if (asb.count != before) {    initialAttributes=null;  }} else if (ln.equals(SVG_TEXT_PATH_TAG)) {  SVGTextPathElementBridge textPathBridge=(SVGTextPathElementBridge)ctx.getBridge(nodeElement);  TextPath newTextPath=textPathBridge.createTextPath(ctx,nodeElement);  if (newTextPath != null) {    int before=asb.count;    fillAttributedStringBuffer(ctx,nodeElement,false,newTextPath,subBidiLevel,initialAttributes,asb);    if (asb.count != before) {      initialAttributes=null;    }  }} else if (ln.equals(SVG_TREF_TAG)) {  String uriStr=XLinkSupport.getXLinkHref((Element)n);  Element ref=ctx.getReferencedElement((Element)n,uriStr);  s=TextUtilities.getElementContent(ref);  s=normalizeString(s,preserve,prevEndsWithSpace);  if (s.length() != 0) {    int trefStart=asb.length();    Map m=initialAttributes == null ? new HashMap() : new HashMap(initialAttributes);    getAttributeMap(ctx,nodeElement,textPath,bidiLevel,m);    asb.append(s,m);    int trefEnd=asb.length() - 1;    TextPaintInfo tpi;    tpi=(TextPaintInfo)elemTPI.get(nodeElement);    tpi.startChar=trefStart;    tpi.endChar=trefEnd;    initialAttributes=null;  }} else if (ln.equals(SVG_A_TAG)) {  NodeEventTarget target=(NodeEventTarget)nodeElement;  UserAgent ua=ctx.getUserAgent();  SVGAElementBridge.CursorHolder ch;  ch=new SVGAElementBridge.CursorHolder(CursorManager.DEFAULT_CURSOR);  EventListener l;  l=new SVGAElementBridge.AnchorListener(ua,ch);  target.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,SVG_EVENT_CLICK,l,false,null);  ctx.storeEventListenerNS(target,XMLConstants.XML_EVENTS_NAMESPACE_URI,SVG_EVENT_CLICK,l,false);  int before=asb.count;  fillAttributedStringBuffer(ctx,nodeElement,false,textPath,subBidiLevel,initialAttributes,asb);  if (asb.count != before) {    initialAttributes=null;  }}break;case Node.TEXT_NODE:case Node.CDATA_SECTION_NODE:s=n.getNodeValue();s=normalizeString(s,preserve,prevEndsWithSpace);if (s.length() != 0) {asb.append(s,map);if (preserve) {endLimit=asb.length();}initialAttributes=null;}}}if (top) {boolean strippedSome=false;while ((endLimit < asb.length()) && (asb.getLastChar() == ' ')) {asb.stripLast();strippedSome=true;}if (strippedSome) {Iterator iter=elemTPI.values().iterator();while (iter.hasNext()) {TextPaintInfo tpi=(TextPaintInfo)iter.next();if (tpi.endChar >= asb.length()) {tpi.endChar=asb.length() - 1;if (tpi.startChar > tpi.endChar) tpi.startChar=tpi.endChar;}}}}int elementEndChar=asb.length() - 1;TextPaintInfo tpi=(TextPaintInfo)elemTPI.get(element);tpi.startChar=elementStartChar;tpi.endChar=elementEndChar;}  }
class C{  protected void int2alphaCount(long val,CharArrayWrapper aTable,FastStringBuffer stringBuf){  int radix=aTable.getLength();  char[] table=new char[radix];  int i;  for (i=0; i < radix - 1; i++) {    table[i + 1]=aTable.getChar(i);  }  table[0]=aTable.getChar(i);  char buf[]=new char[100];  int charPos;  charPos=buf.length - 1;  int lookupIndex=1;  long correction=0;  do {    correction=((lookupIndex == 0) || (correction != 0 && lookupIndex == radix - 1)) ? (radix - 1) : 0;    lookupIndex=(int)(val + correction) % radix;    val=(val / radix);    if (lookupIndex == 0 && val == 0)     break;    buf[charPos--]=table[lookupIndex];  } while (val > 0);  stringBuf.append(buf,charPos + 1,(buf.length - charPos - 1));}  }
class C{  public BufferedImage createGradientLine(int width,Color leftColor,Color rightColor,double opacity){  BufferedImage image=new BufferedImage(width,1,BufferedImage.TYPE_INT_ARGB);  int iOpacity=(int)(255 * opacity);  for (int col=0; col < width; col++) {    double coef=(double)col / (double)width;    int r=(int)(leftColor.getRed() + coef * (rightColor.getRed() - leftColor.getRed()));    int g=(int)(leftColor.getGreen() + coef * (rightColor.getGreen() - leftColor.getGreen()));    int b=(int)(leftColor.getBlue() + coef * (rightColor.getBlue() - leftColor.getBlue()));    int color=(iOpacity << 24) | (r << 16) | (g << 8)| b;    image.setRGB(col,0,color);  }  return image;}  }
class C{  @Override protected void _enterModal(long ptr){  throw new UnsupportedOperationException();}  }
class C{  @Override public Struct createStruct(String typeName,Object[] attributes) throws SQLException {  throw unsupported("Struct");}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiSpinnerUI();  return MultiLookAndFeel.createUIs(mui,((MultiSpinnerUI)mui).uis,a);}  }
class C{  private SavedState(Parcel in){  super(in);  prevFirstVisiblePosition=in.readInt();  prevFirstVisibleChildHeight=in.readInt();  prevScrolledChildrenHeight=in.readInt();  prevScrollY=in.readInt();  scrollY=in.readInt();  childrenHeights=new SparseIntArray();  final int numOfChildren=in.readInt();  if (0 < numOfChildren) {    for (int i=0; i < numOfChildren; i++) {      final int key=in.readInt();      final int value=in.readInt();      childrenHeights.put(key,value);    }  }}  }
class C{  public void createSubsampleWithoutReplacement(Random random,int origSize,int sampleSize,int actualClasses,int[] classIndices){  if (sampleSize > origSize) {    sampleSize=origSize;    System.err.println("Resampling without replacement can only use percentage <=100% - " + "Using full dataset!");  }  @SuppressWarnings("unchecked") Vector<Integer>[] indices=new Vector[classIndices.length - 1];  @SuppressWarnings("unchecked") Vector<Integer>[] indicesNew=new Vector[classIndices.length - 1];  for (int i=0; i < classIndices.length - 1; i++) {    indices[i]=new Vector<Integer>(classIndices[i + 1] - classIndices[i]);    indicesNew[i]=new Vector<Integer>(indices[i].capacity());    for (int n=classIndices[i]; n < classIndices[i + 1]; n++) {      indices[i].add(n);    }  }  int currentSize=origSize;  for (int i=0; i < sampleSize; i++) {    int index=0;    if (random.nextDouble() < m_BiasToUniformClass) {      int cIndex=random.nextInt(actualClasses);      for (int j=0, k=0; j < classIndices.length - 1; j++) {        if ((classIndices[j] != classIndices[j + 1]) && (k++ >= cIndex)) {          if (indices[j].size() == 0) {            i--;            break;          }          index=random.nextInt(indices[j].size());          indicesNew[j].add(indices[j].get(index));          indices[j].remove(index);          break;        }      }    } else {      index=random.nextInt(currentSize);      for (int n=0; n < actualClasses; n++) {        if (index < indices[n].size()) {          indicesNew[n].add(indices[n].get(index));          indices[n].remove(index);          break;        } else {          index-=indices[n].size();        }      }      currentSize--;    }  }  if (getInvertSelection()) {    indicesNew=indices;  } else {    for (    Vector<Integer> element : indicesNew) {      Collections.sort(element);    }  }  for (  Vector<Integer> element : indicesNew) {    for (int n=0; n < element.size(); n++) {      push((Instance)getInputFormat().instance(element.get(n)).copy());    }  }  for (int i=0; i < indices.length; i++) {    indices[i].clear();    indicesNew[i].clear();  }  indices=null;  indicesNew=null;}  }
class C{  public PaymentDeregistrationException(String message){  super(message);}  }
class C{  public final String toString(){  StringBuffer text=new StringBuffer();  text.append("@attribute " + Utils.quote(m_Name) + " ");  if (isNominal()) {    text.append('{');    Enumeration Enum=enumerateValues();    while (Enum.hasMoreElements()) {      text.append(Utils.quote((String)Enum.nextElement()));      if (Enum.hasMoreElements())       text.append(',');    }    text.append('}');  } else {    if (isNumeric()) {      text.append("numeric");    } else {      text.append("string");    }  }  return text.toString();}  }
class C{  public void createPictScenario13_1() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-02 00:00:00"));  String supplierAdminId="Pict13_1Supplier";  VOOrganization supplier=orgSetup.createOrganization(basicSetup.getPlatformOperatorUserKey(),supplierAdminId,"Pict13_1SupplierOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);  VOUser supplierAdmin=orgSetup.getUser(supplierAdminId,true);  paymentSetup.createPaymentForSupplier(basicSetup.getPlatformOperatorUserKey(),supplierAdmin.getKey(),supplier);  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  serviceSetup.importTechnicalServices(BaseAdmUmTest.TECHNICAL_SERVICE_EXAMPLE2_ASYNC_XML);  VOTechnicalService example2TechService=serviceSetup.getTechnicalService(VOTechServiceFactory.TECH_SERVICE_EXAMPLE2_ASYNC_ID);  setCutOffDay(supplierAdmin.getKey(),1);  String customerAdminId="Pict13_1Customer";  VOOrganization customer=orgSetup.registerCustomer("Pict13_1CustomerOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_UK,customerAdminId,supplierMarketplace.getMarketplaceId(),supplier.getOrganizationId());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  orgSetup.createMarketingPermission(supplierAdmin.getKey(),supplier.getOrganizationId(),example2TechService);  VOServiceDetails unitServTemplate=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT13_1_UNIT_DAY_SERVICE",TestService.EXAMPLE2_ASYNC,TestPriceModel.FREE,example2TechService,supplierMarketplace);  VOServiceDetails serviceUnitDetails=serviceSetup.savePriceModelForCustomer(unitServTemplate,TestPriceModel.EXAMPLE_PICT13_UNIT_DAY,customer);  VOServiceDetails freeTemplate=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT13_1_FREE",TestService.EXAMPLE2_ASYNC,TestPriceModel.EXAMPLE_PICT13_UNIT_HOUR,example2TechService,supplierMarketplace);  VOServiceDetails serviceFreeDetails=serviceSetup.savePriceModelForCustomer(freeTemplate,TestPriceModel.FREE,customer);  unitServTemplate=serviceSetup.registerCompatibleServices(supplierAdmin.getKey(),unitServTemplate,freeTemplate);  serviceUnitDetails=serviceSetup.activateMarketableService(serviceUnitDetails);  serviceFreeDetails=serviceSetup.activateMarketableService(serviceFreeDetails);  VORoleDefinition role=VOServiceFactory.getRole(serviceUnitDetails,"ADMIN");  serviceUnitDetails=serviceSetup.getServiceDetails(supplierAdmin.getKey(),serviceUnitDetails);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PICT_TEST_13_1",serviceUnitDetails,customerAdmin,role);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-03 00:00:00"));  subDetails=subscrSetup.completeAsyncSubscription(supplierAdmin.getKey(),customerAdmin,subDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-03 00:00:00"));  role=VOServiceFactory.getRole(serviceUnitDetails,"USER");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  subDetails=subscrSetup.addUser(basicSetup.getSecondCustomerUser1(),role,subDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-10-04 09:00:00"),"MAX_FOLDER_NUMBER","5");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-04 10:00:00"));  subDetails=subscrSetup.completeAsyncModifySubscription(supplierAdmin.getKey(),customerAdmin,subDetails);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-04 10:00:00"));  subDetails=subscrSetup.modifyUserRole(subDetails.getUsageLicenses().get(1),VOServiceFactory.getRole(serviceUnitDetails,"ADMIN"),subDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-04 11:00:00"));  subDetails=subscrSetup.modifyUserRole(subDetails.getUsageLicenses().get(1),VOServiceFactory.getRole(serviceUnitDetails,"USER"),subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-06 00:00:00"));  subDetails=subscrSetup.revokeUser(basicSetup.getSecondCustomerUser1(),subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-07 02:00:00"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  paymentSetup.deleteCustomerPaymentTypes(customer);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-07 05:00:00"));  paymentSetup.reassignCustomerPaymentTypes(customer);  subDetails=subscrSetup.getSubscriptionDetails(customerAdmin.getKey(),subDetails.getSubscriptionId());  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-07 10:00:00"));  paymentSetup.reassignCustomerPaymentTypes(customer);  subDetails=subscrSetup.getSubscriptionDetails(customerAdmin.getKey(),subDetails.getSubscriptionId());  role=VOServiceFactory.getRole(serviceUnitDetails,"USER");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-08 00:00:00"));  subDetails=subscrSetup.addUser(basicSetup.getSecondCustomerUser1(),role,subDetails.getSubscriptionId());  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-12 00:00:00"));  VOPriceModel newSubPriceModel=VOPriceModelFactory.modifyPriceModelPeriodFee(subDetails.getPriceModel(),new BigDecimal("1.00"));  subscrSetup.savePriceModelForSubscription(supplierAdmin.getKey(),subDetails,newSubPriceModel,customer);  serviceFreeDetails=serviceSetup.getServiceDetails(supplierAdmin.getKey(),serviceFreeDetails);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-29 00:00:00"));  VOSubscriptionDetails upgradedSubDetails=subscrSetup.upgradeSubscription(subDetails,serviceFreeDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-30 00:00:00"));  upgradedSubDetails=subscrSetup.completeAsyncUpgradeSubscription(supplierAdmin.getKey(),customerAdmin,upgradedSubDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-15 13:00:01"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  serviceSetup.deleteMarketableService(serviceUnitDetails);  resetCutOffDay(supplierAdmin.getKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_13_1",subDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_13_1",upgradedSubDetails);  BillingIntegrationTestBase.updateCustomerListForTests("PICT_TEST_13_1",customer);}  }
class C{  public void clear(){  int max=bits.length;  for (int i=0; i < max; i++) {    bits[i]=0;  }}  }
class C{  public MultiCategoryListsFacetsExample(){  config.setIndexFieldName("Author","author");  config.setIndexFieldName("Publish Date","pubdate");  config.setHierarchical("Publish Date",true);}  }
class C{  public GridCacheVersionedEntry<K,V> oldEntry(){  return oldEntry;}  }
class C{  public void addCc(EncodedStringValue value){  mPduHeaders.appendEncodedStringValue(value,PduHeaders.CC);}  }
class C{  public RestClientBuilder connectionTimeout(int connectionTimeout){  this.connectionTimeout=connectionTimeout;  return this;}  }
class C{  private static void s_uacsqkp(SparseBlock a,double[] c,int m,int n,KahanObject kbuff,KahanPlusSq kplusSq,int rl,int ru){  if (a.isContiguous()) {    sumSqAgg(a.values(rl),c,a.indexes(rl),a.pos(rl),(int)a.size(rl,ru),n,kbuff,kplusSq);  } else {    for (int i=rl; i < ru; i++) {      if (!a.isEmpty(i))       sumSqAgg(a.values(i),c,a.indexes(i),a.pos(i),a.size(i),n,kbuff,kplusSq);    }  }}  }
class C{  private void initGroupLists(){  Collection<MigrationGroup> groups=task.getMigrationGroups();  CollectionContentProvider<MigrationGroup> provider=new CollectionContentProvider<MigrationGroup>(groups);  groupSelect.setContentProvider(provider);  checkBoxTableViewer.setContentProvider(provider);  groupSelect.setInput(groups);  checkBoxTableViewer.setInput(groups);}  }
class C{  public H264Stream() throws IOException {  this(CameraInfo.CAMERA_FACING_BACK);}  }
class C{  public static final ColorModel createColorModel(SampleModel sampleModel){  if (sampleModel == null) {    throw new IllegalArgumentException("sampleModel == null!");  }  int dataType=sampleModel.getDataType();switch (dataType) {case DataBuffer.TYPE_BYTE:case DataBuffer.TYPE_USHORT:case DataBuffer.TYPE_SHORT:case DataBuffer.TYPE_INT:case DataBuffer.TYPE_FLOAT:case DataBuffer.TYPE_DOUBLE:    break;default :  return null;}ColorModel colorModel=null;int[] sampleSize=sampleModel.getSampleSize();if (sampleModel instanceof ComponentSampleModel) {int numBands=sampleModel.getNumBands();ColorSpace colorSpace=null;if (numBands <= 2) {  colorSpace=ColorSpace.getInstance(ColorSpace.CS_GRAY);} else if (numBands <= 4) {  colorSpace=ColorSpace.getInstance(ColorSpace.CS_sRGB);} else {  colorSpace=new BogusColorSpace(numBands);}boolean hasAlpha=(numBands == 2) || (numBands == 4);boolean isAlphaPremultiplied=false;int transparency=hasAlpha ? Transparency.TRANSLUCENT : Transparency.OPAQUE;colorModel=new ComponentColorModel(colorSpace,sampleSize,hasAlpha,isAlphaPremultiplied,transparency,dataType);} else if (sampleModel.getNumBands() <= 4 && sampleModel instanceof SinglePixelPackedSampleModel) {SinglePixelPackedSampleModel sppsm=(SinglePixelPackedSampleModel)sampleModel;int[] bitMasks=sppsm.getBitMasks();int rmask=0;int gmask=0;int bmask=0;int amask=0;int numBands=bitMasks.length;if (numBands <= 2) {  rmask=gmask=bmask=bitMasks[0];  if (numBands == 2) {    amask=bitMasks[1];  }} else {  rmask=bitMasks[0];  gmask=bitMasks[1];  bmask=bitMasks[2];  if (numBands == 4) {    amask=bitMasks[3];  }}int bits=0;for (int i=0; i < sampleSize.length; i++) {  bits+=sampleSize[i];}return new DirectColorModel(bits,rmask,gmask,bmask,amask);} else if (sampleModel instanceof MultiPixelPackedSampleModel) {int bitsPerSample=sampleSize[0];int numEntries=1 << bitsPerSample;byte[] map=new byte[numEntries];for (int i=0; i < numEntries; i++) {  map[i]=(byte)(i * 255 / (numEntries - 1));}colorModel=new IndexColorModel(bitsPerSample,numEntries,map,map,map);}return colorModel;}  }
class C{  private static Analytics initializeAnalytics() throws Exception {  Credential credential=authorize();  return new Analytics.Builder(HTTP_TRANSPORT,JSON_FACTORY,credential).setApplicationName(APPLICATION_NAME).build();}  }
class C{  @Override public boolean hasProperty(String key){  return Beans.hasIntrospectedProperty(this,key);}  }
class C{  public static <K,V>Map<K,V> lockedMap(Map<K,V> m){  return new LockedMap<>(m);}  }
class C{  @Override public void onMouseOut(MouseOutEvent event){  if (!enabled) {    return;  }  if (selected) {    panel.setStyleName(toolbarResources.toolbar().iconButtonPanelSelected());  } else {    panel.setStyleName(toolbarResources.toolbar().iconButtonPanel());  }}  }
class C{  public boolean isEmpty(){  return workListIndex == 0;}  }
class C{  public static void main(String[] args){  try {    out=new FileWriter(System.getProperty("generateToDir") + "/AssemblerOpt.java");  } catch (  IOException e) {    throw new Error(e);  }  emit("package org.jikesrvm.compilers.opt.mir2mc.ia32;\n\n");  emit("import static org.jikesrvm.compilers.opt.ir.Operators.*;\n\n");  emit("import org.jikesrvm.*;\n\n");  emit("import org.jikesrvm.compilers.opt.*;\n\n");  emit("import org.jikesrvm.compilers.opt.ir.*;\n\n");  emit("import org.jikesrvm.compilers.opt.ir.ia32.*;\n\n");  emit("import static org.jikesrvm.compilers.opt.ir.ia32.ArchOperators.*;\n\n");  emit("import static org.jikesrvm.compilers.opt.OptimizingCompilerException.opt_assert;\n\n");  emit("\n\n");  emit("/**\n");  emit(" *  This class is the automatically-generated assembler for\n");  emit(" * the optimizing compiler.  It consists of methods that\n");  emit(" * understand the possible operand combinations of each\n");  emit(" * instruction type, and how to translate those operands to\n");  emit(" * calls to the Assember low-level emit method\n");  emit(" *\n");  emit(" * It is generated by GenerateAssembler.java\n");  emit(" *\n");  emit(" */\n");  emit("public class AssemblerOpt extends AssemblerBase {\n\n");  emitTab(1);  emit("/**\n");  emitTab(1);  emit(" * @param bcSize initial machine code buffer size.\n");  emitTab(1);  emit(" * @param print whether to dump generated machine code.\n");  emitTab(1);  emit(" * @param ir the IR object for the opt compilation.\n");  emitTab(1);  emit(" * @see org.jikesrvm.compilers.common.assembler.ia32.Assembler\n");  emitTab(1);  emit(" */\n");  emitTab(1);  emit("public AssemblerOpt(int bcSize, boolean print, IR ir) {\n");  emitTab(2);  emit("super(bcSize, print, ir);\n");  emitTab(1);  emit("}");  emit("\n\n");  Method[] emitters=lowLevelAsm.getDeclaredMethods();  Set<String> opcodes=getOpcodes(emitters);  Iterator<String> i=opcodes.iterator();  while (i.hasNext()) {    String opcode=(String)i.next();    setCurrentOpcode(opcode);    emitTab(1);    emit("/**\n");    emitTab(1);    emit(" *  Emit the given instruction, assuming that\n");    emitTab(1);    emit(" * it is a " + currentFormat + " instruction\n");    emitTab(1);    emit(" * and has a " + currentOpcode + " operator\n");    emitTab(1);    emit(" *\n");    emitTab(1);    emit(" * @param inst the instruction to assemble\n");    emitTab(1);    emit(" */\n");    emitTab(1);    emit("private void do" + opcode + "(Instruction inst) {\n");    EmitterSet emitter=buildSetForOpcode(emitters,opcode);    boolean[][] tp=new boolean[4][ArgumentType.values().length];    emitter.emitSet(opcode,tp,2);    emitTab(1);    emit("}\n\n");  }  emitTab(1);  emit("/**\n");  emitTab(1);  emit(" *  The number of instructions emitted so far\n");  emitTab(1);  emit(" */\n");  emitTab(1);  emit("private int instructionCount = 0;\n\n");  emitTab(1);  emit("@Override\n");  emitTab(1);  emit("public void doInst(Instruction inst) {\n");  emitTab(2);  emit("instructionCount++;\n");  emitTab(2);  emit("resolveForwardReferences(instructionCount);\n");  emitTab(2);  emit("switch (inst.getOpcode()) {\n");  Set<String> emittedOpcodes=new HashSet<String>();  i=opcodes.iterator();  while (i.hasNext()) {    String opcode=i.next();    Iterator<String> operators=getMatchingOperators(opcode).iterator();    while (operators.hasNext()) {      String operator=operators.next();      emitTab(3);      emittedOpcodes.add(operator);      emit("case IA32_" + operator + "_opcode:\n");    }    emitTab(4);    emit("do" + opcode + "(inst);\n");    emitTab(4);    emit("break;\n");  }  emittedOpcodes.add("JCC");  emitTab(3);  emit("case IA32_JCC_opcode:\n");  emitTab(4);  emit("doJCC(inst);\n");  emitTab(4);  emit("break;\n");  emittedOpcodes.add("JMP");  emitTab(3);  emit("case IA32_JMP_opcode:\n");  emitTab(4);  emit("doJMP(inst);\n");  emitTab(4);  emit("break;\n");  emittedOpcodes.add("LOCK");  emitTab(3);  emit("case IA32_LOCK_opcode:\n");  emitTab(4);  emit("emitLockNextInstruction();\n");  emitTab(4);  emit("break;\n");  emitTab(3);  emit("case IG_PATCH_POINT_opcode:\n");  emitTab(4);  emit("emitPatchPoint();\n");  emitTab(4);  emit("break;\n");  emitTab(3);  emit("case IMMQ_MOV_opcode:\n");  emitTab(4);  emit("doIMMQ_MOV(inst);\n");  emitTab(4);  emit("break;\n");  emitTab(3);  emit("case MIR_LOWTABLESWITCH_opcode:\n");  emitTab(4);  emit("doLOWTABLESWITCH(inst);\n");  emitTab(4);  emit("// kludge table switches that are unusually long instructions\n");  emitTab(4);  emit("instructionCount += MIR_LowTableSwitch.getNumberOfTargets(inst);\n");  emitTab(4);  emit("break;\n");  emitTab(3);  emit("// Make machine code dumps more readable by visually\n");  emitTab(3);  emit("// distinguishing basic blocks\n");  emitTab(3);  emit("case LABEL_opcode:\n");  emitTab(4);  emit("comment(\"\");\n");  emitTab(4);  emit("comment(Label.getBlock(inst).toString());\n");  emitTab(4);  emit("break;\n");  emitTab(3);  emit("// Opcodes that are not allowed to be present. Those are expected\n");  emitTab(3);  emit("// to be handled earlier.\n");  Set<String> errorOpcodes=getErrorOpcodes(emittedOpcodes);  if (!errorOpcodes.isEmpty()) {    i=errorOpcodes.iterator();    while (i.hasNext()) {      emitTab(3);      emit("case IA32_" + i.next() + "_opcode:\n");    }    emitTab(4);    emit("throw new OptimizingCompilerException(inst + \" has unimplemented IA32 opcode (check excludedOpcodes)\");\n");  }  emitTab(2);  emit("}\n");  emitTab(2);  emit("mcOffsets.setMachineCodeOffset(inst, mi);\n");  emitTab(1);  emit("}\n\n");  emit("\n}\n");  try {    out.close();  } catch (  IOException e) {    throw new Error(e);  }}  }
class C{  public void removeSnapshot(SnapshotImpl snapshot) throws ServerException, NotFoundException {  environmentEngine.removeSnapshot(snapshot);}  }
class C{  public NumericPrediction(double actual,double predicted,double weight){  this(actual,predicted,weight,new double[0][]);}  }
class C{  public MetadatableTest(String name){  super(name);}  }
class C{  public BindException(String detailMessage,Throwable cause){  super(detailMessage,cause);}  }
class C{  @ExpectWarning(value="NP_NULL_ON_SOME_PATH_EXCEPTION") @NoWarning(value="NP_ALWAYS_NULL,NP_NULL_ON_SOME_PATH") public static void falsePositive(){  String str=null;  for (int i=0; i < 2; i++) {    try {      str=new String("Test");    } catch (    Exception ex) {      ex.printStackTrace();    }    str.charAt(i);    str=null;  }}  }
class C{  private boolean doRequestNoAnswer(Map<String,String> params){  if (sessionNotAlive())   return false;  try {    String result=readResult(params,false);    if (result == null)     pullLastError();    return "OK".equals(result);  } catch (  MalformedJsonException mje) {    pullLastError();  }catch (  IOException e) {    e.printStackTrace();    if (!hasLastError) {      hasLastError=true;      lastError=formatException(e);    }  }  return false;}  }
class C{  public static StringTreeNode createSampleTree_Figure7(){  final StringTreeNode root=newTree("root",newTree("n1",newTree("n1.1"),newTree("n1.2"),newTree("n1.3"),newTree("n1.4"),newTree("n1.5"),newTree("n1.6"),newTree("n1.7",newTree("n1.7.1"))),newTree("n2"),newTree("n3"),newTree("n4",newTree("n4.1")),newTree("n5"),newTree("n6",newTree("n6.1",newTree("n6.1.1"),newTree("n6.1.2"),newTree("n6.1.3"),newTree("n6.1.4"),newTree("n6.1.5"),newTree("n6.1.6"),newTree("n6.1.7"))));  return root;}  }
class C{  public void executeWhenInitialized(@NotNull final Runnable runnable){  try {    myInitializationWaiter.await();    runnable.run();  } catch (  InterruptedException e) {    LOG.error(e);  }}  }
class C{  public int hashCode(){  return charIndex;}  }
class C{  public FloatVector transform(FloatVector originalFeatures){  return originalFeatures;}  }
class C{  boolean isEmpty(){  return buffer.length() == 0;}  }
class C{  private <V>RunnableScheduledFuture<V> trackTask(RunnableScheduledFuture<V> task){  task=new TrackedFuture<V>(task);  asyncTasks.add(task);  return task;}  }
class C{  public EnclosingMethodAttribute(ConstPool cp,String className,String methodName,String methodDesc){  super(cp,tag);  int ci=cp.addClassInfo(className);  int ni=cp.addNameAndTypeInfo(methodName,methodDesc);  byte[] bvalue=new byte[4];  bvalue[0]=(byte)(ci >>> 8);  bvalue[1]=(byte)ci;  bvalue[2]=(byte)(ni >>> 8);  bvalue[3]=(byte)ni;  set(bvalue);}  }
class C{  private void adjustViewsUpOrDown(){  final int childCount=getChildCount();  int delta;  if (childCount > 0) {    delta=getHighestChildTop() - getListPaddingTop();    if (delta < 0) {      delta=0;    }    if (delta != 0) {      offsetChildrenTopAndBottom(-delta);    }  }}  }
class C{  @Override public final void check(final JsonObject payload) throws SignatureException {  checkUri(serverUri,Preconditions.checkNotNull(payload.get(JsonToken.AUDIENCE).getAsString(),"Audience cannot be null!"));}  }
class C{  @Override public boolean onMenuItemClicked(MenuItem menuItem){  return mMenuClickProcessor.onMenuItemClicked(menuItem);}  }
class C{  public PoolingByteArrayOutputStream(ByteArrayPool pool){  this(pool,DEFAULT_SIZE);}  }
class C{  public void testAddServletToEmptyDocument() throws Exception {  String xml=WEBAPP_TEST_HEADER + "</web-app>";  this.builder.build(new ByteArrayInputStream(xml.getBytes("UTF-8")));  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  WebXmlUtils.addServlet(webXml,createServletElement(webXml.getDescriptorType(),"s1","s1class"));  assertTrue(WebXmlUtils.hasServlet(webXml,"s1"));}  }
class C{  public void testDefaults() throws Exception {  SweetSpotSimilarity sim=getSimilarity("text",SweetSpotSimilarity.class);  ClassicSimilarity d=new ClassicSimilarity();  for (int i=0; i <= 1000; i++) {    assertEquals("tf: i=" + i,d.tf(i),sim.tf(i),0.0F);  }  assertEquals("norm 1",1.00F,sim.computeLengthNorm(1),0.0F);  assertEquals("norm 4",0.50F,sim.computeLengthNorm(4),0.0F);  assertEquals("norm 16",0.25F,sim.computeLengthNorm(16),0.0F);}  }
class C{  public Builder addHideableView(int viewId){  hideableViews.add(viewId);  return this;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override protected void doAction(){  String alias=null;  try {    KeyStoreHistory history=kseFrame.getActiveKeyStoreHistory();    KeyStoreState currentState=history.getCurrentState();    KeyStoreState newState=currentState.createBasisForNextState(this);    KeyStore keyStore=newState.getKeyStore();    alias=kseFrame.getSelectedEntryAlias();    Password oldPassword=newState.getEntryPassword(alias);    DChangePassword dChangePassword=new DChangePassword(frame,DOCUMENT_MODAL,res.getString("SetKeyPasswordAction.SetKeyPassword.Title"),oldPassword,applicationSettings.getPasswordQualityConfig());    dChangePassword.setLocationRelativeTo(frame);    dChangePassword.setVisible(true);    if (oldPassword == null) {      oldPassword=dChangePassword.getOldPassword();    }    Password newPassword=dChangePassword.getNewPassword();    if ((oldPassword == null) || (newPassword == null)) {      return;    }    Key key=keyStore.getKey(alias,oldPassword.toCharArray());    keyStore.deleteEntry(alias);    newState.removeEntryPassword(alias);    keyStore.setKeyEntry(alias,key,newPassword.toCharArray(),null);    if (currentState.getEntryPassword(alias) == null) {      currentState.setEntryPassword(alias,oldPassword);    }    newState.setEntryPassword(alias,newPassword);    currentState.append(newState);    kseFrame.updateControls(true);    JOptionPane.showMessageDialog(frame,res.getString("SetKeyPasswordAction.SetKeyPasswordSuccessful.message"),res.getString("SetKeyPasswordAction.SetKeyPassword.Title"),JOptionPane.INFORMATION_MESSAGE);  } catch (  GeneralSecurityException ex) {    String problemStr=MessageFormat.format(res.getString("SetKeyPasswordAction.NoSetPasswordKeyEntry.Problem"),alias);    String[] causes=new String[]{res.getString("SetKeyPasswordAction.PasswordIncorrectKeyEntry.Cause")};    Problem problem=new Problem(problemStr,causes,ex);    DProblem dProblem=new DProblem(frame,res.getString("SetKeyPasswordAction.ProblemSettingPasswordKeyEntry.Title"),problem);    dProblem.setLocationRelativeTo(frame);    dProblem.setVisible(true);  }catch (  Exception ex) {    DError.displayError(frame,ex);  }}  }
class C{  private void matchNumber() throws ParserException, IOException {  match(StreamTokenizer.TT_NUMBER);}  }
class C{  public CipherParameters generateDerivedParameters(int keySize,int ivSize){  keySize=keySize / 8;  ivSize=ivSize / 8;  byte[] dKey=generateDerivedKey(KEY_MATERIAL,keySize);  byte[] iv=generateDerivedKey(IV_MATERIAL,ivSize);  return new ParametersWithIV(new KeyParameter(dKey,0,keySize),iv,0,ivSize);}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    return new FileInputStream(entry.getCleanFile(index));  }}  }
class C{  @SuppressWarnings("deprecation") @Override public void onItemClick(AdapterView<?> parent,View v,int position,long id){  String pt=(String)list.get(position).get("path");  String fn=(String)list.get(position).get("name");  if (fn.equals(sRoot) || fn.equals(sParent)) {    File fl=new File(pt);    String ppt=fl.getParent();    if (ppt != null) {      path=ppt;    } else {      path=sRoot;    }  } else {    File fl=new File(pt);    if (fl.isFile()) {      ((Activity)getContext()).dismissDialog(this.dialogid);      Bundle bundle=new Bundle();      bundle.putString("path",pt);      bundle.putString("name",fn);      this.callback.callback(bundle);      return;    } else     if (fl.isDirectory()) {      path=pt;    }  }  this.refreshFileList();}  }
class C{  public void deleteGroupMember(Integer groupId,Integer userId) throws IOException {  String tailUrl=GitlabGroup.URL + "/" + groupId+ "/"+ GitlabGroupMember.URL+ "/"+ userId;  retrieve().method("DELETE").to(tailUrl,Void.class);}  }
class C{  void addFillComponents(Container panel,int[] cols,int[] rows){  Dimension filler=new Dimension(10,10);  boolean filled_cell_11=false;  CellConstraints cc=new CellConstraints();  if (cols.length > 0 && rows.length > 0) {    if (cols[0] == 1 && rows[0] == 1) {      panel.add(Box.createRigidArea(filler),cc.xy(1,1));      filled_cell_11=true;    }  }  for (int index=0; index < cols.length; index++) {    if (cols[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));  }  for (int index=0; index < rows.length; index++) {    if (rows[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));  }}  }
class C{  public char readCPI(){  if (opcode == Bytecodes.LDC) {    return (char)Bytes.beU1(code,curBCI + 1);  }  return (char)Bytes.beU2(code,curBCI + 1);}  }
class C{  public static Bitmap decodeResource(final Context context,final String resourceName){  Resources resources=context.getResources();  BitmapFactory.Options opt=new BitmapFactory.Options();  opt.inMutable=true;  return BitmapFactory.decodeResource(resources,getResourceIdentifierForDrawable(context,resourceName),opt);}  }
class C{  public FreshestCRLExtension(Boolean critical,Object value) throws IOException {  super(PKIXExtensions.FreshestCRL_Id,critical.booleanValue(),value,NAME);}  }
class C{  private static void do_replace(GlobData rdata,Context cx,RegExpImpl regExpImpl){  StringBuilder charBuf=rdata.charBuf;  int cp=0;  String da=rdata.repstr;  int dp=rdata.dollar;  if (dp != -1) {    int[] skip=new int[1];    do {      int len=dp - cp;      charBuf.append(da.substring(cp,dp));      cp=dp;      SubString sub=interpretDollar(cx,regExpImpl,da,dp,skip);      if (sub != null) {        len=sub.length;        if (len > 0) {          charBuf.append(sub.str,sub.index,sub.index + len);        }        cp+=skip[0];        dp+=skip[0];      } else {        ++dp;      }      dp=da.indexOf('$',dp);    } while (dp >= 0);  }  int daL=da.length();  if (daL > cp) {    charBuf.append(da.substring(cp,daL));  }}  }
class C{  public static void e(Object... msg){  if (LuaViewConfig.isDebug()) {    Log.e(DEFAULT_PREFIX,getMsg(msg));  }}  }
class C{  public boolean isDifficultyScaled(){  return this.damageSourceEntity != null && this.damageSourceEntity instanceof EntityLivingBase && !(this.damageSourceEntity instanceof EntityPlayer);}  }
class C{  private void removeSuspendedTransactionSubKeyList(){  if (sessionCtx == null || sessionCtx.getContextData() == null || sessionCtx.getContextData().get(SUSPENDED_SUBSCRIPTIONS_IN_TRANSACTION) == null)   return;  sessionCtx.getContextData().remove(SUSPENDED_SUBSCRIPTIONS_IN_TRANSACTION);}  }
class C{  public int unpackId(final long packedVal){  long unpackedId=(packedVal & ~ID_MASK) >> 58;  return (int)unpackedId;}  }
class C{  public static void logPersistence(String regionName,InternalDistributedMember source,PersistentMemberID disk){  GRAPH_LOGGER.logTransition(GraphType.REGION,regionName,"persist","persisted",source,disk.diskStoreId);}  }
class C{  private void handleJsonCreateQuotation(RequestAndResponse requestAndResponse) throws IOException, ServletException {  requestAndResponse.setResponseContentTypeJson();  String url;  String title;  String quotation;  String note;  String sessionId;  try {    final JsonNodeHelper json=getJsonNode(requestAndResponse);    url=json.getString(DbLogic.Constants.url);    title=json.getString(DbLogic.Constants.title);    quotation=json.getString(DbLogic.Constants.quotation);    note=json.getString(DbLogic.Constants.note);    sessionId=json.getString("sessionId");  } catch (  final IOException e) {    returnJson400(requestAndResponse,servletText.errorJson());    return;  }  if (!EntryAttributeValidator.isNoteValid(note)) {    returnJson400(requestAndResponse,servletText.errorNoteIsInvalid());    return;  }  if (!EntryAttributeValidator.isQuotationValid(quotation)) {    returnJson400(requestAndResponse,servletText.errorQuotationIsInvalid());    return;  }  if (!EntryAttributeValidator.isUrlValid(url)) {    returnJson400(requestAndResponse,servletText.errorUrlIsInvalid());    return;  }  if (!EntryAttributeValidator.isSourceTitleValid(title)) {    returnJson400(requestAndResponse,servletText.errorTitleIsInvalid());    return;  }  final Errors errors=new Errors();  try {    final Long time=new Long(System.currentTimeMillis());    String userId=null;    if (sessionManager != null) {      final HttpSession session=sessionManager.getSession(sessionId);      if (session != null && session.getAttribute(sessionUserIdAttribute) != null) {        userId=(String)session.getAttribute(sessionUserIdAttribute);      }    }    final User user=dbLogic.getUserById(userId);    if (user == null) {      returnJson400(requestAndResponse,servletText.errorNoAccountFound());      return;    }    if (user.getIsAccountClosed()) {      returnJson400(requestAndResponse,servletText.errorAccountIsClosed());      return;    }    final Entry source=dbLogic.updateOrCreateSource(user,null,url,title,time,time,isUserAnAdmin(requestAndResponse),errors);    if (source == null) {      returnJson400(requestAndResponse,errors);      return;    }    final Entry entry=dbLogic.createEntryQuotation(user,source,quotation,note,time,isUserAnAdmin(requestAndResponse),errors);    if (entry == null) {      returnJson400(requestAndResponse,errors);      return;    }    requestAndResponse.print("{\"success\":true, " + "\"quotationId\":\"" + entry.getId() + "\","+ "\"sourceId\":\""+ source.getId()+ "\"}");    dbLogic.commit();  } catch (  final PersistenceException e) {    logger.log(Level.INFO,"Exception",e);    returnJson500(requestAndResponse,servletText.errorInternalDatabase());  }}  }
class C{  private int ensureHeightGridAligned(int height){  float gridOverhang=height % FOUR_DIP;  if (gridOverhang != 0) {    extraBottomPadding=(int)(FOUR_DIP - Math.ceil(gridOverhang));  }  return extraBottomPadding;}  }
class C{  private boolean zzRefill(){  return zzCurrentPos >= s.offset + s.count;}  }
class C{  public static void fill(char[] a,char val){  fill(a,0,a.length,val);}  }
class C{  public PubsubFuture<Void> modifyAckDeadline(final String project,final String subscription,final int ackDeadlineSeconds,final String... ackIds){  return modifyAckDeadline(project,subscription,ackDeadlineSeconds,asList(ackIds));}  }
class C{  protected synchronized void stopListeners(){  LocationManager lm=getLocationManager();  if (mListeners != null) {    for (    LocationTrackingListener listener : mListeners) {      lm.removeUpdates(listener);    }    mListeners.clear();  }  mListeners=null;  if (mTelephonyManager != null) {    mTelephonyManager.listen(mPhoneStateListener,0);  }  if (mNetwork != null) {    unregisterReceiver(mNetwork);  }  mNetwork=null;  mTrackerData=null;  if (mPrefListener != null) {    getPreferences().unregisterOnSharedPreferenceChangeListener(mPrefListener);    mPrefListener=null;  }}  }
class C{  public double intercept(){  return intercept;}  }
class C{  private void changeStarAlPha(){  starContainer.clearAnimation();  float endAlpha=1 - CircularSkyView.getMixRatio(systemTime,exchangeTimes,TimeUtils.getInstance(getContext()).isDay);  if (endAlpha < 0.07) {    endAlpha=0;  }  StarAlphaAnimation animation=new StarAlphaAnimation(starContainer.getAlpha(),endAlpha);  animation.setDuration(500);  starContainer.startAnimation(animation);}  }
class C{  public static String encodeWebSafe(byte[] source,boolean doPadding){  return encode(source,0,source.length,WEBSAFE_ALPHABET,doPadding);}  }
class C{  public static void displaySnack(View aTargetView,CharSequence aTextToDisplay){  Snackbar.make(aTargetView,aTextToDisplay,Snackbar.LENGTH_SHORT).show();}  }
class C{  public void onSaveRingtone(Uri ringtoneUri){  persistString(ringtoneUri != null ? ringtoneUri.toString() : "");}  }
class C{  private static String gcsPathToUri(String backupGcsPath){  checkArgument(backupGcsPath.startsWith("/gs/"),"GCS path not in expected format");  return backupGcsPath.replaceFirst("/gs/","gs://");}  }
class C{  @SuppressWarnings("unused") public void testBadStreamBounds(){  SplittableRandom r=new SplittableRandom();  Runnable[] throwingActions={null,null,null,null,null,null};  assertThrows(IllegalArgumentException.class,throwingActions);}  }
class C{  protected static void addMergeViews(List<ViewSpec> specifications) throws ViewProcessingException {  if (log.isDebugEnabled()) {    log.debug(".addMergeViews Incoming specifications=" + Arrays.toString(specifications.toArray()));  }  if (specifications.size() > 0) {    ViewSpec lastView=specifications.get(specifications.size() - 1);    ViewEnum viewEnum=ViewEnum.forName(lastView.getObjectNamespace(),lastView.getObjectName());    if ((viewEnum != null) && (viewEnum.getMergeView() != null)) {      throw new ViewProcessingException("Invalid use of the '" + lastView.getObjectNamespace() + ":"+ lastView.getObjectName()+ "' view, the view requires one or more child views to group, or consider using the group-by clause");    }  }  LinkedList<ViewSpec> mergeViewSpecs=new LinkedList<ViewSpec>();  for (  ViewSpec spec : specifications) {    ViewEnum viewEnum=ViewEnum.forName(spec.getObjectNamespace(),spec.getObjectName());    if (viewEnum == null) {      continue;    }    if (viewEnum.getMergeView() == null) {      continue;    }    ViewSpec mergeViewSpec=new ViewSpec(viewEnum.getMergeView().getNamespace(),viewEnum.getMergeView().getName(),spec.getObjectParameters());    mergeViewSpecs.addFirst(mergeViewSpec);  }  specifications.addAll(mergeViewSpecs);  if (log.isDebugEnabled()) {    log.debug(".addMergeViews Outgoing specifications=" + Arrays.toString(specifications.toArray()));  }}  }
class C{  public void incUnprocessedTokensAddedByPrimary(){  this.stats.incInt(unprocessedTokensAddedByPrimaryId,1);  incUnprocessedTokenMapSize();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:22.477 -0500",hash_original_method="A307AB09C854328394617118B8488FB4",hash_generated_method="21D69661C156659C4711B970FA99E9E3") public void release(){  if (isBusy()) {    throw new IllegalStateException("Busy");  }  close();}  }
class C{  public boolean isReadableEntryId(SnmpOid rowOid,long var,Object data) throws SnmpStatusException {  return node.isReadable(var);}  }
class C{  public boolean rejectIt(){  log.info(toString());  setIsApproved(false);  return true;}  }
class C{  public TreePath(CompilationUnitTree t){  this(null,t);}  }
class C{  public boolean swap(int fromR,int fromC,int toR,int toC){  if (!isAdjacentAndEmpty(fromR,fromC,toR,toC)) {    return false;  }  int tmp=board[toR][toC];  board[toR][toC]=board[fromR][fromC];  board[fromR][fromC]=tmp;  return true;}  }
class C{  public final Vec3D subSelf(Vec3D v){  x-=v.x;  y-=v.y;  z-=v.z;  return this;}  }
class C{  public boolean isValid(){  return !isNullOrEmpty(type,subType,pos,source,target);}  }
class C{  private ClassInterface checkParentInFile(String parentName,CodeAnalysisResults results){  for (  ClassInterface clazz : results.getClasses()) {    if (!clazz.equals(results.getActiveClass()) && clazz.getShortName().equalsIgnoreCase(parentName)) {      return clazz;    }  }  return null;}  }
class C{  @Override public boolean isFormatSupported(String mimeType){  return supportedFormats.contains(mimeType);}  }
class C{  public BitemporalMapper pattern(String pattern){  this.pattern=pattern;  return this;}  }
class C{  int update(final String table,final ContentValues values,final String whereClause,final String[] whereArgs,final boolean autoNotify){  final SQLiteDatabase database=getWritableDatabase();  final int updateCount=database.update(table,values,whereClause,whereArgs);  if (autoNotify && (updateCount > 0)) {    notifyChange(table);  }  return updateCount;}  }
class C{  public static void showMessageDialog(Component parentComponent,Object message,String title,int messageType,Icon icon) throws HeadlessException {  showOptionDialog(parentComponent,message,title,DEFAULT_OPTION,messageType,icon,null,null);}  }
class C{  @Override public void flush() throws IOException {  flushBytes(true);}  }
class C{  public static IStub CreateStub(IDownloaderService itf){  return new Stub(itf);}  }
class C{  public synchronized StringBuffer append(char[] chars){  append0(chars);  return this;}  }
class C{  public MOEAD(Problem problem,int neighborhoodSize,Initialization initialization,Variation variation,double delta,double eta){  this(problem,neighborhoodSize,initialization,variation,delta,eta,-1);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:09.735 -0500",hash_original_method="889B57ADA5D9BFE59490AB224C7E16F7",hash_generated_method="A32291CA34CEFE2E8D14480FD123B643") public boolean hasQValue(){  return hasParameter("q");}  }
class C{  public <CTX>SafeHtml sanitize(@Nullable String html,@Nullable HtmlChangeListener<CTX> listener,@Nullable CTX context){  if (html == null) {    return SafeHtml.EMPTY;  }  return UncheckedConversions.safeHtmlFromStringKnownToSatisfyTypeContract(f.sanitize(html,listener,context));}  }
class C{  private void clearSubtreeWithOldAccessibilityFocusLocked(long currentAccessibilityFocusId){  final int cacheSize=mCacheImpl.size();  for (int i=0; i < cacheSize; i++) {    AccessibilityNodeInfo info=mCacheImpl.valueAt(i);    final long infoSourceId=info.getSourceNodeId();    if (infoSourceId != currentAccessibilityFocusId && info.isAccessibilityFocused()) {      clearSubTreeLocked(infoSourceId);      return;    }  }}  }
class C{  public <T extends Point2D>T inverse(double x,double y,T ret){  Point2D pnt=new Point2D.Double(x + rotXOffset,y + rotYOffset);  try {    pnt=rotTransform.inverseTransform(pnt,pnt);    return getProjection().inverse(pnt,ret);  } catch (  NoninvertibleTransformException e) {    logger.log(Level.FINE,e.getMessage(),e);  }  return ret;}  }
class C{  public double[] computeLocalEntropyFromPreviousObservations(double states[][]){  int timeSteps=states.length;  double[] localEntropy=new double[timeSteps];  double prob;  for (int b=0; b < totalObservations; b++) {    prob=mvke.getProbability(states[b]);    localEntropy[b]=0.0;    if (prob > 0.0) {      localEntropy[b]=-Math.log(prob) / Math.log(2.0);    }    if (debug) {      System.out.println(b + ": " + prob+ " -> "+ localEntropy[b]);    }  }  return localEntropy;}  }
class C{  protected void backoff(long backoff){  this.pos-=backoff;}  }
class C{  public ServiceActivatorArchiveImpl(ArchiveBase<?> archive){  super(archive);  if (getArchive().getName().endsWith(".war")) {    Node node=getArchive().get("WEB-INF/classes/META-INF/services/" + ServiceActivator.class.getName());    if (node != null) {      Asset maybeCorrect=node.getAsset();      if (maybeCorrect instanceof ServiceActivatorAsset) {        this.asset=(ServiceActivatorAsset)maybeCorrect;      } else {        this.asset=new ServiceActivatorAsset(maybeCorrect.openStream());      }    } else {      this.asset=new ServiceActivatorAsset();      getArchive().add(this.asset,"WEB-INF/classes/META-INF/services/" + ServiceActivator.class.getName());    }  } else   if (getArchive().getName().endsWith(".jar")) {    Node node=getArchive().get("META-INF/services/" + ServiceActivator.class.getName());    if (node != null) {      this.asset=(ServiceActivatorAsset)node.getAsset();    } else {      this.asset=new ServiceActivatorAsset();      getArchive().add(this.asset,"META-INF/services/" + ServiceActivator.class.getName());    }  }}  }
class C{  public static void insertTopic(List<ITopic> topics,ITopic topic){  if (topics == null || topics.size() == 0 || topics.contains(topic)) {    return;  }  List<ITopic> allTopics=MindMapUtils.getAllTopics(topic.getOwnedSheet(),true,true);  int index=allTopics.indexOf(topic);  for (int i=index + 1; i < allTopics.size(); i++) {    ITopic t=allTopics.get(i);    if (topics.contains(t)) {      topics.add(topics.indexOf(t),topic);      return;    }  }  topics.add(topic);}  }
class C{  public void willBeHidden(){  if (fragmentContainer != null) {    Animation fadeOut=AnimationUtils.loadAnimation(getActivity(),R.anim.fade_out);    fragmentContainer.startAnimation(fadeOut);  }}  }
class C{  public Size2D arrange(Graphics2D g2){  return arrange(g2,RectangleConstraint.NONE);}  }
class C{  public final Message obtainMessage(int what,int arg1,int arg2){  return Message.obtain(mSmHandler,what,arg1,arg2);}  }
class C{  public void configure(){  EasyDccTrafficController control=EasyDccTrafficController.instance();  control.connectPort(this);  this.getSystemConnectionMemo().setEasyDccTrafficController(control);  this.getSystemConnectionMemo().configureManagers();  jmri.jmrix.easydcc.ActiveFlag.setActive();}  }
class C{  public void updateButton(){  if (m_graph.getSettings().getDisplaySettings().getMagnifyingGlassMode()) {    selectButton();  } else {    unselectButton();  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ACTIVITY___ANONYMOUS_ACTIVITY_11:    return anonymous_activity_1_1 != null && !anonymous_activity_1_1.isEmpty();case UmplePackage.ACTIVITY___CODE_1:  return CODE_1_EDEFAULT == null ? code_1 != null : !CODE_1_EDEFAULT.equals(code_1);case UmplePackage.ACTIVITY___ANONYMOUS_ACTIVITY_21:return anonymous_activity_2_1 != null && !anonymous_activity_2_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  private void clearListenerInViewGroup(ViewGroup viewGroup){  if (null == viewGroup) {    return;  }  int count=viewGroup.getChildCount();  for (int n=0; n < count; ++n) {    View childView=viewGroup.getChildAt(n);    if (childView instanceof Switch) {      final Switch switchView=(Switch)childView;      switchView.setOnCheckedChangeListener(null);      return;    } else     if (childView instanceof ViewGroup) {      ViewGroup childGroup=(ViewGroup)childView;      clearListenerInViewGroup(childGroup);    }  }}  }
class C{  @Override public int hashCode(){  return this.hashCode;}  }
class C{  public static int indexOf(char[] array,char value,int startIndex,int endIndex){  for (int i=startIndex; i < endIndex; i++) {    if (array[i] == value) {      return i;    }  }  return -1;}  }
class C{  public X509Name(String dirName){  this(DefaultReverse,DefaultLookUp,dirName);}  }
class C{  public void onDisconnect(){  onCancelAllRealtimeData();  if (m_client.isConnected()) {    for (    String accountNumber : m_accountRequests.keySet()) {      this.onCancelAccountUpdates(accountNumber);    }    m_client.eDisconnect();  }  this.fireConnectionClosed(false);}  }
class C{  @Autowired public DeleteTellerCommandHandler(final TellerWritePlatformService writePlatformService){  super();  this.writePlatformService=writePlatformService;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean hasEntry(){  return hasElement(Entry.KEY);}  }
class C{  public static String toHexString(int i){  return IntegralToString.intToHexString(i,false,0);}  }
class C{  public static byte[] encodeBase64URLSafe(byte[] binaryData){  return org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(binaryData);}  }
class C{  public boolean hasAdditionalRoleInfos(){  return hasRepeatingExtension(AdditionalRoleInfo.class);}  }
class C{  private void writeObject(java.io.ObjectOutputStream out) throws IOException {  out.writeObject(this.name);  out.writeObject(this.description);  out.writeObject(this.value);  out.writeObject(this.type);  out.writeBoolean(this.userModifiable);}  }
class C{  public DefaultDownloadRequest(String url,RequestMethod requestMethod,String fileFolder,String filename,boolean isRange,boolean isDeleteOld){  this(url,requestMethod,fileFolder,filename,false,isRange,isDeleteOld);}  }
class C{  @Override public void process(V tuple){  nval+=tuple.doubleValue();}  }
class C{  public boolean addRules(ArrayList<Rule> ruleList){  for (int i=0; i < ruleList.size(); i++) {    if (!super.validRule(ruleList.get(i))) {      return false;    }    if (!validRule(ruleList.get(i))) {      return false;    }  }  this.rules=ruleList;  updateVarsAndTerminals();  return true;}  }
class C{  public String toString(){  return name;}  }
class C{  public void save(DataOutput dataOutput) throws IOException {}  }
class C{  public Type1Message(){  this(getDefaultFlags(),getDefaultDomain(),getDefaultWorkstation());}  }
class C{  public static String escape(String s){  if (s == null)   return null;  StringBuffer sb=new StringBuffer();  escape(s,sb);  return sb.toString();}  }
class C{  public void replace(int position,int length,char[] text){  if (!isReadOnly()) {    int textLength=text == null ? 0 : text.length;synchronized (this.lock) {      if (this.contents == null)       return;      moveAndResizeGap(position + length,textLength - length);      int min=Math.min(textLength,length);      if (min > 0) {        System.arraycopy(text,0,this.contents,position,min);      }      if (length > textLength) {        this.gapStart-=length - textLength;      } else       if (textLength > length) {        this.gapStart+=textLength - length;        System.arraycopy(text,0,this.contents,position,textLength);      }      this.flags|=F_HAS_UNSAVED_CHANGES;    }    String string=null;    if (textLength > 0) {      string=new String(text);    }    notifyChanged(new BufferChangedEvent(this,position,length,string));  }}  }
class C{  public void position(long pos){  log.debug("Position: {}",pos);  log.debug("Current frame: {}",currentFrame);  int len=frames.size();  MP4Frame frame=null;  for (int f=0; f < len; f++) {    frame=frames.get(f);    long offset=frame.getOffset();    if (pos == offset || (offset > pos && frame.isKeyFrame())) {      if (!frame.isKeyFrame()) {        log.debug("Frame #{} was not a key frame, so trying again..",f);        continue;      }      log.info("Frame #{} found for seek: {}",f,frame);      createPreStreamingTags((int)(frame.getTime() * 1000),true);      currentFrame=f;      break;    }    prevVideoTS=(int)(frame.getTime() * 1000);  }  log.debug("Setting current frame: {}",currentFrame);}  }
class C{  public static String toName(Class<?> type){  return class2Name.get(type);}  }
class C{  public void add(final URI uri){  this.uris.add(uri);}  }
class C{  @Override public String toString(){  return getFullMapping().toString();}  }
class C{  public boolean isIPVideoCallSupported(){  return false;}  }
class C{  public byte[] toByteArray() throws IllegalStateException {  if (nulled) {    throw new IllegalStateException(res.getString("NoGetPasswordNulled.message"));  }  if (wrappedPassword == null) {    return null;  }  byte[] passwordBytes=new byte[wrappedPassword.length];  for (int i=0; i < wrappedPassword.length; i++) {    passwordBytes[i]=(byte)wrappedPassword[i];  }  return passwordBytes;}  }
class C{  private String sendResponseToBesServer(Map<String,?> sessionParams) throws IOException {  String redirectURL=getParameterValue(sessionParams,"FRONTEND.RESPONSE_URL");  String choice=getParameterValue(sessionParams,"result");  HttpClient httpClient=new HttpClient();  PostMethod postMethod=new PostMethod(redirectURL);  Iterator<String> it=sessionParams.keySet().iterator();  String key;  while (it.hasNext()) {    key=it.next();    postMethod.addParameter(key,getParameterValue(sessionParams,key));  }  boolean wasCancelled="Cancel".equals(choice);  if (wasCancelled) {    postMethod.addParameter("FRONTEND.REQUEST.CANCELLED","true");  }  postMethod.addParameter("PROCESSING.RESULT","ACK");  postMethod.addParameter("PROCESSING.CODE","000.000.000");  postMethod.addParameter("PROCESSING.RETURN","000.000.000");  postMethod.addParameter("PROCESSING.RETURN.CODE","000.000.000");  postMethod.addParameter("PROCESSING.REASON","90.00");  postMethod.addParameter("PROCESSING.TIMESTAMP",String.valueOf(System.currentTimeMillis()));  postMethod.addParameter("IDENTIFICATION.UNIQUEID","12345");  postMethod.addParameter("ACCOUNT.NUMBER","1100101");  postMethod.addParameter("ACCOUNT.BRAND","Mock Platin Card");  postMethod.addParameter("ACCOUNT.EXPIRY_MONTH","09");  postMethod.addParameter("ACCOUNT.EXPIRY_YEAR","19");  postMethod.addParameter("ACCOUNT.BANK","Mock Bank");  postMethod.addParameter("ACCOUNT.BANKNAME","08154711");  httpClient.executeMethod(postMethod);  String responseURL=postMethod.getResponseBodyAsString();  return responseURL;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:45.677 -0500",hash_original_method="A1363D8F4C336B0A08C904C28B9D0448",hash_generated_method="FF55DCE7800A970FD612A052C53A3446") public static int findRowIdColumnIndex(String[] columnNames){  int length=columnNames.length;  for (int i=0; i < length; i++) {    if (columnNames[i].equals("_id")) {      return i;    }  }  return -1;}  }
class C{  public RFuture<Boolean> sysDialog(String title,String text,String ok,String cancel){  return RFuture.failure(new Exception("sysDialog not supported"));}  }
class C{  public static boolean isInstalledWithNpm(String command){  return new File(getNpmPath(command)).exists();}  }
class C{  public void preInit(XCreateWindowParams params){  super.preInit(params);  items=new Vector();  createVerScrollbar();  createHorScrollbar();  painter=new ListPainter();  bgColorSet=target.isBackgroundSet();  fgColorSet=target.isForegroundSet();}  }
class C{  public Sequence createSequence(){  SequenceImpl sequence=new SequenceImpl();  return sequence;}  }
class C{  public Shape createInternalDropShadowRounded(final int x,final int y,final int w,final int h){  final double radius=h / 2;  final int right=x + w;  final double bottom=y + radius;  path.reset();  path.moveTo(x,bottom);  path.quadTo(x,y,x + radius,y);  path.lineTo(right - radius,y);  path.quadTo(right,y,right,bottom);  path.lineTo(right - 1,bottom);  path.quadTo(right - 2,y + 2,right - radius - 1,y + 2);  path.lineTo(x + radius + 1,y + 2);  path.quadTo(x + 2,y + 2,x + 1,bottom);  path.closePath();  return path;}  }
class C{  private List<CategoryDataset> datasetsMappedToRangeAxis(int axisIndex){  List<CategoryDataset> result=new ArrayList<CategoryDataset>();  for (  Entry<Integer,CategoryDataset> entry : this.datasets.entrySet()) {    Integer datasetIndex=entry.getKey();    CategoryDataset dataset=entry.getValue();    List mappedAxes=(List)this.datasetToRangeAxesMap.get(datasetIndex);    if (mappedAxes == null) {      if (axisIndex == 0) {        result.add(dataset);      }    } else {      if (mappedAxes.contains(axisIndex)) {        result.add(dataset);      }    }  }  return result;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:58.867 -0500",hash_original_method="6C22D1F22186A9470913B31F85269FC3",hash_generated_method="6C22D1F22186A9470913B31F85269FC3") boolean _stateIsDont(int option){  return !_stateIsDo(option);}  }
class C{  public JSONArray(JSONArray array){  this(array,false);}  }
class C{  private char[][] decodeParameterTypes(char[] signature,boolean firstIsSynthetic) throws ClassFormatException {  if (signature == null)   return null;  int indexOfClosingParen=CharOperation.lastIndexOf(')',signature);  if (indexOfClosingParen == 1) {    return null;  }  if (indexOfClosingParen == -1) {    throw new ClassFormatException(ClassFormatException.ErrInvalidMethodSignature);  }  char[][] parameterTypes=new char[3][];  int parameterTypesCounter=0;  int arrayDim=0;  for (int i=1; i < indexOfClosingParen; i++) {    if (parameterTypesCounter == parameterTypes.length) {      System.arraycopy(parameterTypes,0,(parameterTypes=new char[parameterTypesCounter * 2][]),0,parameterTypesCounter);    }switch (signature[i]) {case 'B':      parameterTypes[parameterTypesCounter++]=BYTE;    if (arrayDim > 0)     convertToArrayType(parameterTypes,parameterTypesCounter - 1,arrayDim);  arrayDim=0;break;case 'C':parameterTypes[parameterTypesCounter++]=CHAR;if (arrayDim > 0) convertToArrayType(parameterTypes,parameterTypesCounter - 1,arrayDim);arrayDim=0;break;case 'D':parameterTypes[parameterTypesCounter++]=DOUBLE;if (arrayDim > 0) convertToArrayType(parameterTypes,parameterTypesCounter - 1,arrayDim);arrayDim=0;break;case 'F':parameterTypes[parameterTypesCounter++]=FLOAT;if (arrayDim > 0) convertToArrayType(parameterTypes,parameterTypesCounter - 1,arrayDim);arrayDim=0;break;case 'I':parameterTypes[parameterTypesCounter++]=INT;if (arrayDim > 0) convertToArrayType(parameterTypes,parameterTypesCounter - 1,arrayDim);arrayDim=0;break;case 'J':parameterTypes[parameterTypesCounter++]=LONG;if (arrayDim > 0) convertToArrayType(parameterTypes,parameterTypesCounter - 1,arrayDim);arrayDim=0;break;case 'L':int indexOfSemiColon=CharOperation.indexOf(';',signature,i + 1);if (indexOfSemiColon == -1) throw new ClassFormatException(ClassFormatException.ErrInvalidMethodSignature);if (firstIsSynthetic && parameterTypesCounter == 0) {firstIsSynthetic=false;} else {parameterTypes[parameterTypesCounter++]=replace('/','.',CharOperation.subarray(signature,i + 1,indexOfSemiColon));if (arrayDim > 0) convertToArrayType(parameterTypes,parameterTypesCounter - 1,arrayDim);}i=indexOfSemiColon;arrayDim=0;break;case 'S':parameterTypes[parameterTypesCounter++]=SHORT;if (arrayDim > 0) convertToArrayType(parameterTypes,parameterTypesCounter - 1,arrayDim);arrayDim=0;break;case 'Z':parameterTypes[parameterTypesCounter++]=BOOLEAN;if (arrayDim > 0) convertToArrayType(parameterTypes,parameterTypesCounter - 1,arrayDim);arrayDim=0;break;case '[':arrayDim++;break;default :throw new ClassFormatException(ClassFormatException.ErrInvalidMethodSignature);}}if (parameterTypes.length != parameterTypesCounter) {System.arraycopy(parameterTypes,0,parameterTypes=new char[parameterTypesCounter][],0,parameterTypesCounter);}return parameterTypes;}  }
class C{  @Benchmark public void unlimitedSynchronizedWeakCache(){  run();}  }
class C{  private void addToPanel(FlowPanel panel,Action action,PresentationFactory presentationFactory){  Presentation presentation=presentationFactory.getPresentation(action);  if (action instanceof Separator) {    panel.add(new SeparatorItem(resources.menuCss().panelSeparator()));  } else   if (action instanceof CustomComponentAction) {    CustomComponentAction customComponentAction=(CustomComponentAction)action;    Widget component=customComponentAction.createCustomComponent(presentation);    component.addStyleName(resources.menuCss().customComponent());    panel.add(component);  }}  }
class C{  public boolean canEncode(char ch){  int index;  int theBytes;  index=index1[((ch & mask1) >> shift)] + (ch & mask2);  if (index < 15000)   theBytes=(int)(index2.charAt(index)); else   theBytes=(int)(index2a.charAt(index - 15000));  if (theBytes != 0)   return true;  return (ch == '\u0000');}  }
class C{  public void checkAdmin(){  if (!admin) {    throw DbException.get(ErrorCode.ADMIN_RIGHTS_REQUIRED);  }}  }
class C{  private String readValue(char delimiter,boolean resolveEntities,boolean throwOnResolveFailure,ValueContext valueContext) throws IOException, XmlPullParserException {  int start=position;  StringBuilder result=null;  if (valueContext == ValueContext.TEXT && text != null) {    result=new StringBuilder();    result.append(text);  }  while (true) {    if (position >= limit) {      if (start < position) {        if (result == null) {          result=new StringBuilder();        }        result.append(buffer,start,position - start);      }      if (!fillBuffer(1)) {        return result != null ? result.toString() : "";      }      start=position;    }    char c=buffer[position];    if (c == delimiter || (delimiter == ' ' && (c <= ' ' || c == '>')) || c == '&' && !resolveEntities) {      break;    }    if (c != '\r' && (c != '\n' || valueContext != ValueContext.ATTRIBUTE) && c != '&' && c != '<' && (c != ']' || valueContext != ValueContext.TEXT) && (c != '%' || valueContext != ValueContext.ENTITY_DECLARATION)) {      isWhitespace&=(c <= ' ');      position++;      continue;    }    if (result == null) {      result=new StringBuilder();    }    result.append(buffer,start,position - start);    if (c == '\r') {      if ((position + 1 < limit || fillBuffer(2)) && buffer[position + 1] == '\n') {        position++;      }      c=(valueContext == ValueContext.ATTRIBUTE) ? ' ' : '\n';    } else     if (c == '\n') {      c=' ';    } else     if (c == '&') {      isWhitespace=false;      readEntity(result,false,throwOnResolveFailure,valueContext);      start=position;      continue;    } else     if (c == '<') {      if (valueContext == ValueContext.ATTRIBUTE) {        checkRelaxed("Illegal: \"<\" inside attribute value");      }      isWhitespace=false;    } else     if (c == ']') {      if ((position + 2 < limit || fillBuffer(3)) && buffer[position + 1] == ']' && buffer[position + 2] == '>') {        checkRelaxed("Illegal: \"]]>\" outside CDATA section");      }      isWhitespace=false;    } else     if (c == '%') {      throw new XmlPullParserException("This parser doesn't support parameter entities",this,null);    } else {      throw new AssertionError();    }    position++;    result.append(c);    start=position;  }  if (result == null) {    return stringPool.get(buffer,start,position - start);  } else {    result.append(buffer,start,position - start);    return result.toString();  }}  }
class C{  public void clear(){  minNode=null;  nNodes=0;}  }
class C{  public double compute(long... dataset){  return computeInPlace(longsToDoubles(dataset));}  }
class C{  @Deprecated public static int[] readInts(){  return readAllInts();}  }
class C{  public static void encodeFileToFile(String infile,String outfile) throws java.io.IOException {  String encoded=Base64.encodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(encoded.getBytes("US-ASCII"));  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  private void flushInternal() throws IOException {  if (pos > 0) {    out.write(buf,0,pos);  }  pos=0;}  }
class C{  static String parseATAV(String str,boolean toXml) throws IOException {  int i=str.indexOf('=');  if ((i == -1) || ((i > 0) && (str.charAt(i - 1) == '\\'))) {    return str;  }  String attrType=normalizeAT(str.substring(0,i));  String attrValue=null;  if (attrType.charAt(0) >= '0' && attrType.charAt(0) <= '9') {    attrValue=str.substring(i + 1);  } else {    attrValue=normalizeV(str.substring(i + 1),toXml);  }  return attrType + "=" + attrValue;}  }
class C{  private void printWDImageConfigLog(FrescoPlusConfig frescoPlusConfig){  if (isDebug) {    Log.d(FrescoPlusInitializer.getInstance().getLogTag(),"FrescoPlusInitializer init...Config:" + "DiskCacheDir->" + frescoPlusConfig.getDiskCacheDir() + ",MaxDiskCacheSize->"+ frescoPlusConfig.getMaxDiskCacheSize()+ ",BitmapConfig->"+ frescoPlusConfig.getBitmapConfig()+ ",IsDebug->"+ frescoPlusConfig.isDebug()+ ",Tag->"+ frescoPlusConfig.getLogTag());  }}  }
class C{  public static Address adjustRegion(int alignCode,Address region){  assertSanity(alignCode);  if (alignCode == ALIGN_CODE_NONE)   return region;  final Address limit=region.plus(padding(alignCode));  if (VERBOSE) {    VM.sysWrite("Allocating TIB: region = ",region," tib code = ",getTibCodeForRegion(region));    VM.sysWriteln(", requested = ",alignCode);  }  while (getTibCodeForRegion(region) != alignCode) {    Address next=region.plus(ALIGNMENT_INCREMENT);    while (region.LT(next)) {      if (VM.runningVM) {        region.store(ALIGNMENT_VALUE);      }      region=region.plus(BYTES_IN_INT);    }    if (region.GT(limit)) {      VM.sysFail("Tib alignment fail");    }  }  if (VERBOSE) {    VM.sysWrite("           TIB: region = ",region," tib code = ",getTibCodeForRegion(region));    VM.sysWriteln(", requested = ",alignCode);  }  return region;}  }
class C{  public static <K,V,M extends Map<K,V>>SynchronizedMutableMap<K,V> of(M map,Object lock){  if (map == null) {    throw new IllegalArgumentException("cannot create a SynchronizedMutableMap for null");  }  return new SynchronizedMutableMap<>(MapAdapter.adapt(map),lock);}  }
class C{  @Override public void check(final BiPredicate<A,B> property){  final TheoryRunner<Pair<A,B>,Pair<A,B>> qc=TheoryRunner.runner(this.state.get(),combine(),convertPredicate());  qc.check(null);}  }
class C{  public final void testIsStatePreserved2(){  RSAOtherPrimeInfo[] opi1=opi.clone();  RSAMultiPrimePrivateCrtKeySpec ks=new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,opi1);  RSAOtherPrimeInfo[] ret=ks.getOtherPrimeInfo();  ret[2]=new RSAOtherPrimeInfo(BigInteger.ZERO,BigInteger.ZERO,BigInteger.ZERO);  assertTrue(checkOtherPrimeInfo(ks.getOtherPrimeInfo()));}  }
class C{  public final void removeCols(int[] cols){  int[] rows=new int[data.length];  for (int i=0; i < data.length; i++) {    rows[i]=i;  }  int[] retainedCols=new int[variables.size() - cols.length];  int i=-1;  for (int j=0; j < variables.size(); j++) {    if (Arrays.binarySearch(cols,j) < 0) {      retainedCols[++i]=j;    }  }  List<Node> retainedVars=new LinkedList<>();  for (  int retainedCol : retainedCols) {    retainedVars.add(variables.get(retainedCol));  }  data=viewSelection(rows,cols);  variables=retainedVars;  selection=new HashSet<>();  knowledge=knowledge.copy();}  }
class C{  public boolean isFullSentence(){  return sourceLength() == this.sentencePair.sourceLength() && targetLength() == this.sentencePair.targetLength();}  }
class C{  public JsonPath buildPath(String path){  String[] strings=splitPath(path);  if (strings.length == 0 || (strings.length == 1 && "".equals(strings[0]))) {    throw new ResourceException("Path is empty");  }  JsonPath previousJsonPath=null, currentJsonPath=null;  PathIds pathIds;  boolean relationshipMark;  String elementName;  for (int currentElementIdx=0; currentElementIdx < strings.length; ) {    elementName=null;    pathIds=null;    relationshipMark=false;    if (RELATIONSHIP_MARK.equals(strings[currentElementIdx])) {      relationshipMark=true;      currentElementIdx++;    }    if (currentElementIdx < strings.length && !RELATIONSHIP_MARK.equals(strings[currentElementIdx])) {      elementName=strings[currentElementIdx];      currentElementIdx++;    }    if (currentElementIdx < strings.length && !RELATIONSHIP_MARK.equals(strings[currentElementIdx])) {      pathIds=createPathIds(strings[currentElementIdx]);      currentElementIdx++;    }    RegistryEntry entry=resourceRegistry.getEntry(elementName);    if (previousJsonPath != null) {      currentJsonPath=getNonResourcePath(previousJsonPath,elementName,relationshipMark);      if (pathIds != null) {        throw new ResourceException("RelationshipsPath and FieldPath cannot contain ids");      }    } else     if (entry != null && !relationshipMark) {      currentJsonPath=new ResourcePath(elementName);    } else {      throw new ResourceNotFoundException(path);    }    if (pathIds != null) {      currentJsonPath.setIds(pathIds);    }    if (previousJsonPath != null) {      previousJsonPath.setChildResource(currentJsonPath);      currentJsonPath.setParentResource(previousJsonPath);    }    previousJsonPath=currentJsonPath;  }  return currentJsonPath;}  }
class C{  public String replaceAllTipText(){  return "If set to true, then all occurrences of the match will be replaced; " + "otherwise only the first.";}  }
class C{  public void addDeviceListener(DeviceListener l){  if (listeners == null) {    listeners=new ArrayList<DeviceListener>(2);  }  if (!listeners.contains(l)) {    listeners.add(l);  }}  }
class C{  public void finishFragmentsNotIncluding(Answer answer){  ListIterator<Fragment> lic=closingFragments.listIterator();  Arrow arrow=answer.getForwardMessage().getArrow();  while (lic.hasNext()) {    Fragment comment=lic.next();    if (!comment.containsElement(arrow)) {      lic.remove();      finishFragment(comment);    }  }}  }
class C{  public void addParameterValues(org.oscm.xsd.ServiceParameter param){  if (localParameterValues == null) {    localParameterValues=new org.oscm.xsd.ServiceParameter[]{};  }  localParameterValuesTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localParameterValues);  list.add(param);  this.localParameterValues=(org.oscm.xsd.ServiceParameter[])list.toArray(new org.oscm.xsd.ServiceParameter[list.size()]);}  }
class C{  public String nominalLabelSpecsTipText(){  return "Optional specification of legal labels for nominal " + "attributes. May be specified multiple times. " + "Batch mode can determine this "+ "automatically (and so can incremental mode if "+ "the first in memory buffer load of instances "+ "contains an example of each legal value). The "+ "spec contains two parts separated by a \":\". The "+ "first part can be a range of attribute indexes or "+ "a comma-separated list off attruibute names; the "+ "second part is a comma-separated list of labels. E.g "+ "\"1,2,4-6:red,green,blue\" or \"att1,att2:red,green,blue\"";}  }
class C{  protected Key engineUnwrap(byte[] wrappedKey,String wrappedKeyAlgorithm,int wrappedKeyType) throws InvalidKeyException, NoSuchAlgorithmException {  return core.unwrap(wrappedKey,wrappedKeyAlgorithm,wrappedKeyType);}  }
class C{  public synchronized void startPreview(){  OpenCamera theCamera=camera;  if (theCamera != null && !previewing) {    theCamera.getCamera().startPreview();    previewing=true;    autoFocusManager=new AutoFocusManager(context,theCamera.getCamera());  }}  }
class C{  public byte[] encryptDataIntegrity(final byte[] plain){  final byte[] sha=Digest.SHA1(plain);  final byte[] plainSha=Utils.concat(plain,sha);  if (Cfg.DEBUG) {    Check.asserts(sha.length == DIGEST_LENGTH,"sha.length");  }  if (Cfg.DEBUG) {    Check.asserts(plainSha.length == plain.length + DIGEST_LENGTH,"plainSha.length");  }  try {    return crypto.encrypt(plainSha);  } catch (  Exception e) {    if (Cfg.DEBUG) {      Check.log(TAG + " (encryptDataIntegrity) Error: " + e);    }    return null;  }}  }
class C{  private boolean paintNodeIcon(OsmElement element,Canvas canvas,float x,float y,String featureKey){  Bitmap icon=getIcon(element);  if (icon != null) {    float w2=icon.getWidth() / 2f;    float h2=icon.getHeight() / 2f;    if (featureKey != null) {      RectF r=new RectF(x - w2 - iconSelectedBorder,y - h2 - iconSelectedBorder,x + w2 + iconSelectedBorder,y + h2 + iconSelectedBorder);      canvas.drawRoundRect(r,iconSelectedBorder,iconSelectedBorder,DataStyle.getCurrent(featureKey).getPaint());    }    canvas.drawBitmap(icon,x - w2,y - h2,null);    return true;  }  return false;}  }
class C{  public JSONObject append(String key,Object value) throws JSONException {  testValidity(value);  Object object=this.opt(key);  if (object == null) {    this.put(key,new JSONArray().put(value));  } else   if (object instanceof JSONArray) {    this.put(key,((JSONArray)object).put(value));  } else {    throw new JSONException("JSONObject[" + key + "] is not a JSONArray.");  }  return this;}  }
class C{  public void writeState(DataOutputStream stream) throws IOException {  int len=mt.length;  for (int x=0; x < len; x++)   stream.writeInt(mt[x]);  len=mag01.length;  for (int x=0; x < len; x++)   stream.writeInt(mag01[x]);  stream.writeInt(mti);  stream.writeDouble(__nextNextGaussian);  stream.writeBoolean(__haveNextNextGaussian);}  }
class C{  public boolean hasValidSize(){  return (preferredHeight != 0);}  }
class C{  @Deprecated public static <E>Iterable<E> unmodifiableIterable(ImmutableCollection<E> iterable){  return checkNotNull(iterable);}  }
class C{  public void prepareToEvaluate(final EvolutionState state,final int threadnum){}  }
class C{  public CSVWriter(Writer writer,char separator,char quotechar,char escapechar,String lineEnd){  this.rawWriter=writer;  this.pw=new PrintWriter(writer);  this.separator=separator;  this.quotechar=quotechar;  this.escapechar=escapechar;  this.lineEnd=lineEnd;}  }
class C{  public Matrix plusEquals(Matrix B){  checkMatrixDimensions(B);  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=A[i][j] + B.A[i][j];    }  }  return this;}  }
class C{  public boolean isImageSharingSupported(){  return mImageSharing;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildfishyguy(zone);}  }
class C{  public static BufferedImage byteArrayToImage(byte[] imageData,String imgFileName) throws OpenStegoException {  BufferedImage image=null;  try {    if (imageData == null) {      return null;    }    image=ImageIO.read(new ByteArrayInputStream(imageData));    if (image == null) {      throw new OpenStegoException(null,OpenStego.NAMESPACE,OpenStegoException.IMAGE_FILE_INVALID,imgFileName);    }    return image;  } catch (  IOException ioEx) {    throw new OpenStegoException(ioEx);  }}  }
class C{  public boolean select(Viewer viewer,Object parent,Object element){  if (element instanceof IPackageFragment || element instanceof IPackageFragmentRoot || element instanceof IFile) {    return false;  } else   if (element instanceof IFolder) {    return true;  } else   if (element instanceof IProject) {    return true;  } else   if (element instanceof IJavaProject) {    return true;  }  return true;}  }
class C{  public static PlayerProfile lookupOptimistically(UUID id){  return lookup(id).orElseThrow(null);}  }
class C{  public static void main(final String[] args){  if (args.length < 2) {    System.out.println("usage: properties fileOrDirectoryOrZip");    System.exit(1);  }  final Properties properties;  try {    final File propertyFile=new File(args[0]);    if (!propertyFile.exists()) {      throw new FileNotFoundException(propertyFile.toString());    }    properties=new Properties();    final InputStream is=new BufferedInputStream(new FileInputStream(propertyFile));    try {      properties.load(is);    }  finally {      is.close();    }  } catch (  IOException ex) {    throw new RuntimeException(ex);  }  try {    final File dataFileOrDirectory=new File(args[1]);    if (!dataFileOrDirectory.exists())     throw new FileNotFoundException(dataFileOrDirectory.toString());    new LoadNamedGraphs().loadAll(properties,dataFileOrDirectory);  } catch (  Exception ex) {    ex.printStackTrace(System.err);  }}  }
class C{  public void registerSensorsForNode(SerialNode node){  java.util.Iterator<String> iter=getSystemNameList().iterator();  SerialNode tNode=null;  while (iter.hasNext()) {    String sName=iter.next();    if (sName == null) {      log.error("System name null during register Sensor");    } else {      log.debug("system name is " + sName);      if ((sName.charAt(0) == 'G') && (sName.charAt(1) == 'S')) {        tNode=SerialAddress.getNodeFromSystemName(sName);        if (tNode == node) {          node.registerSensor(getBySystemName(sName),SerialAddress.getBitFromSystemName(sName));        }      }    }  }}  }
class C{  protected void graph(StreamTokenizer tk){  try {    tk.nextToken();    if (tk.ttype == StreamTokenizer.TT_WORD) {      if (tk.sval.equalsIgnoreCase("digraph")) {        tk.nextToken();        if (tk.ttype == StreamTokenizer.TT_WORD) {          m_graphName=tk.sval;          tk.nextToken();        }        while (tk.ttype != '{') {          System.err.println("Error at line " + tk.lineno() + " ignoring token "+ tk.sval);          tk.nextToken();          if (tk.ttype == StreamTokenizer.TT_EOF) {            return;          }        }        stmtList(tk);      } else       if (tk.sval.equalsIgnoreCase("graph")) {        System.err.println("Error. Undirected graphs cannot be used");      } else {        System.err.println("Error. Expected graph or digraph at line " + tk.lineno());      }    }  } catch (  Exception ex) {    ex.printStackTrace();  }  int noOfEdgesOfNode[]=new int[m_nodes.size()];  int noOfPrntsOfNode[]=new int[m_nodes.size()];  for (int i=0; i < m_edges.size(); i++) {    GraphEdge e=m_edges.get(i);    noOfEdgesOfNode[e.src]++;    noOfPrntsOfNode[e.dest]++;  }  for (int i=0; i < m_edges.size(); i++) {    GraphEdge e=m_edges.get(i);    GraphNode n=m_nodes.get(e.src);    GraphNode n2=m_nodes.get(e.dest);    if (n.edges == null) {      n.edges=new int[noOfEdgesOfNode[e.src]][2];      for (int k=0; k < n.edges.length; k++) {        n.edges[k][1]=0;      }    }    if (n2.prnts == null) {      n2.prnts=new int[noOfPrntsOfNode[e.dest]];      for (int k=0; k < n2.prnts.length; k++) {        n2.prnts[k]=-1;      }    }    int k=0;    while (n.edges[k][1] != 0) {      k++;    }    n.edges[k][0]=e.dest;    n.edges[k][1]=e.type;    k=0;    while (n2.prnts[k] != -1) {      k++;    }    n2.prnts[k]=e.src;  }}  }
class C{  public void removeProperties(String propPattern){  int index=propPattern.indexOf("*");  if (index == -1) {    String value=getProperty(propPattern);    if (value != null) {      remove(propPattern);    }  } else {    String startsWith=propPattern.substring(0,index);    String endsWith;    if (index == propPattern.length() - 1) {      endsWith=null;    } else {      endsWith=propPattern.substring(index + 1);    }    @SuppressWarnings("unchecked") Vector<Object> cle=(Vector<Object>)keys.clone();    int size=cle.size();    for (int i=0; i < size; i+=1) {      String name=(String)cle.elementAt(i);      if (name.startsWith(startsWith)) {        if (endsWith == null) {          remove(name);        } else         if (name.endsWith(endsWith)) {          remove(name);        }      }    }  }}  }
class C{  public Transaction(NetworkParameters params,byte[] payload,int offset,@Nullable Message parent,MessageSerializer setSerializer,int length) throws ProtocolException {  super(params,payload,offset,parent,setSerializer,length);}  }
class C{  public void updateSQLXML(int columnIndex,SQLXML xmlObject) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("jdbcrowsetimpl.featnotsupp").toString());}  }
class C{  private String calculateDimPercentage(int maxDimLevel,int level){  float percentage=((float)level / (float)maxDimLevel) * 100;  return String.format("%.0f",percentage) + "%";}  }
class C{  public int ff_h264_check_intra4x4_pred_mode(){  int[] top=new int[]{-1,0,H264PredictionContext.LEFT_DC_PRED,-1,-1,-1,-1,-1,0,0,0,0};  int[] left=new int[]{0,-1,H264PredictionContext.TOP_DC_PRED,0,-1,-1,-1,0,-1,H264PredictionContext.DC_128_PRED,0,0};  int i;  if (0 == (this.top_samples_available & 0x08000)) {    for (i=0; i < 4; i++) {      int status=top[this.intra4x4_pred_mode_cache[scan8[0] + i]];      if (status < 0) {        return -1;      } else       if (status != 0) {        this.intra4x4_pred_mode_cache[scan8[0] + i]=status;      }    }  }  if ((this.left_samples_available & 0x08888) != 0x08888) {    final int[] mask={0x08000,0x02000,0x080,0x020};    for (i=0; i < 4; i++) {      if (0 == (this.left_samples_available & mask[i])) {        int status=left[this.intra4x4_pred_mode_cache[scan8[0] + 8 * i]];        if (status < 0) {          return -1;        } else         if (status != 0) {          this.intra4x4_pred_mode_cache[scan8[0] + 8 * i]=status;        }      }    }  }  return 0;}  }
class C{  private static boolean dateByWeek(DateTimeFormatterBuilder bld,Collection<DateTimeFieldType> fields,boolean extended,boolean strictISO){  boolean reducedPrec=false;  if (fields.remove(DateTimeFieldType.weekyear())) {    bld.append(Constants.we);    if (fields.remove(DateTimeFieldType.weekOfWeekyear())) {      appendSeparator(bld,extended);      bld.appendLiteral('W');      bld.appendWeekOfWeekyear(2);      if (fields.remove(DateTimeFieldType.dayOfWeek())) {        appendSeparator(bld,extended);        bld.appendDayOfWeek(1);      } else {        reducedPrec=true;      }    } else {      if (fields.remove(DateTimeFieldType.dayOfWeek())) {        checkNotStrictISO(fields,strictISO);        appendSeparator(bld,extended);        bld.appendLiteral('W');        bld.appendLiteral('-');        bld.appendDayOfWeek(1);      } else {        reducedPrec=true;      }    }  } else   if (fields.remove(DateTimeFieldType.weekOfWeekyear())) {    bld.appendLiteral('-');    bld.appendLiteral('W');    bld.appendWeekOfWeekyear(2);    if (fields.remove(DateTimeFieldType.dayOfWeek())) {      appendSeparator(bld,extended);      bld.appendDayOfWeek(1);    } else {      reducedPrec=true;    }  } else   if (fields.remove(DateTimeFieldType.dayOfWeek())) {    bld.appendLiteral('-');    bld.appendLiteral('W');    bld.appendLiteral('-');    bld.appendDayOfWeek(1);  }  return reducedPrec;}  }
class C{  public int compareTo(SnmpIndex index){  int length=index.getNbComponents();  Vector<SnmpOid> components=index.getComponents();  SnmpOid oid1;  SnmpOid oid2;  int comp;  for (int i=0; i < size; i++) {    if (i > length) {      return 1;    }    oid1=oids.elementAt(i);    oid2=components.elementAt(i);    comp=oid1.compareTo(oid2);    if (comp == 0)     continue;    return comp;  }  return 0;}  }
class C{  public RegionIterator(Iterator<Annotation> parentIterator,AnnotationModel model,int offset,int length,boolean canStartBefore,boolean canEndAfter){  this.parentIterator=parentIterator;  this.model=model;  this.region=new Position(offset,length);  this.canEndAfter=canEndAfter;  this.canStartBefore=canStartBefore;  next=findNext();}  }
class C{  @Field(23) public __VARIANT_NAME_3_union pscode(Pointer<Integer> pscode){  this.io.setPointerField(this,23,pscode);  return this;}  }
class C{  public static void processOptCommandLineArg(String prefix,String arg){  if (VM.BuildForAdaptiveSystem) {    if (compilerEnabled) {      if (((OptOptions)options).processAsOption(prefix,arg)) {        optimizationPlan=OptimizationPlanner.createOptimizationPlan((OptOptions)options);      } else {        VM.sysWrite("Unrecognized opt compiler argument \"" + arg + "\"");        VM.sysExit(EXIT_STATUS_BOGUS_COMMAND_LINE_ARG);      }    } else {      String[] tmp=new String[earlyOptArgs.length + 2];      for (int i=0; i < earlyOptArgs.length; i++) {        tmp[i]=earlyOptArgs[i];      }      earlyOptArgs=tmp;      earlyOptArgs[earlyOptArgs.length - 2]=prefix;      earlyOptArgs[earlyOptArgs.length - 1]=arg;    }  } else {    if (VM.VerifyAssertions)     VM._assert(NOT_REACHED);  }}  }
class C{  public void remove(){  throw new UnsupportedOperationException("Remove not supported");}  }
class C{  public void addWritten(byte[] value){  writeSetLock.lock();  writeSet.add(new TimestampValuePair(ets,value));  writeSetLock.unlock();}  }
class C{  Operation findBestArcToDelete(BayesNet bayesNet,Instances instances,Operation oBestOperation) throws Exception {  int nNrOfAtts=instances.numAttributes();  for (int iNode=0; iNode < nNrOfAtts; iNode++) {    ParentSet parentSet=bayesNet.getParentSet(iNode);    for (int iParent=0; iParent < parentSet.getNrOfParents(); iParent++) {      Operation oOperation=new Operation(parentSet.getParent(iParent),iNode,Operation.OPERATION_DEL);      double fScore=calcScoreWithMissingParent(oOperation.m_nHead,oOperation.m_nTail);      if (fScore > oBestOperation.m_fScore) {        if (isNotTabu(oOperation)) {          oBestOperation=oOperation;          oBestOperation.m_fScore=fScore;        }      }    }  }  return oBestOperation;}  }
class C{  public boolean hasArgs(){  return numberOfArgs > 1 || numberOfArgs == UNLIMITED_VALUES;}  }
class C{  public void showSelectedState(){  mLabelView.setSelected(true);}  }
class C{  public boolean removeEntry(int xIndex,int dataSetIndex){  if (dataSetIndex >= mDataSets.size())   return false;  T dataSet=mDataSets.get(dataSetIndex);  Entry e=dataSet.getEntryForXIndex(xIndex);  return removeEntry(e,dataSetIndex);}  }
class C{  public boolean visit(CopySourceEdit edit){  return visitNode(edit);}  }
class C{  @Override public boolean equals(Object other){  return sameClassAs(other) && term.equals(((TermQuery)other).term);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:30.437 -0500",hash_original_method="0AADB00D4F358179B46AC864F825D76F",hash_generated_method="4719EEDEE4C902BF241C158D768547A3") private View fillUp(int pos,int nextBottom){  View selectedView=null;  int end=0;  if ((mGroupFlags & CLIP_TO_PADDING_MASK) == CLIP_TO_PADDING_MASK) {    end=mListPadding.top;  }  while (nextBottom > end && pos >= 0) {    View temp=makeRow(pos,nextBottom,false);    if (temp != null) {      selectedView=temp;    }    nextBottom=mReferenceView.getTop() - mVerticalSpacing;    mFirstPosition=pos;    pos-=mNumColumns;  }  if (mStackFromBottom) {    mFirstPosition=Math.max(0,pos + 1);  }  return selectedView;}  }
class C{  private static int select(int[] array,int[] index,int left,int right,int k){  if (left == right) {    return left;  } else {    int middle=partition(array,index,left,right);    if ((middle - left + 1) >= k) {      return select(array,index,left,middle,k);    } else {      return select(array,index,middle + 1,right,k - (middle - left + 1));    }  }}  }
class C{  public final void println(String string) throws IOException {  print(string);  write(_newlineBytes,0,_newlineBytes.length);  if (_isFlushOnNewline)   flush();}  }
class C{  public void addNodes(NodeIterator iterator){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));  if (null != iterator) {    Node obj;    while (null != (obj=iterator.nextNode())) {      addElement(obj);    }  }}  }
class C{  private void cleanup(){  try {    outStream.close();  } catch (  Exception e) {    LOG.error("Error closing the file stream: " + this.saveAs,e);  }  if (bytesDownloaded != size) {    try {      copy2Dir.deleteFile(saveAs);    } catch (    Exception e) {      LOG.error("Error deleting file in cleanup" + e.getMessage());    }    if (!aborted)     throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Unable to download " + fileName + " completely. Downloaded "+ bytesDownloaded+ "!="+ size);  }}  }
class C{  private DataProvider createDataProviderFromEntity(DataProviderEntity dataProviderEntity){  DataProvider dataProvider=new DataProvider();  dataProvider.setDataProviderName(dataProviderEntity.getName());  return dataProvider;}  }
class C{  private void revokeAppRestrictionPolicy(org.wso2.emm.agent.beans.Operation operation) throws AndroidAgentException {  AppRestriction appRestriction=CommonUtils.getAppRestrictionTypeAndList(operation,null,null);  if (Constants.AppRestriction.BLACK_LIST.equals(appRestriction.getRestrictionType())) {    for (    String packageName : appRestriction.getRestrictedList()) {      CommonUtils.callSystemApp(context,operation.getCode(),"true",packageName);    }  } else   if (Constants.AppRestriction.WHITE_LIST.equals(appRestriction.getRestrictionType())) {    List<String> installedAppPackages=CommonUtils.getInstalledAppPackages(context);    List<String> toBeUnHideApps=new ArrayList<>(installedAppPackages);    toBeUnHideApps.removeAll(appRestriction.getRestrictedList());    for (    String packageName : toBeUnHideApps) {      CommonUtils.callSystemApp(context,operation.getCode(),"true",packageName);    }  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String name=getString(stack);  if (Permissions.hasPermission(Permissions.PERMISSION_CONVERSION,stack.getUIMgr()))   Sage.remove("transcoder/formats/" + name);  return null;}  }
class C{  private void handleChannel(String[] args,BufferedReader reader) throws IOException {  Tuple<String,String> initialPayload=new Tuple<>(args[1],args[2]);  if (args.length == 5) {    requestChannelFail.add(initialPayload);  }  String line=reader.readLine();  List<String> commands=new ArrayList<>();  while (!line.equals("}")) {    commands.add(line);    line=reader.readLine();  }  requestChannelCommands.put(initialPayload,commands);}  }
class C{  private Optional<Instant> calcLastMod(){  Instant globalLastMod=null;  for (  final ChannelInformation ci : this.channelService.list()) {    final Optional<Instant> lastMod=ofNullable(ci.getState().getModificationTimestamp());    if (globalLastMod == null || lastMod.get().isAfter(globalLastMod)) {      globalLastMod=lastMod.get();    }  }  return Optional.ofNullable(globalLastMod);}  }
class C{  public Period minusYears(int years){  return plusYears(-years);}  }
class C{  public Context findChild(String name){  return new Context(invoke(hostFindChild,name));}  }
class C{  public static HostScsiTopologyLun findLun(HostScsiTopologyTarget target,HostScsiDisk disk){  if ((target != null) && (target.getLun() != null)) {    for (    HostScsiTopologyLun lun : target.getLun()) {      if (StringUtils.equals(disk.getKey(),lun.getScsiLun())) {        return lun;      }    }  }  return null;}  }
class C{  public OMRaster(double lt,double ln,Image ii){  super(RENDERTYPE_LATLON,LINETYPE_UNKNOWN,DECLUTTERTYPE_NONE);  setColorModel(COLORMODEL_IMAGEICON);  lat=lt;  lon=ln;  setImage(ii);}  }
class C{  public static Token newPlaceholder(int type){  Token token=new Token(Types.UNKNOWN,"",-1,-1);  token.setMeaning(type);  return token;}  }
class C{  public SubNode(final ConditionNode expression){  super(Lists.newArrayList(expression));}  }
class C{  public static String addressesAsString(Collection<String> addrs,Collection<String> hostNames){  if (F.isEmpty(addrs))   return "";  if (F.isEmpty(hostNames))   return addrs.toString();  SB sb=new SB("[");  Iterator<String> hostNamesIt=hostNames.iterator();  boolean first=true;  for (  String addr : addrs) {    if (first)     first=false; else     sb.a(", ");    String hostName=hostNamesIt.hasNext() ? hostNamesIt.next() : null;    sb.a(hostName != null ? hostName : "").a('/').a(addr);  }  sb.a(']');  return sb.toString();}  }
class C{  public static byte[] decrypt(byte[] key,byte[] nonce,byte[] header,byte[] encryptedData,byte[] tag,Optional<byte[]> optional){  try {    GCMBlockCipher cipher=new GCMBlockCipher(new AESFastEngine());    AEADParameters parameters=new AEADParameters(new KeyParameter(key),tag.length * 8,nonce,header);    cipher.init(false,parameters);    if (optional.isPresent()) {      byte[] aadBytes=optional.get();      cipher.processAADBytes(aadBytes,0,aadBytes.length);    }    byte[] out=new byte[cipher.getOutputSize(encryptedData.length + tag.length)];    int pos=cipher.processBytes(encryptedData,0,encryptedData.length,out,0);    pos+=cipher.processBytes(tag,0,tag.length,out,pos);    pos+=cipher.doFinal(out,pos);    return Arrays.copyOf(out,pos);  } catch (  IllegalStateException|InvalidCipherTextException ex) {    throw new IllegalStateException("GCM decrypt error",ex);  }}  }
class C{  public Iterator<Location> iterator(){  return locations.iterator();}  }
class C{  public void addUtilizationHistoryValue(final double utilization){  getUtilizationHistory().add(0,utilization);  if (getUtilizationHistory().size() > HISTORY_LENGTH) {    getUtilizationHistory().remove(HISTORY_LENGTH);  }}  }
class C{  public void testInvokeAll4() throws Throwable {  ExecutorService e=new ForkJoinPool(1);  PoolCleaner cleaner=null;  try {    cleaner=cleaner(e);    List<Callable<String>> l=new ArrayList<Callable<String>>();    l.add(new NPETask());    List<Future<String>> futures=e.invokeAll(l);    assertEquals(1,futures.size());    try {      futures.get(0).get();      shouldThrow();    } catch (    ExecutionException success) {      assertTrue(success.getCause() instanceof NullPointerException);    }  }  finally {    if (cleaner != null) {      cleaner.close();    }  }}  }
class C{  protected void fireTreeNodesInserted(Object source,Object[] path,int[] childIndices,Object[] children){  Object[] listeners=listenerList.getListenerList();  TreeModelEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == TreeModelListener.class) {      if (e == null)       e=new TreeModelEvent(source,path,childIndices,children);      ((TreeModelListener)listeners[i + 1]).treeNodesInserted(e);    }  }}  }
class C{  public double timeToHitVerticalWall(){  if (vx > 0)   return (1.0 - rx - radius) / vx; else   if (vx < 0)   return (radius - rx) / vx; else   return INFINITY;}  }
class C{  public Collection solicitarEntregaReserva(String idPrestamo) throws PrestamoActionNotAllowedException {  int denegadas=0;  ArrayList udocsNoDisponibles=new ArrayList();  Locale locale=getServiceClient().getLocale();  ConditionChecker.checkOnEntregaReserva(idPrestamo,this,getServiceClient());  this.check(ServiciosSecurityManager.SOLICITAR_ENTREGA_RESERVA_PRESTAMO_ACTION);  LoggingEvent event=getLogginEvent(ArchivoActions.SERVICIOS_MODULE_AUTORIZACION_SOLICITUD_PRESTAMO);  iniciarTransaccion();  PrestamoVO prestamo=getPrestamo(idPrestamo);  Collection detalles=this.getDetallesPrestamo(idPrestamo);  Iterator detallesIterator=detalles.iterator();  while (detallesIterator.hasNext()) {    DetallePrestamoVO detalle=(DetallePrestamoVO)detallesIterator.next();    uDocEnUiDepositoDbEntity.bloquearUDoc(detalle.getIdudoc(),detalle.getSignaturaudoc());    boolean disponibilidad=isDetalleDisponible(detalle,DateUtils.getFechaActualSinHora(),prestamo.getFmaxfinprestamo(),prestamo.tieneReserva());    DataLoggingEvent data=event.getDataLoggingEvent(ArchivoObjects.OBJECT_DETALLE_PRESTAMO,detalle.getIdudoc());    data.addDetalle(locale,ArchivoDetails.SOLICITUDES_PRESTAMO_ID,CodigoTransferenciaUtils.getCodigoTransferenciaFromVO(prestamo,getServiceSession()));    data.addDetalle(locale,ArchivoDetails.SOLICITUDES_DETALLE_ID,detalle.getSignaturaudoc());    if (disponibilidad) {      detalle.setFestado(DateUtils.getFechaActual());      detalle.setEstado(PrestamosConstants.ESTADO_DETALLE_AUTORIZADA);      data.addDetalle(locale,ArchivoDetails.SOLICITUDES_PRESTAMO_DETALLE_ACEPTADO,"Udoc autorizada");    } else {      detalle.setEstado(PrestamosConstants.ESTADO_DETALLE_DENEGADA);      detalle.setFestado(DateUtils.getFechaActual());      detalle.setMotivorechazo("No disponible");      udocsNoDisponibles.add(detalle);      denegadas++;      data.addDetalle(locale,ArchivoDetails.SOLICITUDES_PRESTAMO_DETALLE_DENEGADO,"Udoc no disponible");    }    detallePrestamoDBEntity.actualizarDetalle(detalle);  }  DataLoggingEvent dle=event.getDataLoggingEvent(ArchivoObjects.OBJECT_PRESTAMO,prestamo.getId());  if (denegadas == detalles.size()) {    prestamo.setEstado(PrestamosConstants.ESTADO_PRESTAMO_DENEGADO);    dle.addDetalle(locale,ArchivoDetails.SOLICITUDES_PRESTAMO_DENEGADO,"prestamo Denegado");  } else {    prestamo.setEstado(PrestamosConstants.ESTADO_PRESTAMO_AUTORIZADO);    dle.addDetalle(locale,ArchivoDetails.SOLICITUDES_PRESTAMO_ACEPTADO,"prestamo Aceptado");  }  prestamo.setFestado(DateUtils.getFechaActual());  prestamoDBEntity.updatePrestamo(prestamo);  commit();  return udocsNoDisponibles;}  }
class C{  public DocumentQuery(URL feedUrl){  super(feedUrl);}  }
class C{  @Override public void close() throws IOException {  running.set(false);  service.shutdown();  try {    if (!service.awaitTermination(SHUTDOWN_TIMEOUT,TimeUnit.SECONDS)) {      LOG.error("Was not able to process all remaining spans upon closing in: " + SHUTDOWN_TIMEOUT + " "+ TimeUnit.SECONDS+ ". Left Spans could be dropped.");    }  } catch (  InterruptedException e1) {    LOG.warn("Thread interrupted when terminating executor.",e1);  }}  }
class C{  public static int convertSQLTypeToValueType(int sqlType){switch (sqlType) {case Types.CHAR:case Types.NCHAR:    return Value.STRING_FIXED;case Types.VARCHAR:case Types.LONGVARCHAR:case Types.NVARCHAR:case Types.LONGNVARCHAR:  return Value.STRING;case Types.NUMERIC:case Types.DECIMAL:return Value.DECIMAL;case Types.BIT:case Types.BOOLEAN:return Value.BOOLEAN;case Types.INTEGER:return Value.INT;case Types.SMALLINT:return Value.SHORT;case Types.TINYINT:return Value.BYTE;case Types.BIGINT:return Value.LONG;case Types.REAL:return Value.FLOAT;case Types.DOUBLE:case Types.FLOAT:return Value.DOUBLE;case Types.BINARY:case Types.VARBINARY:case Types.LONGVARBINARY:return Value.BYTES;case Types.OTHER:case Types.JAVA_OBJECT:return Value.JAVA_OBJECT;case Types.DATE:return Value.DATE;case Types.TIME:return Value.TIME;case Types.TIMESTAMP:return Value.TIMESTAMP;case Types.BLOB:return Value.BLOB;case Types.CLOB:case Types.NCLOB:return Value.CLOB;case Types.NULL:return Value.NULL;case Types.ARRAY:return Value.ARRAY;case DataType.TYPE_RESULT_SET:return Value.RESULT_SET;default :throw DbException.get(ErrorCode.UNKNOWN_DATA_TYPE_1,"" + sqlType);}}  }
class C{  public final void updateDataStore(ISource S) throws AdeException {  logger.info(String.format("updateDataStore(%s) -->entry",S.getSourceId()));  try {    final UpdateManagedSystemAtomicTransaction atomicTrans=new UpdateManagedSystemAtomicTransaction(S);    atomicTrans.execute();  } catch (  AdeException e) {    throw e;  }catch (  Throwable t) {    final String msg=String.format("updateDataStore(%s) caught unexpected throwable: %s",S.getSourceId(),t.getMessage());    logger.info(msg);    throw new AdeInternalException(msg,t);  }  logger.info("updateDataStore() <--exit");}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  java.io.File f=getFile(stack);  if (f != null)   Seeker.getInstance().removeArchiveDirectory(f,Seeker.ALL_DIR_MASK);  return null;}  }
class C{  public boolean doesNeedToUpdateInputs(){  if (listener == null) {    assert mockedMethods.isEmpty() || RuntimeSettings.isRunningASystemTest;    return false;  }  List<MethodDescriptor> executed=listener.getCopyOfMethodDescriptors();  if (executed.size() != mockedMethods.size()) {    return true;  }  for (int i=0; i < executed.size(); i++) {    MethodDescriptor previous=mockedMethods.get(i);    MethodDescriptor now=executed.get(i);    if (!previous.getID().equals(now.getID())) {      return true;    }    if (!now.shouldBeMocked()) {      continue;    }    if (now.getCounter() != previous.getCounter() && (now.getCounter() < Properties.FUNCTIONAL_MOCKING_INPUT_LIMIT) || previous.getCounter() < Properties.FUNCTIONAL_MOCKING_INPUT_LIMIT) {      return true;    }  }  return false;}  }
class C{  protected ActionForward listadoConsultaNoDisponibleAutorizadas(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  return mappings.findForward("ver_consultas_no_disponibles_autorizadas");}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"CLZ");  translateAll(environment,instruction,"CLZ",instructions);}  }
class C{  public void remove(String key,T object){  if (!entries.containsKey(key))   return;  entries.get(key).remove(object);  locations.get(object).remove(key);  removeEventListeners.publish(new RemoveEvent<>(key,object));}  }
class C{  private void writeNodeEmptyTag(Node node) throws IOException, RDFHandlerException {  writeNodeStartOfStartTag(node);  writeEndOfEmptyTag();}  }
class C{  public static ASTree parseExpr(String src,SymbolTable st) throws CompileError {  Parser p=new Parser(new Lex(src));  return p.parseExpression(st);}  }
class C{  private int findRegisterIndex(final String registerName){  int counter=0;  for (  final RegisterInformationInternal info : registerInformation) {    if (info.getRegisterName().equals(registerName)) {      return counter;    }    ++counter;  }  return -1;}  }
class C{  @RequestMapping(value="/{cubeName}/notify_list",method={RequestMethod.PUT}) @ResponseBody public void updateNotifyList(@PathVariable String cubeName,@RequestBody List<String> notifyList){  CubeInstance cube=cubeService.getCubeManager().getCube(cubeName);  if (cube == null) {    throw new InternalErrorException("Cannot find cube " + cubeName);  }  try {    cubeService.updateCubeNotifyList(cube,notifyList);  } catch (  Exception e) {    logger.error(e.getLocalizedMessage(),e);    throw new InternalErrorException(e.getLocalizedMessage());  }}  }
class C{  public static void addPropertyIntoObject(FileSystemObjectProperties key,String value,Object instance) throws Exception {  if (null != value) {    Method method=PropertySetterUtil.getMethod(key.getMethodName(),instance);    if (null == method) {      return;    }    Object typeCastedValue=PropertySetterUtil.typeCast(value,method);    if (null == typeCastedValue) {      return;    }    Object[] args=new Object[]{typeCastedValue};    if (null != method) {      method.invoke(instance,args);    }  }}  }
class C{  public boolean isRecursive(){  return recursive;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementassociatedattribute.class,args);}  }
class C{  public String rootID(){  if (this.rootID == null) {switch (this.entryKind) {case IClasspathEntry.CPE_LIBRARY:      this.rootID="[LIB]" + this.path;    break;case IClasspathEntry.CPE_PROJECT:  this.rootID="[PRJ]" + this.path;break;case IClasspathEntry.CPE_SOURCE:this.rootID="[SRC]" + this.path;break;case IClasspathEntry.CPE_VARIABLE:this.rootID="[VAR]" + this.path;break;case IClasspathEntry.CPE_CONTAINER:this.rootID="[CON]" + this.path;break;default :this.rootID="";break;}}return this.rootID;}  }
class C{  public boolean removeNode(Node n){  throw new UnsupportedOperationException("Changes to graph structure not allowed for spanning trees.");}  }
class C{  private void parseArg(int b){  if (b >= '0' && b <= '9') {    if (mArgIndex < mArgs.length) {      int oldValue=mArgs[mArgIndex];      int thisDigit=b - '0';      int value;      if (oldValue >= 0) {        value=oldValue * 10 + thisDigit;      } else {        value=thisDigit;      }      mArgs[mArgIndex]=value;    }    continueSequence(mEscapeState);  } else   if (b == ';') {    if (mArgIndex < mArgs.length) {      mArgIndex++;    }    continueSequence(mEscapeState);  } else {    unknownSequence(b);  }}  }
class C{  private void learnFromFeedback(DialogueState state,Assignment actualAction,double actualUtility){  try {    Set<String> relevantParams=state.getParameterIds().stream().filter(null).collect(Collectors.toSet());    if (!relevantParams.isEmpty()) {      Query query=new Query.UtilQuery(state,relevantParams,actualAction);      EmpiricalDistribution empiricalDistrib=sampler.getWeightedSamples(query,null);      for (      String param : relevantParams) {        ChanceNode paramNode=system.getState().getChanceNode(param);        ProbDistribution newDistrib=empiricalDistrib.getMarginal(param,paramNode.getInputNodeIds());        paramNode.setDistrib(newDistrib);      }    }  } catch (  RuntimeException e) {    log.warning("could not learn from action feedback: " + e);  }}  }
class C{  private void resetSystemUserStatus(boolean isSource){  String vendorName=null;  if (isSource) {    if (m_sourceVendor.getSelectedItem() != null)     vendorName=m_sourceVendor.getSelectedItem().toString();    if (s_dbEngine.getDBSystemOrNormalUser(vendorName,"no","yes").equalsIgnoreCase("yes")) {      m_sourceSystemUser.setEnabled(true);      m_sourceSystemUser.setEditable(true);      m_sourceSystemPassword.setEnabled(true);      m_sourceSystemPassword.setEditable(true);    } else {      m_sourceSystemUser.setEnabled(false);      m_sourceSystemUser.setEditable(false);      m_sourceSystemPassword.setEnabled(false);      m_sourceSystemPassword.setEditable(false);    }  } else {    if (m_targetVendor.getSelectedItem() != null)     vendorName=m_targetVendor.getSelectedItem().toString();    if (s_dbEngine.getDBSystemOrNormalUser(vendorName,"no","yes").equalsIgnoreCase("yes")) {      m_targetSystemUser.setEnabled(true);      m_targetSystemUser.setEditable(true);      m_targetSystemPassword.setEnabled(true);      m_targetSystemPassword.setEditable(true);    } else {      m_targetSystemUser.setEnabled(false);      m_targetSystemUser.setEditable(false);      m_targetSystemPassword.setEnabled(false);      m_targetSystemPassword.setEditable(false);    }  }}  }
class C{  @GET @Controller @Produces("text/html") @Path("view1/{id}") public String view1(@PathParam("id") String id){  return "/requestDispatcher";}  }
class C{  static void errorUnexpectedPCData(String systemID,int lineNr,String parentElementName) throws XMLValidationException {  throw new XMLValidationException(XMLValidationException.UNEXPECTED_PCDATA,systemID,lineNr,null,null,null,"Unexpected #PCDATA in element " + parentElementName);}  }
class C{  public UF9(int numberOfVariables){  super(numberOfVariables,3);}  }
class C{  protected boolean generate(Projection proj){  if (boundaries != null) {    return boundaries.generate(proj);  }  return false;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return CURSOR_ID;case 3:return VALUES;default :return null;}}  }
class C{  public void writeAttribute(String visibility,boolean staticFlag,String type,String name){  out.print("\t" + visibility + " ");  if (staticFlag) {    out.print("static ");  }  out.println(type + " " + name+ ";");}  }
class C{  public Node appendChild(Node node){  return this.constructionElement.appendChild(node);}  }
class C{  @Override public String unmarshal(String cyphertext) throws Exception {  return aesUtil.decrypt(encryptSalt,encryptVector,encryptVector,cyphertext);}  }
class C{  public void dispose(){  for (  JmriAbstractAction a : actions) {    a.dispose();  }}  }
class C{  public static Map<String,Object> releaseOrderPaymentPreference(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  GenericValue userLogin=(GenericValue)context.get("userLogin");  String orderPaymentPreferenceId=(String)context.get("orderPaymentPreferenceId");  Locale locale=(Locale)context.get("locale");  Map<String,Object> result=ServiceUtil.returnSuccess();  GenericValue paymentPref=null;  try {    paymentPref=EntityQuery.use(delegator).from("OrderPaymentPreference").where("orderPaymentPreferenceId",orderPaymentPreferenceId).queryOne();  } catch (  GenericEntityException e) {    Debug.logWarning(e,"Problem getting OrderPaymentPreference for orderPaymentPreferenceId " + orderPaymentPreferenceId,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingProblemGettingOrderPaymentPreferences",locale) + " " + orderPaymentPreferenceId);  }  if (paymentPref == null) {    Debug.logWarning("Could not find OrderPaymentPreference with orderPaymentPreferenceId: " + orderPaymentPreferenceId,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingProblemGettingOrderPaymentPreferences",locale) + " " + orderPaymentPreferenceId);  }  GenericValue orderHeader=null;  String orderId=paymentPref.getString("orderId");  try {    orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",orderId).queryOne();  } catch (  GenericEntityException e) {    Debug.logWarning(e,"Problem getting OrderHeader for orderId " + orderId,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceOrder,"OrderOrderNotFound",UtilMisc.toMap("orderId",orderId),locale));  }  if (orderHeader == null) {    Debug.logWarning("Could not find OrderHeader with orderId: " + orderId + "; not processing payments.",module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceOrder,"OrderOrderNotFound",UtilMisc.toMap("orderId",orderId),locale));  }  OrderReadHelper orh=new OrderReadHelper(orderHeader);  String currency=orh.getCurrency();  String serviceName=null;  String paymentConfig=null;  String paymentGatewayConfigId=null;  GenericValue paymentSettings=getPaymentSettings(orderHeader,paymentPref,RELEASE_SERVICE_TYPE,false);  if (paymentSettings != null) {    String customMethodId=paymentSettings.getString("paymentCustomMethodId");    if (UtilValidate.isNotEmpty(customMethodId)) {      serviceName=getPaymentCustomMethod(orh.getOrderHeader().getDelegator(),customMethodId);    }    if (UtilValidate.isEmpty(serviceName)) {      serviceName=paymentSettings.getString("paymentService");    }    paymentConfig=paymentSettings.getString("paymentPropertiesPath");    paymentGatewayConfigId=paymentSettings.getString("paymentGatewayConfigId");    if (serviceName == null) {      Debug.logWarning("No payment release service for - " + paymentPref.getString("paymentMethodTypeId"),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resourceOrder,"AccountingTroubleCallingReleaseOrderPaymentPreferenceService",locale) + " " + paymentPref.getString("paymentMethodTypeId"));    }  } else {    Debug.logWarning("No payment release settings found for - " + paymentPref.getString("paymentMethodTypeId"),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceOrder,"AccountingTroubleCallingReleaseOrderPaymentPreferenceService",locale) + " " + paymentPref.getString("paymentMethodTypeId"));  }  if (UtilValidate.isEmpty(paymentConfig)) {    paymentConfig="payment.properties";  }  GenericValue authTransaction=PaymentGatewayServices.getAuthTransaction(paymentPref);  Map<String,Object> releaseContext=FastMap.newInstance();  releaseContext.put("orderPaymentPreference",paymentPref);  releaseContext.put("releaseAmount",authTransaction.getBigDecimal("amount"));  releaseContext.put("currency",currency);  releaseContext.put("paymentConfig",paymentConfig);  releaseContext.put("paymentGatewayConfigId",paymentGatewayConfigId);  releaseContext.put("userLogin",userLogin);  Map<String,Object> releaseResult=null;  try {    releaseResult=dispatcher.runSync(serviceName,releaseContext,TX_TIME,true);  } catch (  GenericServiceException e) {    Debug.logError(e,"Problem releasing payment",module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceOrder,"AccountingTroubleCallingReleaseOrderPaymentPreferenceService",locale));  }  if (releaseResult != null && !ServiceUtil.isError(releaseResult)) {    Map<String,Object> releaseResRes;    try {      ModelService model=dctx.getModelService("processReleaseResult");      releaseResult.put("orderPaymentPreference",paymentPref);      releaseResult.put("userLogin",userLogin);      Map<String,Object> resCtx=model.makeValid(releaseResult,ModelService.IN_PARAM);      releaseResRes=dispatcher.runSync(model.name,resCtx);    } catch (    GenericServiceException e) {      Debug.logError(e,"Trouble processing the release results",module);      return ServiceUtil.returnError(UtilProperties.getMessage(resourceOrder,"AccountingTroubleCallingReleaseOrderPaymentPreferenceService",locale) + " " + e.getMessage());    }    if (releaseResRes != null && ServiceUtil.isError(releaseResRes)) {      return ServiceUtil.returnError(ServiceUtil.getErrorMessage(releaseResRes));    }  } else   if (ServiceUtil.isError(releaseResult)) {    saveError(dispatcher,userLogin,paymentPref,releaseResult,RELEASE_SERVICE_TYPE,"PGT_RELEASE");    result=ServiceUtil.returnError(ServiceUtil.getErrorMessage(releaseResult));  }  return result;}  }
class C{  public String toString(){  return toXML(false);}  }
class C{  public Builder addPart(RequestBody body){  return addPart(Part.create(body));}  }
class C{  public String attributeTypeTipText(){  return "Defines the type of the attribute to generate.";}  }
class C{  protected void paintActiveLinks(Graphics2D g2){  if (selectedLinkList.isEmpty())   return;  for (  Link link : selectedLinkList) {    MutableCoord P1=transform(link.getFromNode().getCoord());    MutableCoord P2=transform(link.getToNode().getCoord());    g2.setColor(Color.CYAN);    g2.drawLine((int)P1.getX(),(int)P1.getY(),(int)P2.getX(),(int)P2.getY());    paintActiveLinkArrow(g2,link);  }}  }
class C{  @Transactional public Set<Permission> createPermissions(Set<Permission> permissions){  Multimap<String,String> targetIdPermissionTypes=HashMultimap.create();  for (  Permission permission : permissions) {    targetIdPermissionTypes.put(permission.getTargetId(),permission.getPermissionType());  }  for (  String targetId : targetIdPermissionTypes.keySet()) {    Collection<String> permissionTypes=targetIdPermissionTypes.get(targetId);    List<Permission> current=permissionRepository.findByPermissionTypeInAndTargetId(permissionTypes,targetId);    Preconditions.checkState(CollectionUtils.isEmpty(current),"Permission with permissionType %s targetId %s already exists!",permissionTypes,targetId);  }  Iterable<Permission> results=permissionRepository.save(permissions);  return FluentIterable.from(results).toSet();}  }
class C{  public Viennet3(){  super(2,3);}  }
class C{  public WritableRaster createCompatibleDestRaster(Raster src){  Rectangle2D r=getBounds2D(src);  return src.createCompatibleWritableRaster((int)r.getX(),(int)r.getY(),(int)r.getWidth(),(int)r.getHeight());}  }
class C{  protected boolean configureProperties(B builder,Properties properties){  return false;}  }
class C{  public ManagedThread(Runnable r){  super(r);  setPriority(Thread.NORM_PRIORITY);  setUncaughtExceptionHandler(HANDLER);}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    try {      return new FileInputStream(entry.getCleanFile(index));    } catch (    FileNotFoundException e) {      return null;    }  }}  }
class C{  public void testToEngineeringStringZeroPosExponent(){  String a="0.0E+16";  BigDecimal aNumber=new BigDecimal(a);  String result="0E+15";  assertEquals("incorrect value",result,aNumber.toEngineeringString());}  }
class C{  public static WebDoc create(String title){  return create(false,title,false);}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.view_bt:    ViewActivity.startActivity(this);  break;case R.id.dialog_bt:this.dialog.show();break;}}  }
class C{  void createQuadProgram() throws IOException {  int program=glCreateProgram();  int vshader=createShader("org/lwjgl/demo/opengl/raytracing/quad.vs",GL_VERTEX_SHADER,"330");  int fshader=createShader("org/lwjgl/demo/opengl/raytracing/quad.fs",GL_FRAGMENT_SHADER,"330");  glAttachShader(program,vshader);  glAttachShader(program,fshader);  glBindAttribLocation(program,0,"vertex");  glBindFragDataLocation(program,0,"color");  glLinkProgram(program);  int linked=glGetProgrami(program,GL_LINK_STATUS);  String programLog=glGetProgramInfoLog(program);  if (programLog.trim().length() > 0) {    System.err.println(programLog);  }  if (linked == 0) {    throw new AssertionError("Could not link program");  }  this.quadProgram=program;  glUseProgram(quadProgram);  int texUniform=glGetUniformLocation(quadProgram,"tex");  glUniform1i(texUniform,0);  glUseProgram(0);}  }
class C{  public Component componentForPoint(Component source,Point sourcePoint){  int screenX, screenY;  Point p=sourcePoint;  int i, c, j, d;  Component mc;  Rectangle r2;  int cWidth, cHeight;  MenuElement menuElement;  MenuElement subElements[];  Vector<MenuElement> tmp;  int selectionSize;  SwingUtilities.convertPointToScreen(p,source);  screenX=p.x;  screenY=p.y;  tmp=(Vector<MenuElement>)selection.clone();  selectionSize=tmp.size();  for (i=selectionSize - 1; i >= 0; i--) {    menuElement=(MenuElement)tmp.elementAt(i);    subElements=menuElement.getSubElements();    for (j=0, d=subElements.length; j < d; j++) {      if (subElements[j] == null)       continue;      mc=subElements[j].getComponent();      if (!mc.isShowing())       continue;      if (mc instanceof JComponent) {        cWidth=mc.getWidth();        cHeight=mc.getHeight();      } else {        r2=mc.getBounds();        cWidth=r2.width;        cHeight=r2.height;      }      p.x=screenX;      p.y=screenY;      SwingUtilities.convertPointFromScreen(p,mc);      if (p.x >= 0 && p.x < cWidth && p.y >= 0 && p.y < cHeight) {        return mc;      }    }  }  return null;}  }
class C{  public BooleanQueryResultFormat(String name,Collection<String> mimeTypes,Charset charset,Collection<String> fileExtensions,IRI standardURI){  super(name,mimeTypes,charset,fileExtensions,standardURI);}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFileTmp),Util.US_ASCII));  try {    writer.write(MAGIC);    writer.write("\n");    writer.write(VERSION_1);    writer.write("\n");    writer.write(Integer.toString(appVersion));    writer.write("\n");    writer.write(Integer.toString(valueCount));    writer.write("\n");    writer.write("\n");    for (    Entry entry : lruEntries.values()) {      if (entry.currentEditor != null) {        writer.write(DIRTY + ' ' + entry.key+ '\n');      } else {        writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');      }    }  }  finally {    writer.close();  }  if (journalFile.exists()) {    renameTo(journalFile,journalFileBackup,true);  }  renameTo(journalFileTmp,journalFile,false);  journalFileBackup.delete();  journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII));}  }
class C{  private void readObject(ObjectInputStream s) throws ClassNotFoundException, IOException {  s.defaultReadObject();  setStyle(s.readInt());  seg=new Segment();}  }
class C{  public static String gensalt(){  return gensalt(GENSALT_DEFAULT_LOG2_ROUNDS);}  }
class C{  private static void startFetchingAccountsInformation(Context context,Profile profile){  Account[] accounts=AccountManagerHelper.get(context).getGoogleAccounts();  for (int i=0; i < accounts.length; i++) {    startFetchingAccountInformation(context,profile,accounts[i].name);  }}  }
class C{  public void saveSelection(IMiniTable miniTable){  log.info("");  ArrayList<Integer> results=new ArrayList<Integer>();  setSelection(null);  int rows=miniTable.getRowCount();  for (int i=0; i < rows; i++) {    IDColumn id=(IDColumn)miniTable.getValueAt(i,0);    if (id != null && id.isSelected())     results.add(id.getRecord_ID());  }  if (results.size() == 0)   return;  log.config("Selected #" + results.size());  setSelection(results);}  }
class C{  private boolean updateVirtualArrays(ComputeVirtualPool cvp,VirtualArrayAssignmentChanges varrayAssignmentChanges){  boolean varraysForCvpUpdated=false;  Set<String> varraysAddedToCvp=new HashSet<String>();  Set<String> varraysRemovedFromCvp=new HashSet<String>();  if (varrayAssignmentChanges != null) {    _log.debug("Update request has virtual array assignment changes for compute virtual pool {}",cvp.getId());    verifyAssignmentChanges(cvp,varrayAssignmentChanges);    _log.debug("Requested virtual array assignment changes verified.");    VirtualArrayAssignments addAssignments=varrayAssignmentChanges.getAdd();    if (addAssignments != null) {      Set<String> addVArrays=addAssignments.getVarrays();      if ((addVArrays != null) && (!addVArrays.isEmpty())) {        _log.debug("Request specifies virtual arrays to be added.");        VirtualArrayService.checkVirtualArrayURIs(addVArrays,_dbClient);        StringSet currentAssignments=cvp.getVirtualArrays();        Iterator<String> addVArraysIter=addVArrays.iterator();        while (addVArraysIter.hasNext()) {          String addVArrayId=addVArraysIter.next();          if ((currentAssignments != null) && (currentAssignments.contains(addVArrayId))) {            _log.debug("Compute Virtual Pool already assigned to virtual array {}",addVArrayId);            continue;          }          URI virtualArrayURI=null;          virtualArrayURI=URI.create(addVArrayId);          this.queryObject(VirtualArray.class,virtualArrayURI,true);          varraysAddedToCvp.add(addVArrayId);          varraysForCvpUpdated=true;          _log.debug("Compute Virtual Pool will be assigned to virtual array {}",addVArrayId);        }      }    }    VirtualArrayAssignments removeAssignments=varrayAssignmentChanges.getRemove();    if (removeAssignments != null) {      Set<String> removeVArrays=removeAssignments.getVarrays();      if (isComputeVirtualPoolInUse(cvp)) {        throw APIException.badRequests.cannotRemoveVarraysFromCVP(cvp.getLabel());      }      if ((removeVArrays != null) && (!removeVArrays.isEmpty())) {        _log.debug("Request specifies virtual arrays to be removed.");        StringSet currentAssignments=cvp.getVirtualArrays();        Iterator<String> removeVArraysIter=removeVArrays.iterator();        while (removeVArraysIter.hasNext()) {          String removeVArrayId=removeVArraysIter.next();          if ((currentAssignments == null) || (!currentAssignments.contains(removeVArrayId))) {            _log.debug("Compute Virtual Pool is not assigned to virtual array {}",removeVArrayId);            continue;          }          varraysRemovedFromCvp.add(removeVArrayId);          varraysForCvpUpdated=true;          _log.debug("Compute Virtual Pool will be unassigned from virtual array {}",removeVArrayId);        }      }    }  }  if (varraysForCvpUpdated) {    if (!varraysAddedToCvp.isEmpty()) {      cvp.addVirtualArrays(varraysAddedToCvp);    }    if (!varraysRemovedFromCvp.isEmpty()) {      cvp.removeVirtualArrays(varraysRemovedFromCvp);    }  }  return varraysForCvpUpdated;}  }
class C{  public static <A extends AbstractValue<A>,S extends Store<S>,T extends TransferFunction<A,S>>void generateDOTofCFG(String inputFile,String outputDir,String method,String clas,boolean pdf,Analysis<A,S,T> analysis){  Entry<MethodTree,CompilationUnitTree> m=getMethodTreeAndCompilationUnit(inputFile,method,clas);  generateDOTofCFG(inputFile,outputDir,method,clas,pdf,analysis,m.getKey(),m.getValue());}  }
class C{  @SuppressWarnings("nullness") static char[] charBufferFromThreadLocal(){  return DEST_TL.get();}  }
class C{  public void dispose(){  Iterator e=fColorTable.values().iterator();  while (e.hasNext())   ((Color)e.next()).dispose();}  }
class C{  public static Configuration parse(String[] args){  if (args.length == 0) {    return defaultConfig;  } else {    try {      if (args.length == 6) {        return new Configuration(Range.parse(args,0),Range.parse(args,3));      }    } catch (    NumberFormatException e) {      System.err.println("MergeExample: error: Argument was not a number.");    }    System.err.println("MergeExample <size start> <size step> <size steps> <parallel start> <parallel step>" + " <parallel steps>");    System.err.println("example: MergeExample 20000 10000 3 1 1 4");    System.err.println("example: will run with arrays of sizes 20000, 30000, 40000" + " and parallelism: 1, 2, 3, 4");    return null;  }}  }
class C{  @Override public void remove(){  throw new UnsupportedOperationException("Unsupported operation");}  }
class C{  public void paintView(){  sensorMatrixNode.setVisible(false);  sensorMatrixNode.setOffset(0.0d,0.0d);  sensorMatrixNode.lowerToBottom();  pixelMatrixNode.raiseToTop();  pixelMatrixNode.setFocus(true);  if (selectionEventHandlerInstalled) {    selectionEventHandlerInstalled=false;    removeInputEventListener(selectionEventHandler);  }  centerCamera();}  }
class C{  public NormalizedPolyKernel(Instances dataset,int cacheSize,double exponent,boolean lowerOrder) throws Exception {  super(dataset,cacheSize,exponent,lowerOrder);}  }
class C{  protected void forwardCommandChangeToLayout(int s){  try {    if ((s == Turnout.THROWN) ^ getInverted()) {      node.getXBee().setDIOValue(IOLine.getDIO(pin),IOValue.HIGH);    } else {      node.getXBee().setDIOValue(IOLine.getDIO(pin),IOValue.LOW);    }    if (pin2 >= 0) {      if ((s == Turnout.CLOSED) ^ getInverted()) {        node.getXBee().setDIOValue(IOLine.getDIO(pin),IOValue.HIGH);      } else {        node.getXBee().setDIOValue(IOLine.getDIO(pin),IOValue.LOW);      }    }  } catch (  TimeoutException toe) {    log.error("Timeout setting IO line value for turnout {} on {}",getUserName(),node.getXBee());  }catch (  InterfaceNotOpenException ino) {    log.error("Interface Not Open setting IO line value for turnout {} on {}",getUserName(),node.getXBee());  }catch (  XBeeException xbe) {    log.error("Error setting IO line value for turout {} on {}",getUserName(),node.getXBee());  }}  }
class C{  public boolean isNext(char c){  return str.length() > pos + 1 && str.charAt(pos + 1) == c;}  }
class C{  public FastAdapterDialog<Item> withNeutralButton(String text,OnClickListener listener){  return withButton(BUTTON_NEUTRAL,text,listener);}  }
class C{  public PrimitiveRecord(BinaryFile inputFile) throws FormatException, EOFException {  x1=(short)(inputFile.readChar() & 0xff);  y1=(short)(inputFile.readChar() & 0xff);  x2=(short)(inputFile.readChar() & 0xff);  y2=(short)(inputFile.readChar() & 0xff);  primId=inputFile.readInteger();}  }
class C{  public HashMetaData(final BlockHeight height,final TimeInstant timeStamp){  this.height=height;  this.timeStamp=timeStamp;}  }
class C{  @Override public void compute(Vertex<LongWritable,LongWritable,NullWritable> vertex,Iterable<LongWritable> messages) throws IOException {  long currentComponent=vertex.getValue().get();  if (getSuperstep() == 0) {    for (    Edge<LongWritable,NullWritable> edge : vertex.getEdges()) {      long neighbor=edge.getTargetVertexId().get();      if (neighbor < currentComponent) {        currentComponent=neighbor;      }    }    if (currentComponent != vertex.getValue().get()) {      vertex.setValue(new LongWritable(currentComponent));      for (      Edge<LongWritable,NullWritable> edge : vertex.getEdges()) {        LongWritable neighbor=edge.getTargetVertexId();        if (neighbor.get() > currentComponent) {          sendMessage(neighbor,vertex.getValue());        }      }    }    vertex.voteToHalt();    return;  }  boolean changed=false;  for (  LongWritable message : messages) {    long candidateComponent=message.get();    if (candidateComponent < currentComponent) {      currentComponent=candidateComponent;      changed=true;    }  }  if (changed) {    vertex.setValue(new LongWritable(currentComponent));    sendMessageToAllEdges(vertex,vertex.getValue());  }  vertex.voteToHalt();}  }
class C{  public MatchQueryBuilder type(Type type){  this.type=type;  return this;}  }
class C{  private boolean checkReadOnlyProcedure() throws SQLException {synchronized (checkClosed().getConnectionMutex()) {    if (this.connection.getNoAccessToProcedureBodies()) {      return false;    }    if (this.paramInfo.isReadOnlySafeChecked) {      return this.paramInfo.isReadOnlySafeProcedure;    }    ResultSet rs=null;    java.sql.PreparedStatement ps=null;    try {      String procName=extractProcedureName();      String catalog=this.currentCatalog;      if (procName.indexOf(".") != -1) {        catalog=procName.substring(0,procName.indexOf("."));        if (StringUtils.startsWithIgnoreCaseAndWs(catalog,"`") && catalog.trim().endsWith("`")) {          catalog=catalog.substring(1,catalog.length() - 1);        }        procName=procName.substring(procName.indexOf(".") + 1);        procName=StringUtils.toString(StringUtils.stripEnclosure(StringUtils.getBytes(procName),"`","`"));      }      ps=this.connection.prepareStatement("SELECT SQL_DATA_ACCESS FROM information_schema.routines WHERE routine_schema = ? AND routine_name = ?");      ps.setMaxRows(0);      ps.setFetchSize(0);      ps.setString(1,catalog);      ps.setString(2,procName);      rs=ps.executeQuery();      if (rs.next()) {        String sqlDataAccess=rs.getString(1);        if ("READS SQL DATA".equalsIgnoreCase(sqlDataAccess) || "NO SQL".equalsIgnoreCase(sqlDataAccess)) {synchronized (this.paramInfo) {            this.paramInfo.isReadOnlySafeChecked=true;            this.paramInfo.isReadOnlySafeProcedure=true;          }          return true;        }      }    } catch (    SQLException e) {    } finally {      if (rs != null) {        rs.close();      }      if (ps != null) {        ps.close();      }    }    this.paramInfo.isReadOnlySafeChecked=false;    this.paramInfo.isReadOnlySafeProcedure=false;  }  return false;}  }
class C{  public String nextString(char quote) throws JSONException {  char c;  StringBuffer sb=new StringBuffer();  for (; ; ) {    c=this.next();switch (c) {case 0:case '\n':case '\r':      throw this.syntaxError("Unterminated string");case '\\':    c=this.next();switch (c) {case 'b':    sb.append('\b');  break;case 't':sb.append('\t');break;case 'n':sb.append('\n');break;case 'f':sb.append('\f');break;case 'r':sb.append('\r');break;case 'u':sb.append((char)Integer.parseInt(this.next(4),16));break;case '"':case '\'':case '\\':case '/':sb.append(c);break;default :throw this.syntaxError("Illegal escape.");}break;default :if (c == quote) {return sb.toString();}sb.append(c);}}}  }
class C{  ActionMap createActionMap(){  ActionMap map=new ActionMapUIResource();  map.put("showSystemMenu",new ShowSystemMenuAction(true));  map.put("hideSystemMenu",new ShowSystemMenuAction(false));  return map;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  static public void assertEquals(Object expected,Object actual){  assertEquals(null,expected,actual);}  }
class C{  public DevelCommandRegister(){  this(new MavenCompiler());}  }
class C{  private static boolean showCheatSheet(View view,CharSequence text){  if (TextUtils.isEmpty(text)) {    return false;  }  final int[] screenPos=new int[2];  final Rect displayFrame=new Rect();  view.getLocationOnScreen(screenPos);  view.getWindowVisibleDisplayFrame(displayFrame);  final Context context=view.getContext();  final int viewWidth=view.getWidth();  final int viewHeight=view.getHeight();  final int viewCenterX=screenPos[0] + viewWidth / 2;  final int screenWidth=context.getResources().getDisplayMetrics().widthPixels;  final int estimatedToastHeight=(int)(ESTIMATED_TOAST_HEIGHT_DIPS * context.getResources().getDisplayMetrics().density);  Toast cheatSheet=Toast.makeText(context,text,Toast.LENGTH_SHORT);  boolean showBelow=screenPos[1] < estimatedToastHeight;  if (showBelow) {    cheatSheet.setGravity(Gravity.TOP | Gravity.CENTER_HORIZONTAL,viewCenterX - screenWidth / 2,screenPos[1] - displayFrame.top + viewHeight);  } else {    cheatSheet.setGravity(Gravity.TOP | Gravity.CENTER_HORIZONTAL,viewCenterX - screenWidth / 2,screenPos[1] - displayFrame.top - estimatedToastHeight);  }  cheatSheet.show();  return true;}  }
class C{  public static long decodeSignedLong(ByteBuffer buffer){  long unsigned=decodeUnsignedLong(buffer);  long signed=(((unsigned << 63) >> 63) ^ unsigned) >> 1;  return signed ^ (unsigned & (1L << 63));}  }
class C{  @TargetApi(21) public Bundler putSize(String key,Size value){  bundle.putSize(key,value);  return this;}  }
class C{  static void verifyDomainIsSameRegistrar(DomainResource superordinateDomain,String clientId) throws EppException {  if (superordinateDomain != null && !clientId.equals(superordinateDomain.getCurrentSponsorClientId())) {    throw new HostDomainNotOwnedException();  }}  }
class C{  public boolean isValid(){  Object oo=get_Value(COLUMNNAME_IsValid);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void findAndInit(Object someObj){  if (someObj instanceof MapBean) {    setMap((MapBean)someObj);  }  if (someObj instanceof MouseDelegator) {    MouseDelegator md=(MouseDelegator)someObj;    md.addPropertyChangeListener(this);  }  statusBar.findAndInit(someObj);}  }
class C{  public String generate(MiniTable miniTable,IStatusBar statusBar,String docActionSelected){  String info="";  log.info("DD_Order_ID=" + m_DD_Order_ID);  log.info("MovementDate" + m_MovementDate);  String trxName=Trx.createTrxName("MVG");  Trx trx=Trx.get(trxName,true);  setSelectionActive(false);  statusBar.setStatusLine(Msg.translate(Env.getCtx(),"M_Movement_ID"));  statusBar.setStatusDB(String.valueOf(getSelection().size()));  Properties m_ctx=Env.getCtx();  Timestamp MovementDate=(Timestamp)m_MovementDate;  MDDOrder order=new MDDOrder(m_ctx,Integer.parseInt(m_DD_Order_ID.toString()),trxName);  MMovement movement=new MMovement(m_ctx,0,trxName);  movement.setDD_Order_ID(order.getDD_Order_ID());  movement.setAD_User_ID(order.getAD_User_ID());  movement.setPOReference(order.getPOReference());  movement.setReversal_ID(0);  movement.setM_Shipper_ID(order.getM_Shipper_ID());  movement.setDescription(order.getDescription());  movement.setC_BPartner_ID(order.getC_BPartner_ID());  movement.setC_BPartner_Location_ID(order.getC_BPartner_Location_ID());  movement.setAD_Org_ID(order.getAD_Org_ID());  movement.setAD_OrgTrx_ID(order.getAD_OrgTrx_ID());  movement.setAD_User_ID(order.getAD_User_ID());  movement.setC_Activity_ID(order.getC_Activity_ID());  movement.setC_Campaign_ID(order.getC_Campaign_ID());  movement.setC_Project_ID(order.getC_Project_ID());  movement.setMovementDate(MovementDate);  movement.setDeliveryRule(order.getDeliveryRule());  movement.setDeliveryViaRule(order.getDeliveryViaRule());  movement.setDocAction(MMovement.ACTION_Prepare);  movement.setDocStatus(MMovement.DOCSTATUS_Drafted);  movement.saveEx();  ArrayList<Integer> ids=getSelection();  int i=0;  for (  int DD_OrderLine_ID : ids) {    MDDOrderLine oline=new MDDOrderLine(m_ctx,DD_OrderLine_ID,trxName);    MMovementLine line=new MMovementLine(movement);    line.setM_Product_ID(oline.getM_Product_ID());    BigDecimal QtyDeliver=(BigDecimal)miniTable.getValueAt(i,1);    if (QtyDeliver == null | QtyDeliver.compareTo(oline.getQtyInTransit()) > 0)     throw new AdempiereException("Error in Qty");    line.setOrderLine(oline,QtyDeliver,true);    line.saveEx();    i++;  }  if (!movement.processIt(MMovement.ACTION_Complete))   log.warning("Failed: " + movement);  movement.setDocStatus(MMovement.DOCACTION_Complete);  movement.setDocAction(MMovement.ACTION_Close);  movement.saveEx();  return info;}  }
class C{  protected boolean calculateSize(){  return false;}  }
class C{  protected boolean envelopeCovers(Geometry g){  if (!baseGeom.getEnvelopeInternal().covers(g.getEnvelopeInternal()))   return false;  return true;}  }
class C{  public RegistrationException(String message,RegistrationExceptionBean bean,Throwable cause){  super(message,bean,cause);  this.bean=bean;}  }
class C{  void remove(ThreadLocal<?> key){  cleanUp();  for (int index=key.hash & mask; ; index=next(index)) {    Object reference=table[index];    if (reference == key.reference) {      table[index]=TOMBSTONE;      table[index + 1]=null;      tombstones++;      size--;      return;    }    if (reference == null) {      return;    }  }}  }
class C{  public synchronized void await(){  while (!open) {    try {      wait();    } catch (    InterruptedException e) {      throw new Error(e);    }  }}  }
class C{  @Override public final int whichSubset(Instance instance) throws Exception {  if (instance.isMissing(m_attIndex)) {    return -1;  } else {    if (instance.attribute(m_attIndex).isNominal()) {      return (int)instance.value(m_attIndex);    } else     if (Utils.smOrEq(instance.value(m_attIndex),m_splitPoint)) {      return 0;    } else {      return 1;    }  }}  }
class C{  public void start(String[] args) throws PlayOnLinuxException {  try (PlayOnLinuxConfig playOnLinuxConfig=new PlayOnLinuxConfig()){    if (args.length > 0 && "--cli".equals(args[0])) {      playOnLinuxConfig.setUseCLIInterface(true);    }    if (args.length > 0 && "--gtk".equals(args[0])) {      playOnLinuxConfig.setUseGTKInterface(true);    }    if (args.length > 0 && "--qt".equals(args[0])) {      playOnLinuxConfig.setUseQtInterface(true);    }    playOnLinuxConfig.load();    serviceManager.init(new PlayOnLinuxServicesConfiguration());    controller.startApplication();    serviceManager.shutdown();  } catch (  InjectionException e) {    throw new PlayOnLinuxException("Fatal error: Unable to inject dependencies",e);  }}  }
class C{  public void addGetfield(CtClass c,String name,String type){  add(GETFIELD);  int ci=constPool.addClassInfo(c);  addIndex(constPool.addFieldrefInfo(ci,name,type));  growStack(Descriptor.dataSize(type) - 1);}  }
class C{  public static Ignite start(String springCfgPath,@Nullable ApplicationContext springCtx) throws IgniteCheckedException {  return IgnitionEx.start(springCfgPath,null,new GridSpringResourceContextImpl(springCtx),null);}  }
class C{  public String exec(MethodContext methodContext) throws MiniLangException {  if (methodContext.isTraceOn()) {    outputTraceMessage(methodContext,"Begin simple-method. Script is running as " + (methodContext.getMethodType() == MethodContext.EVENT ? "an event." : "a service."));  }  Locale locale=methodContext.getLocale();  GenericValue userLogin=methodContext.getUserLogin();  if (loginRequired) {    if (userLogin == null) {      Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("shortDescription",shortDescription);      String errMsg=UtilProperties.getMessage(SimpleMethod.err_resource,"simpleMethod.must_logged_process",messageMap,locale) + ".";      if (methodContext.isTraceOn()) {        outputTraceMessage(methodContext,"login-required attribute set to \"true\" but UserLogin GenericValue was not found, returning error message:",errMsg);      }      return returnError(methodContext,errMsg);    }  }  if (userLogin != null) {    methodContext.putEnv(getUserLoginEnvName(),userLogin);  }  methodContext.putEnv("nullField",GenericEntity.NULL_FIELD);  methodContext.putEnv(getDelegatorEnvName(),methodContext.getDelegator());  methodContext.putEnv(getSecurityEnvName(),methodContext.getSecurity());  methodContext.putEnv(getDispatcherEnvName(),methodContext.getDispatcher());  methodContext.putEnv("locale",locale);  methodContext.putEnv(getParameterMapName(),methodContext.getParameters());  if (methodContext.getMethodType() == MethodContext.EVENT) {    methodContext.putEnv(eventRequestName,methodContext.getRequest());    methodContext.putEnv(eventSessionName,methodContext.getRequest().getSession());    methodContext.putEnv(eventResponseName,methodContext.getResponse());  }  methodContext.putEnv("simpleMethod",this);  methodContext.putEnv("methodName",this.getMethodName());  methodContext.putEnv("methodShortDescription",this.getShortDescription());  boolean beganTransaction=false;  if (useTransaction) {    if (methodContext.isTraceOn()) {      outputTraceMessage(methodContext,"use-transaction attribute set to \"true\", beginning transaction.");    }    try {      beganTransaction=TransactionUtil.begin();    } catch (    GenericTransactionException e) {      String errMsg=UtilProperties.getMessage(SimpleMethod.err_resource,"simpleMethod.error_begin_transaction",locale) + ": " + e.getMessage();      if (methodContext.isTraceOn()) {        outputTraceMessage(methodContext,"An exception was thrown while beginning a transaction, returning error message:",errMsg);      }      return returnError(methodContext,errMsg);    }  }  String errorMsg="";  boolean finished=false;  try {    if (methodContext.isTraceOn()) {      outputTraceMessage(methodContext,"Begin running sub-elements.");    }    finished=runSubOps(methodOperations,methodContext);  } catch (  Throwable t) {    String errMsg=UtilProperties.getMessage(SimpleMethod.err_resource,"simpleMethod.error_running",locale) + ": " + t.getMessage();    if (methodContext.isTraceOn()) {      outputTraceMessage(methodContext,"An exception was thrown while running sub-elements, error message was:",errMsg);    }    finished=false;    errorMsg+=errMsg;  }  if (methodContext.isTraceOn()) {    outputTraceMessage(methodContext,"End running sub-elements.");  }  String returnValue=null;  String response=null;  StringBuilder summaryErrorStringBuffer=new StringBuilder();  if (methodContext.getMethodType() == MethodContext.EVENT) {    boolean forceError=false;    String tempErrorMsg=(String)methodContext.getEnv(eventErrorMessageName);    if (errorMsg.length() > 0 || UtilValidate.isNotEmpty(tempErrorMsg)) {      errorMsg+=tempErrorMsg;      methodContext.getRequest().setAttribute("_ERROR_MESSAGE_",errorMsg);      forceError=true;      summaryErrorStringBuffer.append(errorMsg);    }    List<Object> tempErrorMsgList=UtilGenerics.checkList(methodContext.getEnv(eventErrorMessageListName));    if (UtilValidate.isNotEmpty(tempErrorMsgList)) {      methodContext.getRequest().setAttribute("_ERROR_MESSAGE_LIST_",tempErrorMsgList);      forceError=true;      summaryErrorStringBuffer.append("; ");      summaryErrorStringBuffer.append(tempErrorMsgList.toString());    }    String eventMsg=(String)methodContext.getEnv(eventEventMessageName);    if (UtilValidate.isNotEmpty(eventMsg)) {      methodContext.getRequest().setAttribute("_EVENT_MESSAGE_",eventMsg);    }    List<String> eventMsgList=UtilGenerics.checkList(methodContext.getEnv(eventEventMessageListName));    if (UtilValidate.isNotEmpty(eventMsgList)) {      methodContext.getRequest().setAttribute("_EVENT_MESSAGE_LIST_",eventMsgList);    }    response=(String)methodContext.getEnv(eventResponseCodeName);    if (UtilValidate.isEmpty(response)) {      if (forceError) {        Debug.logInfo("No response code string found, but error messages found so assuming error; returning code [" + defaultErrorCode + "]",module);        response=defaultErrorCode;      } else {        Debug.logInfo("No response code string or errors found, assuming success; returning code [" + defaultSuccessCode + "]",module);        response=defaultSuccessCode;      }    } else     if ("null".equalsIgnoreCase(response)) {      response=null;    }    returnValue=response;  } else {    boolean forceError=false;    String tempErrorMsg=(String)methodContext.getEnv(serviceErrorMessageName);    if (errorMsg.length() > 0 || UtilValidate.isNotEmpty(tempErrorMsg)) {      errorMsg+=tempErrorMsg;      methodContext.putResult(ModelService.ERROR_MESSAGE,errorMsg);      forceError=true;      summaryErrorStringBuffer.append(errorMsg);    }    List<Object> errorMsgList=UtilGenerics.checkList(methodContext.getEnv(serviceErrorMessageListName));    if (UtilValidate.isNotEmpty(errorMsgList)) {      methodContext.putResult(ModelService.ERROR_MESSAGE_LIST,errorMsgList);      forceError=true;      summaryErrorStringBuffer.append("; ");      summaryErrorStringBuffer.append(errorMsgList.toString());    }    Map<String,Object> errorMsgMap=UtilGenerics.checkMap(methodContext.getEnv(serviceErrorMessageMapName));    if (UtilValidate.isNotEmpty(errorMsgMap)) {      methodContext.putResult(ModelService.ERROR_MESSAGE_MAP,errorMsgMap);      forceError=true;      summaryErrorStringBuffer.append("; ");      summaryErrorStringBuffer.append(errorMsgMap.toString());    }    String successMsg=(String)methodContext.getEnv(serviceSuccessMessageName);    if (UtilValidate.isNotEmpty(successMsg)) {      methodContext.putResult(ModelService.SUCCESS_MESSAGE,successMsg);    }    List<Object> successMsgList=UtilGenerics.checkList(methodContext.getEnv(serviceSuccessMessageListName));    if (UtilValidate.isNotEmpty(successMsgList)) {      methodContext.putResult(ModelService.SUCCESS_MESSAGE_LIST,successMsgList);    }    response=(String)methodContext.getEnv(serviceResponseMessageName);    if (UtilValidate.isEmpty(response)) {      if (forceError) {        Debug.logVerbose("No response code string found, but error messages found so assuming error; returning code [" + defaultErrorCode + "]",module);        response=defaultErrorCode;      } else {        Debug.logVerbose("No response code string or errors found, assuming success; returning code [" + defaultSuccessCode + "]",module);        response=defaultSuccessCode;      }    }    methodContext.putResult(ModelService.RESPONSE_MESSAGE,response);    returnValue=response;  }  boolean doCommit=true;  if (!finished && defaultErrorCode.equals(response)) {    doCommit=false;  }  if (doCommit) {    if (methodContext.isTraceOn()) {      outputTraceMessage(methodContext,"Begin commit transaction.");    }    try {      TransactionUtil.commit(beganTransaction);    } catch (    GenericTransactionException e) {      String errMsg="Error trying to commit transaction, could not process method: " + e.getMessage();      if (methodContext.isTraceOn()) {        outputTraceMessage(methodContext,"An exception was thrown while committing a transaction, returning error message:",errMsg);      }      errorMsg+=errMsg;    }  } else {    if (methodContext.isTraceOn()) {      outputTraceMessage(methodContext,"Begin roll back transaction.");    }    try {      TransactionUtil.rollback(beganTransaction,"Error in simple-method [" + this.getShortDescription() + "]: "+ summaryErrorStringBuffer,null);    } catch (    GenericTransactionException e) {      String errMsg="Error trying to rollback transaction, could not process method: " + e.getMessage();      if (methodContext.isTraceOn()) {        outputTraceMessage(methodContext,"An exception was thrown while rolling back a transaction, returning error message:",errMsg);      }      errorMsg+=errMsg;    }  }  if (methodContext.isTraceOn()) {    outputTraceMessage(methodContext,"End simple-method.");  }  return returnValue;}  }
class C{  public AuthenticationException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  private void checkIteratorEmpty(IgniteCache<String,Integer> cache) throws Exception {  int cnt=5;  for (int i=0; i < cnt; ++i) {    Iterator<Cache.Entry<String,Integer>> iter=cache.iterator();    iter.next();    assert iter.hasNext();  }  System.gc();  for (int i=0; i < 10; i++) {    try {      cache.size();      checkIteratorsCleared();    } catch (    AssertionFailedError e) {      if (i == 9)       throw e;      log.info("Set iterators not cleared, will wait");      Thread.sleep(1000);    }  }}  }
class C{  public NotificationChain basicSetBody(Block newBody,NotificationChain msgs){  Block oldBody=body;  body=newBody;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.N4_METHOD_DECLARATION__BODY,oldBody,newBody);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  protected static void writeText(TDataOutputStream dos,String s) throws IOException {  if (s.length() > 0) {    dos.writeBytes(s);    dos.writeByte(0);    if ((s.length() % 2) == 0) {      dos.writeByte(0);    }  }}  }
class C{  public SelectionBuilder table(String table,String... tableParams){  if (tableParams != null && tableParams.length > 0) {    String[] parts=table.split("[?]",tableParams.length + 1);    StringBuilder sb=new StringBuilder(parts[0]);    for (int i=1; i < parts.length; i++) {      sb.append('"').append(tableParams[i - 1]).append('"').append(parts[i]);    }    mTable=sb.toString();  } else {    mTable=table;  }  return this;}  }
class C{  public synchronized void messageReceived(final NextFilter nextFilter,final IoBuffer buf){  try {    int step=((Integer)getSession().getAttribute(HANDSHAKE_STEP)).intValue();    if (step == SocksProxyConstants.SOCKS5_GREETING_STEP && buf.get(0) != SocksProxyConstants.SOCKS_VERSION_5) {      throw new IllegalStateException("Wrong socks version running on server");    }    if ((step == SocksProxyConstants.SOCKS5_GREETING_STEP || step == SocksProxyConstants.SOCKS5_AUTH_STEP) && buf.remaining() >= 2) {      handleResponse(nextFilter,buf,step);    } else     if (step == SocksProxyConstants.SOCKS5_REQUEST_STEP && buf.remaining() >= 5) {      handleResponse(nextFilter,buf,step);    }  } catch (  Exception ex) {    closeSession("Proxy handshake failed: ",ex);  }}  }
class C{  protected Collection<MailAddress> replaceMailAddresses(Mail mail,Collection<MailAddress> list){  Collection<MailAddress> newList=new HashSet<MailAddress>(list.size());  for (  Object aList : list) {    MailAddress mailAddress=(MailAddress)aList;    if (!mailAddress.getDomain().equalsIgnoreCase("address.marker")) {      newList.add(mailAddress);    } else     if (mailAddress == SpecialAddress.SENDER || mailAddress == SpecialAddress.FROM) {      MailAddress sender=mail.getSender();      if (sender != null) {        newList.add(sender);      }    } else     if (mailAddress == SpecialAddress.REPLY_TO) {      int parsedAddressCount=0;      try {        InternetAddress[] replyToArray=(InternetAddress[])mail.getMessage().getReplyTo();        if (replyToArray != null) {          for (          InternetAddress aReplyToArray : replyToArray) {            try {              newList.add(new MailAddress(aReplyToArray));              parsedAddressCount++;            } catch (            ParseException pe) {              log("Unable to parse a \"REPLY_TO\" header address in the original message: " + aReplyToArray + "; ignoring.");            }          }        }      } catch (      MessagingException ae) {        log("Unable to parse the \"REPLY_TO\" header in the original message; ignoring.");      }      if (parsedAddressCount == 0) {        MailAddress sender=mail.getSender();        if (sender != null) {          newList.add(sender);        }      }    } else     if (mailAddress == SpecialAddress.REVERSE_PATH) {      MailAddress reversePath=mail.getSender();      if (reversePath != null) {        newList.add(reversePath);      }    } else     if (mailAddress == SpecialAddress.RECIPIENTS || mailAddress == SpecialAddress.TO) {      newList.addAll(mail.getRecipients());    } else     if (mailAddress == SpecialAddress.UNALTERED) {    } else     if (mailAddress == SpecialAddress.NULL) {    } else {      newList.add(mailAddress);    }  }  return newList;}  }
class C{  private void performExchange() throws InterruptedException {  exchangeA=createExchange(true,inputStreamA,outputStreamA,friendStoreA,messageStoreA);  exchangeB=createExchange(false,inputStreamB,outputStreamB,friendStoreB,messageStoreB);  Thread threadA=new Thread(exchangeA);  Thread threadB=new Thread(exchangeB);  threadA.start();  threadB.start();  threadA.join();  threadB.join();  assertEquals(exchangeA.getErrorMessage(),Exchange.Status.SUCCESS,exchangeA.getExchangeStatus());  assertEquals(exchangeB.getErrorMessage(),Exchange.Status.SUCCESS,exchangeB.getExchangeStatus());}  }
class C{  public E poll(){  if (isEmpty()) {    return null;  }  E result=elements[0];  removeAt(0);  return result;}  }
class C{  public SignatureVisitor visitParameterType(){  return this;}  }
class C{  public static String readFully(Reader reader) throws IOException {  try {    StringWriter writer=new StringWriter();    char[] buffer=new char[1024];    int count;    while ((count=reader.read(buffer)) != -1) {      writer.write(buffer,0,count);    }    return writer.toString();  }  finally {    reader.close();  }}  }
class C{  public boolean isValid(){  return isValid;}  }
class C{  protected RepairableMetaBuilder(){  this.meta=Diorite.getCore().getItemFactory().construct(RepairableMeta.class);}  }
class C{  private void checkIfSubscriptionAlreadyExists(VOService product) throws SubscriptionAlreadyExistsException, ObjectNotFoundException {  Product prod=dataManager.getReference(Product.class,product.getKey());  TechnicalProduct technicalProduct=prod.getTechnicalProduct();  if (technicalProduct.isOnlyOneSubscriptionAllowed()) {    Organization organization=dataManager.getCurrentUser().getOrganization();    Long numberOfSubscriptions=getSubscriptionDao().getNumberOfVisibleSubscriptions(technicalProduct,organization);    if (numberOfSubscriptions.longValue() > 0) {      Object[] params=new Object[]{prod.getProductId()};      SubscriptionAlreadyExistsException subAlreadyExistsException=new SubscriptionAlreadyExistsException(params);      LOG.logWarn(Log4jLogger.SYSTEM_LOG | Log4jLogger.AUDIT_LOG,subAlreadyExistsException,LogMessageIdentifier.WARN_USER_SUBSCRIBE_SERVICE_FAILED_ONLY_ONE_ALLOWED,Long.toString(dataManager.getCurrentUser().getKey()),Long.toString(prod.getKey()),Long.toString(organization.getKey()));      throw subAlreadyExistsException;    }  }}  }
class C{  public static boolean detectNBT(ItemStack stack){  return stack.hasTagCompound();}  }
class C{  private void simplifyConstraints(){  if (this.constraints.size() <= 1) {    return;  }  Set<TypeClass> allSupers=new TreeSet<>();  for (  TypeClass tc : this.constraints) {    allSupers.addAll(tc.getSupers());  }  this.constraints=new TreeSet<>(Sets.difference(this.constraints,allSupers));  return;}  }
class C{  public void waitForPaxosToFinish(){  proposeLock.lock();  canPropose.awaitUninterruptibly();  proposeLock.unlock();}  }
class C{  public Node(final Key k,final Value v,final Node<Key,Value> empty){  key=k;  value=v;  left=empty;  right=empty;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:15.098 -0500",hash_original_method="63DCB38A03804A8CF42B493B58B13DDC",hash_generated_method="AEAC4FC839166262D33179B9687CDBAA") public void init(PrivateKey key){  try {    if (signature != null) {      signature.initSign(key);    } else     if (cipher != null) {      cipher.init(Cipher.ENCRYPT_MODE,key);    }  } catch (  InvalidKeyException e) {    throw new AlertException(AlertProtocol.BAD_CERTIFICATE,new SSLException("init - invalid private key",e));  }}  }
class C{  public static Exception establishCacheIfNeeded(PrintStream... progress){  if (m_offline) {    return null;  }  if (REP_MIRROR == null) {    establishMirror();  }  Exception problem=null;  if (INITIAL_CACHE_BUILD_NEEDED) {    for (    PrintStream p : progress) {      p.println("Caching repository meta data, please wait...");    }    problem=refreshCache(progress);    INITIAL_CACHE_BUILD_NEEDED=false;  }  return problem;}  }
class C{  public static Map<String,Object> testXmlRpcAdd(DispatchContext dctx,Map<String,?> context){  Locale locale=(Locale)context.get("locale");  Map<String,Object> response=ServiceUtil.returnSuccess();  Integer num1=(Integer)context.get("num1");  Integer num2=(Integer)context.get("num2");  if (UtilValidate.isEmpty(num1) || UtilValidate.isEmpty(num2)) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ServiceTestXmlRpcMissingParameters",locale));  }  Integer res=num1 + num2;  response.put("resulting",res);  return response;}  }
class C{  public int checkActionAccess(int clientId,int docTypeId,String[] options,int maxIndex){  if (maxIndex <= 0)   return maxIndex;  final Vector<String> validOptions=new Vector<String>();  final List<Object> params=new ArrayList<Object>();  params.add(clientId);  params.add(docTypeId);  final StringBuffer sql_values=new StringBuffer();  for (int i=0; i < maxIndex; i++) {    if (sql_values.length() > 0)     sql_values.append(",");    sql_values.append("?");    params.add(options[i]);  }  final String sql="SELECT DISTINCT rl.Value FROM AD_Document_Action_Access a" + " INNER JOIN AD_Ref_List rl ON (rl.AD_Reference_ID=135 and rl.AD_Ref_List_ID=a.AD_Ref_List_ID)" + " WHERE a.IsActive='Y' AND a.AD_Client_ID=? AND a.C_DocType_ID=?"+ " AND rl.Value IN (" + sql_values + ")"+ " AND "+ getIncludedRolesWhereClause("a.AD_Role_ID",params);  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    DB.setParameters(pstmt,params);    rs=pstmt.executeQuery();    while (rs.next()) {      String op=rs.getString(1);      validOptions.add(op);    }    validOptions.toArray(options);  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  int newMaxIndex=validOptions.size();  return newMaxIndex;}  }
class C{  @Override public Object clone(){  try {    return new Matrix(m_Matrix.getArrayCopy());  } catch (  Exception e) {    e.printStackTrace();    return null;  }}  }
class C{  public static boolean isValidTime(String value){  String regex="\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(Z|(\\+|-)\\d\\d:\\d\\d)?";  if (value.matches(regex)) {    return isValidCalendarValue(value);  } else {    return false;  }}  }
class C{  private void pop(final String desc){  char c=desc.charAt(0);  if (c == '(') {    pop((Type.getArgumentsAndReturnSizes(desc) >> 2) - 1);  } else   if (c == 'J' || c == 'D') {    pop(2);  } else {    pop(1);  }}  }
class C{  public void remove(TradelogSummary tradelogSummary){  this.tradelogSummary.remove(tradelogSummary);}  }
class C{  public static <T extends Case1<A>,A>DecomposableMatchBuilder0<T> case1(Class<T> clazz,MatchesExact<A> a){  List<Matcher<Object>> matchers=Lists.of(ArgumentMatchers.eq(a.t));  return new DecomposableMatchBuilder0<T>(matchers,new Case1FieldExtractor<>(clazz));}  }
class C{  public static boolean verify(X509Certificate certificate,SecurityAlgorithm algorithm,byte[] data,byte[] signature) throws SignatureException, InvalidKeyException, NoSuchAlgorithmException {  try {    return CryptoUtil.verifyAsymm(certificate,algorithm,data,signature);  } catch (  ServiceResultException e) {    throw new SignatureException(e);  }}  }
class C{  public CodeSigner[] verify(Hashtable<String,CodeSigner[]> verifiedSigners,Hashtable<String,CodeSigner[]> sigFileSigners) throws JarException {  if (skip) {    return null;  }  if (signers != null)   return signers;  for (int i=0; i < digests.size(); i++) {    MessageDigest digest=digests.get(i);    byte[] manHash=manifestHashes.get(i);    byte[] theHash=digest.digest();    if (debug != null) {      debug.println("Manifest Entry: " + name + " digest="+ digest.getAlgorithm());      debug.println("  manifest " + toHex(manHash));      debug.println("  computed " + toHex(theHash));      debug.println();    }    if (!MessageDigest.isEqual(theHash,manHash))     throw new SecurityException(digest.getAlgorithm() + " digest error for " + name);  }  signers=sigFileSigners.remove(name);  if (signers != null) {    verifiedSigners.put(name,signers);  }  return signers;}  }
class C{  public synchronized boolean requestAccount(RequestData data) throws JPlagException {  if (data.getRealName() == null && data.getEmail() == null && data.getEmailSecond() == null && data.getHomepage() == null && data.getReason() == null && data.getNotes() == null) {    if (data.getPassword() == null && data.getUsername() != null) {      if (exists(data.getUsername()))       return false; else       return !requestAdmin.exists(data.getUsername());    } else     if (data.getPassword() != null && data.getUsername() == null) {      String username=requestAdmin.validateRequest(data.getPassword());      RequestData rd=requestAdmin.getRequestData(username);      NodeList userList=rootElement.getElementsByTagName("user");      for (int i=0; i < userList.getLength(); i++) {        Element elem=(Element)userList.item(i);        if ((parseInt(elem,"state") & MASK_REQUESTNOTIFY) != 0) {          sendMail(elem.getAttribute("email"),MailTemplateAdmin.SERVER_REQUESTNOTIFY,rd);        }      }      return true;    }  }  if (data.getUsername() == null || data.getPassword() == null || data.getRealName() == null || data.getEmail() == null || data.getReason() == null)   throw new JPlagException("requestAccount","Username, password, " + "real name, primary email or reason is missing!","Check your input!");  if (!isValidUsername(data.getUsername()))   throw new JPlagException("requestAccount","Illegal new username!","The username may only consist of the " + "following characters: 'A'-'Z', 'a'-'z', " + "'0'-'9', '@' and '.'");  if (exists(data.getUsername()) || requestAdmin.exists(data.getUsername()))   throw new JPlagException("requestAccount","Username already used!","Seems like somebody else was faster ;)");  String vericode=requestAdmin.addRequest(data);  sendMail(data.getEmail(),MailTemplateAdmin.SERVER_VERIFICATION,data,"code",vericode);  return true;}  }
class C{  public boolean selectNode(D nodeData,SignalEvent event){  if (selectedNodes.isEmpty()) {    insertAndSelectNode(nodeData,0,true);    return true;  }  if (!hasSameParent(selectedNodes.get(0),nodeData)) {    if (!this.multilevelSelection || event.getShiftKey()) {      return selectSingleNode(nodeData);    }  }  if (event == null || event.getCommandKey()) {    ctrlSelect(nodeData);    return true;  } else {    if (event.getShiftKey()) {      return shiftSelect(nodeData);    }  }  return selectSingleNode(nodeData);}  }
class C{  public Hypervolume(Problem problem,NondominatedPopulation referenceSet){  super(problem,referenceSet);}  }
class C{  public void incrementCoalescingKey(long downTime){  int currentValue=mDownTimeToCoalescingKey.get((int)downTime,-1);  if (currentValue == -1) {    throw new RuntimeException("Tried to increment non-existent cookie");  }  mDownTimeToCoalescingKey.put((int)downTime,currentValue + 1);}  }
class C{  public void login(String authSubToken) throws AuthenticationException, DocumentListException {  documentList.loginWithAuthSubToken(authSubToken);}  }
class C{  public static Data create(DataHandler handler,byte[] buff){  return new Data(handler,buff);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case DatatypePackage.BOOLEAN_PROPERTY_ATTRIBUTE__TYPE:    return getType();case DatatypePackage.BOOLEAN_PROPERTY_ATTRIBUTE__VALUE:  return isValue();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'VIDEO_CACHE' ("+ "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ,"+ "'RESULT' TEXT,"+ "'PAGE' INTEGER,"+ "'TIME' INTEGER);");}  }
class C{  private void startUp() throws Exception {  startGrids(GRID_CNT);  awaitPartitionMapExchange();}  }
class C{  public BQDaemonTestRuntime start(){  InMemoryPrintStream stdout=new InMemoryPrintStream(System.out);  InMemoryPrintStream stderr=new InMemoryPrintStream(System.err);  BootLogger bootLogger=new DefaultBootLogger(true,stdout,stderr);  BQRuntime runtime=bootique.bootLogger(bootLogger).createRuntime();  BQDaemonTestRuntime testRuntime=new BQDaemonTestRuntime(runtime,stdout,stderr,startupCheck);  runtimes.add(testRuntime);  testRuntime.start(startupTimeout,startupTimeoutTimeUnit);  return testRuntime;}  }
class C{  public static List<VOParameter> toVOParameters(ParameterSet parameterSet,LocalizerFacade facade){  if (parameterSet == null) {    return new ArrayList<VOParameter>();  }  List<VOParameter> result=new ArrayList<VOParameter>();  List<Parameter> parameters=parameterSet.getParameters();  for (  Parameter param : parameters) {    VOParameterDefinition paramDef=ParameterDefinitionAssembler.toVOParameterDefinition(param.getParameterDefinition(),facade);    VOParameter voParam=new VOParameter(paramDef);    voParam.setValue(param.getValue());    voParam.setConfigurable(param.isConfigurable());    updateValueObject(voParam,param);    result.add(voParam);  }  return result;}  }
class C{  void transform(float v[],int tv[],int nvert){  float lxx=xx, lxy=xy, lxz=xz, lxo=xo;  float lyx=yx, lyy=yy, lyz=yz, lyo=yo;  float lzx=zx, lzy=zy, lzz=zz, lzo=zo;  for (int i=nvert * 3; (i-=3) >= 0; ) {    float x=v[i];    float y=v[i + 1];    float z=v[i + 2];    tv[i]=(int)(x * lxx + y * lxy + z * lxz + lxo);    tv[i + 1]=(int)(x * lyx + y * lyy + z * lyz + lyo);    tv[i + 2]=(int)(x * lzx + y * lzy + z * lzz + lzo);  }}  }
class C{  public BufferedInputIterator(InputIterator source) throws IOException {  BytesRef spare;  int freqIndex=0;  hasPayloads=source.hasPayloads();  hasContexts=source.hasContexts();  while ((spare=source.next()) != null) {    entries.append(spare);    if (hasPayloads) {      payloads.append(source.payload());    }    if (hasContexts) {      contextSets.add(source.contexts());    }    if (freqIndex >= freqs.length) {      freqs=ArrayUtil.grow(freqs,freqs.length + 1);    }    freqs[freqIndex++]=source.weight();  }}  }
class C{  public void consume(){  this.consumed=true;}  }
class C{  public boolean isTextVisible(){  return null == textVisible ? _textVisible : textVisible.get();}  }
class C{  public BusMovement(Settings settings){  super(settings);  int bcs=settings.getInt(BusControlSystem.BUS_CONTROL_SYSTEM_NR);  controlSystem=BusControlSystem.getBusControlSystem(bcs);  controlSystem.setMap(super.getMap());  this.id=nextID++;  controlSystem.registerBus(this);  startMode=true;  stops=new LinkedList<Coord>();  List<MapNode> stopNodes=super.getStops();  for (  MapNode node : stopNodes) {    stops.add(node.getLocation().clone());  }  controlSystem.setBusStops(stops);}  }
class C{  public void loadFile(){  int retVal;  int i;  String filename;  retVal=fileChooser.showOpenDialog(this);  if (retVal != ConverterFileChooser.APPROVE_OPTION) {    return;  }  setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  for (i=0; i < fileChooser.getSelectedFiles().length; i++) {    filename=fileChooser.getSelectedFiles()[i].getAbsolutePath();    loadFile(filename,fileChooser.getLoader());  }  setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));}  }
class C{  protected void sequence_EquationFakeDefinition(ISerializationContext context,EquationFakeDefinition semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,GamlPackage.Literals.GAML_DEFINITION__NAME) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,GamlPackage.Literals.GAML_DEFINITION__NAME));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getEquationFakeDefinitionAccess().getNameValid_IDParserRuleCall_1_0(),semanticObject.getName());  feeder.finish();}  }
class C{  public static String parseSignedMessage(HttpServletRequest request) throws IllegalArgumentException {  String queryString=request.getQueryString();  String samlRequest=HTTPTransportUtils.getRawQueryStringParameter(queryString,SamlUtils.SAML_REQUEST_PARAMETER);  String samlResponse=HTTPTransportUtils.getRawQueryStringParameter(queryString,SamlUtils.SAML_RESPONSE_PARAMETER);  Validate.isTrue(samlRequest != null || samlResponse != null);  String signature=HTTPTransportUtils.getRawQueryStringParameter(queryString,SamlUtils.SIGNATURE_PARAMETER);  String sigAlgo=HTTPTransportUtils.getRawQueryStringParameter(queryString,SamlUtils.SIGNATURE_ALGORITHM_PARAMETER);  String relayState=HTTPTransportUtils.getRawQueryStringParameter(queryString,SamlUtils.RELAY_STATE_PARAMETER);  if (signature == null || sigAlgo == null) {    return null;  }  StringBuilder builder=new StringBuilder();  if (samlRequest != null) {    builder.append(samlRequest);  } else {    builder.append(samlResponse);  }  if (relayState != null) {    builder.append('&');    builder.append(relayState);  }  builder.append('&');  builder.append(sigAlgo);  String signedMessage=builder.toString();  log.debug("Constructed signed message {}",signedMessage);  return signedMessage;}  }
class C{  public double fitness(){  return 1.0 / (1.0 + standardizedFitness);}  }
class C{  public boolean isBeforeActive(){  return getState().isBeforeActive();}  }
class C{  public int nameIndex(int i){  return ByteArray.readU16bit(info,i * 10 + 6);}  }
class C{  LDAPCRLSelector(X509CRLSelector selector,Collection<X500Principal> certIssuers,String ldapDN) throws IOException {  this.selector=selector == null ? new X509CRLSelector() : selector;  this.certIssuers=certIssuers;  issuerNames=new HashSet<>();  issuerNames.add(ldapDN);  issuers=new HashSet<>();  issuers.add(new X500Name(ldapDN).asX500Principal());}  }
class C{  @Deprecated private boolean isReadAllowed(CnATreeElement elmt){  ServiceFactory.lookupAuthService();  if (!ServiceFactory.isPermissionHandlingNeeded()) {    return true;  }  if (AuthenticationHelper.getInstance().currentUserHasRole(new String[]{ApplicationRoles.ROLE_ADMIN})) {    return true;  }  LoadCurrentUserConfiguration lcuc=new LoadCurrentUserConfiguration();  try {    lcuc=ServiceFactory.lookupCommandService().executeCommand(lcuc);  } catch (  CommandException e) {    LOG.error("Error checking element permissions",e);    return false;  }  Configuration c=lcuc.getConfiguration();  if (c == null) {    return false;  }  CnATreeElement elemntWithPermissions=Retriever.checkRetrievePermissions(elmt);  for (  Permission p : elemntWithPermissions.getPermissions()) {    if (p.isReadAllowed() && c.getRoles().contains(p.getRole())) {      return true;    }  }  return false;}  }
class C{  public boolean isConstructed(){  return ((tag & 0x020) == 0x020);}  }
class C{  protected void fillData(){  if (filter.name != null)   filterNameText.setText(filter.name);  ;  FilterType filterOp=filter.type;  FilterPred filterPred=filter.pred;  BoolOp boolOp=filterPred.getBoolOp();  List<FilterPredClause> clauses=filterPred.getClauses();  filterTypeButtons[filterOp.getValue()].setSelection(true);  boolOpButtons[boolOp.getValue()].setSelection(true);  numberOfPredClauses=clauses.size();  for (int i=0; i < MAX_PRED_CLAUSES; i++) {    fieldCombos[i].setItems(filterFields);    compOpCombos[i].setItems(CompareOp.strings);    if (i < numberOfPredClauses) {      FilterPredClause clause=clauses.get(i);      String field=clause.field;      CompareOp compOp=clause.compOp;      String value=clause.value;      fieldCombos[i].setText(field);      compOpCombos[i].select(compOp.getValue());      valueTexts[i].setText(value);      clausesComplete[i]=true;    } else {      setPredVisible(i,false);      clausesComplete[i]=false;    }  }  setPageComplete(true);}  }
class C{  private void handleFormat(Format format,Object arg,int begin,List<FieldContainer> fields){  if (fields == null) {    return;  }  AttributedCharacterIterator iterator=format.formatToCharacterIterator(arg);  while (iterator.getIndex() != iterator.getEndIndex()) {    int start=iterator.getRunStart();    int end=iterator.getRunLimit();    Iterator<?> it=iterator.getAttributes().keySet().iterator();    while (it.hasNext()) {      AttributedCharacterIterator.Attribute attribute=(AttributedCharacterIterator.Attribute)it.next();      Object value=iterator.getAttribute(attribute);      fields.add(new FieldContainer(begin + start,begin + end,attribute,value));    }    iterator.setIndex(end);  }}  }
class C{  public void encode(DerOutputStream out) throws IOException {  out.putIA5String(name);}  }
class C{  private void columnOpTransform2(Matrix M,int low,int high,double x,int k,double y,boolean notlast,double z,double r,double q){  double p;  for (int i=low; i <= high; i++) {    p=x * M.get(i,k) + y * M.get(i,k + 1);    if (notlast) {      p=p + z * M.get(i,k + 2);      M.set(i,k + 2,M.get(i,k + 2) - p * r);    }    M.increment(i,k,-p);    M.increment(i,k + 1,-p * q);  }}  }
class C{  protected void sequence_BitwiseANDExpression_BitwiseORExpression_BitwiseXORExpression(ISerializationContext context,BinaryBitwiseExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  static void checkInternalName(final String name,final String msg){  if (name == null || name.length() == 0) {    throw new IllegalArgumentException("Invalid " + msg + " (must not be null or empty)");  }  if (name.charAt(0) == '[') {    checkDesc(name,false);  } else {    checkInternalName(name,0,-1,msg);  }}  }
class C{  public boolean isSingleNalUnitPacket(){  return decodeNalUnitType == NalUnitType.CODE_SLICE_IDR_PICTURE || decodeNalUnitType == NalUnitType.CODE_SLICE_NON_IDR_PICTURE || decodeNalUnitType == NalUnitType.CODE_SLICE_DATA_PARTITION_A || decodeNalUnitType == NalUnitType.CODE_SLICE_DATA_PARTITION_B || decodeNalUnitType == NalUnitType.CODE_SLICE_DATA_PARTITION_C || decodeNalUnitType == NalUnitType.SEQUENCE_PARAMETER_SET || decodeNalUnitType == NalUnitType.PICTURE_PARAMETER_SET || decodeNalUnitType == NalUnitType.OTHER_NAL_UNIT;}  }
class C{  public void generate(Projection proj,long time){  for (  OMGraphic geom : this) {    if (geom instanceof TemporalOMGraphic) {      ((TemporalOMGraphic)geom).generate(proj,time);    } else {      geom.generate(proj);    }  }}  }
class C{  public static LinkedHashMap<String,HeatmapFacet> distribParse(SolrParams params,ResponseBuilder rb){  final LinkedHashMap<String,HeatmapFacet> heatmapFacets=new LinkedHashMap<>();  final String[] heatmapFields=params.getParams(FacetParams.FACET_HEATMAP);  if (heatmapFields != null) {    for (    String heatmapField : heatmapFields) {      HeatmapFacet facet=new HeatmapFacet(rb,heatmapField);      heatmapFacets.put(facet.getKey(),facet);    }  }  return heatmapFacets;}  }
class C{  public static DoubleMatrix1D div(DoubleMatrix1D A,DoubleMatrix1D B){  return A.assign(B,F.div);}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) private <T>T create(Class<T> cls,QName qname){  return (T)Configuration.getBuilderFactory().getBuilder(qname).buildObject(qname);}  }
class C{  public TopologyProviderFactory(Properties props){  this.props=props;}  }
class C{  public ConfigurationCustomizerProvider(final Map<String,Object> keyValues){  properties=keyValues;}  }
class C{  public static Weeks weeksIn(ReadableInterval interval){  if (interval == null) {    return Weeks.ZERO;  }  int amount=BaseSingleFieldPeriod.between(interval.getStart(),interval.getEnd(),DurationFieldType.weeks());  return Weeks.weeks(amount);}  }
class C{  public List<ShoppingCartItem> findAllCartItemsInCategory(String productCategoryId,String groupNumber){  if (productCategoryId == null)   return this.items();  Delegator delegator=this.getDelegator();  List<ShoppingCartItem> itemsToReturn=FastList.newInstance();  try {    for (    ShoppingCartItem cartItem : cartLines) {      if (UtilValidate.isNotEmpty(groupNumber) && !cartItem.isInItemGroup(groupNumber)) {        continue;      }      if (CategoryWorker.isProductInCategory(delegator,cartItem.getProductId(),productCategoryId)) {        itemsToReturn.add(cartItem);      } else {      }    }  } catch (  GenericEntityException e) {    Debug.logError(e,"Error getting cart items that are in a category: " + e.toString(),module);  }  return itemsToReturn;}  }
class C{  void commit(long index){  if (event != null && event.eventIndex == index) {    events.add(event);    sendEvent(event);  }}  }
class C{  public final void testGetName(){  String name="someName";  ECGenParameterSpec ps=new ECGenParameterSpec(name);  assertEquals(name,ps.getName());}  }
class C{  public void testGetAttributeCount(){  int expectedReturn=5;  unknownAttributesAttribute.addAttributeID((char)21);  unknownAttributesAttribute.addAttributeID((char)22);  unknownAttributesAttribute.addAttributeID((char)23);  unknownAttributesAttribute.addAttributeID((char)24);  unknownAttributesAttribute.addAttributeID((char)25);  unknownAttributesAttribute.addAttributeID((char)25);  int actualReturn=unknownAttributesAttribute.getAttributeCount();  assertEquals("getAttributeCount did not return the expected value",expectedReturn,actualReturn);}  }
class C{  public CanvasContainerBuilder add(CanvasComponent component){  toAdd.add(component);  return this;}  }
class C{  public void evaluate(final EvolutionState state,final Individual ind,final int subpopulation,final int threadnum){  BitVectorIndividual ind2=(BitVectorIndividual)ind;  double fitness=0;  for (int i=0; i < formula.length; i++)   fitness+=formula[i].eval(ind2);  ((SimpleFitness)(ind2.fitness)).setFitness(state,fitness,false);  ind2.evaluated=true;}  }
class C{  private boolean checkConnect(short otherId){  return canDouble() && blockId == otherId;}  }
class C{  @Override public void destroyMemory(String database,boolean isSchema){  try {    Accessor accessor=((JpaEntityManagerFactory)getFactory()).getServerSession().getReadConnectionPool().acquireConnection();    Connection connection=accessor.getConnection();    Statement statement=connection.createStatement();    if (isSchema) {      statement.executeUpdate("DROP SCHEMA " + database + " CASCADE");    } else {      statement.executeUpdate("DROP DATABASE " + database);    }    statement.close();    ((JpaEntityManagerFactory)getFactory()).getServerSession().getReadConnectionPool().releaseConnection(accessor);  } catch (  Exception failed) {    this.bot.log(this,failed);    throw new RuntimeException(failed);  }}  }
class C{  public boolean isDefault(){  Object oo=get_Value(COLUMNNAME_IsDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static IntegerPolynomial fromBinary(byte[] data,int N,int q){  return new IntegerPolynomial(ArrayEncoder.decodeModQ(data,N,q));}  }
class C{  private void sendStageProgressPatch(TaskState state){  ServiceUtils.logInfo(this,"Sending self-patch to stage %s",state.stage,state.subStage);  TaskUtils.sendSelfPatch(this,buildPatch(state.stage,state.subStage,null));}  }
class C{  public boolean matches(@NonNull DelimitedVersion version){  if (mLowerBound != null && mLowerBound.compareTo(version) > 0) {    return false;  }  if (mUpperBound != null && mUpperBound.compareTo(version) < 0) {    return false;  }  return true;}  }
class C{  public int asInt(){  return asNumber().intValue();}  }
class C{  private boolean packetValid(byte[] buffer,int i){  boolean headerValid=(buffer[i] & 0xFF) == 0xFE;  boolean checkbyteValid=(buffer[i + 2] & 0xFF) == (0xFF - (buffer[i + 1] & 0xFF));  boolean sequenceValid=(buffer[i + 3] & 0xFF) < 16;  return headerValid && checkbyteValid && sequenceValid;}  }
class C{  public static int showDialog(Component parent,String title,String media){  Dialog dialog=new Dialog(parent,title,media);  dialog.setModal(true);  dialog.pack();  dialog.setVisible(true);  return dialog.getReturnCode();}  }
class C{  private void updateStatistics(){  long currentTime=System.currentTimeMillis();  double diffTime=currentTime - lastTime;  double diffSeed=currentSeed - lastSeed;  double diffNFE=currentNFE - lastNFE;  double percentChange=(diffSeed + (diffNFE / maxNFE)) / totalSeeds;  if ((diffTime > 0.0) && (percentChange > 0.0001)) {    statistics.addValue(diffTime / percentChange);    lastTime=currentTime;    lastSeed=currentSeed;    lastNFE=currentNFE;  }}  }
class C{  public void addPropertyChangeListener(String propertyName,PropertyChangeListener in_pcl){  pcSupport.addPropertyChangeListener(propertyName,in_pcl);}  }
class C{  public SandboxRay(String name,double direction){  super(direction);  this.name=name;}  }
class C{  public void error(SourceLocator srcLctr,String msg) throws TransformerException {  error(srcLctr,null,null,msg,null);}  }
class C{  public Escaper toEscaper(){  return new CharArrayDecorator(toArray());}  }
class C{  @Override public int rule(int goalNT){  return delegate.rule(goalNT);}  }
class C{  @Override @Uninterruptible public void initializeStack(Address ip,Address sp){  Address fp;  sp=sp.minus(STACKFRAME_HEADER_SIZE);  fp=sp.minus(BYTES_IN_ADDRESS).minus(STACKFRAME_BODY_OFFSET);  Magic.setCallerFramePointer(fp,STACKFRAME_SENTINEL_FP);  Magic.setCompiledMethodID(fp,INVISIBLE_METHOD_ID);  sp=sp.minus(BYTES_IN_ADDRESS);  getGPRs().set(ESP.value(),sp.toWord());  this.fp=fp;  this.ip=ip;}  }
class C{  public SyncRequestMessage(SyncRequestMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  if (other.isSetStore()) {    this.store=new Store(other.store);  }  if (other.isSetKeys()) {    List<ByteBuffer> __this__keys=new ArrayList<ByteBuffer>();    for (    ByteBuffer other_element : other.keys) {      ByteBuffer temp_binary_element=org.apache.thrift.TBaseHelper.copyBinary(other_element);      ;      __this__keys.add(temp_binary_element);    }    this.keys=__this__keys;  }}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  public boolean adjustValue(long key,long amount){  int index=index(key);  if (index < 0) {    return false;  } else {    _values[index]+=amount;    return true;  }}  }
class C{  public HashCodeBuilder append(final float value){  iTotal=iTotal * iConstant + Float.floatToIntBits(value);  return this;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:59.781 -0500",hash_original_method="DDCDD16B215513F049C48DCCB34052D5",hash_generated_method="E2BF4A07043A385FD8DCCBBCD0FC0AF4") public static void clear(Editable e){  e.clear();  e.removeSpan(ACTIVE);  e.removeSpan(CAPPED);  e.removeSpan(INHIBIT_REPLACEMENT);  e.removeSpan(LAST_TYPED);  QwertyKeyListener.Replaced[] repl=e.getSpans(0,e.length(),QwertyKeyListener.Replaced.class);  final int count=repl.length;  for (int i=0; i < count; i++) {    e.removeSpan(repl[i]);  }}  }
class C{  @Override protected String defaultClassifierString(){  return "weka.classifiers.trees.REPTree";}  }
class C{  public FileGenerator(String _filename){  try {    filename=_filename;    File file=new File(filename);    FileInputStream in=new FileInputStream(file);    reader=new BufferedReader(new InputStreamReader(in));  } catch (  IOException e) {    System.err.println("Exception: " + e);  }}  }
class C{  @Override public void onStart(){  super.onStart();  setupUi();}  }
class C{  public Vertex details(Vertex source,Vertex vertex,Vertex vertex2){  return define(source,vertex,vertex2,null,null,null);}  }
