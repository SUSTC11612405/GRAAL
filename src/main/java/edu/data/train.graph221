class C{  public MultiButton(String line1){  this();  setTextLine1(line1);}  }
class C{  public GenericListModel(final List<? extends E> consumerList){  this.list=consumerList;}  }
class C{  public static void CF1(double[] x,double[] f,double[] c,int nx){  int count1=0;  int count2=0;  double sum1=0.0;  double sum2=0.0;  double yj;  double N=10.0;  double a=1.0;  for (int j=2; j <= nx; j++) {    yj=x[j - 1] - Math.pow(x[0],0.5 * (1.0 + 3.0 * (j - 2.0) / (nx - 2.0)));    if (j % 2 == 1) {      sum1+=yj * yj;      count1++;    } else {      sum2+=yj * yj;      count2++;    }  }  f[0]=x[0] + 2.0 * sum1 / (double)count1;  f[1]=1.0 - x[0] + 2.0 * sum2 / (double)count2;  c[0]=f[1] + f[0] - a * Math.abs(Math.sin(N * PI * (f[0] - f[1] + 1.0))) - 1.0;}  }
class C{  public Quaternionf rotationAxis(float angle,Vector3fc axis){  return rotationAxis(angle,axis.x(),axis.y(),axis.z());}  }
class C{  private void testFindMailboxByPath() throws Exception {  LOG.info("findMailboxByPath");  HBaseMailbox mailbox;  for (  MailboxPath path : pathsList) {    LOG.info("Searching for " + path);    mailbox=(HBaseMailbox)mapper.findMailboxByPath(path);    assertEquals(path,new MailboxPath(mailbox.getNamespace(),mailbox.getUser(),mailbox.getName()));  }}  }
class C{  public static short[] initializeSubStateArray(List<Tree<String>> trainTrees,List<Tree<String>> validationTrees,Numberer tagNumberer,short nSubStates){  short[] nSub=new short[2];  nSub[0]=1;  nSub[1]=nSubStates;  StateSetTreeList trainStateSetTrees=new StateSetTreeList(trainTrees,nSub,true,tagNumberer);  @SuppressWarnings("unused") StateSetTreeList validationStateSetTrees=new StateSetTreeList(validationTrees,nSub,true,tagNumberer);  StateSetTreeList.initializeTagNumberer(trainTrees,tagNumberer);  StateSetTreeList.initializeTagNumberer(validationTrees,tagNumberer);  short numStates=(short)tagNumberer.total();  short[] nSubStateArray=new short[numStates];  short two=nSubStates;  Arrays.fill(nSubStateArray,two);  nSubStateArray[0]=1;  return nSubStateArray;}  }
class C{  public void assertFalse(boolean value){  TestUtils.assertFalse(value);}  }
class C{  public T caseTStructuralType(TStructuralType object){  return null;}  }
class C{  public void removeAll(){  mParts.clear();}  }
class C{  public void paint(Graphics g){  if (isVisible()) {    try {      RTextArea textArea=getTextArea();      g.setColor(textArea.getCaretColor());      TextUI mapper=textArea.getUI();      Rectangle r=mapper.modelToView(textArea,getDot());      validateWidth(r);      r.height-=2;switch (style) {case BLOCK_STYLE:        g.setXORMode(Color.WHITE);      g.fillRect(r.x,r.y,r.width,r.height);    break;case BLOCK_BORDER_STYLE:  g.drawRect(r.x,r.y,r.width - 1,r.height);break;case UNDERLINE_STYLE:g.setXORMode(Color.WHITE);int y=r.y + r.height;g.drawLine(r.x,y,r.x + r.width - 1,y);break;default :case VERTICAL_LINE_STYLE:g.drawLine(r.x,r.y,r.x,r.y + r.height);break;case THICK_VERTICAL_LINE_STYLE:g.drawLine(r.x,r.y,r.x,r.y + r.height);r.x++;g.drawLine(r.x,r.y,r.x,r.y + r.height);break;}} catch (BadLocationException ble) {ble.printStackTrace();}}}  }
class C{  public PolicyFile(URL url){  this.url=url;  init(url);}  }
class C{  public void testGetName(){  String expectedReturn="ERROR-CODE";  String actualReturn=errorCodeAttribute.getName();  assertEquals("return value",expectedReturn,actualReturn);}  }
class C{  public void runInCurrentThread(final BuckCommandHandler handler,@Nullable final Runnable postStartAction){  handler.runInCurrentThread(postStartAction);}  }
class C{  public static Geo[] closeGa(Geo[] ga){  int l=ga.length;  if (ga[0].equals(ga[l - 1])) {    return ga;  } else {    Geo[] x=new Geo[l + 1];    System.arraycopy(ga,0,x,0,l);    x[l]=ga[0];    return x;  }}  }
class C{  public void unMapVolumeFromSCSIInitiator(String volumeId,String initiatorId) throws Exception {  String uri=ScaleIOConstants.getUnmapVolumeToScsiInitiatorURI(volumeId);  ScaleIOUnmapVolumeToScsiInitiator unmapParm=new ScaleIOUnmapVolumeToScsiInitiator();  unmapParm.setScsiInitiatorId(initiatorId);  post(URI.create(uri),getJsonForEntity(unmapParm));}  }
class C{  protected Size2D arrangeRF(BlockContainer container,Graphics2D g2,RectangleConstraint constraint){  Size2D s=arrangeNF(container,g2,constraint);  if (constraint.getWidthRange().contains(s.width)) {    return s;  } else {    RectangleConstraint c=constraint.toFixedWidth(constraint.getWidthRange().constrain(s.getWidth()));    return arrangeFF(container,g2,c);  }}  }
class C{  public Builder withReuseAddress(){  return withReuseAddress(true);}  }
class C{  protected void createPopup(Point point){  popup=new JPopupMenu();  JMenuItem undo=new JMenuItem("Undo");  undo.setMnemonic('Z');  JMenuItem mi=popup.add(undo);  mi.addActionListener(this);  JMenuItem redo=new JMenuItem("Redo");  mi=popup.add(redo);  mi.addActionListener(this);  popup.addSeparator();  JMenuItem copy=new JMenuItem("Copy");  copy.setMnemonic('C');  mi=popup.add(copy);  mi.addActionListener(this);  JMenuItem cut=new JMenuItem("Cut");  cut.setMnemonic('X');  mi=popup.add(cut);  mi.addActionListener(this);  JMenuItem paste=new JMenuItem("Paste");  paste.setMnemonic('V');  mi=popup.add(paste);  mi.addActionListener(this);  popup.addSeparator();  JMenuItem open=new JMenuItem("Open");  open.setMnemonic('O');  mi=popup.add(open);  mi.addActionListener(this);  JMenuItem save=new JMenuItem("Save");  save.setMnemonic('S');  mi=popup.add(save);  mi.addActionListener(this);  popup.addSeparator();  JMenuItem print=new JMenuItem("Print");  print.setMnemonic('P');  mi=popup.add(print);  mi.addActionListener(this);  popup.addSeparator();  JMenuItem find=new JMenuItem("Find");  find.setMnemonic('F');  mi=popup.add(find);  mi.addActionListener(this);  JMenuItem replace=new JMenuItem("Replace");  replace.setMnemonic('R');  mi=popup.add(replace);  mi.addActionListener(this);  point=getSuitableLocation(point,popup.getPreferredSize(),this);  popup.show(this,point.x,point.y);}  }
class C{  public JSONWriter key(String string) throws JSONException {  if (string == null) {    throw new JSONException("Null key.");  }  if (this.mode == 'k') {    try {      this.stack[this.top - 1].putOnce(string,Boolean.TRUE);      if (this.comma) {        this.writer.write(',');      }      this.writer.write(JSONObject.quote(string));      this.writer.write(':');      this.comma=false;      this.mode='o';      return this;    } catch (    IOException e) {      throw new JSONException(e);    }  }  throw new JSONException("Misplaced key.");}  }
class C{  public static void validate(Source source) throws Exception {  validate(schema,source,ErrorCodes.X_MALFORMED_SOAP);}  }
class C{  private void notifyRtcpListenersOfTimeout(){  for (  RtcpEventListener listener : mListeners) {    if (sLogger.isActivated()) {      sLogger.debug("RTCP connection timeout");    }    listener.connectionTimeout();  }}  }
class C{  @Override public void initialize(final RPObject object){  super.initialize(object);  if (object.has("amount")) {    amount=object.getInt("amount");  } else {    amount=0;  }}  }
class C{  public static String formatIntegerIfPossible(double value){  return formatIntegerIfPossible(value,numberOfFractionDigits);}  }
class C{  public void addPages(){  page=new NewSpecWizardPage();  addPage(page);}  }
class C{  public DepartmentObject(DepartmentObject parent){  this.id=parent.getId();  this.name=parent.getName();  this.companyId=parent.getCompanyId();  this.customOrder=parent.getCustomOrder();}  }
class C{  public void test() throws Exception {  assertEquals(BM25Similarity.class,getSimilarity("text").getClass());}  }
class C{  public boolean isServiceActivated(){  return readBoolean(RcsSettingsData.SERVICE_ACTIVATED);}  }
class C{  public void addVetoableChangeListener(String propertyName,VetoableChangeListener in_vcl){  beanContextChildSupport.addVetoableChangeListener(propertyName,in_vcl);}  }
class C{  public void suspendEncoding() throws java.io.IOException {  flushBase64();  this.suspendEncoding=true;}  }
class C{  public static Validator<CharSequence> minLength(@NonNull final Context context,final int minLength){  return new MinLengthValidator(context,R.string.default_error_message,minLength);}  }
class C{  private static boolean implementsSerializationProvider(Class<?> clazz){  return SerializationProvider.class.isAssignableFrom(clazz);}  }
class C{  static void generatePushWrappedArgs(ClassFileWriter cfw,Class<?>[] argTypes,int arrayLength){  cfw.addPush(arrayLength);  cfw.add(ByteCode.ANEWARRAY,"java/lang/Object");  int paramOffset=1;  for (int i=0; i != argTypes.length; ++i) {    cfw.add(ByteCode.DUP);    cfw.addPush(i);    paramOffset+=generateWrapArg(cfw,paramOffset,argTypes[i]);    cfw.add(ByteCode.AASTORE);  }}  }
class C{  protected void fixupRepositoryArtifact(Artifact artifact) throws Exception {  resolver.resolve(artifact,remoteRepositories,localRepository);  File artifactFile=artifact.getFile();  MavenProject mavenProject=mavenProjectBuilder.buildFromRepository(artifact,remoteRepositories,localRepository);  for (  Object createdArtifact : mavenProject.createArtifacts(artifactFactory,null,null)) {    Artifact art=(Artifact)createdArtifact;    if (art.getType().equals("war")) {      Artifact art2=artifactFactory.createArtifactWithClassifier(art.getGroupId(),art.getArtifactId(),art.getVersion(),"pom",null);      fixupRepositoryArtifact(art2);    }  }  MavenXpp3Reader pomReader=new MavenXpp3Reader();  Model pomFile=pomReader.read(new FileReader(artifactFile));  fixModelAndSaveInRepository(artifact,pomFile);}  }
class C{  public static Bitmap drawableToBitmap(Drawable drawable,int width,int height){  if (drawable instanceof BitmapDrawable) {    return ((BitmapDrawable)drawable).getBitmap();  }  Bitmap bitmap=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);  Canvas canvas=new Canvas(bitmap);  drawable.setBounds(0,0,canvas.getWidth(),canvas.getHeight());  drawable.draw(canvas);  return bitmap;}  }
class C{  public GetURLFunctionWrapper(RhinoInterpreter ri,Function fct,WindowWrapper ww){  interpreter=ri;  function=fct;  windowWrapper=ww;}  }
class C{  public int remove(int key){  int prev=0;  int index=index(key);  if (index >= 0) {    prev=_values[index];    removeAt(index);  }  return prev;}  }
class C{  protected Dispatcher createContentDispatcher(){  return new ContentDispatcher();}  }
class C{  public void startNalUnit(int type){  Assertions.checkState(!isFilling);  isFilling=type == targetType;  if (isFilling) {    nalLength=4;    isCompleted=false;  }}  }
class C{  public void init(OutputStream os){  this.os=os;  _refs=null;  if (_serializerFactory == null)   _serializerFactory=new SerializerFactory();}  }
class C{  private KdNode findBestMatchNode(Coordinate p){  BestMatchVisitor visitor=new BestMatchVisitor(p,tolerance);  query(visitor.queryEnvelope(),visitor);  return visitor.getNode();}  }
class C{  private MsgManager(){  queue=new java.util.Vector();  sysMsgVec=new java.util.Vector();  alertLevel=Sage.getInt("msg/curr_alert_level",0);  loadSystemMessages();}  }
class C{  public MaxRowExpression(){}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return zzCurrentPos >= s.offset + s.count;}  }
class C{  public static Renderer createRenderer(IOObject ioobject,String rendererName){  String reportableName=getName(ioobject.getClass());  Map<String,Class<? extends Renderer>> rendererClassMap=rendererNameToRendererClasses.get(reportableName);  if (rendererClassMap == null) {    throw new IllegalArgumentException("Illegal reportable name: " + rendererName);  }  Class<? extends Renderer> rendererClass=rendererClassMap.get(rendererName);  if (rendererClass == null) {    throw new IllegalArgumentException("Illegal renderer name: " + rendererName);  }  try {    return rendererClass.newInstance();  } catch (  Exception e) {    throw new RuntimeException("Failed to create renderer: " + e,e);  }}  }
class C{  public static boolean isValidType(short type){  return type == TYPE_UNSIGNED_BYTE || type == TYPE_ASCII || type == TYPE_UNSIGNED_SHORT || type == TYPE_UNSIGNED_LONG || type == TYPE_UNSIGNED_RATIONAL || type == TYPE_UNDEFINED || type == TYPE_LONG || type == TYPE_RATIONAL;}  }
class C{  @Override public void onSeekComplete(MediaPlayer mp){  LogUtils.d(TAG,"onSeekComplete from MediaPlayer:",mp.getCurrentPosition());  mCurrentPosition=mp.getCurrentPosition();  if (mState == PlaybackStateCompat.STATE_BUFFERING) {    mMediaPlayer.start();    mState=PlaybackStateCompat.STATE_PLAYING;  }  if (mCallback != null) {    mCallback.onPlaybackStatusChanged(mState);  }}  }
class C{  public DividerBuilder with(Drawable drawable,EnumSet<Direction> directions){  for (  Direction direction : directions) {    sublayers.put(direction,new Sublayer(drawable));  }  return this;}  }
class C{  private void createLineColorDialog(){  Color oldColor=line.getFormat().getColor();  if (oldColor == null) {    oldColor=Color.BLACK;  }  Color newLineColor=JColorChooser.showDialog(null,I18N.getGUILabel("edit_parallel_line.line_color_title.label"),oldColor);  if (newLineColor != null && !(newLineColor.equals(oldColor))) {    lineColor=newLineColor;  }}  }
class C{  @Override protected void createLabels(){  Iterable<? extends Position> positions=this.getPositions();  if (positions == null)   return;  Iterator<? extends Position> iterator=positions.iterator();  this.haveHostileLabels=this.mustCreateIdentityLabels();  String text=this.getText();  String additionalText=this.getAdditionalText();  this.haveTopLabel=!WWUtil.isEmpty(text);  this.haveBottomLabel=!WWUtil.isEmpty(additionalText);  Offset topLabelOffset=this.getTopLabelOffset();  Offset bottomLabelOffset=this.getBottomLabelOffset();  String echelon=this.symbolCode.getEchelon();  boolean haveEchelon=!SymbolCode.isFieldEmpty(echelon);  this.echelonSymbols=haveEchelon ? new ArrayList<EchelonSymbol>() : Collections.<EchelonSymbol>emptyList();  String sidc=this.symbolCode.toString();  TacticalGraphicLabel label;  iterator.next();  while (iterator.hasNext()) {    if (this.haveTopLabel) {      label=this.addLabel(text);      label.setOffset(topLabelOffset);    }    if (this.haveBottomLabel) {      label=this.addLabel(additionalText);      label.setOffset(bottomLabelOffset);    }    if (this.haveHostileLabels) {      this.addLabel(SymbologyConstants.HOSTILE_ENEMY);      this.addLabel(SymbologyConstants.HOSTILE_ENEMY);    }    if (haveEchelon) {      this.echelonSymbols.add(this.createEchelonSymbol(sidc));    }    iterator.next();  }}  }
class C{  protected static void loadPackageDirectory(File directory,boolean verbose,List<File> goePropsFiles,boolean avoidTriggeringFullClassDiscovery) throws Exception {  File[] contents=directory.listFiles();  for (  File content : contents) {    if (content.isFile() && content.getPath().endsWith(".jar")) {      if (verbose) {        System.out.println("[Weka] loading " + content.getPath());      }      ClassloaderUtil.addFile(content.getPath());    } else     if (content.isDirectory() && content.getName().equalsIgnoreCase("lib")) {      loadPackageDirectory(content,verbose,goePropsFiles,avoidTriggeringFullClassDiscovery);    }  }  for (  File content : contents) {    if (content.isFile() && content.getPath().endsWith("Beans.props")) {      BeansProperties.addToPluginBeanProps(content);      if (!avoidTriggeringFullClassDiscovery) {        KnowledgeFlowApp.disposeSingleton();      }    } else     if (content.isFile() && content.getPath().endsWith("Explorer.props") && !avoidTriggeringFullClassDiscovery) {      processExplorerProps(content);    } else     if (content.isFile() && content.getPath().endsWith("GUIEditors.props") && !avoidTriggeringFullClassDiscovery) {      processGUIEditorsProps(content,verbose);    } else     if (content.isFile() && content.getPath().endsWith("GenericPropertiesCreator.props") && !avoidTriggeringFullClassDiscovery) {      if (goePropsFiles != null) {        goePropsFiles.add(content);      } else {        processGenericPropertiesCreatorProps(content);      }    } else     if (content.isFile() && content.getPath().endsWith("PluginManager.props")) {      processPluginManagerProps(content);    }  }}  }
class C{  public static String urlDecode(String encoded){  int length=encoded.length();  byte[] buff=new byte[length];  int j=0;  for (int i=0; i < length; i++) {    char ch=encoded.charAt(i);    if (ch == '+') {      buff[j++]=' ';    } else     if (ch == '%') {      buff[j++]=(byte)Integer.parseInt(encoded.substring(i + 1,i + 3),16);      i+=2;    } else {      if (SysProperties.CHECK) {        if (ch > 127 || ch < ' ') {          throw new IllegalArgumentException("Unexpected char " + (int)ch + " decoding "+ encoded);        }      }      buff[j++]=(byte)ch;    }  }  String s=new String(buff,0,j,Constants.UTF8);  return s;}  }
class C{  public boolean matchStrings(){  Matcher matcher=pattern.matcher(str);  if (matcher.matches()) {    if (uriTemplateVariables != null) {      for (int i=1; i <= matcher.groupCount(); i++) {        String name=this.variableNames.get(i - 1);        String value=matcher.group(i);        uriTemplateVariables.put(name,value);      }    }    return true;  } else {    return false;  }}  }
class C{  public Import(String importUri,String absoluteUri) throws URISyntaxException {  this(importUri,absoluteUri,null,null);}  }
class C{  public void addFoldersToExclude(Set<File> blackListSet){  deselected.addAll(blackListSet);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static String dateToText(Context context,Date date){  String textDate;  date=truncateHours(date);  Calendar c=Calendar.getInstance();  c.set(Calendar.HOUR_OF_DAY,0);  c.set(Calendar.MINUTE,0);  c.set(Calendar.SECOND,0);  c.set(Calendar.MILLISECOND,0);  Date today=c.getTime();  c.add(Calendar.DATE,-1);  Date yesterday=c.getTime();  if (date.equals(today)) {    textDate=context.getString(R.string.today_s);  } else   if (date.equals(yesterday)) {    textDate=context.getString(R.string.yesterday_s);  } else {    textDate=formatDate(date,new SimpleDateFormat("dd.MM"));  }  return textDate;}  }
class C{  protected void writeCentralFileHeader(JBZipEntry ze) throws IOException {  writeOut(CFH_SIG);  writeOutShort((ze.getPlatform() << 8) | 20);  writeOutShort(10);  writeOutShort(0);  writeOutShort(ze.getMethod());  writeOutLong(DosTime.javaToDosTime(ze.getTime()));  writeOutLong(ze.getCrc());  writeOutLong(ze.getCompressedSize());  writeOutLong(ze.getSize());  byte[] name=getBytes(ze.getName());  writeOutShort(name.length);  byte[] extra=ze.getExtra();  writeOutShort(extra.length);  String comm=ze.getComment();  if (comm == null) {    comm="";  }  byte[] commentB=getBytes(comm);  writeOutShort(commentB.length);  writeOutShort(0);  writeOutShort(ze.getInternalAttributes());  writeOutLong(ze.getExternalAttributes());  writeOutLong(ze.getHeaderOffset());  writeOut(name);  writeOut(extra);  writeOut(commentB);}  }
class C{  private Object read(char[] list,int length) throws Exception {  Object array=Array.newInstance(entry,length);  for (int i=0; i < length; i++) {    Array.set(array,i,list[i]);  }  return array;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.GEN_EXPR___NAME_1:    setName_1((String)newValue);  return;case UmplePackage.GEN_EXPR___ANONYMOUS_GEN_EXPR_11:getAnonymous_genExpr_1_1().clear();getAnonymous_genExpr_1_1().addAll((Collection<? extends Anonymous_genExpr_1_>)newValue);return;case UmplePackage.GEN_EXPR___EQUALITY_OP_1:getEqualityOp_1().clear();getEqualityOp_1().addAll((Collection<? extends EqualityOp_>)newValue);return;case UmplePackage.GEN_EXPR___NAME_2:setName_2((String)newValue);return;case UmplePackage.GEN_EXPR___ANONYMOUS_GEN_EXPR_21:getAnonymous_genExpr_2_1().clear();getAnonymous_genExpr_2_1().addAll((Collection<? extends Anonymous_genExpr_2_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void remove(){  throw new UnsupportedOperationException();}  }
class C{  public boolean continueExecuting(){  toDistance=theMaid.getDistanceSqToEntity(theOwner);  return !theMaid.getNavigator().noPath() && (toDistance > theMaid.getActiveModeClass().getDistanceSqToStartFollow()) && !theMaid.isSitting();}  }
class C{  public void start(){  this.last=System.nanoTime();  Animator animator=new Animator(this.canvas);  animator.setRunAsFastAsPossible(true);  animator.start();}  }
class C{  @Override public boolean isEmpty(){  return size == 0;}  }
class C{  public static void releasePropertyBindInfos(Array<PropertyBindInfo> infos){  if (infos != null && infos.size > 0) {    for (int i=0, size=infos.size; i < size; i++) {      ExpressionParser.recycleIfNeed(infos.get(i).realExpr);    }    infos.clear();  }}  }
class C{  protected void fetchMetadata() throws IOException {  remaining=period;  int size=in.read();  if (size < 1)   return;  size<<=4;  if (mbuffer.length < size) {    mbuffer=null;    mbuffer=new byte[size];    Log.d(LOG,"Enlarged metadata buffer to " + size + " bytes");  }  size=readFully(mbuffer,0,size);  for (int i=0; i < size; i++) {    if (mbuffer[i] == 0) {      size=i;      break;    }  }  String s;  try {    s=new String(mbuffer,0,size,characterEncoding);  } catch (  Exception e) {    Log.e(LOG,"Cannot convert bytes to String");    return;  }  Log.d(LOG,"Metadata string: " + s);  parseMetadata(s);}  }
class C{  public void movePointer(final long pointer){  try {    if (pointer > pdf_datafile.length()) {      LogWriter.writeLog("Attempting to access ref outside file");    } else {      pdf_datafile.seek(pointer);    }  } catch (  final Exception e) {    LogWriter.writeLog("Exception " + e + " moving pointer to  "+ pointer+ " in file.");  }}  }
class C{  public ImageRequest(String url,Response.Listener<Bitmap> listener,int maxWidth,int maxHeight,Config decodeConfig,Response.ErrorListener errorListener){  super(Method.GET,url,errorListener);  setRetryPolicy(new DefaultRetryPolicy(IMAGE_TIMEOUT_MS,IMAGE_MAX_RETRIES,IMAGE_BACKOFF_MULT));  mListener=listener;  mDecodeConfig=decodeConfig;  mMaxWidth=maxWidth;  mMaxHeight=maxHeight;}  }
class C{  @DSSource({DSSourceKind.SMS_MMS}) @DSComment("SMS message data structure") @DSSpec(DSCat.SPEC_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:52.951 -0500",hash_original_method="C15BF98DC594420F78E24C2D1AF66E37",hash_generated_method="E54848E4BC4358D067F4D82AB65C1FE4") public ArrayList<String> divideMessage(String text){  return SmsMessage.fragmentText(text);}  }
class C{  public MeasureItemHeightListener(final int height,final MeasureItemHeightListenerType mode){  this.height=height;  this.mode=mode;}  }
class C{  public void initializePackageContents(){  if (isInitialized)   return;  isInitialized=true;  setName(eNAME);  setNsPrefix(eNS_PREFIX);  setNsURI(eNS_URI);  ModelPackage theModelPackage=(ModelPackage)EPackage.Registry.INSTANCE.getEPackage(ModelPackage.eNS_URI);  DatatypePackage theDatatypePackage=(DatatypePackage)EPackage.Registry.INSTANCE.getEPackage(DatatypePackage.eNS_URI);  functionblockModelEClass.getESuperTypes().add(theModelPackage.getModel());  returnObjectTypeEClass.getESuperTypes().add(this.getReturnType());  returnPrimitiveTypeEClass.getESuperTypes().add(this.getReturnType());  primitiveParamEClass.getESuperTypes().add(this.getParam());  refParamEClass.getESuperTypes().add(this.getParam());  initEClass(functionblockModelEClass,FunctionblockModel.class,"FunctionblockModel",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getFunctionblockModel_Functionblock(),this.getFunctionBlock(),null,"functionblock",null,0,1,FunctionblockModel.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getFunctionblockModel_Entities(),theDatatypePackage.getEntity(),null,"entities",null,0,-1,FunctionblockModel.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getFunctionblockModel_Enums(),theDatatypePackage.getEnum(),null,"enums",null,0,-1,FunctionblockModel.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getFunctionblockModel_SuperType(),this.getFunctionblockModel(),null,"superType",null,0,1,FunctionblockModel.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(functionBlockEClass,FunctionBlock.class,"FunctionBlock",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getFunctionBlock_Configuration(),this.getConfiguration(),null,"configuration",null,0,1,FunctionBlock.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getFunctionBlock_Status(),this.getStatus(),null,"status",null,0,1,FunctionBlock.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getFunctionBlock_Fault(),this.getFault(),null,"fault",null,0,1,FunctionBlock.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getFunctionBlock_Events(),this.getEvent(),null,"events",null,0,-1,FunctionBlock.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getFunctionBlock_Operations(),this.getOperation(),null,"operations",null,0,-1,FunctionBlock.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(configurationEClass,Configuration.class,"Configuration",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getConfiguration_Properties(),theDatatypePackage.getProperty(),null,"properties",null,0,-1,Configuration.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(statusEClass,Status.class,"Status",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getStatus_Properties(),theDatatypePackage.getProperty(),null,"properties",null,0,-1,Status.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(faultEClass,Fault.class,"Fault",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getFault_Properties(),theDatatypePackage.getProperty(),null,"properties",null,0,-1,Fault.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(operationEClass,Operation.class,"Operation",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getOperation_Name(),ecorePackage.getEString(),"name",null,0,1,Operation.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getOperation_Params(),this.getParam(),null,"params",null,0,-1,Operation.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getOperation_ReturnType(),this.getReturnType(),null,"returnType",null,0,1,Operation.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getOperation_Description(),ecorePackage.getEString(),"description",null,0,1,Operation.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getOperation_Breakable(),ecorePackage.getEBoolean(),"breakable",null,0,1,Operation.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(returnTypeEClass,ReturnType.class,"ReturnType",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getReturnType_Multiplicity(),ecorePackage.getEBoolean(),"multiplicity",null,0,1,ReturnType.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(returnObjectTypeEClass,ReturnObjectType.class,"ReturnObjectType",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getReturnObjectType_ReturnType(),theDatatypePackage.getType(),null,"returnType",null,0,1,ReturnObjectType.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(returnPrimitiveTypeEClass,ReturnPrimitiveType.class,"ReturnPrimitiveType",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getReturnPrimitiveType_ReturnType(),theDatatypePackage.getPrimitiveType(),"returnType",null,0,1,ReturnPrimitiveType.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getReturnPrimitiveType_ConstraintRule(),theDatatypePackage.getConstraintRule(),null,"constraintRule",null,0,1,ReturnPrimitiveType.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(primitiveParamEClass,PrimitiveParam.class,"PrimitiveParam",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getPrimitiveParam_Type(),theDatatypePackage.getPrimitiveType(),"type",null,0,1,PrimitiveParam.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getPrimitiveParam_ConstraintRule(),theDatatypePackage.getConstraintRule(),null,"constraintRule",null,0,1,PrimitiveParam.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(refParamEClass,RefParam.class,"RefParam",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getRefParam_Type(),theDatatypePackage.getType(),null,"type",null,0,1,RefParam.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(paramEClass,Param.class,"Param",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getParam_Multiplicity(),ecorePackage.getEBoolean(),"multiplicity",null,0,1,Param.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getParam_Name(),ecorePackage.getEString(),"name",null,0,1,Param.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getParam_Description(),ecorePackage.getEString(),"description",null,0,1,Param.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(eventEClass,Event.class,"Event",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getEvent_Name(),ecorePackage.getEString(),"name",null,0,1,Event.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getEvent_Properties(),theDatatypePackage.getProperty(),null,"properties",null,0,-1,Event.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  createResource(eNS_URI);}  }
class C{  protected boolean checkMinScoreCriterion(final PIRSFHmmer2RawMatch pirsfRawMatch,final PirsfDatRecord pirsfDatRecord){  final double locationScore=pirsfRawMatch.getLocationScore();  final double minScore=pirsfDatRecord.getMinScore();  if (locationScore >= minScore) {    return true;  } else {    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("Raw match filtered out: " + pirsfRawMatch);    }    return false;  }}  }
class C{  public JsonHttpResponseHandler(){  super(DEFAULT_CHARSET);}  }
class C{  public String processPumpDataMessage(byte[] readData,int calibrationSelected){  int commandByte=firstByteAfterDeviceId(readData);  String sResult="I do nothing";  if (commandByte < 0)   return "Error, I can not identify the command byte";  if (lastCommandSend == null)   return "lastCommand == null";switch (readData[commandByte]) {case MedtronicConstants.MEDTRONIC_GET_LAST_PAGE:{      if (lastCommandSend != null) {synchronized (waitingCommandLock) {          waitingCommand=false;          lastCommandSend=null;        }        byte[] modelArray=Arrays.copyOfRange(readData,commandByte + 2,(commandByte + 6));        historicPageIndex=HexDump.byteArrayToInt(modelArray);        hGetter.historicPageIndex=historicPageIndex;        hGetter.lastHistoricPage=modelArray;        String sModel=new String(HexDump.toHexString(modelArray));        sResult="Command " + commandByte + " Read Data "+ HexDump.toHexString(readData)+ " Pump last historic page......: "+ sModel;      }      log.debug(sResult);      return sResult;    }case MedtronicConstants.MEDTRONIC_READ_PAGE_COMMAND:{    log.debug("READ_PAGE");    if (lastCommandSend != null) {      try {        log.debug("lcommand send != null");        if (!hGetter.firstReadPage) {          hGetter.isWaitingNextLine=false;          int currentLineAux=HexDump.unsignedByte(readData[commandByte + 1]);          log.debug("!first page ");          if (!(currentLineAux == HexDump.unsignedByte((byte)0x90) || (currentLineAux == hGetter.currentLine + 1) || hGetter.currentLine < 1 && currentLineAux == 1)) {            log.debug("Error");            hGetter.commandList=Arrays.copyOf(hGetter.commandList,hGetter.commandList.length + 1);            hGetter.commandList[hGetter.commandList.length - 1]=MedtronicConstants.MEDTRONIC_READ_PAGE_COMMAND;            hGetter.wThread.isRequest=true;            hGetter.firstReadPage=false;            hGetter.withoutConfirmation=0;            hGetter.isWaitingNextLine=true;            hGetter.currentLine=-1;synchronized (waitingCommandLock) {              waitingCommand=false;              lastCommandSend=null;            }            hGetter.historicPage.clear();            return "Error currentLine is " + hGetter.currentLine + " next line is "+ currentLineAux+ " is not the order expected";          }          hGetter.currentLine=currentLineAux;          byte[] modelArray=Arrays.copyOfRange(readData,commandByte + 2,(commandByte + 2 + (4 * 16)));          hGetter.historicPage.add(modelArray);          if (hGetter.currentLine != HexDump.unsignedByte((byte)0x90)) {            log.debug("is correct line");            hGetter.commandList=Arrays.copyOf(hGetter.commandList,hGetter.commandList.length + 1);            hGetter.commandList[hGetter.commandList.length - 1]=MedtronicConstants.MEDTRONIC_ACK;            hGetter.withoutConfirmation=0;            hGetter.wThread.isRequest=true;            hGetter.wThread.postCommandBytes=null;            sResult="Pump last historic page (" + hGetter.currentLine + ")......: Ok.";            hGetter.isWaitingNextLine=true;          } else {            log.debug("All lines read.");            processHistoricPage();          }        }      }  finally {synchronized (waitingCommandLock) {          waitingCommand=false;          lastCommandSend=null;        }      }    }    log.debug(sResult);    return sResult;  }case MedtronicConstants.MEDTRONIC_GET_PUMP_MODEL:log.debug("Pump Model Received");sendMessageToUI("Pump Model Received...",false);if (lastMedtronicPumpRecord == null) {lastMedtronicPumpRecord=new MedtronicPumpRecord();calculateDate(lastMedtronicPumpRecord,new Date(),0);lastMedtronicPumpRecord.deviceId=prefs.getString("medtronic_cgm_id","");}if (lastCommandSend != null) {synchronized (waitingCommandLock) {waitingCommand=false;lastCommandSend=null;}byte[] modelArray=Arrays.copyOfRange(readData,commandByte + 2,(commandByte + 2 + (readData[commandByte + 1])));String sModel=new String(modelArray);sResult="Pump model......: " + sModel;lastMedtronicPumpRecord.model=sModel;}return sResult;case MedtronicConstants.MEDTRONIC_GET_ALARM_MODE:log.debug("Pump Alarm Mode Received");if (lastMedtronicPumpRecord == null) {lastMedtronicPumpRecord=new MedtronicPumpRecord();calculateDate(lastMedtronicPumpRecord,new Date(),0);lastMedtronicPumpRecord.deviceId=prefs.getString("medtronic_cgm_id","");}if (lastCommandSend != null) {synchronized (waitingCommandLock) {waitingCommand=false;lastCommandSend=null;}int status=readData[commandByte + 2];if (status == 0) sResult="Ok"; else sResult="Unknown (by now)";lastMedtronicPumpRecord.alarm=sResult;}return sResult;case MedtronicConstants.MEDTRONIC_GET_PUMP_STATE:log.debug("Pump Status Received");sendMessageToUI("Pump Status Received...",false);if (lastMedtronicPumpRecord == null) {lastMedtronicPumpRecord=new MedtronicPumpRecord();calculateDate(lastMedtronicPumpRecord,new Date(),0);lastMedtronicPumpRecord.deviceId=prefs.getString("medtronic_cgm_id","");}if (lastCommandSend != null) {synchronized (waitingCommandLock) {waitingCommand=false;lastCommandSend=null;}sResult="Pump state...........: " + HexDump.toHexString(readData[commandByte + 2]);lastMedtronicPumpRecord.status=HexDump.toHexString(readData[commandByte + 2]);}return sResult;case MedtronicConstants.MEDTRONIC_GET_TEMPORARY_BASAL:log.debug("Pump Temporary Basal Received");if (lastMedtronicPumpRecord == null) {lastMedtronicPumpRecord=new MedtronicPumpRecord();calculateDate(lastMedtronicPumpRecord,new Date(),0);lastMedtronicPumpRecord.deviceId=prefs.getString("medtronic_cgm_id","");}if (lastCommandSend != null) {synchronized (waitingCommandLock) {waitingCommand=false;lastCommandSend=null;}byte[] tempBasalArray=Arrays.copyOfRange(readData,commandByte + 2,(commandByte + 2 + (readData[commandByte + 2])));String sTempBasalArray=HexDump.toHexString(tempBasalArray);sResult="Temporary basal......: " + sTempBasalArray;lastMedtronicPumpRecord.status=sTempBasalArray;}return sResult;case MedtronicConstants.MEDTRONIC_GET_BATTERY_STATUS:log.debug("Pump Battery Status Received");sendMessageToUI("Pump Battery Status Received...",false);if (lastMedtronicPumpRecord == null) {lastMedtronicPumpRecord=new MedtronicPumpRecord();calculateDate(lastMedtronicPumpRecord,new Date(),0);lastMedtronicPumpRecord.deviceId=prefs.getString("medtronic_cgm_id","");}if (lastCommandSend != null) {synchronized (waitingCommandLock) {waitingCommand=false;lastCommandSend=null;}int status=readData[commandByte + 3];float voltage=(((float)HexDump.unsignedByte(readData[commandByte + 3])) * 256f + (float)HexDump.unsignedByte(readData[commandByte + 4])) / 100;if (status == 0) {sResult="Battery status.......: Normal\n";lastMedtronicPumpRecord.batteryStatus="Normal";} else {sResult="Battery status.......: Low\n";lastMedtronicPumpRecord.batteryStatus="Low";}sResult+="Battery voltage......: " + voltage + " Volts";lastMedtronicPumpRecord.batteryVoltage="" + voltage;}return sResult;case MedtronicConstants.MEDTRONIC_GET_REMAINING_INSULIN:log.debug("Pump Remaining Insulin Received");sendMessageToUI("Pump Remaining Insulin Received...",false);if (lastMedtronicPumpRecord == null) {lastMedtronicPumpRecord=new MedtronicPumpRecord();calculateDate(lastMedtronicPumpRecord,new Date(),0);lastMedtronicPumpRecord.deviceId=prefs.getString("medtronic_cgm_id","");}if (lastCommandSend != null) {synchronized (waitingCommandLock) {waitingCommand=false;lastCommandSend=null;}float insulinLeft=(HexDump.unsignedByte(readData[commandByte + 4]) * 256f + (float)HexDump.unsignedByte(readData[commandByte + 5])) / 40f;sResult="Remaining insulin....: " + insulinLeft + " Units";lastMedtronicPumpRecord.insulinLeft=insulinLeft;}return sResult;case MedtronicConstants.MEDTRONIC_GET_REMOTE_CONTROL_IDS:log.debug("Pump Remote Control Ids Received");sendMessageToUI("Pump Remote Control Ids Received...",false);if (lastCommandSend != null) {synchronized (waitingCommandLock) {waitingCommand=false;lastCommandSend=null;}byte[] remoteControlID1=Arrays.copyOfRange(readData,commandByte + 2,commandByte + 8);String sRemoteControlID1=new String(remoteControlID1);if (HexDump.isHexaNumber(sRemoteControlID1)) {if (!knownDevices.contains(sRemoteControlID1)) knownDevices.add(sRemoteControlID1);}byte[] remoteControlID2=Arrays.copyOfRange(readData,commandByte + 8,commandByte + 14);String sRemoteControlID2=new String(remoteControlID2);if (HexDump.isHexaNumber(sRemoteControlID2)) {if (!knownDevices.contains(sRemoteControlID2)) knownDevices.add(sRemoteControlID2);}byte[] remoteControlID3=Arrays.copyOfRange(readData,commandByte + 14,commandByte + 20);String sRemoteControlID3=new String(remoteControlID3);if (HexDump.isHexaNumber(sRemoteControlID3)) {if (!knownDevices.contains(sRemoteControlID3)) knownDevices.add(sRemoteControlID3);}storeKnownDevices();sResult="Remote Control IDs...: " + sRemoteControlID1 + "  "+ sRemoteControlID2+ "  "+ sRemoteControlID3;}return sResult;case MedtronicConstants.MEDTRONIC_GET_PARADIGM_LINK_IDS:log.debug("Pump Paradigm Link Ids Received");sendMessageToUI("Pump Paradigm Link Ids Received...",false);if (lastCommandSend != null) {synchronized (waitingCommandLock) {waitingCommand=false;lastCommandSend=null;}byte[] glucID1=Arrays.copyOfRange(readData,commandByte + 2,commandByte + 8);String sGlucID1=new String(glucID1);if (HexDump.isHexaNumber(sGlucID1)) {if (!knownDevices.contains(sGlucID1)) knownDevices.add(sGlucID1);}byte[] glucID2=Arrays.copyOfRange(readData,commandByte + 8,commandByte + 14);String sGlucID2=new String(glucID2);if (HexDump.isHexaNumber(sGlucID2)) {if (!knownDevices.contains(sGlucID2)) knownDevices.add(sGlucID2);}byte[] glucID3=Arrays.copyOfRange(readData,commandByte + 14,commandByte + 20);String sGlucID3=new String(glucID3);if (HexDump.isHexaNumber(sGlucID3)) {if (!knownDevices.contains(sGlucID3)) knownDevices.add(sGlucID3);}storeKnownDevices();sResult="Paradigm Link IDs....: " + sGlucID1 + "  "+ sGlucID2+ "  "+ sGlucID3;}return sResult;case MedtronicConstants.MEDTRONIC_GET_SENSORID:log.debug("Pump Sensor Id Received");sendMessageToUI("Pump Sensor Id Received...",false);if (lastCommandSend != null) {synchronized (waitingCommandLock) {waitingCommand=false;lastCommandSend=null;}if (readData.length >= HexDump.unsignedByte(readData[1]) && HexDump.unsignedByte(readData[1]) > 0) {byte[] sensorId=Arrays.copyOfRange(readData,commandByte + 58,commandByte + 61);String sSensorId=HexDump.toHexString(sensorId);sResult="Sensor ID...: " + sSensorId;if (!knownDevices.contains(sSensorId)) knownDevices.add(sSensorId);storeKnownDevices();} else sResult=readData.length + " Not enough length";}return sResult;case MedtronicConstants.MEDTRONIC_GET_CALIBRATION_FACTOR:log.debug("Pump Calibration Factor Received");sendMessageToUI("Pump Cal. Factor Received...",false);if (lastCommandSend != null) {synchronized (waitingCommandLock) {waitingCommand=false;lastCommandSend=null;}float factor=((float)HexDump.unsignedByte(readData[commandByte + 2]) * 256f + (float)HexDump.unsignedByte(readData[commandByte + 3]));if (calibrationSelected == MedtronicConstants.CALIBRATION_SENSOR) {if (factor > 0) {calibrationStatus=MedtronicConstants.CALIBRATED;calibrationFactor=factor / 1126;} else {if (calibrationStatus != MedtronicConstants.WITHOUT_ANY_CALIBRATION) {calibrationStatus=MedtronicConstants.LAST_CALIBRATION_FAILED_USING_PREVIOUS;}}SharedPreferences.Editor editor=settings.edit();editor.putFloat("calibrationFactor",(float)calibrationFactor);editor.putInt("calibrationStatus",calibrationStatus);editor.commit();if (previousRecord == null) {MedtronicSensorRecord auxRecord=new MedtronicSensorRecord();auxRecord.calibrationStatus=calibrationStatus;auxRecord.calibrationFactor=calibrationFactor;log.debug("5");writeLocalCSV(auxRecord,context);} else {previousRecord.calibrationStatus=calibrationStatus;previousRecord.calibrationFactor=calibrationFactor;log.debug("6");writeLocalCSV(previousRecord,context);}if (lastMedtronicPumpRecord == null) {lastMedtronicPumpRecord=new MedtronicPumpRecord();calculateDate(lastMedtronicPumpRecord,new Date(),0);lastMedtronicPumpRecord.deviceId=prefs.getString("medtronic_cgm_id","");}}sResult="Calibration Factor...: " + factor;}return sResult;case MedtronicConstants.MEDTRONIC_ACK:log.debug("Pump Ack Received");if (lastCommandSend != null) {synchronized (sendingCommandLock) {sendingCommand=false;}synchronized (waitingCommandLock) {waitingCommand=false;lastCommandSend=null;}}return "ACK RECEIVED! ";default :log.error("Undecoded Command");return "I do not understand this command " + HexDump.toHexString(readData[commandByte]);}}  }
class C{  public ActiveInfoStorageCalculatorKernelDirect(){  super();  miKernel=new MutualInfoCalculatorMultiVariateKernel();}  }
class C{  private void updateFormValue(){  form.updateValue(textcomp.getText(),false,false);}  }
class C{  public void insert(T object,int index){  if (mOriginalValues != null) {synchronized (mLock) {      mOriginalValues.add(index,object);      if (mNotifyOnChange)       notifyDataSetChanged();    }  } else {    mObjects.add(index,object);    if (mNotifyOnChange)     notifyDataSetChanged();  }}  }
class C{  public static CompiledScript compileScriptFile(String filePath) throws ScriptException, IOException {  Assert.notNull("filePath",filePath);  CompiledScript script=parsedScripts.get(filePath);  if (script == null) {    ScriptEngineManager manager=new ScriptEngineManager();    ScriptEngine engine=manager.getEngineByExtension(getFileExtension(filePath));    if (engine == null) {      throw new IllegalArgumentException("The script type is not supported for location: " + filePath);    }    try {      Compilable compilableEngine=(Compilable)engine;      URL scriptUrl=FlexibleLocation.resolveLocation(filePath);      BufferedReader reader=new BufferedReader(new InputStreamReader(scriptUrl.openStream()));      script=compilableEngine.compile(reader);      if (Debug.verboseOn()) {        Debug.logVerbose("Compiled script " + filePath + " using engine "+ engine.getClass().getName(),module);      }    } catch (    ClassCastException e) {      if (Debug.verboseOn()) {        Debug.logVerbose("Script engine " + engine.getClass().getName() + " does not implement Compilable",module);      }    }    if (script != null) {      parsedScripts.putIfAbsent(filePath,script);    }  }  return script;}  }
class C{  protected boolean hasReceivedMessages(int messageCount){synchronized (messages) {    return messages.size() >= messageCount;  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:12.163 -0500",hash_original_method="DEA49E30923C6B4E17F9FB446E1784D4",hash_generated_method="ADCBF7F54D14F547D47B3A564F6E4BF7") private LoadListener startLoadingResource(int loaderHandle,String url,String method,HashMap headers,byte[] postData,long postDataIdentifier,int cacheMode,boolean mainResource,boolean userGesture,boolean synchronous,String username,String password){  if (mSettings.getCacheMode() != WebSettings.LOAD_DEFAULT) {    cacheMode=mSettings.getCacheMode();  }  if (method.equals("POST")) {    if (cacheMode == WebSettings.LOAD_NORMAL) {      cacheMode=WebSettings.LOAD_NO_CACHE;    }    String[] ret=getUsernamePassword();    if (ret != null) {      String domUsername=ret[0];      String domPassword=ret[1];      maybeSavePassword(postData,domUsername,domPassword);    }  }  boolean isMainFramePage=mIsMainFrame;  if (DebugFlags.BROWSER_FRAME) {    Log.v(LOGTAG,"startLoadingResource: url=" + url + ", method="+ method+ ", postData="+ postData+ ", isMainFramePage="+ isMainFramePage+ ", mainResource="+ mainResource+ ", userGesture="+ userGesture);  }  LoadListener loadListener=LoadListener.getLoadListener(mContext,this,url,loaderHandle,synchronous,isMainFramePage,mainResource,userGesture,postDataIdentifier,username,password);  if (LoadListener.getNativeLoaderCount() > MAX_OUTSTANDING_REQUESTS) {    loadListener.error(android.net.http.EventHandler.ERROR,mContext.getString(com.android.internal.R.string.httpErrorTooManyRequests));    return loadListener;  }  FrameLoader loader=new FrameLoader(loadListener,mSettings,method,mCallbackProxy.shouldInterceptRequest(url));  loader.setHeaders(headers);  loader.setPostData(postData);  loader.setCacheMode(headers.containsKey("If-Modified-Since") || headers.containsKey("If-None-Match") ? WebSettings.LOAD_NO_CACHE : cacheMode);  return !synchronous ? loadListener : null;}  }
class C{  public RowBuilder int32(String name){  ColumnInt32 column=new ColumnInt32(_columns.size(),name,_offset);  _offset+=column.length();  _columns.add(column);  return this;}  }
class C{  public void removeTrace(final TraceList trace) throws CouldntDeleteException {  Preconditions.checkNotNull(trace,"IE02232: Trace argument can not be null");  if (!trace.inSameDatabase(m_provider)) {    throw new IllegalStateException("IE02233: Trace and project are not in the same database");  }  for (  final IProjectListener listener : m_listeners) {    try {      listener.deletingTrace(m_project,trace);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }  m_provider.deleteTrace(trace);  m_traces.remove(trace);  for (  final IProjectListener listener : m_listeners) {    try {      listener.removedTrace(m_project,trace);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }  m_project.getConfiguration().updateModificationDate();}  }
class C{  public void transferVisited(VisitRegistry discordRegistry){  for (  int v : discordRegistry.getVisited()) {    this.markVisited(v);  }}  }
class C{  public void logSevere(String message){  logger.severe(logPrefix + message);}  }
class C{  private static double[] computePerDimensionVariances(Relation<? extends NumberVector> relation,double[] center,DBIDs neighborhood){  final int dim=center.length;  double[] variances=new double[dim];  for (DBIDIter iter=neighborhood.iter(); iter.valid(); iter.advance()) {    NumberVector databaseObject=relation.get(iter);    for (int d=0; d < dim; d++) {      final double deviation=databaseObject.doubleValue(d) - center[d];      variances[d]+=deviation * deviation;    }  }  VMath.times(variances,1. / neighborhood.size());  return variances;}  }
class C{  private double minorAxis(){  return Math.min(height(),width());}  }
class C{  public Container add(Object constraint,String label){  return add(constraint,new Label(label));}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.N4_CLASSIFIER_DEFINITION__OWNED_MEMBERS_RAW:    return getOwnedMembersRaw();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public Header nextHeader() throws NoSuchElementException {  final int current=this.currentIndex;  if (current < 0) {    throw new NoSuchElementException("Iteration already finished.");  }  this.lastIndex=current;  this.currentIndex=findNext(current);  return (Header)this.allHeaders.get(current);}  }
class C{  @UnpreemptibleNoWarn("GC is disabled as Objects are turned into Words." + "avoid preemption but still allow calls to preemptible unboxing routines") public static void packageParameters(RVMMethod method,Object thisArg,Object[] otherArgs,WordArray GPRs,double[] FPRs,byte[] FPRmeta,WordArray Parameters){  int GPR=0;  int FPR=SSE2_FULL ? 0 : FPRs.length;  int parameter=0;  int gp=NUM_PARAMETER_GPRS;  int fp=NUM_PARAMETER_FPRS;  if (!method.isStatic()) {    Word val=Magic.objectAsAddress(thisArg).toWord();    if (gp > 0) {      gp--;      GPRs.set(GPR++,val);    }    Parameters.set(parameter++,val);  }  TypeReference[] types=method.getParameterTypes();  for (int i=0; i < types.length; i++) {    TypeReference t=types[i];    if (!t.isPrimitiveType()) {      Word val=Magic.objectAsAddress(otherArgs[i]).toWord();      if (gp > 0) {        gp--;        GPRs.set(GPR++,val);      }      Parameters.set(parameter++,val);    } else     if (t.isLongType()) {      long l=(Long)otherArgs[i];      if (VM.BuildFor32Addr) {        if (gp > 0) {          gp--;          GPRs.set(GPR++,Word.fromIntZeroExtend((int)(l >>> 32)));          if (gp > 0) {            gp--;            GPRs.set(GPR++,Word.fromIntZeroExtend((int)(l)));          }        }        Parameters.set(parameter++,Word.fromIntZeroExtend((int)(l >>> 32)));        Parameters.set(parameter++,Word.fromIntZeroExtend((int)l));      } else {        Word val=Word.fromLong(l);        if (gp > 0) {          gp--;          GPRs.set(GPR++,val);        }        Parameters.set(parameter++,val);        Parameters.set(parameter++,val);      }    } else     if (t.isFloatType()) {      if (fp > 0) {        fp--;        if (SSE2_FULL) {          FPRs[FPR]=(Float)otherArgs[i];          FPRmeta[FPR]=0x0;          FPR++;        } else {          FPRs[--FPR]=(Float)otherArgs[i];        }      }      float f=(Float)otherArgs[i];      Parameters.set(parameter++,Word.fromIntZeroExtend(Float.floatToIntBits(f)));    } else     if (t.isDoubleType()) {      if (VM.BuildFor32Addr) {        if (fp > 0) {          fp--;          if (SSE2_FULL) {            FPRs[FPR]=(Double)otherArgs[i];            FPRmeta[FPR]=0x1;            FPR++;          } else {            FPRs[--FPR]=(Double)otherArgs[i];          }        }        double d=(Double)otherArgs[i];        long l=Double.doubleToLongBits(d);        Parameters.set(parameter++,Word.fromIntZeroExtend((int)(l >>> 32)));        Parameters.set(parameter++,Word.fromIntZeroExtend((int)l));      } else {        if (fp > 0) {          fp--;          if (SSE2_FULL) {            FPRs[FPR]=(Double)otherArgs[i];            FPRmeta[FPR]=0x1;            FPR++;          } else {            FPRs[--FPR]=(Double)otherArgs[i];          }        }        double d=(Double)otherArgs[i];        long l=Double.doubleToLongBits(d);        Word val=Word.fromLong(l);        Parameters.set(parameter++,val);        Parameters.set(parameter++,val);      }    } else     if (t.isBooleanType()) {      boolean b=(Boolean)otherArgs[i];      Word val=Word.fromIntZeroExtend(b ? 1 : 0);      if (gp > 0) {        gp--;        GPRs.set(GPR++,val);      }      Parameters.set(parameter++,val);    } else     if (t.isCharType()) {      char c=(Character)otherArgs[i];      Word val=Word.fromIntZeroExtend(c);      if (gp > 0) {        gp--;        GPRs.set(GPR++,val);      }      Parameters.set(parameter++,val);    } else {      if (VM.VerifyAssertions)       VM._assert(t.isByteType() || t.isShortType() || t.isIntType());      int x=((Number)otherArgs[i]).intValue();      Word val=Word.fromIntZeroExtend(x);      if (gp > 0) {        gp--;        GPRs.set(GPR++,val);      }      Parameters.set(parameter++,val);    }  }}  }
class C{  @Override protected void propertyChange(PropertyChangeEvent evt){  if (SeaGlassLookAndFeel.shouldUpdateStyle(evt)) {    updateStyle((JTextComponent)evt.getSource());  }  super.propertyChange(evt);}  }
class C{  public Criteria deriveTransactionWide(){  Criteria ret=new Criteria();  ret.setStartTime(startTime);  ret.setEndTime(endTime);  ret.setBusinessTransaction(businessTransaction);  ret.setPrincipal(principal);  return ret;}  }
class C{  double[] performRegression(ExampleSet exampleSet,boolean[] selectedAttributes,double[] means,double labelMean,double ridge) throws UndefinedParameterError, ProcessStoppedException {  int currentlySelectedAttributes=0;  for (int i=0; i < selectedAttributes.length; i++) {    if (selectedAttributes[i]) {      currentlySelectedAttributes++;    }  }  Matrix independent=null;  Matrix dependent=null;  double[] weights=null;  if (currentlySelectedAttributes > 0) {    independent=new Matrix(exampleSet.size(),currentlySelectedAttributes);    dependent=new Matrix(exampleSet.size(),1);    int exampleIndex=0;    Iterator<Example> i=exampleSet.iterator();    weights=new double[exampleSet.size()];    Attribute weightAttribute=exampleSet.getAttributes().getWeight();    while (i.hasNext()) {      Example example=i.next();      int attributeIndex=0;      dependent.set(exampleIndex,0,example.getLabel());      int counter=0;      for (      Attribute attribute : exampleSet.getAttributes()) {        checkForStop();        if (selectedAttributes[counter]) {          double value=example.getValue(attribute) - means[counter];          independent.set(exampleIndex,attributeIndex,value);          attributeIndex++;        }        counter++;      }      if (weightAttribute != null) {        weights[exampleIndex]=example.getValue(weightAttribute);      } else {        weights[exampleIndex]=1.0d;      }      exampleIndex++;    }  }  double[] coefficients=new double[currentlySelectedAttributes + 1];  if (currentlySelectedAttributes > 0) {    double[] coefficientsWithoutIntercept=com.rapidminer.tools.math.LinearRegression.performRegression(independent,dependent,weights,ridge);    System.arraycopy(coefficientsWithoutIntercept,0,coefficients,0,currentlySelectedAttributes);  }  coefficients[currentlySelectedAttributes]=labelMean;  int coefficientIndex=0;  for (int i=0; i < selectedAttributes.length; i++) {    if (selectedAttributes[i]) {      coefficients[coefficients.length - 1]-=coefficients[coefficientIndex] * means[i];      coefficientIndex++;    }  }  return coefficients;}  }
class C{  public static FormData buildXform(Form form,XformCustomizer customizer) throws Exception {  if (customizer == null) {    customizer=new XformCustomizer();  }  return new BuendiaXformBuilderEx(customizer).buildXformImpl(form);}  }
class C{  public final void log(String string){  try {synchronized (this) {      println(string);      flush();    }  } catch (  Exception e) {  }}  }
class C{  public static <V extends NumberVector>double varianceOfCluster(Cluster<? extends MeanModel> cluster,NumberVectorDistanceFunction<? super V> distanceFunction,Relation<V> relation){  MeanModel model=cluster.getModel();  if (model instanceof KMeansModel) {    return ((KMeansModel)model).getVarianceContribution();  }  DBIDs ids=cluster.getIDs();  DoubleVector mean=DoubleVector.wrap(model.getMean());  boolean squared=(distanceFunction instanceof SquaredEuclideanDistanceFunction);  double variance=0.;  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {    double dist=distanceFunction.distance(relation.get(iter),mean);    variance+=squared ? dist : dist * dist;  }  return variance;}  }
class C{  public static boolean commitChanges(final Project project,final Collection<Change> changes,final LocalChangeList initialSelection,final List<CommitExecutor> executors,final boolean showVcsCommit,final String comment,@Nullable CommitResultHandler customResultHandler){  return commitChanges(project,new ArrayList<Change>(changes),initialSelection,executors,showVcsCommit,comment,customResultHandler,true);}  }
class C{  public void free(long pos,int length){  int start=getBlock(pos);  int blocks=getBlockCount(length);  set.clear(start,start + blocks);}  }
class C{  protected static double[] madsigma(GeoTimeSerie gts,boolean useMedian){  double[] madsigma=null;  if (!useMedian) {    madsigma=GTSHelper.musigma(gts,true);  } else {    ;    madsigma=new double[2];    madsigma[0]=median(gts);    madsigma[1]=medianAbsoluteDeviation(gts,madsigma[0]);    if (0.0D != madsigma[1]) {      madsigma[1]/=0.6745D;    } else {      madsigma[1]=GTSHelper.musigma(gts,true)[1];    }  }  return madsigma;}  }
class C{  private void flushBuffer(){  int newlineAdjust=overflowLastChar == NEW_LINE_CHAR ? 0 : -1;  int totalMessageSize=overflow ? (MESSAGE_BUFFER_SIZE + OVERFLOW_SIZE + newlineAdjust) : bufferIndex;  if (threadIdFlag) {    VM.strings.writeThreadId(buffer,totalMessageSize);  } else {    VM.strings.write(buffer,totalMessageSize);  }  threadIdFlag=false;  overflow=false;  overflowLastChar='\0';  bufferIndex=0;}  }
class C{  private String makeEscaped(String name){  int length=name.length();  if (length == 0) {    return name;  }  StringBuilder buf=new StringBuilder(length * 2);  for (int index=0; index < length; index++) {    char ch=name.charAt(index);switch (ch) {case ' ':      if (index == 0 || index == (length - 1)) {        buf.append('\\');      }    buf.append(' ');  break;case '"':case '\\':hasQE=true;buf.append('\\');buf.append(ch);break;case ',':case '+':case '<':case '>':case ';':case '#':case '=':buf.append('\\');buf.append(ch);break;default :buf.append(ch);break;}}return buf.toString();}  }
class C{  public NonParameterizedType toBoxedPrimitive(){  return new NonParameterizedType(PrimitiveTypes.toBoxedType(this.getRuntimeClass()));}  }
class C{  private static final int fastfloor(double x){  return x >= 0 ? (int)x : (int)x - 1;}  }
class C{  public void countSortFromTo(int from,int to){  if (size == 0)   return;  checkRangeFromTo(from,to,size);  final int min=-(int)Byte.MIN_VALUE;  final int range=min + Byte.MAX_VALUE + 1;  byte[] theElements=elements;  int[] counts=new int[range];  for (int i=from; i <= to; i++)   counts[theElements[i] + min]++;  int fromIndex=from;  byte val=Byte.MIN_VALUE;  for (int i=0; i < range; i++, val++) {    int c=counts[i];    if (c > 0) {      if (c == 1)       theElements[fromIndex++]=val; else {        int toIndex=fromIndex + c - 1;        fillFromToWith(fromIndex,toIndex,val);        fromIndex=toIndex + 1;      }    }  }}  }
class C{  public InvalidCharException(String s,char val){  super(s);  c=val;}  }
class C{  private Object executeEQ(PageContext pc,SQL sql,Query qr,ZExpression expression,int row) throws PageException {  return (executeCompare(pc,sql,qr,expression,row) == 0) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  private void update(){  if (currentInfo != null) {    if (currentInfo.requestError) {      if (lastUpdated != -1) {        loadInfo.setText(String.format("%s (%s ago, updated %s ago)",currentInfo.requestErrorDescription,DateTime.agoSingleCompact(currentInfo.time),DateTime.agoSingleCompact(lastUpdated)));      } else {        loadInfo.setText(String.format("%s (%s ago)",currentInfo.requestErrorDescription,DateTime.agoSingleCompact(currentInfo.time)));      }    } else {      loadInfo.setText(String.format("Last updated %s ago",DateTime.agoSingleVerbose(lastUpdated)));    }  }  if (loading) {    loadInfo.setText("Loading..");  }  updateStats();}  }
class C{  public boolean is_set_source(){  return this.source != null;}  }
class C{  public MoveStep(MovePath path,MoveStepType type,Targetable target){  this(path,type);  targetId=target.getTargetId();  targetType=target.getTargetType();  if ((type == MoveStepType.UNLOAD) || (type == MoveStepType.LAUNCH) || (type == MoveStepType.DROP)|| (type == MoveStepType.UNDOCK)) {    hasEverUnloaded=true;  } else {    hasEverUnloaded=false;  }}  }
class C{  private static String resolveYacyDomains(final String host){  return (sb.peers == null) ? null : sb.peers.resolve(host);}  }
class C{  private void recycleByLayoutState(RecyclerView.Recycler recycler,LayoutState layoutState){  if (!layoutState.mRecycle) {    return;  }  if (layoutState.mLayoutDirection == LayoutState.LAYOUT_START) {    recycleViewsFromEnd(recycler,layoutState.mScrollingOffset);  } else {    recycleViewsFromStart(recycler,layoutState.mScrollingOffset);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaFile mf=getMediaFile(stack);  return Boolean.valueOf(mf != null && mf.isCompleteRecording());}  }
class C{  public static String toString(String methodSignature,String methodName,String[] parameterNames,boolean fullyQualifyTypeNames,boolean includeReturnType,boolean isVarArgs){  char[][] params;  if (parameterNames == null) {    params=null;  } else {    int paramLength=parameterNames.length;    params=new char[paramLength][];    for (int i=0; i < paramLength; i++) {      params[i]=parameterNames[i].toCharArray();    }  }  return new String(toCharArray(methodSignature.toCharArray(),methodName == null ? null : methodName.toCharArray(),params,fullyQualifyTypeNames,includeReturnType,isVarArgs));}  }
class C{  @RequestMapping(value="/{id}/{k}",method=RequestMethod.DELETE) @ResponseBody public RestWrapper delete(@PathVariable("id") Integer processTemplateId,@PathVariable("k") String key,Principal principal){  RestWrapper restWrapper=null;  try {    PropertiesTemplate propertiesTemplate=new PropertiesTemplate();    propertiesTemplate.setProcessTemplateId(processTemplateId);    propertiesTemplate.setKey(key);    propertiesTemplateDAO.deletePropertyTemplate(processTemplateId,key);    restWrapper=new RestWrapper(propertiesTemplate,RestWrapper.OK);    LOGGER.info("Record with ID:" + processTemplateId + ","+ key+ " deleted from PropertiesTemplate by User:"+ principal.getName());  } catch (  Exception e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public static final int BuildIntegerBE(byte bytevec[],int offset){  return (((int)(bytevec[0 + offset]) << 24) | (signedToInt(bytevec[1 + offset]) << 16) | (signedToInt(bytevec[2 + offset]) << 8)| (signedToInt(bytevec[3 + offset])));}  }
class C{  void execute() throws Exception {  if (stat != null) {    obj=stat.execute();    clazz=stat.getReturnClass();    stat=null;  }}  }
class C{  public ListIterator<OMGraphic> listIteratorCopy(int size){  return new OMGraphicList(graphics).listIterator(size);}  }
class C{  public void updateQuantity(ItemBean original,ItemBean itemToAdd,boolean add){  BigDecimal originalQuantity=original.getQty();  BigDecimal quantityToAdd=itemToAdd.getQty();  BigDecimal finalQuantity=null;  if (!add)   finalQuantity=originalQuantity.subtract(quantityToAdd); else   finalQuantity=originalQuantity.add(quantityToAdd);  original.setQty(finalQuantity);}  }
class C{  public String seedTipText(){  return "The random number seed to be used.";}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:11.449 -0500",hash_original_method="44DDC0F9828E23A0D6B9681282E4B5EC",hash_generated_method="AE6DFFDB6AA401EAA4F30704D5CBB4A7") public SslCertificate(X509Certificate certificate){  this(certificate.getSubjectDN().getName(),certificate.getIssuerDN().getName(),certificate.getNotBefore(),certificate.getNotAfter(),certificate);}  }
class C{  @SuppressWarnings("unchecked") static <T>void processFullBaseBuffer(final ItemsSketch<T> sketch){  final int bbCount=sketch.getBaseBufferCount();  final long n=sketch.getN();  assert bbCount == 2 * sketch.getK();  maybeGrowLevels(n,sketch);  final Object[] baseBuffer=sketch.getCombinedBuffer();  Arrays.sort(baseBuffer,0,bbCount);  inPlacePropagateCarry(0,null,0,(T[])baseBuffer,0,true,sketch);  sketch.baseBufferCount_=0;  Arrays.fill(baseBuffer,0,2 * sketch.getK(),null);  assert n / (2 * sketch.getK()) == sketch.getBitPattern();}  }
class C{  private void rollbackChanges(){  s_logger.log(Level.FINE,"rollbackChanges",getDirection());  try {    m_connection.rollback();  } catch (  SQLException e) {    s_logger.log(Level.SEVERE,this.getClass().getSimpleName(),Thread.currentThread().getStackTrace()[2].getMethodName(),"rollbackChangesError",new Object[]{getDirection(),e.getMessage()});  }  s_logger.log(Level.FINE,"changesRolledBack");  s_logger.flush();}  }
class C{  private void initInfo(int record_id,String value,int M_Warehouse_ID,int M_PriceList_ID){  if (!(record_id == 0) && value != null && value.length() > 0) {    log.severe("Received both a record_id and a value: " + record_id + " - "+ value);  }  if (!(record_id == 0)) {    fieldID=record_id;    fWarehouse_ID.setValue(new Integer(M_Warehouse_ID).intValue());    fPriceList_ID.setValue(findPLV(M_PriceList_ID));  } else {    fieldID=0;    String id;    if (value != null && value.length() > 0) {      if (value.startsWith("@") && value.endsWith("@")) {        fieldName.setText(value.substring(1,value.length() - 1));      } else {        fieldValue.setText(value);        fieldName.setText(value);        fieldUPC.setText(value);        fieldSKU.setText(value);      }      fWarehouse_ID.setValue(0);      fPriceList_ID.setValue(0);      checkAND.setSelected(false);    } else {      id=Env.getContext(Env.getCtx(),p_WindowNo,p_TabNo,"M_Product_ID",true);      if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0)) {        fieldID=new Integer(id).intValue();      }      id=Env.getContext(Env.getCtx(),p_WindowNo,p_TabNo,"M_PriceList_Version_ID",true);      if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0)) {        fPriceList_ID.setValue(new Integer(id).intValue());      } else {        fPriceList_ID.setValue(findPLV(M_PriceList_ID));      }      if (M_Warehouse_ID == 0) {        id=Env.getContext(Env.getCtx(),"#M_Warehouse_ID");        if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0)) {          fWarehouse_ID.setValue(new Integer(id).intValue());        } else {          id=Env.getContext(Env.getCtx(),p_WindowNo,"M_Warehouse_ID");          if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0)) {            fWarehouse_ID.setValue(new Integer(id).intValue());          }        }      } else {        fWarehouse_ID.setValue(new Integer(M_Warehouse_ID).intValue());      }      id=Env.getContext(Env.getCtx(),p_WindowNo,p_TabNo,"C_BPartner_ID",false);      boolean isSOTrx="Y".equals(Env.getContext(Env.getCtx(),p_WindowNo,p_TabNo,"IsSOTrx",false));      if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0) && !isSOTrx) {        fVendor_ID.setValue(new Integer(id).intValue());      }    }  }  if (!isValidVObject(fWarehouse_ID)) {    checkOnlyStock.setSelected(false);    checkOnlyStock.setEnabled(false);  } else   checkOnlyStock.setEnabled(true);  prepareTable(getTableLayout(),getFromClause(),getWhereClause(),getOrderClause());}  }
class C{  public static InExpression in(Expression value,Expression... set){  return new InExpression(value,false,set);}  }
class C{  public int approximateSize(){  return target.approximateSize();}  }
class C{  public static CPAAlgorithm createForwardAlgorithm(ControlFlowGraph cfg,ConfigurableProgramAnalysis... cpas){  ConfigurableProgramAnalysis cpa=new CompositeProgramAnalysis(new LocationAnalysis(),cpas);  return new CPAAlgorithm(cpa,new CFATransformerFactory(cfg),new FastSet<AbstractState>());}  }
class C{  @Override public void onMessage(Message message){  try {    TextMessage requestMessage=(TextMessage)message;    LOG.info("Received request.");    LOG.info(requestMessage.toString());    Destination replyDestination=requestMessage.getJMSReplyTo();    TextMessage replyMessage=serverSession.createTextMessage("Hello: " + requestMessage.getText());    replyMessage.setJMSCorrelationID(requestMessage.getJMSMessageID());    if (dynamicallyCreateProducer) {      replyProducer=serverSession.createProducer(replyDestination);      replyProducer.send(replyMessage);    } else {      replyProducer.send(replyDestination,replyMessage);    }    LOG.info("Sent reply.");    LOG.info(replyMessage.toString());  } catch (  JMSException e) {    onException(e);  }}  }
class C{  public void endRefactoring(){  if (fRefactoring != null && fRefactoringArguments != null)   addArguments(fRefactoring,fRefactoringArguments);  fRefactoringArguments=null;  fRefactoring=null;}  }
class C{  IonIntLite(ContainerlessContext context,boolean isNull){  super(context,isNull);}  }
class C{  private List<Activity> findBestInsertion(List<Activity> partialRoute,boolean allowAsMajor){  int startIndex=1;  int endIndex=partialRoute.size() - 1;  if (allowAsMajor) {    startIndex=0;    endIndex=partialRoute.size();  }  List<Activity> newList=partialRoute;  double best=Double.POSITIVE_INFINITY;  List<Activity> bestList=null;  for (int i=startIndex; i <= endIndex; i++) {    List<Activity> tmpList=new ArrayList<>(newList);    Activity tmpActivity=getRelocationActivity();    tmpList.add(i,tmpActivity);    double tmp=evaluateList(tmpList);    if (tmp < best) {      if (i == 0) {        tmpActivity.setType("major");        tmpActivity.setEndTime(Time.parseTime("08:00:00"));      } else       if (i == partialRoute.size()) {        tmpActivity.setType("major");      } else {        tmpActivity.setType("minor");        tmpActivity.setMaximumDuration(Time.parseTime("00:20:00"));      }      best=tmp;      bestList=tmpList;    }  }  return bestList;}  }
class C{  public void testCertPathBuilder03() throws NoSuchAlgorithmException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  for (int i=0; i < validValues.length; i++) {    CertPathBuilder cpb=CertPathBuilder.getInstance(validValues[i]);    assertEquals("Incorrect algorithm",cpb.getAlgorithm(),validValues[i]);  }}  }
class C{  private void modified(final ModifiedEnum modified){  byte b=flags;  if (modified == null) {    throw new IllegalArgumentException();  } else {switch (modified) {case NONE:      b=Bits.set(Bits.set(b,MODIFIED_BIT,false),(MODIFIED_BIT + 1),false);    break;case INSERTED:  b=Bits.set(Bits.set(b,MODIFIED_BIT,true),(MODIFIED_BIT + 1),false);break;case REMOVED:b=Bits.set(Bits.set(b,MODIFIED_BIT,false),(MODIFIED_BIT + 1),true);break;case UPDATED:b=Bits.set(Bits.set(b,MODIFIED_BIT,true),(MODIFIED_BIT + 1),true);break;default :throw new IllegalStateException();}}flags=b;}  }
class C{  public Union(TupleExpr leftArg,TupleExpr rightArg){  super(leftArg,rightArg);}  }
class C{  public void updateAllAsyncInternal0(UUID nodeId,GridNearAtomicUpdateRequest req,CI2<GridNearAtomicUpdateRequest,GridNearAtomicUpdateResponse> completionCb){  GridNearAtomicUpdateResponse res=new GridNearAtomicUpdateResponse(ctx.cacheId(),nodeId,req.futureVersion(),ctx.deploymentEnabled());  List<KeyCacheObject> keys=req.keys();  assert !req.returnValue() || (req.operation() == TRANSFORM || keys.size() == 1);  GridDhtAtomicUpdateFuture dhtFut=null;  boolean remap=false;  String taskName=ctx.kernalContext().task().resolveTaskName(req.taskNameHash());  IgniteCacheExpiryPolicy expiry=null;  try {    List<GridDhtCacheEntry> locked=lockEntries(keys,req.topologyVersion());    Collection<IgniteBiTuple<GridDhtCacheEntry,GridCacheVersion>> deleted=null;    try {      GridDhtPartitionTopology top=topology();      top.readLock();      try {        if (top.stopping()) {          res.addFailedKeys(keys,new IgniteCheckedException("Failed to perform cache operation " + "(cache is stopped): " + name()));          completionCb.apply(req,res);          return;        }        if ((req.fastMap() && !req.clientRequest()) || req.topologyLocked() || !needRemap(req.topologyVersion(),top.topologyVersion())) {          ClusterNode node=ctx.discovery().node(nodeId);          if (node == null) {            U.warn(msgLog,"Skip near update request, node originated update request left [" + "futId=" + req.futureVersion() + ", node="+ nodeId+ ']');            return;          }          boolean hasNear=ctx.discovery().cacheNearNode(node,name());          GridCacheVersion ver=req.updateVersion();          if (ver == null) {            ver=ctx.versions().next(top.topologyVersion());            if (hasNear)             res.nearVersion(ver);            if (msgLog.isDebugEnabled()) {              msgLog.debug("Assigned update version [futId=" + req.futureVersion() + ", writeVer="+ ver+ ']');            }          }          assert ver != null : "Got null version for update request: " + req;          boolean sndPrevVal=!top.rebalanceFinished(req.topologyVersion());          dhtFut=createDhtFuture(ver,req,res,completionCb,false);          expiry=expiryPolicy(req.expiry());          GridCacheReturn retVal=null;          if (keys.size() > 1 && writeThrough() && !req.skipStore() && !ctx.store().isLocal() && !ctx.dr().receiveEnabled()) {            UpdateBatchResult updRes=updateWithBatch(node,hasNear,req,res,locked,ver,dhtFut,completionCb,ctx.isDrEnabled(),taskName,expiry,sndPrevVal);            deleted=updRes.deleted();            dhtFut=updRes.dhtFuture();            if (req.operation() == TRANSFORM)             retVal=updRes.invokeResults();          } else {            UpdateSingleResult updRes=updateSingle(node,hasNear,req,res,locked,ver,dhtFut,completionCb,ctx.isDrEnabled(),taskName,expiry,sndPrevVal);            retVal=updRes.returnValue();            deleted=updRes.deleted();            dhtFut=updRes.dhtFuture();          }          if (retVal == null)           retVal=new GridCacheReturn(ctx,node.isLocal(),true,null,true);          res.returnValue(retVal);          if (req.writeSynchronizationMode() != FULL_ASYNC)           req.cleanup(!node.isLocal());          if (dhtFut != null)           ctx.mvcc().addAtomicFuture(dhtFut.version(),dhtFut);        } else         remap=true;      }  finally {        top.readUnlock();      }    } catch (    GridCacheEntryRemovedException e) {      assert false : "Entry should not become obsolete while holding lock.";      e.printStackTrace();    } finally {      if (locked != null)       unlockEntries(locked,req.topologyVersion());      if (deleted != null) {        assert !deleted.isEmpty();        assert ctx.deferredDelete() : this;        for (        IgniteBiTuple<GridDhtCacheEntry,GridCacheVersion> e : deleted)         ctx.onDeferredDelete(e.get1(),e.get2());      }    }  } catch (  GridDhtInvalidPartitionException ignore) {    assert !req.fastMap() || req.clientRequest() : req;    if (log.isDebugEnabled())     log.debug("Caught invalid partition exception for cache entry (will remap update request): " + req);    remap=true;  }catch (  Throwable e) {    U.error(log,"Unexpected exception during cache update",e);    res.addFailedKeys(keys,e);    completionCb.apply(req,res);    if (e instanceof Error)     throw e;    return;  }  if (remap) {    assert dhtFut == null;    res.remapKeys(keys);    completionCb.apply(req,res);  } else {    if (dhtFut != null)     dhtFut.map(); else     completionCb.apply(req,res);  }  sendTtlUpdateRequest(expiry);}  }
class C{  public AnnotationMember(String name,Object val){  this.name=name;  value=val == null ? NO_VALUE : val;  if (value instanceof Throwable) {    tag=ERROR;  } else   if (value.getClass().isArray()) {    tag=ARRAY;  } else {    tag=OTHER;  }}  }
class C{  public void aggregateExceptionData(ExceptionSensorData exceptionData){  if (exceptionData.getExceptionEvent() == ExceptionEvent.CREATED) {    created++;  } else   if (exceptionData.getExceptionEvent() == ExceptionEvent.PASSED) {    passed++;  } else   if (exceptionData.getExceptionEvent() == ExceptionEvent.HANDLED) {    handled++;  }  if (null != exceptionData.getInvocationParentsIdSet()) {    for (    Long parentId : exceptionData.getInvocationParentsIdSet()) {      this.addInvocationParentId(parentId);    }  }  if (0 != exceptionData.getId()) {    aggregatedIds.put(exceptionData.getId(),Boolean.TRUE);  }}  }
class C{  public InvalidPhraseException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  protected View createView(FlowView fv,int startOffset,int spanLeft,int rowIndex){  View lv=getLogicalView(fv);  View row=fv.getView(rowIndex);  boolean requireNextWord=(viewBuffer.size() == 0) ? false : true;  int childIndex=lv.getViewIndex(startOffset,Position.Bias.Forward);  View v=lv.getView(childIndex);  int endOffset=getLimitingOffset(v,startOffset,spanLeft,requireNextWord);  if (endOffset == startOffset) {    return null;  }  View frag;  if ((startOffset == v.getStartOffset()) && (endOffset == v.getEndOffset())) {    frag=v;  } else {    frag=v.createFragment(startOffset,endOffset);  }  if ((frag instanceof GlyphView) && (measurer != null)) {    boolean isTab=false;    int p0=frag.getStartOffset();    int p1=frag.getEndOffset();    if ((p1 - p0) == 1) {      Segment s=((GlyphView)frag).getText(p0,p1);      char ch=s.first();      if (ch == '\t') {        isTab=true;      }    }    TextLayout tl=(isTab) ? null : measurer.nextLayout(spanLeft,text.toIteratorIndex(endOffset),requireNextWord);    if (tl != null) {      ((GlyphView)frag).setGlyphPainter(new GlyphPainter2(tl));    }  }  return frag;}  }
class C{  public SimpleGrouperMediaFileNode(BasicMediaSource inSource,BasicMediaNode inParent,String inGroupLabel,String inGroupType,Object inGroupObject,java.util.Vector inDescendants){  super(inSource,inParent,inGroupLabel,inGroupType,inGroupObject,inDescendants);}  }
class C{  public static Tree createStanfordTree(Annotation root){  return createStanfordTree(root,new LabeledScoredTreeFactory(CoreLabel.factory()));}  }
class C{  protected boolean checkNodeAddress(int address){  return (address >= 0) && (address < 128);}  }
class C{  private List<Paragraph> classify(String htmlText,Locale locale) throws IOException {  Set<String> stopwordsSet;  if (locale != null && !lazyStopwordMap.containsKey(locale)) {    lazyStopwordMap.put(locale,Utils.loadStopWords(locale));  }  if (locale == null) {    stopwordsSet=new HashSet<>();  } else {    stopwordsSet=lazyStopwordMap.get(locale);  }  return classify(htmlText,stopwordsSet,JusTextBoilerplateRemoval.LENGTH_LOW_DEFAULT,JusTextBoilerplateRemoval.LENGTH_HIGH_DEFAULT,JusTextBoilerplateRemoval.STOPWORDS_LOW_DEFAULT,JusTextBoilerplateRemoval.STOPWORDS_HIGH_DEFAULT,JusTextBoilerplateRemoval.MAX_LINK_DENSITY_DEFAULT,JusTextBoilerplateRemoval.MAX_HEADING_DISTANCE_DEFAULT);}  }
class C{  void addNumberUnit(){  final Element numerUnit=this.root.addElement("unit");  numerUnit.addAttribute("id",UNITID_PURE);  final Element measure=numerUnit.addElement("measure");  measure.addText("xbrli:pure");}  }
class C{  Object toType(String value,String pattern,Locale locale){  Calendar calendar=toCalendar(value,pattern,locale);  return toType(calendar);}  }
class C{  public synchronized void release(){  if (lock != null) {    try {      lock.release();    } catch (    IOException e) {    }    lock=null;    close(raf);    raf=null;  }}  }
class C{  public boolean isAccessAllOrgs(){  Object oo=get_Value(COLUMNNAME_IsAccessAllOrgs);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void SetInstanceOption(){  OptionInstance=true;}  }
class C{  public static String unexpand(CharSequence self){  return unexpand(self,8);}  }
class C{  protected void runInternal(){  Scene.v().loadDynamicClasses();  setGeomPointsToAnalysis();  ptsProvider=(GeomPointsTo)Scene.v().getPointsToAnalysis();  ptsProvider.updateSootData();  callGraph=Scene.v().getCallGraph();  queries=new GeomQueries(ptsProvider,20,6);  objFull=new Obj_full_extractor();  createNewToAllocMap();  if (Config.v().dumpPta) {    dumpPTA(Project.v().getOutputDir() + File.separator + "pta.txt");  }  if (Config.v().dumpCallGraph) {    dumpCallGraph(Project.v().getOutputDir() + File.separator + "callgraph.dot");  }}  }
class C{  public static void addBorder(JComponent component,Border border){  if (component != null && border != null) {    Border old=component.getBorder();    if (old != null) {      border=BorderFactory.createCompoundBorder(border,old);    }    component.setBorder(border);  }}  }
class C{  private List<Completion> lookupSortedAlphabetically(BytesRef key,int num) throws IOException {  List<Completion> res=lookupSortedByWeight(key,num,true);  Collections.sort(res);  if (res.size() > num) {    res=res.subList(0,num);  }  return res;}  }
class C{  public int size(){  return table.size();}  }
class C{  public static boolean isBooleanType(TypeMirror type){  return isDeclaredOfName(type,"java.lang.Boolean") || type.getKind().equals(TypeKind.BOOLEAN);}  }
class C{  public Long addNewUser(String SID,String username,String userpass,String lastname,String firstname,String email,String additionalname,String street,String zip,String fax,long states_id,String town,long language_id,String baseURL) throws AxisFault {  try {    Long users_id=sessionManagement.checkSession(SID);    Long user_level=userManagement.getUserLevelByID(users_id);    if (authLevelManagement.checkWebServiceLevel(user_level)) {      Configuration conf=cfgManagement.getConfKey(3L,"default.timezone");      String jName_timeZone="";      if (conf != null) {        jName_timeZone=conf.getConf_value();      }      Long user_id=userManagement.registerUser(username,userpass,lastname,firstname,email,new Date(),street,additionalname,fax,zip,states_id,town,language_id,"",baseURL,true,jName_timeZone);      if (user_id == null || user_id < 0) {        return user_id;      }      Users user=userManagement.getUserById(user_id);      user.setStatus(1);      user.setUpdatetime(new Date());      userManagement.updateUser(user);      return user_id;    } else {      return new Long(-26);    }  } catch (  Exception err) {    log.error("setUserObject",err);    throw new AxisFault(err.getMessage());  }}  }
class C{  static void closeStartupDialogs(){  if (SplashWindow.instance().isShowing())   SplashWindow.instance().toBack();  if (TipOfTheDayMediator.isConstructed())   TipOfTheDayMediator.instance().hide();}  }
class C{  public Analyzer(){  super();  significanceLevel=0.05;  statistics=new ArrayList<UnivariateStatistic>();  data=new HashMap<String,List<NondominatedPopulation>>();}  }
class C{  public AccountMetaDataPair(final Deserializer deserializer){  super("account","meta",null,null,deserializer);}  }
class C{  public static boolean instanceOfInterface(RVMClass LHSclass,TIB rhsTIB){  int[] doesImplement=rhsTIB.getDoesImplement();  int idx=LHSclass.getDoesImplementIndex();  int mask=LHSclass.getDoesImplementBitMask();  return idx < doesImplement.length && ((doesImplement[idx] & mask) != 0);}  }
class C{  public void moveLocationDown(RouteLocation rl){  int sequenceId=rl.getSequenceId();  if (sequenceId + 1 > _sequenceNum) {    rl.setSequenceId(0);    resequenceIds();  } else {    RouteLocation replaceRl=getItemBySequenceId(sequenceId + 1);    if (replaceRl != null) {      replaceRl.setSequenceId(sequenceId);      rl.setSequenceId(sequenceId + 1);    } else {      resequenceIds();    }  }  setDirtyAndFirePropertyChange(LISTCHANGE_CHANGED_PROPERTY,null,Integer.toString(sequenceId));}  }
class C{  public TCharHash(int initialCapacity){  super(initialCapacity);  no_entry_value=Constants.DEFAULT_CHAR_NO_ENTRY_VALUE;  if (no_entry_value != (char)0) {    Arrays.fill(_set,no_entry_value);  }}  }
class C{  public static byte[] toByteArray(InputStream in) throws IOException {  ByteArrayOutputStream out=new ByteArrayOutputStream(Math.max(32,in.available()));  copy(in,out);  return out.toByteArray();}  }
class C{  public boolean isSetClose(){  return EncodingUtils.testBit(__isset_bitfield,__CLOSE_ISSET_ID);}  }
class C{  public ResetCounter(String name){  super(name);  this.resetHigher=false;}  }
class C{  @SuppressWarnings("unchecked") public synchronized E firstElement(){  if (elementCount > 0) {    return (E)elementData[0];  }  throw new NoSuchElementException();}  }
class C{  private void updateStateViewLater(Object state){  funcPlotterCtrl.update();  if (state instanceof Double) {    double temp=search.getMetrics().getDouble(SimulatedAnnealingSearch.METRIC_TEMPERATURE);    Paint fill=Color.RED;    if (temp < 1)     fill=Color.rgb((int)(255 * temp),0,(int)(255 * (1 - temp)));    funcPlotterCtrl.setMarker((Double)state,Optional.of(fill));    simPaneCtrl.setStatus(search.getMetrics().toString());  } else {    simPaneCtrl.setStatus("");  }}  }
class C{  private void addPoint(Vec x_t,final List<Double> qi,double y_t){  vecs.add(x_t);  if (kernelAccel != null)   kernelAccel.addAll(qi);  alpha.add(y_t);}  }
class C{  public void put(Object o){  int idx=-1;synchronized (this) {    if (current < max - 1) {      idx=++current;    }    if (idx >= 0) {      pool[idx]=o;    }  }}  }
class C{  public AutowireBeanFactoryObjectPostProcessor(AutowireCapableBeanFactory autowireBeanFactory){  Assert.notNull(autowireBeanFactory,"autowireBeanFactory cannot be null");  this.autowireBeanFactory=autowireBeanFactory;}  }
class C{  public OptionSet clearLocationQuery(){  getLocationQuery().clear();  return this;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node refChild;  Node newChild;  Node insertedNode;  String childName;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  refChild=childList.item(3);  newChild=doc.createElement("br");  insertedNode=employeeNode.insertBefore(newChild,refChild);  childName=insertedNode.getNodeName();  assertEqualsAutoCase("element","nodeName","br",childName);}  }
class C{  public static Bitmap drawableToBitmap(Drawable drawable){  int width=drawable.getIntrinsicWidth();  int height=drawable.getIntrinsicHeight();  Bitmap bitmap=Bitmap.createBitmap(width,height,drawable.getOpacity() != PixelFormat.OPAQUE ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565);  Canvas canvas=new Canvas(bitmap);  drawable.setBounds(0,0,width,height);  drawable.draw(canvas);  return bitmap;}  }
class C{  public Optional<Charset> charset(){  ImmutableSet<String> charsetValues=ImmutableSet.copyOf(parameters.get(CHARSET_ATTRIBUTE));switch (charsetValues.size()) {case 0:    return Optional.absent();case 1:  return Optional.of(Charset.forName(Iterables.getOnlyElement(charsetValues)));default :throw new IllegalStateException("Multiple charset values defined: " + charsetValues);}}  }
class C{  private void doMerge(WarArchiveMerger wam,Merge merge) throws MojoExecutionException {  try {    String type=merge.getType();    String file=merge.getFile();    String document=merge.getDocument();    String clazz=merge.getClassname();    MergeProcessor merger=null;    if (type != null) {      if (type.equalsIgnoreCase("web.xml")) {        merger=new MergeWebXml(getConfigDirectory()).create(wam,merge);      } else       if (type.equalsIgnoreCase("xslt")) {        merger=new MergeXslt(descriptor.getParentFile()).create(wam,merge);      }    } else {      merger=(MergeProcessor)Class.forName(clazz).newInstance();    }    if (merger != null) {      if (document != null) {        merger=new DocumentStreamAdapter(merger);        wam.addMergeProcessor(document,merger);      } else       if (file != null) {        wam.addMergeProcessor(file,merger);      }    }  } catch (  Exception e) {    throw new MojoExecutionException("Problem in file merge",e);  }}  }
class C{  public SubscriptionTopicProperties(final String topic,final String script,final int qos,final boolean show){  super(topic);  this.script=new SimpleStringProperty(script);  this.qos=new SimpleIntegerProperty(qos);  this.show=new SimpleBooleanProperty(show);}  }
class C{  public <T>T createObject(String uri,Class<T> type){  if (connection == null)   throw new IllegalStateException("No ObjectConnection");  ValueFactory vf=connection.getValueFactory();  return createObject(vf.createURI(uri),type);}  }
class C{  public static int readInt2(InputStream is){  try {    int b1=is.read();    int b2=is.read();    if (b1 == -1 || b2 == -1)     return -1;    return (b1 << 8) | b2;  } catch (  IOException e) {    throw new PngjInputException("error reading Int2",e);  }}  }
class C{  private void handleExceptionalStatus(State state,InnerState innerState,HttpResponse response) throws StopRequest, RetryDownload {  int statusCode=response.getStatusLine().getStatusCode();  if (statusCode == 503 && mInfo.mNumFailed < Constants.MAX_RETRIES) {    handleServiceUnavailable(state,response);  }  if (statusCode == 301 || statusCode == 302 || statusCode == 303 || statusCode == 307) {    handleRedirect(state,response,statusCode);  }  int expectedStatus=innerState.mContinuingDownload ? 206 : DownloaderService.STATUS_SUCCESS;  if (statusCode != expectedStatus) {    handleOtherStatus(state,innerState,statusCode);  } else {    state.mRedirectCount=0;  }}  }
class C{  public static Object invokeStatic(String clazz,String methodName,Class[] types,Object[] values) throws NoSuchMethodException {  try {    return invokeStatic(Class.forName(clazz),methodName,types,values);  } catch (  ClassNotFoundException e) {    throw new NoSuchMethodException("class " + clazz + " not found");  }}  }
class C{  public boolean contains(Location l){  if (!this.worldName.equals(l.getWorld().getName()))   return false;  return this.contains(l.getBlockX(),l.getBlockY(),l.getBlockZ());}  }
class C{  protected UnManagedFileSystem checkUnManagedFileSystemExistsInDB(DbClient dbClient,String nativeGuid) throws IOException {  UnManagedFileSystem filesystemInfo=null;  URIQueryResultList result=new URIQueryResultList();  dbClient.queryByConstraint(AlternateIdConstraint.Factory.getFileSystemInfoNativeGUIdConstraint(nativeGuid),result);  Iterator<URI> iter=result.iterator();  while (iter.hasNext()) {    URI unFileSystemtURI=iter.next();    filesystemInfo=dbClient.queryObject(UnManagedFileSystem.class,unFileSystemtURI);    return filesystemInfo;  }  return filesystemInfo;}  }
class C{  public boolean checkNodeAddress(int address){  return ((address >= 0) && (address < MAXNODE));}  }
class C{  public static <T>T withReader(URL url,String charset,@ClosureParams(value=SimpleType.class,options="java.io.Reader") Closure<T> closure) throws IOException {  return IOGroovyMethods.withReader(url.openConnection().getInputStream(),charset,closure);}  }
class C{  public void testReceive_NonBlockNoServerChannelClose() throws Exception {  this.channel1.configureBlocking(false);  receiveNoServerChannelClose();}  }
class C{  public static <T>T selectRandomlyFromList(List<T> l){  return l.get(_r.nextInt(l.size()));}  }
class C{  @Nonnull public BugInstance addSourceLine(ClassContext classContext,MethodGen methodGen,String sourceFile,InstructionHandle start,InstructionHandle end){  if (start.getPosition() > end.getPosition()) {    InstructionHandle tmp=start;    start=end;    end=tmp;  }  SourceLineAnnotation sourceLineAnnotation=SourceLineAnnotation.fromVisitedInstructionRange(classContext,methodGen,sourceFile,start,end);  if (sourceLineAnnotation != null) {    add(sourceLineAnnotation);  }  return this;}  }
class C{  public <T>TypedListGeneratorBuilder<T> linkedListsOf(Source<T> source){  return new TypedListGeneratorBuilder<T>(source,Lists.linkedListCollector());}  }
class C{  private float crossCheckVertical(int startI,int centerJ,int maxCount,int originalStateCountTotal){  BitMatrix image=this.image;  int maxI=image.getHeight();  int[] stateCount=crossCheckStateCount;  stateCount[0]=0;  stateCount[1]=0;  stateCount[2]=0;  int i=startI;  while (i >= 0 && image.get(centerJ,i) && stateCount[1] <= maxCount) {    stateCount[1]++;    i--;  }  if (i < 0 || stateCount[1] > maxCount) {    return Float.NaN;  }  while (i >= 0 && !image.get(centerJ,i) && stateCount[0] <= maxCount) {    stateCount[0]++;    i--;  }  if (stateCount[0] > maxCount) {    return Float.NaN;  }  i=startI + 1;  while (i < maxI && image.get(centerJ,i) && stateCount[1] <= maxCount) {    stateCount[1]++;    i++;  }  if (i == maxI || stateCount[1] > maxCount) {    return Float.NaN;  }  while (i < maxI && !image.get(centerJ,i) && stateCount[2] <= maxCount) {    stateCount[2]++;    i++;  }  if (stateCount[2] > maxCount) {    return Float.NaN;  }  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2];  if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal) {    return Float.NaN;  }  return foundPatternCross(stateCount) ? centerFromEnd(stateCount,i) : Float.NaN;}  }
class C{  public static String extractNetworkPortion(String phoneNumber){  if (phoneNumber == null) {    return null;  }  int len=phoneNumber.length();  StringBuilder ret=new StringBuilder(len);  for (int i=0; i < len; i++) {    char c=phoneNumber.charAt(i);    int digit=Character.digit(c,10);    if (digit != -1) {      ret.append(digit);    } else     if (c == '+') {      String prefix=ret.toString();      if (prefix.length() == 0 || prefix.equals(CLIR_ON) || prefix.equals(CLIR_OFF)) {        ret.append(c);      }    } else     if (isDialable(c)) {      ret.append(c);    } else     if (isStartsPostDial(c)) {      break;    }  }  return ret.toString();}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void drainCharBuffer() throws IOException {  this.writer.write(this.chars,0,this.encCount);  this.totalCharsWritten+=this.encCount;  this.encCount=0;}  }
class C{  public synchronized boolean isParsing(){  return parsing;}  }
class C{  public void push(){  for (int i=cursor; i < size; i++) {    if (buffer[i] != null) {      target.publish(buffer[i]);    }    buffer[i]=null;  }  for (int i=0; i < cursor; i++) {    if (buffer[i] != null) {      target.publish(buffer[i]);    }    buffer[i]=null;  }  cursor=0;}  }
class C{  public static byte[] decodeFromFile(String filename) throws java.io.IOException {  byte[] decodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=null;    int length=0;    int numBytes=0;    if (file.length() > Integer.MAX_VALUE) {      throw new java.io.IOException("File is too big for this convenience method (" + file.length() + " bytes).");    }    buffer=new byte[(int)file.length()];    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.DECODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    decodedData=new byte[length];    System.arraycopy(buffer,0,decodedData,0,length);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return decodedData;}  }
class C{  public boolean isIsScorable(){  if (isScorable == null) {    return true;  } else {    return isScorable;  }}  }
class C{  public Swagger2MarkupConfigBuilder withPathsGroupedBy(GroupBy pathsGroupedBy){  Validate.notNull(pathsGroupedBy,"%s must not be null","pathsGroupedBy");  config.pathsGroupedBy=pathsGroupedBy;  return this;}  }
class C{  public ImplVoiceChannel(JSONObject data,ImplServer server,ImplDiscordAPI api){  this.api=api;  this.server=server;  id=data.getString("id");  name=data.getString("name");  position=data.getInt("position");  JSONArray permissionOverwrites=data.getJSONArray("permission_overwrites");  for (int i=0; i < permissionOverwrites.length(); i++) {    JSONObject permissionOverwrite=permissionOverwrites.getJSONObject(i);    String id=permissionOverwrite.getString("id");    int allow=permissionOverwrite.getInt("allow");    int deny=permissionOverwrite.getInt("deny");    String type=permissionOverwrite.getString("type");    if (type.equals("role")) {      Role role=server.getRoleById(id);      if (role != null) {        ((ImplRole)role).setOverwrittenPermissions(this,new ImplPermissions(allow,deny));      }    }    if (type.equals("member")) {      overwrittenPermissions.put(id,new ImplPermissions(allow,deny));    }  }  server.addVoiceChannel(this);}  }
class C{  public void animateXY(int durationMillisX,int durationMillisY,EasingFunction easingX,EasingFunction easingY){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorY=ObjectAnimator.ofFloat(this,"phaseY",0f,1f);  animatorY.setInterpolator(easingY);  animatorY.setDuration(durationMillisY);  ObjectAnimator animatorX=ObjectAnimator.ofFloat(this,"phaseX",0f,1f);  animatorX.setInterpolator(easingX);  animatorX.setDuration(durationMillisX);  if (durationMillisX > durationMillisY) {    animatorX.addUpdateListener(mListener);  } else {    animatorY.addUpdateListener(mListener);  }  animatorX.start();  animatorY.start();}  }
class C{  public static void appendToFile(final File file,final String contents) throws IOException {  try (FileOutputStream fos=new FileOutputStream(file,true)){    fos.write(contents.getBytes());  } }  }
class C{  public static int computeMinImageSampleSize(ImageSize srcSize){  final int srcWidth=srcSize.getWidth();  final int srcHeight=srcSize.getHeight();  final int targetWidth=maxBitmapSize.getWidth();  final int targetHeight=maxBitmapSize.getHeight();  final int widthScale=(int)Math.ceil((float)srcWidth / targetWidth);  final int heightScale=(int)Math.ceil((float)srcHeight / targetHeight);  return Math.max(widthScale,heightScale);}  }
class C{  public void block(InetAddress address){  if (address == null) {    throw new IllegalArgumentException("Adress to block can not be null");  }  block(new Subnet(address,32));}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public static String format2(long time_secs,boolean do_seconds){  if (time_secs == Constants.CRAPPY_INFINITY_AS_INT || time_secs >= Constants.CRAPPY_INFINITE_AS_LONG)   return Constants.INFINITY_STRING;  if (time_secs < 0)   return "";  int[] vals={(int)time_secs % 60,(int)(time_secs / 60) % 60,(int)(time_secs / 3600) % 24,(int)(time_secs / 86400) % 365,(int)(time_secs / 31536000)};  int start=vals.length - 1;  while (vals[start] == 0 && start > 0) {    start--;  }  int end=do_seconds ? 0 : 1;  if (start == 0 && !do_seconds) {    start=1;  }  String result="";  for (int i=start; i >= end; i--) {    result+=(i == start ? vals[i] : (" " + twoDigits(vals[i]))) + TIME_SUFFIXES[i];  }  return result;}  }
class C{  public static int executeUpdateEx(String sql,String trxName,int timeOut) throws DBException {  return executeUpdateEx(sql,null,trxName,timeOut);}  }
class C{  public static void main(String[] args){  if (args.length == 1) {    run(args[0]);  } else {    throw new IllegalArgumentException("Incorrect number of arguments: [0] Public Transit Mapping config file");  }}  }
class C{  protected boolean isShuttingDownOrStopped(){  return mCore.isStopping() || !mCore.isStarted();}  }
class C{  public static String runShellCommand(String... command){  String joinedCommand=String.join(" ",command);  LOGGER.debug("Executing shell command: `{}`",joinedCommand);  try {    ProcessResult result;    result=new ProcessExecutor().command(command).readOutput(true).exitValueNormal().execute();    return result.outputUTF8().trim();  } catch (  IOException|InterruptedException|TimeoutException|InvalidExitValueException e) {    throw new ShellCommandException("Exception when executing " + joinedCommand,e);  }}  }
class C{  public static String supportedRange(){  return "3.5.0 through " + LATEST;}  }
class C{  public CropFilter(){  this(0,0,32,32);}  }
class C{  @Override public final boolean isDistance(){  return false;}  }
class C{  public MonitoringFilter clone(){  MonitoringFilter result=new MonitoringFilter();  return result;}  }
class C{  protected void parseURI(String uriString) throws URISyntaxException {  String s=uriString;  int index=s.indexOf(FRAGMENT_SEPARATOR);  if (index != -1) {    setFragment(s.substring(index + 1),false);    s=s.substring(0,index);  }  index=s.indexOf(SCHEME_SEPARATOR);  if (index != -1) {    String scheme=s.substring(0,index);    if (isValidScheme(scheme)) {      setScheme(scheme);      s=s.substring(index + 1);    }  }  parseSchemeSpecificPart(s,false);}  }
class C{  public BTreeCounters subtract(final BTreeCounters o){  if (o == null)   throw new IllegalArgumentException();  final BTreeCounters t=new BTreeCounters(this);  t.ninserts.addAndGet(-o.ninserts.get());  t.nremoves.addAndGet(-o.nremoves.get());  t.nindexOf.add(-o.nindexOf.get());  t.ngetKey.add(-o.ngetKey.get());  t.ngetValue.add(-o.ngetValue.get());  t.nrangeCount.add(-o.nrangeCount.get());  t.nrangeIterator.add(-o.nrangeIterator.get());  t.rootsSplit-=o.rootsSplit;  t.rootsJoined-=o.rootsJoined;  t.nodesSplit-=o.nodesSplit;  t.nodesJoined-=o.nodesJoined;  t.leavesSplit-=o.leavesSplit;  t.leavesJoined-=o.leavesJoined;  t.headSplit-=o.headSplit;  t.tailSplit-=o.tailSplit;  t.nodesCopyOnWrite-=o.nodesCopyOnWrite;  t.leavesCopyOnWrite-=o.leavesCopyOnWrite;  t.ntupleInsertValue-=o.ntupleInsertValue;  t.ntupleInsertDelete-=o.ntupleInsertDelete;  t.ntupleUpdateValue-=o.ntupleUpdateValue;  t.ntupleUpdateDelete-=o.ntupleUpdateDelete;  t.ntupleRemove-=o.ntupleRemove;  t.cacheTests.add(-o.cacheTests.get());  t.cacheMisses.add(-o.cacheMisses.get());  t.nodesRead.add(-o.nodesRead.get());  t.leavesRead.add(-o.leavesRead.get());  t.bytesRead.add(-o.bytesRead.get());  t.readNanos.add(-o.readNanos.get());  t.deserializeNanos.add(-o.deserializeNanos.get());  t.rawRecordsRead.add(-o.rawRecordsRead.get());  t.rawRecordsBytesRead.add(-o.rawRecordsBytesRead.get());  t.nodesWritten.add(-o.nodesWritten.get());  t.leavesWritten.add(-o.leavesWritten.get());  t.bytesWritten.add(-o.bytesWritten.get());  t.bytesReleased.add(-o.bytesReleased.get());  t.serializeNanos.add(-o.serializeNanos.get());  t.writeNanos.add(-o.writeNanos.get());  t.rawRecordsWritten.add(-o.rawRecordsWritten.get());  t.rawRecordsBytesWritten.add(-o.rawRecordsBytesWritten.get());  return t;}  }
class C{  public static NurbsCurve createFullCircleQuad9(Origin3D o,float r){  final float w=MathUtils.SQRT2 / 2;  Vec4D[] cp=new Vec4D[9];  cp[0]=new Vec4D(o.xAxis.scale(r),1);  cp[4]=cp[0].getInvertedXYZ();  cp[8]=cp[0].copy();  cp[1]=new Vec4D(o.xAxis.add(o.yAxis).scaleSelf(r),w);  cp[5]=cp[1].getInvertedXYZ();  cp[2]=new Vec4D(o.yAxis.scale(r),1);  cp[6]=cp[2].getInvertedXYZ();  cp[3]=new Vec4D(o.xAxis.getInverted().addSelf(o.yAxis).scaleSelf(r),w);  cp[7]=cp[3].getInvertedXYZ();  for (int i=0; i < 9; i++) {    cp[i].addXYZSelf(o.origin);  }  float[] u={0,0,0,0.25f,0.25f,0.5f,0.5f,0.75f,0.75f,1,1,1};  return new BasicNurbsCurve(cp,u,2);}  }
class C{  public Object encode(Object object) throws EncoderException {  try {    byte[] byteArray=object instanceof String ? ((String)object).getBytes() : (byte[])object;    return encodeHex(byteArray);  } catch (  ClassCastException e) {    throw new EncoderException(e.getMessage());  }}  }
class C{  public IndexRequest(ActionRequest request){  super(request);}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData1);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            if (z1 <= z2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData) {            if (z1 <= constant2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row <= rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData) {            if (z2 < constant1) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void addViewAction(final String actionId,final ActorConsumer<?,?> action){  parser.getData().addActorConsumer(actionId,action);}  }
class C{  private TransactionDefinition definition(Transaction tx,String cacheName){  assert tx != null;  DefaultTransactionDefinition def=new DefaultTransactionDefinition();  def.setName("Ignite Tx [cache=" + (cacheName != null ? cacheName : "<default>") + ", id="+ tx.xid()+ ']');  def.setIsolationLevel(isolationLevel(tx.isolation()));  long timeoutSec=(tx.timeout() + 500) / 1000;  if (timeoutSec > 0 && timeoutSec < Integer.MAX_VALUE)   def.setTimeout((int)timeoutSec);  return def;}  }
class C{  protected String[] diff_halfMatch(String text1,String text2){  if (Diff_Timeout <= 0) {    return null;  }  String longtext=text1.length() > text2.length() ? text1 : text2;  String shorttext=text1.length() > text2.length() ? text2 : text1;  if (longtext.length() < 4 || shorttext.length() * 2 < longtext.length()) {    return null;  }  String[] hm1=diff_halfMatchI(longtext,shorttext,(longtext.length() + 3) / 4);  String[] hm2=diff_halfMatchI(longtext,shorttext,(longtext.length() + 1) / 2);  String[] hm;  if (hm1 == null && hm2 == null) {    return null;  } else   if (hm2 == null) {    hm=hm1;  } else   if (hm1 == null) {    hm=hm2;  } else {    hm=hm1[4].length() > hm2[4].length() ? hm1 : hm2;  }  if (text1.length() > text2.length()) {    return hm;  } else {    return new String[]{hm[2],hm[3],hm[0],hm[1],hm[4]};  }}  }
class C{  public static double L_ZeroOne(int y[],int ypred[]){  int[][] aligned=align(y,ypred);  int[] yAligned=aligned[0];  int[] ypredAligned=aligned[1];  int L=yAligned.length;  for (int j=0; j < L; j++) {    if (y[j] != ypredAligned[j])     return 1.;  }  return 0.;}  }
class C{  public static boolean hasUTF16BEBom(@NotNull byte[] bom){  return ArrayUtil.startsWith(bom,UTF16BE_BOM);}  }
class C{  public final double length(){  return Math.sqrt(x * x + y * y + z * z);}  }
class C{  @SuppressWarnings({"SignalWithoutCorrespondingAwait"}) private void signalFlushed(){  flushCond.signalAll();}  }
class C{  private void makeTimestampTokens(){  contentTimestamps=new ArrayList<TimestampToken>();  signatureTimestamps=new ArrayList<TimestampToken>();  refsOnlyTimestamps=new ArrayList<TimestampToken>();  sigAndRefsTimestamps=new ArrayList<TimestampToken>();  archiveTimestamps=new ArrayList<TimestampToken>();  final NodeList allDataObjectsTimestamps=DSSXMLUtils.getNodeList(signatureElement,xPathQueryHolder.XPATH_ALL_DATA_OBJECTS_TIMESTAMP);  addContentTimestamps(contentTimestamps,allDataObjectsTimestamps,TimestampType.ALL_DATA_OBJECTS_TIMESTAMP);  final NodeList individualDataObjectsTimestampsNodes=DSSXMLUtils.getNodeList(signatureElement,xPathQueryHolder.XPATH_INDIVIDUAL_DATA_OBJECTS_TIMESTAMP);  addContentTimestamps(contentTimestamps,individualDataObjectsTimestampsNodes,TimestampType.INDIVIDUAL_DATA_OBJECTS_TIMESTAMP);  final Element unsignedSignaturePropertiesDom=getUnsignedSignaturePropertiesDom();  if (unsignedSignaturePropertiesDom == null) {    return;  }  final List<String> timestampedTimestamps=new ArrayList<String>();  final NodeList unsignedProperties=unsignedSignaturePropertiesDom.getChildNodes();  for (int ii=0; ii < unsignedProperties.getLength(); ii++) {    final Node node=unsignedProperties.item(ii);    if (node.getNodeType() != Node.ELEMENT_NODE) {      continue;    }    TimestampToken timestampToken;    final String localName=node.getLocalName();    if (XMLE_SIGNATURE_TIME_STAMP.equals(localName)) {      timestampToken=makeTimestampToken((Element)node,TimestampType.SIGNATURE_TIMESTAMP);      if (timestampToken == null) {        continue;      }      timestampToken.setTimestampedReferences(getSignatureTimestampedReferences());      signatureTimestamps.add(timestampToken);    } else     if (XMLE_REFS_ONLY_TIME_STAMP.equals(localName) || XPathQueryHolder.XMLE_REFS_ONLY_TIME_STAMP_V2.equals(localName)) {      timestampToken=makeTimestampToken((Element)node,TimestampType.VALIDATION_DATA_REFSONLY_TIMESTAMP);      if (timestampToken == null) {        continue;      }      timestampToken.setTimestampedReferences(getTimestampedReferences());      refsOnlyTimestamps.add(timestampToken);    } else     if (XMLE_SIG_AND_REFS_TIME_STAMP.equals(localName) || XPathQueryHolder.XMLE_SIG_AND_REFS_TIME_STAMP_V2.equals(localName)) {      timestampToken=makeTimestampToken((Element)node,TimestampType.VALIDATION_DATA_TIMESTAMP);      if (timestampToken == null) {        continue;      }      final List<TimestampReference> references=getSignatureTimestampedReferences();      references.addAll(getTimestampedReferences());      timestampToken.setTimestampedReferences(references);      sigAndRefsTimestamps.add(timestampToken);    } else     if (isArchiveTimestamp(localName)) {      timestampToken=makeTimestampToken((Element)node,TimestampType.ARCHIVE_TIMESTAMP);      if (timestampToken == null) {        continue;      }      final ArchiveTimestampType archiveTimestampType=getArchiveTimestampType(node,localName);      timestampToken.setArchiveTimestampType(archiveTimestampType);      final List<TimestampReference> references=getSignatureTimestampedReferences();      for (      final String timestampId : timestampedTimestamps) {        references.add(new TimestampReference(timestampId,TimestampReferenceCategory.TIMESTAMP));      }      references.addAll(getTimestampedReferences());      final List<CertificateToken> encapsulatedCertificates=getCertificateSource().getEncapsulatedCertificates();      for (      final CertificateToken certificateToken : encapsulatedCertificates) {        final TimestampReference certificateTimestampReference=createCertificateTimestampReference(certificateToken);        if (!references.contains(certificateTimestampReference)) {          references.add(certificateTimestampReference);        }      }      addReferencesFromOfflineCRLSource(references);      addReferencesFromOfflineOCSPSource(references);      timestampToken.setTimestampedReferences(references);      archiveTimestamps.add(timestampToken);    } else {      continue;    }    timestampedTimestamps.add(timestampToken.getDSSId().asXmlId());  }}  }
class C{  public void createAsync(final String name,final FutureCallback<Task> responseCallback) throws IOException {  Map<String,String> map=new HashMap<>();  map.put("name",name);  createObjectAsync(getBasePath(),serializeObjectAsJson(map),responseCallback);}  }
class C{  synchronized int addTrack(final MediaFormat format){  if (mIsStarted)   throw new IllegalStateException("muxer already started");  final int trackIx=mMediaMuxer.addTrack(format);  if (DEBUG)   Log.i(TAG,"addTrack:trackNum=" + mEncoderCount + ",trackIx="+ trackIx+ ",format="+ format);  return trackIx;}  }
class C{  public PShapeOBJ(PApplet parent,String filename){  this(parent,parent.createReader(filename));}  }
class C{  @Override public String[] parameters(){  return pointGen.parameters();}  }
class C{  public ChangeEvent(Object source){  super(source);}  }
class C{  public Method node(int opcode){  return this.node(new InsnNode(opcode));}  }
class C{  @WorkerThread public void signUpWithUser(String user,String password) throws ParticleCloudException {  try {    identityApi.signUp(user,password);  } catch (  RetrofitError error) {    throw new ParticleCloudException(error);  }}  }
class C{  @Override public boolean equals(Object other){  if (this == other) {    return true;  }  if (this.getClass() != other.getClass()) {    return false;  }  SNIServerName that=(SNIServerName)other;  return (this.type == that.type) && Arrays.equals(this.encoded,that.encoded);}  }
class C{  private void layoutComponents(){  output=new JTextArea();  output.setEditable(false);  output.setFont(new Font(Font.MONOSPACED,Font.PLAIN,12));  status=new JLabel("Status: Setting up...");  closeButton=new JButton("Close");  JPanel buttonPane=new JPanel();  buttonPane.setLayout(new BoxLayout(buttonPane,BoxLayout.X_AXIS));  buttonPane.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));  buttonPane.add(status);  buttonPane.add(Box.createHorizontalGlue());  buttonPane.add(closeButton);  JPanel contentPane=new JPanel();  contentPane.setLayout(new BorderLayout());  contentPane.add(new JScrollPane(output),BorderLayout.CENTER);  contentPane.add(buttonPane,BorderLayout.SOUTH);  setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);  getContentPane().setLayout(new BorderLayout());  getContentPane().add(contentPane,BorderLayout.CENTER);  setSize(600,400);  setLocationRelativeTo(null);  setIconImages(Settings.getIconImages());}  }
class C{  public static void main(String[] args){  new RetrievalPerfTest("testRetrievalMyIsam").run();  new RetrievalPerfTest("testRetrievalHeap").run();  new RetrievalPerfTest("testRetrievalCached").run();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void installWindowListeners(JRootPane root,Component parent){  if (parent instanceof Window) {    window=(Window)parent;  } else {    window=SwingUtilities.getWindowAncestor(parent);  }  if (window != null) {    if (mouseInputListener == null) {      mouseInputListener=createWindowMouseInputListener(root);    }    window.addMouseListener(mouseInputListener);    window.addMouseMotionListener(mouseInputListener);  }}  }
class C{  public EventListPresenter(){  setIsolated(true);  eventHandlers=new LinkedList<OMEventHandler>();  macroFilters=new LinkedList();  setLayout(new BorderLayout());}  }
class C{  @Override public void endWindow(){}  }
class C{  public static void registerNecronomiconData(NecroData data,int bookType){  if (bookType <= 4 && bookType >= 0)   necroData.put(data,bookType); else   FMLLog.log("AbyssalCraftAPI",Level.ERROR,"Necronomicon book type does not exist: %d",bookType);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  if (instruction.getMnemonic().startsWith("UHSAX")) {    TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"UHSAX");    translateAll(environment,instruction,"UHSAX",instructions);  } else {    TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"UHSUBADDX");    translateAll(environment,instruction,"UHSUBADDX",instructions);  }}  }
class C{  public ol addElement(String[] element){  li[] li=new li().addElement(element);  addElement(li);  return (this);}  }
class C{  public static String readAsciiLine(InputStream in) throws IOException {  StringBuilder result=new StringBuilder(80);  while (true) {    int c=in.read();    if (c == -1) {      throw new EOFException();    } else     if (c == '\n') {      break;    }    result.append((char)c);  }  int length=result.length();  if (length > 0 && result.charAt(length - 1) == '\r') {    result.setLength(length - 1);  }  return result.toString();}  }
class C{  public org.apache.nutch.storage.WebPage.Builder clearBatchId(){  batchId=null;  fieldSetFlags()[23]=false;  return this;}  }
class C{  public static void eachByte(File self,@ClosureParams(value=SimpleType.class,options="byte") Closure closure) throws IOException {  BufferedInputStream is=newInputStream(self);  IOGroovyMethods.eachByte(is,closure);}  }
class C{  private void initStats(SystemMemberJmx memberJmx) throws AdminException {  StatisticResource[] statResources=memberJmx.getStats();  for (  StatisticResource statResource : statResources) {    statResource.getStatistics();  }}  }
class C{  private ReplaceTokens.Token createRmiPortToken(){  if (getPropertyValue(GeneralPropertySet.RMI_PORT) == null) {    configuration.setProperty(GeneralPropertySet.RMI_PORT,"2999");  }  String rmiPort=getPropertyValue(GeneralPropertySet.RMI_PORT);  ReplaceTokens.Token tokenRmiPort=new ReplaceTokens.Token();  tokenRmiPort.setKey(GeneralPropertySet.RMI_PORT);  tokenRmiPort.setValue(rmiPort);  return tokenRmiPort;}  }
class C{  public BasicEffect(String variable,String value){  this(variable,ValueFactory.create(value),1,true,false);}  }
class C{  void removeAll(final boolean mark){  if (mark) {    AbstractInsnNode insn=first;    while (insn != null) {      AbstractInsnNode next=insn.next;      insn.index=-1;      insn.prev=null;      insn.next=null;      insn=next;    }  }  size=0;  first=null;  last=null;  cache=null;}  }
class C{  public X509Name(boolean reverse,Hashtable lookUp,String dirName){  this(reverse,lookUp,dirName,new X509DefaultEntryConverter());}  }
class C{  public void testZeroLengthTail() throws Exception {  File logDir=prepareLogDir("testZeroLengthTail");  DiskLog log=new DiskLog();  log.setLogDir(logDir.getAbsolutePath());  log.setReadOnly(false);  log.setLogFileSize(3000);  log.prepare();  writeEventsToLog(log,200);  long maxSeqno=log.getMaxSeqno();  log.release();  String lastLogName=getLastLogName(log);  File lastLog=new File(logDir,lastLogName);  assertTrue("lastLog is non-zero length: " + lastLog.toString(),lastLog.length() > 0);  truncate(lastLog);  assertEquals("lastLog is zero length: " + lastLog.toString(),0,lastLog.length());  DiskLog log2=new DiskLog();  log2.setLogDir(logDir.getAbsolutePath());  log2.setReadOnly(false);  log2.setLogRotateMillis(2000);  log2.prepare();  long maxSeqno2=log2.getMaxSeqno();  logger.info("Number of events after cleanup of bad header: " + maxSeqno2);  assertTrue("Truncated log must be shorter than old log",maxSeqno > maxSeqno2);  writeEventsToLog(log2,maxSeqno2 + 1,200);  long scanSeqno2=scanLog(log2);  assertEquals("Last event scanned must be maxSeqno",log2.getMaxSeqno(),scanSeqno2);  logger.info("Number of events read after writing to cleaned-up log: " + scanSeqno2);  log2.release();  lastLogName=getLastLogName(log2);  lastLog=new File(logDir,lastLogName);  truncate(lastLog);  assertEquals("lastLog is zero length: " + lastLog.toString(),0,lastLog.length());  DiskLog log3=new DiskLog();  log3.setLogDir(logDir.getAbsolutePath());  log3.setReadOnly(true);  log3.setLogRotateMillis(2000);  log3.prepare();  long scanSeqno3=scanLog(log3);  assertTrue("Log must be readable and shorter",scanSeqno3 < scanSeqno2);  logger.info("Number of events read after ignoring bad header: " + scanSeqno3);  log3.release();}  }
class C{  protected void countDistanceComputation(){  if (distcalc != null) {    distcalc.increment();  }}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public static ApplicationBuilder fromJson(JSONObject root) throws JSONException, AssemblyException {  String applicationName=root.getString("name");  ApplicationBuilder builder=new ApplicationBuilder(applicationName);  builder.configureWithJson(root);  return builder;}  }
class C{  protected boolean haveSharedCellsRaw(ObjectMatrix3D other){  if (other instanceof SelectedSparseObjectMatrix3D) {    SelectedSparseObjectMatrix3D otherMatrix=(SelectedSparseObjectMatrix3D)other;    return this.elements == otherMatrix.elements;  } else   if (other instanceof SparseObjectMatrix3D) {    SparseObjectMatrix3D otherMatrix=(SparseObjectMatrix3D)other;    return this.elements == otherMatrix.elements;  }  return false;}  }
class C{  public SupportedHeader createSupportedHeader(String optionTag) throws ParseException {  if (optionTag == null)   throw new NullPointerException("null optionTag arg");  Supported supported=new Supported();  supported.setOptionTag(optionTag);  return supported;}  }
class C{  public void verifyOrThrow(byte[] hash,byte[] signature) throws SignatureException {  if (!verify(hash,signature))   throw new SignatureException();}  }
class C{  public static Currency newInstance(String value){  Currency returnInstance=new Currency();  returnInstance.setValue(value);  return returnInstance;}  }
class C{  @Override public synchronized void put(String key,Entry entry){  pruneIfNeeded(entry.data.length);  File file=getFileForKey(key);  try {    BufferedOutputStream fos=new BufferedOutputStream(new FileOutputStream(file));    CacheHeader e=new CacheHeader(key,entry);    boolean success=e.writeHeader(fos);    if (!success) {      fos.close();      VolleyLog.d("Failed to write header for %s",file.getAbsolutePath());      throw new IOException();    }    fos.write(entry.data);    fos.close();    putEntry(key,e);    return;  } catch (  IOException e) {  }  boolean deleted=file.delete();  if (!deleted) {    VolleyLog.d("Could not clean up file %s",file.getAbsolutePath());  }}  }
class C{  public void translate(int x,int y){  Enumeration<PMElement> iter=gr.elements();  while (iter.hasMoreElements()) {    PMElement pme=iter.nextElement();    if (pme != null)     pme.translate(x,y);  }}  }
class C{  public boolean isBedSpawnForced(){  return bedSpawnForced;}  }
class C{  public void addAttack(AttackHandler ah){  attacks.add(ah);}  }
class C{  public static void main(String[] args){  String root="/Users/johanwjoubert/MATSim/workspace/MATSimData/";  String studyArea="Gauteng";  String version="20091202131951";  String threshold="0300";  String sample="Sample01";  double withinThreshold=0.6;  MyCommercialDemandGeneratorStringBuilder sb=new MyCommercialDemandGeneratorStringBuilder(root,studyArea);  MyCommercialChainAnalyser mcca=new MyCommercialChainAnalyser(studyArea,withinThreshold,sb.getVehicleStatsFilename(version,threshold,sample));  mcca.analyse(sb.getXmlSourceFolderName(version,threshold,sample),sb.getMatrixFileLocation(version,threshold,sample),20,48);}  }
class C{  private boolean isInterestingInterval(Interval interval){  if (isEncoderSetup() == false)   return true;  if (interval instanceof IntervalDiscrete) {    IntervalDiscrete id=(IntervalDiscrete)interval;    String columnValue=encoder.getAttribute(id.getValue()).getValue();    if (columnValue == null || columnValue.equals("null")) {      return false;    }  }  return true;}  }
class C{  private void sortList(){  Collections.sort(mArtists,mComparator);}  }
class C{  private String sign(String data) throws Exception {  sig.update(data.getBytes());  return Base64.encodeBytes(sig.sign());}  }
class C{  public void assertEquals(int expected,int actual){  if (expected != actual) {    fail("Expected: " + expected + " actual: "+ actual);  }}  }
class C{  protected boolean validRowCheck(int row,boolean throwException){  if (isValidRow(row)) {    return true;  } else   if (throwException) {    throw new IllegalArgumentException("Invalid row value: " + row);  } else {    return false;  }}  }
class C{  public DTMAxisIterator cloneIterator(){  _isRestartable=false;  try {    final AncestorIterator clone=(AncestorIterator)super.clone();    clone._startNode=_startNode;    return clone;  } catch (  CloneNotSupportedException e) {    throw new DTMException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ITERATOR_CLONE_NOT_SUPPORTED,null));  }}  }
class C{  public void randomizeIncompleteRows(int nodeIndex){  for (int rowIndex=0; rowIndex < getNumRows(nodeIndex); rowIndex++) {    if (isIncomplete(nodeIndex,rowIndex)) {      randomizeRow(nodeIndex,rowIndex);    }  }}  }
class C{  protected void fireMenuSelected(){  if (DEBUG) {    System.out.println("In JMenu.fireMenuSelected");  }  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == MenuListener.class) {      if (listeners[i + 1] == null) {        throw new Error(getText() + " has a NULL Listener!! " + i);      } else {        if (menuEvent == null)         menuEvent=new MenuEvent(this);        ((MenuListener)listeners[i + 1]).menuSelected(menuEvent);      }    }  }}  }
class C{  private boolean invertNullAndTypeChecks(Instruction s){  if (s.operator() == CHECKCAST) {    Register r=TypeCheck.getRef(s).asRegister().getRegister();    Instruction n=s.nextInstructionInCodeOrder();    while (n.operator() == REF_MOVE && Move.getVal(n) instanceof RegisterOperand && Move.getVal(n).asRegister().getRegister() == r) {      r=Move.getResult(n).asRegister().getRegister();      n=n.nextInstructionInCodeOrder();    }    if (n.operator() == NULL_CHECK && TypeCheck.getRef(s).asRegister().getRegister() == NullCheck.getRef(n).asRegister().getRegister()) {      s.remove();      TypeCheck.mutate(s,CHECKCAST_NOTNULL,TypeCheck.getClearResult(s),TypeCheck.getClearRef(s),TypeCheck.getClearType(s),NullCheck.getGuardResult(n).copy());      n.insertAfter(s);      return true;    }  }  return false;}  }
class C{  public void client(boolean client){  setFlag(CLIENT_FLAG_POS,client);}  }
class C{  public void build(org.wso2.emm.agent.beans.Operation operation){  if (operation.getId() > 0) {    operationResponses.add(operation);  }}  }
class C{  public boolean renameTo(PathImpl path) throws IOException {  return getWrappedPath().renameTo(path);}  }
class C{  public void toggle(Animation animIn,Animation animOut){  toggle(true,animIn,animOut);}  }
class C{  public static void notify(Object lock){synchronized (lock) {    lock.notify();  }}  }
class C{  public void check(final int api){}  }
class C{  public void prepareStatement(String sql) throws GenericDataSourceException, GenericEntityException {  this.prepareStatement(sql,false,0,0,-1,-1);}  }
class C{  public CreateSessionRequest clone(){  CreateSessionRequest result=new CreateSessionRequest();  result.RequestHeader=RequestHeader == null ? null : RequestHeader.clone();  result.ClientDescription=ClientDescription == null ? null : ClientDescription.clone();  result.ServerUri=ServerUri;  result.EndpointUrl=EndpointUrl;  result.SessionName=SessionName;  result.ClientNonce=ClientNonce;  result.ClientCertificate=ClientCertificate;  result.RequestedSessionTimeout=RequestedSessionTimeout;  result.MaxResponseMessageSize=MaxResponseMessageSize;  return result;}  }
class C{  public synchronized boolean isUseHeaders(){  return useHeaders;}  }
class C{  public boolean isInfoLoggingOn(){  return verbose || !quiet;}  }
class C{  static boolean isStronglyMonotone(Featurizable<IString,String> f){  CoverageSet fCoverage=f.derivation.sourceCoverage;  return (fCoverage.length() - fCoverage.cardinality() == 0);}  }
class C{  public static void write(File file,CharSequence data,String encoding,boolean append) throws IOException {  write(file,data,Charsets.toCharset(encoding),append);}  }
class C{  public static TetradMatrix constructH(int m){  TetradMatrix H=new TetradMatrix(m,m);  double od=-1.0 / (double)m;  double d=od + 1;  for (int i=0; i < m; i++) {    for (int j=i; j < m; j++) {      if (i == j) {        H.set(i,j,d);      } else {        H.set(i,j,od);      }    }  }  return H;}  }
class C{  public boolean isNew(){  boolean is;  if (m_editFlag == FolderEditFlag.NEW)   is=true; else   is=false;  return is;}  }
class C{  private void validateVolumesInReplicationGroups(BlockConsistencyGroup consistencyGroup,List<URI> volumes,DbClient dbClient){  Iterator<Volume> volumeIterator=null;  if (volumes == null || volumes.isEmpty()) {    URIQueryResultList uriQueryResultList=new URIQueryResultList();    dbClient.queryByConstraint(getVolumesByConsistencyGroup(consistencyGroup.getId()),uriQueryResultList);    volumeIterator=dbClient.queryIterativeObjects(Volume.class,uriQueryResultList);  } else {    volumeIterator=dbClient.queryIterativeObjects(Volume.class,volumes);  }  if (volumeIterator == null || !volumeIterator.hasNext()) {    throw APIException.badRequests.cgReplicationNotAllowedMissingReplicationGroupNoVols(consistencyGroup.getLabel());  }  while (volumeIterator.hasNext()) {    Volume volume=volumeIterator.next();    if (volume.getInactive()) {      continue;    }    if (NullColumnValueGetter.isNullValue(volume.getPersonality()) || !Volume.PersonalityTypes.METADATA.name().equalsIgnoreCase(volume.getPersonality())) {      if (volume.isVPlexVolume(dbClient)) {        Volume backendVolume=VPlexUtil.getVPLEXBackendVolume(volume,false,dbClient);        if (backendVolume != null && NullColumnValueGetter.isNullValue(backendVolume.getReplicationGroupInstance())) {          if (consistencyGroup != null && !NullColumnValueGetter.isNullURI(backendVolume.getConsistencyGroup())) {            throw APIException.badRequests.cgReplicationNotAllowedMissingReplicationGroup(backendVolume.getLabel());          }        }        backendVolume=VPlexUtil.getVPLEXBackendVolume(volume,true,dbClient);        if (backendVolume != null && NullColumnValueGetter.isNullValue(backendVolume.getReplicationGroupInstance())) {          throw APIException.badRequests.cgReplicationNotAllowedMissingReplicationGroup(backendVolume.getLabel());        }      } else {        if (NullColumnValueGetter.isNullValue(volume.getReplicationGroupInstance())) {          throw APIException.badRequests.cgReplicationNotAllowedMissingReplicationGroup(volume.getLabel());        }      }    }  }}  }
class C{  public PrefixTagger(MaxentTagger maxentTagger,int leftWindow,int rightWindow){  super(maxentTagger);  if (leftWindow < 0 || rightWindow < 0)   throw new UnsupportedOperationException();  this.leftWindow=leftWindow;  this.rightWindow=rightWindow;  this.offset=-rightWindow;}  }
class C{  @Override protected void init(Instances data) throws Exception {  super.init(data);  m_I0=new SMOset(m_data.numInstances());  m_iSet=new int[m_data.numInstances()];  for (int i=0; i < m_nInstances; i++) {    m_iSet[i]=I1;  }  m_iUp=0;  m_bUp=m_target[m_iUp] + m_epsilon;  m_iLow=m_iUp;  m_bLow=m_target[m_iLow] - m_epsilon;  m_error=new double[m_nInstances];  for (int i=0; i < m_nInstances; i++) {    m_error[i]=m_target[i];  }}  }
class C{  public void addFile(String url){  int count=windowMenu.getItemCount();  JMenuItem item;  if (count == 4) {    windowMenu.addSeparator();    count++;  }  JMenuItem lastItem=windowMenu.getItem(count - 1);  boolean hasMoreWin=false;  int maxWin=5;  if (lastItem != null && lastItem.getText().equals("More Windows...")) {    hasMoreWin=true;    maxWin++;  }  if (!hasMoreWin && count - 4 == 5) {    windowMenu.add(item=new JMenuItem("More Windows...",'M'));    item.setActionCommand("More Windows...");    item.addActionListener(this);    return;  } else   if (count - 4 <= maxWin) {    if (hasMoreWin) {      count--;      windowMenu.remove(lastItem);    }    String shortName=SwingGui.getShortName(url);    windowMenu.add(item=new JMenuItem((char)('0' + (count - 4)) + " " + shortName,'0' + (count - 4)));    if (hasMoreWin) {      windowMenu.add(lastItem);    }  } else {    return;  }  item.setActionCommand(url);  item.addActionListener(this);}  }
class C{  public LexicalStates(){  states=new Hashtable();  inclusive=new Vector();}  }
class C{  protected void sequence_ReturnStatement(ISerializationContext context,ReturnStatement semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void animateIn(){  animate(IN);}  }
class C{  public static void updateData(CachedData d,ActionListener callback){  if (d.isFetching()) {    return;  }  d.setFetching(true);  CachedDataService c=new CachedDataService();  c.setUrl(d.getUrl());  c.setPost(false);  if (callback != null) {    c.addResponseListener(callback);  }  if (d.getModified() != null && d.getModified().length() > 0) {    c.addRequestHeader("If-Modified-Since",d.getModified());    if (d.getEtag() != null) {      c.addRequestHeader("If-None-Match",d.getEtag());    }  }  NetworkManager.getInstance().addToQueue(c);}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  private static ConfigureDhcpWorkflowDocument buildPatchState(ConfigureDhcpWorkflowDocument.TaskState.TaskStage patchStage,ConfigureDhcpWorkflowDocument.TaskState.SubStage patchSubStage){  ConfigureDhcpWorkflowDocument patchState=new ConfigureDhcpWorkflowDocument();  patchState.taskState=new ConfigureDhcpWorkflowDocument.TaskState();  patchState.taskState.stage=patchStage;  patchState.taskState.subStage=patchSubStage;  return patchState;}  }
class C{  public static boolean showInfoIfUserNotConnectedToInternet(Context context,View anchor){  boolean isOnline=WebHelper.isOnline(context);  if (!isOnline) {    Snackbar.make(anchor,R.string.no_internet,Snackbar.LENGTH_LONG).show();  }  return !isOnline;}  }
class C{  public TransformRestoreEdit(Figure owner,Object oldTransformRestoreData,Object newTransformRestoreData){  this.owner=owner;  this.oldTransformRestoreData=oldTransformRestoreData;  this.newTransformRestoreData=newTransformRestoreData;}  }
class C{  public static int compareDoubles(String double1,String double2){  double1=normalizeDouble(double1);  double2=normalizeDouble(double2);  return compareCanonicalDoubles(double1,double2);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public int size(){  return size;}  }
class C{  @Override public void removeDataSourceListener(DataSourceListener dsl){  m_dataListeners.remove(dsl);}  }
class C{  public void putByte(byte b){  ensureCapacity(1);  this.byteBuffer[this.position++]=b;}  }
class C{  synchronized void dispatchCommittedText(Component client,AttributedCharacterIterator text,int committedCharacterCount){  if (committedCharacterCount == 0 || text.getEndIndex() <= text.getBeginIndex()) {    return;  }  long time=System.currentTimeMillis();  dispatchingCommittedText=true;  try {    InputMethodRequests req=client.getInputMethodRequests();    if (req != null) {      int beginIndex=text.getBeginIndex();      AttributedCharacterIterator toBeCommitted=(new AttributedString(text,beginIndex,beginIndex + committedCharacterCount)).getIterator();      InputMethodEvent inputEvent=new InputMethodEvent(client,InputMethodEvent.INPUT_METHOD_TEXT_CHANGED,toBeCommitted,committedCharacterCount,null,null);      client.dispatchEvent(inputEvent);    } else {      char keyChar=text.first();      while (committedCharacterCount-- > 0 && keyChar != CharacterIterator.DONE) {        KeyEvent keyEvent=new KeyEvent(client,KeyEvent.KEY_TYPED,time,0,KeyEvent.VK_UNDEFINED,keyChar);        client.dispatchEvent(keyEvent);        keyChar=text.next();      }    }  }  finally {    dispatchingCommittedText=false;  }}  }
class C{  public String option1Name(){  return "LI100F connection uses ";}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaFile mf=getMediaFile(stack);  return Boolean.valueOf(mf != null && (mf.isDVD() || (mf.isBluRay() && MediaFile.INCLUDE_BLURAYS_AS_DVDS)));}  }
class C{  public void prevField(){  prevField(currentField);}  }
class C{  private static void leftMultByVectorTranspose(List<ColGroup> colGroups,MatrixBlock vector,MatrixBlock result,boolean doTranspose,int k) throws DMLRuntimeException {  int kuc=Math.max(1,k - colGroups.size() + 1);  MatrixBlock rowVector=vector;  if (doTranspose) {    rowVector=new MatrixBlock(1,vector.getNumRows(),false);    LibMatrixReorg.transpose(vector,rowVector);  }  result.reset();  result.allocateDenseBlock();  try {    ExecutorService pool=Executors.newFixedThreadPool(Math.min(colGroups.size(),k));    ArrayList<LeftMatrixMultTask> tasks=new ArrayList<LeftMatrixMultTask>();    for (    ColGroup grp : colGroups)     tasks.add(new LeftMatrixMultTask(grp,rowVector,result,kuc));    pool.invokeAll(tasks);    pool.shutdown();  } catch (  Exception ex) {    throw new DMLRuntimeException(ex);  }  result.recomputeNonZeros();}  }
class C{  public Matrix[] compute(Matrix loghyper,Matrix X,Matrix Xstar){  if (X.getColumnDimension() != D)   throw new IllegalArgumentException("The number of dimensions specified on the covariance function " + D + " must agree with the size of the input vector"+ X.getColumnDimension());  if (loghyper.getColumnDimension() != 1 || loghyper.getRowDimension() != numParameters)   throw new IllegalArgumentException("Wrong number of hyperparameters, " + loghyper.getRowDimension() + " instead of "+ numParameters);  final Matrix ell=exp(loghyper.getMatrix(0,D - 1,0,0));  final double sf2=Math.exp(2 * loghyper.get(D,0));  double[] a=new double[Xstar.getRowDimension()];  Arrays.fill(a,sf2);  Matrix A=new Matrix(a,Xstar.getRowDimension());  Matrix diag=new Matrix(D,D);  for (int i=0; i < D; i++)   diag.set(i,i,1 / ell.get(i,0));  Matrix B=exp(squareDist(diag.times(X.transpose()),diag.times(Xstar.transpose())).times(-0.5)).times(sf2);  return new Matrix[]{A,B};}  }
class C{  public static TitledBorder createTitledBorder(Border border,String title){  return new TitledBorder(border,title);}  }
class C{  private long handleResults(LocalReasoner reasoner,Context context) throws IOException, InterruptedException {  long numOutput=0;  if (reasoner.hasNewFacts()) {    for (    Fact fact : reasoner.getFacts()) {      mout.write(getOutputName(fact),fact,NullWritable.get());      numOutput++;      if (debug) {        debugK.set("OUTPUT<" + reasoner.getNode().stringValue() + ">");        debugV.set(fact.explain(false));        mout.write(MRReasoningUtils.DEBUG_OUT,debugK,debugV);      }    }  }  if (reasoner.hasInconsistencies()) {    for (    Derivation inconsistency : reasoner.getInconsistencies()) {      mout.write(getOutputName(inconsistency),inconsistency,NullWritable.get());      numOutput++;      if (debug) {        debugK.set("OUTPUT<" + inconsistency.getNode().stringValue() + ">");        debugV.set(inconsistency.explain(false));        mout.write(MRReasoningUtils.DEBUG_OUT,debugK,debugV);      }    }  }  return numOutput;}  }
class C{  private Parameter create(Parameter original) throws Exception {  Label label=resolve(original);  if (label != null) {    return new CacheParameter(original,label);  }  return null;}  }
class C{  public static <T>List<byte[]> toByteArrays(Iterable<T> values,Coder<T> coder){  List<byte[]> res=new LinkedList<>();  for (  T value : values) {    res.add(toByteArray(value,coder));  }  return res;}  }
class C{  final public long physicalAddress(final int addr){  return physicalAddress(addr,false);}  }
class C{  public float convert(){  return Float.intBitsToFloat((int)bytes);}  }
class C{  public UserProfileImpl(){  _userId=Defs.NULL_ID;  _product=UserDefs.PRODUCT_IDOC;  _profile=UserDefs.PROFILE_NONE;}  }
class C{  public StrBuilder appendln(boolean value){  return append(value).appendNewLine();}  }
class C{  public OdorWorldEntity(final Animation anim,OdorWorld world){  this.animation=anim;  this.parentWorld=world;  anim.start();}  }
class C{  public GradientBarPainter(){  this(0.10,0.20,0.80);}  }
class C{  private void drawVerticalRangeSlider(final GC gc){  drawBackgroundVertical(gc);  drawBarsVertical(gc);  coordUpper=drawVerticalKnob(gc,upperValue,true);  coordLower=drawVerticalKnob(gc,lowerValue,false);}  }
class C{  @SuppressWarnings({"UnusedDeclaration"}) protected void beginRendering(KMLTraversalContext tc,DrawContext dc){  if (this.getRegion() != null)   tc.pushRegion(this.getRegion());}  }
class C{  public void putNull(int tag){  putLength(0);  putTag(tag);}  }
class C{  public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){  if (!(c instanceof JPopupMenu)) {    return;  }  Font origFont=g.getFont();  Color origColor=g.getColor();  JPopupMenu popup=(JPopupMenu)c;  String title=popup.getLabel();  if (title == null) {    return;  }  g.setFont(font);  FontMetrics fm=SwingUtilities2.getFontMetrics(popup,g,font);  int fontHeight=fm.getHeight();  int descent=fm.getDescent();  int ascent=fm.getAscent();  Point textLoc=new Point();  int stringWidth=SwingUtilities2.stringWidth(popup,fm,title);  textLoc.y=y + ascent + TEXT_SPACING;  textLoc.x=x + ((width - stringWidth) / 2);  g.setColor(background);  g.fillRect(textLoc.x - TEXT_SPACING,textLoc.y - (fontHeight - descent),stringWidth + (2 * TEXT_SPACING),fontHeight - descent);  g.setColor(foreground);  SwingUtilities2.drawString(popup,g,title,textLoc.x,textLoc.y);  MotifGraphicsUtils.drawGroove(g,x,textLoc.y + TEXT_SPACING,width,GROOVE_HEIGHT,shadowColor,highlightColor);  g.setFont(origFont);  g.setColor(origColor);}  }
class C{  public void addLoop(ArrayComprehensionLoop acl){  assertNotNull(acl);  loops.add(acl);  acl.setParent(this);}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();  testMemoryUsage();  testPerformance();}  }
class C{  protected boolean isSSDPDiscovery(DatagramPacket packet){  String packetString=new String(packet.getData(),0,packet.getLength());  if (packetString != null && packetString.startsWith("M-SEARCH * HTTP/1.1") && packetString.contains("\"ssdp:discover\"")) {    log.debug("isSSDPDiscovery Found message to be an M-SEARCH message.");    log.debug("isSSDPDiscovery Got SSDP packet from " + packet.getAddress().getHostAddress() + ":"+ packet.getPort()+ ", body: "+ packetString);    if (strict && (packetString.contains("ST: urn:schemas-upnp-org:device:basic:1") || packetString.contains("ST: upnp:rootdevice") || packetString.contains("ST: ssdp:all"))) {      if (traceupnp) {        log.info("Traceupnp: isSSDPDiscovery found message to be an M-SEARCH message.");        log.info("Traceupnp: isSSDPDiscovery found message to be valid under strict rules - strict: " + strict);        log.info("Traceupnp: SSDP packet from " + packet.getAddress().getHostAddress() + ":"+ packet.getPort()+ ", body: "+ packetString);      } else       log.debug("isSSDPDiscovery found message to be valid under strict rules - strict: " + strict);      return true;    } else     if (!strict) {      if (traceupnp) {        log.info("Traceupnp: isSSDPDiscovery found message to be an M-SEARCH message.");        log.info("Traceupnp: isSSDPDiscovery found message to be valid under loose rules - strict: " + strict);        log.info("Traceupnp: SSDP packet from " + packet.getAddress().getHostAddress() + ":"+ packet.getPort()+ ", body: "+ packetString);      } else       log.debug("isSSDPDiscovery found message to be valid under loose rules - strict: " + strict);      return true;    }  } else {  }  return false;}  }
class C{  public boolean minValue(int val,int minVal){  return GenericValidator.minValue(val,minVal);}  }
class C{  public boolean shouldDataBeRouted(SimpleRouterContext context,DataMetaData dataMetaData,Node node,boolean initialLoad,boolean initialLoadSelectUsed,TriggerRouter triggerRouter){  IDataRouter router=getDataRouter(dataMetaData.getRouter());  Set<Node> oneNodeSet=new HashSet<Node>(1);  oneNodeSet.add(node);  Collection<String> nodeIds=router.routeToNodes(context,dataMetaData,oneNodeSet,initialLoad,initialLoadSelectUsed,triggerRouter);  return nodeIds != null && nodeIds.contains(node.getNodeId());}  }
class C{  private boolean checkStorageQuotaDirectoryExistsInDB(String nativeGuid) throws IOException {  URIQueryResultList result=new URIQueryResultList();  _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getQuotaDirsByNativeGuid(nativeGuid),result);  if (result.iterator().hasNext()) {    return true;  }  return false;}  }
class C{  public Container socketBindingGroup(SocketBindingGroup group){  this.socketBindingGroups.add(group);  return this;}  }
class C{  public BigInteger calculateAgreement(CipherParameters pubKey){  DHPublicKeyParameters pub=(DHPublicKeyParameters)pubKey;  if (!pub.getParameters().equals(dhParams)) {    throw new IllegalArgumentException("Diffie-Hellman public key has wrong parameters.");  }  return pub.getY().modPow(key.getX(),dhParams.getP());}  }
class C{  public MethodInfo findMethod(String name,ClassInfo[] paramTypes){  return findMethod(MethodInfo.makePrototype(name,null,paramTypes,0));}  }
class C{  public WrappedPlainView(Element elem,boolean wordWrap){  super(elem,Y_AXIS);  this.wordWrap=wordWrap;}  }
class C{  public static void testCreateECDHSecret() throws AssertFailException {  byte[] sec=BaseEncoding.base16().lowerCase().decode("67E56582298859DDAE725F972992A07C6C4FB9F62A8FFF58CE3CA926A1063530".toLowerCase());  byte[] pub=BaseEncoding.base16().lowerCase().decode("040A629506E1B65CD9D2E0BA9C75DF9C4FED0DB16DC9625ED14397F0AFC836FAE595DC53F8B0EFE61E703075BD9B143BAC75EC0E19F82A2208CAEB32BE53414C40".toLowerCase());  byte[] resultArr=NativeSecp256k1.createECDHSecret(sec,pub);  String ecdhString=javax.xml.bind.DatatypeConverter.printHexBinary(resultArr);  assertEquals(ecdhString,"2A2A67007A926E6594AF3EB564FC74005B37A9C8AEF2033C4552051B5C87F043","testCreateECDHSecret");}  }
class C{  public void testWithObjectReader() throws Exception {  ObjectMapper m=new ObjectMapper();  ObjectReader reader=m.reader(new MyNodeFactory());  JsonNode n=reader.readTree("{ \"a\":3 }");  assertNotNull(n);  assertSame(MyObjectNode.class,n.getClass());}  }
class C{  private static Year evaluateAsYear(String s){  Year result=null;  try {    result=Year.parseYear(s);  } catch (  TimePeriodFormatException e) {  }  return result;}  }
class C{  public void paintPasswordFieldBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public Vector3d mulDirection(Matrix4dc mat){  return mulDirection(mat,this);}  }
class C{  public Vector3f mult(Vector3f vec,Vector3f store){  if (null == vec) {    logger.warning("Provided vector is null, null returned.");    return null;  }  if (store == null)   store=new Vector3f();  return store.set(x * vec.x,y * vec.y,z * vec.z);}  }
class C{  public void testJetty7xRootContext() throws Exception {  final URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/");  final String expected="Sample page for testing";  PingUtils.assertPingTrue(url.getPath() + " not started",expected,url,logger);}  }
class C{  public static void liftingFromBottom(View view,float baseRotation,int duration,int startDelay){  ViewHelper.setRotationX(view,baseRotation);  ViewHelper.setTranslationY(view,view.getHeight() / 3);  ViewPropertyAnimator.animate(view).setInterpolator(new AccelerateDecelerateInterpolator()).setDuration(duration).setStartDelay(startDelay).rotationX(0).translationY(0).start();}  }
class C{  public long convertGeodeticToUTM(double Latitude,double Longitude){  long Lat_Degrees;  long Long_Degrees;  long temp_zone;  long Error_Code=UTM_NO_ERROR;  double Origin_Latitude=0;  double False_Easting=500000;  double False_Northing=0;  double Scale=0.9996;  if ((Latitude < MIN_LAT) || (Latitude > MAX_LAT)) {    Error_Code|=UTM_LAT_ERROR;  }  if ((Longitude < -PI) || (Longitude > (2 * PI))) {    Error_Code|=UTM_LON_ERROR;  }  if (Error_Code == UTM_NO_ERROR) {    if (Longitude < 0)     Longitude+=(2 * PI) + 1.0e-10;    Lat_Degrees=(long)(Latitude * 180.0 / PI);    Long_Degrees=(long)(Longitude * 180.0 / PI);    if (Longitude < PI)     temp_zone=(long)(31 + ((Longitude * 180.0 / PI) / 6.0)); else     temp_zone=(long)(((Longitude * 180.0 / PI) / 6.0) - 29);    if (temp_zone > 60)     temp_zone=1;    if ((Lat_Degrees > 55) && (Lat_Degrees < 64) && (Long_Degrees > -1)&& (Long_Degrees < 3))     temp_zone=31;    if ((Lat_Degrees > 55) && (Lat_Degrees < 64) && (Long_Degrees > 2)&& (Long_Degrees < 12))     temp_zone=32;    if ((Lat_Degrees > 71) && (Long_Degrees > -1) && (Long_Degrees < 9))     temp_zone=31;    if ((Lat_Degrees > 71) && (Long_Degrees > 8) && (Long_Degrees < 21))     temp_zone=33;    if ((Lat_Degrees > 71) && (Long_Degrees > 20) && (Long_Degrees < 33))     temp_zone=35;    if ((Lat_Degrees > 71) && (Long_Degrees > 32) && (Long_Degrees < 42))     temp_zone=37;    if (UTM_Override != 0) {      if ((temp_zone == 1) && (UTM_Override == 60))       temp_zone=UTM_Override; else       if ((temp_zone == 60) && (UTM_Override == 1))       temp_zone=UTM_Override; else       if (((temp_zone - 1) <= UTM_Override) && (UTM_Override <= (temp_zone + 1)))       temp_zone=UTM_Override; else       Error_Code=UTM_ZONE_OVERRIDE_ERROR;    }    if (Error_Code == UTM_NO_ERROR) {      if (temp_zone >= 31)       Central_Meridian=(6 * temp_zone - 183) * PI / 180.0; else       Central_Meridian=(6 * temp_zone + 177) * PI / 180.0;      Zone=(int)temp_zone;      if (Latitude < 0) {        False_Northing=10000000;        Hemisphere=AVKey.SOUTH;      } else       Hemisphere=AVKey.NORTH;      try {        TMCoord TM=TMCoord.fromLatLon(Angle.fromRadians(Latitude),Angle.fromRadians(Longitude),this.globe,this.UTM_a,this.UTM_f,Angle.fromRadians(Origin_Latitude),Angle.fromRadians(Central_Meridian),False_Easting,False_Northing,Scale);        Easting=TM.getEasting();        Northing=TM.getNorthing();        if ((Easting < MIN_EASTING) || (Easting > MAX_EASTING))         Error_Code=UTM_EASTING_ERROR;        if ((Northing < MIN_NORTHING) || (Northing > MAX_NORTHING))         Error_Code|=UTM_NORTHING_ERROR;      } catch (      Exception e) {        Error_Code=UTM_TM_ERROR;      }    }  }  return (Error_Code);}  }
class C{  public Vec2D multiply(double scalar){  return new Vec2D(x() * scalar,y() * scalar);}  }
class C{  private void reverseChildren(){  List<View> children=new ArrayList<View>();  for (int i=getChildCount() - 1; i >= 0; i--) {    children.add(getChildAt(i));  }  for (  View v : children) {    bringChildToFront(v);  }}  }
class C{  public ToggleStatusBarAction(Application app,@Nullable View view){  super(app,view);  labels.configureAction(this,ID);  setPropertyName("statusBarVisible");}  }
class C{  public void testRandomlyAgainstJavaList(){  PVector<Integer> pvec=TreePVector.empty();  List<Integer> list=new LinkedList<Integer>();  Random r=new Random();  for (int i=0; i < 1000; i++) {    if (pvec.size() == 0 || r.nextBoolean()) {      if (r.nextBoolean()) {        Integer v=r.nextInt();        assertEquals(list.contains(v),pvec.contains(v));        list.add(v);        pvec=pvec.plus(v);      } else {        int k=r.nextInt(pvec.size() + 1);        Integer v=r.nextInt();        assertEquals(list.contains(v),pvec.contains(v));        if (k < pvec.size())         assertEquals(list.get(k),pvec.get(k));        list.add(k,v);        pvec=pvec.plus(k,v);      }    } else     if (r.nextBoolean()) {      int k=r.nextInt(pvec.size());      Integer v=r.nextInt();      list.set(k,v);      pvec=pvec.with(k,v);    } else {      int j=r.nextInt(pvec.size()), k=0;      for (      Integer e : pvec) {        assertTrue(list.contains(e));        assertTrue(pvec.contains(e));        assertEquals(e,pvec.get(k));        assertEquals(list.get(k),pvec.get(k));        UtilityTest.assertEqualsAndHash(pvec,pvec.minus(k).plus(k,pvec.get(k)));        UtilityTest.assertEqualsAndHash(pvec,pvec.plus(k,10).minus(k));        if (k == j) {          list.remove(k);          pvec=pvec.minus(k);          k--;          j=-1;        }        k++;      }    }    Integer v=r.nextInt();    assertEquals(list.contains(v),pvec.contains(v));    list.remove(v);    pvec=pvec.minus(v);    String s=Integer.toString(v);    assertFalse(pvec.contains(v));    pvec=pvec.minus(s);    assertEquals(list.size(),pvec.size());    UtilityTest.assertEqualsAndHash(list,pvec);    UtilityTest.assertEqualsAndHash(pvec,TreePVector.from(pvec));    UtilityTest.assertEqualsAndHash(TreePVector.empty(),pvec.minusAll(pvec));    UtilityTest.assertEqualsAndHash(pvec,TreePVector.empty().plusAll(pvec));    UtilityTest.assertEqualsAndHash(pvec,TreePVector.singleton(10).plusAll(1,pvec).minus(0));    int end=r.nextInt(pvec.size() + 1), start=r.nextInt(end + 1);    UtilityTest.assertEqualsAndHash(pvec.subList(start,end),list.subList(start,end));  }}  }
class C{  @Override public void trim(){}  }
class C{  public static void saveObject(final SharedPreferences.Editor editor,final String key,final Object o){  if (o == null) {    editor.remove(key);  } else   if (o instanceof String) {    editor.putString(key,(String)o);  } else   if (o instanceof Integer) {    editor.putInt(key,(Integer)o);  } else   if (o instanceof Boolean) {    editor.putBoolean(key,(Boolean)o);  } else   if (o instanceof Long) {    editor.putLong(key,(Long)o);  } else   if (o instanceof Float) {    editor.putFloat(key,(Float)o);  } else   if (o instanceof ArrayList) {    final Set asSet=new HashSet();    asSet.addAll((ArrayList)o);    editor.putStringSet(key,asSet);  } else {    throw new IllegalArgumentException("SharedPreferences does not accept " + o.getClass().getName() + " objects");  }}  }
class C{  public BusinessObjectDefinitionUpdateRequest createBusinessObjectDefinitionUpdateRequest(String businessObjectDefinitionDescription,String displayName,List<Attribute> attributes){  BusinessObjectDefinitionUpdateRequest request=new BusinessObjectDefinitionUpdateRequest();  request.setDescription(businessObjectDefinitionDescription);  request.setDisplayName(displayName);  request.setAttributes(attributes);  return request;}  }
class C{  @Deprecated protected void scan(@NotNull Path filePath,Path rootPath) throws IOException {  Map<String,Long> lastModifiedTimesForInputDir;  lastModifiedTimesForInputDir=referenceTimes.get(filePath.toUri().getPath());  scan(filePath,rootPath,lastModifiedTimesForInputDir);}  }
class C{  public SQLiteDatabaseConfiguration(SQLiteDatabaseConfiguration other){  if (other == null) {    throw new IllegalArgumentException("other must not be null.");  }  this.path=other.path;  this.label=other.label;  updateParametersFrom(other);}  }
class C{  private static void searchVolumes(BooksService service,boolean authenticated) throws IOException, ServiceException {  VolumeQuery query=new VolumeQuery(new URL(VOLUMES_FEED));  query.setMinViewability(VolumeQuery.MinViewability.PARTIAL);  System.out.println("\nEnter search terms: ");  String searchTerms=readLine();  System.out.println();  query.setFullTextQuery(searchTerms);  printUnderlined("Running Search for '" + searchTerms + "'");  VolumeFeed volumeFeed=service.query(query,VolumeFeed.class);  printVolumeFeed(volumeFeed);  if (authenticated) {    handleSearchVolumes(service,volumeFeed);  }}  }
class C{  private MLanguage(Properties ctx,String AD_Language,String Name,String CountryCode,String LanguageISO,String trxName){  super(ctx,0,trxName);  setAD_Language(AD_Language);  setIsBaseLanguage(false);  setIsSystemLanguage(false);  setName(Name);  setCountryCode(CountryCode);  setLanguageISO(LanguageISO);}  }
class C{  public NamedElement createNamedElement(){  NamedElementImpl namedElement=new NamedElementImpl();  return namedElement;}  }
class C{  public MyDTLZ2(){  super(11,2);}  }
class C{  public LZMAInputStream(InputStream in,long uncompSize,byte propsByte,int dictSize,byte[] presetDict) throws IOException {  initialize(in,uncompSize,propsByte,dictSize,presetDict);}  }
class C{  protected boolean strictParseBoolean(String s){  if (s == null || s.isEmpty()) {    throw new IllegalArgumentException("empty string does not represent a valid boolean");  }  if (s.equalsIgnoreCase("true")) {    return true;  }  if (s.equalsIgnoreCase("false")) {    return false;  }  throw new IllegalArgumentException("Invalid string representing a boolean: " + s);}  }
class C{  public static <T>T checkNonNull(T t){  if (t == null)   error();  return t;}  }
class C{  void loadCommandLineSettings(Map<String,String> args){  for (  String key : args.keySet()) {    String value=args.get(key);    if (key == null) {      continue;    }switch (key) {case "user":      settings.setString("username",value);    break;case "channel":  settings.setString("channel",value);break;case "connect":settings.setBoolean("connectOnStartup",true);break;case "token":if (!value.isEmpty()) {if (settings.getBoolean("allowTokenOverride") || settings.getString("token").isEmpty() || settings.getBoolean("foreignToken")) {settings.setString("token",value);settings.setBoolean("foreignToken",true);}}settings.setBoolean("usePassword",false);break;case "password":settings.setString("password",value);settings.setBoolean("usePassword",true);break;case "ds":settings.setBoolean("dontSaveSettings",true);break;case "server":settings.setString("server",value);break;case "port":settings.setString("port",value);break;case "single":LOGGER.info("Single instance (port: " + (value.isEmpty() ? "default" : value) + ")");break;}if (key.startsWith("set:") && key.length() > 4) {LOGGER.info("Setting commandline setting: " + settings.setTextual(key.substring(4) + " " + value));}}}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public String post(Context context,String url,Header[] headers,RequestParams params,String contentType) throws HttpException {  HttpEntityEnclosingRequestBase request=new HttpPost(url);  if (params != null)   request.setEntity(paramsToEntity(params));  if (headers != null)   request.setHeaders(headers);  return sendRequest(httpClient,httpContext,request,contentType,context);}  }
class C{  @Override public void connectionStateChanged(State state){  log.info("Property info connection state changed to {}",state);  if (state.equals(State.CONNECTED)) {    log.info("Curator (re)connected. Waking up the property manager...");    wakeup();  }}  }
class C{  private Symbol enumConstant(JCTree tree,Type enumType){  if (!tree.hasTag(IDENT)) {    log.error(tree.pos(),"enum.label.must.be.unqualified.enum");    return syms.errSymbol;  }  JCIdent ident=(JCIdent)tree;  Name name=ident.name;  for (Scope.Entry e=enumType.tsym.members().lookup(name); e.scope != null; e=e.next()) {    if (e.sym.kind == VAR) {      Symbol s=ident.sym=e.sym;      ((VarSymbol)s).getConstValue();      ident.type=s.type;      return ((s.flags_field & Flags.ENUM) == 0) ? null : s;    }  }  return null;}  }
class C{  public void clear(){  int currentCount=threadCounter.decrementAndGet();  if (log.isLoggable(Level.FINEST)) {    log.finest("Clear: Disassociate Thread from FragmentBuilder(1): current thread count=" + currentCount);synchronized (threadNames) {      threadNames.remove(Thread.currentThread().getName());    }  }  FragmentBuilder currentBuilder=builders.get();  if (currentBuilder != null) {    currentBuilder.decrementThreadCount();  }  builders.remove();}  }
class C{  public static String numberToString(Number number) throws JSONException {  if (number == null) {    throw new JSONException("Null pointer");  }  testValidity(number);  String string=number.toString();  if (string.indexOf('.') > 0 && string.indexOf('e') < 0 && string.indexOf('E') < 0) {    while (string.endsWith("0")) {      string=string.substring(0,string.length() - 1);    }    if (string.endsWith(".")) {      string=string.substring(0,string.length() - 1);    }  }  return string;}  }
class C{  public void awaitReady() throws Exception {  int i=60;  while (i-- > 0) {    HttpNfcLeaseState state=getState();    if (state.equals(HttpNfcLeaseState.ERROR)) {      Exception leaseError=this.get.entityProp(this.nfcLease,PROP_ERROR);      logger.log(Level.WARNING,"nfcLease error: " + leaseError.getMessage(),leaseError);      throw leaseError;    }    if (state.equals(HttpNfcLeaseState.READY)) {      return;    }    logger.log(Level.FINEST,"Waiting for nfcLease" + VimUtils.convertMoRefToString(this.nfcLease),state);    Thread.sleep(LEASE_READY_RETRY_MILLIS);  }  throw new IllegalStateException("Lease not ready within configured timeout");}  }
class C{  private Map<Byte,LongList> pickTopSocialProofs(SmallArrayBasedLongToDoubleMap[] socialProofs,byte[] validSocialProofs,int maxSocialProofSize){  Map<Byte,LongList> results=new HashMap<Byte,LongList>();  int length=validSocialProofs.length;  for (int i=0; i < length; i++) {    SmallArrayBasedLongToDoubleMap socialProof=socialProofs[validSocialProofs[i]];    if (socialProof != null) {      if (socialProof.size() > 1) {        socialProof.sort();      }      socialProof.trim(maxSocialProofSize);      results.put((byte)i,new LongArrayList(socialProof.keys()));    }  }  return results;}  }
class C{  public boolean isExists(){  return getResult.isExists();}  }
class C{  private static void decodeTextCompaction(int[] textCompactionData,int[] byteCompactionData,int length,StringBuilder result){  Mode subMode=Mode.ALPHA;  Mode priorToShiftMode=Mode.ALPHA;  int i=0;  while (i < length) {    int subModeCh=textCompactionData[i];    char ch=0;switch (subMode) {case ALPHA:      if (subModeCh < 26) {        ch=(char)('A' + subModeCh);      } else {        if (subModeCh == 26) {          ch=' ';        } else         if (subModeCh == LL) {          subMode=Mode.LOWER;        } else         if (subModeCh == ML) {          subMode=Mode.MIXED;        } else         if (subModeCh == PS) {          priorToShiftMode=subMode;          subMode=Mode.PUNCT_SHIFT;        } else         if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {          result.append((char)byteCompactionData[i]);        } else         if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {          subMode=Mode.ALPHA;        }      }    break;case LOWER:  if (subModeCh < 26) {    ch=(char)('a' + subModeCh);  } else {    if (subModeCh == 26) {      ch=' ';    } else     if (subModeCh == AS) {      priorToShiftMode=subMode;      subMode=Mode.ALPHA_SHIFT;    } else     if (subModeCh == ML) {      subMode=Mode.MIXED;    } else     if (subModeCh == PS) {      priorToShiftMode=subMode;      subMode=Mode.PUNCT_SHIFT;    } else     if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {      result.append((char)byteCompactionData[i]);    } else     if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {      subMode=Mode.ALPHA;    }  }break;case MIXED:if (subModeCh < PL) {ch=MIXED_CHARS[subModeCh];} else {if (subModeCh == PL) {  subMode=Mode.PUNCT;} else if (subModeCh == 26) {  ch=' ';} else if (subModeCh == LL) {  subMode=Mode.LOWER;} else if (subModeCh == AL) {  subMode=Mode.ALPHA;} else if (subModeCh == PS) {  priorToShiftMode=subMode;  subMode=Mode.PUNCT_SHIFT;} else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {  result.append((char)byteCompactionData[i]);} else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {  subMode=Mode.ALPHA;}}break;case PUNCT:if (subModeCh < PAL) {ch=PUNCT_CHARS[subModeCh];} else {if (subModeCh == PAL) {subMode=Mode.ALPHA;} else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {result.append((char)byteCompactionData[i]);} else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {subMode=Mode.ALPHA;}}break;case ALPHA_SHIFT:subMode=priorToShiftMode;if (subModeCh < 26) {ch=(char)('A' + subModeCh);} else {if (subModeCh == 26) {ch=' ';} else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {subMode=Mode.ALPHA;}}break;case PUNCT_SHIFT:subMode=priorToShiftMode;if (subModeCh < PAL) {ch=PUNCT_CHARS[subModeCh];} else {if (subModeCh == PAL) {subMode=Mode.ALPHA;} else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {result.append((char)byteCompactionData[i]);} else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {subMode=Mode.ALPHA;}}break;}if (ch != 0) {result.append(ch);}i++;}}  }
class C{  public void testNumeric(){  Instances icopy=new Instances(m_Instances);  try {    ((RemoveFrequentValues)m_Filter).setAttributeIndex(Integer.toString(indexNumeric + 1));    m_Filter.setInputFormat(icopy);    fail("Should have thrown an exception selecting on a NUMERIC attribute!");  } catch (  Exception ex) {  }}  }
class C{  public ChoiceItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  private void init(){  for (  School s : schools)   s.closed=false;  if (reInitHouseholds) {    for (    School s : schools)     s.students.clear();    createHouseholds();    createStudents();  } else {    for (    Student s : students) {      s.status=Status.SUSCEPTIBLE;      s.homebound=false;      s.timeSinceInfected=0;    }  }}  }
class C{  public static InetSocketAddress resolve(final String desc,final int defaultPort){  final InetSocketAddress addr=parse(desc,defaultPort);  if (addr.getAddress() != null && addr.getAddress().isAnyLocalAddress()) {    return addr;  }  try {    final InetAddress host=InetAddress.getByName(addr.getHostName());    return new InetSocketAddress(host,addr.getPort());  } catch (  UnknownHostException e) {    throw new IllegalArgumentException("unknown host: " + desc,e);  }}  }
class C{  private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  unitsInUse=bits.length;  recalculateUnitsInUse();}  }
class C{  public SQLException(String theReason,String theSQLState,int theErrorCode,Throwable theCause){  this(theReason,theSQLState,theCause);  vendorCode=theErrorCode;}  }
class C{  public ToParser(String to){  super(to);}  }
class C{  protected void preprocessSymbol(Symbol s){  symbolPreprocessor.visit(s,null);}  }
class C{  public List<GenericEntry> retrieveAllUsers() throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  return retrieveAllPages(new URL("https://apps-apis.google.com/a/feeds/user/2.0/" + domain));}  }
class C{  public static boolean equals(Object[] array1,Object[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    Object e1=array1[i], e2=array2[i];    if (!(e1 == null ? e2 == null : e1.equals(e2))) {      return false;    }  }  return true;}  }
class C{  public void testBitCountZero(){  BigInteger aNumber=new BigInteger("0");  assertEquals(0,aNumber.bitCount());}  }
class C{  public static <T>T invoke(final Object obj,final String methodName){  return invoke(obj,methodName,(Class<?>[])null,(Object[])null);}  }
class C{  public RecoveryResponse recoverToTarget(){  final Engine engine=shard.engine();  assert engine.getTranslog() != null : "translog must not be null";  try (Translog.View translogView=engine.getTranslog().newView()){    logger.trace("captured translog id [{}] for recovery",translogView.minTranslogGeneration());    final SnapshotIndexCommit phase1Snapshot;    try {      phase1Snapshot=shard.snapshotIndex(false);    } catch (    Throwable e) {      IOUtils.closeWhileHandlingException(translogView);      throw new RecoveryEngineException(shard.shardId(),1,"Snapshot failed",e);    }    try {      phase1(phase1Snapshot,translogView);    } catch (    Throwable e) {      throw new RecoveryEngineException(shard.shardId(),1,"phase1 failed",e);    } finally {      Releasables.closeWhileHandlingException(phase1Snapshot);    }    logger.trace("snapshot translog for recovery. current size is [{}]",translogView.totalOperations());    try (Translog.Snapshot phase2Snapshot=translogView.snapshot()){      phase2(phase2Snapshot);    } catch (    Throwable e) {      throw new RecoveryEngineException(shard.shardId(),2,"phase2 failed",e);    }    finalizeRecovery();  }   return response;}  }
class C{  public void disableDashedLine(){  mDashPathEffect=null;}  }
class C{  private ParsedViewDetail deflate(View view){  ByteArrayOutputStream os=new ByteArrayOutputStream();  try {    mViewHierarchy.deflate(view,os);    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();    DocumentBuilder documentBuilder=factory.newDocumentBuilder();    Document doc=documentBuilder.parse(new ByteArrayInputStream(os.toByteArray()));    Element root=(Element)doc.getFirstChild();    return convertToNode(root);  } catch (  SAXException e) {    throw new RuntimeException(e);  }catch (  ParserConfigurationException e) {    throw new RuntimeException(e);  }catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public CopyArguments(Object destination,ReorgExecutionLog log){  Assert.isNotNull(destination);  Assert.isNotNull(log);  fDestination=destination;  fLog=log;}  }
class C{  public boolean isGmtOffsetDefined(){  return m_isGmtOffsetDefined;}  }
class C{  public void useNoPriors(){  m_NoPriors=true;}  }
class C{  private void adjustStack(int size,boolean mayClobber){  final boolean debug=false;  if (size != 0) {    if (mayClobber) {switch (size >> LG_WORDSIZE) {case -2:        if (debug) {          asm.emitPUSH_Imm(0xFA1FACE);          asm.emitPUSH_Imm(0xFA2FACE);        } else {          asm.emitPUSH_Reg(EAX);          asm.emitPUSH_Reg(EAX);        }      return;case -1:    if (debug) {      asm.emitPUSH_Imm(0xFA3FACE);    } else {      asm.emitPUSH_Reg(EAX);    }  return;case 1:asm.emitPOP_Reg(S1);if (debug) {asm.emitMOV_Reg_Imm(S1,0xFA4FACE);}return;case 2:asm.emitPOP_Reg(S1);asm.emitPOP_Reg(S1);if (debug) {asm.emitMOV_Reg_Imm(S1,0xFA5FACE);}return;}}if (VM.BuildFor32Addr) {asm.emitADD_Reg_Imm(SP,size);} else {asm.emitADD_Reg_Imm_Quad(SP,size);}}}  }
class C{  private final Node<V>[] initTable(){  Node<V>[] tab;  int sc;  while ((tab=table) == null || tab.length == 0) {    if ((sc=sizeCtl) < 0)     Thread.yield(); else     if (U.compareAndSwapInt(this,SIZECTL,sc,-1)) {      try {        if ((tab=table) == null || tab.length == 0) {          int n=(sc > 0) ? sc : DEFAULT_CAPACITY;          @SuppressWarnings("unchecked") Node<V>[] nt=(Node<V>[])new Node<?>[n];          table=tab=nt;          sc=n - (n >>> 2);        }      }  finally {        sizeCtl=sc;      }      break;    }  }  return tab;}  }
class C{  public void writeTo(final OutputStream out,MultipartEntity.CallBackInfo callBackInfo) throws IOException {  doWriteTo(this.mode,out,callBackInfo,true);}  }
class C{  public static DoubleList view(double[] array,int length){  if (length > array.length || length < 0)   throw new IllegalArgumentException("length must be non-negative and no more than the size of the array(" + array.length + "), not "+ length);  return new DoubleList(array,length);}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();}  }
class C{  @Override protected void doRender(KMLTraversalContext tc,DrawContext dc){  List<KMLRenderable> rs=this.getRenderables();  if (rs != null) {    for (    KMLRenderable r : rs) {      r.render(tc,dc);    }  }  this.renderBalloon(tc,dc);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatadeletedatanomodificationallowederrEE.class,args);}  }
class C{  private Reminders(){}  }
class C{  public static ByteList Packages(ByteList bytes,ObjectList<ByteList> scripts){  for (  ByteList list : scripts) {    bytes.addAll(list);  }  return bytes;}  }
class C{  public synchronized void resume(){  if (updateRunnableQueue.getQueueState() != RunnableQueue.RUNNING) {    updateRunnableQueue.resumeExecution();  }}  }
class C{  public final int lastIndexOf(int elem){  for (int i=(m_firstFree - 1); i >= 0; i--) {    if (m_map[i] == elem)     return i;  }  return java.lang.Integer.MIN_VALUE;}  }
class C{  @Override public void resolve(DeserializationConfig config,DeserializerProvider provider) throws JsonMappingException {  if (_valueInstantiator.canCreateUsingDelegate()) {    JavaType delegateType=_valueInstantiator.getDelegateType();    if (delegateType == null) {      throw new IllegalArgumentException("Invalid delegate-creator definition for " + _collectionType + ": value instantiator ("+ _valueInstantiator.getClass().getName()+ ") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");    }    AnnotatedWithParams delegateCreator=_valueInstantiator.getDelegateCreator();    BeanProperty.Std property=new BeanProperty.Std(null,delegateType,null,delegateCreator);    _delegateDeserializer=findDeserializer(config,provider,delegateType,property);  }}  }
class C{  DhcpNakPacket(int transId,InetAddress clientIp,InetAddress yourIp,InetAddress nextIp,InetAddress relayIp,byte[] clientMac){  super(transId,Inet4Address.ANY,Inet4Address.ANY,nextIp,relayIp,clientMac,false);}  }
class C{  public static List<ModuleSpec> expandSpecWildcards(List<File> dirs,List<ModuleSpec> modules,Backend forBackend){  List<ModuleSpec> result=new ArrayList<ModuleSpec>(modules.size());  for (  ModuleSpec spec : modules) {    List<String> names=new ArrayList<String>();    expandWildcard(names,dirs,spec.getName(),forBackend);    for (    String name : names) {      result.add(new ModuleSpec(name,spec.getVersion()));    }  }  return result;}  }
class C{  public void draw(Graphics g,Shape s){  if (decorations.isEmpty())   return;  PathIterator pi=s.getPathIterator(null,FLATNESS);  int segType;  double[] segCoords=new double[6];  LinkedList<Point2D> points=new LinkedList<Point2D>();  Point2D firstPoint=null;  Point2D point;  do {    segType=pi.currentSegment(segCoords);    point=new Point2D.Double(segCoords[0],segCoords[1]);switch (segType) {case PathIterator.SEG_MOVETO:      if (firstPoint == null)       firstPoint=point;    if (!points.isEmpty()) {      draw(g,points);    }  points.clear();points.add(point);break;case PathIterator.SEG_LINETO:points.add(point);break;case PathIterator.SEG_CLOSE:points.add(firstPoint);break;}pi.next();} while (!pi.isDone());if (!points.isEmpty()) {draw(g,points);}}  }
class C{  public UpdateRequest type(String type){  this.type=type;  return this;}  }
class C{  ChangeTaskProgressRuler(Task task,TaskChartModelFacade taskChartFacade){  myTask=task;  myTaskChartFacade=taskChartFacade;  float totalDuration=task.getDuration().getValue();  int visiblePixels=-1;  float accumulatedDuration=0f;  List<Rectangle> taskRectangles=myTaskChartFacade.getTaskRectangles(myTask);  myMinPx=taskRectangles.get(0).getLeftX();  myPixel2progress.put(myMinPx,0);  for (  Rectangle r : taskRectangles) {    TaskActivity activity=(TaskActivity)r.getModelObject();    if (r.isVisible()) {      visiblePixels=r.getRightX();    }    if (activity.getIntensity() > 0f) {      accumulatedDuration+=activity.getDuration().getValue();    }    myPixel2progress.put(visiblePixels,(int)(accumulatedDuration * 100 / totalDuration));  }}  }
class C{  @Override public Object[] next(){  return currentchunk.next();}  }
class C{  private static boolean isMultiBlockLookup(JavaPairRDD<?,?> in,MatrixCharacteristics mcIn,MatrixCharacteristics mcOut,IndexRange ixrange){  return SparkUtils.isHashPartitioned(in) && OptimizerUtils.estimatePartitionedSizeExactSparsity(mcIn) > SparkExecutionContext.getDataMemoryBudget(true,true) && OptimizerUtils.isIndexingRangeBlockAligned(ixrange,mcIn) && OptimizerUtils.estimateSize(mcOut) < OptimizerUtils.getLocalMemBudget() / 2;}  }
class C{  protected final JButton popupButton(){  return searchField.getPopupButton();}  }
class C{  public AddressbookEntry(AddressbookEntry other,Set<String> categories){  this.name=StringUtil.toLowerCase(other.getName());  this.categories=createCategoriesSet(other.getCategories());  this.categories.addAll(createCategoriesSet(categories));}  }
class C{  public static WarArchive open(File f) throws IOException {  return new DefaultWarArchive(f.getAbsolutePath());}  }
class C{  public void receive(float[] currentFFTBins){  if (Float.isInfinite(currentFFTBins[0]) || Float.isNaN(currentFFTBins[0])) {    currentFFTBins=new float[currentFFTBins.length];  }  if (mDisplayFFTBins == null || mDisplayFFTBins.length != currentFFTBins.length) {    mDisplayFFTBins=currentFFTBins;  }  float[] smoothedBins=mSmoothingFilter.filter(currentFFTBins);  if (mAveraging > 1) {    float gain=1.0f / (float)mAveraging;    for (int x=0; x < mDisplayFFTBins.length; x++) {      mDisplayFFTBins[x]+=(smoothedBins[x] - mDisplayFFTBins[x]) * gain;    }  } else {    mDisplayFFTBins=smoothedBins;  }  repaint();}  }
class C{  public int copyToBuffer(char[] buf,int off,int len){  int numberOfCharactersToRead=bufferedCharCount();  if (numberOfCharactersToRead > len) {    numberOfCharactersToRead=len;  }  source.getChars(readPosition,readPosition + numberOfCharactersToRead,buf,off);  readPosition+=numberOfCharactersToRead;  return numberOfCharactersToRead;}  }
class C{  public void fireNeuronRemoved(final Neuron deleted){  for (  NeuronListener listener : neuronListeners) {    listener.neuronRemoved(new NetworkEvent<Neuron>(this,deleted));  }}  }
class C{  public boolean hasVarFields(){  return this.hasVarFields;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Builder put(String setting,long value,ByteSizeUnit sizeUnit){  put(setting,sizeUnit.toBytes(value) + "b");  return this;}  }
class C{  public synchronized void incrementCounter(Type type){  long currentCount=0;  if (counters.get(type) != null) {    currentCount=counters.get(type);  }  counters.put(type,currentCount + 1);}  }
class C{  public CBookmarkTableModel(final BackEndDebuggerProvider debuggerProvider){  m_debuggerProvider=Preconditions.checkNotNull(debuggerProvider,"IE01325: Bookmarks manager can't be null");  initializeListeners();}  }
class C{  private void ensureCacheStarted(){  if (_basePathCache == null) {synchronized (this) {      if (_basePathCache == null) {        try {          _basePathCache=new PathChildrenCache(_zkClient,_basePath,false);          _basePathCache.start();        } catch (        Exception ex) {          _basePathCache=null;          _log.error(String.format("%s: error initializing cache; will re-attempt",_basePath),ex);        }      }    }  }}  }
class C{  public void updateStrings() throws ContactManagerException {  ArrayList<ContentProviderOperation> ops=new ArrayList<>();  ContentValues values=new ContentValues();  values.put(StructuredName.DISPLAY_NAME,mContext.getString(R.string.rcs_core_my_profile));  ops.add(ContentProviderOperation.newUpdate(Data.CONTENT_URI).withSelection(SEL_RAW_CONTACT_WITH_MIMETYPE,new String[]{Long.toString(getRawContactIdForMe()),StructuredName.DISPLAY_NAME}).withValues(values).build());  values.clear();  values.put(Data.DATA2,getMimeTypeDescriptionSummary(MIMETYPE_CAPABILITY_FILE_TRANSFER));  values.put(Data.DATA3,getMimeTypeDescriptionDetails(MIMETYPE_CAPABILITY_FILE_TRANSFER));  ops.add(ContentProviderOperation.newUpdate(Data.CONTENT_URI).withSelection(SEL_DATA_MIMETYPE_CAPABILITY_FILE_TRANSFER,null).withValues(values).build());  values.clear();  values.put(Data.DATA2,getMimeTypeDescriptionSummary(MIMETYPE_CAPABILITY_IM_SESSION));  values.put(Data.DATA3,getMimeTypeDescriptionDetails(MIMETYPE_CAPABILITY_IM_SESSION));  ops.add(ContentProviderOperation.newUpdate(Data.CONTENT_URI).withSelection(SEL_DATA_MIMETYPE_CAPABILITY_IM_SESSION,null).withValues(values).build());  values.clear();  values.put(Data.DATA2,getMimeTypeDescriptionSummary(MIMETYPE_CAPABILITY_IMAGE_SHARE));  values.put(Data.DATA3,getMimeTypeDescriptionDetails(MIMETYPE_CAPABILITY_IMAGE_SHARE));  ops.add(ContentProviderOperation.newUpdate(Data.CONTENT_URI).withSelection(SEL_DATA_MIMETYPE_CAPABILITY_IMAGE_SHARING,null).withValues(values).build());  values.clear();  values.put(Data.DATA2,getMimeTypeDescriptionSummary(MIMETYPE_CAPABILITY_VIDEO_SHARE));  values.put(Data.DATA3,getMimeTypeDescriptionDetails(MIMETYPE_CAPABILITY_VIDEO_SHARE));  ops.add(ContentProviderOperation.newUpdate(Data.CONTENT_URI).withSelection(SEL_DATA_MIMETYPE_CAPABILITY_VIDEO_SHARING,null).withValues(values).build());  values.clear();  values.put(Data.DATA2,getMimeTypeDescriptionSummary(MIMETYPE_CAPABILITY_IP_VOICE_CALL));  values.put(Data.DATA3,getMimeTypeDescriptionDetails(MIMETYPE_CAPABILITY_IP_VOICE_CALL));  ops.add(ContentProviderOperation.newUpdate(Data.CONTENT_URI).withSelection(SEL_DATA_MIMETYPE_CAPABILITY_IP_VOICE_CALL,null).withValues(values).build());  values.clear();  values.put(Data.DATA2,getMimeTypeDescriptionSummary(MIMETYPE_CAPABILITY_IP_VIDEO_CALL));  values.put(Data.DATA3,getMimeTypeDescriptionDetails(MIMETYPE_CAPABILITY_IP_VIDEO_CALL));  ops.add(ContentProviderOperation.newUpdate(Data.CONTENT_URI).withSelection(SEL_DATA_MIMETYPE_CAPABILITY_IP_VIDEO_CALL,null).withValues(values).build());  values.clear();  values.put(Data.DATA3,getMimeTypeDescriptionDetails(MIMETYPE_CAPABILITY_EXTENSIONS));  ops.add(ContentProviderOperation.newUpdate(Data.CONTENT_URI).withSelection(SEL_DATA_MIMETYPE_CAPABILITY_EXTENSIONS,null).withValues(values).build());  if (!ops.isEmpty()) {    try {      mContentResolver.applyBatch(ContactsContract.AUTHORITY,ops);    } catch (    RemoteException|OperationApplicationException e) {      throw new ContactManagerException("Unable to apply batch updates !",e);    }  }}  }
class C{  public void inserir(Setor setor){  try {    String sql="INSERT INTO  tb_setor (nome, descricao, fk_orgao) VALUES (?, ?, ?) ";    stm=conector.prepareStatement(sql);    stm.setString(1,setor.getNome());    stm.setString(2,setor.getDescricao());    stm.setInt(3,setor.getOrganizacao().getId());    stm.executeUpdate();    stm.close();  } catch (  SQLException ex) {    Mensagem.erro("Erro ao inserir setor na base de dados! \n" + ex);  }}  }
class C{  public Encirclement(String sidc){  super(sidc);  this.wavePolygon=this.createPolygon();}  }
class C{  public ConfigPaymentPanelGeneric(){  initComponents();}  }
class C{  public Follower(Type type,String name,String display_name,long time,boolean refollow,boolean newFollower){  this.type=type;  this.name=name;  this.display_name=display_name;  this.time=time;  this.refollow=refollow;  this.newFollower=newFollower;}  }
class C{  public area removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>();  newVector.addElement(new Option("\tOutput detailed info for nominal attributes","D",0,"-D"));  return newVector.elements();}  }
class C{  public DeterministicKey(ImmutableList<ChildNumber> childNumberPath,byte[] chainCode,KeyCrypter crypter,LazyECPoint pub,EncryptedData priv,@Nullable DeterministicKey parent){  this(childNumberPath,chainCode,pub,null,parent);  this.encryptedPrivateKey=checkNotNull(priv);  this.keyCrypter=checkNotNull(crypter);}  }
class C{  @POST @Consumes({MediaType.TEXT_PLAIN,MediaType.TEXT_HTML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_JSON}) public String addNewClientImage(@PathParam("entity") final String entityName,@PathParam("entityId") final Long entityId,final String jsonRequestBody){  validateEntityTypeforImage(entityName);  final Base64EncodedImage base64EncodedImage=ContentRepositoryUtils.extractImageFromDataURL(jsonRequestBody);  final CommandProcessingResult result=this.imageWritePlatformService.saveOrUpdateImage(entityName,entityId,base64EncodedImage);  return this.toApiJsonSerializer.serialize(result);}  }
class C{  public static boolean performNavigationByDOMObject(AccessibilityNodeInfoCompat node,int direction){  final int action=(direction == DIRECTION_FORWARD) ? AccessibilityNodeInfoCompat.ACTION_NEXT_HTML_ELEMENT : AccessibilityNodeInfoCompat.ACTION_PREVIOUS_HTML_ELEMENT;  return PerformActionUtils.performAction(node,action);}  }
class C{  protected void sendMessage() throws JMSException {  Session sess=this.producerConnection.createSession(false,Session.AUTO_ACKNOWLEDGE);  MessageProducer prod=sess.createProducer(queue);  prod.send(sess.createTextMessage("X-TEST-MSG-X"));  prod.close();  sess.close();}  }
class C{  public boolean delistResource(XAResource xaRes,int flag) throws IllegalStateException, SystemException {  gtx=tm.getGlobalTransaction();  if (gtx == null) {    String exception=LocalizedStrings.TransactionImpl_TRANSACTIONIMPL_DELISTRESOURCE_NO_GLOBAL_TRANSACTION_EXISTS.toLocalizedString();    LogWriterI18n writer=TransactionUtils.getLogWriterI18n();    if (writer.fineEnabled())     writer.fine(exception);    throw new SystemException(exception);  }  return gtx.delistResource(xaRes,flag);}  }
class C{  @SuppressWarnings("UnaryPlus") public void testMappingToNodes(){  String n1="node #1";  String n2="node #2";  String n3="node #3";  String n4="node #4";  List<String> nodes=Arrays.asList(n1,n2,n3,n4);  GridClientConsistentHash<String> hash=new GridClientConsistentHash<>();  for (  String node : nodes)   hash.addNode(node,5);  Map<Object,String> data=new LinkedHashMap<>();  data.put("",n1);  data.put("asdf",n3);  data.put("224ea4cd-f449-4dcb-869a-5317c63bd619",n2);  data.put("fdc9ec54-ff53-4fdb-8239-5a3ac1fb31bd",n4);  data.put("0f9c9b94-02ae-45a6-9d5c-a066dbdf2636",n1);  data.put("d8f1f916-4357-4cfe-a7df-49d4721690bf",n3);  data.put("c77ffeae-78a1-4ee6-a0fd-8d197a794412",n4);  data.put("35de9f21-3c9b-4f4a-a7d5-3e2c6cb01564",n4);  data.put("d67eb652-4e76-47fb-ad4e-cd902d9b868a",n4);  data.put(0,n1);  data.put(1,n4);  data.put(12,n3);  data.put(123,n3);  data.put(1234,n3);  data.put(12345,n4);  data.put(123456,n3);  data.put(1234567,n4);  data.put(12345678,n4);  data.put(123456789,n4);  data.put(1234567890,n3);  data.put(1234567890L,n3);  data.put(12345678901L,n4);  data.put(123456789012L,n2);  data.put(1234567890123L,n4);  data.put(12345678901234L,n1);  data.put(123456789012345L,n1);  data.put(1234567890123456L,n3);  data.put(-23456789012345L,n2);  data.put(-2345678901234L,n1);  data.put(-234567890123L,n4);  data.put(-23456789012L,n3);  data.put(-2345678901L,n3);  data.put(-234567890L,n1);  data.put(-234567890,n4);  data.put(-23456789,n4);  data.put(-2345678,n4);  data.put(-234567,n4);  data.put(-23456,n4);  data.put(-2345,n1);  data.put(-234,n4);  data.put(-23,n3);  data.put(-2,n4);  data.put(0x80000000,n2);  data.put(0x7fffffff,n4);  data.put(0x8000000000000000L,n2);  data.put(0x7fffffffffffffffL,n2);  data.put(+1.1,n1);  data.put(-10.01,n3);  data.put(+100.001,n3);  data.put(-1000.0001,n4);  data.put(+1.7976931348623157E+308,n4);  data.put(-1.7976931348623157E+308,n4);  data.put(+4.9E-324,n4);  data.put(-4.9E-324,n3);  for (  Map.Entry<Object,String> entry : data.entrySet())   assertEquals("Validate key '" + entry.getKey() + "'.",entry.getValue(),hash.node(entry.getKey()));  for (  Map.Entry<Object,String> entry : data.entrySet())   assertEquals("Validate key '" + entry.getKey() + "'.",entry.getValue(),hash.node(entry.getKey(),nodes));  nodes=new ArrayList<>(nodes);  Collections.reverse(nodes);  hash=new GridClientConsistentHash<>();  for (  String node : nodes)   hash.addNode(node,5);  for (  Map.Entry<Object,String> entry : data.entrySet())   assertEquals("Validate key '" + entry.getKey() + "'.",entry.getValue(),hash.node(entry.getKey()));  for (  Map.Entry<Object,String> entry : data.entrySet())   assertEquals("Validate key '" + entry.getKey() + "'.",entry.getValue(),hash.node(entry.getKey(),nodes));}  }
class C{  protected DoStatementImpl(){  super();}  }
class C{  public List<NamedRelatedResourceRep> listByVolume(URI volumeId){  return getList(getByVolumeUrl(),volumeId);}  }
class C{  public ImageSprite(final Image image,final Object reference){  this.image=image;  this.reference=reference;}  }
class C{  public static byte[] readData(final URL url) throws IOException {  try (InputStream input=url.openStream()){    return readData(input);  } }  }
class C{  private String extractString(String key,CSVRecord record,String defaultValue) throws FormatException {  String toReturn=defaultValue;  if (record.isMapped(key)) {    toReturn=record.get(key);  } else {    if (defaultValue == null) {      throw new FormatException("Field not used but expected: " + key);    }  }  return toReturn;}  }
class C{  public static String flattenXML(String text){  return stripXMLEntities(stripXMLTags(text));}  }
class C{  public static final void writeExceptionToParcel(Parcel reply,Exception e){  int code=0;  boolean logException=true;  if (e instanceof FileNotFoundException) {    code=1;    logException=false;  } else   if (e instanceof IllegalArgumentException) {    code=2;  } else   if (e instanceof UnsupportedOperationException) {    code=3;  } else   if (e instanceof SQLiteAbortException) {    code=4;  } else   if (e instanceof SQLiteConstraintException) {    code=5;  } else   if (e instanceof SQLiteDatabaseCorruptException) {    code=6;  } else   if (e instanceof SQLiteFullException) {    code=7;  } else   if (e instanceof SQLiteDiskIOException) {    code=8;  } else   if (e instanceof SQLiteException) {    code=9;  } else   if (e instanceof OperationApplicationException) {    code=10;  } else   if (e instanceof OperationCanceledException) {    code=11;    logException=false;  } else {    reply.writeException(e);    Log.e(TAG,"Writing exception to parcel",e);    return;  }  reply.writeInt(code);  reply.writeString(e.getMessage());  if (logException) {    Log.e(TAG,"Writing exception to parcel",e);  }}  }
class C{  @Field(27) public Pointer<Pointer<IUnknown>> ppunkVal(){  return this.io.getPointerField(this,27);}  }
class C{  @Override public void close(){  flush();}  }
class C{  private boolean updateStoragePortVirtualArrays(StoragePort storagePort,VirtualArrayAssignmentChanges varrayAssignmentChanges){  boolean varraysForPortUpdated=false;  Set<String> varraysAddedToPort=new HashSet<String>();  Set<String> varraysRemovedFromPort=new HashSet<String>();  if (varrayAssignmentChanges != null) {    _log.info("Update request has virtual array assignment changes for storage port {}",storagePort.getId());    verifyAssignmentChanges(storagePort,varrayAssignmentChanges);    _log.info("Requested virtual array assignment changes verified.");    VirtualArrayAssignments addAssignments=varrayAssignmentChanges.getAdd();    if (addAssignments != null) {      Set<String> addVArrays=addAssignments.getVarrays();      if ((addVArrays != null) && (!addVArrays.isEmpty())) {        _log.info("Request specifies virtual arrays to be added.");        VirtualArrayService.checkVirtualArrayURIs(addVArrays,_dbClient);        StringSet currentAssignments=storagePort.getAssignedVirtualArrays();        Iterator<String> addVArraysIter=addVArrays.iterator();        while (addVArraysIter.hasNext()) {          String addVArrayId=addVArraysIter.next();          if ((currentAssignments != null) && (currentAssignments.contains(addVArrayId))) {            _log.info("Storage port already assigned to virtual array {}",addVArrayId);            continue;          }          varraysAddedToPort.add(addVArrayId);          varraysForPortUpdated=true;          _log.info("Storage port will be assigned to virtual array {}",addVArrayId);        }      }    }    VirtualArrayAssignments removeAssignments=varrayAssignmentChanges.getRemove();    if (removeAssignments != null) {      Set<String> removeVArrays=removeAssignments.getVarrays();      if ((removeVArrays != null) && (!removeVArrays.isEmpty())) {        _log.info("Request specifies virtual arrays to be removed.");        VirtualArrayService.checkVirtualArrayURIs(removeVArrays,_dbClient);        StringSet currentAssignments=storagePort.getAssignedVirtualArrays();        Iterator<String> removeVArraysIter=removeVArrays.iterator();        while (removeVArraysIter.hasNext()) {          String removeVArrayId=removeVArraysIter.next();          if ((currentAssignments == null) || (!currentAssignments.contains(removeVArrayId))) {            _log.info("Storage port is not assigned to virtual array {}",removeVArrayId);            continue;          }          varraysRemovedFromPort.add(removeVArrayId);          varraysForPortUpdated=true;          _log.info("Storage port will be unassigned from virtual array {}",removeVArrayId);        }      }    }  }  if (varraysForPortUpdated) {    storagePort.addAssignedVirtualArrays(varraysAddedToPort);    storagePort.removeAssignedVirtualArrays(varraysRemovedFromPort);    verifyPortNoInUseInRemovedVarrays(storagePort);    _dbClient.updateAndReindexObject(storagePort);    URI storagePortNetworkURI=storagePort.getNetwork();    if (storagePortNetworkURI != null) {      Network storagePortNetwork=_dbClient.queryObject(Network.class,storagePortNetworkURI);      if (storagePortNetwork != null) {        if (!varraysRemovedFromPort.isEmpty()) {          NetworkAssociationHelper.updateConnectedVirtualArrays(storagePortNetwork,Collections.singletonList(storagePort),false,_dbClient);        } else         if (!varraysAddedToPort.isEmpty()) {          NetworkAssociationHelper.updateConnectedVirtualArrays(storagePortNetwork,Collections.singletonList(storagePort),true,_dbClient);        }      }    }  }  return varraysForPortUpdated;}  }
class C{  @SuppressWarnings("unused") public UnsupportedIO(DataflowRunner runner,Read.Unbounded<?> transform){  this.transform=transform;}  }
class C{  private static InternetAddress[] createAddresses(String[] addresses) throws AddressException {  List<InternetAddress> result=new ArrayList<>(addresses.length);  for (  String address : addresses) {    InternetAddress[] parsedAddresses=InternetAddress.parse(address);    result.addAll(Arrays.asList(parsedAddresses));  }  return result.toArray(new InternetAddress[result.size()]);}  }
class C{  public ReadStream(StreamImpl source){  this();  _readTime=0;  _source=source;  init(source);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildRockArea(zone);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  XYIntervalSeriesCollection clone=(XYIntervalSeriesCollection)super.clone();  int seriesCount=getSeriesCount();  clone.data=new java.util.ArrayList(seriesCount);  for (int i=0; i < this.data.size(); i++) {    clone.data.set(i,getSeries(i).clone());  }  return clone;}  }
class C{  public Object encode(Object pObject) throws EncoderException {  if (!(pObject instanceof java.lang.String)) {    throw new EncoderException("Parameter supplied to Metaphone encode is not of type java.lang.String");  }  return metaphone((String)pObject);}  }
class C{  public void copyToRaster(WritableRaster wr){  int tx0=getXTile(wr.getMinX());  int ty0=getYTile(wr.getMinY());  int tx1=getXTile(wr.getMinX() + wr.getWidth() - 1);  int ty1=getYTile(wr.getMinY() + wr.getHeight() - 1);  if (tx0 < minTileX)   tx0=minTileX;  if (ty0 < minTileY)   ty0=minTileY;  if (tx1 >= minTileX + numXTiles)   tx1=minTileX + numXTiles - 1;  if (ty1 >= minTileY + numYTiles)   ty1=minTileY + numYTiles - 1;  final boolean is_INT_PACK=GraphicsUtil.is_INT_PACK_Data(getSampleModel(),false);  for (int y=ty0; y <= ty1; y++)   for (int x=tx0; x <= tx1; x++) {    Raster r=getTile(x,y);    if (is_INT_PACK)     GraphicsUtil.copyData_INT_PACK(r,wr); else     GraphicsUtil.copyData_FALLBACK(r,wr);  }}  }
class C{  @SuppressWarnings("unchecked") public synchronized Object clone(){  AclEntryImpl cloned;  cloned=new AclEntryImpl(user);  cloned.permissionSet=(Vector<Permission>)permissionSet.clone();  cloned.negative=negative;  return cloned;}  }
class C{  public byte[] wrap(byte[] outgoing,int offset,int len) throws SaslException {  if (completed) {    throw new SaslException("EXTERNAL has no supported QOP");  } else {    throw new IllegalStateException("EXTERNAL authentication not completed");  }}  }
class C{  protected void selectRenderables(DrawContext dc){  if (dc == null) {    String message=Logging.getMessage("nullValue.DrawContextIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }}  }
class C{  public Signer createSigner(){  if (!this.hasPublicKey()) {    throw new CryptoException("in order to create a signer, an account must have a public key");  }  return new Signer(this.keyPair);}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  int[] numbers=new int[10];  System.out.print("Enter ten numbers: ");  for (int i=0; i < numbers.length; i++)   numbers[i]=input.nextInt();  reverse(numbers);  for (  int e : numbers) {    System.out.print(e + " ");  }  System.out.println();}  }
class C{  public static void assign(int[] n1,int n2[]){  int idx=n1.length - 1;  int i;  for (i=n2.length - 1; i >= 0; i--) {    n1[idx--]=n2[i];  }  while (idx > 0) {    n1[idx--]=0;  }}  }
class C{  private static void test1() throws Exception {  for (int i=0; i < PLAIN1.length; i++) {    String algo=KEY1.getAlgorithm();    int MAX_KEYSIZE=Cipher.getMaxAllowedKeyLength(algo);    if (KEY1.getEncoded().length > MAX_KEYSIZE) {      continue;    }    System.out.println("Running test1_" + i + " ("+ algo+ ")");    Cipher cipher=Cipher.getInstance(algo + "/CTS/NoPadding","SunJCE");    byte[] plainText=PLAIN1[i];    byte[] cipherText=CIPHER1[i];    cipher.init(Cipher.ENCRYPT_MODE,KEY1,IV1);    byte[] enc=cipher.doFinal(plainText);    if (Arrays.equals(cipherText,enc) == false) {      System.out.println("plain:  " + toString(plainText));      System.out.println("cipher: " + toString(cipherText));      System.out.println("actual: " + toString(enc));      throw new RuntimeException("Encryption failure for test " + i);    }    cipher.init(Cipher.DECRYPT_MODE,KEY1,IV1);    byte[] dec=cipher.doFinal(cipherText);    if (Arrays.equals(plainText,dec) == false) {      System.out.println("cipher: " + toString(cipherText));      System.out.println("plain:  " + toString(plainText));      System.out.println("actual: " + toString(enc));      throw new RuntimeException("Decryption failure for test " + i);    }  }}  }
class C{  public DPreferences(JFrame parent,boolean useCaCertificates,File caCertificatesFile,boolean useWinTrustedRootCertificates,boolean enableImportTrustedCertTrustCheck,boolean enableImportCaReplyTrustCheck,PasswordQualityConfig passwordQualityConfig,String defaultDN){  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);  this.useCaCertificates=useCaCertificates;  this.caCertificatesFile=caCertificatesFile;  this.useWinTrustRootCertificates=useWinTrustedRootCertificates;  this.enableImportTrustedCertTrustCheck=enableImportTrustedCertTrustCheck;  this.enableImportCaReplyTrustCheck=enableImportCaReplyTrustCheck;  this.passwordQualityConfig=passwordQualityConfig;  this.defaultDN=defaultDN;  initComponents();}  }
class C{  public ParticipatingExperiment participate(){  return sixpack.participate(baseExperiment);}  }
class C{  @Override public void onLoaderReset(Loader<Cursor> loader){  if (Global.debugEnabled) {    Log.i(Global.LOG_CONTEXT,mDebugPrefix + " onLoaderReset" + getDebugContext());  }  mLastVisiblePosition=mGalleryView.getLastVisiblePosition();  mAdapter.swapCursor(null);  mAdapter.notifyDataSetChanged();}  }
class C{  private static void sortCommutativeRegisterUses(IR ir){  for (Enumeration<Instruction> e=ir.forwardInstrEnumerator(); e.hasMoreElements(); ) {    Instruction s=e.nextElement();    if (Binary.conforms(s) && s.operator().isCommutative() && Binary.getVal1(s).isRegister()&& Binary.getVal2(s).isRegister()) {      RegisterOperand rop1=Binary.getVal1(s).asRegister();      RegisterOperand rop2=Binary.getVal2(s).asRegister();      if (rop1.getRegister().isSSA()) {        if (rop2.getRegister().isSSA()) {        } else {          Binary.setVal1(s,rop2);          Binary.setVal2(s,rop1);        }      } else       if (rop2.getRegister().isSSA()) {      } else {        if (rop1.getRegister().useCount > rop2.getRegister().useCount) {          Binary.setVal1(s,rop2);          Binary.setVal2(s,rop1);        }      }    }  }}  }
class C{  public ProblemModule(){  this(Status.class,MoreStatus.class);}  }
class C{  public final void invert(Matrix4f m1){  invertGeneral(m1);}  }
class C{  public void testBug21207() throws Exception {  this.pstmt=this.conn.prepareStatement("SELECT 1");  this.pstmt.close();  this.pstmt.toString();}  }
class C{  public JSONWriter(Writer w){  this.comma=false;  this.mode='i';  this.stack=new JSONObject[maxdepth];  this.top=0;  this.writer=w;}  }
class C{  public boolean contains(Object o){  return _indexes.containsKey(o);}  }
class C{  private static void conventionalPermutationTest(Map<String,List<InputProperties>> subjectToProps,Map<String,File> subjectToTgt,Set<String> subjectSet,List<List<Sequence<IString>>> referencesList) throws IOException {  List<String> imtTranslations=new ArrayList<>();  List<String> imtReferences=new ArrayList<>();  List<Integer> imtIds=new ArrayList<>();  List<String> peTranslations=new ArrayList<>();  List<String> peReferences=new ArrayList<>();  List<Integer> peIds=new ArrayList<>();  Map<Integer,List<String>> pooledTranslations=new HashMap<>();  List<String> references=new ArrayList<>();  for (  String subjectId : subjectSet) {    assert subjectToProps.containsKey(subjectId) : subjectId;    assert subjectToTgt.containsKey(subjectId) : subjectId;    List<InputProperties> inputProperties=subjectToProps.get(subjectId);    LineNumberReader reader=IOTools.getReaderFromFile(subjectToTgt.get(subjectId));    for (String line; (line=reader.readLine()) != null; ) {      int sourceId=reader.getLineNumber() - 1;      String genre=inputProperties.get(sourceId).containsKey(InputProperty.Domain) ? (String)inputProperties.get(sourceId).get(InputProperty.Domain) : DEFAULT_GENRE;      String refLine=referencesList.get(sourceId).get(0).toString();      if (references.size() <= referencesList.size()) {        references.add(refLine);      }switch (genre) {case "pe":        peTranslations.add(line.trim());      peReferences.add(refLine);    peIds.add(sourceId);  break;case "imt":imtTranslations.add(line.trim());imtReferences.add(refLine);imtIds.add(sourceId);break;default :System.err.printf("WARNING: Discarding line %d for user %s%n",sourceId,subjectId);continue;}if (!pooledTranslations.containsKey(sourceId)) {List<String> l=new ArrayList<>();pooledTranslations.put(sourceId,l);}pooledTranslations.get(sourceId).add(line.trim());}}final int imtSampleSize=imtReferences.size();final int peSampleSize=peReferences.size();double peScore=computeBLEU(peTranslations,peReferences);double imtScore=computeBLEU(imtTranslations,imtReferences);double observedDiff=imtScore - peScore;System.err.printf("observed: imt: %.4f pe: %.4f diff: %.4f%n",imtScore,peScore,observedDiff);Random random=new Random();int matchedOrExceededDiffs=0;System.err.print("Sampling..");for (int i=0; i < SAMPLES; i++) {if ((i % 50) == 0) System.err.printf(".");Map<Integer,List<String>> pTranslations=deepCopy(pooledTranslations);List<String> imtSampleTranslations=new ArrayList<>();List<String> peSampleTranslations=new ArrayList<>();for (int sourceId : peIds) {List<String> candidates=pTranslations.get(sourceId);assert candidates.size() > 0 : String.valueOf(sourceId);int idx=random.nextInt(candidates.size());peSampleTranslations.add(candidates.get(idx));candidates.remove(idx);}for (int sourceId : imtIds) {List<String> candidates=pTranslations.get(sourceId);assert candidates.size() > 0 : String.valueOf(sourceId);int idx=random.nextInt(candidates.size());imtSampleTranslations.add(candidates.get(idx));candidates.remove(idx);}assert peSampleTranslations.size() == peSampleSize;assert imtSampleTranslations.size() == imtSampleSize;double peSampleScore=computeBLEU(peSampleTranslations,peReferences);double imtSampleScore=computeBLEU(imtSampleTranslations,imtReferences);double sampleDiff=imtSampleScore - peSampleScore;if (Math.abs(sampleDiff) >= Math.abs(observedDiff)) {matchedOrExceededDiffs++;}}double p=(matchedOrExceededDiffs + 1.0) / (SAMPLES + 1.0);System.out.printf("%np = %f (%d+1)/(%d+1)%n",p,matchedOrExceededDiffs,SAMPLES);}  }
class C{  @Deprecated public static void debugx(String msg){  X.printerrln(debugPrefix() + msg);}  }
class C{  public void print(double dnum){  print(String.valueOf(dnum));}  }
class C{  private void pop(){  String removed=encodedPathSegments.remove(encodedPathSegments.size() - 1);  if (removed.isEmpty() && !encodedPathSegments.isEmpty()) {    encodedPathSegments.set(encodedPathSegments.size() - 1,"");  } else {    encodedPathSegments.add("");  }}  }
class C{  public static File removeExtension(File file){  final String fileFilename=file.getName();  final int beginIndex=fileFilename.lastIndexOf('.');  if (beginIndex > 0) {    return new File(file.getParentFile(),fileFilename.substring(0,beginIndex));  }  return file;}  }
class C{  public void actionPerformed(ActionEvent e){  if (cmbDocType.equals(e.getSource())) {    executeQuery();    return;  }  validate();}  }
class C{  public SQLDatabase(String name){  m_sName=name;  m_aTables=new ArrayList();  m_mTables=new HashMap();}  }
class C{  public ConfigureAttacksDialog_NB(DoSAttack[] attacks){  setTitle("Configure DoS Attacks");  initComponents();  JCheckBox[] checkboxes={cbCoPa,cbElCo,cbAtCo,cbEnEx,cbExEn,cbHaCo,cbOvNa};  JButton[] buttons={btnCoPa,btnElCo,btnAtCo,btnEnEx,btnExEn,btnHaCo,btnOvNa};  for (int i=0; i < defaultAttacks.length; i++) {    boolean found=false;    for (    DoSAttack current : attacks) {      if (defaultAttacks[i].getClass().equals(current.getClass())) {        checkboxes[i].setSelected(true);        map.put(checkboxes[i],current);        mapBtn.put(buttons[i],current);        found=true;      }    }    if (!found) {      map.put(checkboxes[i],defaultAttacks[i]);      mapBtn.put(buttons[i],defaultAttacks[i]);      buttons[i].setEnabled(false);    }  }}  }
class C{  @AfterClass public static void tearDownAfterClass() throws Exception {}  }
class C{  public Boolean isStatsAggregationDisabled(){  return statsAggregationDisabled;}  }
class C{  private void init(){  pnlBtnLeft=new Panel();  pnlBtnLeft.setAlign("left");  pnlBtnRight=new Panel();  pnlBtnRight.setAlign("right");  hboxBtnRight=new Hbox();  hboxBtnRight.appendChild(pnlBtnRight);  hboxBtnRight.setWidth("100%");  hboxBtnRight.setStyle("text-align:right");  hboxBtnLeft=new Hbox();  hboxBtnLeft.appendChild(pnlBtnLeft);  hboxBtnLeft.setWidth("100%");  hboxBtnLeft.setStyle("text-align:left");  this.appendChild(hboxBtnLeft);  this.appendChild(hboxBtnRight);  this.setWidth("100%");}  }
class C{  public void createPrivacyList(String listName,List<PrivacyItem> privacyItems) throws XMPPException {  this.updatePrivacyList(listName,privacyItems);}  }
class C{  @Override public String toString(){  if (m_Classifiers == null) {    return "Vote: No model built yet.";  }  String result="Vote combines";  result+=" the probability distributions of these base learners:\n";  for (int i=0; i < m_Classifiers.length; i++) {    result+='\t' + getClassifierSpec(i) + '\n';  }  for (  Classifier c : m_preBuiltClassifiers) {    result+="\t" + c.getClass().getName() + Utils.joinOptions(((OptionHandler)c).getOptions())+ "\n";  }  result+="using the '";switch (m_CombinationRule) {case AVERAGE_RULE:    result+="Average";  break;case PRODUCT_RULE:result+="Product";break;case MAJORITY_VOTING_RULE:result+="Majority Voting";break;case MIN_RULE:result+="Minimum";break;case MAX_RULE:result+="Maximum";break;case MEDIAN_RULE:result+="Median";break;default :throw new IllegalStateException("Unknown combination rule '" + m_CombinationRule + "'!");}result+="' combination rule \n";StringBuilder resultBuilder=null;if (!m_dontPrintModels) {resultBuilder=new StringBuilder();resultBuilder.append(result).append("\nAll the models:\n\n");for (Classifier c : m_Classifiers) {resultBuilder.append(c).append("\n");}for (Classifier c : m_preBuiltClassifiers) {resultBuilder.append(c).append("\n");}}return resultBuilder == null ? result : resultBuilder.toString();}  }
class C{  public long readRawLittleEndian64() throws IOException {  final byte b1=readRawByte();  final byte b2=readRawByte();  final byte b3=readRawByte();  final byte b4=readRawByte();  final byte b5=readRawByte();  final byte b6=readRawByte();  final byte b7=readRawByte();  final byte b8=readRawByte();  return (((long)b1 & 0xff)) | (((long)b2 & 0xff) << 8) | (((long)b3 & 0xff) << 16)| (((long)b4 & 0xff) << 24)| (((long)b5 & 0xff) << 32)| (((long)b6 & 0xff) << 40)| (((long)b7 & 0xff) << 48)| (((long)b8 & 0xff) << 56);}  }
class C{  public ElasticsearchException[] guessRootCauses(){  final Throwable cause=getCause();  if (cause != null && cause instanceof ElasticsearchException) {    return ((ElasticsearchException)cause).guessRootCauses();  }  return new ElasticsearchException[]{this};}  }
class C{  private SourceHandle(final PNodeLocator locator){  super(locator);  reset();  setPickable(false);  PNode parentNode=locator.getNode();  parentNode.addChild(this);  setPaint(null);  setStrokePaint(sourceColor);  updateBounds();  relocateHandle();}  }
class C{  public AnnotationVisitor visitLocalVariableAnnotation(int typeRef,TypePath typePath,Label[] start,Label[] end,int[] index,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    return mv.visitLocalVariableAnnotation(typeRef,typePath,start,end,index,desc,visible);  }  return null;}  }
class C{  public void dragDropEnd(DragSourceDropEvent e){}  }
class C{  public boolean isAnyPolicyInhibited(){  return anyPolicyInhibited;}  }
class C{  public void displayText(String text){  append(text);}  }
class C{  public boolean isSetIpv4(){  return EncodingUtils.testBit(__isset_bitfield,__IPV4_ISSET_ID);}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public static void refreshWidgetView(Context context,Weather weather){  if (weather == null) {    return;  }  SharedPreferences sharedPreferences=context.getSharedPreferences(context.getString(R.string.sp_widget_clock_day_center_setting),Context.MODE_PRIVATE);  boolean showCard=sharedPreferences.getBoolean(context.getString(R.string.key_show_card),false);  boolean blackText=sharedPreferences.getBoolean(context.getString(R.string.key_black_text),false);  boolean hideRefreshTime=sharedPreferences.getBoolean(context.getString(R.string.key_hide_refresh_time),false);  boolean isDay=TimeUtils.getInstance(context).getDayTime(context,weather,false).isDay;  int textColor;  if (blackText || showCard) {    textColor=ContextCompat.getColor(context,R.color.colorTextDark);  } else {    textColor=ContextCompat.getColor(context,R.color.colorTextLight);  }  RemoteViews views=new RemoteViews(context.getPackageName(),R.layout.widget_clock_day_center);  int[] imageId=WeatherUtils.getWeatherIcon(WeatherUtils.getWeatherKind(weather.live.weather),isDay);  views.setImageViewResource(R.id.widget_clock_day_center_icon,imageId[3]);  String[] texts=WidgetAndNotificationUtils.buildWidgetDayStyleText(weather);  views.setTextViewText(R.id.widget_clock_day_center_weather,texts[0]);  views.setTextViewText(R.id.widget_clock_day_center_temp,texts[1]);  views.setTextViewText(R.id.widget_clock_day_center_refreshTime,weather.base.location + "." + weather.base.refreshTime);  views.setTextColor(R.id.widget_clock_day_center_clock,textColor);  views.setTextColor(R.id.widget_clock_day_center_weather,textColor);  views.setTextColor(R.id.widget_clock_day_center_temp,textColor);  views.setTextColor(R.id.widget_clock_day_center_refreshTime,textColor);  views.setViewVisibility(R.id.widget_clock_day_center_card,showCard ? View.VISIBLE : View.GONE);  views.setViewVisibility(R.id.widget_clock_day_center_refreshTime,hideRefreshTime ? View.GONE : View.VISIBLE);  Intent intentClock=new Intent(AlarmClock.ACTION_SHOW_ALARMS);  PendingIntent pendingIntentClock=PendingIntent.getActivity(context,0,intentClock,0);  views.setOnClickPendingIntent(R.id.widget_clock_day_center_clockButton,pendingIntentClock);  Intent intentWeather=new Intent(context,MainActivity.class);  PendingIntent pendingIntentWeather=PendingIntent.getActivity(context,0,intentWeather,0);  views.setOnClickPendingIntent(R.id.widget_clock_day_center_weatherButton,pendingIntentWeather);  AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(context);  appWidgetManager.updateAppWidget(new ComponentName(context,WidgetClockDayCenterProvider.class),views);}  }
class C{  public SidedPlane(final Vector p,final boolean onSide,final Vector A,final Vector B){  super(A,B);  sigNum=onSide ? Math.signum(evaluate(p)) : -Math.signum(evaluate(p));  if (sigNum == 0.0)   throw new IllegalArgumentException("Cannot determine sidedness because check point is on plane.");}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:05.190 -0500",hash_original_method="D6C962299FDFC629DCB3EC52DDA4C6D9",hash_generated_method="7234B212615F457DA8EAE2D2891278FF") private void mergeHi(int base1,int len1,int base2,int len2){  if (DEBUG)   assert len1 > 0 && len2 > 0 && base1 + len1 == base2;  T[] a=this.a;  T[] tmp=ensureCapacity(len2);  System.arraycopy(a,base2,tmp,0,len2);  int cursor1=base1 + len1 - 1;  int cursor2=len2 - 1;  int dest=base2 + len2 - 1;  a[dest--]=a[cursor1--];  if (--len1 == 0) {    System.arraycopy(tmp,0,a,dest - (len2 - 1),len2);    return;  }  if (len2 == 1) {    dest-=len1;    cursor1-=len1;    System.arraycopy(a,cursor1 + 1,a,dest + 1,len1);    a[dest]=tmp[cursor2];    return;  }  Comparator<? super T> c=this.c;  int minGallop=this.minGallop;  outer:   while (true) {    int count1=0;    int count2=0;    do {      if (DEBUG)       assert len1 > 0 && len2 > 1;      if (c.compare(tmp[cursor2],a[cursor1]) < 0) {        a[dest--]=a[cursor1--];        count1++;        count2=0;        if (--len1 == 0)         break outer;      } else {        a[dest--]=tmp[cursor2--];        count2++;        count1=0;        if (--len2 == 1)         break outer;      }    } while ((count1 | count2) < minGallop);    do {      if (DEBUG)       assert len1 > 0 && len2 > 1;      count1=len1 - gallopRight(tmp[cursor2],a,base1,len1,len1 - 1,c);      if (count1 != 0) {        dest-=count1;        cursor1-=count1;        len1-=count1;        System.arraycopy(a,cursor1 + 1,a,dest + 1,count1);        if (len1 == 0)         break outer;      }      a[dest--]=tmp[cursor2--];      if (--len2 == 1)       break outer;      count2=len2 - gallopLeft(a[cursor1],tmp,0,len2,len2 - 1,c);      if (count2 != 0) {        dest-=count2;        cursor2-=count2;        len2-=count2;        System.arraycopy(tmp,cursor2 + 1,a,dest + 1,count2);        if (len2 <= 1)         break outer;      }      a[dest--]=a[cursor1--];      if (--len1 == 0)       break outer;      minGallop--;    } while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);    if (minGallop < 0)     minGallop=0;    minGallop+=2;  }  this.minGallop=minGallop < 1 ? 1 : minGallop;  if (len2 == 1) {    if (DEBUG)     assert len1 > 0;    dest-=len1;    cursor1-=len1;    System.arraycopy(a,cursor1 + 1,a,dest + 1,len1);    a[dest]=tmp[cursor2];  } else   if (len2 == 0) {    throw new IllegalArgumentException("Comparison method violates its general contract!");  } else {    if (DEBUG)     assert len1 == 0;    if (DEBUG)     assert len2 > 0;    System.arraycopy(tmp,0,a,dest - (len2 - 1),len2);  }}  }
class C{  public boolean isLineTypeCalculation(){  return LINETYPE_Calculation.equals(getLineType());}  }
class C{  private void verifyNewTargetCopyMode(String copyMode){  if ((!BlockSnapshotSession.CopyMode.copy.name().equals(copyMode)) && (!BlockSnapshotSession.CopyMode.nocopy.name().equals(copyMode))) {    throw APIException.badRequests.invalidCopyModeForLinkedTarget(copyMode);  }}  }
class C{  protected void processTuple(KeyValPair<byte[],byte[]> tuple){switch (execMode) {case UPDATEASYNC:    updateAsync(tuple);  break;case UPDATESYNC:store.getSync(getTimeByKey(tuple.getKey()),new Slice(tuple.getKey()));insertValueToStore(tuple);break;default :insertValueToStore(tuple);}}  }
class C{  public LayoutEditor(com.codename1.ui.Container parent){  initComponents();  try {    help.setPage(getClass().getResource("/help/layout_flow.html"));  } catch (  IOException ex) {    ex.printStackTrace();  }  if (parent instanceof com.codename1.ui.Form) {    parent=((com.codename1.ui.Form)parent).getContentPane();  }  rows.setModel(new SpinnerNumberModel(1,1,1000,1));  columns.setModel(new SpinnerNumberModel(1,1,1000,1));  if (parent.getComponentCount() > 5) {    layoutCombo.setModel(new DefaultComboBoxModel(new String[]{"Flow Layout","Box Layout X","Box Layout Y","Grid Layout","Table Layout","Layered Layout"}));  } else {    if (parent.getLayout() instanceof com.codename1.ui.layouts.BorderLayout) {      layoutCombo.setSelectedIndex(6);      com.codename1.ui.layouts.BorderLayout b=(com.codename1.ui.layouts.BorderLayout)parent.getLayout();      initSwapCombo(b,com.codename1.ui.layouts.BorderLayout.NORTH,swapNorth);      initSwapCombo(b,com.codename1.ui.layouts.BorderLayout.SOUTH,swapSouth);      initSwapCombo(b,com.codename1.ui.layouts.BorderLayout.EAST,swapEast);      initSwapCombo(b,com.codename1.ui.layouts.BorderLayout.WEST,swapWest);      initSwapCombo(b,com.codename1.ui.layouts.BorderLayout.CENTER,swapCenter);      absoluteCenter.setSelected(b.isAbsoluteCenter());      return;    }  }  if (parent.getLayout() instanceof com.codename1.ui.layouts.FlowLayout) {    layoutCombo.setSelectedIndex(0);    com.codename1.ui.layouts.FlowLayout f=(com.codename1.ui.layouts.FlowLayout)parent.getLayout();    fillRows.setSelected(f.isFillRows());switch (f.getValign()) {case com.codename1.ui.Component.TOP:      valign.setSelectedIndex(0);    break;case com.codename1.ui.Component.CENTER:  valign.setSelectedIndex(1);break;case com.codename1.ui.Component.BOTTOM:valign.setSelectedIndex(2);break;}switch (f.getAlign()) {case com.codename1.ui.Component.LEFT:align.setSelectedIndex(0);break;case com.codename1.ui.Component.CENTER:align.setSelectedIndex(1);break;case com.codename1.ui.Component.RIGHT:align.setSelectedIndex(2);break;}return;}if (parent.getLayout() instanceof com.codename1.ui.layouts.BoxLayout) {if (((com.codename1.ui.layouts.BoxLayout)parent.getLayout()).getAxis() == com.codename1.ui.layouts.BoxLayout.Y_AXIS) {layoutCombo.setSelectedIndex(2);} else {layoutCombo.setSelectedIndex(1);}return;}if (parent.getLayout() instanceof com.codename1.ui.layouts.GridLayout) {layoutCombo.setSelectedIndex(3);rows.setValue(((com.codename1.ui.layouts.GridLayout)parent.getLayout()).getRows());columns.setValue(((com.codename1.ui.layouts.GridLayout)parent.getLayout()).getColumns());rows.setEnabled(true);columns.setEnabled(true);return;}if (parent.getLayout() instanceof com.codename1.ui.table.TableLayout) {layoutCombo.setSelectedIndex(4);rows.setValue(((com.codename1.ui.table.TableLayout)parent.getLayout()).getRows());columns.setValue(((com.codename1.ui.table.TableLayout)parent.getLayout()).getColumns());rows.setEnabled(true);columns.setEnabled(true);return;}if (parent.getLayout() instanceof com.codename1.ui.layouts.LayeredLayout) {layoutCombo.setSelectedIndex(5);return;}}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 3:{        addToken(Token.IDENTIFIER);      }case 43:    break;case 39:{    addToken(Token.LITERAL_BOOLEAN);  }case 44:break;case 33:{start=zzMarkedPos - 3;yybegin(MULTILINE_STRING_DOUBLE);}case 45:break;case 13:{addToken(start,zzStartRead - 1,Token.COMMENT_DOCUMENTATION);return firstToken;}case 46:break;case 31:{addToken(Token.ERROR_CHAR);}case 47:break;case 18:{addToken(Token.ERROR_NUMBER_FORMAT);}case 48:break;case 5:{addToken(Token.ERROR_CHAR);addNullToken();return firstToken;}case 49:break;case 22:{addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}case 50:break;case 26:{addToken(Token.FUNCTION);}case 51:break;case 7:{addToken(Token.ERROR_STRING_DOUBLE);addNullToken();return firstToken;}case 52:break;case 30:{start=zzMarkedPos - 3;yybegin(MULTILINE_STRING_SINGLE);}case 53:break;case 2:{addToken(Token.ERROR_IDENTIFIER);}case 54:break;case 23:{addToken(Token.COMMENT_EOL);addNullToken();return firstToken;}case 55:break;case 37:{yybegin(YYINITIAL);addToken(start,zzStartRead + 2,Token.LITERAL_CHAR);}case 56:break;case 42:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_DOCUMENTATION);addToken(temp,zzMarkedPos - 1,Token.VARIABLE);start=zzMarkedPos;}case 57:break;case 29:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_DOCUMENTATION);addToken(temp,zzMarkedPos - 1,Token.PREPROCESSOR);start=zzMarkedPos;}case 58:break;case 11:{addToken(Token.VARIABLE);}case 59:break;case 41:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_DOCUMENTATION);addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_DOCUMENTATION);start=zzMarkedPos;}case 60:break;case 15:{}case 61:break;case 21:{addToken(Token.LITERAL_CHAR);}case 62:break;case 36:{yybegin(YYINITIAL);addToken(start,zzStartRead + 2,Token.LITERAL_STRING_DOUBLE_QUOTE);}case 63:break;case 20:{addToken(Token.LITERAL_NUMBER_HEXADECIMAL);}case 64:break;case 24:{start=zzMarkedPos - 2;yybegin(MLC);}case 65:break;case 8:{addToken(Token.WHITESPACE);}case 66:break;case 28:{yybegin(YYINITIAL);addToken(start,zzStartRead + 1,Token.COMMENT_DOCUMENTATION);}case 67:break;case 35:{addToken(Token.DATA_TYPE);}case 68:break;case 27:{yybegin(YYINITIAL);addToken(start,zzStartRead + 1,Token.COMMENT_MULTILINE);}case 69:break;case 4:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 70:break;case 17:{}case 71:break;case 34:{start=zzMarkedPos - 3;yybegin(DOCCOMMENT);}case 72:break;case 25:{addToken(Token.RESERVED_WORD);}case 73:break;case 40:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_MULTILINE);start=zzMarkedPos;}case 74:break;case 10:{addToken(Token.SEPARATOR);}case 75:break;case 6:{addNullToken();return firstToken;}case 76:break;case 12:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 77:break;case 9:{addToken(Token.OPERATOR);}case 78:break;case 16:{addToken(start,zzStartRead - 1,Token.LITERAL_CHAR);return firstToken;}case 79:break;case 19:{addToken(Token.LITERAL_NUMBER_FLOAT);}case 80:break;case 38:{addToken(Token.COMMENT_MULTILINE);}case 81:break;case 1:{}case 82:break;case 14:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 83:break;case 32:{addToken(Token.ERROR_STRING_DOUBLE);}case 84:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case MULTILINE_STRING_DOUBLE:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 1100:break;case DOCCOMMENT:{yybegin(YYINITIAL);addToken(start,zzEndRead,Token.COMMENT_DOCUMENTATION);return firstToken;}case 1101:break;case YYINITIAL:{addNullToken();return firstToken;}case 1102:break;case MLC:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 1103:break;case MULTILINE_STRING_SINGLE:{addToken(start,zzStartRead - 1,Token.LITERAL_CHAR);return firstToken;}case 1104:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public void twopointRecombine(EvolutionState state,int thread,GEPSpecies s,MersenneTwisterFast srt,GEPChromosome chromosome1,GEPChromosome chromosome2){  int genome1[][]=chromosome1.genome;  int genome2[][]=chromosome2.genome;  int chromosomeSize=s.geneSize * s.numberOfGenes;  int crossoverPoint1=srt.nextInt(chromosomeSize - 1);  int crossoverPoint2=srt.nextInt(chromosomeSize - 1);  while (crossoverPoint2 == crossoverPoint1)   crossoverPoint2=srt.nextInt(chromosomeSize - 1);  if (crossoverPoint1 > crossoverPoint2) {    int temp=crossoverPoint1;    crossoverPoint1=crossoverPoint2;    crossoverPoint2=temp;  }  int pointsTomove=crossoverPoint2 - crossoverPoint1;  int temp1[]=new int[pointsTomove];  int temp2[]=new int[pointsTomove];  int startInChromosome=crossoverPoint1 + 1;  int startingGene=startInChromosome / s.geneSize;  int startingPos=startInChromosome % s.geneSize;  try {    copyFromGenome(genome1,startingGene,startingPos,pointsTomove,temp1);    copyFromGenome(genome2,startingGene,startingPos,pointsTomove,temp2);    copyToGenome(genome1,startingGene,startingPos,pointsTomove,temp2);    copyToGenome(genome2,startingGene,startingPos,pointsTomove,temp1);  } catch (  Exception e) {    e.printStackTrace();    System.out.println(crossoverPoint1 + " " + crossoverPoint2+ " "+ s.geneSize+ " "+ pointsTomove);    System.out.println(startingGene + " " + startingPos+ " "+ pointsTomove);  }}  }
class C{  protected void clearOutEvents(){}  }
class C{  public void deselectAll(){  if (getSelectionIndex() != NONE) {    elements[getSelectionIndex()].setSelected(false);    selectedElementIndex=NONE;  }}  }
class C{  public boolean isError(){  return fSeverity == IStatus.ERROR;}  }
class C{  public CThreadPanel(final CDebugPerspectiveModel debugPerspectiveModel){  super(new BorderLayout());  Preconditions.checkNotNull(debugPerspectiveModel,"IE01518: Debug perspective model argument can not be null");  setBorder(new TitledBorder(""));  final JLabel threadLabel=new JLabel("Thread ID");  threadLabel.setBorder(BorderFactory.createEmptyBorder(0,0,0,5));  add(threadLabel,BorderLayout.WEST);  add(m_tidBox,BorderLayout.CENTER);  m_synchronizer=new CThreadPanelSynchronizer(m_tidBox,debugPerspectiveModel);}  }
class C{  private static byte[][] rotateArray(byte[][] bitarray){  byte[][] temp=new byte[bitarray[0].length][bitarray.length];  for (int ii=0; ii < bitarray.length; ii++) {    int inverseii=bitarray.length - ii - 1;    for (int jj=0; jj < bitarray[0].length; jj++) {      temp[jj][inverseii]=bitarray[ii][jj];    }  }  return temp;}  }
class C{  public void info(Object message){  log(Level.INFO,String.valueOf(message),null);}  }
class C{  public void writeToParcel(Parcel dest,int flags){  dest.writeInt(mCapabilities.size());  for (  Entry<Integer,String> entry : mCapabilities.entrySet()) {    dest.writeInt(entry.getKey().intValue());    dest.writeString(entry.getValue());  }}  }
class C{  public TermCriteria(){  this(0,0,0.0);}  }
class C{  public LoggingFraction rootLogger(Level level,String... handlers){  rootLogger(new RootLogger().level(level).handlers(handlers));  return this;}  }
class C{  public static double[][] deleteRowsRange(double[][] x,int I1,int I2){  double[][] array=new double[x.length - (I2 - I1 + 1)][x[0].length];  for (int i=0; i < I1; i++)   System.arraycopy(x[i],0,array[i],0,x[i].length);  for (int i=0; i < x.length - I2 - 1; i++)   System.arraycopy(x[i + I2 + 1],0,array[i + I1],0,x[i].length);  return array;}  }
class C{  private static Message newThreePartImageMessage(Context context,LayerClient client,int exifOrientation,int orientation,File file) throws IOException {  if (client == null)   throw new IllegalArgumentException("Null LayerClient");  if (file == null)   throw new IllegalArgumentException("Null image file");  if (!file.exists())   throw new IllegalArgumentException("No image file");  if (!file.canRead())   throw new IllegalArgumentException("Cannot read image file");  BitmapFactory.Options justBounds=new BitmapFactory.Options();  justBounds.inJustDecodeBounds=true;  BitmapFactory.decodeFile(file.getAbsolutePath(),justBounds);  int fullWidth=justBounds.outWidth;  int fullHeight=justBounds.outHeight;  MessagePart full=client.newMessagePart("image/jpeg",new FileInputStream(file),file.length());  boolean isSwap=orientation == ORIENTATION_270 || orientation == ORIENTATION_90;  String intoString="{\"orientation\":" + orientation + ", \"width\":"+ (!isSwap ? fullWidth : fullHeight)+ ", \"height\":"+ (!isSwap ? fullHeight : fullWidth)+ "}";  MessagePart info=client.newMessagePart(MIME_TYPE_INFO,intoString.getBytes());  if (Log.isLoggable(Log.VERBOSE)) {    Log.v("Creating image info: " + intoString);  }  MessagePart preview;  if (Log.isLoggable(Log.VERBOSE)) {    Log.v("Creating Preview from '" + file.getAbsolutePath() + "'");  }  int[] previewDim=Util.scaleDownInside(fullWidth,fullHeight,PREVIEW_MAX_WIDTH,PREVIEW_MAX_HEIGHT);  if (Log.isLoggable(Log.VERBOSE)) {    Log.v("Preview size: " + previewDim[0] + "x"+ previewDim[1]);  }  int sampleSize=1;  int sampleWidth=fullWidth;  int sampleHeight=fullHeight;  while (sampleWidth > previewDim[0] && sampleHeight > previewDim[1]) {    sampleWidth>>=1;    sampleHeight>>=1;    sampleSize<<=1;  }  if (sampleSize != 1)   sampleSize>>=1;  BitmapFactory.Options previewOptions=new BitmapFactory.Options();  previewOptions.inSampleSize=sampleSize;  if (Log.isLoggable(Log.VERBOSE)) {    Log.v("Preview sampled size: " + (sampleWidth << 1) + "x"+ (sampleHeight << 1));  }  Bitmap sampledBitmap=BitmapFactory.decodeFile(file.getAbsolutePath(),previewOptions);  Bitmap previewBitmap=Bitmap.createScaledBitmap(sampledBitmap,previewDim[0],previewDim[1],true);  File temp=new File(context.getCacheDir(),ThreePartImageUtils.class.getSimpleName() + "." + System.nanoTime()+ ".jpg");  FileOutputStream previewStream=new FileOutputStream(temp);  if (Log.isLoggable(Log.VERBOSE)) {    Log.v("Compressing preview to '" + temp.getAbsolutePath() + "'");  }  previewBitmap.compress(Bitmap.CompressFormat.JPEG,PREVIEW_COMPRESSION_QUALITY,previewStream);  sampledBitmap.recycle();  previewBitmap.recycle();  previewStream.close();  ExifInterface preserver=new ExifInterface(temp.getAbsolutePath());  preserver.setAttribute(ExifInterface.TAG_ORIENTATION,Integer.toString(exifOrientation));  preserver.saveAttributes();  if (Log.isLoggable(Log.VERBOSE)) {    Log.v("Exif orientation preserved in preview");  }  preview=client.newMessagePart(MIME_TYPE_PREVIEW,new FileInputStream(temp),temp.length());  if (Log.isLoggable(Log.VERBOSE)) {    Log.v(String.format(Locale.US,"Full image bytes: %d, preview bytes: %d, info bytes: %d",full.getSize(),preview.getSize(),info.getSize()));  }  MessagePart[] parts=new MessagePart[3];  parts[PART_INDEX_FULL]=full;  parts[PART_INDEX_PREVIEW]=preview;  parts[PART_INDEX_INFO]=info;  return client.newMessage(parts);}  }
class C{  @Override public synchronized void connectionNotification(String eventName,Object source){  if (connectionAllowed(eventName)) {    m_listenee=source;  }}  }
class C{  public boolean isLoaded(String language){  if (m_languages == null)   return false;  return m_languages.containsKey(language);}  }
class C{  public void visitFieldInsn(int opcode,String owner,String name,String desc){  if (mv != null) {    mv.visitFieldInsn(opcode,owner,name,desc);  }}  }
class C{  public CTagCriteriumPanel(final CTagCriterium tagCriterium,final ITagManager tagManager){  super(new BorderLayout());  m_criterium=tagCriterium;  m_tagManager=tagManager;  m_tagTree.addTreeSelectionListener(m_selectionListener);  m_anyTagBox.addChangeListener(m_checkboxListener);  initPanel(tagManager.getRootTag());  tagManager.addListener(m_listener);}  }
class C{  public HyperLogLog(int log2m){  this(log2m,new RegisterSet(1 << log2m));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:32.374 -0500",hash_original_method="97D7A1AD2A2B5CF8AA634AC52F7EF42D",hash_generated_method="1F32A28347F2361A06AF9FAEFCDD0E14") BluetoothInputDevice(Context mContext,ServiceListener l){  IBinder b=ServiceManager.getService(BluetoothAdapter.BLUETOOTH_SERVICE);  mServiceListener=l;  mAdapter=BluetoothAdapter.getDefaultAdapter();  if (b != null) {    mService=IBluetooth.Stub.asInterface(b);    if (mServiceListener != null) {      mServiceListener.onServiceConnected(BluetoothProfile.INPUT_DEVICE,this);    }  } else {    Log.w(TAG,"Bluetooth Service not available!");    mService=null;  }}  }
class C{  protected void validateAttributePresentity() throws IllegalStateException {  if (!rfc3489CompatibilityMode)   return;  for (char i=Attribute.MAPPED_ADDRESS; i < Attribute.REFLECTED_FROM; i++)   if (getAttributePresentity(i) == M && getAttribute(i) == null)   throw new IllegalStateException("A mandatory attribute (type=" + (int)i + ") is missing!");}  }
class C{  final public boolean isReadOnly(){  return true;}  }
class C{  private Decomposition decompose(NodeRepresentation nodeRep,Decomposition decomp,boolean isAssumption){  SemanticNode sn=nodeRep.semanticNode;  if (!(sn instanceof OpApplNode)) {    return null;  }  OpApplNode node=(OpApplNode)sn;  OpApplNode unprimedNode=node;  Decomposition result=new Decomposition();  if (decomp != null) {    result.renaming.identifiers=(Vector<FormalParamNode>)decomp.renaming.identifiers.clone();    result.renaming.newNames=(Vector<String>)decomp.renaming.newNames.clone();  }  result.instantiationSubstitutions=nodeRep.instantiationSubstitutions;  if (node.getOperator().getName() == ASTConstants.OP_prime) {    if (!(node.getArgs()[0] instanceof OpApplNode)) {      return null;    }    node=(OpApplNode)node.getArgs()[0];    unprimedNode=node;    result.primed=true;  }  if ((!nodeRep.isSubexpressionName) && (node.getOperator().getKind() == ASTConstants.UserDefinedOpKind)) {    OpDefNode definition=(OpDefNode)node.getOperator();    String operatorName=definition.getName().toString();    ExprNode opDef=definition.getBody();    InstanceSubstitution instSubs=nodeRep.instantiationSubstitutions.clone();    while (opDef instanceof SubstInNode) {      instSubs=substInNodeToInstanceSub(instSubs,operatorName,(SubstInNode)opDef);      if (instSubs == null) {        MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","Decomposing an instantiated definition whose\n" + "instantiation cannot be handled.");        return null;      }      opDef=((SubstInNode)opDef).getBody();    }    String instNamePrefix=nodeRep.instantiationSubstitutions.prefix;    String restOfName=operatorName;    while (restOfName.indexOf("!") != -1) {      instNamePrefix=instNamePrefix + restOfName.substring(0,restOfName.indexOf("!") + 1);      restOfName=restOfName.substring(restOfName.indexOf("!") + 1);    }    instSubs.prefix=instNamePrefix;    if (opDef instanceof OpApplNode) {      ExprOrOpArgNode[] args=node.getArgs();      for (int i=0; i < args.length; i++) {        SyntaxTreeNode stn=(SyntaxTreeNode)args[i].stn;        Location stnLoc=stn.getLocation();        if (stnLoc.beginLine() != stnLoc.endLine()) {          return null;        }      }      node=(OpApplNode)opDef;      result.moduleName=((SyntaxTreeNode)node.stn).getLocation().source();      result.instantiationSubstitutions=instSubs;      result.definedOp=operatorName;      result.definedOpRep=nodeRep.subNodeText(unprimedNode);      result.formalParams=definition.getParams();      result.arguments=new String[result.formalParams.length];      result.argNodes=unprimedNode.getArgs();      for (int i=0; i < result.arguments.length; i++) {        result.arguments[i]=stringArrayToString(nodeRep.subNodeText(((OpApplNode)unprimedNode).getArgs()[i]).nodeText);      }    } else {      return null;    }  }  boolean isAndOrOr=false;  boolean isJunction=false;  boolean isQuantifier=false;  boolean isBoundedQuantifier=false;  if (!(node.getOperator() instanceof OpDefNode)) {    return null;  }  UniqueString opId=((OpDefNode)node.getOperator()).getName();  String opName=opId.toString();  if (((opId == ASTConstants.OP_cl) || opName.equals("\\land")) && ((!isAssumption) || conjIsDecomposable(node))) {    result.type=NodeRepresentation.AND_TYPE;    if (opId == ASTConstants.OP_cl) {      isJunction=true;    } else {      isAndOrOr=true;    }  } else   if ((opId == ASTConstants.OP_dl) || opName.equals("\\lor")) {    result.type=NodeRepresentation.OR_TYPE;    if (opId == ASTConstants.OP_dl) {      isJunction=true;    } else {      isAndOrOr=true;    }  } else   if (opName.equals("=>")) {    result.type=NodeRepresentation.IMPLIES_TYPE;  } else   if ((opId == ASTConstants.OP_bf) || (opId == ASTConstants.OP_uf)) {    result.type=NodeRepresentation.FORALL_TYPE;    isQuantifier=true;    if (opId == ASTConstants.OP_bf) {      isBoundedQuantifier=true;    }  } else   if ((opId == ASTConstants.OP_be) || (opId == ASTConstants.OP_ue)) {    result.type=NodeRepresentation.EXISTS_TYPE;    isQuantifier=true;    if (opId == ASTConstants.OP_be) {      isBoundedQuantifier=true;    }  } else   if (opId == ASTConstants.OP_sa) {    result.type=NodeRepresentation.SQSUB_TYPE;  } else {    return null;  }  if (isAndOrOr) {    processAndOrOr(result,node,"",opName);  } else   if (isJunction) {    SemanticNode[] juncts=node.getArgs();    for (int i=0; i < juncts.length; i++) {      result.children.add(juncts[i]);      result.namePath.add("!" + (i + 1));    }  } else   if (isQuantifier) {    result.children.add(node.getArgs()[0]);    String namePath="!(";    result.quantIds=new Vector<FormalParamNode>();    if (isBoundedQuantifier) {      result.quantBounds=new Vector<ExprNode>();      result.quantBoundsubexpNames=new Vector<String>();      FormalParamNode[][] quantIdsArray=node.getBdedQuantSymbolLists();      ExprNode[] quantBounds=node.getBdedQuantBounds();      for (int i=0; i < quantIdsArray.length; i++) {        if (node.isBdedQuantATuple()[i]) {          return null;        }        FormalParamNode[] quantIds=quantIdsArray[i];        for (int j=0; j < quantIds.length; j++) {          result.quantIds.add(quantIds[j]);          result.quantBounds.add(quantBounds[i]);          result.quantBoundsubexpNames.add("!" + (i + 1));          if (!((i == 0) && (j == 0))) {            namePath=namePath + ",";          }          namePath=namePath + quantIds[j].getName().toString();        }      }    } else {      FormalParamNode[] quantIds=node.getUnbdedQuantSymbols();      for (int i=0; i < quantIds.length; i++) {        result.quantIds.add(quantIds[i]);        if (i != 0) {          namePath=namePath + ",";        }        namePath=namePath + quantIds[i].getName().toString();      }    }    namePath=namePath + ")";    result.namePath.add(namePath);  } else   if ((result.type == NodeRepresentation.IMPLIES_TYPE) || (result.type == NodeRepresentation.SQSUB_TYPE)) {    result.children.add(node.getArgs()[0]);    result.namePath.add("!1");    result.children.add(node.getArgs()[1]);    result.namePath.add("!2");  }  return result;}  }
class C{  InternalRole(String name){  this.name=name;}  }
class C{  public GeneralCommands(WorldEdit worldEdit){  checkNotNull(worldEdit);  this.worldEdit=worldEdit;  transformParser=new DefaultTransformParser(worldEdit);}  }
class C{  public static void initIndexFlags(CFlags flags){  flags.registerOptional(NO_INDEX,"do not produce indexes for output files").setCategory(CommonFlagCategories.UTILITY);}  }
class C{  public void logp(Level logLevel,String sourceClass,String sourceMethod,String msg){  if (!internalIsLoggable(logLevel)) {    return;  }  LogRecord record=new LogRecord(logLevel,msg);  record.setLoggerName(this.name);  record.setSourceClassName(sourceClass);  record.setSourceMethodName(sourceMethod);  setResourceBundle(record);  log(record);}  }
class C{  public static CipherTextIvMac encrypt(String plaintext,SecretKeys secretKeys) throws UnsupportedEncodingException, GeneralSecurityException {  return encrypt(plaintext,secretKeys,"UTF-8");}  }
class C{  public boolean isObject(){  return arrayLevel > 0 || !classObj.isPrimitive;}  }
class C{  public QueryTreeNode copyNode(QueryTreeNode node,SQLParserContext pc) throws StandardException {  boolean newMap=false;  if (nodeMap == null) {    nodeMap=new HashMap<>();    bindingsToCopy=new ArrayList<>();    newMap=true;  }  try {    QueryTreeNode result=inner.copyNode(node,pc);    if ((node instanceof FromTable) || (node instanceof ResultColumn))     nodeMap.put(node,result);    return result;  }  finally {    if (newMap) {      copyBindings();      nodeMap=null;      bindingsToCopy=null;    }  }}  }
class C{  public String undelete(){  if (resource == null) {    return NOT_FOUND;  }  if (undelete) {    if (!resource.getStatus().equals(PublicationStatus.DELETED)) {      addActionWarning(getText("manage.overview.resource.invalid.operation",new String[]{resource.getShortname(),resource.getStatus().toString()}));      return INPUT;    }    DOI doi=resource.getAssignedDoi();    if (doi != null) {      try {        if (registrationManager.getDoiService() == null) {          String msg=getText("manage.overview.doi.operation.failed.noAccount");          LOG.error(msg);          addActionError(msg);          return INPUT;        }        Organisation organisation=resource.getOrganisation();        if (organisation == null) {          throw new InvalidConfigException(InvalidConfigException.TYPE.RESOURCE_CONFIG,"Resource being undeleted missing publishing organisation!");        } else {          Organisation retrieved=registrationManager.get(organisation.getKey());          if (retrieved == null) {            throw new UndeletNotAllowedException(UndeletNotAllowedException.Reason.ORGANISATION_NOT_ASSOCIATED_TO_IPT,getText("manage.overview.publishing.doi.undelete.failed.noOrganisation",new String[]{organisation.getKey().toString()}));          } else {            Organisation doiAccountActivated=registrationManager.findPrimaryDoiAgencyAccount();            if (doiAccountActivated != null && doiAccountActivated.getDoiPrefix() != null && !doi.getDoiName().toLowerCase().startsWith(doiAccountActivated.getDoiPrefix().toLowerCase())) {              throw new UndeletNotAllowedException(UndeletNotAllowedException.Reason.DOI_PREFIX_NOT_MATCHING,getText("manage.overview.publishing.doi.undelete.failed.badPrefix",new String[]{doi.toString(),doiAccountActivated.getDoiPrefix()}));            }          }        }        String shortname=resource.getShortname();        BigDecimal versionToUndelete=resource.getLastPublishedVersionsVersion();        UUID key=resource.getKey();        File versionToUndeleteEmlFile=cfg.getDataDir().resourceEmlFile(shortname,versionToUndelete);        Resource reconstructed=ResourceUtils.reconstructVersion(versionToUndelete,shortname,doi,organisation,resource.findVersionHistory(versionToUndelete),versionToUndeleteEmlFile,key);        URI target=cfg.getResourceUri(shortname);        doUndeleteDOI(doi,reconstructed,target);        resource.setDoi(doi);        resource.setIdentifierStatus(IdentifierStatus.PUBLIC);        resource.updateCitationIdentifierForDOI();        Set<String> undeleted=Sets.newHashSet(doi.toString());        if (!resource.getVersionHistory().isEmpty()) {          for (          VersionHistory history : resource.getVersionHistory()) {            DOI formerDoi=history.getDoi();            if (formerDoi != null && !undeleted.contains(formerDoi.toString())) {              BigDecimal formerVersionToUndelete=new BigDecimal(history.getVersion());              File formerVersionToUndeleteEmlFile=cfg.getDataDir().resourceEmlFile(shortname,formerVersionToUndelete);              Resource formerVersionReconstructed=ResourceUtils.reconstructVersion(formerVersionToUndelete,shortname,formerDoi,organisation,resource.findVersionHistory(formerVersionToUndelete),formerVersionToUndeleteEmlFile,key);              URI formerTarget=cfg.getResourceVersionUri(shortname,formerVersionToUndelete);              doUndeleteDOI(formerDoi,formerVersionReconstructed,formerTarget);              undeleted.add(formerDoi.toString());            }          }        }        if (reconstructed.isRegistered()) {          resource.setStatus(PublicationStatus.REGISTERED);          addActionWarning(getText("manage.overview.resource.undelete.warning.gbif"));        } else {          resource.setStatus(PublicationStatus.PUBLIC);        }        saveResource();        addActionMessage(getText("manage.overview.resource.undeleted",new String[]{resource.getTitleAndShortname()}));        return SUCCESS;      } catch (      UndeletNotAllowedException e) {        String msg=getText("manage.resource.undelete.failed");        LOG.error(msg,e);        addActionError(msg);        addActionExceptionWarning(e);      }catch (      IllegalArgumentException e) {        String msg=getText("manage.resource.undelete.failed");        LOG.error(msg,e);        addActionError(msg);        addActionExceptionWarning(e);      }    } else {      addActionWarning(getText("manage.overview.resource.invalid.operation",new String[]{resource.getShortname(),resource.getStatus().toString()}));    }  } else {    addActionWarning(getText("manage.overview.resource.invalid.operation",new String[]{resource.getShortname(),resource.getStatus().toString()}));  }  return INPUT;}  }
class C{  public QRDecomposition qr(){  return new QRDecomposition(this);}  }
class C{  public Iterator<INode> iterator(){  return hash.iterator();}  }
class C{  public void testWrongParameterType() throws Exception {  Map<String,Method> functions=new HashMap<>();  functions.put("foo",getClass().getMethod("bogusParameterType",String.class));  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("must take only double parameters"));}  }
class C{  public static AndroidHttpClient newInstance(String userAgent,Context context){  HttpParams params=new BasicHttpParams();  HttpConnectionParams.setStaleCheckingEnabled(params,false);  HttpConnectionParams.setConnectionTimeout(params,SOCKET_OPERATION_TIMEOUT);  HttpConnectionParams.setSoTimeout(params,SOCKET_OPERATION_TIMEOUT);  HttpConnectionParams.setSocketBufferSize(params,8192);  HttpClientParams.setRedirecting(params,false);  SSLSessionCache sessionCache=context == null ? null : new SSLSessionCache(context);  HttpProtocolParams.setUserAgent(params,userAgent);  SchemeRegistry schemeRegistry=new SchemeRegistry();  schemeRegistry.register(new Scheme("http",PlainSocketFactory.getSocketFactory(),80));  schemeRegistry.register(new Scheme("https",SSLCertificateSocketFactory.getHttpSocketFactory(SOCKET_OPERATION_TIMEOUT,sessionCache),443));  ClientConnectionManager manager=new ThreadSafeClientConnManager(params,schemeRegistry);  return new AndroidHttpClient(manager,params);}  }
class C{  public void restartable(int restartableId,Func0<Subscription> factory){  restartables.put(restartableId,factory);  if (requested.contains(restartableId))   start(restartableId);}  }
class C{  @Override protected void internalRender(GL10 gl,PLIRenderer renderer){  gl.glEnable(GL10.GL_TEXTURE_2D);  gl.glEnable(GL10.GL_CULL_FACE);  gl.glCullFace(GL10.GL_FRONT);  gl.glShadeModel(GL10.GL_SMOOTH);  gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);  gl.glEnableClientState(GL10.GL_TEXTURE_COORD_ARRAY);  gl.glVertexPointer(3,GL10.GL_FLOAT,0,sCubeBuffer);  gl.glTexCoordPointer(2,GL10.GL_FLOAT,0,sTextureCoordsBuffer);  if (this.bindTextureByIndex(gl,PLConstants.kCubeFrontFaceIndex)) {    gl.glNormal3f(0.0f,0.0f,1.0f);    gl.glDrawArrays(GL10.GL_TRIANGLE_STRIP,0,4);  }  if (this.bindTextureByIndex(gl,PLConstants.kCubeBackFaceIndex)) {    gl.glNormal3f(0.0f,0.0f,-1.0f);    gl.glDrawArrays(GL10.GL_TRIANGLE_STRIP,4,4);  }  if (this.bindTextureByIndex(gl,PLConstants.kCubeLeftFaceIndex)) {    gl.glNormal3f(1.0f,0.0f,0.0f);    gl.glDrawArrays(GL10.GL_TRIANGLE_STRIP,8,4);  }  if (this.bindTextureByIndex(gl,PLConstants.kCubeRightFaceIndex)) {    gl.glNormal3f(-1.0f,0.0f,0.0f);    gl.glDrawArrays(GL10.GL_TRIANGLE_STRIP,12,4);  }  if (this.bindTextureByIndex(gl,PLConstants.kCubeUpFaceIndex)) {    gl.glNormal3f(0.0f,1.0f,0.0f);    gl.glDrawArrays(GL10.GL_TRIANGLE_STRIP,16,4);  }  if (this.bindTextureByIndex(gl,PLConstants.kCubeDownFaceIndex)) {    gl.glNormal3f(0.0f,-1.0f,0.0f);    gl.glDrawArrays(GL10.GL_TRIANGLE_STRIP,20,4);  }  gl.glDisableClientState(GL10.GL_VERTEX_ARRAY);  gl.glDisableClientState(GL10.GL_TEXTURE_COORD_ARRAY);  gl.glDisable(GL10.GL_CULL_FACE);  gl.glDisable(GL10.GL_TEXTURE_2D);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"std");  if (instruction.getOperands().size() != 0) {    throw new InternalTranslationException("Error: Argument instruction is not a std instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  instructions.add(ReilHelpers.createStr(baseOffset,OperandSize.BYTE,"1",OperandSize.BYTE,Helpers.DIRECTION_FLAG));}  }
class C{  public MoveEvaluation computeBest(int ply,IGameState s,IPlayer player,IPlayer opponent){  this.original=player;  this.state=s.copy();  MoveEvaluation move=minimax(ply,IComparator.MAX,player,opponent);  return move;}  }
class C{  public ElementComparator(int sort){  this.sort=sort;}  }
class C{  public static JBBPOut BeginBin(){  return new JBBPOut(new ByteArrayOutputStream(),DEFAULT_BYTE_ORDER,DEFAULT_BIT_ORDER);}  }
class C{  public static byte[] serialize(Map<String,String> encryptionContext){  if (encryptionContext == null)   return null;  if (encryptionContext.size() == 0) {    return new byte[0];  }  encryptionContext=Collections.unmodifiableMap(encryptionContext);  if (encryptionContext.size() > Short.MAX_VALUE) {    throw new AwsCryptoException("The number of entries in encryption context exceeds the allowed maximum " + Short.MAX_VALUE);  }  final ByteBuffer result=ByteBuffer.allocate(Short.MAX_VALUE);  result.order(ByteOrder.BIG_ENDIAN);  result.putShort((short)encryptionContext.size());  try {    final CharsetEncoder encoder=StandardCharsets.UTF_8.newEncoder();    encoder.onMalformedInput(CodingErrorAction.REPORT);    encoder.onUnmappableCharacter(CodingErrorAction.REPORT);    final SortedMap<ByteBuffer,ByteBuffer> binaryEntries=new TreeMap<>();    for (    Entry<String,String> mapEntry : encryptionContext.entrySet()) {      if (mapEntry.getKey() == null || mapEntry.getValue() == null) {        throw new AwsCryptoException("All keys and values in excryption context must be non-null.");      }      if (mapEntry.getKey().isEmpty() || mapEntry.getValue().isEmpty()) {        throw new AwsCryptoException("All keys and values in excryption context must be non-empty.");      }      final ByteBuffer keyBytes=encoder.encode(CharBuffer.wrap(mapEntry.getKey()));      final ByteBuffer valueBytes=encoder.encode(CharBuffer.wrap(mapEntry.getValue()));      if (binaryEntries.put(keyBytes,valueBytes) != null) {        throw new AwsCryptoException("Encryption context contains duplicate entries.");      }      if (keyBytes.limit() > Short.MAX_VALUE || valueBytes.limit() > Short.MAX_VALUE) {        throw new AwsCryptoException("All keys and values in excryption context must be shorter than " + Short.MAX_VALUE);      }    }    for (    final Entry<ByteBuffer,ByteBuffer> entry : binaryEntries.entrySet()) {      result.putShort((short)entry.getKey().limit());      result.put(entry.getKey());      result.putShort((short)entry.getValue().limit());      result.put(entry.getValue());    }    result.flip();    final byte[] encryptionContextBytes=new byte[result.limit()];    result.get(encryptionContextBytes);    return encryptionContextBytes;  } catch (  CharacterCodingException e) {    throw new IllegalArgumentException("Encryption context contains an invalid unicode character");  }catch (  BufferOverflowException e) {    throw new AwsCryptoException("The number of bytes in encryption context exceeds the allowed maximum " + Short.MAX_VALUE,e);  }}  }
class C{  private void updateExpandInfoLabel(){  if (model.isEnlarged()) {    labelStatsExp.setIcon(MetaDataStatisticsViewer.ICON_ARROW_UP);  } else {    labelStatsExp.setIcon(MetaDataStatisticsViewer.ICON_ARROW_DOWN);  }}  }
class C{  public static Double asDouble(String str){  try {    return Double.valueOf(str);  } catch (  NumberFormatException e) {    return null;  }}  }
class C{  public File parallelCorpus(){  return parallelCorpus;}  }
class C{  public void createPictScenario01() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-04-30 00:00:00"));  String supplierAdminId="Pict01Supplier";  VOOrganization supplier=orgSetup.createOrganization(basicSetup.getPlatformOperatorUserKey(),supplierAdminId,"Pict01SupplierOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);  VOUser supplierAdmin=orgSetup.getUser(supplierAdminId,true);  VOMarketplace supplMarketplace=orgSetup.createMarketplace("Pict01Supplier_MP",false,supplier);  paymentSetup.createPaymentForSupplier(basicSetup.getPlatformOperatorUserKey(),supplierAdmin.getKey(),supplier);  setCutOffDay(supplierAdmin.getKey(),5);  String customerAdminId="Pict01DiscountedCustomer";  VOOrganization customer=orgSetup.registerCustomer("Pict01DiscountedCustomerOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_UK,customerAdminId,supplMarketplace.getMarketplaceId(),supplier.getOrganizationId());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  orgSetup.updateCustomerDiscount(customer,new BigDecimal("15.00"),DateTimeHandling.calculateMillis("2013-05-06 00:00:00"),DateTimeHandling.calculateMillis("2013-05-16 23:59:59"));  orgSetup.saveAllVats(supplierAdmin.getKey(),VOVatRateFactory.newVOVatRate(new BigDecimal("13.00")),null,null);  orgSetup.createMarketingPermission(basicSetup.getSupplierAdminKey(),supplier.getOrganizationId(),technicalServiceAsync);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(supplierAdmin.getKey(),"PICT_TEST_01",TestService.EXAMPLE_ASYNC,TestPriceModel.EXAMPLE_PICT01_RATA_DAY,technicalServiceAsync,supplMarketplace);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PICT_TEST_01",serviceDetails,customerAdmin,role);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-05-01 00:00:00"));  subDetails=subscrSetup.completeAsyncSubscription(basicSetup.getSupplierAdminKey(),customerAdmin,subDetails);  VOServiceDetails perUnitService=serviceSetup.createPublishAndActivateMarketableService(supplierAdmin.getKey(),"PICT01_PERUNIT_SERVICE",TestService.EXAMPLE_ASYNC,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES,technicalServiceAsync,supplMarketplace);  serviceSetup.registerCompatibleServices(supplierAdmin.getKey(),serviceDetails,perUnitService);  BillingIntegrationTestBase.setDateFactoryInstance("2013-05-20 13:00:00");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails upgradedSubDetails=subscrSetup.upgradeSubscription(subDetails,perUnitService);  long usageUpgradeTime=DateTimeHandling.calculateMillis("2013-05-21 13:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(usageUpgradeTime);  upgradedSubDetails=subscrSetup.completeAsyncUpgradeSubscription(basicSetup.getSupplierAdminKey(),customerAdmin,upgradedSubDetails);  resetCutOffDay(supplierAdmin.getKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_01",subDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_01",upgradedSubDetails);  BillingIntegrationTestBase.updateCustomerListForTests("PICT_TEST_01",customer);}  }
class C{  public boolean accept(File file){  if (file.isDirectory()) {    return true;  }  String filename=file.getName().toLowerCase();  return filename.endsWith(".xml") || filename.endsWith(".xml.gz");}  }
class C{  public MatcherBuilder<T> sameFrequency(){  builder.sameFrequency();  return this;}  }
class C{  public static int writeUTF16toUTF8(CharSequence s,int offset,int len,OutputStream fos,byte[] scratch) throws IOException {  final int end=offset + len;  int upto=0, totalBytes=0;  for (int i=offset; i < end; i++) {    final int code=(int)s.charAt(i);    if (upto > scratch.length - 4) {      totalBytes+=upto;      fos.write(scratch,0,upto);      upto=0;    }    if (code < 0x80)     scratch[upto++]=(byte)code; else     if (code < 0x800) {      scratch[upto++]=(byte)(0xC0 | (code >> 6));      scratch[upto++]=(byte)(0x80 | (code & 0x3F));    } else     if (code < 0xD800 || code > 0xDFFF) {      scratch[upto++]=(byte)(0xE0 | (code >> 12));      scratch[upto++]=(byte)(0x80 | ((code >> 6) & 0x3F));      scratch[upto++]=(byte)(0x80 | (code & 0x3F));    } else {      if (code < 0xDC00 && (i < end - 1)) {        int utf32=(int)s.charAt(i + 1);        if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) {          utf32=((code - 0xD7C0) << 10) + (utf32 & 0x3FF);          i++;          scratch[upto++]=(byte)(0xF0 | (utf32 >> 18));          scratch[upto++]=(byte)(0x80 | ((utf32 >> 12) & 0x3F));          scratch[upto++]=(byte)(0x80 | ((utf32 >> 6) & 0x3F));          scratch[upto++]=(byte)(0x80 | (utf32 & 0x3F));          continue;        }      }      scratch[upto++]=(byte)0xEF;      scratch[upto++]=(byte)0xBF;      scratch[upto++]=(byte)0xBD;    }  }  totalBytes+=upto;  fos.write(scratch,0,upto);  return totalBytes;}  }
class C{  int writeByte(int b,int offset){  byte[] temp={(byte)b};  return writeBytes(temp,offset);}  }
class C{  public static Router createModeSeparatedRouter(Network network,Set<String> transportModes){  Network filteredNetwork=NetworkTools.filterNetworkByLinkMode(network,transportModes);  return new FastAStarRouter(filteredNetwork);}  }
class C{  public int executeUpdate(final String query,final boolean retry) throws SQLException {  m_debugQueryCount++;  long militime=0;  if (m_performanceOutput) {    militime=new GregorianCalendar().getTimeInMillis();  }  int result=0;  try (PreparedStatement prep=m_connection.prepareStatement(query)){    result=prep.executeUpdate();  } catch (  final SQLException error) {    if (m_performanceOutput) {      NaviLogger.severe("<%d>    <%d ms>    %s",m_debugQueryCount,Math.abs(militime),query);      NaviLogger.severe("Error: Query failed on %s try: %s",retry ? "first" : "second",query);    }    if ((error.getSQLState() == PostgreSQLErrorCodes.CONNECTION_DOES_NOT_EXIST) && retry) {      connect(getDatabaseUrl(m_databaseConfiguration.getUrl(),m_databaseConfiguration.getName()),m_properties);      executeUpdate(query,false);    } else {      throw error;    }  }  if (m_performanceOutput) {    militime-=new GregorianCalendar().getTimeInMillis();    NaviLogger.info("<%d>    <%d ms>    %s",m_debugQueryCount,Math.abs(militime),query.substring(0,Math.min(MAXIMUM_OUTPUT_SIZE,query.length())));  }  return result;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private VisorCachePartitionsJob(String cacheName,boolean debug){  super(cacheName,debug);}  }
class C{  public static void generateSeedList(FileSystem fs,Path urlPath,List<String> urls,List<String> metadata) throws IOException {  FSDataOutputStream out;  Path file=new Path(urlPath,"urls.txt");  fs.mkdirs(urlPath);  out=fs.create(file);  Iterator<String> urls_i=urls.iterator();  Iterator<String> metadata_i=metadata.iterator();  String url;  String md;  while (urls_i.hasNext()) {    url=urls_i.next();    out.writeBytes(url);    if (metadata_i.hasNext()) {      md=metadata_i.next();      out.writeBytes(md);    }    out.writeBytes("\n");  }  out.flush();  out.close();}  }
class C{  public boolean isRegularExpression(){  return m_regExBox.isSelected();}  }
class C{  private static JButton createExitButton(String key,ActionListener al){  String str=getMsg(key);  JButton btn=new JButton(str);  btn.addActionListener(al);  btn.getAccessibleContext().setAccessibleDescription(str);  return btn;}  }
class C{  public ScriptedProblem(String script,String name) throws ScriptException {  this(new StringReader(script),name);}  }
class C{  public MonitoredItemCreateRequest clone(){  MonitoredItemCreateRequest result=new MonitoredItemCreateRequest();  result.ItemToMonitor=ItemToMonitor == null ? null : ItemToMonitor.clone();  result.MonitoringMode=MonitoringMode;  result.RequestedParameters=RequestedParameters == null ? null : RequestedParameters.clone();  return result;}  }
class C{  public AbstractByteList partFromTo(int from,int to){  if (size == 0)   return new ByteArrayList(0);  checkRangeFromTo(from,to,size);  byte[] part=new byte[to - from + 1];  System.arraycopy(elements,from,part,0,to - from + 1);  return new ByteArrayList(part);}  }
class C{  @Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){  return inflater.inflate(R.layout.fragment_acquisition,container,false);}  }
class C{  public boolean lessThan(DMatch it){  return distance < it.distance;}  }
class C{  @KnownFailure("Not supported ops applied: test fails on arguments: '', '', '%', '%' ") public void test_getColumnsTableWithNoCatalogSchema() throws SQLException {  try {    ResultSet noSchemaTable=meta.getColumns("","",DatabaseCreator.TEST_TABLE1,"fkey");    assertNotNull(noSchemaTable);    noSchemaTable.last();    int size=noSchemaTable.getRow();    assertEquals("Does not support empty string as input parameter or Wildcard %",1,size);  } catch (  SQLException e) {    fail("Unexpected exception: " + e.getMessage());  }  try {    ResultSet noSchemaTable=meta.getColumns("","",DatabaseCreator.TEST_TABLE1,"%");    assertNotNull(noSchemaTable);    noSchemaTable.last();    int size=noSchemaTable.getRow();    assertEquals("Does not support empty string as input parameter or Wildcard %",5,size);  } catch (  SQLException e) {    fail("Unexpected exception: " + e.getMessage());  }  try {    ResultSet noSchemaTable=meta.getColumns("","","%","%");    assertNotNull(noSchemaTable);    noSchemaTable.last();    int size=noSchemaTable.getRow();    assertEquals("Does not support double Wildcard '%' as input",6,size);  } catch (  SQLException e) {    fail("Unexpected exception: " + e.getMessage());  }  conn.close();  try {    meta.getColumns(null,null,DatabaseCreator.TEST_TABLE1,"%");    fail("SQLException not thrown");  } catch (  SQLException e) {  }}  }
class C{  private static void putPreferencesInXml(Element elt,Document doc,Preferences prefs,boolean subTree) throws BackingStoreException {  Preferences[] kidsCopy=null;  String[] kidNames=null;synchronized (((AbstractPreferences)prefs).lock) {    if (((AbstractPreferences)prefs).isRemoved()) {      elt.getParentNode().removeChild(elt);      return;    }    String[] keys=prefs.keys();    Element map=(Element)elt.appendChild(doc.createElement("map"));    for (int i=0; i < keys.length; i++) {      Element entry=(Element)map.appendChild(doc.createElement("entry"));      entry.setAttribute("key",keys[i]);      entry.setAttribute("value",prefs.get(keys[i],null));    }    if (subTree) {      kidNames=prefs.childrenNames();      kidsCopy=new Preferences[kidNames.length];      for (int i=0; i < kidNames.length; i++)       kidsCopy[i]=prefs.node(kidNames[i]);    }  }  if (subTree) {    for (int i=0; i < kidNames.length; i++) {      Element xmlKid=(Element)elt.appendChild(doc.createElement("node"));      xmlKid.setAttribute("name",kidNames[i]);      putPreferencesInXml(xmlKid,doc,kidsCopy[i],subTree);    }  }}  }
class C{  public void addLineOffset(int offset){  if (numLines >= lineNumberMap.length) {    int capacity=lineNumberMap.length * 2;    int[] newLineNumberMap=new int[capacity];    System.arraycopy(lineNumberMap,0,newLineNumberMap,0,lineNumberMap.length);    lineNumberMap=newLineNumberMap;  }  lineNumberMap[numLines++]=offset;}  }
class C{  public void testInvalidService(){  rpcForwarder.registerService(new FakeServiceImpl(REQUEST));  rpcForwarder.registerBlockingService(new FakeServiceImpl(REQUEST).toBlockingService());  try {    rpcForwarder.doBlockingRpc(createRpcRequest("BadService","",REQUEST.toByteString()));    fail("Should have failed");  } catch (  RpcException e) {    assertEquals(ErrorReason.SERVICE_NOT_FOUND,e.errorReason);  }  try {    rpcForwarder.doRpc(createRpcRequest("BadService","",REQUEST.toByteString()),null);    fail("Should have failed");  } catch (  RpcException e) {    assertEquals(ErrorReason.SERVICE_NOT_FOUND,e.errorReason);  }}  }
class C{  public VariableReference attemptGeneration(TestCase test,Type type,int position) throws ConstructionFailedException {  return attemptGeneration(test,type,position,0,false,null,true,true);}  }
class C{  static String createSqlQuery(long month,Locale locale){  StringBuffer sb=new StringBuffer();  sb.append("SELECT ");  sb.append("to_timestamp(billingresult.periodstarttime/1000) AS startdate, ");  sb.append("to_timestamp(billingresult.periodendtime/1000) AS enddate, ");  sb.append("supplier.organizationid AS organizationid, ");  sb.append("supplier.name AS name, ");  sb.append("sum(cast(XMLSERIALIZE(CONTENT (xpath('//OverallCosts/@netAmount', XMLPARSE (DOCUMENT resultxml)))[1] AS text) AS NUMERIC)) AS amount, ");  sb.append("XMLSERIALIZE(CONTENT (xpath('//OverallCosts/@currency', XMLPARSE (DOCUMENT billingresult.resultxml)))[1] AS text) AS currency, ");  sb.append("CASE WHEN res.value IS NULL THEN (SELECT marketplaceid FROM marketplace WHERE tkey = sub.marketplace_tkey) ELSE res.value END AS mp ");  sb.append("FROM billingresult, organization AS supplier, subscription AS sub LEFT JOIN localizedresource AS res ");  sb.append("ON res.objectkey = sub.marketplace_tkey ");  sb.append("AND res.objecttype = '" + LocalizedObjectTypes.MARKETPLACE_NAME.name() + "' ");  sb.append("AND res.locale = '");  sb.append(locale.getLanguage());  sb.append("' ");  sb.append("WHERE ");  sb.append("to_timestamp(billingresult.periodstarttime/1000) = to_timestamp(" + month + "/1000) AND ");  sb.append("to_timestamp(billingresult.periodendtime/1000) = to_timestamp(" + month + "/1000) + interval '1 month' AND ");  sb.append("billingresult.resultxml <> '' AND ");  sb.append("billingresult.chargingorgkey = supplier.tkey AND ");  sb.append("sub.tkey = billingresult.subscriptionkey ");  sb.append("GROUP BY periodstarttime, periodendtime, supplier.tkey, supplier.organizationid, supplier.name, currency, mp ");  sb.append("ORDER BY organizationid, currency, mp");  System.out.println(sb.toString());  return sb.toString();}  }
class C{  @Override public void clear(){}  }
class C{  public IconView(Element elem){  super(elem);  AttributeSet attr=elem.getAttributes();  c=StyleConstants.getIcon(attr);}  }
class C{  protected void tearDown() throws Exception {  super.tearDown();}  }
class C{  @Override final public void mouseDragged(MouseEvent e){  mouseDrag(e);}  }
class C{  public static JBBPOut BeginBin(final JBBPByteOrder byteOrder){  return new JBBPOut(new ByteArrayOutputStream(),byteOrder,DEFAULT_BIT_ORDER);}  }
class C{  public Tagging(String name,File propFile,String objectspace,Map<String,SOTuple> table) throws IOException {  this(name);  this.propFile=propFile;  this.objectspace=objectspace;  if (propFile == null) {    this.synonym2term.clear();    this.term2synonym.clear();    this.term2objectlink.clear();    this.namespace=DEFAULT_NAMESPACE;    this.predicate=this.namespace + this.navigatorName;    String term, v;    String[] tags;    vocloop:     for (    Map.Entry<String,SOTuple> e : table.entrySet()) {      if (e.getValue().getSynonymsCSV() == null || e.getValue().getSynonymsCSV().isEmpty()) {        term=normalizeKey(e.getKey());        v=normalizeTerm(e.getKey());        this.synonym2term.put(v,term);        this.term2synonym.put(term,v);        if (e.getValue().getObjectlink() != null && e.getValue().getObjectlink().length() > 0)         this.term2objectlink.put(term,e.getValue().getObjectlink());        continue vocloop;      }      term=normalizeKey(e.getKey());      tags=e.getValue().getSynonymsList();      Set<String> synonyms=new HashSet<String>();      synonyms.add(term);      tagloop:       for (      String synonym : tags) {        if (synonym.isEmpty())         continue tagloop;        synonyms.add(synonym);        synonym=normalizeTerm(synonym);        if (synonym.isEmpty())         continue tagloop;        synonyms.add(synonym);        this.synonym2term.put(synonym,term);        this.term2synonym.put(term,synonym);      }      String synonym=normalizeTerm(term);      this.synonym2term.put(synonym,term);      this.term2synonym.put(term,synonym);      if (e.getValue().getObjectlink() != null && e.getValue().getObjectlink().length() > 0)       this.term2objectlink.put(term,e.getValue().getObjectlink());      synonyms.add(synonym);    }  } else {    BufferedWriter w=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(propFile),StandardCharsets.UTF_8.name()));    if (objectspace != null && objectspace.length() > 0)     w.write("#objectspace:" + objectspace + "\n");    for (    Map.Entry<String,SOTuple> e : table.entrySet()) {      String s=e.getValue() == null ? "" : e.getValue().getSynonymsCSV();      String o=e.getValue() == null ? "" : e.getValue().getObjectlink();      w.write(e.getKey() + (s == null || s.isEmpty() ? "" : ":" + e.getValue().getSynonymsCSV()) + (o == null || o.isEmpty() || o.equals(objectspace + e.getKey()) ? "" : "#" + o)+ "\n");    }    w.close();    init();  }}  }
class C{  private String extractTitle(ShareCompat.IntentReader reader){  if (reader.getSubject() != null && !NetworkManager.isUrl(reader.getSubject())) {    return reader.getSubject();  }  return "";}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.027 -0400",hash_original_method="CFE8F4A52457DD3D62650244F80C911C",hash_generated_method="35ED4C0B3756A6BCA894AB80F611F4BE") public synchronized byte[] toByteArray(){  int remaining=count;  if (remaining == 0) {    return EMPTY_BYTE_ARRAY;  }  byte newbuf[]=new byte[remaining];  int pos=0;  for (  byte[] buf : buffers) {    int c=Math.min(buf.length,remaining);    System.arraycopy(buf,0,newbuf,pos,c);    pos+=c;    remaining-=c;    if (remaining == 0) {      break;    }  }  return newbuf;}  }
class C{  public static void write(String fileName,Column column) throws IOException {  try (CSVWriter writer=new CSVWriter(new FileWriter(fileName))){    String[] header={column.name()};    writer.writeNext(header);    for (int r=0; r < column.size(); r++) {      String[] entries={column.getString(r)};      writer.writeNext(entries);    }  } }  }
class C{  public boolean isLocallyInitiated(){  boolean streamIsClient=(id % 2 == 1);  return connection.client == streamIsClient;}  }
class C{  public void visitTree(JCTree tree){}  }
class C{  private synchronized void closeOpenFilesAndUnlock(boolean flush){  stopWriter();  if (pageStore != null) {    if (flush) {      try {        pageStore.checkpoint();        if (!readOnly) {          lockMeta(pageStore.getPageStoreSession());          pageStore.compact(compactMode);        }      } catch (      DbException e) {        if (SysProperties.CHECK2) {          int code=e.getErrorCode();          if (code != ErrorCode.DATABASE_IS_CLOSED && code != ErrorCode.LOCK_TIMEOUT_1 && code != ErrorCode.IO_EXCEPTION_2) {            e.printStackTrace();          }        }        trace.error(e,"close");      }catch (      Throwable t) {        if (SysProperties.CHECK2) {          t.printStackTrace();        }        trace.error(t,"close");      }    }  }  reconnectModified(false);  if (mvStore != null) {    long maxCompactTime=dbSettings.maxCompactTime;    if (compactMode == CommandInterface.SHUTDOWN_COMPACT) {      mvStore.compactFile(dbSettings.maxCompactTime);    } else     if (compactMode == CommandInterface.SHUTDOWN_DEFRAG) {      maxCompactTime=Long.MAX_VALUE;    } else     if (getSettings().defragAlways) {      maxCompactTime=Long.MAX_VALUE;    }    mvStore.close(maxCompactTime);  }  closeFiles();  if (persistent && lock == null && fileLockMethod != FileLock.LOCK_NO && fileLockMethod != FileLock.LOCK_FS) {    return;  }  if (persistent) {    deleteOldTempFiles();  }  if (systemSession != null) {    systemSession.close();    systemSession=null;  }  if (lobSession != null) {    lobSession.close();    lobSession=null;  }  if (lock != null) {    if (fileLockMethod == FileLock.LOCK_SERIALIZED) {      if (lock.load().containsKey("changePending")) {        try {          Thread.sleep((int)(reconnectCheckDelay * 1.1));        } catch (        InterruptedException e) {          trace.error(e,"close");        }      }    }    lock.unlock();    lock=null;  }}  }
class C{  public String globalInfo(){  return "A Classifier that uses backpropagation to classify instances.\n" + "This network can be built by hand, created by an algorithm or both. " + "The network can also be monitored and modified during training time. "+ "The nodes in this network are all sigmoid (except for when the class "+ "is numeric in which case the the output nodes become unthresholded "+ "linear units).";}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void animatePropertyBy(int constantName,float startValue,float byValue){  if (mAnimatorMap.size() > 0) {    Animator animatorToCancel=null;    Set<Animator> animatorSet=mAnimatorMap.keySet();    for (    Animator runningAnim : animatorSet) {      PropertyBundle bundle=mAnimatorMap.get(runningAnim);      if (bundle.cancel(constantName)) {        if (bundle.mPropertyMask == NONE) {          animatorToCancel=runningAnim;          break;        }      }    }    if (animatorToCancel != null) {      animatorToCancel.cancel();    }  }  NameValuesHolder nameValuePair=new NameValuesHolder(constantName,startValue,byValue);  mPendingAnimations.add(nameValuePair);  View v=mView.get();  if (v != null) {    v.removeCallbacks(mAnimationStarter);    v.post(mAnimationStarter);  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_main);  readContacts();}  }
class C{  private int readFromResponse(State state,InnerState innerState,byte[] data,InputStream entityStream) throws StopRequest {  try {    return entityStream.read(data);  } catch (  IOException ex) {    logNetworkState();    mInfo.mCurrentBytes=innerState.mBytesSoFar;    mDB.updateDownload(mInfo);    if (cannotResume(innerState)) {      String message="while reading response: " + ex.toString() + ", can't resume interrupted download with no ETag";      throw new StopRequest(DownloaderService.STATUS_CANNOT_RESUME,message,ex);    } else {      throw new StopRequest(getFinalStatusForHttpError(state),"while reading response: " + ex.toString(),ex);    }  }}  }
class C{  public SSLSocketFactory buildSSLSocketFactory() throws KeyStoreException {  SSLContext sslContext=null;  try {    KeyManagerFactory keyManagerFactory=KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());    keyManagerFactory.init(keyStore,SSL_KEYSTORE_SECRET);    KeyManager[] keyManagers=keyManagerFactory.getKeyManagers();    TrustManager[] trustManagers=new TrustManager[]{createTrustManagerFromDefaultJDKTrustStore()};    sslContext=SSLContext.getInstance("TLS");    sslContext.init(keyManagers,trustManagers,null);    SSLContext.setDefault(sslContext);  } catch (  GeneralSecurityException|IOException e) {    throw new KeyStoreException("Unable to instantiate SSL context",e);  }  return sslContext.getSocketFactory();}  }
class C{  public CIMInstance removeVolumeFromParkingSLOStorageGroup(StorageSystem storage,String nativeId,boolean forceFlag) throws Exception {  CIMInstance parkingSLOStorageGroup=null;  CIMObjectPath volumePath=_cimPath.getVolumePath(storage,nativeId);  CloseableIterator<CIMInstance> cimInstanceItr=null;  String returnedgroupName=null;  try {    cimInstanceItr=getAssociatorInstances(storage,volumePath,null,SmisCommandHelper.MASKING_GROUP_TYPE.SE_DeviceMaskingGroup.name(),null,null,PS_ELEMENT_NAME);    while (cimInstanceItr.hasNext()) {      CIMInstance groupInstance=cimInstanceItr.next();      String elementName=CIMPropertyFactory.getPropertyValue(groupInstance,CP_ELEMENT_NAME);      _log.debug("Found associated masking group {}",groupInstance.getObjectPath().toString());      if (elementName.startsWith(Constants.STORAGE_GROUP_PREFIX)) {        returnedgroupName=elementName;        parkingSLOStorageGroup=groupInstance;      }    }  } catch (  WBEMException ex) {    _log.debug("Failed to find storage group for a volume from SMI-S Provider : " + ex.getMessage());    throw new DeviceControllerException(ex);  } finally {    if (cimInstanceItr != null) {      cimInstanceItr.close();    }  }  if (returnedgroupName != null) {    CIMObjectPath maskingGroupPath=_cimPath.getMaskingGroupPath(storage,returnedgroupName,SmisCommandHelper.MASKING_GROUP_TYPE.SE_DeviceMaskingGroup);    CIMObjectPath[] memberPaths={};    ArrayList<CIMObjectPath> volumePaths=new ArrayList<CIMObjectPath>();    volumePaths.add(volumePath);    memberPaths=volumePaths.toArray(memberPaths);    CIMArgument[] inArgs=getAddOrRemoveMaskingGroupMembersInputArguments(maskingGroupPath,memberPaths,forceFlag);    CIMArgument[] outArgs=new CIMArgument[5];    _log.info("Invoking remove volume:" + nativeId + " from storage group:"+ returnedgroupName);    invokeMethodSynchronously(storage,_cimPath.getControllerConfigSvcPath(storage),SmisConstants.REMOVE_MEMBERS,inArgs,outArgs,null);  } else {    _log.info("Looks like volume is already removed from the storage group," + " could not find storage group for the volume {} on the storage system {}",nativeId,storage.getNativeGuid());  }  return parkingSLOStorageGroup;}  }
class C{  public Matrix4 rotateRad(float axisX,float axisY,float axisZ,float radians){  if (radians == 0)   return this;  quat.setFromAxisRad(axisX,axisY,axisZ,radians);  return rotate(quat);}  }
class C{  private void assertSortedByDistance(DoubleDBIDList results){  double dist=-1.0;  boolean sorted=true;  for (DoubleDBIDListIter it=results.iter(); it.valid(); it.advance()) {    double qr=it.doubleValue();    if (qr < dist) {      sorted=false;    }    dist=qr;  }  if (!sorted) {    try {      ModifiableDoubleDBIDList.class.cast(results).sort();    } catch (    ClassCastException|UnsupportedOperationException e) {      LoggingUtil.warning("WARNING: results not sorted by distance!",e);    }  }}  }
class C{  private boolean isClosed(){  return buf == null;}  }
class C{  @Override public void close() throws IOException {synchronized (lock) {    out.close();  }}  }
class C{  protected void preShow(){  if (mRootView == null)   throw new IllegalStateException("setContentView was not called with a view to display.");  if (mBackground == null)   mWindow.setBackgroundDrawable(mContext.getResources().getDrawable(R.color.grey_400)); else   mWindow.setBackgroundDrawable(mBackground);  mWindow.setTouchable(true);}  }
class C{  protected void clear(){  this.rectList.clear();  this.shapeMap.clear();}  }
class C{  private static String extractClasspath(ClassLoader cl){  StringBuffer buf=new StringBuffer();  while (cl != null) {    if (cl instanceof URLClassLoader) {      URL urls[]=((URLClassLoader)cl).getURLs();      for (int i=0; i < urls.length; i++) {        if (buf.length() > 0) {          buf.append(File.pathSeparatorChar);        }        buf.append(urls[i].getFile().toString());      }    }    cl=cl.getParent();  }  return buf.toString();}  }
class C{  public ClientHello(ProtocolVersion version,SecureRandom secureRandom,List<CertificateType> supportedClientCertificateTypes,List<CertificateType> supportedServerCertificateTypes,InetSocketAddress peerAddress){  this(version,secureRandom,null,supportedClientCertificateTypes,supportedServerCertificateTypes,peerAddress);}  }
class C{  public int compare(Point p1,Point p2){  double x1=p1.getX();  double y1=p1.getY();  double x2=p2.getX();  double y2=p2.getY();  if (y1 == y2) {    if (x1 < x2)     return -1; else     if (x1 == x2)     return 0; else     return 1;  } else   if (y1 < y2)   return -1; else   return 1;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (operator: ");  result.append(operator);  result.append(')');  return result.toString();}  }
class C{  public Object executeFunctionNoArgs(final ScriptEngine engine,final String functionName){  return executeFunction(engine,functionName);}  }
class C{  public void init(PrivateKey key){  try {    if (signature != null) {      signature.initSign(key);    } else     if (cipher != null) {      cipher.init(Cipher.ENCRYPT_MODE,key);    }  } catch (  InvalidKeyException e) {    throw new AlertException(AlertProtocol.BAD_CERTIFICATE,new SSLException("init - invalid private key",e));  }}  }
class C{  public MethodInvocation newMethodInvocation(){  MethodInvocation result=new MethodInvocation(this);  return result;}  }
class C{  public ResultPoint[] detect() throws NotFoundException {  int left=leftInit;  int right=rightInit;  int up=upInit;  int down=downInit;  boolean sizeExceeded=false;  boolean aBlackPointFoundOnBorder=true;  boolean atLeastOneBlackPointFoundOnBorder=false;  while (aBlackPointFoundOnBorder) {    aBlackPointFoundOnBorder=false;    boolean rightBorderNotWhite=true;    while (rightBorderNotWhite && right < width) {      rightBorderNotWhite=containsBlackPoint(up,down,right,false);      if (rightBorderNotWhite) {        right++;        aBlackPointFoundOnBorder=true;      }    }    if (right >= width) {      sizeExceeded=true;      break;    }    boolean bottomBorderNotWhite=true;    while (bottomBorderNotWhite && down < height) {      bottomBorderNotWhite=containsBlackPoint(left,right,down,true);      if (bottomBorderNotWhite) {        down++;        aBlackPointFoundOnBorder=true;      }    }    if (down >= height) {      sizeExceeded=true;      break;    }    boolean leftBorderNotWhite=true;    while (leftBorderNotWhite && left >= 0) {      leftBorderNotWhite=containsBlackPoint(up,down,left,false);      if (leftBorderNotWhite) {        left--;        aBlackPointFoundOnBorder=true;      }    }    if (left < 0) {      sizeExceeded=true;      break;    }    boolean topBorderNotWhite=true;    while (topBorderNotWhite && up >= 0) {      topBorderNotWhite=containsBlackPoint(left,right,up,true);      if (topBorderNotWhite) {        up--;        aBlackPointFoundOnBorder=true;      }    }    if (up < 0) {      sizeExceeded=true;      break;    }    if (aBlackPointFoundOnBorder) {      atLeastOneBlackPointFoundOnBorder=true;    }  }  if (!sizeExceeded && atLeastOneBlackPointFoundOnBorder) {    int maxSize=right - left;    ResultPoint z=null;    for (int i=1; i < maxSize; i++) {      z=getBlackPointOnSegment(left,down - i,left + i,down);      if (z != null) {        break;      }    }    if (z == null) {      throw NotFoundException.getNotFoundInstance();    }    ResultPoint t=null;    for (int i=1; i < maxSize; i++) {      t=getBlackPointOnSegment(left,up + i,left + i,up);      if (t != null) {        break;      }    }    if (t == null) {      throw NotFoundException.getNotFoundInstance();    }    ResultPoint x=null;    for (int i=1; i < maxSize; i++) {      x=getBlackPointOnSegment(right,up + i,right - i,up);      if (x != null) {        break;      }    }    if (x == null) {      throw NotFoundException.getNotFoundInstance();    }    ResultPoint y=null;    for (int i=1; i < maxSize; i++) {      y=getBlackPointOnSegment(right,down - i,right - i,down);      if (y != null) {        break;      }    }    if (y == null) {      throw NotFoundException.getNotFoundInstance();    }    return centerEdges(y,z,x,t);  } else {    throw NotFoundException.getNotFoundInstance();  }}  }
class C{  @Override public Instance transformInstance(Instance x) throws Exception {  Instances tmpInst=new Instances(x.dataset());  tmpInst.delete();  tmpInst.add(x);  Instances features=this.extractPart(tmpInst,false);  Instances labels=new Instances(this.m_PatternInstances);  labels.add(new DenseInstance(labels.numAttributes()));  Instances result=Instances.mergeInstances(labels,features);  result.setClassIndex(labels.numAttributes());  return result.instance(0);}  }
class C{  private URL buildUrl(String postcode){  try {    StringBuffer urlStr=new StringBuffer();    urlStr.append(serverUrl);    urlStr.append(serverUrl.endsWith("/") ? "" : "/");    urlStr.append("/query?op=query&");    urlStr.append("cc=" + clientID + "&");    urlStr.append("ac=" + accessCode + "&");    urlStr.append("DSGID=1&AmbiguityId=1&MaxReturns=250&FieldList=&ParamList=&sAppID=Adempiere&MaxReturns=200");    urlStr.append("&Lookfor=" + postcode);    URL url=new URL(urlStr.toString());    return url;  } catch (  MalformedURLException e) {    log.log(Level.SEVERE,"Lookup URL: " + e.getMessage());    e.printStackTrace();  }  return null;}  }
class C{  public RequestHandle head(Context context,String url,Header[] headers,RequestParams params,ResponseHandlerInterface responseHandler){  HttpUriRequest request=new HttpHead(getUrlWithQueryString(isUrlEncodingEnabled,url,params));  if (headers != null)   request.setHeaders(headers);  return sendRequest(httpClient,httpContext,request,null,responseHandler,context);}  }
class C{  public void updateHistory(Context context,String address){  log.debug("history updated for:" + address);  for (  ExchangeHistoryItem item : history) {    if (item.address.equals(address)) {      item.attempts=0;      item.storeVersion=MessageStore.getInstance(context).getStoreVersion();      item.lastExchangeTime=System.currentTimeMillis();      item.lastPicked=System.currentTimeMillis();      return;    }  }  history.add(new ExchangeHistoryItem(address,MessageStore.getInstance(context).getStoreVersion(),System.currentTimeMillis()));}  }
class C{  public static void initLazyProperty(Object proxyedPropertyValue){  Hibernate.initialize(proxyedPropertyValue);}  }
class C{  public byte[] array(){  return memory.array();}  }
class C{  public EtlRecordReader(InputSplit split,TaskAttemptContext context) throws IOException, InterruptedException {  initialize(split,context);}  }
class C{  public JobCpeBuilder(String name,InputStream inputStream) throws BaleenException {  super(name,inputStream);}  }
class C{  public synchronized void autoBackup() throws IOException {  String setName=suggestBackupSetName();  copyBackupSet(getOperationsRoot(),new File(getBackupRoot(),setName));}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildFarmer(zone);}  }
class C{  @Override public void pauseChanged(){}  }
class C{  public void logPurchase(BigDecimal purchaseAmount,Currency currency){  logPurchase(purchaseAmount,currency,null);}  }
class C{  public void run(){  if (getTextEditor() instanceof TLAEditor) {    TLAEditor editor=(TLAEditor)getTextEditor();    editor.runFoldOperation(getActionDefinitionId());  }}  }
class C{  protected String defaultClustererString(){  return SimpleKMeans.class.getName();}  }
class C{  public static String makeLogTag(Class<?> cls){  return makeLogTag(cls.getSimpleName());}  }
class C{  public boolean canExternalFrame(){  List constraints=dockPanel.getConstraints(getChildren());  return DockConstraint.canExternalFrame(constraints);}  }
class C{  public void updateFrameTitle(){  if (getParentFrame() != null) {    getParentFrame().setTitle(getFrameTitle());  }  if (getParentInternalFrame() != null) {    getParentInternalFrame().setTitle(getFrameTitle());  }}  }
class C{  private long toEpochNano(){  long nod=time.toNanoOfDay();  long offsetNanos=offset.getTotalSeconds() * NANOS_PER_SECOND;  return nod - offsetNanos;}  }
class C{  public static String normalizeRegistrarName(String name){  return Ascii.toLowerCase(javaLetterOrDigit().retainFrom(name));}  }
class C{  protected String suffix(){  return suffix;}  }
class C{  public BorderPropertySet darken(IdentValue style){  BorderPropertySet bc=new BorderPropertySet(this);  bc._topColor=_topColor == null ? null : _topColor.darkenColor();  bc._bottomColor=_bottomColor == null ? null : _bottomColor.darkenColor();  bc._leftColor=_leftColor == null ? null : _leftColor.darkenColor();  bc._rightColor=_rightColor == null ? null : _rightColor.darkenColor();  return bc;}  }
class C{  protected CCBlink(float t,int b){  super(t);  times=b;}  }
class C{  public void addAll(XAtomList atoms){  Iterator<XAtom> iter=atoms.iterator();  while (iter.hasNext()) {    add(iter.next());  }}  }
class C{  public File makeMasterCopy(){  File file=makeCopy();  if (file != null) {    file.setMasterCopy(true);  }  return file;}  }
class C{  protected void removeListeners(int eventID){  Window topLevelWindows[]=EventQueueMonitor.getTopLevelWindows();  if (topLevelWindows != null) {    for (int i=0; i < topLevelWindows.length; i++) {      removeListeners(topLevelWindows[i],eventID);    }  }}  }
class C{  public DTMStringPool(int chainSize){  m_intToString=new Vector();  m_hashChain=new IntVector(chainSize);  removeAllElements();  stringToIndex("");}  }
class C{  private static void usage(){  System.err.println("Usage: ReferenceStress [-verbose] [-threads n] [-size s] [-iterations i] [perf|base]");  System.exit(1);}  }
class C{  public static String renderPassthruAttributes(FacesContext context,UIComponent component){  int i=0, len=passthruAttributes.length;  String value;  boolean thisIsTheFirstAppend=true;  StringBuffer renderedText=new StringBuffer();  for (i=0; i < len; i++) {    if (null != (value=(String)component.getAttributes().get(passthruAttributes[i]))) {      if (thisIsTheFirstAppend) {        renderedText.append(' ');        thisIsTheFirstAppend=false;      }      renderedText.append(passthruAttributes[i] + "=\"" + value+ "\" ");    }  }  return renderedText.toString();}  }
class C{  public static boolean CS_TRIPLET(Dcs A){  return (A != null && (A.nz >= 0));}  }
class C{  public static <T extends ResCloudlet>boolean move(List<T> listFrom,List<T> listTo,T cloudlet){  if (listFrom.remove(cloudlet)) {    listTo.add(cloudlet);    return true;  }  return false;}  }
class C{  public DeleteRequestMessage(DeleteRequestMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  if (other.isSetStoreName()) {    this.storeName=other.storeName;  }  if (other.isSetKey()) {    this.key=org.apache.thrift.TBaseHelper.copyBinary(other.key);    ;  }  if (other.isSetVersion()) {    this.version=new VectorClock(other.version);  }}  }
class C{  private void jbInit() throws Exception {  this.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);  this.setTitle(s_res.getString("LookAndFeelEditor"));  mainPanel.setLayout(mainLayout);  mainLayout.setHgap(5);  mainLayout.setVgap(5);  jTextFieldFlat.setColumns(10);  jTextFieldGradient.setColumns(10);  jTextFieldTexture.setColumns(10);  jTextFieldLines.setColumns(10);  jCheckBoxLines.setText("jCheckBox");  jCheckBoxTexture.setText("jCheckBox");  jCheckBoxGradient.setText("jCheckBox");  jCheckBoxFlat.setText("jCheckBox");  jPanelGradient.setToolTipText("Indented Level 1");  jPanelTexture.setToolTipText("Indented Level 2");  jPanelLines.setToolTipText("Indented Level 1");  this.getContentPane().add(mainPanel,BorderLayout.CENTER);  lfLabel.setText(s_res.getString("LookAndFeel"));  lfField.addActionListener(this);  themeLabel.setText(s_res.getString("Theme"));  themeField.addActionListener(this);  rButton.setText(s_res.getString("Reset"));  rButton.addActionListener(this);  blindLabel.setText(s_res.getString("ColorBlind"));  blindField.addActionListener(this);  bOK.addActionListener(this);  bCancel.addActionListener(this);  bHelp.addActionListener(this);  northPanel.setLayout(northLayout);  southPanel.setLayout(southLayout);  southLayout.setAlignment(FlowLayout.RIGHT);  exampleBorder=new TitledBorder(s_res.getString("Example"));  example.setBorder(exampleBorder);  jLabel1.setText("jLabel");  jTextField1.setText("jTextField");  jCheckBox1.setText("jCheckBox");  jRadioButton1.setText("jRadioButton");  jButton1.setText("jButton");  jToggleButton1.setText("jToggleButton");  jTextArea1.setText("jTextArea");  jTextPane1.setText("jTextPane");  jEditorPane1.setText("jEditorPane");  jPasswordField1.setText("jPasswordField");  jPanel2.setLayout(borderLayout1);  jPanel1.setLayout(gridBagLayout1);  jScrollPane1.setPreferredSize(new Dimension(100,200));  jScrollPane2.setPreferredSize(new Dimension(100,200));  jButtonFlat.setText("Confirm");  jButtonGardient.setText("Input");  jButtonTexture.setText("Message");  jButtonLines.setText("Error");  jTextFieldFlat.setText("jTextField");  jLabelFlat.setText("jLabel");  jTextFieldGradient.setText("jTextField");  jLabelGradient.setText("jLabel");  jTextFieldTexture.setText("jTextField");  jLabelTexture.setText("jLabel");  jTextFieldLines.setText("jTextField");  jLabelLines.setText("jLabel");  mainPanel.add(northPanel,BorderLayout.NORTH);  northPanel.add(lfLabel,new GridBagConstraints(0,0,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(12,12,5,5),0,0));  northPanel.add(lfField,new GridBagConstraints(1,0,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(12,0,5,12),0,0));  northPanel.add(themeLabel,new GridBagConstraints(0,1,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,12,5,5),0,0));  northPanel.add(themeField,new GridBagConstraints(1,1,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,0,5,12),0,0));  northPanel.add(rButton,new GridBagConstraints(0,2,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,12,5,5),0,0));  northPanel.add(blindLabel,new GridBagConstraints(0,5,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,12,5,5),0,0));  northPanel.add(blindField,new GridBagConstraints(1,5,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,0,5,12),0,0));  mainPanel.add(southPanel,BorderLayout.SOUTH);  southPanel.add(bCancel,null);  southPanel.add(bOK,null);  mainPanel.add(example,BorderLayout.CENTER);  example.add(jPanel1,"JPanel");  jPanel1.add(jTextPane1,new GridBagConstraints(2,3,1,1,0.0,0.2,GridBagConstraints.CENTER,GridBagConstraints.BOTH,new Insets(5,5,5,5),0,0));  jPanel1.add(jEditorPane1,new GridBagConstraints(1,3,1,1,0.0,0.2,GridBagConstraints.CENTER,GridBagConstraints.BOTH,new Insets(5,5,5,5),0,0));  jPanel1.add(jList1,new GridBagConstraints(1,2,1,1,0.0,0.2,GridBagConstraints.CENTER,GridBagConstraints.BOTH,new Insets(5,5,5,5),0,0));  jPanel1.add(jLabel1,new GridBagConstraints(0,0,1,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  jPanel1.add(jTextField1,new GridBagConstraints(1,0,1,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.HORIZONTAL,new Insets(5,5,5,5),0,0));  jPanel1.add(jCheckBox1,new GridBagConstraints(0,1,1,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.NONE,new Insets(1,1,1,1),0,0));  jPanel1.add(jRadioButton1,new GridBagConstraints(1,1,1,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  jPanel1.add(jButton1,new GridBagConstraints(2,0,1,1,0.0,0.1,GridBagConstraints.CENTER,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  jPanel1.add(jToggleButton1,new GridBagConstraints(2,1,1,1,0.0,0.1,GridBagConstraints.CENTER,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  jPanel1.add(jTextArea1,new GridBagConstraints(0,3,1,1,0.0,0.2,GridBagConstraints.CENTER,GridBagConstraints.BOTH,new Insets(5,5,5,5),0,0));  jPanel1.add(jComboBox1,new GridBagConstraints(0,2,1,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  jPanel1.add(jPasswordField1,new GridBagConstraints(2,2,1,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.HORIZONTAL,new Insets(5,5,5,5),0,0));  example.add(jPanel2,"JPanel");  jPanel2.add(jSplitPane1,BorderLayout.CENTER);  jSplitPane1.add(jScrollPane1,JSplitPane.LEFT);  jSplitPane1.add(jScrollPane2,JSplitPane.RIGHT);  jPanelFlat.setName("FlatP");  jPanelGradient.setName("GradientP");  jPanelTexture.setName("TextureP");  jPanelLines.setName("LineP");  example.add(jPanelFlat,"jPanel Flat");  jPanelFlat.add(jButtonFlat,null);  jPanelFlat.add(jComboBoxFlat,null);  example.add(jPanelGradient,"jPanel Gradient 1");  jPanelGradient.add(jButtonGardient,null);  jPanelGradient.add(jComboBoxGradient,null);  jPanelGradient.add(jLabelGradient,null);  jPanelGradient.add(jTextFieldGradient,null);  example.add(jPanelTexture,"jPanel Texture 2");  jPanelTexture.add(jButtonTexture,null);  jPanelTexture.add(jComboBoxTexture,null);  jPanelTexture.add(jLabelTexture,null);  jPanelTexture.add(jTextFieldTexture,null);  example.add(jPanelLines,"jPanel Lines 1");  jPanelLines.add(jButtonLines,null);  jPanelLines.add(jComboBoxLines,null);  jPanelLines.add(jLabelLines,null);  jPanelLines.add(jTextFieldLines,null);  jScrollPane2.getViewport().add(jTable1,null);  jScrollPane1.getViewport().add(jTree1,null);  jPanelFlat.add(jLabelFlat,null);  jPanelFlat.add(jTextFieldFlat,null);  jPanelLines.add(jCheckBoxLines,null);  jPanelTexture.add(jCheckBoxTexture,null);  jPanelGradient.add(jCheckBoxGradient,null);  jPanelFlat.add(jCheckBoxFlat,null);}  }
class C{  private void updateFilter(){  createVignetteShader();  paint.setShader(new ComposeShader(bitmapShader,vignetteShader,PorterDuff.Mode.DARKEN));  setColorMatrix();  paint.setColorFilter(new ColorMatrixColorFilter(colorMatrix));  invalidateSelf();}  }
class C{  public void putTagWord(long word){  for (int i=0; i < numRegisters; i++) {    tags[i]=(byte)(word & 3);    word=word >> 2;  }}  }
class C{  @Override @Unpreemptible("Unwind stack possibly from unpreemptible code") public void unwindStackFrame(CompiledMethod compiledMethod,AbstractRegisters registers){  Address fp=registers.getInnermostFramePointer();  OptCompiledMethod optMethod=(OptCompiledMethod)compiledMethod;  if (TRACE) {    VM.sysWrite("Registers before unwinding frame for ");    VM.sysWrite(optMethod.getMethod());    VM.sysWrite("\n");    for (    GPR reg : GPR.values()) {      VM.sysWrite(reg.toString());      VM.sysWrite(" = ");      VM.sysWrite(registers.getGPRs().get(reg.value()));      VM.sysWrite("\n");    }  }  int frameOffset=optMethod.getUnsignedNonVolatileOffset();  for (int i=optMethod.getFirstNonVolatileGPR(); i < NUM_NONVOLATILE_GPRS; i++, frameOffset+=BYTES_IN_ADDRESS) {    registers.getGPRs().set(NONVOLATILE_GPRS[i].value(),fp.minus(frameOffset).loadWord());  }  if (VM.VerifyAssertions)   VM._assert(NUM_NONVOLATILE_FPRS == 0);  registers.unwindStackFrame();  if (TRACE) {    VM.sysWrite("Registers after unwinding frame for ");    VM.sysWrite(optMethod.getMethod());    VM.sysWrite("\n");    for (    GPR reg : GPR.values()) {      VM.sysWrite(reg.toString());      VM.sysWrite(" = ");      VM.sysWrite(registers.getGPRs().get(reg.value()));      VM.sysWrite("\n");    }  }}  }
class C{  public OrderPositionSplit(OrderPositionSplitKey sId){  Assert.notNull(sId);  this.splitId=sId;  this.priority=position.getPriority();}  }
class C{  private void createHelpMenu(Column column){  JComponent label=createMenuTitle("Help");  column.addComponent(label);  JMenuItem item=createMenuItem("Manual","manual");  column.addComponent(item);  item=createMenuItem("FAQ","faq");  column.addComponent(item);  item=createMenuItem("Beginners Guide","beginnersguide");  column.addComponent(item);  item=createMenuItem("Commands","help");  column.addComponent(item);  item=createMenuItem("Rules","rules");  column.addComponent(item);}  }
class C{  public String attributeIndicesTipText(){  return "Specify range of attributes to act on; " + "this is a comma separated list of attribute indices, with " + "\"first\" and \"last\" valid values; Specify an inclusive "+ "range with \"-\"; eg: \"first-3,5,6-10,last\".";}  }
class C{  @Override public void run(){  amIActive=true;  String demHeader=null;  String upSlopeHeader=null;  String creekHeader=null;  String localInHeader=null;  double mdInfPower=1;  String outputType=null;  boolean logTransform=false;  int numRows;  int numCols;  int row;  int col;  int x;  int y;  double z;  int i;  int c;  double noData;  float progress=0;  if (args.length == 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  demHeader=args[0];  upSlopeHeader=args[1];  creekHeader=args[2];  localInHeader=args[3];  mdInfPower=Double.parseDouble(args[4]);  outputType=args[5].toLowerCase();  logTransform=Boolean.parseBoolean(args[6]);  if (!args[7].toLowerCase().equals("not specified")) {    caThreshold=Double.parseDouble(args[7]);  } else {    caThreshold=-9999;  }  if ((demHeader == null) || (upSlopeHeader == null) || (creekHeader == null)|| (localInHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    dem=new WhiteboxRaster(demHeader,"r");    numRows=dem.getNumberRows();    numCols=dem.getNumberColumns();    noData=dem.getNoDataValue();    gridRes=dem.getCellSizeX();    upSlope=new WhiteboxRaster(upSlopeHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,1);    upSlope.setPreferredPalette("blueyellow.pal");    upSlope.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    upSlope.setZUnits("dimensionless");    creek=new WhiteboxRaster(creekHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,1);    creek.setPreferredPalette("blueyellow.pal");    creek.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    creek.setZUnits("dimensionless");    localIn=new WhiteboxRaster(localInHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,1);    localIn.setPreferredPalette("blueyellow.pal");    localIn.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    localIn.setZUnits("dimensionless");    tmpArea=new WhiteboxRaster(upSlopeHeader.replace(".dep","_tmp1.dep"),"rw",demHeader,WhiteboxRaster.DataType.FLOAT,noData);    tmpArea.isTemporaryFile=true;    tmpCount=new WhiteboxRaster(upSlopeHeader.replace(".dep","_tmp2.dep"),"rw",demHeader,WhiteboxRaster.DataType.FLOAT,noData);    tmpCount.isTemporaryFile=true;    updateProgress("Loop 1 of 4:",0);    for (row=0; row < numRows; row++) {      for (col=0; col < numCols; col++) {        z=dem.getValue(row,col);        if (z != noData) {          i=0;          for (c=0; c < 8; c++) {            x=col + xd[c];            y=row + yd[c];            if (z < dem.getValue(y,x)) {              i++;            }          }          tmpCount.setValue(row,col,i);          tmpArea.setValue(row,col,1);          upSlope.setValue(row,col,0);          creek.setValue(row,col,0);          localIn.setValue(row,col,0);        } else {          tmpArea.setValue(row,col,noData);          upSlope.setValue(row,col,noData);          creek.setValue(row,col,noData);          localIn.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 1 of 4:",(int)progress);    }    updateProgress("Loop 2 of 4:",0);    for (row=0; row < numRows; row++) {      for (col=0; col < numCols; col++) {        if (dem.getValue(row,col) != noData) {          if (tmpCount.getValue(row,col) == 0) {            MDInfAccum(row,col,mdInfPower,noData);          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 2 of 4:",(int)progress);    }    updateProgress("Loop 3 of 4:",0);switch (outputType) {case "specific catchment area (sca)":      for (row=0; row < numRows; row++) {        for (col=0; col < numCols; col++) {          if (upSlope.getValue(row,col) != noData) {            upSlope.setValue(row,col,upSlope.getValue(row,col) * gridRes);          }          if (creek.getValue(row,col) != noData) {            creek.setValue(row,col,creek.getValue(row,col) * gridRes);          }          if (localIn.getValue(row,col) != noData) {            localIn.setValue(row,col,localIn.getValue(row,col) * gridRes);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (numRows - 1));        updateProgress("Loop 3 of 4:",(int)progress);      }    break;case "total catchment area":  double gridCellArea=gridRes * gridRes;for (row=0; row < numRows; row++) {  for (col=0; col < numCols; col++) {    if (upSlope.getValue(row,col) != noData) {      upSlope.setValue(row,col,upSlope.getValue(row,col) * gridCellArea);    }    if (creek.getValue(row,col) != noData) {      creek.setValue(row,col,creek.getValue(row,col) * gridCellArea);    }    if (localIn.getValue(row,col) != noData) {      localIn.setValue(row,col,localIn.getValue(row,col) * gridCellArea);    }  }  if (cancelOp) {    cancelOperation();    return;  }  progress=(float)(100f * row / (numRows - 1));  updateProgress("Loop 3 of 4:",(int)progress);}break;}updateProgress("Loop 4 of 4:",0);if (logTransform) {for (row=0; row < numRows; row++) {for (col=0; col < numCols; col++) {if (upSlope.getValue(row,col) != noData) {  upSlope.setValue(row,col,Math.log(upSlope.getValue(row,col)));}if (creek.getValue(row,col) != noData) {  creek.setValue(row,col,Math.log(creek.getValue(row,col)));}if (localIn.getValue(row,col) != noData) {  localIn.setValue(row,col,Math.log(localIn.getValue(row,col)));}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (numRows - 1));updateProgress("Loop 4 of 4:",(int)progress);}} else {upSlope.setNonlinearity(0.2);}upSlope.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");upSlope.addMetadataEntry("Created on " + new Date());creek.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");creek.addMetadataEntry("Created on " + new Date());localIn.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");localIn.addMetadataEntry("Created on " + new Date());dem.close();upSlope.close();creek.close();localIn.close();tmpArea.close();tmpCount.close();returnData(upSlopeHeader);} catch (Exception e) {showFeedback(e.getMessage());} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public EditText(@NonNull final Context context){  super(context);  initialize(null);}  }
class C{  public Statement(TypedOperation operation){  this(operation,new ArrayList<RelativeNegativeIndex>());}  }
class C{  public AccessibilityNodeInfo findFocus(int focus){  enforceSealed();  enforceValidFocusType(focus);  if (!canPerformRequestOverConnection(mSourceNodeId)) {    return null;  }  return AccessibilityInteractionClient.getInstance().findFocus(mConnectionId,mWindowId,mSourceNodeId,focus);}  }
class C{  public int toFlagValue(){  return this.flagValue;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:01.623 -0500",hash_original_method="D69703D23BD1E07705411D82E1BC609A",hash_generated_method="C5040BC5656BEBDC231ACBEEDEBE09FC") private boolean scrollToChildRect(Rect rect,boolean immediate){  final int delta=computeScrollDeltaToGetChildRectOnScreen(rect);  final boolean scroll=delta != 0;  if (scroll) {    if (immediate) {      scrollBy(0,delta);    } else {      smoothScrollBy(0,delta);    }  }  return scroll;}  }
class C{  private static void checkArguments(final AbstractSQLProvider provider,final INaviAddressSpace addressSpace){  Preconditions.checkNotNull(provider,"IE00387: Provider argument can not be null");  Preconditions.checkNotNull(addressSpace,"IE00388: Address space argument can not be null");  Preconditions.checkArgument(addressSpace.inSameDatabase(provider),"IE00389: Address space is not part of this database");}  }
class C{  public static BigInteger norm(final byte mu,ZTauElement lambda){  BigInteger norm;  BigInteger s1=lambda.u.multiply(lambda.u);  BigInteger s2=lambda.u.multiply(lambda.v);  BigInteger s3=lambda.v.multiply(lambda.v).shiftLeft(1);  if (mu == 1) {    norm=s1.add(s2).add(s3);  } else   if (mu == -1) {    norm=s1.subtract(s2).add(s3);  } else {    throw new IllegalArgumentException("mu must be 1 or -1");  }  return norm;}  }
class C{  public int compare(Date o1,Date o2){  return CoreUtils.nullSafeComparator(o1.getZonedDateTime(),o2.getZonedDateTime());}  }
class C{  protected void write(StringBuffer buffer){  System.err.println(buffer.toString());}  }
class C{  public boolean isOpen(){  return PERIODSTATUS_Open.equals(getPeriodStatus());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:13.991 -0400",hash_original_method="E46B1D208664A69A4587743EEBDE80DC",hash_generated_method="A2BE8DA1762F86442F74EF349B36F531") public PathMeasure(Path path,boolean forceClosed){  native_instance=native_create(path != null ? path.ni() : 0,forceClosed);}  }
class C{  public DateMidnight(long instant,DateTimeZone zone){  super(instant,zone);}  }
class C{  protected void copyExternalResources(File sourceDir,File destDir) throws IOException {  copyExternalResources(sourceDir,destDir,null);}  }
class C{  public boolean apply(ObjectName name) throws BadStringOperationException, BadBinaryOpValueExpException, BadAttributeValueExpException, InvalidApplicationException {  ValueExp val=exp.apply(name);  if (!(val instanceof StringValueExp)) {    return false;  }  return wildmatch(((StringValueExp)val).getValue(),pattern);}  }
class C{  public boolean logModified(Logger log){  if (_isDigestModified) {    log.info(_source.getNativePath() + " digest is modified.");    return true;  }  long sourceLastModified=_source.getLastModified();  long sourceLength=_source.length();  if (!_requireSource && sourceLastModified == 0) {    return false;  } else   if (sourceLength != _length) {    log.info(_source.getNativePath() + " length is modified (" + _length+ " -> "+ sourceLength+ ")");    return true;  } else   if (sourceLastModified != _lastModified) {    log.info(_source.getNativePath() + " time is modified.");    return true;  } else   return false;}  }
class C{  private void fixCtrlH(){  InputMap inputMap=getInputMap();  KeyStroke char010=KeyStroke.getKeyStroke("typed \010");  InputMap parent=inputMap;  while (parent != null) {    parent.remove(char010);    parent=parent.getParent();  }  KeyStroke backspace=KeyStroke.getKeyStroke("BACK_SPACE");  inputMap.put(backspace,DefaultEditorKit.deletePrevCharAction);}  }
class C{  public void initArray() throws IOException {  print("initArray",null);}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  @SuppressWarnings("unchecked") public void testSinglePolymorphic() throws Exception {  ObjectMapper mapper=getJaxbMapper();  Bean input=new Bean(new Buffalo("Billy","brown"));  String str=mapper.writeValueAsString(input);  Map<String,Object> map=mapper.readValue(str,Map.class);  assertEquals(2,map.size());  Map<String,Object> map2=(Map<String,Object>)map.get("animal");  assertNotNull(map2);  assertEquals(1,map2.size());  assertTrue(map2.containsKey("beefalot"));  Map<String,Object> map3=(Map<String,Object>)map2.get("beefalot");  assertEquals(2,map3.size());  Bean result=mapper.readValue(str,Bean.class);  Animal a=result.animal;  assertNotNull(a);  assertEquals(Buffalo.class,a.getClass());  assertEquals("Billy",a.nickname);  assertEquals("brown",((Buffalo)a).hairColor);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void waitChange(NamedBean[] mInputs){  waitChange(mInputs,-1);}  }
class C{  @Override public boolean equals(Object obj){  if (obj instanceof MutableDouble) {    return d == ((MutableDouble)obj).d;  }  return false;}  }
class C{  public void testClassAnnotations() throws Exception {  ObjectMapper mapper=new ObjectMapper();  SimpleModule module=new SimpleModule("test",Version.unknownVersion());  module.addSerializer(String.class,new AnnotatedContextualSerializer());  mapper.registerModule(module);  assertEquals("{\"value\":\"Voila->xyz\"}",mapper.writeValueAsString(new BeanWithClassConfig("xyz")));}  }
class C{  public TermCriteria(int type,int maxCount,double epsilon){  this.type=type;  this.maxCount=maxCount;  this.epsilon=epsilon;}  }
class C{  public RangeNode(final VarNode var,final IValueExpressionNode from,final IValueExpressionNode to){  this(BOp.NOARGS,NV.asMap(new NV(Annotations.VAR,var),new NV(Annotations.FROM,from),new NV(Annotations.TO,to)));}  }
class C{  public void clear(){  size=0;  offset=0;  currentBufferIndex=-1;  currentBuffer=null;  buffersCount=0;}  }
class C{  final boolean isOnSyncQueue(Node node){  if (node.waitStatus == Node.CONDITION || node.prev == null)   return false;  if (node.next != null)   return true;  return findNodeFromTail(node);}  }
class C{  public static void trace(byte level,String s,Throwable t){  if (s == null)   return;  if (level == SEVERE) {    if (!logged.contains(s)) {      TypeScriptCorePlugin.getDefault().getLog().log(new Status(IStatus.ERROR,TypeScriptCorePlugin.PLUGIN_ID,s,t));      logged.add(s);    }  }  if (!TypeScriptCorePlugin.getDefault().isDebugging())   return;  StringBuilder sb=new StringBuilder(TypeScriptCorePlugin.PLUGIN_ID);  sb.append(" ");  sb.append(levelNames[level]);  sb.append(" ");  sb.append(sdf.format(new Date()));  sb.append(" ");  sb.append(s);  System.out.println(sb.toString());  if (t != null)   t.printStackTrace();}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  private String rewriteExpressionValue(String formula,ExpressionAST expr,List<ExpressionRef> references) throws ScopeException {  if (!references.isEmpty()) {    int line=1;    int col=1;    StringBuilder output=new StringBuilder(formula.length());    int pos=0;    while (pos < formula.length()) {      char c=formula.charAt(pos);      if (c == '\n') {        output.append(c);        line++;        col=1;        pos++;      } else {        ExpressionRef ref=findReference(references,line,col);        if (ref != null && ref.getTokenPosition().getType() != IdentifierType.IDENTIFIER && ref.getReferenceIdentifier() != null) {          String id=ref.prettyPrintIdentifier();          output.append(id);          pos+=ref.getTokenPosition().length();          col+=ref.getTokenPosition().length();        } else {          output.append(c);          pos++;          col++;        }      }    }    return output.toString();  } else {    return formula;  }}  }
class C{  private TextAnnotation loadCoNLLfile(String filename) throws FileNotFoundException {  logger.info("Reading: " + filename);  List<String> lines=LineIO.read(filename);  List<IntPair> spans=new ArrayList<>();  List<String> labels=new ArrayList<>();  List<Integer> sentenceEndPositions=new ArrayList<>();  StringBuilder text=new StringBuilder();  int start=-1;  String label="";  int i=0;  for (  String line : lines) {    String[] sline=line.split("\t");    if (line.startsWith("B-")) {      if (start > -1) {        spans.add(new IntPair(start,i));        labels.add(label);      }      start=i;      label=sline[0].split("-")[1];    } else     if (sline[0].startsWith("I-")) {    } else {      if (line.trim().length() == 0) {        if (!sentenceEndPositions.contains(i) && i > 0) {          sentenceEndPositions.add(i);        }      }      if (start > -1) {        spans.add(new IntPair(start,i));        labels.add(label);      }      label="";      start=-1;    }    if (sline.length > 5 && !sline[5].equals("-DOCSTART-") && sline[5].trim().length() > 0) {      text.append(sline[5] + " ");      i++;    }  }  if (start > -1) {    spans.add(new IntPair(start,i));    labels.add(label);  }  if (!sentenceEndPositions.contains(i)) {    sentenceEndPositions.add(i);  }  String filenameonly=IOUtils.getFileName(filename);  List<String[]> tokenizedSentences=Collections.singletonList(text.toString().split(" "));  TextAnnotation ta=BasicTextAnnotationBuilder.createTextAnnotationFromTokens("",filenameonly,tokenizedSentences);  SpanLabelView sentview=new SpanLabelView(ViewNames.SENTENCE,"UserSpecified",ta,1d);  ta.addView(ViewNames.SENTENCE,sentview);  int sentstart=0;  for (  int s : sentenceEndPositions) {    sentview.addSpanLabel(sentstart,s,ViewNames.SENTENCE,1d);    sentstart=s;  }  SpanLabelView emptyview=new SpanLabelView(ViewNames.NER_CONLL,"UserSpecified",ta,1d);  ta.addView(ViewNames.NER_CONLL,emptyview);  for (int k=0; k < labels.size(); k++) {    label=labels.get(k);    IntPair span=spans.get(k);    Constituent c=new Constituent(label,ViewNames.NER_CONLL,ta,span.getFirst(),span.getSecond());    emptyview.addConstituent(c);  }  return ta;}  }
class C{  public boolean contains(S2Point p){  return contains(S2CellId.fromPoint(p));}  }
class C{  public ExtrudedPolygon(Position.PositionList corners){  this(corners.list,1d);}  }
class C{  public void startTiming(){  start_time=getTime();}  }
class C{  @Override public CreditCard toolbarColor(@ColorRes int toolbarColor){  if (toolbarColor == 0) {    Log.e("ToolbarColor","Impossible to set Toolbar Color to 0, default value transparent is set! Please Check it");    mToolbarColor=android.R.color.transparent;  } else {    mToolbarColor=toolbarColor;  }  return this;}  }
class C{  public TvShowTreeCellRenderer(){  tvShowPanel.setLayout(new FormLayout(new ColumnSpec[]{ColumnSpec.decode("min:grow"),FormFactory.LABEL_COMPONENT_GAP_COLSPEC,ColumnSpec.decode("center:20px"),ColumnSpec.decode("center:20px"),ColumnSpec.decode("center:20px")},new RowSpec[]{FormFactory.DEFAULT_ROWSPEC,FormFactory.DEFAULT_ROWSPEC}));  TmmFontHelper.changeFont(tvShowTitle,Font.BOLD);  tvShowTitle.setHorizontalAlignment(JLabel.LEFT);  tvShowTitle.setMinimumSize(new Dimension(0,0));  tvShowTitle.setHorizontalTextPosition(SwingConstants.LEADING);  tvShowPanel.add(tvShowTitle,"1, 1");  tvShowPanel.add(tvShowNfoLabel,"3, 1, 1, 2");  tvShowPanel.add(tvShowImageLabel,"4, 1, 1, 2");  TmmFontHelper.changeFont(tvShowInfo,0.816);  tvShowInfo.setHorizontalAlignment(JLabel.LEFT);  tvShowInfo.setMinimumSize(new Dimension(0,0));  tvShowPanel.add(tvShowInfo,"1, 2");  tvShowSeasonPanel.setLayout(new BoxLayout(tvShowSeasonPanel,BoxLayout.Y_AXIS));  tvShowSeasonPanel.add(tvShowSeasonTitle);  tvShowSeasonTitle.setHorizontalTextPosition(SwingConstants.LEADING);  tvShowEpisodePanel.setLayout(new FormLayout(new ColumnSpec[]{ColumnSpec.decode("min:grow"),FormFactory.LABEL_COMPONENT_GAP_COLSPEC,ColumnSpec.decode("center:20px"),ColumnSpec.decode("center:20px"),ColumnSpec.decode("center:20px")},new RowSpec[]{FormFactory.DEFAULT_ROWSPEC}));  tvShowEpisodeTitle.setMinimumSize(new Dimension(0,0));  tvShowEpisodeTitle.setHorizontalTextPosition(SwingConstants.LEADING);  tvShowEpisodePanel.add(tvShowEpisodeTitle,"1, 1");  tvShowEpisodePanel.add(tvShowEpisodeNfoLabel,"3, 1");  tvShowEpisodePanel.add(tvShowEpisodeImageLabel,"4, 1");  tvShowEpisodePanel.add(tvShowEpisodeSubtitleLabel,"5, 1");}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  static void ownerTests(Path dir) throws IOException {  System.out.println("-- Owner Tests  --");  Path file=dir.resolve("gus");  System.out.format("create %s\n",file);  Files.createFile(file);  try {    PosixFileAttributeView view=Files.getFileAttributeView(file,PosixFileAttributeView.class);    PosixFileAttributes attrs=view.readAttributes();    view.setOwner(attrs.owner());    view.setGroup(attrs.group());    UserPrincipal owner=(UserPrincipal)Files.getAttribute(file,"posix:owner");    Files.setAttribute(file,"posix:owner",owner);    UserPrincipal group=(UserPrincipal)Files.getAttribute(file,"posix:group");    Files.setAttribute(file,"posix:group",group);  }  finally {    Files.delete(file);  }  System.out.println("OKAY");}  }
class C{  public static void serializeMeterReply(List<OFMeterStatsReply> meterReplies,JsonGenerator jGen) throws IOException, JsonProcessingException {  OFMeterStatsReply meterReply=meterReplies.get(0);  jGen.writeStringField("version",meterReply.getVersion().toString());  jGen.writeFieldName("meter");  jGen.writeStartArray();  for (  OFMeterStats entry : meterReply.getEntries()) {    jGen.writeStartObject();    jGen.writeNumberField("meterId",entry.getMeterId());    jGen.writeNumberField("flowCount",entry.getFlowCount());    jGen.writeNumberField("packetInCount",entry.getPacketInCount().getValue());    jGen.writeNumberField("byteInCount",entry.getByteInCount().getValue());    jGen.writeFieldName("meterBandStats");    jGen.writeStartArray();    for (    OFMeterBandStats bandStats : entry.getBandStats()) {      jGen.writeStartObject();      jGen.writeNumberField("packetBandCount",bandStats.getPacketBandCount().getValue());      jGen.writeNumberField("byteBandCount",bandStats.getByteBandCount().getValue());      jGen.writeEndObject();    }    jGen.writeEndArray();    jGen.writeNumberField("durationSec",entry.getDurationSec());    jGen.writeNumberField("durationNsec",entry.getDurationNsec());    jGen.writeEndObject();  }  jGen.writeEndArray();}  }
class C{  public static Executor createExecutor(int threadPoolSize,int threadPriority,CCwantQueueProcessingType tasksProcessingType){  boolean lifo=tasksProcessingType == CCwantQueueProcessingType.LIFO;  BlockingQueue<Runnable> taskQueue=lifo ? new CCwantLIFOLinkedBlockingDeque<Runnable>() : new LinkedBlockingQueue<Runnable>();  return new ThreadPoolExecutor(threadPoolSize,threadPoolSize,0L,TimeUnit.MILLISECONDS,taskQueue,createThreadFactory(threadPriority,"uil-pool-"));}  }
class C{  @Override protected void doAction(){  try {    DExamineSsl dExamineSsl=new DExamineSsl(frame,kseFrame);    dExamineSsl.setLocationRelativeTo(frame);    dExamineSsl.setVisible(true);    String sslHost=dExamineSsl.getSslHost();    int sslPort=dExamineSsl.getSslPort();    boolean useClientAuth=dExamineSsl.useClientAuth();    KeyStoreHistory ksh=dExamineSsl.getKeyStore();    if (dExamineSsl.wasCancelled()) {      return;    }    DExaminingSsl dExaminingSsl=new DExaminingSsl(frame,sslHost,sslPort,useClientAuth,ksh);    dExaminingSsl.setLocationRelativeTo(frame);    dExaminingSsl.startExamination();    dExaminingSsl.setVisible(true);    SslConnectionInfos sslInfos=dExaminingSsl.getSSLConnectionInfos();    if (sslInfos == null || sslInfos.getServerCertificates() == null) {      return;    }    DViewCertificate dViewCertificate=new DViewCertificate(frame,MessageFormat.format(res.getString("ExamineSslAction.CertDetailsSsl.Title"),sslHost,Integer.toString(sslPort)),sslInfos.getServerCertificates(),kseFrame,DViewCertificate.IMPORT);    dViewCertificate.setLocationRelativeTo(frame);    dViewCertificate.setVisible(true);  } catch (  Exception ex) {    DError.displayError(frame,ex);  }}  }
class C{  public static boolean writeFile(String filePath,String content,boolean append){  if (StringUtils.isEmpty(content)) {    return false;  }  FileWriter fileWriter=null;  try {    makeDirs(filePath);    fileWriter=new FileWriter(filePath,append);    fileWriter.write(content);    fileWriter.close();    return true;  } catch (  IOException e) {    throw new RuntimeException("IOException occurred. ",e);  } finally {    if (fileWriter != null) {      try {        fileWriter.close();      } catch (      IOException e) {        throw new RuntimeException("IOException occurred. ",e);      }    }  }}  }
class C{  public void moving(){  boolean callUpdate=false;synchronized (this) {    if (state == State.STOPPED) {      state=State.MOVING;      callUpdate=true;    }  }}  }
class C{  @SuppressWarnings("unchecked") public static <T>T newInstance(final ServletConfig servletConfig,final Class<?> owningClass,final Class<? extends T> iface,final String name,final String def) throws ServletException {  final String s=getConfigParam(servletConfig,owningClass,name,def);  final T t;  final Class<? extends T> cls;  try {    cls=(Class<? extends T>)Class.forName(s);  } catch (  ClassNotFoundException e) {    throw new ServletException("cls=" + s + "cause="+ e,e);  }  if (!iface.isAssignableFrom(cls))   throw new IllegalArgumentException(name + ":: " + s+ " must extend "+ iface.getName());  try {    t=(T)cls.newInstance();  } catch (  InstantiationException e) {    throw new ServletException(e);  }catch (  IllegalAccessException e) {    throw new ServletException(e);  }  return t;}  }
class C{  public void addInterceptor(final Class<?> interceptor){  boolean hasInterface=ReflectKit.hasInterface(interceptor,Interceptor.class);  if (null == interceptor || !hasInterface) {    return;  }  Intercept intercept=interceptor.getAnnotation(Intercept.class);  String partten="/.*";  if (null != intercept) {    partten=intercept.value();  }  try {    Method before=interceptor.getMethod("before",Request.class,Response.class);    Method after=interceptor.getMethod("after",Request.class,Response.class);    buildInterceptor(partten,interceptor,before,HttpMethod.BEFORE);    buildInterceptor(partten,interceptor,after,HttpMethod.AFTER);  } catch (  NoSuchMethodException e) {    e.printStackTrace();  }catch (  SecurityException e) {    e.printStackTrace();  }}  }
class C{  @Override default Streamable<T> intersperse(final T value){  return fromStream(reactiveSeq().intersperse(value));}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public synchronized boolean containsKey(Object key){  Entry<?,?> tab[]=table;  int hash=key.hashCode();  int index=(hash & 0x7FFFFFFF) % tab.length;  for (Entry<?,?> e=tab[index]; e != null; e=e.next) {    if ((e.hash == hash) && e.key.equals(key)) {      return true;    }  }  return false;}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public ImmutableSet<V> removeAll(Object key){  throw new UnsupportedOperationException();}  }
class C{  public byte[] generateMwk(byte[] desBytes){  if (debug) {    Debug.logInfo("DES Key : " + StringUtil.toHexString(desBytes) + " / "+ desBytes.length,module);  }  SecretKeyFactory skf1=null;  SecretKey mwk=null;  try {    skf1=SecretKeyFactory.getInstance("DESede");  } catch (  NoSuchAlgorithmException e) {    Debug.logError(e,module);  }  DESedeKeySpec desedeSpec2=null;  try {    desedeSpec2=new DESedeKeySpec(desBytes);  } catch (  InvalidKeyException e) {    Debug.logError(e,module);  }  if (skf1 != null && desedeSpec2 != null) {    try {      mwk=skf1.generateSecret(desedeSpec2);    } catch (    InvalidKeySpecException e) {      Debug.logError(e,module);    }  }  if (mwk != null) {    return generateMwk(mwk);  } else {    return null;  }}  }
class C{  public boolean isYear(){  return year;}  }
class C{  @Bean(name=REGISTRY_CONFIG_BEAN_NAME) public RegistryConfigBean registryConfig(RegistryConfigProperties registryConfig){  RegistryConfigBean config=new RegistryConfigBean();  config.setName(REGISTRY_CONFIG_BEAN_NAME);  if (!StringUtils.isEmpty(registryConfig.getRegProtocol())) {    config.setRegProtocol(registryConfig.getRegProtocol());  }  if (!StringUtils.isEmpty(registryConfig.getAddress())) {    config.setAddress(registryConfig.getAddress());  }  if (registryConfig.getPort() != null) {    config.setPort(registryConfig.getPort());  }  if (registryConfig.getConnectTimeout() != null) {    config.setConnectTimeout(registryConfig.getConnectTimeout());  }  if (registryConfig.getRequestTimeout() != null) {    config.setRequestTimeout(registryConfig.getRequestTimeout());  }  if (registryConfig.getRegistrySessionTimeout() != null) {    config.setRegistrySessionTimeout(registryConfig.getRegistrySessionTimeout());  }  if (registryConfig.getRegistryRetryPeriod() != null) {    config.setRegistryRetryPeriod(registryConfig.getRegistryRetryPeriod());  }  if (!StringUtils.isEmpty(registryConfig.getCheck())) {    config.setCheck(registryConfig.getCheck());  }  if (registryConfig.getRegister() != null) {    config.setRegister(registryConfig.getRegister());  }  if (registryConfig.getSubscribe() != null) {    config.setSubscribe(registryConfig.getSubscribe());  }  if (registryConfig.getDefaultConfig() != null) {    config.setDefault(registryConfig.getDefaultConfig());  }  return config;}  }
class C{  private int handleSingleNalUnitPacket(Buffer input,Buffer output){  byte[] bufferData=(byte[])input.getData();  int bufferDataLength=bufferData.length;  byte[] data=new byte[bufferDataLength];  System.arraycopy(bufferData,0,data,0,bufferDataLength);  output.setData(data);  output.setLength(data.length);  output.setOffset(0);  output.setTimeStamp(input.getTimeStamp());  output.setSequenceNumber(input.getSequenceNumber());  output.setVideoOrientation(input.getVideoOrientation());  output.setFormat(input.getFormat());  output.setFlags(input.getFlags());  return BUFFER_PROCESSED_OK;}  }
class C{  public static int binHexToBytes(String sBinHex,byte[] data,int nSrcPos,int nDstPos,int nNumOfBytes){  int nStrLen=sBinHex.length();  int nAvailBytes=(nStrLen - nSrcPos) >> 1;  if (nAvailBytes < nNumOfBytes)   nNumOfBytes=nAvailBytes;  int nOutputCapacity=data.length - nDstPos;  if (nNumOfBytes > nOutputCapacity)   nNumOfBytes=nOutputCapacity;  int nResult=0;  for (int nI=0; nI < nNumOfBytes; nI++) {    byte bActByte=0;    boolean blConvertOK=true;    for (int nJ=0; nJ < 2; nJ++) {      bActByte<<=4;      char cActChar=sBinHex.charAt(nSrcPos++);      if ((cActChar >= 'a') && (cActChar <= 'f'))       bActByte|=(byte)(cActChar - 'a') + 10; else       if ((cActChar >= '0') && (cActChar <= '9'))       bActByte|=(byte)(cActChar - '0'); else       blConvertOK=false;    }    if (blConvertOK) {      data[nDstPos++]=bActByte;      nResult++;    }  }  return nResult;}  }
class C{  @Override protected void initListeners(){}  }
class C{  public void add(E newObject){  list.add(newObject);  int currentIndex=list.size() - 1;  while (currentIndex > 0) {    int parentIndex=(currentIndex - 1) / 2;    if (list.get(currentIndex).compareTo(list.get(parentIndex)) < 0) {      E temp=list.get(currentIndex);      list.set(currentIndex,list.get(parentIndex));      list.set(parentIndex,temp);    } else     break;    currentIndex=parentIndex;  }}  }
class C{  public InlineKeyboardButton build(){  return new InlineKeyboardButton(text,url,callback_data,switch_inline_query);}  }
class C{  public static void validateFile(File file,FileType type,NotExistEnum notExist) throws IOException {  Preconditions.checkNotNull(file,"Invalid parameter");  if (file.exists()) {switch (type) {case File:      Preconditions.checkState(file.isFile(),"%s is not a file",file.getAbsolutePath());    break;case Dir:  Preconditions.checkState(file.isDirectory(),"%s is not a directory",file.getAbsolutePath());break;case Any:break;default :log.error("not support file type: {}",type.toString());throw new UnsupportedOperationException();}} else {switch (notExist) {case NOT_EXSIT_OK:log.info("File is not exist: {}",file.getAbsoluteFile());return;case NOT_EXSIT_ERROR:log.error("File is not exist: {}",file.getAbsoluteFile());throw new IllegalStateException("File is not exist");case NOT_EXSIT_CREATE:if (type == FileType.File) {file.createNewFile();} else {file.mkdirs();}break;default :log.error("not support enum type: {}",notExist.toString());throw new UnsupportedOperationException();}}}  }
class C{  public XPath createXPath(String str,ElemTemplateElement owningTemplate) throws javax.xml.transform.TransformerException {  ErrorListener handler=m_stylesheetProcessor.getErrorListener();  XPath xpath=new XPath(str,owningTemplate,this,XPath.SELECT,handler,m_funcTable);  xpath.callVisitors(xpath,new ExpressionVisitor(getStylesheetRoot()));  return xpath;}  }
class C{  public void destroy(){  process.destroy();}  }
class C{  public boolean isPrimaryKey(){  return primaryKey;}  }
class C{  public boolean isSameTypeAs(JavaThing other){  if (!(other instanceof JavaObject)) {    return false;  }  JavaObject oo=(JavaObject)other;  return getClazz().equals(oo.getClazz());}  }
class C{  public static LatLon rhumbEndPosition(LatLon p,Angle rhumbAzimuth,Angle pathLength){  if (p == null) {    String message=Logging.getMessage("nullValue.LatLonIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (rhumbAzimuth == null || pathLength == null) {    String message=Logging.getMessage("nullValue.AngleIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  double lat1=p.getLatitude().radians;  double lon1=p.getLongitude().radians;  double azimuth=rhumbAzimuth.radians;  double distance=pathLength.radians;  if (distance == 0)   return p;  double dLat=distance * Math.cos(azimuth);  double lat2=lat1 + dLat;  double q;  if (Math.abs(dLat) < NEAR_ZERO_THRESHOLD) {    q=Math.cos(lat1);  } else {    double dPhi=Math.log(Math.tan(lat2 / 2.0 + Math.PI / 4.0) / Math.tan(lat1 / 2.0 + Math.PI / 4.0));    q=(lat2 - lat1) / dPhi;  }  double dLon=distance * Math.sin(azimuth) / q;  if (Math.abs(lat2) > Math.PI / 2.0) {    lat2=lat2 > 0 ? Math.PI - lat2 : -Math.PI - lat2;  }  double lon2=(lon1 + dLon + Math.PI) % (2 * Math.PI) - Math.PI;  if (Double.isNaN(lat2) || Double.isNaN(lon2))   return p;  return new LatLon(Angle.fromRadians(lat2).normalizedLatitude(),Angle.fromRadians(lon2).normalizedLongitude());}  }
class C{  public void reset(View root){  if (root == null) {    root=mViewHelper.getRootView();  }  mViewHelper=new ViewHelper(root);  mDataResolver.reset();  mVariableBeanMap.clear();  mVariableCallbakMap.clear();  mListenerMap.clear();  if (mAdapterParser != null)   mAdapterParser.reset();  releasePropertyBindInfos(mBindMap_viewId);  releasePropertyBindInfos(mBindMap_variable);  SparseArray<SparseArray<Array<VariableInfo>>> mViewVariableInfos=this.mViewVariableInfos;  for (int i=0, size=mViewVariableInfos.size(); i < size; i++) {    mViewVariableInfos.valueAt(i).clear();  }  mViewVariableInfos.clear();}  }
class C{  private MagCardReaderFac(){}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  public String toString(){  StringBuilder result=new StringBuilder();  result.append('@');  result.append(klazz.getName());  result.append('(');  for (int i=0; i < elements.length; ++i) {    if (i != 0) {      result.append(", ");    }    result.append(elements[i]);  }  result.append(')');  return result.toString();}  }
class C{  @NotNull public PsiQuery parents(@NotNull final Condition<Class<? extends PsiElement>> condition){  throw new RuntimeException("Not impl");}  }
class C{  public boolean isUpdateReferences(){  return fUpdateReferences;}  }
class C{  public void update(){  stepsDone++;  int newState=(int)(100 * stepsDone / numberOfSteps);  if (newState > 100)   newState=100;  while (newState > percent) {    percent++;    System.out.print('|');  }  if (newState == 100 && !isFinished) {    System.out.println("\r\n");    isFinished=Boolean.TRUE;  }}  }
class C{  public void constValueIndex(String value) throws IOException {  constValueIndex('s',pool.addUtf8Info(value));}  }
class C{  public Ed25519GroupElement toP2(){  return this.toCoordinateSystem(CoordinateSystem.P2);}  }
class C{  @Override protected void onRemoveChannelBan(String target,String sourceNick,String sourceLogin,String sourceHostname,String hostmask){  Message message=new Message(service.getString(R.string.message_remove_ban,sourceNick,hostmask));  message.setColor(Message.COLOR_BLUE);  server.getConversation(target).addMessage(message);  service.sendBroadcast(Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),target));}  }
class C{  @SuppressWarnings("unchecked") private boolean search(int depth,int nodeId){  if (searchComplete(node)) {    return true;  }  if (depthLimit > 0 && depth > depthLimit) {    return false;  }  ctr++;  DoubleLinkedList<IMove> s=node.validMoves();  DoubleNode<IMove> st=s.first();  while (st != null) {    IMove move=st.value();    move.execute(node);    moveStack.push(move);    K key=(K)node.key();    Integer exist=prev.search(key);    if (exist == null) {      visitor.visitNode(node,ctr);      visitor.visitEdge(nodeId,ctr);      prev.insert(key,ctr);      if (search(depth + 1,ctr)) {        return true;      }    } else {      visitor.visitEdge(nodeId,ctr);      long[] nd=duplicated.get(depth);      if (nd == null) {        duplicated.put(depth,new long[1]);      } else {        nd[0]++;      }    }    move.undo(node);    moveStack.pop();    st=st.next();  }  long[] nd=deadEnd.get(depth);  if (nd == null) {    deadEnd.put(depth,new long[1]);  } else {    nd[0]++;  }  return false;}  }
class C{  public int length(){  return pos;}  }
class C{  public void addEntry(T entry){  if (entry == null) {    return;  }  if (mViewHolderController.addEntry(entry)) {    notifyDataSetChanged();  }}  }
class C{  public static void checkLongitude(double longitude){  if (Double.isNaN(longitude) || longitude < MIN_LON_INCL || longitude > MAX_LON_INCL) {    throw new IllegalArgumentException("invalid longitude " + longitude + "; must be between "+ MIN_LON_INCL+ " and "+ MAX_LON_INCL);  }}  }
class C{  @Nullable public Object annotatedValue(Object target,Class<? extends Annotation> annCls) throws IgniteCheckedException {  return annotatedValue(target,annCls,null,false).get1();}  }
class C{  public static void dump() throws Exception {  LoggerDumper loggerDumper=new LoggerDumper();  loggerDumper.dump();}  }
class C{  public synchronized Object co_resume(Object arg_object,int thisCoroutine,int toCoroutine) throws java.lang.NoSuchMethodException {  if (!m_activeIDs.get(toCoroutine))   throw new java.lang.NoSuchMethodException(XMLMessages.createXMLMessage(XMLErrorResources.ER_COROUTINE_NOT_AVAIL,new Object[]{Integer.toString(toCoroutine)}));  m_yield=arg_object;  m_nextCoroutine=toCoroutine;  notify();  while (m_nextCoroutine != thisCoroutine || m_nextCoroutine == ANYBODY || m_nextCoroutine == NOBODY) {    try {      wait();    } catch (    java.lang.InterruptedException e) {    }  }  if (m_nextCoroutine == NOBODY) {    co_exit(thisCoroutine);    throw new java.lang.NoSuchMethodException(XMLMessages.createXMLMessage(XMLErrorResources.ER_COROUTINE_CO_EXIT,null));  }  return m_yield;}  }
class C{  private void initializeIntentBottomSheet(){  BottomSheet.Builder builder=createBottomSheetBuilder();  Intent intent=new Intent();  intent.setAction(Intent.ACTION_SEND);  intent.putExtra(Intent.EXTRA_TEXT,"This is my text to send.");  intent.setType("text/plain");  builder.setIntent(getActivity(),intent);  intentBottomSheet=builder.create();}  }
class C{  protected static String quoteBytes(byte[] x){  if (x == null) {    return "null";  }  return "com.openddal.util.StringUtils.convertHexToBytes(\"" + StringUtils.convertBytesToHex(x) + "\")";}  }
class C{  public static Pair<Type,List<ArrayBracketPair>> unwrapArrayTypes(Type type){  final List<ArrayBracketPair> arrayBracketPairs=new ArrayList<>();  while (type instanceof ArrayType) {    ArrayType arrayType=(ArrayType)type;    arrayBracketPairs.add(new ArrayBracketPair(Range.UNKNOWN,arrayType.getAnnotations()));    type=arrayType.getComponentType();  }  return new Pair<>(type,arrayBracketPairs);}  }
class C{  public Token(int kind){  this(kind,null);}  }
class C{  public void uninstall(){  if (textArea != null) {    removeHighlights();    textArea.removeCaretListener(this);  }}  }
class C{  public final void testGetG(){  DSAParameterSpec dps=new DSAParameterSpec(new BigInteger("1"),new BigInteger("2"),new BigInteger("3"));  assertEquals(3,dps.getG().intValue());}  }
class C{  public void addAll(DVector v){  expandFor(size + v.size - 1,0);  System.arraycopy(v.vector,0,vector,size - v.size,v.size);}  }
class C{  public BitArray(boolean[] bits){  length=bits.length;  repn=new byte[(length + 7) / 8];  for (int i=0; i < length; i++) {    set(i,bits[i]);  }}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public boolean isEmpty(){  return length == 0;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:07.585 -0500",hash_original_method="B58461FA5218392331985BFBE25F1947",hash_generated_method="EF0980640685F1E6DD009AED23156E27") public TriangleMeshBuilder addVertex(float x,float y,float z){  if (mVtxSize != 3) {    throw new IllegalStateException("add mistmatch with declared components.");  }  makeSpace(3);  mVtxData[mVtxCount++]=x;  mVtxData[mVtxCount++]=y;  mVtxData[mVtxCount++]=z;  latch();  return this;}  }
class C{  private void carryForwardPenalty(Ptdemand ptDemandOld,Ptdemand ptDemandNew,final Installment inst){  List<EgDemandDetails> penaltyDmdDtlsList=null;  penaltyDmdDtlsList=getEgDemandDetailsListForReason(ptDemandOld.getEgDemandDetails(),DEMANDRSN_CODE_PENALTY_FINES);  if (penaltyDmdDtlsList != null && penaltyDmdDtlsList.size() > 0)   for (  final EgDemandDetails penaltyDmdDet : penaltyDmdDtlsList)   ptDemandNew.getEgDemandDetails().add((EgDemandDetails)penaltyDmdDet.clone());  penaltyDmdDtlsList=getEgDemandDetailsListForReason(ptDemandOld.getEgDemandDetails(),DEMANDRSN_CODE_CHQ_BOUNCE_PENALTY);  if (penaltyDmdDtlsList != null && penaltyDmdDtlsList.size() > 0)   for (  final EgDemandDetails penaltyDmdDet : penaltyDmdDtlsList)   ptDemandNew.getEgDemandDetails().add((EgDemandDetails)penaltyDmdDet.clone());}  }
class C{  private boolean zzRefill(){  return zzCurrentPos >= s.offset + s.count;}  }
class C{  private boolean notifyTechnicalAdminsAboutTimeout(Subscription subscription,List<PlatformUser> users){  boolean result=false;  String organizationId=subscription.getOrganization().getOrganizationId();  String subscriptionId=subscription.getSubscriptionId();  for (  PlatformUser user : users) {    if (!user.isOrganizationAdmin()) {      continue;    }    try {      commService.sendMail(user,EmailType.SUBSCRIPTION_TIMEDOUT,new Object[]{subscriptionId,organizationId},subscription.getMarketplace());      result=true;    } catch (    MailOperationException e) {      LOG.logWarn(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.WARN_TIMEOUT_OF_SUBSCRIPTION_NOTIFYING_FAILED);    }  }  return result;}  }
class C{  public boolean removeLatestUpdate(final Password password) throws IOException, ServletException {  if (!singelton.can(CFMLEngine.CAN_UPDATE,password))   throw new IOException("access denied to update CFMLEngine");  return removeLatestUpdate();}  }
class C{  public WaferMapPlot(WaferMapDataset dataset){  this(dataset,null);}  }
class C{  public static Bundle createArgs(Bundle args,String title,int headersState){  if (args == null) {    args=new Bundle();  }  args.putString(ARG_TITLE,title);  args.putInt(ARG_HEADERS_STATE,headersState);  return args;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void testDoCheckWithHtml5Doctype(){  System.out.println("doCheck with Html5 doctype");  testChecker("<!doctype html>",TestSolution.NEED_MORE_INFO,RemarkMessageStore.HTML5_DOCTYPE_DETECTED_CHECK_MANUALLY);  testChecker("<!DOCTYPE HTML>",TestSolution.NEED_MORE_INFO,RemarkMessageStore.HTML5_DOCTYPE_DETECTED_CHECK_MANUALLY);  testChecker("<!DOCTYPE html>",TestSolution.NEED_MORE_INFO,RemarkMessageStore.HTML5_DOCTYPE_DETECTED_CHECK_MANUALLY);  testChecker("<!doctype HTML>",TestSolution.NEED_MORE_INFO,RemarkMessageStore.HTML5_DOCTYPE_DETECTED_CHECK_MANUALLY);  testChecker("<!DoCtYpE HtMl>",TestSolution.NEED_MORE_INFO,RemarkMessageStore.HTML5_DOCTYPE_DETECTED_CHECK_MANUALLY);}  }
class C{  public static boolean followsSQFFunctionNameRules(@NotNull String variable){  return variable.matches(FUNCTION_NAMING_RULE_REGEX);}  }
class C{  public CimIndicationSet(CIMInstance indication){  processInstance(indication);  setIndicationClass();  setImpactedClassTags();  if (isAlertIndication()) {    setAlertTags();  }}  }
class C{  protected void initInternalPool(HostAndPort address,ConnectionInfo connectionInfo,JedisPoolConfig config){  this.poolName=poolName;  this.address=address;  this.connectionInfo=connectionInfo;  JedisFactory factory=new JedisFactory(address.getHost(),address.getPort(),connectionInfo.getTimeout(),connectionInfo.getPassword(),connectionInfo.getDatabase());  internalPool=new GenericObjectPool(factory,config);}  }
class C{  public void throwMessage() throws ControllerException {  if (this.msg == null || this.msg.length() < 1) {    return;  }  throw new ControllerException(this.msg.toString());}  }
class C{  public StringBuffer format(Object obj,StringBuffer toAppendTo,FieldPosition pos){  if (obj instanceof Number) {    String result=format(((Number)obj).doubleValue());    return toAppendTo.append(result);  } else   if (obj instanceof DoubleWithError) {    DoubleWithError dwe=(DoubleWithError)obj;    toAppendTo.append(format(dwe.getValue()));    if (dwe.hasAsymmetricError()) {      toAppendTo.append(DoubleWithError.plus);      int errorSigDigit=resolveErrorSigDigit(dwe.getValue(),dwe.getPlusError());      toAppendTo.append(format(dwe.getPlusError(),errorSigDigit));      toAppendTo.append(DoubleWithError.minus);      errorSigDigit=resolveErrorSigDigit(dwe.getValue(),dwe.getMinError());      toAppendTo.append(format(dwe.getMinError(),errorSigDigit));    } else {      toAppendTo.append(DoubleWithError.plusorminus);      int errorSigDigit=resolveErrorSigDigit(dwe.getValue(),dwe.getError());      toAppendTo.append(format(dwe.getError(),errorSigDigit));    }    return toAppendTo;  } else   throw new IllegalArgumentException("Cannot format given Object as a Number");}  }
class C{  public Value read(Type type,NodeMap node,Map map) throws Exception {  Class actual=readValue(type,node);  Class expect=type.getType();  if (expect.isArray()) {    return readArray(actual,node);  }  if (expect != actual) {    return new ObjectValue(actual);  }  return null;}  }
class C{  public static void ts(String method){  tsTime=Debug.threadCpuTimeNanos();}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  addPreferencesFromResource(R.xml.preferences);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypeRefsPackage.FUNCTION_TYPE_EXPRESSION__BINDING:    setBinding(BINDING_EDEFAULT);  return;case TypeRefsPackage.FUNCTION_TYPE_EXPRESSION__DECLARED_TYPE:setDeclaredType((TFunction)null);return;case TypeRefsPackage.FUNCTION_TYPE_EXPRESSION__DECLARED_THIS_TYPE:setDeclaredThisType((TypeRef)null);return;case TypeRefsPackage.FUNCTION_TYPE_EXPRESSION__OWNED_TYPE_VARS:getOwnedTypeVars().clear();return;case TypeRefsPackage.FUNCTION_TYPE_EXPRESSION__UNBOUND_TYPE_VARS:getUnboundTypeVars().clear();return;case TypeRefsPackage.FUNCTION_TYPE_EXPRESSION__UNBOUND_TYPE_VARS_UPPER_BOUNDS:getUnboundTypeVarsUpperBounds().clear();return;case TypeRefsPackage.FUNCTION_TYPE_EXPRESSION__FPARS:getFpars().clear();return;case TypeRefsPackage.FUNCTION_TYPE_EXPRESSION__RETURN_TYPE_REF:setReturnTypeRef((TypeRef)null);return;}super.eUnset(featureID);}  }
class C{  public boolean hasCookingTime(){  return cookingTime != null;}  }
class C{  protected Type(String name){  super(name);}  }
class C{  protected void processMapKeyClass(ContainerMapping mapping,MappedKeyMapAccessor mappedKeyMapAccessor){  MapKeyMapping keyMapping;  MetadataClass mapKeyClass=mappedKeyMapAccessor.getMapKeyClass();  if (getProject().hasEntity(mapKeyClass)) {    keyMapping=processEntityMapKeyClass(mappedKeyMapAccessor);  } else   if (getProject().hasEmbeddable(mapKeyClass)) {    keyMapping=processEmbeddableMapKeyClass(mappedKeyMapAccessor);  } else {    keyMapping=processDirectMapKeyClass(mappedKeyMapAccessor);  }  Class containerClass;  if (mapping instanceof ForeignReferenceMapping) {    if (usesIndirection()) {      containerClass=ClassConstants.IndirectMap_Class;      ((ForeignReferenceMapping)mapping).setIndirectionPolicy(new TransparentIndirectionPolicy());    } else {      containerClass=java.util.Hashtable.class;      ((ForeignReferenceMapping)mapping).dontUseIndirection();    }  } else {    containerClass=java.util.Hashtable.class;  }  MappedKeyMapContainerPolicy policy=new MappedKeyMapContainerPolicy(containerClass);  policy.setKeyMapping(keyMapping);  policy.setValueMapping((MapComponentMapping)mapping);  mapping.setContainerPolicy(policy);}  }
class C{  public static RootRegionRequest create(){  RootRegionRequest m=new RootRegionRequest();  return m;}  }
class C{  public static int longCompare(long lhs,long rhs){  return lhs < rhs ? -1 : (lhs == rhs ? 0 : 1);}  }
class C{  static void error(String message) throws RuntimeException {  throw new RuntimeException(message);}  }
class C{  public static void stopCollecting(){  MAIN.stop=true;}  }
class C{  private static void addRestrictionEnumerations(Element restrictionNode,Element controlNode){  Element itemValNode=null;  Element itemLabelNode=null;  String valueText=null;  for (int i=0; i < restrictionNode.getChildCount(); i++) {    if (restrictionNode.getType(i) == Element.ELEMENT) {      Element child=restrictionNode.getElement(i);      if (child.getName().equalsIgnoreCase(NODE_ENUMERATION)) {        itemValNode=controlNode.createElement(NAMESPACE_XFORMS,null);        itemValNode.setName(NODE_VALUE);        valueText=child.getAttributeValue(null,NODE_VALUE);        itemValNode.addChild(Element.TEXT,valueText);      }    }    if (restrictionNode.getType(i) == Element.COMMENT) {      itemLabelNode=controlNode.createElement(NAMESPACE_XFORMS,null);      itemLabelNode.setName(NODE_LABEL);      itemLabelNode.addChild(Element.TEXT,restrictionNode.getChild(i));    }    if (itemLabelNode != null && itemValNode != null) {      Element itemNode=controlNode.createElement(NAMESPACE_XFORMS,null);      itemNode.setName(NODE_ITEM);      itemNode.setAttribute(null,ATTRIBUTE_CONCEPT_ID,getConceptId(valueText).toString());      controlNode.addChild(Element.ELEMENT,itemNode);      itemNode.addChild(Element.ELEMENT,itemLabelNode);      itemNode.addChild(Element.ELEMENT,itemValNode);      itemLabelNode=null;      itemValNode=null;    }  }}  }
class C{  public boolean hasDimensions(){  return hasRepeatingExtension(Dimension.class);}  }
class C{  public boolean containsEntity(final OdorWorldEntity entity){  return entityList.contains(entity);}  }
class C{  public InflaterInputStream(InputStream in,Inflater inf){  this(in,inf,512);}  }
class C{  public Builder addListenUrl(String url){  if (UrlUtil.isUrl(url)) {    if (mListenUrls == null) {      mListenUrls=new HashSet<String>();    }    mListenUrls.add(url);  }  return this;}  }
class C{  public long logIndex(){  return logIndex;}  }
class C{  public void closeDriver(){  if (camera != null) {    FlashlightManager.disableFlashlight();    camera.release();    camera=null;  }}  }
class C{  void putAttribute(String name,String value){  if ((attributes == null) || (attributes.size() == 0)) {    attributes=new HashMap<String,String>();  }  attributes.put(name,value);}  }
class C{  @Override public IPoint[] generate(int size){  IPoint[] points=new TwoDPoint[size];  points[0]=new TwoDPoint(0,0);  points[1]=new TwoDPoint(1.0,0);  double x=.502;  double y=0.0;  int i=1;  int idx=2;  while (idx < size) {    for (int j=0; j < i; j++) {      points[idx++]=new TwoDPoint(x,y);      if (idx >= size) {        break;      }      y+=1;    }    x-=5 * FloatingPoint.epsilon;    i++;    y=0.0;  }  return points;}  }
class C{  private DocLine[] loadLines(MCash cash,MCashBook cb){  ArrayList<DocLine> list=new ArrayList<DocLine>();  MCashLine[] lines=cash.getLines(false);  for (int i=0; i < lines.length; i++) {    MCashLine line=lines[i];    DocLine_Cash docLine=new DocLine_Cash(line,this);    list.add(docLine);  }  DocLine[] dls=new DocLine[list.size()];  list.toArray(dls);  return dls;}  }
class C{  protected void processAttributeOverrides(List<AttributeOverrideMetadata> attributeOverrides,AggregateObjectMapping aggregateObjectMapping,MetadataDescriptor embeddableDescriptor){  Map<String,AttributeOverrideMetadata> mergedAttributeOverrides=getAttributeOverrides(attributeOverrides);  for (  String attributeName : mergedAttributeOverrides.keySet()) {    AttributeOverrideMetadata attributeOverride=mergedAttributeOverrides.get(attributeName);    MappingAccessor mappingAccessor=embeddableDescriptor.getMappingAccessor(attributeName);    String colName=attributeOverride.getColumn().getName();    if (colName == null || colName.isEmpty()) {      String prevName=mappingAccessor.getDefaultAttributeName();      attributeOverride.getColumn().setName(prevName);    }    if (mappingAccessor == null) {      throw ValidationException.embeddableAttributeOverrideNotFound(embeddableDescriptor.getJavaClass(),attributeName,getJavaClass(),getAttributeName());    } else     if (!mappingAccessor.isBasic()) {      throw ValidationException.invalidEmbeddableAttributeForAttributeOverride(embeddableDescriptor.getJavaClass(),attributeName,getJavaClass(),getAttributeName());    } else {      addFieldNameTranslation(aggregateObjectMapping,attributeName,attributeOverride.getColumn().getDatabaseField(),mappingAccessor);    }  }}  }
class C{  protected void updatePerspective(){  updatePerspective(configElement);}  }
class C{  public Set<String> generateRawTags(){  final Set<String> rawTags=Sets.newLinkedHashSet();  for (  MachineTag tag : this) {    rawTags.add(tag.toString());  }  return rawTags;}  }
class C{  public void discoverUnManagedBlockObjects(BlockStorageDriver driver,com.emc.storageos.db.client.model.StorageSystem storageSystem,DbClient dbClient,PartitionManager partitionManager){  Set<URI> allCurrentUnManagedVolumeUris=new HashSet<>();  Set<URI> allCurrentUnManagedCgURIs=new HashSet<>();  MutableInt lastPage=new MutableInt(0);  MutableInt nextPage=new MutableInt(0);  List<UnManagedVolume> unManagedVolumesToCreate=new ArrayList<>();  List<UnManagedVolume> unManagedVolumesToUpdate=new ArrayList<>();  List<UnManagedConsistencyGroup> unManagedCGToUpdate;  Map<String,UnManagedConsistencyGroup> unManagedCGToUpdateMap=new HashMap<>();  Set<String> invalidExportHosts=new HashSet<>();  InterProcessLock lock=null;  String lockName=UNMANAGED_DISCOVERY_LOCK + storageSystem.getSystemType() + "-"+ storageSystem.getNativeId();  try {    lock=coordinator.getLock(lockName);    boolean lockAcquired=lock.acquire(UNMANAGED_DISCOVERY_LOCK_TIMEOUT,TimeUnit.SECONDS);    if (lockAcquired) {      log.info("Acquired lock {} for storage system {} .",lockName,storageSystem.getNativeId());    } else {      log.info("Failed to acquire lock {} for storage system {} .",lockName,storageSystem.getNativeId());      return;    }  } catch (  Exception ex) {    if (lock == null || !lock.isAcquiredInThisProcess()) {      log.error("Error processing unmanaged discovery for storage system: {}. Failed to get lock {} for this operation.",storageSystem.getNativeId(),lockName,ex);      return;    }  }  log.info("Started discovery of UnManagedVolumes for system {}",storageSystem.getId());  try {    DiscoveryUtils.markInActiveUnManagedExportMask(storageSystem.getId(),new HashSet<URI>(),dbClient,partitionManager);    StorageSystem driverStorageSystem=ExternalDeviceCommunicationInterface.initStorageSystem(storageSystem);    do {      Map<String,List<HostExportInfo>> hostToVolumeExportInfoMap=new HashMap<>();      List<StorageVolume> driverVolumes=new ArrayList<>();      Map<String,URI> unManagedVolumeNativeIdToUriMap=new HashMap<>();      Map<String,URI> managedVolumeNativeIdToUriMap=new HashMap<>();      log.info("Processing page {} ",nextPage);      driver.getStorageVolumes(driverStorageSystem,driverVolumes,nextPage);      log.info("Volume count on this page {} ",driverVolumes.size());      for (      StorageVolume driverVolume : driverVolumes) {        UnManagedVolume unManagedVolume=null;        try {          com.emc.storageos.db.client.model.StoragePool storagePool=getStoragePoolOfUnManagedVolume(storageSystem,driverVolume,dbClient);          if (null == storagePool) {            log.error("Skipping unManaged volume discovery as the volume {} storage pool doesn't exist in controller",driverVolume.getNativeId());            continue;          }          String managedVolumeNativeGuid=NativeGUIDGenerator.generateNativeGuidForVolumeOrBlockSnapShot(storageSystem.getNativeGuid(),driverVolume.getNativeId());          Volume systemVolume=DiscoveryUtils.checkStorageVolumeExistsInDB(dbClient,managedVolumeNativeGuid);          if (null != systemVolume) {            log.info("Skipping volume {} as it is already managed by the system. Id: {}",managedVolumeNativeGuid,systemVolume.getId());            managedVolumeNativeIdToUriMap.put(driverVolume.getNativeId(),systemVolume.getId());            getVolumeExportInfo(driver,driverVolume,hostToVolumeExportInfoMap);            getExportInfoForManagedVolumeReplicas(managedVolumeNativeIdToUriMap,hostToVolumeExportInfoMap,dbClient,storageSystem,systemVolume,driverVolume,driver);            continue;          }          unManagedVolume=createUnManagedVolume(driverVolume,storageSystem,storagePool,unManagedVolumesToCreate,unManagedVolumesToUpdate,dbClient);          unManagedVolumeNativeIdToUriMap.put(driverVolume.getNativeId(),unManagedVolume.getId());          if (driverVolume.getConsistencyGroup() != null && !driverVolume.getConsistencyGroup().isEmpty()) {            addObjectToUnManagedConsistencyGroup(storageSystem,driverVolume.getConsistencyGroup(),unManagedVolume,allCurrentUnManagedCgURIs,unManagedCGToUpdateMap,driver,dbClient);          } else {            unManagedVolume.getVolumeCharacterstics().put(UnManagedVolume.SupportedVolumeCharacterstics.IS_VOLUME_ADDED_TO_CONSISTENCYGROUP.toString(),Boolean.FALSE.toString());            unManagedVolume.getVolumeInformation().remove(UnManagedVolume.SupportedVolumeInformation.UNMANAGED_CONSISTENCY_GROUP_URI.toString());          }          allCurrentUnManagedVolumeUris.add(unManagedVolume.getId());          getVolumeExportInfo(driver,driverVolume,hostToVolumeExportInfoMap);          Set<URI> unManagedSnaphotUris=processUnManagedSnapshots(driverVolume,unManagedVolume,storageSystem,storagePool,unManagedVolumesToCreate,unManagedVolumesToUpdate,allCurrentUnManagedCgURIs,unManagedCGToUpdateMap,unManagedVolumeNativeIdToUriMap,hostToVolumeExportInfoMap,driver,dbClient);          allCurrentUnManagedVolumeUris.addAll(unManagedSnaphotUris);          Set<URI> unManagedCloneUris=processUnManagedClones(driverVolume,unManagedVolume,storageSystem,storagePool,unManagedVolumesToCreate,unManagedVolumesToUpdate,allCurrentUnManagedCgURIs,unManagedCGToUpdateMap,unManagedVolumeNativeIdToUriMap,hostToVolumeExportInfoMap,driver,dbClient);          allCurrentUnManagedVolumeUris.addAll(unManagedCloneUris);        } catch (        Exception ex) {          log.error("Error processing {} volume {}",storageSystem.getNativeId(),driverVolume.getNativeId(),ex);        }      }      if (!unManagedVolumesToCreate.isEmpty()) {        log.info("Unmanaged volumes to create: {}",unManagedVolumesToCreate);        partitionManager.insertInBatches(unManagedVolumesToCreate,Constants.DEFAULT_PARTITION_SIZE,dbClient,UNMANAGED_VOLUME);        unManagedVolumesToCreate.clear();      }      if (!unManagedVolumesToUpdate.isEmpty()) {        log.info("Unmanaged volumes to update: {}",unManagedVolumesToUpdate);        partitionManager.updateAndReIndexInBatches(unManagedVolumesToUpdate,Constants.DEFAULT_PARTITION_SIZE,dbClient,UNMANAGED_VOLUME);        unManagedVolumesToUpdate.clear();      }      processExportData(driver,storageSystem,unManagedVolumeNativeIdToUriMap,managedVolumeNativeIdToUriMap,hostToVolumeExportInfoMap,invalidExportHosts,dbClient,partitionManager);    } while (!nextPage.equals(lastPage));    if (!unManagedCGToUpdateMap.isEmpty()) {      unManagedCGToUpdate=new ArrayList<>(unManagedCGToUpdateMap.values());      partitionManager.updateAndReIndexInBatches(unManagedCGToUpdate,unManagedCGToUpdate.size(),dbClient,UNMANAGED_CONSISTENCY_GROUP);      unManagedCGToUpdate.clear();    }    log.info("Processed {} unmanged objects.",allCurrentUnManagedVolumeUris.size());    DiscoveryUtils.markInActiveUnManagedVolumes(storageSystem,allCurrentUnManagedVolumeUris,dbClient,partitionManager);    DiscoveryUtils.performUnManagedConsistencyGroupsBookKeeping(storageSystem,allCurrentUnManagedCgURIs,dbClient,partitionManager);  } catch (  Exception ex) {    log.error("Error processing unmanaged discovery for storage system: {}. Error on page: {}.",storageSystem.getNativeId(),nextPage.toString(),ex);  } finally {    try {      lock.release();      log.info("Released lock for storage system {}",storageSystem.getNativeId());    } catch (    Exception e) {      log.error("Failed to release  Lock {} : {}",lockName,e.getMessage());    }  }}  }
class C{  public boolean attempt(Address old,Address value){  return false;}  }
class C{  private void readEntityTag(){  mEntityTag=RegistryFactory.getFactory().readString(REGISTRY_SIP_ETAG,null);  long etagExpiration=RegistryFactory.getFactory().readLong(REGISTRY_SIP_ETAG_EXPIRATION,-1);  if (sLogger.isActivated()) {    sLogger.debug("New entity tag: " + mEntityTag + ", expire at="+ etagExpiration);  }}  }
class C{  public void put(Key key,Value val){  if (key == null)   throw new NullPointerException("first argument to put() is null");  if (val == null) {    delete(key);    return;  }  int i=rank(key);  if (i < n && keys[i].compareTo(key) == 0) {    vals[i]=val;    return;  }  if (n == keys.length)   resize(2 * keys.length);  for (int j=n; j > i; j--) {    keys[j]=keys[j - 1];    vals[j]=vals[j - 1];  }  keys[i]=key;  vals[i]=val;  n++;  assert check();}  }
class C{  protected void insertMenuItem(JMenu menu,JMenuItem menuitem){  insertMenuItem(menu,menuitem,0);}  }
class C{  public boolean hasAlbumArt(){  return hasExtension(AlbumArt.class);}  }
class C{  public float distanceSquared(Vector2f v){  double dx=x - v.x;  double dy=y - v.y;  return (float)(dx * dx + dy * dy);}  }
class C{  @Override public void onFinished(){synchronized (Starter.this) {    mEverythingFinished=true;    Starter.this.notifyAll();  }}  }
class C{  public static byte[] ivCipherConcat(byte[] iv,byte[] cipherText){  byte[] combined=new byte[iv.length + cipherText.length];  System.arraycopy(iv,0,combined,0,iv.length);  System.arraycopy(cipherText,0,combined,iv.length,cipherText.length);  return combined;}  }
class C{  public ReadFileRecordResponse(){  super();  setFunctionCode(Modbus.READ_FILE_RECORD);}  }
class C{  public CallMethodResult clone(){  CallMethodResult result=new CallMethodResult();  result.StatusCode=StatusCode;  result.InputArgumentResults=InputArgumentResults == null ? null : InputArgumentResults.clone();  result.InputArgumentDiagnosticInfos=InputArgumentDiagnosticInfos == null ? null : InputArgumentDiagnosticInfos.clone();  result.OutputArguments=OutputArguments == null ? null : OutputArguments.clone();  return result;}  }
class C{  public void next(){  pos++;}  }
class C{  public LineSet endAt(int index){  if (index > size())   Log.e(TAG,"Index cannot be greater than the set's size.",new IllegalArgumentException());  mEnd=index;  return this;}  }
class C{  public GF2Polynomial add(GF2Polynomial b){  return xor(b);}  }
class C{  private void initializeViewFields(){  mListView=(ListView)findViewById(R.id.listView1);  mAdapter=new AcronymDataArrayAdapter(this);  mListView.setAdapter(mAdapter);}  }
class C{  public static Timestamp newTimestamp(){  return new Timestamp();}  }
class C{  @Override public void beginProcessTokens(){  otuple=new HashMap<String,ArrayList<String>>();}  }
class C{  public AudioManager(ThreadPoolManager manager,MixerManager mixerManager){  mThreadPoolManager=manager;  mMixerManager=mixerManager;  loadSettings();}  }
class C{  protected NumericalAddSubtractExpressionImpl(){  super();}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.MULTILINE_COMMENT___MULTILINE_COMMENT_1:    setMultilineComment_1((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public boolean isYValuesHorizontal(){  return yValuesHorizontal;}  }
class C{  public boolean isSetNewstring(){  return this.newstring != null;}  }
class C{  public void testAuthenticateSpringSunDirectoryServerNotFound(){  LdapManager mgr=getLdapSunDirectoryServer();  LdapAuthenticationUserNameVO authenticationInfo=new LdapAuthenticationUserNameVO();  authenticationInfo.setUserName("nacho2");  authenticationInfo.setUserCredentials("ieciovi2");  String ret=null;  try {    ret=mgr.authenticate(authenticationInfo);  } catch (  Exception e) {    assertEquals(LdapErrorCodes.ERR_10011_NODE_NOT_FOUND_ERROR,((LdapException)e).getErrCode());  }  assertNull(ret);}  }
class C{  @SuppressWarnings("deprecation") public static Sha256Hash wrap(byte[] rawHashBytes){  return new Sha256Hash(rawHashBytes);}  }
class C{  public static boolean isDefSiteStructural(TN4Classifier type){  final TypingStrategy ts=type.getTypingStrategy();  return ts != TypingStrategy.NOMINAL && ts != TypingStrategy.DEFAULT;}  }
class C{  public double dot(DelaunayVertex p){  int len=dimCheck(p);  double sum=0;  for (int i=0; i < len; i++) {    sum+=this.coordinates[i] * p.coordinates[i];  }  return sum;}  }
class C{  public GenericItemAdapter<Model,Item> clearModel(){  super.clear();  return this;}  }
class C{  public void removeQueueListener(WorkgroupInvitationListener invitationListener){synchronized (invitationListeners) {    invitationListeners.remove(invitationListener);  }}  }
class C{  public void insertRow(Value[] row) throws SQLException {  StatementBuilder buff=new StatementBuilder("INSERT INTO ");  appendTableName(buff);  buff.append('(');  appendColumnList(buff,false);  buff.append(")VALUES(");  buff.resetCount();  for (int i=0; i < columnCount; i++) {    buff.appendExceptFirst(",");    Value v=row[i];    if (v == null) {      buff.append("DEFAULT");    } else {      buff.append('?');    }  }  buff.append(')');  PreparedStatement prep=conn.prepareStatement(buff.toString());  for (int i=0, j=0; i < columnCount; i++) {    Value v=row[i];    if (v != null) {      v.set(prep,j++ + 1);    }  }  int count=prep.executeUpdate();  if (count != 1) {    throw DbException.get(ErrorCode.NO_DATA_AVAILABLE);  }}  }
class C{  @Reference(authors="L. R. Dice",title="Measures of the Amount of Ecologic Association Between Species",booktitle="Ecology 26 (3)") static void thirdReference(){}  }
class C{  public HashMap(int initialCapacity,float loadFactor){  if (initialCapacity < 0)   throw new IllegalArgumentException("Illegal initial capacity: " + initialCapacity);  if (initialCapacity > MAXIMUM_CAPACITY)   initialCapacity=MAXIMUM_CAPACITY;  if (loadFactor <= 0 || Float.isNaN(loadFactor))   throw new IllegalArgumentException("Illegal load factor: " + loadFactor);  this.loadFactor=loadFactor;  this.threshold=tableSizeFor(initialCapacity);}  }
class C{  protected void initMenuBar(Form parent){  this.parent=parent;  selectMenuItem=createMenuSelectCommand();  cancelMenuItem=createMenuCancelCommand();  UIManager manager=parent.getUIManager();  LookAndFeel lf=manager.getLookAndFeel();  minimizeOnBack=manager.isThemeConstant("minimizeOnBackBool",true) && !(parent instanceof Dialog);  hideEmptyCommands=manager.isThemeConstant("hideEmptyCommandsBool",false);  menuStyle=manager.getComponentStyle("Menu");  setUIID("SoftButton");  menuCommand=new Command(manager.localize("menu","Menu"),lf.getMenuIcons()[2]);  if (lf.getDefaultMenuTransitionIn() != null || lf.getDefaultMenuTransitionOut() != null) {    transitionIn=lf.getDefaultMenuTransitionIn();    transitionOut=lf.getDefaultMenuTransitionOut();  } else {    transitionIn=CommonTransitions.createSlide(CommonTransitions.SLIDE_VERTICAL,true,300,true);    transitionOut=CommonTransitions.createSlide(CommonTransitions.SLIDE_VERTICAL,false,300,true);  }  menuCellRenderer=lf.getMenuRenderer();  int softkeyCount=Display.getInstance().getImplementation().getSoftkeyCount();  thirdSoftButton=Display.getInstance().isThirdSoftButton();  int commandBehavior=getCommandBehavior();  if (softkeyCount > 1 && commandBehavior < Display.COMMAND_BEHAVIOR_BUTTON_BAR) {    if (thirdSoftButton) {      setLayout(new GridLayout(1,3));      soft=new Button[]{createSoftButton("SoftButtonCenter"),createSoftButton("SoftButtonLeft"),createSoftButton("SoftButtonRight")};      main=soft[0];      left=soft[1];      right=soft[2];      if (parent.isRTL()) {        right.setUIID("SoftButtonLeft");        left.setUIID("SoftButtonRight");        addComponent(right);        addComponent(main);        addComponent(left);      } else {        addComponent(left);        addComponent(main);        addComponent(right);      }      if (isReverseSoftButtons()) {        Button b=soft[1];        soft[1]=soft[2];        soft[2]=b;      }    } else {      setLayout(new GridLayout(1,2));      soft=new Button[]{createSoftButton("SoftButtonLeft"),createSoftButton("SoftButtonRight")};      main=soft[0];      left=soft[0];      right=soft[1];      if (parent.isRTL()) {        right.setUIID("SoftButtonLeft");        left.setUIID("SoftButtonRight");        addComponent(right);        addComponent(left);      } else {        addComponent(left);        addComponent(right);      }      if (isReverseSoftButtons()) {        Button b=soft[0];        soft[0]=soft[1];        soft[1]=b;      }    }    for (int iter=0; iter < soft.length; iter++) {      soft[iter].setEndsWith3Points(false);    }  } else {    if (thirdSoftButton) {      setLayout(new GridLayout(1,3));      soft=new Button[]{createSoftButton("SoftButtonCenter"),createSoftButton("SoftButtonLeft"),createSoftButton("SoftButtonRight")};      main=soft[0];      left=soft[1];      right=soft[2];      addComponent(left);      addComponent(main);      addComponent(right);      if (isReverseSoftButtons()) {        Button b=soft[1];        soft[1]=soft[2];        soft[2]=b;      }    } else {      soft=new Button[]{createSoftButton("SoftButtonCenter")};    }  }  softCommand=new Command[soft.length];}  }
class C{  @Override public Set<BeanDefinitionHolder> doScan(String... basePackages){  Set<BeanDefinitionHolder> beanDefinitions=super.doScan(basePackages);  if (beanDefinitions.isEmpty()) {    logger.warn("No MyBatis mapper was found in '" + Arrays.toString(basePackages) + "' package. Please check your configuration.");  } else {    for (    BeanDefinitionHolder holder : beanDefinitions) {      GenericBeanDefinition definition=(GenericBeanDefinition)holder.getBeanDefinition();      if (logger.isDebugEnabled()) {        logger.debug("Creating MapperFactoryBean with name '" + holder.getBeanName() + "' and '"+ definition.getBeanClassName()+ "' mapperInterface");      }      definition.getPropertyValues().add("mapperInterface",definition.getBeanClassName());      definition.setBeanClass(ZebraMapperFactoryBean.class);      definition.getPropertyValues().add("addToConfig",this.addToConfig);      boolean explicitFactoryUsed=false;      if (StringUtils.hasText(this.sqlSessionFactoryBeanName)) {        definition.getPropertyValues().add("sqlSessionFactory",new RuntimeBeanReference(this.sqlSessionFactoryBeanName));        explicitFactoryUsed=true;      } else       if (this.sqlSessionFactory != null) {        definition.getPropertyValues().add("sqlSessionFactory",this.sqlSessionFactory);        explicitFactoryUsed=true;      }      if (StringUtils.hasText(this.sqlSessionTemplateBeanName)) {        if (explicitFactoryUsed) {          logger.warn("Cannot use both: sqlSessionTemplate and sqlSessionFactory together. sqlSessionFactory is ignored.");        }        definition.getPropertyValues().add("sqlSessionTemplate",new RuntimeBeanReference(this.sqlSessionTemplateBeanName));        explicitFactoryUsed=true;      } else       if (this.sqlSessionTemplate != null) {        if (explicitFactoryUsed) {          logger.warn("Cannot use both: sqlSessionTemplate and sqlSessionFactory together. sqlSessionFactory is ignored.");        }        definition.getPropertyValues().add("sqlSessionTemplate",this.sqlSessionTemplate);        explicitFactoryUsed=true;      }      if (!explicitFactoryUsed) {        if (logger.isDebugEnabled()) {          logger.debug("Enabling autowire by type for MapperFactoryBean with name '" + holder.getBeanName() + "'.");        }        definition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_TYPE);      }    }  }  return beanDefinitions;}  }
class C{  @Override public String toString(){  return "FastDateFormat[" + printer.getPattern() + ","+ printer.getLocale()+ ","+ printer.getTimeZone().getID()+ "]";}  }
class C{  public UserSampleHandler(){  log=Logger.getLogger(getClass().getName());  try {    sample=new UserSample();  } catch (  KeyManagementException|NoSuchAlgorithmException|KeyStoreException|ClientException|IOException e) {    log.fatal("Error occured when initializing UserSample",e);  }}  }
class C{  @Override public void onEvent(int event,String path){  Log_OC.d(TAG,"Got event " + event + " on FOLDER "+ mPath+ " about "+ ((path != null) ? path : ""));  boolean shouldSynchronize=false;synchronized (mObservedChildren) {    if (path != null && path.length() > 0 && mObservedChildren.containsKey(path)) {      if (((event & FileObserver.MODIFY) != 0) || ((event & FileObserver.ATTRIB) != 0) || ((event & FileObserver.MOVED_TO) != 0)) {        if (!mObservedChildren.get(path)) {          mObservedChildren.put(path,Boolean.valueOf(true));        }      }      if ((event & FileObserver.CLOSE_WRITE) != 0 && mObservedChildren.get(path)) {        mObservedChildren.put(path,Boolean.valueOf(false));        shouldSynchronize=true;      }    }  }  if (shouldSynchronize) {    startSyncOperation(path);  }  if ((event & IN_IGNORE) != 0 && (path == null || path.length() == 0)) {    Log_OC.d(TAG,"Stopping the observance on " + mPath);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:42.154 -0500",hash_original_method="60456E7A862D179906482739ACBD4572",hash_generated_method="1FED05F39E3BB61C72DF3B048AB4D949") public boolean isStale() throws IOException {  if (hasBufferedData()) {    return false;  }  int oldTimeout=this.socket.getSoTimeout();  try {    this.socket.setSoTimeout(1);    return fillBuffer() == -1;  } catch (  SocketTimeoutException e) {    return false;  }catch (  IOException e) {    return true;  } finally {    this.socket.setSoTimeout(oldTimeout);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SexecPackage.IF__CHECK:    setCheck((Check)null);  return;case SexecPackage.IF__THEN_STEP:setThenStep((Step)null);return;case SexecPackage.IF__ELSE_STEP:setElseStep((Step)null);return;}super.eUnset(featureID);}  }
class C{  public static void assumeTrue(BooleanSupplier assumptionSupplier) throws TestAbortedException {  assumeTrue(assumptionSupplier,null);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public LinearGrowthModel(String name,Parameter slopeParameter,Type units){  super(name);  linearGrowth=new LinearGrowth(units);  this.slopeParameter=slopeParameter;  addVariable(slopeParameter);  slopeParameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));  setUnits(units);}  }
class C{  private void addTermWeights(Reader reader,Map<String,Flt> termWeightMap,String fieldName) throws IOException {  if (analyzer == null) {    throw new UnsupportedOperationException("To use MoreLikeThis without " + "term vectors, you must provide an Analyzer");  }  TokenStream ts=analyzer.tokenStream(fieldName,reader);  try {    int tokenCount=0;    CharTermAttribute termAtt=ts.addAttribute(CharTermAttribute.class);    PayloadAttribute payloadAttr=ts.addAttribute(PayloadAttribute.class);    TypeAttribute typeAttr=ts.addAttribute(TypeAttribute.class);    ts.reset();    while (ts.incrementToken()) {      String word=termAtt.toString();      tokenCount++;      if (tokenCount > maxNumTokensParsedPerField) {        break;      }      if (word.trim().length() == 0) {        continue;      }      if (isNoiseWord(word)) {        continue;      }      BytesRef payload=payloadAttr.getPayload();      float tokenWeight=1.0f;      if (isPayloadField(fieldName) && payload != null) {        tokenWeight=PayloadHelper.decodeFloat(payload.bytes,payload.offset);      }      Flt termWeight=termWeightMap.get(word);      if (termWeight == null) {        termWeightMap.put(word,new Flt(tokenWeight));      } else {        termWeight.x+=tokenWeight;      }    }    ts.end();  }  finally {    IOUtils.closeWhileHandlingException(ts);  }}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  @SuppressWarnings("unchecked") public ConcurrentHashMap(int initialCapacity,float loadFactor,int concurrencyLevel){  if (!(loadFactor > 0) || initialCapacity < 0 || concurrencyLevel <= 0)   throw new IllegalArgumentException();  if (concurrencyLevel > MAX_SEGMENTS)   concurrencyLevel=MAX_SEGMENTS;  int sshift=0;  int ssize=1;  while (ssize < concurrencyLevel) {    ++sshift;    ssize<<=1;  }  this.segmentShift=32 - sshift;  this.segmentMask=ssize - 1;  if (initialCapacity > MAXIMUM_CAPACITY)   initialCapacity=MAXIMUM_CAPACITY;  int c=initialCapacity / ssize;  if (c * ssize < initialCapacity)   ++c;  int cap=MIN_SEGMENT_TABLE_CAPACITY;  while (cap < c)   cap<<=1;  Segment<K,V> s0=new Segment<K,V>(loadFactor,(int)(cap * loadFactor),(HashEntry<K,V>[])new HashEntry<?,?>[cap]);  Segment<K,V>[] ss=(Segment<K,V>[])new Segment<?,?>[ssize];  UNSAFE.putOrderedObject(ss,SBASE,s0);  this.segments=ss;}  }
class C{  public S2LatLngRect convolveWithCap(S1Angle angle){  S2Cap cap=S2Cap.fromAxisAngle(new S2Point(1,0,0),angle);  S2LatLngRect r=this;  for (int k=0; k < 4; ++k) {    S2Cap vertexCap=S2Cap.fromAxisHeight(getVertex(k).toPoint(),cap.height());    r=r.union(vertexCap.getRectBound());  }  return r;}  }
class C{  public void resetTag(byte tag){  this.tag=tag;}  }
class C{  public Stoppable scheduleRepeating(final double time,final Steppable event){  return scheduleRepeating(time,0,event,1.0);}  }
class C{  public ScoreHit(int atomicReaderId,int docId,float score){  super(docId,score);  this.atomicReaderId=atomicReaderId;}  }
class C{  public <O>Tree<O> transformNodes(MyMethod<L,O> trans){  ArrayList<Tree<O>> newChildren=new ArrayList<Tree<O>>(children.size());  for (  Tree<L> child : children) {    newChildren.add(child.transformNodes(trans));  }  return new Tree<O>(trans.call(label),newChildren);}  }
class C{  private void traceFilter(Filter filter,String prefix){  System.out.println(prefix + filter.getClass().getName());  System.out.println(prefix + filter.getBounds2D());  List sources=filter.getSources();  int nSources=sources != null ? sources.size() : 0;  prefix+="\t";  for (int i=0; i < nSources; i++) {    Filter source=(Filter)sources.get(i);    traceFilter(source,prefix);  }  System.out.flush();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static boolean hasOperationSucceeded(final Message message) throws JMSException {  return ManagementHelper.hasOperationSucceeded(JMSManagementHelper.getCoreMessage(message));}  }
class C{  public void notifyDataSetInvalidated(){  listAdapterObservable.notifyInvalidated();}  }
class C{  public void topLevelWindowCreated(Window w){  installListeners(w);}  }
class C{  private void fireRosterExchangeListeners(String from,Iterator<RemoteRosterEntry> remoteRosterEntries){  RosterExchangeListener[] listeners=null;synchronized (rosterExchangeListeners) {    listeners=new RosterExchangeListener[rosterExchangeListeners.size()];    rosterExchangeListeners.toArray(listeners);  }  for (int i=0; i < listeners.length; i++) {    listeners[i].entriesReceived(from,remoteRosterEntries);  }}  }
class C{  private static void cleanup(){  updateEvents.set(0);  rmlRef.set(null);}  }
class C{  private void handleExceptions(Subroutine subroutine,InstructionHandle pei,BasicBlock etb){  etb.setExceptionThrower(pei);  boolean sawUniversalExceptionHandler=false;  List<CodeExceptionGen> exceptionHandlerList=exceptionHandlerMap.getHandlerList(pei);  if (exceptionHandlerList != null) {    for (    CodeExceptionGen exceptionHandler : exceptionHandlerList) {      InstructionHandle handlerStart=exceptionHandler.getHandlerPC();      subroutine.addEdgeAndExplore(etb,handlerStart,HANDLED_EXCEPTION_EDGE);      if (Hierarchy.isUniversalExceptionHandler(exceptionHandler.getCatchType())) {        sawUniversalExceptionHandler=true;      }    }  }  if (!sawUniversalExceptionHandler) {    if (DEBUG) {      System.out.println("Adding unhandled exception edge from " + pei);    }    subroutine.setUnhandledExceptionBlock(etb);  }}  }
class C{  public Parameter(String parameterString,String[][] registerLabels) throws ParsingException {  String registerText=StringUtils.substringBefore(parameterString,"[").trim();  for (int list=0; list < 2; list++) {    for (int reg=0; reg < registerLabels[list].length; reg++) {      if (registerLabels[list][reg].equalsIgnoreCase(registerText)) {        register=reg;        break;      }    }    if (register != REG_NONE)     break;  }  if (register == REG_NONE)   throw new ParsingException("Invalid register name '" + registerText + "' in function parameter string '"+ parameterString+ "'");  String details=StringUtils.substringAfter(parameterString,"[");  if (!details.contains("]")) {    throw new ParsingException("Invalid function parameter details '" + details + "' : no closing bracket");  }  details=StringUtils.substringBefore(details,"]").trim();  for (  String detail : StringUtils.split(details,";")) {    parseDetail(detail.trim(),registerLabels);  }}  }
class C{  public boolean contains(Key key){  if (key == null)   throw new NullPointerException("called contains() with a null key");  return set.contains(key);}  }
class C{  public static void subscribeToHDFSRequestReports(Callback callback){  subscribe(Type.HDFSREQUEST,callback);}  }
class C{  public synchronized static <T>String marshal(T t){  StringWriter stringWriter=new StringWriter();  String str="";  try {    JAXBContext context=JAXBContext.newInstance(t.getClass());    Marshaller marshaller=context.createMarshaller();    marshaller.marshal(t,stringWriter);    str=stringWriter.toString();  } catch (  JAXBException je) {    _log.error("Unable to construct XML content.",je);  }  return str;}  }
class C{  public TestServer(HostAndPort address,Map<String,Path> runfiles,Iterable<Route> routes){  urlAddress=createUrlAddress(address);  server.addConnector(createConnector(address));  server.addHandler(createHandler(runfiles,routes));}  }
class C{  public void addConversation(Conversation conversation){  conversations.add(new ConversationInfo(conversation));  notifyDataSetChanged();}  }
class C{  protected ILaunchConfiguration findLaunchConfiguration(IResource resource,String startupUrl,boolean isExternal) throws CoreException {  ILaunchManager launchManager=DebugPlugin.getDefault().getLaunchManager();  ILaunchConfigurationType typeid=launchManager.getLaunchConfigurationType(WebAppLaunchConfiguration.TYPE_ID);  ILaunchConfiguration[] configs=launchManager.getLaunchConfigurations(typeid);  return searchMatchingUrlAndProject(startupUrl,resource.getProject(),isExternal,configs);}  }
class C{  public void clear(){  mCapabilities.clear();}  }
class C{  private List<View> addView(View view,List<View> cache){  if (cache == null) {    cache=new LinkedList<View>();  }  cache.add(view);  return cache;}  }
class C{  public int loadInt(){  return SimulatedMemory.getInt(this);}  }
class C{  private static Set<EdgeStore.EdgeFlag> filterFlags(EnumSet<EdgeStore.EdgeFlag> permissions){  return permissions.stream().filter(null).collect(Collectors.toSet());}  }
class C{  @SmallTest public void testPreconditions(){  assertNotNull(mInflater);  inflate(R.layout.size_adaptive);  assertNotNull(mSizeAdaptiveLayout);  assertNotNull(mSmallView);  assertNotNull(mLargeView);}  }
class C{  public synchronized void open(){  if (mOpened) {    return;  }  try {    mTimestampInc=(int)(90000 / mDefaultVideoCodec.getFrameRate());    NativeH264EncoderParams nativeH264EncoderParams=new NativeH264EncoderParams();    nativeH264EncoderParams.setFrameWidth(mDefaultVideoCodec.getWidth());    nativeH264EncoderParams.setFrameHeight(mDefaultVideoCodec.getHeight());    nativeH264EncoderParams.setFrameRate(mDefaultVideoCodec.getFrameRate());    nativeH264EncoderParams.setBitRate(mDefaultVideoCodec.getBitRate());    nativeH264EncoderParams.setProfilesAndLevel(mDefaultVideoCodec.getParameters());    nativeH264EncoderParams.setEncMode(NativeH264EncoderParams.ENCODING_MODE_STREAMING);    nativeH264EncoderParams.setSceneDetection(false);    nativeH264EncoderParams.setIFrameInterval(15);    int result=NativeH264Encoder.InitEncoder(nativeH264EncoderParams);    if (result != 0) {      mEventListener.onPlayerError();      return;    }  } catch (  UnsatisfiedLinkError e) {    mEventListener.onPlayerError();    return;  }  try {    releasePort();    mRtpSender=new VideoRtpSender(new H264VideoFormat(),mLocalRtpPort);    mRtpInput=new MediaRtpInput();    mRtpInput.open();    mRtpSender.prepareSession(mRtpInput,mRemoteHost,mRemotePort,this);  } catch (  RtpException e) {    Log.d(LOGTAG,ExceptionUtil.getFullStackTrace(e));    mEventListener.onPlayerError();    return;  }  mOpened=true;  mEventListener.onPlayerOpened();}  }
class C{  public MatrixCentrality(int numThreads){  this.numThreads=numThreads;}  }
class C{  public RemoteShopServiceImpl(final DtoShopService dtoShopService,final FederationFacade federationFacade){  super(dtoShopService);  this.federationFacade=federationFacade;}  }
class C{  public StrategicBombingRaidBattle(final Territory battleSite,final GameData data,final PlayerID attacker,final BattleTracker battleTracker){  super(battleSite,attacker,battleTracker,true,BattleType.BOMBING_RAID,data);  m_isAmphibious=false;  updateDefendingUnits();}  }
class C{  public void put(HttpSession session,T value,Map<String,Object> expandContext){  AttributeAccessor<T> aa=new AttributeAccessor<T>(name,expandContext,this.attributeName,this.fma,this.needsExpand);  aa.put(session,value);}  }
class C{  public Color subtract(Color color){  return rgbac(red() - color.red(),green() - color.green(),blue() - color.blue(),alpha());}  }
class C{  @DSComment("not sensitive/not an action") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:51.461 -0500",hash_original_method="A7145B8906EC48103C63737E7936B464",hash_generated_method="DECD9BD2A2F1267D265C497B5EE21ED5") public static AccessibilityEvent obtain(int eventType){  AccessibilityEvent event=AccessibilityEvent.obtain();  event.setEventType(eventType);  return event;}  }
class C{  public void updateAndPublishService(long supplierKey,VOService supplierService,List<VendorData> grantedOrgs,List<VendorData> revokedOrgs) throws Exception {  container.login(supplierKey,UserRoleType.ORGANIZATION_ADMIN.name(),UserRoleType.SERVICE_MANAGER.name());  Response response=publishService.getServiceDetails(supplierService.getKey());  POServiceForPublish serviceForPublish=response.getResult(POServiceForPublish.class);  publishService.updateAndPublishService(serviceForPublish,createResalePermissionList(supplierService,grantedOrgs),createResalePermissionList(supplierService,revokedOrgs));}  }
class C{  @Override public boolean supportsLikeEscapeClause(){  debugCodeCall("supportsLikeEscapeClause");  return true;}  }
class C{  public static int toIntValue(Object o,int defaultValue){  if (o instanceof Number)   return ((Number)o).intValue(); else   if (o instanceof Boolean)   return ((Boolean)o).booleanValue() ? 1 : 0; else   if (o instanceof String)   return toIntValue(o.toString().trim(),defaultValue); else   if (o instanceof Castable) {    return (int)((Castable)o).castToDoubleValue(defaultValue);  } else   if (o instanceof Date)   return (int)new DateTimeImpl((Date)o).castToDoubleValue(); else   if (o instanceof ObjectWrap)   return toIntValue(((ObjectWrap)o).getEmbededObject(Integer.valueOf(defaultValue)),defaultValue);  return defaultValue;}  }
class C{  public void dismiss(){  if (isTrayShowing()) {    animator.playDismissAnimation();    onDismissed();  }}  }
class C{  public List<String> localText(){  return this.node.localText();}  }
class C{  @RequestMapping(value="/foos",method=RequestMethod.PUT,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Foo> updateFoo(@RequestBody Foo foo) throws URISyntaxException {  log.debug("REST request to update Foo : {}",foo);  if (foo.getId() == null) {    return createFoo(foo);  }  Foo result=fooRepository.save(foo);  return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert("foo",foo.getId().toString())).body(result);}  }
class C{  public String convertBinaryBitwiseOperatorToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  public static int EBADF(){  return Errno.EBADF.intValue();}  }
class C{  public HeaderCard findCard(IFitsHeader key){  return this.findCard(key.key());}  }
class C{  public static byte[] utf8ToBytes(final String str){  return encodingToBytes(str,"UTF8");}  }
class C{  private Operation buildDatastoreSetQuery(){  QueryTask.Query kindClause=new QueryTask.Query().setTermPropertyName(ServiceDocument.FIELD_NAME_KIND).setTermMatchValue(Utils.buildKind(DatastoreService.State.class));  QueryTask.QuerySpecification querySpecification=new QueryTask.QuerySpecification();  querySpecification.query.addBooleanClause(kindClause);  querySpecification.options=EnumSet.of(QueryTask.QuerySpecification.QueryOption.EXPAND_CONTENT);  return getCloudStoreHelper().createBroadcastPost(ServiceUriPaths.CORE_LOCAL_QUERY_TASKS,ServiceUriPaths.DEFAULT_NODE_SELECTOR).setBody(QueryTask.create(querySpecification).setDirect(true));}  }
class C{  public int append(OptionalParameter optionalParameter){  return append(optionalParameter.serialize());}  }
class C{  private void gaussianElimination(){  for (int r=0; r < rows; r++) {    if (data[r][r] == (byte)0) {      for (int rowBelow=r + 1; rowBelow < rows; rowBelow++) {        if (data[rowBelow][r] != 0) {          swapRows(r,rowBelow);          break;        }      }    }    if (data[r][r] == (byte)0) {      throw new IllegalArgumentException("Matrix is singular");    }    if (data[r][r] != (byte)1) {      byte scale=Galois.divide((byte)1,data[r][r]);      for (int c=0; c < columns; c++) {        data[r][c]=Galois.multiply(data[r][c],scale);      }    }    for (int rowBelow=r + 1; rowBelow < rows; rowBelow++) {      if (data[rowBelow][r] != (byte)0) {        byte scale=data[rowBelow][r];        for (int c=0; c < columns; c++) {          data[rowBelow][c]^=Galois.multiply(scale,data[r][c]);        }      }    }  }  for (int d=0; d < rows; d++) {    for (int rowAbove=0; rowAbove < d; rowAbove++) {      if (data[rowAbove][d] != (byte)0) {        byte scale=data[rowAbove][d];        for (int c=0; c < columns; c++) {          data[rowAbove][c]^=Galois.multiply(scale,data[d][c]);        }      }    }  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  static void put(final AnnotationWriter[] panns,final int off,final ByteVector out){  int size=1 + 2 * (panns.length - off);  for (int i=off; i < panns.length; ++i) {    size+=panns[i] == null ? 0 : panns[i].getSize();  }  out.putInt(size).putByte(panns.length - off);  for (int i=off; i < panns.length; ++i) {    AnnotationWriter aw=panns[i];    AnnotationWriter last=null;    int n=0;    while (aw != null) {      ++n;      aw.visitEnd();      aw.prev=last;      last=aw;      aw=aw.next;    }    out.putShort(n);    aw=last;    while (aw != null) {      out.putByteArray(aw.bv.data,0,aw.bv.length);      aw=aw.prev;    }  }}  }
class C{  public StatementExecutor(DatabaseType databaseType,TableInfo<T,ID> tableInfo,Dao<T,ID> dao){  this.databaseType=databaseType;  this.tableInfo=tableInfo;  this.dao=dao;}  }
class C{  private final ActivityRecord moveActivityToFrontLocked(int where){  ActivityRecord newTop=mHistory.remove(where);  int top=mHistory.size();  ActivityRecord oldTop=mHistory.get(top - 1);  if (DEBUG_ADD_REMOVE) {    RuntimeException here=new RuntimeException("here");    here.fillInStackTrace();    Slog.i(TAG,"Removing and adding activity " + newTop + " to stack at "+ top,here);  }  mHistory.add(top,newTop);  oldTop.frontOfTask=false;  newTop.frontOfTask=true;  return newTop;}  }
class C{  public PropertiesFilePluginFlags(){  try {    flagReader=new PropertiesFileFlagReader();  } catch (  IllegalArgumentException ex) {    LOGGER.warn(ex);  }}  }
class C{  @Override public AreaEntity create(final ConfigurableFactoryContext ctx){  AreaEntity area=new AreaEntity(getWidth(ctx),getHeight(ctx));  NoLoginAreaBehaviour noLoginAreaBehaviour=new NoLoginAreaBehaviour(getNewX(ctx),getNewY(ctx),getMessage(ctx));  area.addBehaviour(noLoginAreaBehaviour);  area.addBehaviour(new HideAreaBehaviour());  return area;}  }
class C{  private String buildMessage(String firstMessageLine,int exceptionLine,ParsingContext ctx){  if (ctx.getUnmatchedLog().length() == 0) {    return firstMessageLine;  }  StringBuffer message=new StringBuffer();  if (firstMessageLine != null) {    message.append(firstMessageLine);  }  String[] additionalLines=ctx.getUnmatchedLog().toString().split("\n");  int linesToProcess=(exceptionLine == -1 ? additionalLines.length : exceptionLine);  for (int i=0; i < linesToProcess; i++) {    message.append(newLine);    message.append(additionalLines[i]);  }  return message.toString();}  }
class C{  public Builder withCandidate(int candidate){  request.candidate=candidate;  return this;}  }
class C{  public void record(RecordBuilderImpl recordBuilder){  storeBitmap(recordBuilder);  OutputStream viewHierarchyDump=null;  try {    viewHierarchyDump=mAlbum.openViewHierarchyFile(recordBuilder.getName());    mViewHierarchy.deflate(recordBuilder.getView(),viewHierarchyDump);    mAlbum.addRecord(recordBuilder);  } catch (  IOException e) {    throw new RuntimeException(e);  } finally {    if (viewHierarchyDump != null) {      try {        viewHierarchyDump.close();      } catch (      IOException e) {        Log.e("ScreenshotImpl","Exception closing viewHierarchyDump",e);      }    }  }}  }
class C{  public ScriptButtonPanel(JFileChooser chooser,Component parent){  initComponents();  this.parent=parent;  this.chooser=chooser;}  }
class C{  void addFillComponents(Container panel,int[] cols,int[] rows){  Dimension filler=new Dimension(10,10);  boolean filled_cell_11=false;  CellConstraints cc=new CellConstraints();  if (cols.length > 0 && rows.length > 0) {    if (cols[0] == 1 && rows[0] == 1) {      panel.add(Box.createRigidArea(filler),cc.xy(1,1));      filled_cell_11=true;    }  }  for (int index=0; index < cols.length; index++) {    if (cols[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));  }  for (int index=0; index < rows.length; index++) {    if (rows[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));  }}  }
class C{  public static void beginTransaction(final CConnection connection) throws SQLException {  Preconditions.checkNotNull(connection,"IE00443: Connection argument can not be null");  connection.getConnection().setAutoCommit(false);}  }
class C{  protected KeyPairGenerator(String algorithm){  this.algorithm=algorithm;}  }
class C{  Element(String name,int index){  this.name=name;  this.index=index;  if (index > getMaxIndex()) {    AppContext.getAppContext().put(MAX_INDEX_KEY,index);  }}  }
class C{  public void testFailedOnInvalidDateSequence(){  checkFail("{d'2016-08-26'}");  checkFail("{d 2016-08-26'}");  checkFail("{d '2016-08-26}");  checkFail("{d '16-08-26'}");  checkFail("{d '2016/08/02'}");  checkFail("select {d '2016-08-26' from table;");  checkFail("select {}d '2016-08-26'} from table;");}  }
class C{  public String toExternalForm(){  if (streamHandler == null) {    return "unknown protocol(" + protocol + ")://"+ host+ file;  }  return streamHandler.toExternalForm(this);}  }
class C{  public static PolarPoint fromCartesian(double x,double y,double z){  double radius=Math.sqrt(x * x + y * y + z * z);  double latRads=Math.atan2(y,Math.sqrt(x * x + z * z));  double lonRads=Math.atan2(x,z);  return PolarPoint.fromRadians(latRads,lonRads,radius);}  }
class C{  int[] findNearestVacantArea(int pixelX,int pixelY,int minSpanX,int minSpanY,int spanX,int spanY,int[] result,int[] resultSpan){  return findNearestArea(pixelX,pixelY,minSpanX,minSpanY,spanX,spanY,true,result,resultSpan);}  }
class C{  public static void assertIsDirectory(FileStatus fileStatus){  assertTrue("Should be a dir -but isn't: " + fileStatus,fileStatus.isDirectory());}  }
class C{  public SynapseGroup createSynapseGroup(NeuronGroup source,NeuronGroup target){  connectorPanel.commitChanges();  Sparse dbc=(Sparse)connectorPanel.getConnection();  SynapseGroup synGrp=new SynapseGroup(source,target,dbc);  polarityPanel.commitChanges(synGrp);  synGrp.makeConnections();  return synGrp;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:02.340 -0500",hash_original_method="17013BC273E96D7EA584C9522A6EEB48",hash_generated_method="385B4ABCA4BDC4FB2BF9CA212825AA83") public boolean isBearingRequired(){  return mBearingRequired;}  }
class C{  @Override @SuppressWarnings("unchecked") protected String doIt() throws Exception {  String whereClause="EXISTS (SELECT T_Selection_ID FROM T_Selection WHERE  T_Selection.AD_PInstance_ID=? AND T_Selection.T_Selection_ID=WM_InOutBoundLine.WM_InOutboundLine_ID)";  Collection<MWMInOutBoundLine> lines=new Query(getCtx(),I_WM_InOutBoundLine.Table_Name,whereClause,get_TrxName()).setClient_ID().setParameters(new Object[]{getAD_PInstance_ID()}).list();  int seq=10;  for (  MWMInOutBoundLine boundline : lines) {    MWMInOutBound bound=boundline.getParent();    if (X_WM_InOutBound.DOCSTATUS_Completed.equals(bound.getDocStatus()) || X_WM_InOutBound.DOCSTATUS_Closed.equals(bound.getDocStatus()) || X_WM_InOutBound.DOCSTATUS_Voided.equals(bound.getDocStatus())) {      continue;    }    if (boundline.isProcessed()) {      continue;    }    BigDecimal QtySupply=createDDOrder(boundline);    if (p_IsCreateSupply && QtySupply.signum() > 0) {      Env.setContext(boundline.getCtx(),"IsCreateSupply","Y");      createSupply(boundline,QtySupply);    }    seq++;  }  if (order != null && p_DocAction != null) {    order.setDocAction(p_DocAction);    order.setDocStatus(DocAction.STATUS_InProgress);    order.completeIt();    order.save();  }  if (p_IsPrintPickList && order != null) {    ReportEngine re=this.getReportEngine("DistributionOrder_Header  ** TEMPLATE **","DD_Order_Header_v",order.getDD_Order_ID());    if (re == null) {      return "";    }    ReportCtl.preview(re);    re.print();  }  return "";}  }
class C{  public static String constructRequestURL(String url){  final int index=url.indexOf("?");  if (-1 != index) {    url=url.substring(0,index);  }  final int slashIndex=url.indexOf("/",8);  String baseURL=url.substring(0,slashIndex).toLowerCase(Locale.US);  final int colonIndex=baseURL.indexOf(":",8);  if (-1 != colonIndex) {    if (baseURL.startsWith("http://") && baseURL.endsWith(":80")) {      baseURL=baseURL.substring(0,colonIndex);    } else     if (baseURL.startsWith("https://") && baseURL.endsWith(":443")) {      baseURL=baseURL.substring(0,colonIndex);    }  }  url=baseURL + url.substring(slashIndex);  return url;}  }
class C{  public static boolean isToday(DateTime date){  DateTime todayMidnight=new DateTime().withTimeAtStartOfDay();  DateTime tomorrowMidnight=new DateTime().plusDays(1).withTimeAtStartOfDay();  return (todayMidnight.getMillis() == date.getMillis()) || (tomorrowMidnight.isAfter(date.getMillis()) && todayMidnight.isBefore(date.getMillis()));}  }
class C{  public static double variance(double lambda){  return 1.0 / (lambda * lambda);}  }
class C{  protected void sequence_TerminalExpression(ISerializationContext context,ReservedLiteral semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,GamlPackage.Literals.EXPRESSION__OP) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,GamlPackage.Literals.EXPRESSION__OP));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getTerminalExpressionAccess().getOpKEYWORDTerminalRuleCall_5_1_0(),semanticObject.getOp());  feeder.finish();}  }
class C{  public VasaProviderInfo registerVASACertificate(String username,String password,String certificateStr) throws InvalidCertificate, InvalidLogin, InvalidSession, StorageFault {  final String methodName="registerVASACertificate(): ";  log.info(methodName + "Entry with username[" + username+ "], password[****], certificate[****]");  VasaProviderInfo vpinfo=contextManager.registerVASACertificate(username,password,certificateStr);  log.info(methodName + "Exit returning [vpInfo]");  return vpinfo;}  }
class C{  public void startDocument() throws SAXException {  if (contentHandler != null) {    contentHandler.startDocument();  }}  }
class C{  public void handleDocumentEvent(DocumentEvent e){  if (running && parsers.size() > 0) {    timer.restart();  }}  }
class C{  GzipOrRawInputStream(final InputStream raw) throws IOException {  this(raw,512);}  }
class C{  public Splitter(boolean vertical,float proportion){  this(vertical,proportion,0.0f,1.0f);}  }
class C{  public Collection<IN4JSProject> recursiveDependencyCollector(IN4JSSourceContainerAware sourceContainerAware){  if (null == sourceContainerAware) {    return emptyList();  }  final Collection<IN4JSProject> dependencies=newArrayList();  final RecursionGuard<URI> guard=new RecursionGuard<>();  recursiveDependencyCollector(sourceContainerAware,dependencies,guard);  return dependencies;}  }
class C{  public static JournalStore create(Path path,boolean isMmap) throws IOException {  long segmentSize=4 * 1024 * 1024;  JournalStore.Builder builder=JournalStore.Builder.create(path);  builder.segmentSize(segmentSize);  builder.mmap(isMmap);  JournalStore store=builder.build();  return store;}  }
class C{  private static String forceNumberStringToTwoDigits(String text){  while (text.length() < 2) {    text="0" + text;  }  if (text.length() > 2) {    text=text.substring(text.length() - 2,text.length());  }  return text;}  }
class C{  @Override public String toString(){  if (m_priors == null) {    return "No clusterer built yet!";  }  StringBuffer text=new StringBuffer();  text.append("MakeDensityBasedClusterer: \n\nWrapped clusterer: " + m_wrappedClusterer.toString());  text.append("\nFitted estimators (with ML estimates of variance):\n");  for (int j=0; j < m_priors.length; j++) {    text.append("\nCluster: " + j + " Prior probability: "+ Utils.doubleToString(m_priors[j],4)+ "\n\n");    for (int i=0; i < m_model[0].length; i++) {      text.append("Attribute: " + m_theInstances.attribute(i).name() + "\n");      if (m_theInstances.attribute(i).isNominal()) {        if (m_model[j][i] != null) {          text.append(m_model[j][i].toString());        }      } else {        text.append("Normal Distribution. Mean = " + Utils.doubleToString(m_modelNormal[j][i][0],4) + " StdDev = "+ Utils.doubleToString(m_modelNormal[j][i][1],4)+ "\n");      }    }  }  return text.toString();}  }
class C{  public void testString() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(new SortedDocValuesField("value",new BytesRef("foo")));  doc.add(newStringField("value","foo",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new SortedDocValuesField("value",new BytesRef("bar")));  doc.add(newStringField("value","bar",Field.Store.YES));  writer.addDocument(doc);  IndexReader ir=writer.getReader();  writer.close();  IndexSearcher searcher=newSearcher(ir);  Sort sort=new Sort(new SortField("value",SortField.Type.STRING));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(2,td.totalHits);  assertEquals("bar",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("foo",searcher.doc(td.scoreDocs[1].doc).get("value"));  ir.close();  dir.close();}  }
class C{  public Map buildMap(int size){  if (size <= ANY_SIZE)   return new HashMap(); else   return new HashMap(size);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:21.633 -0500",hash_original_method="1AF6724BA85578FFBC777CD5B6E926DF",hash_generated_method="72E8E1C7369662580FDD8179D7091D4B") public static String trimV4AddrZeros(String addr){  if (addr == null)   return null;  String[] octets=addr.split("\\.");  if (octets.length != 4)   return addr;  StringBuilder builder=new StringBuilder(16);  String result=null;  for (int i=0; i < 4; i++) {    try {      if (octets[i].length() > 3)       return addr;      builder.append(Integer.parseInt(octets[i]));    } catch (    NumberFormatException e) {      return addr;    }    if (i < 3)     builder.append('.');  }  result=builder.toString();  return result;}  }
class C{  protected void updateProjectInput(ProjectInput in){}  }
class C{  public String CFDToString(){  StringBuilder str=new StringBuilder();  for (  SimpleImmutableEntry<Integer,String> lhs : premise) {    str.append(lhs.getKey() + "=" + lhs.getValue());    str.append(",");  }  str.deleteCharAt(str.length() - 1);  str.append("->");  str.append(RHS.getKey() + "=" + RHS.getValue());  return str.toString();}  }
class C{  public mxCell(){  this(null);}  }
class C{  public static Test suite(){  return new TestSuite(MergeNominalValuesTest.class);}  }
class C{  public Object opt(String key){  return key == null ? null : this.map.get(key);}  }
class C{  public boolean shouldMeterInput(URL url,String method){  return true;}  }
class C{  public int loadConf() throws GeneralException {  boolean loaded=false;  int ret=ConfType.Error;  if (Cfg.DEMO) {  }  if (Cfg.DEBUG_SPECIFIC) {    Check.log(TAG + " (loadConf): TRY NEWCONF");  }  BSm.cleanMemory();  AutoFile file=new AutoFile(Path.conf() + ConfType.NewConf);  if (file.exists()) {    loaded=loadConfFile(file,true);    if (!loaded) {      EvidenceBuilder.info(M.e("Invalid new configuration, reverting"));      file.delete();    } else {      EvidenceBuilder.info(M.e("New configuration activated"));      file.rename(Path.conf() + ConfType.CurrentConf);      ret=ConfType.NewConf;    }  }  if (!loaded) {    if (Cfg.DEBUG_SPECIFIC) {      Check.log(TAG + " (loadConf): TRY CURRENTCONF");    }    file=new AutoFile(Path.conf() + ConfType.CurrentConf);    if (file.exists()) {      loaded=loadConfFile(file,true);      if (!loaded) {        EvidenceBuilder.info(M.e("Actual configuration corrupted"));      } else {        ret=ConfType.CurrentConf;      }    }  }  if (!loaded && (Cfg.DEBUG || !Cfg.CHECK_ANTI_DEBUG)) {    if (Cfg.DEBUG_SPECIFIC) {      Check.log(TAG + " (loadConf): TRY JSONCONF");    }    final byte[] resource=Utils.getAsset(M.e("cb.data"));    String json=new String(resource);    if (json != null) {      final Configuration conf=new Configuration(json);      loaded=conf.loadConfiguration(true);      if (Cfg.DEBUG_SPECIFIC) {        Check.log(TAG + " Info: Json file loaded: " + loaded);      }      if (loaded) {        ret=ConfType.ResourceJson;      }    }  }  if (!loaded) {    if (Cfg.DEBUG_SPECIFIC) {      Check.log(TAG + " (loadConf): TRY ASSET CONF");    }    final byte[] resource=Utils.getAsset(M.e("cb.data"));    final Configuration conf=new Configuration(resource);    loaded=conf.loadConfiguration(true);    if (Cfg.DEBUG_SPECIFIC) {      Check.log(TAG + " Info: Resource file loaded: " + loaded);    }    if (loaded) {      ret=ConfType.ResourceConf;    }  }  return ret;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public List<NamedRelatedResourceRep> refreshMatchingStoragePools(URI id){  StoragePoolList response=client.get(StoragePoolList.class,getIdUrl() + "/refresh-matched-pools",id);  return defaultList(response.getPools());}  }
class C{  public CRL engineGenerateCRL(InputStream inStream) throws CRLException {  if (currentCrlStream == null) {    currentCrlStream=inStream;    sCrlData=null;    sCrlDataObjectCount=0;  } else   if (currentCrlStream != inStream) {    currentCrlStream=inStream;    sCrlData=null;    sCrlDataObjectCount=0;  }  try {    if (sCrlData != null) {      if (sCrlDataObjectCount != sCrlData.size()) {        return getCRL();      } else {        sCrlData=null;        sCrlDataObjectCount=0;        return null;      }    }    PushbackInputStream pis=new PushbackInputStream(inStream);    int tag=pis.read();    if (tag == -1) {      return null;    }    pis.unread(tag);    if (tag != 0x30) {      return readPEMCRL(pis);    } else {      return readDERCRL(new ASN1InputStream(pis,true));    }  } catch (  CRLException e) {    throw e;  }catch (  Exception e) {    throw new CRLException(e.toString());  }}  }
class C{  public Matrix arrayTimesEquals(Matrix B){  checkMatrixDimensions(B);  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=A[i][j] * B.A[i][j];    }  }  return this;}  }
class C{  public static <T>void append(String fileName,T line,ITransformer<T,String> transformer) throws IOException {  BufferedWriter writer=new BufferedWriter(new FileWriter(fileName,true));  writer.write(transformer.transform(line));  writer.newLine();  writer.close();}  }
class C{  public static <T extends NativeInterface>T create(Class<T> c){  try {    if (interfaceToClassLookup != null) {      Class cls=interfaceToClassLookup.get(c);      if (cls == null) {        return null;      }      return (T)cls.newInstance();    }    return (T)Class.forName(c.getName() + "Impl").newInstance();  } catch (  Throwable ex) {    if (verbose) {      ex.printStackTrace();    }  }  return null;}  }
class C{  protected void writeVector(SWFVectors vecs,Object el) throws IOException {  if (el instanceof Shape.Move) {    Shape.Move move=(Shape.Move)el;    currx=move.getX() * SWFConstants.TWIPS;    curry=move.getY() * SWFConstants.TWIPS;    int x=(int)currx;    int y=(int)curry;    vecs.move(x,y);  } else   if (el instanceof Shape.Line) {    Shape.Line line=(Shape.Line)el;    double xx=line.getX() * SWFConstants.TWIPS;    double yy=line.getY() * SWFConstants.TWIPS;    int dx=(int)(xx - currx);    int dy=(int)(yy - curry);    vecs.line(dx,dy);    currx=xx;    curry=yy;  } else   if (el instanceof Shape.Curve) {    Shape.Curve curve=(Shape.Curve)el;    double xx=curve.getX() * SWFConstants.TWIPS;    double yy=curve.getY() * SWFConstants.TWIPS;    double cxx=curve.getControlX() * SWFConstants.TWIPS;    double cyy=curve.getControlY() * SWFConstants.TWIPS;    int dx=(int)(xx - cxx);    int dy=(int)(yy - cyy);    int cx=(int)(cxx - currx);    int cy=(int)(cyy - curry);    vecs.curve(cx,cy,dx,dy);    currx=xx;    curry=yy;  }}  }
class C{  void hideException(){  this.textException.dispose();  this.parent.pack();}  }
class C{  public ReLinkerInstance recursively(){  this.recursive=true;  return this;}  }
class C{  private static Point2D.Double v2AddII(Point2D.Double a,Point2D.Double b){  Point2D.Double c=new Point2D.Double();  c.x=a.x + b.x;  c.y=a.y + b.y;  return c;}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMAnimateTransformElement(prefix,(AbstractDocument)doc);}  }
class C{  public ExpressionException(String message,String detail){  super(message,"expression");  setDetail(detail);}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public void addAllowedClass(String className){  String classRegex=START + dotsToRegex(className) + ".class$";  if (DEBUG) {    System.out.println("Class regex: " + classRegex);  }  patternList.add(Pattern.compile(classRegex).matcher(""));}  }
class C{  public void firePaginationChangedEvent(){  fireEvent(EventType.PAGINATION_CHANGED);}  }
class C{  @Override public void stop(){  this.stopped=true;  try {    this.serverSocket.close();  } catch (  IOException e) {    throw new CargoException("Error stopping embedded HTTP server",e);  }}  }
class C{  public static String hintingSize(Font font){  int instrSize=0;  LocaTable locaTable=FontUtils.getLocaTable(font);  GlyphTable glyfTable=FontUtils.getGlyphTable(font);  for (int i=0; i < locaTable.numGlyphs(); i++) {    Glyph glyph=glyfTable.glyph(locaTable.glyphOffset(i),locaTable.glyphLength(i));    instrSize+=glyph.instructionSize();  }  double percentage=instrSize * 100.0 / glyfTable.headerLength();  return String.format("%d bytes (%s%% of glyf table)",instrSize,twoDecimalPlaces.format(percentage));}  }
class C{  public boolean isSmscDelReceiptNotRequested(){  return isSmscDelNotRequested(registeredDelivery);}  }
class C{  public final void test() throws Exception {  System.out.println("Nom_Identifier Feature Extractor");  String[] viewsToAdd={ViewNames.POS,ViewNames.LEMMA,ViewNames.SHALLOW_PARSE,ViewNames.PARSE_GOLD,ViewNames.SRL_VERB,ViewNames.PARSE_STANFORD,ViewNames.NER_CONLL};  TextAnnotation ta=DummyTextAnnotationGenerator.generateAnnotatedTextAnnotation(viewsToAdd,true,3);  int i=0;  ta.addView(ClauseViewGenerator.STANFORD);  ta.addView(PseudoParse.STANFORD);  System.out.println("This textannotation annotates the text: \n" + ta.getText());  View SRL_VERB=ta.getView("SRL_VERB");  List<Constituent> testlist=SRL_VERB.getConstituentsCoveringSpan(10,13);  testlist.addAll(SRL_VERB.getConstituentsCoveringSpan(26,27));  FeatureManifest featureManifest;  FeatureExtractor fex;  String fileName=Constant.prefix + "/Nom/Identifier/nom-identifier.fex";  featureManifest=new FeatureManifest(new FileInputStream(fileName));  FeatureManifest.setFeatureExtractor("hyphen-argument-feature",FeatureGenerators.hyphenTagFeature);  FeatureManifest.setTransformer("parse-left-sibling",FeatureGenerators.getParseLeftSibling(ViewNames.PARSE_STANFORD));  FeatureManifest.setTransformer("parse-right-sibling",FeatureGenerators.getParseRightSibling(ViewNames.PARSE_STANFORD));  FeatureManifest.setFeatureExtractor("pp-features",FeatureGenerators.ppFeatures(ViewNames.PARSE_STANFORD));  FeatureManifest.setFeatureExtractor("projected-path",new ProjectedPath(ViewNames.PARSE_STANFORD));  featureManifest.useCompressedName();  featureManifest.setVariable("*default-parser*",ViewNames.PARSE_STANFORD);  fex=featureManifest.createFex();  SrlNomIdentifier ni=new SrlNomIdentifier();  for (  Constituent test : testlist) {    assertTrue(SRLFeaturesComparator.isEqual(test,fex,ni));  }}  }
class C{  public void addCommands(PDFPage page,Matrix extra){synchronized (commands) {    addPush();    if (extra != null) {      addXform(extra);    }    commands.addAll(page.getCommands());    addPop();  }  updateImages();}  }
class C{  public void clear(){  devices.values().forEach(null);  devices.clear();}  }
class C{  public boolean isLocalSet(int index) throws TransformerException {  return (_stackFrames[index + _currentFrameBottom] != null);}  }
class C{  void usage(){  System.out.println(getClass().getName() + ": [-verbose] [-nothrow] [-prompt] [test names]");  System.out.println("test names:");  Enumeration methodNames=testMethods.keys();  while (methodNames.hasMoreElements()) {    System.out.println("\t" + methodNames.nextElement());  }}  }
class C{  protected void implReset(){  unpaired=false;  nyble=0;}  }
class C{  public boolean visit(ArrayInitializer node){  return true;}  }
class C{  public AbsoluteError(double epsilon){  super();  this.epsilon=epsilon;}  }
class C{  public static String join(Object[] array,String separator){  if (array == null) {    return null;  }  if (array.length == 0) {    return StringPool.EMPTY;  }  if (array.length == 1) {    return String.valueOf(array[0]);  }  final StringBuilder sb=new StringBuilder(array.length * 16);  for (int i=0; i < array.length; i++) {    if (i > 0) {      sb.append(separator);    }    sb.append(array[i]);  }  return sb.toString();}  }
class C{  public ServiceChannel createServiceChannel(String connectUrl,EndpointDescription endpoint) throws ServiceResultException {  return new ServiceChannel(createSecureChannel(connectUrl,endpoint));}  }
class C{  Item newMethodItem(final String owner,final String name,final String desc,final boolean itf){  int type=itf ? IMETH : METH;  key3.set(type,owner,name,desc);  Item result=get(key3);  if (result == null) {    put122(type,newClass(owner),newNameType(name,desc));    result=new Item(index++,key3);    put(result);  }  return result;}  }
class C{  public static void deprecatedAttribute(SimpleMethod method,Element element,String attributeName,String fixInstruction) throws ValidationException {  String attributeValue=element.getAttribute(attributeName);  if (attributeValue.length() > 0) {    handleError("Attribute \"" + attributeName + "\" is deprecated ("+ fixInstruction+ ")",method,element);  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:11.446 -0500",hash_original_method="78318325CB229FE4515B0254D2B416A2",hash_generated_method="23EAC72E71441F799B6886655F812A45") public NinePatchDrawable(Resources res,NinePatch patch){  this(new NinePatchState(patch,new Rect()),res);  mNinePatchState.mTargetDensity=mTargetDensity;}  }
class C{  public static Set<Dependency<?>> forInjectionPoints(Set<InjectionPoint> injectionPoints){  List<Dependency<?>> dependencies=new ArrayList<>();  for (  InjectionPoint injectionPoint : injectionPoints) {    dependencies.addAll(injectionPoint.getDependencies());  }  return ImmutableSet.copyOf(dependencies);}  }
class C{  public static boolean isIndependentPooled(Method method,List<IndependenceTest> independenceTests,Node x,Node y,List<Node> condSet){  if (method == Method.fisher) {    return isIndependentPooledFisher(independenceTests,x,y,condSet);  } else   if (method == Method.fisher2) {    return isIndependentPooledFisher2(independenceTests,x,y,condSet);  } else   if (method == Method.tippett) {    return isIndependentPooledTippett(independenceTests,x,y,condSet);  } else   if (method == Method.worsleyfriston) {    return isIndependentPooledWorsleyFriston(independenceTests,x,y,condSet);  } else   if (method == Method.stouffer) {    return isIndependentPooledStouffer(independenceTests,x,y,condSet);  } else   if (method == Method.mudholkergeorge) {    return isIndependentPooledMudholkerGeorge(independenceTests,x,y,condSet);  } else   if (method == Method.mudholkergeorge2) {    return isIndependentPooledMudholkerGeorge2(independenceTests,x,y,condSet);  } else   if (method == Method.averagetest) {    return isIndependentPooledAverageTest(independenceTests,x,y,condSet);  } else   if (method == Method.average) {    return isIndependentPooledAverage(independenceTests,x,y,condSet);  } else   if (method == Method.random) {    return isIndependentPooledRandom(independenceTests,x,y,condSet);  } else   if (method == Method.fdr) {    return isIndependentMajorityFdr(independenceTests,x,y,condSet);  } else   if (method == Method.majority) {    return isIndependentMajorityIndep(independenceTests,x,y,condSet);  } else {    throw new RuntimeException("Invalid Test");  }}  }
class C{  public void checkError() throws IOException {  if (mIOException != null) {    throw mIOException;  } else   if (mRuntimeException != null) {    throw mRuntimeException;  } else   if (mError != null) {    throw mError;  }}  }
class C{  public static <T>int detectLastIndex(T[] objectArray,Predicate<? super T> predicate){  if (objectArray == null) {    throw new IllegalArgumentException("Cannot perform a detectLastIndex on null");  }  return InternalArrayIterate.detectLastIndex(objectArray,objectArray.length,predicate);}  }
class C{  public long tryConvertToOptimisticRead(long stamp){  long a=stamp & ABITS, m, s, next;  WNode h;  U.loadFence();  for (; ; ) {    if (((s=state) & SBITS) != (stamp & SBITS))     break;    if ((m=s & ABITS) == 0L) {      if (a != 0L)       break;      return s;    } else     if (m == WBIT) {      if (a != m)       break;      state=next=(s+=WBIT) == 0L ? ORIGIN : s;      if ((h=whead) != null && h.status != 0)       release(h);      return next;    } else     if (a == 0L || a >= WBIT)     break; else     if (m < RFULL) {      if (U.compareAndSwapLong(this,STATE,s,next=s - RUNIT)) {        if (m == RUNIT && (h=whead) != null && h.status != 0)         release(h);        return next & SBITS;      }    } else     if ((next=tryDecReaderOverflow(s)) != 0L)     return next & SBITS;  }  return 0L;}  }
class C{  public Property hourOfDay(){  return new Property(this,getChronology().hourOfDay());}  }
class C{  public final void testPSSParameterSpec0101(){  AlgorithmParameterSpec aps=new PSSParameterSpec(20);  assertTrue(aps instanceof PSSParameterSpec);}  }
class C{  public boolean deleteRSetStep(URI rpSystemId,List<URI> volumeIds,String token) throws InternalException {  List<String> replicationSetNames=new ArrayList<String>();  try {    List<RecoverPointVolumeProtectionInfo> volumeProtectionInfoList=new ArrayList<RecoverPointVolumeProtectionInfo>();    ProtectionSystem rpSystem=_dbClient.queryObject(ProtectionSystem.class,rpSystemId);    RecoverPointClient rp=RPHelper.getRecoverPointClient(rpSystem);    for (    URI volumeId : volumeIds) {      Volume volume=_dbClient.queryObject(Volume.class,volumeId);      RecoverPointVolumeProtectionInfo volumeProtectionInfo=rp.getProtectionInfoForVolume(RPHelper.getRPWWn(volume.getId(),_dbClient));      Volume sourceVolume=RPHelper.getRPSourceVolume(_dbClient,volume);      VirtualPool virtualPool=_dbClient.queryObject(VirtualPool.class,sourceVolume.getVirtualPool());      volumeProtectionInfo.setMetroPoint(VirtualPool.vPoolSpecifiesMetroPoint(virtualPool));      volumeProtectionInfoList.add(volumeProtectionInfo);      replicationSetNames.add(volume.getRSetName());    }    if (!volumeProtectionInfoList.isEmpty()) {      rp.deleteReplicationSets(volumeProtectionInfoList);    }    WorkflowStepCompleter.stepSucceded(token);  } catch (  Exception e) {    _log.error(String.format("deleteRSetStep Failed - Replication Sets: %s",replicationSetNames.toString()));    return stepFailed(token,e,"deleteRSetStep");  }  return true;}  }
class C{  public void removeEntity(Entity entity){  boolean removed=false;  entities.removeValue(entity,true);  if (entitiesById.remove(entity.getId()) == entity) {    removed=true;  }  if (removed) {    entity.uuid=0L;  }}  }
class C{  public VNXeCommandJob attachLunGroupSnap(String snapId) throws VNXeException {  StringBuilder urlBuilder=new StringBuilder(URL_INSTANCE);  urlBuilder.append(snapId);  urlBuilder.append(URL_ATTACH);  _url=urlBuilder.toString();  return postRequestAsync(null);}  }
class C{  <T extends JCTree>List<T> translateArgs(List<T> _args,List<Type> parameters,Type varargsElement){  if (parameters.isEmpty())   return _args;  List<T> args=_args;  while (parameters.tail.nonEmpty()) {    args.head=translate(args.head,parameters.head);    args=args.tail;    parameters=parameters.tail;  }  Type parameter=parameters.head;  Assert.check(varargsElement != null || args.length() == 1);  if (varargsElement != null) {    while (args.nonEmpty()) {      args.head=translate(args.head,varargsElement);      args=args.tail;    }  } else {    args.head=translate(args.head,parameter);  }  return _args;}  }
class C{  static <J>MethodId<J> MethodId(String name){  for (  Method m : JavacTreeMaker.class.getDeclaredMethods()) {    if (m.getName().equals(name)) {      @SuppressWarnings("unchecked") Class<J> r=(Class<J>)m.getReturnType();      Class<?>[] p=m.getParameterTypes();      return new MethodId<J>(TreeMaker.class,name,r,p);    }  }  throw new InternalError("Not found: " + name);}  }
class C{  public void addIncludeLike(String likeExpression){  patterns.add(new Pair<StringPatternSet,Boolean>(new StringPatternSetLike(likeExpression),true));}  }
class C{  private static String _trimString(String s,int n){  if (s.length() >= 2 * n) {    s=s.substring(n,s.length() - n);  }  return s;}  }
class C{  TextSegment(int size){  super(size);}  }
class C{  public XML(Reader reader) throws IOException, ParserConfigurationException, SAXException {  this(reader,null);}  }
class C{  public String toString(){  return name;}  }
class C{  public boolean isLive(long index){  assertSegmentOpen();  return offsetPredicate.test(offsetIndex.find(relativeOffset(index)));}  }
class C{  public void forceTermination(){  final Phaser root=this.root;  long s;  while ((s=root.state) >= 0) {    if (UNSAFE.compareAndSwapLong(root,stateOffset,s,s | TERMINATION_BIT)) {      releaseWaiters(0);      releaseWaiters(1);      return;    }  }}  }
class C{  protected String doInBackground(Intent... data){  return mContactAddressMapper.getAddressFromContact(data[0].getData());}  }
class C{  private static boolean isMatchingEdgeListItem(Context context,AccessibilityNodeInfoCompat cursor,int direction,NodeFilter filter){  AccessibilityNodeInfoCompat ancestor=null;  AccessibilityNodeInfoCompat searched=null;  AccessibilityNodeInfoCompat searchedAncestor=null;  try {    ancestor=getMatchingAncestor(null,cursor,filter);    if (ancestor == null) {      return false;    }    searched=NodeFocusFinder.focusSearch(cursor,direction);    while ((searched != null) && !AccessibilityNodeInfoUtils.shouldFocusNode(context,searched)) {      final AccessibilityNodeInfoCompat temp=searched;      searched=NodeFocusFinder.focusSearch(temp,direction);      temp.recycle();    }    if ((searched == null) || searched.equals(ancestor)) {      return true;    }    searchedAncestor=getMatchingAncestor(null,searched,filter);    if (!ancestor.equals(searchedAncestor)) {      return true;    }  }  finally {    recycleNodes(ancestor,searched,searchedAncestor);  }  return false;}  }
class C{  public String toString(){  return "InterfaceLimitedInterface " + super.toString();}  }
class C{  @Override public byte[] encode(){  byte binValue[]=new byte[HEADER_LENGTH + DATA_LENGTH];  binValue[0]=(byte)(getAttributeType() >> 8);  binValue[1]=(byte)(getAttributeType() & 0x00FF);  binValue[2]=(byte)(getDataLength() >> 8);  binValue[3]=(byte)(getDataLength() & 0x00FF);  binValue[4]=(byte)(connectionIdValue >> 24);  binValue[5]=(byte)((connectionIdValue & 0x00ff0000) >> 16);  binValue[6]=(byte)((connectionIdValue & 0x0000ff00) >> 8);  binValue[7]=(byte)(connectionIdValue & 0x000000ff);  return binValue;}  }
class C{  public void createTopic(String topic){  createTopic(topic,1,1,new Properties());}  }
class C{  default <T2,R>ApplicativeFunctor<R> combine(final Value<? extends T2> app,final BiFunction<? super T,? super T2,? extends R> fn){  return (ApplicativeFunctor<R>)map(null).map(null);}  }
class C{  protected void connect(){  if (m_DbUtils.isConnected()) {    try {      m_DbUtils.disconnectFromDatabase();      notifyConnectionListeners(ConnectionEvent.DISCONNECT);    } catch (    Exception e) {      e.printStackTrace();      notifyConnectionListeners(ConnectionEvent.DISCONNECT,e);    }  }  try {    m_DbUtils.setDatabaseURL(getURL());    m_DbUtils.setUsername(getUser());    m_DbUtils.setPassword(getPassword());    m_DbUtils.connectToDatabase();    notifyConnectionListeners(ConnectionEvent.CONNECT);    addHistory(getUser() + "@" + getURL());  } catch (  Exception e) {    e.printStackTrace();    notifyConnectionListeners(ConnectionEvent.CONNECT,e);  }  setButtons();}  }
class C{  public GenCycleDetection(){  super(Options.set,"Gen Cycle Detection","Should we use a generational approach to cycle detection?",false);}  }
class C{  private Sprite buildOutfit(long code,final OutfitColor color){  int oldcode=(int)(code / (10000));  Sprite layer=this.buildOutfit(oldcode,color);  final int mouthcode=(int)(code % 100);  code/=100;  final int eyescode=(int)(code % 100);  final ImageSprite sprite=new ImageSprite(layer);  final Graphics g=sprite.getGraphics();  layer=getMouthSprite(mouthcode);  layer.draw(g,0,0);  layer=getEyesSprite(eyescode,color);  layer.draw(g,0,0);  return sprite;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:08.637 -0500",hash_original_method="6090D81CA85470AC09234766F76789C0",hash_generated_method="BF14AB6561EF00397BB414AC6D1395B7") @DSSafe(DSCat.SAFE_LIST) public boolean remove(HDR obj){  if (hlist.size() == 0)   return false; else   return hlist.remove(obj);}  }
class C{  Condition(String conditionString){  String[] parts=C_SEP_PATTERN.split(conditionString);  type=Type.getForName(parts[0]);  handleSpecialTypes();  realmClass=parts[1];  if (!isRealmClassValid())   throw new IllegalArgumentException(String.format("Ruqus doesn't have data for \"%s\".",parts[1]));  if (transformer != null)   return; else   if (type == Type.NORMAL) {    setField(parts[2]);    args=argsFromString(parts[3]);  }  transformer=parts[type == Type.NORMAL ? 4 : 2];  if (!isTransformerValid())   throw new IllegalArgumentException(String.format("Ruqus doesn't have data for the " + "transformer \"%s\"",transformer));}  }
class C{  @Override public int read() throws IOException {  while (in != null) {    int result=in.read();    if (result >= 0) {      return result;    }    nextStream();  }  return -1;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String whiteboxHeaderFile=null;  String whiteboxDataFile=null;  WhiteboxRaster output=null;  int i=0;  String[] imageFiles;  int numImages=0;  double noData=-32768;  int progress=0;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    String returnedHeader="";    for (i=0; i < numImages; i++) {      if (numImages > 1) {        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      GeoTiff gt=new GeoTiff(imageFiles[i]);      gt.read();      int compressionType=gt.getCompressionType();      if (compressionType != 1) {        showFeedback("GeoTiff import does not currently support compressed files.");        return;      }      boolean hasNoDataValue=gt.hasNoDataTag();      double nodata;      if (hasNoDataValue) {        nodata=gt.getNoData();      } else {        nodata=-32768;      }      int nRows=gt.getNumberRows();      int nCols=gt.getNumberColumns();      int dot=imageFiles[i].lastIndexOf(".");      String tiffExtension=imageFiles[i].substring(dot + 1);      whiteboxHeaderFile=imageFiles[i].replace(tiffExtension,"dep");      if (i == 0) {        returnedHeader=whiteboxHeaderFile;      }      whiteboxDataFile=imageFiles[i].replace(tiffExtension,"tas");      (new File(whiteboxHeaderFile)).delete();      (new File(whiteboxDataFile)).delete();      ByteOrder byteOrder=gt.getByteOrder();      WhiteboxRasterBase.DataScale myDataScale=WhiteboxRasterBase.DataScale.CONTINUOUS;      if (gt.getPhotometricInterpretation() == 2) {        myDataScale=WhiteboxRasterBase.DataScale.RGB;      }      final WhiteboxRaster wbr=new WhiteboxRaster(whiteboxHeaderFile,gt.getNorth(),gt.getSouth(),gt.getEast(),gt.getWest(),nRows,nCols,myDataScale,WhiteboxRasterBase.DataType.FLOAT,nodata,nodata);      wbr.setByteOrder(byteOrder.toString());      double z;      int oldProgress=-1;      for (int row=0; row < nRows; row++) {        for (int col=0; col < nCols; col++) {          z=gt.getValue(row,col);          if (!hasNoDataValue && (z == -32768 || z == -Float.MAX_VALUE)) {            nodata=z;            hasNoDataValue=true;            wbr.setNoDataValue(nodata);          }          wbr.setValue(row,col,z);        }        progress=(int)(100f * row / (nRows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress("Exporting GeoTiff file...",progress);        }      }      wbr.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      wbr.addMetadataEntry("Created on " + new Date());      String[] metaData=gt.showInfo();      for (int a=0; a < metaData.length; a++) {        wbr.addMetadataEntry(metaData[a]);      }      wbr.close();      gt.close();    }    if (!returnedHeader.isEmpty()) {      returnData(returnedHeader);    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void handleDecode(Result rawResult,Bundle bundle){  inactivityTimer.onActivity();  beepManager.playBeepSoundAndVibrate();  bundle.putInt("width",mCropRect.width());  bundle.putInt("height",mCropRect.height());  bundle.putString("result",rawResult.getText());  startActivity(new Intent(CaptureActivity.this,ResultActivity.class).putExtras(bundle));}  }
class C{  @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:51.470 -0500",hash_original_method="74951363C7DF24AC8EB3BEFEC94F56A2",hash_generated_method="9CA234BE13AFD4B45A70AF1A12C4FC57") @Override public void recycle(){  if (mIsInPool) {    throw new IllegalStateException("Event already recycled!");  }  clear();synchronized (sPoolLock) {    if (sPoolSize <= MAX_POOL_SIZE) {      mNext=sPool;      sPool=this;      mIsInPool=true;      sPoolSize++;    }  }}  }
class C{  public static List<Method> findMethodsByNameAndNumParams(Object object,String method,int numParam){  LinkedList<Method> list=new LinkedList<Method>();  Method[] methods=object.getClass().getMethods();  for (  Method m : methods) {    if (m.getParameterTypes().length != numParam) {      continue;    }    if (!m.getName().equals(method)) {      continue;    }    list.add(m);  }  return list;}  }
class C{  public void clear(){  dataMap.clear();}  }
class C{  @Override public void onViewReleased(View releasedChild,float xVel,float yVel){  super.onViewReleased(releasedChild,xVel,yVel);  if (mConfigView.isDragViewAboveTheLimit()) {    mConfigView.moveOffScreen();  } else {    mConfigView.moveToOriginalPosition();  }}  }
class C{  public char skipTo(char to) throws JSONException {  char c;  try {    int startIndex=this.index;    int startCharacter=this.character;    int startLine=this.line;    reader.mark(8192);    do {      c=next();      if (c == 0) {        reader.reset();        this.index=startIndex;        this.character=startCharacter;        this.line=startLine;        return c;      }    } while (c != to);  } catch (  IOException exc) {    throw new JSONException(exc);  }  back();  return c;}  }
class C{  public boolean isBooleanOptionSet(Option option,Config c){  String v=options.get(option);  if (v == null) {    v=c.getDefaultRuleOptions().get(option);    if (v == null) {      throw new Profiler4JError("[INTERNAL] No default set for boolean option " + option);    }  }  return Utils.parseBoolean(v);}  }
class C{  public void expandPath(boolean animate,Object... path){  Container c=this;  int plen=path.length;  for (int iter=0; iter < plen; iter++) {    c=expandPathNode(animate,c,path[iter]);  }}  }
class C{  public static int sum(int[] ints){  int sum=0;  for (int i=0; i < ints.length; i++) {    sum+=ints[i];  }  return sum;}  }
class C{  @Inline @Entrypoint public static int intArrayRead(int[] ref,int index){  if (NEEDS_INT_GC_READ_BARRIER) {    ObjectReference array=ObjectReference.fromObject(ref);    Offset offset=Offset.fromIntZeroExtend(index << LOG_BYTES_IN_INT);    return Selected.Mutator.get().intRead(array,array.toAddress().plus(offset),offset.toWord(),Word.zero(),ARRAY_ELEMENT);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return 0;}  }
class C{  public boolean toThunderState(){  return to;}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  @Override public void sendMessage(ArrayList<Attribute> contents) throws IOException {  this.sendMessage(constructOperationsMessage(contents) + "\n");}  }
class C{  public void windowClosing(java.awt.event.WindowEvent e){  log.debug("VSDecoderFrame windowClosing() called... " + e.toString());  log.debug("Calling decoderPane.windowClosing() directly " + e.toString());}  }
class C{  public boolean isAccessible(){  return accessible;}  }
class C{  public static void orderBestPatterns(ResultPoint[] patterns){  float zeroOneDistance=distance(patterns[0],patterns[1]);  float oneTwoDistance=distance(patterns[1],patterns[2]);  float zeroTwoDistance=distance(patterns[0],patterns[2]);  ResultPoint pointA;  ResultPoint pointB;  ResultPoint pointC;  if (oneTwoDistance >= zeroOneDistance && oneTwoDistance >= zeroTwoDistance) {    pointB=patterns[0];    pointA=patterns[1];    pointC=patterns[2];  } else   if (zeroTwoDistance >= oneTwoDistance && zeroTwoDistance >= zeroOneDistance) {    pointB=patterns[1];    pointA=patterns[0];    pointC=patterns[2];  } else {    pointB=patterns[2];    pointA=patterns[0];    pointC=patterns[1];  }  if (crossProductZ(pointA,pointB,pointC) < 0.0f) {    ResultPoint temp=pointA;    pointA=pointC;    pointC=temp;  }  patterns[0]=pointA;  patterns[1]=pointB;  patterns[2]=pointC;}  }
class C{  private PendingBlock writeBlock(int prefixLength,boolean isFloor,int floorLeadLabel,int start,int end,boolean hasTerms,boolean hasSubBlocks) throws IOException {  assert end > start;  long startFP=out.getFilePointer();  boolean hasFloorLeadLabel=isFloor && floorLeadLabel != -1;  final BytesRef prefix=new BytesRef(prefixLength + (hasFloorLeadLabel ? 1 : 0));  System.arraycopy(lastTerm.bytes(),0,prefix.bytes,0,prefixLength);  prefix.length=prefixLength;  int numEntries=end - start;  int code=numEntries << 1;  if (end == pending.size()) {    code|=1;  }  out.writeVInt(code);  boolean isLeafBlock=hasSubBlocks == false;  final List<FST<Pair<BytesRef,Long>>> subIndices;  boolean absolute=true;  long maxVersionInBlock=-1;  if (isLeafBlock) {    subIndices=null;    for (int i=start; i < end; i++) {      PendingEntry ent=pending.get(i);      assert ent.isTerm : "i=" + i;      PendingTerm term=(PendingTerm)ent;      assert StringHelper.startsWith(term.termBytes,prefix) : "term.term=" + term.termBytes + " prefix="+ prefix;      BlockTermState state=term.state;      maxVersionInBlock=Math.max(maxVersionInBlock,((IDVersionTermState)state).idVersion);      final int suffix=term.termBytes.length - prefixLength;      suffixWriter.writeVInt(suffix);      suffixWriter.writeBytes(term.termBytes,prefixLength,suffix);      assert floorLeadLabel == -1 || (term.termBytes[prefixLength] & 0xff) >= floorLeadLabel;      postingsWriter.encodeTerm(longs,bytesWriter,fieldInfo,state,absolute);      for (int pos=0; pos < longsSize; pos++) {        assert longs[pos] >= 0;        metaWriter.writeVLong(longs[pos]);      }      bytesWriter.writeTo(metaWriter);      bytesWriter.reset();      absolute=false;    }  } else {    subIndices=new ArrayList<>();    for (int i=start; i < end; i++) {      PendingEntry ent=pending.get(i);      if (ent.isTerm) {        PendingTerm term=(PendingTerm)ent;        assert StringHelper.startsWith(term.termBytes,prefix) : "term.term=" + term.termBytes + " prefix="+ prefix;        BlockTermState state=term.state;        maxVersionInBlock=Math.max(maxVersionInBlock,((IDVersionTermState)state).idVersion);        final int suffix=term.termBytes.length - prefixLength;        suffixWriter.writeVInt(suffix << 1);        suffixWriter.writeBytes(term.termBytes,prefixLength,suffix);        assert floorLeadLabel == -1 || (term.termBytes[prefixLength] & 0xff) >= floorLeadLabel;        postingsWriter.encodeTerm(longs,bytesWriter,fieldInfo,state,absolute);        for (int pos=0; pos < longsSize; pos++) {          assert longs[pos] >= 0;          metaWriter.writeVLong(longs[pos]);        }        bytesWriter.writeTo(metaWriter);        bytesWriter.reset();        absolute=false;      } else {        PendingBlock block=(PendingBlock)ent;        maxVersionInBlock=Math.max(maxVersionInBlock,block.maxVersion);        assert StringHelper.startsWith(block.prefix,prefix);        final int suffix=block.prefix.length - prefixLength;        assert suffix > 0;        suffixWriter.writeVInt((suffix << 1) | 1);        suffixWriter.writeBytes(block.prefix.bytes,prefixLength,suffix);        assert floorLeadLabel == -1 || (block.prefix.bytes[prefixLength] & 0xff) >= floorLeadLabel;        assert block.fp < startFP;        suffixWriter.writeVLong(startFP - block.fp);        subIndices.add(block.index);      }    }    assert subIndices.size() != 0;  }  out.writeVInt((int)(suffixWriter.getFilePointer() << 1) | (isLeafBlock ? 1 : 0));  suffixWriter.writeTo(out);  suffixWriter.reset();  out.writeVInt((int)metaWriter.getFilePointer());  metaWriter.writeTo(out);  metaWriter.reset();  if (hasFloorLeadLabel) {    prefix.bytes[prefix.length++]=(byte)floorLeadLabel;  }  return new PendingBlock(prefix,maxVersionInBlock,startFP,hasTerms,isFloor,floorLeadLabel,subIndices);}  }
class C{  public static void cut(@NotNull Editor editor,int start,int end){  copyToKillRing(editor,start,end,true);  editor.getDocument().deleteString(start,end);}  }
class C{  int enqueueTelegram(char[] buffer){  int result=0;  if (txTelegramQueue.size() == 0 && currTxCharPos >= currTxTgm.length) {    currTxTgm=buffer;    currTxCharPos=0;  } else {    result=txTelegramQueue.add(buffer) ? 0 : -1;  }  return (result);}  }
class C{  public boolean isToplevel(){  EObject _eContainer=this.eContainer();  if ((_eContainer instanceof ExportDeclaration)) {    EObject _eContainer_1=this.eContainer();    EObject _eContainer_2=_eContainer_1.eContainer();    return (_eContainer_2 instanceof Script);  }  EObject _eContainer_3=this.eContainer();  return (_eContainer_3 instanceof Script);}  }
class C{  private boolean doParseMoreData(final InputStream inputStream){  final int oldBestScanNumber=mBestScanNumber;  try {    int nextByte;    while (mParserState != NOT_A_JPEG && (nextByte=inputStream.read()) != -1) {      mBytesParsed++;switch (mParserState) {case READ_FIRST_JPEG_BYTE:        if (nextByte == JfifUtil.MARKER_FIRST_BYTE) {          mParserState=READ_SECOND_JPEG_BYTE;        } else {          mParserState=NOT_A_JPEG;        }      break;case READ_SECOND_JPEG_BYTE:    if (nextByte == JfifUtil.MARKER_SOI) {      mParserState=READ_MARKER_FIRST_BYTE_OR_ENTROPY_DATA;    } else {      mParserState=NOT_A_JPEG;    }  break;case READ_MARKER_FIRST_BYTE_OR_ENTROPY_DATA:if (nextByte == JfifUtil.MARKER_FIRST_BYTE) {  mParserState=READ_MARKER_SECOND_BYTE;}break;case READ_MARKER_SECOND_BYTE:if (nextByte == JfifUtil.MARKER_FIRST_BYTE) {mParserState=READ_MARKER_SECOND_BYTE;} else if (nextByte == JfifUtil.MARKER_ESCAPE_BYTE) {mParserState=READ_MARKER_FIRST_BYTE_OR_ENTROPY_DATA;} else {if (nextByte == JfifUtil.MARKER_SOS || nextByte == JfifUtil.MARKER_EOI) {newScanOrImageEndFound(mBytesParsed - 2);}if (doesMarkerStartSegment(nextByte)) {mParserState=READ_SIZE_FIRST_BYTE;} else {mParserState=READ_MARKER_FIRST_BYTE_OR_ENTROPY_DATA;}}break;case READ_SIZE_FIRST_BYTE:mParserState=READ_SIZE_SECOND_BYTE;break;case READ_SIZE_SECOND_BYTE:final int size=(mLastByteRead << 8) + nextByte;final int bytesToSkip=size - 2;StreamUtil.skip(inputStream,bytesToSkip);mBytesParsed+=bytesToSkip;mParserState=READ_MARKER_FIRST_BYTE_OR_ENTROPY_DATA;break;case NOT_A_JPEG:default :Preconditions.checkState(false);}mLastByteRead=nextByte;}} catch (IOException ioe) {Throwables.propagate(ioe);}return mParserState != NOT_A_JPEG && mBestScanNumber != oldBestScanNumber;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader;  String outputFileName;  int row, col, x, y;  double xCoord, yCoord, value;  int progress;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputFileName=args[1];  if ((inputHeader == null) || (outputFileName == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputRaster=new WhiteboxRaster(inputHeader,"r");    int rows=inputRaster.getNumberRows();    int cols=inputRaster.getNumberColumns();    ShapeFile output=new ShapeFile(outputFileName,ShapeType.POINT);    DBFField fields[]=new DBFField[2];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    fields[1]=new DBFField();    fields[1].setName("VALUE");    fields[1].setDataType(DBFField.DBFDataType.NUMERIC);    fields[1].setFieldLength(10);    fields[1].setDecimalCount(3);    String DBFName=output.getDatabaseFile();    DBFWriter writer=new DBFWriter(new File(DBFName));    writer.setFields(fields);    int FID=0;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        value=inputRaster.getValue(row,col);        if (value > 0) {          FID++;          xCoord=inputRaster.getXCoordinateFromColumn(col);          yCoord=inputRaster.getYCoordinateFromRow(row);          whitebox.geospatialfiles.shapefile.Point pnt=new whitebox.geospatialfiles.shapefile.Point(xCoord,yCoord);          output.addRecord(pnt);          Object[] rowData=new Object[2];          rowData[0]=new Double(FID);          rowData[1]=new Double(value);          writer.addRecord(rowData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.write();    writer.write();    inputRaster.close();    returnData(outputFileName);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public GeoHashGridBuilder size(int requiredSize){  this.requiredSize=requiredSize;  return this;}  }
class C{  public synchronized void deselect(int index){  ListPeer peer=(ListPeer)this.peer;  if (peer != null) {    if (isMultipleMode() || (getSelectedIndex() == index)) {      peer.deselect(index);    }  }  for (int i=0; i < selected.length; i++) {    if (selected[i] == index) {      int newsel[]=new int[selected.length - 1];      System.arraycopy(selected,0,newsel,0,i);      System.arraycopy(selected,i + 1,newsel,i,selected.length - (i + 1));      selected=newsel;      return;    }  }}  }
class C{  @DSSource({DSSourceKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:04.920 -0500",hash_original_method="D5CA87DB17742A9AF9BD65F49DD2ECBD",hash_generated_method="E675C261CE18EE23F3E1B538CF4CA707") @DSVerified @DSSpec(DSCat.IO) public int read(byte buffer[],int offset,int length) throws IOException {  int ch, off;  if (length < 1)   return 0;  ch=available();  __length=(length > ch ? ch : length);  if (__length < 1)   __length=1;  if (_noConversionRequired)   return super.read(buffer,offset,__length);  if ((ch=__read()) == -1)   return -1;  off=offset;  do {    buffer[offset++]=(byte)ch;  } while (--__length > 0 && (ch=__read()) != -1);  return (offset - off);}  }
class C{  private void addOptionalControl(String groupId,Control control){  if (!optionalControls.containsKey(groupId)) {    optionalControls.put(groupId,new HashSet<Control>());  }  optionalControls.get(groupId).add(control);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return DShowTVPlayer.getDXVAName(DShowDVDPlayer.getDVDDxvaMpegMode());}  }
class C{  protected MappedElementImpl(){  super();}  }
class C{  public Bytecode(ConstPool cp){  this(cp,0,0);}  }
class C{  public final double gainRatio(){  return m_gainRatio;}  }
class C{  public void announceStorage(final DigestURL url,final int depth,final Date date){  String id=ASCII.String(url.hash());  String ds=GenericFormatter.SHORT_MINUTE_FORMATTER.format(date);  String pathToHostPortDir=pathToHostPortDir(url.getHost(),url.getPort());  TreeMap<Integer,TreeSet<String>> domaindepth=this.directory.get(pathToHostPortDir);  if (domaindepth == null) {    domaindepth=new TreeMap<Integer,TreeSet<String>>();    this.directory.put(pathToHostPortDir(url.getHost(),url.getPort()),domaindepth);  }  TreeSet<String> dateid=domaindepth.get(depth);  if (dateid == null) {    dateid=new TreeSet<String>();    domaindepth.put(depth,dateid);  }  dateid.add(ds + '.' + id);}  }
class C{  protected void initFromDir(String prefix,File dir){  File[] files;  files=dir.listFiles(new ClassFileFilter());  for (  File file : files) {    if (prefix == null) {      add(file.getName());    } else {      add(prefix + "." + file.getName());    }  }  files=dir.listFiles(new DirectoryFilter());  for (  File file : files) {    if (prefix == null) {      initFromDir(file.getName(),file);    } else {      initFromDir(prefix + "." + file.getName(),file);    }  }}  }
class C{  private static void addAll(final UpdatedFiles updates,String group_id,Set<String> paths){  FileGroup fileGroup=updates.getGroupById(group_id);  final VcsKey vcsKey=GitVcs.getKey();  for (  String path : paths) {    fileGroup.add(path,vcsKey,null);  }}  }
class C{  private Serializable findResponsible(Class<?> clazz){  for (  Serializable serializer : serializers)   if (serializer.isResponsible(clazz))   return serializer;  return null;}  }
class C{  protected boolean addToPendingNodes(final Link l,final Node n,final RouterPriorityQueue<Node> pendingNodes,final double currTime,final double currCost){  this.customDataManager.initForLink(l);  double travelTime=this.timeFunction.getLinkTravelTime(l,currTime,this.person,this.vehicle);  double travelCost=this.costFunction.getLinkTravelDisutility(l,currTime,this.person,this.vehicle,this.customDataManager);  DijkstraNodeData data=getData(n);  double nCost=data.getCost();  if (!data.isVisited(getIterationId())) {    visitNode(n,data,pendingNodes,currTime + travelTime,currCost + travelCost,l);    this.customDataManager.storeTmpData();    return true;  }  double totalCost=currCost + travelCost;  if (totalCost < nCost) {    revisitNode(n,data,pendingNodes,currTime + travelTime,totalCost,l);    this.customDataManager.storeTmpData();    return true;  }  return false;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapsetnameditemns10.class,args);}  }
class C{  public static AbsGrammarFactory create(){  return new EditFactory();}  }
class C{  @SuppressWarnings("unchecked") public static <T>Predicate<T> alwaysFalse(){  return (Predicate<T>)ALWAYS_FALSE;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  protected K buildIndex(final IScope scope,final Object object){  return (K)type.getKeyType().cast(scope,object,null,false);}  }
class C{  private static boolean merge(final ClassWriter cw,int t,final int[] types,final int index){  int u=types[index];  if (u == t) {    return false;  }  if ((t & ~DIM) == NULL) {    if (u == NULL) {      return false;    }    t=NULL;  }  if (u == 0) {    types[index]=t;    return true;  }  int v;  if ((u & BASE_KIND) == OBJECT || (u & DIM) != 0) {    if (t == NULL) {      return false;    } else     if ((t & (DIM | BASE_KIND)) == (u & (DIM | BASE_KIND))) {      if ((u & BASE_KIND) == OBJECT) {        v=(t & DIM) | OBJECT | cw.getMergedType(t & BASE_VALUE,u & BASE_VALUE);      } else {        int vdim=ELEMENT_OF + (u & DIM);        v=vdim | OBJECT | cw.addType("java/lang/Object");      }    } else     if ((t & BASE_KIND) == OBJECT || (t & DIM) != 0) {      int tdim=(((t & DIM) == 0 || (t & BASE_KIND) == OBJECT) ? 0 : ELEMENT_OF) + (t & DIM);      int udim=(((u & DIM) == 0 || (u & BASE_KIND) == OBJECT) ? 0 : ELEMENT_OF) + (u & DIM);      v=Math.min(tdim,udim) | OBJECT | cw.addType("java/lang/Object");    } else {      v=TOP;    }  } else   if (u == NULL) {    v=(t & BASE_KIND) == OBJECT || (t & DIM) != 0 ? t : TOP;  } else {    v=TOP;  }  if (u != v) {    types[index]=v;    return true;  }  return false;}  }
class C{  public JLBHOptions iterations(int iterations){  this.iterations=iterations;  return this;}  }
class C{  public String nearestNeighbourSearchAlgorithmTipText(){  return "The nearest neighbour search algorithm to use " + "(Default: weka.core.neighboursearch.LinearNNSearch).";}  }
