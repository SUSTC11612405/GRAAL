class C{  @Override public void startActivityFromFragment(final Fragment fragment,final Intent intent,final int requestCode){  delegate.startActivityFromFragment(fragment,intent,requestCode);}  }
class C{  public Set preProcessAddUser(SSOToken token,String entryDN,Set members,int objectType) throws AMPreCallBackException {  return members;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String siteName=getStringOptionValue(IArgument.SITE_NAME);  List secondaryURLs=(List)rc.getOption(IArgument.SECONDARY_URLS);  String[] params={siteName};  try {    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_SET_SITE_FAILOVER_URLS",params);    if (SiteConfiguration.isSiteExist(adminSSOToken,siteName)) {      SiteConfiguration.setSiteSecondaryURLs(adminSSOToken,siteName,secondaryURLs);      outputWriter.printlnMessage(MessageFormat.format(getResourceString("set-site-secondary-urls-succeeded"),(Object[])params));    } else {      outputWriter.printlnMessage(MessageFormat.format(getResourceString("set-site-secondary-urls-no-exists"),(Object[])params));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_SET_SITE_FAILOVER_URLS",params);  } catch (  SSOException e) {    String[] args={siteName,e.getMessage()};    debugError("SetSiteFailoverURLs.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SET_SITE_FAILOVER_URLS",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  ConfigurationException e) {    String[] args={siteName,e.getMessage()};    debugError("SetSiteFailoverURLs.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SET_SITE_FAILOVER_URLS",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={siteName,e.getMessage()};    debugError("SetSiteFailoverURLs.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SET_SITE_FAILOVER_URLS",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public static void deregisterSupportedFeature(String featureOID){synchronized (directoryServer.supportedFeatures) {    directoryServer.supportedFeatures.remove(featureOID);  }}  }
class C{  public boolean equals(Object o){  if (!(o instanceof RegularEnumSet))   return super.equals(o);  RegularEnumSet<?> es=(RegularEnumSet<?>)o;  if (es.elementType != elementType)   return elements == 0 && es.elements == 0;  return es.elements == elements;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String configName=getStringOptionValue(AuthOptions.AUTH_CONFIG_NAME);  String moduleName=getStringOptionValue(AuthOptions.AUTH_CONFIG_MODULE_NAME);  String criteria=getStringOptionValue(AuthOptions.AUTH_CONFIG_CRITERIA);  String options=getStringOptionValue(AuthOptions.AUTH_CONFIG_OPTIONS);  String[] params={realm,configName,moduleName};  if (!POSSIBLE_CRITERIA.contains(criteria)) {    throw new CLIException(getResourceString("authentication-add-auth-config-entry-criteria.invalid"),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }  int pos=getPosition();  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_ADD_AUTH_CONFIG_ENTRY",params);  try {    AuthConfigurationEntry ae=new AuthConfigurationEntry(moduleName,criteria,options);    Set instanceNames=getInstanceNames(realm,adminSSOToken);    String instanceName=ae.getLoginModuleName();    if (!instanceNames.contains(instanceName)) {      Object[] p={instanceName};      throw new CLIException(MessageFormat.format(getResourceString("authentication-add-auth-config-entry-not-found"),p),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }    List entries=getConfigEntries(realm,configName,adminSSOToken);    if (entries == null) {      entries=new ArrayList();    }    if ((pos == -1) || (pos >= entries.size())) {      entries.add(ae);    } else {      entries.add(pos,ae);    }    Map configData=new HashMap(2);    Set tmp=new HashSet(2);    String xml=AMAuthConfigUtils.authConfigurationEntryToXMLString(entries);    tmp.add(xml);    configData.put(AuthOptions.AUTH_CONFIG_ATTR,tmp);    IOutput outputWriter=getOutputWriter();    AMAuthConfigUtils.replaceNamedConfig(configName,0,configData,realm,adminSSOToken);    outputWriter.printlnMessage(getResourceString("authentication-add-auth-config-entry-succeeded"));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_ADD_AUTH_CONFIG_ENTRY",params);  } catch (  AMConfigurationException e) {    debugError("GetAuthConfigurationEntries.handleRequest",e);    String[] p={realm,configName,moduleName,e.getMessage()};    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_ADD_AUTH_CONFIG_ENTRY",p);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    debugError("GetAuthConfigurationEntries.handleRequest",e);    String[] p={realm,configName,moduleName,e.getMessage()};    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_ADD_AUTH_CONFIG_ENTRY",p);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    debugError("GetAuthConfigurationEntries.handleRequest",e);    String[] p={realm,configName,moduleName,e.getMessage()};    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_ADD_AUTH_CONFIG_ENTRY",p);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  void copyValue(MutableBigInteger src){  int len=src.intLen;  if (value.length < len)   value=new int[len];  System.arraycopy(src.value,src.offset,value,0,len);  intLen=len;  offset=0;}  }
class C{  public static byte[] toUnsignedByteArray(BigInteger bi){  if (bi == null) {    return null;  }  byte[] bb=bi.toByteArray();  if (bb[0] == 0) {    byte[] noZero=new byte[bb.length - 1];    System.arraycopy(bb,1,noZero,0,noZero.length);    return noZero;  } else {    return bb;  }}  }
class C{  public static ComponentUI createUI(JComponent c){  return new BasicEditorPaneUI();}  }
class C{  public final void testEqualsObject01(){  EllipticCurve c2=null, c1=new EllipticCurve(new ECFieldFp(BigInteger.valueOf(23L)),BigInteger.ONE,BigInteger.valueOf(19L));  assertTrue(c1.equals(c1));  c1=new EllipticCurve(new ECFieldFp(BigInteger.valueOf(23L)),BigInteger.ONE,BigInteger.valueOf(19L));  c2=new EllipticCurve(new ECFieldFp(BigInteger.valueOf(23L)),BigInteger.valueOf(1L),BigInteger.valueOf(19L));  assertTrue(c1.equals(c2) && c2.equals(c1));  c1=new EllipticCurve(new ECFieldFp(BigInteger.valueOf(23L)),BigInteger.ONE,BigInteger.valueOf(19L),new byte[24]);  c2=new EllipticCurve(new ECFieldFp(BigInteger.valueOf(23L)),BigInteger.valueOf(1L),BigInteger.valueOf(19L),new byte[24]);  assertTrue(c1.equals(c2) && c2.equals(c1));  c1=new EllipticCurve(new ECFieldFp(BigInteger.valueOf(23L)),BigInteger.ONE,BigInteger.valueOf(19L),new byte[24]);  MyEllipticCurve c3=new MyEllipticCurve(new ECFieldFp(BigInteger.valueOf(23L)),BigInteger.ONE,BigInteger.valueOf(19L),new byte[24]);  assertTrue(c1.equals(c3) && c3.equals(c1));  c1=new EllipticCurve(new ECFieldFp(BigInteger.valueOf(23L)),BigInteger.ONE,BigInteger.valueOf(19L));  c2=new EllipticCurve(new ECFieldFp(BigInteger.valueOf(23L)),BigInteger.valueOf(1L),BigInteger.valueOf(19L),null);  assertTrue(c1.equals(c2) && c2.equals(c1));}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.DSTLocalizedString createDSTLocalizedString() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.DSTLocalizedStringImpl();}  }
class C{  @Override public Cursor query(Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder){  SQLiteQueryBuilder qb=new SQLiteQueryBuilder();  SQLiteDatabase db=mDbHelper.getReadableDatabase();  qb.setTables(TABLE_NAME);  int match=URI_MATCHER.match(uri);  if (STATION_FREQ_ID == match) {    qb.appendWhere("_id = " + uri.getPathSegments().get(1));  }  Cursor c=qb.query(db,projection,selection,selectionArgs,null,null,sortOrder);  if (null != c) {    c.setNotificationUri(getContext().getContentResolver(),uri);  }  return c;}  }
class C{  private void verifyAttribute(ReadableTransaction txn,EntryID entryID,Entry entry,AttributeIndex attrIndex){  for (  MatchingRuleIndex index : attrIndex.getNameToIndexes().values()) {    for (    ByteString key : index.indexEntry(entry)) {      verifyAttributeInIndex(index,txn,key,entryID);    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodereplacechildoldchildnonexistent.class,args);}  }
class C{  private boolean read(byte[] buf,int pos,int n,boolean block) throws IOException {  int read=socketWrapper.read(block,buf,pos,n);  if (read > 0 && read < n) {    int left=n - read;    int start=pos + read;    while (left > 0) {      read=socketWrapper.read(true,buf,start,left);      if (read == -1) {        throw new EOFException();      }      left=left - read;      start=start + read;    }  } else   if (read == -1) {    throw new EOFException();  }  return read > 0;}  }
class C{  public static boolean copy(File fromFile,File toFile){  try {    FileInputStream in=new FileInputStream(fromFile);    FileOutputStream out=new FileOutputStream(toFile);    byte[] buf=new byte[8192];    int len;    while ((len=in.read(buf)) > -1) {      out.write(buf,0,len);    }    in.close();    out.close();    if (fromFile.length() != toFile.length()) {      toFile.delete();      return false;    }    return true;  } catch (  IOException e) {    e.printStackTrace();    return false;  }}  }
class C{  private boolean simulateEntryDelete(Entry entry,ConfigurationRepository configRepository) throws IOException {  ArgumentCaptor<ConfigDeleteListener> registeredListener=ArgumentCaptor.forClass(ConfigDeleteListener.class);  verify(configRepository).registerDeleteListener(eq(entry.getName().parent()),registeredListener.capture());  return registeredListener.getValue().configDeleteIsAcceptable(entry,new LocalizableMessageBuilder());}  }
class C{  public void updateSessionMaxAliveTime(int sessionAliveTime){  if (sessionAliveTime > this.sessionMaxAliveTime) {synchronized (sessionMaxAliveTimeUpdateLock) {      if (sessionAliveTime > this.sessionMaxAliveTime) {        this.sessionMaxAliveTime=sessionAliveTime;      }    }  }}  }
class C{  protected String method() throws ParseException {  try {    if (debug)     dbg_enter("method");    Token[] tokens=this.lexer.peekNextToken(1);    Token token=(Token)tokens[0];    if (token.getTokenType() == INVITE || token.getTokenType() == ACK || token.getTokenType() == OPTIONS || token.getTokenType() == BYE || token.getTokenType() == REGISTER || token.getTokenType() == CANCEL || token.getTokenType() == SUBSCRIBE || token.getTokenType() == NOTIFY || token.getTokenType() == PUBLISH || token.getTokenType() == MESSAGE || token.getTokenType() == ID) {      lexer.consume();      return token.getTokenValue();    } else {      throw createParseException("Invalid Method");    }  }  finally {    if (Debug.debug)     dbg_leave("method");  }}  }
class C{  public final void reduce_trace_shape_at_tie_pin(BrdAbitPin p_tie_pin,BrdTracep p_trace){  ShapeTile pin_shape=p_tie_pin.get_tree_shape_on_layer(this,p_trace.get_layer());  PlaPointFloat compare_corner;  int trace_shape_no;  if (p_trace.corner_first().equals(p_tie_pin.center_get())) {    trace_shape_no=0;    compare_corner=p_trace.polyline().corner_approx(1);  } else   if (p_trace.corner_last().equals(p_tie_pin.center_get())) {    trace_shape_no=p_trace.corner_count() - 2;    compare_corner=p_trace.polyline().corner_approx(p_trace.corner_count() - 2);  } else {    return;  }  ShapeTile trace_shape=p_trace.get_tree_shape(this,trace_shape_no);  ShapeTile intersection=trace_shape.intersection(pin_shape);  if (!intersection.dimension().is_area()) {    return;  }  ShapeTile[] shape_pieces=trace_shape.cutout(pin_shape);  ShapeTile new_trace_shape=ShapeTileSimplex.EMPTY;  for (int i=0; i < shape_pieces.length; ++i) {    if (shape_pieces[i].dimension() == PlaDimension.AREA) {      if (new_trace_shape == ShapeTileSimplex.EMPTY || shape_pieces[i].contains(compare_corner)) {        new_trace_shape=shape_pieces[i];      }    }  }  change_item_shape(p_trace,trace_shape_no,new_trace_shape);}  }
class C{  public static String toString(final Object value){  return value == null ? null : value.toString();}  }
class C{  public void invalidatePathBounds(TreePath path){}  }
class C{  public static String[] words(final String value){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  return value.split("\\W+");}  }
class C{  private void filterListByHiddenAndNotAllowed(){  List<String> tmpDirs=new ArrayList<>();  for (  String dir : this.directories) {    if (AccessControlUtil.getInstance(this.configuration).checkFolderACL(this.type,this.currentFolder + dir,this.userRole,AccessControlUtil.CKFINDER_CONNECTOR_ACL_FOLDER_VIEW) && !FileUtils.checkIfDirIsHidden(dir,this.configuration)) {      tmpDirs.add(dir);    }  }  this.directories.clear();  this.directories.addAll(tmpDirs);}  }
class C{  public boolean pushNamespace(String prefix,String uri,int elemDepth){  if (prefix.startsWith(XML_PREFIX)) {    return false;  }  Stack stack;  if ((stack=(Stack)m_namespaces.get(prefix)) == null) {    m_namespaces.put(prefix,stack=new Stack());  }  if (!stack.empty()) {    MappingRecord mr=(MappingRecord)stack.peek();    if (uri.equals(mr.m_uri) || elemDepth == mr.m_declarationDepth) {      return false;    }  }  MappingRecord map=new MappingRecord(prefix,uri,elemDepth);  stack.push(map);  m_nodeStack.push(map);  return true;}  }
class C{  public ReasonFlags(boolean[] flags){  this.flags=flags;}  }
class C{  public static int[] convertNamedCurves(NamedCurve[] namedCurves){  if (namedCurves == null || namedCurves.length == 0) {    return null;  }  int[] nc=new int[namedCurves.length];  for (int i=0; i < namedCurves.length; i++) {    nc[i]=namedCurves[i].getIntValue();  }  return nc;}  }
class C{  public void sendTopoInfoToAll(){  enqueueTopoInfoToAllExcept(null);}  }
class C{  @Override public int countByUuid(String uuid){  FinderPath finderPath=FINDER_PATH_COUNT_BY_UUID;  Object[] finderArgs=new Object[]{uuid};  Long count=(Long)finderCache.getResult(finderPath,finderArgs,this);  if (count == null) {    StringBundler query=new StringBundler(2);    query.append(_SQL_COUNT_FOO_WHERE);    boolean bindUuid=false;    if (uuid == null) {      query.append(_FINDER_COLUMN_UUID_UUID_1);    } else     if (uuid.equals(StringPool.BLANK)) {      query.append(_FINDER_COLUMN_UUID_UUID_3);    } else {      bindUuid=true;      query.append(_FINDER_COLUMN_UUID_UUID_2);    }    String sql=query.toString();    Session session=null;    try {      session=openSession();      Query q=session.createQuery(sql);      QueryPos qPos=QueryPos.getInstance(q);      if (bindUuid) {        qPos.add(uuid);      }      count=(Long)q.uniqueResult();      finderCache.putResult(finderPath,finderArgs,count);    } catch (    Exception e) {      finderCache.removeResult(finderPath,finderArgs);      throw processException(e);    } finally {      closeSession(session);    }  }  return count.intValue();}  }
class C{  public int decodeSource(String sourceString) throws DirectoryException {  int source=0;  try {    source=Integer.decode(sourceString);    if (source >= -1 && source != getServerId()) {      return source;    }  } catch (  Exception e) {    LocalizableMessage message=ERR_INVALID_IMPORT_SOURCE.get(getBaseDN(),getServerId(),sourceString,stackTraceToSingleLineString(e));    throw new DirectoryException(ResultCode.OTHER,message,e);  }  LocalizableMessage message=ERR_INVALID_IMPORT_SOURCE.get(getBaseDN(),getServerId(),source,"");  throw new DirectoryException(ResultCode.OTHER,message);}  }
class C{  public SecurityTokenException(String s){  super(s);}  }
class C{  static <T>ReplayPromise<Void> anyReplay(final Duration timeout,final List<Promise<T>> promises){  return anyReplay(timeout,System.currentTimeMillis(),promises.toArray(new Promise[promises.size()]));}  }
class C{  private static boolean isUrlPrefix(URL firstURL,URL secondURL){  return firstURL != null && firstURL.getProtocol().equalsIgnoreCase(secondURL.getProtocol()) && firstURL.getHost().equalsIgnoreCase(secondURL.getHost()) && firstURL.getPort() == secondURL.getPort() && secondURL.getPath().startsWith(firstURL.getPath());}  }
class C{  public int hashCode(){  return (command == null ? 0 : command.hashCode());}  }
class C{  public Passport(LDS lds,PrivateKey docSigningPrivateKey,MRTDTrustStore trustManager) throws GeneralSecurityException {  this();  this.trustManager=trustManager;  this.docSigningPrivateKey=docSigningPrivateKey;  this.lds=lds;}  }
class C{  public static Column createColumn(){  return (Column)JSFComponentFactory.createComponent(Column.COMPONENT_TYPE);}  }
class C{  void refresh(SMSEntry e) throws SMSException {  smsEntry.refresh(e);}  }
class C{  public int readRdsBler(){  if (null != mService) {    return mService.getRdsBler();  }  return 0;}  }
class C{  public static String toLowerCase(final String s){  Reject.ifNull(s);  final int length=s.length();  int i=0;  ASCIICharProp cp=null;  while (i < length) {    cp=ASCIICharProp.valueOf(s.charAt(i));    if (cp == null || cp.isUpperCase()) {      break;    }    i++;  }  if (i == length) {    return s;  }  final StringBuilder builder=new StringBuilder(length);  builder.append(s,0,i);  if (cp != null) {    builder.append(cp.toLowerCase());    i++;    while (i < length) {      cp=ASCIICharProp.valueOf(s.charAt(i));      if (cp == null) {        break;      }      builder.append(cp.toLowerCase());      i++;    }  }  if (i < length) {    builder.append(s.substring(i).toLowerCase(Locale.ENGLISH));  }  return builder.toString();}  }
class C{  @SafeVarargs public static <T>boolean addAll(Collection<? super T> c,T... a){  boolean modified=false;  for (int i=0; i < a.length; i++) {    modified|=c.add(a[i]);  }  return modified;}  }
class C{  public ID3v11Tag(RandomAccessFile file,String loggingFilename) throws TagNotFoundException, IOException {  setLoggingFilename(loggingFilename);  FileChannel fc;  ByteBuffer byteBuffer=ByteBuffer.allocate(TAG_LENGTH);  fc=file.getChannel();  fc.position(file.length() - TAG_LENGTH);  fc.read(byteBuffer);  byteBuffer.flip();  read(byteBuffer);}  }
class C{  protected void paintPath(int operation,int rule){  PathRenderInfo renderInfo=new PathRenderInfo(currentPath,operation,rule,isClip,clippingRule,getGraphicsState());  eventOccurred(renderInfo,EventType.RENDER_PATH);  if (isClip) {    isClip=false;    ParserGraphicsState gs=getGraphicsState();    gs.clip(currentPath,clippingRule);    eventOccurred(new ClippingPathInfo(gs.getClippingPath(),gs.getCtm()),EventType.CLIP_PATH_CHANGED);  }  currentPath=new Path();}  }
class C{  public void removeMembers(String universalId,Set names) throws AMConsoleException {  if ((names == null) || names.isEmpty()) {    throw new AMConsoleException("entities.members.remove.no.selection.message");  }  SSOToken ssoToken=getUserSSOToken();  String currentId="";  try {    AMIdentity amid=IdUtils.getIdentity(ssoToken,universalId);    String[] params=new String[2];    params[0]=universalId;    for (Iterator iter=names.iterator(); iter.hasNext(); ) {      String id=(String)iter.next();      AMIdentity amidentity=IdUtils.getIdentity(ssoToken,id);      currentId=id;      params[1]=id;      logEvent("ATTEMPT_REMOVE_IDENTITY_MEMBER",params);      amid.removeMember(amidentity);      logEvent("SUCCEED_REMOVE_IDENTITY_MEMBER",params);    }  } catch (  SSOException e) {    String[] paramsEx={universalId,currentId,getErrorString(e)};    logEvent("SSO_EXCEPTION_REMOVE_IDENTITY_MEMBER",paramsEx);    debug.warning("EntitiesModelImpl.removeMembers",e);    throw new AMConsoleException(getErrorString(e));  }catch (  IdRepoException e) {    String[] paramsEx={universalId,currentId,getErrorString(e)};    logEvent("IDM_EXCEPTION_REMOVE_IDENTITY_MEMBER",paramsEx);    debug.warning("EntitiesModelImpl.removeMembers",e);    throw new AMConsoleException(getErrorString(e));  }}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer();  buf.append("init = " + init + "("+ (init >> 10)+ "K) ");  buf.append("used = " + used + "("+ (used >> 10)+ "K) ");  buf.append("committed = " + committed + "("+ (committed >> 10)+ "K) ");  buf.append("max = " + max + "("+ (max >> 10)+ "K)");  return buf.toString();}  }
class C{  public boolean bool(XPathContext xctxt) throws javax.xml.transform.TransformerException {  XObject left=m_left.execute(xctxt,true);  XObject right=m_right.execute(xctxt,true);  boolean result=left.equals(right) ? true : false;  left.detach();  right.detach();  return result;}  }
class C{  public static int registerDirectory(String dirPath){  return FontProgramFactory.registerFontDirectory(dirPath);}  }
class C{  private static int checkChar(final char c,final String signature,int pos){  if (getChar(signature,pos) == c) {    return pos + 1;  }  throw new IllegalArgumentException(signature + ": '" + c+ "' expected at index "+ pos);}  }
class C{  public CannotProceedException(String explanation){  super(explanation);}  }
class C{  public boolean fireKeyboardAction(KeyEvent e,boolean pressed,Container topAncestor){  if (e.isConsumed()) {    System.out.println("Acquired pre-used event!");    Thread.dumpStack();  }  KeyStroke ks;  KeyStroke ksE=null;  if (e.getID() == KeyEvent.KEY_TYPED) {    ks=KeyStroke.getKeyStroke(e.getKeyChar());  } else {    if (e.getKeyCode() != e.getExtendedKeyCode()) {      ksE=KeyStroke.getKeyStroke(e.getExtendedKeyCode(),e.getModifiers(),!pressed);    }    ks=KeyStroke.getKeyStroke(e.getKeyCode(),e.getModifiers(),!pressed);  }  Hashtable keyMap=containerMap.get(topAncestor);  if (keyMap != null) {    Object tmp=null;    if (ksE != null) {      tmp=keyMap.get(ksE);      if (tmp != null) {        ks=ksE;      }    }    if (tmp == null) {      tmp=keyMap.get(ks);    }    if (tmp == null) {    } else     if (tmp instanceof JComponent) {      JComponent c=(JComponent)tmp;      if (c.isShowing() && c.isEnabled()) {        fireBinding(c,ks,e,pressed);      }    } else     if (tmp instanceof Vector) {      Vector v=(Vector)tmp;      for (int counter=v.size() - 1; counter >= 0; counter--) {        JComponent c=(JComponent)v.elementAt(counter);        if (c.isShowing() && c.isEnabled()) {          fireBinding(c,ks,e,pressed);          if (e.isConsumed())           return true;        }      }    } else {      System.out.println("Unexpected condition in fireKeyboardAction " + tmp);      Thread.dumpStack();    }  }  if (e.isConsumed()) {    return true;  }  if (keyMap != null) {    Vector v=(Vector)keyMap.get(JMenuBar.class);    if (v != null) {      Enumeration iter=v.elements();      while (iter.hasMoreElements()) {        JMenuBar mb=(JMenuBar)iter.nextElement();        if (mb.isShowing() && mb.isEnabled()) {          boolean extended=(ksE != null) && !ksE.equals(ks);          if (extended) {            fireBinding(mb,ksE,e,pressed);          }          if (!extended || !e.isConsumed()) {            fireBinding(mb,ks,e,pressed);          }          if (e.isConsumed()) {            return true;          }        }      }    }  }  return e.isConsumed();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  Text textNode;  Text splitNode;  Node secondPart;  String value;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("strong");  nameNode=elementList.item(2);  textNode=(Text)nameNode.getFirstChild();  splitNode=textNode.splitText(7);  secondPart=textNode.getNextSibling();  value=secondPart.getNodeValue();  assertEquals("textSplitTextOneAssert","Jones",value);}  }
class C{  @Override public void draw(Canvas canvas){  Barcode barcode=mBarcode;  if (barcode == null) {    return;  }  RectF rect=new RectF(barcode.getBoundingBox());  rect.left=translateX(rect.left);  rect.top=translateY(rect.top);  rect.right=translateX(rect.right);  rect.bottom=translateY(rect.bottom);  canvas.drawLine(rect.left - mCorderPadding,rect.top,rect.left + mCornerWidth,rect.top,mRectPaint);  canvas.drawLine(rect.left,rect.top,rect.left,rect.top + mCornerWidth,mRectPaint);  canvas.drawLine(rect.left,rect.bottom,rect.left,rect.bottom - mCornerWidth,mRectPaint);  canvas.drawLine(rect.left - mCorderPadding,rect.bottom,rect.left + mCornerWidth,rect.bottom,mRectPaint);  canvas.drawLine(rect.right + mCorderPadding,rect.top,rect.right - mCornerWidth,rect.top,mRectPaint);  canvas.drawLine(rect.right,rect.top,rect.right,rect.top + mCornerWidth,mRectPaint);  canvas.drawLine(rect.right + mCorderPadding,rect.bottom,rect.right - mCornerWidth,rect.bottom,mRectPaint);  canvas.drawLine(rect.right,rect.bottom,rect.right,rect.bottom - mCornerWidth,mRectPaint);  canvas.drawText(barcode.displayValue,rect.left,rect.bottom + 100,mTextPaint);}  }
class C{  public ValidationException(String message,String errorCode,Throwable exception){  super(message,errorCode,exception);}  }
class C{  public void reset(){  tbsGen=new V1TBSCertificateGenerator();}  }
class C{  private final boolean is7BitClean(ByteSequence value){  for (int i=0; i < value.length(); i++) {    byte b=value.byteAt(i);    if ((b & MASK) != b) {      return false;    }  }  return true;}  }
class C{  public void flush() throws IOException {  for (int i=0; i <= lastActiveFilter; i++) {    if (activeFilters[i] instanceof GzipOutputFilter) {      if (log.isDebugEnabled()) {        log.debug("Flushing the gzip filter at position " + i + " of the filter chain...");      }      ((GzipOutputFilter)activeFilters[i]).flush();      break;    }  }  flushBuffer(isBlocking());}  }
class C{  public void testCertStore03() throws InvalidAlgorithmParameterException {  if (!initParams()) {    return;  }  try {    CertStore.getInstance(null,dParams);    fail("NullPointerException or NoSuchAlgorithmException must be thrown when type is null");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      CertStore.getInstance(invalidValues[i],dParams);      fail("NoSuchAlgorithmException must be thrown");    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.DigestValueElement createDigestValueElement(byte[] value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.DigestValueElementImpl(value);}  }
class C{  public InvalidSearchFilterException(String msg){  super(msg);}  }
class C{  public void parse(URL base,Reader r,boolean parseDeclaration,boolean isLink) throws IOException {  this.base=base;  this.isLink=isLink;  this.parsingDeclaration=parseDeclaration;  declaration.removeAttributes(declaration);  selectorTokens.removeAllElements();  selectors.removeAllElements();  propertyName=null;  parser.parse(r,this,parseDeclaration);}  }
class C{  public AMEntryExistsException(String msg,String errorCode,Object args[],UMSException ue){  super(msg,errorCode,args,ue);}  }
class C{  public Set<String> searchOrganizationNames(SSOToken token,String dn,int numOfEntries,boolean sortResults,boolean ascendingOrder,String serviceName,String attrName,Set values) throws SMSException, SSOException {  try {    Object[] objs={token.getTokenID().toString(),dn,new Integer(numOfEntries),Boolean.valueOf(sortResults),Boolean.valueOf(ascendingOrder),serviceName,attrName,values};    return ((Set<String>)client.send(client.encodeMessage("searchOrganizationNames",objs),sessionCookies.getLBCookie(token.getTokenID().toString()),null));  } catch (  SSOException ssoe) {    throw ssoe;  }catch (  SMSException smse) {    throw smse;  }catch (  Exception re) {    debug.error("SMSJAXRPCObject.searchOrganizationNames",re);    throw (new SMSException(re,"sms-JAXRPC-org-cannot-search"));  }}  }
class C{  private void validateResponseHeaders(TesterAjpMessage message,int expectedStatus,String expectedMessage) throws Exception {  Assert.assertEquals((byte)'A',message.buf[0]);  Assert.assertEquals((byte)'B',message.buf[1]);  message.processHeader(false);  Assert.assertTrue(message.len > 0);  Assert.assertEquals(0x04,message.readByte());  Assert.assertEquals(expectedStatus,message.readInt());  Assert.assertEquals(expectedMessage,message.readString());  int headerCount=message.readInt();  for (int i=0; i < headerCount; i++) {    message.readHeaderName();    message.readString();  }}  }
class C{  public ContentLanguageHeader createContentLanguageHeader(Locale contentLanguage){  if (contentLanguage == null)   throw new NullPointerException("null arg contentLanguage");  ContentLanguage c=new ContentLanguage();  c.setContentLanguage(contentLanguage);  return c;}  }
class C{  public static List<Foo> findByField2(boolean field2){  return getPersistence().findByField2(field2);}  }
class C{  public static boolean binaryDataIsTiffFormat(byte[] data){  if (data.length < 4) {    return false;  }  return (((0x49 == (data[0] & 0xff)) && (0x49 == (data[1] & 0xff)) && (0x2a == (data[2] & 0xff))&& (0x00 == (data[3] & 0xff))) || ((0x4d == (data[0] & 0xff)) && (0x4d == (data[1] & 0xff)) && (0x00 == (data[2] & 0xff))&& (0x2a == (data[3] & 0xff))));}  }
class C{  @After public void clean(){  mute(null);  mute(null);  mute(null);}  }
class C{  public static SOAPElementFactory newInstance() throws SOAPException {  try {    return new SOAPElementFactory(SOAPFactory.newInstance());  } catch (  Exception ex) {    throw new SOAPException("Unable to create SOAP Element Factory: " + ex.getMessage());  }}  }
class C{  private ChangeRecordEntry parseDeleteChangeRecordEntry(DN entryDN,List<StringBuilder> lines) throws LDIFException {  if (!lines.isEmpty()) {    LocalizableMessage message=ERR_LDIF_INVALID_DELETE_ATTRIBUTES.get();    throw new LDIFException(message,lineNumber,true);  }  return new DeleteChangeRecordEntry(entryDN);}  }
class C{  protected void configureScroller(){  scroller.setFocusable(false);  scroller.getVerticalScrollBar().setFocusable(false);  scroller.setBorder(null);  installScrollerListeners();}  }
class C{  private ProgressTask(boolean indexIterator,ReadableTransaction txn) throws StorageRuntimeException {  previousTime=System.currentTimeMillis();  if (indexIterator) {    if (verifyDN2ID) {      totalCount=dn2id.getRecordCount(txn);    } else     if (verifyID2ChildrenCount) {      totalCount=id2childrenCount.getRecordCount(txn);    } else     if (!attrIndexList.isEmpty()) {      AttributeIndex attrIndex=attrIndexList.get(0);      totalCount=0;      for (      MatchingRuleIndex index : attrIndex.getNameToIndexes().values()) {        totalCount+=getRecordCount(txn,index);      }    } else     if (!vlvIndexList.isEmpty()) {      totalCount=vlvIndexList.get(0).getRecordCount(txn);    }  } else {    totalCount=rootContainer.getEntryContainer(verifyConfig.getBaseDN()).getNumberOfEntriesInBaseDN0(txn);  }}  }
class C{  public ComponentEvent(Component source,int id){  super(source,id);}  }
class C{  public MonitorConfigManager(ServerContext serverContext){  this.serverContext=serverContext;  monitors=new ConcurrentHashMap<>();}  }
class C{  public ExtendedRequestProtocolOp(String oid){  this.oid=oid;  this.value=null;}  }
class C{  public static Builder createBuilder(AbstractManagedObjectDefinition<?,?> d,String propertyName){  return new Builder(d,propertyName);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementinvalidcharacterexception1.class,args);}  }
class C{  protected void encryptFinal() throws IOException {  inBuffer.flip();  outBuffer.clear();  try {    cipher.doFinal(inBuffer,outBuffer);  } catch (  ShortBufferException e) {    throw new IOException(e);  }catch (  IllegalBlockSizeException e) {    throw new IOException(e);  }catch (  BadPaddingException e) {    throw new IOException(e);  }  inBuffer.clear();  outBuffer.flip();  while (outBuffer.hasRemaining()) {    output.write(outBuffer);  }}  }
class C{  public void add(Permission perm){  if (!(perm instanceof ISPermission)) {    String objs[]={perm.toString()};    throw (new IllegalArgumentException(ResBundleUtils.getString("invalid_permission",objs)));  }  if (isReadOnly()) {    throw new SecurityException(ResBundleUtils.getString("readonly_permission_collection"));  }  debug.message("ISPermissionCollection::add(perm) called");  if (debug.messageEnabled()) {    debug.message("ISPermissionCollection::perm:" + perm.toString());  }  perms.put(perm.getName(),perm);}  }
class C{  void shutdown(){  if (shutdown.compareAndSet(false,true)) {    log.close();    DirectoryServer.deregisterMonitorProvider(dbMonitor);  }}  }
class C{  public void testNegateZero(){  byte rBytes[]={0};  BigInteger aNumber=BigInteger.ZERO;  BigInteger result=aNumber.negate();  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,result.signum());}  }
class C{  protected void addURL(URL url){  try {    originalUrls.add(url);    searchList.add(createSearchURL(url));  } catch (  MalformedURLException e) {  }}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.BaseIDElement createBaseIDElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.BaseIDElementImpl();}  }
class C{  public static JTextField createTextField(){  JTextField tf=new JTextField();  tf.addFocusListener(new TextComponentFocusListener(tf));  tf.setFont(ColorAndFontConstants.defaultFont);  return tf;}  }
class C{  public boolean isMutable(){  return mutable;}  }
class C{  public void remove(MutableTreeNode aChild){  if (aChild == null) {    throw new IllegalArgumentException("argument is null");  }  if (!isNodeChild(aChild)) {    throw new IllegalArgumentException("argument is not a child");  }  remove(getIndex(aChild));}  }
class C{  private boolean checkActualReceiver(){  mv.visitInsn(Opcodes.DUP);  mv.visitVarInsn(Opcodes.ALOAD,localsMap[0]);  mv.visitMethodInsn(Opcodes.INVOKESTATIC,MHI,"assertSame",LLV_SIG,false);  return true;}  }
class C{  public void testConstrStringWithExponentWithPoint2(){  String a="238096483923847545735673567457356356789029578490276878.7678287e-214";  int aScale=221;  BigInteger bA=new BigInteger("2380964839238475457356735674573563567890295784902768787678287");  BigDecimal aNumber=new BigDecimal(a);  assertEquals("incorrect value",bA,aNumber.unscaledValue());  assertEquals("incorrect scale",aScale,aNumber.scale());}  }
class C{  public TruncationTransform(int length){  name=TRUNCATION_URI;  Parameter parameter=new Parameter(Parameter.NAME_LENGTH,"" + length);  parameters=new ArrayList();  parameters.add(parameter);}  }
class C{  public LDAPToolOptions(){}  }
class C{  public boolean hasWrongStatus(){  return hasWrongStatus;}  }
class C{  public final static String formatStatusLine(final StatusLine statline,LineFormatter formatter){  if (formatter == null)   formatter=BasicLineFormatter.DEFAULT;  return formatter.formatStatusLine(null,statline).toString();}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    logger.info("shootme:  got a bye sending OK.");    Response response=protocolObjects.messageFactory.createResponse(200,request);    if (serverTransactionId != null) {      serverTransactionId.sendResponse(response);      logger.info("Dialog State is " + serverTransactionId.getDialog().getState());    } else {      logger.info("null server tx.");    }  } catch (  Exception ex) {    String s="Unexpected exception";    logger.error(s,ex);    ReInviteAllowInterleavingTest.fail(s);  }}  }
class C{  public void destroy(){  if (mDomThread != null && mDomThread.isWXThreadAlive()) {    mDomThread.quit();  }  if (mDomRegistries != null) {    mDomRegistries.clear();  }  mDomHandler=null;  mDomThread=null;}  }
class C{  public boolean startsWith(String prefix,int toffset){  return m_str.startsWith(prefix,toffset);}  }
class C{  public static boolean isValidCodePoint(int codePoint){  int plane=codePoint >>> 16;  return plane < ((MAX_CODE_POINT + 1) >>> 16);}  }
class C{  private void generateInit(){  if (ctxt.isTagFile()) {    out.printil("private void _jspInit(javax.servlet.ServletConfig config) {");  } else {    out.printil("public void _jspInit() {");  }  out.pushIndent();  if (isPoolingEnabled) {    for (int i=0; i < tagHandlerPoolNames.size(); i++) {      out.printin(tagHandlerPoolNames.elementAt(i));      out.print(" = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(");      if (ctxt.isTagFile()) {        out.print("config");      } else {        out.print("getServletConfig()");      }      out.println(");");    }  }  if (ctxt.isTagFile()) {    out.printin(VAR_EXPRESSIONFACTORY);    out.println(" = _jspxFactory.getJspApplicationContext(config.getServletContext()).getExpressionFactory();");    out.printin(VAR_INSTANCEMANAGER);    out.println(" = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(config);");  }  out.popIndent();  out.printil("}");  out.println();}  }
class C{  public InvalidPluginException(final Throwable cause){  super(cause);}  }
class C{  public void testCase24(){  byte rBytes[]={0};  BigInteger aNumber=BigInteger.ONE;  BigInteger bNumber=BigInteger.ONE;  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(0,result.signum());}  }
class C{  public void testCreateElementNS1() throws Throwable {  String namespaceURI="http://www.ecommerce.org/";  String malformedName="prefix::local";  Document doc;  doc=(Document)load("staffNS",builder);{    boolean success=false;    try {      doc.createElementNS(namespaceURI,malformedName);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  static Promise<Boolean> blockingPromiseBoolean(){  return new BlockingPromise<>();}  }
class C{  public JspTagException(String message,Throwable rootCause){  super(message,rootCause);}  }
class C{  public void paintToolBarBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public void removeOrganizationConfiguration(String orgName,String groupName) throws SMSException, SSOException {  removeOrganizationConfiguration(orgName,groupName,true);}  }
class C{  @Override public void addNotificationListener(NotificationListener listener,NotificationFilter filter,Object handback) throws IllegalArgumentException {  if (listener == null)   throw new IllegalArgumentException("Listener is null");  if (log.isDebugEnabled())   log.debug("addNotificationListener " + listener);  if (generalBroadcaster == null)   generalBroadcaster=new BaseNotificationBroadcaster();  generalBroadcaster.addNotificationListener(listener,filter,handback);  if (attributeBroadcaster == null)   attributeBroadcaster=new BaseNotificationBroadcaster();  if (log.isDebugEnabled())   log.debug("addAttributeNotificationListener " + listener);  attributeBroadcaster.addNotificationListener(listener,filter,handback);}  }
class C{  private boolean hasValidOffset(final String value,final int startPos,final LocalizableMessageBuilder invalidReason){  final int offsetLength=value.length() - startPos;  if (offsetLength < 2) {    final LocalizableMessage message=ERR_ATTR_SYNTAX_UTC_TIME_TOO_SHORT.get(value);    invalidReason.append(message);    return false;  }switch (value.charAt(startPos)) {case '0':case '1':switch (value.charAt(startPos + 1)) {case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':      break;default :    final LocalizableMessage message=ERR_ATTR_SYNTAX_UTC_TIME_INVALID_OFFSET.get(value,value.substring(startPos,startPos + offsetLength));  invalidReason.append(message);return false;}break;case '2':switch (value.charAt(startPos + 1)) {case '0':case '1':case '2':case '3':break;default :final LocalizableMessage message=ERR_ATTR_SYNTAX_UTC_TIME_INVALID_OFFSET.get(value,value.substring(startPos,startPos + offsetLength));invalidReason.append(message);return false;}break;default :final LocalizableMessage message=ERR_ATTR_SYNTAX_UTC_TIME_INVALID_OFFSET.get(value,value.substring(startPos,startPos + offsetLength));invalidReason.append(message);return false;}if (offsetLength == 4) {switch (value.charAt(startPos + 2)) {case '0':case '1':case '2':case '3':case '4':case '5':switch (value.charAt(startPos + 3)) {case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':break;default :final LocalizableMessage message=ERR_ATTR_SYNTAX_UTC_TIME_INVALID_OFFSET.get(value,value.substring(startPos,startPos + offsetLength));invalidReason.append(message);return false;}break;default :final LocalizableMessage message=ERR_ATTR_SYNTAX_UTC_TIME_INVALID_OFFSET.get(value,value.substring(startPos,startPos + offsetLength));invalidReason.append(message);return false;}}return true;}  }
class C{  public void modify(SSOToken token,String objName,ModificationItem[] mods) throws SMSException, SSOException {  try {    Object[] objs={token.getTokenID().toString(),objName,toMods(mods)};    client.send(client.encodeMessage("modify",objs),sessionCookies.getLBCookie(token.getTokenID().toString()),null);  } catch (  SSOException ssoe) {    throw ssoe;  }catch (  SMSException smse) {    throw smse;  }catch (  Exception re) {    debug.error("SMSJAXRPCObject:modify -- Exception:",re);    throw (new SMSException(re,"sms-JAXRPC-cannot-modify"));  }}  }
class C{  public int size(){  return children.size();}  }
class C{  public void uninstallUI(JComponent c){  uninstallComponents();  optionPane.setLayout(null);  uninstallKeyboardActions();  uninstallListeners();  uninstallDefaults();  optionPane=null;}  }
class C{  public SearchResultIterator(ConnectionEntryReader results,Set<String> excludeDNs,Connection conn){  this.results=results;  this.excludeDNs=excludeDNs;  hasExcludeDNs=(excludeDNs != null) && !excludeDNs.isEmpty();  this.conn=conn;}  }
class C{  public static int resetIntermediateResponseCount(){  return intermediateResponseCounter.getAndSet(0);}  }
class C{  String toXML(){  String xmlString=null;  if (policyNames.isEmpty() && childEntries.isEmpty()) {    xmlString="";  } else {    StringBuilder sb=new StringBuilder(256);    sb.append(ResourceIndexManager.LTS).append(ResourceIndexManager.REFERENCE).append(ResourceIndexManager.SPACE).append(ResourceIndexManager.NAME).append(ResourceIndexManager.EQUALS).append(ResourceIndexManager.QUOTE).append(XMLUtils.escapeSpecialCharacters(getResourceName())).append(ResourceIndexManager.QUOTE).append(ResourceIndexManager.GTS).append(ResourceIndexManager.NEW_LINE);    Iterator iter=policyNames.iterator();    while (iter.hasNext()) {      String policyName=(String)iter.next();      sb.append(ResourceIndexManager.LTS).append(ResourceIndexManager.POLICY_NAME).append(ResourceIndexManager.SPACE).append(ResourceIndexManager.NAME).append(ResourceIndexManager.EQUALS).append(ResourceIndexManager.QUOTE).append(XMLUtils.escapeSpecialCharacters(policyName)).append(ResourceIndexManager.QUOTE).append(ResourceIndexManager.SGTS).append(ResourceIndexManager.NEW_LINE);    }    iter=childEntries.iterator();    while (iter.hasNext()) {      ResourceIndexEntry rie=(ResourceIndexEntry)iter.next();      sb.append(rie.toXML());    }    sb.append(ResourceIndexManager.LTSS).append(ResourceIndexManager.REFERENCE).append(ResourceIndexManager.GTS).append(ResourceIndexManager.NEW_LINE);    xmlString=sb.toString();  }  return xmlString;}  }
class C{  public int computeStringWidth(SynthContext ss,Font font,FontMetrics metrics,String text){  return SwingUtilities2.stringWidth(ss.getComponent(),metrics,text);}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof RADIUSServer)) {    return false;  }  final RADIUSServer other=(RADIUSServer)obj;  if ((this.host == null) ? (other.host != null) : !this.host.equals(other.host)) {    return false;  }  return (this.port == other.port);}  }
class C{  public void testCase8(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3,1,2,3,4,5};  int aSign=1;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=BigInteger.ZERO;  BigInteger result=aNumber.multiply(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,result.signum());}  }
class C{  public void makeImmutable(){  if (isMutable) {    isMutable=false;  }}  }
class C{  @Advice.OnMethodExit public static void exit(@Advice.Enter long startTime,@Advice.Argument(0) CQLStatement statement,@Advice.Argument(1) QueryState queryState,@Advice.Argument(2) QueryOptions options,@Advice.Return ResultMessage result){  ConnectorImpl.queryProcessorWrapper().processStatement(statement,queryState,options,startTime,result,null);}  }
class C{  public Sapling(TreeSpecies species){  this(species,false);}  }
class C{  public void test_CallbackHandler(){  CallbackHandlerImpl ch=new CallbackHandlerImpl();  assertFalse(ch.called);  ch.handle(null);  assertTrue(ch.called);}  }
class C{  public ReadOnlyFileException(String msg){  super(msg);}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.AltLOElement createAltLOElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.AltLOElementImpl();}  }
class C{  private void assertNormalisation(String untreatedResource,String treatedResource){  try {    assertThat(resourceName.canonicalize(untreatedResource)).isEqualTo(treatedResource);  } catch (  Exception e) {    String message="Normalisation failed: " + e.getMessage();    throw ComparisonFailureFactory.comparisonFailure(message,treatedResource,"");  }}  }
class C{  @Override public void ignorableWhitespace(char buffer[],int start,int len) throws SAXException {  if (saxLog.isDebugEnabled()) {    saxLog.debug("ignorableWhitespace(" + new String(buffer,start,len) + ")");  }}  }
class C{  public RenderedImage createRendering(RenderContext renderContext){  RenderedImage image=null;  RenderContext rcOut=null;  ParameterBlock renderedParamBlock=(ParameterBlock)paramBlock.clone();  Vector sources=getRenderableSources();  try {    if (sources != null) {      Vector renderedSources=new Vector();      for (int i=0; i < sources.size(); i++) {        rcOut=myCRIF.mapRenderContext(i,renderContext,paramBlock,this);        RenderedImage rdrdImage=((RenderableImage)sources.elementAt(i)).createRendering(rcOut);        if (rdrdImage == null) {          return null;        }        renderedSources.addElement(rdrdImage);      }      if (renderedSources.size() > 0) {        renderedParamBlock.setSources(renderedSources);      }    }    return myCRIF.create(renderContext,renderedParamBlock);  } catch (  ArrayIndexOutOfBoundsException e) {    return null;  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  for (  Pair next : mapping) {    sb.append(next.getKey() + ':' + next.getValue()+ ',');  }  return sb.toString();}  }
class C{  public static <T>boolean genericCompare(T valA,T valB){  return valA == null ? valB == null : valA.equals(valB);}  }
class C{  protected boolean pushNamespace(String prefix,String uri){  try {    if (m_prefixMap.pushNamespace(prefix,uri,m_elemContext.m_currentElemDepth)) {      startPrefixMapping(prefix,uri);      return true;    }  } catch (  SAXException e) {  }  return false;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.InitiatorTokenElement createInitiatorTokenElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.InitiatorTokenElementImpl();}  }
class C{  public void testConstrStringWithoutExpNeg(){  String a="-732546982374982347892379283571094797.287346782359284756";  int aScale=18;  BigInteger bA=new BigInteger("-732546982374982347892379283571094797287346782359284756");  BigDecimal aNumber=new BigDecimal(a);  assertEquals("incorrect value",bA,aNumber.unscaledValue());  assertEquals("incorrect scale",aScale,aNumber.scale());}  }
class C{  private void operationViewClicked(){  if (operationViewDlg == null) {    operationViewPanel=MonitoringAttributesViewPanel.createMessageInstance(tableModel.getAllAttributes());    operationViewDlg=new GenericDialog(Utilities.getFrame(this),operationViewPanel);    Utilities.centerGoldenMean(operationViewDlg,Utilities.getParentDialog(this));    operationViewDlg.setModal(true);  }  operationViewPanel.setSelectedAttributes(tableModel.getDisplayedAttributes());  operationViewDlg.setVisible(true);  if (!operationViewPanel.isCanceled()) {    LinkedHashSet<LocalizableMessage> displayedAttributes=operationViewPanel.getAttributes();    setAttributesToDisplay(displayedAttributes);    updateTableSizes();  }}  }
class C{  public static String encodeInToBase64(final String string){  return Base64.encodeBase64String(string.getBytes());}  }
class C{  public void traverse(int pos) throws org.xml.sax.SAXException {  int top=pos;  while (DTM.NULL != pos) {    startNode(pos);    int nextNode=m_dtm.getFirstChild(pos);    while (DTM.NULL == nextNode) {      endNode(pos);      if (top == pos)       break;      nextNode=m_dtm.getNextSibling(pos);      if (DTM.NULL == nextNode) {        pos=m_dtm.getParent(pos);        if ((DTM.NULL == pos) || (top == pos)) {          if (DTM.NULL != pos)           endNode(pos);          nextNode=DTM.NULL;          break;        }      }    }    pos=nextNode;  }}  }
class C{  protected final boolean isSessionOpen(){  if (sessionTracker != null) {    return sessionTracker.getOpenSession() != null;  }  return false;}  }
class C{  public boolean isEmpty(){  return bytes.remaining() == 0;}  }
class C{  public boolean hasExtensions(){  return entry.hasExtensions();}  }
class C{  @Override public void dump(final String prefix,final FileDescriptor fd,final PrintWriter writer,final String[] args){  super.dump(prefix,fd,writer,args);}  }
class C{  private Object createSipFactory(String objectClassName) throws PeerUnavailableException {  if (objectClassName == null) {    throw new NullPointerException();  }  try {    Class peerObjectClass=Class.forName(getPathName() + "." + objectClassName);    Object newPeerObject=peerObjectClass.newInstance();    return (newPeerObject);  } catch (  Exception e) {    String errmsg="The Peer Factory: " + getPathName() + "."+ objectClassName+ " could not be instantiated. Ensure the Path Name has been set.";    throw new PeerUnavailableException(errmsg,e);  }}  }
class C{  public static boolean compareRef(Object a,Object b){  if (a == b)   return true;  return false;}  }
class C{  public static String toCamelCase(final String value){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  String str=toStudlyCase(value);  return str.substring(0,1).toLowerCase() + str.substring(1);}  }
class C{  public ThreadLocal(){}  }
class C{  public static void f(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_FATAL) {    return;  }  Log.wtf(tag,msg,throwable);}  }
class C{  @Override public void initialize(MessagePolicy requestPolicy,MessagePolicy responsePolicy,CallbackHandler handler,Map<String,Object> options) throws AuthenticationException {  final JsonValue properties=new JsonValue(options);  String clientAuthOnlyStr=IdentityServer.getInstance().getProperty("openidm.auth.clientauthonlyports");  if (clientAuthOnlyStr != null) {    String[] split=clientAuthOnlyStr.split(",");    for (    String entry : split) {      clientAuthOnly.add(Integer.valueOf(entry));    }  }  logger.info("Authentication disabled on ports: {}",clientAuthOnly);  allowedAuthenticationIdPatterns=properties.get(ALLOWED_AUTHENTICATION_ID_PATTERNS).defaultTo(new ArrayList<String>()).asList(String.class);}  }
class C{  public void release(){  initParameters=null;}  }
class C{  public SAML2ConfigBuilder nameIdFormat(String nameIdFormat){  this.nameIdFormat=nameIdFormat;  return this;}  }
class C{  public void addCell(String s){}  }
class C{  public void clear(){  this.parameters=null;}  }
class C{  public void test_wrap_ByteBuffer$ByteBuffer_05(){  String host="new host";  int port=8080;  ByteBuffer bb=ByteBuffer.allocate(10);  ByteBuffer[] bbA={ByteBuffer.allocate(5),ByteBuffer.allocate(10),ByteBuffer.allocate(5)};  SSLEngine sse=getEngine(host,port);  sse.setUseClientMode(true);  try {    SSLEngineResult res=sse.wrap(bbA,bb);    assertEquals(0,res.bytesConsumed());    assertEquals(0,res.bytesProduced());  } catch (  Exception ex) {    fail("Unexpected exception: " + ex);  }}  }
class C{  protected String convertDateFormat(String pattern){  boolean inside=false;  boolean mark=false;  boolean modifiedCommand=false;  StringBuilder buf=new StringBuilder();  for (int i=0; i < pattern.length(); i++) {    char c=pattern.charAt(i);    if (c == '%' && !mark) {      mark=true;    } else {      if (mark) {        if (modifiedCommand) {          modifiedCommand=false;          mark=false;        } else {          inside=translateCommand(buf,pattern,i,inside);          if (c == 'O' || c == 'E') {            modifiedCommand=true;          } else {            mark=false;          }        }      } else {        if (!inside && c != ' ') {          buf.append("'");          inside=true;        }        buf.append(c);      }    }  }  if (buf.length() > 0) {    char lastChar=buf.charAt(buf.length() - 1);    if (lastChar != '\'' && inside) {      buf.append('\'');    }  }  return buf.toString();}  }
class C{  public static byte[] decode(byte[] data){  int len=data.length / 4 * 3;  ByteArrayOutputStream bOut=new ByteArrayOutputStream(len);  try {    encoder.decode(data,0,data.length,bOut);  } catch (  Exception e) {    throw new DecoderException("unable to decode base64 data: " + e.getMessage(),e);  }  return bOut.toByteArray();}  }
class C{  @Advice.OnMethodEnter public static long enter(){  final long startTime=System.currentTimeMillis();  return startTime;}  }
class C{  public TagField createField(ID3v22FieldKey id3Key,String value) throws KeyNotFoundException, FieldDataInvalidException {  if (id3Key == null) {    throw new KeyNotFoundException();  }  return super.doCreateTagField(new FrameAndSubId(id3Key.getFrameId(),id3Key.getSubId()),value);}  }
class C{  public void leaveGroup(SocketAddress groupAddress,NetworkInterface netInterface) throws IOException {  checkJoinOrLeave(groupAddress,netInterface);  impl.leaveGroup(groupAddress,netInterface);}  }
class C{  public static ByteBuffer isVbriFrame(ByteBuffer bb,MPEGFrameHeader mpegFrameHeader){  int startPosition=bb.position();  MP3File.logger.finest("Checking VBRI Frame at" + startPosition);  bb.position(startPosition + VBRI_OFFSET);  ByteBuffer header=bb.slice();  bb.position(startPosition);  byte[] identifier=new byte[VBRI_IDENTIFIER_BUFFER_SIZE];  header.get(identifier);  if ((!Arrays.equals(identifier,VBRI_VBR_ID))) {    return null;  }  MP3File.logger.finest("Found VBRI Frame");  return header;}  }
class C{  @Override public void body(String namespace,String name,String text) throws Exception {  String namespaceuri=null;  String localpart=text;  int colon=text.indexOf(':');  if (colon >= 0) {    String prefix=text.substring(0,colon);    namespaceuri=digester.findNamespaceURI(prefix);    localpart=text.substring(colon + 1);  }  ContextHandler contextHandler=(ContextHandler)digester.peek();  contextHandler.addSoapHeaders(localpart,namespaceuri);}  }
class C{  @Override public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String[] params={realm};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_LIST_AUTH_CONFIGURATIONS",params);  try {    try {      new OrganizationConfigManager(adminSSOToken,realm);    } catch (    SMSException e) {      debugError("ListAuthConfigurations.handleRequest realm did not exist",null);      writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_LIST_AUTH_CONFIGURATIONS",params);      throw new CLIException(MessageFormat.format(getResourceString("realm-does-not-exist"),(Object[])params),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }    Set configurations=AMAuthConfigUtils.getAllNamedConfig(realm,adminSSOToken);    if ((configurations != null) && !configurations.isEmpty()) {      getOutputWriter().printlnMessage(getResourceString("authentication-list-auth-configurations-succeeded"));      for (Iterator i=configurations.iterator(); i.hasNext(); ) {        String name=(String)i.next();        getOutputWriter().printlnMessage(name);      }    } else {      getOutputWriter().printlnMessage(getResourceString("authentication-list-auth-configurations-no-configurations"));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_LIST_AUTH_CONFIGURATIONS",params);  } catch (  SMSException e) {    debugError("ListAuthConfigurations.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_LIST_AUTH_CONFIGURATIONS",params);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    debugError("ListAuthConfigurations.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_LIST_AUTH_CONFIGURATIONS",params);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public Builder(AbstractManagedObjectDefinition<?,?> pd,String name,String pluralName,AbstractManagedObjectDefinition<C,S> cd){  super(pd,name,cd);  this.pluralName=pluralName;}  }
class C{  public boolean hasObjectClass(ObjectClass objectClass){  return objectClasses.containsKey(objectClass);}  }
class C{  void reRegisterRemotePolicyListener(SSOToken appToken) throws PolicyException {  if (debug.messageEnabled()) {    debug.message("PolicyEvaluator.reRegisterRemotePolicyListener():" + "entering");  }  resourceResultCache.addRemotePolicyListener(appSSOToken,serviceName,policyProperties.getNotificationURL(),true);  resourceResultCache.clearCachedDecisionsForService(serviceName);  if (debug.messageEnabled()) {    debug.message("PolicyEvaluator.reRegisterRemotePolicyListener():" + "returning");  }}  }
class C{  public PluginResult.IntermediateResponse invokeSearchResultEntryPlugins(SearchEntrySearchOperation searchOperation,SearchResultEntry searchEntry){  PluginResult.IntermediateResponse result=null;  for (  DirectoryServerPlugin p : searchResultEntryPlugins) {    if (isInternalOperation(searchOperation,p)) {      continue;    }    try {      result=p.processSearchEntry(searchOperation,searchEntry);    } catch (    Exception e) {      logger.traceException(e);      LocalizableMessage message=ERR_PLUGIN_SEARCH_ENTRY_PLUGIN_EXCEPTION.get(p.getPluginEntryDN(),searchOperation.getConnectionID(),searchOperation.getOperationID(),searchEntry.getName(),stackTraceToSingleLineString(e));      logger.error(message);      return PluginResult.IntermediateResponse.stopProcessing(false,DirectoryServer.getServerErrorResultCode(),message);    }    if (result == null) {      LocalizableMessage message=ERR_PLUGIN_SEARCH_ENTRY_PLUGIN_RETURNED_NULL.get(p.getPluginEntryDN(),searchOperation.getConnectionID(),searchOperation.getOperationID(),searchEntry.getName());      logger.error(message);      return PluginResult.IntermediateResponse.stopProcessing(false,DirectoryServer.getServerErrorResultCode(),message);    } else     if (!result.continuePluginProcessing()) {      return result;    }  }  if (result == null) {    result=PluginResult.IntermediateResponse.continueOperationProcessing(true);  }  return result;}  }
class C{  public void test_rotateLjava_util_ListI(){  Collections.rotate(new ArrayList<Object>(),25);  List<String> list=new ArrayList<String>();  list.add(0,"zero");  list.add(1,"one");  list.add(2,"two");  list.add(3,"three");  list.add(4,"four");  Collections.rotate(list,Integer.MIN_VALUE);  assertEquals("Rotated incorrectly at position 0, ","three",list.get(0));  assertEquals("Rotated incorrectly at position 1, ","four",list.get(1));  assertEquals("Rotated incorrectly at position 2, ","zero",list.get(2));  assertEquals("Rotated incorrectly at position 3, ","one",list.get(3));  assertEquals("Rotated incorrectly at position 4, ","two",list.get(4));}  }
class C{  public static void move(String source,String target){  new File(source).renameTo(new File(target));}  }
class C{  private void closeDeletion(int d){  Object[] tab=table;  int len=tab.length;  Object item;  for (int i=nextKeyIndex(d,len); (item=tab[i]) != null; i=nextKeyIndex(i,len)) {    int r=hash(item,len);    if ((i < r && (r <= d || d <= i)) || (r <= d && d <= i)) {      tab[d]=item;      tab[d + 1]=tab[i + 1];      tab[i]=null;      tab[i + 1]=null;      d=i;    }  }}  }
class C{  public PrintStream(OutputStream out,boolean autoFlush){  this(autoFlush,requireNonNull(out,"Null output stream"));}  }
class C{  public boolean deleteEntry(BasicPoolEntry entry){  final boolean found=freeEntries.remove(entry);  if (found)   numEntries--;  return found;}  }
class C{  public int storeCall(Call call){  int time=call.getTime();  int initialStars=getCallStars(call);  int maxDelay=(initialStars - 1) * 10;  int startTime=findEmptyOccupation(time,maxDelay,call.getDuration());  int stars=initialStars - (startTime - time + 9) / 10;  if (stars >= 1) {    fillOccupation(startTime,call.getDuration());    totalStars+=stars;    totalCalls++;    totalDuration+=call.getDuration();    return startTime - time;  } else {    return -1;  }}  }
class C{  void constructNode(String nodeName,String prefix,String nodeNamespace,TransformerImpl transformer) throws TransformerException {  if (null != nodeName && nodeName.length() > 0) {    SerializationHandler rhandler=transformer.getSerializationHandler();    String val=transformer.transformToString(this);    try {      String localName=QName.getLocalPart(nodeName);      if (prefix != null && prefix.length() > 0) {        rhandler.addAttribute(nodeNamespace,localName,nodeName,"CDATA",val,true);      } else {        rhandler.addAttribute("",localName,nodeName,"CDATA",val,true);      }    } catch (    SAXException e) {    }  }}  }
class C{  public Object[] toArray(Object[] arry){synchronized (children) {    return children.keySet().toArray(arry);  }}  }
class C{  synchronized void removeUnusedSets(){  attributesPool.size();}  }
class C{  public static void createServiceInstance(String serverInstance,String serverId){  String classMethod="UpgradeUtils:createServiceInstance : ";  if (debug.messageEnabled()) {    debug.message(classMethod + "serverInstance :" + serverInstance);    debug.message(classMethod + "serverId :" + serverId);  }  try {    ServerConfiguration.createServerInstance(ssoToken,serverInstance,serverId,Collections.EMPTY_SET,"");  } catch (  Exception e) {    debug.error(classMethod + " Error creating service instance ",e);  }}  }
class C{  private void testAgainstRIMsg(Message tiMsg,Message riMsg){  assertEquals(riMsg.getHeader(FromHeader.NAME),tiMsg.getHeader(FromHeader.NAME));  assertEquals(riMsg.getHeader(ToHeader.NAME),tiMsg.getHeader(ToHeader.NAME));  assertEquals(riMsg.getHeader(ViaHeader.NAME),tiMsg.getHeader(ViaHeader.NAME));  assertEquals(riMsg.getHeader(CallIdHeader.NAME),tiMsg.getHeader(CallIdHeader.NAME));  assertEquals(riMsg.getHeader(CSeqHeader.NAME),tiMsg.getHeader(CSeqHeader.NAME));}  }
class C{  public java.lang.String toString(){  return toString(true,false);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodedocumentnodetype.class,args);}  }
class C{  public void add(long x){  Cell[] as;  long b, v;  int m;  Cell a;  if ((as=cells) != null || !casBase(b=base,b + x)) {    boolean uncontended=true;    if (as == null || (m=as.length - 1) < 0 || (a=as[getProbe() & m]) == null || !(uncontended=a.cas(v=a.value,v + x)))     longAccumulate(x,null,uncontended);  }}  }
class C{  public static void putHashTable(final String name,final Hashtable hash){  final Enumeration<String> keys=hash.keys();  final StringBuffer buf=new StringBuffer("");  while (keys.hasMoreElements()) {    if (!buf.toString().equals("")) {      buf.append(";");    }    final String key=keys.nextElement();    final String value=hash.get(key).toString();    buf.append(key + ":" + value);  }  put(fixKey(name),buf.toString());}  }
class C{  private HttpResponse processResponse(ByteBuffer response,AsyncChannelWrapper channel,long timeout) throws InterruptedException, ExecutionException, DeploymentException, EOFException, TimeoutException {  Map<String,List<String>> headers=new CaseInsensitiveKeyMap<>();  int status=0;  boolean readStatus=false;  boolean readHeaders=false;  String line=null;  while (!readHeaders) {    response.clear();    Future<Integer> read=channel.read(response);    Integer bytesRead=read.get(timeout,TimeUnit.MILLISECONDS);    if (bytesRead.intValue() == -1) {      throw new EOFException();    }    response.flip();    while (response.hasRemaining() && !readHeaders) {      if (line == null) {        line=readLine(response);      } else {        line+=readLine(response);      }      if ("\r\n".equals(line)) {        readHeaders=true;      } else       if (line.endsWith("\r\n")) {        if (readStatus) {          parseHeaders(line,headers);        } else {          status=parseStatus(line);          readStatus=true;        }        line=null;      }    }  }  return new HttpResponse(status,new WsHandshakeResponse(headers));}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  byte[] rules=packRules();  int[] times=packTimes();  makeRulesCompatible();  stream.defaultWriteObject();  stream.writeInt(rules.length);  stream.write(rules);  stream.writeObject(times);  unpackRules(rules);  unpackTimes(times);}  }
class C{  public static ValueExp div(ValueExp value1,ValueExp value2){  return new BinaryOpValueExp(DIV,value1,value2);}  }
class C{  public void selectAll(){  Document doc=getDocument();  if (doc != null) {    setCaretPosition(0);    moveCaretPosition(doc.getLength());  }}  }
class C{  @Override public void repaint(){}  }
class C{  public static QueryExp finalSubString(AttributeValueExp a,StringValueExp s){  return new MatchQueryExp(a,new StringValueExp("*" + escapeString(s.getValue())));}  }
class C{  public ElemForEach(){}  }
class C{  Index(Node<K,V> node,Index<K,V> down,Index<K,V> right){  this.node=node;  this.down=down;  this.right=right;}  }
class C{  @Override public void flush(){}  }
class C{  @Override public String toString(){  return backend.getUserFriendlyName().toString();}  }
class C{  public final void testIsPolicyMappingInhibited() throws Exception {  Set<TrustAnchor> taSet=TestUtils.getTrustAnchorSet();  if (taSet == null) {    fail(getName() + ": not performed (could not create test TrustAnchor set)");  }  PKIXParameters p=new PKIXParameters(taSet);  assertFalse(p.isPolicyMappingInhibited());  CertificateFactory cf=CertificateFactory.getInstance("X.509");  TestUtils.initCertPathSSCertChain();  Set<TrustAnchor> taSet2=Collections.singleton(new TrustAnchor(TestUtils.rootCertificateSS,null));  p=new PKIXParameters(taSet2);  assertFalse(p.isPolicyMappingInhibited());  p.setPolicyMappingInhibited(true);  assertTrue(p.isRevocationEnabled());}  }
class C{  public Scanner(File source,String charsetName) throws FileNotFoundException {  this(Objects.requireNonNull(source),toDecoder(charsetName));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodedocumentfragmentnormalize2.class,args);}  }
class C{  public void paintTextAreaBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public GeneralSecurityException(){  super();}  }
class C{  public BlacklistException(Throwable cause){  super(cause);}  }
class C{  private void updateChildNodes(NodeRefresher task){  BasicNode parent=task.getNode();  ArrayList<Integer> insertIndex=new ArrayList<>();  ArrayList<Integer> changedIndex=new ArrayList<>();  boolean differential=canDoDifferentialUpdate(task);  LDAPURL parentUrl=findUrlForDisplayedEntry(parent);  boolean doNotTrust=numSubordinateHacker.containsChildrenOf(parentUrl);  for (  SearchResultEntry entry : task.getChildEntries()) {    int index;    if (differential) {      index=findChildNode(parent,entry.getName());    } else {      index=-(parent.getChildCount() + 1);    }    BasicNode child;    if (index < 0) {      index=-(index + 1);      child=new BasicNode(entry.getName());      parent.insert(child,index);      updateNodeRendering(child,entry);      insertIndex.add(index);    } else {      child=(BasicNode)parent.getChildAt(index);      if (updateNodeRendering(child,entry)) {        changedIndex.add(index);      }      child.setObsolete(false);    }    boolean hasNoSubOrdinates;    if (!child.hasSubOrdinates() && doNotTrust) {      hasNoSubOrdinates=!numSubordinateHacker.contains(findUrlForDisplayedEntry(child));    } else {      hasNoSubOrdinates=!child.hasSubOrdinates();    }    if (!hasNoSubOrdinates || child.getReferral() != null || child.getChildCount() > 0) {      startRefreshNode(child,entry,true);    }  }  if (insertIndex.size() >= 1) {    treeModel.nodesWereInserted(parent,intArrayFromCollection(insertIndex));  }  if (changedIndex.size() >= 1) {    treeModel.nodesChanged(parent,intArrayFromCollection(changedIndex));  }}  }
class C{  public org.omg.CORBA.Any to_any(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("to_any",_opsClass);  DynAnyOperations $self=(DynAnyOperations)$so.servant;  try {    return $self.to_any();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public ObjectInUseException(Throwable t,String name,Object user){  super(t);  this.name=name;  this.user=user;}  }
class C{  private void mainApplication(){  main_panel=new JPanel(new BorderLayout());  getContentPane().add(main_panel);  open_board_button=resources.newJButton("open_own_design","open_own_design_tooltip",listener);  main_panel.add(open_board_button,BorderLayout.NORTH);  main_panel.add(stat.log.getComponentToDisplay(),BorderLayout.CENTER);  pack();  setLocationRelativeTo(null);}  }
class C{  public TreeModelEvent(Object source,Object[] path){  this(source,new TreePath(path));}  }
class C{  private static int handleDpadHorizontal(int iconIdx,int cntX,int cntY,int[][] matrix,int increment){  if (matrix == null) {    throw new IllegalStateException("Dpad navigation requires a matrix.");  }  int newIconIndex=NOOP;  int xPos=-1;  int yPos=-1;  for (int i=0; i < cntX; i++) {    for (int j=0; j < cntY; j++) {      if (matrix[i][j] == iconIdx) {        xPos=i;        yPos=j;      }    }  }  if (DEBUG) {    Log.v(TAG,String.format("\thandleDpadHorizontal: \t[x, y]=[%d, %d] iconIndex=%d",xPos,yPos,iconIdx));  }  for (int i=xPos + increment; 0 <= i && i < cntX; i=i + increment) {    if ((newIconIndex=inspectMatrix(i,yPos,cntX,cntY,matrix)) != NOOP) {      return newIconIndex;    }  }  int nextYPos1;  int nextYPos2;  int i=-1;  for (int coeff=1; coeff < cntY; coeff++) {    nextYPos1=yPos + coeff * increment;    nextYPos2=yPos - coeff * increment;    for (i=xPos + increment * coeff; 0 <= i && i < cntX; i=i + increment) {      if ((newIconIndex=inspectMatrix(i,nextYPos1,cntX,cntY,matrix)) != NOOP) {        return newIconIndex;      }      if ((newIconIndex=inspectMatrix(i,nextYPos2,cntX,cntY,matrix)) != NOOP) {        return newIconIndex;      }    }  }  return newIconIndex;}  }
class C{  Parsed toUnresolved(){  return currentParsed();}  }
class C{  public final void pushIteratorRoot(int n){  m_iteratorRoots.push(n);}  }
class C{  private boolean determineVariableBitrate(final AsfHeader header){  assert header != null;  boolean result=false;  final MetadataContainer extDesc=header.findExtendedContentDescription();  if (extDesc != null) {    final List<MetadataDescriptor> descriptors=extDesc.getDescriptorsByName("IsVBR");    if (descriptors != null && !descriptors.isEmpty()) {      result=Boolean.TRUE.toString().equals(descriptors.get(0).getString());    }  }  return result;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  Attr attr;  NodeList childList;  Node importedAttr;  String nodeName;  int nodeType;  String nodeValue;  doc=(Document)load("staffNS",true);  childList=doc.getElementsByTagNameNS("http://www.nist.gov","address");  element=(Element)childList.item(1);  attr=element.getAttributeNode("street");  importedAttr=doc.importNode(attr,false);  nodeName=importedAttr.getNodeName();  nodeValue=importedAttr.getNodeValue();  nodeType=(int)importedAttr.getNodeType();  assertEquals("documentimportnode01_nodeName","street",nodeName);  assertEquals("documentimportnode01_nodeType",2,nodeType);  assertEquals("documentimportnode01_nodeValue","Yes",nodeValue);}  }
class C{  protected void detach(){  wrappedConnection=null;  connManager=null;  duration=Long.MAX_VALUE;}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentFragment newDocFragment;  NodeList children;  int length;  String newDocFragmentName;  int newDocFragmentType;  String newDocFragmentValue;  doc=(Document)load("staff",true);  newDocFragment=doc.createDocumentFragment();  children=newDocFragment.getChildNodes();  length=(int)children.getLength();  assertEquals("length",0,length);  newDocFragmentName=newDocFragment.getNodeName();  assertEquals("name","#document-fragment",newDocFragmentName);  newDocFragmentType=(int)newDocFragment.getNodeType();  assertEquals("type",11,newDocFragmentType);  newDocFragmentValue=newDocFragment.getNodeValue();  assertNull("value",newDocFragmentValue);}  }
class C{  public SignatureVisitor visitArrayType(){  return this;}  }
class C{  public ServiceConfig createGlobalConfig(Map attrs) throws SMSException, SSOException {  validateSSM();  ServiceSchemaImpl ss=ssm.getSchema(SchemaType.GLOBAL);  if (ss == null) {    String[] args={serviceName};    throw (new SMSException(IUMSConstants.UMS_BUNDLE_NAME,"sms-service-does-not-have-global-schema",args));  }  String orgDN=scm.constructServiceConfigDN(SMSUtils.DEFAULT,CreateServiceConfig.GLOBAL_CONFIG_NODE,null);  try {    CreateServiceConfig.createSubConfigEntry(token,orgDN,ss,null,null,attrs,SMSEntry.baseDN);  } catch (  ServiceAlreadyExistsException slee) {  }  return (getGlobalConfig(null));}  }
class C{  private void sendInitialBindRequest(String saslMechanism,ByteSequence bindDN) throws ClientException {  BindRequestProtocolOp bindRequest=new BindRequestProtocolOp(bindDN.toByteString(),saslMechanism,null);  LDAPMessage requestMessage=new LDAPMessage(nextMessageID.getAndIncrement(),bindRequest);  try {    writer.writeMessage(requestMessage);  } catch (  IOException ioe) {    LocalizableMessage message=ERR_LDAPAUTH_CANNOT_SEND_INITIAL_SASL_BIND.get(saslMechanism,getExceptionMessage(ioe));    throw new ClientException(ReturnCode.CLIENT_SIDE_SERVER_DOWN,message,ioe);  }catch (  Exception e) {    LocalizableMessage message=ERR_LDAPAUTH_CANNOT_SEND_INITIAL_SASL_BIND.get(saslMechanism,getExceptionMessage(e));    throw new ClientException(ReturnCode.CLIENT_SIDE_ENCODING_ERROR,message,e);  }}  }
class C{  public Collection<PlaPointIntDist> nearest_border_projections(PlaPointInt p_point,int p_max_result_points){  TreeSet<PlaPointIntDist> risul=new TreeSet<PlaPointIntDist>();  if (!contains(p_point))   return risul;  if (p_max_result_points <= 0)   return risul;  p_max_result_points=Math.min(p_max_result_points,8);  PlaPointFloat inside_point=p_point.to_float();  for (  PlaDirection curr_dir : eight_45_degree) {    PlaPointInt curr_border_point=border_point(p_point,curr_dir);    double curr_dist=inside_point.distance_square(curr_border_point.to_float());    PlaPointIntDist a_value=new PlaPointIntDist(curr_border_point,curr_dist);    risul.add(a_value);  }  return risul;}  }
class C{  public boolean isNewEntry(){  return (newEntry);}  }
class C{  private void registerComponent(JComponent c){  for (  JComponent root : roots) {    for (Component p=c; p != null; p=p.getParent()) {      if (p == root) {        return;      }    }  }  for (int i=0; i < roots.size(); i++) {    JComponent root=roots.elementAt(i);    for (Component p=root.getParent(); p != null; p=p.getParent()) {      if (p == c) {        roots.removeElementAt(i--);        break;      }    }  }  roots.addElement(c);}  }
class C{  public static void loadIdRepoSchema(SSOToken ssoToken,String idRepoName,String realm,ServletContext servletCtx) throws IdRepoException {  if (servletCtx == null) {    return;  }  try {    ServiceConfigManager svcCfgMgr=new ServiceConfigManager(IdConstants.REPO_SERVICE,ssoToken);    ServiceConfig cfg=svcCfgMgr.getOrganizationConfig(realm,null);    ServiceConfig ss=cfg.getSubConfig(idRepoName);    if (ss == null) {      if (DEBUG.messageEnabled()) {        DEBUG.message("IdRepoUtils.loadIdRepoSchema: data store " + idRepoName + " for realm "+ realm+ " doesn't exist.");      }      Object args[]={idRepoName,realm};      throw new IdRepoException(IdRepoBundle.BUNDLE_NAME,IdRepoErrorCode.PLUGIN_DOESNT_EXIST_FOR_REALM,args);    }    String idRepoType=ss.getSchemaID();    Map attrValues=ss.getAttributes();    String schemaFiles=getSchemaFiles(idRepoType);    if ((schemaFiles == null) || (schemaFiles.trim().length() == 0)) {      if (DEBUG.messageEnabled()) {        DEBUG.message("IdRepoUtils.loadIdRepoSchema: data store " + idRepoName + " for realm "+ realm+ " doesn't have "+ "schema files.");      }      return;    }    StringTokenizer st=new StringTokenizer(schemaFiles);    while (st.hasMoreTokens()) {      String schemaFile=st.nextToken();      tagSwapAndImportSchema(schemaFile,attrValues,servletCtx,idRepoType);    }  } catch (  SMSException smsex) {    if (DEBUG.messageEnabled()) {      DEBUG.message("IdRepoUtils.loadIdRepoSchema:",smsex);    }    Object args[]={idRepoName,realm};    throw new IdRepoException(IdRepoBundle.BUNDLE_NAME,IdRepoErrorCode.UNABLE_READ_PLUGIN_FOR_REALM,args);  }catch (  SSOException ssoex) {    if (DEBUG.messageEnabled()) {      DEBUG.message("IdRepoUtils.loadIdRepoSchema:",ssoex);    }    Object args[]={idRepoName,realm};    throw new IdRepoException(IdRepoBundle.BUNDLE_NAME,IdRepoErrorCode.UNABLE_READ_PLUGING_FOR_REALM_SSOTOKEN_NOT_VALID,args);  }catch (  Exception ex) {    if (DEBUG.messageEnabled()) {      DEBUG.message("IdRepoUtils.loadIdRepoSchema:",ex);    }    Object args[]={idRepoName,realm,ex.getMessage()};    throw new IdRepoException(IdRepoBundle.BUNDLE_NAME,IdRepoErrorCode.UNABLE_LOAD_SCHEMA_FOR_PLUGIN_FOR_REALM,args);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  Attr streetAttr;  Attr removedAttr;  String removedValue;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testEmployee=(Element)elementList.item(2);  streetAttr=testEmployee.getAttributeNode("street");  removedAttr=testEmployee.removeAttributeNode(streetAttr);  removedValue=removedAttr.getValue();  assertEquals("elementRemoveAttributeNodeAssert","No",removedValue);}  }
class C{  private void createDeleteFielsNode(Element rootElement){  Element element=creator.getDocument().createElement("DeleteFiles");  element.setAttribute("deleted",String.valueOf(this.filesDeleted));  rootElement.appendChild(element);}  }
class C{  public static int countByUuid_C(java.lang.String uuid,long companyId){  return getPersistence().countByUuid_C(uuid,companyId);}  }
class C{  @DataProvider() public Object[][] createToStringData(){  return new Object[][]{{1,0,1,0,0,0,0,"00010101000000Z"},{9,0,1,0,0,0,0,"00090101000000Z"},{10,0,1,0,0,0,0,"00100101000000Z"},{99,0,1,0,0,0,0,"00990101000000Z"},{100,0,1,0,0,0,0,"01000101000000Z"},{999,0,1,0,0,0,0,"09990101000000Z"},{1000,0,1,0,0,0,0,"10000101000000Z"},{2000,0,1,0,0,0,0,"20000101000000Z"},{2099,0,1,0,0,0,0,"20990101000000Z"},{2000,8,1,0,0,0,0,"20000901000000Z"},{2000,9,1,0,0,0,0,"20001001000000Z"},{2000,10,1,0,0,0,0,"20001101000000Z"},{2000,11,1,0,0,0,0,"20001201000000Z"},{2000,0,9,0,0,0,0,"20000109000000Z"},{2000,0,10,0,0,0,0,"20000110000000Z"},{2000,0,19,0,0,0,0,"20000119000000Z"},{2000,0,20,0,0,0,0,"20000120000000Z"},{2000,0,29,0,0,0,0,"20000129000000Z"},{2000,0,30,0,0,0,0,"20000130000000Z"},{2000,0,31,0,0,0,0,"20000131000000Z"},{2000,0,1,9,0,0,0,"20000101090000Z"},{2000,0,1,10,0,0,0,"20000101100000Z"},{2000,0,1,19,0,0,0,"20000101190000Z"},{2000,0,1,20,0,0,0,"20000101200000Z"},{2000,0,1,23,0,0,0,"20000101230000Z"},{2000,0,1,0,9,0,0,"20000101000900Z"},{2000,0,1,0,10,0,0,"20000101001000Z"},{2000,0,1,0,59,0,0,"20000101005900Z"},{2000,0,1,0,0,9,0,"20000101000009Z"},{2000,0,1,0,0,10,0,"20000101000010Z"},{2000,0,1,0,0,59,0,"20000101000059Z"},{2000,0,1,0,0,0,9,"20000101000000.009Z"},{2000,0,1,0,0,0,10,"20000101000000.010Z"},{2000,0,1,0,0,0,99,"20000101000000.099Z"},{2000,0,1,0,0,0,100,"20000101000000.100Z"},{2000,0,1,0,0,0,999,"20000101000000.999Z"}};}  }
class C{  public static java.util.Calendar parseDateTime(String lexicalXSDDateTime){  if (theConverter == null)   initConverter();  return theConverter.parseDateTime(lexicalXSDDateTime);}  }
class C{  public CloseShieldInputStream(InputStream in){  super(in);}  }
class C{  static void testImplement(ClassLoader loader){  Class doubledImplementClass;  Object obj;  useImplement(new DoubledImplement(),true);  try {    doubledImplementClass=loader.loadClass("DoubledImplement");  } catch (  ClassNotFoundException cnfe) {    System.err.println("loadClass failed: " + cnfe);    return;  }  try {    obj=doubledImplementClass.newInstance();  } catch (  InstantiationException ie) {    System.err.println("newInstance failed: " + ie);    return;  }catch (  IllegalAccessException iae) {    System.err.println("newInstance failed: " + iae);    return;  }catch (  LinkageError le) {    System.out.println("Got LinkageError on DI (early)");    return;  }  ICommon icommon=(ICommon)obj;  useImplement(icommon.getDoubledInstance(),false);}  }
class C{  public void testConnect_Unresolved() throws IOException {  assertFalse(this.channel1.isConnected());  InetSocketAddress unresolved=new InetSocketAddress("unresolved address",1080);  try {    this.channel1.connect(unresolved);    fail("Should throw an UnresolvedAddressException here.");  } catch (  UnresolvedAddressException e) {  }}  }
class C{  public void paintPasswordFieldBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public LDAPMessage readMessage() throws IOException, DecodeException, LDAPException {  debugInputStream.setRecordingEnabled(logger.isTraceEnabled());  if (!asn1Reader.hasNextElement()) {    return null;  }  LDAPMessage message=org.opends.server.protocols.ldap.LDAPReader.readMessage(asn1Reader);  if (debugInputStream.isRecordingEnabled()) {    ByteString bytesRead=debugInputStream.getRecordedBytes();    debugInputStream.clearRecordedBytes();    logger.trace("bytes read from wire(len=" + bytesRead.length() + "):"+ ServerConstants.EOL+ bytesRead.toHexPlusAsciiString(4));    logger.trace(message.toString());  }  return message;}  }
class C{  public boolean onlyIfCached(){  return onlyIfCached;}  }
class C{  protected DecodeException newUnexpectedRequestException(final int messageID,final Request request){  return DecodeException.fatalError(LocalizableMessage.raw("Unexpected LDAP request: id=%d, message=%s",messageID,request));}  }
class C{  private void checkState(){  if (!start) {    throw new IllegalStateException("Cannot visit member before visit has been called.");  }  if (end) {    throw new IllegalStateException("Cannot visit member after visitEnd has been called.");  }}  }
class C{  @Override public byte[] reverse(byte[] blob) throws TokenStrategyFailedException {  Reject.ifNull(blob);  final int lengthGuess=blob.length * 2;  final ByteArrayOutputStream bout=new ByteArrayOutputStream(lengthGuess);  try {    GZIPInputStream inputStream=new GZIPInputStream(new ByteArrayInputStream(blob));    IOUtils.copy(inputStream,bout);    inputStream.close();  } catch (  IOException e) {    throw new TokenStrategyFailedException(e);  }  return bout.toByteArray();}  }
class C{  public static String responseProviderTypeName(ResponseProvider respProvider){  if (respProvider == null) {    return (null);  }  String name=null;  String className=respProvider.getClass().getName();  Iterator items=PolicyManager.getPluginSchemaNames(RESPONSE_PROVIDER).iterator();  while (items.hasNext()) {    String pluginName=(String)items.next();    PluginSchema ps=PolicyManager.getPluginSchema(RESPONSE_PROVIDER,pluginName);    if (className.equals(ps.getClassName())) {      name=pluginName;      break;    }  }  return (name);}  }
class C{  private Path concatArchiveExtension(Path path) throws UpdateException {  try {    return Paths.get(new URI(path.toUri().toString().concat(archiveExtension)));  } catch (  URISyntaxException e) {    throw new UpdateException(e.getMessage(),e);  }}  }
class C{  public static RootContext ctx(){  return new RootContext();}  }
class C{  public boolean show(Container c,int x,int y,int w,int h){synchronized (this) {    if (painting) {      return false;    }    showing=true;  }  try {    BufferInfo info=getBufferInfo(c);    BufferStrategy bufferStrategy;    if (info != null && info.isInSync() && (bufferStrategy=info.getBufferStrategy(false)) != null) {      SubRegionShowable bsSubRegion=(SubRegionShowable)bufferStrategy;      boolean paintAllOnExpose=info.getPaintAllOnExpose();      info.setPaintAllOnExpose(false);      if (bsSubRegion.showIfNotLost(x,y,(x + w),(y + h))) {        return !paintAllOnExpose;      }      bufferInfo.setContentsLostDuringExpose(true);    }  }  finally {synchronized (this) {      showing=false;      notifyAll();    }  }  return false;}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  public static String removeDeployUri(String uri){  if ((uri == null) || (uri.length() == 0)) {    return uri;  }  int loc=uri.indexOf("/",1);  if (loc == -1) {    return null;  } else {    return uri.substring(loc);  }}  }
class C{  @Override public String toString(){  if (count == 0) {    return "";  }  int wasted=value.length - count;  if (wasted >= 256 || (wasted >= INITIAL_CAPACITY && wasted >= (count >> 1))) {    return new String(value,0,count);  }  shared=true;  return new String(0,count,value);}  }
class C{  private void updateInstanceState(String instanceId,InstanceState instanceState) throws ResourceException {synchronized (repoLock) {    ResourcePath resourcePath=STATES_RESOURCE_CONTAINER.child(instanceId);    UpdateRequest updateRequest=newUpdateRequest(resourcePath.toString(),json(instanceState.toMap()));    updateRequest.setRevision(instanceState.getRevision());    repoService.update(updateRequest);  }}  }
class C{  private void recalculateHashCode(){  hashCode=0;  for (  BaseDNDescriptor rep : getBaseDns()) {    hashCode+=rep.hashCode();  }  hashCode+=entries;  for (  IndexDescriptor index : indexes) {    hashCode+=index.hashCode();  }  for (  VLVIndexDescriptor index : vlvIndexes) {    hashCode+=index.hashCode();  }}  }
class C{  public ZoneOffsetTransition previousTransition(Instant instant){  if (savingsInstantTransitions.length == 0) {    return null;  }  long epochSec=instant.getEpochSecond();  if (instant.getNano() > 0 && epochSec < Long.MAX_VALUE) {    epochSec+=1;  }  long lastHistoric=savingsInstantTransitions[savingsInstantTransitions.length - 1];  if (lastRules.length > 0 && epochSec > lastHistoric) {    ZoneOffset lastHistoricOffset=wallOffsets[wallOffsets.length - 1];    int year=findYear(epochSec,lastHistoricOffset);    ZoneOffsetTransition[] transArray=findTransitionArray(year);    for (int i=transArray.length - 1; i >= 0; i--) {      if (epochSec > transArray[i].toEpochSecond()) {        return transArray[i];      }    }    int lastHistoricYear=findYear(lastHistoric,lastHistoricOffset);    if (--year > lastHistoricYear) {      transArray=findTransitionArray(year);      return transArray[transArray.length - 1];    }  }  int index=Arrays.binarySearch(savingsInstantTransitions,epochSec);  if (index < 0) {    index=-index - 1;  }  if (index <= 0) {    return null;  }  return new ZoneOffsetTransition(savingsInstantTransitions[index - 1],wallOffsets[index - 1],wallOffsets[index]);}  }
class C{  public RestException(int errorCode,Throwable cause){  super(cause);  this.errorCode=errorCode;  this.message=getLocalizedMessage(Locale.getDefault());}  }
class C{  public void changePassword(String userId,String password) throws AMConsoleException {  String[] params={userId,AMAdminConstants.ATTR_USER_PASSWORD};  try {    logEvent("ATTEMPT_MODIFY_IDENTITY_ATTRIBUTE_VALUE",params);    AMIdentity amid=IdUtils.getIdentity(getUserSSOToken(),userId);    Map map=new HashMap(2);    Set set=new HashSet(2);    set.add(password);    map.put(AMAdminConstants.ATTR_USER_PASSWORD,set);    amid.setAttributes(map);    amid.store();    logEvent("SUCCEED_MODIFY_IDENTITY_ATTRIBUTE_VALUE",params);  } catch (  SSOException e) {    String strError=getErrorString(e);    String[] paramsEx={userId,AMAdminConstants.ATTR_USER_PASSWORD,strError};    logEvent("SSO_EXCEPTION_MODIFY_IDENTITY_ATTRIBUTE_VALUE",paramsEx);    throw new AMConsoleException(strError);  }catch (  IdRepoException e) {    String strError=getErrorString(e);    String[] paramsEx={userId,AMAdminConstants.ATTR_USER_PASSWORD,strError};    logEvent("IDM_EXCEPTION_MODIFY_IDENTITY_ATTRIBUTE_VALUE",paramsEx);    if (e.getErrorCode().equals(IdRepoErrorCode.LDAP_EXCEPTION)) {      throw new AMConsoleException(e.getConstraintViolationDetails());    }    throw new AMConsoleException(strError);  }}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  fullyLock();  try {    s.defaultWriteObject();    for (Node<E> p=head.next; p != null; p=p.next)     s.writeObject(p.item);    s.writeObject(null);  }  finally {    fullyUnlock();  }}  }
class C{  private String validateAndGetAttributeValue(String value) throws SAML2Exception {  Document doc=XMLUtils.toDOMDocument(value,SAML2SDKUtils.debug);  if (doc == null) {    if (SAML2SDKUtils.debug.messageEnabled()) {      SAML2SDKUtils.debug.message("AttributeImpl." + "validateAttributeValue:" + " could not obtain AttributeValue element.");    }    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("errorObtainingElement"));  }  Element element=doc.getDocumentElement();  if (element == null) {    if (SAML2SDKUtils.debug.messageEnabled()) {      SAML2SDKUtils.debug.message("AttributeImpl." + "validateAttributeValue: Input is null.");    }    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("nullInput"));  }  String tag=element.getLocalName();  if ((tag == null) || (!tag.equals("AttributeValue"))) {    if (SAML2SDKUtils.debug.messageEnabled()) {      SAML2SDKUtils.debug.message("AttributeImpl." + "validateAttributeValue: not AttributeValue.");    }    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("wrongInput"));  }  return XMLUtils.getChildrenValue(element);}  }
class C{  public StringBuffer format(long number,StringBuffer toAppendTo,FieldPosition status){  return format((double)number,toAppendTo,status);}  }
class C{  public AudioPermission(String name,String actions){  super(name,actions);}  }
class C{  public StreamTokenizer(Reader r){  this();  if (r == null) {    throw new NullPointerException();  }  reader=r;}  }
class C{  private boolean matchesNameForm(NameForm nameForm,AcceptRejectWarn structuralPolicy,Entry entry){  RDN rdn=entry.getName().rdn();  if (rdn != null) {    for (    AttributeType t : nameForm.getRequiredAttributes()) {      if (!rdn.hasAttributeType(t) && structuralPolicy == AcceptRejectWarn.REJECT) {        return false;      }    }    for (    AVA ava : rdn) {      AttributeType t=ava.getAttributeType();      if (!nameForm.isRequiredOrOptional(t) && structuralPolicy == AcceptRejectWarn.REJECT) {        return false;      }    }  }  return true;}  }
class C{  public static <T>T findResourceByName(Iterable<HasMetadata> entities,Class<T> clazz,String name){  if (entities != null) {    for (    HasMetadata entity : entities) {      if (clazz.isInstance(entity) && Objects.equals(name,getName(entity))) {        return clazz.cast(entity);      }    }  }  return null;}  }
class C{  public void addPrivilege(DelegationPrivilege privilege) throws DelegationException {  if (debug.messageEnabled()) {    debug.message("privilege=" + privilege);  }  String name=privilege.getName();  Set subjects=privilege.getSubjects();  validateSupportedSubjectTypes(subjects);  DelegationPrivilege dp=new DelegationPrivilege(name,subjects,orgName);  privilege=dp;  if (pluginInstance != null) {    try {      pluginInstance.addPrivilege(token,orgName,privilege);    } catch (    SSOException se) {      throw new DelegationException(se);    }  } else {    throw new DelegationException(ResBundleUtils.rbName,"no_plugin_specified",null,null);  }}  }
class C{  public static SettingsFragment newInstance(String param1,String param2){  SettingsFragment fragment=new SettingsFragment();  Bundle args=new Bundle();  args.putString(ARG_PARAM1,param1);  args.putString(ARG_PARAM2,param2);  fragment.setArguments(args);  return fragment;}  }
class C{  public void trace(Object message){  log(Level.FINEST,String.valueOf(message),null);}  }
class C{  public void updateUI(){  setUI((TextUI)UIManager.getUI(this));  invalidate();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  NodeList childList;  Node childNode;  Node clonedNode;  Node lastChildNode;  String childValue;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("salary");  childNode=elementList.item(1);  clonedNode=childNode.cloneNode(true);  lastChildNode=clonedNode.getLastChild();  childValue=lastChildNode.getNodeValue();  assertEquals("nodeCloneTrueCopyTextAssert1","35,000",childValue);}  }
class C{  private void nextStream() throws IOException {  if (in != null) {    in.close();  }  if (e.hasMoreElements()) {    in=e.nextElement();    if (in == null) {      throw new NullPointerException("element is null");    }  } else {    in=null;  }}  }
class C{  public SQLNonTransientConnectionException(String reason,String sqlState,Throwable cause){  super(reason,sqlState,cause);}  }
class C{  public boolean equals(Object anObject){  return m_str.equals(anObject);}  }
class C{  public synchronized void addObserver(Observer o){  if (o == null)   throw new NullPointerException();  if (!obs.contains(o)) {    obs.addElement(o);  }}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  removePageSessionAttribute(PROPERTY_ATTRIBUTE);  populateValues=true;  tablePopulated=false;  forwardTo();}  }
class C{  @Override public long end() throws IOException {  return 0;}  }
class C{  public byte[] writeByteArray(){  logger.config("Writing NullTerminatedString." + value);  byte[] data;  String charSetName=getTextEncodingCharSet();  try {    if (charSetName.equals(TextEncoding.CHARSET_UTF_16)) {      if (TagOptionSingleton.getInstance().isEncodeUTF16BomAsLittleEndian()) {        charSetName=TextEncoding.CHARSET_UTF_16_LE_ENCODING_FORMAT;        CharsetEncoder encoder=Charset.forName(charSetName).newEncoder();        encoder.onMalformedInput(CodingErrorAction.IGNORE);        encoder.onUnmappableCharacter(CodingErrorAction.IGNORE);        ByteBuffer bb=encoder.encode(CharBuffer.wrap('\ufeff' + (String)value + '\0'));        data=new byte[bb.limit()];        bb.get(data,0,bb.limit());      } else {        charSetName=TextEncoding.CHARSET_UTF_16_BE_ENCODING_FORMAT;        CharsetEncoder encoder=Charset.forName(charSetName).newEncoder();        encoder.onMalformedInput(CodingErrorAction.IGNORE);        encoder.onUnmappableCharacter(CodingErrorAction.IGNORE);        ByteBuffer bb=encoder.encode(CharBuffer.wrap('\ufeff' + (String)value + '\0'));        data=new byte[bb.limit()];        bb.get(data,0,bb.limit());      }    } else {      CharsetEncoder encoder=Charset.forName(charSetName).newEncoder();      encoder.onMalformedInput(CodingErrorAction.IGNORE);      encoder.onUnmappableCharacter(CodingErrorAction.IGNORE);      ByteBuffer bb=encoder.encode(CharBuffer.wrap((String)value + '\0'));      data=new byte[bb.limit()];      bb.get(data,0,bb.limit());    }  } catch (  CharacterCodingException ce) {    logger.severe(ce.getMessage() + ":" + charSetName+ ":"+ value);    throw new RuntimeException(ce);  }  setSize(data.length);  return data;}  }
class C{  public void cancelCellEditing(){  realEditor.cancelCellEditing();  cleanupAfterEditing();}  }
class C{  private void initXMLTree() throws Exception {  updateFilteredTokens();  ArrayList elements=getElements(getFilteredTokens());  if (elements.size() > 1) {    throw new Exception("More than one root elements encountered");  }  setRootElement((XMLElement)elements.get(0));}  }
class C{  public void handleTblProviderResourceIdMapperButtonDeleteRequest(RequestInvocationEvent event) throws ModelControlException {  setSubmitCycle(true);  CCActionTable table=(CCActionTable)getChild(AMAdminConstants.DISCOVERY_SERVICE_PROVIDER_RESOURCE_ID_MAPPER);  table.restoreStateData();  CCActionTableModel tblModel=(CCActionTableModel)propertySheetModel.getModel(AMAdminConstants.DISCOVERY_SERVICE_PROVIDER_RESOURCE_ID_MAPPER);  Integer[] selected=tblModel.getSelectedRows();  if ((selected != null) && (selected.length > 0)) {    OrderedSet tblValues=(OrderedSet)getPageSessionAttribute(AMAdminConstants.DISCOVERY_SERVICE_PROVIDER_RESOURCE_ID_MAPPER);    tblValues.removeAll(selected);    populateProviderResourceIdMapperTable(tblValues);  }  forwardTo();}  }
class C{  private MachineInfo(){}  }
class C{  public void removeService(String name){  entries.remove(name);  ContextService service=null;synchronized (services) {    service=services.remove(name);  }  if (service != null) {    support.firePropertyChange("service",service,null);    service.setNamingResources(null);  }}  }
class C{  public boolean isResult(){  return result;}  }
class C{  public synchronized int available() throws IOException {  if (in < 0)   return 0; else   if (in == out)   return buffer.length; else   if (in > out)   return in - out; else   return in + buffer.length - out;}  }
class C{  private static LocalizableMessage createMessage(ManagedObject<?> partialManagedObject,Collection<PropertyException> causes){  Reject.ifNull(causes);  Reject.ifFalse(!causes.isEmpty(),"causes should not be empty");  ManagedObjectDefinition<?,?> d=partialManagedObject.getManagedObjectDefinition();  if (causes.size() == 1) {    return ERR_MANAGED_OBJECT_DECODING_EXCEPTION_SINGLE.get(d.getUserFriendlyName(),causes.iterator().next().getMessageObject());  } else {    LocalizableMessageBuilder builder=new LocalizableMessageBuilder();    boolean isFirst=true;    for (    PropertyException cause : causes) {      if (!isFirst) {        builder.append("; ");      }      builder.append(cause.getMessageObject());      isFirst=false;    }    return ERR_MANAGED_OBJECT_DECODING_EXCEPTION_PLURAL.get(d.getUserFriendlyName(),builder.toMessage());  }}  }
class C{  @Override public Foo removeByUUID_G(String uuid,long groupId) throws NoSuchFooException {  Foo foo=findByUUID_G(uuid,groupId);  return remove(foo);}  }
class C{  public static int calculateR(int baseR,int level){switch (level) {case 0:    return 238;case 1:  return baseR;case 2:return (int)(baseR * (9 + 46 + 15) / (37f + 9 + 46+ 15));case 3:return (int)(baseR * (46 + 15) / (37f + 9 + 46+ 15));case 4:return (int)(baseR * (15) / (37f + 9 + 46+ 15));default :return 238;}}  }
class C{  public boolean isDefaultValueMutable(Field field){  TypeRef type=field.getType();  if (type.getCardinality() == Cardinality.REPEATED) {    return true;  }switch (type.getKind()) {case TYPE_MESSAGE:case TYPE_ENUM:    return true;default :  return false;}}  }
class C{  private static boolean isJRE11(){  try {    Class c=Class.forName("java.security.AccessController");    return false;  } catch (  Exception ex) {  }  return true;}  }
class C{  public void test_DSAKeyPairGenerator02(){  int[] invalidLen={-1,0,511,513,650,1023,1025};  DSAParams dsaParams=new DSAParameterSpec(p,q,g);  SecureRandom random=null;  MyDSA dsa=new MyDSA(null);  try {    random=SecureRandom.getInstance("SHA1PRNG");  } catch (  Exception e) {    fail("Unexpected exception for SecureRandom: " + e);  }  try {    dsa.initialize(520,false,random);    fail("InvalidParameterException was not thrown");  } catch (  InvalidParameterException ipe) {    String str=ipe.getMessage();    if (!str.equals("there are not precomputed parameters")) {      fail("Incorrect exception's message: " + str);    }  }catch (  Exception e) {    fail(e + " was thrown instead of InvalidParameterException");  }  for (int i=0; i < invalidLen.length; i++) {    try {      dsa.initialize(invalidLen[i],true,random);      fail("InvalidParameterException was not thrown");    } catch (    InvalidParameterException ipe) {      String str=ipe.getMessage();      if (!str.equals("Incorrect modlen")) {        fail("Incorrect exception's message: " + str);      }    }catch (    Exception e) {      fail(e + " was thrown instead of InvalidParameterException");    }  }  dsa=new MyDSA(dsaParams);  try {    dsa.initialize(520,true,random);  } catch (  Exception e) {    fail(e + " was thrown for subcase 1");  }  try {    dsa.initialize(520,false,random);  } catch (  Exception e) {    fail(e + " was thrown for subcase 1");  }}  }
class C{  public static long countSubstr(final String value,final String subStr,final boolean caseSensitive,boolean allowOverlapping){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  return countSubstr(caseSensitive ? value : value.toLowerCase(),caseSensitive ? subStr : subStr.toLowerCase(),allowOverlapping,0L);}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj instanceof Year) {    return year == ((Year)obj).year;  }  return false;}  }
class C{  public void startup(){  try {    (new LoginLogoutMapping()).init(servletct);  } catch (  Exception ex) {  }}  }
class C{  @Override public void await(){  if (port == -2) {    return;  }  if (port == -1) {    try {      awaitThread=Thread.currentThread();      while (!stopAwait) {        try {          Thread.sleep(10000);        } catch (        InterruptedException ex) {        }      }    }  finally {      awaitThread=null;    }    return;  }  try {    awaitSocket=new ServerSocket(port,1,InetAddress.getByName(address));  } catch (  IOException e) {    log.error("StandardServer.await: create[" + address + ":"+ port+ "]: ",e);    return;  }  try {    awaitThread=Thread.currentThread();    while (!stopAwait) {      ServerSocket serverSocket=awaitSocket;      if (serverSocket == null) {        break;      }      Socket socket=null;      StringBuilder command=new StringBuilder();      try {        InputStream stream;        long acceptStartTime=System.currentTimeMillis();        try {          socket=serverSocket.accept();          socket.setSoTimeout(10 * 1000);          stream=socket.getInputStream();        } catch (        SocketTimeoutException ste) {          log.warn(sm.getString("standardServer.accept.timeout",Long.valueOf(System.currentTimeMillis() - acceptStartTime)),ste);          continue;        }catch (        AccessControlException ace) {          log.warn("StandardServer.accept security exception: " + ace.getMessage(),ace);          continue;        }catch (        IOException e) {          if (stopAwait) {            break;          }          log.error("StandardServer.await: accept: ",e);          break;        }        int expected=1024;        while (expected < shutdown.length()) {          if (random == null)           random=new Random();          expected+=(random.nextInt() % 1024);        }        while (expected > 0) {          int ch=-1;          try {            ch=stream.read();          } catch (          IOException e) {            log.warn("StandardServer.await: read: ",e);            ch=-1;          }          if (ch < 32 || ch == 127) {            break;          }          command.append((char)ch);          expected--;        }      }  finally {        try {          if (socket != null) {            socket.close();          }        } catch (        IOException e) {        }      }      boolean match=command.toString().equals(shutdown);      if (match) {        log.info(sm.getString("standardServer.shutdownViaPort"));        break;      } else       log.warn("StandardServer.await: Invalid command '" + command.toString() + "' received");    }  }  finally {    ServerSocket serverSocket=awaitSocket;    awaitThread=null;    awaitSocket=null;    if (serverSocket != null) {      try {        serverSocket.close();      } catch (      IOException e) {      }    }  }}  }
class C{  public Set createOrganizations(Set organizations) throws AMException, SSOException {  Iterator iter=organizations.iterator();  Set orgs=new HashSet();  while (iter.hasNext()) {    String orgDN=AMNamingAttrManager.getNamingAttr(ORGANIZATION) + "=" + ((String)iter.next())+ ","+ super.entryDN;    AMOrganizationImpl orgImpl=new AMOrganizationImpl(super.token,orgDN);    orgImpl.create();    orgs.add(orgImpl);  }  return orgs;}  }
class C{  private void tryAllAddresses(String dstName,int dstPort,InetAddress localAddress,int localPort,boolean streaming) throws IOException {  InetAddress[] dstAddresses=InetAddress.getAllByName(dstName);  InetAddress dstAddress;  for (int i=0; i < dstAddresses.length - 1; i++) {    dstAddress=dstAddresses[i];    try {      checkDestination(dstAddress,dstPort);      startupSocket(dstAddress,dstPort,localAddress,localPort,streaming);      return;    } catch (    IOException ex) {    }  }  dstAddress=dstAddresses[dstAddresses.length - 1];  checkDestination(dstAddress,dstPort);  startupSocket(dstAddress,dstPort,localAddress,localPort,streaming);}  }
class C{  private static void urlEncode(String s,boolean isExtension,StringBuilder buffer){  if (s == null) {    return;  }  int length=s.length();  for (int i=0; i < length; i++) {    char c=s.charAt(i);    if (isAlpha(c) || isDigit(c)) {      buffer.append(c);      continue;    }    if (c == ',') {      if (isExtension) {        hexEncode(c,buffer);      } else {        buffer.append(c);      }      continue;    }switch (c) {case '-':case '.':case '_':case '~':case ':':case '/':case '#':case '[':case ']':case '@':case '!':case '$':case '&':case '\'':case '(':case ')':case '*':case '+':case ';':case '=':      buffer.append(c);    break;default :  hexEncode(c,buffer);break;}}}  }
class C{  public void init(boolean forSigning,CipherParameters parameters){  this.forSigning=forSigning;  AsymmetricKeyParameter k;  if (parameters instanceof ParametersWithRandom) {    k=(AsymmetricKeyParameter)((ParametersWithRandom)parameters).getParameters();  } else {    k=(AsymmetricKeyParameter)parameters;  }  if (forSigning && !k.isPrivate()) {    throw new IllegalArgumentException("signing requires private key");  }  if (!forSigning && k.isPrivate()) {    throw new IllegalArgumentException("verification requires public key");  }  reset();  rsaEngine.init(forSigning,parameters);}  }
class C{  public Rational(long nominator,long denominator){  mNumerator=nominator;  mDenominator=denominator;}  }
class C{  public static boolean isInstanceOf(Object bean,Class<?> targetType){  return Introspector.isSubclass(bean.getClass(),targetType);}  }
class C{  @Override public void showProgress(){}  }
class C{  public void addBitmapToCache(String data,BitmapDrawable value){  if (data == null || value == null) {    return;  }  if (mMemoryCache != null) {    if (RecyclingBitmapDrawable.class.isInstance(value)) {      ((RecyclingBitmapDrawable)value).setIsCached(true);    }    mMemoryCache.put(data,value);  }}  }
class C{  public static NSObject parse(Document doc) throws PropertyListFormatException, IOException, ParseException {  DocumentType docType=doc.getDoctype();  if (docType == null) {    if (!doc.getDocumentElement().getNodeName().equals("plist")) {      throw new UnsupportedOperationException("The given XML document is not a property list.");    }  } else   if (!docType.getName().equals("plist")) {    throw new UnsupportedOperationException("The given XML document is not a property list.");  }  Node rootNode;  if (doc.getDocumentElement().getNodeName().equals("plist")) {    List<Node> rootNodes=filterElementNodes(doc.getDocumentElement().getChildNodes());    if (rootNodes.isEmpty()) {      throw new PropertyListFormatException("The given XML property list has no root element!");    } else     if (rootNodes.size() == 1) {      rootNode=rootNodes.get(0);    } else {      throw new PropertyListFormatException("The given XML property list has more than one root element!");    }  } else {    rootNode=doc.getDocumentElement();  }  return parseObject(rootNode);}  }
class C{  @Inject protected PolicyExport(Client client){  super(client);}  }
class C{  public static void checkArgument(boolean expression,Object errorMessage){  if (!expression) {    throw new IllegalArgumentException(String.valueOf(errorMessage));  }}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"GREEN_VIDEO\" ("+ "\"_id\" INTEGER PRIMARY KEY ,"+ "\"VIDEOLISTJSON\" TEXT,"+ "\"VIDEOTYPE\" TEXT);");}  }
class C{  @VisibleForTesting protected PersistentCookieModuleWrapper(ServletJwtSessionModule module,AMKeyProvider amKeyProvider){  super(module);  this.amKeyProvider=amKeyProvider;}  }
class C{  private Record createRecord(RecordProperties recordProperties) throws RecordException {  String debugDirectory;  if (isRecording()) {    debugDirectory=previousDebugDirectory;  } else {    debugDirectory=SystemPropertiesManager.get(DebugConstants.CONFIG_DEBUG_DIRECTORY);  }  String recordDirectory=debugDirectory + File.separator + RecordConstants.RECORD_FOLDER_NAME+ File.separator+ recordProperties.getIssueID()+ File.separator+ recordProperties.getReferenceID();  Record record=new Record(recordProperties,recordDirectory);  try {    createFolder(record.getFolderPath());    PrintWriter printWriterInfo=getPrintWriterForFile(record,RecordConstants.INFO_FILE_NAME);    JsonValue info=recordReport.infoReport(record);    try {      JSONObject json=new JSONObject(info.toString());      printWriterInfo.println(json.toString(4));    } catch (    JSONException e) {      debug.warning("Can't indent json '{}'",info,e);      printWriterInfo.println(info);    }    printWriterInfo.flush();    return record;  } catch (  IOException e) {    debug.error("Info report can't be initialized for issue '{}'",recordProperties,e);    throw new RecordException("Info report can't be initialized for issue '" + recordProperties.getIssueID() + "'",e);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_textsplittextthree.class,args);}  }
class C{  public void test_updateLjava_nio_ByteBuffer() throws Exception {  Signature sig=Signature.getInstance("DSA");  ByteBuffer buffer=ByteBuffer.allocate(10);  try {    sig.update(buffer);    fail();  } catch (  SignatureException expected) {  }  sig.initSign(getDsaKeys().getPrivate());  sig.update(buffer);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  Node textNode;  int nodeType;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("acronym");  testAddr=(Element)elementList.item(0);  textNode=testAddr.getFirstChild();  nodeType=(int)textNode.getNodeType();  assertEquals("nodeTextNodeTypeAssert1",3,nodeType);}  }
class C{  public static boolean twoVar_higherOrEqual(String a,String b){  int indexA=find_twoVar_priority(a);  if (indexA == -1) {    indexA=twoVar_priority.length;  }  int indexB=find_twoVar_priority(b);  if (indexB == -1) {    indexB=twoVar_priority.length;  }  return indexA <= indexB;}  }
class C{  public SRGLoader(Map<String,ClassNode> nodes){  super(nodes);  useNodes=true;}  }
class C{  public String scanName() throws IOException {  if (fCurrentEntity.position == fCurrentEntity.count) {    load(0,true);  }  int offset=fCurrentEntity.position;  if (XMLChar.isNameStart(fCurrentEntity.ch[offset])) {    if (++fCurrentEntity.position == fCurrentEntity.count) {      fCurrentEntity.ch[0]=fCurrentEntity.ch[offset];      offset=0;      if (load(1,false)) {        String symbol=fSymbolTable.addSymbol(fCurrentEntity.ch,0,1);        return symbol;      }    }    while (XMLChar.isName(fCurrentEntity.ch[fCurrentEntity.position])) {      if (++fCurrentEntity.position == fCurrentEntity.count) {        int length=fCurrentEntity.position - offset;        if (length == fBufferSize) {          char[] tmp=new char[fBufferSize * 2];          System.arraycopy(fCurrentEntity.ch,offset,tmp,0,length);          fCurrentEntity.ch=tmp;          fBufferSize*=2;        } else {          System.arraycopy(fCurrentEntity.ch,offset,fCurrentEntity.ch,0,length);        }        offset=0;        if (load(length,false)) {          break;        }      }    }  }  int length=fCurrentEntity.position - offset;  String symbol=null;  if (length > 0) {    symbol=fSymbolTable.addSymbol(fCurrentEntity.ch,offset,length);  }  return symbol;}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {  if (documentHandler != null)   documentHandler.ignorableWhitespace(ch,start,length);}  }
class C{  public static String attributeValuePairToXMLString(String name,Set values){  StringBuilder xmlSB=new StringBuilder(1000);  xmlSB.append('<').append(ATTRIBUTE_VALUE_PAIR).append('>').append(CRLF);  xmlSB.append('<').append(ATTRIBUTE).append(' ').append(ATTRIBUTE_NAME).append("=\"").append(XMLUtils.escapeSpecialCharacters(name)).append("\"/>").append(CRLF);  if (values != null) {    Iterator itr=values.iterator();    while (itr.hasNext()) {      String value=(String)itr.next();      xmlSB.append("<" + VALUE + ">");      xmlSB.append(XMLUtils.escapeSpecialCharacters(value));      xmlSB.append("</" + VALUE + ">"+ CRLF);    }  }  xmlSB.append("</" + ATTRIBUTE_VALUE_PAIR + ">"+ CRLF);  return xmlSB.toString();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  NamedNodeMap attributes;  Attr streetAttr;  String value;  Node removedNode;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testEmployee=elementList.item(2);  attributes=testEmployee.getAttributes();  assertNotNull("attributesNotNull",attributes);  removedNode=attributes.removeNamedItem("street");  streetAttr=(Attr)attributes.getNamedItem("street");  assertNotNull("streetAttrNotNull",streetAttr);  value=streetAttr.getValue();  assertEquals("namednodemapRemoveNamedItemGetValueAssert","Yes",value);}  }
class C{  public final void clear(){  int len=super.getLength();  super.clear();  if (MAX <= len) {    m_indexFromQName.clear();  }}  }
class C{  protected ReferenceUriSchemesSupported(int value){  super(value);}  }
class C{  protected KeyListener createKeyListener(){  return null;}  }
class C{  public CBORFactory(CBORFactory src,ObjectCodec oc){  super(src,oc);  _formatParserFeatures=src._formatParserFeatures;  _formatGeneratorFeatures=src._formatGeneratorFeatures;}  }
class C{  public static ReplicaId of(DN baseDN,int serverId){  return new ReplicaId(baseDN,serverId);}  }
class C{  public void addResourceResult(ResourceResult resourceResult,ServiceType serviceType) throws PolicyException {  addResourceResult(resourceResult,serviceType.getResourceNameComparator());}  }
class C{  private static int checkTypeVariableSignature(final String signature,int pos){  pos=checkChar('T',signature,pos);  pos=checkIdentifier(signature,pos);  return checkChar(';',signature,pos);}  }
class C{  public Option(AttributeSet attr){  this.attr=attr.copyAttributes();  selected=(attr.getAttribute(HTML.Attribute.SELECTED) != null);}  }
class C{  @Override protected boolean doAuthenticate(Request request,HttpServletResponse response) throws IOException {  if (checkForCachedAuthentication(request,response,false)) {    return true;  }  if (containerLog.isDebugEnabled()) {    containerLog.debug(" Looking up certificates");  }  X509Certificate certs[]=getRequestCertificates(request);  if ((certs == null) || (certs.length < 1)) {    if (containerLog.isDebugEnabled()) {      containerLog.debug("  No certificates included with this request");    }    response.sendError(HttpServletResponse.SC_UNAUTHORIZED,sm.getString("authenticator.certificates"));    return false;  }  Principal principal=context.getRealm().authenticate(certs);  if (principal == null) {    if (containerLog.isDebugEnabled()) {      containerLog.debug("  Realm.authenticate() returned false");    }    response.sendError(HttpServletResponse.SC_UNAUTHORIZED,sm.getString("authenticator.unauthorized"));    return false;  }  register(request,response,principal,HttpServletRequest.CLIENT_CERT_AUTH,null,null);  return true;}  }
class C{  public WebServiceException(){  super();}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,byte[] alphabet){  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=alphabet[(inBuff >>> 18)];  destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=alphabet[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  public boolean verifySignature(byte[] message,BigInteger r,BigInteger s){  DSAParameters params=key.getParameters();  BigInteger m=calculateE(params.getQ(),message);  BigInteger zero=BigInteger.valueOf(0);  if (zero.compareTo(r) >= 0 || params.getQ().compareTo(r) <= 0) {    return false;  }  if (zero.compareTo(s) >= 0 || params.getQ().compareTo(s) <= 0) {    return false;  }  BigInteger w=s.modInverse(params.getQ());  BigInteger u1=m.multiply(w).mod(params.getQ());  BigInteger u2=r.multiply(w).mod(params.getQ());  u1=params.getG().modPow(u1,params.getP());  u2=((DSAPublicKeyParameters)key).getY().modPow(u2,params.getP());  BigInteger v=u1.multiply(u2).mod(params.getP()).mod(params.getQ());  return v.equals(r);}  }
class C{  public static Builder createBuilder(AbstractManagedObjectDefinition<?,?> d,String propertyName){  return new Builder(d,propertyName);}  }
class C{  void resetGenerationId(final DN baseDN) throws ChangelogException {synchronized (domainsLock) {    clearGenerationId(baseDN);    final String domainId=domains.get(baseDN);    if (domainId == null) {      return;    }    final File generationIdPath=getGenerationIdPath(domainId,NO_GENERATION_ID);    ensureGenerationIdFileExists(generationIdPath);    changelogState.setDomainGenerationId(baseDN,NO_GENERATION_ID);  }}  }
class C{  public void testToBigIntegerNeg1(){  String a="-123809648392384754573567356745735.63567890295784902768787678287E+21";  BigInteger bNumber=new BigInteger("-123809648392384754573567356745735635678902957849027687");  BigDecimal aNumber=new BigDecimal(a);  BigInteger result=aNumber.toBigInteger();  assertTrue("incorrect value",result.equals(bNumber));}  }
class C{  public static void convertPointFromScreen(Point p,Component c){  Rectangle b;  int x, y;  do {    if (c instanceof JComponent) {      x=c.getX();      y=c.getY();    } else     if (c instanceof java.applet.Applet || c instanceof java.awt.Window) {      try {        Point pp=c.getLocationOnScreen();        x=pp.x;        y=pp.y;      } catch (      IllegalComponentStateException icse) {        x=c.getX();        y=c.getY();      }    } else {      x=c.getX();      y=c.getY();    }    p.x-=x;    p.y-=y;    if (c instanceof java.awt.Window || c instanceof java.applet.Applet)     break;    c=c.getParent();  } while (c != null);}  }
class C{  public static <V>int distinctList(List<V> sourceList){  if (isEmpty(sourceList)) {    return 0;  }  int sourceCount=sourceList.size();  int sourceListSize=sourceList.size();  for (int i=0; i < sourceListSize; i++) {    for (int j=(i + 1); j < sourceListSize; j++) {      if (sourceList.get(i).equals(sourceList.get(j))) {        sourceList.remove(j);        sourceListSize=sourceList.size();        j--;      }    }  }  return sourceCount - sourceList.size();}  }
class C{  public boolean aggregate(long timestamp,int aggregationWindow,String ruleActionId,String aggregationKey,Object aggregationValue) throws AggregationRejectException {  String key=createMapKey(timestamp,aggregationWindow,ruleActionId,aggregationKey);  Aggregator aggregator=getAggregationMap().get(key);  if (aggregator == null) {    aggregator=template.getInstance();    getAggregationMap().put(key,aggregator);    getFlushMap().put(key,template.getInstance());  }  if (aggregator.disableLimitChecks() || (aggregator.size() < aggregator.getHardLimit())) {    if (aggregator.add(aggregationValue)) {      return getFlushMap().get(key).add(aggregationValue);    } else {      return false;    }  } else {    throw AggregationRejectException;  }}  }
class C{  public KeyInfoConfirmationData createKeyInfoConfirmationData(String xml) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.KEYINFO_CONFIRMATION_DATA,xml);  if (obj == null) {    return new KeyInfoConfirmationDataImpl(xml);  } else {    return (KeyInfoConfirmationData)obj;  }}  }
class C{  public boolean checkMinDegree(int value){  if (value >= ROLE_CARDINALITY_INFINITY && (minDegree == ROLE_CARDINALITY_INFINITY || value >= minDegree)) {    return true;  } else {    return false;  }}  }
class C{  private NSObject parseDateString(){  String numericalString=parseString();  if (numericalString.length() > 4 && numericalString.charAt(4) == DATE_DATE_FIELD_DELIMITER) {    try {      return new NSDate(numericalString);    } catch (    Exception ex) {    }  }  return new NSString(numericalString);}  }
class C{  public boolean beginResetPageDisplay(ChildDisplayEvent event){  return isPWResetEnabled();}  }
class C{  public static String toTitleCase(String str){  if (str.length() == 0)   return str; else {    return Character.toUpperCase(str.charAt(0)) + str.substring(1).toLowerCase();  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlenc.EncryptionMethodType.OAEPparams createEncryptionMethodTypeOAEPparams(byte[] value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlenc.impl.EncryptionMethodTypeImpl.OAEPparamsImpl(value);}  }
class C{  public void hilight_selected_button(){  toolbar_panel.hilight_selected_button();}  }
class C{  public XByteBuffer extractDataPackage(boolean clearFromBuffer){  int psize=countPackages(true);  if (psize == 0) {    throw new java.lang.IllegalStateException(sm.getString("xByteBuffer.no.package"));  }  int size=toInt(buf,START_DATA.length);  XByteBuffer xbuf=BufferPool.getBufferPool().getBuffer(size,false);  xbuf.setLength(size);  System.arraycopy(buf,START_DATA.length + 4,xbuf.getBytesDirect(),0,size);  if (clearFromBuffer) {    int totalsize=START_DATA.length + 4 + size+ END_DATA.length;    bufSize=bufSize - totalsize;    System.arraycopy(buf,totalsize,buf,0,bufSize);  }  return xbuf;}  }
class C{  public NASPortAttribute(byte[] octets){  super(octets);  port=OctetUtils.toIntVal(octets);}  }
class C{  public void caretUpdate(CaretEvent e){  int dot=e.getDot();  int mark=e.getMark();  if (caretPos != dot) {    firePropertyChange(ACCESSIBLE_CARET_PROPERTY,new Integer(caretPos),new Integer(dot));    caretPos=dot;    try {      oldLocationOnScreen=getLocationOnScreen();    } catch (    IllegalComponentStateException iae) {    }  }  if (mark != dot) {    firePropertyChange(ACCESSIBLE_SELECTION_PROPERTY,null,getSelectedText());  }}  }
class C{  public void registerModifiedIndex(AbstractIndexDescriptor index){  modifiedIndexes.add(index);  indexModified(index);}  }
class C{  public boolean hasColumn(ResultSetMetaData rsMetaData,String columnName) throws SQLException {  for (int colPos=1; colPos <= rsMetaData.getColumnCount(); colPos++) {    if (columnName.equalsIgnoreCase(rsMetaData.getColumnName(colPos))) {      return true;    }  }  return false;}  }
class C{  public void startProduction(ImageConsumer ic){  if (proxies == null) {    proxies=new Hashtable();  }  ImageFilter imgf=(ImageFilter)proxies.get(ic);  if (imgf == null) {    imgf=filter.getFilterInstance(ic);    proxies.put(ic,imgf);  }  src.startProduction(imgf);}  }
class C{  public void enableVertexAttribute(String name){  int location=fetchAttributeLocation(name);  if (location == -1)   return;  GLES20.glEnableVertexAttribArray(location);}  }
class C{  public final void testIsStatePreserved1(){  RSAOtherPrimeInfo[] opi1=opi.clone();  RSAMultiPrimePrivateCrtKeySpec ks=new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,opi1);  opi1[2]=new RSAOtherPrimeInfo(BigInteger.ZERO,BigInteger.ZERO,BigInteger.ZERO);  assertTrue(checkOtherPrimeInfo(ks.getOtherPrimeInfo()));}  }
class C{  public DeleteOperation processDelete(ByteString rawEntryDN,List<Control> controls){  DeleteOperationBasis deleteOperation=new DeleteOperationBasis(this,nextOperationID(),nextMessageID(),controls,rawEntryDN);  deleteOperation.setInternalOperation(true);  deleteOperation.run();  return deleteOperation;}  }
class C{  @Override public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_SHOW_ENTITLEMENT_SVC",null);  try {    ServiceSchemaManager ssm=new ServiceSchemaManager(EntitlementService.SERVICE_NAME,getAdminSSOToken());    ServiceSchema gss=ssm.getGlobalSchema();    Map<String,Set<String>> defaults=gss.getAttributeDefaults();    getOutputWriter().printlnMessage(FormatUtils.printAttributeValues(getResourceString("get-attr-values-of-entitlement-service"),defaults));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_SHOW_ENTITLEMENT_SVC",null);  } catch (  SMSException e) {    String[] paramExs={e.getMessage()};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"FAILED_SHOW_ENTITLEMENT_SVC",paramExs);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] paramExs={e.getMessage()};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"FAILED_SHOW_ENTITLEMENT_SVC",paramExs);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public boolean isInheritedFromDNCollective(){  return this.isInheritedFromDNCollective;}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthTextPaneUI();}  }
class C{  public int compare(File file1,File file2){  return delegate.compare(file2,file1);}  }
class C{  public void paint(Graphics g,Shape allocation){  Rectangle a=(Rectangle)allocation;  painter.paint(g,a.x,a.y,a.width,a.height,this);  super.paint(g,a);}  }
class C{  private void assertNoModifier(Collection<Modifier> modifiers) throws SyntaxException {  if (!modifiers.isEmpty()) {    if (modifiers.size() != 1 || !modifiers.contains(new Modifier(Modifier.Available.DEF,LineCol.SYNTHETIC))) {      err.SyntaxException("JavaScript don't have modifiers",modifiers.iterator().next().line_col());    }  }}  }
class C{  private StringPrepProfile(){}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getElementById01.class,args);}  }
class C{  public int hashCode(){  return (key.hashCode());}  }
class C{  boolean isLiteral(Map attrs){  if (!super.isLiteral(attrs)) {    if (attrs == null) {      return false;    }    int size=attrs.size();    if (attrs.get(NumberFormat.Field.GROUPING_SEPARATOR) != null) {      size--;      if (attrs.get(NumberFormat.Field.INTEGER) != null) {        size--;      }    }    if (attrs.get(NumberFormat.Field.EXPONENT_SYMBOL) != null) {      size--;    }    if (attrs.get(NumberFormat.Field.PERCENT) != null) {      size--;    }    if (attrs.get(NumberFormat.Field.PERMILLE) != null) {      size--;    }    if (attrs.get(NumberFormat.Field.CURRENCY) != null) {      size--;    }    if (attrs.get(NumberFormat.Field.SIGN) != null) {      size--;    }    return size == 0;  }  return true;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  IOutput outputWriter=getOutputWriter();  try {    OrganizationConfigManager ocm=new OrganizationConfigManager(adminSSOToken,realm);    Set assignedServices=ocm.getAssignedServices();    AMIdentityRepository amir=new AMIdentityRepository(adminSSOToken,realm);    AMIdentity ai=amir.getRealmIdentity();    Set dynAssignedServices=ai.getAssignedServices();    String[] params={realm,serviceName};    boolean unassigned=false;    if (assignedServices.contains(serviceName)) {      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_UNASSIGN_SERVICE_FROM_REALM",params);      ocm.unassignService(serviceName);      outputWriter.printlnMessage(MessageFormat.format(getResourceString("unassign-service-from-realm-succeed"),(Object[])params));      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_UNASSIGN_SERVICE_FROM_REALM",params);      unassigned=true;    }    if (dynAssignedServices.contains(serviceName)) {      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_UNASSIGN_SERVICE_FROM_REALM",params);      ai.unassignService(serviceName);      outputWriter.printlnMessage(MessageFormat.format(getResourceString("unassign-service-from-realm-succeed"),(Object[])params));      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_UNASSIGN_SERVICE_FROM_REALM",params);      unassigned=true;    }    if (!unassigned) {      outputWriter.printlnMessage(MessageFormat.format(getResourceString("unassign-service-from-realm-service-not-assigned"),(Object[])params));    }  } catch (  SSOException e) {    String[] args={realm,e.getMessage()};    debugError("RealmUnassignService.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_UNASSIGN_SERVICE_FROM_REALM",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  IdRepoException e) {    String[] args={realm,e.getMessage()};    debugError("RealmUnassignService.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_UNASSIGN_SERVICE_FROM_REALM",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={realm,e.getMessage()};    debugError("RealmUnassignService.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_UNASSIGN_SERVICE_FROM_REALM",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node oldChild;  Node child;  String childName;  int length;  Node removedChild;  String removedName;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  oldChild=childList.item(0);  removedChild=employeeNode.removeChild(oldChild);  removedName=removedChild.getNodeName();  child=childList.item(0);  childName=child.getNodeName();  length=(int)childList.getLength();  if (equals(5,length)) {    assertEquals("removedNameNoWhitespace","employeeId",removedName);    assertEquals("childNameNoWhitespace","name",childName);  } else {    assertEquals("removedName","#text",removedName);    assertEquals("childName","employeeId",childName);    assertEquals("length",12,length);  }}  }
class C{  public Robot() throws AWTException {  if (GraphicsEnvironment.isHeadless()) {    throw new AWTException("headless environment");  }  init(GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice());}  }
class C{  public boolean containsJwt(String tokenId){  return containsJwt(new SessionID(tokenId));}  }
class C{  public int receive(byte[] buffer,int offset,int count){  return receive(buffer,offset,count,Integer.MAX_VALUE);}  }
class C{  @Override public ConnectionChangeRecordWriter writeChangeRecord(final AddRequest change) throws LdapException {  Reject.ifNull(change);  connection.add(change);  return this;}  }
class C{  public final void append(String value){  if (value == null)   return;  int strlen=value.length();  if (0 == strlen)   return;  int copyfrom=0;  char[] chunk=m_array[m_lastChunk];  int available=m_chunkSize - m_firstFree;  while (strlen > 0) {    if (available > strlen)     available=strlen;    value.getChars(copyfrom,copyfrom + available,m_array[m_lastChunk],m_firstFree);    strlen-=available;    copyfrom+=available;    if (strlen > 0) {      int i=m_array.length;      if (m_lastChunk + 1 == i) {        char[][] newarray=new char[i + 16][];        System.arraycopy(m_array,0,newarray,0,i);        m_array=newarray;      }      chunk=m_array[++m_lastChunk];      if (chunk == null) {        if (m_lastChunk == 1 << m_rebundleBits && m_chunkBits < m_maxChunkBits) {          m_innerFSB=new FastStringBuffer(this);        }        chunk=m_array[m_lastChunk]=new char[m_chunkSize];      }      available=m_chunkSize;      m_firstFree=0;    }  }  m_firstFree+=available;}  }
class C{  public ISPermission(CodeSource codesource){  super("ISPermission");  if (debug.messageEnabled()) {    debug.message("ISPermission(codesource) constructor " + "called ");  }  this.codesource=codesource;}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    System.out.println("shootme: got an Invite sending Trying");    Response response=messageFactory.createResponse(Response.RINGING,request);    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      st=sipProvider.getNewServerTransaction(request);    }    dialog=st.getDialog();    st.sendResponse(response);    this.okResponse=messageFactory.createResponse(Response.OK,request);    Address address=addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    ContactHeader contactHeader=headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    ToHeader toHeader=(ToHeader)okResponse.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    okResponse.addHeader(contactHeader);    this.inviteTid=st;    this.inviteRequest=request;    new Timer().schedule(new MyTimerTask(this),1000);  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public FrameBodyTORY(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  private static int checkFormalTypeParameter(final String signature,int pos){  pos=checkIdentifier(signature,pos);  pos=checkChar(':',signature,pos);  if ("L[T".indexOf(getChar(signature,pos)) != -1) {    pos=checkFieldTypeSignature(signature,pos);  }  while (getChar(signature,pos) == ':') {    pos=checkFieldTypeSignature(signature,pos + 1);  }  return pos;}  }
class C{  public boolean isSecureProcessing(){  return m_isSecureProcessing;}  }
class C{  protected MouseListener createMouseListener(){  return getHandler();}  }
class C{  public boolean isHttpOnly(){  return httpOnly;}  }
class C{  static void usePasswordExpiringResponseControl(Connection connection) throws LdapException {  if (isSupported(PasswordExpiringResponseControl.OID)) {    final String dn="uid=bjensen,ou=People,dc=example,dc=com";    final char[] pwd="hifalutin".toCharArray();    final BindResult result=connection.bind(dn,pwd);    try {      final PasswordExpiringResponseControl control=result.getControl(PasswordExpiringResponseControl.DECODER,new DecodeOptions());      if (control != null && control.hasValue()) {        System.out.println("Password for " + dn + " expires in "+ control.getSecondsUntilExpiration()+ " seconds.");      }    } catch (    final DecodeException de) {      System.err.println(de.getMessage());      System.exit(ResultCode.CLIENT_SIDE_DECODING_ERROR.intValue());    }  } else {    System.err.println("PasswordExpiringResponseControl not supported");  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementsetattributenodens02.class,args);}  }
class C{  public static void main(String argv[]){  System.out.println(getVersion());}  }
class C{  public boolean isChecked(){  return isChecked;}  }
class C{  public void beginDisplay(DisplayEvent event) throws ModelControlException {  super.beginDisplay(event);  PWResetUserValidationModel model=(PWResetUserValidationModel)getModel();  if (model.isValidRealm()) {    String orgDN=(String)getPageSessionAttribute(ORG_DN);    String userAttr=model.getUserAttr(orgDN);    HiddenField hf=(HiddenField)getChild(FLD_USER_ATTR);    hf.setValue(userAttr);    setDisplayFieldValue(USER_VALIDATION_TITLE,model.getUserValidateTitleString());    setDisplayFieldValue(LBL_USER_ATTR,model.getLocalizedStrForAttr(userAttr));    setDisplayFieldValue(NEXT_BUTTON,model.getNextBtnLabel());    String userAttrValue=(String)getPageSessionAttribute(USER_ATTR_VALUE);    if (userAttrValue != null && userAttrValue.length() > 0) {      setDisplayFieldValue(TF_USER_ATTR,userAttrValue);      removePageSessionAttribute(USER_ATTR_VALUE);    }  }}  }
class C{  public SMSException(Throwable t,String errorCode){  super(t);  rootCause=t;  this.errorCode=errorCode;  this.message=getL10NMessage(java.util.Locale.ENGLISH);  exceptionMapper();}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.InitiatorEncryptionTokenElement createInitiatorEncryptionTokenElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.InitiatorEncryptionTokenElementImpl();}  }
class C{  @After public void afterTest(){}  }
class C{  static URL which(Class clazz,ClassLoader loader){  String classnameAsResource=clazz.getName().replace('.','/') + ".class";  if (loader == null) {    loader=getSystemClassLoader();  }  return loader.getResource(classnameAsResource);}  }
class C{  public com.sun.identity.liberty.ws.disco.jaxb.ExtensionType createExtensionType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.disco.jaxb.impl.ExtensionTypeImpl();}  }
class C{  public void list(int how_many,org.omg.CosNaming.BindingListHolder bl,org.omg.CosNaming.BindingIteratorHolder bi){  org.omg.CORBA.portable.InputStream $in=null;  try {    org.omg.CORBA.portable.OutputStream $out=_request("list",true);    $out.write_ulong(how_many);    $in=_invoke($out);    bl.value=org.omg.CosNaming.BindingListHelper.read($in);    bi.value=org.omg.CosNaming.BindingIteratorHelper.read($in);    return;  } catch (  org.omg.CORBA.portable.ApplicationException $ex) {    $in=$ex.getInputStream();    String _id=$ex.getId();    throw new org.omg.CORBA.MARSHAL(_id);  }catch (  org.omg.CORBA.portable.RemarshalException $rm) {    list(how_many,bl,bi);  } finally {    _releaseReply($in);  }}  }
class C{  public void addSubject(String name,Subject subject) throws NameAlreadyExistsException, InvalidNameException {  users.addSubject(name,subject,false);}  }
class C{  public AbstractScriptEngine(){  context=new SimpleScriptContext();}  }
class C{  public MyURLClassLoader(){  super(new URL[0]);}  }
class C{  public boolean isActive(){  return isAlive() && operation != null;}  }
class C{  public TaskEntry(Entry entry){  dn=entry.getName();  String p="ds-task-";  id=getSingleStringValue(entry,p + "id");  className=getSingleStringValue(entry,p + "class-name");  state=getSingleStringValue(entry,p + "state");  schedStart=getSingleStringValue(entry,p + "scheduled-start-time");  actStart=getSingleStringValue(entry,p + "actual-start-time");  compTime=getSingleStringValue(entry,p + "completion-time");  depends=getMultiStringValue(entry,p + "dependency-id");  depFailAct=getSingleStringValue(entry,p + "failed-dependency-action");  logs=getMultiStringValue(entry,p + "log-message");  notifyErr=getMultiStringValue(entry,p + "notify-on-error");  notifyComp=getMultiStringValue(entry,p + "notify-on-completion");  schedTab=getSingleStringValue(entry,"ds-recurring-task-schedule");  for (  AttributeType attrType : entry.getUserAttributes().keySet()) {    if (!hasAnyNameOrOID(attrType,supAttrNames)) {      LocalizableMessage attrTypeName=getAttributeDisplayName(attrType);      for (      Attribute attr : entry.getUserAttribute(attrType)) {        for (        ByteString av : attr) {          List<String> valueList=taskSpecificAttrValues.get(attrTypeName);          if (valueList == null) {            valueList=new ArrayList<>();            taskSpecificAttrValues.put(attrTypeName,valueList);          }          valueList.add(av.toString());        }      }    }  }  hashCode+=id.hashCode();  hashCode+=className.hashCode();  hashCode+=state.hashCode();  hashCode+=schedStart.hashCode();  hashCode+=actStart.hashCode();  hashCode+=compTime.hashCode();  hashCode+=depends.hashCode();  hashCode+=depFailAct.hashCode();  hashCode+=logs.hashCode();  hashCode+=notifyErr.hashCode();  hashCode+=notifyComp.hashCode();  hashCode+=schedTab.hashCode();  hashCode+=taskSpecificAttrValues.hashCode();}  }
class C{  public void reload(){  diagnostics.reload();}  }
class C{  public void close(){  finished=true;  IOUtils.closeQuietly(bufferedReader);  cachedLine=null;}  }
class C{  MultistepExprHolder unlink(MultistepExprHolder itemToRemove){  MultistepExprHolder first=this;  MultistepExprHolder next=this;  MultistepExprHolder prev=null;  while (null != next) {    if (next == itemToRemove) {      if (null == prev)       first=next.m_next; else       prev.m_next=next.m_next;      next.m_next=null;      return first;    }    prev=next;    next=next.m_next;  }  assertion(false,"unlink failed!!!");  return null;}  }
class C{  @Override public void close() throws IOException {  if (logger != null) {    logger.println("SSLSocket.close " + socket_was_closed);  }  if (!socket_was_closed) {    if (handshake_started) {      alertProtocol.alert(AlertProtocol.WARNING,AlertProtocol.CLOSE_NOTIFY);      try {        output.write(alertProtocol.wrap());      } catch (      IOException ex) {      }      alertProtocol.setProcessed();    }    shutdown();    closeTransportLayer();    socket_was_closed=true;  }}  }
class C{  public int available() throws IOException {  int temp=stream.available();  if ((frameLength != AudioSystem.NOT_SPECIFIED) && ((temp / frameSize) > (frameLength - framePos))) {    return (int)(frameLength - framePos) * frameSize;  } else {    return temp;  }}  }
class C{  public ABMCPersona(){  initialize();  ctrl=new CtrlABMCPersona();}  }
class C{  @Override public Entry mapCertificateToUser(Certificate[] certificateChain) throws DirectoryException {  if (certificateChain == null || certificateChain.length == 0) {    LocalizableMessage message=ERR_SEDCM_NO_PEER_CERTIFICATE.get();    throw new DirectoryException(ResultCode.INVALID_CREDENTIALS,message);  }  X509Certificate peerCertificate;  try {    peerCertificate=(X509Certificate)certificateChain[0];  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_SEDCM_PEER_CERT_NOT_X509.get(certificateChain[0].getType());    throw new DirectoryException(ResultCode.INVALID_CREDENTIALS,message);  }  X500Principal peerPrincipal=peerCertificate.getSubjectX500Principal();  DN subjectDN;  try {    subjectDN=DN.valueOf(peerPrincipal.getName(X500Principal.RFC2253));  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_SEDCM_CANNOT_DECODE_SUBJECT_AS_DN.get(peerPrincipal,getExceptionMessage(e));    throw new DirectoryException(ResultCode.INVALID_CREDENTIALS,message);  }  Entry userEntry;  try {    userEntry=DirectoryServer.getEntry(subjectDN);  } catch (  DirectoryException de) {    logger.traceException(de);    LocalizableMessage message=ERR_SEDCM_CANNOT_GET_ENTRY.get(subjectDN,de.getMessageObject());    throw new DirectoryException(ResultCode.INVALID_CREDENTIALS,message,de);  }catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_SEDCM_CANNOT_GET_ENTRY.get(subjectDN,getExceptionMessage(e));    throw new DirectoryException(ResultCode.INVALID_CREDENTIALS,message,e);  }  if (userEntry == null) {    LocalizableMessage message=ERR_SEDCM_NO_USER_FOR_DN.get(subjectDN);    throw new DirectoryException(ResultCode.INVALID_CREDENTIALS,message);  } else {    return userEntry;  }}  }
class C{  protected void serializeComment(Comment node) throws SAXException {  if ((fFeatures & COMMENTS) != 0) {    String data=node.getData();    if ((fFeatures & WELLFORMED) != 0) {      isCommentWellFormed(data);    }    if (fLexicalHandler != null) {      if (!applyFilter(node,NodeFilter.SHOW_COMMENT)) {        return;      }      fLexicalHandler.comment(data.toCharArray(),0,data.length());    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(importNode15.class,args);}  }
class C{  public void handleBtnSearchRequest(RequestInvocationEvent event){  SMProfileModel model=(SMProfileModel)getModel();  String serverName=(String)getPageSessionAttribute(SERVER_NAME);  model.setProfileServerName(serverName);  forwardTo();}  }
class C{  public int start(int group){  if (first < 0)   throw new IllegalStateException("No match available");  if (group < 0 || group > groupCount())   throw new IndexOutOfBoundsException("No group " + group);  return groups[group * 2];}  }
class C{  final boolean transferAfterCancelledWait(Node node){  if (compareAndSetWaitStatus(node,Node.CONDITION,0)) {    enq(node);    return true;  }  while (!isOnSyncQueue(node))   Thread.yield();  return false;}  }
class C{  public Oid(String strOid) throws GSSException {  try {    oid=new ObjectIdentifier(strOid);    derEncoding=null;  } catch (  Exception e) {    throw new GSSException(GSSException.FAILURE,"Improperly formatted Object Identifier String - " + strOid);  }}  }
class C{  public static int readSwappedUnsignedShort(InputStream input) throws IOException {  int value1=read(input);  int value2=read(input);  return (((value1 & 0xff) << 0) + ((value2 & 0xff) << 8));}  }
class C{  public void readFully(long position,byte[] buffer,int offset,int length) throws IOException {  checkStream();  IoUtils.readFully(input,position,buffer,offset,length);  if (length > 0) {    decrypt(position,buffer,offset,length);  }}  }
class C{  public FileWriter(File file) throws IOException {  super(new FileOutputStream(file));}  }
class C{  static public void assertNotSame(String message,Object expected,Object actual){  if (expected == actual)   failSame(message);}  }
class C{  static String dnToGuid(String dn){  return dn;}  }
class C{  public void convertToXml(OutputStream os,String charset) throws IOException {  out=new OutputStreamWriter(os,Charset.forName(charset));  if (rootTag != null) {    out.write("<" + rootTag + ">"+ System.lineSeparator());  }  PdfStructTreeRoot structTreeRoot=document.getStructTreeRoot();  if (structTreeRoot == null)   throw new PdfException(PdfException.DocumentDoesntContainStructTreeRoot);  inspectKids(structTreeRoot.getKids());  if (rootTag != null) {    out.write("</" + rootTag + ">");  }  out.flush();  out.close();}  }
class C{  public void registerConditionType(String name,Class<? extends EntitlementCondition> type){  register(name,conditions,type);}  }
class C{  public boolean isSharedWith(ResourceSetDescription resourceSet,String resourceUserId,String realm) throws InternalServerErrorException {  Subject subject=createSubject(resourceUserId,realm);  try {    Evaluator evaluator=umaProviderSettingsFactory.get(realm).getPolicyEvaluator(subject,resourceSet.getClientId().toLowerCase());    String sharedResourceName="uma://" + resourceSet.getId();    List<Entitlement> entitlements=evaluator.evaluate(realm,subject,sharedResourceName,null,false);    if (!entitlements.isEmpty() && !entitlements.iterator().next().getActionValues().isEmpty()) {      return true;    }  } catch (  EntitlementException|NotFoundException e) {    throw new InternalServerErrorException(e);  }  return false;}  }
class C{  public ServerWork(ServerSocket serverSocket,int responseCode,boolean needProxyAuthentication){  this.serverSocket=serverSocket;  this.responseCode=responseCode;  this.needProxyAuthentication=needProxyAuthentication;  this.actAsProxy=!(serverSocket instanceof SSLServerSocket);  if (!actAsProxy) {    ((SSLServerSocket)serverSocket).setNeedClientAuth(true);  }}  }
class C{  public void clearBut(TrayPreference... modules){  mProviderHelper.clearBut(modules);}  }
class C{  public com.sun.identity.liberty.ws.disco.jaxb.EmptyType createEmptyType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.disco.jaxb.impl.EmptyTypeImpl();}  }
class C{  public DERGeneralizedTime(String time){  this.time=Strings.toByteArray(time);  try {    this.getDate();  } catch (  ParseException e) {    throw new IllegalArgumentException("invalid date string: " + e.getMessage());  }}  }
class C{  public void testGcdSecondLonger(){  byte aBytes[]={-12,1,0,0,0,23,44,55,66};  byte bBytes[]={-15,24,123,56,-11,-112,-34,-98,8,10,12,14,25,125,-15,28,-127};  int aSign=1;  int bSign=1;  byte rBytes[]={7};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.gcd(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public static void write_scope(gui.varie.IndentFileWriter p_file,DsnParserInfo p_parser_info,freert.spectra.DsnIdentifier p_identifier_type,boolean p_reduced) throws java.io.IOException {  p_file.start_scope();  p_file.write("parser");  if (!p_reduced) {    p_file.new_line();    p_file.write("(string_quote ");    p_file.write(p_parser_info.string_quote);    p_file.write(")");    p_file.new_line();    p_file.write("(space_in_quoted_tokens on)");  }  if (p_parser_info.host_cad != null) {    p_file.new_line();    p_file.write("(host_cad ");    p_identifier_type.write(p_parser_info.host_cad,p_file);    p_file.write(")");  }  if (p_parser_info.host_version != null) {    p_file.new_line();    p_file.write("(host_version ");    p_identifier_type.write(p_parser_info.host_version,p_file);    p_file.write(")");  }  if (p_parser_info.constants != null) {    for (    String[] curr_constant : p_parser_info.constants) {      p_file.new_line();      p_file.write("(constant ");      for (int i=0; i < curr_constant.length; ++i) {        p_identifier_type.write(curr_constant[i],p_file);        p_file.write(" ");      }      p_file.write(")");    }  }  if (p_parser_info.write_resolution != null) {    p_file.new_line();    p_file.write("(write_resolution ");    p_file.write(p_parser_info.write_resolution.char_name.substring(0,1));    p_file.write(" ");    Integer positive_int=p_parser_info.write_resolution.positive_int;    p_file.write(positive_int.toString());    p_file.write(")");  }  if (!p_reduced) {    p_file.new_line();    p_file.write("(generated_by_freeroute)");  }  p_file.end_scope();}  }
class C{  public static boolean isFullyAuthenticated() throws IOException {  FullyAuthenticatedFaceletsTag authenticatedTag=new FullyAuthenticatedFaceletsTag();  return authenticatedTag.authorize();}  }
class C{  private boolean journalRebuildRequired(){  final int redundantOpCompactThreshold=2000;  return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.size();}  }
class C{  private static int parseUnsignedShort(final byte[] bytes,final int i){  return ((bytes[i] & 0xFF) << 8) | (bytes[i + 1] & 0xFF);}  }
class C{  @SuppressWarnings("unchecked") public void writeDouble(double x) throws SQLException {  attribs.add(Double.valueOf(x));}  }
class C{  protected File installGofabric8IfNotAvailable() throws MojoExecutionException {  File gofabric8=ProcessUtil.findExecutable(log,GOFABRIC8);  if (gofabric8 == null) {    validateFabric8Dir();    String fileName=GOFABRIC8;    if (Platform.windows.equals(getPlatform())) {      fileName+=".exe";    }    gofabric8=new File(fabric8BinDir,fileName);    if (!gofabric8.exists() || !gofabric8.isFile() || !gofabric8.canExecute()) {      downloadGoFabric8(gofabric8);    }    if (!ProcessUtil.folderIsOnPath(log,fabric8BinDir)) {      updateStartupScriptInstructions();    }  } else {    log.info("Found %s",gofabric8);    runGofabric8(gofabric8,"version");  }  return gofabric8;}  }
class C{  public StateInteractive mouse_moved(){  super.mouse_moved();  PlaPointInt curr_mouse_pos=i_brd.get_current_mouse_position().round();  snapped_mouse_position=(snap_to_restriction(curr_mouse_pos)).to_float();  i_brd.repaint();  return this;}  }
class C{  public boolean hasComment(){  return comment != null;}  }
class C{  public SQLIntegrityConstraintViolationException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  public void handleTblResourceComparatorButtonDeleteRequest(RequestInvocationEvent event) throws ModelControlException {  submitCycle=true;  CCActionTable table=(CCActionTable)getChild(TBL_RESOURCE);  table.restoreStateData();  CCActionTableModel tblModel=(CCActionTableModel)propertySheetModel.getModel(TBL_RESOURCE);  Integer[] selected=tblModel.getSelectedRows();  if ((selected != null) && (selected.length > 0)) {    OrderedSet tblValues=(OrderedSet)getPageSessionAttribute(SCPolicyModel.ATTRIBUTE_NAME_RESOURCE_COMPARATOR);    tblValues.removeAll(selected);    setPageSessionAttribute(SCPolicyModel.ATTRIBUTE_NAME_RESOURCE_COMPARATOR,tblValues);    populateResourceComparatorTable(tblValues);  }  try {    Map values=getAllValues();    setPageSessionAttribute(PROPERTY_ATTRIBUTE,(HashMap)values);    setPageSessionAttribute(SCPolicyViewBean.PAGE_MODIFIED,"1");  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }  forwardTo();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementsetattributensurinull.class,args);}  }
class C{  public EMailMessage(String sender,List<String> recipients,String subject){  this.sender=sender;  this.recipients=recipients;  this.subject=subject;  body=new LocalizableMessageBuilder();  attachments=new LinkedList<>();  bodyMIMEType="text/plain";}  }
class C{  public void insert_ulonglong(long value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_ulonglong",_opsClass);  DynValueOperations $self=(DynValueOperations)$so.servant;  try {    $self.insert_ulonglong(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public SSOTokenPrincipal(String name){  if (name == null) {    throw new NullPointerException("illegal null input");  }  this.name=name;}  }
class C{  public static boolean isEnabled(){  return "1".equals(FileUtils.readOneLine(CONTROL_PATH));}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node oldChild;  Node removedChild;  String childName;  int length;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  length=(int)childList.getLength();  oldChild=childList.item(0);  removedChild=employeeNode.removeChild(oldChild);  childName=removedChild.getNodeName();  if (equals(6,length)) {    assertEquals("nowhitespace","employeeId",childName);  } else {    assertEquals("whitespace","#text",childName);  }}  }
class C{  public StringBuilder encodeBody(StringBuilder retval){  return retval.append(optionTag);}  }
class C{  public Object clone() throws CloneNotSupportedException {  DefaultTreeSelectionModel clone=(DefaultTreeSelectionModel)super.clone();  clone.changeSupport=null;  if (selection != null) {    int selLength=selection.length;    clone.selection=new TreePath[selLength];    System.arraycopy(selection,0,clone.selection,0,selLength);  }  clone.listenerList=new EventListenerList();  clone.listSelectionModel=(DefaultListSelectionModel)listSelectionModel.clone();  clone.uniquePaths=new Hashtable<TreePath,Boolean>();  clone.lastPaths=new Hashtable<TreePath,Boolean>();  clone.tempPaths=new TreePath[1];  return clone;}  }
class C{  public JKException(final Throwable cause){  super(cause);}  }
class C{  public WriterProperties useSmartMode(){  this.smartMode=true;  return this;}  }
class C{  static void appendModeInfo(Mode mode,BitVector bits){  bits.appendBits(mode.getBits(),4);}  }
class C{  public ArraySpliterator(Object[] array,int origin,int fence,int additionalCharacteristics){  this.array=array;  this.index=origin;  this.fence=fence;  this.characteristics=additionalCharacteristics | Spliterator.SIZED | Spliterator.SUBSIZED;}  }
class C{  public boolean isMultipleMode(){  return allowsMultipleSelections();}  }
class C{  protected void scheduleNextRecurringTaskIteration(Task completedTask,GregorianCalendar calendar){  String recurringTaskID=completedTask.getRecurringTaskID();  if (recurringTaskID != null) {    RecurringTask recurringTask=recurringTasks.get(recurringTaskID);    if (recurringTask != null) {      Task newIteration=null;      try {        newIteration=recurringTask.scheduleNextIteration(calendar);      } catch (      DirectoryException de) {        logger.error(de.getMessageObject());      }      if (newIteration != null) {        try {          Task t=tasks.get(newIteration.getTaskID());          if (t != null && TaskState.isDone(t.getTaskState())) {            removeCompletedTask(t.getTaskID());          }          scheduleTask(newIteration,false);        } catch (        DirectoryException de) {          if (de.getResultCode() != ResultCode.ENTRY_ALREADY_EXISTS) {            logger.traceException(de);            LocalizableMessage message=ERR_TASKSCHED_ERROR_SCHEDULING_RECURRING_ITERATION.get(recurringTaskID,de.getMessageObject());            logger.error(message);            DirectoryServer.sendAlertNotification(this,ALERT_TYPE_CANNOT_SCHEDULE_RECURRING_ITERATION,message);          }        }      }    }  }}  }
class C{  public boolean startsWith(XMLString prefix,int toffset){  int to=toffset;  int tlim=this.length();  int po=0;  int pc=prefix.length();  if ((toffset < 0) || (toffset > tlim - pc)) {    return false;  }  while (--pc >= 0) {    if (this.charAt(to) != prefix.charAt(po)) {      return false;    }    to++;    po++;  }  return true;}  }
class C{  public static void registerRootDN(DN rootDN){  directoryServer.rootDNs.add(rootDN);}  }
class C{  public boolean isCyclic(){  return cyclic;}  }
class C{  public void addRow(Vector rowData){  insertRow(getRowCount(),rowData);}  }
class C{  private void clearConfiguration(){  this.debug=false;  this.enabled=false;  this.baseDir="";  this.baseURL="";  this.licenseName="";  this.licenseKey="";  this.imgWidth=DEFAULT_IMG_WIDTH;  this.imgHeight=DEFAULT_IMG_HEIGHT;  this.imgQuality=DEFAULT_IMG_QUALITY;  this.types=new HashMap<>();  this.typesOrder=new ArrayList<>();  this.thumbsEnabled=false;  this.thumbsURL="";  this.thumbsDir="";  this.thumbsPath="";  this.thumbsQuality=DEFAULT_IMG_QUALITY;  this.thumbsDirectAccess=false;  this.thumbsMaxHeight=DEFAULT_THUMB_MAX_HEIGHT;  this.thumbsMaxWidth=DEFAULT_THUMB_MAX_WIDTH;  this.accessControlLevels=new ArrayList<>();  this.hiddenFolders=new ArrayList<>();  this.hiddenFiles=new ArrayList<>();  this.doubleExtensions=false;  this.forceASCII=false;  this.checkSizeAfterScaling=false;  this.uriEncoding=DEFAULT_URI_ENCODING;  this.userRoleSessionVar="";  this.plugins=new ArrayList<>();  this.secureImageUploads=false;  this.htmlExtensions=new ArrayList<>();  this.defaultResourceTypes=new ArrayList<>();  this.events=new Events();  this.basePathBuilder=null;  this.disallowUnsafeCharacters=false;}  }
class C{  private void refreshTaskDidProgress(NodeRefresher task,NodeRefresher.State oldState,NodeRefresher.State newState){  BasicNode node=task.getNode();  boolean nodeChanged=false;  if (oldState == NodeRefresher.State.QUEUED) {    checkUpdateEvent(true);  }  if (task.isInFinalState()) {    checkUpdateEvent(false);  }  if (newState == NodeRefresher.State.FAILED) {    if (task.getException() instanceof EntryNotFoundException && oldState != NodeRefresher.State.SOLVING_REFERRAL) {      removeOneNode(node);    } else {      if (oldState == NodeRefresher.State.SOLVING_REFERRAL) {        node.setRemoteUrl(task.getRemoteUrl());        if (task.getRemoteEntry() != null) {          updateNodeRendering(node,task.getRemoteEntry());        }        node.setLeaf(true);        removeAllChildNodes(node,true);      }      node.setError(new BasicNodeError(oldState,task.getException(),task.getExceptionArg()));      nodeChanged=updateNodeRendering(node,task.getDisplayedEntry());    }  } else   if (newState == NodeRefresher.State.CANCELLED || newState == NodeRefresher.State.INTERRUPTED) {    tree.collapsePath(new TreePath(treeModel.getPathToRoot(node)));  } else {    if (oldState != NodeRefresher.State.SEARCHING_CHILDREN && newState == NodeRefresher.State.SEARCHING_CHILDREN) {      if (canDoDifferentialUpdate(task)) {        Enumeration<?> e=node.children();        while (e.hasMoreElements()) {          BasicNode child=(BasicNode)e.nextElement();          child.setObsolete(true);        }      } else {        removeAllChildNodes(node,true);      }    }    if (oldState == NodeRefresher.State.READING_LOCAL_ENTRY) {      node.setRemoteUrl((String)null);      SearchResultEntry localEntry=task.getLocalEntry();      nodeChanged=updateNodeRendering(node,localEntry);    } else     if (oldState == NodeRefresher.State.SOLVING_REFERRAL) {      node.setRemoteUrl(task.getRemoteUrl());      updateNodeRendering(node,task.getRemoteEntry());      nodeChanged=true;    } else     if (oldState == NodeRefresher.State.DETECTING_CHILDREN) {      if (node.isLeaf() != task.isLeafNode()) {        node.setLeaf(task.isLeafNode());        updateNodeRendering(node,task.getDisplayedEntry());        nodeChanged=true;        if (node.isLeaf()) {          removeAllChildNodes(node,false);        }      }    } else     if (oldState == NodeRefresher.State.SEARCHING_CHILDREN) {      updateChildNodes(task);      if (newState == NodeRefresher.State.FINISHED) {        if (canDoDifferentialUpdate(task)) {          for (int i=node.getChildCount() - 1; i >= 0; i--) {            BasicNode child=(BasicNode)node.getChildAt(i);            if (child.isObsolete()) {              removeOneNode(child);            }          }        }        if (node.getChildCount() == 0) {          node.setLeaf(true);          updateNodeRendering(node,task.getDisplayedEntry());          nodeChanged=true;        }      }      if (node.isSizeLimitReached()) {        fireEvent(BrowserEvent.Type.SIZE_LIMIT_REACHED);      }    }    if (newState == NodeRefresher.State.FINISHED && node.getError() != null) {      node.setError(null);      nodeChanged=updateNodeRendering(node,task.getDisplayedEntry());    }  }  if (nodeChanged) {    treeModel.nodeChanged(task.getNode());  }  if (node.isLeaf() && node.getChildCount() >= 1) {    throw new RuntimeException("Inconsistent node: " + node.getDN());  }}  }
class C{  Item newFloat(final float value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(FLOAT).putInt(key.intVal);    result=new Item(index++,key);    put(result);  }  return result;}  }
class C{  private Entry decodeV2(ByteString bytes,CompressedSchema compressedSchema) throws DirectoryException, DecodeException, IOException {  ByteSequenceReader reader=bytes.asReader();  reader.position(1);  int format=reader.readByte();  int encodedEntryLen=reader.readCompactUnsignedInt();  try {    if (format == PLAIN_ENTRY) {      return Entry.decode(reader,compressedSchema);    }    InputStream is=reader.asInputStream();    if ((format & ENCRYPT_ENTRY) == ENCRYPT_ENTRY) {      is=getCryptoManager().getCipherInputStream(is);    }    if ((format & COMPRESS_ENTRY) == COMPRESS_ENTRY) {      is=new InflaterInputStream(is);    }    byte[] data=new byte[encodedEntryLen];    int readBytes;    int position=0;    int leftToRead=encodedEntryLen;    do {      if ((readBytes=is.read(data,position,leftToRead)) == -1) {        throw DecodeException.error(ERR_CANNOT_DECODE_ENTRY.get());      }      position+=readBytes;      leftToRead-=readBytes;    } while (leftToRead > 0 && readBytes > 0);    return Entry.decode(ByteString.wrap(data).asReader(),compressedSchema);  } catch (  CryptoManagerException cme) {    logger.traceException(cme);    throw DecodeException.error(cme.getMessageObject());  }}  }
class C{  private final void internalMapExactWrapper(MappedWrapper[] wrappers,CharChunk path,MappingData mappingData){  MappedWrapper wrapper=exactFind(wrappers,path);  if (wrapper != null) {    mappingData.requestPath.setString(wrapper.name);    mappingData.wrapper=wrapper.object;    if (path.equals("/")) {      mappingData.pathInfo.setString("/");      mappingData.wrapperPath.setString("");      mappingData.contextPath.setString("");      mappingData.matchType=MappingMatch.CONTEXT_ROOT;    } else {      mappingData.wrapperPath.setString(wrapper.name);      mappingData.matchType=MappingMatch.EXACT;    }  }}  }
class C{  public void writeRequest(){  Object lock=new Object();synchronized (lock) {synchronized (this) {      boolean goAheadWithWrite=writerLocks.size() == 0 && currentReaders == 0 && currentWriters == 0;      if (goAheadWithWrite) {        ++currentWriters;        return;      }      writerLocks.addLast(lock);    }    try {      lock.wait();    } catch (    InterruptedException e) {    }  }}  }
class C{  public static MBeanServer newMBeanServer(String domain){  checkPermission("newMBeanServer");  final MBeanServerBuilder mbsBuilder=getNewMBeanServerBuilder();synchronized (mbsBuilder) {    final MBeanServerDelegate delegate=mbsBuilder.newMBeanServerDelegate();    if (delegate == null) {      final String msg="MBeanServerBuilder.newMBeanServerDelegate() " + "returned null";      throw new JMRuntimeException(msg);    }    final MBeanServer mbeanServer=mbsBuilder.newMBeanServer(domain,null,delegate);    if (mbeanServer == null) {      final String msg="MBeanServerBuilder.newMBeanServer() returned null";      throw new JMRuntimeException(msg);    }    return mbeanServer;  }}  }
class C{  public IteratorSpliterator(Iterator<? extends T> iterator,int characteristics){  this.collection=null;  this.it=iterator;  this.est=Long.MAX_VALUE;  this.characteristics=characteristics & ~(Spliterator.SIZED | Spliterator.SUBSIZED);}  }
class C{  public static QueryExp in(ValueExp val,ValueExp valueList[]){  return new InQueryExp(val,valueList);}  }
class C{  private void finalizeAuthProcess(RadiusResponse response,ContextHolder holder) throws RadiusProcessingException {  LOG.message("Entering OpenAMAuthHandler.finalizeAuthProcess()");  final AuthContext.Status status=holder.getAuthContext().getStatus();  if (status.equals(AuthContext.Status.SUCCESS)) {    allowAccessAndTerminateProcess(response,holder);    return;  }  rejectAccessAndTerminateProcess(response,holder);}  }
class C{  @NonNull public final Agera observeOn(@NonNull Executor executor){  return new AgeraObserveOnExecutor(this,executor,false);}  }
class C{  @Override public void handle(long now){  player.update();  for (  StageBlock tile : SpriteHandler.getStageElements()) {    tile.update();  }  for (int i=0; i < SpriteHandler.getPlayerPowerList().size(); i++) {    PlayerPower power=SpriteHandler.getPlayerPowerList().get(i);    if (power.isReadyForRemoval()) {      SpriteHandler.getPlayerPowerList().remove(power);      break;    }    power.update();  }  for (int i=0; i < SpriteHandler.getEnemyCast().size(); i++) {    Enemy e=SpriteHandler.getEnemyCast().get(i);    if (e.getCycleStatus()) {      e.destroy();      SpriteHandler.getEnemyCast().remove(e);      SpriteHandler.getAllEnemyCast().remove(e);      i--;      break;    }    e.update();  }}  }
class C{  protected void Number() throws javax.xml.transform.TransformerException {  if (null != m_token) {    double num;    try {      if ((m_token.indexOf('e') > -1) || (m_token.indexOf('E') > -1))       throw new NumberFormatException();      num=Double.valueOf(m_token).doubleValue();    } catch (    NumberFormatException nfe) {      num=0.0;      error(XPATHErrorResources.ER_COULDNOT_BE_FORMATTED_TO_NUMBER,new Object[]{m_token});    }    m_ops.m_tokenQueue.setElementAt(new XNumber(num),m_queueMark - 1);    m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),m_queueMark - 1);    m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);    nextToken();  }}  }
class C{  public boolean doesOverride(){  return overrides.size() > 0;}  }
class C{  @RequestMapping(value="/account/change_password",method=RequestMethod.POST,produces=MediaType.TEXT_PLAIN_VALUE) @Timed public ResponseEntity<?> changePassword(@RequestBody String password){  if (!checkPasswordLength(password)) {    return new ResponseEntity<>("Incorrect password",HttpStatus.BAD_REQUEST);  }  userService.changePassword(password);  return new ResponseEntity<>(HttpStatus.OK);}  }
class C{  public void testPutEntryIfAbsent() throws Exception {  assertNull(cache.toVerboseString(),"Expected empty cache.  " + "Cache contents:" + ServerConstants.EOL + cache.toVerboseString());  TestCaseUtils.initializeTestBackend(false);  String b=DirectoryServer.getBackend(DN.valueOf("o=test")).getBackendID();  assertTrue(cache.putEntryIfAbsent(testEntriesList.get(0),b,1),"Not expected to find " + testEntriesList.get(0).getName() + " in the cache.  Cache contents:"+ ServerConstants.EOL+ cache.toVerboseString());  assertFalse(cache.putEntryIfAbsent(testEntriesList.get(0),b,1),"Expected to find " + testEntriesList.get(0).getName() + " in the cache.  Cache contents:"+ ServerConstants.EOL+ cache.toVerboseString());  assertNotNull(cache.getEntry(testEntriesList.get(0).getName()),"Expected to find " + testEntriesList.get(0).getName() + " in the cache.  Cache contents:"+ ServerConstants.EOL+ cache.toVerboseString());  assertNotNull(cache.getEntry(b,1),"Expected to find entry id " + -1 + " in the cache.  Cache contents:"+ ServerConstants.EOL+ cache.toVerboseString());  cache.clear();}  }
class C{  public void dynamicServletCreated(Servlet servlet){  createdServlets.add(servlet);}  }
class C{  public com.sun.identity.liberty.ws.interaction.jaxb.ExtensionElement createExtensionElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.interaction.jaxb.impl.ExtensionElementImpl();}  }
class C{  private void pushRun(int runBase,int runLen){  this.runBase[stackSize]=runBase;  this.runLen[stackSize]=runLen;  stackSize++;}  }
class C{  public static <T>ArrayList<T> list(Enumeration<T> e){  ArrayList<T> l=new ArrayList<>();  while (e.hasMoreElements())   l.add(e.nextElement());  return l;}  }
class C{  public void startElement(String uri,String local) throws SAXException {  boolean isRoot=false;  String suggestion=null;  if (elementLen == 0) {    isRoot=true;    suggestion="";  }  writePendingText();  nsContext.startElement();  pushElement(uri,local);  nsContext.declareNamespace(uri,suggestion,false);  if (isRoot) {    String[] uris=nsContext.getNamespacePrefixMapper().getPreDeclaredNamespaceUris();    if (uris != null) {      for (int i=0; i < uris.length; i++) {        if (uris[i] != null)         nsContext.declareNamespace(uris[i],null,false);      }    }  }}  }
class C{  public org.omg.PortableServer.Servant incarnate(byte[] oid,org.omg.PortableServer.POA adapter) throws org.omg.PortableServer.ForwardRequest {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("incarnate",_opsClass);  ServantActivatorOperations $self=(ServantActivatorOperations)$so.servant;  try {    return $self.incarnate(oid,adapter);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  private DN build(){  DN dn=DN.rootDN();  for (  RDN rdn : rdns) {    dn=dn.child(rdn);  }  return dn;}  }
class C{  public Token toToken(SAMLToken samlToken){  String tokenId=tokenIdFactory.toSAMLPrimaryTokenId(samlToken.getPrimaryKey());  Token token=new Token(tokenId,TokenType.SAML2);  Calendar timestamp=TimeUtils.fromUnixTime(samlToken.getExpiryTime());  token.setExpiryTimestamp(timestamp);  String className=samlToken.getToken().getClass().getName();  token.setAttribute(SAMLTokenField.OBJECT_CLASS.getField(),className);  String secondaryKey=samlToken.getSecondaryKey();  if (secondaryKey != null) {    secondaryKey=tokenIdFactory.toSAMLSecondaryTokenId(secondaryKey);    token.setAttribute(SAMLTokenField.SECONDARY_KEY.getField(),secondaryKey);  }  String jsonBlob=serialisation.serialise(samlToken.getToken());  blobUtils.setBlobFromString(token,jsonBlob);  return token;}  }
class C{  private boolean processAbandonRequest(LDAPMessage message,List<Control> controls){  if (ldapVersion == 2 && !controls.isEmpty()) {    disconnectControlsNotAllowed();    return false;  }  AbandonRequestProtocolOp protocolOp=message.getAbandonRequestProtocolOp();  AbandonOperationBasis abandonOp=new AbandonOperationBasis(this,nextOperationID.getAndIncrement(),message.getMessageID(),controls,protocolOp.getIDToAbandon());  try {    addOperationInProgress(abandonOp);  } catch (  DirectoryException de) {    logger.traceException(de);  }  return connectionValid;}  }
class C{  private void joinThreadSet(Set<ServerLoader> threadSet){  Date startDate=new Date();  for (  ServerLoader t : threadSet) {    long timeToJoin=MULTITHREAD_TIMEOUT - System.currentTimeMillis() + startDate.getTime();    try {      if (timeToJoin > 0) {        t.join(MULTITHREAD_TIMEOUT);      }    } catch (    InterruptedException ie) {      logger.info(LocalizableMessage.raw(ie + " caught and ignored",ie));    }    if (t.isAlive()) {      t.interrupt();    }  }  Date endDate=new Date();  long workingTime=endDate.getTime() - startDate.getTime();  logger.info(LocalizableMessage.raw("Loading ended at " + workingTime + " ms"));}  }
class C{  public static int convertDpToPixel(Context context,int dp){  Resources resources=context.getResources();  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,resources.getDisplayMetrics());}  }
class C{  public boolean isAMSDKEnabled(){  try {    ServiceSchemaManager schemaMgr=new ServiceSchemaManager(IdConstants.REPO_SERVICE,AMAdminUtils.getSuperAdminSSOToken());    ServiceSchema orgSchema=schemaMgr.getOrganizationSchema();    Set names=orgSchema.getSubSchemaNames();    return (names != null) && names.contains("amSDK");  } catch (  SMSException e) {    debug.error("AMModelBase.isAMSDKEnabled",e);    return false;  }catch (  SSOException e) {    debug.error("AMModelBase.isAMSDKEnabled",e);    return false;  }}  }
class C{  private int findEmptyOccupation(int time,int maxDelay,int duration){  int chunkSize=0;  int maxStart=Math.min(occupationTable.length - 1 - duration,time + maxDelay);  for (int i=time; i < maxStart + duration; i++) {    if (occupationTable[i] < capacity) {      chunkSize++;      if (chunkSize == duration) {        return i - (duration - 1);      }    } else {      chunkSize=0;    }  }  return -1;}  }
class C{  public boolean isDiscardIfFileAltered(String frameID){  return discardIfFileAlteredFrames.contains(frameID);}  }
class C{  public WindowEvent(Window source,int id,Window opposite,int oldState,int newState){  super(source,id);  this.opposite=opposite;  this.oldState=oldState;  this.newState=newState;}  }
class C{  private StringBuffer format(BigDecimal number,StringBuffer result,FieldDelegate delegate){  if (multiplier != 1) {    number=number.multiply(getBigDecimalMultiplier());  }  boolean isNegative=number.signum() == -1;  if (isNegative) {    number=number.negate();  }synchronized (digitList) {    int maxIntDigits=getMaximumIntegerDigits();    int minIntDigits=getMinimumIntegerDigits();    int maxFraDigits=getMaximumFractionDigits();    int minFraDigits=getMinimumFractionDigits();    int maximumDigits=maxIntDigits + maxFraDigits;    digitList.set(isNegative,number,useExponentialNotation ? ((maximumDigits < 0) ? Integer.MAX_VALUE : maximumDigits) : maxFraDigits,!useExponentialNotation);    return subformat(result,delegate,isNegative,false,maxIntDigits,minIntDigits,maxFraDigits,minFraDigits);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getAttributeNodeNS01.class,args);}  }
class C{  @Override public final boolean equals(Object o){  if (o == this)   return true;  if (!(o instanceof HttpRoute))   return false;  HttpRoute that=(HttpRoute)o;  boolean equal=this.targetHost.equals(that.targetHost);  equal&=(this.localAddress == that.localAddress) || ((this.localAddress != null) && this.localAddress.equals(that.localAddress));  equal&=(this.proxyChain == that.proxyChain) || ((this.proxyChain != null) && (that.proxyChain != null) && (this.proxyChain.length == that.proxyChain.length));  equal&=(this.secure == that.secure) && (this.tunnelled == that.tunnelled) && (this.layered == that.layered);  if (equal && (this.proxyChain != null)) {    for (int i=0; equal && (i < this.proxyChain.length); i++)     equal=this.proxyChain[i].equals(that.proxyChain[i]);  }  return equal;}  }
class C{  private void declareNamespace(String prefix,String namespace,Set<String> usedPrefixes,int indent) throws IOException {  if (namespace == null) {    QName qname=new QName(prefix);    if (qname.hasPrefix()) {      prefix=qname.getPrefix();      namespace=XMPMetaFactory.getSchemaRegistry().getNamespaceURI(prefix + ":");      declareNamespace(prefix,namespace,usedPrefixes,indent);    } else {      return;    }  }  if (!usedPrefixes.contains(prefix)) {    writeNewline();    writeIndent(indent);    write("xmlns:");    write(prefix);    write("=\"");    write(namespace);    write('"');    usedPrefixes.add(prefix);  }}  }
class C{  public String generateUri(){  final String baseUri=uri;  if (baseUri == null)   return null;  if (baseUri.indexOf('?') != -1)   return baseUri;  final StringBuilder params=new StringBuilder();  addParams(params);  if (params.length() > 0)   return baseUri + '?' + params; else   return baseUri;}  }
class C{  public void cdata(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (isOutsideDocElem() && org.apache.xml.utils.XMLCharacterRecognizer.isWhiteSpace(ch,start,length))   return;  String s=new String(ch,start,length);  CDATASection section=(CDATASection)m_currentNode.getLastChild();  section.appendData(s);}  }
class C{  public void applyPattern(String newPattern){  StringBuffer[] segments=new StringBuffer[2];  for (int i=0; i < segments.length; ++i) {    segments[i]=new StringBuffer();  }  double[] newChoiceLimits=new double[30];  String[] newChoiceFormats=new String[30];  int count=0;  int part=0;  double startValue=0;  double oldStartValue=Double.NaN;  boolean inQuote=false;  for (int i=0; i < newPattern.length(); ++i) {    char ch=newPattern.charAt(i);    if (ch == '\'') {      if ((i + 1) < newPattern.length() && newPattern.charAt(i + 1) == ch) {        segments[part].append(ch);        ++i;      } else {        inQuote=!inQuote;      }    } else     if (inQuote) {      segments[part].append(ch);    } else     if (ch == '<' || ch == '#' || ch == '\u2264') {      if (segments[0].length() == 0) {        throw new IllegalArgumentException();      }      try {        String tempBuffer=segments[0].toString();        if (tempBuffer.equals("\u221E")) {          startValue=Double.POSITIVE_INFINITY;        } else         if (tempBuffer.equals("-\u221E")) {          startValue=Double.NEGATIVE_INFINITY;        } else {          startValue=Double.valueOf(segments[0].toString()).doubleValue();        }      } catch (      Exception e) {        throw new IllegalArgumentException();      }      if (ch == '<' && startValue != Double.POSITIVE_INFINITY && startValue != Double.NEGATIVE_INFINITY) {        startValue=nextDouble(startValue);      }      if (startValue <= oldStartValue) {        throw new IllegalArgumentException();      }      segments[0].setLength(0);      part=1;    } else     if (ch == '|') {      if (count == newChoiceLimits.length) {        newChoiceLimits=doubleArraySize(newChoiceLimits);        newChoiceFormats=doubleArraySize(newChoiceFormats);      }      newChoiceLimits[count]=startValue;      newChoiceFormats[count]=segments[1].toString();      ++count;      oldStartValue=startValue;      segments[1].setLength(0);      part=0;    } else {      segments[part].append(ch);    }  }  if (part == 1) {    if (count == newChoiceLimits.length) {      newChoiceLimits=doubleArraySize(newChoiceLimits);      newChoiceFormats=doubleArraySize(newChoiceFormats);    }    newChoiceLimits[count]=startValue;    newChoiceFormats[count]=segments[1].toString();    ++count;  }  choiceLimits=new double[count];  System.arraycopy(newChoiceLimits,0,choiceLimits,0,count);  choiceFormats=new String[count];  System.arraycopy(newChoiceFormats,0,choiceFormats,0,count);}  }
class C{  private boolean ensurePathIsExpanded(TreePath aPath,boolean expandLast){  if (aPath != null) {    if (treeModel.isLeaf(aPath.getLastPathComponent())) {      aPath=aPath.getParentPath();      expandLast=true;    }    if (aPath != null) {      FHTreeStateNode lastNode=getNodeForPath(aPath,false,true);      if (lastNode != null) {        lastNode.makeVisible();        if (expandLast)         lastNode.expand();        return true;      }    }  }  return false;}  }
class C{  public void incSsoServerLoggingRecsRejected(){  long li=LoggingRecsRejected.longValue();  li++;  LoggingRecsRejected=Long.valueOf(li);}  }
class C{  public static void doAsPrivilege(final String methodName,final Filter targetObject) throws Exception {  doAsPrivilege(methodName,targetObject,null,null);}  }
class C{  public static void write(OutputStream out,int c){  if (out == null) {    throw new IllegalArgumentException("output stream null.");  }  try {    out.write(c);  } catch (  IOException e) {    throw new RuntimeException(e.getMessage(),e);  }}  }
class C{  public static <V>boolean addDistinctEntry(List<V> sourceList,V entry){  return (sourceList != null && !sourceList.contains(entry)) ? sourceList.add(entry) : false;}  }
class C{  public CRLException(){  super();}  }
class C{  public void signXML(String certAlias) throws SAMLException {  if (signed) {    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("Assertion.signXML: the assertion is " + "already signed.");    }    throw new SAMLException(SAMLUtils.bundle.getString("alreadySigned"));  }  if (certAlias == null) {    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("Assetion.signXML: couldn't obtain " + "this site's cert alias.");    }    throw new SAMLResponderException(SAMLUtils.bundle.getString("cannotFindCertAlias"));  }  XMLSignatureManager manager=XMLSignatureManager.getInstance();  if ((_majorVersion == 1) && (_minorVersion == 0)) {    SAMLUtils.debug.message("Assetion.signXML: sign with version 1.0");    signatureString=manager.signXML(this.toString(true,true),certAlias);    signature=XMLUtils.toDOMDocument(signatureString,SAMLUtils.debug).getDocumentElement();  } else {    SAMLUtils.debug.message("Assetion.signXML: sign with version 1.1");    Document doc=XMLUtils.toDOMDocument(this.toString(true,true),SAMLUtils.debug);    signature=manager.signXML(doc,certAlias,null,ASSERTION_ID_ATTRIBUTE,getAssertionID(),true,null);    signatureString=XMLUtils.print(signature);  }  signed=true;  xmlString=this.toString(true,true);}  }
class C{  public boolean match(Object matchObj){  if (!(matchObj instanceof StatusLine))   return false;  StatusLine sl=(StatusLine)matchObj;  if (sl.matchExpression != null)   return sl.matchExpression.match(this.encode());  if (sl.sipVersion != null && !sl.sipVersion.equals(sipVersion))   return false;  if (sl.statusCode != 0) {    if (matchStatusClass) {      int hiscode=sl.statusCode;      String codeString=Integer.toString(sl.statusCode);      String mycode=Integer.toString(statusCode);      if (codeString.charAt(0) != mycode.charAt(0))       return false;    } else {      if (statusCode != sl.statusCode)       return false;    }  }  if (sl.reasonPhrase == null || reasonPhrase == sl.reasonPhrase)   return true;  return reasonPhrase.equals(sl.reasonPhrase);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodevalue06.class,args);}  }
class C{  public void windowLostFocus(WindowEvent e){  ((WindowFocusListener)a).windowLostFocus(e);  ((WindowFocusListener)b).windowLostFocus(e);}  }
class C{  public static StringBuffer doLogout(String metaAlias,String recipientEntityID,List<EndpointType> recipientSLOList,List extensionsList,String binding,String relayState,String sessionIndex,NameID nameID,HttpServletRequest request,HttpServletResponse response,Map paramsMap,BaseConfigType config) throws SAML2Exception, SessionException {  EndpointType logoutEndpoint=null;  for (  EndpointType endpoint : recipientSLOList) {    if (binding.equals(endpoint.getBinding())) {      logoutEndpoint=endpoint;      break;    }  }  return doLogout(metaAlias,recipientEntityID,extensionsList,logoutEndpoint,relayState,sessionIndex,nameID,request,response,paramsMap,config);}  }
class C{  public ACTIVITY_COMPLETED(int minorCode,CompletionStatus completionStatus){  this("",minorCode,completionStatus);}  }
class C{  public com.sun.identity.liberty.ws.meta.jaxb.AdditionalMetadataLocationType createAdditionalMetadataLocationType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.meta.jaxb.impl.AdditionalMetadataLocationTypeImpl();}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthTextFieldUI();}  }
class C{  public SQLiteCustomExtension(String path,String entryPoint){  if (path == null) {    throw new IllegalArgumentException("null path");  }  this.path=path;  this.entryPoint=entryPoint;}  }
class C{  @Override public List<Foo> findAll(){  return findAll(QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);}  }
class C{  protected int findTokenEnd(int from){  if (from < 0) {    throw new IllegalArgumentException("Token start position must not be negative: " + from);  }  final int to=this.currentHeader.length();  int end=from + 1;  while ((end < to) && isTokenChar(this.currentHeader.charAt(end))) {    end++;  }  return end;}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.ConditionsType createConditionsType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.ConditionsTypeImpl();}  }
class C{  protected boolean isZoneLoaded(View zone){  return (zone.getViewCount() > 0);}  }
class C{  public void warning(String msg){  log(Level.WARNING,msg);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(ownerElement01.class,args);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.HttpsTokenElement createHttpsTokenElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.HttpsTokenElementImpl();}  }
class C{  public void disableDragItem(){  itemDragEnabled=false;  mItemTouchHelper=null;}  }
class C{  IPv4Condition(Debug debug){  super(debug,Long.MAX_VALUE,Long.MAX_VALUE,IPVersion.IPV4);}  }
class C{  public void test_wrap_ByteBuffer_ByteBuffer_02(){  String host="new host";  int port=8080;  ByteBuffer bbs=ByteBuffer.allocate(10);  ByteBuffer bbd=ByteBuffer.allocate(100).asReadOnlyBuffer();  SSLEngine sse=getEngine(host,port);  sse.setUseClientMode(true);  try {    sse.wrap(bbs,bbd);    fail("ReadOnlyBufferException wasn't thrown");  } catch (  ReadOnlyBufferException iobe) {  }catch (  Exception e) {    fail(e + " was thrown instead of ReadOnlyBufferException");  }}  }
class C{  public void checkNumberArgs(int argNum) throws WrongNumberArgsException {}  }
class C{  public CtsCRUDOperationsPerTokenTypeEntryImpl(SnmpMib myMib,Debug debug){  super(myMib);  this.debug=debug;  this.monitoringStore=InjectorHolder.getInstance(CTSOperationsMonitoringStore.class);}  }
class C{  public void writeExif(byte[] jpeg,OutputStream exifOutStream) throws IOException {  if (jpeg == null || exifOutStream == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=getExifWriterStream(exifOutStream);  s.write(jpeg,0,jpeg.length);  s.flush();}  }
class C{  public Mario(Main sMario,String[] SVGData_s,String[] SVGData_b,float xPos,float yPos,float xVel,float yVel,Image... sprites){  super(SVGData_s,xPos,yPos + 109,xVel,yVel,sprites);  this.sMario=sMario;  this.SVGData_s=SVGData_s;  this.SVGData_b=SVGData_b;  this.aura=sMario.getAura();  runVel=2.5f * REL_HEIGHT;  sprintVel=3.5f * REL_HEIGHT;  gravity=4.9f * REL_HEIGHT;  tempGravity=gravity;  jumpVel=yVel;  yDec=REL_HEIGHT - (0.14f * REL_HEIGHT);  frictionThreshold=2.51f * REL_HEIGHT;  friction=0.5f * REL_HEIGHT;  groundRunAccel=0.01f * REL_HEIGHT;  groundSprintAccel=0.04f * REL_HEIGHT;  groundCollVel=0.23f * REL_HEIGHT;  playerStopDecel=0.1f * REL_HEIGHT;  outBoundThrowback=2 * REL_HEIGHT;  maxVelExceedThreshold=maxVel + 0.5f;  sideCollidePush=2 * REL_HEIGHT;  stageMoveTh=0.6f * WIDTH;  jumpEffectXTH=17 * REL_HEIGHT;  jumpEffectYTH=12.85f * REL_HEIGHT;  jumpTrailYTH=7.25f * REL_HEIGHT;  jumpTrailDefHeight=8.9f * REL_HEIGHT;  jumpTrailHeightDelta=2.07f * REL_HEIGHT;  enemyHitBounce=5.97f * REL_HEIGHT;}  }
class C{  public int hashCode(){  return id.hashCode();}  }
class C{  @Override public boolean markSupported(){  return fInputStream.markSupported();}  }
class C{  public void scrollXBy(OverScroller scroller,float dx,int duration){  if (viewportRect.left + dx > maxX) {    dx=(maxX - visibleXRange * 1f / 2) - viewportRect.left;  }  if (viewportRect.left + dx < minX) {    dx=(minX + visibleXRange * 1f / 2) - viewportRect.right;  }  float distance=dx / viewportRect.width() * contentRect.width();  if (distance != 0) {    computeScrollSurfaceSize();    scrollInProgress=true;    scroller.startScroll(startX(),startY(),(int)distance,0,duration);  }}  }
class C{  private static int lineWrapIndex(String line,int maxWidth){  for (int i=maxWidth; i > 0; i--) {    if (isLineWrapChar(line.charAt(i))) {      return i;    }  }  for (int i=maxWidth + 1; i < line.length(); i++) {    if (isLineWrapChar(line.charAt(i))) {      return i;    }  }  return line.length();}  }
class C{  public boolean implies(Permission perm){  debug.message("ISPermission: implies called");  boolean allowed=false;  if (perm instanceof ISPermission) {    debug.message("ISPermission:passed perm is of type ISPermission");    if (protectionDomain != null) {      debug.message("ISPermission:implies:protectionDomain not null");      if (debug.messageEnabled()) {        debug.message("ISPermission::implies: protectionDomain:" + protectionDomain.toString());      }      final String serviceName=((ISPermission)perm).getServiceName();      final String resourceName=((ISPermission)perm).getResourceName();      final String actions=((ISPermission)perm).getActions();      final Map envParams=((ISPermission)perm).getEnvParams();      if (debug.messageEnabled()) {        debug.message("ISPermission: resourceName=" + resourceName);        debug.message("ISPermission: serviceName=" + serviceName);        debug.message("ISPermission: actions=" + actions);      }      SSOTokenPrincipal tokenPrincipal=null;      try {        Principal[] principals=protectionDomain.getPrincipals();        Principal principal=(Principal)principals[0];        if (principal.getName().equals("com.sun.identity." + "authentication.service.SSOTokenPrincipal")) {          if (debug.messageEnabled()) {            debug.message("ISPermission::implies:principals:" + principal.toString());          }          tokenPrincipal=(SSOTokenPrincipal)principal;        }        if (tokenPrincipal == null) {          if (debug.messageEnabled()) {            debug.error("ISPermission::implies:" + " Principal is null");          }        } else {          SSOTokenManager ssomgr=SSOTokenManager.getInstance();          final SSOToken token=ssomgr.createSSOToken(tokenPrincipal.getName());          if (policyEvalFactory == null) {            policyEvalFactory=PolicyEvaluatorFactory.getInstance();          }          PolicyEvaluator policyEvaluator=policyEvalFactory.getPolicyEvaluator(serviceName);          if (debug.messageEnabled()) {            debug.message("ISPermission::implies::created " + "PolicyEvaluator for " + serviceName);          }          if (actions != null) {            StringTokenizer st=new StringTokenizer(actions,",");            while (st.hasMoreTokens()) {              String action=(String)st.nextToken();              allowed=policyEvaluator.isAllowed(token,resourceName,action,envParams);              if (!allowed) {                break;              }              if (debug.messageEnabled()) {                debug.message("ISPermission::result for " + action + " is :"+ allowed);              }            }            if (debug.messageEnabled()) {              debug.message("ISPermission::result for " + actions + " is :"+ allowed);            }          } else {            if (debug.messageEnabled()) {              debug.message("ISPermission:: actions is null");            }          }        }      } catch (      SSOException ssoe) {        if (debug.messageEnabled()) {          debug.error("ISPermission::SSOException:" + ssoe.getMessage());          ssoe.printStackTrace();        }      }catch (      Exception e) {        if (debug.messageEnabled()) {          debug.error("ISPermission::Exception:" + e.getMessage());          e.printStackTrace();        }      }    } else {      debug.message("ISPermission:: subject was null");    }  }  if (debug.messageEnabled()) {    debug.message("ISPermission: allowed::" + allowed);  }  return allowed;}  }
class C{  public SetPropertyActionHandler(SessionPropertyWhitelist sessionPropertyWhitelist,SessionResourceUtil sessionResourceUtil){  this.sessionPropertyWhitelist=sessionPropertyWhitelist;  this.sessionResourceUtil=sessionResourceUtil;}  }
class C{  public int convertPreviousRowIndexToModel(int index){  if (oldViewToModel != null && index >= 0 && index < oldViewToModel.length) {    return oldViewToModel[index];  }  return -1;}  }
class C{  private void writeStatusContents(ServerDescriptor desc,int maxLabelWidth){  writeLabelValue(INFO_SERVER_STATUS_LABEL.get(),getStatus(desc).toString(),maxLabelWidth);}  }
class C{  private SearchScope(final int intValue,final String name,Enum searchScopeEnum){  this.intValue=intValue;  this.name=name;  this.searchScopeEnum=searchScopeEnum;}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String() throws Exception {  try {    TrustManagerFactory.getInstance(null,mProv.getName());    fail("NoSuchAlgorithmException or NullPointerException should be thrown (algorithm is null");  } catch (  NoSuchAlgorithmException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      TrustManagerFactory.getInstance(invalidValues[i],mProv.getName());      fail("NoSuchAlgorithmException must be thrown (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }  String prov=null;  for (int i=0; i < validValues.length; i++) {    try {      TrustManagerFactory.getInstance(validValues[i],prov);      fail("IllegalArgumentException must be thrown when provider is null (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    IllegalArgumentException e) {    }    try {      TrustManagerFactory.getInstance(validValues[i],"");      fail("IllegalArgumentException must be thrown when provider is empty (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    IllegalArgumentException e) {    }  }  for (int i=0; i < validValues.length; i++) {    for (int j=1; j < invalidValues.length; j++) {      try {        TrustManagerFactory.getInstance(validValues[i],invalidValues[j]);        fail("NoSuchProviderException must be thrown (algorithm: ".concat(invalidValues[i]).concat(" provider: ").concat(invalidValues[j]).concat(")"));      } catch (      NoSuchProviderException e) {      }    }  }  TrustManagerFactory tmf;  for (int i=0; i < validValues.length; i++) {    tmf=TrustManagerFactory.getInstance(validValues[i],mProv.getName());    assertTrue("Not instanceof TrustManagerFactory object",tmf instanceof TrustManagerFactory);    assertEquals("Incorrect algorithm",tmf.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider",tmf.getProvider().getName(),mProv.getName());    checkResult(tmf);  }}  }
class C{  public FeatureDescriptor(){}  }
class C{  public void replace(int offset,int length,View[] views){  super.replace(offset,length,views);  invalidateGrid();}  }
class C{  public PrinterAbortException(String msg){  super(msg);}  }
class C{  public FrameBodyTDLY(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  public DesignFile(Stat p_stat,File p_design_file,JFileChooser p_file_chooser){  stat=p_stat;  resources=new GuiResources(stat,"gui.resources.BoardMenuFile");  file_chooser=p_file_chooser;  input_file=p_design_file;  output_file=p_design_file;  if (p_design_file != null) {    String file_name=p_design_file.getName();    String[] name_parts=file_name.split("\\.");    if (name_parts[name_parts.length - 1].compareToIgnoreCase(binary_file_extension) != 0) {      String binfile_name=name_parts[0] + "." + binary_file_extension;      output_file=new File(p_design_file.getParent(),binfile_name);    }  }}  }
class C{  private void deleteRecordedLogFiles(){  if (mListView.getCheckedItemCount() == 0) {    Toast.makeText(getApplicationContext(),"First select log entry!",Toast.LENGTH_LONG).show();    return;  }  SparseBooleanArray checkedItemPositions=mRecordsListView.getCheckedItemPositions();  int cnt=checkedItemPositions.size();  LogRecordsListAdapter logRecordsListAdapter=(LogRecordsListAdapter)mRecordsListView.getAdapter();  for (int index=0; index < cnt; index++) {    if (checkedItemPositions.valueAt(index)) {      File file=(File)logRecordsListAdapter.getItem(checkedItemPositions.keyAt(index));      if (file.delete()) {        Toast.makeText(getApplicationContext(),"File " + file.getName() + " deleted!",Toast.LENGTH_SHORT).show();      }    }  }  logRecordsListAdapter.notifyDataSetChanged();}  }
class C{  public Object object(){  return m_origObj;}  }
class C{  public Class<?> loadClass(String name,boolean resolve) throws ClassNotFoundException {  if (SUPERCLASS_NAME.equals(name)) {    return null;  }  return super.loadClass(name,resolve);}  }
class C{  public InvalidDnDOperationException(){  super(dft_msg);}  }
class C{  public Object clone(){  RenderContext newRenderContext=new RenderContext(usr2dev,aoi,hints);  return newRenderContext;}  }
class C{  protected boolean mustReadSchema(){  return true;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodegetnextsiblingnull.class,args);}  }
class C{  public ContentDescription(){  this(0,BigInteger.ZERO);}  }
class C{  public Set canHaveMembers(){  Set results=(Set)IdUtils.typesCanHaveMembers.get(getName());  return (results == null) ? Collections.EMPTY_SET : results;}  }
class C{  public InvalidKeySpecException(String msg){  super(msg);}  }
class C{  int compare(K k1,K k2) throws ClassCastException {  Comparator<? super K> cmp=comparator;  if (cmp != null)   return cmp.compare(k1,k2); else   return ((Comparable<? super K>)k1).compareTo(k2);}  }
class C{  public static boolean isCurrentTimeBetweenTowTimes(Date fromDate,Date fromTime,Date toDate,Date timeTo){  JKTimeObject currntTime=getCurrntTime();  JKTimeObject fromTimeObject=new JKTimeObject();  JKTimeObject toTimeObject=new JKTimeObject();  if (currntTime.after(fromTimeObject.toTimeObject(fromDate,fromTime)) && currntTime.before(toTimeObject.toTimeObject(toDate,timeTo))) {    return true;  }  return false;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node rootNode;  boolean state;  doc=(Document)load("staff",false);  rootNode=doc.getDocumentElement();  state=rootNode.isSupported("CORE","2.0");  assertTrue("throw_True",state);}  }
class C{  private boolean isLockoutWarning(PWResetAccountLockout pwResetLockout,String uuid){  boolean warnUser=false;  int warningCount=pwResetLockout.getWarnUserCount(uuid);  if (warningCount < 0) {    informationMsg=getLocalizedString("lockoutMsg.message");    warnUser=true;    writeLog("accountLockout.message",uuid);  } else   if (warningCount > 0) {    String obj[]={String.valueOf(warningCount)};    errorMsg=MessageFormat.format(getLocalizedString("lockoutWarning.message"),(Object[])obj);    warnUser=true;  }  return warnUser;}  }
class C{  public SASLResponse processSASLRequest(SASLRequest saslReq,Message message,String respMessageID){  if (AuthnSvcUtils.debug.messageEnabled()) {    AuthnSvcUtils.debug.message("SSOTokenMechanismHandler.processSASLRequest: ");  }  String refToMessageID=saslReq.getRefToMessageID();  boolean isFirstRequest=(refToMessageID == null || refToMessageID.length() == 0);  if (AuthnSvcUtils.debug.messageEnabled()) {    AuthnSvcUtils.debug.message("SSOTokenMechanismHandler.processSASLRequest: " + "refToMessageID = " + refToMessageID);  }  SASLResponse saslResp=null;  byte[] data=saslReq.getData();  if (data == null) {    if (isFirstRequest) {      saslResp=new SASLResponse(SASLResponse.CONTINUE);      saslResp.setServerMechanism(MECHANISM_SSOTOKEN);    } else {      saslResp=new SASLResponse(SASLResponse.ABORT);    }  } else {    String dataStr=null;    try {      dataStr=new String(data,"UTF-8");    } catch (    Exception ex) {      AuthnSvcUtils.debug.error("SSOTokenMechanismHandler.processSASLRequest: ",ex);    }    if (dataStr == null) {      saslResp=new SASLResponse(SASLResponse.ABORT);    } else {      saslResp=authenticate(dataStr,message);    }    if (isFirstRequest) {      saslResp=new SASLResponse(SASLResponse.CONTINUE);      saslResp.setServerMechanism(MECHANISM_SSOTOKEN);    }  }  return saslResp;}  }
class C{  public void handleBtnFilterRequest(RequestInvocationEvent event){  CCDropDownMenu menu=(CCDropDownMenu)getChild(FILTER_TYPE);  setPageSessionAttribute(ENTITY_TYPE,(String)menu.getValue());  super.handleBtnFilterRequest(event);}  }
class C{  public NSArray(int length){  array=new NSObject[length];}  }
class C{  public StateEdit(StateEditable anObject){  super();  init(anObject,null);}  }
class C{  public void validateToken(SSOToken token) throws SSOException {  getProvider(token).validateToken(token);}  }
class C{  public boolean hasTransaction(){  return mTransactionStack != null;}  }
class C{  public Name join(Name rhs){  List<NamePiece> newPieceList=new ArrayList<>();  newPieceList.addAll(namePieces);  newPieceList.addAll(rhs.namePieces);  return new Name(newPieceList);}  }
class C{  public boolean equals(Object obj){  if (getClass() != obj.getClass()) {    return false;  }  UserInfo other=(UserInfo)obj;  if (this.userType != other.userType) {    return false;  }  if (!this.user.equalsIgnoreCase(other.user)) {    return false;  }  if (this.password != null && other.password == null)   return false;  if (other.password != null && this.password == null)   return false;  if (this.password == other.password)   return true;  return (this.password.equals(other.password));}  }
class C{  public Map validateAndInheritDefaults(Map attrMap,String orgName,boolean inherit) throws SMSException {  SMSEntry.validateToken(ssm.getSSOToken());  if (attrMap == null || attrMap.isEmpty()) {    attrMap=new HashMap();  }  Iterator keys=attrMap.keySet().iterator();  Set defAttrSet=ss.getAttributeSchemaNames();  while (keys.hasNext()) {    String attr=(String)keys.next();    if (!defAttrSet.contains(attr)) {      debug.error("ServiceSchema.validateAndInheritDefaults: " + attr + " is not listed in the service "+ getServiceName());      throw new InvalidAttributeNameException(IUMSConstants.UMS_BUNDLE_NAME,"services_validator_invalid_attr_name",null);    }  }  Map envMap=Collections.EMPTY_MAP;  if (orgName != null) {    envMap=new HashMap();    envMap.put(Constants.ORGANIZATION_NAME,orgName);    envMap.put(Constants.SSO_TOKEN,ssm.getSSOToken());  }  Iterator ass=ss.getAttributeSchemaNames().iterator();  while (ass.hasNext()) {    String attr=(String)ass.next();    AttributeSchemaImpl as=ss.getAttributeSchema(attr);    AttributeValidator av=ss.getAttributeValidator(attr);    String anyValue=as.getAny();    if (inherit && (anyValue != null) && (anyValue.indexOf("required") > -1)) {      attrMap=av.inheritDefaults(attrMap);      Set attrVals=(Set)attrMap.get(attr);      if (attrVals == null || attrVals.isEmpty()) {        debug.error("ServiceSchema.validateAndInheritDefaults: " + attr + " is a required attribute and cannot"+ " be deleted");        Object args[]={attr};        throw new SMSException(IUMSConstants.UMS_BUNDLE_NAME,"sms-required-attribute-delete",args);      }    } else     if (inherit) {      attrMap=av.inheritDefaults(attrMap);    }    Set valSet=(Set)attrMap.get(attr);    if (valSet != null) {      String i18nFileName=(ssm != null) ? ssm.getI18NFileName() : null;      av.validate(valSet,i18nFileName,false,envMap);    }  }  if (debug.messageEnabled()) {    debug.error("ServiceSchema.validate&InheritDef: " + " returning attrMap: " + attrMap.toString());  }  return attrMap;}  }
class C{  private void registerWithKeyboardManager(boolean onlyIfNew){  InputMap inputMap=getInputMap(WHEN_IN_FOCUSED_WINDOW,false);  KeyStroke[] strokes;  Hashtable<KeyStroke,KeyStroke> registered=(Hashtable<KeyStroke,KeyStroke>)getClientProperty(WHEN_IN_FOCUSED_WINDOW_BINDINGS);  if (inputMap != null) {    strokes=inputMap.allKeys();    if (strokes != null) {      for (int counter=strokes.length - 1; counter >= 0; counter--) {        if (!onlyIfNew || registered == null || registered.get(strokes[counter]) == null) {          registerWithKeyboardManager(strokes[counter]);        }        if (registered != null) {          registered.remove(strokes[counter]);        }      }    }  } else {    strokes=null;  }  if (registered != null && registered.size() > 0) {    Enumeration<KeyStroke> keys=registered.keys();    while (keys.hasMoreElements()) {      KeyStroke ks=keys.nextElement();      unregisterWithKeyboardManager(ks);    }    registered.clear();  }  if (strokes != null && strokes.length > 0) {    if (registered == null) {      registered=new Hashtable<KeyStroke,KeyStroke>(strokes.length);      putClientProperty(WHEN_IN_FOCUSED_WINDOW_BINDINGS,registered);    }    for (int counter=strokes.length - 1; counter >= 0; counter--) {      registered.put(strokes[counter],strokes[counter]);    }  } else {    putClientProperty(WHEN_IN_FOCUSED_WINDOW_BINDINGS,null);  }}  }
class C{  public long changeGenerationId(long generationId){synchronized (generationIDLock) {    long oldGenerationId=this.generationId;    if (this.generationId != generationId) {      clearDbs();      this.generationId=generationId;      this.generationIdSavedStatus=false;    }    return oldGenerationId;  }}  }
class C{  public void paintTabbedPaneTabBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int tabIndex){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public static boolean isUiThread(){  return Thread.currentThread().getId() == Looper.getMainLooper().getThread().getId();}  }
class C{  @Override public void onCreate(SQLiteDatabase db){  addHistoryTable(db);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.GenerationElement createGenerationElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.GenerationElementImpl();}  }
class C{  public static String defaultAgentContainerName(){  initialize();  return (defaultAC);}  }
class C{  public void deleteSubConfigurations(Set names) throws AMConsoleException {  String curName=null;  try {    if (parentConfig != null) {      String[] params=new String[3];      params[0]=serviceName;      params[1]=parentConfig.getComponentName();      for (Iterator iter=names.iterator(); iter.hasNext(); ) {        curName=(String)iter.next();        params[2]=curName;        amModel.logEvent("ATTEMPT_DELETE_GLOBAL_SUB_CONFIGURATION",params);        parentConfig.removeSubConfig(curName);        removeFromSubConfigList(curName);        amModel.logEvent("SUCCEED_DELETE_GLOBAL_SUB_CONFIGURATION",params);      }    }  } catch (  SSOException e) {    String[] paramsEx={serviceName,parentConfig.getComponentName(),curName,amModel.getErrorString(e)};    amModel.logEvent("SSO_EXCEPTION_DELETE_GLOBAL_SUB_CONFIGURATION",paramsEx);    throw new AMConsoleException(amModel.getErrorString(e));  }catch (  SMSException e) {    String[] paramsEx={serviceName,parentConfig.getComponentName(),curName,amModel.getErrorString(e)};    amModel.logEvent("SMS_EXCEPTION_DELETE_GLOBAL_SUB_CONFIGURATION",paramsEx);    throw new AMConsoleException(amModel.getErrorString(e));  }}  }
class C{  @Override protected void onImageLaidOut(){  super.onImageLaidOut();  final Drawable drawable=getDrawable();  if (drawable == null) {    return;  }  float drawableWidth=drawable.getIntrinsicWidth();  float drawableHeight=drawable.getIntrinsicHeight();  if (mTargetAspectRatio == SOURCE_IMAGE_ASPECT_RATIO) {    mTargetAspectRatio=drawableWidth / drawableHeight;  }  int height=(int)(mThisWidth / mTargetAspectRatio);  if (height > mThisHeight) {    int width=(int)(mThisHeight * mTargetAspectRatio);    int halfDiff=(mThisWidth - width) / 2;    mCropRect.set(halfDiff,0,width + halfDiff,mThisHeight);  } else {    int halfDiff=(mThisHeight - height) / 2;    mCropRect.set(0,halfDiff,mThisWidth,height + halfDiff);  }  calculateImageScaleBounds(drawableWidth,drawableHeight);  setupInitialImagePosition(drawableWidth,drawableHeight);  if (mCropBoundsChangeListener != null) {    mCropBoundsChangeListener.onCropAspectRatioChanged(mTargetAspectRatio);  }  if (mTransformImageListener != null) {    mTransformImageListener.onScale(getCurrentScale());    mTransformImageListener.onRotate(getCurrentAngle());  }}  }
class C{  private static void initNetMask(String... lines){  for (  String line : lines) {    validNetMasks.put(line,line);  }}  }
class C{  public static void fill(double[] array,int start,int end,double value){  Arrays.checkStartAndEnd(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  public void testCloneNodeNotNamespaceAware() throws Exception {  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  factory.setNamespaceAware(false);  builder=factory.newDocumentBuilder();  document=builder.parse(new InputSource(new StringReader("<menu " + "xmlns:f=\"http://food\" xmlns:a=\"http://addons\">" + "<f:item a:standard=\"strawberry\" deluxe=\"yes\">Waffles</f:item></menu>")));  name=(Element)document.getFirstChild().getFirstChild();  Element clonedName=(Element)name.cloneNode(true);  assertNull(clonedName.getNamespaceURI());  assertEquals("f:item",clonedName.getNodeName());  assertNull(clonedName.getLocalName());  assertNull(clonedName.getNamespaceURI());  assertEquals("yes",clonedName.getAttribute("deluxe"));  assertEquals("strawberry",clonedName.getAttribute("a:standard"));  assertEquals("",clonedName.getAttributeNS("http://addons","standard"));}  }
class C{  public IrregularLayoutManager(Context context){  this(context,DEFAULT_SPAN_COUNT);}  }
class C{  private void add(SessionID sessionID){  remoteSessionSet.add(sessionID);}  }
class C{  private JsonValue correlateTarget() throws SynchronizationException {  return correlateTarget(null);}  }
class C{  public static BooleanArgument enableTLSArgument() throws ArgumentException {  return BooleanArgument.builder("enableStartTLS").shortIdentifier(OPTION_SHORT_START_TLS).description(INFO_SETUP_DESCRIPTION_ENABLE_STARTTLS.get()).buildArgument();}  }
class C{  protected void callSubtreeVisitors(XPathVisitor visitor){  m_functionExpr.callVisitors(new FunctionOwner(),visitor);  super.callSubtreeVisitors(visitor);}  }
class C{  @Override public void onException(JMSException exception){  logger.warn("JMS Connection exception occurred, {} will unsubscribe, and attempt reconnect.",getName(),exception);  unsubscribe();  try {    subscribe(messageHandler);  } catch (  ResourceException e) {    if (null != connection) {      try {        connection.close();      } catch (      JMSException je) {        logger.error("Failure closing jms connection after reconnect attempt.",je);      }    }    logger.error("Failure to re-create JMS connection",e);    throw new InvalidException("Failure to re-create JMS connection",e);  }}  }
class C{  public CertificateVerify(HandshakeIODataStream in,int length) throws IOException {  if (length == 0) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect CertificateVerify");  } else {    if (in.readUint16() != length - 2) {      fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect CertificateVerify");    }    signedHash=in.read(length - 2);  }  this.length=length;}  }
class C{  public LDAPUrl(final boolean isSecured,final String host,final Integer port,final DN name,final SearchScope scope,final Filter filter,final String... attributes){  final StringBuilder urlBuffer=new StringBuilder();  this.isSecured=isSecured;  if (this.isSecured) {    urlBuffer.append(SSL_URL_SCHEME);  } else {    urlBuffer.append(DEFAULT_URL_SCHEME);  }  urlBuffer.append("://");  if (host == null) {    this.host=DEFAULT_HOST;  } else {    this.host=host;    urlBuffer.append(this.host);  }  int listenPort=DEFAULT_PORT;  if (port == null) {    listenPort=isSecured ? DEFAULT_SSL_PORT : DEFAULT_PORT;  } else {    listenPort=port.intValue();    if (listenPort < 1 || listenPort > 65535) {      final LocalizableMessage msg=ERR_LDAPURL_BAD_PORT.get(listenPort);      throw new LocalizedIllegalArgumentException(msg);    }    urlBuffer.append(COLON_CHAR);    urlBuffer.append(listenPort);  }  this.port=listenPort;  urlBuffer.append(SLASH_CHAR);  if (name != null) {    this.name=name;    percentEncoder(name.toString(),urlBuffer);  } else {    this.name=DEFAULT_DN;  }  urlBuffer.append(QUESTION_CHAR);switch (attributes.length) {case 0:    this.attributes=Collections.emptyList();  break;case 1:this.attributes=Collections.singletonList(attributes[0]);urlBuffer.append(attributes[0]);break;default :this.attributes=Collections.unmodifiableList(Arrays.asList(attributes));urlBuffer.append(attributes[0]);for (int i=1; i < attributes.length; i++) {urlBuffer.append(COMMA_CHAR);urlBuffer.append(attributes[i]);}break;}urlBuffer.append(QUESTION_CHAR);if (scope != null) {this.scope=scope;urlBuffer.append(scope);} else {this.scope=DEFAULT_SCOPE;}urlBuffer.append(QUESTION_CHAR);if (filter != null) {this.filter=filter;urlBuffer.append(this.filter);} else {this.filter=DEFAULT_FILTER;}urlString=urlBuffer.toString();}  }
class C{  @Override public Animation onCreateAnimation(final int transit,final boolean enter,final int nextAnim){  return delegate.onCreateAnimation(transit,enter,nextAnim);}  }
class C{  void performAuthentication(final LoginContext loginContext,final BindOperation bindOp){  this.bindOp=bindOp;  try {    Subject.doAs(loginContext.getSubject(),this);  } catch (  final PrivilegedActionException e) {    logger.traceException(e);    final LocalizableMessage msg=ERR_SASL_PROTOCOL_ERROR.get(mechanism,getExceptionMessage(e));    handleError(msg);  }}  }
class C{  @Override @Test(timeout=120000) public void testByteBufferRead() throws Exception {  doByteBufferRead(CIPHER_OPENSSL_JNA,false);  doByteBufferRead(CIPHER_OPENSSL_JNA,true);}  }
class C{  @SuppressWarnings("unused") public static CallSite bootstrapConstructor(MethodHandles.Lookup lookup,String methodName,MethodType methodType){  boolean[] primitives=new boolean[methodType.parameterCount()];  for (int i=0; i < primitives.length; ++i) {    primitives[i]=methodType.parameterType(i).isPrimitive();  }  MethodHandle mh=MethodHandles.insertArguments(constructorHandle,0,methodType.returnType(),lookup.lookupClass(),primitives);  mh=mh.asCollector(Object[].class,methodType.parameterCount()).asType(methodType);  MutableCallSite mCallSite=new MutableCallSite(mh);  mCallSite.setTarget(mh);  return mCallSite;}  }
class C{  public IncrementalSAXSource_Filter(CoroutineManager co,int controllerCoroutineID){  this.init(co,controllerCoroutineID,-1);}  }
class C{  public NSString(byte[] bytes,String encoding) throws UnsupportedEncodingException {  this(bytes,0,bytes.length,encoding);}  }
class C{  public void releaseService(BeanContextChild child,Object requestor,Object service){  if (child == null)   throw new NullPointerException("child");  if (requestor == null)   throw new NullPointerException("requestor");  if (service == null)   throw new NullPointerException("service");  BCSSChild bcsc;synchronized (BeanContext.globalHierarchyLock) {synchronized (children) {      bcsc=(BCSSChild)children.get(child);    }    if (bcsc != null)     bcsc.releaseService(requestor,service); else     throw new IllegalArgumentException("child actual is not a child of this BeanContext");  }}  }
class C{  public void test_SelectLeftOuterJoin() throws SQLException {  String sql="SELECT distinct s.snum as ssnum, c.snum as ccnum FROM " + DatabaseCreator.CUSTOMERS_TABLE + " c left outer join "+ DatabaseCreator.SALESPEOPLE_TABLE+ " s on s.snum=c.snum";  ResultSet result=statement.executeQuery(sql);  HashMap<Integer,Integer> value=new HashMap<Integer,Integer>();  value.put(1001,1001);  value.put(1002,1002);  value.put(1003,1003);  value.put(1004,1004);  value.put(1007,1007);  while (result.next()) {    int key=result.getInt("ssnum");    Object val=result.getObject("ccnum");    assertTrue("wrong value of ssnum field",value.containsKey(key));    assertEquals("wrong value of ccnum field",value.get(key),(Integer)val);    value.remove(key);  }  assertTrue("expected rows number doesn't equal actual rows number",value.isEmpty());  result.close();}  }
class C{  public org.omg.CORBA.Any to_any(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("to_any",_opsClass);  DynSequenceOperations $self=(DynSequenceOperations)$so.servant;  try {    return $self.to_any();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  private synchronized void rotate(){  try {    writer.flush();    writer.close();  } catch (  Exception e) {    logger.traceException(e);    errorHandler.handleCloseError(e);  }  File currentFile=namingPolicy.getInitialName();  File newFile=namingPolicy.getNextName();  currentFile.renameTo(newFile);  try {    constructWriter(currentFile,filePermissions,encoding,append,bufferSize);  } catch (  Exception e) {    logger.traceException(e);    errorHandler.handleOpenError(currentFile,e);  }  logger.trace("Log file %s rotated and renamed to %s",currentFile,newFile);  totalFilesRotated++;  lastRotationTime=TimeThread.getCalendar();}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.ActionElement createActionElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.ActionElementImpl();}  }
class C{  LoginProcess startLoginProcess(LoginProcess loginProcess) throws AuthLoginException {  LoginConfiguration loginConfiguration=loginProcess.getLoginConfiguration();  HttpServletRequest request=loginConfiguration.getHttpRequest();  AuthIndexType indexType=loginConfiguration.getIndexType();  String indexValue=loginConfiguration.getIndexValue();  AuthenticationContext authContext=loginProcess.getAuthContext();  if (indexType != null && indexType.equals(AuthIndexType.RESOURCE)) {    Map<String,Set<String>> envMap=coreServicesWrapper.getEnvMap(request);    if (StringUtils.isBlank(indexValue) || Boolean.parseBoolean(indexValue)) {      indexValue=coreServicesWrapper.getResourceURL(request);    }    authContext.login(indexType.getIndexType(),indexValue,envMap,null);  } else   if (indexType != null && indexType.getIndexType() != null) {    authContext.login(indexType.getIndexType(),indexValue);  } else {    authContext.login();  }  try {    HttpServletResponse response=loginConfiguration.getHttpResponse();    coreServicesWrapper.setLbCookie(authContext.getAuthContext(),request,response);  } catch (  AuthException e) {    throw new AuthLoginException(e);  }  return loginProcess;}  }
class C{  private SessionResponse handleException(SessionRequest req,SessionID sid,String error){  SessionResponse response=new SessionResponse(req.getRequestID(),req.getMethodID());  response.setException(sid + " " + error);  return response;}  }
class C{  public static GSSAPISASLBindRequest copyOfGSSAPISASLBindRequest(final GSSAPISASLBindRequest request){  return new GSSAPISASLBindRequestImpl(request);}  }
class C{  public InternalSession recoverSessionByHandle(String sessionHandle){  final TokenFilter tokenFilter=new TokenFilterBuilder().withAttribute(SessionTokenField.SESSION_HANDLE.getField(),sessionHandle).build();  Token token=null;  try {    final Collection<Token> results=coreTokenService.query(tokenFilter);    if (results.isEmpty()) {      return null;    }    if (results.size() != 1) {      debug.error("Duplicate session handle found in Core Token Service");      return null;    }    token=CollectionUtils.getFirstItem(results);  } catch (  CoreTokenException e) {    debug.error("Failed to retrieve session by its handle",e);  }  if (token == null) {    return null;  }  return getInternalSessionFromToken(token);}  }
class C{  public void makeImmutable(){  if (!mutable) {    return;  }  super.makeImmutable();  if ((keyInfo != null) && (!keyInfo.isEmpty())) {    keyInfo=Collections.unmodifiableList(keyInfo);  }}  }
class C{  protected void parseDOMAttributes(Element element) throws SAML2Exception {  super.parseDOMAttributes(element);}  }
class C{  public ObjectFactory(){  super(grammarInfo);}  }
class C{  public void warn(SourceLocator srcLctr,String msg,Object[] args) throws TransformerException {  warn(srcLctr,null,null,msg,args);}  }
class C{  public BasicAttributes(boolean ignoreCase){  this.ignoreCase=ignoreCase;}  }
class C{  public ReplicationStream(InputStream stream,ClassLoader[] classLoaders) throws IOException {  super(stream);  this.classLoaders=classLoaders;}  }
class C{  public static Cookie newCookie(String name,String value){  return newCookie(name,value,defAge,null,null);}  }
class C{  static <T>Promise<Void> any(final List<Promise<T>> promises){  return any(promises.toArray(new Promise[promises.size()]));}  }
class C{  public void writeAccountFedInfo(String userID,FSAccountFedInfoKey fedInfoKey,FSAccountFedInfo fedInfo) throws FSAccountMgmtException {  FSUtils.debug.message("FSAccountManager.writeAccountFedInfo() : called");  if (userID == null) {    FSUtils.debug.error("FSAccountManager.writeAccountFedInfo():" + "Invalid Argument : user ID is NULL");    throw new FSAccountMgmtException(IFSConstants.NULL_USER_DN,null);  }  if (fedInfoKey == null) {    FSUtils.debug.error("FSAccountManager.writeAccountFedInfo():" + "Invalid Argument : FedInfo key is NULL");    throw new FSAccountMgmtException(IFSConstants.NULL_FED_INFO_KEY_OBJECT,null);  }  if (fedInfo == null) {    FSUtils.debug.error("FSAccountManager.writeAccountFedInfo():" + "Invalid Argument : FedInfo is NULL");    throw new FSAccountMgmtException(IFSConstants.NULL_FED_INFO_OBJECT,null);  }  try {    Set attrNames=new HashSet();    attrNames.add(FSAccountUtils.USER_FED_INFO_KEY_ATTR);    attrNames.add(FSAccountUtils.USER_FED_INFO_ATTR);    Map attrsMap=provider.getAttributes(userID,attrNames);    if (attrsMap == null) {      attrsMap=new HashMap();    }    Set existFedInfoKeySet=(Set)attrsMap.get(FSAccountUtils.USER_FED_INFO_KEY_ATTR);    if (existFedInfoKeySet == null) {      existFedInfoKeySet=new HashSet();    } else     if (!existFedInfoKeySet.isEmpty()) {      Iterator i=existFedInfoKeySet.iterator();      String existFedInfoKeyStr="";      String filter=FSAccountUtils.createFilter(fedInfoKey);      while (i.hasNext()) {        existFedInfoKeyStr=(String)i.next();        if (existFedInfoKeyStr.indexOf(filter) >= 0) {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("FSAccountManager.writeAccountFedInfo():" + "AccountFedInfo Key Already Exists, " + "will overwrite.");          }          existFedInfoKeySet.remove(existFedInfoKeyStr);          break;        }      }    }    String fedInfoKeyStr=FSAccountUtils.objectToKeyString(fedInfoKey);    existFedInfoKeySet.add(fedInfoKeyStr);    Map attrMap=new HashMap();    attrMap.put(FSAccountUtils.USER_FED_INFO_KEY_ATTR,existFedInfoKeySet);    Set existFedInfoSet=(Set)attrsMap.get(FSAccountUtils.USER_FED_INFO_ATTR);    if (existFedInfoSet == null) {      existFedInfoSet=new HashSet();    } else     if (!existFedInfoSet.isEmpty()) {      Iterator i=existFedInfoSet.iterator();      String existFedInfoStr="";      String filter=FSAccountUtils.createFilter(fedInfoKey);      while (i.hasNext()) {        existFedInfoStr=(String)i.next();        if (existFedInfoStr.indexOf(filter) >= 0) {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("FSAccountManager.writeAccountFedInfo():" + " AccountFedInfo Already Exists, will " + "overwrite");          }          existFedInfoSet.remove(existFedInfoStr);          break;        }      }    }    String fedInfoStr=FSAccountUtils.objectToInfoString(fedInfo);    existFedInfoSet.add(fedInfoStr);    attrMap.put(FSAccountUtils.USER_FED_INFO_ATTR,existFedInfoSet);    provider.setAttributes(userID,attrMap);    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSAccountManager.writeAccountFedInfo(): Key : " + fedInfoKeyStr + ", Value : "+ fedInfoStr+ " : Added ");    }    String[] args={userID,fedInfoStr,fedInfoKeyStr};    LogUtil.access(Level.INFO,LogUtil.WRITE_ACCOUNT_FED_INFO,args);  } catch (  DataStoreProviderException de) {    FSUtils.debug.error("FSAccountManager.writeAccountFedInfo(): Exception: ",de);    throw new FSAccountMgmtException(de.getMessage());  }}  }
class C{  public void dispatch(NamingListener listener){  listener.namingExceptionThrown(this);}  }
class C{  private boolean sideCollide(int scale){  Shape intersection;  for (int i=0; i < 4; i++) {    intersection=SVGPath.intersect(getSpriteBoundsArray()[scale],sMario.getStageFloorBase().getSpriteBoundsArray()[i]);    if (intersection.getBoundsInParent().getWidth() != -1)     return true;  }  for (  StageBlock sprite : SpriteHandler.getStageElements()) {    intersection=SVGPath.intersect(getSpriteBoundsArray()[scale],sprite.getSpriteBounds());    if (intersection.getBoundsInParent().getWidth() != -1)     return true;  }  return false;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap attributes;  Node element;  Attr attribute;  NodeList elementList;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagNameNS("http://www.nist.gov","employee");  element=elementList.item(1);  attributes=element.getAttributes();{    boolean success=false;    try {      attribute=(Attr)attributes.removeNamedItemNS("http://www.Nist.gov","domestic");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NOT_FOUND_ERR);    }    assertTrue("throw_NOT_FOUND_ERR",success);  }}  }
class C{  public String formatDateTime(Date date){  return formatDateTime(date,null);}  }
class C{  private void endFormals(){  if (hasFormals) {    hasFormals=false;    buf.append('>');  }}  }
class C{  public static final String createMessage(String msgKey,Object args[]){  return createMsg(XSLTBundle,msgKey,args);}  }
class C{  public Cursor query(SQLiteDatabase db,String[] projectionIn,String selection,String[] selectionArgs,String groupBy,String having,String sortOrder,String limit){  return query(db,projectionIn,selection,selectionArgs,groupBy,having,sortOrder,limit,null);}  }
class C{  public void throwing(String sourceClass,String sourceMethod,Throwable thrown){  if (!isLoggable(Level.FINER)) {    return;  }  LogRecord lr=new LogRecord(Level.FINER,"THROW");  lr.setSourceClassName(sourceClass);  lr.setSourceMethodName(sourceMethod);  lr.setThrown(thrown);  doLog(lr);}  }
class C{  boolean canReplace(ReplaceHolder rh){  if (!getAllowsInvalid()) {    StringBuilder replace=null;    String text=rh.text;    int tl=(text != null) ? text.length() : 0;    if (tl == 0 && rh.length == 1 && getFormattedTextField().getSelectionStart() != rh.offset) {      while (rh.offset > 0 && isLiteral(rh.offset)) {        rh.offset--;      }    }    int max=Math.min(getMaxLength() - rh.offset,Math.max(tl,rh.length));    for (int counter=0, textIndex=0; counter < max; counter++) {      if (textIndex < tl && isValidCharacter(rh.offset + counter,text.charAt(textIndex))) {        char aChar=text.charAt(textIndex);        if (aChar != getCharacter(rh.offset + counter,aChar)) {          if (replace == null) {            replace=new StringBuilder();            if (textIndex > 0) {              replace.append(text.substring(0,textIndex));            }          }        }        if (replace != null) {          replace.append(getCharacter(rh.offset + counter,aChar));        }        textIndex++;      } else       if (isLiteral(rh.offset + counter)) {        if (replace != null) {          replace.append(getLiteral(rh.offset + counter));          if (textIndex < tl) {            max=Math.min(max + 1,getMaxLength() - rh.offset);          }        } else         if (textIndex > 0) {          replace=new StringBuilder(max);          replace.append(text.substring(0,textIndex));          replace.append(getLiteral(rh.offset + counter));          if (textIndex < tl) {            max=Math.min(max + 1,getMaxLength() - rh.offset);          } else           if (rh.cursorPosition == -1) {            rh.cursorPosition=rh.offset + counter;          }        } else {          rh.offset++;          rh.length--;          counter--;          max--;        }      } else       if (textIndex >= tl) {        if (replace == null) {          replace=new StringBuilder();          if (text != null) {            replace.append(text);          }        }        replace.append(getPlaceholderCharacter());        if (tl > 0 && rh.cursorPosition == -1) {          rh.cursorPosition=rh.offset + counter;        }      } else {        return false;      }    }    if (replace != null) {      rh.text=replace.toString();    } else     if (text != null && rh.offset + tl > getMaxLength()) {      rh.text=text.substring(0,getMaxLength() - rh.offset);    }    if (getOverwriteMode() && rh.text != null) {      rh.length=rh.text.length();    }  }  return super.canReplace(rh);}  }
class C{  public LinkedListNode(Object object,LinkedListNode next,LinkedListNode previous){  this.object=object;  this.next=next;  this.previous=previous;}  }
class C{  public String addReferral(Subject adminSubject,String realm,ReferralPrivilege referral) throws EntitlementException {  ResourceSaveIndexes indexes=referral.getResourceSaveIndexes(adminSubject,realm);  SSOToken token=getSSOToken(adminSubject);  String dn=null;  try {    createDefaultSubConfig(token,realm,REFERRAL_STORE);    dn=getPrivilegeDistinguishedName(referral.getName(),realm,REFERRAL_STORE);    SMSEntry s=new SMSEntry(token,dn);    Map<String,Set<String>> map=new HashMap<String,Set<String>>();    Set<String> searchable=new HashSet<String>();    map.put(SMSEntry.ATTR_XML_KEYVAL,searchable);    if (indexes != null) {      for (      String i : indexes.getHostIndexes()) {        searchable.add(HOST_INDEX_KEY + "=" + i);      }      for (      String i : indexes.getPathIndexes()) {        searchable.add(PATH_INDEX_KEY + "=" + i);      }      for (      String i : indexes.getParentPathIndexes()) {        searchable.add(PATH_PARENT_INDEX_KEY + "=" + i);      }    }    Set<String> setServiceID=new HashSet<String>(2);    map.put(SMSEntry.ATTR_SERVICE_ID,setServiceID);    setServiceID.add("indexes");    Set<String> set=new HashSet<String>(2);    map.put(SMSEntry.ATTR_KEYVAL,set);    set.add(SERIALIZABLE_INDEX_KEY + "=" + referral.toJSON());    Set<String> setObjectClass=new HashSet<String>(4);    map.put(SMSEntry.ATTR_OBJECTCLASS,setObjectClass);    setObjectClass.add(SMSEntry.OC_TOP);    setObjectClass.add(SMSEntry.OC_SERVICE_COMP);    Set<String> info=new HashSet<String>(8);    String privilegeName=referral.getName();    if (privilegeName != null) {      info.add(Privilege.NAME_ATTRIBUTE + "=" + privilegeName);    }    String privilegeDesc=referral.getDescription();    if (privilegeDesc != null) {      info.add(Privilege.DESCRIPTION_ATTRIBUTE + "=" + privilegeDesc);    }    String createdBy=referral.getCreatedBy();    if (createdBy != null) {      info.add(Privilege.CREATED_BY_ATTRIBUTE + "=" + createdBy);    }    String lastModifiedBy=referral.getLastModifiedBy();    if (lastModifiedBy != null) {      info.add(Privilege.LAST_MODIFIED_BY_ATTRIBUTE + "=" + lastModifiedBy);    }    long creationDate=referral.getCreationDate();    if (creationDate > 0) {      String data=Long.toString(creationDate) + "=" + Privilege.CREATION_DATE_ATTRIBUTE;      info.add(data);      info.add("|" + data);    }    long lastModifiedDate=referral.getLastModifiedDate();    if (lastModifiedDate > 0) {      String data=Long.toString(lastModifiedDate) + "=" + Privilege.LAST_MODIFIED_DATE_ATTRIBUTE;      info.add(data);      info.add("|" + data);    }    for (    String rlm : referral.getRealms()) {      info.add(REFERRAL_REALMS + "=" + rlm);    }    for (    String n : referral.getApplicationTypeNames(adminSubject,realm)) {      info.add(REFERRAL_APPLS + "=" + n);    }    for (    String n : referral.getMapApplNameToResources().keySet()) {      info.add(Privilege.APPLICATION_ATTRIBUTE + "=" + n);    }    map.put("ou",info);    s.setAttributes(map);    s.save();    Map<String,String> params=new HashMap<String,String>();    params.put(NotificationServlet.ATTR_NAME,privilegeName);    params.put(NotificationServlet.ATTR_REALM_NAME,realm);    Notifier.submit(NotificationServlet.REFERRAL_ADDED,params);    updateIndexCount(realm,1,true);  } catch (  SSOException e) {    throw new EntitlementException(270,e);  }catch (  SMSException e) {    throw new EntitlementException(270,e);  }  return dn;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Attr newAttribute;  Node testAddress;  NamedNodeMap attributes;  Node newNode;  String attrValue;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testAddress=elementList.item(2);  newAttribute=doc.createAttribute("street");  attributes=testAddress.getAttributes();  newNode=attributes.setNamedItem(newAttribute);  attrValue=newNode.getNodeValue();  assertEquals("returnedNodeValue","No",attrValue);}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.LStElement createLStElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.LStElementImpl();}  }
class C{  private void expect(char expectedSymbol) throws ParseException {  if (!accept(expectedSymbol))   throw new ParseException("Expected '" + expectedSymbol + "' but found '"+ (char)data[index]+ "'",index);}  }
class C{  public MatteBorder(Insets borderInsets,Icon tileIcon){  super(borderInsets);  this.tileIcon=tileIcon;}  }
class C{  public void removeGlobalConfiguration(String groupName) throws SMSException, SSOException {  if (serviceName.equalsIgnoreCase(IdConstants.REPO_SERVICE) || serviceName.equalsIgnoreCase(ISAuthConstants.AUTH_SERVICE_NAME)) {    String[] args={serviceName};    throw (new SMSException(IUMSConstants.UMS_BUNDLE_NAME,"sms-SERVICE_CORE_CANNOT_DELETE",args));  }  if ((groupName == null) || groupName.length() == 0) {    groupName=SMSUtils.DEFAULT;  }  validateSCM();  String gdn=scm.constructServiceConfigDN(groupName,CreateServiceConfig.GLOBAL_CONFIG_NODE,null);  CachedSMSEntry cEntry=CachedSMSEntry.getInstance(token,gdn);  if (cEntry.isDirty()) {    cEntry.refresh();  }  SMSEntry entry=cEntry.getClonedSMSEntry();  entry.delete(token);  cEntry.refresh(entry);}  }
class C{  public JTableHeader(){  this(null);}  }
class C{  public static PlayerBucketEmptyEvent callPlayerBucketEmptyEvent(EntityHuman who,int clickedX,int clickedY,int clickedZ,EnumDirection clickedFace,ItemStack itemInHand){  return (PlayerBucketEmptyEvent)getPlayerBucketEvent(false,who,clickedX,clickedY,clickedZ,clickedFace,itemInHand,Items.BUCKET);}  }
class C{  void clearSubjectResultCache(String tokenIdString) throws PolicyException {  if (DEBUG.messageEnabled()) {    DEBUG.message("Policy.clearSubjectResultCache(tokenIdString): " + " clearing cached subject evaluation result for " + " tokenId XXXXX");  }  users.clearSubjectResultCache(tokenIdString);}  }
class C{  @Override public void roll(int field,int value){  if (value == 0) {    return;  }  if (field < 0 || field >= ZONE_OFFSET) {    throw new IllegalArgumentException();  }  complete();  int days, day, mod, maxWeeks, newWeek;  int max=-1;switch (field) {case YEAR:    max=maximums[field];  break;case WEEK_OF_YEAR:days=daysInYear(fields[YEAR]);day=DAY_OF_YEAR;mod=mod7(fields[DAY_OF_WEEK] - fields[day] - (getFirstDayOfWeek() - 1));maxWeeks=(days - 1 + mod) / 7 + 1;newWeek=mod(fields[field] - 1 + value,maxWeeks) + 1;if (newWeek == maxWeeks) {int addDays=(newWeek - fields[field]) * 7;if (fields[day] > addDays && fields[day] + addDays > days) {set(field,1);} else {set(field,newWeek - 1);}} else if (newWeek == 1) {int week=(fields[day] - ((fields[day] - 1) / 7 * 7) - 1 + mod) / 7 + 1;if (week > 1) {set(field,1);} else {set(field,newWeek);}} else {set(field,newWeek);}break;case WEEK_OF_MONTH:days=daysInMonth();day=DATE;mod=mod7(fields[DAY_OF_WEEK] - fields[day] - (getFirstDayOfWeek() - 1));maxWeeks=(days - 1 + mod) / 7 + 1;newWeek=mod(fields[field] - 1 + value,maxWeeks) + 1;if (newWeek == maxWeeks) {if (fields[day] + (newWeek - fields[field]) * 7 > days) {set(day,days);} else {set(field,newWeek);}} else if (newWeek == 1) {int week=(fields[day] - ((fields[day] - 1) / 7 * 7) - 1 + mod) / 7 + 1;if (week > 1) {set(day,1);} else {set(field,newWeek);}} else {set(field,newWeek);}break;case DATE:max=daysInMonth();break;case DAY_OF_YEAR:max=daysInYear(fields[YEAR]);break;case DAY_OF_WEEK:max=maximums[field];lastDateFieldSet=WEEK_OF_MONTH;break;case DAY_OF_WEEK_IN_MONTH:max=(fields[DATE] + ((daysInMonth() - fields[DATE]) / 7 * 7) - 1) / 7 + 1;break;case ERA:case MONTH:case AM_PM:case HOUR:case HOUR_OF_DAY:case MINUTE:case SECOND:case MILLISECOND:set(field,mod(fields[field] + value,maximums[field] + 1));if (field == MONTH && fields[DATE] > daysInMonth()) {set(DATE,daysInMonth());} else if (field == AM_PM) {lastTimeFieldSet=HOUR;}break;}if (max != -1) {set(field,mod(fields[field] - 1 + value,max) + 1);}complete();}  }
class C{  public PlaPointFloat left_tangential_point(PlaPointFloat p_to_point,double p_distance){  if (p_to_point == null)   return null;  PlaPointFloat[] tangent_points=tangential_points(p_to_point,p_distance);  if (tangent_points.length < 2)   return null;  if (p_to_point.side_of(this,tangent_points[0]) == PlaSide.ON_THE_LEFT)   return tangent_points[0]; else   return tangent_points[1];}  }
class C{  private byte[] calculateConfigDigest() throws DirectoryException {  try (InputStream inputStream=new FileInputStream(configFile)){    return calculateDigest(inputStream);  } catch (  Exception e) {    LocalizableMessage message=ERR_CONFIG_CANNOT_CALCULATE_DIGEST.get(configFile,stackTraceToSingleLineString(e));    throw new DirectoryException(DirectoryServer.getServerErrorResultCode(),message,e);  }}  }
class C{  public boolean isAccountExpired(){  DEBUG.message("in AMAccountLockout::isAccountExpired");  String accountLife=loginState.getAccountLife();  if (accountLife == null) {    if (DEBUG.messageEnabled()) {      DEBUG.message("EXIT accountLife is null :" + accountLife);    }    return false;  }  Date exprDate=Locale.parseNormalizedDateString(accountLife);  if (DEBUG.messageEnabled()) {    DEBUG.message("exprDate = " + exprDate);  }  if (exprDate != null) {    return exprDate.before(newDate());  }  return false;}  }
class C{  public int size(){  return size;}  }
class C{  public static int methodModifiers(){  return PUBLIC | PROTECTED | PRIVATE| ABSTRACT| STATIC| FINAL| SYNCHRONIZED| NATIVE| STRICT;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String badSubstring;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();{    boolean success=false;    try {      badSubstring=child.substringData(10,-3);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throws_INDEX_SIZE_ERR",success);  }}  }
class C{  private boolean casHead(HeadIndex<K,V> cmp,HeadIndex<K,V> val){  return UNSAFE.compareAndSwapObject(this,headOffset,cmp,val);}  }
class C{  protected void fireInternalFrameEvent(int id){  Object[] listeners=listenerList.getListenerList();  InternalFrameEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == InternalFrameListener.class) {      if (e == null) {        e=new InternalFrameEvent(this,id);      }switch (e.getID()) {case InternalFrameEvent.INTERNAL_FRAME_OPENED:        ((InternalFrameListener)listeners[i + 1]).internalFrameOpened(e);      break;case InternalFrameEvent.INTERNAL_FRAME_CLOSING:    ((InternalFrameListener)listeners[i + 1]).internalFrameClosing(e);  break;case InternalFrameEvent.INTERNAL_FRAME_CLOSED:((InternalFrameListener)listeners[i + 1]).internalFrameClosed(e);break;case InternalFrameEvent.INTERNAL_FRAME_ICONIFIED:((InternalFrameListener)listeners[i + 1]).internalFrameIconified(e);break;case InternalFrameEvent.INTERNAL_FRAME_DEICONIFIED:((InternalFrameListener)listeners[i + 1]).internalFrameDeiconified(e);break;case InternalFrameEvent.INTERNAL_FRAME_ACTIVATED:((InternalFrameListener)listeners[i + 1]).internalFrameActivated(e);break;case InternalFrameEvent.INTERNAL_FRAME_DEACTIVATED:((InternalFrameListener)listeners[i + 1]).internalFrameDeactivated(e);break;default :break;}}}}  }
class C{  public static int findWordStart(String line,int pos,String noWordSep,boolean joinNonWordChars,boolean camelCasedWords,boolean eatWhitespace){  return findWordStart((CharSequence)line,pos,noWordSep,joinNonWordChars,camelCasedWords,eatWhitespace);}  }
class C{  public DirectoryException(ResultCode resultCode,LocalizableMessage errorMessage,Throwable cause){  super(errorMessage,cause);  this.resultCode=resultCode;  this.matchedDN=null;  this.referralURLs=null;}  }
class C{  OAuthModule(final OAuthResolverServiceConfigurator serviceConfigurator,final OAuthResolverService resolverService,final CallbackHandler callbackHandler,final String authTokenHeader,final String authResolverHeader){  this.serviceConfigurator=serviceConfigurator;  this.resolverService=resolverService;  this.callbackHandler=callbackHandler;  this.authTokenHeader=authTokenHeader;  this.authResolverHeader=authResolverHeader;}  }
class C{  @Override public void storeChildren(PrintWriter aWriter,int indent,Object aService,StoreDescription parentDesc) throws Exception {  if (aService instanceof StandardService) {    StandardService service=(StandardService)aService;    LifecycleListener listeners[]=((Lifecycle)service).findLifecycleListeners();    storeElementArray(aWriter,indent,listeners);    Executor[] executors=service.findExecutors();    storeElementArray(aWriter,indent,executors);    Connector connectors[]=service.findConnectors();    storeElementArray(aWriter,indent,connectors);    Engine container=service.getContainer();    if (container != null) {      StoreDescription elementDesc=getRegistry().findDescription(container.getClass());      if (elementDesc != null) {        IStoreFactory factory=elementDesc.getStoreFactory();        factory.store(aWriter,indent,container);      }    }  }}  }
class C{  public static PdfAction createGoToR(PdfFileSpec fileSpec,PdfDestination destination){  return new PdfAction().put(PdfName.S,PdfName.GoToR).put(PdfName.F,fileSpec.getPdfObject()).put(PdfName.D,destination.getPdfObject());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(textwithnomarkup.class,args);}  }
class C{  public boolean ready() throws IOException {  return in.ready();}  }
class C{  public BatchUpdateException(int[] updateCounts,Throwable cause){  super(cause);  this.updateCounts=updateCounts;}  }
class C{  public PdfMerger(PdfDocument pdfDocument){  this(pdfDocument,true,true);}  }
class C{  public boolean validate(Set<String> values){  for (  String value : values) {    if (!validate(value)) {      return false;    }  }  return true;}  }
class C{  public boolean export_specctra_session_file(String p_design_name,OutputStream p_output_stream){  if (board_is_read_only)   return false;  SpectraWriteSesFile writer=new SpectraWriteSesFile(stat,r_board,p_output_stream);  return writer.write(p_design_name);}  }
class C{  int findIndexOfValidField(String blob){  for (  Field field : AttributeCompressionStrategy.getAllValidFields(InternalSession.class)) {    String search=JSONSerialisation.jsonAttributeName(field.getName());    int index=blob.indexOf(search);    if (index != -1) {      return index;    }  }  return -1;}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  s.writeObject(myMimeType.getMimeType());}  }
class C{  private AccountUsabilityRequestControl(final boolean isCritical){  this.isCritical=isCritical;}  }
class C{  public void testScrollToCommand() throws Exception {  ScrollView scrollView=getViewAtPath(0);  ScrollViewTestModule jsModule=getReactContext().getCatalystInstance().getJSModule(ScrollViewTestModule.class);  assertEquals(0,scrollView.getScrollY());  jsModule.scrollTo(0,300);  waitForBridgeAndUIIdle();  getInstrumentation().waitForIdleSync();  long timeout=10000;  long interval=50;  long start=System.currentTimeMillis();  while (System.currentTimeMillis() - start < timeout) {    if (scrollView.getScrollY() > 0) {      break;    }    Thread.sleep(interval);  }  assertNotSame(0,scrollView.getScrollY());  assertFalse("Drag should not be called with scrollTo",mScrollListenerModule.dragEventsMatch());}  }
class C{  private void processInboundRemove(final PreParseAddOperation addOperation){  final List<RawAttribute> inAttrs=new LinkedList<>(addOperation.getRawAttributes());  final ListIterator<RawAttribute> iterator=inAttrs.listIterator();  while (iterator.hasNext()) {    final RawAttribute rawAttr=iterator.next();    final String attrName=toLowerCase(rawAttr.getAttributeType().trim());    if (attributesToRemove.contains(attrName)) {      if (logger.isTraceEnabled()) {        logger.trace("AttributeCleanupPlugin removing '%s'",rawAttr.getAttributeType());      }      iterator.remove();    }  }  addOperation.setRawAttributes(inAttrs);}  }
class C{  public String toString(){  return ("RADIUSPrincipal:  " + name);}  }
class C{  private int[] parseMonths(String line){  int[] months=new int[12];  String[] numbers=line.split("\\s");  if (numbers.length != 12) {    throw new IllegalArgumentException("wrong number of months on line: " + Arrays.toString(numbers) + "; count: "+ numbers.length);  }  for (int i=0; i < 12; i++) {    try {      months[i]=Integer.valueOf(numbers[i]);    } catch (    NumberFormatException nfe) {      throw new IllegalArgumentException("bad key: " + numbers[i]);    }  }  return months;}  }
class C{  public static Color fromBGR(int blue,int green,int red) throws IllegalArgumentException {  return new Color(red,green,blue);}  }
class C{  public SoftReference(T r){  super(r,null);}  }
class C{  public void test_getClientAliases(){  init(CLIENT);  assertNull(manager.getClientAliases(null,null));  assertNull(manager.getClientAliases("",null));  String[] resArray=manager.getClientAliases(TYPE_RSA,null);  assertNotNull(resArray);  assertEquals(3,resArray.length);  assertKnownAliases(resArray);}  }
class C{  public boolean equals(Object o){  if (o instanceof ResponseProviders) {    ResponseProviders i=(ResponseProviders)o;    Iterator iter=providers.entrySet().iterator();    while (iter.hasNext()) {      Object ss=((Map.Entry)iter.next()).getValue();      if (!i.providers.containsValue(ss)) {        return (false);      }    }    return true;  }  return false;}  }
class C{  private void tryReduceLevel(){  HeadIndex<K,V> h=head;  HeadIndex<K,V> d;  HeadIndex<K,V> e;  if (h.level > 3 && (d=(HeadIndex<K,V>)h.down) != null && (e=(HeadIndex<K,V>)d.down) != null && e.right == null && d.right == null && h.right == null && casHead(h,d) && h.right != null)   casHead(d,h);}  }
class C{  public void testDoubleValueNegative1(){  String a="-27467238945";  double result=-2.7467238945E10;  double aNumber=new BigInteger(a).doubleValue();  assertTrue(aNumber == result);}  }
class C{  public static void write(Path xmlTarget,Path htmlTarget,HuntBugsResult result){  Document dom=makeDom(result);  if (xmlTarget != null) {    try (Writer xmlWriter=Files.newBufferedWriter(xmlTarget)){      new XmlReportWriter(xmlWriter).write(dom);    } catch (    IOException e) {      throw new UncheckedIOException(e);    }  }  if (htmlTarget != null) {    try (Writer htmlWriter=Files.newBufferedWriter(htmlTarget)){      new HtmlReportWriter(htmlWriter).write(dom);    } catch (    IOException e) {      throw new UncheckedIOException(e);    }  }}  }
class C{  private void copyResources() throws IOException {  for (  String file : resourceFiles) {    InputStream original=this.getClass().getResourceAsStream("/config-ref/" + file);    File copy=new File(outputDirectory,file);    copyInputStreamToFile(original,copy);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrinsertbefore6.class,args);}  }
class C{  private SASLByteChannel(final ClientConnection connection,final String name,final SASLContext saslContext){  this.name=name;  this.saslContext=saslContext;  channel=connection.getChannel();  recvWrappedBufferMaximumSize=saslContext.getMaxReceiveBufferSize();  sendUnwrappedBufferSize=saslContext.getMaxRawSendBufferSize();  recvWrappedBuffer=ByteBuffer.allocate(recvWrappedBufferMaximumSize);  recvUnwrappedBuffer=ByteBuffer.allocate(0);  sendUnwrappedBytes=new byte[sendUnwrappedBufferSize];  sendWrappedBuffer=ByteBuffer.allocate(sendUnwrappedBufferSize + 64);}  }
class C{  public void doClick(int pressTime){  Dimension size=getSize();  model.setArmed(true);  model.setPressed(true);  paintImmediately(new Rectangle(0,0,size.width,size.height));  try {    Thread.currentThread().sleep(pressTime);  } catch (  InterruptedException ie) {  }  model.setPressed(false);  model.setArmed(false);}  }
class C{  public Table startNewRow(){  currentColumn=0;  currentRow++;  if (currentRow >= rows.size()) {    rows.add(new Cell[columnWidths.length]);  }  return this;}  }
class C{  private Map<Integer,int[]> readFormat0() throws java.io.IOException {  Map<Integer,int[]> h=new LinkedHashMap<>();  raf.skipBytes(4);  for (int k=0; k < 256; ++k) {    int[] r=new int[2];    r[0]=raf.readUnsignedByte();    r[1]=getGlyphWidth(r[0]);    h.put(k,r);  }  return h;}  }
class C{  public static short parseShort(String string,int radix) throws NumberFormatException {  int intValue=Integer.parseInt(string,radix);  short result=(short)intValue;  if (result == intValue) {    return result;  }  throw new NumberFormatException("Value out of range for short: \"" + string + "\"");}  }
class C{  private void whenCommitReturnFalse(LoginModule... modules) throws LoginException {  for (  LoginModule module : modules) {    when(module.commit()).thenReturn(false);  }}  }
class C{  private static void report(String label,long start,long end,int iter,int rept){  if (timing) {    System.out.println(label + ": " + (end - start) / 1000 + "us" + "  (" + (end - start) / (iter * rept) + "ns per call)");  } else {    System.out.println(label + ": done");  }}  }
class C{  public synchronized AttributeSet addAttributes(AttributeSet old,AttributeSet attr){  if ((old.getAttributeCount() + attr.getAttributeCount()) <= getCompressionThreshold()) {    search.removeAttributes(search);    search.addAttributes(old);    search.addAttributes(attr);    reclaim(old);    return getImmutableUniqueSet();  }  MutableAttributeSet ma=getMutableAttributeSet(old);  ma.addAttributes(attr);  return ma;}  }
class C{  private void removeGroups() throws Exception {  InternalClientConnection conn=InternalClientConnection.getRootConnection();  conn.processDelete(DN.valueOf("cn=Test Group,o=Test"));  conn.processDelete(DN.valueOf("cn=Example Group,o=Test"));}  }
class C{  public void digest(String hashAlg,File file,Properties digestResult,String ignoredPath,boolean intoJar,boolean intoWar){  if (file.exists()) {    if (file.isDirectory()) {      if (recursive) {        File[] tempFiles=null;        if (includePattern != null) {          tempFiles=file.listFiles(new GeneralFileFilter(includePattern));        } else {          tempFiles=file.listFiles();        }        for (int i=0; i < tempFiles.length; i++) {          if (tempFiles[i].isDirectory()) {            digest(hashAlg,tempFiles[i],digestResult,ignoredPath,intoJar,intoWar);          } else {            if (excludePattern != null) {              if (!Utils.isMatch(tempFiles[i].getName(),excludePattern,wildCard)) {                digest(hashAlg,tempFiles[i],digestResult,ignoredPath,intoJar,intoWar);              }            } else {              digest(hashAlg,tempFiles[i],digestResult,ignoredPath,intoJar,intoWar);            }          }        }      }    } else {      if (file.getName().endsWith(WAR_FILE_EXT) && (intoWar)) {        try {          digestWarFile(hashAlg,digestResult,new JarFile(file),intoJar);        } catch (        IOException ex) {          ex.printStackTrace();        }      } else {        byte[] digestedbyte=null;        if ((file.getName().endsWith(JAR_FILE_EXT)) && (intoJar)) {          FileInputStream fin=null;          try {            fin=new FileInputStream(file);            digestedbyte=digestJarFile(hashAlg,fin);            fin.close();          } catch (          IOException ex) {            ex.printStackTrace();          } finally {            if (fin != null) {              try {                fin.close();              } catch (              IOException ignored) {              }              fin=null;            }          }        } else {          FileInputStream fin=null;          try {            fin=new FileInputStream(file);            digestedbyte=Utils.getHash(hashAlg,fin);          } catch (          IOException ex) {            ex.printStackTrace();          } finally {            if (fin != null) {              try {                fin.close();              } catch (              IOException ignored) {              }              fin=null;            }          }        }        String tempPath=file.getPath();        tempPath=tempPath.substring(tempPath.indexOf(ignoredPath) + ignoredPath.length()).replaceAll("\\\\",FILE_SEPARATOR);        if (tempPath.startsWith(FILE_SEPARATOR)) {          tempPath=tempPath.substring(1);        }        appendResult(digestResult,tempPath,digestedbyte);      }    }  }}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  try {    Request request=requestEvent.getRequest();    SipProvider sipProvider=(SipProvider)requestEvent.getSource();    ServerTransaction st=sipProvider.getNewServerTransaction(request);    TTask ttask=new TTask(requestEvent,st);    int ttime=100;    new Timer().schedule(ttask,ttime);  } catch (  Exception ex) {    ex.printStackTrace();    DialogTimeoutTest.fail("Shootme: Failed on process INVITE",ex);  }}  }
class C{  public void removePropertyChangeListener(PropertyChangeListener listener){  support.removePropertyChangeListener(listener);}  }
class C{  public void testRadix16Neg(){  String value="-287628a883451b800865c67e8d7ff20";  int radix=16;  BigInteger aNumber=new BigInteger(value,radix);  String result=aNumber.toString(radix);  assertTrue(result.equals(value));}  }
class C{  public static boolean isValidIANAEncoding(String ianaEncoding){  if (ianaEncoding != null) {    int length=ianaEncoding.length();    if (length > 0) {      char c=ianaEncoding.charAt(0);      if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')) {        for (int i=1; i < length; i++) {          c=ianaEncoding.charAt(i);          if ((c < 'A' || c > 'Z') && (c < 'a' || c > 'z') && (c < '0' || c > '9')&& c != '.' && c != '_' && c != '-') {            return false;          }        }        return true;      }    }  }  return false;}  }
class C{  public final void test_verify() throws Exception {  mySSLSession session=new mySSLSession("localhost",1080,null);  HostnameVerifier hv=HttpsURLConnection.getDefaultHostnameVerifier();  assertFalse(hv.verify("localhost",session));}  }
class C{  @Override @Test(expectedExceptions=IllegalBlockingModeException.class) public void testDecodeShortArrayAsEnumerated() throws Exception {  super.testDecodeShortArrayAsEnumerated();}  }
class C{  public DataBufferFloat(int size,int numBanks){  super(STABLE,TYPE_FLOAT,size,numBanks);  bankdata=new float[numBanks][];  for (int i=0; i < numBanks; i++) {    bankdata[i]=new float[size];  }  data=bankdata[0];}  }
class C{  void hilight_selected_button(){  interactive.state.StateInteractive interactive_state=board_frame.board_panel.itera_board.get_interactive_state();  if (interactive_state instanceof interactive.state.StateMenuRoute) {    route_button.setSelected(true);  } else   if (interactive_state instanceof interactive.state.StateMenuDrag) {    drag_button.setSelected(true);  } else   if (interactive_state instanceof interactive.state.StateMenuSelect) {    select_button.setSelected(true);  }}  }
class C{  boolean readModule(int row,int column,int numRows,int numColumns){  if (row < 0) {    row+=numRows;    column+=4 - ((numRows + 4) & 0x07);  }  if (column < 0) {    column+=numColumns;    row+=4 - ((numColumns + 4) & 0x07);  }  readMappingMatrix.set(column,row);  return mappingBitMatrix.get(column,row);}  }
class C{  public static String repeat(final String value,final int multiplier){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  return Stream.generate(null).limit(multiplier).collect(joining());}  }
class C{  ParentTreeHandler(PdfStructTreeRoot structTreeRoot){  this.structTreeRoot=structTreeRoot;  parentTree=new PdfNumTree(structTreeRoot.getDocument().getCatalog(),PdfName.ParentTree);  registerAllMcrs();}  }
class C{  public void unparsedEntityDecl(StylesheetHandler handler,String name,String publicId,String systemId,String notationName){}  }
class C{  public TaggedOutputStream(OutputStream proxy){  super(proxy);}  }
class C{  static void publishInstanceKeyEntryInADS() throws CryptoManagerException {  final byte[] instanceKeyCertificate=getInstanceKeyCertificateFromLocalTruststore();  final String instanceKeyID=getInstanceKeyID(instanceKeyCertificate);  final ByteString distinguishedValue=ByteString.valueOfUtf8(instanceKeyID);  final DN entryDN=instanceKeysDN.child(new RDN(attrKeyID,distinguishedValue));  final String FILTER_OC_INSTANCE_KEY="(objectclass=" + ocInstanceKey.getNameOrOID() + ")";  final InternalClientConnection icc=getRootConnection();  try {    final SearchRequest request=newSearchRequest(entryDN,SearchScope.BASE_OBJECT,FILTER_OC_INSTANCE_KEY).addAttribute("dn");    final InternalSearchOperation searchOp=icc.processSearch(request);    if (searchOp.getSearchEntries().isEmpty()) {      final Entry entry=new Entry(entryDN,null,null,null);      entry.addObjectClass(CoreSchema.getTopObjectClass());      entry.addObjectClass(ocInstanceKey);      final Attribute keyIDAttr=Attributes.create(attrKeyID,distinguishedValue);      entry.addAttribute(keyIDAttr,new ArrayList<ByteString>(0));      AttributeBuilder builder=new AttributeBuilder(attrPublicKeyCertificate);      builder.setOption("binary");      builder.add(ByteString.wrap(instanceKeyCertificate));      final Attribute certificateAttr=builder.toAttribute();      entry.addAttribute(certificateAttr,new ArrayList<ByteString>(0));      AddOperation addOperation=icc.processAdd(entry);      if (ResultCode.SUCCESS != addOperation.getResultCode()) {        throw new DirectoryException(addOperation.getResultCode(),ERR_CRYPTOMGR_FAILED_TO_ADD_INSTANCE_KEY_ENTRY_TO_ADS.get(entry.getName()));      }    }  } catch (  DirectoryException ex) {    logger.traceException(ex);    throw new CryptoManagerException(ERR_CRYPTOMGR_FAILED_TO_PUBLISH_INSTANCE_KEY_ENTRY.get(getExceptionMessage(ex)),ex);  }}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) private static int countRunAndMakeAscending(Object[] a,int lo,int hi){  assert lo < hi;  int runHi=lo + 1;  if (runHi == hi)   return 1;  if (((Comparable)a[runHi++]).compareTo(a[lo]) < 0) {    while (runHi < hi && ((Comparable)a[runHi]).compareTo(a[runHi - 1]) < 0)     runHi++;    reverseRange(a,lo,runHi);  } else {    while (runHi < hi && ((Comparable)a[runHi]).compareTo(a[runHi - 1]) >= 0)     runHi++;  }  return runHi - lo;}  }
class C{  public static final String makeJavaIdentifierForAttribute(String identifier){  return makeJavaIdentifier(identifier,false);}  }
class C{  private void informUponSimilarName(final StringBuffer messageBuffer,final String name,final String candidate){  if (name.equals(candidate)) {    return;  }  if (name.regionMatches(true,0,candidate,0,PKG_LEN + 5)) {    messageBuffer.append(" Did you mean '");    messageBuffer.append(candidate);    messageBuffer.append("'?");  }}  }
class C{  @Inject private SessionService(final @Named(SessionConstants.SESSION_DEBUG) Debug sessionDebug,final @Named(SessionConstants.STATS_MASTER_TABLE) Stats stats,final SSOTokenManager ssoTokenManager,final DsameAdminTokenProvider dsameAdminTokenProvider,final SessionServerConfig serverConfig,final SessionServiceConfig serviceConfig,final MonitoringOperations monitoringOperations,final SessionLogging sessionLogging,final SessionAuditor sessionAuditor,final SessionEventBroker sessionEventBroker,final InternalSessionFactory internalSessionFactory,final SessionNotificationSender sessionNotificationSender,final SessionAccessManager sessionAccessManager,final SessionOperationStrategy sessionOperationStrategy,final ServicesClusterMonitorHandler servicesClusterMonitorHandler,final ForeignSessionHandler foreignSessionHandler){  this.sessionDebug=sessionDebug;  this.ssoTokenManager=ssoTokenManager;  this.dsameAdminTokenProvider=dsameAdminTokenProvider;  this.serverConfig=serverConfig;  this.serviceConfig=serviceConfig;  this.monitoringOperations=monitoringOperations;  this.sessionLogging=sessionLogging;  this.sessionAuditor=sessionAuditor;  this.sessionEventBroker=sessionEventBroker;  this.internalSessionFactory=internalSessionFactory;  this.sessionOperationStrategy=sessionOperationStrategy;  this.servicesClusterMonitorHandler=servicesClusterMonitorHandler;  this.sessionNotificationSender=sessionNotificationSender;  this.sessionAccessManager=sessionAccessManager;  this.foreignSessionHandler=foreignSessionHandler;  try {    if (stats.isEnabled()) {      maxSessionStats=new SessionMaxStats(sessionAccessManager,monitoringOperations,sessionNotificationSender,stats);      stats.addStatsListener(maxSessionStats);    } else {      maxSessionStats=null;    }  } catch (  Exception ex) {    sessionDebug.error("SessionService initialization failed.",ex);    throw new IllegalStateException("SessionService initialization failed.",ex);  }}  }
class C{  public String toString(){  return getClass().getName() + "[name=" + getName()+ ",maxpri="+ maxPriority+ "]";}  }
class C{  public static PdfFormField createEmptyField(PdfDocument doc){  return new PdfFormField(doc);}  }
class C{  public static void updateAgent(SSOToken ssoToken,String realm,String agentName,Map attrValues,boolean bSet) throws IdRepoException, SSOException, SMSException, ConfigurationException {  AMIdentity amid=new AMIdentity(ssoToken,agentName,IdType.AGENTONLY,realm,null);  if (!amid.isExists()) {    String[] param={agentName};    throw new ConfigurationException("agent.does.not.exists",param);  }  String agentType=getAgentType(amid);  Map attributeValues=parseAttributeMap(agentType,attrValues);  if (!bSet) {    Map origValues=amid.getAttributes(attributeValues.keySet());    for (Iterator i=attributeValues.keySet().iterator(); i.hasNext(); ) {      String attrName=(String)i.next();      attributeValues.put(attrName,updateAttrValues(agentType,attrName,(Set)origValues.get(attrName),(Set)attributeValues.get(attrName)));    }  }  amid.setAttributes(attributeValues);  amid.store();}  }
class C{  protected void insureUniqueness(){}  }
class C{  public LinkRenderer(Link link){  this(link,link.getText());}  }
class C{  protected void callChildVisitors(XSLTVisitor visitor,boolean callAttrs){  if (callAttrs) {    if (null != m_name_avt)     m_name_avt.callVisitors(visitor);    if (null != m_namespace_avt)     m_namespace_avt.callVisitors(visitor);  }  super.callChildVisitors(visitor,callAttrs);}  }
class C{  public AssertionArtifact createAssertionArtifact(Assertion assertion,String target) throws SAMLException {  if (useLocal) {    return (assertionManager.createAssertionArtifact(assertion,target));  }  String aa=null;  try {    Object[] args={assertion.toString(true,true),Base64.encode(SAMLUtils.stringToByteArray(target))};    aa=(String)stub.send("createAssertionArtifact",args,null,null);    return (new AssertionArtifact(aa));  } catch (  Exception re) {    if (SAMLUtils.debug.warningEnabled()) {      SAMLUtils.debug.warning("AMC:createAssertionArtifact:",re);    }    throw (new SAMLException(re.getMessage()));  }}  }
class C{  @Override public boolean onCreatePanelMenu(final int featureId,final Menu menu){  return super.onCreatePanelMenu(featureId,menu);}  }
class C{  private <M extends Configuration>void deregisterDelayedAddListener(DN baseDN,ServerManagedObjectAddListener<M> listener) throws ConfigException {  DN parentDN=baseDN.parent();  int delayWrappers=0;  while (parentDN != null) {    if (!configRepository.hasEntry(parentDN)) {      parentDN=parentDN.parent();      delayWrappers++;    } else {      for (      ConfigAddListener configListener : configRepository.getAddListeners(parentDN)) {        if (configListener instanceof DelayedConfigAddListener) {          DelayedConfigAddListener delayListener=(DelayedConfigAddListener)configListener;          ConfigAddListener wrappedListener;          int i=delayWrappers;          for (; i > 0; i--) {            wrappedListener=delayListener.getDelayedAddListener();            if (wrappedListener instanceof DelayedConfigAddListener) {              delayListener=(DelayedConfigAddListener)configListener;            } else {              break;            }          }          if (i > 0) {            continue;          }          ConfigAddListener delayedListener=delayListener.getDelayedAddListener();          if (delayedListener instanceof ConfigAddListenerAdaptor) {            ConfigAddListenerAdaptor<?> adaptor=(ConfigAddListenerAdaptor<?>)delayedListener;            if (adaptor.getServerManagedObjectAddListener() == listener) {              configRepository.deregisterAddListener(parentDN,configListener);            }          }        }      }      return;    }  }}  }
class C{  @After public void unregisterIdlingResource(){  Espresso.unregisterIdlingResources(mAddTaskIntentsTestRule.getActivity().getCountingIdlingResource());}  }
class C{  public MaterialBarcodeScannerBuilder withBarcodeFormats(int barcodeFormats){  mBarcodeFormats=barcodeFormats;  return this;}  }
class C{  public static void registerEditorKitForContentType(String type,String classname,ClassLoader loader){  getKitTypeRegistry().put(type,classname);  getKitLoaderRegistry().put(type,loader);  getKitRegisty().remove(type);}  }
class C{  public boolean isAfter(MonthDay other){  return compareTo(other) > 0;}  }
class C{  private void process(){  long curTime=System.currentTimeMillis();  this.job.setStarted_at(curTime).set("started_at",String.valueOf(curTime)).compose(null).setHandler(null);}  }
class C{  public CircularRedirectException(String message){  super(message);}  }
class C{  public void poll(final SnmpUdpStatisticsHandler snmpUdpStatisticsHandler){  this.statisticsHandler=snmpUdpStatisticsHandler;  try {    fileLoader.load();    final ByteBuffer buffer=fileLoader.getBuffer();    lineParser.reset();    lineParser.handleToken(buffer,buffer.position(),buffer.limit());  }  finally {    this.statisticsHandler=null;  }}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  submitCycle=true;  HttpServletRequest req=event.getRequestContext().getRequest();  String formToken=req.getParameter(FORM_TOKEN);  if (formToken == null || formToken.isEmpty() || !formToken.equals(getFormToken())) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error","Invalid form token");    forwardTo();    return;  }  UMChangeUserPasswordModel model=(UMChangeUserPasswordModel)getModel();  String userId=(String)getPageSessionAttribute(EntityEditViewBean.UNIVERSAL_ID);  if (userId == null) {    userId=model.getUserName();  }  String pwd=(String)propertySheetModel.getValue(ATTR_PASSWORD);  String reenter=(String)propertySheetModel.getValue(REENTER_PASSWORD);  String oldPwd=(String)propertySheetModel.getValue(ATTR_OLD_PASSWORD);  pwd=pwd.trim();  reenter=reenter.trim();  if (pwd.length() == 0) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error","user.change.password.missing.password.message");  } else   if (!pwd.equals(reenter)) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error","user.change.password.mismatch.password.message");  } else {    if (!oldapicall) {      if (oldPwd.length() == 0) {        setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error","user.change.password.missing.old.password.message");      } else {        try {          model.changePwd(userId,oldPwd,pwd);          setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","user.change.password.modified.password.message");        } catch (        AMConsoleException e) {          setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());        }      }    } else {      try {        model.changePassword(userId,pwd);        setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","user.change.password.modified.password.message");      } catch (      AMConsoleException e) {        setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());      }    }  }  forwardTo();}  }
class C{  public UserResponseHandler(String fileName) throws InstallException {  setFile(fileName);}  }
class C{  private static BigInteger multiplyToomCook3(BigInteger a,BigInteger b){  int alen=a.mag.length;  int blen=b.mag.length;  int largest=Math.max(alen,blen);  int k=(largest + 2) / 3;  int r=largest - 2 * k;  BigInteger a0, a1, a2, b0, b1, b2;  a2=a.getToomSlice(k,r,0,largest);  a1=a.getToomSlice(k,r,1,largest);  a0=a.getToomSlice(k,r,2,largest);  b2=b.getToomSlice(k,r,0,largest);  b1=b.getToomSlice(k,r,1,largest);  b0=b.getToomSlice(k,r,2,largest);  BigInteger v0, v1, v2, vm1, vinf, t1, t2, tm1, da1, db1;  v0=a0.multiply(b0);  da1=a2.add(a0);  db1=b2.add(b0);  vm1=da1.subtract(a1).multiply(db1.subtract(b1));  da1=da1.add(a1);  db1=db1.add(b1);  v1=da1.multiply(db1);  v2=da1.add(a2).shiftLeft(1).subtract(a0).multiply(db1.add(b2).shiftLeft(1).subtract(b0));  vinf=a2.multiply(b2);  t2=v2.subtract(vm1).exactDivideBy3();  tm1=v1.subtract(vm1).shiftRight(1);  t1=v1.subtract(v0);  t2=t2.subtract(t1).shiftRight(1);  t1=t1.subtract(tm1).subtract(vinf);  t2=t2.subtract(vinf.shiftLeft(1));  tm1=tm1.subtract(t2);  int ss=k * 32;  BigInteger result=vinf.shiftLeft(ss).add(t2).shiftLeft(ss).add(t1).shiftLeft(ss).add(tm1).shiftLeft(ss).add(v0);  if (a.signum != b.signum) {    return result.negate();  } else {    return result;  }}  }
class C{  public void writeSkippedEntries(String skipFile,ExistingFileBehavior existingFileBehavior) throws IOException {  if (skipFile == null) {    closeSkipWriter();    return;  }  final BufferedWriter writer=newBufferedWriter(skipFile,existingFileBehavior,ERR_SKIP_FILE_EXISTS);  if (writer != null) {    skipWriter=writer;  }}  }
class C{  public static Class<?> loadClassWithout(ClassLoader loader,String className) throws ClassNotFoundException {  MBEANSERVER_LOGGER.logp(Level.FINEST,DefaultLoaderRepository.class.getName(),"loadClassWithout",className);  return load(loader,className);}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof OutputDeviceAssigned);}  }
class C{  public boolean equals(Object obj){  if (this == obj)   return true;  if (obj instanceof EllipticCurve) {    EllipticCurve curve=(EllipticCurve)obj;    if ((field.equals(curve.field)) && (a.equals(curve.a)) && (b.equals(curve.b))) {      return true;    }  }  return false;}  }
class C{  protected PSource(String pSrcName){  if (pSrcName == null) {    throw new NullPointerException("pSrcName == null");  }  this.pSrcName=pSrcName;}  }
class C{  protected void drawRadioAppearance(float width,float height,String value){  PdfStream streamOn=new PdfStream().makeIndirect(getDocument());  PdfCanvas canvasOn=new PdfCanvas(streamOn,new PdfResources(),getDocument());  Rectangle rect=new Rectangle(0,0,width,height);  PdfFormXObject xObjectOn=new PdfFormXObject(rect);  PdfFormXObject xObjectOff=new PdfFormXObject(rect);  drawRadioBorder(canvasOn,xObjectOn,width,height);  drawRadioField(canvasOn,width,height,true);  PdfStream streamOff=new PdfStream().makeIndirect(getDocument());  PdfCanvas canvasOff=new PdfCanvas(streamOff,new PdfResources(),getDocument());  drawRadioBorder(canvasOff,xObjectOff,width,height);  if (pdfAConformanceLevel != null && (pdfAConformanceLevel.getPart().equals("2") || pdfAConformanceLevel.getPart().equals("3"))) {    xObjectOn.getResources();    xObjectOff.getResources();  }  PdfWidgetAnnotation widget=getWidgets().get(0);  xObjectOn.getPdfObject().getOutputStream().writeBytes(streamOn.getBytes());  widget.setNormalAppearance(new PdfDictionary());  widget.getNormalAppearanceObject().put(new PdfName(value),xObjectOn.getPdfObject());  xObjectOff.getPdfObject().getOutputStream().writeBytes(streamOff.getBytes());  widget.getNormalAppearanceObject().put(new PdfName("Off"),xObjectOff.getPdfObject());}  }
class C{  public static void deleteApplication(Subject adminSubject,String realm,String name) throws EntitlementException {  getApplicationService(adminSubject,realm).deleteApplication(name);}  }
class C{  public void toggle_selected_item_violations(){  if (board_is_read_only)   return;  if (!is_StateSelectedItem())   return;  ((StateSelectedItem)interactive_state).toggle_clearance_violations();}  }
class C{  public LoginProcess(LoginAuthenticator loginAuthenticator,LoginConfiguration loginConfiguration,AuthenticationContext authContext,CoreServicesWrapper coreServicesWrapper){  this.loginAuthenticator=loginAuthenticator;  this.loginConfiguration=loginConfiguration;  this.authContext=authContext;  this.coreServicesWrapper=coreServicesWrapper;}  }
class C{  @Override public void initializeForTemplate(TemplateFile templateFile,Template template,String[] arguments,int lineNumber,List<LocalizableMessage> warnings) throws InitializationException {  if (arguments.length != 0) {    LocalizableMessage message=ERR_MAKELDIF_TAG_INVALID_ARGUMENT_COUNT.get(getName(),lineNumber,0,arguments.length);    throw new InitializationException(message);  }}  }
class C{  public com.sun.identity.liberty.ws.disco.jaxb.ResourceOfferingType createResourceOfferingType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.disco.jaxb.impl.ResourceOfferingTypeImpl();}  }
class C{  static public String stripChar(String str,char ch){  if (str != null) {    char[] buffer=new char[str.length()];    int next=0;    for (int i=0; i < str.length(); i++) {      if (str.charAt(i) != ch) {        buffer[next++]=str.charAt(i);      }    }    return new String(buffer,0,next);  } else {    return null;  }}  }
class C{  public final void testToString02() throws Exception {  TrustAnchor ta=TestUtils.getTrustAnchor();  if (ta == null) {    fail(getName() + ": not performed (could not create test TrustAnchor)");  }  PKIXCertPathValidatorResult vr=new PKIXCertPathValidatorResult(ta,null,testPublicKey);  assertNotNull(vr.toString());}  }
class C{  public static boolean onTouchEvent(TextView widget,Spannable buffer,MotionEvent event){  DragState[] ds;switch (event.getActionMasked()) {case MotionEvent.ACTION_DOWN:    ds=buffer.getSpans(0,buffer.length(),DragState.class);  for (int i=0; i < ds.length; i++) {    buffer.removeSpan(ds[i]);  }buffer.setSpan(new DragState(event.getX(),event.getY(),widget.getScrollX(),widget.getScrollY()),0,0,Spannable.SPAN_MARK_MARK);return true;case MotionEvent.ACTION_UP:ds=buffer.getSpans(0,buffer.length(),DragState.class);for (int i=0; i < ds.length; i++) {buffer.removeSpan(ds[i]);}if (ds.length > 0 && ds[0].mUsed) {return true;} else {return false;}case MotionEvent.ACTION_MOVE:ds=buffer.getSpans(0,buffer.length(),DragState.class);if (ds.length > 0) {ds[0].mIsSelectionStarted=false;if (ds[0].mFarEnough == false) {int slop=ViewConfiguration.get(widget.getContext()).getScaledTouchSlop();if (Math.abs(event.getX() - ds[0].mX) >= slop || Math.abs(event.getY() - ds[0].mY) >= slop) {ds[0].mFarEnough=true;if (MotionEventCompat.isButtonPressed(event,MotionEvent.BUTTON_PRIMARY)) {ds[0].mIsActivelySelecting=true;ds[0].mIsSelectionStarted=true;}}}if (ds[0].mFarEnough) {ds[0].mUsed=true;boolean cap=(event.getMetaState() & KeyEvent.META_SHIFT_ON) != 0 || MetaKeyKeyListener.getMetaState(buffer,MetaKeyKeyListener.META_SHIFT_ON) == 1 || MetaKeyKeyListener.getMetaState(buffer,MetaKeyKeyListenerCompat.META_SELECTING) != 0;if (!MotionEventCompat.isButtonPressed(event,MotionEvent.BUTTON_PRIMARY)) {ds[0].mIsActivelySelecting=false;}float dx;float dy;if (cap && MotionEventCompat.isButtonPressed(event,MotionEvent.BUTTON_PRIMARY)) {dx=event.getX() - ds[0].mX;dy=event.getY() - ds[0].mY;} else {dx=ds[0].mX - event.getX();dy=ds[0].mY - event.getY();}ds[0].mX=event.getX();ds[0].mY=event.getY();int nx=widget.getScrollX() + (int)dx;int ny=widget.getScrollY() + (int)dy;int padding=widget.getTotalPaddingTop() + widget.getTotalPaddingBottom();Layout layout=widget.getLayout();ny=Math.min(ny,layout.getHeight() - (widget.getHeight() - padding));ny=Math.max(ny,0);int oldX=widget.getScrollX();int oldY=widget.getScrollY();if (!MotionEventCompat.isButtonPressed(event,MotionEvent.BUTTON_PRIMARY)) {scrollTo(widget,layout,nx,ny);}if (oldX != widget.getScrollX() || oldY != widget.getScrollY()) {widget.cancelLongPress();}return true;}}}return false;}  }
class C{  public Set searchAllRoles(String wildcard,Map avPairs,int level) throws AMException, SSOException {  int[] objectTypes={AMObject.ROLE,AMObject.FILTERED_ROLE};  return searchObjects(objectTypes,wildcard,avPairs,level);}  }
class C{  public void testHeaderParams(){  try {    Header h=tiHeaderFactory.createHeader("m","sip:User1@127.0.0.1:1234;param1");    System.err.println(h);    assertTrue(h instanceof ContactHeader);    ContactHeader c=(ContactHeader)h;    URI u=c.getAddress().getURI();    assertTrue(u.isSipURI());    assertNull("URI must have no params",((SipURI)u).getParameter("param1"));    assertNotNull("Parameter 'param1' must be assigned to the header",c.getParameter("param1"));  } catch (  ParseException e) {    e.printStackTrace();    fail(e.getMessage());  } finally {    logTestCompleted("testHeaderParams()");  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  EntityReference badEntityRef;  doc=(Document)load("hc_staff",true);  if (("text/html".equals(getContentType()))) {{      boolean success=false;      try {        badEntityRef=doc.createEntityReference("foo");      } catch (      DOMException ex) {        success=(ex.code == DOMException.NOT_SUPPORTED_ERR);      }      assertTrue("throw_NOT_SUPPORTED_ERR",success);    }  } else {{      boolean success=false;      try {        badEntityRef=doc.createEntityReference("invalid^Name");      } catch (      DOMException ex) {        success=(ex.code == DOMException.INVALID_CHARACTER_ERR);      }      assertTrue("throw_INVALID_CHARACTER_ERR",success);    }  }}  }
class C{  public SignatureVisitor visitSuperclass(){  return this;}  }
class C{  public static void putLayer(JComponent c,int layer){  Integer layerObj;  layerObj=new Integer(layer);  c.putClientProperty(LAYER_PROPERTY,layerObj);}  }
class C{  @SuppressWarnings("unchecked") private void mergeLo(int base1,int len1,int base2,int len2){  if (DEBUG)   assert len1 > 0 && len2 > 0 && base1 + len1 == base2;  Object[] a=this.a;  Object[] tmp=ensureCapacity(len1);  System.arraycopy(a,base1,tmp,0,len1);  int cursor1=0;  int cursor2=base2;  int dest=base1;  a[dest++]=a[cursor2++];  if (--len2 == 0) {    System.arraycopy(tmp,cursor1,a,dest,len1);    return;  }  if (len1 == 1) {    System.arraycopy(a,cursor2,a,dest,len2);    a[dest + len2]=tmp[cursor1];    return;  }  int minGallop=this.minGallop;  outer:   while (true) {    int count1=0;    int count2=0;    do {      if (DEBUG)       assert len1 > 1 && len2 > 0;      if (((Comparable)a[cursor2]).compareTo(tmp[cursor1]) < 0) {        a[dest++]=a[cursor2++];        count2++;        count1=0;        if (--len2 == 0)         break outer;      } else {        a[dest++]=tmp[cursor1++];        count1++;        count2=0;        if (--len1 == 1)         break outer;      }    } while ((count1 | count2) < minGallop);    do {      if (DEBUG)       assert len1 > 1 && len2 > 0;      count1=gallopRight((Comparable)a[cursor2],tmp,cursor1,len1,0);      if (count1 != 0) {        System.arraycopy(tmp,cursor1,a,dest,count1);        dest+=count1;        cursor1+=count1;        len1-=count1;        if (len1 <= 1)         break outer;      }      a[dest++]=a[cursor2++];      if (--len2 == 0)       break outer;      count2=gallopLeft((Comparable)tmp[cursor1],a,cursor2,len2,0);      if (count2 != 0) {        System.arraycopy(a,cursor2,a,dest,count2);        dest+=count2;        cursor2+=count2;        len2-=count2;        if (len2 == 0)         break outer;      }      a[dest++]=tmp[cursor1++];      if (--len1 == 1)       break outer;      minGallop--;    } while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);    if (minGallop < 0)     minGallop=0;    minGallop+=2;  }  this.minGallop=minGallop < 1 ? 1 : minGallop;  if (len1 == 1) {    if (DEBUG)     assert len2 > 0;    System.arraycopy(a,cursor2,a,dest,len2);    a[dest + len2]=tmp[cursor1];  } else   if (len1 == 0) {    throw new IllegalArgumentException("Comparison method violates its general contract!");  } else {    if (DEBUG)     assert len2 == 0;    if (DEBUG)     assert len1 > 1;    System.arraycopy(tmp,cursor1,a,dest,len1);  }}  }
class C{  public PasswordPolicySubentryVirtualAttributeProvider(){  super();}  }
class C{  public void connect(SocketAddress endpoint) throws IOException {  connect(endpoint,0);}  }
class C{  public static JLabel createTitleLabel(LocalizableMessage text){  JLabel label=new JLabel(text.toString());  label.setFont(ColorAndFontConstants.titleFont);  label.setForeground(ColorAndFontConstants.foreground);  return label;}  }
class C{  public void addRealmSubject(SSOToken token,String subjectName,String realmName,boolean exclusive) throws NameAlreadyExistsException, InvalidNameException, PolicyException, SSOException {  PolicyManager pm=new PolicyManager(token,realmName);  SubjectTypeManager stm=pm.getSubjectTypeManager();  addRealmSubject(subjectName,stm,exclusive);}  }
class C{  public static void main(final String[] args){  final int retCode=new LDAPSearch().run(args);  System.exit(filterExitCode(retCode));}  }
class C{  public NameAlreadyExistsException(String msg,String name,int type){  super(msg);  this.name=name;  this.type=type;  fillInStackTrace();}  }
class C{  protected boolean testUnlessCondition(){  if (unlessCondition == null || "".equals(unlessCondition)) {    return true;  }  return getProperty(unlessCondition) == null;}  }
class C{  private void incorporateDequeues(){  final int cycles=itrs.cycles;  final int takeIndex=ArrayBlockingQueue.this.takeIndex;  final int prevCycles=this.prevCycles;  final int prevTakeIndex=this.prevTakeIndex;  if (cycles != prevCycles || takeIndex != prevTakeIndex) {    final int len=items.length;    long dequeues=(cycles - prevCycles) * len + (takeIndex - prevTakeIndex);    if (invalidated(lastRet,prevTakeIndex,dequeues,len))     lastRet=REMOVED;    if (invalidated(nextIndex,prevTakeIndex,dequeues,len))     nextIndex=REMOVED;    if (invalidated(cursor,prevTakeIndex,dequeues,len))     cursor=takeIndex;    if (cursor < 0 && nextIndex < 0 && lastRet < 0)     detach(); else {      this.prevCycles=cycles;      this.prevTakeIndex=takeIndex;    }  }}  }
class C{  public static IOFileFilter ageFileFilter(Date cutoffDate){  return new AgeFileFilter(cutoffDate);}  }
class C{  public final void sendRequest() throws IOException {  if (responseSource != null) {    return;  }  prepareRawRequestHeaders();  initResponseSource();  OkResponseCache responseCache=client.getOkResponseCache();  if (responseCache != null) {    responseCache.trackResponse(responseSource);  }  if (requestHeaders.isOnlyIfCached() && responseSource.requiresConnection()) {    if (responseSource == ResponseSource.CONDITIONAL_CACHE) {      Util.closeQuietly(cachedResponseBody);    }    this.responseSource=ResponseSource.CACHE;    this.cacheResponse=GATEWAY_TIMEOUT_RESPONSE;    RawHeaders rawResponseHeaders=RawHeaders.fromMultimap(cacheResponse.getHeaders(),true);    setResponse(new ResponseHeaders(uri,rawResponseHeaders),cacheResponse.getBody());  }  if (responseSource.requiresConnection()) {    sendSocketRequest();  } else   if (connection != null) {    client.getConnectionPool().recycle(connection);    connection=null;  }}  }
class C{  public static String toHexString(int i){  return IntegralToString.intToHexString(i,false,0);}  }
class C{  @Override public void flushBuffer() throws IOException {  outputBuffer.flush();}  }
class C{  public TreeModelEvent(Object source,Object[] path){  this(source,(path == null) ? null : new TreePath(path));}  }
class C{  public ReplicateScaleFilter(int width,int height){  if (width == 0 || height == 0) {    throw new IllegalArgumentException("Width (" + width + ") and height ("+ height+ ") must be non-zero");  }  destWidth=width;  destHeight=height;}  }
class C{  public SQLRecoverableException(String reason){  super(reason,null,0);}  }
class C{  public boolean isPaused(){  return paused;}  }
class C{  void read(InputStream in,Document doc) throws IOException {  if (!Boolean.TRUE.equals(doc.getProperty("IgnoreCharsetDirective"))) {    final int READ_LIMIT=1024 * 10;    in=new BufferedInputStream(in,READ_LIMIT);    in.mark(READ_LIMIT);  }  try {    String charset=(String)getClientProperty("charset");    Reader r=(charset != null) ? new InputStreamReader(in,charset) : new InputStreamReader(in);    kit.read(r,doc,0);  } catch (  BadLocationException e) {    throw new IOException(e.getMessage());  }catch (  ChangedCharSetException changedCharSetException) {    String charSetSpec=changedCharSetException.getCharSetSpec();    if (changedCharSetException.keyEqualsCharSet()) {      putClientProperty("charset",charSetSpec);    } else {      setCharsetFromContentTypeParameters(charSetSpec);    }    try {      in.reset();    } catch (    IOException exception) {      in.close();      URL url=(URL)doc.getProperty(Document.StreamDescriptionProperty);      if (url != null) {        URLConnection conn=url.openConnection();        in=conn.getInputStream();      } else {        throw changedCharSetException;      }    }    try {      doc.remove(0,doc.getLength());    } catch (    BadLocationException e) {    }    doc.putProperty("IgnoreCharsetDirective",Boolean.valueOf(true));    read(in,doc);  }}  }
class C{  private void adjustCaret(MouseEvent e){  if ((e.getModifiers() & ActionEvent.SHIFT_MASK) != 0 && getDot() != -1) {    moveCaret(e);  } else   if (!e.isPopupTrigger()) {    positionCaret(e);  }}  }
class C{  public void clearAccessibleSelection(){  int i=getSelectionModel().getSelectedIndex();  if (i >= 0 && i < getMenuCount()) {    JMenu menu=getMenu(i);    if (menu != null) {      MenuSelectionManager.defaultManager().setSelectedPath(null);    }  }  getSelectionModel().setSelectedIndex(-1);}  }
class C{  private TestCase create(File base,Element testCaseElement){  Element filePathElement=(Element)testCaseElement.getElementsByTagName("file-path").item(0);  Element purposeElement=(Element)testCaseElement.getElementsByTagName("purpose").item(0);  Element specCitationElement=(Element)testCaseElement.getElementsByTagName("spec-citation").item(0);  Element scenarioElement=(Element)testCaseElement.getElementsByTagName("scenario").item(0);  String category=testCaseElement.getAttribute("category");  String id=testCaseElement.getAttribute("id");  String name=category + "." + id;  String purpose=purposeElement != null ? purposeElement.getTextContent() : "";  String spec="place=" + specCitationElement.getAttribute("place") + " type"+ specCitationElement.getAttribute("type")+ " version="+ specCitationElement.getAttribute("version")+ " spec="+ specCitationElement.getAttribute("spec");  String operation=scenarioElement.getAttribute("operation");  Element principalDataElement=null;  Element principalStylesheetElement=null;  Element principalElement=null;  for (  Element element : elementsOf(scenarioElement.getChildNodes())) {    String role=element.getAttribute("role");    if (role.equals("principal-data")) {      principalDataElement=element;    } else     if (role.equals("principal-stylesheet")) {      principalStylesheetElement=element;    } else     if (role.equals("principal")) {      principalElement=element;    } else     if (!role.equals("supplemental-stylesheet") && !role.equals("supplemental-data")) {      return new MisspecifiedTest("Unexpected element at " + name);    }  }  String testDirectory=filePathElement.getTextContent();  File inBase=new File(base,testDirectory);  File outBase=new File(new File(base,"REF_OUT"),testDirectory);  if (principalDataElement == null || principalStylesheetElement == null) {    return new MisspecifiedTest("Expected <scenario> to have " + "principal=data and principal-stylesheet elements at " + name);  }  try {    File principalData=findFile(inBase,principalDataElement.getTextContent());    File principalStylesheet=findFile(inBase,principalStylesheetElement.getTextContent());    final File principal;    final String compareAs;    if (!operation.equals("execution-error")) {      if (principalElement == null) {        return new MisspecifiedTest("Expected <scenario> to have principal element at " + name);      }      principal=findFile(outBase,principalElement.getTextContent());      compareAs=principalElement.getAttribute("compare");    } else {      principal=null;      compareAs=null;    }    return new XsltTest(category,id,purpose,spec,principalData,principalStylesheet,principal,operation,compareAs);  } catch (  FileNotFoundException e) {    return new MisspecifiedTest(e.getMessage() + " at " + name);  }}  }
class C{  public String addSection(Section section){  String tag=UUID.randomUUID().toString();  addSection(tag,section);  return tag;}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  public static boolean isNotEmpty(Map<?,?> map){  return map != null && !map.isEmpty();}  }
class C{  public boolean isArmed(){  ButtonModel model=getModel();  return model.isArmed();}  }
class C{  private static synchronized Date parseDateString(String textRepresentation) throws ParseException {  try {    return sdfDefault.parse(textRepresentation);  } catch (  ParseException ex) {    return sdfGnuStep.parse(textRepresentation);  }}  }
class C{  public static void removeByUuid_C(java.lang.String uuid,long companyId){  getPersistence().removeByUuid_C(uuid,companyId);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodegetprevioussibling.class,args);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_notationssetnameditemns1.class,args);}  }
class C{  public PluginResult.PostResponse invokePostResponseExtendedPlugins(PostResponseExtendedOperation extendedOperation){  PluginResult.PostResponse result=null;  for (  DirectoryServerPlugin p : postResponseExtendedPlugins) {    if (isInternalOperation(extendedOperation,p)) {      continue;    }    try {      result=p.doPostResponse(extendedOperation);    } catch (    Exception e) {      logException(extendedOperation,p,e,ERR_PLUGIN_POST_RESPONSE_PLUGIN_EXCEPTION);    }    if (result == null) {      logNullResult(extendedOperation,p,ERR_PLUGIN_POST_RESPONSE_PLUGIN_RETURNED_NULL);    } else     if (!result.continuePluginProcessing()) {      return result;    }  }  if (result == null) {    result=PluginResult.PostResponse.continueOperationProcessing();  }  return result;}  }
class C{  final Node succ(Node p){  Node next=p.next;  return (p == next) ? head : next;}  }
class C{  public Mp4TagCoverField(byte[] data){  super(Mp4FieldKey.ARTWORK.getFieldName(),data);  if (ImageFormats.binaryDataIsPngFormat(data)) {    imageType=Mp4FieldType.COVERART_PNG;  } else   if (ImageFormats.binaryDataIsJpgFormat(data)) {    imageType=Mp4FieldType.COVERART_JPEG;  } else   if (ImageFormats.binaryDataIsGifFormat(data)) {    imageType=Mp4FieldType.COVERART_GIF;  } else   if (ImageFormats.binaryDataIsBmpFormat(data)) {    imageType=Mp4FieldType.COVERART_BMP;  } else {    logger.warning(ErrorMessage.GENERAL_UNIDENITIFED_IMAGE_FORMAT.getMsg());    imageType=Mp4FieldType.COVERART_PNG;  }}  }
class C{  public ReferredByParser(String referBy){  super(referBy);}  }
class C{  public AMSearchResults searchAllRoles(String wildcard,AMSearchControl searchControl) throws AMException, SSOException {  return searchAllRoles(wildcard,null,searchControl);}  }
class C{  public ScheduledThreadPoolExecutor(int corePoolSize,ThreadFactory threadFactory,RejectedExecutionHandler handler){  super(corePoolSize,Integer.MAX_VALUE,0,NANOSECONDS,new DelayedWorkQueue(),threadFactory,handler);}  }
class C{  public static void addAttributeToSet(Attribute attribute){  instance.setAttributes.add(attribute);}  }
class C{  public void socksAccept() throws IOException {  Socks4Message reply=socksReadReply();  if (reply.getCommandOrResult() != Socks4Message.RETURN_SUCCESS) {    throw new IOException(reply.getErrorString(reply.getCommandOrResult()));  }}  }
class C{  public void activate(){  this.diagnosticsProcessor=new DiagnosticsProcessor(config);  this.isRunning.set(true);  initMXBean();}  }
class C{  public Name add(String comp) throws InvalidNameException {  impl.add(comp);  return this;}  }
class C{  public byte[] processBlock(byte[] in,int inOff,int inLen){  if (key == null) {    throw new IllegalStateException("RSA engine not initialised");  }  BigInteger input=core.convertInput(in,inOff,inLen);  BigInteger result;  if (key instanceof RSAPrivateCrtKeyParameters) {    RSAPrivateCrtKeyParameters k=(RSAPrivateCrtKeyParameters)key;    BigInteger e=k.getPublicExponent();    if (e != null) {      BigInteger m=k.getModulus();      BigInteger r=BigIntegers.createRandomInRange(ONE,m.subtract(ONE),random);      BigInteger blindedInput=r.modPow(e,m).multiply(input).mod(m);      BigInteger blindedResult=core.processBlock(blindedInput);      BigInteger rInv=r.modInverse(m);      result=blindedResult.multiply(rInv).mod(m);    } else {      result=core.processBlock(input);    }  } else {    result=core.processBlock(input);  }  return core.convertOutput(result);}  }
class C{  @Override public synchronized void add(Member member){  getTransport().add(member);}  }
class C{  @Override public void addChannelListener(ChannelListener channelListener){  if (!this.channelListeners.contains(channelListener)) {    this.channelListeners.add(channelListener);  } else {    throw new IllegalArgumentException(sm.getString("groupChannel.listener.alreadyExist",channelListener,channelListener.getClass().getName()));  }}  }
class C{  public static byte[] readFullyNoClose(InputStream in) throws IOException {  ByteArrayOutputStream bytes=new ByteArrayOutputStream();  byte[] buffer=new byte[1024];  int count;  while ((count=in.read(buffer)) != -1) {    bytes.write(buffer,0,count);  }  return bytes.toByteArray();}  }
class C{  void targetEntryReferrals(ReadableTransaction txn,DN targetDN,SearchScope searchScope) throws DirectoryException {  if (containsReferrals == ConditionResult.UNDEFINED) {    containsReferrals=containsReferrals(txn);  }  if (containsReferrals == ConditionResult.FALSE) {    return;  }  try (Cursor<ByteString,ByteString> cursor=txn.openCursor(getName())){    for (DN dn=getParentWithinBase(targetDN); dn != null; dn=getParentWithinBase(dn)) {      if (cursor.positionToKey(toKey(dn))) {        Collection<String> labeledURIs=decodeUrisOnly(cursor.getValue());        throwReferralException(targetDN,dn,labeledURIs,searchScope);      }    }  } catch (  StorageRuntimeException e) {    logger.traceException(e);  }}  }
class C{  private static boolean wantAssertionSigned(String realm,String pepEntityID) throws SAML2MetaException {  XACMLAuthzDecisionQueryDescriptorElement pepDescriptor=saml2MetaManager.getPolicyEnforcementPointDescriptor(realm,pepEntityID);  return pepDescriptor.isWantAssertionsSigned();}  }
class C{  public void runTest() throws Throwable {  String localName="newAttr";  String namespaceURI="http://www.newattr.com";  String qualifiedName="emp:newAttr";  Document doc;  NodeList elementList;  Node testAddr;  Attr addrAttr;  String resultAttr;  String resultNamespaceURI;  String resultLocalName;  String resultPrefix;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("emp:address");  testAddr=elementList.item(0);  assertNotNull("empAddrNotNull",testAddr);  ((Element)testAddr).setAttributeNS(namespaceURI,qualifiedName,"newValue");  addrAttr=((Element)testAddr).getAttributeNodeNS(namespaceURI,localName);  resultAttr=((Element)testAddr).getAttributeNS(namespaceURI,localName);  assertEquals("attrValue","newValue",resultAttr);  resultNamespaceURI=addrAttr.getNamespaceURI();  assertEquals("nsuri","http://www.newattr.com",resultNamespaceURI);  resultLocalName=addrAttr.getLocalName();  assertEquals("lname","newAttr",resultLocalName);  resultPrefix=addrAttr.getPrefix();  assertEquals("prefix","emp",resultPrefix);}  }
class C{  public ElemTemplateElement appendChild(ElemTemplateElement newChild){  int type=((ElemTemplateElement)newChild).getXSLToken();  if (Constants.ELEMNAME_SORT == type) {    setSortElem((ElemSort)newChild);    return newChild;  } else   return super.appendChild(newChild);}  }
class C{  public final <T>T readValidatedInput(final LocalizableMessage prompt,final ValidationCallback<T> validator) throws ClientException {  while (true) {    final String response=readLineOfInput(prompt);    final T value=validator.validate(this,response);    if (value != null) {      return value;    }  }}  }
class C{  private void filter(StringBuffer sb,BufferedWriter o) throws IOException {  int ch;  StringBuilder buf=new StringBuilder();  int state=st_normal;  boolean shouldCopyBody=false;  int size=sb.length();  for (int i=0; i < size; i++) {    ch=sb.charAt(i);switch (state) {case st_normal:      if (ch == '<') {        state=st_tagId;        buf.setLength(0);        buf.append((char)ch);        break;      }    o.write(ch);  break;case st_tagId:buf.append((char)ch);if (ch == '>') {state=st_normal;o.write(buf.toString());break;}if (buf.length() == 7) {if (buf.toString().equalsIgnoreCase("<subst ")) {state=st_subst_attr;buf.setLength(0);shouldCopyBody=true;break;}state=st_normal;o.write(buf.toString());break;}break;case st_subst_attr:switch (ch) {case ' ':break;case '=':if (buf.toString().equalsIgnoreCase("data")) {state=st_subst_value_data;buf.setLength(0);break;}state=st_subst_value;buf.setLength(0);break;case '>':state=st_subst_body;break;default :buf.append((char)ch);break;}break;case st_subst_value:case st_subst_value_data:if (ch == '"' || ch == '\'') {if (buf.length() > 0) {if (state == st_subst_value_data) {String val=(String)ht.get(buf.toString());if (val != null) {o.write(val);shouldCopyBody=false;}}state=st_subst_attr;buf.setLength(0);break;}break;}buf.append((char)ch);break;case st_subst_body:if (ch == '<') {state=st_subst_body_tagId;buf.setLength(0);buf.append((char)ch);break;}if (shouldCopyBody) o.write(ch);break;case st_subst_body_tagId:buf.append((char)ch);if (buf.length() == 8) {if (buf.toString().equalsIgnoreCase("</subst>")) {state=st_normal;buf.setLength(0);shouldCopyBody=false;break;}state=st_subst_body;if (shouldCopyBody) o.write(buf.toString());break;}if (ch == '>') {state=st_subst_body;if (shouldCopyBody) o.write(buf.toString());break;}break;default :throw new Error("StreamSubstituter: bad state");}}}  }
class C{  public RC4PasswordStorageSchemeTestCase(){  super("cn=RC4,cn=Password Storage Schemes,cn=config");}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String name=getStringOptionValue(AuthOptions.AUTH_INSTANCE_NAME);  String type=getStringOptionValue(AuthOptions.AUTH_INSTANCE_TYPE);  String[] params={realm,name,type};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_CREATE_AUTH_INSTANCE",params);  try {    AMAuthenticationManager mgr=new AMAuthenticationManager(adminSSOToken,realm);    AMAuthenticationSchema as=mgr.getAuthenticationSchema(type);    mgr.createAuthenticationInstance(name,type,as.getAttributeValues());    getOutputWriter().printlnMessage(getResourceString("authentication-created-auth-instance-succeeded"));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_CREATE_AUTH_INSTANCE",params);  } catch (  AMConfigurationException e) {    debugError("CreateAuthInstance.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_CREATE_AUTH_INSTANCE",params);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public void addToParent(Element headerE) throws Exception {  Document doc=headerE.getOwnerDocument();  Element securityE=doc.createElementNS(WSSEConstants.NS_WSSE_WSF11,WSSEConstants.TAG_WSSE + ":" + WSSEConstants.TAG_SECURITYT);  securityE.setAttributeNS(SOAPBindingConstants.NS_XML,WSSEConstants.TAG_XML_WSSE,WSSEConstants.NS_WSSE_WSF11);  headerE.appendChild(securityE);  Document assertionDoc=XMLUtils.toDOMDocument(toString(true,true),SAMLUtils.debug);  Element assertionE=assertionDoc.getDocumentElement();  securityE.appendChild(doc.importNode(assertionE,true));}  }
class C{  public void update(DN baseDN,ServerState serverState){  for (  CSN csn : serverState) {    update(baseDN,csn);  }}  }
class C{  public final void update(byte[] input) throws IllegalStateException {  if (!isInitMac) {    throw new IllegalStateException();  }  if (input != null) {    spiImpl.engineUpdate(input,0,input.length);  }}  }
class C{  public boolean isNumericClumn(final int visibleColIndex){  return getTableColumn(visibleColIndex).isNumeric();}  }
class C{  public void recycle(){  decoder.reset();  leftovers.position(0);}  }
class C{  public Object clone(){  try {    return new Role(name,objectNameList);  } catch (  IllegalArgumentException exc) {    return null;  }}  }
class C{  public CodeGeneratorApi(ToolOptions options){  super(options);}  }
class C{  public Builder removeAllRequiredAttributes(){  this.requiredAttributes.clear();  return this;}  }
class C{  public String toString(){  StringBuffer tempSpot=new StringBuffer("[");  for (int counter=0, maxCounter=getPathCount(); counter < maxCounter; counter++) {    if (counter > 0)     tempSpot.append(", ");    tempSpot.append(getPathComponent(counter));  }  tempSpot.append("]");  return tempSpot.toString();}  }
class C{  public AMSearchResults searchUsers(String wildcard,Map avPairs,AMSearchControl searchControl) throws AMException, SSOException {  int scope;  String base;  String gfilter;  if (profileType == DYNAMIC_GROUP || profileType == ASSIGNABLE_DYNAMIC_GROUP) {    String[] array=dsServices.getGroupFilterAndScope(token,entryDN,profileType);    scope=Integer.parseInt(array[0]);    base=array[1];    gfilter=array[2];  } else {    scope=AMConstants.SCOPE_SUB;    base=getOrganizationDN();    gfilter="(iplanet-am-static-group-dn=" + entryDN + ")";  }  String userFilter="(&" + gfilter + "("+ AMNamingAttrManager.getNamingAttr(USER)+ "="+ wildcard+ ")"+ getSearchFilter(AMObject.USER)+ ")";  String filter=null;  if (avPairs == null) {    filter=userFilter;  } else {    if (avPairs.isEmpty()) {      filter=userFilter;    } else {      StringBuilder filterSB=new StringBuilder();      filterSB.append("(&").append(userFilter).append("(|");      Iterator iter=avPairs.keySet().iterator();      while (iter.hasNext()) {        String attributeName=(String)(iter.next());        Iterator iter2=((Set)(avPairs.get(attributeName))).iterator();        while (iter2.hasNext()) {          String attributeValue=(String)iter2.next();          filterSB.append("(").append(attributeName).append("=").append(attributeValue).append(")");        }      }      filterSB.append("))");      filter=filterSB.toString();    }  }  searchControl.setSearchScope(scope);  SearchControl sc=searchControl.getSearchControl();  String returnAttrs[]=searchControl.getReturnAttributes();  return dsServices.search(super.token,base,filter,sc,returnAttrs);}  }
class C{  public void remove(AbstractButton b){  if (b == null) {    return;  }  buttons.removeElement(b);  if (b.getModel() == selection) {    selection=null;  }  b.getModel().setGroup(null);}  }
class C{  public void test_hammerhead(){  if (!android.os.Build.DEVICE.equals("hammerhead")) {    return;  }  assertEquals(mInvariantProfile.numRows,4);  assertEquals(mInvariantProfile.numColumns,4);  assertEquals((int)mInvariantProfile.numHotseatIcons,5);  DeviceProfile landscapeProfile=mInvariantProfile.landscapeProfile;  DeviceProfile portraitProfile=mInvariantProfile.portraitProfile;  assertEquals(portraitProfile.allAppsNumCols,3);  assertEquals(landscapeProfile.allAppsNumCols,5);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder(64);switch (_type) {case TYPE_ROOT:    sb.append("/");  break;case TYPE_ARRAY:sb.append('[');sb.append(getCurrentIndex());sb.append(']');break;case TYPE_OBJECT:sb.append('{');if (_currentName != null) {sb.append('"');CharTypes.appendQuoted(sb,_currentName);sb.append('"');} else {sb.append('?');}sb.append('}');break;}return sb.toString();}  }
class C{  public EasyAppMod(final Context context){  this.context=context;}  }
class C{  @Override public void memberAdded(Member member){  try {    hasMembers=channel.hasMembers();    if (log.isInfoEnabled())     log.info(sm.getString("simpleTcpCluster.member.added",member));    fireLifecycleEvent(BEFORE_MEMBERREGISTER_EVENT,member);    registerMember(member);    fireLifecycleEvent(AFTER_MEMBERREGISTER_EVENT,member);  } catch (  Exception x) {    log.error(sm.getString("simpleTcpCluster.member.addFailed"),x);  }}  }
class C{  private NSDictionary parseDictionary() throws ParseException {  skip();  skipWhitespacesAndComments();  NSDictionary dict=new NSDictionary();  while (!accept(DICTIONARY_END_TOKEN)) {    String keyString;    if (accept(QUOTEDSTRING_BEGIN_TOKEN)) {      keyString=parseQuotedString();    } else {      keyString=parseString();    }    skipWhitespacesAndComments();    read(DICTIONARY_ASSIGN_TOKEN);    skipWhitespacesAndComments();    NSObject object=parseObject();    dict.put(keyString,object);    skipWhitespacesAndComments();    read(DICTIONARY_ITEM_DELIMITER_TOKEN);    skipWhitespacesAndComments();  }  skip();  return dict;}  }
class C{  public byte[] encrypt(byte[] data) throws CryptoException {  try {    byte[] ciphertext;    if (useExplicitIv) {      ciphertext=ArrayConverter.concatenate(encryptIv.getIV(),encryptCipher.doFinal(data));    } else {      encryptCipher.init(Cipher.ENCRYPT_MODE,encryptKey,encryptIv);      ciphertext=encryptCipher.doFinal(data);      encryptIv=new IvParameterSpec(Arrays.copyOfRange(ciphertext,ciphertext.length - decryptCipher.getBlockSize(),ciphertext.length));    }    return ciphertext;  } catch (  BadPaddingException|IllegalBlockSizeException|InvalidAlgorithmParameterException|InvalidKeyException ex) {    throw new CryptoException(ex);  }}  }
class C{  public FSLogoutNotification(String requestId,String providerID,NameIdentifier nameId,String relayState) throws FSMsgException {  setIssueInstant(newDate());  if ((requestId != null) && (requestId.length() != 0)) {    requestID=requestId;  } else {    requestID=SAMLUtils.generateID();    if (requestID == null) {      FSUtils.debug.error("FSLogoutNotification: couldn't generate RequestID.");      throw new FSMsgException("errorGenerateID",null);    }  }  this.relayState=relayState;  this.providerId=providerID;  this.nameIdentifier=nameId;}  }
class C{  public FlavorEvent(Clipboard source){  super(source);}  }
class C{  static void putRealm(JsonValue jsonValue,String value){  jsonValue.put(EVENT_REALM,value);}  }
class C{  @Override public String toString(){  String s=null;  try {    JSONObject jo=toJSONObject();    s=(jo == null) ? super.toString() : jo.toString(2);  } catch (  JSONException e) {    PolicyConstants.DEBUG.error("LogicalSubject.toString",e);  }  return s;}  }
class C{  public void callChildVisitors(XSLTVisitor visitor,boolean callAttributes){  if (callAttributes && (null != m_selectExpression))   m_selectExpression.callVisitors(this,visitor);  int length=getSortElemCount();  for (int i=0; i < length; i++) {    getSortElem(i).callVisitors(visitor);  }  super.callChildVisitors(visitor,callAttributes);}  }
class C{  public BlockVector(int x,int y,int z){  this.x=x;  this.y=y;  this.z=z;}  }
class C{  public JKLocale(Locale locale){  this.locale=locale;}  }
class C{  public void testCase12(){  byte aBytes[]={10,20,30,40,50,60,70,10,20,30};  byte bBytes[]={1,2,3,4,5,6,7,1,2,3,4,5,6,7};  int aSign=1;  int bSign=-1;  byte rBytes[]={1,2,3,4,15,26,37,41,52,63,74,15,26,37};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(1,result.signum());}  }
class C{  public static ValidatingUnmarshaller create(Grammar grammar,SAXUnmarshallerHandler _core,Locator locator){  Verifier v=new Verifier(new REDocumentDeclaration(grammar),new ErrorHandlerAdaptor(_core,locator));  v.setPanicMode(true);  return new ValidatingUnmarshaller(new VerifierFilter(v),_core);}  }
class C{  public ModifyOperation processModify(DN entryDN,List<Modification> modifications,List<Control> controls){  ModifyOperationBasis modifyOperation=new ModifyOperationBasis(this,nextOperationID(),nextMessageID(),controls,entryDN,modifications);  modifyOperation.setInternalOperation(true);  modifyOperation.run();  return modifyOperation;}  }
class C{  protected Finishings(int value){  super(value);}  }
class C{  private void verifyIntent(String intentStr) throws Exception {  Intent intent=Intent.parseUri(intentStr,0);  if (intent.getComponent() != null) {    verifyPackage(intent.getComponent().getPackageName());  } else   if (intent.getPackage() != null) {    verifyPackage(intent.getPackage());  }}  }
class C{  public int doStartTag() throws JspException {  reset();  key=(String)getValue("key");  String value="";  try {    ViewBeanManager viewBeanManager=getRequestContext().getViewBeanManager();    LoginViewBean vb=(LoginViewBean)viewBeanManager.getViewBean(com.sun.identity.authentication.UI.LoginViewBean.class);    value=(String)vb.getDisplayFieldValue(key);    setValue("key",value);  } catch (  Exception ex) {    setValue("key",key);  }  writeOutput(value);  return SKIP_BODY;}  }
class C{  public final int elementAt(int i){  return m_map[i];}  }
class C{  public void paintCheckBoxBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  @Override public boolean isActive(String value,String inactiveValue){  try {    int attrValue=Integer.parseInt(value);    return !((attrValue & DISABLED_MASK) != 0);  } catch (  NumberFormatException nfe) {    return false;  }}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS) throws FSMsgException {  StringBuffer result=new StringBuffer(1000);  String prefix="";  String libprefix="";  String uri="";  String liburi="";  if (includeNS) {    prefix=SAMLConstants.ASSERTION_PREFIX;    libprefix=IFSConstants.LIB_PREFIX;  }  if (declareNS) {    if (minorVersion == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {      liburi=IFSConstants.LIB_12_NAMESPACE_STRING;    } else {      liburi=IFSConstants.LIB_NAMESPACE_STRING;    }    uri=SAMLConstants.assertionDeclareStr;  }  result.append(IFSConstants.LEFT_ANGLE).append(prefix).append(IFSConstants.AUTHENTICATIONSTATEMENT).append(uri).append(IFSConstants.SPACE).append(liburi).append(IFSConstants.SPACE);  if ((_authenticationMethod != null) && _authenticationMethod.length() != 0) {    result.append(IFSConstants.AUTHENTICATION_METHOD).append("=\"").append(_authenticationMethod).append("\" ");  }  if (_authenticationInstant != null) {    result.append(IFSConstants.AUTHENTICATION_INSTANT).append("=\"").append(DateUtils.toUTCDateFormat(_authenticationInstant)).append("\" ");  }  if (reauthenticateOnOrAfter != null) {    result.append(IFSConstants.REAUTH_ON_OR_AFTER).append("=\"").append(DateUtils.toUTCDateFormat(reauthenticateOnOrAfter)).append("\" ");  }  if (sessionIndex != null) {    result.append(IFSConstants.SESSION_INDEX).append("=\"").append(sessionIndex).append("\" ");  }  result.append("xsi:type").append("=\"").append(libprefix).append(IFSConstants.AUTHENTICATIONSTATEMENT_TYPE).append(IFSConstants.QUOTE).append(IFSConstants.RIGHT_ANGLE);  if (getSubject() != null) {    result.append(((FSSubject)getSubject()).toXMLString(includeNS,false));  }  if (_subjectLocality != null) {    result.append(_subjectLocality.toString(includeNS,false));  }  if ((_authorityBinding != null) && (!_authorityBinding.isEmpty())) {    Iterator iter=this.getAuthorityBinding().iterator();    while (iter.hasNext()) {      AuthorityBinding authBinding=(AuthorityBinding)iter.next();      result.append(authBinding.toString(includeNS,false));    }  }  if (_authnContext != null) {    result.append(_authnContext.toXMLString(includeNS,false));  }  result.append(IFSConstants.START_END_ELEMENT).append(prefix).append(IFSConstants.AUTHENTICATIONSTATEMENT).append(IFSConstants.RIGHT_ANGLE);  return (result.toString());}  }
class C{  public static int v(String tag,String msg,Throwable tr){  return Log.v(tag,msg,tr);}  }
class C{  public final void automaticallyReleaseConnectionToPool(){  automaticallyReleaseConnectionToPool=true;  if (connection != null && connectionReleased) {    client.getConnectionPool().recycle(connection);    connection=null;  }}  }
class C{  public Builder ca(boolean ca){  this.ca=ca;  return this;}  }
class C{  void parseFinish(){  mChildren=mCurrentGroup.getChildren();}  }
class C{  @Override public void close(){  for (  OutputStream s : targetStreams) {    try {      s.close();    } catch (    Exception e) {      logger.traceException(e);    }  }}  }
class C{  @Provides @PerActivity Activity activity(){  return activity;}  }
class C{  public static boolean isFedInfoExists(String userName,String hostEntityID,String remoteEntityId,NameID nameID){  boolean exists=false;  if ((userName == null) || (hostEntityID == null) || (remoteEntityId == null)|| (nameID == null)) {    return exists;  }  try {    NameIDInfo info=AccountUtils.getAccountFederation(userName,hostEntityID,remoteEntityId);    if (info != null && info.getNameIDValue().equals(nameID.getValue())) {      exists=true;    }  } catch (  SAML2Exception se) {    debug.error("Failed to get DataStoreProvider " + se.toString());    if (debug.messageEnabled()) {      debug.message("SAML2Utils:isFedInfoExists:Stack : ",se);    }  }catch (  Exception e) {    debug.message("SAML2Utils:isFedInfoExists: Exception : ",e);  }  if (debug.messageEnabled()) {    debug.message("SAML2Utils:isFedInfoExists : " + exists);  }  return exists;}  }
class C{  public static DataReplicationOptions createInExistingTopology(AuthenticationData authenticationData,int replicationPort,boolean secureReplication){  DataReplicationOptions options=new DataReplicationOptions();  options.type=Type.IN_EXISTING_TOPOLOGY;  options.authenticationData=authenticationData;  options.replicationPort=replicationPort;  options.secureReplication=secureReplication;  return options;}  }
class C{  public void stop() throws IOException, InterruptedException {  thread.interrupt();  selector.wakeup();}  }
class C{  private ShortLookupTable createShortLut(float scale[],float off[],int nBands,int nElems){  short[][] lutData=new short[scale.length][nElems];  for (int band=0; band < scale.length; band++) {    float bandScale=scale[band];    float bandOff=off[band];    short[] bandLutData=lutData[band];    for (int i=0; i < nElems; i++) {      int val=(int)(i * bandScale + bandOff);      if ((val & 0xffff0000) != 0) {        if (val < 0) {          val=0;        } else {          val=65535;        }      }      bandLutData[i]=(short)val;    }  }  return new ShortLookupTable(0,lutData);}  }
class C{  public static void addAttributeToMapAsByteArray(Attribute attribute,Map<String,byte[][]> map){  byte[][] values=new byte[attribute.size()][];  int counter=0;  for (  ByteString byteString : attribute) {    byte[] bytes=byteString.toByteArray();    values[counter++]=bytes;  }  map.put(attribute.getAttributeDescriptionAsString(),values);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  String childValue;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("strong");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.setNodeValue("Marilyn Martin");  childData=child.getData();  assertEquals("data","Marilyn Martin",childData);  childValue=child.getNodeValue();  assertEquals("value","Marilyn Martin",childValue);}  }
class C{  public void toggle_ratsnest(){  if (ratsnest == null || ratsnest.is_hidden()) {    create_ratsnest();  } else {    ratsnest=null;  }  repaint();}  }
class C{  protected void fireMenuDeselected(){  if (DEBUG) {    System.out.println("In JMenu.fireMenuDeselected");  }  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == MenuListener.class) {      if (listeners[i + 1] == null) {        throw new Error(getText() + " has a NULL Listener!! " + i);      } else {        if (menuEvent == null)         menuEvent=new MenuEvent(this);        ((MenuListener)listeners[i + 1]).menuDeselected(menuEvent);      }    }  }}  }
class C{  public INVALID_TRANSACTION(String s,int minor,CompletionStatus completed){  super(s,minor,completed);}  }
class C{  protected void endNode(Node node) throws org.xml.sax.SAXException {switch (node.getNodeType()) {case Node.DOCUMENT_NODE:    break;case Node.ELEMENT_NODE:  String ns=m_dh.getNamespaceOfNode(node);if (null == ns) ns="";this.m_contentHandler.endElement(ns,m_dh.getLocalNameOfNode(node),node.getNodeName());NamedNodeMap atts=((Element)node).getAttributes();int nAttrs=atts.getLength();for (int i=0; i < nAttrs; i++) {Node attr=atts.item(i);String attrName=attr.getNodeName();if (attrName.equals("xmlns") || attrName.startsWith("xmlns:")) {int index;String prefix=(index=attrName.indexOf(":")) < 0 ? "" : attrName.substring(index + 1);this.m_contentHandler.endPrefixMapping(prefix);}}break;case Node.CDATA_SECTION_NODE:break;case Node.ENTITY_REFERENCE_NODE:{EntityReference eref=(EntityReference)node;if (m_contentHandler instanceof LexicalHandler) {LexicalHandler lh=((LexicalHandler)this.m_contentHandler);lh.endEntity(eref.getNodeName());}}break;default :}}  }
class C{  public void revokeService(Class serviceClass,BeanContextServiceProvider bcsp,boolean revokeCurrentServicesNow){  if (serviceClass == null)   throw new NullPointerException("serviceClass");  if (bcsp == null)   throw new NullPointerException("bcsp");synchronized (BeanContext.globalHierarchyLock) {    if (!services.containsKey(serviceClass))     return;    BCSSServiceProvider bcsssp=(BCSSServiceProvider)services.get(serviceClass);    if (!bcsssp.getServiceProvider().equals(bcsp))     throw new IllegalArgumentException("service provider mismatch");    services.remove(serviceClass);    if (bcsp instanceof Serializable)     serializable--;    Iterator i=bcsChildren();    while (i.hasNext()) {      ((BCSSChild)i.next()).revokeService(serviceClass,false,revokeCurrentServicesNow);    }    fireServiceRevoked(serviceClass,revokeCurrentServicesNow);  }}  }
class C{  public WarningHeader createWarningHeader(String agent,int code,String comment) throws ParseException, InvalidArgumentException {  if (agent == null)   throw new NullPointerException("null arg");  Warning warning=new Warning();  warning.setAgent(agent);  warning.setCode(code);  warning.setText(comment);  return warning;}  }
class C{  public String generatorSettings(){  return generatorSettings;}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  void onShutdown(){}  }
class C{  public static void error(CommandManager mgr,String msg){  dumpToOutput(mgr,msg,null);  mgr.getDebugger().error(msg);}  }
class C{  public void run(){  try {    Runnable localTarget=null;synchronized (this) {      localTarget=target;    }    if (localTarget != null) {      localTarget.run();    }  } catch (  RuntimeException ex) {synchronized (this) {      if (recoverable != null) {        recoverable.recover();      }    }  }catch (  Exception ex) {  }catch (  Throwable t) {synchronized (this) {      if (recoverable != null) {        recoverable.recover();      }    }    throw new Error(t);  }}  }
class C{  public static long readUINT32(InputStream stream) throws IOException {  long result=0;  for (int i=0; i <= 24; i+=8) {    result|=(long)stream.read() << i;  }  return result;}  }
class C{  private static CookieOrigin adjustEffectiveHost(final CookieOrigin origin){  String host=origin.getHost();  boolean isLocalHost=true;  for (int i=0; i < host.length(); i++) {    char ch=host.charAt(i);    if (ch == '.' || ch == ':') {      isLocalHost=false;      break;    }  }  if (isLocalHost) {    host+=".local";    return new CookieOrigin(host,origin.getPort(),origin.getPath(),origin.isSecure());  } else {    return origin;  }}  }
class C{  private boolean allowClientCertOnly(Request request){  return clientAuthOnly.contains(Integer.valueOf(request.getUri().getPort()));}  }
class C{  protected void selectNextPossibleValue(){  int si;  if (comboBox.isPopupVisible()) {    si=listBox.getSelectedIndex();  } else {    si=comboBox.getSelectedIndex();  }  if (si < comboBox.getModel().getSize() - 1) {    listBox.setSelectedIndex(si + 1);    listBox.ensureIndexIsVisible(si + 1);    if (!isTableCellEditor) {      if (!(UIManager.getBoolean("ComboBox.noActionOnKeyNavigation") && comboBox.isPopupVisible())) {        comboBox.setSelectedIndex(si + 1);      }    }    comboBox.repaint();  }}  }
class C{  public boolean isDone(){  return (index > 1);}  }
class C{  public void paintRadioButtonBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  private static int nextHashCode(){  return nextHashCode.getAndAdd(HASH_INCREMENT);}  }
class C{  public ClusterRuleSet(String prefix){  super();  this.namespaceURI=null;  this.prefix=prefix;}  }
class C{  public void addPagedListResponseImports(ModelTypeTable typeTable){}  }
class C{  public void addIndexSelectionListener(IndexSelectionListener listener){  backendIndexesPanel.addIndexSelectionListener(listener);  backendVLVIndexesPanel.addIndexSelectionListener(listener);}  }
class C{  public void processData() throws CannotReadException {  while (dataBuffer.hasRemaining()) {    byte next=dataBuffer.get();    if (next != (byte)'e') {      continue;    }    ByteBuffer tempBuffer=dataBuffer.slice();    if ((tempBuffer.get() == (byte)'s') & (tempBuffer.get() == (byte)'d') & (tempBuffer.get() == (byte)'s')) {      dataBuffer.position(dataBuffer.position() - 1 - Mp4BoxHeader.OFFSET_LENGTH);      return;    }  }}  }
class C{  public T sourceObjectId(String sourceObjectId){  jsonValue.put(SOURCE_OBJECT_ID,sourceObjectId);  return self();}  }
class C{  public short nextShort() throws DataFormatException {  try {    return bytes.readShort();  } catch (  IndexOutOfBoundsException e) {    throw new DataFormatException(e.getMessage());  }}  }
class C{  static Object newPropertyChangeEvent(Object source,String prop,Object oldValue,Object newValue){  try {    return propertyEventCtor.newInstance(source,prop,oldValue,newValue);  } catch (  InstantiationException|IllegalAccessException x) {    throw new AssertionError(x);  }catch (  InvocationTargetException x) {    Throwable cause=x.getCause();    if (cause instanceof Error)     throw (Error)cause;    if (cause instanceof RuntimeException)     throw (RuntimeException)cause;    throw new AssertionError(x);  }}  }
class C{  public static boolean isJavaMIMEType(String str){  return (str != null && str.startsWith(JavaMIME,0));}  }
class C{  public void testRadix10Neg(){  String value="-2489756308572364789878394872984";  int radix=16;  BigInteger aNumber=new BigInteger(value,radix);  String result=aNumber.toString(radix);  assertTrue(result.equals(value));}  }
class C{  @Override public int read() throws java.io.IOException {  if (position < 0) {    if (encode) {      byte[] b3=new byte[3];      int numBinaryBytes=0;      for (int i=0; i < 3; i++) {        int b=in.read();        if (b >= 0) {          b3[i]=(byte)b;          numBinaryBytes++;        } else {          break;        }      }      if (numBinaryBytes > 0) {        encode3to4(b3,0,numBinaryBytes,buffer,0,options);        position=0;        numSigBytes=4;      } else {        return -1;      }    } else {      byte[] b4=new byte[4];      int i=0;      for (i=0; i < 4; i++) {        int b=0;        do {          b=in.read();        } while (b >= 0 && decodabet[b & 0x7f] <= WHITE_SPACE_ENC);        if (b < 0) {          break;        }        b4[i]=(byte)b;      }      if (i == 4) {        numSigBytes=decode4to3(b4,0,buffer,0,options);        position=0;      } else       if (i == 0) {        return -1;      } else {        throw new java.io.IOException("Improperly padded Base64 input.");      }    }  }  if (position >= 0) {    if (position >= numSigBytes) {      return -1;    }    if (encode && breakLines && lineLength >= MAX_LINE_LENGTH) {      lineLength=0;      return '\n';    } else {      lineLength++;      int b=buffer[position++];      if (position >= bufferLength) {        position=-1;      }      return b & 0xFF;    }  } else {    throw new java.io.IOException("Error in Base64 code reading stream.");  }}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  public void testConstrStringWithExponentWithPoint1(){  String a="23985439837984782435652424523876878.7678287e+214";  int aScale=-207;  BigInteger bA=new BigInteger("239854398379847824356524245238768787678287");  BigDecimal aNumber=new BigDecimal(a);  assertEquals("incorrect value",bA,aNumber.unscaledValue());  assertEquals("incorrect scale",aScale,aNumber.scale());}  }
class C{  public void testAddIssuerName$B(){  X509CRLSelector selector=new X509CRLSelector();  byte[] iss1=new byte[]{48,21,49,19,48,17,6,3,85,4,10,19,10,70,105,114,115,116,32,79,114,103,46};  byte[] iss2=new byte[]{48,22,49,20,48,18,6,3,85,4,10,19,11,83,101,99,111,110,100,32,79,114,103,46};  TestCRL crl1=new TestCRL(new X500Principal(iss1));  TestCRL crl2=new TestCRL(new X500Principal(iss2));  try {    selector.addIssuerName(iss1);  } catch (  IOException e) {    e.printStackTrace();    fail("Unexpected IOException was thrown.");  }  assertTrue("The CRL should match the selection criteria.",selector.match(crl1));  assertFalse("The CRL should not match the selection criteria.",selector.match(crl2));  try {    selector.addIssuerName(iss2);  } catch (  IOException e) {    e.printStackTrace();    fail("Unexpected IOException was thrown.");  }  assertTrue("The CRL should match the selection criteria.",selector.match(crl2));}  }
class C{  public AuthLoginException(String rbName,String errorCode,Object[] args){  this(rbName,errorCode,args,null);}  }
class C{  public MultiPixelPackedSampleModel(int dataType,int w,int h,int numberOfBits){  this(dataType,w,h,numberOfBits,(w * numberOfBits + DataBuffer.getDataTypeSize(dataType) - 1) / DataBuffer.getDataTypeSize(dataType),0);  if (dataType != DataBuffer.TYPE_BYTE && dataType != DataBuffer.TYPE_USHORT && dataType != DataBuffer.TYPE_INT) {    throw new IllegalArgumentException("Unsupported data type " + dataType);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  DOMImplementation domImpl;  DocumentType newDocType;  Document ownerDocument;  String publicId="http://www.w3.org/DOM/Test/dom2.dtd";  String systemId="dom2.dtd";  String qualifiedName;  java.util.List qualifiedNames=new java.util.ArrayList();  qualifiedNames.add("_:_");  qualifiedNames.add("_:h0");  qualifiedNames.add("_:test");  qualifiedNames.add("_:_.");  qualifiedNames.add("_:a-");  qualifiedNames.add("l_:_");  qualifiedNames.add("ns:_0");  qualifiedNames.add("ns:a0");  qualifiedNames.add("ns0:test");  qualifiedNames.add("ns:EEE.");  qualifiedNames.add("ns:_-");  qualifiedNames.add("a.b:c");  qualifiedNames.add("a-b:c.j");  qualifiedNames.add("a-b:c");  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();  for (int indexN10077=0; indexN10077 < qualifiedNames.size(); indexN10077++) {    qualifiedName=(String)qualifiedNames.get(indexN10077);    newDocType=domImpl.createDocumentType(qualifiedName,publicId,systemId);    assertNotNull("domimplementationcreatedocumenttype02_newDocType",newDocType);    ownerDocument=newDocType.getOwnerDocument();    assertNull("domimplementationcreatedocumenttype02_ownerDocument",ownerDocument);  }}  }
class C{  Map.Entry<K,V> doRemoveFirstEntry(){  for (; ; ) {    Node<K,V> b=head.node;    Node<K,V> n=b.next;    if (n == null)     return null;    Node<K,V> f=n.next;    if (n != b.next)     continue;    Object v=n.value;    if (v == null) {      n.helpDelete(b,f);      continue;    }    if (!n.casValue(v,null))     continue;    if (!n.appendMarker(f) || !b.casNext(n,f))     findFirst();    clearIndexToFirst();    return new AbstractMap.SimpleImmutableEntry<K,V>(n.key,(V)v);  }}  }
class C{  private int readData(InputStream is,int length){  int read=0;  int count;  byte[] buf=new byte[length];  try {    while (is.available() > 0) {      count=is.read(buf,read,length - read);      read+=count;    }  } catch (  IOException e) {    log("IOException from readData");  }  return read;}  }
class C{  public static int indexIgnoringWhitespace(String str,int index){  int j=0;  for (int i=0; i < index; i++)   if (!Character.isWhitespace(str.charAt(i)))   j++;  return j;}  }
class C{  public static Map<String,File> filesInDirectory(String dir,String regex){  return filesInDirectory(dir,regex,false);}  }
class C{  public static boolean isVendor(String vendor){  String javaVendor=System.getProperty("java.vendor");  return javaVendor.startsWith(vendor);}  }
class C{  public final PlaDirection middle_approx(PlaDirection p_other){  PlaPointFloat v1=to_float();  PlaPointFloat v2=p_other.to_float();  double length1=v1.distance();  double length2=v2.distance();  double x=v1.v_x / length1 + v2.v_x / length2;  double y=v1.v_y / length1 + v2.v_y / length2;  final double scale_factor=1000;  PlaVectorInt vm=new PlaVectorInt(x * scale_factor,y * scale_factor);  return new PlaDirection(vm);}  }
class C{  public static ModifyDNRequest newModifyDNRequest(final String name,final String newName){  return Requests.newModifyDNRequest(name,newName).addControl(TransactionIdControl.newControl(AuditRequestContext.createSubTransactionIdValue()));}  }
class C{  public void visitTryCatchBlock(Label start,Label end,Label handler,String type){  if (mv != null) {    mv.visitTryCatchBlock(start,end,handler,type);  }}  }
class C{  protected AbstractRenderer(IElement modelElement){  this.modelElement=modelElement;}  }
class C{  @Override public void onStateNotSaved(){  super.onStateNotSaved();}  }
class C{  private Functions(){}  }
class C{  private CompletionStatus(int _value){  this._value=_value;}  }
class C{  private BitMatrix sampleGrid(BitMatrix image,ResultPoint topLeft,ResultPoint topRight,ResultPoint bottomRight,ResultPoint bottomLeft) throws NotFoundException {  GridSampler sampler=GridSampler.getInstance();  int dimension=getDimension();  float low=dimension / 2.0f - nbCenterLayers;  float high=dimension / 2.0f + nbCenterLayers;  return sampler.sampleGrid(image,dimension,dimension,low,low,high,low,high,high,low,high,topLeft.getX(),topLeft.getY(),topRight.getX(),topRight.getY(),bottomRight.getX(),bottomRight.getY(),bottomLeft.getX(),bottomLeft.getY());}  }
class C{  protected void paintText(SynthContext context,Graphics g,String title){  if (progressBar.isStringPainted()) {    SynthStyle style=context.getStyle();    Font font=style.getFont(context);    FontMetrics fm=SwingUtilities2.getFontMetrics(progressBar,g,font);    int strLength=style.getGraphicsUtils(context).computeStringWidth(context,font,fm,title);    Rectangle bounds=progressBar.getBounds();    if (rotateText && progressBar.getOrientation() == JProgressBar.VERTICAL) {      Graphics2D g2=(Graphics2D)g;      Point textPos;      AffineTransform rotation;      if (progressBar.getComponentOrientation().isLeftToRight()) {        rotation=AffineTransform.getRotateInstance(-Math.PI / 2);        textPos=new Point((bounds.width + fm.getAscent() - fm.getDescent()) / 2,(bounds.height + strLength) / 2);      } else {        rotation=AffineTransform.getRotateInstance(Math.PI / 2);        textPos=new Point((bounds.width - fm.getAscent() + fm.getDescent()) / 2,(bounds.height - strLength) / 2);      }      if (textPos.x < 0) {        return;      }      font=font.deriveFont(rotation);      g2.setFont(font);      g2.setColor(style.getColor(context,ColorType.TEXT_FOREGROUND));      style.getGraphicsUtils(context).paintText(context,g,title,textPos.x,textPos.y,-1);    } else {      Rectangle textRect=new Rectangle((bounds.width / 2) - (strLength / 2),(bounds.height - (fm.getAscent() + fm.getDescent())) / 2,0,0);      if (textRect.y < 0) {        return;      }      g.setColor(style.getColor(context,ColorType.TEXT_FOREGROUND));      g.setFont(font);      style.getGraphicsUtils(context).paintText(context,g,title,textRect.x,textRect.y,-1);    }  }}  }
class C{  public BindOperation processSimpleBind(ByteString rawBindDN,ByteString password){  return processSimpleBind(rawBindDN,password,null);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.SignedPartsElement createSignedPartsElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.SignedPartsElementImpl();}  }
class C{  private String result(HttpURLConnection conn,boolean input) throws IOException {  StringBuffer sb=new StringBuffer();  if (input) {    InputStream is=conn.getInputStream();    BufferedReader reader=new BufferedReader(new InputStreamReader(is,"utf-8"));    String line=null;    while ((line=reader.readLine()) != null) {      sb.append(line);    }    reader.close();    is.close();  }  Map<String,Object> result=new HashMap<String,Object>();  result.put("code",conn.getResponseCode());  result.put("mesg",conn.getResponseMessage());  result.put("type",conn.getContentType());  result.put("data",sb);  String output=String.valueOf(conn.getResponseCode());  setOutputResponseCode(output);  Gson gson=new Gson();  String json=gson.toJson(result);  logger.info("json = " + json);  return json;}  }
class C{  private void initFunctionTable(){  m_funcTable=new FunctionTable();}  }
class C{  public Mp4TagByteField(Mp4FieldKey id,String value,int realDataLength) throws FieldDataInvalidException {  super(id.getFieldName(),value);  this.realDataLength=realDataLength;  try {    Long.parseLong(value);  } catch (  NumberFormatException nfe) {    throw new FieldDataInvalidException("Value of:" + value + " is invalid for field:"+ id);  }}  }
class C{  MutableBigInteger(int[] val){  value=val;  intLen=val.length;}  }
class C{  @SuppressWarnings("unchecked") @Override public PdfName copyTo(PdfDocument document,boolean allowDuplicating){  return (PdfName)super.copyTo(document,allowDuplicating);}  }
class C{  private void addLinesForAttributes(List<StringBuilder> ldifLines,Map<AttributeType,List<Attribute>> attributes){  for (  List<Attribute> attrList : attributes.values()) {    for (    Attribute a : attrList) {      String attrName=a.getAttributeDescription().toString();      for (      ByteString v : a) {        StringBuilder attrLine=new StringBuilder(attrName);        appendLDIFSeparatorAndValue(attrLine,v);        ldifLines.add(attrLine);      }    }  }}  }
class C{  RhinoScriptEngine(RhinoScriptEngineFactory factory){  Reject.ifNull(factory);  this.factory=factory;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodegetprevioussiblingnull.class,args);}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    try {      int offs=target.getCaretPosition();      int endOffs=Utilities.getWordEnd(target,offs);      if (select) {        target.moveCaretPosition(endOffs);      } else {        target.setCaretPosition(endOffs);      }    } catch (    BadLocationException bl) {      UIManager.getLookAndFeel().provideErrorFeedback(target);    }  }}  }
class C{  protected final void registerOption(ManagedObjectOption option){  options.add(option);}  }
class C{  public SOAPMessage validateResponse(SOAPMessage soapMessage,Map sharedData) throws SOAPBindingException {  try {    Message msg=new Message(soapMessage);    if (_config.isResponseSignEnabled() && !SecurityUtils.verifyMessage(msg)) {      throw new SOAPBindingException(Utils.bundle.getString("cannotVerifySignature"));    }    Utils.enforceProcessingRules(msg,null,true);    return soapMessage;  } catch (  Exception ex) {    Utils.debug.error("MessageProcessor.validateResponse: " + " Response validation failed.",ex);    throw new SOAPBindingException(Utils.bundle.getString("validateResponseFailed"));  }}  }
class C{  private void initialise(){  this.tokenType=beanClass.getAnnotation(Type.class).value();  BeanInfo beanInfo;  try {    beanInfo=Introspector.getBeanInfo(beanClass);  } catch (  IntrospectionException e) {    throw new IllegalStateException("Could not introspect type " + beanClass.getName(),e);  }  for (  PropertyDescriptor pd : beanInfo.getPropertyDescriptors()) {    if (pd.getReadMethod() != null && pd.getWriteMethod() != null) {      Method readMethod=pd.getReadMethod();      Field f=readMethod.getAnnotation(Field.class);      Method writeMethod=pd.getWriteMethod();      if (f == null) {        f=writeMethod.getAnnotation(Field.class);      }      if (f == null) {        try {          java.lang.reflect.Field field=beanClass.getDeclaredField(pd.getName());          f=field.getAnnotation(Field.class);        } catch (        NoSuchFieldException e) {        }      }      if (f != null) {        CoreTokenField tokenField=f.field();        Class<?> attributeType=tokenField.getAttributeType();        Class<?> beanFieldType=readMethod.getReturnType();        Class<? extends Converter> converterType=f.converter();        if (converterType.equals(Converter.IdentityConverter.class) && !beanFieldType.equals(attributeType)) {          throw new IllegalStateException("Field " + pd.getDisplayName() + " does not have a compatible type"+ "and does not declare a converter");        }        validateConverterType(attributeType,beanFieldType,converterType);        Converter converter=InjectorHolder.getInstance(converterType);        boolean generated=f.generated();        FieldDetails field=new FieldDetails(tokenField,readMethod,writeMethod,converter,generated);        if (tokenField == CoreTokenField.TOKEN_ID) {          idField=field;        } else {          if (generated) {            throw new IllegalStateException("Non-id values cannot be generated: " + f.toString());          }          fields.add(field);        }        fieldsMap.put(pd.getName(),field);      }    }  }  if (idField == null) {    throw new IllegalStateException("The bean class does not declare an ID field");  }}  }
class C{  private List<ServerDescriptor> putQueriedReplicaFirst(Set<ServerDescriptor> servers){  List<ServerDescriptor> results=new ArrayList<>(servers);  for (Iterator<ServerDescriptor> it=results.iterator(); it.hasNext(); ) {    ServerDescriptor server=it.next();    if (adsContext.getHostPort().equals(server.getHostPort(true))) {      it.remove();      results.add(0,server);      break;    }  }  return results;}  }
class C{  @Override public void body(String namespace,String name,String text) throws Exception {  ResourceBase resourceBase=(ResourceBase)digester.peek();  resourceBase.setProperty("mappedName",text.trim());}  }
class C{  public ValidationResult isLocalHost(String host,Map props,IStateAccess state){  ValidationResultStatus validRes=ValidationResultStatus.STATUS_FAILED;  LocalizedMessage returnMessage=null;  try {    if ((host != null) && (host.length() > 0)) {      StringTokenizer st=new StringTokenizer(host,".");      String hostname=st.nextToken();      if (hostname != null) {        String localHost=InetAddress.getLocalHost().getHostName();        if (hostname.equals(localHost)) {          validRes=ValidationResultStatus.STATUS_SUCCESS;        }      }    }  } catch (  Exception ex) {    Debug.log("NetworkValidator.isLocalHost(...) threw exception : " + ex);  }  if (validRes.getIntValue() == ValidationResultStatus.INT_STATUS_FAILED) {    returnMessage=LocalizedMessage.get(LOC_VA_WRN_IN_VAL_LOCAL_HOST,new Object[]{host});  }  Debug.log("NetworkValidator : Is Host : " + host + " local ?  "+ validRes.isSuccessful());  return new ValidationResult(validRes,null,returnMessage);}  }
class C{  public void testCase06_RDSPerformance(){  int station=0;  station=FmRadioTestCaseUtil.getStationFromUI(mTextViewFrequency);  if (!FmRadioStation.isFavoriteStation(mFmRadioActivity,station)) {    clickView(mButtonAddToFavorite);    mInstrumentation.waitForIdleSync();    FmRadioTestCaseUtil.sleep(SHORT_TIME);  }  mInstrumentation.invokeMenuActionSync(mFmRadioActivity,R.id.fm_channel_list,0);  mActivityMonitor=new ActivityMonitor("com.mediatek.fmradio.FmRadioFavorite",null,false);  mInstrumentation.addMonitor(mActivityMonitor);  mFmRadioFavorite=(FmRadioFavorite)mActivityMonitor.waitForActivityWithTimeout(TIMEOUT);  assertNotNull(mFmRadioFavorite);  float frequency=0;  int stationInList=0;  ListView listView=(ListView)mFmRadioFavorite.findViewById(R.id.station_list);  FmRadioTestCaseUtil.sleep(SLEEP_TIME);  assertTrue((listView != null) && (listView.getCount() > 0));  ListAdapter listAdapter=listView.getAdapter();  for (int i=0; i < listView.getCount(); i++) {    View view=listAdapter.getView(i,null,listView);    TextView textView=(TextView)view.findViewById(R.id.lv_station_freq);    String frequencyStr=textView.getText().toString();    try {      frequency=Float.parseFloat(frequencyStr);    } catch (    NumberFormatException e) {      e.printStackTrace();    }    stationInList=(int)(frequency * CONVERT_RATE);    if (FmRadioStation.isFavoriteStation(mFmRadioFavorite,stationInList)) {      mSolo.clickLongOnText(frequencyStr);      mSolo.clickOnText(mFmRadioFavorite.getString(R.string.contmenu_item_edit));      EditText editText=(EditText)mSolo.getView(R.id.dlg_edit_station_freq_text);      mSolo.clearEditText(editText);      mSolo.enterText(editText,"91.4");      mInstrumentation.waitForIdleSync();      InputMethodManager inputMethodManager=(InputMethodManager)mSolo.getCurrentActivity().getSystemService(Context.INPUT_METHOD_SERVICE);      inputMethodManager.toggleSoftInput(0,0);      if (FmRadioStation.isStationExistInChList(mFmRadioFavorite,914)) {        mSolo.clickOnText(mFmRadioFavorite.getString(R.string.edit_frequency_overwrite_text));      } else {        mSolo.clickOnText(mFmRadioFavorite.getString(R.string.btn_ok));      }      mInstrumentation.waitForIdleSync();      sleep(SLEEP_TIME);      break;    }  }  mSolo.clickOnText("91.4");  long startTuneTime=System.currentTimeMillis();  Log.i(TAG,"[Performance test][FmRadio] open channel start [" + startTuneTime + "]");  mInstrumentation.waitForIdleSync();  long startTime=System.currentTimeMillis();  Log.i(TAG,"[Performance test][FmRadio] receive RDS start [" + startTime + "]");  final TextView rdsTextView=(TextView)FmRadioTestCaseUtil.getVariableFromActivity(mFmRadioActivity,"mTextRDS");  long scapeTime=0;  while (true) {    String rdsInfo=rdsTextView.getText().toString();    if (!"".equals(rdsInfo)) {      long endTime=System.currentTimeMillis();      Log.i(TAG,"[Performance test][FmRadio] receive RDS end [" + endTime + "]");      break;    }    try {      scapeTime=System.currentTimeMillis() - startTime;      sleep(CHECK_TIME);    } catch (    Exception e) {    }    if (scapeTime > RDS_TIME_OUT) {      long endTime=System.currentTimeMillis();      Log.i(TAG,"[Performance test][FmRadio] receive RDS end [" + endTime + "]");      break;    }  }}  }
class C{  private static DecoderResult createDecoderResultFromAmbiguousValues(int ecLevel,int[] codewords,int[] erasureArray,int[] ambiguousIndexes,int[][] ambiguousIndexValues) throws FormatException, ChecksumException {  int[] ambiguousIndexCount=new int[ambiguousIndexes.length];  int tries=100;  while (tries-- > 0) {    for (int i=0; i < ambiguousIndexCount.length; i++) {      codewords[ambiguousIndexes[i]]=ambiguousIndexValues[i][ambiguousIndexCount[i]];    }    try {      return decodeCodewords(codewords,ecLevel,erasureArray);    } catch (    ChecksumException ignored) {    }    if (ambiguousIndexCount.length == 0) {      throw ChecksumException.getChecksumInstance();    }    for (int i=0; i < ambiguousIndexCount.length; i++) {      if (ambiguousIndexCount[i] < ambiguousIndexValues[i].length - 1) {        ambiguousIndexCount[i]++;        break;      } else {        ambiguousIndexCount[i]=0;        if (i == ambiguousIndexCount.length - 1) {          throw ChecksumException.getChecksumInstance();        }      }    }  }  throw ChecksumException.getChecksumInstance();}  }
class C{  public ModelMBeanNotificationInfo(String[] notifTypes,String name,String description,Descriptor descriptor){  super(notifTypes,name,description);  if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {    MODELMBEAN_LOGGER.logp(Level.FINER,ModelMBeanNotificationInfo.class.getName(),"ModelMBeanNotificationInfo","Entry");  }  notificationDescriptor=validDescriptor(descriptor);}  }
class C{  public static DereferenceAliasesPolicy valueOf(final int intValue){  if (intValue < 0 || intValue >= ELEMENTS.length) {    return null;  }  return ELEMENTS[intValue];}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodereplacechildnodename.class,args);}  }
class C{  public OpendsCertificateException(X509Certificate[] chain){  super();  this.chain=chain;}  }
class C{  public LoginStateCallback(){}  }
class C{  public final void testGetG(){  DSAPrivateKeySpec dpks=new DSAPrivateKeySpec(new BigInteger("1"),new BigInteger("2"),new BigInteger("3"),new BigInteger("4"));  assertEquals(4,dpks.getG().intValue());}  }
class C{  public static BinaryValue createBase64(byte[] bytes){  BinaryValue value=new BinaryValue();  value.type=Type.BASE64_STRING;  value.bytes=bytes;  value.base64=value.getBase64();  value.hashCode=value.base64.hashCode();  return value;}  }
class C{  @SuppressWarnings("rawtypes") public LocalCache(String name,int maxSize,long maxLifetime){  this.name=name;  this.maxCacheSize=maxSize;  this.defaultLifetime=maxLifetime;  map=new HashMap(103);  lastAccessedList=new LinkedList();  ageList=new LinkedList();}  }
class C{  private static boolean isHexDigit(char c){  return (c >= '0' && c <= '9' || c >= 'a' && c <= 'f' || c >= 'A' && c <= 'F');}  }
class C{  private ASN1(){}  }
class C{  void put(final ByteVector out){  final int FACTOR=ClassWriter.TO_ACC_SYNTHETIC;  int mask=Opcodes.ACC_DEPRECATED | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE | ((access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / FACTOR);  out.putShort(access & ~mask).putShort(name).putShort(desc);  int attributeCount=0;  if (value != 0) {    ++attributeCount;  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      ++attributeCount;    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;  }  if (ClassReader.SIGNATURES && signature != 0) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && tanns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && itanns != null) {    ++attributeCount;  }  if (attrs != null) {    attributeCount+=attrs.getCount();  }  out.putShort(attributeCount);  if (value != 0) {    out.putShort(cw.newUTF8("ConstantValue"));    out.putInt(2).putShort(value);  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      out.putShort(cw.newUTF8("Synthetic")).putInt(0);    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(cw.newUTF8("Deprecated")).putInt(0);  }  if (ClassReader.SIGNATURES && signature != 0) {    out.putShort(cw.newUTF8("Signature"));    out.putInt(2).putShort(signature);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (ClassReader.ANNOTATIONS && tanns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"));    tanns.put(out);  }  if (ClassReader.ANNOTATIONS && itanns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"));    itanns.put(out);  }  if (attrs != null) {    attrs.put(cw,null,0,-1,-1,out);  }}  }
class C{  public ListItem(String text){  this();  add(new Paragraph(text).setMarginTop(0).setMarginBottom(0));}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.AttributeElement createAttributeElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.AttributeElementImpl();}  }
class C{  public boolean isAllowUnlimited(){  return allowUnlimited;}  }
class C{  private void appendToList(List<String> list,String[] array){  if (array != null && array.length > 0) {    list.addAll(Arrays.asList(array));  }}  }
class C{  protected MouseMotionListener createListMouseMotionListener(){  return getHandler();}  }
class C{  public static String toXml(final Object obj){  final ByteArrayOutputStream out=new ByteArrayOutputStream();  final XMLEncoder e=new XMLEncoder(out);  e.setExceptionListener(new XmlEncoderExceptionListener());  e.writeObject(obj);  e.close();  return out.toString();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementgetelementsbytagname.class,args);}  }
class C{  public FrameBodyWCOP(String urlLink){  super(urlLink);}  }
class C{  public void testSubtractMathContextDiffScalePosNeg(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=15;  String b="747233429293018787918347987234564568";  int bScale=-10;  String c="-7.4723342916989754E+45";  int cScale=-29;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  MathContext mc=new MathContext(17,RoundingMode.DOWN);  BigDecimal result=aNumber.subtract(bNumber,mc);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  public void read_design(ObjectInputStream p_design) throws ClassNotFoundException, IOException {  r_board=(RoutingBoard)p_design.readObject();  r_board.set_transient_item(this);  itera_settings=(IteraSettings)p_design.readObject();  itera_settings.set_transient_fields(r_board,actlog);  coordinate_transform=(PlaCoordTransform)p_design.readObject();  gdi_context=(GdiContext)p_design.readObject();  gdi_context.set_transient_field(stat);  screen_messages.show_layer_name(itera_settings.get_layer());}  }
class C{  public DefaultTableCellRenderer(){  super();  setOpaque(true);  setBorder(getNoFocusBorder());  setName("Table.cellRenderer");}  }
class C{  protected Border createRolloverBorder(){  Object border=UIManager.get("ToolBar.rolloverBorder");  if (border != null) {    return (Border)border;  }  UIDefaults table=UIManager.getLookAndFeelDefaults();  return new CompoundBorder(new BasicBorders.RolloverButtonBorder(table.getColor("controlShadow"),table.getColor("controlDkShadow"),table.getColor("controlHighlight"),table.getColor("controlLtHighlight")),new BasicBorders.RolloverMarginBorder());}  }
class C{  public Builder addQueryParameter(String name,String value){  if (name == null)   throw new IllegalArgumentException("name == null");  if (encodedQueryNamesAndValues == null)   encodedQueryNamesAndValues=new ArrayList<>();  encodedQueryNamesAndValues.add(canonicalize(name,QUERY_COMPONENT_ENCODE_SET,false,true,true));  encodedQueryNamesAndValues.add(value != null ? canonicalize(value,QUERY_COMPONENT_ENCODE_SET,false,true,true) : null);  return this;}  }
class C{  public ExtensionNamespacesManager(){  setPredefinedNamespaces();}  }
class C{  @Override public boolean accept(File file){  if (file.isDirectory()) {    File[] files=file.listFiles();    return files == null || files.length == 0;  } else {    return file.length() == 0;  }}  }
class C{  public AuthorityKeyIdentifier(byte[] keyIdentifier,GeneralNames name,BigInteger serialNumber){  this.keyidentifier=new DEROctetString(keyIdentifier);  this.certissuer=GeneralNames.getInstance(name.toASN1Primitive());  this.certserno=new ASN1Integer(serialNumber);}  }
class C{  public FramedRouteAttribute(String routeString){  super(OctetUtils.toOctets(AttributeType.FRAMED_ROUTE,routeString));  this.routeString=new String(super.getOctets(),2,super.getOctets().length - 2);}  }
class C{  public static String read(String fileName,Class cl){  String data="";  try {    InputStream in=cl.getResourceAsStream(fileName);    if (in == null) {      try {        in=new FileInputStream(fileName);      } catch (      FileNotFoundException e) {        String directoryURL=cl.getProtectionDomain().getCodeSource().getLocation().toString();        String fileURL=directoryURL + fileName;        URL url=new URL(fileURL);        in=url.openStream();      }    }    data=Resource.read(new InputStreamReader(in));    in.close();  } catch (  Exception e) {  }  return data;}  }
class C{  protected void sendDataIfMyLastMessage(List<ProtocolMessage> protocolMessages) throws IOException {  if (handlingMyLastProtocolMessage(protocolMessages,workflowContext.getProtocolMessagePointer()) && messageBytesCollector.getRecordBytes().length != 0) {    LOGGER.debug("Records going to be sent: {}",ArrayConverter.bytesToHexString(messageBytesCollector.getRecordBytes()));    transportHandler.sendData(messageBytesCollector.getRecordBytes());    messageBytesCollector.flushRecordBytes();  }}  }
class C{  public boolean hasString(){  return (null != m_strCache);}  }
class C{  public void transform(float[] srcPts,int srcOff,double[] dstPts,int dstOff,int numPts){  double M00, M01, M02, M10, M11, M12;switch (state) {default :    stateError();  return;case (APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):M00=m00;M01=m01;M02=m02;M10=m10;M11=m11;M12=m12;while (--numPts >= 0) {double x=srcPts[srcOff++];double y=srcPts[srcOff++];dstPts[dstOff++]=M00 * x + M01 * y + M02;dstPts[dstOff++]=M10 * x + M11 * y + M12;}return;case (APPLY_SHEAR | APPLY_SCALE):M00=m00;M01=m01;M10=m10;M11=m11;while (--numPts >= 0) {double x=srcPts[srcOff++];double y=srcPts[srcOff++];dstPts[dstOff++]=M00 * x + M01 * y;dstPts[dstOff++]=M10 * x + M11 * y;}return;case (APPLY_SHEAR | APPLY_TRANSLATE):M01=m01;M02=m02;M10=m10;M12=m12;while (--numPts >= 0) {double x=srcPts[srcOff++];dstPts[dstOff++]=M01 * srcPts[srcOff++] + M02;dstPts[dstOff++]=M10 * x + M12;}return;case (APPLY_SHEAR):M01=m01;M10=m10;while (--numPts >= 0) {double x=srcPts[srcOff++];dstPts[dstOff++]=M01 * srcPts[srcOff++];dstPts[dstOff++]=M10 * x;}return;case (APPLY_SCALE | APPLY_TRANSLATE):M00=m00;M02=m02;M11=m11;M12=m12;while (--numPts >= 0) {dstPts[dstOff++]=M00 * srcPts[srcOff++] + M02;dstPts[dstOff++]=M11 * srcPts[srcOff++] + M12;}return;case (APPLY_SCALE):M00=m00;M11=m11;while (--numPts >= 0) {dstPts[dstOff++]=M00 * srcPts[srcOff++];dstPts[dstOff++]=M11 * srcPts[srcOff++];}return;case (APPLY_TRANSLATE):M02=m02;M12=m12;while (--numPts >= 0) {dstPts[dstOff++]=srcPts[srcOff++] + M02;dstPts[dstOff++]=srcPts[srcOff++] + M12;}return;case (APPLY_IDENTITY):while (--numPts >= 0) {dstPts[dstOff++]=srcPts[srcOff++];dstPts[dstOff++]=srcPts[srcOff++];}return;}}  }
class C{  protected String paramString(){  String optimizedDrawingPossibleString=(optimizedDrawingPossible ? "true" : "false");  return super.paramString() + ",optimizedDrawingPossible=" + optimizedDrawingPossibleString;}  }
class C{  public DataBufferShort(int size){  super(STABLE,TYPE_SHORT,size);  data=new short[size];  bankdata=new short[1][];  bankdata[0]=data;}  }
class C{  public Mp4TagCoverField(){  super(Mp4FieldKey.ARTWORK.getFieldName());}  }
class C{  @Override public V remove(Object key){  if (key == null) {    key=NULL_OBJECT;  }  boolean hashedOk;  int index, next, hash;  Object result, object;  index=next=findIndex(key,elementData);  if (elementData[index] != key) {    return null;  }  result=elementData[index + 1];  int length=elementData.length;  while (true) {    next=(next + 2) % length;    object=elementData[next];    if (object == null) {      break;    }    hash=getModuloHash(object,length);    hashedOk=hash > index;    if (next < index) {      hashedOk=hashedOk || (hash <= next);    } else {      hashedOk=hashedOk && (hash <= next);    }    if (!hashedOk) {      elementData[index]=object;      elementData[index + 1]=elementData[next + 1];      index=next;    }  }  size--;  modCount++;  elementData[index]=null;  elementData[index + 1]=null;  return massageValue(result);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("CoyotePrincipal[");  sb.append(this.name);  sb.append("]");  return (sb.toString());}  }
class C{  public static String evaluatePropertiesValue(String value,Properties lookupProp){  if (value == null) {    return null;  }  String returnValue=value;  if (lookupProp != null) {    int offset=0;    int refPrefix=0;    int refSuffix=0;    String key=null;    String realValue=null;    while (((refPrefix=returnValue.indexOf(VAR_PREFIX)) >= 0) && ((refSuffix=returnValue.indexOf(VAR_SUFFIX)) > refPrefix)) {      key=returnValue.substring(refPrefix + VAR_PREFIX.length(),refSuffix);      if ((lookupProp != null) && (lookupProp.containsKey(key))) {        realValue=lookupProp.getProperty(key);      } else {        if (key.equals(BASE_DIR)) {          try {            realValue=new File(".").getCanonicalPath();          } catch (          IOException ignored) {          }        } else {          realValue=System.getProperty(key);        }      }      if (realValue != null) {        if (realValue.indexOf("\\") >= 0) {          realValue=realValue.replaceAll("\\\\","/");        }        returnValue=returnValue.replaceAll(REX_VAR_PREFIX + key + REX_VAR_SUFFIX,realValue);      }    }  }  return returnValue;}  }
class C{  public void postSingleLogoutSuccess(String hostedEntityID,String realm,HttpServletRequest request,HttpServletResponse response,String userID,LogoutRequest logoutRequest,LogoutResponse logoutResponse,String binding){  return;}  }
class C{  public void testCertPathBuilder02() throws NoSuchAlgorithmException {  try {    CertPathBuilder.getInstance(null);    fail("No expected NullPointerException");  } catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      CertPathBuilder.getInstance(invalidValues[i]);      fail("NoSuchAlgorithmException must be thrown");    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  public ASN1Primitive parsePublicKey() throws IOException {  ASN1InputStream aIn=new ASN1InputStream(keyData.getBytes());  return aIn.readObject();}  }
class C{  @Override public void execute() throws BuildException {  super.execute();  execute("/findleaks?statusLine=" + Boolean.toString(statusLine));}  }
class C{  private static final void encodeQuotedPrintable(int b,ByteArrayOutputStream buffer){  buffer.write(ESCAPE_CHAR);  char hex1=Character.toUpperCase(Character.forDigit((b >> 4) & 0xF,16));  char hex2=Character.toUpperCase(Character.forDigit(b & 0xF,16));  buffer.write(hex1);  buffer.write(hex2);}  }
class C{  public boolean isInUndo(){  return mInUndo;}  }
class C{  public void testAddingADocumentFragmentAddsItsChildren(){  Element a=document.createElement("a");  Element b=document.createElement("b");  Element c=document.createElement("c");  DocumentFragment fragment=document.createDocumentFragment();  fragment.appendChild(a);  fragment.appendChild(b);  fragment.appendChild(c);  Node returned=menu.appendChild(fragment);  assertSame(fragment,returned);  NodeList children=menu.getChildNodes();  assertEquals(6,children.getLength());  assertTrue(children.item(0) instanceof Text);  assertEquals(item,children.item(1));  assertTrue(children.item(2) instanceof Text);  assertEquals(a,children.item(3));  assertEquals(b,children.item(4));  assertEquals(c,children.item(5));}  }
class C{  public Set entrySet(){  if (entrySet == null)   entrySet=new SynchronizedSet(new EntrySet(),this);  return entrySet;}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  public String debugDump(){  stringRepresentation="";  Class<?> myclass=getClass();  sprint(myclass.getName());  sprint("{");  Field[] fields=myclass.getDeclaredFields();  for (int i=0; i < fields.length; i++) {    Field f=fields[i];    int modifier=f.getModifiers();    if ((modifier & Modifier.PRIVATE) == Modifier.PRIVATE)     continue;    Class<?> fieldType=f.getType();    String fieldName=f.getName();    if (fieldName.compareTo("stringRepresentation") == 0) {      continue;    }    if (fieldName.compareTo("indentation") == 0) {      continue;    }    sprint(fieldName + ":");    try {      if (fieldType.isPrimitive()) {        String fname=fieldType.toString();        sprint(fname + ":");        if (fname.compareTo("int") == 0) {          int intfield=f.getInt(this);          sprint(intfield);        } else         if (fname.compareTo("short") == 0) {          short shortField=f.getShort(this);          sprint(shortField);        } else         if (fname.compareTo("char") == 0) {          char charField=f.getChar(this);          sprint(charField);        } else         if (fname.compareTo("long") == 0) {          long longField=f.getLong(this);          sprint(longField);        } else         if (fname.compareTo("boolean") == 0) {          boolean booleanField=f.getBoolean(this);          sprint(booleanField);        } else         if (fname.compareTo("double") == 0) {          double doubleField=f.getDouble(this);          sprint(doubleField);        } else         if (fname.compareTo("float") == 0) {          float floatField=f.getFloat(this);          sprint(floatField);        }      } else       if (GenericObject.class.isAssignableFrom(fieldType)) {        if (f.get(this) != null) {          sprint(((GenericObject)f.get(this)).debugDump(indentation + 1));        } else {          sprint("<null>");        }      } else       if (GenericObjectList.class.isAssignableFrom(fieldType)) {        if (f.get(this) != null) {          sprint(((GenericObjectList)f.get(this)).debugDump(indentation + 1));        } else {          sprint("<null>");        }      } else {        if (f.get(this) != null) {          sprint(f.get(this).getClass().getName() + ":");        } else {          sprint(fieldType.getName() + ":");        }        sprint("{");        if (f.get(this) != null) {          sprint(f.get(this).toString());        } else {          sprint("<null>");        }        sprint("}");      }    } catch (    IllegalAccessException ex1) {      continue;    }  }  sprint("}");  return stringRepresentation;}  }
class C{  public JobName(String jobName,Locale locale){  super(jobName,locale);}  }
class C{  public void testCertStore15() throws CertStoreException {  if (!initParams()) {    return;  }  CertStore[] certS=createCS();  assertNotNull("CertStore object were not created",certS);  Collection<?> coll;  for (int i=0; i < certS.length; i++) {    coll=certS[i].getCertificates(null);    assertTrue("Result collection not empty",coll.isEmpty());    coll=certS[i].getCRLs(null);    assertTrue("Result collection not empty",coll.isEmpty());  }}  }
class C{  private void adjustRowCountBy(int changeAmount){  rowCount+=changeAmount;}  }
class C{  public Object put(final String varName,final Object value){  final Object currentResult=current.put(varName,value);  final Object parentResult=parent.put(varName,value);  return currentResult != null ? currentResult : parentResult;}  }
class C{  protected OSQLSynchQuery<ODocument> createQueryObject(String queryString){  return new OSQLSynchQuery<ODocument>(queryString);}  }
class C{  public static byte[] decodeBase64(final String base64String){  return new Base64().decode(base64String);}  }
class C{  public MBeanServerNotification(String type,Object source,long sequenceNumber,ObjectName objectName){  super(type,source,sequenceNumber);  this.objectName=objectName;}  }
class C{  public String convertStr(String input){  StringBuffer filtered=new StringBuffer(input.length());  char c;  for (int i=0; i < input.length(); i++) {    c=input.charAt(i);    if (c == '<') {      filtered.append("&lt;");    } else     if (c == '>') {      filtered.append("&gt;");    } else     if (c == '\'') {      filtered.append("&apos;");    } else     if (c == '"') {      filtered.append("&quot;");    } else     if (c == '&') {      filtered.append("&amp;");    } else {      filtered.append(c);    }  }  return (filtered.toString());}  }
class C{  public HyphenationException(String msg){  super(msg);}  }
class C{  public void test_getHandshakeStatus(){  int[] pos={0,1,1000,Integer.MAX_VALUE,(Integer.MAX_VALUE - 1)};  SSLEngineResult.Status[] enS=SSLEngineResult.Status.values();  SSLEngineResult.HandshakeStatus[] enHS=SSLEngineResult.HandshakeStatus.values();  for (int i=0; i < enS.length; i++) {    for (int j=0; j < enHS.length; j++) {      for (int n=0; n < pos.length; n++) {        for (int l=0; l < pos.length; ++l) {          SSLEngineResult res=new SSLEngineResult(enS[i],enHS[j],pos[n],pos[l]);          assertEquals("Incorrect HandshakeStatus",enHS[j],res.getHandshakeStatus());        }      }    }  }}  }
class C{  protected void doPropfind(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {  if (!listings) {    StringBuilder methodsAllowed=determineMethodsAllowed(req);    resp.addHeader("Allow",methodsAllowed.toString());    resp.sendError(WebdavStatus.SC_METHOD_NOT_ALLOWED);    return;  }  String path=getRelativePath(req);  if (path.length() > 1 && path.endsWith("/"))   path=path.substring(0,path.length() - 1);  Vector<String> properties=null;  int depth=maxDepth;  int type=FIND_ALL_PROP;  String depthStr=req.getHeader("Depth");  if (depthStr == null) {    depth=maxDepth;  } else {    if (depthStr.equals("0")) {      depth=0;    } else     if (depthStr.equals("1")) {      depth=1;    } else     if (depthStr.equals("infinity")) {      depth=maxDepth;    }  }  Node propNode=null;  if (req.getContentLengthLong() > 0) {    DocumentBuilder documentBuilder=getDocumentBuilder();    try {      Document document=documentBuilder.parse(new InputSource(req.getInputStream()));      Element rootElement=document.getDocumentElement();      NodeList childList=rootElement.getChildNodes();      for (int i=0; i < childList.getLength(); i++) {        Node currentNode=childList.item(i);switch (currentNode.getNodeType()) {case Node.TEXT_NODE:          break;case Node.ELEMENT_NODE:        if (currentNode.getNodeName().endsWith("prop")) {          type=FIND_BY_PROPERTY;          propNode=currentNode;        }      if (currentNode.getNodeName().endsWith("propname")) {        type=FIND_PROPERTY_NAMES;      }    if (currentNode.getNodeName().endsWith("allprop")) {      type=FIND_ALL_PROP;    }  break;}}} catch (SAXException e) {resp.sendError(WebdavStatus.SC_BAD_REQUEST);return;}catch (IOException e) {resp.sendError(WebdavStatus.SC_BAD_REQUEST);return;}}if (type == FIND_BY_PROPERTY) {properties=new Vector<>();@SuppressWarnings("null") NodeList childList=propNode.getChildNodes();for (int i=0; i < childList.getLength(); i++) {Node currentNode=childList.item(i);switch (currentNode.getNodeType()) {case Node.TEXT_NODE:break;case Node.ELEMENT_NODE:String nodeName=currentNode.getNodeName();String propertyName=null;if (nodeName.indexOf(':') != -1) {propertyName=nodeName.substring(nodeName.indexOf(':') + 1);} else {propertyName=nodeName;}properties.addElement(propertyName);break;}}}WebResource resource=resources.getResource(path);if (!resource.exists()) {int slash=path.lastIndexOf('/');if (slash != -1) {String parentPath=path.substring(0,slash);Vector<String> currentLockNullResources=lockNullResources.get(parentPath);if (currentLockNullResources != null) {Enumeration<String> lockNullResourcesList=currentLockNullResources.elements();while (lockNullResourcesList.hasMoreElements()) {String lockNullPath=lockNullResourcesList.nextElement();if (lockNullPath.equals(path)) {resp.setStatus(WebdavStatus.SC_MULTI_STATUS);resp.setContentType("text/xml; charset=UTF-8");XMLWriter generatedXML=new XMLWriter(resp.getWriter());generatedXML.writeXMLHeader();generatedXML.writeElement("D",DEFAULT_NAMESPACE,"multistatus",XMLWriter.OPENING);parseLockNullProperties(req,generatedXML,lockNullPath,type,properties);generatedXML.writeElement("D","multistatus",XMLWriter.CLOSING);generatedXML.sendData();return;}}}}}if (!resource.exists()) {resp.sendError(HttpServletResponse.SC_NOT_FOUND,path);return;}resp.setStatus(WebdavStatus.SC_MULTI_STATUS);resp.setContentType("text/xml; charset=UTF-8");XMLWriter generatedXML=new XMLWriter(resp.getWriter());generatedXML.writeXMLHeader();generatedXML.writeElement("D",DEFAULT_NAMESPACE,"multistatus",XMLWriter.OPENING);if (depth == 0) {parseProperties(req,generatedXML,path,type,properties);} else {Stack<String> stack=new Stack<>();stack.push(path);Stack<String> stackBelow=new Stack<>();while ((!stack.isEmpty()) && (depth >= 0)) {String currentPath=stack.pop();parseProperties(req,generatedXML,currentPath,type,properties);resource=resources.getResource(currentPath);if (resource.isDirectory() && (depth > 0)) {String[] entries=resources.list(currentPath);for (String entry : entries) {String newPath=currentPath;if (!(newPath.endsWith("/"))) newPath+="/";newPath+=entry;stackBelow.push(newPath);}String lockPath=currentPath;if (lockPath.endsWith("/")) lockPath=lockPath.substring(0,lockPath.length() - 1);Vector<String> currentLockNullResources=lockNullResources.get(lockPath);if (currentLockNullResources != null) {Enumeration<String> lockNullResourcesList=currentLockNullResources.elements();while (lockNullResourcesList.hasMoreElements()) {String lockNullPath=lockNullResourcesList.nextElement();parseLockNullProperties(req,generatedXML,lockNullPath,type,properties);}}}if (stack.isEmpty()) {depth--;stack=stackBelow;stackBelow=new Stack<>();}generatedXML.sendData();}}generatedXML.writeElement("D","multistatus",XMLWriter.CLOSING);generatedXML.sendData();}  }
class C{  @Override public void send(HandshakeIODataStream out){}  }
class C{  public String toString(){  int iMax=array.length - 1;  if (iMax == -1)   return "[]";  StringBuilder b=new StringBuilder();  b.append('[');  for (int i=0; ; i++) {    b.append(getRaw(byteOffset(i)));    if (i == iMax)     return b.append(']').toString();    b.append(',').append(' ');  }}  }
class C{  public Brick(int stageZone,float xPos,float yPos,Image sprite){  super(BLOCK_COLLISION_DATA,xPos,yPos,0,0,sprite);  zone=stageZone;}  }
class C{  public static String toString(boolean[] a){  if (a == null)   return "null";  int iMax=a.length - 1;  if (iMax == -1)   return "[]";  StringBuilder b=new StringBuilder();  b.append('[');  for (int i=0; ; i++) {    b.append(a[i]);    if (i == iMax)     return b.append(']').toString();    b.append(", ");  }}  }
class C{  public void testInsert5() throws SQLException {  statement.execute("INSERT INTO " + DatabaseCreator.TEST_TABLE5 + " SELECT 1 as testId, 2 as testValue "+ "UNION SELECT 2 as testId, 3 as testValue "+ "UNION SELECT 3 as testId, 4 as testValue");  ResultSet r=statement.executeQuery("SELECT COUNT(*) FROM " + DatabaseCreator.TEST_TABLE5);  r.next();  assertEquals("Should be 3 rows",3,r.getInt(1));  r.close();}  }
class C{  @Override protected Object createSsoServerTopologyMBean(String groupName,String groupOid,ObjectName groupObjname,MBeanServer server){  if (server != null)   topologyGroup=new SsoServerTopologyImpl(this,server); else   topologyGroup=new SsoServerTopologyImpl(this);  return topologyGroup;}  }
class C{  public static boolean isTokenExpired(String tokenExpiry) throws CoreTokenException {  try {    Date expiryDate=DateUtils.stringToDate(tokenExpiry);    long now=currentTimeMillis();    if (expiryDate.getTime() <= now) {      return true;    } else {      return false;    }  } catch (  ParseException ex) {    String[] data=new String[]{tokenExpiry};    throw new CoreTokenException(10,data,400);  }}  }
class C{  public ChoiceFormat(double[] limits,String[] formats){  setChoices(limits,formats);}  }
class C{  public FrameBodyTLAN(){  super();}  }
class C{  private void recordScreenView(){  String screenName=getCurrentImageId() + "-" + getCurrentImageTitle();  mFirebaseAnalytics.setCurrentScreen(this,screenName,null);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Attr newAttrNode;  String attrValue;  String attrName;  int attrType;  doc=(Document)load("hc_staff",true);  newAttrNode=doc.createAttribute("title");  attrValue=newAttrNode.getNodeValue();  assertEquals("value","",attrValue);  attrName=newAttrNode.getNodeName();  assertEqualsAutoCase("attribute","name","title",attrName);  attrType=(int)newAttrNode.getNodeType();  assertEquals("type",2,attrType);}  }
class C{  public PdfException(String message,Throwable cause,Object obj){  this(message,cause);  this.object=obj;}  }
class C{  private void webServerRefresh(){  mAppManager.startService(WebServerService.class,WEB_SERVER_SERVICE_REFRESH);}  }
class C{  public static void copy(InputStream inputStream,OutputStream outputStream) throws IOException {  copy(inputStream,outputStream,BUFFER_SIZE);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.LogoutRequestType createLogoutRequestType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.LogoutRequestTypeImpl();}  }
class C{  public char charAt(int index){  return fsb().charAt(m_start + index);}  }
class C{  public OBJ_ADAPTER(String s){  this(s,0,CompletionStatus.COMPLETED_NO);}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  logger.info("shootme: got an ACK! ");  logger.info("Dialog = " + requestEvent.getDialog());  logger.info("Dialog State = " + requestEvent.getDialog().getState());}  }
class C{  public static ByteString wrap(final byte[] bytes,final int offset,final int length){  checkArrayBounds(bytes,offset,length);  return new ByteString(bytes,offset,length);}  }
class C{  private boolean excludeResultNSDecl(String prefix,String uri) throws TransformerException {  if (uri != null) {    if (uri.equals(Constants.S_XSLNAMESPACEURL) || getStylesheet().containsExtensionElementURI(uri))     return true;    if (containsExcludeResultPrefix(prefix,uri))     return true;  }  return false;}  }
class C{  public void handleTblSubConfigButtonDeleteRequest(RequestInvocationEvent event) throws ModelControlException {  submitCycle=true;  CCActionTable tbl=(CCActionTable)getChild(AMPropertySheetModel.TBL_SUB_CONFIG);  tbl.restoreStateData();  CCActionTableModel tblModel=(CCActionTableModel)tbl.getModel();  Integer[] selected=tblModel.getSelectedRows();  SerializedField szCache=(SerializedField)getChild(SZ_CACHE);  List list=(List)szCache.getSerializedObj();  Set names=new HashSet(selected.length * 2);  for (int i=0; i < selected.length; i++) {    SMSubConfig sc=(SMSubConfig)list.get(selected[i].intValue());    names.add(sc.getName());  }  try {    SubConfigModel model=(SubConfigModel)getModel();    model.deleteSubConfigurations(names);    if (selected.length == 1) {      setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","subconfig.message.deleted");    } else {      setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","subconfig.message.deleted.pural");    }  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }  submitCycle=false;  forwardTo();}  }
class C{  public void acceptCertificate(X509Certificate[] chain,String authType,String host){  acceptedChains.add(chain);  acceptedAuthTypes.add(authType);  acceptedHosts.add(host);}  }
class C{  public final void merge_entries_at_end(BrdTracep p_from_trace,BrdTracep p_to_trace,Polyline p_joined_polyline,int p_from_entry_no,int p_to_entry_no){  int compensated_half_width=p_to_trace.get_half_width() + get_clearance_compensation(p_to_trace.clearance_idx(),p_to_trace.get_layer());  ArrayList<ShapeTile> link_shapes=offset_shapes(p_joined_polyline,compensated_half_width,p_from_entry_no,p_to_entry_no);  boolean change_order=p_from_trace.corner_last().equals(p_to_trace.corner_last());  AwtreeNodeLeaf[] from_trace_entries=p_from_trace.get_search_tree_entries(this);  AwtreeNodeLeaf[] to_trace_entries=p_to_trace.get_search_tree_entries(this);  int to_shape_count_minus_1=p_to_trace.tile_shape_count() - 1;  remove_leaf(to_trace_entries[to_shape_count_minus_1]);  int remove_no;  if (change_order) {    remove_no=p_from_trace.tile_shape_count() - 1;  } else {    remove_no=0;  }  remove_leaf(from_trace_entries[remove_no]);  final int link_shapes_count=link_shapes.size();  int new_shape_count=from_trace_entries.length + link_shapes_count + to_trace_entries.length - 2;  AwtreeNodeLeaf[] new_leaf_arr=new AwtreeNodeLeaf[new_shape_count];  ShapeTile[] new_precalculated_tree_shapes=new ShapeTile[new_shape_count];  for (int i=0; i < to_shape_count_minus_1; ++i) {    new_precalculated_tree_shapes[i]=p_to_trace.get_tree_shape(this,i);    new_leaf_arr[i]=to_trace_entries[i];  }  for (int index=1; index < from_trace_entries.length; ++index) {    int curr_ind=to_shape_count_minus_1 + link_shapes_count + index - 1;    int from_no;    if (change_order) {      from_no=from_trace_entries.length - index - 1;    } else {      from_no=index;    }    new_precalculated_tree_shapes[curr_ind]=p_from_trace.get_tree_shape(this,from_no);    new_leaf_arr[curr_ind]=from_trace_entries[from_no];    new_leaf_arr[curr_ind].object=p_to_trace;    new_leaf_arr[curr_ind].shape_index_in_object=curr_ind;  }  for (int index=0; index < link_shapes_count; ++index) {    int curr_ind=to_shape_count_minus_1 + index;    new_precalculated_tree_shapes[curr_ind]=link_shapes.get(index);  }  p_to_trace.set_precalculated_tree_shapes(new_precalculated_tree_shapes,this);  for (int index=0; index < link_shapes_count; ++index) {    int curr_ind=to_shape_count_minus_1 + index;    new_leaf_arr[curr_ind]=insert(p_to_trace,curr_ind);  }  p_to_trace.set_search_tree_entries(this,new_leaf_arr);}  }
class C{  public void paintLabelBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public static boolean isFunctionalInterface(Class<?> i){  if (i.isAnnotationPresent(FunctionalInterface.class))   return true;  if (functionalInterfaces.containsKey(i))   return true;  if (notFunctionalInterfaces.containsKey(i))   return false;  analyseClassOverride(i);  Set<Class<?>> visited=new HashSet<>();  boolean found=false;  Queue<Class<?>> interfaces=new ArrayDeque<>();  interfaces.add(i);  while (!interfaces.isEmpty()) {    Class<?> ii=interfaces.remove();    if (visited.contains(ii))     continue;    for (    Method m : ii.getDeclaredMethods()) {      if (Modifier.isAbstract(m.getModifiers())) {        if (isOverriddenInClass(m,i))         continue;        if (found)         return false;        found=true;      }    }    visited.add(ii);    Collections.addAll(interfaces,ii.getInterfaces());  }  if (found)   functionalInterfaces.put(i,null);  return found;}  }
class C{  public void paintMenuBarBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  @Override protected Integer initialValue(){  return Integer.valueOf(100);}  }
class C{  public OIDCIdTokenConfigBuilder customClaimMapperClass(String customClaimMapperClass){  this.customClaimMapperClass=customClaimMapperClass;  return this;}  }
class C{  protected void startTimer(){  if (timer == null) {    timer=new Timer(200,this);    timer.setRepeats(true);  }  timer.start();}  }
class C{  @Override public void close() throws IOException {  eos=true;  super.close();}  }
class C{  private String outOfBoundsMsg(int index){  return "Index: " + index + ", Size: "+ size;}  }
class C{  public static ReadableByteChannel newChannel(InputStream inputStream){  return new InputStreamChannel(inputStream);}  }
class C{  public boolean isCellEditable(EventObject e){  return true;}  }
class C{  public synchronized void remove(final Entry element){  if (element == null || !element.getValid()) {    return;  }  Entry next=element.getNext();  Entry prev=element.getPrevious();  if (next != null) {    next.setPrevious(prev);  } else {    last=prev;  }  if (prev != null) {    prev.setNext(next);  } else {    first=next;  }  size--;  element.invalidate();}  }
class C{  public SDPObjectList(String lname,String classname){  super(lname,classname);}  }
class C{  public SearchResultEntryProtocolOp(SearchResultEntry searchEntry,int ldapVersion){  this(searchEntry.getName(),null,searchEntry,ldapVersion);}  }
class C{  public void warning(SAXParseException e) throws SAXException {  if (errorHandler != null) {    errorHandler.warning(e);  }}  }
class C{  public IndependentRandomAccessSource(IRandomAccessSource source){  this.source=source;}  }
class C{  @Override public void lock(){  diffLock.lock();}  }
class C{  private boolean isConfidentialIntegrity(){  boolean ret=false;  final String qop=(String)saslServer.getNegotiatedProperty(Sasl.QOP);  if (qop.equalsIgnoreCase(confidentiality) || qop.equalsIgnoreCase(integrity)) {    ret=true;  }  return ret;}  }
class C{  public void paintRadioButtonBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddress;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  testAddress=(Element)elementList.item(0);{    boolean success=false;    try {      testAddress.setAttribute("invalid^Name","value");    } catch (    DOMException ex) {      success=(ex.code == DOMException.INVALID_CHARACTER_ERR);    }    assertTrue("throw_INVALID_CHARACTER_ERR",success);  }}  }
class C{  public QName(String localName){  this(localName,false);}  }
class C{  public void select_signal_layer(int p_signal_layer_no){  layer_name_arr[p_signal_layer_no].setSelected(true);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("ContextLocalEjb[");  sb.append("name=");  sb.append(getName());  if (getDescription() != null) {    sb.append(", description=");    sb.append(getDescription());  }  if (getType() != null) {    sb.append(", type=");    sb.append(getType());  }  if (home != null) {    sb.append(", home=");    sb.append(home);  }  if (link != null) {    sb.append(", link=");    sb.append(link);  }  if (local != null) {    sb.append(", local=");    sb.append(local);  }  sb.append("]");  return (sb.toString());}  }
class C{  public void severe(String msg){  log(Level.SEVERE,msg);}  }
class C{  @SuppressWarnings("unchecked") private void processArgs(String[] args) throws CoreException {  List<String> classes=new ArrayList<>();  List<String> modifiedArgs=new ArrayList<>();  for (int i=0; i < args.length; i++) {    String arg=args[i].toLowerCase();    if ("-test".equals(arg)) {      String v=args[++i];      classes.add(v.substring(0,v.indexOf(':')));      modifiedArgs.add("-test");      modifiedArgs.add(v);    } else     if ("-classnames".equals(arg) || "-classname".equals(arg)) {      i++;      while (i < args.length && args[i].charAt(0) != '-') {        classes.add(args[i++]);      }      modifiedArgs.add("-classNames");      modifiedArgs.addAll(classes);    } else     if ("-testnamefile".equals(arg)) {      try {        classes.addAll((List<String>)FileUtils.readLines(new File(args[++i])));      } catch (      IOException e) {        throw new CoreException(new Status(IStatus.ERROR,RoboVMPlugin.PLUGIN_ID,"",e));      }      modifiedArgs.add("-classNames");      modifiedArgs.addAll(classes);    } else {      modifiedArgs.add(args[i]);    }  }  this.runnerProgramArgs=modifiedArgs.toArray(new String[modifiedArgs.size()]);  this.testClasses=classes.toArray(new String[classes.size()]);}  }
class C{  protected void processMaxActiveSwaps(){  if (!getState().isAvailable() || getMaxActiveSessions() < 0)   return;  Session sessions[]=findSessions();  int limit=(int)(getMaxActiveSessions() * 0.9);  if (limit >= sessions.length)   return;  if (log.isDebugEnabled())   log.debug(sm.getString("persistentManager.tooManyActive",Integer.valueOf(sessions.length)));  int toswap=sessions.length - limit;  for (int i=0; i < sessions.length && toswap > 0; i++) {    StandardSession session=(StandardSession)sessions[i];synchronized (session) {      int timeIdle=(int)(session.getIdleTimeInternal() / 1000L);      if (timeIdle >= minIdleSwap) {        if (session.accessCount != null && session.accessCount.get() > 0) {          continue;        }        if (log.isDebugEnabled())         log.debug(sm.getString("persistentManager.swapTooManyActive",session.getIdInternal(),Integer.valueOf(timeIdle)));        try {          swapOut(session);        } catch (        IOException e) {        }        toswap--;      }    }  }}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_security_Provider() throws Exception {  try {    KeyManagerFactory.getInstance(null,mProv);    fail("NoSuchAlgorithmException or NullPointerException should be thrown (algorithm is null");  } catch (  NoSuchAlgorithmException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      KeyManagerFactory.getInstance(invalidValues[i],mProv);      fail("NoSuchAlgorithmException must be thrown (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }  Provider prov=null;  for (int i=0; i < validValues.length; i++) {    try {      KeyManagerFactory.getInstance(validValues[i],prov);      fail("IllegalArgumentException must be thrown when provider is null (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    IllegalArgumentException e) {    }  }  KeyManagerFactory keyMF;  for (int i=0; i < validValues.length; i++) {    keyMF=KeyManagerFactory.getInstance(validValues[i],mProv);    assertEquals("Incorrect algorithm",keyMF.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider",keyMF.getProvider(),mProv);    checkResult(keyMF);  }}  }
class C{  private Class<?> loadTagFile(Compiler compiler,String tagFilePath,TagInfo tagInfo,PageInfo parentPageInfo) throws JasperException {  Jar tagJar=null;  Jar tagJarOriginal=null;  try {    if (tagFilePath.startsWith("/META-INF/")) {      try {        tagJar=compiler.getCompilationContext().getTldResourcePath(tagInfo.getTagLibrary().getURI()).openJar();      } catch (      IOException ioe) {        throw new JasperException(ioe);      }    }    String wrapperUri;    if (tagJar == null) {      wrapperUri=tagFilePath;    } else {      wrapperUri=tagJar.getURL(tagFilePath);    }    JspCompilationContext ctxt=compiler.getCompilationContext();    JspRuntimeContext rctxt=ctxt.getRuntimeContext();synchronized (rctxt) {      JspServletWrapper wrapper=null;      try {        wrapper=rctxt.getWrapper(wrapperUri);        if (wrapper == null) {          wrapper=new JspServletWrapper(ctxt.getServletContext(),ctxt.getOptions(),tagFilePath,tagInfo,ctxt.getRuntimeContext(),tagJar);          rctxt.addWrapper(wrapperUri,wrapper);          wrapper.getJspEngineContext().setClassLoader(ctxt.getClassLoader());          wrapper.getJspEngineContext().setClassPath(ctxt.getClassPath());        } else {          wrapper.getJspEngineContext().setTagInfo(tagInfo);          tagJarOriginal=wrapper.getJspEngineContext().getTagFileJar();          wrapper.getJspEngineContext().setTagFileJar(tagJar);        }        Class<?> tagClazz;        int tripCount=wrapper.incTripCount();        try {          if (tripCount > 0) {            JspServletWrapper tempWrapper=new JspServletWrapper(ctxt.getServletContext(),ctxt.getOptions(),tagFilePath,tagInfo,ctxt.getRuntimeContext(),tagJar);            tempWrapper.getJspEngineContext().setClassLoader(ctxt.getClassLoader());            tempWrapper.getJspEngineContext().setClassPath(ctxt.getClassPath());            tagClazz=tempWrapper.loadTagFilePrototype();            tempVector.add(tempWrapper.getJspEngineContext().getCompiler());          } else {            tagClazz=wrapper.loadTagFile();          }        }  finally {          wrapper.decTripCount();        }        try {          Object tagIns=tagClazz.newInstance();          if (tagIns instanceof JspSourceDependent) {            Iterator<Entry<String,Long>> iter=((JspSourceDependent)tagIns).getDependants().entrySet().iterator();            while (iter.hasNext()) {              Entry<String,Long> entry=iter.next();              parentPageInfo.addDependant(entry.getKey(),entry.getValue());            }          }        } catch (        Exception e) {        }        return tagClazz;      }  finally {        if (wrapper != null && tagJarOriginal != null) {          wrapper.getJspEngineContext().setTagFileJar(tagJarOriginal);        }      }    }  }  finally {    if (tagJar != null) {      tagJar.close();    }  }}  }
class C{  private void handleActionFoo(String param1,String param2){  String text="Foo: " + param1 + ", "+ param2;  Log.v(TAG,text);}  }
class C{  public String toURLEncodedQueryString() throws FSMsgException {  if ((providerId == null) || (providerId.length() == 0)) {    FSUtils.debug.error("FSLogoutResponse." + "toURLEncodedQueryString: providerId is null in " + "the response ");    throw new FSMsgException("nullProviderIdInRequest",null);  }  if ((responseID == null) || (responseID.length() == 0)) {    responseID=FSUtils.generateID();    if (responseID == null) {      FSUtils.debug.error("FSNameRegistrationRequest." + "toURLEncodedQueryString: couldn't generate " + "responseID.");      throw new FSMsgException("errorGenerateID",null);    }  }  StringBuffer urlEncodedAuthnReq=new StringBuffer(300);  urlEncodedAuthnReq.append(IFSConstants.RESPONSE_ID).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(responseID)).append(IFSConstants.AMPERSAND);  if ((inResponseTo != null) && (inResponseTo.length() > 0)) {    urlEncodedAuthnReq.append(IFSConstants.IN_RESPONSE_TO).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(inResponseTo)).append(IFSConstants.AMPERSAND);  }  urlEncodedAuthnReq.append(IFSConstants.MAJOR_VERSION).append(IFSConstants.EQUAL_TO).append(majorVersion).append(IFSConstants.AMPERSAND).append(IFSConstants.MINOR_VERSION).append(IFSConstants.EQUAL_TO).append(minorVersion).append(IFSConstants.AMPERSAND);  if (issueInstant != null) {    urlEncodedAuthnReq.append(IFSConstants.ISSUE_INSTANT).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(DateUtils.toUTCDateFormat(issueInstant))).append(IFSConstants.AMPERSAND);  } else {    FSUtils.debug.error("FSLogoutResponse." + "toURLEncodedQueryString: issueInstant missing");    String[] args={IFSConstants.ISSUE_INSTANT};    throw new FSMsgException("missingAttribute",args);  }  if (providerId != null && providerId.length() != 0) {    urlEncodedAuthnReq.append(IFSConstants.PROVIDER_ID).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(providerId)).append(IFSConstants.AMPERSAND);  }  if (relayState != null && relayState.length() != 0) {    urlEncodedAuthnReq.append(IFSConstants.RELAY_STATE).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(relayState)).append(IFSConstants.AMPERSAND);  }  if (status != null) {    urlEncodedAuthnReq.append(IFSConstants.VALUE).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(status.getStatusCode().getValue())).append(IFSConstants.AMPERSAND);  }  return urlEncodedAuthnReq.toString();}  }
class C{  public void testPowNegativeNumToZeroExp(){  byte aBytes[]={50,-26,90,69,120,32,63,-103,-14,35};  int aSign=-1;  int exp=0;  byte rBytes[]={1};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.pow(exp);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public InvalidParameterException(){  super();}  }
class C{  @Override public String toString(){  return name;}  }
class C{  public boolean hasAdminData() throws ADSContextException {  DN[] dns={getAdministratorContainerDN(),getAllServerGroupDN(),getServerContainerDN(),getInstanceKeysContainerDN(),getSecretKeysContainerDN()};  boolean hasAdminData=true;  for (int i=0; i < dns.length && hasAdminData; i++) {    hasAdminData=isExistingEntry(dns[i]);  }  return hasAdminData;}  }
class C{  public String[] convertString2Array(String str){  String[] arrayMember=str.split("\",\"");  arrayMember[0]=arrayMember[0].substring(2);  arrayMember[arrayMember.length - 1]=arrayMember[arrayMember.length - 1].substring(0,arrayMember[arrayMember.length - 1].length() - 2);  return arrayMember;}  }
class C{  public Polynomial25519(byte[] bytes){  if (bytes.length != 32) {    throw new IllegalArgumentException("bytes must have length 32");  }  c[0]=coefficientFromBytes(bytes,0,0,0x3ffffff);  c[1]=coefficientFromBytes(bytes,3,2,0x1ffffff);  c[2]=coefficientFromBytes(bytes,6,3,0x3ffffff);  c[3]=coefficientFromBytes(bytes,9,5,0x1ffffff);  c[4]=coefficientFromBytes(bytes,12,6,0x3ffffff);  c[5]=coefficientFromBytes(bytes,16,0,0x1ffffff);  c[6]=coefficientFromBytes(bytes,19,1,0x3ffffff);  c[7]=coefficientFromBytes(bytes,22,3,0x1ffffff);  c[8]=coefficientFromBytes(bytes,25,4,0x3ffffff);  c[9]=coefficientFromBytes(bytes,28,6,0x1ffffff);}  }
class C{  public AuthenticationEnforcer exceptCreate(){  exceptCreate=true;  return this;}  }
class C{  public InMemoryCookieStore(){  cookieJar=new ArrayList<HttpCookie>();  domainIndex=new HashMap<String,List<HttpCookie>>();  uriIndex=new HashMap<URI,List<HttpCookie>>();  lock=new ReentrantLock(false);}  }
class C{  public static long distributePowerToAllFaces(World world,BlockPos pos,long amount,boolean simulated){  long consumedPower=0L;  for (  final ITeslaConsumer consumer : getConnectedCapabilities(TeslaCapabilities.CAPABILITY_CONSUMER,world,pos))   consumedPower+=consumer.givePower(amount,simulated);  return consumedPower;}  }
class C{  private static boolean hasConditions(Request request){  return request.header("If-Modified-Since") != null || request.header("If-None-Match") != null;}  }
class C{  public void appendErrorNodeChild(final int errorCode,final String name,final String path,final String type){  ErrorNode errorNode=new ErrorNode(path,type,name,errorCode);  errorList.add(errorNode);}  }
class C{  protected void undeploy(PrintWriter writer,ContextName cn,StringManager smClient){  if (debug >= 1)   log("undeploy: Undeploying web application at '" + cn + "'");  if (!validateContextName(cn,writer,smClient)) {    return;  }  String name=cn.getName();  String baseName=cn.getBaseName();  String displayPath=cn.getDisplayName();  try {    Context context=(Context)host.findChild(name);    if (context == null) {      writer.println(smClient.getString("managerServlet.noContext",RequestUtil.filter(displayPath)));      return;    }    if (!isDeployed(name)) {      writer.println(smClient.getString("managerServlet.notDeployed",RequestUtil.filter(displayPath)));      return;    }    if (isServiced(name)) {      writer.println(smClient.getString("managerServlet.inService",displayPath));    } else {      addServiced(name);      try {        context.stop();      } catch (      Throwable t) {        ExceptionUtils.handleThrowable(t);      }      try {        File war=new File(host.getAppBaseFile(),baseName + ".war");        File dir=new File(host.getAppBaseFile(),baseName);        File xml=new File(configBase,baseName + ".xml");        if (war.exists() && !war.delete()) {          writer.println(smClient.getString("managerServlet.deleteFail",war));          return;        } else         if (dir.exists() && !undeployDir(dir)) {          writer.println(smClient.getString("managerServlet.deleteFail",dir));          return;        } else         if (xml.exists() && !xml.delete()) {          writer.println(smClient.getString("managerServlet.deleteFail",xml));          return;        }        check(name);      }  finally {        removeServiced(name);      }    }    writer.println(smClient.getString("managerServlet.undeployed",displayPath));  } catch (  Throwable t) {    ExceptionUtils.handleThrowable(t);    log("ManagerServlet.undeploy[" + displayPath + "]",t);    writer.println(smClient.getString("managerServlet.exception",t.toString()));  }}  }
class C{  @ConstructorProperties({"bevelType","highlightOuterColor","highlightInnerColor","shadowOuterColor","shadowInnerColor"}) public SoftBevelBorder(int bevelType,Color highlightOuterColor,Color highlightInnerColor,Color shadowOuterColor,Color shadowInnerColor){  super(bevelType,highlightOuterColor,highlightInnerColor,shadowOuterColor,shadowInnerColor);}  }
class C{  public static void clear(String realmName){  if (classRefSchemesHash != null && !classRefSchemesHash.isEmpty()) {    classRefSchemesHash.clear();  }  if (classRefLevelHash != null && !classRefLevelHash.isEmpty()) {    classRefLevelHash.clear();  }  if (defaultClassRefHash != null && !defaultClassRefHash.isEmpty()) {    defaultClassRefHash.clear();  }  formatAttributeHash.clear();}  }
class C{  public void test_binarySearchLjava_util_ListLjava_lang_Object(){  final int llSize=ll.size();  try {    Collections.binarySearch(null,new Object());    fail("Expected NullPointerException for null list parameter");  } catch (  NullPointerException e) {  }  for (int counter=0; counter < llSize; counter++) {    assertTrue("Returned incorrect binary search item position",ll.get(Collections.binarySearch(ll,ll.get(counter))) == ll.get(counter));  }}  }
class C{  public PdfCanvas beginMarkedContent(PdfName tag,PdfDictionary properties){  mcDepth++;  PdfOutputStream out=contentStream.getOutputStream().write(tag).writeSpace();  if (properties == null) {    out.writeBytes(BMC);  } else   if (properties.getIndirectReference() == null) {    out.write(properties).writeSpace().writeBytes(BDC);  } else {    out.write(resources.addProperties(properties)).writeSpace().writeBytes(BDC);  }  return this;}  }
class C{  public static Map verifyResponse(final HttpServletRequest httpRequest,final HttpServletResponse httpResponse,final Response response,final String orgName,final String hostEntityId,final String profileBinding) throws SAML2Exception {  final String method="SAML2Utils.verifyResponse:";  if (response == null || orgName == null || orgName.length() == 0) {    if (debug.messageEnabled()) {      debug.message(method + "response or orgName is null.");    }    throw new SAML2Exception(bundle.getString("nullInput"));  }  String respID=response.getID();  AuthnRequestInfo reqInfo=null;  String inRespToResp=response.getInResponseTo();  if (inRespToResp != null && inRespToResp.length() != 0) {    reqInfo=(AuthnRequestInfo)SPCache.requestHash.get(inRespToResp);    if (reqInfo == null) {      if (SAML2FailoverUtils.isSAML2FailoverEnabled()) {        AuthnRequestInfoCopy reqInfoCopy=null;        try {          reqInfoCopy=(AuthnRequestInfoCopy)SAML2FailoverUtils.retrieveSAML2Token(inRespToResp);        } catch (        SAML2TokenRepositoryException se) {          debug.error(method + "AuthnRequestInfoCopy" + " unable to retrieve from SAML2 repository for inResponseTo: "+ inRespToResp);        }        if (reqInfoCopy != null) {          reqInfo=reqInfoCopy.getAuthnRequestInfo(httpRequest,httpResponse);          if (debug.messageEnabled()) {            debug.message(method + "AuthnRequestInfoCopy" + " retrieved from SAML2 repository for inResponseTo: "+ inRespToResp);          }        } else {          debug.error(method + "InResponseTo attribute in Response" + " is invalid: "+ inRespToResp+ ", SAML2 failover is enabled");          String[] data={respID};          LogUtil.error(Level.INFO,LogUtil.INVALID_INRESPONSETO_RESPONSE,data,null);          throw new SAML2Exception(bundle.getString("invalidInResponseToInResponse"));        }      } else {        AuthnRequestInfoCopy reqInfoCopy=(AuthnRequestInfoCopy)SAML2Store.getTokenFromStore(inRespToResp);        if (reqInfoCopy != null) {          reqInfo=reqInfoCopy.getAuthnRequestInfo(httpRequest,httpResponse);          if (debug.messageEnabled()) {            debug.message(method + "AuthnRequestInfoCopy" + " retrieved from SAML2 repository for inResponseTo: "+ inRespToResp);          }        } else {          debug.error(method + "InResponseTo attribute in Response" + " is invalid: "+ inRespToResp+ ", SAML2 failover is enabled");          String[] data={respID};          LogUtil.error(Level.INFO,LogUtil.INVALID_INRESPONSETO_RESPONSE,data,null);          throw new SAML2Exception(bundle.getString("invalidInResponseToInResponse"));        }      }    }  }  SAML2ServiceProviderAdapter spAdapter=SAML2Utils.getSPAdapterClass(hostEntityId,orgName);  if (spAdapter != null) {    AuthnRequest authnRequest=null;    if (reqInfo != null) {      authnRequest=reqInfo.getAuthnRequest();    }    spAdapter.preSingleSignOnProcess(hostEntityId,orgName,httpRequest,httpResponse,authnRequest,response,profileBinding);  }  String idpEntityId=null;  Issuer respIssuer=response.getIssuer();  if (respIssuer != null) {    if (!isSourceSiteValid(respIssuer,orgName,hostEntityId)) {      if (debug.messageEnabled()) {        debug.message(method + "Issuer in Response is not valid.");      }      String[] data={hostEntityId,orgName,respID};      LogUtil.error(Level.INFO,LogUtil.INVALID_ISSUER_RESPONSE,data,null);      throw new SAML2Exception(bundle.getString("invalidIssuerInResponse"));    } else {      idpEntityId=respIssuer.getValue();    }  }  Status status=response.getStatus();  if (status == null || !status.getStatusCode().getValue().equals(SAML2Constants.SUCCESS)) {    String statusCode=(status == null) ? "" : status.getStatusCode().getValue();    if (debug.messageEnabled()) {      debug.message(method + "Response's status code is not success: " + statusCode);    }    String[] data={respID,""};    if (LogUtil.isErrorLoggable(Level.FINE)) {      data[1]=statusCode;    }    LogUtil.error(Level.INFO,LogUtil.WRONG_STATUS_CODE,data,null);    StatusCode secondLevelStatusCode=status.getStatusCode().getStatusCode();    String secondLevelStatusCodeValue=(secondLevelStatusCode != null) ? secondLevelStatusCode.getValue() : null;    if (debug.messageEnabled()) {      debug.message(method + "First level status code : " + statusCode);      if (secondLevelStatusCodeValue != null) {        debug.message(method + "Second level status code : " + secondLevelStatusCodeValue);      }    }    throw new InvalidStatusCodeSaml2Exception(statusCode,secondLevelStatusCodeValue);  }  if (saml2MetaManager == null) {    throw new SAML2Exception(bundle.getString("nullMetaManager"));  }  SPSSOConfigElement spConfig=null;  SPSSODescriptorElement spDesc=null;  spConfig=saml2MetaManager.getSPSSOConfig(orgName,hostEntityId);  spDesc=saml2MetaManager.getSPSSODescriptor(orgName,hostEntityId);  if (debug.messageEnabled()) {    debug.message(method + "binding is :" + profileBinding);  }  boolean responseIsSigned=false;  if (response.isSigned()) {    IDPSSODescriptorElement idpSSODescriptor=null;    try {      idpSSODescriptor=saml2MetaManager.getIDPSSODescriptor(orgName,idpEntityId);    } catch (    SAML2MetaException sme) {      String[] data={orgName,idpEntityId};      LogUtil.error(Level.INFO,LogUtil.IDP_METADATA_ERROR,data,null);      throw new SAML2Exception(sme);    }    if (idpSSODescriptor != null) {      Set<X509Certificate> verificationCerts=KeyUtil.getVerificationCerts(idpSSODescriptor,idpEntityId,SAML2Constants.IDP_ROLE);      if (CollectionUtils.isEmpty(verificationCerts) || !response.isSignatureValid(verificationCerts)) {        debug.error(method + "Response is not signed or signature is not valid.");        String[] data={orgName,hostEntityId,idpEntityId};        LogUtil.error(Level.INFO,LogUtil.POST_RESPONSE_INVALID_SIGNATURE,data,null);        throw new SAML2Exception(bundle.getString("invalidSignInResponse"));      }    } else {      String[] data={idpEntityId};      LogUtil.error(Level.INFO,LogUtil.IDP_METADATA_ERROR,data,null);      throw new SAML2Exception(SAML2Utils.bundle.getString("metaDataError"));    }    responseIsSigned=true;  }  if (debug.messageEnabled()) {    debug.message(method + "responseIsSigned is :" + responseIsSigned);  }  boolean needAssertionEncrypted=false;  String assertionEncryptedAttr=getAttributeValueFromSPSSOConfig(spConfig,SAML2Constants.WANT_ASSERTION_ENCRYPTED);  needAssertionEncrypted=Boolean.parseBoolean(assertionEncryptedAttr);  if (debug.messageEnabled()) {    debug.message(method + "NeedAssertionEncrypted is :" + needAssertionEncrypted);  }  List<Assertion> assertions=response.getAssertion();  if (needAssertionEncrypted && !CollectionUtils.isEmpty(assertions)) {    String[] data={respID};    LogUtil.error(Level.INFO,LogUtil.ASSERTION_NOT_ENCRYPTED,data,null);    throw new SAML2Exception(SAML2Utils.bundle.getString("assertionNotEncrypted"));  }  Set<PrivateKey> decryptionKeys;  List<EncryptedAssertion> encAssertions=response.getEncryptedAssertion();  if (encAssertions != null) {    decryptionKeys=KeyUtil.getDecryptionKeys(spConfig);    for (    EncryptedAssertion encAssertion : encAssertions) {      Assertion assertion=encAssertion.decrypt(decryptionKeys);      if (assertions == null) {        assertions=new ArrayList<>();      }      assertions.add(assertion);    }  }  if (CollectionUtils.isEmpty(assertions)) {    if (debug.messageEnabled()) {      debug.message(method + "no assertion in the Response.");    }    String[] data={respID};    LogUtil.error(Level.INFO,LogUtil.MISSING_ASSERTION,data,null);    throw new SAML2Exception(SAML2Utils.bundle.getString("missingAssertion"));  }  boolean wantAssertionsSigned=spDesc.isWantAssertionsSigned();  if (debug.messageEnabled()) {    debug.message(method + "wantAssertionsSigned is :" + wantAssertionsSigned);  }  Map smap=null;  Map bearerMap=null;  IDPSSODescriptorElement idp=null;  Set<X509Certificate> verificationCerts=null;  boolean allAssertionsSigned=true;  for (  Assertion assertion : assertions) {    String assertionID=assertion.getID();    Issuer issuer=assertion.getIssuer();    if (!isSourceSiteValid(issuer,orgName,hostEntityId)) {      debug.error("assertion's source site is not valid.");      String[] data={assertionID};      LogUtil.error(Level.INFO,LogUtil.INVALID_ISSUER_ASSERTION,data,null);      throw new SAML2Exception(bundle.getString("invalidIssuerInAssertion"));    }    if (idpEntityId == null) {      idpEntityId=issuer.getValue();    } else {      if (!idpEntityId.equals(issuer.getValue())) {        if (debug.messageEnabled()) {          debug.message(method + "Issuer in Assertion doesn't " + "match the Issuer in Response or other "+ "Assertions in the Response.");        }        String[] data={assertionID};        LogUtil.error(Level.INFO,LogUtil.MISMATCH_ISSUER_ASSERTION,data,null);        throw new SAML2Exception(SAML2Utils.bundle.getString("mismatchIssuer"));      }    }    if (assertion.isSigned()) {      if (verificationCerts == null) {        idp=saml2MetaManager.getIDPSSODescriptor(orgName,idpEntityId);        verificationCerts=KeyUtil.getVerificationCerts(idp,idpEntityId,SAML2Constants.IDP_ROLE);      }      if (CollectionUtils.isEmpty(verificationCerts) || !assertion.isSignatureValid(verificationCerts)) {        debug.error(method + "Assertion is not signed or signature is not valid.");        String[] data={assertionID};        LogUtil.error(Level.INFO,LogUtil.INVALID_SIGNATURE_ASSERTION,data,null);        throw new SAML2Exception(bundle.getString("invalidSignatureOnAssertion"));      }    } else {      allAssertionsSigned=false;    }    List authnStmts=assertion.getAuthnStatements();    if (authnStmts != null && !authnStmts.isEmpty()) {      Subject subject=assertion.getSubject();      if (subject == null) {        continue;      }      List subjectConfirms=subject.getSubjectConfirmation();      if (subjectConfirms == null || subjectConfirms.isEmpty()) {        continue;      }      bearerMap=isBearerSubjectConfirmation(subjectConfirms,inRespToResp,spDesc,spConfig,assertionID);      if (!((Boolean)bearerMap.get(SAML2Constants.IS_BEARER))) {        continue;      }      boolean foundAssertion=false;      if ((SPCache.assertionByIDCache != null) && (SPCache.assertionByIDCache.containsKey(assertionID))) {        foundAssertion=true;      }      if ((!foundAssertion) && SAML2FailoverUtils.isSAML2FailoverEnabled()) {        try {          if (SAML2FailoverUtils.retrieveSAML2Token(assertionID) != null) {            foundAssertion=true;          }        } catch (        SAML2TokenRepositoryException e) {          if (debug.messageEnabled()) {            debug.message("Session not found in AMTokenSAML2Repository.",e);          }        }      }      if (foundAssertion) {        debug.error("Bearer Assertion is one time use only!");        throw new SAML2Exception(bundle.getString("usedBearAssertion"));      }      checkAudience(assertion.getConditions(),hostEntityId,assertionID);      checkConditions(assertion.getConditions(),hostEntityId,assertionID);      if (smap == null) {        smap=fillMap(authnStmts,subject,assertion,assertions,reqInfo,inRespToResp,orgName,hostEntityId,idpEntityId,spConfig,(Date)bearerMap.get(SAML2Constants.NOTONORAFTER));      }    }  }  if (smap == null) {    debug.error("No Authentication Assertion in Response.");    throw new SAML2Exception(bundle.getString("missingAuthnAssertion"));  }  if (wantAssertionsSigned && !(responseIsSigned || allAssertionsSigned)) {    debug.error(method + "WantAssertionsSigned is true and response or all assertions are not signed");    String[] data={orgName,hostEntityId,idpEntityId};    LogUtil.error(Level.INFO,LogUtil.INVALID_SIGNATURE_ASSERTION,data,null);    throw new SAML2Exception(bundle.getString("assertionNotSigned"));  }  if (profileBinding.equals(SAML2Constants.HTTP_POST)) {    boolean wantPostResponseSigned=SAML2Utils.wantPOSTResponseSigned(orgName,hostEntityId,SAML2Constants.SP_ROLE);    if (debug.messageEnabled()) {      debug.message(method + "wantPostResponseSigned is :" + wantPostResponseSigned);    }    if (wantPostResponseSigned && !responseIsSigned) {      debug.error(method + "wantPostResponseSigned is true but response is not signed");      String[] data={orgName,hostEntityId,idpEntityId};      LogUtil.error(Level.INFO,LogUtil.POST_RESPONSE_INVALID_SIGNATURE,data,null);      throw new SAML2Exception(bundle.getString("responseNotSigned"));    }    if (!responseIsSigned && !allAssertionsSigned) {      debug.error(method + "WantAssertionsSigned is true but some or all assertions are not signed");      String[] data={orgName,hostEntityId,idpEntityId};      LogUtil.error(Level.INFO,LogUtil.INVALID_SIGNATURE_ASSERTION,data,null);      throw new SAML2Exception(bundle.getString("assertionNotSigned"));    }  }  return smap;}  }
class C{  private LogFile(final File logFilePath,final RecordParser<K,V> parser,boolean isWriteEnabled) throws ChangelogException {  Reject.ifNull(logFilePath,parser);  this.logfile=logFilePath;  this.isWriteEnabled=isWriteEnabled;  final ReadWriteLock rwLock=new ReentrantReadWriteLock();  exclusiveLock=rwLock.writeLock();  sharedLock=rwLock.readLock();  createLogFileIfNotExists();  readerPool=new LogReaderPool<>(logfile,parser);  if (isWriteEnabled) {    ensureLogFileIsValid(parser);    writer=BlockLogWriter.newWriter(new LogWriter(logfile),parser);    initializeNewestRecord();  } else {    writer=null;  }}  }
class C{  public com.sun.identity.saml2.jaxb.xmlenc.EncryptedKeyType createEncryptedKeyType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlenc.impl.EncryptedKeyTypeImpl();}  }
class C{  public static RpcContext init(Request request){  RpcContext context=new RpcContext();  if (request != null) {    context.setRequest(request);    context.setClientRequestId(request.getAttachments().get(URLParamType.requestIdFromClient.getName()));  }  localContext.set(context);  return context;}  }
class C{  static int checkBufferSize(CryptoCipher cipher,int bufferSize){  Utils.checkArgument(bufferSize >= CryptoInputStream.MIN_BUFFER_SIZE,"Minimum value of buffer size is " + CryptoInputStream.MIN_BUFFER_SIZE + ".");  return bufferSize - bufferSize % cipher.getBlockSize();}  }
class C{  private void initializeType(JsonValue schema) throws JsonValueException {  JsonValue type=schema.get("type");  if (type.isString() && type.asString().equals("array")) {    isArray=true;    initializeType(schema.get("items"));  } else {    if (type.isString()) {      setType(type.asString());    } else     if (type.isList()) {      for (      JsonValue t : type) {        setType(t.asString());      }    } else {      throw new JsonValueException(type,"Schema field 'type' must be a String or List");    }    if (isRelationship()) {      this.isReverseRelationship=schema.get("reverseRelationship").defaultTo(false).asBoolean();      if (this.isReverseRelationship) {        this.reversePropertyName=schema.get("reversePropertyName").required().asString();      }    }    this.validationRequired=schema.get("validate").defaultTo(false).asBoolean();  }}  }
class C{  public void draw(float[] mvpMatrix,FloatBuffer vertexBuffer,int firstVertex,int vertexCount,int coordsPerVertex,int vertexStride,float[] texMatrix,FloatBuffer texBuffer,int textureId,int texStride){  GlUtil.checkGlError("draw start");  GLES20.glUseProgram(mProgramHandle);  GlUtil.checkGlError("glUseProgram");  GLES20.glActiveTexture(GLES20.GL_TEXTURE0);  GLES20.glBindTexture(mTextureTarget,textureId);  GLES20.glUniformMatrix4fv(muMVPMatrixLoc,1,false,mvpMatrix,0);  GlUtil.checkGlError("glUniformMatrix4fv");  GLES20.glUniformMatrix4fv(muTexMatrixLoc,1,false,texMatrix,0);  GlUtil.checkGlError("glUniformMatrix4fv");  GLES20.glEnableVertexAttribArray(maPositionLoc);  GlUtil.checkGlError("glEnableVertexAttribArray");  GLES20.glVertexAttribPointer(maPositionLoc,coordsPerVertex,GLES20.GL_FLOAT,false,vertexStride,vertexBuffer);  GlUtil.checkGlError("glVertexAttribPointer");  GLES20.glEnableVertexAttribArray(maTextureCoordLoc);  GlUtil.checkGlError("glEnableVertexAttribArray");  GLES20.glVertexAttribPointer(maTextureCoordLoc,2,GLES20.GL_FLOAT,false,texStride,texBuffer);  GlUtil.checkGlError("glVertexAttribPointer");  if (muKernelLoc >= 0) {    GLES20.glUniform1fv(muKernelLoc,KERNEL_SIZE,mKernel,0);    GLES20.glUniform2fv(muTexOffsetLoc,KERNEL_SIZE,mTexOffset,0);    GLES20.glUniform1f(muColorAdjustLoc,mColorAdjust);  }  GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP,firstVertex,vertexCount);  GlUtil.checkGlError("glDrawArrays");  GLES20.glDisableVertexAttribArray(maPositionLoc);  GLES20.glDisableVertexAttribArray(maTextureCoordLoc);  GLES20.glBindTexture(mTextureTarget,0);  GLES20.glUseProgram(0);}  }
class C{  public DTMException(String message,Throwable e){  super(((message == null) || (message.length() == 0)) ? e.getMessage() : message);  this.containedException=e;  this.locator=null;}  }
class C{  public InputStreamReader(InputStream in,CharsetDecoder dec){  super(in);  if (dec == null)   throw new NullPointerException("charset decoder");  sd=StreamDecoder.forInputStreamReader(in,this,dec);}  }
class C{  public boolean deleteAll(){  return database.delete(DATABASE_TABLE,null,null) > 0;}  }
class C{  public PKCS11KeyManagerProvider(){}  }
class C{  public String composeName(String name,String prefix) throws NamingException {  return name;}  }
class C{  protected void initializeRequestContext(RequestContext requestContext){  super.initializeRequestContext(requestContext);  ViewBeanManager viewBeanManager=new ViewBeanManager(requestContext,PACKAGE_NAME);  ((RequestContextImpl)requestContext).setViewBeanManager(viewBeanManager);}  }
class C{  int lastUseIndex(Name n){  int ni=n.index, nmax=names.length;  assert (names[ni] == n);  if (result == ni)   return nmax;  for (int i=nmax; --i > ni; ) {    if (names[i].lastUseIndex(n) >= 0)     return i;  }  return -1;}  }
class C{  public SearchThenBindStrategy(ConnectionFactory searchConnectionFactory,ConnectionFactory bindConnectionFactory,DN baseDN,SearchScope searchScope,String filterTemplate){  this.searchConnectionFactory=checkNotNull(searchConnectionFactory,"searchConnectionFactory cannot be null");  this.bindConnectionFactory=checkNotNull(bindConnectionFactory,"bindConnectionFactory cannot be null");  this.baseDN=checkNotNull(baseDN,"baseDN cannot be null");  this.searchScope=checkNotNull(searchScope,"searchScope cannot be null");  this.filterTemplate=checkNotNull(filterTemplate,"filterTemplate cannot be null");}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.AlphabetType createAlphabetType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.AlphabetTypeImpl();}  }
class C{  public void removeAuthEntries(Integer[] entries){  List removeList=new ArrayList(entries.length * 2);  for (int i=0; i < entries.length; i++) {    removeList.add(entryList.get(entries[i].intValue()));  }  entryList.removeAll(removeList);  xmlValue=AMAuthConfigUtils.authConfigurationEntryToXMLString(entryList);}  }
class C{  private void resetDoubleBufferPerWindow(){  if (bufferInfos != null) {    dispose(bufferInfos);    bufferInfos=null;    repaintManager.setPaintManager(null);  }}  }
