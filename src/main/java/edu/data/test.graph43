class C{  public IntersectsExtended(){  super(null,null);}  }
class C{  private long calculateAnimationDuration(float initialVelocity,float displacement){  return MathUtils.clamp(Math.round(Math.abs(2000 * displacement / initialVelocity)),MINIMUM_ANIMATION_DURATION_MS,MAXIMUM_ANIMATION_DURATION_MS);}  }
class C{  public PhoneNumber number(){  return number;}  }
class C{  public static List<String> readLines(File file,String encoding) throws IOException {  return readLines(file,Charsets.toCharset(encoding));}  }
class C{  protected DatabaseGetStreetsByIdQuery streetIds(int... value){  return unsafeParam("street_ids",value);}  }
class C{  @Nullable("when haystack doesn't end with needle") @Contract(pure=true) public static String trimEndOrNullize(@NotNull String haystack,@NotNull String needle){  if (haystack.endsWith(needle)) {    return haystack.substring(0,haystack.length() - needle.length());  }  return null;}  }
class C{  public <R>Plan<R> then(Function3<T1,T2,T3,R> selector){  if (selector == null) {    throw new NullPointerException();  }  return new Plan3<T1,T2,T3,R>(this,selector);}  }
class C{  public Z Eq(Z a){  re=a.re;  im=a.im;  return this;}  }
class C{  private void initLabels(){  CompareConfiguration cc=getCompareConfiguration();  ITypedElement left=this.left;  ITypedElement right=this.right;  ITypedElement ancestor=this.ancestor;  if (left != null) {    leftLabel=getLabel(left);    cc.setLeftLabel(leftLabel);    cc.setLeftImage(leftImage);  }  if (right != null) {    rightLabel=getLabel(right);    cc.setRightLabel(rightLabel);    cc.setRightImage(rightImage);  }  if (ancestor != null) {    cc.setAncestorLabel(getLabel(ancestor));    cc.setAncestorImage(ancestorImage);  }  String title;  if (ancestor != null) {    title=Policy.bind("SVNCompareEditorInput.titleAncestor",new Object[]{guessResourceName(),getVersionLabel(ancestor),getVersionLabel(left),getVersionLabel(right)});  } else {    String leftName=null;    if (left != null)     leftName=left.getName();    String rightName=null;    if (right != null)     rightName=right.getName();    if (leftName != null && !leftName.equals(rightName)) {      title=Policy.bind("SVNCompareEditorInput.titleNoAncestorDifferent",new Object[]{leftName,getVersionLabel(left),rightName,getVersionLabel(right)});    } else {      title=Policy.bind("SVNCompareEditorInput.titleNoAncestor",new Object[]{guessResourceName(),getVersionLabel(left),getVersionLabel(right)});    }  }  setTitle(title);}  }
class C{  public SearchGetHintsQuery searchGlobal(Boolean value){  return unsafeParam("search_global",value);}  }
class C{  public void put(int ii[],int jj1,int jj2,Zmat A){  dirty=true;  int nrow=ii.length;  int ncol=jj2 - jj1 + 1;  for (int i=0; i < nrow; i++)   for (int j=0; j < ncol; j++) {    re[ii[i] - basex][j + jj1 - basex]=A.re[i][j];    im[ii[i] - basex][j + jj1 - basex]=A.im[i][j];  }}  }
class C{  private AirMap(Context context,String auth,boolean pinCertificates){  this.context=context;  authToken=auth == null ? "" : auth;  certificatePinning=pinCertificates;  decodeToken(auth);  try {    InputStream inputStream=getContext().getResources().getAssets().open("airmap.config.json");    String json=Utils.readInputStreamAsString(inputStream);    config=new JSONObject(json);    apiKey=getConfig().getJSONObject("airmap").getString("api_key");  } catch (  IOException|JSONException|NullPointerException e) {    e.printStackTrace();    throw new RuntimeException("Please ensure you have your airmap.config.json file in your /assets directory");  }  client=new AirMapClient(apiKey,auth);}  }
class C{  @Path(path="verify") public void verify(){  String code=this.getString("code").toLowerCase();  Captcha.Result r=Captcha.verify(this.sid(),code);  JSON jo=new JSON();  if (Captcha.Result.badcode == r) {    jo.put(X.STATE,202);    jo.put(X.MESSAGE,"bad code");  } else   if (Captcha.Result.expired == r) {    jo.put(X.STATE,201);    jo.put(X.MESSAGE,"expired");  } else {    jo.put(X.STATE,200);    jo.put(X.MESSAGE,"ok");  }  this.response(jo);}  }
class C{  public SyncHttpClient(boolean fixNoHttpResponseException,int httpPort,int httpsPort){  super(fixNoHttpResponseException,httpPort,httpsPort);}  }
class C{  @SuppressWarnings("StatementWithEmptyBody") public static String mergeResourceFile(@NotNull RenderingContext context,@NotNull String targetXml,@NotNull String sourceXml,@NotNull String fileName,@Nullable ResourceFolderType folderType){  XmlFile targetPsiFile=(XmlFile)PsiFileFactory.getInstance(context.getProject()).createFileFromText("targetFile",XMLLanguage.INSTANCE,StringUtil.convertLineSeparators(targetXml));  XmlFile sourcePsiFile=(XmlFile)PsiFileFactory.getInstance(context.getProject()).createFileFromText("sourceFile",XMLLanguage.INSTANCE,StringUtil.convertLineSeparators(sourceXml));  XmlTag root=targetPsiFile.getDocument().getRootTag();  assert root != null : "Cannot find XML root in target: " + targetXml;  XmlAttribute[] attributes=sourcePsiFile.getRootTag().getAttributes();  for (  XmlAttribute attr : attributes) {    if (attr.getNamespacePrefix().equals(XMLNS_PREFIX)) {      root.setAttribute(attr.getName(),attr.getValue());    }  }  List<XmlTagChild> prependElements=Lists.newArrayList();  XmlText indent=null;  if (folderType == ResourceFolderType.VALUES) {    Map<String,XmlTag> old=Maps.newHashMap();    for (    XmlTag newSibling : root.getSubTags()) {      old.put(getResourceId(newSibling),newSibling);    }    for (    PsiElement child : sourcePsiFile.getRootTag().getChildren()) {      if (child instanceof XmlComment) {        if (indent != null) {          prependElements.add(indent);        }        prependElements.add((XmlTagChild)child);      } else       if (child instanceof XmlText) {        indent=(XmlText)child;      } else       if (child instanceof XmlTag) {        XmlTag subTag=(XmlTag)child;        String mergeStrategy=subTag.getAttributeValue(MERGE_ATTR_STRATEGY);        subTag.setAttribute(MERGE_ATTR_STRATEGY,null);        CodeStyleManager.getInstance(context.getProject()).reformat(subTag);        String name=getResourceId(subTag);        XmlTag replace=name != null ? old.get(name) : null;        if (replace != null) {          if (MERGE_ATTR_STRATEGY_REPLACE.equals(mergeStrategy)) {            child=replace.replace(child);            if (child.getPrevSibling() instanceof XmlText && prependElements.get(0) instanceof XmlText) {              prependElements.remove(0);              if (!prependElements.isEmpty()) {                prependElements.add(indent);              }            }            for (            XmlTagChild element : prependElements) {              root.addBefore(element,child);            }          } else           if (MERGE_ATTR_STRATEGY_PRESERVE.equals(mergeStrategy)) {          } else           if (replace.getText().trim().equals(child.getText().trim())) {          } else {            context.getWarnings().add(String.format("Ignoring conflict for the value: %1$s wanted: \"%2$s\" but it already is: \"%3$s\" in the file: %4$s",name,child.getText(),replace.getText(),fileName));          }        } else {          if (indent != null) {            prependElements.add(indent);          }          subTag=root.addSubTag(subTag,false);          for (          XmlTagChild element : prependElements) {            root.addBefore(element,subTag);          }        }        prependElements.clear();      }    }  } else {    for (    PsiElement child : sourcePsiFile.getRootTag().getChildren()) {      if (child instanceof XmlTag) {        root.addSubTag((XmlTag)child,false);      }    }  }  return targetPsiFile.getText();}  }
class C{  public SystemWin(){}  }
class C{  private void doSetupUI(Project project) throws ClassCastException, InstantiationException, IllegalAccessException, ClassNotFoundException {  panel=new JPanel();  panel.setLayout(new GridLayoutManager(6,6,new Insets(0,0,0,0),-1,-1));  panel.setAlignmentX(0.0f);  allInPackageButton=new JRadioButton();  allInPackageButton.setActionCommand(ResourceBundle.getBundle("messages/ExecutionBundle").getString("jnit.configuration.all.tests.in.package.radio"));  this.loadButtonText(allInPackageButton,ResourceBundle.getBundle("messages/AndroidBundle").getString("android.run.configuration.all.in.package.radio"));  panel.add(allInPackageButton,new GridConstraints(1,2,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  classButton=new JRadioButton();  classButton.setActionCommand(ResourceBundle.getBundle("messages/ExecutionBundle").getString("junit.configuration.test.class.radio"));  classButton.setEnabled(true);  classButton.setSelected(false);  this.loadButtonText(classButton,ResourceBundle.getBundle("messages/AndroidBundle").getString("android.run.configuration.class.radio"));  panel.add(classButton,new GridConstraints(1,3,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  testMethodButton=new JRadioButton();  testMethodButton.setActionCommand(ResourceBundle.getBundle("messages/ExecutionBundle").getString("junit.configuration.test.method.radio"));  testMethodButton.setSelected(false);  this.loadButtonText(testMethodButton,ResourceBundle.getBundle("messages/AndroidBundle").getString("android.run.configuration.method.radio"));  panel.add(testMethodButton,new GridConstraints(1,4,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  labelTest=new JBLabel();  labelTest.setHorizontalAlignment(2);  labelTest.setHorizontalTextPosition(2);  labelTest.setIconTextGap(4);  this.loadLabelText(labelTest,ResourceBundle.getBundle("messages/ExecutionBundle").getString("junit.configuration.configure.junit.test.label"));  panel.add(labelTest,new GridConstraints(1,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  final Spacer spacer1=new Spacer();  panel.add(spacer1,new GridConstraints(1,5,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_WANT_GROW,1,null,null,null,0,false));  allInTargetButton=new JRadioButton();  allInTargetButton.setText("All in test target");  allInTargetButton.setMnemonic('A');  allInTargetButton.setDisplayedMnemonicIndex(0);  panel.add(allInTargetButton,new GridConstraints(1,1,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  classComponent=new LabeledComponent();  classComponent.setComponentClass("javax.swing.JPanel");  classComponent.setLabelLocation("West");  classComponent.setText(ResourceBundle.getBundle("messages/AndroidBundle").getString("android.run.configuration.class.label"));  panel.add(classComponent,new GridConstraints(3,0,1,6,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  methodComponent=new LabeledComponent();  methodComponent.setComponentClass("com.intellij.openapi.ui.TextFieldWithBrowseButton$NoPathCompletion");  methodComponent.setLabelLocation("West");  methodComponent.setText(ResourceBundle.getBundle("messages/AndroidBundle").getString("android.run.configuration.method.label"));  panel.add(methodComponent,new GridConstraints(4,0,1,6,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  runnerComponent=new LabeledComponent();  runnerComponent.setComponentClass("javax.swing.JPanel");  runnerComponent.setEnabled(true);  runnerComponent.setLabelLocation("North");  runnerComponent.setText(ResourceBundle.getBundle("messages/AndroidBundle").getString("android.test.run.configuration.instrumentation.label"));  panel.add(runnerComponent,new GridConstraints(5,0,1,6,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  packageComponent=new LabeledComponent();  packageComponent.setComponentClass("javax.swing.JPanel");  packageComponent.setLabelLocation("West");  packageComponent.setText(ResourceBundle.getBundle("messages/AndroidBundle").getString("android.run.configuration.package.label"));  panel.add(packageComponent,new GridConstraints(2,0,1,6,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  runThroughBlazeTestCheckBox=new JCheckBox();  runThroughBlazeTestCheckBox.setText(String.format("Run through '%s test'",Blaze.buildSystemName(project).toLowerCase()));  runThroughBlazeTestCheckBox.setToolTipText(String.format("Slower, but more truthful to %s",Blaze.buildSystemName(project)));  panel.add(runThroughBlazeTestCheckBox,new GridConstraints(0,0,1,6,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  ButtonGroup buttonGroup;  buttonGroup=new ButtonGroup();  buttonGroup.add(allInPackageButton);  buttonGroup.add(classButton);  buttonGroup.add(testMethodButton);  buttonGroup.add(allInTargetButton);}  }
class C{  @SuppressWarnings("deprecation") static HttpUriRequest createHttpRequest(Request<?> request,Map<String,String> additionalHeaders) throws AuthFailureError {switch (request.getMethod()) {case Method.DEPRECATED_GET_OR_POST:{      byte[] postBody=request.getPostBody();      if (postBody != null) {        HttpPost postRequest=new HttpPost(request.getUrl());        postRequest.addHeader(HEADER_CONTENT_TYPE,request.getPostBodyContentType());        HttpEntity entity;        entity=new ByteArrayEntity(postBody);        postRequest.setEntity(entity);        return postRequest;      } else {        return new HttpGet(request.getUrl());      }    }case Method.GET:  return new HttpGet(request.getUrl());case Method.DELETE:return new HttpDelete(request.getUrl());case Method.POST:{HttpPost postRequest=new HttpPost(request.getUrl());postRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(postRequest,request);return postRequest;}case Method.PUT:{HttpPut putRequest=new HttpPut(request.getUrl());putRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(putRequest,request);return putRequest;}case Method.HEAD:return new HttpHead(request.getUrl());case Method.OPTIONS:return new HttpOptions(request.getUrl());case Method.TRACE:return new HttpTrace(request.getUrl());case Method.PATCH:{HttpPatch patchRequest=new HttpPatch(request.getUrl());patchRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(patchRequest,request);return patchRequest;}default :throw new IllegalStateException("Unknown request method.");}}  }
class C{  public boolean providesIntegrity(URL url){  if (!"file".equals(url.getProtocol())) {    return false;  }  String host=url.getHost();  return (host == null || host.equals("") || host.equals("~") || host.equals("localhost"));}  }
class C{  @Override public void onStartTrackingTouch(SeekBar seekBar){  mDragging=true;  mHandler.removeMessages(SHOW_PROGRESS);}  }
class C{  public NGramDocument(){  Graph=new DocumentNGramGraph();  Histogram=new DocumentNGramHistogram();}  }
class C{  public static float screenToScroll(float x,float warpSize){  if (x <= 0)   return 0;  if (x >= warpSize)   return x + warpSize;  return (float)Math.sqrt(x * warpSize) * 2;}  }
class C{  private static void drawTableLayoutGuidelines(ViewTransform transform,Graphics2D g,ConstraintTableLayout table){  Graphics2D g2=(Graphics2D)g.create();  ArrayList<Guideline> vertical=table.getVerticalGuidelines();  ArrayList<Guideline> horizontal=table.getHorizontalGuidelines();  g2.setStroke(SnapDraw.sThinDashedStroke);  int l=transform.getSwingX(table.getDrawX());  int t=transform.getSwingY(table.getDrawY());  int r=transform.getSwingX(table.getDrawX() + table.getDrawWidth());  int b=transform.getSwingY(table.getDrawY() + table.getDrawHeight());  for (  ConstraintWidget v : vertical) {    int x=transform.getSwingX(v.getX()) + l;    g2.drawLine(x,t,x,b);  }  for (  ConstraintWidget h : horizontal) {    int y=transform.getSwingY(h.getY()) + t;    g2.drawLine(l,y,r,y);  }  g2.dispose();}  }
class C{  public ResourceNameValidator unique(){  myUnique=true;  myExist=false;  return this;}  }
class C{  @AfterClass public void cleanUp(){  experiment.setState(Constants.EXPERIMENT_STATE_PAUSED);  putExperiment(experiment);  experiment.setState(Constants.EXPERIMENT_STATE_TERMINATED);  putExperiment(experiment);  deleteExperiment(experiment);}  }
class C{  private void collectAttributes(AttributeSet attributeSet){  TypedArray attributesArray=getContext().obtainStyledAttributes(attributeSet,R.styleable.PresenterLayout);  try {    mOverlappingBackgroundColor=attributesArray.getColor(R.styleable.PresenterLayout_background_color_overlapping,mDefaultOverlappingBackgroundColor);    mInflateDefaultViews=attributesArray.getBoolean(R.styleable.PresenterLayout_inflate_default_views,true);    mInitialViewId=attributesArray.getInt(R.styleable.PresenterLayout_show_initial_view,NONE_VIEW);  }  finally {    attributesArray.recycle();  }}  }
class C{  public VideoGetQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  private void initDirectionVector(final int d,final int a,final int[] m){  final int s=m.length - 1;  for (int i=1; i <= s; i++) {    direction[d][i]=((long)m[i]) << (BITS - i);  }  for (int i=s + 1; i <= BITS; i++) {    direction[d][i]=direction[d][i - s] ^ (direction[d][i - s] >> s);    for (int k=1; k <= s - 1; k++) {      direction[d][i]^=((a >> (s - 1 - k)) & 1) * direction[d][i - k];    }  }}  }
class C{  private static byte[] readResource(Resource r) throws IOException {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  byte[] buffer=new byte[4096];  InputStream is=r.open();  try {    for (; ; ) {      int cnt=is.read(buffer);      if (cnt == -1)       break;      baos.write(buffer,0,cnt);    }  }  finally {    try {      is.close();    } catch (    IOException ex) {    }  }  return baos.toByteArray();}  }
class C{  public BaseMessage(final String topic,final String payload){  this(MessageIdGenerator.getNewId(),topic,payload,new Date());}  }
class C{  private void pop(char c) throws JSONException {  if (this.top <= 0) {    throw new JSONException("Nesting error.");  }  char m=this.stack[this.top - 1] == null ? 'a' : 'k';  if (m != c) {    throw new JSONException("Nesting error.");  }  this.top-=1;  this.mode=this.top == 0 ? 'd' : this.stack[this.top - 1] == null ? 'a' : 'k';}  }
class C{  public String toString(cp_info constant_pool[]){  return Double.toString(convert());}  }
class C{  @deprecated public static boolean isJavaLetter(int cp){  return isJavaIdentifierStart(cp);}  }
class C{  public Vector3f cross(Vector2f v){  return new Vector3f(0,0,determinant(v));}  }
class C{  private static void groupDirectories(TreeMap<String,RootDirectory> rootDirectories){  String keyToMerge=rootDirectories.lastKey();  while (keyToMerge != null) {    RootDirectory dirToMerge=rootDirectories.get(keyToMerge);    VirtualFile dirToMergeParent=dirToMerge.rootDir.getParent();    if (dirToMergeParent == null) {      keyToMerge=rootDirectories.lowerKey(keyToMerge);      continue;    }    RootDirectory targetDir=rootDirectories.get(dirToMergeParent.getPath());    if (targetDir != null) {      targetDir.sourceFolders.addAll(dirToMerge.sourceFolders);      targetDir.sourceFiles.addAll(dirToMerge.sourceFiles);      rootDirectories.remove(keyToMerge);      keyToMerge=rootDirectories.lastKey();      continue;    }    String previousKey=rootDirectories.lowerKey(keyToMerge);    if (previousKey == null) {      break;    }    RootDirectory previousDir=rootDirectories.get(previousKey);    VirtualFile previousDirParent=previousDir.rootDir.getParent();    if (previousDirParent != null && previousDirParent.getPath().equals(dirToMergeParent.getPath())) {      targetDir=rootDirectories.get(dirToMergeParent.getPath());      if (targetDir == null) {        targetDir=new RootDirectory(dirToMergeParent);        rootDirectories.put(dirToMergeParent.getPath(),targetDir);      }      targetDir.sourceFolders.addAll(dirToMerge.sourceFolders);      targetDir.sourceFolders.addAll(previousDir.sourceFolders);      targetDir.sourceFiles.addAll(dirToMerge.sourceFiles);      targetDir.sourceFiles.addAll(previousDir.sourceFiles);      rootDirectories.remove(keyToMerge);      rootDirectories.remove(previousKey);      keyToMerge=rootDirectories.lastKey();      continue;    }    keyToMerge=previousKey;  }}  }
class C{  public static void decode(InputStream inputStream,OutputStream outputStream) throws IOException {  copy(new Base64InputStream(inputStream),outputStream);}  }
class C{  public void apply(NexusStreamParser np) throws Exception {}  }
class C{  private void initializeSoot(String appPath,String libPath,Collection<String> classes){  initializeSoot(appPath,libPath,classes,"");}  }
class C{  public void testUntypedLinkedListField() throws Exception {  AnObject empty=new AnObject();  AnObject full=helper.fill(new AnObject());  Object value=getPropertyValue(full,"untypedLinkedListField");  assertTrue(value instanceof List);  assertFalse(((List)value).isEmpty());  assertEquals(1L,((List)value).get(0));  assertTrue(helper.areEquals(full,full));  assertFalse(helper.areEquals(empty,full));}  }
class C{  public double clamp(double value){  return Math.min(Math.max(getMin(),value),getMax());}  }
class C{  private List<BlockInfo> fillSegmentIdToTableInfoMap(List<TableBlockInfo> tableBlockInfos,AbsoluteTableIdentifier absoluteTableIdentifier){  Map<String,List<BlockInfo>> map=segmentIdToBlockListMap.get(absoluteTableIdentifier);  if (null == map) {    map=new ConcurrentHashMap<String,List<BlockInfo>>();    segmentIdToBlockListMap.put(absoluteTableIdentifier,map);  }  BlockInfo temp=null;  List<BlockInfo> blockInfosNeedToLoad=new ArrayList<>();  for (  TableBlockInfo info : tableBlockInfos) {    List<BlockInfo> tempTableBlockInfos=map.get(info.getSegmentId());    if (null == tempTableBlockInfos) {      tempTableBlockInfos=new ArrayList<>();      map.put(info.getSegmentId(),tempTableBlockInfos);    }    temp=new BlockInfo(info);    if (!tempTableBlockInfos.contains(temp)) {      tempTableBlockInfos.add(temp);    }    blockInfosNeedToLoad.add(temp);  }  return blockInfosNeedToLoad;}  }
class C{  public boolean containsKey(Object key){  Object nulledKey=fromKey(key);  CacheLine<V> line=memoryTable.get(nulledKey);  if (line == null) {    if (fileTable != null) {      try {synchronized (this) {          FastIterator<Object> iter=fileTable.keys();          Object checkKey=null;          while ((checkKey=iter.next()) != null) {            if (nulledKey.equals(checkKey)) {              return true;            }          }        }      } catch (      IOException e) {        Debug.logError(e,module);      }    }    return false;  } else {    return true;  }}  }
class C{  private void addResizeHandles(){  mResizeHandles.add(mLeftTop);  mResizeHandles.add(mLeftBottom);  mResizeHandles.add(mRightTop);  mResizeHandles.add(mRightBottom);  if (mWidget instanceof Guideline) {    mResizeHandles.add(mLeftSide);    mResizeHandles.add(mTopSide);  } else {    if (USE_SIDE_RESIZE) {      mResizeHandles.add(mLeftSide);      mResizeHandles.add(mTopSide);      mResizeHandles.add(mRightSide);      mResizeHandles.add(mBottomSide);    }  }}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("java.lang.String getLocalHostName()")) {    java_net_InetAddressImpl_getLocalHostName(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.String getHostByAddress(int)")) {    java_net_InetAddressImpl_getHostByAddr(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public static boolean isValid(String expression,Map<String,Object> vars){  try {    Object result=evaluate(expression,vars,true);    return result != null;  } catch (  JexlException ex) {    if (ex.getMessage().contains("divide error")) {      return true;    }    return false;  }}  }
class C{  public static void save(@NotNull Project project){  if (!ENABLED) {    return;  }  boolean cacheSaved=false;  try {    GradleProjectSyncData data=createFrom(project);    if (data != null) {      File file=getProjectStateFile(project);      ensureExists(file.getParentFile());      data.saveTo(file);      cacheSaved=true;    }  } catch (  IOException e) {    LOG.info(String.format("Error while saving persistent state from project '%1$s'",project.getName()),e);  }  if (!cacheSaved) {    LOG.info("Failed to generate new cache. Deleting the old one.");    removeFrom(project);  }}  }
class C{  public PlacesGetByIdQuery(VkApiClient client,UserActor actor,int... places){  super(client,"places.getById",Utils.buildParametrizedType(List.class,Place.class));  accessToken(actor.getAccessToken());  places(places);}  }
class C{  public AemContentFinder clickListView(){  getCurrentTab().clickListView();  return this;}  }
class C{  public SyncHttpClient(SchemeRegistry schemeRegistry){  super(schemeRegistry);}  }
class C{  public boolean isStatic(){  return this == STATIC;}  }
class C{  public boolean equals(Object obj){  if (this == obj) {    return true;  } else   if (!(obj instanceof ProxyTrustInvocationHandler)) {    return false;  }  ProxyTrustInvocationHandler oh=(ProxyTrustInvocationHandler)obj;  return main.equals(oh.main) && boot.equals(oh.boot);}  }
class C{  public AemRichText type(CharSequence text){  switchToTextArea();  try {    actions.sendKeys(text).perform();    return this;  }  finally {    frameSwitcher.switchTo("/$cq");  }}  }
class C{  private AttributeSelection(Class<?> expectedDataType,FieldConfigBase field){  this.field=field;  setLayout(new BorderLayout(0,0));  setPreferredSize(new Dimension(100,BasePanel.WIDGET_HEIGHT));  createUI(expectedDataType);  DataSourceInterface dataSource=DataSourceFactory.getDataSource();  if (dataSource != null) {    dataSource.addListener(this);  }}  }
class C{  public Builder cacheInMemory(boolean cacheInMemory){  this.cacheInMemory=cacheInMemory;  return this;}  }
class C{  public ConversationFactory withInitialSessionData(Map<Object,Object> initialSessionData){  this.initialSessionData=initialSessionData;  return this;}  }
class C{  public UsersSearchQuery q(String value){  return unsafeParam("q",value);}  }
class C{  public String mapField(String fieldName,Object value){  if (overrides.containsKey(fieldName)) {    return overrides.get(fieldName);  }  if (value == null) {    return null;  }  Class<?> valType=value.getClass();  boolean multiValued=false;  if (valType.isArray()) {    multiValued=true;    valType=valType.getComponentType();    valType=PRIMITIVE_MAP.getOrDefault(valType,valType);  } else   if (Collection.class.isAssignableFrom(valType)) {    multiValued=true;    Collection items=(Collection)value;    if (items.isEmpty()) {      return null;    }    valType=items.iterator().next().getClass();  }  String suffix=typeSuffix.get(valType);  if (suffix == null) {    LOG.warn("{} type is not mapped, field name = {}",valType.getName(),fieldName);    throw new IllegalStateException(valType + " type is not known");  }  if (multiValued) {    suffix+=multiValSuffix;  }  if (fieldName.endsWith(suffix)) {    return fieldName;  }  fieldName=fieldName.toLowerCase().replaceAll("\\s+","");  return fieldName + suffix;}  }
class C{  public DynamicInvokeExpr newDynamicInvokeExpr(SootMethodRef bootstrapMethodRef,List<? extends Value> bootstrapArgs,SootMethodRef methodRef,int tag,List<? extends Value> args){  return new JDynamicInvokeExpr(bootstrapMethodRef,bootstrapArgs,methodRef,tag,args);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_ABYSS_GUILD_WIN_CASTLE(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1301038,value0,value1);}  }
class C{  public Optional<Number> sum(){  String dataType=checkSelectedResourceTypesHaveCorrectDataType(statisticsResourceTypes);  if (!selectedTypesHaveInstanceInSubgraph(statisticsResourceTypes,subtypes))   return Optional.empty();  Set<String> allSubtypes=statisticsResourceTypes.stream().map(null).collect(Collectors.toSet());  allSubtypes.addAll(subtypes);  allSubtypes.addAll(statisticsResourceTypes);  MindmapsComputer computer=Mindmaps.factory(Mindmaps.DEFAULT_URI,keySpace).getGraphComputer();  ComputerResult result=computer.compute(new DegreeVertexProgram(allSubtypes),new SumMapReduce(statisticsResourceTypes,dataType));  Map<String,Number> max=result.memory().get(MindmapsMapReduce.MAP_REDUCE_MEMORY_KEY);  return Optional.of(max.get(SumMapReduce.MEMORY_KEY));}  }
class C{  public void addDeviceProperties(List<DeviceProperty> deviceProperties){  this.deviceProperties.addAll(deviceProperties);}  }
class C{  public static void fillAutoSaveList(ShoppingCart cart,LocalDispatcher dispatcher) throws GeneralException {  if (cart != null && dispatcher != null) {    GenericValue userLogin=ShoppingListEvents.getCartUserLogin(cart);    Delegator delegator=cart.getDelegator();    String autoSaveListId=cart.getAutoSaveListId();    if (autoSaveListId == null) {      autoSaveListId=getAutoSaveListId(delegator,dispatcher,null,userLogin,cart.getProductStoreId());      cart.setAutoSaveListId(autoSaveListId);    }    GenericValue shoppingList=EntityQuery.use(delegator).from("ShoppingList").where("shoppingListId",autoSaveListId).queryOne();    Integer currentListSize=0;    if (UtilValidate.isNotEmpty(shoppingList)) {      List<GenericValue> shoppingListItems=shoppingList.getRelated("ShoppingListItem",null,null,false);      if (UtilValidate.isNotEmpty(shoppingListItems)) {        currentListSize=shoppingListItems.size();      }    }    try {      String[] itemsArray=makeCartItemsArray(cart);      if (itemsArray != null && itemsArray.length != 0) {        addBulkFromCart(delegator,dispatcher,cart,userLogin,autoSaveListId,null,itemsArray,false,false);      } else       if (itemsArray.length == 0 && currentListSize != 0) {        clearListInfo(delegator,autoSaveListId);      }    } catch (    IllegalArgumentException e) {      throw new GeneralException(e.getMessage(),e);    }  }}  }
class C{  public void java_lang_Thread_currentThread(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getThreadObject());}  }
class C{  public static byte[] toByteArray(URL url) throws IOException {  URLConnection conn=url.openConnection();  try {    return IOUtils.toByteArray(conn);  }  finally {    close(conn);  }}  }
class C{  private void assignCoordinatesToNodes(boolean useWeights,PhyloTreeView view) throws NotOwnerException {  PhyloTree graph=(PhyloTree)view.getGraph();  if (graph.getNumberOfNodes() == 0)   return;  Node v=graph.getTaxon2Node(1);  view.setLocation(v,new Point2D.Float(0,0));  BitSet splitsInPath=new BitSet();  NodeSet nodesVisited=new NodeSet(graph);  assignCoordinatesToNodesRec(v,splitsInPath,nodesVisited,useWeights,view);}  }
class C{  private void handleReturnType(String desc){  Type ret=Type.getReturnType(desc);  if (ret.getSort() == Type.VOID) {    pop();  } else {    ByteCodeUtils.unbox(this,ret);  }}  }
class C{  public VideoGetCatalogSectionQuery(VkApiClient client,UserActor actor,String sectionId,String from){  super(client,"video.getCatalogSection",GetCatalogSectionResponse.class);  accessToken(actor.getAccessToken());  sectionId(sectionId);  from(from);}  }
class C{  public RenderPanelImpl(LayoutManager layout){  super(layout);}  }
class C{  public boolean containsValue(short val){  Object[] keys=_set;  short[] vals=_values;  for (int i=vals.length; i-- > 0; ) {    if (keys[i] != FREE && keys[i] != REMOVED && val == vals[i]) {      return true;    }  }  return false;}  }
class C{  private boolean hasOptionAllTracks(Object opt){  boolean allTracks=false;  if (opt instanceof Option1AType) {    Option1AType opt1A=(Option1AType)opt;    allTracks=opt1A.getTrack1() != null && opt1A.getTrack2() != null && opt1A.getTrack3() != null;  } else   if (opt instanceof Option2Type) {    Option2Type opt2=(Option2Type)opt;    allTracks=opt2.getTrack1() != null && opt2.getTrack2() != null && opt2.getTrack3() != null && opt2.getTrack4() != null && opt2.getTrack5() != null && opt2.getTrack6() != null && opt2.getTrack7() != null && opt2.getTrack8() != null;  } else   if (opt instanceof Option3Type) {    Option3Type opt3=(Option3Type)opt;    allTracks=opt3.getTrack1() != null && opt3.getTrack2() != null;  } else   if (opt instanceof Option4Type) {    Option4Type opt4=(Option4Type)opt;    allTracks=opt4.getTrack1() != null && opt4.getTrack2() != null && opt4.getTrack3() != null && opt4.getTrack4() != null && opt4.getTrack5() != null && opt4.getTrack6() != null && opt4.getTrack7() != null;  } else   if (opt instanceof Option5Type) {    Option5Type opt5=(Option5Type)opt;    allTracks=opt5.getTrack1() != null && opt5.getTrack2() != null;  } else   if (opt instanceof Option6Type) {    Option6Type opt6=(Option6Type)opt;    allTracks=opt6.getTrack1() != null;  } else {  }  return allTracks;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);}  }
class C{  private boolean onCheckCanLoadMore(){  return mLoadMoreEnabled && !canChildScrollDown() && mHasFooterView&& mLoadMoreTriggerOffset > 0;}  }
class C{  public static String searchRemoveFeature(HttpServletRequest request,HttpServletResponse response){  Delegator delegator=(Delegator)request.getAttribute("delegator");  Locale locale=UtilHttp.getLocale(request);  String productFeatureId=request.getParameter("productFeatureId");  try {    boolean beganTransaction=TransactionUtil.begin(DEFAULT_TX_TIMEOUT);    try {      EntityListIterator eli=getProductSearchResults(request);      if (eli == null) {        String errMsg=UtilProperties.getMessage(resource,"productsearchevents.no_results_found_probably_error_constraints",UtilHttp.getLocale(request));        request.setAttribute("_ERROR_MESSAGE_",errMsg);        return "error";      }      GenericValue searchResultView=null;      int numRemoved=0;      while ((searchResultView=eli.next()) != null) {        String productId=searchResultView.getString("mainProductId");        numRemoved+=delegator.removeByAnd("ProductFeatureAppl",UtilMisc.toMap("productId",productId,"productFeatureId",productFeatureId));      }      Map<String,Object> messageMap=UtilMisc.toMap("numRemoved",Integer.valueOf(numRemoved),"productFeatureId",productFeatureId);      String eventMsg=UtilProperties.getMessage(resource,"productSearchEvents.removed_param_features",messageMap,locale) + ".";      request.setAttribute("_EVENT_MESSAGE_",eventMsg);      eli.close();    } catch (    GenericEntityException e) {      String errorMsg=UtilProperties.getMessage(resource,"productSearchEvents.error_getting_results",locale) + " : " + e.toString();      request.setAttribute("_ERROR_MESSAGE_",errorMsg);      Debug.logError(e,errorMsg,module);      TransactionUtil.rollback(beganTransaction,errorMsg,e);      return "error";    } finally {      TransactionUtil.commit(beganTransaction);    }  } catch (  GenericTransactionException e) {    String errorMsg=UtilProperties.getMessage(resource,"productSearchEvents.error_getting_results",locale) + " : " + e.toString();    request.setAttribute("_ERROR_MESSAGE_",errorMsg);    Debug.logError(e,errorMsg,module);    return "error";  }  return "success";}  }
class C{  @Override public void scan(Reader r0,ScanHandler h) throws IOException, SAXException {  theState=S_PCDATA;  PushbackReader r;  if (r0 instanceof PushbackReader) {    r=(PushbackReader)r0;  } else   if (r0 instanceof BufferedReader) {    r=new PushbackReader(r0);  } else {    r=new PushbackReader(new BufferedReader(r0,200));  }  int firstChar=r.read();  if (firstChar != '\uFEFF')   unread(r,firstChar);  while (theState != S_DONE) {    int c1=r.read();    char c=(char)c1;    boolean is32BitChar=Character.isHighSurrogate(c);    int c2=is32BitChar ? r.read() : -1;    String s=is32BitChar ? new StringBuffer().append(c).append((char)c2).toString() : null;    if (!is32BitChar && c1 >= 0x80 && c1 <= 0x9F)     c1=theWinMap[c1 - 0x80];    if (!is32BitChar && c1 == '\r') {      c1=r.read();      if (c1 != '\n') {        unread(r,c1);        c1='\n';      }    }    if (!is32BitChar && c1 == '\n') {      theCurrentLine++;      theCurrentColumn=0;    } else {      theCurrentColumn++;    }    if (!!is32BitChar && !(c1 >= 0x20 || c1 == '\n' || c1 == '\t' || c1 == -1))     continue;    int action=0;    for (int i=0; i < statetable.length; i+=4) {      if (theState != statetable[i]) {        if (action != 0)         break;        continue;      }      if (statetable[i + 1] == 0) {        action=statetable[i + 2];        theNextState=statetable[i + 3];      } else       if (!is32BitChar && statetable[i + 1] == c1) {        action=statetable[i + 2];        theNextState=statetable[i + 3];        break;      }    }switch (action) {case 0:      throw new Error("HTMLScanner can't cope with " + Integer.toString(c1) + " in state "+ Integer.toString(theState));case A_ADUP:    h.adup(theOutputBuffer,0,theSize);  theSize=0;break;case A_ADUP_SAVE:h.adup(theOutputBuffer,0,theSize);theSize=0;if (s != null) save(s,c1,h);break;case A_ADUP_STAGC:h.adup(theOutputBuffer,0,theSize);theSize=0;h.stagc(theOutputBuffer,0,theSize);break;case A_ANAME:h.aname(theOutputBuffer,0,theSize);theSize=0;break;case A_ANAME_ADUP:h.aname(theOutputBuffer,0,theSize);theSize=0;h.adup(theOutputBuffer,0,theSize);break;case A_ANAME_ADUP_STAGC:h.aname(theOutputBuffer,0,theSize);theSize=0;h.adup(theOutputBuffer,0,theSize);h.stagc(theOutputBuffer,0,theSize);break;case A_AVAL:h.aval(theOutputBuffer,0,theSize);theSize=0;break;case A_AVAL_STAGC:h.aval(theOutputBuffer,0,theSize);theSize=0;h.stagc(theOutputBuffer,0,theSize);break;case A_CDATA:mark();if (theSize > 1) theSize-=2;h.pcdata(theOutputBuffer,0,theSize);theSize=0;break;case A_ENTITY_START:h.pcdata(theOutputBuffer,0,theSize);theSize=0;save(s,c1,h);break;case A_ENTITY:mark();if (theState == S_ENT && c == '#') {theNextState=S_NCR;save(s,c1,h);break;} else if (theState == S_NCR && (c == 'x' || c == 'X')) {theNextState=S_XNCR;save(s,c1,h);break;} else if (theState == S_ENT && Character.isLetterOrDigit(c)) {save(s,c1,h);break;} else if (theState == S_NCR && Character.isDigit(c)) {save(s,c1,h);break;} else if (theState == S_XNCR && (Character.isDigit(c) || "abcdefABCDEF".indexOf(c) != -1)) {save(s,c1,h);break;}h.entity(theOutputBuffer,1,theSize - 1);int ent=h.getEntity();if (ent != 0) {theSize=0;if (ent >= 0x80 && ent <= 0x9F) {ent=theWinMap[ent - 0x80];}if (ent < 0x20) {ent=0x20;} else if (ent >= 0xD800 && ent <= 0xDFFF) {ent=0;} else if (ent <= 0xFFFF) {save(ent,h);} else {ent-=0x10000;save((ent >> 10) + 0xD800,h);save((ent & 0x3FF) + 0xDC00,h);}if (is32BitChar || c1 != ';') {if (is32BitChar) {unread(r,c2);theCurrentColumn--;}unread(r,c1);theCurrentColumn--;}} else {if (is32BitChar) {unread(r,c2);theCurrentColumn--;}unread(r,c1);theCurrentColumn--;}theNextState=S_PCDATA;break;case A_ETAG:h.etag(theOutputBuffer,0,theSize);theSize=0;break;case A_DECL:h.decl(theOutputBuffer,0,theSize);theSize=0;break;case A_GI:h.gi(theOutputBuffer,0,theSize);theSize=0;break;case A_GI_STAGC:h.gi(theOutputBuffer,0,theSize);theSize=0;h.stagc(theOutputBuffer,0,theSize);break;case A_LT:mark();save('<',h);save(s,c1,h);break;case A_LT_PCDATA:mark();save('<',h);h.pcdata(theOutputBuffer,0,theSize);theSize=0;break;case A_PCDATA:mark();h.pcdata(theOutputBuffer,0,theSize);theSize=0;break;case A_CMNT:mark();h.cmnt(theOutputBuffer,0,theSize);theSize=0;break;case A_MINUS3:save('-',h);save(' ',h);break;case A_MINUS2:save('-',h);save(' ',h);case A_MINUS:save('-',h);save(s,c1,h);break;case A_PI:mark();h.pi(theOutputBuffer,0,theSize);theSize=0;break;case A_PITARGET:h.pitarget(theOutputBuffer,0,theSize);theSize=0;break;case A_PITARGET_PI:h.pitarget(theOutputBuffer,0,theSize);theSize=0;h.pi(theOutputBuffer,0,theSize);break;case A_SAVE:save(s,c1,h);break;case A_SKIP:break;case A_SP:save(' ',h);break;case A_STAGC:h.stagc(theOutputBuffer,0,theSize);theSize=0;break;case A_EMPTYTAG:mark();if (theSize > 0) h.gi(theOutputBuffer,0,theSize);theSize=0;h.stage(theOutputBuffer,0,theSize);break;case A_UNGET:unread(r,c1);theCurrentColumn--;break;case A_UNSAVE_PCDATA:if (theSize > 0) theSize--;h.pcdata(theOutputBuffer,0,theSize);theSize=0;break;default :throw new Error("Can't process state " + action);}theState=theNextState;}h.eof(theOutputBuffer,0,0);}  }
class C{  public SiteAdminPage waitForPageNotExists(String title){  bobcatWait.withTimeout(Timeouts.BIG).until(not(pageExists(title)),Timeouts.SMALL);  return this;}  }
class C{  public Vector3D applyTo(Vector3D u){  double x=u.getX();  double y=u.getY();  double z=u.getZ();  double s=q1 * x + q2 * y + q3 * z;  return new Vector3D(2 * (q0 * (x * q0 - (q2 * z - q3 * y)) + s * q1) - x,2 * (q0 * (y * q0 - (q3 * x - q1 * z)) + s * q2) - y,2 * (q0 * (z * q0 - (q1 * y - q2 * x)) + s * q3) - z);}  }
class C{  public String geom_dump_verbose(){  return soot.PhaseOptions.getString(options,"geom-dump-verbose");}  }
class C{  public AccountRegisterDeviceQuery systemVersion(String value){  return unsafeParam("system_version",value);}  }
class C{  private List<Integer> convertToList(int[] data){  Integer[] wrapperType=ArrayUtils.toObject(data);  return Arrays.asList(wrapperType);}  }
class C{  public HTTPTokener(String s){  super(s);}  }
class C{  public int callNative(String instanceId,String tasks,String callback){  if (TextUtils.isEmpty(tasks)) {    if (WXEnvironment.isApkDebugable()) {      WXLogUtils.e("[WXBridgeManager] callNative: call Native tasks is null");    }    return INSTANCE_RENDERING_ERROR;  }  if (WXEnvironment.isApkDebugable()) {    mLodBuilder.append("[WXBridgeManager] callNative >>>> instanceId:").append(instanceId).append(", tasks:").append(tasks).append(", callback:").append(callback);    WXLogUtils.d(mLodBuilder.substring(0));    mLodBuilder.setLength(0);  }  if (mDestroyedInstanceId != null && mDestroyedInstanceId.contains(instanceId)) {    return DESTROY_INSTANCE;  }  long start=System.currentTimeMillis();  JSONArray array=JSON.parseArray(tasks);  if (WXSDKManager.getInstance().getSDKInstance(instanceId) != null) {    WXSDKManager.getInstance().getSDKInstance(instanceId).jsonParseTime(System.currentTimeMillis() - start);  }  int size=array.size();  if (size > 0) {    try {      JSONObject task;      for (int i=0; i < size; ++i) {        task=(JSONObject)array.get(i);        if (task != null && WXSDKManager.getInstance().getSDKInstance(instanceId) != null) {          if (TextUtils.equals(WXDomModule.WXDOM,(String)task.get(WXDomModule.MODULE))) {            sDomModule=getDomModule(instanceId);            sDomModule.callDomMethod(task);          } else {            WXModuleManager.callModuleMethod(instanceId,(String)task.get(WXDomModule.MODULE),(String)task.get(WXDomModule.METHOD),(JSONArray)task.get(WXDomModule.ARGS));          }        }      }    } catch (    Exception e) {      WXLogUtils.e("[WXBridgeManager] callNative exception: ",e);    }  }  if (UNDEFINED.equals(callback)) {    return INSTANCE_RENDERING_ERROR;  }  getNextTick(instanceId,callback);  return INSTANCE_RENDERING;}  }
class C{  public HTTPInputSource(String publicId,String systemId,String baseSystemId,InputStream byteStream,String encoding){  super(publicId,systemId,baseSystemId,byteStream,encoding);}  }
class C{  public void prePaint(Display d,Graphics2D g){  AffineTransform at=g.getTransform();  boolean translate=isTranslation(at);  if (m_fixed || translate) {    int tx=m_fixed ? 0 : (int)at.getTranslateX();    int ty=m_fixed ? 0 : (int)at.getTranslateY();    g.setTransform(getIdentity());    if (m_tiled) {      int w=d.getWidth(), iw=m_img.getWidth(null);      int h=d.getHeight(), ih=m_img.getHeight(null);      int sx=m_fixed ? 0 : tx % iw;      int sy=m_fixed ? 0 : ty % ih;      if (sx > 0)       sx-=iw;      if (sy > 0)       sy-=ih;      for (int x=sx; x < w - sx; x+=iw) {        for (int y=sy; y < h - sy; y+=ih)         g.drawImage(m_img,x,y,null);      }    } else {      g.drawImage(m_img,tx,ty,null);    }    g.setTransform(at);  } else {    if (m_tiled) {      int iw=m_img.getWidth(null);      int ih=m_img.getHeight(null);      Clip c=getClip();      c.setClip(0,0,d.getWidth(),d.getHeight());      c.transform(d.getInverseTransform());      int w=(int)Math.ceil(c.getWidth());      int h=(int)Math.ceil(c.getHeight());      int tx=(int)c.getMinX();      int ty=(int)c.getMinY();      int dw=tx % iw + iw;      int dh=ty % ih + ih;      tx-=dw;      w+=dw;      ty-=dh;      h+=dh;      for (int x=tx; x < tx + w; x+=iw) {        for (int y=ty; y < ty + h; y+=ih)         g.drawImage(m_img,x,y,null);      }    } else {      g.drawImage(m_img,0,0,null);    }  }}  }
class C{  @Override public Data read(@Nonnull final URL url,@Nonnull final Charset charset){  Check.notNull(url,"url");  Check.notNull(charset,"charset");  Data data=Data.EMPTY;  try {    data=readXml(UrlUtil.open(url),charset);  } catch (  final CanNotOpenStreamException e) {    LOG.warn(e.getLocalizedMessage());  }  return data;}  }
class C{  public static void main(String[] args){  if (args.length < 1) {    System.err.println("Usage: HTTPDStatus URL1 [URL2 ... URLN]");    return;  }  for (int i=0; i < args.length; i++) {    httpdWarning(args[i]);  }}  }
class C{  public ConcurrentSuite(final Class<?> type) throws InitializationError {  super(type,new ConcurrentRunnerBuilder(true));  Modules annotation=type.getAnnotation(Modules.class);  Class<? extends Module> moduleFromAnnotation=annotation.value()[0];  Injector injector=InjectorsMap.INSTANCE.forModule(moduleFromAnnotation);  Properties properties=injector.getInstance(Properties.class);  ReportingHandler reportingHandler=injector.getInstance(ReportingHandler.class);  WebDriverRegistry webDriverRegistry=injector.getInstance(WebDriverRegistry.class);  new Thread(reportingHandler).start();  setScheduler(new ConcurrentSuiteRunnerScheduler(type,properties,reportingHandler,webDriverRegistry));}  }
class C{  Version readVersion() throws FormatException {  if (parsedVersion != null) {    return parsedVersion;  }  int dimension=bitMatrix.getHeight();  int provisionalVersion=(dimension - 17) / 4;  if (provisionalVersion <= 6) {    return Version.getVersionForNumber(provisionalVersion);  }  int versionBits=0;  int ijMin=dimension - 11;  for (int j=5; j >= 0; j--) {    for (int i=dimension - 9; i >= ijMin; i--) {      versionBits=copyBit(i,j,versionBits);    }  }  Version theParsedVersion=Version.decodeVersionInformation(versionBits);  if (theParsedVersion != null && theParsedVersion.getDimensionForVersion() == dimension) {    parsedVersion=theParsedVersion;    return theParsedVersion;  }  versionBits=0;  for (int i=5; i >= 0; i--) {    for (int j=dimension - 9; j >= ijMin; j--) {      versionBits=copyBit(i,j,versionBits);    }  }  theParsedVersion=Version.decodeVersionInformation(versionBits);  if (theParsedVersion != null && theParsedVersion.getDimensionForVersion() == dimension) {    parsedVersion=theParsedVersion;    return theParsedVersion;  }  throw FormatException.getFormatInstance();}  }
class C{  public Complex solve(Complex coefficients[],Complex initial) throws MathIllegalArgumentException, NullArgumentException, MathIllegalStateException {  if (coefficients == null) {    throw new NullArgumentException();  }  final int n=coefficients.length - 1;  if (n == 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.POLYNOMIAL);  }  final double absoluteAccuracy=getAbsoluteAccuracy();  final double relativeAccuracy=getRelativeAccuracy();  final double functionValueAccuracy=getFunctionValueAccuracy();  final Complex nC=new Complex(n,0);  final Complex n1C=new Complex(n - 1,0);  Complex z=initial;  Complex oldz=new Complex(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);  while (true) {    Complex pv=coefficients[n];    Complex dv=Complex.ZERO;    Complex d2v=Complex.ZERO;    for (int j=n - 1; j >= 0; j--) {      d2v=dv.add(z.multiply(d2v));      dv=pv.add(z.multiply(dv));      pv=coefficients[j].add(z.multiply(pv));    }    d2v=d2v.multiply(new Complex(2.0,0.0));    final double tolerance=FastMath.max(relativeAccuracy * z.abs(),absoluteAccuracy);    if ((z.subtract(oldz)).abs() <= tolerance) {      return z;    }    if (pv.abs() <= functionValueAccuracy) {      return z;    }    final Complex G=dv.divide(pv);    final Complex G2=G.multiply(G);    final Complex H=G2.subtract(d2v.divide(pv));    final Complex delta=n1C.multiply((nC.multiply(H)).subtract(G2));    final Complex deltaSqrt=delta.sqrt();    final Complex dplus=G.add(deltaSqrt);    final Complex dminus=G.subtract(deltaSqrt);    final Complex denominator=dplus.abs() > dminus.abs() ? dplus : dminus;    if (denominator.equals(new Complex(0.0,0.0))) {      z=z.add(new Complex(absoluteAccuracy,absoluteAccuracy));      oldz=new Complex(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);    } else {      oldz=z;      z=z.subtract(nC.divide(denominator));    }    incrementEvaluationCount();  }}  }
class C{  public void applyData(SLDEditorInterface application){  for (  ScaleSLDData data : scaleList) {    if (data.isMinimumScaleUpdated() || data.isMaximumScaleUpdated()) {      if (sldWriter == null) {        sldWriter=SLDWriterFactory.createWriter(null);      }      data.updateScales(sldWriter);      if (application != null) {        application.saveSLDData(data.getSldData());      }    }  }  this.fireTableDataChanged();}  }
class C{  private void removeJointAction(){  TreePath path=this.tree.getSelectionPath();  if (path != null) {    DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();    if (node.getUserObject() instanceof Joint) {      Joint joint=(Joint)node.getUserObject();      int choice=JOptionPane.showConfirmDialog(ControlUtilities.getParentWindow(this),MessageFormat.format(Messages.getString("menu.context.joint.remove.warning"),joint.getUserData()),Messages.getString("menu.context.joint.remove.warning.title"),JOptionPane.YES_NO_CANCEL_OPTION);      if (choice == JOptionPane.YES_OPTION) {synchronized (Simulation.LOCK) {          this.simulation.getWorld().removeJoint(joint);        }        this.model.removeNodeFromParent(node);      }    }  }}  }
class C{  protected AdsCreateCampaignsQuery accountId(int value){  return unsafeParam("account_id",value);}  }
class C{  public AudioGetAlbumsQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public Cigar decode(final String textCigar){  if ("*".equals(textCigar)) {    return new Cigar();  }  final Cigar ret=new Cigar();  final byte[] cigarBytes=textCigar.getBytes();  for (int i=0; i < cigarBytes.length; ++i) {    if (!isDigit(cigarBytes[i])) {      throw new IllegalArgumentException("Malformed CIGAR string: " + textCigar);    }    int length=(cigarBytes[i] - ZERO_BYTE);    for (++i; isDigit(cigarBytes[i]); ++i) {      length=(length * 10) + cigarBytes[i] - ZERO_BYTE;    }    final CigarOperator operator=CigarOperator.characterToEnum(cigarBytes[i]);    ret.add(new CigarElement(length,operator));  }  return ret;}  }
class C{  @Override public String toString(){  StringBuilder qualityStatusStr=new StringBuilder();  final String separator="+";  try {    getLock().readLock().lock();    if (invalidQualityStates.isEmpty()) {      qualityStatusStr.append(VALID_DESCR);    } else {      boolean firstInsert=true;      for (      TagQualityStatus status : invalidQualityStates.keySet()) {        if (!firstInsert) {          qualityStatusStr.append(separator);        }        qualityStatusStr.append(status);        firstInsert=false;      }    }  }  finally {    getLock().readLock().unlock();  }  return qualityStatusStr.toString();}  }
class C{  private void vmove(int from,int to){  double d1;  double d2;  double X;  double d1new;  double d2new;  double cbar;  double sbar;  double Y;  int first;  int inc;  int m1;  int m2;  int mp1;  int pos;  boolean bSkipTo40=false;  if (from == to) {    return;  }  if (!this.rss_set) {    ss();  }  int count=0;  if (from < to) {    first=from;    inc=1;    count=to - from;  } else {    first=from - 1;    inc=-1;    count=from - to;  }  int m=first;  int idx=0;  while (idx < count) {    m1=m * (nvars + nvars - m - 1) / 2;    m2=m1 + nvars - m - 1;    mp1=m + 1;    d1=d[m];    d2=d[mp1];    if (d1 > this.epsilon || d2 > this.epsilon) {      X=r[m1];      if (FastMath.abs(X) * FastMath.sqrt(d1) < tol[mp1]) {        X=0.0;      }      if (d1 < this.epsilon || FastMath.abs(X) < this.epsilon) {        d[m]=d2;        d[mp1]=d1;        r[m1]=0.0;        for (int col=m + 2; col < nvars; col++) {          ++m1;          X=r[m1];          r[m1]=r[m2];          r[m2]=X;          ++m2;        }        X=rhs[m];        rhs[m]=rhs[mp1];        rhs[mp1]=X;        bSkipTo40=true;      } else       if (d2 < this.epsilon) {        d[m]=d1 * X * X;        r[m1]=1.0 / X;        for (int _i=m1 + 1; _i < m1 + nvars - m - 1; _i++) {          r[_i]/=X;        }        rhs[m]/=X;        bSkipTo40=true;      }      if (!bSkipTo40) {        d1new=d2 + d1 * X * X;        cbar=d2 / d1new;        sbar=X * d1 / d1new;        d2new=d1 * cbar;        d[m]=d1new;        d[mp1]=d2new;        r[m1]=sbar;        for (int col=m + 2; col < nvars; col++) {          ++m1;          Y=r[m1];          r[m1]=cbar * r[m2] + sbar * Y;          r[m2]=Y - X * r[m2];          ++m2;        }        Y=rhs[m];        rhs[m]=cbar * rhs[mp1] + sbar * Y;        rhs[mp1]=Y - X * rhs[mp1];      }    }    if (m > 0) {      pos=m;      for (int row=0; row < m; row++) {        X=r[pos];        r[pos]=r[pos - 1];        r[pos - 1]=X;        pos+=nvars - row - 2;      }    }    m1=vorder[m];    vorder[m]=vorder[mp1];    vorder[mp1]=m1;    X=tol[m];    tol[m]=tol[mp1];    tol[mp1]=X;    rss[m]=rss[mp1] + d[mp1] * rhs[mp1] * rhs[mp1];    m+=inc;    ++idx;  }}  }
class C{  public boolean equals(Object obj){  if (obj == null)   return false;  if (this == obj)   return true;  if (!(obj instanceof SharedActivationPolicyPermission))   return false;  SharedActivationPolicyPermission other=(SharedActivationPolicyPermission)obj;  boolean answer=policyPermission.equals(other.policyPermission);  if (DEBUG) {    System.out.println("SharedActivationPolicyPermission::equals() - " + "checking " + policyPermission + " vs. "+ other.policyPermission+ ": "+ answer);  }  return answer;}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public void addParameter(FilterNameParameter parameter){  parameterList.add(parameter);}  }
class C{  public String toString(int indentFactor) throws JSONException {  StringWriter sw=new StringWriter();synchronized (sw.getBuffer()) {    return this.write(sw,indentFactor,0).toString();  }}  }
class C{  public void mouseWheelMoved(MouseWheelEvent event){switch (event.getScrollType()) {case (MouseWheelEvent.WHEEL_BLOCK_SCROLL):{      charMap4.getGridScroll().setValue(charMap4.getGridScroll().getValue() + (event.getWheelRotation() * charMap4.getGridScroll().getBlockIncrement()));    }  break;case (MouseWheelEvent.WHEEL_UNIT_SCROLL):{  int i=charMap4.getGridScroll().getBlockIncrement();  i=Math.max((-i),Math.min(i,event.getUnitsToScroll()));  charMap4.getGridScroll().setValue(charMap4.getGridScroll().getValue() + i);}break;default :break;}}  }
class C{  public double initializeStep(final boolean forward,final int order,final double[] scale,final ODEStateAndDerivative state0,final EquationsMapper mapper) throws MathIllegalArgumentException, MathIllegalStateException {  if (initialStep > 0) {    return forward ? initialStep : -initialStep;  }  final double[] y0=state0.getCompleteState();  final double[] yDot0=state0.getCompleteDerivative();  double yOnScale2=0;  double yDotOnScale2=0;  for (int j=0; j < scale.length; ++j) {    final double ratio=y0[j] / scale[j];    yOnScale2+=ratio * ratio;    final double ratioDot=yDot0[j] / scale[j];    yDotOnScale2+=ratioDot * ratioDot;  }  double h=((yOnScale2 < 1.0e-10) || (yDotOnScale2 < 1.0e-10)) ? 1.0e-6 : (0.01 * FastMath.sqrt(yOnScale2 / yDotOnScale2));  if (!forward) {    h=-h;  }  final double[] y1=new double[y0.length];  for (int j=0; j < y0.length; ++j) {    y1[j]=y0[j] + h * yDot0[j];  }  final double[] yDot1=computeDerivatives(state0.getTime() + h,y1);  double yDDotOnScale=0;  for (int j=0; j < scale.length; ++j) {    final double ratioDotDot=(yDot1[j] - yDot0[j]) / scale[j];    yDDotOnScale+=ratioDotDot * ratioDotDot;  }  yDDotOnScale=FastMath.sqrt(yDDotOnScale) / h;  final double maxInv2=FastMath.max(FastMath.sqrt(yDotOnScale2),yDDotOnScale);  final double h1=(maxInv2 < 1.0e-15) ? FastMath.max(1.0e-6,0.001 * FastMath.abs(h)) : FastMath.pow(0.01 / maxInv2,1.0 / order);  h=FastMath.min(100.0 * FastMath.abs(h),h1);  h=FastMath.max(h,1.0e-12 * FastMath.abs(state0.getTime()));  if (h < getMinStep()) {    h=getMinStep();  }  if (h > getMaxStep()) {    h=getMaxStep();  }  if (!forward) {    h=-h;  }  return h;}  }
class C{  public void onFinish(){}  }
class C{  private void updateView(){  if (rebuildItems()) {    calculateLayoutWidth(getWidth(),MeasureSpec.EXACTLY);    layout(getWidth(),getHeight());  }}  }
class C{  private void trigger(int position,float positionOffset){  CircleIndicator.this.mCurItemPosition=position;  CircleIndicator.this.mCurItemPositionOffset=positionOffset;  requestLayout();  invalidate();}  }
class C{  public static double[] logs2probs(double[] a){  double max=a[maxIndex(a)];  double sum=0.0;  double[] result=new double[a.length];  for (int i=0; i < a.length; i++) {    result[i]=Math.exp(a[i] - max);    sum+=result[i];  }  normalize(result,sum);  return result;}  }
class C{  public static List<String> split(String input) throws IllegalArgumentException {  try {    String[] result=defaultReader.readValue(input);    String[] raw=rawReader.readValue(input);    for (    String item : raw) {      if (item.trim().isEmpty()) {        String msg=String.format(PARSING_FAILURE_UNQOUTED_VALUES_FORMAT,input);        throw new IllegalArgumentException(msg);      }    }    return Arrays.asList(result);  } catch (  IOException ioe) {    String msg=String.format(PARSING_FAILURE,input);    throw new IllegalArgumentException(msg,ioe);  }}  }
class C{  private void sendAfterTextChanged(Editable s){  if (mListeners != null) {    for (int i=0; i < mListeners.size(); i++) {      mListeners.get(i).afterTextChanged(s);    }  }}  }
class C{  private void createDo2(polyglot.ast.Do doStmt){  soot.jimple.Stmt noop1=soot.jimple.Jimple.v().newNopStmt();  body.getUnits().add(noop1);  endControlNoop.push(soot.jimple.Jimple.v().newNopStmt());  condControlNoop.push(soot.jimple.Jimple.v().newNopStmt());  createStmt(doStmt.body());  soot.jimple.Stmt continueStmt=condControlNoop.pop();  body.getUnits().add(continueStmt);  condControlNoop.push(continueStmt);  if (labelMap != null && labelMap.containsKey(doStmt)) {    body.getUnits().add(labelMap.get(doStmt));  }  polyglot.ast.Expr condition=doStmt.cond();  createBranchingExpr(condition,noop1,true);  body.getUnits().add((endControlNoop.pop()));  condControlNoop.pop();}  }
class C{  public void moveFiles(Collection<OCFile> files,OCFile targetFolder){  for (  OCFile file : files) {    Intent service=new Intent(mFileActivity,OperationsService.class);    service.setAction(OperationsService.ACTION_MOVE_FILE);    service.putExtra(OperationsService.EXTRA_NEW_PARENT_PATH,targetFolder.getRemotePath());    service.putExtra(OperationsService.EXTRA_REMOTE_PATH,file.getRemotePath());    service.putExtra(OperationsService.EXTRA_ACCOUNT,mFileActivity.getAccount());    mWaitingForOpId=mFileActivity.getOperationsServiceBinder().queueNewOperation(service);  }  mFileActivity.showLoadingDialog(mFileActivity.getString(R.string.wait_a_moment));}  }
class C{  private void buildViewForMeasuring(){  if (itemsLayout != null) {    recycle.recycleItems(itemsLayout,firstItem,new ItemsRange());  } else {    createItemsLayout();  }  int addItems=visibleItems / 2;  for (int i=currentItem + addItems; i >= currentItem - addItems; i--) {    if (addViewItem(i,true)) {      firstItem=i;    }  }}  }
class C{  public MessagesEditChatQuery editChat(UserActor actor,int chatId,String title){  return new MessagesEditChatQuery(getClient(),actor,chatId,title);}  }
class C{  public VendorOptionVersion(Class<?> classType,VersionData version){  this.classType=classType;  this.minimumVersion=version;  this.maximumVersion=version;}  }
class C{  private boolean isDerivedByList(String ancestorNS,String ancestorName,XSTypeDefinition type){  if (type != null && ((XSSimpleTypeDefinition)type).getVariety() == VARIETY_LIST) {    XSTypeDefinition itemType=((XSSimpleTypeDefinition)type).getItemType();    if (itemType != null) {      if (isDerivedByRestriction(ancestorNS,ancestorName,itemType)) {        return true;      }    }  }  return false;}  }
class C{  public DependencyGraph(Sentence sentence,List<Dependency> arcs){  this.sentence=sentence;  int n=sentence.length();  this.heads=new Integer[n];  this.labels=new String[n];  for (int i=0; i < n; i++) {    heads[i]=-1;    labels[i]="root";  }  for (  Dependency arc : arcs) {    int u=arc.getHead();    int v=arc.getDependent();    heads[v]=u;    labels[v]=arc.getType().substring(3);  }}  }
class C{  public HumanTime y(){  return y(1);}  }
class C{  public static String keyForImage(String imagePath){  String key=null;  try {    MessageDigest messageDigest=MessageDigest.getInstance("md5");    messageDigest.update(imagePath.getBytes());    key=byteToHex(messageDigest.digest());  } catch (  NoSuchAlgorithmException e) {    e.printStackTrace();  }  return key;}  }
class C{  private <T>UnaryOperator<T> chainOperators(Stream<UnaryOperator<T>> operators){  return operators.reduce(UnaryOperator.identity(),null);}  }
class C{  public JobManagerException(String msg){  super(msg);}  }
class C{  public void put(String key,Bitmap data){  if ((data == null) || (key == null))   return;synchronized (mLinkedHashMap) {    if (mLinkedHashMap.get(key) == null) {      try {        final String file=createFilePath(mCacheDir,key);        if (writeBitmapToFile(data,file)) {          put(key,file);          flushCache();        }      } catch (      final FileNotFoundException e) {        Log.e(TAG,"Error in put: " + e.getMessage());      }catch (      final IOException e) {        Log.e(TAG,"Error in put: " + e.getMessage());      }    }  }}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public PreDecExpr fullCopy(){  PreDecExpr tree=(PreDecExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public DatatypeConfigurationException(String message){  super(message);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return SEQUENCE_ID;case 2:  return STATUS;case 3:return MESSAGE;default :return null;}}  }
class C{  @Override public synchronized void write(byte[] b,int off,int len) throws IOException {  super.write(b,off,len);  this.branch.write(b,off,len);}  }
class C{  public synchronized Vertex locateVertex(String sVertexLabel){  return (Vertex)UniqueVertices.get(sVertexLabel);}  }
class C{  @Override public void applyInline(double[] buf,int off,int len){  for (int i=off; i < off + len; i++) {    buf[i]=buf[i] * buf[i];    assert buf[i] >= 0;  }}  }
class C{  public VideoReorderAlbumsQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public int max_container_size(){  return soot.PhaseOptions.getInt(options,"max-container-size");}  }
class C{  public boolean canSetInt(){  return canSet(int.class);}  }
class C{  public void insertEntry(Context context,IEntryHolder entryHolder,boolean shouldReplicate,boolean origin,boolean suppliedUid) throws SAException, EntryAlreadyInSpaceException {  validateEntryCanBeWrittenToCache(entryHolder);  final TypeData typeData=_typeDataMap.get(entryHolder.getServerTypeDesc());  if (entryHolder.getXidOriginatedTransaction() != null) {    entryHolder.setMaybeUnderXtn(true);    entryHolder.setWriteLockOwnerAndOperation(entryHolder.getXidOriginated(),SpaceOperations.WRITE,false);  }  if (entryHolder.getXidOriginated() != null)   entryHolder.getXidOriginated().setOperatedUpon();  IEntryCacheInfo pE=null;  pE=insertEntryToCache(context,entryHolder,true,typeData,true);  if (pE == _entryAlreadyInSpaceIndication) {    throw new EntryAlreadyInSpaceException(entryHolder.getUID(),entryHolder.getClassName());  }  if (entryHolder.getXidOriginatedTransaction() == null) {    try {      if (entryHolder.isOffHeapEntry() && isDirectPersistencyEmbeddedtHandlerUsed() && context.isActiveBlobStoreBulk())       context.setForBulkInsert(entryHolder);      _storageAdapter.insertEntry(context,entryHolder,origin,shouldReplicate);      if (shouldReplicate && !context.isDelayedReplicationForbulkOpUsed())       handleInsertEntryReplication(context,entryHolder);    } catch (    SAException ex) {      removeEntryFromCache(entryHolder);      context.resetRecentFifoObject();      throw ex;    }  }}  }
class C{  protected RenameOperation(){  super();}  }
class C{  public String makeServiceCall(String url,int method){  return this.makeServiceCall(url,method,null);}  }
class C{  private void addRayAction(){  SandboxRay ray=AddRayDialog.show(ControlUtilities.getParentWindow(this));  if (ray != null) {synchronized (Simulation.LOCK) {      this.simulation.getRays().add(ray);    }    DefaultMutableTreeNode rayNode=new DefaultMutableTreeNode(ray);    this.model.insertNodeInto(rayNode,this.rayFolder,this.rayFolder.getChildCount());    this.tree.expandPath(new TreePath(rayNode.getPath()).getParentPath());  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DPTransfer_ME_TO_SELF(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200359,num0,skillname);}  }
class C{  public void updatePassword(String username,String password,String newPassword) throws AuthenticatorException {  Debug.logInfo(this.getClass().getName() + " Authenticator updatePassword()",module);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_LOOT_PAUSE_END_ME(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1390190,value0,value1);}  }
class C{  private void storeLegionAnnouncements(Legion legion){  for (int i=0; i < (legion.getAnnouncementList().size() - 7); i++) {    removeAnnouncement(legion.getLegionId(),legion.getAnnouncementList().firstEntry().getKey());    legion.removeFirstEntry();  }}  }
class C{  public static void assertion(boolean expression,String errorMessage){  if (!expression) {    throw new UnsupportedOperationException("Error in " + NAME + " "+ VERSION+ ": "+ errorMessage);  }}  }
class C{  public void onClearSignedInUser(){  mNotificationController.cancelNotification(NotificationConstants.NOTIFICATION_ID_SIGNED_IN);}  }
class C{  private Comparable<? super K> comparable(Object key) throws ClassCastException {  if (key == null)   throw new NullPointerException();  if (comparator != null)   return new ComparableUsingComparator<K>((K)key,comparator); else   return (Comparable<? super K>)key;}  }
class C{  @Override public void json(String json){  if (TextUtils.isEmpty(json)) {    d("Empty/Null json content");    return;  }  try {    json=json.trim();    if (json.startsWith("{")) {      JSONObject jsonObject=new JSONObject(json);      String message=jsonObject.toString(JSON_INDENT);      d(message);      return;    }    if (json.startsWith("[")) {      JSONArray jsonArray=new JSONArray(json);      String message=jsonArray.toString(JSON_INDENT);      d(message);    }  } catch (  JSONException e) {    e(e.getCause().getMessage() + "\n" + json);  }}  }
class C{  boolean showPermissionBlockedMessage(Context context){  return !enabledForChrome(context) || !enabledGlobally();}  }
class C{  public Expression not(Expression exp){  throw new RuntimeException("Unsupported operation.");}  }
class C{  private static boolean equal(Object o1,Object o2){  if (o1 == o2)   return true;  if (o1 == null || o2 == null)   return false;  Class c=o1.getClass();  if (c == String.class || c == Integer.class || c == Boolean.class || c == Character.class || c == Long.class || c == Float.class || c == Double.class || c == Byte.class || c == Short.class)   return o1.equals(o2);  try {    return new MarshalledObject(o1).equals(new MarshalledObject(o2));  } catch (  IOException ex) {    throw new IllegalArgumentException("unexpected IOException");  }}  }
class C{  @Override @SuppressWarnings("unchecked") public EquipmentCacheObject clone(){  EquipmentCacheObject equipmentCacheObject=(EquipmentCacheObject)super.clone();  equipmentCacheObject.commandTagIds=(LinkedList<Long>)this.commandTagIds.clone();  equipmentCacheObject.subEquipmentIds=(LinkedList<Long>)this.subEquipmentIds.clone();  return equipmentCacheObject;}  }
class C{  public void addSystemPropParameter(String key,String value){  if (key == null || value == null)   throw new IllegalArgumentException("Illegal system property argument for key: [" + key + "] value: ["+ value+ "]");  _systemProp.put(key,value);}  }
class C{  public String toString(){  return (digits(mostSig >> 32,8) + "-" + digits(mostSig >> 16,4)+ "-"+ digits(mostSig,4)+ "-"+ digits(leastSig >> 48,4)+ "-"+ digits(leastSig,12));}  }
class C{  public static void recordAction(int action){  assert action >= 0;  assert action < NUM_ACTIONS;switch (action) {case ACTION_OPENED_MOST_VISITED_ENTRY:    RecordUserAction.record("MobileNTPMostVisited");  break;case ACTION_OPENED_RECENTLY_CLOSED_ENTRY:RecordUserAction.record("MobileNTPRecentlyClosed");break;case ACTION_OPENED_BOOKMARK:RecordUserAction.record("MobileNTPBookmark");break;case ACTION_OPENED_FOREIGN_SESSION:RecordUserAction.record("MobileNTPForeignSession");break;default :break;}RecordHistogram.recordEnumeratedHistogram("NewTabPage.ActionAndroid",action,NUM_ACTIONS);}  }
class C{  @NotNull public UpdateFaceToPersonAction updatePersonFace(@NotNull String personGroupId,@NotNull String personId,@NotNull String persistedFaceId,@Nullable String userData){  Validation.validate(personGroupId,"^[a-z0-9_-]{1,64}$",new ParameterValidationException("personGroupId","Person group ID is invalid. Valid format should be a string composed by numbers, english letters in lower case, '-', '_', and no longer than 64 characters."));  Validation.validate(userData,1,new ParameterValidationException("userData","User-specified data for any purpose. The maximum length is 1KB."));  return new UpdateFaceToPersonAction(cognitiveContext,personGroupId,personId,persistedFaceId,userData);}  }
class C{  public boolean remove(JobStatus jobStatus){  boolean removed=mJobSet.remove(jobStatus);  if (!removed) {    if (DEBUG) {    }    return false;  }  if (jobStatus.isPersisted()) {    maybeWriteStatusToDiskAsync();  }  return removed;}  }
class C{  private String printXFormat(short x){  String sx=null;  if (x == Short.MIN_VALUE)   sx="8000"; else   if (x < 0) {    String t;    if (x == Short.MIN_VALUE)     t="0"; else {      t=Integer.toString((~(-x - 1)) ^ Short.MIN_VALUE,16);      if (t.charAt(0) == 'F' || t.charAt(0) == 'f')       t=t.substring(16,32);    }switch (t.length()) {case 1:      sx="800" + t;    break;case 2:  sx="80" + t;break;case 3:sx="8" + t;break;case 4:switch (t.charAt(0)) {case '1':sx="9" + t.substring(1,4);break;case '2':sx="a" + t.substring(1,4);break;case '3':sx="b" + t.substring(1,4);break;case '4':sx="c" + t.substring(1,4);break;case '5':sx="d" + t.substring(1,4);break;case '6':sx="e" + t.substring(1,4);break;case '7':sx="f" + t.substring(1,4);break;}break;}} else sx=Integer.toString(x,16);return printXFormat(sx);}  }
class C{  public void enableTabSwiping(boolean enable){  mEnableTabSwiping=TAB_SWIPING_ENABLED && enable;}  }
class C{  public void insertAfter(Unit toInsert,Unit point){  if (point == mTail)   mTail=toInsert;  Chain<Unit> methodBody=mBody.getUnits();  methodBody.insertAfter(toInsert,point);}  }
class C{  @Deprecated public CatchPokemonResponse catchPokemon(MapPokemon catchablePokemon,double normalizedHitPosition,double normalizedReticleSize,double spinModifier,ItemId pokeball) throws LoginFailedException, RemoteServerException {  CatchPokemonMessage reqMsg=CatchPokemonMessage.newBuilder().setEncounterId(catchablePokemon.getEncounterId()).setHitPokemon(true).setNormalizedHitPosition(normalizedHitPosition).setNormalizedReticleSize(normalizedReticleSize).setSpawnPointId(catchablePokemon.getSpawnPointId()).setSpinModifier(spinModifier).setPokeball(pokeball).build();  ServerRequest serverRequest=new ServerRequest(RequestType.CATCH_POKEMON,reqMsg);  api.getRequestHandler().sendServerRequests(serverRequest);  CatchPokemonResponse response;  try {    response=CatchPokemonResponse.parseFrom(serverRequest.getData());  } catch (  InvalidProtocolBufferException e) {    throw new RemoteServerException(e);  }  return response;}  }
class C{  public EntityUpdate(Entity entity){  this.entity=entity;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_NOT_LEARNED(String value0){  return new SM_SYSTEM_MESSAGE(1300020,value0);}  }
class C{  private void tryScrollBackToTopWhileLoading(){  tryScrollBackToTop();}  }
class C{  protected boolean readAttributes(DataInputStream d,int attributes_count,attribute_info[] ai) throws IOException {  attribute_info a=null;  int i;  int j;  long len;  String s;  for (i=0; i < attributes_count; i++) {    j=d.readUnsignedShort();    len=d.readInt() & 0xFFFFFFFFL;    s=((CONSTANT_Utf8_info)(constant_pool[j])).convert();    if (s.compareTo(attribute_info.SourceFile) == 0) {      SourceFile_attribute sa=new SourceFile_attribute();      sa.sourcefile_index=d.readUnsignedShort();      a=(attribute_info)sa;    } else     if (s.compareTo(attribute_info.ConstantValue) == 0) {      ConstantValue_attribute ca=new ConstantValue_attribute();      ca.constantvalue_index=d.readUnsignedShort();      a=(attribute_info)ca;    } else     if (s.compareTo(attribute_info.Code) == 0) {      Code_attribute ca=new Code_attribute();      ca.max_stack=d.readUnsignedShort();      ca.max_locals=d.readUnsignedShort();      ca.code_length=d.readInt() & 0xFFFFFFFFL;      ca.code=new byte[(int)ca.code_length];      readAllBytes(ca.code,d);      ca.exception_table_length=d.readUnsignedShort();      ca.exception_table=new exception_table_entry[ca.exception_table_length];      int k;      exception_table_entry e;      for (k=0; k < ca.exception_table_length; k++) {        e=new exception_table_entry();        e.start_pc=d.readUnsignedShort();        e.end_pc=d.readUnsignedShort();        e.handler_pc=d.readUnsignedShort();        e.catch_type=d.readUnsignedShort();        ca.exception_table[k]=e;      }      ca.attributes_count=d.readUnsignedShort();      ca.attributes=new attribute_info[ca.attributes_count];      readAttributes(d,ca.attributes_count,ca.attributes);      a=(attribute_info)ca;    } else     if (s.compareTo(attribute_info.Exceptions) == 0) {      Exception_attribute ea=new Exception_attribute();      ea.number_of_exceptions=d.readUnsignedShort();      if (ea.number_of_exceptions > 0) {        int k;        ea.exception_index_table=new int[ea.number_of_exceptions];        for (k=0; k < ea.number_of_exceptions; k++)         ea.exception_index_table[k]=d.readUnsignedShort();      }      a=(attribute_info)ea;    } else     if (s.compareTo(attribute_info.LineNumberTable) == 0) {      LineNumberTable_attribute la=new LineNumberTable_attribute();      la.line_number_table_length=d.readUnsignedShort();      int k;      line_number_table_entry e;      la.line_number_table=new line_number_table_entry[la.line_number_table_length];      for (k=0; k < la.line_number_table_length; k++) {        e=new line_number_table_entry();        e.start_pc=d.readUnsignedShort();        e.line_number=d.readUnsignedShort();        la.line_number_table[k]=e;      }      a=(attribute_info)la;    } else     if (s.compareTo(attribute_info.LocalVariableTable) == 0) {      LocalVariableTable_attribute la=new LocalVariableTable_attribute();      la.local_variable_table_length=d.readUnsignedShort();      int k;      local_variable_table_entry e;      la.local_variable_table=new local_variable_table_entry[la.local_variable_table_length];      for (k=0; k < la.local_variable_table_length; k++) {        e=new local_variable_table_entry();        e.start_pc=d.readUnsignedShort();        e.length=d.readUnsignedShort();        e.name_index=d.readUnsignedShort();        e.descriptor_index=d.readUnsignedShort();        e.index=d.readUnsignedShort();        la.local_variable_table[k]=e;      }      a=(attribute_info)la;    } else     if (s.compareTo(attribute_info.LocalVariableTypeTable) == 0) {      LocalVariableTypeTable_attribute la=new LocalVariableTypeTable_attribute();      la.local_variable_type_table_length=d.readUnsignedShort();      int k;      local_variable_type_table_entry e;      la.local_variable_type_table=new local_variable_type_table_entry[la.local_variable_type_table_length];      for (k=0; k < la.local_variable_type_table_length; k++) {        e=new local_variable_type_table_entry();        e.start_pc=d.readUnsignedShort();        e.length=d.readUnsignedShort();        e.name_index=d.readUnsignedShort();        e.signature_index=d.readUnsignedShort();        e.index=d.readUnsignedShort();        la.local_variable_type_table[k]=e;      }      a=(attribute_info)la;    } else     if (s.compareTo(attribute_info.Synthetic) == 0) {      Synthetic_attribute ia=new Synthetic_attribute();      a=(attribute_info)ia;    } else     if (s.compareTo(attribute_info.Signature) == 0) {      Signature_attribute ia=new Signature_attribute();      ia.signature_index=d.readUnsignedShort();      a=(attribute_info)ia;    } else     if (s.compareTo(attribute_info.Deprecated) == 0) {      Deprecated_attribute da=new Deprecated_attribute();      a=(attribute_info)da;    } else     if (s.compareTo(attribute_info.EnclosingMethod) == 0) {      EnclosingMethod_attribute ea=new EnclosingMethod_attribute();      ea.class_index=d.readUnsignedShort();      ea.method_index=d.readUnsignedShort();      a=(attribute_info)ea;    } else     if (s.compareTo(attribute_info.InnerClasses) == 0) {      InnerClasses_attribute ia=new InnerClasses_attribute();      ia.inner_classes_length=d.readUnsignedShort();      ia.inner_classes=new inner_class_entry[ia.inner_classes_length];      for (int k=0; k < ia.inner_classes_length; k++) {        inner_class_entry e=new inner_class_entry();        e.inner_class_index=d.readUnsignedShort();        e.outer_class_index=d.readUnsignedShort();        e.name_index=d.readUnsignedShort();        e.access_flags=d.readUnsignedShort();        ia.inner_classes[k]=e;      }      a=(attribute_info)ia;    } else     if (s.compareTo(attribute_info.RuntimeVisibleAnnotations) == 0) {      RuntimeVisibleAnnotations_attribute ra=new RuntimeVisibleAnnotations_attribute();      ra.number_of_annotations=d.readUnsignedShort();      ra.annotations=new annotation[ra.number_of_annotations];      for (int k=0; k < ra.number_of_annotations; k++) {        annotation annot=new annotation();        annot.type_index=d.readUnsignedShort();        annot.num_element_value_pairs=d.readUnsignedShort();        annot.element_value_pairs=readElementValues(annot.num_element_value_pairs,d,true,0);        ra.annotations[k]=annot;      }      a=(attribute_info)ra;    } else     if (s.compareTo(attribute_info.RuntimeInvisibleAnnotations) == 0) {      RuntimeInvisibleAnnotations_attribute ra=new RuntimeInvisibleAnnotations_attribute();      ra.number_of_annotations=d.readUnsignedShort();      ra.annotations=new annotation[ra.number_of_annotations];      for (int k=0; k < ra.number_of_annotations; k++) {        annotation annot=new annotation();        annot.type_index=d.readUnsignedShort();        annot.num_element_value_pairs=d.readUnsignedShort();        annot.element_value_pairs=readElementValues(annot.num_element_value_pairs,d,true,0);        ra.annotations[k]=annot;      }      a=(attribute_info)ra;    } else     if (s.compareTo(attribute_info.RuntimeVisibleParameterAnnotations) == 0) {      RuntimeVisibleParameterAnnotations_attribute ra=new RuntimeVisibleParameterAnnotations_attribute();      ra.num_parameters=d.readUnsignedByte();      ra.parameter_annotations=new parameter_annotation[ra.num_parameters];      for (int x=0; x < ra.num_parameters; x++) {        parameter_annotation pAnnot=new parameter_annotation();        pAnnot.num_annotations=d.readUnsignedShort();        pAnnot.annotations=new annotation[pAnnot.num_annotations];        for (int k=0; k < pAnnot.num_annotations; k++) {          annotation annot=new annotation();          annot.type_index=d.readUnsignedShort();          annot.num_element_value_pairs=d.readUnsignedShort();          annot.element_value_pairs=readElementValues(annot.num_element_value_pairs,d,true,0);          pAnnot.annotations[k]=annot;        }        ra.parameter_annotations[x]=pAnnot;      }      a=(attribute_info)ra;    } else     if (s.compareTo(attribute_info.RuntimeInvisibleParameterAnnotations) == 0) {      RuntimeInvisibleParameterAnnotations_attribute ra=new RuntimeInvisibleParameterAnnotations_attribute();      ra.num_parameters=d.readUnsignedByte();      ra.parameter_annotations=new parameter_annotation[ra.num_parameters];      for (int x=0; x < ra.num_parameters; x++) {        parameter_annotation pAnnot=new parameter_annotation();        pAnnot.num_annotations=d.readUnsignedShort();        pAnnot.annotations=new annotation[pAnnot.num_annotations];        for (int k=0; k < pAnnot.num_annotations; k++) {          annotation annot=new annotation();          annot.type_index=d.readUnsignedShort();          annot.num_element_value_pairs=d.readUnsignedShort();          annot.element_value_pairs=readElementValues(annot.num_element_value_pairs,d,true,0);          pAnnot.annotations[k]=annot;        }        ra.parameter_annotations[x]=pAnnot;      }      a=(attribute_info)ra;    } else     if (s.compareTo(attribute_info.AnnotationDefault) == 0) {      AnnotationDefault_attribute da=new AnnotationDefault_attribute();      element_value[] result=readElementValues(1,d,false,0);      da.default_value=result[0];      a=(attribute_info)da;    } else     if (s.equals(attribute_info.BootstrapMethods)) {      BootstrapMethods_attribute bsma=new BootstrapMethods_attribute();      int count=d.readUnsignedShort();      bsma.method_handles=new short[count];      bsma.arg_indices=new short[count][];      for (int num=0; num < count; num++) {        short index=(short)d.readUnsignedShort();        bsma.method_handles[num]=index;        int argCount=d.readUnsignedShort();        bsma.arg_indices[num]=new short[argCount];        for (int numArg=0; numArg < argCount; numArg++) {          short indexArg=(short)d.readUnsignedShort();          bsma.arg_indices[num][numArg]=indexArg;        }      }      assert bootstrap_methods_attribute == null : "More than one bootstrap methods attribute!";      a=bootstrap_methods_attribute=bsma;    } else {      Generic_attribute ga=new Generic_attribute();      if (len > 0) {        ga.info=new byte[(int)len];        readAllBytes(ga.info,d);      }      a=(attribute_info)ga;    }    a.attribute_name=j;    a.attribute_length=len;    ai[i]=a;  }  return true;}  }
class C{  public void render(Entity entityIn,float limbSwing,float limbSwingAmount,float ageInTicks,float netHeadYaw,float headPitch,float scale){  super.render(entityIn,limbSwing,limbSwingAmount,ageInTicks,netHeadYaw,headPitch,scale);  GlStateManager.pushMatrix();  if (entityIn.isSneaking()) {    GlStateManager.translate(0.0F,0.2F,0.0F);  }  this.claw1.render(scale);  GlStateManager.popMatrix();}  }
class C{  public void releaseId(int id){  try {    lock.lock();    boolean status=idList.get(id);    if (!status) {      throw new IDFactoryError("ID " + id + " is not taken, can't release it.");    }    idList.clear(id);    if (id < nextMinId || nextMinId == Integer.MIN_VALUE) {      nextMinId=id;    }  }  finally {    lock.unlock();  }}  }
class C{  public HardwareAddressUpdate(final String clazz){  this.clazz=clazz;}  }
class C{  protected void seekTo(int newPosition){  if (mPlaybackService != null) {    mPlaybackService.seekTo(newPosition);  }}  }
class C{  @Override protected void decompose(double[][] qrt){  p=new int[qrt.length];  for (int i=0; i < p.length; i++) {    p[i]=i;  }  super.decompose(qrt);}  }
class C{  public static float[] evaluate(List<String> automaticSequences,List<String> correctSequences){  float[] pr=new float[2];  pr[0]=0;  pr[1]=0;  int n=Math.min(automaticSequences.size(),correctSequences.size());  int totalMatches=0;  int totalLen1=0;  int totalLen2=0;  for (int i=0; i < n; i++) {    String[] s1=automaticSequences.get(i).split("\\s+");    String[] s2=correctSequences.get(i).split("\\s+");    if (checkSentence(s1,s2)) {      int c=evaluate(s1,s2,i);      totalMatches+=c;      totalLen1+=s1.length;      totalLen2+=s2.length;    }  }  if (totalLen1 > 0) {    pr[0]=(float)totalMatches / totalLen1;  }  if (totalLen2 > 0) {    pr[1]=(float)totalMatches / totalLen2;  }  System.out.println("      #(matches) = " + totalMatches + " (tags)");  System.out.println("Automatic length = " + totalLen1 + " (tags)");  System.out.println("  Correct length = " + totalLen2 + " (tags)");  System.out.println("       Precision = " + pr[0]);  System.out.println("          Recall = " + pr[1]);  return pr;}  }
class C{  public Item appendItem(Item originalItem){  ItemContents contents;  Item newItem;  if (originalItem == null) {    contents=null;  } else {    contents=originalItem.getSharedContents();  }  newItem=new Item(getOwnerRelation(),contents);  newItem.next=this.next;  if (this.next != null) {    this.next.prev=newItem;  }  attach(newItem);  if (this.ownerRelation.getTail() == this) {    this.ownerRelation.setTail(newItem);  }  return newItem;}  }
class C{  public static void scale(String url,String referer,String file,int w,int h){  HttpGet get=null;  InputStream in=null;  try {    get=new HttpGet(formatUrl(url,"utf-8"));    if (referer != null && referer.length() > 0) {      get.addHeader("Referer",referer);    }    HttpResponse agent=client.execute(get);    in=agent.getEntity().getContent();    BufferedImage img=ImageIO.read(in);    if (img == null)     return;    BufferedImage out=new BufferedImage(w,h,BufferedImage.TYPE_4BYTE_ABGR);    Graphics g=out.getGraphics();    int w0=img.getWidth();    int h0=img.getHeight();    int sx1=0, sx2=0 + w0, sy1=0, sy2=0 + h0, dx1=0, dx2=w, dy1=0, dy2=h;    float fh=((float)h0) / h;    float fw=((float)w0) / w;    if (fh > fw) {      int w2=(int)(w0 / fh);      dx1=(w - w2) / 2;      dx2=dx1 + w2;    } else {      int h2=(int)(h0 / fw);      dy1=(h - h2) / 2;      dy2=dy1 + h2;    }    g.drawImage(img,dx1,dy1,dx2,dy2,sx1,sy1,sx2,sy2,null);    ImageIO.write(out,"png",new File(file));  } catch (  Exception e) {    log.error(e.getMessage(),e);  } finally {    if (in != null) {      try {        in.close();      } catch (      IOException e) {        log.error(e.getMessage(),e);      }    }    if (get != null) {      get.abort();    }  }}  }
class C{  public void add(double weight,double x,double y){  observations.add(new WeightedObservedPoint(weight,x,y));}  }
class C{  public static void backup(String filename){  File f=new File(filename);  f.getParentFile().mkdirs();  try {    ZipOutputStream zip=new ZipOutputStream(new FileOutputStream(f));    zip.putNextEntry(new ZipEntry("db"));    PrintStream out=new PrintStream(zip);    Set<String> c1=getCollections();    log.debug("collections=" + c1);    for (    String table : c1) {      _backup(out,table);    }    zip.closeEntry();    zip.close();  } catch (  Exception e) {  }}  }
class C{  public GroupByScan(Scan s,Collection<String> groupFlds,Collection<AggregationFn> aggFns){  this.ss=s;  this.groupFlds=groupFlds;  this.aggFns=aggFns;  beforeFirst();}  }
class C{  private static boolean snapToHorizontalAnchor(Point candidatePoint,ConstraintWidget widget,SnapCandidate candidate){  if (candidate.target == null) {    return false;  }  int x1=WidgetInteractionTargets.constraintHandle(candidate.source).getDrawX();  int x2=WidgetInteractionTargets.constraintHandle(candidate.target).getDrawX() + candidate.margin;  int distance=x2 - x1;  candidatePoint.x=widget.getDrawX() + distance;  return true;}  }
class C{  protected WallGetCommentsQueryWithExtended postId(int value){  return unsafeParam("post_id",value);}  }
class C{  public static boolean addSmiles(Context context,Spannable spannable){  boolean hasChanges=false;  for (  Entry<Pattern,Integer> entry : emoticons.entrySet()) {    Matcher matcher=entry.getKey().matcher(spannable);    while (matcher.find()) {      boolean set=true;      for (      ImageSpan span : spannable.getSpans(matcher.start(),matcher.end(),ImageSpan.class))       if (spannable.getSpanStart(span) >= matcher.start() && spannable.getSpanEnd(span) <= matcher.end())       spannable.removeSpan(span); else {        set=false;        break;      }      if (set) {        hasChanges=true;        spannable.setSpan(new ImageSpan(context,entry.getValue()),matcher.start(),matcher.end(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);      }    }  }  return hasChanges;}  }
class C{  @Override public void onMessage(final TextMessage message,final Session session) throws JMSException {  log.debug("Request/Command received from the server");  if (message.getJMSReplyTo() == null) {    log.warn("\tthe \"replyTo\" property was not set in the JMS message. Ignoring request.");    return;  }  DAQResponse response;  TextMessage textMessage=message;  String messageContent=textMessage.getText();  log.trace("message received from server: {}",textMessage.getText());  try {    ServerRequest request=MessageConverter.requestFromJson(messageContent);    if (request instanceof SourceDataTagValueRequest) {      log.debug("Processing server request for current data tag values");      response=onSourceDataTagValueUpdateRequest((SourceDataTagValueRequest)request);    } else     if (request instanceof SourceCommandTagValue) {      response=onExecuteCommand((SourceCommandTagValue)request);    } else     if (request instanceof ChangeRequest) {      response=onReconfigureProcess((ChangeRequest)request);    } else {      log.warn("Request received from server not recognized");      response=new ServerErrorResponse("Request received from server not recognized: " + request.getClass() + " not supported from the DAQ.");    }    sendDAQResponse(response,message.getJMSReplyTo(),session);  } catch (  Exception e) {    log.error("Unexpected exception caught while processing server request",e);  }}  }
class C{  public void beforeMovingToBackup() throws SpaceComponentsInitializeException {switch (_spaceMode) {case NONE:    initBackupComponents();  break;case PRIMARY:break;}}  }
class C{  public void doFilter(ServletRequest req,ServletResponse res,FilterChain chain) throws IOException, ServletException {  HttpServletResponse response=(HttpServletResponse)res;  response.setHeader("Access-Control-Allow-Origin","*");  response.setHeader("Access-Control-Allow-Methods","POST, GET, OPTIONS, DELETE");  response.setHeader("Access-Control-Max-Age","3600");  response.setHeader("Access-Control-Allow-Headers","Origin, No-Cache, X-Requested-With, If-Modified-Since, Pragma, Last-Modified, Cache-Control, Expires, Content-Type, X-E4M-With");  chain.doFilter(req,res);}  }
class C{  public void Notify(Object oSender,Object oParams){  double dVar=((Double)oParams).doubleValue();  long lLeft=(long)((1.0 - dVar) * (double)(new Date().getTime() - dStart.getTime()) / dVar);  String sLeft;  if (((int)(dVar * 10000) % 5) == 0) {    if (dVar < 0.0001)     sLeft="Calculating remaining time..."; else     sLeft=String.format("%35s",gr.demokritos.iit.jinsect.utils.millisToMinSecString(lLeft));    System.err.print(String.format("%5.3f%%",((Double)oParams).doubleValue() * 100.0) + " complete..." + sLeft+ "\r");  }}  }
class C{  public static Integer zpvc(Number... values){  if (values == null || values.length == 0) {    throw new IllegalArgumentException("Argument is null or empty");  }  int count=0;  for (  Number value : values) {    if (value != null && value.doubleValue() >= 0d) {      count++;    }  }  return count;}  }
class C{  public LeastSquaresBuilder maxIterations(final int newMaxIterations){  this.maxIterations=newMaxIterations;  return this;}  }
class C{  public static String loadFileToString(String sFilename){  StringBuffer sb=new StringBuffer();  try {    BufferedReader in=new BufferedReader(new FileReader(sFilename));    String line;    while ((line=in.readLine()) != null) {      sb.append(line);    }    in.close();  } catch (  Exception e) {    System.err.println("Coult not load file:" + sFilename);    e.printStackTrace(System.err);  }  return sb.toString();}  }
class C{  public void buildPostDestContext(){  strategy.buildPostDest();}  }
class C{  public void swapDirectory(OCFile directory,FileDataStorageManager updatedStorageManager,boolean onlyOnDevice){  if (updatedStorageManager != null && updatedStorageManager != mStorageManager) {    mStorageManager=updatedStorageManager;    mAccount=AccountUtils.getCurrentOwnCloudAccount(mContext);  }  if (mStorageManager != null) {    mFiles=mStorageManager.getFolderContent(directory,onlyOnDevice);    if (mJustFolders) {      mFiles=getFolders(mFiles);    }    if (!mShowHiddenFiles) {      mFiles=filterHiddenFiles(mFiles);    }  } else {    mFiles=null;  }  mFiles=FileStorageUtils.sortOcFolder(mFiles);  mFilesAll.clear();  mFilesAll.addAll(mFiles);  notifyDataSetChanged();}  }
class C{  public static RealMatrix blockInverse(RealMatrix m,int splitIndex){  final int n=m.getRowDimension();  if (m.getColumnDimension() != n) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NON_SQUARE_MATRIX,m.getRowDimension(),m.getColumnDimension());  }  final int splitIndex1=splitIndex + 1;  final RealMatrix a=m.getSubMatrix(0,splitIndex,0,splitIndex);  final RealMatrix b=m.getSubMatrix(0,splitIndex,splitIndex1,n - 1);  final RealMatrix c=m.getSubMatrix(splitIndex1,n - 1,0,splitIndex);  final RealMatrix d=m.getSubMatrix(splitIndex1,n - 1,splitIndex1,n - 1);  final SingularValueDecomposition aDec=new SingularValueDecomposition(a);  final DecompositionSolver aSolver=aDec.getSolver();  if (!aSolver.isNonSingular()) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.SINGULAR_MATRIX);  }  final RealMatrix aInv=aSolver.getInverse();  final SingularValueDecomposition dDec=new SingularValueDecomposition(d);  final DecompositionSolver dSolver=dDec.getSolver();  if (!dSolver.isNonSingular()) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.SINGULAR_MATRIX);  }  final RealMatrix dInv=dSolver.getInverse();  final RealMatrix tmp1=a.subtract(b.multiply(dInv).multiply(c));  final SingularValueDecomposition tmp1Dec=new SingularValueDecomposition(tmp1);  final DecompositionSolver tmp1Solver=tmp1Dec.getSolver();  if (!tmp1Solver.isNonSingular()) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.SINGULAR_MATRIX);  }  final RealMatrix result00=tmp1Solver.getInverse();  final RealMatrix tmp2=d.subtract(c.multiply(aInv).multiply(b));  final SingularValueDecomposition tmp2Dec=new SingularValueDecomposition(tmp2);  final DecompositionSolver tmp2Solver=tmp2Dec.getSolver();  if (!tmp2Solver.isNonSingular()) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.SINGULAR_MATRIX);  }  final RealMatrix result11=tmp2Solver.getInverse();  final RealMatrix result01=aInv.multiply(b).multiply(result11).scalarMultiply(-1);  final RealMatrix result10=dInv.multiply(c).multiply(result00).scalarMultiply(-1);  final RealMatrix result=new Array2DRowRealMatrix(n,n);  result.setSubMatrix(result00.getData(),0,0);  result.setSubMatrix(result01.getData(),0,splitIndex1);  result.setSubMatrix(result10.getData(),splitIndex1,0);  result.setSubMatrix(result11.getData(),splitIndex1,splitIndex1);  return result;}  }
class C{  public Document fromFiletoDOC(final String file){  Document confXMLDoc;  log.trace("fromFiletoDOC - trying to configure process using configuration xml from the file " + file);  DOMParser parser=new DOMParser();  try {    parser.parse(file);    confXMLDoc=parser.getDocument();  } catch (  java.io.IOException ex) {    log.error("fromFiletoDOC - Could not open processConfiguration XML file : " + file);    return null;  }catch (  org.xml.sax.SAXException ex) {    log.error("fromFiletoDOC - Could not parse processConfiguration XML file : " + file);    return null;  }  log.trace("fromFiletoDOC - Configuration XML loaded from filesystem and parsed");  return confXMLDoc;}  }
class C{  @Override public void startParameterEntity(String name,XMLResourceIdentifier identifier,String encoding,Augmentations augs) throws XNIException {  try {    if (augs != null && Boolean.TRUE.equals(augs.getItem(Constants.ENTITY_SKIPPED))) {      if (fContentHandler != null) {        fContentHandler.skippedEntity(name);      }    } else {      if (fLexicalHandler != null && fLexicalHandlerParameterEntities) {        fLexicalHandler.startEntity(name);      }    }  } catch (  SAXException e) {    throw new XNIException(e);  }}  }
class C{  public void addException(Access node){  List<Access> list=(parent == null || state == null) ? getExceptionListNoTransform() : getExceptionList();  list.addChild(node);}  }
class C{  public CommandBuilder withLongSwitch(String switchName,Object value,UnaryOperator<String> switchNameMapper){  if (value != null) {    switches.add(String.format("--%s='%s'",switchNameMapper.apply(switchName),escapeQuotedSwitch(String.valueOf(value))));  } else {    switches.add("--" + switchNameMapper.apply(switchName));  }  return this;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_QUEST_ACQUIRE_ERROR_STIGMA_PT(int num0){  return new SM_SYSTEM_MESSAGE(1300583,num0);}  }
class C{  public MqttSpyDaemonConfigLoader() throws XMLException {  super();  readFromClassPath(MqttSpyDaemonConstants.DEFAULT_PROPERTIES_FILE_NAME);  this.parser=new XMLParser(MqttSpyDaemonConstants.PACKAGE,new String[]{MqttConfigurationUtils.SPY_COMMON_SCHEMA,MqttConfigurationUtils.MQTT_COMMON_SCHEMA,MqttSpyDaemonConstants.SCHEMA});}  }
class C{  public T execute() throws Exception {  return task.execute();}  }
class C{  public VideoSaveQuery description(String value){  return unsafeParam("description",value);}  }
class C{  public int size(){synchronized (eventsList) {    return eventsList.size();  }}  }
class C{  public static void writeLines(File file,Collection<?> lines,boolean append) throws IOException {  writeLines(file,null,lines,null,append);}  }
class C{  private final float mapF0(float val,float mean,float stddev){  return ((((val - modelMean) / modelStddev) * stddev) + mean);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Reflector_INTERVAL_A_TO_ME(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200708,skillcaster,num0,skillname);}  }
class C{  public static Response post(String url,String contenttype,JSON headers,JSON params){  return post(url,contenttype,headers,params,null);}  }
class C{  @Override public String toString(){  return super.toString() + "(" + filter.toString()+ ")";}  }
class C{  public boolean springBack(int startX,int startY,int minX,int maxX,int minY,int maxY){  mMode=FLING_MODE;  final boolean spingbackX=mScrollerX.springback(startX,minX,maxX);  final boolean spingbackY=mScrollerY.springback(startY,minY,maxY);  return spingbackX || spingbackY;}  }
class C{  public static double clip(double v,double min,double max){  if (v < min)   return min;  if (v > max)   return max;  return v;}  }
class C{  private String printOFormat(short x){  String sx=null;  if (x == Short.MIN_VALUE)   sx="100000"; else   if (x < 0) {    String t=Integer.toString((~(-x - 1)) ^ Short.MIN_VALUE,8);switch (t.length()) {case 1:      sx="10000" + t;    break;case 2:  sx="1000" + t;break;case 3:sx="100" + t;break;case 4:sx="10" + t;break;case 5:sx="1" + t;break;}} else sx=Integer.toString(x,8);return printOFormat(sx);}  }
class C{  protected void clearEdges(){  getEdgeTable().clear();}  }
class C{  public DeterministicHashMap(int initialCapacity){  super(initialCapacity);}  }
class C{  public void write(IOutputWriter writer) throws IOException {  writer.writeString(getFormatDef());  final FormatDefinition formatDefinition=FormatDefinition.fromString(getFormatDef());  formatDefinition.startWrite();  for (  Pair<String,FormatDefinition.Type> pair : formatDefinition.getList()) {{switch (pair.getFirst()) {case "Creator":        formatDefinition.write(writer,"Creator",getCreator());      break;case "CreationDate":    formatDefinition.write(writer,"CreationDate",getCreationDate());  break;case "AlignmentsFile":formatDefinition.write(writer,"AlignmentsFile",getAlignmentFile());break;case "AlignmentFileFormat":formatDefinition.write(writer,"AlignmentFileFormat",getAlignmentFileFormat());break;case "AlignmentFileSize":formatDefinition.write(writer,"AlignmentFileSize",getAlignmentFileSize());break;case "ReadsFile":formatDefinition.write(writer,"ReadsFile",getReadsFile());break;case "ReadsFileFormat":formatDefinition.write(writer,"ReadsFileFormat",getReadsFileFormat());break;case "ReadsFileSize":formatDefinition.write(writer,"ReadsFileSize",getReadsFileSize());break;case "BlastMode":formatDefinition.write(writer,"BlastMode",getBlastMode());break;case "MatchesStart":formatDefinition.write(writer,"MatchesStart",getMatchesStart());break;case "MatchesFooter":formatDefinition.write(writer,"MatchesFooter",getMatchesFooter());break;case "ClassificationsStart":formatDefinition.write(writer,"ClassificationsStart",getClassificationsStart());break;case "ClassificationsFooter":formatDefinition.write(writer,"ClassificationsFooter",getClassificationsFooter());break;case "AuxStart":formatDefinition.write(writer,"AuxStart",getAuxStart());break;case "AuxFooter":formatDefinition.write(writer,"AuxFooter",getAuxFooter());break;case "FileFooter":formatDefinition.write(writer,"FileFooter",getFileFooter());break;}}}formatDefinition.finishWrite();}  }
class C{  public SampleSet(StringTokenizer tok,BufferedReader reader){  try {    int numSamples=Integer.parseInt(tok.nextToken());    int numChannels=Integer.parseInt(tok.nextToken());    int sampleRate=Integer.parseInt(tok.nextToken());    float coeffMin=Float.parseFloat(tok.nextToken());    float coeffRange=Float.parseFloat(tok.nextToken());    float postEmphasis=Float.parseFloat(tok.nextToken());    int residualFold=Integer.parseInt(tok.nextToken());    samples=new Sample[numSamples];    sampleInfo=new SampleInfo(sampleRate,numChannels,residualFold,coeffMin,coeffRange,postEmphasis);    for (int i=0; i < numSamples; i++) {      samples[i]=new Sample(reader,numChannels);    }  } catch (  NoSuchElementException nse) {    throw new Error("Parsing sample error " + nse.getMessage());  }}  }
class C{  private static void addClassFilePath(String classPath,Set<String> patternList){  if (classPath != null && classPath.length() > 0) {    if (classPath.endsWith(CLASS_SUFFIX)) {      classPath=classPath.substring(0,classPath.length() - CLASS_SUFFIX.length()).replace('.','/') + CLASS_SUFFIX;    } else {      classPath=classPath.replace('.','/');    }    patternList.add(classPath);  }}  }
class C{  public static boolean putBoolean(Context context,String key,boolean value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putBoolean(key,value);  return editor.commit();}  }
class C{  public Layers(LayerRenderer<?> layer,EntityLivingBase entity,float limbSwing,float limbSwingAmount,float partialTicks,float tickAge,float headYaw,float headPitch,float scale){  this.layer=layer;  this.entity=entity;  this.limbSwing=limbSwing;  this.limbSwingAmount=limbSwingAmount;  this.partialTicks=partialTicks;  this.tickAge=tickAge;  this.headYaw=headYaw;  this.headPitch=headPitch;  this.scale=scale;}  }
class C{  @Override public void onServiceDisconnected(ComponentName name){  mCallbackHandler.obtainMessage(MSG_SHUTDOWN_EXECUTION).sendToTarget();}  }
class C{  private static int base64toInt(char c,byte[] alphaToInt){  int result=alphaToInt[c];  if (result < 0)   throw new IllegalArgumentException("Illegal character " + c);  return result;}  }
class C{  public PhotosGetAllQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public static JSONObject toJSONObject(String string) throws JSONException {  return toJSONObject(new XMLTokener(string));}  }
class C{  public boolean supportsOpenSnapshot(){  return false;}  }
class C{  public ToolButton(String text){  super(" ");  setToolTipText(text);  setSize(16,16);}  }
class C{  private void test_1cfa_call_graph(LocalVarNode vn,SootMethod caller,SootMethod callee_signature,Histogram ce_range){  long l, r;  IVarAbstraction pn=ptsProvider.findInternalNode(vn);  if (pn == null)   return;  pn=pn.getRepresentative();  Set<SootMethod> tgts=new HashSet<SootMethod>();  Set<AllocNode> set=pn.get_all_points_to_objects();  LinkedList<CgEdge> list=ptsProvider.getCallEdgesInto(ptsProvider.getIDFromSootMethod(caller));  FastHierarchy hierarchy=Scene.v().getOrMakeFastHierarchy();  for (Iterator<CgEdge> it=list.iterator(); it.hasNext(); ) {    CgEdge p=it.next();    l=p.map_offset;    r=l + ptsProvider.max_context_size_block[p.s];    tgts.clear();    for (    AllocNode obj : set) {      if (!pn.pointer_interval_points_to(l,r,obj))       continue;      Type t=obj.getType();      if (t == null)       continue; else       if (t instanceof AnySubType)       t=((AnySubType)t).getBase(); else       if (t instanceof ArrayType)       t=RefType.v("java.lang.Object");      try {        tgts.add(hierarchy.resolveConcreteDispatch(((RefType)t).getSootClass(),callee_signature));      } catch (      Exception e) {      }    }    tgts.remove(null);    ce_range.addNumber(tgts.size());  }}  }
class C{  public void addSootOutputEventListener(ISootOutputEventListener listener){  sootOutputEventListeners.add(listener);}  }
class C{  @Override protected void finalize() throws Throwable {  super.finalize();  _map.remove(_key,_value);}  }
class C{  public static int eliminateZeroMassPoints(int[] densityPoints,double[] densityValues){  int positiveMassCount=0;  for (int i=0; i < densityValues.length; i++) {    if (densityValues[i] > 0) {      positiveMassCount++;    }  }  if (positiveMassCount < densityValues.length) {    int[] newPoints=new int[positiveMassCount];    double[] newValues=new double[positiveMassCount];    int j=0;    for (int i=0; i < densityValues.length; i++) {      if (densityValues[i] > 0) {        newPoints[j]=densityPoints[i];        newValues[j]=densityValues[i];        j++;      }    }    System.arraycopy(newPoints,0,densityPoints,0,positiveMassCount);    System.arraycopy(newValues,0,densityValues,0,positiveMassCount);  }  return positiveMassCount;}  }
class C{  public static boolean contentEquals(File file1,File file2) throws IOException {  boolean file1Exists=file1.exists();  if (file1Exists != file2.exists()) {    return false;  }  if (!file1Exists) {    return true;  }  if (file1.isDirectory() || file2.isDirectory()) {    throw new IOException("Can't compare directories, only files");  }  if (file1.length() != file2.length()) {    return false;  }  if (file1.getCanonicalFile().equals(file2.getCanonicalFile())) {    return true;  }  InputStream input1=null;  InputStream input2=null;  try {    input1=new FileInputStream(file1);    input2=new FileInputStream(file2);    return IOUtils.contentEquals(input1,input2);  }  finally {    IOUtils.closeQuietly(input1);    IOUtils.closeQuietly(input2);  }}  }
class C{  static void recordStartedBy(int source){  RecordHistogram.recordSparseSlowlyHistogram("DocumentActivity.StartedBy",source);}  }
class C{  public void prun(M executedMove,IMoveGenerator<M,G> generator){  TreeSearchNode<M,G> newRoot=null;  for (  TreeSearchNode<M,G> rootNode : rootNodes) {    if (rootNode.getMove() == executedMove) {      newRoot=rootNode;    }  }  toBeExpanded.clear();  best=null;  evaluationsPerformed=0;  rootNodes=newRoot.subNodes;  newRoot.father=null;  if (rootNodes == null) {    try {      rootNodes=expansion(newRoot,generator);    } catch (    TimeoutException e) {    }  }  for (  TreeSearchNode<M,G> rootNode : rootNodes) {    repushToBeExpandedNodes(rootNode);  }}  }
class C{  void discardFromRetired(ResourceKey<K> resourceKey,R resource){  resourceKey.removeFromTransferStack();  lifecycle.onRemoval(resourceKey.getKey(),resource);}  }
class C{  @Deployment public void testProcessDefinitionListenerDefinitionEntities() throws Exception {  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("testEventListeners");  assertNotNull(processInstance);  Task task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();  assertNotNull(task);  TestActivitiEventListener theListener=(TestActivitiEventListener)processEngineConfiguration.getBeans().get("testAttachmentEventListener");  assertNotNull(theListener);  assertEquals(0,theListener.getEventsReceived().size());  taskService.createAttachment("test",task.getId(),processInstance.getId(),"test","test","url");  assertEquals(2,theListener.getEventsReceived().size());  assertEquals(ActivitiEventType.ENTITY_CREATED,theListener.getEventsReceived().get(0).getType());  assertEquals(ActivitiEventType.ENTITY_INITIALIZED,theListener.getEventsReceived().get(1).getType());}  }
class C{  public void updateCurrentConfig(ComponentConfiguration data){  scenarioContext.add(ContextKeys.CURRENT_CONFIG,data);}  }
class C{  public void convertInputsToItt() throws TransformerConfigurationException {  Transformer transformer=TtmlUtils.createTtmlTransformer(TTML_TO_ITT_TRANSFORMATION);  convertedItts=ttmlTts.stream().map(null).collect(Collectors.toCollection(null));  mergedItt=convertedItts.get(0);}  }
class C{  @Override public Schema schema(){  return schema;}  }
class C{  public static int toInteger(Object obj){  Integer result=toIntegerObject(obj);  return result == null ? 0 : result.intValue();}  }
class C{  public LocalCacheResponseEntryPacket(){  throw new IllegalStateException("This constructor is required for Externalizable and should not be called directly.");}  }
class C{  public DotGraph(String graphname){  this.graphname=graphname;  this.isSubGraph=false;  this.nodes=new HashMap<String,DotGraphNode>(100);  this.drawElements=new LinkedList<Renderable>();  this.attributes=new LinkedList<DotGraphAttribute>();}  }
class C{  public RequestHandle post(Context context,String url,HttpEntity entity,String contentType,ResponseHandlerInterface responseHandler){  return sendRequest(httpClient,httpContext,addEntityToRequestBase(new HttpPost(url),entity),contentType,responseHandler,context);}  }
class C{  public double distance(VectorN vector){  double d=0d;  for (int i=0; i < size(); i++) {    double x=vector.get(0) - get(0);    double y=vector.get(1) - get(1);    d+=x * x + y * y;  }  return Math.sqrt(d);}  }
class C{  public boolean orAndAndNot(BitVector orset,BitVector andset,BitVector andnotset){  boolean ret=false;  long[] a=null, b=null, c=null, d=null, e=null;  int al, bl, cl, dl;  a=this.bits;  al=a.length;  if (orset == null) {    bl=0;  } else {    b=orset.bits;    bl=b.length;  }  if (andset == null) {    cl=0;  } else {    c=andset.bits;    cl=c.length;  }  if (andnotset == null) {    dl=0;  } else {    d=andnotset.bits;    dl=d.length;  }  if (al < bl) {    e=new long[bl];    System.arraycopy(a,0,e,0,al);    this.bits=e;  } else {    e=a;  }  int i=0;  long l;  if (c == null) {    if (dl <= bl) {      while (i < dl) {        l=b[i] & ~d[i];        if ((l & ~e[i]) != 0)         ret=true;        e[i]|=l;        i++;      }      while (i < bl) {        l=b[i];        if ((l & ~e[i]) != 0)         ret=true;        e[i]|=l;        i++;      }    } else {      while (i < bl) {        l=b[i] & ~d[i];        if ((l & ~e[i]) != 0)         ret=true;        e[i]|=l;        i++;      }    }  } else   if (bl <= cl && bl <= dl) {    while (i < bl) {      l=b[i] & c[i] & ~d[i];      if ((l & ~e[i]) != 0)       ret=true;      e[i]|=l;      i++;    }  } else   if (cl <= bl && cl <= dl) {    while (i < cl) {      l=b[i] & c[i] & ~d[i];      if ((l & ~e[i]) != 0)       ret=true;      e[i]|=l;      i++;    }  } else {    while (i < dl) {      l=b[i] & c[i] & ~d[i];      if ((l & ~e[i]) != 0)       ret=true;      e[i]|=l;      i++;    }    int shorter=cl;    if (bl < shorter)     shorter=bl;    while (i < shorter) {      l=b[i] & c[i];      if ((l & ~e[i]) != 0)       ret=true;      e[i]|=l;      i++;    }  }  return ret;}  }
class C{  public MethodDesc(String name,InvocationConstraints constraints){  this.name=name;  this.types=null;  if (constraints != null && constraints.isEmpty()) {    constraints=null;  }  this.constraints=constraints;  check();}  }
class C{  @Override public double[] makeInverseCumulativeTestPoints(){  return new double[]{0.000,0.005,0.010,0.015,0.020,0.025,0.030,0.035,0.040,0.045,0.050,0.055,0.060,0.065,0.070,0.075,0.080,0.085,0.090,0.095,0.100,0.105,0.110,0.115,0.120,0.125,0.130,0.135,0.140,0.145,0.150,0.155,0.160,0.165,0.170,0.175,0.180,0.185,0.190,0.195,0.200,0.205,0.210,0.215,0.220,0.225,0.230,0.235,0.240,0.245,0.250,0.255,0.260,0.265,0.270,0.275,0.280,0.285,0.290,0.295,0.300,0.305,0.310,0.315,0.320,0.325,0.330,0.335,0.340,0.345,0.350,0.355,0.360,0.365,0.370,0.375,0.380,0.385,0.390,0.395,0.400,0.405,0.410,0.415,0.420,0.425,0.430,0.435,0.440,0.445,0.450,0.455,0.460,0.465,0.470,0.475,0.480,0.485,0.490,0.495,0.500,0.505,0.510,0.515,0.520,0.525,0.530,0.535,0.540,0.545,0.550,0.555,0.560,0.565,0.570,0.575,0.580,0.585,0.590,0.595,0.600,0.605,0.610,0.615,0.620,0.625,0.630,0.635,0.640,0.645,0.650,0.655,0.660,0.665,0.670,0.675,0.680,0.685,0.690,0.695,0.700,0.705,0.710,0.715,0.720,0.725,0.730,0.735,0.740,0.745,0.750,0.755,0.760,0.765,0.770,0.775,0.780,0.785,0.790,0.795,0.800,0.805,0.810,0.815,0.820,0.825,0.830,0.835,0.840,0.845,0.850,0.855,0.860,0.865,0.870,0.875,0.880,0.885,0.890,0.895,0.900,0.905,0.910,0.915,0.920,0.925,0.930,0.935,0.940,0.945,0.950,0.955,0.960,0.965,0.970,0.975,0.980,0.985,0.990,0.995,1.000};}  }
class C{  private Response<Bitmap> doParse(NetworkResponse response){  byte[] data=response.data;  Log.d("Checksum","Decode");  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();  Bitmap bitmap=null;  Log.d("Checksum","Decodess");  decodeOptions.inJustDecodeBounds=true;  BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);  int actualWidth=decodeOptions.outWidth;  int actualHeight=decodeOptions.outHeight;  int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight,mScaleType);  int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth,mScaleType);  decodeOptions.inJustDecodeBounds=false;  decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);  Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);  if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {    bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);    tempBitmap.recycle();  } else {    bitmap=tempBitmap;  }  if (bitmap == null) {    return Response.error(new ParseError(response));  } else {    return Response.success(bitmap,HttpHeaderParser.parseCacheHeaders(response));  }}  }
class C{  private static void addStonesStats(Item item,Set<? extends ManaStone> itemStones,CreatureGameStats<?> cgs){  if (itemStones == null || itemStones.size() == 0) {    return;  }  for (  ManaStone stone : itemStones) {    addStoneStats(item,stone,cgs);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_LIMIT_SALE_M_EPIC_SHOP_DESC01(String value0){  return new SM_SYSTEM_MESSAGE(1400439,value0);}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  Collection<? extends ClientRequestResult> handleActiveAlarmRequest(final ClientRequest alarmRequest){  final Collection<AlarmValue> activeAlarms=new ArrayList<>();  AlarmQuery query=AlarmQuery.builder().active(true).build();  Collection<Long> result=alarmCache.findAlarm(query);  for (  Long alarmId : result) {    Alarm alarm=alarmCache.getCopy(alarmId);    Tag tag=tagLocationService.getCopy(alarm.getTagId());    if (tag == null) {      LOG.warn("No tag found for TagID = " + alarm.getTagId() + ". This may be a configuration issue for alarm "+ alarm.getId());    } else {      activeAlarms.add(TransferObjectFactory.createAlarmValue(alarm,tag));    }  }  if (LOG.isDebugEnabled()) {    LOG.debug("Finished processing ACTIVE alarms request: returning " + activeAlarms.size() + " active alarms");  }  return activeAlarms;}  }
class C{  private void initializePokemonAutoCompleteTextView(){  String[] pokeList=getResources().getStringArray(R.array.pokemon);  ArrayAdapter<String> adapter=new ArrayAdapter<>(this,R.layout.autocomplete_pokemon_list_item,pokeList);  autoCompleteTextView1.setAdapter(adapter);  autoCompleteTextView1.setThreshold(1);}  }
class C{  public void append(final DenseOutputModel model) throws MathIllegalArgumentException, MathIllegalStateException {  if (model.steps.size() == 0) {    return;  }  if (steps.size() == 0) {    initialTime=model.initialTime;    forward=model.forward;  } else {    final ODEStateAndDerivative s1=steps.get(0).getPreviousState();    final ODEStateAndDerivative s2=model.steps.get(0).getPreviousState();    checkDimensionsEquality(s1.getPrimaryStateDimension(),s2.getPrimaryStateDimension());    checkDimensionsEquality(s1.getNumberOfSecondaryStates(),s2.getNumberOfSecondaryStates());    for (int i=0; i < s1.getNumberOfSecondaryStates(); ++i) {      checkDimensionsEquality(s1.getSecondaryStateDimension(i),s2.getSecondaryStateDimension(i));    }    if (forward ^ model.forward) {      throw new MathIllegalArgumentException(LocalizedODEFormats.PROPAGATION_DIRECTION_MISMATCH);    }    final ODEStateInterpolator lastInterpolator=steps.get(index);    final double current=lastInterpolator.getCurrentState().getTime();    final double previous=lastInterpolator.getPreviousState().getTime();    final double step=current - previous;    final double gap=model.getInitialTime() - current;    if (FastMath.abs(gap) > 1.0e-3 * FastMath.abs(step)) {      throw new MathIllegalArgumentException(LocalizedODEFormats.HOLE_BETWEEN_MODELS_TIME_RANGES,FastMath.abs(gap));    }  }  for (  ODEStateInterpolator interpolator : model.steps) {    steps.add(interpolator);  }  index=steps.size() - 1;  finalTime=(steps.get(index)).getCurrentState().getTime();}  }
class C{  public void showTimes(long overall){  showTimesShort(overall);}  }
class C{  protected GroupsEditManagerQuery userId(int value){  return unsafeParam("user_id",value);}  }
class C{  public static boolean isDinersClub(String cc){  int firstdig=Integer.parseInt(cc.substring(0,1));  int seconddig=Integer.parseInt(cc.substring(1,2));  if ((cc.length() == 14) && (firstdig == 3) && ((seconddig == 0) || (seconddig == 6) || (seconddig == 8)))   return isCreditCard(cc);  return false;}  }
class C{  public boolean isEntryFromPartition(IEntryHolder entryHolder){  final Object routingValue=entryHolder.getRoutingValue();  if (routingValue == null)   return false;  if (!_clusterInfo.isPartitioned())   return true;  final int partitionId=PartitionedClusterUtils.getPartitionId(routingValue,_clusterInfo.getNumberOfPartitions());  return partitionId == _partitionId;}  }
class C{  @SafeVarargs public static <T>ConsList<T> List(T... a){  if ((a == null) || (a.length == 0)) {    return new ConsListImpl<>();  }  return new ConsListImpl<>(Arrays.asList(a),false);}  }
class C{  public void awaitCompletion() throws InterruptedException {  numRunningTasks.awaitZero();}  }
class C{  public void compressMyOwnWay(int[] indexes){  List<Integer> list=new ArrayList<Integer>(CarbonCommonConstants.CONSTANT_SIZE_TEN);  List<Integer> map=new ArrayList<Integer>(CarbonCommonConstants.CONSTANT_SIZE_TEN);  int k=0;  int i=1;  for (; i < indexes.length; i++) {    if (indexes[i] - indexes[i - 1] == 1) {      k++;    } else {      if (k > 0) {        map.add((list.size()));        list.add(indexes[i - k - 1]);        list.add(indexes[i - 1]);      } else {        list.add(indexes[i - 1]);      }      k=0;    }  }  if (k > 0) {    map.add((list.size()));    list.add(indexes[i - k - 1]);    list.add(indexes[i - 1]);  } else {    list.add(indexes[i - 1]);  }  dataAfterComp=convertToArray(list);  if (indexes.length == dataAfterComp.length) {    indexMap=new int[0];  } else {    indexMap=convertToArray(map);  }  if (dataAfterComp.length == 2 && indexMap.length == 1) {    alreadySorted=true;  }}  }
class C{  boolean sameClass(String cfn){  String s=cfn;  int i=s.lastIndexOf(".class");  if (i > 0) {    s=s.substring(0,i);  }  if (s.compareTo(toString()) == 0)   return true;  return false;}  }
class C{  private String verifyRestore(UserCredentials credentials,String token,String code,RestoreType restoreType){  String errorMessage=credentials.isRestorable();  if (errorMessage != null) {    return errorMessage;  }  errorMessage=verifyToken(credentials,token,restoreType);  if (errorMessage != null) {    return errorMessage;  }  errorMessage=verifyRestoreCode(credentials.getRestoreCode(),code);  if (errorMessage != null) {    return errorMessage;  }  Date currentTime=new DateTime().toDate();  Date restoreExpiry=credentials.getRestoreExpiry();  if (currentTime.after(restoreExpiry)) {    return "date_is_after_expiry";  }  return null;}  }
class C{  public GeneratedPasswordSavedInfoBar(int iconDrawableId,String messageText,int inlineLinkRangeStart,int inlineLinkRangeEnd,String buttonLabel){  super(null,iconDrawableId,null,null);  mMessageText=messageText;  mInlineLinkRangeStart=inlineLinkRangeStart;  mInlineLinkRangeEnd=inlineLinkRangeEnd;  mButtonLabel=buttonLabel;}  }
class C{  public void updateEquipmentConfiguration(final EquipmentConfigurationUpdate equipmentConfigurationUpdate,final IEquipmentConfiguration equipmentConfiguration) throws IllegalAccessException, NoSuchFieldException {  fillNonNullFields(equipmentConfigurationUpdate,equipmentConfiguration,CHANGE_ID_FIELD,EQUIPMENT_ID_FIELD);  removeListOfFields(equipmentConfigurationUpdate.getFieldsToRemove(),equipmentConfiguration);}  }
class C{  public ResourceLazyLoadingScript name(String name){  this.name=name;  return this;}  }
class C{  protected void processGroupingsReport(SerialMessage serialMessage,int offset) throws ZWaveSerialMessageException {  maxGroups=serialMessage.getMessagePayloadByte(offset + 1);  logger.debug("NODE {}: processGroupingsReport number of groups {}",getNode(),maxGroups);  for (int groupId=1; groupId <= maxGroups; groupId++) {    if (getNode().getAssociationGroup(groupId) == null) {      ZWaveAssociationGroup group=new ZWaveAssociationGroup(groupId);      getNode().setAssociationGroup(group);    }  }  initialiseDone=true;}  }
class C{  protected boolean isStringType(Type tp){  if (!(tp instanceof RefType))   return false;  RefType refType=(RefType)tp;  return refType.getClassName().equals("java.lang.String");}  }
class C{  protected Builder(@Nonnull final Builder builder){  Check.notNull(builder,"builder");  family=builder.family;  icon=builder.icon;  id=builder.id;  infoUrl=builder.infoUrl;  name=builder.name;  patterns.addAll(builder.patterns);  producer=builder.producer;  producerUrl=builder.producerUrl;  url=builder.url;}  }
class C{  public synchronized void addSubscription(Subscription subscription){  if (waitList.isEmpty() && !serviceQueue.isEmpty()) {    subscription.onPublish(serviceQueue.poll());  } else {    waitList.putIfAbsent(subscription.getId(),new WaitingSubscription(subscription));  }}  }
class C{  public URI(URI p_base,String p_uriSpec) throws MalformedURIException {  initialize(p_base,p_uriSpec);}  }
class C{  public static Properties prefixProperties(Properties props,String prefix){  Properties prefixProps=new Properties();  for (  String key : props.stringPropertyNames()) {    if (key.startsWith(prefix)) {      String keyWithoutPrefix=key.substring(prefix.length());      prefixProps.setProperty(keyWithoutPrefix,props.getProperty(key));    }  }  return prefixProps;}  }
class C{  protected Optional<PaginationParameters> generatePaginationParameters(String perPage,String page) throws BadApiRequestException {  try {    return "".equals(perPage) && "".equals(page) ? Optional.empty() : Optional.of(new PaginationParameters(perPage,page));  } catch (  BadPaginationException invalidParameters) {    throw new BadApiRequestException(invalidParameters.getMessage());  }}  }
class C{  public XMLWriter(PrintWriter out){  this(out,2);}  }
class C{  @Override public void removeRaster(Symbolizer symbolizer){}  }
class C{  @Deployment(resources={"org/activiti/engine/test/bpmn/event/signal/SignalEventTest.testSignalWithGlobalScope.bpmn20.xml"}) public void testSignalProcessInstanceStart() throws Exception {  this.runtimeService.startProcessInstanceByKey("processWithSignalCatch");  listener.clearEventsReceived();  runtimeService.startProcessInstanceByKey("processWithSignalThrow");  listener.clearEventsReceived();}  }
class C{  public CompilationUnit addSourceFile(String name){  return sourceFiles.addSourceFile(name);}  }
class C{  public void removeAnimation(Animation animation){  mAnimations.remove(animation);}  }
class C{  void update(BroadphaseKey key,DynamicAABBTreeLeaf<E,T> node,E collidable,T fixture){  Transform tx=collidable.getTransform();  AABB aabb=fixture.getShape().createAABB(tx);  if (node.aabb.contains(aabb)) {    return;  }  aabb.expand(this.expansion);  this.remove(node);  node.aabb=aabb;  this.insert(node);}  }
class C{  public boolean wantTag(Tag t){  return (t instanceof DependenceTag);}  }
class C{  public static Map<String,Object> createPartyGroup(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Timestamp now=UtilDateTime.nowTimestamp();  String partyId=(String)context.get("partyId");  Locale locale=(Locale)context.get("locale");  if (UtilValidate.isEmpty(partyId)) {    try {      partyId=delegator.getNextSeqId("Party");    } catch (    IllegalArgumentException e) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.could_not_create_party_group_generation_failure",locale));    }  } else {    if (partyId.matches("\\d+")) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.could_not_create_party_ID_digit",locale));    }  }  try {    GenericValue party=EntityQuery.use(delegator).from("Party").where("partyId",partyId).queryOne();    GenericValue partyGroupPartyType=EntityQuery.use(delegator).from("PartyType").where("partyTypeId","PARTY_GROUP").cache().queryOne();    if (partyGroupPartyType == null) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.partyservices.party_type_not_found_in_database_cannot_create_party_group",locale));    }    if (party != null) {      GenericValue partyType=party.getRelatedOne("PartyType",true);      if (!EntityTypeUtil.isType(partyType,partyGroupPartyType)) {        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.partyservices.cannot_create_party_group_already_exists_not_PARTY_GROUP_type",locale));      }    } else {      String partyTypeId="PARTY_GROUP";      if (UtilValidate.isNotEmpty(context.get("partyTypeId"))) {        GenericValue desiredPartyType=EntityQuery.use(delegator).from("PartyType").where("partyTypeId",context.get("partyTypeId")).cache().queryOne();        if (desiredPartyType != null && EntityTypeUtil.isType(desiredPartyType,partyGroupPartyType)) {          partyTypeId=desiredPartyType.getString("partyTypeId");        } else {          return ServiceUtil.returnError(UtilProperties.getMessage(resource,"PartyPartyTypeIdNotFound",UtilMisc.toMap("partyTypeId",context.get("partyTypeId")),locale));        }      }      Map<String,Object> newPartyMap=UtilMisc.toMap("partyId",partyId,"partyTypeId",partyTypeId,"createdDate",now,"lastModifiedDate",now);      if (userLogin != null) {        newPartyMap.put("createdByUserLogin",userLogin.get("userLoginId"));        newPartyMap.put("lastModifiedByUserLogin",userLogin.get("userLoginId"));      }      String statusId=(String)context.get("statusId");      party=delegator.makeValue("Party",newPartyMap);      party.setNonPKFields(context);      if (statusId == null) {        statusId="PARTY_ENABLED";      }      party.set("statusId",statusId);      party.create();      GenericValue partyStat=delegator.makeValue("PartyStatus",UtilMisc.toMap("partyId",partyId,"statusId",statusId,"statusDate",now));      partyStat.create();    }    GenericValue partyGroup=EntityQuery.use(delegator).from("PartyGroup").where("partyId",partyId).queryOne();    if (partyGroup != null) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.cannot_create_party_group_already_exists",locale));    }    partyGroup=delegator.makeValue("PartyGroup",UtilMisc.toMap("partyId",partyId));    partyGroup.setNonPKFields(context);    partyGroup.create();  } catch (  GenericEntityException e) {    Debug.logWarning(e,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.data_source_error_adding_party_group",UtilMisc.toMap("errMessage",e.getMessage()),locale));  }  result.put("partyId",partyId);  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  @Override public List<Writable> next(){  Text t=(Text)super.next().iterator().next();  String val=new String(t.getBytes());  List<Writable> ret=new ArrayList<>();  StringTokenizer tok;  int index, max;  String col;  double value;  try {    max=0;    tok=new StringTokenizer(val," \t");    tok.nextToken();    while (tok.hasMoreTokens()) {      col=tok.nextToken();      if (col.startsWith("#"))       break;      if (col.startsWith("qid:"))       continue;      index=Integer.parseInt(col.substring(0,col.indexOf(":")));      if (index > max)       max=index;    }    tok=new StringTokenizer(val," \t");    double classVal=Double.parseDouble(tok.nextToken());    while (tok.hasMoreTokens()) {      col=tok.nextToken();      if (col.startsWith("#"))       break;      if (col.startsWith("qid:"))       continue;      index=Integer.parseInt(col.substring(0,col.indexOf(":")));      value=Double.parseDouble(col.substring(col.indexOf(":") + 1));      ret.add(new DoubleWritable(value));    }    ret.add(new DoubleWritable(classVal));  } catch (  Exception e) {    log.error("Error parsing line '" + val + "': ",e);  }  return ret;}  }
class C{  public Pair<SourceContextAndPath,Stmt> popTopCallStackItem(){  if (callStack == null || callStack.isEmpty())   return null;  SourceContextAndPath scap=clone();  return new Pair<>(scap,scap.callStack.remove(0));}  }
class C{  public Well44497a(int[] seed){  super(K,seed);}  }
class C{  void removeProgressNotificationForDownload(int downloadId){  mDownloadProgressMap.remove(downloadId);  mDownloadNotifier.cancelNotification(downloadId);  removeDownloadIdFromSharedPrefs(downloadId);}  }
class C{  public void addParameter(ParameterDeclaration node){  List<ParameterDeclaration> list=(parent == null || state == null) ? getParameterListNoTransform() : getParameterList();  list.addChild(node);}  }
class C{  public Builder integerToCategorical(String columnName,Map<Integer,String> categoryIndexNameMap){  return transform(new IntegerToCategoricalTransform(columnName,categoryIndexNameMap));}  }
class C{  public static boolean isScreenSw(int smallestWidthDp){  DisplayMetrics displayMetrics=Resources.getSystem().getDisplayMetrics();  float widthDp=displayMetrics.widthPixels / displayMetrics.density;  float heightDp=displayMetrics.heightPixels / displayMetrics.density;  float screenSw=Math.min(widthDp,heightDp);  return screenSw >= smallestWidthDp;}  }
class C{  public static JSONArray toJSONArray(String string) throws JSONException {  return toJSONArray(new JSONTokener(string));}  }
class C{  public boolean hasLeaseRenewalManager(){  return leaseRenewalManager != null;}  }
class C{  public boolean findPrevious(String regularExpression){  return findAndUncollapseNext(regularExpression,true,false) > 0;}  }
class C{  boolean aboutEquals(float moduleSize,float i,float j){  if (Math.abs(i - getY()) <= moduleSize && Math.abs(j - getX()) <= moduleSize) {    float moduleSizeDiff=Math.abs(moduleSize - estimatedModuleSize);    return moduleSizeDiff <= 1.0f || moduleSizeDiff <= estimatedModuleSize;  }  return false;}  }
class C{  public static float convertPixelToDp(Context context,float px){  Resources resources=context.getResources();  DisplayMetrics metrics=resources.getDisplayMetrics();  return px / (metrics.densityDpi / 160f);}  }
class C{  public void startPreview(){  if (camera != null && !previewing) {    camera.startPreview();    previewing=true;  }}  }
class C{  public boolean hasDualWeaponEquipped(ItemSlot slot){  ItemSlot[] slotValues=ItemSlot.getSlotsFor(slot.getSlotIdMask());  if (slotValues.length == 0) {    return false;  }  for (  ItemSlot s : slotValues) {    Item weapon=equipment.get(s.getSlotIdMask());    if (weapon == null || weapon.getItemTemplate().isTwoHandWeapon()) {      continue;    }    if (weapon.getItemTemplate().getWeaponType() != null) {      return true;    }  }  return false;}  }
class C{  private void applyData(){  dataModel.applyData(application);}  }
class C{  @Override public void endCDATA(Augmentations augs) throws XNIException {  if (fAnnotationDepth != -1) {    schemaDOM.endAnnotationCDATA();  }}  }
class C{  private boolean checkTombStones(int level){switch (level) {case 1:    if (getNpcs(702673).isEmpty() && getNpcs(702674).isEmpty() && getNpcs(702675).isEmpty()) {      return true;    }  break;case 3:break;}return false;}  }
class C{  default String roleChildName(String type){  return String.format(ROLE_CHILD,type);}  }
class C{  protected InternalModule(String name,MaryDataType inputType,MaryDataType outputType,Locale locale){  this.name=name;  this.inputType=inputType;  this.outputType=outputType;  this.locale=locale;  this.state=MODULE_OFFLINE;}  }
class C{  public static void replaceContentView(Window window,ViewGroup newContentView){  ViewGroup decorView=(ViewGroup)window.getDecorView();  View content=decorView.getChildAt(0);  decorView.removeView(content);  newContentView.addView(content);  decorView.addView(newContentView);}  }
class C{  @NotNull @Override public ExitCode build(CompileContext context,ModuleChunk chunk,DirtyFilesHolder<JavaSourceRootDescriptor,ModuleBuildTarget> dirtyFilesHolder,OutputConsumer outputConsumer){  JpsAndroidGradleModuleExtension extension=AndroidGradleJps.getFirstExtension(chunk);  if (extension == null) {    return ExitCode.NOTHING_DONE;  }  return ExitCode.OK;}  }
class C{  public boolean contains(Object u){  return innerChain.contains(u);}  }
class C{  public boolean isSPD(){  return isspd;}  }
class C{  public SubreportStartEntry(String name){  super();  this.name=name;}  }
class C{  public EnvVar(EnvVar envVar,boolean predefined){  this.name=envVar.name;  this.type=envVar.type;  this.value=envVar.value;  this.predefined=predefined;}  }
class C{  public static void writeSwappedLong(byte[] data,int offset,long value){  data[offset + 0]=(byte)((value >> 0) & 0xff);  data[offset + 1]=(byte)((value >> 8) & 0xff);  data[offset + 2]=(byte)((value >> 16) & 0xff);  data[offset + 3]=(byte)((value >> 24) & 0xff);  data[offset + 4]=(byte)((value >> 32) & 0xff);  data[offset + 5]=(byte)((value >> 40) & 0xff);  data[offset + 6]=(byte)((value >> 48) & 0xff);  data[offset + 7]=(byte)((value >> 56) & 0xff);}  }
class C{  public synchronized int write(InputStream in) throws IOException {  int readCount=0;  int inBufferPos=count - filledBufferSum;  int n=in.read(currentBuffer,inBufferPos,currentBuffer.length - inBufferPos);  while (n != -1) {    readCount+=n;    inBufferPos+=n;    count+=n;    if (inBufferPos == currentBuffer.length) {      needNewBuffer(currentBuffer.length);      inBufferPos=0;    }    n=in.read(currentBuffer,inBufferPos,currentBuffer.length - inBufferPos);  }  return readCount;}  }
class C{  public static void printf(String format,Object... args){  out.printf(LOCALE,format,args);  out.flush();}  }
class C{  public XMLGrammarPoolImplExtension(int initialCapacity){  super(initialCapacity);}  }
class C{  public static Z1 nz1(int n) throws JampackException {  Z1 zone=new Z1(n);  for (int i=0; i < n; i++) {    zone.re[i]=R.nextGaussian();    zone.im[i]=R.nextGaussian();  }  return zone;}  }
class C{  protected AudioRestoreQuery audioId(int value){  return unsafeParam("audio_id",value);}  }
class C{  public static void init(Configuration conf){  ROOT=conf.getString("temp.path","/opt/temp/");}  }
class C{  public static String formatTime(Date date,String dateTimeFormat,Locale locale,TimeZone timeZone){  return UtilDateTime.toTimeFormat(dateTimeFormat,timeZone,locale).format(date);}  }
class C{  public ResponseInfo(ResponseInfo other){  __isset_bit_vector.clear();  __isset_bit_vector.or(other.__isset_bit_vector);  this.sequenceId=other.sequenceId;  this.status=other.status;  if (other.isSetMessage()) {    this.message=other.message;  }}  }
class C{  public static final byte rollRight(final byte in,final int count){  int tmp=(int)in & 0xFF;  tmp=(tmp << 8) >>> (count % 8);  return (byte)((tmp & 0xFF) | (tmp >>> 8));}  }
class C{  private boolean addCallbackMethods(SootClass currentClass){  return addCallbackMethods(currentClass,null,"");}  }
class C{  @SuppressWarnings("unchecked") public static void registerModule(MaryModule module,Locale locale,Voice voice) throws IllegalStateException {  if (registrationComplete)   throw new IllegalStateException("cannot register modules after registration is complete");  MaryDataType type=module.inputType();  Object o=mkm.get(type,locale,voice);  List<MaryModule> l;  if (o != null) {    assert o instanceof List : "Expected List of MaryModules, got " + o.getClass();    l=(List<MaryModule>)o;  } else {    l=new ArrayList<MaryModule>(1);    mkm.put(type,locale,voice,l);  }  assert l != null;  l.add(module);  allModules.add(module);  MaryDataType.registerDataType(type);  MaryDataType.registerDataType(module.outputType());}  }
class C{  public ServerRequest(RequestTypeOuterClass.RequestType type,GeneratedMessage req){  RequestOuterClass.Request.Builder reqBuilder=RequestOuterClass.Request.newBuilder();  reqBuilder.setRequestMessage(req.toByteString());  reqBuilder.setRequestType(type);  this.request=reqBuilder.build();  this.type=type;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ReturnHome_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200304,skillname);}  }
class C{  public static String convertTime(int time){  time/=1000;  int minute=time / 60;  int second=time % 60;  minute%=60;  return String.format("%02d:%02d",minute,second);}  }
class C{  @Override public void clear(){synchronized (fGrammarPool) {    fGrammarPool.clear();  }}  }
class C{  protected void processThermostatModeReport(SerialMessage serialMessage,int offset,int endpoint) throws ZWaveSerialMessageException {  int value=serialMessage.getMessagePayloadByte(offset + 1);  logger.debug("NODE {}: Thermostat Mode report, value = {}",this.getNode().getNodeId(),value);  ModeType modeType=ModeType.getModeType(value);  if (modeType == null) {    logger.error("NODE {}: Unknown Mode Type = {}, ignoring report.",this.getNode().getNodeId(),value);    return;  }  if (!modeTypes.contains(modeType)) {    modeTypes.add(modeType);  }  dynamicDone=true;  logger.debug("NODE {}: Thermostat Mode Report, value = {}",this.getNode().getNodeId(),modeType.getLabel());  ZWaveCommandClassValueEvent zEvent=new ZWaveCommandClassValueEvent(this.getNode().getNodeId(),endpoint,this.getCommandClass(),value);  this.getController().notifyEventListeners(zEvent);}  }
class C{  public Object[] next(){  return getSortedRecordFromFile();}  }
class C{  public boolean canFrameImage(BufferedImage image,ScreenOrientation orientation){  if (isStretchable()) {    return true;  }  if (orientation == ScreenOrientation.PORTRAIT && myPortrait == null) {    return false;  } else   if (orientation == ScreenOrientation.LANDSCAPE && myLandscape == null) {    return false;  }  Dimension screenSize=getArtDescriptor(orientation).getScreenSize();  if (image.getWidth() < screenSize.getWidth() || image.getHeight() < screenSize.getHeight()) {    return false;  }  double imgAspectRatio=image.getWidth() / (double)image.getHeight();  double descriptorAspectRatio=getAspectRatio(orientation);  return Math.abs(imgAspectRatio - descriptorAspectRatio) < ImageUtils.EPSILON;}  }
class C{  public View(Class<T> type,String sqlExpression){  super(type,sqlExpression);}  }
class C{  public boolean isSolutionOptimal(){  return tableau != null ? tableau.isOptimal() : false;}  }
class C{  @Override public synchronized void put(String key,Entry entry){  pruneIfNeeded(entry.data.length);  File file=getFileForKey(key);  try {    BufferedOutputStream fos=new BufferedOutputStream(new FileOutputStream(file));    CacheHeader e=new CacheHeader(key,entry);    boolean success=e.writeHeader(fos);    if (!success) {      fos.close();      VolleyLog.d("Failed to write header for %s",file.getAbsolutePath());      throw new IOException();    }    fos.write(entry.data);    fos.close();    putEntry(key,e);    return;  } catch (  IOException e) {  }  boolean deleted=file.delete();  if (!deleted) {    VolleyLog.d("Could not clean up file %s",file.getAbsolutePath());  }}  }
class C{  public double averageArea(){  return averageArea(level);}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Deform_A_TO_SELF(String skillcaster,String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200807,skillcaster,value0,skillname);}  }
class C{  protected void initializeColumnLabels(){  if (getNumObjectiveFunctions() == 2) {    columnLabels.add("W");  }  columnLabels.add("Z");  for (int i=0; i < getOriginalNumDecisionVariables(); i++) {    columnLabels.add("x" + i);  }  if (!restrictToNonNegative) {    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for (int i=0; i < getNumSlackVariables(); i++) {    columnLabels.add("s" + i);  }  for (int i=0; i < getNumArtificialVariables(); i++) {    columnLabels.add("a" + i);  }  columnLabels.add("RHS");}  }
class C{  protected int sinkEvent(Widget widget,String typeName){  return Event.getTypeInt(typeName);}  }
class C{  public String[] connect(String host,int port) throws IllegalStateException, IOException, FTPIllegalReplyException, FTPException {synchronized (lock) {    if (connected) {      throw new IllegalStateException("Client already connected to " + host + " on port "+ port);    }    Socket connection=null;    try {      connection=connector.connectForCommunicationChannel(host,port);      if (security == SECURITY_FTPS) {        connection=ssl(connection,host,port);      }      communication=new FTPCommunicationChannel(connection,pickCharset());      for (Iterator i=communicationListeners.iterator(); i.hasNext(); ) {        communication.addCommunicationListener((FTPCommunicationListener)i.next());      }      FTPReply wm=communication.readFTPReply();      if (!wm.isSuccessCode()) {        throw new FTPException(wm);      }      this.connected=true;      this.authenticated=false;      this.parser=null;      this.host=host;      this.port=port;      this.username=null;      this.password=null;      this.utf8Supported=false;      this.restSupported=false;      this.mlsdSupported=false;      this.modezSupported=false;      this.dataChannelEncrypted=false;      return wm.getMessages();    } catch (    IOException e) {      throw e;    } finally {      if (!connected) {        if (connection != null) {          try {            connection.close();          } catch (          Throwable t) {            ;          }        }      }    }  }}  }
class C{  @Override public int hashCode(){  int hash=37;  hash=37 * hash + Float.floatToIntBits(m00);  hash=37 * hash + Float.floatToIntBits(m01);  hash=37 * hash + Float.floatToIntBits(m02);  hash=37 * hash + Float.floatToIntBits(m03);  hash=37 * hash + Float.floatToIntBits(m10);  hash=37 * hash + Float.floatToIntBits(m11);  hash=37 * hash + Float.floatToIntBits(m12);  hash=37 * hash + Float.floatToIntBits(m13);  hash=37 * hash + Float.floatToIntBits(m20);  hash=37 * hash + Float.floatToIntBits(m21);  hash=37 * hash + Float.floatToIntBits(m22);  hash=37 * hash + Float.floatToIntBits(m23);  hash=37 * hash + Float.floatToIntBits(m30);  hash=37 * hash + Float.floatToIntBits(m31);  hash=37 * hash + Float.floatToIntBits(m32);  hash=37 * hash + Float.floatToIntBits(m33);  return hash;}  }
class C{  @Override public void reset() throws IOException {  fInputStream.reset();}  }
class C{  protected UserDefinedAction finishRecording(){  enabled=false;  try {    MouseGesture gesture=processCurrentData();    if (MouseGesture.IGNORED_CLASSIFICATIONS.contains(gesture)) {      return null;    }    UserDefinedAction task=actionMap.get(gesture);    if (task != null) {      task.setInvoker(TaskActivation.newBuilder().withMouseGesture(gesture).build());      task.setInvokingMouseGesture(gesture);    }    return task;  } catch (  Exception e) {    LOGGER.log(Level.WARNING,"Unable to classify recorded data",e);  }  return null;}  }
class C{  private boolean isMenuDrawerOpen(){  if (mDrawerLayout != null) {    return mDrawerLayout.isDrawerOpen(MENU_DRAWER_GRAVITY);  } else {    return false;  }}  }
class C{  private static short rangeCheck(int value) throws NumberFormatException {  if (value < MIN_VALUE || value > MAX_VALUE) {    throw new NumberFormatException("Value is out of range : " + value);  }  return (short)value;}  }
class C{  public BitSet isScanRequired(byte[][] blkMaxVal,byte[][] blkMinVal){  BitSet bitSet=new BitSet(1);  byte[][] filterValues=dimColumnExecuterInfo.getFilterKeys();  int columnIndex=dimColumnEvaluatorInfo.getColumnIndex();  int blockIndex=segmentProperties.getDimensionOrdinalToBlockMapping().get(columnIndex);  int[] cols=getAllColumns(columnIndex);  byte[] maxValue=getMinMaxData(cols,blkMaxVal[blockIndex],columnIndex);  byte[] minValue=getMinMaxData(cols,blkMinVal[blockIndex],columnIndex);  boolean isScanRequired=false;  for (int k=0; k < filterValues.length; k++) {    int maxCompare=ByteUtil.UnsafeComparer.INSTANCE.compareTo(filterValues[k],maxValue);    int minCompare=ByteUtil.UnsafeComparer.INSTANCE.compareTo(filterValues[k],minValue);    if (maxCompare <= 0 && minCompare >= 0) {      isScanRequired=true;      break;    }  }  if (isScanRequired) {    bitSet.set(0);  }  return bitSet;}  }
class C{  public PhotosGetCommentsQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public static void o(double[] a){  o(a,Parameters.OutputFieldWidth,Parameters.OutputFracPlaces);}  }
class C{  GSMessageImpl duplicate() throws JMSException {  GSTextMessageImpl dup=new GSTextMessageImpl();  copyTo(dup);  return dup;}  }
class C{  @Override public void filter(ContainerRequestContext request) throws IOException {  appendRequestId(request.getHeaders().getFirst(X_REQUEST_ID_HEADER));  RequestLog.startTiming(TOTAL_TIMER);  RequestLog.startTiming(this);  RequestLog.record(new Preface(request));  lengthOfRequestEntity(request);  request.setProperty(PROPERTY_NANOS,System.nanoTime());  RequestLog.stopTiming(this);}  }
class C{  String nextSessionId(){  return cnxKey + "_sess_" + sessionsC.increment();}  }
class C{  @Override protected void synchronizeData(){  needsSyncData(false);  DeferredDocumentImpl ownerDocument=(DeferredDocumentImpl)this.ownerDocument();  data=ownerDocument.getNodeValueString(fNodeIndex);}  }
class C{  public BoardGetCommentsQuery sort(BoardGetCommentsSort value){  return unsafeParam("sort",value);}  }
class C{  @Transactional @RequestMapping(method=RequestMethod.POST,value="/api/textunits") public TextUnitDTO addTextUnit(@RequestBody TextUnitDTO textUnitDTO){  logger.debug("Add TextUnit");  textUnitDTO.setTarget(NormalizationUtils.normalize(textUnitDTO.getTarget()));  TMTextUnitCurrentVariant addTMTextUnitCurrentVariant=tmService.addTMTextUnitCurrentVariant(textUnitDTO.getTmTextUnitId(),textUnitDTO.getLocaleId(),textUnitDTO.getTarget(),textUnitDTO.getTargetComment(),textUnitDTO.getStatus(),textUnitDTO.isIncludedInLocalizedFile());  textUnitDTO.setTmTextUnitCurrentVariantId(addTMTextUnitCurrentVariant.getId());  textUnitDTO.setTmTextUnitVariantId(addTMTextUnitCurrentVariant.getTmTextUnitVariant().getId());  return textUnitDTO;}  }
class C{  private void createItemsLayout(){  if (itemsLayout == null) {    itemsLayout=new LinearLayout(getContext());    itemsLayout.setOrientation(LinearLayout.VERTICAL);  }}  }
class C{  public void invalidate(int row){  if (m_tuples == null || row < 0 || row >= m_tuples.length) {    return;  } else   if (m_tuples[row] != null) {    m_tuples[row].invalidate();    m_tuples[row]=null;  }}  }
class C{  private static void convertActivityToTranslucentAfterL(Activity activity){  try {    Method getActivityOptions=Activity.class.getDeclaredMethod("getActivityOptions");    getActivityOptions.setAccessible(true);    Object options=getActivityOptions.invoke(activity);    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method convertToTranslucent=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz,ActivityOptions.class);    convertToTranslucent.setAccessible(true);    convertToTranslucent.invoke(activity,null,options);  } catch (  Throwable t) {  }}  }
class C{  @DataProvider public Object[][] invalidIdProvider(){  return new Object[][]{new Object[]{"31455824-6676-4cd8-8fd1-85ce0013f2d7","Experiment \"31455824-6676-4cd8-8fd1-85ce0013f2d7\" not found",HttpStatus.SC_NOT_FOUND},new Object[]{"00000000-0000-0000-0000-000000000000","Experiment \"00000000-0000-0000-0000-000000000000\" not found",HttpStatus.SC_NOT_FOUND},new Object[]{"foobar","com.intuit.wasabi.experimentobjects.exceptions.InvalidIdentifierException: Invalid experiment identifier \"foobar\"",HttpStatus.SC_INTERNAL_SERVER_ERROR},new Object[]{"0","com.intuit.wasabi.experimentobjects.exceptions.InvalidIdentifierException: Invalid experiment identifier \"0\"",HttpStatus.SC_INTERNAL_SERVER_ERROR},new Object[]{"../applications","The server was unable to process the request",HttpStatus.SC_INTERNAL_SERVER_ERROR}};}  }
class C{  @RequestMapping(value="/servers/shutdown",method=RequestMethod.POST) public JsonResponse shutdownServer(@RequestParam("server") String server){  serverService.shutdownServer(server);  return JsonResponse.ok(true);}  }
class C{  public PlaceAutocompleteAdapter(Context context,GoogleApiClient googleApiClient,LatLngBounds bounds,AutocompleteFilter filter){  super(context,android.R.layout.simple_expandable_list_item_2,android.R.id.text1);  mGoogleApiClient=googleApiClient;  mBounds=bounds;  mPlaceFilter=filter;}  }
class C{  public long adjustOrPutValue(final K key,final long adjust_amount,final long put_amount){  int index=insertionIndex(key);  final boolean isNewMapping;  final long newValue;  if (index < 0) {    index=-index - 1;    newValue=(_values[index]+=adjust_amount);    isNewMapping=false;  } else {    newValue=(_values[index]=put_amount);    isNewMapping=true;  }  K oldKey=(K)_set[index];  _set[index]=key;  if (isNewMapping) {    postInsertHook(oldKey == FREE);  }  return newValue;}  }
class C{  private void populatePath(boolean optimizePinnedToEnd){  int numPoints=mChartData.getNumPoints();  mPath.reset();  if (numPoints == 0) {    return;  }  updatePathCalcs();  List<ChartData.DataPoint> points;  if (optimizePinnedToEnd) {    points=mChartData.getPointsInRangeToEnd(mChartOptions.getRenderedXMin() - BUFFER_MS);  } else {    points=mChartData.getPointsInRange(mChartOptions.getRenderedXMin() - BUFFER_MS,mChartOptions.getRenderedXMax() + BUFFER_MS);  }  int numPlottedPoints=points.size();  if (numPlottedPoints == 0) {    return;  }  mPath.moveTo(getPathX(points.get(0).getX()),getPathY(points.get(0).getY()));  for (int i=1; i < numPlottedPoints; i++) {    mPath.lineTo(getPathX(points.get(i).getX()),getPathY(points.get(i).getY()));  }  mHasPath=true;  mXMinInPath=points.get(0).getX();  mXMaxInPath=points.get(numPlottedPoints - 1).getX();}  }
class C{  public String parseTemplate(String templateString,Map<String,Object> data){  GraqlTemplateLexer lexer=getLexer(templateString);  CommonTokenStream tokens=new CommonTokenStream(lexer);  GraqlTemplateParser parser=getParser(tokens);  parser.setBuildParseTree(true);  ParseTree tree=parser.template();  TemplateVisitor visitor=new TemplateVisitor(tokens,data,macros);  return visitor.visit(tree).toString();}  }
class C{  public XmlParser(Context context,String changeLogFileResourceUrl){  super(context);  this.mChangeLogFileResourceUrl=changeLogFileResourceUrl;}  }
class C{  @Override public void onTimeout(){}  }
class C{  public static String htmlNewline(String text){  if (text == null || text.trim().isEmpty()) {    return null;  }  return text.replaceAll("(\n|\r|\r\n)","<br>");}  }
class C{  public static String document2String(Document document) throws MaryConfigurationException {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  document2Stream(document,baos);  try {    return new String(baos.toByteArray(),"UTF-8");  } catch (  UnsupportedEncodingException uee) {    Log.d(Mary.LOG,"oops" + uee.toString());    throw new MaryConfigurationException("oops",uee);  }}  }
class C{  public static Diphone loadBinary(DataInputStream dis) throws IOException {  StringBuffer sb=new StringBuffer();  int midPoint;  int numSamples;  Sample[] samples;  if (dis.readInt() != MAGIC) {    throw new Error("Bad magic number in diphone");  }  for (int i=0; i < NAME_LENGTH; i++) {    char c=dis.readChar();    if (!Character.isWhitespace(c)) {      sb.append(c);    }  }  midPoint=dis.readInt();  numSamples=dis.readInt();  samples=new Sample[numSamples];  for (int i=0; i < numSamples; i++) {    samples[i]=Sample.loadBinary(dis);  }  return new Diphone(sb.toString().trim(),samples,midPoint);}  }
class C{  @Override public void close() throws IOException {  OutputStream output=m_streams.get();  if (null != output) {    output.close();  }}  }
class C{  public boolean tryUse(){  return used.compareAndSet(false,true);}  }
class C{  public static final String printIterable(Iterable iIterable,String sSeparator){  StringBuffer sbRes=new StringBuffer();  Iterator iIter=iIterable.iterator();  while (iIter.hasNext()) {    Object oNext=iIter.next();    sbRes.append(oNext.toString());    if (iIter.hasNext())     sbRes.append(sSeparator);  }  return sbRes.toString();}  }
class C{  private String deEscapeLiteral(String lit){  return lit.replaceAll("\\\\\"","\"");}  }
class C{  public static boolean checkContentCanBePulledUp(PtrFrameLayout frame,View content,View header){  return !canChildScrollDown(content);}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  public ValueComboBoxDataGroup(String groupName,List<ValueComboBoxData> dataList,boolean isSubMenu){  super();  this.groupName=groupName;  this.dataList=dataList;  this.isSubMenu=isSubMenu;}  }
class C{  public void start(){  mTargetWrapperView.prepareTransition(mToShow);  mContainer.prepareTransition(mToShow);  if (mToShow == null) {    continueAnimation();  } else {    mTargetWrapperView.getViewTreeObserver().addOnGlobalLayoutListener(this);  }}  }
class C{  public void removeCategoriesListener(SnapshotCategoriesListener listener){  listeners.remove(listener);}  }
class C{  public GrimpBody newBody(Body b,String phase){  return new GrimpBody(b);}  }
class C{  private void checkIfEmpty(){  if (emptyView != null && getAdapter() != null) {    final boolean emptyViewVisible=((MjolnirRecyclerAdapter)getAdapter()).getCollectionCount() == 0;    emptyView.setVisibility(emptyViewVisible ? VISIBLE : GONE);    setVisibility(emptyViewVisible ? GONE : VISIBLE);  }}  }
class C{  public static IBlockState ParseBlockType(String s){  if (s == null)   return null;  Block block=(Block)Block.blockRegistry.getObject(new ResourceLocation(s));  if (block instanceof BlockAir && !s.equals("air"))   return null;  return block.getDefaultState();}  }
class C{  public static void makeSnackBar(View parentView,String str,int length){  final Snackbar snackbar=Snackbar.make(parentView,str,length);  snackbar.show();}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  registrarID=new ServiceID(in);  if (server == null) {    throw new InvalidObjectException("null server");  }}  }
class C{  public static ObjectSequence<TimeSeriesCollection> fixSequence(ObjectSequence<TimeSeriesCollection> seq){  seq=seq.sort();  if (!seq.isDistinct() && !seq.isEmpty()) {    List<ObjectSequence<TimeSeriesCollection>> toConcat=new ArrayList<>();    int lastGoodIdx=0;    int curIdx=0;    while (curIdx < seq.size()) {      final TimeSeriesCollection curElem=seq.get(curIdx);      int nextIdx=curIdx + 1;      while (nextIdx < seq.size() && curElem.getTimestamp().equals(seq.get(nextIdx).getTimestamp())) {        ++nextIdx;      }      if (curIdx + 1 < nextIdx) {        toConcat.add(seq.limit(curIdx).skip(lastGoodIdx));        TimeSeriesCollection replacement=new LazyMergedTSC(seq.limit(nextIdx).skip(curIdx));        toConcat.add(ObjectSequence.of(true,true,true,replacement));        lastGoodIdx=curIdx=nextIdx;      } else {        ++curIdx;      }    }    if (lastGoodIdx < curIdx)     toConcat.add(seq.skip(lastGoodIdx));    seq=ObjectSequence.concat(toConcat,true,true);  }  return seq;}  }
class C{  V remove(Object key,int hash,Object value){  lock();  try {    int c=count - 1;    IHashEntry<K,V>[] tab=table;    int index=hash & (tab.length - 1);    IHashEntry<K,V> first=tab[index];    IHashEntry<K,V> e=first;    while (e != null && (_h.hash(e) != hash || !key.equals(_h.key(e))))     e=_h.next(e);    V oldValue=null;    if (e != null) {      V v=_h.value(e);      if (value == null || value.equals(v)) {        oldValue=v;        ++modCount;        IHashEntry<K,V> newFirst=_h.next(e);        for (IHashEntry<K,V> p=first; p != e; p=_h.next(p))         newFirst=_h.cloneEntry(p,newFirst);        tab[index]=newFirst;        count=c;      }    }    return oldValue;  }  finally {    unlock();  }}  }
class C{  public List<View> find(){  final List<View> views=new ArrayList<>();  if (nestedViewsFinder != null) {    views.addAll(nestedViewsFinder.find());  }  for (  final ViewGroup rootView : rootViews) {    if (includeRootView) {      views.add(rootView);    }    ViewsHelper.findChilds(rootView,views,new AggregatedViewFilters(viewFilters),addChildsFromFilteredGroupViews);  }  if (viewComparator != null) {    Collections.sort(views,viewComparator);  }  return views;}  }
class C{  private static int parseLine(Class service,URL u,BufferedReader r,int lc,List names,Set returned) throws IOException, ServiceConfigurationError {  String ln=r.readLine();  if (ln == null) {    return -1;  }  int ci=ln.indexOf('#');  if (ci >= 0)   ln=ln.substring(0,ci);  ln=ln.trim();  int n=ln.length();  if (n != 0) {    if ((ln.indexOf(' ') >= 0) || (ln.indexOf('\t') >= 0))     fail(service,u,lc,"Illegal configuration-file syntax");    if (!Character.isJavaIdentifierStart(ln.charAt(0)))     fail(service,u,lc,"Illegal provider-class name: " + ln);    for (int i=1; i < n; i++) {      char c=ln.charAt(i);      if (!Character.isJavaIdentifierPart(c) && (c != '.'))       fail(service,u,lc,"Illegal provider-class name: " + ln);    }    if (!returned.contains(ln)) {      names.add(ln);      returned.add(ln);    }  }  return lc + 1;}  }
class C{  @Override public boolean isFileModified(long fileTimeStamp,long endOffset){  boolean isFileModified=false;  if (getLastModifiedTime() > fileTimeStamp || getSize() > endOffset) {    isFileModified=true;  }  return isFileModified;}  }
class C{  public PolynomialFunction subtract(final PolynomialFunction p){  int lowLength=FastMath.min(coefficients.length,p.coefficients.length);  int highLength=FastMath.max(coefficients.length,p.coefficients.length);  double[] newCoefficients=new double[highLength];  for (int i=0; i < lowLength; ++i) {    newCoefficients[i]=coefficients[i] - p.coefficients[i];  }  if (coefficients.length < p.coefficients.length) {    for (int i=lowLength; i < highLength; ++i) {      newCoefficients[i]=-p.coefficients[i];    }  } else {    System.arraycopy(coefficients,lowLength,newCoefficients,lowLength,highLength - lowLength);  }  return new PolynomialFunction(newCoefficients);}  }
class C{  @Override public void onRemoteOperationFinish(RemoteOperation operation,RemoteOperationResult result){  super.onRemoteOperationFinish(operation,result);  if (result.isSuccess() || (operation instanceof GetSharesForFileOperation && result.getCode() == RemoteOperationResult.ResultCode.SHARE_NOT_FOUND)) {    Log_OC.d(TAG,"Refreshing view on successful operation or finished refresh");    refreshSharesFromStorageManager();  }  if (operation instanceof CreateShareViaLinkOperation) {    onCreateShareViaLinkOperationFinish((CreateShareViaLinkOperation)operation,result);  }  if (operation instanceof UnshareOperation && result.isSuccess() && getEditShareFragment() != null) {    getSupportFragmentManager().popBackStack();  }  if (operation instanceof UpdateSharePermissionsOperation && getEditShareFragment() != null && getEditShareFragment().isAdded()) {    getEditShareFragment().onUpdateSharePermissionsFinished(result);  }}  }
class C{  public CreateSimpleLexer langHandlerForExtension(String extension,String source){  if (!(extension != null && langHandlerRegistry.get(extension) != null)) {    extension=Util.test(Pattern.compile("^\\s*<"),source) ? "default-markup" : "default-code";  }  Object handler=langHandlerRegistry.get(extension);  if (handler instanceof CreateSimpleLexer) {    return (CreateSimpleLexer)handler;  } else {    CreateSimpleLexer _simpleLexer;    try {      Lang _lang=((Class<Lang>)handler).newInstance();      _simpleLexer=new CreateSimpleLexer(_lang.getShortcutStylePatterns(),_lang.getFallthroughStylePatterns());      List<Lang> extendedLangs=_lang.getExtendedLangs();      for (      Lang _extendedLang : extendedLangs) {        register(_extendedLang.getClass());      }      List<String> fileExtensions=getFileExtensionsFromClass((Class<Lang>)handler);      for (      String _extension : fileExtensions) {        langHandlerRegistry.put(_extension,_simpleLexer);      }    } catch (    Exception ex) {      LOG.log(Level.SEVERE,null,ex);      return null;    }    return _simpleLexer;  }}  }
class C{  @Override public ElementLocator createLocator(Field field){  return new DefaultElementLocator(resolveContext(field),field);}  }
class C{  public static Style deepOrange(){  final Style style=new Style();  style.color=PaletteUtils.getSolidColor(PaletteUtils.MATERIAL_DEEP_ORANGE);  return style;}  }
class C{  @RequestMapping(value="/api/leveraging/copyTM",method=RequestMethod.POST) public CopyTmConfig copyTM(@RequestBody CopyTmConfig copyTmConfig){  logger.info("Copy repository TM");  Repository source=repositoryRepository.findOne(copyTmConfig.getSourceRepositoryId());  Repository target=repositoryRepository.findOne(copyTmConfig.getTargetRepositoryId());  PollableFuture pollableFuture;  if (CopyTmConfig.Mode.MD5.equals(copyTmConfig.getMode())) {    pollableFuture=leveragingService.copyAllTranslationsWithMD5MatchBetweenRepositories(source,target);  } else {    pollableFuture=leveragingService.copyAllTranslationsWithExactMatchBetweenRepositories(source,target);  }  copyTmConfig.setPollableTask(pollableFuture.getPollableTask());  return copyTmConfig;}  }
class C{  @Override protected WXFrameLayout initComponentHostView(Context context){  if (isSticky()) {    WXFrameLayout view=new WXFrameLayout(context);    mRealView=new WXFrameLayout(context);    view.addView(mRealView);    return view;  } else {    WXFrameLayout view=new WXFrameLayout(context);    mRealView=view;    return view;  }}  }
class C{  public VideoRestoreCommentQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public void testWriteReadFull() throws Exception {  ByteArrayOutputStream out=new ByteArrayOutputStream(0);  ObjectOutputStream os=new ObjectOutputStream(out);  os.writeObject(full);  ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));  ReplicationPolicy copy=(ReplicationPolicy)is.readObject();  is.close();  os.close();  assertTrue(helper.areEquals(full,copy));}  }
class C{  @Override public boolean isValueLineVariableLength(){  return mValueLineVariableLength;}  }
class C{  public static float readFloat(byte[] bytes,int start){  return WritableComparator.readFloat(bytes,start);}  }
class C{  protected String resolveLocalURI(String uri) throws IOException {  Enumeration en=catalogEntries.elements();  while (en.hasMoreElements()) {    CatalogEntry e=(CatalogEntry)en.nextElement();    if (e.getEntryType() == URI && (e.getEntryArg(0).equals(uri))) {      return e.getEntryArg(1);    }  }  en=catalogEntries.elements();  String startString=null;  String prefix=null;  while (en.hasMoreElements()) {    CatalogEntry e=(CatalogEntry)en.nextElement();    if (e.getEntryType() == REWRITE_URI) {      String p=e.getEntryArg(0);      if (p.length() <= uri.length() && p.equals(uri.substring(0,p.length()))) {        if (startString == null || p.length() > startString.length()) {          startString=p;          prefix=e.getEntryArg(1);        }      }    }  }  if (prefix != null) {    return prefix + uri.substring(startString.length());  }  en=catalogEntries.elements();  String suffixString=null;  String suffixURI=null;  while (en.hasMoreElements()) {    CatalogEntry e=(CatalogEntry)en.nextElement();    if (e.getEntryType() == URI_SUFFIX) {      String p=e.getEntryArg(0);      if (p.length() <= uri.length() && uri.endsWith(p)) {        if (suffixString == null || p.length() > suffixString.length()) {          suffixString=p;          suffixURI=e.getEntryArg(1);        }      }    }  }  if (suffixURI != null) {    return suffixURI;  }  en=catalogEntries.elements();  Vector delCats=new Vector();  while (en.hasMoreElements()) {    CatalogEntry e=(CatalogEntry)en.nextElement();    if (e.getEntryType() == DELEGATE_URI) {      String p=e.getEntryArg(0);      if (p.length() <= uri.length() && p.equals(uri.substring(0,p.length()))) {        delCats.addElement(e.getEntryArg(1));      }    }  }  if (delCats.size() > 0) {    Enumeration enCats=delCats.elements();    if (catalogManager.debug.getDebug() > 1) {      catalogManager.debug.message(2,"Switching to delegated catalog(s):");      while (enCats.hasMoreElements()) {        String delegatedCatalog=(String)enCats.nextElement();        catalogManager.debug.message(2,"\t" + delegatedCatalog);      }    }    Catalog dcat=newCatalog();    enCats=delCats.elements();    while (enCats.hasMoreElements()) {      String delegatedCatalog=(String)enCats.nextElement();      dcat.parseCatalog(delegatedCatalog);    }    return dcat.resolveURI(uri);  }  return null;}  }
class C{  @Override public String toString(){  return fXPath.toString();}  }
class C{  public static void logCurrent(String msg){  EGLDisplay display;  EGLContext context;  EGLSurface surface;  display=EGL14.eglGetCurrentDisplay();  context=EGL14.eglGetCurrentContext();  surface=EGL14.eglGetCurrentSurface(EGL14.EGL_DRAW);  Log.d(TAG,"Current EGL (" + msg + "): display="+ display+ ", context="+ context+ ", surface="+ surface);}  }
class C{  public AndSpacePredicate(ISpacePredicate leftPredicate,ISpacePredicate rightPredicate){  super(leftPredicate,rightPredicate);}  }
class C{  public AttributesImpl atts(){  return theAtts;}  }
class C{  protected boolean validate(Object obj){  return ((PoolableThread)obj).isAlive();}  }
class C{  @Contract("_, !null -> !null") @Nullable public static String prependResourcePrefix(@Nullable Module module,@Nullable String name){  if (module != null) {    AndroidFacet facet=AndroidFacet.getInstance(module);    if (facet != null) {      AndroidGradleModel androidModel=AndroidGradleModel.get(facet);      if (androidModel != null) {        String resourcePrefix=LintUtils.computeResourcePrefix(androidModel.getAndroidProject());        if (resourcePrefix != null) {          if (name != null) {            return name.startsWith(resourcePrefix) ? name : LintUtils.computeResourceName(resourcePrefix,name);          } else {            return resourcePrefix;          }        }      }    }  }  return name;}  }
class C{  void replacingNode(NodeImpl node){}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_XPBoost_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201214,skillcaster,skillname);}  }
class C{  protected void shareByEmail(){  ShareUtil.startShare(this,ShareConstant.SHARE_CHANNEL_EMAIL,getShareData(ShareConstant.SHARE_CHANNEL_EMAIL),ShareConstant.REQUEST_CODE);}  }
class C{  @Override public void onSelectionChanged(Selection selection){  SelectionModel selectionModel=myNlModel.getSelectionModel();  if (selection.isEmpty()) {    selectionModel.clear();    return;  }  List<NlComponent> components=new ArrayList<>();  for (  Selection.Element selectedElement : mySelection.getElements()) {    if (selectedElement.widget == myDragDropWidget) {      continue;    }    WidgetCompanion companion=(WidgetCompanion)selectedElement.widget.getCompanionWidget();    NlComponent component=(NlComponent)companion.getWidgetModel();    components.add(component);  }  if (!components.isEmpty()) {    selectionModel.setSelection(components);  } else {    selectionModel.clear();  }}  }
class C{  public AdamsMoultonFieldIntegrator(final Field<T> field,final int nSteps,final double minStep,final double maxStep,final double scalAbsoluteTolerance,final double scalRelativeTolerance) throws MathIllegalArgumentException {  super(field,METHOD_NAME,nSteps,nSteps + 1,minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);}  }
class C{  public Point3D(Point2D point,float z){  this(point.getX(),point.getY(),z);}  }
class C{  public static void saveBitmapToFile(Bitmap bmp,String fullPathWithFileName) throws IOException {  FileOutputStream out=null;  try {    out=new FileOutputStream(createParentDirIfNotExists(fullPathWithFileName));    bmp.compress(Bitmap.CompressFormat.PNG,100,out);  }  finally {    try {      if (out != null) {        out.close();      }    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  public static void putString(String key,String value){  prefs.edit().putString(key,value).commit();}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);}  }
class C{  public static void moveDirectory(File srcDir,File destDir) throws IOException {  if (srcDir == null) {    throw new NullPointerException("Source must not be null");  }  if (destDir == null) {    throw new NullPointerException("Destination must not be null");  }  if (!srcDir.exists()) {    throw new FileNotFoundException("Source '" + srcDir + "' does not exist");  }  if (!srcDir.isDirectory()) {    throw new IOException("Source '" + srcDir + "' is not a directory");  }  if (destDir.exists()) {    throw new FileExistsException("Destination '" + destDir + "' already exists");  }  boolean rename=srcDir.renameTo(destDir);  if (!rename) {    if (destDir.getCanonicalPath().startsWith(srcDir.getCanonicalPath())) {      throw new IOException("Cannot move directory: " + srcDir + " to a subdirectory of itself: "+ destDir);    }    copyDirectory(srcDir,destDir);    deleteDirectory(srcDir);    if (srcDir.exists()) {      throw new IOException("Failed to delete original directory '" + srcDir + "' after copy to '"+ destDir+ "'");    }  }}  }
class C{  public ChangeSet putInMap(String path,Serializable key,Serializable value){  return add(new PutInMapSpaceEntryMutator(path,key,value));}  }
class C{  private int expandChildren(Candidate candidate,S2Cell cell,int numLevels){  numLevels--;  S2Cell[] childCells=new S2Cell[4];  for (int i=0; i < 4; ++i) {    childCells[i]=new S2Cell();  }  cell.subdivide(childCells);  int numTerminals=0;  for (int i=0; i < 4; ++i) {    if (numLevels > 0) {      if (region.mayIntersect(childCells[i])) {        numTerminals+=expandChildren(candidate,childCells[i],numLevels);      }      continue;    }    Candidate child=newCandidate(childCells[i]);    if (child != null) {      candidate.children[candidate.numChildren++]=child;      if (child.isTerminal) {        ++numTerminals;      }    }  }  return numTerminals;}  }
class C{  public boolean isValidInet6Address(String inet6Address){  boolean containsCompressedZeroes=inet6Address.indexOf("::") > -1;  if (containsCompressedZeroes && (inet6Address.indexOf("::") != inet6Address.lastIndexOf("::"))) {    return false;  }  if ((inet6Address.startsWith(":") && !inet6Address.startsWith("::")) || (inet6Address.endsWith(":") && !inet6Address.endsWith("::"))) {    return false;  }  Object[] octets=inet6Address.split(":");  if (containsCompressedZeroes) {    List octetList=new ArrayList(Arrays.asList(octets));    if (inet6Address.endsWith("::")) {      octetList.add("");    } else     if (inet6Address.startsWith("::") && !octetList.isEmpty()) {      octetList.remove(0);    }    octets=octetList.toArray();  }  if (octets.length > 8) {    return false;  }  int validOctets=0;  int emptyOctets=0;  for (int index=0; index < octets.length; index++) {    String octet=(String)octets[index];    if (octet.length() == 0) {      emptyOctets++;      if (emptyOctets > 1) {        return false;      }    } else {      emptyOctets=0;      if (octet.indexOf(".") > -1) {        if (!inet6Address.endsWith(octet)) {          return false;        }        if (index > octets.length - 1 || index > 6) {          return false;        }        if (!isValidInet4Address(octet)) {          return false;        }        validOctets+=2;        continue;      }      if (octet.length() > 4) {        return false;      }      int octetInt;      try {        octetInt=Integer.valueOf(octet,16).intValue();      } catch (      NumberFormatException e) {        return false;      }      if (octetInt < 0 || octetInt > 0xffff) {        return false;      }    }    validOctets++;  }  if (validOctets < 8 && !containsCompressedZeroes) {    return false;  }  return true;}  }
class C{  public static String inflate(String previous,String current){  if (previous == null)   return current;  StringBuilder buf=new StringBuilder();  int start1=0;  int start2=0;  while (start1 < previous.length() && start2 < current.length()) {    int end1=start1;    while (end1 < previous.length() && previous.charAt(end1) != '\t') {      end1++;    }    int end2=start2;    while (end2 < current.length() && current.charAt(end2) != '\t') {      end2++;    }    if (current.charAt(start2) == '&' && end2 == start2 + 1) {      for (int i=start1; i < end1; i++)       buf.append(previous.charAt(i));    } else {      for (int i=start2; i < end2; i++)       buf.append(current.charAt(i));    }    if (end2 < current.length())     buf.append("\t");    start1=end1 + 1;    start2=end2 + 1;  }  return buf.toString();}  }
class C{  public static MultiTextEdit flatten(TextEdit edit){  MultiTextEdit result=new MultiTextEdit();  flatten(edit,result);  return result;}  }
class C{  @Override public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event){  if (event.getEventType() == AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED) {    event.getText().clear();    int flags=DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_SHOW_YEAR | DateUtils.FORMAT_SHOW_WEEKDAY;    String dateString=DateUtils.formatDateTime(getContext(),mDateMillis,flags);    event.getText().add(dateString);    return true;  }  return super.dispatchPopulateAccessibilityEvent(event);}  }
class C{  public static InputStream toInputStream(String input,String encoding) throws IOException {  byte[] bytes=StringCodingUtils.getBytes(input,Charsets.toCharset(encoding));  return new ByteArrayInputStream(bytes);}  }
class C{  private void logSlowRequests(long requestLifetime,Request<?> request,byte[] responseContents,StatusLine statusLine){  if (DEBUG || requestLifetime > SLOW_REQUEST_THRESHOLD_MS) {    VolleyLog.d("HTTP response for request=<%s> [lifetime=%d], [size=%s], " + "[rc=%d], [retryCount=%s]",request,requestLifetime,responseContents != null ? responseContents.length : "null",statusLine.getStatusCode(),request.getRetryPolicy().getCurrentRetryCount());  }}  }
class C{  private void handleIntroductionResponse(Peer peer,IntroductionResponse message){  peer.setConnectionType((int)message.getConnectionType());  peer.setNetworkOperator(message.getNetworkOperator());  List<Peer> pex=message.getPex();  for (  Peer pexPeer : pex) {    if (hashId.equals(pexPeer.getPeerId()))     continue;    getOrMakePeer(pexPeer.getPeerId(),pexPeer.getAddress(),Peer.OUTGOING);  }}  }
class C{  public XMLParser(final Class classToBeBound,final String[] schemas) throws XMLException {  try {    JAXBContext jc=JAXBContext.newInstance(classToBeBound);    marshaller=jc.createMarshaller();    marshaller.setSchema(XMLSchemaUtils.createSchema(schemas));    unmarshaller=jc.createUnmarshaller();    unmarshaller.setSchema(XMLSchemaUtils.createSchema(schemas));  } catch (  JAXBException e) {    throw new XMLException("Cannot instantiate marshaller/unmarshaller for " + classToBeBound,e);  }}  }
class C{  public void requiresReboot(boolean reboot){  requiresReboot=reboot;}  }
class C{  public void actionPerformed(ActionEvent event){  final Director newDir=Director.newProject();  newDir.getMainViewer().getFrame().setVisible(true);  newDir.getMainViewer().setDoReInduce(true);  newDir.getMainViewer().setDoReset(true);  boolean ok=false;  final CompareWindow compareWindow=new CompareWindow(newDir.getMainViewer().getFrame(),newDir,null);  if (!compareWindow.isCanceled()) {    String command=compareWindow.getCommand();    if (command != null) {      newDir.execute(command,newDir.getCommandManager());      ok=true;    }  }  if (!ok) {    try {      newDir.close();    } catch (    CanceledException e) {      e.printStackTrace();    }    ProjectManager.removeProject(newDir);  }}  }
class C{  public static boolean isXML11ValidName(String name){  final int length=name.length();  if (length == 0) {    return false;  }  int i=1;  char ch=name.charAt(0);  if (!isXML11NameStart(ch)) {    if (length > 1 && isXML11NameHighSurrogate(ch)) {      char ch2=name.charAt(1);      if (!XMLChar.isLowSurrogate(ch2) || !isXML11NameStart(XMLChar.supplemental(ch,ch2))) {        return false;      }      i=2;    } else {      return false;    }  }  while (i < length) {    ch=name.charAt(i);    if (!isXML11Name(ch)) {      if (++i < length && isXML11NameHighSurrogate(ch)) {        char ch2=name.charAt(i);        if (!XMLChar.isLowSurrogate(ch2) || !isXML11Name(XMLChar.supplemental(ch,ch2))) {          return false;        }      } else {        return false;      }    }    ++i;  }  return true;}  }
class C{  public static final void sort(double[] a,int[] b){  mergesort(a,b,0,a.length - 1);}  }
class C{  @Transactional public ProjectDTO save(ProjectDTO dto){  if (dto == null) {    return null;  }  Project project;  if (dto.isIdSet()) {    project=projectRepository.findOne(dto.id);  } else {    project=new Project();  }  project.setName(dto.name);  project.setUrl(dto.url);  project.setOpenSource(dto.openSource);  if (dto.author == null) {    project.setAuthor(null);  } else {    Author author=project.getAuthor();    if (author == null || (author.getId().compareTo(dto.author.id) != 0)) {      project.setAuthor(authorRepository.findOne(dto.author.id));    }  }  return toDTO(projectRepository.save(project));}  }
class C{  public final boolean isLenient(){  return lenient;}  }
class C{  static boolean isPermissionGranted(@NonNull Context context,@NonNull String permissionName){  return ContextCompat.checkSelfPermission(context,permissionName) == PackageManager.PERMISSION_GRANTED;}  }
class C{  static float distance(ScoutWidget a,ScoutWidget b){  float ax1, ax2, ay1, ay2;  float bx1, bx2, by1, by2;  ax1=a.mX;  ax2=a.mX + a.mWidth;  ay1=a.mY;  ay2=a.mY + a.mHeight;  bx1=b.mX;  bx2=b.mX + b.mWidth;  by1=b.mY;  by2=b.mY + b.mHeight;  float xdiff11=Math.abs(ax1 - bx1);  float xdiff12=Math.abs(ax1 - bx2);  float xdiff21=Math.abs(ax2 - bx1);  float xdiff22=Math.abs(ax2 - bx2);  float ydiff11=Math.abs(ay1 - by1);  float ydiff12=Math.abs(ay1 - by2);  float ydiff21=Math.abs(ay2 - by1);  float ydiff22=Math.abs(ay2 - by2);  float xmin=Math.min(Math.min(xdiff11,xdiff12),Math.min(xdiff21,xdiff22));  float ymin=Math.min(Math.min(ydiff11,ydiff12),Math.min(ydiff21,ydiff22));  boolean yOverlap=ay1 <= by2 && by1 <= ay2;  boolean xOverlap=ax1 <= bx2 && bx1 <= ax2;  float xReturn=(yOverlap) ? xmin : (float)Math.hypot(xmin,ymin);  float yReturn=(xOverlap) ? ymin : (float)Math.hypot(xmin,ymin);  return Math.min(xReturn,yReturn);}  }
class C{  protected PowerupOperation(){  super();}  }
class C{  public void addColumn(String name,Class type,Object defaultValue){  Column col=ColumnFactory.getColumn(type,m_rows.getMaximumRow() + 1,defaultValue);  addColumn(name,col);}  }
class C{  public static StorableTimeFence inDailyInterval(TimeZone timeZone,long startTimeOfDayMillis,long stopTimeOfDayMillis){  return new StorableTimeFence(DAILY,timeZone,startTimeOfDayMillis,stopTimeOfDayMillis);}  }
class C{  protected void removeAt(int index){  _set[index]=(short)0;  super.removeAt(index);}  }
class C{  public Builder cacheInMemory(boolean cacheInMemory){  this.cacheInMemory=cacheInMemory;  return this;}  }
class C{  public static String parse(CommandLineParser.Parameter[] params) throws IOException {  String path=null;  for (int i=0; i < params.length; i++) {    if (params[i].getName().equalsIgnoreCase(PATH_PARAMETER)) {      for (int j=0; j < params[i].getArguments().length; j++) {        path=params[i].getArguments()[j];        break;      }    }  }  return path;}  }
class C{  @Override public boolean onCreateOptionsMenu(Menu menu){  if (menu.findItem(menuCameraId) == null) {    menuCamera=menu.add(Menu.NONE,menuCameraId,1,getString(R.string.camera));    menuCamera.setIcon(R.drawable.ic_camera_white);    menuCamera.setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);    menuCamera.setVisible(showCamera);  }  if (menu.findItem(menuDoneId) == null) {    menuDone=menu.add(Menu.NONE,menuDoneId,2,getString(R.string.done));    menuDone.setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);  }  updateTitle();  return true;}  }
class C{  private UShort(String value) throws NumberFormatException {  this.value=Integer.parseInt(value);  rangeCheck();}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + TABLENAME;  db.execSQL(sql);}  }
class C{  public static void createSchemaFiles(FileSystem fs,boolean hdfs,String filter) throws Exception {  if (!hdfs) {    createDataSchema(false);  } else {    createDataSchema(fs,true);  }  DataSchemaLoader.initialize();  List<String> dnsHostnameQueryElements=Arrays.asList(DATE,SRCIP,DSTIP,QTYPE,RCODE,IPS);  List<String> dnsHostnameQueryFilterElements=Collections.singletonList(QNAME);  TestUtils.createQuerySchema(DNS_HOSTNAME_QUERY_FILE,DNS_HOSTNAME_QUERY,TEST_DATA_SCHEMA_NAME,QNAME,dnsHostnameQueryElements,dnsHostnameQueryFilterElements,filter);  if (hdfs) {    TestUtils.createQuerySchema(DNS_HOSTNAME_QUERY_FILE_HDFS,DNS_HOSTNAME_QUERY,TEST_DATA_SCHEMA_NAME,QNAME,dnsHostnameQueryElements,dnsHostnameQueryFilterElements,filter,false,fs,hdfs);  }  List<String> dnsIPQueryElements=Arrays.asList(SRCIP,DSTIP,IPS);  List<String> dnsIPQueryFilterElements=Collections.singletonList(QNAME);  TestUtils.createQuerySchema(DNS_IP_QUERY_FILE,DNS_IP_QUERY,TEST_DATA_SCHEMA_NAME,IPS,dnsIPQueryElements,dnsIPQueryFilterElements,filter);  if (hdfs) {    TestUtils.createQuerySchema(DNS_IP_QUERY_FILE_HDFS,DNS_IP_QUERY,TEST_DATA_SCHEMA_NAME,IPS,dnsIPQueryElements,dnsIPQueryFilterElements,filter,false,fs,hdfs);  }  List<String> dnsNXQueryElements=Arrays.asList(QNAME,SRCIP,DSTIP);  List<String> dnsNXQueryFilterElements=Collections.singletonList(QNAME);  TestUtils.createQuerySchema(DNS_NXDOMAIN_QUERY_FILE,DNS_NXDOMAIN_QUERY,TEST_DATA_SCHEMA_NAME,QNAME,dnsNXQueryElements,dnsNXQueryFilterElements,filter);  if (hdfs) {    TestUtils.createQuerySchema(DNS_NXDOMAIN_QUERY_FILE_HDFS,DNS_NXDOMAIN_QUERY,TEST_DATA_SCHEMA_NAME,QNAME,dnsNXQueryElements,dnsNXQueryFilterElements,filter,false,fs,hdfs);  }  List<String> dnsSrcIPQueryElements=Arrays.asList(QNAME,DSTIP,IPS);  List<String> dnsSrcIPQueryFilterElements=Arrays.asList(SRCIP,IPS);  TestUtils.createQuerySchema(DNS_SRCIP_QUERY_FILE,DNS_SRCIP_QUERY,TEST_DATA_SCHEMA_NAME,SRCIP,dnsSrcIPQueryElements,dnsSrcIPQueryFilterElements,filter);  if (hdfs) {    TestUtils.createQuerySchema(DNS_SRCIP_QUERY_FILE_HDFS,DNS_SRCIP_QUERY,TEST_DATA_SCHEMA_NAME,SRCIP,dnsSrcIPQueryElements,dnsSrcIPQueryFilterElements,filter,false,fs,hdfs);  }  List<String> dnsSrcIPQueryNoFilterElements=Arrays.asList(QNAME,DSTIP,IPS);  TestUtils.createQuerySchema(DNS_SRCIP_QUERY_NO_FILTER_FILE,DNS_SRCIP_QUERY_NO_FILTER,TEST_DATA_SCHEMA_NAME,SRCIP,dnsSrcIPQueryNoFilterElements,null,null);  if (hdfs) {    TestUtils.createQuerySchema(DNS_SRCIP_QUERY_NO_FILTER_FILE_HDFS,DNS_SRCIP_QUERY_NO_FILTER,TEST_DATA_SCHEMA_NAME,SRCIP,dnsSrcIPQueryNoFilterElements,null,null,false,fs,hdfs);  }  QuerySchemaLoader.initialize();}  }
class C{  public EigenvalueDecomposition eig(){  return new EigenvalueDecomposition(this);}  }
class C{  public static String replace(String inString,String oldPattern,String newPattern){  if (inString == null) {    return null;  }  if (oldPattern == null || newPattern == null) {    return inString;  }  StringBuilder sbuf=new StringBuilder();  int pos=0;  int index=inString.indexOf(oldPattern);  int patLen=oldPattern.length();  while (index >= 0) {    sbuf.append(inString.substring(pos,index));    sbuf.append(newPattern);    pos=index + patLen;    index=inString.indexOf(oldPattern,pos);  }  sbuf.append(inString.substring(pos));  return sbuf.toString();}  }
class C{  @deprecated public VariableField(String string){  this(string,false);}  }
class C{  public boolean putGrammar(SchemaGrammar grammar,boolean deep){  SchemaGrammar sg=getGrammar(grammar.fTargetNamespace);  if (sg != null) {    return sg == grammar;  }  if (!deep) {    putGrammar(grammar);    return true;  }  Vector currGrammars=grammar.getImportedGrammars();  if (currGrammars == null) {    putGrammar(grammar);    return true;  }  Vector grammars=((Vector)currGrammars.clone());  SchemaGrammar sg1, sg2;  Vector gs;  for (int i=0; i < grammars.size(); i++) {    sg1=(SchemaGrammar)grammars.elementAt(i);    sg2=getGrammar(sg1.fTargetNamespace);    if (sg2 == null) {      gs=sg1.getImportedGrammars();      if (gs == null)       continue;      for (int j=gs.size() - 1; j >= 0; j--) {        sg2=(SchemaGrammar)gs.elementAt(j);        if (!grammars.contains(sg2))         grammars.addElement(sg2);      }    } else     if (sg2 != sg1) {      return false;    }  }  putGrammar(grammar);  for (int i=grammars.size() - 1; i >= 0; i--)   putGrammar((SchemaGrammar)grammars.elementAt(i));  return true;}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public YSLDTool(){  createUI();}  }
class C{  @Override public void emptyElement(QName element,XMLAttributes attributes,Augmentations augs) throws XNIException {}  }
class C{  private boolean tryToNotifyReset(){  if ((mStatus == PTR_STATUS_COMPLETE || mStatus == PTR_STATUS_PREPARE) && mPtrIndicator.isInStartPosition()) {    if (mPtrUIHandlerHolder.hasHandler()) {      mPtrUIHandlerHolder.onUIReset(this);      if (DEBUG) {        PtrCLog.i(LOG_TAG,"PtrUIHandler: onUIReset");      }    }    mStatus=PTR_STATUS_INIT;    clearFlag();    return true;  }  return false;}  }
class C{  public void addHeaderView(View v,Object data,boolean isSelectable){  if (mAdapter != null) {    throw new IllegalStateException("Cannot add header view to list -- setAdapter has already been called.");  }  FixedViewInfo info=new FixedViewInfo();  info.view=v;  info.data=data;  info.isSelectable=isSelectable;  mHeaderViewInfos.add(info);}  }
class C{  public int rank(){  double eps=Math.pow(2.0,-52.0);  double tol=Math.max(m,n) * s[0] * eps;  int r=0;  for (int i=0; i < s.length; i++) {    if (s[i] > tol) {      r++;    }  }  return r;}  }
class C{  public static WebSiteProperties defaults(Delegator delegator){  return new WebSiteProperties(delegator);}  }
class C{  void cleanTheList(){  int length=connections.size();  int total=items.size();  boolean tag[]=new boolean[total];  Platform.runLater(null);}  }
class C{  public FriendsGetQueryWithFields offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public void appendChild(int parentIndex,int childIndex){  int pchunk=parentIndex >> CHUNK_SHIFT;  int pindex=parentIndex & CHUNK_MASK;  int cchunk=childIndex >> CHUNK_SHIFT;  int cindex=childIndex & CHUNK_MASK;  setChunkIndex(fNodeParent,parentIndex,cchunk,cindex);  int olast=getChunkIndex(fNodeLastChild,pchunk,pindex);  setChunkIndex(fNodePrevSib,olast,cchunk,cindex);  setChunkIndex(fNodeLastChild,childIndex,pchunk,pindex);}  }
class C{  public BufferedImage render(I18nFormat format){  int imageWidth=LEGEND_TOTAL_WIDTH;  int imageHeight=calculateImageHeight();  BufferedImage image=new BufferedImage(imageWidth,imageHeight,BufferedImage.TYPE_INT_ARGB);  Graphics2D graphics=(Graphics2D)image.getGraphics();  graphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  graphics.translate(LEGEND_MARGIN_LEFT,0);  for (  Legend legend : legends) {    legend.draw(graphics,format);    graphics.translate(0,LEGEND_MARGIN_BOTTOM);  }  return image;}  }
class C{  private static void allPositions(ScoutWidget[] list,int[] north,int[] south,int[] west,int[] east){  for (int i=1; i < list.length; i++) {    int k=i - 1;    north[k]=list[i].mConstraintWidget.getY();    west[k]=list[i].mConstraintWidget.getX();    south[k]=list[i].mConstraintWidget.getHeight() + north[k];    east[k]=list[i].mConstraintWidget.getWidth() + west[k];  }}  }
class C{  private static int encodeText(CharSequence msg,int startpos,int count,StringBuilder sb,int initialSubmode){  StringBuilder tmp=new StringBuilder(count);  int submode=initialSubmode;  int idx=0;  while (true) {    char ch=msg.charAt(startpos + idx);switch (submode) {case SUBMODE_ALPHA:      if (isAlphaUpper(ch)) {        if (ch == ' ') {          tmp.append((char)26);        } else {          tmp.append((char)(ch - 65));        }      } else {        if (isAlphaLower(ch)) {          submode=SUBMODE_LOWER;          tmp.append((char)27);          continue;        } else         if (isMixed(ch)) {          submode=SUBMODE_MIXED;          tmp.append((char)28);          continue;        } else {          tmp.append((char)29);          tmp.append((char)PUNCTUATION[ch]);          break;        }      }    break;case SUBMODE_LOWER:  if (isAlphaLower(ch)) {    if (ch == ' ') {      tmp.append((char)26);    } else {      tmp.append((char)(ch - 97));    }  } else {    if (isAlphaUpper(ch)) {      tmp.append((char)27);      tmp.append((char)(ch - 65));      break;    } else     if (isMixed(ch)) {      submode=SUBMODE_MIXED;      tmp.append((char)28);      continue;    } else {      tmp.append((char)29);      tmp.append((char)PUNCTUATION[ch]);      break;    }  }break;case SUBMODE_MIXED:if (isMixed(ch)) {tmp.append((char)MIXED[ch]);} else {if (isAlphaUpper(ch)) {  submode=SUBMODE_ALPHA;  tmp.append((char)28);  continue;} else if (isAlphaLower(ch)) {  submode=SUBMODE_LOWER;  tmp.append((char)27);  continue;} else {  if (startpos + idx + 1 < count) {    char next=msg.charAt(startpos + idx + 1);    if (isPunctuation(next)) {      submode=SUBMODE_PUNCTUATION;      tmp.append((char)25);      continue;    }  }  tmp.append((char)29);  tmp.append((char)PUNCTUATION[ch]);}}break;default :if (isPunctuation(ch)) {tmp.append((char)PUNCTUATION[ch]);} else {submode=SUBMODE_ALPHA;tmp.append((char)29);continue;}}idx++;if (idx >= count) {break;}}char h=0;int len=tmp.length();for (int i=0; i < len; i++) {boolean odd=(i % 2) != 0;if (odd) {h=(char)((h * 30) + tmp.charAt(i));sb.append(h);} else {h=tmp.charAt(i);}}if ((len % 2) != 0) {sb.append((char)((h * 30) + 29));}return submode;}  }
class C{  private void createMOVFormat(){  videoFormat=new VideoFormat(VideoFormat.JPEG,new Dimension(mip.getMWidth(),mip.getMHeight()),Format.NOT_SPECIFIED,Format.byteArray,mip.getFPS());}  }
class C{  public TimeSeriesMetricDeltaSet mapOptional(Function<? super MetricValue,Optional<? extends MetricValue>> fn){  return values_.map(fn,null).mapCombine(null,null);}  }
class C{  protected int processByte(){  return 0;}  }
class C{  @RequestMapping(value="/activate",method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<String> activateAccount(@RequestParam(value="key") String key){  return userService.activateRegistration(key).map(null).orElse(new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR));}  }
class C{  public boolean execute(String action,JSONArray args,CallbackContext callbackContext) throws JSONException {  CordovaResourceApi resourceApi=webView.getResourceApi();  PluginResult.Status status=PluginResult.Status.OK;  String result="";  if (action.equals("startRecordingAudio")) {    recordId=args.getString(0);    String target=args.getString(1);    try {      Uri targetUri=resourceApi.remapUri(Uri.parse(target));      fileUriStr=targetUri.toString();    } catch (    IllegalArgumentException e) {      fileUriStr=target;    }    promptForRecord();  } else   if (action.equals("stopRecordingAudio")) {    this.stopRecordingAudio(args.getString(0));  } else   if (action.equals("startPlayingAudio")) {    String target=args.getString(1);    String fileUriStr;    try {      Uri targetUri=resourceApi.remapUri(Uri.parse(target));      fileUriStr=targetUri.toString();    } catch (    IllegalArgumentException e) {      fileUriStr=target;    }    this.startPlayingAudio(args.getString(0),FileHelper.stripFileProtocol(fileUriStr));  } else   if (action.equals("seekToAudio")) {    this.seekToAudio(args.getString(0),args.getInt(1));  } else   if (action.equals("pausePlayingAudio")) {    this.pausePlayingAudio(args.getString(0));  } else   if (action.equals("stopPlayingAudio")) {    this.stopPlayingAudio(args.getString(0));  } else   if (action.equals("setVolume")) {    try {      this.setVolume(args.getString(0),Float.parseFloat(args.getString(1)));    } catch (    NumberFormatException nfe) {    }  } else   if (action.equals("getCurrentPositionAudio")) {    float f=this.getCurrentPositionAudio(args.getString(0));    callbackContext.sendPluginResult(new PluginResult(status,f));    return true;  } else   if (action.equals("getDurationAudio")) {    float f=this.getDurationAudio(args.getString(0),args.getString(1));    callbackContext.sendPluginResult(new PluginResult(status,f));    return true;  } else   if (action.equals("create")) {    String id=args.getString(0);    String src=FileHelper.stripFileProtocol(args.getString(1));    getOrCreatePlayer(id,src);  } else   if (action.equals("release")) {    boolean b=this.release(args.getString(0));    callbackContext.sendPluginResult(new PluginResult(status,b));    return true;  } else   if (action.equals("messageChannel")) {    messageChannel=callbackContext;    return true;  } else   if (action.equals("getCurrentAmplitudeAudio")) {    float f=this.getCurrentAmplitudeAudio(args.getString(0));    callbackContext.sendPluginResult(new PluginResult(status,f));    return true;  } else {    return false;  }  callbackContext.sendPluginResult(new PluginResult(status,result));  return true;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_RESISTED_TO_MAGIC_PARTY(String skilltarget,String skillcaster){  return new SM_SYSTEM_MESSAGE(1220222,skilltarget,skillcaster);}  }
class C{  public static TypeStack v(){  TypeStack typeStack=new TypeStack();  typeStack.types=new Type[0];  return typeStack;}  }
class C{  public FrameMap(){  this.frameMapping=new MapMaker().weakKeys().makeMap();}  }
class C{  private Node traversePartiallySelected(Node n,int how){switch (how) {case DELETE_CONTENTS:    return null;case CLONE_CONTENTS:case EXTRACT_CONTENTS:  return n.cloneNode(false);}return null;}  }
class C{  public ExpressionTreeModel(TreeNode root){  super(root);}  }
class C{  protected void postProcessEntity(T entity) throws Exception {}  }
class C{  public double slope(double x1,double x2,double y1,double y2){  return (y2 - y1) / (x2 - x1);}  }
class C{  public static boolean hasRootPermission(){  return execCommand("echo root",true,false).result == 0;}  }
class C{  EventOccurrence(final Action action,final ODEState newState,final double stopTime){  this.action=action;  this.newState=newState;  this.stopTime=stopTime;}  }
class C{  public static boolean isRunningApplicationStart(){  return sRunningApplicationStart;}  }
class C{  public static double[][] multiply(double[][] x,double[][] y){  final int rowsX=x.length;  final int colsX=x[0].length;  final int rowsY=y.length;  final int colsY=y[0].length;  if (colsX != rowsY)   throw new RuntimeException("multiply(x,y): incompatible dimensions");  final double[][] z=new double[rowsX][colsY];  for (int a=0; a < rowsX; a++) {    for (int b=0; b < colsY; b++) {      double value=0;      for (int c=0; c < colsX; c++) {        value+=x[a][c] * y[c][b];      }      z[a][b]=value;    }  }  return z;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Pulled_ME_TO_B(String skilltarget,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200551,skilltarget,num0,skillname);}  }
class C{  protected DocsGetTypesQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  public void show(){  mDiscardDirection=getDefaultDiscardDirection();  mOverScrollCounter=0;  createStackTabs(false);}  }
class C{  public Map<String,Object> addToCart(String catalogId,String shoppingListId,String shoppingListItemSeqId,String productId,String productCategoryId,String itemType,String itemDescription,BigDecimal price,BigDecimal amount,BigDecimal quantity,java.sql.Timestamp reservStart,BigDecimal reservLength,BigDecimal reservPersons,java.sql.Timestamp shipBeforeDate,java.sql.Timestamp shipAfterDate,ProductConfigWrapper configWrapper,String itemGroupNumber,Map<String,? extends Object> context,String parentProductId){  return addToCart(catalogId,shoppingListId,shoppingListItemSeqId,productId,productCategoryId,itemType,itemDescription,price,amount,quantity,reservStart,reservLength,reservPersons,null,null,shipBeforeDate,shipAfterDate,configWrapper,itemGroupNumber,context,parentProductId);}  }
class C{  public static int gray(int v){  return rgba(v,v,v,255);}  }
class C{  void split(final Circle splitCircle,final List<Edge> outsideList,final List<Edge> insideList){  final double edgeStart=circle.getPhase(start.getLocation().getVector());  final Arc arc=circle.getInsideArc(splitCircle);  final double arcRelativeStart=MathUtils.normalizeAngle(arc.getInf(),edgeStart + FastMath.PI) - edgeStart;  final double arcRelativeEnd=arcRelativeStart + arc.getSize();  final double unwrappedEnd=arcRelativeEnd - MathUtils.TWO_PI;  final double tolerance=circle.getTolerance();  Vertex previousVertex=start;  if (unwrappedEnd >= length - tolerance) {    insideList.add(this);  } else {    double alreadyManagedLength=0;    if (unwrappedEnd >= 0) {      previousVertex=addSubEdge(previousVertex,new Vertex(new S2Point(circle.getPointAt(edgeStart + unwrappedEnd))),unwrappedEnd,insideList,splitCircle);      alreadyManagedLength=unwrappedEnd;    }    if (arcRelativeStart >= length - tolerance) {      if (unwrappedEnd >= 0) {        previousVertex=addSubEdge(previousVertex,end,length - alreadyManagedLength,outsideList,splitCircle);      } else {        outsideList.add(this);      }    } else {      previousVertex=addSubEdge(previousVertex,new Vertex(new S2Point(circle.getPointAt(edgeStart + arcRelativeStart))),arcRelativeStart - alreadyManagedLength,outsideList,splitCircle);      alreadyManagedLength=arcRelativeStart;      if (arcRelativeEnd >= length - tolerance) {        previousVertex=addSubEdge(previousVertex,end,length - alreadyManagedLength,insideList,splitCircle);      } else {        previousVertex=addSubEdge(previousVertex,new Vertex(new S2Point(circle.getPointAt(edgeStart + arcRelativeStart))),arcRelativeStart - alreadyManagedLength,insideList,splitCircle);        alreadyManagedLength=arcRelativeStart;        previousVertex=addSubEdge(previousVertex,end,length - alreadyManagedLength,outsideList,splitCircle);      }    }  }}  }
class C{  @Override public void onTransferProgress(long progressRate,long totalTransferredSoFar,long totalToTransfer,String filePath){  int percent=(int)(100.0 * ((double)totalTransferredSoFar) / ((double)totalToTransfer));  if (percent != mLastPercent) {    mNotificationBuilder.setProgress(100,percent,totalToTransfer < 0);    String fileName=filePath.substring(filePath.lastIndexOf(FileUtils.PATH_SEPARATOR) + 1);    String text=String.format(getString(R.string.downloader_download_in_progress_content),percent,fileName);    mNotificationBuilder.setContentText(text);    mNotificationManager.notify(R.string.downloader_download_in_progress_ticker,mNotificationBuilder.build());  }  mLastPercent=percent;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  private int computeSize(Map<Integer,Integer[]> integerMap){  int count=0;  for (  Integer taxonId : integerMap.keySet()) {    Integer value=integerMap.get(taxonId)[0];    if (value != null)     count+=value;  }  return count;}  }
class C{  public static int buff2int(byte[] bs,int offset){  return (((int)(bs[offset] >= 0 ? bs[offset] : 256 + bs[offset])) << 24) | (((int)(bs[offset + 1] >= 0 ? bs[offset + 1] : 256 + bs[offset + 1])) << 16) | (((int)(bs[offset + 2] >= 0 ? bs[offset + 2] : 256 + bs[offset + 2])) << 8)| ((int)(bs[offset + 3] >= 0 ? bs[offset + 3] : 256 + bs[offset + 3]));}  }
class C{  public static Configuration createProcess(){  Configuration configuration=new Configuration();  Process process=Process.create("P_INI_TEST").id(5L).statusTag(StatusTag.create("P:STATUS").id(100L).build()).aliveTag(AliveTag.create("P:ALIVE").id(101L).build(),60000).build();  configuration.addEntity(process);  return configuration;}  }
class C{  public boolean isFailed(){  if (response == null) {    return failed;  }  return (this.getStatus() != CatchStatus.CATCH_SUCCESS || failed);}  }
class C{  public static void encode(File source,File target,int wrapAt) throws IOException {  InputStream inputStream=null;  OutputStream outputStream=null;  try {    inputStream=new FileInputStream(source);    outputStream=new FileOutputStream(target);    Base64.encode(inputStream,outputStream,wrapAt);  }  finally {    if (outputStream != null) {      try {        outputStream.close();      } catch (      Throwable t) {        ;      }    }    if (inputStream != null) {      try {        inputStream.close();      } catch (      Throwable t) {        ;      }    }  }}  }
class C{  public void addTypeDecl(TypeDecl node){  List<TypeDecl> list=(parent == null || state == null) ? getTypeDeclListNoTransform() : getTypeDeclList();  list.addChild(node);}  }
class C{  @Deprecated public boolean isSelected(Map<String,Object> context){  ModelMenuItem selMenuItem=getModelMenu().getSelectedMenuAndItem(context).getMenuItem();  return (isSame(selMenuItem));}  }
class C{  public void reset(){  fromIndex=0;}  }
class C{  Interceptor(){  start=0.0f;  mid=0.0f;  end=0.0f;}  }
class C{  public void flip(int i){  bits[i / 32]^=1 << (i & 0x1F);}  }
class C{  @Override public void populateField(String value){  StyleBuilder styleBuilder=new StyleBuilder();  Font font=styleBuilder.createFont(defaultValue,DEFAULT_FONT_SIZE);  populateField(font);}  }
class C{  private void distributeValues(final DataTagValueUpdate dataTagValueUpdate) throws JMSException {  for (  JmsSender jmsSender : jmsSenders) {    try {      jmsSender.processValues(dataTagValueUpdate);    } catch (    Exception e) {      LOGGER.error("Unhandled exception caught while sending a collection of source values - the updates will be lost.",e);    }  }  dataTagValueUpdate.log();}  }
class C{  public String toString(){  StringBuilder builder=new StringBuilder("<");  builder.append(href).append(">; rel=").append(relationship);  if (type != null)   builder.append("; type=").append(type);  return builder.toString();}  }
class C{  public AccountChangePasswordQuery restoreSid(String value){  return unsafeParam("restore_sid",value);}  }
class C{  public static CharSequence downloadViaHttp(String uri,ContentType type) throws IOException {  return downloadViaHttp(uri,type,Integer.MAX_VALUE);}  }
class C{  public UsersGetQuery userIds(String... value){  return unsafeParam("user_ids",value);}  }
class C{  public ZWaveDoorLockCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  public Buffer create(int level){  if (!canCreate()) {    return null;  }  Buffer buffer=new Buffer(bufferSize,level,randomGenerator);  List<Buffer> bufferList=bufferMap.get(level);  if (bufferList == null) {    bufferList=new ArrayList<Buffer>();    bufferMap.put(level,bufferList);  }  bufferList.add(buffer);  count++;  if (level > maxLevel) {    maxLevel=level;  }  return buffer;}  }
class C{  public boolean containsColumn(C columnKey){  if (columnKey == null)   return false;  for (  Map<C,V> row : dataMap.values()) {    if (row.containsKey(columnKey))     return true;  }  return false;}  }
class C{  public void clearAllRows(){  rows=new LinkedList<ChangeLogRow>();}  }
class C{  public static WxUserListResult fromJson(String json) throws JsonParseException, JsonMappingException, IOException {  ObjectMapper mapper=new ObjectMapper();  return mapper.readValue(json,WxUserListResult.class);}  }
class C{  public UnrevealBuilder withShowFromViewInterpolatedDuration(final float showFromViewInterpolatedDuration){  this.mShowFromViewInterpolatedDuration=showFromViewInterpolatedDuration;  return this;}  }
class C{  public boolean isDone(){  if (cancelled != null) {    return true;  }  if (remoteResult != null) {    return true;  }  remoteResult=gigaSpace.take(template,0);  return remoteResult != null;}  }
class C{  public void init$Children(){}  }
class C{  @Nullable public Processor registerProcessor(Processor processor){  return processors.put(processor.establishes(),processor);}  }
class C{  public boolean addListener(IClassLoaderCacheStateListener listener){  _specificListeners.add(new WeakReference<IClassLoaderCacheStateListener>(listener));  return !_dispatchingRemoved;}  }
class C{  @Override public void close() throws IOException {}  }
class C{  public static String readString(PacketBuffer buf){  return buf.readStringFromBuffer(buf.readInt());}  }
class C{  public boolean monitorMemoryUsageWithNoEviction(boolean isWriteTypeOperation){  MemoryEvictionDecision res=monitorMemoryUsageWithNoEviction_Impl(isWriteTypeOperation);  return res != MemoryEvictionDecision.NO_EVICTION;}  }
class C{  @SuppressWarnings("unchecked") static <T extends Type>T decodeStaticArray(String input,int offset,TypeReference<T> typeReference,int length){  BiFunction<List<T>,String,T> function=null;  return decodeArrayElements(input,offset,typeReference,length,function);}  }
class C{  public DefaultSQLDataHandler(boolean ignoreUnknownTypes){  m_ignoreUnknownTypes=ignoreUnknownTypes;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Reflector_PROTECT_A_to_ME(String skilltarget,int num0,String skillcaster){  return new SM_SYSTEM_MESSAGE(1201168,skilltarget,num0,skillcaster);}  }
class C{  @Override public String object2Relation(String fieldType){  if (fieldType != null) {    if (fieldType.equals("byte") || fieldType.equals("java.lang.Byte")) {      return "blob";    }  }  return null;}  }
class C{  @Override public String toString(){  return new String(toByteArray());}  }
class C{  public static void e(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_ERROR) {    return;  }  Log.e(tag,msg,throwable);}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute("show findToolbar=true;");}  }
class C{  public Builder withLimit(long limit){  this.limit=limit;  return this;}  }
class C{  @NotNull public static List<CompilerMessage> createCompilerMessages(@NotNull Message message){  final BuildMessage.Kind kind;switch (message.getKind()) {case INFO:    kind=BuildMessage.Kind.INFO;  break;case WARNING:kind=BuildMessage.Kind.WARNING;break;case ERROR:kind=BuildMessage.Kind.ERROR;break;default :kind=BuildMessage.Kind.PROGRESS;}List<CompilerMessage> compilerMessages=new ArrayList<CompilerMessage>();for (SourceFilePosition filePosition : message.getSourceFilePositions()) {File sourceFile=filePosition.getFile().getSourceFile();String sourceFilePath=sourceFile != null ? sourceFile.getAbsolutePath() : null;SourcePosition pos=filePosition.getPosition();compilerMessages.add(new CompilerMessage(COMPILER_NAME,kind,message.getText().trim(),sourceFilePath,pos.getStartOffset(),pos.getEndOffset(),pos.getEndOffset(),pos.getEndLine(),pos.getEndColumn()));}return Collections.unmodifiableList(compilerMessages);}  }
class C{  private static Integer[] newZeroedIntegerArray(int size){  Integer[] result=new Integer[size];  for (int i=0; i < size; i++)   result[i]=0;  return result;}  }
class C{  public static int dpToPx(Context context,float dp){  return (int)applyDimension(context,TypedValue.COMPLEX_UNIT_DIP,dp);}  }
class C{  @Override public List<WebElement> findElements(){  if (scopeFactory instanceof ParentElementLocatorProvider && !globalCurrentScope) {    return ((ParentElementLocatorProvider)scopeFactory).getCurrentScope().findElements().stream().flatMap(null).collect(toList());  }  return searchContext.findElements(selector);}  }
class C{  public void deleteFile(String path) throws IllegalStateException, IOException, FTPIllegalReplyException, FTPException {synchronized (lock) {    if (!connected) {      throw new IllegalStateException("Client not connected");    }    if (!authenticated) {      throw new IllegalStateException("Client not authenticated");    }    communication.sendFTPCommand("DELE " + path);    FTPReply r=communication.readFTPReply();    touchAutoNoopTimer();    if (!r.isSuccessCode()) {      throw new FTPException(r);    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_DUEL_CANT_REQUEST_WHEN_HE_IS_ASKED_QUESTION(String value0){  return new SM_SYSTEM_MESSAGE(1300095,value0);}  }
class C{  @Override protected ObjectStreamClass readClassDescriptor() throws IOException, ClassNotFoundException {  ObjectStreamClass cl=null;  int index=readInt();  if (index != -1)   cl=_context.getObjectStreamClass(index);  if (cl == null) {    if (_logger.isLoggable(Level.FINEST)) {      Long classLoaderKey=ClassLoaderCache.getCache().getClassLoaderKey(ClassLoaderHelper.getContextClassLoader());      logFinest("Received new incoming ObjectStreamClass with key " + index + ", context class loader key "+ classLoaderKey+ ", reading it from stream");    }    cl=super.readClassDescriptor();    if (index != -1)     _context.addObjectStreamClass(index,cl);  }  return cl;}  }
class C{  private void initResourcesIfNecessary(){  if (itemsPaint == null) {    itemsPaint=new TextPaint(Paint.ANTI_ALIAS_FLAG);    itemsPaint.setTextSize(TEXT_SIZE);    itemsPaint.setColor(0xFF666666);  }  if (valuePaint == null) {    valuePaint=new TextPaint(Paint.ANTI_ALIAS_FLAG | Paint.DITHER_FLAG);    valuePaint.setTextSize(TEXT_SIZE);  }  if (centerDrawable == null) {    centerDrawable=getContext().getResources().getDrawable(R.drawable.wheel_val);  }  if (topShadow == null) {    topShadow=new GradientDrawable(Orientation.TOP_BOTTOM,SHADOWS_COLORS);  }  if (bottomShadow == null) {    bottomShadow=new GradientDrawable(Orientation.BOTTOM_TOP,SHADOWS_COLORS);  }}  }
class C{  public SecureSetUserLevelQuery(VkApiClient client,ServiceActor actor){  super(client,"secure.setUserLevel",OkResponse.class);  accessToken(actor.getAccessToken());  clientSecret(actor.getClientSecret());}  }
class C{  public FriendsGetOnlineQuery(VkApiClient client,UserActor actor){  super(client,"friends.getOnline",Utils.buildParametrizedType(List.class,Integer.class));  accessToken(actor.getAccessToken());}  }
class C{  public void init$Children(){  children=new ASTNode[1];}  }
class C{  public LeadsCompleteQuery complete(UserActor actor,String vkSid,String secret){  return new LeadsCompleteQuery(getClient(),actor,vkSid,secret);}  }
class C{  public void widgetSelected(SelectionEvent e){  int column=getTable().indexOf((TableColumn)e.widget);  ChangePathsSorter oldSorter=(ChangePathsSorter)getSorter();  if (oldSorter != null && column == oldSorter.getColumnNumber()) {    oldSorter.setReversed(!oldSorter.isReversed());    refresh();  } else {    setSorter(new ChangePathsSorter(column));  }  getTable().setSortColumn((TableColumn)e.widget);  if (getTable().getSortDirection() == SWT.UP)   getTable().setSortDirection(SWT.DOWN); else   getTable().setSortDirection(SWT.UP);}  }
class C{  public void pause(){}  }
class C{  public boolean hasDimensionOrFilterWithItems(String key){  return !getDimensionOrFilterItems(key).isEmpty();}  }
class C{  protected Bitmap readInputStream(InputStream is) throws IOException {  ByteArrayOutputStream os=new ByteArrayOutputStream();  byte[] buffer=new byte[1024];  int len;  while ((len=is.read(buffer)) != -1) {    os.write(buffer,0,len);  }  byte[] bitmapData=os.toByteArray();  return BitmapFactory.decodeByteArray(bitmapData,0,bitmapData.length);}  }
class C{  private Body patchHandlerPostBody(SootMethod method,SootClass runnable){  SootClass sc=method.getDeclaringClass();  Body b=Jimple.v().newBody(method);  method.setActiveBody(b);  Local thisLocal=Jimple.v().newLocal("this",sc.getType());  b.getLocals().add(thisLocal);  b.getUnits().add(Jimple.v().newIdentityStmt(thisLocal,Jimple.v().newThisRef(sc.getType())));  Local firstParam=null;  for (int i=0; i < method.getParameterCount(); i++) {    Local paramLocal=Jimple.v().newLocal("param" + i,method.getParameterType(i));    b.getLocals().add(paramLocal);    b.getUnits().add(Jimple.v().newIdentityStmt(paramLocal,Jimple.v().newParameterRef(method.getParameterType(i),i)));    if (i == 0)     firstParam=paramLocal;  }  b.getUnits().add(Jimple.v().newInvokeStmt(Jimple.v().newInterfaceInvokeExpr(firstParam,Scene.v().makeMethodRef(runnable,"run",Collections.<Type>emptyList(),VoidType.v(),false))));  Unit retStmt=Jimple.v().newReturnStmt(IntConstant.v(1));  b.getUnits().add(retStmt);  return b;}  }
class C{  public void drawChartTransposed(Graphics2D gc){  SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);  gc.setFont(getFont(ChartViewer.FontKeys.XAxisFont.toString()));  final int y0=getHeight() - bottomMargin;  final int y1=topMargin;  final String[] series=getChartData().getSeriesNames().toArray(new String[getChartData().getNumberOfSeries()]);  double topY;  final double[] percentFactor;  if (scalingType == ChartViewer.ScalingType.PERCENT) {    final String[] seriesIncludingDisabled=getChartData().getSeriesNamesIncludingDisabled();    percentFactor=computePercentFactorPerSampleForTransposedChart((DefaultChartData)getChartData(),seriesIncludingDisabled);    topY=computeMaxClassValueUsingPercentFactorPerSeries((DefaultChartData)getChartData(),seriesIncludingDisabled,percentFactor);  } else {    topY=1.1 * getMaxValue();    percentFactor=null;  }  final double yFactor=(y0 - y1) / topY;  final int x0=leftMargin;  final int x1=getWidth() - rightMargin;  if (x0 >= x1)   return;  final int numberOfClasses=getChartData().getNumberOfClasses();  if (numberOfClasses == 0)   return;  double xStep=(x1 - x0) / (2 * numberOfClasses);  final double bigSpace=Math.max(2,Math.min(10,xStep));  xStep=(x1 - x0 - (isGapBetweenBars() ? bigSpace * numberOfClasses : 0)) / numberOfClasses;  int c=0;  for (  String className : getChartData().getClassNames()) {    double currentHeight=y0;{      final Dimension labelSize=Basic.getStringSize(gc,className,gc.getFont()).getSize();      final double xLabel=x0 + (isGapBetweenBars() ? (c + 1) * bigSpace : 0) + (c + 0.5) * xStep;      Point2D apt=new Point2D.Double(xLabel,getHeight() - bottomMargin + 12);      if (classLabelAngle == 0) {        apt.setLocation(apt.getX() - labelSize.getWidth() / 2,apt.getY());      } else       if (classLabelAngle > Math.PI / 2) {        apt=Geometry.translateByAngle(apt,classLabelAngle,-labelSize.width);      }      if (getChartData().getChartSelection().isSelected(null,className)) {        gc.setColor(ProgramProperties.SELECTION_COLOR);        fillAndDrawRect(gc,apt.getX(),apt.getY(),labelSize.width,labelSize.height,classLabelAngle,ProgramProperties.SELECTION_COLOR,ProgramProperties.SELECTION_COLOR_DARKER);      }      gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.BLACK));      if (sgc != null)       sgc.setCurrentItem(new String[]{null,className});      drawString(gc,className,apt.getX(),apt.getY(),classLabelAngle);      if (sgc != null)       sgc.clearCurrentItem();    }    for (int i=0; i < series.length; i++) {      String seriesName=series[i];      double value=getChartData().getValueAsDouble(seriesName,className);      if (scalingType == ChartViewer.ScalingType.PERCENT && percentFactor != null) {        value*=percentFactor[i];      }      final double xBar=x0 + (isGapBetweenBars() ? (c + 1) * bigSpace : 0) + c * xStep;      final double height=value * yFactor;      final Rectangle2D rect=new Rectangle((int)Math.round(xBar),(int)Math.round(currentHeight - height),(int)Math.round(xStep),(int)Math.round(height));      currentHeight-=height;      final Color color=getChartColors().getSampleColor(seriesName);      gc.setColor(color);      if (sgc != null)       sgc.setCurrentItem(new String[]{seriesName,className});      gc.fill(rect);      if (sgc != null)       sgc.clearCurrentItem();      if (getChartData().getChartSelection().isSelected(seriesName,className)) {        gc.setColor(ProgramProperties.SELECTION_COLOR);        gc.setStroke(HEAVY_STROKE);        gc.draw(rect);        gc.setStroke(NORMAL_STROKE);      } else {        gc.setColor(color.darker());        gc.draw(rect);      }    }    c++;  }}  }
class C{  public int geom_runs(){  return soot.PhaseOptions.getInt(options,"geom-runs");}  }
class C{  public PegasusSolver(final double relativeAccuracy,final double absoluteAccuracy){  super(relativeAccuracy,absoluteAccuracy,Method.PEGASUS);}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public void clearHeaderCache(){  mHeaderCache.clear();}  }
class C{  private LogSeqNum currentLSN(){  return new LogSeqNum(currentBlk.number(),currentPos);}  }
class C{  public void dismissProgressDialog(){  if (isProgressDialogShowing()) {    mProgressDialog.dismiss();    mProgressDialog=null;  }}  }
class C{  public boolean isApplicable(){  AttributesWindow viewer=(AttributesWindow)getViewer();  return viewer != null;}  }
class C{  public boolean isAllow(){  return allow;}  }
class C{  public void service(ServletRequest request,ServletResponse response) throws IOException, ServletException {  HttpServletRequest req=(HttpServletRequest)request;  HttpServletResponse res=(HttpServletResponse)response;  if ("POST".equals(req.getMethod())) {    this.processPost(request,response);  } else   if ("GET".equals(req.getMethod())) {    this.printStatistics(res);  } else {    String errorMessage="PSP Servlet Requires POST";    res.sendError(405,errorMessage);  }}  }
class C{  @Override public long skip(long numberOfBytes) throws IOException {  if (eof) {    throw new IOException("Skip after end of file");  }  if (position == size) {    return doEndOfFile();  }  position+=numberOfBytes;  long returnLength=numberOfBytes;  if (position > size) {    returnLength=numberOfBytes - (position - size);    position=size;  }  return returnLength;}  }
class C{  public NelderMeadSimplex(final double[][] referenceSimplex){  this(referenceSimplex,DEFAULT_RHO,DEFAULT_KHI,DEFAULT_GAMMA,DEFAULT_SIGMA);}  }
class C{  public Builder serverCiphers(Collection<String> serverCiphers){  this.serverCiphers=serverCiphers;  return this;}  }
class C{  public User(User other){  update(other);}  }
class C{  public static File createTempFoXmlFile() throws IOException {  File tempXmlFile=File.createTempFile(tempFilePrefix,".xml");  tempXmlFile.deleteOnExit();  return tempXmlFile;}  }
class C{  private Pokemon initPokemonSpinnerIfNeeded(Pokemon scannedPokemon){  ArrayList<Pokemon> evolutionLine=pokeInfoCalculator.getEvolutionLine(scannedPokemon);  extendedEvolutionSpinnerAdapter.updatePokemonList(evolutionLine);  int spinnerSelectionIdx=extendedEvolutionSpinner.getSelectedItemPosition();  if (spinnerSelectionIdx == -1) {    for (int i=0; i < evolutionLine.size(); i++) {      if (evolutionLine.get(i).number == scannedPokemon.number) {        spinnerSelectionIdx=i;        break;      }    }    if (!scannedPokemon.evolutions.isEmpty()) {      spinnerSelectionIdx++;    }    extendedEvolutionSpinner.setSelection(spinnerSelectionIdx);    extendedEvolutionSpinner.setEnabled(evolutionLine.size() > 1);  }  return evolutionLine.get(spinnerSelectionIdx);}  }
class C{  public PartialDataRequestHandler(DataRequestHandler next,PhysicalTableDictionary physicalTableDictionary,PartialDataHandler partialDataHandler){  this.next=next;  this.physicalTableDictionary=physicalTableDictionary;  this.partialDataHandler=partialDataHandler;}  }
class C{  public TIntObjectHashMap(int initialCapacity,float loadFactor,TIntHashingStrategy strategy){  super(initialCapacity,loadFactor,strategy);}  }
class C{  public void animateX(int durationMillis){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorX=ObjectAnimator.ofFloat(this,"phaseX",0f,1f);  animatorX.setDuration(durationMillis);  animatorX.addUpdateListener(mListener);  animatorX.start();}  }
class C{  private void sendCommitError(String errorMessage){  sendJson(Json.object(ACTION,ACTION_COMMIT,ERROR,errorMessage));}  }
class C{  private void determineLocale_MD_Y_Indices(){  String formattedDate=formatMonthDayYear(mCalendar);  String monthAndDay=formatMonthAndDay(mCalendar);  String year=extractYearFromFormattedDate(formattedDate,monthAndDay);  if (formattedDate.indexOf(monthAndDay) < formattedDate.indexOf(year)) {    mLocaleMonthDayIndex=0;    mLocaleYearIndex=1;  } else {    mLocaleYearIndex=0;    mLocaleMonthDayIndex=1;  }}  }
class C{  public TaggedInputStream(InputStream proxy){  super(proxy);}  }
class C{  public final static <T extends Bean>List<T> load(String[] cols,String where,Object[] args,String orderby,int offset,int limit,Class<T> t){  Table mapping=(Table)t.getAnnotation(Table.class);  if (mapping == null) {    if (log.isErrorEnabled())     log.error("mapping missed in [" + t + "] declaretion");    return null;  }  return load(mapping.name(),cols,where,args,orderby,offset,limit,t);}  }
class C{  public DistributedLogMultiStreamWriter build(){  Preconditions.checkArgument((null != _streams && !_streams.isEmpty()),"No streams provided");  Preconditions.checkNotNull(_client,"No distributedlog client provided");  Preconditions.checkNotNull(_codec,"No compression codec provided");  Preconditions.checkArgument(_firstSpeculativeTimeoutMs > 0 && _firstSpeculativeTimeoutMs <= _maxSpeculativeTimeoutMs && _speculativeBackoffMultiplier > 0 && _maxSpeculativeTimeoutMs < _requestTimeoutMs,"Invalid speculative timeout settings");  return new DistributedLogMultiStreamWriter(_streams,_client,Math.min(_bufferSize,MAX_LOGRECORDSET_SIZE),_flushIntervalMicros,_requestTimeoutMs,_firstSpeculativeTimeoutMs,_maxSpeculativeTimeoutMs,_speculativeBackoffMultiplier,_codec,_ticker,_executorService);}  }
class C{  public boolean isEmpty(){  return this.optionsTable.isEmpty();}  }
class C{  public boolean hasSingleExit(){  return getLoopExits().size() == 1;}  }
class C{  public TypeSpec typeSpec(List<AnnotationSpec> generatedAnnotations){  return classBuilder(generatedType).addFields(fields).addMethod(constructor()).addMethods(transform(methods(),getMethod)).addAnnotations(generatedAnnotations).addModifiers(PUBLIC,FINAL).addTypes(nestedTypes).build();}  }
class C{  public Boolean isWebSocket(){  return webSocket;}  }
class C{  protected void addDefaultValue(String field,String defaultValue){  defaultsMap.put(field,defaultValue);}  }
class C{  public DocumentNGramGraph(int iMinSize,int iMaxSize,int iCorrelationWindow){  MinSize=iMinSize;  MaxSize=iMaxSize;  CorrelationWindow=iCorrelationWindow;  InitGraphs();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ProcATK_Instant_Ratio_A_TO_B(String skillcaster,int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201003,skillcaster,num0,skilltarget,skillname);}  }
class C{  public void removeLineAt(int pos) throws BadLocationException {  Element e=getParagraphElement(pos);  remove(e.getStartOffset(),getElementLength(e));}  }
class C{  public PhotosGetTagsQuery accessKey(String value){  return unsafeParam("access_key",value);}  }
class C{  public Future execute(Collection<T> coll,CompletionCallback<Boolean> callback){  if (callback == null)   throw new IllegalArgumentException("Callback cannot be null");  TaskManagerImpl taskManager=new TaskManagerImpl(this.executor_,this.task_,coll,callback);  this.executor_.execute(taskManager);  return new Future(taskManager);}  }
class C{  public MessagesMarkAsReadQuery(VkApiClient client,Actor actor){  super(client,"messages.markAsRead",OkResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public MessagesAllowMessagesFromCommunityQuery(VkApiClient client,UserActor actor,int groupId){  super(client,"messages.allowMessagesFromCommunity",OkResponse.class);  accessToken(actor.getAccessToken());  groupId(groupId);}  }
class C{  public void createAndStartBroker() throws Exception {  String brokerUrl="failover:(vm://localhost?create=false)?timeout=100&useExponentialBackOff=false&initialReconnectDelay=100";  broker=new BrokerService();  broker.setPersistent(false);  broker.setUseShutdownHook(false);  broker.setUseJmx(true);  if (externalAccessUrl != null) {    TransportConnector connector=new TransportConnector();    connector.setUri(new URI(externalAccessUrl));    broker.addConnector(connector);  }  broker.start();  c=new ActiveMQConnectionFactory();  c.setObjectMessageSerializationDefered(true);  c.setBrokerURL(brokerUrl);  c.setCopyMessageOnSend(false);  System.setProperty("jms.broker.url",brokerUrl);  System.setProperty("jms.broker.client.url",brokerUrl);  System.setProperty("jms.client.user","");  System.setProperty("jms.client.password","");  broker.waitUntilStarted();}  }
class C{  @Override public boolean equals(Object other){  return this == other || (other instanceof Project && hashCode() == other.hashCode());}  }
class C{  public boolean annotate(){  return soot.PhaseOptions.getBoolean(options,"annotate");}  }
class C{  public void skip(){  index+=1;  if (index < 0) {    throw new IllegalStateException("index overflow");  }}  }
class C{  public void add(WXDomObject child,int index){  if (child == null || index < -1 || sDestroy.get()) {    return;  }  if (children == null) {    children=new ArrayList<>();  }  int count=children.size();  index=index >= count ? -1 : index;  if (index == -1) {    children.add(child);    super.addChildAt(child,super.getChildCount());  } else {    children.add(index,child);    super.addChildAt(child,index);  }  child.parent=this;}  }
class C{  public static int apply(Director dir,ProgressListener progressListener,File file,String format,char separator,boolean reportSummarized) throws IOException {  progressListener.setTasks("Export in CSV format","Initializing");  final Collection<String> cNames=ClassificationManager.getAllSupportedClassifications();  int count=0;  if (format.equalsIgnoreCase("taxonName_to_count") || format.equalsIgnoreCase("taxonId_to_count") || format.equalsIgnoreCase("taxonRank_to_count")|| format.equalsIgnoreCase("taxonPath_to_count")) {    count=CSVExportTaxonomy.exportTaxon2Counts(format,dir,file,separator,reportSummarized,progressListener);  } else   if (format.equalsIgnoreCase("taxonName_to_readName") || format.equalsIgnoreCase("taxonId_to_ReadName") || format.equalsIgnoreCase("taxonPath_to_readName")) {    count=CSVExportTaxonomy.exportTaxon2ReadNames(format,dir,file,separator,progressListener);  } else   if (format.equalsIgnoreCase("taxonName_to_readName") || format.equalsIgnoreCase("taxonId_to_readName") || format.equalsIgnoreCase("taxonPath_to_readName")) {    count=CSVExportTaxonomy.exportTaxon2ReadIds(format,dir,file,separator,progressListener);  } else   if (format.equalsIgnoreCase("taxonName_to_length") || format.equalsIgnoreCase("taxonId_to_length") || format.equalsIgnoreCase("taxonRank_to_count")|| format.equalsIgnoreCase("taxonPath_to_length")) {    count=CSVExportTaxonomy.exportTaxon2TotalLength(format,dir,file,separator,progressListener);  } else   if (format.equalsIgnoreCase("taxonName_to_percent") || format.equalsIgnoreCase("taxonId_to_percent") || format.equalsIgnoreCase("taxonRank_to_count")|| format.equalsIgnoreCase("taxonPath_to_percent")) {    count=CSVExportFViewer.exportName2Percent(format,dir.getMainViewer(),file,separator,true,progressListener);  } else   if (format.equalsIgnoreCase("readName_to_taxonName") || format.equalsIgnoreCase("readName_to_taxonId") || format.equalsIgnoreCase("readName_to_taxonPath")|| format.equalsIgnoreCase("readName_to_taxonPathPercent")) {    count=CSVExportTaxonomy.exportReadName2Taxon(format,dir,file,separator,progressListener);  } else   if (format.equalsIgnoreCase("readName_to_taxonMatches")) {    count=CSVExportTaxonomy.exportReadName2Matches(format,dir,file,separator,progressListener);  } else   if (format.equalsIgnoreCase("readName_to_refSeqIds")) {    count=CSVExportRefSeq.exportReadName2Accession(dir.getMainViewer(),file,separator,progressListener);  } else   if (format.equalsIgnoreCase("readName_to_headers")) {    count=CSVExportHeaders.exportReadName2Headers(dir.getMainViewer(),file,separator,progressListener);  } else   if (format.equalsIgnoreCase("reference_to_readName")) {    count=CSVExportReference2Read.exportReference2ReadName(dir.getMainViewer(),file,separator,progressListener);  } else   if (Basic.endsWithIgnoreCase(format,"Name_to_count") || Basic.endsWithIgnoreCase(format,"Path_to_count")) {    for (    String cName : cNames) {      if (format.startsWith(cName.toLowerCase())) {        ClassificationViewer viewer=(ClassificationViewer)dir.getViewerByClassName(ClassificationViewer.getClassName(cName));        count=CSVExportFViewer.exportName2Counts(format,viewer,file,separator,true,progressListener);        break;      }    }  } else   if (format.equalsIgnoreCase("ko_to_taxon")) {    count=ExportKO2TaxaTable.export(format,dir,file,separator,progressListener);  } else {    for (    String cName : cNames) {      if (format.startsWith(cName.toLowerCase())) {        final ClassificationViewer viewer=(ClassificationViewer)dir.getViewerByClassName(ClassificationViewer.getClassName(cName));        if (Basic.endsWithIgnoreCase(format,"Name_to_count") || Basic.endsWithIgnoreCase(format,"Path_to_count")) {          count=CSVExportFViewer.exportName2Counts(format,viewer,file,separator,true,progressListener);          break;        } else         if (Basic.endsWithIgnoreCase(format,"Name_to_readName") || Basic.endsWithIgnoreCase(format,"Path_to_readName")) {          count=CSVExportFViewer.exportName2ReadNames(format,viewer,file,separator,progressListener);          break;        } else         if (Basic.endsWithIgnoreCase(format,"Name_to_length") || Basic.endsWithIgnoreCase(format,"Path_to_length")) {          count=CSVExportFViewer.exportName2TotalLength(format,viewer,file,separator,progressListener);          break;        }        if (Basic.endsWithIgnoreCase(format,"Name_to_percent") || Basic.endsWithIgnoreCase(format,"Id_to_percent") || Basic.endsWithIgnoreCase(format,"Path_to_perecent")) {          count=CSVExportFViewer.exportName2Percent(format,viewer,file,separator,true,progressListener);          break;        }      } else       if (format.contains(cName.toLowerCase())) {        final ClassificationViewer viewer=(ClassificationViewer)dir.getViewerByClassName(ClassificationViewer.getClassName(cName));        if (format.startsWith("readName_to_")) {          count=CSVExportFViewer.exportReadName2Name(format,viewer,file,separator,progressListener);          break;        }      }    }  }  return count;}  }
class C{  private void cancel(String accountName,String remotePath){  Pair<UploadFileOperation,String> removeResult=mPendingUploads.remove(accountName,remotePath);  UploadFileOperation upload=removeResult.first;  if (upload == null && mCurrentUpload != null && mCurrentAccount != null && mCurrentUpload.getRemotePath().startsWith(remotePath) && accountName.equals(mCurrentAccount.name)) {    upload=mCurrentUpload;  }  if (upload != null) {    boolean pending=!upload.isUploadInProgress();    upload.cancel();    mUploadsStorageManager.removeUpload(accountName,remotePath);  }}  }
class C{  public static void registerBlock(ResourceLocation id,Block block,ItemBlock item){  AutomaticNamespacedRegistry<ResourceLocation,Block> blockRegistry=Registries.get(Block.class);  AutomaticNamespacedRegistry<ResourceLocation,Item> itemRegistry=Registries.get(Item.class);  if (block == null) {    throw new NullPointerException("Attempted to register a null block");  } else   if (id == null) {    throw new NullPointerException("Attempted to register a block with a null ID");  } else   if (blockRegistry.containsKey(id)) {    throw new IllegalArgumentException(String.format("The block ID \"%s\" has already been registered",id));  } else   if (itemRegistry.containsKey(id)) {    throw new IllegalArgumentException(String.format("The item ID \"%s\" has already been registered",id));  }  blockRegistry.register(id,block);  int integerID=blockRegistry.getIDForObject(block);  for (  IBlockState state : block.getBlockState().getValidStates()) {    Block.BLOCK_STATE_IDS.put(state,integerID << 4 | block.getMetaFromState(state));  }  if (item != null) {    Registries.get(Item.class).register(integerID,id,item);    Registries.getBlockItemMap().put(block,item);  }}  }
class C{  @Override public void parse(XMLInputSource source) throws XNIException, IOException {  if (fParseInProgress) {    throw new XNIException("FWK005 parse may not be called while parsing.");  }  fParseInProgress=true;  try {    setInputSource(source);    parse(true);  } catch (  XNIException ex) {    if (PRINT_EXCEPTION_STACK_TRACE)     ex.printStackTrace();    throw ex;  }catch (  IOException ex) {    if (PRINT_EXCEPTION_STACK_TRACE)     ex.printStackTrace();    throw ex;  }catch (  RuntimeException ex) {    if (PRINT_EXCEPTION_STACK_TRACE)     ex.printStackTrace();    throw ex;  }catch (  Exception ex) {    if (PRINT_EXCEPTION_STACK_TRACE)     ex.printStackTrace();    throw new XNIException(ex);  } finally {    fParseInProgress=false;    this.cleanup();  }}  }
class C{  public void resizeWidget(Collection<ConstraintWidget> widgets,ConstraintWidget widget,ResizeHandle handle,Rectangle originalBounds,int posX,int posY){  if (widget == null) {    return;  }  Animator.setAnimationEnabled(false);  mSnapCandidates.clear();  int x=widget.getDrawX();  int y=widget.getDrawY();  int w=widget.getDrawWidth();  int h=widget.getDrawHeight();  ResizeHandle.Type resize=handle.getType();  ConstraintAnchor left=widget.getAnchor(ConstraintAnchor.Type.LEFT);  ConstraintAnchor top=widget.getAnchor(ConstraintAnchor.Type.TOP);  ConstraintAnchor right=widget.getAnchor(ConstraintAnchor.Type.RIGHT);  ConstraintAnchor bottom=widget.getAnchor(ConstraintAnchor.Type.BOTTOM);  ConstraintAnchor baseline=widget.getAnchor(ConstraintAnchor.Type.BASELINE);  boolean leftIsConnected=left != null && left.isConnected();  boolean rightIsConnected=right != null && right.isConnected();  boolean topIsConnected=top != null && top.isConnected();  boolean bottomIsConnected=bottom != null && bottom.isConnected();  boolean baselineIsConnected=baseline != null && baseline.isConnected();  if (leftIsConnected && !rightIsConnected) {switch (resize) {case LEFT_TOP:{        resize=ResizeHandle.Type.TOP_SIDE;      }    break;case LEFT_BOTTOM:{    resize=ResizeHandle.Type.BOTTOM_SIDE;  }break;}}if (rightIsConnected && !leftIsConnected) {switch (resize) {case RIGHT_TOP:{resize=ResizeHandle.Type.TOP_SIDE;}break;case RIGHT_BOTTOM:{resize=ResizeHandle.Type.BOTTOM_SIDE;}break;}}if ((topIsConnected || baselineIsConnected) && !bottomIsConnected) {switch (resize) {case LEFT_TOP:{resize=ResizeHandle.Type.LEFT_SIDE;}break;case RIGHT_TOP:{resize=ResizeHandle.Type.RIGHT_SIDE;}break;}}if (bottomIsConnected && !topIsConnected) {switch (resize) {case LEFT_BOTTOM:{resize=ResizeHandle.Type.LEFT_SIDE;}break;case RIGHT_BOTTOM:{resize=ResizeHandle.Type.RIGHT_SIDE;}break;}}ConstraintWidget base=widget.getParent();switch (resize) {case LEFT_TOP:{int newX=Math.min(originalBounds.x + originalBounds.width - widget.getMinWidth(),posX);newX=clampX(newX,base);newX=snapLeft(widgets,widget,newX,mSnapCandidates);int newY=Math.min(originalBounds.y + originalBounds.height - widget.getMinHeight(),posY);newY=clampY(newY,base);newY=snapTop(widgets,widget,newY,mSnapCandidates);int newWidth=originalBounds.x + originalBounds.width - newX;int newHeight=originalBounds.y + originalBounds.height - newY;setNewFrame(widget,newX,newY,newWidth,newHeight);}break;case LEFT_BOTTOM:{int newX=Math.min(originalBounds.x + originalBounds.width - widget.getMinWidth(),posX);newX=clampX(newX,base);newX=snapLeft(widgets,widget,newX,mSnapCandidates);int newWidth=originalBounds.x + originalBounds.width - newX;int newHeight=posY - originalBounds.y;newHeight=snapHeight(widgets,widget,newHeight,mSnapCandidates);setNewFrame(widget,newX,y,newWidth,newHeight);}break;case RIGHT_TOP:{int newY=Math.min(originalBounds.y + originalBounds.height - widget.getMinHeight(),posY);newY=clampY(newY,base);newY=snapTop(widgets,widget,newY,mSnapCandidates);int newWidth=posX - originalBounds.x;newWidth=snapWidth(widgets,widget,newWidth,mSnapCandidates);int newHeight=originalBounds.y + originalBounds.height - newY;setNewFrame(widget,x,newY,newWidth,newHeight);}break;case RIGHT_BOTTOM:{int newWidth=posX - originalBounds.x;int newHeight=posY - originalBounds.y;newWidth=snapWidth(widgets,widget,newWidth,mSnapCandidates);newHeight=snapHeight(widgets,widget,newHeight,mSnapCandidates);setNewFrame(widget,x,y,newWidth,newHeight);}break;case LEFT_SIDE:{int newX=Math.min(originalBounds.x + originalBounds.width - widget.getMinWidth(),posX);if (widget instanceof Guideline) {newX=posX;}newX=clampX(newX,base);newX=snapLeft(widgets,widget,newX,mSnapCandidates);int newWidth=originalBounds.x + originalBounds.width - newX;setNewFrame(widget,newX,y,newWidth,h);}break;case RIGHT_SIDE:{int newWidth=posX - originalBounds.x;newWidth=snapWidth(widgets,widget,newWidth,mSnapCandidates);setNewFrame(widget,x,y,newWidth,h);}break;case TOP_SIDE:{int newY=Math.min(originalBounds.y + originalBounds.height - widget.getMinHeight(),posY);if (widget instanceof Guideline) {newY=posY;}newY=clampY(newY,base);newY=snapTop(widgets,widget,newY,mSnapCandidates);int newHeight=originalBounds.y + originalBounds.height - newY;setNewFrame(widget,x,newY,w,newHeight);}break;case BOTTOM_SIDE:{int newHeight=posY - originalBounds.y;newHeight=snapHeight(widgets,widget,newHeight,mSnapCandidates);setNewFrame(widget,x,y,w,newHeight);}break;}}  }
class C{  public StaticFieldRef newStaticFieldRef(SootFieldRef f){  return Jimple.v().newStaticFieldRef(f);}  }
class C{  @Override public Object validate(String content,ValidationContext context,ValidatedInfo validatedInfo) throws InvalidDatatypeValueException {  if (context == null)   context=fEmptyContext;  if (validatedInfo == null)   validatedInfo=new ValidatedInfo(); else   validatedInfo.memberType=null;  boolean needNormalize=context == null || context.needToNormalize();  Object ob=getActualValue(content,context,validatedInfo,needNormalize);  validate(context,validatedInfo);  return ob;}  }
class C{  public static Long writeOpCRC32(String stream,byte[] payload){  CRC32 crc=requestCRC.get();  try {    crc.update(stream.getBytes(UTF_8));    crc.update(payload);    return crc.getValue();  }  finally {    crc.reset();  }}  }
class C{  public int find(String sub){  int s1=s != null ? s.indexOf(sub,pos) : -1;  if (s1 > -1) {    pos=s1;  }  return s1;}  }
class C{  @Override public boolean add(E value){  final int hash;  int index;  if (value == null) {    hash=0;    index=indexOfNull();  } else {    hash=value.hashCode();    index=indexOf(value,hash);  }  if (index >= 0) {    return false;  }  index=~index;  if (mSize >= mHashes.length) {    final int n=mSize >= (BASE_SIZE * 2) ? (mSize + (mSize >> 1)) : (mSize >= BASE_SIZE ? (BASE_SIZE * 2) : BASE_SIZE);    if (DEBUG)     Log.d(TAG,"add: grow from " + mHashes.length + " to "+ n);    final int[] ohashes=mHashes;    final Object[] oarray=mArray;    allocArrays(n);    if (mHashes.length > 0) {      if (DEBUG)       Log.d(TAG,"add: copy 0-" + mSize + " to 0");      System.arraycopy(ohashes,0,mHashes,0,ohashes.length);      System.arraycopy(oarray,0,mArray,0,oarray.length);    }    freeArrays(ohashes,oarray,mSize);  }  if (index < mSize) {    if (DEBUG)     Log.d(TAG,"add: move " + index + "-"+ (mSize - index)+ " to "+ (index + 1));    System.arraycopy(mHashes,index,mHashes,index + 1,mSize - index);    System.arraycopy(mArray,index,mArray,index + 1,mSize - index);  }  mHashes[index]=hash;  mArray[index]=value;  mSize++;  return true;}  }
class C{  private void rehash(){  if (size >= threshold - threshold / 4)   resize();}  }
class C{  public NewsfeedSearchQuery q(String value){  return unsafeParam("q",value);}  }
class C{  public boolean with_all(){  return soot.PhaseOptions.getBoolean(options,"with-all");}  }
class C{  public FontAction(String group,Font defaultFont){  super(group);  this.defaultFont=defaultFont;}  }
class C{  @Override public boolean checkCondition(){  return group.hasMember(player.getObjectId());}  }
class C{  public double EuclideanDistance(double[] x,double[] y){  double sum=0;  if (x.length != y.length) {    throw new RuntimeException("Given array lengths were not equal.");  }  int d=x.length;  for (int i=0; i < d; i++) {    sum=sum + (x[i] - y[i]) * (x[i] - y[i]);  }  sum=Math.sqrt(sum);  return sum;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FORCE_DEMOTE_MANAGER(String value0){  return new SM_SYSTEM_MESSAGE(1300985,value0);}  }
class C{  public SnippetObject elem(Object object){  return new SnippetObject(object,myPath.elem(),mySnippets);}  }
class C{  public HttpURLConnection applyTo(HttpURLConnection c) throws NoSuchAlgorithmException, KeyManagementException {  if (c instanceof HttpsURLConnection && mgr.size() > 0) {    SSLContext ssl=SSLContext.getInstance("TLS");    TrustManager[] trustManagers=buildArray();    ssl.init(null,trustManagers,null);    ((HttpsURLConnection)c).setSSLSocketFactory(ssl.getSocketFactory());    mgr.setHost(c.getURL().getHost());  }  return (c);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public TextSpectralSpellPreprocessor(String sArgs){  tWords=null;  hFoundWords=new Hashtable();  sWordMapSem=new Semaphore(1);  Args=sArgs.split(" ");}  }
class C{  private void initPresenter(){  this.photosPresenter=new PhotosImplementor(photosModel,this);  this.pagerPresenter=new PagerImplementor(this);  this.loadPresenter=new LoadImplementor(loadModel,this);  this.scrollPresenter=new ScrollImplementor(scrollModel,this);  this.swipeBackPresenter=new SwipeBackImplementor(this);}  }
class C{  @Override public void notifyElementUpdated(final Alarm alarm){  if (alarm == null) {    log.warn("notifyElementUpdated() - Warning: The received alarm was null.");    return;  }  log.debug("notifyElementUpdated() - Received an Alarm event with body: " + alarm.toString());  try {    EsAlarm esAlarm=esAlarmLogConverter.convert(alarm);    persistenceManager.storeData(esAlarm);  } catch (  Exception e) {    log.error("notifyElementUpdated() - Could not add Alarm to ElasticSearch: Alarm # " + alarm.getId() + ".",e);  }}  }
class C{  private void configureUI(UpdateSymbolInterface parent,boolean useScrollFrame,PanelConfigInterface config){  groupConfigList=config.getGroupList();  vendorOptionVersion=config.getVendorOptionVersion();  defaultFieldMap=config.getDefaultFieldMap();  setBorder(BorderFactory.createTitledBorder(config.getPanelTitle()));  if (containingPanel == null) {    setLayout(new BorderLayout());    containingPanel=new JPanel();    containingPanel.setLayout(new BorderLayout());    box=Box.createVerticalBox();    padding=new BasePanelPadding(box);    containingPanel.add(box,BorderLayout.CENTER);  }  for (  GroupConfigInterface groupConfig : groupConfigList) {    populateGroup(parent,box,groupConfig,null);  }  if (scrollFrame == null) {    if (useScrollFrame) {      scrollFrame=new JScrollPane(containingPanel);      containingPanel.setAutoscrolls(true);      Dimension boxSize=padding.addPadding();      scrollFrame.setPreferredSize(boxSize);      preferredSize=boxSize;      add(scrollFrame,BorderLayout.CENTER);    } else {      add(containingPanel,BorderLayout.CENTER);      preferredSize=this.getPreferredSize();    }  }}  }
class C{  private Node nodeListItem(int index){  if (fNodeListCache == null) {    if (needsSyncChildren()) {      synchronizeChildren();    }    if (firstChild == lastChild()) {      return index == 0 ? firstChild : null;    }    fNodeListCache=ownerDocument.getNodeListCache(this);  }  int i=fNodeListCache.fChildIndex;  ChildNode n=fNodeListCache.fChild;  boolean firstAccess=true;  if (i != -1 && n != null) {    firstAccess=false;    if (i < index) {      while (i < index && n != null) {        i++;        n=n.nextSibling;      }    } else     if (i > index) {      while (i > index && n != null) {        i--;        n=n.previousSibling();      }    }  } else {    if (index < 0) {      return null;    }    n=firstChild;    for (i=0; i < index && n != null; i++) {      n=n.nextSibling;    }  }  if (!firstAccess && (n == firstChild || n == lastChild())) {    fNodeListCache.fChildIndex=-1;    fNodeListCache.fChild=null;    ownerDocument.freeNodeListCache(fNodeListCache);  } else {    fNodeListCache.fChildIndex=i;    fNodeListCache.fChild=n;  }  return n;}  }
class C{  private static void deleteDirectoryOnExit(File directory) throws IOException {  if (!directory.exists()) {    return;  }  directory.deleteOnExit();  if (!isSymlink(directory)) {    cleanDirectoryOnExit(directory);  }}  }
class C{  private synchronized void trim(){  while (mCurrentSize > mSizeLimit) {    byte[] buf=mBuffersByLastUse.remove(0);    mBuffersBySize.remove(buf);    mCurrentSize-=buf.length;  }}  }
class C{  public void shouldAddCurrentTimeZoneOffsetToDate(){  addCurrentTimeZoneOffsetToDate=true;}  }
class C{  protected XMLNamespaceBinder createNamespaceBinder(){  return new XMLNamespaceBinder();}  }
class C{  public static <E>E justNot(E v,E not){  return v;}  }
class C{  private void inflateLayouts(){  inflateEmptyView();  inflateProgressView();  if (mConnectivityAware) {    inflateConnectivityView();    initConnectivity();  }}  }
class C{  public static void killSilently(AbstractAI ai2,Creature target){  target.getController().onDie(ai2.getOwner());}  }
class C{  protected T clientSecret(String value){  return unsafeParam("client_secret",value);}  }
class C{  public static String capitalize(String s){  if (s.charAt(0) >= 'a') {    return ((char)(s.charAt(0) + ('A' - 'a')) + s.substring(1));  } else {    return s;  }}  }
class C{  public static final MediaFormat createVideoFormat(String mime,int width,int height){  MediaFormat format=new MediaFormat();  format.setString(KEY_MIME,mime);  format.setInteger(KEY_WIDTH,width);  format.setInteger(KEY_HEIGHT,height);  return format;}  }
class C{  public DocsSearchQuery(VkApiClient client,UserActor actor,String q){  super(client,"docs.search",SearchResponse.class);  accessToken(actor.getAccessToken());  q(q);}  }
class C{  public void remove(Player player){  playersById.remove(player.getObjectId());  playersByName.remove(player.getName());}  }
class C{  public boolean isSetStatus(){  return __isset_bit_vector.get(__STATUS_ISSET_ID);}  }
class C{  @Override public void mouseExited(MouseEvent e){}  }
class C{  public static void overrideSymbolSet(SymbolInfo[] override){  symbols=override;}  }
class C{  public static Intent createGetContentIntent(){  final Intent intent=new Intent(Intent.ACTION_GET_CONTENT);  intent.setType("*/*");  intent.addCategory(Intent.CATEGORY_OPENABLE);  return intent;}  }
class C{  public boolean isSelected(){  ClusterViewer viewer=getViewer();  return viewer.getEcologicalIndex().equalsIgnoreCase(CalculateEcologicalIndices.EUCLIDEAN);}  }
class C{  private EtcdKV newKVClient(KVGrpc.KVFutureStub stub){  return new EtcdKVImpl(stub);}  }
class C{  private void upgradeIfNecessary(){  int userVersion=mUserVersion;  if (userVersion < 1) {    VUserInfo user=mUsers.get(VUserHandle.USER_OWNER);    if ("Primary".equals(user.name)) {      user.name="Admin";      writeUserLocked(user);    }    userVersion=1;  }  if (userVersion < USER_VERSION) {    VLog.w(LOG_TAG,"User version " + mUserVersion + " didn't upgrade as expected to "+ USER_VERSION);  } else {    mUserVersion=userVersion;    writeUserListLocked();  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FORCE_PROMOTE_MANAGER(String value0){  return new SM_SYSTEM_MESSAGE(1300984,value0);}  }
class C{  public ResponsePacket visit(SetUseSingleSpace request,QuerySession session){  ResponsePacket response=new ResponsePacket();  session.setUseRegularSpace(request.isUseSingleSpace());  return response;}  }
class C{  public String toString(){  return "ConstraintAlternatives" + Constraint.toString(constraints);}  }
class C{  public void onLongPress(long time,float x,float y){  if (mOverviewAnimationType == OverviewAnimationType.NONE) {    mLongPressSelected=getTabIndexAtPositon(x,y);    if (mLongPressSelected >= 0) {      startAnimation(time,OverviewAnimationType.VIEW_MORE,mLongPressSelected,false);      mEvenOutProgress=0.0f;    }  }}  }
class C{  public void updateView(){  Graphics2D graphics=(Graphics2D)getGraphics();  if (graphics != null) {    Dimension size=new Dimension();    draw(graphics,size);    setPreferredSize(size);    revalidate();  }}  }
class C{  public boolean isDocument(){  return doc != null;}  }
class C{  public TAC2008DirectoryFileSet(String sCorpusDir){  CorpusDir=sCorpusDir;  Categories=null;  TrainingFiles=new ArrayList<CategorizedFileEntry>();  TestFiles=new ArrayList<CategorizedFileEntry>();}  }
class C{  public PolynomialFunction multiply(final PolynomialFunction p){  double[] newCoefficients=new double[coefficients.length + p.coefficients.length - 1];  for (int i=0; i < newCoefficients.length; ++i) {    newCoefficients[i]=0.0;    for (int j=FastMath.max(0,i + 1 - p.coefficients.length); j < FastMath.min(coefficients.length,i + 1); ++j) {      newCoefficients[i]+=coefficients[j] * p.coefficients[i - j];    }  }  return new PolynomialFunction(newCoefficients);}  }
class C{  @Override public int hashCode(){  int result=info.getFilePath().hashCode();  result=31 * result + (int)(info.getBlockOffset() ^ (info.getBlockOffset() >>> 32));  result=31 * result + (int)(info.getBlockLength() ^ (info.getBlockLength() >>> 32));  result=31 * result + info.getSegmentId().hashCode();  return result;}  }
class C{  public void sendMessage(String mac,MessageItem item,boolean needResponse,OnSendMessageListener listener){  if (mCurrStatus != STATUS.CONNECTED)   connectDevice(mac,listener);  mMessageQueue.add(item);  WriteRunnable writeRunnable=new WriteRunnable(listener,needResponse);  mExecutorService.submit(writeRunnable);}  }
class C{  @Override public void elementDecl(String name,String contentModel,Augmentations augs) throws XNIException {  if (fValidation) {    if (fDTDElementDecls.contains(name)) {      fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"MSG_ELEMENT_ALREADY_DECLARED",new Object[]{name},XMLErrorReporter.SEVERITY_ERROR);    } else {      fDTDElementDecls.add(name);    }  }  if (fDTDGrammar != null)   fDTDGrammar.elementDecl(name,contentModel,augs);  if (fDTDHandler != null) {    fDTDHandler.elementDecl(name,contentModel,augs);  }}  }
class C{  public Map<String,Object> finalizeOrderEntryPayment(String checkOutPaymentId,BigDecimal amount,boolean singleUse,boolean append){  Map<String,Object> result=ServiceUtil.returnSuccess();  if (UtilValidate.isNotEmpty(checkOutPaymentId)) {    if (!append) {      cart.clearPayments();    }    cart.addPaymentAmount(checkOutPaymentId,amount,singleUse);  }  return result;}  }
class C{  public static GmmDiscretizer trainDiscretizer(List<Integer> values,int nrClasses,boolean extraZero){  List<Integer> retained=new ArrayList<Integer>(values);  Integer zero=new Integer(0);  if (extraZero && retained.contains(zero)) {    int i=0;    while (i < retained.size()) {      if (retained.get(i).equals(zero))       retained.remove(i); else       i++;    }  }  double[][] trainingData=new double[retained.size()][1];  for (int i=0; i < retained.size(); i++) {    trainingData[i][0]=retained.get(i);  }  int trainClasses;  if (extraZero) {    trainClasses=nrClasses - 1;  } else {    trainClasses=nrClasses;  }  GMMTrainerParams gmmParams=new GMMTrainerParams();  gmmParams.totalComponents=trainClasses;  gmmParams.emMinIterations=1000;  gmmParams.emMaxIterations=2000;  GMM model=(new GMMTrainer().train(trainingData,gmmParams));  return new GmmDiscretizer(model,extraZero);}  }
class C{  public static Query buildGroupClause(String propertyName,String group){  Query groupClause=new Query().setTermPropertyName(propertyName);  if (group == null || group.isEmpty()) {    groupClause.setTermMatchType(MatchType.WILDCARD).setTermMatchValue(UriUtils.URI_WILDCARD_CHAR);    groupClause.occurance=Occurance.MUST_NOT_OCCUR;  } else {    groupClause.setTermMatchValue(group);    groupClause.occurance=Occurance.MUST_OCCUR;  }  return groupClause;}  }
class C{  public void requestAssignSucReturnRoute(int nodeId){  enqueue(new AssignSucReturnRouteMessageClass().doRequest(nodeId,getCallbackId()));}  }
class C{  private void updateBounds(int top,int bottom,int left,int right){  bounds.set(left,top,right,bottom);}  }
class C{  public boolean hasWarning(){  return warning;}  }
class C{  public static GsClientPacket handle(ByteBuffer data,GsConnection client){  GsClientPacket msg=null;  State state=client.getState();  int id=data.get() & 0xff;switch (state) {case CONNECTED:{switch (id) {case 0:        msg=new CM_GS_AUTH();      break;case 13:    msg=new CM_MAC();  break;default :unknownPacket(state,id);}break;}case AUTHED:{switch (id) {case 1:msg=new CM_ACCOUNT_AUTH();break;case 2:msg=new CM_ACCOUNT_RECONNECT_KEY();break;case 3:msg=new CM_ACCOUNT_DISCONNECTED();break;case 4:msg=new CM_ACCOUNT_LIST();break;case 5:msg=new CM_LS_CONTROL();break;case 6:msg=new CM_BAN();break;case 8:msg=new CM_GS_CHARACTER();break;case 9:msg=new CM_ACCOUNT_TOLL_INFO();break;case 10:msg=new CM_MACBAN_CONTROL();break;case 11:msg=new CM_PREMIUM_CONTROL();break;case 12:msg=new CM_GS_PONG();break;case 13:msg=new CM_MAC();break;case 14:msg=new CM_PTRANSFER_CONTROL();break;default :unknownPacket(state,id);}break;}}if (msg != null) {msg.setConnection(client);msg.setBuffer(data);}return msg;}  }
class C{  public static ExpectedCondition<Boolean> heightOfElementGreaterThan(final WebElement element,final int expectedHeight){  return null;}  }
class C{  private boolean addViewItem(int index,boolean first){  View view=getItemView(index);  if (view != null) {    if (first) {      itemsLayout.addView(view,0);    } else {      itemsLayout.addView(view);    }    return true;  }  return false;}  }
class C{  public RoleNotFoundException(Throwable cause){  super(cause);}  }
class C{  public Infoflow(String androidPath,boolean forceAndroidJar){  super();  this.androidPath=androidPath;  this.forceAndroidJar=forceAndroidJar;  this.pathBuilderFactory=new DefaultPathBuilderFactory();}  }
class C{  public boolean isAxisMaxCustom(){  return mCustomAxisMax;}  }
class C{  static int max(float[] array){  int max=0;  float val=array[0];  for (int i=1; i < array.length; i++) {    if (val < array[i]) {      max=i;      val=array[i];    }  }  return max;}  }
class C{  public boolean haveUnread(){  for (  Letter letter : mails.values()) {    if (letter.isUnread()) {      return true;    }  }  return false;}  }
class C{  private static int inferAlignment(ConstraintWidget[] widget){  float[] start=new float[widget.length];  float[] center=new float[widget.length];  float[] end=new float[widget.length];  for (int i=0; i < end.length; i++) {    if (widget[i] == null) {      start[i]=Float.NaN;      end[i]=Float.NaN;      center[i]=Float.NaN;      continue;    }    start[i]=widget[i].getX();    end[i]=start[i] + widget[i].getWidth();    center[i]=(start[i] + end[i]) / 2;  }  float startDiv=standardDeviation(start);  float centerDiv=standardDeviation(center);  float endDiv=standardDeviation(end);  if (endDiv > startDiv && centerDiv > startDiv) {    return ALIGN_LEFT;  } else   if (startDiv > endDiv && centerDiv > endDiv) {    return ALIGN_RIGHT;  }  return ALIGN_CENTER;}  }
class C{  private void doDelete(FileEntry entry){  for (  FileAlterationListener listener : listeners) {    if (entry.isDirectory()) {      listener.onDirectoryDelete(entry.getFile());    } else {      listener.onFileDelete(entry.getFile());    }  }}  }
class C{  public void drawChartTransposed(Graphics2D gc){  gc.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);  gc.setFont(getFont(ChartViewer.FontKeys.XAxisFont.toString()));  int y0=getHeight() - bottomMargin;  int y1=topMargin;  int x0=leftMargin;  int scaleWidth=30;  int x1=getWidth() - rightMargin - scaleWidth;  if (x0 >= x1)   return;  if (inUpdateCoordinates) {    gc.setFont(getFont("Default"));    gc.setColor(Color.LIGHT_GRAY);    gc.drawString("Computing correlation plot...",x0,y1 + 20);    viewer.getScrollPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));    return;  } else   viewer.getScrollPane().setCursor(Cursor.getDefaultCursor());  if (sgc != null) {    drawYAxis(gc,null);  }  if (sgc == null) {    drawScaleBar(gc,x1,scaleWidth,y1,y0 - y1);  }  if (!getChartTitle().startsWith("Correlation plot: "))   setChartTitle("Correlation plot: " + getChartTitle());  final int numberOfSeries=(seriesNames == null ? 0 : seriesNames.length);  if (viewer.getSeriesList().isDoClustering())   y1+=topTreeSpace;  if (sgc == null) {    drawScaleBar(gc,x1,scaleWidth,y1,y0 - y1);  }  if (viewer.getSeriesList().isDoClustering()) {    x1-=rightTreeSpace;    int width=(int)((x1 - x0) / (numberOfSeries + 1.0) * numberOfSeries);    int xStart=x0 + ((x1 - x0) - width) / 2;    final Rectangle rect=new Rectangle(xStart,y1 - topTreeSpace,width,topTreeSpace);    topClusteringTree.paint(gc,rect);  }  if (viewer.getSeriesList().isDoClustering()) {    int height=(int)Math.round((y0 - y1) / (numberOfSeries + 1.0) * numberOfSeries);    int yStart=y0 + ((y1 - y0) - height) / 2;    final Rectangle rect=new Rectangle(x1,yStart,rightTreeSpace,height);    rightClusteringTree.paint(gc,rect);  }  if (numberOfSeries > 0) {    double xStep=(x1 - x0) / (double)numberOfSeries;    double yStep=(y0 - y1) / (double)numberOfSeries;    int d=0;    for (    final String seriesNameX : seriesNames) {      final double xLabel=x0 + (d + 0.5) * xStep;      Point2D apt=new Point2D.Double(xLabel,getHeight() - bottomMargin + 10);      final Dimension labelSize=Basic.getStringSize(gc,seriesNameX,gc.getFont()).getSize();      if (classLabelAngle == 0) {        apt.setLocation(apt.getX() - labelSize.getWidth() / 2,apt.getY());      } else       if (classLabelAngle > Math.PI / 2) {        apt=Geometry.translateByAngle(apt,classLabelAngle,-labelSize.width);      }      if (getChartData().getChartSelection().isSelected(seriesNameX,null)) {        fillAndDrawRect(gc,apt.getX(),apt.getY(),labelSize.width,labelSize.height,classLabelAngle,ProgramProperties.SELECTION_COLOR,ProgramProperties.SELECTION_COLOR_DARKER);      }      gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.DARK_GRAY));      drawString(gc,seriesNameX,apt.getX(),apt.getY(),classLabelAngle);      if (sgc != null) {        sgc.setCurrentItem(new String[]{seriesNameX,null});        drawRect(gc,apt.getX(),apt.getY(),labelSize.width,labelSize.height,classLabelAngle);        sgc.clearCurrentItem();      }      int c=numberOfSeries - 1;      for (      final String seriesNameY : seriesNames) {        final Float correlationCoefficient=dataMatrix.get(seriesNameX,seriesNameY);        if (correlationCoefficient != null) {          final double[] boundingBox=new double[]{x0 + d * xStep,y0 - (c + 1) * yStep,xStep,yStep};          drawCell(gc,boundingBox,correlationCoefficient);          if (sgc != null && !sgc.isShiftDown()) {            sgc.setCurrentItem(new String[]{seriesNameY,null});            gc.fillRect((int)Math.round(boundingBox[0]),(int)Math.round(boundingBox[1]),(int)Math.round(boundingBox[2]),(int)Math.round(boundingBox[3]));            sgc.clearCurrentItem();            sgc.setCurrentItem(new String[]{seriesNameY,null});            gc.fillRect((int)Math.round(boundingBox[0]),(int)Math.round(boundingBox[1]),(int)Math.round(boundingBox[2]),(int)Math.round(boundingBox[3]));            sgc.clearCurrentItem();          }          boolean isSelected=!seriesNameX.equals(seriesNameY) && getChartData().getChartSelection().isSelected(seriesNameX,null) && getChartData().getChartSelection().isSelected(seriesNameY,null);          if (isSelected) {            gc.setStroke(HEAVY_STROKE);            gc.setColor(ProgramProperties.SELECTION_COLOR);            gc.drawRect((int)Math.round(boundingBox[0]),(int)Math.round(boundingBox[1]),(int)Math.round(boundingBox[2]),(int)Math.round(boundingBox[3]));            gc.setStroke(NORMAL_STROKE);          }          if (showValues || isSelected) {            String aLabel=String.format("%.3f",correlationCoefficient);            valuesList.add(new DrawableValue(aLabel,(int)Math.round(boundingBox[0] + boundingBox[2] / 2),(int)Math.round(boundingBox[1] + boundingBox[3] / 2) - gc.getFont().getSize() / 2,isSelected));          }        }        c--;      }      d++;    }  }  if (valuesList.size() > 0) {    gc.setFont(getFont(ChartViewer.FontKeys.ValuesFont.toString()));    DrawableValue.drawValues(gc,valuesList,true,true);    valuesList.clear();  }}  }
class C{  protected LinkedList<String> splitIntoAllophones(String phoneString){  LinkedList<String> phoneList=new LinkedList<String>();  for (int i=0; i < phoneString.length(); i++) {    String name=null;    for (int j=3; j >= 1; j--) {      if (i + j <= phoneString.length()) {        String candidate=phoneString.substring(i,i + j);        if (getAllophone(candidate) != null) {          name=candidate;          i+=j - 1;          break;        }      }    }    if (name != null) {      phoneList.add(name);    }  }  return phoneList;}  }
class C{  public static String generatePassword(){  return RandomStringUtils.randomAlphanumeric(DEF_COUNT);}  }
class C{  public EnvVar(EnvVar envVar){  this.name=envVar.name;  this.type=envVar.type;  this.value=envVar.value;  this.predefined=envVar.predefined;}  }
class C{  public static WritableArrayWritable jsonArrayStringToWritableArrayWritable(String jsonString){  String modString=jsonString.replaceFirst("\\[","");  modString=modString.replaceFirst("\\]","");  modString=modString.replaceAll("\"","");  String[] elements=modString.split("\\s*,\\s*");  logger.debug("elements = ");  for (  String element : elements) {    logger.debug("element: " + element);  }  return new WritableArrayWritable(elements);}  }
class C{  private void updatePeerStats(){  int activePeers=0;  int connectablePeers=0;  for (  Peer peer : peerList) {    if (peer.isHasSentData() || peer.hasReceivedData()) {      activePeers++;    }    if (peer.hasReceivedData()) {      connectablePeers++;    }  }  float ratio=(float)connectablePeers / (float)activePeers;  mConnectablePeers.setText(String.valueOf(connectablePeers));  mActivePeers.setText(String.valueOf(activePeers));  mConnectableRatio.setText(String.valueOf(ratio));}  }
class C{  public String jsEncode(String object){  return StringEscapeUtils.escapeEcmaScript(object);}  }
class C{  private List<String> generateAddForeignKeySQL(){  List<String> addForeignKeySQLs=new ArrayList<String>();  List<String> foreignKeyColumns=getForeignKeyColumns(mTableModel);  for (  String foreignKeyColumn : foreignKeyColumns) {    if (!mTableModel.containsColumn(foreignKeyColumn)) {      ColumnModel columnModel=new ColumnModel();      columnModel.setColumnName(foreignKeyColumn);      columnModel.setColumnType("integer");      addForeignKeySQLs.add(generateAddColumnSQL(mTableModel.getTableName(),columnModel));    }  }  return addForeignKeySQLs;}  }
class C{  public static Map<String,Object> performFind(DispatchContext dctx,Map<String,?> context){  String entityName=(String)context.get("entityName");  String orderBy=(String)context.get("orderBy");  Map<String,?> inputFields=checkMap(context.get("inputFields"),String.class,Object.class);  String noConditionFind=(String)context.get("noConditionFind");  String distinct=(String)context.get("distinct");  List<String> fieldList=UtilGenerics.<String>checkList(context.get("fieldList"));  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  Delegator delegator=dctx.getDelegator();  if (UtilValidate.isEmpty(noConditionFind)) {    noConditionFind=(String)inputFields.get("noConditionFind");  }  if (UtilValidate.isEmpty(noConditionFind)) {    noConditionFind=EntityUtilProperties.getPropertyValue("widget","widget.defaultNoConditionFind",delegator);  }  String filterByDate=(String)context.get("filterByDate");  if (UtilValidate.isEmpty(filterByDate)) {    filterByDate=(String)inputFields.get("filterByDate");  }  Timestamp filterByDateValue=(Timestamp)context.get("filterByDateValue");  Integer viewSize=(Integer)context.get("viewSize");  Integer viewIndex=(Integer)context.get("viewIndex");  Integer maxRows=null;  if (viewSize != null && viewIndex != null) {    maxRows=viewSize * (viewIndex + 1);  }  LocalDispatcher dispatcher=dctx.getDispatcher();  Map<String,Object> prepareResult=null;  try {    prepareResult=dispatcher.runSync("prepareFind",UtilMisc.toMap("entityName",entityName,"orderBy",orderBy,"inputFields",inputFields,"filterByDate",filterByDate,"noConditionFind",noConditionFind,"filterByDateValue",filterByDateValue,"userLogin",userLogin,"locale",context.get("locale"),"timeZone",context.get("timeZone")));  } catch (  GenericServiceException gse) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonFindErrorPreparingConditions",UtilMisc.toMap("errorString",gse.getMessage()),locale));  }  EntityConditionList<EntityCondition> exprList=UtilGenerics.cast(prepareResult.get("entityConditionList"));  List<String> orderByList=checkList(prepareResult.get("orderByList"),String.class);  Map<String,Object> executeResult=null;  try {    executeResult=dispatcher.runSync("executeFind",UtilMisc.toMap("entityName",entityName,"orderByList",orderByList,"fieldList",fieldList,"entityConditionList",exprList,"noConditionFind",noConditionFind,"distinct",distinct,"locale",context.get("locale"),"timeZone",context.get("timeZone"),"maxRows",maxRows));  } catch (  GenericServiceException gse) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonFindErrorRetrieveIterator",UtilMisc.toMap("errorString",gse.getMessage()),locale));  }  if (executeResult.get("listIt") == null) {    if (Debug.verboseOn())     Debug.logVerbose("No list iterator found for query string + [" + prepareResult.get("queryString") + "]",module);  }  Map<String,Object> results=ServiceUtil.returnSuccess();  results.put("listIt",executeResult.get("listIt"));  results.put("listSize",executeResult.get("listSize"));  results.put("queryString",prepareResult.get("queryString"));  results.put("queryStringMap",prepareResult.get("queryStringMap"));  return results;}  }
class C{  public VideoReorderVideosQuery targetId(Integer value){  return unsafeParam("target_id",value);}  }
class C{  private Boolean addColumn(Column columnToAdd,Set<Interval> intervals){  return workingIntervals.put(columnToAdd,intervals) == null;}  }
class C{  @Override public void redoAction(UndoInterface undoRedoObject){  if ((attributeComboBox != null) && (undoRedoObject != null)) {    if (undoRedoObject.getNewValue() instanceof String) {      String newValue=(String)undoRedoObject.getNewValue();      attributeComboBox.setSelectedItem(newValue);    }  }}  }
class C{  public boolean isCallerValidForPackage(Context context,int authRequirements,String packageToMatch){  assert !TextUtils.isEmpty(packageToMatch);  return isCallerValid(context,authRequirements,packageToMatch);}  }
class C{  @Override public List<byte[]> read() throws IOException {  return read(0L);}  }
class C{  private static String doGetPath(String filename,int separatorAdd){  if (filename == null) {    return null;  }  int prefix=getPrefixLength(filename);  if (prefix < 0) {    return null;  }  int index=indexOfLastSeparator(filename);  int endIndex=index + separatorAdd;  if (prefix >= filename.length() || index < 0 || prefix >= endIndex) {    return "";  }  return filename.substring(prefix,endIndex);}  }
class C{  public void addSample(String sample,int sampleSize,BlastMode mode,int srcId,Map<String,Map<Integer,Integer[]>> sourceClassification2class2counts){  if (!Arrays.asList(this.getSampleNames()).contains(sample)) {    this.sampleSizes.add(sampleSize);    this.sampleNames.add(sample);    this.sampleUIds.add(System.currentTimeMillis());    this.blastModes.add(mode);    int tarId=Basic.getIndex(sample,this.sampleNames);    for (    String classification : sourceClassification2class2counts.keySet()) {      Map<Integer,Integer[]> sourceClass2counts=sourceClassification2class2counts.get(classification);      Map<Integer,Integer[]> targetClass2counts=this.classification2class2counts.get(classification);      if (targetClass2counts == null) {        targetClass2counts=new HashMap<>();        this.classification2class2counts.put(classification,targetClass2counts);      }      for (      Integer classId : sourceClass2counts.keySet()) {        Integer[] sourceCounts=sourceClass2counts.get(classId);        if (sourceCounts != null && srcId < sourceCounts.length && sourceCounts[srcId] != null) {          Integer[] targetCounts=targetClass2counts.get(classId);          Integer[] newCounts=new Integer[tarId + 1];          if (targetCounts != null) {            System.arraycopy(targetCounts,0,newCounts,0,targetCounts.length);          }          newCounts[tarId]=sourceCounts[srcId];          targetClass2counts.put(classId,newCounts);        }      }    }    if (this.totalReads >= 0)     this.totalReads+=sampleSize; else     this.totalReads=sampleSize;  }}  }
class C{  public static List reverseList(List l){  LinkedList lRes=new LinkedList();  int iListSize=l.size();  for (int iCnt=0; iCnt < iListSize; iCnt++) {    lRes.add(l.get(iListSize - iCnt - 1));  }  return lRes;}  }
class C{  @Override public boolean hasField(String fldName){  return ts.hasField(fldName);}  }
class C{  public List<Object> splitByPat(String text,Pattern pat,Map<String,Object> modelMap,String... groupKeyNames){  List<Object> res=new ArrayList<>();  Matcher m=pat.matcher(text);  int lastEndIndex=0;  while (m.find()) {    if (lastEndIndex < m.start()) {      res.add(cleanTextValueSafe(text.substring(lastEndIndex,m.start())));    }    Map<String,Object> info=FtlDocFileParser.makeObjectMap(modelMap);    for (int i=0; i < groupKeyNames.length; i++) {      if (i < groupKeyNames.length && groupKeyNames[i] != null && !groupKeyNames[i].isEmpty()) {        info.put(groupKeyNames[i],m.group(i));      }    }    res.add(info);    lastEndIndex=m.end();  }  if (lastEndIndex < text.length()) {    res.add(cleanTextValueSafe(text.substring(lastEndIndex)));  }  return res;}  }
class C{  @Override public void elementDecl(String name,String contentModel,Augmentations augs) throws XNIException {  if (fInternalSubset != null && !fInDTDExternalSubset) {    fInternalSubset.append("<!ELEMENT ");    fInternalSubset.append(name);    fInternalSubset.append(' ');    fInternalSubset.append(contentModel);    fInternalSubset.append(">\n");  }}  }
class C{  public static ServiceTypeBase toServiceTypeBase(Class cls) throws MarshalException {synchronized (serviceMap) {    return toServiceTypeBase(cls,true);  }}  }
class C{  @Override public AudioInputStream reSynthesize(int backchannelNumber,AudioFileFormat aft) throws SynthesisException {  double[] pScalesArray={1.0f};  double[] tScalesArray={1.0f};  return synthesizeUsingF0Modification(backchannelNumber,pScalesArray,tScalesArray,aft);}  }
class C{  public final boolean containsKey(String name){  return mMap.containsKey(name);}  }
class C{  private GSMessageImpl receiveFromQueue(long timeout) throws ReceiveFromQueueException {  Transaction txn=m_session.getTransaction();  if (_logger.isLoggable(Level.FINE)) {    _logger.log(Level.FINE,"receiveFromQueue(): Receiving from Queue, txn=" + txn);  }  try {    return (GSMessageImpl)m_space.take(m_jmsMessageTemplate,txn,timeout);  } catch (  Exception e) {    throw new ReceiveFromQueueException(e);  }}  }
class C{  public void refineByHighest(boolean attIsHighest,boolean defIsHighest,boolean staIsHighest){  ArrayList<IVCombination> refinedList=new ArrayList<>();  for (  IVCombination comb : iVCombinations) {    Boolean[] knownAttDefSta={attIsHighest,defIsHighest,staIsHighest};    if (Arrays.equals(comb.getHighestStatSignature(),knownAttDefSta)) {      refinedList.add(comb);    }  }  iVCombinations=refinedList;}  }
class C{  @Deployment(resources={"org/activiti/engine/test/api/oneTaskProcess.bpmn20.xml"}) public void testIncludeBinaryVariables() throws Exception {  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("oneTaskProcess",Collections.singletonMap("binaryVariable",(Object)"It is I, le binary".getBytes()));  processInstance=runtimeService.createProcessInstanceQuery().processInstanceId(processInstance.getId()).includeProcessVariables().singleResult();  assertNotNull(processInstance);  byte[] bytes=(byte[])processInstance.getProcessVariables().get("binaryVariable");  assertEquals("It is I, le binary",new String(bytes));}  }
class C{  public static ScoutWidget[] create(ConstraintWidget[] array){  ScoutWidget[] ret=new ScoutWidget[array.length];  ConstraintWidget root=array[0];  ScoutWidget rootwidget=new ScoutWidget(root,null);  ret[0]=rootwidget;  int count=1;  for (int i=0; i < ret.length; i++) {    if (array[i] != root) {      ret[count++]=new ScoutWidget(array[i],rootwidget);    }  }  Arrays.sort(ret);  if (DEBUG) {    for (int i=0; i < ret.length; i++) {      System.out.println("[" + i + "] -> "+ ret[i].mConstraintWidget+ "    "+ ret[i].mRootDistance);    }  }  return ret;}  }
class C{  public static void show(Context context,String message){  show(context,message,false);}  }
class C{  public static void inlineSites(List sites,Map options){  Iterator it=sites.iterator();  while (it.hasNext()) {    List l=(List)it.next();    SootMethod inlinee=(SootMethod)l.get(0);    Stmt toInline=(Stmt)l.get(1);    SootMethod container=(SootMethod)l.get(2);    inlineSite(inlinee,toInline,container,options);  }}  }
class C{  public XML11DTDConfiguration(SymbolTable symbolTable,XMLGrammarPool grammarPool){  this(symbolTable,grammarPool,null);}  }
class C{  @Deprecated public static boolean isThrowPartialFailure(int mod){  return !Modifiers.contains(mod,IGNORE_PARTIAL_FAILURE);}  }
class C{  public final int enableKey(){  if (packetKey != null) {    throw new KeyAlreadySetException();  }  int key=Rnd.nextInt();  packetKey=new EncryptionKeyPair(key);  log.debug("new encrypt key: " + packetKey);  return (key ^ 0xCD92E4D1) + 0x3FF2CCD7;}  }
class C{  public void show(){  preShow();  int xPos, yPos;  int[] location=new int[2];  mAnchor.getLocationOnScreen(location);  Rect anchorRect=new Rect(location[0],location[1],location[0] + mAnchor.getWidth(),location[1] + mAnchor.getHeight());  createActionList();  root.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));  root.measure(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);  int rootHeight=root.getMeasuredHeight();  int rootWidth=root.getMeasuredWidth();  int screenWidth=mWManager.getDefaultDisplay().getWidth();  int screenHeight=mWManager.getDefaultDisplay().getHeight();  if ((anchorRect.left + rootWidth) > screenWidth) {    xPos=anchorRect.left - (rootWidth - mAnchor.getWidth());  } else {    if (mAnchor.getWidth() > rootWidth) {      xPos=anchorRect.centerX() - (rootWidth / 2);    } else {      xPos=anchorRect.left;    }  }  int dyTop=anchorRect.top;  int dyBottom=screenHeight - anchorRect.bottom;  boolean onTop=(dyTop > dyBottom) ? true : false;  if (onTop) {    if (rootHeight > dyTop) {      yPos=15;      LayoutParams l=scroller.getLayoutParams();      l.height=dyTop - mAnchor.getHeight();    } else {      yPos=anchorRect.top - rootHeight;    }  } else {    yPos=anchorRect.bottom;    if (rootHeight > dyBottom) {      LayoutParams l=scroller.getLayoutParams();      l.height=dyBottom;    }  }  showArrow(((onTop) ? R.id.arrow_down : R.id.arrow_up),anchorRect.centerX() - xPos);  setAnimationStyle(screenWidth,anchorRect.centerX(),onTop);  mWindow.showAtLocation(mAnchor,Gravity.NO_GRAVITY,xPos,yPos);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_BUDDYLIST_ADD_BUDDY_ACCEPTED(String value0){  return new SM_SYSTEM_MESSAGE(1300885,value0);}  }
class C{  protected boolean isValidLine(String line){  return true;}  }
class C{  protected void fireChangeEvent(){  repaint();  if (changeEvent == null)   changeEvent=new ChangeEvent(this);  Iterator iter=listeners.iterator();  while (iter.hasNext())   ((ChangeListener)iter.next()).stateChanged(changeEvent);}  }
class C{  public NotesEditCommentQuery message(String value){  return unsafeParam("message",value);}  }
class C{  public static WorkspaceRoot fromProject(Project project){  BlazeImportSettings importSettings=BlazeImportSettingsManager.getInstance(project).getImportSettings();  if (importSettings == null) {    throw new IllegalStateException("null BlazeImportSettings.");  }  return fromImportSettings(importSettings);}  }
class C{  @Inject(optional=true) private void injectDataCenterAnnouncer(DataCenterAnnouncer ignore){}  }
class C{  public RealMatrix computeCorrelationMatrix(final double[][] matrix){  return computeCorrelationMatrix(new BlockRealMatrix(matrix));}  }
class C{  public long[] keys(){  long[] keys=new long[size()];  long[] k=_set;  byte[] states=_states;  for (int i=k.length, j=0; i-- > 0; ) {    if (states[i] == FULL) {      keys[j++]=k[i];    }  }  return keys;}  }
class C{  @Override public void write(byte[] b) throws IOException {  write(b,0,b.length);}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }}  }
class C{  public boolean canUseCachedProjectData(){  if (!myGradlePluginVersion.equals(GRADLE_PLUGIN_RECOMMENDED_VERSION)) {    return false;  }  for (  Map.Entry<String,byte[]> entry : myFileChecksums.entrySet()) {    File file=new File(entry.getKey());    if (!file.isAbsolute()) {      file=new File(myRootDirPath,file.getPath());    }    try {      if (!Arrays.equals(entry.getValue(),createChecksum(file))) {        return false;      }    } catch (    IOException e) {      return false;    }  }  return true;}  }
class C{  public AemInsertWindow waitToBeDisplayed(){  wait.withTimeout(Timeouts.MEDIUM).until(ExpectedConditions.visibilityOf(currentScope));  return this;}  }
class C{  public CM_RECONNECT_AUTH(int opcode,State state,State... restStates){  super(opcode,state,restStates);}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public synchronized void endEffect(){  if (isStopped) {    return;  }  for (  EffectTemplate template : successEffects.values()) {    template.endEffect(this);  }  if (effector instanceof Player) {    Player player=(Player)effector;    if (player.getController().getStanceSkillId() == getSkillId()) {      PacketSendUtility.sendPacket(player,new SM_PLAYER_STANCE(player,0));      player.getController().startStance(0);    }  }  if (isToggle() && effector instanceof Player || isRiderEffect(getSkillId())) {    deactivateToggleSkill();  }  stopTasks();  effected.getEffectController().clearEffect(this);  this.isStopped=true;  this.addedToController=false;}  }
class C{  private boolean isNanpaNumberWithNationalPrefix(){  return (currentMetadata.getCountryCode() == 1) && (nationalNumber.charAt(0) == '1') && (nationalNumber.charAt(1) != '0')&& (nationalNumber.charAt(1) != '1');}  }
class C{  public FieldRotation(FieldVector3D<T> u1,FieldVector3D<T> u2,FieldVector3D<T> v1,FieldVector3D<T> v2) throws MathRuntimeException {  final FieldVector3D<T> u3=FieldVector3D.crossProduct(u1,u2).normalize();  u2=FieldVector3D.crossProduct(u3,u1).normalize();  u1=u1.normalize();  final FieldVector3D<T> v3=FieldVector3D.crossProduct(v1,v2).normalize();  v2=FieldVector3D.crossProduct(v3,v1).normalize();  v1=v1.normalize();  final T[][] array=MathArrays.buildArray(u1.getX().getField(),3,3);  array[0][0]=u1.getX().multiply(v1.getX()).add(u2.getX().multiply(v2.getX())).add(u3.getX().multiply(v3.getX()));  array[0][1]=u1.getY().multiply(v1.getX()).add(u2.getY().multiply(v2.getX())).add(u3.getY().multiply(v3.getX()));  array[0][2]=u1.getZ().multiply(v1.getX()).add(u2.getZ().multiply(v2.getX())).add(u3.getZ().multiply(v3.getX()));  array[1][0]=u1.getX().multiply(v1.getY()).add(u2.getX().multiply(v2.getY())).add(u3.getX().multiply(v3.getY()));  array[1][1]=u1.getY().multiply(v1.getY()).add(u2.getY().multiply(v2.getY())).add(u3.getY().multiply(v3.getY()));  array[1][2]=u1.getZ().multiply(v1.getY()).add(u2.getZ().multiply(v2.getY())).add(u3.getZ().multiply(v3.getY()));  array[2][0]=u1.getX().multiply(v1.getZ()).add(u2.getX().multiply(v2.getZ())).add(u3.getX().multiply(v3.getZ()));  array[2][1]=u1.getY().multiply(v1.getZ()).add(u2.getY().multiply(v2.getZ())).add(u3.getY().multiply(v3.getZ()));  array[2][2]=u1.getZ().multiply(v1.getZ()).add(u2.getZ().multiply(v2.getZ())).add(u3.getZ().multiply(v3.getZ()));  T[] quat=mat2quat(array);  q0=quat[0];  q1=quat[1];  q2=quat[2];  q3=quat[3];}  }
class C{  public static Map<String,Object> deletePaymentMethod(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  Security security=ctx.getSecurity();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  Timestamp now=UtilDateTime.nowTimestamp();  String paymentMethodId=(String)context.get("paymentMethodId");  GenericValue paymentMethod=null;  try {    paymentMethod=EntityQuery.use(delegator).from("PaymentMethod").where("paymentMethodId",paymentMethodId).queryOne();  } catch (  GenericEntityException e) {    Debug.logWarning(e.toString(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingPaymentMethodCannotBeDeleted",UtilMisc.toMap("errorString",e.getMessage()),locale));  }  if (paymentMethod == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingPaymentMethodCannotBeDeleted",UtilMisc.toMap("errorString",""),locale));  }  if (paymentMethod.get("partyId") == null || !paymentMethod.getString("partyId").equals(userLogin.getString("partyId"))) {    if (!security.hasEntityPermission("PAY_INFO","_DELETE",userLogin) && !security.hasEntityPermission("ACCOUNTING","_DELETE",userLogin)) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingPaymentMethodNoPermissionToDelete",locale));    }  }  paymentMethod.set("thruDate",now);  try {    paymentMethod.store();  } catch (  GenericEntityException e) {    Debug.logWarning(e.toString(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingPaymentMethodCannotBeDeletedWriteFailure",UtilMisc.toMap("errorString",e.getMessage()),locale));  }  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  public AccountRegisterDeviceQuery registerDevice(UserActor actor,String token,String deviceId){  return new AccountRegisterDeviceQuery(getClient(),actor,token,deviceId);}  }
class C{  public static String removeQueryStringFromTarget(String target){  if (UtilValidate.isEmpty(target))   return null;  int queryStart=target.indexOf('?');  if (queryStart < 0) {    return target;  }  return target.substring(0,queryStart);}  }
class C{  public AWSIotException(String message){  super(message);}  }
class C{  void acknowledge() throws CommitFailedException {  if (_logger.isLoggable(Level.FINE)) {    _logger.fine("GSsessionImpl.acknowledge(): " + m_sessionID);  }  unackedMessages.clear();  if (this.m_isQueue && !isAutoAck()) {    if (_logger.isLoggable(Level.FINE)) {      _logger.log(Level.FINE,"Acknowledging messages. Txn=" + _tx);    }    commitLocalTransaction();  }}  }
class C{  @Deployment(resources={"org/activiti/engine/test/history/HistoricProcessInstanceTest.testDeleteHistoricProcessInstanceWithCallActivity.bpmn20.xml","org/activiti/engine/test/history/HistoricProcessInstanceTest.testDeleteHistoricProcessInstanceWithCallActivity-subprocess.bpmn20.xml"}) public void testDeleteHistoricProcessInstanceWithCallActivity(){  if (processEngineConfiguration.getHistoryLevel().isAtLeast(HistoryLevel.AUDIT)) {    ProcessInstance pi=runtimeService.startProcessInstanceByKey("callSimpleSubProcess");    runtimeService.deleteProcessInstance(pi.getId(),"testing");    assertEquals(2L,historyService.createHistoricProcessInstanceQuery().count());    historyService.deleteHistoricProcessInstance(pi.getId());    assertEquals(0L,historyService.createHistoricProcessInstanceQuery().count());  }}  }
class C{  public ZWaveMultiAssociationCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);  versionMax=MAX_SUPPORTED_VERSION;}  }
class C{  public static Date str2Date(String str,String format){  if (str == null || str.length() == 0) {    return null;  }  if (format == null || format.length() == 0) {    format=FORMAT;  }  Date date=null;  try {    SimpleDateFormat sdf=new SimpleDateFormat(format);    date=sdf.parse(str);  } catch (  Exception e) {    e.printStackTrace();  }  return date;}  }
class C{  public static double calculateExpression(String expression){  return EXPR_EVAL_CACHE.get(expression,null);}  }
class C{  public static boolean isAccessLegal(SootMethod container,SootClass target){  return target.isPublic() || container.getDeclaringClass().getPackageName().equals(target.getPackageName());}  }
class C{  public int[][] readImage() throws IOException {  if (images == null) {    throw new IllegalStateException("Images file not initialized.");  }  return images.readImage();}  }
class C{  public static boolean isUnboxType(TypeName tn){switch (tn.toString()) {case "boolean":case "byte":case "char":case "short":case "int":case "long":case "float":case "double":    return true;}return false;}  }
class C{  private JPanel noDataSourcePanel(){  JPanel panel=new JPanel();  panel.setLayout(new BorderLayout());  JPanel labelPanel=new JPanel();  labelPanel.setLayout(new GridBagLayout());  JLabel label=new JLabel(Localisation.getString(MapRender.class,"MapRender.noDataSource"));  label.setFont(new Font("Arial",Font.BOLD,16));  labelPanel.add(label);  labelPanel.setBorder(BorderFactory.createEmptyBorder(10,10,10,10));  panel.add(labelPanel,BorderLayout.CENTER);  return panel;}  }
class C{  public static UserImpl signup(Map<String,String[]> parameters,String ip,List<SignupError> errors){  log.entering("GaeStore","signup");  String email=getFirst(parameters,"email");  String displayName=getFirst(parameters,"displayName");  String photoUrl=getFirst(parameters,"photoUrl");  String password=getFirst(parameters,"password");  String confirm=getFirst(parameters,"confirm");  if (Strings.isNullOrEmpty(email) || !EmailValidator.isValid(email)) {    errors.add(SignupError.INVALID_EMAIL);  }  if (Strings.isNullOrEmpty(displayName)) {    errors.add(SignupError.EMPTY_DISPLAY_NAME);  }  if (Strings.isNullOrEmpty(password)) {    errors.add(SignupError.INVALID_PASSWORD);  } else   if (!password.equals(confirm)) {    errors.add(SignupError.CONFIRM_MISMATCH);  } else   if (password.length() < 3) {    errors.add(SignupError.INVALID_PASSWORD);  }  PersistenceManager pm=pmf.getPersistenceManager();  try {    UserRecord record=findUserByEmail(pm,email);    if (record != null) {      errors.add(SignupError.EMAIL_REGISTERED);    } else     if (errors.isEmpty()) {      log.fine("Create new legacy user for: " + email);      record=new UserRecord();      record.setEmail(email);      record.setDisplayName(displayName);      record.setPhotoUrl(photoUrl);      record.setPassword(password);      record.setTosAccepted(true);      pm.makePersistent(record);      UserImpl user=createUserByRecord(record);      return user;    }  }  finally {    pm.close();  }  log.exiting("GaeStore","signup");  return null;}  }
class C{  public static FilterResolverIntf resolveFilter(Expression filterExpression,AbsoluteTableIdentifier absoluteTableIdentifier){  try {    FilterExpressionProcessor filterExpressionProcessor=new FilterExpressionProcessor();    return filterExpressionProcessor.getFilterResolver(filterExpression,absoluteTableIdentifier);  } catch (  Exception e) {    throw new RuntimeException("Error while resolving filter expression",e);  }}  }
class C{  private String generateFittingText(Method method,Rectangle2D rect,FontMetrics fontMetrics){  if (rect.getWidth() < fontMetrics.stringWidth("...")) {    return "";  }  String fullyQualified=method.getNameSpace() + "." + method.getName();  if (fontMetrics.stringWidth(fullyQualified) < rect.getWidth()) {    return fullyQualified;  }  String abbrevPackage=getShortPackageName(method.getNameSpace()) + "." + method.getName();  if (fontMetrics.stringWidth(abbrevPackage) < rect.getWidth()) {    return abbrevPackage;  }  if (fontMetrics.stringWidth(method.getName()) < rect.getWidth()) {    return method.getName();  }  return "";}  }
class C{  public static StatefulHash sha1(){  return Hashes.createStateful(SimpleHashParameters.SHA1);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FORCE_ALREADY_OTHER_FORCE(String value0){  return new SM_SYSTEM_MESSAGE(1300974,value0);}  }
class C{  public final boolean canSetDouble(String field){  Column col=getColumn(field);  return (col == null ? false : col.canSetDouble());}  }
class C{  public SimpleArrayMap(int capacity){  if (capacity == 0) {    mHashes=ContainerHelpers.EMPTY_INTS;    mArray=ContainerHelpers.EMPTY_OBJECTS;  } else {    allocArrays(capacity);  }  mSize=0;}  }
class C{  @Override public void addRange(int start,int end){  bitmap.add(start,end);}  }
class C{  private SocketChannel createChannel(String host,int port) throws IOException {  if (_logger.isLoggable(Level.FINE))   _logger.fine("connecting new socket channel to " + host + ":"+ port+ ", connect timeout="+ _config.getSocketConnectTimeout()+ " keepalive="+ LRMIUtilities.KEEP_ALIVE_MODE);  SocketChannel sockChannel;  for (int i=0; ; ++i) {    sockChannel=createSocket(host,port);    try {      sockChannel.socket().connect(m_Address,(int)_config.getSocketConnectTimeout());      break;    } catch (    ClosedSelectorException e) {      handleConnectError(i,host,port,sockChannel,e);    }  }  sockChannel.configureBlocking(_blocking);  sockChannel.read(ByteBuffer.allocate(0));  return sockChannel;}  }
class C{  @Override public boolean processData(ByteBuffer data){  LsClientPacket pck=lsPacketHandler.handle(data,this);  log.debug("recived packet: " + pck);  if (pck != null && pck.read()) {    ThreadPoolManager.getInstance().executeLsPacket(pck);  }  return true;}  }
class C{  @Override public void redoAction(UndoInterface undoRedoObject){  if ((filterTable != null) && (undoRedoObject != null)) {    try {      @SuppressWarnings("unchecked") List<FeatureTypeConstraint> newValue=(List<FeatureTypeConstraint>)undoRedoObject.getNewValue();      populateField(newValue);    } catch (    ClassCastException e) {    }  }}  }
class C{  public static int[] readAllInts(){  String[] fields=readAllStrings();  int[] vals=new int[fields.length];  for (int i=0; i < fields.length; i++)   vals[i]=Integer.parseInt(fields[i]);  return vals;}  }
class C{  public StringRequest(int method,String url,Listener<String> listener,ErrorListener errorListener){  super(method,url,errorListener);  mListener=listener;}  }
class C{  public static void updateBoolean(VisualItem item,String field,boolean b){  item.setBoolean(getStartField(field),item.getBoolean(field));  item.setBoolean(field,b);  item.setBoolean(getEndField(field),b);}  }
class C{  private static final String toXml(SandboxBody body){  StringBuilder sb=new StringBuilder();  sb.append("<Body Id=\"").append(body.getId()).append("\" Name=\"").append(body.getUserData()).append("\">");  sb.append(XmlGenerator.toXml(body.getOutlineColor(),"OutlineColor"));  sb.append(XmlGenerator.toXml(body.getFillColor(),"FillColor"));  sb.append("<Fixtures>");  int fSize=body.getFixtureCount();  for (int i=0; i < fSize; i++) {    BodyFixture bf=body.getFixture(i);    sb.append(XmlGenerator.toXml(bf));  }  sb.append("</Fixtures>");  sb.append(XmlGenerator.toXml(body.getTransform()));  sb.append(XmlGenerator.toXml(body.getMass(),body.isMassExplicit()));  sb.append(XmlGenerator.toXml(body.getLinearVelocity(),"Velocity"));  sb.append("<AngularVelocity>").append(Math.toDegrees(body.getAngularVelocity())).append("</AngularVelocity>");  sb.append(XmlGenerator.toXml(body.getAccumulatedForce(),"AccumulatedForce"));  sb.append("<AccumulatedTorque>").append(body.getAccumulatedTorque()).append("</AccumulatedTorque>");  sb.append("<AutoSleep>").append(body.isAutoSleepingEnabled()).append("</AutoSleep>");  sb.append("<Asleep>").append(body.isAsleep()).append("</Asleep>");  sb.append("<Active>").append(body.isActive()).append("</Active>");  sb.append("<Bullet>").append(body.isBullet()).append("</Bullet>");  sb.append("<LinearDamping>").append(body.getLinearDamping()).append("</LinearDamping>");  sb.append("<AngularDamping>").append(body.getAngularDamping()).append("</AngularDamping>");  sb.append("<GravityScale>").append(body.getGravityScale()).append("</GravityScale>");  sb.append("</Body>");  return sb.toString();}  }
class C{  @Override public void onBackPressed(){  if (folderMode && !isDisplayingFolderView()) {    setFolderAdapter();    return;  }  setResult(RESULT_CANCELED);  super.onBackPressed();}  }
class C{  @SuppressWarnings({"boxing","checkstyle:cyclomaticcomplexity","unchecked"}) private <T>T constructArg(Class<T> cls,Args mode,Stack<Class> stack) throws InstantiationException {  T arg=null;  T cachedValue=getCachedValue(cls);  if (cls.isPrimitive()) {    arg=cachedValue;  } else   if (Enum.class.isAssignableFrom(cls)) {    try {      Enum<?>[] values=(Enum<?>[])cls.getMethod("values").invoke(null);      arg=(T)values[0];    } catch (    ReflectiveOperationException|RuntimeException e) {      throw (InstantiationException)new InstantiationException().initCause(e);    }  } else   if (mode == Args.NULLS) {    arg=null;  } else   if (cachedValue != null) {    arg=cachedValue;  } else   if (cls == Object[].class) {    arg=(T)new Object[0];  } else   if (Modifier.isAbstract(cls.getModifiers())) {    arg=constructSubclass(cls,mode,stack);  } else {    try {      arg=cls.newInstance();    } catch (    Throwable e) {      try {        arg=constructObject(cls,mode,stack);      } catch (      Throwable e2) {        if (mode == Args.VALUES) {          throw e2;        }      }    }  }  if (arg != null) {    putInArgumentValueCache(arg.getClass(),arg);  }  return (T)arg;}  }
class C{  public static String toString(Serializable serializable){  if (null == serializable) {    return null;  }  try {    return (String)serializable;  } catch (  Exception e) {    return serializable.toString();  }}  }
class C{  public void actionPerformed(ActionEvent ev){  execute("set nodeShape=triangle;");}  }
class C{  @Override public BucketList updateBucketBatch(Experiment.ID experimentID,BucketList bucketList){  String CQL="BEGIN BATCH ";  for (int i=0; i < bucketList.getBuckets().size(); i++) {    Bucket b=bucketList.getBuckets().get(i);    CQL+="UPDATE bucket SET ";    if (b.getState() != null) {      CQL+="state = ?,";    }    if (b.getAllocationPercent() != null) {      CQL+="allocation = ?,";    }    if (b.getDescription() != null) {      CQL+="description = ?,";    }    if (b.isControl() != null) {      CQL+="is_control = ?,";    }    if (b.getPayload() != null) {      CQL+="payload = ?,";    }    if (",".equals(CQL.substring(CQL.length() - 1,CQL.length()))) {      CQL=CQL.substring(0,CQL.length() - 1);    }    CQL+="where experiment_id = ? and label = ?;";  }  CQL+="APPLY BATCH;";  try {    PreparedCqlQuery<Bucket.Label,String> temp=getDriver().getKeyspace().prepareQuery(getKeyspace().bucketCF()).withCql(CQL).asPreparedStatement();    for (int i=0; i < bucketList.getBuckets().size(); i++) {      Bucket b=bucketList.getBuckets().get(i);      if (b.getState() != null) {        temp=temp.withByteBufferValue(b.getState(),BucketStateSerializer.get());      }      if (b.getAllocationPercent() != null) {        temp=temp.withDoubleValue(b.getAllocationPercent());      }      if (b.getDescription() != null) {        temp=temp.withStringValue(b.getDescription());      }      if (b.isControl() != null) {        temp=temp.withBooleanValue(b.isControl());      }      if (b.getPayload() != null) {        temp=temp.withStringValue(b.getPayload());      }      temp=temp.withByteBufferValue(experimentID,ExperimentIDSerializer.get());      temp=temp.withByteBufferValue(b.getLabel(),BucketLabelSerializer.get());    }    temp.execute();  } catch (  ConnectionException e) {    throw new RepositoryException("Could not update bucket for experiment \"" + experimentID + "\"",e);  }  BucketList buckets;  buckets=getBuckets(experimentID);  return buckets;}  }
class C{  public int writeStringData(StringData stringData){  int off=data.position();  try {    int length=stringData.value.length();    writeUleb128(length);    write(Mutf8.encode(stringData.value));    writeByte(0);    return off;  } catch (  UTFDataFormatException e) {    throw new AssertionError(e);  }}  }
class C{  public boolean isConnected(){synchronized (lock) {    return connected;  }}  }
class C{  public int rank(){  double eps=Math.pow(2.0,-52.0);  double tol=Math.max(m,n) * s[0] * eps;  int r=0;  for (int i=0; i < s.length; i++) {    if (s[i] > tol) {      r++;    }  }  return r;}  }
class C{  public static long readSwappedUnsignedInteger(byte[] data,int offset){  long low=(((data[offset + 0] & 0xff) << 0) + ((data[offset + 1] & 0xff) << 8) + ((data[offset + 2] & 0xff) << 16));  long high=data[offset + 3] & 0xff;  return (high << 24) + (0xffffffffL & low);}  }
class C{  public static String readFully(Reader reader) throws IOException {  try {    StringWriter writer=new StringWriter();    char[] buffer=new char[1024];    int count;    while ((count=reader.read(buffer)) != -1) {      writer.write(buffer,0,count);    }    return writer.toString();  }  finally {    reader.close();  }}  }
class C{  @NotNull public ObservableBool hasErrors(){  return myHasErrors;}  }
class C{  public SpearmansCorrelation(final RankingAlgorithm rankingAlgorithm) throws MathIllegalArgumentException {  if (rankingAlgorithm instanceof NaturalRanking && NaNStrategy.REMOVED == ((NaturalRanking)rankingAlgorithm).getNanStrategy()) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NOT_SUPPORTED_NAN_STRATEGY,NaNStrategy.REMOVED);  }  data=null;  this.rankingAlgorithm=rankingAlgorithm;  rankCorrelation=null;}  }
class C{  public void actionPerformed(ActionEvent ev){  execute("set pc1=1 pc2=2;");}  }
class C{  public NotSetPositionException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void finishClassificationSection() throws IOException {  long dumpEnd=io.getPosition();  long indexStart=io.getPosition();  if (classificationIndexTmpFileWriter != null && classificationIndexTmpFileWriter.length() > 0) {    classificationIndexTmpFileWriter.close();    InputReader r=new InputReader(rma2File.getClassificationIndexTmpFile(),null,null,true);    final int bufferSize=1000000;    long length=r.length();    int blocks=(int)(length / bufferSize);    byte[] buffer=new byte[bufferSize];    long total=0;    for (int i=0; i < blocks; i++) {      if (r.read(buffer,0,bufferSize) < bufferSize)       throw new IOException("Buffer underflow");      io.write(buffer,0,bufferSize);      total+=bufferSize;    }    int remainder=(int)(length - bufferSize * blocks);    if (remainder > 0) {      if (r.read(buffer,0,remainder) < remainder)       throw new IOException("Buffer underflow");      io.write(buffer,0,remainder);      total+=remainder;    }    io.seekToEnd();  }  long indexEnd=io.getPosition();  rma2File.getClassificationIndexTmpFile().delete();  infoSection.addClassification(currentName,numberOfClasses,dumpStart,dumpEnd,indexStart,indexEnd);}  }
class C{  private void checkForNewEpisods(){  Logger.printInfo(TAG,"Checking for new episodes...");  ArrayList<Podcast> subscribedPodcasts;  try {    subscribedPodcasts=ProfileManager.getInstance().getSubscribedPodcasts();  } catch (  Exception e) {    subscribedPodcasts=new ArrayList<>();    Logger.printError(TAG,"Can't get favorites");    e.printStackTrace();  }  if (subscribedPodcasts.size() > 0) {    for (    Podcast podcast : subscribedPodcasts) {      try {        ArrayList<Episode> parsedEpisodes=BackendManager.getInstance().fetchEpisodes(podcast.getFeedUrl());        if (Feed.handleUpdates(parsedEpisodes,podcast)) {          sendNewEpisodsNotification(podcast);        }        Logger.printError(TAG,"Finished for podcast with url: " + podcast.getFeedUrl());      } catch (      Exception e) {        Logger.printError(TAG,"Can't check for updates for podcast with url: " + podcast.getFeedUrl());        e.printStackTrace();      }    }  }  Logger.printInfo(TAG,"Finished!");}  }
class C{  @Override public void bindAppearEvent(WXComponent component){  ConcurrentHashMap<String,AppearData> appearMap=mAppearMap.get(getRef());  if (appearMap == null) {    appearMap=new ConcurrentHashMap<>();  }  AppearData appearData=appearMap.get(component.getRef());  if (appearData == null) {    appearData=new AppearData();  }  appearData.mAppearComponent=component;  appearData.hasAppear=true;  appearMap.put(component.getRef(),appearData);  mAppearMap.put(getRef(),appearMap);}  }
class C{  public static FloatBuffer createFloatBuffer(float[] coords){  ByteBuffer bb=ByteBuffer.allocateDirect(coords.length * SIZEOF_FLOAT);  bb.order(ByteOrder.nativeOrder());  FloatBuffer fb=bb.asFloatBuffer();  fb.put(coords);  fb.position(0);  return fb;}  }
class C{  public void startPlayingAudio(String id,String file){  AudioPlayer audio=getOrCreatePlayer(id,file);  audio.startPlaying(file);  getAudioFocus();}  }
class C{  public PickRequest withCameraPicsDirectory(@Nullable final String pDirPath){  this.mCustomCameraPicsDirPath=pDirPath;  return this;}  }
class C{  public static boolean isMetalLookAndFeel(){  return UIUtils.isMetalLookAndFeel();}  }
class C{  public static int[] mergeArrays(int[] a1,int[] a2){  int[] a3=new int[a1.length + a2.length];  int i=0;  int j=0;  while (i + j < a3.length) {    if (i < a1.length && j < a2.length) {      if (a1[i] < a2[j]) {        a3[i + j]=a1[i];        i++;      } else {        a3[i + j]=a2[j];        j++;      }    } else {      if (i < a1.length) {        a3[i + j]=a1[i];        i++;      }      if (j < a2.length) {        a3[i + j]=a2[j];        j++;      }    }  }  return a3;}  }
class C{  public String[] lookup(String word,boolean generate){  StringBuilder buffer2=new StringBuilder();  List<String> results=new ArrayList<String>();  lookup(word,0,0,generate,buffer2,results);  String[] resultArray=new String[results.size()];  resultArray=results.toArray(resultArray);  return resultArray;}  }
class C{  private void updateButtonState(){  Button clearButton=mDialog.getButton(AlertDialog.BUTTON_POSITIVE);  if (clearButton != null)   clearButton.setEnabled(!mSelectedOptions.isEmpty());}  }
class C{  private void reserveRegisters(List<Insn> insns,Map<Insn,Stmt> insnsStmtMap,List<LocalRegisterAssignmentInformation> parameterInstructionsList){  int reservedRegs=0;  while (true) {    int regsNeeded=getRegsNeeded(reservedRegs,insns,insnsStmtMap);    int regsToReserve=regsNeeded - reservedRegs;    if (regsToReserve <= 0) {      break;    }    regAlloc.increaseRegCount(regsToReserve);    for (    Insn insn : insns) {      shiftRegs(insn,regsToReserve);    }    for (    LocalRegisterAssignmentInformation info : parameterInstructionsList) {      Register r=info.getRegister();      r.setNumber(r.getNumber() + regsToReserve);    }    reservedRegs+=regsToReserve;  }}  }
class C{  @Override public void updateClassifications(String[] cNames,List<UpdateItem> updateItemList,ProgressListener progressListener) throws IOException, CanceledException {  final UpdateItemList updateItems=(UpdateItemList)updateItemList;  long maxProgress=0;  for (int i=0; i < cNames.length; i++) {    maxProgress+=updateItems.getClassIds(i).size();  }  progressListener.setMaximum(maxProgress);  final Map<Integer,ListOfLongs>[] fName2ClassId2Location=new HashMap[cNames.length];  final Map<Integer,Integer>[] fName2ClassId2Weight=new HashMap[cNames.length];  for (int i=0; i < cNames.length; i++) {    fName2ClassId2Location[i]=new HashMap<>(10000);    fName2ClassId2Weight[i]=new HashMap<>(10000);  }  for (int i=0; i < cNames.length; i++) {    final Map<Integer,ListOfLongs> classId2Location=fName2ClassId2Location[i];    final Map<Integer,Integer> classId2weight=fName2ClassId2Weight[i];    for (    Integer classId : updateItems.getClassIds(i)) {      int weightedSize=updateItems.getSize(i,classId);      final ListOfLongs positions=new ListOfLongs();      classId2Location.put(classId,positions);      classId2weight.put(classId,weightedSize);      if (weightedSize > 0) {        for (UpdateItem item=updateItems.getFirst(i,classId); item != null; item=updateItems.getUpdateItem(item.getNextInClassification(i))) {          positions.add(item.getReadUId());        }      }      progressListener.incrementProgress();    }  }  ModifyClassificationsDAA.saveClassifications(daaHeader,cNames,fName2ClassId2Location,fName2ClassId2Weight);}  }
class C{  public Builder stroke(Boolean stroke){  this.stroke=stroke;  return this;}  }
class C{  public StandardDeviation withBiasCorrection(boolean biasCorrection){  return new StandardDeviation(variance.withBiasCorrection(biasCorrection));}  }
class C{  public Set<String> toFilenameSet(int iSubset){  HashSet s=new HashSet();  if ((iSubset & FROM_TRAINING_SET) > 0)   for (  Object elem : getTrainingSet()) {    CategorizedFileEntry cfeCur=(CategorizedFileEntry)elem;    s.add(cfeCur.getFileName());  }  if ((iSubset & FROM_TEST_SET) > 0)   for (  Object elem : getTestSet()) {    CategorizedFileEntry cfeCur=(CategorizedFileEntry)elem;    s.add(cfeCur.getFileName());  }  return s;}  }
class C{  public void warning(Object elementOrLocation,String message,Object... params){  model.addDiagIfNotSuppressed(elementOrLocation,Diag.warning(getLocation(elementOrLocation),Model.diagPrefix(aspectName) + message,params));}  }
class C{  public InterruptedStatusThread(ThreadGroup group,Runnable target,String name,long stackSize){  super(group,target,name,stackSize);}  }
class C{  public static boolean isBodyNormalEnabled(){  return bodyNormalEnabled;}  }
class C{  private void doInitialize(){  initAccessibility();  if (null == content) {    content=new StartPageContent();    add(content,BorderLayout.CENTER);    setFocusable(false);  }}  }
class C{  private String fetchComment(SVNStatusSyncInfo info){  String fetchedComment=Policy.bind("SynchronizeView.standardIncomingChangeSetComment");  IResourceVariant remoteResource=info.getRemote();  if (remoteResource instanceof ISVNRemoteResource) {    ISVNRemoteResource svnRemoteResource=(ISVNRemoteResource)remoteResource;    ISVNClientAdapter client=null;    try {      client=svnRemoteResource.getRepository().getSVNClient();      SVNUrl url=svnRemoteResource.getRepository().getRepositoryRoot();      SVNRevision rev=svnRemoteResource.getLastChangedRevision();      ISVNLogMessage[] logMessages=client.getLogMessages(url,rev,rev,false);      if (logMessages.length != 0) {        String logComment=logMessages[0].getMessage();        if (logComment.trim().length() != 0) {          fetchedComment=flattenComment(logComment);        } else {          fetchedComment="";        }      }    } catch (    SVNException e1) {      if (!e1.operationInterrupted()) {        SVNUIPlugin.log(e1);      }    }catch (    SVNClientException e) {      SVNUIPlugin.log(SVNException.wrapException(e));    } finally {      svnRemoteResource.getRepository().returnSVNClient(client);    }  }  return fetchedComment;}  }
class C{  public AemTags clear(){  for (  AemTagItem item : this) {    item.remove();  }  return this;}  }
class C{  protected GroupsApproveRequestQuery groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  @Transactional(readOnly=true) public BagCount[] checkFilteredBagCounts(String filterText){  TypedQuery<BagCount> query=myEM.createNamedQuery("Bag.countBagPaths",BagCount.class);  query.setParameter("text",filterText);  List<BagCount> results=query.getResultList();  return results.toArray(new BagCount[results.size()]);}  }
class C{  public static void startActionFoo(Context context,String param1,String param2){  Intent intent=new Intent(context,OnBootUpAlarmScheduler.class);  intent.setAction(ACTION_FOO);  intent.putExtra(EXTRA_PARAM1,param1);  intent.putExtra(EXTRA_PARAM2,param2);  context.startService(intent);}  }
class C{  @Override public final short readShort(){  final int byte1=bs.readByte();  final int byte2=bs.readByte();  return (short)((byte2 << 8) + byte1);}  }
class C{  public void addEntityName(String name){  if (name != null) {    this.entityNameSet.add(name);  }}  }
class C{  public TShortLongHashMap(){  super();}  }
class C{  public boolean toggleNeverTranslateDomainState(boolean value){  return toggleState(NEVER_DOMAIN,value);}  }
class C{  public static String addToNumberString(String numberString,long addAmount){  if (numberString == null)   return null;  int origLength=numberString.length();  long number=Long.parseLong(numberString);  return padNumberString(Long.toString(number + addAmount),origLength);}  }
class C{  public ResponsePacket visit(SetTransaction request,QuerySession session){  ResponsePacket response=new ResponsePacket();  session.setTransaction(request.getTransaction());  response.setIntResult(0);  return response;}  }
class C{  public void testSetValueCopy(){  VirtualFile file=myFixture.copyFileToProject("themeEditor/themeEditorStyle/styles_3.xml","res/values/styles.xml");  myFixture.copyFileToProject("themeEditor/themeEditorStyle/styles_3.xml","res/values-v17/styles.xml");  myFixture.copyFileToProject("themeEditor/themeEditorStyle/styles_4.xml","res/values-v19/styles.xml");  myFixture.copyFileToProject("themeEditor/themeEditorStyle/styles_3.xml","res/values-v22/styles.xml");  ItemResourceValue item=new ItemResourceValue("colorAccent",true,"#000000",false,null);  checkSetValue(file,item,"-v21","-v22");  myFixture.checkResultByFile("res/values-v21/styles.xml","themeEditor/themeEditorStyle/styles_4_modified.xml",true);  myFixture.checkResultByFile("res/values-v22/styles.xml","themeEditor/themeEditorStyle/styles_3_modified.xml",true);}  }
class C{  private void updateHalfDayTogglesState(int halfDay){switch (halfDay) {case HALF_DAY_1:    mFirstHalfDayToggle.setTextColor(mHalfDayToggleSelectedColor);  mSecondHalfDayToggle.setTextColor(mHalfDayToggleUnselectedColor);break;case HALF_DAY_2:mSecondHalfDayToggle.setTextColor(mHalfDayToggleSelectedColor);mFirstHalfDayToggle.setTextColor(mHalfDayToggleUnselectedColor);break;}}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new FileWriter(journalFileTmp),IO_BUFFER_SIZE);  writer.write(MAGIC);  writer.write("\n");  writer.write(VERSION_1);  writer.write("\n");  writer.write(Integer.toString(appVersion));  writer.write("\n");  writer.write(Integer.toString(valueCount));  writer.write("\n");  writer.write("\n");  for (  Entry entry : lruEntries.values()) {    if (entry.currentEditor != null) {      writer.write(DIRTY + ' ' + entry.key+ '\n');    } else {      writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');    }  }  writer.close();  journalFileTmp.renameTo(journalFile);  journalWriter=new BufferedWriter(new FileWriter(journalFile,true),IO_BUFFER_SIZE);}  }
class C{  public void addBitmapToCache(String key,Bitmap bitmap){  if (key == null || bitmap == null) {    return;  }  mMemoryCache.put(key,bitmap);  if (!getDiskCache().has(key)) {    OptionalStream<EditorOutputStream> output=getDiskCache().edit(key);    if (output.isPresent()) {      try {        bitmap.compress(Bitmap.CompressFormat.JPEG,70,output.get());        output.get().commit();      } catch (      Exception e) {        Log.e(TAG,"addBitmapToCache - " + e);      } finally {        output.get().abortUnlessCommitted();      }    }  }}  }
class C{  @Override public void powerOnSelfTest() throws Error {}  }
class C{  public void drawButton(Minecraft mc,int mouseX,int mouseY){  if (!visible)   return;  boolean flag=mouseX >= this.xPosition && mouseY >= this.yPosition && mouseX < this.xPosition + this.width && mouseY < this.yPosition + this.height;  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);  mc.getTextureManager().bindTexture(bookGuiTextures);  int k=0;  int l=192;  if (flag) {    k+=23;  }  if (!this.nextPage) {    l+=13;  }  this.drawTexturedModalRect(this.xPosition,this.yPosition,k,l,23,13);}  }
class C{  private void isaac3(){  mem[isaacI]=mem[(isaacX & MASK) >> 2] + isaacA + isaacB;  isaacB=mem[(mem[isaacI] >> SIZE_L & MASK) >> 2] + isaacX;  rsl[isaacI++]=isaacB;}  }
class C{  public void testQueryByAssigneeExcludeSubtasks() throws Exception {  TaskQuery query=taskService.createTaskQuery().taskAssignee("gonzo");  assertEquals(7,query.count());  assertEquals(7,query.list().size());  query=taskService.createTaskQuery().taskAssignee("gonzo").excludeSubtasks();  assertEquals(2,query.count());  assertEquals(2,query.list().size());  query=taskService.createTaskQuery().taskAssignee("kermit");  assertEquals(0,query.count());  assertEquals(0,query.list().size());  assertNull(query.singleResult());  query=taskService.createTaskQuery().taskAssignee("kermit").excludeSubtasks();  assertEquals(0,query.count());  assertEquals(0,query.list().size());  assertNull(query.singleResult());}  }
class C{  public StatelessScrollableDataIterator(String hQuery,SessionFactory sessionFactory,int fetchSize,int from,int size){  super(hQuery,sessionFactory,fetchSize,from,size);}  }
class C{  public Future execute(CompletionCallback<Object> callback){  return this.execute(null,callback);}  }
class C{  public CrashCountException(){  super();}  }
class C{  @Override public void scrollToTop(){  model.setToTop(true);  view.scrollToTop();}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public long optLong(int index){  return optLong(index,0);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_FPHeal_INTERVAL_HEAL_TO_B(String skilltarget,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201056,skilltarget,num0,skillname);}  }
class C{  public ConsoleWriter print(){  return println(0);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  Constraint.verify(principals);}  }
class C{  private PokemonUtils(){}  }
class C{  public ProgressEvent(String sTaskName,double dProgress){  TaskName=sTaskName;  Progress=dProgress;  SubtaskName="";}  }
class C{  public IfStmt newIfStmt(Value condition,Unit target){  return new JIfStmt(condition,target);}  }
class C{  public Builder intoClasspathEntries(@Nullable Collection<String> classpathEntries){  myClasspathEntries=classpathEntries;  return this;}  }
class C{  public ServerConfiguration enableDurableWrite(boolean enabled){  setProperty(SERVER_DURABLE_WRITE_ENABLED,enabled);  return this;}  }
class C{  public static boolean isPacked(TextEdit edit){  if (!(edit instanceof MultiTextEdit))   return true;  if (!edit.hasChildren())   return true;  TextEdit[] children=edit.getChildren();  if (edit.getOffset() != children[0].getOffset())   return false;  if (edit.getExclusiveEnd() != children[children.length - 1].getExclusiveEnd())   return false;  for (int i=0; i < children.length; i++) {    if (!isPacked(children[i]))     return false;  }  return true;}  }
class C{  private boolean initIfNecessary(){  if (ourDeviceManager == null) {    if (mySdkPath == null) {      IJ_LOG.error("No installed SDK found!");      return false;    }    ourDeviceManager=DeviceManager.createInstance(mySdkPath,SDK_LOG);  }  return true;}  }
class C{  public static String encodeHexString(byte[] data){  return new String(encodeHex(data));}  }
class C{  public static boolean sm(double a,double b){  return (b - a > SMALL);}  }
class C{  public String readLine() throws IOException {  String line=currentFilePart.readLine();  while (line == null) {    currentFilePart=currentFilePart.rollOver();    if (currentFilePart != null) {      line=currentFilePart.readLine();    } else {      break;    }  }  if ("".equals(line) && !trailingNewlineOfFileSkipped) {    trailingNewlineOfFileSkipped=true;    line=readLine();  }  return line;}  }
class C{  protected IObjectInfo<T> store_impl(Segment<T> segment,ObjectInfo<T> oi){  if (_invalid)   return null;  _size.incrementAndGet();  segment.incrementSize();  ObjectInfo<T> tail=segment.getTail();  tail.setForwardRef(oi);  oi.setBackwardRef(tail);  segment.setTail(oi);  return oi;}  }
class C{  public synchronized Map<String,Object> waitForResult(){  return this.waitForResult(10);}  }
class C{  public static String[] createTags(String cName){  String shortTag=Classification.createShortTag(cName);  String longTag=cName.toLowerCase() + "|";  if (shortTag.equals(longTag))   return new String[]{shortTag}; else   return new String[]{shortTag,longTag};}  }
class C{  public void processUtterance(Utterance utterance) throws ProcessException {  Relation tokenRelation;  if ((tokenRelation=utterance.getRelation(Relation.TOKEN)) == null) {    throw new IllegalStateException("TokenToWords: Token relation does not exist");  }  Item wordItem;  wordRelation=WordRelation.createWordRelation(utterance,this);  for (tokenItem=tokenRelation.getHead(); tokenItem != null; tokenItem=tokenItem.getNext()) {    FeatureSet featureSet=tokenItem.getFeatures();    String tokenVal=featureSet.getString("name");    tokenToWords(tokenVal);  }}  }
class C{  public static boolean contentEquals(InputStream input1,InputStream input2) throws IOException {  if (!(input1 instanceof BufferedInputStream)) {    input1=new BufferedInputStream(input1);  }  if (!(input2 instanceof BufferedInputStream)) {    input2=new BufferedInputStream(input2);  }  int ch=input1.read();  while (EOF != ch) {    int ch2=input2.read();    if (ch != ch2) {      return false;    }    ch=input1.read();  }  int ch2=input2.read();  return ch2 == EOF;}  }
class C{  public AccountSetPushSettingsQuery key(String value){  return unsafeParam("key",value);}  }
class C{  public BoardAddTopicQuery(VkApiClient client,UserActor actor,int groupId,String title){  super(client,"board.addTopic",Integer.class);  accessToken(actor.getAccessToken());  groupId(groupId);  title(title);}  }
class C{  public Mushroom(Material shroom){  super(shroom);  Validate.isTrue(shroom == Material.HUGE_MUSHROOM_1 || shroom == Material.HUGE_MUSHROOM_2,"Not a mushroom!");}  }
class C{  public void testIllegalArguments() throws Exception {  try {    new PhoneNumberMatch(-110,"1 800 234 45 67",new PhoneNumber());    fail();  } catch (  IllegalArgumentException e) {  }  try {    new PhoneNumberMatch(10,"1 800 234 45 67",null);    fail();  } catch (  NullPointerException e) {  }  try {    new PhoneNumberMatch(10,null,new PhoneNumber());    fail();  } catch (  NullPointerException e) {  }  try {    new PhoneNumberMatch(10,null,null);    fail();  } catch (  NullPointerException e) {  }}  }
class C{  public ImageSize scaleDown(int sampleSize){  return new ImageSize(width / sampleSize,height / sampleSize);}  }
class C{  public Line revert(){  final Line reverted=new Line(this);  reverted.direction=reverted.direction.negate();  return reverted;}  }
class C{  @Override public void endElement(String namespaceURI,String localName,String qName) throws SAXException {  if (saxParser != null) {    saxParser.endElement(namespaceURI,localName,qName);  }}  }
class C{  @VisibleForTesting static boolean isPrecachingEnabled(Context context){  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);  return prefs.getBoolean(PREF_IS_PRECACHING_ENABLED,false);}  }
class C{  public static synchronized PushMetricRegistryInstance create(Supplier<DateTime> now,boolean has_config,EndpointRegistration api){  return new PushMetricRegistryInstance(now,has_config,api);}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType,boolean notifyAuthFailure){  this(AccountManager.get(context),account,authTokenType,notifyAuthFailure);}  }
class C{  public static String formatFraction(Fraction f){  return getImproperInstance().format(f);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_PROCMPHeal_Instant_HEAL_A_TO_SELF(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200853,skillcaster,num0,skillname);}  }
class C{  @Override public void actionPerformed(ActionEvent e){  if (ACTION_START_RECORDING.equals(e.getActionCommand())) {    if (mSampler == null) {      mSampler=new Sampler();    }    mSampler.startSampling();    mRecordButton.setActionCommand(ACTION_STOP_RECORDING);    mRecordButton.setText("Stop Recording");  } else   if (ACTION_STOP_RECORDING.equals(e.getActionCommand())) {    mSampler.stopSampling();    mRecordButton.setActionCommand(ACTION_START_RECORDING);    mRecordButton.setText("Record");    setData(mSampler.getData());  } else   if (ACTION_SAVE_RECORDING.equals(e.getActionCommand())) {  } else   if (ACTION_LOAD_RECORDING.equals(e.getActionCommand())) {  } else   if (ACTION_THREAD_SELECTED.equals(e.getActionCommand())) {    int selected=mComboBox.getSelectedIndex();    if (selected >= 0 && selected < mComboBox.getItemCount()) {      String threadName=(String)mComboBox.getSelectedItem();      mtree=furnace.get(threadName);      mChart.setHTree(mtree);      double start=mtree.getFirstChild().getStart();      double end=mtree.getLastChild().getEnd();      mDataRange.setMin(start);      mDataRange.setMax(end);      mSelectionRange.setMin(start);      mSelectionRange.setMax(end);      LongDataSeries series=new LongDataSeries();      RangedContinuousSeries rangedSeries=new RangedContinuousSeries("CPU Load",mDataRange,new Range(0.0,(float)Sampler.MAX_VALUE),series);      Random r=new Random(System.currentTimeMillis());      for (int i=0; i < 100; i++) {        series.add((long)(start + (end - start) / 100 * i),(long)r.nextInt(100));      }      mLineChart.addLine(rangedSeries);      mScrollBar.setValues(mChart.getMaximumHeight() - mChart.getHeight(),mChart.getHeight(),0,mChart.getMaximumHeight());    }  }}  }
class C{  public static Map<String,Object> returnError(List<? extends Object> errorMessageList){  return returnProblem(ModelService.RESPOND_ERROR,null,errorMessageList,null,null);}  }
class C{  protected T filterStep(final T h,final boolean forward,final boolean acceptSmall) throws MathIllegalArgumentException {  T filteredH=h;  if (h.abs().subtract(minStep).getReal() < 0) {    if (acceptSmall) {      filteredH=forward ? minStep : minStep.negate();    } else {      throw new MathIllegalArgumentException(LocalizedODEFormats.MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION,h.abs().getReal(),minStep.getReal(),true);    }  }  if (filteredH.subtract(maxStep).getReal() > 0) {    filteredH=maxStep;  } else   if (filteredH.add(maxStep).getReal() < 0) {    filteredH=maxStep.negate();  }  return filteredH;}  }
class C{  private View fillDown(int pos,int top){  int end=(getBottom() - getTop()) - mListPadding.bottom;  int childTop=getFillChildBottom() + mDividerHeight;  while (childTop < end && pos < mItemCount) {    makeAndAddView(pos,getItemTop(pos),true,false);    pos++;    childTop=getFillChildBottom() + mDividerHeight;  }  return null;}  }
class C{  private void fixApostrophe(Utterance utterance){  Voice voice=utterance.getVoice();  for (Item item=utterance.getRelation(Relation.SEGMENT).getHead(); item != null; item=item.getNext()) {    String word=wordPath.findFeature(item).toString();    if (word.equals("'s")) {      String pname=item.getPrevious().toString();      if (("fa".indexOf(voice.getPhoneFeature(pname,"ctype")) != -1) && ("dbg".indexOf(voice.getPhoneFeature(pname,"cplace")) == -1)) {        prependSchwa(item);      } else       if (voice.getPhoneFeature(pname,"cvox").equals("-")) {        item.getFeatures().setString("name","s");      }    } else     if (word.equals("'ve") || word.equals("'ll") || word.equals("'d")) {      if ("-".equals(P_PH_VC.findFeature(item))) {        prependSchwa(item);      }    }  }}  }
class C{  private void traverseView(View view,Typeface typeface){  if (view instanceof ViewGroup) {    ViewGroup viewGroup=(ViewGroup)view;    for (int i=0; i < viewGroup.getChildCount(); i++) {      View v=viewGroup.getChildAt(i);      if (v instanceof TextView) {        ((TextView)v).setTypeface(typeface);      }      if (v instanceof ViewGroup) {        traverseView(v,typeface);      }    }  }}  }
class C{  public FieldVector<T> append(SparseFieldVector<T> v){  SparseFieldVector<T> res=new SparseFieldVector<T>(this,v.getDimension());  OpenIntToFieldHashMap<T>.Iterator iter=v.entries.iterator();  while (iter.hasNext()) {    iter.advance();    res.setEntry(iter.key() + virtualSize,iter.value());  }  return res;}  }
class C{  @Override public double[] makeCumulativeTestPoints(){  return new double[]{-0.5001,-0.5,-0.4999,-0.25,-0.0001,0.0,0.0001,0.25,1.0,1.2499,1.25,1.2501};}  }
class C{  public static int computeMinImageSampleSize(ImageSize srcSize){  int srcWidth=srcSize.getWidth();  int srcHeight=srcSize.getHeight();  int targetWidth=maxBitmapSize.getWidth();  int targetHeight=maxBitmapSize.getHeight();  int widthScale=(int)Math.ceil((float)srcWidth / targetWidth);  int heightScale=(int)Math.ceil((float)srcHeight / targetHeight);  return Math.max(widthScale,heightScale);}  }
class C{  @Override public AudioInputStream reSynthesize(int backchannelNumber,AudioFileFormat aft) throws SynthesisException {  float[] pScalesArray={1.0f};  float[] tScalesArray={1.0f};  float[] tScalesTimes={1.0f};  float[] pScalesTimes={1.0f};  return synthesizeUsingF0Modification(backchannelNumber,pScalesArray,pScalesTimes,tScalesArray,tScalesTimes,aft);}  }
class C{  public void activateAccount() throws LoginFailedException, RemoteServerException {  markTutorial(TutorialStateOuterClass.TutorialState.LEGAL_SCREEN);}  }
class C{  @Override public byte process(Target target){  Element word=navigator.getElement(target);  if (word == null)   return (byte)0;  String wordString=MaryDomUtils.tokenText(word);  if (wordFrequencies != null) {    String[] result=wordFrequencies.lookup(wordString);    if (result.length > 0) {      String freq=result[0];      if (values.contains(freq))       return values.get(freq);    }  }  return (byte)0;}  }
class C{  public byte[] unsafeGetArray(){  return bytes;}  }
class C{  public static Bitmap decodeSampledBitmapFromDescriptor(FileDescriptor fileDescriptor,int reqWidth,int reqHeight){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeFileDescriptor(fileDescriptor,null,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  options.inJustDecodeBounds=false;  return BitmapFactory.decodeFileDescriptor(fileDescriptor,null,options);}  }
class C{  @Override public Plane copySelf(){  return new Plane(this);}  }
class C{  private void reconfigurePipeline(){  if (fDTDValidator == null) {    fBindNamespaces=true;  } else   if (!fDTDValidator.hasGrammar()) {    fBindNamespaces=true;    fPerformValidation=fDTDValidator.validate();    XMLDocumentSource source=fDTDValidator.getDocumentSource();    XMLDocumentHandler handler=fDTDValidator.getDocumentHandler();    source.setDocumentHandler(handler);    if (handler != null)     handler.setDocumentSource(source);    fDTDValidator.setDocumentSource(null);    fDTDValidator.setDocumentHandler(null);  }}  }
class C{  public void init$Children(){  children=new ASTNode[1];}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_SLAYER_UPGRADE_LEVEL(String value0){  return new SM_SYSTEM_MESSAGE(1400137,value0);}  }
class C{  @Override public int hashCode(){  int result=name != null ? name.hashCode() : 0;  result=31 * result + (passwordHash != null ? passwordHash.hashCode() : 0);  return result;}  }
class C{  protected void checkEigenValues(double[] targetValues,EigenDecomposition ed,double tolerance){  double[] observed=ed.getRealEigenvalues();  for (int i=0; i < observed.length; i++) {    Assert.assertTrue(isIncludedValue(observed[i],targetValues,tolerance));    Assert.assertTrue(isIncludedValue(targetValues[i],observed,tolerance));  }}  }
class C{  public boolean isAggregate(){  return false;}  }
class C{  protected XMLErrorReporter createErrorReporter(){  return new XMLErrorReporter();}  }
class C{  public void endBoolean(boolean value){}  }
class C{  protected int addUniqueLeafNode(String elementName){  int contentSpecIndex=createContentSpec();  fContentSpec.setValues(XMLContentSpec.CONTENTSPECNODE_LEAF,elementName,null);  setContentSpec(contentSpecIndex,fContentSpec);  return contentSpecIndex;}  }
class C{  BKDLConfig(URI uri){  this(DLUtils.getZKServersFromDLUri(uri),DLUtils.getZKServersFromDLUri(uri),null,null,null);}  }
class C{  public static boolean isFileOlder(File file,Date date){  if (date == null) {    throw new IllegalArgumentException("No specified date");  }  return isFileOlder(file,date.getTime());}  }
class C{  int compare(K k1,K k2) throws ClassCastException {  Comparator<? super K> cmp=comparator;  if (cmp != null)   return cmp.compare(k1,k2); else   return ((Comparable<? super K>)k1).compareTo(k2);}  }
class C{  public void addColumn(String name,Class type){  addColumn(name,type,null);}  }
class C{  public DefaultNameExclusionStrategy(String... includes){  blacklist=new ArrayList<>(includes.length);  add(includes);}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  public PlacesGetCheckinsQuery userId(Integer value){  return unsafeParam("user_id",value);}  }
class C{  public TagData(Context ctx,Map<String,TimeSeriesMetricExpression> tagExpressions){  resolveMapping(ctx,tagExpressions,null).forEach(null);}  }
class C{  public static void populateContextScripts(Map<String,Object> context){  ClassLoader loader=Thread.currentThread().getContextClassLoader();  Enumeration<URL> resources;  try {    resources=loader.getResources("widgetContextScripts.properties");  } catch (  IOException e) {    Debug.logError(e,"Could not load list of widgetContextScripts.properties",module);    throw UtilMisc.initCause(new InternalError(e.getMessage()),e);  }  while (resources.hasMoreElements()) {    URL propertyURL=resources.nextElement();    if (Debug.infoOn()) {      Debug.logInfo("loading properties: " + propertyURL,module);    }    Properties props=UtilProperties.getProperties(propertyURL);    if (UtilValidate.isNotEmpty(props)) {      for (Iterator<Object> i=props.keySet().iterator(); i.hasNext(); ) {        String key=(String)i.next();        String scriptLocation=props.getProperty(key);        if (Debug.verboseOn()) {          Debug.logVerbose("Running widget context script " + scriptLocation,module);        }        String location=WidgetWorker.getScriptLocation(scriptLocation);        String method=WidgetWorker.getScriptMethodName(scriptLocation);        ScriptUtil.executeScript(location,method,context);      }    }  }}  }
class C{  public JSONWriter object() throws JSONException {  if (this.mode == 'i') {    this.mode='o';  }  if (this.mode == 'o' || this.mode == 'a') {    this.append("{");    this.push(new JSONObject());    this.comma=false;    return this;  }  throw new JSONException("Misplaced object.");}  }
class C{  public void populateColourMapField(FieldIdEnum fieldId,ColorMap colourMap){  if (fieldConfigManager == null) {    return;  }  FieldConfigBase fieldConfig=fieldConfigManager.get(fieldId);  if (fieldConfig != null) {    fieldConfig.populateField(colourMap);  }}  }
class C{  public void lockUserInput(){  locked=true;  tabbedPane.setEnabled(false);  setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  statusBar.setText2("Busy...");  getCommandManager().setEnableCritical(false);}  }
class C{  public ForceDirectedLayout(String group,ForceSimulator fsim,boolean enforceBounds,boolean runonce){  super(group);  m_nodeGroup=PrefuseLib.getGroupName(group,Graph.NODES);  m_edgeGroup=PrefuseLib.getGroupName(group,Graph.EDGES);  m_enforceBounds=enforceBounds;  m_runonce=runonce;  m_fsim=fsim;}  }
class C{  public boolean isPerStreamStatEnabled(){  return getBoolean(SERVER_ENABLE_PERSTREAM_STAT,SERVER_ENABLE_PERSTREAM_STAT_DEFAULT);}  }
class C{  public static Class<? extends Generator> toNukkit(WorldType worldType) throws IllegalArgumentException {switch (worldType) {case FLAT:    return Generator.getGenerator(Generator.TYPE_FLAT);case NORMAL:  return Generator.getGenerator(Generator.TYPE_INFINITE);case VERSION_1_1:return Generator.getGenerator(Generator.TYPE_OLD);default :throw new IllegalArgumentException("World type does not exist on Pocket Edition: " + worldType);}}  }
class C{  protected void drawLegend(Graphics2D gc,Dimension size){  SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);  boolean doDraw=(size == null);  if (chartViewer.getChartData() instanceof IChartData) {    boolean vertical=chartViewer.getShowLegend().equals("vertical");    gc.setFont(chartViewer.getChartDrawer().getFont(ChartViewer.FontKeys.LegendFont.toString()));    int yStart=getFont().getSize();    int x=3;    int maxX=x;{      String legend;      if (chartViewer.getChartData().getClassesLabel() != null)       legend="Legend (" + chartViewer.getChartData().getClassesLabel() + "):"; else       legend="Legend:";      if (doDraw) {        gc.setColor(Color.BLACK);        gc.drawString(legend,x,yStart);      }      Dimension labelSize=Basic.getStringSize(gc,legend,gc.getFont()).getSize();      maxX=Math.max(maxX,labelSize.width);    }    int y=yStart + (int)(1.5 * gc.getFont().getSize());    for (    String className : ((IChartData)chartViewer.getChartData()).getClassNames()) {      Dimension labelSize=Basic.getStringSize(gc,className,gc.getFont()).getSize();      if (x + 12 + labelSize.width+ 2 > getWidth() || vertical) {        x=2;        y+=1.5 * gc.getFont().getSize();      }      if (doDraw) {        Color color=chartViewer.getChartColorManager().getClassColor(chartViewer.getClass2HigherClassMapper().get(className));        gc.setColor(color);        if (sgc != null)         sgc.setCurrentItem(new String[]{null,className});        gc.fillRect(x,y - labelSize.height,labelSize.height,labelSize.height);        gc.setColor(color.darker());        gc.drawRect(x,y - labelSize.height,labelSize.height,labelSize.height);        gc.setColor(chartViewer.getChartDrawer().getFontColor(ChartViewer.FontKeys.LegendFont.toString(),Color.BLACK));        gc.drawString(className,x + labelSize.height + 2,y);        if (sgc != null)         sgc.clearCurrentItem();      }      maxX=Math.max(maxX,x);      x+=labelSize.height + 2 + labelSize.width+ 10;      if (vertical)       maxX=Math.max(maxX,x);    }    if (!doDraw) {      size.setSize(maxX,y + 5);    }  } else   if (chartViewer.getChartData() instanceof IPlot2DData) {    boolean vertical=chartViewer.getShowLegend().equals("vertical");    int yStart=getFont().getSize();    int x=3;    int maxX=x;    if (doDraw) {      String legend="Legend (samples):";      gc.setColor(Color.BLACK);      gc.drawString(legend,x,yStart);      Dimension labelSize=Basic.getStringSize(gc,legend,gc.getFont()).getSize();      maxX=Math.max(maxX,labelSize.width);    }    int y=yStart + (int)(1.5 * gc.getFont().getSize());    for (    String sampleName : chartViewer.getChartData().getSeriesNames()) {      String label=chartViewer.getSeriesLabelGetter().getLabel(sampleName);      if (!label.equals(sampleName))       label+=" (" + sampleName + ")";      final Dimension labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();      if (x + 12 + labelSize.width+ 2 > getWidth() || vertical) {        x=3;        y+=1.5 * gc.getFont().getSize();      }      if (doDraw) {        Color color=chartViewer.getChartColorManager().getSampleColor(sampleName);        gc.setColor(color);        if (sgc != null)         sgc.setCurrentItem(new String[]{sampleName,null});        gc.fillRect(x,y - labelSize.height,labelSize.height,labelSize.height);        gc.setColor(color.darker());        gc.drawRect(x,y - labelSize.height,labelSize.height,labelSize.height);        gc.setColor(chartViewer.getChartDrawer().getFontColor(ChartViewer.FontKeys.LegendFont.toString(),Color.BLACK));        gc.drawString(label,x + labelSize.height + 2,y);        if (sgc != null)         sgc.clearCurrentItem();      }      maxX=Math.max(maxX,x);      x+=labelSize.height + 2 + labelSize.width+ 10;      if (vertical)       maxX=Math.max(maxX,x);    }    if (!doDraw) {      size.setSize(maxX,y + 5);    }  }}  }
class C{  public Writer write(Writer writer) throws JSONException {  try {    boolean b=false;    Iterator keys=keys();    writer.write('{');    while (keys.hasNext()) {      if (b) {        writer.write(',');      }      Object k=keys.next();      writer.write(quote(k.toString()));      writer.write(':');      Object v=this.map.get(k);      if (v instanceof JSONObject) {        ((JSONObject)v).write(writer);      } else       if (v instanceof JSONArray) {        ((JSONArray)v).write(writer);      } else {        writer.write(valueToString(v));      }      b=true;    }    writer.write('}');    return writer;  } catch (  IOException exception) {    throw new JSONException(exception);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Pulled_ME_TO_SELF(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200398,num0,skillname);}  }
class C{  public boolean isApplicable(){  return getViewer().getParentViewer() != null && getViewer().getParentViewer().hasComparableData() && getViewer().getParentViewer().getSelectedNodes().size() > 0;}  }
class C{  public void build(Context context,SuggestionValue suggestionValue,List<SuggestionRow> suggestionList){  if (nextBuilder != null) {    nextBuilder.build(context,suggestionValue,suggestionList);  }}  }
class C{  private void checkArray(final long[][] in) throws MathIllegalArgumentException, NullArgumentException {  if (in.length < 2) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,in.length,2);  }  if (in[0].length < 2) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,in[0].length,2);  }  MathArrays.checkRectangular(in);  MathArrays.checkNonNegative(in);}  }
class C{  private void terminateTaskMgr(){  if (discoveryWakeupMgr != null) {    discoveryWakeupMgr.stop();    discoveryWakeupMgr.cancelAll();  }  if (discoveryTaskMgr != null) {    List pendingTasks=discoveryTaskMgr.getPending();    for (int i=0; i < pendingTasks.size(); i++) {      RetryTask pendingTask=(RetryTask)pendingTasks.get(i);      pendingTask.cancel();      discoveryTaskMgr.remove(pendingTask);    }    discoveryTaskMgr.terminate();    discoveryTaskMgr=null;    discoveryWakeupMgr=null;  }}  }
class C{  public static ModelLocation fromResAndNameOrAddress(String resource,String name){  return new ModelLocation(resource,name,true);}  }
class C{  public void updateProfile(GetPlayerResponse playerResponse){  updateProfile(playerResponse.getPlayerData());}  }
class C{  public boolean update(final SourceDataTag currentSourceDataTag,final ValueUpdate update){  boolean successfullySent=false;  this.equipmentLogger.trace("update - entering update()");  try {    successfullySent=doUpdate(currentSourceDataTag,update);  } catch (  Exception ex) {    this.equipmentLogger.error("update - Unexpected exception caught for tag " + currentSourceDataTag.getId() + ", "+ ex.getStackTrace(),ex);    SourceDataTagQuality quality=new SourceDataTagQuality(SourceDataTagQualityCode.UNKNOWN,"Could not send incoming valid source update to server: " + ex.getMessage());    this.equipmentSender.update(currentSourceDataTag.getId(),quality,update.getSourceTimestamp());  }  this.equipmentLogger.trace("update - leaving update()");  return successfullySent;}  }
class C{  private static void addSkills(Player player,int level,PlayerClass playerClass,Race playerRace){  SkillLearnTemplate[] skillTemplates=DataManager.SKILL_TREE_DATA.getTemplatesFor(playerClass,level,playerRace);  PlayerSkillList playerSkillList=player.getSkillList();  for (  SkillLearnTemplate template : skillTemplates) {    if (checkLearnIsPossible(player,playerSkillList,template)) {      if (template.isStigma())       playerSkillList.addStigmaSkill(player,template.getSkillId(),template.getSkillLevel()); else       playerSkillList.addSkill(player,template.getSkillId(),template.getSkillLevel());    }  }}  }
class C{  private void onPostScrollToPosition(int pos){  if (pos < 0)   return;  checkLastSticky(pos);}  }
class C{  public static boolean anyDimensionHasItems(Collection<DimensionalObject> dimensions){  if (dimensions == null || dimensions.isEmpty()) {    return false;  }  for (  DimensionalObject dim : dimensions) {    if (dim.hasItems()) {      return true;    }  }  return false;}  }
class C{  private void createVendorOptionPanel(){  vendorOptionRasterFactory=new VendorOptionRasterFactory(getClass(),getFunctionManager(),this);  List<VendorOptionInterface> veList=vendorOptionRasterFactory.getVendorOptionList();  if (veList != null) {    for (    VendorOptionInterface extension : veList) {      extension.setParentPanel(this);    }  }}  }
class C{  void addAssociatedTableNameToClearFK(String associatedTableName){  List<String> list=getListToClearAssociatedFK();  if (!list.contains(associatedTableName)) {    list.add(associatedTableName);  }}  }
class C{  public Vector2f subtractLocal(Vector2f vec){  if (null == vec) {    logger.warning("Provided vector is null, null returned.");    return null;  }  x-=vec.x;  y-=vec.y;  return this;}  }
class C{  public void remove(String key) throws IllegalStateException {  validateKey(key);  Entry entry;synchronized (mDiskCacheLock) {    entry=mLruEntries.remove(key);  }  if (entry != null) {    if (entry.getCurrentEditorStream() != null) {      throw new IllegalStateException("trying to remove a disk cache entry that is still under edit.");    }    File file=entry.getCleanFile();    if (!file.exists() || file.delete()) {      mSizeInBytes.getAndAdd(-entry.getLengthInBytes());    } else {synchronized (mRemoveRetryLock) {        mRemoveRetryList.add(entry);      }    }  }}  }
class C{  private void executeBadgeByContentProvider(Context context,ComponentName componentName,int badgeCount){  if (badgeCount < 0) {    return;  }  if (mQueryHandler == null) {    mQueryHandler=new AsyncQueryHandler(context.getApplicationContext().getContentResolver()){    };  }  insertBadgeAsync(badgeCount,componentName.getPackageName(),componentName.getClassName());}  }
class C{  public static long sizeOfDirectory(File directory){  checkDirectory(directory);  final File[] files=directory.listFiles();  if (files == null) {    return 0L;  }  long size=0;  for (  final File file : files) {    try {      if (!isSymlink(file)) {        size+=sizeOf(file);        if (size < 0) {          break;        }      }    } catch (    IOException ioe) {    }  }  return size;}  }
class C{  public MultiStartUnivariateOptimizer(final UnivariateOptimizer optimizer,final int starts,final RandomGenerator generator){  super(optimizer.getConvergenceChecker());  if (starts < 1) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_SMALL,starts,1);  }  this.optimizer=optimizer;  this.starts=starts;  this.generator=generator;}  }
class C{  private static boolean isXLargeTablet(Context context){  return (context.getResources().getConfiguration().screenLayout & Configuration.SCREENLAYOUT_SIZE_MASK) >= Configuration.SCREENLAYOUT_SIZE_XLARGE;}  }
class C{  public void clearCache(){  cachedCatchable.clear();  cachedMapObjects.getNearbyPokemons().clear();  cachedMapObjects.getCatchablePokemons().clear();  cachedMapObjects.getWildPokemons().clear();  cachedMapObjects.getDecimatedSpawnPoints().clear();  cachedMapObjects.getSpawnPoints().clear();}  }
class C{  @Deployment public void testDeleteTaskWithChildren() throws Exception {  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("testBatchDeleteOfTask");  assertNotNull(processInstance);  assertFalse(processInstance.isEnded());  Task firstTask=taskService.createTaskQuery().processInstanceId(processInstance.getId()).taskDefinitionKey("taskOne").singleResult();  assertNotNull(firstTask);  taskService.complete(firstTask.getId());  processInstance=runtimeService.createProcessInstanceQuery().processInstanceId(processInstance.getId()).singleResult();  assertNull(processInstance);}  }
class C{  public double[] apply(double[] signal){  return new BufferedDoubleDataSource(signal,new Processor(a)).getAllData();}  }
class C{  private StartHarness() throws InterruptedException {  super("Start Harness");}  }
class C{  @Override public void purgeLogsOlderThan(long minTxIdToKeep) throws IOException {  Preconditions.checkArgument(minTxIdToKeep > 0,"Invalid transaction id " + minTxIdToKeep);  checkClosedOrInError("purgeLogSegmentsOlderThan");  BKLogWriteHandler ledgerHandler=createWriteHandler(true);  try {    LOG.info("Purging logs for {} older than {}",ledgerHandler.getFullyQualifiedName(),minTxIdToKeep);    FutureUtils.result(ledgerHandler.purgeLogSegmentsOlderThanTxnId(minTxIdToKeep));  }  finally {    Utils.closeQuietly(ledgerHandler);  }}  }
class C{  public static Map<String,Object> quickCreateVirtualWithVariants(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  Timestamp nowTimestamp=UtilDateTime.nowTimestamp();  String variantProductIdsBag=(String)context.get("variantProductIdsBag");  String productFeatureIdOne=(String)context.get("productFeatureIdOne");  String productFeatureIdTwo=(String)context.get("productFeatureIdTwo");  String productFeatureIdThree=(String)context.get("productFeatureIdThree");  Locale locale=(Locale)context.get("locale");  Map<String,Object> successResult=ServiceUtil.returnSuccess();  try {    String productId=(String)context.get("productId");    if (UtilValidate.isEmpty(productId)) {      productId=delegator.getNextSeqId("Product");      GenericValue product=delegator.makeValue("Product");      product.set("productId",productId);      product.set("isVirtual","Y");      product.set("isVariant","N");      product.set("productTypeId","FINISHED_GOOD");      product.set("introductionDate",nowTimestamp);      product.set("returnable","Y");      product.set("taxable","Y");      product.set("chargeShipping","Y");      product.set("autoCreateKeywords","Y");      product.set("includeInPromotions","Y");      product.create();    }    successResult.put("productId",productId);    Set<String> prelimVariantProductIds=FastSet.newInstance();    List<String> splitIds=Arrays.asList(variantProductIdsBag.split("[,\\p{Space}]"));    Debug.logInfo("Variants: bag=" + variantProductIdsBag,module);    Debug.logInfo("Variants: split=" + splitIds,module);    prelimVariantProductIds.addAll(splitIds);    Map<String,GenericValue> variantProductsById=FastMap.newInstance();    for (    String variantProductId : prelimVariantProductIds) {      if (UtilValidate.isEmpty(variantProductId)) {        continue;      }      GenericValue variantProduct=EntityQuery.use(delegator).from("Product").where("productId",variantProductId).queryOne();      if (variantProduct != null) {        variantProductsById.put(variantProductId,variantProduct);      } else {        List<GenericValue> goodIdentificationList=EntityQuery.use(delegator).from("GoodIdentification").where("idValue",variantProductId).queryList();        if (UtilValidate.isEmpty(goodIdentificationList)) {          return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductVirtualVariantCreation",UtilMisc.toMap("variantProductId",variantProductId),locale));        }        if (goodIdentificationList.size() > 1) {          Debug.logWarning("Warning creating a virtual with variants: the ID [" + variantProductId + "] was not a productId and resulted in ["+ goodIdentificationList.size()+ "] GoodIdentification records: "+ goodIdentificationList,module);        }        for (        GenericValue goodIdentification : goodIdentificationList) {          GenericValue giProduct=goodIdentification.getRelatedOne("Product",false);          if (giProduct != null) {            variantProductsById.put(giProduct.getString("productId"),giProduct);          }        }      }    }    Set<String> featureProductIds=FastSet.newInstance();    featureProductIds.add(productId);    featureProductIds.addAll(variantProductsById.keySet());    Set<String> productFeatureIds=new HashSet<String>();    productFeatureIds.add(productFeatureIdOne);    productFeatureIds.add(productFeatureIdTwo);    productFeatureIds.add(productFeatureIdThree);    for (    String featureProductId : featureProductIds) {      for (      String productFeatureId : productFeatureIds) {        if (UtilValidate.isNotEmpty(productFeatureId)) {          GenericValue productFeatureAppl=delegator.makeValue("ProductFeatureAppl",UtilMisc.toMap("productId",featureProductId,"productFeatureId",productFeatureId,"productFeatureApplTypeId","STANDARD_FEATURE","fromDate",nowTimestamp));          productFeatureAppl.create();        }      }    }    for (    GenericValue variantProduct : variantProductsById.values()) {      variantProduct.set("isVirtual","N");      variantProduct.set("isVariant","Y");      variantProduct.set("introductionDate",nowTimestamp);      variantProduct.store();      GenericValue productAssoc=delegator.makeValue("ProductAssoc",UtilMisc.toMap("productId",productId,"productIdTo",variantProduct.get("productId"),"productAssocTypeId","PRODUCT_VARIANT","fromDate",nowTimestamp));      productAssoc.create();    }  } catch (  GenericEntityException e) {    String errMsg="Error creating new virtual product from variant products: " + e.toString();    Debug.logError(e,errMsg,module);    return ServiceUtil.returnError(errMsg);  }  return successResult;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_LIMIT_SALE_M_EPIC_SHOP_DESC02(String value0){  return new SM_SYSTEM_MESSAGE(1400440,value0);}  }
class C{  public static Double stringToDouble(String val){  return Double.valueOf(trim(val));}  }
class C{  @Override public void close() throws IOException {  for (  Reader delegate : this.delegates)   delegate.close();}  }
class C{  public PhotosGetQuery(VkApiClient client,UserActor actor){  super(client,"photos.get",GetResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public SparseIntArray(){  this(10);}  }
class C{  public boolean notifyPendingInvalidations(final Context context){  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);  String accountName=prefs.getString(DELAYED_ACCOUNT_NAME,null);  if (accountName == null) {    Log.d(TAG,"No pending invalidations.");    return false;  } else {    Log.d(TAG,"Handling pending invalidations.");    Account account=AccountManagerHelper.createAccountFromName(accountName);    List<Bundle> bundles=popPendingInvalidations(context);    notifyInvalidationsOnBackgroundThread(context,account,bundles);    return true;  }}  }
class C{  public ResourcesPoet addInteger(String name,Integer value){  addInteger(name,String.valueOf(value));  return this;}  }
class C{  private Entry findEntryDo(Lease lease){  Entry e=findLeaseFromIterator(leases.values().iterator(),lease);  if (e == null)   e=findLeaseFromIterator(leaseInRenew.iterator(),lease);  return e;}  }
class C{  public void computeConvexHullsAndEllipsesForGroups(final Map<String,LinkedList<Node>> group2Nodes){synchronized (convexHullEdges) {{      final Set<Edge> edgeToDelete=new HashSet<>();      for (final Iterator<Edge> it=graph.edgeIteratorIncludingHidden(); it.hasNext(); ) {        Edge e=it.next();        if (convexHullEdges.contains(e)) {          edgeToDelete.add(e);        }      }      for (      Edge e : edgeToDelete) {        graph.deleteEdge(e);      }      for (Edge e=graph.getFirstEdge(); e != null; e=e.getNext()) {        try {          graph.checkOwner(e);        } catch (        NotOwnerException ex) {          Basic.caught(ex);        }      }    }    convexHullEdges.clear();    ellipses.clear();    for (    Node v : convexHullCenters) {      graph.deleteNode(v);    }    convexHullCenters.clear();    for (    String joinId : group2Nodes.keySet()) {      final LinkedList<Node> nodes=group2Nodes.get(joinId);      if (nodes.size() > 1) {        ArrayList<Point2D> points=new ArrayList<>(nodes.size());        long r=0;        long g=0;        long b=0;        for (        Node v : nodes) {          if (v == null)           continue;          final Point2D aPt=new PointNode(Math.round(graphView.getLocation(v).getX()),Math.round(graphView.getLocation(v).getY()),v);          points.add(aPt);          final String sample=graph.getLabel(v);          final Color color=graphView.getDocument().getChartColorManager().getSampleColor(sample);          r+=color.getRed();          g+=color.getGreen();          b+=color.getBlue();        }        if (points.size() > 1) {          final Color color=new Color((int)(r / nodes.size()),(int)(g / nodes.size()),(int)(b / nodes.size()));          final ArrayList<Point2D> hull=ConvexHull.quickHull(points);          if (showGroupsAsEllipses) {            final ArrayList<Point2D> points4=new ArrayList<>(4 * points.size());            for (            Point2D p : points) {              points4.add(new Point2D.Double(p.getX() - 32,p.getY() - 32));              points4.add(new Point2D.Double(p.getX() - 32,p.getY() + 32));              points4.add(new Point2D.Double(p.getX() + 32,p.getY() - 32));              points4.add(new Point2D.Double(p.getX() + 32,p.getY() + 32));            }            final Ellipse ellipse=ComputeEllipse.computeEllipse(points4);            ellipse.setColor(color);            ellipses.add(ellipse);          }          if (!showGroupsAsConvexHulls)           continue;          for (int i=0; i < hull.size(); i++) {            final Node v=((PointNode)hull.get(i > 0 ? i - 1 : hull.size() - 1)).getNode();            final Node w=((PointNode)hull.get(i)).getNode();            if (v != w) {              final Edge e=graph.newEdge(v,w,EdgeView.UNDIRECTED);              graphView.setColor(e,color);              graphView.setDirection(e,EdgeView.UNDIRECTED);              convexHullEdges.add(e);            }          }          final Node center=graph.newNode();          convexHullCenters.add(center);          graphView.setLocation(center,computeCenter(points));          node2vector.set(center,new Vector3D(graphView.getLocation(center).getX(),graphView.getLocation(center).getY(),0));          graphView.setWidth(center,0);          graphView.setHeight(center,0);          for (          Node v : nodes) {            Edge e=graph.newEdge(center,v);            graphView.setDirection(e,EdgeView.UNDIRECTED);            graphView.setLineWidth(e,0);            graphView.setColor(e,null);            convexHullEdges.add(e);          }        }      }    }  }}  }
class C{  public NamedColumnProjection(String name,boolean include){  m_names=new HashSet();  m_names.add(name);  m_include=include;}  }
class C{  @deprecated public boolean isOfType(RegionType type){  return this.type.equals(type);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Silence_END_ME_TO_B(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200448,skilltarget);}  }
class C{  @Override public int compareTo(ScoutWidget scoutWidget){  if (mParent == null) {    return -1;  }  if (mRootDistance != scoutWidget.mRootDistance) {    return Float.compare(mRootDistance,scoutWidget.mRootDistance);  }  if (mY != scoutWidget.mY) {    return Float.compare(mY,scoutWidget.mY);  }  if (mX != scoutWidget.mX) {    return Float.compare(mX,scoutWidget.mX);  }  return 0;}  }
class C{  public BaseMultiItemQuickAdapter(List<T> data){  super(data);}  }
class C{  public static char[] toCharArray(InputStream is,String encoding) throws IOException {  return toCharArray(is,Charsets.toCharset(encoding));}  }
class C{  public synchronized void abandon(ConversationAbandonedEvent details){  if (!abandoned) {    abandoned=true;    currentPrompt=null;    context.getForWhom().abandonConversation(this);    for (    ConversationAbandonedListener listener : abandonedListeners) {      listener.conversationAbandoned(details);    }  }}  }
class C{  private void tryScrollBackToTop(){  if (!mPtrIndicator.isUnderTouch()) {    mScrollChecker.tryToScrollTo(PtrIndicator.POS_START,mDurationToCloseHeader);  }}  }
class C{  public static Style lime(){  final Style style=new Style();  style.color=PaletteUtils.getSolidColor(PaletteUtils.MATERIAL_LIME);  style.messageTextColor=PaletteUtils.getSolidColor(PaletteUtils.DARK_GREY);  style.buttonDividerColor=PaletteUtils.getSolidColor(PaletteUtils.DARK_GREY);  style.buttonTextColor=PaletteUtils.getSolidColor(PaletteUtils.DARK_GREY);  return style;}  }
class C{  protected boolean isCollection(Class<?> fieldType){  return isList(fieldType) || isSet(fieldType);}  }
class C{  public static Prop use(File file,String encoding){  Prop result=map.get(file.getName());  if (result == null) {    result=new Prop(file,encoding);    map.put(file.getName(),result);    if (Proper.prop == null)     Proper.prop=result;  }  return result;}  }
class C{  public static Dfp exp(final Dfp a){  final Dfp inta=a.rint();  final Dfp fraca=a.subtract(inta);  final int ia=inta.intValue();  if (ia > 2147483646) {    return a.newInstance((byte)1,Dfp.INFINITE);  }  if (ia < -2147483646) {    return a.newInstance();  }  final Dfp einta=splitPow(a.getField().getESplit(),ia);  final Dfp efraca=expInternal(fraca);  return einta.multiply(efraca);}  }
class C{  private static double computeCorrelationDistances(int n,float[] seriesA,float[] seriesB){  return 1 - Correlation.computePersonsCorrelationCoefficent(n,seriesA,seriesB);}  }
class C{  private Environment.Frame createGlobals(EventHandler eventHandler,Options options,ConfigFile configFile){  Environment env=createEnvironment(eventHandler,Environment.SKYLARK,ImmutableMap.<String,Extension>of());  for (  Class<?> module : modules) {    logger.log(Level.INFO,"Creating variable for " + module.getName());    Runtime.registerModuleGlobals(env,module);    if (OptionsAwareModule.class.isAssignableFrom(module)) {      ((OptionsAwareModule)getModuleGlobal(env,module)).setOptions(options);    }    if (LabelsAwareModule.class.isAssignableFrom(module)) {      ((LabelsAwareModule)getModuleGlobal(env,module)).setConfigFile(configFile);    }  }  env.mutability().close();  return env.getGlobals();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FIELDABYSS_BARRIER_ATTACKED(String value0){  return new SM_SYSTEM_MESSAGE(1400325,value0);}  }
class C{  public Region<S> difference(final Region<S> region1,final Region<S> region2){  final BSPTree<S> tree=region1.getTree(false).merge(region2.getTree(false),new DifferenceMerger(region1,region2));  tree.visit(nodeCleaner);  return region1.buildNew(tree);}  }
class C{  public static void close(@Nullable AsyncCloseable closeable) throws IOException {  if (null == closeable) {    return;  }  FutureUtils.result(closeable.asyncClose());}  }
class C{  private List<Entry> readFeed(XmlPullParser parser) throws XmlPullParserException, IOException, ParseException {  List<Entry> entries=new ArrayList<>();  parser.require(XmlPullParser.START_TAG,ns,"feed");  while (parser.next() != XmlPullParser.END_TAG) {    if (parser.getEventType() != XmlPullParser.START_TAG) {      continue;    }    String name=parser.getName();    if (name.equals("entry")) {      entries.add(readEntry(parser));    } else {      skip(parser);    }  }  return entries;}  }
class C{  public static void moveFileToDirectory(File srcFile,File destDir,boolean createDestDir) throws IOException {  if (srcFile == null) {    throw new NullPointerException("Source must not be null");  }  if (destDir == null) {    throw new NullPointerException("Destination directory must not be null");  }  if (!destDir.exists() && createDestDir) {    destDir.mkdirs();  }  if (!destDir.exists()) {    throw new FileNotFoundException("Destination directory '" + destDir + "' does not exist [createDestDir="+ createDestDir+ "]");  }  if (!destDir.isDirectory()) {    throw new IOException("Destination '" + destDir + "' is not a directory");  }  moveFile(srcFile,new File(destDir,srcFile.getName()));}  }
class C{  @TargetApi(8) public Bundler putCharSequenceArray(String key,CharSequence[] value){  bundle.putCharSequenceArray(key,value);  return this;}  }
class C{  public Writer write(Writer writer) throws JSONException {  return this.write(writer,0,0);}  }
class C{  @Override public void populateField(Double value){  internalSetValue(value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_OpenAerial_END_ME_TO_B(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200473,skilltarget);}  }
class C{  public boolean finish(){  if (!started)   return false;  boolean ok=true;  started=false;  try {    out.write(0x3b);    out.flush();    if (closeStream) {      out.close();    }  } catch (  IOException e) {    ok=false;  }  transIndex=0;  out=null;  image=null;  pixels=null;  indexedPixels=null;  colorTab=null;  closeStream=false;  firstFrame=true;  return ok;}  }
class C{  public int read(byte b[],int off,int len){  if (_position >= _count)   return -1;  if (_position + len > _count)   len=_count - _position;  if (len <= 0)   return 0;  System.arraycopy(_buffer,_position,b,off,len);  _position+=len;  return len;}  }
class C{  public void resume(){  engine.resume();}  }
class C{  public static void load(){  gameservers=getDAO().getAllGameServers();  log.info("GameServerTable loaded " + gameservers.size() + " registered GameServers.");}  }
class C{  protected void addLanguageVariables(BundleContext context){  Language defaultLanguage=APILocator.getLanguageAPI().getLanguage("en","US");  addLanguageVariables(context,defaultLanguage);}  }
class C{  public void useTimings(boolean use){  useTimings=use;}  }
class C{  public GroupsEditQuery screenName(String value){  return unsafeParam("screen_name",value);}  }
class C{  @Override public void startExternalSubset(XMLResourceIdentifier identifier,Augmentations augs) throws XNIException {  if (DEBUG_EVENTS) {    System.out.println("==>startExternalSubset");    if (DEBUG_BASEURI) {      System.out.println("   expandedSystemId: " + identifier.getExpandedSystemId());      System.out.println("   baseURI:" + identifier.getBaseSystemId());    }  }  fBaseURIStack.push(identifier.getBaseSystemId());  fInDTDExternalSubset=true;}  }
class C{  public boolean optimizeScanForSingleObject(){  return false;}  }
class C{  public Iterator iterator(){  return split2index.keySet().iterator();}  }
class C{  public NewsfeedGetBannedQuery(VkApiClient client,UserActor actor){  super(client,"newsfeed.getBanned",GetBannedResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public static MyServicePrx checkedCast(Ice.ObjectPrx __obj){  return checkedCastImpl(__obj,ice_staticId(),MyServicePrx.class,MyServicePrxHelper.class);}  }
class C{  public static byte shortToUlaw(short sample){  final int[] exp_lut={0,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7};  int sign, exponent, mantissa;  short ulawbyte;  final short CLIP=32635;  final short BIAS=0x0084;  sign=(sample >> 8) & 0x80;  if (sign != 0) {    sample=(short)-sample;  }  if (sample > CLIP)   sample=CLIP;  sample=(short)(sample + BIAS);  exponent=exp_lut[(sample >> 7) & 0xFF];  mantissa=(sample >> (exponent + 3)) & 0x0F;  ulawbyte=(short)((~(sign | (exponent << 4) | mantissa)) & 0x00FF);  if (ulawbyte == 0)   ulawbyte=0x02;  return (byte)(ulawbyte - 128);}  }
class C{  public final void unload(T t){  if (t != null) {    objects.invalidate(t.getId());  }}  }
class C{  private static String decode(String pathElement){  try {    return URLDecoder.decode(pathElement,Charsets.UTF_8.name());  } catch (  UnsupportedEncodingException e) {    throw Throwables.propagate(e);  }}  }
class C{  public WallGetByIdQueryWithExtended copyHistoryDepth(Integer value){  return unsafeParam("copy_history_depth",value);}  }
class C{  @TargetApi(11) public void moveViewToAnimated(float xValue,float yValue,AxisDependency axis,long duration){  if (android.os.Build.VERSION.SDK_INT >= 11) {    MPPointD bounds=getValuesByTouchPoint(mViewPortHandler.contentLeft(),mViewPortHandler.contentTop(),axis);    float yInView=getAxisRange(axis) / mViewPortHandler.getScaleY();    Runnable job=AnimatedMoveViewJob.getInstance(mViewPortHandler,xValue,yValue + yInView / 2f,getTransformer(axis),this,(float)bounds.x,(float)bounds.y,duration);    addViewportJob(job);    MPPointD.recycleInstance(bounds);  } else {    Log.e(LOG_TAG,"Unable to execute moveViewToAnimated(...) on API level < 11");  }}  }
class C{  public static long[] remove(long[] vector,int vectorLen,int offset,int len){  long[] updated=create(vectorLen - len);  int idx=offset >> 6;  System.arraycopy(vector,0,updated,0,idx);  if (idx < updated.length) {    int delta=offset & 63;    updated[idx]|=vector[idx] & maskBelow(delta);  }  copy(vector,offset + len,updated,offset,vectorLen - (offset + len));  return updated;}  }
class C{  public TShortObjectIterator(TShortObjectHashMap<V> map){  super(map);  this._map=map;}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  void STAR_encoding_diag1(){  int i, j, stripe, k;  char[][] tmp;  tmp=new char[block_nbr + 1][block_size];  for (stripe=0; stripe < block_nbr + 1; stripe++) {    for (i=0; i < data_disk_nbr; i++) {      for (j=0; j < block_size; j++) {        k=(stripe - i + p) % p;        if (k < block_nbr) {          tmp[stripe][j]^=check_data[i][(stripe - i + p) % p * block_size + j];        }      }    }  }  for (i=0; i < block_nbr; i++) {    for (j=0; j < block_size; j++) {      tmp[i][j]=(char)(tmp[i][j] ^ tmp[block_nbr][j]);    }  }  for (i=0; i < block_nbr; i++) {    System.arraycopy(tmp[i],0,check_data[data_disk_nbr + 1],i * block_size,block_size);  }}  }
class C{  public static int computeMinImageSampleSize(ImageSize srcSize){  final int srcWidth=srcSize.getWidth();  final int srcHeight=srcSize.getHeight();  final int targetWidth=maxBitmapSize.getWidth();  final int targetHeight=maxBitmapSize.getHeight();  final int widthScale=(int)Math.ceil((float)srcWidth / targetWidth);  final int heightScale=(int)Math.ceil((float)srcHeight / targetHeight);  return Math.max(widthScale,heightScale);}  }
class C{  public static long nowInMillis(){  return System.currentTimeMillis();}  }
class C{  public void testSmallApiParent(){  doTestForParentApi("android:Theme.Light","apiParentTestAfter2");}  }
class C{  private void queueDiscoveryTask(LocatorReg reg){  discoveryTaskMgr.add(new DiscoveryTask(reg,discoveryTaskMgr,discoveryWakeupMgr));}  }
class C{  @Override public Writer append(CharSequence csq){  return this;}  }
class C{  private static boolean groupSetsEqual(String[] groupSet0,String[] groupSet1){  if (groupSet0.length != groupSet1.length)   return false;  iLoop:   for (int i=0; i < groupSet0.length; i++) {    for (int j=0; j < groupSet1.length; j++) {      if (groupSet0[i].equals(groupSet1[j])) {        continue iLoop;      }    }    return false;  }  return true;}  }
class C{  public static List<EnchantmentData> handle(EntityPlayer player,ItemStack stack,ItemStack fuel,int levels,List<EnchantmentData> enchantments){  final Item event=new Item(player,stack,fuel,levels,enchantments);  return OpenModLoader.getEventBus().post(event) ? event.getEnchantments() : null;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public boolean handlesException(TypeDecl exceptionType){  Object _parameters=exceptionType;  if (handlesException_TypeDecl_values == null)   handlesException_TypeDecl_values=new java.util.HashMap(4);  if (handlesException_TypeDecl_values.containsKey(_parameters)) {    return ((Boolean)handlesException_TypeDecl_values.get(_parameters)).booleanValue();  }  ASTNode$State state=state();  int num=state.boundariesCrossed;  boolean isFinal=this.is$Final();  boolean handlesException_TypeDecl_value=getParent().Define_boolean_handlesException(this,null,exceptionType);  if (isFinal && num == state().boundariesCrossed)   handlesException_TypeDecl_values.put(_parameters,Boolean.valueOf(handlesException_TypeDecl_value));  return handlesException_TypeDecl_value;}  }
class C{  private boolean strictlyAfter(final T t1,final T t2){  return forward ? t1.getReal() < t2.getReal() : t2.getReal() < t1.getReal();}  }
class C{  public boolean optBoolean(int index){  return optBoolean(index,false);}  }
class C{  public ViewsFinder includingFromViews(){  this.includeRootView=true;  return this;}  }
class C{  public void layoutBefore(){}  }
class C{  void drawAsPieChart(Node v,NodeView nv,NodeData data){  Point2D location=nv.getLocation();  if (location == null)   return;  Point apt=viewer.trans.w2d(location);  int width=nv.getWidth();  int height=nv.getHeight();  apt.x-=(width >> 1);  apt.y-=(height >> 1);  nv.setShape(NodeView.OVAL_NODE);  if (data.getUpPValue() >= 0) {    gc.setColor(pvalueColor);    Stroke oldStroke=gc.getStroke();    int leftWidth=getWidthForPValue(data.getUpPValue());    gc.setStroke(new BasicStroke(leftWidth));    gc.drawArc(apt.x - (leftWidth >> 1) - 1,apt.y - (leftWidth >> 1) - 1,width + leftWidth + 1,height + leftWidth + 1,90,180);    gc.setStroke(oldStroke);  }  if (data.getDownPValue() >= 0) {    gc.setColor(pvalueColor);    Stroke oldStroke=gc.getStroke();    int rightWidth=getWidthForPValue(data.getDownPValue());    gc.setStroke(new BasicStroke(rightWidth));    gc.drawArc(apt.x - (rightWidth >> 1) - 1,apt.y - (rightWidth >> 1) - 1,width + rightWidth + 1,height + rightWidth + 1,270,180);    gc.setStroke(oldStroke);  }  long count;  int[] array;  if (scaleBy == ScaleBy.Summarized || v.getOutDegree() == 0) {    count=data.getCountSummarized();    array=data.getSummarized();  } else {    count=data.getCountAssigned();    array=data.getAssigned();  }  if (count > 0) {    double delta=360.0 / count;    double oldAngle=0;    int total=0;    for (int i=0; i < array.length; i++) {      if (array[i] > 0) {        total+=array[i];        double newAngle=total * delta;        Arc2D arc=new Arc2D.Double(apt.x,apt.y,width,height,oldAngle,newAngle - oldAngle,Arc2D.PIE);        gc.setColor(doc.getColorByIndex(i));        gc.fill(arc);        gc.setColor(Color.DARK_GRAY);        gc.draw(arc);        oldAngle=newAngle;      }    }    gc.drawOval(apt.x,apt.y,width,height);  } else   gc.drawOval(apt.x,apt.y,width,height);}  }
class C{  public boolean declaresMethod(String name,List<Type> parameterTypes){  checkLevel(SIGNATURES);  for (  SootMethod method : methodList) {    if (method.getName().equals(name) && method.getParameterTypes().equals(parameterTypes))     return true;  }  return false;}  }
class C{  private void renewPlayerRanking(Race race){  List<SM_ABYSS_RANKING_PLAYERS> newlyCalculated;  newlyCalculated=generatePacketsForRace(race);  players.remove(race);  players.put(race,newlyCalculated);}  }
class C{  public Well512a(int[] seed){  super(K,seed);}  }
class C{  public Zhess(Zmat A) throws JampackException {  if (A.nr != A.nc) {    throw new JampackException("Matrix not square");  }  H=new Zmat(A);  U=Eye.o(H.nr);  Z1 work=new Z1(H.nr);  for (int k=H.bx; k <= H.cx - 2; k++) {    Z1 u=House.genc(H,k + 1,H.rx,k);    House.ua(u,H,k + 1,H.rx,k + 1,H.cx,work);    House.au(H,u,H.bx,H.rx,k + 1,H.cx,work);    House.au(U,u,U.bx,U.rx,k + 1,U.cx,work);  }}  }
class C{  public static String toString(URL url) throws IOException {  return toString(url,Charset.defaultCharset());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_AlwaysHit_ME_TO_B(String skillcaster,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200480,skillcaster,skilltarget,skillname);}  }
class C{  public ContextualSearchBarControl(OverlayPanel panel,Context context,ViewGroup container,DynamicResourceLoader loader){  mContextControl=new ContextualSearchContextControl(panel,context,container,loader);  mSearchTermControl=new ContextualSearchTermControl(panel,context,container,loader);}  }
class C{  public Future execute(CompletionCallback<Map<String,Object>> callback){  if (callback == null)   throw new IllegalArgumentException("Callback cannot be null");  TaskManagerImpl taskManager=new TaskManagerImpl(this.executor_,this.tasks_,callback);  this.executor_.execute(taskManager);  return new Future(taskManager);}  }
class C{  public static String nowDateString(String format){  SimpleDateFormat df=new SimpleDateFormat(format);  return df.format(new Date());}  }
class C{  public void modifyEnergyStored(int energy){  this.energy+=energy;  if (this.energy > capacity) {    this.energy=capacity;  } else   if (this.energy < 0) {    this.energy=0;  }}  }
class C{  private void showError(String message){  Toast.makeText(getContext(),message,Toast.LENGTH_SHORT).show();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_BOSS_ATTACKED(String value0){  return new SM_SYSTEM_MESSAGE(1400198,value0);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_QUEST_SYSTEMMSG_UPDATE(String value0){  return new SM_SYSTEM_MESSAGE(1300619,value0);}  }
class C{  BarcodeRow(int width){  this.row=new byte[width];  currentLocation=0;}  }
class C{  public static S1Interval fullLng(){  return S1Interval.full();}  }
class C{  public static void writeSwappedShort(OutputStream output,short value) throws IOException {  output.write((byte)((value >> 0) & 0xff));  output.write((byte)((value >> 8) & 0xff));}  }
class C{  public URI(URI p_base,String p_uriSpec,boolean allowNonAbsoluteURI) throws MalformedURIException {  initialize(p_base,p_uriSpec,allowNonAbsoluteURI);}  }
class C{  public static int compare(UUID uuid1,UUID uuid2){  int timeResult=Longs.compare(uuid1.timestamp(),uuid2.timestamp());  if (timeResult != 0) {    return timeResult;  }  return uuid1.compareTo(uuid2);}  }
class C{  public FieldConfigEnum(FieldConfigCommonData commonData){  super(commonData);}  }
class C{  public static double permutation(double n,double r){  double nFac=MathUtils.factorial(n);  double nMinusRFac=MathUtils.factorial((n - r));  return nFac / nMinusRFac;}  }
class C{  @Override public boolean isConstant(){  return true;}  }
class C{  @Override public boolean accept(File directory,String fileName){  if (!super.accept(directory,fileName))   return false;  String firstLine=Basic.getFirstLineFromFile(new File(fileName));  return firstLine != null && firstLine.startsWith("@HD");}  }
class C{  public synchronized BookKeeperClientBuilder channelFactory(ClientSocketChannelFactory channelFactory){  this.channelFactory=channelFactory;  return this;}  }
class C{  public CodeAttr(){  this.stack_size=1;  this.num_locals=1;  this.ctb=null;  this.insns=new Vector();  generic=new Vector();}  }
class C{  @Override public void onCanceled(T data){  super.onCanceled(data);  onReleaseResources(data);}  }
class C{  private static Collection<TrustAnchor> sortPotentialAnchors(Set<TrustAnchor> anchors){  if (anchors.size() <= 1) {    return anchors;  }  List<TrustAnchor> sortedAnchors=new ArrayList<TrustAnchor>(anchors);  Collections.sort(sortedAnchors,TRUST_ANCHOR_COMPARATOR);  return sortedAnchors;}  }
class C{  @Override public void loadUrl(final String url,boolean clearNavigationStack){  webView.loadUrl(url);}  }
class C{  public Matrix minusEquals(Matrix B){  checkMatrixDimensions(B);  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=A[i][j] - B.A[i][j];    }  }  return this;}  }
class C{  public PetCategory findOne(String id){  log.debug("Request to get PetCategory : {}",id);  PetCategory petCategory=petCategoryRepository.findOne(UUID.fromString(id));  return petCategory;}  }
class C{  @Override public void clear(){  datastore=new byte[this.totalNumberOfElements * this.sizeOfEachElement];}  }
class C{  private void initView(int type){  initContentView();  initSearchingView(type);}  }
class C{  public void addAll(final Collection<? extends T> collection){synchronized (mLock) {    mList.addAll(collection);  }  notifyDataSetChanged();}  }
class C{  public DefaultSyntaxKit(Lexer lexer){  super();  this.lexer=lexer;}  }
class C{  private static RetainFragment findOrCreateRetainFragment(FragmentManager fm){  RetainFragment mRetainFragment=(RetainFragment)fm.findFragmentByTag(TAG);  if (mRetainFragment == null) {    mRetainFragment=new RetainFragment();    fm.beginTransaction().add(mRetainFragment,TAG).commitAllowingStateLoss();  }  return mRetainFragment;}  }
class C{  public void testBoundaryEventSubscriptionDeletedOnDeploymentDelete(){  String deploymentId=deployBoundarySignalTestProcess();  runtimeService.startProcessInstanceByKey("signalTest");  assertEquals("My Task",taskService.createTaskQuery().singleResult().getName());  String deploymentId2=deployBoundarySignalTestProcess();  runtimeService.startProcessInstanceByKey("signalTest");  assertEquals(2,taskService.createTaskQuery().count());  assertEquals(2,getAllEventSubscriptions().size());  repositoryService.deleteDeployment(deploymentId,true);  assertEquals("My Task",taskService.createTaskQuery().singleResult().getName());  assertEquals(1,getAllEventSubscriptions().size());  repositoryService.deleteDeployment(deploymentId2,true);  assertEquals(0,getAllEventSubscriptions().size());}  }
class C{  @ObjectiveCName("subscribe:triggerNow:") public List subscribe(ListChangedListener listChangedListener,boolean triggerNow){  this.listChangedListeners.add(listChangedListener);  if (this.listChangedListeners.size() == 1) {    this.record.subscribe(this.recordListeners);  }  if (triggerNow) {    for (    ListChangedListener listChangeListener : this.listChangedListeners) {      listChangeListener.onListChanged(this.name(),this.getEntries());    }  }  return this;}  }
class C{  public void download(String fileName,OutputStream outputStream,long restartAt,FTPDataTransferListener listener) throws IllegalStateException, IOException, FTPIllegalReplyException, FTPException, FTPDataTransferException, FTPAbortedException {synchronized (lock) {    if (!connected) {      throw new IllegalStateException("Client not connected");    }    if (!authenticated) {      throw new IllegalStateException("Client not authenticated");    }    int tp=type;    if (tp == TYPE_AUTO) {      tp=detectType(fileName);    }    if (tp == TYPE_TEXTUAL) {      communication.sendFTPCommand("TYPE A");    } else     if (tp == TYPE_BINARY) {      communication.sendFTPCommand("TYPE I");    }    FTPReply r=communication.readFTPReply();    touchAutoNoopTimer();    if (!r.isSuccessCode()) {      throw new FTPException(r);    }    FTPDataTransferConnectionProvider provider=openDataTransferChannel();    if (restSupported || restartAt > 0) {      boolean done=false;      try {        communication.sendFTPCommand("REST " + restartAt);        r=communication.readFTPReply();        touchAutoNoopTimer();        if (r.getCode() != 350 && ((r.getCode() != 501 && r.getCode() != 502) || restartAt > 0)) {          throw new FTPException(r);        }        done=true;      }  finally {        if (!done) {          provider.dispose();        }      }    }    boolean wasAborted=false;    communication.sendFTPCommand("RETR " + fileName);    try {      Socket dtConnection;      try {        dtConnection=provider.openDataTransferConnection();      }  finally {        provider.dispose();      }synchronized (abortLock) {        ongoingDataTransfer=true;        aborted=false;        consumeAborCommandReply=false;      }      try {        dataTransferInputStream=dtConnection.getInputStream();        if (modezEnabled) {          dataTransferInputStream=new InflaterInputStream(dataTransferInputStream);        }        if (listener != null) {          listener.started();        }        if (tp == TYPE_TEXTUAL) {          Reader reader=new InputStreamReader(dataTransferInputStream,pickCharset());          Writer writer=new OutputStreamWriter(outputStream);          char[] buffer=new char[SEND_AND_RECEIVE_BUFFER_SIZE];          int l;          while ((l=reader.read(buffer,0,buffer.length)) != -1) {            writer.write(buffer,0,l);            writer.flush();            if (listener != null) {              listener.transferred(l);            }          }        } else         if (tp == TYPE_BINARY) {          byte[] buffer=new byte[SEND_AND_RECEIVE_BUFFER_SIZE];          int l;          while ((l=dataTransferInputStream.read(buffer,0,buffer.length)) != -1) {            outputStream.write(buffer,0,l);            if (listener != null) {              listener.transferred(l);            }          }        }      } catch (      IOException e) {synchronized (abortLock) {          if (aborted) {            if (listener != null) {              listener.aborted();            }            throw new FTPAbortedException();          } else {            if (listener != null) {              listener.failed();            }            throw new FTPDataTransferException("I/O error in data transfer",e);          }        }      } finally {        if (dataTransferInputStream != null) {          try {            dataTransferInputStream.close();          } catch (          Throwable t) {            ;          }        }        try {          dtConnection.close();        } catch (        Throwable t) {          ;        }        dataTransferInputStream=null;synchronized (abortLock) {          wasAborted=aborted;          ongoingDataTransfer=false;          aborted=false;        }      }    }  finally {      r=communication.readFTPReply();      touchAutoNoopTimer();      if (r.getCode() != 150 && r.getCode() != 125) {        throw new FTPException(r);      }      r=communication.readFTPReply();      if (!wasAborted && r.getCode() != 226) {        throw new FTPException(r);      }      if (consumeAborCommandReply) {        communication.readFTPReply();        consumeAborCommandReply=false;      }    }    if (listener != null) {      listener.completed();    }  }}  }
class C{  public AuthenticatorException(String msg){  super(msg);}  }
class C{  protected final void throwObjectContractViolation(Object o1,Object o2) throws IllegalArgumentException {  throw new IllegalArgumentException("Equal objects must have equal hashcodes. " + "During rehashing, Trove discovered that " + "the following two objects claim to be "+ "equal (as in java.lang.Object.equals()) "+ "but their hashCodes (or those calculated by "+ "your TObjectHashingStrategy) are not equal."+ "This violates the general contract of "+ "java.lang.Object.hashCode().  See bullet point two "+ "in that method's documentation. "+ "object #1 =" + o1 + "; object #2 ="+ o2);}  }
class C{  @Override public void requestPhotos(Context c,int page,boolean refresh){  if (!model.isRefreshing() && !model.isLoading()) {    if (refresh) {      model.setRefreshing(true);    } else {      model.setLoading(true);    }    page=refresh ? 1 : page + 1;    listener=new OnRequestCollectionsListener(c,page,refresh);    model.getService().searchCollections(model.getSearchQuery(),page,listener);  }}  }
class C{  public Matrix translate(final float[] transformedPts){  Matrix save=new Matrix();  translate(transformedPts,save);  return save;}  }
class C{  public CsClientPacket clonePacket(){  try {    return (CsClientPacket)super.clone();  } catch (  CloneNotSupportedException e) {    return null;  }}  }
class C{  public Skill(SkillTemplate skillTemplate,Player effector,Creature firstTarget){  this(skillTemplate,effector,effector.getSkillList().getSkillLevel(skillTemplate.getSkillId()),firstTarget,null);}  }
class C{  public void drawChart(Graphics2D gc){  SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);  gc.setFont(getFont(ChartViewer.FontKeys.XAxisFont.toString()));  int y0=getHeight() - bottomMargin;  int y1=topMargin;  double topY;  if (scalingType == ChartViewer.ScalingType.PERCENT)   topY=101; else   if (scalingType == ChartViewer.ScalingType.LOG) {    topY=computeMaxYAxisValueLogScale(getMaxValue());  } else   if (scalingType == ChartViewer.ScalingType.SQRT) {    topY=Math.sqrt(getMaxValue());  } else   topY=1.1 * getMaxValue();  double yFactor=(y0 - y1) / topY;  int x0=leftMargin;  int x1=getWidth() - rightMargin;  if (x0 >= x1)   return;  int numberOfDataSets=getChartData().getNumberOfSeries();  int numberOfClasses=getChartData().getNumberOfClasses();  if (numberOfDataSets == 0 || numberOfClasses == 0)   return;  double xStep=(x1 - x0) / ((numberOfClasses + (isGapBetweenBars() ? 1 : 0)) * numberOfDataSets);  final double bigSpace=Math.max(2,Math.min(10,xStep));  xStep=(x1 - x0 - (isGapBetweenBars() ? bigSpace * numberOfDataSets : 0)) / (numberOfClasses * numberOfDataSets);  int d=0;  for (  String series : getChartData().getSeriesNames()) {    if (isShowXAxis()) {      final double xLabel=leftMargin + (isGapBetweenBars() ? (d + 1) * bigSpace : 0) + ((d + 0.5) * numberOfClasses) * xStep;      Point2D apt=new Point2D.Double(xLabel,getHeight() - bottomMargin + 10);      String label=seriesLabelGetter.getLabel(series);      Dimension labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();      if (classLabelAngle == 0) {        apt.setLocation(apt.getX() - labelSize.getWidth() / 2,apt.getY());      } else       if (classLabelAngle > Math.PI / 2) {        apt=Geometry.translateByAngle(apt,classLabelAngle,-labelSize.width);      }      if (sgc != null)       sgc.setCurrentItem(new String[]{series,null});      if (getChartData().getChartSelection().isSelected(series,null)) {        gc.setColor(ProgramProperties.SELECTION_COLOR);        fillAndDrawRect(gc,apt.getX(),apt.getY(),labelSize.width,labelSize.height,classLabelAngle,ProgramProperties.SELECTION_COLOR,ProgramProperties.SELECTION_COLOR_DARKER);      }      gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.BLACK));      drawString(gc,label,apt.getX(),apt.getY(),classLabelAngle);      if (sgc != null)       sgc.clearCurrentItem();    }    int c=0;    for (    String className : getChartData().getClassNames()) {      double value=getChartData().getValueAsDouble(series,className);switch (scalingType) {case PERCENT:{          double total=getChartData().getTotalForSeriesIncludingDisabledAttributes(series);          if (total == 0)           value=0; else           value*=(100 / total);          break;        }case LOG:{        if (value == 1)         value=Math.log10(2) / 2; else         if (value > 0)         value=Math.log10(value);        break;      }case SQRT:{      if (value > 0)       value=Math.sqrt(value);      break;    }}double xBar=x0 + (isGapBetweenBars() ? (d + 1) * bigSpace : 0) + (d * numberOfClasses + c) * xStep;double height=Math.max(1,value * yFactor);Rectangle2D rect=new Rectangle((int)Math.round(xBar),(int)Math.round(y0 - height),Math.max(1,(int)Math.round(xStep)),(int)Math.round(height));boolean isSelected=getChartData().getChartSelection().isSelected(series,className);Color color=getChartColors().getClassColor(class2HigherClassMapper.get(className));gc.setColor(color);if (sgc != null) sgc.setCurrentItem(new String[]{series,className});gc.fill(rect);if (sgc != null) sgc.clearCurrentItem();if (isSelected) {  gc.setStroke(HEAVY_STROKE);  gc.setColor(ProgramProperties.SELECTION_COLOR);  gc.draw(rect);  gc.setStroke(NORMAL_STROKE);} else {  gc.setColor(color.darker());  gc.draw(rect);}if (showValues || isSelected) {  String label="" + (int)getChartData().getValueAsDouble(series,className);  valuesList.add(new DrawableValue(label,(int)(rect.getX() + rect.getWidth() / 2),(int)(rect.getY() - 2),isSelected));}c++;}d++;}if (valuesList.size() > 0) {gc.setFont(getFont(ChartViewer.FontKeys.ValuesFont.toString()));DrawableValue.drawValues(gc,valuesList,true,false);valuesList.clear();}if (sgc == null && lastDown != null) {gc.setColor(Color.green);gc.draw(lastDown);}}  }
class C{  public void run(){  try {    Thread.sleep(timeout);    thread.interrupt();  } catch (  InterruptedException e) {  }}  }
class C{  private void editSettingsAction(){  SettingsDialog.show(ControlUtilities.getParentWindow(this),this.simulation.getWorld().getSettings());}  }
class C{  public JmxApplicationException(String message){  super(message);}  }
class C{  private String[] parse_options(String[] args){  List<String> sootArgs=new ArrayList<String>(args.length);  for (int i=0, n=args.length; i < n; i++) {    if (args[i].equals("--alt-classpath") || args[i].equals("--alt-class-path")) {      sootArgs.add("-p");      sootArgs.add(phaseFullname);      sootArgs.add(altClassPathOptionName + ':' + args[++i]);    } else     if (args[i].startsWith("--graph=")) {      sootArgs.add("-p");      sootArgs.add(phaseFullname);      sootArgs.add(graphTypeOptionName + ':' + args[i].substring("--graph=".length()));    } else     if (args[i].startsWith("--ir=")) {      sootArgs.add("-p");      sootArgs.add(phaseFullname);      sootArgs.add(irOptionName + ':' + args[i].substring("--ir=".length()));    } else     if (args[i].equals("--brief")) {      sootArgs.add("-p");      sootArgs.add(phaseFullname);      sootArgs.add(briefLabelOptionName + ":true");    } else     if (args[i].equals("--multipages")) {      sootArgs.add("-p");      sootArgs.add(phaseFullname);      sootArgs.add(multipageOptionName + ":true");    } else     if (args[i].equals("--help")) {      return new String[0];    } else     if (args[i].equals("--soot-class-path") || args[i].equals("-soot-class-path") || args[i].equals("--soot-classpath")|| args[i].equals("-soot-classpath")|| args[i].equals("--process-dir")|| args[i].equals("-process-dir")|| args[i].equals("--android-jars")|| args[i].equals("-android-jars")|| args[i].equals("--force-android-jar")|| args[i].equals("-force-android-jar")) {      sootArgs.add(args[i]);      sootArgs.add(args[++i]);    } else     if (args[i].equals("-p") || args[i].equals("--phase-option") || args[i].equals("-phase-option")) {      sootArgs.add(args[i]);      sootArgs.add(args[++i]);      sootArgs.add(args[++i]);    } else {      int smpos=args[i].indexOf(':');      if (smpos == -1) {        sootArgs.add(args[i]);      } else {        String clsname=args[i].substring(0,smpos);        sootArgs.add(clsname);        String methname=args[i].substring(smpos + 1);        if (methodsToPrint == null) {          methodsToPrint=new HashMap<String,String>();        }        methodsToPrint.put(methname,clsname);      }    }  }  String[] sootArgsArray=new String[sootArgs.size()];  return (String[])sootArgs.toArray(sootArgsArray);}  }
class C{  @Override public void xml(String xml){  if (TextUtils.isEmpty(xml)) {    d("Empty/Null xml content");    return;  }  try {    Source xmlInput=new StreamSource(new StringReader(xml));    StreamResult xmlOutput=new StreamResult(new StringWriter());    Transformer transformer=TransformerFactory.newInstance().newTransformer();    transformer.setOutputProperty(OutputKeys.INDENT,"yes");    transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount","2");    transformer.transform(xmlInput,xmlOutput);    d(xmlOutput.getWriter().toString().replaceFirst(">",">\n"));  } catch (  TransformerException e) {    e(e.getCause().getMessage() + "\n" + xml);  }}  }
class C{  @Override public boolean next(){  if (prodScan == null)   return false;  while (!prodScan.next())   if (!useNextChunk())   return false;  return true;}  }
class C{  public void put(String name,int id){  name2id.put(name,id);  id2name.put(id,name);}  }
class C{  public FaveGetUsersQuery(VkApiClient client,UserActor actor){  super(client,"fave.getUsers",GetUsersResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public final String javaNameToXMLName(final String fieldName){  StringBuilder str=new StringBuilder();  int fieldNameLength=fieldName.length();  char currentChar;  for (int i=0; i != fieldNameLength; i++) {    currentChar=fieldName.charAt(i);    if (Character.isUpperCase(currentChar)) {      str.append('-');      str.append(Character.toLowerCase(currentChar));    } else {      str.append(currentChar);    }  }  return str.toString();}  }
class C{  @Override public void startStreamingConsumption(long timeout){  jssc.start();  if (timeout < 0)   jssc.awaitTermination(); else   jssc.awaitTermination(timeout);}  }
class C{  @Deployment public void testTimerFiredForTimerStart() throws Exception {  Calendar tomorrow=Calendar.getInstance();  tomorrow.add(Calendar.DAY_OF_YEAR,1);  processEngineConfiguration.getClock().setCurrentTime(tomorrow.getTime());  waitForJobExecutorToProcessAllJobs(2000,100);  assertEquals(6,listener.getEventsReceived().size());  assertEquals(ActivitiEventType.ENTITY_CREATED,listener.getEventsReceived().get(0).getType());  assertEquals(ActivitiEventType.ENTITY_INITIALIZED,listener.getEventsReceived().get(1).getType());  assertEquals(ActivitiEventType.ENTITY_DELETED,listener.getEventsReceived().get(2).getType());  assertEquals(ActivitiEventType.TIMER_FIRED,listener.getEventsReceived().get(3).getType());  assertEquals(ActivitiEventType.JOB_EXECUTION_SUCCESS,listener.getEventsReceived().get(5).getType());  checkEventCount(0,ActivitiEventType.JOB_CANCELED);}  }
class C{  public void actionPerformed(ActionEvent ev){  execute("set index=" + CalculateEcologicalIndices.BRAYCURTIS + ";");}  }
class C{  @Override public byte[] next(){  if (iteratorIndex >= dictionaryChunks.get(outerIndex).size()) {    iteratorIndex=0;    outerIndex++;  }  byte[] value=dictionaryChunks.get(outerIndex).get(iteratorIndex);  currentIndex++;  iteratorIndex++;  return value;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ENCHANT_ITEM_SUCCEEDED_20(String playerName,int nameId){  return new SM_SYSTEM_MESSAGE(1402285,playerName,new DescriptionId(nameId));}  }
class C{  public static TopicPartition init(String jsonRequest){  JSONObject jsonObject=JSON.parseObject(jsonRequest);  if (!jsonObject.containsKey("topic")) {    throw new RuntimeException("Cannot initialize TopicPartitionInfo, missing field: topic");  }  if (!jsonObject.containsKey("numPartitions")) {    throw new RuntimeException("Cannot initialize TopicPartitionInfo, missing field: numPartitions");  }  return new TopicPartition(jsonObject.getString("topic"),jsonObject.getIntValue("numPartitions"));}  }
class C{  Edge(final Vertex start,final Vertex end,final Line line){  this.start=start;  this.end=end;  this.line=line;  this.node=null;  start.setOutgoing(this);  end.setIncoming(this);}  }
class C{  public static final int[] resize(int[] a,int size){  if (a.length >= size)   return a;  int[] b=new int[size];  System.arraycopy(a,0,b,0,a.length);  return b;}  }
class C{  @Override public byte process(Target target){  Element word=navigator.getElement(target);  if (word == null)   return values.get("0");  String pos=word.getAttribute("pos");  if (pos == null)   return values.get("0");  pos=pos.trim();  if (posConverter.containsKey(pos)) {    pos=posConverter.get(pos);  }  if (!values.contains(pos))   return values.get("0");  return values.get(pos);}  }
class C{  public static javafx.scene.shape.Ellipse computeEllipseFX(ArrayList<Point2D> points){  final double[][] array=new double[points.size()][2];  int i=0;  for (  Point2D aPoint : points) {    array[i][0]=aPoint.getX();    array[i++][1]=aPoint.getY();  }  final double[] dimensions=convertVariablesToDimension(apply(array));  javafx.scene.shape.Ellipse ellipse=new javafx.scene.shape.Ellipse(dimensions[0],dimensions[1],dimensions[2],dimensions[3]);  ellipse.setRotate(Geometry.rad2deg(dimensions[4]));  return ellipse;}  }
class C{  public Vector3f interpolate(Vector3f finalVec,float changeAmnt){  this.x=(1 - changeAmnt) * this.x + changeAmnt * finalVec.x;  this.y=(1 - changeAmnt) * this.y + changeAmnt * finalVec.y;  this.z=(1 - changeAmnt) * this.z + changeAmnt * finalVec.z;  return this;}  }
class C{  public Covariance(double[][] data,boolean biasCorrected) throws MathIllegalArgumentException {  this(new BlockRealMatrix(data),biasCorrected);}  }
class C{  public Buffer(byte[] bytes,int offset,int length){  copy(bytes,offset,length);}  }
class C{  public static boolean endsWithIgnoreCase(String str,String suffix){  return str != null && suffix != null && str.regionMatches(true,str.length() - suffix.length(),suffix,0,suffix.length());}  }
class C{  public synchronized boolean deleteTable(String tableName){  if (!this.tableLookup.containsKey(tableName)) {    return false;  }  this.tableLookup.get(tableName).close();  this.tableLookup.remove(tableName);  File f=new File(fileDir + tableName + Table.FILENAME_EXTENSION);  f.delete();  return true;}  }
class C{  public boolean isIgnoreUnknownTypes(){  return m_ignoreUnknownTypes;}  }
class C{  public static void main(String[] args) throws IOException {  Reader r=new UnicodeUnescapeReader(new StringReader(args[0]));  for (; ; ) {    int c=r.read();    if (c == -1)     break;    System.out.print((char)c);  }  System.out.println();}  }
class C{  public TableCellListener(JTable table,Action action){  this.table=table;  this.action=action;  this.table.addPropertyChangeListener(this);}  }
class C{  private void removeEntry(String key){  CacheHeader entry=mEntries.get(key);  if (entry != null) {    mTotalSize-=entry.size;    mEntries.remove(key);  }}  }
class C{  @Override public void startElement(QName element,XMLAttributes attributes,Augmentations augs) throws XNIException {  Augmentations modifiedAugs=handleStartElement(element,attributes,augs);  if (fDocumentHandler != null) {    fDocumentHandler.startElement(element,attributes,modifiedAugs);  }}  }
class C{  public static void assertEquals(double expected[],double observed[],double tolerance){  assertEquals("Array comparison failure",expected,observed,tolerance);}  }
