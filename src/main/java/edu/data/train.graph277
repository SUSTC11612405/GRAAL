class C{  public ParsePluginsReader(){}  }
class C{  public Vertex applyRANDOM(List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network){  if (arguments.isEmpty()) {    return network.createVertex(Primitive.NULL);  }  return Utils.random(arguments).getTarget().applyQuotient(variables,network);}  }
class C{  public void detachModule(Class<? extends Module> moduleClass){synchronized (curState) {    Module module=getModule(moduleClass);    if (module != null) {      module.pause(true);      modules.remove(module);    }  }}  }
class C{  public static CommandResult execCommand(String command,boolean isRoot){  return execCommand(new String[]{command},isRoot,true);}  }
class C{  public static CommitLogCheckpoint create(DateTime checkpointTime,ImmutableMap<Integer,DateTime> bucketTimestamps){  checkArgument(Objects.equals(CommitLogBucket.getBucketIds().asList(),bucketTimestamps.keySet().asList()),"Bucket ids are incorrect: %s",bucketTimestamps.keySet());  CommitLogCheckpoint instance=new CommitLogCheckpoint();  instance.checkpointTime=checkpointTime.getMillis();  instance.bucketTimestamps=ImmutableList.copyOf(bucketTimestamps.values());  return instance;}  }
class C{  protected void retrieveExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  saveCurrentInvocation(KeysClientsInvocations.CAMPOS_DATO_EDICION,request);  CampoDatoVO campoDatoVO=(CampoDatoVO)request.getAttribute("campoDatoVO");  CamposDatoForm camposDatoForm=(CamposDatoForm)form;  camposDatoForm.set(campoDatoVO);  ServiceRepository services=getServiceRepository(request);  GestionDescripcionBI descripcionService=services.lookupGestionDescripcionBI();  List listaTiposCampo=descripcionService.makeListTipoCampo();  setInTemporalSession(request,DescripcionConstants.LISTA_TIPOS_CAMPO_KEY,listaTiposCampo);  List listaTipoNorma=descripcionService.makeListTipoNorma();  setInTemporalSession(request,DescripcionConstants.LISTA_TIPO_NORMAS_KEY,listaTipoNorma);  List listaAreas=descripcionService.getAreasByTipoNorma(Integer.parseInt(camposDatoForm.getTipoNorma()));  setInTemporalSession(request,DescripcionConstants.LISTA_AREAS_KEY,listaAreas);  setReturnActionFordward(request,mapping.findForward("retrieve"));}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (newRecord && getParent().isComplete()) {    log.saveError("ParentComplete",Msg.translate(getCtx(),"S_TimeExpenseLine"));    return false;  }  if (newRecord || is_ValueChanged("ExpenseAmt") || is_ValueChanged("C_Currency_ID")) {    if (getC_Currency_ID() == getC_Currency_Report_ID())     setConvertedAmt(getExpenseAmt()); else {      setConvertedAmt(MConversionRate.convert(getCtx(),getExpenseAmt(),getC_Currency_ID(),getC_Currency_Report_ID(),getDateExpense(),0,getAD_Client_ID(),getAD_Org_ID()));    }  }  if (isTimeReport()) {    setExpenseAmt(Env.ZERO);    setConvertedAmt(Env.ZERO);  }  return true;}  }
class C{  @Override public boolean isSigned(int param) throws SQLException {  try {    debugCodeCall("isSigned",param);    getParameter(param);    return true;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public ClientKeyExchange(BigInteger dh_Yc){  byte[] bb=dh_Yc.toByteArray();  if (bb[0] == 0) {    exchange_keys=new byte[bb.length - 1];    System.arraycopy(bb,1,exchange_keys,0,exchange_keys.length);  } else {    exchange_keys=bb;  }  length=exchange_keys.length + 2;  isRSA=false;}  }
class C{  public mxGeometry(double x,double y,double width,double height){  super(x,y,width,height);}  }
class C{  static String plurals(final String s,final AtomicInteger i){  return i == null ? UNKNOWN + " " + s+ "s" : i.intValue() != 1 ? i + " " + s+ "s" : "one " + s;}  }
class C{  public boolean isInt(String input){  return GenericValidator.isInt(input);}  }
class C{  @Override public void execute(StepInstance stepInstance,String temporaryFileDirectory){  Set<RawProtein<TigrFamHmmer2RawMatch>> rawMatches=rawMatchDAO.getProteinsByIdRange(stepInstance.getBottomProtein(),stepInstance.getTopProtein(),signatureLibraryRelease);  filteredMatchDAO.persist(rawMatches);}  }
class C{  public static long parseSizeToMegabytes(String humanSize){  return parseAndConvertToBytes(humanSize) / M;}  }
class C{  private boolean isScrollingHorizontal(float x1,float y1,float x2,float y2){  float deltaX=x2 - x1;  float deltaY=y2 - y1;  if (Math.abs(deltaX) > mTouchSlop && Math.abs(deltaX) > Math.abs(deltaY)) {    return true;  }  return false;}  }
class C{  public static File toFile(JavaFileObject javaFileObject){  return new File(javaFileObject.getName());}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  UIManager uiMgr=stack.getUIMgr();  if (uiMgr == null)   return new Integer(0); else {    java.awt.Dimension d=uiMgr.getUIDisplayResolution();    return (d == null) ? new Integer(480) : new Integer(d.height);  }}  }
class C{  protected synchronized void finalizeWrite(){  if (!finalized) {    for (    AbstractWriteDataProcessor processor : writeDataProcessors) {      try {        processor.onFinalization(storageManager,this,storageData);      } catch (      Exception e) {        log.error("Exception occurred trying to process onFinalize of the finalization data processor " + processor.getClass().getName(),e);      }    }    indexingTreeHandler.finish();    finalized=true;    if (log.isDebugEnabled()) {      log.debug("Finalization done for storage: " + storageData + ".");    }  }}  }
class C{  public void updateSubTreeCheckingConsistency(TreePath path){  if (isPathGreyed(path)) {    for (    TreePath childPath : getChildrenPath(path)) {      updateSubTreeCheckingConsistency(childPath);    }    updatePathGreyness(path);  } else {    if (isPathChecked(path)) {      checkSubTree(path);    } else {      uncheckSubTree(path);    }    return;  }}  }
class C{  public SubqueryTable as(String alias,Class<? extends ViewModel> modelClass,Property<?>[] properties){  return SubqueryTable.fromQuery(this,alias,modelClass,properties);}  }
class C{  public static boolean isOCSPSigning(CertificateToken certToken){  try {    List<String> keyPurposes=certToken.getCertificate().getExtendedKeyUsage();    if ((keyPurposes != null) && keyPurposes.contains(OID.id_kp_OCSPSigning.getId())) {      return true;    }  } catch (  CertificateParsingException e) {    LOG.warn(e.getMessage());  }  return false;}  }
class C{  public boolean matches(Map<String,String> tags){  if (!matchesTags(tags)) {    return false;  }  return true;}  }
class C{  public Boolean isAccessPolicyConfig(){  return accessPolicyConfig;}  }
class C{  public static Map<String,Object> updateEftAccount(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  Security security=ctx.getSecurity();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  Timestamp now=UtilDateTime.nowTimestamp();  String partyId=ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,result,"PAY_INFO","_UPDATE","ACCOUNTING","_UPDATE");  if (result.size() > 0)   return result;  List<GenericValue> toBeStored=FastList.newInstance();  boolean isModified=false;  GenericValue paymentMethod=null;  GenericValue newPm=null;  GenericValue eftAccount=null;  GenericValue newEa=null;  String paymentMethodId=(String)context.get("paymentMethodId");  try {    eftAccount=EntityQuery.use(delegator).from("EftAccount").where("paymentMethodId",paymentMethodId).queryOne();    paymentMethod=EntityQuery.use(delegator).from("PaymentMethod").where("paymentMethodId",paymentMethodId).queryOne();  } catch (  GenericEntityException e) {    Debug.logWarning(e.getMessage(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingEftAccountCannotBeUpdatedReadFailure",UtilMisc.toMap("errorString",e.getMessage()),locale));  }  if (eftAccount == null || paymentMethod == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingEftAccountCannotBeUpdated",UtilMisc.toMap("errorString",paymentMethodId),locale));  }  if (!paymentMethod.getString("partyId").equals(partyId) && !security.hasEntityPermission("PAY_INFO","_UPDATE",userLogin) && !security.hasEntityPermission("ACCOUNTING","_UPDATE",userLogin)) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingEftAccountCannotBeUpdated",UtilMisc.toMap("partyId",partyId,"paymentMethodId",paymentMethodId),locale));  }  newPm=GenericValue.create(paymentMethod);  toBeStored.add(newPm);  newEa=GenericValue.create(eftAccount);  toBeStored.add(newEa);  String newPmId=null;  try {    newPmId=delegator.getNextSeqId("PaymentMethod");  } catch (  IllegalArgumentException e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingEftAccountCannotBeCreated",locale));  }  newPm.set("partyId",partyId);  newPm.set("fromDate",context.get("fromDate"),false);  newPm.set("thruDate",context.get("thruDate"));  newPm.set("description",context.get("description"));  newEa.set("bankName",context.get("bankName"));  newEa.set("routingNumber",context.get("routingNumber"));  newEa.set("accountType",context.get("accountType"));  newEa.set("accountNumber",context.get("accountNumber"));  newEa.set("nameOnAccount",context.get("nameOnAccount"));  newEa.set("companyNameOnAccount",context.get("companyNameOnAccount"));  newEa.set("contactMechId",context.get("contactMechId"));  if (!newEa.equals(eftAccount) || !newPm.equals(paymentMethod)) {    newPm.set("paymentMethodId",newPmId);    newEa.set("paymentMethodId",newPmId);    newPm.set("fromDate",(context.get("fromDate") != null ? context.get("fromDate") : now));    isModified=true;  }  GenericValue newPartyContactMechPurpose=null;  String contactMechId=(String)context.get("contactMechId");  if (UtilValidate.isNotEmpty(contactMechId)) {    String contactMechPurposeTypeId="BILLING_LOCATION";    GenericValue tempVal=null;    try {      List<GenericValue> allPCWPs=EntityQuery.use(delegator).from("PartyContactWithPurpose").where("partyId",partyId,"contactMechId",contactMechId,"contactMechPurposeTypeId",contactMechPurposeTypeId).queryList();      allPCWPs=EntityUtil.filterByDate(allPCWPs,now,"contactFromDate","contactThruDate",true);      allPCWPs=EntityUtil.filterByDate(allPCWPs,now,"purposeFromDate","purposeThruDate",true);      tempVal=EntityUtil.getFirst(allPCWPs);    } catch (    GenericEntityException e) {      Debug.logWarning(e.getMessage(),module);      tempVal=null;    }    if (tempVal == null) {      newPartyContactMechPurpose=delegator.makeValue("PartyContactMechPurpose",UtilMisc.toMap("partyId",partyId,"contactMechId",contactMechId,"contactMechPurposeTypeId",contactMechPurposeTypeId,"fromDate",now));    }  }  if (isModified) {    if (newPartyContactMechPurpose != null)     toBeStored.add(newPartyContactMechPurpose);    paymentMethod.set("thruDate",now);    toBeStored.add(paymentMethod);    try {      delegator.storeAll(toBeStored);    } catch (    GenericEntityException e) {      Debug.logWarning(e.getMessage(),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingEftAccountCannotBeUpdated",UtilMisc.toMap("errorString",e.getMessage()),locale));    }  } else {    result.put("paymentMethodId",paymentMethodId);    result.put("oldPaymentMethodId",paymentMethodId);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);    result.put(ModelService.SUCCESS_MESSAGE,UtilProperties.getMessage(resource,"AccountingNoChangesMadeNotUpdatingEftAccount",locale));    return result;  }  result.put("paymentMethodId",newEa.getString("paymentMethodId"));  result.put("oldPaymentMethodId",paymentMethodId);  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  public final Message obtainMessage(int what,int arg1,int arg2,Object obj){  return Message.obtain(mSmHandler,what,arg1,arg2,obj);}  }
class C{  @Override public CompilerPhase newExecution(IR ir){  return this;}  }
class C{  @SuppressWarnings("deprecation") @Deprecated public static GUIBatchLaconizer applicatorMapper(){  final GUIBatchLaconizer $=new GUIBatchLaconizer();  final Trimmer t=new Trimmer();  final ProgressMonitorDialog d=Dialogs.progress(false);  final AtomicBoolean openDialog=new AtomicBoolean(false);  $.listener(EventMapper.empty(event.class).expand(EventMapper.recorderOf(event.visit_cu).rememberBy(WrappedCompilationUnit.class).does(null)).expand(EventMapper.recorderOf(event.visit_node).rememberBy(ASTNode.class)).expand(EventMapper.recorderOf(event.visit_root).rememberLast(String.class)).expand(EventMapper.recorderOf(event.run_pass).counter().does(null)).expand(EventMapper.inspectorOf(event.run_start).does(null)).expand(EventMapper.inspectorOf(event.run_finish).does(null).does(null)));  $.runContext(null);  $.defaultRunAction(t);  return $;}  }
class C{  public EllipticalOrbitAnimation3D(Vector3 focalPoint,Vector3 periapsis,double eccentricity,double angle){  this(focalPoint,periapsis,Vector3.getAxisVector(Axis.Y),eccentricity,angle);}  }
class C{  private void sendToPrint(){  if (mPrinter != null) {    if (mPrinter.getStatus() == StateUtils.STATE_OPERATIONAL) {      File mFile=ViewerMainFragment.getFile();      if (mFile != null) {        Log.i("Slicer","Current file: " + mFile.getAbsolutePath());        File actualFile=null;        if (mSlicingHandler.getOriginalProject() != null)         actualFile=new File(mSlicingHandler.getOriginalProject());        File finalFile=null;        Log.i("Slicer","Current project: " + mSlicingHandler.getOriginalProject());        if (actualFile != null)         if (LibraryController.isProject(actualFile)) {          if (DatabaseController.getPreference(DatabaseController.TAG_SLICING,"Last") != null) {            DatabaseController.handlePreference(DatabaseController.TAG_REFERENCES,mPrinter.getName(),mSlicingHandler.getOriginalProject() + "/_tmp/temp.gco",true);            mPrinter.setJobPath(null);            DevicesListController.selectPrinter(mActivity,actualFile,mSlicingHandler);          } else {            File tempFile=new File(LibraryController.getParentFolder() + "/temp/temp.gco");            if (tempFile.exists()) {              File tempFolder=new File(mSlicingHandler.getOriginalProject() + "/_tmp/");              if (!tempFolder.exists()) {                if (tempFolder.mkdir()) {                  Log.i("Slicer","Creating temp " + tempFolder.getAbsolutePath());                }                Log.i("Slicer","Creating temp NOPE " + tempFolder.getAbsolutePath());              }              finalFile=new File(tempFolder + "/" + actualFile.getName().replace(" ","_")+ "_tmp.gcode");              Log.i("Slicer","Creating new file in " + finalFile.getAbsolutePath());              Log.i("Slicer","Final file is: STL or Sliced STL");              tempFile.renameTo(finalFile);            } else {              if (LibraryController.hasExtension(1,mFile.getName())) {                Log.i("Slicer","Final file is: Project GCODE");                finalFile=mFile;              } else {                Log.i("Slicer","Mada mada");              }            }          }        } else {          File tempFile=new File(LibraryController.getParentFolder() + "/temp/temp.gco");          if (tempFile.exists()) {            Log.i("Slicer","Final file is: Random STL or Random Sliced STL");            finalFile=tempFile;          } else {            Log.i("Slicer","Final file is: Random GCODE");            finalFile=mFile;          }        }        if (finalFile != null)         if (finalFile.exists()) {          DevicesListController.selectPrinter(mActivity,finalFile,null);          mPrinter.setJobPath(finalFile.getAbsolutePath());        } else {          Toast.makeText(mActivity,R.string.viewer_slice_error,Toast.LENGTH_LONG).show();        }      } else {        Toast.makeText(mActivity,R.string.devices_toast_no_gcode,Toast.LENGTH_LONG).show();      }      ;    } else     Toast.makeText(mActivity,R.string.viewer_printer_unavailable,Toast.LENGTH_LONG).show();  } else   Toast.makeText(mActivity,R.string.viewer_printer_unavailable,Toast.LENGTH_LONG).show();  DatabaseController.handlePreference(DatabaseController.TAG_PROFILE,"type",String.valueOf(s_type.getSelectedItemPosition()),true);  DatabaseController.handlePreference(DatabaseController.TAG_PROFILE,"quality",String.valueOf(s_profile.getSelectedItemPosition()),true);}  }
class C{  public void shrink(){  if (c.length == length) {    return;  }  char[] newc=new char[length];  System.arraycopy(c,0,newc,0,length);  c=newc;}  }
class C{  private UploadSingleCredentialExtensionResponse extendUploadSingleCredentials(BusinessObjectData businessObjectData){  return uploadDownloadService.extendUploadSingleCredentials(businessObjectData.getNamespace(),businessObjectData.getBusinessObjectDefinitionName(),businessObjectData.getBusinessObjectFormatUsage(),businessObjectData.getBusinessObjectFormatFileType(),businessObjectData.getBusinessObjectFormatVersion(),businessObjectData.getPartitionValue(),businessObjectData.getVersion());}  }
class C{  public final void replaceAll(Object from,Object to){  replaceAll(from,to,false);}  }
class C{  public void printNotice(String msg){  printMessage(Diagnostic.Kind.NOTE,msg);}  }
class C{  public Ac3Reader(TrackOutput output,boolean isEac3){  super(output);  this.isEac3=isEac3;  headerScratchBits=new ParsableBitArray(new byte[HEADER_SIZE]);  headerScratchBytes=new ParsableByteArray(headerScratchBits.data);  state=STATE_FINDING_SYNC;}  }
class C{  static String propertyVar(final String property){  return String.format("${%s}",property);}  }
class C{  public Object visit(SimpleNode node,Object data){  return data;}  }
class C{  public BinC45ModelSelection(int minNoObj,Instances allData,boolean useMDLcorrection,boolean doNotMakeSplitPointActualValue){  m_minNoObj=minNoObj;  m_allData=allData;  m_useMDLcorrection=useMDLcorrection;  m_doNotMakeSplitPointActualValue=doNotMakeSplitPointActualValue;}  }
class C{  public CustomGraphQueryInferencer(QueryLanguage language,String queryText,String matcherText) throws MalformedQueryException, UnsupportedQueryLanguageException, SailException {  super();  setFields(language,queryText,matcherText);}  }
class C{  public void putOnOutfit(final Player player,final String outfitType){  final List<Outfit> possibleNewOutfits=outfitTypes.get(outfitType);  final Outfit newOutfit=Rand.rand(possibleNewOutfits);  player.setOutfit(newOutfit.putOver(player.getOutfit()),true);  player.registerOutfitExpireTime(endurance);}  }
class C{  public static boolean delete(File file){  if (file.isDirectory()) {    boolean success=true;    File[] files=file.listFiles();    for (    File child : files) {      success&=delete(child);      if (!success) {        return false;      }    }    boolean result=file.delete();    if (!result) {      LogService.getRoot().log(Level.WARNING,"com.rapidminer.tools.Tools.deleting_file_error",file);      return false;    }    return success;  } else {    boolean result=file.delete();    if (!result) {      LogService.getRoot().log(Level.WARNING,"com.rapidminer.tools.Tools.deleting_file_error",file);    }    return result;  }}  }
class C{  public void parse(){  method_info mi;  int i;  for (i=0; i < methods_count; i++) {    mi=methods[i];    mi.instructions=parseMethod(mi);  }}  }
class C{  public final void testSetErrorMessageWithContextAndResourceIdParameter(){  CharSequence errorMessage=getContext().getText(android.R.string.cancel);  AbstractValidatorImplementation abstractValidator=new AbstractValidatorImplementation("foo");  abstractValidator.setErrorMessage(getContext(),android.R.string.cancel);  assertEquals(errorMessage,abstractValidator.getErrorMessage());}  }
class C{  public void addContrast(byte value){}  }
class C{  private static boolean isNewMatch(IDocument document,int offset,int length,String partitioning){  Assert.isTrue(length >= 0);  Assert.isTrue(offset >= 0);  Assert.isTrue(offset + length < document.getLength() + 1);  try {    String text=document.get(offset,length);    int pos=text.indexOf("new");    while (pos != -1 && !isDefaultPartition(document,pos + offset,partitioning))     pos=text.indexOf("new",pos + 2);    if (pos < 0)     return false;    if (pos != 0 && Character.isJavaIdentifierPart(text.charAt(pos - 1)))     return false;    if (pos + 3 < length && Character.isJavaIdentifierPart(text.charAt(pos + 3)))     return false;    return true;  } catch (  BadLocationException e) {  }  return false;}  }
class C{  public static boolean initDebug(boolean InitCuda){  return StaticHelper.initOpenCV(InitCuda);}  }
class C{  private static int premultiplyColor(int c){  int r=Color.red(c);  int g=Color.green(c);  int b=Color.blue(c);  int a=Color.alpha(c);  r=mul255(r,a);  g=mul255(g,a);  b=mul255(b,a);  return pack8888(r,g,b,a);}  }
class C{  public void decorate(OutputNode node,Decorator decorator){  if (decorator != null) {    decorator.decorate(node);  }  scope(node);  namespace(node);}  }
class C{  @Override public boolean incrementToken() throws IOException {  if (input.incrementToken()) {    if (!keywordAtt.isKeyword() && termAtt.length() > minLength) {      StringBuilder sb=stemmer.stem(termAtt);      if (sb != null)       termAtt.setEmpty().append(sb);    }    return true;  } else {    return false;  }}  }
class C{  public void addProcessingItem(IProcessingItem procItem){  addProcessingItem(procItem,1);}  }
class C{  public void testSameClassLoaderContinuousMode() throws Exception {  processTestHotRedeployment(DeploymentMode.CONTINUOUS);}  }
class C{  public static long toLong(ByteBuffer buf,int offset){  if (littleEndian) {    return Long.reverseBytes(getAsLong(buf,offset));  }  return getAsLong(buf,offset);}  }
class C{  public void visitLineNumber(int line,Label start){  if (mv != null) {    mv.visitLineNumber(line,start);  }}  }
class C{  private static ResultPoint[] expandSquare(ResultPoint[] cornerPoints,float oldSide,float newSide){  float ratio=newSide / (2 * oldSide);  float dx=cornerPoints[0].getX() - cornerPoints[2].getX();  float dy=cornerPoints[0].getY() - cornerPoints[2].getY();  float centerx=(cornerPoints[0].getX() + cornerPoints[2].getX()) / 2.0f;  float centery=(cornerPoints[0].getY() + cornerPoints[2].getY()) / 2.0f;  ResultPoint result0=new ResultPoint(centerx + ratio * dx,centery + ratio * dy);  ResultPoint result2=new ResultPoint(centerx - ratio * dx,centery - ratio * dy);  dx=cornerPoints[1].getX() - cornerPoints[3].getX();  dy=cornerPoints[1].getY() - cornerPoints[3].getY();  centerx=(cornerPoints[1].getX() + cornerPoints[3].getX()) / 2.0f;  centery=(cornerPoints[1].getY() + cornerPoints[3].getY()) / 2.0f;  ResultPoint result1=new ResultPoint(centerx + ratio * dx,centery + ratio * dy);  ResultPoint result3=new ResultPoint(centerx - ratio * dx,centery - ratio * dy);  return new ResultPoint[]{result0,result1,result2,result3};}  }
class C{  public void logp(Level logLevel,String sourceClass,String sourceMethod,String msg,Object param){  if (!internalIsLoggable(logLevel)) {    return;  }  LogRecord record=new LogRecord(logLevel,msg);  record.setLoggerName(this.name);  record.setSourceClassName(sourceClass);  record.setSourceMethodName(sourceMethod);  record.setParameters(new Object[]{param});  setResourceBundle(record);  log(record);}  }
class C{  public static void prependResourceSource(ResourceSource source){  ALL_RESOURCE_SOURCES.addFirst(source);}  }
class C{  public void testMinShingleSize() throws Exception {  Reader reader=new StringReader("this is a test");  TokenStream stream=whitespaceMockTokenizer(reader);  stream=tokenFilterFactory("Shingle","minShingleSize","3","maxShingleSize","4").create(stream);  assertTokenStreamContents(stream,new String[]{"this","this is a","this is a test","is","is a test","a","test"});}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:03.573 -0500",hash_original_method="B05C371FE3D3E8ED1D5DB9B0F1B6DE4B",hash_generated_method="4473028CCD135DEA7DEAAF783BCB6AF9") public static Uri addMessage(ContentResolver resolver,String address,String body,String subject,Long date){  return addMessageToUri(resolver,CONTENT_URI,address,body,subject,date,true,false);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected void _write(String s) throws IOException {  _writer.write(s);}  }
class C{  public Timeshift(long amount,ChronoUnit unit){  this.amount=amount;  this.unit=unit;  this.shift=unit.getDuration().toMillis() * amount;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:23.176 -0500",hash_original_method="22FC701C5FD198EE89684FFAA296E5FF",hash_generated_method="B59F71D87B2619681721145E061AD10B") public void put(int key,int value){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    mValues[i]=value;  } else {    i=~i;    if (mSize >= mKeys.length) {      int n=ArrayUtils.idealIntArraySize(mSize + 1);      int[] nkeys=new int[n];      int[] nvalues=new int[n];      System.arraycopy(mKeys,0,nkeys,0,mKeys.length);      System.arraycopy(mValues,0,nvalues,0,mValues.length);      mKeys=nkeys;      mValues=nvalues;    }    if (mSize - i != 0) {      System.arraycopy(mKeys,i,mKeys,i + 1,mSize - i);      System.arraycopy(mValues,i,mValues,i + 1,mSize - i);    }    mKeys[i]=key;    mValues[i]=value;    mSize++;  }}  }
class C{  public static float[] joinMonoFloatArrays(float[] left,float[] right){  if (left.length != right.length) {    throw new IllegalArgumentException("left & right channels need to be of equal size");  }  float[] stereo=new float[left.length * 2];  for (int i=0, j=0; i < left.length; i++, j+=2) {    stereo[j]=left[i];    stereo[j + 1]=right[i];  }  return stereo;}  }
class C{  public void whyItsGreat() throws Exception {  List<Food> foodOnPlate=Arrays.asList(cook("salmon"),cook("asparagus"),cook("enterotoxin"));  foodOnPlate.forEach(null);  foodOnPlate.forEach(Errors.suppress().wrap(null));  foodOnPlate.forEach(Errors.log().wrap(null));  foodOnPlate.forEach(Errors.rethrow().wrap(null));  foodOnPlate.forEach(Errors.dialog().wrap(null));  Errors retryHandler=Errors.createHandling(null);  foodOnPlate.forEach(retryHandler.wrap(null));}  }
class C{  public void test_getShortLjava_lang_ObjectI(){  short[] x={1};  short ret=0;  boolean thrown=false;  try {    ret=Array.getShort(x,0);  } catch (  Exception e) {    fail("Exception during get test : " + e.getMessage());  }  assertEquals("Get returned incorrect value",1,ret);  try {    ret=Array.getShort(new Object(),0);  } catch (  IllegalArgumentException e) {    thrown=true;  }  if (!thrown) {    fail("Passing non-array failed to throw exception");  }  thrown=false;  try {    ret=Array.getShort(x,4);  } catch (  ArrayIndexOutOfBoundsException e) {    thrown=true;  }  if (!thrown) {    fail("Invalid index failed to throw exception");  }  thrown=false;  try {    ret=Array.getShort(null,0);  } catch (  NullPointerException e) {    thrown=true;  }  if (!thrown) {    fail("Null argument failed to throw NPE");  }}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public GetEndpointsResponse GetEndpoints(GetEndpointsRequest req) throws ServiceFaultException, ServiceResultException {  return (GetEndpointsResponse)channel.serviceRequest(req);}  }
class C{  public void clearEncodingMap(){  localeToCharsetMap.clear();}  }
class C{  public void init() throws ServletException {}  }
class C{  static void closeOthers(final SimpleReactStream active,final List<SimpleReactStream> all){  all.stream().filter(null).filter(null).forEach(null);}  }
class C{  public boolean equalsTo(ValidityState otherState){  return otherState == this;}  }
class C{  public boolean hasProperty(String name){  for (  Property property : this.properties) {    if (property.getName().equals(name)) {      return true;    }  }  return false;}  }
class C{  public Statement from(Object... tables){  statement.append(" FROM ");  appendClauses(tables);  return this;}  }
class C{  void pushDataMessage(GTSEncoder encoder) throws IOException {  if (null != encoder) {    KafkaDataMessage msg=new KafkaDataMessage();    msg.setType(KafkaDataMessageType.STORE);    msg.setData(encoder.getBytes());    msg.setClassId(encoder.getClassId());    msg.setLabelsId(encoder.getLabelsId());    sendDataMessage(msg);  } else {    sendDataMessage(null);  }}  }
class C{  public void reAlloc(){  final long newAllocationSize=allocationSizeInBytes * 2L;  if (newAllocationSize > MAX_ALLOCATION_SIZE) {    throw new OversizedAllocationException("Unable to expand the buffer. Max allowed buffer size is reached.");  }  logger.debug("Reallocating vector [{}]. # of bytes: [{}] -> [{}]",name,allocationSizeInBytes,newAllocationSize);  final ArrowBuf newBuf=allocator.buffer((int)newAllocationSize);  newBuf.setBytes(0,data,0,data.capacity());  final int halfNewCapacity=newBuf.capacity() / 2;  newBuf.setZero(halfNewCapacity,halfNewCapacity);  newBuf.writerIndex(data.writerIndex());  data.release(1);  data=newBuf;  allocationSizeInBytes=(int)newAllocationSize;}  }
class C{  public void propertyChange(PropertyChangeEvent e){  if (e.getNewValue() == Boolean.TRUE)   start((WFNode)e.getSource());}  }
class C{  @Override public boolean onJsPrompt(WebView view,String url,String message,String defaultValue,JsPromptResult result){  String logMsg=String.format("JS Prompt '%s' received from %s; " + "Giving default value '%s'",message,url,defaultValue);  Log.w(TAG,logMsg);  result.confirm(defaultValue);  return true;}  }
class C{  public static String s(final String name){  return "html/help/setting/" + name + ".html";}  }
class C{  @SuppressWarnings("unchecked") public static <T>T[] appendElement(Class<T> kind,T[] array,T element){  final T[] result;  final int end;  if (array != null) {    end=array.length;    result=(T[])Array.newInstance(kind,end + 1);    System.arraycopy(array,0,result,0,end);  } else {    end=0;    result=(T[])Array.newInstance(kind,1);  }  result[end]=element;  return result;}  }
class C{  public ConversionException(final Throwable cause){  super(cause.getMessage());  this.cause=cause;}  }
class C{  public boolean isStrict(){  return this.strict;}  }
class C{  public JobBuilder withIdentity(String name){  key=new JobKey(name,null);  return this;}  }
class C{  protected void addEventListeners(){  final EventTarget canvasTarget=JsCast.castTo(canvas,EventTarget.class);  final EventTarget document=ScriptHelper.evalCasting("document",EventTarget.class,this);  org.w3c.dom.events.EventListener listener=getMouseDownListener();  canvasTarget.addEventListener("mousedown",listener,true);  document.addEventListener("mousedown",listener,true);  listener=getMouseUpListener();  canvasTarget.addEventListener("mouseup",listener,true);  document.addEventListener("mouseup",listener,true);  listener=getMouseMoveListener();  canvasTarget.addEventListener("mousemove",listener,true);  document.addEventListener("mousemove",listener,true);  listener=getMouseScrollListener();  canvasTarget.addEventListener("mousewheel",listener,true);  canvasTarget.addEventListener("DOMMouseScroll",listener,true);  document.addEventListener("keydown",getKeyDownListener(),false);  document.addEventListener("keyup",getKeyUpListener(),false);  document.addEventListener("keypress",getKeyPressListener(),false);  canvasTarget.addEventListener("touchstart",getTouchStartListener(),true);  canvasTarget.addEventListener("touchmove",getTouchMoveListener(),true);  canvasTarget.addEventListener("touchcancel",getTouchCancelListener(),true);  canvasTarget.addEventListener("touchend",getTouchEndListener(),true);}  }
class C{  protected boolean saveComposedText(int pos){  if (composedTextExists()) {    int start=composedTextStart.getOffset();    int len=composedTextEnd.getOffset() - composedTextStart.getOffset();    if (pos >= start && pos <= start + len) {      try {        getDocument().remove(start,len);        return true;      } catch (      BadLocationException ble) {      }    }  }  return false;}  }
class C{  public static double multinormalProb(double a[],double b[],double cov[][]){  assert a.length == b.length;  for (int i=0; i < a.length; i++) {    assert a[i] <= b[i];  }  orderIntegral(a,b,cov);  double c[][]=MatrixUtils.cholesky(cov);  double d[]=new double[a.length], e[]=new double[a.length], f[]=new double[a.length];  double w[]=new double[a.length - 1], y[]=new double[a.length - 1];  double intSum=0., varSum=0., error, auxSum;  int n=0;  RandomUtil r=RandomUtil.getInstance();  if (a[0] == Double.NEGATIVE_INFINITY) {    d[0]=0.;  } else {    d[0]=ProbUtils.normalCdf(a[0] / c[0][0]);  }  if (b[0] == Double.POSITIVE_INFINITY) {    e[0]=1.;  } else {    e[0]=ProbUtils.normalCdf(b[0] / c[0][0]);  }  f[0]=e[0] - d[0];  do {    for (int i=0; i < w.length; i++) {      w[i]=r.nextDouble();    }    for (int i=1; i < a.length; i++) {      double quant=d[i - 1] + w[i - 1] * (e[i - 1] - d[i - 1]);      if (quant == 1.) {        y[i - 1]=Double.MAX_VALUE;      } else       if (quant == 0.) {        y[i - 1]=-Double.MAX_VALUE;      } else {        y[i - 1]=ProbUtils.normalQuantile(d[i - 1] + w[i - 1] * (e[i - 1] - d[i - 1]));      }      auxSum=0.;      for (int j=0; j < i; j++) {        auxSum+=c[i][j] * y[j];      }      if (a[i] == Double.NEGATIVE_INFINITY) {        d[i]=0.;      } else {        d[i]=ProbUtils.normalCdf((a[i] - auxSum) / c[i][i]);      }      if (b[i] == Double.POSITIVE_INFINITY) {        e[i]=1.;      } else {        e[i]=ProbUtils.normalCdf((b[i] - auxSum) / c[i][i]);      }      f[i]=(e[i] - d[i]) * f[i - 1];    }    intSum+=f[f.length - 1];    varSum+=f[f.length - 1] * f[f.length - 1];    n++;    error=2;  } while ((error > 0.0001 && n < 5000) || n < 50);  return intSum / n;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public STGroupFile(String fileName){  this(fileName,'<','>');}  }
class C{  public void check(final int api){  if (api == Opcodes.ASM4) {    if (visibleTypeAnnotations != null && visibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }    if (invisibleTypeAnnotations != null && invisibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }    int n=tryCatchBlocks == null ? 0 : tryCatchBlocks.size();    for (int i=0; i < n; ++i) {      TryCatchBlockNode tcb=tryCatchBlocks.get(i);      if (tcb.visibleTypeAnnotations != null && tcb.visibleTypeAnnotations.size() > 0) {        throw new RuntimeException();      }      if (tcb.invisibleTypeAnnotations != null && tcb.invisibleTypeAnnotations.size() > 0) {        throw new RuntimeException();      }    }    for (int i=0; i < instructions.size(); ++i) {      AbstractInsnNode insn=instructions.get(i);      if (insn.visibleTypeAnnotations != null && insn.visibleTypeAnnotations.size() > 0) {        throw new RuntimeException();      }      if (insn.invisibleTypeAnnotations != null && insn.invisibleTypeAnnotations.size() > 0) {        throw new RuntimeException();      }      if (insn instanceof MethodInsnNode) {        boolean itf=((MethodInsnNode)insn).itf;        if (itf != (insn.opcode == Opcodes.INVOKEINTERFACE)) {          throw new RuntimeException();        }      }    }    if (visibleLocalVariableAnnotations != null && visibleLocalVariableAnnotations.size() > 0) {      throw new RuntimeException();    }    if (invisibleLocalVariableAnnotations != null && invisibleLocalVariableAnnotations.size() > 0) {      throw new RuntimeException();    }  }}  }
class C{  Writer write(Writer writer,int indentFactor,int indent) throws JSONException {  try {    boolean commanate=false;    final int length=this.length();    Iterator<String> keys=this.keys();    writer.write('{');    if (length == 1) {      Object key=keys.next();      writer.write(quote(key.toString()));      writer.write(':');      if (indentFactor > 0) {        writer.write(' ');      }      writeValue(writer,this.map.get(key),indentFactor,indent);    } else     if (length != 0) {      final int newindent=indent + indentFactor;      while (keys.hasNext()) {        Object key=keys.next();        if (commanate) {          writer.write(',');        }        if (indentFactor > 0) {          writer.write('\n');        }        indent(writer,newindent);        writer.write(quote(key.toString()));        writer.write(':');        if (indentFactor > 0) {          writer.write(' ');        }        writeValue(writer,this.map.get(key),indentFactor,newindent);        commanate=true;      }      if (indentFactor > 0) {        writer.write('\n');      }      indent(writer,indent);    }    writer.write('}');    return writer;  } catch (  IOException exception) {    throw new JSONException(exception);  }}  }
class C{  private void loadAuthenticationMethodTypes(ExtensionHook hook){  this.authenticationMethodTypes=new ArrayList<>();  this.authenticationMethodTypes.add(new FormBasedAuthenticationMethodType());  this.authenticationMethodTypes.add(new HttpAuthenticationMethodType());  this.authenticationMethodTypes.add(new ManualAuthenticationMethodType());  this.authenticationMethodTypes.add(new ScriptBasedAuthenticationMethodType());  for (  AuthenticationMethodType a : authenticationMethodTypes) {    a.hook(hook);  }  if (log.isInfoEnabled()) {    log.info("Loaded authentication method types: " + authenticationMethodTypes);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 21:46:48.527 -0400",hash_original_method="1BEE6F21F5202DCAF235DC49F611210B",hash_generated_method="705AE10C98EF6BF2A08565DC97D4AC47") public boolean onKeyDown(int keyCode,KeyEvent event){  if (isShowing()) {    if (keyCode != KeyEvent.KEYCODE_SPACE && (mDropDownList.getSelectedItemPosition() >= 0 || (keyCode != KeyEvent.KEYCODE_ENTER && keyCode != KeyEvent.KEYCODE_DPAD_CENTER))) {      int curIndex=mDropDownList.getSelectedItemPosition();      boolean consumed;      final boolean below=!mPopup.isAboveAnchor();      final ListAdapter adapter=mAdapter;      boolean allEnabled;      int firstItem=Integer.MAX_VALUE;      int lastItem=Integer.MIN_VALUE;      if (adapter != null) {        allEnabled=adapter.areAllItemsEnabled();        firstItem=allEnabled ? 0 : mDropDownList.lookForSelectablePosition(0,true);        lastItem=allEnabled ? adapter.getCount() - 1 : mDropDownList.lookForSelectablePosition(adapter.getCount() - 1,false);      }      if ((below && keyCode == KeyEvent.KEYCODE_DPAD_UP && curIndex <= firstItem) || (!below && keyCode == KeyEvent.KEYCODE_DPAD_DOWN && curIndex >= lastItem)) {        clearListSelection();        mPopup.setInputMethodMode(PopupWindow.INPUT_METHOD_NEEDED);        show();        return true;      } else {        mDropDownList.mListSelectionHidden=false;      }      consumed=mDropDownList.onKeyDown(keyCode,event);      if (DEBUG) {        Log.v(TAG,"Key down: code=" + keyCode + " list consumed="+ consumed);      }      if (consumed) {        mPopup.setInputMethodMode(PopupWindow.INPUT_METHOD_NOT_NEEDED);        mDropDownList.requestFocusFromTouch();        show();switch (keyCode) {case KeyEvent.KEYCODE_ENTER:case KeyEvent.KEYCODE_DPAD_CENTER:case KeyEvent.KEYCODE_DPAD_DOWN:case KeyEvent.KEYCODE_DPAD_UP:          return true;      }    } else {      if (below && keyCode == KeyEvent.KEYCODE_DPAD_DOWN) {        if (curIndex == lastItem) {          return true;        }      } else       if (!below && keyCode == KeyEvent.KEYCODE_DPAD_UP && curIndex == firstItem) {        return true;      }    }  }}return false;}  }
class C{  public DelegatingSocket(Socket delegate,SocketChannel channel){  this.delegate=delegate;  this.channel=channel;  if (delegate instanceof DelegatingSocket) {    if (channel instanceof BaseDelegatingSocketChannel)     delegateAsDelegatingSocket=null; else     delegateAsDelegatingSocket=(DelegatingSocket)delegate;  } else {    delegateAsDelegatingSocket=null;  }}  }
class C{  public static char[] createTypeParameterSignature(char[] typeParameterName,char[][] boundSignatures){  int length=boundSignatures.length;  if (length == 0) {    return CharOperation.append(typeParameterName,C_COLON);  }  int boundsSize=0;  for (int i=0; i < length; i++) {    boundsSize+=boundSignatures[i].length + 1;  }  int nameLength=typeParameterName.length;  char[] result=new char[nameLength + boundsSize];  System.arraycopy(typeParameterName,0,result,0,nameLength);  int index=nameLength;  for (int i=0; i < length; i++) {    result[index++]=C_COLON;    int boundLength=boundSignatures[i].length;    System.arraycopy(boundSignatures[i],0,result,index,boundLength);    index+=boundLength;  }  return result;}  }
class C{  public float nextTabStop(float x,int tabOffset){  if (justification != StyleConstants.ALIGN_LEFT)   return x + 10.0f;  x-=tabBase;  TabSet tabs=getTabSet();  if (tabs == null) {    return (float)(tabBase + (((int)x / 72 + 1) * 72));  }  TabStop tab=tabs.getTabAfter(x + .01f);  if (tab == null) {    return tabBase + x + 5.0f;  }  int alignment=tab.getAlignment();  int offset;switch (alignment) {default :case TabStop.ALIGN_LEFT:    return tabBase + tab.getPosition();case TabStop.ALIGN_BAR:  return tabBase + tab.getPosition();case TabStop.ALIGN_RIGHT:case TabStop.ALIGN_CENTER:offset=findOffsetToCharactersInString(tabChars,tabOffset + 1);break;case TabStop.ALIGN_DECIMAL:offset=findOffsetToCharactersInString(tabDecimalChars,tabOffset + 1);break;}if (offset == -1) {offset=getEndOffset();}float charsSize=getPartialSize(tabOffset + 1,offset);switch (alignment) {case TabStop.ALIGN_RIGHT:case TabStop.ALIGN_DECIMAL:return tabBase + Math.max(x,tab.getPosition() - charsSize);case TabStop.ALIGN_CENTER:return tabBase + Math.max(x,tab.getPosition() - charsSize / 2.0f);}return x;}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  private void constructPredecessorsPanel(){  myDependenciesPanel=new TaskDependenciesPanel();  myDependenciesPanel.init(selectedTasks[0]);  predecessorsPanel=myDependenciesPanel.getComponent();}  }
class C{  public static Solution binaryTournament(Solution solution1,Solution solution2,DominanceComparator comparator){  int flag=comparator.compare(solution1,solution2);  if (flag > 0) {    return solution2;  } else {    return solution1;  }}  }
class C{  public boolean sideVisible(ForgeDirection side,IBlockAccess world){  return world.isAirBlock(xCoord + side.offsetX,yCoord + side.offsetY,zCoord + side.offsetZ);}  }
class C{  private void createCollection(){  System.out.println();  System.out.println("createList");  List<Integer> list1=List.of(1,2,3);  System.out.println(list1);  List<Integer> list2=list1.tail().prepend(0);  System.out.println(list2);  System.out.println();  System.out.println("createQueue");  Queue<Integer> queue=Queue.of(1,2,3).enqueue(4).enqueue(5);  System.out.println(queue);}  }
class C{  public ApprovalDialog(Frame owner){  super(owner);}  }
class C{  public void testFictionalProgressTimerMomentParsing(){  String xml="";  xml+=createStartMissionXml("start","Name");  xml+=createTimerMomentWithFictionalProgressXML("start",null,1.0,"Fictional progress.");  xml+=createEndMissionXml();  InputStream momentInputStream=new ByteArrayInputStream(xml.getBytes());  mMission=new Mission(mMissionData);  try {    mMission.readMoments(momentInputStream);  } catch (  MissionParseException e) {    e.printStackTrace();  }  Assert.assertEquals(1,mMissionData.getMomentFromId("start").getFictionalProgress().size());  Assert.assertEquals("Fictional progress.",mMissionData.getMomentFromId("start").getFictionalProgress().get(0));}  }
class C{  private KrbAsReqBuilder send() throws KrbException, IOException {  boolean preAuthFailedOnce=false;  KdcComm comm=new KdcComm(cname.getRealmAsString());  EncryptionKey pakey=null;  while (true) {    try {      req=build(pakey);      rep=new KrbAsRep(comm.send(req.encoding()));      return this;    } catch (    KrbException ke) {      if (!preAuthFailedOnce && (ke.returnCode() == Krb5.KDC_ERR_PREAUTH_FAILED || ke.returnCode() == Krb5.KDC_ERR_PREAUTH_REQUIRED)) {        if (Krb5.DEBUG) {          System.out.println("KrbAsReqBuilder: " + "PREAUTH FAILED/REQ, re-send AS-REQ");        }        preAuthFailedOnce=true;        KRBError kerr=ke.getError();        int paEType=PAData.getPreferredEType(kerr.getPA(),EType.getDefaults("default_tkt_enctypes")[0]);        if (password == null) {          EncryptionKey[] ks=Krb5Util.keysFromJavaxKeyTab(ktab,cname);          pakey=EncryptionKey.findKey(paEType,ks);          if (pakey != null)           pakey=(EncryptionKey)pakey.clone();          for (          EncryptionKey k : ks)           k.destroy();        } else {          pakey=EncryptionKey.acquireSecretKey(cname,password,paEType,PAData.getSaltAndParams(paEType,kerr.getPA()));        }        paList=kerr.getPA();      } else {        throw ke;      }    }  }}  }
class C{  public static SetExpression in(String propertyName,Object[] values){  return new SetExpression(Operator.IN,propertyName,values);}  }
class C{  void addSchema(Schema schema){  Schema[] s=new Schema[schemas.length + 1];  System.arraycopy(schemas,0,s,0,schemas.length);  s[schemas.length]=schema;  schemas=s;}  }
class C{  public static MethodSelection applyMethod(ObjectType clazz,String methodName,@Nullable ExprNode[] args,ExecutableDescriptor[] candidates) throws MethodNotFoundException, AmbiguousMethodException {  if (args == null)   args=new ExprNode[0];  Type[] types=AstUtil.getExprTypes(args);  if (types == null)   types=new Type[0];  List<ExecutableDescriptor> selectedList=methodSelector.select(candidates,methodName,types);  if (selectedList.isEmpty()) {    throw new MethodNotFoundException(clazz,methodName);  } else   if (selectedList.size() > 1) {    throw new AmbiguousMethodException(selectedList);  }  ExecutableDescriptor md=selectedList.get(0);  ExprNode[] matchedParam=AstUtil.matchTypes(args,types,md.getParameterTypes());  Objects.requireNonNull(matchedParam);  return new MethodSelection(md,matchedParam);}  }
class C{  private List<UnManagedExportMask> findUnManagedRPExportMask(ProtectionSystem protectionSystem,UnManagedVolume unManagedVolume){  List<UnManagedExportMask> unManagedRPExportMasks=new ArrayList<UnManagedExportMask>();  for (  String maskIdStr : unManagedVolume.getUnmanagedExportMasks()) {    UnManagedExportMask em=_dbClient.queryObject(UnManagedExportMask.class,URI.create(maskIdStr));    if (em == null) {      _logger.error("UnManagedExportMask with ID: " + maskIdStr + " could not be found in DB.  Could already be ingested.");      continue;    }    if (em.getKnownInitiatorNetworkIds() == null || em.getKnownInitiatorNetworkIds().isEmpty()) {      _logger.error("UnManagedExportMask with ID: " + maskIdStr + " does not contain any RP initiators.  Ignoring for ingestion.");      continue;    }    boolean foundMask=false;    for (    String wwn : em.getKnownInitiatorNetworkIds()) {      for (      Entry<String,AbstractChangeTrackingSet<String>> siteInitEntry : protectionSystem.getSiteInitiators().entrySet()) {        if (siteInitEntry.getValue().contains(wwn)) {          _logger.info(String.format("UnManagedVolume %s was found in UnManagedExportMask %s and will be ingested (if not ingested already)",unManagedVolume.getLabel(),em.getMaskName()));          unManagedRPExportMasks.add(em);          foundMask=true;          break;        }      }      if (foundMask) {        break;      }    }  }  return unManagedRPExportMasks;}  }
class C{  public FruchtermanReingoldLayout(String graph){  this(graph,700);}  }
class C{  public static void finishPsiModification(){  if (!PsiInvalidElementAccessException.isTrackingInvalidation()) {    return;  }  Integer depth=ourPsiModificationDepth.get();  if (depth == null) {    LOG.warn("Unmatched PSI modification end",new Throwable());    depth=0;  } else {    depth--;    ourPsiModificationDepth.set(depth);  }  if (depth == 0) {    ourPsiModificationTrace.set(null);  }}  }
class C{  private static byte[] hexStringToByteArray(String hexString){  int len=hexString.length();  byte[] data=new byte[len / 2];  for (int i=0; i < len; i+=2) {    data[i / 2]=(byte)((Character.digit(hexString.charAt(i),16) << 4) + Character.digit(hexString.charAt(i + 1),16));  }  return data;}  }
class C{  public static byte[] buildAudioSpecificConfig(int audioObjectType,int sampleRateIndex,int channelConfig){  byte[] audioSpecificConfig=new byte[2];  audioSpecificConfig[0]=(byte)((audioObjectType << 3) & 0xF8 | (sampleRateIndex >> 1) & 0x07);  audioSpecificConfig[1]=(byte)((sampleRateIndex << 7) & 0x80 | (channelConfig << 3) & 0x78);  return audioSpecificConfig;}  }
class C{  public final Tree declarationFromElement(Element elt){  if (root == null) {    return null;  }  if (shouldCache && elementToTreeCache.containsKey(elt)) {    return elementToTreeCache.get(elt);  }  if (elt instanceof DetachedVarSymbol) {    return ((DetachedVarSymbol)elt).getDeclaration();  }  Tree fromElt;switch (elt.getKind()) {case CLASS:case ENUM:case INTERFACE:case ANNOTATION_TYPE:case FIELD:case ENUM_CONSTANT:case METHOD:case CONSTRUCTOR:    fromElt=trees.getTree(elt);  break;default :fromElt=com.sun.tools.javac.tree.TreeInfo.declarationFor((com.sun.tools.javac.code.Symbol)elt,(com.sun.tools.javac.tree.JCTree)root);break;}if (shouldCache) {elementToTreeCache.put(elt,fromElt);}return fromElt;}  }
class C{  protected MouseInputListener createMouseInputListener(){  return new AquaTableUI.MouseInputHandler();}  }
class C{  @Override public boolean isPersistent(){  return (null != getExpiryDate()) && !discard;}  }
class C{  public int next(){  int nextPos=index;  char c=desc.charAt(nextPos);  if (c == '(') {    ++index;    c=desc.charAt(++nextPos);    param=true;  }  if (c == ')') {    ++index;    c=desc.charAt(++nextPos);    param=false;  }  while (c == '[')   c=desc.charAt(++nextPos);  if (c == 'L') {    nextPos=desc.indexOf(';',nextPos) + 1;    if (nextPos <= 0)     throw new IndexOutOfBoundsException("bad descriptor");  } else   ++nextPos;  curPos=index;  index=nextPos;  return curPos;}  }
class C{  public final void writeLong(long val) throws IOException {  Memory.pokeLong(scratch,0,val,ByteOrder.BIG_ENDIAN);  write(scratch,0,SizeOf.LONG);}  }
class C{  public void addProperty(Property property){  getProperties().add(property);}  }
class C{  private void callDestroy(NamingContext nc) throws NamingException {  if (_nc == null)   throw new ConfigurationException("Context does not have a corresponding NamingContext");  try {    nc.destroy();  } catch (  Exception e) {    throw ExceptionMapper.mapException(e,this,null);  }}  }
class C{  public ExponentialGrowthModel(String name,Parameter N0Parameter,Parameter growthRateParameter,Type units,boolean usingGrowthRate){  super(name);  exponentialGrowth=new ExponentialGrowth(units);  this.N0Parameter=N0Parameter;  addVariable(N0Parameter);  N0Parameter.addBounds(new Parameter.DefaultBounds(Double.MAX_VALUE,0.0,1));  this.growthRateParameter=growthRateParameter;  addVariable(growthRateParameter);  growthRateParameter.addBounds(new Parameter.DefaultBounds(Double.MAX_VALUE,-Double.MAX_VALUE,1));  this.usingGrowthRate=usingGrowthRate;  setUnits(units);}  }
class C{  public static int width(List<Type> types){  int w=0;  for (List<Type> l=types; l.nonEmpty(); l=l.tail)   w=w + width(l.head);  return w;}  }
class C{  public void removeUpdate(DocumentEvent changes,Shape a,ViewFactory f){  super.removeUpdate(changes,adjustAllocation(a),f);  updateVisibilityModel();}  }
class C{  public static Intersection intersector(MatchParameters params){  return new Intersection(new MatchFilter.MatchParametersMF(params),new MatchCollector.SetMatchCollector());}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case GamlPackage.MODEL__NAME:    setName((String)newValue);  return;case GamlPackage.MODEL__PRAGMAS:getPragmas().clear();getPragmas().addAll((Collection<? extends Pragma>)newValue);return;case GamlPackage.MODEL__IMPORTS:getImports().clear();getImports().addAll((Collection<? extends Import>)newValue);return;case GamlPackage.MODEL__BLOCK:setBlock((Block)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:09.156 -0500",hash_original_method="645533039846ABF2603AD0F9C774FE0D",hash_generated_method="31D62C83A5D564DE072E4EB5EACBF9D8") private String readValue(char delimiter,boolean resolveEntities,boolean throwOnResolveFailure,ValueContext valueContext) throws IOException, XmlPullParserException {  int start=position;  StringBuilder result=null;  if (valueContext == ValueContext.TEXT && text != null) {    result=new StringBuilder();    result.append(text);  }  while (true) {    if (position >= limit) {      if (start < position) {        if (result == null) {          result=new StringBuilder();        }        result.append(buffer,start,position - start);      }      if (!fillBuffer(1)) {        return result != null ? result.toString() : "";      }      start=position;    }    char c=buffer[position];    if (c == delimiter || (delimiter == ' ' && (c <= ' ' || c == '>')) || c == '&' && !resolveEntities) {      break;    }    if (c != '\r' && (c != '\n' || valueContext != ValueContext.ATTRIBUTE) && c != '&' && c != '<' && (c != ']' || valueContext != ValueContext.TEXT) && (c != '%' || valueContext != ValueContext.ENTITY_DECLARATION)) {      isWhitespace&=(c <= ' ');      position++;      continue;    }    if (result == null) {      result=new StringBuilder();    }    result.append(buffer,start,position - start);    if (c == '\r') {      if ((position + 1 < limit || fillBuffer(2)) && buffer[position + 1] == '\n') {        position++;      }      c=(valueContext == ValueContext.ATTRIBUTE) ? ' ' : '\n';    } else     if (c == '\n') {      c=' ';    } else     if (c == '&') {      isWhitespace=false;      readEntity(result,false,throwOnResolveFailure,valueContext);      start=position;      continue;    } else     if (c == '<') {      if (valueContext == ValueContext.ATTRIBUTE) {        checkRelaxed("Illegal: \"<\" inside attribute value");      }      isWhitespace=false;    } else     if (c == ']') {      if ((position + 2 < limit || fillBuffer(3)) && buffer[position + 1] == ']' && buffer[position + 2] == '>') {        checkRelaxed("Illegal: \"]]>\" outside CDATA section");      }      isWhitespace=false;    } else     if (c == '%') {      throw new XmlPullParserException("This parser doesn't support parameter entities",this,null);    } else {      throw new AssertionError();    }    position++;    result.append(c);    start=position;  }  if (result == null) {    return stringPool.get(buffer,start,position - start);  } else {    result.append(buffer,start,position - start);    return result.toString();  }}  }
class C{  public Filter createFilter(BridgeContext ctx,Element filterElement,Element filteredElement,GraphicsNode filteredNode,Filter inputFilter,Rectangle2D filterRegion,Map filterMap){  Filter in=getIn(filterElement,filteredElement,filteredNode,inputFilter,filterMap,ctx);  if (in == null) {    return null;  }  Rectangle2D defaultRegion=filterRegion;  Rectangle2D primitiveRegion=SVGUtilities.convertFilterPrimitiveRegion(filterElement,filteredElement,filteredNode,defaultRegion,filterRegion,ctx);  float[] baseFrequency=convertBaseFrenquency(filterElement,ctx);  int numOctaves=convertInteger(filterElement,SVG_NUM_OCTAVES_ATTRIBUTE,1,ctx);  int seed=convertInteger(filterElement,SVG_SEED_ATTRIBUTE,0,ctx);  boolean stitchTiles=convertStitchTiles(filterElement,ctx);  boolean isFractalNoise=convertType(filterElement,ctx);  TurbulenceRable turbulenceRable=new TurbulenceRable8Bit(primitiveRegion);  turbulenceRable.setBaseFrequencyX(baseFrequency[0]);  turbulenceRable.setBaseFrequencyY(baseFrequency[1]);  turbulenceRable.setNumOctaves(numOctaves);  turbulenceRable.setSeed(seed);  turbulenceRable.setStitched(stitchTiles);  turbulenceRable.setFractalNoise(isFractalNoise);  handleColorInterpolationFilters(turbulenceRable,filterElement);  updateFilterMap(filterElement,turbulenceRable,filterMap);  return turbulenceRable;}  }
class C{  public String[] commandStationOptions(){  String[] retval=new String[commandStationNames.length + 2];  retval[0]=LnCommandStationType.COMMAND_STATION_PR3_ALONE.getName();  for (int i=0; i < commandStationNames.length; i++) {    retval[i + 1]=commandStationNames[i];  }  retval[retval.length - 1]=LnCommandStationType.COMMAND_STATION_STANDALONE.getName();  return retval;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeinsertbefore.class,args);}  }
class C{  public static final Long extractIplIdentitySlaveSerialNumber(LocoNetMessage m){  Long sn;  Integer di_f2;  di_f2=m.getElement(14);  sn=(long)(m.getElement(15) + ((di_f2 & 0x1) << 7));  sn+=(((long)m.getElement(16)) << 8) + (((long)di_f2 & 0x2) << 14);  sn+=(((long)m.getElement(17)) << 16) + (((long)di_f2 & 0x4) << 21);  sn+=(((long)m.getElement(18)) << 24) + (((long)di_f2 & 0x8) << 28);  return sn;}  }
class C{  public Builder withFitnessCalculator(VMTaskFitnessCalculator fitnessCalculator){  this.fitnessCalculator=fitnessCalculator;  return this;}  }
class C{  AlignmentPattern find() throws NotFoundException {  int startX=this.startX;  int height=this.height;  int maxJ=startX + width;  int middleI=startY + (height / 2);  int[] stateCount=new int[3];  for (int iGen=0; iGen < height; iGen++) {    int i=middleI + ((iGen & 0x01) == 0 ? (iGen + 1) / 2 : -((iGen + 1) / 2));    stateCount[0]=0;    stateCount[1]=0;    stateCount[2]=0;    int j=startX;    while (j < maxJ && !image.get(j,i)) {      j++;    }    int currentState=0;    while (j < maxJ) {      if (image.get(j,i)) {        if (currentState == 1) {          stateCount[currentState]++;        } else {          if (currentState == 2) {            if (foundPatternCross(stateCount)) {              AlignmentPattern confirmed=handlePossibleCenter(stateCount,i,j);              if (confirmed != null) {                return confirmed;              }            }            stateCount[0]=stateCount[2];            stateCount[1]=1;            stateCount[2]=0;            currentState=1;          } else {            stateCount[++currentState]++;          }        }      } else {        if (currentState == 1) {          currentState++;        }        stateCount[currentState]++;      }      j++;    }    if (foundPatternCross(stateCount)) {      AlignmentPattern confirmed=handlePossibleCenter(stateCount,i,maxJ);      if (confirmed != null) {        return confirmed;      }    }  }  if (!possibleCenters.isEmpty()) {    return possibleCenters.get(0);  }  throw NotFoundException.getNotFoundInstance();}  }
class C{  public void addFile(IterableFile lines){  for (  String s : lines)   addWords(s);}  }
class C{  public static int toRealPosition(int position,int count){  position=position - 1;  if (position < 0) {    position+=count;  } else {    position=position % count;  }  return position;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SGraphPackage.SPECIFICATION_ELEMENT__SPECIFICATION:    return getSpecification();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private void parseRcs(Node node){  if (node == null) {    return;  }  String msgCapValidity=null;  Node childnode=node.getFirstChild();  if (childnode != null) {    do {      if (childnode.getNodeName().equals("characteristic")) {        NamedNodeMap attributes=childnode.getAttributes();        if (attributes.getLength() > 0) {          Node typenode=attributes.getNamedItem("type");          if (typenode != null) {            String nodeValue=typenode.getNodeValue();            if (nodeValue.equalsIgnoreCase("UX")) {              parseUx(childnode,ImsServerVersion.JOYN);            } else             if (nodeValue.equalsIgnoreCase("Messaging")) {              parseMessaging(childnode);            }          }        }      }      if (msgCapValidity == null) {        if ((msgCapValidity=getValueByParamName("msgCapValidity",childnode,TYPE_INT)) != null) {          long validity=Long.parseLong(msgCapValidity) * SECONDS_TO_MILLISECONDS_CONVERSION_RATE;          mRcsSettings.writeLong(RcsSettingsData.MSG_CAP_VALIDITY_PERIOD,validity);        }      }    } while ((childnode=childnode.getNextSibling()) != null);  }}  }
class C{  protected void paint(SynthContext context,Graphics g){  SeaGlassContext accContext=getContext(menuItem,Region.MENU_ITEM_ACCELERATOR);  String prefix=getPropertyPrefix();  Icon checkIcon=style.getIcon(context,prefix + ".checkIcon");  Icon arrowIcon=style.getIcon(context,prefix + ".arrowIcon");  SeaGlassGraphicsUtils.paint(context,accContext,g,checkIcon,arrowIcon,acceleratorDelimiter,defaultTextIconGap,getPropertyPrefix());  accContext.dispose();}  }
class C{  public PageFormat(){  mPaper=new Paper();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:41.026 -0500",hash_original_method="CFF93884DD9A272729CBAF15B54B9CD3",hash_generated_method="34B1931F87CC1AB70BF43630E548F2D0") public void finishActionMode(){  if (mActionMode != null) {    mActionMode.finish();  }}  }
class C{  public abbr removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:49.455 -0400",hash_original_method="24E00A928675E75D0841AC75BD361533",hash_generated_method="09F96439DFBB9A7A4BE9D211F8A7D21A") private int handleH(String value,DoubleMetaphoneResult result,int index){  if ((index == 0 || isVowel(charAt(value,index - 1))) && isVowel(charAt(value,index + 1))) {    result.append('H');    index+=2;  } else {    index++;  }  return index;}  }
class C{  @Override public void processEvent(SystemEvent se) throws AbortProcessingException {  ViewScopeManager.getInstance(FacesContext.getCurrentInstance()).processEvent(se);}  }
class C{  public void enableTXNotification(){  BluetoothGattService RxService=mBluetoothGatt.getService(RX_SERVICE_UUID);  if (RxService == null) {    showMessage("Rx service not found!");    broadcastUpdate(DEVICE_DOES_NOT_SUPPORT_UART);    return;  }  BluetoothGattCharacteristic TxChar=RxService.getCharacteristic(TX_CHAR_UUID);  if (TxChar == null) {    showMessage("Tx charateristic not found!");    broadcastUpdate(DEVICE_DOES_NOT_SUPPORT_UART);    return;  }  mBluetoothGatt.setCharacteristicNotification(TxChar,true);  BluetoothGattDescriptor descriptor=TxChar.getDescriptor(CCCD);  descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);  mBluetoothGatt.writeDescriptor(descriptor);}  }
class C{  public static String[] computeAsyncParameterTypes(IMethodBinding syncMethodBinding){  List<String> parameters=new ArrayList<String>();  for (  ITypeBinding typeBinding : syncMethodBinding.getParameterTypes()) {    parameters.add(typeBinding.getErasure().getQualifiedName());  }  return computeAsyncParameterTypes(parameters);}  }
class C{  private void notifyDownloadCompleted(int status,boolean countRetry,int retryAfter,int redirectCount,boolean gotData,String filename){  updateDownloadDatabase(status,countRetry,retryAfter,redirectCount,gotData,filename);  if (DownloaderService.isStatusCompleted(status)) {  }}  }
class C{  public ColorList add(ReadonlyTColor c){  colors.add(c.copy());  return this;}  }
class C{  @SuppressWarnings("unchecked") @Override public void registerExtraHistoryLogMember(int providerId,Uri providerUri,Uri databaseUri,String table,@SuppressWarnings("rawtypes") Map columnMapping) throws RemoteException {  try {    assertMapTypeOfString(columnMapping);    retrieveHistoryLogProvider().registerDatabase(providerId,providerUri,databaseUri,table,columnMapping);  } catch (  ServerApiBaseException e) {    if (!e.shouldNotBeLogged()) {      sLogger.error(ExceptionUtil.getFullStackTrace(e));    }    throw e;  }catch (  Exception e) {    sLogger.error(ExceptionUtil.getFullStackTrace(e));    throw new ServerApiGenericException(e);  }}  }
class C{  @AfterMethod(alwaysRun=true) public void recoveryScenario(ITestResult rs) throws Throwable {  if (rs.getStatus() == 2) {    gotoMyCoursesView();    Reporter.log("Failed Test: " + rs.getTestName());  }}  }
class C{  public Location(UniqueString fName,int bl,int bc,int el,int ec){  name=fName;  bLine=bl;  bColumn=bc;  eLine=el;  eColumn=ec;}  }
class C{  public void destroyFixture(Fixture fixture){  body.destroyFixture(fixture.fixture);  fixtures.removeValue(fixture,true);  world.fixtures.remove(fixture.fixture);}  }
class C{  Uri openFileChooser(String acceptType,String capture){  if (mWebChromeClient == null) {    return null;  }  Message myMessage=obtainMessage(OPEN_FILE_CHOOSER);  UploadFile uploadFile=new UploadFile();  UploadFileMessageData data=new UploadFileMessageData(uploadFile,acceptType,capture);  myMessage.obj=data;  sendMessageToUiThreadSync(myMessage);  return uploadFile.getResult();}  }
class C{  public AclEntryImpl(){}  }
class C{  private String decodeRefName(final String refName){  return refName.substring(2);}  }
class C{  public T transparent(boolean transparent){  if (view != null) {    AQUtility.transparent(view,transparent);  }  return self();}  }
class C{  private void jbInit() throws Exception {  this.getContentPane().setLayout(mainLayout);  this.getContentPane().add(centerPanel,BorderLayout.CENTER);  this.getContentPane().add(confirmPanel,BorderLayout.SOUTH);  centerPanel.add(bUp,new ALayoutConstraint(0,0));  centerPanel.add(bNew,new ALayoutConstraint(0,6));  centerPanel.add(roleLabel,new ALayoutConstraint(1,0));  centerPanel.add(roleField,null);  centerPanel.add(cbActive,null);  centerPanel.add(cbExclude,null);  centerPanel.add(cbReadOnly,null);  centerPanel.add(cbDependent,null);  centerPanel.add(bDelete,null);  centerPanel.add(bDown,new ALayoutConstraint(2,0));  centerPanel.add(rowNoLabel,new ALayoutConstraint(2,6));  Dimension size=centerPanel.getPreferredSize();  size.width=600;  centerPanel.setPreferredSize(size);  bUp.addActionListener(this);  bDown.addActionListener(this);  bDelete.addActionListener(this);  bNew.addActionListener(this);  confirmPanel.addActionListener(this);}  }
class C{  protected Point2D doSpacing(Float kern,Float letterSpacing,Float wordSpacing){  boolean autoKern=true;  boolean doWordSpacing=false;  boolean doLetterSpacing=false;  float kernVal=0f;  float letterSpacingVal=0f;  if ((kern != null) && (!kern.isNaN())) {    kernVal=kern.floatValue();    autoKern=false;  }  if ((letterSpacing != null) && (!letterSpacing.isNaN())) {    letterSpacingVal=letterSpacing.floatValue();    doLetterSpacing=true;  }  if ((wordSpacing != null) && (!wordSpacing.isNaN())) {    doWordSpacing=true;  }  int numGlyphs=gv.getNumGlyphs();  float dx=0f;  float dy=0f;  Point2D[] newPositions=new Point2D[numGlyphs + 1];  Point2D prevPos=gv.getGlyphPosition(0);  int prevCode=gv.getGlyphCode(0);  float x=(float)prevPos.getX();  float y=(float)prevPos.getY();  Point2D lastCharAdvance=new Point2D.Double(advance.getX() - (gv.getGlyphPosition(numGlyphs - 1).getX() - x),advance.getY() - (gv.getGlyphPosition(numGlyphs - 1).getY() - y));  try {    GVTFont font=gv.getFont();    if ((numGlyphs > 1) && (doLetterSpacing || !autoKern)) {      for (int i=1; i <= numGlyphs; ++i) {        Point2D gpos=gv.getGlyphPosition(i);        int currCode;        currCode=(i == numGlyphs) ? -1 : gv.getGlyphCode(i);        dx=(float)gpos.getX() - (float)prevPos.getX();        dy=(float)gpos.getY() - (float)prevPos.getY();        if (autoKern) {          if (vertical)           dy+=letterSpacingVal; else           dx+=letterSpacingVal;        } else {          if (vertical) {            float vKern=0;            if (currCode != -1)             vKern=font.getVKern(prevCode,currCode);            dy+=kernVal - vKern + letterSpacingVal;          } else {            float hKern=0;            if (currCode != -1)             hKern=font.getHKern(prevCode,currCode);            dx+=kernVal - hKern + letterSpacingVal;          }        }        x+=dx;        y+=dy;        newPositions[i]=new Point2D.Float(x,y);        prevPos=gpos;        prevCode=currCode;      }      for (int i=1; i <= numGlyphs; ++i) {        if (newPositions[i] != null) {          gv.setGlyphPosition(i,newPositions[i]);        }      }    }    if (vertical) {      lastCharAdvance.setLocation(lastCharAdvance.getX(),lastCharAdvance.getY() + kernVal + letterSpacingVal);    } else {      lastCharAdvance.setLocation(lastCharAdvance.getX() + kernVal + letterSpacingVal,lastCharAdvance.getY());    }    dx=0f;    dy=0f;    prevPos=gv.getGlyphPosition(0);    x=(float)prevPos.getX();    y=(float)prevPos.getY();    if ((numGlyphs > 1) && (doWordSpacing)) {      for (int i=1; i < numGlyphs; i++) {        Point2D gpos=gv.getGlyphPosition(i);        dx=(float)gpos.getX() - (float)prevPos.getX();        dy=(float)gpos.getY() - (float)prevPos.getY();        boolean inWS=false;        int beginWS=i;        int endWS=i;        GVTGlyphMetrics gm=gv.getGlyphMetrics(i);        while ((gm.getBounds2D().getWidth() < 0.01d) || gm.isWhitespace()) {          if (!inWS)           inWS=true;          if (i == numGlyphs - 1) {            break;          }          ++i;          ++endWS;          gpos=gv.getGlyphPosition(i);          gm=gv.getGlyphMetrics(i);        }        if (inWS) {          int nWS=endWS - beginWS;          float px=(float)prevPos.getX();          float py=(float)prevPos.getY();          dx=(float)(gpos.getX() - px) / (nWS + 1);          dy=(float)(gpos.getY() - py) / (nWS + 1);          if (vertical) {            dy+=wordSpacing.floatValue() / (nWS + 1);          } else {            dx+=wordSpacing.floatValue() / (nWS + 1);          }          for (int j=beginWS; j <= endWS; ++j) {            x+=dx;            y+=dy;            newPositions[j]=new Point2D.Float(x,y);          }        } else {          dx=(float)(gpos.getX() - prevPos.getX());          dy=(float)(gpos.getY() - prevPos.getY());          x+=dx;          y+=dy;          newPositions[i]=new Point2D.Float(x,y);        }        prevPos=gpos;      }      Point2D gPos=gv.getGlyphPosition(numGlyphs);      x+=(float)(gPos.getX() - prevPos.getX());      y+=(float)(gPos.getY() - prevPos.getY());      newPositions[numGlyphs]=new Point2D.Float(x,y);      for (int i=1; i <= numGlyphs; ++i) {        if (newPositions[i] != null) {          gv.setGlyphPosition(i,newPositions[i]);        }      }    }  } catch (  Exception e) {    e.printStackTrace();  }  double advX=gv.getGlyphPosition(numGlyphs - 1).getX() - gv.getGlyphPosition(0).getX();  double advY=gv.getGlyphPosition(numGlyphs - 1).getY() - gv.getGlyphPosition(0).getY();  Point2D newAdvance=new Point2D.Double(advX + lastCharAdvance.getX(),advY + lastCharAdvance.getY());  return newAdvance;}  }
class C{  public static void putShort(byte[] arr,long off,short val){  if (UNALIGNED)   UNSAFE.putShort(arr,off,val); else   putShortByByte(arr,off,val,BIG_ENDIAN);}  }
class C{  public static boolean mousePressed(){synchronized (mouseLock) {    return mousePressed;  }}  }
class C{  public URI(URI p_base,String p_uriSpec) throws MalformedURIException {  initialize(p_base,p_uriSpec);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void testCloseExceptionallyError(){  SubmissionPublisher<Integer> p=basicPublisher();  TestSubscriber s1=new TestSubscriber();  TestSubscriber s2=new TestSubscriber();  p.subscribe(s1);  p.subscribe(s2);  p.submit(1);  p.closeExceptionally(new SPException());  assertTrue(p.isClosed());  s1.awaitError();  assertTrue(s1.nexts <= 1);  assertEquals(1,s1.errors);  s2.awaitError();  assertTrue(s2.nexts <= 1);  assertEquals(1,s2.errors);}  }
class C{  public ObjectWriter withPrettyPrinter(PrettyPrinter pp){  if (pp == _prettyPrinter) {    return this;  }  if (pp == null) {    pp=NULL_PRETTY_PRINTER;  }  return new ObjectWriter(this,_config,_rootType,pp,_schema);}  }
class C{  public String encode(){  String retval;  if (statusLine != null)   retval=statusLine.encode() + super.encode(); else   retval=super.encode();  return retval;}  }
class C{  public void start(@NonNull Context context,@NonNull android.support.v4.app.Fragment fragment,int requestCode){  fragment.startActivityForResult(getIntent(context),requestCode);}  }
class C{  @SuppressWarnings("unused") private SerialMessage(){}  }
class C{  public static double incompleteGamma(double a,double x){  double ans, ax, c, r;  if (x <= 0 || a <= 0) {    return 0.0;  }  if (x > 1.0 && x > a) {    return 1.0 - incompleteGammaComplement(a,x);  }  ax=a * Math.log(x) - x - lnGamma(a);  if (ax < -MAXLOG) {    return (0.0);  }  ax=Math.exp(ax);  r=a;  c=1.0;  ans=1.0;  do {    r+=1.0;    c*=x / r;    ans+=c;  } while (c / ans > MACHEP);  return (ans * ax / a);}  }
class C{  public static String generateNativeGuid(ComputeElementHBA computeElementHBA,String systemType){  return String.format("%s+%s+%s",_deviceTypeMap.get(systemType),computeElementHBA.getProtocol(),computeElementHBA.getLabel());}  }
class C{  public String value(){  return value;}  }
class C{  public static boolean intersectRaySphere(double originX,double originY,double originZ,double dirX,double dirY,double dirZ,double centerX,double centerY,double centerZ,double radiusSquared,Vector2d result){  double Lx=centerX - originX;  double Ly=centerY - originY;  double Lz=centerZ - originZ;  double tca=Lx * dirX + Ly * dirY + Lz * dirZ;  double d2=Lx * Lx + Ly * Ly + Lz * Lz - tca * tca;  if (d2 > radiusSquared)   return false;  double thc=Math.sqrt(radiusSquared - d2);  double t0=tca - thc;  double t1=tca + thc;  if (t0 < t1 && t1 >= 0.0) {    result.x=t0;    result.y=t1;    return true;  }  return false;}  }
class C{  public void run(){  Thread currentThread=Thread.currentThread();  String oldName=currentThread.getName();  if (newName != null) {    setName(currentThread,newName);  }  try {    runnable.run();  }  finally {    setName(currentThread,oldName);  }}  }
class C{  public JSONWriter value(boolean b) throws JSONException {  return this.append(b ? "true" : "false");}  }
class C{  public TextArea findTextAreaText(String text){  return TestUtils.findTextAreaText(text);}  }
class C{  public static String typeToStringShort(int type){  String result;switch (type) {case NUMERIC:    result="Num";  break;case NOMINAL:result="Nom";break;case STRING:result="Str";break;case DATE:result="Dat";break;case RELATIONAL:result="Rel";break;default :result="???";}return result;}  }
class C{  public ActionEvent(Command source,Type type,Component sourceComponent,int x,int y){  this.source=source;  this.sourceComponent=sourceComponent;  this.keyEvent=x;  this.y=y;  this.trigger=type;}  }
class C{  @Override protected void doAction(){  showCertificateSelectedEntry();}  }
class C{  public void list(){  System.out.println(toString());  if (m_columns == null)   return;  for (int i=0; i < m_columns.length; i++)   System.out.println("- " + m_columns[i].toString());}  }
class C{  public BRUpdateableTest(String name){  super(name);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Box render(){  if (!rendered) {    setDocument(loadDocument(sourceDocument),sourceDocumentBase,new XhtmlNamespaceHandler());    layout(this.width);    height=this.height == -1 ? root.getHeight() : this.height;    BufferedImage outputImage=createBufferedImage(this.width,height);    outputDevice=new Java2DOutputDevice(outputImage);    Graphics2D newG=(Graphics2D)outputImage.getGraphics();    try {      if (renderingHints != null) {        newG.getRenderingHints().putAll(renderingHints);      }      RenderingContext rc=sharedContext.newRenderingContextInstance();      rc.setFontContext(new Java2DFontContext(newG));      rc.setOutputDevice(outputDevice);      sharedContext.getTextRenderer().setup(rc.getFontContext());      root.getLayer().paint(rc);    }  finally {      if (newG != null)       newG.dispose();    }    rendered=true;  }  return root;}  }
class C{  private static void loadPluginsFromClassLoader(ClassLoader classLoader){  ServiceLoader<GDSFactoryPlugin> pluginLoader=ServiceLoader.load(GDSFactoryPlugin.class,classLoader);  for (  GDSFactoryPlugin plugin : pluginLoader) {    registerPlugin(plugin);  }}  }
class C{  private void saveProperties(){  if (isDataValid()) {    control.setTrackSlider(trackBox.isSelected());    control.setSwitchSliderFunction(functionSwitchSlider.getText());    control.setSpeedController(_displaySlider);    finishEdit();  }}  }
class C{  @Override protected boolean isZoneLevelResource(){  return false;}  }
class C{  public void encode(DerOutputStream out,byte tag) throws IOException {  byte[] bytes=id.toByteArray();  int excessBits=bytes.length * 8 - id.length();  out.write(tag);  out.putLength(bytes.length + 1);  out.write(excessBits);  out.write(bytes);}  }
class C{  public void afterLast(){  if (this.rows.size() > 0) {    this.index=this.rows.size();  }}  }
class C{  public void addResult(Result r){  this.results.addLast(r);}  }
class C{  public static void detectLanguage(String sourceText,PrintStream out){  Translate translate=createTranslateService();  List<Detection> detections=translate.detect(ImmutableList.of(sourceText));  System.out.println("Language(s) detected:");  for (  Detection detection : detections) {    out.printf("\t%s\n",detection);  }}  }
class C{  private void privateRun(HttpServletRequest httpServletRequest,HttpServletResponse httpServletResponse){}  }
class C{  public static String xmlCData(String data){  if (data.contains("]]>")) {    return xmlText(data);  }  boolean newline=data.endsWith("\n");  data="<![CDATA[" + data + "]]>";  return newline ? data + "\n" : data;}  }
class C{  public synchronized boolean put(long fp){  int index=(int)(fp & this.mask);  long[] list=this.table[index];  if (list != null) {    int listlen=list.length;    for (int i=0; i < listlen; i++) {      if (list[i] == fp)       return true;    }  }  if (count >= threshold) {    rehash();    index=(int)(fp & this.mask);    list=this.table[index];  }  int len=(list == null ? 0 : list.length);  long[] newList=new long[len + 1];  if (list != null)   System.arraycopy(list,0,newList,0,len);  newList[len]=fp;  this.table[index]=newList;  this.count++;  return false;}  }
class C{  public Complex add(Complex secondComplex){  return new Complex(a + secondComplex.a,b + secondComplex.b);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public JMenuItem add(JMenuItem menuItem){  ensurePopupMenuCreated();  return popupMenu.add(menuItem);}  }
class C{  public static Servo servo(int pwmPort){  return pwmRegistrar.fetch(pwmPort,Servo.class,null);}  }
class C{  @Override public Range findRangeBounds(XYDataset dataset){  if (dataset != null) {    if (this.renderAsPercentages) {      return new Range(0.0,1.0);    } else {      return DatasetUtilities.findStackedRangeBounds((TableXYDataset)dataset);    }  } else {    return null;  }}  }
class C{  public static boolean isWhiteSpace(String s){  if (null != s) {    int n=s.length();    for (int i=0; i < n; i++) {      if (!isWhiteSpace(s.charAt(i)))       return false;    }  }  return true;}  }
class C{  public KafkaMessageListenerContainer(ConsumerFactory<K,V> consumerFactory,ContainerProperties containerProperties,TopicPartitionInitialOffset... topicPartitions){  super(containerProperties);  Assert.notNull(consumerFactory,"A ConsumerFactory must be provided");  this.consumerFactory=consumerFactory;  if (topicPartitions != null) {    this.topicPartitions=Arrays.copyOf(topicPartitions,topicPartitions.length);  } else {    this.topicPartitions=containerProperties.getTopicPartitions();  }}  }
class C{  public static <T>ObjectAnimator ofInt(T target,Property<T,Integer> property,int... values){  ObjectAnimator anim=new ObjectAnimator(target,property);  anim.setIntValues(values);  return anim;}  }
class C{  public void beforeResponseRead(AbstractSerialConnection port){}  }
class C{  public void postEvent(AWTEvent theEvent){  SunToolkit.flushPendingEvents(appContext);  postEventPrivate(theEvent);}  }
class C{  public ComponentBuilder color(ChatColor color){  current.setColor(color);  return this;}  }
class C{  public Class<K> keyType(){  return keyType;}  }
class C{  public DpiCalculatorDialog(){  setContentPane(contentPane);  setTitle("Android DPI Calculator");  setModal(true);  getRootPane().setDefaultButton(buttonOK);  final ActionListener escapeKeyListener=null;  getRootPane().registerKeyboardAction(escapeKeyListener,KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0),JComponent.WHEN_IN_FOCUSED_WINDOW);  initLists();  initListeners();  pack();  setLocationRelativeTo(null);  setVisible(true);}  }
class C{  public OkHttp3Downloader(File cacheDir){  this(cacheDir,calculateDiskCacheSize(cacheDir));}  }
class C{  public void removeTabsFocusListener(FocusListener listener){  if (focusListeners != null) {    focusListeners.removeListener(listener);  }}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  @SuppressWarnings("unchecked") public static <A,X extends Throwable>TryTSeq<A,X> fromAnyM(final AnyMSeq<A> anyM){  return (TryTSeq<A,X>)of(anyM.map(null));}  }
class C{  public void writeBytes(byte[] data,int offset,int len) throws IOException {  _writeBytes(data,offset,len);}  }
class C{  public void testGetUnsignedInt32(){  byte[] bytes={16,0,0,1,-1,-1,-1,-1,0,0,0,0,0,0,0,-128,-1,-1,-1,127};  MySQLPacket array=new MySQLPacket(bytes.length - MySQLPacket.HEADER_LENGTH,bytes,(byte)1);  assertEquals(0xffffffffL,array.getUnsignedInt32());  assertEquals(0x0,array.getUnsignedInt32());  assertEquals(0x80000000L,array.getUnsignedInt32());  assertEquals(0x7FFFFFFFL,array.getUnsignedInt32());}  }
class C{  public byte[] encrypt(byte[] baseKey,int usage,byte[] ivec,byte[] new_ivec,byte[] plaintext,int start,int len) throws GeneralSecurityException, KrbCryptoException {  if (!KeyUsage.isValid(usage)) {    throw new GeneralSecurityException("Invalid key usage number: " + usage);  }  byte[] output=encryptCTS(baseKey,usage,ivec,new_ivec,plaintext,start,len,true);  return output;}  }
class C{  public static String format(Timestamp timestamp,String pattern){  if (timestamp == null) {    throw new IllegalArgumentException("Timestamp cannot be null");  }  if (pattern == null) {    throw new IllegalArgumentException("Pattern cannot be null");  }  SimpleDateFormat dateFormat=new SimpleDateFormat(pattern);  return dateFormat.format(timestamp);}  }
class C{  public void paintTriangle(Graphics g,int x,int y,int size,int direction,boolean isEnabled){  Color oldColor=g.getColor();  int mid, i, j;  j=0;  size=Math.max(size,2);  mid=(size / 2) - 1;  g.translate(x,y);  if (isEnabled)   g.setColor(darkShadow); else   g.setColor(shadow);switch (direction) {case NORTH:    for (i=0; i < size; i++) {      g.drawLine(mid - i,i,mid + i,i);    }  if (!isEnabled) {    g.setColor(highlight);    g.drawLine(mid - i + 2,i,mid + i,i);  }break;case SOUTH:if (!isEnabled) {g.translate(1,1);g.setColor(highlight);for (i=size - 1; i >= 0; i--) {  g.drawLine(mid - i,j,mid + i,j);  j++;}g.translate(-1,-1);g.setColor(shadow);}j=0;for (i=size - 1; i >= 0; i--) {g.drawLine(mid - i,j,mid + i,j);j++;}break;case WEST:for (i=0; i < size; i++) {g.drawLine(i,mid - i,i,mid + i);}if (!isEnabled) {g.setColor(highlight);g.drawLine(i,mid - i + 2,i,mid + i);}break;case EAST:if (!isEnabled) {g.translate(1,1);g.setColor(highlight);for (i=size - 1; i >= 0; i--) {g.drawLine(j,mid - i,j,mid + i);j++;}g.translate(-1,-1);g.setColor(shadow);}j=0;for (i=size - 1; i >= 0; i--) {g.drawLine(j,mid - i,j,mid + i);j++;}break;}g.translate(-x,-y);g.setColor(oldColor);}  }
class C{  @Override public void onAttachedToRecyclerView(RecyclerView recyclerView){  if (mRecyclerView != null && mRecyclerView != recyclerView)   Log.i(TAG,"Does not support multiple RecyclerViews now.");  mRecyclerView=recyclerView;  ifGridLayoutManager();}  }
class C{  public static StructType createStructTypeForRuntimeIterators(List runTimeIterators){  Support.Assert(runTimeIterators.size() > 1,"The number of Iterators passed should be greater than 1 to create a structSet");  int len=runTimeIterators.size();  String fieldNames[]=new String[len];  String[] indexAlternativeFieldNames=new String[len];  ObjectType fieldTypes[]=new ObjectType[len];  Iterator itr=runTimeIterators.iterator();  int i=0;  while (itr.hasNext()) {    RuntimeIterator iter=(RuntimeIterator)itr.next();    fieldNames[i]=iter.getInternalId();    indexAlternativeFieldNames[i]=iter.getIndexInternalID();    fieldTypes[i++]=iter.getElementType();  }  StructTypeImpl type=new StructTypeImpl(fieldNames,indexAlternativeFieldNames,fieldTypes);  return type;}  }
class C{  private void loadTranslations(){  if (m_translationLabel == null) {    m_translationLabel=new HashMap<String,String>();    m_translationSuffix=new HashMap<String,String>();    String sql="SELECT AD_Language, PrintName, PrintNameSuffix FROM AD_PrintFormatItem_Trl WHERE AD_PrintFormatItem_ID=?";    PreparedStatement pstmt=null;    ResultSet rs=null;    try {      pstmt=DB.prepareStatement(sql,get_TrxName());      pstmt.setInt(1,get_ID());      rs=pstmt.executeQuery();      while (rs.next()) {        m_translationLabel.put(rs.getString(1),rs.getString(2));        m_translationSuffix.put(rs.getString(1),rs.getString(3));      }    } catch (    SQLException e) {      log.log(Level.SEVERE,"loadTrl",e);    } finally {      DB.close(rs,pstmt);      rs=null;      pstmt=null;    }  }}  }
class C{  protected void addDocumentationPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_DocumentedElement_documentation_feature"),getString("_UI_PropertyDescriptor_description","_UI_DocumentedElement_documentation_feature","_UI_DocumentedElement_type"),BasePackage.Literals.DOCUMENTED_ELEMENT__DOCUMENTATION,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public static boolean isPortAvailable(final int port,int protocol,InetAddress addr){  if (protocol == SOCKET) {    if (addr == null) {      return testAllInterfaces(port);    } else {      return testOneInterface(addr,port);    }  } else   if (protocol == MULTICAST) {    MulticastSocket socket=null;    try {      socket=new MulticastSocket();      InetAddress localHost=SocketCreator.getLocalHost();      socket.setInterface(localHost);      socket.setSoTimeout(Integer.getInteger("AvailablePort.timeout",2000).intValue());      byte[] buffer=new byte[4];      buffer[0]=(byte)'p';      buffer[1]=(byte)'i';      buffer[2]=(byte)'n';      buffer[3]=(byte)'g';      InetAddress mcid=addr == null ? DistributionConfig.DEFAULT_MCAST_ADDRESS : addr;      SocketAddress mcaddr=new InetSocketAddress(mcid,port);      socket.joinGroup(mcid);      DatagramPacket packet=new DatagramPacket(buffer,0,buffer.length,mcaddr);      socket.send(packet);      try {        socket.receive(packet);        packet.getData();        return false;      } catch (      SocketTimeoutException ste) {        return true;      }catch (      Exception e) {        e.printStackTrace();        return false;      }    } catch (    java.io.IOException ioe) {      if (ioe.getMessage().equals("Network is unreachable")) {        throw new RuntimeException(LocalizedStrings.AvailablePort_NETWORK_IS_UNREACHABLE.toLocalizedString(),ioe);      }      ioe.printStackTrace();      return false;    }catch (    Exception e) {      e.printStackTrace();      return false;    } finally {      if (socket != null) {        try {          socket.close();        } catch (        Exception e) {          e.printStackTrace();        }      }    }  } else {    throw new IllegalArgumentException(LocalizedStrings.AvailablePort_UNKNOWN_PROTOCOL_0.toLocalizedString(Integer.valueOf(protocol)));  }}  }
class C{  protected boolean versionMeetsMinimum(int major,int minor) throws SQLException {  return versionMeetsMinimum(major,minor,0);}  }
class C{  public void delete() throws IOException {  close();  deleteContents(directory);}  }
class C{  public void testOfferFirst(){  LinkedBlockingDeque q=new LinkedBlockingDeque();  assertTrue(q.offerFirst(new Integer(0)));  assertTrue(q.offerFirst(new Integer(1)));}  }
class C{  public void plus(long animationDurationMS){  if (mState == FLAG_STATE_PLUS) {    return;  }  toggle(animationDurationMS);}  }
class C{  public long putIfNew(K key,long value){  return put(key,value,true);}  }
class C{  private static void copyAttributes(CatalogEntry catalogEntry,final VOCatalogEntry template){  catalogEntry.setAnonymousVisible(template.isAnonymousVisible());  catalogEntry.setVisibleInCatalog(template.isVisibleInCatalog());}  }
class C{  @Override public void writeExternal(ObjectOutput out) throws IOException {  String tid=getThreadMapping();  out.writeObject(tid);  out.writeObject(this.userTransactionServerLookupName);  out.writeObject(this.initialContextFactory);  out.writeObject(this.providerUrl);  out.writeInt(this.timeout);}  }
class C{  public void add(T element){  if (buffer != null) {    if (buffer.size() < bufferSize) {      buffer.add(element);    } else {      for (      T bufferedElement : buffer) {        this.addToCache(bufferedElement);      }      addToCache(element);      buffer=null;      bufferSize=-1;    }  } else {    addToCache(element);  }}  }
class C{  public String editScript(Script s){  conversation.begin();  this.script=new ScriptDao().findById(s.getId());  ScriptUtil.setScriptStepLabels(script);  steps=script.getScriptSteps();  saveAsName=script.getName();  if (!canEditScript()) {    messages.warn("You do not have permission to edit this script.");  }  return "success";}  }
class C{  public String reverseString(String s){  if (s == null || s.length() < 2)   return s;  int i=0;  int j=s.length() - 1;  char[] chars=s.toCharArray();  while (i < j) {    char c=chars[i];    chars[i]=chars[j];    chars[j]=c;    i++;    j--;  }  return new String(chars);}  }
class C{  public void close() throws IOException {  if (!this.closed) {    this.closed=true;    this.out.flush();  }}  }
class C{  public final Rect intersectionRectWith(Rect r){  Rect isec=null;  if (intersectsRect(r)) {    float x1=MathUtils.max(x,r.x);    float y1=MathUtils.max(y,r.y);    float x2=MathUtils.min(getRight(),r.getRight());    float y2=MathUtils.min(getBottom(),r.getBottom());    isec=new Rect(x1,y1,x2 - x1,y2 - y1);  }  return isec;}  }
class C{  public static RestorableSupport parse(String stateInXml){  if (stateInXml == null) {    String message=Logging.getMessage("nullValue.StringIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  javax.xml.parsers.DocumentBuilderFactory docBuilderFactory=javax.xml.parsers.DocumentBuilderFactory.newInstance();  try {    javax.xml.parsers.DocumentBuilder docBuilder=docBuilderFactory.newDocumentBuilder();    org.w3c.dom.Document doc=docBuilder.parse(new org.xml.sax.InputSource(new java.io.StringReader(stateInXml)));    return new RestorableSupport(doc);  } catch (  java.io.IOException e) {    String message=Logging.getMessage("generic.ExceptionAttemptingToParseStateXml",stateInXml);    Logging.logger().severe(message);    throw new IllegalArgumentException(message,e);  }catch (  org.xml.sax.SAXException e) {    String message=Logging.getMessage("generic.ExceptionAttemptingToParseStateXml",stateInXml);    Logging.logger().severe(message);    throw new IllegalArgumentException(message,e);  }catch (  javax.xml.parsers.ParserConfigurationException e) {    String message=Logging.getMessage("generic.ExceptionAttemptingToParseStateXml",stateInXml);    Logging.logger().severe(message);    throw new IllegalStateException(message,e);  }}  }
class C{  private boolean isSendableVersion(){  Version myVersion;  Version lastVersion;  try {    myVersion=new Version(FrostWireUtils.getFrostWireVersion());    lastVersion=new Version(BugSettings.LAST_ACCEPTABLE_VERSION.getValue());  } catch (  VersionFormatException vfe) {    return false;  }  return myVersion.compareTo(lastVersion) >= 0;}  }
class C{  public static Intent makeIntent(WeatherData weatherData){  return new Intent(ACTION_DISPLAY_WEATHER).setType(TYPE_WEATHER).putExtra(KEY_WEATHER_DATA,weatherData);}  }
class C{  public List<IComment> appendLocalInstructionComment(final INaviInstruction instruction,final String commentText) throws CouldntSaveDataException, CouldntLoadDataException {  return CommentManager.get(m_provider).appendLocalInstructionComment(instruction,m_codeNode,commentText);}  }
class C{  @Override protected void addSorting(final TableViewer tableViewer){  final TableViewerSorter sorter=new TableViewerSorter(tableViewer);  for (int i=0; i < columnMetadatas.length; i++) {    final ColumnMetadata columnMetadata=columnMetadatas[i];    final Comparator<Link> comparator=columnMetadata.getComparator();    if (comparator != null) {      sorter.setComparator(i,comparator);    }  }  tableViewer.setSorter(sorter);}  }
class C{  public void i(String msg){  Log.i(mTag,msg);}  }
class C{  @Override public void reset(){  buff=new byte[32];}  }
class C{  @Override public int numAttributes(){  return m_AttValues.length;}  }
class C{  public void connectionErrorOccurred(ConnectionEvent ce){  if (log != null)   log.debug("ConnectionErrorOccurred, ",ce.getException());  try {    ((FBManagedConnection)ce.getSource()).destroy();  } catch (  ResourceException e) {    if (log != null)     log.debug("further problems destroying connection: ",e);  }}  }
class C{  public DoubleMatrix3D assign(double value){  if (this.isNoView && value == 0)   this.elements.clear(); else   super.assign(value);  return this;}  }
class C{  public void testBug69452() throws Exception {  String[][] testMemUnits=new String[][]{{"k","kb","kB","K","Kb","KB"},{"m","mb","mB","M","Mb","MB"},{"g","gb","gB","G","Gb","GB"}};  com.mysql.jdbc.Connection connWithMemProps;  long[] memMultiplier=new long[]{1024,1024 * 1024,1024 * 1024 * 1024};  Field propField=com.mysql.jdbc.ConnectionPropertiesImpl.class.getDeclaredField("largeRowSizeThreshold");  propField.setAccessible(true);  Class<?> propClass=null;  for (  Class<?> nestedClass : com.mysql.jdbc.ConnectionPropertiesImpl.class.getDeclaredClasses()) {    if (nestedClass.getName().equals("com.mysql.jdbc.ConnectionPropertiesImpl$IntegerConnectionProperty")) {      propClass=nestedClass;      break;    }  }  if (propClass != null) {    Method propMethod=propClass.getDeclaredMethod("getValueAsInt");    propMethod.setAccessible(true);    for (int i=0; i < testMemUnits.length; i++) {      for (int j=0; j < testMemUnits[i].length; j++) {        connWithMemProps=(com.mysql.jdbc.Connection)getConnectionWithProps(String.format("blobSendChunkSize=1.2%1$s,largeRowSizeThreshold=1.4%1$s,locatorFetchBufferSize=1.6%1$s",testMemUnits[i][j]));        assertEquals("Memory unit '" + testMemUnits[i][j] + "'; property 'blobSendChunkSize'",(int)(memMultiplier[i] * 1.2),connWithMemProps.getBlobSendChunkSize());        assertEquals("Memory unit '" + testMemUnits[i][j] + "'; property 'largeRowSizeThreshold'","1.4" + testMemUnits[i][j],connWithMemProps.getLargeRowSizeThreshold());        assertEquals("Memory unit '" + testMemUnits[i][j] + "'; property 'largeRowSizeThreshold'",(int)(memMultiplier[i] * 1.4),((Integer)propMethod.invoke(propField.get(connWithMemProps))).intValue());        assertEquals("Memory unit '" + testMemUnits[i][j] + "'; property 'locatorFetchBufferSize'",(int)(memMultiplier[i] * 1.6),connWithMemProps.getLocatorFetchBufferSize());        connWithMemProps.close();      }    }  }}  }
class C{  protected void resetXML11() throws XNIException {  int count=fXML11Components.size();  for (int i=0; i < count; i++) {    XMLComponent c=(XMLComponent)fXML11Components.get(i);    c.reset(this);  }}  }
class C{  public String bPartner(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  Integer C_BPartner_ID=(Integer)value;  if (C_BPartner_ID == null || C_BPartner_ID.intValue() == 0)   return "";  String sql="SELECT p.AD_Language,p.C_PaymentTerm_ID," + " COALESCE(p.M_PriceList_ID,g.M_PriceList_ID) AS M_PriceList_ID, p.PaymentRule,p.POReference," + " p.SO_Description,p.IsDiscountPrinted,"+ " p.SO_CreditLimit, p.SO_CreditLimit-p.SO_CreditUsed AS CreditAvailable,"+ " l.C_BPartner_Location_ID,c.AD_User_ID,"+ " COALESCE(p.PO_PriceList_ID,g.PO_PriceList_ID) AS PO_PriceList_ID, p.PaymentRulePO,p.PO_PaymentTerm_ID "+ "FROM C_BPartner p"+ " INNER JOIN C_BP_Group g ON (p.C_BP_Group_ID=g.C_BP_Group_ID)"+ " LEFT OUTER JOIN C_BPartner_Location l ON (p.C_BPartner_ID=l.C_BPartner_ID AND l.IsBillTo='Y' AND l.IsActive='Y')"+ " LEFT OUTER JOIN AD_User c ON (p.C_BPartner_ID=c.C_BPartner_ID) "+ "WHERE p.C_BPartner_ID=? AND p.IsActive='Y'";  boolean IsSOTrx=Env.getContext(ctx,WindowNo,"IsSOTrx").equals("Y");  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,C_BPartner_ID.intValue());    rs=pstmt.executeQuery();    if (rs.next()) {      Integer ii=new Integer(rs.getInt(IsSOTrx ? "M_PriceList_ID" : "PO_PriceList_ID"));      if (!rs.wasNull())       mTab.setValue("M_PriceList_ID",ii); else {        int i=Env.getContextAsInt(ctx,"#M_PriceList_ID");        if (i != 0)         mTab.setValue("M_PriceList_ID",new Integer(i));      }      String s=rs.getString(IsSOTrx ? "PaymentRule" : "PaymentRulePO");      if (s != null && s.length() != 0) {        if (Env.getContext(ctx,WindowNo,"DocBaseType").endsWith("C"))         s="P"; else         if (IsSOTrx && (s.equals("S") || s.equals("U")))         s="P";        mTab.setValue("PaymentRule",s);      }      ii=new Integer(rs.getInt(IsSOTrx ? "C_PaymentTerm_ID" : "PO_PaymentTerm_ID"));      if (!rs.wasNull())       mTab.setValue("C_PaymentTerm_ID",ii);      int locID=rs.getInt("C_BPartner_Location_ID");      if (C_BPartner_ID.toString().equals(Env.getContext(ctx,WindowNo,Env.TAB_INFO,"C_BPartner_ID"))) {        String loc=Env.getContext(ctx,WindowNo,Env.TAB_INFO,"C_BPartner_Location_ID");        if (loc.length() > 0)         locID=Integer.parseInt(loc);      }      if (locID == 0)       mTab.setValue("C_BPartner_Location_ID",null); else       mTab.setValue("C_BPartner_Location_ID",new Integer(locID));      int contID=rs.getInt("AD_User_ID");      if (C_BPartner_ID.toString().equals(Env.getContext(ctx,WindowNo,Env.TAB_INFO,"C_BPartner_ID"))) {        String cont=Env.getContext(ctx,WindowNo,Env.TAB_INFO,"AD_User_ID");        if (cont.length() > 0)         contID=Integer.parseInt(cont);      }      if (contID == 0)       mTab.setValue("AD_User_ID",null); else       mTab.setValue("AD_User_ID",new Integer(contID));      if (IsSOTrx) {        double CreditLimit=rs.getDouble("SO_CreditLimit");        if (CreditLimit != 0) {          double CreditAvailable=rs.getDouble("CreditAvailable");          if (!rs.wasNull() && CreditAvailable < 0)           mTab.fireDataStatusEEvent("CreditLimitOver",DisplayType.getNumberFormat(DisplayType.Amount).format(CreditAvailable),false);        }      }      s=rs.getString("POReference");      if (s != null && s.length() != 0)       mTab.setValue("POReference",s); else       mTab.setValue("POReference",null);      s=rs.getString("SO_Description");      if (s != null && s.trim().length() != 0)       mTab.setValue("Description",s);      s=rs.getString("IsDiscountPrinted");      if (s != null && s.length() != 0)       mTab.setValue("IsDiscountPrinted",s); else       mTab.setValue("IsDiscountPrinted","N");    }  } catch (  SQLException e) {    log.log(Level.SEVERE,"bPartner",e);    return e.getLocalizedMessage();  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  return "";}  }
class C{  @Override public Object draw(Graphics2D g2,Rectangle2D area,Object params){  if (this.content == null) {    return null;  }  area=trimMargin(area);  drawBorder(g2,area);  if (this.text.equals("")) {    return null;  }  ChartEntity entity=null;  if (params instanceof EntityBlockParams) {    EntityBlockParams p=(EntityBlockParams)params;    if (p.getGenerateEntities()) {      entity=new TitleEntity(area,this,this.toolTipText,this.urlText);    }  }  area=trimBorder(area);  if (this.backgroundPaint != null) {    g2.setPaint(this.backgroundPaint);    g2.fill(area);  }  area=trimPadding(area);  RectangleEdge position=getPosition();  if (position == RectangleEdge.TOP || position == RectangleEdge.BOTTOM) {    drawHorizontal(g2,area);  } else   if (position == RectangleEdge.LEFT || position == RectangleEdge.RIGHT) {    drawVertical(g2,area);  }  BlockResult result=new BlockResult();  if (entity != null) {    StandardEntityCollection sec=new StandardEntityCollection();    sec.add(entity);    result.setEntityCollection(sec);  }  return result;}  }
class C{  EcmaError(String errorName,String errorMessage,String sourceName,int lineNumber,String lineSource,int columnNumber){  recordErrorOrigin(sourceName,lineNumber,lineSource,columnNumber);  this.errorName=errorName;  this.errorMessage=errorMessage;}  }
class C{  public static AVList readGeoKeys(GeotiffReader reader,int imageIndex,AVList values) throws IOException {  if (null == values)   values=new AVListImpl();  if (null == reader)   return values;  return reader.copyMetadataTo(imageIndex,values);}  }
class C{  private Map<URI,Volume> queryVolumes(final List<VolumeDescriptor> volumeDescriptors){  List<URI> volumeURIs=VolumeDescriptor.getVolumeURIs(volumeDescriptors);  List<Volume> volumes=dbClient.queryObject(Volume.class,volumeURIs);  Map<URI,Volume> volumeMap=new HashMap<URI,Volume>();  for (  Volume volume : volumes) {    if (volume != null) {      volumeMap.put(volume.getId(),volume);    }  }  return volumeMap;}  }
class C{  public static void extractSingleHighCardDims(byte[] highCardArr,int index,int highCardinalityCount,ByteBuffer outBuffer){  ByteBuffer buff=null;  short secIndex=0;  short firstIndex=0;  int length;  if (index == highCardinalityCount - 1) {    buff=ByteBuffer.wrap(highCardArr,(index * 2) + 2,2);  } else {    buff=ByteBuffer.wrap(highCardArr,(index * 2) + 2,4);  }  firstIndex=buff.getShort();  if (index == highCardinalityCount - 1) {    secIndex=(short)highCardArr.length;  } else {    secIndex=buff.getShort();  }  length=secIndex - firstIndex;  outBuffer.position(firstIndex);  outBuffer.limit(outBuffer.position() + length);}  }
class C{  private static void checkEventType(String eventSetName,Method listenerMethod) throws IntrospectionException {  Class<?>[] params=listenerMethod.getParameterTypes();  String firstParamTypeName=null;  String eventTypeName=prepareEventTypeName(eventSetName);  if (params.length > 0) {    firstParamTypeName=extractShortClassName(params[0].getName());  }  if (firstParamTypeName == null || !firstParamTypeName.equals(eventTypeName)) {    throw new IntrospectionException(Messages.getString("beans.51",listenerMethod.getName(),eventTypeName));  }}  }
class C{  void remove(Key key){  cache.remove(key);}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) @Override public ODataResponse readEntitySet(GetEntitySetUriInfo uri_info,String content_type) throws ODataException {  int maxrows=configurationManager.getOdataConfiguration().getMaxRows();  List<Map<String,Object>> building=new ArrayList<Map<String,Object>>();  boolean doPagination=false;  int skip=(uri_info.getSkip() == null) ? 0 : uri_info.getSkip();  int top=(uri_info.getTop() == null) ? maxrows : uri_info.getTop();  EdmEntitySet targetES=uri_info.getTargetEntitySet();  KeyPredicate startKP=(uri_info.getKeyPredicates().size() == 0) ? null : uri_info.getKeyPredicates().get(0);  Navigator<Map> navigator=new Navigator<Map>(uri_info.getStartEntitySet(),startKP,uri_info.getNavigationSegments(),Map.class);  if (targetES.getName().equals(V1Model.PRODUCT.getName()) || targetES.getName().equals(V1Model.COLLECTION.getName()) || targetES.getName().equals(V1Model.NODE.getName())|| targetES.getName().equals(V1Model.USER.getName())|| targetES.getName().equals(V1Model.CONNECTION.getName())) {    doPagination=true;  } else   if (!targetES.getName().equals(V1Model.ATTRIBUTE.getName()) && !targetES.getName().equals(V1Model.CLASS.getName()) && !targetES.getName().equals(V1Model.SYNCHRONIZER.getName())&& !targetES.getName().equals(V1Model.NETWORK.getName())&& !targetES.getName().equals(V1Model.NETWORKSTATISTIC.getName())&& !targetES.getName().equals(V1Model.RESTRICTION.getName())&& !targetES.getName().equals(V1Model.SYSTEM_ROLE.getName())&& !targetES.getName().equals(V1Model.USER_SYNCHRONIZER.getName())) {    throw new ODataException("Target EntitySet not allowed.");  }  Map results=navigator.navigate();  int inlineCount=results.size();  FilterExpression filter=uri_info.getFilter();  OrderByExpression orderBy=uri_info.getOrderBy();  if (uri_info.getInlineCount() != null && uri_info.getInlineCount().equals(InlineCount.ALLPAGES) && results instanceof SubMap && filter != null) {    SubMapBuilder smb=((SubMap)results).getSubMapBuilder();    smb.setFilter(filter);    results=smb.build();    inlineCount=results.size();  }  if (results instanceof SubMap && (filter != null || orderBy != null || skip != 0 || top != 0)) {    SubMapBuilder smb=((SubMap)results).getSubMapBuilder();    smb.setFilter(filter).setOrderBy(orderBy);    smb.setSkip(skip);    smb.setTop(top);    results=smb.build();  }  try {    if (uri_info.getFormat() != null && uri_info.getFormat().equals(MetalinkBuilder.CONTENT_TYPE) && targetES.getName().equals(V1Model.PRODUCT.getName())) {      List<Product> res=new ArrayList<Product>();      Iterator it=results.values().iterator();      while (it.hasNext()) {        Object o=it.next();        res.add((Product)o);      }      if (it instanceof Closeable) {        try {          ((Closeable)it).close();        } catch (        IOException e) {          logger.warn("Cannot close iterator:",e);        }      }      return ODataResponse.fromResponse(EntityProvider.writeBinary(MetalinkBuilder.CONTENT_TYPE,makeMetalinkDocument(res).getBytes("UTF-8"))).header("Content-Disposition","inline; filename=products" + MetalinkBuilder.FILE_EXTENSION).build();    }  } catch (  UnsupportedEncodingException e) {    throw new ODataException(e);  }  Iterator<V1Entity> it=results.values().iterator();  int i;  for (i=0; it.hasNext(); i++) {    V1Entity o=it.next();    building.add(o.toEntityResponse(makeLink().toString()));  }  if (it instanceof Closeable) {    try {      ((Closeable)it).close();    } catch (    IOException e) {      logger.warn("Cannot close iterator:",e);    }  }  ODataEntityProviderPropertiesBuilder builder=EntityProviderWriteProperties.serviceRoot(makeLink());  if (doPagination && i == top && it.hasNext()) {    i+=skip;    builder.nextLink(makeNextLink(i));  }  String targetName=uri_info.getTargetEntitySet().getName();  ExpandSelectTreeCreator creator=new ExpandSelectTreeCreator(uri_info.getSelect(),uri_info.getExpand());  builder.expandSelectTree(creator.create());  builder.callbacks(V1Model.getEntitySet(targetName).getCallbacks(makeLink(false)));  if (uri_info.getInlineCount() != null && uri_info.getInlineCount().equals(InlineCount.ALLPAGES)) {    builder.inlineCountType(uri_info.getInlineCount());    builder.inlineCount(inlineCount);  }  return EntityProvider.writeFeed(content_type,targetES,building,builder.build());}  }
class C{  public ResourceAccessException(String uri,String message,Throwable cause){  super(message,cause);  if (uri == null) {    throw new NullPointerException("Request URI must not be null");  }  this.uri=uri;}  }
class C{  public void removeLayoutComponent(Component comp){synchronized (comp.getTreeLock()) {    if (comp == chart) {      chart=null;    } else     if (comp == title) {      title=null;    } else     if (comp == xLabel) {      xLabel=null;    } else     if (comp == yLabel) {      yLabel=null;    }  }}  }
class C{  public static byte[] I2OSP(int x){  byte[] result=new byte[4];  result[0]=(byte)x;  result[1]=(byte)(x >>> 8);  result[2]=(byte)(x >>> 16);  result[3]=(byte)(x >>> 24);  return result;}  }
class C{  @Override public <T extends DataObject>Iterator<T> findByNativeGuid(Class<T> clazz,String nativeGuid){  return join(clazz,"one","nativeGuid",nativeGuid).go().iterator("one");}  }
class C{  private void allocateAndResizeList(RawByteCache cache,int localBufferSize,int size1,int size2) throws IOException {  LargeObjectArray<SampleObject> loa=new LargeObjectArray<SampleObject>(cache,localBufferSize);  List<SampleObject> originals=createObjectList(loa,size1);  logger.info("Pre-resize list added: size=" + size1 + " cache: "+ cache.toString());  loa.resize(size2);  logger.info("List resized: size=" + size1 + " cache: "+ cache.toString());  Assert.assertEquals("Resized list size",size2,loa.size());  LargeObjectScanner<SampleObject> scanner=loa.scanner();  for (int i=0; i < size2; i++) {    SampleObject original=originals.get(i);    Assert.assertTrue("Scanner has available object: iteration=" + i,scanner.hasNext());    SampleObject stored=scanner.next();    Assert.assertEquals("Original vs. stored object: object=" + original,original,stored);  }  Assert.assertFalse("At end of the large array",scanner.hasNext());  loa.release();}  }
class C{  public static void gcd(int a[],int b[],int gcd[]){  if (isZero(a)) {    assign(gcd,a);    return;  }  if (isZero(b)) {    assign(gcd,b);    return;  }  a=copy(a);  b=copy(b);  while (!isZero(b)) {    if (compareTo(a,b) > 0) {      subtract(a,b,gcd,new int[1]);      assign(a,gcd);    } else {      subtract(b,a,gcd,new int[1]);      assign(b,gcd);    }  }  assign(gcd,a);}  }
class C{  public boolean hasField(final int number){  if (number == 0) {    throw new IllegalArgumentException("Zero is not a valid field number.");  }  return number == lastFieldNumber || fields.containsKey(number);}  }
class C{  public static double logcdf(double x,double k,double theta,double shift){  x=(x - shift);  if (x <= 0.) {    return 0.;  }  return GammaDistribution.logregularizedGammaP(k,Math.log1p(x) * theta);}  }
class C{  private ByteBuffer rawPacket(byte magic,byte opCode,byte[] opaque,@Nullable byte[] key,@Nullable byte[] val,@Nullable byte[] extras){  ByteBuffer res=ByteBuffer.allocate(1024);  res.put(magic);  res.put(opCode);  int keyLen=key == null ? 0 : key.length;  int extrasLen=extras == null ? 0 : extras.length;  int valLen=val == null ? 0 : val.length;  res.putShort((short)keyLen);  res.put((byte)extrasLen);  res.put((byte)0);  res.putShort((short)0);  res.putInt(keyLen + extrasLen + valLen);  res.put(opaque);  res.putLong(0);  if (extrasLen > 0)   res.put(extras);  if (keyLen > 0)   res.put(key);  if (valLen > 0)   res.put(val);  res.flip();  return res;}  }
class C{  protected void sequence_ClassExtendsClause_ClassImplementsList_Members_N4ClassExpression(ISerializationContext context,N4ClassExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  @Override public String toString(){  return getDescriptor();}  }
class C{  public static void hideSoftKeyboardFromFocusedView(final Activity activity){  if (activity == null)   return;  final InputMethodManager imm=(InputMethodManager)activity.getSystemService(Context.INPUT_METHOD_SERVICE);  final View focusedView=activity.getWindow().getCurrentFocus();  if (focusedView != null)   imm.hideSoftInputFromWindow(focusedView.getWindowToken(),0);}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public static boolean isImageCached(final URL url){  return isImageCached(url.toString());}  }
class C{  private void parseDebugConfig(final Node node,final ConfigSettings config){  String name;  Boolean value;  Node nnode;  NodeList list=node.getChildNodes();  int length=list.getLength();  for (int i=0; i < length; i++) {    nnode=list.item(i);    name=nnode.getNodeName().toUpperCase();    if (name.equals(KEY_VERIFICATION_DIFF)) {      value=Boolean.parseBoolean(nnode.getChildNodes().item(0).getNodeValue());      config.setConfigParameter(ConfigurationKeys.VERIFICATION_DIFF,value);    } else     if (name.equals(KEY_VERIFICATION_ENCODING)) {      value=Boolean.parseBoolean(nnode.getChildNodes().item(0).getNodeValue());      config.setConfigParameter(ConfigurationKeys.VERIFICATION_ENCODING,value);    } else     if (name.equals(KEY_STATISTICAL_OUTPUT)) {      value=Boolean.parseBoolean(nnode.getChildNodes().item(0).getNodeValue());      config.setConfigParameter(ConfigurationKeys.MODE_STATISTICAL_OUTPUT,value);    } else     if (name.equals(SUBSECTION_DEBUG_OUTPUT)) {      parseDebugOutputConfig(nnode,config);    }  }}  }
class C{  default B addCanPlaceOnMaterials(final Collection<BlockMaterialData> materials){  this.meta().addCanPlaceOnMaterials(materials);  return this.getBuilder();}  }
class C{  public boolean isStriped(){  return striped;}  }
class C{  public static boolean isSessionTransactional(WriteTranSession session,TransactionManager transactionManager){  if (transactionManager == null) {    return false;  }  WriteTranSessionHolder writeTranSessionHolder=(WriteTranSessionHolder)TransactionSynchronizationManager.getResource(transactionManager);  return (writeTranSessionHolder != null && writeTranSessionHolder.getWriteTranSession() == session);}  }
class C{  private boolean isParsableSetter(IMethod method){  StringBuffer signature=new StringBuffer();  for (  String paramType : method.getParameterTypes()) {    if (signature.length() > 0) {      signature.append(',');    }    String qualifier=Signature.getSignatureQualifier(paramType);    if (qualifier.length() > 0) {      signature.append(qualifier);      signature.append('.');    }    signature.append(Signature.getSignatureSimpleName(paramType));  }  return PARSABLE_ARGS.contains(signature.toString());}  }
class C{  public CharSequence subSequence(int start,int end){  return new SpannableStringBuilder(this,start,end);}  }
class C{  public void open(){  this.open=true;  put("open","");}  }
class C{  public static String toString(GenericKeyczar input){  return gson.toJson(input);}  }
class C{  List<Declaration> declarations(){  return Collections.unmodifiableList(stackMap);}  }
class C{  public EventBus(){  this("default");}  }
class C{  @GET @Path("token") @Produces(MediaType.APPLICATION_JSON) @RolesAllowed({"user","temp_user"}) public OAuthToken token(@Required @QueryParam("oauth_provider") String oauthProvider) throws ServerException, BadRequestException, NotFoundException, ForbiddenException {  OAuthAuthenticator provider=getAuthenticator(oauthProvider);  final User user=EnvironmentContext.getCurrent().getUser();  try {    final OAuthToken token=provider.getToken(user.getId());    if (token != null) {      return token;    }    throw new NotFoundException("OAuth token for user " + user.getId() + " was not found");  } catch (  IOException e) {    throw new ServerException(e.getLocalizedMessage(),e);  }}  }
class C{  public ExceptionQueuedEventContext(FacesContext context,Throwable thrown){  this(context,thrown,null,null);}  }
class C{  protected TypeBuilderListener(){  this(new HashMap<>());}  }
class C{  public TermsBuilder exclude(String[] terms){  if (excludePattern != null) {    throw new IllegalArgumentException("exclude clause must be an array of exact values or a regex, not both");  }  this.excludeTerms=terms;  return this;}  }
class C{  public static boolean showGuidelines(){  if ((Math.abs(Edge.LEFT.getCoordinate() - Edge.RIGHT.getCoordinate()) < DEFAULT_SHOW_GUIDELINES_LIMIT) || (Math.abs(Edge.TOP.getCoordinate() - Edge.BOTTOM.getCoordinate()) < DEFAULT_SHOW_GUIDELINES_LIMIT))   return false; else   return true;}  }
class C{  public static Date stringToDate(String dateString) throws ParseException {  try {    return TL_FORMATS.get()[dateString.length()].parse(dateString);  } catch (  Exception e) {    throw new ParseException("Input is not a valid date string: " + dateString,0);  }}  }
class C{  @CanIgnoreReturnValue @Override public int add(E element,int occurrences){  checkNotNull(element);  if (occurrences == 0) {    return count(element);  }  CollectPreconditions.checkPositive(occurrences,"occurences");  while (true) {    AtomicInteger existingCounter=Maps.safeGet(countMap,element);    if (existingCounter == null) {      existingCounter=countMap.putIfAbsent(element,new AtomicInteger(occurrences));      if (existingCounter == null) {        return 0;      }    }    while (true) {      int oldValue=existingCounter.get();      if (oldValue != 0) {        try {          int newValue=IntMath.checkedAdd(oldValue,occurrences);          if (existingCounter.compareAndSet(oldValue,newValue)) {            return oldValue;          }        } catch (        ArithmeticException overflow) {          throw new IllegalArgumentException("Overflow adding " + occurrences + " occurrences to a count of "+ oldValue);        }      } else {        AtomicInteger newCounter=new AtomicInteger(occurrences);        if ((countMap.putIfAbsent(element,newCounter) == null) || countMap.replace(element,existingCounter,newCounter)) {          return 0;        }        break;      }    }  }}  }
class C{  public void buildClassifier(Instances data){}  }
class C{  public void sendMessage(String queue,String message) throws UnsupportedOperationException, AmazonClientException, AmazonServiceException {  if (!queueUrlMap.containsKey(queue)) {    queueUrlMap.put(queue,amazonSQSClient.getQueueUrl(queue).getQueueUrl());  }  amazonSQSClient.sendMessage(queueUrlMap.get(queue),message);}  }
class C{  public Spring(ForceItem fi1,ForceItem fi2,float k,float len){  item1=fi1;  item2=fi2;  coeff=k;  length=len;}  }
class C{  public void put(DoubleMinMax val){  min=val.min < min ? val.min : min;  max=val.max > max ? val.max : max;}  }
class C{  public JCIdent Super(Type t,TypeSymbol owner){  return Ident(new VarSymbol(FINAL,names._super,t,owner));}  }
class C{  public void updateListIndex(boolean updateSelectionOnly){  int rowIndex=gridTab.isOpen() ? gridTab.getCurrentRow() : -1;  if (pageSize > 0) {    if (paging.getTotalSize() != gridTab.getRowCount())     paging.setTotalSize(gridTab.getRowCount());    int pgIndex=rowIndex % pageSize;    int pgNo=(rowIndex - pgIndex) / pageSize;    boolean pgChange=false;    if (listModel.getPage() != pgNo) {      listModel.setPage(pgNo);      pgChange=true;    }    if (paging.getActivePage() != pgNo) {      paging.setActivePage(pgNo);    }    if (listbox.getSelectedIndex() != pgIndex) {      if (!updateSelectionOnly) {        renderer.stopEditing(false);        if (!pgChange) {          listModel.updateComponent(listbox.getSelectedIndex());        }        listModel.updateComponent(pgIndex);      }      listbox.setSelectedIndex(pgIndex);    }  } else {    if (listbox.getSelectedIndex() != rowIndex) {      if (!updateSelectionOnly) {        renderer.stopEditing(false);        listModel.updateComponent(listbox.getSelectedIndex());        listModel.updateComponent(rowIndex);      }      listbox.setSelectedIndex(rowIndex);    }  }}  }
class C{  private String[] checkCredentials(Object credentials){  if (!(credentials instanceof String[])) {    if (credentials == null) {      throw new SecurityException("Credentials required");    }    throw new SecurityException("Credentials should be String[]");  }  final String[] aCredentials=(String[])credentials;  return aCredentials;}  }
class C{  public CommitmentTypeQualifier(ASN1ObjectIdentifier commitmentTypeIdentifier,ASN1Encodable qualifier){  this.commitmentTypeIdentifier=commitmentTypeIdentifier;  this.qualifier=qualifier;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Item peek(){  if (isEmpty())   throw new NoSuchElementException("Stack underflow");  return first.item;}  }
class C{  public synchronized Relationship addWeakRelationship(Primitive type,Vertex target,float correctnessMultiplier){  return addWeakRelationship(this.network.createVertex(type),target,correctnessMultiplier);}  }
class C{  VPlexDistributedDeviceInfo findDistributedDevice(String deviceName,boolean retry) throws VPlexApiException {  s_logger.info("Find distributed device with name {}",deviceName);  int retryCount=0;  VPlexDistributedDeviceInfo distributedDeviceInfo=null;  while (++retryCount <= VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES) {    try {      List<VPlexDistributedDeviceInfo> deviceInfoList=getDistributedDeviceInfo();      for (      VPlexDistributedDeviceInfo deviceInfo : deviceInfoList) {        s_logger.info("Distributed Device Info: {}",deviceInfo.toString());        if (deviceInfo.getName().equals(deviceName)) {          s_logger.info("Found distributed device {}",deviceName);          distributedDeviceInfo=deviceInfo;          break;        }      }      if ((distributedDeviceInfo != null) || (!retry) || (retryCount >= VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES)) {        break;      } else {        s_logger.warn("Distributed device not found on try {} of {}",retryCount,VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES);        VPlexApiUtils.pauseThread(VPlexApiConstants.FIND_NEW_ARTIFACT_SLEEP_TIME_MS);      }    } catch (    VPlexApiException vae) {      if ((retry) && (retryCount < VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES)) {        s_logger.error(String.format("Exception finding distributed device on try %d of %d",retryCount,VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES),vae);        VPlexApiUtils.pauseThread(VPlexApiConstants.FIND_NEW_ARTIFACT_SLEEP_TIME_MS);      } else {        throw vae;      }    }catch (    Exception e) {      if ((retry) && (retryCount < VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES)) {        s_logger.error(String.format("Exception finding distributed device on try %d of %d",retryCount,VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES),e);        VPlexApiUtils.pauseThread(VPlexApiConstants.FIND_NEW_ARTIFACT_SLEEP_TIME_MS);      } else {        throw e;      }    }  }  return distributedDeviceInfo;}  }
class C{  private File jarEntryAsFile(JarFile jarFile,JarEntry jarEntry) throws IOException {  InputStream input=null;  OutputStream output=null;  try {    String name=jarEntry.getName().replace('/','_');    int i=name.lastIndexOf('.');    String extension=i > -1 ? name.substring(i) : "";    File file=File.createTempFile(name.substring(0,name.length() - extension.length()) + ".",extension);    file.deleteOnExit();    input=jarFile.getInputStream(jarEntry);    output=new FileOutputStream(file);    byte[] buffer=new byte[4096];    int readCount=input.read(buffer);    while (readCount != -1) {      output.write(buffer,0,readCount);      readCount=input.read(buffer);    }    return file;  }  finally {    close(input);    close(output);  }}  }
class C{  protected void initialize(Element arrayE) throws Exception {  m_indices=new ArrayList<Integer>();  String arrayS=arrayE.getTagName();  String entriesName=null;  if (arrayS.equals(ArrayType.REAL_SPARSE.toString())) {    m_type=ArrayType.REAL_SPARSE;    entriesName="REAL-Entries";  } else {    m_type=ArrayType.INT_SPARSE;    entriesName="INT-Entries";  }  String N=arrayE.getAttribute("n");  if (N != null && N.length() > 0) {    m_numValues=Integer.parseInt(N);  }  NodeList v=arrayE.getElementsByTagName(entriesName);  if (v == null || v.getLength() == 0) {    m_numNonZero=0;  } else {    Element entries=(Element)v.item(0);    String contents=entries.getChildNodes().item(0).getNodeValue();    StringReader sr=new StringReader(contents);    StreamTokenizer st=new StreamTokenizer(sr);    st.resetSyntax();    st.whitespaceChars(0,' ');    st.wordChars(' ' + 1,'\u00FF');    st.whitespaceChars(' ',' ');    st.quoteChar('"');    st.quoteChar('\'');    st.nextToken();    while (st.ttype != StreamTokenizer.TT_EOF && st.ttype != StreamTokenizer.TT_EOL) {      m_values.add(st.sval);      st.nextToken();    }    NodeList i=arrayE.getElementsByTagName("Indices");    Element indices=(Element)i.item(0);    contents=indices.getChildNodes().item(0).getNodeValue();    sr=new StringReader(contents);    st=new StreamTokenizer(sr);    st.resetSyntax();    st.whitespaceChars(0,' ');    st.wordChars(' ' + 1,'\u00FF');    st.whitespaceChars(' ',' ');    st.quoteChar('"');    st.quoteChar('\'');    st.nextToken();    while (st.ttype != StreamTokenizer.TT_EOF && st.ttype != StreamTokenizer.TT_EOL) {      Integer newInt=new Integer(Integer.parseInt(st.sval) - 1);      m_indices.add(newInt);      st.nextToken();    }    m_numNonZero=m_indices.size();  }}  }
class C{  public AbstractTimer(final String name){  if (name != null && name.contains(" ")) {    throw new IllegalArgumentException("Name contains spaces:" + name);  }  mName=name;}  }
class C{  @Override public void afterPropertiesSet(){  try {    dao=DaoFactory.createDao(connectionSource,ReplayFile.class);    statusDao=DaoFactory.createDao(connectionSource,UploadStatus.class);  } catch (  SQLException e) {    throw new RuntimeException(e);  }}  }
class C{  MemberName compileToBytecode(){  if (vmentry != null && isCompiled) {    return vmentry;  }  MethodType invokerType=methodType();  assert (vmentry == null || vmentry.getMethodType().basicType().equals(invokerType));  try {    vmentry=InvokerBytecodeGenerator.generateCustomizedCode(this,invokerType);    if (TRACE_INTERPRETER)     traceInterpreter("compileToBytecode",this);    isCompiled=true;    return vmentry;  } catch (  Error|Exception ex) {    throw newInternalError(this.toString(),ex);  }}  }
class C{  public ImmutableSet<BaseType> updateType(final BaseType baseType){  Preconditions.checkNotNull(baseType,"IE02770: Base type can not be null.");  return determineDependentTypes(baseType);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_AFTER_CODE_1__CODE_LANG_1:    getCodeLang_1().clear();  return;case UmplePackage.ANONYMOUS_AFTER_CODE_1__CODE_LANGS_1:getCodeLangs_1().clear();return;}super.eUnset(featureID);}  }
class C{  @ReactMethod public void logInWithPublishPermissions(ReadableArray permissions,final Promise promise){  final LoginManager loginManager=LoginManager.getInstance();  loginManager.registerCallback(mCallbackManager,new LoginManagerCallback(promise));  Activity activity=getCurrentActivity();  if (activity != null) {    loginManager.logInWithPublishPermissions(activity,reactArrayToJavaStringCollection(permissions));  }}  }
class C{  private void onBoundsChanged(){  mbShouldDrawTitle=mCollapsedBounds.width() > 0 && mCollapsedBounds.height() > 0 && mExpandedBounds.width() > 0 && mExpandedBounds.height() > 0;}  }
class C{  public TLAProofFoldingStructureProvider(TLAEditor editor){  canPerformFoldingCommands=true;  this.editor=editor;  this.document=editor.getDocumentProvider().getDocument(editor.getEditorInput());  foldPositions=new Vector<TLAProofPosition>();  document.addDocumentListener(this);  if (editor.getEditorInput() instanceof IFileEditorInput) {    IFileEditorInput editorInput=(IFileEditorInput)editor.getEditorInput();    IPath location=editorInput.getFile().getLocation();    ParseResult parseResult=ParseResultBroadcaster.getParseResultBroadcaster().getParseResult(location);    if (parseResult != null) {      newParseResult(parseResult);    }  }  ParseResultBroadcaster.getParseResultBroadcaster().addParseResultListener(this);}  }
class C{  private boolean isFailed(Configuration config){  String status=config.getConfig(IpReconfigConstants.CONFIG_STATUS_KEY);  return status.equals(ClusterNetworkReconfigStatus.Status.FAILED.toString());}  }
class C{  protected int hashCode(Object o1,Object o2){  int result=(o1 == null) ? 0 : o1.hashCode();  return result ^ ((o2 == null) ? 0 : o2.hashCode());}  }
class C{  @Inline public static void longBulkCopy(long[] src,Offset srcOffset,long[] dst,Offset dstOffset,int bytes){  if (VM.VerifyAssertions)   VM._assert(LONG_BULK_COPY_SUPPORTED);  if (!Selected.Mutator.get().longBulkCopy(ObjectReference.fromObject(src),srcOffset,ObjectReference.fromObject(dst),dstOffset,bytes)) {    Memory.aligned64Copy(Magic.objectAsAddress(dst).plus(dstOffset),Magic.objectAsAddress(src).plus(srcOffset),bytes);  }}  }
class C{  public boolean isSetHostname(){  return this.hostname != null;}  }
class C{  public Timestamp endStamp(){  return new Timestamp(this.end.getTime());}  }
class C{  public boolean canWrite(){  return true;}  }
class C{  static void updateIt(Graphics g,JComponent c){  CompiereColor bg=null;  try {    bg=(CompiereColor)c.getClientProperty(CompiereLookAndFeel.BACKGROUND);  } catch (  Exception e) {    System.err.println("AdempierePanelUI - ClientProperty: " + e.getMessage());  }  if (bg != null) {    bg.paint(g,c);  } else {    g.setColor(c.getBackground());    g.fillRect(0,0,c.getWidth(),c.getHeight());  }}  }
class C{  T takeNextConnection() throws InterruptedException {  while (true) {    T next=getNextConnection();    if (next != null) {      return next;    }  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static final boolean segIntersects(Geo p1,Geo p2,Geo p3,Geo p4){  Geo[] r=getSegIntersection(p1,p2,p3,p4);  return (r[0] != null || r[1] != null);}  }
class C{  public void reset(){  resetMappings();  notifyDataSetChanged();}  }
class C{  private static void addSenderInfo(Throwable toModify,String senderId){  StackTraceElement[] stackTrace=toModify.getStackTrace();  StackTraceElement element=null;  for (int i=0; i < stackTrace.length; i++) {    element=stackTrace[i];    if (!element.getClassName().startsWith(REMOTE_MEMBER_TOKEN)) {      stackTrace[i]=new StackTraceElement(REMOTE_MEMBER_TOKEN + " '" + senderId+ "' in "+ element.getClassName(),element.getMethodName(),element.getFileName(),element.getLineNumber());    }  }  toModify.setStackTrace(stackTrace);  Throwable cause=toModify.getCause();  if (cause != null) {    addSenderInfo(cause,senderId);  }}  }
class C{  public boolean isAccepted(){  return accepted;}  }
class C{  private static void writeBorder(SkinSpecification skinSpec,Writer out) throws IOException {  out.write("\t\t<!-- Specification of border images -->\n");  out.write("\t\t<" + BORDER + ">\n");  out.write("\t\t\t<!-- Corner images -->\n");  out.write("\t\t\t<" + TL_CORNER + ">");  out.write(skinSpec.tl_corner);  out.write("</" + TL_CORNER + ">\n");  out.write("\t\t\t<" + TR_CORNER + ">");  out.write(skinSpec.tr_corner);  out.write("</" + TR_CORNER + ">\n");  out.write("\t\t\t<" + BL_CORNER + ">");  out.write(skinSpec.bl_corner);  out.write("</" + BL_CORNER + ">\n");  out.write("\t\t\t<" + BR_CORNER + ">");  out.write(skinSpec.br_corner);  out.write("</" + BR_CORNER + ">\n");  out.write("\t\t\t<!-- Border lines: these images will be tiled -->\n");  out.write("\t\t\t<" + EDGE + ">\n");  for (int i=0; i < skinSpec.topEdge.size(); i++) {    out.write("\t\t\t\t<" + EDGE_ICON + ">\n");    out.write("\t\t\t\t\t<" + ICON + ">");    out.write(skinSpec.topEdge.get(i));    out.write("</" + ICON + ">\n");    out.write("\t\t\t\t\t<" + TILED + ">");    out.write(((Boolean)skinSpec.topShouldTile.get(i)).toString());    out.write("</" + TILED + ">\n");    out.write("\t\t\t\t</" + EDGE_ICON + ">\n");  }  out.write("\t\t\t\t<" + EDGE_NAME + ">");  out.write("top");  out.write("</" + EDGE_NAME + ">\n");  out.write("\t\t\t</" + EDGE + ">\n");  out.write("\t\t\t<" + EDGE + ">\n");  for (int i=0; i < skinSpec.bottomEdge.size(); i++) {    out.write("\t\t\t\t<" + EDGE_ICON + ">\n");    out.write("\t\t\t\t\t<" + ICON + ">");    out.write(skinSpec.bottomEdge.get(i));    out.write("</" + ICON + ">\n");    out.write("\t\t\t\t\t<" + TILED + ">");    out.write(((Boolean)skinSpec.bottomShouldTile.get(i)).toString());    out.write("</" + TILED + ">\n");    out.write("\t\t\t\t</" + EDGE_ICON + ">\n");  }  out.write("\t\t\t\t<" + EDGE_NAME + ">");  out.write("bottom");  out.write("</" + EDGE_NAME + ">\n");  out.write("\t\t\t</" + EDGE + ">\n");  out.write("\t\t\t<" + EDGE + ">\n");  for (int i=0; i < skinSpec.leftEdge.size(); i++) {    out.write("\t\t\t\t<" + EDGE_ICON + ">\n");    out.write("\t\t\t\t\t<" + ICON + ">");    out.write(skinSpec.leftEdge.get(i));    out.write("</" + ICON + ">\n");    out.write("\t\t\t\t\t<" + TILED + ">");    out.write(((Boolean)skinSpec.leftShouldTile.get(i)).toString());    out.write("</" + TILED + ">\n");    out.write("\t\t\t\t</" + EDGE_ICON + ">\n");  }  out.write("\t\t\t\t<" + EDGE_NAME + ">");  out.write("left");  out.write("</" + EDGE_NAME + ">\n");  out.write("\t\t\t</" + EDGE + ">\n");  out.write("\t\t\t<" + EDGE + ">\n");  for (int i=0; i < skinSpec.rightEdge.size(); i++) {    out.write("\t\t\t\t<" + EDGE_ICON + ">\n");    out.write("\t\t\t\t\t<" + ICON + ">");    out.write(skinSpec.rightEdge.get(i));    out.write("</" + ICON + ">\n");    out.write("\t\t\t\t\t<" + TILED + ">");    out.write(((Boolean)skinSpec.rightShouldTile.get(i)).toString());    out.write("</" + TILED + ">\n");    out.write("\t\t\t\t</" + EDGE_ICON + ">\n");  }  out.write("\t\t\t\t<" + EDGE_NAME + ">");  out.write("right");  out.write("</" + EDGE_NAME + ">\n");  out.write("\t\t\t</" + EDGE + ">\n");  out.write("\t\t</" + BORDER + ">\n");}  }
class C{  public static byte[] readFile(String fileName) throws IOException {  try (RandomAccessFile file=new RandomAccessFile(fileName,"r")){    byte[] buff=new byte[(int)file.length()];    file.readFully(buff);    return buff;  } }  }
class C{  public synchronized void putQuadTree(String key,QuadTree quadTree){  quadTree.timestamp=System.currentTimeMillis();  quadTreeMap.put(key,quadTree);  cleanUpCache();}  }
class C{  public static int ceil_int(final float a){  final int intpart=(int)a;  if (a <= intpart || (CHECK_OVERFLOW && intpart == Integer.MAX_VALUE) || CHECK_NAN && Float.isNaN(a)) {    return intpart;  }  return intpart + 1;}  }
class C{  @Override public void notifyRecompileAll(){  AOSLogging.logger.recompilingAllDynamicallyLoadedMethods();  RecompilationManager.recompileAllDynamicallyLoadedMethods(false);}  }
class C{  public void resumed(final int detail){  isSuspended=false;  thread.fireResumeEvent(detail);}  }
class C{  @Override public void respond(String response){  getChannel().send().message(getUser(),response);}  }
class C{  public boolean isNormalCue(){  return (line == DIMEN_UNSET && position == DIMEN_UNSET);}  }
class C{  public boolean crossesDateline(){  return maxLon < minLon;}  }
class C{  @Before public void registerIdlingResource(){  Espresso.registerIdlingResources(mAddNoteIntentsTestRule.getActivity().getCountingIdlingResource());}  }
class C{  public void removeListener(final IViewEdgeListener listener){  m_listeners.removeListener(listener);}  }
class C{  private AudioTrack parseAudioTrack(XmlPullParser parser) throws IOException {  final String audioTrackId=parser.getAttributeValue("",ATTR_ID);  final String filename=parser.getAttributeValue("",ATTR_FILENAME);  final long startTimeMs=Long.parseLong(parser.getAttributeValue("",ATTR_START_TIME));  final long beginMs=Long.parseLong(parser.getAttributeValue("",ATTR_BEGIN_TIME));  final long endMs=Long.parseLong(parser.getAttributeValue("",ATTR_END_TIME));  final int volume=Integer.parseInt(parser.getAttributeValue("",ATTR_VOLUME));  final boolean muted=Boolean.parseBoolean(parser.getAttributeValue("",ATTR_MUTED));  final boolean loop=Boolean.parseBoolean(parser.getAttributeValue("",ATTR_LOOP));  final boolean duckingEnabled=Boolean.parseBoolean(parser.getAttributeValue("",ATTR_DUCK_ENABLED));  final int duckThreshold=Integer.parseInt(parser.getAttributeValue("",ATTR_DUCK_THRESHOLD));  final int duckedTrackVolume=Integer.parseInt(parser.getAttributeValue("",ATTR_DUCKED_TRACK_VOLUME));  final String waveformFilename=parser.getAttributeValue("",ATTR_AUDIO_WAVEFORM_FILENAME);  final AudioTrack audioTrack=new AudioTrack(this,audioTrackId,filename,startTimeMs,beginMs,endMs,loop,volume,muted,duckingEnabled,duckThreshold,duckedTrackVolume,waveformFilename);  return audioTrack;}  }
class C{  public ErrorResponse(final Deserializer deserializer){  this.status=deserializer.readInt("status");  this.error=deserializer.readOptionalString("error");  this.message=deserializer.readOptionalString("message");  this.timeStamp=TimeInstant.readFrom(deserializer,"timeStamp");}  }
class C{  public CGSize winSize(){  CGSize s=CGSize.make(screenSize_.width,screenSize_.height);  return s;}  }
class C{  public void windowActivated(WindowEvent e){  ((WindowListener)a).windowActivated(e);  ((WindowListener)b).windowActivated(e);}  }
class C{  private void parse(String fileName) throws IOException, SAXException {  FileInputStream fileInputStream=new FileInputStream(new File(fileName));  parse(fileName,fileInputStream);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Airing a=getAir(stack);  if (a == null)   return "";  if (a.isSeasonPremiere())   return Sage.rez("Season_Premiere");  if (a.isSeasonFinale())   return Sage.rez("Season_Finale");  if (a.isSeriesPremiere())   return Sage.rez("Series_Premiere");  if (a.isSeriesFinale())   return Sage.rez("Series_Finale");  if (a.isChannelPremiere())   return Sage.rez("Channel_Premiere");  if (a.isPremiere())   return Sage.rez("Premiere");  return "";}  }
class C{  public Anonymous_entryOrExitAction_2_ createAnonymous_entryOrExitAction_2_(){  Anonymous_entryOrExitAction_2_Impl anonymous_entryOrExitAction_2_=new Anonymous_entryOrExitAction_2_Impl();  return anonymous_entryOrExitAction_2_;}  }
class C{  @Deprecated public int skip(final int n){  try {    return (int)skip((long)n);  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  void enterField(){  oldContents=val.getText();}  }
class C{  @Override public int acceptInitialRead(byte[] buffer,int offset,int length) throws IOException {  Socket socket=getSocket();  return socket.getInputStream().read(buffer,offset,length);}  }
class C{  public void close() throws IOException {  _out.close();}  }
class C{  protected boolean isLeftKey(int keyCode){  int game=Display.getInstance().getGameAction(keyCode);  return game == Display.GAME_LEFT;}  }
class C{  public static String callContentPermissionCheck(Delegator delegator,LocalDispatcher dispatcher,Map<String,Object> context){  Map<String,Object> permResults=callContentPermissionCheckResult(delegator,dispatcher,context);  String permissionStatus=(String)permResults.get("permissionStatus");  return permissionStatus;}  }
class C{  public OracleDocument createDocumentFromString(String content){  return (new OracleDocumentImpl(null,content));}  }
class C{  protected void addRange(TextPresentation presentation,int offset,int length,StyleRange attr){  if (attr != null) {    StyleRange styleRange=(StyleRange)attr.clone();    styleRange.start=offset;    styleRange.length=length;    presentation.addStyleRange(styleRange);  }}  }
class C{  @Override public boolean containsAll(@NonNull Collection<?> collection){  Iterator<?> it=collection.iterator();  while (it.hasNext()) {    if (!contains(it.next())) {      return false;    }  }  return true;}  }
class C{  public int countLinesInFile(String filename) throws IOException {  InputStream is=new BufferedInputStream(new FileInputStream(filename));  try {    byte[] c=new byte[1024];    int count=0;    int readChars=0;    while ((readChars=is.read(c)) != -1) {      for (int i=0; i < readChars; ++i) {        if (c[i] == '\n') {          ++count;        }      }    }    return count;  }  finally {    is.close();  }}  }
class C{  public boolean hasAllImages(){  return resultsFromDecode.getImagesProcessedFully();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementsetattributens01.class,args);}  }
class C{  @Override protected void onPause(){  super.onPause();  LocalBroadcastManager.getInstance(this).unregisterReceiver(mUploadResultReceiver);}  }
class C{  public static Builder newBuilder(){  return new Builder();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.986 -0500",hash_original_method="4A643EE28A4F78CB638222A80F5F07F5",hash_generated_method="C8C2AA6B7D7DE849B5B81FEC769496B0") public static String valueOf(double value){  String str=new String();  str.addTaint(value);  return str;}  }
class C{  public static boolean isHorizontal(int gravity){  return gravity > 0 && (gravity & RELATIVE_HORIZONTAL_GRAVITY_MASK) != 0;}  }
class C{  public Statm statm() throws IOException {  return Statm.get(pid);}  }
class C{  @Override public boolean othersDeletesAreVisible(int type){  debugCodeCall("othersDeletesAreVisible",type);  return false;}  }
class C{  public static IdListChangeSource forItems(String[] ids,int batchSize){  return new IdListChangeSource(ids,batchSize);}  }
class C{  @SuppressWarnings("unchecked") @Test public void testSavingsAccountWithOverdraft(){  this.savingsAccountHelper=new SavingsAccountHelper(this.requestSpec,this.responseSpec);  final ResponseSpecification errorResponse=new ResponseSpecBuilder().expectStatusCode(400).build();  final SavingsAccountHelper validationErrorHelper=new SavingsAccountHelper(this.requestSpec,errorResponse);  final Integer clientID=ClientHelper.createClient(this.requestSpec,this.responseSpec);  Assert.assertNotNull(clientID);  final String minBalanceForInterestCalculation=null;  final String zeroOpeningBalance="0.0";  final String minRequiredBalance=null;  final String enforceMinRequiredBalance="false";  final boolean allowOverdraft=true;  final Integer savingsProductID=createSavingsProduct(this.requestSpec,this.responseSpec,zeroOpeningBalance,minBalanceForInterestCalculation,minRequiredBalance,enforceMinRequiredBalance,allowOverdraft);  Assert.assertNotNull(savingsProductID);  final Integer savingsId=this.savingsAccountHelper.applyForSavingsApplication(clientID,savingsProductID,ACCOUNT_TYPE_INDIVIDUAL);  Assert.assertNotNull(savingsProductID);  HashMap modifications=this.savingsAccountHelper.updateSavingsAccount(clientID,savingsProductID,savingsId,ACCOUNT_TYPE_INDIVIDUAL);  Assert.assertTrue(modifications.containsKey("submittedOnDate"));  HashMap savingsStatusHashMap=SavingsStatusChecker.getStatusOfSavings(this.requestSpec,this.responseSpec,savingsId);  SavingsStatusChecker.verifySavingsIsPending(savingsStatusHashMap);  savingsStatusHashMap=this.savingsAccountHelper.approveSavings(savingsId);  SavingsStatusChecker.verifySavingsIsApproved(savingsStatusHashMap);  DateFormat dateFormat=new SimpleDateFormat("dd MMMM yyyy",Locale.US);  Calendar todaysDate=Calendar.getInstance();  todaysDate.add(Calendar.MONTH,-1);  todaysDate.set(Calendar.DAY_OF_MONTH,1);  final String ACTIVATION_DATE=dateFormat.format(todaysDate.getTime());  final Integer lastDayOfMonth=todaysDate.getActualMaximum(Calendar.DAY_OF_MONTH);  todaysDate.set(Calendar.DAY_OF_MONTH,lastDayOfMonth);  final String TRANSACTION_DATE=dateFormat.format(todaysDate.getTime());  savingsStatusHashMap=activateSavingsAccount(savingsId,ACTIVATION_DATE);  SavingsStatusChecker.verifySavingsIsActive(savingsStatusHashMap);  final HashMap summaryBefore=this.savingsAccountHelper.getSavingsSummary(savingsId);  this.savingsAccountHelper.calculateInterestForSavings(savingsId);  HashMap summary=this.savingsAccountHelper.getSavingsSummary(savingsId);  assertEquals(summaryBefore,summary);  Float balance=Float.valueOf(zeroOpeningBalance);  Integer withdrawTransactionId=(Integer)this.savingsAccountHelper.withdrawalFromSavingsAccount(savingsId,WITHDRAW_AMOUNT,ACTIVATION_DATE,CommonConstants.RESPONSE_RESOURCE_ID);  HashMap withdrawTransaction=this.savingsAccountHelper.getSavingsTransaction(savingsId,withdrawTransactionId);  balance-=new Float(WITHDRAW_AMOUNT);  assertEquals("Verifying Withdrawal Amount",new Float(WITHDRAW_AMOUNT),withdrawTransaction.get("amount"));  assertEquals("Verifying Balance after Withdrawal",balance,withdrawTransaction.get("runningBalance"));  Integer depositTransactionId=(Integer)this.savingsAccountHelper.depositToSavingsAccount(savingsId,DEPOSIT_AMOUNT,TRANSACTION_DATE,CommonConstants.RESPONSE_RESOURCE_ID);  HashMap depositTransaction=this.savingsAccountHelper.getSavingsTransaction(savingsId,depositTransactionId);  balance+=new Float(DEPOSIT_AMOUNT);  assertEquals("Verifying Deposit Amount",new Float(DEPOSIT_AMOUNT),depositTransaction.get("amount"));  assertEquals("Verifying Balance after Deposit",balance,depositTransaction.get("runningBalance"));  this.savingsAccountHelper.postInterestForSavings(savingsId);  HashMap accountDetails=this.savingsAccountHelper.getSavingsDetails(savingsId);  summary=(HashMap)accountDetails.get("summary");  Float actualInterestPosted=Float.valueOf(summary.get("totalInterestPosted").toString());  final Float nominalAnnualInterest=Float.valueOf(accountDetails.get("nominalAnnualInterestRate").toString());  final HashMap interestCalculationDaysInYearType=(HashMap)accountDetails.get("interestCalculationDaysInYearType");  final Integer daysInYear=Integer.valueOf(interestCalculationDaysInYearType.get("id").toString());  double interestRateInFraction=(nominalAnnualInterest / 100);  double perDay=(double)1 / (daysInYear);  double interestPerDay=interestRateInFraction * perDay;  Float interestPosted=(float)(interestPerDay * balance * 1);  DecimalFormat decimalFormat=new DecimalFormat("",new DecimalFormatSymbols(Locale.US));  decimalFormat.applyPattern("#.###");  interestPosted=new Float(decimalFormat.format(interestPosted));  actualInterestPosted=new Float(decimalFormat.format(actualInterestPosted));  assertEquals("Verifying interest posted",interestPosted,actualInterestPosted);  todaysDate=Calendar.getInstance();  final String CLOSEDON_DATE=dateFormat.format(todaysDate.getTime());  String withdrawBalance="false";  ArrayList<HashMap> savingsAccountErrorData=(ArrayList<HashMap>)validationErrorHelper.closeSavingsAccountAndGetBackRequiredField(savingsId,withdrawBalance,CommonConstants.RESPONSE_ERROR,CLOSEDON_DATE);  assertEquals("validation.msg.savingsaccount.close.results.in.balance.not.zero",savingsAccountErrorData.get(0).get(CommonConstants.RESPONSE_ERROR_MESSAGE_CODE));}  }
class C{  public static final boolean areBooleansEqual(Boolean b1,Boolean b2){  return (b1 == Boolean.TRUE && b2 == Boolean.TRUE) || (b1 != Boolean.TRUE && b2 != Boolean.TRUE);}  }
class C{  public Boolean isReverse(){  return reverse;}  }
class C{  public int score(){  return score;}  }
class C{  public static int murmurhash3_x86_32(CharSequence data,int offset,int len,int seed){  final int c1=0xcc9e2d51;  final int c2=0x1b873593;  int h1=seed;  int pos=offset;  int end=offset + len;  int k1=0;  int k2=0;  int shift=0;  int bits=0;  int nBytes=0;  while (pos < end) {    int code=data.charAt(pos++);    if (code < 0x80) {      k2=code;      bits=8;    } else     if (code < 0x800) {      k2=(0xC0 | (code >> 6)) | ((0x80 | (code & 0x3F)) << 8);      bits=16;    } else     if (code < 0xD800 || code > 0xDFFF || pos >= end) {      k2=(0xE0 | (code >> 12)) | ((0x80 | ((code >> 6) & 0x3F)) << 8) | ((0x80 | (code & 0x3F)) << 16);      bits=24;    } else {      int utf32=(int)data.charAt(pos++);      utf32=((code - 0xD7C0) << 10) + (utf32 & 0x3FF);      k2=(0xff & (0xF0 | (utf32 >> 18))) | ((0x80 | ((utf32 >> 12) & 0x3F))) << 8 | ((0x80 | ((utf32 >> 6) & 0x3F))) << 16 | (0x80 | (utf32 & 0x3F)) << 24;      bits=32;    }    k1|=k2 << shift;    shift+=bits;    if (shift >= 32) {      k1*=c1;      k1=(k1 << 15) | (k1 >>> 17);      k1*=c2;      h1^=k1;      h1=(h1 << 13) | (h1 >>> 19);      h1=h1 * 5 + 0xe6546b64;      shift-=32;      if (shift != 0) {        k1=k2 >>> (bits - shift);      } else {        k1=0;      }      nBytes+=4;    }  }  if (shift > 0) {    nBytes+=shift >> 3;    k1*=c1;    k1=(k1 << 15) | (k1 >>> 17);    k1*=c2;    h1^=k1;  }  h1^=nBytes;  h1^=h1 >>> 16;  h1*=0x85ebca6b;  h1^=h1 >>> 13;  h1*=0xc2b2ae35;  h1^=h1 >>> 16;  return h1;}  }
class C{  public final TextBuilder append(Text txt,int start,int end){  if (txt == null)   return append("null");  if ((start < 0) || (end < 0) || (start > end)|| (end > txt.length()))   throw new IndexOutOfBoundsException();  int newLength=_length + end - start;  while (_capacity < newLength) {    increaseCapacity();  }  for (int i=start, j=_length; i < end; ) {    char[] chars=_high[j >> B1];    int dstBegin=j & M1;    int inc=MathLib.min(C1 - dstBegin,end - i);    txt.getChars(i,(i+=inc),chars,dstBegin);    j+=inc;  }  _length=newLength;  return this;}  }
class C{  private void registerElement(Element element){  elements.add(element);  for (  Element child : element.getChildren()) {    registerElement(child);  }}  }
class C{  protected static boolean checkForAck(CacheClientProxy proxy){  return HARegionQueue.isTestMarkerMessageRecieved();}  }
class C{  static BigInteger multiplyByPositiveInt(BigInteger val,int factor){  BigInt bi=val.getBigInt().copy();  bi.multiplyByPositiveInt(factor);  return new BigInteger(bi);}  }
class C{  public boolean equals(Object partial){  if (this == partial) {    return true;  }  if (partial instanceof LocalDate) {    LocalDate other=(LocalDate)partial;    if (iChronology.equals(other.iChronology)) {      return iLocalMillis == other.iLocalMillis;    }  }  return super.equals(partial);}  }
class C{  public LocationFullException(){}  }
class C{  public boolean isSelectedTrackRecording(){  return selectedTrackId == recordingTrackId && recordingTrackId != PreferencesUtils.RECORDING_TRACK_ID_DEFAULT;}  }
class C{  protected final float score() throws IOException {  return scorer.score();}  }
class C{  public static String generateResetKey(){  return RandomStringUtils.randomNumeric(DEF_COUNT);}  }
class C{  public void endMethod(){  if ((access & Opcodes.ACC_ABSTRACT) == 0) {    mv.visitMaxs(0,0);  }  mv.visitEnd();}  }
class C{  public void signalRequestTimeout(){  failedQueries++;}  }
class C{  public void addTree(TreeRTG tree,boolean allowed){  if (allowed) {    tree.saplingBlock=SaplingUtil.getSaplingFromLeaves(tree.leavesBlock);    try {      IBlockState leaves=tree.leavesBlock.withProperty(BlockLeaves.CHECK_DECAY,false);      tree.leavesBlock=leaves;    } catch (    Exception e) {    }    this.rtgTrees.add(tree);  }}  }
class C{  public FilterFields(Fields in){  if (in == null) {    throw new NullPointerException("incoming Fields must not be null");  }  this.in=in;}  }
class C{  public static <E extends Identifiable>E findByPrimaryKey(EntityManager em,BigInteger id,Class<E> type){  requireArgument(em != null,"The entity manager cannot be null.");  requireArgument(id != null && id.compareTo(ZERO) > 0,"ID cannot be null and must be positive and non-zero");  requireArgument(type != null,"The entity type cannot be null.");  TypedQuery<E> query=em.createNamedQuery("JPAEntity.findByPrimaryKey",type);  query.setHint("javax.persistence.cache.storeMode","REFRESH");  try {    query.setParameter("id",id);    query.setParameter("deleted",false);    return query.getSingleResult();  } catch (  NoResultException ex) {    return null;  }}  }
class C{  public static void clearBeanInfoCache(){  Introspector.flushCaches();}  }
class C{  public CDisassemblyPanel(final ZyGraphViewSettings settings){  super(new GridLayout(1,1));  setBorder(new TitledBorder("Disassembly Settings"));  Preconditions.checkNotNull(settings,"IE00666: Settings argument can not be null");  CSettingsPanelBuilder.addComboBox(this,m_cbSimplifiedMemoryAccess,"Simplified Variable Access" + ":","Simplifies variable access instructions (example: 'mov eax, [esp + var_4]' " + "is turned into 'mov eax, var_4)",settings.getDisplaySettings().getSimplifiedVariableAccess());}  }
class C{  @Override public DummyProjectBuilder withWorkspaceName(String workspaceName){  dummyProject.setWorkspaceName(workspaceName);  return this;}  }
class C{  public boolean equals(Object o){  if (!(o instanceof LineSegment)) {    return false;  }  LineSegment other=(LineSegment)o;  return p0.equals(other.p0) && p1.equals(other.p1);}  }
class C{  public TransformerFactoryConfigurationError(Exception e){  super(e.toString());  this.exception=e;}  }
class C{  public void addInvokestatic(CtClass clazz,String name,CtClass returnType,CtClass[] paramTypes){  String desc=Descriptor.ofMethod(returnType,paramTypes);  addInvokestatic(clazz,name,desc);}  }
class C{  @Override public boolean isExecutable(){  return getBestPath().isExecutable();}  }
class C{  public void createTopic(String topic){  createTopic(topic,1,1,new Properties());}  }
class C{  public void update(){  if (isDead) {    if (Math.random() < this.getResurrectionProb()) {      isDead=false;      bites=0;    }  } else {    if (this.getBites() > this.getBitesToDie()) {      isDead=true;    }  }}  }
class C{  @Inject public QuestionsDAO(ServiceEnvironment serviceEnvironment){  super(QuestionsService.class,serviceEnvironment.getSecureParameters());}  }
class C{  public boolean isEnabled(){  return ipsecConfig.getIpsecStatus() == null || ipsecConfig.getIpsecStatus().equals(STATUS_ENABLED);}  }
class C{  public String edit() throws IOException {  HttpServletRequest request=getRequest();  boolean editProfile=(request.getRequestURI().indexOf("editProfile") > -1);  if (editProfile) {    if ((request.getParameter("id") != null) || (request.getParameter("from") != null)) {      ServletActionContext.getResponse().sendError(HttpServletResponse.SC_FORBIDDEN);      log.warn("User '" + request.getRemoteUser() + "' is trying to edit user '"+ request.getParameter("id")+ "'");      return null;    }  }  if (id != null) {    user=userManager.getUser(id);  } else   if (editProfile) {    user=userManager.getUserByUsername(request.getRemoteUser());  } else {    user=new User();    user.addRole(new Role(Constants.USER_ROLE));  }  if (user.getUsername() != null) {    user.setConfirmPassword(user.getPassword());    log.debug("checking for remember me login...");    AuthenticationTrustResolver resolver=new AuthenticationTrustResolverImpl();    SecurityContext ctx=SecurityContextHolder.getContext();    if (ctx != null) {      Authentication auth=ctx.getAuthentication();      if (resolver.isRememberMe(auth)) {        getSession().setAttribute("cookieLogin","true");        saveMessage(getText("userProfile.cookieLogin"));      }    }  }  return SUCCESS;}  }
class C{  private double match_bitapScore(int e,int x,int loc,String pattern){  float accuracy=(float)e / pattern.length();  int proximity=Math.abs(loc - x);  if (Match_Distance == 0) {    return proximity == 0 ? accuracy : 1.0;  }  return accuracy + (proximity / (float)Match_Distance);}  }
class C{  private static long sliceID(int level,long offset){  return offset >>> level;}  }
class C{  private ModuleVersion(String version){  if (version == null)   throw new IllegalArgumentException("Null version");  int major;  int minor=0;  int micro=0;  String qualifier="";  try {    StringTokenizer st=new StringTokenizer(version,SEPARATOR,true);    major=Integer.parseInt(st.nextToken().trim());    if (st.hasMoreTokens()) {      st.nextToken();      minor=Integer.parseInt(st.nextToken().trim());      if (st.hasMoreTokens()) {        st.nextToken();        micro=Integer.parseInt(st.nextToken().trim());        if (st.hasMoreTokens()) {          st.nextToken();          qualifier=st.nextToken().trim();          if (st.hasMoreTokens()) {            throw new IllegalArgumentException("Invalid version format, too many seperators: " + version);          }        }      }    }  } catch (  NoSuchElementException e) {    throw new IllegalArgumentException("Invalid version format: " + version);  }catch (  NumberFormatException e) {    throw new IllegalArgumentException("Invalid version format: " + version,e);  }  this.major=major;  this.minor=minor;  this.micro=micro;  this.qualifier=qualifier;  validate();}  }
class C{  public final CRL generateCRL(InputStream inStream) throws CRLException {  return spiImpl.engineGenerateCRL(inStream);}  }
class C{  public IndexedPropertyChangeEvent(Object source,String propertyName,Object oldValue,Object newValue,int index){  super(source,propertyName,oldValue,newValue);  this.index=index;}  }
class C{  private static long remoteLongMethod(){  return LONG_VALUE;}  }
class C{  private void resetAfterKnocking(){  animate().alpha(1).setInterpolator(new Quart.EaseOut()).setDuration(getResources().getInteger(R.integer.list_hello_indicator_fade_in_out_animation_duration));}  }
class C{  public ST(String template){  this(STGroup.defaultGroup,template);}  }
class C{  public final CharSequence yytext(){  return zzBuffer.subSequence(zzStartRead,zzMarkedPos);}  }
class C{  public TradelogReport findTradelogReport(final Portfolio portfolio,ZonedDateTime start,ZonedDateTime end,boolean filter,String symbol,BigDecimal winLossAmount) throws PersistentModelException {  return m_tradelogHome.findByTradelogReport(portfolio,start,end,filter,symbol,winLossAmount);}  }
class C{  public void addResponseHeader(String key,String val){  if (rspheaders == null)   rspheaders=new MessageHeader();  rspheaders.add(key,val);}  }
class C{  public int size(){  return values.size();}  }
class C{  public Task applyBundle(Task task){  return task.setPipeline(pipeline);}  }
class C{  public production the_production(){  return _the_production;}  }
class C{  public void closed(final SocketChannel channel){  removeAll(channel);}  }
class C{  private void notifyChange(){  try {    AuthSvcInternalApiClientIterator authSvcItr=new AuthSvcInternalApiClientIterator(_authSvcEndPointLocator,_coordinator);    while (authSvcItr.hasNext()) {      String endpoint=authSvcItr.peek().toString();      try {        ClientResponse response=authSvcItr.post(_URI_RELOAD,null);        if (response.getStatus() != ClientResponse.Status.OK.getStatusCode()) {          _log.error("Failed to reload authN providers on endpoint {} response {}",endpoint,response.toString());        }      } catch (      Exception e) {        _log.error("Caught exception trying to reload an authsvc on {} continuing",endpoint,e);      }    }  } catch (  CoordinatorException e) {    _log.error("Caught coordinator exception trying to find an authsvc endpoint",e);  }}  }
class C{  public void testSetScaleIntRoundingMode(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=28;  int newScale=18;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal result=aNumber.setScale(newScale,RoundingMode.HALF_EVEN);  String res="123121247898748298842980.877981045763478138";  int resScale=18;  assertEquals("incorrect value",res,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  private static boolean isRPOrVplexProtected(UnManagedVolume unManagedVolume){  return isVplexBackendVolume(unManagedVolume) || checkUnManagedResourceIsRecoverPointEnabled(unManagedVolume);}  }
class C{  public void success(JSONArray message){  try {    WritableArray writableArray=SQLitePluginConverter.jsonToReact(message);    successCallback.invoke(writableArray);  } catch (  JSONException ex) {    errorCallback.invoke("Internal error converting results:" + ex.getMessage());  }}  }
class C{  public final char yycharat(int pos){  return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);}  }
class C{  @PropertyUpdate(properties={"mail.default.to"}) protected void parseRecipientsString(){  defaultRecipients.clear();  if (null != defaultRecipientString) {    String[] strArray=defaultRecipientString.split(",");    for (    String element : strArray) {      String address=element.trim();      if (EMailUtils.isValidEmailAddress(address)) {        defaultRecipients.add(address);      }    }  }}  }
class C{  @Override public void clear(){  E o;  do {    o=poll();  } while (null != o);}  }
class C{  public RegisterPool(RVMMethod meth){  super(meth);}  }
class C{  @Nonnull public BugInstance addInt(int value){  add(new IntAnnotation(value));  return this;}  }
class C{  private void provideFeedbackForUtterance(int queueMode,Utterance utterance){  final Bundle metadata=utterance.getMetadata();  final float earconRate=metadata.getFloat(Utterance.KEY_METADATA_EARCON_RATE,1.0f);  final float earconVolume=metadata.getFloat(Utterance.KEY_METADATA_EARCON_VOLUME,1.0f);  final Bundle nonSpeechMetadata=new Bundle();  nonSpeechMetadata.putFloat(Utterance.KEY_METADATA_EARCON_RATE,earconRate);  nonSpeechMetadata.putFloat(Utterance.KEY_METADATA_EARCON_VOLUME,earconVolume);  final CharSequence textToSpeak=StringBuilderUtils.getAggregateText(utterance.getSpoken());  final int flags=metadata.getInt(Utterance.KEY_METADATA_SPEECH_FLAGS,0);  final Bundle speechMetadata=metadata.getBundle(Utterance.KEY_METADATA_SPEECH_PARAMS);  final int utteranceGroup=utterance.getMetadata().getInt(Utterance.KEY_UTTERANCE_GROUP,SpeechController.UTTERANCE_GROUP_DEFAULT);  mSpeechController.speak(textToSpeak,utterance.getAuditory(),utterance.getHaptic(),queueMode,flags,utteranceGroup,speechMetadata,nonSpeechMetadata);}  }
class C{  public void toggle(){  toggle(false,null,null);}  }
class C{  public AudioReader(String mimeType){  super(mimeType);  setDefault("factor",1.0);  setDefault("offset",0.0);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void testDynIntMissingFacet() throws Exception {  checkSortMissingFacet("dyn_intdv","-1","4");}  }
class C{  private void generateHiveTestFiles() throws FileNotFoundException {  try (PrintWriter writerA=new PrintWriter(new File(testWorkDir,"data-a"));PrintWriter writerB=new PrintWriter(new File(testWorkDir,"data-b"))){    char sep='\t';    int idB=0;    int idA=0;    int v=1000;    for (int i=0; i < 1000; i++) {      writerA.print(idA++);      writerA.print(sep);      writerA.println(idB);      writerB.print(idB++);      writerB.print(sep);      writerB.println(v+=2);      writerB.print(idB++);      writerB.print(sep);      writerB.println(v+=2);    }    writerA.flush();    writerB.flush();  } }  }
class C{  @Override protected List<Operation> optimiseAll(final List<Operation> ops){  return ops;}  }
class C{  public static String toString(Boolean arg){  return toString("%b",arg);}  }
class C{  public static LVTRanges instance(Context context){  LVTRanges instance=context.get(lvtRangesKey);  if (instance == null) {    instance=new LVTRanges(context);  }  return instance;}  }
class C{  public GraphWorkbench(Graph graph){  super(graph);  setRightClickPopupAllowed(true);}  }
class C{  public void start(){  if (sLogger.isActivated()) {    sLogger.info("Start address book monitoring");  }  mCleanupExecutor=Executors.newSingleThreadExecutor();  if (!mObserverIsRegistered) {    mContactsContractObserver=new ContactsContractObserver(new Handler());    mContactsContractCursor=mContentResolver.query(Phone.CONTENT_URI,null,null,null,null);    CursorUtil.assertCursorIsNotNull(mContactsContractCursor,Phone.CONTENT_URI);    mContactsContractCursor.registerContentObserver(mContactsContractObserver);    mObserverIsRegistered=true;  }}  }
class C{  public synchronized boolean isLockOwner(String lockName){  lockName=lockName.intern();  return getThreadLocks().contains(lockName);}  }
class C{  private void createReportMailingJobRunHistroryAfterJobExecution(final ReportMailingJob reportMailingJob,final StringBuilder errorLog,final DateTime jobStartDateTime,final String jobRunStatus){  final DateTime jobEndDateTime=DateUtils.getLocalDateTimeOfTenant().toDateTime();  final String errorLogToString=(errorLog != null) ? errorLog.toString() : null;  final ReportMailingJobRunHistory reportMailingJobRunHistory=ReportMailingJobRunHistory.newInstance(reportMailingJob,jobStartDateTime,jobEndDateTime,jobRunStatus,null,errorLogToString);  this.reportMailingJobRunHistoryRepository.save(reportMailingJobRunHistory);}  }
class C{  public DomainNameValidator(@NonNull final Context context,@StringRes final int resourceId){  super(context,resourceId,REGEX);}  }
class C{  private void visitFrame(final Frame f){  int i, t;  int nTop=0;  int nLocal=0;  int nStack=0;  int[] locals=f.inputLocals;  int[] stacks=f.inputStack;  for (i=0; i < locals.length; ++i) {    t=locals[i];    if (t == Frame.TOP) {      ++nTop;    } else {      nLocal+=nTop + 1;      nTop=0;    }    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  for (i=0; i < stacks.length; ++i) {    t=stacks[i];    ++nStack;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  int frameIndex=startFrame(f.owner.position,nLocal,nStack);  for (i=0; nLocal > 0; ++i, --nLocal) {    t=locals[i];    frame[frameIndex++]=t;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  for (i=0; i < stacks.length; ++i) {    t=stacks[i];    frame[frameIndex++]=t;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  endFrame();}  }
class C{  public Automaton<LR0Item,LR0State> createAutomaton() throws GeneratorException {  return new LR0AutomatonFactory().createAutomaton(this,grammarInfo);}  }
class C{  public static boolean isTopLevelObjectExpressionType(Declaration model){  return model instanceof Class && model.isAnonymous() && getNonSkippedContainer(model) instanceof Package&& !model.isNamed();}  }
class C{  @Override public void removeAlias(String alias){  JedisPool pool=null;  Jedis jedis=null;  try {    pool=new JedisPool(new JedisPoolConfig(),redisIp,Integer.parseInt(redisPort),3000);    jedis=pool.getResource();    String frontend="frontend:" + alias.toLowerCase() + suffixCloudUnitIO;    jedis.del(frontend);    if (logger.isInfoEnabled()) {      logger.info("Suppression dans Redis de [" + frontend + "]");    }  } catch (  JedisConnectionException e) {    logger.error("HipacheRedisUtils Exception",e);  } finally {    if (jedis != null) {      pool.destroy();    }  }}  }
class C{  public void endPrefixMapping(String prefix) throws SAXException {  m_handler.endPrefixMapping(prefix);}  }
class C{  public static String rightPad(String original,int length,char padChar){  if (original.length() >= length) {    return original;  }  return original + stringOfChar(padChar,length - original.length());}  }
class C{  public VariableRef createVariableRef(){  VariableRefImpl variableRef=new VariableRefImpl();  return variableRef;}  }
class C{  public static void showToast(Context context,String message){  Toast.makeText(context,message,Toast.LENGTH_SHORT).show();}  }
class C{  private static void uaColSumGtLe(MatrixBlock in1Val,MatrixBlock outVal,double[] bv,BinaryOperator bOp) throws DMLRuntimeException {  if (in1Val.isInSparseFormat())   s_uaColSumGtLe(in1Val,outVal,bv,bOp); else   d_uaColSumGtLe(in1Val,outVal,bv,bOp);}  }
class C{  private static Take regex(final Base base) throws IOException {  return new TkFork(new FkHost("relay.jare.io",new TkFallback(new TkRelay(base),null)),new FkRegex("/robots.txt",""),new FkRegex("/xsl/[a-z\\-]+\\.xsl",new TkWithType(TkApp.refresh("./src/main/xsl"),"text/xsl")),new FkRegex("/css/[a-z]+\\.css",new TkWithType(TkApp.refresh("./src/main/scss"),"text/css")),new FkRegex("/images/[a-z]+\\.svg",new TkWithType(TkApp.refresh("./src/main/resources"),"image/svg+xml")),new FkRegex("/images/[a-z]+\\.png",new TkWithType(TkApp.refresh("./src/main/resources"),"image/png")),new FkRegex("/",new TkIndex(base)),new FkRegex("/invalidate",new TkInvalidate(Manifests.read("Jare-CloudFrontKey"),Manifests.read("Jare-CloudFrontSecret"))),new FkAuthenticated(new TkSecure(new TkFork(new FkRegex("/domains",new TkDomains(base)),new FkRegex("/add",new TkAdd(base)),new FkRegex("/delete",new TkDelete(base))))));}  }
class C{  public Href without(final Object key){  final SortedMap<String,List<String>> map=new TreeMap<>(this.params);  map.remove(key.toString());  return new Href(this.uri,map);}  }
class C{  public static String prettyPrint(String xmlString){  StringWriter prettyXml=new StringWriter();  try {    Transformer transformer=transformerFactory.newTransformer();    transformer.setOutputProperty(OutputKeys.INDENT,"yes");    transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount","2");    transformer.transform(new StreamSource(new StringReader(xmlString)),new StreamResult(prettyXml));    return prettyXml.toString();  } catch (  TransformerException e) {    return xmlString;  }}  }
class C{  @Override public AnswerFragment.ContinueMode goToNextState(){  mListener.onAnswerChecked(mAdapter.performAnswerCheck(),false);  mAnswersChecked=true;  return ContinueMode.CONTINUE_SHOW_FAB;}  }
class C{  public static Ask createAsk(Model model,ElementList where){  Ask ask=model.createResource(SP.Ask).as(Ask.class);  ask.addProperty(SP.where,where);  return ask;}  }
class C{  public String savePaymentTypeForOrganization() throws SaaSApplicationException {  final List<VOPSP> psps=getPSPs();  final Map<String,String> ptMap=new HashMap<String,String>();  for (  VOPSP psp : psps) {    for (    VOPaymentType pt : psp.getPaymentTypes()) {      ptMap.put("" + pt.getKey(),pt.getPaymentTypeId());    }  }  final String[] pts=pspAccountPaymentTypesAsString.split(",");  Set<String> ptsSet=new HashSet<String>();  for (  String s : pts) {    if (s.trim().length() > 0) {      if (ptMap.containsKey(s)) {        ptsSet.add(ptMap.get(s));      } else {        throw new SaaSSystemException("payment type fpr key " + s + " not found!");      }    }  }  getOperatorService().savePSPAccount(getSelectedOrganization(),getSelectedPspAccount());  getOperatorService().addAvailablePaymentTypes(getSelectedOrganization(),ptsSet);  addMessage(null,FacesMessage.SEVERITY_INFO,INFO_PAYMENT_INFO_SAVED);  newPspAccount=null;  selectedOrganization=null;  selectedPSP=null;  selectedPspAccountKey=null;  pspAccountPaymentTypesAsString=null;  return OUTCOME_SUCCESS;}  }
class C{  public BarEntry copy(){  BarEntry copied=new BarEntry(getVal(),getXIndex(),getData());  copied.mVals=mVals;  return copied;}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 25:{        addToken(Token.PREPROCESSOR);      }case 29:    break;case 8:{    addNullToken();    return firstToken;  }case 30:break;case 22:{addToken(Token.LITERAL_CHAR);}case 31:break;case 21:{yybegin(YYINITIAL);addToken(start,zzStartRead + 1,Token.COMMENT_MULTILINE);}case 32:break;case 17:{start=zzMarkedPos - 2;yybegin(MLC);}case 33:break;case 10:{addToken(Token.WHITESPACE);}case 34:break;case 24:{addToken(Token.LITERAL_NUMBER_HEXADECIMAL);}case 35:break;case 18:{addToken(Token.ERROR_CHAR);}case 36:break;case 23:{addToken(Token.ERROR_STRING_DOUBLE);}case 37:break;case 15:{addToken(Token.LITERAL_NUMBER_FLOAT);}case 38:break;case 5:{addToken(Token.RESERVED_WORD);}case 39:break;case 6:{addToken(Token.SEPARATOR);}case 40:break;case 2:{addToken(Token.IDENTIFIER);}case 41:break;case 13:{addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addNullToken();return firstToken;}case 42:break;case 16:{start=zzMarkedPos - 2;yybegin(EOL_COMMENT);}case 43:break;case 7:{addToken(Token.ERROR_CHAR);addNullToken();return firstToken;}case 44:break;case 9:{addToken(Token.ERROR_STRING_DOUBLE);addNullToken();return firstToken;}case 45:break;case 26:{addToken(Token.DATA_TYPE);}case 46:break;case 1:{addToken(Token.ERROR_IDENTIFIER);}case 47:break;case 19:{addToken(Token.ERROR_CHAR);}case 48:break;case 20:{addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}case 49:break;case 28:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_EOL);start=zzMarkedPos;}case 50:break;case 27:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_MULTILINE);start=zzMarkedPos;}case 51:break;case 14:{addToken(Token.ERROR_NUMBER_FORMAT);}case 52:break;case 3:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 53:break;case 4:{addToken(Token.OPERATOR);}case 54:break;case 11:{}case 55:break;case 12:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 56:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case EOL_COMMENT:{addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addNullToken();return firstToken;}case 314:break;case YYINITIAL:{addNullToken();return firstToken;}case 315:break;case MLC:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 316:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  @Override public int startupNewWorker(){  List<uk.ac.ebi.interpro.scan.jms.master.queuejumper.platforms.LANServerSettings> lanServerSettingsList=lanServerListing.getListServerSettings();  for (  uk.ac.ebi.interpro.scan.jms.master.queuejumper.platforms.LANServerSettings serverSettings : lanServerSettingsList) {    setLanServerSettings(serverSettings);    for (int i=0; i < lanServerSettings.getVmNumber(); i++) {      StringBuffer commandBuf=new StringBuffer();      commandBuf.append(accessPrefix);      if (lanServerSettings.getHostname() != null) {        commandBuf.append('@').append(lanServerSettings.getHostname()).append(' ');      }      commandBuf.append(command);      if (lanServerSettings.getMemory() != null) {        commandBuf.append(' ').append(lanServerSettings.getMemory());      }      LOGGER.debug("LAN command: " + commandBuf.toString());      try {        Runtime.getRuntime().exec(commandBuf.toString());      } catch (      IOException e) {        throw new IllegalStateException("Cannot run the worker",e);      }    }  }  return 1;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public IntBuffer put(int index,int c){  intArray.set(index,c);  return this;}  }
class C{  public double nextDouble(){  return min + (max - min) * randomGenerator.nextDouble();}  }
class C{  private void assembleListenerList(){  for (int i=_listeners.size() - 1; i >= 0; i--) {    removeListener(_listeners.get(i));  }  _listeners=new ArrayList<JmriSimplePropertyListener>();  ConditionalManager cm=InstanceManager.getDefault(jmri.ConditionalManager.class);  for (int i=0; i < _conditionalSystemNames.size(); i++) {    Conditional conditional=null;    conditional=cm.getBySystemName(_conditionalSystemNames.get(i));    if (conditional != null) {      ArrayList<ConditionalVariable> variableList=conditional.getCopyOfStateVariables();      for (int k=0; k < variableList.size(); k++) {        ConditionalVariable variable=variableList.get(k);        int varListenerType=0;        String varName=variable.getName();        NamedBeanHandle<?> namedBean=variable.getNamedBean();        int varType=variable.getType();        int signalAspect=-1;switch (varType) {case Conditional.TYPE_SENSOR_ACTIVE:case Conditional.TYPE_SENSOR_INACTIVE:          varListenerType=LISTENER_TYPE_SENSOR;        break;case Conditional.TYPE_TURNOUT_THROWN:case Conditional.TYPE_TURNOUT_CLOSED:      varListenerType=LISTENER_TYPE_TURNOUT;    break;case Conditional.TYPE_CONDITIONAL_TRUE:case Conditional.TYPE_CONDITIONAL_FALSE:  varListenerType=LISTENER_TYPE_CONDITIONAL;break;case Conditional.TYPE_LIGHT_ON:case Conditional.TYPE_LIGHT_OFF:varListenerType=LISTENER_TYPE_LIGHT;break;case Conditional.TYPE_MEMORY_EQUALS:case Conditional.TYPE_MEMORY_COMPARE:case Conditional.TYPE_MEMORY_EQUALS_INSENSITIVE:case Conditional.TYPE_MEMORY_COMPARE_INSENSITIVE:varListenerType=LISTENER_TYPE_MEMORY;break;case Conditional.TYPE_ROUTE_FREE:case Conditional.TYPE_ROUTE_OCCUPIED:case Conditional.TYPE_ROUTE_ALLOCATED:case Conditional.TYPE_ROUTE_SET:case Conditional.TYPE_TRAIN_RUNNING:varListenerType=LISTENER_TYPE_WARRANT;break;case Conditional.TYPE_FAST_CLOCK_RANGE:varListenerType=LISTENER_TYPE_FASTCLOCK;varName="clock";break;case Conditional.TYPE_SIGNAL_HEAD_RED:varListenerType=LISTENER_TYPE_SIGNALHEAD;signalAspect=SignalHead.RED;break;case Conditional.TYPE_SIGNAL_HEAD_YELLOW:varListenerType=LISTENER_TYPE_SIGNALHEAD;signalAspect=SignalHead.YELLOW;break;case Conditional.TYPE_SIGNAL_HEAD_GREEN:varListenerType=LISTENER_TYPE_SIGNALHEAD;signalAspect=SignalHead.GREEN;break;case Conditional.TYPE_SIGNAL_HEAD_DARK:varListenerType=LISTENER_TYPE_SIGNALHEAD;signalAspect=SignalHead.DARK;break;case Conditional.TYPE_SIGNAL_HEAD_FLASHRED:varListenerType=LISTENER_TYPE_SIGNALHEAD;signalAspect=SignalHead.FLASHRED;break;case Conditional.TYPE_SIGNAL_HEAD_FLASHYELLOW:varListenerType=LISTENER_TYPE_SIGNALHEAD;signalAspect=SignalHead.FLASHYELLOW;break;case Conditional.TYPE_SIGNAL_HEAD_FLASHGREEN:varListenerType=LISTENER_TYPE_SIGNALHEAD;signalAspect=SignalHead.FLASHGREEN;break;case Conditional.TYPE_SIGNAL_HEAD_LIT:case Conditional.TYPE_SIGNAL_HEAD_HELD:varListenerType=LISTENER_TYPE_SIGNALHEAD;break;case Conditional.TYPE_SIGNAL_MAST_ASPECT_EQUALS:case Conditional.TYPE_SIGNAL_MAST_LIT:case Conditional.TYPE_SIGNAL_MAST_HELD:varListenerType=LISTENER_TYPE_SIGNALMAST;break;case Conditional.TYPE_BLOCK_STATUS_EQUALS:varListenerType=LISTENER_TYPE_OBLOCK;break;case Conditional.TYPE_ENTRYEXIT_ACTIVE:case Conditional.TYPE_ENTRYEXIT_INACTIVE:varListenerType=LISTENER_TYPE_ENTRYEXIT;break;}int positionOfListener=getPositionOfListener(varListenerType,varType,varName);JmriSimplePropertyListener listener=null;if (positionOfListener == -1) {switch (varListenerType) {case LISTENER_TYPE_SENSOR:listener=new JmriTwoStatePropertyListener("KnownState",LISTENER_TYPE_SENSOR,namedBean,varType,conditional);break;case LISTENER_TYPE_TURNOUT:listener=new JmriTwoStatePropertyListener("KnownState",LISTENER_TYPE_TURNOUT,namedBean,varType,conditional);break;case LISTENER_TYPE_CONDITIONAL:listener=new JmriTwoStatePropertyListener("KnownState",LISTENER_TYPE_CONDITIONAL,namedBean,varType,conditional);break;case LISTENER_TYPE_LIGHT:listener=new JmriTwoStatePropertyListener("KnownState",LISTENER_TYPE_LIGHT,namedBean,varType,conditional);break;case LISTENER_TYPE_MEMORY:listener=new JmriTwoStatePropertyListener("value",LISTENER_TYPE_MEMORY,namedBean,varType,conditional);break;case LISTENER_TYPE_WARRANT:listener=new JmriSimplePropertyListener(null,LISTENER_TYPE_WARRANT,namedBean,varType,conditional);break;case LISTENER_TYPE_FASTCLOCK:listener=new JmriClockPropertyListener("minutes",LISTENER_TYPE_FASTCLOCK,varName,varType,conditional,variable.getNum1(),variable.getNum2());break;case LISTENER_TYPE_SIGNALHEAD:if (signalAspect < 0) {if (varType == Conditional.TYPE_SIGNAL_HEAD_LIT) {listener=new JmriTwoStatePropertyListener("Lit",LISTENER_TYPE_SIGNALHEAD,namedBean,varType,conditional);} else {listener=new JmriTwoStatePropertyListener("Held",LISTENER_TYPE_SIGNALHEAD,namedBean,varType,conditional);}} else {listener=new JmriMultiStatePropertyListener("Appearance",LISTENER_TYPE_SIGNALHEAD,namedBean,varType,conditional,signalAspect);}break;case LISTENER_TYPE_SIGNALMAST:listener=new JmriTwoStatePropertyListener("Aspect",LISTENER_TYPE_SIGNALMAST,namedBean,varType,conditional);break;case LISTENER_TYPE_OBLOCK:listener=new JmriTwoStatePropertyListener("state",LISTENER_TYPE_OBLOCK,namedBean,varType,conditional);break;case LISTENER_TYPE_ENTRYEXIT:listener=new JmriTwoStatePropertyListener("active",LISTENER_TYPE_ENTRYEXIT,namedBean,varType,conditional);break;default :if (!LRouteTableAction.LOGIX_INITIALIZER.equals(varName)) {log.error("Unknown (new) Variable Listener type= " + varListenerType + ", for varName= "+ varName+ ", varType= "+ varType+ " in Conditional, "+ _conditionalSystemNames.get(i));}continue;}_listeners.add(listener);} else {switch (varListenerType) {case LISTENER_TYPE_SENSOR:case LISTENER_TYPE_TURNOUT:case LISTENER_TYPE_CONDITIONAL:case LISTENER_TYPE_LIGHT:case LISTENER_TYPE_MEMORY:case LISTENER_TYPE_WARRANT:case LISTENER_TYPE_SIGNALMAST:case LISTENER_TYPE_OBLOCK:case LISTENER_TYPE_ENTRYEXIT:listener=_listeners.get(positionOfListener);listener.addConditional(conditional);break;case LISTENER_TYPE_FASTCLOCK:JmriClockPropertyListener cpl=(JmriClockPropertyListener)_listeners.get(positionOfListener);cpl.setRange(variable.getNum1(),variable.getNum2());cpl.addConditional(conditional);break;case LISTENER_TYPE_SIGNALHEAD:if (signalAspect < 0) {listener=_listeners.get(positionOfListener);listener.addConditional(conditional);} else {JmriMultiStatePropertyListener mpl=(JmriMultiStatePropertyListener)_listeners.get(positionOfListener);mpl.addConditional(conditional);mpl.setState(signalAspect);}break;default :log.error("Unknown (old) Variable Listener type= " + varListenerType + ", for varName= "+ varName+ ", varType= "+ varType+ " in Conditional, "+ _conditionalSystemNames.get(i));}}if (varType == Conditional.TYPE_MEMORY_COMPARE || varType == Conditional.TYPE_MEMORY_COMPARE_INSENSITIVE) {positionOfListener=getPositionOfListener(varListenerType,varType,variable.getDataString());if (positionOfListener == -1) {String name=variable.getDataString();try {Memory my=InstanceManager.memoryManagerInstance().provideMemory(name);NamedBeanHandle<?> nb=jmri.InstanceManager.getDefault(jmri.NamedBeanHandleManager.class).getNamedBeanHandle(name,my);listener=new JmriTwoStatePropertyListener("value",LISTENER_TYPE_MEMORY,nb,varType,conditional);_listeners.add(listener);} catch (IllegalArgumentException ex) {log.error("invalid memory name= \"" + name + "\" in state variable");break;}} else {listener=_listeners.get(positionOfListener);listener.addConditional(conditional);}}}} else {log.error("invalid conditional system name in Logix \"" + getSystemName() + "\" assembleListenerList DELETING "+ _conditionalSystemNames.get(i)+ " from Conditional list.");_conditionalSystemNames.remove(i);}}}  }
class C{  public Cursor fetchBestScorebyTime(String title,String difficulty){  return mDb.query(TABLE_SCORES,new String[]{_ROWID,KEY_GAME_TITLE,KEY_GAME_DIFFICULTY,KEY_GAME_MOVES,KEY_GAME_TIME},KEY_GAME_TITLE + "= '" + title+ "'"+ " AND "+ KEY_GAME_DIFFICULTY+ "= '"+ difficulty+ "'",null,null,null,KEY_GAME_TIME,null);}  }
class C{  synchronized void fireUnsolicited(Object obj){  if (debug) {    System.err.println("EventSupport.fireUnsolicited: " + obj + " "+ unsolicited);  }  if (unsolicited == null || unsolicited.size() == 0) {    return;  }  if (obj instanceof UnsolicitedNotification) {    UnsolicitedNotificationEvent evt=new UnsolicitedNotificationEvent(ctx,(UnsolicitedNotification)obj);    queueEvent(evt,unsolicited);  } else   if (obj instanceof NamingException) {    NamingExceptionEvent evt=new NamingExceptionEvent(ctx,(NamingException)obj);    queueEvent(evt,unsolicited);    unsolicited=null;  }}  }
class C{  public static Directory createLocalInstance(String clusterName,String memberName) throws ResourceException, DirectoryNotFoundException {  return new Directory(clusterName,memberName);}  }
class C{  public double weightedDistance(V v1,V v2,long[] weightVector){  double sqrDist=0.;  for (int i=BitsUtil.nextSetBit(weightVector,0); i >= 0; i=BitsUtil.nextSetBit(weightVector,i + 1)) {    double manhattanI=v1.doubleValue(i) - v2.doubleValue(i);    sqrDist+=manhattanI * manhattanI;  }  return Math.sqrt(sqrDist);}  }
class C{  private void updateSpeedSummary(Preference preference,int keyId,int defaultValue){  boolean metricUnits=PreferencesUtils.isMetricUnits(this);  int displayValue=getSpeedDisplayValue(keyId,defaultValue);  preference.setSummary(getString(metricUnits ? R.string.value_integer_kilometer_hour : R.string.value_integer_mile_hour,displayValue));}  }
class C{  public boolean isDefault(){  Object oo=get_Value(COLUMNNAME_IsDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void initData(){  this.nameList=new ArrayList<>();  List<Location> locationList=DatabaseHelper.getInstance(this).readLocation();  for (  Location l : locationList) {    nameList.add(l.location);  }  this.location=new Location(nameList.get(0),null);  this.weatherUtils=new WeatherUtils();  this.locationUtils=new LocationUtils(this);}  }
class C{  public String useCrossValidationTipText(){  return "Sets whether the number of LogitBoost iterations is to be cross-validated or the stopping criterion " + "on the training set should be used. If not set (and no fixed number of iterations was given), " + "the number of LogitBoost iterations is used that minimizes the error on the training set "+ "(misclassification error or error on probabilities depending on errorOnProbabilities).";}  }
class C{  protected Scope computeEnclosingScope(){  return ClassScope.make(getEnclosingClass());}  }
class C{  public static void main(String[] args){  String queueName=null;  Context jndiContext=null;  QueueConnectionFactory queueConnectionFactory=null;  QueueConnection queueConnection=null;  QueueSession queueSession=null;  Queue queue=null;  QueueSender queueSender=null;  TextMessage message=null;  final int numMsgs;  if ((args.length < 1) || (args.length > 2)) {    LOG.info("Usage: java SimpleQueueSender " + "<queue-name> [<number-of-messages>]");    System.exit(1);  }  queueName=args[0];  LOG.info("Queue name is " + queueName);  if (args.length == 2) {    numMsgs=(new Integer(args[1])).intValue();  } else {    numMsgs=1;  }  try {    jndiContext=new InitialContext();  } catch (  NamingException e) {    LOG.info("Could not create JNDI API context: " + e.toString());    System.exit(1);  }  try {    queueConnectionFactory=(QueueConnectionFactory)jndiContext.lookup("QueueConnectionFactory");    queue=(Queue)jndiContext.lookup(queueName);  } catch (  NamingException e) {    LOG.info("JNDI API lookup failed: " + e);    System.exit(1);  }  try {    queueConnection=queueConnectionFactory.createQueueConnection();    queueSession=queueConnection.createQueueSession(false,Session.AUTO_ACKNOWLEDGE);    queueSender=queueSession.createSender(queue);    message=queueSession.createTextMessage();    for (int i=0; i < numMsgs; i++) {      message.setText("This is message " + (i + 1));      LOG.info("Sending message: " + message.getText());      queueSender.send(message);    }    queueSender.send(queueSession.createMessage());  } catch (  JMSException e) {    LOG.info("Exception occurred: " + e.toString());  } finally {    if (queueConnection != null) {      try {        queueConnection.close();      } catch (      JMSException e) {      }    }  }}  }
class C{  @Override public void update(){  generateArguments();  notifyObservers();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] imageFiles=null;  String outputName=null;  String workingDirectory=null;  WhiteboxRasterInfo[] components=null;  WhiteboxRaster ouptut=null;  int nCols=0;  int nRows=0;  double z;  int numImages=0;  int numFiles, numComponents;  int progress=0;  int col, row;  int a, i, j;  double[] imageAverages;  double[] imageTotals;  double[] imageNumPixels;  double[][] data;  double[] noDataValues;  String pathSep=File.separator;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  outputName=args[1];  if (outputName.toLowerCase().contains(".dep")) {    outputName=outputName.replace(".dep","");  }  try {    imageFiles=inputFilesString.split(";");    numFiles=imageFiles.length;    components=new WhiteboxRasterInfo[numFiles];    imageAverages=new double[numFiles];    imageTotals=new double[numFiles];    imageNumPixels=new double[numFiles];    noDataValues=new double[numFiles];    data=new double[numFiles][];    int[] componentNumbers=new int[numFiles];    double[][] eigenvectors=null;    for (i=0; i < numFiles; i++) {      boolean isComponent=false;      components[i]=new WhiteboxRasterInfo(imageFiles[i]);      noDataValues[i]=components[i].getNoDataValue();      if (i == 0) {        nCols=components[i].getNumberColumns();        nRows=components[i].getNumberRows();        File file=new File(imageFiles[i]);        workingDirectory=file.getParent();      } else {        if (components[i].getNumberColumns() != nCols || components[i].getNumberRows() != nRows) {          showFeedback("All input components must have the same dimensions (rows and columns).");          return;        }      }      ArrayList<String> metadata=components[i].getMetadata();      for (      String entry : metadata) {        if (entry.toLowerCase().contains("principal component num")) {          componentNumbers[i]=Integer.parseInt(entry.replace("Principal Component Num.:","").trim()) - 1;        }        if (entry.toLowerCase().contains("eigenvector")) {          String[] eigenStr=entry.replace("Eigenvector:","").replace("[","").replace("]","").split(",");          if (i == 0) {            numImages=eigenStr.length;            eigenvectors=new double[numImages][numImages];          }          for (a=0; a < numImages; a++) {            eigenvectors[componentNumbers[i]][a]=Double.parseDouble(eigenStr[a].trim());          }          isComponent=true;        }      }      if (!isComponent) {        showFeedback("At least one of the input images does not appear to have been created by the PrincipalComponentAnalysis tool. " + "This tool will not operate correctly.");        return;      }    }    int[] componentPointers=new int[numImages];    for (i=0; i < numFiles; i++) {      componentPointers[componentNumbers[i]]=i;    }    for (j=0; j < numImages; j++) {      String outputHeader=workingDirectory + pathSep + outputName+ (j + 1)+ ".dep";      if (new File(outputHeader).exists()) {        (new File(outputHeader)).delete();      }      if (new File(outputHeader.replace(".dep",".tas")).exists()) {        (new File(outputHeader.replace(".dep",".tas"))).delete();      }      WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",imageFiles[0],WhiteboxRaster.DataType.FLOAT,0);      output.setDataScale(DataScale.CONTINUOUS);      for (row=0; row < nRows; row++) {        for (i=0; i < numFiles; i++) {          data[i]=components[i].getRowValues(row);        }        for (col=0; col < nCols; col++) {          if (data[0][col] != noDataValues[0]) {            z=0;            for (i=0; i < numFiles; i++) {              z+=data[i][col] * eigenvectors[componentPointers[i]][j];            }            output.setValue(row,col,z);          } else {            output.setValue(row,col,noDataValues[0]);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nRows - 1));        updateProgress("Creating image " + (j + 1) + ":",progress);      }      output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      output.addMetadataEntry("Created on " + new Date());      output.close();    }    for (i=0; i < numFiles; i++) {      components[i].close();    }    String outputHeader=workingDirectory + pathSep + outputName+ "1.dep";    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Builder width(@FloatRange(from=0,fromInclusive=false) float width){  mWidth=width;  return this;}  }
class C{  public boolean isWhitespace(int nodeHandle){  int identity=makeNodeIdentity(nodeHandle);  int type;  if (identity == DTM.NULL)   type=DTM.NULL; else   type=_type(identity);  if (isTextType(type)) {    int dataIndex=_dataOrQName(identity);    int offset=m_data.elementAt(dataIndex);    int length=m_data.elementAt(dataIndex + 1);    return m_chars.isWhitespace(offset,length);  }  return false;}  }
class C{  public static Number multiply(Character left,Number right){  return NumberNumberMultiply.multiply(Integer.valueOf(left),right);}  }
class C{  public JSONNode addObject(String name){  return add(name,null,NodeType.OBJECT);}  }
class C{  private void twoWayMergeInternal(final ReservoirItemsSketch<T> sketchIn,final boolean isModifiable){  if (sketchIn.getN() <= sketchIn.getK()) {    twoWayMergeInternalStandard(sketchIn);  } else   if (gadget_.getN() < gadget_.getK()) {    final ReservoirItemsSketch<T> tmpSketch=gadget_;    gadget_=(isModifiable ? sketchIn : sketchIn.copy());    twoWayMergeInternalStandard(tmpSketch);  } else   if (sketchIn.getImplicitSampleWeight() < gadget_.getN() / ((double)(gadget_.getK() - 1))) {    twoWayMergeInternalWeighted(sketchIn);  } else {    final ReservoirItemsSketch<T> tmpSketch=gadget_;    gadget_=(isModifiable ? sketchIn : sketchIn.copy());    twoWayMergeInternalWeighted(tmpSketch);  }}  }
class C{  long offer(int part,long addr,int hash) throws GridOffHeapOutOfMemoryException {  return lrus[incrementAndGet(addIdx,maxIdxCnt)].offer(part,addr,hash);}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mCurrentColor);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  public void closeDoor(){  triggerBinder=null;  appContext.unbindService(connector);}  }
class C{  @Transactional public RevisionPetition createRevisionPetitionForRest(RevisionPetition objection){  Position position=null;  WorkFlowMatrix wfmatrix=null;  User user=null;  if (objection.getId() == null) {    if (objection.getObjectionNumber() == null)     objection.setObjectionNumber(applicationNumberGenerator.generate());    objection.getBasicProperty().setStatus(propertyStatusDAO.getPropertyStatusByCode(PropertyTaxConstants.STATUS_OBJECTED_STR));    objection.getBasicProperty().setUnderWorkflow(Boolean.TRUE);    if (objection.getState() == null) {      wfmatrix=revisionPetitionWorkFlowService.getWfMatrix(objection.getStateType(),null,null,null,PropertyTaxConstants.REVISIONPETITION_CREATED,null);      final Designation desig=designationService.getDesignationByName(PropertyTaxConstants.REVENUE_CLERK_DESGN);      List<Assignment> assignment=assignmentService.findByDesignationAndBoundary(desig.getId(),objection.getBasicProperty().getPropertyID().getZone().getId());      if (assignment.size() > 0)       position=assignment.get(0).getPosition(); else {        assignment=assignmentService.findPrimaryAssignmentForDesignationName(PropertyTaxConstants.REVENUE_CLERK_DESGN);        if (assignment.size() > 0)         position=assignment.get(0).getPosition();      }      updateRevisionPetitionStatus(wfmatrix,objection,null);      if (position != null)       user=eisCommonService.getUserForPosition(position.getId(),new Date());      objection.start().withNextAction(wfmatrix.getPendingActions()).withStateValue(wfmatrix.getCurrentState()).withOwner(position).withSenderName(user != null && user.getName() != null ? user.getName() : "").withOwner(user).withComments("");    }    applyAuditing(objection.getState());    objection=persist(objection);    updateIndex(objection);    sendEmailandSms(objection,REVISION_PETITION_CREATED);  } else   objection=merge(objection);  return objection;}  }
class C{  public void test_addAttributesLjava_util_MapII(){  AttributedString as=new AttributedString("test");  Map<AttributedCharacterIterator.Attribute,String> whm=new WeakHashMap<AttributedCharacterIterator.Attribute,String>();  try {    whm.put(new TestAttributedCharacterIteratorAttribute("test1"),"value1");    whm.put(new TestAttributedCharacterIteratorAttribute("test2"),"value2");    whm.put(new TestAttributedCharacterIteratorAttribute("test3"),"value3");    as.addAttributes(whm,0,3);  } catch (  Exception e) {    fail("Unexpected exception " + e.toString());  }  try {    as.addAttributes(null,0,3);    fail("Expected NullPointerException was not thrown");  } catch (  NullPointerException e) {  }  try {    as.addAttributes(whm,0,0);    fail("Expected IllegalArgumentException was not thrown");  } catch (  IllegalArgumentException e) {  }}  }
class C{  public StringLocator(Instances data,int[] indices){  super(data,Attribute.STRING,indices);}  }
class C{  public static InputContactMessageContentBuilder builder(){  return new InputContactMessageContentBuilder();}  }
class C{  public void addDataChangeListener(DataChangedListener d){  listeners.addListener(d);}  }
class C{  public String classIndexTipText(){  return "The index of the class attribute, starts with 1, 'first' and 'last' " + "are accepted as well, '0' unsets the class index.";}  }
class C{  public static void main(String[] args){  hostName=System.getProperty("hostName");  String keys=System.getProperty("keys");  String statyKey=System.getProperty("startKey");  String endKey=System.getProperty("endKey");  getPcapsByKeys(keys);  getPcapsByKeysRange(statyKey,endKey);}  }
class C{  public boolean isResolvedAndExternal(EObject from,EObject to){  if (to == null)   return false;  if (!to.eIsProxy()) {    if (to.eResource() == null) {      LOG.error("Reference from " + EcoreUtil.getURI(from) + " to "+ to+ " cannot be exported as the target is not contained in a resource.");      return false;    }    return from.eResource() != to.eResource();  }  return !uriEncoder.isCrossLinkFragment(from.eResource(),((InternalEObject)to).eProxyURI().fragment());}  }
class C{  protected int minFrequencyToCache(Query query){  if (isCostly(query)) {    return 2;  } else   if (isCheap(query)) {    return 20;  } else {    return 5;  }}  }
class C{  public synchronized void removeViewModel(String viewModelId){  mViewModels.remove(viewModelId);}  }
class C{  public static <T extends Object>void putIfNotDefault(Properties props,String propertyName,T value){  putIfNotDefault(props,propertyName,value,null);}  }
class C{  public static String replaceString(String mainString,String oldString,String newString){  return StringUtil.replaceString(mainString,oldString,newString);}  }
class C{  String imageUrl(){  return mImageUrl;}  }
class C{  public void add(JarEntry entry,byte[] bytes,boolean overwrite) throws IOException {  JarEntry newEntry=new JarEntry(entry.getName());  newEntry.setSize(bytes.length);  if (jarEntries.containsKey(entry.getName()) && !overwrite) {    throw new IOException("Archive already contains entry: " + entry);  } else {    jarEntries.remove(entry.getName());    jarEntriesToAdd.remove(entry.getName());    jarEntries.put(entry.getName(),newEntry);    jarEntriesToAdd.put(entry.getName(),bytes);  }}  }
class C{  public void fatalError(SAXParseException e) throws SAXException {  throw e;}  }
class C{  public static String fileNameFromGeneration(String base,String ext,long gen){  if (gen == -1) {    return null;  } else   if (gen == 0) {    return segmentFileName(base,"",ext);  } else {    assert gen > 0;    StringBuilder res=new StringBuilder(base.length() + 6 + ext.length()).append(base).append('_').append(Long.toString(gen,Character.MAX_RADIX));    if (ext.length() > 0) {      res.append('.').append(ext);    }    return res.toString();  }}  }
class C{  public short readShortInt(){  byte[] buff=data;  return (short)(((buff[pos++] & 0xff) << 8) + (buff[pos++] & 0xff));}  }
class C{  private int contentMoveUp(int dy,RecyclerView.Recycler recycler){  int actualDy=dy;  int maxHeightIndex=getMaxHeightLayoutPositionInLine(getChildCount() - 1);  View maxHeightItem=getChildAt(maxHeightIndex);  int offscreenBottom=getDecoratedBottom(maxHeightItem) - bottomVisibleEdge();  if (offscreenBottom >= dy) {    offsetChildrenVertical(-dy);    return dy;  }  while (getChildAdapterPosition(getChildCount() - 1) < getItemCount() - 1) {    addNewLineAtBottom(recycler);    maxHeightIndex=getMaxHeightLayoutPositionInLine(getChildCount() - 1);    maxHeightItem=getChildAt(maxHeightIndex);    offscreenBottom+=getDecoratedMeasuredHeight(maxHeightItem);    if (offscreenBottom >= dy) {      break;    }  }  if (offscreenBottom < dy) {    actualDy=offscreenBottom;  }  offsetChildrenVertical(-actualDy);  while (!lineVisible(0)) {    recycleLine(0,recycler);  }  firstChildAdapterPosition=getChildAdapterPosition(0);  return actualDy;}  }
class C{  public boolean isGlobalProgrammerAvailable(){  return true;}  }
class C{  public ExecuteResults(){  this.updateCount=-1;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:45.287 -0500",hash_original_method="731D88F5D8865617BA362DCED4C30896",hash_generated_method="ED09A364E94A90F3E23A91DCC44E26ED") public boolean isRepeatable(){  return false;}  }
class C{  private String convGameTime(){  if (!playingOT) {    int qNum=(3600 - gameTime) / 900 + 1;    int minTime;    int secTime;    String secStr;    if (gameTime <= 0 && numOT <= 0) {      return "0:00 Q4";    } else {      minTime=(gameTime - 900 * (4 - qNum)) / 60;      secTime=(gameTime - 900 * (4 - qNum)) - 60 * minTime;      if (secTime < 10)       secStr="0" + secTime; else       secStr="" + secTime;      return minTime + ":" + secStr+ " Q"+ qNum;    }  } else {    if (!bottomOT) {      return "TOP OT" + numOT;    } else {      return "BOT OT" + numOT;    }  }}  }
class C{  public static boolean isSimilarName(String name1,String name2){  return getSimilarity(name1,name2) >= 0;}  }
class C{  public static String aquireLicense(final DigestURL url){  if (url == null)   return null;  String license=UUID.randomUUID().toString();  permissions.put(license,url.toNormalform(true));  return license;}  }
class C{  private void runInitializer(Path nodeDb,Path output) throws IOException {  JobConf initializer=new NutchJob(getConf());  initializer.setJobName("LinkAnalysis Initializer");  FileInputFormat.addInputPath(initializer,nodeDb);  FileOutputFormat.setOutputPath(initializer,output);  initializer.setInputFormat(SequenceFileInputFormat.class);  initializer.setMapperClass(Initializer.class);  initializer.setMapOutputKeyClass(Text.class);  initializer.setMapOutputValueClass(Node.class);  initializer.setOutputKeyClass(Text.class);  initializer.setOutputValueClass(Node.class);  initializer.setOutputFormat(MapFileOutputFormat.class);  initializer.setBoolean("mapreduce.fileoutputcommitter.marksuccessfuljobs",false);  LOG.info("Starting initialization job");  try {    JobClient.runJob(initializer);  } catch (  IOException e) {    LOG.error(StringUtils.stringifyException(e));    throw e;  }  LOG.info("Finished initialization job.");}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == StructuralTypeRef.class) {switch (derivedFeatureID) {case ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM__AST_STRUCTURAL_MEMBERS:      return TypeRefsPackage.STRUCTURAL_TYPE_REF__AST_STRUCTURAL_MEMBERS;case ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM__STRUCTURAL_TYPE:    return TypeRefsPackage.STRUCTURAL_TYPE_REF__STRUCTURAL_TYPE;case ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM__GEN_STRUCTURAL_MEMBERS:  return TypeRefsPackage.STRUCTURAL_TYPE_REF__GEN_STRUCTURAL_MEMBERS;case ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM__POSTPONED_SUBSTITUTIONS:return TypeRefsPackage.STRUCTURAL_TYPE_REF__POSTPONED_SUBSTITUTIONS;default :return -1;}}if (baseClass == ParameterizedTypeRefStructural.class) {switch (derivedFeatureID) {default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public boolean isHostedTxInProgress(TXId txId){synchronized (this.hostedTXStates) {    TXStateProxy tx=this.hostedTXStates.get(txId);    if (tx == null) {      return false;    }    return tx.isRealDealLocal();  }}  }
class C{  @PostConstruct public void init() throws ConfigException, IOException {  super.init();}  }
class C{  private void addStorageFilesWithRetry(BusinessObjectDataKey businessObjectDataKey,UploaderInputManifestDto manifest,S3FileTransferRequestParamsDto params,String storageName,Integer maxRetryAttempts,Integer retryDelaySecs) throws IOException, JAXBException, URISyntaxException {  int retryCount=0;  while (true) {    try {      uploaderWebClient.addStorageFiles(businessObjectDataKey,manifest,params,storageName);      break;    } catch (    IOException|JAXBException|URISyntaxException e) {      if (retryCount >= maxRetryAttempts) {        LOGGER.warn("An exception occurred when adding storage files to the business object data. The maximum number of retries of " + maxRetryAttempts + " has been exceeded so the exception will now be thrown.");        throw e;      } else {        LOGGER.warn("An exception occurred when adding storage files to the business object data. {}",e.toString(),e);        LOGGER.warn("Will retry in " + retryDelaySecs + " second(s) and no more than "+ (maxRetryAttempts - retryCount)+ " more time(s).");        retryCount++;        herdThreadHelper.sleep(retryDelaySecs * 1000L);      }    }  }}  }
class C{  public CTagFilterNode(final ITreeNode<CTag> tag){  m_tag=tag;}  }
class C{  private void startGame(GameLaunchMessage gameLaunchMessage,Faction faction,RatingMode ratingMode,Integer localRelayPort){  if (isRunning()) {    logger.warn("Forged Alliance is already running, not starting game");    return;  }  stopSearchRanked1v1();  List<String> args=fixMalformedArgs(gameLaunchMessage.getArgs());  try {    localRelayServer.getPort();    process=forgedAllianceService.startGame(gameLaunchMessage.getUid(),gameLaunchMessage.getMod(),faction,args,ratingMode,localRelayPort,rehostRequested);    setGameRunning(true);    this.ratingMode=ratingMode;    spawnTerminationListener(process);  } catch (  IOException e) {    logger.warn("Game could not be started",e);    notificationService.addNotification(new ImmediateNotification(i18n.get("errorTitle"),i18n.get("game.start.couldNotStart"),Severity.ERROR,e,Arrays.asList(new ReportAction(i18n,reportingService,e),new DismissAction(i18n))));  }}  }
class C{  public void serviceRevoked(BeanContextServiceRevokedEvent bcsre){}  }
class C{  public boolean isAllowedToTransferFile(ContactId contact) throws RcsPersistentStorageException, RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    return mApi.isAllowedToTransferFile(contact);  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    RcsPersistentStorageException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  private Object createBean(ResultSet rs,Class type,PropertyDescriptor[] props,int[] columnToProperty) throws SQLException {  Object bean=this.newInstance(type);  for (int i=1; i < columnToProperty.length; i++) {    if (columnToProperty[i] == PROPERTY_NOT_FOUND) {      continue;    }    PropertyDescriptor prop=props[columnToProperty[i]];    Class propType=prop.getPropertyType();    Object value=this.processColumn(rs,i,propType);    if (propType != null && value == null && propType.isPrimitive()) {      value=primitiveDefaults.get(propType);    }    this.callSetter(bean,prop,value);  }  return bean;}  }
class C{  protected int __offset(int vtable_offset){  int vtable=bb_pos - bb.getInt(bb_pos);  return vtable_offset < bb.getShort(vtable) ? bb.getShort(vtable + vtable_offset) : 0;}  }
class C{  public HeldLocksGrant refresh(long expirationDateMs){  return new HeldLocksGrant(grantId,creationDateMs,expirationDateMs,lockMap,lockTimeout,versionId);}  }
class C{  public static void main(String[] args){  runEvaluator(new CfsSubsetEval(),args);}  }
class C{  public NaviEdge(final NaviNode source,final NaviNode target,final Edge edge,final ZyEdgeRealizer<NaviEdge> realizer,final INaviEdge rawEdge){  super(source,target,edge,realizer,rawEdge);}  }
class C{  public final void displayError(Exception e){  try {    SpriteTranscoder.this.handler.error(new TranscoderException(e));  } catch (  TranscoderException ex) {    throw new RuntimeException();  }}  }
class C{  public Dimension minimumLayoutSize(Container target){synchronized (target.getTreeLock()) {    Dimension dim=new Dimension(0,0);    if ((chart != null) && chart.isVisible()) {      Dimension d=chart.getMinimumSize();      dim.width=d.width;      dim.height=d.height;    }    if ((xLabel != null) && xLabel.isVisible()) {      Dimension d=xLabel.getMinimumSize();      dim.width=Math.max(d.width,dim.width);      dim.height+=d.height + vgap;    }    if ((yLabel != null) && yLabel.isVisible()) {      Dimension d=yLabel.getMinimumSize();      dim.width+=d.width + hgap;      dim.height=Math.max(d.height,dim.height);    }    if ((title != null) && title.isVisible()) {      Dimension d=title.getMinimumSize();      dim.width=Math.max(d.width,dim.width);      dim.height+=d.height + vgap;    }    Insets insets=target.getInsets();    dim.width+=insets.left + insets.right;    dim.height+=insets.top + insets.bottom;    return dim;  }}  }
class C{  private void creatAWSRequestAndAsyncHandler(BlockStorageEnumerationContext aws){  DescribeVolumesRequest request=new DescribeVolumesRequest();  request.setMaxResults(getQueryPageSize());  request.setNextToken(aws.nextToken);  aws.describeVolumesRequest=request;  AsyncHandler<DescribeVolumesRequest,DescribeVolumesResult> resultHandler=new AWSStorageEnumerationAsyncHandler(this,aws);  aws.resultHandler=resultHandler;}  }
class C{  public TtmlStyle chain(TtmlStyle ancestor){  return inherit(ancestor,true);}  }
class C{  public static byte[] transceiveAndGetResponse(byte[] command,IsoCard isoCard,String getResponseApdu) throws IOException {  byte[] resp=isoCard.transceive(command);  byte[] buf=new byte[2048];  int offset=0;  while (resp[resp.length - 2] == 0x61) {    System.arraycopy(resp,0,buf,offset,resp.length - 2);    offset+=resp.length - 2;    resp=isoCard.transceive(decodeHex(getResponseApdu));  }  System.arraycopy(resp,0,buf,offset,resp.length);  byte[] properlySized=new byte[offset + resp.length];  System.arraycopy(buf,0,properlySized,0,properlySized.length);  return properlySized;}  }
class C{  private static String initialise(Token currentToken,int[][] expectedTokenSequences,String[] tokenImage,String lexicalStateName){  StringBuilder sb=new StringBuilder();  StringBuffer expected=new StringBuffer();  int maxSize=0;  java.util.TreeSet<String> sortedOptions=new java.util.TreeSet<String>();  for (int i=0; i < expectedTokenSequences.length; i++) {    if (maxSize < expectedTokenSequences[i].length) {      maxSize=expectedTokenSequences[i].length;    }    for (int j=0; j < expectedTokenSequences[i].length; j++) {      sortedOptions.add(tokenImage[expectedTokenSequences[i][j]]);    }  }  for (  String option : sortedOptions) {    expected.append(INDENT).append(option).append(EOL);  }  sb.append("Encountered unexpected token:");  Token tok=currentToken.next;  for (int i=0; i < maxSize; i++) {    String tokenText=tok.image;    String escapedTokenText=add_escapes(tokenText);    if (i != 0) {      sb.append(" ");    }    if (tok.kind == 0) {      sb.append(tokenImage[0]);      break;    }    sb.append(" \"");    sb.append(escapedTokenText);    sb.append("\"");    sb.append(" " + tokenImage[tok.kind]);    tok=tok.next;  }  sb.append(EOL).append(INDENT).append("at line " + currentToken.next.beginLine + ", column "+ currentToken.next.beginColumn);  sb.append(".").append(EOL);  if (expectedTokenSequences.length == 0) {  } else {    int numExpectedTokens=expectedTokenSequences.length;    sb.append(EOL).append("Was expecting" + (numExpectedTokens == 1 ? ":" : " one of:") + EOL+ EOL);    sb.append(expected.toString());  }  return sb.toString();}  }
class C{  public SFTPv3FileAttributes lstat(String path) throws IOException {  return statBoth(path,Packet.SSH_FXP_LSTAT);}  }
class C{  public void parseGeography(String filename){  LOG.info("Parsing geography from " + filename);  Counter counter=new Counter("  geography # ");  BufferedReader br=IOUtils.getBufferedReader(filename);  try {    String line=null;    while ((line=br.readLine()) != null) {      String serial=line.substring(0,9);      String municipalCode=line.substring(9,12);      String municipalName=line.substring(12,38);      String magisterialCode=line.substring(38,41);      String magisterialName=line.substring(41,60);      String districtCode=line.substring(60,63);      String districtName=line.substring(63,110);      String provinceCode=line.substring(110,111);      String provinceName=line.substring(111,128);      String eaType=line.substring(128,129);      geographyMap.put(Id.create(serial,Household.class),municipalCode + "," + municipalName+ ","+ magisterialCode+ ","+ magisterialName+ ","+ districtCode+ ","+ districtName+ ","+ provinceCode+ ","+ provinceName+ ","+ eaType);      counter.incCounter();    }  } catch (  IOException e) {    throw new RuntimeException("Could not read from BufferedReader " + filename);  } finally {    try {      br.close();    } catch (    IOException e) {      throw new RuntimeException("Could not close BufferedReader " + filename);    }  }  counter.printCounter();  LOG.info("Done parsing geography (" + geographyMap.size() + ").");}  }
class C{  static void sort(int[] a,int left,int right,int[] work,int workBase,int workLen){  if (right - left < QUICKSORT_THRESHOLD) {    sort(a,left,right,true);    return;  }  int[] run=new int[MAX_RUN_COUNT + 1];  int count=0;  run[0]=left;  for (int k=left; k < right; run[count]=k) {    if (a[k] < a[k + 1]) {      while (++k <= right && a[k - 1] <= a[k])       ;    } else     if (a[k] > a[k + 1]) {      while (++k <= right && a[k - 1] >= a[k])       ;      for (int lo=run[count] - 1, hi=k; ++lo < --hi; ) {        int t=a[lo];        a[lo]=a[hi];        a[hi]=t;      }    } else {      for (int m=MAX_RUN_LENGTH; ++k <= right && a[k - 1] == a[k]; ) {        if (--m == 0) {          sort(a,left,right,true);          return;        }      }    }    if (++count == MAX_RUN_COUNT) {      sort(a,left,right,true);      return;    }  }  if (run[count] == right++) {    run[++count]=right;  } else   if (count == 1) {    return;  }  byte odd=0;  for (int n=1; (n<<=1) < count; odd^=1)   ;  int[] b;  int ao, bo;  int blen=right - left;  if (work == null || workLen < blen || workBase + blen > work.length) {    work=new int[blen];    workBase=0;  }  if (odd == 0) {    System.arraycopy(a,left,work,workBase,blen);    b=a;    bo=0;    a=work;    ao=workBase - left;  } else {    b=work;    ao=0;    bo=workBase - left;  }  for (int last; count > 1; count=last) {    for (int k=(last=0) + 2; k <= count; k+=2) {      int hi=run[k], mi=run[k - 1];      for (int i=run[k - 2], p=i, q=mi; i < hi; ++i) {        if (q >= hi || p < mi && a[p + ao] <= a[q + ao]) {          b[i + bo]=a[p++ + ao];        } else {          b[i + bo]=a[q++ + ao];        }      }      run[++last]=hi;    }    if ((count & 1) != 0) {      for (int i=right, lo=run[count - 1]; --i >= lo; b[i + bo]=a[i + ao])       ;      run[++last]=right;    }    int[] t=a;    a=b;    b=t;    int o=ao;    ao=bo;    bo=o;  }}  }
class C{  public void calculateDangerLevel(){  int maxLevel=1;  int levelSum=1;  for (  CreatureRespawnPoint spawner : respawnPoints) {    Creature creature=spawner.getPrototypeCreature();    if (creature.isRare()) {      continue;    }    int level=creature.getLevel() + 1;    if (level > 1000) {      continue;    }    maxLevel=Math.max(level,maxLevel);    levelSum+=level;  }  int area=getFreeArea() + 1;  double dangerLevel=maxLevel * (1 + DANGER_WEIGHT_CREATURE_DENSITY * (levelSum - maxLevel) / maxLevel / Math.sqrt(area)) - 1;  if (maxLevel > 0) {    if (attributes == null) {      attributes=new ZoneAttributes(this);    }    attributes.put("danger_level",Double.toString(dangerLevel));  }}  }
class C{  public boolean isEqualNode(Node arg){  if (arg == this) {    return true;  }  if (arg.getNodeType() != getNodeType()) {    return false;  }  if (getNodeName() == null) {    if (arg.getNodeName() != null) {      return false;    }  } else   if (!getNodeName().equals(arg.getNodeName())) {    return false;  }  if (getLocalName() == null) {    if (arg.getLocalName() != null) {      return false;    }  } else   if (!getLocalName().equals(arg.getLocalName())) {    return false;  }  if (getNamespaceURI() == null) {    if (arg.getNamespaceURI() != null) {      return false;    }  } else   if (!getNamespaceURI().equals(arg.getNamespaceURI())) {    return false;  }  if (getPrefix() == null) {    if (arg.getPrefix() != null) {      return false;    }  } else   if (!getPrefix().equals(arg.getPrefix())) {    return false;  }  if (getNodeValue() == null) {    if (arg.getNodeValue() != null) {      return false;    }  } else   if (!getNodeValue().equals(arg.getNodeValue())) {    return false;  }  return true;}  }
class C{  private void dropView(View view){  UiThreadUtil.assertOnUiThread();  if (!mRootTags.get(view.getId())) {    Assertions.assertNotNull(mTagsToViewManagers.get(view.getId())).onDropViewInstance((ThemedReactContext)view.getContext(),view);  }  ViewManager viewManager=mTagsToViewManagers.get(view.getId());  if (view instanceof ViewGroup && viewManager instanceof ViewGroupManager) {    ViewGroup viewGroup=(ViewGroup)view;    ViewGroupManager viewGroupManager=(ViewGroupManager)viewManager;    for (int i=0; i < viewGroupManager.getChildCount(viewGroup); i++) {      View child=viewGroupManager.getChildAt(viewGroup,i);      if (mTagsToViews.get(child.getId()) != null) {        dropView(child);      }    }  }  mTagsToViews.remove(view.getId());  mTagsToViewManagers.remove(view.getId());}  }
class C{  void put(final ByteVector out){  final int FACTOR=ClassWriter.TO_ACC_SYNTHETIC;  int mask=Opcodes.ACC_DEPRECATED | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE | ((access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / FACTOR);  out.putShort(access & ~mask).putShort(name).putShort(desc);  int attributeCount=0;  if (value != 0) {    ++attributeCount;  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      ++attributeCount;    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;  }  if (ClassReader.SIGNATURES && signature != 0) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && tanns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && itanns != null) {    ++attributeCount;  }  if (attrs != null) {    attributeCount+=attrs.getCount();  }  out.putShort(attributeCount);  if (value != 0) {    out.putShort(cw.newUTF8("ConstantValue"));    out.putInt(2).putShort(value);  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      out.putShort(cw.newUTF8("Synthetic")).putInt(0);    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(cw.newUTF8("Deprecated")).putInt(0);  }  if (ClassReader.SIGNATURES && signature != 0) {    out.putShort(cw.newUTF8("Signature"));    out.putInt(2).putShort(signature);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (ClassReader.ANNOTATIONS && tanns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"));    tanns.put(out);  }  if (ClassReader.ANNOTATIONS && itanns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"));    itanns.put(out);  }  if (attrs != null) {    attrs.put(cw,null,0,-1,-1,out);  }}  }
class C{  private void checkAndPurgeObsoleteClones(URI applicationId){  if (!isRetentionRequired()) {    return;  }  List<RetainedReplica> replicas=findObsoleteReplica(applicationId.toString());  for (  RetainedReplica replica : replicas) {    for (    String replicaName : replica.getAssociatedReplicaIds()) {      info("Delete clones %s since it exceeds max number of clones allowed",replicaName);      removeApplicationFullCopy(applicationId,replicaName,subGroups);    }    getModelClient().delete(replica);  }}  }
class C{  public CEnableAllAction(final BackEndDebuggerProvider debuggerProvider){  Preconditions.checkNotNull(debuggerProvider,"IE01349: Debugger provider argument can not be null");  m_debuggerProvider=debuggerProvider;  putValue(Action.SHORT_DESCRIPTION,"Enable all breakpoints");}  }
class C{  @Override public String toString(){  return "L" + System.identityHashCode(this);}  }
class C{  public int size(){  return points.size();}  }
class C{  private String scanDocComment() throws IOException {  int c;  final ScannerInputReader in=this.in;  char[] buffer=this.buffer;  int count=0;  while ((c=in.read()) == '*')   ;  if (c == '/') {    ch=in.read();    return "";  }  if (c == '\n') {    c=in.read();  }  outerLoop:   while (true) {    wsLoop:     while (true) {switch (c) {case ' ':case '\t':        c=in.read();      break;case 10:case 11:case 12:case 13:case 14:case 15:case 16:case 17:case 18:case 19:case 20:case 21:case 22:case 23:case 24:case 25:case 26:case 27:case 28:case 29:case 30:case 31:default :    break wsLoop;}}if (c == '*') {do {  c=in.read();} while (c == '*');if (c == '/') {  ch=in.read();  break outerLoop;}}textLoop: while (true) {switch (c) {case EOF:  env.error(pos,"eof.in.comment");ch=EOF;break outerLoop;case '*':c=in.read();if (c == '/') {ch=in.read();break outerLoop;}if (count == buffer.length) {growBuffer();buffer=this.buffer;}buffer[count++]='*';break;case '\n':if (count == buffer.length) {growBuffer();buffer=this.buffer;}buffer[count++]='\n';c=in.read();break textLoop;case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 11:case 12:case 13:case 14:case 15:case 16:case 17:case 18:case 19:case 20:case 21:case 22:case 23:case 24:case 25:case 26:case 27:case 28:case 29:case 30:case 31:case 32:case 33:case 34:case 35:case 36:case 37:case 38:case 39:case 40:default :if (count == buffer.length) {growBuffer();buffer=this.buffer;}buffer[count++]=(char)c;c=in.read();break;}}}if (count > 0) {int i=count - 1;trailLoop: while (i > -1) {switch (buffer[i]) {case ' ':case '\t':case '*':i--;break;case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 10:case 11:case 12:case 13:case 14:case 15:case 16:case 17:case 18:case 19:case 20:case 21:case 22:case 23:case 24:case 25:case 26:case 27:case 28:case 29:case 30:case 31:case 33:case 34:case 35:case 36:case 37:case 38:case 39:case 40:default :break trailLoop;}}count=i + 1;return new String(buffer,0,count);} else {return "";}}  }
class C{  @SuppressWarnings("unchecked") private void checkClassCompliance(){  try {    mAbsoluteClassName=mPackageName + "." + mShortClassName;    mClass=findMatchingClass();    if (mClass == null) {      if (JDiffType.INTERFACE.equals(mClassType)) {        mResultObserver.notifyFailure(SignatureTestActivity.FAILURE_TYPE.MISSING_INTERFACE,mAbsoluteClassName,"Classloader is unable to find " + mAbsoluteClassName);      } else {        mResultObserver.notifyFailure(SignatureTestActivity.FAILURE_TYPE.MISSING_CLASS,mAbsoluteClassName,"Classloader is unable to find " + mAbsoluteClassName);      }      return;    }    if (!checkClassModifiersCompliance()) {      logMismatchInterfaceSignature(mAbsoluteClassName,"Non-compatible class found when looking for " + toSignatureString());      return;    }    if (!checkClassAnnotationCompliace()) {      logMismatchInterfaceSignature(mAbsoluteClassName,"Annotation mismatch");      return;    }    if (!mClass.isAnnotation()) {      if (!checkClassExtendsCompliance()) {        logMismatchInterfaceSignature(mAbsoluteClassName,"Extends mismatch");        return;      }      if (!checkClassImplementsCompliance()) {        logMismatchInterfaceSignature(mAbsoluteClassName,"Implements mismatch");      }    }  } catch (  Exception e) {    SignatureTestLog.e("Got exception when checking field compliance",e);    mResultObserver.notifyFailure(SignatureTestActivity.FAILURE_TYPE.CAUGHT_EXCEPTION,mAbsoluteClassName,"Exception!");  }}  }
class C{  public OutputFormat(){}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_NUM_EXPR_1__TAIL_1:    setTail_1((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public void wiggleSort2(int[] A){  if (A == null || A.length == 0)   return;  for (int i=1; i < A.length - 1; i+=2) {    swap(A,i,i + 1);  }}  }
class C{  protected void displayImageFromContent(String imageUri,ImageView imageView) throws FileNotFoundException {}  }
class C{  List<DexData> readDexData(String fileName) throws IOException {  try (ZipFile zipFile=new ZipFile(fileName)){    return Collections.list(zipFile.entries()).stream().filter(null).map(null).collect(Collectors.toList());  } }  }
class C{  protected static OMGraphicList joinCommonLines(OMGraphicList list,float zero_eps){  int size=list.size();  int len1, len2;  double lat1, lon1, lat2, lon2;  OMGraphic obj;  OMGraphicList newGraphics=new OMGraphicList();  OMGraphicList plineGraphics=new OMGraphicList();  System.out.println("finding polylines...");  for (int i=0; i < size; i++) {    obj=list.getOMGraphicAt(i);    if ((obj instanceof OMPoly) && !((OMPoly)obj).isPolygon()) {      plineGraphics.add(obj);    } else {      newGraphics.add(obj);    }  }  size=plineGraphics.size();  OMPoly poly1, poly2;  double[] rads1, rads2, radians;  System.out.println("maybe joining " + size + " polylines...");  for (int i=0; i < size; i++) {    if (i % 500 == 0) {      System.out.println("checking pline i=" + i);    }    for (int j=0; j < size; j++) {      if (i == j) {        continue;      }      obj=plineGraphics.getOMGraphicAt(i);      if (obj instanceof SinkGraphic) {        continue;      }      poly1=(OMPoly)obj;      rads1=poly1.getLatLonArray();      len1=rads1.length;      lat1=ProjMath.radToDeg(rads1[len1 - 2]);      lon1=ProjMath.radToDeg(rads1[len1 - 1]);      obj=plineGraphics.getOMGraphicAt(j);      if (obj instanceof SinkGraphic) {        continue;      }      poly2=(OMPoly)obj;      rads2=poly2.getLatLonArray();      len2=rads2.length;      lat2=ProjMath.radToDeg(rads2[0]);      lon2=ProjMath.radToDeg(rads2[1]);      if (MoreMath.approximately_equal(lat1,lat2,zero_eps) && MoreMath.approximately_equal(lon1,lon2,zero_eps)) {        radians=new double[len1 + len2 - 2];        System.arraycopy(rads1,0,radians,0,len1);        System.arraycopy(rads2,0,radians,len1 - 2,len2);        poly1.setLocation(radians,OMGraphic.RADIANS);        plineGraphics.setOMGraphicAt(SinkGraphic.getSharedInstance(),j);        j=-1;      }    }  }  size=plineGraphics.size();  for (int i=0; i < size; i++) {    obj=plineGraphics.getOMGraphicAt(i);    if (obj instanceof OMPoly) {      newGraphics.add(obj);    }  }  return newGraphics;}  }
class C{  private boolean acceptsSuffixRange(int state,int start,int end){  int count=automaton.initTransition(state,scratchTransition);  for (int i=0; i < count; i++) {    automaton.getNextTransition(scratchTransition);    if (start >= scratchTransition.min && end <= scratchTransition.max && scratchTransition.dest == sinkState) {      return true;    }  }  return false;}  }
class C{  protected synchronized void engineSetSeed(byte[] seed){  if (seed == null) {    throw new NullPointerException("seed == null");  }  if (state == NEXT_BYTES) {    System.arraycopy(copies,HASHCOPY_OFFSET,this.seed,HASH_OFFSET,EXTRAFRAME_OFFSET);  }  state=SET_SEED;  if (seed.length != 0) {    updateSeed(seed);  }}  }
class C{  public void destroyRegion(EventID eventId,Object callbackArg){  DestroyRegionOp.execute(this.pool,this.regionName,eventId,callbackArg);}  }
class C{  private Object readResolve(){  return iChronology.year();}  }
class C{  public void cancelButtonActionPerformed(){  editMode=false;  curNode=null;  addButton.setVisible(true);  editButton.setVisible(true);  deleteButton.setVisible(true);  doneButton.setVisible(true);  updateButton.setVisible(false);  cancelButton.setVisible(false);  statusText1.setText(stdStatus1);  statusText2.setText(stdStatus2);  statusText3.setText(stdStatus3);}  }
class C{  public ClassLoader createClassLoaderFromContent(final String className,final String content) throws IOException {  byte[] classDefinition=compileClass(className,content);  SingleClassClassLoader classLoader=new SingleClassClassLoader();  classLoader.addClass(className,classDefinition);  return classLoader;}  }
class C{  public ISicresAdminException(String message){  this(message,null);}  }
class C{  private void createSampler(){  this.sampler=glGenSamplers();  glSamplerParameteri(this.sampler,GL_TEXTURE_WRAP_S,GL_CLAMP_TO_EDGE);  glSamplerParameteri(this.sampler,GL_TEXTURE_WRAP_T,GL_CLAMP_TO_EDGE);  glSamplerParameteri(this.sampler,GL_TEXTURE_WRAP_R,GL_CLAMP_TO_EDGE);  glSamplerParameteri(this.sampler,GL_TEXTURE_MIN_FILTER,GL_NEAREST);  glSamplerParameteri(this.sampler,GL_TEXTURE_MAG_FILTER,GL_NEAREST);}  }
class C{  public boolean confirm(String message){  if (userAgent != null) {    return userAgent.showConfirm(message);  }  return false;}  }
class C{  private void generateClassCall(MethodVisitor mv){  mv.visitMethodInsn(INVOKESTATIC,"java/lang/Class","forName","(Ljava/lang/String;)Ljava/lang/Class;");}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  try {    return EPG.getInstance().getProvidersAndCacheNames(getString(stack));  } catch (  sage.EPGServerException e) {    System.out.println("ERROR communicating with EPG server of: " + e);    return e.getMessage();  }}  }
class C{  public CSeqHeader createCSeqHeader(int sequenceNumber,String method) throws ParseException, InvalidArgumentException {  return this.createCSeqHeader((long)sequenceNumber,method);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void tell(String aSentence){  tell((Sentence)parser.parse(aSentence));}  }
class C{  @Override protected void executionFinished(Throwable t){  m_ButtonStart.setEnabled(hasData());  m_ButtonStop.setEnabled(false);  if (t != null) {    handleException("Execution failed:",t);    JOptionPane.showMessageDialog(this,"Execution failed:\n" + t,"Error",JOptionPane.ERROR_MESSAGE);  }}  }
class C{  public SimpleUser(){}  }
class C{  public QueryStringQueryBuilder queryName(String queryName){  this.queryName=queryName;  return this;}  }
class C{  public Object resolve(String name){  Object r=null;  if (name != null) {    String[] nameParts=DOT_PATTERN.split(name);    CurrentLevel cr=currentLevelMap(nameParts,rootNamespace,false);    Map<String,Object> currentLevel=cr.map;    r=currentLevel.get(nameParts[nameParts.length - 1]);    if (r == null && name.startsWith(FUNCTIONS_NAMESPACE) && name.length() > FUNCTIONS_NAMESPACE.length()) {      return resolveEvaluator(FUNCTIONS_NAMESPACE,name);    }    if (r == null && name.startsWith(FUNCTIONS_NAMESPACE_SHORT) && name.length() > FUNCTIONS_NAMESPACE_SHORT.length()) {      return resolveEvaluator(FUNCTIONS_NAMESPACE_SHORT,name);    }    if (r == null) {      StringBuilder sb=new StringBuilder();      for (int i=cr.level; i < nameParts.length; i++) {        if (sb.length() > 0) {          sb.append(".");        }        sb.append(nameParts[i]);      }      r=cr.map.get(sb.toString());    }    if (r == null) {      r=System.getProperty(name);    }  }  return r == null ? "" : r;}  }
class C{  private int toInt(InetAddress inetAddress){  byte[] address=inetAddress.getAddress();  int result=0;  for (int i=0; i < address.length; i++) {    result<<=8;    result|=address[i] & BYTE_MASK;  }  return result;}  }
class C{  void linkClicked(String text){  if (whitelist.matcher(text).matches()) {    addLine(new HeaderLessEventLine("Trying to open #'" + text + "' in your browser.",NotificationType.CLIENT));    BareBonesBrowserLaunch.openURL(text);  }}  }
class C{  private void generateDataURI(final byte[] bytes,final Writer out,final String mimeType) throws IOException {  final StringBuffer buffer=new StringBuffer();  buffer.append(DATA_URI_PREFIX);  buffer.append(mimeType);  buffer.append(";base64,");  buffer.append(Base64.encodeBytes(bytes));  out.write(buffer.toString());}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  private void stop(){  close0(null);  if (reader != null) {    try {      U.interrupt(reader);      U.join(reader);      reader=null;    } catch (    IgniteInterruptedCheckedException ignored) {      Thread.currentThread().interrupt();      log.warn("Got interrupted while waiting for reader thread to shut down (will return).");    }  }}  }
class C{  public XMLParseException(String systemID,int lineNr,String msg){  super(systemID,lineNr,null,msg,true);}  }
class C{  public String qty(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  if (isCalloutActive() || value == null)   return "";  int M_Product_ID=Env.getContextAsInt(ctx,WindowNo,"M_Product_ID");  BigDecimal MovementQty, QtyEntered;  if (M_Product_ID == 0) {    QtyEntered=(BigDecimal)mTab.getValue("QtyEntered");    mTab.setValue("MovementQty",QtyEntered);  } else   if (mField.getColumnName().equals("C_UOM_ID")) {    int C_UOM_To_ID=((Integer)value).intValue();    QtyEntered=(BigDecimal)mTab.getValue("QtyEntered");    BigDecimal QtyEntered1=QtyEntered.setScale(MUOM.getPrecision(ctx,C_UOM_To_ID),BigDecimal.ROUND_HALF_UP);    if (QtyEntered.compareTo(QtyEntered1) != 0) {      log.fine("Corrected QtyEntered Scale UOM=" + C_UOM_To_ID + "; QtyEntered="+ QtyEntered+ "->"+ QtyEntered1);      QtyEntered=QtyEntered1;      mTab.setValue("QtyEntered",QtyEntered);    }    MovementQty=MUOMConversion.convertProductFrom(ctx,M_Product_ID,C_UOM_To_ID,QtyEntered);    if (MovementQty == null)     MovementQty=QtyEntered;    boolean conversion=QtyEntered.compareTo(MovementQty) != 0;    log.fine("UOM=" + C_UOM_To_ID + ", QtyEntered="+ QtyEntered+ " -> "+ conversion+ " MovementQty="+ MovementQty);    Env.setContext(ctx,WindowNo,"UOMConversion",conversion ? "Y" : "N");    mTab.setValue("MovementQty",MovementQty);  } else   if (Env.getContextAsInt(ctx,WindowNo,"C_UOM_ID") == 0) {    QtyEntered=(BigDecimal)mTab.getValue("QtyEntered");    mTab.setValue("MovementQty",QtyEntered);  } else   if (mField.getColumnName().equals("QtyEntered")) {    int C_UOM_To_ID=Env.getContextAsInt(ctx,WindowNo,"C_UOM_ID");    QtyEntered=(BigDecimal)value;    BigDecimal QtyEntered1=QtyEntered.setScale(MUOM.getPrecision(ctx,C_UOM_To_ID),BigDecimal.ROUND_HALF_UP);    if (QtyEntered.compareTo(QtyEntered1) != 0) {      log.fine("Corrected QtyEntered Scale UOM=" + C_UOM_To_ID + "; QtyEntered="+ QtyEntered+ "->"+ QtyEntered1);      QtyEntered=QtyEntered1;      mTab.setValue("QtyEntered",QtyEntered);    }    MovementQty=MUOMConversion.convertProductFrom(ctx,M_Product_ID,C_UOM_To_ID,QtyEntered);    if (MovementQty == null)     MovementQty=QtyEntered;    boolean conversion=QtyEntered.compareTo(MovementQty) != 0;    log.fine("UOM=" + C_UOM_To_ID + ", QtyEntered="+ QtyEntered+ " -> "+ conversion+ " MovementQty="+ MovementQty);    Env.setContext(ctx,WindowNo,"UOMConversion",conversion ? "Y" : "N");    mTab.setValue("MovementQty",MovementQty);  } else   if (mField.getColumnName().equals("MovementQty")) {    int C_UOM_To_ID=Env.getContextAsInt(ctx,WindowNo,"C_UOM_ID");    MovementQty=(BigDecimal)value;    int precision=MProduct.get(ctx,M_Product_ID).getUOMPrecision();    BigDecimal MovementQty1=MovementQty.setScale(precision,BigDecimal.ROUND_HALF_UP);    if (MovementQty.compareTo(MovementQty1) != 0) {      log.fine("Corrected MovementQty " + MovementQty + "->"+ MovementQty1);      MovementQty=MovementQty1;      mTab.setValue("MovementQty",MovementQty);    }    QtyEntered=MUOMConversion.convertProductTo(ctx,M_Product_ID,C_UOM_To_ID,MovementQty);    if (QtyEntered == null)     QtyEntered=MovementQty;    boolean conversion=MovementQty.compareTo(QtyEntered) != 0;    log.fine("UOM=" + C_UOM_To_ID + ", MovementQty="+ MovementQty+ " -> "+ conversion+ " QtyEntered="+ QtyEntered);    Env.setContext(ctx,WindowNo,"UOMConversion",conversion ? "Y" : "N");    mTab.setValue("QtyEntered",QtyEntered);  }  return "";}  }
class C{  @Override public Object remove(Object key){  if (key instanceof Number) {    return remove(((Number)key).intValue());  }  return null;}  }
class C{  public static String replace(String original,String search,String replace){  if (original == null)   original="";  return doReplace(new StringBuffer(original),search,replace,false,true).toString();}  }
class C{  private static String construct(final String... params){  final StringBuilder builder=new StringBuilder();  for (int idx=0; idx < params.length; idx+=2) {    builder.append(encode(params[idx])).append('=').append(encode(params[idx + 1])).append('&');  }  return builder.toString();}  }
class C{  static Object realRunJUnit4Test(Class scriptClass,GroovyClassLoader loader){  try {    Class junitCoreClass=loader.loadClass("org.junit.runner.JUnitCore");    Object result=InvokerHelper.invokeStaticMethod(junitCoreClass,"runClasses",new Object[]{scriptClass});    System.out.print("JUnit 4 Runner, Tests: " + InvokerHelper.getProperty(result,"runCount"));    System.out.print(", Failures: " + InvokerHelper.getProperty(result,"failureCount"));    System.out.println(", Time: " + InvokerHelper.getProperty(result,"runTime"));    List failures=(List)InvokerHelper.getProperty(result,"failures");    for (int i=0; i < failures.size(); i++) {      Object f=failures.get(i);      System.out.println("Test Failure: " + InvokerHelper.getProperty(f,"description"));      System.out.println(InvokerHelper.getProperty(f,"trace"));    }    return result;  } catch (  ClassNotFoundException e) {    throw new GroovyRuntimeException("Error running JUnit 4 test.",e);  }}  }
class C{  public static void appendNodeDetail(final StringBuffer buf,final XNode xNode){  appendNodeDetail(buf,xNode.getNode(),true);  buf.append(" at ").append(xNode.getXPath());}  }
class C{  public void replaceFromToWith(int from,int to,BitVector source,int sourceFrom){  if (nbits == 0 || to == from - 1)   return;  checkRangeFromTo(from,to,nbits);  int length=to - from + 1;  if (sourceFrom < 0 || sourceFrom + length > source.size()) {    throw new IndexOutOfBoundsException();  }  if (source.bits == this.bits && from <= sourceFrom && sourceFrom <= to) {    source=source.copy();  }  final long[] theBits=this.bits;  final long[] sourceBits=source.bits;  final int width=to - from + 1;  final int blocks=QuickBitVector.unit(width);  final int bitsPerUnit=QuickBitVector.BITS_PER_UNIT;  final int bitsPerUnitMinusOne=bitsPerUnit - 1;  for (int i=blocks; --i >= 0; ) {    long val=QuickBitVector.getLongFromTo(sourceBits,sourceFrom,sourceFrom + bitsPerUnitMinusOne);    QuickBitVector.putLongFromTo(theBits,val,from,from + bitsPerUnitMinusOne);    sourceFrom+=bitsPerUnit;    from+=bitsPerUnit;  }  int offset=QuickBitVector.offset(width);  long val=QuickBitVector.getLongFromTo(sourceBits,sourceFrom,sourceFrom + offset - 1);  QuickBitVector.putLongFromTo(theBits,val,from,from + offset - 1);}  }
class C{  public SBS(int minFeatures,int maxFeatures,Regressor evaluater,double maxDecrease){  this(minFeatures,maxFeatures,evaluater,3,maxDecrease);}  }
class C{  private static int gallopRight(Comparable<Object> key,Object[] a,int base,int len,int hint){  if (DEBUG)   assert len > 0 && hint >= 0 && hint < len;  int ofs=1;  int lastOfs=0;  if (key.compareTo(a[base + hint]) < 0) {    int maxOfs=hint + 1;    while (ofs < maxOfs && key.compareTo(a[base + hint - ofs]) < 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    int tmp=lastOfs;    lastOfs=hint - ofs;    ofs=hint - tmp;  } else {    int maxOfs=len - hint;    while (ofs < maxOfs && key.compareTo(a[base + hint + ofs]) >= 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    lastOfs+=hint;    ofs+=hint;  }  if (DEBUG)   assert -1 <= lastOfs && lastOfs < ofs && ofs <= len;  lastOfs++;  while (lastOfs < ofs) {    int m=lastOfs + ((ofs - lastOfs) >>> 1);    if (key.compareTo(a[base + m]) < 0)     ofs=m; else     lastOfs=m + 1;  }  if (DEBUG)   assert lastOfs == ofs;  return ofs;}  }
class C{  public CompositeAction(long duration){  super(null,duration,Activity.DEFAULT_STEP_TIME);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public String escapeString(String str){  try {    return URLEncoder.encode(str,"utf8").replaceAll("\\+","%20");  } catch (  UnsupportedEncodingException e) {    return str;  }}  }
class C{  public DockMapPanel(PropertyHandler propertyHandler,boolean delayCreation){  super(propertyHandler,delayCreation);}  }
class C{  public void resetFocus(){}  }
class C{  private void initializeBlock() throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {  if (blockInitClass != null) {    blockInitClass.callStaticMethod(SymbolicNames.METHOD_BLOCK_INIT_INITIALIZE);  }}  }
class C{  public final void testFactoryMethodWithCharSequenceParameter(){  CharSequence errorMessage="errorMessage";  Validator<Object> validator=new AbstractValidatorImplementation("foo",true);  NegateValidator<Object> negateValidator=NegateValidator.create(errorMessage,validator);  assertEquals(errorMessage,negateValidator.getErrorMessage());  assertEquals(validator,negateValidator.getValidator());}  }
class C{  protected String encodeCookie(SerializableHttpCookie cookie){  if (cookie == null)   return null;  ByteArrayOutputStream os=new ByteArrayOutputStream();  try {    ObjectOutputStream outputStream=new ObjectOutputStream(os);    outputStream.writeObject(cookie);  } catch (  IOException e) {    Log.d(LOG_TAG,"IOException in encodeCookie",e);    return null;  }  return byteArrayToHexString(os.toByteArray());}  }
class C{  public Transform(double translateX,double translateY){  super(translateX,translateY);}  }
class C{  public void finish(int result){  super.finish(result);  if (!iamroot) {    fireMessage(root,M_FINISHED,null);    if (result == R_SUCCESS)     fireMessage(root,M_IDEAL_FOUND,null);  }}  }
class C{  public static String uncapitalise(String str){  if (str == null) {    return null;  } else   if (str.length() == 0) {    return "";  } else {    return new StringBuilder(str.length()).append(Character.toLowerCase(str.charAt(0))).append(str.substring(1)).toString();  }}  }
class C{  public static Bit valueOf(String bit) throws NumberFormatException {  final int i=Integer.parseInt(bit);  if (i != 0 && i != 1) {    throw new NumberFormatException("Input \"" + bit + "\" must be 0 or 1.");  }  return (i > 0) ? TRUE : FALSE;}  }
class C{  public void start(int AD_WF_Node_ID){  if (AD_WF_Node_ID == 0)   return;  for (int i=0; i < centerPanel.getComponentCount(); i++) {    Component comp=centerPanel.getComponent(i);    if (comp instanceof WFNode) {      WFNode node=(WFNode)comp;      if (node.getAD_WF_Node_ID() == AD_WF_Node_ID) {        start(node);        return;      }    }  }}  }
class C{  private static void reflectMap(){  for (  Field f : Properties.class.getFields()) {    if (f.isAnnotationPresent(Parameter.class)) {      Parameter p=f.getAnnotation(Parameter.class);      parameterMap.put(p.key(),f);      try {        defaultMap.put(f,f.get(null));      } catch (      Exception e) {        logger.error("Exception: " + e.getMessage(),e);      }    }  }}  }
class C{  private void resetArraysForTesting(boolean[] fired,DistributedMember[] member,String[] memberId,boolean[] isClient){  for (int i=0; i < fired.length; i++) {    fired[i]=false;    member[i]=null;    memberId[i]=null;    isClient[i]=false;  }}  }
class C{  @Override protected void onPause(){  super.onPause();  Log.d(TAG,"onPause() - another activity is taking focus (this activity is about to be \"paused\")");}  }
class C{  public synchronized EventBean assertOneGetOld(){  ScopeTestHelper.assertTrue("Listener invocation not received but expected",isInvoked);  ScopeTestHelper.assertEquals("Mismatch in the number of invocations",1,newDataList.size());  ScopeTestHelper.assertEquals("Mismatch in the number of invocations",1,oldDataList.size());  if (lastOldData == null) {    ScopeTestHelper.fail("No old-data events received");  }  ScopeTestHelper.assertEquals("Mismatch in the number of old-data events",1,lastOldData.length);  return lastOldData[0];}  }
class C{  private Method isSelfCall(InvokeInstruction inv){  ConstantPoolGen cpg=classContext.getConstantPoolGen();  JavaClass jclass=classContext.getJavaClass();  String calledClassName=inv.getClassName(cpg);  if (!calledClassName.equals(jclass.getClassName())) {    return null;  }  String calledMethodName=inv.getMethodName(cpg);  String calledMethodSignature=inv.getSignature(cpg);  boolean isStaticCall=(inv instanceof INVOKESTATIC);  Method[] methods=jclass.getMethods();  for (  Method method : methods) {    String methodName=method.getName();    String signature=method.getSignature();    boolean isStatic=method.isStatic();    if (methodName.equals(calledMethodName) && signature.equals(calledMethodSignature) && isStatic == isStaticCall) {      return wantCallsFor(method) ? method : null;    }  }  if (DEBUG) {    System.out.println("No method found for " + calledClassName + "."+ calledMethodName+ " : "+ calledMethodSignature);  }  return null;}  }
class C{  public boolean isRowValid(final int rowIndex){  if (rowIndex >= validRows.size()) {    return false;  }  return validRows.get(rowIndex);}  }
class C{  private void onListLoaded(@NotNull Map<String,List<GitHubRepository>> repositories){  this.repositories=repositories;  view.setAccountNames(repositories.keySet());  refreshProjectList();  view.showGithubPanel();}  }
class C{  private final void computeForwardPointers(){  if ((mapBuf.get(127) & (1 << 7)) != 0)   return;  System.out.printf("Computing forward pointers...\n");  StartEntry se=new StartEntry();  EndEntry ee=new EndEntry();  for (int i=0; i < numEntries; i++) {    boolean isStart=readEntry(i,se,ee);    if (!isStart) {      int offs=indexToFileOffs(ee.startIndex);      mapBuf.putInt(offs,i);    }  }  mapBuf.put(127,(byte)(1 << 7));  mapBuf.force();  System.out.printf("Computing forward pointers... done\n");}  }
class C{  public ArrayIndexOutOfBoundsException(java.lang.String s){  super(s);}  }
class C{  public long cacheSizeBytes(){  long result=0;  for (  Bitmap b : values()) {    if (b != null && !b.isRecycled()) {      result+=b.getRowBytes() * b.getHeight();    }  }  return result;}  }
class C{  public void free(){synchronized (this) {    if (freed) {      throw new IllegalStateException("Already freed.");    }    freed=true;    freeBuffers.clear();    freeBuffers=null;  }}  }
class C{  public T caseBinaryBitwiseExpression(BinaryBitwiseExpression object){  return null;}  }
class C{  private static boolean checkForThread(){  String name=Thread.currentThread().getName();  return !(name.startsWith(CacheClientUpdater.CLIENT_UPDATER_THREAD_NAME) || name.startsWith(SERVER_CONNECTION_THREAD));}  }
class C{  public static double sum(ArrayList<Double> list){  double sum=0;  for (int i=0; i < list.size(); i++) {    sum+=list.get(i);  }  return sum;}  }
class C{  public static final <Y>Predicate<Y> any(final Class<Y> c){  return null;}  }
class C{  public TetradLoggerEvent(Object source,TetradLoggerConfig config){  super(source);  this.config=config;}  }
class C{  public float[] $clone(){  throw Util.makeJavaArrayWrapperException();}  }
class C{  private boolean typesMatch(Class<V> valueType,Class getterType){  if (getterType != valueType) {    if (getterType.isPrimitive()) {      return (getterType == float.class && valueType == Float.class) || (getterType == int.class && valueType == Integer.class) || (getterType == boolean.class && valueType == Boolean.class)|| (getterType == long.class && valueType == Long.class)|| (getterType == double.class && valueType == Double.class)|| (getterType == short.class && valueType == Short.class)|| (getterType == byte.class && valueType == Byte.class)|| (getterType == char.class && valueType == Character.class);    }    return false;  }  return true;}  }
class C{  public void fix(CtClass clazz){  fix(clazz.getName());}  }
class C{  public int triple(int x,int n){  int r=x;  for (int i=0; i < n; i+=1) {    r=3 * r;  }  return r;}  }
class C{  protected void parseMorphShape(InStream in) throws IOException {  int id=in.readUI16();  Rect startBounds=new Rect(in);  Rect endBounds=new Rect(in);  SWFShape shape=tagtypes.tagDefineMorphShape(id,startBounds,endBounds);  if (shape == null) {    return;  }  int fillCount=in.readUI8();  if (fillCount == 0xff) {    fillCount=in.readUI16();  }  for (int i=0; i < fillCount; i++) {    parseMorphFillStyle(in,shape);  }  int lineCount=in.readUI8();  if (lineCount == 0xff) {    lineCount=in.readUI16();  }  for (int i=0; i < lineCount; i++) {    parseMorphLineStyle(in,shape);  }  parseShape(in,shape,false,true);  parseShape(in,shape,false,true);}  }
class C{  public HotSpotForeignCallLinkage registerForeignCall(ForeignCallDescriptor descriptor,long address,CallingConvention.Type outgoingCcType,RegisterEffect effect,Transition transition,boolean reexecutable,LocationIdentity... killedLocations){  Class<?> resultType=descriptor.getResultType();  assert address != 0;  assert transition != SAFEPOINT || resultType.isPrimitive() || Word.class.isAssignableFrom(resultType) : "non-leaf foreign calls must return objects in thread local storage: " + descriptor;  return register(HotSpotForeignCallLinkageImpl.create(metaAccess,codeCache,wordTypes,this,descriptor,address,effect,outgoingCcType,null,transition,reexecutable,killedLocations));}  }
class C{  @Deprecated public void findNoteOffset(NoteFilter filter,String guid,OnClientCallback<Integer> callback){  AsyncReflector.execute(mClient,callback,"findNoteOffset",mAuthenticationToken,filter,guid);}  }
class C{  public AbstractSimulatedDevice createSimulatedDevice(final String id,final String tenant,final Protocol protocol,final int pollDelaySec,final URL baseEndpoint,final String gatewayToken){  return createSimulatedDevice(id,tenant,protocol,pollDelaySec,baseEndpoint,gatewayToken,false);}  }
class C{  public MySQLAuthenticationProvider() throws GuacamoleException {  super(new MySQLInjectorProvider(),JDBCAuthenticationProviderService.class);}  }
class C{  public static Properties toTrimmedProperties(Properties props){  Properties trimmed=new Properties();  for (  String name : props.stringPropertyNames()) {    String val=props.getProperty(name);    val=val == null ? val : val.trim();    trimmed.setProperty(name,val);  }  return trimmed;}  }
class C{  public Builder<K> busyloop(){  return busyloop(true);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public boolean containsKey(int key){  return mCapabilities.containsKey(key);}  }
class C{  public SetDebuggerEventSettingsSynchronizer(final IDebugger debugger,final ListenerProvider<IDebugEventListener> listeners){  super(debugger,listeners);}  }
class C{  private void fillCoupons(final CustomerOrder customerOrder,final ShoppingCart shoppingCart) throws OrderAssemblyException {  if (!shoppingCart.getCoupons().isEmpty()) {    final List<String> appliedCouponCodes=shoppingCart.getAppliedCoupons();    if (!appliedCouponCodes.isEmpty()) {      for (      final String code : appliedCouponCodes) {        final PromotionCoupon coupon=promotionCouponService.findValidPromotionCoupon(code,shoppingCart.getCustomerEmail());        if (coupon == null) {          throw new CouponCodeInvalidException(code);        }        final PromotionCouponUsage usage=entityFactory.getByIface(PromotionCouponUsage.class);        usage.setCoupon(coupon);        usage.setCustomerEmail(shoppingCart.getCustomerEmail());        usage.setCustomerOrder(customerOrder);        customerOrder.getCoupons().add(usage);      }    }  }}  }
class C{  public Blade routeConf(String basePackage){  return routeConf(basePackage,"route.conf");}  }
class C{  public Pair<Pointer<T>,CLEvent> mapLater(CLQueue queue,MapFlags flags,long offset,long length,CLEvent... eventsToWaitFor) throws CLException.MapFailure {  return map(queue,flags,offset,length,false,eventsToWaitFor);}  }
class C{  public static TypeSubstitutionAction instantiateCreateTypeSubstitution(final JFrame owner,final TypeManager typeManager,final BaseType stackFrame,final INaviOperandTreeNode selectedNode){  return new TypeSubstitutionAction(owner,"Create type substitution",typeManager,stackFrame,selectedNode);}  }
class C{  private void bol(){  column=0;  collectingIndent=(maxIndent != 0);  indent=0;}  }
class C{  public boolean isEquals(int dimensionOfGeometryA,int dimensionOfGeometryB){  if (dimensionOfGeometryA != dimensionOfGeometryB) {    return false;  }  return isTrue(matrix[Location.INTERIOR][Location.INTERIOR]) && matrix[Location.INTERIOR][Location.EXTERIOR] == Dimension.FALSE && matrix[Location.BOUNDARY][Location.EXTERIOR] == Dimension.FALSE && matrix[Location.EXTERIOR][Location.INTERIOR] == Dimension.FALSE && matrix[Location.EXTERIOR][Location.BOUNDARY] == Dimension.FALSE;}  }
class C{  private RhinoScriptBuilder initScriptBuilder(){  try {    RhinoScriptBuilder builder=null;    if (scope == null) {      builder=RhinoScriptBuilder.newChain().evaluateChain(getScriptAsStream(),DEFAULT_CSSLINT_JS);      scope=builder.getScope();    } else {      builder=RhinoScriptBuilder.newChain(scope);    }    return builder;  } catch (  final IOException ex) {    throw new IllegalStateException("Failed reading init script",ex);  }}  }
class C{  public NumericLiteral(Object x){  if (x instanceof Number) {    m_number=(Number)x;    m_type=TypeLib.getPrimitiveType(m_number.getClass());  } else {    throw new IllegalArgumentException("Invalid type!");  }}  }
class C{  public static NotificationCompat.Builder from(Context context,MediaSessionCompat mediaSession){  MediaControllerCompat controller=mediaSession.getController();  MediaMetadataCompat mediaMetadata=controller.getMetadata();  MediaDescriptionCompat description=mediaMetadata.getDescription();  NotificationCompat.Builder builder=new NotificationCompat.Builder(context);  builder.setContentTitle(description.getTitle()).setContentText(description.getSubtitle()).setSubText(description.getDescription()).setContentIntent(controller.getSessionActivity()).setVisibility(NotificationCompat.VISIBILITY_PUBLIC).setWhen(0).setShowWhen(false);  if (description.getIconBitmap() == null) {    builder.setLargeIcon(BitmapFactory.decodeResource(context.getResources(),R.drawable.art_default));  } else {    builder.setLargeIcon(description.getIconBitmap());  }  return builder;}  }
class C{  private CBreakpointTableHelpers(){}  }
class C{  public boolean isRfQResponseAccepted(){  Object oo=get_Value(COLUMNNAME_IsRfQResponseAccepted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void paintDesktopIconBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public int writeInt(int x,final int len) throws IOException {  if (len < 0 || len > 32)   throw new IllegalArgumentException("You cannot write " + len + " bits to an integer.");  if (len <= free)   return writeInCurrent(x,len);  int i=len - free;  final int queue=i & 7;  if (free != 0)   writeInCurrent(x >>> i,free);  if (queue != 0) {    i-=queue;    writeInCurrent(x,queue);    x>>>=queue;  }  if (i == 32)   write(x >>> 24);  if (i > 23)   write(x >>> 16);  if (i > 15)   write(x >>> 8);  if (i > 7)   write(x);  writtenBits+=i;  return len;}  }
class C{  protected void splitNodes(BallNode node,int depth,final double rootRadius) throws Exception {  if (node.m_NumInstances <= m_MaxInstancesInLeaf || (rootRadius == 0 ? true : node.m_Radius / rootRadius < m_MaxRelLeafRadius)) {    return;  }  m_NumLeaves--;  m_Splitter.splitNode(node,m_NumNodes);  m_NumNodes+=2;  m_NumLeaves+=2;  if (m_MaxDepth < depth) {    m_MaxDepth=depth;  }  splitNodes(node.m_Left,depth + 1,rootRadius);  splitNodes(node.m_Right,depth + 1,rootRadius);  if (m_FullyContainChildBalls) {    double radius=BallNode.calcRadius(node.m_Left,node.m_Right,node.getPivot(),m_DistanceFunction);    node.setRadius(radius);  }}  }
class C{  public double divergence(BayesNet other){  try {    Sync(other);    double D=0.0;    int nNodes=m_Instances.numAttributes();    int[] nCard=new int[nNodes];    for (int iNode=0; iNode < nNodes; iNode++) {      nCard[iNode]=m_Instances.attribute(iNode).numValues();    }    int[] x=new int[nNodes];    int i=0;    while (i < nNodes) {      x[i]++;      while (i < nNodes && x[i] == m_Instances.attribute(i).numValues()) {        x[i]=0;        i++;        if (i < nNodes) {          x[i]++;        }      }      if (i < nNodes) {        i=0;        double P=1.0;        for (int iNode=0; iNode < nNodes; iNode++) {          int iCPT=0;          for (int iParent=0; iParent < m_ParentSets[iNode].getNrOfParents(); iParent++) {            int nParent=m_ParentSets[iNode].getParent(iParent);            iCPT=iCPT * nCard[nParent] + x[nParent];          }          P=P * m_Distributions[iNode][iCPT].getProbability(x[iNode]);        }        double Q=1.0;        for (int iNode=0; iNode < nNodes; iNode++) {          int iCPT=0;          for (int iParent=0; iParent < other.getParentSet(m_order[iNode]).getNrOfParents(); iParent++) {            int nParent=m_order[other.getParentSet(m_order[iNode]).getParent(iParent)];            iCPT=iCPT * nCard[nParent] + x[nParent];          }          Q=Q * other.m_Distributions[m_order[iNode]][iCPT].getProbability(x[iNode]);        }        if (P > 0.0 && Q > 0.0) {          D=D + P * Math.log(Q / P);        }      }    }    return D;  } catch (  Exception e) {    System.err.println(e.getMessage());    return 0;  }}  }
class C{  private IgfsMessage processHandshakeRequest(IgfsHandshakeRequest req) throws IgniteCheckedException {  if (req.gridName() != null && !F.eq(ctx.gridName(),req.gridName()))   throw new IgniteCheckedException("Failed to perform handshake because existing Grid name " + "differs from requested [requested=" + req.gridName() + ", existing="+ ctx.gridName()+ ']');  if (req.igfsName() != null && !F.eq(igfs.name(),req.igfsName()))   throw new IgniteCheckedException("Failed to perform handshake because existing IGFS name " + "differs from requested [requested=" + req.igfsName() + ", existing="+ igfs.name()+ ']');  IgfsControlResponse res=new IgfsControlResponse();  igfs.clientLogDirectory(req.logDirectory());  IgfsHandshakeResponse handshake=new IgfsHandshakeResponse(igfs.name(),igfs.proxyPaths(),igfs.groupBlockSize(),igfs.globalSampling());  res.handshake(handshake);  return res;}  }
class C{  public ObjectFactory(){}  }
class C{  public LoggingFraction customHandler(String name,String module,String className,Properties properties,String formatter){  Map<Object,Object> handlerProperties=new HashMap<>();  final Enumeration<?> names=properties.propertyNames();  while (names.hasMoreElements()) {    final String nextElement=(String)names.nextElement();    handlerProperties.put(nextElement,properties.getProperty(nextElement));  }  customHandler(new CustomHandler(name).module(module).attributeClass(className).formatter(formatter).properties(handlerProperties));  return this;}  }
class C{  public NoiseWord(Locale locale,List<String> noiseWords){  this.locale=locale;  this.noiseWords=noiseWords;  removeWords=true;}  }
class C{  public Segment currentSegment(){  return currentSegment != null ? currentSegment : lastSegment();}  }
class C{  public String toString(){  return super.toString() + "{rangeCount=" + rangeCount+ ",shardCount="+ shardCount+ ",cost="+ cost+ "}";}  }
class C{  @Override public MutableSet<T> with(T element){  this.add(element);  return this;}  }
class C{  public double top(){  if (numObjs <= 0)   return 0; else   return objs[numObjs - 1];}  }
class C{  private void compareFunctionsAndProcedures() throws SQLException {  final Vector<String> functionNamesDB1=new Vector<String>();  final Vector<String> functionNamesDB2=new Vector<String>();  String sql="select object_name from user_procedures order by object_name";  ResultSet rs=stmtdb1.executeQuery(sql);  while (rs.next()) {    functionNamesDB1.add(rs.getString("OBJECT_NAME"));  }  rs.close();  rs=stmtdb2.executeQuery(sql);  while (rs.next()) {    functionNamesDB2.add(rs.getString("OBJECT_NAME"));  }  rs.close();  for (int i=0; i < functionNamesDB2.size(); i++) {    if (functionNamesDB1.contains(functionNamesDB2.get(i))) {      sql="select text from user_source where name='" + functionNamesDB2.get(i) + "'";      rs=stmtdb1.executeQuery(sql);      String text1="";      String text2="";      if (rs.next()) {        text1=rs.getString("TEXT");      }      rs.close();      rs=stmtdb2.executeQuery(sql);      if (rs.next()) {        text2=rs.getString("TEXT");      }      rs.close();      if (!text2.equals(text1)) {        System.out.println("FUNCTION OR PROCEDURE " + functionNamesDB2.get(i) + " HAS CHANGED - please check it for customizations");        rs=stmtdb2.executeQuery("select text from user_source where name='" + functionNamesDB2.get(i) + "'");        String createStatement="create or replace ";        while (rs.next()) {          createStatement+=rs.getString("TEXT");        }        m_newFunctionStatements.add(createStatement);      }    }  }  System.out.println("searching new functions/procedures ...");  final Vector<String> newFunctions=getNewElements(functionNamesDB1,functionNamesDB2);  for (int i=0; i < newFunctions.size(); i++) {    rs=stmtdb2.executeQuery("select text from user_source where name='" + newFunctions.get(i) + "'");    String createStatement=" CREATE OR REPLACE ";    while (rs.next()) {      createStatement+=rs.getString("TEXT");    }    m_newFunctionStatements.add(createStatement);  }  final Vector<String> missingFunctions=getMissingElements(functionNamesDB1,functionNamesDB2);  for (int i=0; i < missingFunctions.size(); i++) {    m_dropFunctionStatements.add(" DROP FUNCTION " + missingFunctions.get(i) + ";");  }}  }
class C{  public static boolean isActiveInCurrentServerContext(Object obj){  boolean hasTestServerAnnotation=obj.getClass().isAnnotationPresent(TestServerOnly.class);  boolean isTestServer=isTestServer();  if (!isTestServer) {    return !hasTestServerAnnotation;  }  return true;}  }
class C{  public Word(String word,String displayAs,String... soundsLike){  this();  this.word=word;  this.displayAs=displayAs;  this.soundsLike=Arrays.asList(soundsLike);}  }
class C{  public FastByteBuffer append(FastByteBuffer buff){  if (buff.size == 0) {    return this;  }  for (int i=0; i < buff.currentBufferIndex; i++) {    append(buff.buffers[i]);  }  append(buff.currentBuffer,0,buff.offset);  return this;}  }
class C{  @AfterClass public static void tearDownAfterClass() throws Exception {}  }
class C{  public static Double hoeffdingPhred(double trials,double observed,double prob){  if (trials == 0) {    return null;  }  final double hoeffding=hoeffdingLn(trials,observed,prob);  return lnToPhred(hoeffding);}  }
class C{  protected void configureJndi(){  try {    System.setProperty(Context.INITIAL_CONTEXT_FACTORY,"org.apache.xbean.spring.jndi.SpringInitialContextFactory");    initialContext=new InitialContext();  } catch (  NamingException ex) {    logger.error("Error configurando jndi para los test:" + ex.getLocalizedMessage());  }}  }
class C{  static boolean isOkay(byte[] reply){  return reply[0] == (byte)'O' && reply[1] == (byte)'K' && reply[2] == (byte)'A' && reply[3] == (byte)'Y';}  }
class C{  public FluidSolver2D(int w,int h,float timeStep){  this.width=w;  this.height=h;  this.totalWidth=w + 2;  this.totalHeight=h + 2;  this.timeStep=timeStep;  size=totalWidth * totalHeight;  d=new float[size];  dOld=new float[size];  u=new float[size];  uOld=new float[size];  v=new float[size];  vOld=new float[size];  curl=new float[size];  reset();}  }
class C{  public void shuttingDown(){  if (useChildLogging()) {    switchLogs(this.cfg.getLogFile(),true);  }}  }
class C{  void notifyAfterCompletion(int status) throws SystemException {  Iterator iterator=syncList.iterator();  while (iterator.hasNext()) {    sync=((Synchronization)iterator.next());    sync.afterCompletion(status);  }}  }
class C{  private void checkRead() throws JMSException {  if (bodyWriteOnly) {    throw new MessageNotReadableException("readByte while the buffer is writeonly");  }  if (istream == null || m == null) {    istream=new ByteArrayInputStream(internalArray);    m=new DataInputStream(istream);  }}  }
class C{  public boolean closeIt(){  log.info("closeIt - " + toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_CLOSE);  if (m_processMsg != null)   return false;  setDocAction(DOCACTION_None);  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_CLOSE);  if (m_processMsg != null)   return false;  return true;}  }
class C{  public void cancelTargetSelection() throws DebugException {  try {    m_debugger.cancelTargetSelection();    m_debugger.setTerminated();  } catch (  final DebugExceptionWrapper exception) {    throw new DebugException(exception);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:55.713 -0500",hash_original_method="7BE73C32984884B73E2CBD0093BD938F",hash_generated_method="CAA74B85F92E70EE9F2DCD9983DD7A3A") private static String combineLibs(String[] list1,String[] list2){  StringBuilder result=new StringBuilder(300);  boolean first=true;  if (list1 != null) {    for (    String s : list1) {      if (first) {        first=false;      } else {        result.append(':');      }      result.append(s);    }  }  boolean dupCheck=!first;  if (list2 != null) {    for (    String s : list2) {      if (dupCheck && ArrayUtils.contains(list1,s)) {        continue;      }      if (first) {        first=false;      } else {        result.append(':');      }      result.append(s);    }  }  return result.toString();}  }
class C{  public static boolean addSmiles(Context context,Spannable spannable){  boolean hasChanges=false;  for (  Entry<Pattern,Integer> entry : emoticons.entrySet()) {    Matcher matcher=entry.getKey().matcher(spannable);    while (matcher.find()) {      boolean set=true;      for (      ImageSpan span : spannable.getSpans(matcher.start(),matcher.end(),ImageSpan.class))       if (spannable.getSpanStart(span) >= matcher.start() && spannable.getSpanEnd(span) <= matcher.end())       spannable.removeSpan(span); else {        set=false;        break;      }      if (set) {        hasChanges=true;        spannable.setSpan(new ImageSpan(context,entry.getValue()),matcher.start(),matcher.end(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);      }    }  }  return hasChanges;}  }
class C{  protected boolean isClientNotification(){  return ((descriptor & CLIENT_NOTIFICATION_MASK) != 0);}  }
class C{  public DeityType addDeityType(String enumName,String name){  return EnumHelper.addEnum(DeityType.class,enumName,new Class[]{String.class},name);}  }
class C{  public InvalidDatabaseException(final Exception exception){  super(exception);}  }
class C{  public KMLSimpleData(String namespaceURI){  super(namespaceURI);}  }
class C{  public void initializeReceipientDSIds(List<Integer> originalGatewaysReceivers){  this.receipientDSIds=new HashSet<Integer>();  for (  Integer id : originalGatewaysReceivers) {    this.receipientDSIds.add(id);  }}  }
class C{  public T caseCodeLang_(CodeLang_ object){  return null;}  }
class C{  public static String normalizeEmailAddress(String address){  assert isEmailAddress(address);  return address.toLowerCase();}  }
class C{  public void cancelStatement(int id){  for (  Transfer transfer : transferList) {    try {      Transfer trans=transfer.openNewConnection();      trans.init();      trans.writeInt(clientVersion);      trans.writeInt(clientVersion);      trans.writeString(null);      trans.writeString(null);      trans.writeString(sessionId);      trans.writeInt(SessionRemote.SESSION_CANCEL_STATEMENT);      trans.writeInt(id);      trans.close();    } catch (    IOException e) {      trace.debug(e,"could not cancel statement");    }  }}  }
class C{  @Override public void onStop(){  stopChronometers();  if (ctlr != null) {    try {      ctlr.stop();    } catch (    Exception e) {      ctlr.postError(ErrorConstants.ERROR_STOPPING,e);      Log.e(getClass().getSimpleName(),"Exception stopping controller",e);    }  }  EventBus.getDefault().unregister(this);  super.onStop();}  }
class C{  public Object remove(Object key){  return remove((Object[])key);}  }
class C{  public void resumeEncoding(){  this.suspendEncoding=false;}  }
class C{  public static IRegion[] findLocations(String text){  if (text == null || text.length() == 0) {    return new IRegion[0];  }  Matcher matcher=Location.LOCATION_MATCHER.matcher(text);  Vector<IRegion> regions=new Vector<IRegion>();  while (matcher.find()) {    regions.add(new Region(matcher.start(),matcher.end() - matcher.start()));  }  matcher=Location.LOCATION_MATCHER4.matcher(text);  while (matcher.find()) {    regions.add(new Region(matcher.start(),matcher.end() - matcher.start()));  }  return regions.toArray(new IRegion[regions.size()]);}  }
class C{  public SGDMomentum(double momentum){  this(momentum,true);}  }
class C{  public static ProfileFragment newInstance(boolean showTabBar){  ProfileFragment fragment=new ProfileFragment();  Bundle args=new Bundle();  args.putBoolean(SHOW_TAB_BAR,showTabBar);  fragment.setArguments(args);  return fragment;}  }
class C{  public PVector cross(PVector v){  return cross(v,null);}  }
class C{  public ForceMergeRequest flush(boolean flush){  this.flush=flush;  return this;}  }
class C{  @Override public Column provideColumn(int cubeX,int cubeZ){  return getColumn(cubeX,cubeZ,Requirement.GENERATE);}  }
class C{  public ElemTemplateElement appendChild(ElemTemplateElement newChild){  error(XSLTErrorResources.ER_CANNOT_ADD,new Object[]{newChild.getNodeName(),this.getNodeName()});  return null;}  }
class C{  protected <T extends BlockObject>void addConsistencyGroupTasks(List<T> objects,TaskList taskList,String taskId,ResourceOperationTypeEnum operationTypeEnum){  Set<URI> consistencyGroups=new HashSet<>();  for (  T object : objects) {    if (!isNullURI(object.getConsistencyGroup())) {      consistencyGroups.add(object.getConsistencyGroup());    }  }  if (consistencyGroups.isEmpty()) {    return;  }  Iterator<BlockConsistencyGroup> groups=_dbClient.queryIterativeObjects(BlockConsistencyGroup.class,consistencyGroups);  while (groups.hasNext()) {    BlockConsistencyGroup group=groups.next();    Operation op=_dbClient.createTaskOpStatus(BlockConsistencyGroup.class,group.getId(),taskId,operationTypeEnum);    group.getOpStatus().put(taskId,op);    taskList.getTaskList().add(TaskMapper.toTask(group,taskId,op));  }}  }
class C{  private static void compressLongestRunOfZeroes(int[] hextets){  int bestRunStart=-1;  int bestRunLength=-1;  int runStart=-1;  for (int i=0; i < hextets.length + 1; i++) {    if (i < hextets.length && hextets[i] == 0) {      if (runStart < 0) {        runStart=i;      }    } else     if (runStart >= 0) {      int runLength=i - runStart;      if (runLength > bestRunLength) {        bestRunStart=runStart;        bestRunLength=runLength;      }      runStart=-1;    }  }  if (bestRunLength >= 2) {    Arrays.fill(hextets,bestRunStart,bestRunStart + bestRunLength,-1);  }}  }
class C{  public boolean intersects(Rectangle2D r){  return intersects(r.getX(),r.getY(),r.getWidth(),r.getHeight());}  }
class C{  private void processAnsiCommand_K(){  int ansiParameter=0;  if (ansiParameters[0].length() > 0)   ansiParameter=getAnsiParameter(0);switch (ansiParameter) {case 0:    break;case 1:  break;case 2:break;default :Logger.log("Unexpected K-command parameter: " + ansiParameter);break;}}  }
class C{  public int oom_score() throws IOException {  return Integer.parseInt(read("oom_score"));}  }
class C{  public void render(FrameBuffer dest,boolean draw){  captureEnd();  if (!hasCaptured) {    return;  }  Array<PostProcessorEffect> items=enabledEffects;  int count=items.size;  if (count > 0) {    Gdx.gl.glDisable(GL20.GL_CULL_FACE);    Gdx.gl.glDisable(GL20.GL_DEPTH_TEST);    if (count > 1) {      for (int i=0; i < count - 1; i++) {        PostProcessorEffect e=items.get(i);        composite.capture();{          e.render(composite.getSourceBuffer(),composite.getResultBuffer());        }      }      composite.end();    }    if (listener != null && dest == null) {      listener.beforeRenderToScreen();    }    if (draw)     items.get(count - 1).render(composite.getResultBuffer(),dest);    Gdx.gl.glActiveTexture(GL20.GL_TEXTURE0);  } else {    Gdx.app.log("PostProcessor","No post-processor effects enabled, aborting render");  }}  }
class C{  protected void assertEquals(Message m1,Message m2) throws JMSException {  assertEquals("",m1,m2);}  }
class C{  public boolean isReplicated(){  Object oo=get_Value(COLUMNNAME_IsReplicated);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void saveDefaultsToProperties(Properties properties){  LineSet.saveDefaultsToProperties(properties);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected void checkRange(final Date d,final boolean extrapolate){  QL.require(d.ge(referenceDate()),"date before reference date");  QL.require(extrapolate || allowsExtrapolation() || d.le(maxDate()),"date is past max curve");}  }
class C{  protected final void updateAssistState(){  if (!BuildInfo.isMncOrLater())   return;  boolean isAssistSupported=isAssistSupported();  if (mAssistSupported == null || mAssistSupported != isAssistSupported) {    if (mSetAssistBlockedMethod == null) {      try {        mSetAssistBlockedMethod=View.class.getMethod("setAssistBlocked",boolean.class);      } catch (      NoSuchMethodException e) {        return;      }    }    View rootContent=mActivity.findViewById(android.R.id.content);    try {      mSetAssistBlockedMethod.invoke(rootContent,!isAssistSupported);    } catch (    IllegalAccessException|IllegalArgumentException|InvocationTargetException e) {      return;    }  }  mAssistSupported=isAssistSupported;}  }
class C{  public boolean deleteCalendar(String calName) throws SchedulerException {  return sched.deleteCalendar(calName);}  }
class C{  public TreePath next(){  if (queue.isEmpty()) {    return null;  }  TreePath next=queue.removeLast();  node=next.getLastPathComponent();  int n=tree.getChildCount(node);  for (int i=0; i < n; i++) {    queue.addFirst(next.pathByAddingChild(tree.getChild(node,i)));  }  return next;}  }
class C{  public synchronized void preferenceChanged(View child,boolean width,boolean height){  if (child == null) {    getParent().preferenceChanged(this,width,height);  } else {    if (changing != null) {      View cv=changing.getChildView();      if (cv == child) {        changing.preferenceChanged(width,height);        return;      }    }    int index=getViewIndex(child.getStartOffset(),Position.Bias.Forward);    ChildState cs=getChildState(index);    cs.preferenceChanged(width,height);    LayoutQueue q=getLayoutQueue();    q.addTask(cs);    q.addTask(flushTask);  }}  }
class C{  public int findCelebrity(int n){  int candidate=0;  for (int i=1; i < n; i++) {    if (knows(candidate,i)) {      candidate=i;    }  }  for (int i=0; i < candidate; i++) {    if (knows(candidate,i)) {      return -1;    }  }  for (int i=candidate + 1; i < n; i++) {    if (!knows(i,candidate)) {      return -1;    }  }  return candidate;}  }
class C{  protected String logFailedRowChangeSQL(StringBuffer stmt,OneRowChange oneRowChange){  try {    ArrayList<OneRowChange.ColumnSpec> keys=oneRowChange.getKeySpec();    ArrayList<OneRowChange.ColumnSpec> columns=oneRowChange.getColumnSpec();    ArrayList<ArrayList<OneRowChange.ColumnVal>> keyValues=oneRowChange.getKeyValues();    ArrayList<ArrayList<OneRowChange.ColumnVal>> columnValues=oneRowChange.getColumnValues();    String log="Failing statement : " + stmt.toString() + "\nArguments:";    for (int row=0; row < columnValues.size() || row < keyValues.size(); row++) {      log+=logFailedRowChangeValues(keys,columns,keyValues,columnValues,row);    }    if (log.length() > maxSQLLogLength)     log=log.substring(0,maxSQLLogLength);    return log;  } catch (  Exception e) {    if (logger.isDebugEnabled())     logger.debug("logFailedRowChangeSQL failed to log, because: " + e.getMessage());  }  return null;}  }
class C{  public void translateX(float units){  this.position.x+=units;  updated=false;}  }
class C{  public static TokenOnWire createTokenOnWire(BaseToken t){  TokenOnWire tw=new TokenOnWire(t.getId(),BaseToken.isProxyToken(t));  return tw;}  }
class C{  @After public void tearDown() throws Exception {}  }
class C{  public static void shuffle(List<?> list){  shuffle(list,new Random());}  }
class C{  public SimpleFragmentIntent<F> putExtra(String name,Parcelable[] value){  if (extras == null) {    extras=new Bundle();  }  extras.putParcelableArray(name,value);  return this;}  }
class C{  public Task<StorageSystemRestRep> deactivate(URI id){  return doDeactivateWithTask(id);}  }
class C{  protected boolean accepts(final IN input){  return false;}  }
class C{  private void initRange(){  mMinValue=MathHelper.NULL_VALUE;  mMaxValue=MathHelper.NULL_VALUE;  int length=getItemCount();  for (int k=0; k < length; k++) {    updateRange(getValue(k));  }}  }
class C{  public PlayAction(TicTacToeBoard board){  this.board=board;}  }
class C{  @Override public Writer append(CharSequence value){  builder.append(value);  return this;}  }
class C{  @RequestMapping(value="/bloodPressures",method=RequestMethod.PUT,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<BloodPressure> update(@Valid @RequestBody BloodPressure bloodPressure) throws URISyntaxException {  log.debug("REST request to update BloodPressure : {}",bloodPressure);  if (bloodPressure.getId() == null) {    return create(bloodPressure);  }  BloodPressure result=bloodPressureRepository.save(bloodPressure);  bloodPressureSearchRepository.save(bloodPressure);  return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert("bloodPressure",bloodPressure.getId().toString())).body(result);}  }
class C{  public static UglifyJs beautifyJs(){  return new UglifyJs(Type.BEAUTIFY);}  }
class C{  public FileShareExport(List<String> clients,String securityType,String permissions,String rootUserMapping,String protocol,String storagePortName,String storagePort){  _clients=clients;  for (  String secType : securityType.split(SEC_SEPARATOR)) {    if (_securityType == null) {      _securityType=new HashSet<SecurityTypes>();    }    _securityType.add(Enum.valueOf(SecurityTypes.class,secType.trim()));  }  _permissions=Enum.valueOf(Permissions.class,permissions);  _rootUserMapping=rootUserMapping;  _storagePortName=storagePortName;  _protocol=Enum.valueOf(StorageProtocol.File.class,protocol);  _storagePort=storagePort;}  }
class C{  public static boolean dumpVMNamespace(String namespace){  return ri.dumpVMNamespace(namespace);}  }
class C{  static RouteBuilder trace(String path){  return builder().trace(path);}  }
class C{  public TDoubleObjectHashMap(int initialCapacity){  super(initialCapacity);  _hashingStrategy=this;}  }
class C{  @PreAuthorize("isAuthenticated ()") @Transactional(readOnly=false,propagation=Propagation.REQUIRED) @Caching(evict={@CacheEvict(value="user",key="#user.id"),@CacheEvict(value="user",key="#user.username")}) public void selfUpdateUser(User user) throws RootNotModifiableException, RequiredFieldMissingException, EmailNotSentException {  User u=userDao.read(user.getId());  checkRoot(u);  u.setEmail(user.getEmail());  u.setFirstname(user.getFirstname());  u.setLastname(user.getLastname());  u.setAddress(user.getAddress());  u.setPhone(user.getPhone());  u.setCountry(user.getCountry());  u.setUsage(user.getUsage());  u.setSubUsage(user.getSubUsage());  u.setDomain(user.getDomain());  u.setSubDomain(user.getSubDomain());  checkRequiredFields(u);  userDao.update(u);}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  static void assertSanity(int alignCode){  if (VM.VerifyAssertions) {    VM._assert(alignCode == ALIGN_CODE_NONE || (alignCode >= 0 && alignCode < MAX_ALIGN_WORDS));  }}  }
class C{  private long computeMethodHash(){  long hash=0;  ByteArrayOutputStream sink=new ByteArrayOutputStream(512);  try {    MessageDigest md=MessageDigest.getInstance("SHA");    DataOutputStream out=new DataOutputStream(new DigestOutputStream(sink,md));    String methodString=getNameAndDescriptor();    if (env.verbose()) {      System.out.println("[string used for method hash: \"" + methodString + "\"]");    }    out.writeUTF(methodString);    out.flush();    byte hashArray[]=md.digest();    for (int i=0; i < Math.min(8,hashArray.length); i++) {      hash+=((long)(hashArray[i] & 0xFF)) << (i * 8);    }  } catch (  IOException e) {    throw new Error("unexpected exception computing intetrface hash: " + e);  }catch (  NoSuchAlgorithmException e) {    throw new Error("unexpected exception computing intetrface hash: " + e);  }  return hash;}  }
class C{  @Override public int describeContents(){  return 0;}  }
class C{  @AssistedInject public UserContextResource(@Assisted UserContext userContext){  this.userContext=userContext;}  }
class C{  public void stop(){  if (mRunning.compareAndSet(true,false)) {    if (mSource != null) {      mSource.stop();switch (mSource.getSampleType()) {case COMPLEX:        ((ComplexSource)mSource).removeListener(mComplexBufferBroadcaster);      break;case REAL:    ((RealSource)mSource).removeListener(mFilteredRealBufferBroadcaster);  break;default :throw new IllegalArgumentException("Unrecognized source " + "sample type - cannot start processing chain");}mSource.dispose();mSource=null;}for (Module module : mModules) {module.stop();}}}  }
class C{  private IncomingMessageEnvelope fetchEnvelope(){  PendingEnvelope pendingEnvelope=pendingEnvelopQueue.remove();  int queueSize=pendingEnvelopQueue.size();  taskMetrics.pendingMessages().set(queueSize);  log.trace("fetch envelope ssp {} offset {} to process.",pendingEnvelope.envelope.getSystemStreamPartition(),pendingEnvelope.envelope.getOffset());  log.debug("Task {} pending envelopes count is {} after fetching.",taskName,queueSize);  if (pendingEnvelope.markProcessed()) {    SystemStreamPartition partition=pendingEnvelope.envelope.getSystemStreamPartition();    consumerMultiplexer.tryUpdate(partition);    log.debug("Update chooser for " + partition);  }  return pendingEnvelope.envelope;}  }
class C{  public void test_read_writeBoolean() throws IOException {  RandomAccessFile raf=new java.io.RandomAccessFile(fileName,"rw");  raf.writeBoolean(true);  raf.writeBoolean(false);  raf.seek(0);  assertEquals("Test 1: Incorrect value written or read;",true,raf.readBoolean());  assertEquals("Test 2: Incorrect value written or read;",false,raf.readBoolean());  try {    raf.readBoolean();    fail("Test 3: EOFException expected.");  } catch (  EOFException e) {  }  raf.close();  try {    raf.writeBoolean(false);    fail("Test 4: IOException expected.");  } catch (  IOException e) {  }  try {    raf.readBoolean();    fail("Test 5: IOException expected.");  } catch (  IOException e) {  }}  }
class C{  public void verify(PublicKey publicKey,int responseCode,String signedData,String signature){  String userId=null;  ResponseData data=null;  if (responseCode == LICENSED || responseCode == NOT_LICENSED || responseCode == LICENSED_OLD_KEY) {    try {      Signature sig=Signature.getInstance(SIGNATURE_ALGORITHM);      sig.initVerify(publicKey);      sig.update(signedData.getBytes());      if (!sig.verify(Base64.decode(signature))) {        Log.e(TAG,"Signature verification failed.");        handleInvalidResponse();        return;      }    } catch (    Base64DecoderException e) {      Log.e(TAG,"Could not Base64-decode signature.");      handleInvalidResponse();      return;    }catch (    Exception e) {      throw new RuntimeException(e);    }    try {      data=ResponseData.parse(signedData);    } catch (    IllegalArgumentException e) {      Log.e(TAG,"Could not parse response.");      handleInvalidResponse();      return;    }    if (data.responseCode != responseCode) {      Log.e(TAG,"Response codes don't match.");      handleInvalidResponse();      return;    }    if (data.nonce != mNonce) {      Log.e(TAG,"Nonce doesn't match.");      handleInvalidResponse();      return;    }    if (!data.packageName.equals(mPackageName)) {      Log.e(TAG,"Package name doesn't match.");      handleInvalidResponse();      return;    }    if (!data.versionCode.equals(mVersionCode)) {      Log.e(TAG,"Version codes don't match.");      handleInvalidResponse();      return;    }    userId=data.userId;    if (TextUtils.isEmpty(userId)) {      Log.e(TAG,"User identifier is empty.");      handleInvalidResponse();      return;    }  }switch (RANDOM ^ ~responseCode) {case RANDOM ^ ~LICENSED:case RANDOM ^ ~LICENSED_OLD_KEY:    int limiterResponse=mDeviceLimiter.isDeviceAllowed(userId);  handleResponse(limiterResponse,data);break;case RANDOM ^ ~NOT_LICENSED:handleResponse(Policy.NOT_LICENSED,data);break;case RANDOM ^ ~ERROR_CONTACTING_SERVER:Log.w(TAG,"Error contacting licensing server.");handleResponse(Policy.RETRY,data);break;case RANDOM ^ ~ERROR_SERVER_FAILURE:Log.w(TAG,"An error has occurred on the licensing server.");handleResponse(Policy.RETRY,data);break;case RANDOM ^ ~ERROR_OVER_QUOTA:Log.w(TAG,"Licensing server is refusing to talk to this device, over quota.");handleResponse(Policy.RETRY,data);break;case RANDOM ^ ~ERROR_INVALID_PACKAGE_NAME:handleApplicationError(LicenseCheckerCallback.ERROR_INVALID_PACKAGE_NAME);break;case RANDOM ^ ~ERROR_NON_MATCHING_UID:handleApplicationError(LicenseCheckerCallback.ERROR_NON_MATCHING_UID);break;case RANDOM ^ ~ERROR_NOT_MARKET_MANAGED:handleApplicationError(LicenseCheckerCallback.ERROR_NOT_MARKET_MANAGED);break;default :Log.e(TAG,"Unknown response code for license check.");handleInvalidResponse();}}  }
class C{  protected MessageDigest(String algorithm){  this.algorithm=algorithm;}  }
class C{  private void isiUnexport(IsilonApi isi,FileDeviceInputOutput args,List<FileExport> exports) throws ControllerException, IsilonException {  FSExportMap currentExports=args.getFileObjExports();  if (currentExports == null || exports == null || exports.isEmpty()) {    return;  }  for (  FileExport fileExport : exports) {    String key=fileExport.getFileExportKey();    String id=null;    FileExport fExport=currentExports.get(key);    if (fExport != null) {      id=fExport.getIsilonId();    }    if (id != null) {      String zoneName=getZoneName(args.getvNAS());      if (zoneName != null) {        isi.deleteExport(id,zoneName);      } else {        isi.deleteExport(id);      }      currentExports.remove(key);    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeelementnodevalue.class,args);}  }
class C{  public colgroup addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public String nextLine(){  if (hasNextPattern == linePattern())   return getCachedResult();  clearCaches();  String result=findWithinHorizon(linePattern,0);  if (result == null)   throw new NoSuchElementException("No line found");  MatchResult mr=this.match();  String lineSep=mr.group(1);  if (lineSep != null)   result=result.substring(0,result.length() - lineSep.length());  if (result == null)   throw new NoSuchElementException(); else   return result;}  }
class C{  public InputStreamReaderSource(InputStream stream,CompilerConfiguration configuration){  super(configuration);  this.stream=stream;}  }
class C{  public int parseSpecification(Spec spec,IProgressMonitor monitor){  IResource parseResource=spec.getRootFile();  TLAMarkerHelper.removeProblemMarkers(parseResource.getProject(),monitor,TLAMarkerHelper.TOOLBOX_MARKERS_TLAPARSER_MARKER_ID);  ParseResult result=moduleParser.parseModule(parseResource,monitor);  spec.setStatus(result.getStatus());  if (!AdapterFactory.isProblemStatus(result.getStatus())) {    spec.setSpecObj(result.getSpecObj());  }  return result.getStatus();}  }
class C{  public String toString(String indentStr){  try {    final StringBuilder builder=new StringBuilder();    builder.append(indentStr).append("ValidationContext[").append('\n');    indentStr+="\t";    builder.append(indentStr).append("Certificates[").append('\n');    indentStr+="\t";    for (    CertificateToken certToken : processedCertificates) {      builder.append(certToken.toString(indentStr));    }    indentStr=indentStr.substring(1);    builder.append(indentStr).append("],\n");    indentStr=indentStr.substring(1);    builder.append(indentStr).append("],\n");    return builder.toString();  } catch (  Exception e) {    return super.toString();  }}  }
class C{  private TimeUtils(Context context){  getLastDayTime(context);}  }
class C{  @Override protected Object convertToType(final Class type,final Object value) throws Throwable {  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();  if (classLoader != null) {    try {      return classLoader.loadClass(value.toString());    } catch (    ClassNotFoundException ex) {    }  }  classLoader=ClassConverter.class.getClassLoader();  return classLoader.loadClass(value.toString());}  }
class C{  public String validateConfiguredParameters(ManageSubscriptionModel model){  JsonObject jsonObject=getJsonResponse(model);  if (!hasValidationError(jsonObject,model)) {    model.setConfigurationChanged(isConfigurationChanged(model,jsonObject));    model.setParameterValidationResult(new ParameterValidationResult(false,null));    return null;  } else {    return validateParametersError(model,jsonObject);  }}  }
class C{  public NetworkResponse(int statusCode,byte[] data,Map<String,String> headers,boolean notModified,long networkTimeMs){  this.statusCode=statusCode;  this.data=data;  this.headers=headers;  this.notModified=notModified;  this.networkTimeMs=networkTimeMs;}  }
class C{  private static void xsort(ConstantPoolData ff[],String ss[],int left,int right){  if (left >= right)   return;  String pivot=ss[left];  int l=left;  int r=right;  while (l < r) {    while (l <= right && ss[l].compareTo(pivot) <= 0)     l++;    while (r >= left && ss[r].compareTo(pivot) > 0)     r--;    if (l < r) {      ConstantPoolData def=ff[l];      String name=ss[l];      ff[l]=ff[r];      ff[r]=def;      ss[l]=ss[r];      ss[r]=name;    }  }  int middle=r;  ConstantPoolData def=ff[left];  String name=ss[left];  ff[left]=ff[middle];  ff[middle]=def;  ss[left]=ss[middle];  ss[middle]=name;  xsort(ff,ss,left,middle - 1);  xsort(ff,ss,middle + 1,right);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:26.816 -0500",hash_original_method="8D27DE23631F09453D73093F15998EF0",hash_generated_method="AB0EDA48FE6E3353CB887BAB0BB48AEE") public V put(E key1,K key2,V value){  if (key1 == null && key2 == null) {    int index=arrSize;    if (arr[index] == null) {      arr[index]=createEntry(0,null,null,value,null);      size++;      modCount++;      return null;    } else {      V oldValue=arr[index].value;      arr[index].value=value;      return oldValue;    }  }  int hash=key1.hashCode() + key2.hashCode();  int index=(hash & 0x7fffffff) % arrSize;  Entry<E,K,V> e=arr[index];  while (e != null) {    if (hash == e.hash && key1.equals(e.getKey1()) && key2.equals(e.getKey2())) {      V oldValue=e.value;      e.value=value;      return oldValue;    }    e=e.next;  }  arr[index]=createEntry(hash,key1,key2,value,arr[index]);  size++;  modCount++;  if (size > threshold) {    rehash();  }  return null;}  }
class C{  public NotificationChain basicSetLeft(CharacterClassAtom newLeft,NotificationChain msgs){  CharacterClassAtom oldLeft=left;  left=newLeft;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,RegularExpressionPackage.CHARACTER_CLASS_RANGE__LEFT,oldLeft,newLeft);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public boolean isSignatureValid(ContentVerifierProvider verifierProvider) throws CertException {  TBSCertList tbsCRL=x509CRL.getTBSCertList();  if (!CertUtils.isAlgIdEqual(tbsCRL.getSignature(),x509CRL.getSignatureAlgorithm())) {    throw new CertException("signature invalid - algorithm identifier mismatch");  }  ContentVerifier verifier;  try {    verifier=verifierProvider.get((tbsCRL.getSignature()));    OutputStream sOut=verifier.getOutputStream();    DEROutputStream dOut=new DEROutputStream(sOut);    dOut.writeObject(tbsCRL);    sOut.close();  } catch (  Exception e) {    throw new CertException("unable to process signature: " + e.getMessage(),e);  }  return verifier.verify(x509CRL.getSignature().getBytes());}  }
class C{  public static <T extends Number,V>void show(BackgroundTask<T,V> task,String title,String message,Number total){  show(task,title,message,total,false);}  }
class C{  public SVGTextElementBridge(){}  }
class C{  public int size(){  return 1;}  }
class C{  @Override public int executeUpdate(String sql,int autoGeneratedKeys) throws SQLException {  try {    debugCode("executeUpdate(" + quote(sql) + ", "+ autoGeneratedKeys+ ");");    throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static String string(int type){  return protocols.getText(type);}  }
class C{  public boolean addressOutOfRange(){  return addressOutOfRange;}  }
class C{  private void resetDrawerContent(Context ctx){  if (mDrawer != null) {    mDrawer.resetDrawerContent();  }  mAccountSwitcherArrow.setImageDrawable(new IconicsDrawable(ctx,MaterialDrawerFont.Icon.mdf_arrow_drop_down).sizeRes(R.dimen.material_drawer_account_header_dropdown).paddingRes(R.dimen.material_drawer_account_header_dropdown_padding).color(ColorHolder.color(mTextColor,ctx,R.attr.material_drawer_header_selection_text,R.color.material_drawer_header_selection_text)));}  }
class C{  public String appendPredictedProbabilitiesTipText(){  return "append probabilities rather than labels for discrete class " + "predictions";}  }
class C{  public boolean isLoaded(){  return (getViewCount() != 0);}  }
class C{  static protected void assertField(final String header,final String[] fields,final int field,final String expected){  if (header == null)   throw new IllegalArgumentException();  if (fields == null)   throw new IllegalArgumentException();  if (expected == null)   throw new IllegalArgumentException();  if (field < 0)   throw new IllegalArgumentException();  if (field >= fields.length)   throw new AssertionFailedError("There are only " + fields.length + " fields, but field="+ field+ "\n"+ header);  if (!expected.equals(fields[field])) {    throw new AssertionFailedError("Expected field=" + field + " to be ["+ expected+ "], actual="+ fields[field]+ "\n"+ header);  }}  }
class C{  public final boolean push(boolean val){  if (m_index == m_allocatedSize - 1)   grow();  return (m_values[++m_index]=val);}  }
class C{  protected NondominatedPopulation normalize(NondominatedPopulation approximationSet){  return normalizer.normalize(approximationSet);}  }
class C{  public DistributionPointName(GeneralNames fullName){  if (fullName == null) {    throw new IllegalArgumentException("fullName must not be null");  }  this.fullName=fullName;}  }
class C{  public void writeString(byte[] string){  for (int i=0; i < string.length; i++) {    uncompData[dstIndex++]=string[i];  }}  }
class C{  @operator(value="touches",category={IOperatorCategory.SPATIAL,IOperatorCategory.SP_PROPERTIES},concept={IConcept.GEOMETRY,IConcept.SPATIAL_COMPUTATION,IConcept.SPATIAL_RELATION}) @doc(value="A boolean, equal to true if the left-geometry (or agent/point) touches the right-geometry (or agent/point).",usages={@usage("if one of the operand is null, returns false.")},comment="returns true when the left-operand only touches the right-operand. When one geometry covers partially (or fully) the other one, it returns false.",examples={@example(value="polyline([{10,10},{20,20}]) touches {15,15}",equals="false"),@example(value="polyline([{10,10},{20,20}]) touches {10,10}",equals="true"),@example(value="{15,15} touches {15,15}",equals="false"),@example(value="polyline([{10,10},{20,20}]) touches polyline([{10,10},{5,5}])",equals="true"),@example(value="polyline([{10,10},{20,20}]) touches polyline([{5,5},{15,15}])",equals="false"),@example(value="polyline([{10,10},{20,20}]) touches polyline([{15,15},{25,25}])",equals="false"),@example(value="polygon([{10,10},{10,20},{20,20},{20,10}]) touches polygon([{15,15},{15,25},{25,25},{25,15}])",equals="false"),@example(value="polygon([{10,10},{10,20},{20,20},{20,10}]) touches polygon([{10,20},{20,20},{20,30},{10,30}])",equals="true"),@example(value="polygon([{10,10},{10,20},{20,20},{20,10}]) touches polygon([{10,10},{0,10},{0,0},{10,0}])",equals="true"),@example(value="polygon([{10,10},{10,20},{20,20},{20,10}]) touches {15,15}",equals="false"),@example(value="polygon([{10,10},{10,20},{20,20},{20,10}]) touches {10,15}",equals="true")},see={"disjoint_from","crosses","overlaps","partially_overlaps","intersects"}) public static Boolean touches(final IShape g,final IShape g2){  if (g == null) {    return false;  }  return g2.getInnerGeometry().touches(g.getInnerGeometry());}  }
class C{  public char next(char c) throws JSONException {  char n=this.next();  if (n != c) {    throw this.syntaxError("Expected '" + c + "' and instead saw '"+ n+ "'");  }  return n;}  }
class C{  public boolean isBeaconFullyLit(){  return (left == BeaconColor.BLUE_BRIGHT || left == BeaconColor.RED_BRIGHT) && (right == BeaconColor.BLUE_BRIGHT || right == BeaconColor.RED_BRIGHT);}  }
class C{  public static void checkHttpFrameError(final boolean forceCloseSocket,final List<ISpeedTestListener> listenerList,final HttpStates httFrameState){  if (httFrameState != HttpStates.HTTP_FRAME_OK) {    if (!forceCloseSocket) {      for (int i=0; i < listenerList.size(); i++) {        listenerList.get(i).onDownloadError(SpeedTestError.INVALID_HTTP_RESPONSE,SpeedTestConst.PARSING_ERROR + "http frame");      }    } else {      for (int i=0; i < listenerList.size(); i++) {        listenerList.get(i).onInterruption();      }    }  }}  }
class C{  @Unpreemptible private static Lock inflate(Object o,Offset lockOffset){  Lock l=Lock.allocate();  if (VM.VerifyAssertions) {    VM._assert(l != null);  }  Lock rtn=attemptToInflate(o,lockOffset,l);  if (rtn == l)   l.mutex.unlock();  return rtn;}  }
class C{  private boolean checkIndependence(LineAndShapeRenderer r1,LineAndShapeRenderer r2){  if (!r1.equals(r2)) {    return false;  }  r1.setBaseLinesVisible(!r1.getBaseLinesVisible());  if (r1.equals(r2)) {    return false;  }  r2.setBaseLinesVisible(r1.getBaseLinesVisible());  if (!r1.equals(r2)) {    return false;  }  r1.setSeriesLinesVisible(1,true);  if (r1.equals(r2)) {    return false;  }  r2.setSeriesLinesVisible(1,true);  if (!r1.equals(r2)) {    return false;  }  r1.setLinesVisible(false);  if (r1.equals(r2)) {    return false;  }  r2.setLinesVisible(false);  if (!r1.equals(r2)) {    return false;  }  r1.setBaseShapesVisible(!r1.getBaseShapesVisible());  if (r1.equals(r2)) {    return false;  }  r2.setBaseShapesVisible(r1.getBaseShapesVisible());  if (!r1.equals(r2)) {    return false;  }  r1.setSeriesShapesVisible(1,true);  if (r1.equals(r2)) {    return false;  }  r2.setSeriesShapesVisible(1,true);  if (!r1.equals(r2)) {    return false;  }  r1.setShapesVisible(false);  if (r1.equals(r2)) {    return false;  }  r2.setShapesVisible(false);  if (!r1.equals(r2)) {    return false;  }  boolean flag=true;  Boolean existing=r1.getShapesFilled();  if (existing != null) {    flag=!existing.booleanValue();  }  r1.setShapesFilled(flag);  if (r1.equals(r2)) {    return false;  }  r2.setShapesFilled(flag);  if (!r1.equals(r2)) {    return false;  }  r1.setShapesFilled(false);  r2.setShapesFilled(false);  r1.setSeriesShapesFilled(0,false);  r2.setSeriesShapesFilled(0,true);  if (r1.equals(r2)) {    return false;  }  r2.setSeriesShapesFilled(0,false);  if (!r1.equals(r2)) {    return false;  }  r1.setBaseShapesFilled(false);  r2.setBaseShapesFilled(true);  if (r1.equals(r2)) {    return false;  }  r2.setBaseShapesFilled(false);  if (!r1.equals(r2)) {    return false;  }  return true;}  }
class C{  public void uninstallDragger(){  fComponent.removeMouseListener(mouseListener);  fComponent.removeMouseMotionListener(mouseMotionListener);}  }
class C{  JDIEventSource(Session session){  super("JDI Event Set Dispatcher");  this.session=session;  this.runtime=session.runtime;  this.queue=session.vm.eventQueue();}  }
class C{  private void returnJson400(RequestAndResponse requestAndResponse,String text) throws ServletException, IOException {  requestAndResponse.setResponseContentTypeJson();  requestAndResponse.response.setStatus(HttpServletResponse.SC_BAD_REQUEST);  requestAndResponse.print("{\"errors\":[" + JsonBuilder.quote(text) + "] }");}  }
class C{  private CEdgeFunctions(){}  }
class C{  public Days toStandardDays(){  return Days.days(FieldUtils.safeMultiply(getValue(),DateTimeConstants.DAYS_PER_WEEK));}  }
class C{  private void updateListenerRef(@Nonnull String oldName,@Nonnull String newName,@Nonnull NamedBean nBean){  java.beans.PropertyChangeListener[] listeners=nBean.getPropertyChangeListenersByReference(oldName);  for (  java.beans.PropertyChangeListener listener : listeners) {    nBean.updateListenerRef(listener,newName);  }}  }
class C{  public KeyGetterBuilder(){}  }
class C{  public PermissionRequestObject ask(int reqCode){  mRequestCode=reqCode;  int length=mPermissionNames.length;  mPermissionsWeDontHave=new ArrayList<>(length);  for (  String mPermissionName : mPermissionNames) {    mPermissionsWeDontHave.add(new SinglePermission(mPermissionName));  }  if (needToAsk()) {    Log.i(TAG,"Asking for permission");    if (mActivity != null) {      ActivityCompat.requestPermissions(mActivity,mPermissionNames,reqCode);    } else {      mFragment.requestPermissions(mPermissionNames,reqCode);    }  } else {    Log.i(TAG,"No need to ask for permission");    if (mGrantFunc != null) {      mGrantFunc.call();    }  }  return this;}  }
class C{  public double[][][] sparseWeights(){  int numValues=m_classAttribute.numValues();  double[][][] sparseWeights=new double[numValues][numValues][];  for (int i=0; i < numValues; i++) {    for (int j=i + 1; j < numValues; j++) {      sparseWeights[i][j]=m_classifiers[i][j].m_sparseWeights;    }  }  return sparseWeights;}  }
class C{  private void doXObject(PDFObject obj) throws IOException {  String type=obj.getDictRef("Subtype").getStringValue();  if (type == null) {    type=obj.getDictRef("S").getStringValue();  }  if (type.equals("Image")) {    doImage(obj);  } else   if (type.equals("Form")) {    doForm(obj);  } else {    throw new PDFParseException("Unknown XObject subtype: " + type);  }}  }
class C{  public EqualsBuilder append(short lhs,short rhs){  if (isEquals == false) {    return this;  }  isEquals=(lhs == rhs);  return this;}  }
class C{  public int hashCode(){  return super.hashCode() * 13 + getLeapYearPatternType().hashCode();}  }
class C{  private void processSpecialTags(JsonParser jsonParser) throws IOException {  LOG.info("@odata tags found - start parsing");  String key=jsonParser.getCurrentName();  jsonParser.nextToken();  String value=jsonParser.getText();  odataValues.put(key,value);}  }
class C{  private File validateWorkingDirectory(String workingDir){  if (isEmpty(workingDir)) {    throw new IllegalArgumentException(LocalizedStrings.AgentConfigImpl_LOCATOR_WORKINGDIRECTORY_MUST_NOT_BE_NULL.toLocalizedString());  }  return new File(workingDir);}  }
class C{  protected void calculatePositionOffset(int size){  if (size % 2 == 0)   drawingOffset=size * barWidth / 2 + (size - 1) * (style.setSpacing / 2); else   drawingOffset=size * barWidth / 2 + ((size - 1) / 2) * style.setSpacing;}  }
class C{  public Matrix3f rotateX(float ang){  return rotateX(ang,this);}  }
class C{  @Override public void close() throws IOException {}  }
class C{  public static List<org.oscm.vo.VOPricedEvent> convertToApiVOPricedEvent(List<org.oscm.internal.vo.VOPricedEvent> oldVO){  if (oldVO == null) {    return null;  }  List<org.oscm.vo.VOPricedEvent> newVO=new ArrayList<org.oscm.vo.VOPricedEvent>();  for (  org.oscm.internal.vo.VOPricedEvent tmp : oldVO) {    newVO.add(convertToApi(tmp));  }  return newVO;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Airing q=getAir(stack);  Airing a=getAir(stack);  if (a != null) {    ManualRecord mr=Wizard.getInstance().getManualRecord(a);    if (mr != null && q != null && Permissions.hasPermission(Permissions.PERMISSION_RECORDINGSCHEDULE,stack.getUIMgr())) {      mr.bully(q);      Scheduler.getInstance().kick(false);    }  }  return null;}  }
class C{  private static UriField uri(String key){  return new UriField(key);}  }
class C{  public static long parseId(Uri contentUri){  String last=contentUri.getLastPathSegment();  return last == null ? -1 : Long.parseLong(last);}  }
class C{  public Object put(Object key,Object value){  Object k=maskNull(key);  int hash=hash(k);  int i=indexFor(hash,table.length);  for (Entry e=table[i]; e != null; e=e.next) {    if (e.hash == hash && eq(k,e.key)) {      Object oldValue=e.value;      e.value=value;      e.recordAccess(this);      return oldValue;    }  }  modCount++;  addEntry(hash,k,value,i);  return null;}  }
class C{  public boolean isIdentical(int version){  return isIdentical(new Version(version));}  }
class C{  protected final boolean isMouseover(){  return mouseover;}  }
class C{  public static void acknowledgeAction(String i18nKey,String propertyKey,Object... arguments){  String propValue=ParameterService.getParameterValue(propertyKey);  if (VALUE_HIDE.equals(propValue)) {    return;  }  DecisionRememberingConfirmDialog d=new DecisionRememberingConfirmDialog(i18nKey,propertyKey,DialogType.ACKNOWLEDGE,arguments);  d.setVisible(true);}  }
class C{  public String patch_addPadding(LinkedList<Patch> patches){  short paddingLength=this.Patch_Margin;  String nullPadding="";  for (short x=1; x <= paddingLength; x++) {    nullPadding+=String.valueOf((char)x);  }  for (  Patch aPatch : patches) {    aPatch.start1+=paddingLength;    aPatch.start2+=paddingLength;  }  Patch patch=patches.getFirst();  LinkedList<Diff> diffs=patch.diffs;  if (diffs.isEmpty() || diffs.getFirst().operation != Operation.EQUAL) {    diffs.addFirst(new Diff(Operation.EQUAL,nullPadding));    patch.start1-=paddingLength;    patch.start2-=paddingLength;    patch.length1+=paddingLength;    patch.length2+=paddingLength;  } else   if (paddingLength > diffs.getFirst().text.length()) {    Diff firstDiff=diffs.getFirst();    int extraLength=paddingLength - firstDiff.text.length();    firstDiff.text=nullPadding.substring(firstDiff.text.length()) + firstDiff.text;    patch.start1-=extraLength;    patch.start2-=extraLength;    patch.length1+=extraLength;    patch.length2+=extraLength;  }  patch=patches.getLast();  diffs=patch.diffs;  if (diffs.isEmpty() || diffs.getLast().operation != Operation.EQUAL) {    diffs.addLast(new Diff(Operation.EQUAL,nullPadding));    patch.length1+=paddingLength;    patch.length2+=paddingLength;  } else   if (paddingLength > diffs.getLast().text.length()) {    Diff lastDiff=diffs.getLast();    int extraLength=paddingLength - lastDiff.text.length();    lastDiff.text+=nullPadding.substring(0,extraLength);    patch.length1+=extraLength;    patch.length2+=extraLength;  }  return nullPadding;}  }
class C{  @Override public EObject create(EClass eClass){switch (eClass.getClassifierID()) {case ValidationPackage.PRE_VALIDATION:    return createPreValidation();case ValidationPackage.POST_VALIDATION:  return createPostValidation();default :throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");}}  }
class C{  public static SRuntimeFactory init(){  try {    SRuntimeFactory theSRuntimeFactory=(SRuntimeFactory)EPackage.Registry.INSTANCE.getEFactory(SRuntimePackage.eNS_URI);    if (theSRuntimeFactory != null) {      return theSRuntimeFactory;    }  } catch (  Exception exception) {    EcorePlugin.INSTANCE.log(exception);  }  return new SRuntimeFactoryImpl();}  }
class C{  private boolean insufficientMemory(){  return Runtime.getRuntime().maxMemory() < (500 * 1024 * 1024);}  }
class C{  public String encodeBody(){  return optionTag;}  }
class C{  public Notify duplicate() throws IOException, ClassNotFoundException {  Notify result=new Notify();  ByteArrayOutputStream baos=new ByteArrayOutputStream();  ObjectOutputStream oos=new ObjectOutputStream(baos);  writeExternal(oos);  oos.close();  byte[] buf=baos.toByteArray();  baos.close();  ByteArrayInputStream bais=new ByteArrayInputStream(buf);  ObjectInputStream ois=new ObjectInputStream(bais);  result.readExternal(ois);  ois.close();  bais.close();  return result;}  }
class C{  @Override public void receive(float sample){  mAssembler.receive(sample * 32.0f);}  }
class C{  public static void normalize(double[] a){  double total=sum(a);  if (total == 0.0) {    throw new RuntimeException("Can't normalize an array with sum 0.0");  }  scale(a,1.0 / total);}  }
class C{  public ImplementationEventListenerMememto(EventTarget t,String n,String s,EventListener l,boolean b,BridgeContext c){  super(t,n,s,l,b,c);}  }
class C{  static Handler remove(Handler h,Label start,Label end){  if (h == null) {    return null;  } else {    h.next=remove(h.next,start,end);  }  int hstart=h.start.position;  int hend=h.end.position;  int s=start.position;  int e=end == null ? Integer.MAX_VALUE : end.position;  if (s < hend && e > hstart) {    if (s <= hstart) {      if (e >= hend) {        h=h.next;      } else {        h.start=end;      }    } else     if (e >= hend) {      h.end=start;    } else {      Handler g=new Handler();      g.start=end;      g.end=h.end;      g.handler=h.handler;      g.desc=h.desc;      g.type=h.type;      g.next=h.next;      h.end=start;      h.next=g;    }  }  return h;}  }
class C{  public void goBackTwiceExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  InvocationStack invocationStack=getInvocationStack(request);  ClientInvocation lastClientInvocation=invocationStack.goBackTwiceClientInvocation(request);  if ((lastClientInvocation != null) && (lastClientInvocation == invocationStack.getHome())) {    setReturnActionFordward(request,new ActionForward("/action/homepage?method=loadBandeja",true));  } else {    ActionRedirect redirect=new ActionRedirect(new ActionForward(lastClientInvocation.getInvocationURI(),true),true);    if (lastClientInvocation.getTreeView() != null) {      redirect.addParameter(Constants.TREE_VIEW_RELOAD,Boolean.TRUE);    }    setReturnActionFordward(request,redirect);  }}  }
class C{  public static void main(String... s) throws Exception {  TestBase test=TestBase.createCaller().init();  test.test();}  }
class C{  void putUnderLock(BytesRef uid,VersionValue version){  long uidRAMBytesUsed=BASE_BYTES_PER_BYTESREF + uid.bytes.length;  final VersionValue prev=maps.current.put(uid,version);  if (prev != null) {    long prevBytes=BASE_BYTES_PER_CHM_ENTRY;    if (prev.delete() == false) {      prevBytes+=prev.ramBytesUsed() + uidRAMBytesUsed;    }    ramBytesUsedCurrent.addAndGet(-prevBytes);  }  long newBytes=BASE_BYTES_PER_CHM_ENTRY;  if (version.delete() == false) {    newBytes+=version.ramBytesUsed() + uidRAMBytesUsed;  }  ramBytesUsedCurrent.addAndGet(newBytes);  final VersionValue prevTombstone;  if (version.delete()) {    prevTombstone=tombstones.put(uid,version);    ramBytesUsedTombstones.addAndGet(BASE_BYTES_PER_CHM_ENTRY + version.ramBytesUsed() + uidRAMBytesUsed);    if (prevTombstone == null && prev != null && prev.delete()) {      ramBytesUsedCurrent.addAndGet(-(prev.ramBytesUsed() + uidRAMBytesUsed));    }  } else {    prevTombstone=tombstones.remove(uid);  }  if (prevTombstone != null) {    long v=ramBytesUsedTombstones.addAndGet(-(BASE_BYTES_PER_CHM_ENTRY + prevTombstone.ramBytesUsed() + uidRAMBytesUsed));    assert v >= 0 : "bytes=" + v;  }}  }
class C{  public AmqpMessage receive(long timeout,TimeUnit unit) throws Exception {  checkClosed();  return prefetch.poll(timeout,unit);}  }
class C{  public ESRIPointRecord(byte b[],int off,ImageIcon imageIcon) throws IOException {  super(b,off);  int ptr=off + 8;  int shapeType=readLEInt(b,ptr);  ptr+=4;  if (shapeType != SHAPE_TYPE_POINT && shapeType != SHAPE_TYPE_NULL) {    throw new IOException("Invalid point record.  Expected shape " + "type " + SHAPE_TYPE_POINT + " but found "+ shapeType);  }  x=readLEDouble(b,ptr);  ptr+=8;  y=readLEDouble(b,ptr);  ptr+=8;  ii=imageIcon;}  }
class C{  private Segment map(Object key){  return list.get(key);}  }
class C{  private void paintRestorePressed(Graphics2D g,JComponent c,int width,int height){  restorePainter.paintPressed(g,c,width,height);}  }
class C{  @Override protected EClass eStaticClass(){  return FunctionblockPackage.Literals.RETURN_PRIMITIVE_TYPE;}  }
class C{  protected int nextInEndTag() throws IOException, XMLException {switch (current) {case 0x9:case 0xA:case 0xD:case 0x20:    do {      nextChar();    } while (current != -1 && XMLUtilities.isXMLSpace((char)current));  return LexicalUnits.S;case '>':if (--depth < 0) {  throw createXMLException("unexpected.end.tag");} else if (depth == 0) {  context=TOP_LEVEL_CONTEXT;} else {  context=CONTENT_CONTEXT;}nextChar();return LexicalUnits.END_CHAR;default :throw createXMLException("invalid.character");}}  }
class C{  private NodeId(@Nullable final String fileUrl,@Nullable final PsiElement element,@Nullable final String locationRootMark){  myFileUrl=fileUrl;  myElement=element;  myLocationRootMark=locationRootMark;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:14.248 -0500",hash_original_method="A22DE89D38A395B57956004D412DD3F5",hash_generated_method="7A3E52A0FDBC31308A749176B7BE6FB7") V remove(Object key,int hash,Object value){  lock();  try {    int c=count - 1;    HashEntry<K,V>[] tab=table;    int index=hash & (tab.length - 1);    HashEntry<K,V> first=tab[index];    HashEntry<K,V> e=first;    while (e != null && (e.hash != hash || !key.equals(e.key)))     e=e.next;    V oldValue=null;    if (e != null) {      V v=e.value;      if (value == null || value.equals(v)) {        oldValue=v;        ++modCount;        HashEntry<K,V> newFirst=e.next;        for (HashEntry<K,V> p=first; p != e; p=p.next)         newFirst=new HashEntry<K,V>(p.key,p.hash,newFirst,p.value);        tab[index]=newFirst;        count=c;      }    }    return oldValue;  }  finally {    unlock();  }}  }
class C{  public PnLStream scale(float f){  PersistentHashMap<LocalDate,Float> added=PersistentHashMap.emptyMap();  for (  Entry<LocalDate,Float> entry : getPnls().entrySet()) {    added=added.assoc(entry.getKey(),f * entry.getValue());  }  return new PnLStream(added);}  }
class C{  static void putLong(long ptr,long data){  if (XlibWrapper.dataModel == 32) {    unsafe.putInt(ptr,(int)data);  } else {    unsafe.putLong(ptr,data);  }}  }
class C{  private boolean parseColorAdjustment(String rgbString,float[] dest){  String[] adj=rgbString == null ? null : rgbString.split(" ");  if (adj == null || adj.length != 3 || dest == null || dest.length != 3) {    return false;  }  try {    dest[0]=Float.parseFloat(adj[0]);    dest[1]=Float.parseFloat(adj[1]);    dest[2]=Float.parseFloat(adj[2]);  } catch (  NumberFormatException e) {    Slog.e(TAG,e.getMessage(),e);    return false;  }  return validateColors(dest);}  }
class C{  public T caseCaseClause(CaseClause object){  return null;}  }
class C{  private void cancelConfigureTimer(){  if (configureTimeout != null) {    configureTimeout.cancel();    configureTimeout=null;  }}  }
class C{  public void shutdown(){synchronized (GTG.cacheCreator) {    GTG.cacheCreator.isShutdown=true;    GTG.cacheCreator.notify();  }}  }
class C{  static public void assertNotSame(String message,Object expected,Object actual){  if (expected == actual) {    failSame(message);  }}  }
class C{  public static _SecurityScopeEnum fromString(final String value) throws SOAPSerializationException {  return (_SecurityScopeEnum)Enumeration.fromString(value,_SecurityScopeEnum.VALUES_TO_INSTANCES);}  }
class C{  public void registerDeployable(String containerId,DeployableType deployableType,String deployableClassName){  registerImplementation(new RegistrationKey(new SimpleContainerIdentity(containerId),deployableType.getType()),deployableClassName);}  }
class C{  public T caseAdditiveExpression(AdditiveExpression object){  return null;}  }
class C{  public void dump(){  Out.dump(toString());}  }
class C{  protected void tearDown(){  objArray=null;  objArray2=null;  hm=null;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.183 -0400",hash_original_method="0A6CC2448F8228152C59A8EC9FFDFA50",hash_generated_method="782942249F8DA3E927A60EA0933B7C3F") public static String toString(InputStream input,String encoding) throws IOException {  return toString(input,Charsets.toCharset(encoding));}  }
class C{  public static void checkArgument(boolean expression){  com.google.common.base.Preconditions.checkArgument(expression);}  }
class C{  public void advanceOneMilli(){  advanceBy(millis(1));}  }
class C{  @Override public void visitPointer(ObjectReference source,Address slot,ObjectReference target){  Space space=Space.getSpaceForObject(target);  if (space instanceof CopySpace && ((CopySpace)space).isFromSpace()) {    assert false : String.format("### Object %s is in from-space, pointed to by %s slot %s%n",ObjectModel.getString(target),ObjectModel.getString(source),slot);  }}  }
class C{  public static double linePosition(double[][] points){  return (points[1][0] - points[0][0]) * (points[2][1] - points[0][1]) - (points[2][0] - points[0][0]) * (points[1][1] - points[0][1]);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void closeSafely(@Nullable CloseableReference<?> ref){  if (ref != null) {    ref.close();  }}  }
class C{  public boolean removeChunk(PngChunk c){  if (c == null)   return false;  return queuedChunks.remove(c);}  }
class C{  private void preserveParentLinks(){  resetDBObjects(DBObject_ForeignKey.class);  s_logger.log(Level.CONFIG,"");  s_logger.log(Level.CONFIG,"preserveParentLinks",new Object[]{m_direction});  m_counterUpd=new Integer(0);  m_totalUpd=new Integer(0);  if (m_sourceMap != null) {    for (Iterator<String> fkIt=m_sourceMap.keySet().iterator(); fkIt.hasNext(); ) {      String fkKey=fkIt.next();      DBObject fk=m_sourceMap.get(fkKey);      DBObject_ForeignKey_Table fkHeader=(DBObject_ForeignKey_Table)fk.getHeaders().get(0);      String childTableName=fkHeader.getTable();      String parentTableName=fkHeader.getFTable();      if (!childTableName.toUpperCase().endsWith("_ACCESS")) {        DBObject table=m_source.getObjectByName(childTableName,m_source.getTables());        boolean isNewColumn=false;        ArrayList<String> childColumnNames=new ArrayList<String>();        ArrayList<String> lowerChildColumnNames=new ArrayList<String>();        ArrayList<Integer> childColumnDataTypes=new ArrayList<Integer>();        ArrayList<String> childColumnDefaultValues=new ArrayList<String>();        ArrayList<String> parentColumnNames=new ArrayList<String>();        Vector<Integer> v=new Vector<Integer>(fk.getContents().keySet());        java.util.Collections.sort(v);        for (Iterator<Integer> i=v.iterator(); i.hasNext(); ) {          Integer j=i.next();          DBObject_ForeignKey_Column fkColumn=(DBObject_ForeignKey_Column)fk.getContents().get(j);          String childColumnName=fkColumn.getColumn();          String parentColumnName=fkColumn.getFColumn();          childColumnNames.add(childColumnName.toUpperCase());          lowerChildColumnNames.add(childColumnName);          parentColumnNames.add(parentColumnName.toUpperCase());          for (Iterator<Integer> m=table.getContents().keySet().iterator(); m.hasNext(); ) {            Integer n=m.next();            DBObject_Table_Column col=(DBObject_Table_Column)table.getContents().get(n);            String columnName=col.getName();            if (columnName.equalsIgnoreCase(childColumnName)) {              String vendorName=m_source.getVendor();              String dataType=col.getType();              int dataTypeID=s_dbEngine.getDataTypeID(vendorName,dataType);              childColumnDataTypes.add(dataTypeID);              String defaultValue=s_dbEngine.normalizeColumnValue(vendorName,dataTypeID);              childColumnDefaultValues.add(defaultValue);              if (col.isNew())               isNewColumn=true;            }          }        }        boolean isBrokenLinksExist=false;        if (isNewColumn) {          String vendorName=m_target.getVendor();          String catalogName=m_target.getCatalog();          String schemaName=m_target.getSchema();          String tableName=childTableName;          String sqlCommand=s_dbEngine.sql_selectPreparedStatement(vendorName,catalogName,schemaName,tableName,lowerChildColumnNames);          PreparedStatementWrapper stmt=m_target.setPreparedStatement(sqlCommand);          for (int k=0; k < childColumnNames.size(); k++) {            int paramIndex=k + 1;            int dataType=childColumnDataTypes.get(k);            String defaultValue=childColumnDefaultValues.get(k);            if (dataType >= s_dbEngine.DATETYPE_START && dataType <= s_dbEngine.TIMESTAMPTYPE_END) {              if (defaultValue != null)               m_target.setPreparedStatementTimestamp(stmt,paramIndex,java.sql.Timestamp.valueOf(defaultValue)); else               m_target.setPreparedStatementNull(stmt,paramIndex,java.sql.Types.TIMESTAMP);            } else             if (dataType < s_dbEngine.CHARTYPE_START) {              if (defaultValue != null)               m_target.setPreparedStatementBigDecimal(stmt,paramIndex,new BigDecimal(defaultValue)); else               m_target.setPreparedStatementNull(stmt,paramIndex,java.sql.Types.NUMERIC);            } else {              if (defaultValue != null)               m_target.setPreparedStatementString(stmt,paramIndex,defaultValue); else               m_target.setPreparedStatementNull(stmt,paramIndex,java.sql.Types.VARCHAR);            }          }          ResultSet rs=m_target.executeQuery(stmt);          if (m_target.getResultSetNext(rs))           isBrokenLinksExist=true;          m_target.releaseResultSet(rs);          m_target.releasePreparedStatement(stmt);        }        if (isNewColumn && isBrokenLinksExist) {          String brokenTableName=new String();          String brokenColumnName=new String();          String brokenDefaultValue=new String();          ArrayList<String> brokenCompareColumns=new ArrayList<String>();          String hintTableName=new String();          String hintColumnName=new String();          ArrayList<String> hintCompareColumns=new ArrayList<String>();          if (childColumnNames.size() == 1 && childTableName.equalsIgnoreCase("AD_TREE") && childColumnNames.contains("AD_TABLE_ID") && parentTableName.equalsIgnoreCase("AD_TABLE") && parentColumnNames.equals("AD_TABLE_ID")) {            brokenTableName=childTableName;            brokenColumnName=lowerChildColumnNames.get(0);            brokenDefaultValue=childColumnDefaultValues.get(0);            brokenCompareColumns.clear();            brokenCompareColumns.add("TreeType");            hintTableName=brokenTableName;            hintColumnName=brokenColumnName;            hintCompareColumns.clear();            hintCompareColumns.add("TreeType");            preserveParentLink(brokenTableName,brokenColumnName,brokenDefaultValue,brokenCompareColumns,hintTableName,hintColumnName,hintCompareColumns);          } else           if (childColumnNames.size() == 1 && childTableName.equalsIgnoreCase("C_DUNNINGRUN") && childColumnNames.contains("C_DUNNING_ID") && parentTableName.equalsIgnoreCase("C_DUNNING") && parentColumnNames.contains("C_DUNNING_ID")) {            brokenTableName=childTableName;            brokenColumnName=lowerChildColumnNames.get(0);            brokenDefaultValue=childColumnDefaultValues.get(0);            brokenCompareColumns.clear();            brokenCompareColumns.add("C_DunningLevel_ID");            hintTableName="C_DunningLevel";            hintColumnName=brokenColumnName;            hintCompareColumns.clear();            hintCompareColumns.add("C_DunningLevel_ID");            preserveParentLink(brokenTableName,brokenColumnName,brokenDefaultValue,brokenCompareColumns,hintTableName,hintColumnName,hintCompareColumns);          } else           if (childColumnNames.size() == 1 && childTableName.equalsIgnoreCase("C_DUNNINGRUNENTRY") && childColumnNames.contains("C_DUNNINGLEVEL_ID") && parentTableName.equalsIgnoreCase("C_DUNNINGLEVEL") && parentColumnNames.contains("C_DUNNINGLEVEL_ID")) {            brokenTableName=childTableName;            brokenColumnName=lowerChildColumnNames.get(0);            brokenDefaultValue=childColumnDefaultValues.get(0);            brokenCompareColumns.clear();            brokenCompareColumns.add("C_DunningRun_ID");            hintTableName="C_DunningRun";            hintColumnName=brokenColumnName;            hintCompareColumns.clear();            hintCompareColumns.add("C_DunningRun_ID");            preserveParentLink(brokenTableName,brokenColumnName,brokenDefaultValue,brokenCompareColumns,hintTableName,hintColumnName,hintCompareColumns);          } else           if (childColumnNames.size() == 1 && childTableName.equalsIgnoreCase("C_ACCTSCHEMA_GL") && childColumnNames.contains("COMMITMENTOFFSETSALES_ACCT") && parentTableName.equalsIgnoreCase("C_VALIDCOMBINATION") && parentColumnNames.contains("C_VALIDCOMBINATION_ID")) {            brokenTableName=childTableName;            brokenColumnName=lowerChildColumnNames.get(0);            brokenDefaultValue=childColumnDefaultValues.get(0);            brokenCompareColumns.clear();            brokenCompareColumns.add("CommitmentOffset_Acct");            hintTableName="C_ValidCombination";            hintColumnName="C_ValidCombination_ID";            hintCompareColumns.clear();            hintCompareColumns.add("C_ValidCombination_ID");            preserveParentLink(brokenTableName,brokenColumnName,brokenDefaultValue,brokenCompareColumns,hintTableName,hintColumnName,hintCompareColumns);          } else {            String keyType=m_objectType;            String keyName=fk.getName();            String colType=table.getContentType();            if (lowerChildColumnNames.size() > 1)             colType=table.getContentTypes();            StringBuffer colNames=new StringBuffer();            for (            String col : lowerChildColumnNames) {              if (colNames != null && colNames.length() > 0)               colNames.append(", ");              colNames.append(col);            }            String colName=colNames.toString();            String cldType=table.getObjectType();            String cldName=childTableName;            String prnType=table.getObjectType();            String prnName=parentTableName;            s_logger.log(Level.WARNING,"parentNotFound",new Object[]{keyType,keyName,colType,colName,cldType,cldName,prnType,prnName});          }        }      }    }  }  logResults();}  }
class C{  public int size(){  return size;}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData1);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            outputFile.setValue(row,col,z1 - z2);          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData) {            outputFile.setValue(row,col,z1 - constant2);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile2.getPreferredPalette());      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData) {            outputFile.setValue(row,col,constant1 - z2);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static double inverseError(double x){  double z=Math.sqrt(Math.PI) * x;  double res=(z) / 2;  double z2=z * z;  double zProd=z * z2;  res+=(1.0 / 24) * zProd;  zProd*=z2;  res+=(7.0 / 960) * zProd;  zProd*=z2;  res+=(127 * zProd) / 80640;  zProd*=z2;  res+=(4369 * zProd) / 11612160;  zProd*=z2;  res+=(34807 * zProd) / 364953600;  zProd*=z2;  res+=(20036983 * zProd) / 797058662400d;  return res;}  }
class C{  public void testSelfSignedCertificate() throws Exception {  doTest(SELF_SIGNED_CERT_CN,true);}  }
class C{  public static boolean compareBufferedImages(BufferedImage bufferedImage0,BufferedImage bufferedImage1){  int width=bufferedImage0.getWidth();  int height=bufferedImage0.getHeight();  if (width != bufferedImage1.getWidth() || height != bufferedImage1.getHeight()) {    return false;  }  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++) {      if (bufferedImage0.getRGB(x,y) != bufferedImage1.getRGB(x,y)) {        return false;      }    }  }  return true;}  }
class C{  public int addAdjustment(GenericValue adjustment){  adjustments.add(adjustment);  return adjustments.indexOf(adjustment);}  }
class C{  public static boolean deleteRecursively(File path){  boolean deleted=true;  if (path.isDirectory()) {    File[] files=path.listFiles();    for (int i=0; ((i < files.length) && deleted); i++) {      if (files[i].isDirectory()) {        deleted=deleteRecursively(files[i]);      } else {        deleted=files[i].delete();      }    }    deleted=deleted && path.delete();  } else {    deleted=false;  }  return deleted;}  }
class C{  @Deprecated public Formatter(LineEnding.Policy lineEndingPolicy,Path projectDirectory,List<FormatterStep> steps){  this(lineEndingPolicy,StandardCharsets.UTF_8,projectDirectory,steps);}  }
class C{  public Global targetClasses(Class<?>... classes){  for (  Class<?> targetClass : classes)   global.classes.add(new TargetClass(targetClass).toXStream());  return this;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void init(){  if (initialized)   return;  doFillintoGrid(getFieldEditor(),numColumns);  initialized=true;}  }
class C{  public Value readValue(){  int type=data[pos++] & 255;switch (type) {case Value.NULL:    return ValueNull.INSTANCE;case BOOLEAN_TRUE:  return ValueBoolean.get(true);case BOOLEAN_FALSE:return ValueBoolean.get(false);case INT_NEG:return ValueInt.get(-readVarInt());case Value.INT:return ValueInt.get(readVarInt());case LONG_NEG:return ValueLong.get(-readVarLong());case Value.LONG:return ValueLong.get(readVarLong());case Value.BYTE:return ValueByte.get(readByte());case Value.SHORT:return ValueShort.get(readShortInt());case DECIMAL_0_1:return (ValueDecimal)ValueDecimal.ZERO;case DECIMAL_0_1 + 1:return (ValueDecimal)ValueDecimal.ONE;case DECIMAL_SMALL_0:return ValueDecimal.get(BigDecimal.valueOf(readVarLong()));case DECIMAL_SMALL:{int scale=readVarInt();return ValueDecimal.get(BigDecimal.valueOf(readVarLong(),scale));}case Value.DECIMAL:{int scale=readVarInt();int len=readVarInt();byte[] buff=DataUtils.newBytes(len);read(buff,0,len);BigInteger b=new BigInteger(buff);return ValueDecimal.get(new BigDecimal(b,scale));}case LOCAL_DATE:{return ValueDate.fromDateValue(readVarLong());}case Value.DATE:{long x=readVarLong() * MILLIS_PER_MINUTE;return ValueDate.fromMillis(DateTimeUtils.getTimeUTCWithoutDst(x));}case LOCAL_TIME:{long nanos=readVarLong() * 1000000 + readVarLong();return ValueTime.fromNanos(nanos);}case Value.TIME:return ValueTime.fromMillis(DateTimeUtils.getTimeUTCWithoutDst(readVarLong()));case LOCAL_TIMESTAMP:{long dateValue=readVarLong();long nanos=readVarLong() * 1000000 + readVarLong();return ValueTimestamp.fromDateValueAndNanos(dateValue,nanos);}case Value.TIMESTAMP:{return ValueTimestamp.fromMillisNanos(DateTimeUtils.getTimeUTCWithoutDst(readVarLong()),readVarInt());}case Value.BYTES:{int len=readVarInt();byte[] b=DataUtils.newBytes(len);read(b,0,len);return ValueBytes.getNoCopy(b);}case Value.JAVA_OBJECT:{int len=readVarInt();byte[] b=DataUtils.newBytes(len);read(b,0,len);return ValueJavaObject.getNoCopy(null,b);}case Value.UUID:return ValueUuid.get(readLong(),readLong());case Value.STRING:return ValueString.get(readString());case Value.STRING_IGNORECASE:return ValueStringIgnoreCase.get(readString());case Value.STRING_FIXED:return ValueStringFixed.get(readString());case FLOAT_0_1:return ValueFloat.get(0);case FLOAT_0_1 + 1:return ValueFloat.get(1);case DOUBLE_0_1:return ValueDouble.get(0);case DOUBLE_0_1 + 1:return ValueDouble.get(1);case Value.DOUBLE:return ValueDouble.get(Double.longBitsToDouble(Long.reverse(readVarLong())));case Value.FLOAT:return ValueFloat.get(Float.intBitsToFloat(Integer.reverse(readVarInt())));case Value.BLOB:case Value.CLOB:{int smallLen=readVarInt();if (smallLen >= 0) {byte[] small=DataUtils.newBytes(smallLen);read(small,0,smallLen);return ValueLobDb.createSmallLob(type,small);} else if (smallLen == -3) {int tableId=readVarInt();long lobId=readVarLong();long precision=readVarLong();ValueLobDb lob=ValueLobDb.create(type,tableId,lobId,precision);return lob;} else {int tableId=readVarInt();int objectId=readVarInt();long precision=0;if (smallLen == -1 || smallLen == -2) {precision=readVarLong();}if (smallLen == -2) {String filename=readString();return ValueLob.openUnlinked(type,tableId,objectId,precision,filename);}return ValueLob.openLinked(type,tableId,objectId,precision);}}case Value.ARRAY:{int len=readVarInt();Value[] list=new Value[len];for (int i=0; i < len; i++) {list[i]=readValue();}return ValueArray.get(list);}case Value.RESULT_SET:{SimpleResultSet rs=new SimpleResultSet();rs.setAutoClose(false);int columns=readVarInt();for (int i=0; i < columns; i++) {rs.addColumn(readString(),readVarInt(),readVarInt(),readVarInt());}while (true) {if (readByte() == 0) {break;}Object[] o=new Object[columns];for (int i=0; i < columns; i++) {o[i]=readValue().getObject();}rs.addRow(o);}return ValueResultSet.get(rs);}default :if (type >= INT_0_15 && type < INT_0_15 + 16) {return ValueInt.get(type - INT_0_15);} else if (type >= LONG_0_7 && type < LONG_0_7 + 8) {return ValueLong.get(type - LONG_0_7);} else if (type >= BYTES_0_31 && type < BYTES_0_31 + 32) {int len=type - BYTES_0_31;byte[] b=DataUtils.newBytes(len);read(b,0,len);return ValueBytes.getNoCopy(b);} else if (type >= STRING_0_31 && type < STRING_0_31 + 32) {return ValueString.get(readString(type - STRING_0_31));}throw DbException.get(ErrorCode.FILE_CORRUPTED_1,"type: " + type);}}  }
class C{  private static ClassLoader findClassLoader() throws ConfigurationError {  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();  if (debug)   debugPrintln("Using context class loader: " + classLoader);  if (classLoader == null) {    classLoader=FactoryFinder.class.getClassLoader();    if (debug)     debugPrintln("Using the class loader of FactoryFinder: " + classLoader);  }  return classLoader;}  }
class C{  public DERSet(){}  }
class C{  public void registerKeyStroke(KeyStroke k,JComponent c){  Container topContainer=getTopAncestor(c);  if (topContainer == null) {    return;  }  Hashtable keyMap=containerMap.get(topContainer);  if (keyMap == null) {    keyMap=registerNewTopContainer(topContainer);  }  Object tmp=keyMap.get(k);  if (tmp == null) {    keyMap.put(k,c);  } else   if (tmp instanceof Vector) {    Vector v=(Vector)tmp;    if (!v.contains(c)) {      v.addElement(c);    }  } else   if (tmp instanceof JComponent) {    if (tmp != c) {      Vector<JComponent> v=new Vector<JComponent>();      v.addElement((JComponent)tmp);      v.addElement(c);      keyMap.put(k,v);    }  } else {    System.out.println("Unexpected condition in registerKeyStroke");    Thread.dumpStack();  }  componentKeyStrokeMap.put(new ComponentKeyStrokePair(c,k),topContainer);  if (topContainer instanceof EmbeddedFrame) {    ((EmbeddedFrame)topContainer).registerAccelerator(k);  }}  }
class C{  public ScriptDescriptionContainer(List<ScriptDescription> scripts){  this.scripts=scripts;}  }
class C{  public boolean isDelete(){  return oneRowChange.getAction() == RowChangeData.ActionType.DELETE;}  }
class C{  public static void writeExtendedMediumInt(IoBuffer out,int value){  value=((value & 0xff000000) >> 24) | (value << 8);  out.putInt(value);}  }
class C{  public static void main(String[] args){  doMain(args);}  }
class C{  private static JFreeChart createChart(PieDataset dataset){  JFreeChart chart=ChartFactory.createPieChart("Smart Phones Manufactured / Q3 2011",dataset,false,true,false);  chart.setBackgroundPaint(new GradientPaint(new Point(0,0),new Color(20,20,20),new Point(400,200),Color.DARK_GRAY));  TextTitle t=chart.getTitle();  t.setHorizontalAlignment(HorizontalAlignment.LEFT);  t.setPaint(new Color(240,240,240));  t.setFont(new Font("Arial",Font.BOLD,26));  PiePlot plot=(PiePlot)chart.getPlot();  plot.setBackgroundPaint(null);  plot.setInteriorGap(0.04);  plot.setOutlineVisible(false);  plot.setSectionPaint("Others",createGradientPaint(new Color(200,200,255),Color.BLUE));  plot.setSectionPaint("Samsung",createGradientPaint(new Color(255,200,200),Color.RED));  plot.setSectionPaint("Apple",createGradientPaint(new Color(200,255,200),Color.GREEN));  plot.setSectionPaint("Nokia",createGradientPaint(new Color(200,255,200),Color.YELLOW));  plot.setBaseSectionOutlinePaint(Color.WHITE);  plot.setSectionOutlinesVisible(true);  plot.setBaseSectionOutlineStroke(new BasicStroke(2.0f));  plot.setLabelFont(new Font("Courier New",Font.BOLD,20));  plot.setLabelLinkPaint(Color.WHITE);  plot.setLabelLinkStroke(new BasicStroke(2.0f));  plot.setLabelOutlineStroke(null);  plot.setLabelPaint(Color.WHITE);  plot.setLabelBackgroundPaint(null);  TextTitle source=new TextTitle("Source: http://www.bbc.co.uk/news/business-15489523",new Font("Courier New",Font.PLAIN,12));  source.setPaint(Color.WHITE);  source.setPosition(RectangleEdge.BOTTOM);  source.setHorizontalAlignment(HorizontalAlignment.RIGHT);  chart.addSubtitle(source);  return chart;}  }
class C{  public static void comment(String comment){  openComment();  Log.write(comment);  closeComment();  Log.writeln();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SexecPackage.EXECUTION_STATE__STATE_VECTOR:    return basicSetStateVector(null,msgs);case SexecPackage.EXECUTION_STATE__SUB_SCOPES:  return ((InternalEList<?>)getSubScopes()).basicRemove(otherEnd,msgs);case SexecPackage.EXECUTION_STATE__SUPER_SCOPE:return basicSetSuperScope(null,msgs);case SexecPackage.EXECUTION_STATE__ENTER_SEQUENCES:return ((InternalEList<?>)getEnterSequences()).basicRemove(otherEnd,msgs);case SexecPackage.EXECUTION_STATE__EXIT_SEQUENCE:return basicSetExitSequence(null,msgs);case SexecPackage.EXECUTION_STATE__INIT_SEQUENCE:return basicSetInitSequence(null,msgs);case SexecPackage.EXECUTION_STATE__ENTRY_ACTION:return basicSetEntryAction(null,msgs);case SexecPackage.EXECUTION_STATE__EXIT_ACTION:return basicSetExitAction(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static void updatePromotedMirrorExports(BlockMirror mirror,Volume promotedVolume,DbClient dbClient){  URIQueryResultList egUris=new URIQueryResultList();  dbClient.queryByConstraint(ContainmentConstraint.Factory.getBlockObjectExportGroupConstraint(mirror.getId()),egUris);  List<ExportGroup> exportGroups=dbClient.queryObject(ExportGroup.class,egUris);  Set<ExportMask> mirrorExportMasks=new HashSet<ExportMask>();  List<DataObject> updatedObjects=new ArrayList<DataObject>();  for (  ExportGroup exportGroup : exportGroups) {    if (exportGroup != null && !exportGroup.getInactive() && exportGroup.getExportMasks() != null) {      List<URI> exportMasks=new ArrayList<URI>(Collections2.transform(exportGroup.getExportMasks(),CommonTransformerFunctions.FCTN_STRING_TO_URI));      mirrorExportMasks.addAll(dbClient.queryObject(ExportMask.class,exportMasks));      String lunString=exportGroup.getVolumes().get(mirror.getId().toString());      _log.info("Removing mirror {} from export group {}",mirror.getId(),exportGroup.getId());      exportGroup.removeVolume(mirror.getId());      _log.info("Adding promoted volume {} to export group {}",promotedVolume.getId(),exportGroup.getId());      exportGroup.getVolumes().put(promotedVolume.getId().toString(),lunString);      updatedObjects.add(exportGroup);    }  }  for (  ExportMask exportMask : mirrorExportMasks) {    if (!exportMask.getInactive() && exportMask.getStorageDevice().equals(mirror.getStorageController()) && exportMask.hasVolume(mirror.getId())&& exportMask.getInitiators() != null && exportMask.getStoragePorts() != null) {      String lunString=exportMask.getVolumes().get(mirror.getId().toString());      _log.info("Removing mirror {} from export mask {}",mirror.getId(),exportMask.getId());      exportMask.removeVolume(mirror.getId());      exportMask.removeFromUserCreatedVolumes(mirror);      _log.info("Adding promoted volume {} to export mask {}",promotedVolume.getId(),exportMask.getId());      exportMask.addToUserCreatedVolumes(promotedVolume);      exportMask.getVolumes().put(promotedVolume.getId().toString(),lunString);      updatedObjects.add(exportMask);    }  }  dbClient.updateObject(updatedObjects);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Telephone(String text){  setText(text);}  }
class C{  public ListResponse listTags(final ListRequest request) throws ApiException {  InfoResponse info=info(newDto(InfoRequest.class).withProjectPath(request.getProjectPath()).withTarget(".").withPassword(request.getPassword()).withUsername(request.getUsername()));  final List<String> args=defaultArgs();  args.add("list");  String repositoryRoot=getRepositoryRoot(info.getOutput());  String projectRelativeUrl=getRelativeUrl(info.getOutput());  String projectUri=recognizeProjectUri(repositoryRoot,projectRelativeUrl);  String branchesPath=projectUri == null ? "^/tags" : (projectUri + "/tags");  final CommandLineResult result=runCommand(null,args,new File(request.getProjectPath()),singletonList(branchesPath),request.getUsername(),request.getPassword());  return newDto(ListResponse.class).withCommand(result.getCommandLine().toString()).withOutput(result.getStdout().stream().filter(null).map(null).collect(Collectors.toList())).withErrorOutput(result.getStderr());}  }
class C{  protected StringLiteralImpl(){  super();}  }
class C{  public static Object[] insert(Object[] originalArray,int pos,Object element){  Object[] newArray=(Object[])java.lang.reflect.Array.newInstance(originalArray.getClass().getComponentType(),originalArray.length + 1);  if (pos > 0) {    System.arraycopy(originalArray,0,newArray,0,pos);  }  newArray[pos]=element;  if (pos < originalArray.length) {    System.arraycopy(originalArray,pos,newArray,pos + 1,originalArray.length - pos);  }  return newArray;}  }
class C{  private void $$$setupUI$$$(){  createUIComponents();  myRootComponent=new JPanel();  myRootComponent.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1,1,new java.awt.Insets(0,0,0,0),-1,-1));  myRootComponent.add(myLabel,new com.intellij.uiDesigner.core.GridConstraints(0,0,1,1,com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST,com.intellij.uiDesigner.core.GridConstraints.FILL_NONE,com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED,com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));}  }
class C{  private static String generateEqual(String column,String value,String valueDelimiter){  StringBuffer buffer=new StringBuffer();  String columnValue=value;  if (columnValue == null) {    columnValue="";  }  if (StringUtils.isNotEmpty(column)) {    buffer.append(column).append(QUERY_EQUAL);    if (StringUtils.isNotEmpty(valueDelimiter)) {      buffer.append(valueDelimiter).append(columnValue).append(valueDelimiter);    } else {      buffer.append(columnValue);    }  }  return buffer.toString();}  }
class C{  public CNodeHoverState(final CStateFactory<NodeType,EdgeType> factory,final AbstractZyGraph<NodeType,EdgeType> graph,final Node node){  m_graph=graph;  m_factory=factory;  m_node=node;}  }
class C{  public static Date nextDate(final Date date){  return nextDate(date,true);}  }
class C{  public void stop(){  this.stop=true;}  }
class C{  public <R>FutureW<R> map(final Function<? super T,R> success,final Function<Throwable,R> failure){  return FutureW.of(future.thenApply(success).exceptionally(failure));}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  protected static DataCiteMetadata.RelatedIdentifiers convertRelatedIdentifiers(List<Citation> bibliographicCitations,List<PhysicalData> physicalDatas){  DataCiteMetadata.RelatedIdentifiers rids=FACTORY.createDataCiteMetadataRelatedIdentifiers();  for (  Citation citation : bibliographicCitations) {    if (!Strings.isNullOrEmpty(citation.getIdentifier())) {      DataCiteMetadata.RelatedIdentifiers.RelatedIdentifier rid=FACTORY.createDataCiteMetadataRelatedIdentifiersRelatedIdentifier();      rid.setValue(citation.getIdentifier());      rid.setRelationType(RelationType.REFERENCES);      rid.setRelatedIdentifierType(RelatedIdentifierType.URL);      rids.getRelatedIdentifier().add(rid);    }  }  for (  PhysicalData data : physicalDatas) {    if (!Strings.isNullOrEmpty(data.getDistributionUrl())) {      if (data.getDistributionUrl().startsWith(HTTP_PROTOCOL)) {        DataCiteMetadata.RelatedIdentifiers.RelatedIdentifier rid=FACTORY.createDataCiteMetadataRelatedIdentifiersRelatedIdentifier();        try {          URI val=new URI(data.getDistributionUrl());          rid.setValue(val.toString());          rid.setRelatedIdentifierType(RelatedIdentifierType.URL);          rid.setRelationType(RelationType.IS_VARIANT_FORM_OF);          rids.getRelatedIdentifier().add(rid);        } catch (        URISyntaxException e) {          LOG.error("Failed to convert distributionUrl into URI: " + data.getDistributionUrl());        }      }    }  }  return rids;}  }
class C{  public AttachAPINotFoundException(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:44.747 -0500",hash_original_method="5532B5125C79E9957D47EEEDDF5375E5",hash_generated_method="69BFF5261DA4E74D25F3305A2DDF6A46") public BitwiseInputStream(byte buf[]){  mBuf=buf;  mEnd=buf.length << 3;  mPos=0;}  }
class C{  protected void subirCampoExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  CamposTablaForm camposTablaForm=(CamposTablaForm)form;  String[] camposABorrar=camposTablaForm.getCamposABorrar();  if (camposABorrar != null && camposABorrar.length > 0) {    ServiceRepository services=getServiceRepository(request);    GestionDescripcionBI descripcionService=services.lookupGestionDescripcionBI();    List list=new ArrayList();    int pos=0;    int posAnteriorAlPrimero=0;    for (int i=0; i < camposABorrar.length; i++) {      String id=camposABorrar[i];      CampoDatoVO campoDatoVO=descripcionService.getCampoDato(id);      if (i == 0 && campoDatoVO.getPosEnTbl() == 1) {        ActionErrors errors=new ActionErrors();        errors.add(ErrorKeys.ERROR_MOVER_PRIMERO,new ActionError(ErrorKeys.ERROR_MOVER_PRIMERO));        ErrorsTag.saveErrors(request,errors);        setReturnActionFordward(request,mapping.findForward("subirCampo"));        return;      } else       if (pos == 0) {        pos=campoDatoVO.getPosEnTbl();        posAnteriorAlPrimero=pos - 1;        campoDatoVO.setPosEnTbl(campoDatoVO.getPosEnTbl() - 1);        list.add(campoDatoVO);      } else       if (campoDatoVO.getPosEnTbl() == pos + 1) {        campoDatoVO.setPosEnTbl(campoDatoVO.getPosEnTbl() - 1);        list.add(campoDatoVO);        pos++;      } else {        ActionErrors errors=new ActionErrors();        errors.add(ErrorKeys.ERROR_POSICIONES_NO_CONSECUTIVAS,new ActionError(ErrorKeys.ERROR_POSICIONES_NO_CONSECUTIVAS));        ErrorsTag.saveErrors(request,errors);        setReturnActionFordward(request,mapping.findForward("subirCampo"));        return;      }    }    CampoDatoVO campoDatoVO=descripcionService.getCampoDatoByPosEnTbl(camposTablaForm.getId(),posAnteriorAlPrimero);    campoDatoVO.setPosEnTbl(pos);    descripcionService.updateCampoDato(campoDatoVO);    if (list != null && list.size() > 0) {      for (int i=0; i < list.size(); i++) {        campoDatoVO=(CampoDatoVO)list.get(i);        descripcionService.updateCampoDato(campoDatoVO);      }    }    List listaCamposDato=descripcionService.getCamposDatoOrderByPosEnTbl(camposTablaForm.getId());    setInTemporalSession(request,ControlAccesoConstants.LISTA_CAMPOS_DATO,listaCamposDato);  }  setReturnActionFordward(request,mapping.findForward("subirCampo"));}  }
class C{  public static byte[] encode(byte[] source,int off,int len,byte[] alphabet,int maxLineLength){  int lenDiv3=(len + 2) / 3;  int len43=lenDiv3 * 4;  byte[] outBuff=new byte[len43 + (len43 / maxLineLength)];  int d=0;  int e=0;  int len2=len - 2;  int lineLength=0;  for (; d < len2; d+=3, e+=4) {    int inBuff=((source[d + off] << 24) >>> 8) | ((source[d + 1 + off] << 24) >>> 16) | ((source[d + 2 + off] << 24) >>> 24);    outBuff[e]=alphabet[(inBuff >>> 18)];    outBuff[e + 1]=alphabet[(inBuff >>> 12) & 0x3f];    outBuff[e + 2]=alphabet[(inBuff >>> 6) & 0x3f];    outBuff[e + 3]=alphabet[(inBuff) & 0x3f];    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;      lineLength=0;    }  }  if (d < len) {    encode3to4(source,d + off,len - d,outBuff,e,alphabet);    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;    }    e+=4;  }  assert (e == outBuff.length);  return outBuff;}  }
class C{  public boolean isAveragePO(){  String cm=getCostingMethod();  return cm != null && cm.equals(COSTINGMETHOD_AveragePO);}  }
class C{  private Object read(InputNode node,String key) throws Exception {  String name=style.getElement(key);  Class expect=type.getType();  if (name != null) {    node=node.getNext(name);  }  if (node == null) {    return null;  }  if (node.isEmpty()) {    return null;  }  return root.read(node,expect);}  }
class C{  private NodeIdCollector(){}  }
class C{  protected boolean hasTag(ItemStack stack){  return _tileTag != null;}  }
class C{  public String encode(){  String retval;  if (requestLine != null) {    this.setRequestLineDefaults();    retval=requestLine.encode() + super.encode();  } else   if (this.isNullRequest()) {    retval="\r\n\r\n";  } else {    retval=super.encode();  }  return retval;}  }
class C{  public void onScreenChange(boolean turnedOn){  if (DEBUG_LOGS)   Log.v(TAG,"onScreenChange: " + turnedOn);  if (turnedOn) {    registerTimeZoneReceiver();    if (RANDOM_TIME_PER_GLANCE) {      mTimeManager.addRandomInc();    }    int glanceInc=DEBUG_ACCELERATE_INTERACTION ? DEBUG_ACCELERATE_RATE : 1;    if (DEBUG_FAKE_SCRIPTED_EYES) {      if (DEBUG_LOGS)       Log.v(TAG,"DEBUG_FAKE_SCRIPTED_EYES: " + DEBUG_FAKE_SCRIPTED_EYES + " mDebugScriptGlance: "+ mDebugScriptGlance+ " mDebugScriptStage: "+ mDebugScriptStage);      if (mDebugScriptGlance == 0) {        if (mDebugScriptStage == 0) {          glanceInc=DEBUG_FAKE_SCRIPTED_EYES_STAGES[0];        } else         if (mDebugScriptStage >= DEBUG_FAKE_SCRIPTED_EYES_STAGES.length) {        } else {          glanceInc=DEBUG_FAKE_SCRIPTED_EYES_STAGES[mDebugScriptStage] - DEBUG_FAKE_SCRIPTED_EYES_STAGES[mDebugScriptStage - 1];        }        mDebugScriptStage++;        mDebugScriptGlance=DEBUG_FAKE_SCRIPTED_EYES_INACTIVE_GLANCES;      } else {        mDebugScriptGlance--;      }    }    glances+=glanceInc;    mCurrentGlance.setToNow();    long glanceDiff=mCurrentGlance.toMillis(false) - mPrevGlance;    if (DEBUG_LOGS)     Log.v(TAG,"glanceDiff: " + glanceDiff);    consecutiveGlances=glanceDiff < (CONSECUTIVE_GLANCE_THRESHOLD / DEBUG_ACCELERATE_RATE) ? consecutiveGlances + 1 : 1;    if (DEBUG_LOGS)     Log.v(TAG,"consecutiveGlances: " + consecutiveGlances);    eyeMosaic.updateTiredness();    eyeMosaic.newGlance(glanceInc,glanceDiff);  } else {    unregisterTimeZoneReceiver();    mCurrentGlance.setToNow();    mPrevGlance=mCurrentGlance.toMillis(false);  }  updateTimer();}  }
class C{  public DynamicUtilTreeNode(Object value,Object children){  super(value);  loadedChildren=false;  childValue=children;  if (children != null) {    if (children instanceof Vector)     setAllowsChildren(true); else     if (children instanceof Hashtable)     setAllowsChildren(true); else     if (children instanceof Object[])     setAllowsChildren(true); else     setAllowsChildren(false);  } else   setAllowsChildren(false);}  }
class C{  public synchronized Exception testAppsServer(){  queryAppsServerInfo();  return getAppsServerException();}  }
class C{  @Override public IntsRef clone(){  return new IntsRef(ints,offset,length);}  }
class C{  public PlayMusicExporterSettings(Context context){  super(context,DEFAULT_SETTINGS_FILENAME);  if (!contains(PREF_ID3))   setString(PREF_ID3,"id3_with_cover");  if (!contains(PREF_ID3_ARTWORK_SIZE))   setInt(PREF_ID3_ARTWORK_SIZE,512);  if (!contains(PREF_EXPORT_URI))   setUri(PREF_EXPORT_URI,Uri.fromFile(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MUSIC)));}  }
class C{  public final AC sizeGroup(String s,int... indexes){  for (int i=indexes.length - 1; i >= 0; i--) {    int ix=indexes[i];    makeSize(ix);    cList.get(ix).setSizeGroup(s);  }  return this;}  }
class C{  public TerrainLineIntersector(Terrain terrain,int numThreads){  super(terrain,numThreads);}  }
class C{  public String globalInfo(){  return "A filter that uses a density-based clusterer to generate cluster " + "membership values; filtered instances are composed of these values " + "plus the class attribute (if set in the input data). If a (nominal) "+ "class attribute is set, the clusterer is run separately for each "+ "class. The class attribute (if set) and any user-specified "+ "attributes are ignored during the clustering operation";}  }
class C{  public boolean showPopup(){  if (isShowingPopup() || !mIsAttachedToWindow) {    return false;  }  mIsSelectingDefaultActivity=false;  showPopupUnchecked(mInitialActivityCount);  return true;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return MESSAGE;case 2:  return TYPE;default :return null;}}  }
class C{  public synchronized void add(String m){  System.out.println("adding " + m);  for (  char c : m.toCharArray()) {    if (c != '-')     this.marble.add(c);  }  if (!marble.isEmpty())   parseLatch.countDown();}  }
class C{  public boolean resourceExist(int id){  boolean flag=false;  if (id < 0) {    flag=false;  } else {    flag=checkResource(resList,id);  }  return flag;}  }
class C{  public void addAlias(String name,String replacement){  RuleHead head=ruleMap.get(replacement);  ruleMap.put(name,head);}  }
class C{  public DenseVector(double[] array,int start,int end){  this.array=array;  this.startIndex=start;  this.endIndex=end;}  }
class C{  public static String toStringPretty(JsonElement jsonElt,int level){  if (jsonElt.isJsonObject())   return toStringPretty((JsonObject)jsonElt,level);  if (jsonElt.isJsonArray())   return toStringPretty((JsonArray)jsonElt,level);  return jsonElt.toString();}  }
class C{  public void train(Matrix X,Matrix y,Matrix logtheta0){  train(X,y,logtheta0,-100);}  }
class C{  int checkBlockLine(BlockPos posOne,BlockPos posTwo){  BlockPos blockpos=posTwo.add(-posOne.getX(),-posOne.getY(),-posOne.getZ());  int i=this.getGreatestDistance(blockpos);  float f=(float)blockpos.getX() / (float)i;  float f1=(float)blockpos.getY() / (float)i;  float f2=(float)blockpos.getZ() / (float)i;  if (i == 0) {    return -1;  } else {    for (int j=0; j <= i; ++j) {      BlockPos blockpos1=posOne.add((double)(0.5F + (float)j * f),(double)(0.5F + (float)j * f1),(double)(0.5F + (float)j * f2));      if (!this.isReplaceable(blockpos1)) {        String replaceBlock=world.getBlockState(blockpos1).getBlock().getLocalizedName();        return j;      }    }    return -1;  }}  }
class C{  public SpriteTileset(final SpriteStore store,final Sprite sprite,final int size){  if (sprite == null) {    tiles=new Sprite[0];  } else {    tiles=extractTiles(store,sprite,size);  }}  }
class C{  public CrossProcessEffect(){}  }
class C{  public void count(T element,int number){  totalCount+=number;  if (counts.containsKey(element)) {    counts.put(element,counts.get(element) + number);  } else {    counts.put(element,number);  }}  }
class C{  public static void encodeDimension(float value,byte dest[],int offset){  NumericUtils.intToSortableBytes(NumericUtils.floatToSortableInt(value),dest,offset);}  }
class C{  protected void preAddInterruptibly(Object o) throws InterruptedException {}  }
class C{  public static boolean hasTransactionalSession(TransactionManager transactionManager){  if (transactionManager == null) {    return false;  }  WriteTranSessionHolder writeTranSessionHolder=(WriteTranSessionHolder)TransactionSynchronizationManager.getResource(transactionManager);  return (writeTranSessionHolder != null && !writeTranSessionHolder.isEmpty());}  }
class C{  private void initializeFrame(){  frame=new JFrame(Messages.getString("ClientGUI.title"));  frame.setJMenuBar(menuBar);  Rectangle virtualBounds=getVirtualBounds();  int x, y, w, h;  if (GUIPreferences.getInstance().getWindowSizeHeight() != 0) {    x=GUIPreferences.getInstance().getWindowPosX();    y=GUIPreferences.getInstance().getWindowPosY();    w=GUIPreferences.getInstance().getWindowSizeWidth();    h=GUIPreferences.getInstance().getWindowSizeHeight();    if ((x < virtualBounds.getMinX()) || ((x + w) > virtualBounds.getMaxX())) {      x=0;    }    if ((y < virtualBounds.getMinY()) || ((y + h) > virtualBounds.getMaxY())) {      y=0;    }    if (w > virtualBounds.getWidth()) {      w=(int)virtualBounds.getWidth();    }    if (h > virtualBounds.getHeight()) {      h=(int)virtualBounds.getHeight();    }    frame.setLocation(x,y);    frame.setSize(w,h);  } else {    frame.setSize(800,600);  }  frame.setMinimumSize(new Dimension(640,480));  frame.setBackground(SystemColor.menu);  frame.setForeground(SystemColor.menuText);  List<Image> iconList=new ArrayList<Image>();  iconList.add(frame.getToolkit().getImage(new File(Configuration.miscImagesDir(),FILENAME_ICON_16X16).toString()));  iconList.add(frame.getToolkit().getImage(new File(Configuration.miscImagesDir(),FILENAME_ICON_32X32).toString()));  iconList.add(frame.getToolkit().getImage(new File(Configuration.miscImagesDir(),FILENAME_ICON_48X48).toString()));  iconList.add(frame.getToolkit().getImage(new File(Configuration.miscImagesDir(),FILENAME_ICON_256X256).toString()));  frame.setIconImages(iconList);  mechW=new JDialog(frame,Messages.getString("ClientGUI.MechDisplay"),false);  x=GUIPreferences.getInstance().getDisplayPosX();  y=GUIPreferences.getInstance().getDisplayPosY();  h=GUIPreferences.getInstance().getDisplaySizeHeight();  w=GUIPreferences.getInstance().getDisplaySizeWidth();  if ((x + w) > virtualBounds.getWidth()) {    x=0;    w=Math.min(w,(int)virtualBounds.getWidth());  }  if ((y + h) > virtualBounds.getHeight()) {    y=0;    h=Math.min(h,(int)virtualBounds.getHeight());  }  mechW.setLocation(x,y);  mechW.setSize(w,h);  mechW.setResizable(true);  unitDisplay=new UnitDisplay(null);  mechW.add(unitDisplay);  mechW.setVisible(true);  unitDisplay.displayEntity(testEntity);}  }
class C{  protected Messages(){}  }
class C{  public EvaluationStatisticsComparator(String[] keys){  super();  m_Keys=keys;}  }
class C{  @Override public void close() throws IOException {  readerBCF.close();}  }
class C{  public boolean equals(Object obj){  if (this == obj)   return true;  if (!(obj instanceof DigitList))   return false;  DigitList other=(DigitList)obj;  if (count != other.count || decimalAt != other.decimalAt)   return false;  for (int i=0; i < count; i++)   if (digits[i] != other.digits[i])   return false;  return true;}  }
class C{  public void validateDownloadedS3Files(String baseDirectory,String s3KeyPrefix,StorageUnit storageUnit) throws IllegalStateException {  validateDownloadedS3Files(baseDirectory,s3KeyPrefix,storageUnit.getStorageFiles());}  }
class C{  public AugmentedNode<K> right(){  return (AugmentedNode<K>)right;}  }
class C{  public boolean validate(){  return elementDefValidator.validate(this);}  }
class C{  public static boolean isFloat(FTypeRef typeRef){  return isBasicType(typeRef,FBasicTypeId.FLOAT);}  }
class C{  public static void println(String key,Object... args){  StringBuilder b=new StringBuilder();  b.append(key);  b.append(": ");  boolean isFirstArgument=true;  for (  Object arg : args) {    if (isFirstArgument) {      isFirstArgument=false;    } else {      b.append(", ");    }    b.append(arg);  }  System.out.println(b.toString());}  }
class C{  protected SettableBeanProperty _resolveUnwrappedProperty(DeserializationConfig config,SettableBeanProperty prop){  AnnotatedMember am=prop.getMember();  if (am != null && config.getAnnotationIntrospector().shouldUnwrapProperty(am) == Boolean.TRUE) {    JsonDeserializer<Object> orig=prop.getValueDeserializer();    JsonDeserializer<Object> unwrapping=orig.unwrappingDeserializer();    if (unwrapping != orig && unwrapping != null) {      return prop.withValueDeserializer(unwrapping);    }  }  return null;}  }
class C{  public GeoPt(){  super(KEY);}  }
class C{  public T dismiss(){  Iterator<Dialog> keys=dialogs.keySet().iterator();  while (keys.hasNext()) {    Dialog d=keys.next();    try {      d.dismiss();    } catch (    Exception e) {    }    keys.remove();  }  return self();}  }
class C{  protected Map<String,String> loadSessionVariables(HttpServletRequest req) throws ServletException {  Map<String,String> datastoreMap=new HashMap<>();  String sessionId=getCookieValue(req,"bookshelfSessionId");  if (sessionId.equals("")) {    return datastoreMap;  }  Key key=keyFactory.newKey(sessionId);  Transaction transaction=datastore.newTransaction();  try {    Entity stateEntity=transaction.get(key);    StringBuilder logNames=new StringBuilder();    if (stateEntity != null) {      for (      String varName : stateEntity.names()) {        req.getSession().setAttribute(varName,stateEntity.getString(varName));        datastoreMap.put(varName,stateEntity.getString(varName));        logNames.append(varName + " ");      }    } else {    }  }  finally {    if (transaction.active()) {      transaction.rollback();    }  }  return datastoreMap;}  }
class C{  public void disableHistory(boolean disableHistory){  if (history == null) {    return;  }  ExtentTraverser traverseHistory=new ExtentTraverser(this.extent).find(HistoryExtent.class);  if (disableHistory) {    if (traverseHistory != null && traverseHistory.exists()) {      ExtentTraverser beforeHistory=traverseHistory.previous();      ExtentTraverser afterHistory=traverseHistory.next();      if (beforeHistory != null && beforeHistory.exists()) {        beforeHistory.setNext(afterHistory.get());      } else {        extent=(AbstractDelegateExtent)afterHistory.get();      }    }  } else   if (traverseHistory == null || !traverseHistory.exists()) {    ExtentTraverser traverseBypass=new ExtentTraverser(this.extent).find(bypassHistory);    if (traverseBypass != null) {      ExtentTraverser beforeHistory=traverseBypass.previous();      beforeHistory.setNext(history);    }  }}  }
class C{  public static GroupMatcher<JobKey> jobGroupContains(String compareTo){  return GroupMatcher.groupContains(compareTo);}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Parameters public static Collection<Object[]> params(){  final Object[][] params={{"simple","","Parallel01IT",1},{"simple","","Parallel02IT",2},{"feature-title","","Feature101IT",1},{"feature-title","","Feature102IT",2},{"pattern","{f}","Feature1",2},{"pattern","{c}","02",2},{"pattern","{f}_{c}IT","Feature1_02IT",2}};  return Arrays.asList(params);}  }
class C{  public TCacheJSR107Entry(K key,V value){  this.key=key;  this.value=value;}  }
class C{  int decrypt(byte[] cipher,int cipherOffset,int cipherLen,byte[] plain,int plainOffset){  if ((cipherLen % numBytes) != 0) {    throw new ProviderException("Internal error in input buffering");  }  int nShift=blockSize - numBytes;  int loopCount=cipherLen / numBytes;  for (; loopCount > 0; plainOffset+=numBytes, cipherOffset+=numBytes, loopCount--) {    embeddedCipher.encryptBlock(register,0,k,0);    if (nShift != 0) {      System.arraycopy(register,numBytes,register,0,nShift);    }    for (int i=0; i < numBytes; i++) {      register[i + nShift]=cipher[i + cipherOffset];      plain[i + plainOffset]=(byte)(cipher[i + cipherOffset] ^ k[i]);    }  }  return cipherLen;}  }
class C{  @Override @TargetApi(Build.VERSION_CODES.HONEYCOMB) protected View onCreateView(View parent,String name,AttributeSet attrs) throws ClassNotFoundException {  return mDecorFactory.onViewCreated(super.onCreateView(parent,name,attrs),name,parent,getContext(),attrs);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public StandardCrosshairLabelGenerator(String labelTemplate,NumberFormat numberFormat){  super();  if (labelTemplate == null) {    throw new IllegalArgumentException("Null 'labelTemplate' argument.");  }  if (numberFormat == null) {    throw new IllegalArgumentException("Null 'numberFormat' argument.");  }  this.labelTemplate=labelTemplate;  this.numberFormat=numberFormat;}  }
class C{  public void testInvalidMethod() throws Exception {  String resdata="Response Data";  Response response=Response.newBuilder().setStrData(resdata).build();  socketRpcServer.registerService(new FakeServiceImpl(REQUEST).withResponse(response));  FakeSocket socket=new FakeSocket(false).withRequest(createRpcRequest(TestService.getDescriptor().getFullName(),"BadMethod",REQUEST.toByteString()));  runHandler(socket);  assertFalse(socket.getResponse().getCallback());  assertTrue(socket.getResponse().hasError());  assertEquals(ErrorReason.METHOD_NOT_FOUND,socket.getResponse().getErrorReason());}  }
class C{  public ExtendedKeyUsage(byte[] encoding){  super(encoding);}  }
class C{  public Boolean isIpv6RouterAdvertisementConfigurationSettable(){  return ipv6RouterAdvertisementConfigurationSettable;}  }
class C{  public static Map<String,Object> checkCopyPermission(DispatchContext ctx,Map<String,?> context){  boolean hasPermission=false;  GenericValue userLogin=(GenericValue)context.get("userLogin");  if (userLogin != null) {    String userLoginId=userLogin.getString("userLoginId");    String userLoginIdArg=(String)context.get(LOGINID_PARAMETER_NAME);    if (userLoginIdArg == null || (userLoginIdArg != null && userLoginId.equals(userLoginIdArg))) {      hasPermission=true;    } else {      Security security=ctx.getSecurity();      hasPermission=security.hasPermission(ADMIN_PERMISSION,userLogin);    }  }  Map<String,Object> result=ServiceUtil.returnSuccess();  result.put("hasPermission",hasPermission);  return result;}  }
class C{  public IterativeControlsPanel(final NetworkPanel networkPanel){  this.panel=networkPanel;  init();}  }
class C{  protected LegacyOctalIntLiteralImpl(){  super();}  }
class C{  private byte[] buffer(int index){  byte[] b=null;  if (index >= this.buffers.size()) {    for (int i=this.buffers.size(); i < index + 1; i++) {      int bufferSize=1 << (Math.max(0,i - 1) + this.lowBits);      b=new byte[bufferSize];      this.buffers.add(b);    }  }  b=this.buffers.get(index);  return b;}  }
class C{  int secureHash(int x){  Arrays.fill(data,(byte)0);  writeInt(data,0,x);  aes.encrypt(data,0,16);  return readInt(data,0);}  }
class C{  public static boolean[] andRowsOverSelectedColumns(boolean[][] data,int[] columns){  boolean[] result=new boolean[data.length];  for (int i=0; i < data.length; i++) {    result[i]=true;    for (int c=0; c < columns.length; c++) {      result[i]&=data[i][columns[c]];    }  }  return result;}  }
class C{  public GitlabSystemHook deleteSystemHook(Integer hookId) throws IOException {  String tailUrl=GitlabSystemHook.URL + "/" + hookId;  return retrieve().method("DELETE").to(tailUrl,GitlabSystemHook.class);}  }
class C{  public static String decode(String expression) throws CoreException {  return expression != null ? getStringVariableManager().performStringSubstitution(expression) : null;}  }
class C{  public static void checkArgument(boolean expression,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (!expression) {    throw new IllegalArgumentException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  static Element readFile(File file) throws org.jdom2.JDOMException, java.io.IOException {  XmlFile xf=new XmlFile(){  };  return xf.rootFromFile(file);}  }
class C{  public boolean isFromPrototype(String name){  return fromPrototype[indexForName(name)];}  }
class C{  public ASTList tail(){  return right;}  }
class C{  public JdbcSQLException(String message,String sql,String state,int errorCode,Throwable cause,String stackTrace){  super(message,state,errorCode);  this.originalMessage=message;  setSQL(sql);  this.cause=cause;  this.stackTrace=stackTrace;  buildMessage();  initCause(cause);}  }
class C{  public static synchronized void endRecordingMacro(){  if (!isRecordingMacro()) {    return;  }  recordingMacro=false;}  }
class C{  private void adjustByteCounts(){  if (byteCount1 > 0x1fffffffffffffffL) {    byteCount2+=(byteCount1 >>> 61);    byteCount1&=0x1fffffffffffffffL;  }}  }
class C{  private void incrementSourceOffset(HttpSourceOffset sourceOffset,int increment){  if (conf.pagination.mode == PaginationMode.BY_PAGE) {    sourceOffset.incrementStartAt(1);  } else   if (conf.pagination.mode == PaginationMode.BY_OFFSET) {    sourceOffset.incrementStartAt(increment);  }}  }
class C{  public Timestamp encrypt(Timestamp value){  return value;}  }
class C{  public void removeEdtErrorHandler(ActionListener e){  if (errorHandler != null) {    errorHandler.removeListener(e);    Collection v=errorHandler.getListenerCollection();    if (v == null || v.size() == 0) {      errorHandler=null;    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private boolean parseCloseBracket(){  index++;  int startIndex=index;  Bracket opener=lastBracket;  if (opener == null) {    appendText("]");    return true;  }  if (!opener.allowed) {    appendText("]");    removeLastBracket();    return true;  }  String dest=null;  String title=null;  boolean isLinkOrImage=false;  if (peek() == '(') {    index++;    spnl();    if ((dest=parseLinkDestination()) != null) {      spnl();      if (WHITESPACE.matcher(input.substring(index - 1,index)).matches()) {        title=parseLinkTitle();        spnl();      }      if (peek() == ')') {        index++;        isLinkOrImage=true;      }    }  } else {    int beforeLabel=index;    int labelLength=parseLinkLabel();    String ref=null;    if (labelLength > 2) {      ref=input.substring(beforeLabel,beforeLabel + labelLength);    } else     if (!opener.bracketAfter) {      ref=input.substring(opener.index,startIndex);    }    if (ref != null) {      Link link=referenceMap.get(Escaping.normalizeReference(ref));      if (link != null) {        dest=link.getDestination();        title=link.getTitle();        isLinkOrImage=true;      }    }  }  if (isLinkOrImage) {    Node linkOrImage=opener.image ? new Image(dest,title) : new Link(dest,title);    Node node=opener.node.getNext();    while (node != null) {      Node next=node.getNext();      linkOrImage.appendChild(node);      node=next;    }    appendNode(linkOrImage);    processDelimiters(opener.previousDelimiter);    mergeTextNodes(linkOrImage.getFirstChild(),linkOrImage.getLastChild());    opener.node.unlink();    removeLastBracket();    if (!opener.image) {      Bracket bracket=lastBracket;      while (bracket != null) {        if (!bracket.image) {          bracket.allowed=false;        }        bracket=bracket.previous;      }    }    return true;  } else {    appendText("]");    removeLastBracket();    index=startIndex;    return true;  }}  }
class C{  protected BallNode mergeNodes(ArrayList<TempNode> list,int startIdx,int endIdx,int[] instList) throws Exception {  double minRadius=Double.POSITIVE_INFINITY, tmpRadius;  Instance pivot, minPivot=null;  int min1=-1, min2=-1;  int[] minInstList=null;  int merge=1;  TempNode parent;  while (list.size() > 1) {    System.err.print("merge step: " + merge++ + "               \r");    minRadius=Double.POSITIVE_INFINITY;    min1=-1;    min2=-1;    for (int i=0; i < list.size(); i++) {      TempNode first=(TempNode)list.get(i);      for (int j=i + 1; j < list.size(); j++) {        TempNode second=(TempNode)list.get(j);        pivot=calcPivot(first,second,m_Instances);        tmpRadius=calcRadius(first,second);        if (tmpRadius < minRadius) {          minRadius=tmpRadius;          min1=i;          min2=j;          minPivot=pivot;        }      }    }    parent=new TempNode();    parent.left=(TempNode)list.get(min1);    parent.right=(TempNode)list.get(min2);    minInstList=new int[parent.left.points.length + parent.right.points.length];    System.arraycopy(parent.left.points,0,minInstList,0,parent.left.points.length);    System.arraycopy(parent.right.points,0,minInstList,parent.left.points.length,parent.right.points.length);    parent.points=minInstList;    parent.anchor=minPivot;    parent.radius=BallNode.calcRadius(parent.points,m_Instances,minPivot,m_DistanceFunction);    list.remove(min1);    list.remove(min2 - 1);    list.add(parent);  }  System.err.println("");  TempNode tmpRoot=(TempNode)list.get(0);  if (m_InstList.length != tmpRoot.points.length)   throw new Exception("Root nodes instance list is of irregular length. " + "Please check code.");  System.arraycopy(tmpRoot.points,0,m_InstList,0,tmpRoot.points.length);  m_NumNodes=m_MaxDepth=m_NumLeaves=0;  tmpRadius=BallNode.calcRadius(instList,m_Instances,tmpRoot.anchor,m_DistanceFunction);  BallNode node=makeBallTree(tmpRoot,startIdx,endIdx,instList,0,tmpRadius);  return node;}  }
class C{  public ConditionLock(){}  }
class C{  private void writeOutputFiles(){  if (config.getOutputNetworkFile() != null && config.getOutputScheduleFile() != null) {    try {      ScheduleTools.writeTransitSchedule(schedule,config.getOutputScheduleFile());      NetworkTools.writeNetwork(network,config.getOutputNetworkFile());    } catch (    Exception e) {      log.error("Cannot write to output directory! Trying to write schedule and network file in working directory");      long t=System.nanoTime() / 1000000;      try {        ScheduleTools.writeTransitSchedule(schedule,t + "schedule.xml.gz");        NetworkTools.writeNetwork(network,t + "network.xml.gz");      } catch (      Exception e1) {        throw new RuntimeException("Files could not be written in working directory");      }    }    if (config.getOutputStreetNetworkFile() != null) {      NetworkTools.writeNetwork(NetworkTools.filterNetworkByLinkMode(network,Collections.singleton(TransportMode.car)),config.getOutputStreetNetworkFile());    }  } else {    log.info("");    log.info("No output paths defined, schedule and network are not written to files.");  }}  }
class C{  public long orElseGet(LongSupplier supplier){  return isPresent ? value : supplier.getAsLong();}  }
class C{  public int processBytes(byte[] in,int inOff,int len,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  if (len < 0) {    throw new IllegalArgumentException("Can't have a negative input length!");  }  int blockSize=getBlockSize();  int length=getUpdateOutputSize(len);  if (length > 0) {    if ((outOff + length) > out.length) {      throw new OutputLengthException("output buffer too short");    }  }  int resultLen=0;  int gapLen=buf.length - bufOff;  if (len > gapLen) {    System.arraycopy(in,inOff,buf,bufOff,gapLen);    resultLen+=cipher.processBlock(buf,0,out,outOff);    bufOff=0;    len-=gapLen;    inOff+=gapLen;    while (len > buf.length) {      resultLen+=cipher.processBlock(in,inOff,out,outOff + resultLen);      len-=blockSize;      inOff+=blockSize;    }  }  System.arraycopy(in,inOff,buf,bufOff,len);  bufOff+=len;  return resultLen;}  }
class C{  static String rfctoXML(String string){  try {    String s=changeLess32toXML(string);    return changeWStoXML(s);  } catch (  Exception e) {    return string;  }}  }
class C{  private void doAddMapping(String user,String domain,String mapping) throws RecipientRewriteTableException {  EntityManager entityManager=entityManagerFactory.createEntityManager();  final EntityTransaction transaction=entityManager.getTransaction();  try {    transaction.begin();    JPARecipientRewrite jpaRecipientRewrite=new JPARecipientRewrite(user,domain,mapping);    entityManager.persist(jpaRecipientRewrite);    transaction.commit();  } catch (  PersistenceException e) {    getLogger().debug("Failed to save virtual user",e);    if (transaction.isActive()) {      transaction.rollback();    }    throw new RecipientRewriteTableException("Unable to add mapping",e);  } finally {    entityManager.close();  }}  }
class C{  @Override public boolean connectionAllowed(String eventName){  return (m_listenee == null);}  }
class C{  public static void readDefault(){  ClassLoader l=Skeleton.class.getClassLoader();  URL url;  if (l != null) {    url=l.getResource(DEFAULT_LOC);  } else {    url=ClassLoader.getSystemResource(DEFAULT_LOC);  }  if (url == null) {    Out.error(ErrorMessages.SKEL_IO_ERROR_DEFAULT);    throw new GeneratorException();  }  try {    InputStreamReader reader=new InputStreamReader(url.openStream());    readSkel(new BufferedReader(reader));  } catch (  IOException e) {    Out.error(ErrorMessages.SKEL_IO_ERROR_DEFAULT);    throw new GeneratorException();  }}  }
class C{  public void addChunk(byte[] data){  cache.write(data,0,data.length);  currentSize+=data.length;}  }
class C{  protected void verifyFileSize(ParcelFileDescriptor pfd,long size){  assertEquals(pfd.getStatSize(),size);}  }
class C{  private static String wordShapeDan1(String s){  boolean digit=true;  boolean upper=true;  boolean lower=true;  boolean mixed=true;  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);    if (!Character.isDigit(c)) {      digit=false;    }    if (!Character.isLowerCase(c)) {      lower=false;    }    if (!Character.isUpperCase(c)) {      upper=false;    }    if ((i == 0 && !Character.isUpperCase(c)) || (i >= 1 && !Character.isLowerCase(c))) {      mixed=false;    }  }  if (digit) {    return "ALL-DIGITS";  }  if (upper) {    return "ALL-UPPER";  }  if (lower) {    return "ALL-LOWER";  }  if (mixed) {    return "MIXED-CASE";  }  return "OTHER";}  }
class C{  public void initOptions(){  _viewerField.setText(URLHandlerSettings.IMAGE_VIEWER.getValue());}  }
class C{  public AdempiereUserError(String message){  super(message);}  }
class C{  @Override public Status process() throws EventDeliveryException {  Channel channel=getChannel();  Transaction transaction=channel.getTransaction();  int eventCount=0;  try {    transaction.begin();    List<Event> batch=new ArrayList<>(batchSize);    for (; eventCount < batchSize; ++eventCount) {      Event event=channel.take();      if (event == null) {        break;      }      batch.add(event);    }    if (!batch.isEmpty()) {      ignite.cache(cacheName).putAll(eventTransformer.transform(batch));      if (batch.size() < batchSize)       sinkCounter.incrementBatchUnderflowCount(); else       sinkCounter.incrementBatchCompleteCount();    } else {      sinkCounter.incrementBatchEmptyCount();    }    sinkCounter.addToEventDrainAttemptCount(batch.size());    transaction.commit();    sinkCounter.addToEventDrainSuccessCount(batch.size());  } catch (  Exception e) {    log.error("Failed to process events",e);    transaction.rollback();    throw new EventDeliveryException(e);  } finally {    transaction.close();  }  return eventCount == 0 ? Status.BACKOFF : Status.READY;}  }
class C{  public static Vset firstDAandSecondDU(Vset sourceDA,Vset sourceDU){  if (sourceDA.x == fullX) {    return sourceDA.copy();  }  long sourceDAx[]=sourceDA.x;  int lenDA=sourceDAx.length;  long sourceDUx[]=sourceDU.x;  int lenDU=sourceDUx.length;  int limit=(lenDA > lenDU) ? lenDA : lenDU;  long x[]=emptyX;  if (limit > 0) {    x=new long[limit];    for (int i=0; i < lenDA; i+=2) {      x[i]=sourceDAx[i];    }    for (int i=1; i < lenDU; i+=2) {      x[i]=sourceDUx[i];    }  }  return new Vset(sourceDA.vset,sourceDU.uset,x);}  }
class C{  public AbstractXMLEventParser(){  this.namespaceURI=null;}  }
class C{  public void flush() throws IOException {  se.flush();}  }
class C{  public void write(DataSource data,OutputStream output) throws IOException {  int w=data.getColumnCount();  int h=data.getRowCount();  double factor=this.<Number>getSetting("factor").doubleValue();  double offset=this.<Number>getSetting("offset").doubleValue();  byte[] pixelData=new byte[w * h];  int pos=0;  for (int y=0; y < h; y++) {    for (int x=0; x < w; x++) {      Comparable<?> cell=data.get(x,y);      if (!(cell instanceof Number)) {        continue;      }      Number numericCell=(Number)cell;      double value=numericCell.doubleValue() * factor + offset;      byte v=(byte)Math.round(MathUtils.limit(value,0.0,255.0));      pixelData[pos++]=v;    }  }  BufferedImage image=new BufferedImage(w,h,BufferedImage.TYPE_BYTE_GRAY);  image.getRaster().setDataElements(0,0,w,h,pixelData);  Iterator<javax.imageio.ImageWriter> writers=ImageIO.getImageWritersByMIMEType(getMimeType());  try {    javax.imageio.ImageWriter writer=writers.next();    writer.setOutput(ImageIO.createImageOutputStream(output));    writer.write(image);  } catch (  NoSuchElementException e) {    throw new IOException(MessageFormat.format("No writer found for MIME type {0}.",getMimeType()));  }}  }
class C{  @Override public void onRequestPermissionsResult(int requestCode,String[] permissions,int[] grantResults){switch (requestCode) {case VIDEO_LIST_RESULT:    if (hasPermission(permission.READ_PHONE_STATE) && hasPermission(permission.WRITE_EXTERNAL_STORAGE)) {      requestPermissionWriteSettings(R.id.video_list);    } else {      makePostRequestSnack();    }  break;case DOWNLOAD_LIST_RESULT:if (hasPermission(permission.READ_PHONE_STATE) && hasPermission(permission.WRITE_EXTERNAL_STORAGE)) {  requestPermissionWriteSettings(R.id.download_list);} else {  makePostRequestSnack();}break;case ONLINE_VIDEO_PORTRAIT_RESULT:if (hasPermission(permission.READ_PHONE_STATE) && hasPermission(permission.WRITE_EXTERNAL_STORAGE)) {requestPermissionWriteSettings(R.id.online_video_portrait);} else {makePostRequestSnack();}break;case ONLINE_VIDEO_LAND_SCAPE_RESULT:if (hasPermission(permission.READ_PHONE_STATE) && hasPermission(permission.WRITE_EXTERNAL_STORAGE)) {requestPermissionWriteSettings(R.id.online_video_land_scape);} else {makePostRequestSnack();}break;case RECORD_VIDEO_RESULT:if (hasPermission(permission.CAMERA) && hasPermission(permission.RECORD_AUDIO) && hasPermission(permission.WRITE_EXTERNAL_STORAGE)) {requestPermissionWriteSettings(R.id.record_video);} else {makePostRequestSnack();}break;case UPLOAD_RESULT:if (hasPermission(permission.READ_PHONE_STATE) && hasPermission(permission.WRITE_EXTERNAL_STORAGE)) {requestPermissionWriteSettings(R.id.upload);} else {makePostRequestSnack();}break;}}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private static int upper_bound(int first,int last,int x,IntComparator comp){  int len=last - first;  while (len > 0) {    int half=len / 2;    int middle=first + half;    if (comp.compare(x,middle) < 0) {      len=half;    } else {      first=middle + 1;      len-=half + 1;    }  }  return first;}  }
class C{  @Override public String toString(){  return "SetAndCount [count=" + count + ", set="+ set+ "]";}  }
class C{  private void grow(){  int oldCapacity=queue.length;  int newCapacity=oldCapacity + (oldCapacity >> 1);  if (newCapacity < 0)   newCapacity=Integer.MAX_VALUE;  queue=Arrays.copyOf(queue,newCapacity);}  }
class C{  public int hue(){  return (int)scalar.val[0];}  }
class C{  public static void writeFully(FileChannel channel,ByteBuffer src) throws IOException {  do {    channel.write(src);  } while (src.remaining() > 0);}  }
class C{  public DateColumn selectIf(IntPredicate predicate){  DateColumn column=emptyCopy();  IntIterator iterator=intIterator();  while (iterator.hasNext()) {    int next=iterator.nextInt();    if (predicate.test(next)) {      column.add(next);    }  }  return column;}  }
class C{  public final void addition(MathVector u){  for (int i=0; i < NDIM; i++) {    data[i]+=u.data[i];  }}  }
class C{  public RemoteVmManager(RemoteHost remoteHost,String user){  this.user=user;  this.remoteHost=remoteHost;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.401 -0500",hash_original_method="C186D197DF9F597D97CCBBCF2B270ED9",hash_generated_method="00CBD488EC6B083F67E9229B1527959E") static public void assertEquals(boolean expected,boolean actual){  assertEquals(null,expected,actual);}  }
class C{  public void send(){  carbonMessage.setProperty(Constants.HTTP_STATUS_CODE,getStatusCode());  List<Header> cookiesHeader=new ArrayList<>();  if (jaxrsResponse != null) {    MultivaluedMap<String,String> multivaluedMap=jaxrsResponse.getStringHeaders();    if (multivaluedMap != null) {      multivaluedMap.forEach(null);    }    Map<String,NewCookie> cookies=jaxrsResponse.getCookies();    cookies.forEach(null);  }  Session session=request.getSessionInternal();  if (session != null && session.isValid() && session.isNew()) {    cookiesHeader.add(new Header("Set-Cookie",MSF4JConstants.SESSION_ID + session.getId()));  }  carbonMessage.getHeaders().set(cookiesHeader);  processEntity();}  }
class C{  protected LinkedList<OutputPort> preAutoWire(LinkedList<OutputPort> readyOutputs) throws OperatorException {  return readyOutputs;}  }
class C{  public void windowGainedFocus(WindowEvent e){}  }
class C{  private void keygen(){  generateL1();  generateL2();  generateF();  computePublicKey();}  }
class C{  public ProcessStats(String who){  componentName=who;}  }
class C{  protected <K extends Serializable,V extends Serializable>CacheBinding<K,V> persist(String name,Class<K> keyType,TypeLiteral<V> valType){  return persist(name,TypeLiteral.get(keyType),valType);}  }
class C{  public void createDBAndStoreSettings(final InitController.ConfigDto config){  createDbStructure();  storeAdminUserIfProvided();  storeConfiguration(config);}  }
class C{  public TemplatePersistenceData[] read(Reader reader) throws IOException {  return read(reader,null);}  }
class C{  public PrintMouseListener(PrintableComponent component){  m_Component=component;}  }
class C{  static double stirlingFormula(double x) throws ArithmeticException {  double STIR[]={7.87311395793093628397E-4,-2.29549961613378126380E-4,-2.68132617805781232825E-3,3.47222221605458667310E-3,8.33333333333482257126E-2};  double MAXSTIR=143.01608;  double w=1.0 / x;  double y=Math.exp(x);  w=1.0 + w * Polynomial.polevl(w,STIR,4);  if (x > MAXSTIR) {    double v=Math.pow(x,0.5 * x - 0.25);    y=v * (v / y);  } else {    y=Math.pow(x,x - 0.5) / y;  }  y=SQTPI * y * w;  return y;}  }
class C{  public static ResumptionAction fromOrdinal(byte ordinal){  return PRIVATE_VALUES[ordinal];}  }
class C{  public void clear(){  int max=bits.length;  for (int i=0; i < max; i++) {    bits[i]=0;  }}  }
class C{  public int currentSegment(double[] coords){  if (isDone()) {    throw new NoSuchElementException("ellipse iterator out of bounds");  }  if (index == 5) {    return SEG_CLOSE;  }  if (index == 0) {    double ctrls[]=ctrlpts[3];    coords[0]=x + ctrls[4] * w;    coords[1]=y + ctrls[5] * h;    if (affine != null) {      affine.transform(coords,0,coords,0,1);    }    return SEG_MOVETO;  }  double ctrls[]=ctrlpts[index - 1];  coords[0]=x + ctrls[0] * w;  coords[1]=y + ctrls[1] * h;  coords[2]=x + ctrls[2] * w;  coords[3]=y + ctrls[3] * h;  coords[4]=x + ctrls[4] * w;  coords[5]=y + ctrls[5] * h;  if (affine != null) {    affine.transform(coords,0,coords,0,3);  }  return SEG_CUBICTO;}  }
class C{  @Override public boolean connectionAllowed(EventSetDescriptor esd){  Vector<BeanInstance> targets=getSuitableTargets(esd);  for (int i=0; i < targets.size(); i++) {    BeanInstance input=targets.elementAt(i);    if (input.getBean() instanceof BeanCommon) {      if (((BeanCommon)input.getBean()).connectionAllowed(esd)) {        return true;      }    } else {      return true;    }  }  return false;}  }
class C{  public void removeMorph(){  if (currentMorph == null) {    return;  }  currentMorph.clear();  currentMorph=null;}  }
class C{  public static void removeMiddlePointsFromLineSegments(SingleLinkedNode<Point> node){  SingleLinkedNode<Point> curr1=node, curr2=node;  while (curr1 != null && curr1.next != null) {    if (curr1.item.x == curr1.next.item.x) {      while (curr2.next != null && curr2.next.item.x == curr1.item.x) {        curr2=curr2.next;      }      curr1.next=curr2;    } else     if (curr1.item.y == curr1.next.item.y) {      while (curr2.next != null && curr2.next.item.y == curr1.item.y) {        curr2=curr2.next;      }      curr1.next=curr2;    } else {      System.out.println("Linked list doesn't represent line segments!");      return;    }    curr1=curr1.next;  }}  }
class C{  public GeonamesLineParser(String[] header){  super(header);}  }
class C{  private boolean testConnection(boolean isSource,boolean isSystem){  Connection connection=getDatabaseConnection(isSource,isSystem);  boolean result=false;  if (connection != null)   result=true;  closeDatabaseConnection(connection);  return result;}  }
class C{  public static TracksChooserDialog newInstance(MediaInfo mediaInfo){  TracksChooserDialog fragment=new TracksChooserDialog();  Bundle bundle=new Bundle();  bundle.putBundle(VideoCastManager.EXTRA_MEDIA,Utils.mediaInfoToBundle(mediaInfo));  fragment.setArguments(bundle);  return fragment;}  }
class C{  public Eval<T> lazy(String key){  if (!pipes.get(key).isPresent())   pipes.register(key,factory.build());  return pipes.nextOrNull(key);}  }
class C{  public boolean hasTableName(){  return hasExtension(TableName.class);}  }
class C{  public void add(SeriesDataset[] data){  for (int i=0; i < data.length; i++) {    fastAdd(data[i]);  }  DatasetChangeEvent event=new DatasetChangeEvent(this,this);  notifyListeners(event);}  }
class C{  public Response handleRequest(Request request,Context context) throws RuntimeException {  Service businessService=getApplicationContext().getBean(Service.class);  return new Response(businessService.getText(request.getFirstName() + " " + request.getLastName()));}  }
class C{  boolean reportIncompatibleReturnTypeError(MethodBinding currentMethod,MethodBinding inheritedMethod){  problemReporter(currentMethod).incompatibleReturnType(currentMethod,inheritedMethod);  return true;}  }
class C{  public CommunicationException(Throwable arg0){  super(arg0);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().getVideoFrame().slower();  return null;}  }
class C{  public Named(String theName,Type theObject){  name=theName;  object=theObject;}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:55.564 -0500",hash_original_method="BD120DD25E8222693A9ADBDDB2DA9384",hash_generated_method="65442D82859A19E4CC821E815E314D2D") public static Certificate[] verifySignature(InputStream signature,InputStream signatureBlock) throws IOException, GeneralSecurityException {  Certificate[] certs=new Certificate[1];  certs[0]=new org.apache.harmony.security.provider.cert.X509CertImpl(signature);  certs[0].addTaint(signatureBlock.getTaint());  return certs;}  }
class C{  protected Node newNode(){  return new SVGOMClipPathElement();}  }
class C{  public ArrayNode addArray(){  ArrayNode n=arrayNode();  _add(n);  return n;}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData1);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            if (z1 < z2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData) {            if (z1 < constant2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData) {            if (z2 < constant1) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected void sendFunctionGroup2(){  int new_snd=((getF8() ? LnConstants.SND_F8 : 0) | (getF7() ? LnConstants.SND_F7 : 0) | (getF6() ? LnConstants.SND_F6 : 0)| (getF5() ? LnConstants.SND_F5 : 0));  LocoNetMessage msg=new LocoNetMessage(4);  msg.setOpCode(LnConstants.OPC_LOCO_SND);  msg.setElement(1,slot.getSlot());  msg.setElement(2,new_snd);  network.sendLocoNetMessage(msg);}  }
class C{  public InListCondition semiJoinToInList(ExpressionsSource values,Collection<JoinOperator> joins){  if (values.nFields() != 1)   return null;  ComparisonCondition ccond=null;  boolean found=false;  ConditionExpression joinCondition=onlyJoinCondition(joins);  if (joinCondition instanceof ComparisonCondition) {    ccond=(ComparisonCondition)joinCondition;    if ((ccond.getOperation() == Comparison.EQ) && (ccond.getRight() instanceof ColumnExpression)) {      ColumnExpression rcol=(ColumnExpression)ccond.getRight();      if ((rcol.getTable() == values) && (rcol.getPosition() == 0) && (ccond.getLeft() instanceof ColumnExpression)) {        ColumnExpression lcol=(ColumnExpression)ccond.getLeft();        for (        TableGroupJoinNode table : tables) {          if (table.getTable() == lcol.getTable()) {            found=true;            break;          }        }      }    }  }  if (!found)   return null;  return semiJoinToInList(values,ccond,queryGoal.getRulesContext());}  }
class C{  public final int decrementAndGet(){  for (; ; ) {    int current=get();    int next=current - 1;    if (compareAndSet(current,next))     return next;  }}  }
class C{  public SourceRange csp(List<? extends JCTree> trees){  if ((trees == null) || !(trees.nonEmpty()))   return null;  SourceRange list_sr=new SourceRange();  for (List<? extends JCTree> l=trees; l.nonEmpty(); l=l.tail) {    list_sr.mergeWith(csp(l.head));  }  positions.put(trees,list_sr);  return list_sr;}  }
class C{  @DELETE @Path("/{id}/protectionType") public Response unsetProtectionType(@PathParam("id") URI id){  VirtualArray varray=getVirtualArrayById(id,true);  String origProtectionType=(varray.getProtectionType() == null) ? "" : varray.getProtectionType();  varray.setProtectionType("");  _dbClient.persistObject(varray);  auditOp(OperationTypeEnum.UNSET_VARRAY_PROTECTIONTYPE,true,null,id.toString(),varray.getLabel(),origProtectionType);  return Response.ok().build();}  }
class C{  static boolean isSynthetic(final Member m){  if (MemberUtils.IS_SYNTHETIC != null) {    try {      return ((Boolean)MemberUtils.IS_SYNTHETIC.invoke(m)).booleanValue();    } catch (    Exception e) {    }  }  return false;}  }
class C{  public void delivery(Decision dec){  if (!containsGoodReconfig(dec)) {    Logger.println("(DeliveryThread.delivery) Decision from consensus " + dec.getConsensusId() + " does not contain good reconfiguration");    tomLayer.setLastExec(dec.getConsensusId());    tomLayer.setInExec(-1);  }  try {    decidedLock.lock();    decided.put(dec);    TOMMessage[] requests=extractMessagesFromDecision(dec);    tomLayer.clientsManager.requestsOrdered(requests);    notEmptyQueue.signalAll();    decidedLock.unlock();    Logger.println("(DeliveryThread.delivery) Consensus " + dec.getConsensusId() + " finished. Decided size="+ decided.size());  } catch (  Exception e) {    e.printStackTrace(System.out);  }}  }
class C{  public void testEmptyStrings(){  UIViewRoot root=Util.getViewHandler(getFacesContext()).createView(getFacesContext(),null);  root.setLocale(Locale.US);  UIInput text=new UIInput(), hidden=new UIInput(), secret=new UIInput();  text.setId("text");  hidden.setId("hidden");  secret.setId("secret");  text.setRendererType("Text");  hidden.setRendererType("Hidden");  secret.setRendererType("Secret");  root.getChildren().add(text);  root.getChildren().add(hidden);  root.getChildren().add(secret);  TextRenderer textRenderer=new TextRenderer();  HiddenRenderer hiddenRenderer=new HiddenRenderer();  SecretRenderer secretRenderer=new SecretRenderer();  try {    textRenderer.decode(getFacesContext(),text);    hiddenRenderer.decode(getFacesContext(),hidden);    secretRenderer.decode(getFacesContext(),secret);  } catch (  Throwable e) {    assertTrue(false);  }  assertTrue(text.isValid());  assertTrue(hidden.isValid());  assertTrue(secret.isValid());}  }
class C{  public TransferTransaction(final int version,final TimeInstant timeStamp,final Account sender,final Account recipient,final Amount amount,final TransferTransactionAttachment attachment){  super(TransactionTypes.TRANSFER,version,timeStamp,sender);  MustBe.notNull(recipient,"recipient");  this.recipient=recipient;  this.amount=amount;  this.attachment=null == attachment ? new TransferTransactionAttachment() : attachment;  VALIDATION_EXTENSIONS.validate(this);}  }
class C{  public static void println(Object x){  out.println(x);}  }
class C{  public static void registerConfig(){  Config.registerSelf(BasicStats.class);}  }
class C{  public final QuadEdge sym(){  return rot.rot;}  }
class C{  protected void processVmDestroy(SimEvent ev,boolean ack){  ContainerVm containerVm=(ContainerVm)ev.getData();  getVmAllocationPolicy().deallocateHostForVm(containerVm);  if (ack) {    int[] data=new int[3];    data[0]=getId();    data[1]=containerVm.getId();    data[2]=CloudSimTags.TRUE;    sendNow(containerVm.getUserId(),CloudSimTags.VM_DESTROY_ACK,data);  }  getContainerVmList().remove(containerVm);}  }
class C{  public boolean isExternal(){  return mIsExternal;}  }
class C{  public Iterator iterator(){  return new LongKeyMapIterator();}  }
class C{  @Override public PBounds computeFullBounds(final PBounds dstBounds){  final PBounds result=getUnionOfChildrenBounds(dstBounds);  cachedChildBounds.setRect(result);  result.setRect(result.getX() - outlinePadding,result.getY() - outlinePadding,result.getWidth() + 2 * outlinePadding,result.getHeight() + 2 * outlinePadding);  localToParent(result);  return result;}  }
class C{  public void futureBoolResult(long futPtr,int res){  enter();  try {    PlatformCallbackUtils.futureBoolResult(envPtr,futPtr,res);  }  finally {    leave();  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:32.316 -0500",hash_original_method="10B7F57DA48FEE510D3FE44F096FB152",hash_generated_method="FC28E11E54D49E3E7425983032DF35AD") public static String toHexString(float f){  if (f != f) {    return "NaN";  }  if (f == POSITIVE_INFINITY) {    return "Infinity";  }  if (f == NEGATIVE_INFINITY) {    return "-Infinity";  }  String str=new String();  str.addTaint(f);  return str;}  }
class C{  @Override public void updateScreen(){}  }
class C{  public MutableByte(final String value) throws NumberFormatException {  super();  this.value=Byte.parseByte(value);}  }
class C{  public static <OUTCOME_TYPE>List<Instance<OUTCOME_TYPE>> toInstances(List<OUTCOME_TYPE> outcomes,List<List<Feature>> featureLists){  int nOutcomes=outcomes.size();  int nFeatureLists=featureLists.size();  if (nOutcomes != nFeatureLists) {    String message="expected the same number of outcomes (%d) as featureLists (%d)";    throw new IllegalArgumentException(String.format(message,nOutcomes,nFeatureLists));  }  List<Instance<OUTCOME_TYPE>> instances=new ArrayList<Instance<OUTCOME_TYPE>>();  for (int i=0; i < nOutcomes; ++i) {    instances.add(new Instance<OUTCOME_TYPE>(outcomes.get(i),featureLists.get(i)));  }  return instances;}  }
