class C{  public static float roundFloat(float value,int afterDecimalPoint){  float mask=(float)Math.pow(10,(float)afterDecimalPoint);  return (float)(Math.round(value * mask)) / mask;}  }
class C{  public synchronized boolean isClosed(){  return journalWriter == null;}  }
class C{  public boolean isSelfBalancing(){  return this.selfBalancing;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  public static void sellStoreItem(Player seller,Player buyer,TradeList tradeList){  if (!validateParticipants(seller,buyer))   return;  PrivateStore store=seller.getStore();  tradeList=loadObjIds(seller,tradeList);  if (tradeList == null)   return;  Storage inventory=buyer.getInventory();  int freeSlots=inventory.getLimit() - inventory.getItemsWithKinah().size() + 1;  if (freeSlots < tradeList.size()) {    return;  }  long price=getTotalPrice(store,tradeList);  if (price < 0)   return;  if (buyer.getInventory().getKinah() >= price) {    for (    TradeItem tradeItem : tradeList.getTradeItems()) {      Item item=getItemByObjId(seller,tradeItem.getItemId());      if (item != null) {        TradePSItem storeItem=store.getTradeItemByObjId(tradeItem.getItemId());        if (item.getItemCount() < tradeItem.getCount()) {          PacketSendUtility.sendMessage(buyer,"You cannot buy more than player can sell.");          return;        }        decreaseItemFromPlayer(seller,item,tradeItem);        ItemService.addItem(buyer,item.getItemId(),tradeItem.getCount(),item);        if (storeItem.getCount() == tradeItem.getCount()) {          store.removeItem(storeItem.getItemObjId());        }        log.info("[PRIVATE STORE] > [Seller: " + seller.getName() + "] sold [Item: "+ item.getItemId()+ "][Amount: "+ item.getItemCount()+ "] to [Buyer: "+ buyer.getName()+ "] for [Price: "+ price+ "]");      }    }    decreaseKinahAmount(buyer,price);    increaseKinahAmount(seller,price);    if (store.getSoldItems().size() == 0) {      closePrivateStore(seller);    }  }}  }
class C{  private SootMethod createUnresolvedErrorMethod(SootClass declaringClass){  SootMethod m=new SootMethod(name,parameterTypes,returnType,isStatic() ? Modifier.STATIC : 0);  int modifiers=Modifier.PUBLIC;  if (isStatic())   modifiers|=Modifier.STATIC;  m.setModifiers(modifiers);  JimpleBody body=Jimple.v().newBody(m);  m.setActiveBody(body);  final LocalGenerator lg=new LocalGenerator(body);  if (!isStatic) {    RefType thisType=RefType.v(declaringClass);    Local lThis=lg.generateLocal(thisType);    body.getUnits().add(Jimple.v().newIdentityStmt(lThis,Jimple.v().newThisRef(thisType)));  }  for (int i=0; i < m.getParameterCount(); i++) {    Type paramType=m.getParameterType(i);    Local lParam=lg.generateLocal(paramType);    body.getUnits().add(Jimple.v().newIdentityStmt(lParam,Jimple.v().newParameterRef(paramType,i)));  }  RefType runtimeExceptionType=RefType.v("java.lang.Error");  NewExpr newExpr=Jimple.v().newNewExpr(runtimeExceptionType);  Local exceptionLocal=lg.generateLocal(runtimeExceptionType);  AssignStmt assignStmt=Jimple.v().newAssignStmt(exceptionLocal,newExpr);  body.getUnits().add(assignStmt);  SootMethodRef cref=Scene.v().makeConstructorRef(runtimeExceptionType.getSootClass(),Collections.<Type>singletonList(RefType.v("java.lang.String")));  SpecialInvokeExpr constructorInvokeExpr=Jimple.v().newSpecialInvokeExpr(exceptionLocal,cref,StringConstant.v("Unresolved compilation error: Method " + getSignature() + " does not exist!"));  InvokeStmt initStmt=Jimple.v().newInvokeStmt(constructorInvokeExpr);  body.getUnits().insertAfter(initStmt,assignStmt);  body.getUnits().insertAfter(Jimple.v().newThrowStmt(exceptionLocal),initStmt);  declaringClass.addMethod(m);  return m;}  }
class C{  public PrivilegedDistributedTask(){  super();}  }
class C{  private void updateAllowedHeader(int numAllowed,boolean toggleValue){  ExpandablePreferenceGroup allowedGroup=(ExpandablePreferenceGroup)getPreferenceScreen().findPreference(ALLOWED_GROUP);  if (numAllowed == 0) {    if (allowedGroup != null)     getPreferenceScreen().removePreference(allowedGroup);    return;  }  if (!mGroupByAllowBlock)   return;  int resourceId=toggleValue ? R.string.website_settings_allowed_group_heading : R.string.website_settings_exceptions_group_heading;  allowedGroup.setGroupTitle(resourceId,numAllowed);  TintedDrawable icon=TintedDrawable.constructTintedDrawable(getResources(),mAllowListExpanded ? R.drawable.ic_expanded : R.drawable.ic_collapsed);  allowedGroup.setExpanded(mAllowListExpanded);  allowedGroup.setIcon(icon);}  }
class C{  private boolean rebuildItems(){  boolean updated=false;  ItemsRange range=getItemsRange();  if (itemsLayout != null) {    int first=recycle.recycleItems(itemsLayout,firstItem,range);    updated=firstItem != first;    firstItem=first;  } else {    createItemsLayout();    updated=true;  }  if (!updated) {    updated=firstItem != range.getFirst() || itemsLayout.getChildCount() != range.getCount();  }  if (firstItem > range.getFirst() && firstItem <= range.getLast()) {    for (int i=firstItem - 1; i >= range.getFirst(); i--) {      if (!addViewItem(i,true)) {        break;      }      firstItem=i;    }  } else {    firstItem=range.getFirst();  }  int first=firstItem;  for (int i=itemsLayout.getChildCount(); i < range.getCount(); i++) {    if (!addViewItem(firstItem + i,false) && itemsLayout.getChildCount() == 0) {      first++;    }  }  firstItem=first;  return updated;}  }
class C{  public SpaceDocument(String typeName){  this(typeName,null);}  }
class C{  public StatelessSection(int itemResourceId){  super();  this.itemResourceId=itemResourceId;}  }
class C{  public static CommonConfetti rainingConfetti(ViewGroup container,ConfettiSource confettiSource,int[] colors){  final CommonConfetti commonConfetti=new CommonConfetti(container);  commonConfetti.configureRainingConfetti(container,confettiSource,colors);  return commonConfetti;}  }
class C{  public static double[] yVals(double[] vector){  double[] y=new double[vector.length / 2];  int count=0;  for (int i=0; i < vector.length; i++) {    if (i % 2 == 0)     y[count++]=vector[i];  }  return y;}  }
class C{  public void onFileDelete(final File file){}  }
class C{  public ViewActionSeparator(int rank){  super(rank,null,"");}  }
class C{  public Expression bindValueVariable(Value var,Value map){  throw new RuntimeException("Unsupported operation.");}  }
class C{  public static boolean hasWidgetStyles(@NotNull Project project,@NotNull ResourceResolver resolver,@NotNull String tagName){  return !getWidgetStyleNames(project,resolver,tagName).isEmpty();}  }
class C{  public String post(String url,RequestParams params) throws HttpException {  return post(null,url,params);}  }
class C{  @Override public void onServiceConnected(ComponentName name,IBinder service){  if (!name.equals(mRunningJob.getServiceComponent())) {    mCallbackHandler.obtainMessage(MSG_SHUTDOWN_EXECUTION).sendToTarget();    return;  }  this.service=IJobService.Stub.asInterface(service);  mCallbackHandler.obtainMessage(MSG_SERVICE_BOUND).sendToTarget();}  }
class C{  public static DockerPortMapping fromMap(Map.Entry<String,List<Map<String,String>>> entry){  DockerPortMapping portMapping=new DockerPortMapping();  if (entry.getValue() == null) {    return null;  }  portMapping.containerPort=entry.getKey();  int protocolSeparatorIndex=portMapping.containerPort.indexOf("/");  if (protocolSeparatorIndex != -1) {    portMapping.protocol=Protocol.fromString(portMapping.containerPort.substring(protocolSeparatorIndex + 1));    portMapping.containerPort=portMapping.containerPort.substring(0,protocolSeparatorIndex);  }  Map<String,String> hostMap=entry.getValue().get(0);  portMapping.hostIp=hostMap.get(HOST_IP);  portMapping.hostPort=hostMap.get(HOST_PORT);  return portMapping;}  }
class C{  public ApiRequest(String format,String asyncAfter,@NotNull String perPage,@NotNull String page,UriInfo uriInfo) throws BadApiRequestException {  this.uriInfo=uriInfo;  this.format=generateAcceptFormat(format);  this.paginationParameters=generatePaginationParameters(perPage,page);  this.builder=Response.status(Response.Status.OK);  this.asyncAfter=generateAsyncAfter(asyncAfter == null ? SYSTEM_CONFIG.getStringProperty(SYSTEM_CONFIG.getPackageVariableName("default_asyncAfter")) : asyncAfter);}  }
class C{  public Builder withSupportedRange(Range<Integer> versionRange){  Preconditions.checkNotNull(versionRange);  supportedVersionRange=versionRange;  return this;}  }
class C{  public static void main(String[] args) throws Exception {  String[] s="This is a test. 1 2 3 4-5.".split("(\\s|\\p{Punct})+");  List<String> alTest=Arrays.asList(s);  shuffleList(alTest);  System.out.println(alTest.toString());}  }
class C{  private void inverse(double[] rinv,int nreq){  int pos=nreq * (nreq - 1) / 2 - 1;  int pos1=-1;  int pos2=-1;  double total=0.0;  Arrays.fill(rinv,Double.NaN);  for (int row=nreq - 1; row > 0; --row) {    if (!this.lindep[row]) {      final int start=(row - 1) * (nvars + nvars - row) / 2;      for (int col=nreq; col > row; --col) {        pos1=start;        pos2=pos;        total=0.0;        for (int k=row; k < col - 1; k++) {          pos2+=nreq - k - 1;          if (!this.lindep[k]) {            total+=-r[pos1] * rinv[pos2];          }          ++pos1;        }        rinv[pos]=total - r[pos1];        --pos;      }    } else {      pos-=nreq - row;    }  }}  }
class C{  private Element findMemberInReplGroup(String sourceMember){  NodeList gl=m_rootDoc.getElementsByTagName(GROUP_TAG);  for (int i=0; i < gl.getLength(); i++) {    Element groupElem=(Element)gl.item(i);    NodeList repNodeList=groupElem.getElementsByTagName(REPL_POLICY_TAG);    if (repNodeList.getLength() > 0) {      NodeList ml=groupElem.getElementsByTagName(MEMBER_NAME_TAG);      for (int j=0; j < ml.getLength(); j++) {        Node memNode=ml.item(j).getFirstChild();        if (memNode.getNodeValue().equals(sourceMember)) {          return (Element)ml.item(j).getParentNode();        }      }    }  }  return null;}  }
class C{  public Builder withFindOnlyReferences(boolean findOnlyReferences){  myFindOnlyReferences=findOnlyReferences;  return this;}  }
class C{  public PhoneSetImpl(URL url) throws IOException {  BufferedReader reader;  String line;  phonesetMap=new HashMap();  reader=new BufferedReader(new InputStreamReader(url.openStream()));  line=reader.readLine();  lineCount++;  while (line != null) {    if (!line.startsWith("***")) {      parseAndAdd(line);    }    line=reader.readLine();  }  reader.close();}  }
class C{  public void recordOpenedNTP(){  setFirstAction(OPENED_NTP);}  }
class C{  public void onRecentTabsPageOpened(){  if (!mCanDisableSessionInvalidations)   return;  ++mNumRecentTabPages;  if (mNumRecentTabPages == 1) {    setSessionInvalidationsEnabled(true,REGISTER_FOR_SESSION_SYNC_INVALIDATIONS_DELAY_MS);  }}  }
class C{  public boolean isComponentPresent(String componentName){  String dataPath=components.getDataPath(componentName);  String componentDataPath=DataPathUtil.normalize(dataPath.toLowerCase());  return componentList.stream().anyMatch(containsDataPath(componentDataPath));}  }
class C{  private boolean satisfiesFilter(JobRow jobRow,JobRowFilter jobRowFilter) throws IllegalArgumentException {  JobField filterJobField=jobRowFilter.getJobField();  FilterOperation filterOperation=jobRowFilter.getOperation();  Set<String> filterValues=jobRowFilter.getValues();  if (!jobRow.containsKey(filterJobField)) {    Set<JobField> actualJobFields=jobRow.keySet();    LOG.debug(FILTER_JOBFIELD_UNDEFINED.logFormat(filterJobField,actualJobFields));    throw new IllegalArgumentException(FILTER_JOBFIELD_UNDEFINED.format(filterJobField,actualJobFields));  }  String actualValue=jobRow.get(filterJobField);switch (filterOperation) {case notin:    return !filterValues.contains(actualValue);case startswith:  return filterValues.stream().anyMatch(null);case contains:return filterValues.stream().anyMatch(null);case in:case eq:return filterValues.contains(actualValue);default :LOG.debug(FILTER_OPERATOR_INVALID.logFormat(filterOperation));throw new IllegalArgumentException(FILTER_OPERATOR_INVALID.format(filterOperation));}}  }
class C{  public DWithinExtended(){  super(null,null);}  }
class C{  @Pollable(message="Start Creating Mojito Folder Structure") private MojitoAppUserInfo createMojitoFolderStructure() throws BoxSDKServiceException {  logger.debug("Creating Mojito Folder Structure");  try {    MojitoAppUserInfo result=new MojitoAppUserInfo();    BoxAPIConnection apiConnection=boxAPIConnectionProvider.getConnection();    BoxFolder parentFolder=new BoxFolder(apiConnection,BoxFolder.getRootFolder(apiConnection).getID());    BoxFolder.Info mojitoFolder=parentFolder.createFolder(MOJITO_FOLDER_NAME);    logger.debug("Created Mojito Folder: " + mojitoFolder.getID());    result.setRootFolderId(mojitoFolder.getID());    BoxFolder.Info projectRequestFolder=mojitoFolder.getResource().createFolder(PROJECT_REQUESTS_FOLDER_NAME);    logger.debug("Created Project Requests Folder: " + projectRequestFolder.getID());    result.setDropsFolderId(projectRequestFolder.getID());    return result;  } catch (  BoxAPIException e) {    throw new BoxSDKServiceException("Can't creating Mojito Folder Structure.",e);  }}  }
class C{  public long[] unCompress(byte[] compInput){  try {    return Snappy.uncompressLongArray(compInput);  } catch (  IOException e) {    LOGGER.error(e,e.getMessage());  }  return null;}  }
class C{  public static boolean isFileNewer(File file,Date date){  if (date == null) {    throw new IllegalArgumentException("No specified date");  }  return isFileNewer(file,date.getTime());}  }
class C{  public static TtEltype transformTtmlDocument(TtEltype tt,Transformer transformer){  JAXBElement<TtEltype> ttJaxb=new ObjectFactory().createTt(tt);  try {    JAXBContext jaxbc=createTtmlJaxbContext();    JAXBSource source=new JAXBSource(jaxbc,ttJaxb);    JAXBResult result=new JAXBResult(jaxbc);    transformer.transform(source,result);    return (TtEltype)((JAXBElement<TtEltype>)result.getResult()).getValue();  } catch (  JAXBException|TransformerException e) {    throw new ConvertException(e);  }}  }
class C{  public boolean isUptoDate(){  return this.uptodate;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  @Override public WriteFuture write(Object message,SocketAddress remoteAddress){  return null;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_PARTY_MATCH_JUST_SENT_APPLY(String value0){  return new SM_SYSTEM_MESSAGE(1400189,value0);}  }
class C{  public void destroyView() throws CanceledException {  frame.setVisible(false);  MeganProperties.removePropertiesListListener(menuBar.getRecentFilesListener());  dir.removeViewer(this);  searchManager.getFindDialogAsToolBar().close();  frame.dispose();}  }
class C{  public static Table readTable(String path) throws IOException {  ExecutorService executorService=Executors.newFixedThreadPool(READER_POOL_SIZE);  CompletionService readerCompletionService=new ExecutorCompletionService<>(executorService);  TableMetadata tableMetadata=readTableMetadata(path + separator() + "Metadata.json");  List<ColumnMetadata> columnMetadata=tableMetadata.getColumnMetadataList();  Table table=Table.create(tableMetadata);  ConcurrentLinkedQueue<Column> columnList=new ConcurrentLinkedQueue<>();  Map<String,Column> columns=new HashMap<>();  try {    for (    ColumnMetadata column : columnMetadata) {      readerCompletionService.submit(null);    }    for (int i=0; i < columnMetadata.size(); i++) {      Future future=readerCompletionService.take();      future.get();    }    for (    Column c : columnList) {      columns.put(c.id(),c);    }    for (    ColumnMetadata metadata : columnMetadata) {      String id=metadata.getId();      table.addColumn(columns.get(id));    }  } catch (  InterruptedException|ExecutionException e) {    throw new RuntimeException(e);  }  executorService.shutdown();  return table;}  }
class C{  public static final void applyTransform(GL2 gl,Transform t){  Vector2 tr=t.getTranslation();  gl.glTranslated(tr.x,tr.y,0.0);  gl.glRotated(Math.toDegrees(t.getRotation()),0.0,0.0,1.0);}  }
class C{  public MultiKMeansPlusPlusClusterer(final KMeansPlusPlusClusterer<T> clusterer,final int numTrials,final ClusterEvaluator<T> evaluator){  super(clusterer.getDistanceMeasure());  this.clusterer=clusterer;  this.numTrials=numTrials;  this.evaluator=evaluator;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  @Override protected void onSaveInstanceState(Bundle outState){  outState.putParcelableArrayList(SAVED_INSTANCE_MEIZHI,mainPresenter.getData());  super.onSaveInstanceState(outState);}  }
class C{  public boolean isApproveData(){  return workflow != null;}  }
class C{  public GroupsIsMemberQuery userId(Integer value){  return unsafeParam("user_id",value);}  }
class C{  public void putInt(String key,int value){  checkForNullKey(key);  preferences.edit().putInt(key,value).apply();}  }
class C{  private boolean checkInterface(@Nonnull ClassProto other){  boolean isResolved=true;  boolean isInterface=true;  try {    isInterface=isInterface();  } catch (  UnresolvedClassException ex) {    isResolved=false;  }  if (isInterface) {    try {      if (other.implementsInterface(getType())) {        return true;      }    } catch (    UnresolvedClassException ex) {      if (isResolved) {        throw ex;      }    }  }  return false;}  }
class C{  private Bitmap processBitmap(int resId){  if (BuildConfig.DEBUG) {    Log.d(TAG,"processBitmap - " + resId);  }  return decodeSampledBitmapFromResource(mResources,resId,mImageWidth,mImageHeight,getImageCache());}  }
class C{  public void putDelegate(String alias,X509ExtendedKeyManager newDelegate){  if (!alias.equals(alias.toLowerCase())) {    throw new IllegalArgumentException("Aliases must be all lowercase");  }  delegates.put(alias,newDelegate);}  }
class C{  protected Node normalizeNode(Node node){  int type=node.getNodeType();  boolean wellformed;  fLocator.fRelatedNode=node;switch (type) {case Node.DOCUMENT_TYPE_NODE:{      if (DEBUG_ND) {        System.out.println("==>normalizeNode:{doctype}");      }      break;    }case Node.ELEMENT_NODE:{    if (DEBUG_ND) {      System.out.println("==>normalizeNode:{element} " + node.getNodeName());    }    if (fDocument.errorChecking) {      if (((fConfiguration.features & DOMConfigurationImpl.WELLFORMED) != 0) && fDocument.isXMLVersionChanged()) {        if (fNamespaceValidation) {          wellformed=CoreDocumentImpl.isValidQName(node.getPrefix(),node.getLocalName(),fDocument.isXML11Version());        } else {          wellformed=CoreDocumentImpl.isXMLName(node.getNodeName(),fDocument.isXML11Version());        }        if (!wellformed) {          String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"wf-invalid-character-in-node-name",new Object[]{"Element",node.getNodeName()});          reportDOMError(fErrorHandler,fError,fLocator,msg,DOMError.SEVERITY_ERROR,"wf-invalid-character-in-node-name");        }      }    }    fNamespaceContext.pushContext();    fLocalNSBinder.reset();    ElementImpl elem=(ElementImpl)node;    if (elem.needsSyncChildren()) {      elem.synchronizeChildren();    }    AttributeMap attributes=(elem.hasAttributes()) ? (AttributeMap)elem.getAttributes() : null;    if ((fConfiguration.features & DOMConfigurationImpl.NAMESPACES) != 0) {      namespaceFixUp(elem,attributes);      if ((fConfiguration.features & DOMConfigurationImpl.NSDECL) == 0 && attributes != null) {        for (int i=0; i < attributes.getLength(); ++i) {          Attr att=(Attr)attributes.getItem(i);          if (XMLSymbols.PREFIX_XMLNS.equals(att.getPrefix()) || XMLSymbols.PREFIX_XMLNS.equals(att.getName())) {            elem.removeAttributeNode(att);            --i;          }        }      }    } else {      if (attributes != null) {        for (int i=0; i < attributes.getLength(); ++i) {          Attr attr=(Attr)attributes.item(i);          attr.normalize();          if (fDocument.errorChecking && ((fConfiguration.features & DOMConfigurationImpl.WELLFORMED) != 0)) {            isAttrValueWF(fErrorHandler,fError,fLocator,attributes,attr,attr.getValue(),fDocument.isXML11Version());            if (fDocument.isXMLVersionChanged()) {              if (fNamespaceValidation) {                wellformed=CoreDocumentImpl.isValidQName(node.getPrefix(),node.getLocalName(),fDocument.isXML11Version());              } else {                wellformed=CoreDocumentImpl.isXMLName(node.getNodeName(),fDocument.isXML11Version());              }              if (!wellformed) {                String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"wf-invalid-character-in-node-name",new Object[]{"Attr",node.getNodeName()});                reportDOMError(fErrorHandler,fError,fLocator,msg,DOMError.SEVERITY_ERROR,"wf-invalid-character-in-node-name");              }            }          }        }      }    }    if (fValidationHandler != null) {      fAttrProxy.setAttributes(attributes,fDocument,elem);      updateQName(elem,fQName);      fConfiguration.fErrorHandlerWrapper.fCurrentNode=node;      fCurrentNode=node;      fValidationHandler.startElement(fQName,fAttrProxy,null);    }    Node kid, next;    for (kid=elem.getFirstChild(); kid != null; kid=next) {      next=kid.getNextSibling();      kid=normalizeNode(kid);      if (kid != null) {        next=kid;      }    }    if (DEBUG_ND) {      System.out.println("***The children of {" + node.getNodeName() + "} are normalized");      for (kid=elem.getFirstChild(); kid != null; kid=next) {        next=kid.getNextSibling();        System.out.println(kid.getNodeName() + "[" + kid.getNodeValue()+ "]");      }    }    if (fValidationHandler != null) {      updateQName(elem,fQName);      fConfiguration.fErrorHandlerWrapper.fCurrentNode=node;      fCurrentNode=node;      fValidationHandler.endElement(fQName,null);    }    fNamespaceContext.popContext();    break;  }case Node.COMMENT_NODE:{  if (DEBUG_ND) {    System.out.println("==>normalizeNode:{comments}");  }  if ((fConfiguration.features & DOMConfigurationImpl.COMMENTS) == 0) {    Node prevSibling=node.getPreviousSibling();    Node parent=node.getParentNode();    parent.removeChild(node);    if (prevSibling != null && prevSibling.getNodeType() == Node.TEXT_NODE) {      Node nextSibling=prevSibling.getNextSibling();      if (nextSibling != null && nextSibling.getNodeType() == Node.TEXT_NODE) {        ((TextImpl)nextSibling).insertData(0,prevSibling.getNodeValue());        parent.removeChild(prevSibling);        return nextSibling;      }    }  } else {    if (fDocument.errorChecking && ((fConfiguration.features & DOMConfigurationImpl.WELLFORMED) != 0)) {      String commentdata=((Comment)node).getData();      isCommentWF(fErrorHandler,fError,fLocator,commentdata,fDocument.isXML11Version());    }    if (fValidationHandler != null) {      fValidationHandler.comment(EMPTY_STRING,null);    }  }  break;}case Node.ENTITY_REFERENCE_NODE:{if (DEBUG_ND) {  System.out.println("==>normalizeNode:{entityRef} " + node.getNodeName());}if ((fConfiguration.features & DOMConfigurationImpl.ENTITIES) == 0) {  Node prevSibling=node.getPreviousSibling();  Node parent=node.getParentNode();  ((EntityReferenceImpl)node).setReadOnly(false,true);  expandEntityRef(parent,node);  parent.removeChild(node);  Node next=(prevSibling != null) ? prevSibling.getNextSibling() : parent.getFirstChild();  if (prevSibling != null && next != null && prevSibling.getNodeType() == Node.TEXT_NODE && next.getNodeType() == Node.TEXT_NODE) {    return prevSibling;  }  return next;} else {  if (fDocument.errorChecking && ((fConfiguration.features & DOMConfigurationImpl.WELLFORMED) != 0) && fDocument.isXMLVersionChanged()) {    CoreDocumentImpl.isXMLName(node.getNodeName(),fDocument.isXML11Version());  }}break;}case Node.CDATA_SECTION_NODE:{if (DEBUG_ND) {System.out.println("==>normalizeNode:{cdata}");}if ((fConfiguration.features & DOMConfigurationImpl.CDATA) == 0) {Node prevSibling=node.getPreviousSibling();if (prevSibling != null && prevSibling.getNodeType() == Node.TEXT_NODE) {  ((Text)prevSibling).appendData(node.getNodeValue());  node.getParentNode().removeChild(node);  return prevSibling;} else {  Text text=fDocument.createTextNode(node.getNodeValue());  Node parent=node.getParentNode();  node=parent.replaceChild(text,node);  return text;}}if (fValidationHandler != null) {fConfiguration.fErrorHandlerWrapper.fCurrentNode=node;fCurrentNode=node;fValidationHandler.startCDATA(null);fValidationHandler.characterData(node.getNodeValue(),null);fValidationHandler.endCDATA(null);}String value=node.getNodeValue();if ((fConfiguration.features & DOMConfigurationImpl.SPLITCDATA) != 0) {int index;Node parent=node.getParentNode();if (fDocument.errorChecking) {  isXMLCharWF(fErrorHandler,fError,fLocator,node.getNodeValue(),fDocument.isXML11Version());}while ((index=value.indexOf("]]>")) >= 0) {  node.setNodeValue(value.substring(0,index + 2));  value=value.substring(index + 2);  Node firstSplitNode=node;  Node newChild=fDocument.createCDATASection(value);  parent.insertBefore(newChild,node.getNextSibling());  node=newChild;  fLocator.fRelatedNode=firstSplitNode;  String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"cdata-sections-splitted",null);  reportDOMError(fErrorHandler,fError,fLocator,msg,DOMError.SEVERITY_WARNING,"cdata-sections-splitted");}} else if (fDocument.errorChecking) {isCDataWF(fErrorHandler,fError,fLocator,value,fDocument.isXML11Version());}break;}case Node.TEXT_NODE:{if (DEBUG_ND) {System.out.println("==>normalizeNode(text):{" + node.getNodeValue() + "}");}Node next=node.getNextSibling();if (next != null && next.getNodeType() == Node.TEXT_NODE) {((Text)node).appendData(next.getNodeValue());node.getParentNode().removeChild(next);return node;} else if (node.getNodeValue().length() == 0) {node.getParentNode().removeChild(node);} else {short nextType=(next != null) ? next.getNodeType() : -1;if (nextType == -1 || !(((fConfiguration.features & DOMConfigurationImpl.ENTITIES) == 0 && nextType == Node.ENTITY_NODE) || ((fConfiguration.features & DOMConfigurationImpl.COMMENTS) == 0 && nextType == Node.COMMENT_NODE) || ((fConfiguration.features & DOMConfigurationImpl.CDATA) == 0) && nextType == Node.CDATA_SECTION_NODE)) {if (fDocument.errorChecking && ((fConfiguration.features & DOMConfigurationImpl.WELLFORMED) != 0)) {  isXMLCharWF(fErrorHandler,fError,fLocator,node.getNodeValue(),fDocument.isXML11Version());}if (fValidationHandler != null) {  fConfiguration.fErrorHandlerWrapper.fCurrentNode=node;  fCurrentNode=node;  fValidationHandler.characterData(node.getNodeValue(),null);  if (!fNamespaceValidation) {    if (fAllWhitespace) {      fAllWhitespace=false;      ((TextImpl)node).setIgnorableWhitespace(true);    } else {      ((TextImpl)node).setIgnorableWhitespace(false);    }  }  if (DEBUG_ND) {    System.out.println("=====>characterData()," + nextType);  }}} else {if (DEBUG_ND) {  System.out.println("=====>don't send characters()," + nextType);}}}break;}case Node.PROCESSING_INSTRUCTION_NODE:{if (fDocument.errorChecking && (fConfiguration.features & DOMConfigurationImpl.WELLFORMED) != 0) {ProcessingInstruction pinode=(ProcessingInstruction)node;String target=pinode.getTarget();if (fDocument.isXML11Version()) {wellformed=XML11Char.isXML11ValidName(target);} else {wellformed=XMLChar.isValidName(target);}if (!wellformed) {String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"wf-invalid-character-in-node-name",new Object[]{"Element",node.getNodeName()});reportDOMError(fErrorHandler,fError,fLocator,msg,DOMError.SEVERITY_ERROR,"wf-invalid-character-in-node-name");}isXMLCharWF(fErrorHandler,fError,fLocator,pinode.getData(),fDocument.isXML11Version());}if (fValidationHandler != null) {fValidationHandler.processingInstruction(((ProcessingInstruction)node).getTarget(),EMPTY_STRING,null);}}}return null;}  }
class C{  public FriendsGetOnlineQueryWithMobile(VkApiClient client,UserActor actor){  super(client,"friends.getOnline",GetOnlineMobileResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public InvalidConfigurationException(String msg){  super(msg);}  }
class C{  private void changeStatusBarColor(){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    Window window=getWindow();    window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);    window.setStatusBarColor(Color.TRANSPARENT);  }}  }
class C{  public static void checkAndNotify(Activity a,String remaining){  if (!TextUtils.isEmpty(remaining)) {    if (Integer.parseInt(remaining) < 0) {      RateLimitDialog dialog=new RateLimitDialog();      dialog.show(a.getFragmentManager(),remaining);    }  }}  }
class C{  private Transaction createTransaction() throws LeaseDeniedException, RemoteException, TransactionException {  ITransactionManagerProvider transactionManagerProvider=getTransactionManagerProvider();  return (TransactionFactory.create(transactionManagerProvider.getTransactionManager(),_config.getTransactionTimeout())).transaction;}  }
class C{  public boolean isFullyZoomedOut(){  return mViewPortHandler.isFullyZoomedOut();}  }
class C{  private void initAttrs(Context context,FieldsType type,int resId,String hint){  try {    this.mRootView=(RelativeLayout)inflate(context,R.layout.library_form_field_layout,this);    this.mIconView=(ImageView)mRootView.findViewById(R.id.slick_form_text_icon);    this.mFieldInput=(EditText)mRootView.findViewById(R.id.slick_form_text_input);    LayoutParams params=new LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT);    params.addRule(RelativeLayout.RIGHT_OF,mIconView.getId());    this.mIconView.setImageResource(resId);    this.mFieldInput.setLayoutParams(params);    this.mFieldInput.setHint(hint);    this.formFieldType=type;  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  private void handshake(SocketAddress address,ProxyClient sc,FutureEventListener<ServerInfo> listener,boolean logging,boolean getOwnerships){  if (clientConfig.getHandshakeWithClientInfo()) {    ClientInfo clientInfo=new ClientInfo();    clientInfo.setGetOwnerships(getOwnerships);    clientInfo.setStreamNameRegex(clientConfig.getStreamNameRegex());    if (logging) {      logger.info("Handshaking with {} : {}",address,clientInfo);    }    sc.getService().handshakeWithClientInfo(clientInfo).addEventListener(listener);  } else {    if (logging) {      logger.info("Handshaking with {}",address);    }    sc.getService().handshake().addEventListener(listener);  }}  }
class C{  public boolean isSpringDamper(){  return this.frequency > 0.0 && this.dampingRatio > 0.0;}  }
class C{  public static NameValuePair[] split_metadata(String meta_buff){  return split_metadata(meta_buff,FDFS_RECORD_SEPERATOR,FDFS_FIELD_SEPERATOR);}  }
class C{  public void clearSelection(){  selection.clear();  previouslySelectedItem=null;  shiftDown=false;  mouseClicks=0;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_GET_ITEM_PARTYNOTICE_DICE_GIVEUP_ROLL_OFFLINE_WINNER(String value1){  return new SM_SYSTEM_MESSAGE(1390271,value1);}  }
class C{  public static short copySign(short magnitude,short sign) throws MathRuntimeException {  if ((magnitude >= 0 && sign >= 0) || (magnitude < 0 && sign < 0)) {    return magnitude;  } else   if (sign >= 0 && magnitude == Short.MIN_VALUE) {    throw new MathRuntimeException(LocalizedCoreFormats.OVERFLOW);  } else {    return (short)-magnitude;  }}  }
class C{  public LabeledBorder(Border border){  this(border,null);}  }
class C{  public AccountGetPushSettingsQuery(VkApiClient client,UserActor actor){  super(client,"account.getPushSettings",PushSettings.class);  accessToken(actor.getAccessToken());}  }
class C{  public boolean contains(final Vector3D p){  return distance(p) < tolerance;}  }
class C{  public static boolean isContiguousZipCode(String s){  boolean retval=false;  if (isZipCode(s)) {    if (isEmpty(s))     retval=defaultEmptyOK; else {      String normalizedZip=s.substring(0,5);      int iZip=Integer.parseInt(normalizedZip);      if ((iZip >= 96701 && iZip <= 96898) || (iZip >= 99501 && iZip <= 99950))       retval=false; else       retval=true;    }  }  return retval;}  }
class C{  @Override public synchronized XSObject item(int index){  if (fArray == null) {    getLength();  }  if (index < 0 || index >= fLength) {    return null;  }  return fArray[index];}  }
class C{  public boolean isCurrentSet(){  return currentIterator != null && currentId != null;}  }
class C{  public Timestamp recalculateEstimatedCompletionDate(){  this.updateCompletionDate=false;  return recalculateEstimatedCompletionDate(Long.valueOf(0),estimatedStartDate);}  }
class C{  public RetStmt newRetStmt(Value stmtAddress){  return new JRetStmt(stmtAddress);}  }
class C{  public TextEditor trim(){  text=new StringBuilder(text.toString().trim());  return this;}  }
class C{  @Override public void onRemoveDataTag(final SourceDataTag sourceDataTag,final ChangeReport changeReport){  this.medDynamicTimeDeadbandFilterActivator.removeDataTag(sourceDataTag);  this.lowDynamicTimeDeadbandFilterActivator.removeDataTag(sourceDataTag);  changeReport.appendInfo("Data tag " + sourceDataTag.getId() + " removed from any filters.");}  }
class C{  public static <E>ForkJoinTask<E> forEach(Collection<E> list,Predicate<E> operation){  if (list.size() > 0) {    @SuppressWarnings("unchecked") E[] objects=list.toArray((E[])new Object[list.size()]);    CountedCompleter<E> completer=new ForEach<E>(null,operation,0,objects.length,objects);    return completer;  }  return null;}  }
class C{  static <T>T checkNotNull(T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  public void collectErrors(){  int line=getLine(LITERALstart);  int column=getColumn(LITERALstart);  int endLine=getLine(LITERALend);  int endColumn=getColumn(LITERALend);  compilationUnit().errors.add(new Problem(sourceFile(),getLITERAL(),line,column,endLine,endColumn,Problem.Severity.ERROR,Problem.Kind.LEXICAL));}  }
class C{  public ArrowIcon(int iconSize,int direction,boolean isEnabled){  this.size=iconSize / 2;  this.iconSize=iconSize;  this.direction=direction;  this.isEnabled=isEnabled;  iconRenderer=new BasicArrowButton(direction);}  }
class C{  private void createBlock(polyglot.ast.Block block){  if (block == null)   return;  Iterator it=block.statements().iterator();  while (it.hasNext()) {    Object next=it.next();    if (next instanceof polyglot.ast.Stmt) {      createStmt((polyglot.ast.Stmt)next);    } else {      throw new RuntimeException("Unexpected - Unhandled Node");    }  }}  }
class C{  public E sample(){  return sample(new Random());}  }
class C{  public Location subtract(Vector vec){  this.x-=vec.getX();  this.y-=vec.getY();  this.z-=vec.getZ();  return this;}  }
class C{  public TSDataOptimizerTask add(TSData tsdata){  files.add(tsdata);  return this;}  }
class C{  public int binarySearch(int value){  return binarySearch(value,0,_pos);}  }
class C{  public DatabaseGetCitiesQuery needAll(Boolean value){  return unsafeParam("need_all",value);}  }
class C{  public PhotosGetUserPhotosQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public static void updateContext(LRMIInvocationTrace invocationTrace,ProxyWriteType proxyWriteType,InvocationStage stage,PlatformLogicalVersion sourceLogicalVersion,PlatformLogicalVersion targetLogicalVersion,boolean createSnapshot,Boolean useStubCache,InetSocketAddress clientEndPointAddress){  LRMIInvocationContextHolder holder=invocationContexts.get();  LRMIInvocationContext invocationContext=holder.getContext();  LRMIInvocationContext actualContext=createSnapshot ? invocationContext.snapshot() : invocationContext;  if (invocationTrace != null || createSnapshot)   actualContext.setTrace(invocationTrace);  if (proxyWriteType != null || createSnapshot)   actualContext.setProxyWriteType(proxyWriteType);  if (stage != null || createSnapshot)   actualContext.setInvocationStage(stage);  if (sourceLogicalVersion != null || createSnapshot)   actualContext.setSourceLogicalVersion(sourceLogicalVersion);  if (targetLogicalVersion != null || createSnapshot)   actualContext.setTargetLogicalVersion(targetLogicalVersion);  if (useStubCache != null)   actualContext.setUseStubCache(useStubCache.booleanValue());  if (clientEndPointAddress != null || createSnapshot) {    actualContext.setClientEndPointAddress(clientEndPointAddress);  }  if (createSnapshot) {    if (invocationContext._livenessPriorityEnabledInNextInvocation)     actualContext.setLivenessPriorityEnabled(true);    if (invocationContext._customPriorityEnabledInNextInvocation)     actualContext.setCustomPriorityEnabled(true);    if (invocationContext._callbackMethodInNextInvocation)     actualContext.setCallbackMethod(true);  }  holder.setContext(actualContext);}  }
class C{  public int increment(int val){  if (val < 0) {    return decrement(-val);  }  lock.lock();  int remain=Integer.MAX_VALUE - value;  int dif=remain - val;  if (dif >= 0) {    value+=val;  } else {    value=(-dif) - 1;  }  int newValue=value;  lock.unlock();  return newValue;}  }
class C{  private boolean processAttributePSVI(AttrImpl attr,AttributePSVI attrPSVI){  if (fStorePSVI) {    ((PSVIAttrNSImpl)attr).setPSVI(attrPSVI);  }  Object type=attrPSVI.getMemberTypeDefinition();  if (type == null) {    type=attrPSVI.getTypeDefinition();    if (type != null) {      attr.setType(type);      return ((XSSimpleType)type).isIDType();    }  } else {    attr.setType(type);    return ((XSSimpleType)type).isIDType();  }  return false;}  }
class C{  public void changeBadgeTextAtIndex(int badgeIndex,int badgeText){  if (badgeSaveInstanceHashMap.get(badgeIndex) != null && (((BadgeItem)badgeSaveInstanceHashMap.get(badgeIndex)).getIntBadgeText() != badgeText)) {    BadgeItem currentBadgeItem=(BadgeItem)badgeSaveInstanceHashMap.get(badgeIndex);    BadgeItem badgeItemForSave=new BadgeItem(badgeIndex,badgeText,currentBadgeItem.getBadgeColor());    BadgeHelper.forceShowBadge(badgeList.get(badgeIndex),badgeItemForSave,shouldShowBadgeWithNinePlus);    badgeSaveInstanceHashMap.put(badgeIndex,badgeItemForSave);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ENCHANT_ITEM_SUCCEEDED_15(String playerName,int nameId){  return new SM_SYSTEM_MESSAGE(1400435,playerName,new DescriptionId(nameId));}  }
class C{  @Override public boolean accept(File directory,String fileName){  if (!super.accept(directory,fileName))   return false;  String[] lines=Basic.getFirstLinesFromFile(new File(fileName),2);  return lines != null && lines[0] != null && lines[1] != null && lines[0].startsWith("<?xml") && (lines[1].startsWith("<!DOCTYPE BlastOutput") || lines[1].startsWith("<BlastOutput>"));}  }
class C{  public void removeLastEmails(int limit){  List<Message> messages=getMessageList(limit);  for (  Message message : messages) {    try {      message.setFlag(Flags.Flag.DELETED,true);    } catch (    MessagingException e) {      LOGGER.error("error when removing  emails from server",e);    }  }}  }
class C{  @Override public boolean isKeyDown(){  boolean bReturn=this.isOverridingPresses ? this.isDown : super.isKeyDown();  return bReturn;}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  public boolean paint(@NotNull Graphics2D gc,ConstraintWidget component,int width,int height,boolean showAllConstraints){  Graphics2D g=(Graphics2D)gc.create();  WidgetDecorator.setShowFakeUI(mShowFakeUI);  if (mySceneDraw.getCurrentStyle() == WidgetDecorator.BLUEPRINT_STYLE) {    mySceneDraw.drawBackground(myConstraintModel.getScene().getWidget(component),myViewTransform,g,width,height);  }  if (myConstraintModel.getNeedsAnimateConstraints() != -1) {    mySceneDraw.animateConstraints(myConstraintModel.getNeedsAnimateConstraints());    myConstraintModel.setNeedsAnimateConstraints(-1);  }  boolean ret=mySceneDraw.paintWidgets(component,width,height,myViewTransform,g,showAllConstraints,myMouseInteraction);  g.dispose();  return ret;}  }
class C{  @Override public String printToScreen(){  int yMaxLines=(this.getyMaxLines() < 0) ? Integer.MAX_VALUE : this.getyMaxLines();  ;  List<Double> keep=new ArrayList<Double>();  if (this.readStack.size() == 0) {    return "";  } else   if (this.readStack.size() > yMaxLines) {    keep=Utils.seqFromToLenOut(0,this.readStack.size() - 1,yMaxLines);  } else {    keep=Utils.seqFromToLenOut(0,this.readStack.size() - 1,this.readStack.size());  }  String printable="";  for (  Double idx : keep) {    List<TextRead> line=this.readStack.get((int)Math.rint(idx));    try {      printable+=linePrinter(line,this.bisulf,this.isNoFormat(),withReadName) + "\n";    } catch (    IOException e) {      e.printStackTrace();    }  }  return printable.replaceAll("\n$","");}  }
class C{  public static boolean shuffle(Object[] objArray){  if (objArray == null) {    return false;  }  return shuffle(objArray,getRandom(objArray.length));}  }
class C{  private void internal_populateIntegerField(Map<String,String> options,FieldIdEnum fieldId,String key){  if ((options != null) && options.containsKey(key)) {    String storedValue=options.get(key);    Integer value=Integer.valueOf(storedValue);    fieldConfigVisitor.populateIntegerField(fieldId,value);  } else {    setDefaultValue(fieldId);  }}  }
class C{  public static boolean hasStatusBar(Activity activity){  LayoutParams params=activity.getWindow().getAttributes();  return (params.flags & LayoutParams.FLAG_FULLSCREEN) != LayoutParams.FLAG_FULLSCREEN;}  }
class C{  @Override public void renderAxisLabels(Canvas c){  if (!mYAxis.isEnabled() || !mYAxis.isDrawLabelsEnabled())   return;  float[] positions=getTransformedPositions();  mAxisLabelPaint.setTypeface(mYAxis.getTypeface());  mAxisLabelPaint.setTextSize(mYAxis.getTextSize());  mAxisLabelPaint.setColor(mYAxis.getTextColor());  mAxisLabelPaint.setTextAlign(Align.CENTER);  float baseYOffset=Utils.dp2px(2.5f);  float textHeight=Utils.calcTextHeight(mAxisLabelPaint,"Q");  AxisDependency dependency=mYAxis.getAxisDependency();  YAxisLabelPosition labelPosition=mYAxis.getLabelPosition();  float yPos=0f;  if (dependency == AxisDependency.LEFT) {    if (labelPosition == YAxisLabelPosition.OUTSIDE_CHART) {      yPos=mViewPortHandler.contentTop() - baseYOffset;    } else {      yPos=mViewPortHandler.contentTop() - baseYOffset;    }  } else {    if (labelPosition == YAxisLabelPosition.OUTSIDE_CHART) {      yPos=mViewPortHandler.contentBottom() + textHeight + baseYOffset;    } else {      yPos=mViewPortHandler.contentBottom() + textHeight + baseYOffset;    }  }  drawYLabels(c,yPos,positions,mYAxis.getYOffset());}  }
class C{  private void addDataSource(EsriDataSourceInterface dataSourceObj){  logger.info("\t" + dataSourceObj.getName());  dataSourceMap.put(dataSourceObj.getType(),dataSourceObj);}  }
class C{  private List<Float> createDashArray(String dashString){  String[] dashes=dashString.split(" ");  List<Float> floatDashArray=new ArrayList<Float>();  for (  String dashValue : dashes) {    try {      floatDashArray.add(Float.parseFloat(dashValue));    } catch (    NumberFormatException e) {      return null;    }  }  return floatDashArray;}  }
class C{  public static final void show(Window owner){  PreferencesDialog dialog=new PreferencesDialog(owner);  dialog.setLocationRelativeTo(owner);  dialog.setVisible(true);  if (!dialog.canceled) {    dialog.pnlPreferences.setPreferences();  }}  }
class C{  public int readLabel() throws IOException {  if (labels == null) {    throw new IllegalStateException("labels file not initialized.");  }  return labels.readLabel();}  }
class C{  public void removeSubFilterWithTag(String tag){  Iterator<SubFilter> iterator=subFilters.iterator();  while (iterator.hasNext()) {    SubFilter subFilter=iterator.next();    if (subFilter.getTag().equals(tag)) {      iterator.remove();    }  }}  }
class C{  public static Double toDoubleObject(Object obj){  if (obj == null) {    return null;  }  if (obj instanceof Double) {    return (Double)obj;  }  if (obj instanceof Number) {    return new Double(((Number)obj).doubleValue());  }  Double result=null;  try {    result=Double.parseDouble(obj.toString());  } catch (  Exception e) {  }  return result;}  }
class C{  public static String makeWebServiceCall(String urladdress,int requestmethod,HashMap<String,String> params,boolean addNewLines){  Logger.dev("WebRequest: Service call " + urladdress);  URL url;  String response="";  try {    url=new URL(urladdress);    HttpURLConnection conn=(HttpURLConnection)url.openConnection();    conn.setReadTimeout(15000);    conn.setConnectTimeout(15000);    conn.setDoInput(true);    if (requestmethod == POST) {      conn.setRequestMethod("POST");    } else     if (requestmethod == GET) {      conn.setRequestMethod("GET");    }    if (params != null) {      OutputStream os=conn.getOutputStream();      BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(os,"UTF-8"));      StringBuilder result=new StringBuilder();      boolean first=true;      for (      Map.Entry<String,String> entry : params.entrySet()) {        if (first)         first=false; else         result.append("&");        result.append(URLEncoder.encode(entry.getKey(),"UTF-8"));        result.append("=");        result.append(URLEncoder.encode(entry.getValue(),"UTF-8"));      }      writer.write(result.toString());      writer.flush();      writer.close();      os.close();    }    int responseCode=conn.getResponseCode();    if (responseCode == HttpsURLConnection.HTTP_OK) {      String line;      BufferedReader br=new BufferedReader(new InputStreamReader(conn.getInputStream()));      while ((line=br.readLine()) != null) {        if (addNewLines) {          response+=line + "\n";        } else {          response+=line;        }      }    } else {      response="";    }  } catch (  Exception e) {    e.printStackTrace();  }  return response;}  }
class C{  public float dot(Vector2f vec){  if (null == vec) {    logger.warning("Provided vector is null, 0 returned.");    return 0;  }  return x * vec.x + y * vec.y;}  }
class C{  public <R>R executeTransactionalCommand(final TransactionalCommand<R> command) throws MithraBusinessException {  return this.executeTransactionalCommand(command,this.defaultTransactionStyle);}  }
class C{  static protected String fixPartOfSpeech(String partOfSpeech){  return (partOfSpeech == null) ? "0" : partOfSpeech;}  }
class C{  private String doPrefix(String uri,String qName,boolean isElement){  String defaultNS=nsSupport.getURI("");  if ("".equals(uri)) {    if (isElement && defaultNS != null)     nsSupport.declarePrefix("","");    return null;  }  String prefix;  if (isElement && defaultNS != null && uri.equals(defaultNS)) {    prefix="";  } else {    prefix=nsSupport.getPrefix(uri);  }  if (prefix != null) {    return prefix;  }  prefix=doneDeclTable.get(uri);  if (prefix != null && ((!isElement || defaultNS != null) && "".equals(prefix) || nsSupport.getURI(prefix) != null)) {    prefix=null;  }  if (prefix == null) {    prefix=prefixTable.get(uri);    if (prefix != null && ((!isElement || defaultNS != null) && "".equals(prefix) || nsSupport.getURI(prefix) != null)) {      prefix=null;    }  }  if (prefix == null && qName != null && !"".equals(qName)) {    int i=qName.indexOf(':');    if (i == -1) {      if (isElement && defaultNS == null) {        prefix="";      }    } else {      prefix=qName.substring(0,i);    }  }  for (; prefix == null || nsSupport.getURI(prefix) != null; prefix="__NS" + ++prefixCounter)   ;  nsSupport.declarePrefix(prefix,uri);  doneDeclTable.put(uri,prefix);  return prefix;}  }
class C{  private void resetSelectionStates(){  mSelectionType=SelectionType.UNDETERMINED;  mSelectedText=null;  mWasTapGestureDetected=false;}  }
class C{  public String[] tokenize(String s){  return tokenize(s,false);}  }
class C{  public void enrollTrackedEntityInstance(TrackedEntityInstance entityInstance,Program program){  Assert.notNull(entityInstance);  Assert.notNull(program);  setEntityInstance(entityInstance);  entityInstance.getProgramInstances().add(this);  setProgram(program);}  }
class C{  public VideoEditQuery repeat(Boolean value){  return unsafeParam("repeat",value);}  }
class C{  public boolean isSuppressedDiag(Diag diag,Element elem){  return diagSuppressor.isSuppressedWarning(diag,elem);}  }
class C{  @Override public int available(){  try {    int bytes=ais.available();    return bytes / bytesPerSample;  } catch (  IOException e) {    return 0;  }}  }
class C{  public void load() throws IOException {  if (myFilename == null) {    throw new IOException("No filename specified for PreferenceStore.");  }  FileInputStream in=new FileInputStream(myFilename);  try {    myProperties.load(in);    myChanged=false;  }  finally {    in.close();  }}  }
class C{  public boolean isLaunchedFromJar(){  return (lstJarFile.size() > 0);}  }
class C{  public static GreaterEqualsSpacePredicate greaterEqual(Comparable<?> value){  return new GreaterEqualsSpacePredicate(value);}  }
class C{  private Intrinsic(){}  }
class C{  protected void increaseBufferSize(int minSize){  int newLength=buf.length;  while (newLength < minSize)   newLength*=2;  double[] newBuf=new double[newLength];  int avail=currentlyInBuffer();  System.arraycopy(buf,readPos,newBuf,0,avail);  buf=newBuf;  readPos=0;  writePos=avail;}  }
class C{  public void append(int key,int value){  if (mSize != 0 && key <= mKeys[mSize - 1]) {    put(key,value);    return;  }  mKeys=appendElementIntoIntArray(mKeys,mSize,key);  mValues=appendElementIntoIntArray(mValues,mSize,value);  mSize++;}  }
class C{  private Flux<Store> page(int page){  Map<String,Object> map=this.restTemplate.exchange(url + "/stores?page={page}",HttpMethod.GET,null,new ParameterizedTypeReference<Map<String,Object>>(){  },page).getBody();  @SuppressWarnings("unchecked") List<Map<String,Object>> list=(List<Map<String,Object>>)((Map<String,Object>)map.get("_embedded")).get("stores");  List<Store> stores=new ArrayList<>();  for (  Map<String,Object> store : list) {    stores.add(new Store((String)store.get("id"),(String)store.get("name")));  }  log.info("Fetched " + stores.size() + " stores for page: "+ page);  return Flux.fromIterable(stores);}  }
class C{  protected AdsUpdateTargetGroupQuery targetGroupId(int value){  return unsafeParam("target_group_id",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelNPCDeBuffPhysical_A_TO_B(String skillcaster,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201264,skillcaster,skilltarget,skillname);}  }
class C{  public static boolean reloadRemoteSdkWithModalProgress(){  final AndroidSdkHandler sdkHandler=AndroidSdkUtils.tryToChooseSdkHandler();  StudioProgressRunner runner=new StudioProgressRunner(true,false,false,"Refreshing SDK",false,null);  StudioLoggerProgressIndicator progress=new StudioLoggerProgressIndicator(StudioSdkUtil.class);  RepoManager sdkManager=sdkHandler.getSdkManager(progress);  return sdkManager.load(RepoManager.DEFAULT_EXPIRATION_PERIOD_MS,null,null,null,runner,new StudioDownloader(null),StudioSettingsController.getInstance(),true);}  }
class C{  public void showErrorDialog(final int errorCode,final Activity activity,final int requestCode,final OnCancelListener onCancelListener){  final Dialog dialog=GoogleApiAvailability.getInstance().getErrorDialog(activity,errorCode,requestCode,onCancelListener);  if (dialog != null) {    dialog.show();  }}  }
class C{  @Override public void populateField(String value){  if (externalGraphicPanel != null) {    externalGraphicPanel.setValue(value);  }}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute(getSyntax());}  }
class C{  public void drawChart(Graphics2D gc){  SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);  int numberOfPanels=getChartData().getNumberOfSeries();  int y0=getHeight() - bottomMargin;  int y1=topMargin;  int rows=Math.max(1,(int)Math.sqrt(numberOfPanels));  int cols=Math.max(1,(int)Math.ceil((double)numberOfPanels / rows));  panelSize.setSize(getWidth() / cols,(y0 - y1) / rows - 14);  Font labelFont=getFont("Default");  boolean isPDFGraphics=(gc instanceof PDFGraphics);  AffineTransform transform=gc.getTransform();  int panel=0;  for (  String series : getChartData().getSeriesNames()) {    int h=(panel % cols) * panelSize.width;    int v;    if (!isPDFGraphics) {      v=(panel / cols) * (panelSize.height + 14) + y1;    } else {      v=(rows - (panel / cols)) * (panelSize.height + 14) - y0;    }    final IMultiChartDrawable chartDrawer=label2drawer.get(series);    if (chartDrawer == null)     continue;    chartDrawer.setMargins(0,0,0,0);    chartDrawer.setTranspose(true);    chartDrawer.setScalingType(getScalingType());    chartDrawer.setShowValues(isShowValues());    chartDrawer.getChartData().setDataSetName(getChartData().getDataSetName());    chartDrawer.getChartData().setSeriesLabel(series);    chartDrawer.getChartData().getChartSelection().clearSelectionClasses();    chartDrawer.getChartData().getChartSelection().setSelectedClass(getChartData().getChartSelection().getSelectedClasses(),true);    chartDrawer.getChartData().getChartSelection().clearSelectionSeries();    chartDrawer.getChartData().getChartSelection().setSelectedSeries(getChartData().getChartSelection().getSelectedSeries(),true);    chartDrawer.getChartData().getChartSelection().setSelectedBasedOnSeries(getChartData().getChartSelection().isSelectedBasedOnSeries());    chartDrawer.setValues(baseDrawer);    chartDrawer.setWidth(panelSize.width);    chartDrawer.setHeight(panelSize.height);    chartDrawer.updateView();    AffineTransform newTransform=(AffineTransform)transform.clone();    newTransform.translate(h,v);    gc.setTransform(newTransform);    Rectangle saveClip=gc.getClipBounds();    Rectangle newClip=new Rectangle(0,0,panelSize.width,panelSize.height + 14);    if (saveClip != null) {      newClip=newClip.intersection(saveClip);      gc.setClip(newClip);    }    if (sgc != null) {      sgc.setCurrentItem(new String[]{series,null});      gc.fillRect(0,0,panelSize.width,panelSize.height + 14);      sgc.clearCurrentItem();    }    chartDrawer.drawChart(gc);    if (numberOfPanels > 1) {      gc.setColor(Color.DARK_GRAY);      gc.setFont(labelFont);      String label=seriesLabelGetter.getLabel(series);      Dimension labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();      while (labelSize.width + 2 > panelSize.width && label.length() >= 5) {        label=label.substring(0,label.length() - 4) + "...";        labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();      }      if (sgc != null)       sgc.setCurrentItem(new String[]{series,null});      gc.drawString(label,(panelSize.width - labelSize.width) / 2,panelSize.height + 12);      if (sgc != null)       sgc.clearCurrentItem();    }    if (saveClip != null)     gc.setClip(saveClip);    if (numberOfPanels > 1) {      gc.setColor(Color.LIGHT_GRAY);      gc.drawRect(0,0,panelSize.width,panelSize.height + 14);    }    if (getChartData().getChartSelection().isSelected(series,null)) {      gc.setStroke(HEAVY_STROKE);      gc.setColor(ProgramProperties.SELECTION_COLOR);      gc.drawRect(0,0,panelSize.width,panelSize.height + 14);      gc.setStroke(NORMAL_STROKE);    }    panel++;  }  gc.setTransform(transform);  if (sgc == null && lastDown != null) {    gc.setColor(Color.green);    gc.draw(lastDown);  }}  }
class C{  public PhotosGetAllCommentsQuery(VkApiClient client,UserActor actor){  super(client,"photos.getAllComments",GetAllCommentsResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_REMAIN_TIME_60(String durationtime0){  return new SM_SYSTEM_MESSAGE(1400221,durationtime0);}  }
class C{  public static int multiplyColorAlpha(int color,int alpha){  if (alpha == 255) {    return color;  }  if (alpha == 0) {    return color & 0x00FFFFFF;  }  alpha=alpha + (alpha >> 7);  int colorAlpha=color >>> 24;  int multipliedAlpha=colorAlpha * alpha >> 8;  return (multipliedAlpha << 24) | (color & 0x00FFFFFF);}  }
class C{  protected final void mergeNodes(PurityNode src,PurityNode dst){  Iterator it=(new LinkedList(edges.get(src))).iterator();  while (it.hasNext()) {    PurityEdge e=(PurityEdge)it.next();    PurityNode n=e.getTarget();    if (n.equals(src))     n=dst;    PurityEdge ee=cacheEdge(new PurityEdge(dst,e.getField(),n,e.isInside()));    edges.remove(src,e);    edges.put(dst,ee);    backEdges.remove(n,e);    backEdges.put(n,ee);  }  it=(new LinkedList(backEdges.get(src))).iterator();  while (it.hasNext()) {    PurityEdge e=(PurityEdge)it.next();    PurityNode n=e.getSource();    if (n.equals(src))     n=dst;    PurityEdge ee=cacheEdge(new PurityEdge(n,e.getField(),dst,e.isInside()));    edges.remove(n,e);    edges.put(n,ee);    backEdges.remove(src,e);    backEdges.put(dst,ee);  }  it=(new LinkedList(backLocals.get(src))).iterator();  while (it.hasNext()) {    Local l=(Local)it.next();    locals.remove(l,src);    backLocals.remove(src,l);    locals.put(l,dst);    backLocals.put(dst,l);  }{    Set m=mutated.get(src);    mutated.remove(src);    mutated.putAll(dst,m);  }  if (ret.contains(src)) {    ret.remove(src);    ret.add(dst);  }  if (globEscape.contains(src)) {    globEscape.remove(src);    globEscape.add(dst);  }  nodes.remove(src);  nodes.add(dst);  paramNodes.remove(src);  if (dst.isParam())   paramNodes.add(dst);}  }
class C{  public static String export(){  RequestLog current=RLOG.get();  record(new Durations(current.aggregateDurations()));  record(new Threads(current.threadIds));  try {    return current.mapper.writeValueAsString(current.info);  } catch (  JsonProcessingException jpe) {    String msg=String.format("Exporting mega log line with id: '%s' to JSON failed.",current.logId);    LOG.warn(msg,jpe);    return msg;  }}  }
class C{  int assign(String webappId){  int activityIndex=checkIfAssigned(webappId);  if (activityIndex == INVALID_ACTIVITY_INDEX) {    activityIndex=mActivityList.get(0).mActivityIndex;    ActivityEntry newEntry=new ActivityEntry(activityIndex,webappId);    mActivityList.set(0,newEntry);  }  markActivityUsed(activityIndex,webappId);  return activityIndex;}  }
class C{  int generateBridgeSecret(){  SecureRandom randGen=new SecureRandom();  expectedBridgeSecret=randGen.nextInt(Integer.MAX_VALUE);  return expectedBridgeSecret;}  }
class C{  private boolean isUploadSizeAndFrequencyAllowed(long currentUploadSize){  if (currentUploadSize > LOG_SIZE_LIMIT_BYTES)   return false;  if (mSharedPreferences.getInt(PREF_LAST_UPLOAD_DAY,0) == getCurrentDay() && mSharedPreferences.getInt(PREF_DAY_UPLOAD_COUNT,0) >= LOG_UPLOAD_LIMIT_PER_DAY) {    return false;  }  if (mSharedPreferences.getInt(PREF_LAST_UPLOAD_WEEK,0) == getFirstDayOfCurrentWeek() && mSharedPreferences.getLong(PREF_WEEK_UPLOAD_SIZE,0) + currentUploadSize >= LOG_WEEKLY_SIZE_LIMIT_BYTES) {    return false;  }  return true;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  void offerToPool(long timeout,TimeUnit unit){  EliminationStack<ResourceKey<K>> stack=resourceKey.getStack();  stack.push(resourceKey);  if (resourceKey.getStatus() == Status.DEAD) {    resourceKey.removeFromTransferStack();  }}  }
class C{  public BoardGetCommentsQueryWithExtended needLikes(Boolean value){  return unsafeParam("need_likes",value);}  }
class C{  public Bitmap generatePatternBitmap(int w,int h){  if (w <= 0 || h <= 0)   return null;  Bitmap bitmap=Util.allocateBitmap(w,h);  if (bitmap == null)   return null;  Canvas canvas=new Canvas(bitmap);  int numRectanglesHorizontal=(int)Math.ceil((w / mRectangleSize));  int numRectanglesVertical=(int)Math.ceil(h / mRectangleSize);  Rect r=new Rect();  boolean verticalStartWhite=true;  for (int i=0; i <= numRectanglesVertical; i++) {    boolean isWhite=verticalStartWhite;    for (int j=0; j <= numRectanglesHorizontal; j++) {      r.top=i * mRectangleSize;      r.left=j * mRectangleSize;      r.bottom=r.top + mRectangleSize;      r.right=r.left + mRectangleSize;      canvas.drawRect(r,isWhite ? mPaintWhite : mPaintGray);      isWhite=!isWhite;    }    verticalStartWhite=!verticalStartWhite;  }  return bitmap;}  }
class C{  public DOMParser(SymbolTable symbolTable){  this(symbolTable,null);}  }
class C{  public static List<JSONObject> initialize(FileSystem fs) throws Exception {  List<JSONObject> dataElements=Inputs.createJSONInput(fs);  String localStopListFile=Inputs.createStopList(fs,true);  SystemConfiguration.setProperty("pir.stopListFile",localStopListFile);  Inputs.createSchemaFiles(fs,true,StopListFilter.class.getName());  return dataElements;}  }
class C{  public IllinoisSolver(final double relativeAccuracy,final double absoluteAccuracy,final double functionValueAccuracy){  super(relativeAccuracy,absoluteAccuracy,functionValueAccuracy,Method.PEGASUS);}  }
class C{  @Override public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {  int entryType=-1;  Vector entryArgs=new Vector();  namespaceStack.push(namespaceURI);  boolean inExtension=inExtensionNamespace();  if (namespaceURI != null && namespaceName.equals(namespaceURI) && !inExtension) {    if (atts.getValue("xml:base") != null) {      String baseURI=atts.getValue("xml:base");      entryType=Catalog.BASE;      entryArgs.add(baseURI);      baseURIStack.push(baseURI);      debug.message(4,"xml:base",baseURI);      try {        CatalogEntry ce=new CatalogEntry(entryType,entryArgs);        catalog.addEntry(ce);      } catch (      CatalogException cex) {        if (cex.getExceptionType() == CatalogException.INVALID_ENTRY_TYPE) {          debug.message(1,"Invalid catalog entry type",localName);        } else         if (cex.getExceptionType() == CatalogException.INVALID_ENTRY) {          debug.message(1,"Invalid catalog entry (base)",localName);        }      }      entryType=-1;      entryArgs=new Vector();    } else {      baseURIStack.push(baseURIStack.peek());    }    if ((localName.equals("catalog") || localName.equals("group")) && atts.getValue("prefer") != null) {      String override=atts.getValue("prefer");      if (override.equals("public")) {        override="yes";      } else       if (override.equals("system")) {        override="no";      } else {        debug.message(1,"Invalid prefer: must be 'system' or 'public'",localName);        override=catalog.getDefaultOverride();      }      entryType=Catalog.OVERRIDE;      entryArgs.add(override);      overrideStack.push(override);      debug.message(4,"override",override);      try {        CatalogEntry ce=new CatalogEntry(entryType,entryArgs);        catalog.addEntry(ce);      } catch (      CatalogException cex) {        if (cex.getExceptionType() == CatalogException.INVALID_ENTRY_TYPE) {          debug.message(1,"Invalid catalog entry type",localName);        } else         if (cex.getExceptionType() == CatalogException.INVALID_ENTRY) {          debug.message(1,"Invalid catalog entry (override)",localName);        }      }      entryType=-1;      entryArgs=new Vector();    } else {      overrideStack.push(overrideStack.peek());    }    if (localName.equals("delegatePublic")) {      if (checkAttributes(atts,"publicIdStartString","catalog")) {        entryType=Catalog.DELEGATE_PUBLIC;        entryArgs.add(atts.getValue("publicIdStartString"));        entryArgs.add(atts.getValue("catalog"));        debug.message(4,"delegatePublic",PublicId.normalize(atts.getValue("publicIdStartString")),atts.getValue("catalog"));      }    } else     if (localName.equals("delegateSystem")) {      if (checkAttributes(atts,"systemIdStartString","catalog")) {        entryType=Catalog.DELEGATE_SYSTEM;        entryArgs.add(atts.getValue("systemIdStartString"));        entryArgs.add(atts.getValue("catalog"));        debug.message(4,"delegateSystem",atts.getValue("systemIdStartString"),atts.getValue("catalog"));      }    } else     if (localName.equals("delegateURI")) {      if (checkAttributes(atts,"uriStartString","catalog")) {        entryType=Catalog.DELEGATE_URI;        entryArgs.add(atts.getValue("uriStartString"));        entryArgs.add(atts.getValue("catalog"));        debug.message(4,"delegateURI",atts.getValue("uriStartString"),atts.getValue("catalog"));      }    } else     if (localName.equals("rewriteSystem")) {      if (checkAttributes(atts,"systemIdStartString","rewritePrefix")) {        entryType=Catalog.REWRITE_SYSTEM;        entryArgs.add(atts.getValue("systemIdStartString"));        entryArgs.add(atts.getValue("rewritePrefix"));        debug.message(4,"rewriteSystem",atts.getValue("systemIdStartString"),atts.getValue("rewritePrefix"));      }    } else     if (localName.equals("systemSuffix")) {      if (checkAttributes(atts,"systemIdSuffix","uri")) {        entryType=Catalog.SYSTEM_SUFFIX;        entryArgs.add(atts.getValue("systemIdSuffix"));        entryArgs.add(atts.getValue("uri"));        debug.message(4,"systemSuffix",atts.getValue("systemIdSuffix"),atts.getValue("uri"));      }    } else     if (localName.equals("rewriteURI")) {      if (checkAttributes(atts,"uriStartString","rewritePrefix")) {        entryType=Catalog.REWRITE_URI;        entryArgs.add(atts.getValue("uriStartString"));        entryArgs.add(atts.getValue("rewritePrefix"));        debug.message(4,"rewriteURI",atts.getValue("uriStartString"),atts.getValue("rewritePrefix"));      }    } else     if (localName.equals("uriSuffix")) {      if (checkAttributes(atts,"uriSuffix","uri")) {        entryType=Catalog.URI_SUFFIX;        entryArgs.add(atts.getValue("uriSuffix"));        entryArgs.add(atts.getValue("uri"));        debug.message(4,"uriSuffix",atts.getValue("uriSuffix"),atts.getValue("uri"));      }    } else     if (localName.equals("nextCatalog")) {      if (checkAttributes(atts,"catalog")) {        entryType=Catalog.CATALOG;        entryArgs.add(atts.getValue("catalog"));        debug.message(4,"nextCatalog",atts.getValue("catalog"));      }    } else     if (localName.equals("public")) {      if (checkAttributes(atts,"publicId","uri")) {        entryType=Catalog.PUBLIC;        entryArgs.add(atts.getValue("publicId"));        entryArgs.add(atts.getValue("uri"));        debug.message(4,"public",PublicId.normalize(atts.getValue("publicId")),atts.getValue("uri"));      }    } else     if (localName.equals("system")) {      if (checkAttributes(atts,"systemId","uri")) {        entryType=Catalog.SYSTEM;        entryArgs.add(atts.getValue("systemId"));        entryArgs.add(atts.getValue("uri"));        debug.message(4,"system",atts.getValue("systemId"),atts.getValue("uri"));      }    } else     if (localName.equals("uri")) {      if (checkAttributes(atts,"name","uri")) {        entryType=Catalog.URI;        entryArgs.add(atts.getValue("name"));        entryArgs.add(atts.getValue("uri"));        debug.message(4,"uri",atts.getValue("name"),atts.getValue("uri"));      }    } else     if (localName.equals("catalog")) {    } else     if (localName.equals("group")) {    } else {      debug.message(1,"Invalid catalog entry type",localName);    }    if (entryType >= 0) {      try {        CatalogEntry ce=new CatalogEntry(entryType,entryArgs);        catalog.addEntry(ce);      } catch (      CatalogException cex) {        if (cex.getExceptionType() == CatalogException.INVALID_ENTRY_TYPE) {          debug.message(1,"Invalid catalog entry type",localName);        } else         if (cex.getExceptionType() == CatalogException.INVALID_ENTRY) {          debug.message(1,"Invalid catalog entry",localName);        }      }    }  }  if (namespaceURI != null && tr9401NamespaceName.equals(namespaceURI) && !inExtension) {    if (atts.getValue("xml:base") != null) {      String baseURI=atts.getValue("xml:base");      entryType=Catalog.BASE;      entryArgs.add(baseURI);      baseURIStack.push(baseURI);      debug.message(4,"xml:base",baseURI);      try {        CatalogEntry ce=new CatalogEntry(entryType,entryArgs);        catalog.addEntry(ce);      } catch (      CatalogException cex) {        if (cex.getExceptionType() == CatalogException.INVALID_ENTRY_TYPE) {          debug.message(1,"Invalid catalog entry type",localName);        } else         if (cex.getExceptionType() == CatalogException.INVALID_ENTRY) {          debug.message(1,"Invalid catalog entry (base)",localName);        }      }      entryType=-1;      entryArgs=new Vector();    } else {      baseURIStack.push(baseURIStack.peek());    }    if (localName.equals("doctype")) {      entryType=Catalog.DOCTYPE;      entryArgs.add(atts.getValue("name"));      entryArgs.add(atts.getValue("uri"));    } else     if (localName.equals("document")) {      entryType=Catalog.DOCUMENT;      entryArgs.add(atts.getValue("uri"));    } else     if (localName.equals("dtddecl")) {      entryType=Catalog.DTDDECL;      entryArgs.add(atts.getValue("publicId"));      entryArgs.add(atts.getValue("uri"));    } else     if (localName.equals("entity")) {      entryType=Catalog.ENTITY;      entryArgs.add(atts.getValue("name"));      entryArgs.add(atts.getValue("uri"));    } else     if (localName.equals("linktype")) {      entryType=Catalog.LINKTYPE;      entryArgs.add(atts.getValue("name"));      entryArgs.add(atts.getValue("uri"));    } else     if (localName.equals("notation")) {      entryType=Catalog.NOTATION;      entryArgs.add(atts.getValue("name"));      entryArgs.add(atts.getValue("uri"));    } else     if (localName.equals("sgmldecl")) {      entryType=Catalog.SGMLDECL;      entryArgs.add(atts.getValue("uri"));    } else {      debug.message(1,"Invalid catalog entry type",localName);    }    if (entryType >= 0) {      try {        CatalogEntry ce=new CatalogEntry(entryType,entryArgs);        catalog.addEntry(ce);      } catch (      CatalogException cex) {        if (cex.getExceptionType() == CatalogException.INVALID_ENTRY_TYPE) {          debug.message(1,"Invalid catalog entry type",localName);        } else         if (cex.getExceptionType() == CatalogException.INVALID_ENTRY) {          debug.message(1,"Invalid catalog entry",localName);        }      }    }  }}  }
class C{  public NumberRangeModel(Number lo,Number hi,Number min,Number max){  m_type=TypeLib.getPrimitiveType(min.getClass());  setValueRange(lo,hi,min,max);}  }
class C{  protected void afterMove(){  getContentManager().registerLanguage(new SLCodec(),FIPANames.ContentLanguage.FIPA_SL0);  getContentManager().registerOntology(MobilityOntology.getInstance());}  }
class C{  private void swap(byte[] bytes,int len){  int top=len / 2;  int j=len - 1;  for (int i=0; i < top; i++, j--) {    byte b=bytes[i];    bytes[i]=bytes[j];    bytes[j]=b;  }}  }
class C{  public static void showProfile(Activity activity,@Nullable HashMap<String,String> extras){  showProfile(activity,AirMap.getUserId(),extras);}  }
class C{  public static boolean deletefile(String delpath){  File file=new File(delpath);  if (!file.isDirectory()) {    file.delete();  } else   if (file.isDirectory()) {    String[] filelist=file.list();    for (int i=0; i < filelist.length; i++) {      File delfile=new File(delpath + filelist[i]);      if (!delfile.isDirectory()) {        delfile.delete();      } else       if (delfile.isDirectory()) {        deletefile(delpath + filelist[i]);      }    }    file.delete();  }  return true;}  }
class C{  @Override public String toString(){  return ToStringBuilder.reflectionToString(this,ToStringStyle.SHORT_PREFIX_STYLE);}  }
class C{  public static Zmat o(int n){  return o(n,n);}  }
class C{  public static Completable completable(GoogleApiClientCompletable completable){  return Completable.create(completable);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Curse_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200462,skilltarget,skillname);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_InvulnerableWing_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1201217,skillname);}  }
class C{  private void subscribeToAlarmTopic() throws JMSException {  alarmSession=connection.createSession(false,Session.AUTO_ACKNOWLEDGE);  alarmConsumer=alarmSession.createConsumer(alarmTopic);  alarmConsumer.setMessageListener(alarmListenerWrapper);  LOGGER.debug("Successfully subscribed to alarm topic");}  }
class C{  public boolean isBoolean(String key){  Object val=get(key);  return val instanceof Boolean;}  }
class C{  protected Object newInitialFlow(){  return emptySet.emptySet();}  }
class C{  private boolean matches(ProjectViewTokenType kind){  if (currentToken() == kind) {    builder.advanceLexer();    return true;  }  return false;}  }
class C{  static boolean _loadUnzipSo(String libName,int version,IWXUserTrackAdapter utAdapter){  boolean initSuc=false;  try {    if (isExist(libName,version)) {      System.load(_targetSoFile(libName,version));      commit(utAdapter,"2000","Load file extract from apk successfully.");    }    initSuc=true;  } catch (  Throwable e) {    commit(utAdapter,WXErrorCode.WX_ERR_COPY_FROM_APK.getErrorCode(),WXErrorCode.WX_ERR_COPY_FROM_APK.getErrorMsg() + ":" + e.getMessage());    initSuc=false;    WXLogUtils.e("",e);  }  return initSuc;}  }
class C{  public void addAidlDirectory(@NotNull String path){  File directory=myFileStructure.createProjectDir(path);  myAidlDirectories.add(directory);}  }
class C{  public double normF(){  double f=0;  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      f=Maths.hypot(f,A[i][j]);    }  }  return f;}  }
class C{  protected Object prepareInput(IProgressMonitor monitor){  initLabels();  DiffNode diffRoot=new DiffNode(Differencer.NO_CHANGE);  String localCharset=Utilities.getCharset(resource);  for (int i=0; i < logEntries.length; i++) {    ITypedElement left=new TypedBufferedContent(resource);    ResourceRevisionNode right=new ResourceRevisionNode(logEntries[i]);    try {      right.setCharset(localCharset);    } catch (    CoreException e) {    }    diffRoot.add(new VersionCompareDiffNode(left,right));  }  return diffRoot;}  }
class C{  public PhotosGetCommentsQueryWithExtended ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public static void saveBaseUrls(SusiBaseUrls susiBaseUrls){  putString(SUSI_BASE_URLS,gson.toJson(susiBaseUrls));}  }
class C{  public DefaultingVolatileIntervalsService(DefaultingDictionary<PhysicalTable,VolatileIntervalsFunction> intervalsFunctions){  this(intervalsFunctions.getDefaultValue(),intervalsFunctions);}  }
class C{  private void createPageSequence(){  mPages=new ArrayList<Callable<FirstRunPage>>();  if (mShowWelcomePage)   mPages.add(pageOf(ToSAndUMAFirstRunFragment.class));  if (FieldTrialList.findFullName("DataReductionProxyFREPromo").startsWith("Enabled")) {    mPages.add(pageOf(DataReductionProxyFirstRunFragment.class));  }  if (mFreProperties.getBoolean(SHOW_SIGNIN_PAGE)) {    mPages.add(pageOf(AccountFirstRunFragment.class));  }}  }
class C{  public static ValueCompressonHolder.UnCompressValue unCompressNonDecimal(DataType compDataType,DataType actualDataType){switch (compDataType) {case DATA_BYTE:    return new UnCompressNonDecimalByte();case DATA_SHORT:  return new UnCompressNonDecimalShort();case DATA_INT:return new UnCompressNonDecimalInt();case DATA_LONG:return new UnCompressNonDecimalLong();case DATA_FLOAT:return new UnCompressNonDecimalFloat();default :return new UnCompressNonDecimalDefault();}}  }
class C{  public MarketGetByIdQueryWithExtended(VkApiClient client,UserActor actor,List<String> itemIds){  super(client,"market.getById",GetByIdExtendedResponse.class);  accessToken(actor.getAccessToken());  itemIds(itemIds);  extended(true);}  }
class C{  @Override public Node insertBefore(Node newChild,Node refChild) throws DOMException {  return internalInsertBefore(newChild,refChild,false);}  }
class C{  public AllSpacePredicate(List<ISpacePredicate> operands){  super(operands);}  }
class C{  public HumanTime h(int n){  delta+=HOUR * Math.abs(n);  return this;}  }
class C{  protected void removeChildListeners(){}  }
class C{  public static void show(Context applicationContext,MediaNotificationInfo.Builder notificationInfoBuilder){synchronized (LOCK) {    if (sManagers == null) {      sManagers=new SparseArray<MediaNotificationManager>();    }  }  MediaNotificationInfo notificationInfo=notificationInfoBuilder.build();  MediaNotificationManager manager=sManagers.get(notificationInfo.id);  if (manager == null) {    manager=new MediaNotificationManager(applicationContext);    sManagers.put(notificationInfo.id,manager);  }  manager.mNotificationInfoBuilder=notificationInfoBuilder;  manager.showNotification(notificationInfo);}  }
class C{  public static String deriveApiNameFromServiceName(String serviceName){  Matcher matcher=SERVICE_NAME_PATTERN.matcher(serviceName);  if (matcher.matches()) {    serviceName=matcher.group("sandboxed");    if (serviceName == null) {      serviceName=matcher.group("corp");      if (serviceName != null) {        serviceName="corp_" + serviceName;      }    }    if (serviceName == null) {      serviceName=matcher.group("legacySandboxed");    }    if (serviceName == null) {      serviceName=matcher.group("regular");    }  }  return serviceName.replace('.','_').replace('-','_');}  }
class C{  public boolean context_counts(){  return soot.PhaseOptions.getBoolean(options,"context-counts");}  }
class C{  public void replaceToken(Token token,String replacement){  try {    replace(token.start,token.length,replacement,null);  } catch (  BadLocationException ex) {    log.log(Level.WARNING,"unable to replace token: " + token,ex);  }}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public Builder type(final String typeName){  this.propertyTypeName=typeName;  return this;}  }
class C{  @Override public Fraction add(Fraction fraction){  return addSub(fraction,true);}  }
class C{  public String diff_prettyHtml(List<Diff> diffs){  StringBuilder html=new StringBuilder();  for (  Diff aDiff : diffs) {    String text=aDiff.text.replace("&","&amp;").replace("<","&lt;").replace(">","&gt;").replace("\n","&para;<br>");switch (aDiff.operation) {case INSERT:      html.append("<ins style=\"background:#e6ffe6;\">").append(text).append("</ins>");    break;case DELETE:  html.append("<del style=\"background:#ffe6e6;\">").append(text).append("</del>");break;case EQUAL:html.append("<span>").append(text).append("</span>");break;}}return html.toString();}  }
class C{  private boolean hasSimilarityMeasure(){  return this.isSimilarityMeasure;}  }
class C{  @Override public double[] makeCumulativeTestPoints(){  return new double[]{-2.226325228634938d,-1.156887023657177d,-0.643949578356075d,-0.2027950777320613d,0.305827808237559d,6.42632522863494d,5.35688702365718d,4.843949578356074d,4.40279507773206d,3.89417219176244d};}  }
class C{  public static Map<Integer,Integer[]> compute(final ClassificationViewer viewer,final String rankName,final float minPercent){  int rank=TaxonomicLevels.getId(rankName);  final Set<Integer> nodeIdsAtGivenRank=ClassificationManager.get(Classification.Taxonomy,true).getFullTree().getNodeIdsAtGivenRank(rank,false);  final int numberOfSamples=viewer.getDocument().getNumberOfSamples();  final Map<Integer,Integer[]> profile=new HashMap<>();  final PhyloTree tree=viewer.getTree();  final Node root=tree.getRoot();  final Integer[] rootAssigned=Basic.copyAsIntegerArray(((NodeData)root.getData()).getAssigned());  computeRec(root,rootAssigned,profile,nodeIdsAtGivenRank,numberOfSamples);  for (Edge e=root.getFirstOutEdge(); e != null; e=root.getNextOutEdge(e)) {    Node w=e.getTarget();    if (((Integer)w.getInfo()) <= 0) {      profile.put(((Integer)w.getInfo()),Basic.copyAsIntegerArray(((NodeData)w.getData()).getAssigned().clone()));    }  }  final int[] totalInitiallyAssigned=new int[numberOfSamples];  for (  Integer taxId : profile.keySet()) {    if (taxId > 0) {      Integer[] counts=profile.get(taxId);      for (int i=0; i < counts.length; i++) {        if (counts[i] != null)         totalInitiallyAssigned[i]+=counts[i];      }    }  }  float[] minSupport=new float[numberOfSamples];  for (int i=0; i < numberOfSamples; i++) {    minSupport[i]=(totalInitiallyAssigned[i] / 100.0f) * minPercent;  }  Integer[] unassigned=profile.get(IdMapper.UNASSIGNED_ID);  if (unassigned == null) {    unassigned=new Integer[numberOfSamples];    for (int i=0; i < numberOfSamples; i++)     unassigned[i]=0;    profile.put(IdMapper.UNASSIGNED_ID,unassigned);  }{    Set<Integer> toDelete=new HashSet<>();    for (    Integer taxonId : profile.keySet()) {      if (taxonId > 0) {        Integer[] array=profile.get(taxonId);        boolean hasEntry=false;        for (int i=0; i < array.length; i++) {          if (array[i] != null) {            if (array[i] < minSupport[i]) {              if (unassigned[i] == null)               unassigned[i]=array[i]; else               unassigned[i]+=array[i];              array[i]=0;            } else {              hasEntry=true;              break;            }          }        }        if (!hasEntry)         toDelete.add(taxonId);      }    }    profile.keySet().removeAll(toDelete);  }  final int[] totalProjected=new int[numberOfSamples];  final int[] lostCount=new int[numberOfSamples];{    for (    Integer taxId : profile.keySet()) {      if (taxId > 0) {        Integer[] counts=profile.get(taxId);        for (int i=0; i < counts.length; i++) {          if (counts[i] != null)           totalProjected[i]+=counts[i];        }      }    }    for (int i=0; i < numberOfSamples; i++) {      lostCount[i]=totalInitiallyAssigned[i] - totalProjected[i];      System.err.println("Sample " + i + ":");      System.err.println(String.format("Reads:    %,10d",viewer.getDocument().getDataTable().getSampleSizes()[i]));      System.err.println(String.format("Assigned: %,10d",totalInitiallyAssigned[i]));      System.err.println(String.format("Projected:%,10d",totalProjected[i]));      System.err.println(String.format("Lost:     %,10d",lostCount[i]));    }  }  for (int i=0; i < numberOfSamples; i++)   unassigned[i]+=lostCount[i];  System.err.println("Total projected: " + Basic.toString(totalProjected,", "));  System.err.println("Total lost:      " + Basic.toString(lostCount,", "));  return profile;}  }
class C{  @Override public boolean hasNext(){  return hasNextLine();}  }
class C{  public static void putArray(Map<String,String> properties,String key,String[] array,String separator){  if (array == null || array.length == 0) {    properties.remove(key);  } else {    StringBuilder concat=new StringBuilder();    for (int i=0; i < array.length; i++) {      String value=array[i];      if (value != null && value.length() > 0) {        if (value.contains(separator)) {          throw new IllegalArgumentException("array contains an element '" + value + "' that contains the separator '"+ separator+ "'");        }        concat.append(value);        if (i < array.length - 1) {          concat.append(separator);        }      }    }    properties.put(key,concat.toString());  }}  }
class C{  public static String s4(int v){  char[] result=new char[9];  if (v < 0) {    result[0]='-';    v=-v;  } else {    result[0]='+';  }  for (int i=0; i < 8; i++) {    result[8 - i]=Character.forDigit(v & 0x0f,16);    v>>=4;  }  return new String(result);}  }
class C{  default void onDisable(PluginBase pokkit){}  }
class C{  public SharedPreferences.Editor putStringNoEncrypted(String key,String value){  mEditor.putString(SecurePreferences.encrypt(key),value);  return this;}  }
class C{  @Override public void endParameterEntity(String name,Augmentations augmentations) throws XNIException {}  }
class C{  public boolean acceptsURL(String url) throws SQLException {  return (url.startsWith(GConnection.JDBC_GIGASPACES));}  }
class C{  private void updateFinder(){  int flag=0;  if (!jChkRegex.isSelected()) {    flag|=Pattern.LITERAL;  }  flag|=(jChkIgnoreCase.isSelected()) ? Pattern.CASE_INSENSITIVE : 0;  if (jChkIgnoreCase.isSelected()) {    flag|=Pattern.CASE_INSENSITIVE;  }  String regex=(String)jCmbFind.getSelectedItem();  if (regex != null && regex.length() > 0) {    Pattern pattern=Pattern.compile(regex,flag);    finder.setWrap(jChkWrap.isSelected());    finder.setPattern(pattern);    ActionUtils.insertIntoCombo(jCmbFind,regex);  } else {    finder.setPattern(null);  }}  }
class C{  @Override public XSSimpleType createTypeUnion(String name,String targetNamespace,short finalSet,XSSimpleType[] memberTypes,XSObjectList annotations){  int typeNum=memberTypes.length;  XSSimpleTypeDecl[] mtypes=new XSSimpleTypeDecl[typeNum];  System.arraycopy(memberTypes,0,mtypes,0,typeNum);  return new XSSimpleTypeDecl(name,targetNamespace,finalSet,mtypes,annotations);}  }
class C{  public synchronized BookKeeperClientBuilder zkc(ZooKeeperClient zkc){  this.zkc=zkc;  return this;}  }
class C{  protected void handleSendMessage(){  setMessageSendCallback();switch (message.status()) {case SUCCESS:    progressBar.setVisibility(View.INVISIBLE);  if (percentageView != null)   percentageView.setVisibility(View.INVISIBLE);statusView.setVisibility(View.INVISIBLE);break;case FAIL:progressBar.setVisibility(View.INVISIBLE);if (percentageView != null) percentageView.setVisibility(View.INVISIBLE);statusView.setVisibility(View.VISIBLE);break;case INPROGRESS:progressBar.setVisibility(View.VISIBLE);if (percentageView != null) {percentageView.setVisibility(View.VISIBLE);percentageView.setText(message.progress() + "%");}statusView.setVisibility(View.INVISIBLE);break;default :progressBar.setVisibility(View.INVISIBLE);if (percentageView != null) percentageView.setVisibility(View.INVISIBLE);statusView.setVisibility(View.VISIBLE);break;}}  }
class C{  private SoftReference<DoubleRef<Key,Value>> reference(Key key,Value value){  return new SoftReference<DoubleRef<Key,Value>>(new DoubleRef<Key,Value>(key,value));}  }
class C{  public Leaves(TreeSpecies species,boolean isDecayable){  this(DEFAULT_TYPE,species,isDecayable);}  }
class C{  @Nullable public static ModelWizardDialog createDialogForPaths(@Nullable Component parent,@NotNull Collection<String> requestedPaths,boolean backgroundable){  return createDialog(null,parent,requestedPaths,null,null,getSdkHandler(),backgroundable);}  }
class C{  public void rollOver(){  File target;  File file=new File(fileName);  String fileStartName=file.getName();  int dotIndex=fileStartName.indexOf('.');  if (dotIndex != -1) {    fileStartName=fileStartName.substring(0,dotIndex);  }  final String startName=fileStartName;  final String folderPath=file.getParent();  if (qw != null) {    long size=((CountingQuietWriter)qw).getCount();    LogLog.debug("rolling over count=" + size);    nextRollover=size + maxFileSize;  }  LogLog.debug("maxBackupIndex=" + maxBackupIndex);  boolean renameSucceeded=true;  if (maxBackupIndex > 0) {    DateFormat dateFormat=new SimpleDateFormat(DATE_FORMAT_FOR_TRANSFER);    StringBuilder buffer=new StringBuilder();    String extension="";    if (fileName.contains(".")) {      extension=fileName.substring(fileName.lastIndexOf("."));      buffer.append(fileName.substring(0,fileName.lastIndexOf(".")));    } else {      buffer.append(fileName);    }    buffer.append("_").append(dateFormat.format(new Date())).append(extension);    target=new File(buffer.toString());    this.closeFile();    LogLog.debug("Renaming file " + file + " to "+ target);    renameSucceeded=file.renameTo(target);    if (!renameSucceeded) {      try {        this.setFile(fileName,true,bufferedIO,bufferSize);      } catch (      InterruptedIOException e) {        Thread.currentThread().interrupt();      }catch (      IOException e) {        LogLog.error("setFile(" + fileName + ", true) call failed.",e);      }    }  }  if (renameSucceeded) {    try {      this.setFile(fileName,false,bufferedIO,bufferSize);      nextRollover=0;    } catch (    InterruptedIOException e) {      Thread.currentThread().interrupt();    }catch (    IOException e) {      LogLog.error("setFile(" + fileName + ", false) call failed.",e);    }  }  cleanUpLogs(startName,folderPath);}  }
class C{  public void onProgressBarUpdated(int progress){}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public AssignAndExpr fullCopy(){  AssignAndExpr tree=(AssignAndExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  private void handleJsonReportResponse(final ClientRequestReport report,final ClientRequestReportListener reportListener){  if (reportListener == null) {    LOGGER.debug("handleJsonReportResponse(): Received a report, but no reportListener is registered. Ignoring..");    return;  }  if (report.isErrorReport()) {    LOGGER.debug("handleJsonReportResponse(): Received an error report. Informing listener.");    reportListener.onErrorReportReceived((ClientRequestErrorReport)report);    throw new RuntimeException("Error report received from server on client request: " + report.getErrorMessage());  } else   if (report.isProgressReport()) {    LOGGER.debug("handleJsonReportResponse(): Received a progress report. Informing listener.");    reportListener.onProgressReportReceived((ClientRequestProgressReport)report);  } else   LOGGER.warn("handleJsonReportResponse(): Received a report of unknown type. Ignoring..");}  }
class C{  public static Transformer createTtmlTransformer(String xslt){  TransformerFactory tf=TransformerFactory.newInstance(XSLT2_TRANSFORMER_IMPLEMENTATION,null);  InputStream transformationStream=ResourceHelper.getResourceInputStream(xslt);  if (transformationStream == null) {    throw new ConvertException(String.format("The transformation file is absent: %s",xslt));  }  try {    return tf.newTransformer(new StreamSource(transformationStream));  } catch (  TransformerConfigurationException e) {    throw new ConvertException(e);  }}  }
class C{  public void actionPerformed(ActionEvent ev){  String choices[]=new String[]{"angular","straight","curved","none"};  String result=(String)JOptionPane.showInputDialog(getViewer().getFrame(),"Set edge shape","Set edge shape",JOptionPane.QUESTION_MESSAGE,ProgramProperties.getProgramIcon(),choices,choices[0]);  if (result != null)   execute("set edgeShape=" + result + ";");}  }
class C{  public User toEntity(UserDTO dto,int depth){  if (dto == null) {    return null;  }  User user=new User();  user.setId(dto.id);  user.setLogin(dto.login);  user.setPassword(dto.password);  user.setEmail(dto.email);  user.setIsEnabled(dto.isEnabled);  user.setCivility(dto.civility);  user.setFirstName(dto.firstName);  user.setLastName(dto.lastName);  user.setCreationDate(dto.creationDate);  user.setCreationAuthor(dto.creationAuthor);  user.setLastModificationDate(dto.lastModificationDate);  user.setLastModificationAuthor(dto.lastModificationAuthor);  user.setVersion(dto.version);  if (depth-- > 0) {  }  return user;}  }
class C{  public void addData(TreePath treePath,Object userObject,DataFlavor dataFlavour){  InternalTransferredData data=new InternalTransferredData();  data.treePath=treePath;  data.userObject=userObject;  data.dataFlavour=dataFlavour;  dataList.add(data);}  }
class C{  protected VideoReorderVideosQuery videoId(int value){  return unsafeParam("video_id",value);}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  @Nullable public ViewGroupHandler findLayoutHandler(@NotNull NlComponent component,boolean strict){  NlComponent curr=component;  if (strict) {    curr=curr.getParent();  }  while (curr != null) {    ViewHandler handler=getHandler(curr);    if (handler instanceof ViewGroupHandler) {      return (ViewGroupHandler)handler;    }    curr=curr.getParent();  }  return null;}  }
class C{  public void release(){  if (mReleased) {    return;  }  mReleased=true;  clear(true);  onRelease();}  }
class C{  private void doScroll(int delta){  scrollingOffset+=delta;  int itemHeight=getItemHeight();  int count=scrollingOffset / itemHeight;  int pos=currentItem - count;  int itemCount=viewAdapter.getItemsCount();  int fixPos=scrollingOffset % itemHeight;  if (Math.abs(fixPos) <= itemHeight / 2) {    fixPos=0;  }  if (isCyclic && itemCount > 0) {    if (fixPos > 0) {      pos--;      count++;    } else     if (fixPos < 0) {      pos++;      count--;    }    while (pos < 0) {      pos+=itemCount;    }    pos%=itemCount;  } else {    if (pos < 0) {      count=currentItem;      pos=0;    } else     if (pos >= itemCount) {      count=currentItem - itemCount + 1;      pos=itemCount - 1;    } else     if (pos > 0 && fixPos > 0) {      pos--;      count++;    } else     if (pos < itemCount - 1 && fixPos < 0) {      pos++;      count--;    }  }  int offset=scrollingOffset;  if (pos != currentItem) {    setCurrentItem(pos,false);  } else {    invalidate();  }  scrollingOffset=offset - count * itemHeight;  if (scrollingOffset > getHeight()) {    scrollingOffset=scrollingOffset % getHeight() + getHeight();  }}  }
class C{  public void certificateCreated(long startTimeMs,long finishTimeMs){  certificatesGenerated.incrementAndGet();  certificateGenerationTimeMs.addAndGet(finishTimeMs - startTimeMs);  firstCertificateGeneratedTimestamp.compareAndSet(0L,System.currentTimeMillis());}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,byte[] decodabet){  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)| ((decodabet[source[srcOffset + 3]] << 24) >>> 24);    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  public void unlockUserInput(){  commandManager.setEnableCritical(true);  locked=false;}  }
class C{  <T>T onFindLast(Class<T> modelClass,boolean isEager){  List<T> dataList=query(modelClass,null,null,null,null,null,"id desc","1",getForeignKeyAssociations(modelClass.getName(),isEager));  if (dataList.size() > 0) {    return dataList.get(0);  }  return null;}  }
class C{  public SphericalPolygonsSet(final Vector3D center,final Vector3D meridian,final double outsideRadius,final int n,final double tolerance){  this(tolerance,createRegularPolygonVertices(center,meridian,outsideRadius,n));}  }
class C{  public static StringBuilder regex(String s){  return escapeString(s,'/').buffer.insert(0,"//").append("//");}  }
class C{  public Object interpret(Target target,int minNumberOfData){  Object result=this.interpretToNode(target,minNumberOfData).getAllData();  return result;}  }
class C{  public String[] categoryArray(){  return keyToValue.values().toArray(new String[size()]);}  }
class C{  private int expungeStaleEntry(int staleSlot){  Entry[] tab=table;  int len=tab.length;  tab[staleSlot].value=null;  tab[staleSlot]=null;  size--;  Entry e;  int i;  for (i=nextIndex(staleSlot,len); (e=tab[i]) != null; i=nextIndex(i,len)) {    int h=e.key.hashCode & (len - 1);    if (h != i) {      tab[i]=null;      while (tab[h] != null)       h=nextIndex(h,len);      tab[h]=e;    }  }  return i;}  }
class C{  public void associateExecutionById(String executionId){  Execution execution=processEngine.getRuntimeService().createExecutionQuery().executionId(executionId).singleResult();  if (execution == null) {    throw new ActivitiCdiException("Cannot associate execution by id: no execution with id '" + executionId + "' found.");  }  associationManager.setExecution(execution);}  }
class C{  public boolean isZero(){  return this.milliseconds == 0 && this.seconds == 0 && this.minutes == 0 && this.hours == 0 && this.days == 0 && this.months == 0 && this.years == 0;}  }
class C{  public BucketAdapter(Context _context,List<Task> _model){  this.context=_context;  this.model=_model;}  }
class C{  public void nextImage() throws IOException {  super.next();}  }
class C{  public static void startAnimation(View animView){  Animation tx=new TranslateAnimation(-350,350,0,0);  tx.setDuration(1000);  tx.setRepeatCount(Animation.INFINITE);  tx.setInterpolator(new AccelerateDecelerateInterpolator());  tx.setRepeatMode(Animation.REVERSE);  animView.startAnimation(tx);}  }
class C{  public T walkInOptimizedOrder(final FieldVectorPreservingVisitor<T> visitor){  return walkInDefaultOrder(visitor);}  }
class C{  public void add(ItemApplication info){  if (findActivity(data,info.mComponentName)) {    return;  }  data.add(info);  added.add(info);}  }
class C{  @Override public void onClick(View view){switch (view.getId()) {case -1:    if (getIntent().getBooleanExtra(EXTRA_BROWSABLE,false)) {      startActivity(new Intent(this,MainActivity.class));    }  toolbarPresenter.touchNavigatorIcon(this);break;}}  }
class C{  public static void verifyBracketing(UnivariateFunction function,final double lower,final double upper) throws MathIllegalArgumentException, NullArgumentException {  MathUtils.checkNotNull(function,LocalizedCoreFormats.FUNCTION);  verifyInterval(lower,upper);  if (!isBracketing(function,lower,upper)) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NOT_BRACKETING_INTERVAL,lower,upper,function.value(lower),function.value(upper));  }}  }
class C{  public static Double zing(Number value){  if (value == null) {    return null;  }  return Math.max(0d,value.doubleValue());}  }
class C{  public AccountSaveProfileInfoQuery sex(AccountSaveProfileInfoSex value){  return unsafeParam("sex",value);}  }
class C{  public static ImageView asImageViewFX(ImageIcon imageIcon){  java.awt.Image awtImage=imageIcon.getImage();  if (awtImage != null) {    final BufferedImage bImg;    if (awtImage instanceof BufferedImage) {      bImg=(BufferedImage)awtImage;    } else {      bImg=new BufferedImage(awtImage.getWidth(null),awtImage.getHeight(null),BufferedImage.TYPE_INT_ARGB);      Graphics2D graphics=bImg.createGraphics();      graphics.drawImage(awtImage,0,0,null);      graphics.dispose();    }    return new ImageView(SwingFXUtils.toFXImage(bImg,null));  } else   return null;}  }
class C{  public static boolean isPossibleToReadResource(Acl acl,String userModifier,String projectName){  if (!acl.getOwnerUserId().equalsIgnoreCase(userModifier))   if (!acl.getEntries().stream().filter(Preconditions.hasACLPermission(projectName,AclPermissions.READ)).findFirst().isPresent())   return false;  return true;}  }
class C{  public DataSourceAttributeData(DataSourceAttributeData objectToCopy){  super();  this.name=objectToCopy.name;  this.type=objectToCopy.type;  this.value=objectToCopy.value;}  }
class C{  public void addAp(int additionalAp){  dailyAP+=additionalAp;  if (dailyAP < 0) {    dailyAP=0;  }  weeklyAP+=additionalAp;  if (weeklyAP < 0) {    weeklyAP=0;  }  int cappedCount=0;  if (CustomConfig.ENABLE_AP_CAP) {    cappedCount=(long)(currentAp + additionalAp) > CustomConfig.AP_CAP_VALUE ? (int)(CustomConfig.AP_CAP_VALUE - currentAp) : additionalAp;  } else {    cappedCount=additionalAp;  }  currentAp+=cappedCount;  if (currentAp < 0) {    currentAp=0;  }  AbyssRankEnum newRank=AbyssRankEnum.getRankForAp(currentAp);  if (newRank.getId() <= 9) {    setRank(newRank);  }  setPersistentState(PersistentState.UPDATE_REQUIRED);}  }
class C{  public boolean isNewQualityStatus(final SourceDataTagQuality newSDQuality){  if (this.lastSourceDataTag != null) {    SourceDataTagValue lastSentSDTagValue=this.lastSourceDataTag.getCurrentValue();    if ((lastSentSDTagValue.getValue() != null) && (lastSentSDTagValue.getQuality().getQualityCode() != newSDQuality.getQualityCode())) {      if (LOGGER.isDebugEnabled()) {        LOGGER.debug("\tscheduler[" + this.sourceDataTag.getId() + "] : New Quality status. Last Sent Quality [ "+ lastSentSDTagValue.getQuality()+ "] vs New Quality ["+ newSDQuality+ "]");      }      return true;    }  } else   if (isScheduledForSending()) {    SourceDataTagValue scheduledValue=sourceDataTag.getCurrentValue();    if ((scheduledValue != null) && (scheduledValue.getQuality().getQualityCode() != newSDQuality.getQualityCode())) {      if (LOGGER.isDebugEnabled()) {        LOGGER.debug("\tscheduler[" + this.sourceDataTag.getId() + "] : New Quality status. Scheduled Quality ["+ scheduledValue.getQuality()+ "] vs New Quality ["+ newSDQuality+ "]");      }      return true;    }  }  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("\tscheduler[" + this.sourceDataTag.getId() + "] : No new Quality status ");  }  return false;}  }
class C{  public static byte[] toByteArray(Reader input,String encoding) throws IOException {  return toByteArray(input,Charsets.toCharset(encoding));}  }
class C{  public static IOFileFilter magicNumberFileFilter(byte[] magicNumber){  return new MagicNumberFileFilter(magicNumber);}  }
class C{  public ScanWriter createScanWriter(int taskId,ScanDestination destination){  if (destination.isDiscarding()) {    return _scanWriterFactory.createDiscardingScanWriter(taskId,Optional.<Integer>absent());  }  URI uri=destination.getUri();  String scheme=uri.getScheme();  if ("file".equals(scheme)) {    return _scanWriterFactory.createFileScanWriter(taskId,uri,Optional.<Integer>absent());  }  if ("s3".equals(scheme)) {    return _scanWriterFactory.createS3ScanWriter(taskId,uri,Optional.<Integer>absent());  }  throw new IllegalArgumentException("Unsupported destination: " + destination);}  }
class C{  private double[] interpolateNonZeroValues(double[] contour){  for (int i=0; i < contour.length; i++) {    if (contour[i] == 0) {      int index=findNextIndexNonZero(contour,i);      if (index == -1) {        for (int j=i; j < contour.length; j++) {          contour[j]=contour[j - 1];        }        break;      } else {        for (int j=i; j < index; j++) {          if (i == 0) {            contour[j]=contour[index];          } else {            contour[j]=contour[j - 1] + ((contour[index] - contour[i - 1]) / (index - i));          }        }        i=index - 1;      }    }  }  return contour;}  }
class C{  private String extractContext(String s,int position){  StringBuilder sb=new StringBuilder();  int j=position - 1;  char c=s.charAt(j);  while (j > 0 && c != ' ' && c != '_') {    c=s.charAt(--j);  }  String ps=j > 0 ? s.substring(j + 1,position) : s.substring(0,position);  ps=convert(ps);  sb.append("ps:");  sb.append(ps);  sb.append(" pw:");  sb.append(lexicon.hasWord(ps) ? 1 : 0);  j=position + 1;  c=s.charAt(j);  while (j < s.length() && c != ' ' && c != '_') {    c=s.charAt(j++);  }  String ns=j < s.length() ? s.substring(position + 1,j - 1) : s.substring(position + 1);  ns=convert(ns);  sb.append(" ns:");  sb.append(ns);  sb.append(" nw:");  sb.append(lexicon.hasWord(ns) ? 1 : 0);  sb.append(" ps+ns:");  sb.append(ps);  sb.append('+');  sb.append(ns);  return sb.toString();}  }
class C{  protected void drawLegendTransposed(Graphics2D gc,Dimension size){  SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);  boolean vertical=chartViewer.getShowLegend().equals("vertical");  try {    gc.setFont(chartViewer.getFont(ChartViewer.FontKeys.LegendFont.toString()));  } catch (  Exception ex) {  }  boolean doDraw=(size == null);  int yStart=getFont().getSize();  int x=3;  int maxX=x;  if (doDraw) {    String legend;    if (chartViewer.getChartData().getSeriesLabel() != null)     legend="Legend (" + chartViewer.getChartData().getSeriesLabel() + "):"; else     legend="Legend:";    gc.setColor(Color.BLACK);    gc.drawString(legend,x,yStart);    Dimension labelSize=Basic.getStringSize(gc,legend,gc.getFont()).getSize();    maxX=Math.max(maxX,labelSize.width);  }  int y=yStart + (int)(1.5 * gc.getFont().getSize());  for (  String sampleName : chartViewer.getChartData().getSeriesNames()) {    String label=chartViewer.getSeriesLabelGetter().getLabel(sampleName);    if (!label.equals(sampleName))     label+=" (" + sampleName + ")";    final Dimension labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();    if (x + 12 + labelSize.width+ 2 > getWidth() || vertical) {      x=3;      y+=1.5 * gc.getFont().getSize();    }    if (doDraw) {      Color color=chartViewer.getChartColorManager().getSampleColor(sampleName);      gc.setColor(color);      if (sgc != null)       sgc.setCurrentItem(new String[]{sampleName,null});      gc.fillRect(x,y - labelSize.height,labelSize.height,labelSize.height);      gc.setColor(color.darker());      gc.drawRect(x,y - labelSize.height,labelSize.height,labelSize.height);      gc.setColor(chartViewer.getChartDrawer().getFontColor(ChartViewer.FontKeys.LegendFont.toString(),Color.BLACK));      gc.drawString(label,x + labelSize.height + 2,y);      if (sgc != null)       sgc.clearCurrentItem();    }    maxX=Math.max(maxX,x);    x+=labelSize.height + 2 + labelSize.width+ 10;    if (vertical)     maxX=Math.max(maxX,x);  }  if (!doDraw) {    size.setSize(maxX,y + 5);  }}  }
class C{  protected boolean atAnyOfTokens(TokenKind... kinds){  TokenKind current=currentToken();  for (  TokenKind kind : kinds) {    if (current == kind) {      return true;    }  }  return false;}  }
class C{  protected void drawRoundedSlices(Canvas c){  if (!mChart.isDrawRoundedSlicesEnabled())   return;  IPieDataSet dataSet=mChart.getData().getDataSet();  if (!dataSet.isVisible())   return;  float phaseX=mAnimator.getPhaseX();  float phaseY=mAnimator.getPhaseY();  MPPointF center=mChart.getCenterCircleBox();  float r=mChart.getRadius();  float circleRadius=(r - (r * mChart.getHoleRadius() / 100f)) / 2f;  float[] drawAngles=mChart.getDrawAngles();  float angle=mChart.getRotationAngle();  for (int j=0; j < dataSet.getEntryCount(); j++) {    float sliceAngle=drawAngles[j];    Entry e=dataSet.getEntryForIndex(j);    if ((Math.abs(e.getY()) > 0.000001)) {      float x=(float)((r - circleRadius) * Math.cos(Math.toRadians((angle + sliceAngle) * phaseY)) + center.x);      float y=(float)((r - circleRadius) * Math.sin(Math.toRadians((angle + sliceAngle) * phaseY)) + center.y);      mRenderPaint.setColor(dataSet.getColor(j));      mBitmapCanvas.drawCircle(x,y,circleRadius,mRenderPaint);    }    angle+=sliceAngle * phaseX;  }  MPPointF.recycleInstance(center);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_ABSTATUS_SKILL_CAN_NOT_BE_TURNED_OFF_BY_CASTOR(String value0){  return new SM_SYSTEM_MESSAGE(1300057,value0);}  }
class C{  public boolean approxEquals(final S1Interval y,double maxError){  if (isEmpty()) {    return y.getLength() <= maxError;  }  if (y.isEmpty()) {    return getLength() <= maxError;  }  return (Math.abs(Math.IEEEremainder(y.lo() - lo(),2 * S2.M_PI)) + Math.abs(Math.IEEEremainder(y.hi() - hi(),2 * S2.M_PI))) <= maxError;}  }
class C{  public static File toFile(URL url){  if (url == null || !"file".equalsIgnoreCase(url.getProtocol())) {    return null;  } else {    String filename=url.getFile().replace('/',File.separatorChar);    filename=decodeUrl(filename);    return new File(filename);  }}  }
class C{  public boolean isApplicationEnabled(){  AXmlAttribute<?> attr=this.application.getAttribute("enabled");  return attr == null || !attr.getValue().equals(Boolean.FALSE);}  }
class C{  @Override public IScanListIterator<IEntryCacheInfo> establishScan(K startPos,short relation,K endPos,boolean endPosInclusive){  return establishScan(startPos,relation,endPos,endPosInclusive,false);}  }
class C{  private void verifyIdentifierIsConventionalFieldName(String id,Location loc) throws CompileException {  if (Character.isUpperCase(id.charAt(0))) {    for (int i=0; i < id.length(); ++i) {      char c=id.charAt(i);      if (!Character.isUpperCase(c) && !Character.isDigit(c) && c != '_') {        this.warning("UCN","Constant name \"" + id + "\" contains unconventional character \""+ c+ "\" (see JLS7 6.8.5)",loc);        return;      }    }  } else   if (Character.isLowerCase(id.charAt(0))) {    for (int i=0; i < id.length(); ++i) {      char c=id.charAt(i);      if (!Character.isLetter(c) && !Character.isDigit(c)) {        this.warning("UFN","Field name \"" + id + "\" contains unconventional character \""+ c+ "\" (see JLS7 6.8.4)",loc);        return;      }    }  } else {    this.warning("UFN1",("\"" + id + "\" is neither a conventional field name (JLS7 6.8.4) nor a conventional constant name (JLS7 6.8.5)"),loc);  }}  }
class C{  public static void checkAndStartIntroduce(Activity a){  SharedPreferences sharedPreferences=a.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  if (sharedPreferences.getInt(KEY_INTRODUCE_VERSION,FIRST_VERSION) < NEW_VERSION) {    Intent intent=new Intent(a,IntroduceActivity.class);    a.startActivity(intent);    a.overridePendingTransition(R.anim.activity_in,0);  }}  }
class C{  public UserIdentity toUserIdentity(){  if (_userIdentity == null) {    String[] roles=_roles.toArray(new String[_roles.size()]);    _userIdentity=new DefaultUserIdentity(new javax.security.auth.Subject(true,ImmutableSet.of(this),ImmutableSet.of(),ImmutableSet.of()),this,roles);  }  return _userIdentity;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FACTION_POINTUP(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1300517,value0,value1);}  }
class C{  public boolean contains(short value){  for (int i=0; i < fLength; ++i) {    if (fData[i] == value) {      return true;    }  }  return false;}  }
class C{  public DataTagUpdate(){}  }
class C{  public static Rectangle rectangle(double minX,double maxX,double minY,double maxY){  return new RectangleImpl(minX,maxX,minY,maxY);}  }
class C{  public static void copyInternal(FloatBuffer buf,int fromPos,int toPos,int length){  float[] data=new float[length];  buf.position(fromPos);  buf.get(data);  buf.position(toPos);  buf.put(data);}  }
class C{  public Storage(File directory,String propertiesFile){  if (directory == null)   throw new NullPointerException("Directory cannot be null");  if (directory.isFile())   throw new IllegalArgumentException("Not a valid directory: " + directory);  this.directory=directory;  this.propertiesFile=propertiesFile != null ? new File(directory,propertiesFile) : null;}  }
class C{  protected CustomFallbackXmlDataStore(URL dataUrl,URL versionUrl){  super(DEFAULT_DATA_READER,dataUrl,versionUrl,DEFAULT_CHARSET);}  }
class C{  private soot.Value handleDFLCond(soot.jimple.ConditionExpr cond){  soot.Local result=lg.generateLocal(soot.ByteType.v());  soot.jimple.Expr cmExpr=null;  if (isDouble(cond.getOp1()) || isDouble(cond.getOp2()) || isFloat(cond.getOp1())|| isFloat(cond.getOp2())) {    if ((cond instanceof soot.jimple.GeExpr) || (cond instanceof soot.jimple.GtExpr)) {      cmExpr=soot.jimple.Jimple.v().newCmpgExpr(cond.getOp1(),cond.getOp2());    } else {      cmExpr=soot.jimple.Jimple.v().newCmplExpr(cond.getOp1(),cond.getOp2());    }  } else   if (isLong(cond.getOp1()) || isLong(cond.getOp2())) {    cmExpr=soot.jimple.Jimple.v().newCmpExpr(cond.getOp1(),cond.getOp2());  } else {    return cond;  }  soot.jimple.Stmt assign=soot.jimple.Jimple.v().newAssignStmt(result,cmExpr);  body.getUnits().add(assign);  if (cond instanceof soot.jimple.EqExpr) {    cond=soot.jimple.Jimple.v().newEqExpr(result,soot.jimple.IntConstant.v(0));  } else   if (cond instanceof soot.jimple.GeExpr) {    cond=soot.jimple.Jimple.v().newGeExpr(result,soot.jimple.IntConstant.v(0));  } else   if (cond instanceof soot.jimple.GtExpr) {    cond=soot.jimple.Jimple.v().newGtExpr(result,soot.jimple.IntConstant.v(0));  } else   if (cond instanceof soot.jimple.LeExpr) {    cond=soot.jimple.Jimple.v().newLeExpr(result,soot.jimple.IntConstant.v(0));  } else   if (cond instanceof soot.jimple.LtExpr) {    cond=soot.jimple.Jimple.v().newLtExpr(result,soot.jimple.IntConstant.v(0));  } else   if (cond instanceof soot.jimple.NeExpr) {    cond=soot.jimple.Jimple.v().newNeExpr(result,soot.jimple.IntConstant.v(0));  } else {    throw new RuntimeException("Unknown Comparison Expr");  }  return cond;}  }
class C{  public final void addAlarmValues(final List<AlarmValueImpl> alarmValues){  if (alarmValues != null) {    for (    AlarmValueImpl alarmValue : alarmValues) {      if (alarmValue != null) {        addAlarmValue(alarmValue);      }    }  }}  }
class C{  public void notifyAbnormalSettedObservers(AbnormalState state){  notifyObservers(ObserverType.ABNORMALSETTED,state);}  }
class C{  @Override public Filter createLogicFilter(List<Filter> filterList){  return null;}  }
class C{  public ColourRampData(){}  }
class C{  protected boolean isUsedAsFloatingPoint(DexBody body,int register,boolean isStatic){  MethodReference item=(MethodReference)((ReferenceInstruction)instruction).getReference();  List<? extends CharSequence> paramTypes=item.getParameterTypes();  List<Integer> regs=getUsedRegistersNums();  if (paramTypes == null)   return false;  for (int i=0, j=0; i < regs.size(); i++, j++) {    if (!isStatic && i == 0) {      j--;      continue;    }    if (regs.get(i) == register && isFloatLike(DexType.toSoot(paramTypes.get(j).toString())))     return true;    if (DexType.isWide(paramTypes.get(j).toString()))     i++;  }  return false;}  }
class C{  private Double readDoubleNumberFromExpression(String expression) throws ParsingException {  Character c=expression.charAt(expressionIterator);  Double number=getDoubleDigit(c);  while (++expressionIterator < expression.length()) {    c=expression.charAt(expressionIterator);    if (!Character.isDigit(c)) {      break;    }    number*=10;    number+=getDoubleDigit(c);  }  if (c == '.') {    if (++expressionIterator == expression.length()) {      throw new ParsingException(ILLEGAL_POSITION_IN_EXPRESSION + c);    }    c=expression.charAt(expressionIterator);    double placeFactor=10;    number+=getDoubleDigit(c) / placeFactor;    if (!Character.isDigit(c)) {      throw new ParsingException(ILLEGAL_POSITION_IN_EXPRESSION + c);    }    while (++expressionIterator < expression.length()) {      c=expression.charAt(expressionIterator);      if (!Character.isDigit(c)) {        break;      }      placeFactor*=10;      number+=getDoubleDigit(c) / placeFactor;    }  }  --expressionIterator;  return number;}  }
class C{  public static boolean moveUp(Alignment alignment,int firstRow,int lastRow){  lastRow=Math.min(lastRow,alignment.getNumberOfSequences());  if (firstRow <= 0 || firstRow > lastRow)   return false; else {    Integer[] array=new Integer[alignment.getNumberOfSequences()];    for (int i=0; i < alignment.getNumberOfSequences(); i++)     array[i]=alignment.getOrder(i);    int replaced=array[firstRow - 1];    System.arraycopy(array,firstRow,array,firstRow - 1,lastRow + 1 - firstRow);    array[lastRow]=replaced;    alignment.setOrder(Arrays.asList(array));    return true;  }}  }
class C{  static private Entry[] readAttributes(ObjectInput in) throws IOException, ClassNotFoundException {  final List entries=new java.util.LinkedList();  final int objectCount=in.readInt();  for (int i=0; i < objectCount; i++) {    try {      MarshalledObject mo=(MarshalledObject)in.readObject();      entries.add(mo.get());    } catch (    IOException e) {      if (initlogger.isLoggable(Levels.HANDLED)) {        initlogger.log(Levels.HANDLED,"Exception getting service attribute ... skipping",e);      }    }catch (    ClassNotFoundException e) {      if (initlogger.isLoggable(Levels.HANDLED)) {        initlogger.log(Levels.HANDLED,"Exception getting service attribute ... skipping",e);      }    }  }  return (Entry[])entries.toArray(new Entry[0]);}  }
class C{  private void populateMultiShapeList(){  multiListModel.clear();  segmentListModel.clear();  for (int index=0; index < wktGeometry.getNoOfSegments(); index++) {    multiListModel.addElement(wktGeometry.getMultiShapeName(index));  }  multiList.setSelectedIndex(0);}  }
class C{  private int inRange(int number,int min,int max){  int result;  result=Math.min(number,max);  result=Math.max(result,min);  return result;}  }
class C{  public void skipValue(){switch (peek()) {case ENCODED_BYTE:    readByte();  break;case ENCODED_SHORT:readShort();break;case ENCODED_CHAR:readChar();break;case ENCODED_INT:readInt();break;case ENCODED_LONG:readLong();break;case ENCODED_FLOAT:readFloat();break;case ENCODED_DOUBLE:readDouble();break;case ENCODED_STRING:readString();break;case ENCODED_TYPE:readType();break;case ENCODED_FIELD:readField();break;case ENCODED_ENUM:readEnum();break;case ENCODED_METHOD:readMethod();break;case ENCODED_ARRAY:for (int i=0, size=readArray(); i < size; i++) {skipValue();}break;case ENCODED_ANNOTATION:for (int i=0, size=readAnnotation(); i < size; i++) {readAnnotationName();skipValue();}break;case ENCODED_NULL:readNull();break;case ENCODED_BOOLEAN:readBoolean();break;default :throw new DexException("Unexpected type: " + Integer.toHexString(type));}}  }
class C{  public FactoryConfigurationError(Exception e,String msg){  super(msg);  this.exception=e;}  }
class C{  public static <K>Expression<K> toCNF(Expression<K> root){  return toPos(root);}  }
class C{  public FriendsGetAvailableForCallQueryWithFields nameCase(UsersNameCase value){  return unsafeParam("name_case",value);}  }
class C{  public NumericLiteral(long x){  m_number=new Long(x);  m_type=long.class;}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  public static String worldPayNotify(HttpServletRequest request,HttpServletResponse response){  Locale locale=UtilHttp.getLocale(request);  Delegator delegator=(Delegator)request.getAttribute("delegator");  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  GenericValue userLogin=(GenericValue)request.getSession().getAttribute("userLogin");  Map<String,Object> parametersMap=UtilHttp.getParameterMap(request);  String orderId=request.getParameter("cartId");  for (  String name : parametersMap.keySet()) {    String value=request.getParameter(name);    Debug.logError("### Param: " + name + " => "+ value,module);  }  if (userLogin == null) {    String userLoginId="system";    try {      userLogin=EntityQuery.use(delegator).from("UserLogin").where("userLoginId",userLoginId).queryOne();    } catch (    GenericEntityException e) {      Debug.logError(e,"Cannot get UserLogin for: " + userLoginId + "; cannot continue",module);      request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"worldPayEvents.problemsGettingAuthenticationUser",locale));      return "error";    }  }  GenericValue orderHeader=null;  if (UtilValidate.isNotEmpty(orderId)) {    try {      orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",orderId).queryOne();    } catch (    GenericEntityException e) {      Debug.logError(e,"Cannot get the order header for order: " + orderId,module);      request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"worldPayEvents.problemsGettingOrderHeader",locale));      return "error";    }  } else {    Debug.logError("WorldPay did not callback with a valid orderId!",module);    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"worldPayEvents.noValidOrderIdReturned",locale));    return "error";  }  if (orderHeader == null) {    Debug.logError("Cannot get the order header for order: " + orderId,module);    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"worldPayEvents.problemsGettingOrderHeader",locale));    return "error";  }  String paymentStatus=request.getParameter("transStatus");  boolean okay=true;  boolean beganTransaction=false;  try {    beganTransaction=TransactionUtil.begin();    if ("Y".equals(paymentStatus)) {      okay=OrderChangeHelper.approveOrder(dispatcher,userLogin,orderId);    } else     if ("C".equals(paymentStatus)) {      okay=OrderChangeHelper.cancelOrder(dispatcher,userLogin,orderId);    }    if (okay) {      okay=setPaymentPreferences(delegator,dispatcher,userLogin,orderId,request);    }  } catch (  Exception e) {    String errMsg="Error handling WorldPay notification";    Debug.logError(e,errMsg,module);    try {      TransactionUtil.rollback(beganTransaction,errMsg,e);    } catch (    GenericTransactionException gte2) {      Debug.logError(gte2,"Unable to rollback transaction",module);    }  } finally {    if (!okay) {      try {        TransactionUtil.rollback(beganTransaction,"Failure in processing WorldPay callback",null);      } catch (      GenericTransactionException gte) {        Debug.logError(gte,"Unable to rollback transaction",module);      }    } else {      try {        TransactionUtil.commit(beganTransaction);      } catch (      GenericTransactionException gte) {        Debug.logError(gte,"Unable to commit transaction",module);      }    }  }  if (okay) {    OrderChangeHelper.releaseInitialOrderHold(dispatcher,orderId);    Map<String,Object> emailContext=UtilMisc.toMap("orderId",orderId,"userLogin",userLogin);    try {      dispatcher.runSync("sendOrderConfirmation",emailContext);    } catch (    GenericServiceException e) {      Debug.logError(e,"Problems sending email confirmation",module);    }  }  return "success";}  }
class C{  @Override protected void readImpl(){  macroPosition=readC();}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(getClass().getSimpleName());  sb.append(" [");  sb.append("Hash = ").append(hashCode());  sb.append(", groupName=").append(groupName);  sb.append(", groupDesc=").append(groupDesc);  sb.append("]");  return sb.toString();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ExtendAuraRange_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200819,skillcaster,skillname);}  }
class C{  public String toString(cp_info constant_pool[]){  return Float.toString(bytes);}  }
class C{  public FriendsGetRequestsQuery needMutual(Boolean value){  return unsafeParam("need_mutual",value);}  }
class C{  private void applyPhaseOptions(JimpleBody b,Map<String,String> opts){  JJOptions options=new JJOptions(opts);  if (options.use_original_names())   PhaseOptions.v().setPhaseOptionIfUnset("jj.lns","only-stack-locals");  if (Options.v().time())   Timers.v().splitTimer.start();  PackManager.v().getTransform("jj.ls").apply(b);  if (Options.v().time())   Timers.v().splitTimer.end();  PackManager.v().getTransform("jj.a").apply(b);  PackManager.v().getTransform("jj.ule").apply(b);  PackManager.v().getTransform("jj.ne").apply(b);  if (Options.v().time())   Timers.v().assignTimer.start();  PackManager.v().getTransform("jj.tr").apply(b);  if (Options.v().time())   Timers.v().assignTimer.end();  if (options.use_original_names()) {    PackManager.v().getTransform("jj.ulp").apply(b);  }  PackManager.v().getTransform("jj.lns").apply(b);  PackManager.v().getTransform("jj.cp").apply(b);  PackManager.v().getTransform("jj.dae").apply(b);  PackManager.v().getTransform("jj.cp-ule").apply(b);  PackManager.v().getTransform("jj.lp").apply(b);  PackManager.v().getTransform("jj.uce").apply(b);  if (Options.v().time())   Timers.v().stmtCount+=b.getUnits().size();}  }
class C{  public static String localePrefix(Locale locale){  if (locale == null)   return null;  return locale.toString();}  }
class C{  public static void clickButtonTwitter(){  RewiMod.getInstance().openUrl("https://twitter.com/RewiMod");}  }
class C{  public static int apply(Document doc,ViewerBase viewer,String method,Distances distances,boolean normalize) throws IOException {  System.err.println("Computing " + method + " distances");  Vector<Double[]> input=new Vector<>();  double[] total=new double[doc.getNumberOfSamples()];  int countNodesUsed=0;  HashSet<Integer> seen=new HashSet<>();  for (Node v=viewer.getGraph().getFirstNode(); v != null; v=v.getNext()) {    Integer id=(Integer)v.getInfo();    if (viewer.getSelected(v)) {      if (!seen.contains(id)) {        seen.add(id);        countNodesUsed++;        final int[] counts=(v.getOutDegree() == 0 ? viewer.getNodeData(v).getSummarized() : viewer.getNodeData(v).getAssigned());        final Double[] numbers=new Double[counts.length];        for (int i=0; i < counts.length; i++) {          numbers[i]=(double)counts[i];          total[i]+=numbers[i];        }        input.addElement(numbers);      }    }  }  if (normalize) {    for (    Double[] numbers : input) {      for (int i=0; i < numbers.length; i++) {        if (total[i] > 0) {          numbers[i]/=total[i];        }      }    }  }  System.err.println("Nodes used: " + seen.size());  Vector<Vector<Double>> upperTriangle;  if (method.equalsIgnoreCase(GOODALL)) {    upperTriangle=EcologicalIndices.getGoodallsDistance(input,false);  } else   if (method.equalsIgnoreCase(GOODALL_NORMALIZED)) {    upperTriangle=EcologicalIndices.getGoodallsDistance(input,true);  } else   if (method.equalsIgnoreCase(CHISSQUARE)) {    upperTriangle=EcologicalIndices.getChiSquareDistance(input);  } else   if (method.equalsIgnoreCase(KULCZYNSKI)) {    upperTriangle=EcologicalIndices.getKulczynskiDistance(input);  } else   if (method.equalsIgnoreCase(BRAYCURTIS)) {    upperTriangle=EcologicalIndices.getBrayCurtisDistance(input);  } else   if (method.equalsIgnoreCase(HELLINGER)) {    upperTriangle=EcologicalIndices.getHellingerDistance(input);  } else   if (method.equalsIgnoreCase(EUCLIDEAN)) {    upperTriangle=EcologicalIndices.getEuclidDistance(input,false);  } else   if (method.equalsIgnoreCase(EUCLIDEAN_NORMALIZED)) {    upperTriangle=EcologicalIndices.getEuclidDistance(input,true);  } else   throw new IOException("Unknown distance: " + method);  distances.setFromUpperTriangle(upperTriangle);  return countNodesUsed;}  }
class C{  public IterationManager(final int maxIterations){  this.iterations=new Incrementor(maxIterations);  this.listeners=new CopyOnWriteArrayList<IterationListener>();}  }
class C{  public static int compareBytes(byte[] b1,int s1,int l1,byte[] b2,int s2,int l2){  int end1=s1 + l1;  int end2=s2 + l2;  for (int i=s1, j=s2; i < end1 && j < end2; i++, j++) {    int a=(b1[i] & 0xff);    int b=(b2[j] & 0xff);    if (a != b) {      return a - b;    }  }  return l1 - l2;}  }
class C{  private static void printUsage(){  System.err.println("Syntax:\nsummaryEvaluator [-summaryDir=summaries/] [-modelDir=models/]" + "[-nMin=#] [-nMax=#] [-dist=#] [-t=#]" + "[-s] [-use=o|d] [-progress] [-docClass=...] [-compClass=...]");  System.err.println("nMin=#\tMin n-gram size.\nnMax=#\tMax n-gram size.\n" + "dist=#\tN-gram window.\n" + "-o=outFile\tThe file to output data. Default is stdout.\n"+ "-t=#\tNumber of threads. Defaults to number of available processors declared by system.\n"+ "-s\tFor non-verbose output (silent).\n"+ "-progress\tFor progress indication (even in silent mode).\n"+ "-docClass=...\tA java class identifier to use as Document class. "+ "Defaults to jinsect.documentModel.NGramDocument \n"+ "-compClass=...\tA java class identifier to use as Comparator class. "+ "Defaults to jinsect.documentModel.StandardDocumentComparator \n"+ "-?\tShow this screen.");}  }
class C{  @Override public void processPacket(INetHandler netHandler){  channel.handle(packet);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Fall_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200361,skillname);}  }
class C{  public ActivationExporter(ActivationID id,Exporter underlyingExporter){  this(id,underlyingExporter,null);}  }
class C{  protected void prepareWriterAndWriteData(List<String> data,String columnId) throws IOException {  ColumnIdentifier columnIdentifier=new ColumnIdentifier(columnId,null,null);  CarbonDictionaryWriter carbonDictionaryWriter=new CarbonDictionaryWriterImpl(carbonStorePath,carbonTableIdentifier,columnIdentifier);  CarbonTablePath carbonTablePath=CarbonStorePath.getCarbonTablePath(carbonStorePath,carbonTableIdentifier);  CarbonUtil.checkAndCreateFolder(carbonTablePath.getMetadataDirectoryPath());  List<byte[]> valueList=convertStringListToByteArray(data);  try {    carbonDictionaryWriter.write(valueList);  }  finally {    carbonDictionaryWriter.close();    carbonDictionaryWriter.commit();  }}  }
class C{  @Override public void visit(int version,int access,String name,String signature,String superName,String[] interfaces){  visitedClassName=name;  visitedSuperName=superName;  super.visitField(Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC | Opcodes.ACC_VOLATILE| Opcodes.ACC_SYNTHETIC,"$change",getRuntimeTypeName(CHANGE_TYPE),null,null);  access=transformClassAccessForInstantRun(access);  super.visit(version,access,name,signature,superName,interfaces);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ACCUSE_DEGRADE_LEVEL(int num0){  return new SM_SYSTEM_MESSAGE(1400070,num0);}  }
class C{  public void endOfSuite() throws InterruptedException {  if (asynchronousThread == null) {    throw new IllegalStateException("Reporting thread not yet started");  }  this.keepRunning=false;  asynchronousThread.join();}  }
class C{  public void makeCurrent(EGLSurface drawSurface,EGLSurface readSurface){  if (eGLDisplay == EGL14.EGL_NO_DISPLAY) {    Log.d(TAG,"NOTE: makeCurrent w/o display");  }  if (!EGL14.eglMakeCurrent(eGLDisplay,drawSurface,readSurface,eGLContext)) {    throw new RuntimeException("eglMakeCurrent(draw,read) failed");  }}  }
class C{  public static void createTable(Database db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"BANGUMI_CALENDAR\" ("+ "\"_id\" INTEGER PRIMARY KEY ,"+ "\"NAME_CN\" TEXT NOT NULL ,"+ "\"AIR_WEEKDAY\" INTEGER NOT NULL ,"+ "\"BANGUMI_ID\" INTEGER NOT NULL ,"+ "\"BANGUMI_TOTAL\" INTEGER,"+ "\"BANGUMI_AVERAGE\" REAL,"+ "\"LARGE_IMAGE\" TEXT,"+ "\"COMMON_IMAGE\" TEXT,"+ "\"MEDIUM_IMAGE\" TEXT,"+ "\"SMALL_IMAGE\" TEXT,"+ "\"GRID_IMAGE\" TEXT,"+ "\"RANK\" INTEGER,"+ "\"NAME_JP\" TEXT);");}  }
class C{  public void addGlobalNotationDecl(XSNotationDecl decl){  fGlobalNotationDecls.put(decl.fName,decl);  decl.setNamespaceItem(this);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Poison_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200619,skillcaster,skillname);}  }
class C{  protected boolean requireRecentSdk(){  return false;}  }
class C{  public static <T>Observable<T> doWhile(ObservableSource<? extends T> source,BooleanSupplier postCondition){  ObjectHelper.requireNonNull(source,"source is null");  ObjectHelper.requireNonNull(postCondition,"postCondition is null");  return RxJavaPlugins.onAssembly(new ObservableWhileDoWhile<T>(source,AlwaysTrueBooleanSupplier.INSTANCE,postCondition));}  }
class C{  public String printConfiguration(CustomConfiguration config){  return config.toStringMultiLine(true);}  }
class C{  @Override public void buttonPressed(Component buttonExternal){  JFileChooser fc=new JFileChooser();  if (externalFileURL != null) {    String filename=externalFileURL.toExternalForm();    File currentFile=ExternalFilenames.getFile(SLDEditorFile.getInstance().getSLDData(),filename);    if (currentFile.exists()) {      fc.setCurrentDirectory(currentFile.getParentFile());    }  }  fc.addChoosableFileFilter(new ExternalGraphicFilter());  int returnVal=fc.showOpenDialog(buttonExternal);  if (returnVal == JFileChooser.APPROVE_OPTION) {    try {      externalFileURL=fc.getSelectedFile().toURI().toURL();      populateExpression(externalFileURL.toExternalForm());      UndoManager.getInstance().addUndoEvent(new UndoEvent(this,FieldIdEnum.EXTERNAL_GRAPHIC,oldValueObj,externalFileURL));      oldValueObj=externalFileURL;      if (parentObj != null) {        parentObj.externalGraphicValueUpdated();      }    } catch (    MalformedURLException e1) {      e1.printStackTrace();    }  }}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set nodeSize=");  int width=np.getInt(0,1000);  np.matchIgnoreCase(";");  if (getViewer() instanceof GraphView) {    boolean changed=false;    GraphView viewer=(GraphView)getViewer();    for (    Node v : viewer.getSelectedNodes()) {      viewer.setHeight(v,width);      viewer.setWidth(v,width);      changed=true;    }    if (changed) {      viewer.repaint();    }  }}  }
class C{  public AirMapTfrProperties(JSONObject propertiesJson){  constructFromJson(propertiesJson);}  }
class C{  private ResultPointsAndTransitions transitionsBetween(ResultPoint from,ResultPoint to){  int fromX=(int)from.getX();  int fromY=(int)from.getY();  int toX=(int)to.getX();  int toY=(int)to.getY();  boolean steep=Math.abs(toY - fromY) > Math.abs(toX - fromX);  if (steep) {    int temp=fromX;    fromX=fromY;    fromY=temp;    temp=toX;    toX=toY;    toY=temp;  }  int dx=Math.abs(toX - fromX);  int dy=Math.abs(toY - fromY);  int error=-dx / 2;  int ystep=fromY < toY ? 1 : -1;  int xstep=fromX < toX ? 1 : -1;  int transitions=0;  boolean inBlack=image.get(steep ? fromY : fromX,steep ? fromX : fromY);  for (int x=fromX, y=fromY; x != toX; x+=xstep) {    boolean isBlack=image.get(steep ? y : x,steep ? x : y);    if (isBlack != inBlack) {      transitions++;      inBlack=isBlack;    }    error+=dy;    if (error > 0) {      if (y == toY) {        break;      }      y+=ystep;      error-=dx;    }  }  return new ResultPointsAndTransitions(from,to,transitions);}  }
class C{  private final Object fromXml(final String xml,final ProcessMessageType processType) throws Exception {  StringReader sr=null;  Serializer serializer=new Persister(new AnnotationStrategy());  try {    sr=new StringReader(xml);switch (processType) {case CONNECT_REQUEST:      LOGGER.trace("fromXml() : converting from XML to ProcessConnectionRequest.");    return serializer.read(ProcessConnectionRequest.class,sr,false);case CONNECT_RESPONSE:  LOGGER.trace("fromXml() : converting from XML to ProcessConnectionResponse.");return serializer.read(ProcessConnectionResponse.class,sr,false);case CONFIG_REQUEST:LOGGER.trace("fromXml() : converting from XML to ProcessConfigurationRequest.");return serializer.read(ProcessConfigurationRequest.class,sr,false);case CONFIG_RESPONSE:LOGGER.trace("fromXml() : converting from XML to ProcessConfigurationResponse.");return serializer.read(ProcessConfigurationResponse.class,sr,false);case DISCONNETION_REQUEST:LOGGER.trace("fromXml() : converting from XML to ProcessDisconnectionRequest.");return serializer.read(ProcessDisconnectionRequest.class,sr,false);default :LOGGER.error("fromXml() : Process type not found: " + processType);throw new MessageFormatException("fromXml(): Process type not found: " + processType);}}  finally {if (sr != null) {sr.close();}}}  }
class C{  public void write(IOutputWriter writer) throws IOException {  writer.writeInt(RMA2File.MAGIC_NUMBER);  writer.writeInt(3);  writer.writeString(getFormatDef());  FormatDefinition formatDefinition=FormatDefinition.fromString(getFormatDef());  formatDefinition.startWrite();  for (  Pair<String,FormatDefinition.Type> pair : formatDefinition.getList()) {    if (pair.getFirst().equals("Creator"))     formatDefinition.write(writer,"Creator",getCreator()); else     if (pair.getFirst().equals("CreationDate"))     formatDefinition.write(writer,"CreationDate",getCreationDate());  }  formatDefinition.finishWrite();}  }
class C{  private void createLock() throws IOException {synchronized (LockableFileWriter.class) {    if (!lockFile.createNewFile()) {      throw new IOException("Can't write file, lock " + lockFile.getAbsolutePath() + " exists");    }    lockFile.deleteOnExit();  }}  }
class C{  @Override public String toString(){  return getName() + "=" + "\""+ getValue()+ "\"";}  }
class C{  public void refreshPanel(){  revalidate();  repaint();}  }
class C{  @Override public long blocksAccessed(){  return sp1.blocksAccessed() + sp2.blocksAccessed();}  }
class C{  protected void verifyContainerIsRunning(final boolean expectedState) throws Throwable {  verifyContainerProperty("State.Running",expectedState);}  }
class C{  public DuplicateAionObjectException(String message,Throwable cause){  super(message,cause);}  }
class C{  @Override public void endMerging(){  ServiceControlConfigValidator.validate(this,getModel().getServiceConfig());}  }
class C{  public ExperimentCreateEvent(UserInfo user,ExperimentBase experiment){  super(user);  if (experiment == null) {    throw new IllegalArgumentException("Experiment must not be null!");  }  this.experiment=experiment;  this.appName=experiment.getApplicationName();}  }
class C{  public Body jimplify(Body b,SootMethod m){  jBody=(JimpleBody)b;  localGenerator=new LocalGenerator(jBody);  deferredInstructions=new ArrayList<DeferableInstruction>();  instructionsToRetype=new HashSet<RetypeableInstruction>();  if (IDalvikTyper.ENABLE_DVKTYPER) {    Debug.printDbg(IDalvikTyper.DEBUG,"clear dalvik typer");    DalvikTyper.v().clear();  }  Debug.printDbg("\n[jimplify] start for: ",methodSignature);  List<Local> paramLocals=new LinkedList<Local>();  if (!isStatic) {    int thisRegister=numRegisters - numParameterRegisters - 1;    Local thisLocal=Jimple.v().newLocal("$u" + thisRegister,UnknownType.v());    jBody.getLocals().add(thisLocal);    registerLocals[thisRegister]=thisLocal;    JIdentityStmt idStmt=(JIdentityStmt)Jimple.v().newIdentityStmt(thisLocal,Jimple.v().newThisRef(declaringClassType));    add(idStmt);    paramLocals.add(thisLocal);    if (IDalvikTyper.ENABLE_DVKTYPER) {      Debug.printDbg(IDalvikTyper.DEBUG,"constraint: ",idStmt);      DalvikTyper.v().setType(idStmt.leftBox,jBody.getMethod().getDeclaringClass().getType(),false);    }  }{    int i=0;    int parameterRegister=numRegisters - numParameterRegisters;    for (    Type t : parameterTypes) {      Local gen=Jimple.v().newLocal("$u" + parameterRegister,UnknownType.v());      jBody.getLocals().add(gen);      Debug.printDbg("add local for parameter register number: ",parameterRegister);      registerLocals[parameterRegister]=gen;      JIdentityStmt idStmt=(JIdentityStmt)Jimple.v().newIdentityStmt(gen,Jimple.v().newParameterRef(t,i++));      add(idStmt);      paramLocals.add(gen);      if (IDalvikTyper.ENABLE_DVKTYPER) {        Debug.printDbg(IDalvikTyper.DEBUG,"constraint: " + idStmt);        DalvikTyper.v().setType(idStmt.leftBox,t,false);      }      if (t instanceof LongType || t instanceof DoubleType) {        parameterRegister++;        Local g=Jimple.v().newLocal("$u" + parameterRegister,UnknownType.v());        jBody.getLocals().add(g);        registerLocals[parameterRegister]=g;      }      parameterRegister++;    }  }  for (int i=0; i < (numRegisters - numParameterRegisters - (isStatic ? 0 : 1)); i++) {    Debug.printDbg("add local for register number: ",i);    registerLocals[i]=Jimple.v().newLocal("$u" + i,UnknownType.v());    jBody.getLocals().add(registerLocals[i]);  }  storeResultLocal=Jimple.v().newLocal("$u-1",UnknownType.v());  jBody.getLocals().add(storeResultLocal);  final boolean isOdex=dexFile instanceof DexBackedDexFile ? ((DexBackedDexFile)dexFile).isOdexFile() : false;  int prevLineNumber=-1;  for (  DexlibAbstractInstruction instruction : instructions) {    if (isOdex && instruction instanceof OdexInstruction)     ((OdexInstruction)instruction).deOdex(dexFile);    if (dangling != null) {      dangling.finalize(this,instruction);      dangling=null;    }    instruction.jimplify(this);    if (instruction.getLineNumber() > 0)     prevLineNumber=instruction.getLineNumber(); else {      instruction.setLineNumber(prevLineNumber);    }  }  for (  DeferableInstruction instruction : deferredInstructions) {    instruction.deferredJimplify(this);  }  if (tries != null)   addTraps();  instructions=null;  instructionAtAddress.clear();  deferredInstructions=null;  dangling=null;  tries=null;  Debug.printDbg("body before any transformation : \n",jBody);  Debug.printDbg("\nbefore splitting");  Debug.printDbg("",(Body)jBody);  getLocalSplitter().transform(jBody);  getUnreachableCodeEliminator().transform(jBody);  DeadAssignmentEliminator.v().transform(jBody);  UnusedLocalEliminator.v().transform(jBody);  DexReturnInliner.v().transform(jBody);  Debug.printDbg("\nafter splitting");  Debug.printDbg("",(Body)jBody);  for (  RetypeableInstruction i : instructionsToRetype)   i.retype(jBody);  if (IDalvikTyper.ENABLE_DVKTYPER) {    Debug.printDbg("[DalvikTyper] resolving typing constraints...");    DalvikTyper.v().assignType(jBody);    Debug.printDbg("[DalvikTyper] resolving typing constraints... done.");    jBody.validateUses();    jBody.validateValueBoxes();    Validate.validateArrays(jBody);    Debug.printDbg("\nafter Dalvik Typer");  } else {    DexNumTransformer.v().transform(jBody);    DexReturnValuePropagator.v().transform(jBody);    getCopyPopagator().transform(jBody);    DexNullThrowTransformer.v().transform(jBody);    DexNullTransformer.v().transform(jBody);    DexIfTransformer.v().transform(jBody);    DeadAssignmentEliminator.v().transform(jBody);    UnusedLocalEliminator.v().transform(jBody);    DexNullArrayRefTransformer.v().transform(jBody);    Debug.printDbg("\nafter Num and Null transformers");  }  Debug.printDbg("",(Body)jBody);  if (IDalvikTyper.ENABLE_DVKTYPER) {    for (    Local l : jBody.getLocals()) {      l.setType(UnknownType.v());    }  }  TypeAssigner.v().transform(jBody);  if (IDalvikTyper.ENABLE_DVKTYPER) {    for (    Unit u : jBody.getUnits()) {      if (u instanceof IfStmt) {        ConditionExpr expr=(ConditionExpr)((IfStmt)u).getCondition();        if (((expr instanceof EqExpr) || (expr instanceof NeExpr))) {          Value op1=expr.getOp1();          Value op2=expr.getOp2();          if (op1 instanceof Constant && op2 instanceof Local) {            Local l=(Local)op2;            Type ltype=l.getType();            if (ltype instanceof PrimType)             continue;            if (!(op1 instanceof IntConstant))             continue;            IntConstant icst=(IntConstant)op1;            int val=icst.value;            if (val != 0)             continue;            expr.setOp1(NullConstant.v());          } else           if (op1 instanceof Local && op2 instanceof Constant) {            Local l=(Local)op1;            Type ltype=l.getType();            if (ltype instanceof PrimType)             continue;            if (!(op2 instanceof IntConstant))             continue;            IntConstant icst=(IntConstant)op2;            int val=icst.value;            if (val != 0)             continue;            expr.setOp2(NullConstant.v());          } else           if (op1 instanceof Local && op2 instanceof Local) {          } else {            throw new RuntimeException("error: do not handle if: " + u);          }        }      }    }    List<ValueBox> uses=jBody.getUseBoxes();    List<ValueBox> toNullConstantify=new ArrayList<ValueBox>();    List<Local> toRemove=new ArrayList<Local>();    for (    Local l : jBody.getLocals()) {      if (l.getType() instanceof NullType) {        toRemove.add(l);        for (        ValueBox vb : uses) {          Value v=vb.getValue();          if (v == l)           toNullConstantify.add(vb);        }      }    }    for (    ValueBox vb : toNullConstantify) {      System.out.println("replace valuebox '" + vb + " with null constant");      vb.setValue(NullConstant.v());    }    for (    Local l : toRemove) {      System.out.println("removing null_type local " + l);      l.setType(RefType.v("java.lang.Object"));    }  }  LocalPacker.v().transform(jBody);  UnusedLocalEliminator.v().transform(jBody);  LocalNameStandardizer.v().transform(jBody);  Debug.printDbg("\nafter type assigner localpacker and name standardizer");  Debug.printDbg("",(Body)jBody);  TrapTightener.v().transform(jBody);  TrapMinimizer.v().transform(jBody);  Aggregator.v().transform(jBody);  ConditionalBranchFolder.v().transform(jBody);  UnreachableCodeEliminator.v().transform(jBody);  DeadAssignmentEliminator.v().transform(jBody);  UnusedLocalEliminator.v().transform(jBody);  NopEliminator.v().transform(jBody);  if (m.toString().equals("<org.apache.log4j.config.PropertySetter: void introspect()>"))   System.out.println("x");  for (  Unit u : jBody.getUnits()) {    if (u instanceof AssignStmt) {      AssignStmt ass=(AssignStmt)u;      if (ass.getRightOp() instanceof CastExpr) {        CastExpr c=(CastExpr)ass.getRightOp();        if (c.getType() instanceof NullType) {          Debug.printDbg("replacing cast to null_type by nullConstant assignment in ",u);          ass.setRightOp(NullConstant.v());        }      }    }    if (u instanceof DefinitionStmt) {      DefinitionStmt def=(DefinitionStmt)u;      if (def.getLeftOp() instanceof Local && def.getRightOp() instanceof CaughtExceptionRef) {        Type t=def.getLeftOp().getType();        if (t instanceof RefType) {          RefType rt=(RefType)t;          if (rt.getSootClass().isPhantom() && !rt.getSootClass().hasSuperclass() && !rt.getSootClass().getName().equals("java.lang.Throwable"))           rt.getSootClass().setSuperclass(Scene.v().getSootClass("java.lang.Throwable"));        }      }    }  }  Debug.printDbg("\nafter jb pack");  Debug.printDbg("",(Body)jBody);  for (  Local l : jBody.getLocals()) {    Type t=l.getType();    if (t instanceof NullType) {      Debug.printDbg("replacing null_type by java.lang.Object for local ",l);      l.setType(RefType.v("java.lang.Object"));    }  }  return jBody;}  }
class C{  public PagesGetQuery needSource(Boolean value){  return unsafeParam("need_source",value);}  }
class C{  protected ShoppingCartItem(GenericValue product,Map<String,GenericValue> additionalProductFeatureAndAppls,Map<String,Object> attributes,String prodCatalogId,ProductConfigWrapper configWrapper,Locale locale,String itemType,ShoppingCart.ShoppingCartItemGroup itemGroup,GenericValue parentProduct){  this._product=product;  this.productId=_product.getString("productId");  this._parentProduct=parentProduct;  if (parentProduct != null)   this.parentProductId=_parentProduct.getString("productId");  if (UtilValidate.isEmpty(itemType)) {    if (UtilValidate.isNotEmpty(_product.getString("productTypeId"))) {      if ("ASSET_USAGE".equals(_product.getString("productTypeId"))) {        this.itemType="RENTAL_ORDER_ITEM";      } else       if ("ASSET_USAGE_OUT_IN".equals(_product.getString("productTypeId"))) {        this.itemType="RENTAL_ORDER_ITEM";      } else {        this.itemType="PRODUCT_ORDER_ITEM";      }    } else {      this.itemType="PRODUCT_ORDER_ITEM";    }  } else {    this.itemType=itemType;  }  this.itemGroup=itemGroup;  this.prodCatalogId=prodCatalogId;  this.attributes=(attributes == null ? new HashMap<String,Object>() : attributes);  this.delegator=_product.getDelegator();  this.delegatorName=_product.getDelegator().getDelegatorName();  this.addAllProductFeatureAndAppls(additionalProductFeatureAndAppls);  this.locale=locale;  if (UtilValidate.isNotEmpty(configWrapper)) {    this.configWrapper=configWrapper;    if (UtilValidate.isEmpty(configWrapper.getConfigId())) {      ProductConfigWorker.storeProductConfigWrapper(configWrapper,getDelegator());    }  }}  }
class C{  public void onCreateApplication(Application app){  MainLoop.getInstance().onCreate();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Blind_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200277,skillname);}  }
class C{  public static <T>MaybeConsumer<T> noop(){  return (MaybeConsumer<T>)NOOP;}  }
class C{  public ItemStack(final ItemStack stack) throws IllegalArgumentException {  Validate.notNull(stack,"Cannot copy null stack");  this.type=stack.getTypeId();  this.amount=stack.getAmount();  this.durability=stack.getDurability();  this.data=stack.getData();  if (stack.hasItemMeta()) {    setItemMeta0(stack.getItemMeta(),getType0());  }}  }
class C{  public float length(){  return FastMath.sqrt(lengthSquared());}  }
class C{  private boolean isTestMode(){  return ((System.getProperty("c2mon.server.testMode")) != null && (System.getProperty("c2mon.server.testMode").equals("true")));}  }
class C{  private boolean appendFilter(){  if (isFiltering()) {    useFilteredFromEntries(filteredEntries);    return true;  }  return applyFilter();}  }
class C{  @Override public Filter createFilter(){  return new OrExtended();}  }
class C{  protected AdsGetSuggestionsQueryWithCities section(AdsGetSuggestionsSection value){  return unsafeParam("section",value);}  }
class C{  public boolean containsKey(Object key){  return indexOfKey(key) >= 0;}  }
class C{  public MediaFormat(){  mMap=new HashMap<String,Object>();}  }
class C{  static public void reversePrint(Result[] result){  for (int i=(result.length - 1); i >= 0; i--) {    System.err.println("Gen" + result[i].getGenNum() + ":   scale of "+ result[i].getScale()+ "  "+ result[i].getRemark());  }}  }
class C{  public synchronized TrueTime withSharedPreferences(Context context){  DISK_CACHE_CLIENT.enableDiskCaching(context);  return INSTANCE;}  }
class C{  private void computeDoublesForAllZoomLevels(){  int numFrames=mSoundFile.getNumFrames();  int[] frameGains=mSoundFile.getFrameGains();  double[] smoothedGains=new double[numFrames];  if (numFrames == 1) {    smoothedGains[0]=frameGains[0];  } else   if (numFrames == 2) {    smoothedGains[0]=frameGains[0];    smoothedGains[1]=frameGains[1];  } else   if (numFrames > 2) {    smoothedGains[0]=(double)((frameGains[0] / 2.0) + (frameGains[1] / 2.0));    for (int i=1; i < numFrames - 1; i++) {      smoothedGains[i]=(double)((frameGains[i - 1] / 3.0) + (frameGains[i] / 3.0) + (frameGains[i + 1] / 3.0));    }    smoothedGains[numFrames - 1]=(double)((frameGains[numFrames - 2] / 2.0) + (frameGains[numFrames - 1] / 2.0));  }  double maxGain=1.0;  for (int i=0; i < numFrames; i++) {    if (smoothedGains[i] > maxGain) {      maxGain=smoothedGains[i];    }  }  double scaleFactor=1.0;  if (maxGain > 255.0) {    scaleFactor=255 / maxGain;  }  maxGain=0;  int gainHist[]=new int[256];  for (int i=0; i < numFrames; i++) {    int smoothedGain=(int)(smoothedGains[i] * scaleFactor);    if (smoothedGain < 0)     smoothedGain=0;    if (smoothedGain > 255)     smoothedGain=255;    if (smoothedGain > maxGain)     maxGain=smoothedGain;    gainHist[smoothedGain]++;  }  double minGain=0;  int sum=0;  while (minGain < 255 && sum < numFrames / 20) {    sum+=gainHist[(int)minGain];    minGain++;  }  sum=0;  while (maxGain > 2 && sum < numFrames / 100) {    sum+=gainHist[(int)maxGain];    maxGain--;  }  if (maxGain <= 50) {    maxGain=80;  } else   if (maxGain > 50 && maxGain < 120) {    maxGain=142;  } else {    maxGain+=10;  }  double[] heights=new double[numFrames];  double range=maxGain - minGain;  for (int i=0; i < numFrames; i++) {    double value=(smoothedGains[i] * scaleFactor - minGain) / range;    if (value < 0.0)     value=0.0;    if (value > 1.0)     value=1.0;    heights[i]=value * value;  }  mNumZoomLevels=5;  mLenByZoomLevel=new int[5];  mZoomFactorByZoomLevel=new double[5];  mValuesByZoomLevel=new double[5][];  mLenByZoomLevel[0]=numFrames * 2;  System.out.println("ssnum" + numFrames);  mZoomFactorByZoomLevel[0]=2.0;  mValuesByZoomLevel[0]=new double[mLenByZoomLevel[0]];  if (numFrames > 0) {    mValuesByZoomLevel[0][0]=0.5 * heights[0];    mValuesByZoomLevel[0][1]=heights[0];  }  for (int i=1; i < numFrames; i++) {    mValuesByZoomLevel[0][2 * i]=0.5 * (heights[i - 1] + heights[i]);    mValuesByZoomLevel[0][2 * i + 1]=heights[i];  }  mLenByZoomLevel[1]=numFrames;  mValuesByZoomLevel[1]=new double[mLenByZoomLevel[1]];  mZoomFactorByZoomLevel[1]=1.0;  for (int i=0; i < mLenByZoomLevel[1]; i++) {    mValuesByZoomLevel[1][i]=heights[i];  }  for (int j=2; j < 5; j++) {    mLenByZoomLevel[j]=mLenByZoomLevel[j - 1] / 2;    mValuesByZoomLevel[j]=new double[mLenByZoomLevel[j]];    mZoomFactorByZoomLevel[j]=mZoomFactorByZoomLevel[j - 1] / 2.0;    for (int i=0; i < mLenByZoomLevel[j]; i++) {      mValuesByZoomLevel[j][i]=0.5 * (mValuesByZoomLevel[j - 1][2 * i] + mValuesByZoomLevel[j - 1][2 * i + 1]);    }  }  if (numFrames > 5000) {    mZoomLevel=3;  } else   if (numFrames > 1000) {    mZoomLevel=2;  } else   if (numFrames > 300) {    mZoomLevel=1;  } else {    mZoomLevel=0;  }  mInitialized=true;}  }
class C{  public void paint(Graphics graphics){  super.paint(graphics);  Graphics2D gc=(Graphics2D)graphics;  gc.setColor(Color.WHITE);  gc.fill(getVisibleRect());  draw(gc,null);}  }
class C{  @Override public boolean isFragmentResolved() throws XNIException {  return fIsFragmentResolved;}  }
class C{  public AuthenticatorException(String msg,Throwable nested){  super(msg,nested);}  }
class C{  public void doStart(){  try {    if (gigaSpace == null) {      initSpace();    }    super.doStart();  } catch (  Exception e) {    Log.getLog().warn("Problem initialising session ids",e);    throw new IllegalStateException(e);  }}  }
class C{  public Approximator(ApproximatorType type,double tolerance){  setup(type,tolerance);}  }
class C{  @Override public void close(){}  }
class C{  public SM_TITLE_INFO(Player player){  this.action=0;  this.titleList=player.getTitleList();}  }
class C{  private final static TypeDecl mostSpecificSuperClass(final TypeDecl t){  HashSet superTypes=new HashSet();  addSuperClasses(t,superTypes);  if (superTypes.isEmpty())   return t.typeObject();  ArrayList result=new ArrayList(superTypes.size());  result.addAll(superTypes);  greatestLowerBounds(result);  if (result.size() == 1)   return (TypeDecl)result.get(0); else   return (TypeDecl)t.typeObject();}  }
class C{  private int visitNodesRec(Node v,EdgeMap<Integer> edgeWeight){  int maxValue=0;  for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {    if (edgeWeight.get(e) == null) {      edgeWeight.set(e,visitNodesRec(e.getTarget(),edgeWeight) + 1);    }    maxValue=Math.max(maxValue,edgeWeight.get(e));  }  return maxValue;}  }
class C{  public ArithmeticMaker(MetricDictionary metricDictionary,ArithmeticPostAggregationFunction function,ColumnMapper resultSetMapper){  super(metricDictionary);  this.function=function;  this.resultSetMapper=resultSetMapper;}  }
class C{  private void runTest(String source,String docPath){  normalizer=new SourceNormalizer(diagCollector,docPath);  testOutput().println(normalizer.process(source,SimpleLocation.TOPLEVEL,element));  for (  Diag diag : diagCollector.getErrors()) {    testOutput().println(DiagUtils.getDiagToPrint(diag,true));  }}  }
class C{  public static String formatRateString(float rate){  return String.format(Locale.US,"%.2fx",rate);}  }
class C{  public boolean end(){  ByteArrayInputStream bais=new ByteArrayInputStream(outputData);  AudioInputStream ais=new AudioInputStream(bais,currentFormat,outputData.length / currentFormat.getFrameSize());  String name=baseName;  name=name + fileCount;  name=name + "." + outputType.getExtension();  File file=new File(name);  try {    AudioSystem.write(ais,outputType,file);    System.out.println("Wrote synthesized speech to " + name);  } catch (  IOException ioe) {    System.err.println("Can't write audio to " + file);    return false;  }catch (  IllegalArgumentException iae) {    System.err.println("Can't write audio type " + outputType);    return false;  }  fileCount++;  return true;}  }
class C{  public ClearCacheRequest(Cache cache,Runnable callback){  super(Method.GET,null,null);  mCache=cache;  mCallback=callback;}  }
class C{  private boolean isPrimitiveTypeWrapper(ModelImpl modelImpl){  return (modelImpl.getProperties() == null && modelImpl.getAdditionalProperties() == null) && !Strings.isNullOrEmpty(modelImpl.getType()) && !"object".equalsIgnoreCase(modelImpl.getType())&& WellKnownTypeUtils.isPrimitiveType(modelImpl.getType());}  }
class C{  public Math_Vector nor(){  double len=len();  if (len != 0) {    this.x/=len;    this.y/=len;  }  return this;}  }
class C{  private void addOptionalSpringLibs(StringBuilder classpath){  addLibs(classpath,gsLibOptional + "spring");}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public void start(String tag,String[] names,String[] values,int nattr){  tag(tag,names,values,nattr,false);}  }
class C{  @Override public void start(Map<String,String> props){  fProperties=props;}  }
class C{  public boolean isCollection(){  return myObject instanceof Map || myObject instanceof Object[] || myObject instanceof byte[];}  }
class C{  @deprecated public UScriptRun(String text){  reset(text);}  }
class C{  public static double squaredLoss(double[] x,double[] y,double w_0,double w_1){  double sum=0;  for (int j=0; j < x.length; j++) {    sum+=Math.pow((y[j] - (w_1 * x[j] + w_0)),2);  }  return sum;}  }
class C{  protected void drawFilledPath(Canvas c,Path filledPath,Drawable drawable){  if (clipPathSupported()) {    int save=c.save();    c.clipPath(filledPath);    drawable.setBounds((int)mViewPortHandler.contentLeft(),(int)mViewPortHandler.contentTop(),(int)mViewPortHandler.contentRight(),(int)mViewPortHandler.contentBottom());    drawable.draw(c);    c.restoreToCount(save);  } else {    throw new RuntimeException("Fill-drawables not (yet) supported below API level 18, " + "this code was run on API level " + Utils.getSDKInt() + ".");  }}  }
class C{  public int next(){  if (index >= bits.length)   throw new NoSuchElementException();  long k=(save & (save - 1));  long diff=save ^ k;  save=k;  int result=(diff < 0) ? 64 * index + 63 : 64 * index + lookup[(int)(diff % 67)];  if (save == 0) {    index++;    while (index < bits.length && bits[index] == 0L)     index++;    if (index < bits.length)     save=bits[index];  }  return result;}  }
class C{  public boolean isBeginningInstruction(){  if (predecessors.size() == 0) {    return false;  }  if (predecessors.first().instructionIndex == -1) {    return true;  }  return false;}  }
class C{  final boolean isEar(EarClippingVertex vertex,int n){  if (vertex.reflex)   return false;  boolean ear=true;  Vector2 a=vertex.point;  Vector2 b=vertex.next.point;  Vector2 c=vertex.prev.point;  EarClippingVertex tNode=vertex.next.next;  for (int j=0; j < n - 3; j++) {    if (tNode.reflex) {      if (this.contains(a,b,c,tNode.point)) {        ear=false;        break;      }    }    tNode=tNode.next;  }  return ear;}  }
class C{  public static void deserializeReport(IDexUnit unit,StructureInfo struInfo){  Mapping baseMapping=null;  Mapping newMapping=null;  try (ObjectInputStream inBaseMapping=new ObjectInputStream(new FileInputStream(System.getProperty("user.home") + "/Desktop/baseMapping.obj"));ObjectInputStream inNewMapping=new ObjectInputStream(new FileInputStream(System.getProperty("user.home") + "/Desktop/newMapping.obj"))){    baseMapping=(Mapping)inBaseMapping.readObject();    newMapping=(Mapping)inNewMapping.readObject();  } catch (  Exception e1) {    logger.catching(e1);    e1.printStackTrace();  }  if (baseMapping == null) {    logger.info("it is null");  }  Map<String,String> baseClassMap=baseMapping.getClassMap();  Map<String,Map<String,String>> baseMethodMap=baseMapping.getMethodMap();  Map<String,String> newClassMap=newMapping.getClassMap();  Map<String,Map<String,String>> newMethodMap=newMapping.getMethodMap();  File baseOnlyMatchFile=new File(System.getProperty("user.home") + "/Desktop","baseOnlyMatch.txt");  File newOnlyMatchFile=new File(System.getProperty("user.home") + "/Desktop","newOnlyMatch.txt");  File bothMatchFile=new File(System.getProperty("user.home") + "/Desktop","bothMatch.txt");  try (BufferedWriter writerBase=new BufferedWriter(new FileWriter(baseOnlyMatchFile));BufferedWriter writerNew=new BufferedWriter(new FileWriter(newOnlyMatchFile));BufferedWriter writerBoth=new BufferedWriter(new FileWriter(bothMatchFile))){    for (    Map.Entry<String,String> entry : baseClassMap.entrySet()) {      boolean baseFlag=false, newFlag=false, bothFlag=false;      String baseClassPath=entry.getValue();      String newClassPath=newClassMap.get(entry.getKey());      if (baseClassPath.equals("null") && newClassPath.equals("null")) {        continue;      }      if (!baseClassPath.equals("null") && !newClassPath.equals("null")) {        bothFlag=true;        if (baseClassPath.equals(newClassPath)) {          writerBoth.write(entry.getKey() + " -------> " + baseClassPath+ "\n");        } else {          writerBoth.write("base: " + entry.getKey() + " -------> "+ baseClassPath+ "\n");          writerBoth.write("new: " + entry.getKey() + " -------> "+ newClassPath+ "\n");        }      } else {        if (!baseClassPath.equals("null")) {          writerBase.write(entry.getKey() + " -------> " + baseClassPath+ "\n");          baseFlag=true;        }        if (!newClassPath.equals("null")) {          writerNew.write(entry.getKey() + " -------> " + newClassPath+ "\n");          newFlag=true;        }      }      Map<String,String> baseMMap=baseMethodMap.get(entry.getKey());      Map<String,String> newMMap=newMethodMap.get(entry.getKey());      if (bothFlag) {        for (        Map.Entry<String,String> entry1 : baseMMap.entrySet()) {          String baseMPath=entry1.getValue();          String newMPath=newMMap.get(entry1.getKey());          if (baseMPath.equals("null") && newMPath.equals("null")) {            continue;          }          if (baseMPath.equals(newMPath)) {            writerBoth.write("\torg: " + entry1.getKey() + "\n");            writerBoth.write("\tmat: " + baseMPath + "\n");          } else {            writerBoth.write("\t*[base]org: " + entry1.getKey() + "\n");            writerBoth.write("\t*[base]mat: " + baseMPath + "\n");            writerBoth.write("\t*[new]org: " + entry1.getKey() + "\n");            writerBoth.write("\t*[new]mat: " + newMPath + "\n");          }        }      }      if (baseFlag) {        for (        Map.Entry<String,String> entry1 : baseMMap.entrySet()) {          String baseMPath=entry1.getValue();          if (baseMPath.equals("null")) {            continue;          }          writerBase.write("\torg: " + entry1.getKey() + "\n");          writerBase.write("\tmat: " + baseMPath + "\n");        }      }      if (newFlag) {        for (        Map.Entry<String,String> entry1 : newMMap.entrySet()) {          String newMPath=newMMap.get(entry1.getKey());          if (newMPath.equals("null")) {            continue;          }          writerNew.write("\torg: " + entry1.getKey() + "\n");          writerNew.write("\tmat: " + newMPath + "\n");        }      }    }  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  @Override public void startGroup(Augmentations augs) throws XNIException {  fDepth++;  initializeContentModelStack();  fMixed=false;}  }
class C{  private void checkDimensionsEquality(final int d1,final int d2) throws MathIllegalArgumentException {  if (d1 != d2) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,d2,d1);  }}  }
class C{  public boolean isApplicable(){  AlignmentViewer viewer=(AlignmentViewer)getViewer();  return viewer.getAlignment().getNumberOfSequences() > 0 && viewer.getSelectedBlock().isSelected() && viewer.getSelectedBlock().getLastRow() < viewer.getAlignment().getNumberOfSequences() - 1;}  }
class C{  public static List<UserLayer> extractUserLayers(StyledLayerDescriptor sld){  List<UserLayer> userLayerList=new ArrayList<UserLayer>();  if (sld != null) {    for (    StyledLayer layer : sld.layers()) {      if (layer instanceof UserLayer) {        UserLayer userLayer=(UserLayer)layer;        userLayerList.add(userLayer);      }    }  }  return userLayerList;}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  journalWriter.flush();}  }
class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Heal_Instant_HEAL_ME_TO_SELF(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200370,num0,skillname);}  }
class C{  public static void checkSymmetric(RealMatrix matrix,double eps){  isSymmetricInternal(matrix,eps,true);}  }
class C{  public static void shutdown(){  LRMIRuntime.getRuntime().shutdown();  ClassLoaderCache.getCache().shutdown();}  }
class C{  public void init$Children(){}  }
class C{  public SyncHttpClient(int httpPort){  super(false,httpPort,443);}  }
class C{  private void confirmDelete(Project project,int position){  Bundle extras=new Bundle();  extras.putString(ARG_DELETE_PROJECT_ID,project.getProjectId());  extras.putInt(ARG_DELETE_PROJECT_POSITION,position);  DeleteMetadataItemDialog dialog=DeleteMetadataItemDialog.newInstance(R.string.delete_project_dialog_title,R.string.delete_project_dialog_message,extras);  dialog.show(getChildFragmentManager(),DeleteMetadataItemDialog.TAG);  if (mUndoSnackbar != null) {    mUndoSnackbar.dismiss();  }}  }
class C{  public void previous(){  goToPage(getRowCount(),getCurrentPage() - 1);}  }
class C{  public int addItemToEnd(String productId,BigDecimal amount,BigDecimal quantity,BigDecimal unitPrice,Timestamp reservStart,BigDecimal reservLength,BigDecimal reservPersons,HashMap<String,GenericValue> features,HashMap<String,Object> attributes,String prodCatalogId,String itemType,LocalDispatcher dispatcher,Boolean triggerExternalOps,Boolean triggerPriceRules,Boolean skipInventoryChecks,Boolean skipProductChecks) throws CartItemModifyException, ItemNotFoundException {  return addItemToEnd(ShoppingCartItem.makeItem(null,productId,amount,quantity,unitPrice,reservStart,reservLength,reservPersons,null,null,features,attributes,prodCatalogId,null,itemType,null,dispatcher,this,triggerExternalOps,triggerPriceRules,null,skipInventoryChecks,skipProductChecks));}  }
class C{  public String encodeRootCertificateAsPem(){  return securityProviderTool.encodeCertificateAsPem(generatedCertificateAndKey.get().getCertificate());}  }
class C{  public static final void shuffle(float[] a,Random r){  shuffle(a,0,a.length,r);}  }
class C{  public Map.Entry<K,V> floorEntry(K key){  return getNear(key,LT | EQ);}  }
class C{  private static void addAndroidLibrary(@NotNull AndroidLibrary library,@NotNull DependencySet dependencies,@NotNull DependencyScope scope,@NotNull Set<File> unique,boolean supportsDependencyGraph){  File folder=library.getFolder();  if (unique.contains(folder)) {    return;  }  unique.add(folder);  ModuleDependency mainDependency=null;  String gradleProjectPath=library.getProject();  if (isNotEmpty(gradleProjectPath)) {    mainDependency=addAndroidModule(library,gradleProjectPath,dependencies,scope,unique,supportsDependencyGraph);  }  if (mainDependency == null) {    dependencies.add(createLibraryDependency(library,scope));    addTransitiveDependencies(library,dependencies,scope,unique,supportsDependencyGraph);  } else {    LibraryDependency backup=createLibraryDependency(library,scope);    mainDependency.setBackupDependency(backup);  }}  }
class C{  public AsyncWebServiceRequestHandler(DruidWebService druidWebService,ObjectMapper mapper){  super(mapper);  this.druidWebService=druidWebService;}  }
class C{  @Override public Node cloneNode(boolean deep){  CoreDocumentImpl newdoc=new CoreDocumentImpl();  callUserDataHandlers(this,newdoc,UserDataHandler.NODE_CLONED);  cloneNode(newdoc,deep);  return newdoc;}  }
class C{  private void processDataTag(final SourceDataTagValue sourceDataTagValue){  try {    if (LOGGER.isTraceEnabled()) {      LOGGER.trace("Processing incoming update for datatag #" + sourceDataTagValue.getId());    }    dataTagFacade.updateFromSource(sourceDataTagValue.getId(),sourceDataTagValue);  } catch (  CacheElementNotFoundException cacheEx) {    LOGGER.warn("Received unrecognized data tag #" + sourceDataTagValue.getId() + ": ignoring the update");  }}  }
class C{  public PhotosCreateCommentQuery accessKey(String value){  return unsafeParam("access_key",value);}  }
class C{  private void ensureDependenciesResolved(){  ClassLoader ldr=getClass().getClassLoader();  if (ldr == null) {    ldr=ClassLoader.getSystemClassLoader();  }  trustGetContextClassLoader0(Thread.class);  getContextClassLoader();synchronized (subPolicies) {    lookupSubPolicy(ldr);  }}  }
class C{  public static String updateAssociatedDistributor(HttpServletRequest request,HttpServletResponse response){  Delegator delegator=(Delegator)request.getAttribute("delegator");  GenericValue userLogin=(GenericValue)request.getSession().getAttribute("userLogin");  GenericValue party=null;  java.net.URL shopPropertiesUrl=null;  try {    shopPropertiesUrl=((ServletContext)request.getAttribute("servletContext")).getResource("/WEB-INF/shop.properties");  } catch (  java.net.MalformedURLException e) {    Debug.logWarning(e,module);  }  String store=UtilProperties.getPropertyValue(shopPropertiesUrl,"distributor.store.customer");  if (store == null || store.toUpperCase().startsWith("N")) {    return "success";  }  String storeOnClick=UtilProperties.getPropertyValue(shopPropertiesUrl,"distributor.store.onclick");  if (storeOnClick == null || storeOnClick.toUpperCase().startsWith("N")) {    return "success";  }  try {    party=userLogin == null ? null : userLogin.getRelatedOne("Party",false);  } catch (  GenericEntityException gee) {    Debug.logWarning(gee,module);  }  if (party != null) {    String currentDistributorId=getId(party,"DISTRIBUTOR");    if (UtilValidate.isEmpty(currentDistributorId)) {      String distributorId=(String)request.getSession().getAttribute(DISTRIBUTOR_ID);      if (UtilValidate.isNotEmpty(distributorId)) {        List<GenericValue> toBeStored=new LinkedList<GenericValue>();        GenericValue partyRelationship=delegator.makeValue("PartyRelationship",UtilMisc.toMap("partyIdFrom",party.getString("partyId"),"partyIdTo",distributorId,"roleTypeIdFrom","CUSTOMER","roleTypeIdTo","DISTRIBUTOR"));        partyRelationship.set("fromDate",UtilDateTime.nowTimestamp());        partyRelationship.set("partyRelationshipTypeId","DISTRIBUTION_CHANNEL");        toBeStored.add(partyRelationship);        toBeStored.add(delegator.makeValue("Party",UtilMisc.toMap("partyId",distributorId)));        toBeStored.add(delegator.makeValue("PartyRole",UtilMisc.toMap("partyId",distributorId,"roleTypeId","DISTRIBUTOR")));        try {          delegator.storeAll(toBeStored);          if (Debug.infoOn())           Debug.logInfo("Distributor for user " + party.getString("partyId") + " set to "+ distributorId,module);        } catch (        GenericEntityException gee) {          Debug.logWarning(gee,module);        }      } else {        Debug.logInfo("No distributor in session or already associated with user " + userLogin.getString("partyId"),module);        return "success";      }    } else {      request.getSession().setAttribute(DISTRIBUTOR_ID,currentDistributorId);    }    return "success";  } else {    Debug.logWarning("Cannot associate distributor since not logged in yet",module);    return "success";  }}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  public static void resetRequestVars(HttpServletRequest request,Map<String,Object> context,Environment env) throws TemplateModelException {  RequestVarMapWrapper mapWrapper=new RequestVarMapWrapper();  if (request != null) {    request.setAttribute(ContextFtlUtil.REQUEST_VAR_MAP_NAME_REQATTRIBS,mapWrapper);  }  Map<String,Object> globalContext=getGlobalContext(context,env);  if (globalContext != null) {    globalContext.put(ContextFtlUtil.REQUEST_VAR_MAP_NAME_GLOBALCONTEXT,mapWrapper);  }  if (env != null) {    env.setGlobalVariable(ContextFtlUtil.REQUEST_VAR_MAP_NAME_FTLGLOBALS,new RequestVarMapWrapperModel(mapWrapper.getRawMap()));  }}  }
class C{  public void remove(RequestFilter filter){  filters.remove(filter);}  }
class C{  public TokenizerImpl(Reader file){  setInputReader(file);}  }
class C{  public void addColumn(String name,Class type,Object defaultValue){  if (m_locked) {    throw new IllegalStateException("Can not add column to a locked Schema.");  }  if (name == null) {    throw new IllegalArgumentException("Null column names are not allowed.");  }  if (type == null) {    throw new IllegalArgumentException("Null column types are not allowed.");  }  for (int i=0; i < m_size; ++i) {    if (m_names[i].equals(name)) {      throw new IllegalArgumentException("Duplicate column names are not allowed: " + m_names[i]);    }  }  if (m_names.length == m_size) {    int capacity=(3 * m_names.length) / 2 + 1;    String[] names=new String[capacity];    Class[] types=new Class[capacity];    Object[] dflts=new Object[capacity];    System.arraycopy(m_names,0,names,0,m_size);    System.arraycopy(m_types,0,types,0,m_size);    System.arraycopy(m_dflts,0,dflts,0,m_size);    m_names=names;    m_types=types;    m_dflts=dflts;  }  m_names[m_size]=name;  m_types[m_size]=type;  m_dflts[m_size]=defaultValue;  if (m_lookup != null)   m_lookup.put(name,new Integer(m_size));  ++m_size;}  }
class C{  public static synchronized void checkAuth(SessionKey key,GsConnection gsConnection){  LoginConnection con=accountsOnLS.get(key.accountId);  if (con != null && con.getSessionKey().checkSessionKey(key)) {    accountsOnLS.remove(key.accountId);    GameServerInfo gsi=gsConnection.getGameServerInfo();    Account acc=con.getAccount();    gsi.addAccountToGameServer(acc);    acc.setLastServer(gsi.getId());    getAccountDAO().updateLastServer(acc.getId(),acc.getLastServer());    long toll=DAOManager.getDAO(PremiumDAO.class).getPoints(acc.getId());    gsConnection.sendPacket(new SM_ACCOUNT_AUTH_RESPONSE(key.accountId,true,acc.getName(),acc.getAccessLevel(),acc.getMembership(),toll));  } else {    gsConnection.sendPacket(new SM_ACCOUNT_AUTH_RESPONSE(key.accountId,false,null,(byte)0,(byte)0,0));  }}  }
class C{  public void merge(DocumentNGramGraph dgOtherObject,double fWeightPercent){  mergeGraph(dgOtherObject,fWeightPercent);}  }
class C{  public void parse(byte[] aLine,int length) throws IOException {  int numberOfTokens=0;  int start=0;  while (start < length) {    int end=start;    while (aLine[end] != '\t' && end < length)     end++;    if (numberOfTokens == tokens.length) {      String[] tmp=new String[2 * tokens.length];      System.arraycopy(tokens,0,tmp,0,tokens.length);      tokens=tmp;    }    tokens[numberOfTokens++]=Basic.toString(aLine,start,end - start);    start=end + 1;  }  parse(tokens,numberOfTokens);}  }
class C{  public ContextStack(){  deque=new ArrayDeque<>();}  }
class C{  private void sendCharactersToSchemaParser(String str,boolean whitespace){  if (str != null) {    final int length=str.length();    final int remainder=length & CHUNK_MASK;    if (remainder > 0) {      str.getChars(0,remainder,fCharBuffer,0);      fTempString.setValues(fCharBuffer,0,remainder);      if (whitespace) {        fSchemaDOMParser.ignorableWhitespace(fTempString,null);      } else {        fSchemaDOMParser.characters(fTempString,null);      }    }    int i=remainder;    while (i < length) {      str.getChars(i,i+=CHUNK_SIZE,fCharBuffer,0);      fTempString.setValues(fCharBuffer,0,CHUNK_SIZE);      if (whitespace) {        fSchemaDOMParser.ignorableWhitespace(fTempString,null);      } else {        fSchemaDOMParser.characters(fTempString,null);      }    }  }}  }
class C{  synchronized void releaseValidator(String schemaType,String xmlVersion,RevalidationHandler validator){  if (schemaType == XMLGrammarDescription.XML_SCHEMA) {    ++freeSchemaValidatorIndex;    if (schemaValidators.length == freeSchemaValidatorIndex) {      schemaValidatorsCurrentSize+=SIZE;      SoftReference newarray[]=new SoftReference[schemaValidatorsCurrentSize];      System.arraycopy(schemaValidators,0,newarray,0,schemaValidators.length);      schemaValidators=newarray;    }    SoftReference ref=schemaValidators[freeSchemaValidatorIndex];    if (ref != null) {      RevalidationHandlerHolder holder=(RevalidationHandlerHolder)ref.get();      if (holder != null) {        holder.handler=validator;        return;      }    }    schemaValidators[freeSchemaValidatorIndex]=new SoftReference(new RevalidationHandlerHolder(validator));  } else   if (schemaType == XMLGrammarDescription.XML_DTD) {    if ("1.1".equals(xmlVersion)) {      ++freeXML11DTDValidatorIndex;      if (xml11DTDValidators.length == freeXML11DTDValidatorIndex) {        xml11DTDValidatorsCurrentSize+=SIZE;        SoftReference[] newarray=new SoftReference[xml11DTDValidatorsCurrentSize];        System.arraycopy(xml11DTDValidators,0,newarray,0,xml11DTDValidators.length);        xml11DTDValidators=newarray;      }      SoftReference ref=xml11DTDValidators[freeXML11DTDValidatorIndex];      if (ref != null) {        RevalidationHandlerHolder holder=(RevalidationHandlerHolder)ref.get();        if (holder != null) {          holder.handler=validator;          return;        }      }      xml11DTDValidators[freeXML11DTDValidatorIndex]=new SoftReference(new RevalidationHandlerHolder(validator));    } else {      ++freeXML10DTDValidatorIndex;      if (xml10DTDValidators.length == freeXML10DTDValidatorIndex) {        xml10DTDValidatorsCurrentSize+=SIZE;        SoftReference[] newarray=new SoftReference[xml10DTDValidatorsCurrentSize];        System.arraycopy(xml10DTDValidators,0,newarray,0,xml10DTDValidators.length);        xml10DTDValidators=newarray;      }      SoftReference ref=xml10DTDValidators[freeXML10DTDValidatorIndex];      if (ref != null) {        RevalidationHandlerHolder holder=(RevalidationHandlerHolder)ref.get();        if (holder != null) {          holder.handler=validator;          return;        }      }      xml10DTDValidators[freeXML10DTDValidatorIndex]=new SoftReference(new RevalidationHandlerHolder(validator));    }  }}  }
class C{  @Override public Filter createFilter(){  return new TouchesExtended();}  }
class C{  public static IOCase forName(String name){  if (IOCase.SENSITIVE.name.equals(name)) {    return IOCase.SENSITIVE;  }  if (IOCase.INSENSITIVE.name.equals(name)) {    return IOCase.INSENSITIVE;  }  if (IOCase.SYSTEM.name.equals(name)) {    return IOCase.SYSTEM;  }  throw new IllegalArgumentException("Invalid IOCase name: " + name);}  }
class C{  public void performQuery() throws IOException, PIRException {  logger.info("Performing query: ");  JavaRDD<MapWritable> inputRDD;switch (dataInputFormat) {case InputFormatConst.BASE_FORMAT:    inputRDD=readData();  break;case InputFormatConst.ES:inputRDD=readDataES();break;default :throw new PIRException("Unknown data input format " + dataInputFormat);}performQuery(inputRDD);}  }
class C{  @NotNull public DescribeImageAction describeImage(int maxCandidates,@NotNull InputStream image){  return new DescribeImageAction(cognitiveContext,maxCandidates,image);}  }
class C{  private void createUI(Class<?> panelDetails,String configFile){  PrefManager.getInstance().addVendorOptionListener(this);  createVendorOptionPanel();  readConfigFile(vendorOptionFillFactory,this,configFile);  symbolTypeFactory.populate(this,panelDetails,fieldConfigManager);}  }
class C{  @Override boolean shouldImportAsCurrentTranslation(Long tmTextUnitId){  TranslationKitExportedImportedAndCurrentTUV translationKitExportedAndCurrentTUV=translationKitExportedAndCurrentTUVs.get(tmTextUnitId);  boolean isTKReimport=Objects.equals(translationKitExportedAndCurrentTUV.getCurrentTmTextUnitVariant(),translationKitExportedAndCurrentTUV.getImportedTmTextUnitVariant());  boolean noExternalTranslationAdded=Objects.equals(translationKitExportedAndCurrentTUV.getCurrentTmTextUnitVariant(),translationKitExportedAndCurrentTUV.getExportedTmTextUnitVariant());  return isTKReimport || noExternalTranslationAdded;}  }
class C{  protected boolean writeAttributes(DataOutputStream dd,int attributes_count,attribute_info[] ai) throws IOException {  attribute_info a=null;  int i;  for (i=0; i < attributes_count; i++) {    a=ai[i];    dd.writeShort(a.attribute_name);    dd.writeInt((int)a.attribute_length);    if (a instanceof SourceFile_attribute) {      SourceFile_attribute sa=(SourceFile_attribute)a;      dd.writeShort(sa.sourcefile_index);    } else     if (a instanceof ConstantValue_attribute) {      ConstantValue_attribute ca=(ConstantValue_attribute)a;      dd.writeShort(ca.constantvalue_index);    } else     if (a instanceof Code_attribute) {      Code_attribute ca=(Code_attribute)a;      dd.writeShort(ca.max_stack);      dd.writeShort(ca.max_locals);      dd.writeInt((int)ca.code_length);      dd.write(ca.code,0,(int)ca.code_length);      dd.writeShort(ca.exception_table_length);      int k;      exception_table_entry e;      for (k=0; k < ca.exception_table_length; k++) {        e=ca.exception_table[k];        dd.writeShort(e.start_pc);        dd.writeShort(e.end_pc);        dd.writeShort(e.handler_pc);        dd.writeShort(e.catch_type);      }      dd.writeShort(ca.attributes_count);      if (ca.attributes_count > 0)       writeAttributes(dd,ca.attributes_count,ca.attributes);    } else     if (a instanceof Exception_attribute) {      Exception_attribute ea=(Exception_attribute)a;      dd.writeShort(ea.number_of_exceptions);      if (ea.number_of_exceptions > 0) {        int k;        for (k=0; k < ea.number_of_exceptions; k++)         dd.writeShort(ea.exception_index_table[k]);      }    } else     if (a instanceof LineNumberTable_attribute) {      LineNumberTable_attribute la=(LineNumberTable_attribute)a;      dd.writeShort(la.line_number_table_length);      int k;      line_number_table_entry e;      for (k=0; k < la.line_number_table_length; k++) {        e=la.line_number_table[k];        dd.writeShort(e.start_pc);        dd.writeShort(e.line_number);      }    } else     if (a instanceof LocalVariableTable_attribute) {      LocalVariableTable_attribute la=(LocalVariableTable_attribute)a;      dd.writeShort(la.local_variable_table_length);      int k;      local_variable_table_entry e;      for (k=0; k < la.local_variable_table_length; k++) {        e=la.local_variable_table[k];        dd.writeShort(e.start_pc);        dd.writeShort(e.length);        dd.writeShort(e.name_index);        dd.writeShort(e.descriptor_index);        dd.writeShort(e.index);      }    } else {      G.v().out.println("Generic/Unknown Attribute in output");      Generic_attribute ga=(Generic_attribute)a;      if (ga.attribute_length > 0) {        dd.write(ga.info,0,(int)ga.attribute_length);      }    }  }  return true;}  }
class C{  @Override public boolean checkCanSwipeBack(int dir){  return view.checkCanSwipeBack(dir);}  }
class C{  public RetriableException(String msg){  this(msg,null);}  }
class C{  static Iterable<Enum> createAdditionalServiceEnums(){  String fileName="struct.proto";  List<Enum> additionalEnums=Lists.newArrayList();  additionalEnums.add(TypesBuilderFromDescriptor.createEnum(NullValue.getDescriptor().getFullName(),NullValue.getDescriptor().toProto(),fileName));  return additionalEnums;}  }
class C{  public IntDataType(int i){  this.i=i;}  }
class C{  public static String makeTag(Class<?> cls,@IdRes int viewId){  return cls.getName() + ":" + viewId;}  }
class C{  public CholeskyDecomposition chol(){  return new CholeskyDecomposition(this);}  }
class C{  public static boolean validationOn(){  return !"none".equals(UtilProperties.getPropertyValue("minilang.properties","validation.level"));}  }
class C{  public static void putStringSet(String key,Set<String> values){  prefs.edit().putStringSet(key,values).commit();}  }
class C{  public int code(){  return code;}  }
class C{  public static int exportName2ReadNames(String format,ViewerBase cViewer,File file,char separator,ProgressListener progressListener) throws IOException {  int totalLines=0;  try {    final Classification classification=ClassificationManager.get(cViewer.getClassName(),true);    final String shortName=(cViewer.getClassName().toLowerCase().equals("taxonomy") ? "Taxon" : cViewer.getClassName());    try (BufferedWriter w=new BufferedWriter(new FileWriter(file))){      IConnector connector=cViewer.getDocument().getConnector();      java.util.Collection<Integer> ids=cViewer.getSelectedIds();      progressListener.setSubtask(shortName + " to read names");      progressListener.setMaximum(ids.size());      progressListener.setProgress(0);      final IClassificationBlock classificationBlock=connector.getClassificationBlock(cViewer.getClassName());      if (classificationBlock != null) {        for (        int classId : ids) {          final Set<Integer> allBelow;          Node v=classification.getFullTree().getANode(classId);          if (v.getOutDegree() > 0)           allBelow=classification.getFullTree().getAllDescendants(classId); else {            allBelow=new HashSet<>();            allBelow.add(classId);          }          boolean hasSome=false;          for (          int id : allBelow) {            if (classificationBlock.getSum(id) > 0) {              if (!hasSome) {                w.write(getLabelSource(shortName,classification,format,v));                hasSome=true;              }              try (IReadBlockIterator it=connector.getReadsIterator(cViewer.getClassName(),id,0,10000,true,false)){                while (it.hasNext()) {                  String readId=it.next().getReadName();                  w.write(separator + " " + readId);                }              }               progressListener.checkForCancel();            }          }          if (hasSome) {            w.write("\n");            totalLines++;          }          progressListener.incrementProgress();        }      }    }   } catch (  CanceledException canceled) {    System.err.println("USER CANCELED");  }  return totalLines;}  }
class C{  private static boolean possiblyValidStringLiteral(PsiElement element){  if (element instanceof StringLiteral) {    return true;  }  if (element instanceof LiteralExpression) {    return false;  }  if (element instanceof LoadStatement || element instanceof FunctionStatement || element instanceof GlobExpression) {    return false;  }  return true;}  }
class C{  private Set<String> loadAndroidCallbacks() throws IOException {  Set<String> androidCallbacks=new HashSet<String>();  BufferedReader rdr=null;  try {    String fileName=JadeCfg.getCallback_file();    if (!new File(fileName).exists()) {      fileName="../soot-infoflow-android/AndroidCallbacks.txt";      if (!new File(fileName).exists())       throw new RuntimeException("Callback definition file not found");    }    rdr=new BufferedReader(new FileReader(fileName));    String line;    while ((line=rdr.readLine()) != null)     if (!line.isEmpty())     androidCallbacks.add(line);  }  finally {    if (rdr != null)     rdr.close();  }  return androidCallbacks;}  }
class C{  private void initModel(Activity a,int type){  this.photosModel=new PhotosObject(a,type);  this.loadModel=new LoadObject(LoadObject.LOADING_STATE);  this.scrollModel=new ScrollObject();}  }
class C{  @Override public synchronized void clear(){  File[] files=mRootDirectory.listFiles();  if (files != null) {    for (    File file : files) {      file.delete();    }  }  mEntries.clear();  mTotalSize=0;  VolleyLog.d("Cache cleared.");}  }
class C{  public static CommandResult execCommand(String command,boolean isRoot){  return execCommand(new String[]{command},isRoot,true);}  }
class C{  TestItem awareTestItemIssueTypeFromStatus(final TestItem testItem,final Issue providedIssue,final Project project){  if (FAILED.equals(testItem.getStatus()) || SKIPPED.equals(testItem.getStatus())) {    if (null != providedIssue) {      verifyIssue(testItem.getId(),providedIssue,project.getConfiguration());      String issueType=providedIssue.getIssueType();      if (!issueType.equalsIgnoreCase(NOT_ISSUE_FLAG.getValue())) {        testItem.setIssue(new TestItemIssue(project.getConfiguration().getByLocator(issueType).getLocator(),providedIssue.getComment()));      }    } else {      testItem.setIssue(new TestItemIssue());      Launch launch=launchRepository.findOne(testItem.getLaunchRef());      expect(launch,notNull()).verify(LAUNCH_NOT_FOUND,testItem.getLaunchRef());      if (Mode.DEFAULT.equals(launch.getMode()) && project.getConfiguration().getIsAutoAnalyzerEnabled())       finalizeFailed(testItem);    }  }  return testItem;}  }
class C{  public void Notify(Object oSender,Object oParams){  double dProgress=((Double)oParams).doubleValue();  System.err.print("Comparison " + String.format("%4.2f%%",dProgress) + "\r");}  }
class C{  public SortPlan(Plan p,List<String> sortFields,List<Integer> sortDirs,Transaction tx){  this.p=p;  comp=new RecordComparator(sortFields,sortDirs);  this.sortFlds=sortFields;  this.sortDirs=sortDirs;  this.tx=tx;  schema=p.schema();}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  void read(BlockId blk,IoBuffer buffer){  try {    IoChannel fileChannel=getFileChannel(blk.fileName());    buffer.clear();    fileChannel.read(buffer,blk.number() * BLOCK_SIZE);  } catch (  IOException e) {    e.printStackTrace();    throw new RuntimeException("cannot read block " + blk);  }}  }
class C{  public static boolean isRootModuleWithNoSources(@NotNull Module module){  if (ModuleRootManager.getInstance(module).getSourceRoots().length == 0) {    String gradlePath=getGradlePath(module);    if (gradlePath == null || gradlePath.equals(":")) {      return true;    }  }  return false;}  }
class C{  public static String toUTF8(String sStr){  byte[] baBytes=sStr.getBytes();  try {    return new String(baBytes,"UTF-8");  } catch (  Exception e) {    e.printStackTrace();    return new String(baBytes);  }}  }
class C{  public StyleWrapper(){}  }
class C{  public static String formatCreateDate(String createDate){  String result="";  if (!TextUtils.isEmpty(createDate) && createDate.length() >= 10) {    result=createDate.substring(0,10);  }  return result;}  }
class C{  public DataFrame createDataFrame(List<String> taggedSentences){  List<String> wordSequences=new LinkedList<String>();  List<String> tagSequences=new LinkedList<String>();  for (  String taggedSentence : taggedSentences) {    StringBuilder wordBuf=new StringBuilder();    StringBuilder tagBuf=new StringBuilder();    String[] tokens=taggedSentence.split("\\s+");    for (    String token : tokens) {      String[] parts=token.split("/");      if (parts.length == 2) {        wordBuf.append(parts[0]);        wordBuf.append(' ');        tagBuf.append(parts[1]);        tagBuf.append(' ');      } else {        wordBuf.append('/');        wordBuf.append(' ');        tagBuf.append('/');        tagBuf.append(' ');      }    }    wordSequences.add(wordBuf.toString().trim());    tagSequences.add(tagBuf.toString().trim());  }  if (verbose) {    System.out.println("Number of sentences = " + wordSequences.size());  }  List<Row> rows=new LinkedList<Row>();  for (int i=0; i < wordSequences.size(); i++) {    rows.add(RowFactory.create(wordSequences.get(i),tagSequences.get(i)));  }  JavaRDD<Row> jrdd=jsc.parallelize(rows);  StructType schema=new StructType(new StructField[]{new StructField("sentence",DataTypes.StringType,false,Metadata.empty()),new StructField("partOfSpeech",DataTypes.StringType,false,Metadata.empty())});  return new SQLContext(jsc).createDataFrame(jrdd,schema);}  }
class C{  public void mouseMoved(MouseEvent e){  mIsControlDown=e.isControlDown();  mIsShiftDown=e.isShiftDown();  mIsAltDown=e.isAltDown();  float x=mViewTransform.getAndroidFX(e.getX());  float y=mViewTransform.getAndroidFY(e.getY());  mouseMoved(x,y);}  }
class C{  void jimpleTargetFixup(){  BasicBlock b;  BBQ bbq=new BBQ();  Code_attribute c=method.locate_code_attribute();  if (c == null)   return;{    BasicBlock bb=cfg;    while (bb != null) {      bb.done=true;      bb=bb.next;    }  }  bbq.push(cfg);  processTargetFixup(bbq);  if (bbq.isEmpty()) {    int i;    for (i=0; i < c.exception_table_length; i++) {      b=c.exception_table[i].b;      if (b != null && b.done) {        bbq.push(b);        processTargetFixup(bbq);        if (!bbq.isEmpty()) {          G.v().out.println("Error 2nd processing exception block.");          break;        }      }    }  }}  }
class C{  private void findRepeatedDataItems(){  for (  JsTreeDataItem dataItem : this) {    Integer timesRepeated=0;    if (hasTreeDataItem(dataItem)) {      if (sameIdDataItemsMap.containsKey(dataItem.getOriginalId()))       timesRepeated=sameIdDataItemsMap.get(dataItem.getOriginalId());      timesRepeated++;      sameIdDataItemsMap.put(dataItem.getOriginalId(),timesRepeated);    }  }}  }
class C{  public NoBracketingException(Localizable specific,double lo,double hi,double fLo,double fHi,Object... args){  super(specific,Double.valueOf(lo),Double.valueOf(hi),Double.valueOf(fLo),Double.valueOf(fHi),args);  this.lo=lo;  this.hi=hi;  this.fLo=fLo;  this.fHi=fHi;}  }
class C{  public float[] toArray(float[] floats){  if (floats == null) {    floats=new float[3];  }  floats[0]=x;  floats[1]=y;  floats[2]=z;  return floats;}  }
class C{  public boolean isCDataElement(String tagName){  int i;  if (_cdataElements == null)   return false;  for (i=0; i < _cdataElements.length; ++i)   if (_cdataElements[i].equals(tagName))   return true;  return false;}  }
class C{  public CreateSiteWindow selectLanguages(List<String> languages){  clickLanguageCheckBox("English (United Kingdom)");  languages.forEach(null);  return this;}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length != 2) {    System.err.println("Usage: java " + VocalTractLinearScalerEffect.class.getName() + " <factor> <filename>");    System.exit(1);  }  float factor=Float.parseFloat(args[0]);  String filename=args[1];  AudioDoubleDataSource input=new AudioDoubleDataSource(AudioSystem.getAudioInputStream(new File(filename)));  AudioFormat format=input.getAudioFormat();  VocalTractLinearScalerEffect effect=new VocalTractLinearScalerEffect((int)format.getSampleRate());  DoubleDataSource output=effect.apply(input,"amount:" + factor);  DDSAudioInputStream audioOut=new DDSAudioInputStream(output,format);  String outFilename=FilenameUtils.removeExtension(filename) + "_" + factor+ ".wav";  AudioSystem.write(audioOut,AudioFileFormat.Type.WAVE,new File(outFilename));  System.out.println("Created file " + outFilename);}  }
class C{  public static double parseDouble(byte[] bytes,int start,int length) throws NumberFormatException {  if (length == 0) {    throw new NumberFormatException("cannot parse empty string as double");  }  int end=start + length;  int i=start;  char c=(char)bytes[i];  if (c == 'N') {    if (match("NaN",bytes,i,end)) {      return Double.NaN;    } else {      throw newNumberFormatException("cannot parse string as double",bytes,start,length);    }  }  double sigNum;  if (c == '-') {    sigNum=-1D;    i++;    c=(char)bytes[i];  } else   if (c == '+') {    sigNum=1D;    i++;    c=(char)bytes[i];  } else {    sigNum=1D;  }  if (c == 'I') {    if (match("Infinity",bytes,i,end)) {      return sigNum == -1 ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;    } else {      throw newNumberFormatException("cannot parse string as double",bytes,start,length);    }  }  if ((c < '0' || c > '9') && c != '.') {    throw newNumberFormatException("leading digit or '.' required",bytes,start,length);  }  long decimal=0;  int decimalPoint=-1;  while (true) {    int digit=c - '0';    if (digit >= 0 && digit < 10) {      long tmp=decimal * 10 + digit;      if (decimal > LONG_MAX_DIV10 || tmp < decimal) {        return Double.parseDouble(new String(bytes,start,length,StandardCharsets.UTF_8));      }      decimal=tmp;    } else     if (c == '.' && decimalPoint == -1) {      decimalPoint=i;    } else {      break;    }    if (++i >= end) {      break;    }    c=(char)bytes[i];  }  int fractionLength=(decimalPoint >= 0) ? i - decimalPoint - 1 : 0;  int exp=0;  if (i < end) {    if (c == 'E' || c == 'e') {      c=(char)bytes[++i];      boolean isNegativeExp=(c == '-');      if ((isNegativeExp || (c == '+')) && (++i < end)) {        c=(char)bytes[i];      }      if ((c < '0') || (c > '9')) {        throw newNumberFormatException("invalid exponent",bytes,start,length);      }      while (true) {        int digit=c - '0';        if ((digit >= 0) && (digit < 10)) {          int tmp=exp * 10 + digit;          if ((exp > INT_MAX_DIV10) || (tmp < exp)) {            return Double.parseDouble(new String(bytes,start,length,StandardCharsets.UTF_8));          }          exp=tmp;        } else         break;        if (++i >= end) {          break;        }        c=(char)bytes[i];      }      if (isNegativeExp) {        exp=-exp;      }    } else {      throw newNumberFormatException("extra characters",bytes,start,length);    }  }  return sigNum * toDoublePow10(decimal,exp - fractionLength);}  }
class C{  @Override public void onAddDataTag(final ISourceDataTag sourceDataTag,final ChangeReport changeReport){  changeReport.appendError("The equipment has no implementation to" + " add data tags. You have to restart the DAQ.");  changeReport.setState(CHANGE_STATE.REBOOT);}  }
class C{  Object computeResult() throws JobException {  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.entering(PrepareJob.class.getName(),"computeResult");  }  try {    if (!isCompleted(0))     throw new ResultNotReadyException("Cannot compute result " + "since there are jobs pending");  } catch (  JobNotStartedException jnse) {    throw new ResultNotReadyException("Cannot compute result since" + " jobs were not created");  }  int prepstate=NOTCHANGED;  int tmp=0;  checkresults:   for (int i=0; i < results.length; i++) {    tmp=((Integer)results[i]).intValue();switch (tmp) {case NOTCHANGED:      break;case ABORTED:    prepstate=ABORTED;  break checkresults;case PREPARED:if (prepstate == NOTCHANGED) prepstate=PREPARED;break;}}Integer result=new Integer(prepstate);if (operationsLogger.isLoggable(Level.FINER)) {operationsLogger.exiting(PrepareJob.class.getName(),"computeResult",result);}return result;}  }
class C{  public double predict(double x){  return beta * x + alpha;}  }
class C{  public NoBracketingException(double lo,double hi,double fLo,double fHi){  this(LocalizedFormats.SAME_SIGN_AT_ENDPOINTS,lo,hi,fLo,fHi);}  }
class C{  public static String slurpURLNoExceptions(URL u){  try {    return slurpURL(u);  } catch (  Exception e) {    e.printStackTrace();    return null;  }}  }
class C{  public ForceSimulator(){  this(new RungeKuttaIntegrator());}  }
class C{  public static List<String> toLabeledSentences(List<DependencyGraph> graphs){  List<String> list=new LinkedList<String>();  for (  DependencyGraph graph : graphs) {    StringBuilder sb=new StringBuilder();    Sentence sentence=graph.getSentence();    String[] labels=graph.getLabels();    for (int i=1; i < sentence.length(); i++) {      sb.append(sentence.getToken(i));      sb.append(';');      sb.append(sentence.getTag(i));      sb.append('/');      sb.append(labels[i]);      sb.append(' ');    }    list.add(sb.toString().trim());  }  return list;}  }
class C{  private boolean superSetOf(AllocAndContextSet onePts,final AllocAndContextSet otherPts){  return onePts.containsAll(otherPts);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public static void with(@NonNull Application application,@NonNull ShakeDelegate delegate){  LifecycleCallbacks lifecycleCallbacks=new LifecycleCallbacks(application,delegate);  application.registerActivityLifecycleCallbacks(lifecycleCallbacks);}  }
class C{  public long maxSize(){  return maxSize;}  }
class C{  public static String localizePath(String path){  String fileNameSeparator=("\\".equals(File.separator) ? "\\" + File.separator : File.separator);  return path.replaceAll("/+|\\\\+",fileNameSeparator);}  }
class C{  public static boolean isEmpty(Map<?,?> map){  return (map == null || map.isEmpty());}  }
class C{  @Override public void externalEntityDecl(String name,XMLResourceIdentifier identifier,Augmentations augmentations) throws XNIException {}  }
class C{  public static boolean isEmbedded(){  return Boolean.valueOf(ConfigurationUtil.getProperty(EMBEDDED_MODE_PROPERTY));}  }
class C{  public IntegerConstant(int n){  val=n;}  }
class C{  public synchronized void openDriver(SurfaceHolder holder) throws IOException {  OpenCamera theCamera=camera;  if (theCamera == null) {    theCamera=OpenCameraInterface.open(requestedCameraId);    if (theCamera == null) {      throw new IOException("Camera.open() failed to return object from driver");    }    camera=theCamera;  }  if (!initialized) {    initialized=true;    configManager.initFromCameraParameters(theCamera);    if (requestedFramingRectWidth > 0 && requestedFramingRectHeight > 0) {      setManualFramingRect(requestedFramingRectWidth,requestedFramingRectHeight);      requestedFramingRectWidth=0;      requestedFramingRectHeight=0;    }  }  Camera cameraObject=theCamera.getCamera();  Camera.Parameters parameters=cameraObject.getParameters();  String parametersFlattened=parameters == null ? null : parameters.flatten();  try {    configManager.setDesiredCameraParameters(theCamera,false);  } catch (  RuntimeException re) {    Log.w(TAG,"Camera rejected parameters. Setting only minimal safe-mode parameters");    Log.i(TAG,"Resetting to saved camera params: " + parametersFlattened);    if (parametersFlattened != null) {      parameters=cameraObject.getParameters();      parameters.unflatten(parametersFlattened);      try {        cameraObject.setParameters(parameters);        configManager.setDesiredCameraParameters(theCamera,true);      } catch (      RuntimeException re2) {        Log.w(TAG,"Camera rejected even safe-mode parameters! No configuration");      }    }  }  cameraObject.setPreviewDisplay(holder);}  }
class C{  public Gym(PokemonGo api,FortData proto){  this.api=api;  this.proto=proto;  this.details=null;}  }
class C{  public RecyclerView build(){  return mRecyclerView;}  }
class C{  public void testPojoAccessors(){  final Class<?> type=PojoAccessors.class;  PojoTypeInfo typeInfo=PojoTypeInfoRepository.getPojoTypeInfo(type);  assertPojoTypeInfo(typeInfo,type);  Assert.assertEquals("numOfProperties",5,typeInfo.getNumOfProperties());  assertPojoPropertyInfo(typeInfo,"class",Class.class,true,false);  assertPojoPropertyInfo(typeInfo,"publicName",String.class,true,true);  assertPojoPropertyInfo(typeInfo,"protectedName",String.class,true,true);  assertPojoPropertyInfo(typeInfo,"privateName",String.class,true,true);  assertPojoPropertyInfo(typeInfo,"defaultName",String.class,true,true);}  }
class C{  public static ArrayList<SelectableColor> loadMaterialDesignColors500(Context context,boolean sortByName){  return Utils.convertResourceArraysToColorsArrayList(context,sortByName,R.array.selectiondialogs_materialdesign500_ids,R.array.selectiondialogs_materialdesign500_names,R.array.selectiondialogs_materialdesign500_colors);}  }
class C{  public ScratchoffController reset(){  if (scratchableLayout == null)   throw new IllegalStateException("Cannot attach to a null View! Ensure you call attach(View, View) with valid Views!");  safelyStopProcessors();  scratchableLayout.clearAnimation();  scratchableLayout.setVisibility(View.VISIBLE);  scratchableLayout.invalidate();  this.layoutDrawer=new ScratchableLayoutDrawer().attach(this,scratchableLayout,behindView);  scratchableLayout.setOnTouchListener(this);  this.processor=new ScratchoffProcessor(this);  if (scratchableLayout instanceof ScratchableLayout)   ((ScratchableLayout)scratchableLayout).initialize(this);  return this;}  }
class C{  @Deprecated public Builder cacheOnDisc(){  return cacheOnDisk(true);}  }
class C{  public boolean forEachDescending(TIntProcedure procedure){  for (int i=_pos; i-- > 0; ) {    if (!procedure.execute(_data[i])) {      return false;    }  }  return true;}  }
class C{  public VideoReportQuery report(UserActor actor,int ownerId,int videoId){  return new VideoReportQuery(getClient(),actor,ownerId,videoId);}  }
class C{  public ImageRecordReader(){  super();}  }
class C{  public String checkIfUserPresent(String userName) throws UnsupportedEncodingException, ParserConfigurationException, IOException, SAXException, DASTProxyException, XPathExpressionException {  LOGGER.debug("Inside checkIfUserPresent....1");  final XPathFactory factory=XPathFactory.newInstance();  final XPath xpath=factory.newXPath();  xpath.setNamespaceContext(_nsContext);  Document response=null;  try {    response=sendRESTRequestToASE(AppScanConstants.APPSCAN_USERS_FOLDER_LIST_RELATIVE_URL,"");    LOGGER.debug("Inside checkIfUserPresent....2...response=" + response);  } catch (  ConnectException ce) {    LOGGER.error("Could not find the user with userId=" + userName + " in the Backend.");    LOGGER.error(ce);    return null;  }  LOGGER.debug("Check if user exists in the system. ");  checkForError(response,null);  LOGGER.debug("Inside checkIfUserPresent....2.1");  if (userName.contains("CORP\\")) {    userName=userName.substring(userName.indexOf("\\") + 1);  }  LOGGER.debug("Inside checkIfUserPresent....3");  String userId=(String)xpath.evaluate("//ase:folder[ase:contact='" + userName + "']/ase:id/text()",response,XPathConstants.STRING);  LOGGER.debug("Inside checkIfUserPresent....4...userId=" + userId);  if (AppScanUtils.isNotNull(userId)) {    return userId;  } else {    return null;  }}  }
class C{  public void writeToStream(OutputStream out) throws IOException {  BencodeWriter writer=new BencodeWriter(out);  writer.write(this);}  }
class C{  public UsersGetFollowersQuery fields(UserField... value){  return unsafeParam("fields",value);}  }
class C{  public void intersection(MonitorSet other,MonitorSet dest){  if (other.contains("&")) {    this.copy(dest);  } else   if (this.contains("&")) {    other.copy(dest);  } else {    Iterator<?> it=iterator();    while (it.hasNext()) {      Object o=it.next();      if (o instanceof MonitorDepth) {        MonitorDepth md=(MonitorDepth)o;        Object obj=dest.getMonitorDepth(md.getObjName());        if (obj != null)         if (md.getDepth() != ((MonitorDepth)obj).getDepth()) {          throw new RuntimeException("stmt inside different monitor depth !");        } else         dest.add(obj);      }    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ITEM_CHARGE_INVALID_STANCE(String value0){  return new SM_SYSTEM_MESSAGE(1400970,value0);}  }
class C{  @Override public void actionPerformed(ActionEvent ev){}  }
class C{  public boolean with_classfield(){  return soot.PhaseOptions.getBoolean(options,"with-classfield");}  }
class C{  public boolean intersectsRange(DateRange range){  if (isPoint() && range.isPoint() && this.start.equals(range.start)) {    return true;  }  return !before(range) && !after(range);}  }
class C{  public boolean isApplicable(){  AlignmentViewer viewer=(AlignmentViewer)getViewer();  return viewer.getAlignment().getLength() > 0;}  }
class C{  public static String md5File(String fullFilename){  String result=null;  if (fullFilename != null) {    try {      result=md5File(new FileInputStream(fullFilename));    } catch (    Exception e) {      throw new RuntimeException(e);    }  }  return result;}  }
class C{  public long queryCount() throws GenericEntityException {  if (dynamicViewEntity != null) {    EntityListIterator iterator=null;    try {      iterator=queryIterator();      return iterator.getResultsSizeAfterPartialList();    }  finally {      if (iterator != null) {        iterator.close();      }    }  }  return delegator.findCountByCondition(entityName,makeWhereCondition(false),havingEntityCondition,makeEntityFindOptions());}  }
class C{  private void enableSubGroups(boolean enabled){  for (  FieldConfigBase field : getFieldConfigList()) {    FieldPanel panel=field.getPanel();    if (panel != null) {      panel.enablePanel(enabled);    }  }  for (  GroupConfigInterface subGroup : subGroupList) {    subGroup.enable(enabled);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostSkillCastingTime_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200485,skilltarget,skillname);}  }
class C{  private void removeRayAction(){  TreePath path=this.tree.getSelectionPath();  if (path != null) {    DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();    if (node.getUserObject() instanceof SandboxRay) {      SandboxRay ray=(SandboxRay)node.getUserObject();      int choice=JOptionPane.showConfirmDialog(ControlUtilities.getParentWindow(this),MessageFormat.format(Messages.getString("menu.context.ray.remove.warning"),ray.getName()),Messages.getString("menu.context.ray.remove.warning.title"),JOptionPane.YES_NO_CANCEL_OPTION);      if (choice == JOptionPane.YES_OPTION) {synchronized (Simulation.LOCK) {          this.simulation.getRays().remove(ray);        }        this.model.removeNodeFromParent(node);      }    }  }}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  protected void processRequest(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  response.setContentType("text/html;charset=UTF-8");  try {    PrintWriter out=response.getWriter();    out.println("<!DOCTYPE html>");    out.println("<html>");    out.println("<head>");    out.println("<title>Servlet demo</title>");    out.println("</head>");    out.println("<body>");    out.println("<h1>Servlet demo at </h1>");    out.println("</body>");    out.println("</html>");  } catch (  Exception e) {  }}  }
class C{  public int lookupElementDefinition(String elementName){  if (fNodeCount > 1) {    int docTypeIndex=-1;    int nchunk=0;    int nindex=0;    for (int index=getChunkIndex(fNodeLastChild,nchunk,nindex); index != -1; index=getChunkIndex(fNodePrevSib,nchunk,nindex)) {      nchunk=index >> CHUNK_SHIFT;      nindex=index & CHUNK_MASK;      if (getChunkIndex(fNodeType,nchunk,nindex) == Node.DOCUMENT_TYPE_NODE) {        docTypeIndex=index;        break;      }    }    if (docTypeIndex == -1) {      return -1;    }    nchunk=docTypeIndex >> CHUNK_SHIFT;    nindex=docTypeIndex & CHUNK_MASK;    for (int index=getChunkIndex(fNodeLastChild,nchunk,nindex); index != -1; index=getChunkIndex(fNodePrevSib,nchunk,nindex)) {      nchunk=index >> CHUNK_SHIFT;      nindex=index & CHUNK_MASK;      if (getChunkIndex(fNodeType,nchunk,nindex) == NodeImpl.ELEMENT_DEFINITION_NODE && getChunkValue(fNodeName,nchunk,nindex) == elementName) {        return index;      }    }  }  return -1;}  }
class C{  void unparse(){  int i, j;  Code_attribute ca;  byte bc[];  method_info mi;  exception_table_entry e;  for (i=0; i < methods_count; i++) {    mi=methods[i];    ca=mi.locate_code_attribute();    if (ca == null)     continue;    bc=unparseMethod(mi);    if (bc == null) {      G.v().out.println("Recompile of " + mi.toName(constant_pool) + " failed!");    } else {      ca.code_length=bc.length;      ca.code=bc;      for (j=0; j < ca.exception_table_length; j++) {        e=ca.exception_table[j];        e.start_pc=(e.start_inst.label);        if (e.end_inst != null)         e.end_pc=(e.end_inst.label); else         e.end_pc=(int)(ca.code_length);        e.handler_pc=(e.handler_inst.label);      }    }  }}  }
class C{  public PollsGetVotersQuery friendsOnly(Boolean value){  return unsafeParam("friends_only",value);}  }
class C{  String parseResponseValue(HttpServletRequest request,HttpServletResponse response,String value,ConfigXMLReader.RequestMap requestMap){  if (value == null) {    return "";  }  if (value.startsWith("${") && value.endsWith("}")) {    Object attrValue=null;    int dotIndex=value.indexOf('.');    if (dotIndex >= 0) {      String scope=value.substring(2,dotIndex).trim();      String name=value.substring(dotIndex + 1,value.length() - 1).trim();      if (scope.length() > 0 && name.length() > 0) {        if ("requestAttributes".equals(scope)) {          attrValue=request.getAttribute(name);        } else         if ("requestParameters".equals(scope)) {          attrValue=request.getParameter(name);        } else         if ("requestAttrParam".equals(scope)) {          attrValue=request.getAttribute(name);          if (attrValue == null) {            attrValue=request.getParameter(name);          }        } else         if ("sessionAttributes".equals(scope)) {          HttpSession session=request.getSession(false);          if (session != null) {            attrValue=session.getAttribute(name);          }        } else         if ("applicationAttributes".equals(scope)) {          attrValue=request.getServletContext().getAttribute(name);        }      }    }    if (attrValue != null) {      if (attrValue instanceof String) {        String attrStr=(String)attrValue;        return attrStr;      } else {        if (requestMap != null) {          Debug.logError("Scipio: Error in request handler: The interpreted request response value '" + attrValue.toString() + "' from request URI '"+ requestMap.uri+ "' did not evaluate to a string; treating as empty",module);        } else {          Debug.logError("Scipio: Error in request handler: The interpreted request response value '" + attrValue.toString() + "' did not evaluate to a string; treating as empty",module);        }      }    }    return "";  }  return value;}  }
class C{  public static boolean isBoolean(String expression,Map<String,Object> vars){  try {    Object result=evaluate(expression,vars);    return (result instanceof Boolean);  } catch (  JexlException ex) {    return false;  }}  }
class C{  public RequestHandle head(String url,RequestParams params,ResponseHandlerInterface responseHandler){  return head(null,url,params,responseHandler);}  }
class C{  public static boolean isDark(@NonNull Bitmap bitmap,int backupPixelX,int backupPixelY){  Palette palette=Palette.from(bitmap).maximumColorCount(3).generate();  if (palette != null && palette.getSwatches().size() > 0) {    return isDark(palette) == IS_DARK;  } else {    return isDark(bitmap.getPixel(backupPixelX,backupPixelY));  }}  }
class C{  static public void main(String args[]) throws Exception {  ResamplingMethod compare=new ResamplingMethod();  if (args.length > 0)   compare.setParametersFromCommandLine(args); else   compare.setParametersFromConsole();  compare.run();}  }
class C{  public Builder memoryCacheExtraOptions(int maxImageWidthForMemoryCache,int maxImageHeightForMemoryCache){  this.maxImageWidthForMemoryCache=maxImageWidthForMemoryCache;  this.maxImageHeightForMemoryCache=maxImageHeightForMemoryCache;  return this;}  }
class C{  private void visitFrame(final Frame f){  int i, t;  int nTop=0;  int nLocal=0;  int nStack=0;  int[] locals=f.inputLocals;  int[] stacks=f.inputStack;  for (i=0; i < locals.length; ++i) {    t=locals[i];    if (t == Frame.TOP) {      ++nTop;    } else {      nLocal+=nTop + 1;      nTop=0;    }    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  for (i=0; i < stacks.length; ++i) {    t=stacks[i];    ++nStack;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  startFrame(f.owner.position,nLocal,nStack);  for (i=0; nLocal > 0; ++i, --nLocal) {    t=locals[i];    frame[frameIndex++]=t;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  for (i=0; i < stacks.length; ++i) {    t=stacks[i];    frame[frameIndex++]=t;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  endFrame();}  }
class C{  public void insertBefore(List<E> toInsert,E point){  LinkedList<E> backwardList=new LinkedList<E>();{    Iterator<E> it=toInsert.iterator();    while (it.hasNext())     backwardList.addFirst(it.next());  }  E previousPoint=point;  Iterator<E> it=backwardList.iterator();  while (it.hasNext()) {    E o=it.next();    insertBeforeNoRedirect(o,previousPoint);    previousPoint=o;  }  point.redirectJumpsToThisTo(toInsert.get(0));}  }
class C{  public static boolean storageDirectoryExists(){  return new File(getStorageDirectoryString()).isDirectory();}  }
class C{  public static boolean isValidDouble(Double d){  return d != null && !Double.isInfinite(d) && !Double.isNaN(d);}  }
class C{  void releaseAll(long txNum,boolean sLockOnly){  Set<Object> objectsToRelease=getObjectSet(txNum);  for (  Object obj : objectsToRelease) {    Object anchor=getAnchor(obj);synchronized (anchor) {      Lockers lks=lockerMap.get(obj);      if (lks != null) {        if (hasSLock(lks,txNum))         releaseLock(lks,anchor,txNum,S_LOCK);        if (hasXLock(lks,txNum) && !sLockOnly)         releaseLock(lks,anchor,txNum,X_LOCK);        if (hasSixLock(lks,txNum))         releaseLock(lks,anchor,txNum,SIX_LOCK);        while (hasIsLock(lks,txNum))         releaseLock(lks,anchor,txNum,IS_LOCK);        while (hasIxLock(lks,txNum) && !sLockOnly)         releaseLock(lks,anchor,txNum,IX_LOCK);        if (!sLocked(lks) && !xLocked(lks) && !sixLocked(lks)&& !isLocked(lks)&& !ixLocked(lks)&& lks.requestSet.isEmpty())         lockerMap.remove(obj);      }    }  }  txWaitMap.remove(txNum);  txnsToBeAborted.remove(txNum);  lockByMap.remove(txNum);}  }
class C{  private static void fixRectForAspectRatio(Rect rect,int aspectRatioX,int aspectRatioY){  if (aspectRatioX == aspectRatioY && rect.width() != rect.height()) {    if (rect.height() > rect.width()) {      rect.bottom-=rect.height() - rect.width();    } else {      rect.right-=rect.width() - rect.height();    }  }}  }
class C{  public static String encode(String str,String charset) throws RuntimeException {  byte[] bytes;  try {    bytes=str.getBytes(charset);  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException("Unsupported charset: " + charset,e);  }  byte[] encoded=encode(bytes);  try {    return new String(encoded,"ASCII");  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException("ASCII is not supported!",e);  }}  }
class C{  public static void filledSquare(double x,double y,double halfLength){  if (!(halfLength >= 0))   throw new IllegalArgumentException("half length must be nonnegative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * halfLength);  double hs=factorY(2 * halfLength);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.fill(new Rectangle2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  public void removeFields(int[] selectedRowIndexes){  if (selectedRowIndexes != null) {    int index=selectedRowIndexes.length - 1;    while (index >= 0) {      int rowIndex=selectedRowIndexes[index];      if ((rowIndex >= 0) && (rowIndex < valueList.size())) {        DataSourceAttributeData data=valueList.remove(rowIndex);        if (data != null) {          valueMap.remove(data.getName().getLocalPart());        }      }      index--;    }  }}  }
class C{  public SyncAdapter(Context context,boolean autoInitialize){  super(context,autoInitialize);  mContentResolver=context.getContentResolver();  mBroadcastManager=LocalBroadcastManager.getInstance(context);  mPrefs=PreferenceManager.getDefaultSharedPreferences(context);  mMarvelApi=MarvelApi.getInstance();}  }
class C{  public static void f(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_FATAL) {    return;  }  Log.wtf(tag,msg,throwable);}  }
class C{  @Override public void writeByte(final byte b){  baos.write(b);}  }
class C{  public ElementType rootElementType(){  return theRoot;}  }
class C{  public static <V,V1 extends V,V2 extends V,V3 extends V,V4 extends V,V5 extends V,V6 extends V>Map<String,V> toMap(String name1,V1 value1,String name2,V2 value2,String name3,V3 value3,String name4,V4 value4,String name5,V5 value5,String name6,V6 value6){  return populateMap(new HashMap<String,V>(),name1,value1,name2,value2,name3,value3,name4,value4,name5,value5,name6,value6);}  }
class C{  public void detach(){  mEffect.removeParameter(mParameter);  mEffect=null;}  }
class C{  public void doMeasure(int widthMeasureSpec,int heightMeasureSpec){  if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) {    int tempSpec=widthMeasureSpec;    widthMeasureSpec=heightMeasureSpec;    heightMeasureSpec=tempSpec;  }  int width=View.getDefaultSize(mVideoWidth,widthMeasureSpec);  int height=View.getDefaultSize(mVideoHeight,heightMeasureSpec);  if (mCurrentAspectRatio == IRenderView.AR_MATCH_PARENT) {    width=widthMeasureSpec;    height=heightMeasureSpec;  } else   if (mVideoWidth > 0 && mVideoHeight > 0) {    int widthSpecMode=View.MeasureSpec.getMode(widthMeasureSpec);    int widthSpecSize=View.MeasureSpec.getSize(widthMeasureSpec);    int heightSpecMode=View.MeasureSpec.getMode(heightMeasureSpec);    int heightSpecSize=View.MeasureSpec.getSize(heightMeasureSpec);    if (widthSpecMode == View.MeasureSpec.AT_MOST && heightSpecMode == View.MeasureSpec.AT_MOST) {      float specAspectRatio=(float)widthSpecSize / (float)heightSpecSize;      float displayAspectRatio;switch (mCurrentAspectRatio) {case IRenderView.AR_16_9_FIT_PARENT:        displayAspectRatio=16.0f / 9.0f;      if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270)       displayAspectRatio=1.0f / displayAspectRatio;    break;case IRenderView.AR_4_3_FIT_PARENT:  displayAspectRatio=4.0f / 3.0f;if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) displayAspectRatio=1.0f / displayAspectRatio;break;case IRenderView.AR_ASPECT_FIT_PARENT:case IRenderView.AR_ASPECT_FILL_PARENT:case IRenderView.AR_ASPECT_WRAP_CONTENT:default :displayAspectRatio=(float)mVideoWidth / (float)mVideoHeight;if (mVideoSarNum > 0 && mVideoSarDen > 0) displayAspectRatio=displayAspectRatio * mVideoSarNum / mVideoSarDen;break;}boolean shouldBeWider=displayAspectRatio > specAspectRatio;switch (mCurrentAspectRatio) {case IRenderView.AR_ASPECT_FIT_PARENT:case IRenderView.AR_16_9_FIT_PARENT:case IRenderView.AR_4_3_FIT_PARENT:if (shouldBeWider) {width=widthSpecSize;height=(int)(width / displayAspectRatio);} else {height=heightSpecSize;width=(int)(height * displayAspectRatio);}break;case IRenderView.AR_ASPECT_FILL_PARENT:if (shouldBeWider) {height=heightSpecSize;width=(int)(height * displayAspectRatio);} else {width=widthSpecSize;height=(int)(width / displayAspectRatio);}break;case IRenderView.AR_ASPECT_WRAP_CONTENT:default :if (shouldBeWider) {width=Math.min(mVideoWidth,widthSpecSize);height=(int)(width / displayAspectRatio);} else {height=Math.min(mVideoHeight,heightSpecSize);width=(int)(height * displayAspectRatio);}break;}} else if (widthSpecMode == View.MeasureSpec.EXACTLY && heightSpecMode == View.MeasureSpec.EXACTLY) {width=widthSpecSize;height=heightSpecSize;if (mVideoWidth * height < width * mVideoHeight) {width=height * mVideoWidth / mVideoHeight;} else if (mVideoWidth * height > width * mVideoHeight) {height=width * mVideoHeight / mVideoWidth;}} else if (widthSpecMode == View.MeasureSpec.EXACTLY) {width=widthSpecSize;height=width * mVideoHeight / mVideoWidth;if (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) {height=heightSpecSize;}} else if (heightSpecMode == View.MeasureSpec.EXACTLY) {height=heightSpecSize;width=height * mVideoWidth / mVideoHeight;if (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) {width=widthSpecSize;}} else {width=mVideoWidth;height=mVideoHeight;if (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) {height=heightSpecSize;width=height * mVideoWidth / mVideoHeight;}if (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) {width=widthSpecSize;height=width * mVideoHeight / mVideoWidth;}}} else {}mMeasuredWidth=width;mMeasuredHeight=height;}  }
class C{  public static void write(char[] data,Writer output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  public boolean hasValueBeenUpdated(int rowIndex,int columnIndex){  ScaleSLDData data=scaleList.get(rowIndex);  if (columnIndex == COL_MIN_SCALE) {    return data.isMinimumScaleUpdated();  }  if (columnIndex == COL_MAX_SCALE) {    return data.isMaximumScaleUpdated();  }  return false;}  }
class C{  private FileUtils(){}  }
class C{  protected boolean isTemporaryDestination(){  boolean result=false;  if (m_TopicName.startsWith(TEMP_TOPIC_PREFIX)) {    result=true;  }  return result;}  }
class C{  public SoftReferenceSymbolTableConfiguration(SymbolTable symbolTable,XMLGrammarPool grammarPool){  this(symbolTable,grammarPool,null);}  }
class C{  public static ResolveInfo resolveActivity(Intent intent){  try {    Context context=ApplicationStatus.getApplicationContext();    PackageManager pm=context.getPackageManager();    return pm.resolveActivity(intent,0);  } catch (  RuntimeException e) {    logTransactionTooLargeOrRethrow(e,intent);  }  return null;}  }
class C{  public void removeDataSource(DataSource removed){  unregisterDataSource(removed);}  }
class C{  private JSpaceContainerImpl initContainer(LifeCycle lifeCycle,String containerName,String schemaName,Properties schemaProperties) throws Exception {  String contConfFile=SystemInfo.singleton().locations().config() + java.io.File.separator + containerName+ "-config.xml";  File configFile=new File(contConfFile);  if (!configFile.canRead() && !JSpaceUtilities.isEmpty(schemaName)) {    if (_logger.isLoggable(Level.INFO)) {      _logger.info("Couldn't find the required " + containerName + "-config.xml file: "+ contConfFile+ ".\n About to load the default container schema file from the ResourceBundle, to be used for the container configuration.");    }    InputStream schemaInputStream=ResourceLoader.findContainerSchema(schemaName);    JProperties.setInputStream(containerName,schemaInputStream,schemaProperties);  } else {    JProperties.setURL(containerName,contConfFile);  }  JProperties.getContainerProperties(containerName).setProperty(Constants.Container.CONTAINER_NAME_PROP,containerName);  return new JSpaceContainerImpl(lifeCycle,schemaName,null,schemaProperties);}  }
class C{  public void doMeasure(int widthMeasureSpec,int heightMeasureSpec){  if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) {    int tempSpec=widthMeasureSpec;    widthMeasureSpec=heightMeasureSpec;    heightMeasureSpec=tempSpec;  }  int width=View.getDefaultSize(mVideoWidth,widthMeasureSpec);  int height=View.getDefaultSize(mVideoHeight,heightMeasureSpec);  if (mCurrentAspectRatio == AR_MATCH_PARENT) {    width=widthMeasureSpec;    height=heightMeasureSpec;  } else   if (mVideoWidth > 0 && mVideoHeight > 0) {    int widthSpecMode=View.MeasureSpec.getMode(widthMeasureSpec);    int widthSpecSize=View.MeasureSpec.getSize(widthMeasureSpec);    int heightSpecMode=View.MeasureSpec.getMode(heightMeasureSpec);    int heightSpecSize=View.MeasureSpec.getSize(heightMeasureSpec);    if (widthSpecMode == View.MeasureSpec.AT_MOST && heightSpecMode == View.MeasureSpec.AT_MOST) {      float specAspectRatio=(float)widthSpecSize / (float)heightSpecSize;      float displayAspectRatio;switch (mCurrentAspectRatio) {case AR_16_9_FIT_PARENT:        displayAspectRatio=16.0f / 9.0f;      if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270)       displayAspectRatio=1.0f / displayAspectRatio;    break;case AR_4_3_FIT_PARENT:  displayAspectRatio=4.0f / 3.0f;if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) displayAspectRatio=1.0f / displayAspectRatio;break;case AR_ASPECT_FIT_PARENT:case AR_ASPECT_FILL_PARENT:case AR_ASPECT_WRAP_CONTENT:default :displayAspectRatio=(float)mVideoWidth / (float)mVideoHeight;if (mVideoSarNum > 0 && mVideoSarDen > 0) displayAspectRatio=displayAspectRatio * mVideoSarNum / mVideoSarDen;break;}boolean shouldBeWider=displayAspectRatio > specAspectRatio;switch (mCurrentAspectRatio) {case AR_ASPECT_FIT_PARENT:case AR_16_9_FIT_PARENT:case AR_4_3_FIT_PARENT:if (shouldBeWider) {width=widthSpecSize;height=(int)(width / displayAspectRatio);} else {height=heightSpecSize;width=(int)(height * displayAspectRatio);}break;case AR_ASPECT_FILL_PARENT:if (shouldBeWider) {height=heightSpecSize;width=(int)(height * displayAspectRatio);} else {width=widthSpecSize;height=(int)(width / displayAspectRatio);}break;case AR_ASPECT_WRAP_CONTENT:default :if (shouldBeWider) {width=Math.min(mVideoWidth,widthSpecSize);height=(int)(width / displayAspectRatio);} else {height=Math.min(mVideoHeight,heightSpecSize);width=(int)(height * displayAspectRatio);}break;}} else if (widthSpecMode == View.MeasureSpec.EXACTLY && heightSpecMode == View.MeasureSpec.EXACTLY) {width=widthSpecSize;height=heightSpecSize;if (mVideoWidth * height < width * mVideoHeight) {width=height * mVideoWidth / mVideoHeight;} else if (mVideoWidth * height > width * mVideoHeight) {height=width * mVideoHeight / mVideoWidth;}} else if (widthSpecMode == View.MeasureSpec.EXACTLY) {width=widthSpecSize;height=width * mVideoHeight / mVideoWidth;if (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) {height=heightSpecSize;}} else if (heightSpecMode == View.MeasureSpec.EXACTLY) {height=heightSpecSize;width=height * mVideoWidth / mVideoHeight;if (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) {width=widthSpecSize;}} else {width=mVideoWidth;height=mVideoHeight;if (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) {height=heightSpecSize;width=height * mVideoWidth / mVideoHeight;}if (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) {width=widthSpecSize;height=width * mVideoHeight / mVideoWidth;}}} else {}mMeasuredWidth=width;mMeasuredHeight=height;}  }
class C{  public void addBrowserInfo(){  Capabilities caps=((HasCapabilities)webDriver).getCapabilities();  browserInfoEntry=new BrowserInfoEntry(caps);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MagicCounterATK_INTERVAL_A_TO_ME(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200684,skillcaster,num0,skillname);}  }
class C{  @Override public boolean accept(File file){  if (file.isDirectory()) {    return false;  }  for (  String wildcard : wildcards) {    if (FilenameUtils.wildcardMatch(file.getName(),wildcard)) {      return true;    }  }  return false;}  }
class C{  public VendorOptionTableModel(Map<VendorOptionTypeInterface,String> options){  columnNames[0]=Localisation.getString(VendorOptionTableModel.class,"VendorOptionTableModel.vendor");  columnNames[1]=Localisation.getString(VendorOptionTableModel.class,"VendorOptionTableModel.selected");  nameMap=options;  List<VendorOptionTypeInterface> orderList=new ArrayList<VendorOptionTypeInterface>();  for (  VendorOptionTypeInterface key : options.keySet()) {    orderList.add(key);    selectedVersionList.add(VersionData.getLatestVersion(key.getClass()));  }  nameOrder=orderList;}  }
class C{  public String loadString(String key,String defValue){  return prefs.getString(key,defValue);}  }
class C{  @Override public boolean onTouchEvent(MotionEvent event){  if (!(text instanceof Spanned))   return super.onTouchEvent(event);  Spannable spannedText=(Spannable)text;  boolean handled=false;  if (event.getAction() == MotionEvent.ACTION_DOWN) {    pressedSpan=getPressedSpan(spannedText,event);    if (pressedSpan != null) {      pressedSpan.setPressed(true);      Selection.setSelection(spannedText,spannedText.getSpanStart(pressedSpan),spannedText.getSpanEnd(pressedSpan));      handled=true;      postInvalidateOnAnimation();    }  } else   if (event.getAction() == MotionEvent.ACTION_MOVE) {    TouchableUrlSpan touchedSpan=getPressedSpan(spannedText,event);    if (pressedSpan != null && touchedSpan != pressedSpan) {      pressedSpan.setPressed(false);      pressedSpan=null;      Selection.removeSelection(spannedText);      postInvalidateOnAnimation();    }  } else   if (event.getAction() == MotionEvent.ACTION_UP) {    if (pressedSpan != null) {      pressedSpan.setPressed(false);      pressedSpan.onClick(this);      handled=true;      postInvalidateOnAnimation();    }    pressedSpan=null;    Selection.removeSelection(spannedText);  } else {    if (pressedSpan != null) {      pressedSpan.setPressed(false);      handled=true;      postInvalidateOnAnimation();    }    pressedSpan=null;    Selection.removeSelection(spannedText);  }  return handled;}  }
class C{  private void observeChangingBooks(){  Observable<Book> observable=bookRepository.observeChangingBooks().observeOn(AndroidSchedulers.mainThread());  subscribe(observable,null,null,null);}  }
class C{  public FloatBuffer fillFloatBuffer(FloatBuffer fb,boolean columnMajor){  if (columnMajor) {    fb.put(m00).put(m10).put(m20);    fb.put(m01).put(m11).put(m21);    fb.put(m02).put(m12).put(m22);  } else {    fb.put(m00).put(m01).put(m02);    fb.put(m10).put(m11).put(m12);    fb.put(m20).put(m21).put(m22);  }  return fb;}  }
class C{  public static ServiceClient createServiceClient(SSLContext sslContext){  return createServiceClient(sslContext,0);}  }
class C{  public Response writeFloat(float b){  return writeString(Float.toString(b));}  }
class C{  public static ProbeItemDescriptor continuousFillItem(String name,String description,ItemValueFormatter formatter,double dataFactor,long minValue,long maxValue){  return continuousItem(name,description,formatter,dataFactor,minValue,maxValue,DEFAULT_LINE_WIDTH,null,DEFAULT_COLOR);}  }
class C{  public static boolean isDigit(char c){  return Character.isDigit(c);}  }
class C{  private void join(int shardId,SocketAddress newHost,Set<SocketAddress> removedList){  SocketAddress oldHost=shardId2Address.put(shardId,newHost);  if (null != oldHost) {    address2ShardId.remove(oldHost);    circle.remove(shardId,oldHost);    removedList.add(oldHost);    logger.info("Shard {} ({}) left permanently.",shardId,oldHost);  }  address2ShardId.put(newHost,shardId);  circle.add(shardId,newHost);  logger.info("Shard {} ({}) joined to replace ({}).",new Object[]{shardId,newHost,oldHost});}  }
class C{  public void releaseReadLock(int segmentId){  _readLocks[segmentId].unlock();}  }
class C{  public void removeTemplate(Context context,ITemplateHolder template,boolean fromReplication,boolean origin,boolean dontReplicate,TemplateRemoveReasonCodes removeReason){  template.setDeleted(true);  if (template.isHasWaitingFor()) {    RemoveWaitingForInfoSABusPacket packet=new RemoveWaitingForInfoSABusPacket(context.getOperationID(),null,template);    _engine.getProcessorWG().enqueueBlocked(packet);  }  boolean updateRedoLog=false;  if (!dontReplicate) {    if (template.isNotifyTemplate()) {      boolean replicate=((NotifyTemplateHolder)template).isReplicateNotify();      updateRedoLog=_engine.isReplicated() && !fromReplication && replicate;    } else     updateRedoLog=false;  }  if (template.isInExpirationManager())   _templateExpirationManager.removeTemplate(template);  removeTemplate(context,template,updateRedoLog,origin,removeReason);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Fear_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200892,skilltarget,skillcaster,skillname);}  }
class C{  public WeightFunctionManager(){}  }
class C{  public void addBodyDecl(BodyDecl node){  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();  list.addChild(node);}  }
class C{  public AudioGetLyricsQuery(VkApiClient client,UserActor actor,int lyricsId){  super(client,"audio.getLyrics",Lyrics.class);  accessToken(actor.getAccessToken());  lyricsId(lyricsId);}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ACCUSE_OTHER_IS_BANISHED(String value0){  return new SM_SYSTEM_MESSAGE(1400103,value0);}  }
class C{  public BigReal(BigInteger val){  d=new BigDecimal(val);}  }
class C{  public static PrivateKey loadPrivateKeyFromPemFile(final String keyFile) throws IOException, InvalidKeySpecException, NoSuchAlgorithmException {  final PKCS8EncodedKeySpec privateKeySpec=new PKCS8EncodedKeySpec(loadPemFileAsBytes(keyFile));  final PrivateKey privateKey=KeyFactory.getInstance(ALGORITHM).generatePrivate(privateKeySpec);  return privateKey;}  }
class C{  public SortBySize(){  super();}  }
class C{  public byte[] decode(String s){  byte[] b=new byte[(s.length() / 4) * 3];  int cycle=0;  int combined=0;  int j=0;  int len=s.length();  int dummies=0;  for (int i=0; i < len; i++) {    int c=s.charAt(i);    int value=(c <= 255) ? charToValue[c] : IGNORE;switch (value) {case IGNORE:      break;case PAD:    value=0;  dummies++;default :switch (cycle) {case 0:  combined=value;cycle=1;break;case 1:combined<<=6;combined|=value;cycle=2;break;case 2:combined<<=6;combined|=value;cycle=3;break;case 3:combined<<=6;combined|=value;b[j + 2]=(byte)combined;combined>>>=8;b[j + 1]=(byte)combined;combined>>>=8;b[j]=(byte)combined;j+=3;cycle=0;break;}break;}}if (cycle != 0) {throw new ArrayIndexOutOfBoundsException("Input to decode not an even multiple of 4 characters; pad with =.");}j-=dummies;if (b.length != j) {byte[] b2=new byte[j];System.arraycopy(b,0,b2,0,j);b=b2;}return b;}  }
class C{  public Builder cacheOnDisc(){  cacheOnDisc=true;  return this;}  }
class C{  public static <T>List<T> toList(T obj1,T obj2,T obj3){  List<T> list=new LinkedList<T>();  list.add(obj1);  list.add(obj2);  list.add(obj3);  return list;}  }
class C{  public void addImplements(Access node){  List<Access> list=(parent == null || state == null) ? getImplementsListNoTransform() : getImplementsList();  list.addChild(node);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GIVE_ITEM_OPTION_IT_CAN_NOT_BE_GIVEN_OPTION(String value0){  return new SM_SYSTEM_MESSAGE(1300460,value0);}  }
class C{  public FriendsGetRequestsQueryWithExtended needMutual(Boolean value){  return unsafeParam("need_mutual",value);}  }
class C{  public void deleteConnection(GeoServerConnection connection){  GeoServerNode node=nodeMap.get(connection);  if (treeModel != null) {    treeModel.removeNodeFromParent(node);  }  nodeMap.remove(connection);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_RESURRECT_DIALOG__5MIN(String value0){  return new SM_SYSTEM_MESSAGE(1300745,value0);}  }
class C{  public PhotosEditAlbumQuery privacyView(String... value){  return unsafeParam("privacy_view",value);}  }
class C{  public EncodingException(String message,Throwable cause){  super(message,cause);}  }
class C{  public Lexicon load(String fileName){  try {    JAXBContext context=JAXBContext.newInstance("vn.vitk.tok.jaxb");    Unmarshaller unmarshaller=context.createUnmarshaller();    Object object=unmarshaller.unmarshal(new FileInputStream(fileName));    if (object instanceof N) {      N n=(N)object;      root=loadNode(n);      return this;    }  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  JAXBException e) {    e.printStackTrace();  }  return null;}  }
class C{  public InterruptedStatusThread(Runnable target,String name){  super(target,name);}  }
class C{  public void close() throws IOException {  dis.close();  dis.close();  fis.close();}  }
class C{  @Override public int delete(@NonNull Uri uri,String selection,String[] selectionArgs){  SelectionBuilder builder=new SelectionBuilder();  final SQLiteDatabase db=mDatabaseHelper.getWritableDatabase();  final int match=sUriMatcher.match(uri);  int count;switch (match) {case ROUTE_ENTRIES:    count=builder.table(FeedContract.Entry.TABLE_NAME).where(selection,selectionArgs).delete(db);  break;case ROUTE_ENTRIES_ID:String id=uri.getLastPathSegment();count=builder.table(FeedContract.Entry.TABLE_NAME).where(FeedContract.Entry._ID + "=?",id).where(selection,selectionArgs).delete(db);break;default :throw new UnsupportedOperationException("Unknown uri: " + uri);}Context ctx=getContext();assert ctx != null;ctx.getContentResolver().notifyChange(uri,null,false);return count;}  }
class C{  public void readMixedExcitationFilters(InputStream mixFiltersStream) throws IOException {  String line;  Vector<Double> taps=new Vector<Double>();  Scanner s=null;  int i, j;  try {    s=new Scanner(new BufferedReader(new InputStreamReader(mixFiltersStream,"UTF-8")));    s.useLocale(Locale.US);    Log.d(Mary.LOG,"reading mixed excitation filters");    while (s.hasNext("#")) {      line=s.nextLine();    }    while (s.hasNextDouble())     taps.add(s.nextDouble());  }  finally {    if (s != null) {      s.close();    }  }  orderFilters=taps.size() / numFilters;  mixFilters=new double[numFilters][orderFilters];  int k=0;  for (i=0; i < numFilters; i++) {    for (j=0; j < orderFilters; j++) {      mixFilters[i][j]=taps.get(k++);    }  }  Log.d(Mary.LOG,"initMixedExcitation: loaded filter taps");  Log.d(Mary.LOG,"initMixedExcitation: numFilters = " + numFilters + "  orderFilters = "+ orderFilters);}  }
class C{  public DataQueryParams removeFilter(String filter){  this.filters.remove(new BaseDimensionalObject(filter));  return this;}  }
class C{  @Before public void beforeTest(){  textArea=new JTextArea();  final LogController logController=new LogController();  logController.setTextArea(textArea);  logController.setMaxLines(numOfLines);  ConsolePrintStream.setup(logController);}  }
class C{  public SetValueRecord(long txNum,BlockId blk,int offset,Constant val,Constant newVal){  this.txNum=txNum;  this.blk=blk;  this.offset=offset;  this.type=val.getType().getSqlType();  this.val=val;  this.newVal=newVal;  this.lsn=null;}  }
class C{  @Override public void validate(String content,ValidationContext context) throws InvalidDatatypeValueException {}  }
class C{  public void onNativeInitializationComplete(){  mInitializationComplete=true;  if (mOnStartPending) {    mOnStartPending=false;    startNowAndProcessPendingItems();  }  if (mOnResumePending) {    mOnResumePending=false;    onResume();  }  try {    LibraryLoader.get(LibraryProcessType.PROCESS_BROWSER).onNativeInitializationComplete(mContext.getApplicationContext());  } catch (  ProcessInitException e) {    Log.e(TAG,"Unable to load native library.",e);    mActivityDelegate.onStartupFailure();    return;  }}  }
class C{  static double[] loadExpIntB(){  return EXP_INT_B.clone();}  }
class C{  public Map<String,Object> mapFields(Map<String,Object> fields,boolean eval){  Map<String,Object> result=new HashMap<>();  fields.forEach(null);  return result;}  }
class C{  public ClassPath(@Nonnull Iterable<DexFile> classPath,boolean checkPackagePrivateAccess){  Iterable<DexFile> dexFiles=Iterables.concat(classPath,Lists.newArrayList(getBasicClasses()));  unknownClass=new UnknownClassProto(this);  loadedClasses.put(unknownClass.getType(),unknownClass);  this.checkPackagePrivateAccess=checkPackagePrivateAccess;  loadPrimitiveType("Z");  loadPrimitiveType("B");  loadPrimitiveType("S");  loadPrimitiveType("C");  loadPrimitiveType("I");  loadPrimitiveType("J");  loadPrimitiveType("F");  loadPrimitiveType("D");  loadPrimitiveType("L");  for (  DexFile dexFile : dexFiles) {    for (    ClassDef classDef : dexFile.getClasses()) {      ClassDef prev=availableClasses.get(classDef.getType());      if (prev == null) {        availableClasses.put(classDef.getType(),classDef);      }    }  }}  }
class C{  public LookupLocatorDiscovery(LookupLocator[] locators){  if (logger.isLoggable(Level.FINE))   logger.log(Level.FINE,"Created tunable LookupLocatorDiscovery");  try {    beginDiscovery(locators,EmptyConfiguration.INSTANCE);  } catch (  ConfigurationException e) {  }}  }
class C{  public boolean verify(Endorser endorser,PublicKey key){  byte[] hash=Hash.of(outputs.get(0)).toByteArray();  return endorser.verify(hash,key);}  }
class C{  @Override public boolean isDerivedFrom(String typeNamespaceArg,String typeNameArg,int derivationMethod){  return false;}  }
class C{  private void validateAndUpdate(UpdateOneIssueSubTypeRQ one,Project.Configuration settings){  TestItemIssueType expectedType=fromValue(one.getTypeRef());  expect(expectedType,notNull()).verify(ISSUE_TYPE_NOT_FOUND,one.getTypeRef());  StatisticSubType exist=settings.getByLocator(one.getId());  expect(exist,notNull()).verify(ISSUE_TYPE_NOT_FOUND,one.getId());  expect(exist.getTypeRef().equals(expectedType.getValue()) || exist.getTypeRef().equals(IssueCounter.GROUP_TOTAL),equalTo(true)).verify(FORBIDDEN_OPERATION,"You cannot change sub-type references to global type.");  if (Sets.newHashSet(AUTOMATION_BUG.getLocator(),PRODUCT_BUG.getLocator(),SYSTEM_ISSUE.getLocator(),NO_DEFECT.getLocator(),TO_INVESTIGATE.getLocator(),IssueCounter.GROUP_TOTAL).contains(exist.getLocator())) {    fail().withError(FORBIDDEN_OPERATION,"You cannot edit predefined global issue types.");  }  StatisticSubType type=new StatisticSubType(one.getId(),one.getTypeRef(),one.getLongName(),one.getShortName(),one.getColor());  settings.setByLocator(type);}  }
class C{  private TemplateDruidQuery buildTimeGrainCounterQuery(){  Set<Aggregation> timedAggs=Collections.emptySet();  Set<PostAggregation> timedPostAggs=Collections.singleton(COUNT_INNER);  return new TemplateDruidQuery(timedAggs,timedPostAggs,innerGrain);}  }
class C{  @Override public void onTmpFilesCopied(ResultCode result){  dismissLoadingDialog();  finish();}  }
class C{  @Override public boolean hasNext() throws IOException {  return daa2QuerySAMIterator.hasNext();}  }
class C{  public DuringExtended(){  super(null,null);}  }
class C{  private static <T>List<T> asList(Set<T> a,Set<T> b){  if (a == null || b == null || a.isEmpty() || b.isEmpty()) {    return Collections.<T>emptyList();  }  if (a.size() < b.size()) {    List<T> c=new ArrayList<T>(a);    c.retainAll(b);    return c;  } else {    List<T> c=new ArrayList<T>(b);    c.retainAll(a);    return c;  }}  }
class C{  @Override public boolean retainAll(Collection<?> c){  return backedSet.retainAll(c);}  }
class C{  public static void toggleViewVisibility(View view,boolean setVisible){  if (view == null) {    return;  }  int visibility=View.GONE;  if (setVisible) {    visibility=View.VISIBLE;  }  view.setVisibility(visibility);}  }
class C{  public synchronized void animatePan(double dx,double dy,long duration){  double panx=dx / m_transform.getScaleX();  double pany=dy / m_transform.getScaleY();  animatePanAbs(panx,pany,duration);}  }
class C{  public Optional<Number> max(){  String dataType=checkSelectedResourceTypesHaveCorrectDataType(statisticsResourceTypes);  if (!selectedTypesHaveInstanceInSubgraph(statisticsResourceTypes,subtypes))   return Optional.empty();  Set<String> allSubtypes=statisticsResourceTypes.stream().map(null).collect(Collectors.toSet());  allSubtypes.addAll(subtypes);  allSubtypes.addAll(statisticsResourceTypes);  MindmapsComputer computer=Mindmaps.factory(Mindmaps.DEFAULT_URI,keySpace).getGraphComputer();  ComputerResult result=computer.compute(new DegreeVertexProgram(allSubtypes),new MaxMapReduce(statisticsResourceTypes,dataType));  Map<String,Number> max=result.memory().get(MindmapsMapReduce.MAP_REDUCE_MEMORY_KEY);  return Optional.of(max.get(MaxMapReduce.MEMORY_KEY));}  }
class C{  public boolean isAnyStepCompleted(){  for (  boolean completedStep : completedSteps) {    if (completedStep) {      return true;    }  }  return false;}  }
class C{  public GlobalVarNode makeGlobalVarNode(Object value,Type type){  if (opts.rta()) {    value=null;    type=RefType.v("java.lang.Object");  }  GlobalVarNode ret=valToGlobalVarNode.get(value);  if (ret == null) {    valToGlobalVarNode.put(value,ret=new GlobalVarNode(this,value,type));    addNodeTag(ret,null);  } else   if (!(ret.getType().equals(type))) {    throw new RuntimeException("Value " + value + " of type "+ type+ " previously had type "+ ret.getType());  }  return ret;}  }
class C{  public static List<String> explodeClassPath(String classPath){  List<String> ret=new ArrayList<String>();  StringTokenizer tokenizer=new StringTokenizer(classPath,File.pathSeparator);  while (tokenizer.hasMoreTokens()) {    String originalDir=tokenizer.nextToken();    String canonicalDir;    try {      canonicalDir=new File(originalDir).getCanonicalPath();      ret.add(canonicalDir);    } catch (    IOException e) {      throw new CompilationDeathException("Couldn't resolve classpath entry " + originalDir + ": "+ e);    }  }  return ret;}  }
class C{  public double chiSquareTest(final double[] expected,final long[] observed) throws MathIllegalArgumentException, MathIllegalStateException {  final ChiSquaredDistribution distribution=new ChiSquaredDistribution(expected.length - 1.0);  return 1.0 - distribution.cumulativeProbability(chiSquare(expected,observed));}  }
class C{  private static String sanitizeTodos(DiagCollector diagCollector,Location location,@Nullable String source,boolean reportWarning){  if (Strings.isNullOrEmpty(source)) {    return source;  }  String[] sourceSplitByTodo=Pattern.compile("\\bTODO(\\(.*?\\))?:").split(source);  if (sourceSplitByTodo.length > 1 && reportWarning) {    diagCollector.addDiag(Diag.warning(location,"A TODO comment was found. All comments from this TODO to the end of the comment " + "block will be removed from the generated documentation. This TODO Comment " + "should be wrapped in internal comment tags, \"(--\" and \"--)\", to prevent "+ "non-internal documentation after the TODO from being removed from the "+ "generated documentation."));  }  String result=sourceSplitByTodo[0];  return result.endsWith("\n") ? result.substring(0,result.length() - 1) : result;}  }
class C{  public SimpleTextDocument(){  Graph=new DocumentWordGraph();  Histogram=new DocumentWordHistogram();}  }
class C{  public Utterance(Voice voice,List tokenList){  this(voice);  setTokenList(tokenList);}  }
class C{  public static boolean isDateBeforeToday(String date){  if (isEmpty(date))   return defaultEmptyOK;  int dateSlash1=date.indexOf("/");  int dateSlash2=date.lastIndexOf("/");  if (dateSlash1 <= 0)   return defaultEmptyOK;  java.util.Date passed=null;  if (dateSlash1 == dateSlash2) {    String month=date.substring(0,dateSlash1);    String day="28";    String year=date.substring(dateSlash1 + 1);    if (!isDate(year,month,day))     return false;    try {      int monthInt=Integer.parseInt(month);      int yearInt=Integer.parseInt(year);      Calendar calendar=Calendar.getInstance();      calendar.set(yearInt,monthInt - 1,0,0,0,0);      calendar.add(Calendar.MONTH,1);      passed=new java.util.Date(calendar.getTime().getTime());    } catch (    Exception e) {      passed=null;    }  } else {    String month=date.substring(0,dateSlash1);    String day=date.substring(dateSlash1 + 1,dateSlash2);    String year=date.substring(dateSlash2 + 1);    if (!isDate(year,month,day))     return false;    passed=UtilDateTime.toDate(month,day,year,"0","0","0");  }  java.util.Date now=UtilDateTime.nowDate();  if (passed != null) {    return passed.before(now);  } else {    return false;  }}  }
class C{  private void openWithoutDataSource(){  connectedToDataSourceFlag=false;  if (this.editorFileInterface.getSLD() == null)   return;  createInternalDataSource();}  }
class C{  public static Class<?> loadClass(String className,ClassLoader loader) throws ClassNotFoundException {  Class<?> theClass=null;  if (primitives.containsKey(className)) {    return primitives.get(className);  }  int genericsStart=className.indexOf("<");  if (genericsStart != -1)   className=className.substring(0,genericsStart);  if (className.endsWith("[]")) {    if (Character.isLowerCase(className.charAt(0)) && className.indexOf(".") < 0) {      String prefix=className.substring(0,1).toUpperCase();      if (className.startsWith("long")) {        prefix="J";      } else       if (className.startsWith("boolean")) {        prefix="Z";      }      className="[" + prefix;    } else {      Class<?> arrayClass=loadClass(className.replace("[]",""),loader);      className="[L" + arrayClass.getName().replace("[]","") + ";";    }  }  if (classAlias.containsKey(className)) {    className=classAlias.get(className);  }  if (loader == null)   loader=Thread.currentThread().getContextClassLoader();  theClass=Class.forName(className,true,loader);  return theClass;}  }
class C{  @Override public double[] makeCumulativeTestValues(){  return new double[]{0d,5.9049e-06,0.0001436859,0.0015903864,0.0105920784,0.0473489874,0.1502683326,0.3503892816,0.6172172136,0.8506916541,0.9717524751,1d,1d};}  }
class C{  @Override public void endParameterEntity(String name,Augmentations augs) throws XNIException {}  }
class C{  public Instruction locateInst(int index){  return locateInstr(index,0,icount);}  }
class C{  public String toString(){  return "MulticastAnnouncement[" + sequenceNumber + ", "+ host+ ":"+ port+ ", "+ Arrays.asList(groups)+ ", "+ serviceID+ "]";}  }
class C{  public void init(float startX,float startY,float endX,float endY){  setStart(new PointF(startX,startY));  setEnd(new PointF(endX,endY));}  }
class C{  public SQLProcessor(Delegator delegator,GenericHelperInfo helperInfo,Connection connection){  this.delegator=delegator;  this.helperInfo=helperInfo;  this._connection=connection;  if (_connection != null) {    _manualTX=false;  }}  }
class C{  public JLookupSwitchStmt(Value key,List<IntConstant> lookupValues,List<? extends UnitBox> targets,UnitBox defaultTarget){  this(Jimple.v().newImmediateBox(key),lookupValues,targets.toArray(new UnitBox[targets.size()]),defaultTarget);}  }
class C{  protected String makeAbsolute(String sysid){  URL local=null;  sysid=fixSlashes(sysid);  try {    local=new URL(base,sysid);  } catch (  MalformedURLException e) {    catalogManager.debug.message(1,"Malformed URL on system identifier",sysid);  }  if (local != null) {    return local.toString();  } else {    return sysid;  }}  }
class C{  public static boolean isWindowsPlatform(){  String os=System.getProperty("os.name");  return (os != null && os.startsWith(WIN_ID));}  }
class C{  public CipherText(byte[] input,byte[] iv){  prefix=new byte[32];  content=new ArrayList<>();  int roundedsize=input.length + (256 - (input.length % 256));  for (int i=0; i < roundedsize / 256; ++i) {    content.add(new byte[256]);  }  totalsize=roundedsize + 32;  for (int i=0; i < 32; ++i)   prefix[i]=iv[i];  for (int i=0; i < input.length; ++i)   content.get(i / 256)[i % 256]=input[i];  byte[] last=content.get(content.size() - 1);  last[last.length - 1]=(byte)(256 - (input.length % 256));}  }
class C{  public double computeObjectiveValue(double[] params){  super.incrementEvaluationCount();  return function.value(params);}  }
class C{  @Deprecated public T[] mapDerivative(final FieldODEStateAndDerivative<T> state){  return state.getCompleteDerivative();}  }
class C{  public static int download(String url,File f){  log.debug("url=\"" + url + "\"");  String[] ss=url.split(" ");  url=ss[ss.length - 1];  DefaultHttpClient client=getClient(url);  if (client != null) {    HttpGet get=null;    try {      get=new HttpGet(url);      if (!get.containsHeader("User-Agent")) {        get.addHeader("User-Agent",UA);      }      log.debug("get url=" + url);      HttpResponse resp=client.execute(get);      if (resp.getStatusLine().getStatusCode() == 200) {        HttpEntity e=resp.getEntity();        InputStream in=e.getContent();        f.getParentFile().mkdirs();        FileOutputStream out=new FileOutputStream(f);        return IOUtil.copy(in,out);      }      return 0;    } catch (    Exception e) {      log.error("\"" + url + "\"",e);    } finally {      if (get != null)       get.abort();    }  }  return 0;}  }
class C{  private Collection<Var> migrateColumns(SQLTable currentTable){  List<Var> vars=new ArrayList<>();  String tableType=currentTable.getEntityType();  Map<String,ResourceType.DataType> columns=currentTable.getColumns();  Map<String,String> foreignColumns=currentTable.getForeignKeyColumns();  for (  String column : columns.keySet()) {    ResourceType.DataType columnType=columns.get(column);    if (foreignColumns.containsKey(column)) {      vars.addAll(migrateAsRelation(tableType,column,foreignColumns.get(column)));    } else {      vars.addAll(migrateAsResource(tableType,columnType,column));    }  }  return vars;}  }
class C{  public Set<UserDefinedAction> reRegisterTask(UserDefinedAction action,TaskActivation newActivation){  unregisterTask(action);  action.getActivation().getHotkeys().clear();  action.getActivation().getHotkeys().addAll(newActivation.getHotkeys());  action.getActivation().getMouseGestures().clear();  action.getActivation().getMouseGestures().addAll(newActivation.getMouseGestures());  return registerTask(action);}  }
class C{  public static void printException(final Exception e){  e.printStackTrace(instance);}  }
class C{  protected void assertClose(String msg,RealMatrix m,RealMatrix n,double tolerance){  Assert.assertTrue(msg,m.subtract(n).getNorm() < tolerance);}  }
class C{  public static int calculateXenMemory(int deliveryControllerCount,int vCenterServerCount){  final int dc=Integer.parseInt(VDICalculator.DEFAULTS.getString("xen.controller.memory.default")) * deliveryControllerCount;  final int vc=Integer.parseInt(VDICalculator.DEFAULTS.getString("xen.vcenter.memory.default")) * vCenterServerCount;  return dc + vc;}  }
class C{  public GroupsIsMemberQueryWithExtended userId(Integer value){  return unsafeParam("user_id",value);}  }
class C{  private List<TestItem> updateChildrenOfLaunch(String launchId,Set<String> launches,boolean extendDescription){  List<TestItem> testItems=launches.stream().map(null).flatMap(null).collect(toList());  testItemRepository.save(testItems);  return testItems.stream().filter(null).collect(toList());}  }
class C{  private Map<String,ChartObject> buildRange(List<ChartObject> base,Period period){  final LongSummaryStatistics statistics=base.stream().mapToLong(null).summaryStatistics();  final DateTime start=new DateTime(statistics.getMin());  final DateTime end=new DateTime(statistics.getMax());  DateTime intermediate=start;  final LinkedHashMap<String,ChartObject> map=new LinkedHashMap<>();  if (base.isEmpty())   return map;  while (intermediate.isBefore(end)) {    map.put(intermediate.toString(DATE_PATTERN),createChartObject(base.get(0)));switch (period) {case DAY:      intermediate=intermediate.plusDays(1);    break;case WEEK:  intermediate=intermediate.plusDays(1);break;case MONTH:intermediate=intermediate.plusMonths(1);break;}}map.put(end.toString(DATE_PATTERN),createChartObject(base.get(0)));return map;}  }
class C{  public String tableName(){  return tblName;}  }
class C{  private static void verify(boolean expression,String falseMessage){  if (!expression) {    throw new IllegalStateException(falseMessage);  }}  }
class C{  public MirrorOperationStatisticsImpl(){}  }
class C{  @Override public void touchNavigatorIcon(Activity a){  ((CollectionActivity)a).finishActivity(SwipeBackLayout.DOWN_DIR,false);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public static Aggregate<Map<String,Concept>,Optional<?>> max(String varName){  return Aggregates.max(varName);}  }
class C{  public void init$Children(){}  }
class C{  public static void validateKey(String key) throws StateStoreException {  if (StringUtils.isBlank(key)) {    throw new StateStoreException("Key cannot be blank or null");  }  if (key.contains("/")) {    throw new StateStoreException("Key cannot contain '/'");  }}  }
class C{  public void invalidateAll(){  if (m_tuples == null)   return;  for (int i=0; i < m_tuples.length; ++i)   invalidate(i);}  }
class C{  private void ensureDependenciesResolved(){  new GrantPermission(new UmbrellaGrantPermission());}  }
class C{  static Type<?> parseTypeDescriptor(final String typeDescriptor) throws InvalidTypeDescriptorException {  final ClassLoader cl=Thread.currentThread().getContextClassLoader();  StringBuilder descriptor=new StringBuilder(typeDescriptor);  int split=descriptor.indexOf("<");  if (split >= 0) {    String className=descriptor.substring(0,split);    if (!descriptor.subSequence(descriptor.length() - 1,descriptor.length()).equals(">")) {      throw new InvalidTypeDescriptorException();    } else {      descriptor.setLength(descriptor.length() - 1);      descriptor.replace(0,split + 1,"");    }    String[] subDescriptors=splitTypeArguments(descriptor.toString());    Type<?>[] typeArguments=new Type<?>[subDescriptors.length];    int index=-1;    for (    String subDescriptor : subDescriptors) {      typeArguments[++index]=parseTypeDescriptor(subDescriptor);    }    return TypeFactory.valueOf(loadClass(className,cl),typeArguments);  } else {    return TypeFactory.valueOf(loadClass(typeDescriptor,cl));  }}  }
class C{  public void newMethod(SootMethod m){  unitToRead=new HashMap<Unit,RWSet>();  unitToWrite=new HashMap<Unit,RWSet>();  localToReachingObjects=new HashMap<Local,PointsToSet>();  currentMethod=m;  sea.findNTRWSets(currentMethod);}  }
class C{  public NewsfeedGetRecommendedQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  @Override public void populateExpression(Object objValue){  if (objValue instanceof ReferencedEnvelope) {    populateField((ReferencedEnvelope)objValue);    valueUpdated();  }}  }
class C{  public SimpleAsyncPollingContainerConfigurer eventListenerAnnotation(Object eventListener){  AnnotationEventListenerAdapter annotationEventListenerAdapter=new AnnotationEventListenerAdapter();  annotationEventListenerAdapter.setDelegate(eventListener);  annotationEventListenerAdapter.afterPropertiesSet();  pollingEventListenerContainer.setEventListener(annotationEventListenerAdapter);  return this;}  }
class C{  public boolean equals(Datagram other){  if (!(other instanceof LPCDatagram))   return false;  LPCDatagram otherLPC=(LPCDatagram)other;  if (this.duration != otherLPC.duration)   return false;  if (this.quantizedCoeffs.length != otherLPC.quantizedCoeffs.length)   return false;  if (this.quantizedResidual.length != otherLPC.quantizedResidual.length)   return false;  for (int i=0; i < this.quantizedCoeffs.length; i++) {    if (this.quantizedCoeffs[i] != otherLPC.quantizedCoeffs[i])     return false;  }  for (int i=0; i < this.quantizedResidual.length; i++) {    if (this.quantizedResidual[i] != otherLPC.quantizedResidual[i])     return false;  }  return true;}  }
class C{  @Override public boolean isEqualNode(Node arg){  if (!super.isEqualNode(arg)) {    return false;  }  if (needsSyncData()) {    synchronizeData();  }  DocumentTypeImpl argDocType=(DocumentTypeImpl)arg;  if ((getPublicId() == null && argDocType.getPublicId() != null) || (getPublicId() != null && argDocType.getPublicId() == null) || (getSystemId() == null && argDocType.getSystemId() != null)|| (getSystemId() != null && argDocType.getSystemId() == null)|| (getInternalSubset() == null && argDocType.getInternalSubset() != null)|| (getInternalSubset() != null && argDocType.getInternalSubset() == null)) {    return false;  }  if (getPublicId() != null) {    if (!getPublicId().equals(argDocType.getPublicId())) {      return false;    }  }  if (getSystemId() != null) {    if (!getSystemId().equals(argDocType.getSystemId())) {      return false;    }  }  if (getInternalSubset() != null) {    if (!getInternalSubset().equals(argDocType.getInternalSubset())) {      return false;    }  }  NamedNodeMapImpl argEntities=argDocType.entities;  if ((entities == null && argEntities != null) || (entities != null && argEntities == null))   return false;  if (entities != null && argEntities != null) {    if (entities.getLength() != argEntities.getLength())     return false;    for (int index=0; entities.item(index) != null; index++) {      Node entNode1=entities.item(index);      Node entNode2=argEntities.getNamedItem(entNode1.getNodeName());      if (!entNode1.isEqualNode(entNode2))       return false;    }  }  NamedNodeMapImpl argNotations=argDocType.notations;  if ((notations == null && argNotations != null) || (notations != null && argNotations == null))   return false;  if (notations != null && argNotations != null) {    if (notations.getLength() != argNotations.getLength())     return false;    for (int index=0; notations.item(index) != null; index++) {      Node noteNode1=notations.item(index);      Node noteNode2=argNotations.getNamedItem(noteNode1.getNodeName());      if (!noteNode1.isEqualNode(noteNode2))       return false;    }  }  return true;}  }
class C{  private static String generateApplicationTitleString(){  return String.format("%s %s \251%s %s",APP_NAME,Version.getVersionNumber(),APP_COPYRIGHT_YEAR,APP_COMPANY);}  }
class C{  public static StatefulHash sha384(){  return Hashes.createStateful(SimpleHashParameters.SHA384);}  }
class C{  @Override protected void onScrollChanged(int l,int t,int oldl,int oldt){  super.onScrollChanged(l,t,oldl,oldt);  if (mHeaderView == null)   return;  if (mHeaderView.getTop() < 0 && mHeaderView.getLayoutParams().height > mHeaderViewHeight) {    mHeaderView.getLayoutParams().height+=mHeaderView.getTop();    mOnRefreshDistanceListener.refreshDistance(mHeaderView.getTop());    mHandler.obtainMessage(1,mHeaderView.getTop(),0,mHeaderView).sendToTarget();  }}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  trimToFileCount();  journalWriter.close();  journalWriter=null;}  }
class C{  public void mouseReleased(MouseEvent me){  viewer.resetCursor();  stillDownWithoutMoving=false;  if (current == inScrollByMouse) {    return;  }  viewer.fireDoRelease(hitNodes);  viewer.fireDoRelease(hitEdges);  if (me.isPopupTrigger()) {    inPopup=true;    viewer.setCursor(Cursor.getDefaultCursor());    if (hitNodes.size() != 0)     viewer.fireNodePopup(me,hitNodes); else     if (hitNodeLabels.size() != 0)     viewer.fireNodeLabelPopup(me,hitNodeLabels); else     if (hitEdges.size() != 0)     viewer.fireEdgePopup(me,hitEdges); else     if (hitEdgeLabels.size() != 0)     viewer.fireEdgeLabelPopup(me,hitEdgeLabels); else     viewer.firePanelPopup(me);    viewer.resetCursor();    return;  }  if (current == inRubberband) {    Rectangle rect=new Rectangle(downX,downY,0,0);    rect.add(me.getX(),me.getY());    getHits(rect);    selectNodesEdges(hitNodes,hitEdges,me.isShiftDown(),me.getClickCount());    viewer.repaint();  } else   if (current == inNewEdge) {    NodeSet firstHit=getHitNodes(downX,downY);    if (firstHit.size() == 1) {      Node v=firstHit.getFirstElement();      NodeSet secondHit=getHitNodes(me.getX(),me.getY());      Node w=null;      if (secondHit.size() == 0) {        try {          Point2D location=viewer.trans.d2w(me.getPoint());          viewer.setDefaultNodeLocation(location);          Edge e=viewer.newEdge(v,null);          if (e != null) {            w=viewer.getGraph().getTarget(e);            viewer.setLocation(w,location);          }        } catch (        NotOwnerException ex) {        }      } else       if (secondHit.size() == 1) {        w=secondHit.getFirstElement();        if (w != null) {          if (v != w) {            viewer.newEdge(v,w);          }        }      }      viewer.repaint();    }  } else   if (current == inMoveNodeLabel) {    viewer.repaint();  } else   if (current == inMoveEdgeLabel) {    viewer.repaint();  }}  }
class C{  public static void main(String[] args){  System.out.println("Solutions:\n" + new NQueens(12).parallelStream().limit(10).map(null).collect(Collectors.joining("\n\n")));}  }
class C{  public HumanTime ms(){  return ms(1);}  }
class C{  public PropertyPanel(ExpressionFilterInterface parent){  this.parent=parent;  createUI();}  }
class C{  @Override public void onAttachedToWindow(){  super.onAttachedToWindow();  setupBounds();  setupPaints();  invalidate();}  }
class C{  public void attachView(@NonNull final V view){  if (view == null) {    throw new IllegalStateException("the view cannot be set to null. Call #detachView() instead");  }  if (isDestroyed()) {    throw new IllegalStateException("The presenter is already in it's terminal state and waits for garbage collection. " + "Binding a view is not allowed");  }  if (isViewAttached()) {    if (view.equals(mView)) {      TiLog.v(TAG,"not calling onAttachView(), view already attached");      return;    } else {      throw new IllegalStateException("a view is already attached, call #detachView first");    }  }  if (!isInitialized()) {    throw new IllegalStateException("Presenter is not created, call #create() first");  }  mView=view;  moveToState(State.VIEW_ATTACHED,false);  mCalled=false;  TiLog.v(TAG,"onAttachView(TiView)");  onAttachView(view);  if (!mCalled) {    throw new SuperNotCalledException("Presenter " + this + " did not call through to super.onAttachView(TiView)");  }  mCalled=false;  TiLog.v(TAG,"deprecated onWakeUp()");  onWakeUp();  if (!mCalled) {    throw new SuperNotCalledException("Presenter " + this + " did not call through to super.onWakeUp()");  }  moveToState(State.VIEW_ATTACHED,true);}  }
class C{  public void showError(Drawable errorImageDrawable,String errorTextTitle,String errorTextContent,String errorButtonText,OnClickListener onClickListener){  switchState(ERROR,errorImageDrawable,errorTextTitle,errorTextContent,errorButtonText,onClickListener,Collections.<Integer>emptyList());}  }
class C{  @Override public void commence(HttpServletRequest request,HttpServletResponse response,AuthenticationException arg2) throws IOException, ServletException {  log.debug("Pre-authenticated entry point called. Rejecting access");  response.sendError(HttpServletResponse.SC_UNAUTHORIZED,"Access Denied");}  }
class C{  public void add(E o){  if (o == null)   o=(E)NULL_CONST;  if (index == LENGTH - 1) {    Object[] temp=new Object[LENGTH];    q[index]=temp;    q=temp;    index=0;  }  q[index++]=o;}  }
class C{  public void onRequestPermissionResult(int requestCode,String[] permissions,int[] grantResults) throws JSONException {}  }
class C{  public static double angle(Vector2D v1,Vector2D v2) throws MathRuntimeException {  double normProduct=v1.getNorm() * v2.getNorm();  if (normProduct == 0) {    throw new MathRuntimeException(LocalizedCoreFormats.ZERO_NORM);  }  double dot=v1.dotProduct(v2);  double threshold=normProduct * 0.9999;  if ((dot < -threshold) || (dot > threshold)) {    final double n=FastMath.abs(MathArrays.linearCombination(v1.x,v2.y,-v1.y,v2.x));    if (dot >= 0) {      return FastMath.asin(n / normProduct);    }    return FastMath.PI - FastMath.asin(n / normProduct);  }  return FastMath.acos(dot / normProduct);}  }
class C{  @Override protected Expression generateExpression(){  Expression expression=null;  if (slider != null) {    expression=getFilterFactory().literal(getDoubleValue());  }  return expression;}  }
class C{  public HectorCassandraClientConfigurer port(Integer port){  this.port=port;  return this;}  }
class C{  private static Properties loadProperties(){  Properties properties=new Properties();  File file=new File("DataPartitioner.properties");  FileInputStream fis=null;  try {    if (file.exists()) {      fis=new FileInputStream(file);      properties.load(fis);    }  } catch (  Exception e) {    LOGGER.error(e,e.getMessage());  } finally {    if (null != fis) {      try {        fis.close();      } catch (      IOException e) {        LOGGER.error(e,e.getMessage());      }    }  }  return properties;}  }
class C{  public void end(@SwingCoordinate int x,@SwingCoordinate int y,@InputEventMask int modifiers,boolean canceled){}  }
class C{  boolean equivTo(Operand other){  if (other.value == null && value == null)   return true;  return stackOrValue().equivTo(other.stackOrValue());}  }
class C{  public boolean forEachEntry(TObjectLongProcedure<K> procedure){  K[] keys=(K[])_set;  long[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (keys[i] != FREE && keys[i] != REMOVED && !procedure.execute(keys[i],values[i])) {      return false;    }  }  return true;}  }
class C{  public static void closeSocket(Socket sock) throws IOException {  byte[] header;  header=packHeader(FDFS_PROTO_CMD_QUIT,0,(byte)0);  sock.getOutputStream().write(header);  sock.close();}  }
class C{  public EntryInfo __getEntryInfo(){  return entryInfo;}  }
class C{  public SourceDataTagQuality(){  this.qualityCode=SourceDataTagQualityCode.OK;}  }
class C{  private boolean checkRecordIDValidity(RecordID rid) throws DatabaseException {  return false;}  }
class C{  public void saveViewsFor(DataSource dataSource,Snapshot snapshot){  Set<DataSourceViewProvider> compatibleProviders=getCompatibleProviders(dataSource);  for (  DataSourceViewProvider compatibleProvider : compatibleProviders)   if (compatibleProvider.supportsViewFor(dataSource) && compatibleProvider.supportsSaveViewFor(dataSource,snapshot.getClass()))   compatibleProvider.viewSaveView(dataSource,snapshot);}  }
class C{  @Override public WebElement findElement(){  SearchContext context=scopeFactory instanceof ParentElementLocatorProvider && !globalCurrentScope ? ((ParentElementLocatorProvider)scopeFactory).getCurrentScope().findElement() : searchContext;  return context.findElement(selector);}  }
class C{  public boolean isPathBetween(Stmt sink,Stmt source){  Set<ResultSourceInfo> sources=null;  for (  ResultSinkInfo sI : this.results.keySet()) {    if (sI.getSink().equals(sink)) {      sources=this.results.get(sI);      break;    }  }  if (sources == null)   return false;  for (  ResultSourceInfo src : sources)   if (src.getAccessPath().equals(source))   return true;  return false;}  }
class C{  public static long delete(String collection,Bson query){  try {    MongoCollection<Document> db=MongoHelper.getCollection(collection);    if (db != null) {      DeleteResult r=db.deleteMany(query);      return r.getDeletedCount();    }    return -1;  } catch (  Exception e) {    if (log.isErrorEnabled())     log.error(e.getMessage(),e);  }  return -1;}  }
class C{  public JSONTokener(String s){  this(new StringReader(s));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_FPHeal_Instant_HEAL_ME_TO_SELF(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200367,num0,skillname);}  }
class C{  public static Configuration createAlarm(){  Configuration configuration=new Configuration();  Alarm alarm=Alarm.create("faultFamily","faultMember",1337,new ValueCondition(Integer.class,1)).id(2000L).dataTagId(1000L).build();  configuration.addEntity(alarm);  return configuration;}  }
class C{  public static String decodeFilename(Map<String,String> map){  if (map != null) {    return map.get(DataSourceConnectorInterface.FILE_MAP_KEY);  }  return null;}  }
class C{  protected void removeTrackedServices(){  for (  ServiceTracker<ExtHttpService,ExtHttpService> tracker : trackers) {    tracker.close();  }}  }
class C{  @Override public void performFinishingActions(){}  }
class C{  public IOUtils(){  super();}  }
class C{  public static void initFileAndLogMgr(String dirName){  initFileMgr(dirName);  logMgr=new LogMgr();}  }
class C{  protected void assertCurrentVariantWasSet(String errorMessage,List<Long> localeIds,Long tmTextUnitId){  for (  Long localeId : localeIds) {    TMTextUnitCurrentVariant currentVariant=tmTextUnitCurrentVariantRepository.findByLocale_IdAndTmTextUnit_Id(localeId,tmTextUnitId);    assertNotNull(errorMessage,currentVariant);  }}  }
class C{  public void writeStringNoCompression(String str) throws IOException {  if (str == null) {    writeInt(0);  } else {    writeInt(str.length());    for (int i=0; i < str.length(); i++)     io.write((byte)str.charAt(i));  }}  }
class C{  public RequestHandle delete(Context context,String url,Header[] headers,ResponseHandlerInterface responseHandler){  final HttpDelete delete=new HttpDelete(url);  if (headers != null)   delete.setHeaders(headers);  return sendRequest(httpClient,httpContext,delete,null,responseHandler,context);}  }
class C{  public FaveRemoveLinkQuery(VkApiClient client,UserActor actor,String linkId){  super(client,"fave.removeLink",OkResponse.class);  accessToken(actor.getAccessToken());  linkId(linkId);}  }
class C{  public TupleManager(Table t,Graph g,Class tupleType){  init(t,g,tupleType);}  }
class C{  public static byte[] readSegment(File file,long start,int length) throws Exception {  Preconditions.checkArgument(start >= 0,"start < 0");  Preconditions.checkArgument(length >= 0,"length < 0");  byte data[];  boolean threw=true;  RandomAccessFile raf=new RandomAccessFile(file,"r");  try {    raf.seek(start);    data=new byte[length];    int tot=0;    while (tot < length) {      int r=raf.read(data,tot,length - tot);      if (r < 0) {        throw new EOFException();      }      tot+=r;    }    threw=false;  }  finally {    Closeables.close(raf,threw);  }  return data;}  }
class C{  public Properties readSettings(){  try {    String pacScriptUrl=detectScriptUrlPerDHCP();    if (pacScriptUrl == null) {      pacScriptUrl=detectScriptUrlPerDNS();    }    if (pacScriptUrl == null) {      return null;    }    Properties result=new Properties();    result.setProperty("url",pacScriptUrl);    return result;  } catch (  IOException e) {    return new Properties();  }}  }
class C{  public static byte[] readPackedSequence(ByteInputBuffer buffer,int query_len,int bits){  int size=(query_len * bits + 7) / 8;  return buffer.readBytes(size);}  }
class C{  public synchronized SourceDataTagValue update(final ValueUpdate update,SourceDataTagQuality quality){  if (this.currentValue == null) {    initCurrentValue();  }  this.currentValue.setValue(update.getValue());  this.currentValue.setValueDescription(update.getValueDescription());  this.currentValue.setTimestamp(new Timestamp(update.getSourceTimestamp()));  this.currentValue.setDaqTimestamp(new Timestamp(System.currentTimeMillis()));  this.currentValue.setQuality(quality);  return this.currentValue.clone();}  }
class C{  private boolean sameType(Object flowSet){  return (flowSet instanceof DavaFlowSet);}  }
class C{  public Builder withDebug(boolean enabled){  this.mDebugEnabled=enabled;  return this;}  }
class C{  @DataProvider public Object[][] assignmentDataProvider(){  return new Object[][]{new Object[]{user,"NoMatchForThisAgentValue",Constants.ASSIGNMENT_NO_PROFILE_MATCH},new Object[]{user,"Agent001",Constants.ASSIGNMENT_NEW_ASSIGNMENT},new Object[]{user,"Agent001",Constants.ASSIGNMENT_EXISTING_ASSIGNMENT}};}  }
class C{  public TokenToWords(CART usNumbersCART,PronounceableFSM prefixFSM,PronounceableFSM suffixFSM){  Log.d(Mary.LOG,"TokenToWords is loading");  this.cart=usNumbersCART;  this.prefixFSM=prefixFSM;  this.suffixFSM=suffixFSM;}  }
class C{  private void doUpdateAction(DataSupport baseObj,List<Field> supportedFields) throws SecurityException, IllegalArgumentException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {  ContentValues values=new ContentValues();  beforeUpdate(baseObj,supportedFields,values);  updating(baseObj,values);  afterUpdate(baseObj);}  }
class C{  public static void updateMediaNotificationForTab(Context context,int tabId,boolean audio,boolean video,String fullUrl){  int mediaType=getMediaType(audio,video);  if (!shouldStartService(context,mediaType,tabId))   return;  Intent intent=new Intent(context,MediaCaptureNotificationService.class);  intent.putExtra(NOTIFICATION_ID_EXTRA,tabId);  String baseUrl=fullUrl;  try {    URL url=new URL(fullUrl);    baseUrl=url.getProtocol() + "://" + url.getHost();  } catch (  MalformedURLException e) {    Log.w(TAG,"Error parsing the webrtc url " + fullUrl);  }  intent.putExtra(NOTIFICATION_MEDIA_URL_EXTRA,baseUrl);  intent.putExtra(NOTIFICATION_MEDIA_TYPE_EXTRA,mediaType);  context.startService(intent);}  }
class C{  public static DataSchema put(DataSchema schema){  return registry.put(schema.getSchemaName(),schema);}  }
class C{  static <T>AnyVal<Object> headTail(T head,ConsList<T> tail){  return new AnyConsImpl(head,null,tail,null);}  }
class C{  private void updateTagQuality(final DataTagQuality qualityUpdate){  if (!tagQuality.isAccessible()) {    Map<TagQualityStatus,String> oldQualityStates=this.tagQuality.getInvalidQualityStates();    tagQuality.setInvalidStates(qualityUpdate.getInvalidQualityStates());    if (oldQualityStates.containsKey(TagQualityStatus.PROCESS_DOWN)) {      tagQuality.addInvalidStatus(TagQualityStatus.PROCESS_DOWN,oldQualityStates.get(TagQualityStatus.PROCESS_DOWN));    } else     if (oldQualityStates.containsKey(TagQualityStatus.EQUIPMENT_DOWN)) {      tagQuality.addInvalidStatus(TagQualityStatus.EQUIPMENT_DOWN,oldQualityStates.get(TagQualityStatus.EQUIPMENT_DOWN));    } else     if (oldQualityStates.containsKey(TagQualityStatus.SUBEQUIPMENT_DOWN)) {      tagQuality.addInvalidStatus(TagQualityStatus.SUBEQUIPMENT_DOWN,oldQualityStates.get(TagQualityStatus.SUBEQUIPMENT_DOWN));    }  } else {    tagQuality.setInvalidStates(qualityUpdate.getInvalidQualityStates());  }}  }
class C{  protected void handlePreResponse(String ticket,JobsApiRequest apiRequest,AsyncResponse asyncResponse,Observable<PreResponse> preResponseObservable,boolean isEmpty){  if (isEmpty) {    handleJobResponse(ticket,apiRequest,asyncResponse);  } else {    handleResultsResponse(preResponseObservable,asyncResponse,apiRequest);  }}  }
class C{  public ThreadList(){  super();}  }
class C{  public boolean hasFeatureValue(String featureName,String featureValue){  return hasFeatureValue(getFeatureIndex(featureName),featureValue);}  }
class C{  @Override public String onDeviceReport(){  return super.onDeviceReport();}  }
class C{  Rows<Application.Name,String> cqlSelectAll(String cql){  try {    OperationResult<CqlResult<Application.Name,String>> result=driver.getKeyspace().prepareQuery(keyspace.auditlogCF()).withCql(cql).asPreparedStatement().execute();    return result.getResult().getRows();  } catch (  ConnectionException e) {    throw new RepositoryException("Can not retrieve complete auditlog.",e);  }}  }
class C{  public static EquipmentLoggerFactory createFactory(final EquipmentConfiguration econf,final ProcessConfiguration pconf,boolean useEquipmentLoggers,boolean useEquipmentAppendersOnly){  return new EquipmentLoggerFactory(econf.getHandlerClassName(),Long.valueOf(econf.getId()),econf.getName(),pconf.getProcessName(),useEquipmentLoggers,useEquipmentAppendersOnly);}  }
class C{  protected void dispatchJobCanceledEvents(ExecutionEntity activityExecution){  if (activityExecution != null) {    List<JobEntity> jobs=activityExecution.getJobs();    for (    JobEntity job : jobs) {      if (Context.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {        Context.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.JOB_CANCELED,job));      }    }    List<TimerJobEntity> timerJobs=activityExecution.getTimerJobs();    for (    TimerJobEntity job : timerJobs) {      if (Context.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {        Context.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.JOB_CANCELED,job));      }    }  }}  }
class C{  protected AionServerPacket(){  super();  setOpcode(ServerPacketsOpcodes.getOpcode(getClass()));}  }
class C{  private void determineGeometryType(StyledLayerDescriptor sld){  if (sld == null) {    return;  }  List<StyledLayer> styledLayerList=sld.layers();  int pointCount=0;  int lineCount=0;  int polygonCount=0;  int rasterCount=0;  for (  StyledLayer styledLayer : styledLayerList) {    List<Style> styleList=null;    if (styledLayer instanceof NamedLayerImpl) {      NamedLayerImpl namedLayerImpl=(NamedLayerImpl)styledLayer;      styleList=namedLayerImpl.styles();    } else     if (styledLayer instanceof UserLayerImpl) {      UserLayerImpl userLayerImpl=(UserLayerImpl)styledLayer;      styleList=userLayerImpl.userStyles();    }    if (styleList != null) {      for (      Style style : styleList) {        for (        FeatureTypeStyle fts : style.featureTypeStyles()) {          for (          Rule rule : fts.rules()) {            for (            org.opengis.style.Symbolizer symbolizer : rule.symbolizers()) {              if (symbolizer instanceof PointSymbolizer) {                pointCount++;              } else               if (symbolizer instanceof LineSymbolizer) {                lineCount++;              } else               if (symbolizer instanceof PolygonSymbolizer) {                polygonCount++;              } else               if (symbolizer instanceof RasterSymbolizer) {                rasterCount++;              }            }          }        }      }    }  }  if (pointCount > 0) {    dsInfo.setGeometryType(GeometryTypeEnum.POINT);  } else   if (lineCount > 0) {    dsInfo.setGeometryType(GeometryTypeEnum.LINE);  } else   if (polygonCount > 0) {    dsInfo.setGeometryType(GeometryTypeEnum.POLYGON);  } else   if (rasterCount > 0) {    dsInfo.setGeometryType(GeometryTypeEnum.RASTER);  }}  }
class C{  public void addContactMech(String contactMechPurposeTypeId,String contactMechId){  if (contactMechPurposeTypeId == null)   throw new IllegalArgumentException("You must specify a contactMechPurposeTypeId to add a ContactMech");  contactMechIdsMap.put(contactMechPurposeTypeId,contactMechId);}  }
class C{  public boolean isTrustedObject(Object obj,TrustVerifier.Context ctx) throws RemoteException {  if (obj == null || ctx == null) {    throw new NullPointerException();  }  RemoteMethodControl inputServer;  ServiceID inputRegistrarID;  if (obj instanceof ConstrainableRegistrarProxy) {    RegistrarProxy proxy=(RegistrarProxy)obj;    inputServer=(RemoteMethodControl)proxy.server;    inputRegistrarID=proxy.registrarID;  } else   if (obj instanceof ConstrainableAdminProxy) {    AdminProxy proxy=(AdminProxy)obj;    inputServer=(RemoteMethodControl)proxy.server;    inputRegistrarID=proxy.registrarID;  } else   if (obj instanceof ConstrainableRegistration) {    Registration reg=(Registration)obj;    if (!isTrustedObject(reg.lease,ctx)) {      return false;    }    inputServer=(RemoteMethodControl)reg.server;    inputRegistrarID=registrarID;  } else   if (obj instanceof ConstrainableEventLease || obj instanceof ConstrainableServiceLease) {    RegistrarLease lease=(RegistrarLease)obj;    inputServer=(RemoteMethodControl)lease.server;    inputRegistrarID=lease.registrarID;  } else   if (obj instanceof RemoteMethodControl) {    inputServer=(RemoteMethodControl)obj;    inputRegistrarID=registrarID;  } else {    return false;  }  TrustEquivalence trustEquiv=(TrustEquivalence)server.setConstraints(inputServer.getConstraints());  return trustEquiv.checkTrustEquivalence(inputServer) && registrarID.equals(inputRegistrarID);}  }
class C{  private String makeAbsolute(String uri){  if (uri == null) {    uri="";  }  try {    URL url=new URL(uri);    return url.toString();  } catch (  MalformedURLException mue) {    try {      URL fileURL=FileURL.makeURL(uri);      return fileURL.toString();    } catch (    MalformedURLException mue2) {      return uri;    }  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  hasSurface=false;  inactivityTimer=new InactivityTimer(this);}  }
class C{  @Override public void flush() throws IOException {  out.flush();}  }
class C{  public static List<String> formatDateList(List<Date> dateList){  List<String> newList=new ArrayList<String>();  for (  Date date : dateList)   newList.add(formatDate(date));  return newList;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);}  }
class C{  public SpearmansCorrelation(final RealMatrix dataMatrix,final RankingAlgorithm rankingAlgorithm) throws MathIllegalArgumentException {  if (rankingAlgorithm instanceof NaturalRanking && NaNStrategy.REMOVED == ((NaturalRanking)rankingAlgorithm).getNanStrategy()) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NOT_SUPPORTED_NAN_STRATEGY,NaNStrategy.REMOVED);  }  this.rankingAlgorithm=rankingAlgorithm;  this.data=rankTransform(dataMatrix);  rankCorrelation=new PearsonsCorrelation(data);}  }
class C{  public static double[] autoCorrelate(final double[] signal){  if (signal == null)   throw new NullPointerException("Received null argument");  int N=signal.length;  assert MathUtils.isPowerOfTwo(N);  double[] fft=new double[N];  System.arraycopy(signal,0,fft,0,N);  realTransform(fft,false);  fft[0]=fft[0] * fft[0];  fft[1]=fft[1] * fft[1];  for (int i=2; i < N; i+=2) {    fft[i]=fft[i] * fft[i] + fft[i + 1] * fft[i + 1];    fft[i + 1]=0;  }  realTransform(fft,true);  return fft;}  }
class C{  public boolean hasAnyAuthority(Collection<String> auths){  Set<String> all=new HashSet<>(getAllAuthorities());  return all.removeAll(auths);}  }
class C{  private Future<Integer> transmit() throws BKTransmitException, LockingException, WriteException, InvalidEnvelopedEntryException {  EntryBuffer recordSetToTransmit;  transmitLock.lock();  try {synchronized (this) {      checkWriteLock();      if (!transmitResult.compareAndSet(BKException.Code.OK,BKException.Code.OK)) {        LOG.error("Log Segment {} Trying to write to an errored stream; Error is {}",fullyQualifiedLogSegment,BKException.getMessage(transmitResult.get()));        throw new BKTransmitException("Trying to write to an errored stream;" + " Error code : (" + transmitResult.get() + ") "+ BKException.getMessage(transmitResult.get()),transmitResult.get());      }      if (recordSetWriter.getNumRecords() == 0) {        transmitDataMisses.inc();        return null;      }      recordSetToTransmit=recordSetWriter;      recordSetWriter=newRecordSetWriter();      outstandingBytes=0;      if (recordSetToTransmit.hasUserRecords()) {        numBytes+=recordSetToTransmit.getNumBytes();        numFlushesSinceRestart++;      }    }    Buffer toSend;    try {      toSend=recordSetToTransmit.getBuffer();      FailpointUtils.checkFailPoint(FailpointUtils.FailPointName.FP_TransmitFailGetBuffer);    } catch (    IOException e) {      if (e instanceof InvalidEnvelopedEntryException) {        alertStatsLogger.raise("Invalid enveloped entry for segment {} : ",fullyQualifiedLogSegment,e);      }      LOG.error("Exception while enveloping entries for segment: {}",new Object[]{fullyQualifiedLogSegment},e);      transmitResult.set(BKException.Code.WriteException);      if (e instanceof InvalidEnvelopedEntryException) {        alertStatsLogger.raise("Invalid enveloped entry for segment {} : ",fullyQualifiedLogSegment,e);        throw (InvalidEnvelopedEntryException)e;      } else {        throw new WriteException(streamName,"Envelope Error");      }    }synchronized (this) {      BKTransmitPacket packet=new BKTransmitPacket(recordSetToTransmit);      packetPrevious=packet;      entryWriter.asyncAddEntry(toSend.getData(),0,toSend.size(),this,packet);      if (recordSetToTransmit.hasUserRecords()) {        transmitDataSuccesses.inc();      } else {        transmitControlSuccesses.inc();      }      lastTransmit.reset().start();      outstandingTransmits.incrementAndGet();      controlFlushNeeded=false;      return packet.getTransmitFuture();    }  }  finally {    transmitLock.unlock();  }}  }
class C{  public String[] asReference(IProject[] projects,ProjectSetSerializationContext context,IProgressMonitor monitor) throws TeamException {  String[] result=new String[projects.length];  for (int i=0; i < projects.length; i++) {    result[i]=asReference(projects[i]);  }  return result;}  }
class C{  @Override public String toString(){  return degrees() + "d";}  }
class C{  public void removeAtRange(int index,int size){  final int end=Math.min(mSize,index + size);  for (int i=index; i < end; i++) {    removeAt(i);  }}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  private static void splitMult(double a[],double b[],double ans[]){  ans[0]=a[0] * b[0];  ans[1]=a[0] * b[1] + a[1] * b[0] + a[1] * b[1];  resplit(ans);}  }
class C{  public SamLocusIterator(final SamReader samReader,final IntervalList intervalList,final boolean useIndex){  this.samReader=samReader;  this.useIndex=useIndex;  if (intervalList != null) {    intervals=intervalList.uniqued().getIntervals();    this.referenceSequenceMask=new IntervalListReferenceSequenceMask(intervalList);  } else {    intervals=null;    this.referenceSequenceMask=new WholeGenomeReferenceSequenceMask(samReader.getFileHeader());  }}  }
class C{  public WallGetCommentsQuery sort(WallGetCommentsSort value){  return unsafeParam("sort",value);}  }
class C{  public static boolean isValidMobile(@NonNull String mobile){  if (!TextUtils.isEmpty(mobile) && mobile.length() == 10) {    if (mobile.startsWith("9") || mobile.startsWith("8") || mobile.startsWith("7")) {      return true;    }  }  return false;}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public static void saveToSdCard(List<Entry> entries,String path){  File sdcard=Environment.getExternalStorageDirectory();  File saved=new File(sdcard,path);  if (!saved.exists()) {    try {      saved.createNewFile();    } catch (    IOException e) {      Log.e(LOG,e.toString());    }  }  try {    BufferedWriter buf=new BufferedWriter(new FileWriter(saved,true));    for (    Entry e : entries) {      buf.append(e.getY() + "#" + e.getX());      buf.newLine();    }    buf.close();  } catch (  IOException e) {    Log.e(LOG,e.toString());  }}  }
class C{  public static void hideProgressDialog(){  hideProgressDialog(DEFAULT_TAG);}  }
class C{  @Override public boolean isKeepAliveServiceRunning(){synchronized (this) {    return this.scheduledFuture != null && !this.scheduledFuture.isCancelled();  }}  }
class C{  public static void assertEquals(Complex expected,Complex actual,double delta){  Assert.assertEquals(expected.getReal(),actual.getReal(),delta);  Assert.assertEquals(expected.getImaginary(),actual.getImaginary(),delta);}  }
class C{  public ScheduledFuture<?> scheduleTaskManager(Runnable r,long delay){  return schedule(r,delay);}  }
class C{  @SuppressWarnings("unchecked") protected <T>List<T> query(Class<T> modelClass,String[] columns,String selection,String[] selectionArgs,String groupBy,String having,String orderBy,String limit,List<AssociationsInfo> foreignKeyAssociations){  List<T> dataList=new ArrayList<T>();  Cursor cursor=null;  try {    List<Field> supportedFields=getSupportedFields(modelClass.getName());    String tableName=getTableName(modelClass);    String[] customizedColumns=getCustomizedColumns(columns,foreignKeyAssociations);    cursor=mDatabase.query(tableName,customizedColumns,selection,selectionArgs,groupBy,having,orderBy,limit);    if (cursor.moveToFirst()) {      SparseArray<QueryInfoCache> queryInfoCacheSparseArray=new SparseArray<QueryInfoCache>();      do {        T modelInstance=(T)createInstanceFromClass(modelClass);        giveBaseObjIdValue((DataSupport)modelInstance,cursor.getLong(cursor.getColumnIndexOrThrow("id")));        setValueToModel(modelInstance,supportedFields,foreignKeyAssociations,cursor,queryInfoCacheSparseArray);        if (foreignKeyAssociations != null) {          setAssociatedModel((DataSupport)modelInstance);        }        dataList.add(modelInstance);      } while (cursor.moveToNext());      queryInfoCacheSparseArray.clear();    }    return dataList;  } catch (  Exception e) {    e.printStackTrace();    throw new DataSupportException(e.getMessage());  } finally {    if (cursor != null) {      cursor.close();    }  }}  }
class C{  public Object jjtAccept(MithraQLVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  private static String doNormalize(String filename,char separator,boolean keepSeparator){  if (filename == null) {    return null;  }  int size=filename.length();  if (size == 0) {    return filename;  }  int prefix=getPrefixLength(filename);  if (prefix < 0) {    return null;  }  char[] array=new char[size + 2];  filename.getChars(0,filename.length(),array,0);  char otherSeparator=separator == SYSTEM_SEPARATOR ? OTHER_SEPARATOR : SYSTEM_SEPARATOR;  for (int i=0; i < array.length; i++) {    if (array[i] == otherSeparator) {      array[i]=separator;    }  }  boolean lastIsDirectory=true;  if (array[size - 1] != separator) {    array[size++]=separator;    lastIsDirectory=false;  }  for (int i=prefix + 1; i < size; i++) {    if (array[i] == separator && array[i - 1] == separator) {      System.arraycopy(array,i,array,i - 1,size - i);      size--;      i--;    }  }  for (int i=prefix + 1; i < size; i++) {    if (array[i] == separator && array[i - 1] == '.' && (i == prefix + 1 || array[i - 2] == separator)) {      if (i == size - 1) {        lastIsDirectory=true;      }      System.arraycopy(array,i + 1,array,i - 1,size - i);      size-=2;      i--;    }  }  outer:   for (int i=prefix + 2; i < size; i++) {    if (array[i] == separator && array[i - 1] == '.' && array[i - 2] == '.' && (i == prefix + 2 || array[i - 3] == separator)) {      if (i == prefix + 2) {        return null;      }      if (i == size - 1) {        lastIsDirectory=true;      }      int j;      for (j=i - 4; j >= prefix; j--) {        if (array[j] == separator) {          System.arraycopy(array,i + 1,array,j + 1,size - i);          size-=i - j;          i=j + 1;          continue outer;        }      }      System.arraycopy(array,i + 1,array,prefix,size - i);      size-=i + 1 - prefix;      i=prefix + 1;    }  }  if (size <= 0) {    return "";  }  if (size <= prefix) {    return new String(array,0,size);  }  if (lastIsDirectory && keepSeparator) {    return new String(array,0,size);  }  return new String(array,0,size - 1);}  }
class C{  private static String stringReplace(String str,String oldStr,String newStr){  String result="";  int pos=str.indexOf(oldStr);  while (pos >= 0) {    result+=str.substring(0,pos);    result+=newStr;    str=str.substring(pos + 1);    pos=str.indexOf(oldStr);  }  return result + str;}  }
class C{  @SuppressWarnings("deprecation") void saveLocationServicesState(@NonNull ContentResolver contentResolver){  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {    originalLocationProviders=Settings.Secure.getString(contentResolver,Settings.Secure.LOCATION_PROVIDERS_ALLOWED);  } else {    try {      originalLocationMode=Settings.Secure.getInt(contentResolver,Settings.Secure.LOCATION_MODE);    } catch (    Settings.SettingNotFoundException e) {      Log.e(TAG,"Error reading location mode settings!",e);    }  }}  }
class C{  private int naturalFollowerConnections(final List<ConnectableSegment> segments){  int connected=0;  for (  final ConnectableSegment segment : segments) {    if (segment.getNext() == null) {      final BSPTree<Euclidean2D> node=segment.getNode();      final BSPTree<Euclidean2D> end=segment.getEndNode();      for (      final ConnectableSegment candidateNext : segments) {        if (candidateNext.getPrevious() == null && candidateNext.getNode() == end && candidateNext.getStartNode() == node) {          segment.setNext(candidateNext);          candidateNext.setPrevious(segment);          ++connected;          break;        }      }    }  }  return connected;}  }
class C{  public void closeFile(){  try {    writeDatasets();    writeGroups();    long indexPosition=bytesWritten;    writeIndex();    int nbytes=(int)(bytesWritten - indexPosition);    fos.close();    writeIndexPosition(indexPosition,nbytes);  } catch (  IOException ex) {    log.error("Error closing file",ex);  }}  }
class C{  public RedundancyBasedSelector(String sPreexistingText,int iMinNGram,int iMaxNGram,int iDist,double dRedundancyThreshold){  Comparator=new NGramCachedNonSymmGraphComparator();  SentenceRepresentationFilter=new IdentityObjectFilter<DocumentNGramGraph>();  PreexistingText=sPreexistingText;  RedundancyThreshold=dRedundancyThreshold;  MinNGram=iMinNGram;  MaxNGram=iMaxNGram;  Dist=iDist;}  }
class C{  void update(BroadphaseKey key,SapProxy<E,T> proxy,E collidable,T fixture){  Transform tx=collidable.getTransform();  AABB aabb=fixture.getShape().createAABB(tx);  if (proxy.aabb.contains(aabb)) {    return;  }  aabb.expand(this.expansion);  this.tree.remove(proxy);  proxy.aabb=aabb;  this.tree.add(proxy);}  }
class C{  private CloseableDataStore createDataStoreWithUrl(URI location,String apiKey,MetricRegistry metricRegistry){  String ignore="ignore";  MultiThreadedServiceFactory<AuthDataStore> secureDataStoreFactory=createDataStoreServiceFactory(ignore,metricRegistry);  URI baseUri=LocationUtil.getBaseUriForLocation(location);  Payload payload=new Payload(baseUri,URI.create("http://adminUrl.not.used.but.required"));  ServiceEndPoint endPoint=new ServiceEndPointBuilder().withId(ignore).withServiceName(ignore).withPayload(payload.toString()).build();  AuthDataStore authDataStore=secureDataStoreFactory.create(endPoint);  DataStore dataStore=DataStoreAuthenticator.proxied(authDataStore).usingCredentials(apiKey);  return asCloseableDataStore(dataStore,Optional.<Runnable>absent());}  }
class C{  public String resolveDoctype(String entityName,String publicId,String systemId) throws IOException {  String resolved=null;  catalogManager.debug.message(3,"resolveDoctype(" + entityName + ","+ publicId+ ","+ systemId+ ")");  systemId=normalizeURI(systemId);  if (publicId != null && publicId.startsWith("urn:publicid:")) {    publicId=PublicId.decodeURN(publicId);  }  if (systemId != null && systemId.startsWith("urn:publicid:")) {    systemId=PublicId.decodeURN(systemId);    if (publicId != null && !publicId.equals(systemId)) {      catalogManager.debug.message(1,"urn:publicid: system identifier differs from public identifier; using public identifier");      systemId=null;    } else {      publicId=systemId;      systemId=null;    }  }  if (systemId != null) {    resolved=resolveLocalSystem(systemId);    if (resolved != null) {      return resolved;    }  }  if (publicId != null) {    resolved=resolveLocalPublic(DOCTYPE,entityName,publicId,systemId);    if (resolved != null) {      return resolved;    }  }  boolean over=default_override;  Enumeration en=catalogEntries.elements();  while (en.hasMoreElements()) {    CatalogEntry e=(CatalogEntry)en.nextElement();    if (e.getEntryType() == OVERRIDE) {      over=e.getEntryArg(0).equalsIgnoreCase("YES");      continue;    }    if (e.getEntryType() == DOCTYPE && e.getEntryArg(0).equals(entityName)) {      if (over || systemId == null) {        return e.getEntryArg(1);      }    }  }  return resolveSubordinateCatalogs(DOCTYPE,entityName,publicId,systemId);}  }
class C{  public Matrix solve(Matrix B){  if (B.getRowDimension() != m) {    throw new IllegalArgumentException("Matrix row dimensions must agree.");  }  if (!this.isNonsingular()) {    throw new RuntimeException("Matrix is singular.");  }  int nx=B.getColumnDimension();  Matrix Xmat=B.getMatrix(piv,0,nx - 1);  double[][] X=Xmat.getArray();  for (int k=0; k < n; k++) {    for (int i=k + 1; i < n; i++) {      for (int j=0; j < nx; j++) {        X[i][j]-=X[k][j] * LU[i][k];      }    }  }  for (int k=n - 1; k >= 0; k--) {    for (int j=0; j < nx; j++) {      X[k][j]/=LU[k][k];    }    for (int i=0; i < k; i++) {      for (int j=0; j < nx; j++) {        X[i][j]-=X[k][j] * LU[i][k];      }    }  }  return Xmat;}  }
class C{  public static ServiceBundle parse(@NotNull Reader xmlReader) throws JAXBException {  return unmarshal(xmlReader);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelDeBuffPhysical_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200511,skilltarget,skillname);}  }
class C{  private void updateClassesForInheritance(Map<TypeElement,ClassToGenerateInfo> helperClassMap){  for (  Entry<TypeElement,ClassToGenerateInfo> entry : helperClassMap.entrySet()) {    TypeElement thisClass=entry.getKey();    Map<TypeElement,ClassToGenerateInfo> otherClasses=new LinkedHashMap<>(helperClassMap);    otherClasses.remove(thisClass);    for (    Entry<TypeElement,ClassToGenerateInfo> otherEntry : otherClasses.entrySet()) {      TypeElement otherClass=otherEntry.getKey();      if (!isSubtype(thisClass,otherClass)) {        continue;      }      Set<AttributeInfo> otherAttributes=otherEntry.getValue().getAttributeInfo();      if (belongToTheSamePackage(thisClass,otherClass)) {        entry.getValue().addAttributes(otherAttributes);      } else {        for (        AttributeInfo attribute : otherAttributes) {          if (!attribute.isPackagePrivate()) {            entry.getValue().addAttribute(attribute);          }        }      }    }  }}  }
class C{  public static InputStream fromInputStream(InputStream src,StatsLogger statsLogger) throws IOException {  src.mark(VERSION_LENGTH);  byte version=new DataInputStream(src).readByte();  src.reset();  EnvelopedEntry entry=new EnvelopedEntry(version,statsLogger);  entry.readFully(new DataInputStream(src));  return new ByteArrayInputStream(entry.getDecompressedPayload());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATKDrain_INTERVAL_TO_B(String skilltarget,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201158,skilltarget,num0,skillname);}  }
class C{  public Type type(String fldName){  return fields.get(fldName);}  }
class C{  public boolean isPrimitive(){  return !isMessage() && !isEnum();}  }
class C{  void assignNewToLocal(Stmt stmt,Local left){  PurityNode node=cacheNode(new PurityStmtNode(stmt,true));  localsRemove(left);  localsPut(left,node);  nodes.add(node);  if (doCheck)   sanityCheck();}  }
class C{  protected String millisecondsToYearMonthDay(long millis){  return getSimpleDateFormatForMilliseconds("yyyy-MM-dd",millis);}  }
class C{  public void testListOfStringsField() throws Exception {  AnObject empty=new AnObject();  AnObject full=helper.fill(new AnObject());  Object value=getPropertyValue(full,"listOfStringsField");  assertTrue(value instanceof List);  assertFalse(((List)value).isEmpty());  assertTrue(helper.areEquals(full,full));  assertFalse(helper.areEquals(empty,full));}  }
class C{  public static String toString(URL url,String encoding) throws IOException {  return toString(url,Charsets.toCharset(encoding));}  }
class C{  public void connectNamePanel2AlignmentPane(boolean connect){  if (connect)   namesScrollPane.getVerticalScrollBar().setModel(alignmentScrollPane.getVerticalScrollBar().getModel()); else   namesScrollPane.getVerticalScrollBar().setModel(new DefaultBoundedRangeModel());}  }
class C{  public Builder withStreaming(){  this.streaming=true;  return this;}  }
class C{  public void read(IInputReader dataIndexReader) throws IOException {  for (  Object[] dataRecord : data) {switch ((Character)dataRecord[1]) {case 'i':      dataRecord[2]=dataIndexReader.readInt();    break;case 'f':  dataRecord[2]=dataIndexReader.readFloat();break;case 'l':dataRecord[2]=dataIndexReader.readLong();break;case 'b':dataRecord[2]=(byte)dataIndexReader.read();break;case 'B':dataRecord[2]=dataIndexReader.readByteByteInt();break;case 'c':dataRecord[2]=dataIndexReader.readChar();break;}}}  }
class C{  @BeforeClass private void init() throws NumberFormatException {  nodeCount=Integer.valueOf(appProperties.getProperty("node-count"));  experiment=ExperimentFactory.createExperiment();  user=UserFactory.createUser();  userList=new ArrayList<>();  userList2=new ArrayList<>();  ruleFirst="User-Agent = \"Agent001\"";  ruleSecond="User-Agent = \"Agent002\"";  ruleNonHeader="subscriber = true";  experimentSerializationStrategy=new DefaultNameExclusionStrategy("creationTime","modificationTime","id","ruleJson");}  }
class C{  @Override public long limit(){  return fileLength >>> 3;}  }
class C{  @SuppressWarnings("unchecked") public JSONArray(){  this.myArrayList=new ArrayList();}  }
class C{  public static int screenHeightPixel(Context context){  WindowManager windowManager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=windowManager.getDefaultDisplay();  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {    Point outPoint=new Point();    display.getRealSize(outPoint);    sScreenHeightPixels=outPoint.y;  } else   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {    Point outPoint=new Point();    display.getSize(outPoint);    sScreenHeightPixels=outPoint.y;  } else {    sScreenHeightPixels=display.getHeight();  }  return sScreenHeightPixels;}  }
class C{  private ArrayList<SpinnerLanguageElement> createSpinnerLanguages(int avoidLanguage){  ArrayList<SpinnerLanguageElement> result=new ArrayList<SpinnerLanguageElement>();  List<String> languages=mSessionOptions.allLanguages();  for (int i=0; i < languages.size(); ++i) {    if (i != avoidLanguage) {      result.add(new SpinnerLanguageElement(languages.get(i),i));    }  }  return result;}  }
class C{  @Override public int scanContent(XMLString content) throws IOException {  if (fCurrentEntity.position == fCurrentEntity.count) {    load(0,true);  } else   if (fCurrentEntity.position == fCurrentEntity.count - 1) {    fCurrentEntity.ch[0]=fCurrentEntity.ch[fCurrentEntity.count - 1];    load(1,false);    fCurrentEntity.position=0;    fCurrentEntity.startPosition=0;  }  int offset=fCurrentEntity.position;  int c=fCurrentEntity.ch[offset];  int newlines=0;  boolean external=fCurrentEntity.isExternal();  if (c == '\n' || ((c == '\r' || c == 0x85 || c == 0x2028) && external)) {    do {      c=fCurrentEntity.ch[fCurrentEntity.position++];      if ((c == '\r') && external) {        newlines++;        fCurrentEntity.lineNumber++;        fCurrentEntity.columnNumber=1;        if (fCurrentEntity.position == fCurrentEntity.count) {          offset=0;          fCurrentEntity.baseCharOffset+=(fCurrentEntity.position - fCurrentEntity.startPosition);          fCurrentEntity.position=newlines;          fCurrentEntity.startPosition=newlines;          if (load(newlines,false)) {            break;          }        }        int cc=fCurrentEntity.ch[fCurrentEntity.position];        if (cc == '\n' || cc == 0x85) {          fCurrentEntity.position++;          offset++;        } else {          newlines++;        }      } else       if (c == '\n' || ((c == 0x85 || c == 0x2028) && external)) {        newlines++;        fCurrentEntity.lineNumber++;        fCurrentEntity.columnNumber=1;        if (fCurrentEntity.position == fCurrentEntity.count) {          offset=0;          fCurrentEntity.baseCharOffset+=(fCurrentEntity.position - fCurrentEntity.startPosition);          fCurrentEntity.position=newlines;          fCurrentEntity.startPosition=newlines;          if (load(newlines,false)) {            break;          }        }      } else {        fCurrentEntity.position--;        break;      }    } while (fCurrentEntity.position < fCurrentEntity.count - 1);    for (int i=offset; i < fCurrentEntity.position; i++) {      fCurrentEntity.ch[i]='\n';    }    int length=fCurrentEntity.position - offset;    if (fCurrentEntity.position == fCurrentEntity.count - 1) {      content.setValues(fCurrentEntity.ch,offset,length);      return -1;    }  }  if (external) {    while (fCurrentEntity.position < fCurrentEntity.count) {      c=fCurrentEntity.ch[fCurrentEntity.position++];      if (!XML11Char.isXML11Content(c) || c == 0x85 || c == 0x2028) {        fCurrentEntity.position--;        break;      }    }  } else {    while (fCurrentEntity.position < fCurrentEntity.count) {      c=fCurrentEntity.ch[fCurrentEntity.position++];      if (!XML11Char.isXML11InternalEntityContent(c)) {        fCurrentEntity.position--;        break;      }    }  }  int length=fCurrentEntity.position - offset;  fCurrentEntity.columnNumber+=length - newlines;  content.setValues(fCurrentEntity.ch,offset,length);  if (fCurrentEntity.position != fCurrentEntity.count) {    c=fCurrentEntity.ch[fCurrentEntity.position];    if ((c == '\r' || c == 0x85 || c == 0x2028) && external) {      c='\n';    }  } else {    c=-1;  }  return c;}  }
class C{  public boolean isKinematic(){  return this.mass.isInfinite() && (!this.velocity.isZero() || Math.abs(this.angularVelocity) > Epsilon.E);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set colorMismatchesVsReference=");  boolean value=np.getBoolean();  np.matchIgnoreCase(";");  AlignmentViewer viewer=(AlignmentViewer)getViewer();  viewer.getAlignmentViewerPanel().getAlignmentPanel().setColorMismatchesVsReference(value);  ProgramProperties.put("ColorMismatches",value);  viewer.repaint();}  }
class C{  private void checkWhitespace(XMLString value){  int end=value.offset + value.length;  for (int i=value.offset; i < end; ++i) {    if (!XMLChar.isSpace(value.ch[i])) {      reportFatalError("ContentIllegalAtTopLevel");      return;    }  }}  }
class C{  public SuffixFileFilter(List<String> suffixes){  this(suffixes,IOCase.SENSITIVE);}  }
class C{  public static LinkedHashSet<PhysicalTableDefinition> buildPetTableDefinitions(TestDimensions testDimensions){  return Utils.asLinkedHashSet(new PhysicalTableDefinition(ALL_PETS,DAY.buildZonedTimeGrain(DateTimeZone.UTC),testDimensions.getDimensionConfigurationsByApiName(BREED,SEX,SPECIES)));}  }
class C{  public boolean rta(){  return soot.PhaseOptions.getBoolean(options,"rta");}  }
class C{  @Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){  super.onMeasure(heightMeasureSpec,heightMeasureSpec);}  }
class C{  static public int floor(float value){  return (int)(value + BIG_ENOUGH_FLOOR) - BIG_ENOUGH_INT;}  }
class C{  public static IOFileFilter falseFileFilter(){  return FalseFileFilter.FALSE;}  }
class C{  public void clear(){  changeReports.clear();}  }
class C{  public MultiDirectionalSimplex(final double[][] referenceSimplex,final double khi,final double gamma){  super(referenceSimplex);  this.khi=khi;  this.gamma=gamma;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);  mActivity=this;  hasSurface=false;  inactivityTimer=new InactivityTimer(this);  CameraManager.init(getApplication());  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {    if (checkSelfPermission(Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {      requestPermissions(new String[]{Manifest.permission.CAMERA},REQUEST_PERMISSION_CAMERA);    }  }  initView();}  }
class C{  public SM_RIFT_ANNOUNCE(int objectId){  this.objectId=objectId;  this.actionId=5;}  }
class C{  protected VideoEditAlbumQuery albumId(int value){  return unsafeParam("album_id",value);}  }
class C{  public TrackedEntityInstanceQueryParams addAttributesIfNotExist(List<QueryItem> attrs){  for (  QueryItem attr : attrs) {    if (attributes != null && !attributes.contains(attr)) {      attributes.add(attr);    }  }  return this;}  }
class C{  public void drawScreen(int par1,int par2,float par3){  if (reinit) {    initGui();    reinit=false;  }  super.drawScreen(par1,par2,par3);}  }
class C{  protected void checkDirectoriesContainSameContent(File dir1,File dir2) throws DifferentDirectoryContentException {  try {    Collection<File> listFiles1=FileUtils.listFiles(dir1,null,true);    Collection<File> listFiles2=FileUtils.listFiles(dir2,null,true);    if (listFiles1.size() != listFiles2.size()) {      throw new DifferentDirectoryContentException("Different file list size");    } else {      logger.debug("Same file list size");    }    for (    File file1 : listFiles1) {      Path relativePath1=dir1.toPath().relativize(file1.toPath());      logger.debug("Test file: {}",relativePath1);      File file2=new File(dir2,relativePath1.toString());      if (!file2.exists()) {        throw new DifferentDirectoryContentException("File: " + file2.toString() + " doesn't exist");      }      if (file2.isFile() && !Files.equal(file1,file2)) {        throw new DifferentDirectoryContentException("File: " + file2.toString() + " has different content");      }    }  } catch (  IOException e) {    throw new DifferentDirectoryContentException("Failed to compare ",e);  }}  }
class C{  public String toString(){  StringWriter w=new StringWriter();  w.write("Storage: " + TextStoragePolicy.getDescription(textStoragePolicy) + "\n");  for (int i=0; i < files.size(); i++) {    w.write(" " + i + " -> "+ files.get(i).getPath()+ "\n");  }  return w.toString();}  }
class C{  static boolean isOSNameMatch(final String osName,final String osNamePrefix){  if (osName == null) {    return false;  }  return osName.startsWith(osNamePrefix);}  }
class C{  private void fft(double re[],double im[],int direction){  int n=re.length;  int bits=(int)Math.rint(Math.log(n) / Math.log(2));  if (n != (1 << bits))   throw new IllegalArgumentException("fft data must be power of 2");  int localN;  int j=0;  for (int i=0; i < n - 1; i++) {    if (i < j) {      double temp=re[j];      re[j]=re[i];      re[i]=temp;      temp=im[j];      im[j]=im[i];      im[i]=temp;    }    int k=n / 2;    while ((k >= 1) && (k - 1 < j)) {      j=j - k;      k=k / 2;    }    j=j + k;  }  for (int m=1; m <= bits; m++) {    localN=1 << m;    double Wjk_r=1;    double Wjk_i=0;    double theta=twoPI / localN;    double Wj_r=Math.cos(theta);    double Wj_i=direction * Math.sin(theta);    int nby2=localN / 2;    for (j=0; j < nby2; j++) {      for (int k=j; k < n; k+=localN) {        int id=k + nby2;        double tempr=Wjk_r * re[id] - Wjk_i * im[id];        double tempi=Wjk_r * im[id] + Wjk_i * re[id];        re[id]=re[k] - tempr;        im[id]=im[k] - tempi;        re[k]+=tempr;        im[k]+=tempi;      }      double wtemp=Wjk_r;      Wjk_r=Wj_r * Wjk_r - Wj_i * Wjk_i;      Wjk_i=Wj_r * Wjk_i + Wj_i * wtemp;    }  }}  }
class C{  public void populateIntegerField(FieldIdEnum fieldId,Integer value){  if (fieldConfigManager == null) {    return;  }  FieldConfigBase fieldConfig=fieldConfigManager.get(fieldId);  if (value != null) {    ((FieldConfigValuePopulateInterface)fieldConfig).populateField(value);  } else {    fieldConfig.revertToDefaultValue();  }}  }
class C{  public void addMemberEx(LegionMemberEx legionMember){  if (legionMemberExById.containsKey(legionMember.getObjectId()) || legionMemberExByName.containsKey(legionMember.getName())) {    throw new DuplicateAionObjectException();  }  legionMemberExById.put(legionMember.getObjectId(),legionMember);  legionMemberExByName.put(legionMember.getName(),legionMember);}  }
class C{  protected static LazyNode cField(int index){  return new LazyNode(FIELD,index);}  }
class C{  public WishlistDataCursor queryWishlistData(long id){  return mHelper.queryWishlistData(id);}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  if (rect == null) {    return null;  }  return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height(),false);}  }
class C{  @Override public void openFile(URL url){  List<SLDDataInterface> sldDataList=null;  for (  ExtensionInterface extension : extensionList) {    if (sldDataList == null) {      sldDataList=extension.open(url);    }  }  loadSLDString(false,false,sldDataList);}  }
class C{  public static boolean onRender(LayerRenderer<?> layer,EntityLivingBase entity,float limbSwing,float limbSwingAmount,float partialTicks,float tickAge,float headYaw,float headPitch,float scale){  GlStateManager.pushMatrix();  final boolean successful=OpenModLoader.getEventBus().post(new Layers(layer,entity,limbSwing,limbSwingAmount,partialTicks,tickAge,headYaw,headPitch,scale));  GlStateManager.popMatrix();  return successful;}  }
class C{  private void fireOnUnsubscribeEvent(final Set<Long> tagIds){  listenersLock.readLock().lock();  try {    Set<Long> copyList=new HashSet<Long>(tagIds);    for (    TagSubscriptionListener listener : tagSubscriptionListeners) {      listener.onUnsubscribe(copyList);    }  }  finally {    listenersLock.readLock().unlock();  }}  }
class C{  public JCustomTooltip(JComponent src,JComponent content,boolean inter){  this.setLayout(new BorderLayout());  this.setBorder(BorderFactory.createEmptyBorder(1,1,1,1));  this.setComponent(src);  this.add(content);  setPersistent(inter);}  }
class C{  private Date addTimezoneOffsetToDate(Date date){  DatePair hourAndMinuteOffset=DateConverter.getCurrentTimeZoneOffset();  Calendar calendar=Calendar.getInstance();  calendar.setTime(date);  calendar.add(Calendar.HOUR,hourAndMinuteOffset.getHour());  calendar.add(Calendar.MINUTE,hourAndMinuteOffset.getMinute());  return calendar.getTime();}  }
class C{  @Override protected void onRestoreInstanceState(Bundle savedInstanceState){  super.onRestoreInstanceState(savedInstanceState);  ArrayList<DataInfo> MeizhiData=savedInstanceState.getParcelableArrayList(SAVED_INSTANCE_MEIZHI);  mainPresenter.getData().addAll(MeizhiData);  meizhiRvAdapter.setMeizhiList(mainPresenter.getData());  if (mainPresenter.getData().size() == 0)   mainPresenter.loadMeizhi(true);}  }
class C{  void remask(){  if (parsedFormatInfo == null) {    return;  }  DataMask dataMask=DataMask.forReference(parsedFormatInfo.getDataMask());  int dimension=bitMatrix.getHeight();  dataMask.unmaskBitMatrix(bitMatrix,dimension);}  }
class C{  public summaryGaussNormEvaluator(String[] args){  OutputSemaphore=new Semaphore(1);  Hashtable hSwitches=gr.demokritos.iit.jinsect.utils.parseCommandLineSwitches(args);  if (gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"?","").length() > 0) {    printUsage();    System.exit(0);  }  try {    WordMin=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"wordMin","1"));    WordMax=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"wordMax","2"));    WordDist=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"wordDist","3"));    CharMin=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"charMin","3"));    CharMax=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"charMax","5"));    CharDist=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"charDist","3"));    Threads=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"t","" + Runtime.getRuntime().availableProcessors()));    String sWeightMethod=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"use","o");    if (sWeightMethod.equals("o"))     WeightMethod=USE_OCCURENCES_AS_WEIGHT; else     if (sWeightMethod.equals("d"))     WeightMethod=USE_DISTRO_AVERAGE_AS_WEIGHT; else {      printUsage();      System.exit(1);    }    Do=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"do","all");    if ((Do.length() == 0) || ("char_word_all__".indexOf(Do) % 5 != 0)) {      printUsage();      System.exit(0);    }    OutFile=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"o","");    SummaryDir=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"summaryDir","summaries" + System.getProperty("file.separator"));    ModelDir=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"modelDir","models" + System.getProperty("file.separator"));    Silent=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"s","FALSE").equals("TRUE");    Progress=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"progress","FALSE").equals("TRUE");    LowMem=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"lowmem","FALSE").equals("TRUE");    if (!Silent)     System.err.println("Using parameters:\n" + hSwitches);  } catch (  ClassCastException cce) {    System.err.println("Malformed switch:" + cce.getMessage() + ". Aborting...");    printUsage();  }}  }
class C{  public PoolableThread(ThreadPool pool){  super(pool.getThreadGroup(),"");  this.pool=pool;synchronized (PoolableThread.class) {    threadID=nextThreadID++;  }  setName(pool.getIdentifier() + "-" + threadID);}  }
class C{  public void activate(){  if (myScreenView != null) {    myScreenView.getModel().activate();  }}  }
class C{  void in(Operand... oprs){  ArrayList<Operand[]> in=this.in;  if (in == null) {    in=this.in=new ArrayList<Operand[]>(1);  } else {    in.clear();  }  in.add(oprs);  inStackLocals=new Local[oprs.length];}  }
class C{  @VisibleForTesting void subscribeForTesting(){  mObservable.subscribe(mObserver);}  }
class C{  public UsersSearchQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public static boolean viewsIntersect(View view1,View view2){  if (view1 == null || view2 == null)   return false;  final int[] view1Loc=new int[2];  view1.getLocationOnScreen(view1Loc);  final Rect view1Rect=new Rect(view1Loc[0],view1Loc[1],view1Loc[0] + view1.getWidth(),view1Loc[1] + view1.getHeight());  int[] view2Loc=new int[2];  view2.getLocationOnScreen(view2Loc);  final Rect view2Rect=new Rect(view2Loc[0],view2Loc[1],view2Loc[0] + view2.getWidth(),view2Loc[1] + view2.getHeight());  return view1Rect.intersect(view2Rect);}  }
class C{  public static boolean isNumericLenient(String value){  return value != null && DOUBLE_VALIDATOR.isValid(value,LOCALE) && NUMERIC_LENIENT_PATTERN.matcher(value).matches();}  }
class C{  public AudioRestoreQuery restore(UserActor actor,int audioId){  return new AudioRestoreQuery(getClient(),actor,audioId);}  }
class C{  public BookDTO toDTO(Book book){  return toDTO(book,1);}  }
class C{  private void storeLegion(Legion legion,boolean newLegion){  if (newLegion) {    addCachedLegion(legion);    DAOManager.getDAO(LegionDAO.class).saveNewLegion(legion);  } else {    DAOManager.getDAO(LegionDAO.class).storeLegion(legion);    DAOManager.getDAO(LegionDAO.class).storeLegionEmblem(legion.getLegionId(),legion.getLegionEmblem());  }}  }
class C{  public static Element appendToken(Element t,String newTokenText){  if (!t.getNodeName().equals(MaryXML.TOKEN))   throw new DOMException(DOMException.INVALID_ACCESS_ERR,"Only t elements allowed, received " + t.getNodeName() + ".");  Element parent=(Element)t.getParentNode();  Document doc=t.getOwnerDocument();  Element next=getNextSiblingElement(t);  Element newT=MaryXML.createElement(doc,MaryXML.TOKEN);  setTokenText(newT,newTokenText);  parent.insertBefore(newT,next);  return newT;}  }
class C{  public Builder autoPanPaddingBottomRight(Point autoPanPaddingBottomRight){  this.autoPanPaddingBottomRight=autoPanPaddingBottomRight;  return this;}  }
class C{  public static NotNullSpacePredicate isNotNull(){  return NOT_NULL;}  }
class C{  public VideoGetCatalogQuery filters(List<VideoGetCatalogFilter> value){  return unsafeParam("filters",value);}  }
class C{  public synchronized void close(){  try {    File file=new File(baseName);    InputStream is=new SequenceInputStream(outputList.elements());    AudioInputStream ais=new AudioInputStream(is,currentFormat,totBytes / currentFormat.getFrameSize());    if (false) {      System.out.println("Avail " + ais.available());      System.out.println("totBytes " + totBytes);      System.out.println("FS " + currentFormat.getFrameSize());    }    System.out.println("Wrote synthesized speech to " + baseName);    AudioSystem.write(ais,outputType,file);  } catch (  IOException ioe) {    System.err.println("Can't write audio to " + baseName);  }catch (  IllegalArgumentException iae) {    System.err.println("Can't write audio type " + outputType);  }}  }
class C{  public static int exportName2TotalLength(String format,ViewerBase cViewer,File file,char separator,ProgressListener progressListener) throws IOException {  int totalLines=0;  try {    final Classification classification=ClassificationManager.get(cViewer.getClassName(),true);    final String shortName=(cViewer.getClassName().toLowerCase().equals("taxonomy") ? "Taxon" : cViewer.getClassName());    try (BufferedWriter w=new BufferedWriter(new FileWriter(file))){      IConnector connector=cViewer.getDocument().getConnector();      java.util.Collection<Integer> classIds=cViewer.getSelectedIds();      progressListener.setSubtask(shortName + " to read names");      progressListener.setMaximum(classIds.size());      progressListener.setProgress(0);      final IClassificationBlock classificationBlock=connector.getClassificationBlock(cViewer.getClassName());      if (classificationBlock != null) {        for (        int classId : classIds) {          Set<Integer> allBelow;          Node v=classification.getFullTree().getANode(classId);          if (v.getOutDegree() > 0)           allBelow=classification.getFullTree().getAllDescendants(classId); else {            allBelow=new HashSet<>();            allBelow.add(classId);          }          boolean hasSome=false;          long length=0L;          for (          int id : allBelow) {            if (classificationBlock.getSum(id) > 0) {              if (!hasSome) {                w.write(getLabelSource(shortName,classification,format,v));                hasSome=true;              }              try (IReadBlockIterator it=connector.getReadsIterator(cViewer.getClassName(),id,0,10000,true,false)){                while (it.hasNext()) {                  length+=it.next().getReadLength();                }              }               progressListener.checkForCancel();            }          }          if (hasSome) {            w.write(separator + " " + length+ "\n");            totalLines++;          }          progressListener.incrementProgress();        }      }    }   } catch (  CanceledException canceled) {    System.err.println("USER CANCELED");  }  return totalLines;}  }
class C{  public Alert extend(Alert new_alert){  final DateTime new_start;  if (new_alert.triggered_.orElse(true).equals(triggered_.orElse(true)))   new_start=start_; else   new_start=new_alert.getStart();  return new Alert(new_start,new_alert.cur_,new_alert.name_,new_alert.rule_,new_alert.triggered_,new_alert.fire_duration_,new_alert.message_,new_alert.attributes_);}  }
class C{  @Override public void endElement(String uri,String localName,String qName) throws SAXException {  writeText4Links();  if (!mIgnoredTags.isEmpty() && mIgnoredTags.peek().equalsIgnoreCase(qName)) {    mIgnoredTags.pop();  } else {    if (!(htmlMode && (uri.equals("http://www.w3.org/1999/xhtml") || uri.equals("")) && (qName.equals("area") || qName.equals("base") || qName.equals("basefont")|| qName.equals("br")|| qName.equals("col")|| qName.equals("frame")|| qName.equals("hr")|| qName.equals("img")|| qName.equals("input")|| qName.equals("isindex")|| qName.equals("link")|| qName.equals("meta")|| qName.equals("param")))) {      write("</");      writeName(uri,localName,qName,true);      write('>');    }    if (elementLevel == 1) {      write('\n');    }    if (htmlMode && localName.equals("a")) {      mIgnoreChars=false;    }    cdataElement=false;    super.endElement(uri,localName,qName);    nsSupport.popContext();    elementLevel--;  }}  }
class C{  public void populate(FillDetails fillPanel,Class<?> panelDetails,GraphicPanelFieldManager fieldConfigManager){  List<ValueComboBoxDataGroup> combinedSymbolList=populateSymbolList(panelDetails);  FieldConfigBase field=fieldConfigManager.get(this.selectionComboBox);  this.symbolTypeField=(FieldConfigSymbolType)field;  symbolTypeField.populate(fillPanel,combinedSymbolList);  for (  FieldState panel : symbolTypeFieldList) {    panel.setUpdateSymbolListener(fillPanel);    classMap.put(panel.getClass(),panel);    this.symbolTypeField.addField(panel);    fillPanel.updateFieldConfig(panel.getBasePanel());    Map<FieldIdEnum,FieldConfigBase> map=panel.getFieldList(fieldConfigManager);    if (map != null) {      for (      FieldIdEnum panelField : map.keySet()) {        fieldConfigManager.add(panelField,map.get(panelField));      }    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SUBMIT_GM_PETITION_FAILED(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1300550,value0,value1);}  }
class C{  private void openFileWithDefaultNoDefault(OCFile ocFile){  getFileOperationsHelper().openFile(ocFile);}  }
class C{  private void pauseServiceIntent(){  Intent intent=new Intent(getApplicationContext(),ScreenDimmer.class);  intent.setAction(TAG_PAUSE);  startService(intent);}  }
class C{  public void onSuccess(byte[] binaryData){}  }
class C{  private static void forceInit(Class<?> cls){  try {    Class.forName(cls.getName(),true,cls.getClassLoader());  } catch (  ClassNotFoundException e) {    throw new IllegalArgumentException("Can't initialize class " + cls,e);  }}  }
class C{  public UserObject(){  service=UserService.getService();}  }
class C{  public double solve(Target t,FeatureDefinition feaDef,boolean log){  solution=0.0f;  double lastPosSolution=0.0;  if (interceptTerm) {    solution=coeffs[0];    for (int i=1; i < coeffs.length; i++) {      solution=solution + (coeffs[i] * t.getFeatureVector().getByteFeature(factorsIndex[i]));      if (solution > 0.0)       lastPosSolution=solution; else       System.out.println("WARNING: sop solution negative");    }  } else {    for (int i=0; i < coeffs.length; i++) {      solution=solution + (coeffs[i] * t.getFeatureVector().getByteFeature(factorsIndex[i]));      if (solution > 0.0)       lastPosSolution=solution; else       System.out.println("WARNING: sop solution negative");    }  }  if (solution < 0.0)   solution=lastPosSolution;  if (log)   return Math.exp(solution); else   return solution;}  }
class C{  public static void save(){  if (conf != null) {    String file=home + File.separator + confName+ ".properties";    conf.setProperty("home",null);    try {      conf.save(file);    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  public TIntObjectHashMap(TIntHashingStrategy strategy){  super(strategy);}  }
class C{  public void mixedElement(String elementName) throws XNIException {}  }
class C{  public static ExecutionEntityImpl createWithEmptyRelationshipCollections(){  ExecutionEntityImpl execution=new ExecutionEntityImpl();  execution.executions=new ArrayList<ExecutionEntityImpl>(1);  execution.tasks=new ArrayList<TaskEntity>(1);  execution.variableInstances=new HashMap<String,VariableInstanceEntity>(1);  execution.jobs=new ArrayList<JobEntity>(1);  execution.timerJobs=new ArrayList<TimerJobEntity>(1);  execution.eventSubscriptions=new ArrayList<EventSubscriptionEntity>(1);  execution.identityLinks=new ArrayList<IdentityLinkEntity>(1);  return execution;}  }
class C{  public Segment(final Vector3D start,final Vector3D end,final Line line){  this.start=start;  this.end=end;  this.line=line;}  }
class C{  private void acquirePrecachingWakeLock(){  if (mPrecachingWakeLock == null) {    PowerManager pm=(PowerManager)getSystemService(Context.POWER_SERVICE);    mPrecachingWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG);  }  mPrecachingWakeLock.acquire();}  }
class C{  @Override public boolean checkNeedRefresh(){  return view.checkNeedRefresh();}  }
class C{  @Override public boolean markSupported(){  return markSupported;}  }
class C{  @Override public void redoAction(UndoInterface undoRedoObject){  if ((spinner != null) && (undoRedoObject != null)) {    if (undoRedoObject.getNewValue() instanceof Integer) {      Integer newValue=(Integer)undoRedoObject.getNewValue();      internalSetValue(newValue);    }  }}  }
class C{  public WikiMetricLoader(){  this(DEFAULT_SKETCH_SIZE_IN_BYTES);}  }
class C{  public RecordFormatter(TableInfo ti){  this.ti=ti;  myOffsetMap=RecordPage.offsetMap(ti.schema());}  }
class C{  private void rotationArrow(ItemCompanyBinding binding,boolean expanded){  float start, target;  if (expanded) {    start=0f;    target=90f;  } else {    start=90f;    target=0f;  }  ObjectAnimator objectAnimator=ObjectAnimator.ofFloat(binding.arrow,View.ROTATION,start,target);  objectAnimator.setDuration(300);  objectAnimator.start();}  }
class C{  public Table(int nrows,int ncols){  this(nrows,ncols,TableTuple.class);}  }
class C{  public static boolean checkMissionStatConditions(QuestEnv env){  Player player=env.getPlayer();  QuestTemplate template=questsData.getQuestById(env.getQuestId());  if (template == null) {    return false;  }  if (template.getRacePermitted() != null && template.getRacePermitted() != player.getRace()) {    return false;  }  if (template.getClassPermitted().size() != 0 && !template.getClassPermitted().contains(player.getCommonData().getPlayerClass())) {    return false;  }  if (template.getGenderPermitted() != null && template.getGenderPermitted() != player.getGender()) {    return false;  }  if (template.getCombineSkill() != null) {    List<Integer> skills=new ArrayList<Integer>();    if (template.getCombineSkill() == -1) {      skills.add(30002);      skills.add(30003);      skills.add(40001);      skills.add(40002);      skills.add(40003);      skills.add(40004);      skills.add(40007);      skills.add(40008);      skills.add(40010);    } else {      skills.add(template.getCombineSkill());    }    boolean result=false;    for (    int skillId : skills) {      PlayerSkillEntry skill=player.getSkillList().getSkillEntry(skillId);      if (skill != null && skill.getSkillLevel() >= template.getCombineSkillPoint() && skill.getSkillLevel() - 40 <= template.getCombineSkillPoint()) {        result=true;        break;      }    }    if (!result) {      return false;    }  }  return true;}  }
class C{  public static String generateKey(String imageUri,ImageSize targetSize){  return new StringBuilder(imageUri).append(URI_AND_SIZE_SEPARATOR).append(targetSize.getWidth()).append(WIDTH_AND_HEIGHT_SEPARATOR).append(targetSize.getHeight()).toString();}  }
class C{  public void testGetAllBookmarksNoSuchUser() throws Exception {  BDDMockito.given(bookmarksRepository.findByUserUsername(NONEXISTENT_USERNAME)).willReturn(new HashSet<>());  mvc.perform(MockMvcRequestBuilders.get("/" + NONEXISTENT_USERNAME + "/bookmarks/")).andExpect(MockMvcResultMatchers.status().isNotFound());  BDDMockito.verify(usersRepository).findByUsername(USERNAME);  BDDMockito.verifyNoMoreInteractions(usersRepository);  BDDMockito.verify(bookmarksRepository).findByIdAndUserUsername(BOOKMARK_ID,USERNAME);  BDDMockito.verifyNoMoreInteractions(bookmarksRepository);}  }
class C{  private void drawItems(Canvas canvas){  canvas.save();  int top=(currentItem - firstItem) * getItemHeight() + (getItemHeight() - getHeight()) / 2;  canvas.translate(PADDING,-top + scrollingOffset);  itemsLayout.draw(canvas);  canvas.restore();}  }
class C{  public static int saturate(int c,float saturation){  float[] hsb=Color.RGBtoHSB(red(c),green(c),blue(c),null);  return ColorLib.hsb(hsb[0],saturation,hsb[2]);}  }
class C{  public String toString(){  StringBuffer sBuffer=new StringBuffer();  sBuffer.append(getClass().getName()).append("[totalMatches=").append(totalMatches).append(", items=");  if (items != null) {    for (int i=0; i < items.length - 1; i++)     sBuffer.append(items[i]).append(" ");    sBuffer.append(items[items.length - 1]);  } else {    sBuffer.append((Object)null);  }  return sBuffer.append("]").toString();}  }
class C{  public void dispose(StepMetaInterface smi,StepDataInterface sdi){  meta=(MDKeyGenStepMeta)smi;  data=(MDKeyGenStepData)sdi;  super.dispose(smi,sdi);  dataHandler=null;  finalMerger=null;}  }
class C{  public static Histogram productHistogram(Histogram hist1,Histogram hist2){  Set<String> prodFlds=new HashSet<String>(hist1.fields());  prodFlds.addAll(hist2.fields());  Histogram prodHist=new Histogram(prodFlds);  double numRec1=hist1.recordsOutput();  double numRec2=hist2.recordsOutput();  if (Double.compare(numRec1,1.0) < 0 || Double.compare(numRec2,1.0) < 0)   return prodHist;  for (  String fld : hist1.fields())   for (  Bucket bkt : hist1.buckets(fld))   prodHist.addBucket(fld,new Bucket(bkt.valueRange(),bkt.frequency() * numRec2,bkt.distinctValues(),bkt.valuePercentiles()));  for (  String fld : hist2.fields())   for (  Bucket bkt : hist2.buckets(fld))   prodHist.addBucket(fld,new Bucket(bkt.valueRange(),bkt.frequency() * numRec1,bkt.distinctValues(),bkt.valuePercentiles()));  return prodHist;}  }
class C{  public static Protos.TaskInfo markFailed(Protos.TaskInfo taskInfo){  if (!isLabeledAsFailed(taskInfo)) {    taskInfo=ResourceUtils.clearResourceIds(taskInfo);    taskInfo=ResourceUtils.clearPersistence(taskInfo);    return Protos.TaskInfo.newBuilder(taskInfo).setLabels(Protos.Labels.newBuilder(taskInfo.getLabels()).addLabels(Protos.Label.newBuilder().setKey(PERMANENTLY_FAILED_KEY).setValue(String.valueOf(true)))).build();  } else {    return taskInfo;  }}  }
class C{  @Override public void endDocument(Augmentations augs) throws XNIException {  if (fDocumentHandler != null && !fOnlyPassPrefixMappingEvents) {    fDocumentHandler.endDocument(augs);  }}  }
class C{  private static int calculateNumberOfRows(int m,int k,int c){  int r=((m + 1 + k) / c) + 1;  if (c * r >= (m + 1 + k+ c)) {    r--;  }  return r;}  }
class C{  protected static void appendDecorations(int basePos,String sourceCode,CreateSimpleLexer langHandler,List<Object> out){  if (sourceCode == null) {    throw new NullPointerException("argument 'sourceCode' cannot be null");  }  Job job=new Job();  job.setSourceCode(sourceCode);  job.setBasePos(basePos);  langHandler.decorate(job);  out.addAll(job.getDecorations());}  }
class C{  private void init(final AttributeSet attrs){  Typeface typeface;  if (!isInEditMode() && (typeface=CustomFontUtils.getTypeFace(this,attrs)) != null) {    super.setTypeface(typeface,typeface.getStyle());  }}  }
class C{  @Override public boolean hasAttributeNS(String namespaceURI,String localName){  return getAttributeNodeNS(namespaceURI,localName) != null;}  }
class C{  private Split(final ArcsSet plus,final ArcsSet minus){  this.plus=plus;  this.minus=minus;}  }
class C{  public void load(String fileName) throws IOException {  BufferedReader bfr=new BufferedReader(new InputStreamReader(new FileInputStream(fileName),"UTF-8"));  if (bList == null)   bList=new Vector(DEFAULT_INCREMENT,DEFAULT_INCREMENT);  String line=bfr.readLine();  if (line.indexOf("FROM: ") != -1) {    line=line.substring(6);    String[] parts=new String[2];    parts=line.split("\\*",2);    fromDir=parts[0];    fromExt=parts[1];  } else   if (!(line.matches("^\\s*$")))   add(line);  while ((line=bfr.readLine()) != null) {    if (!(line.matches("^\\s*$")))     add(line);  }}  }
class C{  public void reset(){  stringTable.reset();  pathTable.reset();  tagsTable.reset();}  }
class C{  public SootClass(String name){  this(name,0);}  }
class C{  public PhotosEditAlbumQuery title(String value){  return unsafeParam("title",value);}  }
class C{  public void clear(){  headers.clear();}  }
class C{  public static final double[] resize(double[] a,int size){  if (a.length >= size)   return a;  double[] b=new double[size];  System.arraycopy(a,0,b,0,a.length);  return b;}  }
class C{  private static boolean isLetter(char ch){  return (('a' <= ch && ch <= 'z') || ('A' <= ch && ch <= 'Z'));}  }
class C{  public boolean kindIsOneOf(Kind... kinds){  return kindIsOneOf(Arrays.asList(kinds));}  }
class C{  Node(){  key=null;  hash=-1;  next=prev=this;}  }
class C{  public static boolean raycast(Ray ray,double maxLength,Segment segment,Transform transform,Raycast raycast){  Vector2 p0=ray.getStart();  Vector2 d0=ray.getDirectionVector();  Vector2 p1=transform.getTransformed(segment.getPoint1());  Vector2 p2=transform.getTransformed(segment.getPoint2());  Vector2 d1=p1.to(p2);  if (segment.contains(p0,transform))   return false;  Vector2 p0ToP1=p1.difference(p0);  double num=d1.cross(p0ToP1);  double den=d1.cross(d0);  if (Math.abs(den) <= Epsilon.E) {    Vector2 n=d0.cross(1.0);    double nDotP0=n.dot(p0);    double nDotP1=n.dot(p1);    if (Math.abs(nDotP0 - nDotP1) < Epsilon.E) {      double d0DotP0=d0.dot(p0);      double d0DotP1=d0.dot(p1);      double d0DotP2=d0.dot(p2);      if (d0DotP1 < 0.0 || d0DotP2 < 0.0) {        return false;      }      double d=0.0;      Vector2 p=null;      if (d0DotP1 < d0DotP2) {        d=d0DotP1 - d0DotP0;        p=p1.copy();      } else {        d=d0DotP2 - d0DotP0;        p=p2.copy();      }      if (maxLength > 0.0 && d > maxLength) {        return false;      }      raycast.distance=d;      raycast.point=p;      raycast.normal=d0.getNegative();      return true;    } else {      return false;    }  }  double t=num / den;  if (t < 0.0) {    return false;  }  if (maxLength > 0.0 && t > maxLength) {    return false;  }  double s=(t * d0.x + p0.x - p1.x) / d1.x;  if (s < 0.0 || s > 1.0) {    return false;  }  Vector2 p=d0.product(t).add(p0);  Vector2 l=p1.to(p2);  l.normalize();  l.right();  double lDotD=l.dot(d0);  if (lDotD > 0.0) {    l.negate();  }  raycast.point=p;  raycast.normal=l;  raycast.distance=t;  return true;}  }
class C{  public PolyhedronsSet translate(final Vector3D translation){  return (PolyhedronsSet)applyTransform(new TranslationTransform(translation));}  }
class C{  @Override public void createRaster(Symbolizer symbolizer){}  }
class C{  private static RetainFragment findOrCreateRetainFragment(FragmentManager fm){  RetainFragment mRetainFragment=(RetainFragment)fm.findFragmentByTag(TAG);  if (mRetainFragment == null) {    mRetainFragment=new RetainFragment();    fm.beginTransaction().add(mRetainFragment,TAG).commitAllowingStateLoss();  }  return mRetainFragment;}  }
class C{  public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("new attribute=");  String attribute=np.getWordRespectCase();  np.matchIgnoreCase("position=");  int position=np.getInt();  np.matchIgnoreCase(";");  final SamplesViewer viewer=((SamplesViewer)getViewer());  viewer.getSamplesTable().addNewColumn(position,attribute);}  }
class C{  public void print(MessageOrBuilder message,Appendable output) throws IOException {  output.append(printToString(message));}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.activity_introduce_backBtn:    finishActivity();  break;case R.id.activity_introduce_button:if (viewPager.getCurrentItem() == introduceModelList.size() - 1) {  finishActivity();} else {  viewPager.setCurrentItem(viewPager.getCurrentItem() + 1);}break;case R.id.container_introduce_button:switch (introduceModelList.get(viewPager.getCurrentItem()).imageRes) {case R.drawable.illustration_back_top:Intent s=new Intent(this,SettingsActivity.class);startActivity(s);overridePendingTransition(R.anim.activity_in,0);break;}break;}}  }
class C{  public GroupsEditQuery publicCategory(Integer value){  return unsafeParam("public_category",value);}  }
class C{  @Override public void error(String domain,String key,XMLParseException exception) throws XNIException {  fDOMError.fSeverity=DOMError.SEVERITY_ERROR;  fDOMError.fException=exception;  fDOMError.fType=key;  fDOMError.fRelatedData=fDOMError.fMessage=exception.getMessage();  DOMLocatorImpl locator=fDOMError.fLocator;  if (locator != null) {    locator.fColumnNumber=exception.getColumnNumber();    locator.fLineNumber=exception.getLineNumber();    locator.fUtf16Offset=exception.getCharacterOffset();    locator.fUri=exception.getExpandedSystemId();    locator.fRelatedNode=fCurrentNode;  }  if (fDomErrorHandler != null) {    fDomErrorHandler.handleError(fDOMError);  }}  }
class C{  public ErrorHandler skipDefaults(){  if (localContext != null) {    localContext.get().skipDefaults=true;  }  return this;}  }
class C{  public int createDeferredAttribute(String attrName,String attrValue,boolean specified){  return createDeferredAttribute(attrName,null,attrValue,specified);}  }
class C{  public static AccountOperationResponseCode updatePassword(String email,String oldPassword,String newPassword){  PersistenceManager pm=pmf.getPersistenceManager();  try {    UserRecord user=findUserByEmail(pm,email);    if (user != null) {      user.setPassword(newPassword);      pm.makePersistent(user);      return AccountOperationResponseCode.OK;    } else {      return AccountOperationResponseCode.USER_NOT_FOUND;    }  }  finally {    pm.close();  }}  }
class C{  public static cn.nukkit.inventory.InventoryType toNukkit(InventoryType inventoryType){  return bukkitToNukkit.get(inventoryType);}  }
class C{  public int size(){  return size;}  }
class C{  protected String generateMetricName(String filterString){  return filterString.replace("|","_").replace("-","_").replace(",","_").replace("]","").replace("[","_");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PARTY_ALLIANCE_CHANGE_LOOT_HE_DENIED_MY_ASK(String value0){  return new SM_SYSTEM_MESSAGE(1300211,value0);}  }
class C{  public AsyncHttpClient(int httpPort){  this(false,httpPort,443);}  }
class C{  public void degreesAndPersist(){  degreesAndPersist(degree);}  }
class C{  public static Date parseDate(final String dateValue,String[] dateFormats) throws DateParseException {  return parseDate(dateValue,dateFormats,null);}  }
class C{  public static final List<BodyFixture> show(Window owner,Image icon){  AddNonConvexFixtureDialog dialog=new AddNonConvexFixtureDialog(owner,icon);  dialog.setLocationRelativeTo(owner);  dialog.setVisible(true);  if (!dialog.canceled) {    List<Convex> shapes=dialog.pnlPolygon.getShapes();    BodyFixture fixture=dialog.fixture;    Vector2 tx=dialog.pnlTransform.getTranslation();    double a=dialog.pnlTransform.getRotation();    List<BodyFixture> fixtures=new ArrayList<BodyFixture>(shapes.size());    int i=1;    for (    Convex convex : shapes) {      BodyFixture bf=new BodyFixture(convex);      if (!tx.isZero()) {        convex.translate(tx);      }      if (a != 0.0) {        convex.rotateAboutCenter(a);      }      bf.setDensity(fixture.getDensity());      bf.setFilter(fixture.getFilter());      bf.setFriction(fixture.getFriction());      bf.setRestitution(fixture.getRestitution());      bf.setSensor(fixture.isSensor());      bf.setUserData(fixture.getUserData() + "_" + i);      fixtures.add(bf);      i++;    }synchronized (AddConvexFixtureDialog.class) {      AddConvexFixtureDialog.N++;    }    return fixtures;  }  return null;}  }
class C{  public static boolean matches(String str,String regex){  return Pattern.compile(regex).matcher(str).matches();}  }
class C{  public SparseArray(int initialCapacity){  if (initialCapacity == 0) {    mKeys=ContainerHelpers.EMPTY_INTS;    mValues=ContainerHelpers.EMPTY_OBJECTS;  } else {    initialCapacity=ContainerHelpers.idealIntArraySize(initialCapacity);    mKeys=new int[initialCapacity];    mValues=new Object[initialCapacity];  }  mSize=0;}  }
class C{  public boolean onBackPressed(){  if (doesDrawerExist()) {    if (mDrawer.isDrawerVisible(Gravity.START)) {      mDrawer.closeDrawer(Gravity.START);      return true;    }  }  if (mContentView.onBackPressed())   return true;  if (!mStateStack.empty()) {    mStateStack.pop();    if (!mStateStack.empty()) {      setState(mStateStack.pop());      return true;    }  }  return false;}  }
class C{  public void createSymEdgesConnecting(UniqueVertexGraph gGraph,String sStartNode,List lOtherNodes,HashMap hAppearenceHistogram){  double dStartWeight=0;  double dIncreaseWeight=0;  if (lOtherNodes != null)   if (lOtherNodes.size() == 0) {    VertexImpl v=new VertexImpl();    v.setLabel(sStartNode);    try {      gGraph.add(v);    } catch (    Exception e) {      e.printStackTrace(System.err);    }    return;  }  java.util.Iterator iIter=lOtherNodes.iterator();  Vertex vOldA=gr.demokritos.iit.jinsect.utils.locateVertexInGraph(gGraph,sStartNode);  Vertex vA;  if (vOldA != null)   vA=vOldA; else {    vA=new VertexImpl();    vA.setLabel(sStartNode);    try {      gGraph.add(vA);    } catch (    Exception e) {    }  }  List lOldEdges;  lOldEdges=gGraph.getEdges(vA);  int iCnt=0;  while (iIter.hasNext()) {    VertexImpl vB=new VertexImpl();    vB.setLabel((String)iIter.next());    double dOldWeight=0;    double dNewWeight=0;    dStartWeight=ScalingFunction(++iCnt);    dIncreaseWeight=dStartWeight;    if (eclLocator == null)     eclLocator=new EdgeCachedLocator(10);    WeightedEdge weCorrectEdge=(WeightedEdge)eclLocator.locateDirectedEdgeInGraph(gGraph,vA,vB);    if (weCorrectEdge == null)     dNewWeight=dStartWeight; else {      dOldWeight=weCorrectEdge.getWeight();      dNewWeight=dOldWeight + dIncreaseWeight;    }    try {      if (weCorrectEdge == null) {        WeightedEdge e=gGraph.addEdge(vA,vB,dNewWeight);        eclLocator.addedEdge(e);      } else       weCorrectEdge.setWeight(dNewWeight);    } catch (    Exception e) {      e.printStackTrace();    }    weCorrectEdge=(WeightedEdge)eclLocator.locateDirectedEdgeInGraph(gGraph,vB,vA);    if (weCorrectEdge == null)     dNewWeight=dStartWeight; else {      dOldWeight=weCorrectEdge.getWeight();      dNewWeight=dOldWeight + dIncreaseWeight;    }    try {      if (weCorrectEdge == null) {        WeightedEdge e=gGraph.addEdge(vB,vA,dNewWeight);        eclLocator.addedEdge(e);      } else       weCorrectEdge.setWeight(dNewWeight);    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  public void sendEffectIconsTo(Player player){  List<Effect> effects=getAbnormalEffects();  PacketSendUtility.sendPacket(player,new SM_ABNORMAL_EFFECT(getOwner(),abnormals,effects));}  }
class C{  public static Object[][] combine(Object[][] a1,Object[][] a2){  List<Object[]> combined=new LinkedList<>();  for (  Object[] o : a1) {    for (    Object[] o2 : a2) {      combined.add(concatAll(o,o2));    }  }  return combined.toArray(new Object[0][0]);}  }
class C{  @Inject AuditLogResource(final AuditLog auditLog,final Authorization authorization,final HttpHeader httpHeader,final PaginationHelper<AuditLogEntry> paginationHelper){  this.auditLog=auditLog;  this.authorization=authorization;  this.httpHeader=httpHeader;  this.paginationHelper=paginationHelper;}  }
class C{  private void createFieldDecl(polyglot.ast.FieldDecl field){  int modifiers=Util.getModifier(field.fieldInstance().flags());  String name=field.fieldInstance().name();  soot.Type sootType=Util.getSootType(field.fieldInstance().type());  soot.SootField sootField=new soot.SootField(name,sootType,modifiers);  sootClass.addField(sootField);  if (field.fieldInstance().flags().isStatic()) {    if (field.init() != null) {      if (field.flags().isFinal() && (field.type().type().isPrimitive() || (field.type().type().toString().equals("java.lang.String"))) && field.fieldInstance().isConstant()) {        addConstValTag(field,sootField);      } else {        if (staticFieldInits == null) {          staticFieldInits=new ArrayList<FieldDecl>();        }        staticFieldInits.add(field);      }    }  } else {    if (field.init() != null) {      if (fieldInits == null) {        fieldInits=new ArrayList<FieldDecl>();      }      fieldInits.add(field);    }  }  Util.addLnPosTags(sootField,field.position());}  }
class C{  public static void closeQuietly(Closeable closeable){  if (closeable != null) {    try {      closeable.close();    } catch (    RuntimeException rethrown) {      throw rethrown;    }catch (    Exception ignored) {    }  }}  }
class C{  public static void finishFragement(Activity activity,String... names){  FragmentManager manager=activity.getFragmentManager();  int length=names.length;  for (int i=0; i < length; i++) {    String name=names[i];    manager.popBackStack(name,FragmentManager.POP_BACK_STACK_INCLUSIVE);  }  FragmentTransaction transaction=manager.beginTransaction();  for (int i=0; i < length; i++) {    String name=names[i];    Fragment fragment=manager.findFragmentByTag(name);    transaction.remove(fragment);  }  transaction.commit();}  }
class C{  private BufferedImage createImage(int width,boolean reverseColours){  BufferedImage image=new BufferedImage(width,IMAGE_HEIGHT,BufferedImage.TYPE_INT_RGB);  Graphics2D g2=image.createGraphics();  GradientPaint gradient=new GradientPaint(0,0,reverseColours ? getEndColour() : getStartColour(),width,0,reverseColours ? getStartColour() : getEndColour());  g2.setPaint(gradient);  g2.fillRect(0,0,width,IMAGE_HEIGHT);  return image;}  }
class C{  private void maybePerformMigrationTasks(){  if (DocumentModeManager.getInstance(this).isOptOutCleanUpPending()) {    cleanUpChromeRecents(DocumentModeManager.getInstance(this).isOptedOutOfDocumentMode());    DocumentModeManager.getInstance(this).setOptOutCleanUpPending(false);  }}  }
class C{  public List<SAMValidationError> isValid(final String readName,final long recordNumber){  if (this.isEmpty()) {    return null;  }  List<SAMValidationError> ret=null;  boolean seenRealOperator=false;  for (int i=0; i < cigarElements.size(); ++i) {    final CigarElement element=cigarElements.get(i);    final CigarOperator op=element.getOperator();    if (isClippingOperator(op)) {      if (op == CigarOperator.H) {        if (i != 0 && i != cigarElements.size() - 1) {          if (ret == null)           ret=new ArrayList<>();          ret.add(new SAMValidationError(SAMValidationError.Type.INVALID_CIGAR,"Hard clipping operator not at start or end of CIGAR",readName,recordNumber));        }      } else {        if (op != CigarOperator.S)         throw new IllegalStateException("Should never happen: " + op.name());        if (i == 0 || i == cigarElements.size() - 1) {        } else         if (i == 1) {          if (cigarElements.size() == 3 && cigarElements.get(2).getOperator() == CigarOperator.H) {          } else           if (cigarElements.get(0).getOperator() != CigarOperator.H) {            if (ret == null)             ret=new ArrayList<>();            ret.add(new SAMValidationError(SAMValidationError.Type.INVALID_CIGAR,"Soft clipping CIGAR operator can only be inside of hard clipping operator",readName,recordNumber));          }        } else         if (i == cigarElements.size() - 2) {          if (cigarElements.get(cigarElements.size() - 1).getOperator() != CigarOperator.H) {            if (ret == null)             ret=new ArrayList<>();            ret.add(new SAMValidationError(SAMValidationError.Type.INVALID_CIGAR,"Soft clipping CIGAR operator can only be inside of hard clipping operator",readName,recordNumber));          }        } else {          if (ret == null)           ret=new ArrayList<>();          ret.add(new SAMValidationError(SAMValidationError.Type.INVALID_CIGAR,"Soft clipping CIGAR operator can at start or end of read, or be inside of hard clipping operator",readName,recordNumber));        }      }    } else     if (isRealOperator(op)) {      seenRealOperator=true;      if (isInDelOperator(op)) {        for (int j=i + 1; j < cigarElements.size(); ++j) {          final CigarOperator nextOperator=cigarElements.get(j).getOperator();          if ((isRealOperator(nextOperator) && !isInDelOperator(nextOperator)) || isPaddingOperator(nextOperator)) {            break;          }          if (isInDelOperator(nextOperator) && op == nextOperator) {            if (ret == null)             ret=new ArrayList<>();            ret.add(new SAMValidationError(SAMValidationError.Type.INVALID_CIGAR,"No M or N operator between pair of " + op.name() + " operators in CIGAR",readName,recordNumber));          }        }      }    } else     if (isPaddingOperator(op)) {      if (i == 0 || i == cigarElements.size() - 1) {        if (ret == null)         ret=new ArrayList<>();        ret.add(new SAMValidationError(SAMValidationError.Type.INVALID_CIGAR,"Padding operator not valid at start or end of CIGAR",readName,recordNumber));      } else       if (!isRealOperator(cigarElements.get(i - 1).getOperator()) || !isRealOperator(cigarElements.get(i + 1).getOperator())) {        if (ret == null)         ret=new ArrayList<>();        ret.add(new SAMValidationError(SAMValidationError.Type.INVALID_CIGAR,"Padding operator not between real operators in CIGAR",readName,recordNumber));      }    }  }  if (!seenRealOperator) {    if (ret == null)     ret=new ArrayList<>();    ret.add(new SAMValidationError(SAMValidationError.Type.INVALID_CIGAR,"No real operator (M|I|D|N) in CIGAR",readName,recordNumber));  }  return ret;}  }
class C{  public boolean canClip(){  return !isEmpty() && mRect != null;}  }
class C{  private static void readMessageType(IonReader reader,IapMessageFields iapMessageFields){  if (reader.fieldType == IonFieldTypes.KEY_SHORT) {    if (isMessageTypeKey(reader)) {      reader.nextParse();      if (reader.fieldType == IonFieldTypes.BYTES) {        iapMessageFields.messageTypeOffset=reader.index;        iapMessageFields.messageTypeLength=reader.fieldLength;      }      reader.nextParse();    }  }}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public InstanceOfExpr fullCopy(){  InstanceOfExpr tree=(InstanceOfExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  protected PhotosRestoreQuery photoId(int value){  return unsafeParam("photo_id",value);}  }
class C{  public static void onReceiveUpgradePatch(Context context,String patchLocation){  Tinker.with(context).getPatchListener().onPatchReceived(patchLocation,true);}  }
class C{  public static ArrayList<String> jsonArrayStringToArrayList(String jsonString){  String modString=jsonString.replaceFirst("\\[","");  modString=modString.replaceFirst("\\]","");  modString=modString.replaceAll("\"","");  String[] elements=modString.split("\\s*,\\s*");  return new ArrayList<>(Arrays.asList(elements));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonBindingGroupGate_ME_TO_SELF(String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200422,value0,skillname);}  }
class C{  public void forceNSDecl(String uri){  forcedDeclTable.put(uri,Boolean.TRUE);}  }
class C{  @Override public void notationDecl(String name,XMLResourceIdentifier identifier,Augmentations augs) throws XNIException {  String publicId=identifier.getPublicId();  String literalSystemId=identifier.getLiteralSystemId();  if (fInternalSubset != null && !fInDTDExternalSubset) {    fInternalSubset.append("<!NOTATION ");    fInternalSubset.append(name);    if (publicId != null) {      fInternalSubset.append(" PUBLIC '");      fInternalSubset.append(publicId);      if (literalSystemId != null) {        fInternalSubset.append("' '");        fInternalSubset.append(literalSystemId);      }    } else {      fInternalSubset.append(" SYSTEM '");      fInternalSubset.append(literalSystemId);    }    fInternalSubset.append("'>\n");  }  if (fDocumentImpl != null && fDocumentType != null) {    NamedNodeMap notations=fDocumentType.getNotations();    if (notations.getNamedItem(name) == null) {      NotationImpl notation=(NotationImpl)fDocumentImpl.createNotation(name);      notation.setPublicId(publicId);      notation.setSystemId(literalSystemId);      notation.setBaseURI(identifier.getBaseSystemId());      notations.setNamedItem(notation);    }  }  if (fDocumentTypeIndex != -1) {    boolean found=false;    int nodeIndex=fDeferredDocumentImpl.getLastChild(fDocumentTypeIndex,false);    while (nodeIndex != -1) {      short nodeType=fDeferredDocumentImpl.getNodeType(nodeIndex,false);      if (nodeType == Node.NOTATION_NODE) {        String nodeName=fDeferredDocumentImpl.getNodeName(nodeIndex,false);        if (nodeName.equals(name)) {          found=true;          break;        }      }      nodeIndex=fDeferredDocumentImpl.getPrevSibling(nodeIndex,false);    }    if (!found) {      int notationIndex=fDeferredDocumentImpl.createDeferredNotation(name,publicId,literalSystemId,identifier.getBaseSystemId());      fDeferredDocumentImpl.appendChild(fDocumentTypeIndex,notationIndex);    }  }}  }
class C{  protected void startIntentService(Location mLocation){  Intent intent=new Intent(this,FetchAddressIntentService.class);  intent.putExtra(AppUtils.LocationConstants.RECEIVER,mResultReceiver);  intent.putExtra(AppUtils.LocationConstants.LOCATION_DATA_EXTRA,mLocation);  startService(intent);}  }
class C{  public final boolean containsKey(String name){  return mMap.containsKey(name);}  }
class C{  public double latDegrees(){  return 180.0 / Math.PI * latRadians;}  }
class C{  protected void addToken(Tokens tokens,int token) throws XNIException {  tokens.addToken(token);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Confuse_END_ME_TO_B(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200443,skilltarget);}  }
class C{  public LeaseMap createLeaseMap(long duration){  return new ConstrainableRegistrarLeaseMap(this,duration);}  }
class C{  public byte[] decode(byte[] array) throws Exception {  try {    return decodeHex(new String(array,getCharsetName()).toCharArray());  } catch (  Exception e) {    throw new Exception(e.getMessage(),e);  }}  }
class C{  public static int clip(int v,int min,int max){  if (v < min)   return min;  if (v > max)   return max;  return v;}  }
class C{  public static byte[] bitmapToByte(Bitmap b){  ByteArrayOutputStream o=new ByteArrayOutputStream();  b.compress(Bitmap.CompressFormat.PNG,100,o);  return o.toByteArray();}  }
class C{  public void ensureStartedAndUpdateRegisteredTypes(){  mStarted=true;  ensureGcmIsInitialized();  mEnableSessionInvalidationsTimer.resume();  HashSet<Integer> typesToRegister=new HashSet<Integer>();  typesToRegister.addAll(ProfileSyncService.get().getPreferredDataTypes());  if (!mSessionInvalidationsEnabled) {    typesToRegister.remove(ModelType.SESSIONS);    typesToRegister.remove(ModelType.FAVICON_TRACKING);    typesToRegister.remove(ModelType.FAVICON_IMAGES);  }  Intent registerIntent=InvalidationIntentProtocol.createRegisterIntent(ChromeSigninController.get(mContext).getSignedInUser(),typesToRegister);  registerIntent.setClass(mContext,InvalidationClientService.class);  mContext.startService(registerIntent);}  }
class C{  protected SaveablePartDialog createCompareDialog(Shell shell,SVNCompareRevisionsInput input){  return new SaveablePartDialog(shell,input);}  }
class C{  private ManifestModInfo registerMod(File file,Manifest manifest){  ManifestModInfo mod=loadMod(file,manifest);  if (mod != null) {    if (idMap.containsKey(mod.getModID())) {      ModInfo mod2=idMap.get(mod.getModID());      duplicates.put(mod.getModID(),mod);      duplicates.put(mod.getModID(),mod2);      log.error("Duplicate mod IDs for files '%s' and '%s'",mod.getModFile(),mod2.getModFile());    } else {      modList.add(mod);      idMap.put(mod.getModID(),mod);    }  }  return mod;}  }
class C{  public static int apply(Document doc,final ViewerBase viewer,String method,final Distances distances) throws IOException {  System.err.println("Computing " + method + " distances");  double[][] vectors=computeVectors(doc,viewer);  int rank=distances.getNtax();  computeCorrelationMatrix(rank,vectors,distances);  convertCorrelationsToDistances(distances);  return vectors.length;}  }
class C{  void handleEOD(EncoderContext context,StringBuilder buffer){  int unwritten=(buffer.length() / 3) * 2;  int rest=buffer.length() % 3;  int curCodewordCount=context.getCodewordCount() + unwritten;  context.updateSymbolInfo(curCodewordCount);  int available=context.getSymbolInfo().getDataCapacity() - curCodewordCount;  if (rest == 2) {    buffer.append('\0');    while (buffer.length() >= 3) {      writeNextTriplet(context,buffer);    }    if (context.hasMoreCharacters()) {      context.writeCodeword(HighLevelEncoder.C40_UNLATCH);    }  } else   if (available == 1 && rest == 1) {    while (buffer.length() >= 3) {      writeNextTriplet(context,buffer);    }    if (context.hasMoreCharacters()) {      context.writeCodeword(HighLevelEncoder.C40_UNLATCH);    }    context.pos--;  } else   if (rest == 0) {    while (buffer.length() >= 3) {      writeNextTriplet(context,buffer);    }    if (available > 0 || context.hasMoreCharacters()) {      context.writeCodeword(HighLevelEncoder.C40_UNLATCH);    }  } else {    throw new IllegalStateException("Unexpected case. Please report!");  }  context.signalEncoderChange(HighLevelEncoder.ASCII_ENCODATION);}  }
class C{  public int double_set_new(){  String s=soot.PhaseOptions.getString(options,"double-set-new");  if (s.equalsIgnoreCase("hash"))   return double_set_new_hash;  if (s.equalsIgnoreCase("bit"))   return double_set_new_bit;  if (s.equalsIgnoreCase("hybrid"))   return double_set_new_hybrid;  if (s.equalsIgnoreCase("array"))   return double_set_new_array;  if (s.equalsIgnoreCase("heintze"))   return double_set_new_heintze;  throw new RuntimeException("Invalid value " + s + " of phase option double-set-new");}  }
class C{  public static Map<String,Object> quickRunAllProductionRunTasks(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=ServiceUtil.returnSuccess();  Delegator delegator=ctx.getDelegator();  LocalDispatcher dispatcher=ctx.getDispatcher();  Locale locale=(Locale)context.get("locale");  GenericValue userLogin=(GenericValue)context.get("userLogin");  String productionRunId=(String)context.get("productionRunId");  ProductionRun productionRun=new ProductionRun(productionRunId,delegator,dispatcher);  if (!productionRun.exist()) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunNotExists",locale));  }  List<GenericValue> tasks=productionRun.getProductionRunRoutingTasks();  GenericValue oneTask=null;  String taskId=null;  for (int i=0; i < tasks.size(); i++) {    oneTask=tasks.get(i);    taskId=oneTask.getString("workEffortId");    try {      Map<String,Object> serviceContext=FastMap.newInstance();      serviceContext.put("productionRunId",productionRunId);      serviceContext.put("taskId",taskId);      serviceContext.put("userLogin",userLogin);      dispatcher.runSync("quickRunProductionRunTask",serviceContext);    } catch (    GenericServiceException e) {      Debug.logError(e,"Problem calling the quickRunProductionRunTask service",module);      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunStatusNotChanged",locale));    }  }  return result;}  }
class C{  public ContinousQuery(String typeName,String sqlExpression,QueryResultType queryResultType){  super(typeName,sqlExpression,queryResultType);}  }
class C{  public void clearAllBetweenHeadersAndFooters(){  List<Insertion> headersAndFooters=new ArrayList<>();  headersAndFooters.addAll(getHeaders());  headersAndFooters.addAll(getFooters());  mInserts.clear();  getItems().clear();  mOnlyInsertsCount=0;  mOnlyItemsCount=0;  reAddAllInserts(headersAndFooters);  notifyIfNeed();}  }
class C{  public void addColour(Color colour){  colourList.add(colour);}  }
class C{  private boolean initHeader(int appId,String channel){  if (!TcHeadrHandle.isInit()) {    return TcHeadrHandle.initHeader(mContext,appId,channel);  }  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_COOL_TIME_HOUR(String worldname0,String value1){  return new SM_SYSTEM_MESSAGE(1400027,worldname0,value1);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public FriendsGetByPhonesQuery phones(List<String> value){  return unsafeParam("phones",value);}  }
class C{  public static boolean isConnectedMobile(Context context){  NetworkInfo info=Connectivity.getNetworkInfo(context);  return (info != null && info.isConnected() && info.getType() == ConnectivityManager.TYPE_MOBILE);}  }
class C{  public JobsApiRequest(String format,String asyncAfter,@NotNull String perPage,@NotNull String page,String filters,UriInfo uriInfo,JobPayloadBuilder jobPayloadBuilder,ApiJobStore apiJobStore){  super(format,asyncAfter,perPage,page,uriInfo);  this.jobPayloadBuilder=jobPayloadBuilder;  this.apiJobStore=apiJobStore;  this.filters=filters;}  }
class C{  public void incThresholdBreachedCount(){  breachedCount++;}  }
class C{  public INDArray toRaveledTensor(InputStream is){  return toBgr(is).ravel();}  }
class C{  void register(Event event){  instance.events.put(event.getEvent(),event);  log(event.getEvent() + " registered");}  }
class C{  @deprecated public int hashCode(){  int result=0;  int increment=Math.min(3,this.values.length / 16);  for (int i=0; i < this.values.length; i+=increment) {    result=result * 37 + this.values[i];  }  return result;}  }
class C{  public <T>T create(Class<T> service){  return retrofit.create(service);}  }
class C{  public AuthSignupQuery(VkApiClient client,String firstName,String lastName,int clientId,String clientSecret,String phone){  super(client,"auth.signup",SignupResponse.class);  firstName(firstName);  lastName(lastName);  clientId(clientId);  clientSecret(clientSecret);  phone(phone);}  }
class C{  private void addDecomposablePolygonAction(){  TreePath path=this.tree.getSelectionPath();  if (path != null) {    DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();    if (node.getUserObject() instanceof SandboxBody) {      SandboxBody body=(SandboxBody)node.getUserObject();      List<BodyFixture> fixtures=AddNonConvexFixtureDialog.show(ControlUtilities.getParentWindow(this),Icons.ADD_NON_CONVEX_POLYGON.getImage());      if (fixtures != null) {synchronized (Simulation.LOCK) {          for (          BodyFixture fixture : fixtures) {            body.addFixture(fixture);          }          if (!body.isMassExplicit()) {            body.updateMass();          }        }        for (        BodyFixture fixture : fixtures) {          DefaultMutableTreeNode fixtureNode=new DefaultMutableTreeNode(fixture);          this.model.insertNodeInto(fixtureNode,node,node.getChildCount());        }        this.tree.expandPath(path);      }    }  }}  }
class C{  public static Long truncateOpCRC32(String stream,DLSN dlsn){  CRC32 crc=requestCRC.get();  try {    crc.update(stream.getBytes(UTF_8));    crc.update(dlsn.serializeBytes());    return crc.getValue();  }  finally {    crc.reset();  }}  }
class C{  public PhotosGetAllCommentsQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  private void addMovesForIncompatRegs(Insn curInsn,InstructionIterator insns,List<Register> regs,BitSet incompatRegs){  Register newRegister=null;  final Register resultReg=regs.get(0);  final boolean hasResultReg=curInsn.getOpcode().setsRegister() || curInsn.getOpcode().setsWideRegister();  Insn moveResultInsn=null;  insns.previous();  int nextNewDestination=0;  for (int regIdx=0; regIdx < regs.size(); regIdx++) {    if (incompatRegs.get(regIdx)) {      Register incompatReg=regs.get(regIdx);      if (incompatReg.isEmptyReg()) {        continue;      }      Register source=incompatReg.clone();      Register destination=new Register(source.getType(),nextNewDestination);      nextNewDestination+=SootToDexUtils.getDexWords(source.getType());      if (source.getNumber() != destination.getNumber()) {        Insn extraMove=StmtVisitor.buildMoveInsn(destination,source);        insns.add(extraMove,curInsn,null);        incompatReg.setNumber(destination.getNumber());        if (hasResultReg && regIdx == resultReg.getNumber()) {          moveResultInsn=StmtVisitor.buildMoveInsn(source,destination);          newRegister=destination;        }      }    }  }  insns.next();  if (moveResultInsn != null)   insns.add(moveResultInsn,curInsn,newRegister);}  }
class C{  @NotNull public ListenableFuture<IDevice> startAvd(@Nullable final Project project,@NotNull final AvdInfo info){  if (!initIfNecessary()) {    return Futures.immediateFailedFuture(new RuntimeException("No Android SDK Found"));  }  AccelerationErrorCode error=checkAcceration();  ListenableFuture<IDevice> errorResult=handleAccelerationError(project,info,error);  if (errorResult != null) {    return errorResult;  }  final File emulatorBinary=getEmulatorBinary();  if (!emulatorBinary.isFile()) {    IJ_LOG.error("No emulator binary found!");    return Futures.immediateFailedFuture(new RuntimeException("No emulator binary found"));  }  final String avdName=info.getName();  if (myAvdManager.isAvdRunning(info,SDK_LOG)) {    String baseFolder;    try {      baseFolder=myAvdManager.getBaseAvdFolder();    } catch (    AndroidLocation.AndroidLocationException e) {      baseFolder="$HOME";    }    String message=String.format("AVD %1$s is already running.\n" + "If that is not the case, delete the files at\n" + "   %2$s/%1$s.avd/*.lock\n"+ "and try again.",avdName,baseFolder);    Messages.showErrorDialog(project,message,"AVD Manager");    return Futures.immediateFailedFuture(new RuntimeException(message));  }  Map<String,String> properties=info.getProperties();  String netDelay=properties.get(AvdWizardUtils.AVD_INI_NETWORK_LATENCY);  String netSpeed=properties.get(AvdWizardUtils.AVD_INI_NETWORK_SPEED);  GeneralCommandLine commandLine=new GeneralCommandLine();  commandLine.setExePath(emulatorBinary.getPath());  if (netDelay != null) {    commandLine.addParameters("-netdelay",netDelay);  }  if (netSpeed != null) {    commandLine.addParameters("-netspeed",netSpeed);  }  commandLine.addParameters("-avd",avdName);  EmulatorRunner runner=new EmulatorRunner(project,"AVD: " + avdName,commandLine,info);  final ProcessHandler processHandler;  try {    processHandler=runner.start();  } catch (  ExecutionException e) {    IJ_LOG.error("Error launching emulator",e);    return Futures.immediateFailedFuture(new RuntimeException(String.format("Error launching emulator %1$s ",avdName),e));  }  final ProgressWindow p=hasQEMU2Installed() ? new BackgroundableProcessIndicator(project,"Launching Emulator",PerformInBackgroundOption.ALWAYS_BACKGROUND,"","",false) : new ProgressWindow(false,true,project);  p.setIndeterminate(false);  p.setDelayInMillis(0);  ApplicationManager.getApplication().executeOnPooledThread(null);  return EmulatorConnectionListener.getDeviceForEmulator(project,info.getName(),processHandler,5,TimeUnit.MINUTES);}  }
class C{  public ContinousQuery(String typeName,String sqlExpression,Object... parameters){  super(typeName,sqlExpression,parameters);}  }
class C{  public static boolean isInRange(VisibleObject object1,VisibleObject object2,float range){  if (object1.getWorldId() != object2.getWorldId() || object1.getInstanceId() != object2.getInstanceId()) {    return false;  }  float dx=(object2.getX() - object1.getX());  float dy=(object2.getY() - object1.getY());  return dx * dx + dy * dy < range * range;}  }
class C{  @Override public void populateField(String value){  if (comboBox != null) {    ValueComboBoxData valueComboBoxData=comboDataMap.get(value);    if (valueComboBoxData != null) {      comboBox.setSelectedItem(valueComboBoxData);    } else {      logger.error("Unknown ValueComboBoxData value : " + value);    }  }}  }
class C{  public static URL[] toURLs(File[] files) throws IOException {  URL[] urls=new URL[files.length];  for (int i=0; i < urls.length; i++) {    urls[i]=files[i].toURI().toURL();  }  return urls;}  }
class C{  public INSECTDictionaryDB(){}  }
class C{  @Override public boolean onPreferenceClick(Preference preference){  if (!isResumed()) {    return false;  }  if (preference == mSyncEncryption && mProfileSyncService.isBackendInitialized()) {    if (mProfileSyncService.isPassphraseRequiredForDecryption()) {      displayPassphraseDialog();    } else {      displayPassphraseTypeDialog();      return true;    }  } else   if (preference == mManageSyncData) {    openDashboardTabInNewActivityStack();    return true;  }  return false;}  }
class C{  boolean inSameSubroutine(final Label block){  for (int i=0; i < srcAndRefPositions.length; ++i) {    if ((srcAndRefPositions[i] & block.srcAndRefPositions[i]) != 0) {      return true;    }  }  return false;}  }
class C{  public BoardUnfixTopicQuery(VkApiClient client,UserActor actor,int groupId,int topicId){  super(client,"board.unfixTopic",OkResponse.class);  accessToken(actor.getAccessToken());  groupId(groupId);  topicId(topicId);}  }
class C{  protected Object readListFromResource(String resourceName) throws IOException {  String suffix=resourceName.substring(resourceName.length() - 4,resourceName.length());  if (suffix.equals(".txt")) {    InputStream resourceStream=this.getClass().getResourceAsStream("prosody/" + resourceName);    HashSet<String> listSet=new HashSet<String>();    BufferedReader in=new BufferedReader(new InputStreamReader(resourceStream,"UTF-8"));    while (in.ready()) {      String line=in.readLine();      listSet.add(line);    }    in.close();    return listSet;  } else {    throw new IllegalArgumentException("Unknown list file format: " + suffix);  }}  }
class C{  private void push(final int type){  if (outputStack == null) {    outputStack=new int[10];  }  int n=outputStack.length;  if (outputStackTop >= n) {    int[] t=new int[Math.max(outputStackTop + 1,2 * n)];    System.arraycopy(outputStack,0,t,0,n);    outputStack=t;  }  outputStack[outputStackTop++]=type;  int top=owner.inputStackTop + outputStackTop;  if (top > owner.outputStackMax) {    owner.outputStackMax=top;  }}  }
class C{  public final static String formatProtocolVersion(final SaveProtocolVersion version,LineFormatter formatter){  if (formatter == null)   formatter=SaveLineFormatter.DEFAULT;  return formatter.appendProtocolVersion(null,version).toString();}  }
class C{  public GeneralException(String msg,List<String> messages){  super(msg);  this.messages=messages;}  }
class C{  public synchronized long commit() throws IOException {  if (saveLoadState == null) {    initSaveLoadState();  }  long gen=-1;  for (  ShardState shard : shards.values()) {    gen=shard.commit();  }  for (  Lookup suggester : suggesters.values()) {    if (suggester instanceof AnalyzingInfixSuggester) {      ((AnalyzingInfixSuggester)suggester).commit();    }  }  JSONObject saveState=new JSONObject();  saveState.put("state",getSaveState());  saveLoadState.save(saveState);  return gen;}  }
class C{  public static String arrayToDelimitedString(Object[] arr,String delim){  if (arr == null) {    return "";  }  StringBuffer sb=new StringBuffer();  for (int i=0; i < arr.length; i++) {    if (i > 0) {      sb.append(delim);    }    sb.append(arr[i]);  }  return sb.toString();}  }
class C{  private synchronized void checkExpiredDelaysAndResetAlarm(){  final long nowElapsedMillis=SystemClock.elapsedRealtime();  long nextDelayTime=Long.MAX_VALUE;  boolean ready=false;  Iterator<JobStatus> it=mTrackedJobs.iterator();  while (it.hasNext()) {    final JobStatus job=it.next();    if (!job.hasTimingDelayConstraint()) {      continue;    }    final long jobDelayTime=job.getEarliestRunTime();    if (jobDelayTime <= nowElapsedMillis) {      job.timeDelayConstraintSatisfied.set(true);      if (canStopTrackingJob(job)) {        it.remove();      }      if (job.isReady()) {        ready=true;      }    } else {      if (nextDelayTime > jobDelayTime) {        nextDelayTime=jobDelayTime;      }    }  }  if (ready) {    mStateChangedListener.onControllerStateChanged();  }  setDelayExpiredAlarm(nextDelayTime);}  }
class C{  public long seedHigh(){  return seedHigh;}  }
class C{  public Stream<T> asStream(){  final Spliterator<T> spliter=Spliterators.spliteratorUnknownSize(asIterator(),NONNULL | IMMUTABLE | ORDERED);  return StreamSupport.stream(spliter,false);}  }
class C{  public static String toString(InputStream input) throws IOException {  return toString(input,Charset.defaultCharset());}  }
class C{  static Sort parseSort(long timestampSec,IndexState state,List<Object> fields,List<String> sortFieldNames,Map<String,FieldDef> dynamicFields){  List<SortField> sortFields=new ArrayList<SortField>();  for (  Object _sub : fields) {    Request sub=(Request)_sub;    String fieldName=sub.getString("field");    SortField sf;    if (sortFieldNames != null) {      sortFieldNames.add(fieldName);    }    if (fieldName.equals("docid")) {      sf=SortField.FIELD_DOC;    } else     if (fieldName.equals("score")) {      sf=SortField.FIELD_SCORE;    } else {      FieldDef fd;      if (dynamicFields != null) {        fd=dynamicFields.get(fieldName);      } else {        fd=null;      }      if (fd == null) {        fd=state.getField(fieldName);      }      if (fd == null) {        sub.fail("field","field \"" + fieldName + "\" was not registered and was not specified as a dynamicField");        fd=null;      }      if (fd.valueSource != null) {        sf=fd.valueSource.getSortField(sub.getBoolean("reverse"));      } else       if (fd.valueType == FieldDef.FieldValueType.LAT_LON) {        if (fd.fieldType.docValuesType() == DocValuesType.NONE) {          sub.fail("field","field \"" + fieldName + "\" was not registered with sort=true");        }        Request sub2=sub.getStruct("origin");        sf=LatLonDocValuesField.newDistanceSort(fieldName,sub2.getDouble("latitude"),sub2.getDouble("longitude"));      } else {        if ((fd.fieldType != null && fd.fieldType.docValuesType() == DocValuesType.NONE) || (fd.fieldType == null && fd.valueSource == null)) {          sub.fail("field","field \"" + fieldName + "\" was not registered with sort=true");        }        if (fd.multiValued) {          String selectorString=sub.getEnum("selector");          if (fd.valueType == FieldDef.FieldValueType.ATOM) {            SortedSetSelector.Type selector;            if (selectorString.equals("min")) {              selector=SortedSetSelector.Type.MIN;            } else             if (selectorString.equals("max")) {              selector=SortedSetSelector.Type.MAX;            } else             if (selectorString.equals("middle_min")) {              selector=SortedSetSelector.Type.MIDDLE_MIN;            } else             if (selectorString.equals("middle_max")) {              selector=SortedSetSelector.Type.MIDDLE_MAX;            } else {              assert false;              selector=null;            }            sf=new SortedSetSortField(fieldName,sub.getBoolean("reverse"),selector);          } else           if (fd.valueType == FieldDef.FieldValueType.INT) {            sf=new SortedNumericSortField(fieldName,SortField.Type.INT,sub.getBoolean("reverse"),parseNumericSelector(sub,selectorString));          } else           if (fd.valueType == FieldDef.FieldValueType.LONG) {            sf=new SortedNumericSortField(fieldName,SortField.Type.LONG,sub.getBoolean("reverse"),parseNumericSelector(sub,selectorString));          } else           if (fd.valueType == FieldDef.FieldValueType.FLOAT) {            sf=new SortedNumericSortField(fieldName,SortField.Type.FLOAT,sub.getBoolean("reverse"),parseNumericSelector(sub,selectorString));          } else           if (fd.valueType == FieldDef.FieldValueType.DOUBLE) {            sf=new SortedNumericSortField(fieldName,SortField.Type.DOUBLE,sub.getBoolean("reverse"),parseNumericSelector(sub,selectorString));          } else {            sub.fail("field","cannot sort by multiValued field \"" + fieldName + "\": type is "+ fd.valueType);            assert false;            sf=null;          }        } else {          SortField.Type sortType;          if (fd.valueType == FieldDef.FieldValueType.ATOM) {            sortType=SortField.Type.STRING;          } else           if (fd.valueType == FieldDef.FieldValueType.LONG || fd.valueType == FieldDef.FieldValueType.DATE_TIME) {            sortType=SortField.Type.LONG;          } else           if (fd.valueType == FieldDef.FieldValueType.INT) {            sortType=SortField.Type.INT;          } else           if (fd.valueType == FieldDef.FieldValueType.DOUBLE) {            sortType=SortField.Type.DOUBLE;          } else           if (fd.valueType == FieldDef.FieldValueType.FLOAT) {            sortType=SortField.Type.FLOAT;          } else {            sub.fail("field","cannot sort by field \"" + fieldName + "\": type is "+ fd.valueType);            assert false;            sortType=null;          }          sf=new SortField(fieldName,sortType,sub.getBoolean("reverse"));        }      }      boolean hasMissingLast=sub.hasParam("missingLast");      boolean missingLast=sub.getBoolean("missingLast");      if (fd.valueType == FieldDef.FieldValueType.ATOM) {        if (missingLast) {          sf.setMissingValue(SortField.STRING_LAST);        } else {          sf.setMissingValue(SortField.STRING_FIRST);        }      } else       if (fd.valueType == FieldDef.FieldValueType.INT) {        sf.setMissingValue(missingLast ? Integer.MAX_VALUE : Integer.MIN_VALUE);      } else       if (fd.valueType == FieldDef.FieldValueType.LONG) {        sf.setMissingValue(missingLast ? Long.MAX_VALUE : Long.MIN_VALUE);      } else       if (fd.valueType == FieldDef.FieldValueType.FLOAT) {        sf.setMissingValue(missingLast ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY);      } else       if (fd.valueType == FieldDef.FieldValueType.DOUBLE) {        sf.setMissingValue(missingLast ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY);      } else       if (hasMissingLast) {        sub.fail("missingLast","field=" + fieldName + ": can only specify missingLast for string and numeric field types: got SortField type "+ sf.getType());      }    }    sortFields.add(sf);  }  return new Sort(sortFields.toArray(new SortField[sortFields.size()]));}  }
class C{  public void sendMessage(String mac,MessageItem item,OnSendMessageListener listener){  sendMessage(mac,item,false,listener);}  }
class C{  private void deleteLoginData(final LoginType type,final boolean deleteSaveAuth){  if (deleteSaveAuth) {    config.delete(ConfigKey.LOGIN_SAVE_AUTH);  }switch (type) {case ALL:    config.delete(ConfigKey.LOGIN_GOOGLE_AUTH_TOKEN);  config.delete(ConfigKey.LOGIN_GOOGLE_APP_USERNAME);config.delete(ConfigKey.LOGIN_GOOGLE_APP_PASSWORD);config.delete(ConfigKey.LOGIN_PTC_USERNAME);config.delete(ConfigKey.LOGIN_PTC_PASSWORD);break;case GOOGLE_AUTH:config.delete(ConfigKey.LOGIN_GOOGLE_AUTH_TOKEN);break;case GOOGLE_APP_PASSWORD:config.delete(ConfigKey.LOGIN_GOOGLE_APP_USERNAME);config.delete(ConfigKey.LOGIN_GOOGLE_APP_PASSWORD);break;case PTC:config.delete(ConfigKey.LOGIN_PTC_USERNAME);config.delete(ConfigKey.LOGIN_PTC_PASSWORD);break;default :}}  }
class C{  DavaBody(Body body){  this(body.getMethod());  debug("DavaBody","creating DavaBody for" + body.getMethod().toString());  Dava.v().log("\nstart method " + body.getMethod().toString());  if (DEBUG) {    if (body.getMethod().getExceptions().size() != 0)     debug("DavaBody","printing NON EMPTY exception list for " + body.getMethod().toString() + " "+ body.getMethod().getExceptions().toString());  }  copy_Body(body);  AugmentedStmtGraph asg=new AugmentedStmtGraph(new BriefUnitGraph(this),new TrapUnitGraph(this));  ExceptionFinder.v().preprocess(this,asg);  SETNode SET=new SETTopNode(asg.get_ChainView());  while (true) {    try {      CycleFinder.v().find(this,asg,SET);      IfFinder.v().find(this,asg,SET);      SwitchFinder.v().find(this,asg,SET);      SynchronizedBlockFinder.v().find(this,asg,SET);      ExceptionFinder.v().find(this,asg,SET);      SequenceFinder.v().find(this,asg,SET);      LabeledBlockFinder.v().find(this,asg,SET);      AbruptEdgeFinder.v().find(this,asg,SET);    } catch (    RetriggerAnalysisException rae) {      SET=new SETTopNode(asg.get_ChainView());      consumedConditions=new HashSet<Object>();      continue;    }    break;  }  MonitorConverter.v().convert(this);  ThrowNullConverter.v().convert(this);  ASTNode AST=SET.emit_AST();  getTraps().clear();  getUnits().clear();  getUnits().addLast(AST);  do {    G.v().ASTAnalysis_modified=false;    AST.perform_Analysis(UselessTryRemover.v());  } while (G.v().ASTAnalysis_modified);  if (AST instanceof ASTMethodNode) {    ((ASTMethodNode)AST).storeLocals(this);    Map options=PhaseOptions.v().getPhaseOptions("db.force-recompile");    boolean force=PhaseOptions.getBoolean(options,"enabled");    if (force) {      AST.apply(new SuperFirstStmtHandler((ASTMethodNode)AST));    }    debug("DavaBody","PreInit booleans is" + G.v().SootMethodAddedByDava);  }  Dava.v().log("end method " + body.getMethod().toString());}  }
class C{  public void addUpdateListener(final BaseListener listener){  addUpdateListener(listener,null);}  }
class C{  @Override public void onRequestPermissionsResult(int requestCode,@NonNull String[] permissions,@NonNull int[] grantResults){  if (requestCode == REQUEST_READ_CONTACTS) {    if (grantResults.length == 1 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {      populateAutoComplete();    }  }}  }
class C{  public final boolean isValid(JobTrigger trigger){  return validate(trigger) == null;}  }
class C{  private static void rethrow(RuntimeException e) throws InvalidObjectException {  if (e instanceof NullPointerException || e instanceof IllegalArgumentException) {    InvalidObjectException ee=new InvalidObjectException(e.getMessage());    ee.initCause(e);    throw ee;  }  throw e;}  }
class C{  @Override public ILong2IntegerMap create(IName2IdMap label2id,String fileName,ProgressListener progress) throws IOException, CanceledException {  final String name=(new File(fileName)).getName();  if (name.equals("gi_taxid-March2015X.bin") || name.equals("gi2kegg-Nov2015X.bin") || name.equals("gi2tax-Feb2016.bin")|| name.equals("gi2tax-Feb2016X.bin"))   NotificationsInSwing.showWarning("The mapping file '" + name + "' is known to contain errors, please use latest file from the MEGAN6 download page");  if (Long2IntegerBinMap.isBinFile(fileName))   return new Long2IntegerBinMap(fileName); else   return new Long2IntegerFileBasedMap(label2id,fileName,progress != null ? progress : new ProgressPercentage());}  }
class C{  public Vector2f subtract(float valX,float valY){  return new Vector2f(x - valX,y - valY);}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=1;  result=prime * result + ((getId() == null) ? 0 : getId().hashCode());  result=prime * result + ((getTitle() == null) ? 0 : getTitle().hashCode());  result=prime * result + ((getRequestUri() == null) ? 0 : getRequestUri().hashCode());  result=prime * result + ((getParammeters() == null) ? 0 : getParammeters().hashCode());  result=prime * result + ((getMethod() == null) ? 0 : getMethod().hashCode());  result=prime * result + ((getClientHost() == null) ? 0 : getClientHost().hashCode());  result=prime * result + ((getUserAgent() == null) ? 0 : getUserAgent().hashCode());  result=prime * result + ((getStatus() == null) ? 0 : getStatus().hashCode());  result=prime * result + ((getEnable() == null) ? 0 : getEnable().hashCode());  result=prime * result + ((getCreateBy() == null) ? 0 : getCreateBy().hashCode());  result=prime * result + ((getCreateTime() == null) ? 0 : getCreateTime().hashCode());  result=prime * result + ((getUpdateBy() == null) ? 0 : getUpdateBy().hashCode());  result=prime * result + ((getUpdateTime() == null) ? 0 : getUpdateTime().hashCode());  result=prime * result + ((getRemark() == null) ? 0 : getRemark().hashCode());  return result;}  }
class C{  @Override public void close(){  if (reusable) {    cleanDriver();    sendEvent(false);  } else {    super.close();    alive=false;    sendEvent(true);  }}  }
class C{  public static Bucket joinFieldBucket(Bucket bkt1,Bucket bkt2,double numRec){  ConstantRange newRange=bkt1.valueRange().intersect(bkt2.valueRange());  if (!newRange.isValid())   return null;  double rdv1=bkt1.distinctValues(newRange);  double rdv2=bkt2.distinctValues(newRange);  double newDistVals=Math.min(rdv1,rdv2);  if (Double.compare(newDistVals,1.0) < 0)   return null;  double newFreq=Math.min(bkt1.frequency() * (bkt2.frequency() / numRec) * (newDistVals / bkt1.distinctValues()) / rdv2,bkt2.frequency() * (bkt1.frequency() / numRec) * (newDistVals / bkt2.distinctValues()) / rdv1);  if (Double.compare(newFreq,1.0) < 0)   return null;  Bucket smaller=rdv1 < rdv2 ? bkt1 : bkt2;  if (smaller.valuePercentiles() == null)   return new Bucket(newRange,newFreq,newDistVals);  Percentiles newPcts=smaller.valuePercentiles().percentiles(newRange);  return new Bucket(newRange,newFreq,newDistVals,newPcts);}  }
class C{  public PhotosGetAlbumsQuery needSystem(Boolean value){  return unsafeParam("need_system",value);}  }
class C{  public static String removeCrossReference(String text){  if (Strings.isNullOrEmpty(text)) {    return "";  }  Pattern pattern=Pattern.compile("\\[(?<name>[^\\]]+?)\\]( |\\n)*" + "\\[(?<link>[^\\]]*?)\\]");  Matcher matcher=pattern.matcher(text);  StringBuffer result=new StringBuffer();  while (matcher.find()) {    String replacementText=matcher.group("name");    replacementText=Matcher.quoteReplacement(replacementText);    matcher.appendReplacement(result,replacementText);  }  matcher.appendTail(result);  return result.toString();}  }
class C{  public void addCategoryLimitations(boolean include,Category... categories){  String[] categoryVelocityVarNames=new String[categories.length];  for (int i=0; i < categories.length; i++) {    categoryVelocityVarNames[i]=categories[i].getCategoryVelocityVarName();  }  addCategoryLimitations(include,categoryVelocityVarNames);}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  Scoop.getInstance().apply(this);  setContentView(R.layout.activity_scoop_settings);  parseExtras(savedInstanceState);  setupActionBar();  setupRecyclerView();}  }
class C{  public ProcessManifest(String apkPath) throws IOException, XmlPullParserException {  this(new File(apkPath));}  }
class C{  public GroupsCreateQuery publicCategory(Integer value){  return unsafeParam("public_category",value);}  }
class C{  public void parse(Reader reader) throws IOException {  parse(reader,DEFAULT_BUFFER_SIZE);}  }
class C{  private void updateButtonState(GeometryTypeEnum geometryType){  boolean applyTransformEnabled=false;switch (geometryType) {case POINT:case LINE:case POLYGON:    applyTransformEnabled=true;  break;case RASTER:break;default :break;}if (applyTransformationCheckBox != null) {applyTransformationCheckBox.setEnabled(applyTransformEnabled);}}  }
class C{  private void handleDefaultTopBar(){  ViewGroup.LayoutParams params=new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);  setLayoutParams(params);  topBarView=iTopBarInterface.getDefaultTopBarView();  topBarView.setBackgroundColor(getColor(XUIConfig.getTopBarBgColor()));  topBarView.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT,(int)getDefaultTopBarHeight()));  addView(topBarView);  FrameLayout.LayoutParams userViewParams=new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);  userViewParams.topMargin=(int)getContentTopMargin();  addView(mContentView,userViewParams);  initLoadContainer((int)getContentTopMargin());  addView(loadContainer);  handleTopBarShadow();}  }
class C{  public boolean hasSourceTimeoutChanged(final ISourceCommandTag sourceCommandTag,final ISourceCommandTag oldSourceCommandTag){  return sourceCommandTag.getSourceTimeout() != oldSourceCommandTag.getSourceTimeout();}  }
class C{  public double distanceSquared(Vector2 point){  double dx=this.x - point.x;  double dy=this.y - point.y;  return dx * dx + dy * dy;}  }
class C{  public static void renderTemplate(String templateLocation,Map<String,Object> context,Appendable outWriter) throws TemplateException, IOException {  Template template=getTemplate(templateLocation);  renderTemplate(template,context,outWriter);}  }
class C{  private static String doGetFullPath(String filename,boolean includeSeparator){  if (filename == null) {    return null;  }  int prefix=getPrefixLength(filename);  if (prefix < 0) {    return null;  }  if (prefix >= filename.length()) {    if (includeSeparator) {      return getPrefix(filename);    } else {      return filename;    }  }  int index=indexOfLastSeparator(filename);  if (index < 0) {    return filename.substring(0,prefix);  }  int end=index + (includeSeparator ? 1 : 0);  if (end == 0) {    end++;  }  return filename.substring(0,end);}  }
class C{  public static GenericValue create(GenericPK primaryKey){  GenericValue newValue=new GenericValue();  newValue.init(primaryKey);  return newValue;}  }
class C{  public TransferOperation(final PokemonModel pokemon){  super(pokemon);}  }
class C{  public String name(){  return theType.name();}  }
class C{  public void createGraphs(){  String sUsableString=new StringBuilder().append(DataString).toString();  if (TextPreprocessor != null)   sUsableString=TextPreprocessor.preprocess(sUsableString);  int iLen=DataString.length();  HashMap hTokenAppearence=new HashMap();  for (int iNGramSize=MinSize; iNGramSize <= MaxSize; iNGramSize++) {    if (iLen < iNGramSize)     continue;    String sCurNGram=null;    for (int iCurStart=0; iCurStart < iLen; iCurStart++) {      if (iLen < iCurStart + iNGramSize)       break;      sCurNGram=sUsableString.substring(iCurStart,iCurStart + iNGramSize);      if (WordEvaluator != null)       if (!WordEvaluator.evaluateWord(sCurNGram))       continue;      if (hTokenAppearence.containsKey(sCurNGram))       hTokenAppearence.put(sCurNGram,((Double)hTokenAppearence.get(sCurNGram)).doubleValue() + 1.0); else       hTokenAppearence.put(sCurNGram,1.0);    }  }  for (int iNGramSize=MinSize; iNGramSize <= MaxSize; iNGramSize++) {    if (iLen < iNGramSize)     continue;    Vector PrecedingNeighbours=new Vector();    UniqueVertexGraph gGraph=getGraphLevelByNGramSize(iNGramSize);    String sCurNGram="";    for (int iCurStart=0; iCurStart < iLen; iCurStart++) {      if (iLen < iCurStart + iNGramSize)       break;      sCurNGram=sUsableString.substring(iCurStart,iCurStart + iNGramSize);      if (WordEvaluator != null)       if (!WordEvaluator.evaluateWord(sCurNGram))       continue;      String[] aFinalNeighbours;      if (Normalizer != null)       aFinalNeighbours=(String[])Normalizer.normalize(null,PrecedingNeighbours.toArray()); else {        aFinalNeighbours=new String[PrecedingNeighbours.size()];        PrecedingNeighbours.toArray(aFinalNeighbours);      }      createEdgesConnecting(gGraph,sCurNGram,java.util.Arrays.asList(aFinalNeighbours),hTokenAppearence);      PrecedingNeighbours.add(sCurNGram);      if (PrecedingNeighbours.size() > CorrelationWindow * 3)       PrecedingNeighbours.removeElementAt(0);    }    int iNeighboursLen=PrecedingNeighbours.size();    if (iNeighboursLen > 0) {      createEdgesConnecting(gGraph,sCurNGram,(List)PrecedingNeighbours,hTokenAppearence);    }  }}  }
class C{  public String toString(){  StringBuilder buf=new StringBuilder();  buf.append(" taxa=").append(A.cardinality() + B.cardinality());  buf.append(" weight=").append((float)weight);  buf.append(" confidence=").append((float)confidence);  buf.append(":");  for (int a=A.nextSetBit(0); a != -1; a=A.nextSetBit(a + 1))   buf.append(" ").append(a);  buf.append(" |");  for (int b=B.nextSetBit(0); b != -1; b=B.nextSetBit(b + 1))   buf.append(" ").append(b);  return buf.toString();}  }
class C{  public static boolean isLineSupported(Line.Info info){  Mixer mixer;  Mixer.Info[] infoArray=getMixerInfo();  for (int i=0; i < infoArray.length; i++) {    if (infoArray[i] != null) {      mixer=getMixer(infoArray[i]);      if (mixer.isLineSupported(info)) {        return true;      }    }  }  return false;}  }
class C{  public static void assertCommitterLineMatches(GitRepository repo,String commitRef,String regex) throws RepoException {  assertLineWithPrefixMatches(repo,commitRef,"committer ",regex);}  }
class C{  public void shuffle(Random rand){  for (int i=_pos; i-- > 1; ) {    swap(i,rand.nextInt(i));  }}  }
class C{  private ShadowEntryHolder createShadowEntry(IEntryCacheInfo pmaster,TypeData pType){  IEntryHolder master=pmaster.getEntryHolder(this);  int[] backrefIndexPos=pType.createIndexBackreferenceArray(pmaster,master.getEntryData());  return !master.isOffHeapEntry() ? EntryHolderFactory.createShadowEntryHolder(master,pmaster.getBackRefs(),backrefIndexPos,pmaster.getLeaseManagerListRef(),pmaster.getLeaseManagerPosition()) : EntryHolderFactory.createShadowEntryHolder(master,pmaster.getBackRefs(),backrefIndexPos,null,pmaster.getLeaseManagerPosition());}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public NullType fullCopy(){  NullType tree=(NullType)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static void ensureOSXCompatibleFolder(){  File nnnAAAAA=new File(Environment.getExternalStorageDirectory().toString() + "/DCIM/100ANDRO");  if ((!nnnAAAAA.exists()) && (!nnnAAAAA.mkdir())) {    Log.e(TAG,"create NNNAAAAA file: " + nnnAAAAA.getPath() + " failed");  }}  }
class C{  @Override public ListenableFuture<MemberUpdateResponse> updateMember(long memberID,List<String> endpoints){  MemberUpdateRequest memberUpdateRequest=MemberUpdateRequest.newBuilder().addAllPeerURLs(endpoints).setID(memberID).build();  return clusterStub.memberUpdate(memberUpdateRequest);}  }
class C{  public BlockList(Map<Integer,BlockedPlayer> initialList){  this.blockedList=new ConcurrentHashMap<Integer,BlockedPlayer>(initialList);}  }
class C{  public void startWatch(){  _time=_watchdogGroup._timerLogical;}  }
class C{  public MessagesMarkAsReadQuery messageIds(List<Integer> value){  return unsafeParam("message_ids",value);}  }
class C{  public void changeDirectory(String path) throws IllegalStateException, IOException, FTPIllegalReplyException, FTPException {synchronized (lock) {    if (!connected) {      throw new IllegalStateException("Client not connected");    }    if (!authenticated) {      throw new IllegalStateException("Client not authenticated");    }    communication.sendFTPCommand("CWD " + path);    FTPReply r=communication.readFTPReply();    touchAutoNoopTimer();    if (!r.isSuccessCode()) {      throw new FTPException(r);    }  }}  }
class C{  @Override protected boolean runTestsOnEdt(){  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SwitchHostile_A_TO_B(String skillcaster,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200915,skillcaster,skilltarget,skillname);}  }
class C{  public void animateY(int durationMillis,EasingFunction easing){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorY=ObjectAnimator.ofFloat(this,"phaseY",0f,1f);  animatorY.setInterpolator(easing);  animatorY.setDuration(durationMillis);  animatorY.addUpdateListener(mListener);  animatorY.start();}  }
class C{  private void init(String name,long minSize,long maxSize,int growthFactor,int policy,int capacity,boolean daemon){  LOGGER.debug("SynchroBuffer[minWindowSize=" + minSize + ",maxWindowSize="+ maxSize+ ",windowGrowthFactor="+ growthFactor+ ",duplicatePolicy="+ (policy == SynchroBuffer.DUPLICATE_DISCARD ? "DUPLICATE_DISCARD" : (policy == SynchroBuffer.DUPLICATE_REPLACE ? "DUPLICATE_REPLACE" : "DUPLICATE_OK"))+ ", capacity="+ (capacity == SynchroBuffer.INFINITE_CAPACITY ? "INFINITE_CAPACITY" : Integer.toString(capacity))+ ", daemon thread="+ daemon+ "]");  if ((minSize <= 0) || (maxSize <= 0) || (growthFactor <= 0)) {    throw (new IllegalArgumentException("arguments must be greater than zero"));  } else   if (maxSize <= minSize) {    throw (new IllegalArgumentException("maximum window size must be greater than minimum window size"));  } else {    this.minWindowSize=minSize;    this.maxWindowSize=maxSize;    this.windowGrowthFactor=growthFactor;    this.duplicatePolicy=policy;    this.capacity=capacity;    buffer=new ArrayList();    bufferMap=new LinkedHashMap();    checkingThread="".equalsIgnoreCase(name) ? new CheckingThread() : new CheckingThread(name);    checkingThread.setDaemon(daemon);    checkingThread.start();  }}  }
class C{  public void actionPerformed(ActionEvent ev){  Color color=ChooseColorDialog.showChooseColorDialog(getViewer().getFrame(),"Choose color",null);  if (color != null)   execute("set color=" + color.getRed() + " "+ color.getGreen()+ " "+ color.getBlue()+ ";");}  }
class C{  @Override public boolean isLeafNode(){  return true;}  }
class C{  protected void hideModels(Iterable<EpoxyModel<?>> models){  showModels(models,false);}  }
class C{  public void authorLogin(){  login(authorUrl,authorLoginProperty,authorPassword);}  }
class C{  public JsonArray add(String value){  values.add(Json.value(value));  return this;}  }
class C{  private void analyzeAssociations(String className){  Collection<AssociationsInfo> associationInfos=getAssociationInfo(className);  if (fkInCurrentModel == null) {    fkInCurrentModel=new ArrayList<AssociationsInfo>();  } else {    fkInCurrentModel.clear();  }  if (fkInOtherModel == null) {    fkInOtherModel=new ArrayList<AssociationsInfo>();  } else {    fkInOtherModel.clear();  }  for (  AssociationsInfo associationInfo : associationInfos) {    if (associationInfo.getAssociationType() == Const.Model.MANY_TO_ONE || associationInfo.getAssociationType() == Const.Model.ONE_TO_ONE) {      if (associationInfo.getClassHoldsForeignKey().equals(className)) {        fkInCurrentModel.add(associationInfo);      } else {        fkInOtherModel.add(associationInfo);      }    } else     if (associationInfo.getAssociationType() == Const.Model.MANY_TO_MANY) {      fkInOtherModel.add(associationInfo);    }  }}  }
class C{  protected Entity cacheLoadOrStore(Entity entity){  Entity cachedEntity=entityCache.findInCache(entity.getClass(),entity.getId());  if (cachedEntity != null) {    return cachedEntity;  }  entityCache.put(entity,true);  return entity;}  }
class C{  private boolean isImage(String url){  return url.matches(Regex.IMAGE_PATTERN);}  }
class C{  public UsersSearchQuery online(Boolean value){  return unsafeParam("online",value);}  }
class C{  private void register(ILeasedEntryCacheInfo leaseCacheInfo,IEntryHolder entry,long expiration,int objectType){  boolean skipCellRegistration=expiration == Lease.FOREVER || (_alwaysDisableEntriesLeases && objectType == ObjectTypes.ENTRY);  if (!skipCellRegistration) {    Long expirationTime=((expiration / _expirationTimeInterval + 1) * _expirationTimeInterval);    while (true) {      Cell cell=_expirationList.get(expirationTime);      if (cell == null) {        cell=new Cell(_segmentsPerExpirationCell,expirationTime);        Cell currCell=_expirationList.putIfAbsent(expirationTime,cell);        if (currCell != null)         cell=currCell;        cell.register(leaseCacheInfo,entry,objectType);      } else {        cell.register(leaseCacheInfo,entry,objectType);      }      if (cell.isCleaned()) {synchronized (cell) {          Object cur=_expirationList.putIfAbsent(cell.getCellKey(),cell);          if (cur == cell || cur == null)           break;        }      } else       break;    }  } else   leaseCacheInfo.setLeaseManagerListRefAndPosition(null,null);}  }
class C{  public void sortLocations(){  if (l_locations.isEmpty())   return;  Collections.sort(l_locations);  PBLocation fst=l_locations.get(0), loc;  if (!fst.isType(StringConst.EMPTY)) {    for (int i=1; i < l_locations.size(); i++) {      loc=l_locations.get(i);      if (loc.isType(StringConst.EMPTY)) {        loc.setType(fst.getType());        break;      }    }    fst.setType(StringConst.EMPTY);  }}  }
class C{  protected final boolean isInSnapshot(){  return getOwner() instanceof Snapshot;}  }
class C{  PasswordAuthenticator(String username,String password){  this.m_password=password;  this.m_username=username;}  }
class C{  @Override public void execute(@NotNull RecipeExecutor executor) throws TemplateProcessingException {  if (myFolder == null) {    executeInstructions(executor);  } else {    executor.pushFolder(myFolder);    try {      executeInstructions(executor);    }  finally {      executor.popFolder();    }  }}  }
class C{  public MergeJoinPlan(Plan p1,Plan p2,String fldName1,String fldName2,Transaction tx){  this.fldName1=fldName1;  List<String> sortlist1=Arrays.asList(fldName1);  this.sp1=new SortPlan(p1,sortlist1,tx);  this.fldName2=fldName2;  List<String> sortlist2=Arrays.asList(fldName2);  this.sp2=new SortPlan(p2,sortlist2,tx);  schema.addAll(p1.schema());  schema.addAll(p2.schema());  hist=joinHistogram(p1.histogram(),p2.histogram(),fldName1,fldName2);}  }
