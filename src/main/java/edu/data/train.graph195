class C{  public boolean isMultiSelectEnabled(){  return false;}  }
class C{  public static boolean hasNearCache(ClusterNode n,String cacheName){  GridCacheAttributes[] caches=n.attribute(ATTR_CACHE);  if (caches != null)   for (  GridCacheAttributes attrs : caches)   if (F.eq(cacheName,attrs.cacheName()))   return attrs.nearCacheEnabled();  return false;}  }
class C{  public static void logError(String s,Throwable e){  if (e == null) {    e=new Exception(s);  }  System.out.flush();  System.err.println("ERROR: " + s + " "+ e.toString()+ " ------------------------------");  e.printStackTrace();synchronized (BaseTestCase.class) {    try {      FileChannel fc=FilePath.get("error.lock").open("rw");      FileLock lock;      while (true) {        lock=fc.tryLock();        if (lock != null) {          break;        }        Thread.sleep(10);      }      FileWriter fw=new FileWriter("error.txt",true);      PrintWriter pw=new PrintWriter(fw);      e.printStackTrace(pw);      pw.close();      fw.close();      lock.release();    } catch (    Throwable t) {      t.printStackTrace();    }  }  System.err.flush();}  }
class C{  public void rectLine(float x1,float y1,float x2,float y2,float width){  check(ShapeType.Line,ShapeType.Filled,8);  float colorBits=color.toFloatBits();  Vector2 t=tmp.set(y2 - y1,x1 - x2).nor();  width*=0.5f;  float tx=t.x * width;  float ty=t.y * width;  if (shapeType == ShapeType.Line) {    renderer.color(colorBits);    renderer.vertex(x1 + tx,y1 + ty,0);    renderer.color(colorBits);    renderer.vertex(x1 - tx,y1 - ty,0);    renderer.color(colorBits);    renderer.vertex(x2 + tx,y2 + ty,0);    renderer.color(colorBits);    renderer.vertex(x2 - tx,y2 - ty,0);    renderer.color(colorBits);    renderer.vertex(x2 + tx,y2 + ty,0);    renderer.color(colorBits);    renderer.vertex(x1 + tx,y1 + ty,0);    renderer.color(colorBits);    renderer.vertex(x2 - tx,y2 - ty,0);    renderer.color(colorBits);    renderer.vertex(x1 - tx,y1 - ty,0);  } else {    renderer.color(colorBits);    renderer.vertex(x1 + tx,y1 + ty,0);    renderer.color(colorBits);    renderer.vertex(x1 - tx,y1 - ty,0);    renderer.color(colorBits);    renderer.vertex(x2 + tx,y2 + ty,0);    renderer.color(colorBits);    renderer.vertex(x2 - tx,y2 - ty,0);    renderer.color(colorBits);    renderer.vertex(x2 + tx,y2 + ty,0);    renderer.color(colorBits);    renderer.vertex(x1 - tx,y1 - ty,0);  }}  }
class C{  public static void main(String[] args){  jh61b.junit.textui.runClasses(TestVessel.class);}  }
class C{  public static boolean isHigherVisibility(int newVisibility,int oldVisibility){  assertVisibility(oldVisibility);  assertVisibility(newVisibility);switch (oldVisibility) {case Modifier.PRIVATE:    return newVisibility == Modifier.NONE || newVisibility == Modifier.PUBLIC || newVisibility == Modifier.PROTECTED;case Modifier.NONE:  return newVisibility == Modifier.PUBLIC || newVisibility == Modifier.PROTECTED;case Modifier.PROTECTED:return newVisibility == Modifier.PUBLIC;case Modifier.PUBLIC:return false;default :Assert.isTrue(false);return false;}}  }
class C{  public DialView(Context context){  this(context,null);}  }
class C{  public Date lastModified(){  Date docDate=null;  if (this.responseHeader != null) {    docDate=this.responseHeader.lastModified();  }  if (docDate == null && this.request != null)   docDate=this.request.appdate();  if (docDate == null)   docDate=new Date();  return docDate;}  }
class C{  public void addAttribute(CharArray localName,CharArray prefix,CharArray qName,CharArray value){  AttributeImpl attribute;  if (length >= attributes.size()) {    attribute=new AttributeImpl();    attributes.add(attribute);  } else {    attribute=attributes.get(length);  }  attribute.localName=localName;  attribute.prefix=prefix;  attribute.qName=qName;  attribute.value=value;  length++;}  }
class C{  public Map<Id<Link>,Double> readSingleHour(final String hour){  log.info("Reading link statistics for hour " + hour + " from "+ this.file.getAbsolutePath());  Map<Id<Link>,Double> travelTimes=new TreeMap<Id<Link>,Double>();  Integer index=null;  BufferedReader input;  int linkCounter=0;  int linkMultiplier=1;  try {    input=IOUtils.getBufferedReader(file.getAbsolutePath());    try {      String[] header=input.readLine().split("\t");      boolean found=false;      int i=0;      String s="TRAVELTIME" + hour + "avg";      while (!found && i < header.length) {        if (header[i].equalsIgnoreCase(s)) {          index=i;          found=true;        } else {          i++;        }      }      if (index == null) {        throw new RuntimeException("Could not find " + s + " in "+ this.file.getAbsolutePath());      }      String theLine=null;      while ((theLine=input.readLine()) != null) {        String line[]=theLine.split("\t");        if (line.length == header.length) {          travelTimes.put(Id.create(line[0],Link.class),Double.parseDouble(line[index]));        }        if (++linkCounter == linkMultiplier) {          log.info("   Links processed: " + linkCounter);          linkMultiplier*=2;        }      }    }  finally {      input.close();    }    log.info("   Links processed: " + linkCounter + " (Done)");  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }  return travelTimes;}  }
class C{  @Override public void write(byte[] b){  checkNotNull(b);}  }
class C{  public static boolean isValidUnambigPieceStrict(String san){  if (san.length() == 3) {    return PIECES.indexOf(san.charAt(0)) != -1 && FILES.indexOf(san.charAt(1)) != -1 && RANKS.indexOf(san.charAt(2)) != -1;  } else {    return false;  }}  }
class C{  public Row merge(Row master,Row existing){  Iterator<Character> i=master.cells.keySet().iterator();  Row n=new Row();  for (; i.hasNext(); ) {    Character ch=i.next();    Cell a=master.cells.get(ch);    Cell b=existing.cells.get(ch);    Cell s=(b == null) ? new Cell(a) : merge(a,b);    if (s == null) {      return null;    }    n.cells.put(ch,s);  }  i=existing.cells.keySet().iterator();  for (; i.hasNext(); ) {    Character ch=i.next();    if (master.at(ch) != null) {      continue;    }    n.cells.put(ch,existing.at(ch));  }  return n;}  }
class C{  public static void registerEditors(){  Properties props;  Enumeration<?> enm;  String name;  String value;  if (m_EditorsRegistered) {    return;  }  Logger.log(weka.core.logging.Logger.Level.INFO,"---Registering Weka Editors---");  m_EditorsRegistered=true;  try {    props=Utils.readProperties(GUIEDITORS_PROPERTY_FILE);  } catch (  Exception e) {    props=new Properties();    e.printStackTrace();  }  enm=props.propertyNames();  while (enm.hasMoreElements()) {    name=enm.nextElement().toString();    value=props.getProperty(name,"");    registerEditor(name,value);  }}  }
class C{  protected ProducerConfig createKafkaProducerConfig(){  Properties prop=new Properties();  for (  String propString : producerProperties.split(",")) {    if (!propString.contains("=")) {      continue;    }    String[] keyVal=StringUtils.trim(propString).split("=");    prop.put(StringUtils.trim(keyVal[0]),StringUtils.trim(keyVal[1]));  }  configProperties.putAll(prop);  return new ProducerConfig(configProperties);}  }
class C{  public void postProcess() throws Exception {  m_ResultProducer.postProcess();}  }
class C{  public void optimize(){  for (short i=0; i < wordToTagCounters.length; i++) {    if (wordToTagCounters[i] != null) {      allTags.add(i);    }  }  removeUnlikelyTags(threshold,-1.0);}  }
class C{  private void closeInternal(){  final BigdataSailRepositoryConnection cxn=tlTx.get();  if (cxn != null) {    close(cxn);  }}  }
class C{  private void remove(final int row,final int col){  System.arraycopy(this.cols[row],col + 1,this.cols[row],col,this.cols[row].length - 1 - col);  System.arraycopy(this.values[row],col + 1,this.values[row],col,this.values[row].length - 1 - col);  this.maxIndices[row]-=1;}  }
class C{  public <T extends ManagedEntity>T lookupManagedEntity(ManagedObjectReference mor) throws VMWareException {  checkConnected();  T entity=(T)MorUtil.createExactManagedEntity(service.getServerConnection(),mor);  return entity;}  }
class C{  public boolean isOneClickSupported(){  return oneClickSupported;}  }
class C{  public void testUnicodeCleanAndRegex() throws Exception {  final String updateStr="PREFIX ns: <http://example.org/ns#>\n" + "INSERT DATA { GRAPH ns:graph { ns:auml ns:label \"\u00C4\", \"\u00E4\" } }\n";  m_repo.prepareUpdate(updateStr).evaluate();  final String queryStr="PREFIX ns: <http://example.org/ns#>\n" + "SELECT * { GRAPH ns:graph { ?s ?p ?o FILTER(regex(?o, \"\u00E4\", \"i\")) } }";  final IPreparedTupleQuery query=m_repo.prepareTupleQuery(queryStr);  assertEquals(2L,countResults(query.evaluate()));}  }
class C{  public static void addChemicalInjectionChamberRecipe(ItemStack input,String gasName,ItemStack output){  addRecipe(Recipe.CHEMICAL_INJECTION_CHAMBER,new InjectionRecipe(input,gasName,output));}  }
class C{  public static void closeGlobal(){  ArrayList<EnvLoaderListener> listeners;  listeners=new ArrayList<>();  listeners.addAll(_globalLoaderListeners);  _globalLoaderListeners.clear();  for (int i=0; i < listeners.size(); i++) {    EnvLoaderListener listener=listeners.get(i);    listener.classLoaderDestroy(null);  }}  }
class C{  private static void appendTextElement(Document doc,Node parent,String name,String value){  Element e=doc.createElement(name);  e.appendChild(doc.createTextNode(value));  parent.appendChild(e);}  }
class C{  public static void println(String s1,String s2){  println(s1 + s2);}  }
class C{  static void installLazyActionMap(JComponent c,Class loaderClass,String defaultsKey){  ActionMap map=(ActionMap)UIManager.get(defaultsKey);  if (map == null) {    map=new LazyActionMap(loaderClass);    UIManager.getLookAndFeelDefaults().put(defaultsKey,map);  }  SwingUtilities.replaceUIActionMap(c,map);}  }
class C{  public void reset(){  super.reset();  H1=0x6a09e667;  H2=0xbb67ae85;  H3=0x3c6ef372;  H4=0xa54ff53a;  H5=0x510e527f;  H6=0x9b05688c;  H7=0x1f83d9ab;  H8=0x5be0cd19;  xOff=0;  for (int i=0; i != X.length; i++) {    X[i]=0;  }}  }
class C{  public boolean isEquals(){  return this.isEquals;}  }
class C{  public FuzzyQueryBuilder queryName(String queryName){  this.queryName=queryName;  return this;}  }
class C{  public void testContinuousMode() throws Exception {  processTest(DeploymentMode.CONTINUOUS);}  }
class C{  public String toFormattedString(){  return "CUDA texture descriptor:\n    " + createString("\n    ");}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean overwrite=evalBool(stack.pop());  java.io.File selFile=getFile(stack);  if (stack.getUIMgr() == null)   return Boolean.FALSE;  if (selFile.toString().indexOf('.') == -1)   selFile=new java.io.File(selFile.toString() + ".xml");  if (selFile.isFile() && !overwrite) {    return Boolean.FALSE;  }  try {    stack.getUIMgr().getModuleGroup().defaultModule.saveXML(selFile,null);    return Boolean.TRUE;  } catch (  tv.sage.SageException e) {    if (Sage.DBG)     System.out.println("There was an error saving the file: " + e);    return Boolean.FALSE;  }}  }
class C{  public void preparePacketForStreaming(){  setPacketPosition(getDataLength() + HEADER_LENGTH);}  }
class C{  boolean preCompile(HttpServletRequest request) throws ServletException {  String queryString=request.getQueryString();  if (queryString == null) {    return (false);  }  int start=queryString.indexOf(Constants.PRECOMPILE);  if (start < 0) {    return (false);  }  queryString=queryString.substring(start + Constants.PRECOMPILE.length());  if (queryString.length() == 0) {    return (true);  }  if (queryString.startsWith("&")) {    return (true);  }  if (!queryString.startsWith("=")) {    return (false);  }  int limit=queryString.length();  int ampersand=queryString.indexOf("&");  if (ampersand > 0) {    limit=ampersand;  }  String value=queryString.substring(1,limit);  if (value.equals("true")) {    return (true);  } else   if (value.equals("false")) {    return (true);  } else {    throw new ServletException("Cannot have request parameter " + Constants.PRECOMPILE + " set to "+ value);  }}  }
class C{  public byte[] canonicalizeXPathNodeSet(NodeList xpathNodeSet) throws CanonicalizationException {  return canonicalizerSpi.engineCanonicalizeXPathNodeSet(xpathNodeSet);}  }
class C{  public void run(){  memoryManager.start();  userAdmin.start();  transferManager.start();  System.out.println("[" + new Date() + "] JPlagCentral started");  try {    Program program=null;    while (!doStopCentral) {      AccessStructure struct=getNextReadyEntry();      if (struct != null) {        CommandLineOptions opt=struct.getOption();        try {          System.out.println("[" + new Date() + "] New project "+ "found: "+ opt.root_dir);          struct.unzipEntry();          program=new Program(opt);          program.run();          File result=program.get_jplagResult();          ZipUtil.zip(result,result.getParentFile().getPath());          System.out.println("[" + new Date() + "] Project done, "+ "saved to "+ result.getParentFile().getPath());          addToTerminatedQueue(struct,StatusDecorator.COMPARE_SOURCE_DONE,100,"");          struct.setDate(System.currentTimeMillis());          resultAdmin.addResult(struct);          program.closeWriter();          program=null;          System.gc();          try {            AccessStructure.deleteDir(result);          } catch (          SecurityException ex) {            System.out.println("Not allowed to delete results!");          }          struct.deleteEntryFiles();        } catch (        OutOfMemoryError e) {          program=null;          System.gc();          System.out.println("OutOfMemoryError!!!");          e.printStackTrace();          struct.getDecorator().add(jplag.ExitException.UNKNOWN_ERROR_OCCURRED,-1,"Project terminated because of an OutOfMemoryError!");          addToTerminatedQueue(struct);          struct.setDate(System.currentTimeMillis());          resultAdmin.addResult(struct);        }catch (        Throwable e) {          if (e instanceof jplag.ExitException) {            jplag.ExitException ex=(jplag.ExitException)e;            System.out.println("[" + new Date() + "] "+ "ExitException occurred: State="+ ex.getState()+ " Report="+ ex.getReport());            struct.getDecorator().add(ex);          } else           if (struct.getOption().isForceStop()) {            struct.getDecorator().add(jplag.options.Options.SUBMISSION_ABORTED,-1,"Submission aborted!");            System.out.println("Force stop exception occurred!");            e.printStackTrace();          } else {            struct.getDecorator().add(jplag.ExitException.UNKNOWN_ERROR_OCCURRED,-1,"Project terminated with errors: " + e.getMessage());            System.out.println("Exception occurred!");            e.printStackTrace();          }          addToTerminatedQueue(struct);          if (!struct.getOption().isForceStop()) {            struct.setDate(System.currentTimeMillis());            resultAdmin.addResult(struct);          }          if (program != null) {            program.closeWriter();            program=null;          }          System.gc();        }      } else {        try {          Thread.sleep(500);        } catch (        Exception e) {          e.printStackTrace();        }      }    }  } catch (  Throwable t) {    System.out.println("Unknown exception caught!!! " + t.getMessage());    t.printStackTrace();    if (activeStruct != null) {      try {        activeStruct.getDecorator().add(jplag.ExitException.UNKNOWN_ERROR_OCCURRED,-1,"Unknown exception caught!!! " + t.getMessage());      } catch (      Throwable t2) {        System.out.println("Setting activeStruct's error message " + "caused another exception! " + t2.getMessage());        t2.printStackTrace();      }    }  }  System.out.println("[" + new Date() + "] JPlagCentral stopped");}  }
class C{  public static boolean deleteChildren(File directory){  boolean result=true;  if (directory.isDirectory()) {    File[] list=directory.listFiles();    for (int i=list.length; i-- > 0; ) {      result=result && deltree(list[i]);    }  }  return result;}  }
class C{  public static IgfsFileAffinityRange readFileAffinityRange(BinaryRawReader reader){  if (reader.readBoolean()) {    IgfsFileAffinityRange affRange=new IgfsFileAffinityRange();    affRange.readRawBinary(reader);    return affRange;  } else   return null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public Integer build(){  return Integer.valueOf(toComparison());}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static String a_nounCreature(final String noun){  if (noun.equals("chicken")) {    return "a chicken";  }  return a_noun(noun);}  }
class C{  static protected String[] toStrings(final Resource[] resources){  if (resources == null)   return null;  if (resources.length == 0)   return new String[0];  final String[] uris=new String[resources.length];  for (int i=0; i < resources.length; i++) {    uris[i]=resources[i].stringValue();  }  return uris;}  }
class C{  public static BinaryMessage checkAndCorrect(BinaryMessage message,int startIndex){  boolean parityError=message.cardinality() % 2 != 0;  int syndrome=getSyndrome(message,startIndex);  if (syndrome == 0) {    if (parityError) {      message.flip(startIndex + 23);    }    message.setCRC(CRC.PASSED);    return message;  }  int original=message.getInt(0,22);  int index=-1;  int syndromeWeight=3;  int errors=0;  while (index < 23) {    if (index != -1) {      if (index > 0) {        message.flip(index - 1);      }      message.flip(index);      syndromeWeight=2;    }    syndrome=getSyndrome(message,startIndex);    if (syndrome > 0) {      for (int i=0; i < 23; i++) {        errors=Integer.bitCount(syndrome);        if (errors <= syndromeWeight) {          message.xor(12,11,syndrome);          message.rotateRight(i,startIndex,startIndex + 22);          if (index >= 0) {            errors++;          }          int corrected=message.getInt(0,22);          if (Integer.bitCount(original ^ corrected) > 3) {            message.setCRC(CRC.FAILED_CRC);            return message;          }          message.setCRC(CRC.PASSED);          return message;        } else {          message.rotateLeft(startIndex,startIndex + 22);          syndrome=getSyndrome(message,startIndex);        }      }      index++;    }  }  message.setCRC(CRC.FAILED_CRC);  return message;}  }
class C{  public static boolean isStatusClientError(int status){  return (status >= 400 && status < 500);}  }
class C{  public void load(String entidad) throws ClaveIncorrectaExcepcion, DocumentosRepositorioExcepcion {  if ((getNotiId() != null && !getNotiId().equals("")) || (getNifDestinatario() != null && !getNifDestinatario().equals("") && getNumeroExpediente() != null && !getNumeroExpediente().equals(""))) {    DynamicTable tableInfo=new DynamicTable();    DynamicRows rowsInfo=new DynamicRows();    DynamicRow rowInfo=new DynamicRow();    NotificacionesTabla tablaNoti=new NotificacionesTabla();    DbConnection dbConn=new DbConnection();    if (isDebugeable)     logger.debug("load >> numero: " + getId());    boolean incorrectGuid=false;    try {      dbConn.open(DBSessionManager.getSession(entidad));      tableInfo.setTableObject(tablaNoti);      tableInfo.setClassName(NotificacionesTabla.class.getName());      tableInfo.setTablesMethod("getTableName");      tableInfo.setColumnsMethod("getAllColumnNames");      rowInfo.setClassName(NotificacionesDatos.class.getName());      rowInfo.setValuesMethod("loadAllValues");      rowInfo.addRow(this);      rowsInfo.add(rowInfo);      if (!DynamicFns.select(dbConn,tablaNoti.getClausulaPorNotiId(getNotiId(),getNifDestinatario(),getNumeroExpediente()),tableInfo,rowsInfo)) {        incorrectGuid=true;      }    } catch (    Exception e) {      throw new DocumentosRepositorioExcepcion(DocumentosRepositorioErrorCodigos.EC_RETRIEVE_DOCUMENT,e);    } finally {      try {        if (dbConn.existConnection())         dbConn.close();      } catch (      Exception ee) {      }      if (incorrectGuid)       throw new ClaveIncorrectaExcepcion(ClaveIncorrectaErrorCodigos.EC_INCORRECT_GUID);    }  } else   throw new ClaveIncorrectaExcepcion(ClaveIncorrectaErrorCodigos.EC_INCORRECT_GUID);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:15.744 -0400",hash_original_method="BAE6EA6BA1425326A5C650D851AFDCAB",hash_generated_method="A7E9D4FA49FCC1694165AA2047E22405") public boolean isAnyPolicyInhibited(){  return anyPolicyInhibited;}  }
class C{  public Builder play(Animator anim){  if (anim != null) {    mNeedsSort=true;    return new Builder(anim);  }  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:28.968 -0500",hash_original_method="7433B8F0086E8DE587CA3684570FA4BD",hash_generated_method="2018AF2AD2E4969987BE9EBAB6C8F47A") protected SIPClientTransaction(SIPTransactionStack newSIPStack,MessageChannel newChannelToUse){  super(newSIPStack,newChannelToUse);  setBranch(Utils.getInstance().generateBranchId());  this.messageProcessor=newChannelToUse.messageProcessor;  this.setEncapsulatedChannel(newChannelToUse);  this.notifyOnRetransmit=false;  this.timeoutIfStillInCallingState=false;  if (sipStack.isLoggingEnabled()) {    sipStack.getStackLogger().logDebug("Creating clientTransaction " + this);    sipStack.getStackLogger().logStackTrace();  }  this.sipDialogs=new ConcurrentHashMap();}  }
class C{  public boolean isCompleted(){  return isCompleted;}  }
class C{  @Override public QueryBuilder buildWhereClause(SqlColumnMappingFactory columnMappingFactory){  return mFilterCriteria.buildWhereClause(columnMappingFactory);}  }
class C{  protected void doPrintClassification(Classifier classifier,Instance inst,int index) throws Exception {}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean equals(Object other){  if (!(other instanceof Permutation)) {    return false;  }  Permutation otherPerm=(Permutation)other;  return IntUtils.equals(perm,otherPerm.perm);}  }
class C{  public UnregisterNodesRequest clone(){  UnregisterNodesRequest result=new UnregisterNodesRequest();  result.RequestHeader=RequestHeader == null ? null : RequestHeader.clone();  result.NodesToUnregister=NodesToUnregister == null ? null : NodesToUnregister.clone();  return result;}  }
class C{  public boolean checkLabel(final String aLabel){  if (aLabel == null || aLabel.equals("")) {    logger.debug("Never match an empty label");    return false;  }  return aLabel.equals(this.label);}  }
class C{  public ContactEntry(){  super();  getCategories().add(CONTACT_CATEGORY);}  }
class C{  static void clearInstanceCache(){synchronized (INSTANCE_CACHE) {    INSTANCE_CACHE.clear();  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Album al=getAlbum(stack);  return (al == null) ? "" : al.getArtist();}  }
class C{  public final MessageBuilder header(String name,String value){  JsoArray<Pair> headers=message.getHeaders();  if (headers == null) {    headers=JsoArray.create();  }  for (int i=0; i < headers.size(); i++) {    Pair header=headers.get(i);    if (name.equals(header.getName())) {      header.setValue(value);      return this;    }  }  Pair header=Pair.create();  header.setName(name);  header.setValue(value);  headers.add(header);  message.setHeaders(headers);  return this;}  }
class C{  public static boolean readBooleanWithPreamble(String preamble,final EvolutionState state,final LineNumberReader reader){  DecodeReturn d=checkPreamble(preamble,state,reader);  Code.decode(d);  if (d.type != DecodeReturn.T_BOOLEAN)   state.output.fatal("Line " + d.lineNumber + " has no boolean value ('true' or 'false') after preamble '"+ preamble+ "'\n-->"+ d.data);  return (d.l != 0);}  }
class C{  public static String quote(File input){  return quote(input.getAbsolutePath());}  }
class C{  public CompiledST compile(String name,String template){  CompiledST code=compile(null,name,null,template,null);  code.hasFormalArgs=false;  return code;}  }
class C{  public CryptoException(String message,Throwable cause){  super(message);  this.cause=cause;}  }
class C{  public void preDeregister() throws Exception {  try {    close();    if (!sequencer.tryAcquire())     throw new IllegalStateException("can't acquire lock");    try {      unregisterScanners();      unregisterConfigs();      unregisterResultLogManager();    }  finally {      sequencer.release();    }  } catch (  Exception x) {    LOG.log(Level.FINEST,"Failed to unregister: " + x,x);    throw x;  }}  }
class C{  @Override public void beforeRead(Client client){  if (once) {    client.writeStringMessage("Name: ");    once=false;  }}  }
class C{  public VirtualBaseTypeScope(ExecutionEnvironmentDescriptor descriptor){  super(descriptor);}  }
class C{  public ParseException(int theCode,String message,Throwable cause){  super(message,cause);  code=theCode;}  }
class C{  private void openFile(String filename) throws FileNotFoundException {  plogStream=new DataInputStream(new BufferedInputStream(new FileInputStream(new File(filename))));  logger.info("File " + filename + " opened.");  if (logger.isDebugEnabled()) {    logger.debug("Last processed event ID=" + this.lastProcessedEventId);  }  logger.info("Open transactions=" + openTransactions.size());  logger.info("Transaction cache statistics: " + cache.toString());  if (logger.isDebugEnabled()) {    for (    String xid : openTransactions.keySet()) {      PlogTransaction t=openTransactions.get(xid);      StringBuffer sb=new StringBuffer();      sb.append("TRANSACTION: ").append(t.toString());      LargeObjectScanner<PlogLCR> scanner=null;      try {        scanner=t.getLCRList().scanner();        while (scanner.hasNext()) {          PlogLCR lcr=scanner.next();          sb.append("\nLCR: ").append(lcr.toString());        }      } catch (      IOException e) {        sb.append("\nError: unable to scan PlogLCRs: " + e.getMessage());      } finally {        if (scanner != null)         scanner.close();      }      logger.debug(sb.toString());    }  }}  }
class C{  public static Point ovalAngleToPoint(Rectangle r,double angle){  Point center=Geom.center(r);  Point p=Geom.polarToPoint(angle,r.width / 2,r.height / 2);  return new Point(center.x + p.x,center.y + p.y);}  }
class C{  public synchronized void start(){  if (isActive()) {    MONITOR_LOGGER.logp(Level.FINER,GaugeMonitor.class.getName(),"start","the monitor is already active");    return;  }  for (  ObservedObject o : observedObjects) {    final GaugeMonitorObservedObject gmo=(GaugeMonitorObservedObject)o;    gmo.setStatus(RISING_OR_FALLING);    gmo.setPreviousScanGauge(null);  }  doStart();}  }
class C{  public Logarithmic(double p,RandomEngine randomGenerator){  setRandomGenerator(randomGenerator);  setState(p);}  }
class C{  public void write(String s,int off,int len) throws IOException {  if (len > 0) {    checkWrite();  }  super.write(s,off,len);}  }
class C{  public DateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,int secondOfMinute,Chronology chronology){  super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,0,chronology);}  }
class C{  private static void ImportSubtree(Preferences prefsNode,Element xmlNode){  NodeList xmlKids=xmlNode.getChildNodes();  int numXmlKids=xmlKids.getLength();  Preferences[] prefsKids;synchronized (((AbstractPreferences)prefsNode).lock) {    if (((AbstractPreferences)prefsNode).isRemoved())     return;    Element firstXmlKid=(Element)xmlKids.item(0);    ImportPrefs(prefsNode,firstXmlKid);    prefsKids=new Preferences[numXmlKids - 1];    for (int i=1; i < numXmlKids; i++) {      Element xmlKid=(Element)xmlKids.item(i);      prefsKids[i - 1]=prefsNode.node(xmlKid.getAttribute("name"));    }  }  for (int i=1; i < numXmlKids; i++)   ImportSubtree(prefsKids[i - 1],(Element)xmlKids.item(i));}  }
class C{  private void exitWithNoSourceFilesError(){  System.err.println(Messages.NO_SWIFT_FILES_FOUND);  configuration.printHelp();  System.exit(ExitCode.failure());}  }
class C{  public boolean rowInserted() throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  public void addChildAfter(Node newChild,Node node){  if (newChild.next != null)   throw new RuntimeException("newChild had siblings in addChildAfter");  newChild.next=node.next;  node.next=newChild;  if (last == node)   last=newChild;}  }
class C{  public UserProfile read(){  ContactId contact=mRcsSettings.getUserProfileImsUserName();  if (contact == null) {    if (sLogger.isActivated()) {      sLogger.error("IMS user name not provisioned");    }    return null;  }  return new UserProfile(contact,mRcsSettings.getUserProfileImsDomain(),mRcsSettings.getUserProfileImsPrivateId(),mRcsSettings.getUserProfileImsPassword(),mRcsSettings.getUserProfileImsRealm(),mRcsSettings.getXdmServer(),mRcsSettings.getXdmLogin(),mRcsSettings.getXdmPassword(),mRcsSettings.getImConferenceUri(),mRcsSettings);}  }
class C{  public static boolean isNextWindow(URI id){  return id == null || NEXT.equals(id);}  }
class C{  public final void addItem(final int id,@NonNull final CharSequence title){  Item item=new Item(id,title);  adapter.add(item);  adaptGridViewHeight();}  }
class C{  public static String[] split(String searchIn,String splitter){  String[] results=new String[count(searchIn,splitter) + 1];  int position=0;  int i=0;  while (searchIn.indexOf(splitter,position) >= 0) {    results[i]=searchIn.substring(position,searchIn.indexOf(splitter,position + 2));    position=searchIn.indexOf(splitter,position) + 1;    i++;  }  results[(results.length - 1)]=searchIn.substring(position);  return results;}  }
class C{  public static boolean isOrSubOf(Object obj,String parentName) throws ClassNotFoundException {  Class<?> parentClass=loadClass(parentName);  return isOrSubOf(obj,parentClass);}  }
class C{  protected void executeBot(PircBotX bot) throws Exception {  bot.startBot();}  }
class C{  protected void generateCapInteriorIndices(ShapeData shapeData){  GLUTessellatorSupport.CollectIndexListsCallback cb=shapeData.cb;  if (shapeData.capFillIndices == null || shapeData.capFillIndices.capacity() < cb.getNumIndices())   shapeData.capFillIndices=Buffers.newDirectIntBuffer(cb.getNumIndices()); else   shapeData.capFillIndices.clear();  if (shapeData.capFillIndexBuffers == null || shapeData.capFillIndexBuffers.size() < cb.getPrimTypes().size())   shapeData.capFillIndexBuffers=new ArrayList<IntBuffer>(cb.getPrimTypes().size()); else   shapeData.capFillIndexBuffers.clear();  for (  List<Integer> prim : cb.getPrims()) {    IntBuffer ib=shapeData.capFillIndices.slice();    for (    Integer i : prim) {      ib.put(i);    }    ib.flip();    shapeData.capFillIndexBuffers.add(ib);    shapeData.capFillIndices.position(shapeData.capFillIndices.position() + ib.limit());  }}  }
class C{  public CacheExistsException(Cache cache,String msg){  super(msg);  this.cache=cache;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:20.763 -0500",hash_original_method="966FBE43F59146DA25370229D644162D",hash_generated_method="449D50967D3C44E68E9D69DD7F9BFA95") public static void readFully(InputStream in,byte[] dst) throws IOException {  readFully(in,dst,0,dst.length);}  }
class C{  public void testReserveJoinEvent() throws Throwable {  testJoinEvent(Member.Type.RESERVE);}  }
class C{  public ToStringBuilder(final Object object,final ToStringStyle style){  this(object,style,null);}  }
class C{  public ExponentialLogisticModel(String name,Parameter N0Parameter,Parameter logisticGrowthParameter,Parameter logisticShapeParameter,Parameter exponentialGrowthParameter,Parameter transistionTimeParameter,double alpha,Type units){  super(name);  exponentialLogistic=new ExponentialLogistic(units);  this.N0Parameter=N0Parameter;  addVariable(N0Parameter);  N0Parameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));  this.logisticGrowthParameter=logisticGrowthParameter;  addVariable(logisticGrowthParameter);  logisticGrowthParameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));  this.logisticShapeParameter=logisticShapeParameter;  addVariable(logisticShapeParameter);  logisticShapeParameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));  this.exponentialGrowthParameter=exponentialGrowthParameter;  addVariable(exponentialGrowthParameter);  exponentialGrowthParameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));  this.transistionTimeParameter=transistionTimeParameter;  addVariable(transistionTimeParameter);  transistionTimeParameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));  this.alpha=alpha;  setUnits(units);}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (getPriceEntered().signum() == 0) {    log.saveError("FillMandatory",Msg.getElement(getCtx(),"PriceEntered"));    return false;  }  return true;}  }
class C{  public void connect(){}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:42.607 -0500",hash_original_method="043FE176FAAAC79BBB94A20B9880CE43",hash_generated_method="5AC1A6DFD2D7AED3F5003A1B3C44B240") @Override protected void finalize() throws Throwable {  try {    if (nStatement == 0)     return;    if (mDatabase.isInQueueOfStatementsToBeFinalized(nStatement)) {      return;    }    if (mInUse && mStackTrace != null) {      int len=mSqlStmt.length();      StrictMode.onSqliteObjectLeaked("Releasing statement in a finalizer. Please ensure " + "that you explicitly call close() on your cursor: " + mSqlStmt.substring(0,(len > 1000) ? 1000 : len),mStackTrace);    }    releaseSqlStatement();  }  finally {    super.finalize();  }}  }
class C{  public T campaignMedium(String value){  setString(CAMPAIGN_MEDIUM,value);  return (T)this;}  }
class C{  public static DirectMessage createDirectMessage(final String rawJSON) throws TwitterException {  try {    final JSONObject json=new JSONObject(rawJSON);    return directMessageConstructor.newInstance(json);  } catch (  final InstantiationException e) {    throw new TwitterException(e);  }catch (  final IllegalAccessException e) {    throw new AssertionError(e);  }catch (  final InvocationTargetException e) {    throw new TwitterException(e);  }catch (  final JSONException e) {    throw new TwitterException(e);  }}  }
class C{  public ShowLayoutDialogAction(Layout layout,NetworkPanel networkPanel){  super(networkPanel,layout.getDescription(),EnablingCondition.NEURONS);  this.layout=layout;  putValue(SHORT_DESCRIPTION,"Apply the " + layout.getDescription() + " layout to selected neurons");}  }
class C{  public static final double xRand(double xl,double xh,double r){  double res=xl + (xh - xl) * r / 2147483647.0;  return res;}  }
class C{  protected void sendFunctionGroup5(){  sendUpdate();}  }
class C{  public final boolean isStatic(){  return (modifiers & ACC_STATIC) != 0;}  }
class C{  @Override public DriverTask createVolumeClone(List<VolumeClone> list,StorageCapabilities storageCapabilities){  return cloneHelper.createVolumeClone(list);}  }
class C{  private static synchronized void gj_echelonize(double[][] A){  int n=A.length;  int m=A[0].length;  int i=0;  int j=0;  int k;  double temp[];  while ((i < n) && (j < m)) {    k=i;    while ((k < n) && (A[k][j] == 0)) {      k++;    }    if (k < n) {      if (k != i) {        temp=A[i];        A[i]=A[k];        A[k]=temp;      }      if (A[i][j] != 1) {        gj_divide(A,i,j,m);      }      gj_eliminate(A,i,j,n,m);      i++;    }    j++;  }}  }
class C{  private static int level(long position){  return 1 + Long.numberOfTrailingZeros(position);}  }
class C{  public void testThreeNodeSequentialEvent() throws Throwable {  testSequentialEvent(3);}  }
class C{  void expandDotCell(int i,int j){  if (LOG.isDebugEnabled())   LOG.debug("Expanding dot cell ({}, {})",i,j);  for (int k=i + 1; k < j; k++) {    extendDotItemsWithProvedItems(i,k,j,false);  }  Node<Token> node=input.getNode(j - 1);  for (  Arc<Token> arc : node.getOutgoingArcs()) {    int last_word=arc.getLabel().getWord();    int arc_len=arc.getHead().getNumber() - arc.getTail().getNumber();    if (null != dotcells.get(i,j - 1)) {      for (      DotNode dotNode : dotcells.get(i,j - 1).getDotNodes()) {        Trie child_node=dotNode.trieNode.match(last_word);        if (null != child_node) {          addDotItem(child_node,i,j - 1 + arc_len,dotNode.antSuperNodes,null,dotNode.srcPath.extend(arc));        }      }    }  }}  }
class C{  public static void registerConfig(){  Config.registerSelf(RollingAvgStats.class);  numSamples=Config.parms.getInt("sr");  if (numSamples <= 0) {    Config.logger.log(Level.WARNING,"Statistical sample window (sr={0}) must be at least 1",numSamples);  }  int runlength=Config.parms.getInt("rl");  if (runlength > 0 && numSamples >= runlength) {    Config.logger.log(Level.WARNING,"Runlength is shorter than the statistical sample window (-sr={0}), try using BasicStats instead.",numSamples);  }}  }
class C{  static int differenceEncoded(String es1,String es2){  if (es1 == null || es2 == null) {    return 0;  }  int lengthToMatch=Math.min(es1.length(),es2.length());  int diff=0;  for (int i=0; i < lengthToMatch; i++) {    if (es1.charAt(i) == es2.charAt(i)) {      diff++;    }  }  return diff;}  }
class C{  private static int saveNodes(final AbstractSQLProvider provider,final int newViewId,final List<INaviViewNode> nodes,final List<Integer> functionNodeIndices,final List<Integer> codeNodeIndices,final List<Integer> textNodeIndices,final List<Integer> groupNodeIndices,final BiMap<Integer,INaviGroupNode> groupNodeMap) throws SQLException {  final String query="INSERT INTO " + CTableNames.NODES_TABLE + "( view_id, parent_id, type, x, y, width, height, color, bordercolor, "+ " selected, visible) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";  final PreparedStatement preparedStatement=provider.getConnection().getConnection().prepareStatement(query,java.sql.Statement.RETURN_GENERATED_KEYS);  int counter=0;  for (  final INaviViewNode node : nodes) {    String nodeType=null;    if (node instanceof CCodeNode) {      nodeType=CODE;      codeNodeIndices.add(counter);    } else     if (node instanceof CFunctionNode) {      nodeType=FUNCTION;      functionNodeIndices.add(counter);    } else     if (node instanceof INaviGroupNode) {      nodeType=GROUP;      groupNodeIndices.add(counter);      groupNodeMap.put(counter,(INaviGroupNode)node);    } else     if (node instanceof CTextNode) {      nodeType=TEXT;      textNodeIndices.add(counter);    }    counter++;    preparedStatement.setInt(1,newViewId);    preparedStatement.setNull(2,Types.INTEGER);    preparedStatement.setObject(3,nodeType,Types.OTHER);    preparedStatement.setDouble(4,node.getX());    preparedStatement.setDouble(5,node.getY());    preparedStatement.setDouble(6,node.getWidth());    preparedStatement.setDouble(7,node.getHeight());    preparedStatement.setInt(8,node.getColor().getRGB());    preparedStatement.setInt(9,node.getBorderColor().getRGB());    preparedStatement.setBoolean(10,node.isSelected());    preparedStatement.setBoolean(11,node.isVisible());    preparedStatement.addBatch();  }  preparedStatement.executeBatch();  final ResultSet resultSet=preparedStatement.getGeneratedKeys();  int lastId=0;  try {    while (resultSet.next()) {      if (resultSet.isFirst()) {        lastId=resultSet.getInt(1);        break;      }    }  }  finally {    preparedStatement.close();    resultSet.close();  }  return lastId;}  }
class C{  @Override public void jobRun(){  final SysInfoBean sysInfo=Utils.getSysInfo();  final StringWriter sysInfoXml=new StringWriter(1024);  JAXB.marshal(sysInfo,sysInfoXml);  final Map<String,String> paramsMap=new HashMap<>();  paramsMap.put(ScelightOpApi.PARAM_REGFILE_TICKET,ticket);  paramsMap.put(ScelightOpApi.PARAM_REGFILE_SYSINFO,sysInfoXml.toString());  Env.LOGGER.info("Downloading registration file...");  try (final HttpPost httpPost=new HttpPost(Env.URL_APP_OP_REGFILE,paramsMap)){    if (!httpPost.connect()) {      Env.LOGGER.error(errorMsg="Failed to connect to the " + Consts.APP_OPERATOR_NAME + "!");      errorDialogMsgs=new Object[]{errorMsg};      return;    }    if (!httpPost.doPost()) {      Env.LOGGER.error(errorMsg="Failed to send request to the " + Consts.APP_OPERATOR_NAME + "!");      errorDialogMsgs=new Object[]{errorMsg};      return;    }    if (!httpPost.isServerResponseOk()) {      errorMsg=mineErrorMessage(httpPost.getResponse());      Env.LOGGER.error("Failed to download registration file: " + errorMsg);      errorDialogMsgs=new Object[]{"Failed to download registration file:"," ","<html><span style='color:red;font-weight:bold'>" + errorMsg + "</span></html>"};      return;    }    if (!httpPost.saveAttachmentToFile(new SimpleFileProvider(RegManager.PATH_REGISTRATION_FILE,null))) {      Env.LOGGER.error(errorMsg="Failed to save registration file!");      errorDialogMsgs=new Object[]{errorMsg};      return;    }    Env.LOGGER.info("Registration file downloaded successfully.");  } }  }
class C{  @Override public Object clone(){  return this.copy();}  }
class C{  public void addExtension(ASN1ObjectIdentifier oid,boolean critical,byte[] value){  if (extensions.containsKey(oid)) {    throw new IllegalArgumentException("extension " + oid + " already added");  }  extOrdering.addElement(oid);  extensions.put(oid,new Extension(oid,critical,new DEROctetString(value)));}  }
class C{  private void doFilter(List<CompositeMethodDetailDescriptor> list){  if (list.isEmpty()) {    return;  }  Iterator<CompositeMethodDetailDescriptor> iter=list.iterator();  while (iter.hasNext()) {    CompositeMethodDetailDescriptor descriptor=iter.next();    Method method=descriptor.descriptor().method();    if (Property.class.isAssignableFrom(method.getReturnType())) {      iter.remove();    } else     if (Association.class.isAssignableFrom(method.getReturnType())) {      iter.remove();    } else     if (ManyAssociation.class.isAssignableFrom(method.getReturnType())) {      iter.remove();    } else     if (NamedAssociation.class.isAssignableFrom(method.getReturnType())) {      iter.remove();    }  }}  }
class C{  public boolean isEmbeddedId(){  return false;}  }
class C{  public int addNodeInDocOrder(int node,XPathContext support){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));  return addNodeInDocOrder(node,true,support);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  WhiteboxRaster image;  WhiteboxRaster output;  int cols, rows;  int progress=0;  int col, row;  int i;  int numSamplePoints=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  numSamplePoints=Integer.parseInt(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    image=new WhiteboxRaster(inputHeader,"r");    rows=image.getNumberRows();    cols=image.getNumberColumns();    if (rows * cols < numSamplePoints) {      showFeedback("The number of samples cannot exceed the number of cells.");      return;    }    output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    image.close();    NonDuplicatingPriorityQueue queue=new NonDuplicatingPriorityQueue(numSamplePoints);    Random generator=new Random();    GridCell gc;    i=0;    do {      row=generator.nextInt(rows);      col=generator.nextInt(cols);      gc=new GridCell(row,col);      if (queue.add(gc)) {        i++;        progress=(int)(100f * i / numSamplePoints);        updateProgress("Loop 1 of 2:",progress);      }    } while (i < numSamplePoints);    Iterator<GridCell> it=queue.iterator();    i=1;    do {      gc=queue.poll();      output.setValue(gc.row,gc.col,i);      i++;      progress=(int)(100f * i / numSamplePoints);      updateProgress("Loop 2 of 2:",progress);    } while (i < numSamplePoints);    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodedocumenttypenodetype.class,args);}  }
class C{  private void endFormals(){  if (hasFormals) {    hasFormals=false;    buf.append('>');  }}  }
class C{  protected void fireChangeListeners(){  if (listeners == null)   return;  for (int a=0; a < listeners.size(); a++) {    ChangeListener l=listeners.get(a);    try {      l.stateChanged(new ChangeEvent(this));    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  public String toString(){  StringBuffer temp=new StringBuffer();  temp.append(m_miningSchemaI.attribute(m_index));  temp.append("\n\tusage: " + m_usageType + "\n\toutlier treatment: "+ m_outlierTreatmentMethod);  if (m_outlierTreatmentMethod == Outlier.ASEXTREMEVALUES) {    temp.append(" (lowValue = " + m_lowValue + " highValue = "+ m_highValue+ ")");  }  temp.append("\n\tmissing value treatment: " + m_missingValueTreatmentMethod);  if (m_missingValueTreatmentMethod != Missing.ASIS) {    temp.append(" (replacementValue = " + ((m_missingValueReplacementNominal != null) ? m_missingValueReplacementNominal : Utils.doubleToString(m_missingValueReplacementNumeric,4)) + ")");  }  return temp.toString();}  }
class C{  public LoggingConfigurator(){  this(LogContext.getSystemLogContext());}  }
class C{  private static int arrayIndex(int i){  return (i >> SHIFT_PER_WORD);}  }
class C{  public void test_syntax_update_bad_03() throws MalformedQueryException {  final String query="DELETE DATA { ?s <:p> <:o> }";  negativeTest(query);}  }
class C{  private static IFindBugsEngine createEngine(@Nonnull Project p,BugReporter pcb){  FindBugs2 engine=new FindBugs2();  engine.setBugReporter(pcb);  engine.setProject(p);  engine.setDetectorFactoryCollection(DetectorFactoryCollection.instance());  engine.setAnalysisFeatureSettings(Driver.getAnalysisSettingList());  return engine;}  }
class C{  public static TrustStrategy trustCustomCertificateSignedBy(File certFile){  return new TrustStrategy(Strategy.TRUST_CUSTOM_CA_SIGNED_CERTIFICATES,certFile);}  }
class C{  protected Node export(Node n,AbstractDocument d){  super.export(n,d);  GenericElement ge=(GenericElement)n;  ge.nodeName=nodeName;  return n;}  }
class C{  public static String createIndentString(int indentationUnits){  Map<String,String> options=JavaCore.getOptions();  return ToolFactory.createCodeFormatter(options).createIndentationString(indentationUnits);}  }
class C{  public <T>JsonArray<T> createListDtoFromJson(Reader json,Class<T> dtoInterface) throws IOException {  final DtoProvider<T> dtoProvider=getDtoProvider(dtoInterface);  final List<JsonElement> list;  try {    list=gson.fromJson(json,listTypeCache.get(JsonElement.class));  } catch (  JsonSyntaxException e) {    final Throwable cause=e.getCause();    if (cause instanceof IOException) {      throw (IOException)cause;    }    throw e;  }  final List<T> result=new ArrayList<>(list.size());  for (  JsonElement e : list) {    result.add(dtoProvider.fromJson(e));  }  return new JsonArrayImpl<>(result);}  }
class C{  public TimeClientHandler(){  byte[] req="QUERY TIME ORDER".getBytes();  firstMessage=Unpooled.buffer(req.length);  firstMessage.writeBytes(req);}  }
class C{  @DSComment("ListView") @DSSafe(DSCat.GUI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:18.192 -0500",hash_original_method="52D3689EBA08A028E74C350405FC2CA4",hash_generated_method="045363224276C4854AF4CA32ED4639D7") public void addHeaderView(View v,Object data,boolean isSelectable){  if (mAdapter != null && !(mAdapter instanceof HeaderViewListAdapter)) {    throw new IllegalStateException("Cannot add header view to list -- setAdapter has already been called.");  }  FixedViewInfo info=new FixedViewInfo();  info.view=v;  info.data=data;  info.isSelectable=isSelectable;  mHeaderViewInfos.add(info);  if (mAdapter != null && mDataSetObserver != null) {    mDataSetObserver.onChanged();  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:50.748 -0500",hash_original_method="33238DBDD3EE10AC78A38524A4B30B45",hash_generated_method="EB06F1DC315B21A9C36C419617D2C322") private static void registerZygoteSocket(){  if (sServerSocket == null) {    int fileDesc;    try {      String env=System.getenv(ANDROID_SOCKET_ENV);      fileDesc=Integer.parseInt(env);    } catch (    RuntimeException ex) {      throw new RuntimeException(ANDROID_SOCKET_ENV + " unset or invalid",ex);    }    try {      sServerSocket=new LocalServerSocket(createFileDescriptor(fileDesc));    } catch (    IOException ex) {      throw new RuntimeException("Error binding to local socket '" + fileDesc + "'",ex);    }  }}  }
class C{  protected void bottomUpDispatch(DominatorNode node){  if (isFrontierKnown(node))   return;  Iterator children=dt.getChildrenOf(node).iterator();  while (children.hasNext()) {    DominatorNode child=(DominatorNode)children.next();    if (!isFrontierKnown(child))     bottomUpDispatch(child);  }  processNode(node);}  }
class C{  public boolean isOneTimeSyncMode(){  return mOneTimeSyncMode;}  }
class C{  public static void send(InternalDistributedMember recipient,int processorId,DM dm,Map<Integer,SizeEntry> sizes){  Assert.assertTrue(recipient != null,"SizeReplyMessage NULL reply message");  SizeReplyMessage m=new SizeReplyMessage(processorId,sizes);  m.setRecipient(recipient);  dm.putOutgoing(m);}  }
class C{  private UserInfo lookupInstructor(InstructorEditForm frm) throws Exception {  String id=frm.getCareerAcct();  if (id != null && id.trim().length() > 0 && frm.getLookupEnabled().booleanValue()) {    String className=ApplicationProperty.InstructorExternalIdLookupClass.value();    ExternalUidLookup lookup=(ExternalUidLookup)(Class.forName(className).newInstance());    return lookup.doLookup(id);  }  return null;}  }
class C{  public void test4() throws Exception {  VendorData supplierData=setupNewSupplier("2013-01-01 08:00:00",new BigDecimal(2.0D));  VOMarketplace mp1=supplierData.getMarketplace(0);  VOMarketplace mp2=createMarketplace(supplierData);  setDateFactory("2013-07-10 20:00:00");  setCutOffDay(supplierData.getAdminKey(),1);  CustomerData customer=registerCustomer(supplierData);  VOServiceDetails srv1=createPublishActivateService(supplierData,TestPriceModel.EXAMPLE_RATA_WEEK_ROLES,"srv1",mp1);  VOServiceDetails srv2=createPublishActivateService(supplierData,TestPriceModel.EXAMPLE_RATA_WEEK_ROLES,"srv2",mp2);  updateMarketplaceRevenueShare(10.0D,mp1.getMarketplaceId());  updateMarketplaceRevenueShare(30.0D,mp2.getMarketplaceId());  subscribe(customer.getAdminUser(),"srv1_subscr1",srv1,"2013-08-01 12:00:00","ADMIN");  subscribe(customer.getAdminUser(),"srv2_subscr1",srv2,"2013-08-10 12:00:00","ADMIN");  resetCutOffDay(supplierData.getAdminKey());  cacheTestData("test4",new TestData(supplierData));}  }
class C{  public void parse(Reader in,ContentHandler contentHandler,boolean isResume) throws IOException, ParseException {  if (!isResume) {    reset(in);    handlerStatusStack=new LinkedList();  } else {    if (handlerStatusStack == null) {      isResume=false;      reset(in);      handlerStatusStack=new LinkedList();    }  }  LinkedList statusStack=handlerStatusStack;  try {    do {switch (status) {case S_INIT:        contentHandler.startJSON();      nextToken();switch (token.type) {case Yytoken.TYPE_VALUE:      status=S_IN_FINISHED_VALUE;    statusStack.addFirst(new Integer(status));  if (!contentHandler.primitive(token.value))   return;break;case Yytoken.TYPE_LEFT_BRACE:status=S_IN_OBJECT;statusStack.addFirst(new Integer(status));if (!contentHandler.startObject()) return;break;case Yytoken.TYPE_LEFT_SQUARE:status=S_IN_ARRAY;statusStack.addFirst(new Integer(status));if (!contentHandler.startArray()) return;break;default :status=S_IN_ERROR;}break;case S_IN_FINISHED_VALUE:nextToken();if (token.type == Yytoken.TYPE_EOF) {contentHandler.endJSON();status=S_END;return;} else {status=S_IN_ERROR;throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}case S_IN_OBJECT:nextToken();switch (token.type) {case Yytoken.TYPE_COMMA:break;case Yytoken.TYPE_VALUE:if (token.value instanceof String) {String key=(String)token.value;status=S_PASSED_PAIR_KEY;statusStack.addFirst(new Integer(status));if (!contentHandler.startObjectEntry(key)) return;} else {status=S_IN_ERROR;}break;case Yytoken.TYPE_RIGHT_BRACE:if (statusStack.size() > 1) {statusStack.removeFirst();status=peekStatus(statusStack);} else {status=S_IN_FINISHED_VALUE;}if (!contentHandler.endObject()) return;break;default :status=S_IN_ERROR;break;}break;case S_PASSED_PAIR_KEY:nextToken();switch (token.type) {case Yytoken.TYPE_COLON:break;case Yytoken.TYPE_VALUE:statusStack.removeFirst();status=peekStatus(statusStack);if (!contentHandler.primitive(token.value)) return;if (!contentHandler.endObjectEntry()) return;break;case Yytoken.TYPE_LEFT_SQUARE:statusStack.removeFirst();statusStack.addFirst(new Integer(S_IN_PAIR_VALUE));status=S_IN_ARRAY;statusStack.addFirst(new Integer(status));if (!contentHandler.startArray()) return;break;case Yytoken.TYPE_LEFT_BRACE:statusStack.removeFirst();statusStack.addFirst(new Integer(S_IN_PAIR_VALUE));status=S_IN_OBJECT;statusStack.addFirst(new Integer(status));if (!contentHandler.startObject()) return;break;default :status=S_IN_ERROR;}break;case S_IN_PAIR_VALUE:statusStack.removeFirst();status=peekStatus(statusStack);if (!contentHandler.endObjectEntry()) return;break;case S_IN_ARRAY:nextToken();switch (token.type) {case Yytoken.TYPE_COMMA:break;case Yytoken.TYPE_VALUE:if (!contentHandler.primitive(token.value)) return;break;case Yytoken.TYPE_RIGHT_SQUARE:if (statusStack.size() > 1) {statusStack.removeFirst();status=peekStatus(statusStack);} else {status=S_IN_FINISHED_VALUE;}if (!contentHandler.endArray()) return;break;case Yytoken.TYPE_LEFT_BRACE:status=S_IN_OBJECT;statusStack.addFirst(new Integer(status));if (!contentHandler.startObject()) return;break;case Yytoken.TYPE_LEFT_SQUARE:status=S_IN_ARRAY;statusStack.addFirst(new Integer(status));if (!contentHandler.startArray()) return;break;default :status=S_IN_ERROR;}break;case S_END:return;case S_IN_ERROR:throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}if (status == S_IN_ERROR) {throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}} while (token.type != Yytoken.TYPE_EOF);} catch (IOException ie) {status=S_IN_ERROR;throw ie;}catch (ParseException pe) {status=S_IN_ERROR;throw pe;}catch (RuntimeException re) {status=S_IN_ERROR;throw re;}catch (Error e) {status=S_IN_ERROR;throw e;}status=S_IN_ERROR;throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}  }
class C{  static public String[] split(String what,char delim){  if (what == null)   return null;  char chars[]=what.toCharArray();  int splitCount=0;  for (int i=0; i < chars.length; i++) {    if (chars[i] == delim)     splitCount++;  }  if (splitCount == 0) {    String splits[]=new String[1];    splits[0]=new String(what);    return splits;  }  String splits[]=new String[splitCount + 1];  int splitIndex=0;  int startIndex=0;  for (int i=0; i < chars.length; i++) {    if (chars[i] == delim) {      splits[splitIndex++]=new String(chars,startIndex,i - startIndex);      startIndex=i + 1;    }  }  splits[splitIndex]=new String(chars,startIndex,chars.length - startIndex);  return splits;}  }
class C{  private Optional<IcicleRedisResponse> executeLuaScript(final Redis redis,final long batchSize){  List<String> args=Arrays.asList(String.valueOf(MAX_SEQUENCE),String.valueOf(MIN_LOGICAL_SHARD_ID),String.valueOf(MAX_LOGICAL_SHARD_ID),String.valueOf(batchSize));  return redis.evalLuaScript(luaScriptSha,args);}  }
class C{  public static UiObjectMatcher withText(String text){  return withText(text,null);}  }
class C{  public boolean handles(final long identifier){  return m_mandatory.contains(identifier) || m_allowed.contains(identifier);}  }
class C{  public BuildImageParams withRemote(@NotNull String remote){  requireNonNullNorEmpty(remote);  if (files != null) {    throw new IllegalStateException("Files parameter is already set. Remote and files parameters are mutually exclusive.");  }  this.remote=remote;  return this;}  }
class C{  public static synchronized void initializeSecurityManagerForSUT(Set<Thread> privileged){  if (manager == null) {    manager=new MSecurityManager();    if (privileged == null) {      manager.makePrivilegedAllCurrentThreads();    } else {      for (      Thread t : privileged) {        manager.addPrivilegedThread(t);      }    }    manager.apply();  } else {    logger.warn("Sandbox can be initalized only once");  }  counter++;}  }
class C{  public int size(){  return productions.size();}  }
class C{  @Override protected void checkMethodInvocability(AnnotatedExecutableType method,MethodInvocationTree node){}  }
class C{  public Token(int kind){  this(kind,null);}  }
class C{  public String toString(){  StringBuffer result=new StringBuffer();  result.append("[");  for (int i=0; i < size; ++i) {    result.append(vector[i]);    if (i + 1 < size)     result.append(", ");  }  result.append("]");  return result.toString();}  }
class C{  private static JFreeChart createPieChart(){  DefaultPieDataset data=new DefaultPieDataset();  data.setValue("Java",new Double(43.2));  data.setValue("Visual Basic",new Double(0.0));  data.setValue("C/C++",new Double(17.5));  return ChartFactory.createPieChart("Pie Chart",data);}  }
class C{  @EventHandler(ignoreCancelled=true) public void onPlayerAttackEntity(PlayerAttackEntityEvent event){  if (!canInteract(event.getPlayer())) {    event.setCancelled(true);  }}  }
class C{  public void renderLayers(Renderer renderer){  for (int i=0; i < layers.length; ++i) {    if (layers[i] != null) {      layers[i].prerender(renderer);    }  }}  }
class C{  protected String generateOtherFeaturesText(String containerId){  StringBuilder output=new StringBuilder();  output.append("h3.Other Features");  output.append(LINE_SEPARATOR);  output.append(LINE_SEPARATOR);  output.append("|| Feature name || Java API || Ant tasks || Maven 2 / Maven 3 plugin || Comment ||");  output.append(LINE_SEPARATOR);  output.append("| [Debugging] | (/) | (/) | (/) | |");  output.append(LINE_SEPARATOR);  return output.toString();}  }
class C{  public void updateAccountTime(String accountNumber){}  }
class C{  public Try<Upload,Throwable> put(String key,Object value){  return Try.of(1,Throwable.class).map(FluentFunctions.ofChecked(null));}  }
class C{  public boolean cancelLeaseOfMAC(MacAddress mac){  DHCPBinding binding=getDHCPbindingFromMAC(mac);  if (binding != null) {    binding.clearLeaseTimes();    binding.setLeaseStatus(false);    this.setPoolAvailability(this.getPoolAvailability() + 1);    this.setPoolFull(false);    return true;  }  return false;}  }
class C{  public Collection<ReferenceSequence> sequences(){  return mReferences.values();}  }
class C{  private int measureHeight(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)Math.ceil(result);}  }
class C{  public RectangularPrism(float width,float height,float depth,boolean hasCubemapTexture,boolean createTextureCoordinates,boolean createVertexColorBuffer){  this(width,height,depth,hasCubemapTexture,createTextureCoordinates,createVertexColorBuffer,true);}  }
class C{  public void mergeResponseFromShard(int shardNumber,ResponseBuilder rb,List<NamedList<Object>> response){  knownShards.set(shardNumber);  if (pivotFacetField == null) {    pivotFacetField=PivotFacetField.createFromListOfNamedLists(shardNumber,rb,null,response);  } else {    pivotFacetField.contributeFromShard(shardNumber,rb,response);  }}  }
class C{  FlexibleNode readBranch(HashMap<String,Taxon> translationList) throws IOException, ImportException {  double length=0.0;  FlexibleNode branch;  clearLastMetaComment();  if (nextCharacter() == '(') {    branch=readInternalNode(translationList);  } else {    branch=readExternalNode(translationList);  }  if (getLastDelimiter() != ':' && getLastDelimiter() != ',' && getLastDelimiter() != ')') {    String label=readToken(",():;");    if (label.length() > 0) {      branch.setAttribute("label",label);    }  }  if (getLastDelimiter() == ':') {    length=readDouble(" ,():;");    if (getLastMetaComment() != null) {      parseMigrationString(getLastMetaComment(),branch);      clearLastMetaComment();    }  }  branch.setLength(length);  return branch;}  }
class C{  public static void test_diff_getResourceAsStream() throws IOException {  ClassLoader cl=TestMethods.class.getClassLoader();  InputStream in=cl.getResourceAsStream("test2/Resource2.txt");  byte[] contents=readFully(in);  String s=new String(contents,"UTF-8");  assertSame("Who doesn't like a good biscuit?\n",s.intern());}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @SuppressWarnings("unchecked") public void clean(){  Set<String> toRemove=new HashSet<String>();  StendhalRPRuleProcessor ruleProcessor=SingletonRepository.getRuleProcessor();  Long currentTime=Long.valueOf(System.currentTimeMillis());  Long timeoutTime=Long.valueOf(System.currentTimeMillis() - TIMEOUT);  for (  Map.Entry<String,Long> entry : ((Map<String,Long>)membersAndLastSeen.clone()).entrySet()) {    String playerName=entry.getKey();    if (ruleProcessor.getPlayer(playerName) != null) {      membersAndLastSeen.put(playerName,currentTime);    } else {      if (entry.getValue().compareTo(timeoutTime) < 0) {        toRemove.add(playerName);        new GameEvent(playerName,"group",playerName,"timeout").raise();      }    }  }  membersAndLastSeen.keySet().removeAll(toRemove);  Iterator<Map.Entry<String,Long>> itr=openInvites.entrySet().iterator();  while (itr.hasNext()) {    Map.Entry<String,Long> entry=itr.next();    if (entry.getValue().compareTo(timeoutTime) < 0) {      Player invitedPlayer=ruleProcessor.getPlayer(entry.getKey());      if (invitedPlayer != null) {        invitedPlayer.addEvent(new GroupInviteEvent(leader,true));        invitedPlayer.notifyWorldAboutChanges();      }      itr.remove();    }  }  fixLeader();  if ((membersAndLastSeen.size() == 1) && openInvites.isEmpty()) {    toRemove.add(membersAndLastSeen.keySet().iterator().next());    membersAndLastSeen.clear();  }  if (!toRemove.isEmpty()) {    sendGroupChangeEvent();    sendLeftGroupEvent(toRemove);  }}  }
class C{  public FloatHalfBandFilter(Filters filter,float gain){  mCoefficients=filter.getCoefficients();  mBuffer=new ArrayList<Float>();  mBufferSize=mCoefficients.length;  for (int x=0; x < mCoefficients.length; x++) {    mBuffer.add(0.0f);  }  generateIndexMap(mCoefficients.length);  mGain=gain;}  }
class C{  public void removeVertexAndReferences(Vertex vertex){  Vertex managed=findById(vertex.getId());  if (managed == null) {    return;  }  Iterator<Relationship> iterator=findAllRelationshipsTo(vertex).iterator();  while (iterator.hasNext()) {    Relationship relationship=iterator.next();    relationship.getSource().internalRemoveRelationship(relationship);  }  removeVertex(vertex);}  }
class C{  public String toString(){  try {    return this.toString(0);  } catch (  Exception e) {    return null;  }}  }
class C{  public boolean drawImage(Image img,int x,int y,int width,int height,Color bgcolor,ImageObserver observer){  return g.drawImage(img,x,y,width,height,bgcolor,observer);}  }
class C{  private static boolean isSimpleOptional(final StaticAnalysis sa,final JoinGroupNode p,final JoinGroupNode group){  if (!group.isOptional()) {    return false;  }  StatementPatternNode sp=null;  for (  IQueryNode node : group) {    if (node instanceof StatementPatternNode) {      if (sp != null) {        return false;      }      sp=(StatementPatternNode)node;    } else     if (node instanceof FilterNode) {      final FilterNode filter=(FilterNode)node;      final INeedsMaterialization req=filter.getMaterializationRequirement();      if (req.getRequirement() == INeedsMaterialization.Requirement.NEVER) {        continue;      }      if (false && req instanceof ComputedMaterializationRequirement) {        @SuppressWarnings({"rawtypes","unchecked"}) final Set<IVariable<?>> requiredVars=(Set)((ComputedMaterializationRequirement)req).getVarsToMaterialize();        final Set<IVariable<?>> incomingBound=sa.getDefinitelyIncomingBindings(group,new LinkedHashSet<IVariable<?>>());        requiredVars.removeAll(incomingBound);        if (requiredVars.isEmpty()) {          continue;        }      }      return false;    } else {      return false;    }  }  return sp != null;}  }
class C{  public void removeCouplings(final WorkspaceComponent component){  ArrayList<Coupling<?>> toRemove=new ArrayList<Coupling<?>>();  for (  Coupling<?> coupling : getCouplings()) {    if (coupling.getConsumer().getParentComponent() == component) {      toRemove.add(coupling);    }    if (coupling.getProducer().getParentComponent() == component) {      toRemove.add(coupling);    }  }  removeCouplings(toRemove);}  }
class C{  public boolean isSetSessionIDs(){  return this.sessionIDs != null;}  }
class C{  public AbstractSimpleState(S id,Collection<E> deferred){  this(id,deferred,null,null,null);}  }
class C{  public void comprobardisponibilidadprorrogaExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  AppUser appUser=getAppUser(request);  ServiceRepository services=ServiceRepository.getInstance(ServiceClient.create(appUser));  GestionPrestamosBI prestamosService=services.lookupGestionPrestamosBI();  String codigo=request.getParameter("idprestamo");  PrestamoVO prestamo_VO=prestamosService.getPrestamo(codigo);  Collection detallesPrestamos=prestamosService.obtenerDetallesPrestamoByUsuario(prestamo_VO);  prestamosService.comprobarDisponibilidadDetallesPrestamoProrroga(prestamo_VO,detallesPrestamos);  PrestamosUtils.establecerVistas(prestamo_VO,appUser,request,prestamosService,detallesPrestamos);  setInTemporalSession(request,PrestamosConstants.DETALLE_PRESTAMO_KEY,detallesPrestamos);  request.setAttribute(PrestamosConstants.VER_COLUMNA_DISPONIBILIDAD,new Boolean(true));  request.setAttribute(PrestamosConstants.METHOD,METHOD_COMPROBARDISPONIBILIDADPRORROGA);  verPrestamo(mappings,form,request,response);}  }
class C{  public boolean isReversal(){  Object oo=get_Value(COLUMNNAME_IsReversal);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Optional<Path> protoDiscoveryRoot(){  return maybePath(protoDiscoveryRootArg);}  }
class C{  public StraightLogic copy(){  if (_copy == null) {    _copy=new StraightLogic();  }  return _copy;}  }
class C{  protected void acceptDrop(int dropOperation){  DropTargetContextPeer peer=getDropTargetContextPeer();  if (peer != null) {    peer.acceptDrop(dropOperation);  }}  }
class C{  protected void incrementSemaphoreReferenceCount(ImageToProcess img,int count) throws RuntimeException {synchronized (mImageSemaphoreMap) {    ImageReleaseProtocol protocol=mImageSemaphoreMap.get(img);    if (mImageSemaphoreMap.get(img) == null) {      throw new RuntimeException("Image Reference has already been released or has never been held.");    }    protocol.addCount(count);    mImageSemaphoreMap.put(img,protocol);    mOutstandingImageRefs+=count;  }}  }
class C{  public byte[] asByteArray() throws IOException {  if (reader != null) {    throw new IllegalStateException("Cannot get raw bytes from a Reader object.");  }  InputStream in=buildInputStream();  return consumeInputStream(in);}  }
class C{  public NoQueueServersAvailableException(String message,Throwable cause){  super(message,cause);}  }
class C{  @Transactional public void persist(Collection<RawProtein<ProDomRawMatch>> filteredProteins,Map<String,Signature> modelIdToSignatureMap,Map<String,Protein> proteinIdToProteinMap){  for (  RawProtein<ProDomRawMatch> rawProtein : filteredProteins) {    Protein protein=proteinIdToProteinMap.get(rawProtein.getProteinIdentifier());    if (protein == null) {      throw new IllegalStateException("Cannot store match to a protein that is not in database " + "[protein ID= " + rawProtein.getProteinIdentifier() + "]");    }    Set<BlastProDomMatch.BlastProDomLocation> locations=null;    String currentModelId=null;    Signature currentSignature=null;    ProDomRawMatch lastRawMatch=null;    BlastProDomMatch match=null;    for (    ProDomRawMatch rawMatch : rawProtein.getMatches()) {      if (rawMatch == null) {        continue;      }      if (currentModelId == null || !currentModelId.equals(rawMatch.getModelId())) {        if (currentModelId != null) {          if (match != null) {            entityManager.persist(match);          }          match=new BlastProDomMatch(currentSignature,locations);          protein.addMatch(match);        }        locations=new HashSet<BlastProDomMatch.BlastProDomLocation>();        currentModelId=rawMatch.getModelId();        currentSignature=modelIdToSignatureMap.get(currentModelId);        if (currentSignature == null) {          throw new IllegalStateException("Cannot find ProDom model " + currentModelId + " in the database.");        }      }      locations.add(new BlastProDomMatch.BlastProDomLocation(rawMatch.getLocationStart(),rawMatch.getLocationEnd(),rawMatch.getScore(),rawMatch.getEvalue()));      lastRawMatch=rawMatch;    }    if (lastRawMatch != null) {      match=new BlastProDomMatch(currentSignature,locations);      protein.addMatch(match);      entityManager.persist(match);    }  }}  }
class C{  public void addRow(T value){  addRow(value,true);}  }
class C{  public final Entry addEntry(Position inputPosition,Position outputPosition){  Entry entry=new Entry(inputPosition,outputPosition);  entries.add(entry);  return entry;}  }
class C{  protected boolean isDoubleTap(MotionEvent ev){  if (ev.getPointerCount() > 1) {    mLastTocuhDownTime=0;    return false;  }  long downTime=ev.getDownTime();  long diff=downTime - mLastTocuhDownTime;  mLastTocuhDownTime=downTime;  return diff < DOUBLE_TAP_MARGIN_TIME;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public StringWriter(){  buf=new StringBuffer();  lock=buf;}  }
class C{  public ModeledUser retrieveUser(AuthenticationProvider authenticationProvider,AuthenticatedUser authenticatedUser){  if (authenticatedUser instanceof ModeledAuthenticatedUser)   return ((ModeledAuthenticatedUser)authenticatedUser).getUser();  String username=authenticatedUser.getIdentifier();  UserModel userModel=userMapper.selectOne(username);  if (userModel == null)   return null;  ModeledUser user=getObjectInstance(null,userModel);  user.setCurrentUser(new ModeledAuthenticatedUser(authenticatedUser,authenticationProvider,user));  return user;}  }
class C{  public static int findInner(Name ref,Expr[] scopes,Map<Expr,Typeref> types){  for (int i=scopes.length - 1; i >= 0; i--) {    Type st=type(types,scopes[i]);    Binding b=st.find(ref);    if (b != null)     return i;  }  return -1;}  }
class C{  public static boolean intersectRayTriangles(Ray ray,float[] triangles,Vector3 intersection){  float min_dist=Float.MAX_VALUE;  boolean hit=false;  if ((triangles.length / 3) % 3 != 0)   throw new RuntimeException("triangle list size is not a multiple of 3");  for (int i=0; i < triangles.length - 6; i+=9) {    boolean result=intersectRayTriangle(ray,tmp1.set(triangles[i],triangles[i + 1],triangles[i + 2]),tmp2.set(triangles[i + 3],triangles[i + 4],triangles[i + 5]),tmp3.set(triangles[i + 6],triangles[i + 7],triangles[i + 8]),tmp);    if (result == true) {      float dist=ray.origin.tmp().sub(tmp).len2();      if (dist < min_dist) {        min_dist=dist;        best.set(tmp);        hit=true;      }    }  }  if (hit == false)   return false; else {    if (intersection != null)     intersection.set(best);    return true;  }}  }
class C{  public void testReceive_NonBlockNoServerCloseReadonly() throws Exception {  this.channel1.configureBlocking(false);  receiveNoServerChannelCloseReadonly();}  }
class C{  private void addClassDefinition(Class<?> theClass,String title,Document doc) throws Exception {  try {    SimpleAttributeSet bold=new SimpleAttributeSet();    StyleConstants.setBold(bold,true);    setMessageText(title,true,true,bold);    Method method[]=theClass.getDeclaredMethods();    if (method.length > 0) {      for (      Method element : method) {        if (element.getModifiers() == Modifier.PUBLIC) {          Class<?> returnType=element.getReturnType();          String methodName=element.getName();          String methodAttribute=returnType.getName();          setMessageText(methodAttribute + " ",true,false,null);          setMessageText(methodName,true,false,bold);          setMessageText(" (",true,false,null);          Class<?> parms[]=element.getParameterTypes();          Object[] o=new Object[parms.length];          methodAttribute="";          for (int j=0; j < parms.length; j++) {            Object obj=parms[j];            o[j]=obj;            methodAttribute=methodAttribute + o[j].toString();            if (j < parms.length - 1) {              methodAttribute=methodAttribute + ", ";            }          }          setMessageText(methodAttribute + ")",true,true,null);        }      }    }    setMessageText("",true,true,null);  } catch (  Exception ex) {    setMessageText("Error compiling strategy: " + theClass.getName() + ex.getMessage(),false,true,colorRedAttr);  }}  }
class C{  public boolean hasRemaining(){  return bytesLeft() > 0;}  }
class C{  public DataBufferFloat(int size){  super(STABLE,TYPE_FLOAT,size);  data=new float[size];  bankdata=new float[1][];  bankdata[0]=data;}  }
class C{  private static byte[] lmv2Response(byte[] hash,byte[] clientData,byte[] challenge) throws Exception {  byte[] data=new byte[challenge.length + clientData.length];  System.arraycopy(challenge,0,data,0,challenge.length);  System.arraycopy(clientData,0,data,challenge.length,clientData.length);  byte[] mac=hmacMD5(data,hash);  byte[] lmv2Response=new byte[mac.length + clientData.length];  System.arraycopy(mac,0,lmv2Response,0,mac.length);  System.arraycopy(clientData,0,lmv2Response,mac.length,clientData.length);  return lmv2Response;}  }
class C{  public int length(){  return lcText.length;}  }
class C{  public ColladaNode(String ns){  super(ns);}  }
class C{  public int other(int vertex){  if (vertex == v)   return w; else   if (vertex == w)   return v; else   throw new IllegalArgumentException("Illegal endpoint");}  }
class C{  public MyRendererChangeListener(){  this.lastEvent=null;}  }
class C{  public static Animation makeInAnimation(Context c,boolean fromLeft){  Animation a;  if (fromLeft) {    a=AnimationUtils.loadAnimation(c,com.android.internal.R.anim.slide_in_left);  } else {    a=AnimationUtils.loadAnimation(c,com.android.internal.R.anim.slide_in_right);  }  a.setInterpolator(new DecelerateInterpolator());  a.setStartTime(currentAnimationTimeMillis());  return a;}  }
class C{  protected void boundsCheck(int i){  if (i < 0)   throw new ArrayIndexOutOfBoundsException("Attempted to access negative index of DVector.");}  }
class C{  private void helpTestDateFacetsWithIncludeOption(final String fieldName,final boolean rangeMode){  final String p=rangeMode ? "facet.range" : "facet.date";  final String b=rangeMode ? "facet_ranges" : "facet_dates";  final String f=fieldName;  final String c=(rangeMode ? "/lst[@name='counts']" : "");  final String pre="//lst[@name='" + b + "']/lst[@name='"+ f+ "']"+ c;  final String meta=pre + (rangeMode ? "/../" : "");  assertQ("checking counts for lower",req("q","*:*","rows","0","facet","true",p,f,p + ".start","1976-07-01T00:00:00.000Z",p + ".end","1976-07-16T00:00:00.000Z",p + ".gap","+1DAY",p + ".other","all",p + ".include","lower"),"*[count(" + pre + "/int)="+ (rangeMode ? 15 : 18)+ "]",pre + "/int[@name='1976-07-01T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-02T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-03T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-04T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-05T00:00:00Z'][.='2'  ]",pre + "/int[@name='1976-07-06T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-07T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-08T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-09T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-10T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-11T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-12T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-13T00:00:00Z'][.='2'  ]",pre + "/int[@name='1976-07-14T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-15T00:00:00Z'][.='1'  ]",meta + "/int[@name='before' ][.='1']",meta + "/int[@name='after'  ][.='1']",meta + "/int[@name='between'][.='8']");  assertQ("checking counts for upper",req("q","*:*","rows","0","facet","true",p,f,p + ".start","1976-07-01T00:00:00.000Z",p + ".end","1976-07-16T00:00:00.000Z",p + ".gap","+1DAY",p + ".other","all",p + ".include","upper"),"*[count(" + pre + "/int)="+ (rangeMode ? 15 : 18)+ "]",pre + "/int[@name='1976-07-01T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-02T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-03T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-04T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-05T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-06T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-07T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-08T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-09T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-10T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-11T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-12T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-13T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-14T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-15T00:00:00Z'][.='1'  ]",meta + "/int[@name='before' ][.='2']",meta + "/int[@name='after'  ][.='1']",meta + "/int[@name='between'][.='7']");  assertQ("checking counts for lower & upper",req("q","*:*","rows","0","facet","true",p,f,p + ".start","1976-07-01T00:00:00.000Z",p + ".end","1976-07-16T00:00:00.000Z",p + ".gap","+1DAY",p + ".other","all",p + ".include","lower",p + ".include","upper"),"*[count(" + pre + "/int)="+ (rangeMode ? 15 : 18)+ "]",pre + "/int[@name='1976-07-01T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-02T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-03T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-04T00:00:00Z'][.='2'  ]",pre + "/int[@name='1976-07-05T00:00:00Z'][.='2'  ]",pre + "/int[@name='1976-07-06T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-07T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-08T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-09T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-10T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-11T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-12T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-13T00:00:00Z'][.='2'  ]",pre + "/int[@name='1976-07-14T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-15T00:00:00Z'][.='1'  ]",meta + "/int[@name='before' ][.='1']",meta + "/int[@name='after'  ][.='1']",meta + "/int[@name='between'][.='8']");  assertQ("checking counts for upper & edge",req("q","*:*","rows","0","facet","true",p,f,p + ".start","1976-07-01T00:00:00.000Z",p + ".end","1976-07-16T00:00:00.000Z",p + ".gap","+1DAY",p + ".other","all",p + ".include","upper",p + ".include","edge"),"*[count(" + pre + "/int)="+ (rangeMode ? 15 : 18)+ "]",pre + "/int[@name='1976-07-01T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-02T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-03T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-04T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-05T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-06T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-07T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-08T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-09T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-10T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-11T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-12T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-13T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-14T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-15T00:00:00Z'][.='1'  ]",meta + "/int[@name='before' ][.='1']",meta + "/int[@name='after'  ][.='1']",meta + "/int[@name='between'][.='8']");  assertQ("checking counts for upper & outer",req("q","*:*","rows","0","facet","true",p,f,p + ".start","1976-07-01T00:00:00.000Z",p + ".end","1976-07-13T00:00:00.000Z",p + ".gap","+1DAY",p + ".other","all",p + ".include","upper",p + ".include","outer"),"*[count(" + pre + "/int)="+ (rangeMode ? 12 : 15)+ "]",pre + "/int[@name='1976-07-01T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-02T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-03T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-04T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-05T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-06T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-07T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-08T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-09T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-10T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-11T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-12T00:00:00Z'][.='1'  ]",meta + "/int[@name='before' ][.='2']",meta + "/int[@name='after'  ][.='4']",meta + "/int[@name='between'][.='5']");  assertQ("checking counts for lower & edge",req("q","*:*","rows","0","facet","true",p,f,p + ".start","1976-07-01T00:00:00.000Z",p + ".end","1976-07-13T00:00:00.000Z",p + ".gap","+1DAY",p + ".other","all",p + ".include","lower",p + ".include","edge"),"*[count(" + pre + "/int)="+ (rangeMode ? 12 : 15)+ "]",pre + "/int[@name='1976-07-01T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-02T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-03T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-04T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-05T00:00:00Z'][.='2'  ]",pre + "/int[@name='1976-07-06T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-07T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-08T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-09T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-10T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-11T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-12T00:00:00Z'][.='1'  ]",meta + "/int[@name='before' ][.='1']",meta + "/int[@name='after'  ][.='3']",meta + "/int[@name='between'][.='6']");  assertQ("checking counts for lower & outer",req("q","*:*","rows","0","facet","true",p,f,p + ".start","1976-07-01T00:00:00.000Z",p + ".end","1976-07-13T00:00:00.000Z",p + ".gap","+1DAY",p + ".other","all",p + ".include","lower",p + ".include","outer"),"*[count(" + pre + "/int)="+ (rangeMode ? 12 : 15)+ "]",pre + "/int[@name='1976-07-01T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-02T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-03T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-04T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-05T00:00:00Z'][.='2'  ]",pre + "/int[@name='1976-07-06T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-07T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-08T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-09T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-10T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-11T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-12T00:00:00Z'][.='0']",meta + "/int[@name='before' ][.='2']",meta + "/int[@name='after'  ][.='4']",meta + "/int[@name='between'][.='5']");  assertQ("checking counts for lower & edge & outer",req("q","*:*","rows","0","facet","true",p,f,p + ".start","1976-07-01T00:00:00.000Z",p + ".end","1976-07-13T00:00:00.000Z",p + ".gap","+1DAY",p + ".other","all",p + ".include","lower",p + ".include","edge",p + ".include","outer"),"*[count(" + pre + "/int)="+ (rangeMode ? 12 : 15)+ "]",pre + "/int[@name='1976-07-01T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-02T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-03T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-04T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-05T00:00:00Z'][.='2'  ]",pre + "/int[@name='1976-07-06T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-07T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-08T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-09T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-10T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-11T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-12T00:00:00Z'][.='1'  ]",meta + "/int[@name='before' ][.='2']",meta + "/int[@name='after'  ][.='4']",meta + "/int[@name='between'][.='6']");  assertQ("checking counts for all",req("q","*:*","rows","0","facet","true",p,f,p + ".start","1976-07-01T00:00:00.000Z",p + ".end","1976-07-13T00:00:00.000Z",p + ".gap","+1DAY",p + ".other","all",p + ".include","all"),"*[count(" + pre + "/int)="+ (rangeMode ? 12 : 15)+ "]",pre + "/int[@name='1976-07-01T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-02T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-03T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-04T00:00:00Z'][.='2'  ]",pre + "/int[@name='1976-07-05T00:00:00Z'][.='2'  ]",pre + "/int[@name='1976-07-06T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-07T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-08T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-09T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-10T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-11T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-12T00:00:00Z'][.='1'  ]",meta + "/int[@name='before' ][.='2']",meta + "/int[@name='after'  ][.='4']",meta + "/int[@name='between'][.='6']");}  }
class C{  @Override public int lengthOfMonth(){switch (month) {case 2:    return (isLeapYear() ? 29 : 28);case 4:case 6:case 9:case 11:  return 30;default :return 31;}}  }
class C{  public void close() throws IOException {  if (closed) {    Util.getImplementation().logStreamDoubleClose(name,true);    return;  }  closed=true;  streamCount--;  Util.getImplementation().logStreamClose(name,true,streamCount);  if (connection != null) {    Util.getImplementation().cleanup(connection);  }  byte[] buffer;  while ((buffer=buf) != null) {    if (buf == buffer) {      buf=null;      InputStream input=in;      in=null;      if (input != null) {        input.close();      }      return;    }  }}  }
class C{  public Iterator<Stream> memberIterator(){  return memberSet.iterator();}  }
class C{  public static Image inverseTransform(ImageTree tree,FilterGH[] filterGHList,int method){  int width=0;  int height=0;  Image retImg=null;  Image coarseImg=null;  Image verticalImg=null;  Image horizontalImg=null;  Image diagonalImg=null;  if (tree.getImage() == null) {    coarseImg=inverseTransform(tree.getCoarse(),filterGHList,method);    horizontalImg=inverseTransform(tree.getHorizontal(),filterGHList,method);    verticalImg=inverseTransform(tree.getVertical(),filterGHList,method);    diagonalImg=inverseTransform(tree.getDiagonal(),filterGHList,method);    width=coarseImg.getWidth() + horizontalImg.getWidth();    height=coarseImg.getHeight() + verticalImg.getHeight();    retImg=new Image(width,height);    if (tree.getFlag() == 0) {      invDecomposition(retImg,coarseImg,horizontalImg,verticalImg,diagonalImg,filterGHList[tree.getLevel()],method);    } else {      copyIntoImage(retImg,coarseImg,0,0);      copyIntoImage(retImg,horizontalImg,coarseImg.getWidth(),0);      copyIntoImage(retImg,verticalImg,0,coarseImg.getHeight());      copyIntoImage(retImg,diagonalImg,coarseImg.getWidth(),coarseImg.getHeight());    }    return retImg;  }  return tree.getImage();}  }
class C{  public static String[] parseLine(final String line,final String delim){  if (line == null || line.trim().length() == 0) {    return null;  }  List<String> tokenList=new ArrayList<String>();  String[] result=null;  String[] tokens=line.split(delim);  int count=0;  while (count < tokens.length) {    if (tokens[count] == null || tokens[count].length() == 0) {      tokenList.add("");      count++;      continue;    }    if (tokens[count].startsWith(DOUBLE_QUOTE)) {      StringBuilder sbToken=new StringBuilder(tokens[count].substring(1));      while (count < tokens.length && !tokens[count].endsWith(DOUBLE_QUOTE)) {        count++;        sbToken.append(DELIM_CHAR).append(tokens[count]);      }      sbToken.deleteCharAt(sbToken.length() - 1);      tokenList.add(sbToken.toString());    } else {      tokenList.add(tokens[count]);    }    count++;  }  if (tokenList.size() > 0) {    result=new String[tokenList.size()];    tokenList.toArray(result);  }  return result;}  }
class C{  public SuperNode(int lhs){  this.lhs=lhs;  this.nodes=new ArrayList<>();}  }
class C{  public static void execute(String dir,String db,String cipher,char[] decryptPassword,char[] encryptPassword,boolean quiet) throws SQLException {  try {    new ChangeFileEncryption().process(dir,db,cipher,decryptPassword,encryptPassword,quiet);  } catch (  Exception e) {    throw DbException.toSQLException(e);  }}  }
class C{  public ImageTransferable(Image image){  this.image=image;}  }
class C{  public static String strYear(int year){  String str=String.valueOf(year);  if (str.length() == 4)   str=str.substring(2);  return str;}  }
class C{  private void validateWidth(Rectangle rect){  if (rect != null && rect.width <= 1) {    try {      RTextArea textArea=getTextArea();      textArea.getDocument().getText(getDot(),1,seg);      Font font=textArea.getFont();      FontMetrics fm=textArea.getFontMetrics(font);      rect.width=fm.charWidth(seg.array[seg.offset]);      if (rect.width == 0) {        rect.width=fm.charWidth(' ');      }    } catch (    BadLocationException ble) {      ble.printStackTrace();      rect.width=8;    }  }}  }
class C{  protected int processPath(int source,int sink){  int v=sink;  int increment=Integer.MAX_VALUE;  while (previous[v] != -1) {    int unit=capacity[previous[v]][v] - flow[previous[v]][v];    if (unit < increment) {      increment=unit;    }    v=previous[v];  }  v=sink;  while (previous[v] != -1) {    flow[previous[v]][v]+=increment;    flow[v][previous[v]]-=increment;    v=previous[v];  }  return increment;}  }
class C{  public void reset(){  engineReset();  state=INITIAL;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.replaceData(0,4,"2500");  childData=child.getData();  assertEquals("characterdataReplaceDataBeginingAssert","2500 North Ave. Dallas, Texas 98551",childData);}  }
class C{  public Object peek() throws InterruptedException {  Object object=null;  while (true) {    if (takeWhenPeekInProgress) {      try {        this.take();      } catch (      CacheException ce) {        throw new RuntimeException(ce){        };      }      this.takeWhenPeekInProgress=false;    }    object=super.peek();    if (object == null) {synchronized (forWaiting) {        object=super.peek();        if (object == null) {          boolean interrupted=Thread.interrupted();          try {            forWaiting.wait();          } catch (          InterruptedException e) {            interrupted=true;            if (logger.isDebugEnabled()) {              logger.debug("Interrupted exception while wait for peek",e);            }          } finally {            if (interrupted) {              Thread.currentThread().interrupt();            }          }        } else {          break;        }      }    } else {      break;    }  }  return object;}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  GreenNewsDao.createTable(db,ifNotExists);  GreenStatDao.createTable(db,ifNotExists);}  }
class C{  public boolean equals(Matrix3d m1){  try {    return (this.m00 == m1.m00 && this.m01 == m1.m01 && this.m02 == m1.m02 && this.m10 == m1.m10 && this.m11 == m1.m11 && this.m12 == m1.m12 && this.m20 == m1.m20 && this.m21 == m1.m21 && this.m22 == m1.m22);  } catch (  NullPointerException e2) {    return false;  }}  }
class C{  protected String parseWarfightingSymCode(String symCode){  StringBuilder sb=new StringBuilder();  String s=symCode.substring(0,1);  if (s != null && s.equalsIgnoreCase(SymbologyConstants.SCHEME_WARFIGHTING))   this.setScheme(s); else   sb.append(sb.length() > 0 ? ", " : "").append(Logging.getMessage("term.scheme"));  s=symCode.substring(1,2);  if (SymbologyConstants.STANDARD_IDENTITY_ALL.contains(s.toUpperCase()))   this.setStandardIdentity(s); else   sb.append(sb.length() > 0 ? ", " : "").append(Logging.getMessage("term.standardIdentity"));  s=symCode.substring(2,3);  if (SymbologyConstants.BATTLE_DIMENSION_ALL.contains(s.toUpperCase()))   this.setBattleDimension(s); else   sb.append(sb.length() > 0 ? ", " : "").append(Logging.getMessage("term.battleDimension"));  s=symCode.substring(3,4);  if (SymbologyConstants.STATUS_ALL_UEI_SIGINT_SO_EM.contains(s.toUpperCase()))   this.setStatus(s); else   sb.append(sb.length() > 0 ? ", " : "").append(Logging.getMessage("term.status"));  s=symCode.substring(4,10);  if (!"------".equals(s))   this.setFunctionId(s);  s=symCode.substring(10,12);  if (this.isUnitsAndEquipmentSymbolModifier(s) || SymbologyConstants.INSTALLATION_ALL.contains(s.toUpperCase()) || SymbologyConstants.MOBILITY_ALL.contains(s.toUpperCase())|| SymbologyConstants.AUXILIARY_EQUIPMENT_ALL.contains(s.toUpperCase())) {    this.setSymbolModifier(s);  } else   if (!"--".equals(s))   sb.append(sb.length() > 0 ? ", " : "").append(Logging.getMessage("term.symbolModifier"));  s=symCode.substring(12,14);  if (!"--".equals(s))   this.setCountryCode(s);  s=symCode.substring(14,15);  if (SymbologyConstants.ORDER_OF_BATTLE_ALL_UEI_SIGINT_SO_EM.contains(s.toUpperCase()))   this.setOrderOfBattle(s); else   if (!"-".equals(s))   sb.append(sb.length() > 0 ? ", " : "").append(Logging.getMessage("term.orderOfBattle"));  return sb.length() > 0 ? Logging.getMessage("Symbology.SymbolCodeFieldsUnrecognized",sb.toString(),symCode) : null;}  }
class C{  public Network inspectNetwork(InspectNetworkParams params) throws IOException {  try (DockerConnection connection=connectionFactory.openConnection(dockerDaemonUri).method("GET").path(apiVersionPathPrefix + "/networks/" + params.getNetworkId())){    final DockerResponse response=connection.request();    if (response.getStatus() / 100 != 2) {      throw getDockerException(response);    }    return parseResponseStreamAndClose(response.getInputStream(),Network.class);  } }  }
class C{  public void delete(String name) throws IOException {  throw new IOException("No attribute is allowed by " + "CertAttrSet:OCSPNoCheckExtension.");}  }
class C{  @Override public boolean accept(@NotNull final Map<String,String> factoryParameters){  return factoryParameters.containsKey(URL_PARAMETER_NAME) && githubUrlParser.isValid(factoryParameters.get(URL_PARAMETER_NAME));}  }
class C{  public void enableButton(){  button.setEnabled(true);}  }
class C{  private void writeObject(final java.io.ObjectOutputStream out) throws IOException {  out.writeInt(level.intValue());}  }
class C{  public SetMute(){  super();  addParameterToRequest("mute","toggle");}  }
class C{  public int hashCode(){  int total=0;  Iterator it=createEntrySetIterator();  while (it.hasNext()) {    total+=it.next().hashCode();  }  return total;}  }
class C{  public GeneralNames(GeneralName name){  this.names=new GeneralName[]{name};}  }
class C{  public T caseStateSwitch(StateSwitch object){  return null;}  }
class C{  public void testSSLPubSub() throws Exception {  MqttAndroidClient mqttClient=null;  IMqttToken connectToken=null;  IMqttToken disconnectToken=null;  IMqttToken subToken=null;  IMqttDeliveryToken pubToken=null;  try {    mqttClient=new MqttAndroidClient(mContext,mqttSSLServerURI,"testSSLPubSub");    MqttConnectOptions options=new MqttConnectOptions();    options.setSocketFactory(mqttClient.getSSLSocketFactory(this.getContext().getAssets().open("test.bks"),keyStorePwd));    MqttV3Receiver mqttV3Receiver=new MqttV3Receiver(mqttClient,null);    mqttClient.setCallback(mqttV3Receiver);    connectToken=mqttClient.connect(options,this.getContext(),new ActionListener(notifier));    connectToken.waitForCompletion(waitForCompletionTime);    String[] topicNames=new String[]{"testSSLPubSub" + "/Topic"};    int[] topicQos={0};    MqttMessage mqttMessage=new MqttMessage(("message for testSSLPubSub").getBytes());    byte[] message=mqttMessage.getPayload();    subToken=mqttClient.subscribe(topicNames,topicQos,null,new ActionListener(notifier));    subToken.waitForCompletion(waitForCompletionTime);    pubToken=mqttClient.publish(topicNames[0],message,0,false,null,new ActionListener(notifier));    pubToken.waitForCompletion(waitForCompletionTime);    TimeUnit.MILLISECONDS.sleep(6000);    boolean ok=mqttV3Receiver.validateReceipt(topicNames[0],0,message);    if (!ok) {      Assert.fail("Receive failed");    }  } catch (  Exception exception) {    Assert.fail("Failed:" + "testSSLPubSub" + " exception="+ exception);  } finally {    disconnectToken=mqttClient.disconnect(null,new ActionListener(notifier));    disconnectToken.waitForCompletion(waitForCompletionTime);    if (mqttClient != null) {      mqttClient.close();    }  }}  }
class C{  protected void addValuePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_BoolLiteral_value_feature"),getString("_UI_PropertyDescriptor_description","_UI_BoolLiteral_value_feature","_UI_BoolLiteral_type"),ExpressionsPackage.Literals.BOOL_LITERAL__VALUE,true,false,false,ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,null,null));}  }
class C{  public static List<Attribute> constructAttributeList(Map<String,String> operatorProperties) throws PlanGenException {  String attributeNamesStr=getRequiredProperty(ATTRIBUTE_NAMES,operatorProperties);  String attributeTypesStr=getRequiredProperty(ATTRIBUTE_TYPES,operatorProperties);  List<String> attributeNames=splitStringByComma(attributeNamesStr);  List<String> attributeTypes=splitStringByComma(attributeTypesStr);  PlanGenUtils.planGenAssert(attributeNames.size() == attributeTypes.size(),"attribute names and attribute types are not coherent");  PlanGenUtils.planGenAssert(attributeTypes.stream().allMatch(null),"attribute type is not valid");  List<Attribute> attributeList=IntStream.range(0,attributeNames.size()).mapToObj(null).collect(Collectors.toList());  return attributeList;}  }
class C{  public static Test suite(){  return suite(TestMode.triples);}  }
class C{  public static void write(OutputStream out,byte[] bytes,boolean noBackslashEscapes) throws IOException {  out.write(BINARY_INTRODUCER);  writeBytesEscaped(out,bytes,bytes.length,noBackslashEscapes);  out.write(QUOTE);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","gzmodern");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public boolean validSystemNameFormat(String systemName){  return (getBitFromSystemName(systemName) != 0);}  }
class C{  private void configureClient(){  ClientConfig clientConfig=new ClientConfig().property(ClientProperties.CONNECT_TIMEOUT,conf.client.connectTimeoutMillis).property(ClientProperties.READ_TIMEOUT,conf.client.readTimeoutMillis).property(ClientProperties.ASYNC_THREADPOOL_SIZE,1).property(ClientProperties.REQUEST_ENTITY_PROCESSING,conf.client.transferEncoding).connectorProvider(new GrizzlyConnectorProvider());  ClientBuilder clientBuilder=ClientBuilder.newBuilder().withConfig(clientConfig);  configureAuth(clientBuilder);  if (conf.client.useProxy) {    JerseyClientUtil.configureProxy(conf.client.proxy,clientBuilder);  }  JerseyClientUtil.configureSslContext(conf.client.sslConfig,clientBuilder);  client=clientBuilder.build();  parserFactory=conf.dataFormatConfig.getParserFactory();}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case BEGIN_IN_BOTH:    return isSetBegin_in_both();case OLD_STRING:  return isSetOld_string();case END_IN_BOTH:return isSetEnd_in_both();}throw new IllegalStateException();}  }
class C{  protected void updateFoundCount(){  SpiderScan sc=this.getSelectedScanner();  if (sc != null) {    this.getFoundCountValueLabel().setText(Integer.toString(sc.getNumberOfURIsFound()));  } else {    this.getFoundCountValueLabel().setText(ZERO_REQUESTS_LABEL_TEXT);  }}  }
class C{  public Client(String serverIP){  this(serverIP,NetworkConfig.DEFAULT_TCP_PORT,NetworkConfig.DEFAULT_UDP_PORT);}  }
class C{  public void testCheckSum() throws Exception {  LogFile tf=LogHelper.createLogFile("testCheckSum.dat",5);  for (int i=0; i < 100; i++) {    byte[] data=new byte[100];    for (int j=0; j < 100; j++)     data[j]=(byte)(Math.random() * 255);    long crc32=LogRecord.computeCrc32(data);    LogRecord rec=new LogRecord(tf.getFile(),-1,data,LogRecord.CRC_TYPE_32,crc32);    tf.writeRecord(rec,100000);    if (logger.isDebugEnabled()) {      logger.debug("Offset:" + tf.getOffset() + " Record: "+ rec.toString());    }  }  tf.close();  LogFile tfro=LogHelper.openExistingFileForRead("testCheckSum.dat");  assertTrue("File length is at least 10000 bytes",tfro.getLength() > 10000);  for (int i=0; i < 100; i++) {    LogRecord rec=tfro.readRecord(0);    long storedCrc=rec.getCrc();    long computedCrc=rec.computeCrc();    if (logger.isDebugEnabled()) {      logger.debug("Computed CRC: " + computedCrc + " Record: "+ rec);    }    assertFalse("Record must not be empty",rec.isEmpty());    assertEquals("Expect CRC-32 type",LogRecord.CRC_TYPE_32,rec.getCrcType());    assertEquals("Stored and computed CRC must match",storedCrc,computedCrc);  }  tf.close();}  }
class C{  public void addFeatures(Collection<String> featuresToAdd){  if (featuresToAdd == null)   return;  for (  String feature : featuresToAdd) {    addFeature(feature);  }}  }
class C{  public static Properties readPropertyFileFromFileSystem(final File propertyFileLocation) throws ConfigurationException {  final Properties fileProperties=new Properties();  try {    final InputStream inputStream=new FileInputStream(propertyFileLocation);    fileProperties.load(inputStream);    inputStream.close();  } catch (  IOException e) {    throw new ConfigurationException("Cannot load the properties file",e);  }  return fileProperties;}  }
class C{  public static DBIdentity inviteNewUser(KeyFactory keyFactory,Manager manager,DBIdentity requestor,String emailAddress) throws CryptoError, SQLException, MitroServletException, CyclicGroupError {  if (!Util.isEmailAddress(emailAddress)) {    throw new UserVisibleException("Invalid email address: " + emailAddress);  }  final String reqEmail=requestor.getName();  assert Util.isEmailAddress(reqEmail);  logger.debug("generating key for address {}",emailAddress);  PrivateKeyInterface privateKey=keyFactory.generate();  PublicKeyInterface publicKey=privateKey.exportPublicKey();  String generatedPassword=Random.makeRandomAlphanumericString(GENERATED_PASSWORD_LENGTH);  DBIdentity identity=new DBIdentity();  identity.setVerified(true);  identity.setName(emailAddress);  identity.setChangePasswordOnNextLogin(true);  identity.setPublicKeyString(publicKey.toString());  identity.setEncryptedPrivateKeyString(privateKey.exportEncrypted(generatedPassword));  DBIdentity.createUserInDb(manager,identity);  manager.identityDao.refresh(identity);  PrivateKeyInterface groupKey=keyFactory.generate();  PublicKeyInterface publicGroupKey=groupKey.exportPublicKey();  DBGroup privateGroup=new DBGroup();  privateGroup.setName("");  privateGroup.setPublicKeyString(publicGroupKey.toString());  privateGroup.setAutoDelete(false);  manager.groupDao.create(privateGroup);  manager.groupDao.refresh(privateGroup);  DBAcl acl=new DBAcl();  acl.setGroup(privateGroup);  acl.setMemberIdentity(identity);  acl.setLevel(DBAcl.AccessLevelType.ADMIN);  acl.setGroupKeyEncryptedForMe(publicKey.encrypt(groupKey.toString()));  manager.aclDao.create(acl);  manager.addAuditLog(DBAudit.ACTION.INVITE_NEW_USER,requestor,identity,privateGroup,null,null);  DBEmailQueue email=DBEmailQueue.makeInvitation(reqEmail,emailAddress,generatedPassword);  manager.emailDao.create(email);  return identity;}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  private void paintFilledBars(){  final Color fillColor=GuiUtils.colorWithAlpha(dataSet.getColor(),0x70);  int loopX=loopToX(loops[idxMin]);  int x1;  x1=idxMin > 0 ? (loopToX(loops[idxMin - 1]) + loopX) / 2 : drawingRect.x1;  for (int i=idxMin; i <= idxMax; i++) {    final int loopX2, x2;    if (i < loops.length - 1) {      if (i == loops.length - 2 && i > 0) {        loopX2=-1;        x2=loopToX(loops[i]) * 2 - x1;      } else {        loopX2=loopToX(loops[i + 1]);        x2=(loopX + loopX2) / 2;      }    } else {      loopX2=drawingRect.x2;      x2=drawingRect.x2;    }    final int valueY=valueToY(values[i]);    g.setColor(fillColor);    g.fillRect(x1 + 1,valueY,x2 - x1,drawingRect.y2 - valueY);    g.setColor(dataSet.getColor());    g.drawLine(x1 + 1,valueY,x2,valueY);    loopX=loopX2;    x1=x2;  }}  }
class C{  public boolean isAlive(){  if (readerFuture == null || readerFuture.isDone() || process == null || is == null) {    if (log.isInfoEnabled())     log.info("Not alive: readerFuture=" + readerFuture + (readerFuture != null ? "done=" + readerFuture.isDone() : "")+ ", process="+ process+ ", is="+ is);    return false;  }  return true;}  }
class C{  public void init(boolean encrypting,CipherParameters params) throws IllegalArgumentException {  if (params instanceof ParametersWithIV) {    ParametersWithIV ivParam=(ParametersWithIV)params;    byte[] iv=ivParam.getIV();    if (iv.length < IV.length) {      System.arraycopy(iv,0,IV,IV.length - iv.length,iv.length);      for (int i=0; i < IV.length - iv.length; i++) {        IV[i]=0;      }    } else {      System.arraycopy(iv,0,IV,0,IV.length);    }    reset();    if (ivParam.getParameters() != null) {      cipher.init(true,ivParam.getParameters());    }  } else {    reset();    if (params != null) {      cipher.init(true,params);    }  }}  }
class C{  private void defineSliders(UIDefaults d){  d.put("sliderTrackBorderBase",new Color(0x709ad0));  d.put("sliderTrackInteriorBase",Color.WHITE);  String p="Slider";  d.put(p + ".States","Enabled,MouseOver,Pressed,Disabled,Focused,Selected,ArrowShape");  d.put(p + ".ArrowShape",new SliderArrowShapeState());  d.put(p + ".thumbWidth",new Integer(17));  d.put(p + ".thumbHeight",new Integer(20));  d.put(p + ".trackBorder",new Integer(0));  d.put(p + ".trackHeight",new Integer(5));  d.put(p + ".tickColor",new Color(0x5b7ea4));  d.put(p + "[Disabled].tickColor",getDerivedColor("seaGlassDisabledText",0,0,0,0,true));  d.put(p + ".font",new DerivedFont("defaultFont",0.769f,null,null));  d.put(p + ".paintValue",Boolean.FALSE);  p="Slider:SliderThumb";  String c=PAINTER_PREFIX + "SliderThumbPainter";  d.put(p + ".contentMargins",new InsetsUIResource(0,0,0,0));  d.put(p + ".States","Enabled,MouseOver,Pressed,Disabled,Focused,Selected,ArrowShape");  d.put(p + ".ArrowShape",new SliderArrowShapeState());  d.put(p + "[Disabled].backgroundPainter",new LazyPainter(c,SliderThumbPainter.Which.BACKGROUND_DISABLED));  d.put(p + "[Enabled].backgroundPainter",new LazyPainter(c,SliderThumbPainter.Which.BACKGROUND_ENABLED));  d.put(p + "[Focused].backgroundPainter",new LazyPainter(c,SliderThumbPainter.Which.BACKGROUND_FOCUSED));  d.put(p + "[Focused+MouseOver].backgroundPainter",new LazyPainter(c,SliderThumbPainter.Which.BACKGROUND_FOCUSED_MOUSEOVER));  d.put(p + "[Focused+Pressed].backgroundPainter",new LazyPainter(c,SliderThumbPainter.Which.BACKGROUND_FOCUSED_PRESSED));  d.put(p + "[MouseOver].backgroundPainter",new LazyPainter(c,SliderThumbPainter.Which.BACKGROUND_MOUSEOVER));  d.put(p + "[Pressed].backgroundPainter",new LazyPainter(c,SliderThumbPainter.Which.BACKGROUND_PRESSED));  d.put(p + "[ArrowShape+Enabled].backgroundPainter",new LazyPainter(c,SliderThumbPainter.Which.BACKGROUND_ENABLED_ARROWSHAPE));  d.put(p + "[ArrowShape+Disabled].backgroundPainter",new LazyPainter(c,SliderThumbPainter.Which.BACKGROUND_DISABLED_ARROWSHAPE));  d.put(p + "[ArrowShape+MouseOver].backgroundPainter",new LazyPainter(c,SliderThumbPainter.Which.BACKGROUND_MOUSEOVER_ARROWSHAPE));  d.put(p + "[ArrowShape+Pressed].backgroundPainter",new LazyPainter(c,SliderThumbPainter.Which.BACKGROUND_PRESSED_ARROWSHAPE));  d.put(p + "[ArrowShape+Focused].backgroundPainter",new LazyPainter(c,SliderThumbPainter.Which.BACKGROUND_FOCUSED_ARROWSHAPE));  d.put(p + "[ArrowShape+Focused+MouseOver].backgroundPainter",new LazyPainter(c,SliderThumbPainter.Which.BACKGROUND_FOCUSED_MOUSEOVER_ARROWSHAPE));  d.put(p + "[ArrowShape+Focused+Pressed].backgroundPainter",new LazyPainter(c,SliderThumbPainter.Which.BACKGROUND_FOCUSED_PRESSED_ARROWSHAPE));  p="Slider:SliderTrack";  c=PAINTER_PREFIX + "SliderTrackPainter";  d.put(p + ".contentMargins",new InsetsUIResource(0,0,0,0));  d.put(p + ".States","Enabled,MouseOver,Pressed,Disabled,Focused,Selected,ArrowShape");  d.put(p + ".ArrowShape",new SliderArrowShapeState());  d.put(p + "[Disabled].backgroundPainter",new LazyPainter(c,SliderTrackPainter.Which.BACKGROUND_DISABLED));  d.put(p + "[Enabled].backgroundPainter",new LazyPainter(c,SliderTrackPainter.Which.BACKGROUND_ENABLED));}  }
class C{  public String optString(String key,String defaultValue){  Object object=this.opt(key);  return NULL.equals(object) ? defaultValue : object.toString();}  }
class C{  protected void addItems(List<? extends Action> actions){  ActionContainerFactory factory=new ActionContainerFactory(null);  for (  Action action : actions) {    AbstractActionExt a=(AbstractActionExt)action;    if (action.isEnabled()) {      if (a.isStateAction())       addItem(createCheckBox((AbstractActionExt)action)); else {        addItem(factory.createButton(action));      }    }  }}  }
class C{  public boolean supportsDifferentTableCorrelationNames() throws SQLException {  return false;}  }
class C{  public void runMailNotifierNow(){  new PasswordExpireMailNotifier().run();}  }
class C{  protected MultivariateTable(Set<String> headVars,Map<Assignment,Double> headTable){  this.headVars=headVars;  this.table=headTable;}  }
class C{  ClassIntrospector(ClassIntrospectorBuilder pa,Object sharedLock){  this(pa,sharedLock,false,false);}  }
class C{  private static int countRunAndMakeAscending(Object[] a,int lo,int hi,Comparator c){  assert lo < hi;  int runHi=lo + 1;  if (runHi == hi)   return 1;  if (c.compare(a[runHi++],a[lo]) < 0) {    while (runHi < hi && c.compare(a[runHi],a[runHi - 1]) < 0)     runHi++;    reverseRange(a,lo,runHi);  } else {    while (runHi < hi && c.compare(a[runHi],a[runHi - 1]) >= 0)     runHi++;  }  return runHi - lo;}  }
class C{  public static Boolean isCustomVolumeNamingEnabled(CustomConfigHandler customConfigHandler,String scope){  return customConfigHandler.getComputedCustomConfigBooleanValue(CustomConfigConstants.CUSTOM_VOLUME_NAMING_ENABLED,scope,null);}  }
class C{  public DialView(Context context,AttributeSet attrs,int defStyleAttr){  super(context,attrs,defStyleAttr);  init();}  }
class C{  public long length() throws SQLException {  java.sql.ResultSet blobRs=null;  java.sql.PreparedStatement pStmt=null;  StringBuilder query=new StringBuilder("SELECT LENGTH(");  query.append(this.blobColumnName);  query.append(") FROM ");  query.append(this.tableName);  query.append(" WHERE ");  query.append(this.primaryKeyColumns.get(0));  query.append(" = ?");  for (int i=1; i < this.numPrimaryKeys; i++) {    query.append(" AND ");    query.append(this.primaryKeyColumns.get(i));    query.append(" = ?");  }  try {    pStmt=this.creatorResultSet.connection.prepareStatement(query.toString());    for (int i=0; i < this.numPrimaryKeys; i++) {      pStmt.setString(i + 1,this.primaryKeyValues.get(i));    }    blobRs=pStmt.executeQuery();    if (blobRs.next()) {      return blobRs.getLong(1);    }    throw SQLError.createSQLException("BLOB data not found! Did primary keys change?",SQLError.SQL_STATE_GENERAL_ERROR,this.exceptionInterceptor);  }  finally {    if (blobRs != null) {      try {        blobRs.close();      } catch (      SQLException sqlEx) {      }      blobRs=null;    }    if (pStmt != null) {      try {        pStmt.close();      } catch (      SQLException sqlEx) {      }      pStmt=null;    }  }}  }
class C{  public void put(String fieldName,int v){  _put(fieldName,numberNode(v));}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:01.279 -0500",hash_original_method="E1648D2B4FFD2451814681FC87C9187A",hash_generated_method="E1648D2B4FFD2451814681FC87C9187A") WebBackForwardList(CallbackProxy proxy){  mCurrentIndex=-1;  mArray=new ArrayList<WebHistoryItem>();  mCallbackProxy=proxy;}  }
class C{  protected void closeResult(@Nullable T result){}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdatagetdata.class,args);}  }
class C{  protected void createCheckList(List<CandidatePair> checkList){  for (  Component cmp : getComponents())   createCheckList(cmp,checkList);}  }
class C{  private static void checkColors(final BufferedImage bi1,final BufferedImage bi2) throws IOException {  for (int i=0; i < SIZE; ++i) {    for (int j=0; j < SIZE; ++j) {      final int rgb1=bi1.getRGB(i,j);      final int rgb2=bi2.getRGB(i,j);      if (rgb1 != rgb2 || rgb1 != 0xFFFF0000 && rgb1 != 0xFF00FF00) {        ImageIO.write(bi1,"png",new File("image1.png"));        ImageIO.write(bi2,"png",new File("image2.png"));        throw new RuntimeException("Failed: wrong text location");      }    }  }}  }
class C{  public final boolean isReverse(){  return true;}  }
class C{  public void updateSOCs(EnergyConsumption energyConsumption){  double startSOC=ParametersPSF.getDefaultMaxBatteryCapacity();  LinkedList<LinkEnergyConsumptionLog> consumptionLog=(LinkedList<LinkEnergyConsumptionLog>)energyConsumption.getLinkEnergyConsumption().clone();  LinkEnergyConsumptionLog curConsumptionLog=consumptionLog.poll();  Object[] iterChargingTimes=chargingTimes.toArray();  Arrays.sort(iterChargingTimes);  int firstIndex=0;  while (iterChargingTimes.length > 0 && curConsumptionLog.getEnterTime() > ((ChargeLog)iterChargingTimes[firstIndex]).getStartChargingTime()) {    firstIndex++;    if (firstIndex == iterChargingTimes.length) {      break;    }  }  for (int i=firstIndex; i < iterChargingTimes.length; i++) {    ChargeLog curChargeLog=(ChargeLog)iterChargingTimes[i];    while (curConsumptionLog != null && curConsumptionLog.getEnterTime() < curChargeLog.getEndChargingTime()) {      startSOC-=curConsumptionLog.getEnergyConsumption();      curConsumptionLog=consumptionLog.poll();    }    curChargeLog.updateSOC(startSOC);    startSOC=curChargeLog.getEndSOC();  }  for (int i=0; i < firstIndex; i++) {    ChargeLog curChargeLog=(ChargeLog)iterChargingTimes[i];    while (curConsumptionLog != null) {      startSOC-=curConsumptionLog.getEnergyConsumption();      curConsumptionLog=consumptionLog.poll();    }    curChargeLog.updateSOC(startSOC);    startSOC=curChargeLog.getEndSOC();  }}  }
class C{  boolean merge(final ClassWriter cw,final Frame frame,final int edge){  boolean changed=false;  int i, s, dim, kind, t;  int nLocal=inputLocals.length;  int nStack=inputStack.length;  if (frame.inputLocals == null) {    frame.inputLocals=new int[nLocal];    changed=true;  }  for (i=0; i < nLocal; ++i) {    if (outputLocals != null && i < outputLocals.length) {      s=outputLocals[i];      if (s == 0) {        t=inputLocals[i];      } else {        dim=s & DIM;        kind=s & KIND;        if (kind == BASE) {          t=s;        } else {          if (kind == LOCAL) {            t=dim + inputLocals[s & VALUE];          } else {            t=dim + inputStack[nStack - (s & VALUE)];          }          if ((s & TOP_IF_LONG_OR_DOUBLE) != 0 && (t == LONG || t == DOUBLE)) {            t=TOP;          }        }      }    } else {      t=inputLocals[i];    }    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputLocals,i);  }  if (edge > 0) {    for (i=0; i < nLocal; ++i) {      t=inputLocals[i];      changed|=merge(cw,t,frame.inputLocals,i);    }    if (frame.inputStack == null) {      frame.inputStack=new int[1];      changed=true;    }    changed|=merge(cw,edge,frame.inputStack,0);    return changed;  }  int nInputStack=inputStack.length + owner.inputStackTop;  if (frame.inputStack == null) {    frame.inputStack=new int[nInputStack + outputStackTop];    changed=true;  }  for (i=0; i < nInputStack; ++i) {    t=inputStack[i];    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputStack,i);  }  for (i=0; i < outputStackTop; ++i) {    s=outputStack[i];    dim=s & DIM;    kind=s & KIND;    if (kind == BASE) {      t=s;    } else {      if (kind == LOCAL) {        t=dim + inputLocals[s & VALUE];      } else {        t=dim + inputStack[nStack - (s & VALUE)];      }      if ((s & TOP_IF_LONG_OR_DOUBLE) != 0 && (t == LONG || t == DOUBLE)) {        t=TOP;      }    }    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputStack,nInputStack + i);  }  return changed;}  }
class C{  public int findNextPresent(@Nonnull IInventory inv){  for (int i=0; i < inv.getSizeInventory(); ++i) {    if (inv.getStackInSlot(i) != null)     return i;  }  return -1;}  }
class C{  @Override public String toString(){  return ("rbf(" + (-gamma) + ")");}  }
class C{  public synchronized boolean contains(SessionOwner owner){  checkNotNull(owner);  return sessions.containsKey(getKey(owner)) || softSessions.containsKey(owner);}  }
class C{  public NodeIterator(TrieNode<V> start,boolean withNulls){  this.withNulls=withNulls;  if (withNulls || start.getValue() != null) {    nextNode=start;  } else {    nextNode=null;    advance(start);  }}  }
class C{  private Bitmap[] loadBitmaps(int arrayId){  int[] bitmapIds=getIntArray(arrayId);  Bitmap[] bitmaps=new Bitmap[bitmapIds.length];  for (int i=0; i < bitmapIds.length; i++) {    Drawable backgroundDrawable=mResources.getDrawable(bitmapIds[i]);    bitmaps[i]=((BitmapDrawable)backgroundDrawable).getBitmap();  }  return bitmaps;}  }
class C{  public boolean isIgnoreComments(){  return ignoreComments;}  }
class C{  public void label(Way way,EnumSet<EdgeStore.EdgeFlag> forwardFlags,EnumSet<EdgeStore.EdgeFlag> backFlags){  if (way.hasTag("highway","steps")) {    forwardFlags.add(EdgeStore.EdgeFlag.STAIRS);    backFlags.add(EdgeStore.EdgeFlag.STAIRS);  }  if (forwardFlags.contains(EdgeStore.EdgeFlag.ALLOWS_BIKE) && isCycleway(way,false)) {    forwardFlags.add(EdgeStore.EdgeFlag.BIKE_PATH);  }  if (backFlags.contains(EdgeStore.EdgeFlag.ALLOWS_BIKE) && isCycleway(way,true)) {    backFlags.add(EdgeStore.EdgeFlag.BIKE_PATH);  }  if (isSidewalk(way,false)) {    forwardFlags.add(EdgeStore.EdgeFlag.SIDEWALK);  }  if (isSidewalk(way,true)) {    backFlags.add(EdgeStore.EdgeFlag.SIDEWALK);  }  if (way.hasTag("footway","crossing") || way.hasTag("cycleway","crossing")) {    forwardFlags.add(EdgeStore.EdgeFlag.CROSSING);    backFlags.add(EdgeStore.EdgeFlag.CROSSING);  }  if (way.hasTag("junction","roundabout")) {    forwardFlags.add(EdgeStore.EdgeFlag.ROUNDABOUT);    backFlags.add(EdgeStore.EdgeFlag.ROUNDABOUT);  }  if (way.hasTag("highway","platform") || way.hasTag("public_transport","platform") || way.hasTag("railway","platform")) {    forwardFlags.add(EdgeStore.EdgeFlag.PLATFORM);    backFlags.add(EdgeStore.EdgeFlag.PLATFORM);  }}  }
class C{  public static boolean isAutoStored(){  return autoStored;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public void exportMaskCreate(URI storageURI,URI exportGroupURI,Map<URI,Integer> volumeMap,List<URI> initiatorURIs,String token) throws ControllerException {  try {    WorkflowStepCompleter.stepExecuting(token);    exportGroupCreate(storageURI,exportGroupURI,initiatorURIs,volumeMap,token);  } catch (  VPlexApiException vae) {    WorkflowStepCompleter.stepFailed(token,vae);    throw vae;  }catch (  Exception e) {    DeviceControllerException exception=DeviceControllerException.exceptions.exportGroupCreateFailed(e);    WorkflowStepCompleter.stepFailed(token,exception);    throw exception;  }}  }
class C{  public CIDR(long ip){  if (ip < 0)   throw new IllegalArgumentException("CIDR(" + ip + ") cannot accept a negative argument!");  if (ip > maxIP)   throw new IllegalArgumentException("CIDR(" + ip + ") cannot accept an argument > "+ maxIP+ "!");  this.firstIP=ip;  this.bits=32;}  }
class C{  void append(Data buff,UndoLog log){  int p=buff.length();  buff.writeInt(0);  buff.writeInt(operation);  buff.writeByte(row.isDeleted() ? (byte)1 : (byte)0);  buff.writeInt(log.getTableId(table));  buff.writeLong(row.getKey());  buff.writeInt(row.getSessionId());  int count=row.getColumnCount();  buff.writeInt(count);  for (int i=0; i < count; i++) {    Value v=row.getValue(i);    buff.checkCapacity(buff.getValueLen(v));    buff.writeValue(v);  }  buff.fillAligned();  buff.setInt(p,(buff.length() - p) / Constants.FILE_BLOCK_SIZE);}  }
class C{  public boolean isInfo(){  return fSeverity == IStatus.INFO;}  }
class C{  public int countTokens(){  int count=0;  int currpos=currentPosition;  while (currpos < maxPosition) {    currpos=skipDelimiters(currpos);    if (currpos >= maxPosition)     break;    currpos=scanToken(currpos);    count++;  }  return count;}  }
class C{  public final double norm2(){  return s[0];}  }
class C{  public Quaternionf rotateLocal(float angleX,float angleY,float angleZ,Quaternionf dest){  float thetaX=angleX * 0.5f;  float thetaY=angleY * 0.5f;  float thetaZ=angleZ * 0.5f;  float thetaMagSq=thetaX * thetaX + thetaY * thetaY + thetaZ * thetaZ;  float s;  float dqX, dqY, dqZ, dqW;  if (thetaMagSq * thetaMagSq / 24.0f < 1E-8f) {    dqW=1.0f - thetaMagSq * 0.5f;    s=1.0f - thetaMagSq / 6.0f;  } else {    float thetaMag=(float)Math.sqrt(thetaMagSq);    dqW=(float)Math.cos(thetaMag);    s=(float)(Math.sin(thetaMag) / thetaMag);  }  dqX=thetaX * s;  dqY=thetaY * s;  dqZ=thetaZ * s;  dest.set(dqW * x + dqX * w + dqY * z - dqZ * y,dqW * y - dqX * z + dqY * w + dqZ * x,dqW * z + dqX * y - dqY * x + dqZ * w,dqW * w - dqX * x - dqY * y - dqZ * z);  return dest;}  }
class C{  private static Command createConsolidateLogsCommand(Path reportFile,@Nullable NodeConfig node,Path puppetLogFile) throws IOException {  List<Command> commands=new ArrayList<>();  if (node == null) {    commands.add(createCopyCommand(puppetLogFile,constants.getBaseTmpDir(),constants.useSudo()));    Path copyPuppetLogFile=constants.getBaseTmpDir().resolve(puppetLogFile.getFileName());    commands.add(createChmodCommand("666",copyPuppetLogFile,constants.useSudo()));  } else {    Path tempDirForNodeLog=constants.getBaseTmpDir().resolve(node.getType().toString().toLowerCase());    commands.add(createCommand(format("mkdir -p %s",tempDirForNodeLog)));    Path remoteTempDir=Paths.get("/tmp/codenvy");    commands.add(createCommand(format("mkdir -p %s",remoteTempDir),node));    commands.add(createCopyCommand(puppetLogFile,remoteTempDir,node,constants.useSudo()));    Path remoteLogFile=remoteTempDir.resolve(puppetLogFile.getFileName());    commands.add(createChmodCommand("666",remoteLogFile,node,constants.useSudo()));    commands.add(createCopyFromRemoteToLocalCommand(remoteLogFile,tempDirForNodeLog,node));    commands.add(createCommand(format("rm -rf %s",remoteTempDir),node));  }  if (Files.exists(constants.getCliLog())) {    commands.add(createCopyCommand(constants.getCliLog(),constants.getBaseTmpDir()));  }  if (constants.getInstallationManagerServerLog() != null && Files.exists(constants.getInstallationManagerServerLog())) {    commands.add(createCopyCommand(constants.getInstallationManagerServerLog(),constants.getBaseTmpDir()));  }  commands.add(createPackCommand(constants.getBaseTmpDir(),reportFile,".",false));  return new MacroCommand(commands,"Commands to create error report");}  }
class C{  @SuppressWarnings("unchecked") public static void deleteALLImage(final IdocFrame ui){  FileVO ele=(FileVO)ui.getFileVO();  ele.getListImage().removeAll(ele.getListImage());  ele.setImageSelectIndex(0);}  }
class C{  public InternetAddress toInternetAddress(){  try {    return new InternetAddress(toString());  } catch (  javax.mail.internet.AddressException ae) {    return null;  }}  }
class C{  public boolean containsField(ActivityArgAnnotatedField field){  return requiredFields.contains(field) || optionalFields.contains(field);}  }
class C{  DGCAckHandler(UID id){  this.id=id;  if (id != null) {    assert !idTable.containsKey(id);    idTable.put(id,this);  }}  }
class C{  protected CharacterClassImpl(){  super();}  }
class C{  public void finish() throws SQLException {  Statement statement=connection.createStatement();  statement.execute("CREATE INDEX articleIdx on revisions(ArticleID);");  statement.close();  statement=connection.createStatement();  statement.execute("ALTER TABLE index_articleID_rc_ts ENABLE KEYS;");  statement.close();  statement=connection.createStatement();  statement.execute("ALTER TABLE index_revisionID ENABLE KEYS;");  statement.close();  statement=connection.createStatement();  statement.execute("ALTER TABLE index_chronological ENABLE KEYS;");  statement.close();}  }
class C{  protected void writeHeader(int version,long length,int frameRate,int frameCount) throws IOException {  out.write(new byte[]{0x46,0x57,0x53});  out.writeUI8(version);  out.writeUI32(length);  frameSize.write(out);  out.writeUI16(frameRate << 8);  out.writeUI16(frameCount);}  }
class C{  public SabresQuery<T> whereLessThanOrEqual(String key,Object value){  addWhere(key,Where.lessThanOrEqual(key,SabresValue.create(value)));  return this;}  }
class C{  public boolean isReleased(){  return released;}  }
class C{  public int[] sizes() throws CacheException {  RegionSizeResponse resp=(RegionSizeResponse)sendAndWait(RegionSizeRequest.create());  return new int[]{resp.getEntryCount(),resp.getSubregionCount()};}  }
class C{  public void printReturn(Vertex expression,Writer writer,String indent,Set<Vertex> elements,List<Vertex> newVariables,List<Vertex> newFunctions,List<Vertex> newStates,Network network) throws IOException {  Vertex result=expression.getRelationship(Primitive.RETURN);  writer.write(indent);  writer.write("return");  if (result != null) {    writer.write(" ");    printElement(result,writer,indent,newFunctions,newVariables,elements,network);  }  Collection<Relationship> arguments=expression.getRelationships(Primitive.ARGUMENT);  if (arguments != null) {    writer.write(" with (");    for (Iterator<Relationship> iterator=arguments.iterator(); iterator.hasNext(); ) {      Relationship argument=iterator.next();      printElement(argument.getTarget(),writer,indent,newFunctions,newVariables,elements,network);      if (iterator.hasNext()) {        writer.write(", ");      }    }    writer.write(")");  }  writer.write(";\r\n\r\n");}  }
class C{  public void finish() throws IOException {  ensureOpen();  flush();  if (usesDefaultInflater) {    inf.end();  }}  }
class C{  public void loadBytes(byte[] content){  try {    _field=new Properties();    _field.load(new ByteArrayInputStream(content));  } catch (  IOException e) {    throw new IllegalArgumentException(e);  }}  }
class C{  public String join(String separator) throws JSONException {  int len=this.length();  StringBuilder sb=new StringBuilder();  for (int i=0; i < len; i+=1) {    if (i > 0) {      sb.append(separator);    }    sb.append(JSONObject.valueToString(this.myArrayList.get(i)));  }  return sb.toString();}  }
class C{  public final boolean isEnabled(JsonGenerator.Feature f){  return (_generatorFeatures & f.getMask()) != 0;}  }
class C{  @Override public boolean addAll(Collection<? extends String> c){  boolean result;  Iterator<? extends String> iter;  result=false;  iter=c.iterator();  while (iter.hasNext()) {    result=add(iter.next()) || result;  }  return result;}  }
class C{  public String toString(){  return "Row summing exact updater, evidence = " + evidence;}  }
class C{  public final boolean canGetLong(String field){  return m_table.canGetLong(field);}  }
class C{  public static boolean isApplicableForReuseVariable(DMLProgram prog,StatementBlock parforSB,String var) throws DMLRuntimeException {  boolean ret=false;  for (  StatementBlock sb : prog.getStatementBlocks())   ret|=isApplicableForReuseVariable(sb,parforSB,var);  return ret;}  }
class C{  @ObjectiveCName("error:") public void error(@NotNull Exception e){  promise.error(e);}  }
class C{  public List modifiers(){  if (this.modifiers == null) {    unsupportedIn2();  }  return this.modifiers;}  }
class C{  public static String md5(String text){  try {    MessageDigest m=MessageDigest.getInstance("MD5");    m.reset();    m.update(text.getBytes());    byte[] digest=m.digest();    BigInteger bigInt=new BigInteger(1,digest);    String hashText=bigInt.toString(16);    while (hashText.length() < 32) {      hashText="0" + hashText;    }    return hashText;  } catch (  NoSuchAlgorithmException e) {    return text;  }}  }
class C{  public void populateAll() throws GeneralException {  for (  ServiceEcaAction ecaAction : serviceEcaRule.getEcaActionList()) {    servicesCalledByThisServiceEca.add(aif.getServiceArtifactInfo(ecaAction.getServiceName()));    UtilMisc.addToSortedSetInMap(this,aif.allServiceEcaInfosReferringToServiceName,ecaAction.getServiceName());  }}  }
class C{  @RequestMapping(UiConstants.DISPLAY_BUILD_INFO_URL) public ModelAndView displayBuildInfo(){  ModelAndView modelAndView=new ModelAndView(UiConstants.DISPLAY_BUILD_INFO_PAGE);  modelAndView.addObject(UiConstants.MODEL_KEY_BUILD_INFORMATION,buildInformation);  return modelAndView;}  }
class C{  public static OptionBuilder hasArgs(){  OptionBuilder.numberOfArgs=Option.UNLIMITED_VALUES;  return instance;}  }
class C{  private Session lookupMailSession() throws NamingException {  final InitialContext ctx=new InitialContext();  String key=InitParametersInjector.get(InitParametersInjector.INIT_PARAM_JNDI_MAIL_SESSION);  if (key != null) {    return (Session)ctx.lookup(key);  }  return null;}  }
class C{  public static String double2Str(double d){  return double2Str(d,2);}  }
class C{  public static String S2T(String text){  char[] chars=text.toCharArray();  for (int i=0; i < chars.length; i++) {    Character replacement=s2t.get(chars[i]);    if (replacement != null) {      chars[i]=replacement;    }  }  return new String(chars);}  }
class C{  public void disableCopyImage(FunctionalAPIImpl impl,RPCopyRequestParams copyToEnableTo) throws RecoverPointException {  ConsistencyGroupCopyUID cgCopyUID=RecoverPointUtils.mapRPVolumeProtectionInfoToCGCopyUID(copyToEnableTo.getCopyVolumeInfo());  RecoverPointImageManagementUtils imageManager=new RecoverPointImageManagementUtils();  imageManager.disableCGCopy(impl,cgCopyUID);}  }
class C{  @Override public BartenderBuilderPod pod(String id,String clusterId){  Objects.requireNonNull(id);  Objects.requireNonNull(clusterId);  ClusterHeartbeat cluster=createCluster(clusterId);  return new PodBuilderConfig(id,cluster,this);}  }
class C{  protected void finalize() throws Throwable {  this.delegate=null;  super.finalize();}  }
class C{  @Override public void onReceiveAPIResult(Map<String,String> result,int requestCode){  if (requestCode == Constants.GCM_REGISTRATION_ID_SEND_CODE && result != null) {    String status=result.get(Constants.STATUS_KEY);    if (!Constants.Status.SUCCESSFUL.equals(status)) {      clearData(getContext());      displayConnectionError();    }  }}  }
class C{  public void finishFunctionTrace(String functionName){  stopTimer(functionName);  logger.trace("Finishing function {}",functionName);}  }
class C{  private View inflateViewByType(int type,View dynamicView,ViewGroup dynamicParent){switch (type) {case TYPE_DEFAULT:    dynamicView=getInflater().inflate(R.layout.post_item_default_view,dynamicParent,false);  break;case TYPE_SELF:dynamicView=getInflater().inflate(R.layout.post_item_text_view,dynamicParent,false);break;case TYPE_IMAGE:dynamicView=getInflater().inflate(R.layout.post_item_image_view,dynamicParent,false);break;case TYPE_GALLERY:dynamicView=getInflater().inflate(R.layout.post_item_gallery_view,dynamicParent,false);break;case TYPE_ANIMATED:dynamicView=getInflater().inflate(R.layout.post_item_animated_view,dynamicParent,false);break;}return dynamicView;}  }
class C{  protected void loadValue(String sValue){  try {    value=Byte.parseByte(sValue.trim());  } catch (  NumberFormatException nfe) {    revertToDefault();  }}  }
class C{  public FileChannelInputStream(FileChannel channel,boolean closeChannel){  this.channel=channel;  this.closeChannel=closeChannel;}  }
class C{  static private int minPositive(int a,int b){  if (a >= 0 && b >= 0) {    return (a < b) ? a : b;  } else   if (a >= 0) {    return a;  } else   if (b >= 0) {    return b;  } else {    return -1;  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void presentReadContactPermissionExplanationToast(){  Activity activity=getActivity();  if (null != activity) {    String toastMessage=getString(R.string.permission_dialog_read_contacts_message);    Toast.makeText(activity,toastMessage,Toast.LENGTH_LONG).show();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.097 -0400",hash_original_method="7C105C969E0E98618A848E2BA2427DC3",hash_generated_method="21CF5C571DC55CCD93ED40ADA6FCCAD5") public DeferredFileOutputStream(int threshold,String prefix,String suffix,File directory){  this(threshold,null,prefix,suffix,directory);  if (prefix == null) {    throw new IllegalArgumentException("Temporary file prefix is missing");  }}  }
class C{  @Override public double calculateDistance(double[] x1,double[] x2){  double prod=innerProduct(x1,x2) + shift;  double result=prod;  for (int i=1; i < degree; i++) {    result*=prod;  }  return result;}  }
class C{  List<String> generatePositionalArguments(final Tree.Primary primary,final Tree.ArgumentList that,final List<Tree.PositionalArgument> args,final boolean forceSequenced,final boolean generateVars){  if (args.isEmpty()) {    return Collections.emptyList();  }  final List<String> argvars=new ArrayList<String>(args.size());  boolean first=true;  boolean opened=false;  Type sequencedType=null;  for (  Tree.PositionalArgument arg : args) {    Tree.Expression expr;    final Parameter pd=arg.getParameter();    if (arg instanceof Tree.ListedArgument) {      if (!first)       gen.out(",");      expr=((Tree.ListedArgument)arg).getExpression();      Type exprType=expr.getTypeModel();      boolean dyncheck=gen.isInDynamicBlock() && pd != null && !ModelUtil.isTypeUnknown(pd.getType()) && exprType.containsUnknowns();      if (forceSequenced || (pd != null && pd.isSequenced())) {        if (dyncheck) {          exprType=pd.getType();        }        Type elemtype;        if (pd == null || pd.getType().getTypeArgumentList().isEmpty()) {          elemtype=exprType;        } else {          elemtype=pd.getType().getTypeArgumentList().get(0);          if (!elemtype.isTypeParameter()) {            elemtype=exprType;          }        }        if (sequencedType == null) {          sequencedType=elemtype;        } else {          sequencedType=ModelUtil.unionType(elemtype,sequencedType,that.getUnit());        }        if (!opened) {          if (generateVars) {            final String argvar=names.createTempVariable();            argvars.add(argvar);            gen.out(argvar,"=");          }          gen.out(gen.getClAlias(),"$arr$sa$([");        }        opened=true;      } else       if (generateVars) {        final String argvar=names.createTempVariable();        argvars.add(argvar);        gen.out(argvar,"=");      }      final int boxType=pd == null ? 0 : gen.boxUnboxStart(expr.getTerm(),pd.getModel());      Map<TypeParameter,Type> targs=null;      if (dyncheck) {        if (primary instanceof Tree.MemberOrTypeExpression) {          targs=((Tree.MemberOrTypeExpression)primary).getTarget().getTypeArguments();        }        TypeUtils.generateDynamicCheck(expr,pd.getType(),gen,false,targs);      } else {        arg.visit(gen);      }      if (boxType == 4) {        gen.out(",");        describeMethodParameters(expr.getTerm());        gen.out(",");        targs=arg.getTypeModel().getTypeArguments();        if (arg instanceof Tree.ListedArgument) {          Tree.Term argTerm=((Tree.ListedArgument)arg).getExpression().getTerm();          if (argTerm instanceof Tree.MemberOrTypeExpression) {            targs=((Tree.MemberOrTypeExpression)argTerm).getTarget().getTypeArguments();          }        }        TypeUtils.printTypeArguments(arg,targs,gen,false,arg.getTypeModel().getVarianceOverrides());      }      gen.boxUnboxEnd(boxType);    } else     if (arg instanceof Tree.SpreadArgument || arg instanceof Tree.Comprehension) {      final boolean isSpreadArg=arg instanceof Tree.SpreadArgument;      if (isSpreadArg) {        expr=((Tree.SpreadArgument)arg).getExpression();      } else {        expr=null;      }      boolean chained=false;      if (opened) {        SequenceGenerator.closeSequenceWithReifiedType(that,TypeUtils.wrapAsIterableArguments(sequencedType),gen,false);        gen.out(".chain(");        sequencedType=null;        chained=true;      } else       if (!first) {        gen.out(",");      }      if (isSpreadArg) {        generateSpreadArgument(primary,that,args,(Tree.SpreadArgument)arg,expr,pd);      } else {        ((Tree.Comprehension)arg).visit(gen);        if (!arg.getTypeModel().isSequential()) {          gen.out(".sequence()");        }      }      if (opened) {        gen.out(",");        Map<TypeParameter,Type> _targs;        Map<TypeParameter,SiteVariance> _vo;        if (expr == null) {          _targs=TypeUtils.wrapAsIterableArguments(arg.getTypeModel());          _vo=null;        } else {          Type spreadType=TypeUtils.findSupertype(that.getUnit().getSequentialDeclaration(),expr.getTypeModel());          if (spreadType == null) {            spreadType=TypeUtils.findSupertype(that.getUnit().getIterableDeclaration(),expr.getTypeModel());          }          _targs=spreadType.getTypeArguments();          _vo=spreadType.getVarianceOverrides();        }        if (chained) {          Type[] _tlist=new Type[2];          for (          TypeParameter tp : _targs.keySet()) {            if ("Element".equals(tp.getName())) {              _tlist[0]=_targs.get(tp);            } else             if ("Absent".equals(tp.getName())) {              _tlist[1]=_targs.get(tp);            }          }          if (_tlist[1] == null) {            _tlist[1]=that.getUnit().getNothingType();          }          Function cdec=(Function)that.getUnit().getIterableDeclaration().getMember("chain",null,false);          _targs=TypeUtils.matchTypeParametersWithArguments(cdec.getTypeParameters(),Arrays.asList(_tlist));        }        TypeUtils.printTypeArguments(that,_targs,gen,false,_vo);        gen.out(")");        if (chained) {          gen.out(".sequence()");        }      }      if (arg instanceof Tree.Comprehension) {        break;      }    }    first=false;  }  if (sequencedType != null) {    final Map<TypeParameter,Type> seqtargs;    if (forceSequenced && args.size() > 0) {      seqtargs=that.getUnit().getNonemptyIterableType(sequencedType).getTypeArguments();    } else {      seqtargs=TypeUtils.wrapAsIterableArguments(sequencedType);    }    SequenceGenerator.closeSequenceWithReifiedType(primary,seqtargs,gen,false);  }  return argvars;}  }
class C{  public void receiveResultqueryStorageLuns(com.emc.storageos.vasa.VasaServiceStub.QueryStorageLunsResponse result){}  }
class C{  public static boolean parseInterpolatedStringContent(PsiBuilder b,int l){  assert b instanceof PerlBuilder;  boolean currentState=((PerlBuilder)b).setIsInterpolated(true);  boolean r=PerlParserImpl.string_content_qq(b,l);  ((PerlBuilder)b).setIsInterpolated(currentState);  return r;}  }
class C{  public static String randomLetters(int length){  return randomString(LETTERS,length);}  }
class C{  public Pool create(String name) throws CacheException {  GemFireCacheImpl cache=GemFireCacheImpl.getInstance();  if (cache != null) {    TypeRegistry registry=cache.getPdxRegistry();    if (registry != null && !attributes.isGateway()) {      registry.creatingPool();    }  }  return PoolImpl.create(this.pm,name,this.attributes);}  }
class C{  public void removeAllConnectionCallbacks(){  connectionCallbacks.clear();}  }
class C{  private void advanceIfCurrentPieceFullyRead(){  if (currentPiece != null && currentPieceIndex == currentPieceSize) {    currentPieceOffsetInRope+=currentPieceSize;    currentPieceIndex=0;    if (pieceIterator.hasNext()) {      currentPiece=pieceIterator.next();      currentPieceSize=currentPiece.size();    } else {      currentPiece=null;      currentPieceSize=0;    }  }}  }
class C{  public boolean isTcpCellularApnServiceRecordAvailable(){  updateTransportServiceAvailability();  return ((_availableTransportServices & TCP_CELLULAR_APN_SERVICE_BOOK) > 0);}  }
class C{  @BeforeClass public void init() throws URISyntaxException, IOException, InterruptedException {  this.packageJsonPath=new File(TypeScriptDTOGeneratorMojoITest.class.getClassLoader().getResource("package.json").toURI()).toPath();  this.rootPath=this.packageJsonPath.getParent();  String buildDirectoryProperty=System.getProperty("buildDirectory");  if (buildDirectoryProperty != null) {    buildDirectory=new File(buildDirectoryProperty).toPath();  } else {    buildDirectory=packageJsonPath.getParent().getParent();  }  LOG.info("Using building directory {0}",buildDirectory);}  }
class C{  public void removeAllSpringConfig(){  mSpringConfigMap.clear();}  }
class C{  public static TypeReference newTryCatchReference(int tryCatchBlockIndex){  return new TypeReference((EXCEPTION_PARAMETER << 24) | (tryCatchBlockIndex << 8));}  }
class C{  public int readBodyData(OutputStream output) throws IOException {  final InputStream istream=newInputStream();  return (int)Streams.copy(istream,output,false);}  }
class C{  public static final boolean isInvalidOrRemoved(Object o){  return isInvalid(o) || isRemoved(o);}  }
class C{  public void testMinusInt(){  PStack<String> pstack=ConsPStack.<String>empty().plus("C").plus("B").plus("A");  assertEquals(Arrays.asList("A","B","C"),pstack);  assertEquals(Arrays.asList("B","C"),pstack.minus(0));  assertEquals(Arrays.asList("A","B"),pstack.minus(2));  pstack=pstack.plus("B");  assertEquals(Arrays.asList("B","A","B","C"),pstack);  assertEquals(Arrays.asList("A","B","C"),pstack.minus(0));  assertEquals(Arrays.asList("B","A","C"),pstack.minus(2));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdataindexsizeerrdeletedatacountnegative.class,args);}  }
class C{  private byte[] entityToBytes(HttpEntity entity) throws IOException, ServerError {  PoolingByteArrayOutputStream bytes=new PoolingByteArrayOutputStream(mPool,(int)entity.getContentLength());  byte[] buffer=null;  try {    InputStream in=entity.getContent();    if (in == null) {      throw new ServerError();    }    buffer=mPool.getBuf(1024);    int count;    while ((count=in.read(buffer)) != -1) {      bytes.write(buffer,0,count);    }    return bytes.toByteArray();  }  finally {    try {      entity.consumeContent();    } catch (    IOException e) {      VolleyLog.v("Error occured when calling consumingContent");    }    mPool.returnBuf(buffer);    bytes.close();  }}  }
class C{  private int maxOpId(){  return maxOpId;}  }
class C{  public int increment(int offset){  CharSequence txt=getText();  int i;  if (txt != null) {    try {      i=Integer.parseInt(txt.toString());    } catch (    NumberFormatException e) {      i=0;    }  } else {    i=0;  }  i=i + offset;  setText(String.valueOf(i));  return i;}  }
class C{  @Override Monitor startTimeMon(HttpMonRequest httpMonBase){  if (httpMonBase.getRequest() instanceof Request)   return MonitorFactory.getMonitor(getMonKey(httpMonBase)).start(); else   return super.startTimeMon(httpMonBase);}  }
class C{  public TemplateContextType(String id,String name){  Assert.isNotNull(id);  Assert.isNotNull(name);  fId=id;  fName=name;}  }
class C{  @PostConstruct public void init(){  SpecialMethodSensorAssignment cldDirect=new SpecialMethodSensorAssignment(SpecialInstrumentationType.CLASS_LOADING_DELEGATION);  cldDirect.setClassName("java.lang.ClassLoader");  cldDirect.setMethodName("loadClass");  cldDirect.setParameters(Collections.singletonList("java.lang.String"));  cldDirect.setPublicModifier(true);  SpecialMethodSensorAssignment cldSuperclass=new SpecialMethodSensorAssignment(SpecialInstrumentationType.CLASS_LOADING_DELEGATION);  cldSuperclass.setClassName("java.lang.ClassLoader");  cldSuperclass.setMethodName("loadClass");  cldSuperclass.setParameters(Collections.singletonList("java.lang.String"));  cldSuperclass.setPublicModifier(true);  cldSuperclass.setSuperclass(true);  classLoadingDelegationAssignments=Arrays.asList(cldDirect,cldSuperclass);}  }
class C{  public void print(String name){  PcalDebug.print2DVector(tokens,name + ".tokens");  PcalDebug.printObjectArray(anchorTokens,name + ".anchorTokens");  PcalDebug.printIntArray(anchorTokCol,name + ".anchorTokCol");}  }
class C{  public static int toSQLType(String strType) throws DatabaseException {  strType=strType.toUpperCase().trim();  if (strType.startsWith("CF_SQL_"))   strType=strType.substring(7);  if (strType.startsWith("SQL_"))   strType=strType.substring(4);  if (strType.length() > 2) {    char first=strType.charAt(0);    if (first == 'A') {      if (strType.equals("ARRAY"))       return Types.ARRAY;    } else     if (first == 'B') {      if (strType.equals("BIGINT"))       return Types.BIGINT; else       if (strType.equals("BINARY"))       return Types.BINARY; else       if (strType.equals("BIT"))       return Types.BIT; else       if (strType.equals("BLOB"))       return Types.BLOB; else       if (strType.equals("BOOLEAN"))       return Types.BOOLEAN; else       if (strType.equals("BOOL"))       return Types.BOOLEAN;    } else     if (first == 'C') {      if (strType.equals("CLOB"))       return Types.CLOB; else       if (strType.equals("CHAR"))       return Types.CHAR; else       if (strType.equals("CLOB"))       return Types.CLOB; else       if (strType.equals("CURSOR"))       return CFTypes.CURSOR;    } else     if (first == 'D') {      if (strType.equals("DATALINK"))       return Types.DATALINK; else       if (strType.equals("DATE"))       return Types.DATE; else       if (strType.equals("DISTINCT"))       return Types.DISTINCT; else       if (strType.equals("DECIMAL"))       return Types.DECIMAL; else       if (strType.equals("DOUBLE"))       return Types.DOUBLE;    } else     if (first == 'F') {      if (strType.equals("FLOAT"))       return Types.FLOAT;    } else     if (first == 'I') {      if (strType.equals("IDSTAMP"))       return CFTypes.IDSTAMP; else       if (strType.equals("INTEGER"))       return Types.INTEGER; else       if (strType.equals("INT"))       return Types.INTEGER;    } else     if (first == 'L') {      if (strType.equals("LONGVARBINARY"))       return Types.LONGVARBINARY; else       if (strType.equals("LONGVARCHAR"))       return Types.LONGVARCHAR;    } else     if (first == 'M') {      if (strType.equals("MONEY"))       return Types.DOUBLE; else       if (strType.equals("MONEY4"))       return Types.DOUBLE;    } else     if (first == 'N') {      if (strType.equals("NUMERIC"))       return Types.NUMERIC; else       if (strType.equals("NUMBER"))       return Types.NUMERIC; else       if (strType.equals("NULL"))       return Types.NULL; else       if (strType.equals("NCHAR"))       return Types.NCHAR; else       if (strType.equals("NCLOB"))       return Types.NCLOB; else       if (strType.equals("NVARCHAR"))       return Types.NVARCHAR;    } else     if (first == 'O') {      if (strType.equals("OTHER"))       return Types.OTHER; else       if ("OBJECT".equals(strType))       return Types.OTHER;    } else     if (first == 'R') {      if (strType.equals("REAL"))       return Types.REAL; else       if (strType.equals("REF"))       return Types.REF; else       if (strType.equals("REFCURSOR"))       return CFTypes.CURSOR;    } else     if (first == 'S') {      if (strType.equals("SMALLINT"))       return Types.SMALLINT; else       if (strType.equals("STRUCT"))       return Types.STRUCT; else       if (strType.equals("STRING"))       return Types.VARCHAR; else       if (strType.equals("SQLXML"))       return Types.SQLXML;    } else     if (first == 'T') {      if (strType.equals("TIME"))       return Types.TIME; else       if (strType.equals("TIMESTAMP"))       return Types.TIMESTAMP; else       if (strType.equals("TINYINT"))       return Types.TINYINT;    } else     if (first == 'V') {      if (strType.equals("VARBINARY"))       return Types.VARBINARY; else       if (strType.equals("VARCHAR"))       return Types.VARCHAR; else       if (strType.equals("VARCHAR2"))       return CFTypes.VARCHAR2;    }  }  throw new DatabaseException("invalid CF SQL Type [" + strType + "]",null,null,null);}  }
class C{  public static boolean hasSpecialChars(final String str){  final Matcher matcher=SPL_CHAR_PATRN.matcher(str);  return matcher.find();}  }
class C{  protected String doIt() throws java.lang.Exception {  StringBuffer sql=null;  int no=0;  String clientCheck=" AND AD_Client_ID=" + m_AD_Client_ID;  if (m_deleteOldImported) {    sql=new StringBuffer("DELETE I_Invoice " + "WHERE I_IsImported='Y'").append(clientCheck);    no=DB.executeUpdate(sql.toString(),get_TrxName());    log.fine("Delete Old Impored =" + no);  }  sql=new StringBuffer("UPDATE I_Invoice " + "SET AD_Client_ID = COALESCE (AD_Client_ID,").append(m_AD_Client_ID).append(")," + " AD_Org_ID = COALESCE (AD_Org_ID,").append(m_AD_Org_ID).append(")," + " IsActive = COALESCE (IsActive, 'Y')," + " Created = COALESCE (Created, SysDate),"+ " CreatedBy = COALESCE (CreatedBy, 0),"+ " Updated = COALESCE (Updated, SysDate),"+ " UpdatedBy = COALESCE (UpdatedBy, 0),"+ " I_ErrorMsg = ' ',"+ " I_IsImported = 'N' "+ "WHERE I_IsImported<>'Y' OR I_IsImported IS NULL");  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.info("Reset=" + no);  sql=new StringBuffer("UPDATE I_Invoice o " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Org, '" + "WHERE (AD_Org_ID IS NULL OR AD_Org_ID=0"+ " OR EXISTS (SELECT * FROM AD_Org oo WHERE o.AD_Org_ID=oo.AD_Org_ID AND (oo.IsSummary='Y' OR oo.IsActive='N')))"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid Org=" + no);  sql=new StringBuffer("UPDATE I_Invoice o " + "SET C_DocType_ID=(SELECT C_DocType_ID FROM C_DocType d WHERE d.Name=o.DocTypeName" + " AND d.DocBaseType IN ('API','APC') AND o.AD_Client_ID=d.AD_Client_ID) "+ "WHERE C_DocType_ID IS NULL AND IsSOTrx='N' AND DocTypeName IS NOT NULL AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.fine("Set PO DocType=" + no);  sql=new StringBuffer("UPDATE I_Invoice o " + "SET C_DocType_ID=(SELECT C_DocType_ID FROM C_DocType d WHERE d.Name=o.DocTypeName" + " AND d.DocBaseType IN ('ARI','ARC') AND o.AD_Client_ID=d.AD_Client_ID) "+ "WHERE C_DocType_ID IS NULL AND IsSOTrx='Y' AND DocTypeName IS NOT NULL AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.fine("Set SO DocType=" + no);  sql=new StringBuffer("UPDATE I_Invoice o " + "SET C_DocType_ID=(SELECT C_DocType_ID FROM C_DocType d WHERE d.Name=o.DocTypeName" + " AND d.DocBaseType IN ('API','ARI','APC','ARC') AND o.AD_Client_ID=d.AD_Client_ID) "+ "WHERE C_DocType_ID IS NULL AND DocTypeName IS NOT NULL AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.fine("Set DocType=" + no);  sql=new StringBuffer("UPDATE I_Invoice " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid DocTypeName, ' " + "WHERE C_DocType_ID IS NULL AND DocTypeName IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid DocTypeName=" + no);  sql=new StringBuffer("UPDATE I_Invoice o " + "SET C_DocType_ID=(SELECT MAX(C_DocType_ID) FROM C_DocType d WHERE d.IsDefault='Y'" + " AND d.DocBaseType='API' AND o.AD_Client_ID=d.AD_Client_ID) "+ "WHERE C_DocType_ID IS NULL AND IsSOTrx='N' AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.fine("Set PO Default DocType=" + no);  sql=new StringBuffer("UPDATE I_Invoice o " + "SET C_DocType_ID=(SELECT MAX(C_DocType_ID) FROM C_DocType d WHERE d.IsDefault='Y'" + " AND d.DocBaseType='ARI' AND o.AD_Client_ID=d.AD_Client_ID) "+ "WHERE C_DocType_ID IS NULL AND IsSOTrx='Y' AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.fine("Set SO Default DocType=" + no);  sql=new StringBuffer("UPDATE I_Invoice o " + "SET C_DocType_ID=(SELECT MAX(C_DocType_ID) FROM C_DocType d WHERE d.IsDefault='Y'" + " AND d.DocBaseType IN('ARI','API') AND o.AD_Client_ID=d.AD_Client_ID) "+ "WHERE C_DocType_ID IS NULL AND IsSOTrx IS NULL AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.fine("Set Default DocType=" + no);  sql=new StringBuffer("UPDATE I_Invoice " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=No DocType, ' " + "WHERE C_DocType_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("No DocType=" + no);  sql=new StringBuffer("UPDATE I_Invoice o SET IsSOTrx='Y' " + "WHERE EXISTS (SELECT * FROM C_DocType d WHERE o.C_DocType_ID=d.C_DocType_ID AND d.DocBaseType='ARI' AND o.AD_Client_ID=d.AD_Client_ID)" + " AND C_DocType_ID IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set IsSOTrx=Y=" + no);  sql=new StringBuffer("UPDATE I_Invoice o SET IsSOTrx='N' " + "WHERE EXISTS (SELECT * FROM C_DocType d WHERE o.C_DocType_ID=d.C_DocType_ID AND d.DocBaseType='API' AND o.AD_Client_ID=d.AD_Client_ID)" + " AND C_DocType_ID IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set IsSOTrx=N=" + no);  sql=new StringBuffer("UPDATE I_Invoice o " + "SET M_PriceList_ID=(SELECT MAX(M_PriceList_ID) FROM M_PriceList p WHERE p.IsDefault='Y'" + " AND p.C_Currency_ID=o.C_Currency_ID AND p.IsSOPriceList=o.IsSOTrx AND o.AD_Client_ID=p.AD_Client_ID) "+ "WHERE M_PriceList_ID IS NULL AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Default Currency PriceList=" + no);  sql=new StringBuffer("UPDATE I_Invoice o " + "SET M_PriceList_ID=(SELECT MAX(M_PriceList_ID) FROM M_PriceList p WHERE p.IsDefault='Y'" + " AND p.IsSOPriceList=o.IsSOTrx AND o.AD_Client_ID=p.AD_Client_ID) "+ "WHERE M_PriceList_ID IS NULL AND C_Currency_ID IS NULL AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Default PriceList=" + no);  sql=new StringBuffer("UPDATE I_Invoice o " + "SET M_PriceList_ID=(SELECT MAX(M_PriceList_ID) FROM M_PriceList p " + " WHERE p.C_Currency_ID=o.C_Currency_ID AND p.IsSOPriceList=o.IsSOTrx AND o.AD_Client_ID=p.AD_Client_ID) "+ "WHERE M_PriceList_ID IS NULL AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Currency PriceList=" + no);  sql=new StringBuffer("UPDATE I_Invoice o " + "SET M_PriceList_ID=(SELECT MAX(M_PriceList_ID) FROM M_PriceList p " + " WHERE p.IsSOPriceList=o.IsSOTrx AND o.AD_Client_ID=p.AD_Client_ID) "+ "WHERE M_PriceList_ID IS NULL AND C_Currency_ID IS NULL AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set PriceList=" + no);  sql=new StringBuffer("UPDATE I_Invoice " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=No PriceList, ' " + "WHERE M_PriceList_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("No PriceList=" + no);  sql=new StringBuffer("UPDATE I_Invoice o " + "SET C_PaymentTerm_ID=(SELECT C_PaymentTerm_ID FROM C_PaymentTerm p" + " WHERE o.PaymentTermValue=p.Value AND o.AD_Client_ID=p.AD_Client_ID) "+ "WHERE C_PaymentTerm_ID IS NULL AND PaymentTermValue IS NOT NULL AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set PaymentTerm=" + no);  sql=new StringBuffer("UPDATE I_Invoice o " + "SET C_PaymentTerm_ID=(SELECT MAX(C_PaymentTerm_ID) FROM C_PaymentTerm p" + " WHERE p.IsDefault='Y' AND o.AD_Client_ID=p.AD_Client_ID) "+ "WHERE C_PaymentTerm_ID IS NULL AND o.PaymentTermValue IS NULL AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Default PaymentTerm=" + no);  sql=new StringBuffer("UPDATE I_Invoice " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=No PaymentTerm, ' " + "WHERE C_PaymentTerm_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("No PaymentTerm=" + no);  sql=new StringBuffer("UPDATE I_Invoice o " + "SET C_Project_ID=(SELECT C_Project_ID FROM C_Project p" + " WHERE o.ProjectValue=p.Value AND o.AD_Client_ID=p.AD_Client_ID) "+ "WHERE C_Project_ID IS NULL AND ProjectValue IS NOT NULL AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Project=" + no);  sql=new StringBuffer("UPDATE I_Invoice " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Project, ' " + "WHERE C_Project_ID IS NULL AND (ProjectValue IS NOT NULL)"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid Project=" + no);  sql=new StringBuffer("UPDATE I_Invoice o " + "SET C_Activity_ID=(SELECT C_Activity_ID FROM C_Activity p" + " WHERE o.ActivityValue=p.Value AND o.AD_Client_ID=p.AD_Client_ID) "+ "WHERE C_Activity_ID IS NULL AND ActivityValue IS NOT NULL AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Activity=" + no);  sql=new StringBuffer("UPDATE I_Invoice " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Activity, ' " + "WHERE C_Activity_ID IS NULL AND (ActivityValue IS NOT NULL)"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid Activity=" + no);  sql=new StringBuffer("UPDATE I_Invoice o " + "SET C_Charge_ID=(SELECT C_Charge_ID FROM C_Charge p" + " WHERE o.ChargeName=p.Name AND o.AD_Client_ID=p.AD_Client_ID) "+ "WHERE C_Charge_ID IS NULL AND ChargeName IS NOT NULL AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Charge=" + no);  sql=new StringBuffer("UPDATE I_Invoice " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Charge, ' " + "WHERE C_Charge_ID IS NULL AND (ChargeName IS NOT NULL)"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid Charge=" + no);  sql=new StringBuffer("UPDATE I_Invoice o " + "SET (C_BPartner_ID,AD_User_ID)=(SELECT C_BPartner_ID,AD_User_ID FROM AD_User u" + " WHERE o.EMail=u.EMail AND o.AD_Client_ID=u.AD_Client_ID AND u.C_BPartner_ID IS NOT NULL) "+ "WHERE C_BPartner_ID IS NULL AND EMail IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set BP from EMail=" + no);  sql=new StringBuffer("UPDATE I_Invoice o " + "SET (C_BPartner_ID,AD_User_ID)=(SELECT C_BPartner_ID,AD_User_ID FROM AD_User u" + " WHERE o.ContactName=u.Name AND o.AD_Client_ID=u.AD_Client_ID AND u.C_BPartner_ID IS NOT NULL) "+ "WHERE C_BPartner_ID IS NULL AND ContactName IS NOT NULL"+ " AND EXISTS (SELECT Name FROM AD_User u WHERE o.ContactName=u.Name AND o.AD_Client_ID=u.AD_Client_ID AND u.C_BPartner_ID IS NOT NULL GROUP BY Name HAVING COUNT(*)=1)"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set BP from ContactName=" + no);  sql=new StringBuffer("UPDATE I_Invoice o " + "SET C_BPartner_ID=(SELECT MAX(C_BPartner_ID) FROM C_BPartner bp" + " WHERE o.BPartnerValue=bp.Value AND o.AD_Client_ID=bp.AD_Client_ID) "+ "WHERE C_BPartner_ID IS NULL AND BPartnerValue IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set BP from Value=" + no);  sql=new StringBuffer("UPDATE I_Invoice o " + "SET C_BPartner_ID=(SELECT C_BPartnerCashTrx_ID FROM AD_ClientInfo c" + " WHERE o.AD_Client_ID=c.AD_Client_ID) "+ "WHERE C_BPartner_ID IS NULL AND BPartnerValue IS NULL AND Name IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Default BP=" + no);  sql=new StringBuffer("UPDATE I_Invoice o " + "SET C_BPartner_Location_ID=(SELECT C_BPartner_Location_ID" + " FROM C_BPartner_Location bpl INNER JOIN C_Location l ON (bpl.C_Location_ID=l.C_Location_ID)"+ " WHERE o.C_BPartner_ID=bpl.C_BPartner_ID AND bpl.AD_Client_ID=o.AD_Client_ID"+ " AND DUMP(o.Address1)=DUMP(l.Address1) AND DUMP(o.Address2)=DUMP(l.Address2)"+ " AND DUMP(o.City)=DUMP(l.City) AND DUMP(o.Postal)=DUMP(l.Postal)"+ " AND o.C_Region_ID=l.C_Region_ID AND o.C_Country_ID=l.C_Country_ID) "+ "WHERE C_BPartner_ID IS NOT NULL AND C_BPartner_Location_ID IS NULL"+ " AND I_IsImported='N'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Found Location=" + no);  sql=new StringBuffer("UPDATE I_Invoice o " + "SET C_BPartner_Location_ID=(SELECT MAX(C_BPartner_Location_ID) FROM C_BPartner_Location l" + " WHERE l.C_BPartner_ID=o.C_BPartner_ID AND o.AD_Client_ID=l.AD_Client_ID"+ " AND ((l.IsBillTo='Y' AND o.IsSOTrx='Y') OR o.IsSOTrx='N')"+ ") "+ "WHERE C_BPartner_ID IS NOT NULL AND C_BPartner_Location_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set BP Location from BP=" + no);  sql=new StringBuffer("UPDATE I_Invoice " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=No BP Location, ' " + "WHERE C_BPartner_ID IS NOT NULL AND C_BPartner_Location_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("No BP Location=" + no);  sql=new StringBuffer("UPDATE I_Invoice o " + "SET C_Country_ID=(SELECT C_Country_ID FROM C_Country c" + " WHERE o.CountryCode=c.CountryCode AND c.AD_Client_ID IN (0, o.AD_Client_ID)) "+ "WHERE C_BPartner_ID IS NULL AND C_Country_ID IS NULL AND CountryCode IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Country=" + no);  sql=new StringBuffer("UPDATE I_Invoice " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Country, ' " + "WHERE C_BPartner_ID IS NULL AND C_Country_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid Country=" + no);  sql=new StringBuffer("UPDATE I_Invoice o " + "Set RegionName=(SELECT MAX(Name) FROM C_Region r" + " WHERE r.IsDefault='Y' AND r.C_Country_ID=o.C_Country_ID"+ " AND r.AD_Client_ID IN (0, o.AD_Client_ID)) "+ "WHERE C_BPartner_ID IS NULL AND C_Region_ID IS NULL AND RegionName IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Region Default=" + no);  sql=new StringBuffer("UPDATE I_Invoice o " + "Set C_Region_ID=(SELECT C_Region_ID FROM C_Region r" + " WHERE r.Name=o.RegionName AND r.C_Country_ID=o.C_Country_ID"+ " AND r.AD_Client_ID IN (0, o.AD_Client_ID)) "+ "WHERE C_BPartner_ID IS NULL AND C_Region_ID IS NULL AND RegionName IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Region=" + no);  sql=new StringBuffer("UPDATE I_Invoice o " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Region, ' " + "WHERE C_BPartner_ID IS NULL AND C_Region_ID IS NULL "+ " AND EXISTS (SELECT * FROM C_Country c"+ " WHERE c.C_Country_ID=o.C_Country_ID AND c.HasRegion='Y')"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid Region=" + no);  sql=new StringBuffer("UPDATE I_Invoice o " + "SET M_Product_ID=(SELECT MAX(M_Product_ID) FROM M_Product p" + " WHERE o.ProductValue=p.Value AND o.AD_Client_ID=p.AD_Client_ID) "+ "WHERE M_Product_ID IS NULL AND ProductValue IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Product from Value=" + no);  sql=new StringBuffer("UPDATE I_Invoice o " + "SET M_Product_ID=(SELECT MAX(M_Product_ID) FROM M_Product p" + " WHERE o.UPC=p.UPC AND o.AD_Client_ID=p.AD_Client_ID) "+ "WHERE M_Product_ID IS NULL AND UPC IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Product from UPC=" + no);  sql=new StringBuffer("UPDATE I_Invoice o " + "SET M_Product_ID=(SELECT MAX(M_Product_ID) FROM M_Product p" + " WHERE o.SKU=p.SKU AND o.AD_Client_ID=p.AD_Client_ID) "+ "WHERE M_Product_ID IS NULL AND SKU IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Product fom SKU=" + no);  sql=new StringBuffer("UPDATE I_Invoice " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Product, ' " + "WHERE M_Product_ID IS NULL AND (ProductValue IS NOT NULL OR UPC IS NOT NULL OR SKU IS NOT NULL)"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid Product=" + no);  sql=new StringBuffer("UPDATE I_Invoice " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Product and Charge, ' " + "WHERE M_Product_ID IS NOT NULL AND C_Charge_ID IS NOT NULL "+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid Product and Charge exclusive=" + no);  sql=new StringBuffer("UPDATE I_Invoice o " + "SET C_Tax_ID=(SELECT MAX(C_Tax_ID) FROM C_Tax t" + " WHERE o.TaxIndicator=t.TaxIndicator AND o.AD_Client_ID=t.AD_Client_ID) "+ "WHERE C_Tax_ID IS NULL AND TaxIndicator IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Tax=" + no);  sql=new StringBuffer("UPDATE I_Invoice " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Tax, ' " + "WHERE C_Tax_ID IS NULL AND TaxIndicator IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid Tax=" + no);  commitEx();  sql=new StringBuffer("SELECT * FROM I_Invoice " + "WHERE I_IsImported='N' AND C_BPartner_ID IS NULL").append(clientCheck);  try {    PreparedStatement pstmt=DB.prepareStatement(sql.toString(),get_TrxName());    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      X_I_Invoice imp=new X_I_Invoice(getCtx(),rs,get_TrxName());      if (imp.getBPartnerValue() == null) {        if (imp.getEMail() != null)         imp.setBPartnerValue(imp.getEMail()); else         if (imp.getName() != null)         imp.setBPartnerValue(imp.getName()); else         continue;      }      if (imp.getName() == null) {        if (imp.getContactName() != null)         imp.setName(imp.getContactName()); else         imp.setName(imp.getBPartnerValue());      }      MBPartner bp=MBPartner.get(getCtx(),imp.getBPartnerValue());      if (bp == null) {        bp=new MBPartner(getCtx(),-1,get_TrxName());        bp.setClientOrg(imp.getAD_Client_ID(),imp.getAD_Org_ID());        bp.setValue(imp.getBPartnerValue());        bp.setName(imp.getName());        if (!bp.save())         continue;      }      imp.setC_BPartner_ID(bp.getC_BPartner_ID());      MBPartnerLocation bpl=null;      MBPartnerLocation[] bpls=bp.getLocations(true);      for (int i=0; bpl == null && i < bpls.length; i++) {        if (imp.getC_BPartner_Location_ID() == bpls[i].getC_BPartner_Location_ID())         bpl=bpls[i]; else         if (imp.getC_Location_ID() == bpls[i].getC_Location_ID())         bpl=bpls[i]; else         if (imp.getC_Location_ID() == 0) {          MLocation loc=bpls[i].getLocation(false);          if (loc.equals(imp.getC_Country_ID(),imp.getC_Region_ID(),imp.getPostal(),"",imp.getCity(),imp.getAddress1(),imp.getAddress2()))           bpl=bpls[i];        }      }      if (bpl == null) {        MLocation loc=new MLocation(getCtx(),0,get_TrxName());        loc.setAddress1(imp.getAddress1());        loc.setAddress2(imp.getAddress2());        loc.setCity(imp.getCity());        loc.setPostal(imp.getPostal());        if (imp.getC_Region_ID() != 0)         loc.setC_Region_ID(imp.getC_Region_ID());        loc.setC_Country_ID(imp.getC_Country_ID());        if (!loc.save())         continue;        bpl=new MBPartnerLocation(bp);        bpl.setC_Location_ID(imp.getC_Location_ID() > 0 ? imp.getC_Location_ID() : loc.getC_Location_ID());        if (!bpl.save())         continue;      }      imp.setC_Location_ID(bpl.getC_Location_ID());      imp.setC_BPartner_Location_ID(bpl.getC_BPartner_Location_ID());      if (imp.getContactName() != null || imp.getEMail() != null || imp.getPhone() != null) {        MUser[] users=bp.getContacts(true);        MUser user=null;        for (int i=0; user == null && i < users.length; i++) {          String name=users[i].getName();          if (name.equals(imp.getContactName()) || name.equals(imp.getName())) {            user=users[i];            imp.setAD_User_ID(user.getAD_User_ID());          }        }        if (user == null) {          user=new MUser(bp);          if (imp.getContactName() == null)           user.setName(imp.getName()); else           user.setName(imp.getContactName());          user.setEMail(imp.getEMail());          user.setPhone(imp.getPhone());          if (user.save())           imp.setAD_User_ID(user.getAD_User_ID());        }      }      imp.save();    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,"CreateBP",e);  }  sql=new StringBuffer("UPDATE I_Invoice " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=No BPartner, ' " + "WHERE C_BPartner_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("No BPartner=" + no);  commitEx();  int noInsert=0;  int noInsertLine=0;  sql=new StringBuffer("SELECT * FROM I_Invoice " + "WHERE I_IsImported='N'").append(clientCheck).append(" ORDER BY C_BPartner_ID, C_BPartner_Location_ID, I_Invoice_ID");  try {    PreparedStatement pstmt=DB.prepareStatement(sql.toString(),get_TrxName());    ResultSet rs=pstmt.executeQuery();    int oldC_BPartner_ID=0;    int oldC_BPartner_Location_ID=0;    String oldDocumentNo="";    MInvoice invoice=null;    int lineNo=0;    while (rs.next()) {      X_I_Invoice imp=new X_I_Invoice(getCtx(),rs,null);      String cmpDocumentNo=imp.getDocumentNo();      if (cmpDocumentNo == null)       cmpDocumentNo="";      if (oldC_BPartner_ID != imp.getC_BPartner_ID() || oldC_BPartner_Location_ID != imp.getC_BPartner_Location_ID() || !oldDocumentNo.equals(cmpDocumentNo)) {        if (invoice != null) {          invoice.processIt(m_docAction);          invoice.saveEx();        }        oldC_BPartner_ID=imp.getC_BPartner_ID();        oldC_BPartner_Location_ID=imp.getC_BPartner_Location_ID();        oldDocumentNo=imp.getDocumentNo();        if (oldDocumentNo == null)         oldDocumentNo="";        invoice=new MInvoice(getCtx(),0,null);        invoice.setClientOrg(imp.getAD_Client_ID(),imp.getAD_Org_ID());        invoice.setC_DocTypeTarget_ID(imp.getC_DocType_ID());        invoice.setIsSOTrx(imp.isSOTrx());        if (imp.getDocumentNo() != null)         invoice.setDocumentNo(imp.getDocumentNo());        invoice.setC_BPartner_ID(imp.getC_BPartner_ID());        invoice.setC_BPartner_Location_ID(imp.getC_BPartner_Location_ID());        if (imp.getAD_User_ID() != 0)         invoice.setAD_User_ID(imp.getAD_User_ID());        if (imp.getDescription() != null)         invoice.setDescription(imp.getDescription());        invoice.setC_PaymentTerm_ID(imp.getC_PaymentTerm_ID());        invoice.setM_PriceList_ID(imp.getM_PriceList_ID());        if (imp.getSalesRep_ID() != 0)         invoice.setSalesRep_ID(imp.getSalesRep_ID());        if (invoice.getSalesRep_ID() == 0)         invoice.setSalesRep_ID(getAD_User_ID());        if (imp.getAD_OrgTrx_ID() != 0)         invoice.setAD_OrgTrx_ID(imp.getAD_OrgTrx_ID());        if (imp.getC_Activity_ID() != 0)         invoice.setC_Activity_ID(imp.getC_Activity_ID());        if (imp.getC_Campaign_ID() != 0)         invoice.setC_Campaign_ID(imp.getC_Campaign_ID());        if (imp.getC_Project_ID() != 0)         invoice.setC_Project_ID(imp.getC_Project_ID());        if (imp.getDateInvoiced() != null)         invoice.setDateInvoiced(imp.getDateInvoiced());        if (imp.getDateAcct() != null)         invoice.setDateAcct(imp.getDateAcct());        if (imp.getInvoiceCollectionType() != null)         invoice.setInvoiceCollectionType(imp.getInvoiceCollectionType());        if (imp.getDunningGrace() != null)         invoice.setDunningGrace(imp.getDunningGrace());        if (imp.getC_DunningLevel_ID() != 0)         invoice.setC_DunningLevel_ID(imp.getC_DunningLevel_ID());        invoice.saveEx();        noInsert++;        lineNo=10;      }      imp.setC_Invoice_ID(invoice.getC_Invoice_ID());      MInvoiceLine line=new MInvoiceLine(invoice);      if (imp.getLineDescription() != null)       line.setDescription(imp.getLineDescription());      line.setLine(lineNo);      lineNo+=10;      if (imp.getM_Product_ID() != 0)       line.setM_Product_ID(imp.getM_Product_ID(),true);      if (imp.getC_Charge_ID() != 0)       line.setC_Charge_ID(imp.getC_Charge_ID());      if (imp.getC_Activity_ID() != 0)       line.setC_Activity_ID(imp.getC_Activity_ID());      if (imp.getC_Campaign_ID() != 0)       line.setC_Campaign_ID(imp.getC_Campaign_ID());      if (imp.getC_Project_ID() != 0)       line.setC_Project_ID(imp.getC_Project_ID());      line.setQty(imp.getQtyOrdered());      line.setPrice();      BigDecimal price=imp.getPriceActual();      if (price != null && Env.ZERO.compareTo(price) != 0)       line.setPrice(price);      if (imp.getC_Tax_ID() != 0)       line.setC_Tax_ID(imp.getC_Tax_ID()); else {        line.setTax();        imp.setC_Tax_ID(line.getC_Tax_ID());      }      BigDecimal taxAmt=imp.getTaxAmt();      if (taxAmt != null && Env.ZERO.compareTo(taxAmt) != 0)       line.setTaxAmt(taxAmt);      line.saveEx();      imp.setC_InvoiceLine_ID(line.getC_InvoiceLine_ID());      imp.setI_IsImported(true);      imp.setProcessed(true);      if (imp.save())       noInsertLine++;    }    if (invoice != null) {      invoice.processIt(m_docAction);      invoice.saveEx();    }    rs.close();    pstmt.close();  } catch (  Exception e) {    log.log(Level.SEVERE,"CreateInvoice",e);  }  sql=new StringBuffer("UPDATE I_Invoice " + "SET I_IsImported='N', Updated=SysDate " + "WHERE I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  addLog(0,null,new BigDecimal(no),"@Errors@");  addLog(0,null,new BigDecimal(noInsert),"@C_Invoice_ID@: @Inserted@");  addLog(0,null,new BigDecimal(noInsertLine),"@C_InvoiceLine_ID@: @Inserted@");  return "";}  }
class C{  @Override public void updateWeaponGroups(){  Set<String> set=weaponGroups.keySet();  Iterator<String> iter=set.iterator();  while (iter.hasNext()) {    String key=iter.next();    this.getEquipment(weaponGroups.get(key)).setNWeapons(0);  }  Map<String,Integer> groups=new HashMap<String,Integer>();  for (  Integer fId : fighters) {    Aero fighter=(Aero)game.getEntity(fId);    if (fighter.getFCSHits() > 2) {      continue;    }    for (    Mounted mounted : fighter.getWeaponGroupList()) {      if (mounted.isHit() || mounted.isDestroyed()) {        continue;      }      int loc=mounted.getLocation();      String key=mounted.getType().getInternalName() + ":" + loc;      if (null == groups.get(key)) {        groups.put(key,mounted.getNWeapons());      } else       if (!mounted.getType().hasFlag(WeaponType.F_SPACE_BOMB)) {        groups.put(key,groups.get(key) + mounted.getNWeapons());      }    }  }  Set<String> newSet=groups.keySet();  Iterator<String> newIter=newSet.iterator();  while (newIter.hasNext()) {    String key=newIter.next();    if (null != weaponGroups.get(key)) {      this.getEquipment(weaponGroups.get(key)).setNWeapons(groups.get(key));    } else {      String name=key.split(":")[0];      int loc=Integer.parseInt(key.split(":")[1]);      EquipmentType etype=EquipmentType.get(name);      Mounted newmount;      if (etype != null) {        try {          newmount=addWeaponGroup(etype,loc);          newmount.setNWeapons(groups.get(key));          weaponGroups.put(key,getEquipmentNum(newmount));        } catch (        LocationFullException ex) {          System.out.println("Unable to compile weapon groups");          ex.printStackTrace();          return;        }      } else       if (name != "0") {        addFailedEquipment(name);      }    }  }  setRapidFire();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypeRefsPackage.TYPE_VARIABLE_MAPPING__TYPE_VAR:    setTypeVar((TypeVariable)null);  return;case TypeRefsPackage.TYPE_VARIABLE_MAPPING__TYPE_ARG:setTypeArg((TypeArgument)null);return;}super.eUnset(featureID);}  }
class C{  HandlerManager ensureHandlers(){  return manager == null ? manager=new HandlerManager(this) : manager;}  }
class C{  @Override public SelectedGroup<T> useGroup(final String group){  Objects.requireNonNull(group,"group must not be null");  return new SelectedGroup<>(find(group));}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:18.359 -0500",hash_original_method="6B5D7DFA7F5B692B993CC3912D59B646",hash_generated_method="6B5D7DFA7F5B692B993CC3912D59B646") boolean arrowScroll(int direction){  try {    mInLayout=true;    final boolean handled=arrowScrollImpl(direction);    if (handled) {      playSoundEffect(SoundEffectConstants.getContantForFocusDirection(direction));    }    return handled;  }  finally {    mInLayout=false;  }}  }
class C{  private void buildButtons(){  final Composite composite=new Composite(this.shell,SWT.NONE);  int numberOfColumns;  if (this.style == TipStyle.HEADER) {    numberOfColumns=1;  } else   if (this.style == TipStyle.TWO_COLUMNS) {    numberOfColumns=2;  } else {    numberOfColumns=1;  }  final GridData gd=new GridData(GridData.FILL,GridData.BEGINNING,false,false,numberOfColumns,1);  composite.setLayoutData(gd);  final GridLayout gridLayout=new GridLayout();  gridLayout.marginWidth=2;  if (this.style == TipStyle.TWO_COLUMNS_LARGE) {    composite.setLayout(new GridLayout(3,false));  } else {    composite.setLayout(new GridLayout(this.displayShowOnStartup ? 4 : 3,false));  }  final GridData gridShowOnStartup, gridPrevious, gridNext, gridClose;  if (this.style == TipStyle.TWO_COLUMNS_LARGE) {    gridShowOnStartup=new GridData(GridData.BEGINNING,GridData.BEGINNING,true,false,3,1);    gridPrevious=new GridData(GridData.END,GridData.CENTER,true,false);    gridPrevious.widthHint=120;    gridNext=new GridData(GridData.CENTER,GridData.CENTER,false,false);    gridNext.widthHint=120;    gridClose=new GridData(GridData.BEGINNING,GridData.CENTER,true,false);    gridClose.widthHint=120;  } else {    gridShowOnStartup=new GridData(GridData.BEGINNING,GridData.CENTER,true,false);    gridPrevious=new GridData(GridData.END,GridData.CENTER,this.showOnStartup ? false : true,false);    gridPrevious.widthHint=120;    gridNext=new GridData(GridData.FILL,GridData.CENTER,false,false);    gridNext.widthHint=120;    gridClose=new GridData(GridData.FILL,GridData.CENTER,false,false);    gridClose.widthHint=120;  }  if (this.displayShowOnStartup) {    buildShowOnStartup(composite,gridShowOnStartup);  }  buildPreviousButton(composite,gridPrevious);  buildNextButton(composite,gridNext);  buildCloseButton(composite,gridClose);}  }
class C{  private void doDeleteReservedDOI(DOI reservedDoi,Resource resource,@Nullable DOI reassignedDoi) throws DoiException {  Preconditions.checkNotNull(registrationManager.getDoiService());  DoiData doiData=registrationManager.getDoiService().resolve(reservedDoi);  if (doiData != null && doiData.getStatus() != null && !doiData.getStatus().equals(DoiStatus.REGISTERED)) {    LOG.debug("Deleting reserved DOI=" + reservedDoi.toString());    registrationManager.getDoiService().delete(reservedDoi);  } else {    LOG.debug("Deleting reserved DOI bypassed because this is an existing registered DOI: " + reservedDoi.toString());  }  resource.setIdentifierStatus(IdentifierStatus.UNRESERVED);  resource.updateAlternateIdentifierForDOI();  resource.updateCitationIdentifierForDOI();  resource.setDoi(null);  resource.setDoiOrganisationKey(null);  if ((reassignedDoi != null)) {    resource.setIdentifierStatus(IdentifierStatus.PUBLIC);    resource.setDoi(reassignedDoi);    resource.updateAlternateIdentifierForDOI();    resource.updateCitationIdentifierForDOI();    resource.setDoiOrganisationKey(registrationManager.findPrimaryDoiAgencyAccount().getKey());  }  saveResource();}  }
class C{  public Rectangle(Size rectSize,Point topLeft){  setRect(new Rect(0,0,(int)rectSize.width,(int)rectSize.height));}  }
class C{  public static int maxInt(int a,float b){  return max(a,ceil(b));}  }
class C{  public double maxLongitude(){  return maxLongitude;}  }
class C{  public static List<List<Sequence<IString>>> readReferences(String[] referenceFilenames,boolean applyNistTokenizer) throws IOException {  List<List<Sequence<IString>>> referencesList=new ArrayList<List<Sequence<IString>>>();  for (  String referenceFilename : referenceFilenames) {    LineNumberReader reader=IOTools.getReaderFromFile(referenceFilename);    for (String line; (line=reader.readLine()) != null; ) {      int lineNumber=reader.getLineNumber();      if (referencesList.size() < lineNumber) {        referencesList.add(new ArrayList<Sequence<IString>>(referenceFilenames.length));      }      if (applyNistTokenizer) {        line=NISTTokenizer.tokenize(line);      }      referencesList.get(lineNumber - 1).add(IStrings.tokenize(line));    }    reader.close();  }  return referencesList;}  }
class C{  @Override public float coord(int overlap,int maxOverlap){  return overlap / (float)maxOverlap;}  }
class C{  private void registerElement(Element element){  elements.add(element);  for (  Element child : element.getChildren()) {    registerElement(child);  }}  }
class C{  public static byte[] bigDecimalToByte(BigDecimal num){  BigInteger sig=new BigInteger(num.unscaledValue().toString());  int scale=num.scale();  byte[] bscale=new byte[]{(byte)(scale)};  byte[] buff=sig.toByteArray();  byte[] completeArr=new byte[buff.length + bscale.length];  System.arraycopy(bscale,0,completeArr,0,bscale.length);  System.arraycopy(buff,0,completeArr,bscale.length,buff.length);  return completeArr;}  }
class C{  protected void handleStartTag(TagElement tag){}  }
class C{  public void testDoConfigureSetsPort() throws Exception {  configuration.setProperty(ServletPropertySet.PORT,PORT);  configuration.doConfigure(container);  String config=configuration.getFileHandler().readTextFile(DOMAIN_HOME + "/config/config.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo(PORT,"//weblogic:listen-port",config);}  }
class C{  public String toString(){  return this.cdciPictureEssenceDescriptorBO.toString();}  }
class C{  @Override public void onReceive(Context context,Intent intent){  boolean hasConnectivity=ConnectionBuddy.getInstance().hasNetworkConnection();  if (hasConnectivity && ConnectionBuddyCache.getLastNetworkState(object) != hasConnectivity) {    ConnectionBuddyCache.setLastNetworkState(object,hasConnectivity);    ConnectionBuddy.getInstance().notifyConnectionChange(hasConnectivity,mCallback);  } else   if (!hasConnectivity && ConnectionBuddyCache.getLastNetworkState(object) != hasConnectivity) {    ConnectionBuddyCache.setLastNetworkState(object,hasConnectivity);    ConnectionBuddy.getInstance().notifyConnectionChange(hasConnectivity,mCallback);  }}  }
class C{  void addNewComponent(Container container,JComponent component,int index,int gridx,int gridy,int gridwidth,int gridheight,double weightx,double weighty,int fill,Insets is){  if (container instanceof JFrame) {    container=((JFrame)container).getContentPane();  } else   if (container instanceof JDialog) {    container=((JDialog)container).getContentPane();  }  container.add(component,index);  GridBagLayout gbl=(GridBagLayout)container.getLayout();  GridBagConstraints gbc=new GridBagConstraints();  gbc.gridx=gridx;  gbc.gridy=gridy;  gbc.gridwidth=gridwidth;  gbc.gridheight=gridheight;  gbc.weightx=weightx;  gbc.weighty=weighty;  gbc.fill=fill;  if (is != null)   gbc.insets=is;  gbl.setConstraints(component,gbc);}  }
class C{  public ParsingException(String msg){  super(msg);  i18nMessage=msg;}  }
class C{  public VisorTaskArgument(UUID node,A arg,boolean debug){  this(Collections.singleton(node),arg,debug);}  }
class C{  protected void handlePageStatusCode(WebURL webUrl,int statusCode,String statusDescription){}  }
class C{  public String toString(){  return "" + name;}  }
class C{  @Deprecated public void readFields(DataInput in) throws IOException {  this.comparator=new BooleanExpressionComparator();  this.comparator.readFields(in);}  }
class C{  public boolean containsKey(Object key){  return getEntry(key) != null;}  }
class C{  public void write(int c) throws IOException {  internalOut.write(c);}  }
class C{  private String exit() throws Exception {  log.info("exit");  ProcessInfo pi=getProcessInfo();  Object result=doIt(ReplicationLocal.START,"exit",null);  return "exit";}  }
class C{  public static void main(String[] args) throws IgniteCheckedException {  try (Ignite g=G.start("modules/clients/src/test/resources/spring-server-node.xml")){    U.sleep(Long.MAX_VALUE);  } }  }
class C{  public void fillIDValues(){  for (  X_I_Workflow importWorkflow : getRecords(false,false)) {    int AD_Org_ID=getID(MOrg.Table_Name,"Value = ?",new Object[]{importWorkflow.getOrgValue()});    if (AD_Org_ID > 0)     importWorkflow.setAD_Org_ID(AD_Org_ID);    int S_Resource_ID=getID(MResource.Table_Name,"Value=?",new Object[]{importWorkflow.getResourceValue()});    if (S_Resource_ID > 0)     importWorkflow.setS_Resource_ID(S_Resource_ID);    String errorMsg="";    if (MWorkflow.WORKFLOWTYPE_Manufacturing.equals(importWorkflow.getWorkflowType())) {      if (importWorkflow.getS_Resource_ID() <= 0) {        errorMsg+="@S_Resource_ID@ @NotFound@, ";      }    }    if (importWorkflow.getDocumentNo() == null)     errorMsg+="@DocumentNo@ @NotFound@, ";    if (importWorkflow.getName() == null)     errorMsg+="@Name@ @NotFound@, ";    if (importWorkflow.getAccessLevel() == null)     errorMsg+="@AccessLevel@ @NotFound@, ";    if (importWorkflow.getAuthor() == null)     errorMsg+="@Author@ @NotFound@, ";    if (importWorkflow.getAuthor() == null)     errorMsg+="@Author@ @NotFound@, ";    if (importWorkflow.getEntityType() == null)     errorMsg+="@EntityType@ @NotFound@, ";    if (importWorkflow.getPublishStatus() == null)     errorMsg+="@PublishStatus@ @NotFound@, ";    if (importWorkflow.getValue() == null)     errorMsg+="@Value@ @NotFound@, ";    if (importWorkflow.getVersion() <= 0)     errorMsg+="@Version@ @NotFound@, ";    if (importWorkflow.getWorkflowType() == null)     errorMsg+="@WorkflowType@ @NotFound@, ";    if (importWorkflow.getDurationUnit() == null)     errorMsg+="@DurationUnit@ @NotFound@, ";    if (errorMsg != null && errorMsg.length() > 0) {      importWorkflow.setI_ErrorMsg(Msg.parseTranslation(getCtx(),errorMsg));    }    importWorkflow.saveEx();  }}  }
class C{  public void endVisit(ParenthesizedExpression node){}  }
class C{  public String toString(){  return getName();}  }
class C{  public static String replaceDefaultFullRequestContent(String requestContentTemplate){  return replaceFullRequestContent(requestContentTemplate,"");}  }
class C{  private void reset(){  root.removeAllChildren();  model.nodeStructureChanged(root);  DefaultMutableTreeNode neurons=new DefaultMutableTreeNode("Loose Neurons");  model.insertNodeInto(neurons,root,0);  for (  Neuron neuron : networkPanel.getNetwork().getNeuronList()) {    DefaultMutableTreeNode neuronTreeNode=new DefaultMutableTreeNode(neuron);    model.insertNodeInto(neuronTreeNode,neurons,0);  }  DefaultMutableTreeNode synapses=new DefaultMutableTreeNode("Loose Synapses");  for (  Synapse synapse : networkPanel.getNetwork().getSynapseList()) {    DefaultMutableTreeNode synapseTreeNode=new DefaultMutableTreeNode(synapse);    model.insertNodeInto(synapseTreeNode,synapses,0);  }  root.add(synapses);  DefaultMutableTreeNode groups=new DefaultMutableTreeNode("Groups");  for (  Group group : networkPanel.getNetwork().getGroupList()) {    DefaultMutableTreeNode groupTreeNode=new DefaultMutableTreeNode(group.getId());    model.insertNodeInto(groupTreeNode,groups,0);  }  root.add(groups);}  }
class C{  private void dispatchStep(Step step,boolean isNested) throws WorkflowException {  assert (step.status.state == StepState.QUEUED);  List<Object> argList=new ArrayList<Object>(Arrays.asList(step.executeMethod.args));  argList.add(step.stepId);  Controller controller=_dispatcher.getControllerMap().get(step.controllerName);  if (controller == null) {    throw new WorkflowException("Cannot locate controller for: " + step.controllerName);  }  try {    _dispatcher.queue((isNested ? Dispatcher.QueueName.workflow_inner : Dispatcher.QueueName.workflow_outer),step.deviceURI,step.deviceType,step.lockDevice,controller,step.executeMethod.methodName,argList.toArray());  } catch (  InternalException ex) {    throw new WorkflowException(String.format("Cannot queue step %s for controller %s method %s",step.stepId,step.controllerName,step.executeMethod.methodName),ex);  }}  }
class C{  public double[] primal(){  double[] x=new double[n];  for (int i=0; i < n; i++) {    if (Math.abs(a[i][i]) > EPSILON)     x[i]=a[i][n + n] / a[i][i]; else     if (Math.abs(a[i][n + n]) > EPSILON)     return null;  }  return x;}  }
class C{  public void testSerializeDeserializeWithJaxbAnnotations() throws Exception {  ObjectMapper mapper=new ObjectMapper();  mapper.enable(SerializationConfig.Feature.INDENT_OUTPUT);  JacksonExample ex=new JacksonExample();  QName qname=new QName("urn:hi","hello");  ex.setQname(qname);  ex.setAttributeProperty("attributeValue");  ex.setElementProperty("elementValue");  ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue"));  ex.setEnumProperty(EnumExample.VALUE1);  StringWriter writer=new StringWriter();  mapper.writeValue(writer,ex);  writer.flush();  writer.close();  String json=writer.toString();  JacksonExample readEx=mapper.readValue(json,JacksonExample.class);  assertEquals(ex.qname,readEx.qname);  assertEquals(ex.attributeProperty,readEx.attributeProperty);  assertEquals(ex.elementProperty,readEx.elementProperty);  assertEquals(ex.wrappedElementProperty,readEx.wrappedElementProperty);  assertEquals(ex.enumProperty,readEx.enumProperty);}  }
class C{  public static String readAsString(InputStream is) throws IOException {  StringBuffer buf=new StringBuffer();  byte[] b=new byte[8192];  int nread=-1;  while ((nread=is.read(b)) >= 0) {    String s=new String(b,0,nread);    buf.append(s);  }  return buf.toString();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public DeviceInfo updateDeviceInfo(DeviceInfo deviceinfo){  EntityManager mgr=getEntityManager();  try {    mgr.persist(deviceinfo);  }  finally {    mgr.close();  }  return deviceinfo;}  }
class C{  @Override public void onDragSlide(float deltaY){}  }
class C{  public void showError(String str){  ArgumentChecking.notNull(str,"str");  updateLabel("ERROR: " + str,true,ERROR_FG_COLOR,ERROR_BG_COLOR);}  }
class C{  public Dot(final Context context){  super(context);  init(null,0,0);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public void cancelPicker(){  if (device != null) {    device.cancelPairing();  }  device=null;}  }
class C{  public double nextDouble(boolean includeZero,boolean includeOne){  double d=0.0;  do {    d=nextDouble();    if (includeOne && nextBoolean())     d+=1.0;  } while ((d > 1.0) || (!includeZero && d == 0.0));  return d;}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  @SuppressLint("NewApi") private void launchFileSelectionIntent(){  enableActionBarHeader(HIDE_ACTION_BAR_HEADER);  Intent fileIntent=new Intent(Intent.ACTION_GET_CONTENT);  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {    fileIntent.putExtra(Intent.EXTRA_ALLOW_MULTIPLE,true);  }  fileIntent.setType("*/*");  startActivityForResult(fileIntent,REQUEST_FILES_REQUEST_CODE);}  }
class C{  protected static Object newInstance(String className){  ClassLoader cl=Thread.currentThread().getContextClassLoader();  log.debug("Conversion utils classloader: {}",cl);  Object instance=null;  try {    Class<?> clazz=cl.loadClass(className);    instance=clazz.newInstance();  } catch (  Exception ex) {    log.error("Error loading class: {}",className,ex);  }  return instance;}  }
class C{  public static void refreshAllWidgets(Context context){  context.sendBroadcast(new Intent(getBookmarkAppWidgetUpdateAction(context),null,context,BookmarkThumbnailWidgetProvider.class));}  }
class C{  private boolean ruleR10(Node a,Node c,Graph graph){  List<Node> intoCArrows=graph.getNodesInTo(c,Endpoint.ARROW);  for (  Node b : intoCArrows) {    if (b == a)     continue;    if (!(graph.getEndpoint(c,b) == Endpoint.TAIL))     continue;    for (    Node d : intoCArrows) {      if (d == a || d == b)       continue;      if (!(graph.getEndpoint(d,c) == Endpoint.TAIL))       continue;      List<List<Node>> ucPdPsToB=getUcPdPaths(a,b,graph);      List<List<Node>> ucPdPsToD=getUcPdPaths(a,d,graph);      for (      List<Node> u1 : ucPdPsToB) {        Node m=u1.get(1);        for (        List<Node> u2 : ucPdPsToD) {          Node n=u2.get(1);          if (m.equals(n))           continue;          if (graph.isAdjacentTo(m,n))           continue;          logger.log("impliedOrientations",SearchLogUtils.edgeOrientedMsg("R10",graph.getEdge(c,a)));          graph.setEndpoint(c,a,Endpoint.TAIL);          changeFlag=true;          this.orientSimilarPairs(graph,this.getKnowledge(),c,a,Endpoint.TAIL);          return true;        }      }    }  }  return false;}  }
class C{  public static Object readField(final Field field,final Object target,final boolean forceAccess) throws IllegalAccessException {  if (field == null) {    throw new IllegalArgumentException("The field must not be null");  }  if (forceAccess && !field.isAccessible()) {    field.setAccessible(true);  } else {    MemberUtils.setAccessibleWorkaround(field);  }  return field.get(target);}  }
class C{  public synchronized int add(IAudioProvider provider){  providers.add(provider);  return providers.indexOf(provider);}  }
class C{  public NumberParameter(OptionID optionID,boolean optional){  super(optionID,optional);}  }
class C{  protected Node deepCopyInto(Node n){  super.deepCopyInto(n);  AbstractElement ae=(AbstractElement)n;  if (attributes != null) {    NamedNodeMap map=attributes;    for (int i=map.getLength() - 1; i >= 0; i--) {      AbstractAttr aa=(AbstractAttr)map.item(i).cloneNode(true);      if (aa instanceof AbstractAttrNS) {        ae.setAttributeNodeNS(aa);      } else {        ae.setAttributeNode(aa);      }    }  }  return n;}  }
class C{  public SystemUser(String username,String password){  super(username,password);  setFullname(SYSTEM_USERNAME);}  }
class C{  private boolean hasClosedEndpointIntersection(GeometryGraph graph){  Map endPoints=new TreeMap();  for (Iterator i=graph.getEdgeIterator(); i.hasNext(); ) {    Edge e=(Edge)i.next();    int maxSegmentIndex=e.getMaximumSegmentIndex();    boolean isClosed=e.isClosed();    Coordinate p0=e.getCoordinate(0);    addEndpoint(endPoints,p0,isClosed);    Coordinate p1=e.getCoordinate(e.getNumPoints() - 1);    addEndpoint(endPoints,p1,isClosed);  }  for (Iterator i=endPoints.values().iterator(); i.hasNext(); ) {    EndpointInfo eiInfo=(EndpointInfo)i.next();    if (eiInfo.isClosed && eiInfo.degree != 2) {      nonSimpleLocation=eiInfo.getCoordinate();      return true;    }  }  return false;}  }
class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  @SuppressWarnings("deprecation") public void testUPDATEWith1of3ColChange() throws Exception {  OptimizeUpdatesFilter filter=new OptimizeUpdatesFilter();  OneRowChange oneRowChange=generateRowChange("foo","bar",RowChangeData.ActionType.UPDATE);  oneRowChange.setColumnSpec(generateSpec(oneRowChange));  oneRowChange.setColumnValues(generateValues(oneRowChange,333,"two","const"));  oneRowChange.setKeySpec(generateSpec(oneRowChange));  oneRowChange.setKeyValues(generateValues(oneRowChange,333,"one","const"));  ReplDBMSEvent event=generateReplDBMSEvent(oneRowChange);  filter.filter(event);  RowChangeData rdata=(RowChangeData)event.getDBMSEvent().getData().get(0);  OneRowChange orc=rdata.getRowChanges().get(0);  Assert.assertEquals("Two column specs were removed",1,orc.getColumnSpec().size());  Assert.assertEquals("Two column values were removed",1,orc.getColumnValues().get(0).size());  Assert.assertEquals("All key specs are in place",3,orc.getKeySpec().size());  Assert.assertEquals("All key values are in place",3,orc.getKeyValues().get(0).size());}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void testDaysExcluded(){  AnnualCalendar annualCalendar=new AnnualCalendar();  annualCalendar.setDaysExcluded(null);  assertNotNull("Annual calendar daysExcluded property should have been set to empty ArrayList, not null.",annualCalendar.getDaysExcluded());}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:30.776 -0500",hash_original_method="E1E933639B5521F15D3C671D186FDEA6",hash_generated_method="8AA381DB12CD16743FC05C7A7A1825CA") public AuthenticationException(String message,Throwable cause){  super(message,cause);}  }
class C{  @Override public boolean equals(Object obj){  if (obj instanceof Video) {    Video other=(Video)obj;    return Objects.equal(name,other.name) && Objects.equal(url,other.url) && duration == other.duration;  } else {    return false;  }}  }
class C{  @Override protected Boolean doInBackground(Server... servers){  Log.d(DEBUG_TAG,"doInBackGround");  boolean result=true;  Server server=servers[0];  if (!bug.isNew()) {    if (bug.getOriginalState() == State.CLOSED && !close) {      result=server.reopenNote(bug);    }  }  if (bug.getOriginalState() != State.CLOSED) {    Log.d(DEBUG_TAG,"CommitTask.doInBackground:Updating OSB");    if (comment != null && comment.length() > 0) {      NoteComment bc=new NoteComment(bug,comment);      result=bug.isNew() ? server.addNote(bug,bc) : server.addComment(bug,bc);      Log.d(DEBUG_TAG,result ? "sucessful" : "failed");    }    if (result && close) {      result=server.closeNote(bug);    }  }  return result;}  }
class C{  public boolean isEmptyResponse(){  return StringUtils.isEmpty(content);}  }
class C{  @Override public void refresh(){  if (filterMode) {    pcTextField.setText((cpuStateValidityFlags.pc == 0) ? "" : Format.asHex(cpuState.pc,8));    ilmTextField.setText((((FrCPUState)cpuStateValidityFlags).getILM() == 0) ? "" : maskValue(((FrCPUState)cpuState).getILM(),((FrCPUState)cpuStateValidityFlags).getILM(),5));    scrTextField.setText((((FrCPUState)cpuStateValidityFlags).getSCR() == 0) ? "" : maskValue(((FrCPUState)cpuState).getSCR(),((FrCPUState)cpuStateValidityFlags).getSCR(),3));    ccrTextField.setText((((FrCPUState)cpuStateValidityFlags).getCCR() == 0) ? "" : maskValue(((FrCPUState)cpuState).getCCR(),((FrCPUState)cpuStateValidityFlags).getCCR(),6));    for (int i=0; i < regTextFields.length; i++) {      regTextFields[i].setText((cpuStateValidityFlags.getReg(i) == 0) ? "" : Format.asHex(cpuState.getReg(i),8));    }    r15Label0.setText("");    r15Label1.setText("");  } else {    updateAndColorTextField(pcTextField,Format.asHex(cpuState.pc,8));    updateAndColorTextField(ilmTextField,Format.asBinary((((FrCPUState)cpuState).getILM()),5));    updateAndColorTextField(scrTextField,Format.asBinary((((FrCPUState)cpuState).getSCR()),3));    updateAndColorTextField(ccrTextField,Format.asBinary((((FrCPUState)cpuState).getCCR()),6));    for (int i=0; i < regTextFields.length; i++) {      updateAndColorTextField(regTextFields[i],Format.asHex(cpuState.getReg(i),8));    }    updateAndColorLabel(r15Label0,(((FrCPUState)cpuState).getS() == 0) ? "=R15" : "");    updateAndColorLabel(r15Label1,(((FrCPUState)cpuState).getS() == 1) ? "=R15" : "");  }}  }
class C{  @Override public synchronized OtrSession openSession(Send<Bytestring> send) throws InterruptedException, IOException {  if (send == null)   throw new NullPointerException();  Chan<Boolean> chan=new BasicChan<>(1);  OtrSendAlice alice=new OtrSendAlice(send,chan);  Session<Address,Bytestring> session=peer.openSession(alice);  if (session == null)   return null;  final SessionID sessionID=new SessionID("","","");  OtrPolicy policy=new OtrPolicyImpl(OtrPolicy.ALLOW_V2 | OtrPolicy.ALLOW_V3 | OtrPolicy.ERROR_START_AKE);  SessionImpl sessionImpl=new SessionImpl(sessionID,new SendOtrEngineHost(policy,session));  alice.sessionImpl=sessionImpl;  String query="?OTRv23?";  session.send(new Bytestring(query.getBytes()));  Boolean result=chan.receive();  if (result) {  } else {    chan.close();    session.close();    return null;  }  return new OtrSession(session,sessionImpl);}  }
class C{  public static void write(CharSequence data,Writer output) throws IOException {  if (data != null) {    write(data.toString(),output);  }}  }
class C{  public static PsiElement resolve(ScopeNode scope,Language language,PsiNamedElement namedElement,String xpathToIDNodes){  Collection<? extends PsiElement> defIDNodes=XPath.findAll(language,scope,xpathToIDNodes);  String id=namedElement.getName();  PsiElement idNode=Trees.toMap(defIDNodes).get(id);  if (idNode != null) {    return idNode.getParent();  }  ScopeNode context=scope.getContext();  if (context != null) {    return context.resolve(namedElement);  }  return null;}  }
class C{  public boolean isEndNode(final Node node){  return getFirstNode() == node || getLastNode() == node;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public T caseTagValue(TagValue object){  return null;}  }
class C{  public void initiateTrain(ActionEvent e,RosterEntry re,Block b){  initiateTrain(e);  if (_TrainsFromRoster && re != null) {    setComboBox(trainSelectBox,re.getId());  }  if (b != null && selectedTransit != null) {    ArrayList<Transit> transitList=_TransitManager.getListUsingBlock(b);    ArrayList<Transit> transitEntryList=_TransitManager.getListEntryBlock(b);    for (    Transit t : transitEntryList) {      if (!transitList.contains(t)) {        transitList.add(t);      }    }    transitsFromSpecificBlock=true;    initializeFreeTransitsCombo(transitList);    ArrayList<Block> tmpBlkList=new ArrayList<Block>();    if (selectedTransit.getEntryBlocksList().contains(b)) {      tmpBlkList=selectedTransit.getEntryBlocksList();      inTransitBox.setSelected(false);    } else     if (selectedTransit.containsBlock(b)) {      tmpBlkList=selectedTransit.getInternalBlocksList();      inTransitBox.setSelected(true);    }    ArrayList<Integer> tmpSeqList=selectedTransit.getBlockSeqList();    for (int i=0; i < tmpBlkList.size(); i++) {      if (tmpBlkList.get(i) == b) {        setComboBox(startingBlockBox,getBlockName(b) + "-" + tmpSeqList.get(i));        break;      }    }  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean b=Catbert.evalBool(stack.pop());  if (stack.getUIMgr() != null && stack.getUIMgr().getUIClientType() == UIClient.REMOTE_UI && stack.getUIMgr().getRootPanel().getRenderEngine() instanceof MiniClientSageRenderer) {    Object rv=new Boolean(((MiniClientSageRenderer)stack.getUIMgr().getRootPanel().getRenderEngine()).setEventEncryption(b));    PseudoMenu currUI=stack.getUIMgrSafe().getCurrUI();    if (currUI != null)     currUI.refresh();    return rv;  }  return Boolean.FALSE;}  }
class C{  public static void f(String tag,String msg){  if (sLevel > LEVEL_FATAL) {    return;  }  Log.wtf(tag,msg);}  }
class C{  public void withVoidTransaction(@NotNull Propagation propagation,@NotNull VoidTransactionCallback callback){  withVoidTransaction(propagation,Isolation.DEFAULT,callback);}  }
class C{  public cudaSurfaceObject(){}  }
class C{  public void invert(){  mxGraphHierarchyNode temp=source;  source=target;  target=temp;  isReversed=!isReversed;}  }
class C{  public void resetActions(){  actions.removeAllElements();}  }
class C{  protected void initFromClasspathPart(String part){  File file;  file=null;  if (part.startsWith("file:")) {    part=part.replace(" ","%20");    try {      file=new File(new java.net.URI(part));    } catch (    URISyntaxException e) {      System.err.println("Failed to generate URI: " + part);      e.printStackTrace();    }  } else {    file=new File(part);  }  if (file == null) {    System.err.println("Skipping: " + part);    return;  }  if (file.isDirectory()) {    initFromDir(file);  } else   if (file.exists()) {    initFromJar(file);  }}  }
class C{  public static JFreeChart createXYStepAreaChart(String title,String xAxisLabel,String yAxisLabel,XYDataset dataset,PlotOrientation orientation,boolean legend,boolean tooltips,boolean urls){  ParamChecks.nullNotPermitted(orientation,"orientation");  NumberAxis xAxis=new NumberAxis(xAxisLabel);  xAxis.setAutoRangeIncludesZero(false);  NumberAxis yAxis=new NumberAxis(yAxisLabel);  XYToolTipGenerator toolTipGenerator=null;  if (tooltips) {    toolTipGenerator=new StandardXYToolTipGenerator();  }  XYURLGenerator urlGenerator=null;  if (urls) {    urlGenerator=new StandardXYURLGenerator();  }  XYItemRenderer renderer=new XYStepAreaRenderer(XYStepAreaRenderer.AREA_AND_SHAPES,toolTipGenerator,urlGenerator);  XYPlot plot=new XYPlot(dataset,xAxis,yAxis,null);  plot.setRenderer(renderer);  plot.setOrientation(orientation);  plot.setDomainCrosshairVisible(false);  plot.setRangeCrosshairVisible(false);  JFreeChart chart=new JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);  currentTheme.apply(chart);  return chart;}  }
class C{  private static void addValidationRuleRanges(String name,Hashtable bindings,Element bindingNode,Element restrictionNode){  String lower=null, upper=null;  for (int i=0; i < restrictionNode.getChildCount(); i++) {    if (restrictionNode.isText(i))     continue;    Element child=(Element)restrictionNode.getChild(i);    if (child.getName().equalsIgnoreCase(NODE_MININCLUSIVE))     lower=child.getAttributeValue(null,ATTRIBUTE_VALUE); else     if (child.getName().equalsIgnoreCase(NODE_MAXINCLUSIVE))     upper=child.getAttributeValue(null,ATTRIBUTE_VALUE);  }  if (upper != null && lower != null && upper.trim().length() > 0 && lower.trim().length() > 0) {    setValidationRule(bindingNode,upper,lower);    List<String> bindingList=sharedRestrictions.get(name);    if (bindingList != null) {      for (      String binding : bindingList) {        Element bindNode=(Element)bindings.get(binding);        if (bindNode == null)         continue;        setValidationRule(bindNode,upper,lower);      }    }  }}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public static void closeQuietly(Closeable closeable){  if (closeable != null) {    try {      closeable.close();    } catch (    RuntimeException rethrown) {      throw rethrown;    }catch (    Exception ignored) {    }  }}  }
class C{  public JSONObject put(String key,Collection value) throws JSONException {  this.put(key,new JSONArray(value));  return this;}  }
class C{  public static String randomAlphanumeric(int count){  return random(count,true,true);}  }
class C{  public boolean isToHoist(VariableDeclaration element){  return isTaggedAs(Tag.toHoist,element);}  }
class C{  public boolean encodeFile(String input,String output) throws IOException {  byte[] bytes=new byte[128 * 1024];  FileInputStream in=new FileInputStream(input);  int bytesRead=in.read(bytes);  in.close();  String content=new String(bytes,0,bytesRead,"ISO8859-1");  content=encodedContents(content);  bytes=content.getBytes("ISO8859-1");  FileOutputStream fout=new FileOutputStream(output);  fout.write(bytes);  fout.close();  return true;}  }
class C{  private void mapDiskType(DiskState diskState,Volume volume){  String volumeType=volume.getVolumeType();  if (volumeType.equalsIgnoreCase(VOLUME_TYPE_GENERAL_PURPOSED_SSD) || (volumeType.equalsIgnoreCase(VOLUME_TYPE_PROVISIONED_SSD))) {    diskState.type=DiskType.SSD;  } else   if (volumeType.equalsIgnoreCase(VOLUME_TYPE_MAGNETIC)) {    diskState.type=DiskType.HDD;  }}  }
class C{  private static int parseType(final String signature,int pos,final SignatureVisitor v){  char c;  int start, end;  boolean visited, inner;  String name;switch (c=signature.charAt(pos++)) {case 'Z':case 'C':case 'B':case 'S':case 'I':case 'F':case 'J':case 'D':case 'V':    v.visitBaseType(c);  return pos;case '[':return parseType(signature,pos,v.visitArrayType());case 'T':end=signature.indexOf(';',pos);v.visitTypeVariable(signature.substring(pos,end));return end + 1;default :start=pos;visited=false;inner=false;for (; ; ) {switch (c=signature.charAt(pos++)) {case '.':case ';':if (!visited) {name=signature.substring(start,pos - 1);if (inner) {v.visitInnerClassType(name);} else {v.visitClassType(name);}}if (c == ';') {v.visitEnd();return pos;}start=pos;visited=false;inner=true;break;case '<':name=signature.substring(start,pos - 1);if (inner) {v.visitInnerClassType(name);} else {v.visitClassType(name);}visited=true;top: for (; ; ) {switch (c=signature.charAt(pos)) {case '>':break top;case '*':++pos;v.visitTypeArgument();break;case '+':case '-':pos=parseType(signature,pos + 1,v.visitTypeArgument(c));break;default :pos=parseType(signature,pos,v.visitTypeArgument('='));break;}}}}}}  }
class C{  public int maxDoc(){  if (this.maxDoc == -1) {    throw new IllegalStateException("maxDoc isn't set yet");  }  return maxDoc;}  }
class C{  private void login(XMLRPCCallback callback){  try {    XMLRPCClient client=new XMLRPCClient(new URL(mApiUrl.replace("http://","https://")),mUserAgent);    client.callAsync(callback,"LogIn","","","en",mUserAgent);  } catch (  MalformedURLException e) {    e.printStackTrace();  }}  }
class C{  public String globalInfo(){  return "Simply stores the statistics in memory.";}  }
class C{  protected void resetAttribute(SVGItem item){}  }
class C{  public void startHttpServer() throws IOException {  httpServer=com.sun.net.httpserver.HttpServer.create(new InetSocketAddress(0),0);  HttpContext ctx=httpServer.createContext("/test/",new MyHandler());  executorService=Executors.newCachedThreadPool();  httpServer.setExecutor(executorService);  httpServer.start();}  }
class C{  public static AttributeWeights load(File file) throws IOException {  AttributeWeights result=new AttributeWeights();  Document document=null;  try {    document=DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(file);  } catch (  SAXException e1) {    throw new IOException(e1.getMessage());  }catch (  ParserConfigurationException e1) {    throw new IOException(e1.getMessage());  }  Element attributeWeightsElement=document.getDocumentElement();  if (!attributeWeightsElement.getTagName().equals("attributeweights")) {    throw new IOException("Outer tag of attribute weights file must be <attributeweights>");  }  NodeList weights=attributeWeightsElement.getChildNodes();  for (int i=0; i < weights.getLength(); i++) {    Node node=weights.item(i);    if (node instanceof Element) {      Element weightTag=(Element)node;      String tagName=weightTag.getTagName();      if (!tagName.equals("weight")) {        throw new IOException("Only tags <weight> are allowed, was " + tagName);      }      String name=weightTag.getAttribute("name");      String value=weightTag.getAttribute("value");      double weight=1.0d;      try {        weight=Double.parseDouble(value);      } catch (      NumberFormatException e) {        throw new IOException("Only numerical weights are allowed for the 'value' attribute.");      }      result.setWeight(name,weight);    }  }  return result;}  }
class C{  public CannedTokenStream(int finalPosInc,int finalOffset,Token... tokens){  this.tokens=tokens;  this.finalOffset=finalOffset;  this.finalPosInc=finalPosInc;}  }
class C{  public final void removeCaretListener(CaretListener listener){  listenerList.remove(CaretListener.class,listener);}  }
class C{  public void incrPointCount(){  m_PointCount++;}  }
class C{  public int size(){  return count;}  }
class C{  private ProtocolResult handleResponseCache(String cacheKey,CacheEntity localCacheEntity,ProtocolResult protocolResult){  if (protocolResult.exception() == null) {    Headers responseHeaders=protocolResult.responseHeaders();    byte[] responseBody=protocolResult.responseBody();    int responseCode=responseHeaders.getResponseCode();    if (responseCode == 304) {      if (localCacheEntity == null) {        responseBody=new byte[0];      } else {        protocolResult.setFromCache(true);        responseHeaders=localCacheEntity.getResponseHeaders();        responseHeaders.set(Headers.HEAD_KEY_RESPONSE_CODE,Integer.toString(304));        responseBody=localCacheEntity.getData();      }    } else     if (responseBody != null) {      if (localCacheEntity == null) {        localCacheEntity=HeaderUtil.parseCacheHeaders(responseHeaders,responseBody);      } else {        localCacheEntity.setLocalExpire(HeaderUtil.getLocalExpires(responseHeaders));        localCacheEntity.getResponseHeaders().setAll(responseHeaders);        localCacheEntity.setData(responseBody);      }    }    if (localCacheEntity != null)     mCache.replace(cacheKey,localCacheEntity);    protocolResult.setResponseBody(responseBody);    protocolResult.setResponseHeaders(responseHeaders);  }  return protocolResult;}  }
class C{  public boolean isDeclaredStatic(){  EList<N4Modifier> _declaredModifiers=this.getDeclaredModifiers();  return _declaredModifiers.contains(N4Modifier.STATIC);}  }
class C{  public AssignableTypeFilter(Class<?> targetType){  super(true,true);  this.targetType=targetType;}  }
class C{  public static void updateViewLayoutParams(View view,int width,int height){  ViewGroup.LayoutParams layoutParams=view.getLayoutParams();  if (layoutParams == null || layoutParams.height != width || layoutParams.width != height) {    layoutParams=new AbsListView.LayoutParams(width,height);    view.setLayoutParams(layoutParams);  }}  }
class C{  public int bytesToIntLittleEndian(byte[] bytes){  return ((bytes[0] & 0xff)) | ((bytes[1] & 0xff) << 8) | ((bytes[2] & 0xff) << 16)| ((bytes[3] & 0xff)) << 24;}  }
class C{  public void testTotalTermFreq() throws Exception {  assumeFalse("PreFlex codec does not support collection-level term stats","Lucene3x".equals(Codec.getDefault().getName()));  clearIndex();  assertU(adoc("id","1","a_tdt","2009-08-31T12:10:10.123Z","b_tdt","2009-08-31T12:10:10.124Z"));  assertU(adoc("id","2","a_t","how now brown cow"));  assertU(commit());  assertU(adoc("id","3","a_t","brown cow"));  assertU(adoc("id","4"));  assertU(commit());  assertU(adoc("id","5"));  assertU(adoc("id","6","a_t","cow cow cow cow cow"));  assertU(commit());  assertQ(req("fl","*,score","q","{!func}totaltermfreq('a_t','cow')","fq","id:6"),"//float[@name='score']='7.0'");  assertQ(req("fl","*,score","q","{!func}ttf(a_t,'cow')","fq","id:6"),"//float[@name='score']='7.0'");  assertQ(req("fl","*,score","q","{!func}sumtotaltermfreq('a_t')","fq","id:6"),"//float[@name='score']='11.0'");  assertQ(req("fl","*,score","q","{!func}sttf(a_t)","fq","id:6"),"//float[@name='score']='11.0'");}  }
class C{  public void testSessionState(){  ClientSessionState state=new ClientSessionState(UUID.randomUUID());  assertEquals(state.setSessionId(1).getSessionId(),1);  assertEquals(state.getResponseIndex(),1);  assertEquals(state.getEventIndex(),1);  assertEquals(state.setState(Session.State.OPEN).getState(),Session.State.OPEN);  assertEquals(state.setCommandRequest(2).getCommandRequest(),2);  assertEquals(state.nextCommandRequest(),3);  assertEquals(state.getCommandRequest(),3);  assertEquals(state.setCommandResponse(3).getCommandResponse(),3);  assertEquals(state.setResponseIndex(4).getResponseIndex(),4);  assertEquals(state.setResponseIndex(3).getResponseIndex(),4);  assertEquals(state.setEventIndex(5).getEventIndex(),5);}  }
class C{  public boolean createXML(StreamResult result){  try {    DOMSource source=new DOMSource(getDocument());    TransformerFactory tFactory=TransformerFactory.newInstance();    Transformer transformer=tFactory.newTransformer();    transformer.setOutputProperty(OutputKeys.ENCODING,"UTF8");    transformer.setOutputProperty(OutputKeys.INDENT,"yes");    transformer.transform(source,result);  } catch (  Exception e) {    log.log(Level.SEVERE,"(StreamResult)",e);    return false;  }  return true;}  }
class C{  public boolean isTotal(){  String pt=getPAPeriodType();  if (pt == null)   return false;  return PAPERIODTYPE_Total.equals(pt);}  }
class C{  @Command(description="Sign some data") public void sign(@Param(name="keyId",description="Key ID") String keyId,@Param(name="data",description="Data to sign (<data1> <data2> ...)") String... data) throws Exception {  String algorithm="SHA512withRSA";  for (  String d : data) {    byte[] digest=calculateDigest(getDigestAlgorithmId(algorithm),d.getBytes(StandardCharsets.UTF_8));    SignResponse response=SignerClient.execute(new Sign(keyId,algorithm,digest));    System.out.println("Signature: " + Arrays.toString(response.getSignature()));  }}  }
class C{  public boolean contains(Object x){  return elems.contains(x);}  }
class C{  public static boolean isValid(String address){  return isValidIPv4(address) || isValidIPv6(address);}  }
class C{  private void validateBusinessObjectFormatDdlCollectionRequest(BusinessObjectFormatDdlCollectionRequest businessObjectFormatDdlCollectionRequest){  Assert.notNull(businessObjectFormatDdlCollectionRequest,"A business object format DDL collection request must be specified.");  Assert.isTrue(!CollectionUtils.isEmpty(businessObjectFormatDdlCollectionRequest.getBusinessObjectFormatDdlRequests()),"At least one business object format DDL request must be specified.");  for (  BusinessObjectFormatDdlRequest request : businessObjectFormatDdlCollectionRequest.getBusinessObjectFormatDdlRequests()) {    validateBusinessObjectFormatDdlRequest(request);  }}  }
class C{  protected void createPTRoutes(){  log.info("Creating pt routes...");  Counter counter=new Counter("route # ");  this.router=new PTLRFastAStarLandmarksSimpleRouting(this.network);  for (  TransitLine line : this.schedule.getTransitLines().values()) {    for (    TransitRoute route : line.getRoutes().values()) {      counter.incCounter();      assignRoute(route);    }  }  counter.printCounter();  log.info("  Add artificial links and nodes...");  for (  ArtificiallyConnectedStopFacility newFacility : artificiallyConnectedStopFacilities.values()) {    this.network.addNode(newFacility.myNode);  }  for (  ArtificiallyConnectedStopFacility newFacility : artificiallyConnectedStopFacilities.values()) {    this.network.addLink(newFacility.myLink);    for (    Link newLink : newFacility.getLinks()) {      this.network.addLink(newLink);    }  }  for (  Link newLink : artificiallyAddedLinks.values()) {    this.network.addLink(newLink);  }  log.info("  Add artificial links and nodes... done.");  log.info("Creating pt routes... done.");}  }
class C{  public static double geometricMean(int size,double sumOfLogarithms){  return Math.exp(sumOfLogarithms / size);}  }
class C{  public int protocol(){  return _myProtocol;}  }
class C{  public JmsMessageEntity createJmsMessageEntity(String jmsQueueName,String messageText){  JmsMessageEntity jmsMessageEntity=new JmsMessageEntity();  jmsMessageEntity.setJmsQueueName(jmsQueueName);  jmsMessageEntity.setMessageText(messageText);  return jmsMessageDao.saveAndRefresh(jmsMessageEntity);}  }
class C{  public StandardPieURLGenerator(String prefix){  this(prefix,"category");}  }
class C{  public String[] validBaudRates(){  return new String[]{"9,600 bps"};}  }
class C{  public static Resources open(InputStream resource,int dpi) throws IOException {  return new Resources(resource,dpi);}  }
class C{  private synchronized void handleServiceConnectionError(LicenseValidator validator){  mPolicy.processServerResponse(Policy.RETRY,null);  if (mPolicy.allowAccess()) {    validator.getCallback().allow(Policy.RETRY);  } else {    validator.getCallback().dontAllow(Policy.RETRY);  }}  }
class C{  public static CMSSignedData replaceCertificatesAndCRLs(CMSSignedData signedData,Store certificates,Store attrCerts,Store crls) throws CMSException {  CMSSignedData cms=new CMSSignedData(signedData);  ASN1Set certSet=null;  ASN1Set crlSet=null;  if (certificates != null || attrCerts != null) {    List certs=new ArrayList();    if (certificates != null) {      certs.addAll(CMSUtils.getCertificatesFromStore(certificates));    }    if (attrCerts != null) {      certs.addAll(CMSUtils.getAttributeCertificatesFromStore(attrCerts));    }    ASN1Set set=CMSUtils.createBerSetFromList(certs);    if (set.size() != 0) {      certSet=set;    }  }  if (crls != null) {    ASN1Set set=CMSUtils.createBerSetFromList(CMSUtils.getCRLsFromStore(crls));    if (set.size() != 0) {      crlSet=set;    }  }  cms.signedData=new SignedData(signedData.signedData.getDigestAlgorithms(),signedData.signedData.getEncapContentInfo(),certSet,crlSet,signedData.signedData.getSignerInfos());  cms.contentInfo=new ContentInfo(cms.contentInfo.getContentType(),cms.signedData);  return cms;}  }
class C{  public DrawerBuilder withAdapterWrapper(@NonNull RecyclerView.Adapter adapterWrapper){  if (mAdapter == null) {    throw new RuntimeException("this adapter has to be set in conjunction to a normal adapter which is used inside this wrapper adapter");  }  this.mAdapterWrapper=adapterWrapper;  return this;}  }
class C{  public boolean isPersistent(){  if (has("persistent")) {    return (getInt("persistent") == 1);  }  return false;}  }
class C{  public static void sort(double[] keys,int[] values,int start,int end){  quickSort(keys,values,start,end);}  }
class C{  @DSComment("no actions/not sensitive") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:57.820 -0500",hash_original_method="F96436C1C98CEDEFC582978CFED41496",hash_generated_method="A788A071F6C490FDA49F6AE24DF52612") public void addAnimation(Animation a){  mAnimations.add(a);  boolean noMatrix=(mFlags & PROPERTY_MORPH_MATRIX_MASK) == 0;  if (noMatrix && a.willChangeTransformationMatrix()) {    mFlags|=PROPERTY_MORPH_MATRIX_MASK;  }  boolean changeBounds=(mFlags & PROPERTY_CHANGE_BOUNDS_MASK) == 0;  if (changeBounds && a.willChangeTransformationMatrix()) {    mFlags|=PROPERTY_CHANGE_BOUNDS_MASK;  }  if ((mFlags & PROPERTY_DURATION_MASK) == PROPERTY_DURATION_MASK) {    mLastEnd=mStartOffset + mDuration;  } else {    if (mAnimations.size() == 1) {      mDuration=a.getStartOffset() + a.getDuration();      mLastEnd=mStartOffset + mDuration;    } else {      mLastEnd=Math.max(mLastEnd,a.getStartOffset() + a.getDuration());      mDuration=mLastEnd - mStartOffset;    }  }  mDirty=true;}  }
class C{  public double linearDistance(final PlanetModel planetModel,final GeoPoint v,final Membership... bounds){  return linearDistance(planetModel,v.x,v.y,v.z,bounds);}  }
class C{  private void readObject(){}  }
class C{  public final static byte[] toByteArray(char[] carr) throws UnsupportedEncodingException {  return new String(carr).getBytes(CharsetUtil.UTF_8);}  }
class C{  private void checkPropertyOnExplicitThis(PropertyExpression pe){  if (!currentScope.isInStaticContext())   return;  Expression object=pe.getObjectExpression();  if (!(object instanceof VariableExpression))   return;  VariableExpression ve=(VariableExpression)object;  if (!ve.getName().equals("this"))   return;  String name=pe.getPropertyAsString();  if (name == null || name.equals("class"))   return;  Variable member=findClassMember(currentClass,name);  if (member == null)   return;  checkVariableContextAccess(member,pe);}  }
class C{  public void subscribe(final String[] topic,final int[] qos,String invocationContext,String activityToken){  service.traceDebug(TAG,"subscribe({" + topic + "},"+ qos+ ",{"+ invocationContext+ "}, {"+ activityToken+ "}");  final Bundle resultBundle=new Bundle();  resultBundle.putString(MqttServiceConstants.CALLBACK_ACTION,MqttServiceConstants.SUBSCRIBE_ACTION);  resultBundle.putString(MqttServiceConstants.CALLBACK_ACTIVITY_TOKEN,activityToken);  resultBundle.putString(MqttServiceConstants.CALLBACK_INVOCATION_CONTEXT,invocationContext);  if ((myClient != null) && (myClient.isConnected())) {    IMqttActionListener listener=new MqttConnectionListener(resultBundle);    try {      myClient.subscribe(topic,qos,invocationContext,listener);    } catch (    Exception e) {      handleException(resultBundle,e);    }  } else {    resultBundle.putString(MqttServiceConstants.CALLBACK_ERROR_MESSAGE,NOT_CONNECTED);    service.traceError("subscribe",NOT_CONNECTED);    service.callbackToActivity(clientHandle,Status.ERROR,resultBundle);  }}  }
class C{  public byte lookup(Segment text,int offset,int length){  if (length == 0)   return Token.NULL;  Keyword k=map[getSegmentMapKey(text,offset,length)];  while (k != null) {    if (length != k.keyword.length) {      k=k.next;      continue;    }    if (SyntaxUtilities.regionMatches(ignoreCase,text,offset,k.keyword))     return k.id;    k=k.next;  }  return Token.NULL;}  }
class C{  public SimpleLinearRegression(int attIndex,double slope,double intercept){  m_attributeIndex=attIndex;  m_slope=slope;  m_intercept=intercept;}  }
class C{  protected void notifyRowSetChanged() throws SQLException {  checkforRowSetInterface();  if (listeners.isEmpty() == false) {    RowSetEvent event=new RowSetEvent((RowSet)this);    for (    RowSetListener rsl : listeners) {      rsl.rowSetChanged(event);    }  }}  }
class C{  public void testSimpleOverload() throws Exception {  OverloadBean bean;  try {    bean=new ObjectMapper().readValue("{ \"a\" : 13 }",OverloadBean.class);  } catch (  JsonMappingException e) {    fail("Did not expect an exception, got: " + e.getMessage());    return;  }  assertEquals("13",bean.a);}  }
class C{  private String createSizedString(final String[] strs){  StringBuilder sb=new StringBuilder();  for (int i=0; i < strs.length; i++) {    sb.append(strs[i]);    sb.append("\n");  }  return sb.toString();}  }
class C{  public static double area3D(Coordinate a,Coordinate b,Coordinate c){  double ux=b.x - a.x;  double uy=b.y - a.y;  double uz=b.z - a.z;  double vx=c.x - a.x;  double vy=c.y - a.y;  double vz=c.z - a.z;  double crossx=uy * vz - uz * vy;  double crossy=uz * vx - ux * vz;  double crossz=ux * vy - uy * vx;  double absSq=crossx * crossx + crossy * crossy + crossz * crossz;  double area3D=Math.sqrt(absSq) / 2;  return area3D;}  }
class C{  public boolean isAvailable(int requestedSize,int addrAlignment){  if (requestedSize > size) {    return false;  }  if (alignUp(addr,addrAlignment) + requestedSize <= addr + size) {    return true;  }  return false;}  }
class C{  public int size(){  return size;}  }
class C{  protected void onResize(final int width,final int height){  if (isAttached()) {    center();  }}  }
class C{  public void remove(int row){  Object init=get(row).getInitializeObject();  _indexes.remove(init);  super.remove(row);  remapIndexes(row);}  }
class C{  public CASHIntervalSplit(Relation<ParameterizationFunction> database,int minPts){  super();  this.database=database;  this.minPts=minPts;  this.f_minima=new HashMap<>();  this.f_maxima=new HashMap<>();}  }
class C{  @Override public void visitHorizontal(Divider<T> s){  for (  Node<T> n : s.previousNodes()) {    n.r.width+=(s.r.getX() - n.r.getMaxX());    n.r.width=Math.ceil(n.r.width);  }  for (  Node<T> n : s.nextNodes()) {    double delta=s.r.getMaxX() - n.r.getX();    n.r.x+=delta;    n.r.width=n.r.width - delta;  }  Rectangle2D.Double surfaceArea=surface.getArea();  for (  Divider<T> d : surface.getHorizontalDividers()) {    if (d.r.y > s.r.y && d.r.y < s.r.getMaxY() && (surface.getIsInit() || (d.r.x != s.r.getMaxX()) && (d.r.getMaxX() != s.r.x)) && ((d.r.x >= s.r.x - 2 && d.r.x <= s.r.getMaxX() + 2) || (d.r.getMaxX() >= s.r.x - 2 && d.r.getMaxX() < s.r.getMaxX() + 2))) {      if (d.r.x >= s.r.x - 2 && d.r.x <= s.r.getMaxX() + 2) {        d.r.x=s.r.getMaxX();        Node<T> distal=d.getMostDistalNode();        d.r.width=Math.min(surfaceArea.width,distal.r.getMaxX() - d.r.x);        s.addPerpendicularJoin(d,false);      } else       if (d.r.getMaxX() >= s.r.x - 2 && d.r.getMaxX() < s.r.getMaxX() + 2) {        d.r.width=Math.min(surfaceArea.width,s.r.x - d.r.x);        s.addPerpendicularJoin(d,true);      }    }  }  for (  Divider<T> d : surface.getHorizontalDividers()) {    d.r.x=d.getMostProximalNode().r.x;    d.r.width=Math.min(surfaceArea.width,d.getMostDistalNode().r.getMaxX() - d.r.x);  }}  }
class C{  private UpdateGlossaryCommand(){}  }
class C{  public void test_getInnerCause01_find_subclass(){  Throwable t=new IOException();  assertTrue(t == getInnerCause(t,Exception.class));}  }
class C{  public boolean fireRow(Session session,Row oldRow,Row newRow,boolean beforeAction,boolean rollback){  if (!rowBased || before != beforeAction) {    return false;  }  if (rollback && !onRollback) {    return false;  }  load();  Object[] oldList;  Object[] newList;  boolean fire=false;  if ((typeMask & Trigger.INSERT) != 0) {    if (oldRow == null && newRow != null) {      fire=true;    }  }  if ((typeMask & Trigger.UPDATE) != 0) {    if (oldRow != null && newRow != null) {      fire=true;    }  }  if ((typeMask & Trigger.DELETE) != 0) {    if (oldRow != null && newRow == null) {      fire=true;    }  }  if (!fire) {    return false;  }  oldList=convertToObjectList(oldRow);  newList=convertToObjectList(newRow);  Object[] newListBackup;  if (before && newList != null) {    newListBackup=new Object[newList.length];    System.arraycopy(newList,0,newListBackup,0,newList.length);  } else {    newListBackup=null;  }  Connection c2=session.createConnection(false);  boolean old=session.getAutoCommit();  boolean oldDisabled=session.setCommitOrRollbackDisabled(true);  Value identity=session.getLastScopeIdentity();  try {    session.setAutoCommit(false);    triggerCallback.fire(c2,oldList,newList);    if (newListBackup != null) {      for (int i=0; i < newList.length; i++) {        Object o=newList[i];        if (o != newListBackup[i]) {          Value v=DataType.convertToValue(session,o,Value.UNKNOWN);          newRow.setValue(i,v);        }      }    }  } catch (  Exception e) {    if (onRollback) {    } else {      throw DbException.convert(e);    }  } finally {    if (session.getLastTriggerIdentity() != null) {      session.setLastScopeIdentity(session.getLastTriggerIdentity());      session.setLastTriggerIdentity(null);    } else {      session.setLastScopeIdentity(identity);    }    session.setCommitOrRollbackDisabled(oldDisabled);    session.setAutoCommit(old);  }  return insteadOf;}  }
class C{  public JSONArray put(int index,boolean value) throws JSONException {  this.put(index,value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  public MyHashSetIterator(MyHashSet<E> set){  this.set=set;  list=setToList();}  }
class C{  public Parameter createParameter(){  ParameterImpl parameter=new ParameterImpl();  return parameter;}  }
class C{  public PowerVmAllocationPolicyMigrationLocalRegressionRobust(List<? extends Host> hostList,PowerVmSelectionPolicy vmSelectionPolicy,double safetyParameter,double schedulingInterval,PowerVmAllocationPolicyMigrationAbstract fallbackVmAllocationPolicy,double utilizationThreshold){  super(hostList,vmSelectionPolicy,safetyParameter,schedulingInterval,fallbackVmAllocationPolicy,utilizationThreshold);}  }
class C{  public Writer write(Writer writer) throws JSONException {  return this.write(writer,0,0);}  }
class C{  public static void showCommandLineOptions(TextUICommandLine commandLine){  commandLine.printUsage(System.out);}  }
class C{  private static byte[] addWavHeader(byte[] bytes) throws IOException {  ByteBuffer bufferWithHeader=ByteBuffer.allocate(bytes.length + 44);  bufferWithHeader.order(ByteOrder.LITTLE_ENDIAN);  bufferWithHeader.put("RIFF".getBytes());  bufferWithHeader.putInt(bytes.length + 36);  bufferWithHeader.put("WAVE".getBytes());  bufferWithHeader.put("fmt ".getBytes());  bufferWithHeader.putInt(16);  bufferWithHeader.putShort((short)1);  bufferWithHeader.putShort((short)1);  bufferWithHeader.putInt(16000);  bufferWithHeader.putInt(32000);  bufferWithHeader.putShort((short)2);  bufferWithHeader.putShort((short)16);  bufferWithHeader.put("data".getBytes());  bufferWithHeader.putInt(bytes.length);  bufferWithHeader.put(bytes);  return bufferWithHeader.array();}  }
class C{  private static boolean isJavaVersionMatch(String version,String versionPrefix){  if (version == null) {    return false;  }  return version.startsWith(versionPrefix);}  }
class C{  @SuppressWarnings("SpellCheckingInspection") public boolean connect(final String relayServer) throws RelayServerNotFoundException {  externalServer.setAddress(relayServer);  try {    final Socket relayMessageSocket=new Socket();    try {      relayMessageSocket.connect(new InetSocketAddress(relayServer,Application.MESSAGING_PORT),ONE_SECOND_DELAY);      sockets.add(relayMessageSocket);      Application.getLog().log("Connection opened: relayserver=" + externalServer.getAddress() + " localport="+ getInternalServer().getPort());      DataInputStream relayMsgInputStream=new DataInputStream(relayMessageSocket.getInputStream());      externalServer.setPort(Integer.parseInt(relayMsgInputStream.readLine()));      Application.getLog().log("Hosting on: " + getExternalServer());      if (gui != null)       gui.initializeGUI(relayServer,getExternalServer().getPort() + "",getInternalPort());      getApplicationState().getHeartbeatHandler().tryToMakeHeartbeatTo(getExternalServer().getAddress());      createClientHandler(relayMessageSocket,relayMsgInputStream);    } catch (    SocketException e) {      if (gui != null)       JOptionPane.showMessageDialog(gui.getFrame(),"Connection to relay server failed.\n" + "If this continues, go to Advanced Mode and connect to a different relay server.");      if (advancedGUI != null) {        JOptionPane.showMessageDialog(advancedGUI.getFrame(),"Connection to relay server failed.");        advancedGUI.triggerClosing();      }    }  } catch (  Exception e) {    if (gui != null)     JOptionPane.showMessageDialog(gui.getFrame(),"Connection to relay server failed.\n" + "If this continues, go to Advanced Mode and connect to a different relay server.");    if (advancedGUI != null) {      JOptionPane.showMessageDialog(advancedGUI.getFrame(),"Connection to relay server failed.");    }  }  return true;}  }
class C{  public DoubleSummary(){  this(0,Mode.Sum);}  }
class C{  public void unparsedEntityDecl(String name,String publicId,String systemId,String notationName) throws SAXException {  if (m_dtdHandler != null) {    m_dtdHandler.unparsedEntityDecl(name,publicId,systemId,notationName);  }}  }
class C{  protected serverObjects makePostParams(String args[]){  serverObjects post=new serverObjects();  if (args != null && args.length > 3) {    int maxWidth=Integer.parseInt(args[3]);    post.put("maxwidth",String.valueOf(maxWidth));  }  if (args != null && args.length > 4) {    int maxHeight=Integer.parseInt(args[4]);    post.put("maxheight",String.valueOf(maxHeight));  }  boolean quadratic=isQuadratic(args);  if (quadratic) {    post.put("quadratic","");  }  return post;}  }
class C{  @Override public void update(){  winDistance=Double.POSITIVE_INFINITY;  double physicalDistance;  Neuron winner=calculateWinner();  for (int i=0; i < getNeuronList().size(); i++) {    Neuron n=getNeuronList().get(i);    if (n == winner) {      n.setActivation(1);    } else {      n.setActivation(0);    }  }  for (int i=0; i < getNeuronList().size(); i++) {    Neuron neuron=getNeuronList().get(i);    physicalDistance=findPhysicalDistance(neuron,winner);    if (physicalDistance <= neighborhoodSize) {      for (      Synapse incoming : neuron.getFanIn()) {        val=incoming.getStrength() + alpha * (incoming.getSource().getActivation() - incoming.getStrength());        incoming.setStrength(val);      }    }  }  alpha=(alpha - alphaDecayRate * alpha);  if (neighborhoodSize - neighborhoodDecayAmount > 0) {    neighborhoodSize-=neighborhoodDecayAmount;  } else {    neighborhoodSize=0;  }}  }
class C{  public static long daysToMillis(double days){  return (long)(days * 1000 * 24* 60* 60);}  }
class C{  private <T>String create(URI url,String key,T obj) throws IsilonException {  ClientResponse resp=null;  try {    String body=new Gson().toJson(obj);    String id=null;    resp=_client.post(url,body);    if (resp.hasEntity()) {      JSONObject jObj=resp.getEntity(JSONObject.class);      sLogger.debug("create {} : Output from Server : ",key,jObj.toString());      if (jObj.has("id")) {        id=jObj.getString("id");      } else {        processErrorResponse("create",key,resp.getStatus(),jObj);      }    } else {      processErrorResponse("create",key,resp.getStatus(),null);    }    return id;  } catch (  IsilonException ie) {    throw ie;  }catch (  Exception e) {    String response=String.format("%1$s",(resp == null) ? "" : resp);    throw IsilonException.exceptions.createResourceFailedOnIsilonArray(key,response,e);  } finally {    if (resp != null) {      resp.close();    }  }}  }
class C{  public synchronized void add(Class t,EventListener l){  if (!t.isInstance(l)) {    throw new IllegalArgumentException("Listener " + l + " is not of type "+ t);  }  if (l == null) {    throw new IllegalArgumentException("Listener " + l + " is null");  }  if (listenerList == NULL_ARRAY) {    listenerList=new Object[]{t,l};  } else {    int i=listenerList.length;    Object[] tmp=new Object[i + 2];    System.arraycopy(listenerList,0,tmp,0,i);    tmp[i]=t;    tmp[i + 1]=l;    listenerList=tmp;  }}  }
class C{  public boolean isSameMethod(Method meth2){  return (!meth2.getSootMethod().equals(sootMethod));}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:39.022 -0500",hash_original_method="8FE766A630C587CF3D36C6776BEC57AB",hash_generated_method="8FE766A630C587CF3D36C6776BEC57AB") BigInteger(int sign,int numberLength,int[] digits){  setJavaRepresentation(sign,numberLength,digits);}  }
class C{  public BufferedRandomAccessFile(String name,String mode) throws IOException {  super(name,mode);  this.init(0);}  }
class C{  private void pruneIfNeeded(int neededSpace){  if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes) {    return;  }  if (VolleyLog.DEBUG) {    VolleyLog.v("Pruning old cache entries.");  }  long before=mTotalSize;  int prunedFiles=0;  long startTime=SystemClock.elapsedRealtime();  Iterator<Map.Entry<String,CacheHeader>> iterator=mEntries.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<String,CacheHeader> entry=iterator.next();    CacheHeader e=entry.getValue();    boolean deleted=getFileForKey(e.key).delete();    if (deleted) {      mTotalSize-=e.size;    } else {      VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",e.key,getFilenameForKey(e.key));    }    iterator.remove();    prunedFiles++;    if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes * HYSTERESIS_FACTOR) {      break;    }  }  if (VolleyLog.DEBUG) {    VolleyLog.v("pruned %d files, %d bytes, %d ms",prunedFiles,(mTotalSize - before),SystemClock.elapsedRealtime() - startTime);  }}  }
class C{  public static ChildNode createTextEditGroupNode(TextEditChangeNode parent,TextEditBasedChangeGroup changeGroup){  return new TextEditGroupNode(parent,changeGroup);}  }
class C{  public CEdgePanel(final ZyGraphViewSettings settings){  super(new GridLayout(4,1));  Preconditions.checkNotNull(settings,"IE01585: Settings argument can not be null");  setBorder(new TitledBorder("Edge Settings"));  final String[] modes=new String[]{com.google.security.zynamics.zylib.resources.Constants.HIDE_NEVER,com.google.security.zynamics.zylib.resources.Constants.HIDE_ALWAYS,com.google.security.zynamics.zylib.resources.Constants.THRESHOLD};  final int selectionIndex=settings.getEdgeSettings().getEdgeHidingMode().ordinal();  CSettingsPanelBuilder.addComboBox(this,m_cbDisplayMultiEdgesAsOne,"Display multiple edges as one" + ":","If enabled, only one edge between two nodes is shown even if more than one edge " + "connects the two nodes.\nThis is especially useful for cutting down on the " + "number of edges in callgraphs.",settings.getEdgeSettings().getDisplayMultipleEdgesAsOne());  CSettingsPanelBuilder.addComboBox(this,m_cbDrawSelectedBends,"Draw Selected Bends" + ":","If enabled, corners of selected edges are highlighted.",settings.getEdgeSettings().getDrawSelectedBends());  CSettingsPanelBuilder.addComboBox(this,m_cbEdgeHidingMode,"Hide Edges when zoomed out" + ":","Specifies under what circumstances edges are not drawn when the graph is zoomed out.",modes,selectionIndex);  CSettingsPanelBuilder.addTextField(this,m_tfEdgeHidingThreshold,"Edge Hiding Threshold when zoomed out" + ":","If threshold mode is enabled, edges are automatically hidden when more than the " + "specified number of edges are visible.",String.format("%d",settings.getEdgeSettings().getEdgeHidingThreshold()));}  }
class C{  @Override public void clearWarnings() throws SQLException {  try {    debugCodeCall("clearWarnings");    checkClosed();  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void debug(byte[] bytes){  if (DEBUG) {    try {      new sun.misc.HexDumpEncoder().encodeBuffer(bytes,System.out);    } catch (    IOException ioe) {    }  }}  }
class C{  public static void processBomComponent(String mrpId,GenericValue product,BigDecimal eventQuantity,Timestamp startDate,Map<String,Object> routingTaskStartDate,List<BOMNode> listComponent){  Delegator delegator=product.getDelegator();  if (UtilValidate.isNotEmpty(listComponent)) {    for (    BOMNode node : listComponent) {      GenericValue productComponent=node.getProductAssoc();      String routingTask=node.getProductAssoc().getString("routingWorkEffortId");      Timestamp eventDate=(routingTask == null || !routingTaskStartDate.containsKey(routingTask)) ? startDate : (Timestamp)routingTaskStartDate.get(routingTask);      if (EntityUtil.isValueActive(productComponent,eventDate)) {        Map<String,Object> parameters=UtilMisc.<String,Object>toMap("productId",node.getProduct().getString("productId"));        parameters.put("mrpId",mrpId);        parameters.put("eventDate",eventDate);        parameters.put("mrpEventTypeId","MRP_REQUIREMENT");        BigDecimal componentEventQuantity=node.getQuantity();        try {          InventoryEventPlannedServices.createOrUpdateMrpEvent(parameters,componentEventQuantity.negate(),null,product.get("productId") + ": " + eventDate,false,delegator);        } catch (        GenericEntityException e) {          Debug.logError("Error : findOne(\"MrpEvent\", parameters) =" + parameters + "--"+ e.getMessage(),module);          logMrpError(mrpId,node.getProduct().getString("productId"),"Unable to create event (processBomComponent)",delegator);        }      }    }  }}  }
class C{  public void animateX(int durationMillis,Easing.EasingOption easing){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorX=ObjectAnimator.ofFloat(this,"phaseX",0f,1f);  animatorX.setInterpolator(Easing.getEasingFunctionFromOption(easing));  animatorX.setDuration(durationMillis);  animatorX.addUpdateListener(mListener);  animatorX.start();}  }
class C{  public long size(){  return size;}  }
class C{  public static void doubleBenchmarkPrimitive(int runs,int rows,int columns,boolean print){  cern.colt.Timer timer1=new cern.colt.Timer();  cern.colt.Timer timer2=new cern.colt.Timer();  cern.colt.Timer timer3=new cern.colt.Timer();  cern.colt.Timer emptyLoop=new cern.colt.Timer();  cern.colt.Timer emptyLoop2=new cern.colt.Timer();  emptyLoop.start();  int dummy=0;  for (int i=0; i < runs; i++) {    for (int column=0; column < columns; column++) {      for (int row=0; row < rows; row++) {        dummy++;      }    }  }  emptyLoop.stop();  System.out.println(dummy);  emptyLoop2.start();  dummy=3;  double dummy2=0;  for (int i=0; i < runs; i++) {    for (int column=0; column < columns; column++) {      for (int row=0; row < rows; row++) {        dummy2+=dummy;      }    }  }  emptyLoop2.stop();  System.out.println(dummy2);  long before=Runtime.getRuntime().freeMemory();  long size=(((long)rows) * columns) * runs;  double[][] matrix=new double[rows][columns];  System.out.println("\nNow filling...");  for (int i=0; i < runs; i++) {    timer1.start();    int value=0;    for (int column=0; column < columns; column++) {      for (int row=0; row < rows; row++) {        matrix[row][column]=value++;      }    }    timer1.stop();  }  timer1.display();  timer1.minus(emptyLoop).display();  System.out.println(size / timer1.minus(emptyLoop).seconds() + " elements / sec");  Runtime.getRuntime().gc();  try {    Thread.currentThread().sleep(1000);  } catch (  InterruptedException exc) {  }  ;  long after=Runtime.getRuntime().freeMemory();  System.out.println("KB needed=" + (before - after) / 1024);  if (print) {    DenseDoubleMatrix2D m=new DenseDoubleMatrix2D(rows,columns);    m.assign(matrix);    System.out.println(m);  }  System.out.println("\nNow reading...");  timer2.start();  double element=0;  for (int i=0; i < runs; i++) {    for (int column=0; column < columns; column++) {      for (int row=0; row < rows; row++) {        element+=matrix[row][column];      }    }  }  timer2.stop().display();  timer2.minus(emptyLoop2).display();  System.out.println(size / timer2.minus(emptyLoop2).seconds() + " elements / sec");  if (print) {    DenseDoubleMatrix2D m=new DenseDoubleMatrix2D(rows,columns);    m.assign(matrix);    System.out.println(m);  }  System.out.println(element);  System.out.println("\nNow removing...");  before=Runtime.getRuntime().freeMemory();  for (int i=0; i < runs; i++) {    timer3.start();    for (int column=0; column < columns; column++) {      for (int row=0; row < rows; row++) {        matrix[row][column]=0;      }    }    timer3.stop();  }  timer3.display();  timer3.minus(emptyLoop).display();  System.out.println(size / timer3.minus(emptyLoop).seconds() + " elements / sec");  Runtime.getRuntime().gc();  try {    Thread.currentThread().sleep(1000);  } catch (  InterruptedException exc) {  }  ;  after=Runtime.getRuntime().freeMemory();  System.out.println("KB needed=" + (before - after) / 1024);  System.out.println("KB free=" + (after / 1024));  if (print) {    DenseDoubleMatrix2D m=new DenseDoubleMatrix2D(rows,columns);    m.assign(matrix);    System.out.println(m);  }  System.out.println("bye bye.");}  }
class C{  public int lookupGroupExpr(SqlNode expr){  for (int i=0; i < groupExprs.size(); i++) {    SqlNode groupExpr=groupExprs.get(i);    if (expr.equalsDeep(groupExpr,Litmus.IGNORE)) {      return i;    }  }  return -1;}  }
class C{  public static Resource toResourceExistingParent(PageContext pc,String destination) throws ExpressionException {  return toResourceExistingParent(pc,destination,pc.getConfig().allowRealPath());}  }
class C{  public boolean equals(boolean b){  return value == b;}  }
class C{  public static OrdinalMap build(Object owner,TermsEnum subs[],long[] weights,float acceptableOverheadRatio) throws IOException {  if (subs.length != weights.length) {    throw new IllegalArgumentException("subs and weights must have the same length");  }  final SegmentMap segmentMap=new SegmentMap(weights);  return new OrdinalMap(owner,subs,segmentMap,acceptableOverheadRatio);}  }
class C{  public boolean isDatagramMode(){  return isDatagramMode(esmClass);}  }
class C{  public static long countLines(final File selectedFile) throws SpyException {  try {    long count=0;    BufferedReader in=new BufferedReader(new FileReader(selectedFile));    while ((in.readLine()) != null) {      count++;    }    in.close();    return count;  } catch (  IOException e) {    throw new SpyException("Can't open the file at " + selectedFile.getAbsolutePath(),e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.378 -0500",hash_original_method="540FA090BA73BF75B1FC7EFF0B0F30DC",hash_generated_method="D9F8EA265EE06DE480D47EA486025147") public static ParcelFileDescriptor blobFileDescriptorForQuery(SQLiteDatabase db,String query,String[] selectionArgs){  SQLiteStatement prog=db.compileStatement(query);  try {    return blobFileDescriptorForQuery(prog,selectionArgs);  }  finally {    prog.close();  }}  }
class C{  public void transferNodesAndEdges(Graph graph) throws IllegalArgumentException {  if (graph == null) {    throw new NullPointerException("No graph was provided.");  }  for (  Node node : graph.getNodes()) {    if (!addNode(node)) {      throw new IllegalArgumentException();    }  }  for (  Edge edge : graph.getEdges()) {    if (!addEdge(edge)) {      throw new IllegalArgumentException();    }  }  ancestors=null;}  }
class C{  static void toast(Context context,CharSequence text,int duration){  Toast toast=Toast.makeText(context,text,duration);  toast.show();}  }
class C{  public static byte[] toByteArray(final Reader input,final String encoding) throws IOException {  return IOUtils.toByteArray(input,Charsets.toCharset(encoding));}  }
class C{  private static int checkTypeSignature(final String signature,int pos){switch (getChar(signature,pos)) {case 'Z':case 'C':case 'B':case 'S':case 'I':case 'F':case 'J':case 'D':    return pos + 1;default :  return checkFieldTypeSignature(signature,pos);}}  }
class C{  public static boolean checkALCError(ALCdevice alcDevice){  return checkALCError(alcDevice,"");}  }
class C{  public ByteSparseArrayDataRow(){  this(0);}  }
class C{  public void message(CanMessage m){}  }
class C{  private void putInMultiplePartitionedRegion(VM vm0,VM vm1,VM vm2,VM vm3,int startIndexForRegion,int endIndexForRegion) throws Throwable {  int AsyncInvocationArrSize=4;  AsyncInvocation[] async=new AsyncInvocation[AsyncInvocationArrSize];  int delta=(endIndexForKey - startIndexForKey) / 4;  async[0]=vm0.invokeAsync(putInMultiplePartitionRegion(prPrefix,startIndexForKey,startIndexForKey + 1 * delta,startIndexForRegion,endIndexForRegion));  async[1]=vm1.invokeAsync(putInMultiplePartitionRegion(prPrefix,startIndexForKey + 1 * delta,startIndexForKey + 2 * delta,startIndexForRegion,endIndexForRegion));  async[2]=vm2.invokeAsync(putInMultiplePartitionRegion(prPrefix,startIndexForKey + 2 * delta,startIndexForKey + 3 * delta,startIndexForRegion,endIndexForRegion));  async[3]=vm3.invokeAsync(putInMultiplePartitionRegion(prPrefix,startIndexForKey + 3 * delta,endIndexForKey,startIndexForRegion,endIndexForRegion));  for (int count=0; count < AsyncInvocationArrSize; count++) {    ThreadUtils.join(async[count],30 * 1000);  }  for (int count=0; count < AsyncInvocationArrSize; count++) {    if (async[count].exceptionOccurred()) {      Assert.fail("exception during " + count,async[count].getException());    }  }}  }
class C{  public Object[] toArray(Object[] a){  throw new UnsupportedOperationException("toArray(Object[] a) not yet supported");}  }
class C{  public T caseUnicodeEscapeSequence(UnicodeEscapeSequence object){  return null;}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public void analyzeResourceClass(final String className,final ClassResult classResult){  unhandledClasses.add(Pair.of(className,classResult));}  }
class C{  public Category_Updater idBetween(long idA,long idB){  return whereBetween(schema.id,idA,idB);}  }
class C{  public void appendStart(final StringBuffer buffer,final Object object){  if (object != null) {    appendClassName(buffer,object);    appendIdentityHashCode(buffer,object);    appendContentStart(buffer);    if (fieldSeparatorAtStart) {      appendFieldSeparator(buffer);    }  }}  }
class C{  public Device(DeviceManagerImpl deviceManager,Long deviceKey,String dhcpClientName,Collection<AttachmentPoint> oldAPs,Collection<AttachmentPoint> attachmentPoints,Collection<Entity> entities,IEntityClass entityClass){  this.deviceManager=deviceManager;  this.deviceKey=deviceKey;  this.dhcpClientName=dhcpClientName;  this.entities=entities.toArray(new Entity[entities.size()]);  this.oldAPs=null;  this.attachmentPoints=null;  if (oldAPs != null) {    this.oldAPs=new ArrayList<AttachmentPoint>(oldAPs);  }  if (attachmentPoints != null) {    this.attachmentPoints=new ArrayList<AttachmentPoint>(attachmentPoints);  }  this.macAddressString=this.entities[0].getMacAddress().toString();  this.entityClass=entityClass;  Arrays.sort(this.entities);  vlanIds=computeVlandIds();}  }
class C{  public static boolean checkUnManagedResourceIsRecoverPointEnabled(UnManagedVolume unManagedVolume){  StringMap unManagedVolumeCharacteristics=unManagedVolume.getVolumeCharacterstics();  String isRecoverPointEnabled=unManagedVolumeCharacteristics.get(SupportedVolumeCharacterstics.IS_RECOVERPOINT_ENABLED.toString());  if (null != isRecoverPointEnabled && Boolean.parseBoolean(isRecoverPointEnabled)) {    return true;  }  return false;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.AFTER_CODE___OPERATION_NAME_1:    return OPERATION_NAME_1_EDEFAULT == null ? operationName_1 != null : !OPERATION_NAME_1_EDEFAULT.equals(operationName_1);case UmplePackage.AFTER_CODE___ANONYMOUS_AFTER_CODE_11:  return anonymous_afterCode_1_1 != null && !anonymous_afterCode_1_1.isEmpty();case UmplePackage.AFTER_CODE___CODE_1:return CODE_1_EDEFAULT == null ? code_1 != null : !CODE_1_EDEFAULT.equals(code_1);case UmplePackage.AFTER_CODE___ANONYMOUS_AFTER_CODE_21:return anonymous_afterCode_2_1 != null && !anonymous_afterCode_2_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public IgfsPath(URI uri){  A.notNull(uri,"uri");  path=normalizePath(uri.getPath());}  }
class C{  public void clip(Shape s){  s=transformShape(s);  if (usrClip != null) {    s=intersectShapes(usrClip,s,true,true);  }  usrClip=s;  validateCompClip();}  }
class C{  public static byte[] decodeWebSafe(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,WEBSAFE_DECODABET);}  }
class C{  protected synchronized Class loadClass(String name,boolean resolve) throws ClassNotFoundException {  Class c=findLoadedClass(name);  if (c == null)   c=findClass(name);  if (c == null)   throw new ClassNotFoundException(name);  if (resolve)   resolveClass(c);  return c;}  }
class C{  public SelectItemGroup(String label,String description,boolean disabled,SelectItem selectItems[]){  super("",label,description,disabled);  setSelectItems(selectItems);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (varsPerInd <= 0) {    throw new IllegalStateException();  }  if (mlag <= 0) {    throw new IllegalStateException();  }}  }
class C{  protected void paintImage(Graphics g,int x,int y){  if (bgImage != null)   g.drawImage(bgImage,x,y,null);}  }
class C{  public TriggerOption accumulatingAndRetractingFiredPanes(){  this.accumulationMode=AccumulationMode.ACCUMULATING_AND_RETRACTING;  return this;}  }
class C{  private static boolean isFormatPlayable(Format format,String[] allowedContainerMimeTypes,boolean filterHdFormats,boolean secureDecoder) throws DecoderQueryException {  if (allowedContainerMimeTypes != null && !Util.contains(allowedContainerMimeTypes,format.mimeType)) {    return false;  }  if (filterHdFormats && (format.width >= 1280 || format.height >= 720)) {    return false;  }  if (format.width > 0 && format.height > 0) {    if (Util.SDK_INT >= 21) {      String videoMediaMimeType=MimeTypes.getVideoMediaMimeType(format.codecs);      if (MimeTypes.VIDEO_UNKNOWN.equals(videoMediaMimeType)) {        videoMediaMimeType=MimeTypes.VIDEO_H264;      }      if (format.frameRate > 0) {        return MediaCodecUtil.isSizeAndRateSupportedV21(videoMediaMimeType,secureDecoder,format.width,format.height,format.frameRate);      } else {        return MediaCodecUtil.isSizeSupportedV21(videoMediaMimeType,secureDecoder,format.width,format.height);      }    }    if (format.width * format.height > MediaCodecUtil.maxH264DecodableFrameSize()) {      return false;    }  }  return true;}  }
class C{  public void closeFile(boolean showCancel){  if (getCurrentIndex() == -1) {    return;  }  if (!saveChanges(showCancel)) {    return;  }  tabbedPane.removeTabAt(getCurrentIndex());  updateFrameTitle();  System.gc();}  }
class C{  @NonNull public IconDrawable actionBarSize(@NonNull Context context){  return sizeDp(context,ANDROID_ACTIONBAR_ICON_SIZE_DP);}  }
class C{  @Override public boolean supportsDataManipulationTransactionsOnly(){  debugCodeCall("supportsDataManipulationTransactionsOnly");  return true;}  }
class C{  public TreeCopier(TreeMaker M){  this.M=M;}  }
class C{  @Override public List<NamedRelatedResourceRep> list(){  ComputeSystemList response=client.get(ComputeSystemList.class,baseUrl);  return ResourceUtils.defaultList(response.getComputeSystems());}  }
class C{  public XNetLight(XNetTrafficController tc,XNetLightManager lm,String systemName){  super(systemName);  this.tc=tc;  this.lm=lm;  initializeLight(systemName);}  }
class C{  public SnapshotException(String message,Throwable cause){  super(message,cause);}  }
class C{  protected Resolution handleUnknownAccount(UnknownAccountException e){  logger.debug("Unkown user logged in with OpenID",e);  return signUp();}  }
class C{  void refreshFinish(int width,int height){  mWXSDKInstance.onRefreshSuccess(width,height);}  }
class C{  public void draw(GL10 gl,float x,float y,int labelID){  checkState(STATE_DRAWING,STATE_DRAWING);  gl.glPushMatrix();  float snappedX=(float)Math.floor(x);  float snappedY=(float)Math.floor(y);  gl.glTranslatef(snappedX,snappedY,0.0f);  Label label=mLabels.get(labelID);  gl.glEnable(GL10.GL_TEXTURE_2D);  ((GL11)gl).glTexParameteriv(GL10.GL_TEXTURE_2D,GL11Ext.GL_TEXTURE_CROP_RECT_OES,label.mCrop,0);  ((GL11Ext)gl).glDrawTexiOES((int)snappedX,(int)snappedY,0,(int)label.width,(int)label.height);  gl.glPopMatrix();}  }
class C{  @Override public boolean isSubtype(AnnotationMirror rhs,AnnotationMirror lhs){  if (AnnotationUtils.areSameByClass(lhs,UnknownVal.class) || AnnotationUtils.areSameByClass(rhs,BottomVal.class)) {    return true;  } else   if (AnnotationUtils.areSameByClass(rhs,UnknownVal.class) || AnnotationUtils.areSameByClass(lhs,BottomVal.class)) {    return false;  } else   if (AnnotationUtils.areSameIgnoringValues(lhs,rhs)) {    List<Object> lhsValues=AnnotationUtils.getElementValueArray(lhs,"value",Object.class,true);    List<Object> rhsValues=AnnotationUtils.getElementValueArray(rhs,"value",Object.class,true);    return lhsValues.containsAll(rhsValues);  } else   if (AnnotationUtils.areSameByClass(lhs,DoubleVal.class) && AnnotationUtils.areSameByClass(rhs,IntVal.class)) {    List<Long> rhsValues;    rhsValues=AnnotationUtils.getElementValueArray(rhs,"value",Long.class,true);    List<Double> lhsValues=AnnotationUtils.getElementValueArray(lhs,"value",Double.class,true);    boolean same=false;    for (    Long rhsLong : rhsValues) {      for (      Double lhsDbl : lhsValues) {        if (lhsDbl.doubleValue() == rhsLong.doubleValue()) {          same=true;          break;        }      }      if (!same) {        return false;      }    }    return same;  }  return false;}  }
class C{  public NSEC3PARAMRecord(Name name,int dclass,long ttl,int hashAlg,int flags,int iterations,byte[] salt){  super(name,Type.NSEC3PARAM,dclass,ttl);  this.hashAlg=checkU8("hashAlg",hashAlg);  this.flags=checkU8("flags",flags);  this.iterations=checkU16("iterations",iterations);  if (salt != null) {    if (salt.length > 255)     throw new IllegalArgumentException("Invalid salt " + "length");    if (salt.length > 0) {      this.salt=new byte[salt.length];      System.arraycopy(salt,0,this.salt,0,salt.length);    }  }}  }
class C{  @Override public void drawString(String str,int x,int y){  drawString(str,(float)x,(float)y);}  }
class C{  private static int mulAndCheck(final int x,final int y){  final long m=(long)x * (long)y;  if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {    throw new ArithmeticException("overflow: mul");  }  return (int)m;}  }
class C{  private void generateTagHandlerAttributes(TagInfo tagInfo) throws JasperException {  if (tagInfo.hasDynamicAttributes()) {    out.printil("private java.util.HashMap _jspx_dynamic_attrs = new java.util.HashMap();");  }  TagAttributeInfo[] attrInfos=tagInfo.getAttributes();  for (int i=0; i < attrInfos.length; i++) {    out.printin("private ");    if (attrInfos[i].isFragment()) {      out.print("javax.servlet.jsp.tagext.JspFragment ");    } else {      out.print(JspUtil.toJavaSourceType(attrInfos[i].getTypeName()));      out.print(" ");    }    out.print(attrInfos[i].getName());    out.println(";");  }  out.println();  for (int i=0; i < attrInfos.length; i++) {    out.printin("public ");    if (attrInfos[i].isFragment()) {      out.print("javax.servlet.jsp.tagext.JspFragment ");    } else {      out.print(JspUtil.toJavaSourceType(attrInfos[i].getTypeName()));      out.print(" ");    }    out.print(toGetterMethod(attrInfos[i].getName()));    out.println(" {");    out.pushIndent();    out.printin("return this.");    out.print(attrInfos[i].getName());    out.println(";");    out.popIndent();    out.printil("}");    out.println();    out.printin("public void ");    out.print(toSetterMethodName(attrInfos[i].getName()));    if (attrInfos[i].isFragment()) {      out.print("(javax.servlet.jsp.tagext.JspFragment ");    } else {      out.print("(");      out.print(JspUtil.toJavaSourceType(attrInfos[i].getTypeName()));      out.print(" ");    }    out.print(attrInfos[i].getName());    out.println(") {");    out.pushIndent();    out.printin("this.");    out.print(attrInfos[i].getName());    out.print(" = ");    out.print(attrInfos[i].getName());    out.println(";");    out.popIndent();    out.printil("}");    out.println();  }}  }
class C{  public void removeKey(){  if (UltraCosmeticsData.get().usingFileStorage())   SettingsManager.getData(getPlayer()).set("Keys",getKeys() - 1); else   ultraCosmetics.getMySqlConnectionManager().getSqlUtils().removeKey(getMySqlIndex());}  }
class C{  protected double defaultMaxRadius(){  return Math.sqrt(2.0);}  }
class C{  public final void loadDefaultInterproceduralDatabases(){  if (IGNORE_BUILTIN_MODELS) {    return;  }  loadPropertyDatabaseFromResource(getUnconditionalDerefParamDatabase(),UNCONDITIONAL_DEREF_DB_RESOURCE,"unconditional param deref database");  loadPropertyDatabaseFromResource(getReturnValueNullnessPropertyDatabase(),NONNULL_RETURN_DB_RESOURCE,"nonnull return db database");}  }
class C{  @After public void tearDown() throws Exception {  TradestrategyTest.clearDBData();}  }
class C{  public double[] computeLocalEntropy1UsingPreviousObservations(double[][] states){  return computeLocalEntropyFromPreviousObservations(states,1,false);}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (newRecord) {    MRole[] roles=MRole.getOf(getCtx(),"IsManual='N'");    for (int i=0; i < roles.length; i++) {      MWindowAccess wa=new MWindowAccess(this,roles[i].getAD_Role_ID());      wa.saveEx();    }  } else   if (is_ValueChanged("IsActive") || is_ValueChanged("Name") || is_ValueChanged("Description")|| is_ValueChanged("Help")) {    MMenu[] menues=MMenu.get(getCtx(),"AD_Window_ID=" + getAD_Window_ID(),get_TrxName());    for (int i=0; i < menues.length; i++) {      menues[i].setName(getName());      menues[i].setDescription(getDescription());      menues[i].setIsActive(isActive());      menues[i].saveEx();    }    MWFNode[] nodes=getWFNodes(getCtx(),"AD_Window_ID=" + getAD_Window_ID(),get_TrxName());    for (int i=0; i < nodes.length; i++) {      boolean changed=false;      if (nodes[i].isActive() != isActive()) {        nodes[i].setIsActive(isActive());        changed=true;      }      if (nodes[i].isCentrallyMaintained()) {        nodes[i].setName(getName());        nodes[i].setDescription(getDescription());        nodes[i].setHelp(getHelp());        changed=true;      }      if (changed)       nodes[i].saveEx();    }  }  return success;}  }
class C{  public IElementType perlAdvance() throws IOException {  CharSequence buffer=getBuffer();  int tokenStart=getTokenEnd();  int bufferEnd=getBufferEnd();  if (bufferEnd == 0 || tokenStart >= bufferEnd) {    return super.perlAdvance();  } else {    int currentState=yystate();    char currentChar=buffer.charAt(tokenStart);    if (waitingHereDoc() && (tokenStart == 0 || currentChar == '\n')) {      return captureHereDoc(false);    } else     if (currentState == LEX_FORMAT_WAITING && (tokenStart == 0 || buffer.charAt(tokenStart - 1) == '\n')) {      IElementType tokenType=captureFormat();      if (tokenType != null) {        return tokenType;      }    } else     if (isOpeningQuoteFor(currentState,currentChar,LEX_QUOTE_LIKE_OPENER_Q,LEX_QUOTE_LIKE_OPENER_QQ,LEX_QUOTE_LIKE_OPENER_QX,LEX_QUOTE_LIKE_OPENER_QW)) {      return captureString();    } else     if (isOpeningQuoteFor(currentState,currentChar,LEX_REGEX_OPENER)) {      return parseRegex(tokenStart);    } else     if (isOpeningQuoteFor(currentState,currentChar,LEX_TRANS_OPENER)) {      return parseTr();    } else     if (currentChar == '\'') {      return captureString(LEX_QUOTE_LIKE_OPENER_Q);    } else     if (currentChar == '"') {      return captureString(LEX_QUOTE_LIKE_OPENER_QQ);    } else     if (currentChar == '`') {      return captureString(LEX_QUOTE_LIKE_OPENER_QX);    } else     if (currentChar == '=' && (tokenStart == 0 || buffer.charAt(tokenStart - 1) == '\n') && bufferEnd > tokenStart + 1 && Character.isLetter(buffer.charAt(tokenStart + 1))) {      return capturePodBlock();    } else     if (((tokenStart < bufferEnd - STRING_DATA_LENGTH) && StringUtil.equals(buffer.subSequence(tokenStart,tokenStart + STRING_DATA_LENGTH),STRING_DATA)) || ((tokenStart < bufferEnd - STRING_END_LENGTH) && StringUtil.equals(buffer.subSequence(tokenStart,tokenStart + STRING_END_LENGTH),STRING_END))) {      return parseEndBlock(tokenStart,bufferEnd);    } else     if (currentChar == '#') {      int currentPosition=tokenStart;      setTokenStart(tokenStart);      while (currentPosition < bufferEnd && !isLineCommentEnd(currentPosition)) {        currentPosition++;      }      setTokenEnd(currentPosition);      if (tokenStart + 1 < bufferEnd && buffer.charAt(tokenStart + 1) == '@') {        return COMMENT_ANNOTATION;      }      return COMMENT_LINE;    }  }  return super.perlAdvance();}  }
class C{  protected static ICCColorSpaceExt extractColorSpace(Element element,BridgeContext ctx){  String colorProfileProperty=CSSUtilities.getComputedStyle(element,SVGCSSEngine.COLOR_PROFILE_INDEX).getStringValue();  ICCColorSpaceExt colorSpace=null;  if (CSS_SRGB_VALUE.equalsIgnoreCase(colorProfileProperty)) {    colorSpace=new ICCColorSpaceExt(ICC_Profile.getInstance(ColorSpace.CS_sRGB),ICCColorSpaceExt.AUTO);  } else   if (!CSS_AUTO_VALUE.equalsIgnoreCase(colorProfileProperty) && !"".equalsIgnoreCase(colorProfileProperty)) {    SVGColorProfileElementBridge profileBridge=(SVGColorProfileElementBridge)ctx.getBridge(SVG_NAMESPACE_URI,SVG_COLOR_PROFILE_TAG);    if (profileBridge != null) {      colorSpace=profileBridge.createICCColorSpaceExt(ctx,element,colorProfileProperty);    }  }  return colorSpace;}  }
class C{  public CharSequence[] decompose(CharSequence cmd){  int parts=0;  for (int i=0; 0 <= i && i < cmd.length(); ) {    int next=dashEven(cmd,i);    if (i == next) {      parts++;      i=next + 2;    } else {      parts++;      i=next;    }  }  CharSequence part[]=new CharSequence[parts];  int x=0;  for (int i=0; 0 <= i && i < cmd.length(); ) {    int next=dashEven(cmd,i);    if (i == next) {      part[x++]=cmd.subSequence(i,i + 2);      i=next + 2;    } else {      part[x++]=(next < 0) ? cmd.subSequence(i,cmd.length()) : cmd.subSequence(i,next);      i=next;    }  }  return part;}  }
class C{  public static Object invoke(Object obj,String methodName,Class<?>[] parameterTypes,Object[] args){  Object value=null;  try {    Method method=obj.getClass().getMethod(methodName,parameterTypes);    method.setAccessible(true);    value=method.invoke(obj,args);  } catch (  Exception e) {    JUnsafe.throwException(e);  }  return value;}  }
class C{  protected String loadDocumentDetails(){  setC_Currency_ID(NO_CURRENCY);  m_cc=(MPPCostCollector)getPO();  setDateDoc(m_cc.getMovementDate());  setDateAcct(m_cc.getMovementDate());  m_line=new DocLine_CostCollector(m_cc,this);  m_line.setQty(m_cc.getMovementQty(),false);  if (m_line.getM_Product_ID() == 0)   log.warning(m_line.toString() + " - No Product");  log.fine(m_line.toString());  m_routingService=RoutingServiceFactory.get().getRoutingService(m_cc.getAD_Client_ID());  return null;}  }
class C{  public void testNextInt(){  SplittableRandom sr=new SplittableRandom();  int f=sr.nextInt();  int i=0;  while (i < NCALLS && sr.nextInt() == f)   ++i;  assertTrue(i < NCALLS);}  }
class C{  public String toString(){  if (this.getObject() == null) {    return this.getStyle().getNullText();  }  Class<?> clazz=this.getObject().getClass();  this.appendFieldsIn(clazz);  while (clazz.getSuperclass() != null && clazz != this.getUpToClass()) {    clazz=clazz.getSuperclass();    this.appendFieldsIn(clazz);  }  return super.toString();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static void readFully(InputStream in,byte[] dst) throws IOException {  readFully(in,dst,0,dst.length);}  }
class C{  static int merge(int current,int incoming,ConstantPool pool){  int currentTag=getTag(current);  int incomingTag=getTag(incoming);  boolean currentIsObject=currentTag == TypeInfo.OBJECT_TAG;  boolean incomingIsObject=incomingTag == TypeInfo.OBJECT_TAG;  if (current == incoming || (currentIsObject && incoming == NULL)) {    return current;  } else   if (currentTag == TypeInfo.TOP || incomingTag == TypeInfo.TOP) {    return TypeInfo.TOP;  } else   if (current == NULL && incomingIsObject) {    return incoming;  } else   if (currentIsObject && incomingIsObject) {    String currentName=getPayloadAsType(current,pool);    String incomingName=getPayloadAsType(incoming,pool);    String currentlyGeneratedName=(String)pool.getConstantData(2);    String currentlyGeneratedSuperName=(String)pool.getConstantData(4);    if (currentName.equals(currentlyGeneratedName)) {      currentName=currentlyGeneratedSuperName;    }    if (incomingName.equals(currentlyGeneratedName)) {      incomingName=currentlyGeneratedSuperName;    }    Class<?> currentClass=getClassFromInternalName(currentName);    Class<?> incomingClass=getClassFromInternalName(incomingName);    if (currentClass.isAssignableFrom(incomingClass)) {      return current;    } else     if (incomingClass.isAssignableFrom(currentClass)) {      return incoming;    } else     if (incomingClass.isInterface() || currentClass.isInterface()) {      return OBJECT("java/lang/Object",pool);    } else {      Class<?> commonClass=incomingClass.getSuperclass();      while (commonClass != null) {        if (commonClass.isAssignableFrom(currentClass)) {          String name=commonClass.getName();          name=ClassFileWriter.getSlashedForm(name);          return OBJECT(name,pool);        }        commonClass=commonClass.getSuperclass();      }    }  }  throw new IllegalArgumentException("bad merge attempt between " + toString(current,pool) + " and "+ toString(incoming,pool));}  }
class C{  public boolean isReturnval(){  return returnval;}  }
class C{  private static int calculateOrderListNumber(CharSequence s,int next,int number){  if (next + 1 > s.length()) {    return number;  }  CharSequence cs=s.subSequence(next,next + 1);  if (TextUtils.isDigitsOnly(cs)) {    number=number * 10 + Integer.parseInt(String.valueOf(cs));    return calculateOrderListNumber(s,next + 1,number);  } else   if (" ".equals(cs)) {    return calculateOrderListNumber(s,next + 1,number);  } else {    return number;  }}  }
class C{  @AndroidOnly("Uses specific class: " + "org.apache.harmony.security.asn1.ASN1OctetString.") public void testSetMinCRLNumberLjava_math_BigInteger(){  X509CRLSelector selector=new X509CRLSelector();  BigInteger minCRL=new BigInteger("10000");  CRL crl=new TestCRL(minCRL);  selector.setMinCRLNumber(null);  assertTrue("Any CRL should match in the case of null minCRLNumber.",selector.match(crl));  selector.setMinCRLNumber(minCRL);  assertTrue("The CRL should match the selection criteria.",selector.match(crl));  selector.setMinCRLNumber(new BigInteger("10001"));  assertFalse("The CRL should not match the selection criteria.",selector.match(crl));}  }
class C{  public static String readAllString(Path path,Charset cs) throws IOException {  return cs.decode(ByteBuffer.wrap(Files.readAllBytes(path))).toString();}  }
class C{  public static void mount(FileSystem fs,Path mountPoint,boolean readonly,boolean log) throws IOException {  mount(fs,mountPoint,readonly,log,null);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:13.016 -0500",hash_original_method="679FA19AE8A4DD99CA71F6CF7886F900",hash_generated_method="61DB079FA9FD35C506423BF91572915B") private void socksConnect(InetAddress applicationServerAddress,int applicationServerPort,int timeout) throws IOException {  try {    IoBridge.connect(fd,socksGetServerAddress(),socksGetServerPort(),timeout);  } catch (  Exception e) {    throw new SocketException("SOCKS connection failed",e);  }  socksRequestConnection(applicationServerAddress,applicationServerPort);  lastConnectedAddress=applicationServerAddress;  lastConnectedPort=applicationServerPort;}  }
class C{  public boolean isMature(){  if (!isCoinBase())   return true;  if (getConfidence().getConfidenceType() != ConfidenceType.BUILDING)   return false;  return getConfidence().getDepthInBlocks() >= params.getSpendableCoinbaseDepth();}  }
class C{  private void postEvent(AWTEvent theEvent,int priority){  if (coalesceEvent(theEvent,priority)) {    return;  }  EventQueueItem newItem=new EventQueueItem(theEvent);  cacheEQItem(newItem);  boolean notifyID=(theEvent.getID() == this.waitForID);  if (queues[priority].head == null) {    boolean shouldNotify=noEvents();    queues[priority].head=queues[priority].tail=newItem;    if (shouldNotify) {      if (theEvent.getSource() != AWTAutoShutdown.getInstance()) {        AWTAutoShutdown.getInstance().notifyThreadBusy(dispatchThread);      }      pushPopCond.signalAll();    } else     if (notifyID) {      pushPopCond.signalAll();    }  } else {    queues[priority].tail.next=newItem;    queues[priority].tail=newItem;    if (notifyID) {      pushPopCond.signalAll();    }  }}  }
class C{  public void join(Object[] pieces){  int sum=0;  for (int x=0; x < pieces.length; x++)   sum+=((byte[])(pieces[x])).length;  int runningsum=0;  byte[] newgenome=new byte[sum];  for (int x=0; x < pieces.length; x++) {    System.arraycopy(pieces[x],0,newgenome,runningsum,((byte[])(pieces[x])).length);    runningsum+=((byte[])(pieces[x])).length;  }  genome=newgenome;}  }
class C{  void put(ThreadLocal<?> key,Object value){  cleanUp();  int firstTombstone=-1;  for (int index=key.hash & mask; ; index=next(index)) {    Object k=table[index];    if (k == key.reference) {      table[index + 1]=value;      return;    }    if (k == null) {      if (firstTombstone == -1) {        table[index]=key.reference;        table[index + 1]=value;        size++;        return;      }      table[firstTombstone]=key.reference;      table[firstTombstone + 1]=value;      tombstones--;      size++;      return;    }    if (firstTombstone == -1 && k == TOMBSTONE) {      firstTombstone=index;    }  }}  }
class C{  public static String asString(InputStream pStream,String pEncoding) throws IOException {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  copy(pStream,baos,true);  return baos.toString(pEncoding);}  }
class C{  public static byte[] digestRRset(RRSIGRecord rrsig,RRset rrset){  DNSOutput out=new DNSOutput();  digestSIG(out,rrsig);  int size=rrset.size();  Record[] records=new Record[size];  Iterator it=rrset.rrs();  Name name=rrset.getName();  Name wild=null;  int sigLabels=rrsig.getLabels() + 1;  if (name.labels() > sigLabels)   wild=name.wild(name.labels() - sigLabels);  while (it.hasNext())   records[--size]=(Record)it.next();  Arrays.sort(records);  DNSOutput header=new DNSOutput();  if (wild != null)   wild.toWireCanonical(header); else   name.toWireCanonical(header);  header.writeU16(rrset.getType());  header.writeU16(rrset.getDClass());  header.writeU32(rrsig.getOrigTTL());  for (int i=0; i < records.length; i++) {    out.writeByteArray(header.toByteArray());    int lengthPosition=out.current();    out.writeU16(0);    out.writeByteArray(records[i].rdataToWireCanonical());    int rrlength=out.current() - lengthPosition - 2;    out.save();    out.jump(lengthPosition);    out.writeU16(rrlength);    out.restore();  }  return out.toByteArray();}  }
class C{  public void terminate(){  if (sLogger.isActivated()) {    sLogger.info("Terminate the multi-session manager");  }  mBuffer.close();  if (sLogger.isActivated()) {    sLogger.info("Multi-session manager has been terminated");  }}  }
class C{  public TransformClassAdapter(Log logger,Set<String> stubMethods,Set<String> deleteReturns,String className,ClassVisitor cv,boolean stubNativesOnly,boolean hasNative){  super(Opcodes.ASM4,cv);  mLog=logger;  mStubMethods=stubMethods;  mClassName=className;  mStubAll=!stubNativesOnly;  mIsInterface=false;  mDeleteReturns=deleteReturns;}  }
class C{  public static Map<Section,Integer> loadSections(final SQLProvider provider,final INaviModule module) throws CouldntLoadDataException {  Preconditions.checkNotNull(provider,"Error: provider argument can not be null");  Preconditions.checkNotNull(module,"Error: module argument can not be null");  final HashMap<Section,Integer> sections=Maps.newHashMap();  final String query="SELECT * FROM get_sections(?)";  try (PreparedStatement statement=provider.getConnection().getConnection().prepareStatement(query)){    statement.setInt(1,module.getConfiguration().getId());    final ResultSet result=statement.executeQuery();    while (result.next()) {      final int id=result.getInt("id");      final String name=result.getString("name");      Integer commentId=result.getInt("comment_id");      if (result.wasNull()) {        commentId=null;      }      final IAddress startAddress=new CAddress(result.getLong("start_address"));      final IAddress endAddress=new CAddress(result.getLong("end_address"));      final SectionPermission permission=SectionPermission.valueOf(result.getString("permission"));      final byte[] data=result.getBytes("data");      sections.put(new Section(id,name,CommentManager.get(provider),module,startAddress,endAddress,permission,data),commentId);    }  } catch (  final SQLException exception) {    throw new CouldntLoadDataException(exception);  }  return sections;}  }
class C{  public boolean equals(int ignoreOwnElement,Sequence sequence,int ignoreItsElement){  int ownIndex=0;  int itsIndex=0;  Iterator<Item> ownIterator=itemIterator();  Iterator<Item> itsIterator=sequence.itemIterator();  while (true) {    if (ignoreOwnElement == ownIndex) {      ownIterator.next();      ownIndex++;    }    if (ignoreItsElement == itsIndex) {      itsIterator.next();      itsIndex++;    }    if (!ownIterator.hasNext() || !itsIterator.hasNext()) {      if (!ownIterator.hasNext() && !itsIterator.hasNext()) {        return true;      }      return false;    }    Item ownItem=ownIterator.next();    Item itsItem=itsIterator.next();    ownIndex++;    itsIndex++;    if (!ownItem.equals(itsItem)) {      return false;    }  }}  }
class C{  @ObjectiveCName("onConversationPreLoadWithPeer:") public void onConversationPreLoad(@NotNull Peer peer){  modules.getEvents().post(new PeerChatPreload(peer));}  }
class C{  public boolean equals(Object otherObj,boolean testForEquality){  if (!(otherObj instanceof ObjectArrayList)) {    return false;  }  if (this == otherObj)   return true;  if (otherObj == null)   return false;  ObjectArrayList other=(ObjectArrayList)otherObj;  if (elements == other.elements())   return true;  if (size != other.size())   return false;  Object[] otherElements=other.elements();  Object[] theElements=elements;  if (!testForEquality) {    for (int i=size; --i >= 0; ) {      if (theElements[i] != otherElements[i])       return false;    }  } else {    for (int i=size; --i >= 0; ) {      if (!(theElements[i] == null ? otherElements[i] == null : theElements[i].equals(otherElements[i])))       return false;    }  }  return true;}  }
class C{  public int writeLongZeta(long x,final int k) throws IOException {  if (x < 0)   throw new IllegalArgumentException("The argument " + x + " is negative");  if (k < 1)   throw new IllegalArgumentException("The shrinking factor " + k + " is not positive");  if (k == 3 && x < MAX_PRECOMPUTED)   return writeInt(ZETA_3[(int)x],ZETA_3[(int)x] >>> 26);  final int msb=Fast.mostSignificantBit(++x);  final int h=msb / k;  final int l=writeUnary(h);  final long left=1 << h * k;  return l + (x - left < left ? writeLong(x - left,h * k + k - 1) : writeLong(x,h * k + k));}  }
class C{  public SaaSSystemException(String arg0){  super(arg0);  genId();}  }
class C{  private double[][] weightedScatter(double[][] matrix,double[] weights,double[] means,double divisor,int dimension){  int rows=matrix.length;  if (rows == 0) {    return new double[0][0];  }  int cols=matrix[0].length;  double[][] cov;  if (dimension == 0) {    if (means.length != cols) {      throw new IllegalArgumentException("Length of the mean vector should equal the number of columns");    }    cov=new double[cols][cols];    for (int i=0; i < cols; i++) {      for (int j=i; j < cols; j++) {        double s=0.0;        for (int k=0; k < rows; k++) {          s+=weights[k] * (matrix[k][j] - means[j]) * (matrix[k][i] - means[i]);        }        s/=divisor;        cov[i][j]=s;        cov[j][i]=s;      }    }  } else   if (dimension == 1) {    if (means.length != rows) {      throw new IllegalArgumentException("Length of the mean vector should equal the number of rows");    }    cov=new double[rows][rows];    for (int i=0; i < rows; i++) {      for (int j=i; j < rows; j++) {        double s=0.0;        for (int k=0; k < cols; k++) {          s+=weights[k] * (matrix[j][k] - means[j]) * (matrix[i][k] - means[i]);        }        s/=divisor;        cov[i][j]=s;        cov[j][i]=s;      }    }  } else {    throw new IllegalArgumentException("Invalid dimension");  }  return cov;}  }
class C{  public Schaffer(){  super(1,2);}  }
class C{  void printValueNumbers(){  for (Enumeration<GraphNode> e=valueGraph.enumerateVertices(); e.hasMoreElements(); ) {    ValueGraphVertex v=(ValueGraphVertex)e.nextElement();    int valueNumber=v.getValueNumber();    GVCongruenceClass c=B.get(valueNumber);    System.out.println(v.getName() + " " + valueNumber+ " "+ c.getLabel());  }}  }
class C{  @Override public long position(Clob clobPattern,long start) throws SQLException {  throw unsupported("LOB search");}  }
class C{  private void simulateSizeChange(final SizeChangingInstruction instruction){  IntStream.range(0,instruction.getNumberOfPops()).forEach(null);  IntStream.range(0,instruction.getNumberOfPushes()).forEach(null);}  }
class C{  public void start(){  _thread.start();}  }
class C{  @Override public void startPlaying(){  if (mController != null) {    mController.startPlaying();  }  mCallbacks.onStart();  pushControllerState();  reportPlayingChanged();}  }
class C{  public void removeOnItemTouchListener(RecyclerView.OnItemTouchListener listener){  mRecycler.removeOnItemTouchListener(listener);}  }
class C{  private void check(boolean initDfltPathModes) throws Exception {  startUp(initDfltPathModes);  assertEquals(initDfltPathModes,fs.hasSecondaryFileSystem());}  }
class C{  public void show(){  LayoutParams lp=(LayoutParams)mContentView.getLayoutParams();  lp.height=LayoutParams.WRAP_CONTENT;  mContentView.setLayoutParams(lp);}  }
class C{  public ProtocolCodecException(String message,Throwable cause){  super(message,cause);}  }
class C{  public BeanContextSupport(BeanContext peer,Locale locale){  this(peer,locale,false,true);}  }
class C{  public int read(char cbuf[],int off,int len) throws IOException {  int c=0;  int count=0;  while (count < len && (c=read()) != -1) {    cbuf[off + count]=(char)c;    count++;  }  return (count == 0 && c == -1) ? -1 : count;}  }
class C{  protected String add_escapes(String str){  StringBuilder retval=new StringBuilder();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  public ThumbnailParameterBuilder formatType(String formatType){  this.thumbnailFormatType=formatType;  return this;}  }
class C{  void jbInit() throws Exception {  this.setWidth("350px");  this.setBorder("normal");  this.setClosable(true);  this.setTitle("Business Partner");  this.setAttribute("mode","modal");  this.appendChild(centerPanel);  this.appendChild(confirmPanel);  confirmPanel.addActionListener(Events.ON_CLICK,this);}  }
class C{  protected void updateSyntaxHighlightingInformation(){  Element map=getDefaultRootElement();  int numLines=map.getElementCount();  int lastTokenType=Token.NULL;  for (int i=0; i < numLines; i++) {    setSharedSegment(i);    lastTokenType=tokenMaker.getLastTokenTypeOnLine(s,lastTokenType);    lastTokensOnLines.set(i,lastTokenType);  }  fireChangedUpdate(new DefaultDocumentEvent(0,numLines - 1,DocumentEvent.EventType.CHANGE));}  }
class C{  static public JLabel createJLabelForTable(){  JLabel label=new JLabel();  setPlain(label);  label.setOpaque(true);  label.setForeground(TABLE_COMPONENT_FG_COLOR);  label.setBackground(TABLE_COMPONENT_BG_COLOR);  return label;}  }
class C{  public static void meanVector(Vec mean,DataSet dataSet){  if (dataSet.getSampleSize() == 0)   throw new ArithmeticException("Can not compute the mean of zero data points");  double sumOfWeights=0;  for (int i=0; i < dataSet.getSampleSize(); i++) {    DataPoint dp=dataSet.getDataPoint(i);    double w=dp.getWeight();    sumOfWeights+=w;    mean.mutableAdd(w,dp.getNumericalValues());  }  mean.mutableDivide(sumOfWeights);}  }
class C{  @Override protected void updateCastlingRightsForNonEpNonCastlingMove(Move move){  FischerRandomUtils.updateCastlingRightsForNonEpNonCastlingMove(this,move,initialShortRookFile,initialLongRookFile);}  }
class C{  public static void pushTx(String tx) throws APIException, IOException {  pushTx(tx,null);}  }
class C{  public StateCase createStateCase(){  StateCaseImpl stateCase=new StateCaseImpl();  return stateCase;}  }
class C{  public Software findByMachineAndByName(Machine machine,String softwareName) throws IOException, InterruptedException, MachineDoesntExistException, MachineHasNoSoftwareListException, SoftwareNotFoundInSoftwareListsException {  SoftwareListsXmlContainer slxc=this.getSoftwareLists(machine);  for (  SoftwareList sl : slxc.getSoftwareLists()) {    for (    Software s : sl.getSoftwares()) {      if (s.getName().equals(softwareName)) {        s.setMachine(machine);        s.setSoftwareList(sl);        if (s.isAClone()) {          s.setOriginal(this.findByMachineAndByName(machine,s.getCloneof()));        }        return s;      }    }  }  throw new SoftwareNotFoundInSoftwareListsException(String.format("The software '%s' has not been found on '%s' " + " software lists",softwareName,machine.getDescription()));}  }
class C{  public static void textLeft(double x,double y,String s){  offscreen.setFont(font);  FontMetrics metrics=offscreen.getFontMetrics();  double xs=scaleX(x);  double ys=scaleY(y);  int hs=metrics.getDescent();  offscreen.drawString(s,(float)(xs),(float)(ys + hs));  draw();}  }
class C{  public static void addNodesInTarget(Resource target,Dataset dataset,Set<Node> results){  for (  RDFNode focusNode : getResourcesInTarget(target,dataset)) {    results.add(focusNode.asNode());  }}  }
class C{  public static boolean isExternalStorageReadable(){  String state=Environment.getExternalStorageState();  return Environment.MEDIA_MOUNTED.equals(state) || Environment.MEDIA_MOUNTED_READ_ONLY.equals(state);}  }
class C{  public void onLowMemory(){  maxCacheSize/=2;  applyCacheLimit(0,0);}  }
class C{  @Override public void onMessageReceived(RemoteMessage remoteMessage){  Log.d(TAG,"From: " + remoteMessage.getFrom());  if (remoteMessage.getData().size() > 0) {    Log.d(TAG,"Message data payload: " + remoteMessage.getData());  }  if (remoteMessage.getNotification() != null) {    Log.d(TAG,"Message Notification Body: " + remoteMessage.getNotification().getBody());  }  sendNotification(remoteMessage.getData().get("message"));}  }
class C{  public void write(byte[] buffer,int start,int end){  try {    mmOutStream.write(buffer,start,end);  } catch (  IOException e) {  }}  }
class C{  public BlockItemMetaBuilder start(final BlockItemMeta meta){  return new BlockItemMetaBuilder(meta);}  }
class C{  public AnimSVGPointList(){  itemList=new ArrayList(1);}  }
class C{  public Set<JobKey> selectJobsInGroup(Connection conn,GroupMatcher<JobKey> matcher) throws SQLException {  PreparedStatement ps=null;  ResultSet rs=null;  try {    if (isMatcherEquals(matcher)) {      ps=conn.prepareStatement(rtp(SELECT_JOBS_IN_GROUP));      ps.setString(1,toSqlEqualsClause(matcher));    } else {      ps=conn.prepareStatement(rtp(SELECT_JOBS_IN_GROUP_LIKE));      ps.setString(1,toSqlLikeClause(matcher));    }    rs=ps.executeQuery();    LinkedList<JobKey> list=new LinkedList<JobKey>();    while (rs.next()) {      list.add(jobKey(rs.getString(1),rs.getString(2)));    }    return new HashSet<JobKey>(list);  }  finally {    closeResultSet(rs);    closeStatement(ps);  }}  }
class C{  public static Sentence parseAsMatcher(final String text){  Sentence sentence=matchingSentenceCache.get(text);  if (sentence == null) {    sentence=parse(text,new ConvCtxForMatcher());    matchingSentenceCache.put(text,sentence);  }  return sentence;}  }
class C{  public boolean hasSoundBeenHandled(){  return hasSoundBeenHandled;}  }
class C{  public void appendString(String str){  int len=str.length();  appendInt(len);  for (int i=0; i < len; i++) {    char c=str.charAt(i);    if ((c <= 31) && (c != 9) && (c != 10)&& (c != 13)) {      c=' ';    } else     if (c == 127) {      c=' ';    }    appendByte(c);  }  appendByte(0);}  }
class C{  public void addCapabilities(List<String> capabilities){  this.capabilities.addAll(capabilities);}  }
class C{  public CancelRequest clone(){  CancelRequest result=new CancelRequest();  result.RequestHeader=RequestHeader == null ? null : RequestHeader.clone();  result.RequestHandle=RequestHandle;  return result;}  }
class C{  @Override public void doRollbackMirrorLink(StorageSystem system,List<URI> sources,List<URI> targets,TaskCompleter completer,String opId){  BiosCommandResult biosCommandResult=null;  if (targets != null && !targets.isEmpty()) {    for (    URI target : targets) {      FileShare fileShare=_dbClient.queryObject(FileShare.class,target);      StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,fileShare.getStorageDevice());      URI uriParent=fileShare.getParentFileShare().getURI();      if (sources.contains(uriParent) == true) {        biosCommandResult=rollbackCreatedFilesystem(storageSystem,target,opId,true);        if (biosCommandResult.getCommandSuccess()) {          fileShare.getOpStatus().updateTaskStatus(opId,biosCommandResult.toOperation());          fileShare.setInactive(true);          _dbClient.updateObject(fileShare);        }      }    }  }  completer.ready(_dbClient);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL__AST_STRUCTURAL_MEMBERS:    return astStructuralMembers != null && !astStructuralMembers.isEmpty();case TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL__STRUCTURAL_TYPE:  return structuralType != null;case TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL__GEN_STRUCTURAL_MEMBERS:return genStructuralMembers != null && !genStructuralMembers.isEmpty();case TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL__POSTPONED_SUBSTITUTIONS:return postponedSubstitutions != null && !postponedSubstitutions.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public <T>Source<T> constant(T constant){  return Arbitrary.constant(constant);}  }
class C{  public static String stripToChar(String string,char c){  int ndx=string.indexOf(c);  if (ndx == -1) {    return string;  }  return string.substring(ndx);}  }
class C{  public synchronized Savable loadAsset(){  if (savable != null) {    return savable;  }  ProjectAssetManager mgr=getLookup().lookup(ProjectAssetManager.class);  if (mgr == null) {    DialogDisplayer.getDefault().notifyLater(new NotifyDescriptor.Message("File is not part of a project!\nCannot load without ProjectAssetManager."));    return null;  }  closeAsset();  FileLock lock=null;  try {    lock=getPrimaryFile().lock();    listListener.start();    Savable spatial=(Savable)mgr.loadAsset(getAssetKey());    listListener.stop();    lock.releaseLock();    savable=spatial;    logger.log(Level.INFO,"Loaded asset {0}",getName());  } catch (  Exception ex) {    Exceptions.printStackTrace(ex);  } finally {    if (lock != null) {      lock.releaseLock();    }  }  return savable;}  }
class C{  public static List<String> keys(List<EvaluationStatistics> stats,boolean sort){  List<String> result;  HashSet<String> keys;  keys=new HashSet<>();  for (  EvaluationStatistics stat : stats)   keys.addAll(stat.keySet());  result=new ArrayList<>(keys);  if (sort)   Collections.sort(result);  return result;}  }
class C{  public final void append(char value){  char[] chunk;  if (m_firstFree < m_chunkSize)   chunk=m_array[m_lastChunk]; else {    int i=m_array.length;    if (m_lastChunk + 1 == i) {      char[][] newarray=new char[i + 16][];      System.arraycopy(m_array,0,newarray,0,i);      m_array=newarray;    }    chunk=m_array[++m_lastChunk];    if (chunk == null) {      if (m_lastChunk == 1 << m_rebundleBits && m_chunkBits < m_maxChunkBits) {        m_innerFSB=new FastStringBuffer(this);      }      chunk=m_array[m_lastChunk]=new char[m_chunkSize];    }    m_firstFree=0;  }  chunk[m_firstFree++]=value;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.175 -0400",hash_original_method="487F0A93B3380B56B2E4D4D610050EF1",hash_generated_method="A100AF3146D7EACC0C143C5EE61330E1") protected void handleFile(File file,int depth,Collection<T> results) throws IOException {}  }
class C{  private boolean isClosed(){  return buf == null;}  }
class C{  public static void init(CompilerConfiguration compilerConfig){  assert compilerConfig != null;  if (compilerConfig.getKeepGeneratedSignatures()) {    keepGeneratedSignatures=true;    final String tmp=compilerConfig.getSignatureDirectory();    signatureDirectory=((tmp == null) ? DEFAULT_SIG_DIR : tmp);  }}  }
class C{  void add(Zone zone){  String name=zone.getName();  zones.put(name,zone);}  }
class C{  public final Vec3D frac(){  x-=MathUtils.floor(x);  y-=MathUtils.floor(y);  z-=MathUtils.floor(z);  return this;}  }
class C{  public OrderedRowIterator(final String table,final boolean up) throws IOException {  this.whereColumn=null;  this.whereValue=null;  this.wherePattern=null;  this.heap=getHeap(table);  this.i=heap.keys(up,false);}  }
class C{  public static String escapeJavaString(String s){  StringBuilder sb=new StringBuilder();  for (int i=0; i < s.length(); i++) {    char ch=s.charAt(i);switch (ch) {case '\\':      sb.append("\\\\");    break;case '\n':  sb.append("\\n");break;case '\r':sb.append("\\r");break;case '"':sb.append("\\\"");break;default :sb.append(ch);}}return sb.toString();}  }
class C{  public Comparator(){  this(null,null,new Config());}  }
class C{  public void dispose(){  if (swingTmrIplQuery != null) {    swingTmrIplQuery.stop();  }  if (memo.getLnTrafficController() != null) {    memo.getLnTrafficController().removeLocoNetListener(~0,this);  }}  }
class C{  public void testSequenceSequentialOperations() throws Throwable {  testSequenceOperations(5,Query.ConsistencyLevel.SEQUENTIAL);}  }
class C{  public FilterAsAlphaRed(CachableRed src){  super(new Any2LumRed(src),src.getBounds(),new ComponentColorModel(ColorSpace.getInstance(ColorSpace.CS_GRAY),new int[]{8},false,false,Transparency.OPAQUE,DataBuffer.TYPE_BYTE),new PixelInterleavedSampleModel(DataBuffer.TYPE_BYTE,src.getSampleModel().getWidth(),src.getSampleModel().getHeight(),1,src.getSampleModel().getWidth(),new int[]{0}),src.getTileGridXOffset(),src.getTileGridYOffset(),null);  props.put(ColorSpaceHintKey.PROPERTY_COLORSPACE,ColorSpaceHintKey.VALUE_COLORSPACE_ALPHA);}  }
class C{  public void write32bit(int offset,int value){  write16bit(offset,value >> 16);  write16bit(offset + 2,value);}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  GreenrxnewsDao.dropTable(db,ifExists);}  }
class C{  static GLUhalfEdge __gl_meshAddEdgeVertex(GLUhalfEdge eOrg){  GLUhalfEdge eNewSym;  GLUhalfEdge eNew=MakeEdge(eOrg);  eNewSym=eNew.Sym;  Splice(eNew,eOrg.Lnext);  eNew.Org=eOrg.Sym.Org;{    GLUvertex newVertex=new GLUvertex();    MakeVertex(newVertex,eNewSym,eNew.Org);  }  eNew.Lface=eNewSym.Lface=eOrg.Lface;  return eNew;}  }
class C{  public static Amount readFrom(final Deserializer deserializer,final String label){  return new Amount(deserializer.readLong(label));}  }
class C{  public PasswordScopeAccess(JSONObject jsonResponse,String manualToken1,String prefRegion){  prefferedRegion=prefRegion;  manualToken=manualToken1;  JSONObject token=(JSONObject)jsonResponse.get("token");  JSONArray catalog=(JSONArray)token.get("catalog");  for (  Object obj : catalog) {    JSONObject jObj=(JSONObject)obj;    String name=(String)jObj.get("name");    String type=(String)jObj.get("type");    if (name.equals("swift") && type.equals("object-store")) {      JSONArray endPoints=(JSONArray)jObj.get("endpoints");      for (      Object endPointObj : endPoints) {        JSONObject endPoint=(JSONObject)endPointObj;        String region=(String)endPoint.get("region");        if (region.equals(prefferedRegion)) {          String interfaceType=(String)endPoint.get("interface");          if (interfaceType.equals("public")) {            publicURL=(String)endPoint.get("url");          } else           if (interfaceType.equals("internal")) {            internalURL=(String)endPoint.get("url");          }        }      }    }  }}  }
class C{  public void testUnsizedLongsCountSeq(){  LongAdder counter=new LongAdder();  Random r=new Random();  long size=100;  r.longs().limit(size).forEach(null);  assertEquals(counter.sum(),size);}  }
class C{  public void tableChanged(WTableModelEvent e){  if (e.getColumn() == 0)   calculateSelection();}  }
class C{  public DraggableSupport(Object dragObject,int altitudeMode){  if (dragObject == null) {    String msg=Logging.getMessage("nullValue.ObjectIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (altitudeMode < 0 || altitudeMode > WorldWind.RELATIVE_TO_GROUND) {    String msg=Logging.getMessage("generic.InvalidAltitudeMode",altitudeMode);    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  this.dragObject=dragObject;  this.altitudeMode=altitudeMode;}  }
class C{  private void updateRespHeadersForImages(String target,HttpServletResponse response){  if (target.equals("/ViewImage.png") || target.equals("/ViewFavicon.png")) {    if (response.containsHeader(HeaderFramework.LAST_MODIFIED)) {      response.getHeaders(HeaderFramework.LAST_MODIFIED).clear();    }    response.setHeader(HeaderFramework.CACHE_CONTROL,"public, max-age=" + Integer.toString(600));  }}  }
class C{  private void writeSourceMethodLocationMapToFile(){  try {    FileWriter fw=new FileWriter(Project.v().getOutputDir() + File.separator + "source-method-locations.txt");    for (    Entry<String,SourceLocationTag> entry : sourceMethodLocationMap.entrySet()) {      fw.write(entry.getKey() + " : " + entry.getValue()+ "\n");    }    fw.close();  } catch (  IOException e) {    logger.error("Error writing source method locations file.");    droidsafe.main.Main.exit(1);  }}  }
class C{  public void endVisit(SynchronizedStatement node){}  }
class C{  public DateTimeFormatterBuilder appendHourOfHalfday(int minDigits){  return appendDecimal(DateTimeFieldType.hourOfHalfday(),minDigits,2);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:05.399 -0500",hash_original_method="210177ED8E63F9C12E442B1614E4B9E7",hash_generated_method="6662BB250D52E98445DC59FE85C8FA31") public void saveNetwork(WifiConfiguration config){  if (config == null) {    return;  }  mAsyncChannel.sendMessage(CMD_SAVE_NETWORK,config);}  }
class C{  public void closeit(OutputStream out) throws IOException {  if (out == null)   out.close();}  }
class C{  @Override protected void doAction(){  deleteSelectedEntry();}  }
class C{  public boolean hasTopicProtection(){  return topicProtection;}  }
class C{  public void put(String key,String value){  mValues.put(key,value);}  }
class C{  protected ClassNode findCurrentInstanceOfClass(final Expression expr,final ClassNode type){  if (!typeCheckingContext.temporaryIfBranchTypeInformation.empty()) {    List<ClassNode> nodes=getTemporaryTypesForExpression(expr);    if (nodes != null && nodes.size() == 1)     return nodes.get(0);  }  return type;}  }
class C{  public void putStatic(final Type owner,final String name,final Type type){  fieldInsn(Opcodes.PUTSTATIC,owner,name,type);}  }
class C{  public GroupBuilder<T,UnionBuilder<T,E>> right(){  return new GroupBuilder<T,UnionBuilder<T,E>>(this);}  }
class C{  BugSet(Collection<? extends BugLeafNode> filteredSet){  this.mainList=new ArrayList<BugLeafNode>(filteredSet);  doneMap=new HashMap<SortableValue,BugSet>();  doneContainsMap=new HashMap<SortableValue,Boolean>();  cacheSortables();}  }
class C{  @Override public int compareTo(@NonNull final NewVersionAvailableEvent another){  int result;  if (isUnsupported != another.isUnsupported) {    result=isUnsupported ? 1 : -1;  } else {    if (lastSupportedDate == another.lastSupportedDate) {      result=0;    } else     if (lastSupportedDate == null) {      result=-1;    } else     if (another.lastSupportedDate == null) {      result=1;    } else {      result=another.lastSupportedDate.compareTo(lastSupportedDate);    }    if (result == 0) {      if (newVersion == another.newVersion) {        result=0;      } else       if (newVersion == null) {        result=-1;      } else       if (another.newVersion == null) {        result=1;      } else {        result=newVersion.compareTo(another.newVersion);      }    }  }  return result;}  }
class C{  public void testWhitespaceTokenizer() throws Exception {  Reader reader=new StringReader("What's this thing do?");  Tokenizer stream=tokenizerFactory("Whitespace").create(newAttributeFactory());  stream.setReader(reader);  assertTokenStreamContents(stream,new String[]{"What's","this","thing","do?"});}  }
class C{  public int compareTo(UUID val){  return (this.mostSigBits < val.mostSigBits ? -1 : (this.mostSigBits > val.mostSigBits ? 1 : (this.leastSigBits < val.leastSigBits ? -1 : (this.leastSigBits > val.leastSigBits ? 1 : 0))));}  }
class C{  @SuppressWarnings("unchecked") static <T,R>boolean trySubscribeScalarMap(Publisher<? extends T> source,Subscriber<? super R> s,Function<? super T,? extends Publisher<? extends R>> mapper,boolean fuseableExpected){  if (source instanceof Callable) {    T t;    try {      t=((Callable<? extends T>)source).call();    } catch (    Throwable e) {      ExceptionHelper.throwIfFatal(e);      SubscriptionHelper.error(s,ExceptionHelper.unwrap(e));      return true;    }    if (t == null) {      SubscriptionHelper.complete(s);      return true;    }    Publisher<? extends R> p;    try {      p=mapper.apply(t);    } catch (    Throwable e) {      ExceptionHelper.throwIfFatal(e);      SubscriptionHelper.error(s,ExceptionHelper.unwrap(e));      return true;    }    if (p == null) {      SubscriptionHelper.error(s,new NullPointerException("The mapper returned a null Publisher"));      return true;    }    if (p instanceof Callable) {      R v;      try {        v=((Callable<R>)p).call();      } catch (      Throwable e) {        ExceptionHelper.throwIfFatal(e);        SubscriptionHelper.error(s,ExceptionHelper.unwrap(e));        return true;      }      if (v != null) {        s.onSubscribe(new ScalarSubscription<>(s,v));      } else {        SubscriptionHelper.complete(s);      }    } else {      if (!fuseableExpected || p instanceof Fuseable) {        p.subscribe(s);      } else {        p.subscribe(new SuppressFuseableSubscriber<>(s));      }    }    return true;  }  return false;}  }
class C{  public static boolean isWifiConnected(Context context){  if (isNetworkConnected(context)) {    ConnectivityManager cm=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);    return (cm.getActiveNetworkInfo().getType() == ConnectivityManager.TYPE_WIFI);  } else {    return false;  }}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("SIPEtag.parse");  SIPETag sipEtag=new SIPETag();  try {    headerName(TokenTypes.SIP_ETAG);    this.lexer.SPorHT();    this.lexer.match(TokenTypes.ID);    Token token=lexer.getNextToken();    sipEtag.setETag(token.getTokenValue());    this.lexer.SPorHT();    this.lexer.match('\n');    return sipEtag;  }  finally {    if (debug)     dbg_leave("SIPEtag.parse");  }}  }
class C{  @Override public void run(){  try {    doRun();  }  finally {  }}  }
class C{  public synchronized void add(double x,double y){  while (mXY.get(x) != null) {    x+=getPadding(x);  }  mXY.put(x,y);  updateRange(x,y);}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public void testDeleteOneTrack(){  EndToEndTestUtils.createSimpleTrack(1,true);  ListView listView=EndToEndTestUtils.SOLO.getCurrentViews(ListView.class).get(0);  int trackCount=listView.getCount();  assertTrue(trackCount > 0);  EndToEndTestUtils.SOLO.clickOnView(listView.getChildAt(0));  EndToEndTestUtils.SOLO.waitForText(trackListActivity.getString(R.string.track_detail_chart_tab));  EndToEndTestUtils.findMenuItem(trackListActivity.getString(R.string.menu_delete),true);  EndToEndTestUtils.getButtonOnScreen(trackListActivity.getString(R.string.generic_yes),true,true);  EndToEndTestUtils.waitTextToDisappear(trackListActivity.getString(R.string.generic_progress_title));  assertEquals(trackCount - 1,EndToEndTestUtils.SOLO.getCurrentViews(ListView.class).get(0).getCount());}  }
class C{  public MockVerifiableEntity(final Account signer){  this(signer,0);}  }
class C{  protected FunctionNode ternary(final SimpleNode node,final URI functionURI) throws VisitorException {  return new FunctionNode(functionURI,null,new ValueExpressionNode[]{left(node),right(node),(ValueExpressionNode)node.jjtGetChild(2).jjtAccept(this,null)});}  }
class C{  public MapMouseEvent(MapMouseMode mode,MouseEvent me){  super((Component)me.getSource(),me.getID(),me.getWhen(),me.getModifiers(),me.getX(),me.getY(),me.getClickCount(),me.isPopupTrigger());  if (me.getSource() instanceof MapBean) {    map=(MapBean)me.getSource();  }  mapMouseMode=mode;}  }
class C{  public void testDoTag() throws Exception {  System.out.println("doTag");  ForUriTag instance=new ForUriTag();  String value="\\\"";  String expected="%5C%22";  instance.setJspContext(_pageContext);  instance.setValue(value);  instance.doTag();  String results=_response.getContentAsString();  assertEquals(expected,results);}  }
class C{  public Value evaluate(IsLiteral node,BindingSet bindings) throws ValueExprEvaluationException, QueryEvaluationException {  Value argValue=evaluate(node.getArg(),bindings);  return BooleanLiteral.valueOf(argValue instanceof Literal);}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public GraphicsNode createGraphicsNode(BridgeContext ctx,Element e){  if (!SVGUtilities.matchUserAgent(e,ctx.getUserAgent())) {    return null;  }  CompositeGraphicsNode cgn=new CompositeGraphicsNode();  String s=e.getAttributeNS(null,SVG_TRANSFORM_ATTRIBUTE);  if (s.length() != 0) {    cgn.setTransform(SVGUtilities.convertTransform(e,SVG_TRANSFORM_ATTRIBUTE,s,ctx));  }  cgn.setVisible(CSSUtilities.convertVisibility(e));  RenderingHints hints=null;  hints=CSSUtilities.convertColorRendering(e,hints);  hints=CSSUtilities.convertTextRendering(e,hints);  if (hints != null) {    cgn.setRenderingHints(hints);  }  CompositeGraphicsNode cgn2=new CompositeGraphicsNode();  cgn.add(cgn2);  FlowTextNode tn=(FlowTextNode)instantiateGraphicsNode();  tn.setLocation(getLocation(ctx,e));  if (ctx.getTextPainter() != null) {    tn.setTextPainter(ctx.getTextPainter());  }  textNode=tn;  cgn.add(tn);  associateSVGContext(ctx,e,cgn);  Node child=getFirstChild(e);  while (child != null) {    if (child.getNodeType() == Node.ELEMENT_NODE) {      addContextToChild(ctx,(Element)child);    }    child=getNextSibling(child);  }  return cgn;}  }
class C{  public CurrencyException(){}  }
class C{  public void intersection(Set x){  Enumeration elements=elements();  Object a;  while (elements.hasMoreElements()) {    a=elements.nextElement();    if (!x.in(a))     remove(a);  }}  }
class C{  public static ITaskService lookupTaskService(){  return (ITaskService)VeriniceContext.get(VeriniceContext.TASK_SERVICE);}  }
class C{  @Override public GraphQuery has(final String key){  criteria.add(new Has(key));  return this;}  }
class C{  protected void printMatrices(final int levels[][]){  int i=0;  for (i=0; i < levels.length - 1; i++) {    float rowBC[]=null;    float colBC[]=null;    try {      rowBC=calcRowBC(i,levels);      colBC=calcColBC(i,levels);    } catch (    NullPointerException ne) {      System.out.println("i: " + i + " levels.length: "+ levels.length);      ne.printStackTrace();      return;    }    System.out.print("\nM" + (i + 1) + "\t");    for (int j=0; j < levels[i + 1].length; j++) {      System.out.print(m_nodes.get(levels[i + 1][j]).ID + " ");    }    System.out.println("");    for (int j=0; j < levels[i].length; j++) {      System.out.print(m_nodes.get(levels[i][j]).ID + "\t");      for (int k=0; k < levels[i + 1].length; k++) {        System.out.print(graphMatrix[levels[i][j]][levels[i + 1][k]] + " ");      }      System.out.println(rowBC[j]);    }    System.out.print("\t");    for (int k=0; k < levels[i + 1].length; k++) {      System.out.print(colBC[k] + " ");    }  }  System.out.println("\nAt the end i: " + i + " levels.length: "+ levels.length);}  }
class C{  public static NodeIterator selectNodeIterator(Node contextNode,String str,Node namespaceNode) throws TransformerException {  XObject list=eval(contextNode,str,namespaceNode);  return list.nodeset();}  }
class C{  public TopologyMeta creatTopology(){  throw new UnsupportedOperationException("not supported yet!");}  }
class C{  public final SecretKey translateKey(SecretKey key) throws InvalidKeyException {  return spiImpl.engineTranslateKey(key);}  }
class C{  public void stopTiming(){  if (Bukkit.getPluginManager().useTimings()) {    if (--timingDepth != 0 || start == 0) {      return;    }    long diff=System.nanoTime() - start;    totalTime+=diff;    curTickTotal+=diff;    count++;    start=0;    if (parent != null) {      parent.stopTiming();    }  }}  }
class C{  public CreateSensorMatrixDialog(final VisionWorld visionWorld){  super();  if (visionWorld == null) {    throw new IllegalArgumentException("visionWorld must not be null");  }  this.visionWorld=visionWorld;  setTitle("Create Sensor Matrix");  initComponents();  layoutComponents();}  }
class C{  private void findCollapsesFromExistingVertices(List collapsedVertexIndexes){  for (int i=0; i < edge.size() - 2; i++) {    Coordinate p0=edge.getCoordinate(i);    Coordinate p1=edge.getCoordinate(i + 1);    Coordinate p2=edge.getCoordinate(i + 2);    if (p0.equals2D(p2)) {      collapsedVertexIndexes.add(new Integer(i + 1));    }  }}  }
class C{  private Object[] computeNonJavaResources(JavaProject project){  IPath projectPath=project.getProject().getFullPath();  boolean srcIsProject=false;  boolean binIsProject=false;  char[][] inclusionPatterns=null;  char[][] exclusionPatterns=null;  IPath projectOutput=null;  boolean isClasspathResolved=true;  try {    IClasspathEntry entry=project.getClasspathEntryFor(projectPath);    if (entry != null) {      srcIsProject=true;      inclusionPatterns=((ClasspathEntry)entry).fullInclusionPatternChars();      exclusionPatterns=((ClasspathEntry)entry).fullExclusionPatternChars();    }    projectOutput=project.getOutputLocation();    binIsProject=projectPath.equals(projectOutput);  } catch (  JavaModelException e) {    isClasspathResolved=false;  }  Object[] resources=new IResource[5];  int resourcesCounter=0;  try {    IResource[] members=((IContainer)project.getResource()).members();    int length=members.length;    if (length > 0) {      String sourceLevel=project.getOption(JavaCore.COMPILER_SOURCE,true);      String complianceLevel=project.getOption(JavaCore.COMPILER_COMPLIANCE,true);      IClasspathEntry[] classpath=project.getResolvedClasspath();      for (int i=0; i < length; i++) {        IResource res=members[i];switch (res.getType()) {case IResource.FILE:          IPath resFullPath=res.getFullPath();        String resName=res.getName();      if (isClasspathResolved && isClasspathEntryOrOutputLocation(resFullPath,res.getLocation(),classpath,projectOutput)) {        break;      }    if (srcIsProject && Util.isValidCompilationUnitName(resName,sourceLevel,complianceLevel) && !Util.isExcluded(res,inclusionPatterns,exclusionPatterns)) {      break;    }  if (binIsProject && Util.isValidClassFileName(resName,sourceLevel,complianceLevel)) {    break;  }if (resources.length == resourcesCounter) {  System.arraycopy(resources,0,(resources=new IResource[resourcesCounter * 2]),0,resourcesCounter);}resources[resourcesCounter++]=res;break;case IResource.FOLDER:resFullPath=res.getFullPath();if ((srcIsProject && !Util.isExcluded(res,inclusionPatterns,exclusionPatterns) && Util.isValidFolderNameForPackage(res.getName(),sourceLevel,complianceLevel)) || (isClasspathResolved && isClasspathEntryOrOutputLocation(resFullPath,res.getLocation(),classpath,projectOutput))) {break;}if (resources.length == resourcesCounter) {System.arraycopy(resources,0,(resources=new IResource[resourcesCounter * 2]),0,resourcesCounter);}resources[resourcesCounter++]=res;}}}if (resources.length != resourcesCounter) {System.arraycopy(resources,0,(resources=new IResource[resourcesCounter]),0,resourcesCounter);}} catch (CoreException e) {resources=NO_NON_JAVA_RESOURCES;resourcesCounter=0;}return resources;}  }
class C{  void next(){  if (!hasNext()) {    throw new NoSuchElementException("Attempt to fetch nucleotide past the end of the template");  }  if (isOnTemplate()) {    mTemplatePosition++;    if (mNextVariant != null && mNextVariant.allele().getStart() == mTemplatePosition) {      mPositionInVariant=0;    }  } else {    assert mPositionInVariant != INVALID;    mPositionInVariant++;  }  assert mNextVariant != null || mPositionInVariant == INVALID;  if (mNextVariant != null) {    while (true) {      final byte[] norm=mNextVariant.allele().nt();      if (mPositionInVariant != norm.length) {        assert integrity();        break;      }      mTemplatePosition=mNextVariant.allele().getEnd();      mPositionInVariant=INVALID;      if (!mVariants.isEmpty()) {        mNextVariant=mVariants.poll();      } else {        mNextVariant=null;        assert integrity();        break;      }      if (mTemplatePosition < mNextVariant.allele().getStart()) {        assert integrity();        break;      }      mPositionInVariant=0;      if (mTemplatePosition != mNextVariant.allele().getStart()) {        throw new SlimException("Out of order variants during replay: pos=" + mTemplatePosition + " variant="+ mNextVariant+ " allele="+ mNextVariant.allele());      }    }  }  assert integrity();}  }
class C{  private void defineToolBars(UIDefaults d){  d.put("ToolBar.contentMargins",new InsetsUIResource(2,2,2,2));  d.put("ToolBar.opaque",Boolean.TRUE);  d.put("ToolBar:Button.contentMargins",new InsetsUIResource(4,4,4,4));  d.put("ToolBar:ToggleButton.contentMargins",new InsetsUIResource(4,4,4,4));  addColor(d,"ToolBar:ToggleButton[Disabled+Selected].textForeground","seaGlassDisabledText",0.0f,0.0f,0.0f,0);  d.put("ToolBarSeparator.contentMargins",new InsetsUIResource(2,0,3,0));  addColor(d,"ToolBarSeparator.textForeground","seaGlassBorder",0.0f,0.0f,0.0f,0);  d.put("toolbarHandleMac",new Color(0xc8191919,true));  d.put("toolbarToggleButtonBase",new Color(0x5b7ea4,true));  if ((!PlatformUtils.isMac())) {    d.put("seaGlassToolBarActiveTopT",new Color(0x466c97));    d.put("seaGlassToolBarActiveBottomB",new Color(0x466c97));    d.put("seaGlassToolBarInactiveTopT",new Color(0xe9e9e9));    d.put("seaGlassToolBarInactiveBottomB",new Color(0xcacaca));  } else   if (PlatformUtils.isLion()) {    d.put("seaGlassToolBarActiveTopT",new Color(0xdedede));    d.put("seaGlassToolBarActiveBottomB",new Color(0xb0b0b0));    d.put("seaGlassToolBarInactiveTopT",new Color(0xf3f3f3));    d.put("seaGlassToolBarInactiveBottomB",new Color(0xdedede));  } else   if (PlatformUtils.isSnowLeopard()) {    d.put("seaGlassToolBarActiveTopT",new Color(0xc9c9c9));    d.put("seaGlassToolBarActiveBottomB",new Color(0xa7a7a7));    d.put("seaGlassToolBarInactiveTopT",new Color(0xe9e9e9));    d.put("seaGlassToolBarInactiveBottomB",new Color(0xcacaca));  } else {    d.put("seaGlassToolBarActiveTopT",new Color(0xbcbcbc));    d.put("seaGlassToolBarActiveBottomB",new Color(0xa7a7a7));    d.put("seaGlassToolBarInactiveTopT",new Color(0xe4e4e4));    d.put("seaGlassToolBarInactiveBottomB",new Color(0xd8d8d8));  }  String c=PAINTER_PREFIX + "ToolBarPainter";  String p="ToolBar";  d.put(p + ".contentMargins",new InsetsUIResource(2,2,2,2));  d.put(p + ".opaque",Boolean.TRUE);  d.put(p + ".States","WindowIsActive");  d.put(p + ".WindowIsActive",new ToolBarWindowIsActiveState());  d.put(p + ".backgroundPainter",new LazyPainter(c,ToolBarPainter.Which.BORDER_ENABLED));  c=PAINTER_PREFIX + "ToolBarHandlePainter";  d.put(p + ".handleIconPainter",new LazyPainter(c,ToolBarHandlePainter.Which.HANDLEICON_ENABLED));  d.put(p + ".handleIcon",new SeaGlassIcon(p,"handleIconPainter",11,38));  c=PAINTER_PREFIX + "ButtonPainter";  p="ToolBar:Button";  d.put(p + ".States","Enabled,Disabled,Focused,Pressed");  d.put(p + "[Disabled].textForeground",d.get("seaGlassToolBarDisabledText"));  d.put(p + "[Disabled].backgroundPainter",new LazyPainter(c,ButtonPainter.Which.BACKGROUND_DISABLED));  d.put(p + "[Enabled].backgroundPainter",new LazyPainter(c,ButtonPainter.Which.BACKGROUND_ENABLED));  d.put(p + "[Focused].backgroundPainter",new LazyPainter(c,ButtonPainter.Which.BACKGROUND_FOCUSED));  d.put(p + "[Pressed].backgroundPainter",new LazyPainter(c,ButtonPainter.Which.BACKGROUND_PRESSED));  d.put(p + "[Focused+Pressed].backgroundPainter",new LazyPainter(c,ButtonPainter.Which.BACKGROUND_PRESSED_FOCUSED));  c=PAINTER_PREFIX + "ToolBarToggleButtonPainter";  p="ToolBar:ToggleButton";  d.put(p + ".States","Enabled,Disabled,Focused,Pressed,Selected");  d.put(p + "[Disabled].textForeground",d.get("seaGlassToolBarDisabledText"));  d.put(p + "[Focused].backgroundPainter",new LazyPainter(c,ToolBarToggleButtonPainter.Which.BACKGROUND_FOCUSED));  d.put(p + "[Pressed].backgroundPainter",new LazyPainter(c,ToolBarToggleButtonPainter.Which.BACKGROUND_PRESSED));  d.put(p + "[Focused+Pressed].backgroundPainter",new LazyPainter(c,ToolBarToggleButtonPainter.Which.BACKGROUND_PRESSED_FOCUSED));  d.put(p + "[Selected].backgroundPainter",new LazyPainter(c,ToolBarToggleButtonPainter.Which.BACKGROUND_SELECTED));  d.put(p + "[Focused+Selected].backgroundPainter",new LazyPainter(c,ToolBarToggleButtonPainter.Which.BACKGROUND_SELECTED_FOCUSED));  d.put(p + "[Pressed+Selected].backgroundPainter",new LazyPainter(c,ToolBarToggleButtonPainter.Which.BACKGROUND_PRESSED_SELECTED));  d.put(p + "[Focused+Pressed+Selected].backgroundPainter",new LazyPainter(c,ToolBarToggleButtonPainter.Which.BACKGROUND_PRESSED_SELECTED_FOCUSED));  d.put(p + "[Disabled+Selected].backgroundPainter",new LazyPainter(c,ToolBarToggleButtonPainter.Which.BACKGROUND_DISABLED_SELECTED));  uiDefaults.put("ToolBarSeparator[Enabled].backgroundPainter",null);}  }
class C{  public boolean updateGoal(boolean force){  log.config("Force=" + force);  MMeasure measure=MMeasure.get(getCtx(),getPA_Measure_ID());  if (force || getDateLastRun() == null || !TimeUtil.isSameHour(getDateLastRun(),null)) {    measure.set_TrxName(get_TrxName());    if (measure.updateGoals()) {      load(get_ID(),get_TrxName());      return true;    }  }  return false;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.TEMPLATE_SEGMENT__RAW_VALUE:    setRawValue((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public static int hash(int seed,long[] longArray){  if (longArray == null) {    return 0;  }  for (  long aLong : longArray) {    seed=hash(seed,aLong);  }  return seed;}  }
class C{  public GF2nPolynomialElement(GF2nPolynomialField f,byte[] os){  mField=f;  mDegree=mField.getDegree();  polynomial=new GF2Polynomial(mDegree,os);  polynomial.expandN(mDegree);}  }
class C{  public Object result(){  return result;}  }
class C{  public void testAddFilterToDocumentWithAnotherFilter() throws Exception {  String xml=WEBAPP_TEST_HEADER + "  <filter>" + "    <filter-name>f1</filter-name>"+ "    <filter-class>fclass1</filter-class>"+ "  </filter>"+ "</web-app>";  this.builder.build(new ByteArrayInputStream(xml.getBytes("UTF-8")));  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  WebXmlElement filterElement=createFilterElement(webXml.getDescriptorType(),"f2","f2class");  webXml.addTag(filterElement);  assertTrue(WebXmlUtils.hasFilter(webXml,"f1"));  assertTrue(WebXmlUtils.hasFilter(webXml,"f2"));}  }
class C{  public PermutationGenerator(Collection<E> items){  this.items=new ArrayList<E>(items);  int n=items.size();  if (n < 1) {    throw new IllegalArgumentException("At least one item required");  }  a=new int[n];  total=getFactorial(n);  reset();}  }
class C{  public boolean isGroupChatStoreForwardSupported(){  return mGroupChatStoreForward;}  }
class C{  private void drawTextFromKeyboard(){  Toast.makeText(getContext(),"Touch where you want the text to be",Toast.LENGTH_LONG).show();  mTextExpectTouch=true;}  }
class C{  private void writePlacemarkerStyle(String name,String url,int x,int y){  printWriter.println("<Style id=\"" + name + "\"><IconStyle>");  printWriter.println("<scale>1.3</scale>");  printWriter.println("<Icon><href>" + url + "</href></Icon>");  printWriter.println("<hotSpot x=\"" + x + "\" y=\""+ y+ "\" xunits=\"pixels\" yunits=\"pixels\"/>");  printWriter.println("</IconStyle></Style>");}  }
class C{  public static boolean putInt(Context context,String key,int value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putInt(key,value);  return editor.commit();}  }
class C{  Item newConstItem(final Object cst){  if (cst instanceof Integer) {    int val=((Integer)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Byte) {    int val=((Byte)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Character) {    int val=((Character)cst).charValue();    return newInteger(val);  } else   if (cst instanceof Short) {    int val=((Short)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Boolean) {    int val=((Boolean)cst).booleanValue() ? 1 : 0;    return newInteger(val);  } else   if (cst instanceof Float) {    float val=((Float)cst).floatValue();    return newFloat(val);  } else   if (cst instanceof Long) {    long val=((Long)cst).longValue();    return newLong(val);  } else   if (cst instanceof Double) {    double val=((Double)cst).doubleValue();    return newDouble(val);  } else   if (cst instanceof String) {    return newString((String)cst);  } else   if (cst instanceof Type) {    Type t=(Type)cst;    int s=t.getSort();    if (s == Type.OBJECT) {      return newClassItem(t.getInternalName());    } else     if (s == Type.METHOD) {      return newMethodTypeItem(t.getDescriptor());    } else {      return newClassItem(t.getDescriptor());    }  } else   if (cst instanceof Handle) {    Handle h=(Handle)cst;    return newHandleItem(h.tag,h.owner,h.name,h.desc);  } else {    throw new IllegalArgumentException("value " + cst);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (stack.getUIMgr() != null && stack.getUIMgr().getUIClientType() == UIClient.REMOTE_UI && stack.getUIMgr().getRootPanel().getRenderEngine() instanceof MiniClientSageRenderer) {    return ((MiniClientSageRenderer)stack.getUIMgr().getRootPanel().getRenderEngine()).getHDMIConnectorAutodetect();  }  return null;}  }
class C{  public Derivation unsetDerivation(){  Derivation d=getDerivation();  this.derivation=null;  return d;}  }
class C{  private void storeInstanceField(XField instanceField,Instruction obj,boolean pushStoredValue){  if (RLE_DEBUG) {    System.out.println("[storeInstanceField for field " + instanceField + " in instruction "+ handle);  }  ValueNumberFrame frame=getFrame();  int numWordsConsumed=getNumWordsConsumed(obj);  ValueNumber[] inputValueList=popInputValues(numWordsConsumed);  ValueNumber reference=inputValueList[0];  ValueNumber[] storedValue=allocateValueNumberArray(inputValueList.length - 1);  System.arraycopy(inputValueList,1,storedValue,0,inputValueList.length - 1);  if (pushStoredValue) {    pushOutputValues(storedValue);  }  frame.killLoadsOfField(instanceField);  frame.addAvailableLoad(new AvailableLoad(reference,instanceField),storedValue);  if (RLE_DEBUG) {    System.out.println("[making store of " + instanceField + " available]");  }  if (VERIFY_INTEGRITY) {    checkConsumedAndProducedValues(obj,inputValueList,pushStoredValue ? storedValue : EMPTY_INPUT_VALUE_LIST);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.TRACE_CASE___TRACE_CASE_DEF_1:    getTraceCaseDef_1().clear();  return;case UmplePackage.TRACE_CASE___TRACE_CASE_ACTIVATION_1:getTraceCaseActivation_1().clear();return;case UmplePackage.TRACE_CASE___TRACE_CASE_DEACTIVATION_1:getTraceCaseDeactivation_1().clear();return;}super.eUnset(featureID);}  }
class C{  public static void C_Order(MOrder o){  MDocType dt=MDocType.get(o.getCtx(),o.getC_DocTypeTarget_ID());  String DocSubTypeSO=dt.getDocSubTypeSO();  if (MDocType.DOCSUBTYPESO_StandardOrder.equals(DocSubTypeSO) || !o.isSOTrx()) {    if ((o.getDocStatus().equals(MOrder.DOCSTATUS_InProgress) || o.getDocStatus().equals(MOrder.DOCSTATUS_Completed)) || !o.isSOTrx()) {      for (      MOrderLine line : o.getLines()) {        C_OrderLine(line);      }    }    if (o.is_ValueChanged(MOrder.COLUMNNAME_DocStatus) || o.is_ValueChanged(MOrder.COLUMNNAME_C_BPartner_ID)) {      List<MPPMRP> list=getQuery(o,null,null).list();      for (      MPPMRP mrp : list) {        mrp.setC_Order(o);        mrp.saveEx();      }    }  }}  }
class C{  public static ECKey signedMessageToKey(String message,String signatureBase64) throws SignatureException {  byte[] signatureEncoded;  try {    signatureEncoded=Base64.decode(signatureBase64);  } catch (  RuntimeException e) {    throw new SignatureException("Could not decode base64",e);  }  if (signatureEncoded.length < 65)   throw new SignatureException("Signature truncated, expected 65 bytes and got " + signatureEncoded.length);  int header=signatureEncoded[0] & 0xFF;  if (header < 27 || header > 34)   throw new SignatureException("Header byte out of range: " + header);  BigInteger r=new BigInteger(1,Arrays.copyOfRange(signatureEncoded,1,33));  BigInteger s=new BigInteger(1,Arrays.copyOfRange(signatureEncoded,33,65));  ECDSASignature sig=new ECDSASignature(r,s);  byte[] messageBytes=Utils.formatMessageForSigning(message);  Sha256Hash messageHash=Sha256Hash.createDouble(messageBytes);  boolean compressed=false;  if (header >= 31) {    compressed=true;    header-=4;  }  int recId=header - 27;  ECKey key=ECKey.recoverFromSignature(recId,sig,messageHash,compressed);  if (key == null)   throw new SignatureException("Could not recover public key from signature");  return key;}  }
class C{  protected static boolean isMetaDown(int modifiers){  return (modifiers & (1 << 8)) != 0;}  }
class C{  public static void checkState(boolean expression,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (!expression) {    throw new IllegalStateException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  @Override public void run(){  amIActive=true;  String destHeader=null;  String outputHeader=null;  String backLinkHeader=null;  WhiteboxRaster destImage;  WhiteboxRaster output;  WhiteboxRaster backLink;  int cols, rows;  double z, flowDir;  float progress=0;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double lnOf2=0.693147180559945;  double gridRes;  int col, row, a;  int c;  int x, y, i;  boolean flag=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      destHeader=args[i];    } else     if (i == 1) {      backLinkHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((destHeader == null) || (backLinkHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    destImage=new WhiteboxRaster(destHeader,"r");    rows=destImage.getNumberRows();    cols=destImage.getNumberColumns();    double noData=destImage.getNoDataValue();    gridRes=(destImage.getCellSizeX() + destImage.getCellSizeY()) / 2;    backLink=new WhiteboxRaster(backLinkHeader,"r");    if (backLink.getNumberColumns() != cols || backLink.getNumberRows() != rows) {      showFeedback("Input images must have the same dimensions");      return;    }    output=new WhiteboxRaster(outputHeader,"rw",backLinkHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    double[] data;    for (row=0; row < rows; row++) {      data=destImage.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] > 0) {          x=col;          y=row;          flag=true;          do {            z=output.getValue(y,x);            if (z == noData) {              output.setValue(y,x,1);            } else {              output.setValue(y,x,z + 1);            }            flowDir=backLink.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / lnOf2);              x+=dX[c];              y+=dY[c];            } else {              flag=false;            }          } while (flag);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    destImage.close();    backLink.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private boolean doAcquireNanos(long arg,long nanosTimeout) throws InterruptedException {  long lastTime=System.nanoTime();  final Node node=addWaiter(Node.EXCLUSIVE);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head && tryAcquire(arg)) {        setHead(node);        p.next=null;        failed=false;        return true;      }      if (nanosTimeout <= 0)       return false;      if (shouldParkAfterFailedAcquire(p,node) && nanosTimeout > spinForTimeoutThreshold)       LockSupport.parkNanos(this,nanosTimeout);      long now=System.nanoTime();      nanosTimeout-=now - lastTime;      lastTime=now;      if (Thread.interrupted())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public Fingerprint(Fingerprint toVerifyAgainst){  this(toVerifyAgainst.events);}  }
class C{  public void addDatasource(String name,String dsName,FetchData fetchData){  Def def=new Def(name,dsName,fetchData);  sources.put(name,def);}  }
class C{  @Override public int read() throws IOException {  if (lookaheadChar == UNDEFINED) {    lookaheadChar=super.read();  }  lastChar=lookaheadChar;  if (super.ready()) {    lookaheadChar=super.read();  } else {    lookaheadChar=UNDEFINED;  }  if (lastChar == '\n') {    lineCounter++;  }  return lastChar;}  }
class C{  public boolean down(){  if (isWithinCurrentMonth(mRow + 1,mColumn)) {    mRow++;    return false;  }  nextMonth();  mRow=0;  while (!isWithinCurrentMonth(mRow,mColumn)) {    mRow++;  }  return true;}  }
class C{  public QuestionStep(String identifier){  super(identifier);}  }
class C{  public void add(long x){  Cell[] as;  long b, v;  int[] hc;  Cell a;  int n;  if ((as=cells) != null || !casBase(b=base,b + x)) {    boolean uncontended=true;    if ((hc=threadHashCode.get()) == null || as == null || (n=as.length) < 1 || (a=as[(n - 1) & hc[0]]) == null || !(uncontended=a.cas(v=a.value,v + x)))     retryUpdate(x,hc,uncontended);  }}  }
class C{  public boolean equals(Object t){  return t == this;}  }
class C{  protected void updateCapabilitiesFilter(Capabilities filter){  Instances tempInst;  Capabilities filterClass;  if (filter == null) {    m_AttributeEvaluatorEditor.setCapabilitiesFilter(new Capabilities(null));    m_AttributeSearchEditor.setCapabilitiesFilter(new Capabilities(null));    return;  }  if (!ExplorerDefaults.getInitGenericObjectEditorFilter()) {    tempInst=new Instances(m_Instances,0);  } else {    tempInst=new Instances(m_Instances);  }  int clIndex=m_ClassCombo.getSelectedIndex() - 1;  if (clIndex >= 0) {    tempInst.setClassIndex(clIndex);  }  try {    filterClass=Capabilities.forInstances(tempInst);  } catch (  Exception e) {    filterClass=new Capabilities(null);  }  m_AttributeEvaluatorEditor.setCapabilitiesFilter(filterClass);  m_AttributeSearchEditor.setCapabilitiesFilter(filterClass);  m_StartBut.setEnabled(true);  Capabilities currentFilter=m_AttributeEvaluatorEditor.getCapabilitiesFilter();  ASEvaluation evaluator=(ASEvaluation)m_AttributeEvaluatorEditor.getValue();  Capabilities currentSchemeCapabilities=null;  if (evaluator != null && currentFilter != null && (evaluator instanceof CapabilitiesHandler)) {    currentSchemeCapabilities=((CapabilitiesHandler)evaluator).getCapabilities();    if (!currentSchemeCapabilities.supportsMaybe(currentFilter) && !currentSchemeCapabilities.supports(currentFilter)) {      m_StartBut.setEnabled(false);    }  }}  }
class C{  public EclipseRunner withinJvmRunner() throws IOException {  return null;}  }
class C{  @Override public int hashCode(){  int result=127;  result=HashUtilities.hashCode(result,this.labelFormat);  result=HashUtilities.hashCode(result,this.nullValueString);  result=HashUtilities.hashCode(result,this.dateFormat);  result=HashUtilities.hashCode(result,this.numberFormat);  result=HashUtilities.hashCode(result,this.percentFormat);  return result;}  }
class C{  private boolean destroyPkey(byte[] cka_id) throws PKCS11Exception, KeyStoreException {  Session session=null;  try {    session=token.getOpSession();    THandle h=getTokenObject(session,ATTR_CLASS_PKEY,cka_id,null);    if (h.type != ATTR_CLASS_PKEY) {      if (debug != null) {        debug.println("destroyPkey did not find private key with CKA_ID [" + getID(cka_id) + "]");      }      return false;    }    token.p11.C_DestroyObject(session.id(),h.handle);    return true;  }  finally {    token.releaseSession(session);  }}  }
class C{  public OtherClassifierModifiersComponent(N4JSClassifierWizardModel model,WizardComponentContainer container,boolean createFinalButton){  super(container);  this.model=model;  Label otherModifiersLabel=new Label(getParentComposite(),SWT.NONE);  otherModifiersLabel.setText("Other modifiers:");  Composite otherModifierComposite=new Composite(this.getParentComposite(),SWT.NONE);  otherModifierComposite.setLayout(RowLayoutFactory.swtDefaults().extendedMargins(0,0,0,0).create());  if (createFinalButton) {    finalAnnotationBox=new Button(otherModifierComposite,SWT.CHECK);    finalAnnotationBox.setText("@Final");  } else {    finalAnnotationBox=null;  }  n4jsAnnotationBox=new Button(otherModifierComposite,SWT.CHECK);  getN4jsAnnotationBox().setText("@N4JS");  WizardComponentUtils.emptyGridCell(getParentComposite());  setupBindings();}  }
class C{  public void testGetParametersAsStringContainingBackslashes(){  String propertyString="user=APP;path=c:\\users\\me";  String driverPropertyString=ResourcePropertySet.PARAMETERS + "=" + propertyString;  Resource ds=resourceConverter.fromPropertyString(driverPropertyString);  try {    assertEquals(propertyString,resourceConverter.getParametersAsASemicolonDelimitedString(ds));  } catch (  ComparisonFailure e) {    assertEquals("path=c:\\users\\me;user=APP",resourceConverter.getParametersAsASemicolonDelimitedString(ds));  }}  }
class C{  private ReturnStatement createReturnStatement(final MethodInvocation invocation){  Assert.isNotNull(invocation);  final ReturnStatement statement=invocation.getAST().newReturnStatement();  statement.setExpression(invocation);  return statement;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void createCalibrationCharts(String colorScheme,SortedMap<Integer,Integer[]> distanceTripMap,SortedMap<Integer,Integer[]> travelTimeTripMap,SortedMap<Integer,Integer[]> numberTripsPerMode,String path,String surveyName) throws IOException {  path=path.substring(0,path.lastIndexOf("/")) + "/calibration" + path.substring(path.lastIndexOf("/"),path.length());  getSimulationData(distanceTripMap,travelTimeTripMap,numberTripsPerMode);  simulationDistDataset.calculateSharesAndTotals();  simulationTTDataset.calculateSharesAndTotals();  commonColorScheme=colorScheme;  createModeShareStackedBarChart(surveyName + " Mode Share per Distance Class",path + fileTripDistanceByModeBenchmark,surveyDistDataset,"Distance [km]","Mode share [%]");  createModeShareStackedBarChart("Simulation Mode Share per Distance Class",path + fileTripDistanceByModeSimulation,simulationDistDataset,"Distance [km]","Mode share [%]");  createModeShareComparisonChart("Modeshare per Distance Class - " + surveyName + " vs. Simulation",path + fileTripDistanceByModeComparison,simulationDistDataset,surveyDistDataset,"Distance [km]","Bias mode share [%]");  createCummulativeModeShareChart(surveyName + " Cumulative Mode Share per Distance Class",path + fileCumulativeTripDistanceByModeBenchmark,surveyDistDataset,"Distance [km]","Cumulative mode share [%]");  createCummulativeModeShareChart("Simulation Cumulative Mode Share per Distance Class",path + fileCumulativeTripDistanceByModeSimulation,simulationDistDataset,"Distance [km]","Cumulative mode share [%]");  createCummulativeModeShareComparisonChart("Cummulative Modeshare per Distance Class - " + surveyName + " vs. Simulation",path + fileCumulativeTripDistanceByModeComparison,simulationDistDataset,surveyDistDataset,"Distance [km]","Bias cumulative mode share (%)");  createModeShareStackedBarChart(surveyName + " Mode Share per Travel Time Class",path + fileTripTTByModeBenchmark,surveyTTDataset,"Travel Time [min]","Mode share [%]");  createModeShareStackedBarChart("Simulation Mode Share per Travel Time Class",path + fileTripTTByModeSimulation,simulationTTDataset,"Travel Time [min]","Mode share [%]");  createModeShareComparisonChart("Modeshare per Travel Time - " + surveyName + " vs. Simulation",path + fileTripTTByModeComparison,simulationTTDataset,surveyTTDataset,"Travel Time [min]","Bias mode share [%]");  createCummulativeModeShareChart(surveyName + " Cumulative Mode Share per Travel Time Class",path + fileCumulativeTripTTByModeBenchmark,surveyTTDataset,"Travel Time [min]","Cumulative mode share [%]");  createCummulativeModeShareChart("Simulation Cumulative Mode Share per Travel Time Class",path + fileCumModeshareTTSimulation,simulationTTDataset,"Travel Time [min]","Cumulative mode share [%]");  createCummulativeModeShareComparisonChart("Cummulative Modeshare per Travel Time Class - " + surveyName + " vs. Simulation",path + fileCumModeshareTTComparison,simulationTTDataset,surveyTTDataset,"Travel Time [min]","Bias cumulative mode share (%)");  createModeShareHistoryChart("Simulation Modeshare",path.substring(0,path.indexOf("ITERS")) + fileModeshareHistory,modeShareHistoryDataset,"Iteration","Mode share [%]",surveyTTDataset);}  }
class C{  private void checkCRC(){  int x=64;  mCRC[1]=CRC.PASSED;  while (x < mMessage.size()) {    mMessage=Golay24.checkAndCorrect(mMessage,x);    if (!(mMessage.getCRC() == CRC.PASSED)) {      mCRC[1]=CRC.FAILED_CRC;    }    x+=24;  }  int[] input=new int[63];  int[] output=new int[63];  input[0]=mMessage.getInt(RS_HEX_11);  input[1]=mMessage.getInt(RS_HEX_10);  input[2]=mMessage.getInt(RS_HEX_9);  input[3]=mMessage.getInt(RS_HEX_8);  input[4]=mMessage.getInt(RS_HEX_7);  input[5]=mMessage.getInt(RS_HEX_6);  input[6]=mMessage.getInt(RS_HEX_5);  input[7]=mMessage.getInt(RS_HEX_4);  input[8]=mMessage.getInt(RS_HEX_3);  input[9]=mMessage.getInt(RS_HEX_2);  input[10]=mMessage.getInt(RS_HEX_1);  input[11]=mMessage.getInt(RS_HEX_0);  input[12]=mMessage.getInt(LC_HEX_11);  input[13]=mMessage.getInt(LC_HEX_10);  input[14]=mMessage.getInt(LC_HEX_9);  input[15]=mMessage.getInt(LC_HEX_8);  input[16]=mMessage.getInt(LC_HEX_7);  input[17]=mMessage.getInt(LC_HEX_6);  input[18]=mMessage.getInt(LC_HEX_5);  input[19]=mMessage.getInt(LC_HEX_4);  input[20]=mMessage.getInt(LC_HEX_3);  input[21]=mMessage.getInt(LC_HEX_2);  input[22]=mMessage.getInt(LC_HEX_1);  input[23]=mMessage.getInt(LC_HEX_0);  boolean irrecoverableErrors=mReedSolomonDecoder.decode(input,output);  if (irrecoverableErrors) {    mCRC[2]=CRC.FAILED_CRC;  } else {    mCRC[2]=CRC.PASSED;    repairHexCodeword(input,output,12,LC_HEX_11);    repairHexCodeword(input,output,13,LC_HEX_10);    repairHexCodeword(input,output,14,LC_HEX_9);    repairHexCodeword(input,output,15,LC_HEX_8);    repairHexCodeword(input,output,16,LC_HEX_7);    repairHexCodeword(input,output,17,LC_HEX_6);    repairHexCodeword(input,output,18,LC_HEX_5);    repairHexCodeword(input,output,19,LC_HEX_4);    repairHexCodeword(input,output,20,LC_HEX_3);    repairHexCodeword(input,output,21,LC_HEX_2);    repairHexCodeword(input,output,22,LC_HEX_1);    repairHexCodeword(input,output,23,LC_HEX_0);    if (mCRC[1] == CRC.FAILED_CRC) {      mCRC[1]=CRC.CORRECTED;    }  }}  }
class C{  public static synchronized void error(String message){  LogFactory.getLog(ToolBox.getCaller()).error(message);}  }
class C{  public int copyTo(byte[] buffer,int rowOffset,int blobTail){  byte[] blockBuffer=_block.getBuffer();  System.arraycopy(blockBuffer,_rowOffset,buffer,rowOffset,_length);  return _row.copyBlobs(blockBuffer,_rowOffset,buffer,rowOffset,blobTail);}  }
class C{  public void clear(){  if (data != null) {    for (int i=0; i < (length * 5); i++)     data[i]=null;  }  length=0;}  }
class C{  public static short[] toShortArray(Boolean[] array){  short[] result=new short[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i] ? (short)1 : (short)0;  }  return result;}  }
class C{  public static boolean isSolaris(){  return osName.indexOf("Solaris") > -1 || osName.indexOf("SunOS") > -1;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  private Node<T> newNode(){  Node<T> ret;  Node<T> newFree;  do {    ret=freeNode;    if (ret == null)     return new Node<T>();    newFree=ret.next;  } while (!casNewNode(ret,newFree));  return ret;}  }
class C{  public boolean isEmpty(){  return listeners.length == 0;}  }
class C{  public static Validator<CharSequence> maxLength(@NonNull final CharSequence errorMessage,final int maxLength){  return new MaxLengthValidator(errorMessage,maxLength);}  }
class C{  @Override public boolean containsKey(Object key){  if (key == null) {    key=NULL_OBJECT;  }  int index=findIndex(key,elementData);  return elementData[index] == key;}  }
class C{  private VOUserDetails createUserAndReRetrieveIt() throws NonUniqueBusinessKeyException, MailOperationException, ValidationException, UserRoleAssignmentException, OperationPendingException {  VOUserDetails user=createTestUser();  idMgmt.createUser(user,Collections.<UserRoleType>emptyList(),MP_ID);  return retrieveUser(user);}  }
class C{  public Tasks<FileShareRestRep> resumeContinousCopies(URI id,FileReplicationParam param){  UriBuilder builder=client.uriBuilder(getIdUrl() + "/protection/continuous-copies/resume");  URI targetUri=builder.build(id);  return postTasks(param,targetUri.getPath());}  }
class C{  public static DeathmatchState createStartState(final int level){  final DeathmatchState deathmatchState=new DeathmatchState();  deathmatchState.lifecycleState=DeathmatchLifecycle.START;  deathmatchState.date=new Date().getTime();  deathmatchState.level=level - 2;  if (deathmatchState.level < 1) {    deathmatchState.level=1;  }  deathmatchState.points=0;  return deathmatchState;}  }
class C{  private void loadGroupGocs(){  getLoaderManager().restartLoader(AppConstants.Loaders.LOAD_SUGGESTIONS_TAGS,null,this);}  }
class C{  public static boolean isAlphaSpace(String str){  if (str == null) {    return false;  }  int sz=str.length();  for (int i=0; i < sz; i++) {    if ((Character.isLetter(str.charAt(i)) == false) && (str.charAt(i) != ' ')) {      return false;    }  }  return true;}  }
class C{  public BasicMediaNode(BasicMediaSource inSource,BasicMediaNode inParent){  mySource=inSource;  parent=inParent;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public String[] suggestSimilar(String word,int numSug,IndexReader ir,String field,SuggestMode suggestMode,float accuracy) throws IOException {  final IndexSearcher indexSearcher=obtainSearcher();  try {    if (ir == null || field == null) {      suggestMode=SuggestMode.SUGGEST_ALWAYS;    }    if (suggestMode == SuggestMode.SUGGEST_ALWAYS) {      ir=null;      field=null;    }    final int lengthWord=word.length();    final int freq=(ir != null && field != null) ? ir.docFreq(new Term(field,word)) : 0;    final int goalFreq=suggestMode == SuggestMode.SUGGEST_MORE_POPULAR ? freq : 0;    if (suggestMode == SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX && freq > 0) {      return new String[]{word};    }    BooleanQuery.Builder query=new BooleanQuery.Builder();    String[] grams;    String key;    for (int ng=getMin(lengthWord); ng <= getMax(lengthWord); ng++) {      key="gram" + ng;      grams=formGrams(word,ng);      if (grams.length == 0) {        continue;      }      if (bStart > 0) {        add(query,"start" + ng,grams[0],bStart);      }      if (bEnd > 0) {        add(query,"end" + ng,grams[grams.length - 1],bEnd);      }      for (int i=0; i < grams.length; i++) {        add(query,key,grams[i]);      }    }    int maxHits=10 * numSug;    ScoreDoc[] hits=indexSearcher.search(query.build(),maxHits).scoreDocs;    SuggestWordQueue sugQueue=new SuggestWordQueue(numSug,comparator);    int stop=Math.min(hits.length,maxHits);    SuggestWord sugWord=new SuggestWord();    for (int i=0; i < stop; i++) {      sugWord.string=indexSearcher.doc(hits[i].doc).get(F_WORD);      if (sugWord.string.equals(word)) {        continue;      }      sugWord.score=sd.getDistance(word,sugWord.string);      if (sugWord.score < accuracy) {        continue;      }      if (ir != null && field != null) {        sugWord.freq=ir.docFreq(new Term(field,sugWord.string));        if ((suggestMode == SuggestMode.SUGGEST_MORE_POPULAR && goalFreq > sugWord.freq) || sugWord.freq < 1) {          continue;        }      }      sugQueue.insertWithOverflow(sugWord);      if (sugQueue.size() == numSug) {        accuracy=sugQueue.top().score;      }      sugWord=new SuggestWord();    }    String[] list=new String[sugQueue.size()];    for (int i=sugQueue.size() - 1; i >= 0; i--) {      list[i]=sugQueue.pop().string;    }    return list;  }  finally {    releaseSearcher(indexSearcher);  }}  }
class C{  public CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces){  return new CSVFormat(delimiter,quoteChar,quotePolicy,commentStart,escape,ignoreSurroundingSpaces,ignoreEmptyLines,recordSeparator,nullString,header,skipHeaderRecord);}  }
class C{  @Override protected void before() throws Throwable {  log.info("Starting {}: {}",this.getClass().getSimpleName(),getServerName());  this.start();  super.before();}  }
class C{  final void removeUnusedMarks(){  int n=marks.size();  MarkVector cleaned=new MarkVector(n);  for (int i=0; i < n; i++) {    MarkData mark=marks.elementAt(i);    if (mark.get() != null) {      cleaned.addElement(mark);    }  }  marks=cleaned;  unusedMarks=0;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public boolean supportsIntegrityEnhancementFacility(){  debugCodeCall("supportsIntegrityEnhancementFacility");  return true;}  }
class C{  private static void list(IgniteFileSystem fs,IgfsPath path) throws IgniteException {  assert fs != null;  assert path != null;  assert fs.info(path).isDirectory();  Collection<IgfsPath> files=fs.listPaths(path);  if (files.isEmpty()) {    System.out.println();    System.out.println(">>> No files in directory: " + path);  } else {    System.out.println();    System.out.println(">>> List of files in directory: " + path);    for (    IgfsPath f : files)     System.out.println(">>>     " + f.name());  }  System.out.println();}  }
class C{  public Insets insets(){  return getInsets();}  }
class C{  public Socket connect(InetAddress inetadd,int port,int timeout,ConnectionWatcher optionalWatcher,boolean clientSide) throws IOException {  return connect(inetadd,port,timeout,optionalWatcher,clientSide,-1);}  }
class C{  public void scheduleUpdate(Runnable runnable){  runner.invokeLater(runnable);}  }
class C{  public StatusDetail toWarning(final String message){  return statusDetail(name,WARNING,message,details);}  }
class C{  public boolean containsKey(Object key){  return indexOfKey(key) >= 0;}  }
class C{  public String mosesString(){  StringBuilder outputString=new StringBuilder();  HashSet<String> printed_keys=new HashSet<>();  for (int i=0; i < DENSE_FEATURE_NAMES.size(); i++) {    outputString.append(String.format("%s=%.3f ",DENSE_FEATURE_NAMES.get(i).replaceAll("_","-"),getDense(i)));    printed_keys.add(DENSE_FEATURE_NAMES.get(i));  }  ArrayList<String> keys=new ArrayList<>(sparseFeatures.keySet());  Collections.sort(keys);  for (  String key : keys) {    if (!printed_keys.contains(key)) {      float value=sparseFeatures.get(key);      if (key.equals("OOVPenalty"))       key="OOV_Penalty";      outputString.append(String.format("%s=%.3f ",key,value));    }  }  return outputString.toString().trim();}  }
class C{  public static Integer appendTextNodeComment(final SQLProvider provider,final INaviTextNode textNode,final String commentText,final Integer userId) throws CouldntSaveDataException {  Preconditions.checkNotNull(provider,"IE02461: provider argument can not be null");  Preconditions.checkNotNull(textNode,"IE02462: textNode argument can not be null");  Preconditions.checkNotNull(commentText,"IE02463: commentText argument can not be null");  Preconditions.checkNotNull(userId,"IE02464: userId argument can not be null");  final String function=" { ? = call append_text_node_comment(?, ?, ?) } ";  try {    final CallableStatement appendCommentFunction=provider.getConnection().getConnection().prepareCall(function);    try {      appendCommentFunction.registerOutParameter(1,Types.INTEGER);      appendCommentFunction.setInt(2,textNode.getId());      appendCommentFunction.setInt(3,userId);      appendCommentFunction.setString(4,commentText);      appendCommentFunction.execute();      final Integer commentId=appendCommentFunction.getInt(1);      if (appendCommentFunction.wasNull()) {        throw new CouldntSaveDataException("Error: Got an comment id of null from the database");      }      return commentId;    }  finally {      appendCommentFunction.close();    }  } catch (  final SQLException exception) {    throw new CouldntSaveDataException(exception);  }}  }
class C{  public static void postDirect(String url,AsyncHttpResponseHandler handler){  client.post(url,handler);  TLog.log(TAG,"POST " + url);}  }
class C{  public TreeViewerColumnBuilder format(IValueFormatter<?> valueFormatter){  this.valueFormatter=valueFormatter;  return this;}  }
class C{  public static List<String> refNames(Collection<? extends NamedRelatedResourceRep> refs){  List<String> names=new ArrayList<String>();  if (refs != null) {    for (    NamedRelatedResourceRep ref : refs) {      names.add(ref.getName());    }  }  return names;}  }
class C{  public SRuntimeSwitch(){  if (modelPackage == null) {    modelPackage=SRuntimePackage.eINSTANCE;  }}  }
class C{  private Bitmap downSampleBitmap(Uri selectedImage) throws FileNotFoundException {  BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeStream(getActivity().getContentResolver().openInputStream(selectedImage),null,options);  ImageView imageView=(ImageView)getActivity().findViewById(R.id.imageViewUploadImage);  int requiredSize=Math.min(imageView.getWidth(),imageView.getHeight());  int width=options.outWidth, height=options.outHeight;  int scale=1;  while (true) {    if (width / 2 < requiredSize || height / 2 < requiredSize) {      break;    }    width/=2;    height/=2;    scale*=2;  }  BitmapFactory.Options options2=new BitmapFactory.Options();  options2.inSampleSize=scale;  return BitmapFactory.decodeStream(getActivity().getContentResolver().openInputStream(selectedImage),null,options2);}  }
class C{  public OptionSet addLocationPath(String segment){  if (segment == null)   throw new IllegalArgumentException("Location-Path option must not be null");  if (segment.getBytes(CoAP.UTF8_CHARSET).length > 255)   throw new IllegalArgumentException("Location-Path option must be smaller or euqal to 255 bytes (UTF-8 encoded): " + segment);  getLocationPath().add(segment);  return this;}  }
class C{  @Override public void onLoadResource(WebView view,String url){  if (url != null && url.length() > 0) {    if (mCurrentState.mSecurityState == SecurityState.SECURITY_STATE_SECURE) {      if (!(URLUtil.isHttpsUrl(url) || URLUtil.isDataUrl(url) || URLUtil.isAboutUrl(url))) {        mCurrentState.mSecurityState=SecurityState.SECURITY_STATE_MIXED;      }    }  }}  }
class C{  public Expression copyInline(Context ctx){  InlineMethodExpression e=(InlineMethodExpression)clone();  if (body != null) {    e.body=body.copyInline(ctx,true);  }  return e;}  }
class C{  private Object[] newElementArray(int s){  return new Object[s];}  }
class C{  public static void releaseLocal(@Local String local){}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.380 -0500",hash_original_method="C0C76FDDC989F4AB02663C4A842CB735",hash_generated_method="AEAE79DA8922F05782BBF3E4E55FD854") public static String toString(char value){  return String.valueOf(value);}  }
class C{  public boolean isProposeFileName(){  return proposeFileName;}  }
class C{  public static void registerSemiDisposableBlock(String oreDictName){  semiDisposableBlocks.add(oreDictName);}  }
class C{  public static SidedPlane constructNormalizedPerpendicularSidedPlane(final Vector insidePoint,final Vector normalVector,final Vector point1,final Vector point2){  final Vector pointsVector=new Vector(point1.x - point2.x,point1.y - point2.y,point1.z - point2.z);  final Vector newNormalVector=new Vector(normalVector,pointsVector);  try {    return new SidedPlane(insidePoint,newNormalVector,-newNormalVector.dotProduct(point1));  } catch (  IllegalArgumentException e) {    return null;  }}  }
class C{  public void inclRange(int start,int limit){  Assert.check(currentState != BitsState.UNKNOWN);  sizeTo((limit >>> wordshift) + 1);  for (int x=start; x < limit; x++) {    bits[x >>> wordshift]=bits[x >>> wordshift] | (1 << (x & wordmask));  }  currentState=BitsState.NORMAL;}  }
class C{  static Record createRecord(String name,JsonObject location,JsonObject metadata){  Objects.requireNonNull(name);  Objects.requireNonNull(location);  Record record=new Record().setName(name).setType(TYPE).setLocation(location);  if (metadata != null) {    record.setMetadata(metadata);  }  record.setMetadata(new JsonObject().put(DS_TYPE,DEFAULT_TYPE));  return record;}  }
class C{  private void performVariationNoDuplication(IR ir){  cbsReg=ir.regpool.makeTempInt();  ArrayList<Instruction> instrumentationOperations=new ArrayList<Instruction>();  for (Enumeration<BasicBlock> allBB=ir.getBasicBlocks(); allBB.hasMoreElements(); ) {    BasicBlock bb=allBB.nextElement();    for (Enumeration<Instruction> ie=bb.forwardInstrEnumerator(); ie.hasMoreElements(); ) {      Instruction i=ie.nextElement();      if (isInstrumentationInstruction(i)) {        instrumentationOperations.add(i);      }    }  }  for (  Instruction i : instrumentationOperations) {    BasicBlock bb=i.getBasicBlock();    conditionalizeInstrumentationOperation(ir,i,bb);  }}  }
class C{  void addIndexData(IndexCreationData icd){  this.indexes.add(icd);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override protected synchronized Class<?> loadClass(String name,boolean resolve) throws ClassNotFoundException {  Class c=findLoadedClass(name);  if ((c == null) && (myLoader != null) && (myLoader != targetLoader)) {    try {      c=myLoader.loadClass(name);    } catch (    ClassNotFoundException ignored) {      if (LOGGER.isLoggable(Level.FINEST)) {        LOGGER.log(Level.FINEST,"Ignoring ClassNotFoundException, continuing with parent ClassLoader.",ignored);      }    }  }  if (c == null) {    c=super.loadClass(name,false);  }  if (resolve) {    resolveClass(c);  }  return c;}  }
class C{  public CTagNodeAction(final JFrame parent,final JTree tagsTree,final NaviNode node){  super("Tag Node");  Preconditions.checkNotNull(parent,"IE02165: Parent argument can not be null");  Preconditions.checkNotNull(tagsTree,"IE02166: Tags tree argument can not be null");  Preconditions.checkNotNull(node,"IE02167: Node argument can not be null");  m_parent=parent;  m_tagsTree=tagsTree;  m_node=node;}  }
class C{  public void testConstructorSetsPropertyDefaults() throws Exception {  assertEquals(configuration.getPropertyValue(WebLogicPropertySet.ADMIN_USER),"weblogic");  assertEquals(configuration.getPropertyValue(WebLogicPropertySet.ADMIN_PWD),"weblogic");  assertEquals(configuration.getPropertyValue(WebLogicPropertySet.SERVER),"server");  assertEquals(configuration.getPropertyValue(WebLogicPropertySet.CONFIGURATION_VERSION),"12.1.1.0");  assertEquals(configuration.getPropertyValue(WebLogicPropertySet.DOMAIN_VERSION),"12.1.1.0");}  }
class C{  final double internalNextDouble(double origin,double bound){  double r=(nextLong() >>> 11) * DOUBLE_UNIT;  if (origin < bound) {    r=r * (bound - origin) + origin;    if (r >= bound)     r=Double.longBitsToDouble(Double.doubleToLongBits(bound) - 1);  }  return r;}  }
class C{  public void disconnected(){}  }
class C{  public static boolean excludeByPackage(String pkg,List<String> excludePkg){  for (  String ep : excludePkg) {    if (pkg.matches(ep)) {      return true;    }  }  return false;}  }
class C{  @DELETE @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/exports/{protocol},{secType},{perm},{rootMapping}") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.ANY}) public TaskResourceRep unexport(@PathParam("id") URI id,@PathParam("protocol") String protocol,@PathParam("secType") String securityType,@PathParam("perm") String permissions,@PathParam("rootMapping") String rootUserMapping) throws InternalException {  String task=UUID.randomUUID().toString();  ArgValidator.checkFieldUriType(id,Snapshot.class,"id");  Snapshot snap=queryResource(id);  FileShare fs=_permissionsHelper.getObjectById(snap.getParent(),FileShare.class);  ArgValidator.checkFieldNotNull(protocol,"protocol");  ArgValidator.checkFieldNotNull(securityType,"secType");  ArgValidator.checkFieldNotNull(permissions,"perm");  ArgValidator.checkFieldNotNull(rootUserMapping,"rootMapping");  if (snap.getFsExports() == null || snap.getFsExports().isEmpty()) {    String message="Export does not exist";    return getSuccessResponse(snap,task,ResourceOperationTypeEnum.UNEXPORT_FILE_SNAPSHOT,message);  }  ArgValidator.checkEntity(snap,id,isIdEmbeddedInURL(id));  StorageSystem device=_dbClient.queryObject(StorageSystem.class,fs.getStorageDevice());  FileController controller=getController(FileController.class,device.getSystemType());  String path=snap.getPath();  _log.info(String.format("securityType %1$s, permissions %2$s, rootMapping %3$s %4$s",securityType,permissions,rootUserMapping,path));  FileExport fileSnapExport=snap.getFsExports().get(FileExport.exportLookupKey(protocol,securityType,permissions,rootUserMapping,path));  if (fileSnapExport == null) {    String message="Export does not exist";    return getSuccessResponse(snap,task,ResourceOperationTypeEnum.UNEXPORT_FILE_SNAPSHOT,message);  }  List<String> endpoints=new ArrayList<String>();  FileShareExport export=new FileShareExport(endpoints,securityType,permissions,rootUserMapping,protocol,fileSnapExport.getStoragePortName(),fileSnapExport.getStoragePort(),fileSnapExport.getPath());  export.setIsilonId(fileSnapExport.getIsilonId());  Operation op=_dbClient.createTaskOpStatus(Snapshot.class,snap.getId(),task,ResourceOperationTypeEnum.UNEXPORT_FILE_SNAPSHOT);  controller.unexport(device.getId(),snap.getId(),Arrays.asList(export),task);  auditOp(OperationTypeEnum.UNEXPORT_FILE_SNAPSHOT,true,AuditLogManager.AUDITOP_BEGIN,snap.getId().toString(),device.getId().toString(),securityType,permissions,rootUserMapping,protocol);  return toTask(snap,task,op);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaFile mf=getMediaFile(stack);  return mf == null ? "" : mf.getName();}  }
class C{  public static void registerSettingsBundle(ResourceBundle bundle){  registerSettingsBundle(bundle,false);}  }
class C{  public void statistics(File directory,List archiveNames,boolean details,boolean nofilter,boolean persec,boolean persample,boolean prunezeros,boolean monitor,long startTime,long endTime,List cmdLineSpecs){  if (persec && nofilter) {    throw new IllegalArgumentException(LocalizedStrings.SystemAdmin_THE_NOFILTER_AND_PERSEC_OPTIONS_ARE_MUTUALLY_EXCLUSIVE.toLocalizedString());  }  if (persec && persample) {    throw new IllegalArgumentException(LocalizedStrings.SystemAdmin_THE_PERSAMPLE_AND_PERSEC_OPTIONS_ARE_MUTUALLY_EXCLUSIVE.toLocalizedString());  }  if (nofilter && persample) {    throw new IllegalArgumentException(LocalizedStrings.SystemAdmin_THE_PERSAMPLE_AND_NOFILTER_OPTIONS_ARE_MUTUALLY_EXCLUSIVE.toLocalizedString());  }  StatSpec[] specs=createSpecs(cmdLineSpecs);  if (archiveOption != null) {    if (directory != null) {      throw new IllegalArgumentException(LocalizedStrings.SystemAdmin_THE_ARCHIVE_AND_DIR_OPTIONS_ARE_MUTUALLY_EXCLUSIVE.toLocalizedString());    }    StatArchiveReader reader=null;    boolean interrupted=false;    try {      reader=new StatArchiveReader((File[])archiveNames.toArray(new File[archiveNames.size()]),specs,!monitor);      if (specs.length == 0) {        if (details) {          StatArchiveReader.StatArchiveFile[] archives=reader.getArchives();          for (int i=0; i < archives.length; i++) {            System.out.println(archives[i].getArchiveInfo().toString());          }        }      }      do {        if (specs.length == 0) {          Iterator it=reader.getResourceInstList().iterator();          while (it.hasNext()) {            ResourceInst inst=(ResourceInst)it.next();            StatValue values[]=inst.getStatValues();            boolean firstTime=true;            for (int i=0; i < values.length; i++) {              if (values[i] != null && values[i].hasValueChanged()) {                if (firstTime) {                  firstTime=false;                  System.out.println(inst.toString());                }                printStatValue(values[i],startTime,endTime,nofilter,persec,persample,prunezeros,details);              }            }          }        } else {          Map<CombinedResources,List<StatValue>> allSpecsMap=new HashMap<CombinedResources,List<StatValue>>();          for (int i=0; i < specs.length; i++) {            StatValue[] values=reader.matchSpec(specs[i]);            if (values.length == 0) {              if (!quiet) {                System.err.println(LocalizedStrings.SystemAdmin_WARNING_NO_STATS_MATCHED_0.toLocalizedString(specs[i].cmdLineSpec));              }            } else {              Map<CombinedResources,List<StatValue>> specMap=new HashMap<CombinedResources,List<StatValue>>();              for (              StatValue v : values) {                CombinedResources key=new CombinedResources(v);                List<StatArchiveReader.StatValue> list=specMap.get(key);                if (list != null) {                  list.add(v);                } else {                  specMap.put(key,new ArrayList<StatValue>(Collections.singletonList(v)));                }              }              if (!quiet) {                System.out.println(LocalizedStrings.SystemAdmin_INFO_FOUND_0_MATCHES_FOR_1.toLocalizedString(new Object[]{Integer.valueOf(specMap.size()),specs[i].cmdLineSpec}));              }              for (              Map.Entry<CombinedResources,List<StatValue>> me : specMap.entrySet()) {                List<StatArchiveReader.StatValue> list=allSpecsMap.get(me.getKey());                if (list != null) {                  list.addAll(me.getValue());                } else {                  allSpecsMap.put(me.getKey(),me.getValue());                }              }            }          }          for (          Map.Entry<CombinedResources,List<StatValue>> me : allSpecsMap.entrySet()) {            System.out.println(me.getKey());            for (            StatValue v : me.getValue()) {              printStatValue(v,startTime,endTime,nofilter,persec,persample,prunezeros,details);            }          }        }        if (monitor) {          while (!reader.update()) {            try {              Thread.sleep(1000);            } catch (            InterruptedException ignore) {              interrupted=true;            }          }        }      } while (monitor && !interrupted);    } catch (    IOException ex) {      throw new GemFireIOException(LocalizedStrings.SystemAdmin_FAILED_READING_0.toLocalizedString(archiveOption),ex);    } finally {      if (reader != null) {        try {          reader.close();        } catch (        IOException ignore) {        }      }      if (interrupted) {        Thread.currentThread().interrupt();      }    }  }}  }
class C{  public static String arrayCombine(String[] list,char separatorChar){  StatementBuilder buff=new StatementBuilder();  for (  String s : list) {    buff.appendExceptFirst(String.valueOf(separatorChar));    if (s == null) {      s="";    }    for (int j=0, length=s.length(); j < length; j++) {      char c=s.charAt(j);      if (c == '\\' || c == separatorChar) {        buff.append('\\');      }      buff.append(c);    }  }  return buff.toString();}  }
class C{  public static MatrixBlock readMatrixFromHDFS(ReadProperties prop) throws IOException {  long estnnz=(long)(prop.expectedSparsity * prop.rlen * prop.clen);  MatrixBlock ret=null;  try {    MatrixReader reader=MatrixReaderFactory.createMatrixReader(prop);    ret=reader.readMatrixFromHDFS(prop.path,prop.rlen,prop.clen,prop.brlen,prop.bclen,estnnz);  } catch (  DMLRuntimeException rex) {    throw new IOException(rex);  }  return ret;}  }
class C{  public Composer initialVelocityY(float velocityY){  mInitialVelocityY=velocityY;  return this;}  }
class C{  public boolean canUseEnergy(double amount){  return energyStored >= amount;}  }
class C{  public boolean canInvert(){  return true;}  }
class C{  public void close() throws IOException {  this.writer.close();}  }
class C{  public PercolateSourceBuilder addSort(SortBuilder sort){  if (sorts == null) {    sorts=new ArrayList<>();  }  sorts.add(sort);  return this;}  }
class C{  public boolean isSpecified(int index){  if (index < 0 || index >= getLength())   throw new ArrayIndexOutOfBoundsException("No attribute at index: " + index);  return specified[index];}  }
class C{  public String showServiceList(){  services=null;  return OUTCOME_SHOW_SERVICE_LIST;}  }
class C{  public void startTest(Test test){  final int count=test.countTestCases();synchronized (this) {    fRunTests+=count;  }  for (  TestListener each : cloneListeners()) {    each.startTest(test);  }}  }
class C{  private TypedClassOperation instantiateOperationTypes(TypedClassOperation operation){  List<TypeVariable> typeParameters=operation.getTypeParameters();  if (typeParameters.isEmpty()) {    return operation;  }  Substitution<ReferenceType> substitution=selectSubstitution(typeParameters);  if (substitution == null) {    return null;  }  return operation.apply(substitution);}  }
class C{  @Override public void test() throws ParameterException {  Set<Object> numbers=new HashSet<>();  for (  Parameter<?> param : parameters) {    if (param.isDefined() && !numbers.add(param.getValue())) {      throw new WrongParameterValueException("Global Parameter Constraint Error:\n" + "Parameters " + OptionUtil.optionsNamesToString(parameters) + " must have different values. Current values: "+ OptionUtil.parameterNamesAndValuesToString(parameters)+ ".\n");    }  }}  }
class C{  public static void markAsLogged(ObjectReference object){  byte value=VM.objectModel.readAvailableByte(object);  VM.objectModel.writeAvailableByte(object,(byte)(value & ~UNLOGGED_BIT));}  }
class C{  private Object readResolve() throws ObjectStreamException {  Object result=null;  if (this.equals(PieLabelLinkStyle.STANDARD)) {    result=PieLabelLinkStyle.STANDARD;  } else   if (this.equals(PieLabelLinkStyle.QUAD_CURVE)) {    result=PieLabelLinkStyle.QUAD_CURVE;  } else   if (this.equals(PieLabelLinkStyle.CUBIC_CURVE)) {    result=PieLabelLinkStyle.CUBIC_CURVE;  }  return result;}  }
class C{  public void paint(Graphics g,Shape allocation){  Rectangle alloc=allocation.getBounds();  m_view.setSize(alloc.width,alloc.height);  Shape oldClip=g.getClip();  g.setClip(alloc);  m_view.paint(g,allocation);  g.setClip(oldClip);}  }
class C{  public void testAbsMathContextNeg(){  String a="-123809648392384754573567356745735.63567890295784902768787678287E+21";  BigDecimal aNumber=new BigDecimal(a);  int precision=15;  RoundingMode rm=RoundingMode.HALF_DOWN;  MathContext mc=new MathContext(precision,rm);  String result="1.23809648392385E+53";  int resScale=-39;  BigDecimal res=aNumber.abs(mc);  assertEquals("incorrect value",result,res.toString());  assertEquals("incorrect scale",resScale,res.scale());}  }
class C{  public ContextReporter(ChromeActivity activity,GSAContextReportDelegate controller){  mActivity=activity;  mDelegate=controller;  mContextInUse=new AtomicBoolean(false);  Log.d(TAG,"Created a new ContextReporter");}  }
class C{  protected int retrieveEndOfElementTypeNamePosition(int start,int end){  this.scanner.resetTo(start,end);  try {    int token;    while ((token=this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {switch (token) {case TerminalTokens.TokenNameIdentifier:case TerminalTokens.TokenNamebyte:case TerminalTokens.TokenNamechar:case TerminalTokens.TokenNamedouble:case TerminalTokens.TokenNamefloat:case TerminalTokens.TokenNameint:case TerminalTokens.TokenNamelong:case TerminalTokens.TokenNameshort:case TerminalTokens.TokenNameboolean:        return this.scanner.currentPosition - 1;    }  }} catch (InvalidInputException e) {}return -1;}  }
class C{  public VonMises(double freedom,RandomEngine randomGenerator){  setRandomGenerator(randomGenerator);  setState(freedom);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:15.341 -0500",hash_original_method="D5F3AC00421DA10DEFBB832E0EC3BAC8",hash_generated_method="604C205CA2B5AF9DED4087586B8BA844") public boolean offer(E e,long timeout,TimeUnit unit) throws InterruptedException {  add(e);  return getTaintBoolean();}  }
class C{  public TabularComparison(SessionModel model1,SessionModel model2,Parameters params){  if (params == null) {    throw new NullPointerException("Parameters must not be null");  }  if (model2 == null) {    model2=new DagWrapper(new Dag());  }  if (model1 == null) {    model1=new DagWrapper(new Dag());  }  if (!(model1 instanceof MultipleGraphSource) || !(model2 instanceof MultipleGraphSource)) {    throw new IllegalArgumentException("Must be graph sources.");  }  if (model1 instanceof GeneralAlgorithmRunner && model2 instanceof GeneralAlgorithmRunner) {    throw new IllegalArgumentException("Both parents can't be general algorithm runners.");  }  if (model1 instanceof GeneralAlgorithmRunner) {    GeneralAlgorithmRunner generalAlgorithmRunner=(GeneralAlgorithmRunner)model1;    this.algorithm=generalAlgorithmRunner.getAlgorithm();  } else   if (model2 instanceof GeneralAlgorithmRunner) {    GeneralAlgorithmRunner generalAlgorithmRunner=(GeneralAlgorithmRunner)model2;    this.algorithm=generalAlgorithmRunner.getAlgorithm();  }  String referenceName=params.getString("referenceGraphName",null);  if (referenceName == null) {    throw new IllegalArgumentException("Must specify a reference graph.");  } else {    MultipleGraphSource model11=(MultipleGraphSource)model1;    Object model21=model2;    if (referenceName.equals(model1.getName())) {      if (model11 instanceof MultipleGraphSource) {        this.referenceGraphs=((MultipleGraphSource)model11).getGraphs();      }      if (model21 instanceof MultipleGraphSource) {        this.targetGraphs=((MultipleGraphSource)model21).getGraphs();      }      if (referenceGraphs == null) {        this.referenceGraphs=Collections.singletonList(((GraphSource)model11).getGraph());      }      if (targetGraphs == null) {        this.targetGraphs=Collections.singletonList(((GraphSource)model21).getGraph());      }      this.targetName=((SessionModel)model21).getName();      this.referenceName=((SessionModel)model11).getName();    } else     if (referenceName.equals(model2.getName())) {      if (model21 instanceof MultipleGraphSource) {        this.referenceGraphs=((MultipleGraphSource)model21).getGraphs();      }      if (model11 instanceof MultipleGraphSource) {        this.targetGraphs=((MultipleGraphSource)model11).getGraphs();      }      if (referenceGraphs == null) {        this.referenceGraphs=Collections.singletonList(((GraphSource)model21).getGraph());      }      if (targetGraphs == null) {        this.targetGraphs=Collections.singletonList(((GraphSource)model11).getGraph());      }      this.targetName=((SessionModel)model11).getName();      this.referenceName=((SessionModel)model21).getName();    } else {      throw new IllegalArgumentException("Neither of the supplied session models is named '" + referenceName + "'.");    }  }  if (referenceGraphs.size() != targetGraphs.size()) {    throw new IllegalArgumentException("I was expecting the same number of graph in each parent.");  }  if (algorithm != null) {    for (int i=0; i < referenceGraphs.size(); i++) {      referenceGraphs.set(i,algorithm.getComparisonGraph(referenceGraphs.get(i)));    }  }  for (int i=0; i < targetGraphs.size(); i++) {    targetGraphs.set(i,GraphUtils.replaceNodes(targetGraphs.get(i),referenceGraphs.get(i).getNodes()));  }  newExecution();  for (int i=0; i < targetGraphs.size(); i++) {    addRecord(i);  }  TetradLogger.getInstance().log("info","Graph Comparison");}  }
class C{  public int lastIndexOf(Object node){  if (node == null || !(node instanceof GraphicsNode)) {    return -1;  }  if (((GraphicsNode)node).getParent() == this) {    for (int i=count - 1; i >= 0; i--) {      if (node == children[i]) {        return i;      }    }  }  return -1;}  }
class C{  public Builder withSortDescendingBy(String sortColumn){  builder.sortBy(sortColumn).descending();  return this;}  }
class C{  public void tupleNotMatched(Map<K,V> tuple){}  }
class C{  public void createGraphic(GraphicAttributes ga){  init();  stateMachine.setUndefined();  int renderType=OMGraphic.RENDERTYPE_UNKNOWN;  if (ga != null) {    renderType=ga.getRenderType();  }  if (Debug.debugging("eomc")) {    Debug.output("EditableOMCircle.createGraphic(): rendertype = " + renderType);  }switch (renderType) {case (OMGraphic.RENDERTYPE_LATLON):    circle=new OMCircle(90f,-180f,0f);  break;case (OMGraphic.RENDERTYPE_OFFSET):circle=new OMCircle(90f,-180f,0,0,1,1);break;default :circle=new OMCircle(-1,-1,1,1);}if (ga != null) {ga.setTo(circle,true);}}  }
class C{  private void configureWidget(Context context){  AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(context);  Widget_AlertsWidget_WidgetProvider.updateAppWidget(context,appWidgetManager,mAppWidgetId);}  }
class C{  public boolean isCast(){  return cast;}  }
class C{  public synchronized void addNodes(Collection<NodeTask> nodes){  if (CollectionUtils.isEmpty(nodes)) {    LOGGER.info("No nodes to add");    return;  }  for (  NodeTask node : nodes) {    Protos.TaskID taskId=Protos.TaskID.newBuilder().setValue(String.format("%s.%s.%s",node.getTaskPrefix(),node.getProfile().getName(),UUID.randomUUID())).build();    addTask(taskId,node);    SchedulerStateForType taskState=this.statesForTaskType.get(node.getTaskPrefix());    LOGGER.info("Marked taskId {} pending, size of pending queue for {} is: {}",taskId.getValue(),node.getTaskPrefix(),(taskState == null ? 0 : taskState.getPendingTaskIds().size()));    makeTaskPending(taskId);  }}  }
class C{  public void printTree(final EvolutionState state,final PrintWriter writer){  child.printRootedTree(state,writer,0);  writer.println();}  }
class C{  private int measureWidth(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)mTextPaint.measureText(mText) + mPaddingLeft + mPaddingRight;    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @HLEFunction(nid=0xCFB957C6,version=150) public int sceNetApctlConnect(int connIndex){  hleNetApctlConnect(connIndex);  return 0;}  }
class C{  public InvalidPreferencesFormatException(Throwable cause){  super(cause);}  }
class C{  public boolean isSetResponse(){  return this.response != null;}  }
class C{  @PreAuthorize("hasRole('ROLE_DOWNLOAD')") @Transactional(propagation=Propagation.REQUIRED) public void removeProductFromCart(Long u_id,Long p_id) throws UserNotExistingException, ProductNotExistingException {  Product product=productDao.read(p_id);  if (product == null) {    throw new ProductNotExistingException();  }  ProductCart cart=getCartOfUser(u_id);  if ((cart == null) || (cart.getProducts() == null)) {    return;  }  Iterator<Product> iterator=cart.getProducts().iterator();  while (iterator.hasNext()) {    if (iterator.next().equals(product)) {      iterator.remove();    }  }  productCartDao.update(cart);}  }
class C{  public static boolean isSupported(byte[] version){  if (version[0] != 3 || (version[1] != 0 && version[1] != 1)) {    return false;  }  return true;}  }
class C{  public UserDeletionConstraintException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  private static boolean discardStream(HttpEngine httpEngine,InputStream responseBodyIn){  Connection connection=httpEngine.connection;  if (connection == null)   return false;  Socket socket=connection.getSocket();  if (socket == null)   return false;  try {    int socketTimeout=socket.getSoTimeout();    socket.setSoTimeout(DISCARD_STREAM_TIMEOUT_MILLIS);    try {      Util.skipAll(responseBodyIn);      return true;    }  finally {      socket.setSoTimeout(socketTimeout);    }  } catch (  IOException e) {    return false;  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:18.790 -0500",hash_original_method="D27765FC19695D3D1037FEAF928DE057",hash_generated_method="8B1BEE45B5D6B721C342C65FB1EE3E1A") final E itemAt(int i){  return this.<E>cast(items[i]);}  }
class C{  public static void streamContentToBrowser(HttpServletResponse response,InputStream in,int length,String contentType,String fileName) throws IOException {  setResponseBrowserProxyNoCache(response);  response.setContentLength(length);  if (contentType != null) {    response.setContentType(contentType);  }  if (fileName != null) {    response.setHeader("Content-Disposition","attachment;filename=" + fileName);  }  OutputStream out=response.getOutputStream();  try {    streamContent(out,in,length);  } catch (  IOException e) {    out.close();    throw e;  }  out.flush();  out.close();}  }
class C{  @Override public ContinuousDistribution copy(){  return new ContinuousDistribution(variable,function.copy());}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  static void updateOverlayColorRounding(DrawableParent parent,@Nullable RoundingParams roundingParams){  Drawable child=parent.getDrawable();  if (roundingParams != null && roundingParams.getRoundingMethod() == RoundingParams.RoundingMethod.OVERLAY_COLOR) {    if (child instanceof RoundedCornersDrawable) {      RoundedCornersDrawable roundedCornersDrawable=(RoundedCornersDrawable)child;      applyRoundingParams(roundedCornersDrawable,roundingParams);      roundedCornersDrawable.setOverlayColor(roundingParams.getOverlayColor());    } else {      child=parent.setDrawable(sEmptyDrawable);      child=maybeWrapWithRoundedOverlayColor(child,roundingParams);      parent.setDrawable(child);    }  } else   if (child instanceof RoundedCornersDrawable) {    RoundedCornersDrawable roundedCornersDrawable=(RoundedCornersDrawable)child;    child=roundedCornersDrawable.setCurrent(sEmptyDrawable);    parent.setDrawable(child);    sEmptyDrawable.setCallback(null);  }}  }
class C{  private boolean charMatch(char c,OcrChar ocrC){  if (c == ocrC.getValue())   return true;  OcrChar[] variants=ocrC.getRecognitionVariants();  if (variants != null) {    for (    OcrChar var : variants) {      if (c == var.getValue())       return true;    }  }  return false;}  }
class C{  int lanczos_step(SMat A,int first,int last,double[][] wptr,double[] alf,double[] eta,double[] oldeta,double[] bet,int[] ll,boolean[] refEnough,double[] rnmp,double[] tolp,int n){  double t;  double[] mid;  double rnm=rnmp[0];  double tol=tolp[0];  double anorm;  int i, j;  for (j=first; j < last; j++) {    mid=wptr[2];    wptr[2]=wptr[1];    wptr[1]=mid;    mid=wptr[3];    wptr[3]=wptr[4];    wptr[4]=mid;    store(n,STORQ,j - 1,wptr[2]);    if (j - 1 < MAXLL)     store(n,STORP,j - 1,wptr[4]);    bet[j]=rnm;    if (0 == bet[j]) {      rnm=startv(A,wptr,j,n);      if (0 != ierr)       return j;      if (0 == rnm)       refEnough[0]=true;    }    if (refEnough[0]) {      mid=wptr[2];      wptr[2]=wptr[1];      wptr[1]=mid;      break;    }    t=1.0 / rnm;    svd_datx(n,t,wptr[0],1,wptr[1],1);    svd_dscal(n,t,wptr[3],1);    svd_opb(A,wptr[3],wptr[0],OPBTemp);    svd_daxpy(n,-rnm,wptr[2],1,wptr[0],1);    alf[j]=svd_ddot(n,wptr[0],1,wptr[3],1);    svd_daxpy(n,-alf[j],wptr[1],1,wptr[0],1);    if (j <= MAXLL && (Math.abs(alf[j - 1]) > 4.0 * Math.abs(alf[j])))     ll[0]=j;    for (i=0; i < svd_imin(ll[0],j - 1); i++) {      store(n,RETRP,i,wptr[5]);      t=svd_ddot(n,wptr[5],1,wptr[0],1);      store(n,RETRQ,i,wptr[5]);      svd_daxpy(n,-t,wptr[5],1,wptr[0],1);      eta[i]=eps1;      oldeta[i]=eps1;    }    t=svd_ddot(n,wptr[0],1,wptr[4],1);    svd_daxpy(n,-t,wptr[2],1,wptr[0],1);    if (bet[j] > 0.0)     bet[j]=bet[j] + t;    t=svd_ddot(n,wptr[0],1,wptr[3],1);    svd_daxpy(n,-t,wptr[1],1,wptr[0],1);    alf[j]=alf[j] + t;    svd_dcopy(n,wptr[0],1,wptr[4],1);    rnm=Math.sqrt(svd_ddot(n,wptr[0],1,wptr[4],1));    anorm=bet[j] + Math.abs(alf[j]) + rnm;    tol=reps * anorm;    ortbnd(alf,eta,oldeta,bet,j,rnm);    double[] ref_rnm=new double[]{rnm};    purge(n,ll[0],wptr[0],wptr[1],wptr[4],wptr[3],wptr[5],eta,oldeta,j,ref_rnm,tol);    rnm=ref_rnm[0];    if (rnm <= tol)     rnm=0.0;  }  rnmp[0]=rnm;  tolp[0]=tol;  return j;}  }
class C{  public Object decode(final Object object) throws IllegalArgumentException {  try {    final char[] charArray=object instanceof String ? ((String)object).toCharArray() : (char[])object;    return decodeHex(charArray);  } catch (  final ClassCastException e) {    throw new IllegalArgumentException(e.getMessage(),e);  }}  }
class C{  public static int dpToPx(float dp,Resources resources){  float px=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,resources.getDisplayMetrics());  return (int)px;}  }
class C{  public SPOStarConstraint(final IVariableOrConstant<IV> p,final IVariableOrConstant<IV> o){  this(p,o,false);}  }
class C{  public static <T>void writeNullableCollection(BinaryRawWriterEx writer,@Nullable Collection<T> col,@Nullable PlatformWriterClosure<T> writeClo){  writeNullableCollection(writer,col,writeClo,null);}  }
class C{  protected void addValuesPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Metadata_values_feature"),getString("_UI_PropertyDescriptor_description","_UI_Metadata_values_feature","_UI_Metadata_type"),EipPackage.Literals.METADATA__VALUES,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public ST createSingleton(Token templateToken){  String template;  if (templateToken.getType() == GroupParser.BIGSTRING || templateToken.getType() == GroupParser.BIGSTRING_NO_NL) {    template=Misc.strip(templateToken.getText(),2);  } else {    template=Misc.strip(templateToken.getText(),1);  }  CompiledST impl=compile(getFileName(),null,null,template,templateToken);  ST st=createStringTemplateInternally(impl);  st.groupThatCreatedThisInstance=this;  st.impl.hasFormalArgs=false;  st.impl.name=ST.UNKNOWN_NAME;  st.impl.defineImplicitlyDefinedTemplates(this);  return st;}  }
class C{  private int RS_MDS_Encode(int k0,int k1){  int r=k1;  for (int i=0; i < 4; i++) {    r=RS_rem(r);  }  r^=k0;  for (int i=0; i < 4; i++) {    r=RS_rem(r);  }  return r;}  }
class C{  public void remove(String key){  urlParams.remove(key);  streamParams.remove(key);  fileParams.remove(key);  urlParamsWithObjects.remove(key);}  }
class C{  protected void compile(){  if (areJavaClassesCompiled()) {    super.compile();  }  InstrumentationClassFinder finder=buildClasspathClassLoader();  if (finder == null) {    return;  }  try {    instrumentForms(finder);    if (getInstrumentNotNull()) {      final int instrumented=instrumentNotNull(getDestdir(),finder);      log("Added @NotNull assertions to " + instrumented + " files",Project.MSG_INFO);    }  }  finally {    finder.releaseResources();  }}  }
class C{  public PropertyException(String msg,Throwable nested){  super(msg);  nested_=nested;}  }
class C{  public SecurityCheckException(String message){  super(message);}  }
class C{  private Component createToolbar(){  toolbar=new JToolBar();  for (  String toolKey : getToolBarKeys()) {    if (toolKey.equals("-")) {      toolbar.add(Box.createHorizontalStrut(5));    } else {      toolbar.add(createTool(toolKey));    }  }  toolbar.add(Box.createHorizontalGlue());  return toolbar;}  }
class C{  private static boolean urlMatches(String url,String template){  if (TextUtils.isEmpty(url) || TextUtils.isEmpty(template)) {    return false;  }  String pattern='^' + template;  if (template.charAt(template.length() - 1) != '/') {    pattern+="/?";  }  pattern+="(\\?.*)?$";  return url.matches(pattern);}  }
class C{  public void deactivate(URI id){  doDeactivate(id);}  }
class C{  public X509Certificate engineLookupResolveX509Certificate(Element element,String baseURI,StorageResolver storage) throws KeyResolverException {  return null;}  }
class C{  public Shell shell(){  return shell;}  }
class C{  private double calculatePercent(Task task,List<Chunk> chunks){  double report=0;  if (task.state != TaskStates.DOWNLOAD_FINISHED) {    int sum=0;    for (    Chunk chunk : chunks) {      this.downloadLength+=FileUtils.size(task.save_address,String.valueOf(chunk.id));    }    if (task.size > 0) {      report=((float)downloadLength / task.size * 100);    }  } else {    this.downloadLength=task.size;    report=100;  }  return report;}  }
class C{  public long remove(int key){  long prev=0;  int index=index(key);  if (index >= 0) {    prev=_values[index];    removeAt(index);  }  return prev;}  }
class C{  public boolean containsMameCommand(){  for (  Option cmd : this.mameOptions.getCommands().getOptions()) {    if (this.commandLine.hasOption(cmd.getOpt())) {      return true;    }  }  return false;}  }
class C{  public HMAC(String digestName,byte[] key){  this(digestName,64,key);}  }
class C{  public Boolean isSettingDisplayTopologySupported(){  return settingDisplayTopologySupported;}  }
class C{  public void paintSliderBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBorder(context,g,x,y,w,h,orientation);}  }
class C{  public AbstractCpeManagerApiServlet(String type,AbstractCpeManager<T> manager,Class<? extends AbstractCpeManagerApiServlet<T>> clazz){  super(LOGGER,clazz);  this.type=type;  this.manager=manager;}  }
class C{  public static long parseDateAsEpoch(String dateStr){  try {    return DateUtils.parseDate(dateStr).getTime();  } catch (  DateParseException e) {    return 0;  }}  }
class C{  public static void applyInsideOmniText(){  if (browserInputBar.hasFocus())   return;  try {    if (publicWebRender.getUrl() != null && publicWebRender.getUrl().isEmpty())     publicWebRender.load(getTabSwitcher().getCurrentTab().getUrl());    getTabSwitcher().changeCurrentTab(publicWebRender.getUrl(),publicWebRender.getTitle());    getTabSwitcher().updateAllTabs();  } catch (  Exception ex) {    StackTraceParser.logStackTrace(ex);  }  applyOnlyInsideOmniText();}  }
class C{  public SimpleSAXParser() throws SAXException {  this(XMLReaderFactory.createXMLReader());}  }
class C{  private static int find4DayBlockWithMostFVals(String FPLAN,String BITFELD){  Map<Integer,Integer> departuresPerBitfeld=new HashMap<>();  try {    BufferedReader readsLines=new BufferedReader(new InputStreamReader(new FileInputStream(FPLAN),"latin1"));    String newLine=readsLines.readLine();    int numberOfDepartures=0;    while (newLine != null) {      if (newLine.charAt(0) == '*') {        if (newLine.charAt(1) == 'Z') {          try {            numberOfDepartures=Integer.parseInt(newLine.substring(22,25)) + 1;          } catch (          Exception e) {            numberOfDepartures=1;          }        }        if (newLine.charAt(1) == 'A' && newLine.charAt(3) == 'V') {          if (newLine.substring(22,28).trim().length() > 0) {            int bitfeldNumber=Integer.parseInt(newLine.substring(22,28));            int bitfeldValue=numberOfDepartures;            if (departuresPerBitfeld.containsKey(bitfeldNumber)) {              bitfeldValue+=departuresPerBitfeld.get(bitfeldNumber);            }            departuresPerBitfeld.put(bitfeldNumber,bitfeldValue);          }        }      }      newLine=readsLines.readLine();    }    readsLines.close();  } catch (  IOException e) {    e.printStackTrace();  }  int[] bitfeldStats=new int[96];  try {    BufferedReader readsLines=new BufferedReader(new InputStreamReader(new FileInputStream(BITFELD),"latin1"));    String newLine=readsLines.readLine();    while (newLine != null) {      int bitFeldValue=1;      if (departuresPerBitfeld.containsKey(Integer.parseInt(newLine.substring(0,6)))) {        bitFeldValue=departuresPerBitfeld.get(Integer.parseInt(newLine.substring(0,6)));      }      String bitfeld=newLine.substring(7,103);      for (int i=0; i < bitfeld.length(); i++) {        if (bitfeld.charAt(i) == 'F') {          bitfeldStats[i]+=bitFeldValue;        }      }      newLine=readsLines.readLine();    }    readsLines.close();  } catch (  IOException e) {    e.printStackTrace();  }  int maxFNumber=0;  int posMaxFNumber=-1;  for (int i=0; i < bitfeldStats.length; i++) {    if (bitfeldStats[i] > maxFNumber) {      maxFNumber=bitfeldStats[i];      posMaxFNumber=i;    }  }  log.info("Selected HAFAS-4day-block: " + posMaxFNumber);  return posMaxFNumber;}  }
class C{  public void clear(){  for (int i=0; i < _entries.length; i++) {    _entries[i]=null;  }  _size=0;}  }
class C{  public void enableGenerateButton(){  generateButton.setEnabled(true);}  }
class C{  public boolean isConfigured(){  LOG.debug("lookup url: " + url);  return url != null && !url.isEmpty();}  }
class C{  public static boolean evaluateContinuousQueryEvent(PlatformContext ctx,long filterPtr,CacheEntryEvent evt) throws CacheEntryListenerException {  assert filterPtr != 0;  try (PlatformMemory mem=ctx.memory().allocate()){    PlatformOutputStream out=mem.output();    writeCacheEntryEvent(ctx.writer(out),evt);    out.synchronize();    return ctx.gateway().continuousQueryFilterApply(filterPtr,mem.pointer()) == 1;  } catch (  Exception e) {    throw toCacheEntryListenerException(e);  }}  }
class C{  private void fullMiss(){  if (size >= maximumSize) {    queueFront().evict();  }  boolean inStack=inStack();  moveToStackTop();  if (inStack) {    hot();    stackBottom().migrateToQueue();    pruneStack();  } else {    cold();  }}  }
class C{  public boolean visitInstruction(ElemTemplateElement elem){  int type=elem.getXSLToken();switch (type) {case Constants.ELEMNAME_CALLTEMPLATE:case Constants.ELEMNAME_TEMPLATE:case Constants.ELEMNAME_FOREACH:{      if (type == Constants.ELEMNAME_FOREACH) {        ElemForEach efe=(ElemForEach)elem;        Expression select=efe.getSelect();        select.callVisitors(efe,this);      }      Vector savedPaths=m_paths;      m_paths=new Vector();      elem.callChildVisitors(this,false);      eleminateRedundentLocals(elem);      m_paths=savedPaths;      return false;    }case Constants.ELEMNAME_NUMBER:case Constants.ELEMNAME_SORT:  boolean savedIsSame=m_isSameContext;m_isSameContext=false;elem.callChildVisitors(this);m_isSameContext=savedIsSame;return false;default :return true;}}  }
class C{  private static AbstractWidget[] insert(AbstractWidget[] conz,AbstractWidget widget,int atIndex){  int length=conz.length;  int indexOf=-1;  for (int i=0; i < length; i++) {    if (conz[i] == widget) {      indexOf=i;      break;    }  }  if (length == 0)   return (new AbstractWidget[]{widget});  if (atIndex >= 0) {    if (atIndex > length)     atIndex=length;    if (indexOf == atIndex)     return (conz);    if (indexOf == -1) {      AbstractWidget[] newConz=new AbstractWidget[length + 1];      for (int i=0; i < atIndex; i++)       newConz[i]=conz[i];      newConz[atIndex]=widget;      for (int i=atIndex; i < length; i++)       newConz[i + 1]=conz[i];      return (newConz);    } else {      if (atIndex == length) {        atIndex--;        if (indexOf == atIndex)         return (conz);      }      AbstractWidget[] newConz=new AbstractWidget[length];      System.arraycopy(conz,0,newConz,0,length);      if (indexOf < atIndex) {        for (int i=indexOf; i < atIndex; i++) {          newConz[i]=newConz[i + 1];        }      } else {        for (int i=indexOf; i > atIndex; i--) {          newConz[i]=newConz[i - 1];        }      }      newConz[atIndex]=widget;      return (newConz);    }  } else {    if (indexOf != -1)     return (conz);    AbstractWidget[] newConz=new AbstractWidget[length + 1];    System.arraycopy(conz,0,newConz,0,length);    newConz[length]=widget;    return (newConz);  }}  }
class C{  private String concat(List<ILineSegment> list){  StringBuilder res=new StringBuilder();  Node<ILineSegment> n=list.head();  while (n != null) {    res.append(n.value());    n=n.next();    if (n != null) {      res.append(",");    }  }  return res.toString();}  }
class C{  public static void addCommentMenu(final JPopupMenu menu,final CGraphModel model,final INaviViewNode node){  Preconditions.checkNotNull(menu,"IE02140: Menu argument can not be null");  Preconditions.checkNotNull(node,"IE02143: Node argument can not be null");  menu.add(CActionProxy.proxy(new CActionEditComments(model,node)));  menu.add(CActionProxy.proxy(new CActionCreateCommentNode(model.getParent(),model.getGraph().getRawView(),node)));  menu.addSeparator();}  }
class C{  public static boolean isUserLocal(String name){  return _repository.isUserLocal(name);}  }
class C{  @NotNull public static List<VcsFullCommitDetails> sortCommits(@NotNull List<VcsFullCommitDetails> commits){  Collections.reverse(commits);  return commits;}  }
class C{  private void wrapAndAddAppender(Object appender,List<LogbackAppenderAccessor> appenders){  LogbackAppenderAccessor appenderAccessor=wrapAppender(appender);  if (appenderAccessor != null) {    appenders.add(appenderAccessor);  }}  }
class C{  default B removeCanDestoryMaterial(final BlockMaterialData material){  this.meta().removeCanDestoryMaterial(material);  return this.getBuilder();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:24.302 -0500",hash_original_method="EA7ED5AC4BAC7A2CA54578C2426C4A08",hash_generated_method="280D424FB9C6CFC33FD25FFCEFCD28A8") private static int gallopRight(Comparable<Object> key,Object[] a,int base,int len,int hint){  if (DEBUG)   assert len > 0 && hint >= 0 && hint < len;  int ofs=1;  int lastOfs=0;  if (key.compareTo(a[base + hint]) < 0) {    int maxOfs=hint + 1;    while (ofs < maxOfs && key.compareTo(a[base + hint - ofs]) < 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    int tmp=lastOfs;    lastOfs=hint - ofs;    ofs=hint - tmp;  } else {    int maxOfs=len - hint;    while (ofs < maxOfs && key.compareTo(a[base + hint + ofs]) >= 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    lastOfs+=hint;    ofs+=hint;  }  if (DEBUG)   assert -1 <= lastOfs && lastOfs < ofs && ofs <= len;  lastOfs++;  while (lastOfs < ofs) {    int m=lastOfs + ((ofs - lastOfs) >>> 1);    if (key.compareTo(a[base + m]) < 0)     ofs=m; else     lastOfs=m + 1;  }  if (DEBUG)   assert lastOfs == ofs;  return ofs;}  }
class C{  public ArrayDeque(Collection<? extends E> c){  allocateElements(c.size());  addAll(c);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public StatusResult clone(){  StatusResult result=new StatusResult();  result.StatusCode=StatusCode;  result.DiagnosticInfo=DiagnosticInfo;  return result;}  }
class C{  public void write(int b) throws IOException {  wbuf[0]=(byte)b;  write(wbuf,0,1);}  }
class C{  public synchronized void start(){  TIMER_LOGGER.logp(Level.FINER,Timer.class.getName(),"start","starting the timer");  if (isActive == false) {    timer=new java.util.Timer();    TimerAlarmClock alarmClock;    Date date;    Date currentDate=new Date();    sendPastNotifications(currentDate,sendPastNotifications);    for (    Object[] obj : timerTable.values()) {      date=(Date)obj[TIMER_DATE_INDEX];      boolean fixedRate=((Boolean)obj[FIXED_RATE_INDEX]).booleanValue();      if (fixedRate) {        alarmClock=new TimerAlarmClock(this,date);        obj[ALARM_CLOCK_INDEX]=(Object)alarmClock;        timer.schedule(alarmClock,alarmClock.next);      } else {        alarmClock=new TimerAlarmClock(this,(date.getTime() - currentDate.getTime()));        obj[ALARM_CLOCK_INDEX]=(Object)alarmClock;        timer.schedule(alarmClock,alarmClock.timeout);      }    }    isActive=true;    TIMER_LOGGER.logp(Level.FINER,Timer.class.getName(),"start","timer started");  } else {    TIMER_LOGGER.logp(Level.FINER,Timer.class.getName(),"start","the timer is already activated");  }}  }
class C{  private void iteratorIniterator(){  if (null == _backendVolumeUrisToProcessIterator) {    _backendVolumeUrisToProcessIterator=this.getUnmanagedVolumesToIngest().iterator();  }}  }
class C{  public static boolean hasExplicitNullAnnotation(ICompilationUnit compilationUnit,int offset){  return false;}  }
class C{  public void cancelAllRequests(boolean mayInterruptIfRunning){  for (  List<RequestHandle> requestList : requestMap.values()) {    if (requestList != null) {      for (      RequestHandle requestHandle : requestList) {        requestHandle.cancel(mayInterruptIfRunning);      }    }  }  requestMap.clear();}  }
class C{  public void readFloatArray(float vec[],int offset,int len) throws EOFException, FormatException {  while (len > 0) {    int floatsleft=bytesinbuffer / 4;    if (floatsleft == 0) {      assertSize(4);      continue;    }    int reallyread=(len < floatsleft) ? len : floatsleft;    int cursor=curptr;    if (MSBFirst) {      for (int i=0; i < reallyread; i++) {        int floatasint=MoreMath.BuildIntegerBE(buffer,cursor);        vec[offset++]=Float.intBitsToFloat(floatasint);        cursor+=4;      }    } else {      for (int i=0; i < reallyread; i++) {        int floatasint=MoreMath.BuildIntegerLE(buffer,cursor);        vec[offset++]=Float.intBitsToFloat(floatasint);        cursor+=4;      }    }    len-=reallyread;    bytesinbuffer-=(4 * reallyread);    curptr=cursor;  }}  }
class C{  public String globalInfo(){  return "Centers all numeric attributes in the given dataset " + "to have zero mean (apart from the class attribute, if set).";}  }
class C{  public DisposableObjectMap(final ObjectMap<? extends Key,? extends Value> map){  super(map);}  }
class C{  private void checkValidity() throws ModbusException {}  }
class C{  public static String translateToLocal(String unlocalizedString,Object... params){  if (I18n.hasKey(unlocalizedString))   return I18n.format(unlocalizedString,params); else {    if (UNLOCALIZED_STRINGS.size() < 100 && !UNLOCALIZED_STRINGS.contains(unlocalizedString))     UNLOCALIZED_STRINGS.add(unlocalizedString);    return unlocalizedString;  }}  }
class C{  protected boolean isDestroy(){  return this.operation == null ? this.action == DESTROY_ACTION : this.operation == EnumListenerEvent.AFTER_DESTROY;}  }
class C{  public static boolean isVideo(String mimeType){  if (mimeType != null) {    if (mimeType.startsWith("video/"))     return true; else     return false;  } else {    return false;  }}  }
class C{  public void testLeaderSequencesCommands() throws Throwable {  runOnServer(null);  Thread.sleep(1000);  serverContext.getThreadContext().execute(null);  await();}  }
class C{  public void plugin(String name,String minimumRequiredVersion){  this.recipes.add(new PluginRecipe(name,new VersionNumber(minimumRequiredVersion)));}  }
class C{  private static void swap(int a,int b,Object[] arr){  Object tmp=arr[a];  arr[a]=arr[b];  arr[b]=tmp;}  }
class C{  private double calcEnergyIfExchanged(int p,int q){  if (p >= q)   throw new RuntimeException("p should be < q");  double energy=0;  for (int i=0; i < vertices.length - 1; i++) {    for (int j=i + 1; j < vertices.length; j++) {      int ii=i;      int jj=j;      if (i == p)       ii=q;      if (j == q)       jj=p;      double dist=dm[i][j];      double l_ij=L * dist;      double k_ij=K / (dist * dist);      double dx=xydata[ii].getX() - xydata[jj].getX();      double dy=xydata[ii].getY() - xydata[jj].getY();      double d=Math.sqrt(dx * dx + dy * dy);      energy+=k_ij / 2 * (dx * dx + dy * dy + l_ij * l_ij - 2 * l_ij * d);    }  }  return energy;}  }
class C{  @Override public boolean visit(final VariableDeclarationExpression node){  for (  final Object fragment : node.fragments()) {    final VariableDeclarationFragment frag=(VariableDeclarationFragment)fragment;    addBinding(node,frag.getName(),node.getType());  }  return true;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:58.871 -0500",hash_original_method="CA8894215D990DF5BEA93D6F4DD7C790",hash_generated_method="CA8894215D990DF5BEA93D6F4DD7C790") boolean _requestedWill(int option){  return ((_options[option] & _REQUESTED_WILL_MASK) != 0);}  }
class C{  public final void reset(){  x=0;  y=0;  open=false;}  }
class C{  boolean parseIdentifier(boolean lower) throws IOException {switch (ch) {case 'A':case 'B':case 'C':case 'D':case 'E':case 'F':case 'G':case 'H':case 'I':case 'J':case 'K':case 'L':case 'M':case 'N':case 'O':case 'P':case 'Q':case 'R':case 'S':case 'T':case 'U':case 'V':case 'W':case 'X':case 'Y':case 'Z':    if (lower) {      ch='a' + (ch - 'A');    }case 'a':case 'b':case 'c':case 'd':case 'e':case 'f':case 'g':case 'h':case 'i':case 'j':case 'k':case 'l':case 'm':case 'n':case 'o':case 'p':case 'q':case 'r':case 's':case 't':case 'u':case 'v':case 'w':case 'x':case 'y':case 'z':  break;default :return false;}while (true) {addString(ch);switch (ch=readCh()) {case 'A':case 'B':case 'C':case 'D':case 'E':case 'F':case 'G':case 'H':case 'I':case 'J':case 'K':case 'L':case 'M':case 'N':case 'O':case 'P':case 'Q':case 'R':case 'S':case 'T':case 'U':case 'V':case 'W':case 'X':case 'Y':case 'Z':if (lower) {  ch='a' + (ch - 'A');}case 'a':case 'b':case 'c':case 'd':case 'e':case 'f':case 'g':case 'h':case 'i':case 'j':case 'k':case 'l':case 'm':case 'n':case 'o':case 'p':case 'q':case 'r':case 's':case 't':case 'u':case 'v':case 'w':case 'x':case 'y':case 'z':case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':case '.':case '-':case '_':break;default :return true;}}}  }
class C{  public void moving(long startOfMoving){  GTG.initRwtm.registerReadingThread();  try {    if (startOfRestMs == 0)     return;    SQLiteStatement s=DbUtil.createOrGetStatement(GTG.db,"insert into Rest (begin_time, end_time) values (?,?);");    s.bindLong(1,startOfRestMs);    s.bindLong(2,startOfMoving);    s.execute();  }  finally {    GTG.initRwtm.unregisterReadingThread();  }}  }
class C{  public void addSwcExternals(String swcLocation,SwcExternalScriptInfo externals){  if (swcLocation == null || externals == null)   throw new NullPointerException();  String name=swcLocation;  dependencies.put(name,externals);  if (!dependencies.containsVertex(name)) {    dependencies.addVertex(new Vertex<String,SwcExternalScriptInfo>(name));  }}  }
class C{  public UndertowFraction enableHTTPS(String path,String password,String alias){  this.keystorePath=path;  this.keystorePassword=password;  this.alias=alias;  return this;}  }
class C{  @Override public void changeCursor(Cursor c){  if (DBG)   Log.d(LOG_TAG,"changeCursor(" + c + ")");  if (mClosed) {    Log.w(LOG_TAG,"Tried to change cursor after adapter was closed.");    if (c != null)     c.close();    return;  }  try {    super.changeCursor(c);    if (c != null) {      mText1Col=c.getColumnIndex(SearchManager.SUGGEST_COLUMN_TEXT_1);      mText2Col=c.getColumnIndex(SearchManager.SUGGEST_COLUMN_TEXT_2);      mText2UrlCol=c.getColumnIndex(SearchManager.SUGGEST_COLUMN_TEXT_2_URL);      mIconName1Col=c.getColumnIndex(SearchManager.SUGGEST_COLUMN_ICON_1);      mIconName2Col=c.getColumnIndex(SearchManager.SUGGEST_COLUMN_ICON_2);      mFlagsCol=c.getColumnIndex(SearchManager.SUGGEST_COLUMN_FLAGS);    }  } catch (  Exception e) {    Log.e(LOG_TAG,"error changing cursor and caching columns",e);  }}  }
class C{  public void create(Plugin plugin){  activated=false;  if (hologram == null) {    hologram=HologramsAPI.createHologram(plugin,location);    hologram.appendTextLine(Utils.color("&a&lCHECKPOINT #" + id));    hologram.appendTextLine(Utils.color("Not Active"));  } else {    hologram.removeLine(1);    hologram.appendTextLine("Not Active");  }}  }
class C{  public VolumeSeries(Strategy strategy,String name,String type,String description,Boolean displayOnChart,Integer chartRGBColor,Boolean subChart){  super(strategy,name,type,description,displayOnChart,chartRGBColor,subChart);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:45.675 -0500",hash_original_method="BDEAB060DBF06B617753E5FD68DF3DA6",hash_generated_method="555C784C8E6FB0A57ACAD5F7648D3C10") public void initialize(IBulkCursor bulkCursor,int count,int idIndex,boolean wantsAllOnMoveCalls){  mBulkCursor=bulkCursor;  mColumns=null;  mCount=count;  mRowIdColumnIndex=idIndex;  mWantsAllOnMoveCalls=wantsAllOnMoveCalls;}  }
class C{  @Description(summary="Create h2mvstore.jar containing only the MVStore.") public void jarMVStore(){  compileMVStore(true);  manifestMVStore();  FileList files=files("temp");  files.exclude("*.DS_Store");  files=excludeTestMetaInfFiles(files);  jar("bin/h2-mvstore" + getJarSuffix(),files,"temp");}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_main);  initializeViews();  registerBroadcastReceiver();}  }
class C{  public int addMultiNewarray(CtClass clazz,int[] dimensions){  int len=dimensions.length;  for (int i=0; i < len; ++i)   addIconst(dimensions[i]);  growStack(len);  return addMultiNewarray(clazz,len);}  }
class C{  public void testBug12229() throws Exception {  createTable("testBug12229","(`int_field` integer )");  this.stmt.executeUpdate("insert into testBug12229 values (123456),(1)");  Properties props=new Properties();  props.put("profileSQL","true");  props.put("slowQueryThresholdMillis","0");  props.put("logSlowQueries","true");  props.put("explainSlowQueries","true");  props.put("useServerPrepStmts","true");  Connection explainConn=getConnectionWithProps(props);  this.pstmt=explainConn.prepareStatement("SELECT `int_field` FROM `testBug12229` WHERE `int_field` = ?");  this.pstmt.setInt(1,1);  this.rs=this.pstmt.executeQuery();  assertTrue(this.rs.next());  this.rs=this.pstmt.executeQuery();  assertTrue(this.rs.next());  this.rs=this.pstmt.executeQuery();  assertTrue(this.rs.next());}  }
class C{  public JmriJFrame(String name){  this(name,true,true);}  }
class C{  @Override public void onUpdate(){  if (this.blast == null) {    this.setDead();    DefenseTech.LOGGER.severe("Procedural explosion ended due to null! This is a bug!");    return;  }  this.blast.controller=this;  this.blast.position=new Pos3D(posX,posY,posZ);  this.blast.worldObj=worldObj;  if (this.blast.isMovable() && (this.motionX != 0 || this.motionY != 0 || this.motionZ != 0)) {    this.moveEntity(this.motionX,this.motionY,this.motionZ);  }  if (this.ticksExisted == 1) {    this.blast.preExplode();  } else   if (this.ticksExisted % this.blast.proceduralInterval() == 0) {    if (!this.endExplosion) {      this.blast.onExplode();    } else {      this.blast.postExplode();      this.setDead();    }  }}  }
class C{  public static void sendFailurePatchToProvisioningTask(StatelessService service,ServiceHost host,String path,Throwable t){  service.logWarning(Utils.toString(t));  URI taskLink=UriUtils.buildUri(host,path);  sendPatchToProvisioningTask(service,taskLink,t);}  }
class C{  public boolean isSetExtras(){  return this.extras != null;}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType,boolean notifyAuthFailure){  this(AccountManager.get(context),account,authTokenType,notifyAuthFailure);}  }
class C{  public static void main(String[] args){  if (args.length < 1) {    System.out.println("Please enter command line arguments.");    System.out.println("e.g. java Year 2000");  }  for (int i=0; i < args.length; i++) {    try {      int year=Integer.parseInt(args[i]);      checkLeapYear(year);    } catch (    NumberFormatException e) {      System.out.printf("%s is not a valid number.\n",args[i]);    }  }}  }
class C{  private Proxy nextProxy(){  if (userSpecifiedProxy != null) {    hasNextProxy=false;    return userSpecifiedProxy;  }  if (proxySelectorProxies != null) {    while (proxySelectorProxies.hasNext()) {      Proxy candidate=proxySelectorProxies.next();      if (candidate.type() != Proxy.Type.DIRECT) {        return candidate;      }    }  }  hasNextProxy=false;  return Proxy.NO_PROXY;}  }
class C{  public JSONObject(JSONObject jo,String[] names){  this();  for (int i=0; i < names.length; i+=1) {    try {      this.putOnce(names[i],jo.opt(names[i]));    } catch (    Exception ignore) {    }  }}  }
class C{  @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypesPackage.ENUMERATOR__OWNING_ENUMERATION:    if (eInternalContainer() != null)     msgs=eBasicRemoveFromContainer(msgs);  return basicSetOwningEnumeration((EnumerationType)otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  public void roundOut(Rect dst){  dst.set((int)FloatMath.floor(left),(int)FloatMath.floor(top),(int)FloatMath.ceil(right),(int)FloatMath.ceil(bottom));}  }
class C{  public boolean isAsync(){  return false;}  }
class C{  public CloudletSchedulerTimeShared(){  super();  currentCPUs=0;}  }
class C{  public final boolean postAtFrontOfQueue(Runnable r){  return mExec.postAtFrontOfQueue(wrapRunnable(r));}  }
class C{  public NewNeuronAction(final NetworkPanel networkPanel){  super("Add Neuron");  if (networkPanel == null) {    throw new IllegalArgumentException("networkPanel must not be null");  }  this.networkPanel=networkPanel;  putValue(SMALL_ICON,ResourceManager.getImageIcon("AddNeuron.png"));  putValue(SHORT_DESCRIPTION,"Add or \"put\" new node (p)");  networkPanel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke('p'),this);  networkPanel.getActionMap().put(this,this);}  }
class C{  private DownloadDocumentCommand(){}  }
class C{  public Boolean isVmDirectPathGen2Supported(){  return vmDirectPathGen2Supported;}  }
class C{  public boolean isZoomIn(){  return mZoomIn;}  }
class C{  public CSP copyDomains(){  CSP result=new CSP();  result.variables=variables;  result.domains=new ArrayList<Domain>(domains.size());  result.domains.addAll(domains);  result.constraints=constraints;  result.varIndexHash=varIndexHash;  result.cnet=cnet;  return result;}  }
class C{  public JobManagerException(String msg,Throwable nested){  super(msg,nested);}  }
class C{  @Override public Iterator<E> iterator(){  return new PriorityIterator();}  }
class C{  public boolean isOff(){  return !isOn();}  }
class C{  public static String encode(byte[] source,int off,int len,byte[] alphabet,boolean doPadding){  byte[] outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE);  int outLen=outBuff.length;  while (doPadding == false && outLen > 0) {    if (outBuff[outLen - 1] != '=') {      break;    }    outLen-=1;  }  return new String(outBuff,0,outLen);}  }
class C{  public static PricedEvent toPricedEvent(VOPricedEvent voPE) throws ValidationException {  validatePricedEvent(voPE);  PricedEvent result=new PricedEvent();  result.setEventPrice(voPE.getEventPrice());  return result;}  }
class C{  public NotificationChain basicSetRewiredTarget(SymbolTableEntry newRewiredTarget,NotificationChain msgs){  SymbolTableEntry oldRewiredTarget=rewiredTarget;  rewiredTarget=newRewiredTarget;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,ImPackage.IDENTIFIER_REF_IM__REWIRED_TARGET,oldRewiredTarget,newRewiredTarget);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public final boolean equals(Object obj){  return super.equals(obj);}  }
class C{  public <V2>JavaPairRDD<Tuple2<K,V>,Option<V2>> outerJoinGeodeRegion(String regionPath){  return outerJoinGeodeRegion(regionPath,rddf.defaultConnectionConf());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:25.163 -0500",hash_original_method="05F48791182D352B4D8C184739DC2F5C",hash_generated_method="21998CBB0B6AA96FDA348ABF97908948") public void rotateY(float deg){  addTaint(deg);}  }
class C{  public void removeHex(Coords coords){  coordinates.remove(coords);  currentCF.remove(coords);  phaseCF.remove(coords);  collapsedHexes++;}  }
class C{  public static InternalDistributedSystem distributedSystem(){  return cache().getDistributedSystem();}  }
class C{  public static long convertStringToFutureTimeMillis(String time){  Calendar exp=Calendar.getInstance();  if (time.endsWith("H")) {    exp.add(Calendar.HOUR,Integer.valueOf(StringUtils.remove(time,'H')));  } else   if (time.endsWith("M")) {    exp.add(Calendar.MINUTE,Integer.valueOf(StringUtils.remove(time,'M')));  } else   if (time.endsWith("S")) {    exp.add(Calendar.MILLISECOND,Integer.valueOf(StringUtils.remove(time,'S')) * 1000);  }  return exp.getTimeInMillis();}  }
class C{  private List<String> storagePortNamesToURIs(List<String> storagePorts){  List<String> storagePortURIStrings=new ArrayList<String>();  for (  String port : storagePorts) {    URIQueryResultList uriQueryList=new URIQueryResultList();    _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getStoragePortEndpointConstraint(port),uriQueryList);    if (uriQueryList.iterator().hasNext()) {      storagePortURIStrings.add(uriQueryList.iterator().next().toString());    }  }  return storagePortURIStrings;}  }
class C{  protected void removeClearedEntries(){  Entry e;  while ((e=(Entry)referenceQueue.poll()) != null) {    int index=e.hash % table.length;    Entry t=table[index];    if (t == e) {      table[index]=e.next;    } else {      loop:       for (; t != null; ) {        Entry c=t.next;        if (c == e) {          t.next=e.next;          break loop;        }        t=c;      }    }    count--;  }}  }
class C{  public static <T>T checkNotNull(T reference,String errorMessageTemplate,Object... errorMessageArgs){  if (reference == null) {    throw new NullPointerException(format(errorMessageTemplate,errorMessageArgs));  }  return reference;}  }
class C{  public void deleteAlarm(Alarm toBeDeleted){  for (  Map.Entry<String,?> entry : mSharedPreferences.getAll().entrySet()) {    Alarm alarm=Alarm.fromJson(entry.getValue().toString());    if (alarm.id == toBeDeleted.id) {      SharedPreferences.Editor editor=mSharedPreferences.edit();      editor.remove(String.valueOf(alarm.id));      editor.apply();      return;    }  }}  }
class C{  private static int applyMaskPenaltyRule1Internal(ByteMatrix matrix,boolean isHorizontal){  int penalty=0;  int iLimit=isHorizontal ? matrix.getHeight() : matrix.getWidth();  int jLimit=isHorizontal ? matrix.getWidth() : matrix.getHeight();  byte[][] array=matrix.getArray();  for (int i=0; i < iLimit; i++) {    int numSameBitCells=0;    int prevBit=-1;    for (int j=0; j < jLimit; j++) {      int bit=isHorizontal ? array[i][j] : array[j][i];      if (bit == prevBit) {        numSameBitCells++;      } else {        if (numSameBitCells >= 5) {          penalty+=N1 + (numSameBitCells - 5);        }        numSameBitCells=1;        prevBit=bit;      }    }    if (numSameBitCells >= 5) {      penalty+=N1 + (numSameBitCells - 5);    }  }  return penalty;}  }
class C{  public List<String[]> readAll() throws IOException {  List<String[]> allElements=new ArrayList<String[]>();  while (hasNext) {    String[] nextLineAsTokens=readNext();    if (nextLineAsTokens != null) {      allElements.add(nextLineAsTokens);    }  }  return allElements;}  }
class C{  public boolean isBound(){  return isBound;}  }
class C{  public static void announceForAccessibilityCompat(Context context,CharSequence text){  if (Build.VERSION.SDK_INT >= 4) {    AccessibilityManager accessibilityManager=null;    if (null != context) {      accessibilityManager=(AccessibilityManager)context.getSystemService(Context.ACCESSIBILITY_SERVICE);    }    if (null == accessibilityManager || !accessibilityManager.isEnabled()) {      return;    }    final int eventType;    if (Build.VERSION.SDK_INT < 16) {      eventType=AccessibilityEvent.TYPE_VIEW_FOCUSED;    } else {      eventType=AccessibilityEvent.TYPE_ANNOUNCEMENT;    }    final AccessibilityEvent event=AccessibilityEvent.obtain(eventType);    event.getText().add(text);    event.setClassName(Manager.class.getName());    event.setPackageName(context.getPackageName());    accessibilityManager.sendAccessibilityEvent(event);  }}  }
class C{  @Override public void printLogo(Byte iNumber){}  }
class C{  public String solutionToString(int fractionDigits){  if (!isSolvable()) {    throw new IllegalStateException("System is not solvable!");  }  DecimalFormat nf=new DecimalFormat();  nf.setMinimumFractionDigits(fractionDigits);  nf.setMaximumFractionDigits(fractionDigits);  nf.setDecimalFormatSymbols(new DecimalFormatSymbols(Locale.US));  nf.setNegativePrefix("");  nf.setPositivePrefix("");  int row=coeff[0].length >> 1;  int params=u.length;  int paramsDigits=integerDigits(params);  int x0Digits=maxIntegerDigits(x_0);  int[] uDigits=maxIntegerDigits(u);  StringBuilder buffer=new StringBuilder();  for (int i=0; i < x_0.length; i++) {    double value=x_0[i];    format(nf,buffer,value,x0Digits);    for (int j=0; j < u[0].length; j++) {      if (i == row) {        buffer.append("  +  a_").append(j).append(" * ");      } else {        buffer.append("          ");        for (int d=0; d < paramsDigits; d++) {          buffer.append(' ');        }      }      format(nf,buffer,u[i][j],uDigits[j]);    }    buffer.append('\n');  }  return buffer.toString();}  }
class C{  public float nextFloatFromTo(float from,float to){  return (float)nextDoubleFromTo(from,to);}  }
class C{  public boolean optBoolean(int index,boolean defaultValue){  try {    return getBoolean(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  private void checkHits(ScoreDoc[] hits,String prefix){  if (hits != null) {    Map<Integer,Integer> idMap=new TreeMap<>();    for (int docnum=0; docnum < hits.length; ++docnum) {      Integer luceneId=null;      luceneId=Integer.valueOf(hits[docnum].doc);      if (idMap.containsKey(luceneId)) {        StringBuilder message=new StringBuilder(prefix);        message.append("Duplicate key for hit index = ");        message.append(docnum);        message.append(", previous index = ");        message.append((idMap.get(luceneId)).toString());        message.append(", Lucene ID = ");        message.append(luceneId);        log(message.toString());      } else {        idMap.put(luceneId,Integer.valueOf(docnum));      }    }  }}  }
class C{  public SnmpCachedData(long lastUpdated,SnmpOid indexes[],Object datas[]){  this.lastUpdated=lastUpdated;  this.indexes=indexes;  this.datas=datas;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  private static IReconciler createReconciler(){  UiBinderStructuredRegionProcessor reconciler=new UiBinderStructuredRegionProcessor();  reconciler.setDocumentPartitioning(IStructuredPartitioning.DEFAULT_STRUCTURED_PARTITIONING);  return reconciler;}  }
class C{  public static boolean checkPolicy(int flags,Map<String,?> props){  if (props == null) {    return true;  }  if ("true".equalsIgnoreCase((String)props.get(Sasl.POLICY_NOPLAINTEXT)) && (flags & NOPLAINTEXT) == 0) {    return false;  }  if ("true".equalsIgnoreCase((String)props.get(Sasl.POLICY_NOACTIVE)) && (flags & NOACTIVE) == 0) {    return false;  }  if ("true".equalsIgnoreCase((String)props.get(Sasl.POLICY_NODICTIONARY)) && (flags & NODICTIONARY) == 0) {    return false;  }  if ("true".equalsIgnoreCase((String)props.get(Sasl.POLICY_NOANONYMOUS)) && (flags & NOANONYMOUS) == 0) {    return false;  }  if ("true".equalsIgnoreCase((String)props.get(Sasl.POLICY_FORWARD_SECRECY)) && (flags & FORWARD_SECRECY) == 0) {    return false;  }  if ("true".equalsIgnoreCase((String)props.get(Sasl.POLICY_PASS_CREDENTIALS)) && (flags & PASS_CREDENTIALS) == 0) {    return false;  }  return true;}  }
class C{  private String startParameterNameForPagination(){  return "start";}  }
class C{  public ProcessInfo(String processName,int pid){  super();  this.processName=processName;  this.pid=pid;}  }
class C{  public EipSwitch(){  if (modelPackage == null) {    modelPackage=EipPackage.eINSTANCE;  }}  }
class C{  public boolean isValid(){  execute();  return isValid;}  }
class C{  public InnerHit addInnerHit(String name,InnerHit innerHit){  sourceBuilder().innerHitsBuilder().addInnerHit(name,innerHit);  return this;}  }
class C{  @Override public void parseStatus(String statusString) throws JmriException, IOException {}  }
class C{  public void configure(){  DCCppTrafficController packets=new DCCppPacketizer(new DCCppCommandStation());  packets.connectPort(this);  this.getSystemConnectionMemo().setDCCppTrafficController(packets);  sourceThread=new Thread(this);  sourceThread.start();  new DCCppInitializationManager(this.getSystemConnectionMemo());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodevalue01.class,args);}  }
class C{  public AccessException(String s){  super(s);}  }
class C{  public void addUGraphic(SGraphic sg){  graphics.addElement(sg.ufill());}  }
class C{  public static List<SocketAddress> toSocketAddresses(String endpointUrl,boolean enableIPv6) throws IllegalArgumentException {  List<SocketAddress> result=new ArrayList<SocketAddress>();  if (endpointUrl == null)   throw new IllegalArgumentException("URL not valid.");  try {    URI uri=new URI(endpointUrl);    String proto=UriUtil.getTransportProtocol(endpointUrl);    String host=uri.getHost();    int port=uri.getPort();    if (host == null) {      String[] parts=endpointUrl.split("/+");      String[] host_port=parts[1].split(":");      host=host_port[0];      try {        port=Integer.parseInt(host_port[1]);      } catch (      NumberFormatException e1) {        port=0;      }catch (      ArrayIndexOutOfBoundsException e2) {        port=0;      }    }    proto=proto.toLowerCase();    if (port == 0 || port == -1)     port=UriUtil.defaultPort(proto);    if (proto.equals("opc.tcp") || proto.equals("http") || proto.equals("https")) {      try {        InetAddress addrs[]=InetAddress.getAllByName(host);        boolean hasIPv4=false;        boolean hasIPv6=false;        for (        InetAddress addr : addrs) {          hasIPv4|=addr instanceof Inet4Address;          hasIPv6|=addr instanceof Inet6Address;        }        for (        InetAddress addr : addrs) {          boolean IPv6=addr instanceof Inet6Address;          if (!enableIPv6 && IPv6 && hasIPv6&& hasIPv4) {            logger.warn("Binding of {} to {} was omited. (Workaround)",endpointUrl,addr.getHostAddress());            continue;          }          SocketAddress sa=new InetSocketAddress(addr,port);          result.add(sa);        }      } catch (      UnknownHostException e) {        throw new IllegalArgumentException(e);      }    } else {      throw new IllegalArgumentException("Unsupported protocol " + proto);    }  } catch (  URISyntaxException ex) {    throw new IllegalArgumentException("Invalid URL",ex);  }  return result;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void sendMomentaryFunctionGroup2(){  DCCppMessage msg=DCCppMessage.makeFunctionGroup2SetMomMsg(this.getDccAddress(),f5Momentary,f6Momentary,f7Momentary,f8Momentary);  queueMessage(msg,THROTTLEIDLE);}  }
class C{  public XPathExpressionException(Throwable cause){  super(cause);}  }
class C{  public void mouseExited(MouseEvent e){}  }
class C{  private void cleanUpOrphanedExportMasks(URI vplexUri,Set<URI> allCurrentUnManagedExportMaskUris){  URIQueryResultList result=new URIQueryResultList();  _dbClient.queryByConstraint(ContainmentConstraint.Factory.getStorageSystemUnManagedExportMaskConstraint(vplexUri),result);  Set<URI> allMasksInDatabase=new HashSet<URI>();  Iterator<URI> it=result.iterator();  while (it.hasNext()) {    allMasksInDatabase.add(it.next());  }  SetView<URI> onlyAvailableinDB=Sets.difference(allMasksInDatabase,allCurrentUnManagedExportMaskUris);  if (!onlyAvailableinDB.isEmpty()) {    s_logger.info("these UnManagedExportMasks are orphaned and will be cleaned up:" + Joiner.on("\t").join(onlyAvailableinDB));    List<UnManagedExportMask> unManagedExportMasksToBeDeleted=new ArrayList<UnManagedExportMask>();    Iterator<UnManagedExportMask> unManagedExportMasks=_dbClient.queryIterativeObjects(UnManagedExportMask.class,new ArrayList<URI>(onlyAvailableinDB));    while (unManagedExportMasks.hasNext()) {      UnManagedExportMask uem=unManagedExportMasks.next();      if (null == uem || uem.getInactive()) {        continue;      }      s_logger.info("Setting UnManagedExportMask {} inactive",uem.getMaskingViewPath());      uem.setStorageSystemUri(NullColumnValueGetter.getNullURI());      uem.setInactive(true);      unManagedExportMasksToBeDeleted.add(uem);    }    if (!unManagedExportMasksToBeDeleted.isEmpty()) {      _partitionManager.updateAndReIndexInBatches(unManagedExportMasksToBeDeleted,BATCH_SIZE,_dbClient,UNMANAGED_EXPORT_MASK);    }  }}  }
class C{  public ForceSimulator(Integrator integr){  integrator=integr;  iforces=new Force[5];  sforces=new Force[5];  iflen=0;  sflen=0;  items=new ArrayList();  springs=new ArrayList();}  }
class C{  public void startViewTarget() throws ParseException {}  }
class C{  public SupportedEllipticCurvesExtension(SupportedGroup[] supportedGroups){  super(ExtensionType.ELLIPTIC_CURVES);  this.supportedGroups=new ArrayList<Integer>();  for (  SupportedGroup group : supportedGroups) {    this.supportedGroups.add(group.getId());  }}  }
class C{  public void close(){  try {    if (wrtr != null) {      wrtr.close();      wrtr=null;    }    if (rdr != null) {      rdr.close();      rdr=null;    }  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  void proc(GridJavaProcess proc){  this.proc=proc;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4mfPackage.EXTENDED_RUNTIME_ENVIRONMENT__EXTENDED_RUNTIME_ENVIRONMENT:    setExtendedRuntimeEnvironment((ProjectReference)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public void moveZeroesB(int[] nums){  int cur=0;  for (int i=0; i < nums.length; ++i) {    if (nums[i] != 0) {      int temp=nums[cur];      nums[cur++]=nums[i];      nums[i]=temp;    }  }}  }
