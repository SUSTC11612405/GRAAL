class C{  public boolean isConnected(final Socket socket,final String host,final int port,final int timeoutInMs,final SocketErrorHandler socketErrorHandler){  boolean isConnected;  try {    socket.connect(new InetSocketAddress(host,port),timeoutInMs);    isConnected=socket.isConnected();  } catch (  IOException e) {    isConnected=Boolean.FALSE;  } finally {    try {      socket.close();    } catch (    IOException exception) {      socketErrorHandler.handleErrorDuringClosingSocket(exception);    }  }  return isConnected;}  }
class C{  public Consensus removeConsensus(int id){  consensusesLock.lock();  Consensus consensus=consensuses.remove(id);  for (int i=lastRemovedCID; i < id; i++)   consensuses.remove(i);  lastRemovedCID=id;  consensusesLock.unlock();  outOfContextLock.lock();  outOfContextProposes.remove(id);  outOfContext.remove(id);  outOfContextLock.unlock();  return consensus;}  }
class C{  private static void verifyFirstLaunch(){  if ((getButtonOnScreen(trackListActivity.getString(R.string.eula_accept),false,false) != null)) {    getButtonOnScreen(trackListActivity.getString(R.string.eula_accept),true,true);  }}  }
class C{  private void process(Contact field,Label label,LabelMap map) throws Exception {  Expression expression=label.getExpression();  String path=label.getPath();  Model model=root;  if (!expression.isEmpty()) {    model=register(expression);  }  resolver.register(label);  model.register(label);  map.put(path,label);}  }
class C{  public boolean isClosed(){  return Imgproc.isContourConvex(mat);}  }
class C{  void handleMessages(Connection conn,boolean persistent){  int port=getEndpoint().getPort();  try {    DataInputStream in=new DataInputStream(conn.getInputStream());    do {      int op=in.read();      if (op == -1) {        if (tcpLog.isLoggable(Log.BRIEF)) {          tcpLog.log(Log.BRIEF,"(port " + port + ") connection closed");        }        break;      }      if (tcpLog.isLoggable(Log.BRIEF)) {        tcpLog.log(Log.BRIEF,"(port " + port + ") op = "+ op);      }switch (op) {case TransportConstants.Call:        RemoteCall call=new StreamRemoteCall(conn);      if (serviceCall(call) == false)       return;    break;case TransportConstants.Ping:  DataOutputStream out=new DataOutputStream(conn.getOutputStream());out.writeByte(TransportConstants.PingAck);conn.releaseOutputStream();break;case TransportConstants.DGCAck:DGCAckHandler.received(UID.read(in));break;default :throw new IOException("unknown transport op " + op);}} while (persistent);} catch (IOException e) {if (tcpLog.isLoggable(Log.BRIEF)) {tcpLog.log(Log.BRIEF,"(port " + port + ") exception: ",e);}} finally {try {conn.close();} catch (IOException ex) {}}}  }
class C{  public static void doDeactivateHost(DbClient dbClient,Host host){  List<IpInterface> hostInterfaces=queryIpInterfaces(dbClient,host.getId());  for (  IpInterface hostInterface : hostInterfaces) {    hostInterface.setRegistrationStatus(RegistrationStatus.UNREGISTERED.toString());    dbClient.markForDeletion(hostInterface);    EventUtils.deleteResourceEvents(dbClient,hostInterface.getId());  }  List<Initiator> initiators=queryInitiators(dbClient,host.getId());  for (  Initiator initiator : initiators) {    initiator.setRegistrationStatus(RegistrationStatus.UNREGISTERED.toString());    dbClient.markForDeletion(initiator);    EventUtils.deleteResourceEvents(dbClient,initiator.getId());  }  host.setRegistrationStatus(RegistrationStatus.UNREGISTERED.toString());  host.setProvisioningStatus(Host.ProvisioningJobStatus.COMPLETE.toString());  dbClient.persistObject(host);  _log.info("marking host for deletion: {} {}",host.getLabel(),host.getId());  dbClient.markForDeletion(host);  EventUtils.deleteResourceEvents(dbClient,host.getId());}  }
class C{  public void sendCanMessage(CanMessage m,CanListener reply){  log.debug("GcTrafficController sendCanMessage() " + m.toString());  sendMessage(m,reply);}  }
class C{  public static Automaton determinizeSimple(Automaton a){  Set<Integer> initialset=new HashSet<>();  initialset.add(0);  return determinizeSimple(a,initialset);}  }
class C{  public void addResponseTrailer(String key,String val){  if (rsptrailers == null)   rsptrailers=new MessageHeader();  rsptrailers.add(key,val);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected boolean canConnect(ConnectionFigure f,Connector startConnector){  return f.canConnect(startConnector);}  }
class C{  public void testTungstenCatalogAcceptWithFile() throws ReplicatorException, InterruptedException {  ReplicateFilter rf=new ReplicateFilter();  rf.setTungstenSchema("tungsten_foo");  rf.setFilePrefix("filter/testTungstenCatalogAcceptWithFile");  filterHelper.setFilter(rf);  verifyStmtAccept(filterHelper,0,"bar","delete from tungsten_foo.trep_commit_seqno where task_id=9");  verifyRowAccept(filterHelper,1,"tungsten_foo","trep_commit_seqno",new String[]{"task_id"},new Object[]{0});  filterHelper.done();}  }
class C{  public ConcurrentTrigger(){  super(Options.set,"Concurrent Trigger","Concurrent trigger percentage",30);}  }
class C{  private void sortByCrowdingDistance(List<Individual> rank){  Iterator<Individual> f=rank.iterator();  int numberOfCriteria=0;  while (f.hasNext()) {    Individual current=f.next();    current.setCrowdingDistance(0.0d);    numberOfCriteria=Math.max(numberOfCriteria,current.getPerformance().getSize());  }  for (int m=0; m < numberOfCriteria; m++) {    Comparator<Individual> comparator=new CriteriaComparator(m);    Collections.sort(rank,comparator);    rank.get(0).setCrowdingDistance(Double.POSITIVE_INFINITY);    rank.get(rank.size() - 1).setCrowdingDistance(Double.POSITIVE_INFINITY);    for (int i=1; i < (rank.size() - 1); i++) {      Individual current=rank.get(i);      double currentCrowdingDistance=current.getCrowdingDistance();      Individual afterI=rank.get(i + 1);      Individual beforeI=rank.get(i - 1);      double afterPerformance=afterI.getPerformance().getCriterion(m).getFitness();      double beforePerformance=beforeI.getPerformance().getCriterion(m).getFitness();      current.setCrowdingDistance(currentCrowdingDistance + Math.abs(afterPerformance - beforePerformance));    }  }  Collections.sort(rank,new CrowdingComparator());}  }
class C{  public MuleClassPath(File muleHome){  for (  String muleFolder : MuleSdk.MULE_JARS_FOLDERS) {    final File userDir=new File(muleHome,muleFolder);    if (userDir.exists()) {      this.addFile(userDir);      this.addFiles(this.listJars(userDir));    }  }}  }
class C{  public static byte[] objectToByteArr(Object underlying){  ByteArrayOutputStream baos=new ByteArrayOutputStream();  ObjectOutputStream oos;  try {    oos=new ObjectOutputStream(baos);    oos.writeObject(underlying);    oos.close();    baos.close();  } catch (  IOException e) {    throw new RuntimeException("IO error serializing object: " + e.getMessage(),e);  }  return baos.toByteArray();}  }
class C{  java.sql.Time toSqlTime(Calendar calendar){  return new java.sql.Time(getTimeInMillis(calendar));}  }
class C{  private void calculateAuthTimeClaim(final OAuth2Request request,final JWTClaimsSet.Builder idClaims){  final long authTime=Long.parseLong(request.getExtensions().get(OIDCConstants.AUTH_TIME).toString()) / 1000;  log.debug("Request contains {} extension. {} set to {}",ConnectRequestParameters.MAX_AGE,OIDCConstants.AUTH_TIME,authTime);  idClaims.claim(OIDCConstants.AUTH_TIME,authTime);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:03.291 -0500",hash_original_method="00C81AD9ACCD847707085D62472884FD",hash_generated_method="525004621FECD4C505A7ED932738A65D") public int width(){  return mColumns;}  }
class C{  static byte[] altBase64ToByteArray(String s){  return base64ToByteArray(s,true);}  }
class C{  @Override public boolean parseLine(String line){  if (parseLine(pattern,RFC5424_HEADER_TIMESTAMP_GROUP,RFC5424_HEADER_HOSTNAME_GROUP,RFC5424_HEADER_APPNAME_GROUP,RFC5424_HEADER_PROCID_GROUP,MSG_GROUP,line)) {    if (m_component.equals("-")) {      m_component="";    }    if (m_pid.equals("-")) {      m_pid="";    }    return true;  }  ;  return false;}  }
class C{  public final synchronized void fromByteArray(byte[] data,int version){  ByteArrayInputStream bais=null;  DataInputStream dis=null;  try {    bais=new ByteArrayInputStream(data);    dis=new DataInputStream(bais);    game.readFromStream(dis,version);    game.tree.translateMoves();  } catch (  IOException e) {  }catch (  ChessParseError e) {  } finally {    if (dis != null)     try {      dis.close();    } catch (    IOException ex) {    }    if (bais != null)     try {      bais.close();    } catch (    IOException ex) {    }  }}  }
class C{  private boolean parseHtml(String html){  Pattern p=Pattern.compile("<meta http-equiv=\"refresh\" content=\"([^;]*); url=([\"]*)\">");  Matcher m=p.matcher(html);  if (!m.find()) {    p=Pattern.compile("<meta content=\"([^;]*); url=([^\"]*)\" http-equiv=\"refresh\">");    m=p.matcher(html);  }  if (!m.find()) {    return false;  }  delay=Integer.parseInt(m.group(1));  url=m.group(2);  return true;}  }
class C{  public double[] distributionForInstance(Instance instance) throws Exception {  return m_Classifier.distributionForInstance(instance);}  }
class C{  static void putTarget(int typeRef,TypePath typePath,ByteVector out){switch (typeRef >>> 24) {case 0x00:case 0x01:case 0x16:    out.putShort(typeRef >>> 16);  break;case 0x13:case 0x14:case 0x15:out.putByte(typeRef >>> 24);break;case 0x47:case 0x48:case 0x49:case 0x4A:case 0x4B:out.putInt(typeRef);break;default :out.put12(typeRef >>> 24,(typeRef & 0xFFFF00) >> 8);break;}if (typePath == null) {out.putByte(0);} else {int length=typePath.b[typePath.offset] * 2 + 1;out.putByteArray(typePath.b,typePath.offset,length);}}  }
class C{  private GridThreadLocalTable fakeTable(Connection c,int idx){  List<GridThreadLocalTable> tbls=fakeTbls;  assert tbls.size() >= idx;  if (tbls.size() == idx) {    fakeTblsLock.lock();    try {      if ((tbls=fakeTbls).size() == idx) {        try (Statement stmt=c.createStatement()){          stmt.executeUpdate("CREATE TABLE " + table(idx) + "(fake BOOL) ENGINE \""+ GridThreadLocalTable.Engine.class.getName()+ '"');        } catch (        SQLException e) {          throw new IllegalStateException(e);        }        List<GridThreadLocalTable> newTbls=new ArrayList<>(tbls.size() + 1);        newTbls.addAll(tbls);        newTbls.add(GridThreadLocalTable.Engine.getCreated());        fakeTbls=tbls=newTbls;      }    }  finally {      fakeTblsLock.unlock();    }  }  return tbls.get(idx);}  }
class C{  public int accessFlags(){  return this.accessFlags;}  }
class C{  public static void addSlices(Map<String,Slice> target,String collectionName,Collection<Slice> slices,boolean multiCollection){  for (  Slice slice : slices) {    String key=slice.getName();    if (multiCollection)     key=collectionName + "_" + key;    target.put(key,slice);  }}  }
class C{  public int from(){  return v;}  }
class C{  public static PublicKeyStore convert(PGPPublicKey pgpKey) throws IOException {  String fingerprint=new String(Hex.encodeHex(pgpKey.getFingerprint(),false));  PublicKeyStore pk=new PublicKeyStoreEntity();  pk.setFingerprint(fingerprint);  pk.setKeyId(PGPKeyUtil.getKeyId(fingerprint));  pk.setShortKeyId(PGPKeyUtil.getShortKeyId(fingerprint));  pk.setKeyData(pgpKey.getPublicKeyPacket().getEncoded());  return pk;}  }
class C{  public boolean isGreaterThen(Quantity quantity){  assertDefined();  Integer thisValue=notNull(this);  Integer parameter=notNull(quantity);  return (thisValue.compareTo(parameter) > 0);}  }
class C{  protected Element appendElement(Document doc,String el,Element e2){  Element e=doc.createElement(el);  e.appendChild(e2);  return e;}  }
class C{  private static void dualPivotQuicksort(char[] a,int left,int right){  int sixth=(right - left + 1) / 6;  int e1=left + sixth;  int e5=right - sixth;  int e3=(left + right) >>> 1;  int e4=e3 + sixth;  int e2=e3 - sixth;  char ae1=a[e1], ae2=a[e2], ae3=a[e3], ae4=a[e4], ae5=a[e5];  if (ae1 > ae2) {    char t=ae1;    ae1=ae2;    ae2=t;  }  if (ae4 > ae5) {    char t=ae4;    ae4=ae5;    ae5=t;  }  if (ae1 > ae3) {    char t=ae1;    ae1=ae3;    ae3=t;  }  if (ae2 > ae3) {    char t=ae2;    ae2=ae3;    ae3=t;  }  if (ae1 > ae4) {    char t=ae1;    ae1=ae4;    ae4=t;  }  if (ae3 > ae4) {    char t=ae3;    ae3=ae4;    ae4=t;  }  if (ae2 > ae5) {    char t=ae2;    ae2=ae5;    ae5=t;  }  if (ae2 > ae3) {    char t=ae2;    ae2=ae3;    ae3=t;  }  if (ae4 > ae5) {    char t=ae4;    ae4=ae5;    ae5=t;  }  a[e1]=ae1;  a[e3]=ae3;  a[e5]=ae5;  char pivot1=ae2;  a[e2]=a[left];  char pivot2=ae4;  a[e4]=a[right];  int less=left + 1;  int great=right - 1;  boolean pivotsDiffer=(pivot1 != pivot2);  if (pivotsDiffer) {    outer:     for (int k=less; k <= great; k++) {      char ak=a[k];      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=a[great];          a[great--]=ak;        }      }    }  } else {    for (int k=less; k <= great; k++) {      char ak=a[k];      if (ak == pivot1) {        continue;      }      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else {        while (a[great] > pivot1) {          great--;        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=pivot1;          a[great--]=ak;        }      }    }  }  a[left]=a[less - 1];  a[less - 1]=pivot1;  a[right]=a[great + 1];  a[great + 1]=pivot2;  doSort(a,left,less - 2);  doSort(a,great + 2,right);  if (!pivotsDiffer) {    return;  }  if (less < e1 && great > e5) {    while (a[less] == pivot1) {      less++;    }    while (a[great] == pivot2) {      great--;    }    outer:     for (int k=less; k <= great; k++) {      char ak=a[k];      if (ak == pivot2) {        while (a[great] == pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] == pivot1) {          a[k]=a[less];          a[less++]=pivot1;        } else {          a[k]=a[great];        }        a[great--]=pivot2;      } else       if (ak == pivot1) {        a[k]=a[less];        a[less++]=pivot1;      }    }  }  doSort(a,less,great);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("From " + request.getRemoteHost() + " - "+ request.getRemoteAddr());  HttpSession session=request.getSession(true);  session.removeAttribute(WebSessionCtx.HDR_MESSAGE);  boolean success=processParameter(request);  String url="/info.jsp";  log.info("Forward to " + url);  RequestDispatcher dispatcher=getServletContext().getRequestDispatcher(url);  dispatcher.forward(request,response);}  }
class C{  public CertificateRequest(HandshakeIODataStream in,int length) throws IOException {  int size=in.readUint8();  certificate_types=new byte[size];  Streams.readFully(in,certificate_types);  size=in.readUint16();  int totalPrincipalsLength=0;  int principalLength=0;  ArrayList<X500Principal> principals=new ArrayList<X500Principal>();  while (totalPrincipalsLength < size) {    principalLength=in.readUint16();    principals.add(new X500Principal(in));    totalPrincipalsLength+=2;    totalPrincipalsLength+=principalLength;  }  certificate_authorities=principals.toArray(new X500Principal[principals.size()]);  this.length=3 + certificate_types.length + totalPrincipalsLength;  if (this.length != length) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect CertificateRequest");  }}  }
class C{  void cellToPoint(int cellX,int cellY,int[] result){  final int hStartPadding=getPaddingLeft();  final int vStartPadding=getPaddingTop();  result[0]=hStartPadding + cellX * (mCellWidth + mWidthGap);  result[1]=vStartPadding + cellY * (mCellHeight + mHeightGap);}  }
class C{  private static void correctCodeWordVertices(ResultPoint[] vertices,boolean upsideDown){  float v0x=vertices[0].getX();  float v0y=vertices[0].getY();  float v2x=vertices[2].getX();  float v2y=vertices[2].getY();  float v4x=vertices[4].getX();  float v4y=vertices[4].getY();  float v6x=vertices[6].getX();  float v6y=vertices[6].getY();  float skew=v4y - v6y;  if (upsideDown) {    skew=-skew;  }  if (skew > SKEW_THRESHOLD) {    float deltax=v6x - v0x;    float deltay=v6y - v0y;    float delta2=deltax * deltax + deltay * deltay;    float correction=(v4x - v0x) * deltax / delta2;    vertices[4]=new ResultPoint(v0x + correction * deltax,v0y + correction * deltay);  } else   if (-skew > SKEW_THRESHOLD) {    float deltax=v2x - v4x;    float deltay=v2y - v4y;    float delta2=deltax * deltax + deltay * deltay;    float correction=(v2x - v6x) * deltax / delta2;    vertices[6]=new ResultPoint(v2x - correction * deltax,v2y - correction * deltay);  }  float v1x=vertices[1].getX();  float v1y=vertices[1].getY();  float v3x=vertices[3].getX();  float v3y=vertices[3].getY();  float v5x=vertices[5].getX();  float v5y=vertices[5].getY();  float v7x=vertices[7].getX();  float v7y=vertices[7].getY();  skew=v7y - v5y;  if (upsideDown) {    skew=-skew;  }  if (skew > SKEW_THRESHOLD) {    float deltax=v7x - v1x;    float deltay=v7y - v1y;    float delta2=deltax * deltax + deltay * deltay;    float correction=(v5x - v1x) * deltax / delta2;    vertices[5]=new ResultPoint(v1x + correction * deltax,v1y + correction * deltay);  } else   if (-skew > SKEW_THRESHOLD) {    float deltax=v3x - v5x;    float deltay=v3y - v5y;    float delta2=deltax * deltax + deltay * deltay;    float correction=(v3x - v7x) * deltax / delta2;    vertices[7]=new ResultPoint(v3x - correction * deltax,v3y - correction * deltay);  }}  }
class C{  public static Builder createBuilder(Header header,WritableFontData data){  return new Builder(header,data);}  }
class C{  public synchronized void autoFit(){  for (  ExecutionUnit unit : model.getProcesses()) {    ensureOperatorsHaveLocation(unit);    autoFit(unit,false);  }  balance();  view.updateExtensionButtons();}  }
class C{  public PrivateTextEvent(final NotificationType type,final String text){  super(Events.PRIVATE_TEXT);  put(TEXT_TYPE,type.name());  put(TEXT,text);}  }
class C{  private static Pointer computePointer(IntBuffer buffer){  Pointer result=null;  if (buffer.isDirect()) {    int oldPosition=buffer.position();    buffer.position(0);    result=Pointer.to(buffer.slice()).withByteOffset(oldPosition * Sizeof.INT);    buffer.position(oldPosition);  } else   if (buffer.hasArray()) {    IntBuffer t=IntBuffer.wrap(buffer.array());    int elementOffset=buffer.position() + buffer.arrayOffset();    result=Pointer.to(t).withByteOffset(elementOffset * Sizeof.INT);  }  return result;}  }
class C{  private UPSCoord convertMGRSToUPS(String MGRS){  long ltr2_high_value;  long ltr3_high_value;  long ltr2_low_value;  double false_easting;  double false_northing;  double grid_easting;  double grid_northing;  int index=0;  long error_code=MGRS_NO_ERROR;  String hemisphere;  double easting, northing;  MGRSComponents mgrs=breakMGRSString(MGRS);  if (mgrs == null)   error_code=this.last_error;  if (mgrs != null && mgrs.zone > 0)   error_code|=MGRS_STRING_ERROR;  if (error_code == MGRS_NO_ERROR) {    easting=mgrs.easting;    northing=mgrs.northing;    if (mgrs.latitudeBand >= LETTER_Y) {      hemisphere=AVKey.NORTH;      index=mgrs.latitudeBand - 22;      ltr2_low_value=upsConstants[index][1];      ltr2_high_value=upsConstants[index][2];      ltr3_high_value=upsConstants[index][3];      false_easting=upsConstants[index][4];      false_northing=upsConstants[index][5];    } else {      hemisphere=AVKey.SOUTH;      ltr2_low_value=upsConstants[mgrs.latitudeBand][12];      ltr2_high_value=upsConstants[mgrs.latitudeBand][2];      ltr3_high_value=upsConstants[mgrs.latitudeBand][3];      false_easting=upsConstants[mgrs.latitudeBand][4];      false_northing=upsConstants[mgrs.latitudeBand][5];    }    if ((mgrs.squareLetter1 < ltr2_low_value) || (mgrs.squareLetter1 > ltr2_high_value) || ((mgrs.squareLetter1 == LETTER_D) || (mgrs.squareLetter1 == LETTER_E) || (mgrs.squareLetter1 == LETTER_M)|| (mgrs.squareLetter1 == LETTER_N)|| (mgrs.squareLetter1 == LETTER_V)|| (mgrs.squareLetter1 == LETTER_W))|| (mgrs.squareLetter2 > ltr3_high_value))     error_code=MGRS_STRING_ERROR;    if (error_code == MGRS_NO_ERROR) {      grid_northing=(double)mgrs.squareLetter2 * ONEHT + false_northing;      if (mgrs.squareLetter2 > LETTER_I)       grid_northing=grid_northing - ONEHT;      if (mgrs.squareLetter2 > LETTER_O)       grid_northing=grid_northing - ONEHT;      grid_easting=(double)((mgrs.squareLetter1) - ltr2_low_value) * ONEHT + false_easting;      if (ltr2_low_value != LETTER_A) {        if (mgrs.squareLetter1 > LETTER_L)         grid_easting=grid_easting - 300000.0;        if (mgrs.squareLetter1 > LETTER_U)         grid_easting=grid_easting - 200000.0;      } else {        if (mgrs.squareLetter1 > LETTER_C)         grid_easting=grid_easting - 200000.0;        if (mgrs.squareLetter1 > LETTER_I)         grid_easting=grid_easting - ONEHT;        if (mgrs.squareLetter1 > LETTER_L)         grid_easting=grid_easting - 300000.0;      }      easting=grid_easting + easting;      northing=grid_northing + northing;      return UPSCoord.fromUPS(hemisphere,easting,northing,globe);    }  }  return null;}  }
class C{  public Boolean isSnapshotInBackground(){  return snapshotInBackground;}  }
class C{  public DenseSensorMatrix(final int rows,final int columns,final int receptiveFieldWidth,final int receptiveFieldHeight,final Filter defaultFilter){  super(receptiveFieldWidth,receptiveFieldHeight,defaultFilter);  if (rows < 1) {    throw new IllegalArgumentException("rows must be >= 1");  }  if (columns < 1) {    throw new IllegalArgumentException("columns must be >= 1");  }  sensors=new Object[rows][columns];  createSensors();}  }
class C{  public static double mean(double shape,double scale){  if (shape > 1) {    return scale / (shape - 1);  }  return Double.POSITIVE_INFINITY;}  }
class C{  @Override public void scrollToTop(){  setSelection(0);}  }
class C{  void filtersChanged(){  rebuild();  fireTableDataChanged();}  }
class C{  public static tuple2<String,Integer> extractOne(String query,list<String> choices,Function<tuple2<String,Boolean>,String> processor,Function<tuple3<String,String,Boolean>,Integer> scorer,Integer score_cutoff){  if (score_cutoff == null) {    score_cutoff=0;  }  list<tuple2<String,Integer>> best_list=extract(query,choices,processor,scorer,1);  if (x.len(best_list) > 0 && best_list.get(0).value >= score_cutoff)   return best_list.get(0);  return null;}  }
class C{  public Map<String,Class<?>> mapAllImplementations(Class<?> interfase) throws IOException, ClassNotFoundException {  Map<String,Class<?>> implementations=new HashMap<>();  Map<String,String> map=mapAllStrings(interfase.getName());  for (Iterator<Entry<String,String>> iterator=map.entrySet().iterator(); iterator.hasNext(); ) {    Entry<String,String> entry=iterator.next();    String string=entry.getKey();    String className=entry.getValue();    Class<?> impl=_classLoader.loadClass(className);    if (!interfase.isAssignableFrom(impl)) {      throw new ClassCastException("Class not of type: " + interfase.getName());    }    implementations.put(string,impl);  }  return implementations;}  }
class C{  public static void createNotificationDirIfNotExists(){  createDirIfNotExists(SYSTEM_THEME_NOTIFICATION_PATH);}  }
class C{  public int numObjects(){  return ids.size();}  }
class C{  public boolean isLinearChain(){  return !this.getLattice().hasMoreThanOnePath();}  }
class C{  default B scaling(final int value){  this.meta().setScaling(value);  return this.getBuilder();}  }
class C{  public void paintTabbedPaneTabBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int tabIndex,int orientation){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public static void showErrorNotification(Project project,String text){  showNotification(project,MessageType.ERROR,text);}  }
class C{  public <X extends Throwable>FluentBiFunction<T1,T2,R> recover(final Class<X> type,final BiFunction<T1,T2,R> onError){  return FluentFunctions.of(null);}  }
class C{  public synchronized Index recreateIndex(IPath containerPath){  String containerPathString=containerPath.getDevice() == null ? containerPath.toString() : containerPath.toOSString();  try {    IndexLocation indexLocation=computeIndexLocation(containerPath);    Index index=getIndex(indexLocation);    ReadWriteMonitor monitor=index == null ? null : index.monitor;    if (VERBOSE)     Util.verbose("-> recreating index: " + indexLocation + " for path: "+ containerPathString);    index=new Index(indexLocation,containerPathString,false);    this.indexes.put(indexLocation,index);    index.monitor=monitor;    return index;  } catch (  IOException e) {    if (VERBOSE) {      Util.verbose("-> failed to recreate index for path: " + containerPathString);      e.printStackTrace();    }    return null;  }}  }
class C{  protected void onPrepareRequest(HttpUriRequest request) throws IOException {}  }
class C{  private void createPreStreamingTags(int timestamp,boolean clear){  log.debug("Creating pre-streaming tags");  if (clear) {    firstTags.clear();  }  ITag tag=null;  IoBuffer body=null;  if (hasVideo) {    body=IoBuffer.allocate(41);    body.setAutoExpand(true);    body.put(PREFIX_VIDEO_CONFIG_FRAME);    if (videoDecoderBytes != null) {      body.put(videoDecoderBytes);    }    tag=new Tag(IoConstants.TYPE_VIDEO,timestamp,body.position(),null,0);    body.flip();    tag.setBody(body);    firstTags.add(tag);  }  if (hasAudio) {    body=IoBuffer.allocate(7);    body.setAutoExpand(true);    body.put(new byte[]{(byte)0xaf,(byte)0});    if (audioDecoderBytes != null) {      body.put(audioDecoderBytes);    } else {      body.put(AUDIO_CONFIG_FRAME_AAC_LC);    }    body.put((byte)0x06);    tag=new Tag(IoConstants.TYPE_AUDIO,timestamp,body.position(),null,tag.getBodySize());    body.flip();    tag.setBody(body);    firstTags.add(tag);  }}  }
class C{  @Override public final void write(final String filename){  try {    this.openFile(filename);    this.handler.writeHeaderAndStartElement(this.writer);    this.handler.startPlans(this.population,this.writer);    this.handler.writeSeparator(this.writer);    this.writePersons();    this.handler.endPlans(this.writer);    log.info("Population written to: " + filename);  } catch (  IOException e) {    throw new UncheckedIOException(e);  } finally {    this.close();    counter.printCounter();    counter.reset();  }}  }
class C{  public static EncodedStringValue[] extract(String src){  String[] values=src.split(";");  ArrayList<EncodedStringValue> list=new ArrayList<EncodedStringValue>();  for (int i=0; i < values.length; i++) {    if (values[i].length() > 0) {      list.add(new EncodedStringValue(values[i]));    }  }  int len=list.size();  if (len > 0) {    return list.toArray(new EncodedStringValue[len]);  } else {    return null;  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:42.532 -0500",hash_original_method="E495FD5BB343CF99481A29E811E92BD2",hash_generated_method="0AF69A29991DEB492291E42E4EEA1909") public void close() throws IOException {  if (!this.closed) {    this.closed=true;    finish();    this.out.flush();  }}  }
class C{  public String lastWord(){  int size=1;  while (pos - size > 0 && lcText[pos - size] == ' ') {    size++;  }  while (pos - size > 0 && lcText[pos - size] != ' ' && lcText[pos - size] != ';') {    size++;  }  return this.substring((pos - size + 1),(pos - 1));}  }
class C{  public InputRegister createInputRegister(int value){  return new SimpleInputRegister(value);}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public void testHash64ByteArrayIntInt(){  Hasher hasher=new Murmur2Hasher(0x344d1f5c);  for (int i=0; i < input.length; i++) {    long hash=hasher.hash64(input[i]);    assertTrue(hash == results64_seed[i]);  }}  }
class C{  public boolean containsKeyInfoReference(){  return this.lengthKeyInfoReference() > 0;}  }
class C{  public static <T>T interpreterOnly(Callable<T> callable) throws Exception {  return callable.call();}  }
class C{  public AnimatedGIFTexture(String name,int resourceId,int textureSize){  super(TextureType.DIFFUSE,name);  mTextureSize=textureSize;  mResourceId=resourceId;  loadGIF();}  }
class C{  public long decodeVariantLong(byte[] read){  int shift=0;  long result=0;  ByteArrayInputStream in=new ByteArrayInputStream(read);  while (shift < 64) {    final byte b=(byte)in.read();    result|=(long)(b & 0x7F) << shift;    if ((b & 0x80) == 0) {      break;    }    shift+=7;  }  return ((result >>> 1) ^ -(result & 1));}  }
class C{  @Override public void write(int oneByte) throws IOException {  Streams.writeSingleByte(this,oneByte);}  }
class C{  public static void eliminateDeadInstructions(IR ir,boolean preserveImplicitSSA){  ArrayList<Instruction> setCaughtExceptionInstructions=null;  int getCaughtExceptionInstructions=0;  for (Instruction instr=ir.lastInstructionInCodeOrder(), prevInstr=null; instr != null; instr=prevInstr) {    prevInstr=instr.prevInstructionInCodeOrder();    if (instr.isPEI() || instr.isImplicitStore() || instr.isBranch()|| instr.isNonPureCall()) {      if (instr.operator() != TRAP) {        continue;      }      if (codeAfterTrapIsUnreachable(instr)) {        removeCodeAfterTrapInstruction(instr);      }      continue;    }    if (preserveImplicitSSA && (instr.isImplicitLoad() || instr.isAllocation() || instr.operator() == PHI)) {      continue;    }    if (instr.operator() == SET_CAUGHT_EXCEPTION) {      if (setCaughtExceptionInstructions == null) {        setCaughtExceptionInstructions=new ArrayList<Instruction>();      }      setCaughtExceptionInstructions.add(instr);    }    if (instr.operator() == NOP) {      DefUse.removeInstructionAndUpdateDU(instr);    }    if (instr.operator() == UNINT_BEGIN) {      Instruction s=instr.nextInstructionInCodeOrder();      if (s.operator() == UNINT_END) {        DefUse.removeInstructionAndUpdateDU(s);        DefUse.removeInstructionAndUpdateDU(instr);      }    }    if (Move.conforms(instr)) {      Register lhs=Move.getResult(instr).asRegister().getRegister();      if (Move.getVal(instr).isRegister()) {        Register rhs=Move.getVal(instr).asRegister().getRegister();        if (lhs == rhs) {          DefUse.removeInstructionAndUpdateDU(instr);          continue;        }      }    }    if (instr.operator() == GET_CAUGHT_EXCEPTION) {      getCaughtExceptionInstructions++;    }    boolean isDead=true;    boolean foundRegisterDef=false;    for (Enumeration<Operand> defs=instr.getDefs(); defs.hasMoreElements(); ) {      Operand def=defs.nextElement();      if (!def.isRegister()) {        isDead=false;        break;      }      foundRegisterDef=true;      RegisterOperand r=def.asRegister();      if (r.getRegister().useList != null) {        isDead=false;        break;      }      if (r.getRegister().isPhysical()) {        isDead=false;        break;      }    }    if (!isDead) {      continue;    }    if (!foundRegisterDef) {      continue;    }    if (instr.operator() == GET_CAUGHT_EXCEPTION) {      getCaughtExceptionInstructions--;    }    DefUse.removeInstructionAndUpdateDU(instr);  }  if (false && (getCaughtExceptionInstructions == 0) && (setCaughtExceptionInstructions != null)) {    for (    Instruction instr : setCaughtExceptionInstructions) {      DefUse.removeInstructionAndUpdateDU(instr);    }  }}  }
class C{  public static SimpleScheduleBuilder repeatMinutelyForTotalCount(int count){  if (count < 1)   throw new IllegalArgumentException("Total count of firings must be at least one! Given count: " + count);  return simpleSchedule().withIntervalInMinutes(1).withRepeatCount(count - 1);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private HostConfiguration configurationForConnection(final HttpConnection conn){  final HostConfiguration connectionConfiguration=new HostConfiguration();  connectionConfiguration.setHost(conn.getHost(),conn.getPort(),conn.getProtocol());  if (conn.getLocalAddress() != null) {    connectionConfiguration.setLocalAddress(conn.getLocalAddress());  }  if (conn.getProxyHost() != null) {    connectionConfiguration.setProxy(conn.getProxyHost(),conn.getProxyPort());  }  return connectionConfiguration;}  }
class C{  private URL checkURL(URL url){  String protocol=url.getProtocol();  if (protocol == null) {    throw new RepositoryException(repositoryName,"unknown url protocol from URL [" + url + "]");  }  for (  String supportedProtocol : supportedProtocols) {    if (supportedProtocol.equals(protocol)) {      try {        if (URIPattern.match(urlWhiteList,url.toURI())) {          return url;        }      } catch (      URISyntaxException ex) {        logger.warn("cannot parse the specified url [{}]",url);        throw new RepositoryException(repositoryName,"cannot parse the specified url [" + url + "]");      }      URL normalizedUrl=environment.resolveRepoURL(url);      if (normalizedUrl == null) {        logger.warn("The specified url [{}] doesn't start with any repository paths specified by the path.repo setting: [{}] or by repositories.url.allowed_urls setting: [{}] ",url,environment.repoFiles());        throw new RepositoryException(repositoryName,"file url [" + url + "] doesn't match any of the locations specified by path.repo or repositories.url.allowed_urls");      }      return normalizedUrl;    }  }  throw new RepositoryException(repositoryName,"unsupported url protocol [" + protocol + "] from URL ["+ url+ "]");}  }
class C{  public void write(byte[] buffer,long sleepTime){  try {    Thread.sleep(sleepTime);    mmOutStream.write(buffer);  } catch (  Exception e) {    Log.e(TAG,"Exception during write",e);  }}  }
class C{  protected AbstractChartPanel(String title,String unitName){  ArgumentChecking.notNull(title,"title");  initComponents();  this.title=title;  this.unitName=unitName;}  }
class C{  public boolean hasSegment(){  return hasExtension(Segment.class);}  }
class C{  @Override public boolean isRunning(){  return true;}  }
class C{  protected void onMeasureChild(final View child,final LayoutParams layoutParams){  int childWidthSpec=ViewGroup.getChildMeasureSpec(mWidthMeasureSpec,getListPaddingLeft() + getListPaddingRight(),layoutParams.width);  int lpHeight=layoutParams.height;  int childHeightSpec;  if (lpHeight > 0) {    childHeightSpec=MeasureSpec.makeMeasureSpec(lpHeight,MeasureSpec.EXACTLY);  } else {    childHeightSpec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);  }  child.measure(childWidthSpec,childHeightSpec);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Watched w=Wizard.getInstance().getWatch(getAir(stack));  return (w == null) ? new Long(0) : new Long(w.getWatchDuration());}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  private WildFlyModuleUtils(){}  }
class C{  public CertificatePolicyId(ObjectIdentifier id){  this.id=id;}  }
class C{  public RunningServiceInfo(){}  }
class C{  public synchronized void updateTypeSubstitution(final INaviOperandTreeNode node,final TypeSubstitution substitution,final BaseType baseType,final List<TypeMember> memberPath,final int offset) throws CouldntSaveDataException {  Preconditions.checkNotNull(node,"IE02799: Operand tree node can not be null.");  Preconditions.checkNotNull(substitution,"IE02800: Type subustitution can not be null.");  Preconditions.checkNotNull(baseType,"IE02801: Base type can not be null.");  typesContainer.updateTypeSubstitution(substitution,baseType,memberPath,offset);  backend.updateSubstitution(substitution,baseType,membersToIds(memberPath),offset);  notifySubstitutionChanged(substitution);}  }
class C{  private void throwChecked(Throwable t){  this.<Error>throwChecked0(t);}  }
class C{  public PointerHierarchyRepresentationResult complete(){  if (csize != null) {    csize.destroy();    csize=null;  }  return new PointerHierarchyRepresentationResult(ids,parent,parentDistance);}  }
class C{  private void checkLog(IgniteLogger log){  assert !log.isDebugEnabled();  assert log.isInfoEnabled();  log.debug("This is 'debug' message.");  log.info("This is 'info' message.");  log.warning("This is 'warning' message.");  log.warning("This is 'warning' message.",new Exception("It's a test warning exception"));  log.error("This is 'error' message.");  log.error("This is 'error' message.",new Exception("It's a test error exception"));}  }
class C{  protected static final String addEscapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  public void toPrecedenceFreeEPL(StringWriter writer){  super.toEPL(writer);}  }
class C{  public Trigger(Alert alert,TriggerType type,String name,double threshold,long inertiaMillis){  this(alert,type,name,threshold,null,inertiaMillis);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"UHADD8");  translateAll(environment,instruction,"UHADD8",instructions);}  }
class C{  public Node(final BitVector path){  this(path,-1);}  }
class C{  public boolean checkNode(){  if (parser.checkEvent(Event.ID.StreamStart)) {    parser.getEvent();  }  return !parser.checkEvent(Event.ID.StreamEnd);}  }
class C{  public void testFlipBitZeroOutside1(){  byte aBytes[]={0};  int aSign=0;  int number=62;  byte rBytes[]={64,0,0,0,0,0,0,0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.flipBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue("incorrect value",resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public boolean createManager(){synchronized (instances) {    if (federatingManager != null) {      return false;    }    system.handleResourceEvent(ResourceEvent.MANAGER_CREATE,null);    federatingManager=new FederatingManager(jmxAdapter,repo,system,this,cache);    getGemFireCacheImpl().getJmxManagerAdvisor().broadcastChange();    return true;  }}  }
class C{  protected void writeCloseTag(String nsAlias,String name) throws IOException {  Element element=currentElement();  if (element.openTagEnded) {    if (isPrettyPrintingEnabled()) {      writeNewline();      writeIndentation();    }    writer.write("</");    writeQualifiedName(nsAlias,name);    writer.write(">");  } else {    writer.write("/>");  }}  }
class C{  public void body(String namespace,String name,String text) throws Exception {}  }
class C{  public synchronized void add(final String name,final long threadId){  if (mFinished) {    throw new IllegalStateException("Marker added to finished log");  }  mMarkers.add(new Marker(name,threadId,SystemClock.elapsedRealtime()));}  }
class C{  static void readVIntBlock(IndexInput docIn,int[] docBuffer,int[] freqBuffer,int num,boolean indexHasFreq) throws IOException {  if (indexHasFreq) {    for (int i=0; i < num; i++) {      final int code=docIn.readVInt();      docBuffer[i]=code >>> 1;      if ((code & 1) != 0) {        freqBuffer[i]=1;      } else {        freqBuffer[i]=docIn.readVInt();      }    }  } else {    for (int i=0; i < num; i++) {      docBuffer[i]=docIn.readVInt();    }  }}  }
class C{  private static boolean isExecuteMethod(final Method method){  return method.getName().contains("actionPerformed");}  }
class C{  protected boolean isEnabled(){  return true;}  }
class C{  public boolean intersects(Geometry geom){  List lineSegStr=SegmentStringUtil.extractSegmentStrings(geom);  if (lineSegStr.size() > 0) {    boolean segsIntersect=prepLine.getIntersectionFinder().intersects(lineSegStr);    if (segsIntersect)     return true;  }  if (geom.getDimension() == 1)   return false;  if (geom.getDimension() == 2 && prepLine.isAnyTargetComponentInTest(geom))   return true;  if (geom.getDimension() == 0)   return isAnyTestPointInTarget(geom);  return false;}  }
class C{  public void copy(PSPModuleInfo moduleInfo){  attribute=(short)(moduleInfo.getM_attr() & 0xFFFF);  version[0]=(byte)(moduleInfo.getM_version() & 0xFF);  version[1]=(byte)((moduleInfo.getM_version() >> 8) & 0xFF);  modname=moduleInfo.getM_namez();  gp_value=(int)(moduleInfo.getM_gp() & 0xFFFFFFFFL);  ent_top=(int)moduleInfo.getM_exports();  ent_size=(int)moduleInfo.getM_exp_end() - ent_top;  stub_top=(int)moduleInfo.getM_imports();  stub_size=(int)moduleInfo.getM_imp_end() - stub_top;}  }
class C{  private void init() throws IOException {  IStreamableFile streamFile=null;  String fileName=file.getName();  if (fileName.endsWith("mp3") || fileName.endsWith("MP3")) {    streamFile=new MP3(file);  } else   if (fileName.endsWith("mp4") || fileName.endsWith("MP4")) {    streamFile=new MP4(file);  } else   if (fileName.endsWith("flv") || fileName.endsWith("FLV")) {    streamFile=new FLV(file);  }  reader=streamFile.getReader();  if (start > 0) {    seek(start);  }}  }
class C{  public RangeQueryBuilder lte(Object to){  this.to=to;  this.includeUpper=true;  return this;}  }
class C{  public YearMonth addWrapFieldToCopy(int valueToAdd){  int[] newValues=iBase.getValues();  newValues=getField().addWrapField(iBase,iFieldIndex,newValues,valueToAdd);  return new YearMonth(iBase,newValues);}  }
class C{  @Override public boolean supportsDifferentTableCorrelationNames(){  debugCodeCall("supportsDifferentTableCorrelationNames");  return false;}  }
class C{  public final V accumulateAndGet(V x,BinaryOperator<V> accumulatorFunction){  V prev, next;  do {    prev=get();    next=accumulatorFunction.apply(prev,x);  } while (!compareAndSet(prev,next));  return next;}  }
class C{  public static boolean startsWith(byte[] ref,BytesRef prefix){  if (ref.length < prefix.length) {    return false;  }  for (int i=0; i < prefix.length; i++) {    if (ref[i] != prefix.bytes[prefix.offset + i]) {      return false;    }  }  return true;}  }
class C{  protected URL makeIssueEntryUrl(String issueId) throws MalformedURLException {  return new URL(issuesBaseUri + PROJECTION + "/"+ issueId);}  }
class C{  public SQLException(String reason,String sqlState,int vendorCode,Throwable cause){  super(reason,cause);  this.SQLState=sqlState;  this.vendorCode=vendorCode;  if (!(this instanceof SQLWarning)) {    if (DriverManager.getLogWriter() != null) {      DriverManager.println("SQLState(" + SQLState + ") vendor code("+ vendorCode+ ")");      printStackTrace(DriverManager.getLogWriter());    }  }}  }
class C{  public static void addGhoulHelmetTexture(Item helmet,String res){  addGhoulHelmetTexture(helmet,new ResourceLocation(res));}  }
class C{  public boolean hasNotifications(){  return mCenter.hasEntries(ID);}  }
class C{  public VcfRecord mergeRecordsWithSameRef(VcfRecord[] records,VcfHeader[] headers,VcfHeader destHeader,Set<String> unmergeableFormatFields,boolean dropUnmergeable){  final String refCall=records[0].getRefCall();  final int pos=records[0].getStart();  final int length=records[0].getLength();  final Set<String> uniqueIds=new LinkedHashSet<>();  for (  final VcfRecord vcf : records) {    if (pos != vcf.getStart() || length != vcf.getLength()) {      throw new RuntimeException("Attempt to merge records with different reference span at: " + new SequenceNameLocusSimple(records[0]));    } else     if (!refCall.equals(vcf.getRefCall())) {      throw new VcfFormatException("Records at " + new SequenceNameLocusSimple(records[0]) + " disagree on what the reference bases should be! ("+ refCall+ " != "+ vcf.getRefCall()+ ")");    }    final String[] ids=StringUtils.split(vcf.getId(),VcfUtils.VALUE_SEPARATOR);    Collections.addAll(uniqueIds,ids);  }  final VcfRecord merged=new VcfRecord(records[0].getSequenceName(),records[0].getStart(),records[0].getRefCall());  final StringBuilder idsb=new StringBuilder();  int z=0;  for (  final String id : uniqueIds) {    if (z > 0) {      idsb.append(VcfUtils.VALUE_SEPARATOR);    }    idsb.append(id);    z++;  }  merged.setId(idsb.toString());  boolean altsChanged=false;  final int[][] gtMap=new int[records.length][];  final List<String> mergedAltCalls=merged.getAltCalls();  for (int i=0; i < records.length; i++) {    final VcfRecord vcf=records[i];    final int numAlts=vcf.getAltCalls().size();    gtMap[i]=new int[numAlts + 1];    for (int j=0; j < numAlts; j++) {      final String alt=vcf.getAltCalls().get(j);      if (alt.equals(refCall)) {        gtMap[i][j + 1]=0;        altsChanged=true;      } else {        int altIndex=mergedAltCalls.indexOf(alt);        if (altIndex == -1) {          altIndex=mergedAltCalls.size();          mergedAltCalls.add(alt);        }        gtMap[i][j + 1]=altIndex + 1;        if (j != altIndex) {          altsChanged=true;        }      }    }    if (numAlts != mergedAltCalls.size()) {      altsChanged=true;    }  }  merged.setQuality(records[0].getQuality());  merged.getFilters().addAll(records[0].getFilters());  merged.setNumberOfSamples(destHeader.getNumberOfSamples());  for (  final Map.Entry<String,ArrayList<String>> entry : records[0].getInfo().entrySet()) {    ArrayList<String> val=merged.getInfo().get(entry.getKey());    if (val == null) {      val=new ArrayList<>();      merged.getInfo().put(entry.getKey(),val);    }    for (    final String s : entry.getValue()) {      val.add(s);    }  }  final List<String> names=destHeader.getSampleNames();  for (int destSampleIndex=0; destSampleIndex < names.size(); destSampleIndex++) {    boolean sampleDone=false;    for (int i=0; i < headers.length; i++) {      final int sampleIndex=headers[i].getSampleNames().indexOf(names.get(destSampleIndex));      if (sampleIndex > -1) {        if (sampleDone) {          if (++mMultipleRecordsForSampleCount <= DUPLICATE_WARNINGS_TO_PRINT) {            Diagnostic.warning("Multiple records found at position: " + merged.getSequenceName() + ":"+ merged.getOneBasedStart()+ " for sample: "+ names.get(destSampleIndex)+ ". Keeping first.");          }          continue;        }        sampleDone=true;        for (        final String key : records[i].getFormats()) {          ArrayList<String> field=merged.getFormat(key);          if (field == null) {            field=new ArrayList<>();            merged.getFormatAndSample().put(key,field);          }          while (field.size() <= destSampleIndex) {            field.add(VcfRecord.MISSING);          }          if (key.equals(VcfUtils.FORMAT_GENOTYPE)) {            final String gtStr=records[i].getFormat(key).get(sampleIndex);            final int[] splitGt=VcfUtils.splitGt(gtStr);            for (int gti=0; gti < splitGt.length; gti++) {              if (splitGt[gti] != -1) {                if (splitGt[gti] >= gtMap[i].length) {                  throw new VcfFormatException("Invalid GT " + gtStr + " in input record: "+ records[i]);                }                splitGt[gti]=gtMap[i][splitGt[gti]];              }            }            final char sep=gtStr.indexOf(VcfUtils.PHASED_SEPARATOR) != -1 ? VcfUtils.PHASED_SEPARATOR : VcfUtils.UNPHASED_SEPARATOR;            final StringBuilder sb=new StringBuilder();            sb.append(splitGt[0] == -1 ? VcfRecord.MISSING : splitGt[0]);            for (int gti=1; gti < splitGt.length; gti++) {              sb.append(sep).append(splitGt[gti] == -1 ? VcfRecord.MISSING : splitGt[gti]);            }            field.set(destSampleIndex,sb.toString());          } else {            field.set(destSampleIndex,records[i].getFormat(key).get(sampleIndex));          }        }      }    }  }  if (names.size() > 0 && merged.getFormats().size() == 0) {    merged.addFormat(mDefaultFormat);  }  for (  final String key : merged.getFormats()) {    final ArrayList<String> field=merged.getFormat(key);    while (field.size() < destHeader.getNumberOfSamples()) {      field.add(VcfRecord.MISSING);    }  }  if (altsChanged) {    final Set<String> formats=merged.getFormats();    for (    String field : unmergeableFormatFields) {      if (formats.contains(field)) {        if (dropUnmergeable) {          merged.getFormatAndSample().remove(field);        } else {          return null;        }      }    }  }  return merged;}  }
class C{  public CreateRequest(int objectId,Collection<LwM2mResource> resources){  this(objectId,resources.toArray(new LwM2mResource[resources.size()]));}  }
class C{  public static int codePointBefore(char[] seq,int index,int start){  if (seq == null) {    throw new NullPointerException();  }  int len=seq.length;  if (index <= start || index > len || start < 0 || start >= len) {    throw new IndexOutOfBoundsException();  }  char low=seq[--index];  if (--index < start) {    return low;  }  char high=seq[index];  if (isSurrogatePair(high,low)) {    return toCodePoint(high,low);  }  return low;}  }
class C{  public static void onApplicationStarted(Activity activity){  SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(activity);  SharedPreferences.Editor editor=preferences.edit();  editor.putBoolean(RESTART_IN_PROGRESS_KEY,false);  editor.commit();}  }
class C{  public static Bitmap createIconBitmap(Drawable icon,Context context){synchronized (sCanvas) {    if (sIconWidth == -1) {      initStatics(context);    }    int width=sIconWidth;    int height=sIconHeight;    if (icon instanceof PaintDrawable) {      PaintDrawable painter=(PaintDrawable)icon;      painter.setIntrinsicWidth(width);      painter.setIntrinsicHeight(height);    } else     if (icon instanceof BitmapDrawable) {      BitmapDrawable bitmapDrawable=(BitmapDrawable)icon;      Bitmap bitmap=bitmapDrawable.getBitmap();      if (bitmap.getDensity() == Bitmap.DENSITY_NONE) {        bitmapDrawable.setTargetDensity(context.getResources().getDisplayMetrics());      }    }    int sourceWidth=icon.getIntrinsicWidth();    int sourceHeight=icon.getIntrinsicHeight();    if (sourceWidth > 0 && sourceHeight > 0) {      final float ratio=(float)sourceWidth / sourceHeight;      if (sourceWidth > sourceHeight) {        height=(int)(width / ratio);      } else       if (sourceHeight > sourceWidth) {        width=(int)(height * ratio);      }    }    int textureWidth=sIconWidth;    int textureHeight=sIconHeight;    final Bitmap bitmap=Bitmap.createBitmap(textureWidth,textureHeight,Bitmap.Config.ARGB_8888);    final Canvas canvas=sCanvas;    canvas.setBitmap(bitmap);    final int left=(textureWidth - width) / 2;    final int top=(textureHeight - height) / 2;    @SuppressWarnings("all") final boolean debug=false;    if (debug) {      canvas.drawColor(sColors[sColorIndex]);      if (++sColorIndex >= sColors.length)       sColorIndex=0;      Paint debugPaint=new Paint();      debugPaint.setColor(0xffcccc00);      canvas.drawRect(left,top,left + width,top + height,debugPaint);    }    sOldBounds.set(icon.getBounds());    icon.setBounds(left,top,left + width,top + height);    icon.draw(canvas);    icon.setBounds(sOldBounds);    canvas.setBitmap(null);    return bitmap;  }}  }
class C{  public void measureLayout(int tag,int ancestorTag,Callback errorCallback,Callback successCallback){  try {    measureLayout(tag,ancestorTag,mMeasureBuffer);    float relativeX=PixelUtil.toDIPFromPixel(mMeasureBuffer[0]);    float relativeY=PixelUtil.toDIPFromPixel(mMeasureBuffer[1]);    float width=PixelUtil.toDIPFromPixel(mMeasureBuffer[2]);    float height=PixelUtil.toDIPFromPixel(mMeasureBuffer[3]);    successCallback.invoke(relativeX,relativeY,width,height);  } catch (  IllegalViewOperationException e) {    errorCallback.invoke(e.getMessage());  }}  }
class C{  public void remove(int lookupId){  ActiveInstances current, next;  do {    current=active.get();    next=current.remove(lookupId);  } while (!active.compareAndSet(current,next));}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  private static String createAverageList(int n,String currentPuzzle,String currentPuzzleSubtype,DatabaseHandler dbHandler){  int average;  ArrayList<Integer> aoList=dbHandler.getListOfTruncatedAverageOf(n,currentPuzzle,currentPuzzleSubtype,true);  average=aoList.get(n);  aoList.remove(n);  int best=Integer.MAX_VALUE;  for (  int time : aoList) {    if (time != -1 && time < best)     best=time;  }  if (best == Integer.MAX_VALUE)   best=-1;  int worst;  if (aoList.contains(-1))   worst=-1; else   worst=Collections.max(aoList);  Collections.reverse(aoList);  StringBuilder aoStringList=new StringBuilder(convertTimeToString(average) + " = ");  boolean markedMax=false;  boolean markedMin=false;  for (  int time : aoList) {    if (time == worst && !markedMax) {      aoStringList.append("(");      aoStringList.append(convertTimeToString(time));      aoStringList.append("), ");      markedMax=true;    } else     if (time == best && !markedMin) {      aoStringList.append("(");      aoStringList.append(convertTimeToString(time));      aoStringList.append("), ");      markedMin=true;    } else {      aoStringList.append(convertTimeToString(time));      aoStringList.append(", ");    }  }  return aoStringList.substring(0,aoStringList.length() - 2);}  }
class C{  public void testParamListLoading() throws Exception {  TungstenProperties props=new TungstenProperties();  props.load("key1= value1;key2 =4;key3= true",false);  Assert.assertEquals("key1 is set","value1",props.getString("key1"));  Assert.assertEquals("key2 is set",4,props.getLong("key2"));  Assert.assertEquals("key3 is set",true,props.getBoolean("key3"));  TungstenProperties props2=new TungstenProperties();  props2.load(props.toNameValuePairs(),true);  Assert.assertEquals("Emitted properties load to equivalent instance",props,props2);}  }
class C{  public CreateBookmarkResponse createCGBookmarks(FunctionalAPIImpl impl,Map<String,RPConsistencyGroup> rpCGMap,CreateBookmarkRequestParams request) throws RecoverPointException {  Set<ConsistencyGroupUID> uniqueCGUIDSet=new HashSet<ConsistencyGroupUID>();  List<ConsistencyGroupUID> uniqueCGUIDlist=new LinkedList<ConsistencyGroupUID>();  Set<RPConsistencyGroup> rpCGSet=new HashSet<RPConsistencyGroup>();  CreateBookmarkResponse response=new CreateBookmarkResponse();  for (  String volume : rpCGMap.keySet()) {    RPConsistencyGroup rpCG=rpCGMap.get(volume);    if (rpCG.getCGUID() != null) {      boolean foundCGUID=false;      ConsistencyGroupUID cguid=rpCG.getCGUID();      for (      ConsistencyGroupUID cguidunique : uniqueCGUIDSet) {        if (cguidunique.getId() == cguid.getId()) {          foundCGUID=true;          break;        }      }      if (!foundCGUID) {        logger.info("Adding CG: " + rpCG.getName() + " with ID "+ rpCG.getCGUID().getId()+ " to unique CGUID list");        uniqueCGUIDSet.add(cguid);        uniqueCGUIDlist.add(cguid);        rpCGSet.add(rpCG);      }    }  }  RecoverPointImageManagementUtils imageManager=new RecoverPointImageManagementUtils();  for (  ConsistencyGroupUID cgID : uniqueCGUIDlist) {    imageManager.waitForCGLinkState(impl,cgID,RecoverPointImageManagementUtils.getPipeActiveState(impl,cgID),PipeState.PAUSED);  }  try {    impl.createBookmark(uniqueCGUIDlist,request.getBookmark(),BookmarkConsolidationPolicy.NEVER_CONSOLIDATE,SnapshotConsistencyType.APPLICATION_CONSISTENT);    logger.info(String.format("Created RP Bookmark successfully: %s",request.getBookmark()));    response.setCgBookmarkMap(findRPBookmarks(impl,rpCGSet,request));    response.setReturnCode(RecoverPointReturnCode.SUCCESS);  } catch (  FunctionalAPIActionFailedException_Exception|FunctionalAPIInternalError_Exception e) {    throw RecoverPointException.exceptions.failedToCreateBookmarkOnRecoverPoint(e);  }  return response;}  }
class C{  private void unswap(IgniteCache<Integer,CacheValue> cache,int lowerBound,int upperBound) throws Exception {  resetCounters();  assertEquals(0,swapCnt.get());  assertEquals(0,unswapCnt.get());  for (int i=lowerBound; i < upperBound; i++) {    assert cache.localPeek(i,CachePeekMode.ONHEAP) == null;    cache.localPromote(Collections.singleton(i));    CacheValue val=cache.localPeek(i);    assertNotNull(val);    assertEquals(i,val.value());    assertEquals(i - lowerBound + 1,unswapCnt.get());  }  assertEquals(0,swapCnt.get());  assertEquals(unswapCnt.get(),upperBound - lowerBound);  checkEntries(cache,lowerBound,upperBound);  assertEquals(0,swapCnt.get());  assertEquals(unswapCnt.get(),upperBound - lowerBound);}  }
class C{  public StrBuilder ensureCapacity(final int capacity){  if (capacity > buffer.length) {    final char[] old=buffer;    buffer=new char[capacity * 2];    System.arraycopy(old,0,buffer,0,size);  }  return this;}  }
class C{  public void testBlockCommitOnUnsafeEvents() throws Exception {  LinkedList<ReplDBMSEvent> events=new LinkedList<ReplDBMSEvent>();  for (int seqno=0; seqno < 10; seqno++) {    ReplDBMSEvent event=helper.createEvent(seqno,"db01");    event.getDBMSEvent().setMetaDataOption(ReplOptionParams.UNSAFE_FOR_BLOCK_COMMIT,"");    events.add(event);  }  checkBlockCommitSemantics(events,BlockCommitPolicy.lax,true,null);  checkBlockCommitSemantics(events,BlockCommitPolicy.strict,false,null);}  }
class C{  public static boolean currentSpecHasProblems(){  Spec spec=Activator.getSpecManager().getSpecLoaded();  if (spec == null) {    return false;  }  return (TLAMarkerHelper.getProblemMarkers(spec.getProject(),null).length > 0);}  }
class C{  public District(String name,Set cities,Set villages){  this.name=name;  this.cities=cities;  this.villages=villages;}  }
class C{  private SelectPrinter(java.awt.Frame parent,boolean modal){  super(parent,modal);}  }
class C{  public boolean isLocked() throws IOException {  try (FileLock fl=fileToLock.tryLock()){    return fl != null;  } catch (  OverlappingFileLockException e) {    return true;  }}  }
class C{  public DBObject_Check_Table(DBConnection parent,String name,int sequence){  super(parent,name,sequence);}  }
class C{  private static void applyHeapScaling(){  double heapFactor=PlanSpecificConfig.heapFactor(plan.getValue());  int scaledHeap=(int)Math.ceil(baseHeapSize() * heapFactor);  System.out.printf("[Harness] heapFactor=%4.2f, baseHeap=%dK, initHeap=%dK%n",heapFactor,baseHeapSize() * BYTES_IN_PAGE / 1024,scaledHeap * BYTES_IN_PAGE / 1024);  initHeap.setPages(scaledHeap);  maxHeap.setPages(scaledHeap);}  }
class C{  public final boolean sendMessageAtFrontOfQueue(Message msg){  return mExec.sendMessageAtFrontOfQueue(msg);}  }
class C{  public int hashCode(){  return 0;}  }
class C{  public static char toChar(byte b0,byte b1){  return (char)((b0 << 8) | (b1 & 0xff));}  }
class C{  public DoubleByte(int msb,int lsb){  if (msb > 0xFF || lsb > 0xFF) {    throw new IllegalArgumentException("msb or lsb are out of range");  }  this.msb=msb;  this.lsb=lsb;}  }
class C{  private GridClientMessage assemble(GridNioSession ses,GridMemcachedMessage req) throws IOException, IgniteCheckedException {  byte[] extras=req.extras();  if (req.key() != null || req.value() != null) {    short keyFlags=0;    short valFlags=0;    if (req.hasFlags()) {      if (extras == null || extras.length < FLAGS_LENGTH)       throw new IOException("Failed to parse incoming packet (flags required for command) [ses=" + ses + ", opCode="+ Integer.toHexString(req.operationCode() & 0xFF)+ ']');      keyFlags=U.bytesToShort(extras,0);      valFlags=U.bytesToShort(extras,2);    }    if (req.key() != null) {      assert req.key() instanceof byte[];      byte[] rawKey=(byte[])req.key();      req.key(decodeObj(keyFlags,rawKey));    }    if (req.value() != null) {      assert req.value() instanceof byte[];      byte[] rawVal=(byte[])req.value();      req.value(decodeObj(valFlags,rawVal));    }  }  if (req.hasExpiration()) {    if (extras == null || extras.length < 8)     throw new IOException("Failed to parse incoming packet (expiration value required for command) [ses=" + ses + ", opCode="+ Integer.toHexString(req.operationCode() & 0xFF)+ ']');    req.expiration(U.bytesToInt(extras,4) & 0xFFFFFFFFL);  }  if (req.hasInitial()) {    if (extras == null || extras.length < 16)     throw new IOException("Failed to parse incoming packet (initial value required for command) [ses=" + ses + ", opCode="+ Integer.toHexString(req.operationCode() & 0xFF)+ ']');    req.initial(U.bytesToLong(extras,8));  }  if (req.hasDelta()) {    if (extras == null || extras.length < 8)     throw new IOException("Failed to parse incoming packet (delta value required for command) [ses=" + ses + ", opCode="+ Integer.toHexString(req.operationCode() & 0xFF)+ ']');    req.delta(U.bytesToLong(extras,0));  }  if (extras != null) {    int len=4;    if (req.hasExpiration())     len+=4;    if (req.hasDelta())     len+=8;    if (req.hasInitial())     len+=8;    if (extras.length - len > 0) {      byte[] cacheName=new byte[extras.length - len];      U.arrayCopy(extras,len,cacheName,0,extras.length - len);      req.cacheName(new String(cacheName,UTF_8));    }  }  return req;}  }
class C{  public void testGetters6(){  int spacingAdd=2;  LayoutBuilder b=builder().setText("This is a longer test").setIncludePad(true).setWidth(50).setSpacingAdd(spacingAdd);  FontMetricsInt fmi=b.paint.getFontMetricsInt();  Layout l=b.build();  assertVertMetrics(l,fmi.top - fmi.ascent,fmi.bottom - fmi.descent,fmi.top,fmi.descent + spacingAdd,fmi.ascent,fmi.descent + spacingAdd,fmi.ascent,fmi.bottom + spacingAdd);}  }
class C{  public void dec(){  dec(1);}  }
class C{  public void updateRow(final DetallePrevisionVO detallePrevision){  Map colsToUpdate=new HashMap();  colsToUpdate.put(UNIDADES_INSTALACION_FIELD,new Integer(detallePrevision.getNumUInstalacion()));  colsToUpdate.put(FECHA_INICIO_EXPEDIENTES_FIELD,detallePrevision.getAnoIniUdoc());  colsToUpdate.put(FECHA_FIN_EXPEDIENTES_FIELD,detallePrevision.getAnoFinUdoc());  colsToUpdate.put(FORMATO_FIELD,detallePrevision.getIdFormatoUI());  colsToUpdate.put(OBSERVACIONES_FIELD,detallePrevision.getObservaciones());  colsToUpdate.put(PROCEDIMIENTO_FIELD,detallePrevision.getIdProcedimiento());  colsToUpdate.put(ID_SERIEDORIGEN_FIELD,detallePrevision.getIdSerieOrigen());  colsToUpdate.put(ID_SERIEDESTINO_FIELD,detallePrevision.getIdSerieDestino());  colsToUpdate.put(NUM_ORDEN_FIELD,new Integer(detallePrevision.getNumeroOrden()));  StringBuffer qual=new StringBuffer("where ").append(DBUtils.generateEQTokenField(ID_FIELD,detallePrevision.getId()));  updateFields(qual.toString(),colsToUpdate,TABLE_NAME);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public boolean hasNext(){  return cursor > 0;}  }
class C{  public boolean isTranslationView(){  return m_translationViewLanguage != null;}  }
class C{  public SparseRank(final BitVector bitVector){  this(bitVector.length(),bitVector.count(),bitVector.asLongSet().iterator());}  }
class C{  public static Query newDistanceQuery(String field,double latitude,double longitude,double radiusMeters){  return new LatLonPointDistanceQuery(field,latitude,longitude,radiusMeters);}  }
class C{  @PostConstruct public void postConstruct() throws Exception {  if (log.isInfoEnabled()) {    log.info("|-Configuration Interface Service active...");  }}  }
class C{  public X509CertPathImpl(List certs) throws CertificateException {  super("X.509");  int size=certs.size();  certificates=new ArrayList(size);  for (int i=0; i < size; i++) {    Object cert=certs.get(i);    if (!(cert instanceof X509Certificate)) {      throw new CertificateException("One of the provided certificates is not an X509 certificate");    }    certificates.add(cert);  }}  }
class C{  public Object nextElement(){  return nextToken();}  }
class C{  public int readUnsignedShort() throws EOFException, FormatException {  return MoreMath.signedToInt(readShort());}  }
class C{  public boolean isDelegationTargetIsAbstract(){  return delegationTargetIsAbstract;}  }
class C{  protected PrintWriter lineFileOut(Document doc){  return lineFileOut;}  }
class C{  public String consumeAttributeKey(){  int start=pos;  while (!isEmpty() && (matchesWord() || matchesAny('-','_',':')))   pos++;  return queue.substring(start,pos);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case DomPackage.COMPOSITE__CONTENTS:    getContents().clear();  return;}super.eUnset(featureID);}  }
class C{  @Inline public void addEvent(EventType et,String sval1){  if (!enabled)   return;  addEventInternal(et,sval1);}  }
class C{  public void onAnimationStart(Animator animation){  if (mRule == Dependency.WITH) {    startIfReady(animation);  }}  }
class C{  protected void purge(Reference ref){  int hash=ref.hashCode();  int index=hashIndex(hash,data.length);  HashEntry<K,V> previous=null;  HashEntry<K,V> entry=data[index];  while (entry != null) {    if (((ReferenceEntry<K,V>)entry).purge(ref)) {      if (previous == null) {        data[index]=entry.next;      } else {        previous.next=entry.next;      }      this.size--;      return;    }    previous=entry;    entry=entry.next;  }}  }
class C{  private void createAmpResultStreamMethod(JavaClass jClass,Method method,int resultOffset){  String methodName=method.getName();  Class<?>[] parameterTypes=method.getParameterTypes();  Annotation[][] parameterAnns=method.getParameterAnnotations();  addMethod(method);  CodeWriterAttribute code=createMethodHeader(jClass,method);  code.setMaxLocals(1 + 2 * parameterTypes.length);  code.setMaxStack(10 + 2 * parameterTypes.length);  code.pushObjectVar(0);  code.getField(jClass.getThisClass(),"_messageFactory",MessageFactoryAmp.class);  int argLen=parameterTypes.length - 1;  code.pushObjectVar(getLength(parameterTypes,resultOffset) + 1);  long timeout=_defaultTimeout;  code.pushConstant(timeout);  code.pushObjectVar(0);  code.getField(jClass.getThisClass(),"_serviceRef",ServiceRefAmp.class);  code.pushObjectVar(0);  code.getField(jClass.getThisClass(),fieldName(method),MethodAmp.class);  partitionMethod(code,parameterTypes,parameterAnns);  pushParameters(code,parameterTypes,parameterAnns,1,0,argLen + 1,resultOffset);  code.invokeInterface(MessageFactoryAmp.class,"streamResult",void.class,ResultStream.class,long.class,ServiceRefAmp.class,MethodAmp.class,Object[].class);  code.addReturn();  code.close();}  }
class C{  public void loadLKPIndex(File path) throws IOException {  if (0 != this.depth) {    return;  }  InputStream in=new FileInputStream(path);  byte[] buf=new byte[128];  try {    while (true) {      int idlen=in.read();      if (-1 == idlen) {        break;      }      int len=in.read(buf,0,idlen);      if (idlen != len) {        break;      }      String key=new String(buf,0,len,Charsets.UTF_8);      int ncells=in.read();      if (-1 == ncells) {        break;      }      len=in.read(buf,0,ncells * 8);      if (ncells * 8 != len) {        break;      }      int offset=0;      long[] cells=new long[ncells];      for (int i=0; i < ncells; i++) {        offset=i * 8;        cells[i]=Longs.fromBytes(buf[offset],buf[offset + 1],buf[offset + 2],buf[offset + 3],buf[offset + 4],buf[offset + 5],buf[offset + 6],buf[offset + 7]);      }synchronized (this.lkpIndex) {        this.lkpIndex.put(key,cells);      }    }  }  finally {    in.close();  }}  }
class C{  public JSONArray add(double value){  values.add(JSON.value(value));  return this;}  }
class C{  @Override public CompilerPhase newExecution(IR ir){  return this;}  }
class C{  public ValidationResult(String s,String ss){  setResponseCode(HttpServletResponse.SC_OK);  setStatus(s);  setSubstatus(ss);}  }
class C{  public synchronized List<Relationship> orderedRelationships(Vertex relationshipType){  if (getRelationships().get(relationshipType) == null) {    return null;  }  List<Relationship> list=new ArrayList<Relationship>(getRelationships(relationshipType));  Collections.sort(list);  return list;}  }
class C{  private void updateReplicationMode(List<Volume> volumes,VirtualPool newVpool,String taskId) throws InternalException {  if (volumes == null || volumes.isEmpty()) {    throw APIException.badRequests.vpoolChangeNotAllowedInvalidVolumeList();  }  List<URI> volumeURIs=new ArrayList<URI>();  Volume firstVol=volumes.get(0);  URI cgURI=firstVol.getConsistencyGroup();  for (  Volume volume : volumes) {    volumeURIs.add(volume.getId());    if (NullColumnValueGetter.isNullURI(volume.getProtectionController()) || NullColumnValueGetter.isNullURI(volume.getConsistencyGroup())) {      throw APIException.badRequests.vpoolChangeInvalidProtectionSystemOrCg(volume.getId().toString());    }    if (!cgURI.equals(volume.getConsistencyGroup())) {      throw APIException.badRequests.vpoolChangeNotAllowedCGsMustBeTheSame();    }  }  RPController controller=getController(RPController.class,"rp");  controller.updateConsistencyGroupPolicy(firstVol.getProtectionController(),firstVol.getConsistencyGroup(),volumeURIs,newVpool.getId(),taskId);}  }
class C{  public static DateTimeZone parseTimeZone(String tz){  try {    Matcher m=TZ_PATTERN.matcher(tz);    if (m.matches()) {      int hourSign="-".equals(m.group(TZ_SIGN_GROUP)) ? -1 : 1;      int hour=Integer.parseInt(m.group(TZ_HOUR_GROUP));      int min=Integer.parseInt(m.group(TZ_MINUTE_GROUP));      return DateTimeZone.forOffsetHoursMinutes(hourSign * hour,min);    } else {      if (tz.indexOf('/') == -1) {        tz=tz.toUpperCase();      }      return DateTimeZone.forID(tz);    }  } catch (  IllegalArgumentException e) {    throw new InvalidDateFormatException("timezone",tz);  }}  }
class C{  public ServerLocationRequest(){}  }
class C{  public static Mat bytedecoMatToCVMat(org.bytedeco.javacpp.opencv_core.Mat input){  UByteIndexer idxer=input.createIndexer();  Mat out=new Mat(idxer.rows(),idxer.cols(),CvType.CV_8UC(idxer.channels()));  for (int row=0; row < idxer.rows(); row++) {    for (int col=0; col < idxer.cols(); col++) {      byte[] data=new byte[3];      for (int channel=0; channel < idxer.channels(); channel++) {        data[channel]=(byte)(idxer.get(row,col,channel) & 0xFF);      }      out.put(row,col,data);    }  }  return out;}  }
class C{  public <INTERFACE>void registerComponentToInterface(Class<? extends INTERFACE> component,Class<INTERFACE> nativeInterface){  novaComponentToNativeInterface.put(component,nativeInterface);}  }
class C{  final List internalSuperInterfaces(){  if (this.superInterfaceNames == null) {    supportedOnlyIn2();  }  return this.superInterfaceNames;}  }
class C{  private Map<String,List<ObjectNamespace>> discoverNamespaces(StorageSystem storageSystem) throws Exception {  URI storageSystemId=storageSystem.getId();  List<String> namespaceIdList=new ArrayList<String>();  Map<String,List<ObjectNamespace>> bothNamespaces=new HashMap<String,List<ObjectNamespace>>();  List<ObjectNamespace> newNamespaces=new ArrayList<ObjectNamespace>();  List<ObjectNamespace> existingNamespaces=new ArrayList<ObjectNamespace>();  try {    _logger.info("discover namespace information for storage system {} - start",storageSystemId);    ECSApi ecsApi=getECSDevice(storageSystem);    ObjectNamespace ecsNamespace=null;    namespaceIdList=ecsApi.getNamespaces();    for (    String nsId : namespaceIdList) {      ecsNamespace=null;      String nsNativeGuid=NativeGUIDGenerator.generateNativeGuidForNamespace(storageSystem,nsId,NativeGUIDGenerator.NAMESPACE);      URIQueryResultList uriQueryList=new URIQueryResultList();      _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getObjectNamespaceByNativeGuidConstraint(nsNativeGuid),uriQueryList);      Iterator<ObjectNamespace> nsItr=_dbClient.queryIterativeObjects(ObjectNamespace.class,uriQueryList);      while (nsItr.hasNext()) {        ObjectNamespace ns=nsItr.next();        if (ns.getStorageDevice().equals(storageSystemId)) {          ecsNamespace=ns;          break;        }      }      if (ecsNamespace == null) {        ecsNamespace=new ObjectNamespace();        ecsNamespace.setId(URIUtil.createId(ObjectNamespace.class));        ecsNamespace.setNativeId(nsId);        ecsNamespace.setNativeGuid(nsNativeGuid);        ecsNamespace.setLabel(nsNativeGuid);        ecsNamespace.setStorageDevice(storageSystemId);        ECSNamespaceRepGroup nsGroup=ecsApi.getNamespaceDetails(nsId);        ecsNamespace.setPoolType(nsGroup.getRgType());        StringSet repGroups=new StringSet();        for (        String rg : nsGroup.getReplicationGroups()) {          repGroups.add(rg);        }        ecsNamespace.setStoragePools(repGroups);        ecsNamespace.setNsName(nsGroup.getNamespaceName());        ecsNamespace.setDiscoveryStatus(DiscoveryStatus.VISIBLE.name());        ecsNamespace.setMapped(false);        List<URI> allTenantURI=_dbClient.queryByType(TenantOrg.class,true);        Iterator<TenantOrg> tnItr=_dbClient.queryIterativeObjects(TenantOrg.class,allTenantURI);        while (tnItr.hasNext()) {          TenantOrg ten=tnItr.next();          if (ten.getNamespace() != null && !ten.getNamespace().isEmpty() && ten.getNamespace().equalsIgnoreCase(nsId)) {            ecsNamespace.setTenant(ten.getId());            ecsNamespace.setMapped(true);            break;          }        }        _logger.info("Creating new namespace with NativeGuid : {}",nsNativeGuid);        newNamespaces.add(ecsNamespace);      } else {        existingNamespaces.add(ecsNamespace);      }    }    bothNamespaces.put(NEW,newNamespaces);    bothNamespaces.put(EXISTING,existingNamespaces);    _logger.info("discoverNamespaces for storage system {} - complete",storageSystemId);    return bothNamespaces;  } catch (  Exception e) {    _logger.error("discoverNamespaces failed. Storage system: {}",storageSystemId,e);    throw e;  }}  }
class C{  public static void printMyLog(Object object){  if (Log.DEBUG > DEBUG_LEVEL) {    String tag="MYLOG";    String method=callMethodAndLine();    String content="";    if (object != null) {      content=object.toString() + "                    ----    " + method;    } else {      content=" ## " + "                ----    " + method;    }    Log.d(tag,content);    if (DEBUG_SYSOUT) {      System.out.println(tag + "  " + content+ "  "+ method);    }  }}  }
class C{  @Override public void onPause(){  if (mAdView != null) {    mAdView.pause();  }  super.onPause();}  }
class C{  public void registerSensor(Sensor s,int i){  if ((i < 0) || (i > ((numInputCards() * bitsPerCard) - 1)) || (i > MAXSENSORS)) {    log.error("Unexpected sensor ordinal in registerSensor: " + Integer.toString(i + 1));    return;  }  hasActiveSensors=true;  if (sensorArray[i] == null) {    sensorArray[i]=s;    if (lastUsedSensor < i) {      lastUsedSensor=i;    }  } else {    log.warn("multiple registration of same sensor: CS" + Integer.toString((getNodeAddress() * SerialSensorManager.SENSORSPERUA) + i + 1));  }}  }
class C{  public void removePropertyChangeListener(PropertyChangeListener listener){  if (propertyChangeSupport != null) {    propertyChangeSupport.removePropertyChangeListener(listener);  }}  }
class C{  public void writeShortInt(int x){  byte[] buff=data;  buff[pos++]=(byte)(x >> 8);  buff[pos++]=(byte)x;}  }
class C{  public static boolean update(Context c){  if (isLatestVersion(c))   return true;  String envDir=PrefStore.getEnvDir(c);  File fEnvDir=new File(envDir);  fEnvDir.mkdirs();  if (!fEnvDir.exists()) {    return false;  }  cleanDirectory(fEnvDir);  if (!extractDir(c,"all","")) {    return false;  }  String mArch=PrefStore.getArch();  if (PrefStore.STATIC_VERSION) {    if (!extractDir(c,mArch + "/static","")) {      return false;    }  } else {    if (android.os.Build.VERSION.SDK_INT >= 21) {      if (!extractDir(c,mArch + "/pie","")) {        return false;      }    } else {      if (!extractDir(c,mArch + "/nopie","")) {        return false;      }    }  }  setPermissions(fEnvDir);  List<String> params=new ArrayList<>();  params.add("busybox --install -s " + envDir + "/bin");  exec(c,"sh",params);  return setVersion(c);}  }
class C{  public void status(int major_version,int minor_version,int code,String reason_phrase){  if (false) {    Log.v(LOGTAG,"TestEventHandler:status() major: " + major_version + " minor: "+ minor_version+ " code: "+ code+ " reason: "+ reason_phrase);  }  eventsReceived[TEST_STATUS]=true;  if (notExpecting[TEST_STATUS]) {    expectDetails.append("Status event received but not expected");    expectDetails.append("\r\n");  }  majorVersion=major_version;  minorVersion=minor_version;  responseCode=code;  reasonPhrase=reason_phrase;  if (expectMajor != -1) {    if (expectMajor == major_version) {      expectMajor=-1;    } else {      expectDetails.append("Major version expected:" + expectMajor + " got:"+ major_version);      expectDetails.append("\r\n");    }  }  if (expectMinor != -1) {    if (expectMinor == minor_version) {      expectMinor=-1;    } else {      expectDetails.append("Minor version expected:" + expectMinor + " got:"+ minor_version);      expectDetails.append("\r\n");    }  }  if (expectCode != -1) {    if (expectCode == code) {      expectCode=-1;    } else {      expectDetails.append("Status code expected:" + expectCode + " got:"+ code);      expectDetails.append("\r\n");    }  }  if ((expectMajor == -1) && (expectMinor == -1) && (expectCode == -1)) {    expects[TEST_STATUS]=false;  } else {    System.out.println("MAJOR = " + expectMajor + " MINOR = "+ expectMinor+ " CODE = "+ expectCode);  }}  }
class C{  private void initCrawler(String indexFile,String linkFile,String semFile,String propFile,String logFile) throws IOException {  InputStream in=new FileInputStream(propFile);  try {    configProp.load(in);    System.out.println("Properties loaded.");  } catch (  IOException e) {    System.out.println("Could not load properties.");    e.printStackTrace();    System.exit(0);  }  this.logFileName=logFile;  System.out.println("Loading id - URL map.");  BufferedReader br=InputUtil.getBufferedReader(new File(indexFile));  int cnt=0;  while (br.ready()) {    String line=br.readLine();    String tok[]=line.split("\t");    Long id=Long.parseLong(tok[0]);    cnt++;    mapper.put(id,cnt);    urlArray[cnt]=tok[1];  }  br.close();  System.out.println("Read " + mapper.size() + " indexes.");  System.out.println("Reading id - id link map.");  br=InputUtil.getBufferedReader(new File(linkFile));  int lCnt=0;  while (br.ready()) {    if (++lCnt % 100000 == 0) {    }    String line=br.readLine();    String tok[]=line.split("\t");    List<Integer> ids=new ArrayList<Integer>();    for (int i=1; i < tok.length; i++) {      ids.add(mapper.get(Long.parseLong(tok[i])));    }    linkArrayList[mapper.get(Long.parseLong(tok[0]))]=ids;  }  br.close();  System.out.println("Read " + lCnt + " urls with outgoing links.");  System.out.println("Reading sem id set.");  br=InputUtil.getBufferedReader(new File(semFile));  while (br.ready()) {    String line=br.readLine();    String tok[]=line.split("\t");    Integer id=mapper.get(Long.parseLong(tok[0]));    if (id != null) {      semIds.add(id);    }  }  br.close();  System.out.println("Read " + semIds.size() + " semantic ids.");  System.out.println("Initializing processor");  processor=new AnthProcessor(newUrls,readyUrls,configProp,logFile);  System.out.println("Initializing crawler");  crawler=new Thread(new CrawlerThread(),"CCFakeCrawler crawler");}  }
class C{  public static Array toArray(Object o,Array defaultValue){  if (o instanceof Array)   return (Array)o; else   if (o instanceof Object[]) {    return new ArrayImpl((Object[])o);  } else   if (o instanceof List) {    return new ArrayImpl(((List)o).toArray());  } else   if (o instanceof Set) {    return new ArrayImpl(((Set)o).toArray());  } else   if (o instanceof XMLStruct) {    Array arr=new ArrayImpl();    arr.appendEL(o);    return arr;  } else   if (o instanceof ObjectWrap) {    return toArray(((ObjectWrap)o).getEmbededObject(defaultValue),defaultValue);  } else   if (o instanceof Struct) {    Struct sct=(Struct)o;    Array arr=new ArrayImpl();    Iterator<Entry<Key,Object>> it=sct.entryIterator();    Entry<Key,Object> e=null;    try {      while (it.hasNext()) {        e=it.next();        arr.setEL(toIntValue(e.getKey().getString()),e.getValue());      }    } catch (    ExpressionException ee) {      return defaultValue;    }    return arr;  } else   if (o instanceof boolean[])   return new ArrayImpl(ArrayUtil.toReferenceType((boolean[])o)); else   if (o instanceof byte[])   return new ArrayImpl(ArrayUtil.toReferenceType((byte[])o)); else   if (o instanceof char[])   return new ArrayImpl(ArrayUtil.toReferenceType((char[])o)); else   if (o instanceof short[])   return new ArrayImpl(ArrayUtil.toReferenceType((short[])o)); else   if (o instanceof int[])   return new ArrayImpl(ArrayUtil.toReferenceType((int[])o)); else   if (o instanceof long[])   return new ArrayImpl(ArrayUtil.toReferenceType((long[])o)); else   if (o instanceof float[])   return new ArrayImpl(ArrayUtil.toReferenceType((float[])o)); else   if (o instanceof double[])   return new ArrayImpl(ArrayUtil.toReferenceType((double[])o));  return defaultValue;}  }
class C{  public Decoder initialize(String configFile){  try {    long pre_load_time=System.currentTimeMillis();    this.readWeights(joshuaConfiguration.weights_file);    if (!Strings.isNullOrEmpty(joshuaConfiguration.weight_overwrite)) {      String[] tokens=joshuaConfiguration.weight_overwrite.split("\\s+");      for (int i=0; i < tokens.length; i+=2) {        String feature=tokens[i];        float value=Float.parseFloat(tokens[i + 1]);        if (joshuaConfiguration.moses)         feature=demoses(feature);        joshuaConfiguration.weights.add(String.format("%s %s",feature,tokens[i + 1]));        LOG.info("COMMAND LINE WEIGHT: {} -> {}",feature,value);      }    }    for (    String pairStr : joshuaConfiguration.weights) {      String pair[]=pairStr.split("\\s+");      if (pair.length != 2) {        String errMsg="FATAL: Invalid feature weight line found in config file.\n" + String.format("The line was '%s'\n",pairStr) + "You might be using an old version of the config file that is no longer supported\n"+ "Check joshua.apache.org or email dev@joshua.apache.org for help\n"+ "Code = "+ 17;        throw new RuntimeException(errMsg);      }      weights.set(pair[0],Float.parseFloat(pair[1]));    }    LOG.info("Read {} weights ({} of them dense)",weights.size(),DENSE_FEATURE_NAMES.size());    this.featureFunctions=new ArrayList<>();    this.initializeTranslationGrammars();    LOG.info("Grammar loading took: {} seconds.",(System.currentTimeMillis() - pre_load_time) / 1000);    this.initializeFeatureFunctions();    if (joshuaConfiguration.show_weights_and_quit) {      for (int i=0; i < DENSE_FEATURE_NAMES.size(); i++) {        String name=DENSE_FEATURE_NAMES.get(i);        if (joshuaConfiguration.moses)         System.out.println(String.format("%s= %.5f",mosesize(name),weights.getDense(i))); else         System.out.println(String.format("%s %.5f",name,weights.getDense(i)));      }      System.exit(0);    }    if (joshuaConfiguration.amortized_sorting) {      LOG.info("Grammar sorting happening lazily on-demand.");    } else {      long pre_sort_time=System.currentTimeMillis();      for (      Grammar grammar : this.grammars) {        grammar.sortGrammar(this.featureFunctions);      }      LOG.info("Grammar sorting took {} seconds.",(System.currentTimeMillis() - pre_sort_time) / 1000);    }  } catch (  IOException e) {    LOG.warn(e.getMessage(),e);  }  return this;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void load(String configFileName) throws ConfigurationException {  props=getConfiguration(configFileName);  if (props != null) {    props.applyProperties(this,true);  }}  }
class C{  public BasicRegisterMapper(int countOldRegisters){  oldToNew=new IntList(countOldRegisters);}  }
class C{  public static void update(final IDocumentationHolder documentation,final String newDocumentation){synchronized (documentation) {    if (newDocumentation == null || newDocumentation.isEmpty()) {      documentation.clearDocumentation();      return;    }    if (!toEditConsolidated(documentation).equals(newDocumentation)) {      documentation.clearDocumentation();      final List<String> lines=splitToLines(newDocumentation);      final int numberOfLines=lines.size();      if (numberOfLines > 0) {        RobotToken tok=new RobotToken();        tok.setText(smartTrimmedRight(lines.get(0)));        documentation.addDocumentationText(tok);        for (int lineNr=1; lineNr < numberOfLines; lineNr++) {          RobotToken newLine=new RobotToken();          newLine.setText("\n...");          documentation.addDocumentationText(newLine);          final String lineText=lines.get(lineNr);          if (!lineText.isEmpty()) {            RobotToken docPart=new RobotToken();            docPart.setText(smartTrimmedRight(lineText));            documentation.addDocumentationText(docPart);          }        }      }    }  }}  }
class C{  protected XMLException createXMLException(String message){  String m;  try {    m=formatMessage(message,new Object[]{new Integer(reader.getLine()),new Integer(reader.getColumn())});  } catch (  MissingResourceException e) {    m=message;  }  return new XMLException(m);}  }
class C{  public T isAutoComplete(){  return attr(Attr.AUTOCOMPLETE,null);}  }
class C{  public RemExpr newRemExpr(Value op1,Value op2){  return new JRemExpr(op1,op2);}  }
class C{  public boolean contains(Register item){  if (DEBUG) {    System.out.println("looking for " + item + " in "+ this);  }  LiveSetEnumerator lsEnum=enumerator();  while (lsEnum.hasMoreElements()) {    Register elem=lsEnum.nextElement().getRegister();    if (item == elem) {      if (DEBUG) {        System.out.println("found it, returning true");      }      return true;    }  }  if (DEBUG) {    System.out.println("didn't find it, returning false");  }  return false;}  }
class C{  @Override public void remove(){  throw new UnsupportedOperationException("The remove  operation is not supported by this Iterator.");}  }
class C{  public java_cup.runtime.Symbol do_action(int act_num,java_cup.runtime.lr_parser parser,java.util.Stack stack,int top) throws java.lang.Exception {  return action_obj.CUP$Parser$do_action(act_num,parser,stack,top);}  }
class C{  public TextEditBasedChangeGroup(TextEditBasedChange change,TextEditGroup group){  Assert.isNotNull(change);  Assert.isNotNull(group);  fChange=change;  fIsEnabled=true;  fTextEditGroup=group;}  }
class C{  private CacheEntry cacheLocked(ComponentName componentName,LauncherActivityInfoCompat info,UserHandleCompat user,boolean usePackageIcon,boolean useLowResIcon){  ComponentKey cacheKey=new ComponentKey(componentName,user);  CacheEntry entry=mCache.get(cacheKey);  if (entry == null || (entry.isLowResIcon && !useLowResIcon)) {    entry=new CacheEntry();    mCache.put(cacheKey,entry);    if (!getEntryFromDB(cacheKey,entry,useLowResIcon)) {      if (info != null) {        entry.icon=Utilities.createBadgedIconBitmap(info.getIcon(mIconDpi),info.getUser(),mContext);      } else {        if (usePackageIcon) {          CacheEntry packageEntry=getEntryForPackageLocked(componentName.getPackageName(),user,false);          if (packageEntry != null) {            if (DEBUG)             Log.d(TAG,"using package default icon for " + componentName.toShortString());            entry.icon=packageEntry.icon;            entry.title=packageEntry.title;            entry.contentDescription=packageEntry.contentDescription;          }        }        if (entry.icon == null) {          if (DEBUG)           Log.d(TAG,"using default icon for " + componentName.toShortString());          entry.icon=getDefaultIcon(user);        }      }    }    if (TextUtils.isEmpty(entry.title) && info != null) {      entry.title=info.getLabel();      entry.contentDescription=mUserManager.getBadgedLabelForUser(entry.title,user);    }  }  return entry;}  }
class C{  protected void init(DerValue encoding,int req_type) throws Asn1Exception, IOException, KrbException {  DerValue der, subDer;  BigInteger bint;  if ((encoding.getTag() & 0x1F) != req_type) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  der=encoding.getData().getDerValue();  if (der.getTag() != DerValue.tag_Sequence) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  subDer=der.getData().getDerValue();  if ((subDer.getTag() & 0x01F) == 0x01) {    bint=subDer.getData().getBigInteger();    this.pvno=bint.intValue();    if (this.pvno != Krb5.PVNO) {      throw new KrbApErrException(Krb5.KRB_AP_ERR_BADVERSION);    }  } else {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  subDer=der.getData().getDerValue();  if ((subDer.getTag() & 0x01F) == 0x02) {    bint=subDer.getData().getBigInteger();    this.msgType=bint.intValue();    if (this.msgType != req_type) {      throw new KrbApErrException(Krb5.KRB_AP_ERR_MSG_TYPE);    }  } else {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  if ((der.getData().peekByte() & 0x1F) == 0x03) {    subDer=der.getData().getDerValue();    DerValue subsubDer=subDer.getData().getDerValue();    if (subsubDer.getTag() != DerValue.tag_SequenceOf) {      throw new Asn1Exception(Krb5.ASN1_BAD_ID);    }    Vector<PAData> v=new Vector<>();    while (subsubDer.getData().available() > 0) {      v.addElement(new PAData(subsubDer.getData().getDerValue()));    }    if (v.size() > 0) {      pAData=new PAData[v.size()];      v.copyInto(pAData);    }  } else {    pAData=null;  }  subDer=der.getData().getDerValue();  if ((subDer.getTag() & 0x01F) == 0x04) {    DerValue subsubDer=subDer.getData().getDerValue();    reqBody=new KDCReqBody(subsubDer,msgType);  } else {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }}  }
class C{  public int sizeInBytes(){  return this.attributeBytes;}  }
class C{  public void discover(String targetId) throws Exception {  InterProcessLock lock=coordinatorClient.getLock(targetId);  if (LOG.isDebugEnabled()) {    LOG.debug("Acquiring lock: " + targetId);  }  lock.acquire();  try {    if (LOG.isDebugEnabled()) {      LOG.debug("Acquired lock: " + targetId);    }    discoverInLock(targetId);  }  finally {    lock.release();    if (LOG.isDebugEnabled()) {      LOG.debug("Lock Released: " + targetId);    }  }}  }
class C{  public XYPlot findSubplot(PlotRenderingInfo info,Point2D source){  ParamChecks.nullNotPermitted(info,"info");  ParamChecks.nullNotPermitted(source,"source");  XYPlot result=null;  int subplotIndex=info.getSubplotIndex(source);  if (subplotIndex >= 0) {    result=(XYPlot)this.subplots.get(subplotIndex);  }  return result;}  }
class C{  public String classifierTipText(){  return "The classifier upon which to base the misclassifications.";}  }
class C{  public static String escape(String string){  char c;  String s=string.trim();  StringBuffer sb=new StringBuffer();  int length=s.length();  for (int i=0; i < length; i+=1) {    c=s.charAt(i);    if (c < ' ' || c == '+' || c == '%' || c == '=' || c == ';') {      sb.append('%');      sb.append(Character.forDigit((char)((c >>> 4) & 0x0f),16));      sb.append(Character.forDigit((char)(c & 0x0f),16));    } else {      sb.append(c);    }  }  return sb.toString();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:40.161 -0500",hash_original_method="3DD87F91095A169C1E58894EFACAD9BC",hash_generated_method="30733AE96453ACC928BA06D939F82551") public static void sort(short[] array,int start,int end){  DualPivotQuicksort.sort(array,start,end);}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return true;}  }
class C{  public static void print(String[] inputs){}  }
class C{  private void showChanges(final OfflineChange[] typedChanges,final OfflineChangeType type){  if (typedChanges.length == 0) {    return;  }  final String typeString=type.toString().toLowerCase();  getDisplay().printLine(type.toString() + "s:");  for (int i=0; i < typedChanges.length; i++) {    getDisplay().printLine(" " + typeString + ": "+ typedChanges[i].getLocalPath());  }}  }
class C{  private int bradsToDegree(byte brad){  return brad * 180 / 128;}  }
class C{  private String lookup(String AD_Language,String text){  if (text == null)   return null;  if (AD_Language == null || AD_Language.length() == 0)   return text;  if (text.equals("/") || text.equals("\\"))   return File.separator;  if (text.equals(";") || text.equals(":"))   return File.pathSeparator;  if (text.equals("ADEMPIERE_HOME"))   return Adempiere.getAdempiereHome();  if (text.equals("bat") || text.equals("sh")) {    if (System.getProperty("os.name").startsWith("Win"))     return "bat";    return "sh";  }  if (text.equals("CopyRight"))   return Adempiere.COPYRIGHT;  CCache<String,String> langMap=getMsgMap(AD_Language);  if (langMap == null)   return null;  return (String)langMap.get(text);}  }
class C{  @Override protected int handleNext(){  CharacterIterator text=getText();  if (cachedBreakPositions == null || positionInCache == cachedBreakPositions.length - 1) {    int startPos=text.getIndex();    dictionaryCharCount=0;    int result=super.handleNext();    if (dictionaryCharCount > 1 && result - startPos > 1) {      divideUpDictionaryRange(startPos,result);    } else {      cachedBreakPositions=null;      return result;    }  }  if (cachedBreakPositions != null) {    ++positionInCache;    text.setIndex(cachedBreakPositions[positionInCache]);    return cachedBreakPositions[positionInCache];  }  return -9999;}  }
class C{  public void reset(){  m_count=0;  m_totalCount=0;  m_sum=Env.ZERO;  m_sumSquare=Env.ZERO;  m_min=null;  m_max=null;}  }
class C{  @Override public boolean eventGeneratable(String eventName){  if (m_listenee == null) {    return false;  }  if (m_listenee instanceof EventConstraints) {    if (!((EventConstraints)m_listenee).eventGeneratable("batchClusterer")) {      return false;    }  }  return true;}  }
class C{  @RequestMapping(value="/tagTypes",method=RequestMethod.POST,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_TAG_TYPES_POST) public TagType createTagType(@RequestBody TagTypeCreateRequest request){  return tagTypeService.createTagType(request);}  }
class C{  protected void removeInfo(JavaElement element){switch (element.getElementType()) {case IJavaElement.JAVA_MODEL:    this.modelInfo=null;  break;case IJavaElement.JAVA_PROJECT:this.projectCache.remove(element);this.rootCache.resetSpaceLimit((int)(DEFAULT_ROOT_SIZE * getMemoryRatio()),element);break;case IJavaElement.PACKAGE_FRAGMENT_ROOT:this.rootCache.remove(element);this.pkgCache.resetSpaceLimit((int)(DEFAULT_PKG_SIZE * getMemoryRatio()),element);break;case IJavaElement.PACKAGE_FRAGMENT:this.pkgCache.remove(element);this.openableCache.resetSpaceLimit((int)(DEFAULT_OPENABLE_SIZE * getMemoryRatio() * getOpenableRatio()),element);break;case IJavaElement.COMPILATION_UNIT:case IJavaElement.CLASS_FILE:this.openableCache.remove(element);break;default :this.childrenCache.remove(element);}}  }
class C{  public synchronized Class loadClass(String className,boolean resolveIt) throws ClassNotFoundException {  Class result=findLoadedClass(className);  if (result != null) {    printInfo("        ***Returning cached class: " + className,result);    return result;  }  byte[] classData=getClassData(className);  if (classData == null) {    return loadFromSystem(className);  }  result=defineClass(classData,0,classData.length);  if (result == null) {    return loadFromSystem(className);  }  if (resolveIt) {    resolveClass(result);  }  printInfo("        ***Loaded local class: " + className,result);  return result;}  }
class C{  public boolean addPermission(Permission permission){  if (permissionSet.contains(permission))   return false;  permissionSet.addElement(permission);  return true;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private int doesFileExist(String path){  try {    DropboxAPI.Entry metadata=getFileInfo(path);    return 1;  } catch (  DropboxException e) {    e.printStackTrace();    if (e.toString().contains("404"))     return 0; else     return -1;  }}  }
class C{  public static boolean sameInstance(final Object first,final Object second){  return first == second;}  }
class C{  public boolean validate(){  if (validators == null || validators.size() == 0) {    return true;  }  CharSequence text=getText();  boolean isEmpty=text.length() == 0;  boolean isValid=true;  for (  METValidator validator : validators) {    isValid=isValid && validator.isValid(text,isEmpty);    if (!isValid) {      setError(validator.getErrorMessage());      break;    }  }  postInvalidate();  return isValid;}  }
class C{  public void readRow(final DataInputStream in,final double[] data,final ColumnType[] columnTypes,final boolean sparse,final double[] sparseDefaults) throws IOException {  if (sparse) {    System.arraycopy(sparseDefaults,0,data,0,sparseDefaults.length);    while (true) {      int index=in.readInt();      if (index == -1) {        break;      } else {        data[index]=readDatum(in,columnTypes[index]);      }    }  } else {    for (int attIndex=0; attIndex < columnTypes.length; attIndex++) {      data[attIndex]=readDatum(in,columnTypes[attIndex]);    }  }}  }
class C{  public ExportKeyPairPublicKeyAction(KseFrame kseFrame){  super(kseFrame);  putValue(LONG_DESCRIPTION,res.getString("ExportKeyPairPublicKeyAction.statusbar"));  putValue(NAME,res.getString("ExportKeyPairPublicKeyAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("ExportKeyPairPublicKeyAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("ExportKeyPairPublicKeyAction.image")))));}  }
class C{  public static PatternNotExpr notFilter(Filter filter){  return new PatternNotExpr(new PatternFilterExpr(filter));}  }
class C{  public boolean isDataAvailable(){  return data != null || getFileController().isDataAvailable(state);}  }
class C{  public boolean requestNetworkTransitionWakelock(String forWhom){  try {    mService.requestNetworkTransitionWakelock(forWhom);    return true;  } catch (  RemoteException e) {    return false;  }}  }
class C{  private DocumentDbUtil(){  throw new UnsupportedOperationException();}  }
class C{  public KNNDistanceOrderResult(double[] knnDistances,int k){  super("Objects",k + "-NN-distance",knnDistances.length + 1);  this.k=k;  Arrays.sort(knnDistances);  for (int j=0; j < knnDistances.length; j++) {    this.addAndSimplify(knnDistances.length - j,knnDistances[j]);  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (forIn: ");  result.append(forIn);  result.append(", forOf: ");  result.append(forOf);  result.append(')');  return result.toString();}  }
class C{  public CoderMalfunctionError(Exception cause){  super(cause);}  }
class C{  private long loadLargestMessageId(){  ReleaseMessage releaseMessage=releaseMessageRepository.findTopByOrderByIdDesc();  return releaseMessage == null ? 0 : releaseMessage.getId();}  }
class C{  public void addMenuDragMouseListener(MenuDragMouseListener l){  listenerList.add(MenuDragMouseListener.class,l);}  }
class C{  public CsvReader createCsvReader(BufferedReader reader){  CsvReader csvReader=new CsvReader(reader);  csvReader.setFieldSeparator(fieldSeparator);  csvReader.setRecordSeparator(recordSeparator);  csvReader.setUseHeaders(useHeaders);  return csvReader;}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) static final int cpr(Comparator c,Object x,Object y){  return (c != null) ? c.compare(x,y) : ((Comparable)x).compareTo(y);}  }
class C{  public static BigqueryJobFailureException create(JobStatus jobStatus){  checkArgument(jobStatus.getErrorResult() != null,"this job didn't fail!");  return new BigqueryJobFailureException(describeError(jobStatus.getErrorResult()),null,jobStatus,null);}  }
class C{  public final CC split(){  setSplit(LayoutUtil.INF);  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:58.924 -0500",hash_original_method="82C17943BE49A882CA4049864C9D79C5",hash_generated_method="1CADE1F32E0D1257A23A04EC925B3F76") public final Collection<? extends CRL> generateCRLs(InputStream inStream) throws CRLException {  return spiImpl.engineGenerateCRLs(inStream);}  }
class C{  @CanIgnoreReturnValue public Stopwatch start(){  checkState(!isRunning,"This stopwatch is already running.");  isRunning=true;  startTick=ticker.read();  return this;}  }
class C{  @CloudUnitSecurable @RequestMapping(value="/content/container/{containerId}/application/{applicationName}",method=RequestMethod.PUT) public void saveContentFileIntoContainer(@PathVariable final String applicationName,@PathVariable final String containerId,@RequestBody FileRequestBody fileRequestBody,HttpServletRequest request,HttpServletResponse response) throws ServiceException, CheckException, IOException {  if (logger.isDebugEnabled()) {    logger.debug("containerId:" + containerId);    logger.debug("applicationName:" + applicationName);    logger.debug("fileName:" + fileRequestBody.getFileName());    logger.debug("fileRequestBody: " + fileRequestBody);  }  User user=authentificationUtils.getAuthentificatedUser();  Application application=applicationService.findByNameAndUser(user,applicationName);  this.authentificationUtils.canStartNewAction(user,application,locale);  applicationService.setStatus(application,Status.PENDING);  if (application != null) {    try {      String path=fileRequestBody.getFilePath();      fileService.sendFileToContainer(containerId,path,null,fileRequestBody.getFileName(),fileRequestBody.getFileContent());    } catch (    ServiceException e) {      StringBuilder msgError=new StringBuilder();      msgError.append("containerId : " + containerId);      msgError.append("applicationName : " + applicationName);      msgError.append(e.getMessage());    } finally {      applicationService.setStatus(application,Status.START);    }  }}  }
class C{  protected void unprune(){  if (m_sons != null) {    m_isLeaf=false;    for (    LMTNode m_son : m_sons) {      m_son.unprune();    }  }}  }
class C{  public QueueBuilder<T> withPageSize(int pageSize){  if (memoryManager != null) {    throw new IllegalStateException("Can not change pageSize after the memory manager initalized");  }  this.pageSize=pageSize;  return this;}  }
class C{  public void testBug2852() throws Exception {  try {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug2852");    this.stmt.executeUpdate("CREATE TABLE testBug2852 (field1 TINYINT, field2 SMALLINT)");    this.stmt.executeUpdate("INSERT INTO testBug2852 VALUES (1,1)");    this.rs=this.stmt.executeQuery("SELECT * from testBug2852");    assertTrue(this.rs.next());    ResultSetMetaData rsmd=this.rs.getMetaData();    assertTrue(rsmd.getColumnClassName(1).equals(this.rs.getObject(1).getClass().getName()));    assertTrue("java.lang.Integer".equals(rsmd.getColumnClassName(1)));    assertTrue(rsmd.getColumnClassName(2).equals(this.rs.getObject(2).getClass().getName()));    assertTrue("java.lang.Integer".equals(rsmd.getColumnClassName(2)));  }  finally {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug2852");  }}  }
class C{  public PcdRunner(DataWrapper dataWrapper,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(dataWrapper,params,knowledgeBoxModel);}  }
class C{  public synchronized void removeSocket(Socket socket){  sockets.remove(socket);}  }
class C{  protected boolean isAnyTestComponentInTargetInterior(Geometry testGeom){  List coords=ComponentCoordinateExtracter.getCoordinates(testGeom);  for (Iterator i=coords.iterator(); i.hasNext(); ) {    Coordinate p=(Coordinate)i.next();    int loc=targetPointLocator.locate(p);    if (loc == Location.INTERIOR)     return true;  }  return false;}  }
class C{  public void testDoConfigureSetsDefaultConfigurationVersion() throws Exception {  configuration.doConfigure(container);  String config=configuration.getFileHandler().readTextFile(DOMAIN_HOME + "/config/config.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo(configuration.getPropertyValue(WebLogicPropertySet.CONFIGURATION_VERSION),"//weblogic:configuration-version",config);}  }
class C{  public static long parseDateAsEpoch(String dateStr){  try {    return DateUtils.parseDate(dateStr).getTime();  } catch (  DateParseException e) {    return 0;  }}  }
class C{  public static File applyCwd(File cwd,File file){  if (cwd != null && !cwd.getPath().equals(".") && file != null && !file.isAbsolute()) {    File absCwd=absoluteFile(cwd);    file=new File(absCwd,file.getPath());  }  return file;}  }
class C{  public ReportStructure singleDownloadStatus(int token){  ReportStructure report=new ReportStructure();  Task task=tasksDataSource.getTaskInfo(token);  if (task != null) {    List<Chunk> taskChunks=chunksDataSource.chunksRelatedTask(task.id);    report.setObjectValues(task,taskChunks);    return report;  }  return null;}  }
class C{  protected JTextPane newCodePane(){  JTextPane result;  SyntaxDocument doc;  Properties props;  try {    props=Utils.readProperties(PROPERTIES_FILE);  } catch (  Exception e) {    e.printStackTrace();    props=new Properties();  }  result=new JTextPane();  if (props.getProperty("Syntax","false").equals("true")) {    doc=new SyntaxDocument(props);    result.setDocument(doc);    result.setBackground(doc.getBackgroundColor());  } else {    result.setForeground(VisualizeUtils.processColour(props.getProperty("ForegroundColor","black"),Color.BLACK));    result.setBackground(VisualizeUtils.processColour(props.getProperty("BackgroundColor","white"),Color.WHITE));    result.setFont(new Font(props.getProperty("FontName","monospaced"),Font.PLAIN,Integer.parseInt(props.getProperty("FontSize","12"))));  }  return result;}  }
class C{  public static String toUpperEnglish(String s){  if (s.length() > TO_UPPER_CACHE_MAX_ENTRY_LENGTH) {    return s.toUpperCase(Locale.ENGLISH);  }  int index=s.hashCode() & (TO_UPPER_CACHE_LENGTH - 1);  String[] e=TO_UPPER_CACHE[index];  if (e != null) {    if (e[0].equals(s)) {      return e[1];    }  }  String s2=s.toUpperCase(Locale.ENGLISH);  e=new String[]{s,s2};  TO_UPPER_CACHE[index]=e;  return s2;}  }
class C{  public ParsedURL(String baseStr,String urlStr){  userAgent=getGlobalUserAgent();  if (baseStr != null)   data=parseURL(baseStr,urlStr); else   data=parseURL(urlStr);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static ReasonEnum parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  ReasonEnum object=null;  java.util.Map attributeMap=new java.util.HashMap();  java.util.List extraAttributeList=new java.util.ArrayList();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement() || reader.hasText()) {        java.lang.String content=reader.getElementText();        if (content.indexOf(":") > 0) {          prefix=content.substring(0,content.indexOf(":"));          namespaceuri=reader.getNamespaceURI(prefix);          object=ReasonEnum.Factory.fromString(content,namespaceuri);        } else {          object=ReasonEnum.Factory.fromString(content,"");        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public ServerSocket createServerSocket(int p) throws IOException {  ServerSocket ss;  ss=(new RMIMasterSocketFactory()).createServerSocket(p);  if (p == 0) {    if (servport != 0) {      System.err.println("TEST FAILED: " + "Duplicate createServerSocket(0)");      throw new Error("Test aborted (createServerSocket)");    }    servport=ss.getLocalPort();  }  return (ss);}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  if ((tipoBusqueda == TIPO_BUSQUEDA_POR_GESTOR) && StringUtils.isBlank(gestor))   errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(TransferenciasConstants.LABEL_TRANSFERENCIAS_USER_GESTOR,request.getLocale())));  return errors;}  }
class C{  public String copyResponse(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  String colName=mField.getColumnName();  log.info(colName + "=" + value);  if (value == null)   return "";  Integer R_StandardResponse_ID=(Integer)value;  String sql="SELECT Name, ResponseText FROM R_StandardResponse " + "WHERE R_StandardResponse_ID=?";  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,R_StandardResponse_ID.intValue());    ResultSet rs=pstmt.executeQuery();    if (rs.next()) {      String txt=rs.getString(2);      txt=Env.parseContext(ctx,WindowNo,txt,false,true);      mTab.setValue("Result",txt);    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }  return "";}  }
class C{  private boolean zzRefill() throws java.io.IOException {  if (zzStartRead > 0) {    System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);    zzEndRead-=zzStartRead;    zzCurrentPos-=zzStartRead;    zzMarkedPos-=zzStartRead;    zzPushbackPos-=zzStartRead;    zzStartRead=0;  }  if (zzCurrentPos >= zzBuffer.length) {    char newBuffer[]=new char[zzCurrentPos * 2];    System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length);    zzBuffer=newBuffer;  }  int numRead=zzReader.read(zzBuffer,zzEndRead,zzBuffer.length - zzEndRead);  if (numRead < 0) {    return true;  } else {    zzEndRead+=numRead;    return false;  }}  }
class C{  public Map<Integer,Double> compute(int... dataset){  return computeInPlace(intsToDoubles(dataset));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:18.952 -0400",hash_original_method="81ADBCE0EAE2204E2D9E7EA7185BA418",hash_generated_method="4FEDC01EF48253C423995F3CCD5D02B0") public static boolean isAbstractObject(int format){switch (format) {case FORMAT_ABSTRACT_MULTIMEDIA_ALBUM:case FORMAT_ABSTRACT_IMAGE_ALBUM:case FORMAT_ABSTRACT_AUDIO_ALBUM:case FORMAT_ABSTRACT_VIDEO_ALBUM:case FORMAT_ABSTRACT_AV_PLAYLIST:case FORMAT_ABSTRACT_AUDIO_PLAYLIST:case FORMAT_ABSTRACT_VIDEO_PLAYLIST:case FORMAT_ABSTRACT_MEDIACAST:case FORMAT_ABSTRACT_DOCUMENT:    return true;default :  return false;}}  }
class C{  public static int computeEnumSizeNoTag(final int value){  return computeInt32SizeNoTag(value);}  }
class C{  protected XMLWriter createXMLWriter() throws Exception {  return new XMLWriter(System.out,format);}  }
class C{  @SuppressWarnings("unchecked") public E valueAt(int index){  if (mGarbage) {    gc();  }  return (E)mValues[index];}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public WorldBlockIndex(World world,int x,int y,int z){  dimension=world.provider.dimensionId;  this.x=x;  this.y=y;  this.z=z;}  }
class C{  @Override public List<NamedRelatedVirtualPoolRep> list(){  return getList(baseUrl);}  }
class C{  public RatPolyStack(){  polys=null;  size=0;}  }
class C{  private boolean isValidItemIndex(int index){  return viewAdapter != null && viewAdapter.getItemsCount() > 0 && (isCyclic || index >= 0 && index < viewAdapter.getItemsCount());}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public boolean isCellEditable(final int row,final int col){  return false;}  }
class C{  public static boolean isArrayByteBase64(byte[] arrayOctect){  arrayOctect=discardWhitespace(arrayOctect);  int length=arrayOctect.length;  if (length == 0) {    return true;  }  for (int i=0; i < length; i++) {    if (!isBase64(arrayOctect[i])) {      return false;    }  }  return true;}  }
class C{  public int read32bit(int offset){  int v1=read16bit(offset);  int v2=read16bit(offset + 2);  return (v1 << 16) + (v2 & 0xffff);}  }
class C{  public DependencySortOrder(String childElementNameList){  this.childElementNameList=childElementNameList == null ? "" : childElementNameList;}  }
class C{  private int computeVerticalScrollRange(ScrollView scrollView){  final int count=scrollView.getChildCount();  final int contentHeight=scrollView.getHeight() - scrollView.getPaddingBottom() - scrollView.getPaddingTop();  if (count == 0) {    return contentHeight;  }  int scrollRange=scrollView.getChildAt(0).getBottom();  final int scrollY=scrollView.getScrollY();  final int overScrollBottom=Math.max(0,scrollRange - contentHeight);  if (scrollY < 0) {    scrollRange-=scrollY;  } else   if (scrollY > overScrollBottom) {    scrollRange+=scrollY - overScrollBottom;  }  return scrollRange;}  }
class C{  private String convertInternalInformationToString(JSONObject internalJSON,String language,String units,boolean addDate){  String responseToUser="";  LocalDate date;  String tempMax;  String tempMin;  String weatherDesc;  date=Instant.ofEpochSecond(internalJSON.getLong("dt")).atZone(ZoneId.systemDefault()).toLocalDate();  tempMax=((int)internalJSON.getJSONObject("temp").getDouble("max")) + "";  tempMin=((int)internalJSON.getJSONObject("temp").getDouble("min")) + "";  JSONObject weatherObject=internalJSON.getJSONArray("weather").getJSONObject(0);  Emoji emoji=getEmojiForWeather(internalJSON.getJSONArray("weather").getJSONObject(0));  weatherDesc=weatherObject.getString("description");  if (units.equals(METRICSYSTEM)) {    if (addDate) {      responseToUser=LocalisationService.getInstance().getString("forecastWeatherPartMetric",language);    } else {      responseToUser=LocalisationService.getInstance().getString("alertWeatherPartMetric",language);    }  } else {    if (addDate) {      responseToUser=LocalisationService.getInstance().getString("forecastWeatherPartImperial",language);    } else {      responseToUser=LocalisationService.getInstance().getString("alertWeatherPartImperial",language);    }  }  if (addDate) {    responseToUser=String.format(responseToUser,Emoji.LARGE_ORANGE_DIAMOND.toString(),dateFormaterFromDate.format(date),emoji == null ? weatherDesc : emoji.toString(),tempMax,tempMin);  } else {    responseToUser=String.format(responseToUser,emoji == null ? weatherDesc : emoji.toString(),tempMax,tempMin);  }  return responseToUser;}  }
class C{  public static Composite createComposite(Composite parent,Font font,int columns,int hspan,int fill){  Composite g=new Composite(parent,SWT.NONE);  g.setLayout(new GridLayout(columns,false));  g.setFont(font);  GridData gd=new GridData(fill);  gd.horizontalSpan=hspan;  g.setLayoutData(gd);  return g;}  }
class C{  private static boolean hasEulerianCycle(Graph G){  if (G.E() == 0)   return false;  for (int v=0; v < G.V(); v++)   if (G.degree(v) % 2 != 0)   return false;  int s=nonIsolatedVertex(G);  BreadthFirstPaths bfs=new BreadthFirstPaths(G,s);  for (int v=0; v < G.V(); v++)   if (G.degree(v) > 0 && !bfs.hasPathTo(v))   return false;  return true;}  }
class C{  private String parseQuotedString() throws ParseException {  skip();  List<Byte> strBytes=new LinkedList<Byte>();  boolean unescapedBackslash=true;  while (data[index] != QUOTEDSTRING_END_TOKEN || (data[index - 1] == QUOTEDSTRING_ESCAPE_TOKEN && unescapedBackslash)) {    strBytes.add(data[index]);    if (accept(QUOTEDSTRING_ESCAPE_TOKEN)) {      unescapedBackslash=!(data[index - 1] == QUOTEDSTRING_ESCAPE_TOKEN && unescapedBackslash);    }    skip();  }  byte[] bytArr=new byte[strBytes.size()];  int i=0;  for (  Byte b : strBytes) {    bytArr[i]=b;    i++;  }  String unescapedString;  try {    unescapedString=parseQuotedString(new String(bytArr,"UTF-8"));  } catch (  Exception ex) {    throw new ParseException("The quoted string could not be parsed.",index);  }  skip();  return unescapedString;}  }
class C{  @Override public void close() throws IOException {  this.writer.close();}  }
class C{  PasswordAuthenticator(String username,String password){  this.m_password=password;  this.m_username=username;}  }
class C{  public static <K,V>ULLMap<V,K> invert(ULLMap<K,V> dict){  ULLMap<V,K> inverted=new ULLMap<V,K>();  for (  K key : dict) {    inverted.put(dict.get(key),key);  }  return inverted;}  }
class C{  public Response logout(String token,Cookie tokenAccessCookie,UriInfo uriInfo){  Response.ResponseBuilder response;  String accessToken=token;  if (accessToken == null && tokenAccessCookie != null) {    accessToken=tokenAccessCookie.getValue();  }  boolean secure=uriInfo.getRequestUri().getScheme().equals("https");  if (accessToken != null) {    response=Response.ok();    AccessTicket accessTicket=ticketManager.removeTicket(accessToken);    if (accessTicket != null) {      LOG.info("EVENT#user-sso-logged-out# USER#{}#",accessTicket.getUserId());    } else {      LOG.warn("AccessTicket not found. Nothing to do.");    }  } else {    response=Response.status(Response.Status.BAD_REQUEST);    LOG.warn("Token not found in request.");  }  if (cookieBuilder != null) {    cookieBuilder.clearCookies(response,accessToken,secure);  }  return response.build();}  }
class C{  public synchronized void closeQuery(final int nQueryHandle){  if (!m_prologTable.containsKey(new Integer(nQueryHandle)))   throw new JIPInvalidHandleException();  final AsyncWAMManager container=(AsyncWAMManager)m_prologTable.get(new Integer(nQueryHandle));  m_prologTable.remove(new Integer(nQueryHandle));  container.close();  notifyClose(nQueryHandle);}  }
class C{  public boolean destroyVolume(boolean force){  NaElement elem=new NaElement("volume-destroy");  elem.addNewChild("name",name);  try {    server.invokeElem(elem);    return true;  } catch (  Exception e) {    String msg="Failed to destroy volume: " + name;    log.error(msg,e);    throw new NetAppCException(msg,e);  }}  }
class C{  public ClientParamsStack(ClientParamsStack stack){  this(stack.getApplicationParams(),stack.getClientParams(),stack.getRequestParams(),stack.getOverrideParams());}  }
class C{  public static boolean alreadyDone(File cfile){  if (new File(cfile.getAbsolutePath() + "_" + Configuration.BTSCONF).exists()) {    for (int i=0; i < 7; i++) {      if (new File(cfile.getAbsolutePath() + "_" + Integer.toString(i)+ "S").exists()) {        timeslot=Integer.toString(i);        return true;      }    }  }  return false;}  }
class C{  @Override public void dispose(){  super.dispose();  try {    mChannel.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public boolean isFileTransferStoreForwardSupported(){  return mFileTransferStoreForward;}  }
class C{  public static int size(Iterator<?> iterator){  int count;  for (count=0; iterator.hasNext(); ++count) {    iterator.next();  }  return count;}  }
class C{  public static <T>T max(Collection<? extends T> collection,Comparator<? super T> comparator){  if (comparator == null) {    @SuppressWarnings("unchecked") T result=(T)max((Collection<net.sourceforge.retroweaver.harmony.runtime.java.lang.Comparable>)collection);    return result;  }  Iterator<? extends T> it=collection.iterator();  T max=it.next();  while (it.hasNext()) {    T next=it.next();    if (comparator.compare(max,next) < 0) {      max=next;    }  }  return max;}  }
class C{  public void parse(Document document) throws dr.xml.XMLParseException {  Element root=document.getRootElement();  if (!root.getName().equals("treeTracer")) {    throw new dr.xml.XMLParseException("This document does not appear to be a TreeTracer file");  }}  }
class C{  public void stopProcessing(){  isProcessing=false;}  }
class C{  public ReRouter(LeastCostPathCalculator router,Network network,TravelTime travelTime,double reRouteProb){  super();  this.router=router;  this.network=network;  this.travelTime=travelTime;  this.rerouteProb=reRouteProb;}  }
class C{  private String decryptImageURLPassword(String imageUrl){  String password=extractPasswordFromImageUrl(imageUrl);  if (StringUtils.isNotBlank(password)) {    String encPwd=null;    try {      EncryptionProviderImpl encryptionProviderImpl=new EncryptionProviderImpl();      encryptionProviderImpl.setCoordinator(_coordinator);      encryptionProviderImpl.start();      EncryptionProvider encryptionProvider=encryptionProviderImpl;      encPwd=URLEncoder.encode(encryptionProvider.decrypt(Base64.decodeBase64(password)),"UTF-8");      return StringUtils.replace(imageUrl,":" + password + "@",":" + encPwd + "@");    } catch (    UnsupportedEncodingException e) {      log.warn("Unable to encode compute image password '{}'." + "Special characters may cause issues loading compute image.",imageUrl,e.getMessage());    }catch (    Exception e) {      log.error("Cannot decrypt compute image password :" + e.getLocalizedMessage());      e.printStackTrace();      throw e;    }  }  return imageUrl;}  }
class C{  public JSONArray put(int index,double value) throws JSONException {  this.put(index,new Double(value));  return this;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:11.738 -0500",hash_original_method="54509C1E79AD8AD51EA2FF1C763ECD71",hash_generated_method="A4A0537B9EE87D097717447006422A87") private String encodeProduct(){  StringBuffer tokens=new StringBuffer();  ListIterator it=productTokens.listIterator();  while (it.hasNext()) {    tokens.append((String)it.next());  }  return tokens.toString();}  }
class C{  public static int[] cs_counts(Scs A,int[] parent,int[] post,boolean ata){  int i, j, k, n, m, J, s, p, q, ATp[], ATi[], maxfirst[], prevleaf[], ancestor[], colcount[], w[], first[], delta[];  int[] head=null, next=null;  int[] jleaf=new int[1];  int head_offset=0, next_offset=0;  Scs AT;  if (!Scs_util.CS_CSC(A) || parent == null || post == null)   return (null);  m=A.m;  n=A.n;  s=4 * n + (ata ? (n + m + 1) : 0);  delta=colcount=new int[n];  w=new int[s];  AT=Scs_transpose.cs_transpose(A,false);  ancestor=w;  maxfirst=w;  int maxfirst_offset=n;  prevleaf=w;  int prevleaf_offset=2 * n;  first=w;  int first_offset=3 * n;  for (k=0; k < s; k++)   w[k]=-1;  for (k=0; k < n; k++) {    j=post[k];    delta[j]=(first[first_offset + j] == -1) ? 1 : 0;    for (; j != -1 && first[first_offset + j] == -1; j=parent[j])     first[first_offset + j]=k;  }  ATp=AT.p;  ATi=AT.i;  if (ata) {    int[] offsets=init_ata(AT,post,w);    head=w;    head_offset=offsets[0];    next=w;    next_offset=offsets[1];  }  for (i=0; i < n; i++)   ancestor[i]=i;  for (k=0; k < n; k++) {    j=post[k];    if (parent[j] != -1)     delta[parent[j]]--;    for (J=HEAS(k,j,head,head_offset,ata); J != -1; J=NEXT(J,next,next_offset,ata)) {      for (p=ATp[J]; p < ATp[J + 1]; p++) {        i=ATi[p];        q=Scs_leaf.cs_leaf(i,j,first,first_offset,maxfirst,maxfirst_offset,prevleaf,prevleaf_offset,ancestor,0,jleaf);        if (jleaf[0] >= 1)         delta[j]++;        if (jleaf[0] == 2)         delta[q]--;      }    }    if (parent[j] != -1)     ancestor[j]=parent[j];  }  for (j=0; j < n; j++) {    if (parent[j] != -1)     colcount[parent[j]]+=colcount[j];  }  return colcount;}  }
class C{  public void login(String token) throws Exception {  setToken(token);}  }
class C{  public BigInteger[] generateSignature(byte[] message){  ECDomainParameters ec=key.getParameters();  BigInteger n=ec.getN();  BigInteger e=calculateE(n,message);  BigInteger d=((ECPrivateKeyParameters)key).getD();  if (kCalculator.isDeterministic()) {    kCalculator.init(n,d,message);  } else {    kCalculator.init(n,random);  }  BigInteger r, s;  ECMultiplier basePointMultiplier=createBasePointMultiplier();  do {    BigInteger k;    do {      k=kCalculator.nextK();      ECPoint p=basePointMultiplier.multiply(ec.getG(),k).normalize();      r=p.getAffineXCoord().toBigInteger().mod(n);    } while (r.equals(ZERO));    s=k.modInverse(n).multiply(e.add(d.multiply(r))).mod(n);  } while (s.equals(ZERO));  return new BigInteger[]{r,s};}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  if (estados.length == 0)   errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(ValoracionConstants.LABEL_VALORACION_ELIMINACION_BUSCAR_ESTADO,request.getLocale())));  return errors;}  }
class C{  public boolean isEmpty(){  return size() == 0;}  }
class C{  public void addSubtitle(String subtitle,Font font){  this.chart.addSubtitle(new TextTitle(subtitle,font));}  }
class C{  public IntegerMemberValue(ConstPool cp){  super('I',cp);  setValue(0);}  }
class C{  public QueryExecutionCanceledException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public static boolean recordLoadMetadata(int loadCount,LoadMetadataDetails loadMetadataDetails,CarbonLoadModel loadModel,String loadStatus,String startLoadTime) throws IOException {  boolean status=false;  String metaDataFilepath=loadModel.getCarbonDataLoadSchema().getCarbonTable().getMetaDataFilepath();  AbsoluteTableIdentifier absoluteTableIdentifier=loadModel.getCarbonDataLoadSchema().getCarbonTable().getAbsoluteTableIdentifier();  CarbonTablePath carbonTablePath=CarbonStorePath.getCarbonTablePath(absoluteTableIdentifier.getStorePath(),absoluteTableIdentifier.getCarbonTableIdentifier());  String tableStatusPath=carbonTablePath.getTableStatusFilePath();  SegmentStatusManager segmentStatusManager=new SegmentStatusManager(absoluteTableIdentifier);  ICarbonLock carbonLock=segmentStatusManager.getTableStatusLock();  try {    if (carbonLock.lockWithRetries()) {      LOGGER.info("Acquired lock for table" + loadModel.getDatabaseName() + "."+ loadModel.getTableName()+ " for table status updation");      LoadMetadataDetails[] listOfLoadFolderDetailsArray=segmentStatusManager.readLoadMetadata(metaDataFilepath);      String loadEnddate=readCurrentTime();      loadMetadataDetails.setTimestamp(loadEnddate);      loadMetadataDetails.setLoadStatus(loadStatus);      loadMetadataDetails.setLoadName(String.valueOf(loadCount));      loadMetadataDetails.setLoadStartTime(startLoadTime);      List<LoadMetadataDetails> listOfLoadFolderDetails=new ArrayList<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);      if (null != listOfLoadFolderDetailsArray) {        for (        LoadMetadataDetails loadMetadata : listOfLoadFolderDetailsArray) {          listOfLoadFolderDetails.add(loadMetadata);        }      }      listOfLoadFolderDetails.add(loadMetadataDetails);      segmentStatusManager.writeLoadDetailsIntoFile(tableStatusPath,listOfLoadFolderDetails.toArray(new LoadMetadataDetails[listOfLoadFolderDetails.size()]));      status=true;    } else {      LOGGER.error("Not able to acquire the lock for Table status updation for table " + loadModel.getDatabaseName() + "."+ loadModel.getTableName());    }  }  finally {    if (carbonLock.unlock()) {      LOGGER.info("Table unlocked successfully after table status updation" + loadModel.getDatabaseName() + "."+ loadModel.getTableName());    } else {      LOGGER.error("Unable to unlock Table lock for table" + loadModel.getDatabaseName() + "."+ loadModel.getTableName()+ " during table status updation");    }  }  return status;}  }
class C{  public SetAddonEnabled(String addonId,boolean enabled){  super();  addParameterToRequest("addonid",addonId);  addParameterToRequest("enabled",enabled);}  }
class C{  public static boolean hasNavigableWebContent(Context context,AccessibilityNodeInfoCompat node){  return (supportsWebActions(node) && isScriptInjectionEnabled(context)) || hasNativeWebContent(node);}  }
class C{  public DistributionBeanQuery(final QueryDefinition definition,final Map<String,Object> queryConfig,final Object[] sortPropertyIds,final boolean[] sortStates){  super(definition,queryConfig,sortPropertyIds,sortStates);  if (HawkbitCommonUtil.isNotNullOrEmpty(queryConfig)) {    distributionTags=(Collection<String>)queryConfig.get(SPUIDefinitions.FILTER_BY_TAG);    searchText=(String)queryConfig.get(SPUIDefinitions.FILTER_BY_TEXT);    noTagClicked=(Boolean)queryConfig.get(SPUIDefinitions.FILTER_BY_NO_TAG);    pinnedControllerId=(String)queryConfig.get(SPUIDefinitions.ORDER_BY_PINNED_TARGET);    if (!Strings.isNullOrEmpty(searchText)) {      searchText=String.format("%%%s%%",searchText);    }  }  if (sortStates.length > 0) {    sort=new Sort(sortStates[0] ? Direction.ASC : Direction.DESC,(String)sortPropertyIds[0]);    for (int distId=1; distId < sortPropertyIds.length; distId++) {      sort.and(new Sort(sortStates[distId] ? Direction.ASC : Direction.DESC,(String)sortPropertyIds[distId]));    }  }}  }
class C{  private Object executeDivide(PageContext pc,SQL sql,Query qr,Operation2 expression,int row) throws PageException {  return new Double(Caster.toDoubleValue(executeExp(pc,sql,qr,expression.getLeft(),row)) / Caster.toDoubleValue(executeExp(pc,sql,qr,expression.getRight(),row)));}  }
class C{  public boolean isPrinted(){  Object oo=get_Value(COLUMNNAME_IsPrinted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void hide(Animation anim){  hide(true,anim);}  }
class C{  private void throwExIntParam(MethodVisitor mv,Class<?> exCls){  String exSig=Type.getInternalName(exCls);  mv.visitTypeInsn(NEW,exSig);  mv.visitInsn(DUP);  mv.visitLdcInsn("mapping " + this.className + " failed to map field:");  mv.visitVarInsn(ILOAD,2);  mv.visitMethodInsn(INVOKESTATIC,"java/lang/Integer","toString","(I)Ljava/lang/String;");  mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/String","concat","(Ljava/lang/String;)Ljava/lang/String;");  mv.visitMethodInsn(INVOKESPECIAL,exSig,"<init>","(Ljava/lang/String;)V");  mv.visitInsn(ATHROW);}  }
class C{  public static double erf(double x){  if (x > 0.0) {    return GammaFunction.incompleteGammaP(0.5,x * x);  } else   if (x < 0.0) {    return -GammaFunction.incompleteGammaP(0.5,x * x);  } else {    return 0.0;  }}  }
class C{  protected synchronized void flushPendingWriteRequests() throws Exception {  LOGGER.debug(" flushPendingWriteRequests()");  if (writeRequestQueue == null) {    return;  }  Event scheduledWrite;  while ((scheduledWrite=writeRequestQueue.poll()) != null) {    LOGGER.debug(" Flushing buffered write request: {}",scheduledWrite.data);    getProxyFilter().filterWrite(scheduledWrite.nextFilter,getSession(),(WriteRequest)scheduledWrite.data);  }  writeRequestQueue=null;}  }
class C{  public void close() throws IOException {  if (thread.isAlive()) {    thread.closed=true;    thread.interrupt();  }  if (stream != null) {    stream.close();  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case ImPackage.STRING_LITERAL_FOR_STE__ENTRY:    if (resolve)     return getEntry();  return basicGetEntry();case ImPackage.STRING_LITERAL_FOR_STE__USE_EXPORTED_NAME:return isUseExportedName();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void print(char c){  writer.print(c);}  }
class C{  @Override public void recover(Parser recognizer,RecognitionException e){  String message=Messages.get(Messages.DEFAULT_LOCALE,"error_invalid_firewallconfig",new Object[]{e.getOffendingToken().getText(),e.getInputStream().toString()});  throw new RuntimeException(message);}  }
class C{  public void sendClientRegRequest(SecurityServerId securityServer,ClientId clientId) throws Exception {  sendToProxy(builder.buildClientRegRequest(securityServer,clientId));}  }
class C{  public void tagDefineFontInfo(int fontId,String fontName,int flags,int[] codes) throws IOException {  fontCodes.put(new Integer(fontId),codes);}  }
class C{  public static HashSetModifiableDBIDs newHashSet(int size){  return DBIDFactory.FACTORY.newHashSet(size);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Widget w=getWidget(stack);  if (w != null && stack.getUIMgr() != null)   stack.getUIMgr().advanceUI(w);  return null;}  }
class C{  public static void writeHtml(String templateFile,File outputFile,Map<String,String> replacements) throws IOException {  try (final OutputStream os=FileUtils.createOutputStream(outputFile)){    writeHtml(templateFile,os,replacements);  } }  }
class C{  public InlineQueryResultVideo.InlineQueryResultVideoBuilder videoWidth(int videoWidth){  this.video_width=videoWidth;  return this;}  }
class C{  public TurnoutOperation loadOne(Element e,Constructor<?> constr,int di,int dmt){  int interval=di;  int maxTries=dmt;  TurnoutOperation result=null;  if (e.getAttribute("name") == null) {    log.warn("unexpected null in name " + e + " "+ e.getAttributes());    return null;  }  String name=e.getAttribute("name").getValue();  if (e.getAttribute("interval") != null) {    try {      interval=Integer.parseInt(e.getAttribute("interval").getValue());    } catch (    NumberFormatException ex) {    }  }  if (e.getAttribute("maxtries") != null) {    try {      maxTries=Integer.parseInt(e.getAttribute("maxtries").getValue());    } catch (    NumberFormatException ex) {    }  }  try {    result=(TurnoutOperation)constr.newInstance(new Object[]{name,Integer.valueOf(interval),Integer.valueOf(maxTries)});  } catch (  InstantiationException e1) {    log.error("while creating CommonTurnoutOperation",e1);    return null;  }catch (  IllegalAccessException e2) {    log.error("while creating CommonTurnoutOperation",e2);    return null;  }catch (  java.lang.reflect.InvocationTargetException e3) {    log.error("while creating CommonTurnoutOperation",e3);    return null;  }  if (log.isDebugEnabled()) {    log.debug("create turnout operation: (" + name + ")");  }  return result;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (major: ");  result.append(major);  result.append(", minor: ");  result.append(minor);  result.append(", micro: ");  result.append(micro);  result.append(", qualifier: ");  result.append(qualifier);  result.append(')');  return result.toString();}  }
class C{  public static boolean isKingEmptyOrRook(ClassicGame game,int square,int color,int intitialRookFile){  return game.board[square] == EMPTY || game.board[square] == KING && (game.getColorBB(color) & getBitboard(square)) != 0 || game.board[square] == ROOK && intitialRookFile == GameUtils.getFile(square) && (game.getColorBB(color) & getBitboard(square)) != 0;}  }
class C{  public void removeAttribute(Object key){  attributes.remove(key);}  }
class C{  public GridConstrainer(){  this(1d,1d,0d,false);}  }
class C{  public void collideVertical(){  behavior.collissionY();  collision=true;}  }
class C{  public byte[] decompressCropAndRecompressJpegData(final byte[] jpegData,Rect crop,int recompressionQuality){  Bitmap original=BitmapFactory.decodeByteArray(jpegData,0,jpegData.length);  final Bitmap croppedResult=Bitmap.createBitmap(original,crop.left,crop.top,crop.width(),crop.height());  ;  ByteArrayOutputStream stream=new ByteArrayOutputStream();  croppedResult.compress(Bitmap.CompressFormat.JPEG,recompressionQuality,stream);  return stream.toByteArray();}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();{    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  protected void sort(int modelColumnIndex){  int rows=getRowCount();  if (rows == 0)   return;  TableModel model=getModel();  if (!(model instanceof GridTable)) {    super.sort(modelColumnIndex);    return;  }  sorting=true;  if (modelColumnIndex != p_lastSortIndex)   p_asc=true; else   p_asc=!p_asc;  p_lastSortIndex=modelColumnIndex;  log.config("#" + modelColumnIndex + " - rows="+ rows+ ", asc="+ p_asc);  ((GridTable)model).sort(modelColumnIndex,p_asc);  sorting=false;}  }
class C{  private long medianValue(long[] times){  if (times.length == 0) {    throw new IllegalArgumentException("Empty array");  }  Arrays.sort(times.clone());  long median=times[times.length / 2];  if (times.length > 1 && times.length % 2 != 0) {    median=(median + times[times.length / 2 + 1]) / 2;  }  return median;}  }
class C{  public boolean hasMap(String name){  return meta.containsKey("name." + name);}  }
class C{  public void testGroup(){  Instances result;  int i;  m_Filter=getFilter("(.+)(Att)(.+)","$1$3",true,"first-last",false);  result=performTest();  for (i=0; i < result.numAttributes(); i++)   assertTrue(result.attribute(i).name() + " still contains 'Att'",(result.attribute(i).name().indexOf("Att") == -1));}  }
class C{  public static CharSequence downloadViaHttp(String uri,ContentType type) throws IOException {  return downloadViaHttp(uri,type,Integer.MAX_VALUE);}  }
class C{  public static int power(final int base,final int raise){  int p=1;  long b=raise & POWER_CLAMP;  long powerN=base;  while (b != 0) {    if ((b & 1) != 0) {      p*=powerN;    }    b>>>=1;    powerN=powerN * powerN;  }  return p;}  }
class C{  public List<Article> listArticlesDesc(@Nullable FlakeId startArticleId,int limit){  FlakeId start=Optional.ofNullable(startArticleId).orElse(FlakeId.MAX);  final String sql="" + " SELECT * " + "   FROM Article "+ "  WHERE articleId < ? "+ "    AND deleted = FALSE "+ "  ORDER BY articleId DESC "+ "  LIMIT ? ";  return jdbc().query(sql,articleMapper,start.value(),limit);}  }
class C{  private void requestFreeSize(int cnt){  if (size + cnt > capacity())   capacity((size + cnt) << 1);}  }
class C{  protected Consumer<T> consumer(int iportIndex){  return null;}  }
class C{  public void exit(Class<? extends Annotation> scope){  checkScopeAnnotation(scope);  final ScopeRegistry reg=getRegistry();  if (!reg.isScopeActive(scope))   throw new IllegalStateException("attempt to exit an inactive scope: " + scope.getName());  reg.deactivateScope(scope);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void execute(String url,String user,String password,String schema,String table,String packageName,String folder,boolean annotateSchema,boolean trimStrings) throws SQLException {  Connection conn=null;  try {    org.h2.Driver.load();    conn=DriverManager.getConnection(url,user,password);    Db db=Db.open(url,user,password.toCharArray());    DbInspector inspector=new DbInspector(db);    List<String> models=inspector.generateModel(schema,table,packageName,annotateSchema,trimStrings);    File parentFile;    if (StringUtils.isNullOrEmpty(folder)) {      parentFile=new File(System.getProperty("user.dir"));    } else {      parentFile=new File(folder);    }    parentFile.mkdirs();    Pattern p=Pattern.compile("class ([a-zA-Z0-9]+)");    for (    String model : models) {      Matcher m=p.matcher(model);      if (m.find()) {        String className=m.group().substring("class".length()).trim();        File classFile=new File(parentFile,className + ".java");        Writer o=new FileWriter(classFile,false);        PrintWriter writer=new PrintWriter(new BufferedWriter(o));        writer.write(model);        writer.close();        System.out.println("Generated " + classFile.getAbsolutePath());      }    }  } catch (  IOException io) {    throw DbException.convertIOException(io,"could not generate model").getSQLException();  } finally {    JdbcUtils.closeSilently(conn);  }}  }
class C{  public static String[] readStrings(String filename){  return new In(filename).readAllStrings();}  }
class C{  public String write(){  return write((Integer)null);}  }
class C{  public boolean isQuestInState(final String name,final int index,final String... states){  return quests.isQuestInState(name,index,states);}  }
class C{  private void drawLifeline(DrawHandler drawHandler,LifelineDrawingInfo drawingInfo,int lifelineLastTick){  int currentStartTick=0;  int endTick;  int currentActiveCount=0;  boolean startInc=false;  boolean endInc;  LinkedList<ExecutionSpecification> active=new LinkedList<ExecutionSpecification>();  if (!createdOnStart) {    currentStartTick=created + 1;  }  ListIterator<ExecutionSpecification> execSpecIter=activeAreas.listIterator();  ListIterator<Line1D> interruptedAreasIter=drawingInfo.getInterruptedAreas().listIterator();  LineType oldLt=drawHandler.getLineType();  if (execSpecFromStart && execSpecIter.hasNext()) {    ExecutionSpecification execSpec=execSpecIter.next();    if (execSpec.getStartTick() == currentStartTick - 1) {      active.addFirst(execSpec);      startInc=true;    } else {      execSpecIter.previous();    }  }  double llTopY=drawingInfo.getVerticalStart(currentStartTick) - drawingInfo.getTickVerticalPadding();  while (active.size() > 0 || execSpecIter.hasNext()) {    currentActiveCount=active.size();    if (active.size() > 0 && execSpecIter.hasNext()) {      ExecutionSpecification execSpec=execSpecIter.next();      if (active.getFirst().getEndTick() < execSpec.getStartTick()) {        execSpecIter.previous();        endInc=false;        endTick=active.removeFirst().getEndTick();      } else {        endInc=true;        endTick=execSpec.getStartTick();        active.addFirst(execSpec);      }    } else     if (active.size() > 0) {      endInc=false;      endTick=active.removeFirst().getEndTick();    } else {      ExecutionSpecification execSpec=execSpecIter.next();      endInc=true;      endTick=execSpec.getStartTick();      active.addFirst(execSpec);    }    double llBottomY=drawingInfo.getVerticalCenter(endTick);    drawLifelinePart(drawHandler,drawingInfo.getHorizontalCenter(),llTopY,startInc,llBottomY,endInc,currentActiveCount,interruptedAreasIter);    currentStartTick=endTick;    llTopY=llBottomY;    startInc=endInc;  }  if (destroyed == null) {    drawLifelinePart(drawHandler,drawingInfo.getHorizontalCenter(),llTopY,false,drawingInfo.getVerticalEnd(lifelineLastTick),false,0,interruptedAreasIter);  } else {    drawHandler.setLineType(LineType.SOLID);    double halfSize=DESTROY_SIZE / 2.0;    double centerX=drawingInfo.getHorizontalCenter();    double centerY=drawingInfo.getVerticalCenter(destroyed);    drawHandler.drawLine(centerX - halfSize,centerY - halfSize,centerX + halfSize,centerY + halfSize);    drawHandler.drawLine(centerX + halfSize,centerY - halfSize,centerX - halfSize,centerY + halfSize);    if (destroyed > currentStartTick) {      drawLifelinePart(drawHandler,drawingInfo.getHorizontalCenter(),llTopY,false,drawingInfo.getVerticalCenter(destroyed),false,0,interruptedAreasIter);    }  }  drawHandler.setLineType(oldLt);}  }
class C{  protected Paranamer defaultParanamer(){  return new CachingParanamer(new BytecodeReadingParanamer());}  }
class C{  public NumberToBitVector(final int width){  this.width=width;}  }
class C{  private void startOperation(Attributes atts){  if (!this.seenOperation) {    if (!this.seenAttribute) {      pw.println("<tr valign=\"top\">");      pw.println("  <th align=\"left\">Operations</th>");      pw.println("  <th align=\"left\" colspan=\"2\">Name</th>");      pw.println("  <th align=\"left\">Type</th>");      pw.println("  <th align=\"left\">Description</th>");      pw.println("  <th align=\"left\"></th>");      pw.println("</tr>");    } else {      String title="Operations and Parameters";      pw.println("<tr valign=\"top\">");      pw.println("  <th align=\"left\" colspan=\"6\">" + title + "</th>");      pw.println("</tr>");    }  }  this.seenOperation=true;  String name=atts.getValue(NAME);  String type=atts.getValue(RETURN_TYPE);  String description=atts.getValue(DESCRIPTION);  pw.println("<tr valign=\"top\">");  pw.println("  <td></td>");  pw.println("  <td colspan=\"2\">" + name + "</td>");  pw.println("  <td>" + type + "</td>");  pw.println("  <td colspan=\"2\">" + description + "</td>");  pw.println("</tr>");}  }
class C{  public byte[] unsafeGetArray(){  return bytes;}  }
class C{  public boolean equals(java.lang.Object anObject){  return false;}  }
class C{  private void triggerNextRequest(){  schedulingLock.lock();  try {    double time=getTime();    double lowestReservation=Double.MAX_VALUE;    Tenant lowestReservationTenant=null;    double lowestWeight=Double.MAX_VALUE;    Tenant lowestWeightTenant=null;    for (    Tenant tenant : tenants) {      DiskRequest next=tenant.peek();      if (next == null) {        continue;      }      double reservation=next.reservation();      if (reservation <= time && reservation < lowestReservation) {        lowestReservation=reservation;        lowestReservationTenant=tenant;      }      if (lowestReservationTenant == null) {        double weight=next.weight();        if (weight < lowestWeight) {          lowestWeight=weight;          lowestWeightTenant=tenant;        }      }    }    DiskRequest request;    if (lowestReservationTenant != null) {      request=lowestReservationTenant.takeReserved(time);    } else {      request=lowestWeightTenant.takeWeight(time);    }    if (DEBUG)     print("trigger","%s",request);    request.trigger();  }  finally {    schedulingLock.unlock();  }}  }
class C{  public void removeWriterListener(WriterListener writerListener){synchronized (listeners) {    listeners.remove(writerListener);  }}  }
class C{  public Display2D(final double width,final double height,GUIState simulation,long interval){  this(width,height,simulation);}  }
class C{  protected void renumberColumns(){  Iterator iter=m_names.iterator();  for (int idx=0; iter.hasNext(); ++idx) {    String name=(String)iter.next();    ColumnEntry e=(ColumnEntry)m_entries.get(name);    e.colnum=idx;  }}  }
class C{  public void hide(boolean animate){  hide(animate,fadeOut);}  }
class C{  protected void sendMessage() throws IOException {  messageOutput.flush();  byte[] msg=byteOutput.toByteArray();  assert PostgresMessages.writeTypeCorrect((int)msg[0]) : "Invalid write message: " + (char)msg[0];  int len=msg.length - 1;  msg[1]=(byte)(len >> 24);  msg[2]=(byte)(len >> 16);  msg[3]=(byte)(len >> 8);  msg[4]=(byte)len;  outputStream.write(msg);  bytesWritten(len + 1);}  }
class C{  @Override protected View onCreateView(String name,AttributeSet attrs) throws ClassNotFoundException {  View view=null;  for (  String prefix : CLASS_PREFIX_LIST) {    try {      view=createView(name,prefix,attrs);    } catch (    ClassNotFoundException ignored) {    }  }  if (view == null)   view=super.onCreateView(name,attrs);  return mTypekitFactory.onViewCreated(view,name,null,view.getContext(),attrs);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public DirtyFlagMap(){  map=new HashMap<K,V>();}  }
class C{  protected void displayResults(List<File> processedFiles,Map<String,Throwable> failures,long time,File outDir) throws IOException {  PrintWriter resultsWriter=new PrintWriter(new FileWriter(new File(outDir,"results.txt")));  try {    writeMessage(processedFiles.size() + " files processed in " + (time / 1000000)+ " ms",resultsWriter);    if (failures.size() > 0) {      if (failures.size() == processedFiles.size()) {        writeMessage("No input files could be processed :",resultsWriter);      } else {        writeMessage("Some input files could not be processed :",resultsWriter);      }      for (      Entry<String,Throwable> entry : failures.entrySet()) {        writeMessage(entry.getKey(),resultsWriter);        if (entry.getValue() != null) {          writeMessage("cause : " + entry.getValue(),resultsWriter);        }      }    } else {      if (processedFiles.size() > 0) {        writeMessage("All input files were successfully processed.",resultsWriter);      } else {        writeMessage("No input file was provided.",resultsWriter);      }    }  }  finally {    resultsWriter.close();  }}  }
class C{  public CopyOnWriteHashSet<T> copyAndRemove(Object entry){  final CopyOnWriteHashMap<T,Boolean> updated=map.copyAndRemove(entry);  if (updated == map) {    return this;  } else {    return new CopyOnWriteHashSet<>(updated);  }}  }
class C{  private void checkUUID(String uuid,int code){  checkHash(UUID.fromString(uuid),code);}  }
class C{  public final double variance(){  throw new UnsupportedOperationException();}  }
class C{  public ShapeDecoration removeDecoration(int index){  return decorations.remove(index);}  }
class C{  public Vec4[] computeCornerPoints(Globe globe,double exaggeration){  if (globe == null) {    String msg=Logging.getMessage("nullValue.GlobeIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  Vec4[] corners=new Vec4[4];  Angle minLat=this.minLatitude;  Angle maxLat=this.maxLatitude;  Angle minLon=this.minLongitude;  Angle maxLon=this.maxLongitude;  corners[0]=globe.computePointFromPosition(minLat,minLon,exaggeration * globe.getElevation(minLat,minLon));  corners[1]=globe.computePointFromPosition(minLat,maxLon,exaggeration * globe.getElevation(minLat,maxLon));  corners[2]=globe.computePointFromPosition(maxLat,maxLon,exaggeration * globe.getElevation(maxLat,maxLon));  corners[3]=globe.computePointFromPosition(maxLat,minLon,exaggeration * globe.getElevation(maxLat,minLon));  return corners;}  }
class C{  public void testPageIndepenednce(){  String name="my name";  String[] description={"foo","bar"};  Object[] pageKey={new Integer(1),new Date()};  assertFalse(helper.isNameUsed(name));  assertNull(helper.getUsedHint(name));  helper.addName(name,pageKey[0],description[0]);  assertTrue(helper.isNameUsed(name));  assertEquals(description[0],helper.getUsedHint(name));  helper.addName(name,pageKey[1],description[1]);  assertTrue(helper.isNameUsed(name));  assertTrue(helper.getUsedHint(name).equals(description[0]) || helper.getUsedHint(name).equals(description[1]));  helper.resetModelNames(pageKey[0]);  assertTrue(helper.isNameUsed(name));  assertTrue(helper.getUsedHint(name).equals(description[1]));  helper.resetModelNames(pageKey[1]);  assertFalse(helper.isNameUsed(name));  assertNull(helper.getUsedHint(name));}  }
class C{  private void readStylesChildren(IXMLElement elem,HashMap<String,Style> styles) throws IOException {  for (  IXMLElement child : elem.getChildren()) {    String ns=child.getNamespace();    String name=child.getName();    if (name.equals("default-style") && (ns == null || ns.equals(STYLE_NAMESPACE))) {      readDefaultStyleElement(child,styles);    } else     if (name.equals("layer-set") && (ns == null || ns.equals(DRAWING_NAMESPACE))) {      readLayerSetElement(child,styles);    } else     if (name.equals("list-style") && (ns == null || ns.equals(TEXT_NAMESPACE))) {      readListStyleElement(child,styles);    } else     if (name.equals("marker") && (ns == null || ns.equals(DRAWING_NAMESPACE))) {      readMarkerElement(child,styles);    } else     if (name.equals("master-page") && (ns == null || ns.equals(STYLE_NAMESPACE))) {      readMasterPageElement(child,styles);    } else     if (name.equals("page-layout") && (ns == null || ns.equals(STYLE_NAMESPACE))) {      readPageLayoutElement(child,styles);    } else     if (name.equals("style") && (ns == null || ns.equals(STYLE_NAMESPACE))) {      readStyleElement(child,styles);    } else {      if (DEBUG) {        System.out.println("ODGStylesReader unsupported <" + elem.getName() + "> child: "+ child);      }    }  }}  }
class C{  public void load(int AD_Workflow_ID){  log.fine("AD_Workflow_ID=" + AD_Workflow_ID);  if (AD_Workflow_ID == 0)   return;  int AD_Client_ID=Env.getAD_Client_ID(Env.getCtx());  m_wf=new MWorkflow(Env.getCtx(),AD_Workflow_ID,null);  nodeContainer.removeAll();  nodeContainer.setWorkflow(m_wf);  MWFNode[] nodes=m_wf.getNodes(true,AD_Client_ID);  for (int i=0; i < nodes.length; i++) {    WFNode wfn=new WFNode(nodes[i]);    nodeContainer.add(wfn);    MWFNodeNext[] nexts=nodes[i].getTransitions(AD_Client_ID);    for (int j=0; j < nexts.length; j++)     nodeContainer.add(new WFLine(nexts[j]));  }  Dimension dimension=nodeContainer.getDimension();  BufferedImage bi=new BufferedImage(dimension.width + 2,dimension.height + 2,BufferedImage.TYPE_INT_ARGB);  nodeContainer.paint(bi.createGraphics());  ByteArrayOutputStream os=new ByteArrayOutputStream();  try {    ImageIO.write(bi,"png",os);    AImage imageContent=new AImage("workflow.png",os.toByteArray());    Imagemap image=new Imagemap();    image.setWidth(dimension.width + "px");    image.setHeight(dimension.height + "px");    image.setContent(imageContent);    contentPanel.appendChild(image);    image.addEventListener(Events.ON_CLICK,this);    for (    WFNode node : nodeContainer.getNodes()) {      Area area=new Area();      Rectangle rect=node.getBounds();      area.setCoords(rect.x + "," + rect.y+ ","+ (rect.x + rect.width)+ ","+ (rect.y + rect.height));      image.appendChild(area);      area.setId("WFN_" + node.getAD_WF_Node_ID());      StringBuffer tooltip=new StringBuffer();      String s=node.getNode().getDescription(true);      if (s != null && s.trim().length() > 0)       tooltip.append(s);      String h=node.getNode().getHelp(true);      if (h != null && h.trim().length() > 0) {        if (tooltip.length() > 0)         tooltip.append(". ");        tooltip.append(h);      }      area.setTooltiptext(tooltip.toString());    }  } catch (  Exception e) {    log.log(Level.SEVERE,e.getLocalizedMessage(),e);  }  StringBuffer msg=new StringBuffer("");  msg.append("<H2>").append(m_wf.getName(true)).append("</H2>");  String s=m_wf.getDescription(true);  if (s != null && s.length() > 0)   msg.append("<B>").append(s).append("</B>");  s=m_wf.getHelp(true);  if (s != null && s.length() > 0)   msg.append("<BR>").append(s);  infoTextPane.setContent(msg.toString());}  }
class C{  public void generateCode(BlockScope currentScope){  if ((this.bits & ASTNode.IsReachable) == 0) {    return;  }  BranchLabel actionLabel=new BranchLabel();  if (this.action != null)   actionLabel.tagBits|=BranchLabel.USED;  boolean hasContinueLabel=this.continueLabel != null;  if (this.action != null) {    this.action.generateCode(currentScope);  }  if (hasContinueLabel) {    Constant cst=this.condition.optimizedBooleanConstant();    boolean isConditionOptimizedFalse=cst != Constant.NotAConstant && cst.booleanValue() == false;    if (isConditionOptimizedFalse) {      this.condition.generateCode(currentScope,false);    } else {      this.condition.generateOptimizedBoolean(currentScope,actionLabel,null,true);    }  }}  }
class C{  protected IOCapabilitiesStorage(){}  }
class C{  public boolean isDrawHighlightArrowEnabled(){  return mDrawHighlightArrow;}  }
class C{  private List<NetworkFCZoneInfo> generateRequestedZonesForExportMask(URI varrayURI,ExportGroup exportGroup,ExportMask exportMask,Collection<URI> volumeURIs,Map<String,List<Zone>> existingZonesMap,boolean checkZones) throws DeviceControllerException {  List<NetworkFCZoneInfo> zoneInfos=new ArrayList<NetworkFCZoneInfo>();  if (exportMask.getZoningMap() == null) {    _log.info(String.format("No zone map Export Mask %s (%s) systemCreated %s",exportMask.getMaskName(),exportMask.getId(),exportMask.getCreatedBySystem()));    return zoneInfos;  }  Set<Initiator> initiators=ExportMaskUtils.getInitiatorsForExportMask(_dbClient,exportMask,Transport.FC);  for (  Initiator initiator : initiators) {    StringSet portIds=exportMask.getZoningMap().get(initiator.getId().toString());    if (portIds != null) {      for (      String portId : portIds) {        StoragePort sp=_dbClient.queryObject(StoragePort.class,URI.create(portId));        if (null != sp && sp.getTaggedVirtualArrays() != null && sp.getTaggedVirtualArrays().contains(varrayURI.toString())) {          boolean placedZone=placeZone(zoneInfos,exportGroup,varrayURI,initiator,sp,volumeURIs,existingZonesMap.get(initiator.getInitiatorPort()),checkZones);          if (placedZone == false && checkZones) {            throw DeviceControllerException.exceptions.cannotMatchSanStoragePortInitiatorForVolume(sp.getPortName(),formatWWN(initiator.getInitiatorPort()),volumeURIs.toString());          }        }      }    }  }  return zoneInfos;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.CATCH_VARIABLE__BINDING_PATTERN:    setBindingPattern((BindingPattern)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public void testMoveDirectoryDestinationRootSourceMissingPartially() throws Exception {  create(igfsSecondary,paths(DIR,SUBDIR,SUBSUBDIR),null);  create(igfs,paths(DIR),null);  igfs.rename(SUBSUBDIR,IgfsPath.ROOT);  checkExist(igfs,SUBDIR);  checkExist(igfs,igfsSecondary,new IgfsPath("/" + SUBSUBDIR.name()));  checkNotExist(igfs,igfsSecondary,SUBSUBDIR);}  }
class C{  public void resolve(Resolution resolution){  resolvedSubject=resolveToIvOrError(resolution.subject(),"subject");  resolvedLabelType=resolveToIvOrError(resolution.labelType(),"label type");  if (resolvedSubject == null || resolvedLabelType == null) {    return;  }  fillBestLabels();  IV label=pickOrBuildBestLabel();  if (label != null) {    binding.set(resolution.target(),new Constant(label));  }}  }
class C{  public Gm3ImportTask(Gm3Import importItem,GmDataExportType gmDataExportType){  super(importItem);  this.gmDataExportType=gmDataExportType;}  }
class C{  private EndpointType resolveEndpointType(IBindingSet bs){  String endpointTypeStr=resolveAsString(endpointType,bs);  if (endpointTypeStr == null) {    endpointTypeStr=defaults.getDefaultEndpointType();  }  if (endpointTypeStr != null && !endpointTypeStr.isEmpty()) {    try {      return EndpointType.valueOf(endpointTypeStr);    } catch (    Exception e) {      if (log.isDebugEnabled()) {        log.warn("Illegal endpoint type: " + endpointTypeStr + " -> will be ignored, using default.");      }    }  }  return FTS.Options.DEFAULT_ENDPOINT_TYPE;}  }
class C{  private static void bindPreferenceSummaryToValue(Preference preference){  preference.setOnPreferenceChangeListener(sBindPreferenceSummaryToValueListener);  sBindPreferenceSummaryToValueListener.onPreferenceChange(preference,PreferenceManager.getDefaultSharedPreferences(preference.getContext()).getString(preference.getKey(),""));}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  protected CriterionFilterOperation buildCriterionFilterOperation(Criteria criteria){  return new CriterionFilterOperation(criteria);}  }
class C{  private void waitForThread(){  if ((this.thread != null) && this.thread.isAlive()) {    try {      this.thread.join();    } catch (    final InterruptedException e) {      e.printStackTrace();    }  }}  }
class C{  private static Map<String,ShortcutItem> figureVisibleShortcuts(final PwmRequest pwmRequest) throws PwmUnrecoverableException, ChaiUnavailableException {  final Collection<String> configValues=pwmRequest.getConfig().readSettingAsLocalizedStringArray(PwmSetting.SHORTCUT_ITEMS,pwmRequest.getLocale());  final Set<String> labelsFromHeader=new HashSet<>();{    final Map<String,List<String>> headerValueMap=pwmRequest.readHeaderValuesMap();    final List<String> interestedHeaderNames=pwmRequest.getConfig().readSettingAsStringArray(PwmSetting.SHORTCUT_HEADER_NAMES);    for (    final String headerName : headerValueMap.keySet()) {      if (interestedHeaderNames.contains(headerName)) {        for (        final String loopValues : headerValueMap.get(headerName)) {          labelsFromHeader.addAll(StringHelper.tokenizeString(loopValues,","));        }      }    }  }  final List<ShortcutItem> configuredItems=new ArrayList<>();  for (  final String loopStr : configValues) {    final ShortcutItem item=ShortcutItem.parsePwmConfigInput(loopStr);    configuredItems.add(item);  }  final Map<String,ShortcutItem> visibleItems=new LinkedHashMap<>();  if (!labelsFromHeader.isEmpty()) {    LOGGER.trace("detected the following labels from headers: " + StringHelper.stringCollectionToString(labelsFromHeader,","));    visibleItems.keySet().retainAll(labelsFromHeader);  } else {    for (    final ShortcutItem item : configuredItems) {      final boolean queryMatch=LdapPermissionTester.testQueryMatch(pwmRequest.getPwmApplication(),pwmRequest.getSessionLabel(),pwmRequest.getPwmSession().getUserInfoBean().getUserIdentity(),item.getLdapQuery());      if (queryMatch) {        visibleItems.put(item.getLabel(),item);      }    }  }  return visibleItems;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.TMEMBER__ANNOTATIONS:    getAnnotations().clear();  return;case TypesPackage.TMEMBER__AST_ELEMENT:setAstElement((EObject)null);return;case TypesPackage.TMEMBER__DECLARED_FINAL:setDeclaredFinal(DECLARED_FINAL_EDEFAULT);return;case TypesPackage.TMEMBER__DECLARED_STATIC:setDeclaredStatic(DECLARED_STATIC_EDEFAULT);return;case TypesPackage.TMEMBER__DECLARED_OVERRIDE:setDeclaredOverride(DECLARED_OVERRIDE_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public synchronized void error(String s,Parameter p1){  println(a("ERROR:\n" + s),ALL_MESSAGE_LOGS,true);  if (p1 != null)   println(a("PARAMETER: " + p1),ALL_MESSAGE_LOGS,true);  errors=true;}  }
class C{  public RefCounted<SolrIndexSearcher> openNewSearcher(boolean updateHandlerReopens,boolean realtime){  if (isClosed()) {    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"openNewSearcher called on closed core");  }  SolrIndexSearcher tmp;  RefCounted<SolrIndexSearcher> newestSearcher=null;  boolean nrt=solrConfig.nrtMode && updateHandlerReopens;  openSearcherLock.lock();  try {    String newIndexDir=getNewIndexDir();    String indexDirFile=null;    String newIndexDirFile=null;    if (!nrt) {      indexDirFile=getDirectoryFactory().normalize(getIndexDir());      newIndexDirFile=getDirectoryFactory().normalize(newIndexDir);    }synchronized (searcherLock) {      newestSearcher=realtimeSearcher;      if (newestSearcher != null) {        newestSearcher.incref();      }    }    if (newestSearcher != null && (nrt || indexDirFile.equals(newIndexDirFile))) {      DirectoryReader newReader;      DirectoryReader currentReader=newestSearcher.get().getIndexReader();      RefCounted<IndexWriter> writer=getUpdateHandler().getSolrCoreState().getIndexWriter(null);      try {        if (writer != null && solrConfig.nrtMode) {          newReader=DirectoryReader.openIfChanged(currentReader,writer.get(),true);        } else {          newReader=DirectoryReader.openIfChanged(currentReader);        }      }  finally {        if (writer != null) {          writer.decref();        }      }      if (newReader == null) {        if (realtime) {          newestSearcher.incref();          return newestSearcher;        } else         if (newestSearcher.get().isCachingEnabled() && newestSearcher.get().getSchema() == getLatestSchema()) {          newestSearcher.incref();          log.info("SolrIndexSearcher has not changed - not re-opening: " + newestSearcher.get().getName());          return newestSearcher;        }        currentReader.incRef();        newReader=currentReader;      }      final boolean useCaches=!realtime;      final String newName=realtime ? "realtime" : "main";      tmp=new SolrIndexSearcher(this,newIndexDir,getLatestSchema(),getSolrConfig().indexConfig,newName,newReader,true,useCaches,true,directoryFactory);    } else {      if (newReaderCreator != null) {        DirectoryReader newReader=newReaderCreator.call();        tmp=new SolrIndexSearcher(this,newIndexDir,getLatestSchema(),getSolrConfig().indexConfig,(realtime ? "realtime" : "main"),newReader,true,!realtime,true,directoryFactory);      } else       if (solrConfig.nrtMode) {        RefCounted<IndexWriter> writer=getUpdateHandler().getSolrCoreState().getIndexWriter(this);        DirectoryReader newReader=null;        try {          newReader=indexReaderFactory.newReader(writer.get(),this);        }  finally {          writer.decref();        }        tmp=new SolrIndexSearcher(this,newIndexDir,getLatestSchema(),getSolrConfig().indexConfig,(realtime ? "realtime" : "main"),newReader,true,!realtime,true,directoryFactory);      } else {        tmp=new SolrIndexSearcher(this,newIndexDir,getLatestSchema(),getSolrConfig().indexConfig,"main",true,directoryFactory);      }    }    List<RefCounted<SolrIndexSearcher>> searcherList=realtime ? _realtimeSearchers : _searchers;    RefCounted<SolrIndexSearcher> newSearcher=newHolder(tmp,searcherList);    newSearcher.incref();synchronized (searcherLock) {      if (realtimeSearcher != null) {        realtimeSearcher.decref();      }      realtimeSearcher=newSearcher;      searcherList.add(realtimeSearcher);    }    return newSearcher;  } catch (  Exception e) {    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Error opening new searcher",e);  } finally {    openSearcherLock.unlock();    if (newestSearcher != null) {      newestSearcher.decref();    }  }}  }
class C{  public boolean dominates(Stmt s,Stmt t){  return ((FlowSet)getFlowBefore(t)).contains(s);}  }
class C{  public void push(final double value){  long bits=Double.doubleToLongBits(value);  if (bits == 0L || bits == 0x3ff0000000000000L) {    mv.visitInsn(Opcodes.DCONST_0 + (int)value);  } else {    mv.visitLdcInsn(new Double(value));  }}  }
class C{  public SelectionInputDialog(Window owner,String key,Collection<T> selectionValues,T initialSelectionValue,InputValidator<T> inputValidator,Object... keyArguments){  super(owner,"input." + key,ModalityType.APPLICATION_MODAL,keyArguments);  this.inputValidator=inputValidator;  this.okButton=makeOkButton();  for (  T selectionValue : selectionValues) {    comboBox.addItem(selectionValue);  }  comboBox.setSelectedItem(initialSelectionValue);  initGui();}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  public ByteVector putInt(final int i){  int length=this.length;  if (length + 4 > data.length) {    enlarge(4);  }  byte[] data=this.data;  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  this.length=length;  return this;}  }
class C{  public static PaymentDeregistrationException convertToApi(org.oscm.internal.types.exception.PaymentDeregistrationException oldEx){  return convertExceptionToApi(oldEx,PaymentDeregistrationException.class);}  }
class C{  public ServiceManager(Iterable<? extends Service> services){  ImmutableList<Service> copy=ImmutableList.copyOf(services);  if (copy.isEmpty()) {    logger.log(Level.WARNING,"ServiceManager configured with no services.  Is your application configured properly?",new EmptyServiceManagerWarning());    copy=ImmutableList.<Service>of(new NoOpService());  }  this.state=new ServiceManagerState(copy);  this.services=copy;  WeakReference<ServiceManagerState> stateReference=new WeakReference<ServiceManagerState>(state);  for (  Service service : copy) {    service.addListener(new ServiceListener(service,stateReference),directExecutor());    checkArgument(service.state() == NEW,"Can only manage NEW services, %s",service);  }  this.state.markReady();}  }
class C{  public void uploadLogDelay(Context context,int delayMillis){  EventManager.uploadLog(context);}  }
class C{  static void dumpNodes(final IndexSegmentStore store,final Node node,final boolean dumpNodeState){  if (dumpNodeState)   node.dump(System.out);  final int nkeys=node.getKeyCount();  for (int i=0; i <= nkeys; i++) {    final long addr=node.getChildAddr(i);    if (store.getAddressManager().isNodeAddr(addr)) {      final Node child=(Node)node.getChild(i);      dumpNodes(store,child,dumpNodeState);    }  }}  }
class C{  public static IMultiPoint[] copyOf(IMultiPoint[] original,int newLength){  IMultiPoint[] copy=new IMultiPoint[newLength];  System.arraycopy(original,0,copy,0,Math.min(original.length,newLength));  return copy;}  }
class C{  public ListNdoe addTwoNumbers(ListNode l1,ListNode l2){  ListNode c1=l1;  ListNode c2=l2;  ListNode pre=new ListNode(0);  ListNode d=pre;  int sum=0;  while (c1 != null || c2 != null) {    if (c1 != null) {      sum+=c1.val;      c1=c1.next;    }    if (c2 != null) {      sum+=c2.val;      c2=c2.next;    }    d.next=new ListNode(sum % 10);    sum/=10;    d=d.next;  }  if (sum == 1)   d.next=new ListNode(1);  return pre.next;}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  @SuppressWarnings("deprecation") static HttpUriRequest createHttpRequest(Request<?> request,Map<String,String> additionalHeaders) throws AuthFailureError {switch (request.getMethod()) {case Method.DEPRECATED_GET_OR_POST:{      byte[] postBody=request.getPostBody();      if (postBody != null) {        HttpPost postRequest=new HttpPost(request.getUrl());        postRequest.addHeader(HEADER_CONTENT_TYPE,request.getPostBodyContentType());        HttpEntity entity;        entity=new ByteArrayEntity(postBody);        postRequest.setEntity(entity);        return postRequest;      } else {        return new HttpGet(request.getUrl());      }    }case Method.GET:  return new HttpGet(request.getUrl());case Method.DELETE:return new HttpDelete(request.getUrl());case Method.POST:{HttpPost postRequest=new HttpPost(request.getUrl());postRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(postRequest,request);return postRequest;}case Method.PUT:{HttpPut putRequest=new HttpPut(request.getUrl());putRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(putRequest,request);return putRequest;}case Method.HEAD:return new HttpHead(request.getUrl());case Method.OPTIONS:return new HttpOptions(request.getUrl());case Method.TRACE:return new HttpTrace(request.getUrl());case Method.PATCH:{HttpPatch patchRequest=new HttpPatch(request.getUrl());patchRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(patchRequest,request);return patchRequest;}default :throw new IllegalStateException("Unknown request method.");}}  }
class C{  @Override public void doWork() throws OperatorException {  ExampleSet exampleSet=exampleSetInput.getData(ExampleSet.class);  if (exampleSet.getAttributes().getLabel() == null) {    throw new UserError(this,105);  }  if (exampleSet.getAttributes().size() == 0) {    throw new UserError(this,106);  }  if (exampleSet.size() == 0) {    throw new UserError(this,117);  }  CapabilityCheck check=new CapabilityCheck(this,Tools.booleanValue(ParameterService.getParameterValue(PROPERTY_RAPIDMINER_GENERAL_CAPABILITIES_WARN),true) || onlyWarnForNonSufficientCapabilities());  check.checkLearnerCapabilities(this,exampleSet);  Model model=learn(exampleSet);  modelOutput.deliver(model);  if (canCalculateWeights() && weightsOutput.isConnected()) {    AttributeWeights weights=getWeights(exampleSet);    if (weights != null) {      weightsOutput.deliver(weights);    }  }  if (canEstimatePerformance() && performanceOutput.isConnected()) {    PerformanceVector perfVector=null;    if (shouldDeliverOptimizationPerformance()) {      perfVector=getOptimizationPerformance();    } else {      perfVector=getEstimatedPerformance();    }    performanceOutput.deliver(perfVector);  }  exampleSetOutput.deliver(exampleSet);}  }
class C{  private ArrowBuf allocate(int nBytes){  assertOpen();  boolean success=false;  try {    final ArrowBuf arrowBuf=BaseAllocator.this.bufferWithoutReservation(nBytes,null);    if (DEBUG) {      historicalLog.recordEvent("allocate() => %s",String.format("ArrowBuf[%d]",arrowBuf.getId()));    }    success=true;    return arrowBuf;  }  finally {    if (!success) {      releaseBytes(nBytes);    }  }}  }
class C{  public KeyValueTableView(List<Pair<K,V>> items){  this(FXCollections.observableArrayList(items),FXCollections.observableArrayList(new ArrayList<K>()),null,null);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public JDistinguishedName(String title,int columns,boolean editable){  this.title=title;  this.editable=editable;  initComponents(columns);}  }
class C{  public boolean isEmpty(){  return count == 0;}  }
class C{  public Matrix4x3f m12(float m12){  this.m12=m12;  properties&=~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);  return this;}  }
class C{  public Builder(String urn){  this.urn=urn;}  }
class C{  public boolean isPosted(){  Object oo=get_Value(COLUMNNAME_Posted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void changeState(){  down=!down;  ddTriangle.setState(down);  removeAll();  initLayout();  repaint();}  }
class C{  public static String decodeDummyMarkerFromPropertyInfo(String possibleDummyMarker){  if (possibleDummyMarker != null && possibleDummyMarker.startsWith(DUMMY_MARKER_NAME)) {    int lastDot=possibleDummyMarker.lastIndexOf(".");    if (lastDot != -1) {      possibleDummyMarker=possibleDummyMarker.substring(lastDot + 1);    }  }  return possibleDummyMarker;}  }
class C{  protected boolean requiresFree(){  return (nativeRawStartAddress_ != 0L) && (byteBuf_ == null);}  }
class C{  public void writeTag(String tag,int value){  writeTag(tag,Integer.toString(value));}  }
class C{  public void startTime(long startTime){  this.startTime=startTime;}  }
class C{  public Map<String,String> map(){  return hashMap();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static boolean verifyEscaped(final char[] original){  for (int i=0; i < original.length; i++) {    final int c=original[i];    if (c > 128) {      return false;    } else     if (c == '%') {      if (Character.digit(original[++i],16) == -1 || Character.digit(original[++i],16) == -1) {        return false;      }    }  }  return true;}  }
class C{  @SuppressWarnings(SUPPRESS_UNCHECKED) public static Specification toSpecification(Vector<Object> xmlRpcParameters){  Specification specification=null;  if (!xmlRpcParameters.isEmpty()) {    log.debug("Extracting specification from XML-RPC parameters %s",xmlRpcParameters);    specification=Specification.newInstance((String)xmlRpcParameters.get(DOCUMENT_NAME_IDX));    specification.setRepository(toRepository((Vector<Object>)xmlRpcParameters.get(DOCUMENT_REPOSITORY_IDX)));    specification.setTargetedSystemUnderTests(toSystemUnderTestList((Vector<Object>)xmlRpcParameters.get(SPECIFICATION_SUTS_IDX)));  }  return specification;}  }
class C{  public static void convertActivityToTranslucentBeforeL(Activity activity){  try {    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method method=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz);    method.setAccessible(true);    method.invoke(activity,new Object[]{null});  } catch (  Throwable t) {  }}  }
class C{  private void updateError(){  errorBar.setValue((int)(numTicks * trainer.getError()));  errorBar.setString("" + Utils.round(trainer.getError(),4));}  }
class C{  public SendRequest(long trackId){  this.trackId=trackId;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.587 -0400",hash_original_method="D44D3BD1C996D71F3A5411E7F03049D1",hash_generated_method="44C2A17845AF6CAAB64453C0D8C21AEE") public static Thread start(Thread thread,long timeout){  Thread monitor=null;  if (timeout > 0) {    ThreadMonitor timout=new ThreadMonitor(thread,timeout);    monitor=new Thread(timout,ThreadMonitor.class.getSimpleName());    monitor.setDaemon(true);    monitor.start();  }  return monitor;}  }
class C{  protected void writeAttributes(AttributeSet attr) throws IOException {  Enumeration attributeNames=attr.getAttributeNames();  while (attributeNames.hasMoreElements()) {    Object name=attributeNames.nextElement();    if ((name instanceof StyleConstants.ParagraphConstants) || (name instanceof StyleConstants.CharacterConstants) || (name instanceof StyleConstants.FontConstants)|| (name instanceof StyleConstants.ColorConstants)) {      indent();      write(name.toString());      write(':');      write(css.styleConstantsValueToCSSValue((StyleConstants)name,attr.getAttribute(name)).toString());      write(';');      write(NEWLINE);    }  }}  }
class C{  public void skip(){  if (trackQueue.size() > 0) {    Track track=trackQueue.remove(0);    if (track.isReady() && track.getCurrentTrackTime() == track.getTotalTrackTime()) {      client.getDispatcher().dispatch(new TrackSkipEvent(this,track));    }    if (isLooping()) {      track.rewindTo(0);      trackQueue.add(track);    } else {      track.close();    }  }}  }
class C{  public void readAndParse(Projection proj,OMGridGenerator generator,Layer layer) throws IOException {  LinkOMGraphicList graphics=new LinkOMGraphicList();  graphicList=null;  mapRequest=null;  actionRequest=null;  actionList=null;  guiRequest=null;  guiList=null;  closeLink=false;  String delimiter=null;  if (Debug.debugging("link")) {    System.out.println("Link|readAndParse: listening to link:");    System.out.println((proj == null ? " without " : " with ") + "a projection and");    System.out.println((layer == null ? " without " : " with ") + "a layer");  }  while (true) {    delimiter=readDelimiter(true);    if (Debug.debugging("link")) {      System.out.println("Link:reading section: " + delimiter);    }    if (delimiter == GRAPHICS_HEADER) {      if (layer != null) {        graphicList=new LinkGraphicList(this,graphics,layer.getProjection(),generator);      } else {        graphicList=new LinkGraphicList(this,graphics,proj,generator);      }      delimiter=graphicList.getLinkStatus();    } else     if (delimiter == ACTIONS_HEADER) {      actionList=new LinkActionList(this,layer,proj,generator);      delimiter=actionList.getLinkStatus();    } else     if (delimiter == GUI_HEADER) {      guiList=new LinkGUIList(this);      delimiter=guiList.getLinkStatus();    } else     if (delimiter == CLOSE_LINK_HEADER) {      closeLink=true;    } else     if (delimiter == SHUTDOWN_HEADER) {      Debug.message("link","Link.received command to exit");      if (obeyCommandToExit) {        System.exit(0);      }    } else     if (delimiter == HUH_HEADER) {      delimiter=readDelimiter(true);    } else     if (delimiter == MAP_REQUEST_HEADER) {      mapRequest=new LinkMapRequest(this);      delimiter=mapRequest.getLinkStatus();    } else     if (delimiter == ACTION_REQUEST_HEADER) {      actionRequest=new LinkActionRequest(this);      delimiter=actionRequest.getLinkStatus();    } else     if (delimiter == GUI_REQUEST_HEADER) {      guiRequest=new LinkGUIRequest(this);      delimiter=guiRequest.getLinkStatus();    } else     if (delimiter == PING_REQUEST_HEADER) {      start(PING_RESPONSE_HEADER);      end(END_TOTAL);      delimiter=readDelimiter(false);    }    if (delimiter == END_TOTAL) {      return;    }  }}  }
class C{  public TwitterStreamFactory(){  this(StreamConfigurationContext.getInstance());}  }
class C{  public void logWarn(Object message,Throwable exception){  logInternal(WARN,message,exception);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public final synchronized void insert(final K s,final V v){  if (this.levelB.containsKey(s)) {    this.levelB.put(s,v);    assert (this.levelB.size() <= this.cacheSize);  } else {    this.levelA.put(s,v);    assert (this.levelA.size() <= this.cacheSize);  }}  }
class C{  public void mapInputToOutput(ValueNumber input,ValueNumber output){  BitSet inputSet=getInputSet(output);  inputSet.set(input.getNumber());  if (DEBUG) {    System.out.println(input.getNumber() + "->" + output.getNumber());    System.out.println("Input set for " + output.getNumber() + " is now "+ inputSet);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public PDFPage(RectF bbox,int rotation){  this(-1,bbox,rotation,null);}  }
class C{  @Override public int hashCode(){  return value == null ? 0 : value.hashCode();}  }
class C{  @Override protected Class<?> resolveClass(final ObjectStreamClass desc) throws IOException, ClassNotFoundException {  final String name=desc.getName();  try {    return Class.forName(name,false,classLoader);  } catch (  final ClassNotFoundException ex) {    try {      return Class.forName(name,false,Thread.currentThread().getContextClassLoader());    } catch (    final ClassNotFoundException cnfe) {      final Class<?> cls=primitiveTypes.get(name);      if (cls != null) {        return cls;      }      throw cnfe;    }  }}  }
class C{  public boolean isApproved(){  Object oo=get_Value(COLUMNNAME_IsApproved);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean containsSubqueryRoot(final SubqueryRoot sqr){  return filterMap.keySet().contains(sqr);}  }
class C{  public static void show(){  defer=false;  draw();}  }
class C{  public double nextDoubleFromTo(double from,double to){  return from + (to - from) * randomGenerator.raw();}  }
class C{  public Point createPoint(Coordinate coordinate){  return createPoint(coordinate != null ? getCoordinateSequenceFactory().create(new Coordinate[]{coordinate}) : null);}  }
class C{  @HLEFunction(nid=0xAA73C935,version=150,checkInsideInterrupt=true) public int sceKernelExitThread(int exitStatus){  if (!isDispatchThreadEnabled() && Modules.SysMemUserForUserModule.hleKernelGetCompiledSdkVersion() > 0x0307FFFF) {    return SceKernelErrors.ERROR_KERNEL_WAIT_CAN_NOT_WAIT;  }  SceKernelThreadInfo thread=currentThread;  if (exitStatus < 0) {    thread.setExitStatus(ERROR_KERNEL_ILLEGAL_ARGUMENT);  } else {    thread.setExitStatus(exitStatus);  }  triggerThreadEvent(thread,currentThread,THREAD_EVENT_EXIT);  hleChangeThreadState(thread,PSP_THREAD_STOPPED);  RuntimeContext.onThreadExit(thread);  hleRescheduleCurrentThread();  return 0;}  }
class C{  public static boolean isRpExportMask(UnManagedExportMask uem,DbClient dbClient){  for (  String wwn : uem.getKnownInitiatorNetworkIds()) {    List<URI> protectionSystemUris=dbClient.queryByType(ProtectionSystem.class,true);    List<ProtectionSystem> protectionSystems=dbClient.queryObject(ProtectionSystem.class,protectionSystemUris);    for (    ProtectionSystem protectionSystem : protectionSystems) {      for (      Entry<String,AbstractChangeTrackingSet<String>> siteInitEntry : protectionSystem.getSiteInitiators().entrySet()) {        if (siteInitEntry.getValue().contains(wwn)) {          _logger.info("this is a RecoverPoint related UnManagedExportMask: " + uem.getMaskName());          return true;        }      }    }  }  return false;}  }
class C{  public void startFlipping(){  mStarted=true;  updateRunning();}  }
class C{  public boolean isAutoSetRegularization(){  return autoSetRegularization;}  }
class C{  public SBS(int minFeatures,int maxFeatures,ClassificationDataSet cds,Classifier evaluater,int folds,double maxDecrease){  this(minFeatures,maxFeatures,evaluater,folds,maxDecrease);  search(cds,evaluater,minFeatures,maxFeatures,folds);}  }
class C{  public WikibasePoint(String literalString,CoordinateOrder coordOrder){  if (literalString.charAt(0) == '<') {    int endURI=literalString.indexOf('>');    if (endURI <= 2) {      throw new IllegalArgumentException("Invalid format for the WKT value");    }    globe=literalString.substring(1,endURI);    literalString=literalString.substring(endURI + 2);  } else {    globe=null;  }  literalString=literalString.trim();  if (!literalString.toLowerCase(Locale.ROOT).startsWith("point(") || !literalString.endsWith(")")) {    throw new IllegalArgumentException("Invalid format for the WKT value");  }  String[] coords=literalString.substring(6,literalString.length() - 1).split("[\\s,]");  if (coords.length != 2) {    throw new IllegalArgumentException("Invalid format for the WKT value");  }  if (coordOrder == CoordinateOrder.LAT_LONG) {    latitude=coords[0];    longitude=coords[1];  } else {    longitude=coords[0];    latitude=coords[1];  }}  }
class C{  protected Anonymous_traceEntity_1_Impl(){  super();}  }
class C{  public DOMNodeRemovedListenerWrapper(CSSNavigableDocumentListener l){  listener=l;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:51.223 -0500",hash_original_method="25D0039F966FF4332DD9B5E2415DB39B",hash_generated_method="F48DB99B681DDF490E22197D3DBE5DCB") public final static VersionInfo loadVersionInfo(final String pckg,ClassLoader clsldr){  if (pckg == null) {    throw new IllegalArgumentException("Package identifier must not be null.");  }  if (clsldr == null)   clsldr=Thread.currentThread().getContextClassLoader();  Properties vip=null;  try {    InputStream is=clsldr.getResourceAsStream(pckg.replace('.','/') + "/" + VERSION_PROPERTY_FILE);    if (is != null) {      try {        Properties props=new Properties();        props.load(is);        vip=props;      }  finally {        is.close();      }    }  } catch (  IOException ex) {  }  VersionInfo result=null;  if (vip != null)   result=fromMap(pckg,vip,clsldr);  return result;}  }
class C{  public boolean isInterMethodPair(){  return type.equals(DefUsePairType.INTER_METHOD);}  }
class C{  RSAPrivateKeyImpl(BigInteger n,BigInteger d) throws InvalidKeyException {  this.n=n;  this.d=d;  RSAKeyFactory.checkRSAProviderKeyLengths(n.bitLength(),null);  algid=RSAPrivateCrtKeyImpl.rsaId;  try {    DerOutputStream out=new DerOutputStream();    out.putInteger(0);    out.putInteger(n);    out.putInteger(0);    out.putInteger(d);    out.putInteger(0);    out.putInteger(0);    out.putInteger(0);    out.putInteger(0);    out.putInteger(0);    DerValue val=new DerValue(DerValue.tag_Sequence,out.toByteArray());    key=val.toByteArray();  } catch (  IOException exc) {    throw new InvalidKeyException(exc);  }}  }
class C{  public AddNeuronsAction(final NetworkPanel networkPanel){  super("Add Neurons...");  if (networkPanel == null) {    throw new IllegalArgumentException("networkPanel must not be null");  }  this.networkPanel=networkPanel;  putValue(SHORT_DESCRIPTION,"Add a set of neurons to the network");}  }
class C{  public static void escapeXml(CharSequence s,boolean asciiOnly,Appendable out) throws IOException {  new Escaper(s,XML_ESCAPES,asciiOnly ? NO_NON_ASCII : PROBLEMATIC_XML,XML_ENCODER,out).escape();}  }
class C{  public boolean hasAnyCapability(String... capabilities){  for (  DeviceService service : services.values()) {    if (service.hasAnyCapability(capabilities))     return true;  }  return false;}  }
class C{  private void assertNotClosed(){  if (closed) {    throw new IllegalStateException("CacheManager " + uri + " is already closed");  }}  }
class C{  protected int readIdentifier(String s,int type,int ntype) throws IOException, XMLException {  int len=s.length();  for (int i=0; i < len; i++) {    nextChar();    if (current != s.charAt(i)) {      if (ntype == -1) {        throw createXMLException("invalid.character");      } else {        while (current != -1 && XMLUtilities.isXMLNameCharacter((char)current)) {          nextChar();        }        return ntype;      }    }  }  nextChar();  return type;}  }
class C{  public PromptsBuilder prompts(){  return new PromptsBuilder(this);}  }
class C{  public boolean isEnrichCallingServiceSupported(){  return readBoolean(RcsSettingsData.ENRICH_CALLING_SERVICE);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:11.411 -0500",hash_original_method="7F9DD2505076B3CAC6687DC8D86BE7DC",hash_generated_method="540A811DA2E9D75A3921F5A4DB794384") protected boolean isFatalAlert(){  return (alert[0] == 2);}  }
class C{  public static JsonObject buildStorageConfig(){  return ModuleConfiguration.with().storageType(ModuleConfiguration.StorageType.redis).storageAddress(Address.storageAddress() + "-main").build().asJsonObject();}  }
class C{  public void gallery(){  Intent intent=new Intent();  intent.setType("image/*");  intent.setAction(Intent.ACTION_GET_CONTENT);  intent.addCategory(Intent.CATEGORY_OPENABLE);  startActivityForResult(intent,REQUEST_CODE_ATTACH_IMAGE);}  }
class C{  public synchronized void releaseConnection(LogConnection client){  if (cursors == null)   logger.warn("Attempt to free connection after manager is done: client=" + client); else {    LogCursor logCursor=cursors.get(client);    if (logCursor != null) {      if (logger.isDebugEnabled()) {        logger.debug("Releasing log cursor: file=" + logCursor.getLogFile().getFile().getName() + " client="+ client);      }      logCursor.release();      cursors.remove(client);    }  }}  }
class C{  public String toStringFull(){  StringBuilder sb=new StringBuilder(toString());  sb.append("\n Written:\n");  for (  PngChunk chunk : getChunks()) {    sb.append(chunk).append(" G=" + chunk.getChunkGroup() + "\n");  }  if (!queuedChunks.isEmpty()) {    sb.append(" Queued:\n");    for (    PngChunk chunk : queuedChunks) {      sb.append(chunk).append("\n");    }  }  return sb.toString();}  }
class C{  public static String serialize(Serializable o) throws IOException {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  serialize(o,baos);  return Base64Coder.encode(baos.toByteArray());}  }
class C{  public final int hashCode(){  return hashCode.hashCode();}  }
class C{  @org.junit.Test public void testCorrection(){  Bot bot=Bot.createInstance();  TextEntry text=bot.awareness().getSense(TextEntry.class);  List<String> output=registerForOutput(text);  text.input("hello there");  String response=waitForOutput(output);  text.input(new TextInput("hey there",true,false));  response=waitForOutput(output);  text.input("noloop");  response=waitForOutput(output);  text.input("hello there");  response=waitForOutput(output);  if (!response.equals("hey there")) {    fail("did not correct:" + response);  }  bot.shutdown();}  }
class C{  public List<InstrumentVoucher> updateInstrumentVoucher(final List<Map<String,Object>> paramList){  final List<InstrumentVoucher> instrumentVoucherList=instrumentService.updateInstrumentVoucherReference(paramList);  return instrumentVoucherList;}  }
class C{  @Override public boolean checkAESKey(KeyParameter aesKey){  lock.lock();  try {    if (hashToKeys.isEmpty())     return false;    checkState(keyCrypter != null,"Key chain is not encrypted");    ECKey first=null;    for (    ECKey key : hashToKeys.values()) {      if (key.isEncrypted()) {        first=key;        break;      }    }    checkState(first != null,"No encrypted keys in the wallet");    try {      ECKey rebornKey=first.decrypt(aesKey);      return Arrays.equals(first.getPubKey(),rebornKey.getPubKey());    } catch (    KeyCrypterException e) {      return false;    }  }  finally {    lock.unlock();  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.METHOD_BODY___ANONYMOUS_METHOD_BODY_11:    return ((InternalEList<?>)getAnonymous_methodBody_1_1()).basicRemove(otherEnd,msgs);case UmplePackage.METHOD_BODY___ANONYMOUS_METHOD_BODY_21:  return ((InternalEList<?>)getAnonymous_methodBody_2_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static Container encloseY(Component... cmps){  return Container.encloseIn(new BoxLayout(BoxLayout.Y_AXIS),cmps);}  }
class C{  public boolean offerFirst(E e){  addFirst(e);  return true;}  }
class C{  public static PowerShellResponse executeSingleCommand(String command){  PowerShell session=null;  PowerShellResponse response=null;  try {    session=PowerShell.openSession();    response=session.executeCommand(command);  } catch (  PowerShellNotAvailableException ex) {    Logger.getLogger(PowerShell.class.getName()).log(Level.SEVERE,"PowerShell not available",ex);  } finally {    if (session != null) {      session.close();    }  }  return response;}  }
class C{  @Override public synchronized void remove(String key){  boolean deleted=getFileForKey(key).delete();  removeEntry(key);  if (!deleted) {    VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",key,getFilenameForKey(key));  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:12.249 -0500",hash_original_method="322B645C7F09570DF98848B1C3D767D8",hash_generated_method="7C1CDEC77E67281F51947C6E8EFC17AE") private void downloadStart(String url,String userAgent,String contentDisposition,String mimeType,long contentLength){  if (mimeType.isEmpty()) {    try {      String extension=url.substring(url.lastIndexOf('.') + 1);      mimeType=libcore.net.MimeUtils.guessMimeTypeFromExtension(extension);      if (mimeType == null)       mimeType="";    } catch (    IndexOutOfBoundsException exception) {    }  }  mimeType=MimeTypeMap.getSingleton().remapGenericMimeType(mimeType,url,contentDisposition);  if (CertTool.getCertType(mimeType) != null) {    mKeyStoreHandler=new KeyStoreHandler(mimeType);  } else {    mCallbackProxy.onDownloadStart(url,userAgent,contentDisposition,mimeType,contentLength);  }}  }
class C{  public float[] generateTransformedValuesScatter(List<? extends Entry> entries,float phaseY){  float[] valuePoints=new float[entries.size() * 2];  for (int j=0; j < valuePoints.length; j+=2) {    Entry e=entries.get(j / 2);    if (e != null) {      valuePoints[j]=e.getXIndex();      valuePoints[j + 1]=e.getVal() * phaseY;    }  }  getValueToPixelMatrix().mapPoints(valuePoints);  return valuePoints;}  }
class C{  private void startupAllStages(final int stageCount){  int j;  boolean isAnyRateLimited=false;  j=stageCount;  while (--j >= 0) {    if (null != stages[j]) {      GraphManager.initInputPipesAsNeeded(graphManager,stages[j].stageId);      isAnyRateLimited|=GraphManager.isRateLimited(graphManager,stages[j].stageId);    }  }  someAreRateLimited=isAnyRateLimited;  int unInitCount=stageCount;  while (unInitCount > 0) {    j=stageCount;    while (--j >= 0) {      final PronghornStage stage=stages[j];      if (null != stage && !GraphManager.isStageStarted(graphManager,stage.stageId)) {        GraphManager.initAllPipes(graphManager,stage.stageId);        try {          stage.startup();          GraphManager.setStateToStarted(graphManager,stage.stageId);          unInitCount--;        } catch (        Throwable t) {          recordTheException(stage,t,this);          try {            if (null != stage) {              stage.shutdown();            }          } catch (          Throwable tx) {            recordTheException(stage,tx,this);          } finally {            if (null != stage) {              GraphManager.setStateToShutdown(graphManager,stage.stageId);            }          }          return;        }      }    }  }  rates=new long[stageCount + 1];  lastRun=new long[stageCount + 1];  int idx=stageCount;  while (--idx >= 0) {    final PronghornStage stage=stages[idx];    if (null == GraphManager.getNota(graphManager,stage,GraphManager.UNSCHEDULED,null)) {      Object value=GraphManager.getNota(graphManager,stage,GraphManager.SCHEDULE_RATE,Long.valueOf(0));      long rate=value instanceof Number ? ((Number)value).longValue() : null == value ? 0 : Long.parseLong(value.toString());      if (0 == rate) {        rates[idx]=0;        lastRun[idx]=0;      } else {        rates[idx]=rate;        if (rate > maxRate) {          maxRate=rate;        }        lastRun[idx]=0;      }    } else {      rates[idx]=-1;      lastRun[idx]=0;    }  }}  }
class C{  protected static boolean isSubDelimiter(int c){switch (c) {case '!':case '$':case '&':case '\'':case '(':case ')':case '*':case '+':case ',':case ';':case '=':    return true;default :  return false;}}  }
class C{  public boolean hasVariableLengthArguments(){  if (knownArguments != null) {    for (    KnownArgument arg : knownArguments) {      if (arg.isVariableLength())       return true;    }    return false;  } else   return false;}  }
class C{  protected Size2D arrangeFF(BlockContainer container,Graphics2D g2,RectangleConstraint constraint){  return arrangeFN(container,g2,constraint);}  }
class C{  public Iterator<Location> locationIterator(){  return new LocationIterator();}  }
class C{  @Override public void apply(FaceletContext ctx,UIComponent parent) throws IOException {  UIViewRoot root=ComponentSupport.getViewRoot(ctx,parent);  if (root != null) {    if (this.renderKitId != null) {      String v=this.renderKitId.getValue(ctx);      root.setRenderKitId(v);    }    if (this.contentType != null) {      String v=this.contentType.getValue(ctx);      ctx.getFacesContext().getAttributes().put("facelets.ContentType",v);    }    if (this.encoding != null) {      String v=this.encoding.getValue(ctx);      ctx.getFacesContext().getAttributes().put(RIConstants.FACELETS_ENCODING_KEY,v);      root.getAttributes().put(RIConstants.FACELETS_ENCODING_KEY,v);    }    if (this.beforePhase != null) {      MethodExpression m=this.beforePhase.getMethodExpression(ctx,null,LISTENER_SIG);      root.setBeforePhaseListener(m);    }    if (this.afterPhase != null) {      MethodExpression m=this.afterPhase.getMethodExpression(ctx,null,LISTENER_SIG);      root.setAfterPhaseListener(m);    }    if (this.contracts != null) {      if (ctx.getFacesContext().getAttributes().containsKey("com.sun.faces.uiCompositionCount") && LOGGER.isLoggable(Level.INFO) && ctx.getFacesContext().getApplication().getProjectStage().equals(ProjectStage.Development)) {        LOGGER.log(Level.INFO,"f:view contracts attribute found, but not used at top level");      }      String contractsValue=this.contracts.getValue(ctx);      if (contractsValue != null) {        List<String> contractList=Arrays.asList(contractsValue.split(","));        ctx.getFacesContext().setResourceLibraryContracts(contractList);      }    }    if (this.transientFlag != null) {      Boolean b=Boolean.valueOf(this.transientFlag.getValue(ctx));      root.setTransient(b);    }    String viewId=root.getViewId();    assert (null != viewId);    assert (0 < viewId.length());  }  if (this.locale != null && root != null) {    try {      root.setLocale(ComponentSupport.getLocale(ctx,this.locale));    } catch (    TagAttributeException tae) {      Object result=this.locale.getObject(ctx);      if (null == result) {        Locale l=Locale.getDefault();        if (LOGGER.isLoggable(Level.WARNING)) {          LOGGER.log(Level.WARNING,"Using {0} for locale because expression {1} returned null.",new Object[]{l,this.locale.toString()});        }        root.setLocale(l);      }    }  }  this.nextHandler.apply(ctx,parent);}  }
class C{  public void delete(int key){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    if (mValues[i] != DELETED) {      mValues[i]=DELETED;      mGarbage=true;    }  }}  }
class C{  public EqualsBuilder append(char lhs,char rhs){  if (isEquals == false) {    return this;  }  isEquals=(lhs == rhs);  return this;}  }
class C{  protected static String quote(String s){  return StringUtils.quoteJavaString(s);}  }
class C{  public FieldAction(String name){  super(I18n.tr(name));}  }
class C{  public boolean isDrawBarShadowEnabled(){  return mDrawBarShadow;}  }
class C{  public static boolean isIndependentPooledTippett(List<IndependenceTest> independenceTests,Node x,Node y,List<Node> condSet){  double alpha=independenceTests.get(0).getAlpha();  double p=-1.0;  for (  IndependenceTest independenceTest : independenceTests) {    if (missingVariable(x,y,condSet,independenceTest))     continue;    List<Node> localCondSet=new ArrayList<>();    for (    Node node : condSet) {      localCondSet.add(independenceTest.getVariable(node.getName()));    }    independenceTest.isIndependent(independenceTest.getVariable(x.getName()),independenceTest.getVariable(y.getName()),localCondSet);    if (p == -1.0) {      p=independenceTest.getPValue();      continue;    }    double newp=independenceTest.getPValue();    if (newp < p) {      p=newp;    }  }  return (p > (1 - Math.pow(1 - alpha,(1 / (double)independenceTests.size()))));}  }
class C{  public void unlock(){  lockPositions(false);  this.locked=false;}  }
class C{  public boolean startDrag(int position,int deltaX,int deltaY){  int dragFlags=0;  if (mSortEnabled && !mIsRemoving) {    dragFlags|=DragSortListView.DRAG_POS_Y | DragSortListView.DRAG_NEG_Y;  }  if (mRemoveEnabled && mIsRemoving) {    dragFlags|=DragSortListView.DRAG_POS_X;    dragFlags|=DragSortListView.DRAG_NEG_X;  }  mDragging=mDslv.startDrag(position - mDslv.getHeaderViewsCount(),dragFlags,deltaX,deltaY);  return mDragging;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ASSOCIATION_CLASS_DEFINITION___ASSOCIATION_CLASS_CONTENT_1:    return ((InternalEList<?>)getAssociationClassContent_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private static void checkCompleteAndLicensed(){  if (isInitialSetupComplete() && isLicensed()) {    complete();  }  if (Security.isSystemAdminOrRestrictedSystemAdmin() == false && Security.isSecurityAdminOrRestrictedSecurityAdmin() == false) {    notLicensed();  }  if (!Common.isClusterStable()) {    Maintenance.maintenance(request.url);  }}  }
class C{  public void addAtt(Att att){  attributes.add(att);}  }
class C{  public void putByteArray(String key,byte[] value){  map.put(key,value);}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:15.030 -0500",hash_original_method="0FA3F000A20BF5722D4983CAD4B48A6A",hash_generated_method="0098083302FD036F72DFABFE27F96262") public BitmapDrawable(Resources res,Bitmap bitmap){  this(new BitmapState(bitmap),res);  mBitmapState.mTargetDensity=mTargetDensity;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case FunctionblockPackage.RETURN_OBJECT_TYPE__RETURN_TYPE:    return returnType != null;}return super.eIsSet(featureID);}  }
class C{  public SellerBehaviour(final Map<String,Integer> priceList){  super(priceList);}  }
class C{  private void writePrefix(int type,int length){  if (length >= lnIsVarLen) {    writeVarUInt(length);    length=lnIsVarLen;  }  int offset=myOffset;  if (--offset < 0) {    offset=growBuffer(offset);  }  myBuffer[offset]=(byte)(type | length);  myOffset=offset;}  }
class C{  @Override public void renderLimitLines(Canvas c){  List<LimitLine> limitLines=mXAxis.getLimitLines();  if (limitLines == null || limitLines.size() <= 0)   return;  float[] pts=new float[2];  Path limitLinePath=new Path();  for (int i=0; i < limitLines.size(); i++) {    LimitLine l=limitLines.get(i);    if (!l.isEnabled())     continue;    mLimitLinePaint.setStyle(Paint.Style.STROKE);    mLimitLinePaint.setColor(l.getLineColor());    mLimitLinePaint.setStrokeWidth(l.getLineWidth());    mLimitLinePaint.setPathEffect(l.getDashPathEffect());    pts[1]=l.getLimit();    mTrans.pointValuesToPixel(pts);    limitLinePath.moveTo(mViewPortHandler.contentLeft(),pts[1]);    limitLinePath.lineTo(mViewPortHandler.contentRight(),pts[1]);    c.drawPath(limitLinePath,mLimitLinePaint);    limitLinePath.reset();    String label=l.getLabel();    if (label != null && !label.equals("")) {      mLimitLinePaint.setStyle(l.getTextStyle());      mLimitLinePaint.setPathEffect(null);      mLimitLinePaint.setColor(l.getTextColor());      mLimitLinePaint.setStrokeWidth(0.5f);      mLimitLinePaint.setTextSize(l.getTextSize());      final float labelLineHeight=Utils.calcTextHeight(mLimitLinePaint,label);      float xOffset=Utils.convertDpToPixel(4f) + l.getXOffset();      float yOffset=l.getLineWidth() + labelLineHeight + l.getYOffset();      final LimitLine.LimitLabelPosition position=l.getLabelPosition();      if (position == LimitLine.LimitLabelPosition.RIGHT_TOP) {        mLimitLinePaint.setTextAlign(Align.RIGHT);        c.drawText(label,mViewPortHandler.contentRight() - xOffset,pts[1] - yOffset + labelLineHeight,mLimitLinePaint);      } else       if (position == LimitLine.LimitLabelPosition.RIGHT_BOTTOM) {        mLimitLinePaint.setTextAlign(Align.RIGHT);        c.drawText(label,mViewPortHandler.contentRight() - xOffset,pts[1] + yOffset,mLimitLinePaint);      } else       if (position == LimitLine.LimitLabelPosition.LEFT_TOP) {        mLimitLinePaint.setTextAlign(Align.LEFT);        c.drawText(label,mViewPortHandler.contentLeft() + xOffset,pts[1] - yOffset + labelLineHeight,mLimitLinePaint);      } else {        mLimitLinePaint.setTextAlign(Align.LEFT);        c.drawText(label,mViewPortHandler.offsetLeft() + xOffset,pts[1] + yOffset,mLimitLinePaint);      }    }  }}  }
class C{  private NodeSequence(DTMIterator iter,int context,XPathContext xctxt,boolean shouldCacheNodes){  setIter(iter);  setRoot(context,xctxt);  setShouldCacheNodes(shouldCacheNodes);}  }
class C{  private void updateCondition(final BreakpointManager manager,final int breakpointIndex,final String formula){  manager.setBreakpointCondition(breakpointIndex,formula);}  }
class C{  public static <V,E>DirectedGraph<V,E> unmodifiableDirectedGraph(DirectedGraph<V,E> graph){  return new UnmodifiableDirectedGraph<V,E>(graph);}  }
class C{  public static void xml(String xml){  createInstance();  printer.xml(xml);}  }
class C{  private static Document transformDescriptor(final RefactoringDescriptor descriptor,final boolean projects) throws CoreException {  final RefactoringSessionTransformer transformer=new RefactoringSessionTransformer(projects);  try {    transformer.beginSession(null,IRefactoringSerializationConstants.CURRENT_VERSION);    try {      final String id=descriptor.getID();      transformer.beginRefactoring(id,descriptor.getTimeStamp(),descriptor.getProject(),descriptor.getDescription(),descriptor.getComment(),descriptor.getFlags());      final Map arguments=getArgumentMap(descriptor);      if (arguments != null) {        checkArgumentMap(arguments);        for (final Iterator iterator=arguments.entrySet().iterator(); iterator.hasNext(); ) {          final Map.Entry entry=(Entry)iterator.next();          transformer.createArgument((String)entry.getKey(),(String)entry.getValue());        }      }    }  finally {      transformer.endRefactoring();    }  }  finally {    transformer.endSession();  }  return transformer.getResult();}  }
class C{  private void initializeLiveAttributes(){  x=createLiveAnimatedLength(null,SVG_X_ATTRIBUTE,SVG_PATTERN_X_DEFAULT_VALUE,SVGOMAnimatedLength.HORIZONTAL_LENGTH,false);  y=createLiveAnimatedLength(null,SVG_Y_ATTRIBUTE,SVG_PATTERN_Y_DEFAULT_VALUE,SVGOMAnimatedLength.VERTICAL_LENGTH,false);  width=createLiveAnimatedLength(null,SVG_WIDTH_ATTRIBUTE,SVG_PATTERN_WIDTH_DEFAULT_VALUE,SVGOMAnimatedLength.HORIZONTAL_LENGTH,true);  height=createLiveAnimatedLength(null,SVG_HEIGHT_ATTRIBUTE,SVG_PATTERN_WIDTH_DEFAULT_VALUE,SVGOMAnimatedLength.VERTICAL_LENGTH,true);  patternUnits=createLiveAnimatedEnumeration(null,SVG_PATTERN_UNITS_ATTRIBUTE,UNITS_VALUES,(short)2);  patternContentUnits=createLiveAnimatedEnumeration(null,SVG_PATTERN_CONTENT_UNITS_ATTRIBUTE,UNITS_VALUES,(short)1);  href=createLiveAnimatedString(XLINK_NAMESPACE_URI,XLINK_HREF_ATTRIBUTE);  externalResourcesRequired=createLiveAnimatedBoolean(null,SVG_EXTERNAL_RESOURCES_REQUIRED_ATTRIBUTE,false);  preserveAspectRatio=createLiveAnimatedPreserveAspectRatio();}  }
class C{  public boolean contains(IvrZoneMember zoneMember){  boolean contained=false;  for (  IvrZone ivrZone : getZones()) {    if (ivrZone.contains(zoneMember)) {      contained=true;      break;    }  }  return contained;}  }
class C{  public SSHPrompt waitFor(SSHPrompt[] prompts,Integer timeout,StringBuilder buf,boolean delayMatchCheck) throws NetworkDeviceControllerException {  if (timeout == null) {    timeout=defaultTimeout;  }  buf.setLength(0);  char[] input=new char[32670];  int nread=0;  long start=0;  long lastInputTime=System.currentTimeMillis();  while (System.currentTimeMillis() - lastInputTime < timeout && nread != -1) {    try {      Thread.sleep(10);      if (insr.ready()) {        nread=insr.read(input);        _log.debug("insr is ready and the buffer will be appended by " + String.valueOf(input));        if (nread != -1) {          lastInputTime=System.currentTimeMillis();          buf.append(input,0,nread);          if (delayMatchCheck) {            Thread.sleep(10);          }          start=System.currentTimeMillis();          _log.debug("Checking for prompts in new input: " + String.valueOf(input));          SSHPrompt px=checkForPrompt(buf.toString(),prompts);          _log.debug("Checking for prompts in new input only took " + (System.currentTimeMillis() - start));          if (px != SSHPrompt.NOMATCH) {            _log.debug("Prompt found " + px);            return px;          }        } else {          _log.debug("Reached EOF. Will check the full buffer for prompts");          start=System.currentTimeMillis();          SSHPrompt px=checkForPrompt(buf.toString(),prompts);          _log.debug("Checking for prompts in the full buffer took " + (System.currentTimeMillis() - start));          if (px != SSHPrompt.NOMATCH) {            return px;          }        }      }    } catch (    IOException ex) {      _log.error(ex.getLocalizedMessage());    }catch (    InterruptedException ex) {      _log.error(ex.getLocalizedMessage());    }  }  SSHPrompt prompt=checkForPrompt(buf.toString(),prompts);  if (prompt == SSHPrompt.NOMATCH) {    StringBuffer expectedPrompts=new StringBuffer("Expected one of these prompts, but not found: ");    for (    SSHPrompt chkPrompt : prompts) {      expectedPrompts.append(chkPrompt.toString()).append("(" + chkPrompt.getRegex() + "), ");    }    throw NetworkDeviceControllerException.exceptions.timeoutWaitingOnPrompt(expectedPrompts.toString());  }  return prompt;}  }
class C{  public Intent putExtra(String name,float[] value){  if (mExtras == null) {    mExtras=new Bundle();  }  mExtras.putFloatArray(name,value);  return this;}  }
class C{  private static void bad_idiom(String format,Object... args) throws UnsupportedIdiomException {  String msg=String.format(format,args);  throw new UnsupportedIdiomException(msg);}  }
class C{  public DERSequence(ASN1Encodable obj){  super(obj);}  }
class C{  public JsonSerializer<Object> untypedValueSerializer(Class<?> type){synchronized (this) {    return _sharedMap.get(new TypeKey(type,false));  }}  }
class C{  public VersionMigrationBuilder end(){  return migrationBuilder;}  }
class C{  @Override public final void remove(){  throw new UnsupportedOperationException();}  }
class C{  private static ILaunchConfiguration findOrCreateLaunchConfiguration(IProject project,String launcherDir,String launcherId) throws CoreException, OperationCanceledException {  ILaunchConfiguration config=findLaunchConfiguration(project);  if (config == null) {    config=createNewLaunchConfiguration(project);  }  config=addOrModifyLauncherArgs(config,launcherDir,launcherId);  return config;}  }
class C{  public void bind(int index,int value){  mPreparedStatement.bindLong(index,value);}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  private void showCompletion(){  this.textEditor.showCompletionProposals();}  }
class C{  public static void checkNamespacesNotVisible(List<ObjectNamespace> discoveredNamespaces,DbClient dbClient,URI storageSystemId){  URIQueryResultList objNamespaceURIs=new URIQueryResultList();  dbClient.queryByConstraint(ContainmentConstraint.Factory.getStorageDeviceObjectNamespaceConstraint(storageSystemId),objNamespaceURIs);  Iterator<URI> objNamespaceIter=objNamespaceURIs.iterator();  List<URI> existingNamespacesURI=new ArrayList<URI>();  while (objNamespaceIter.hasNext()) {    existingNamespacesURI.add(objNamespaceIter.next());  }  List<URI> discoveredNamespacesURI=new ArrayList<URI>();  for (  ObjectNamespace namespace : discoveredNamespaces) {    discoveredNamespacesURI.add(namespace.getId());  }  Set<URI> namespacesDiff=Sets.difference(new HashSet<URI>(existingNamespacesURI),new HashSet<URI>(discoveredNamespacesURI));  if (!namespacesDiff.isEmpty()) {    Iterator<ObjectNamespace> objNamespaceIt=dbClient.queryIterativeObjects(ObjectNamespace.class,namespacesDiff,true);    while (objNamespaceIt.hasNext()) {      ObjectNamespace namespace=objNamespaceIt.next();      if (namespace.getTenant() == null) {        _log.info("Object Namespace not visible & getting deleted {} : {}",namespace.getNativeId(),namespace.getId());        namespace.setDiscoveryStatus(DiscoveredDataObject.DiscoveryStatus.NOTVISIBLE.name());        namespace.setInactive(true);      }      dbClient.updateObject(namespace);    }  }}  }
class C{  public static String convertClassToJsonSchema(Type clazz,String responseDescription,JavaDocStore javaDocStore){  if (clazz == null || clazz.equals(Void.class)) {    return "{}";  }  try {    ObjectMapper m=new ObjectMapper();    JsonSchema jsonSchema=extractSchemaInternal(clazz,TypeHelper.inferGenericType(clazz),responseDescription,javaDocStore,m);    return m.writerWithDefaultPrettyPrinter().writeValueAsString(jsonSchema);  } catch (  Exception e) {    throw new IllegalStateException(e);  }}  }
class C{  static float dpToPixel(float dp,Resources resources){  DisplayMetrics metrics=resources.getDisplayMetrics();  return metrics.density * dp;}  }
class C{  public ActorSystem(){  this(true);}  }
class C{  public static BufferedImage createColorModelCompatibleImage(BufferedImage image){  ColorModel cm=image.getColorModel();  return new BufferedImage(cm,cm.createCompatibleWritableRaster(image.getWidth(),image.getHeight()),cm.isAlphaPremultiplied(),null);}  }
class C{  public static boolean isIdeographic(int codePoint){  return CharacterData.of(codePoint).isIdeographic(codePoint);}  }
class C{  public TermsBuilder exclude(double[] terms){  if (excludePattern != null) {    throw new IllegalArgumentException("exclude clause must be an array of exact values or a regex, not both");  }  this.excludeTerms=doubleArrToStringArr(terms);  return this;}  }
class C{  @Deprecated public Long updateRoom(String SID,Long rooms_id,String name,Long roomtypes_id,String comment,Long numberOfPartizipants,Boolean ispublic,Integer videoPodWidth,Integer videoPodHeight,Integer videoPodXPosition,Integer videoPodYPosition,Integer moderationPanelXPosition,Boolean showWhiteBoard,Integer whiteBoardPanelXPosition,Integer whiteBoardPanelYPosition,Integer whiteBoardPanelHeight,Integer whiteBoardPanelWidth,Boolean showFilesPanel,Integer filesPanelXPosition,Integer filesPanelYPosition,Integer filesPanelHeight,Integer filesPanelWidth,Boolean appointment){  try {    Long users_id=sessionManagement.checkSession(SID);    Long user_level=userManagement.getUserLevelByID(users_id);    if (authLevelManagement.checkWebServiceLevel(user_level)) {      return roommanagement.updateRoomInternal(rooms_id,roomtypes_id,name,ispublic,comment,numberOfPartizipants,null,appointment,false,null,false,null,true,false,false,"","","",null,null,null,false,false,false,false,false,false,false,false);    }  } catch (  Exception err) {    log.error("[addRoom] ",err);  }  return new Long(-1);}  }
class C{  @Override public void download(AttachmentEntry attachment,File file,SitesService sitesService){  checkNotNull(attachment);  checkNotNull(file);  MediaContent mediaContent=new MediaContent();  mediaContent.setUri(((OutOfLineContent)attachment.getContent()).getUri());  try {    MediaSource mediaSource=sitesService.getMedia(mediaContent);    InputStream inStream=mediaSource.getInputStream();    OutputStream outStream=new FileOutputStream(file);    byte[] buf=new byte[4 * 1024];    int bytesRead;    while ((bytesRead=inStream.read(buf)) != -1) {      outStream.write(buf,0,bytesRead);    }    inStream.close();    outStream.close();  } catch (  IOException e) {    LOGGER.log(Level.WARNING,"Error downloading attachment: " + attachment.getTitle().getPlainText(),e);  }catch (  ServiceException e) {    LOGGER.log(Level.WARNING,"Error downloading attachment: " + attachment.getTitle().getPlainText(),e);  }}  }
class C{  @TargetApi(Build.VERSION_CODES.LOLLIPOP) public EditText(@NonNull final Context context,@Nullable final AttributeSet attributeSet,final int defaultStyle,final int defaultStyleResource){  super(context,attributeSet,defaultStyle,defaultStyleResource);  initialize(attributeSet);}  }
class C{  @Override public int hashCode(){  return table.hashCode();}  }
class C{  public void init(int viewTypeLine){  mTimelineView.initLine(viewTypeLine);}  }
class C{  public final TextBuilder append(int i,int radix){  if (radix == 10)   return append(i);  if (radix < 2 || radix > 36)   throw new IllegalArgumentException("radix: " + radix);  if (i < 0) {    append('-');    if (i == Integer.MIN_VALUE) {      appendPositive(-(i / radix),radix);      return (TextBuilder)append(DIGIT_TO_CHAR[-(i % radix)]);    }    i=-i;  }  appendPositive(i,radix);  return this;}  }
class C{  private boolean hasNoValues(){  return values.isEmpty();}  }
class C{  protected void onStructStart(final Object obj,final Field field,final Bin annotation){}  }
class C{  public static boolean isValid(Coordinate coord){  if (Double.isNaN(coord.x))   return false;  if (Double.isInfinite(coord.x))   return false;  if (Double.isNaN(coord.y))   return false;  if (Double.isInfinite(coord.y))   return false;  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:08.727 -0500",hash_original_method="00F8174F9E89D0C972FA6D3F19742382",hash_generated_method="D90463461B2A94FF94D13FDF69BB80C9") public int describeContents(){  return 0;}  }
class C{  public static String quote(String str){  return (str != null ? "'" + str + "'" : null);}  }
class C{  public void loadPackage(){  if (isLoaded)   return;  isLoaded=true;  URL url=getClass().getResource(packageFilename);  if (url == null) {    throw new RuntimeException("Missing serialized package: " + packageFilename);  }  URI uri=URI.createURI(url.toString());  Resource resource=new EcoreResourceFactoryImpl().createResource(uri);  try {    resource.load(null);  } catch (  IOException exception) {    throw new WrappedException(exception);  }  initializeFromLoadedEPackage(this,(EPackage)resource.getContents().get(0));  createResource(eNS_URI);}  }
class C{  public static Config translateConfig(Map<String,Object> stormConfig){  Config heronConfig=new Config(stormConfig);  doSerializationTranslation(heronConfig);  if (heronConfig.containsKey(org.apache.storm.Config.TOPOLOGY_ENABLE_MESSAGE_TIMEOUTS)) {    heronConfig.put(org.apache.storm.Config.TOPOLOGY_ENABLE_MESSAGE_TIMEOUTS,heronConfig.get(org.apache.storm.Config.TOPOLOGY_ENABLE_MESSAGE_TIMEOUTS).toString());  }  if (heronConfig.containsKey(org.apache.storm.Config.TOPOLOGY_WORKERS)) {    Integer nWorkers=(Integer)heronConfig.get(org.apache.storm.Config.TOPOLOGY_WORKERS);    com.twitter.heron.api.Config.setNumStmgrs(heronConfig,nWorkers);  }  if (heronConfig.containsKey(org.apache.storm.Config.TOPOLOGY_ACKER_EXECUTORS)) {    Integer nAckers=(Integer)heronConfig.get(org.apache.storm.Config.TOPOLOGY_ACKER_EXECUTORS);    com.twitter.heron.api.Config.setEnableAcking(heronConfig,nAckers > 0);  }  if (heronConfig.containsKey(org.apache.storm.Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS)) {    Integer nSecs=(Integer)heronConfig.get(org.apache.storm.Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS);    com.twitter.heron.api.Config.setMessageTimeoutSecs(heronConfig,nSecs);  }  if (heronConfig.containsKey(org.apache.storm.Config.TOPOLOGY_MAX_SPOUT_PENDING)) {    Integer nPending=Integer.parseInt(heronConfig.get(org.apache.storm.Config.TOPOLOGY_MAX_SPOUT_PENDING).toString());    com.twitter.heron.api.Config.setMaxSpoutPending(heronConfig,nPending);  }  if (heronConfig.containsKey(org.apache.storm.Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS)) {    Integer tSecs=Integer.parseInt(heronConfig.get(org.apache.storm.Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS).toString());    com.twitter.heron.api.Config.setTickTupleFrequency(heronConfig,tSecs);  }  if (heronConfig.containsKey(org.apache.storm.Config.TOPOLOGY_DEBUG)) {    Boolean dBg=Boolean.parseBoolean(heronConfig.get(org.apache.storm.Config.TOPOLOGY_DEBUG).toString());    com.twitter.heron.api.Config.setDebug(heronConfig,dBg);  }  doTaskHooksTranslation(heronConfig);  return heronConfig;}  }
class C{  public void run(){  if (evalOnly)   throw new RuntimeException("bsh Interpreter: No stream");  if (interactive)   try {    eval("printBanner();");  } catch (  EvalError e) {    println("BeanShell " + VERSION + " - by Pat Niemeyer (pat@pat.net)");  }  CallStack callstack=new CallStack(globalNameSpace);  boolean eof=false;  while (!eof) {    try {      System.out.flush();      System.err.flush();      Thread.yield();      if (interactive)       print(getBshPrompt());      eof=Line();      if (get_jjtree().nodeArity() > 0) {        SimpleNode node=(SimpleNode)(get_jjtree().rootNode());        if (DEBUG)         node.dump(">");        Object ret=node.eval(callstack,this);        if (callstack.depth() > 1)         throw new InterpreterError("Callstack growing: " + callstack);        if (ret instanceof ReturnControl)         ret=((ReturnControl)ret).value;        if (ret != Primitive.VOID) {          setu("$_",ret);          if (showResults)           println("<" + ret + ">");        }      }    } catch (    ParseException e) {      error("Parser Error: " + e.getMessage(DEBUG));      if (DEBUG)       e.printStackTrace();      if (!interactive)       eof=true;      parser.reInitInput(in);    }catch (    InterpreterError e) {      error("Internal Error: " + e.getMessage());      e.printStackTrace();      if (!interactive)       eof=true;    }catch (    TargetError e) {      error("// Uncaught Exception: " + e);      if (e.inNativeCode())       e.printStackTrace(DEBUG,err);      if (!interactive)       eof=true;      setu("$_e",e.getTarget());    }catch (    EvalError e) {      if (interactive)       error("EvalError: " + e.toString()); else       error("EvalError: " + e.getMessage());      if (DEBUG)       e.printStackTrace();      if (!interactive)       eof=true;    }catch (    Exception e) {      error("Unknown error: " + e);      if (DEBUG)       e.printStackTrace();      if (!interactive)       eof=true;    }catch (    TokenMgrError e) {      error("Error parsing input: " + e);      parser.reInitTokenInput(in);      if (!interactive)       eof=true;    } finally {      get_jjtree().reset();      if (callstack.depth() > 1) {        callstack.clear();        callstack.push(globalNameSpace);      }    }  }  if (interactive && exitOnEOF)   System.exit(0);}  }
class C{  public static Bitmap screenshot(int width,int height){  if (METHOD_screenshot_II == null) {    Log.e(TAG,"screenshot method was not found.");    return null;  }  return (Bitmap)CompatUtils.invoke(null,null,METHOD_screenshot_II,width,height);}  }
class C{  public void delete(final String url,final Object... urlVariables){  getRestTemplate().delete(url,urlVariables);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean thumb=evalBool(stack.pop());  int idx=getInt(stack);  Show s=getShow(stack);  if (s == null)   return null;  String imgUrl=s.getImageUrlForIndex(idx,thumb);  return (imgUrl == null) ? null : MetaImage.getMetaImage(imgUrl,stack.getUIComponent());}  }
class C{  public SVMLightTest(String name){  super(name);}  }
class C{  @Override public void visitVertex(State state){  if (state.vertex < 0 || state.backState == null || state.durationFromOriginSeconds < minTravelTimeSeconds || skippedVertices.contains(state.vertex)) {    if (state.vertex > 0 && state.durationFromOriginSeconds < minTravelTimeSeconds) {      skippedVertices.add(state.vertex);    }    return;  }  v.seek(state.vertex);  if (v.getFlag(wantedFlag)) {    if (!vertices.containsKey(state.vertex) || vertices.get(state.vertex).getRoutingVariable(dominanceVariable) > state.getRoutingVariable(dominanceVariable)) {      vertices.put(state.vertex,state);    }  }}  }
class C{  private void updateTwitterButton(){  Context context=getContext();  boolean buttonActive=userHandler.isSocialNetworkConnected(getString(R.string.provider_key_twitter)) && twitterHandler.isShareOnTwitter(context);  twitterButton.setImageResource(buttonActive ? R.drawable.twitter_blue_24dp : R.drawable.twitter_gray_24dp);  twitterHandler.setShareOnTwitter(context,buttonActive);}  }
class C{  void sync(FlowView fv){  View lv=getLogicalView(fv);  text.setView(lv);  Container container=fv.getContainer();  FontRenderContext frc=sun.swing.SwingUtilities2.getFontRenderContext(container);  BreakIterator iter;  Container c=fv.getContainer();  if (c != null) {    iter=BreakIterator.getLineInstance(c.getLocale());  } else {    iter=BreakIterator.getLineInstance();  }  Object shaper=null;  if (c instanceof JComponent) {    shaper=((JComponent)c).getClientProperty(TextAttribute.NUMERIC_SHAPING);  }  text.setShaper(shaper);  measurer=new LineBreakMeasurer(text,iter,frc);  int n=lv.getViewCount();  for (int i=0; i < n; i++) {    View child=lv.getView(i);    if (child instanceof GlyphView) {      int p0=child.getStartOffset();      int p1=child.getEndOffset();      measurer.setPosition(text.toIteratorIndex(p0));      TextLayout layout=measurer.nextLayout(Float.MAX_VALUE,text.toIteratorIndex(p1),false);      ((GlyphView)child).setGlyphPainter(new GlyphPainter2(layout));    }  }  measurer.setPosition(text.getBeginIndex());}  }
class C{  public int countEntries(){  int size=0;  if (entriesFromStorage == null)   return 0;  for (  String ofswitch : entriesFromStorage.keySet())   size+=entriesFromStorage.get(ofswitch).size();  return size;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"lodsb");  if (instruction.getOperands().size() != 0) {    throw new InternalTranslationException("Error: Argument instruction is not a lodsb instruction (invalid number of operand)");  }  new LodsGenerator().generate(environment,ReilHelpers.toReilAddress(instruction.getAddress()).toLong(),OperandSize.BYTE,instructions);}  }
class C{  public boolean isNeedsAction(){  return is(NEEDS_ACTION);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void deleteRefactoringDescriptors(final RefactoringDescriptorProxy[] proxies,IProgressMonitor monitor) throws CoreException {  Assert.isNotNull(proxies);  if (monitor == null)   monitor=new NullProgressMonitor();  try {    monitor.beginTask(RefactoringCoreMessages.RefactoringHistoryService_deleting_refactorings,proxies.length + 300);    final Map projects=new HashMap();    for (int index=0; index < proxies.length; index++) {      String project=proxies[index].getProject();      if (project == null || "".equals(project))       project=RefactoringHistoryService.NAME_WORKSPACE_PROJECT;      Collection collection=(Collection)projects.get(project);      if (collection == null) {        collection=new ArrayList();        projects.put(project,collection);      }      collection.add(proxies[index]);      monitor.worked(1);    }    final SubProgressMonitor subMonitor=new SubProgressMonitor(monitor,300);    try {      final Set entries=projects.entrySet();      subMonitor.beginTask(RefactoringCoreMessages.RefactoringHistoryService_deleting_refactorings,entries.size());      for (final Iterator iterator=entries.iterator(); iterator.hasNext(); ) {        final Map.Entry entry=(Map.Entry)iterator.next();        final Collection collection=(Collection)entry.getValue();        String project=(String)entry.getKey();        if (project.equals(RefactoringHistoryService.NAME_WORKSPACE_PROJECT))         project=null;        final RefactoringHistoryManager manager=getManager(project);        if (manager != null)         manager.removeRefactoringDescriptors((RefactoringDescriptorProxy[])collection.toArray(new RefactoringDescriptorProxy[collection.size()]),new SubProgressMonitor(subMonitor,1),RefactoringCoreMessages.RefactoringHistoryService_deleting_refactorings); else         subMonitor.worked(1);      }    }  finally {      subMonitor.done();    }  }  finally {    monitor.done();  }}  }
class C{  public EmbeddedLocalContainerStub(){  this(null);}  }
class C{  public void removeSettingsListener(String name,String option){  for (ListIterator<SettingsListenerInfo> lit=allListeners.listIterator(); lit.hasNext(); ) {    SettingsListenerInfo info=lit.next();    if (info.equals(name,option)) {      lit.remove();      String key=info.getKey();      List<ISettingsListener> listenersForKey=listenersByKey.get(key);      listenersForKey.remove(info.getListener());      if (listenersForKey.isEmpty()) {        listenersByKey.remove(key);      }    }  }}  }
class C{  @NoInline private static boolean isSet(Address start,int bytes,boolean verbose,int value){  if (VM.VERIFY_ASSERTIONS)   assertAligned(bytes);  for (int i=0; i < bytes; i+=BYTES_IN_INT)   if (start.loadInt(Offset.fromIntSignExtend(i)) != value) {    if (verbose) {      Log.prependThreadId();      Log.write("VM range does not contain only value ");      Log.writeln(value);      Log.write("Non-zero range: ");      Log.write(start);      Log.write(" .. ");      Log.writeln(start.plus(bytes));      Log.write("First bad value at ");      Log.writeln(start.plus(i));      dumpMemory(start,0,bytes);    }    return false;  }  return true;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private GradeGetter(){  this.courseMap=new HashMap<>();  String[] ENCourses={"AERO","MEMA","BMEN","BIOT","CHEN","SENG","CVEN","OCEN","ENGR","CSCE","ECEN","ENDG","ENTC","IDIS","ISEN","MSEN","MEEN","NUEN","PETE"};  for (  String abbr : ENCourses) {    this.courseMap.put(abbr,"EN");  }  String[] BACourses={"ACCT","BUAD","BUSN","IBUS","FINC","ISYS","SCMT","MGMT","MKTG"};  for (  String abbr : BACourses) {    this.courseMap.put(abbr,"BA");  }  String[] LACourses={"ANTH","AFST","FILM","JOUR","LBAR","RELS","WGST","COMM","ECMT","ECON","ENGL","LING","HISP","SPAN","HIST","ARAB","CLAS","EURO","FREN","GREM","INTS","ITAL","JAPN","RUSS","MUSC","THAR","HUMA","PHIL","POLS","PSYC","SOCI"};  for (  String abbr : LACourses) {    this.courseMap.put(abbr,"LA");  }  String[] GECourses={"ATMO","GEOS","GEOG","GEOL","GEOP","OCNG"};  for (  String abbr : GECourses) {    this.courseMap.put(abbr,"GE");  }  String[] SCCourses={"BIOL","CHEM","NRSC","MATH","ASTR","PHYS","STAT"};  for (  String abbr : SCCourses) {    this.courseMap.put(abbr,"SC");  }  String[] AGCourses={"AGCJ","AGSC","ALEC","ALED","AGEC","ANSC","BICH","GENE","AGSM","BAEN","AGLS","ESSM","RENR","ENTO","FIVS","HORT","FSTC","NUTR","BESC","PLPA","POSC","RENR","RPTS","MEPS","SCSC","WFSC"};  for (  String abbr : AGCourses) {    this.courseMap.put(abbr,"AG");  }  String[] ARCourses={"ARCH","ENDS","COSC","LAND","PLAN","URPN","ARTS","VIST","VIZA"};  for (  String abbr : ARCourses) {    this.courseMap.put(abbr,"AR");  }  String[] EDCourses={"CEHD","EDAD","TAMG","EHRD","INST","MASC","BEFB","BIED","CPSY","EDTC","EPFB","EPSY","SEFB","SPED","SPSY","ATTR","DCED","HEFB","HLTH","KINE","SPMT","EDCI","MEFB","RDNG","TEFB"};  for (  String abbr : EDCourses) {    this.courseMap.put(abbr,"ED");  }  String[] ELCourses={"ELIC","ELID","ELIG","ELIL","ELIO","ELIR","ELIV"};  for (  String abbr : ELCourses) {    this.courseMap.put(abbr,"EL");  }  String[] GBCourses={"BUSH","INTA","PSAA"};  for (  String abbr : GBCourses) {    this.courseMap.put(abbr,"GB");  }  String[] MDCourses={"EDHP"};  for (  String abbr : MDCourses) {    this.courseMap.put(abbr,"MD");  }  String[] MSCourses={"AERS","SOMS","MLSC","NVSC"};  for (  String abbr : MSCourses) {    this.courseMap.put(abbr,"MS");  }  String[] VMCourses={"BIMS","VMID","VIBS","VLCS","VTPP","VSCS","VPAR","VTMI","VTPB"};  for (  String abbr : VMCourses) {    this.courseMap.put(abbr,"VM");  }  this.parserMap=new HashMap<>();}  }
class C{  public static String toClassName(String s){  if (StringUtils.isEmpty(s) || s.contains(".")) {    return s;  }  return removeNonJavaIdentifierCharacters(StringUtils.stripAccents(StringUtils.deleteWhitespace(WordUtils.capitalizeFully(s))));}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case MappingPackage.ATTRIBUTE__NAME:    return getName();case MappingPackage.ATTRIBUTE__VALUE:  return getValue();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void testLastDocInBatchFlag() throws Exception {  doTestLastDocInBatchFlag(1);  doTestLastDocInBatchFlag(2);}  }
class C{  public void purgeQueue(PurgeQueueRequest purgeQueueRequest) throws AmazonServiceException, AmazonClientException {  LOG.warn("Calling purgeQueue deletes SQS messages without deleting their payload from S3.");  if (purgeQueueRequest == null) {    String errorMessage="purgeQueueRequest cannot be null.";    LOG.error(errorMessage);    throw new AmazonClientException(errorMessage);  }  purgeQueueRequest.getRequestClientOptions().appendUserAgent(SQSExtendedClientConstants.USER_AGENT_HEADER);  super.purgeQueue(purgeQueueRequest);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void doPostWithBody(final HttpServletRequest req,final HttpServletResponse resp) throws IOException {  final String baseURI=req.getRequestURL().toString();  final String contentType=req.getContentType();  if (contentType == null)   buildAndCommitResponse(resp,HTTP_BADREQUEST,MIME_TEXT_PLAIN,"Content-Type not specified.");  if (log.isInfoEnabled())   log.info("Request body: " + contentType);  final String mimeTypeStr=new MiniMime(contentType).getMimeType();  final RDFFormat format=RDFFormat.forMIMEType(mimeTypeStr);  if (format == null) {    buildAndCommitResponse(resp,HTTP_BADREQUEST,MIME_TEXT_PLAIN,"Content-Type not recognized as RDF: " + contentType);    return;  }  if (log.isInfoEnabled())   log.info("RDFFormat=" + format);  final RDFParserFactory rdfParserFactory=RDFParserRegistry.getInstance().get(format);  if (rdfParserFactory == null) {    buildAndCommitResponse(resp,HTTP_INTERNALERROR,MIME_TEXT_PLAIN,"Parser factory not found: Content-Type=" + contentType + ", format="+ format);    return;  }  final Resource[] defaultContext;{    final String[] s=req.getParameterValues(BigdataRDFContext.CONTEXT_URI);    if (s != null && s.length > 0) {      try {        defaultContext=toURIs(s);      } catch (      IllegalArgumentException ex) {        buildAndCommitResponse(resp,HTTP_INTERNALERROR,MIME_TEXT_PLAIN,ex.getLocalizedMessage());        return;      }    } else {      defaultContext=new Resource[0];    }  }  try {    submitApiTask(new InsertWithBodyTask(req,resp,getNamespace(req),ITx.UNISOLATED,baseURI,defaultContext,rdfParserFactory)).get();  } catch (  Throwable t) {    BigdataRDFServlet.launderThrowable(t,resp,"INSERT-WITH-BODY: baseURI=" + baseURI + ", Content-Type="+ contentType+ ", "+ BigdataRDFContext.CONTEXT_URI+ "="+ Arrays.toString(defaultContext));  }}  }
class C{  public static String readFileContentToString(String filePath) throws IOException {  String content="";  content=Files.toString(new File(filePath),Charsets.UTF_8);  return content;}  }
class C{  private long read32(byte[] buffer,int offset){  byte b0=buffer[offset];  byte b1=buffer[offset + 1];  byte b2=buffer[offset + 2];  byte b3=buffer[offset + 3];  int i0=((b0 & 0x80) == 0x80 ? (b0 & 0x7F) + 0x80 : b0);  int i1=((b1 & 0x80) == 0x80 ? (b1 & 0x7F) + 0x80 : b1);  int i2=((b2 & 0x80) == 0x80 ? (b2 & 0x7F) + 0x80 : b2);  int i3=((b3 & 0x80) == 0x80 ? (b3 & 0x7F) + 0x80 : b3);  return ((long)i0 << 24) + ((long)i1 << 16) + ((long)i2 << 8)+ (long)i3;}  }
class C{  public Vec feedfoward(Vec x){  Vec a_lprev=x;  for (int l=0; l < layersActivation.size(); l++) {    Vec z_l=new DenseVector(layerSizes[l + 1]);    z_l.zeroOut();    W.get(l).multiply(a_lprev,1.0,z_l);    final Vec B_l=B.get(l);    z_l.mutableAdd(B_l);    layersActivation.get(l).activate(z_l,z_l);    a_lprev=z_l;  }  return a_lprev;}  }
class C{  void execute(final int opcode,final int arg,final ClassWriter cw,final Item item){  int t1, t2, t3, t4;switch (opcode) {case Opcodes.NOP:case Opcodes.INEG:case Opcodes.LNEG:case Opcodes.FNEG:case Opcodes.DNEG:case Opcodes.I2B:case Opcodes.I2C:case Opcodes.I2S:case Opcodes.GOTO:case Opcodes.RETURN:    break;case Opcodes.ACONST_NULL:  push(NULL);break;case Opcodes.ICONST_M1:case Opcodes.ICONST_0:case Opcodes.ICONST_1:case Opcodes.ICONST_2:case Opcodes.ICONST_3:case Opcodes.ICONST_4:case Opcodes.ICONST_5:case Opcodes.BIPUSH:case Opcodes.SIPUSH:case Opcodes.ILOAD:push(INTEGER);break;case Opcodes.LCONST_0:case Opcodes.LCONST_1:case Opcodes.LLOAD:push(LONG);push(TOP);break;case Opcodes.FCONST_0:case Opcodes.FCONST_1:case Opcodes.FCONST_2:case Opcodes.FLOAD:push(FLOAT);break;case Opcodes.DCONST_0:case Opcodes.DCONST_1:case Opcodes.DLOAD:push(DOUBLE);push(TOP);break;case Opcodes.LDC:switch (item.type) {case ClassWriter.INT:push(INTEGER);break;case ClassWriter.LONG:push(LONG);push(TOP);break;case ClassWriter.FLOAT:push(FLOAT);break;case ClassWriter.DOUBLE:push(DOUBLE);push(TOP);break;case ClassWriter.CLASS:push(OBJECT | cw.addType("java/lang/Class"));break;case ClassWriter.STR:push(OBJECT | cw.addType("java/lang/String"));break;case ClassWriter.MTYPE:push(OBJECT | cw.addType("java/lang/invoke/MethodType"));break;default :push(OBJECT | cw.addType("java/lang/invoke/MethodHandle"));}break;case Opcodes.ALOAD:push(get(arg));break;case Opcodes.IALOAD:case Opcodes.BALOAD:case Opcodes.CALOAD:case Opcodes.SALOAD:pop(2);push(INTEGER);break;case Opcodes.LALOAD:case Opcodes.D2L:pop(2);push(LONG);push(TOP);break;case Opcodes.FALOAD:pop(2);push(FLOAT);break;case Opcodes.DALOAD:case Opcodes.L2D:pop(2);push(DOUBLE);push(TOP);break;case Opcodes.AALOAD:pop(1);t1=pop();push(ELEMENT_OF + t1);break;case Opcodes.ISTORE:case Opcodes.FSTORE:case Opcodes.ASTORE:t1=pop();set(arg,t1);if (arg > 0) {t2=get(arg - 1);if (t2 == LONG || t2 == DOUBLE) {set(arg - 1,TOP);} else if ((t2 & KIND) != BASE) {set(arg - 1,t2 | TOP_IF_LONG_OR_DOUBLE);}}break;case Opcodes.LSTORE:case Opcodes.DSTORE:pop(1);t1=pop();set(arg,t1);set(arg + 1,TOP);if (arg > 0) {t2=get(arg - 1);if (t2 == LONG || t2 == DOUBLE) {set(arg - 1,TOP);} else if ((t2 & KIND) != BASE) {set(arg - 1,t2 | TOP_IF_LONG_OR_DOUBLE);}}break;case Opcodes.IASTORE:case Opcodes.BASTORE:case Opcodes.CASTORE:case Opcodes.SASTORE:case Opcodes.FASTORE:case Opcodes.AASTORE:pop(3);break;case Opcodes.LASTORE:case Opcodes.DASTORE:pop(4);break;case Opcodes.POP:case Opcodes.IFEQ:case Opcodes.IFNE:case Opcodes.IFLT:case Opcodes.IFGE:case Opcodes.IFGT:case Opcodes.IFLE:case Opcodes.IRETURN:case Opcodes.FRETURN:case Opcodes.ARETURN:case Opcodes.TABLESWITCH:case Opcodes.LOOKUPSWITCH:case Opcodes.ATHROW:case Opcodes.MONITORENTER:case Opcodes.MONITOREXIT:case Opcodes.IFNULL:case Opcodes.IFNONNULL:pop(1);break;case Opcodes.POP2:case Opcodes.IF_ICMPEQ:case Opcodes.IF_ICMPNE:case Opcodes.IF_ICMPLT:case Opcodes.IF_ICMPGE:case Opcodes.IF_ICMPGT:case Opcodes.IF_ICMPLE:case Opcodes.IF_ACMPEQ:case Opcodes.IF_ACMPNE:case Opcodes.LRETURN:case Opcodes.DRETURN:pop(2);break;case Opcodes.DUP:t1=pop();push(t1);push(t1);break;case Opcodes.DUP_X1:t1=pop();t2=pop();push(t1);push(t2);push(t1);break;case Opcodes.DUP_X2:t1=pop();t2=pop();t3=pop();push(t1);push(t3);push(t2);push(t1);break;case Opcodes.DUP2:t1=pop();t2=pop();push(t2);push(t1);push(t2);push(t1);break;case Opcodes.DUP2_X1:t1=pop();t2=pop();t3=pop();push(t2);push(t1);push(t3);push(t2);push(t1);break;case Opcodes.DUP2_X2:t1=pop();t2=pop();t3=pop();t4=pop();push(t2);push(t1);push(t4);push(t3);push(t2);push(t1);break;case Opcodes.SWAP:t1=pop();t2=pop();push(t1);push(t2);break;case Opcodes.IADD:case Opcodes.ISUB:case Opcodes.IMUL:case Opcodes.IDIV:case Opcodes.IREM:case Opcodes.IAND:case Opcodes.IOR:case Opcodes.IXOR:case Opcodes.ISHL:case Opcodes.ISHR:case Opcodes.IUSHR:case Opcodes.L2I:case Opcodes.D2I:case Opcodes.FCMPL:case Opcodes.FCMPG:pop(2);push(INTEGER);break;case Opcodes.LADD:case Opcodes.LSUB:case Opcodes.LMUL:case Opcodes.LDIV:case Opcodes.LREM:case Opcodes.LAND:case Opcodes.LOR:case Opcodes.LXOR:pop(4);push(LONG);push(TOP);break;case Opcodes.FADD:case Opcodes.FSUB:case Opcodes.FMUL:case Opcodes.FDIV:case Opcodes.FREM:case Opcodes.L2F:case Opcodes.D2F:pop(2);push(FLOAT);break;case Opcodes.DADD:case Opcodes.DSUB:case Opcodes.DMUL:case Opcodes.DDIV:case Opcodes.DREM:pop(4);push(DOUBLE);push(TOP);break;case Opcodes.LSHL:case Opcodes.LSHR:case Opcodes.LUSHR:pop(3);push(LONG);push(TOP);break;case Opcodes.IINC:set(arg,INTEGER);break;case Opcodes.I2L:case Opcodes.F2L:pop(1);push(LONG);push(TOP);break;case Opcodes.I2F:pop(1);push(FLOAT);break;case Opcodes.I2D:case Opcodes.F2D:pop(1);push(DOUBLE);push(TOP);break;case Opcodes.F2I:case Opcodes.ARRAYLENGTH:case Opcodes.INSTANCEOF:pop(1);push(INTEGER);break;case Opcodes.LCMP:case Opcodes.DCMPL:case Opcodes.DCMPG:pop(4);push(INTEGER);break;case Opcodes.JSR:case Opcodes.RET:throw new RuntimeException("JSR/RET are not supported with computeFrames option");case Opcodes.GETSTATIC:push(cw,item.strVal3);break;case Opcodes.PUTSTATIC:pop(item.strVal3);break;case Opcodes.GETFIELD:pop(1);push(cw,item.strVal3);break;case Opcodes.PUTFIELD:pop(item.strVal3);pop();break;case Opcodes.INVOKEVIRTUAL:case Opcodes.INVOKESPECIAL:case Opcodes.INVOKESTATIC:case Opcodes.INVOKEINTERFACE:pop(item.strVal3);if (opcode != Opcodes.INVOKESTATIC) {t1=pop();if (opcode == Opcodes.INVOKESPECIAL && item.strVal2.charAt(0) == '<') {init(t1);}}push(cw,item.strVal3);break;case Opcodes.INVOKEDYNAMIC:pop(item.strVal2);push(cw,item.strVal2);break;case Opcodes.NEW:push(UNINITIALIZED | cw.addUninitializedType(item.strVal1,arg));break;case Opcodes.NEWARRAY:pop();switch (arg) {case Opcodes.T_BOOLEAN:push(ARRAY_OF | BOOLEAN);break;case Opcodes.T_CHAR:push(ARRAY_OF | CHAR);break;case Opcodes.T_BYTE:push(ARRAY_OF | BYTE);break;case Opcodes.T_SHORT:push(ARRAY_OF | SHORT);break;case Opcodes.T_INT:push(ARRAY_OF | INTEGER);break;case Opcodes.T_FLOAT:push(ARRAY_OF | FLOAT);break;case Opcodes.T_DOUBLE:push(ARRAY_OF | DOUBLE);break;default :push(ARRAY_OF | LONG);break;}break;case Opcodes.ANEWARRAY:String s=item.strVal1;pop();if (s.charAt(0) == '[') {push(cw,'[' + s);} else {push(ARRAY_OF | OBJECT | cw.addType(s));}break;case Opcodes.CHECKCAST:s=item.strVal1;pop();if (s.charAt(0) == '[') {push(cw,s);} else {push(OBJECT | cw.addType(s));}break;default :pop(arg);push(cw,item.strVal1);break;}}  }
class C{  private boolean loadRoot(final VirtualFile root) throws VcsException {  LOG.info("loadRoot " + root);  myProgressIndicator.setText(GitHandlerUtil.formatOperationName("Unstashing changes to",root));  GitRepository repository=myRepositoryManager.getRepositoryForRoot(root);  if (repository == null) {    LOG.error("Repository is null for root " + root);    return false;  }  GitSimpleEventDetector conflictDetector=new GitSimpleEventDetector(GitSimpleEventDetector.Event.MERGE_CONFLICT_ON_UNSTASH);  GitCommandResult result=myGit.stashPop(repository,conflictDetector);  if (result.success()) {    return false;  } else   if (conflictDetector.hasHappened()) {    return true;  } else {    LOG.info("unstash failed " + result.getErrorOutputAsJoinedString());    GitUIUtil.notifyImportantError(myProject,"Couldn't unstash","<br/>" + result.getErrorOutputAsHtmlString());    return false;  }}  }
class C{  private String generateOverpassRequestForWay(Box box){  StringBuilder cmplReq=new StringBuilder("(way");  cmplReq.append("(").append(box.getSouth()).append(",").append(box.getWest()).append(",").append(box.getNorth()).append(",").append(box.getEast()).append(");");  cmplReq.append(");out meta geom;");  return cmplReq.toString();}  }
class C{  public static SnapshotInfo readOptionalSnapshotInfo(StreamInput in) throws IOException {  return in.readOptionalStreamable(new SnapshotInfo());}  }
class C{  public SurfaceQuad(SurfaceQuad source){  super(source);  this.center=source.center;  this.width=source.width;  this.height=source.height;  this.heading=source.heading;}  }
class C{  public void deleteDir(String fspath) throws IsilonException {  deleteDir(fspath,false);}  }
class C{  public void disconnect(boolean cleanSession1,boolean isConnected) throws Exception {  logToFile("disconnect [cleanSession:" + cleanSession1 + "][isConnected:"+ client.isConnected()+ "]");  if (isConnected != client.isConnected()) {    throw new Exception("Client state mismatch [expected:" + isConnected + "][actual:"+ client.isConnected()+ "]");  }  if (isConnected && cleanSession1) {    subscribedTopics.clear();  }  try {    client.disconnect();  } catch (  MqttException e) {    if (((e.getReasonCode() != 6) && (e.getReasonCode() != 32101)) || isConnected) {      throw e;    }  }}  }
class C{  public void reset(URL url){  client.reset(url);}  }
class C{  public static IntList makeImmutable(int value){  IntList result=new IntList(1);  result.add(value);  result.setImmutable();  return result;}  }
class C{  public boolean addressInRange(Address addr){  return addr.GE(start_) && addr.LT(end_);}  }
class C{  protected boolean isNextCharacterEscapable(String nextLine,boolean inQuotes,int i){  return inQuotes && nextLine.length() > (i + 1) && isCharacterEscapable(nextLine.charAt(i + 1));}  }
class C{  Object processURL(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  if (getSupportsAVT()) {    try {      AVT avt=new AVT(handler,uri,name,rawName,value,owner);      return avt;    } catch (    TransformerException te) {      throw new org.xml.sax.SAXException(te);    }  } else {    return value;  }}  }
class C{  @Override public final String toString(){  if (stringRep == null) {    StringBuilder buffer=new StringBuilder();    buffer.append(this.name);    buffer.append(':');    buffer.append(Integer.toString(this.defaultPort));    stringRep=buffer.toString();  }  return stringRep;}  }
class C{  private static void updateNetwork(WifiManager wifiManager,WifiConfiguration config){  Integer foundNetworkID=findNetworkInExistingConfig(wifiManager,config.SSID);  if (foundNetworkID != null) {    Log.i(TAG,"Removing old configuration for network " + config.SSID);    wifiManager.removeNetwork(foundNetworkID);    wifiManager.saveConfiguration();  }  int networkId=wifiManager.addNetwork(config);  if (networkId >= 0) {    if (wifiManager.enableNetwork(networkId,true)) {      Log.i(TAG,"Associating to network " + config.SSID);      wifiManager.saveConfiguration();    } else {      Log.w(TAG,"Failed to enable network " + config.SSID);    }  } else {    Log.w(TAG,"Unable to add network " + config.SSID);  }}  }
class C{  public void restoreWeights(){  System.arraycopy(m_bestWeights,0,m_weights,0,m_weights.length);  for (int i=0; i < m_numInputs; i++) {    m_inputList[i].restoreWeights();  }}  }
class C{  public static SootMethod resolveConcreteDispatch(SootClass clz,SootMethod meth) throws CannotFindMethodException {  try {    return Scene.v().getActiveHierarchy().resolveConcreteDispatch(clz,meth);  } catch (  Exception e) {    throw new CannotFindMethodException(clz,meth);  }}  }
class C{  public boolean isSetStoreName(){  return this.storeName != null;}  }
class C{  public PoolingByteArrayOutputStream(ByteArrayPool pool){  this(pool,DEFAULT_SIZE);}  }
class C{  public void addTorque(double torque){  physicsState.addExternalTorque(torque,this.index);}  }
class C{  public static Object unwrap(Serializable o){  if (o instanceof SerializationWrapper<?>) {    SerializationWrapper<?> wrapper=(SerializationWrapper<?>)o;    return wrapper.unwrap();  }  return o;}  }
class C{  public FileList exclude(String pattern){  return filter(false,pattern);}  }
class C{  @Override public String toString(){  try {    return decode(bytes,0,length);  } catch (  CharacterCodingException e) {    throw new RuntimeException("Should not have happened ",e);  }}  }
class C{  void compile(List<String> opts,List<File> files) throws Exception {  System.err.println("javac: " + opts + " "+ files);  List<String> args=new ArrayList<String>();  args.addAll(opts);  for (  File f : files)   args.add(f.getPath());  StringWriter sw=new StringWriter();  PrintWriter pw=new PrintWriter(sw);  int rc=com.sun.tools.javac.Main.compile(args.toArray(new String[args.size()]),pw);  pw.flush();  if (sw.getBuffer().length() > 0)   System.err.println(sw.toString());  if (rc != 0)   throw new Exception("compilation failed: rc=" + rc);}  }
class C{  public ClusterHealthResponse(String clusterName,String[] concreteIndices,ClusterState clusterState){  this(clusterName,concreteIndices,clusterState,-1,-1,-1,TimeValue.timeValueHours(0));}  }
class C{  public static PolicyMappings remove(PolicyMapping policyMapping,PolicyMappings policyMappings){  List<PolicyMapping> policyMappingsList=PolicyMappingsUtil.getListOfPolicyMappings(policyMappings);  policyMappingsList.remove(policyMapping);  policyMappings=PolicyMappingsUtil.createFromList(policyMappingsList);  return policyMappings;}  }
class C{  public boolean supportsIntegrityEnhancementFacility() throws SQLException {  return true;}  }
class C{  public static String deepToString(Object[] a){  if (a == null)   return "null";  int bufLen=20 * a.length;  if (a.length != 0 && bufLen <= 0)   bufLen=Integer.MAX_VALUE;  StringBuilder buf=new StringBuilder(bufLen);  deepToString(a,buf,new HashSet<Object[]>());  return buf.toString();}  }
class C{  public void mouseDragged(MouseEvent e){}  }
class C{  public Vector3 toVector3(){  return Vector2.toVector3(this);}  }
class C{  public static void filterOutbound(StringBuilder message){  for (int i=0; i < message.length(); i++) {    char currentChar=message.charAt(i);    if (LEGAL_CHARACTERS.indexOf(currentChar) == -1) {      if (currentChar > 256) {        int charAsInt=currentChar;        String stringVersion=Integer.toString(charAsInt,16);        String replacement="&#x" + stringVersion + ";";        message.replace(i,i + 1,replacement);        i+=replacement.length() - 1;      } else {        message.deleteCharAt(i);        i--;      }    }  }}  }
class C{  public static int ETIMEDOUT(){  return Errno.ETIMEDOUT.intValue();}  }
class C{  private static final boolean compareAndSetWaitStatus(Node node,int expect,int update){  return unsafe.compareAndSwapInt(node,waitStatusOffset,expect,update);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MInvoiceTax[");  sb.append("C_Invoice_ID=").append(getC_Invoice_ID()).append(",C_Tax_ID=").append(getC_Tax_ID()).append(", Base=").append(getTaxBaseAmt()).append(",Tax=").append(getTaxAmt()).append("]");  return sb.toString();}  }
class C{  public TriggerOption discardingFiredPanes(){  this.accumulationMode=AccumulationMode.DISCARDING;  return this;}  }
class C{  @Nullable public ECKey findKeyFromPubHash(byte[] pubkeyHash){  lock.lock();  try {    for (    ECKey key : keychain) {      if (Arrays.equals(key.getPubKeyHash(),pubkeyHash))       return key;    }    return null;  }  finally {    lock.unlock();  }}  }
class C{  @SuppressWarnings("nullness") @GwtIncompatible("java.io.ObjectOutputStream") public static <K extends Object,V extends Object>void writeMap(Map<K,V> map,ObjectOutputStream stream) throws IOException {  stream.writeInt(map.size());  for (  Map.Entry<K,V> entry : map.entrySet()) {    stream.writeObject(entry.getKey());    stream.writeObject(entry.getValue());  }}  }
class C{  public static ClientId create(String xRoadInstance,String memberClass,String memberCode){  return create(xRoadInstance,memberClass,memberCode,null);}  }
class C{  public boolean equals(Object o){  if (!(o instanceof HttpPath))   return false;  HttpPath test=(HttpPath)o;  if (!_host.equals(test._host))   return false; else   if (_port != test._port)   return false; else   if (_query != null && !_query.equals(test._query))   return false; else   if (_query == null && test._query != null)   return false; else   return true;}  }
class C{  public ProductConfigWrapperException(String message){  super(message);}  }
class C{  static void verifyCryptoDataString(String input) throws CryptoDataException {  if (input.isEmpty() || !input.contains(SEPARATOR)) {    throw CryptoDataException.fromCryptoDataString(input);  }}  }
class C{  private String generate(PreparedStatement pstmt){  try {    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      MOrder order=new MOrder(getCtx(),rs,get_TrxName());      if (!p_ConsolidateDocument || (m_shipment != null && (m_shipment.getC_BPartner_Location_ID() != order.getC_BPartner_Location_ID() || m_shipment.getM_Shipper_ID() != order.getM_Shipper_ID())))       completeShipment();      log.fine("check: " + order + " - DeliveryRule="+ order.getDeliveryRule());      Timestamp minGuaranteeDate=m_movementDate;      boolean completeOrder=MOrder.DELIVERYRULE_CompleteOrder.equals(order.getDeliveryRule());      String where=" AND M_Warehouse_ID=" + p_M_Warehouse_ID;      if (p_DatePromised != null)       where+=" AND (TRUNC(DatePromised)<=" + DB.TO_DATE(p_DatePromised,true) + " OR DatePromised IS NULL)";      if (!MOrder.DELIVERYRULE_Force.equals(order.getDeliveryRule()))       where+=" AND (C_OrderLine.M_Product_ID IS NULL" + " OR EXISTS (SELECT * FROM M_Product p " + "WHERE C_OrderLine.M_Product_ID=p.M_Product_ID"+ " AND IsExcludeAutoDelivery='N'))";      if (!p_IsUnconfirmedInOut)       where+=" AND NOT EXISTS (SELECT * FROM M_InOutLine iol" + " INNER JOIN M_InOut io ON (iol.M_InOut_ID=io.M_InOut_ID) " + "WHERE iol.C_OrderLine_ID=C_OrderLine.C_OrderLine_ID AND io.DocStatus IN ('IP','WC'))";      MOrderLine[] lines=order.getLines(where,"C_BPartner_Location_ID, M_Product_ID");      for (int i=0; i < lines.length; i++) {        MOrderLine line=lines[i];        if (line.getM_Warehouse_ID() != p_M_Warehouse_ID)         continue;        log.fine("check: " + line);        BigDecimal onHand=Env.ZERO;        BigDecimal toDeliver=line.getQtyOrdered().subtract(line.getQtyDelivered());        MProduct product=line.getProduct();        if (product != null && toDeliver.signum() == 0)         continue;        if (line.getC_Charge_ID() != 0 && toDeliver.signum() == 0)         continue;        BigDecimal unconfirmedShippedQty=Env.ZERO;        if (p_IsUnconfirmedInOut && product != null && toDeliver.signum() != 0) {          String where2="EXISTS (SELECT * FROM M_InOut io WHERE io.M_InOut_ID=M_InOutLine.M_InOut_ID AND io.DocStatus IN ('IP','WC'))";          MInOutLine[] iols=MInOutLine.getOfOrderLine(getCtx(),line.getC_OrderLine_ID(),where2,null);          for (int j=0; j < iols.length; j++)           unconfirmedShippedQty=unconfirmedShippedQty.add(iols[j].getMovementQty());          String logInfo="Unconfirmed Qty=" + unconfirmedShippedQty + " - ToDeliver="+ toDeliver+ "->";          toDeliver=toDeliver.subtract(unconfirmedShippedQty);          logInfo+=toDeliver;          if (toDeliver.signum() < 0) {            toDeliver=Env.ZERO;            logInfo+=" (set to 0)";          }          onHand=onHand.subtract(unconfirmedShippedQty);          log.fine(logInfo);        }        if ((product == null || !product.isStocked()) && (line.getQtyOrdered().signum() == 0 || toDeliver.signum() != 0)) {          if (!MOrder.DELIVERYRULE_CompleteOrder.equals(order.getDeliveryRule()))           createLine(order,line,toDeliver,null,false);          continue;        }        String MMPolicy=product.getMMPolicy();        MStorage[] storages=getStorages(line.getM_Warehouse_ID(),line.getM_Product_ID(),line.getM_AttributeSetInstance_ID(),minGuaranteeDate,MClient.MMPOLICY_FiFo.equals(MMPolicy));        for (int j=0; j < storages.length; j++) {          MStorage storage=storages[j];          onHand=onHand.add(storage.getQtyOnHand());        }        boolean fullLine=onHand.compareTo(toDeliver) >= 0 || toDeliver.signum() < 0;        if (completeOrder && !fullLine) {          log.fine("Failed CompleteOrder - OnHand=" + onHand + " (Unconfirmed="+ unconfirmedShippedQty+ "), ToDeliver="+ toDeliver+ " - "+ line);          completeOrder=false;          break;        } else         if (fullLine && MOrder.DELIVERYRULE_CompleteLine.equals(order.getDeliveryRule())) {          log.fine("CompleteLine - OnHand=" + onHand + " (Unconfirmed="+ unconfirmedShippedQty+ ", ToDeliver="+ toDeliver+ " - "+ line);          createLine(order,line,toDeliver,storages,false);        } else         if (MOrder.DELIVERYRULE_Availability.equals(order.getDeliveryRule()) && (onHand.signum() > 0 || toDeliver.signum() < 0)) {          BigDecimal deliver=toDeliver;          if (deliver.compareTo(onHand) > 0)           deliver=onHand;          log.fine("Available - OnHand=" + onHand + " (Unconfirmed="+ unconfirmedShippedQty+ "), ToDeliver="+ toDeliver+ ", Delivering="+ deliver+ " - "+ line);          createLine(order,line,deliver,storages,false);        } else         if (MOrder.DELIVERYRULE_Force.equals(order.getDeliveryRule())) {          BigDecimal deliver=toDeliver;          log.fine("Force - OnHand=" + onHand + " (Unconfirmed="+ unconfirmedShippedQty+ "), ToDeliver="+ toDeliver+ ", Delivering="+ deliver+ " - "+ line);          createLine(order,line,deliver,storages,true);        } else         if (MOrder.DELIVERYRULE_Manual.equals(order.getDeliveryRule()))         log.fine("Manual - OnHand=" + onHand + " (Unconfirmed="+ unconfirmedShippedQty+ ") - "+ line); else         log.fine("Failed: " + order.getDeliveryRule() + " - OnHand="+ onHand+ " (Unconfirmed="+ unconfirmedShippedQty+ "), ToDeliver="+ toDeliver+ " - "+ line);      }      if (completeOrder && MOrder.DELIVERYRULE_CompleteOrder.equals(order.getDeliveryRule())) {        for (int i=0; i < lines.length; i++) {          MOrderLine line=lines[i];          if (line.getM_Warehouse_ID() != p_M_Warehouse_ID)           continue;          MProduct product=line.getProduct();          BigDecimal toDeliver=line.getQtyOrdered().subtract(line.getQtyDelivered());          MStorage[] storages=null;          if (product != null && product.isStocked()) {            String MMPolicy=product.getMMPolicy();            storages=getStorages(line.getM_Warehouse_ID(),line.getM_Product_ID(),line.getM_AttributeSetInstance_ID(),minGuaranteeDate,MClient.MMPOLICY_FiFo.equals(MMPolicy));          }          createLine(order,line,toDeliver,storages,false);        }      }      m_line+=1000;    }    rs.close();    pstmt.close();    pstmt=null;  } catch (  Exception e) {    log.log(Level.SEVERE,m_sql,e);  }  try {    if (pstmt != null)     pstmt.close();    pstmt=null;  } catch (  Exception e) {    pstmt=null;  }  completeShipment();  return "@Created@ = " + m_created;}  }
class C{  public boolean isXRoundedLabels(){  return mXRoundedLabels;}  }
class C{  private static String loadStreamContent(InputStream stream) throws IOException {  StringBuilder content=new StringBuilder();  BufferedReader reader=new BufferedReader(new InputStreamReader(stream));  try {    char[] buff=new char[1024];    int i=0;    while ((i=reader.read(buff)) != -1) {      content.append(buff,0,i);    }  }  finally {    reader.close();  }  return content.toString();}  }
class C{  public ImportsResolver(){}  }
class C{  StorageRecovery(Config config,String path){  jobConfig=config;  storeBaseDir=new File(path,"state");}  }
class C{  public boolean isBidiAlgorithm(){  return impl.isBidiAlgorithm();}  }
class C{  public static CCMenuItemImage item(String normalI,String selectedI,String disabledI,CCNode t,String sel){  return new CCMenuItemImage(CCSprite.sprite(normalI),CCSprite.sprite(selectedI),(disabledI == null) ? null : CCSprite.sprite(disabledI),t,sel);}  }
class C{  public Element defineElement(String name,int type,boolean omitStart,boolean omitEnd,ContentModel content,BitSet exclusions,BitSet inclusions,AttributeList atts){  Element e=getElement(name);  e.type=type;  e.oStart=omitStart;  e.oEnd=omitEnd;  e.content=content;  e.exclusions=exclusions;  e.inclusions=inclusions;  e.atts=atts;  return e;}  }
class C{  public static long parseLong(String string,int radix) throws NumberFormatException {  if (radix < Character.MIN_RADIX || radix > Character.MAX_RADIX) {    throw new NumberFormatException("Invalid radix: " + radix);  }  if (string == null) {    throw invalidLong(string);  }  int length=string.length(), i=0;  if (length == 0) {    throw invalidLong(string);  }  boolean negative=string.charAt(i) == '-';  if (negative && ++i == length) {    throw invalidLong(string);  }  return parse(string,i,radix,negative);}  }
class C{  public ST createSingleton(Token templateToken){  String template;  if (templateToken.getType() == GroupParser.BIGSTRING || templateToken.getType() == GroupParser.BIGSTRING_NO_NL) {    template=Misc.strip(templateToken.getText(),2);  } else {    template=Misc.strip(templateToken.getText(),1);  }  CompiledST impl=compile(getFileName(),null,null,template,templateToken);  ST st=createStringTemplateInternally(impl);  st.groupThatCreatedThisInstance=this;  st.impl.hasFormalArgs=false;  st.impl.name=ST.UNKNOWN_NAME;  st.impl.defineImplicitlyDefinedTemplates(this);  return st;}  }
class C{  public static JSONObject createEmitDeleteMessage(String userId,String messageId){  JSONObject obj=new JSONObject();  try {    obj.put("userID",userId);    obj.put("messageID",messageId);    return obj;  } catch (  JSONException e) {    e.printStackTrace();  }  return obj;}  }
class C{  @Override public Date saveValue(UpdateAutoTimestamp pojoValue){  return ofy().getTransactionTime().toDate();}  }
class C{  public void addListener(final IHistoryStringBuilderListener listener){  m_listeners.addListener(listener);}  }
class C{  public TernaryIntervalSearchTree(final Collection<? extends CharSequence> c){  int n=c.size();  final Iterator<? extends CharSequence> i=c.iterator();  while (n-- != 0)   add(i.next());  defRetValue=-1;}  }
class C{  @Override public void run(){  amIActive=true;  String featureFile=null;  ShapeFile featureShape;  String dataFile=null;  ShapeFile dataShape;  String outputFile=null;  ShapeFile output;  String instructions=null;  int progress;  int previousProgress=0;  int i, n;  int numRecsFeature;  int numRecsData;  boolean blnSelect=true;  double distThreshold=0;  ShapeType featureShapeType;  ShapeType outputShapeType=ShapeType.POLYGON;  GeometryFactory factory=new GeometryFactory();  com.vividsolutions.jts.geom.Geometry g1=null;  com.vividsolutions.jts.geom.Geometry g2=null;  com.vividsolutions.jts.geom.Geometry[] recJTSGeometries=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  outputFile=args[1];  for (i=0; i < args.length; i++) {    if (i == 0) {      if (args[i].toLowerCase().contains("isolate features from")) {        blnSelect=true;      } else       if (args[i].toLowerCase().contains("remove features from")) {        blnSelect=false;      }    } else     if (i == 1) {      featureFile=args[i];    } else     if (i == 2) {      if (args[i].toLowerCase().contains("does not intersect")) {        instructions="notIntersect";      } else       if (args[i].toLowerCase().contains("intersect")) {        instructions="intersect";      } else       if (args[i].toLowerCase().contains("are completely within")) {        instructions="within";      } else       if (args[i].toLowerCase().contains("contains")) {        instructions="contains";      } else       if (args[i].toLowerCase().contains("does not contain")) {        instructions="notContain";      } else       if (args[i].toLowerCase().contains("covers")) {        instructions="covers";      } else       if (args[i].toLowerCase().contains("are covered by")) {        instructions="coveredBy";      } else       if (args[i].toLowerCase().contains("crosses")) {        instructions="crosses";      } else       if (args[i].toLowerCase().contains("touches")) {        instructions="touches";      } else       if (args[i].toLowerCase().contains("does not touch")) {        instructions="notTouch";      } else       if (args[i].toLowerCase().contains("are within a distance of")) {        instructions="distance";      }    } else     if (i == 3) {      dataFile=args[i];    } else     if (i == 4) {      outputFile=args[i];    } else     if (i == 5) {      if (!args[i].equals("not specified")) {        distThreshold=Double.parseDouble(args[i]);      }    }  }  if ((featureFile == null) || (dataFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    featureShape=new ShapeFile(featureFile);    featureShapeType=featureShape.getShapeType();    numRecsFeature=featureShape.getNumberOfRecords();    dataShape=new ShapeFile(dataFile);    numRecsData=dataShape.getNumberOfRecords();    AttributeTable reader=featureShape.getAttributeTable();    int numFields=reader.getFieldCount();    DBFField fields[]=new DBFField[numFields];    for (int a=0; a < reader.getFieldCount(); a++) {      DBFField inputField=reader.getField(a);      fields[a]=inputField;    }    outputShapeType=featureShapeType;    output=new ShapeFile(outputFile,outputShapeType,fields);    output.setProjectionStringFromOtherShapefile(featureShape);    ArrayList<com.vividsolutions.jts.geom.Geometry> inputGeometryList=new ArrayList<>();    com.vividsolutions.jts.geom.Geometry outputGeometry=null;    updateProgress("Loop 1 of 2:",0);    n=0;    for (    ShapeFileRecord record : dataShape.records) {      if (record.getShapeType() != ShapeType.NULLSHAPE) {        recJTSGeometries=record.getGeometry().getJTSGeometries();        for (int a=0; a < recJTSGeometries.length; a++) {          if (recJTSGeometries[a].isValid()) {            inputGeometryList.add(recJTSGeometries[a]);          } else {            System.out.println(record.getRecordNumber() + " is invalid.");          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      n++;      progress=(int)(n * 100.0 / numRecsData);      if (progress != previousProgress) {        previousProgress=progress;        updateProgress("Loop 1 of 2:",progress);      }    }    g1=factory.buildGeometry(inputGeometryList);    inputGeometryList.clear();    previousProgress=0;    if (instructions.equals("intersect")) {      updateProgress("Loop 2 of 2:",0);      n=0;      for (      ShapeFileRecord record : featureShape.records) {        Object[] rec=reader.nextRecord();        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }          g2=factory.buildGeometry(inputGeometryList);          inputGeometryList.clear();          if (g2.intersects(g1)) {            if (blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          } else {            if (!blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        progress=(int)(n * 100.0 / numRecsFeature);        if (progress != previousProgress) {          previousProgress=progress;          updateProgress("Loop 2 of 2:",progress);        }      }    } else     if (instructions.equals("notIntersect")) {      updateProgress("Loop 2 of 2:",0);      n=0;      for (      ShapeFileRecord record : featureShape.records) {        Object[] rec=reader.nextRecord();        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }          g2=factory.buildGeometry(inputGeometryList);          inputGeometryList.clear();          if (!g2.intersects(g1)) {            if (blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          } else {            if (!blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        progress=(int)(n * 100.0 / numRecsFeature);        if (progress != previousProgress) {          previousProgress=progress;          updateProgress("Loop 2 of 2:",progress);        }      }    } else     if (instructions.equals("within")) {      updateProgress("Loop 2 of 2:",0);      n=0;      for (      ShapeFileRecord record : featureShape.records) {        Object[] rec=reader.nextRecord();        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }          g2=factory.buildGeometry(inputGeometryList);          inputGeometryList.clear();          if (g2.within(g1)) {            if (blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          } else {            if (!blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        progress=(int)(n * 100.0 / numRecsFeature);        if (progress != previousProgress) {          previousProgress=progress;          updateProgress("Loop 2 of 2:",progress);        }      }    } else     if (instructions.equals("contains")) {      updateProgress("Loop 2 of 2:",0);      n=0;      for (      ShapeFileRecord record : featureShape.records) {        Object[] rec=reader.nextRecord();        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }          g2=factory.buildGeometry(inputGeometryList);          inputGeometryList.clear();          if (g2.contains(g1)) {            if (blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          } else {            if (!blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        progress=(int)(n * 100.0 / numRecsFeature);        if (progress != previousProgress) {          previousProgress=progress;          updateProgress("Loop 2 of 2:",progress);        }      }    } else     if (instructions.equals("notContain")) {      updateProgress("Loop 2 of 2:",0);      n=0;      for (      ShapeFileRecord record : featureShape.records) {        Object[] rec=reader.nextRecord();        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }          g2=factory.buildGeometry(inputGeometryList);          inputGeometryList.clear();          if (!g2.contains(g1)) {            if (blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          } else {            if (!blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        progress=(int)(n * 100.0 / numRecsFeature);        if (progress != previousProgress) {          previousProgress=progress;          updateProgress("Loop 2 of 2:",progress);        }      }    } else     if (instructions.equals("covers")) {      updateProgress("Loop 2 of 2:",0);      n=0;      for (      ShapeFileRecord record : featureShape.records) {        Object[] rec=reader.nextRecord();        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }          g2=factory.buildGeometry(inputGeometryList);          inputGeometryList.clear();          if (g2.covers(g1)) {            if (blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          } else {            if (!blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        progress=(int)(n * 100.0 / numRecsFeature);        if (progress != previousProgress) {          previousProgress=progress;          updateProgress("Loop 2 of 2:",progress);        }      }    } else     if (instructions.equals("coveredBy")) {      updateProgress("Loop 2 of 2:",0);      n=0;      for (      ShapeFileRecord record : featureShape.records) {        Object[] rec=reader.nextRecord();        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }          g2=factory.buildGeometry(inputGeometryList);          inputGeometryList.clear();          if (g2.coveredBy(g1)) {            if (blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          } else {            if (!blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        progress=(int)(n * 100.0 / numRecsFeature);        if (progress != previousProgress) {          previousProgress=progress;          updateProgress("Loop 2 of 2:",progress);        }      }    } else     if (instructions.equals("crosses")) {      updateProgress("Loop 2 of 2:",0);      n=0;      for (      ShapeFileRecord record : featureShape.records) {        Object[] rec=reader.nextRecord();        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }          g2=factory.buildGeometry(inputGeometryList);          inputGeometryList.clear();          if (g2.crosses(g1)) {            if (blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          } else {            if (!blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        progress=(int)(n * 100.0 / numRecsFeature);        if (progress != previousProgress) {          previousProgress=progress;          updateProgress("Loop 2 of 2:",progress);        }      }    } else     if (instructions.equals("touches")) {      updateProgress("Loop 2 of 2:",0);      n=0;      for (      ShapeFileRecord record : featureShape.records) {        Object[] rec=reader.nextRecord();        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }          g2=factory.buildGeometry(inputGeometryList);          inputGeometryList.clear();          if (g2.touches(g1)) {            if (blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          } else {            if (!blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        progress=(int)(n * 100.0 / numRecsFeature);        if (progress != previousProgress) {          previousProgress=progress;          updateProgress("Loop 2 of 2:",progress);        }      }    } else     if (instructions.equals("notTouch")) {      updateProgress("Loop 2 of 2:",0);      n=0;      for (      ShapeFileRecord record : featureShape.records) {        Object[] rec=reader.nextRecord();        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }          g2=factory.buildGeometry(inputGeometryList);          inputGeometryList.clear();          if (!g2.touches(g1)) {            if (blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          } else {            if (!blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        progress=(int)(n * 100.0 / numRecsFeature);        if (progress != previousProgress) {          previousProgress=progress;          updateProgress("Loop 2 of 2:",progress);        }      }    } else     if (instructions.equals("distance")) {      updateProgress("Loop 2 of 2:",0);      n=0;      for (      ShapeFileRecord record : featureShape.records) {        Object[] rec=reader.nextRecord();        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }          g2=factory.buildGeometry(inputGeometryList);          inputGeometryList.clear();          if (g2.isWithinDistance(g1,distThreshold)) {            if (blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          } else {            if (!blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        progress=(int)(n * 100.0 / numRecsFeature);        if (progress != previousProgress) {          previousProgress=progress;          updateProgress("Loop 2 of 2:",progress);        }      }    }    output.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void updateFileColor(@NotNull VirtualFile file){  Set<EditorsSplitters> all=getAllSplitters();  for (  EditorsSplitters each : all) {    each.updateFileColor(file);  }}  }
class C{  public static boolean unindentAsNeeded(Project project,Editor editor,PsiFile file){  final Document document=editor.getDocument();  int offset=editor.getCaretModel().getOffset();  CharSequence text=document.getCharsSequence();  if (offset >= text.length()) {    offset=text.length() - 1;  }  int line_start_offset=document.getLineStartOffset(document.getLineNumber(offset));  int nonspace_offset=findBeginning(line_start_offset,text);  Class<? extends PsiElement> parentClass=null;  int last_offset=nonspace_offset + PyNames.FINALLY.length();  if (last_offset > offset)   last_offset=offset;  int local_length=last_offset - nonspace_offset + 1;  if (local_length > 0) {    String piece=text.subSequence(nonspace_offset,last_offset + 1).toString();    final int else_len=PyNames.ELSE.length();    if (local_length >= else_len) {      if ((piece.startsWith(PyNames.ELSE) || piece.startsWith(PyNames.ELIF)) && (else_len == piece.length() || piece.charAt(else_len) < 'a' || piece.charAt(else_len) > 'z')) {        parentClass=PyStatementWithElse.class;      }    }    final int except_len=PyNames.EXCEPT.length();    if (local_length >= except_len) {      if (piece.startsWith(PyNames.EXCEPT) && (except_len == piece.length() || piece.charAt(except_len) < 'a' || piece.charAt(except_len) > 'z')) {        parentClass=PyTryExceptStatement.class;      }    }    final int finally_len=PyNames.FINALLY.length();    if (local_length >= finally_len) {      if (piece.startsWith(PyNames.FINALLY) && (finally_len == piece.length() || piece.charAt(finally_len) < 'a' || piece.charAt(finally_len) > 'z')) {        parentClass=PyTryExceptStatement.class;      }    }  }  if (parentClass == null)   return false;  PsiDocumentManager.getInstance(project).commitDocument(document);  PsiElement token=file.findElementAt(offset - 2);  PsiElement outer=PsiTreeUtil.getParentOfType(token,parentClass);  if (outer != null) {    int outer_offset=outer.getTextOffset();    int outer_indent=outer_offset - document.getLineStartOffset(document.getLineNumber(outer_offset));    assert outer_indent >= 0;    int current_indent=nonspace_offset - line_start_offset;    int indent=outer_indent - current_indent;    EditorActionUtil.indentLine(project,editor,document.getLineNumber(offset),editor.getSettings().isUseTabCharacter(project) ? indent * editor.getSettings().getTabSize(project) : indent);    return true;  }  return false;}  }
class C{  public static final double[][] identity(final int m,final int n){  final double[][] A=new double[m][n];  for (int i=0; i < Math.min(m,n); i++) {    A[i][i]=1.0;  }  return A;}  }
class C{  public BlackVarianceTermStructure(final int settlementDays,final Calendar cal){  this(settlementDays,cal,BusinessDayConvention.Following,new DayCounter());}  }
class C{  public static int[] toDigits(int number){  ArrayList<Integer> digitsList=new ArrayList<Integer>();  if (number == 0) {    return new int[]{0};  }  while (number != 0) {    digitsList.add(number % 10);    number/=10;  }  int[] digits=new int[digitsList.size()];  for (int i=digitsList.size() - 1; i >= 0; i--) {    digits[i]=digitsList.get(digitsList.size() - i);  }  return digits;}  }
class C{  private Knowledge2(Knowledge2 knowledge){  this.namesToVars=new HashMap<>(knowledge.namesToVars);  this.myNodes=new HashSet<>(knowledge.myNodes);  this.forbiddenRulesSpecs=new ArrayList<>(knowledge.forbiddenRulesSpecs);  this.requiredRulesSpecs=new ArrayList<>(knowledge.requiredRulesSpecs);  this.knowledgeGroupRules=new HashMap<>();  this.tierSpecs=new ArrayList<>(knowledge.tierSpecs);  this.defaultToKnowledgeLayout=knowledge.defaultToKnowledgeLayout;}  }
class C{  private static String replaceLast(String str,char from,char to){  int index=str.lastIndexOf(from);  if (index == -1)   return str;  return str.substring(0,index) + to + str.substring(index + 1);}  }
class C{  private static BytesRef keyToBytes(Object key){  ByteArrayOutputStream buffer=LOCAL_BUFFER.get();  try {    DataOutputStream out=new DataOutputStream(buffer);    DataSerializer.writeObject(key,out);    out.flush();    BytesRef result=new BytesRef(buffer.toByteArray());    buffer.reset();    return result;  } catch (  IOException e) {    throw new InternalGemFireError("Unable to serialize key",e);  }}  }
class C{  public void quit(){  super.setVisible(false);  if (workingDir.exists()) {    try {      FileUtils.deleteDirectory(workingDir);    } catch (    IOException e) {      System.out.println("Error deleting directory " + workingDir.getAbsolutePath() + ": "+ e);    }  }  if (this.standalone) {    System.exit(0);  }}  }
class C{  @Override protected void after(){  try {    for (    String databasePath : databasesToDrop) {      try {        fbManager.dropDatabase(databasePath,FBTestProperties.DB_USER,FBTestProperties.DB_PASSWORD);      } catch (      Exception e) {        e.printStackTrace();      }    }  } catch (  Exception ex) {    ex.printStackTrace();  } finally {    try {      fbManager.stop();    } catch (    Exception ex) {      ex.printStackTrace();    }    fbManager=null;  }}  }
class C{  @Override public boolean isEnabled(){  return super.isEnabled() && (getActiveView() instanceof PrintableView);}  }
class C{  public static IsNullValue checkedNonNullValue(){  return instanceByFlagsList[0][CHECKED_NN];}  }
class C{  private void tuneRightSplitter(Element el){  el.getParentElement().getStyle().setProperty("zIndex","1000");  el.getParentElement().getStyle().setProperty("overflow","visible");  el.getStyle().setProperty("boxSizing","border-box");  el.getStyle().setProperty("width","5px");  el.getStyle().setProperty("overflow","hidden");  el.getStyle().setProperty("marginLeft","-1px");  el.getStyle().setProperty("backgroundColor","transparent");  DivElement smallBorder=Document.get().createDivElement();  smallBorder.getStyle().setProperty("position","absolute");  smallBorder.getStyle().setProperty("width","1px");  smallBorder.getStyle().setProperty("height","100%");  smallBorder.getStyle().setProperty("left","1px");  smallBorder.getStyle().setProperty("top","0px");  smallBorder.getStyle().setProperty("backgroundColor",Style.getSplitterSmallBorderColor());  el.appendChild(smallBorder);  DivElement largeBorder=Document.get().createDivElement();  largeBorder.getStyle().setProperty("position","absolute");  largeBorder.getStyle().setProperty("width","2px");  largeBorder.getStyle().setProperty("height","100%");  largeBorder.getStyle().setProperty("left","2px");  largeBorder.getStyle().setProperty("top","0px");  largeBorder.getStyle().setProperty("opacity","0.4");  largeBorder.getStyle().setProperty("backgroundColor",Style.getSplitterLargeBorderColor());  el.appendChild(largeBorder);}  }
class C{  private void internalAnalyseCode(FlowContext flowContext,FlowInfo flowInfo){  if (!this.binding.isUsed() && this.binding.isOrEnclosedByPrivateType()) {    if (!this.scope.referenceCompilationUnit().compilationResult.hasSyntaxError) {      this.scope.problemReporter().unusedPrivateType(this);    }  }  InitializationFlowContext initializerContext=new InitializationFlowContext(null,this,flowInfo,flowContext,this.initializerScope);  InitializationFlowContext staticInitializerContext=new InitializationFlowContext(null,this,flowInfo,flowContext,this.staticInitializerScope);  FlowInfo nonStaticFieldInfo=flowInfo.unconditionalFieldLessCopy();  FlowInfo staticFieldInfo=flowInfo.unconditionalFieldLessCopy();  if (this.fields != null) {    for (int i=0, count=this.fields.length; i < count; i++) {      FieldDeclaration field=this.fields[i];      if (field.isStatic()) {        if ((staticFieldInfo.tagBits & FlowInfo.UNREACHABLE_OR_DEAD) != 0)         field.bits&=~ASTNode.IsReachable;        staticInitializerContext.handledExceptions=Binding.ANY_EXCEPTION;        staticFieldInfo=field.analyseCode(this.staticInitializerScope,staticInitializerContext,staticFieldInfo);        if (staticFieldInfo == FlowInfo.DEAD_END) {          this.staticInitializerScope.problemReporter().initializerMustCompleteNormally(field);          staticFieldInfo=FlowInfo.initial(this.maxFieldCount).setReachMode(FlowInfo.UNREACHABLE_OR_DEAD);        }      } else {        if ((nonStaticFieldInfo.tagBits & FlowInfo.UNREACHABLE_OR_DEAD) != 0)         field.bits&=~ASTNode.IsReachable;        initializerContext.handledExceptions=Binding.ANY_EXCEPTION;        nonStaticFieldInfo=field.analyseCode(this.initializerScope,initializerContext,nonStaticFieldInfo);        if (nonStaticFieldInfo == FlowInfo.DEAD_END) {          this.initializerScope.problemReporter().initializerMustCompleteNormally(field);          nonStaticFieldInfo=FlowInfo.initial(this.maxFieldCount).setReachMode(FlowInfo.UNREACHABLE_OR_DEAD);        }      }    }  }  if (this.memberTypes != null) {    for (int i=0, count=this.memberTypes.length; i < count; i++) {      if (flowContext != null) {        this.memberTypes[i].analyseCode(this.scope,flowContext,nonStaticFieldInfo.copy().setReachMode(flowInfo.reachMode()));      } else {        this.memberTypes[i].analyseCode(this.scope);      }    }  }  if (this.methods != null) {    UnconditionalFlowInfo outerInfo=flowInfo.unconditionalFieldLessCopy();    FlowInfo constructorInfo=nonStaticFieldInfo.unconditionalInits().discardNonFieldInitializations().addInitializationsFrom(outerInfo);    for (int i=0, count=this.methods.length; i < count; i++) {      AbstractMethodDeclaration method=this.methods[i];      if (method.ignoreFurtherInvestigation)       continue;      if (method.isInitializationMethod()) {        if (method.isStatic()) {          method.analyseCode(this.scope,staticInitializerContext,staticFieldInfo.unconditionalInits().discardNonFieldInitializations().addInitializationsFrom(outerInfo));        } else {          ((ConstructorDeclaration)method).analyseCode(this.scope,initializerContext,constructorInfo.copy(),flowInfo.reachMode());        }      } else {        method.analyseCode(this.scope,null,flowInfo.copy());      }    }  }  if (this.binding.isEnum() && !this.binding.isAnonymousType()) {    this.enumValuesSyntheticfield=this.binding.addSyntheticFieldForEnumValues();  }}  }
class C{  @Override public void process(KeyValPair<K,V> tuple){  addTuple(tuple,denominators);}  }
class C{  public boolean isDefault(){  Object oo=get_Value(COLUMNNAME_IsDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void add(int index,PropertyDescriptor pd){  if (index >= MAX_PROPERTIES) {    throw DatabaseException.fatals.serializationFailedIndexGreaterThanMax(pd.getName(),index,MAX_PROPERTIES);  }  if (_array[index] != null) {    throw DatabaseException.fatals.serializationFailedIndexReused(pd.getName(),index);  }  _array[index]=pd;  _indices.add(index);}  }
class C{  public CpcRunner(Graph graph,Parameters params){  super(graph,params);}  }
class C{  protected void validateResourceAuthorization(HttpServletRequest req,PrincipalUser actualOwner,PrincipalUser currentOwner){  if (!getRemoteUser(req).isPrivileged() && !actualOwner.equals(currentOwner)) {    throw new WebApplicationException(Status.FORBIDDEN.getReasonPhrase(),Status.FORBIDDEN);  }}  }
class C{  @Override public Long llen(final byte[] key){  checkIsInMultiOrPipeline();  client.llen(key);  return client.getIntegerReply();}  }
class C{  public void addCustomCatalog(){  customCatalogs.add(new CustomCatalogEntry(Constants.CUSTOMCATALOG_DEFAULT_TITLE,Constants.CUSTOMCATALOG_DEFAULT_SEARCH,false));  fireTableChangedEvent(new TableModelEvent(this));}  }
class C{  public void tabTitleChanged(int tabId,String title){  StripLayoutTab tab=findTabById(tabId);  if (tab != null)   tab.setAccessibilityDescription(title);}  }
class C{  public int readBit(){  if (current >= 0x10000) {    try {      current=0x100 | in.read();      if (current < 0) {        return -1;      }    } catch (    IOException e) {      throw new IllegalStateException(e);    }  }  int bit=(current >>> 7) & 1;  current<<=1;  return bit;}  }
class C{  public static void init(Context ctx){  initWithParams(ctx,null);}  }
class C{  public Matrix4d transpose(){  return transpose(this);}  }
class C{  @Override public boolean isTransitioning(){  return false;}  }
class C{  public static Exception openFile(File file){  try {    if (java.awt.Desktop.isDesktopSupported()) {      java.awt.Desktop desktop=java.awt.Desktop.getDesktop();      if (desktop.isSupported(java.awt.Desktop.Action.OPEN)) {        desktop.open(file);      }    }  } catch (  Exception e) {    e.printStackTrace();    return e;  }  return null;}  }
class C{  public EditFilterWizardPage(Filter filter,String[] filterFields){  super("EditFilterWizardPage",filterFields);  setTitle("Edit Filter");  setDescription("Edit a display filter for the indicator outline view.");  this.filter=filter;}  }
class C{  public STRtree(int nodeCapacity){  super(nodeCapacity);}  }
class C{  private Response<Bitmap> doFileParse(){  final String requestUrl=getUrl();  File bitmapFile=new File(requestUrl.substring(7,requestUrl.length()));  if (!bitmapFile.exists() || !bitmapFile.isFile()) {    return Response.error(new ParseError(new FileNotFoundException(String.format("File not found: %s",bitmapFile.getAbsolutePath()))));  }  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();  decodeOptions.inInputShareable=true;  decodeOptions.inPurgeable=true;  decodeOptions.inPreferredConfig=mDecodeConfig;  Bitmap bitmap;  if (mMaxWidth == 0 && mMaxHeight == 0) {    bitmap=BitmapFactory.decodeFile(bitmapFile.getAbsolutePath(),decodeOptions);    addMarker("read-full-size-image-from-file");  } else {    decodeOptions.inJustDecodeBounds=true;    BitmapFactory.decodeFile(bitmapFile.getAbsolutePath(),decodeOptions);    int actualWidth=decodeOptions.outWidth;    int actualHeight=decodeOptions.outHeight;    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight,mScaleType);    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth,mScaleType);    decodeOptions.inJustDecodeBounds=false;    decodeOptions.inSampleSize=ImageUtils.findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);    Bitmap tempBitmap=BitmapFactory.decodeFile(bitmapFile.getAbsolutePath(),decodeOptions);    addMarker(String.format("read-from-file-scaled-times-%d",decodeOptions.inSampleSize));    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);      tempBitmap.recycle();      addMarker("scaling-read-from-file-bitmap");    } else {      bitmap=tempBitmap;    }  }  if (bitmap == null) {    return Response.error(new ParseError());  } else {    return Response.success(bitmap,HttpHeaderParser.parseBitmapCacheHeaders(bitmap));  }}  }
class C{  public ZipTextExtractor(Configuration conf){  this.conf=conf;  this.MIME=new MimeUtil(conf);}  }
class C{  public static void vibrate(Context context,int vibrateMilliSec){  Vibrator v=(Vibrator)context.getSystemService(Context.VIBRATOR_SERVICE);  v.vibrate(vibrateMilliSec);}  }
class C{  private String parseFlexFormat(String line,String formatType,int fieldNo){  final char QUOTE='"';  char delimiter=' ';  if (formatType.equals(X_AD_ImpFormat.FORMATTYPE_CommaSeparated)) {    delimiter=',';  } else   if (formatType.equals(X_AD_ImpFormat.FORMATTYPE_TabSeparated)) {    delimiter='\t';  } else   if (formatType.equals(X_AD_ImpFormat.FORMATTYPE_CustomSeparatorChar)) {    delimiter=getSeparatorChar().charAt(0);  } else {    throw new IllegalArgumentException("ImpFormat.parseFlexFormat - unknown format: " + formatType);  }  if (line == null || line.length() == 0 || fieldNo < 0)   return "";  int pos=0;  int length=line.length();  for (int field=1; field <= fieldNo && pos < length; field++) {    StringBuffer content=new StringBuffer();    if (line.charAt(pos) == delimiter) {      pos++;      continue;    }    if (line.charAt(pos) == QUOTE) {      pos++;      while (pos < length) {        if (line.charAt(pos) == QUOTE && pos + 1 < length && line.charAt(pos + 1) == QUOTE) {          content.append(line.charAt(pos++));          pos++;        } else         if (line.charAt(pos) == QUOTE) {          pos++;          break;        } else         content.append(line.charAt(pos++));      }      if (pos < length && line.charAt(pos) != delimiter)       log.info("Did not find delimiter at pos " + pos + " "+ line);      pos++;    } else {      while (pos < length && line.charAt(pos) != delimiter)       content.append(line.charAt(pos++));      pos++;    }    if (field == fieldNo)     return content.toString();  }  return "";}  }
class C{  public MetaData(Class<?> clazz){  String name;  this.clazz=clazz;  Constructor[] ctors=clazz.getConstructors();  constructors=new HashMap<>(ctors.length,1.0f);  for (int i=0, len=ctors.length; i < len; i++) {    constructors.put(getKey(ctors[i].getParameterTypes()),ctors[i]);  }  Method[] meths=clazz.getMethods();  methods=new HashMap<>(meths.length,1.0f);  for (int i=0, len=meths.length; i < len; i++) {    name=meths[i].getName();    HashMap<Integer,Method> methodsMap=methods.get(name);    if (methodsMap == null) {      methodsMap=new HashMap<>(4,1.0f);      methods.put(name,methodsMap);    }    methodsMap.put(getKey(meths[i].getParameterTypes()),meths[i]);  }  meths=clazz.getDeclaredMethods();  declaredMethods=new HashMap<>(meths.length,1.0f);  for (int i=0, len=meths.length; i < len; i++) {    name=meths[i].getName();    HashMap<Integer,Method> declaredMethodsMap=declaredMethods.get(name);    if (declaredMethodsMap == null) {      declaredMethodsMap=new HashMap<>(4,1.0f);      declaredMethods.put(name,declaredMethodsMap);    }    declaredMethodsMap.put(getKey(meths[i].getParameterTypes()),meths[i]);  }  try {    BeanInfo info=Introspector.getBeanInfo(clazz);    PropertyDescriptor[] pds=info.getPropertyDescriptors();    if (pds != null) {      if (propertyDescriptors == null) {        propertyDescriptors=new HashMap<>(pds.length,1.0f);      }      for (      PropertyDescriptor pd : pds) {        propertyDescriptors.put(pd.getName(),pd);      }    }  } catch (  IntrospectionException ie) {    if (LOGGER.isLoggable(Level.SEVERE)) {      LOGGER.log(Level.SEVERE,ie.toString(),ie);    }  }}  }
class C{  public String[] parseToArray(String value){  final String[] strings=value.split(seperator);  for (int i=0; i < strings.length; ++i) {    strings[i]=strings[i].trim();  }  return strings;}  }
class C{  @Override public synchronized int size(){  return elementCount;}  }
class C{  @NotNull public <T>Optional<T> findOptional(@NotNull Class<T> cl,@NotNull @SQL String sql,Object... args){  return findOptional(cl,SqlQuery.query(sql,args));}  }
class C{  public TIntByteHashMap(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  public boolean validSystemNameFormat(String systemName){  return (SerialAddress.validSystemNameFormat(systemName,'L'));}  }
class C{  public final static int parseInt(char[] digitChars,int offset,int len){  int num=digitChars[offset] - '0';  len+=offset;  if (++offset < len) {    num=(num * 10) + (digitChars[offset] - '0');    if (++offset < len) {      num=(num * 10) + (digitChars[offset] - '0');      if (++offset < len) {        num=(num * 10) + (digitChars[offset] - '0');        if (++offset < len) {          num=(num * 10) + (digitChars[offset] - '0');          if (++offset < len) {            num=(num * 10) + (digitChars[offset] - '0');            if (++offset < len) {              num=(num * 10) + (digitChars[offset] - '0');              if (++offset < len) {                num=(num * 10) + (digitChars[offset] - '0');                if (++offset < len) {                  num=(num * 10) + (digitChars[offset] - '0');                }              }            }          }        }      }    }  }  return num;}  }
class C{  public final void validate(String text){  if (copyIfValid(text,buffer,true)) {    newSubnet.setBorder(goodBorder);    saveChangesBtn.setEnabled(true);    int[] newIP=new int[4];    int[] oldIP=originalIP;    int[] nMask=buffer;    for (int i=0; i < 4; i++) {      newIP[i]=oldIP[i] & nMask[i];    }    newIPField.setText(bytesToString(newIP));  } else {    newSubnet.setBorder(errorBorder);    saveChangesBtn.setEnabled(false);  }}  }
class C{  public boolean hasFocus(){  if (getFindPopupMenu() != null && getFindPopupMenu().isVisible()) {    return true;  }  return super.hasFocus();}  }
class C{  public static void writeJSONString(List list,Writer out) throws IOException {  if (list == null) {    out.write("null");    return;  }  boolean first=true;  Iterator iter=list.iterator();  out.write('[');  while (iter.hasNext()) {    if (first)     first=false; else     out.write(',');    Object value=iter.next();    if (value == null) {      out.write("null");      continue;    }    JSONValue.writeJSONString(value,out);  }  out.write(']');}  }
class C{  public boolean removeWhen(When when){  return super.removeElement(when);}  }
class C{  protected void assertCreateFile(File file) throws IOException {  assertTrue("Could not create file '" + file.getAbsolutePath() + "'",file.createNewFile());}  }
class C{  private void initializeDirectionalPermutations(){  permutationCache=new int[2][PermutationUtils.getPermutationLength(flagConfig.vectortype(),flagConfig.dimension())];  permutationCache[0]=PermutationUtils.getShiftPermutation(flagConfig.vectortype(),flagConfig.dimension(),-1);  permutationCache[1]=PermutationUtils.getShiftPermutation(flagConfig.vectortype(),flagConfig.dimension(),1);}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj)   return true;  if (!(obj instanceof Decl))   return false;  if (obj instanceof ContextGetterDecl)   return false;  return name.equals(((Decl)obj).name);}  }
class C{  public static byte[] serializeFeatureSet(Set<Feature> features) throws IOException {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(baos));  writer.write(features.size() + "\n");  for (  Feature feature : features) {    if (feature instanceof DiscreteFeature) {      DiscreteFeature d=(DiscreteFeature)feature;      String s=d.getName();      writer.write("d:" + s + "\n");    } else     if (feature instanceof RealFeature) {      RealFeature r=(RealFeature)feature;      String s=r.getName() + "\t" + r.getValue();      writer.write("r:" + s + "\n");    } else {      throw new RuntimeException("Invalid feature!");    }  }  writer.flush();  return baos.toByteArray();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:07.467 -0500",hash_original_method="6A7DE29092EDA44714340A63C02A4D3B",hash_generated_method="FE59A714AA86440F96C9684260C0FB9F") public Builder(RenderScript rs,int usage){  mRS=rs;  mUsage=usage;  mVertexTypeCount=0;  mVertexTypes=new Entry[16];  mIndexTypes=new Vector();}  }
class C{  public JdbcData(Connection connection,String table){  this(connection,table,true);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public int recordVariable(CtClass type,String varName,SymbolTable tbl) throws CompileError {  if (varName == null)   return -1; else {    int varNo=getMaxLocals();    int locals=varNo + recordVar(type,varName,varNo,tbl);    setMaxLocals(locals);    return varNo;  }}  }
class C{  public synchronized void stopRecording(){  if (isRecordingOn()) {    if (null != stopRecordingFuture) {      if (!stopRecordingFuture.isDone() && !stopRecordingFuture.isCancelled()) {        stopRecordingFuture.cancel(false);      }      stopRecordingFuture=null;    }    Collection<AbstractDataProcessor> recordingDataProcessors=recordingProperties.getRecordingDataProcessors();    if (null != recordingDataProcessors) {      for (      AbstractDataProcessor abstractDataProcessor : recordingDataProcessors) {        abstractDataProcessor.flush();      }    }    if (!involvedAgentsSet.isEmpty()) {      List<SystemInformationData> toRecord=storageDataDao.getSystemInformationData(involvedAgentsSet);      for (      SystemInformationData defaultData : toRecord) {        record(defaultData);      }    }    involvedAgentsSet.clear();    if (log.isDebugEnabled()) {      log.info("Recording stopped for storage: " + getStorageData());    }  } else   if (isRecordingScheduled()) {    if (null != startRecordingFuture) {      if (!startRecordingFuture.isDone() && !startRecordingFuture.isCancelled()) {        startRecordingFuture.cancel(false);      }      startRecordingFuture=null;    }  }  storageWriter=null;  recordingProperties=null;  recordingState=RecordingState.OFF;}  }
class C{  public static SemManipulation serializableInstance(){  return new SemManipulation(SemIm.serializableInstance());}  }
class C{  private void renameScriptStep(ScriptStep step,String name){  RequestData rd=getRequestDataWithKey(step,ScriptConstants.LOGGING_KEY);  rd.setValue(name);}  }
class C{  @Override public void train(DataSet ds){  List<String> attributes=ds.getNonTargetAttributes();  this.tree=decisionTreeLearning(ds,attributes,new ConstantDecisonTree(defaultValue));}  }
class C{  public int numRulesForReset(final RuleSet ruleset,final EvolutionState state,final int thread){  return pickSize(state,thread);}  }
class C{  public boolean isSet(final OPTION option){  return options == null ? false : options.contains(option);}  }
class C{  public void sendToServer(final ModPacket packet){  ec.sendToServer(getProxyPacket(packet));}  }
class C{  public static boolean containsAllUuids(ParcelUuid[] uuidA,ParcelUuid[] uuidB){  if (uuidA == null && uuidB == null)   return true;  if (uuidA == null) {    return uuidB.length == 0 ? true : false;  }  if (uuidB == null)   return true;  HashSet<ParcelUuid> uuidSet=new HashSet<ParcelUuid>(Arrays.asList(uuidA));  for (  ParcelUuid uuid : uuidB) {    if (!uuidSet.contains(uuid))     return false;  }  return true;}  }
class C{  public static Vec4 unProject(Vec4 windowPoint,Matrix modelview,Matrix projection,java.awt.Rectangle viewport){  if (windowPoint == null) {    String message=Logging.getMessage("nullValue.PointIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (modelview == null) {    String message=Logging.getMessage("nullValue.ModelViewIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (projection == null) {    String message=Logging.getMessage("nullValue.ProjectionIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (viewport == null) {    String message=Logging.getMessage("nullValue.ViewportIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  GLU glu=new GLUgl2();  double[] modelviewArray=modelview.toArray(new double[16],0,false);  double[] projectionArray=projection.toArray(new double[16],0,false);  int[] viewportArray=new int[]{viewport.x,viewport.y,viewport.width,viewport.height};  double[] result=new double[3];  if (!glu.gluUnProject(windowPoint.x,windowPoint.y,windowPoint.z,modelviewArray,0,projectionArray,0,viewportArray,0,result,0)) {    return null;  }  return Vec4.fromArray3(result,0);}  }
class C{  public static synchronized void remove(MXSession session){  instances.remove(session);}  }
class C{  public static synchronized ModbusSlave createSerialSlave(SerialParameters serialParams) throws ModbusException {  if (serialParams == null) {    throw new ModbusException("Serial parameters are null");  } else   if (ModbusUtil.isBlank(serialParams.getPortName())) {    throw new ModbusException("Serial port name is empty");  }  if (slaves.containsKey(serialParams.getPortName())) {    return slaves.get(serialParams.getPortName());  } else {    ModbusSlave slave=new ModbusSlave(serialParams);    slaves.put(serialParams.getPortName(),slave);    return slave;  }}  }
class C{  public CompilationUnitChange createChange(boolean generateGroups,IProgressMonitor monitor) throws CoreException {  return createChange(fCu.getElementName(),generateGroups,monitor);}  }
class C{  public T caseTraceCase_(TraceCase_ object){  return null;}  }
class C{  public static void diluteAreaOnly(final Scenario scenario,final Coord center,final double radius){  log.info("Start dilution with center " + center + " and radius "+ radius);  final Set<Id<Person>> personsToKeep=new HashSet<>();  fillSetWithIntersectingPersons(personsToKeep,scenario,center,radius);  final Collection<Id<Person>> pruned=prunePopulation(scenario,personsToKeep);  pruneSocialNetwork(pruned,scenario);  log.info("Finished dilution.");}  }
class C{  public static int indexOf(char[] array,char[] sub){  return indexOf(array,sub,0,array.length);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList employeeList;  Node child;  String childName;  java.util.List result=new java.util.ArrayList();  int length;  java.util.List expectedWhitespace=new java.util.ArrayList();  expectedWhitespace.add("#text");  expectedWhitespace.add("employeeId");  expectedWhitespace.add("#text");  expectedWhitespace.add("name");  expectedWhitespace.add("#text");  expectedWhitespace.add("position");  expectedWhitespace.add("#text");  expectedWhitespace.add("salary");  expectedWhitespace.add("#text");  expectedWhitespace.add("gender");  expectedWhitespace.add("#text");  expectedWhitespace.add("address");  expectedWhitespace.add("#text");  java.util.List expectedNoWhitespace=new java.util.ArrayList();  expectedNoWhitespace.add("employeeId");  expectedNoWhitespace.add("name");  expectedNoWhitespace.add("position");  expectedNoWhitespace.add("salary");  expectedNoWhitespace.add("gender");  expectedNoWhitespace.add("address");  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(2);  employeeList=employeeNode.getChildNodes();  length=(int)employeeList.getLength();  for (int indexN100A4=0; indexN100A4 < employeeList.getLength(); indexN100A4++) {    child=(Node)employeeList.item(indexN100A4);    childName=child.getNodeName();    result.add(childName);  }  if (equals(6,length)) {    assertEquals("nowhitespace",expectedNoWhitespace,result);  } else {    assertEquals("whitespace",expectedWhitespace,result);  }}  }
class C{  private void sortByCrowdingDistance(List<Individual> rank){  Iterator<Individual> f=rank.iterator();  int numberOfCriteria=0;  while (f.hasNext()) {    Individual current=f.next();    current.setCrowdingDistance(0.0d);    numberOfCriteria=Math.max(numberOfCriteria,current.getFitnessValues().length);  }  for (int m=0; m < numberOfCriteria; m++) {    Comparator<Individual> comparator=new CriteriaComparator(m);    Collections.sort(rank,comparator);    rank.get(0).setCrowdingDistance(Double.POSITIVE_INFINITY);    rank.get(rank.size() - 1).setCrowdingDistance(Double.POSITIVE_INFINITY);    for (int i=1; i < (rank.size() - 1); i++) {      Individual current=rank.get(i);      double currentCrowdingDistance=current.getCrowdingDistance();      Individual afterI=rank.get(i + 1);      Individual beforeI=rank.get(i - 1);      double afterPerformance=afterI.getFitnessValues()[m];      double beforePerformance=beforeI.getFitnessValues()[m];      current.setCrowdingDistance(currentCrowdingDistance + Math.abs(afterPerformance - beforePerformance));    }  }  Collections.sort(rank,new CrowdingComparator());}  }
class C{  public void sendConfigurationForm(Form form) throws XMPPException {  MUCOwner iq=new MUCOwner();  iq.setTo(room);  iq.setType(IQ.Type.SET);  iq.addExtension(form.getDataFormToSend());  PacketFilter responseFilter=new PacketIDFilter(iq.getPacketID());  PacketCollector response=connection.createPacketCollector(responseFilter);  connection.sendPacket(iq);  IQ answer=(IQ)response.nextResult(SmackConfiguration.getPacketReplyTimeout());  response.cancel();  if (answer == null) {    throw new XMPPException("No response from server.");  } else   if (answer.getError() != null) {    throw new XMPPException(answer.getError());  }}  }
class C{  public synchronized boolean isMarkup(){  if (Cfg.DEBUG) {    Check.requires(markupId != null,"agentId null");  }  final String markupName=makeMarkupName(markupId,true);  if (Cfg.DEBUG) {    Check.asserts(markupName != "","markupName empty");  }  final AutoFile fileRet=new AutoFile(markupName);  return fileRet.exists();}  }
class C{  public static java.util.Collection<?> values(Struct sct){  ArrayList<Object> arr=new ArrayList<Object>();  Iterator<Object> it=sct.valueIterator();  while (it.hasNext()) {    arr.add(it.next());  }  return arr;}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'updateversionmanager'";  db.execSQL(sql);}  }
class C{  public Set<String> selectFiredTriggerInstanceNames(Connection conn) throws SQLException {  PreparedStatement ps=null;  ResultSet rs=null;  try {    Set<String> instanceNames=new HashSet<String>();    ps=conn.prepareStatement(rtp(SELECT_FIRED_TRIGGER_INSTANCE_NAMES));    rs=ps.executeQuery();    while (rs.next()) {      instanceNames.add(rs.getString(COL_INSTANCE_NAME));    }    return instanceNames;  }  finally {    closeResultSet(rs);    closeStatement(ps);  }}  }
class C{  public void rotate(float rot){  Matrix2f tmp=new Matrix2f();  tmp.loadRotate(rot);  multiply(tmp);}  }
class C{  public void clear(){  if (mData != null)   mData.clear();}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public TokenKeysBundle readBundle() throws Exception {  Configuration config=_coordinator.queryConfiguration(SIGNATURE_KEY_CONFIG,SIGNATURE_KEY_ID);  if (config == null || config.getConfig(SIGNATURE_KEY) == null) {    _log.warn("Token keys bundle not found");    return null;  }  String serializedBundle=config.getConfig(SIGNATURE_KEY);  _log.debug("Read bundle from coordinator: {}",serializedBundle);  return (TokenKeysBundle)SerializerUtils.deserialize(serializedBundle);}  }
class C{  public AccountHeaderBuilder withHeightRes(@DimenRes int heightRes){  this.mHeight=DimenHolder.fromResource(heightRes);  return this;}  }
class C{  public Object visit(ASTLENode node,Object data){  return showNode(node,data);}  }
class C{  static void appendConstant(final StringBuffer buf,final Object cst){  if (cst == null) {    buf.append("null");  } else   if (cst instanceof String) {    appendString(buf,(String)cst);  } else   if (cst instanceof Type) {    buf.append("Type.getType(\"");    buf.append(((Type)cst).getDescriptor());    buf.append("\")");  } else   if (cst instanceof Handle) {    buf.append("new Handle(");    Handle h=(Handle)cst;    buf.append("Opcodes.").append(HANDLE_TAG[h.getTag()]).append(", \"");    buf.append(h.getOwner()).append("\", \"");    buf.append(h.getName()).append("\", \"");    buf.append(h.getDesc()).append("\")");  } else   if (cst instanceof Byte) {    buf.append("new Byte((byte)").append(cst).append(')');  } else   if (cst instanceof Boolean) {    buf.append(((Boolean)cst).booleanValue() ? "Boolean.TRUE" : "Boolean.FALSE");  } else   if (cst instanceof Short) {    buf.append("new Short((short)").append(cst).append(')');  } else   if (cst instanceof Character) {    int c=((Character)cst).charValue();    buf.append("new Character((char)").append(c).append(')');  } else   if (cst instanceof Integer) {    buf.append("new Integer(").append(cst).append(')');  } else   if (cst instanceof Float) {    buf.append("new Float(\"").append(cst).append("\")");  } else   if (cst instanceof Long) {    buf.append("new Long(").append(cst).append("L)");  } else   if (cst instanceof Double) {    buf.append("new Double(\"").append(cst).append("\")");  } else   if (cst instanceof byte[]) {    byte[] v=(byte[])cst;    buf.append("new byte[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append(v[i]);    }    buf.append('}');  } else   if (cst instanceof boolean[]) {    boolean[] v=(boolean[])cst;    buf.append("new boolean[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append(v[i]);    }    buf.append('}');  } else   if (cst instanceof short[]) {    short[] v=(short[])cst;    buf.append("new short[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append("(short)").append(v[i]);    }    buf.append('}');  } else   if (cst instanceof char[]) {    char[] v=(char[])cst;    buf.append("new char[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append("(char)").append((int)v[i]);    }    buf.append('}');  } else   if (cst instanceof int[]) {    int[] v=(int[])cst;    buf.append("new int[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append(v[i]);    }    buf.append('}');  } else   if (cst instanceof long[]) {    long[] v=(long[])cst;    buf.append("new long[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append(v[i]).append('L');    }    buf.append('}');  } else   if (cst instanceof float[]) {    float[] v=(float[])cst;    buf.append("new float[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append(v[i]).append('f');    }    buf.append('}');  } else   if (cst instanceof double[]) {    double[] v=(double[])cst;    buf.append("new double[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append(v[i]).append('d');    }    buf.append('}');  }}  }
class C{  public void fireVetoableChange(String name,Object oldValue,Object newValue) throws PropertyVetoException {  beanContextChildSupport.fireVetoableChange(name,oldValue,newValue);}  }
class C{  public void flushToDisk() throws IOException {  throw new UnsupportedOperationException(getClass().getName());}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.DERIVED_ATTRIBUTE___ANONYMOUS_DERIVED_ATTRIBUTE_11:    return ((InternalEList<?>)getAnonymous_derivedAttribute_1_1()).basicRemove(otherEnd,msgs);case UmplePackage.DERIVED_ATTRIBUTE___ANONYMOUS_DERIVED_ATTRIBUTE_21:  return ((InternalEList<?>)getAnonymous_derivedAttribute_2_1()).basicRemove(otherEnd,msgs);case UmplePackage.DERIVED_ATTRIBUTE___ANONYMOUS_DERIVED_ATTRIBUTE_31:return ((InternalEList<?>)getAnonymous_derivedAttribute_3_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void removeQueryExecuteListener(QueryExecuteListener l){  m_QueryExecuteListeners.remove(l);}  }
class C{  public void rebuildStackMapIf6(ClassPool pool,ClassFile cf) throws BadBytecode {  if (cf.getMajorVersion() >= ClassFile.JAVA_6)   rebuildStackMap(pool);  if (doPreverify)   rebuildStackMapForME(pool);}  }
class C{  public Builder modules(DebugModule... drawerItems){  this.drawerItems=drawerItems;  return this;}  }
class C{  protected void drawText(DrawContext dc,Iterable<NodeLayout> nodes){  GL2 gl=dc.getGL().getGL2();  TreeAttributes attributes=this.getActiveAttributes();  Color color=attributes.getColor();  float[] colorRGB=color.getRGBColorComponents(null);  TextRenderer textRenderer=OGLTextRenderer.getOrCreateTextRenderer(dc.getTextRendererCache(),attributes.getFont(),true,false,false);  gl.glPolygonMode(GL2.GL_FRONT,GL2.GL_FILL);  try {    textRenderer.begin3DRendering();    textRenderer.setColor(colorRGB[0],colorRGB[1],colorRGB[2],1);    for (    NodeLayout layout : nodes) {      String text=this.getText(layout.node);      Rectangle2D textBounds=this.getTextBounds(dc,text,attributes.getFont());      int textHeight=(int)Math.abs(textBounds.getY());      int vertAdjust=layout.bounds.height - textHeight - (this.lineHeight - textHeight) / 2;      textRenderer.draw(text,layout.drawPoint.x,layout.drawPoint.y + vertAdjust);    }  }  finally {    textRenderer.end3DRendering();  }}  }
class C{  private void deleteDirectory(File dir){  try {    for (    File file : dir.listFiles()) {      if (file.isDirectory()) {        deleteDirectory(file);      } else {        if (file.delete() == false) {          log("ERROR: unable to delete directory: " + file);        }      }    }    if (dir.delete() == false) {      log("ERROR: unable to delete directory: " + dir);    }  } catch (  Exception e) {    log("ERROR: deleting directories failed: " + e.getMessage());  }}  }
class C{  public Builder widthPx(int drawerWidthPx){  this.drawerWidth=drawerWidthPx;  return this;}  }
class C{  public GeoJsonWriter(){  this(8);}  }
class C{  public static void f(String tag,String msg){  if (sLevel > LEVEL_FATAL) {    return;  }  Log.wtf(tag,msg);}  }
class C{  @Override protected void addEquipment(Mounted mounted,int loc,boolean rearMounted,int shots) throws LocationFullException {  if (mounted.getType() instanceof AmmoType) {    if (-1 != shots) {      mounted.setShotsLeft(shots);      mounted.setOriginalShots(shots);      super.addEquipment(mounted,loc,rearMounted);      return;    }  }  if (mounted.getType() instanceof WeaponType) {switch (loc) {case LOC_HEAD:case LOC_LEG:case LOC_NMISS:      throw new LocationFullException("Weapon " + mounted.getName() + " can't be mounted in "+ getLocationAbbr(loc));case LOC_MAINGUN:    if (bHasMainGun) {      if (!isQuad() || bHas2ndMainGun) {        throw new LocationFullException("Already has Main Gun");      } else {        bHas2ndMainGun=true;        mounted.setLocation(loc,rearMounted);        equipmentList.add(mounted);        weaponList.add(mounted);        totalWeaponList.add(mounted);        break;      }    }  bHasMainGun=true;mounted.setLocation(loc,rearMounted);equipmentList.add(mounted);weaponList.add(mounted);totalWeaponList.add(mounted);break;case LOC_LARM:if (bHasLArmGun) {throw new LocationFullException("Already has LArm Gun");}bHasLArmGun=true;mounted.setLocation(loc,rearMounted);equipmentList.add(mounted);weaponList.add(mounted);totalWeaponList.add(mounted);break;case LOC_RARM:if (bHasRArmGun) {throw new LocationFullException("Already has RArm Gun");}bHasRArmGun=true;mounted.setLocation(loc,rearMounted);equipmentList.add(mounted);weaponList.add(mounted);totalWeaponList.add(mounted);break;case LOC_TORSO:if ((getWeight() < 10) && !isQuad()) {if (bHasTorsoAGun) {if (bHasTorsoBGun) {throw new LocationFullException("Already has both torso guns");}bHasTorsoBGun=true;mounted.setLocation(loc,rearMounted);equipmentList.add(mounted);weaponList.add(mounted);totalWeaponList.add(mounted);torsoBGunNum=getEquipmentNum(mounted);} else {bHasTorsoAGun=true;mounted.setLocation(loc,rearMounted);equipmentList.add(mounted);weaponList.add(mounted);totalWeaponList.add(mounted);torsoAGunNum=getEquipmentNum(mounted);}break;} else if (isQuad()) {if (getWeight() < 10) {if (bHasTorsoAGun) {if (bHasTorsoBGun) {if (bHasTorsoCGun) {if (bHasTorsoDGun) {throw new LocationFullException("Already has all four torso guns");}bHasTorsoDGun=true;mounted.setLocation(loc,rearMounted);equipmentList.add(mounted);weaponList.add(mounted);totalWeaponList.add(mounted);torsoDGunNum=getEquipmentNum(mounted);} else {bHasTorsoCGun=true;mounted.setLocation(loc,rearMounted);equipmentList.add(mounted);weaponList.add(mounted);totalWeaponList.add(mounted);torsoCGunNum=getEquipmentNum(mounted);}} else {bHasTorsoBGun=true;mounted.setLocation(loc,rearMounted);equipmentList.add(mounted);weaponList.add(mounted);totalWeaponList.add(mounted);torsoBGunNum=getEquipmentNum(mounted);}} else {bHasTorsoAGun=true;mounted.setLocation(loc,rearMounted);equipmentList.add(mounted);weaponList.add(mounted);totalWeaponList.add(mounted);torsoAGunNum=getEquipmentNum(mounted);}} else {if (bHasTorsoAGun) {if (bHasTorsoBGun) {if (bHasTorsoCGun) {if (bHasTorsoDGun) {if (bHasTorsoEGun) {if (bHasTorsoFGun) {throw new LocationFullException("Already has all six torso guns");}bHasTorsoFGun=true;mounted.setLocation(loc,rearMounted);equipmentList.add(mounted);weaponList.add(mounted);totalWeaponList.add(mounted);torsoFGunNum=getEquipmentNum(mounted);} else {bHasTorsoEGun=true;mounted.setLocation(loc,rearMounted);equipmentList.add(mounted);weaponList.add(mounted);totalWeaponList.add(mounted);torsoEGunNum=getEquipmentNum(mounted);}} else {bHasTorsoDGun=true;mounted.setLocation(loc,rearMounted);equipmentList.add(mounted);weaponList.add(mounted);totalWeaponList.add(mounted);torsoDGunNum=getEquipmentNum(mounted);}} else {bHasTorsoCGun=true;mounted.setLocation(loc,rearMounted);equipmentList.add(mounted);weaponList.add(mounted);totalWeaponList.add(mounted);torsoCGunNum=getEquipmentNum(mounted);}} else {bHasTorsoBGun=true;mounted.setLocation(loc,rearMounted);equipmentList.add(mounted);weaponList.add(mounted);totalWeaponList.add(mounted);torsoBGunNum=getEquipmentNum(mounted);}} else {bHasTorsoAGun=true;mounted.setLocation(loc,rearMounted);equipmentList.add(mounted);weaponList.add(mounted);totalWeaponList.add(mounted);torsoAGunNum=getEquipmentNum(mounted);}}} else {if (bHasTorsoAGun) {if (bHasTorsoBGun) {if (bHasTorsoCGun) {throw new LocationFullException("Already has all three torso guns");}bHasTorsoCGun=true;mounted.setLocation(loc,rearMounted);equipmentList.add(mounted);weaponList.add(mounted);totalWeaponList.add(mounted);torsoCGunNum=getEquipmentNum(mounted);}bHasTorsoBGun=true;mounted.setLocation(loc,rearMounted);equipmentList.add(mounted);weaponList.add(mounted);totalWeaponList.add(mounted);torsoBGunNum=getEquipmentNum(mounted);} else {bHasTorsoAGun=true;mounted.setLocation(loc,rearMounted);equipmentList.add(mounted);weaponList.add(mounted);totalWeaponList.add(mounted);torsoAGunNum=getEquipmentNum(mounted);}}}} else {super.addEquipment(mounted,loc,rearMounted);}}  }
class C{  public int divide(int dividend,int divisor){  if (divisor == 0)   return Integer.MAX_VALUE;  if (dividend == 0)   return 0;  if (divisor == 1)   return dividend;  if (divisor == -1)   return dividend == Integer.MIN_VALUE ? Integer.MAX_VALUE : -dividend;  final boolean neg=(dividend > 0 && divisor < 0) || (dividend < 0 && divisor > 0);  long ldividend=Math.abs((long)dividend);  final long ldivisor=Math.abs((long)divisor);  int res=0;  for (int bit=Integer.SIZE - 1; bit >= 0 && ldividend >= ldivisor; bit--) {    if (ldividend >= (ldivisor << bit)) {      res|=1 << bit;      ldividend-=ldivisor << bit;    }  }  return neg ? -res : res;}  }
class C{  boolean isMaximized(){  if (window instanceof Frame) {    return ((Frame)window).getExtendedState() == Frame.MAXIMIZED_BOTH;  }  return false;}  }
class C{  public TModule basicGetReexportedFrom(){  return reexportedFrom;}  }
class C{  @SneakyThrows public static X509Certificate readCertificate(byte[] certBytes){  try (InputStream is=new ByteArrayInputStream(certBytes)){    return readCertificate(is);  } }  }
class C{  public Chat createChat(String userJID,String thread,MessageListener listener){  if (thread == null) {    thread=nextID();  }  Chat chat=threadChats.get(thread);  if (chat != null) {    throw new IllegalArgumentException("ThreadID is already used");  }  chat=createChat(userJID,thread,true);  chat.addMessageListener(listener);  return chat;}  }
class C{  public static void formatDouble(double source,int decimals,int precision,StringBuffer target){  int scale=(Math.abs(source) >= 1.0) ? decimals : precision;  if (tooManyDigitsUsed(source,scale) || tooCloseToRound(source,scale)) {    formatDoublePrecise(source,decimals,precision,target);  } else {    formatDoubleFast(source,decimals,precision,target);  }}  }
class C{  public static void putInt(ByteBuffer buffer,int val,ByteOrder order){  int offset=buffer.position();  putInt(buffer,val,offset,order);  buffer.position(offset + 4);}  }
class C{  public void checkAutoTweet(){  if (!getAutoTweet()) {    return;  }  log("Autotweeting",Level.FINE);  try {    Network memory=getBot().memory().newMemory();    Vertex twitter=memory.createVertex(getPrimitive());    Vertex vertex=twitter.getRelationship(Primitive.LASTTWEET);    long last=0;    if (vertex != null) {      last=((Timestamp)vertex.getData()).getTime();    }    long millis=getAutoTweetHours() * 60 * 60* 1000;    if ((System.currentTimeMillis() - last) < millis) {      log("Autotweeting hours not reached",Level.FINE,getAutoTweetHours());      return;    }    List<Vertex> autotweets=getAutoTweets(memory);    if (autotweets != null && !autotweets.isEmpty()) {      int index=Utils.random().nextInt(autotweets.size());      Vertex tweet=autotweets.get(index);      String text=null;      if (tweet.instanceOf(Primitive.LABEL)) {        tweet=tweet.mostConscious(Primitive.RESPONSE);      }      if (tweet.instanceOf(Primitive.FORMULA)) {        Map<Vertex,Vertex> variables=new HashMap<Vertex,Vertex>();        SelfCompiler.addGlobalVariables(memory.createInstance(Primitive.INPUT),null,memory,variables);        Vertex result=getBot().mind().getThought(Language.class).evaluateFormula(tweet,variables,memory);        if (result != null) {          text=getBot().mind().getThought(Language.class).getWord(result,memory).getDataValue();        } else {          log("Invalid autotweet template formula",Level.WARNING,tweet);          text=null;        }      } else {        text=tweet.printString();      }      if (text != null) {        log("Autotweeting",Level.INFO,tweet);        tweet(text,0L);        Utils.sleep(100);        twitter.setRelationship(Primitive.LASTTWEET,memory.createTimestamp());        memory.save();      }    }  } catch (  Exception exception) {    log(exception);  }}  }
class C{  public static void fill(byte[] array,byte value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  @Override public String toString(){  String result=null;  int year=this.get(YEAR);  int month=this.get(MONTH) + 1;  int day=this.get(DAY_OF_MONTH);  int hour=this.get(HOUR_OF_DAY);  int minute=this.get(MINUTE);  int second=this.get(SECOND);  int millisecond=this.get(MILLISECOND);  result=String.format("%04d%02d%02d_%02d%02d_%02d.%03d",year,month,day,hour,minute,second,millisecond);  return result;}  }
class C{  public Builder withTerm(long term){  request.term=Assert.argNot(term,term < 0,"term must not be negative");  return this;}  }
class C{  public void addPriorityPackage(String pkg){  if (_priorityPackages == null)   _priorityPackages=new String[0];  int oldLength=_priorityPackages.length;  String[] newPkgs=new String[oldLength + 1];  System.arraycopy(_priorityPackages,0,newPkgs,0,oldLength);  if (!pkg.endsWith("."))   pkg=pkg + '.';  newPkgs[oldLength]=pkg;  _priorityPackages=newPkgs;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void clearWarnings() throws SQLException {synchronized (checkClosed().getConnectionMutex()) {    this.warningChain=null;  }}  }
class C{  @RequestProcessing(value="/admin/user/{userId}/exchange-point",method=HTTPRequestMethod.POST) @Before(adviceClass={StopwatchStartAdvice.class,AdminCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void exchangePoint(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response,final String userId) throws Exception {  final String pointStr=request.getParameter(Common.POINT);  try {    final int point=Integer.valueOf(pointStr);    final JSONObject user=userQueryService.getUser(userId);    final int currentPoint=user.optInt(UserExt.USER_POINT);    if (currentPoint - point < Symphonys.getInt("pointExchangeMin")) {      final AbstractFreeMarkerRenderer renderer=new SkinRenderer();      context.setRenderer(renderer);      renderer.setTemplateName("admin/error.ftl");      final Map<String,Object> dataModel=renderer.getDataModel();      dataModel.put(Keys.MSG,langPropsService.get("insufficientBalanceLabel"));      filler.fillHeaderAndFooter(request,response,dataModel);      return;    }    final String memo=String.valueOf(Math.floor(point / (double)Symphonys.getInt("pointExchangeUnit")));    final String transferId=pointtransferMgmtService.transfer(userId,Pointtransfer.ID_C_SYS,Pointtransfer.TRANSFER_TYPE_C_EXCHANGE,point,memo);    final JSONObject notification=new JSONObject();    notification.put(Notification.NOTIFICATION_USER_ID,userId);    notification.put(Notification.NOTIFICATION_DATA_ID,transferId);    notificationMgmtService.addPointExchangeNotification(notification);  } catch (  final Exception e) {    final AbstractFreeMarkerRenderer renderer=new SkinRenderer();    context.setRenderer(renderer);    renderer.setTemplateName("admin/error.ftl");    final Map<String,Object> dataModel=renderer.getDataModel();    dataModel.put(Keys.MSG,e.getMessage());    filler.fillHeaderAndFooter(request,response,dataModel);    return;  }  response.sendRedirect(Latkes.getServePath() + "/admin/user/" + userId);}  }
class C{  public ContextDestroyer initiate(){  validateScanners();  final Context context=createContext();  final ContextDestroyer contextDestroyer=new ContextDestroyer();  mapInContext(context,processors);  mapInContext(context,manuallyAddedComponents);  initiateMetaComponents(context,contextDestroyer);  invokeProcessorActionsBeforeInitiation();  initiateRegularComponents(context,contextDestroyer);  invokeProcessorActionsAfterInitiation(context,contextDestroyer);  finishContext(context);  return contextDestroyer;}  }
class C{  public int readHeader() throws IOException {  _leis.readInt();  _leis.skipBytes(20);  _leis.readInt();  _leis.readLEInt();  int shapeType=_leis.readLEInt();  _leis.readLEDouble();  _leis.readLEDouble();  _leis.readLEDouble();  _leis.readLEDouble();  _leis.readLEDouble();  _leis.readLEDouble();  _leis.readLEDouble();  _leis.readLEDouble();  return shapeType;}  }
class C{  protected void prepareData() throws Exception {  if (m_Instances == null) {    throw new Exception("No instances have been set");  }  if (m_RunColumnSet == -1) {    m_RunColumn=m_Instances.numAttributes() - 1;  } else {    m_RunColumn=m_RunColumnSet;  }  if (m_ResultsetKeyColumnsRange == null) {    throw new Exception("No result specifier columns have been set");  }  m_ResultsetKeyColumnsRange.setUpper(m_Instances.numAttributes() - 1);  m_ResultsetKeyColumns=m_ResultsetKeyColumnsRange.getSelection();  if (m_DatasetKeyColumnsRange == null) {    throw new Exception("No dataset specifier columns have been set");  }  m_DatasetKeyColumnsRange.setUpper(m_Instances.numAttributes() - 1);  m_DatasetKeyColumns=m_DatasetKeyColumnsRange.getSelection();  m_Resultsets.clear();  m_DatasetSpecifiers.removeAllSpecifiers();  for (int i=0; i < m_Instances.numInstances(); i++) {    Instance current=m_Instances.instance(i);    if (current.isMissing(m_RunColumn)) {      throw new Exception("Instance has missing value in run " + "column!\n" + current);    }    for (    int m_ResultsetKeyColumn : m_ResultsetKeyColumns) {      if (current.isMissing(m_ResultsetKeyColumn)) {        throw new Exception("Instance has missing value in resultset key " + "column " + (m_ResultsetKeyColumn + 1) + "!\n"+ current);      }    }    for (    int m_DatasetKeyColumn : m_DatasetKeyColumns) {      if (current.isMissing(m_DatasetKeyColumn)) {        throw new Exception("Instance has missing value in dataset key " + "column " + (m_DatasetKeyColumn + 1) + "!\n"+ current);      }    }    boolean found=false;    for (int j=0; j < m_Resultsets.size(); j++) {      Resultset resultset=m_Resultsets.get(j);      if (resultset.matchesTemplate(current)) {        resultset.add(current);        found=true;        break;      }    }    if (!found) {      Resultset resultset=new Resultset(current);      m_Resultsets.add(resultset);    }    m_DatasetSpecifiers.add(current);  }  for (int j=0; j < m_Resultsets.size(); j++) {    Resultset resultset=m_Resultsets.get(j);    if (m_FoldColumn >= 0) {      resultset.sort(m_FoldColumn);    }    resultset.sort(m_RunColumn);  }  m_ResultsetsValid=true;}  }
class C{  private Throwable prepareFault() throws IOException {  HashMap fault=readFault();  Object detail=fault.get("detail");  String message=(String)fault.get("message");  if (detail instanceof Throwable) {    _replyFault=(Throwable)detail;    if (message != null && _detailMessageField != null) {      try {        _detailMessageField.set(_replyFault,message);      } catch (      Throwable e) {      }    }    return _replyFault;  } else {    String code=(String)fault.get("code");    _replyFault=new BurlapServiceException(message,code,detail);    return _replyFault;  }}  }
class C{  public static void encodeToFile(byte[] dataToEncode,String filename) throws java.io.IOException {  if (dataToEncode == null) {    throw new NullPointerException("Data to encode was null.");  }  B64OutputStream bos=null;  try {    bos=new B64OutputStream(new java.io.FileOutputStream(filename),Base64.ENCODE);    bos.write(dataToEncode);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }}  }
class C{  private void scheduleCopies(BasicBlock bb,LiveAnalysis live){  if (DEBUG)   VM.sysWrite("scheduleCopies: " + bb + "\n");  LiveSet out=new LiveSet();  for (Enumeration<BasicBlock> outBlocks=bb.getOut(); outBlocks.hasMoreElements(); ) {    BasicBlock ob=outBlocks.nextElement();    LiveAnalysis.BBLiveElement le=live.getLiveInfo(ob);    out.add(le.getIn());  }  HashSet<Register> usedByAnother=new HashSet<Register>(4);  HashMap<BasicBlock,BasicBlock> criticalBlocks=new HashMap<BasicBlock,BasicBlock>(4);  HashMap<BasicBlock,HashMap<Register,Register>> currentNames=new HashMap<BasicBlock,HashMap<Register,Register>>(4);  HashMap<Register,Register> bbNames=new HashMap<Register,Register>(4);  final LinkedList<Copy> copySet=new LinkedList<Copy>();  final LinkedList<Copy> workList=new LinkedList<Copy>();  Enumeration<BasicBlock> e=bb.getOut();  while (e.hasMoreElements()) {    BasicBlock bbs=e.nextElement();    if (bbs.isExit())     continue;    for (Instruction phi=bbs.firstInstruction(); phi != bbs.lastInstruction(); phi=phi.nextInstructionInCodeOrder()) {      if (phi.operator() != PHI)       continue;      for (int index=0; index < Phi.getNumberOfPreds(phi); index++) {        if (Phi.getPred(phi,index).block != bb)         continue;        Operand rval=Phi.getValue(phi,index);        if (rval.isRegister() && Phi.getResult(phi).asRegister().getRegister() == rval.asRegister().getRegister()) {          continue;        }        Copy c=new Copy(phi,index);        copySet.add(0,c);        if (c.source instanceof RegisterOperand) {          Register r=c.source.asRegister().getRegister();          usedByAnother.add(r);        }      }    }  }  for (Iterator<Copy> copySetIter=copySet.iterator(); copySetIter.hasNext(); ) {    Copy c=copySetIter.next();    if (!usedByAnother.contains(c.destination.getRegister())) {      workList.add(0,c);      copySetIter.remove();    }  }  while (!workList.isEmpty() || !copySet.isEmpty()) {    while (!workList.isEmpty()) {      Copy c=workList.remove(0);      Register r=c.destination.getRegister();      TypeReference tt=c.destination.getType();      if (VM.VerifyAssertions && tt == null) {        tt=TypeReference.Int;        VM.sysWrite("SSA, warning: null type in " + c.destination + "\n");      }      Register rr=null;      if (c.source.isRegister())       rr=c.source.asRegister().getRegister();      boolean shouldSplitBlock=!c.phi.getBasicBlock().isExceptionHandlerBasicBlock() && ((ir.options.SSA_SPLITBLOCK_TO_AVOID_RENAME && out.contains(r)) || (rr != null && ir.options.SSA_SPLITBLOCK_FOR_LOCAL_LIVE && usedBelowCopy(bb,rr)));      if (ir.options.SSA_SPLITBLOCK_INTO_INFREQUENT) {        if (!bb.getInfrequent() && c.phi.getBasicBlock().getInfrequent() && !c.phi.getBasicBlock().isExceptionHandlerBasicBlock()) {          shouldSplitBlock=true;        }      }      if (out.contains(r) && !shouldSplitBlock) {        if (!globalRenamePhis.contains(r)) {          Register t=ir.regpool.getReg(r);          Instruction save=SSA.makeMoveInstruction(ir,t,r,tt);          if (DEBUG) {            VM.sysWriteln("Inserting " + save + " before "+ c.phi+ " in "+ c.phi.getBasicBlock());          }          c.phi.insertAfter(save);          globalRenamePhis.add(r);          globalRenameTable.add(save);        }      }      Instruction ci=null;      if (c.source instanceof ConstantOperand) {        if (c.source instanceof UnreachableOperand) {          ci=null;        } else {          ci=SSA.makeMoveInstruction(ir,r,(ConstantOperand)c.source);        }      } else       if (c.source instanceof RegisterOperand) {        if (shouldSplitBlock) {          if (DEBUG)           VM.sysWriteln("splitting edge: " + bb + "->"+ c.phi.getBasicBlock());          BasicBlock criticalBlock=criticalBlocks.get(c.phi.getBasicBlock());          if (criticalBlock == null) {            criticalBlock=IRTools.makeBlockOnEdge(bb,c.phi.getBasicBlock(),ir);            if (c.phi.getBasicBlock().getInfrequent()) {              criticalBlock.setInfrequent();            }            splitSomeBlock=true;            criticalBlocks.put(c.phi.getBasicBlock(),criticalBlock);            HashMap<Register,Register> newNames=new HashMap<Register,Register>(4);            currentNames.put(criticalBlock,newNames);          }          Register sr=c.source.asRegister().getRegister();          HashMap<Register,Register> criticalBlockNames=currentNames.get(criticalBlock);          Register nameForSR=criticalBlockNames.get(sr);          if (nameForSR == null) {            nameForSR=bbNames.get(sr);            if (nameForSR == null)             nameForSR=sr;          }          if (DEBUG)           VM.sysWriteln("dest(r): " + r);          if (DEBUG)           VM.sysWriteln("sr: " + sr + ", nameForSR: "+ nameForSR);          ci=SSA.makeMoveInstruction(ir,r,nameForSR,tt);          criticalBlockNames.put(sr,r);          criticalBlock.appendInstructionRespectingTerminalBranch(ci);        } else {          Register sr=c.source.asRegister().getRegister();          Register nameForSR=bbNames.get(sr);          if (nameForSR == null)           nameForSR=sr;          if (DEBUG)           VM.sysWriteln("not splitting edge: " + bb + "->"+ c.phi.getBasicBlock());          if (DEBUG)           VM.sysWriteln("dest(r): " + r);          if (DEBUG)           VM.sysWriteln("sr: " + sr + ", nameForSR: "+ nameForSR);          ci=SSA.makeMoveInstruction(ir,r,nameForSR,tt);          bbNames.put(sr,r);          SSA.addAtEnd(ir,bb,ci,c.phi.getBasicBlock().isExceptionHandlerBasicBlock());        }        ci=null;      } else {        throw new OptimizingCompilerException("Unexpected phi operand " + c.source + " encountered during SSA teardown",true);      }      if (ci != null) {        if (shouldSplitBlock) {          if (DEBUG)           VM.sysWriteln("splitting edge: " + bb + "->"+ c.phi.getBasicBlock());          BasicBlock criticalBlock=criticalBlocks.get(c.phi.getBasicBlock());          if (criticalBlock == null) {            criticalBlock=IRTools.makeBlockOnEdge(bb,c.phi.getBasicBlock(),ir);            if (c.phi.getBasicBlock().getInfrequent()) {              criticalBlock.setInfrequent();            }            splitSomeBlock=true;            criticalBlocks.put(c.phi.getBasicBlock(),criticalBlock);            HashMap<Register,Register> newNames=new HashMap<Register,Register>(4);            currentNames.put(criticalBlock,newNames);          }          criticalBlock.appendInstructionRespectingTerminalBranch(ci);        } else {          SSA.addAtEnd(ir,bb,ci,c.phi.getBasicBlock().isExceptionHandlerBasicBlock());        }      }      if (c.source instanceof RegisterOperand) {        Register saved=c.source.asRegister().getRegister();        Iterator<Copy> copySetIter=copySet.iterator();        while (copySetIter.hasNext()) {          Copy cc=copySetIter.next();          if (cc.destination.asRegister().getRegister() == saved) {            workList.add(0,cc);            copySetIter.remove();          }        }      }    }    if (!copySet.isEmpty()) {      Copy c=copySet.remove(0);      Register tt=ir.regpool.getReg(c.destination.getRegister());      SSA.addAtEnd(ir,bb,SSA.makeMoveInstruction(ir,tt,c.destination.getRegister(),c.destination.getType()),c.phi.getBasicBlock().isExceptionHandlerBasicBlock());      bbNames.put(c.destination.getRegister(),tt);      workList.add(0,c);    }  }}  }
class C{  public void animate(MarkerWithPosition marker,LatLng from,LatLng to){  lock.lock();  mAnimationTasks.add(new AnimationTask(marker,from,to));  lock.unlock();}  }
class C{  public Boolean isTsoEnabled(){  return tsoEnabled;}  }
class C{  protected void checkTypeArguments(Tree toptree,List<? extends AnnotatedTypeParameterBounds> paramBounds,List<? extends AnnotatedTypeMirror> typeargs,List<? extends Tree> typeargTrees){  if (paramBounds.isEmpty()) {    return;  }  assert paramBounds.size() == typeargs.size() : "BaseTypeVisitor.checkTypeArguments: mismatch between type arguments: " + typeargs + " and type parameter bounds"+ paramBounds;  Iterator<? extends AnnotatedTypeParameterBounds> boundsIter=paramBounds.iterator();  Iterator<? extends AnnotatedTypeMirror> argIter=typeargs.iterator();  while (boundsIter.hasNext()) {    AnnotatedTypeParameterBounds bounds=boundsIter.next();    AnnotatedTypeMirror typeArg=argIter.next();    if (shouldBeCaptureConverted(typeArg,bounds)) {      continue;    }    AnnotatedTypeMirror paramUpperBound=bounds.getUpperBound();    if (typeArg.getKind() == TypeKind.WILDCARD) {      paramUpperBound=atypeFactory.widenToUpperBound(paramUpperBound,(AnnotatedWildcardType)typeArg);    }    if (typeargTrees == null || typeargTrees.isEmpty()) {      commonAssignmentCheck(paramUpperBound,typeArg,toptree,"type.argument.type.incompatible");    } else {      commonAssignmentCheck(paramUpperBound,typeArg,typeargTrees.get(typeargs.indexOf(typeArg)),"type.argument.type.incompatible");    }    if (!atypeFactory.getTypeHierarchy().isSubtype(bounds.getLowerBound(),typeArg)) {      if (typeargTrees == null || typeargTrees.isEmpty()) {        checker.report(Result.failure("type.argument.type.incompatible",typeArg,bounds),toptree);      } else {        checker.report(Result.failure("type.argument.type.incompatible",typeArg,bounds),typeargTrees.get(typeargs.indexOf(typeArg)));      }    }  }}  }
class C{  public final byte[] toBytes(String s){  if (s == null) {    return null;  }  int length=s.length();  byte[] bytes=new byte[length];  for (int i=0; i < length; i++) {    bytes[i]=this.charToByteMap[s.charAt(i)];  }  return bytes;}  }
class C{  protected boolean updateNextIndex(){  if (nextIndex == -1 && !parent.isExpanded())   return false;  if (childCount == 0)   return false; else   if (++nextIndex >= childCount)   return false;  TreeStateNode child=(TreeStateNode)parent.getChildAt(nextIndex);  if (child != null && child.isExpanded()) {    parent=child;    nextIndex=-1;    childCount=child.getChildCount();  }  return true;}  }
class C{  public void findAndUndo(Object someObj){  if (someObj instanceof PropertyHandler && propertyHandler == someObj) {    Debug.message("addable","LayerAddPanel removing PropertyHandler");    propertyHandler=null;  }  if (someObj instanceof LayerHandler && someObj == layerHandler) {    Debug.message("addable","LayerAddPanel removing LayerHandler");    layerHandler=null;  }}  }
class C{  public short[] multVect(short scalar,short[] vector){  short rslt[]=new short[vector.length];  for (int n=0; n < rslt.length; n++) {    rslt[n]=GF2Field.multElem(scalar,vector[n]);  }  return rslt;}  }
class C{  @Override protected void onRestart(){  super.onRestart();  Log.d(TAG,"onRestart() - the activity is about to be restarted()");}  }
class C{  private boolean validateTable(Table table){  if (methodPk) {    if (table.getPrimaryKey() != null && table.getPrimaryKey().getColumns().size() == 1 && !isNumericCol(table.getPrimaryKey().getColumns().get(0))) {      println("WARNING: " + table.getName() + " has a single-column PK, but it's not numeric");      return false;    } else     if (table.getPrimaryKey() != null && table.getPrimaryKey().getColumns().size() != 1) {      String pkCols="";      for (      Column column : table.getPrimaryKey().getColumns()) {        pkCols+=" " + column.getName();      }      println(String.format("WARNING: PK method works with tables having a single-column numeric PK." + " PK of %s:%s",table.getName(),pkCols));      return false;    } else     if (table.getPrimaryKey() == null) {      println(String.format("WARNING: PK method works with tables having a single-column numeric PK, " + "while table %s has no primary key at all",table.getName()));      return false;    }  } else {    if (table.getPrimaryKey() != null && table.getPrimaryKey().getColumns().size() == 1 && isNumericCol(table.getPrimaryKey().getColumns().get(0))) {      println("WARNING: " + table.getName() + " has a single-column numeric PK - "+ "it is highly recommended to use PK-based consistency check"+ " as opposed to the LIMIT one. Use: -method pk");      return false;    }  }  return true;}  }
class C{  public void deleteLunPathsFromSystem(String systemObjectId,List<String> pathObjectIdList,String model) throws Exception {  InputStream responseStream=null;  try {    boolean operationSucceeds=false;    int retryCount=0;    StringBuilder errorDescriptionBuilder=new StringBuilder();    while (!operationSucceeds && retryCount < MAX_RETRIES) {      retryCount++;      String deleteLUNsQuery=constructDeleteLunPathsQuery(systemObjectId,pathObjectIdList,model);      log.info("Batch query to deleteLUNs Query: {}",deleteLUNsQuery);      URI endpointURI=hdsApiClient.getBaseURI();      ClientResponse response=hdsApiClient.post(endpointURI,deleteLUNsQuery);      if (HttpStatus.SC_OK == response.getStatus()) {        responseStream=response.getEntityInputStream();        JavaResult javaResult=SmooksUtil.getParsedXMLJavaResult(responseStream,HDSConstants.SMOOKS_CONFIG_FILE);        try {          verifyErrorPayload(javaResult);          operationSucceeds=true;        } catch (        HDSException hdsException) {          Error error=javaResult.getBean(Error.class);          if (error != null && (error.getDescription().contains("2010") || error.getDescription().contains("5132") || error.getDescription().contains("7473"))) {            log.error("Error response recieved from HiCommandManger: {}",error.getDescription());            log.info("Exception from HICommand Manager recieved during delete operation, retrying operation {} time",retryCount);            errorDescriptionBuilder.append("error ").append(retryCount).append(" : ").append(error.getDescription()).append("-#####-");            Thread.sleep(60000);            continue;          } else {            throw HDSException.exceptions.invalidResponseFromHDS(String.format("Not able to delete LunPaths due to invalid response %1$s from server",response.getStatus()));          }        }        log.info("Deleted {} LUN paths from system:{}",pathObjectIdList.size(),systemObjectId);      } else {        throw HDSException.exceptions.invalidResponseFromHDS(String.format("Not able to delete Volume from HostGroups due to invalid response %1$s from server",response.getStatus()));      }    }    if (!operationSucceeds) {      throw HDSException.exceptions.invalidResponseFromHDS(String.format("Not able to delete LunPaths due to repeated errors from HiCommand server, errors description are as %s",errorDescriptionBuilder.toString()));    }  }  finally {    if (null != responseStream) {      try {        responseStream.close();      } catch (      IOException e) {        log.warn("IOException occurred while closing the response stream");      }    }  }}  }
class C{  public NoProxySelector(){}  }
class C{  public jMatrix(double vals[],int m){  this.m=m;  n=(m != 0 ? vals.length / m : 0);  if (m * n != vals.length) {    throw new IllegalArgumentException("Array length must be a multiple of m.");  }  A=new double[m][n];  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=vals[i + j * m];    }  }}  }
class C{  public Address __xor__(final Object rhs){  return new Address(m_value.xor(getBigInteger(rhs)));}  }
class C{  @Override protected boolean isZoneLevelResource(){  return false;}  }
class C{  public void cancel() throws SQLException {  checkClose();  try {    if (!executing) {      return;    }    protocol.cancelCurrentQuery();  } catch (  QueryException e) {    logger.error("error cancelling query",e);    ExceptionMapper.throwException(e,connection,this);  }catch (  IOException e) {  }}  }
class C{  public static boolean isFileExist(String filePath){  if (TextUtils.isEmpty(filePath)) {    return false;  }  File file=new File(filePath);  return (file.exists() && file.isFile());}  }
class C{  public static void writeToken(File dir,String name) throws IOException {  writeToken(dir,name,"");}  }
class C{  public ModuleExample2(DialogueSystem system){  this.system=system;}  }
class C{  public final boolean isFinished(){  return mFinished;}  }
class C{  public static boolean checkInitiatorAndPortConnected(NetworkLite iniNetwork,NetworkLite portNet){  if (iniNetwork.getId().equals(portNet.getId())) {    _log.info("Both the port and initiator are in the same network {}",iniNetwork.getNativeGuid());    return true;  } else   if (iniNetwork.hasRoutedNetworks(portNet.getId())) {    _log.info("The port and initiators are in different but routed networks: {} and {}",new Object[]{iniNetwork.getNativeGuid(),portNet.getNativeGuid()});    return true;  }  _log.info("The port and initiator are not connected.");  return false;}  }
class C{  public static int posNullByte(byte[] b){  for (int i=0; i < b.length; i++)   if (b[i] == 0)   return i;  return -1;}  }
class C{  public static <K,V>SynchronizedSetMultimap<K,V> of(MutableSetMultimap<K,V> multimap){  if (multimap == null) {    throw new IllegalArgumentException("cannot create a SynchronizedSetMultimap for null");  }  return new SynchronizedSetMultimap<>(multimap);}  }
class C{  public static void print(long x){  out.print(x);  out.flush();}  }
class C{  protected void recalculatePricesInCart(final MutableShoppingCart shoppingCart){  if (shoppingCart.getShoppingContext().getShopId() == 0L) {    ShopCodeContext.getLog(this).error("Can not recalculate price because the shop id is 0");  } else {    final Shop shop=shopService.getById(shoppingCart.getShoppingContext().getShopId());    final PricingPolicyProvider.PricingPolicy policy=getPricingPolicyProvider().determinePricingPolicy(shop.getCode(),shoppingCart.getCurrencyCode(),shoppingCart.getCustomerEmail(),shoppingCart.getShoppingContext().getCountryCode(),shoppingCart.getShoppingContext().getStateCode());    for (    final CartItem cartItem : shoppingCart.getCartItemList()) {      setProductSkuPrice(shoppingCart,shop,cartItem.getProductSkuCode(),cartItem.getQty(),policy);    }    recalculate(shoppingCart);  }}  }
class C{  @Override public String toString(){  return getNptSecondsRepresentation();}  }
class C{  public static long readLong(byte[] array,int offset){  long b0=array[offset + 0];  long b1=array[offset + 1] & 0xFF;  long b2=array[offset + 2] & 0xFF;  long b3=array[offset + 3] & 0xFF;  long b4=array[offset + 4] & 0xFF;  int b5=array[offset + 5] & 0xFF;  int b6=array[offset + 6] & 0xFF;  int b7=array[offset + 7] & 0xFF;  return ((b0 << 56) + (b1 << 48) + (b2 << 40)+ (b3 << 32)+ (b4 << 24)+ (b5 << 16)+ (b6 << 8)+ (b7 << 0));}  }
class C{  protected void customOnClose(){}  }
class C{  public void delete(Name name){  newUpdate(Record.newRecord(name,Type.ANY,DClass.ANY,0));}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private static void enableDownloadManager(Context context){  try {    Intent intent=new Intent(android.provider.Settings.ACTION_APPLICATION_DETAILS_SETTINGS);    intent.setData(Uri.parse("package:" + DOWNLOAD_MANAGER_PACKAGE_NAME));    context.startActivity(intent);  } catch (  ActivityNotFoundException e) {    Logger.e(e);    Intent intent=new Intent(android.provider.Settings.ACTION_MANAGE_APPLICATIONS_SETTINGS);    context.startActivity(intent);  }}  }
class C{  private void processMoovAtom(ContainerAtom moov){  List<Mp4Track> tracks=new ArrayList<>();  long earliestSampleOffset=Long.MAX_VALUE;  for (int i=0; i < moov.containerChildren.size(); i++) {    Atom.ContainerAtom atom=moov.containerChildren.get(i);    if (atom.type != Atom.TYPE_trak) {      continue;    }    Track track=AtomParsers.parseTrak(atom,moov.getLeafAtomOfType(Atom.TYPE_mvhd));    if (track == null) {      continue;    }    Atom.ContainerAtom stblAtom=atom.getContainerAtomOfType(Atom.TYPE_mdia).getContainerAtomOfType(Atom.TYPE_minf).getContainerAtomOfType(Atom.TYPE_stbl);    TrackSampleTable trackSampleTable=AtomParsers.parseStbl(track,stblAtom);    if (trackSampleTable.sampleCount == 0) {      continue;    }    Mp4Track mp4Track=new Mp4Track(track,trackSampleTable,extractorOutput.track(i));    mp4Track.trackOutput.format(track.mediaFormat);    tracks.add(mp4Track);    long firstSampleOffset=trackSampleTable.offsets[0];    if (firstSampleOffset < earliestSampleOffset) {      earliestSampleOffset=firstSampleOffset;    }  }  this.tracks=tracks.toArray(new Mp4Track[0]);  extractorOutput.endTracks();  extractorOutput.seekMap(this);}  }
class C{  protected int engineUpdate(byte[] input,int inputOffset,int inputLen,byte[] output,int outputOffset) throws ShortBufferException {  return core.update(input,inputOffset,inputLen,output,outputOffset);}  }
class C{  public void fillDefaultValues(){  double exRatio=SynapseGroup.DEFAULT_EXCITATORY_RATIO;  setExcitatoryRatio(exRatio);}  }
class C{  public CLIOutputResponse remove(final RemoveRequest request) throws IOException, SubversionException {  final File projectPath=new File(request.getProjectPath());  final List<String> cliArgs=defaultArgs();  cliArgs.add("remove");  final CommandLineResult result=runCommand(null,cliArgs,projectPath,request.getPaths());  return DtoFactory.getInstance().createDto(CLIOutputResponse.class).withCommand(result.getCommandLine().toString()).withOutput(result.getStdout()).withErrOutput(result.getStderr());}  }
class C{  public BigInteger generateVerifier(byte[] salt,byte[] identity,byte[] password){  BigInteger x=SRP6Util.calculateX(digest,N,salt,identity,password);  return g.modPow(x,N);}  }
class C{  public OMGraphicList init(){  OMGraphicList omList=new OMGraphicList();  OMLine line=new OMLine(40f,-145f,42f,-70f,OMGraphic.LINETYPE_GREATCIRCLE);  line.setStroke(new BasicStroke(2));  line.setLinePaint(Color.red);  line.putAttribute(OMGraphicConstants.LABEL,new OMTextLabeler("Line Label"));  omList.add(line);  OMGraphicList pointList=new OMGraphicList();  for (int i=0; i < 100; i++) {    OMPoint point=new OMPoint((float)(Math.random() * 89f),(float)(Math.random() * -179f),3);    point.setFillPaint(Color.yellow);    point.setOval(true);    pointList.add(point);  }  omList.add(pointList);  return omList;}  }
class C{  @RpcMethod public PlaceResponse place(Resource resource) throws InterruptedException, RpcException {  SyncHandler<PlaceResponse,Host.AsyncClient.place_call> syncHandler=new SyncHandler<>();  place(resource,syncHandler);  syncHandler.await();  logger.debug("finished place resource {}, target {}",resource,getHostIp());  return ResponseValidator.checkPlaceResponse(syncHandler.getResponse());}  }
class C{  @Override public void onViewDragStateChanged(int state){  if (state == mDragState) {    return;  }  if ((mDragState == ViewDragHelper.STATE_DRAGGING || mDragState == ViewDragHelper.STATE_SETTLING) && state == ViewDragHelper.STATE_IDLE && (mDragOffset == mAudioView.getmVerticalDragRange())) {    mAudioView.hideView();  }  mDragState=state;}  }
class C{  private static int NextBraceQuoteOrCommentCol(String str,int col){  String[] splitStr=str.substring(col).split("\\{|\\}|\"|\\(\\*|\\\\\\*");  if (splitStr.length == 0) {    return col;  }  return col + splitStr[0].length();}  }
class C{  public Vertex search(Vertex source,Vertex filter,Vertex vertex){  return search(source,filter,vertex,null,null,null,null);}  }
class C{  private void assertUploadPackRefs(String... expectedWithMeta) throws Exception {  try (Repository repo=repoManager.openRepository(project)){    assertRefs(repo,new VisibleRefFilter(tagCache,notesFactory,changeCache,repo,projectControl(),new DisabledReviewDb(),true),true,expectedWithMeta);  } }  }
class C{  public boolean canContainText(){  return containsText_;}  }
class C{  public static Conjunction and(){  return new Conjunction();}  }
class C{  private FileDownloadInfo createNewDownloadInfo(FileDownloadInfo.Reader reader){  FileDownloadInfo info=reader.newDownloadInfo(systemFacade,downloadsUriProvider);  LLog.v("processing inserted download " + info.getId());  return info;}  }
class C{  public void output(String msg){  out.println(msg);}  }
class C{  @Override public String toString(){  return getClass().getSimpleName() + '@' + Integer.toHexString(System.identityHashCode(this))+ " "+ reflectAsString(false);}  }
class C{  public String format(String s){  if (fmt != 's')   throw new java.lang.IllegalArgumentException();  if (precision >= 0 && precision < s.length())   s=s.substring(0,precision);  return pad(s);}  }
class C{  public void shutdownNow(){  if (poolRunning()) {    try {      Thread.sleep(4000);    } catch (    Exception e) {    }  }  if (imageDownloadExecutor != null && !imageDownloadExecutor.isTerminated()) {    imageDownloadExecutor.shutdownNow();  }  if (unnamedTaskExecutor != null && !unnamedTaskExecutor.isTerminated()) {    unnamedTaskExecutor.shutdownNow();  }  if (downloadExecutor != null && !downloadExecutor.isTerminated()) {    downloadExecutor.shutdownNow();  }  if (mainTaskExecutor != null && !mainTaskExecutor.isTerminated()) {    mainTaskExecutor.shutdownNow();  }  if (scheduler != null && !scheduler.isTerminated()) {    scheduler.shutdownNow();  }}  }
class C{  private boolean checkPermission(HttpServletRequest req,Map<String,String> pathParams){  String cmd=pathParams.get(Constants.URL_PATH_CMD);  AppUser appUser=AppUser.class.cast(req.getSession().getAttribute(AppUser.SESSION_ATTRIBUTE));  if (appUser == null)   return false;  if ("delete".equals(cmd)) {    if (!appUser.isAdminUser())     return false;  }  String dbgrp=pathParams.get(Constants.URL_PATH_DBGROUP);  DBCredential cred=null;  try {    cred=WebAppUtil.findDBCredential(this.frameworkContext,dbgrp,appUser);  } catch (  Throwable th) {  }  return cred != null;}  }
class C{  public void testUnsizedDoublesCountSeq(){  LongAdder counter=new LongAdder();  SplittableRandom r=new SplittableRandom();  long size=100;  r.doubles().limit(size).forEach(null);  assertEquals(counter.sum(),size);}  }
class C{  public void addText(float latPoint,float lonPoint,String stuff,String font,int justify,LinkProperties properties) throws IOException {  LinkText.write(latPoint,lonPoint,stuff,font,justify,properties,link.dos);}  }
class C{  public static IFilledList<TraceList> loadTraces(final AbstractSQLProvider provider,final String tableName,final String columnName,final int containerId,final List<? extends INaviModule> modules) throws CouldntLoadDataException {  Preconditions.checkNotNull(provider,"IE00590: Provider argument can not be null");  Preconditions.checkNotNull(tableName,"IE00591: Table name argument can not be null");  Preconditions.checkNotNull(columnName,"IE00592: Column name argument can not be null");  final String query="select id, name, description from " + CTableNames.TRACES_TABLE + " join "+ tableName+ " on "+ tableName+ ".trace_id = "+ CTableNames.TRACES_TABLE+ ".id where "+ tableName+ "."+ columnName+ " = "+ containerId;  final CConnection connection=provider.getConnection();  final IFilledList<TraceList> traces=new FilledList<TraceList>();  try {    final ResultSet resultSet=connection.executeQuery(query,true);    try {      while (resultSet.next()) {        final int traceId=resultSet.getInt("id");        final String name=PostgreSQLHelpers.readString(resultSet,"name");        final String description=PostgreSQLHelpers.readString(resultSet,"description");        final TraceList traceList=new TraceList(traceId,name,description,provider);        loadTraceEvents(connection,traceList,modules);        traces.add(traceList);      }    }  finally {      resultSet.close();    }  } catch (  final SQLException exception) {    throw new CouldntLoadDataException(exception);  }  return traces;}  }
class C{  public void addAll(TypedProperties properties){  addAll(properties.getProperties());}  }
class C{  public void restore(Checkpoint redoCheckpoint){  for (  Entry<OsmElement,UndoElement> entry : elements.entrySet()) {    if (redoCheckpoint != null)     redoCheckpoint.add(entry.getKey());    entry.getValue().restore();  }}  }
class C{  public LocalDate withYear(int year){  return withLocalMillis(getChronology().year().set(getLocalMillis(),year));}  }
class C{  public static RegExp createRegExpForWildcardPattern(String wildcardPattern,String flags){  return RegExp.compile(createRegExpStringForWildcardPattern(wildcardPattern),flags);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public T caseNamedElement(NamedElement object){  return null;}  }
class C{  private void logMessage(String msg,Object[] obj){  if (_monitoringPropertiesLoader.isToLogIndications()) {    _logger.debug("-> " + msg,obj);  }}  }
class C{  @Override public String toString(){  return toString(keySet().size());}  }
class C{  public void testDeflateWithoutSettingInput() throws Exception {  deflateInflate(Deflater.FULL_FLUSH);  assertTrue(totalDeflated > 0);  assertEquals(0,totalInflated);}  }
class C{  private static String buildMessage(final String format,final Object... args){  final String msg=(args == null) ? format : String.format(Locale.US,format,args);  final StackTraceElement[] trace=new Throwable().fillInStackTrace().getStackTrace();  String caller="<unknown>";  for (int i=2; i < trace.length; i++) {    final Class<?> clazz=trace[i].getClass();    if (!clazz.equals(Logger.class)) {      String callingClass=trace[i].getClassName();      callingClass=callingClass.substring(callingClass.lastIndexOf('.') + 1);      callingClass=callingClass.substring(callingClass.lastIndexOf('$') + 1);      caller=callingClass + "." + trace[i].getMethodName();      break;    }  }  return String.format(Locale.US,"[%d] %s: %s",Thread.currentThread().getId(),caller,msg);}  }
class C{  private String constructDeleteHSDsQuery(String systemId,List<HostStorageDomain> hsdList,String model){  Map<String,Object> attributeMap=new HashMap<String,Object>();  StorageArray array=new StorageArray(systemId);  Delete deleteOp=new Delete(HDSConstants.HOST_STORAGE_DOMAIN);  attributeMap.put(HDSConstants.STORAGEARRAY,array);  attributeMap.put(HDSConstants.DELETE,deleteOp);  attributeMap.put(HDSConstants.MODEL,model);  attributeMap.put(HDSConstants.HOSTGROUP_LIST,hsdList);  return InputXMLGenerationClient.getInputXMLString(HDSConstants.BATCH_DELETE_HSDS_FROM_SYSTEM,attributeMap,HDSConstants.HITACHI_INPUT_XML_CONTEXT_FILE,HDSConstants.HITACHI_SMOOKS_CONFIG_FILE);}  }
class C{  @Override public boolean isEnabled(){  return isEnabled;}  }
class C{  public void evictAll(){  List<RealConnection> evictedConnections=new ArrayList<>();synchronized (this) {    for (Iterator<RealConnection> i=connections.iterator(); i.hasNext(); ) {      RealConnection connection=i.next();      if (connection.allocations.isEmpty()) {        connection.noNewStreams=true;        evictedConnections.add(connection);        i.remove();      }    }  }  for (  RealConnection connection : evictedConnections) {    Util.closeQuietly(connection.getSocket());  }}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  @Override public void stop(final String moduleId){  final BaseModule a=instances.get(moduleId);  if (a == null) {    if (Cfg.DEBUG) {      Check.log(TAG + " Agent " + moduleId+ " not present");    }    return;  }  a.stopThread();  final Thread t=threads.get(a);  if (t != null) {    try {      t.join();      if (Cfg.DEBUG) {        Check.log(TAG + " (stop) " + moduleId+ " stopped and joined");      }    } catch (    final InterruptedException e) {      if (Cfg.EXCEPTION) {        Check.log(e);      }      if (Cfg.DEBUG) {        Check.log(e);      }    }    threads.remove(a);  } else {    if (Cfg.DEBUG) {      Check.log(TAG + " (stop) " + moduleId+ " stopped but not joined");    }  }}  }
class C{  protected void readBlock(BlockMetadata blockMetadata) throws IOException {  readerContext.initialize(stream,blockMetadata,consecutiveBlock);  ReaderContext.Entity entity;  while ((entity=readerContext.next()) != null) {    counters.getCounter(ReaderCounterKeys.BYTES).add(entity.getUsedBytes());    byte[] record=entity.getRecord();    if (record != null) {      counters.getCounter(ReaderCounterKeys.RECORDS).increment();      records.emit(record);    }  }}  }
class C{  boolean isSystemFont(){  return systemFont;}  }
class C{  @Override public void onSlotChangedAdded(final RPObject object,final String slotName,final RPObject sobject,final RPObject schanges){}  }
class C{  public void testLongSortMissingLast() throws Exception {  checkSortMissingLast("longdv_missinglast","-1","4");}  }
class C{  public static <T>Field<T> field(String expression){  return new Field<>(expression);}  }
class C{  public void enableHelpKey(Component comp,@NotNull String id,HelpSet hs){  CSH.setHelpIDString(comp,id);  if (hs != null) {    CSH.setHelpSet(comp,hs);  }  if (comp instanceof JComponent) {    JComponent root=(JComponent)comp;    root.registerKeyboardAction(getDisplayHelpFromFocus(),KeyStroke.getKeyStroke(KeyEvent.VK_HELP,0),JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);    root.registerKeyboardAction(getDisplayHelpFromFocus(),KeyStroke.getKeyStroke(KeyEvent.VK_F1,0),JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);  } else {    comp.addKeyListener(this);  }}  }
class C{  protected static void parseContentTypeParams(ByteArrayInputStream pduDataStream,HashMap<Integer,Object> map,Integer length){  assert (null != pduDataStream);  assert (length > 0);  int startPos=pduDataStream.available();  int tempPos=0;  int lastLen=length;  while (0 < lastLen) {    int param=pduDataStream.read();    assert (-1 != param);    lastLen--;switch (param) {case PduPart.P_TYPE:case PduPart.P_CT_MR_TYPE:      pduDataStream.mark(1);    int first=extractByteValue(pduDataStream);  pduDataStream.reset();if (first > TEXT_MAX) {  int index=parseShortInteger(pduDataStream);  if (index < PduContentTypes.contentTypes.length) {    byte[] type=(PduContentTypes.contentTypes[index]).getBytes();    map.put(PduPart.P_TYPE,type);  } else {  }} else {  byte[] type=parseWapString(pduDataStream,TYPE_TEXT_STRING);  if ((null != type) && (null != map)) {    map.put(PduPart.P_TYPE,type);  }}tempPos=pduDataStream.available();lastLen=length - (startPos - tempPos);break;case PduPart.P_START:case PduPart.P_DEP_START:byte[] start=parseWapString(pduDataStream,TYPE_TEXT_STRING);if ((null != start) && (null != map)) {map.put(PduPart.P_START,start);}tempPos=pduDataStream.available();lastLen=length - (startPos - tempPos);break;case PduPart.P_CHARSET:pduDataStream.mark(1);int firstValue=extractByteValue(pduDataStream);pduDataStream.reset();if (((firstValue > TEXT_MIN) && (firstValue < TEXT_MAX)) || (END_STRING_FLAG == firstValue)) {byte[] charsetStr=parseWapString(pduDataStream,TYPE_TEXT_STRING);try {int charsetInt=CharacterSets.getMibEnumValue(new String(charsetStr));map.put(PduPart.P_CHARSET,charsetInt);} catch (UnsupportedEncodingException e) {Log.e(LOG_TAG,Arrays.toString(charsetStr),e);map.put(PduPart.P_CHARSET,CharacterSets.ANY_CHARSET);}} else {int charset=(int)parseIntegerValue(pduDataStream);if (map != null) {map.put(PduPart.P_CHARSET,charset);}}tempPos=pduDataStream.available();lastLen=length - (startPos - tempPos);break;case PduPart.P_DEP_NAME:case PduPart.P_NAME:byte[] name=parseWapString(pduDataStream,TYPE_TEXT_STRING);if ((null != name) && (null != map)) {map.put(PduPart.P_NAME,name);}tempPos=pduDataStream.available();lastLen=length - (startPos - tempPos);break;default :if (LOCAL_LOGV) Log.v(LOG_TAG,"Not supported Content-Type parameter");if (-1 == skipWapValue(pduDataStream,lastLen)) {Log.e(LOG_TAG,"Corrupt Content-Type");} else {lastLen=0;}break;}}if (0 != lastLen) {Log.e(LOG_TAG,"Corrupt Content-Type");}}  }
class C{  public XmlHandler addClass(Class<?> clazz,Attribute... attributes){  try {    xml.addClass(clazz,attributes);    xml.write();  } catch (  Exception e) {    JmapperLog.ERROR(e);  }  return this;}  }
class C{  private static String intToStr(int[] array){  int nSlots=array.length;  StringBuffer workBuff=new StringBuffer(nSlots * 8);  workBuff.append('[');  for (int i=0; i < nSlots; i++) {    workBuff.append(array[i]);    if (i < nSlots - 1) {      workBuff.append(',');    }  }  workBuff.append(']');  return workBuff.toString();}  }
class C{  private static boolean hasSelfPermissions(Context context,String... permissions){  for (  String permission : permissions) {    if (checkSelfPermission(context,permission) == PackageManager.PERMISSION_GRANTED) {      return true;    }  }  return false;}  }
class C{  final public TermNode c(){  return (TermNode)get(3);}  }
class C{  public void checkPause(){  if (pauseTurnsRemaining == 0) {    if (hasPath()) {      setSpeed(getBaseSpeed());    }    applyMovement();  } else {    if (!stopped()) {      stop();      if (pauseDirection != null) {        setDirection(pauseDirection);      }    }    pauseTurnsRemaining-=1;  }}  }
class C{  public void commandAction(Command c,Displayable s){  if (c == startCommand) {    doStart();  } else   if (c == sizeSelectCommand) {    doSizeSelect();  } else   if (c == selectCommand) {    doSelect();  } else   if (c == newGameCommand) {    notifyDestroyed();    doNewGame();  } else   if (c == exitCommand)   notifyDestroyed();}  }
class C{  private static String createRegExpStringForWildcardPattern(String wildcardPattern){  String escaped=regexpWildcardEscape.replace(wildcardPattern,"\\$&");  RegExp mimicLookbehind=RegExp.compile("([\\\\]*)([?*])","g");  StringBuilder wildcardStr=new StringBuilder(escaped);  for (MatchResult match=mimicLookbehind.exec(wildcardStr.toString()); match != null; match=mimicLookbehind.exec(wildcardStr.toString())) {    if (match.getGroup(1) != null && !match.getGroup(1).isEmpty()) {      int offset=match.getGroup(1).length() / 2;      wildcardStr.delete(match.getIndex(),match.getIndex() + offset);      if (offset % 2 == 0) {        if (match.getGroup(2).equals("?")) {          wildcardStr.replace(match.getIndex() + offset,match.getIndex() + offset + 1,"\\S");          offset-=1;        } else {          wildcardStr.replace(match.getIndex() + offset,match.getIndex() + offset + 1,"\\S+");          offset-=2;        }      }      mimicLookbehind.setLastIndex(mimicLookbehind.getLastIndex() - offset);    } else     if (match.getGroup(2).equals("?")) {      wildcardStr.replace(match.getIndex(),match.getIndex() + 1,"\\S");      mimicLookbehind.setLastIndex(mimicLookbehind.getLastIndex() + 1);    } else {      wildcardStr.replace(match.getIndex(),match.getIndex() + 1,"\\S+");      mimicLookbehind.setLastIndex(mimicLookbehind.getLastIndex() + 2);    }  }  return wildcardStr.toString();}  }
class C{  public char[] toCharArray(){synchronized (lock) {    char[] result=new char[count];    System.arraycopy(buf,0,result,0,count);    return result;  }}  }
class C{  public Scheme(final String name,final SocketFactory factory,final int port){  if (name == null) {    throw new IllegalArgumentException("Scheme name may not be null");  }  if (factory == null) {    throw new IllegalArgumentException("Socket factory may not be null");  }  if ((port <= 0) || (port > 0xffff)) {    throw new IllegalArgumentException("Port is invalid: " + port);  }  this.name=name.toLowerCase(Locale.ENGLISH);  this.socketFactory=factory;  this.defaultPort=port;  this.layered=(factory instanceof LayeredSocketFactory);}  }
class C{  public boolean isParticipantNode(String localZkMode){  return ZOOKEEPER_MODE_LEADER.equals(localZkMode) || ZOOKEEPER_MODE_FOLLOWER.equals(localZkMode) || ZOOKEEPER_MODE_STANDALONE.equals(localZkMode);}  }
class C{  protected ASTParser createParser(IJavaProject project){  ASTParser result=ASTParser.newParser(ASTProvider.SHARED_AST_LEVEL);  result.setResolveBindings(true);  result.setProject(project);  return result;}  }
class C{  public SourceFileAttribute(ConstPool cp,String filename){  super(cp,tag);  int index=cp.addUtf8Info(filename);  byte[] bvalue=new byte[2];  bvalue[0]=(byte)(index >>> 8);  bvalue[1]=(byte)index;  set(bvalue);}  }
class C{  public final Vec2 sub(Vec2 v){  return new Vec2(x - v.x,y - v.y);}  }
class C{  public BaselineGCMapIterator(AddressArray registerLocations){  super(registerLocations);  dynamicLink=new DynamicLink();}  }
class C{  public FolderEntry(){  getCategories().remove(DocumentListEntry.CATEGORY);  getCategories().add(CATEGORY);}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=1;  result=prime * result + ((graph == null) ? 0 : graph.hashCode());  result=prime * result + ((uri == null) ? 0 : uri.hashCode());  return result;}  }
class C{  @Override protected void onSaveInstanceState(Bundle outState){  super.onSaveInstanceState(outState);  outState.putString(LOG_TEXT_KEY,Html.toHtml((Spanned)mLogTextView.getText()));}  }
class C{  public DelaunayVertex bisector(DelaunayVertex point){  dimCheck(point);  DelaunayVertex diff=this.subtract(point);  DelaunayVertex sum=this.add(point);  double dot=diff.dot(sum);  return diff.extend(-dot / 2);}  }
class C{  private void initialiseViews(View contentView,Bundle savedInstanceState,LayoutInflater inflater){  mLeaderList=(ListView)contentView.findViewById(R.id.list_leaders);  mLeadersAdapter=new LeadersAdapter(getActivity(),this);  View footerView=inflater.inflate(R.layout.layout_leader_header,null,false);  mLeaderList.setAdapter(mLeadersAdapter);  mLeaderList.addFooterView(footerView);  mToolbar=(Toolbar)contentView.findViewById(R.id.my_awesome_toolbar);  setToolbar(mToolbar);}  }
class C{  @Override public void beginHandshake() throws SSLException {  if (engine_was_closed) {    throw new SSLException("Engine has already been closed.");  }  if (!peer_mode_was_set) {    throw new IllegalStateException("Client/Server mode was not set");  }  if (!handshake_started) {    handshake_started=true;    if (getUseClientMode()) {      handshakeProtocol=new ClientHandshakeImpl(this);    } else {      handshakeProtocol=new ServerHandshakeImpl(this);    }    appData=new SSLEngineAppData();    alertProtocol=new AlertProtocol();    recProtIS=new SSLBufferedInput();    recordProtocol=new SSLRecordProtocol(handshakeProtocol,alertProtocol,recProtIS,appData);  }  handshakeProtocol.start();}  }
class C{  public EventBus(){  this("default");}  }
class C{  @Override public Population createInitialPopulation(ExampleSet es) throws OperatorException {  int minNumber=1;  int maxNumber=1;  int exactNumber=0;  boolean useExactNumber=false;  boolean restrictMaxNumber=false;  int numberOfAttributes=es.getAttributes().size();  if (getParameterAsBoolean(PARAMETER_USE_EXACT_NUMBER)) {    useExactNumber=true;    exactNumber=getParameterAsInt(PARAMETER_EXACT_NUMBER_OF_ATTRIBUTES);    logNote("Using exact number of features for feature selection (" + exactNumber + "), ignoring possibly defined range for the number of features and / or input attribute weights.");    if (exactNumber > numberOfAttributes) {      throw new UserError(this,125,numberOfAttributes,exactNumber);    }  } else {    minNumber=getParameterAsInt(PARAMETER_MIN_NUMBER_OF_ATTRIBUTES);    if (getParameterAsBoolean(PARAMETER_RESTRICT_NUMBER)) {      maxNumber=getParameterAsInt(PARAMETER_MAX_NUMBER_OF_ATTRIBUTES);      restrictMaxNumber=true;      if (minNumber > maxNumber) {        throw new UserError(this,210,PARAMETER_MAX_NUMBER_OF_ATTRIBUTES,PARAMETER_MIN_NUMBER_OF_ATTRIBUTES);      }    } else {      maxNumber=numberOfAttributes;    }    if (minNumber > numberOfAttributes) {      throw new UserError(this,125,numberOfAttributes,minNumber);    }  }  Population initP=new Population();  double[] initialWeights=null;  if (attributeWeightsInput.isConnected()) {    AttributeWeights inputWeights=null;    inputWeights=attributeWeightsInput.getData(AttributeWeights.class);    initialWeights=new double[numberOfAttributes];    int index=0;    for (    Attribute attribute : es.getAttributes()) {      double weight=inputWeights.getWeight(attribute.getName());      if (Double.isNaN(weight)) {        weight=getRandom().nextDouble();      }      if (weight < 0.0d) {        weight=0.0d;      }      if (weight > 1.0d) {        weight=1.0d;      }      if (weight > 0 && weight < 1.0d) {        if (weight < 1.0d - getParameterAsDouble(PARAMETER_P_INITIALIZE)) {          weight=1.0d;        } else {          weight=0.0d;        }      }      initialWeights[index++]=weight;    }    if (!useExactNumber) {      Individual individual=new Individual(initialWeights);      int numberOfFeatures=individual.getNumberOfUsedAttributes();      if ((!restrictMaxNumber || numberOfFeatures <= maxNumber) && numberOfFeatures >= minNumber) {        initP.add(individual);      } else {        logWarning("Input attribute weights found but number of selected features do not match specified minimum and maximum number, ignoring input weights.");        initialWeights=null;      }    }  }  if (useExactNumber) {    while (initP.getNumberOfIndividuals() < getParameterAsInt(PARAMETER_POPULATION_SIZE)) {      double[] weights=new double[numberOfAttributes];      double prob=1.0d / weights.length * exactNumber;      for (int i=0; i < weights.length; i++) {        if (getRandom().nextDouble() < prob) {          weights[i]=1.0d;        } else {          weights[i]=0.0d;        }      }      Individual individual=new Individual(weights);      int numberOfFeatures=individual.getNumberOfUsedAttributes();      if (exactNumber == numberOfFeatures) {        initP.add(individual);      }    }  } else {    while (initP.getNumberOfIndividuals() < getParameterAsInt(PARAMETER_POPULATION_SIZE)) {      double[] weights=new double[numberOfAttributes];      if (initialWeights != null && getRandom().nextBoolean()) {        for (int i=0; i < weights.length; i++) {          if (getRandom().nextDouble() < 1.0d / initialWeights.length) {            if (initialWeights[i] > 0.0d) {              weights[i]=0.0d;            } else {              weights[i]=1.0d;            }          } else {            weights[i]=initialWeights[i];          }        }      } else {        double p=getParameterAsDouble(PARAMETER_P_INITIALIZE);        for (int i=0; i < weights.length; i++) {          if (getRandom().nextDouble() < 1.0d - p) {            weights[i]=1.0d;          }        }      }      Individual individual=new Individual(weights);      int numberOfSelectedAttributes=individual.getNumberOfUsedAttributes();      while (numberOfSelectedAttributes < minNumber && numberOfAttributes >= minNumber) {        int random=getRandom().nextInt(numberOfAttributes);        if (weights[random] == 0) {          weights[random]=1.0d;          numberOfSelectedAttributes++;        }      }      if (restrictMaxNumber && maxNumber > minNumber) {        while (numberOfSelectedAttributes > maxNumber) {          double deSelectProb=(numberOfSelectedAttributes - maxNumber) / ((double)numberOfSelectedAttributes - 1);          for (int i=0; i < numberOfAttributes; i++) {            if (weights[i] > 0 && getRandom().nextDouble() < deSelectProb) {              weights[i]=0;              numberOfSelectedAttributes--;            }          }        }      }      if ((!restrictMaxNumber || numberOfSelectedAttributes <= maxNumber) && numberOfSelectedAttributes >= minNumber) {        initP.add(individual);      }    }  }  return initP;}  }
class C{  synchronized void saveProperties(Properties prop){  try {    if (prop == null) {      Properties old=loadProperties();      prop=new SortedProperties();      prop.setProperty("webPort","" + SortedProperties.getIntProperty(old,"webPort",port));      prop.setProperty("webAllowOthers","" + SortedProperties.getBooleanProperty(old,"webAllowOthers",allowOthers));      prop.setProperty("webSSL","" + SortedProperties.getBooleanProperty(old,"webSSL",ssl));      if (commandHistoryString != null) {        prop.setProperty(COMMAND_HISTORY,commandHistoryString);      }    }    ArrayList<ConnectionInfo> settings=getSettings();    int len=settings.size();    for (int i=0; i < len; i++) {      ConnectionInfo info=settings.get(i);      if (info != null) {        prop.setProperty(String.valueOf(len - i - 1),info.getString());      }    }    if (!"null".equals(serverPropertiesDir)) {      OutputStream out=FileUtils.newOutputStream(serverPropertiesDir + "/" + Constants.SERVER_PROPERTIES_NAME,false);      prop.store(out,"H2 Server Properties");      out.close();    }  } catch (  Exception e) {    DbException.traceThrowable(e);  }}  }
class C{  @Override public boolean handleMouseClick(Point2D.Double p,MouseEvent evt,DrawingView view){  if (evt.getClickCount() == 2 && view.getHandleDetailLevel() % 2 == 0) {    for (    Figure child : getChildren()) {      SVGBezierFigure bf=(SVGBezierFigure)child;      int index=bf.findSegment(p,5f / view.getScaleFactor());      if (index != -1) {        bf.handleMouseClick(p,evt,view);        evt.consume();        return true;      }    }  }  return false;}  }
class C{  public static void fill(short[] array,int start,int end,short value){  checkBounds(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  @Override public int read() throws IOException {  if (this.closed) {    throw new IOException("Attempted read from closed stream.");  }  if (this.eof) {    return -1;  }  if (this.pos >= this.chunkSize) {    nextChunk();    if (this.eof) {      return -1;    }  }  this.pos++;  return this.in.read();}  }
class C{  public boolean isPannable(){  return pannable;}  }
class C{  @SafeVarargs public final Maker<T> but(PropertyValue<? super T,?>... propertyValues){  return new Maker<>(this,propertyValues);}  }
class C{  public GeolocTransferSession createGeolocSharingSession(ContactId contact,MmContent content,Geoloc geoloc,long timestamp) throws CoreException {  if (sLogger.isActivated()) {    sLogger.info("Initiate geoloc sharing session with contact " + contact + ".");  }  if (!isCallConnectedWith(contact)) {    if (sLogger.isActivated()) {      sLogger.debug("Rich call not established: cancel the initiation.");    }    throw new CoreException("Call not established");  }  return new OriginatingGeolocTransferSession(this,content,contact,geoloc,mRcsSettings,timestamp,mContactManager,mCapabilityService);}  }
class C{  @Override public int read() throws java.io.IOException {  if (position < 0) {    if (encode) {      byte[] b3=new byte[3];      int numBinaryBytes=0;      for (int i=0; i < 3; i++) {        int b=in.read();        if (b >= 0) {          b3[i]=(byte)b;          numBinaryBytes++;        } else {          break;        }      }      if (numBinaryBytes > 0) {        encode3to4(b3,0,numBinaryBytes,buffer,0,options);        position=0;        numSigBytes=4;      } else {        return -1;      }    } else {      byte[] b4=new byte[4];      int i;      for (i=0; i < 4; i++) {        int b;        do {          b=in.read();        } while (b >= 0 && decodabet[b & 0x7f] <= WHITE_SPACE_ENC);        if (b < 0) {          break;        }        b4[i]=(byte)b;      }      if (i == 4) {        numSigBytes=decode4to3(b4,0,buffer,0,options);        position=0;      } else       if (i == 0) {        return -1;      } else {        throw new java.io.IOException("Improperly padded Base64 input.");      }    }  }  if (position >= 0) {    if (position >= numSigBytes) {      return -1;    }    if (encode && breakLines && lineLength >= MAX_LINE_LENGTH) {      lineLength=0;      return '\n';    } else {      lineLength++;      int b=buffer[position++];      if (position >= bufferLength) {        position=-1;      }      return b & 0xFF;    }  } else {    throw new java.io.IOException("Error in Base64 code reading stream.");  }}  }
class C{  public static Object read(File file) throws Exception {  return read(new FileInputStream(file));}  }
class C{  private String findIdpTypeRegisteredWithName(String tenantName,IdentityStoreType type,String providerName) throws Exception {  ValidateUtil.validateNotEmpty(providerName,"Provider name");  Collection<IIdentityStoreData> extIDPs=_configStore.getProviders(tenantName,EnumSet.of(DomainType.EXTERNAL_DOMAIN),true);  for (  IIdentityStoreData idp : extIDPs) {    if (idp.getExtendedIdentityStoreData().getProviderType() == type && idp.getName().equalsIgnoreCase(providerName)) {      return idp.getName();    }  }  return null;}  }
class C{  General(){  initComponents();}  }
class C{  public void removeKeyStore(KeyStore keyStore){  int index=findKeyStoreIndex(keyStore);  if (index >= 0) {    keyStoreTables.remove(index);    histories.remove(index).nullPasswords();    jkstpKeyStores.remove(index);  }}  }
class C{  @Override public StreamBuilderImpl<Iterable<T>,U> iter(){  return new Iter<>(this);}  }
class C{  public static List<Element> findChildren(Node parent,String localname,String namespaceuri,boolean deep){  List<Element> matches=new ArrayList<Element>();  findChildren(matches,parent,localname,namespaceuri,deep);  return matches;}  }
class C{  private boolean isBasedOnVNXThinStoragePool(Volume volume){  boolean result=false;  if (volume != null) {    StoragePool pool=_dbClient.queryObject(StoragePool.class,volume.getPool());    if (pool != null) {      String supportedResourceTypes=pool.getSupportedResourceTypes();      result=(supportedResourceTypes.equals(StoragePool.SupportedResourceTypes.THIN_ONLY.name()) || supportedResourceTypes.equals(StoragePool.SupportedResourceTypes.THIN_AND_THICK.name()));    }  }  return result;}  }
class C{  public static BitmapRegionDecoderCompat newInstance(InputStream is,boolean isShareable) throws IOException {  return new BitmapRegionDecoderCompat(isAPI10() ? BitmapRegionDecoderNative.newInstance(is,isShareable) : BitmapRegionDecoderGinger.newInstance(is,isShareable));}  }
class C{  public TermSuggestionBuilder prefixLength(int prefixLength){  this.prefixLength=prefixLength;  return this;}  }
class C{  public static void main(String[] args){  WaterWorldWithUI simple=new WaterWorldWithUI(new WaterWorld(System.currentTimeMillis()));  Console c=new Console(simple);  c.setVisible(true);}  }
class C{  public AtlasVertex findVertex(Object... args) throws EntityNotFoundException {  StringBuilder condition=new StringBuilder();  AtlasGraphQuery query=graph.query();  for (int i=0; i < args.length; i+=2) {    query=query.has((String)args[i],args[i + 1]);    condition.append(args[i]).append(" = ").append(args[i + 1]).append(", ");  }  String conditionStr=condition.toString();  LOG.debug("Finding AtlasVertex with {}",conditionStr);  Iterator<AtlasVertex> results=query.vertices().iterator();  AtlasVertex vertex=results.hasNext() ? results.next() : null;  if (vertex == null) {    LOG.debug("Could not find a vertex with {}",condition.toString());    throw new EntityNotFoundException("Could not find an entity in the repository with " + conditionStr);  } else {    LOG.debug("Found a vertex {} with {}",string(vertex),conditionStr);  }  return vertex;}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'VIDEO_CACHE'";  db.execSQL(sql);}  }
class C{  public void run(){  doNext();}  }
class C{  public Object acquire(Object key){  return locks.getUnchecked(key);}  }
class C{  public void removeConnectingSocket(Socket socket){synchronized (connectingSockets) {    connectingSockets.remove(socket);  }}  }
class C{  public static Color convertFloodColor(Element e,BridgeContext ctx){  Value v=getComputedStyle(e,SVGCSSEngine.FLOOD_COLOR_INDEX);  Value o=getComputedStyle(e,SVGCSSEngine.FLOOD_OPACITY_INDEX);  float f=PaintServer.convertOpacity(o);  if (v.getCssValueType() == CSSValue.CSS_PRIMITIVE_VALUE) {    return PaintServer.convertColor(v,f);  } else {    return PaintServer.convertRGBICCColor(e,v.item(0),(ICCColor)v.item(1),f,ctx);  }}  }
class C{  public void endElement(String elementName) throws SAXException {  if (m_firstTagNotEmitted) {    flush();  }  m_handler.endElement(elementName);}  }
class C{  public SerialLight(String systemName){  super(systemName);  initializeLight(systemName);}  }
class C{  public double[] computeLocalUsingPreviousObservations(double states1[][],int[] states2){  double mi=0.0;  int timeSteps=states1.length;  double[] localMi=new double[timeSteps];  double condProbCont, probCont;  for (int b=0; b < timeSteps; b++) {    probCont=mvke.getProbability(states1[b]);    condProbCont=mvkeForEachDiscrete[states2[b]].getProbability(states1[b]);    double logTerm=0.0;    localMi[b]=0.0;    if (condProbCont > 0.0) {      logTerm=condProbCont / probCont;      localMi[b]=Math.log(logTerm) / Math.log(2.0);    }    mi+=localMi[b];    if (debug) {      System.out.printf("%d: (%.5f, %.5f) %.5f -> %.5f -> %.5f\n",b,condProbCont,probCont,logTerm,localMi[b],mi);    }  }  lastAverage=mi / (double)totalObservations;  miComputed=true;  return localMi;}  }
class C{  public void vMotionBeforeCQRegistration(){}  }
class C{  static void registerMonitoredApplicationOne(DirectSubmitter<Topology,Job> submitter){  ApplicationService appService=submitter.getServices().getService(ApplicationService.class);  appService.registerTopology(MONITORED_APP_NAME_1,null);}  }
class C{  private final void assertIsLocPathIterator(Expression expr1,ExpressionOwner eo) throws RuntimeException {  if (!(expr1 instanceof LocPathIterator)) {    String errMsg;    if (expr1 instanceof Variable) {      errMsg="Programmer's assertion: expr1 not an iterator: " + ((Variable)expr1).getQName();    } else {      errMsg="Programmer's assertion: expr1 not an iterator: " + expr1.getClass().getName();    }    throw new RuntimeException(errMsg + ", " + eo.getClass().getName()+ " "+ expr1.exprGetParent());  }}  }
class C{  public boolean supportsNamespaces(){  return supportsNamespaces;}  }
class C{  public void engineDeleteEntry(String alias) throws KeyStoreException {  Key k=(Key)keys.remove(alias);  Certificate c=(Certificate)certs.remove(alias);  if (c != null) {    chainCerts.remove(new CertId(c.getPublicKey()));  }  if (k != null) {    String id=(String)localIds.remove(alias);    if (id != null) {      c=(Certificate)keyCerts.remove(id);    }    if (c != null) {      chainCerts.remove(new CertId(c.getPublicKey()));    }  }}  }
class C{  public WTableModelEvent(ListModel source,int firstRow,int lastRow,int column,int type){  super(source,type,firstRow,lastRow);  m_column=column;}  }
class C{  void addRejected(KeyCacheObject key){  assert key != null;  rejectedKeys.add(key);}  }
class C{  public boolean isGaussianBlurSupported(){  return impl.isGaussianBlurSupported();}  }
class C{  private static Date readDate(RandomAccessFile raf,long x) throws IOException {  raf.seek(x);  byte[] b=new byte[GenericFormatter.PATTERN_SHORT_SECOND.length()];  raf.readFully(b);  try {    return GenericFormatter.SHORT_SECOND_FORMATTER.parse(UTF8.String(b),0).getTime();  } catch (  ParseException e) {    throw new IOException(e.getMessage());  }}  }
class C{  protected MetricMappingTransform(ValueMapping valueMapping){  this.valueMapping=valueMapping;  this.defaultScope=valueMapping.name();}  }
class C{  public SnackbarBuilder appendMessage(CharSequence message){  initialiseAppendMessages();  appendMessages.append(message);  return this;}  }
class C{  protected void writeMessage(ModbusMessage msg,boolean useRtuOverTcp) throws ModbusIOException {  try {    byte message[]=msg.getMessage();    byteOutputStream.reset();    if (!headless) {      byteOutputStream.writeShort(msg.getTransactionID());      byteOutputStream.writeShort(msg.getProtocolID());      byteOutputStream.writeShort((message != null ? message.length : 0) + 2);    }    byteOutputStream.writeByte(msg.getUnitID());    byteOutputStream.writeByte(msg.getFunctionCode());    if (message != null && message.length > 0) {      byteOutputStream.write(message);    }    if (useRtuOverTcp) {      int len=byteOutputStream.size();      int[] crc=ModbusUtil.calculateCRC(byteOutputStream.getBuffer(),0,len);      byteOutputStream.writeByte(crc[0]);      byteOutputStream.writeByte(crc[1]);    }    dataOutputStream.write(byteOutputStream.toByteArray());    dataOutputStream.flush();    logger.debug("Sent: {}",ModbusUtil.toHex(byteOutputStream.toByteArray()));  } catch (  SocketException ex1) {    if (master != null && !master.isConnected()) {      try {        master.connect();      } catch (      Exception e) {      }    }    throw new ModbusIOException("I/O exception - failed to write",ex1);  }catch (  Exception ex2) {    throw new ModbusIOException("I/O exception - failed to write",ex2);  }}  }
class C{  @Override public boolean isWeaponBlockedAt(int loc,boolean isRear){  return false;}  }
class C{  public boolean isCounter(){  return is(COUNTER);}  }
class C{  public CoapResponse post(String payload,int format){  return synchronous(format(newPost().setURI(uri).setPayload(payload),format));}  }
class C{  private static Boolean findOverlap(RangeEndpoint low,RangeEndpoint high,boolean loose){  ComparisonResult comparison=low.comparePreciselyTo(high);switch (comparison) {case GT_BARELY:    return loose;case EQ:  return low.isInclusive();case LT_BARELY:case GT:return true;case LT:return false;case INVALID:return null;default :throw new AssertionError(comparison.name());}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.454 -0500",hash_original_method="AC6F2BD2CEECA2EAA4423AB8E7E6F05C",hash_generated_method="56F2D1EF60CB50C41C74D9436CBA7553") public static String calledPartyBCDFragmentToString(byte[] bytes,int offset,int length){  StringBuilder ret=new StringBuilder(length * 2);  internalCalledPartyBCDFragmentToString(ret,bytes,offset,length);  return ret.toString();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean isBefore(Instant otherInstant){  return compareTo(otherInstant) < 0;}  }
class C{  public boolean addAll(PointsToSet s){  return false;}  }
class C{  public ImportRecord(Element imp,Node n){  importElement=imp;  node=n;  defNodeInsertedListener=new DefNodeInsertedListener(imp);  defNodeRemovedListener=new DefNodeRemovedListener(imp);  defAttrListener=new DefAttrListener(imp);  importInsertedListener=new ImportInsertedListener(imp);  importRemovedListener=new ImportRemovedListener();  importSubtreeListener=new ImportSubtreeListener(imp,importRemovedListener);  templateMutationListener=new TemplateMutationListener(imp);}  }
class C{  public void closeJsonStream() throws IOException {  writer.closeJsonStream();}  }
class C{  public EdgePredicateFilter(Predicate<E> edge_pred){  this.edge_pred=edge_pred;}  }
class C{  public BaseSearchCollectionPage(final BaseSearchCollectionResponse response,final ISearchRequestBuilder builder){  super(response.value,builder);}  }
class C{  public void append(final StringBuffer buffer,final String fieldName,final int[] array,final Boolean fullDetail){  appendFieldStart(buffer,fieldName);  if (array == null) {    appendNullText(buffer,fieldName);  } else   if (isFullDetail(fullDetail)) {    appendDetail(buffer,fieldName,array);  } else {    appendSummary(buffer,fieldName,array);  }  appendFieldEnd(buffer,fieldName);}  }
class C{  private static boolean matchLeftmostWildcard(String name,String template){  name=name.toLowerCase(Locale.ENGLISH);  template=template.toLowerCase(Locale.ENGLISH);  int templateIdx=template.indexOf(".");  int nameIdx=name.indexOf(".");  if (templateIdx == -1)   templateIdx=template.length();  if (nameIdx == -1)   nameIdx=name.length();  if (matchWildCards(name.substring(0,nameIdx),template.substring(0,templateIdx))) {    return template.substring(templateIdx).equals(name.substring(nameIdx));  } else {    return false;  }}  }
class C{  private void establecerElementosVista(HttpServletRequest request){  List detallesprestamosFinal=(List)getFromTemporalSession(request,PrestamosConstants.LISTADO_BUSQUEDA_UDOCS);  if (detallesprestamosFinal != null) {    setInTemporalSession(request,PrestamosConstants.LISTADO_BUSQUEDA_UDOCS,detallesprestamosFinal);    setInTemporalSession(request,PrestamosConstants.MOSTRAR_LISTADO_BUSQUEDA_UDOCS,new Boolean(true));  }  Boolean esBusquedaExpediente=(Boolean)getFromTemporalSession(request,PrestamosConstants.CHECKEXP);  String numero_expediente=(String)getFromTemporalSession(request,PrestamosConstants.EXPEDIENTE_BUSQUEDA_UDOCS);  if (esBusquedaExpediente != null && esBusquedaExpediente.booleanValue()) {    setInTemporalSession(request,PrestamosConstants.CHECKEXP,new Boolean(true));    removeInTemporalSession(request,PrestamosConstants.CHECKFONDOYSIGNATURA);    if (numero_expediente == null)     numero_expediente="";    setInTemporalSession(request,PrestamosConstants.EXPEDIENTE_BUSQUEDA_UDOCS,numero_expediente);  }  Boolean esBusquedaFondo=(Boolean)getFromTemporalSession(request,PrestamosConstants.CHECKFONDOYSIGNATURA);  String fondo=(String)getFromTemporalSession(request,PrestamosConstants.FONDO_BUSQUEDA_UDOCS);  String signatura=(String)getFromTemporalSession(request,PrestamosConstants.SIGNATURA_BUSQUEDA_UDOCS);  if (esBusquedaFondo != null && esBusquedaFondo.booleanValue()) {    setInTemporalSession(request,PrestamosConstants.CHECKFONDOYSIGNATURA,new Boolean(true));    removeInTemporalSession(request,PrestamosConstants.CHECKEXP);    if (fondo == null)     fondo="";    setInTemporalSession(request,PrestamosConstants.FONDO_BUSQUEDA_UDOCS,fondo);    if (signatura == null)     signatura="";    setInTemporalSession(request,PrestamosConstants.SIGNATURA_BUSQUEDA_UDOCS,signatura);  }}  }
class C{  public BasicStroke(Cap cap,Join join,float miter,float[] intervals,float phase){  mCap=cap;  mJoin=join;  mMiter=miter;  mIntervals=intervals;}  }
class C{  public int numClasses() throws Exception {  if (m_Dataset == null) {    throw new UnassignedDatasetException("Instance doesn't have access to a dataset!");  }  return m_Dataset.numClasses();}  }
class C{  @Realtime(limit=LINEAR) public void xor(BitSet that){  long[] thatBits=(that instanceof BitSet) ? ((BitSet)that).bits : that.toLongArray();  ensureCapacity(thatBits.length);  for (int i=thatBits.length; --i >= 0; ) {    bits[i]^=thatBits[i];  }}  }
class C{  private List<Activity> buildActivityList2(){  List<Activity> list=new ArrayList<Activity>(8);  t=0;  list.add(addActivity(0,0,2));  list.add(addActivity(5,0,1));  list.add(addActivity(6,0,1));  list.add(addActivity(6,5,2));  list.add(addActivity(5,5,1));  list.add(addActivity(0,5,1));  list.add(addActivity(0,1,1));  list.add(addActivity(0,0,2));  return list;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String arcFile=null;  String whiteboxHeaderFile=null;  int i=0;  int row, col, rows, cols;  String[] imageFiles;  int numImages=0;  int progress=0;  double xllcenter=0;  double yllcenter=0;  double xllcorner=0;  double yllcorner=0;  double cellsize=0;  double north=0;  double east=0;  double west=0;  double south=0;  double arcNoData=-9999;  double whiteboxNoData=-32768d;  double z=0;  String delimiter=" ";  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  DataInputStream in=null;  BufferedReader br=null;  try {    if (args.length <= 0) {      showFeedback("Plugin parameters have not been set.");      return;    }    inputFilesString=args[0];    if ((inputFilesString == null)) {      showFeedback("One or more of the input parameters have not been set properly.");      return;    }    imageFiles=inputFilesString.split(";");    numImages=imageFiles.length;    for (i=0; i < numImages; i++) {      progress=(int)(100f * i / (numImages - 1));      updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      arcFile=imageFiles[i];      if (!((new File(arcFile)).exists())) {        showFeedback("ArcGIS raster file does not exist.");        return;      }      if (arcFile.lastIndexOf(".") >= 0) {        String extension=arcFile.substring(arcFile.lastIndexOf("."));        whiteboxHeaderFile=arcFile.replace(extension,".dep");      } else {        whiteboxHeaderFile=arcFile + ".dep";      }      (new File(whiteboxHeaderFile)).delete();      (new File(whiteboxHeaderFile.replace(".dep",".tas"))).delete();      FileInputStream fstream=new FileInputStream(arcFile);      rows=0;      cols=0;      in=new DataInputStream(fstream);      br=new BufferedReader(new InputStreamReader(in));      if (arcFile != null) {        String line;        String[] str;        while ((line=br.readLine()) != null) {          str=line.split(delimiter);          if (str.length <= 1) {            delimiter="\t";            str=line.split(delimiter);            if (str.length <= 1) {              delimiter=" ";              str=line.split(delimiter);              if (str.length <= 1) {                delimiter=",";                str=line.split(delimiter);              }            }          }          if (str[0].toLowerCase().contains("ncols")) {            cols=Integer.parseInt(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("nrows")) {            rows=Integer.parseInt(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("xllcenter")) {            xllcenter=Double.parseDouble(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("yllcenter")) {            yllcenter=Double.parseDouble(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("xllcorner")) {            xllcorner=Double.parseDouble(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("yllcorner")) {            yllcorner=Double.parseDouble(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("cellsize")) {            cellsize=Double.parseDouble(str[str.length - 1]);            if (xllcorner != 0) {              east=xllcorner + cols * cellsize;              west=xllcorner;              south=yllcorner;              north=yllcorner + rows * cellsize;            } else {              east=xllcenter - (0.5 * cellsize) + cols * cellsize;              west=xllcenter - (0.5 * cellsize);              south=yllcenter - (0.5 * cellsize);              north=yllcenter - (0.5 * cellsize) + rows * cellsize;            }          } else           if (str[0].toLowerCase().contains("nodata")) {            arcNoData=Double.parseDouble(str[str.length - 1]);          } else {            break;          }        }        fw=new FileWriter(whiteboxHeaderFile,false);        bw=new BufferedWriter(fw);        out=new PrintWriter(bw,true);        str1="Min:\t" + Double.toString(Integer.MAX_VALUE);        out.println(str1);        str1="Max:\t" + Double.toString(Integer.MIN_VALUE);        out.println(str1);        str1="North:\t" + Double.toString(north);        out.println(str1);        str1="South:\t" + Double.toString(south);        out.println(str1);        str1="East:\t" + Double.toString(east);        out.println(str1);        str1="West:\t" + Double.toString(west);        out.println(str1);        str1="Cols:\t" + Integer.toString(cols);        out.println(str1);        str1="Rows:\t" + Integer.toString(rows);        out.println(str1);        str1="Data Type:\t" + "float";        out.println(str1);        str1="Z Units:\t" + "not specified";        out.println(str1);        str1="XY Units:\t" + "not specified";        out.println(str1);        str1="Projection:\t" + "not specified";        out.println(str1);        str1="Data Scale:\tcontinuous";        out.println(str1);        str1="Preferred Palette:\t" + "spectrum.pal";        out.println(str1);        str1="NoData:\t-32768";        out.println(str1);        if (java.nio.ByteOrder.nativeOrder() == java.nio.ByteOrder.LITTLE_ENDIAN) {          str1="Byte Order:\t" + "LITTLE_ENDIAN";        } else {          str1="Byte Order:\t" + "BIG_ENDIAN";        }        out.println(str1);        WhiteboxRaster wbr=new WhiteboxRaster(whiteboxHeaderFile,"rw");        delimiter=" ";        row=0;        col=0;        while ((line=br.readLine()) != null) {          str=line.split(delimiter);          if (str.length <= 1) {            delimiter="\t";            str=line.split(delimiter);            if (str.length <= 1) {              delimiter=" ";              str=line.split(delimiter);              if (str.length <= 1) {                delimiter=",";                str=line.split(delimiter);              }            }          }          if (str[0].toLowerCase().contains("ncols")) {          } else           if (str[0].toLowerCase().contains("nrows")) {          } else           if (str[0].toLowerCase().contains("xllcenter")) {          } else           if (str[0].toLowerCase().contains("yllcenter")) {          } else           if (str[0].toLowerCase().contains("xllcorner")) {          } else           if (str[0].toLowerCase().contains("yllcorner")) {          } else           if (str[0].toLowerCase().contains("cellsize")) {          } else           if (str[0].toLowerCase().contains("nodata")) {          } else {            for (i=0; i < str.length; i++) {              z=Double.parseDouble(str[i]);              if (z != arcNoData) {                wbr.setValue(row,col,z);              } else {                wbr.setValue(row,col,whiteboxNoData);              }              col++;              if (col == cols) {                col=0;                row++;              }            }          }        }        in.close();        br.close();        wbr.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");        wbr.addMetadataEntry("Created on " + new Date());        wbr.close();        returnData(whiteboxHeaderFile);      }    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static int[][] generatePartition(int indices[],Random r){  int L=indices.length;  return generatePartition(indices,r.nextInt(L) + 1,r);}  }
class C{  public static String escape(String s){  if (s == null)   return null;  StringBuffer sb=new StringBuffer();  escape(s,sb);  return sb.toString();}  }
class C{  public Object convert(Class<?> targetType,Object valueToConvert) throws JavaTypeTranslatorException {  Quantity rVal=null;  if (valueToConvert == null) {    throw new JavaTypeTranslatorException("Null passed toObjectToMoney.convert()");  }  if (valueToConvert instanceof String) {    String stringValue=(String)valueToConvert;    rVal=new Quantity(stringValue);  } else {    throw new JavaTypeTranslatorException("internal error parsing value");  }  return (rVal);}  }
class C{  public void testRandomAccess() throws IOException {  Directory dir=newDirectory();  Directory cr=createLargeCFS(dir);  IndexInput e1=dir.openInput("_123.f11",newIOContext(random()));  IndexInput e2=dir.openInput("_123.f3",newIOContext(random()));  IndexInput a1=cr.openInput("_123.f11",newIOContext(random()));  IndexInput a2=dir.openInput("_123.f3",newIOContext(random()));  e1.seek(100);  a1.seek(100);  assertEquals(100,e1.getFilePointer());  assertEquals(100,a1.getFilePointer());  byte be1=e1.readByte();  byte ba1=a1.readByte();  assertEquals(be1,ba1);  e2.seek(1027);  a2.seek(1027);  assertEquals(1027,e2.getFilePointer());  assertEquals(1027,a2.getFilePointer());  byte be2=e2.readByte();  byte ba2=a2.readByte();  assertEquals(be2,ba2);  assertEquals(101,e1.getFilePointer());  assertEquals(101,a1.getFilePointer());  be1=e1.readByte();  ba1=a1.readByte();  assertEquals(be1,ba1);  e1.seek(1910);  a1.seek(1910);  assertEquals(1910,e1.getFilePointer());  assertEquals(1910,a1.getFilePointer());  be1=e1.readByte();  ba1=a1.readByte();  assertEquals(be1,ba1);  assertEquals(1028,e2.getFilePointer());  assertEquals(1028,a2.getFilePointer());  be2=e2.readByte();  ba2=a2.readByte();  assertEquals(be2,ba2);  e2.seek(17);  a2.seek(17);  assertEquals(17,e2.getFilePointer());  assertEquals(17,a2.getFilePointer());  be2=e2.readByte();  ba2=a2.readByte();  assertEquals(be2,ba2);  assertEquals(1911,e1.getFilePointer());  assertEquals(1911,a1.getFilePointer());  be1=e1.readByte();  ba1=a1.readByte();  assertEquals(be1,ba1);  e1.close();  e2.close();  a1.close();  a2.close();  cr.close();  dir.close();}  }
class C{  public static synchronized iTunesMediator instance(){  if (INSTANCE == null) {    INSTANCE=new iTunesMediator();  }  return INSTANCE;}  }
class C{  public ComputeTaskCancelledCheckedException(String msg,@Nullable Throwable cause){  super(msg,cause);}  }
class C{  public static String unescapeXml(String str){  if (str == null) {    return null;  }  return Entities.XML.unescape(str);}  }
class C{  protected void validateSupportedVendorModel(VendorModel[] param){}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isTextFieldEditable(){  return false;}  }
class C{  public static Instances replaceZasClasses(Instances D,double Z[][],int L){  D.setClassIndex(-1);  for (int j=0; j < L; j++) {    D.deleteAttributeAt(0);  }  return insertZintoD(D,Z);}  }
class C{  public void writeTo(StreamOutput out) throws IOException {  out.writeByte(id);}  }
class C{  public int optInt(int index){  return this.optInt(index,0);}  }
class C{  public static int findGsmSeptetLimitIndex(String s,int start,int limit,int langTable,int langShiftTable){  int accumulator=0;  int size=s.length();  SparseIntArray charToLangTable=sCharsToGsmTables[langTable];  SparseIntArray charToLangShiftTable=sCharsToShiftTables[langShiftTable];  for (int i=start; i < size; i++) {    int encodedSeptet=charToLangTable.get(s.charAt(i),-1);    if (encodedSeptet == -1) {      encodedSeptet=charToLangShiftTable.get(s.charAt(i),-1);      if (encodedSeptet == -1) {        accumulator++;      } else {        accumulator+=2;      }    } else {      accumulator++;    }    if (accumulator > limit) {      return i;    }  }  return size;}  }
class C{  public JMRIClientSensor(int number,JMRIClientSystemConnectionMemo memo){  super(memo.getSystemPrefix() + "S" + number);  _number=number;  transmitName=memo.getTransmitPrefix() + "S" + number;  tc=memo.getJMRIClientTrafficController();  tc.addJMRIClientListener(this);  requestUpdateFromLayout();}  }
class C{  public static void buildWhereClause(AbstractSqlPagingQueryProvider provider,boolean remainingPageQuery,StringBuilder sql){  if (remainingPageQuery) {    sql.append(" WHERE ");    if (provider.getWhereClause() != null) {      sql.append("(");      sql.append(provider.getWhereClause());      sql.append(") AND ");    }  } else {    sql.append(provider.getWhereClause() == null ? "" : " WHERE " + provider.getWhereClause());  }}  }
class C{  public NotExists(Statement stmt){  super(stmt);  clause=format("NOT %s",clause);}  }
class C{  public void generate(){  try {    final MetadataGeneratorParameters parameters=buildMetadataGeneratorParameters();    final MetadataGenerator generator=new MetadataGenerator(args.outputFile);    final List<List<String>> signing=new ArrayList<>(2);    List<String> value=parameters.getBackchannelCert();    if (null != value) {      signing.add(value);    }    value=parameters.getSigningCert();    if (null != value) {      signing.add(value);    }    generator.setSigningCerts(signing);    value=parameters.getEncryptionCert();    if (null != value) {      generator.setEncryptionCerts(Collections.singletonList(value));    }    if (args.dnsName != null) {      generator.setDNSName(args.dnsName);    } else {      generator.setDNSName(parameters.getDnsName());    }    if (args.entityId != null) {      generator.setEntityID(args.entityId);    } else {      generator.setEntityID(parameters.getEntityID());    }    if (args.scope != null) {      generator.setScope(args.scope);    } else {      generator.setScope(parameters.getScope());    }    generator.setSAML2AttributeQueryCommented(true);    generator.setSAML2LogoutCommented(true);    generator.generate();  } catch (  final Exception e) {    log.error(e.getMessage(),e);    throw new SAMLRuntimeException(e);  }}  }
class C{  public void addNamespacePrefix(String prefix,String namespace){  namespacePrefixes.put(prefix,namespace);}  }
class C{  public BufferedOutputStream(OutputStream out,String name){  this(out,defaultBufferSize,name);}  }
class C{  protected Path toDelegate(Path path){  if (path instanceof FilterPath) {    FilterPath fp=(FilterPath)path;    if (fp.fileSystem != fileSystem) {      throw new ProviderMismatchException("mismatch, expected: " + fileSystem.provider().getClass() + ", got: "+ fp.fileSystem.provider().getClass());    }    return fp.delegate;  } else {    throw new ProviderMismatchException("mismatch, expected: FilterPath, got: " + path.getClass());  }}  }
class C{  @Bean @ConditionalOnMissingBean public UIEventProvider eventProvider(){  return new HawkbitEventProvider();}  }
class C{  private void handleIntent(Intent intent){  if (intent == null || intent.getAction() == null)   return;  String action=intent.getAction();  if (action.equalsIgnoreCase(ACTION_STOP)) {    Log.i(TAG,"handleIntent: stopping stream from notification");    stopStreaming();    stopSleepTimer();    toBackground();    stopSelf();  }}  }
class C{  protected EngineImpl(){  super(new DiscreteAveragingAsianOption.ArgumentsImpl(),new DiscreteAveragingAsianOption.ResultsImpl());}  }
class C{  public void tryToTweet(final String status){  if (TwitterHelper.alreadyAuthorized()) {    TwitterHelper.tweet(status);  } else {    TwitterHelper.authorizeThenTweet(this,twitterAuthClient,status);  }}  }
class C{  public TypeCastExpression createTypeCastExpression(){  TypeCastExpressionImpl typeCastExpression=new TypeCastExpressionImpl();  return typeCastExpression;}  }
class C{  String rrToString(){  return address.getHostAddress();}  }
class C{  protected void mutate(){  for (int i=0; i < swarmSize; i++) {    mutate(i);  }}  }
class C{  public ByteArrayBody(final byte[] data,final String mimeType,final String filename){  super(mimeType);  if (data == null) {    throw new IllegalArgumentException("byte[] may not be null");  }  this.data=data;  this.filename=filename;}  }
class C{  @SuppressWarnings("unchecked") public static <K extends Comparable<? super K>,V>ImmutableSortedMap<K,V> of(K k1,V v1,K k2,V v2){  return ofEntries(entryOf(k1,v1),entryOf(k2,v2));}  }
class C{  public If createIf(){  IfImpl if_=new IfImpl();  return if_;}  }
class C{  private void addDeclaredSymbols(HashSet<String> result,NodeRepresentation node){  Vector<NodeRepresentation> parentVec=node.parentVector;  if (parentVec == null) {    parentVec=this.assumeReps;  }  int i=0;  while ((i < parentVec.size()) && (parentVec.elementAt(i) != node)) {    NodeRepresentation parent=parentVec.elementAt(i);    if (parent.nodeType == NodeRepresentation.NEW_NODE) {      result.add(parent.newId);    }    i++;  }  if (parentVec != this.assumeReps) {    if (node.parentNode != null) {      addDeclaredSymbols(result,node.parentNode);    } else {      System.out.println("Bug found in DecomposeProofHandler.addDeclaredSymbols.");    }  }}  }
class C{  public final int lastIndexOf(char ch){  return lastIndexOf(ch,_length - 1);}  }
class C{  public void onDirectoryDeleted(Path file){}  }
class C{  @DSSink({DSSinkKind.NETWORK}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:09.469 -0500",hash_original_method="D98A6CBE7C5513FE6A9CDBBB263207DD",hash_generated_method="3497AA2BACB57E1B8AC8F3075A18C057") @Override public void write(byte[] buf,int offset,int byteCount) throws IOException {  BlockGuard.getThreadPolicy().onNetwork();synchronized (writeLock) {    checkOpen();    Arrays.checkOffsetAndCount(buf.length,offset,byteCount);    if (byteCount == 0) {      return;    }    NativeCrypto.SSL_write(sslNativePointer,socket.getFileDescriptor$(),OpenSSLSocketImpl.this,buf,offset,byteCount);  }}  }
class C{  public final SecretKey generateSecret(KeySpec keySpec) throws InvalidKeySpecException {  return spiImpl.engineGenerateSecret(keySpec);}  }
class C{  public char[] ts2string(double[] ts,int paaSize,double[] cuts,double nThreshold) throws SAXException {  if (paaSize == ts.length) {    return tsProcessor.ts2String(tsProcessor.znorm(ts,nThreshold),cuts);  } else {    double[] paa=tsProcessor.paa(tsProcessor.znorm(ts,nThreshold),paaSize);    return tsProcessor.ts2String(paa,cuts);  }}  }
class C{  @Override public void startElement(String namespace,String localName,String qName,Attributes attrs) throws SAXException {  logger.fine("Start element " + qName);  ElementHandler parentHandler=curHandler;  if (curHandler == null) {    if (namespace.equals(rootNamespace) && localName.equals(rootElementName)) {      curHandler=rootHandler;    } else     if (rootElementName != null) {      throw new SAXException(new ParseException("Invalid root element, expected " + "(namespace uri:local name) of " + "(" + rootNamespace + ":"+ rootElementName+ ")"+ ", found ("+ namespace+ ":"+ localName));    }  } else   if (unrecognizedElements == 0) {    try {      curHandler=curHandler.getChildHandler(namespace,qName,localName,attrs,elementNamespaces);    } catch (    ParseException e) {      throw new SAXException(e);    }catch (    IOException e) {      throw new SAXException(e);    }  }  if (curHandler != null && unrecognizedElements == 0) {    curHandler.parent=parentHandler;    curHandler.qName=qName;    if (parentHandler != null) {      curHandler.xmlLang=parentHandler.xmlLang;      curHandler.xmlBase=parentHandler.xmlBase;    }    try {      for (int i=attrs.getLength() - 1; i >= 0; --i) {        String attrNamespace=attrs.getURI(i);        String attrLocalName=attrs.getLocalName(i);        String attrValue=attrs.getValue(i);        if (attrNamespace.equals("http://www.w3.org/XML/1998/namespace")) {          if (attrLocalName.equals("lang")) {            curHandler.xmlLang=attrValue;            logger.finer("xml:lang=" + attrValue);          } else           if (attrLocalName.equals("base")) {            curHandler.xmlBase=getCumulativeXmlBase(curHandler.xmlBase,attrValue);            logger.finer("xml:base=" + curHandler.xmlBase);          }        }      }      for (int i=attrs.getLength() - 1; i >= 0; --i) {        String attrNamespace=attrs.getURI(i);        String attrQName=attrs.getQName(i);        String attrLocalName=attrs.getLocalName(i);        String attrValue=attrs.getValue(i);        logger.finer("Attribute " + attrLocalName + "='"+ attrValue+ "'");        curHandler.processAttribute(attrNamespace,attrQName,attrLocalName,attrValue);      }    } catch (    ParseException e) {      throw new SAXException(e);    }catch (    URISyntaxException e) {      throw new SAXException(new ParseException(e.getMessage()));    }catch (    NumberFormatException e) {      throw new SAXException(new ParseException("Invalid integer format. " + e.getMessage()));    }    curHandler.okToInitializeXmlBlob=false;    if (curHandler.xmlBlob != null) {      if (curHandler.xmlLang != null) {        curHandler.xmlBlob.setLang(curHandler.xmlLang);      }      if (curHandler.xmlBase != null) {        curHandler.xmlBlob.setBase(curHandler.xmlBase);      }    }  } else {    ++unrecognizedElements;    for (    XmlNamespace ns : elementNamespaces) {      Stack<NamespaceDecl> nsDecls=namespaceMap.get(ns.getAlias());      if (nsDecls != null && nsDecls.size() > 0) {        nsDecls.peek().inBlob=true;      }    }    if (curHandler == null) {      curHandler=parentHandler;    }    if (curHandler != null && curHandler.innerXml != null) {      ArrayList<XmlWriter.Attribute> attrList=new ArrayList<XmlWriter.Attribute>(attrs.getLength());      for (int i=attrs.getLength() - 1; i >= 0; --i) {        String qNameAttr=attrs.getQName(i);        ensureBlobNamespace(curHandler,qNameAttr);        String value=attrs.getValue(i);        XmlWriter.Attribute attr=new XmlWriter.Attribute(qNameAttr,value);        attrList.add(attr);        if (curHandler.fullTextIndex) {          curHandler.fullTextIndexWriter.write(value);          curHandler.fullTextIndexWriter.write(" ");        }      }      try {        ensureBlobNamespace(curHandler,qName);        curHandler.innerXml.startElement(null,qName,attrList,elementNamespaces);      } catch (      IOException e) {        throw new SAXException(e);      }    }  }  elementNamespaces.clear();}  }
class C{  public Builder(String text){  this.text=text;}  }
class C{  public void findAndUndo(Object someObj){  super.findAndUndo(someObj);  if (someObj instanceof DrawingTool && getDrawingTool() == someObj) {    setDrawingTool(null);  }}  }
class C{  public JdbcRowSetImpl(){  conn=null;  ps=null;  rs=null;  try {    resBundle=JdbcRowSetResourceBundle.getJdbcRowSetResourceBundle();  } catch (  IOException ioe) {    throw new RuntimeException(ioe);  }  initParams();  try {    setShowDeleted(false);  } catch (  SQLException sqle) {    System.err.println(resBundle.handleGetObject("jdbcrowsetimpl.setshowdeleted").toString() + sqle.getLocalizedMessage());  }  try {    setQueryTimeout(0);  } catch (  SQLException sqle) {    System.err.println(resBundle.handleGetObject("jdbcrowsetimpl.setquerytimeout").toString() + sqle.getLocalizedMessage());  }  try {    setMaxRows(0);  } catch (  SQLException sqle) {    System.err.println(resBundle.handleGetObject("jdbcrowsetimpl.setmaxrows").toString() + sqle.getLocalizedMessage());  }  try {    setMaxFieldSize(0);  } catch (  SQLException sqle) {    System.err.println(resBundle.handleGetObject("jdbcrowsetimpl.setmaxfieldsize").toString() + sqle.getLocalizedMessage());  }  try {    setEscapeProcessing(true);  } catch (  SQLException sqle) {    System.err.println(resBundle.handleGetObject("jdbcrowsetimpl.setescapeprocessing").toString() + sqle.getLocalizedMessage());  }  try {    setConcurrency(ResultSet.CONCUR_UPDATABLE);  } catch (  SQLException sqle) {    System.err.println(resBundle.handleGetObject("jdbcrowsetimpl.setconcurrency").toString() + sqle.getLocalizedMessage());  }  setTypeMap(null);  try {    setType(ResultSet.TYPE_SCROLL_INSENSITIVE);  } catch (  SQLException sqle) {    System.err.println(resBundle.handleGetObject("jdbcrowsetimpl.settype").toString() + sqle.getLocalizedMessage());  }  setReadOnly(true);  try {    setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);  } catch (  SQLException sqle) {    System.err.println(resBundle.handleGetObject("jdbcrowsetimpl.settransactionisolation").toString() + sqle.getLocalizedMessage());  }  iMatchColumns=new Vector<Integer>(10);  for (int i=0; i < 10; i++) {    iMatchColumns.add(i,Integer.valueOf(-1));  }  strMatchColumns=new Vector<String>(10);  for (int j=0; j < 10; j++) {    strMatchColumns.add(j,null);  }}  }
class C{  public static CustomChannels run(AdSense adsense,String adClientId,int maxPageSize) throws Exception {  System.out.println("=================================================================");  System.out.printf("Listing all custom channels for ad client %s\n",adClientId);  System.out.println("=================================================================");  String pageToken=null;  CustomChannels customChannels=null;  do {    customChannels=adsense.customchannels().list(adClientId).setMaxResults(maxPageSize).setPageToken(pageToken).execute();    if (customChannels.getItems() != null && !customChannels.getItems().isEmpty()) {      for (      CustomChannel channel : customChannels.getItems()) {        System.out.printf("Custom channel with code \"%s\" and name \"%s\" was found.\n",channel.getCode(),channel.getName());      }    } else {      System.out.println("No custom channels found.");    }    pageToken=customChannels.getNextPageToken();  } while (pageToken != null);  System.out.println();  return customChannels;}  }
class C{  public boolean isClosed(){  return !open;}  }
class C{  public void checkActions(LexScan scanner,LexParse parser){  EOFActions eofActions=parser.getEOFActions();  Enumeration l=scanner.actions.elements();  while (l.hasMoreElements()) {    Action a=(Action)l.nextElement();    if (!a.equals(usedActions.get(a)) && !eofActions.isEOFAction(a)) {      Out.warning(scanner.file,ErrorMessages.NEVER_MATCH,a.priority - 1,-1);    }  }}  }
class C{  @Override public void onAction(){  onAction(ActionType.PICK);}  }
class C{  @Override public void trim(){}  }
class C{  @Transactional public Permission createPermission(Permission permission){  String permissionType=permission.getPermissionType();  String targetId=permission.getTargetId();  Permission current=permissionRepository.findTopByPermissionTypeAndTargetId(permissionType,targetId);  Preconditions.checkState(current == null,"Permission with permissionType %s targetId %s already exists!",permissionType,targetId);  return permissionRepository.save(permission);}  }
class C{  public boolean isDeclaredStatic(){  EList<N4Modifier> _declaredModifiers=this.getDeclaredModifiers();  return _declaredModifiers.contains(N4Modifier.STATIC);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:26.728 -0500",hash_original_method="4F115C3CD94EE462D7FE29C66038CE8B",hash_generated_method="47882F753BDA0BDAE8FD260C2B66EBED") public int enumerate(Thread[] threads){  return enumerate(threads,true);}  }
class C{  private void renamePojosJavaNames(Collection<PojoDescriptor> selPojos,String regex,String replace){  for (  PojoDescriptor pojo : selPojos)   for (  PojoField field : pojo.fields())   field.javaName(field.javaName().replaceAll(regex,replace));}  }
class C{  public CannotParseException(){  super();}  }
class C{  public void dragOver(DragSourceDragEvent dsde){  System.out.println("[Source] dragOver");  changeCursor(dsde.getDragSourceContext(),dsde.getUserAction() & dsde.getDropAction());  dropAction=dsde.getUserAction() & dsde.getDropAction();  System.out.println("dropAction = " + dropAction);}  }
class C{  protected Object evaluateLeftGreaterRight(List elements,String lvalue,String rvalue){  List array;  if (elements instanceof java.util.Vector) {    array=new java.util.Vector();  } else {    array=new ArrayList();  }  for (Iterator e=elements.iterator(); e.hasNext(); ) {    Object o=e.next();    if (o instanceof StructuredContent) {      if ((o=evaluateLeftGreaterRight((StructuredContent)o,lvalue,rvalue)) != null) {        array.add(o);      }    }  }  if (array.size() == 1) {    return (StructuredContent)array.get(0);  }  return array;}  }
class C{  private void initializePSIObjects() throws NoSuchAlgorithmException, IllegalArgumentException {  ArrayList<byte[]> friends=friendStore.getAllFriendsBytes();  try {    mClientPSI=new PrivateSetIntersection(friends);    mServerPSI=new PrivateSetIntersection(friends);  } catch (  NoSuchAlgorithmException e) {    setExchangeStatus(Status.ERROR);    setErrorMessage("No such algorithm when creating PrivateSetIntersection." + e);    throw e;  }}  }
class C{  public void begin(String namespace,String name,Attributes attributes) throws Exception {  FacesConfigBean fcb=null;  try {    fcb=(FacesConfigBean)digester.peek();  } catch (  Exception e) {    throw new IllegalStateException("No parent FacesConfigBean on object stack");  }  ApplicationBean ab=fcb.getApplication();  if (ab == null) {    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("[ApplicationRule]{" + digester.getMatch() + "} New "+ CLASS_NAME);    }    Class clazz=digester.getClassLoader().loadClass(CLASS_NAME);    ab=(ApplicationBean)clazz.newInstance();    fcb.setApplication(ab);  } else {    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("[ApplicationRule]{" + digester.getMatch() + "} Old "+ CLASS_NAME);    }  }  digester.push(ab);}  }
class C{  public static MeteringRectangle[] gcamAERegionsForNormalizedCoord(float nx,float ny,final Rect cropRegion,int sensorOrientation){  return regionsForNormalizedCoord(nx,ny,Settings3A.getGcamMeteringRegionFraction(),cropRegion,sensorOrientation);}  }
class C{  public static Stats of(double... values){  StatsAccumulator acummulator=new StatsAccumulator();  acummulator.addAll(values);  return acummulator.snapshot();}  }
class C{  public IdentityHashMap(int initialCapacity){  this(initialCapacity,0.75f);}  }
class C{  public CUDA_MEMCPY3D_PEER(){}  }
class C{  public void receiveErrorqueryArrays(java.lang.Exception e){}  }
class C{  public boolean isNodeSibling(TreeNode anotherNode){  boolean retval;  if (anotherNode == null) {    retval=false;  } else   if (anotherNode == this) {    retval=true;  } else {    TreeNode myParent=getParent();    retval=(myParent != null && myParent == anotherNode.getParent());    if (retval && !((DefaultMutableTreeNode)getParent()).isNodeChild(anotherNode)) {      throw new Error("sibling has different parent");    }  }  return retval;}  }
class C{  public void addActionListener(ActionListener listener){  m_text.addActionListener(listener);}  }
class C{  public void xorThisBy(GF2Polynomial b){  int i;  for (i=0; i < Math.min(blocks,b.blocks); i++) {    value[i]^=b.value[i];  }  zeroUnusedBits();}  }
class C{  @Override protected void onStop(){  if (null != mApiClient && mApiClient.isConnected()) {    Wearable.MessageApi.removeListener(mApiClient,this);    Wearable.DataApi.removeListener(mApiClient,this);    mApiClient.disconnect();  }  super.onStop();}  }
class C{  public static String canonicalizePath(String path,boolean discardRelativePrefix){  int segmentStart=0;  int deletableSegments=0;  for (int i=0; i <= path.length(); ) {    int nextSegmentStart;    if (i == path.length()) {      nextSegmentStart=i;    } else     if (path.charAt(i) == '/') {      nextSegmentStart=i + 1;    } else {      i++;      continue;    }    if (i == segmentStart + 1 && path.regionMatches(segmentStart,".",0,1)) {      path=path.substring(0,segmentStart) + path.substring(nextSegmentStart);      i=segmentStart;    } else     if (i == segmentStart + 2 && path.regionMatches(segmentStart,"..",0,2)) {      if (deletableSegments > 0 || discardRelativePrefix) {        deletableSegments--;        int prevSegmentStart=path.lastIndexOf('/',segmentStart - 2) + 1;        path=path.substring(0,prevSegmentStart) + path.substring(nextSegmentStart);        i=segmentStart=prevSegmentStart;      } else {        i++;        segmentStart=i;      }    } else {      if (i > 0) {        deletableSegments++;      }      i++;      segmentStart=i;    }  }  return path;}  }
class C{  protected boolean isBackflush(){  super.setIsBackflush(pickcombo.getSelectedIndex() == 0);  return super.isBackflush();}  }
class C{  @Override public JapaneseDate dateEpochDay(long epochDay){  return new JapaneseDate(LocalDate.ofEpochDay(epochDay));}  }
class C{  public GameReportEvent(Object source,String s){  super(source);  this.report=s;}  }
class C{  public X931SecureRandomBuilder(SecureRandom entropySource,boolean predictionResistant){  this.random=entropySource;  this.entropySourceProvider=new BasicEntropySourceProvider(random,predictionResistant);}  }
class C{  protected void computeGeometry(DrawContext dc,OrderedLabel olbl){  Position pos=this.getPosition();  if (pos == null)   return;  olbl.placePoint=dc.computeTerrainPoint(pos.getLatitude(),pos.getLongitude(),0);  olbl.screenPlacePoint=dc.getView().project(olbl.placePoint);  olbl.eyeDistance=olbl.placePoint.distanceTo3(dc.getView().getEyePoint());  boolean orientationReversed=false;  if (this.orientationPosition != null) {    Vec4 orientationPlacePoint=dc.computeTerrainPoint(this.orientationPosition.getLatitude(),this.orientationPosition.getLongitude(),0);    Vec4 orientationScreenPoint=dc.getView().project(orientationPlacePoint);    olbl.rotation=this.computeRotation(olbl.screenPlacePoint,orientationScreenPoint);    orientationReversed=(orientationScreenPoint.x <= olbl.screenPlacePoint.x);  }  this.computeBoundsIfNeeded(dc);  Offset offset=this.getOffset();  Point2D offsetPoint=offset.computeOffset(this.bounds.getWidth(),this.bounds.getHeight(),null,null);  if (olbl.rotation != null) {    double dy=offsetPoint.getY();    if (orientationReversed) {      dy=-(dy + this.bounds.getHeight());    }    Vec4 pOffset=new Vec4(offsetPoint.getX(),dy);    Matrix rot=Matrix.fromRotationZ(olbl.rotation.multiply(-1));    pOffset=pOffset.transformBy3(rot);    offsetPoint=new Point((int)pOffset.getX(),(int)pOffset.getY());  }  int x=(int)(olbl.screenPlacePoint.x + offsetPoint.getX());  int y=(int)(olbl.screenPlacePoint.y - offsetPoint.getY());  olbl.screenPoint=new Point(x,y);  olbl.screenExtent=this.computeTextExtent(x,y,olbl);}  }
class C{  public static Integer[] toReferenceType(int[] primArr){  Integer[] refArr=new Integer[primArr.length];  for (int i=0; i < primArr.length; i++)   refArr[i]=Integer.valueOf(primArr[i]);  return refArr;}  }
class C{  public Stack(int capacity){  this.N=capacity;  this.i=-1;  this.v=new int[N];}  }
class C{  public STDPRulePanel(){  this.addItem("Tau minus",tfTauMinus);  this.addItem("Tau plus",tfTauPlus);  this.addItem("W+",tfWPlus);  this.addItem("W-",tfWMinus);  this.addItem("Learning rate",tfLearningRate);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (FileDownloader.getFileDownloader(stack.getUIMgrSafe()).isComplete()) {    if (FileDownloader.getFileDownloader(stack.getUIMgrSafe()).wasSuccessful())     return Boolean.TRUE; else     return "Error: " + FileDownloader.getFileDownloader(stack.getUIMgrSafe()).getStatusMessage();  } else   return FileDownloader.getFileDownloader(stack.getUIMgrSafe()).getStatusMessage();}  }
class C{  public int size(){  return entries.size();}  }
class C{  private void publishIndication(CIMInstance indication,CimConnection connection){  if (_indicationConsumers == null) {    s_logger.error("Indication consumers list is null.");    return;  }  for (  CimIndicationConsumer consumer : _indicationConsumers) {    Object processedIndication=indication;    CimIndicationProcessor processor=null;    if (consumer.getUseDefaultProcessor()) {      processor=connection.getDefaultIndicationProcessor();      processedIndication=processor.process(indication);    }    processor=consumer.getIndicationProcessor();    if (processor != null) {      processedIndication=processor.process(processedIndication);    }    consumer.consumeIndication(processedIndication);  }}  }
class C{  public Slice serializeValue(V value){  valueSerde.serialize(value,valueBuffer);  return valueBuffer.toSlice();}  }
class C{  public static boolean createEXCEL_HTML(ReportEngine re,Properties m_ctx,File file,boolean onlyTable,Language language){  try {    Language lang=language;    if (lang == null)     lang=Language.getLoginLanguage();    FileWriter fw=new FileWriter(file,false);    return createEXCEL_HTML(re,m_ctx,new BufferedWriter(fw),onlyTable,lang);  } catch (  FileNotFoundException fnfe) {    log.log(Level.SEVERE,"(f) - " + fnfe.toString());  }catch (  Exception e) {    log.log(Level.SEVERE,"(f)",e);  }  return false;}  }
class C{  private static void closeInputStream(InputStream s){  if (s == null) {    return;  }  try {    s.close();  } catch (  IOException e) {    throw new RuntimeException("IOException occurred. ",e);  }}  }
class C{  public double stop(){  if (_start == -1)   throw new RuntimeException("Stop time measurement without prior start is invalid.");  long end=System.nanoTime();  double duration=((double)(end - _start)) / 1000000;  _start=end;  return duration;}  }
class C{  protected CCProgressFromTo(float t,float fromPercentage,float toPercentage){  super(t);  to_=toPercentage;  from_=fromPercentage;}  }
class C{  @RequestMapping(method=RequestMethod.POST,value="/clone") public JsonResponse clone(@RequestBody JsonInput input) throws ServiceException, InterruptedException, CheckException {  if (logger.isInfoEnabled()) {    logger.info(input.toString());    logger.info(input.getClientSource());  }  User user=authentificationUtils.getAuthentificatedUser();  if (user.getStatus().equals(User.STATUS_NOT_ALLOWED)) {    logger.warn("Request dispatched");    return null;  }  authentificationUtils.forbidUser(user);  try {    input.validateClone();    logger.info(input.getApplicationName() + ", " + input.getTag());    snapshotService.cloneFromASnapshot(input.getApplicationName(),input.getTag());    Application application=applicationService.findByNameAndUser(user,input.getApplicationName());    applicationService.stop(application);    applicationService.setStatus(application,Status.STOP);  }  finally {    authentificationUtils.allowUser(user);  }  return new HttpOk();}  }
class C{  public PrintEvent(Object source){  super(source);}  }
class C{  public boolean canWrite(){  return getBestPath().canRead();}  }
class C{  public Daemon(){}  }
class C{  @ReactMethod public void canShare(ReadableMap shareContentMap,Promise promise){  ShareContent shareContent=Utility.buildShareContent(shareContentMap);  if (shareContent != null) {    ShareApi shareApi=new ShareApi(shareContent);    promise.resolve(shareApi.canShare());  } else {    promise.reject("ShareContent cannot be null");  }}  }
class C{  private boolean isSlavoGermanic(String value){  return value.indexOf('W') > -1 || value.indexOf('K') > -1 || value.indexOf("CZ") > -1 || value.indexOf("WITZ") > -1;}  }
class C{  public PersonUser findPersonUser(String tenantName,PrincipalId id) throws Exception {  return getService().findPersonUser(tenantName,id,this.getServiceContext());}  }
class C{  private static byte[] writeShort(short value) throws IOException {  byte[] b=new byte[2];  b[0]=(byte)(value & 0x00FF);  b[1]=(byte)((value & 0xFF00) >> 8);  return b;}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  private int findSegmentIndexToSnap(Coordinate snapPt,CoordinateList srcCoords){  double minDist=Double.MAX_VALUE;  int snapIndex=-1;  for (int i=0; i < srcCoords.size() - 1; i++) {    seg.p0=(Coordinate)srcCoords.get(i);    seg.p1=(Coordinate)srcCoords.get(i + 1);    if (seg.p0.equals2D(snapPt) || seg.p1.equals2D(snapPt)) {      if (allowSnappingToSourceVertices)       continue; else       return -1;    }    double dist=seg.distance(snapPt);    if (dist < snapTolerance && dist < minDist) {      minDist=dist;      snapIndex=i;    }  }  return snapIndex;}  }
class C{  NodeEventHandler(){}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public String ordinalize(int number){  int modulo=number % 100;  if ((modulo >= 11) && (modulo <= 13)) {    return "" + number + "th";  }switch (number % 10) {case 1:    return "" + number + "st";case 2:  return "" + number + "nd";case 3:return "" + number + "rd";default :return "" + number + "th";}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:47.323 -0500",hash_original_method="DF57B31FD2F05C7FE41E5F087EC0A031",hash_generated_method="7DD2A6F62050298BE8BEB3B929920E23") public ReferToParser(String referTo){  super(referTo);}  }
class C{  public static double toDoublePow10(long m,int n){  if (m == 0)   return 0.0;  if (m == Long.MIN_VALUE)   return toDoublePow10(Long.MIN_VALUE / 10,n + 1);  if (m < 0)   return -toDoublePow10(-m,n);  if (n >= 0) {    if (n > 308)     return Double.POSITIVE_INFINITY;    long x0=0;    long x1=0;    long x2=m & MASK_32;    long x3=m >>> 32;    int pow2=0;    while (n != 0) {      int i=(n >= POW5_INT.length) ? POW5_INT.length - 1 : n;      int coef=POW5_INT[i];      if (((int)x0) != 0)       x0*=coef;      if (((int)x1) != 0)       x1*=coef;      x2*=coef;      x3*=coef;      x1+=x0 >>> 32;      x0&=MASK_32;      x2+=x1 >>> 32;      x1&=MASK_32;      x3+=x2 >>> 32;      x2&=MASK_32;      pow2+=i;      n-=i;      long carry=x3 >>> 32;      if (carry != 0) {        x0=x1;        x1=x2;        x2=x3 & MASK_32;        x3=carry;        pow2+=32;      }    }    int shift=31 - MathLib.bitLength(x3);    pow2-=shift;    long mantissa=(shift < 0) ? (x3 << 31) | (x2 >>> 1) : (((x3 << 32) | x2) << shift) | (x1 >>> (32 - shift));    return toDoublePow2(mantissa,pow2);  } else {    if (n < -324 - 20)     return 0.0;    long x1=m;    long x0=0;    int pow2=0;    while (true) {      int shift=63 - MathLib.bitLength(x1);      x1<<=shift;      x1|=x0 >>> (63 - shift);      x0=(x0 << shift) & MASK_63;      pow2-=shift;      if (n == 0)       break;      int i=(-n >= POW5_INT.length) ? POW5_INT.length - 1 : -n;      int divisor=POW5_INT[i];      long wh=(x1 >>> 32);      long qh=wh / divisor;      long r=wh - qh * divisor;      long wl=(r << 32) | (x1 & MASK_32);      long ql=wl / divisor;      r=wl - ql * divisor;      x1=(qh << 32) | ql;      wh=(r << 31) | (x0 >>> 32);      qh=wh / divisor;      r=wh - qh * divisor;      wl=(r << 32) | (x0 & MASK_32);      ql=wl / divisor;      x0=(qh << 32) | ql;      n+=i;      pow2-=i;    }    return toDoublePow2(x1,pow2);  }}  }
class C{  public PseudoTcpSocketImpl(long conv_id,int local_port) throws SocketException {  this(conv_id,new DatagramSocket(local_port));}  }
class C{  public Builder poolConfig(JedisPoolConfig poolConfig){  this.poolConfig=poolConfig;  return this;}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public char previous(){  if (--pos >= off) {    return chars[pos];  }  pos=off;  return DONE;}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  if (remainder.length() == 0) {    return false;  }  final RPAction action=new RPAction();  action.put("type","jail");  action.put("target",params[0]);  action.put("minutes",params[1]);  action.put("reason",remainder);  ClientSingletonRepository.getClientFramework().send(action);  return true;}  }
class C{  public void instrument_method(Method m,MethodGen mg){  InstructionList il=mg.getInstructionList();  for (InstructionHandle ih=il.getStart(); ih != null; ) {    if (debug_instrument_inst.enabled()) {      debug_instrument_inst.log("instrumenting instruction %s%n",ih);    }    InstructionHandle next_ih=ih.getNext();    InstructionList new_il=xform_inst(mg,ih.getInstruction());    if (debug_instrument_inst.enabled())     debug_instrument_inst.log("  new inst: %s%n",new_il);    replace_instructions(il,ih,new_il);    ih=next_ih;  }}  }
class C{  public static int fileInTimeRange(File f,Date start,Date end){  long time=getFileTime(f);  if (start != null && time < start.getTime()) {    return -1;  }  if (end != null && time > end.getTime()) {    return 1;  }  return 0;}  }
class C{  @MainThread @ObjectiveCName("subscribeWithListener:") public void subscribe(@NotNull ModelChangedListener<UserVM> listener){  if (listeners.contains(listener)) {    return;  }  listeners.add(listener);  listener.onChanged(this);}  }
class C{  @SuppressWarnings("unchecked") public Vertex evaluateExpression(Vertex expression,Map<Vertex,Vertex> variables,Network network,long startTime,long maxTime,int stack){  if (stack > MAX_STACK) {    throw new SelfExecutionException(expression,"Stack overflow: " + stack);  }  stack++;  if ((System.currentTimeMillis() - startTime) > maxTime) {    throw new SelfExecutionException(expression,"Max time exceeded: " + maxTime);  }  Vertex result=null;  boolean isDebug=network.getBot().isDebugFiner();  if (expression.isVariable()) {    result=variables.get(expression);    if (result == null) {      if (expression.hasName()) {        result=variables.get(expression.getName());      }      if (result == null) {        result=network.createVertex(Primitive.NULL);      }    }  } else   if (expression.instanceOf(Primitive.EXPRESSION)) {    try {      if (expression.getData() instanceof BinaryData) {        Vertex equation=SelfDecompiler.getDecompiler().parseExpressionByteCode(expression,(BinaryData)expression.getData(),expression.getNetwork());        if (!(equation.getData() instanceof BinaryData)) {          return evaluateExpression(equation,variables,network,startTime,maxTime,stack);        }      }      Vertex operator=expression.getRelationship(Primitive.OPERATOR);      if (operator == null) {        return network.createVertex(Primitive.NULL);      }      List<Relationship> arguments=expression.orderedRelationships(Primitive.ARGUMENT);      if (arguments == null) {        arguments=Collections.EMPTY_LIST;      }      if (isDebug) {        Vertex source=expression.getRelationship(Primitive.SOURCE);        String sourceCode="";        if (source != null) {          sourceCode=String.valueOf(source.getData()).trim();        } else         if (operator.isPrimitive()) {          if (operator.is(Primitive.CALL)) {            sourceCode=((Primitive)operator.getData()).getIdentity().toUpperCase() + "(" + String.valueOf(expression.getRelationship(Primitive.FUNCTION))+ expression.orderedRelations(Primitive.ARGUMENT)+ ")";          } else {            sourceCode=((Primitive)operator.getData()).getIdentity().toUpperCase() + "(" + expression.orderedRelations(Primitive.ARGUMENT)+ ")";          }        }        Vertex number=expression.getRelationship(Primitive.LINE_NUMBER);        if (number != null) {          sourceCode=String.valueOf(number.getData()) + ":" + sourceCode;        }        network.getBot().log(this,sourceCode,Level.FINER);      }      if (operator.is(Primitive.NOT)) {        result=evaluateNOT(expression,arguments,variables,network,startTime,maxTime,stack);      } else       if (operator.is(Primitive.FOR)) {        result=evaluateFOR(expression,arguments,variables,network,startTime,maxTime,stack);      } else       if (operator.is(Primitive.WHILE)) {        result=evaluateWHILE(expression,arguments,variables,network,startTime,maxTime,stack);      } else       if (operator.is(Primitive.ASSIGN)) {        Vertex variable=arguments.get(0).getTarget();        Vertex value=evaluateExpression(arguments.get(1).getTarget(),variables,network,startTime,maxTime,stack);        if (value != null) {          variables.put(variable,value);        }        if (isDebug) {          network.getBot().log(this,"" + variable + " = "+ value,Level.FINER);        }        result=value;      } else       if (operator.is(Primitive.INCREMENT)) {        Vertex variable=arguments.get(0).getTarget();        Vertex value=evaluateExpression(variable,variables,network,startTime,maxTime,stack);        if (value != null && value.getData() instanceof Number) {          value=network.createVertex(((Number)value.getData()).intValue() + 1);          variables.put(variable,value);        }        if (isDebug) {          network.getBot().log(this,"" + variable + " = "+ value,Level.FINER);        }        result=value;      } else       if (operator.is(Primitive.DECREMENT)) {        Vertex variable=arguments.get(0).getTarget();        Vertex value=evaluateExpression(variable,variables,network,startTime,maxTime,stack);        if (value != null && value.getData() instanceof Number) {          value=network.createVertex(((Number)value.getData()).intValue() - 1);          variables.put(variable,value);        }        if (isDebug) {          network.getBot().log(this,"" + variable + " = "+ value,Level.FINER);        }        result=value;      } else       if (operator.is(Primitive.IF)) {        result=evaluateIF(expression,arguments,variables,network,startTime,maxTime,stack);      } else       if (operator.is(Primitive.EQUALS)) {        result=evaluateEQUALS(expression,arguments,variables,network,startTime,maxTime,stack);      } else       if (operator.is(Primitive.NOTEQUALS)) {        result=evaluateNOTEQUALS(expression,arguments,variables,network,startTime,maxTime,stack);      } else       if (operator.is(Primitive.OR)) {        result=evaluateOR(expression,arguments,variables,network,startTime,maxTime,stack);      } else       if (operator.is(Primitive.AND)) {        result=evaluateAND(expression,arguments,variables,network,startTime,maxTime,stack);      } else       if (operator.is(Primitive.DO)) {        result=evaluateDO(expression,arguments,variables,network,startTime,maxTime,stack);      } else       if (operator.is(Primitive.THINK)) {        result=evaluateTHINK(expression,arguments,variables,network,startTime,maxTime,stack);      } else       if (operator.is(Primitive.GET)) {        result=evaluateGET(expression,arguments,variables,network,startTime,maxTime,stack);      } else       if (operator.is(Primitive.SET)) {        result=evaluateSET(expression,arguments,variables,network,startTime,maxTime,stack);      } else       if (operator.is(Primitive.ADD)) {        result=evaluateADD(expression,arguments,variables,network,startTime,maxTime,stack);      } else       if (operator.is(Primitive.REMOVE)) {        result=evaluateREMOVE(expression,arguments,variables,network,startTime,maxTime,stack);      } else       if (operator.is(Primitive.NEW)) {        result=evaluateNEW(expression,arguments,variables,network,startTime,maxTime,stack);      } else       if (operator.is(Primitive.CALL)) {        result=evaluateCALL(expression,arguments,variables,network,startTime,maxTime,stack);      } else       if (operator.is(Primitive.RETURN)) {        if (arguments == null || arguments.isEmpty()) {          result=network.createVertex(Primitive.NULL);        } else {          result=evaluateExpression(arguments.get(0).getTarget(),variables,network,startTime,maxTime,stack);        }        variables.put(network.createVertex(Primitive.RETURN),result);      } else       if (operator.is(Primitive.BREAK)) {        return operator;      } else       if (operator.is(Primitive.CONTINUE)) {        return operator;      } else       if (operator.is(Primitive.RANDOM)) {        result=evaluateRANDOM(expression,arguments,variables,network,startTime,maxTime,stack);      } else       if (operator.is(Primitive.DEBUG)) {        result=evaluateDEBUG(expression,arguments,variables,network,startTime,maxTime,stack);      } else       if (operator.is(Primitive.GREATERTHAN)) {        result=evaluateGREATERTHAN(expression,arguments,variables,network,startTime,maxTime,stack);      } else       if (operator.is(Primitive.GREATERTHANEQUAL)) {        result=evaluateGREATERTHANEQUAL(expression,arguments,variables,network,startTime,maxTime,stack);      } else       if (operator.is(Primitive.LESSTHAN)) {        result=evaluateLESSTHAN(expression,arguments,variables,network,startTime,maxTime,stack);      } else       if (operator.is(Primitive.LESSTHANEQUAL)) {        result=evaluateLESSTHANEQUAL(expression,arguments,variables,network,startTime,maxTime,stack);      } else       if (operator.is(Primitive.PLUS)) {        result=evaluatePLUS(expression,arguments,variables,network,startTime,maxTime,stack);      } else       if (operator.is(Primitive.MINUS)) {        result=evaluateMINUS(expression,arguments,variables,network,startTime,maxTime,stack);      } else       if (operator.is(Primitive.MULTIPLY)) {        result=evaluateMULTIPLY(expression,arguments,variables,network,startTime,maxTime,stack);      } else       if (operator.is(Primitive.DIVIDE)) {        result=evaluateDIVIDE(expression,arguments,variables,network,startTime,maxTime,stack);      } else       if (operator.is(Primitive.SYMBOL)) {        result=evaluateSYMBOL(expression,arguments,variables,network,startTime,maxTime,stack);      } else       if (operator.is(Primitive.LEARN)) {        result=evaluateLEARN(expression,arguments,variables,network,startTime,maxTime,stack);      } else       if (operator.is(Primitive.SRAI) || operator.is(Primitive.REDIRECT)) {        result=evaluateSRAI(expression,arguments,variables,network,startTime,maxTime,stack);      } else       if (operator.is(Primitive.SRAIX) || operator.is(Primitive.REQUEST)) {        result=evaluateSRAIX(expression,arguments,variables,network,startTime,maxTime,stack);      }    } catch (    SelfExecutionException exception) {      throw exception;    }catch (    Exception exception) {      network.getBot().log(this,exception);      throw new SelfExecutionException(expression,exception);    }  } else   if (expression.instanceOf(Primitive.FUNCTION)) {    result=evaluateFunction(expression,variables,network,startTime,maxTime,stack);  } else   if (expression.instanceOf(Primitive.EQUATION)) {    result=expression.applyQuotient(variables,network);  } else {    result=expression;  }  if (result == null) {    result=network.createVertex(Primitive.NULL);  }  if (result.getNetwork() != network) {    result=network.createVertex(result);  }  if (result.instanceOf(Primitive.FORMULA)) {    Language language=network.getBot().mind().getThought(Language.class);    Vertex newResult=language.evaluateFormula(result,variables,network);    if (newResult == null) {      language.log("Formula cannot be evaluated",Level.FINE,result);      result=network.createVertex(Primitive.NULL);    } else {      result=language.getWord(newResult,network);    }  }  if (isDebug && !result.equals(expression)) {    network.getBot().log(this,"result: ",Level.FINER,result,expression);  }  return result;}  }
class C{  private static Segment removeEndingWhitespace(Segment segment){  int toTrim=0;  char currentChar=segment.setIndex(segment.getEndIndex() - 1);  while ((currentChar == ' ' || currentChar == '\t') && currentChar != Segment.DONE) {    toTrim++;    currentChar=segment.previous();  }  String stringVal=segment.toString();  String newStringVal=stringVal.substring(0,stringVal.length() - toTrim);  return new Segment(newStringVal.toCharArray(),0,newStringVal.length());}  }
class C{  public void locate(String address) throws URISyntaxException, ClientProtocolException, IOException, ParserConfigurationException, IllegalStateException, SAXException, BadAddressException {  Document response=getResponse(getRequest(address));  String status=((Element)response.getElementsByTagName("status").item(0)).getChildNodes().item(0).getNodeValue();  if (!status.equals(ADDRESS_STATUS_OK))   throw new BadAddressException(status);  NodeList results=response.getElementsByTagName("result");  locations.clear();  for (int i=0; i < results.getLength(); i++) {    Element coords=((Element)((Element)((Element)results.item(i)).getElementsByTagName("geometry").item(0)).getElementsByTagName("location").item(0));    double latitude=Double.parseDouble(coords.getElementsByTagName("lat").item(0).getChildNodes().item(0).getNodeValue());    double longitude=Double.parseDouble(coords.getElementsByTagName("lng").item(0).getChildNodes().item(0).getNodeValue());    locations.add(new Coord(longitude,latitude));  }}  }
class C{  public IconicsDrawableOld alpha(int alpha){  setAlpha(alpha);  invalidateSelf();  return this;}  }
class C{  @Overridden boolean notUncommon(CraftMetaItem meta){  return true;}  }
class C{  public List<JCCompilationUnit> enterTreesIfNeeded(List<JCCompilationUnit> roots){  if (shouldStop(CompileState.ATTR))   return List.nil();  return enterTrees(roots);}  }
class C{  @Override public UserObject copy(){  return new UserObject(this);}  }
class C{  @Override public void doFilter(ServletRequest req,ServletResponse res,FilterChain chain) throws IOException, ServletException {  if (null != expiry) {    ((HttpServletResponse)res).setHeader(CACHE_CONTROL,"max-age=" + expiry + ", public");  }  chain.doFilter(req,res);}  }
class C{  private EvidenceCollector(){  super();  logVector=new Vector<String>();  logProgressive=deserializeProgressive();  flushEvidences();}  }
class C{  private void staticInit() throws Exception {  this.appendChild(mainPanel);  mainPanel.setStyle("position:absolute; height:90%; width:95%; border: none; background-color: white;");  North north=new North();  north.setSplittable(true);  north.setStyle("border: none");  mainPanel.appendChild(north);  historyDiv=new Div();  historyDiv.setStyle("position:absolute; height:100%; width:100%; background-color: lightgray;");  historyDiv.appendChild(historyText);  north.appendChild(historyDiv);  north.setAutoscroll(true);  north.setHeight("150px");  Center center=new Center();  center.appendChild(newText);  newText.setStyle("position:absolute; height:100%; width:100%");  newText.setMultiline(true);  mainPanel.appendChild(center);  South south=new South();  south.setHeight("50px");  south.setStyle("border: none; margin-top: 10px");  south.appendChild(confirmPanel);  mainPanel.appendChild(south);  confirmPanel.addActionListener(this);  this.setStyle("position: relative; height: 450px; width: 500px;");  this.setMaximizable(true);  this.setSizable(true);  this.setBorder("normal");}  }
class C{  public void addParser(Parser parser){  if (parserManager == null) {    parserManager=new ParserManager(this);  }  parserManager.addParser(parser);}  }
