class C{  public static Map<Map<String,String>,List<GeoTimeSerie>> partitionAndApplyUnflattened(Object function,WarpScriptStack stack,Macro validator,Collection<String> bylabels,List<GeoTimeSerie>... series) throws WarpScriptException {  Collection<GeoTimeSerie> allgts=new LinkedHashSet<GeoTimeSerie>();  boolean hasNonSingleton=false;  for (  Collection<GeoTimeSerie> serie : series) {    if (serie.size() > 1) {      hasNonSingleton=true;      allgts.addAll(serie);    }  }  if (!hasNonSingleton) {    allgts.addAll(series[0]);  }  Map<Map<String,String>,List<GeoTimeSerie>> partition=GTSHelper.partition(allgts,bylabels);  Map<Map<String,String>,List<GeoTimeSerie>> results=new LinkedHashMap<Map<String,String>,List<GeoTimeSerie>>();  for (  Map<String,String> partitionlabels : partition.keySet()) {    Map<String,String> commonlabels=Collections.unmodifiableMap(partitionlabels);    List<GeoTimeSerie> result=new ArrayList<GeoTimeSerie>();    List<GeoTimeSerie>[] subseries=new List[series.length];    for (int i=0; i < series.length; i++) {      subseries[i]=new ArrayList<GeoTimeSerie>();      if (1 == series[i].size()) {        subseries[i].add(series[i].iterator().next());      } else {        for (        GeoTimeSerie serie : partition.get(partitionlabels)) {          if (series[i].contains(serie)) {            subseries[i].add(serie);          }        }      }    }    if (function instanceof WarpScriptFilterFunction) {      List<GeoTimeSerie> filtered=((WarpScriptFilterFunction)function).filter(commonlabels,subseries);      if (null != filtered) {        result.addAll(filtered);      }    } else     if (function instanceof WarpScriptNAryFunction) {      boolean proceed=true;      if (null != stack && null != validator) {        stack.push(Arrays.asList(subseries));        stack.push(commonlabels);        stack.exec(validator);        if (!Boolean.TRUE.equals(stack.pop())) {          proceed=false;        }      }      if (proceed) {        result.add(GTSHelper.applyNAryFunction((WarpScriptNAryFunction)function,commonlabels,subseries));      }    } else {      throw new WarpScriptException("Invalid function to apply.");    }    results.put(commonlabels,result);  }  return results;}  }
class C{  public static boolean isExtendField(List idsExtendedFields,int nameCampo){  boolean result=false;  for (Iterator iterator=idsExtendedFields.iterator(); iterator.hasNext(); ) {    Integer idExtendField=(Integer)iterator.next();    if (idExtendField.intValue() == nameCampo) {      return true;    }  }  return result;}  }
class C{  public Component findNextFocusVertical(boolean down){  Container actual=getActualPane();  Component c=findNextFocusVertical(focused,null,actual,down);  if (c != null) {    return c;  }  if (cyclicFocus) {    c=findNextFocusVertical(focused,null,actual,!down);    if (c != null) {      Component current=findNextFocusVertical(c,null,actual,!down);      while (current != null) {        c=current;        current=findNextFocusVertical(c,null,actual,!down);      }      return c;    }  }  return null;}  }
class C{  @SuppressWarnings("unchecked") public V put(K key,V value){  final int hash=key.hashCode();  int index=indexOf(key,hash);  if (index >= 0) {    index=(index << 1) + 1;    final V old=(V)mArray[index];    mArray[index]=value;    return old;  }  index=~index;  if (mSize >= mHashes.length) {    final int n=mSize >= (BASE_SIZE * 2) ? (mSize + (mSize >> 1)) : (mSize >= BASE_SIZE ? (BASE_SIZE * 2) : BASE_SIZE);    final int[] ohashes=mHashes;    final Object[] oarray=mArray;    allocArrays(n);    if (mHashes.length > 0) {      System.arraycopy(ohashes,0,mHashes,0,ohashes.length);      System.arraycopy(oarray,0,mArray,0,oarray.length);    }    freeArrays(ohashes,oarray,mSize);  }  if (index < mSize) {    System.arraycopy(mHashes,index,mHashes,index + 1,mSize - index);    System.arraycopy(mArray,index << 1,mArray,(index + 1) << 1,(mSize - index) << 1);  }  mHashes[index]=hash;  mArray[index << 1]=key;  mArray[(index << 1) + 1]=value;  mSize++;  return null;}  }
class C{  public Entry toCacheEntry(byte[] data){  Entry e=new Entry();  e.data=data;  e.etag=etag;  e.serverDate=serverDate;  e.ttl=ttl;  e.responseHeaders=responseHeaders;  return e;}  }
class C{  private String[] splitOutGameMoveNumber(String wordToken){  if (Character.isDigit(wordToken.charAt(0))) {    int firstDotIndex=wordToken.indexOf('.');    if (firstDotIndex != -1) {      int firstThreeDotIndex=wordToken.indexOf("...");      if (firstThreeDotIndex != -1) {        if (wordToken.length() > firstThreeDotIndex + 3) {          return new String[]{wordToken.substring(0,firstThreeDotIndex),wordToken.substring(firstThreeDotIndex + 3)};        } else {          return new String[]{wordToken.substring(0,firstThreeDotIndex)};        }      } else {        if (wordToken.length() > firstDotIndex + 1) {          return new String[]{wordToken.substring(0,firstDotIndex),wordToken.substring(firstDotIndex + 1)};        } else {          return new String[]{wordToken.substring(0,firstDotIndex)};        }      }    }  }  return null;}  }
class C{  public Pattern delimiter(){  return delimPattern;}  }
class C{  public Round(){  super(Number.class,Number.class);}  }
class C{  public boolean isArmed(){  ButtonModel model=getModel();  return model.isArmed();}  }
class C{  public ToStringBuilder(Object object,ToStringStyle style,StringBuffer buffer){  if (style == null) {    style=getDefaultStyle();  }  if (buffer == null) {    buffer=new StringBuffer(512);  }  this.buffer=buffer;  this.style=style;  this.object=object;  style.appendStart(buffer,object);}  }
class C{  private boolean offerQueryOperation(Operation op){  String subject=getSubject(op);  return this.queryQueue.offer(subject,op);}  }
class C{  public DoubleLinkedList<IMove> moves(){  return moves;}  }
class C{  private void endLocalWrite(EntryEventImpl event){  if (!needWriteLock(event)) {    return;  }  doUnlockForPrimary();  Object keys[]=new Object[1];  keys[0]=event.getKey();  removeAndNotifyKeys(keys);}  }
class C{  public boolean isSameAs(FirewallRule r){  if (this.action != r.action || this.any_dl_type != r.any_dl_type || (this.any_dl_type == false && !this.dl_type.equals(r.dl_type)) || this.any_tp_src != r.any_tp_src || (this.any_tp_src == false && !this.tp_src.equals(r.tp_src)) || this.any_tp_dst != r.any_tp_dst || (this.any_tp_dst == false && !this.tp_dst.equals(r.tp_dst)) || this.any_dpid != r.any_dpid || (this.any_dpid == false && !this.dpid.equals(r.dpid)) || this.any_in_port != r.any_in_port || (this.any_in_port == false && !this.in_port.equals(r.in_port)) || this.any_nw_src != r.any_nw_src || (this.any_nw_src == false && !this.nw_src_prefix_and_mask.equals(r.nw_src_prefix_and_mask)) || this.any_dl_src != r.any_dl_src || (this.any_dl_src == false && !this.dl_src.equals(r.dl_src)) || this.any_nw_proto != r.any_nw_proto || (this.any_nw_proto == false && !this.nw_proto.equals(r.nw_proto)) || this.any_nw_dst != r.any_nw_dst || (this.any_nw_dst == false && !this.nw_dst_prefix_and_mask.equals(r.nw_dst_prefix_and_mask)) || this.any_dl_dst != r.any_dl_dst || (this.any_dl_dst == false && this.dl_dst != r.dl_dst)) {    return false;  }  return true;}  }
class C{  public void clearButtonsPanel(){  m_PanelButtons.removeAll();}  }
class C{  public void write(OutStream out) throws IOException {  out.flushBits();  boolean hasAddTerms=(addRed != 0) || (addGreen != 0) || (addBlue != 0);  boolean hasMultTerms=(multRed != 1.0) || (multGreen != 1.0) || (multBlue != 1.0);  int intMultRed=(int)(multRed * 256.0);  int intMultGreen=(int)(multGreen * 256.0);  int intMultBlue=(int)(multBlue * 256.0);  int numBits=1;  if (hasAddTerms) {    int redBits=OutStream.determineSignedBitSize(addRed);    int greenBits=OutStream.determineSignedBitSize(addGreen);    int blueBits=OutStream.determineSignedBitSize(addBlue);    if (numBits < redBits) {      numBits=redBits;    }    if (numBits < greenBits) {      numBits=greenBits;    }    if (numBits < blueBits) {      numBits=blueBits;    }  }  if (hasMultTerms) {    int redBits=OutStream.determineSignedBitSize(intMultRed);    int greenBits=OutStream.determineSignedBitSize(intMultGreen);    int blueBits=OutStream.determineSignedBitSize(intMultBlue);    if (numBits < redBits) {      numBits=redBits;    }    if (numBits < greenBits) {      numBits=greenBits;    }    if (numBits < blueBits) {      numBits=blueBits;    }  }  out.writeUBits(1,hasAddTerms ? 1L : 0L);  out.writeUBits(1,hasMultTerms ? 1L : 0L);  out.writeUBits(4,numBits);  if (hasMultTerms) {    out.writeSBits(numBits,intMultRed);    out.writeSBits(numBits,intMultGreen);    out.writeSBits(numBits,intMultBlue);  }  if (hasAddTerms) {    out.writeSBits(numBits,addRed);    out.writeSBits(numBits,addGreen);    out.writeSBits(numBits,addBlue);  }  out.flushBits();}  }
class C{  public String toString(){  StringBuilder sbuf=new StringBuilder();  for (int i=0; i < data.length; i++) {    int numberOfBitsToPrint=Byte.SIZE;    int remainingBits=size - (i * Byte.SIZE);    if (remainingBits < Byte.SIZE) {      numberOfBitsToPrint=remainingBits;    }    sbuf.append(String.format("%" + numberOfBitsToPrint + "s",Integer.toBinaryString(data[i] & 0xFF)).replace(' ','0'));    sbuf.append(" ");  }  return sbuf.toString();}  }
class C{  public static Date evenMinuteDateBefore(Date date){  if (date == null) {    date=new Date();  }  Calendar c=Calendar.getInstance();  c.setTime(date);  c.set(Calendar.SECOND,0);  c.set(Calendar.MILLISECOND,0);  return c.getTime();}  }
class C{  public ByteRange(int min,int max){  this((byte)min,(byte)max);}  }
class C{  public static <T>T[] arrayFrom(Collection<? extends T> list,Class<T> cpType){  return ArrayUtil.createFrom(list,cpType);}  }
class C{  public PropertyTable viewAsCategories(){  styleOfView=VIEW_AS_CATEGORIES;  return rebuild();}  }
class C{  public static void createDirectories(String dir){  if (dir != null) {    if (exists(dir)) {      if (!isDirectory(dir)) {        createDirectory(dir);      }    } else {      String parent=getParent(dir);      createDirectories(parent);      createDirectory(dir);    }  }}  }
class C{  public MMRoll(MMRandom rng,int count,int start){  super(count,start);  this.total=rng.randomInt(this.faces) + this.min;  all.addElement(this.total);}  }
class C{  public dfn addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public EditableOMCircle(){  createGraphic(null);}  }
class C{  public void checkAndSync(){  lockHelper.acquire(operatedVdc.getShortId());  geoClientCache.clearCache();  loadVdcInfo();  if (StringUtils.isNotEmpty(updateInfo.getProperty(GeoServiceJob.VDC_CERTIFICATE_CHAIN)) && (operatedVdc.getId().compareTo(myVdc.getId()) != 0)) {    String errMsg="could not update key certchain from remote VDC.";    log.error(errMsg);    throw GeoException.fatals.updateVdcPrecheckFail(errMsg);  }  VdcPreCheckResponse operatedVdcInfo=preCheck();  GeoServiceHelper.backupOperationVdc(dbClient,GeoServiceJob.JobType.VDC_UPDATE_JOB,operatedVdcInfo.getId(),params.toString());  failedVdcStatus=ConnectionStatus.UPDATE_FAILED;  updateOperatedVdc();  operatedVdc.setConnectionStatus(VirtualDataCenter.ConnectionStatus.UPDATING);  dbClient.updateAndReindexObject(operatedVdc);  loadVdcInfo();  VdcConfigSyncParam mergedVdcInfo=mergeConfig(operatedVdcInfo);  if (mergedVdcInfo == null) {    log.error("merge the vdc config of all sites failed");    throw GeoException.fatals.mergeConfigFail();  }  try {    syncConfig(mergedVdcInfo);  } catch (  GeoException ex) {    throw ex;  }catch (  Exception e) {    log.error("Failed to sync vdc config to all sites : {}",e);    throw GeoException.fatals.syncConfigFail(e);  }  String cert=updateInfo.getProperty(GeoServiceJob.VDC_CERTIFICATE_CHAIN);  if (StringUtils.isNotEmpty(cert)) {    VdcCertListParam certListParam=genCertOperationParam(VdcCertListParam.CMD_UPDATE_CERT);    syncCerts(VdcCertListParam.CMD_UPDATE_CERT,certListParam);    Boolean selfsigned=(Boolean)params.get(1);    byte[] key=(byte[])params.get(2);    Certificate[] certchain=(Certificate[])params.get(3);    helper.setKeyCertchain(selfsigned,key,certchain);  }  lockHelper.release(operatedVdc.getShortId());}  }
class C{  public void deleteComment(final IComment comment) throws com.google.security.zynamics.binnavi.API.disassembly.CouldntDeleteException {  try {    m_node.deleteComment(comment);  } catch (  final CouldntDeleteException exception) {    throw new com.google.security.zynamics.binnavi.API.disassembly.CouldntDeleteException(exception);  }}  }
class C{  private static int parseNum(CharProducer cp,int start) throws ParseException {  int end=parseInt(cp,start);  assert end >= 0;  int limit=cp.getLimit();  char[] buf=cp.getBuffer();  if (end < limit && '.' == buf[end]) {    ++end;    char ch;    if (end == limit || (ch=buf[end]) < '0' || ch > '9') {      throw new ParseException(new Message(MessageType.MALFORMED_NUMBER,cp.filePositionForOffsets(start,end),MessagePart.Factory.valueOf(cp.toString(start,end))));    }    return parseInt(cp,end);  }  return end;}  }
class C{  public long compactIndex(){  return compactIndex;}  }
class C{  @PatchMethod(override=true) public static <T>List<T> create(){  return mock(List.class);}  }
class C{  public KeyedPortal(final String key,final int quantity,final String rejectMessage){  super(rejectMessage);  this.key=key;  this.quantity=quantity;}  }
class C{  public SoapFault(SOAPFault soapFault){  this.faultCode=soapFault.getFaultCodeAsQName();  this.faultString=soapFault.getFaultString();  this.faultActor=soapFault.getFaultActor();  this.faultDetail=getFaultDetail(soapFault);}  }
class C{  private void validateState(State currentState){  ValidationUtils.validateState(currentState);  ValidationUtils.validateTaskStage(currentState.taskState);}  }
class C{  public void testToString(){  Certificate cert=new MyCertificate("TEST",new byte[10]);  KeyStore.TrustedCertificateEntry ksTCE=new KeyStore.TrustedCertificateEntry(cert);  assertNotNull("toString() returns null string",ksTCE.toString());}  }
class C{  public static Test suite(){  return (new TestSuite(MissingActionListenerMethodITCase.class));}  }
class C{  public final Node peepTailSub1(){  return m_map[m_firstFree - 2];}  }
class C{  public static DateTime parseDateTime(String str) throws NumberFormatException {  Matcher m=str == null ? null : dateTimePattern.matcher(str);  if (str == null || !m.matches()) {    throw new NumberFormatException("Invalid date/time format.");  }  DateTime ret=new DateTime();  ret.dateOnly=false;  if (m.group(9) == null) {  } else   if (m.group(9).equalsIgnoreCase("Z")) {    ret.tzShift=new Integer(0);  } else {    ret.tzShift=new Integer((Integer.valueOf(m.group(12)) * 60 + Integer.valueOf(m.group(13))));    if (m.group(11).equals("-")) {      ret.tzShift=new Integer(-ret.tzShift.intValue());    }  }  Calendar dateTime=new GregorianCalendar(GMT);  dateTime.clear();  dateTime.set(Integer.valueOf(m.group(1)),Integer.valueOf(m.group(2)) - 1,Integer.valueOf(m.group(3)),Integer.valueOf(m.group(4)),Integer.valueOf(m.group(5)),Integer.valueOf(m.group(6)));  if (m.group(8) != null && m.group(8).length() > 0) {    final BigDecimal bd=new BigDecimal("0." + m.group(8));    dateTime.set(Calendar.MILLISECOND,bd.movePointRight(3).intValue());  }  ret.value=dateTime.getTimeInMillis();  if (ret.tzShift != null) {    ret.value-=ret.tzShift.intValue() * 60000;  }  return ret;}  }
class C{  public void aggregateAsync(final KVO<BigdataValue>[] chunk,final Term2IdWriteProc.Result result,final Split split){  for (int i=0; i < chunk.length; i++) {    @SuppressWarnings("rawtypes") final IV iv=result.ivs[i];    if (iv == null) {      if (!readOnly)       throw new AssertionError();    } else {      chunk[i].obj.setIV(iv);      if (chunk[i] instanceof KVOList) {        final KVOList<BigdataValue> tmp=(KVOList<BigdataValue>)chunk[i];        if (!tmp.isDuplicateListEmpty()) {          tmp.map(new AssignTermId(iv));        }      }      if (log.isDebugEnabled()) {        log.debug("termId=" + iv + ", term="+ chunk[i].obj);      }    }  }}  }
class C{  public Group(final String name){  notNull(name,"Group name cannot be null.");  this.name=name;}  }
class C{  @Override public void flush(){  super.flush();  try {    if (out != null) synchronized (out) {      out.flush();    }  } catch (  SocketException se) {    close();  }catch (  IOException ioe) {    ioe.printStackTrace();    close();  }}  }
class C{  public boolean isUnresolved(){  return unresolved;}  }
class C{  protected void configureMapPanel(PropertyHandler propertyHandler){  super.configureMapPanel(propertyHandler);  MapHandler mapHandler=mapPanel.getMapHandler();  HotwashPanel hotwashPanel=new HotwashPanel();  String hotwash="hotwash";  hotwashPanel.setPropertyPrefix(hotwash);  mapHandler.add(hotwashPanel);  mapHandler.add(new OMEventSelectionCoordinator());  TimePanel timePanel=new TimePanel();  timePanel.setParentName(hotwash);  mapHandler.add(timePanel);  EventPanel eventPanel=new EventPanel();  eventPanel.setParentName(hotwash);  mapHandler.add(eventPanel);  EventListPresenter eventListPresenter=new EventListPresenter();  mapHandler.add(eventListPresenter);  mapHandler.add(new Clock());}  }
class C{  public void accept(final AnnotationVisitor av){  if (av != null) {    if (values != null) {      for (int i=0; i < values.size(); i+=2) {        String name=(String)values.get(i);        Object value=values.get(i + 1);        accept(av,name,value);      }    }    av.visitEnd();  }}  }
class C{  public TicTacToeBoard(){  super(3,3);  put("class","tictactoe");  board=new BoardToken[3][3];  tokenTypes=Arrays.asList("x board token","o board token");  setDescription("You see a game board for Tic Tac Toe.");}  }
class C{  @OnClose public void onClose(Session session){  openSessions.remove(session.getId());  callInternal("onClose",session,null);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ORDINAL_OP___GREATER_OP_1:    return getGreaterOp_1();case UmplePackage.ORDINAL_OP___LESS_OP_1:  return getLessOp_1();case UmplePackage.ORDINAL_OP___MORE_OP_1:return getMoreOp_1();case UmplePackage.ORDINAL_OP___SMALLER_OP_1:return getSmallerOp_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public IgniteTxTimeoutCheckedException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  private void restoreDynamicActions(FacesContext context,StateContext stateContext,HashMap<String,Object> state){  if (LOGGER.isLoggable(Level.FINEST)) {    LOGGER.finest("FaceletFullStateManagementStrategy.restoreDynamicActions");  }  UIViewRoot viewRoot=context.getViewRoot();  List<Object> savedActions=(List<Object>)viewRoot.getAttributes().get(DYNAMIC_ACTIONS);  List<ComponentStruct> actions=stateContext.getDynamicActions();  if (savedActions != null && !savedActions.isEmpty()) {    for (    Object object : savedActions) {      ComponentStruct action=new ComponentStruct();      action.restoreState(context,object);      if (ComponentStruct.ADD.equals(action.action)) {        restoreDynamicAdd(context,state,action);      }      if (ComponentStruct.REMOVE.equals(action.action)) {        restoreDynamicRemove(context,action);      }      pruneAndReAddToDynamicActions(actions,action);    }  }}  }
class C{  private void clearPreferredLauncher(){  Activity activity=getActivity();  if (activity == null) {    return;  }  mDevicePolicyManager.clearPackagePersistentPreferredActivities(DeviceOwnerReceiver.getComponentName(activity),loadPersistentPreferredLauncher(activity));  savePersistentPreferredLauncher(activity,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:43.641 -0500",hash_original_method="50C83C4F45D13310D76D1C1AF4DB3EDF",hash_generated_method="7A375570FF1943C0937CEFC037A47BFA") public boolean hasHttpAuthUsernamePassword(){synchronized (mHttpAuthLock) {    return hasEntries(TABLE_HTTPAUTH_ID);  }}  }
class C{  @LargeTest public void testEnforceSelectionDoesNotCrossAnchorBoundary1() throws Exception {  sExecutedTestCount++;  String html="<!DOCTYPE html>" + "<html>" + "<head>"+ "</head>"+ "<body>"+ "<div>First</div>"+ "<p>"+ "<a href=\"\">Second</a> Third"+ "</p>"+ "</body>"+ "</html>";  WebView webView=loadHTML(html);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("<div>First</div>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("<a href=\"\">Second</a>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("Third");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString(null);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("Third");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("<a href=\"\">Second</a>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("First");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString(null);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("<div>First</div>");}  }
class C{  public TaskTracker(TaskTracker other){  this(other.tag,other.period,other.flex,other.windowStartElapsedSecs,other.windowStopElapsedSecs,other.createdAtElapsedSecs);  this.cancelled=other.isCancelled();  this.executed=other.isExecuted();  for (  long l : other.executionTimes) {    this.executionTimes.add(l);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public final void writeBoolean(boolean v) throws IOException {  write(v ? 1 : 0);}  }
class C{  void presentDecorAnimations(int position,float offset){  int animMapSize=mDecorAnimations.size();  for (int i=0; i < animMapSize; i++) {    Decor decor=mDecorAnimations.keyAt(i);    ArrayList<Animation> animations=mDecorAnimations.get(decor);    int animListSize=animations.size();    for (int j=0; j < animListSize; j++) {      Animation animation=animations.get(j);      if (animation == null) {        continue;      }      if (!animation.shouldAnimate(position)) {        if (mPreviousPosition < position && animation.pageEnd < position) {          animation.animate(decor.contentView,1,0,position);        } else         if (mPreviousPosition > position && animation.pageStart > position) {          animation.animate(decor.contentView,0,0,position);        }        continue;      }      animation.animate(decor.contentView,offset,0,position);    }  }  mPreviousPosition=position;}  }
class C{  public StoragePolicyEntity createStoragePolicyEntity(StoragePolicyKey storagePolicyKey,String storagePolicyRuleType,Integer storagePolicyRuleValue,String businessObjectDefinitionNamespace,String businessObjectDefinitionName,String businessObjectFormatUsage,String businessObjectFormatFileType,String storageName,String destinationStorageName,String storagePolicyStatus,Integer storagePolicyVersion,Boolean storagePolicyLatestVersion){  NamespaceEntity storagePolicyNamespaceEntity=namespaceDao.getNamespaceByCd(storagePolicyKey.getNamespace());  if (storagePolicyNamespaceEntity == null) {    storagePolicyNamespaceEntity=namespaceDaoTestHelper.createNamespaceEntity(storagePolicyKey.getNamespace());  }  StoragePolicyRuleTypeEntity storagePolicyRuleTypeEntity=storagePolicyRuleTypeDao.getStoragePolicyRuleTypeByCode(storagePolicyRuleType);  if (storagePolicyRuleTypeEntity == null) {    storagePolicyRuleTypeEntity=storagePolicyRuleTypeDaoTestHelper.createStoragePolicyRuleTypeEntity(storagePolicyRuleType,AbstractDaoTest.DESCRIPTION);  }  BusinessObjectDefinitionEntity businessObjectDefinitionEntity=null;  if (StringUtils.isNotBlank(businessObjectDefinitionName)) {    businessObjectDefinitionEntity=businessObjectDefinitionDao.getBusinessObjectDefinitionByKey(new BusinessObjectDefinitionKey(businessObjectDefinitionNamespace,businessObjectDefinitionName));    if (businessObjectDefinitionEntity == null) {      businessObjectDefinitionEntity=businessObjectDefinitionDaoTestHelper.createBusinessObjectDefinitionEntity(businessObjectDefinitionNamespace,businessObjectDefinitionName,AbstractDaoTest.DATA_PROVIDER_NAME,AbstractDaoTest.BDEF_DESCRIPTION);    }  }  FileTypeEntity fileTypeEntity=null;  if (StringUtils.isNotBlank(businessObjectFormatFileType)) {    fileTypeEntity=fileTypeDao.getFileTypeByCode(businessObjectFormatFileType);    if (fileTypeEntity == null) {      fileTypeEntity=fileTypeDaoTestHelper.createFileTypeEntity(businessObjectFormatFileType);    }  }  StorageEntity storageEntity=storageDao.getStorageByName(storageName);  if (storageEntity == null) {    storageEntity=storageDaoTestHelper.createStorageEntity(storageName,StoragePlatformEntity.S3);  }  StorageEntity destinationStorageEntity=storageDao.getStorageByName(destinationStorageName);  if (destinationStorageEntity == null) {    destinationStorageEntity=storageDaoTestHelper.createStorageEntity(destinationStorageName,StoragePlatformEntity.GLACIER);  }  StoragePolicyStatusEntity storagePolicyStatusEntity=storagePolicyStatusDao.getStoragePolicyStatusByCode(storagePolicyStatus);  if (storagePolicyStatusEntity == null) {    storagePolicyStatusEntity=createStoragePolicyStatusEntity(storagePolicyStatus);  }  StoragePolicyEntity storagePolicyEntity=new StoragePolicyEntity();  storagePolicyEntity.setNamespace(storagePolicyNamespaceEntity);  storagePolicyEntity.setName(storagePolicyKey.getStoragePolicyName());  storagePolicyEntity.setStoragePolicyRuleType(storagePolicyRuleTypeEntity);  storagePolicyEntity.setStoragePolicyRuleValue(storagePolicyRuleValue);  storagePolicyEntity.setBusinessObjectDefinition(businessObjectDefinitionEntity);  storagePolicyEntity.setUsage(businessObjectFormatUsage);  storagePolicyEntity.setFileType(fileTypeEntity);  storagePolicyEntity.setStorage(storageEntity);  storagePolicyEntity.setDestinationStorage(destinationStorageEntity);  storagePolicyEntity.setStatus(storagePolicyStatusEntity);  storagePolicyEntity.setVersion(storagePolicyVersion);  storagePolicyEntity.setLatestVersion(storagePolicyLatestVersion);  return storagePolicyDao.saveAndRefresh(storagePolicyEntity);}  }
class C{  public void testComputeSignificanceDoesntAlterAverage(ConditionalMutualInfoCalculatorMultiVariate condMiCalc,int dimensions,int timeSteps) throws Exception {  condMiCalc.initialise(dimensions,dimensions,dimensions);  RandomGenerator rg=new RandomGenerator();  double[][] sourceData=rg.generateNormalData(timeSteps,dimensions,0,1);  double[][] destData=rg.generateNormalData(timeSteps,dimensions,0,1);  double[][] condData=rg.generateNormalData(timeSteps,dimensions,0,1);  condMiCalc.setObservations(sourceData,destData,condData);  double condMi=condMiCalc.computeAverageLocalOfObservations();  System.out.printf("Average was %.5f\n",condMi);  int[][] newOrderings=rg.generateDistinctRandomPerturbations(timeSteps,100);  EmpiricalMeasurementDistribution measDist=condMiCalc.computeSignificance(1,newOrderings);  assertFalse(condMi == measDist.distribution[0]);  for (int i=0; i < 10; i++) {    double lastAverage=condMiCalc.getLastAverage();    assertEquals(condMi,lastAverage);    double averageCheck1=condMiCalc.computeAverageLocalOfObservations();    assertEquals(condMi,averageCheck1);  }  condMiCalc.computeSignificance(2,newOrderings);  for (int i=0; i < 10; i++) {    double lastAverage=condMiCalc.getLastAverage();    assertEquals(condMi,lastAverage);    double averageCheck1=condMiCalc.computeAverageLocalOfObservations();    assertEquals(condMi,averageCheck1);  }}  }
class C{  public static void checkNotNullArgument(Object reference){  if (reference == null) {    throw new IllegalArgumentException("Null reference passed as parameter");  }}  }
class C{  public static boolean isExpandableGroup(int composedViewType){  return (composedViewType & BIT_MASK_EXPANDABLE_FLAG) != 0;}  }
class C{  public IType findType(String name,IPackageFragment pkg,boolean partialMatch,int acceptFlags){  if (pkg == null)   return null;  SingleTypeRequestor typeRequestor=new SingleTypeRequestor();  seekTypes(name,pkg,partialMatch,acceptFlags,typeRequestor,false);  return typeRequestor.getType();}  }
class C{  public boolean isSelected(){  return this.selected;}  }
class C{  private boolean pingNode(UUID nodeId){  assert prj instanceof IgniteCluster;  return ((IgniteCluster)prj).pingNode(nodeId);}  }
class C{  public static void write(long x){  writeByte((int)((x >>> 56) & 0xff));  writeByte((int)((x >>> 48) & 0xff));  writeByte((int)((x >>> 40) & 0xff));  writeByte((int)((x >>> 32) & 0xff));  writeByte((int)((x >>> 24) & 0xff));  writeByte((int)((x >>> 16) & 0xff));  writeByte((int)((x >>> 8) & 0xff));  writeByte((int)((x >>> 0) & 0xff));}  }
class C{  protected DomainElementImpl(){  super();}  }
class C{  public void scribeAndFlush(ScribeEvent event){  recordEventAsync(event,true);}  }
class C{  public void fireMiscChanged(){  fireModelChanged(ModelEvent.MISC_CHANGED);}  }
class C{  public static char[] encodeHex(final byte[] data,final boolean toLowerCase){  return encodeHex(data,toLowerCase ? DIGITS_LOWER : DIGITS_UPPER);}  }
class C{  public Iterable<Result<Upload>> listIncompleteUploads(String bucketName) throws XmlPullParserException {  return listIncompleteUploads(bucketName,null,true,true);}  }
class C{  public static boolean isNullOrWhitespace(final String str){  if (isNullOrEmpty(str)) {    return true;  }  for (int i=0; i < str.length(); i++) {    if (!Character.isWhitespace(str.charAt(i))) {      return false;    }  }  return true;}  }
class C{  public void skippedEntity(String name) throws SAXException {}  }
class C{  public static void multiplyMM(double[] result,int resultOffset,double[] lhs,int lhsOffset,double[] rhs,int rhsOffset){  String message=null;  if (result == null) {    message="Result matrix can not be null.";  } else   if (lhs == null) {    message="Left hand side matrix can not be null.";  } else   if (rhs == null) {    message="Right hand side matrix can not be null.";  } else   if ((resultOffset + 16) > result.length) {    message="Specified result offset would overflow the passed result matrix.";  } else   if ((lhsOffset + 16) > lhs.length) {    message="Specified left hand side offset would overflow the passed lhs matrix.";  } else   if ((rhsOffset + 16) > rhs.length) {    message="Specified right hand side offset would overflow the passed rhs matrix.";  }  if (message != null) {    throw new IllegalArgumentException(message);  }  double sum=0;  for (int i=0; i < 4; ++i) {    for (int j=0; j < 4; ++j) {      sum=0;      for (int k=0; k < 4; ++k) {        sum+=lhs[i + 4 * k + lhsOffset] * rhs[4 * j + k + rhsOffset];      }      result[i + 4 * j + resultOffset]=sum;    }  }}  }
class C{  public void clear(){  this.buffer.delete(0,this.buffer.length());  this.count=0;}  }
class C{  public boolean isValidFromTo(Timestamp date){  Timestamp validFrom=getValidFrom();  Timestamp validTo=getValidTo();  if (validFrom != null && date.before(validFrom))   return false;  if (validTo != null && date.after(validTo))   return false;  return true;}  }
class C{  public UserActionAttachment waitForUserActionAction(final boolean firstRun,final IUserActionDelegate iUserActionsDelegate){  m_firstRun=firstRun;  m_validUserActions=new ArrayList<>(iUserActionsDelegate.getValidActions());  Collections.sort(m_validUserActions,new UserActionComparator(getCurrentPlayer(),getData()));  if (m_validUserActions.isEmpty()) {    return null;  } else {    if (m_firstRun) {      ClipPlayer.play(SoundPath.CLIP_PHASE_USER_ACTIONS,getCurrentPlayer());    }    SwingUtilities.invokeLater(null);  }  waitForRelease();  return m_choice;}  }
class C{  @Override public boolean isWritable(int columnIndex){  return false;}  }
class C{  public <K,V>GeodeJavaRegionRDD<K,V> geodeRegion(String regionPath,Properties opConf){  GeodeConnectionConf connConf=GeodeConnectionConf.apply(sc.getConf());  return geodeRegion(regionPath,connConf,opConf);}  }
class C{  public boolean isPrimitive(Class type) throws Exception {  return support.isPrimitive(type);}  }
class C{  protected boolean isVisible(){  final World world=getCasing().getCasingWorld();  final BlockPos neighborPos=getCasing().getPosition().offset(Face.toEnumFacing(getFace()));  if (!world.isBlockLoaded(neighborPos)) {    return false;  }  final Chunk chunk=world.getChunkFromBlockCoords(neighborPos);  if (chunk == null || chunk.isEmpty()) {    return true;  }  final Block neighborBlock=world.getBlockState(neighborPos).getBlock();  return !neighborBlock.doesSideBlockRendering(world,neighborPos,Face.toEnumFacing(getFace().getOpposite()));}  }
class C{  private void dfsAggregations(Terms terms,ESResultSet rs,List<Object> row) throws SQLException {  List<Object> currentRow=Utils.clone(row);  String columnName=terms.getName();  if (!rs.getHeading().hasLabel(columnName))   throw new SQLException("Unable to identify column for aggregation named " + columnName);  Column aggCol=rs.getHeading().getColumnByLabel(columnName);  for (  Terms.Bucket bucket : terms.getBuckets()) {    boolean metricAggs=false;    List<Aggregation> aggs=bucket.getAggregations().asList();    if (aggs.size() == 0) {      currentRow.set(aggCol.getIndex(),bucket.getKey());      metricAggs=true;    } else     for (    Aggregation agg : bucket.getAggregations().asList()) {      if (agg instanceof Terms) {        currentRow.set(aggCol.getIndex(),bucket.getKey());        dfsAggregations((Terms)agg,rs,currentRow);      } else {        if (metricAggs == false) {          currentRow.set(aggCol.getIndex(),bucket.getKey());          metricAggs=true;        }        String metricName=agg.getName();        if (!rs.getHeading().hasLabel(metricName))         throw new SQLException("Unable to identify column for aggregation named " + metricName);        Column metricCol=rs.getHeading().getColumnByLabel(metricName);        currentRow.set(metricCol.getIndex(),agg.getProperty("value"));      }    }    if (metricAggs) {      rs.add(currentRow);      currentRow=Utils.clone(row);    }    currentRow=Utils.clone(row);  }}  }
class C{  public boolean containsArrow(Arrow arrow){  boolean result=false;  outer:   for (  SquareArrowDecorator decorator : decorators) {    for (    ArrowSpec spec : decorator.specs) {      result=spec.arrow.equals(arrow);      if (result) {        break outer;      }    }  }  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 16:08:59.962 -0500",hash_original_method="C5E08BDEE357D10B33CBA58A3B0E7937",hash_generated_method="1DB925145F7BF1601D9A4AD51EE954D3") public Base64InputStream(InputStream in,boolean doEncode,int lineLength,byte[] lineSeparator){  super(in);  this.doEncode=doEncode;  this.base64=new Base64(lineLength,lineSeparator);}  }
class C{  private void addReference(final int sourcePosition,final int referencePosition){  if (srcAndRefPositions == null) {    srcAndRefPositions=new int[6];  }  if (referenceCount >= srcAndRefPositions.length) {    int[] a=new int[srcAndRefPositions.length + 6];    System.arraycopy(srcAndRefPositions,0,a,0,srcAndRefPositions.length);    srcAndRefPositions=a;  }  srcAndRefPositions[referenceCount++]=sourcePosition;  srcAndRefPositions[referenceCount++]=referencePosition;}  }
class C{  private Pair<Integer,Integer> indexToEdgeBijection(long index){  long i=(long)Math.ceil((Math.sqrt(1 + 8 * (index + 1)) - 1) / 2);  long diff=index + 1 - (i * (i - 1)) / 2;  return Pair.of((int)i,(int)diff - 1);}  }
class C{  public static double[] pageRank(MatrixInterface preparedMatrix,int maxIteration,double d,double[] init,double[] impact){  double[] result=new double[init.length];  for (int i=0; i != init.length; i++)   result[i]=init[i];  int iteration=0;  while (iteration < maxIteration) {    iteration++;    result=preparedMatrix.multiply(result);    for (int i=0; i != result.length; i++)     result[i]=impact[i] * (1.0 - d) + d * result[i];  }  return result;}  }
class C{  private void addAll(final List<Field> l,final Field[] fields){  for (  final Field field : fields) {    if (!field.isAccessible()) {      field.setAccessible(true);    }    l.add(field);  }}  }
class C{  public VNXeCommandJob createSnap(String resourceID,String name,Boolean isReadOnly){  _logger.info("creating snap for :" + resourceID);  SnapCreateParam parm=new SnapCreateParam();  parm.setStorageResource(new VNXeBase(resourceID));  parm.setName(name);  if (isReadOnly != null) {    parm.setIsReadOnly(isReadOnly);  }  SnapRequests req=new SnapRequests(_khClient);  return req.createSnap(parm);}  }
class C{  protected String doIt() throws java.lang.Exception {  if (p_DeleteOldImported) {    int no=0;    for (    X_I_ProductPlanning ipp : getRecords(true,false)) {      ipp.deleteEx(true);      no++;    }    log.fine("Delete Old Impored =" + no);  }  fillIDValues();  importRecords();  return "Imported: " + imported + ", Not imported: "+ notimported;}  }
class C{  public void addCustomRule(Rule rule){  customPhraseTable.addRule(rule);  rule.estimateRuleCost(featureFunctions);}  }
class C{  protected Size2D arrangeFR(BlockContainer container,Graphics2D g2,RectangleConstraint constraint){  Size2D s=arrangeFN(container,g2,constraint);  if (constraint.getHeightRange().contains(s.height)) {    return s;  } else {    RectangleConstraint c=constraint.toFixedHeight(constraint.getHeightRange().constrain(s.getHeight()));    return arrangeFF(container,g2,c);  }}  }
class C{  public boolean isBoundless(){  for (int i=1; i <= max; i++) {    if (!Double.isInfinite(region.getLeft(i))) {      return false;    }    if (!Double.isInfinite(region.getRight(i))) {      return false;    }  }  return true;}  }
class C{  @After public void tearDown(){  comparator=null;}  }
class C{  public OpenDoubleIntHashMap(int initialCapacity,double minLoadFactor,double maxLoadFactor){  setUp(initialCapacity,minLoadFactor,maxLoadFactor);}  }
class C{  private static String resolveUserToken(long subKey,String sessionId,String userToken){  return createServiceProxy().resolveUserToken(subKey,sessionId,userToken);}  }
class C{  public static void main(String[] args){  try {    System.out.println("[INFO] Recreating Cassandra artifacts (keyspace, table, indexes) for load tests");    KeyValuePersistenceSettings perSettings=new KeyValuePersistenceSettings(TestsHelper.getLoadTestsPersistenceSettings());    System.out.println("[INFO] Dropping test keyspace: " + perSettings.getKeyspace());    try {      CassandraHelper.dropTestKeyspaces();    } catch (    Throwable e) {      throw new RuntimeException("Failed to drop test keyspace: " + perSettings.getKeyspace(),e);    }    System.out.println("[INFO] Test keyspace '" + perSettings.getKeyspace() + "' was successfully dropped");    System.out.println("[INFO] Creating test keyspace: " + perSettings.getKeyspace());    try {      CassandraHelper.executeWithAdminCredentials(perSettings.getKeyspaceDDLStatement());    } catch (    Throwable e) {      throw new RuntimeException("Failed to create test keyspace: " + perSettings.getKeyspace(),e);    }    System.out.println("[INFO] Test keyspace '" + perSettings.getKeyspace() + "' was successfully created");    System.out.println("[INFO] Creating test table: " + perSettings.getTable());    try {      CassandraHelper.executeWithAdminCredentials(perSettings.getTableDDLStatement(perSettings.getTable()));    } catch (    Throwable e) {      throw new RuntimeException("Failed to create test table: " + perSettings.getTable(),e);    }    System.out.println("[INFO] Test table '" + perSettings.getTable() + "' was successfully created");    List<String> statements=perSettings.getIndexDDLStatements(perSettings.getTable());    if (statements == null)     statements=new LinkedList<>();    for (    String statement : statements) {      System.out.println("[INFO] Creating test table index:");      System.out.println(statement);      try {        CassandraHelper.executeWithAdminCredentials(statement);      } catch (      Throwable e) {        throw new RuntimeException("Failed to create test table index",e);      }      System.out.println("[INFO] Test table index was successfully created");    }    System.out.println("[INFO] All required Cassandra artifacts were successfully recreated");  } catch (  Throwable e) {    System.out.println("[ERROR] Failed to recreate Cassandra artifacts");    e.printStackTrace(System.out);    if (e instanceof RuntimeException)     throw (RuntimeException)e; else     throw new RuntimeException(e);  } finally {    CassandraHelper.releaseCassandraResources();  }}  }
class C{  public Record nextRecord() throws IOException {  if (current > end)   return null;  String namestr=substitute(namePattern,current);  Name name=Name.fromString(namestr,origin);  String rdata=substitute(rdataPattern,current);  current+=step;  return Record.fromString(name,type,dclass,ttl,rdata,origin);}  }
class C{  public UpdateRequest parent(String parent){  this.parent=parent;  if (routing == null) {    routing=parent;  }  return this;}  }
class C{  public ValidatorException(FacesMessage message){  super(message.getSummary());  this.message=message;}  }
class C{  public boolean hasType(){  return getType() != null;}  }
class C{  SystemInitializer(Properties config){  if (config == null) {    config=readConfigInfo();  }  _config=config;}  }
class C{  public int processLocation(Location location){  mDistanceToCenter=mLocation.distanceTo(location);  int prevState=mState;  boolean inside=mDistanceToCenter <= Math.max(mFence.getRadius(),location.getAccuracy());  if (inside) {    mState=STATE_INSIDE;    if (prevState != STATE_INSIDE) {      return FLAG_ENTER;    }  } else {    mState=STATE_OUTSIDE;    if (prevState == STATE_INSIDE) {      return FLAG_EXIT;    }  }  return 0;}  }
class C{  public CertificateHolder(final JDialog dialog){  initComponents();  this.frame=dialog;}  }
class C{  @Deprecated public TCompactProtocol(TTransport transport,long stringLengthLimit){  this(transport,stringLengthLimit,NO_LENGTH_LIMIT);}  }
class C{  public synchronized String format(Date inDate){  return format(inDate.getTime());}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_ENTRY_OR_EXIT_ACTION_2__MORE_CODE_1:    getMoreCode_1().clear();  return;}super.eUnset(featureID);}  }
class C{  public final boolean isInsideLocal(){  return isLocal() || (outerClass != null && outerClass.isInsideLocal());}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  void addUpdateObjectDefEquation(HeapVariable<?> A1,HeapVariable<?> A2,int valueNumber){  DF_LatticeCell cell1=findOrCreateCell(A1);  DF_LatticeCell cell2=findOrCreateCell(A2);  UpdateDefObjectOperator op=new UpdateDefObjectOperator(valueNumber);  newEquation(cell1,op,cell2);}  }
class C{  public CanvasComponent create(){  return INTERNAL_BUILDER.apply(this);}  }
class C{  private void synchronizeThreads(final TargetProcessThread oldThread,final TargetProcessThread newThread){  if (oldThread != null) {    oldThread.removeListener(m_threadListener);  }  if (newThread != null) {    newThread.addListener(m_threadListener);  }  updateGui();}  }
class C{  public static java.sql.Timestamp toTimestamp(String monthStr,String dayStr,String yearStr,String hourStr,String minuteStr,String secondStr){  java.util.Date newDate=toDate(monthStr,dayStr,yearStr,hourStr,minuteStr,secondStr);  if (newDate != null) {    return new java.sql.Timestamp(newDate.getTime());  } else {    return null;  }}  }
class C{  protected int read_(long pos,byte[] b,int offset,int len) throws IOException {  file.seek(pos);  int n=file.read(b,offset,len);  if (debugAccess) {    if (showRead)     System.out.println(" **read_ " + location + " = "+ len+ " bytes at "+ pos+ "; block = "+ (pos / buffer.length));    debug_nseeks.incrementAndGet();    debug_nbytes.addAndGet(len);  }  if (extendMode && (n < len)) {    n=len;  }  return n;}  }
class C{  public void printSubpopulation(final EvolutionState state,final PrintWriter writer){  writer.println(NUM_INDIVIDUALS_PREAMBLE + Code.encode(individuals.length));  for (int i=0; i < individuals.length; i++) {    writer.println(INDIVIDUAL_INDEX_PREAMBLE + Code.encode(i));    individuals[i].printIndividual(state,writer);  }}  }
class C{  @Override public T defaultCase(EObject object){  return null;}  }
class C{  @Override public boolean covers(final Coordinate p){  return covers(p.x,p.y,p.z);}  }
class C{  public BigDecimalPolynomial div(BigDecimal divisor,int decimalPlaces){  BigInteger max=maxCoeffAbs();  int coeffLength=(int)(max.bitLength() * LOG_10_2) + 1;  BigDecimal factor=Constants.BIGDEC_ONE.divide(divisor,coeffLength + decimalPlaces + 1,BigDecimal.ROUND_HALF_EVEN);  BigDecimalPolynomial p=new BigDecimalPolynomial(coeffs.length);  for (int i=0; i < coeffs.length; i++) {    p.coeffs[i]=new BigDecimal(coeffs[i]).multiply(factor).setScale(decimalPlaces,BigDecimal.ROUND_HALF_EVEN);  }  return p;}  }
class C{  @Override public void parseArgumentsByteCode(Vertex expression,DataInputStream dataStream,Vertex type,Network network) throws IOException {  parseArgumentsByteCode(expression,dataStream,type,null,network);}  }
class C{  public boolean hasBatchOperation(){  return hasExtension(BatchOperation.class);}  }
class C{  public SymbolTableEntryIMOnly createSymbolTableEntryIMOnly(){  SymbolTableEntryIMOnlyImpl symbolTableEntryIMOnly=new SymbolTableEntryIMOnlyImpl();  return symbolTableEntryIMOnly;}  }
class C{  private void unshare(int needExtra){  int sharedLen=_inputLen;  _inputLen=0;  char[] inputBuf=_inputBuffer;  _inputBuffer=null;  int start=_inputStart;  _inputStart=-1;  int needed=sharedLen + needExtra;  if (_currentSegment == null || needed > _currentSegment.length) {    _currentSegment=findBuffer(needed);  }  if (sharedLen > 0) {    System.arraycopy(inputBuf,start,_currentSegment,0,sharedLen);  }  _segmentSize=0;  _currentSize=sharedLen;}  }
class C{  public SipTransactionContext sendSipMessageAndWait(SipMessage message,long timeout) throws PayloadException, NetworkException {  return sendSipMessageAndWait(message,timeout,null);}  }
class C{  public void warn(String msg,Object[] args) throws TransformerException {  java.lang.String fmsg=XSLMessages.createXPATHWarning(msg,args);  if (null != m_errorHandler) {    m_errorHandler.warning(new TransformerException(fmsg,m_locator));  } else {    System.out.println(fmsg + "; file " + m_locator.getSystemId()+ "; line "+ m_locator.getLineNumber()+ "; column "+ m_locator.getColumnNumber());  }}  }
class C{  public static Object parse(Reader in){  try {    JSONParser parser=new JSONParser();    return parser.parse(in);  } catch (  Exception e) {    return null;  }}  }
class C{  public SetRegisterSynchronizer(final IDebugger debugger,final ListenerProvider<IDebugEventListener> listeners){  super(debugger,listeners);}  }
class C{  public Future<Exception> start(){  InterpreterStartFuture f=new InterpreterStartFuture();  (new StarterThread(f)).start();  return f;}  }
class C{  public static void writeIntList(IonWriter writer,long[] values) throws IOException {  if (writer instanceof PrivateListWriter) {    ((PrivateListWriter)writer).writeIntList(values);    return;  }  writer.stepIn(IonType.LIST);  for (int ii=0; ii < values.length; ii++) {    writer.writeInt(values[ii]);  }  writer.stepOut();}  }
class C{  public final CharSequence yytext(){  return zzBuffer.subSequence(zzStartRead,zzMarkedPos);}  }
class C{  public SVG12BridgeContext(UserAgent userAgent,InterpreterPool interpreterPool,DocumentLoader documentLoader){  super(userAgent,interpreterPool,documentLoader);}  }
class C{  public R scan(DocTreePath path,P p){  this.path=path;  try {    return path.getLeaf().accept(this,p);  }  finally {    this.path=null;  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String arcHeaderFile=null;  String arcDataFile=null;  String whiteboxHeaderFile=null;  String whiteboxDataFile=null;  WhiteboxRaster output=null;  int i=0;  String[] imageFiles;  int numImages=0;  double noData=-32768;  InputStream inStream=null;  OutputStream outStream=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputFilesString=args[i];    }  }  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    for (i=0; i < numImages; i++) {      int progress=(int)(100f * i / (numImages - 1));      updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",(int)progress);      arcDataFile=imageFiles[i];      if (!((new File(arcDataFile)).exists())) {        showFeedback("ArcGIS raster file does not exist.");        break;      }      arcHeaderFile=arcDataFile.replace(".flt",".hdr");      if (!arcHeaderFile.contains(".hdr")) {        arcHeaderFile=arcDataFile.replace(".FLT",".hdr");      }      whiteboxHeaderFile=arcHeaderFile.replace(".hdr",".dep");      whiteboxDataFile=arcHeaderFile.replace(".hdr",".tas");      (new File(whiteboxHeaderFile)).delete();      (new File(whiteboxDataFile)).delete();      File fromfile=new File(arcDataFile);      File tofile=new File(whiteboxDataFile);      inStream=new FileInputStream(fromfile);      outStream=new FileOutputStream(tofile);      byte[] buffer=new byte[1024];      int length;      while ((length=inStream.read(buffer)) > 0) {        outStream.write(buffer,0,length);      }      inStream.close();      outStream.close();      boolean success=createHeaderFile(arcHeaderFile,whiteboxHeaderFile);      if (!success) {        showFeedback("Arc header file was not read properly. " + "Tool failed to import");        return;      }      output=new WhiteboxRaster(whiteboxHeaderFile,"r");      output.findMinAndMaxVals();      output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      output.addMetadataEntry("Created on " + new Date());      output.writeHeaderFile();      output.close();      returnData(whiteboxHeaderFile);    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public CreateQueueResult createQueue(String queueName) throws AmazonServiceException, AmazonClientException {  return amazonSqsToBeExtended.createQueue(queueName);}  }
class C{  public static QNameInfo fromAssociation(QualifiedName qName,String tableName,AssociationDescriptor assoDescriptor){  return new QNameInfo(qName,QNameType.ASSOCIATION,null,tableName,assoDescriptor.type(),null,assoDescriptor,null);}  }
class C{  public FilteredNavigationRecordRequestImpl(final String facetName,final String field,final List<Pair<String,String>> rangeValues){  this(facetName,field,false,rangeValues);}  }
class C{  public Backspace createBackspace(){  BackspaceImpl backspace=new BackspaceImpl();  return backspace;}  }
class C{  public Interaction(int x,int y,CommandSender sender,Location blockLocation,Location frameLocation,boolean rightHanded){  this.x=x;  this.y=y;  this.blockLocation=blockLocation;  this.frameLocation=frameLocation;  this.sender=sender;  this.rightHanded=rightHanded;}  }
class C{  public int signum(){  return this.signum;}  }
class C{  public Matrix4d(double m00,double m01,double m02,double m03,double m10,double m11,double m12,double m13,double m20,double m21,double m22,double m23,double m30,double m31,double m32,double m33){  this.m00=m00;  this.m01=m01;  this.m02=m02;  this.m03=m03;  this.m10=m10;  this.m11=m11;  this.m12=m12;  this.m13=m13;  this.m20=m20;  this.m21=m21;  this.m22=m22;  this.m23=m23;  this.m30=m30;  this.m31=m31;  this.m32=m32;  this.m33=m33;  properties=0;}  }
class C{  public void actionPerformed(ActionEvent e){  if (!p_loadedOK)   return;  String cmd=e.getActionCommand();  Object source=null;  if (e.getSource() != null) {    source=e.getSource();    if (cmd.equals(ConfirmPanel.A_PATTRIBUTE)) {      if (p_table.isMultiSelection()) {        int row=p_table.getSelectionModel().getLeadSelectionIndex();        p_table.setRowChecked(row,true);      }      MProduct mp=MProduct.get(Env.getCtx(),m_M_Product_ID);      String title="";      int wh_id=0;      if (isValidVObject(fWarehouse_ID)) {        title=fWarehouse_ID.getDisplay() + " - " + mp.getName();        wh_id=((Integer)(fWarehouse_ID.getValue())).intValue();      }      int bp_id=0;      String s_bp_id=Env.getContext(Env.getCtx(),p_WindowNo,p_TabNo,"C_BPartner_ID",false);      if (s_bp_id != null && s_bp_id.length() != 0 && (new Integer(s_bp_id).intValue() > 0))       bp_id=new Integer(s_bp_id).intValue();      PAttributeInstance pai=new PAttributeInstance(this,title,wh_id,0,p_table.getLeadRowKey(),bp_id);      if (!pai.wasCancelled()) {        m_M_AttributeSetInstance_ID=pai.getM_AttributeSetInstance_ID();        m_M_Locator_ID=pai.getM_Locator_ID();        if (m_M_AttributeSetInstance_ID > 0)         fASI_ID.setValue(m_M_AttributeSetInstance_ID); else         fASI_ID.setValue(0);      }      if (p_saveResults && m_M_AttributeSetInstance_ID != -1 && !pai.wasCancelled()) {        dispose(p_saveResults);        return;      }      return;    } else     if (source instanceof VComboBox) {      if (((VComboBox)source).getParent() instanceof VLookup) {        source=((VComboBox)source).getParent();        VLookup vl=((VLookup)source);        m_heldLastFocus=vl;        if (cmd.equals("comboBoxEdited")) {          if (!vl.hasChanged() && !hasOutstandingChanges()) {            vl.requestFocus();            return;          }          p_triggerRefresh=true;          if (vl == fWarehouse_ID) {            if (!isValidVObject(fWarehouse_ID)) {              checkOnlyStock.setSelected(false);              checkOnlyStock.setEnabled(false);            } else             checkOnlyStock.setEnabled(true);          }        }      }    } else     if (source instanceof CTextField) {      CTextField tf=((CTextField)source);      if (tf.getParent() instanceof VPAttribute) {        source=tf.getParent();        VPAttribute vpa=((VPAttribute)source);        m_heldLastFocus=fieldValue;        if (vpa.hasChanged()) {          p_triggerRefresh=true;        }      }    } else     if (e.getSource() instanceof VCheckBox) {      VCheckBox cb=(VCheckBox)e.getSource();      if (cb.getName().equals("ShowDetail")) {        refreshAtpTab();        return;      }    }  }  super.actionPerformed(e);}  }
class C{  private void ensureValid(){  if (!CloseableReference.isValid(mBufRef)) {    throw new InvalidStreamException();  }}  }
class C{  @Override public void validate(final IDescription cd){}  }
class C{  public void runManagementTaskAdhoc(){  managementTask.run();}  }
class C{  public static boolean isValue(Declaration decl){  return (decl instanceof Value) && !((Value)decl).isParameter() && !((Value)decl).isTransient();}  }
class C{  public AccessToken createToken(AppContext ctx,ClientPK clientPk,String userId,Long creationTimestamp,Long validityMillis){  long exp=(creationTimestamp == null) ? System.currentTimeMillis() : creationTimestamp;  exp+=validityMillis;  AccessTokenPK tokenId=new AccessTokenPK(UUID.randomUUID().toString());  String clientId=clientPk == null ? null : clientPk.getClientId();  AccessToken newToken=new AccessToken(tokenId,ctx.getCustomerId(),clientId,exp);  newToken.setUserId(userId);  AccessToken token=DAOFactory.getDAOFactory().getDAO(AccessToken.class).create(ctx,newToken);  return token;}  }
class C{  public void execute() throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  public final void decreaseScheduledWriteMessages(){  throughputCalculationLock.lock();  try {    scheduledWriteMessages--;  }  finally {    throughputCalculationLock.unlock();  }}  }
class C{  public static Range parseTypeRange(char option,String rangeString) throws ParsingException {  StringTokenizer rangeTokenizer=new StringTokenizer(rangeString,",-=",true);  if (rangeTokenizer.countTokens() != 5) {    throw new ParsingException("-" + option + " has a malformed range : "+ rangeString);  }  int start=Format.parseUnsigned(rangeTokenizer.nextToken().trim());  String sep=rangeTokenizer.nextToken();  int end=Format.parseUnsigned(rangeTokenizer.nextToken().trim()) + ("-".equals(sep) ? 0 : start);  String nextSep=rangeTokenizer.nextToken();  if (!"=".equals(nextSep)) {    throw new ParsingException("-" + option + " has a malformed range : "+ rangeString+ " (expected '=' before last address)");  }  RangeType map=parseRangeType(rangeTokenizer.nextToken().trim());  if (option == 't') {    return new InterruptVectorRange(start,end,map);  } else {    return new Range(start,end,map);  }}  }
class C{  static ScenarioForEvalData createPlanfallInduced(ScenarioForEvalData nullfall){  ScenarioForEvalData planfall=nullfall.createDeepCopy();  Values planfallForOD=planfall.getByODRelation("BC");{    ValuesForAMode railValues=planfallForOD.getByMode(Mode.rail);    railValues.getByDemandSegment(DemandSegment.PV_NON_COMMERCIAL).incByEntry(Attribute.hrs,-4.);    double delta=90.;    railValues.getByDemandSegment(DemandSegment.PV_NON_COMMERCIAL).incByEntry(Attribute.XX,delta);    planfall.getByODRelation("BC").getByMode(Mode.road).getByDemandSegment(DemandSegment.PV_NON_COMMERCIAL).incByEntry(Attribute.XX,-0.);  }  return planfall;}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  public ExecutionTargetException(String message){  super(message);}  }
class C{  private void clearFields(){  fullExtent=null;  worldToScreen=null;  screenToWorld=null;}  }
class C{  public boolean canUpdateJavaReferences(){  return fMovePolicy.canUpdateJavaReferences();}  }
class C{  public void addActionListener(ActionListener a){  if (actionListeners == null) {    actionListeners=new EventDispatcher();  }  actionListeners.addListener(a);}  }
class C{  private void findSeparator(){  pos=MultipartReader.this.findSeparator();  if (pos == -1) {    if (tail - head > keepRegion) {      pad=keepRegion;    } else {      pad=tail - head;    }  }}  }
class C{  public void test_hashCode(){  try {    DateFormat df1=DateFormat.getInstance();    DateFormat df2=(DateFormat)df1.clone();    assertTrue("Hash codes of clones are not equal",df1.hashCode() == df2.hashCode());    assertTrue("Hash codes of different objects are the same",df1.hashCode() != DateFormat.getDateInstance().hashCode());  } catch (  Exception e) {    fail("Unexpected exception " + e.toString());  }}  }
class C{  public void updateDate(int columnIndex,Date x) throws SQLException {  checkUpdatable();  getField(columnIndex).setDate(x);}  }
class C{  protected void freeWrapper(DockWrapper w){  if (externalFrameWrappers.remove(w)) {    w.freeWrapper();    return;  }  if (internalFrameWrappers.remove(w)) {    w.freeWrapper();    return;  }  if (north.freeWrapper(w)) {    return;  }  if (south.freeWrapper(w)) {    return;  }  if (east.freeWrapper(w)) {    return;  }  if (west.freeWrapper(w)) {    return;  }}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener listener){  props.addListener(listener);}  }
class C{  public static ProductDetailFragment newInstance(int productId){  ProductDetailFragment fragment=new ProductDetailFragment();  Bundle args=new Bundle();  args.putInt(PRODUCT_ID,productId);  fragment.setArguments(args);  return fragment;}  }
class C{  private int computeVisualLength(CharSequence seq,int tabLength){  int size=0;  for (int i=0; i < seq.length(); i++) {    char ch=seq.charAt(i);    if (ch == '\t') {      if (tabLength != 0)       size+=tabLength - size % tabLength;    } else {      size++;    }  }  return size;}  }
class C{  protected JvmMemMgrPoolRelTableMeta createJvmMemMgrPoolRelTableMetaNode(String tableName,String groupName,SnmpMib mib,MBeanServer server){  return new JvmMemMgrPoolRelTableMeta(mib,objectserver);}  }
class C{  public Writer write(Writer writer) throws JSONException {  return this.write(writer,0,0);}  }
class C{  public boolean classExists(Identifier className){  return getBinaryFile(className) != null || !className.isInner() && getSourceFile(className) != null;}  }
class C{  public DeleteDescriptor(String project,String description,String comment,Map arguments,int flags){  super(IJavaRefactorings.DELETE,project,description,comment,arguments,flags);}  }
class C{  public static CacheHeader readHeader(InputStream is) throws IOException {  CacheHeader entry=new CacheHeader();  int magic=readInt(is);  if (magic != CACHE_MAGIC) {    throw new IOException();  }  entry.key=readString(is);  entry.etag=readString(is);  if (entry.etag.equals("")) {    entry.etag=null;  }  entry.serverDate=readLong(is);  entry.lastModified=readLong(is);  entry.ttl=readLong(is);  entry.softTtl=readLong(is);  entry.responseHeaders=readStringStringMap(is);  return entry;}  }
class C{  public boolean includeGlobalState(){  return includeGlobalState;}  }
class C{  public DateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,int secondOfMinute,int millisOfSecond){  super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);}  }
class C{  public static String restoreStaBSSID(String BSSID){  String pollutedBitStr=BSSID.substring(1,2);  Integer pollutedBitInt=0;  pollutedBitInt=Integer.parseInt(pollutedBitStr,16);  Integer cleanBitInt=pollutedBitInt & (~0x02);  String cleanBitStr=Integer.toHexString(cleanBitInt);  return BSSID.substring(0,1) + cleanBitStr + BSSID.substring(2);}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public void addListener(final ThreadListener listener){  listeners.addListener(listener);}  }
class C{  protected NewEdgeMatcherPage(){  super("New Named Edge Matcher");  setTitle("New Named Edge Matcher");  setDescription("Add an edge matcher to a already existing " + ".dpans file, or create a new .dpans file with a new set.");}  }
class C{  public Builder withStateMachine(Supplier<StateMachine> factory){  this.stateMachineFactory=Assert.notNull(factory,"factory");  return this;}  }
class C{  public void valueChange(ValueChangeEvent e){  if (e.getPropertyName().equals("M_Product_ID"))   productField.setValue(e.getNewValue());}  }
class C{  public synchronized boolean remove(Integer i){  if (value.remove(i)) {    setValue(value);    return true;  } else {    return false;  }}  }
class C{  public void print(int w,int d){  print(new PrintWriter(System.out,true),w,d);}  }
class C{  public static void edit(String id,String virtualArrayId){  NetworkRestRep network=getNetwork(id);  NetworkForm form=new NetworkForm();  form.load(network);  edit(form);}  }
class C{  public static void text(double x,double y,String text,double degrees){  if (text == null)   throw new NullPointerException();  double xs=scaleX(x);  double ys=scaleY(y);  offscreen.rotate(Math.toRadians(-degrees),xs,ys);  text(x,y,text);  offscreen.rotate(Math.toRadians(+degrees),xs,ys);}  }
class C{  public static UUID readUuid(ByteBuf buf){  return new UUID(buf.readLong(),buf.readLong());}  }
class C{  public GeoPoint(String value){  this.resetFromString(value);}  }
class C{  public TextDrawer rotateRegistration(float regX,float regY){  setRotateRegistration(regX,regY);  return this;}  }
class C{  public static Document parse(final InputSource is) throws SAXException, IOException {  try {    final DocumentBuilder builder=DocumentBuilderFactory.newInstance().newDocumentBuilder();    return builder.parse(is);  } catch (  final ParserConfigurationException ex) {    throw new IllegalArgumentException("DOM parser configuration error: " + ex.getMessage());  }}  }
class C{  public String etag(){  return etag;}  }
class C{  public void ping(ServerLocation server){  PingOp.execute(this.pool,server);}  }
class C{  private static void onTabPressed(KeyEvent event) throws BadLocationException {  JEditorPane editor=(JEditorPane)event.getSource();  Document doc=editor.getDocument();  int pos=editor.getCaretPosition();  String remainder=doc.getText(pos,doc.getLength() - pos);  if (pos < doc.getLength() - 1 && remainder.charAt(0) == '"') {    for (int i=1; i < remainder.length() - 1; i++) {      char c=remainder.charAt(i);      char c2=remainder.charAt(i + 1);      if (c == '"' && c2 == '"') {        editor.setCaretPosition(pos + i + 1);        event.consume();        return;      }    }  }}  }
class C{  public void saveFrame(String what){  try {    g.save(savePath(insertFrame(what)));  } catch (  SecurityException se) {    System.err.println("Can't use saveFrame() when running in a browser, " + "unless using a signed applet.");  }}  }
class C{  @Override public void execute(String[] params,Server server,Conversation conversation,IRCService service) throws CommandException {  if (params.length == 1) {    service.getConnection(server.getId()).quitServer();  } else {    service.getConnection(server.getId()).quitServer(BaseHandler.mergeParams(params));  }}  }
class C{  public static String prepareInsertTemplateWithColumn(String action,String tableName,String[] columnNames){  return action + " INTO " + tableName+ "(`"+ String.join("`,`",columnNames)+ "`) VALUES "+ generatePlaceholder(columnNames.length);}  }
class C{  public boolean isWeaponBlockedAt(int loc,boolean isRear){  boolean result=false;  Entity trooper=game.getEntity(troopers);  if (null != trooper) {    int tloc=BattleArmor.LOC_SQUAD;switch (loc) {case Mech.LOC_CT:      tloc=isRear ? BattleArmor.LOC_TROOPER_5 : BattleArmor.LOC_TROOPER_6;    break;case Mech.LOC_LT:  tloc=isRear ? BattleArmor.LOC_TROOPER_4 : BattleArmor.LOC_TROOPER_2;break;case Mech.LOC_RT:tloc=isRear ? BattleArmor.LOC_TROOPER_3 : BattleArmor.LOC_TROOPER_1;break;}if ((trooper.locations() > tloc) && (trooper.getInternal(tloc) > 0)) {result=true;}}return result;}  }
class C{  public void test_rangeQuery_staticPartitions_unbounded_2entries_2partitions_01() throws IOException {  final String name="testIndex";  final IndexMetadata metadata=new IndexMetadata(name,UUID.randomUUID());  fed.registerIndex(metadata,new byte[][]{new byte[]{},new byte[]{5}},new UUID[]{dataService0.getServiceUUID(),dataService1.getServiceUUID()});  final IIndex ndx=fed.getIndex(name,ITx.UNISOLATED);  ndx.insert(new byte[]{1},new byte[]{1});  ndx.insert(new byte[]{5},new byte[]{5});{    final ITupleIterator itr=ndx.rangeIterator(null,null);    assertTrue("hasNext",itr.hasNext());    ITuple tuple=itr.next();    assertEquals("getKey()",new byte[]{1},tuple.getKey());    assertEquals("getValue()",new byte[]{1},tuple.getValue());    assertTrue("hasNext",itr.hasNext());    tuple=itr.next();    assertEquals("getKey()",new byte[]{5},tuple.getKey());    assertEquals("getValue()",new byte[]{5},tuple.getValue());    assertFalse("hasNext",itr.hasNext());  }}  }
class C{  public static void assertIsSerializable(@NotNull Serializable object){  ObjectOutputStream out=null;  ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();  try {    out=new ObjectOutputStream(byteArrayOutputStream);    out.writeObject(object);  } catch (  NotSerializableException nse) {    fail("An object is not serializable: " + nse.getMessage());  }catch (  IOException ioe) {    fail("Could not serialize object: " + ioe.getMessage());  } finally {    if (out != null) {      try {        out.close();      } catch (      IOException ioe) {      }    }  }}  }
class C{  @XmlTransient public boolean isRecordable(){  for (  AliasID id : getId()) {    if (id.getType() == AliasIDType.NonRecordable) {      return false;    }  }  return true;}  }
class C{  public Node appendChild(Node newChild) throws DOMException {  if (null == newChild) {    error(XSLTErrorResources.ER_NULL_CHILD,null);  }  ElemTemplateElement elem=(ElemTemplateElement)newChild;  if (null == m_firstChild) {    m_firstChild=elem;  } else {    ElemTemplateElement last=(ElemTemplateElement)getLastChild();    last.m_nextSibling=elem;  }  elem.m_parentNode=this;  return newChild;}  }
class C{  private ClusterUtils(){}  }
class C{  public String toString(int pendingDelCount){  String s=info.toString(delCount + pendingDelCount);  if (delGen != -1) {    s+=":delGen=" + delGen;  }  if (fieldInfosGen != -1) {    s+=":fieldInfosGen=" + fieldInfosGen;  }  if (docValuesGen != -1) {    s+=":dvGen=" + docValuesGen;  }  return s;}  }
class C{  public final void writeChars(String s) throws IOException {  int len=s.length();  for (int i=0; i < len; i++) {    writeChar(s.charAt(i));  }}  }
class C{  public Filter createFilter(BridgeContext ctx,Element filterElement,Element filteredElement,GraphicsNode filteredNode,Filter inputFilter,Rectangle2D filterRegion,Map filterMap){  float[] stdDeviationXY=convertStdDeviation(filterElement,ctx);  if (stdDeviationXY[0] < 0 || stdDeviationXY[1] < 0) {    throw new BridgeException(ctx,filterElement,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_STD_DEVIATION_ATTRIBUTE,String.valueOf(stdDeviationXY[0]) + stdDeviationXY[1]});  }  Filter in=getIn(filterElement,filteredElement,filteredNode,inputFilter,filterMap,ctx);  if (in == null) {    return null;  }  Rectangle2D defaultRegion=in.getBounds2D();  Rectangle2D primitiveRegion=SVGUtilities.convertFilterPrimitiveRegion(filterElement,filteredElement,filteredNode,defaultRegion,filterRegion,ctx);  PadRable pad=new PadRable8Bit(in,primitiveRegion,PadMode.ZERO_PAD);  Filter blur=new GaussianBlurRable8Bit(pad,stdDeviationXY[0],stdDeviationXY[1]);  handleColorInterpolationFilters(blur,filterElement);  PadRable filter=new PadRable8Bit(blur,primitiveRegion,PadMode.ZERO_PAD);  updateFilterMap(filterElement,filter,filterMap);  return filter;}  }
class C{  public static String asBasicString(byte[] bytes,int offset,int length){  final char[] c=new char[length];  for (int i=0; i < c.length; ++i) {    c[i]=(char)bytes[i + offset];  }  return new String(c);}  }
class C{  public void perRaceDriverInit(DriverThread dt){  if (verbose)   System.out.println(dt.getName() + ": perRaceDriverInit() called");}  }
class C{  private boolean usedAllRule17Directors(Set<String> allocatedDirectors,PortAllocationContext context){  Set<String> rule17Directors=getRule17Directors(context);  for (  String director : allocatedDirectors) {    rule17Directors.remove(director);  }  return rule17Directors.isEmpty();}  }
class C{  public boolean isLeftToRight(){  aci.first();  int bidiLevel=((Integer)aci.getAttribute(GVTAttributedCharacterIterator.TextAttribute.BIDI_LEVEL)).intValue();  return ((bidiLevel & 0x01) == 0);}  }
class C{  public Sensor createNewSensor(String systemName,String userName){  Sensor s;  String sName=SerialAddress.normalizeSystemName(systemName);  if (sName.equals("")) {    log.error("Invalid sensor system name - " + systemName);    return null;  }  s=getBySystemName(sName);  if (s != null) {    log.error("Sensor with this name already exists - " + systemName);    return null;  }  int bit=SerialAddress.getBitFromSystemName(sName);  if ((bit <= 0) || (bit > 1000)) {    log.error("Sensor bit number, " + Integer.toString(bit) + ", is outside the supported range, 1-1000");    return null;  }  if (userName == null) {    s=new SerialSensor(sName);  } else {    s=new SerialSensor(sName,userName);  }  if (!SerialAddress.validSystemNameConfig(sName,'S')) {    log.warn("Sensor system Name '" + sName + "' does not address configured hardware.");    javax.swing.JOptionPane.showMessageDialog(null,"WARNING - The Sensor just added, " + sName + ", refers to an unconfigured input bit.","Configuration Warning",javax.swing.JOptionPane.INFORMATION_MESSAGE,null);  }  InputBits.instance().registerSensor(s,bit - 1);  return s;}  }
class C{  public double manhattanDistance(final java.awt.geom.Point2D p){  final double dx=Math.abs((double)this.x - p.getX());  final double dy=Math.abs((double)this.y - p.getY());  return dx + dy;}  }
class C{  public boolean isServerProcess(){  return false;}  }
class C{  public boolean isSelectedTrackPaused(){  return selectedTrackId == recordingTrackId && recordingTrackPaused;}  }
class C{  public Cell(int inRow,int inCol,String inInputValue){  this(inRow,inCol,inInputValue,null,null);}  }
class C{  public static Environment renderTemplate(Template template,Map<String,Object> context,Appendable outWriter) throws TemplateException, IOException {  context.remove("null");  Environment env=template.createProcessingEnvironment(context,(Writer)outWriter);  applyUserSettings(env,context);  env.process();  return env;}  }
class C{  @Override public StringBuffer format(long number,StringBuffer toAppendTo,FieldPosition pos){  return toAppendTo.append(getDirectionCode(number));}  }
class C{  public void assertSameType(Type s,Type t,boolean expected){  if (types.isSameType(s,t) != expected) {    String msg=expected ? " is not the same type as " : " is the same type as ";    error(s + msg + t);  }}  }
class C{  public static Pair<Integer,Integer> parseAacAudioSpecificConfig(byte[] audioSpecificConfig){  int audioObjectType=(audioSpecificConfig[0] >> 3) & 0x1F;  int byteOffset=audioObjectType == 5 || audioObjectType == 29 ? 1 : 0;  int frequencyIndex=(audioSpecificConfig[byteOffset] & 0x7) << 1 | ((audioSpecificConfig[byteOffset + 1] >> 7) & 0x1);  Assertions.checkState(frequencyIndex < 13);  int sampleRate=AUDIO_SPECIFIC_CONFIG_SAMPLING_RATE_TABLE[frequencyIndex];  int channelCount=(audioSpecificConfig[byteOffset + 1] >> 3) & 0xF;  return Pair.create(sampleRate,channelCount);}  }
class C{  public Task<R> latestFinishedTask(){  if (!tasks.isEmpty()) {    Collections.sort(tasks,new LatestFinishedTaskComparator());    Task<R> latestTask=tasks.get(0);    if (latestTask.getEndTime() != null) {      return latestTask;    }  }  return null;}  }
class C{  public TextOutputDialog(java.awt.Frame parent,String outputText){  super(parent,true);  initComponents();  setLocationRelativeTo(null);  textOutputTextPane.setContentType("text/html");  textOutputTextPane.setText("" + "<html>" + "<body>"+ "<p>"+ "<tt>" + outputText.replaceAll(" ","&nbsp;").replaceAll("\n","<br>") + "</tt>"+ "</p>"+ "</body>"+ "</html>"+ "");}  }
class C{  public static void main(String[] args){  doMain(args);}  }
class C{  public static String webalize(final String key){  return (key != null) ? CommonPattern.SPACE.matcher(normalize(key)).replaceAll("%20") : "null";}  }
class C{  @Override public void execute(MetricTimeSeries timeSeries,FunctionValueMap functionValueMap){  if (timeSeries.isEmpty()) {    return;  }  timeSeries.sort();  LongList timeList=new LongList(timeSeries.size());  DoubleList valueList=new DoubleList(timeSeries.size());  Set<Double> distinct=new HashSet<>();  for (int i=0; i < timeSeries.size(); i++) {    double value=timeSeries.getValue(i);    if (!distinct.contains(value)) {      timeList.add(timeSeries.getTime(i));      valueList.add(value);      distinct.add(value);    }  }  timeSeries.clear();  timeSeries.addAll(timeList,valueList);  functionValueMap.add(this);}  }
class C{  private void resolveOtherItemsDimensions(){  RelativeLayout.LayoutParams lp=new RelativeLayout.LayoutParams(this.getLayoutParams());  lp.setMargins(25,0,25,50);  this.setLayoutParams(lp);}  }
class C{  public static final Token newToken(int ofKind){switch (ofKind) {default :    return new Token();}}  }
class C{  public static TargetInformation parse(final byte[] data) throws MessageParserException {  Preconditions.checkNotNull(data,"IE01300: Data argument can not be null");  final DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  int addressSize=-1;  List<RegisterDescription> registers=null;  DebuggerOptions options=null;  try {    final DocumentBuilder builder=factory.newDocumentBuilder();    final Document document=builder.parse(new ByteArrayInputStream(data,0,data.length));    final NodeList nodes=document.getFirstChild().getChildNodes();    for (int i=0; i < nodes.getLength(); ++i) {      final Node node=nodes.item(i);      final String nodeName=node.getNodeName();      if ("registers".equals(nodeName)) {        registers=parseRegisterInformation(node);      } else       if ("size".equals(nodeName)) {        addressSize=Integer.valueOf(node.getTextContent());      } else       if ("options".equals(nodeName)) {        options=parseOptionsInformation(node);      } else {        throw new MessageParserException(String.format("Found unknown node '%s' in target information string",nodeName));      }    }  } catch (  final ParserConfigurationException|SAXException|IOException exception) {    CUtilityFunctions.logException(exception);    throw new MessageParserException(exception.getLocalizedMessage());  }  if (addressSize == -1) {    throw new MessageParserException("E00070: IE01043: Received invalid target information string (missing address size information)");  }  Preconditions.checkNotNull(registers,"IE01044: Received invalid target information string (missing registers information)");  Preconditions.checkNotNull(options,"IE01046: Received invalid target information string (missing options information)");  return new TargetInformation(addressSize,registers,options);}  }
class C{  private void clearFormBody(){  if ((messageComposite != null) && !messageComposite.isDisposed()) {    messageComposite.dispose();  }  treeViewer.setInput(Collections.emptyList());  treeViewer.getTree().setVisible(false);  treeViewer.getTree().setLayoutData(new GridData(SWT.LEFT,SWT.TOP,false,false));}  }
class C{  @Override public void waitForIdle(long timeout){  device.waitForIdle(timeout);}  }
class C{  public boolean isOptOut(){  configuration.load();  return configuration.get(Configuration.CATEGORY_GENERAL,"opt-out",false).getBoolean(false);}  }
class C{  public static BufferedImage reduce24(BufferedImage bi,int colors){  int width=bi.getWidth();  int height=bi.getHeight();  int[][] pixels=new int[width][height];  boolean[][] transparent=new boolean[width][height];  WritableRaster r1=bi.getRaster();  boolean inputHasAlpha=bi.getColorModel().hasAlpha();  int[] argb=new int[4];  for (int x=0; x < width; x++) {    for (int y=0; y < height; y++) {      argb=r1.getPixel(x,y,argb);      int r=argb[0];      int g=argb[1];      int b=argb[2];      pixels[x][y]=(r << 16) | (g << 8) | (b);      if (inputHasAlpha) {        int a=argb[3];        pixels[x][y]|=(a << 24);        transparent[x][y]=(a < 128) ? true : false;      }    }  }  int[] palette=Quantize.quantizeImage(pixels,colors - 1);  byte[] r=new byte[colors];  byte[] g=new byte[colors];  byte[] b=new byte[colors];  byte[] a=new byte[colors];  Arrays.fill(r,(byte)OMColor.clear.getRed());  Arrays.fill(g,(byte)OMColor.clear.getGreen());  Arrays.fill(b,(byte)OMColor.clear.getBlue());  Arrays.fill(a,(byte)OMColor.clear.getAlpha());  for (int i=0; i < palette.length; i++) {    Color c=new Color(palette[i],true);    r[i + 1]=(byte)c.getRed();    g[i + 1]=(byte)c.getGreen();    b[i + 1]=(byte)c.getBlue();    a[i + 1]=(byte)c.getAlpha();  }  IndexColorModel colorModel=new IndexColorModel(8,r.length,r,g,b,a);  BufferedImage reducedImage=new BufferedImage(width,height,BufferedImage.TYPE_BYTE_INDEXED,colorModel);  WritableRaster raster=reducedImage.getRaster();  for (int x=0; x < width; x++) {    for (int y=0; y < height; y++) {      int value=transparent[x][y] ? 0 : (pixels[x][y] + 1);      raster.setSample(x,y,0,value);    }  }  return reducedImage;}  }
class C{  @Override public String toString(){  return getClass().getSimpleName() + "[" + _column+ ","+ _expr+ "]";}  }
class C{  public void put(K1 key1,K2 key2,V value){  super.put(new Pair<K1,K2>(key1,key2),value);}  }
class C{  public boolean equals(java.lang.Object obj){  return false;}  }
class C{  public boolean isSecure(){  return true;}  }
class C{  public static Counter counter(String namespace,String name){  return new DelegatingCounter(MetricName.named(namespace,name));}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  MobileSessionCtx wsc=MobileSessionCtx.get(request);  if (wsc == null) {    MobileUtil.createTimeoutPage(request,response,this,null);    return;  }  int AD_Process_ID=MobileUtil.getParameterAsInt(request,"AD_Process_ID");  int AD_Window_ID=MobileUtil.getParameterAsInt(request,"AD_Window_ID");  int AD_Table_ID=MobileUtil.getParameterAsInt(request,"AD_Table_ID");  int AD_Record_ID=MobileUtil.getParameterAsInt(request,"AD_Record_ID");  if (AD_Process_ID == 0) {    MobileUtil.createErrorPage(request,response,this,"No Process");    return;  }  createProcessPage(request,response,AD_Process_ID,AD_Window_ID);}  }
class C{  public String rotateKey(boolean enableIpsec){  try {    String psk=generateKey();    long vdcConfigVersion=DrUtil.newVdcConfigVersion();    String ipsecStatus=null;    if (enableIpsec) {      ipsecStatus=STATUS_ENABLED;    }    updateIPsecKeyToOtherVDCs(psk,vdcConfigVersion,ipsecStatus);    if (enableIpsec) {      ipsecConfig.setIpsecStatus(ipsecStatus);    }    ipsecConfig.setPreSharedKey(psk);    updateTargetSiteInfo(vdcConfigVersion);    log.info("IPsec Key gets rotated successfully to the version {}",vdcConfigVersion);    return Long.toString(vdcConfigVersion);  } catch (  Exception e) {    log.warn("Fail to rotate ipsec key.",e);    throw SecurityException.fatals.failToRotateIPsecKey(e);  }}  }
class C{  public void discover(){  this.setDiscoveryInProgress(true);  this.getUnmanagedBackendVolumes();  this.getUnmanagedVplexMirrors();  this.getUnmanagedVplexClones();  this.getUnmanagedBackendOnlyClones();}  }
class C{  public void removeDocument(int docId) throws Exception {  m_fdr.getDocumentTree().removeDocument(docId);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.873 -0400",hash_original_method="9315C2581CF2931FD314CE0DD09752F7",hash_generated_method="14B4431922B0597712A05D186921B79D") @DSSafe(DSCat.SAFE_LIST) @Deprecated public static IOFileFilter orFileFilter(IOFileFilter filter1,IOFileFilter filter2){  return new OrFileFilter(filter1,filter2);}  }
class C{  public void shuffleFromTo(int from,int to){  if (size == 0)   return;  checkRangeFromTo(from,to,size);  cern.jet.random.Uniform gen=new cern.jet.random.Uniform(new cern.jet.random.engine.DRand(new java.util.Date()));  long tmpElement;  long[] theElements=elements;  int random;  for (int i=from; i < to; i++) {    random=gen.nextIntFromTo(i,to);    tmpElement=theElements[random];    theElements[random]=theElements[i];    theElements[i]=tmpElement;  }}  }
class C{  public static boolean testPointAar(double pX,double pY,double minX,double minY,double maxX,double maxY){  return pX >= minX && pY >= minY && pX <= maxX && pY <= maxY;}  }
class C{  public void valueChange(ValueChangeEvent e){  log.info(e.getPropertyName() + "=" + e.getNewValue());  if (e.getPropertyName().equals("AD_Org_ID"))   m_AD_Org_ID=e.getNewValue();  if (e.getPropertyName().equals("C_BPartner_ID")) {    m_C_BPartner_ID=e.getNewValue();    fBPartner.setValue(m_C_BPartner_ID);  }  form.postQueryEvent();}  }
class C{  public synchronized Map<String,Long> maxMessagesSendTimes(){  return new HashMap<>(maxMsgsSndTimes);}  }
class C{  public CGraphSettingsSynchronizer(final ZyGraph graph){  Preconditions.checkNotNull(graph,"IE02189: Graph argument can not be null");  m_graph=graph;  m_graph.getSettings().getDisplaySettings().addListener(m_settingsListener);}  }
class C{  public StringBuilder(int capacity){  super(capacity);}  }
class C{  public Item build(Data data){  Item build=super.build();  build.load(data);  build.components.add(new FactoryProvider(this));  return build;}  }
class C{  private static void outputHelp(){  System.out.println("Usage: TzdbZoneRulesCompiler <options> <tzdb source filenames>");  System.out.println("where options include:");  System.out.println("   -srcdir  <directory>  Where to find tzdb source directory (required)");  System.out.println("   -dstfile <file>       Where to output generated file (default srcdir/tzdb.dat)");  System.out.println("   -help                 Print this usage message");  System.out.println("   -verbose              Output verbose information during compilation");  System.out.println(" The source directory must contain the unpacked tzdb files, such as asia or europe");}  }
class C{  public static byte[] copyOfRange(byte[] src,int startIndex,int endIndex){  int length=endIndex - startIndex;  if (length < 0) {    throw new IllegalArgumentException("startIndex (" + startIndex + ")"+ " > endIndex ("+ endIndex+ ")");  }  byte[] dest=new byte[length];  System.arraycopy(src,startIndex,dest,0,length);  return dest;}  }
class C{  @Override protected boolean accept(){  return useWhiteList == stopTypes.contains(typeAttribute.type());}  }
class C{  public boolean isOpen(){  return open;}  }
class C{  public String toString(){  return "null";}  }
class C{  public void processingInstruction(String target,String data) throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#processingInstruction: " + target + ", "+ data);  if (m_contentHandler != null) {    m_contentHandler.processingInstruction(target,data);  }}  }
class C{  public static void post(String relativeUrl,AsyncHttpResponseHandler handler){  client.post(getAbsoluteApiUrl(relativeUrl),handler);  TLog.log(TAG,"POST " + relativeUrl);}  }
class C{  void collectUnresponsiveMembers(Set s){  if (stillWaiting()) {    InternalDistributedMember[] memberList=getMembers();synchronized (memberList) {      for (int i=0; i < memberList.length; i++) {        InternalDistributedMember m=memberList[i];        if (m != null) {          s.add(m);        }      }    }  }}  }
class C{  public boolean removeLastOccurrence(Object o){  if (o == null)   return false;  int mask=elements.length - 1;  int i=(tail - 1) & mask;  E x;  while ((x=elements[i]) != null) {    if (o.equals(x)) {      delete(i);      return true;    }    i=(i - 1) & mask;  }  return false;}  }
class C{  public static String listBucket(final String bucketName) throws IOException, GeneralSecurityException {  GoogleCredential credential=GoogleCredential.getApplicationDefault().createScoped(Collections.singleton(STORAGE_SCOPE));  String uri="https://storage.googleapis.com/" + URLEncoder.encode(bucketName,"UTF-8");  HttpTransport httpTransport=GoogleNetHttpTransport.newTrustedTransport();  HttpRequestFactory requestFactory=httpTransport.createRequestFactory(credential);  GenericUrl url=new GenericUrl(uri);  HttpRequest request=requestFactory.buildGetRequest(url);  HttpResponse response=request.execute();  String content=response.parseAsString();  return content;}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public Weeks toStandardWeeks(){  return Weeks.weeks(getValue() / DateTimeConstants.SECONDS_PER_WEEK);}  }
class C{  public boolean isLiked(String ref){  return getLikingImpl(ref,PREF_LIKED_ENTRIES);}  }
class C{  public static BasicKeyChain fromProtobufEncrypted(List<Protos.Key> keys,KeyCrypter crypter) throws UnreadableWalletException {  BasicKeyChain chain=new BasicKeyChain(checkNotNull(crypter));  chain.deserializeFromProtobuf(keys);  return chain;}  }
class C{  public GUIFrame(DialogueSystem system){  this.system=system;}  }
class C{  protected TracePeriod_Impl(){  super();}  }
class C{  public void erase(ItemStack stack){  stack.setTagCompound(null);}  }
class C{  public boolean hasAttribute(String key){  return attributes.containsKey(key);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:40.662 -0500",hash_original_method="EBF505A176A1691C0AFF349A48F88B72",hash_generated_method="4C7AAE0C723F6C19972FBE1B2122D173") public ClipData(CharSequence label,String[] mimeTypes,Item item){  mClipDescription=new ClipDescription(label,mimeTypes);  if (item == null) {    throw new NullPointerException("item is null");  }  mIcon=null;  mItems.add(item);}  }
class C{  public int readVarInt(){  int b=data[pos];  if (b >= 0) {    pos++;    return b;  }  return readVarIntRest(b);}  }
class C{  public final RegExp resolveTilde(Macros macros){  RegExp1 unary;  RegExp2 binary;  RegExp content;switch (type) {case sym.BAR:    binary=(RegExp2)this;  return new RegExp2(sym.BAR,binary.r1.resolveTilde(macros),binary.r2.resolveTilde(macros));case sym.CONCAT:binary=(RegExp2)this;return new RegExp2(sym.CONCAT,binary.r1.resolveTilde(macros),binary.r2.resolveTilde(macros));case sym.STAR:unary=(RegExp1)this;content=(RegExp)unary.content;return new RegExp1(sym.STAR,content.resolveTilde(macros));case sym.PLUS:unary=(RegExp1)this;content=(RegExp)unary.content;return new RegExp1(sym.PLUS,content.resolveTilde(macros));case sym.QUESTION:unary=(RegExp1)this;content=(RegExp)unary.content;return new RegExp1(sym.QUESTION,content.resolveTilde(macros));case sym.BANG:unary=(RegExp1)this;content=(RegExp)unary.content;return new RegExp1(sym.BANG,content.resolveTilde(macros));case sym.TILDE:unary=(RegExp1)this;content=((RegExp)unary.content).resolveTilde(macros);RegExp any_star=new RegExp1(sym.STAR,anyChar());RegExp neg=new RegExp1(sym.BANG,new RegExp2(sym.CONCAT,any_star,new RegExp2(sym.CONCAT,content,any_star)));return new RegExp2(sym.CONCAT,neg,content);case sym.STRING:case sym.STRING_I:case sym.CHAR:case sym.CHAR_I:case sym.CCLASS:case sym.CCLASSNOT:unary=(RegExp1)this;return new RegExp1(unary.type,unary.content);case sym.MACROUSE:unary=(RegExp1)this;return macros.getDefinition((String)unary.content).resolveTilde(macros);}throw new Error("unknown regexp type " + type);}  }
class C{  private boolean isWhitespace(){  return isWhitespace(_pos);}  }
class C{  public void removeListener(final IBookmarkManagerListener listener){  m_listeners.removeListener(listener);}  }
class C{  public void addMarker(TLAMarkerInformationHolder error){  detectedErrors.add(error);}  }
class C{  public void onReqReplaceFinancialAccount(int faDataType,String xml) throws BrokerModelException {}  }
class C{  public static String[] values(){  return ALL_VALUES;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  double minVal;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          minVal=z;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData && filterShape[a] == 1) {              if (z < minVal) {                minVal=z;              }            }          }          outputFile.setValue(row,col,minVal);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public final void allowCheckStateAnimation(boolean allowAnimation){  mAllowCheckStateAnimation=allowAnimation;}  }
class C{  public static Matcher<Exception> fbMessageStartsWith(int fbErrorCode,String... messageParameters){  return message(startsWith(getFbMessage(fbErrorCode,messageParameters)));}  }
class C{  public FormatIntegerLeft(final int in,final boolean group){  super(in,group);}  }
class C{  public DocumentListFeed(){  super(DocumentListEntry.class);  getCategories().add(DocumentListEntry.CATEGORY);}  }
class C{  final public void write(int ch){  try {    _out.print((char)ch);  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  public PubsubFuture<Subscription> createSubscription(final String canonicalSubscriptionName,final String canonicalTopic){  return createSubscription(Subscription.of(canonicalSubscriptionName,canonicalTopic));}  }
class C{  private static EnumType doReadEnumType(BinaryInputStream in){  int typeId=in.readInt();  if (typeId != GridBinaryMarshaller.UNREGISTERED_TYPE_ID)   return new EnumType(typeId,null); else {    String clsName=doReadClassName(in);    return new EnumType(GridBinaryMarshaller.UNREGISTERED_TYPE_ID,clsName);  }}  }
class C{  public SendMessageResult sendMessage(SendMessageRequest sendMessageRequest){  return amazonSqsToBeExtended.sendMessage(sendMessageRequest);}  }
class C{  public XMLDecoder(InputStream in,Object owner){  this(in,owner,null);}  }
class C{  public static byte[] decodeFromFile(String filename) throws java.io.IOException {  byte[] decodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=null;    int length=0;    int numBytes=0;    if (file.length() > Integer.MAX_VALUE) {      throw new java.io.IOException("File is too big for this convenience method (" + file.length() + " bytes).");    }    buffer=new byte[(int)file.length()];    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.DECODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    decodedData=new byte[length];    System.arraycopy(buffer,0,decodedData,0,length);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return decodedData;}  }
class C{  static boolean isBoundToAnyGroup(){  return myGroupAndInvokeCount.get() != null;}  }
class C{  public void removeActionListener(ActionListener l){  if (l != null)   listenerList.remove(ActionListener.class,l);}  }
class C{  public static void makeIntMatrixFile(int matrix[][],String outputFileName) throws IOException {  int rowSize=matrix.length;  int colSize=matrix[0].length;  createDirectories(outputFileName);  BufferedWriter out=new BufferedWriter(new FileWriter(outputFileName));  for (int i=0; i < rowSize; i++) {    for (int j=0; j < colSize; j++) {      out.write(String.valueOf(matrix[i][j]) + "\t");      if (j == colSize - 1) {        out.write("\n");      }    }  }  out.close();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:32.374 -0500",hash_original_method="D39515BCFB2BDEF720AFC38551AEFE84",hash_generated_method="AB1861AB070B8BA388FBF22294799AB8") protected void shutdown() throws IOException {  shutdownEntry();  if (connection.isOpen())   connection.shutdown();}  }
class C{  public boolean isEmpty(){  return (m_index == -1);}  }
class C{  public static List<VOOrganization> toVOOrganizations(List<Organization> organizations,LocalizerFacade localizerFacade){  List<VOOrganization> result=new ArrayList<VOOrganization>();  List<Long> orgKeys=new ArrayList<Long>();  for (  Organization org : organizations) {    orgKeys.add(Long.valueOf(org.getKey()));  }  localizerFacade.prefetch(orgKeys,Collections.singletonList(LocalizedObjectTypes.ORGANIZATION_DESCRIPTION));  for (  Organization org : organizations) {    result.add(toVOOrganization(org,false,localizerFacade));  }  return result;}  }
class C{  private void updateAudioDeviceState(boolean hasWiredHeadset){  audioDevices.clear();  if (hasWiredHeadset) {    audioDevices.add(AudioDevice.WIRED_HEADSET);  } else {    audioDevices.add(AudioDevice.SPEAKER_PHONE);    if (hasEarpiece()) {      audioDevices.add(AudioDevice.EARPIECE);    }  }  Log.d(TAG,"audioDevices: " + audioDevices);  if (hasWiredHeadset) {    setAudioDevice(AudioDevice.WIRED_HEADSET);  } else {    setAudioDevice(defaultAudioDevice);  }}  }
class C{  public DnsDiscovery(NetworkParameters netParams){  this(netParams.getDnsSeeds(),netParams);}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public Builder curatorClient(String zkAddr,int zkSessionTimeoutMs){  this.zkAddr=zkAddr;  this.zkSessionTimeoutMs=zkSessionTimeoutMs;  return this;}  }
class C{  public ServerSocket() throws IOException {  setImpl();}  }
class C{  public TransactionOutput addOutput(BigInteger value,Script script){  return addOutput(new TransactionOutput(params,this,value,script.getProgram()));}  }
class C{  public static void plotBars(double[] a){  int n=a.length;  StdDraw.setXscale(-1,n);  for (int i=0; i < n; i++) {    StdDraw.filledRectangle(i,a[i] / 2,0.25,a[i] / 2);  }}  }
class C{  protected Device findDestByEntity(IEntityClass reference,Entity dstEntity){  Long deviceKey=primaryIndex.findByEntity(dstEntity);  if (deviceKey == null) {    ClassState classState=getClassState(reference);    if (classState.classIndex == null) {      return null;    }    deviceKey=classState.classIndex.findByEntity(dstEntity);  }  if (deviceKey == null)   return null;  return deviceMap.get(deviceKey);}  }
class C{  public boolean processRow(StepMetaInterface smi,StepDataInterface sdi) throws KettleException {  this.meta=((SortKeyStepMeta)smi);  StandardLogService.setThreadName(meta.getPartitionID(),null);  this.data=((SortKeyStepData)sdi);  Object[] row=getRow();  this.observer=new SortObserver();  if (row == null) {    return processRowToNextStep();  } else   if (RemoveDictionaryUtil.checkAllValuesForNull(row)) {    int outSize=Integer.parseInt(meta.getOutputRowSize());    Object[] outRow=new Object[outSize];    this.data.setOutputRowMeta((RowMetaInterface)getInputRowMeta().clone());    this.meta.getFields(data.getOutputRowMeta(),getStepname(),null,null,this);    LOGGER.info("Record Procerssed For table: " + meta.getTabelName());    LOGGER.info("Record Form Previous Step was null");    String logMessage="Summary: Carbon Sort Key Step: Read: " + 1 + ": Write: "+ 1;    LOGGER.info(logMessage);    putRow(data.getOutputRowMeta(),outRow);    setOutputDone();    return false;  }  if (first) {    CarbonTimeStatisticsFactory.getLoadStatisticsInstance().recordSortRowsStepTotalTime(meta.getPartitionID(),System.currentTimeMillis());    first=false;    this.data.setOutputRowMeta((RowMetaInterface)getInputRowMeta().clone());    this.meta.getFields(data.getOutputRowMeta(),getStepname(),null,null,this);    this.meta.setNoDictionaryCount(RemoveDictionaryUtil.extractNoDictionaryCount(meta.getNoDictionaryDims()));    this.noDictionaryColMaping=RemoveDictionaryUtil.convertStringToBooleanArr(meta.getNoDictionaryDimsMapping());    this.sortDataRows=new SortDataRows(meta.getTabelName(),meta.getDimensionCount() - meta.getComplexDimensionCount(),meta.getComplexDimensionCount(),meta.getMeasureCount(),this.observer,meta.getNoDictionaryCount(),meta.getPartitionID(),meta.getSegmentId() + "",meta.getTaskNo(),this.noDictionaryColMaping);    try {      this.sortDataRows.initialize(meta.getSchemaName(),meta.getCubeName());    } catch (    CarbonSortKeyAndGroupByException e) {      throw new KettleException(e);    }    this.logCounter=Integer.parseInt(CarbonProperties.getInstance().getProperty(CarbonCommonConstants.DATA_LOAD_LOG_COUNTER,CarbonCommonConstants.DATA_LOAD_LOG_COUNTER_DEFAULT_COUNTER));  }  readCounter++;  if (readCounter % logCounter == 0) {    LOGGER.info("Record Procerssed For table: " + meta.getTabelName());    String logMessage="Carbon Sort Key Step: Record Read: " + readCounter;    LOGGER.info(logMessage);  }  try {    this.sortDataRows.addRow(row);    writeCounter++;  } catch (  Throwable e) {    LOGGER.error(e);    throw new KettleException(e);  }  return true;}  }
class C{  private boolean checkForKnownValue(Instruction obj){  if (trackValueNumbers) {    try {      ValueNumberFrame vnaFrameAfter=vnaDataflow.getFactAfterLocation(getLocation());      if (vnaFrameAfter.isValid()) {        ValueNumber tosVN=vnaFrameAfter.getTopValue();        IsNullValue knownValue=getFrame().getKnownValue(tosVN);        if (knownValue != null) {          modelNormalInstruction(obj,getNumWordsConsumed(obj),0);          produce(knownValue);          return true;        }      }    } catch (    DataflowAnalysisException e) {    }  }  return false;}  }
class C{  public GPUImageFilterGroup(List<GPUImageFilter> filters){  mFilters=filters;  if (mFilters == null) {    mFilters=new ArrayList<GPUImageFilter>();  } else {    updateMergedFilters();  }  mGLCubeBuffer=ByteBuffer.allocateDirect(CUBE.length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer();  mGLCubeBuffer.put(CUBE).position(0);  mGLTextureBuffer=ByteBuffer.allocateDirect(TEXTURE_NO_ROTATION.length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer();  mGLTextureBuffer.put(TEXTURE_NO_ROTATION).position(0);  float[] flipTexture=TextureRotationUtil.getRotation(Rotation.NORMAL,false,true);  mGLTextureFlipBuffer=ByteBuffer.allocateDirect(flipTexture.length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer();  mGLTextureFlipBuffer.put(flipTexture).position(0);}  }
class C{  private void initializeWidgetState(){  menuManager=null;  dialogArea=null;  titleLabel=null;  titleSeparator=null;  infoSeparator=null;  infoLabel=null;  toolBar=null;  if (showDialogMenu && showPersistActions) {    IDialogSettings settings=getDialogSettings();    if (settings != null) {      String key=getClass().getName() + DIALOG_USE_PERSISTED_SIZE;      if (settings.get(key) != null || !isUsing34API)       persistSize=settings.getBoolean(key);      key=getClass().getName() + DIALOG_USE_PERSISTED_LOCATION;      if (settings.get(key) != null || !isUsing34API)       persistLocation=settings.getBoolean(key);    }  }}  }
class C{  public boolean isConnected(){  return connected;}  }
class C{  public InlineQueryResultVenue.InlineQueryResultVenueBuilder longitude(Double longitude){  this.longitude=longitude;  return this;}  }
class C{  public void addNotificationListener(NotificationListener listener,NotificationFilter filter,Object handback) throws IllegalArgumentException {  broadcaster.addNotificationListener(listener,filter,handback);}  }
class C{  protected JavaRefactoringDescriptor(final String id){  this(id,null,DescriptorMessages.JavaRefactoringDescriptor_not_available,null,new HashMap(),RefactoringDescriptor.STRUCTURAL_CHANGE | RefactoringDescriptor.MULTI_CHANGE);}  }
class C{  public boolean deleteFilesInWhiteList(){  return true;}  }
class C{  @Override public byte[] serializeKey(final Object obj){  if (obj == null)   throw new IllegalArgumentException();  if (obj instanceof ICounter) {    return serializeKey((ICounter)obj);  } else   if (obj instanceof Entry) {    return serializeKey((Entry)obj);  } else {    throw new UnsupportedOperationException(obj.getClass().getName());  }}  }
class C{  @Override public boolean equals(Object other){  if (other instanceof IntArrayWrapper) {    return Arrays.equals(data,((IntArrayWrapper)other).data);  }  return false;}  }
class C{  protected TextView createDefaultTabView(Context context){  TextView textView=new TextView(context);  textView.setGravity(Gravity.CENTER);  textView.setTextSize(TypedValue.COMPLEX_UNIT_SP,mTextSize);  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {    TypedValue outValue=new TypedValue();    getContext().getTheme().resolveAttribute(android.R.attr.selectableItemBackground,outValue,true);    textView.setBackgroundResource(outValue.resourceId);  }  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {    textView.setAllCaps(true);  }  int padding=(int)(TAB_VIEW_PADDING_DIPS * getResources().getDisplayMetrics().density);  textView.setPadding(padding * 2,padding,padding * 2,padding);  return textView;}  }
class C{  public void playSpeech(SpeechData sound){  sound.rewind();  if (outputSpeech == null) {    outputSpeech=sound;    (new Thread(new SpeechPlayer())).start();  } else {    outputSpeech=outputSpeech.concatenate(sound);  }}  }
class C{  public static void invokeIfExists(Object obj,String methodName,Class clazz,Object newValue){  try {    invoke(obj,methodName,clazz,newValue);  } catch (  NoSuchMethodException e) {  }}  }
class C{  @HLEFunction(nid=0x1FF89745,version=150) public int sceNetAdhocctlJoinEnterGameMode(@StringInfo(maxLength=GROUP_NAME_LENGTH) PspString groupName,pspNetMacAddress macAddress,int timeout,int unknown){  checkInitialized();  doJoin=true;  setGroupName(groupName.getString(),PSP_ADHOCCTL_MODE_GAMEMODE);  return 0;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:03.907 -0500",hash_original_method="0F929F0C8DC1843BD8DBD2B052064009",hash_generated_method="D00F7801AB8827B06750667ED03BD306") public void bindTexture(Allocation va,int slot) throws IllegalArgumentException {  mRS.validate();  if ((slot < 0) || (slot >= mTextureCount)) {    throw new IllegalArgumentException("Slot ID out of range.");  }  if (va != null && va.getType().hasFaces() && mTextures[slot] != TextureType.TEXTURE_CUBE) {    throw new IllegalArgumentException("Cannot bind cubemap to 2d texture slot");  }  int id=va != null ? va.getID() : 0;  mRS.nProgramBindTexture(getID(),slot,id);}  }
class C{  public void validate(Map<String,Object> context,String mode,Locale locale) throws ServiceValidationException {  Map<String,String> requiredInfo=new HashMap<String,String>();  Map<String,String> optionalInfo=new HashMap<String,String>();  boolean verboseOn=Debug.verboseOn();  if (verboseOn)   Debug.logVerbose("[ModelService.validate] : {" + this.name + "} : Validating context - "+ context,module);  if (mode.equals(OUT_PARAM) && context != null && context.containsKey(RESPONSE_MESSAGE)) {    if (RESPOND_ERROR.equals(context.get(RESPONSE_MESSAGE)) || RESPOND_FAIL.equals(context.get(RESPONSE_MESSAGE))) {      if (verboseOn)       Debug.logVerbose("[ModelService.validate] : {" + this.name + "} : response was an error, not validating.",module);      return;    }  }  for (  ModelParam modelParam : this.contextParamList) {    if ("INOUT".equals(modelParam.mode) || mode.equals(modelParam.mode)) {      if (modelParam.optional) {        optionalInfo.put(modelParam.name,modelParam.type);      } else {        requiredInfo.put(modelParam.name,modelParam.type);      }    }  }  Map<String,Object> requiredTest=new HashMap<String,Object>();  Map<String,Object> optionalTest=new HashMap<String,Object>();  if (context == null)   context=new HashMap<String,Object>();  requiredTest.putAll(context);  List<String> requiredButNull=new LinkedList<String>();  List<String> keyList=new LinkedList<String>();  keyList.addAll(requiredTest.keySet());  for (  String key : keyList) {    Object value=requiredTest.get(key);    if (!requiredInfo.containsKey(key)) {      requiredTest.remove(key);      optionalTest.put(key,value);    } else     if (value == null) {      requiredButNull.add(key);    }  }  if (requiredButNull.size() > 0) {    List<String> missingMsg=new LinkedList<String>();    for (    String missingKey : requiredButNull) {      String message=this.getParam(missingKey).getPrimaryFailMessage(locale);      if (message == null) {        String errMsg=UtilProperties.getMessage(ServiceUtil.resource,"ModelService.following_required_parameter_missing",locale);        message=errMsg + " [" + this.name+ "."+ missingKey+ "]";      }      missingMsg.add(message);    }    throw new ServiceValidationException(missingMsg,this,requiredButNull,null,mode);  }  if (verboseOn) {    StringBuilder requiredNames=new StringBuilder();    for (    String key : requiredInfo.keySet()) {      if (requiredNames.length() > 0) {        requiredNames.append(", ");      }      requiredNames.append(key);    }    Debug.logVerbose("[ModelService.validate] : required fields - " + requiredNames,module);    Debug.logVerbose("[ModelService.validate] : {" + name + "} : ("+ mode+ ") Required - "+ requiredTest.size()+ " / "+ requiredInfo.size(),module);    Debug.logVerbose("[ModelService.validate] : {" + name + "} : ("+ mode+ ") Optional - "+ optionalTest.size()+ " / "+ optionalInfo.size(),module);  }  try {    validate(requiredInfo,requiredTest,true,this,mode,locale);    validate(optionalInfo,optionalTest,false,this,mode,locale);  } catch (  ServiceValidationException e) {    Debug.logError("[ModelService.validate] : {" + name + "} : ("+ mode+ ") Required test error: "+ e.toString(),module);    throw e;  }  if ("IN".equals(mode)) {    List<String> errorMessageList=new LinkedList<String>();    for (    ModelParam modelParam : this.contextInfo.values()) {      if (context.get(modelParam.name) != null && ("String".equals(modelParam.type) || "java.lang.String".equals(modelParam.type)) && !"any".equals(modelParam.allowHtml) && ("INOUT".equals(modelParam.mode) || "IN".equals(modelParam.mode))) {        String value=(String)context.get(modelParam.name);        UtilCodec.checkStringForHtmlStrictNone(modelParam.name,value,errorMessageList);      }    }    if (errorMessageList.size() > 0) {      throw new ServiceValidationException(errorMessageList,this,mode);    }  }}  }
class C{  public void onUsbMassStorageConnectionChanged(boolean connected){}  }
class C{  private static void writeMarshalArguments(IndentingWriter p,String streamName,Type[] types,String[] names) throws IOException {  assert types.length == names.length;  for (int i=0; i < types.length; i++) {    writeMarshalArgument(p,streamName,types[i],names[i]);    p.pln(";");  }}  }
class C{  static public boolean betweeneq(double v1,double v,double v2){  return lteq(v1,v) && lteq(v,v2);}  }
class C{  void sendAccessibilityEvent(View view){  AccessibilityManager accessibilityManager=(AccessibilityManager)getContext().getSystemService(Context.ACCESSIBILITY_SERVICE);  if (accessibilityManager == null)   return;  if (mSendClickAccessibilityEvent && accessibilityManager.isEnabled()) {    AccessibilityEvent event=AccessibilityEvent.obtain();    event.setEventType(AccessibilityEvent.TYPE_VIEW_CLICKED);    view.onInitializeAccessibilityEvent(event);    view.dispatchPopulateAccessibilityEvent(event);    accessibilityManager.sendAccessibilityEvent(event);  }  mSendClickAccessibilityEvent=false;}  }
class C{  public static boolean isUnderline(AttributeSet a){  Boolean underline=(Boolean)a.getAttribute(Underline);  if (underline != null) {    return underline.booleanValue();  }  return false;}  }
class C{  protected void removeScriptingListenersOn(Element elt){  String eltNS=elt.getNamespaceURI();  String eltLN=elt.getLocalName();  if (SVGConstants.SVG_NAMESPACE_URI.equals(eltNS) && SVG12Constants.SVG_HANDLER_TAG.equals(eltLN)) {    AbstractElement tgt=(AbstractElement)elt.getParentNode();    String eventType=elt.getAttributeNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,XMLConstants.XML_EVENTS_EVENT_ATTRIBUTE);    String eventNamespaceURI=XMLConstants.XML_EVENTS_NAMESPACE_URI;    if (eventType.indexOf(':') != -1) {      String prefix=DOMUtilities.getPrefix(eventType);      eventType=DOMUtilities.getLocalName(eventType);      eventNamespaceURI=((AbstractElement)elt).lookupNamespaceURI(prefix);    }    EventListener listener=(EventListener)handlerScriptingListeners.put(eventNamespaceURI,eventType,elt,null);    tgt.removeEventListenerNS(eventNamespaceURI,eventType,listener,false);  }  super.removeScriptingListenersOn(elt);}  }
class C{  public static void createFunction(String name,String body) throws SQLException {  if (testSingleHost) {    Statement stmt=sharedConnection.createStatement();    stmt.execute("drop function IF EXISTS " + name);    stmt.execute("create function " + name + body);    tempProcedureList.add(name);  }}  }
class C{  public String variableName(int i){  return getConstPool().getUtf8Info(nameIndex(i));}  }
class C{  public boolean isDocOrdered(){  return m_exprObj.isDocOrdered();}  }
class C{  public static FetchEntriesResponse send(InternalDistributedMember recipient,PartitionedRegion r,int bucketId) throws ForceReattemptException {  Assert.assertTrue(recipient != null,"FetchEntriesMessage NULL reply message");  FetchEntriesResponse p=new FetchEntriesResponse(r.getSystem(),r,recipient,bucketId);  FetchEntriesMessage m=new FetchEntriesMessage(recipient,r.getPRId(),p,bucketId);  Set failures=r.getDistributionManager().putOutgoing(m);  if (failures != null && failures.size() > 0) {    throw new ForceReattemptException(LocalizedStrings.FetchEntriesMessage_FAILED_SENDING_0.toLocalizedString(m));  }  return p;}  }
class C{  public DefaultHttpMethodRetryHandler(){  this(Integer.getInteger(MAX_REQUEST_RETRY_PROPERTY,MAX_REQUEST_RETRY_DEFAULT),false);}  }
class C{  public long job(){  return job;}  }
class C{  void addScrapView(View scrap,int position){  if (DBG)   Log.d(TAG,"addScrapView position = " + position);  LayoutParams lp=(LayoutParams)scrap.getLayoutParams();  if (lp == null) {    return;  }  lp.position=position;  int viewType=lp.viewType;  final boolean scrapHasTransientState=ViewCompat.hasTransientState(scrap);  if (!shouldRecycleViewType(viewType) || scrapHasTransientState) {    if (viewType != ITEM_VIEW_TYPE_HEADER_OR_FOOTER || scrapHasTransientState) {      if (mSkippedScrap == null) {        mSkippedScrap=new ArrayList<View>();      }      mSkippedScrap.add(scrap);    }    if (scrapHasTransientState) {      if (mTransientStateViews == null) {        mTransientStateViews=new SparseArrayCompat<View>();      }      mTransientStateViews.put(position,scrap);    }    return;  }  if (mViewTypeCount == 1) {    mCurrentScrap.add(scrap);  } else {    mScrapViews[viewType].add(scrap);  }}  }
class C{  @ObjectiveCName("removeMyAvatar") public void removeMyAvatar(){  modules.getProfileModule().removeAvatar();}  }
class C{  public static void e(String tag,String msg){  if (sLevel > LEVEL_ERROR) {    return;  }  Log.e(tag,msg);}  }
class C{  static synchronized JmriUserInterfaceConfigurationProvider findProvider(Profile project){  if (providers.get(project) == null) {    providers.put(project,new JmriUserInterfaceConfigurationProvider(project));  }  return providers.get(project);}  }
class C{  static byte[][] computeRGB(int nCubes,Cube[] cubes){  byte[] r=new byte[nCubes];  byte[] g=new byte[nCubes];  byte[] b=new byte[nCubes];  byte[] rgb=new byte[3];  for (int i=0; i < nCubes; i++) {    rgb=cubes[i].averageColorRGB(rgb);    r[i]=rgb[Cube.RED];    g[i]=rgb[Cube.GRN];    b[i]=rgb[Cube.BLU];  }  byte[][] result=new byte[3][];  result[Cube.RED]=r;  result[Cube.GRN]=g;  result[Cube.BLU]=b;  return result;}  }
class C{  public boolean isDefault(){  return this == DEFAULT;}  }
class C{  private static Job checkJob(Job job){  verify(job.getStatus() != null);  JobStatus jobStatus=job.getStatus();  if (jobStatus.getErrorResult() != null) {    throw BigqueryJobFailureException.create(jobStatus);  } else {    logger.info(summarizeCompletedJob(job));    if (jobStatus.getErrors() != null) {      for (      ErrorProto error : jobStatus.getErrors()) {        logger.warning(String.format("%s: %s",error.getReason(),error.getMessage()));      }    }    return job;  }}  }
class C{  public void attachPanel(SpeechInputPanel speechPanel){  this.speechPanel=speechPanel;}  }
class C{  public void tagDefineTextField(int fieldId,String fieldName,String initialText,Rect boundary,int flags,AlphaColor textColor,int alignment,int fontId,int fontSize,int charLimit,int leftMargin,int rightMargin,int indentation,int lineSpacing) throws IOException {  if (initialText != null) {    output.println(initialText);  }}  }
class C{  @Override public void mark(int readlimit){}  }
class C{  public static void writeFully(FileChannel file,long pos,ByteBuffer src){  try {    int off=0;    do {      int len=file.write(src,pos + off);      off+=len;    } while (src.remaining() > 0);  } catch (  IOException e) {    throw newIllegalStateException(ERROR_WRITING_FAILED,"Writing to {0} failed; length {1} at {2}",file,src.remaining(),pos,e);  }}  }
class C{  @Override public Pair<OperandSize,String> generate(final ITranslationEnvironment environment,final long offset,final List<ReilInstruction> instructions) throws InternalTranslationException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(instructions,"Error: Argument instructions can't be null");  Preconditions.checkArgument(offset >= 0,"Error: Argument offset can't be less than 0");  final String ecxZero=environment.getNextVariableString();  instructions.add(ReilHelpers.createBisz(offset,OperandSize.BYTE,"ecx",OperandSize.BYTE,ecxZero));  return new Pair<OperandSize,String>(OperandSize.BYTE,ecxZero);}  }
class C{  public static int compare(final String v1,final String v2){  String version1=v1;  String version2=v2;  while (!version1.equals("") || !version2.equals("")) {    String component1;    final int pos1=version1.indexOf(".");    if (pos1 > -1) {      component1=version1.substring(0,pos1);      version1=version1.substring(pos1 + 1);    } else {      component1=version1;      version1="";    }    if (component1.equals("")) {      component1="0";    }    String component2;    final int pos2=version2.indexOf(".");    if (pos2 > -1) {      component2=version2.substring(0,pos2);      version2=version2.substring(pos2 + 1);    } else {      component2=version2;      version2="";    }    if (component2.equals("")) {      component2="0";    }    int res=0;    try {      final int componentInt1=Integer.parseInt(component1.trim());      final int componentInt2=Integer.parseInt(component2.trim());      res=componentInt1 - componentInt2;    } catch (    final NumberFormatException e) {      res=component1.compareTo(component2);    }    if (res != 0) {      return res;    }  }  return 0;}  }
class C{  public final void addCaretListener(CaretListener listener){  listenerList.add(CaretListener.class,listener);}  }
class C{  public Document document(){  return document;}  }
class C{  public boolean isRemoteIPCCallback(SootMethod method){  if (!isIPCCallback(method))   return false;  if (isAIDLCallback(method))   return true;  List<SootClass> classes=new LinkedList<SootClass>();  classes.add(method.getDeclaringClass());  if (SootUtils.isInnerClass(method.getDeclaringClass())) {    SootClass outer=SootUtils.getOuterClass(method.getDeclaringClass());    if (outer != null)     classes.add(outer);  }  for (  SootClass clz : classes) {    if (Hierarchy.isAndroidComponentClass(clz) && Resources.v().getManifest().isDefinedInManifest(clz) && Resources.v().getManifest().isExported(clz))     return true;  }  return false;}  }
class C{  private void switchToPlayer(Playback playback,boolean resumePlaying){  if (playback == null) {    throw new IllegalArgumentException("Playback cannot be null");  }  int oldState=mPlayback.getState();  int pos=mPlayback.getCurrentStreamPosition();  String currentMediaId=mPlayback.getCurrentMediaId();  LogUtils.d(TAG,"Current position from " + playback + " is ",pos);  mPlayback.stop(false);  playback.setCallback(this);  playback.setCurrentStreamPosition(pos < 0 ? 0 : pos);  playback.setCurrentMediaId(currentMediaId);  playback.start();  mPlayback=playback;switch (oldState) {case PlaybackStateCompat.STATE_BUFFERING:case PlaybackStateCompat.STATE_CONNECTING:case PlaybackStateCompat.STATE_PAUSED:    mPlayback.pause();  break;case PlaybackStateCompat.STATE_PLAYING:if (resumePlaying && QueueHelper.isIndexPlayable(mCurrentIndexOnQueue,mPlayingQueue)) {  mPlayback.play(mPlayingQueue.get(mCurrentIndexOnQueue));} else if (!resumePlaying) {  mPlayback.pause();} else {  mPlayback.stop(true);}break;case PlaybackStateCompat.STATE_NONE:break;default :LogUtils.d(TAG,"Default called. Old state is ",oldState);}}  }
class C{  public static ChunkStorage load(World world,ChunkDataBase chunkData,NBTTagCompound nbt,boolean packet){  try {    ResourceLocation type=new ResourceLocation(nbt.getString("type"));    Class<? extends ChunkStorage> storageClass=ChunkStorage.getStorageType(type);    if (storageClass == null)     throw new Exception("Chunk storage type not mapped");    Constructor<? extends ChunkStorage> ctor=storageClass.getConstructor(World.class,ChunkDataBase.class);    ChunkStorage storage=ctor.newInstance(world,chunkData);    if (packet) {      storage.readFromPacketNBT(nbt.getCompoundTag("storage"));    } else {      storage.readFromNBT(nbt.getCompoundTag("storage"));    }    return storage;  } catch (  Exception ex) {    throw new RuntimeException(ex);  }}  }
class C{  private void parseHeader(){  adtsScratch.setPosition(0);  if (!hasMediaFormat()) {    int audioObjectType=adtsScratch.readBits(2) + 1;    int sampleRateIndex=adtsScratch.readBits(4);    adtsScratch.skipBits(1);    int channelConfig=adtsScratch.readBits(3);    byte[] audioSpecificConfig=CodecSpecificDataUtil.buildAudioSpecificConfig(audioObjectType,sampleRateIndex,channelConfig);    Pair<Integer,Integer> audioParams=CodecSpecificDataUtil.parseAudioSpecificConfig(audioSpecificConfig);    MediaFormat mediaFormat=MediaFormat.createAudioFormat(MimeTypes.AUDIO_AAC,MediaFormat.NO_VALUE,audioParams.second,audioParams.first,Collections.singletonList(audioSpecificConfig));    frameDurationUs=(C.MICROS_PER_SECOND * 1024L) / mediaFormat.sampleRate;    setMediaFormat(mediaFormat);  } else {    adtsScratch.skipBits(10);  }  adtsScratch.skipBits(4);  sampleSize=adtsScratch.readBits(13) - 2 - HEADER_SIZE;  if (hasCrc) {    sampleSize-=CRC_SIZE;  }}  }
class C{  private void addResultToPriorityQueue(PriorityQueue<NeighborInfo> topResults,NeighborInfo neighborInfo,int maxNumResults){  if (topResults.size() < maxNumResults) {    topResults.add(neighborInfo);  } else   if (neighborInfo.getScore() > topResults.peek().getScore()) {    topResults.poll();    topResults.add(neighborInfo);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void visitAnnotationAttributes(AnnotationNode an,AnnotationVisitor av){  Map<String,Object> constantAttrs=new HashMap<String,Object>();  Map<String,PropertyExpression> enumAttrs=new HashMap<String,PropertyExpression>();  Map<String,Object> atAttrs=new HashMap<String,Object>();  Map<String,ListExpression> arrayAttrs=new HashMap<String,ListExpression>();  for (  String name : an.getMembers().keySet()) {    Expression expr=an.getMember(name);    if (expr instanceof AnnotationConstantExpression) {      atAttrs.put(name,((AnnotationConstantExpression)expr).getValue());    } else     if (expr instanceof ConstantExpression) {      constantAttrs.put(name,((ConstantExpression)expr).getValue());    } else     if (expr instanceof ClassExpression) {      constantAttrs.put(name,Type.getType(BytecodeHelper.getTypeDescription((expr.getType()))));    } else     if (expr instanceof PropertyExpression) {      enumAttrs.put(name,(PropertyExpression)expr);    } else     if (expr instanceof ListExpression) {      arrayAttrs.put(name,(ListExpression)expr);    } else     if (expr instanceof ClosureExpression) {      ClassNode closureClass=controller.getClosureWriter().getOrAddClosureClass((ClosureExpression)expr,ACC_PUBLIC);      constantAttrs.put(name,Type.getType(BytecodeHelper.getTypeDescription(closureClass)));    }  }  for (  Map.Entry entry : constantAttrs.entrySet()) {    av.visit((String)entry.getKey(),entry.getValue());  }  for (  Map.Entry entry : enumAttrs.entrySet()) {    PropertyExpression propExp=(PropertyExpression)entry.getValue();    av.visitEnum((String)entry.getKey(),BytecodeHelper.getTypeDescription(propExp.getObjectExpression().getType()),String.valueOf(((ConstantExpression)propExp.getProperty()).getValue()));  }  for (  Map.Entry entry : atAttrs.entrySet()) {    AnnotationNode atNode=(AnnotationNode)entry.getValue();    AnnotationVisitor av2=av.visitAnnotation((String)entry.getKey(),BytecodeHelper.getTypeDescription(atNode.getClassNode()));    visitAnnotationAttributes(atNode,av2);    av2.visitEnd();  }  visitArrayAttributes(an,arrayAttrs,av);}  }
class C{  protected void emit_TMethod_SemicolonKeyword_5_q(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  protected Vector<?> _create(Vector<String> markerNames,String prefix,Properties properties,ProgressSupport progressSupport,boolean matchInOutVectorSize){  int size=markerNames.size();  Vector<Object> vector=new Vector<Object>(size);  if (progressSupport != null) {    progressSupport.fireUpdate(ProgressEvent.UPDATE,"Creating Components",100,0);  }  for (int i=0; i < size; i++) {    String componentName=PropUtils.getScopedPropertyPrefix(prefix) + markerNames.elementAt(i);    String classProperty=componentName + DotClassNameProperty;    String className=properties.getProperty(classProperty);    if (className == null) {      logger.warning("Failed to locate property \"" + componentName + "\" with class \""+ classProperty+ "\"\n  Skipping component \""+ componentName+ "\"");      if (matchInOutVectorSize) {        vector.add(componentName);      }      continue;    }    if (progressSupport != null) {      progressSupport.fireUpdate(ProgressEvent.UPDATE,"Creating Components",size,i);    }    Object component=create(className,componentName,properties);    if (component != null) {      vector.add(component);      if (logger.isLoggable(Level.FINE)) {        logger.fine("ComponentFactory: [" + className + "("+ i+ ")] created");      }    } else {      if (matchInOutVectorSize) {        vector.add(componentName);      }      logger.info("[" + componentName + " : "+ className+ "("+ i+ ")] NOT created. -- Set logging flag to FINE/FINER for details.");    }  }  if (progressSupport != null) {    progressSupport.fireUpdate(ProgressEvent.UPDATE,"Configuring...",size,size);  }  return vector;}  }
class C{  private void notifyNoValidAction(final UserActionAttachment uaa){  sendNotification("This action isn't available anymore (this shouldn't happen!?!)");}  }
class C{  public Object value(InternalContextAdapter context) throws MethodInvocationException {  Object left=jjtGetChild(0).value(context);  Object right=jjtGetChild(1).value(context);  if (left == null || right == null) {    rsvc.error((left == null ? "Left" : "Right") + " side (" + jjtGetChild((left == null ? 0 : 1)).literal()+ ") of multiplication operation has null value."+ " Operation not possible. "+ context.getCurrentTemplateName()+ " [line "+ getLine()+ ", column "+ getColumn()+ "]");    return null;  }  if (!(left instanceof Integer) || !(right instanceof Integer)) {    rsvc.error((!(left instanceof Integer) ? "Left" : "Right") + " side of multiplication operation is not a valid type. " + "Currently only integers (1,2,3...) and Integer type is supported. "+ context.getCurrentTemplateName()+ " [line "+ getLine()+ ", column "+ getColumn()+ "]");    return null;  }  return new Integer(((Integer)left).intValue() * ((Integer)right).intValue());}  }
class C{  private static int[] parsePortAttribute(final String portValue) throws MalformedCookieException {  StringTokenizer st=new StringTokenizer(portValue,",");  int[] ports=new int[st.countTokens()];  try {    int i=0;    while (st.hasMoreTokens()) {      ports[i]=Integer.parseInt(st.nextToken().trim());      if (ports[i] < 0) {        throw new MalformedCookieException("Invalid Port attribute.");      }      ++i;    }  } catch (  NumberFormatException e) {    throw new MalformedCookieException("Invalid Port " + "attribute: " + e.getMessage());  }  return ports;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  if (instruction.getMnemonic().startsWith("SASX")) {    TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SASX");    translateAll(environment,instruction,"SASX",instructions);  } else {    TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SADDSUBX");    translateAll(environment,instruction,"SADDSUBX",instructions);  }}  }
class C{  public void endField(EditorState editorState,char ch){  MathSequence currentField=editorState.getCurrentField();  int currentOffset=editorState.getCurrentOffset();  if (currentField.getParent() instanceof MathArray) {    MathArray parent=(MathArray)currentField.getParent();    if (ch == parent.getFieldKey() && (parent.is1DArray() || parent.isVector())) {      int index=currentField.getParentIndex();      MathSequence field=new MathSequence();      parent.addArgument(index + 1,field);      while (currentField.size() > currentOffset) {        MathComponent component=currentField.getArgument(currentOffset);        currentField.delArgument(currentOffset);        field.addArgument(field.size(),component);      }      currentField=field;      currentOffset=0;    } else     if (ch == parent.getFieldKey() && currentOffset == currentField.size() && parent.size() > currentField.getParentIndex() + 1 && (currentField.getParentIndex() + 1) % parent.columns() != 0) {      currentField=parent.getArgument(currentField.getParentIndex() + 1);      currentOffset=0;    } else     if (ch == parent.getRowKey() && currentOffset == currentField.size() && parent.size() == currentField.getParentIndex() + 1) {      parent.addRow();      currentField=parent.getArgument(parent.size() - parent.columns());      currentOffset=0;    } else     if (ch == parent.getRowKey() && currentOffset == currentField.size() && (currentField.getParentIndex() + 1) % parent.columns() == 0) {      currentField=parent.getArgument(currentField.getParentIndex() + 1);      currentOffset=0;    } else     if ((ch == parent.getCloseKey() && parent.isArray()) || (ch == parent.getCloseKey() && parent.isMatrix()) && parent.size() == currentField.getParentIndex() + 1 && currentOffset == currentField.size()) {      currentOffset=parent.getParentIndex() + 1;      currentField=(MathSequence)parent.getParent();    }  } else   if (currentField.getParent() != null) {    MathContainer parent=currentField.getParent();    if (ch == ',' && currentOffset == currentField.size() && parent instanceof MathFunction && parent.size() > currentField.getParentIndex() + 1) {      currentField=(MathSequence)parent.getArgument(currentField.getParentIndex() + 1);      currentOffset=0;    } else     if (ch == FUNCTION_CLOSE_KEY && currentOffset == currentField.size() && parent instanceof MathFunction && parent.size() == currentField.getParentIndex() + 1) {      currentOffset=parent.getParentIndex() + 1;      currentField=(MathSequence)parent.getParent();    } else {      if (ch == ',') {        newCharacter(editorState,ch);        return;      }    }  } else {    if (ch == DELIMITER_KEY || ch == ',') {      newCharacter(editorState,ch);      return;    }  }  editorState.setCurrentField(currentField);  editorState.setCurrentOffset(currentOffset);}  }
class C{  static public XObject create(Object val){  return XObjectFactory.create(val);}  }
class C{  protected void sequence_ControlLetterEscapeSequence(ISerializationContext context,ControlLetterEscapeSequence semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,RegularExpressionPackage.Literals.CONTROL_LETTER_ESCAPE_SEQUENCE__SEQUENCE) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,RegularExpressionPackage.Literals.CONTROL_LETTER_ESCAPE_SEQUENCE__SEQUENCE));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getControlLetterEscapeSequenceAccess().getSequenceCONTROL_LETTER_ESCAPETerminalRuleCall_0(),semanticObject.getSequence());  feeder.finish();}  }
class C{  public static byte[] parseBssid2bytes(String bssid){  String bssidSplits[]=bssid.split(":");  byte[] result=new byte[bssidSplits.length];  for (int i=0; i < bssidSplits.length; i++) {    result[i]=(byte)Integer.parseInt(bssidSplits[i],16);  }  return result;}  }
class C{  protected ListenerSet(){}  }
class C{  private AdvertiseSettings buildAdvertiseSettings(){  AdvertiseSettings.Builder settingsBuilder=new AdvertiseSettings.Builder();  settingsBuilder.setAdvertiseMode(AdvertiseSettings.ADVERTISE_MODE_LOW_POWER);  settingsBuilder.setTimeout(0);  return settingsBuilder.build();}  }
class C{  public void scale(float s){  g.scale(s);}  }
class C{  private static void printSet(Set<?> printableSet,String setName){  if (printableSet.size() == 0) {    System.out.println("The Set " + setName + " is empty");  } else {    System.out.println("The Set " + setName + " contains :");    for (Iterator<?> it=printableSet.iterator(); it.hasNext(); ) {      Object elem=it.next();      System.out.println("\t" + elem.toString());    }  }}  }
class C{  private static void removeFinishCalls(ExecutionTraceImpl trace,ArrayList<Integer> removableCalls){  Collections.sort(removableCalls);  for (int i=removableCalls.size() - 1; i >= 0; i--) {    int toRemove=removableCalls.get(i);    MethodCall removed=trace.finishedCalls.remove(toRemove);    if (removed == null) {      throw new IllegalStateException("trace.finished_calls not allowed to contain null");    }  }}  }
class C{  public IllegalArgumentException(java.lang.String s){  super(s);}  }
class C{  public String canopyMaxNumCanopiesToHoldInMemoryTipText(){  return "If using canopy clustering for initialization and/or speedup " + "this is the maximum number of candidate canopies to " + "retain in main memory during training of the canopy clusterer. "+ "T2 distance and data characteristics determine how many candidate "+ "canopies are formed before periodic and final pruning are performed. There "+ "may not be enough memory available if T2 is set too low.";}  }
class C{  void zoneChanged(){  colorBlend=null;  effectBlend=null;  color=null;}  }
class C{  private static void reportScores(final Score[] a,final long minMillisLatencyToReport){  Arrays.sort(a);  System.out.println("average(ms)\tsource\tquery");  for (int i=0; i < a.length; i++) {    final Score s=a[i];    final long elapsedMillis=TimeUnit.NANOSECONDS.toMillis(s.elapsedNanos);    if (elapsedMillis >= minMillisLatencyToReport)     System.out.println(elapsedMillis + "\t" + s.query.source+ "\t"+ s.query.queryStr);  }}  }
class C{  public void finish(){  if (mAccountAuthenticatorResponse != null) {    if (mResultBundle != null) {      mAccountAuthenticatorResponse.onResult(mResultBundle);    } else {      mAccountAuthenticatorResponse.onError(AccountManager.ERROR_CODE_CANCELED,"canceled");    }    mAccountAuthenticatorResponse=null;  }  super.finish();}  }
class C{  public boolean isDirectory(){  return file != null ? file.isDirectory() : zipEntry.getName().endsWith("/");}  }
class C{  public static <T>T showDialog(WindowBasedTextGUI textGUI,String title,String description,TerminalSize listBoxSize,T... items){  ListSelectDialog<T> listSelectDialog=new ListSelectDialogBuilder<T>().setTitle(title).setDescription(description).setListBoxSize(listBoxSize).addListItems(items).build();  return listSelectDialog.showDialog(textGUI);}  }
class C{  public static Experiment read(String filename) throws Exception {  Experiment result;  if ((KOML.isPresent()) && (filename.toLowerCase().endsWith(KOML.FILE_EXTENSION))) {    result=(Experiment)KOML.read(filename);  } else   if (filename.toLowerCase().endsWith(".xml")) {    XMLExperiment xml=new XMLExperiment();    result=(Experiment)xml.read(filename);  } else {    FileInputStream fi=new FileInputStream(filename);    ObjectInputStream oi=new ObjectInputStream(new BufferedInputStream(fi));    result=(Experiment)oi.readObject();    oi.close();  }  return result;}  }
class C{  @RequestMapping(value={"","/"},method=RequestMethod.GET) @ResponseBody public RestWrapper list(@RequestParam(value="page",defaultValue="0") int startPage,@RequestParam(value="size",defaultValue="10") int pageSize,Principal principal){  RestWrapper restWrapper=null;  try {    Integer counter=workflowTypeDAO.totalRecordCount();    List<WorkflowType> workflowTypes=new ArrayList<WorkflowType>();    List<com.wipro.ats.bdre.md.dao.jpa.WorkflowType> jpaWorkflowTypes=workflowTypeDAO.list(startPage,pageSize);    for (    com.wipro.ats.bdre.md.dao.jpa.WorkflowType wfType : jpaWorkflowTypes) {      WorkflowType workflowType=new WorkflowType();      workflowType.setWorkflowId(wfType.getWorkflowId());      workflowType.setWorkflowTypeName(wfType.getWorkflowTypeName());      workflowType.setCounter(counter);      workflowTypes.add(workflowType);    }    restWrapper=new RestWrapper(workflowTypes,RestWrapper.OK);    LOGGER.info("All records listed from WorkflowType by User:" + principal.getName());  } catch (  Exception e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public static boolean isExtension(String filename,Collection<String> extensions){  if (filename == null)   return false;  if (extensions == null || extensions.isEmpty())   return indexOfExtension(filename) == -1;  String fileExt=getExtension(filename);  for (  String extension : extensions) {    if (fileExt.equals(extension))     return true;  }  return false;}  }
class C{  private void decryptBlock(byte[] src,int srcIndex,byte[] dst,int dstIndex){  int xl=BytesTo32bits(src,srcIndex);  int xr=BytesTo32bits(src,srcIndex + 4);  xl^=P[ROUNDS + 1];  for (int i=ROUNDS; i > 0; i-=2) {    xr^=F(xl) ^ P[i];    xl^=F(xr) ^ P[i - 1];  }  xr^=P[0];  Bits32ToBytes(xr,dst,dstIndex);  Bits32ToBytes(xl,dst,dstIndex + 4);}  }
class C{  protected void sequence_ExportClause_ExportDeclaration_ExportDeclarationImpl_ExportFromClause(ISerializationContext context,ExportDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private void checkIfCategoryExists(String categoryId) throws ObjectNotFoundException {  categoryId=categoryId.trim();  Category category=new Category();  category.setMarketplace(marketplace);  category.setCategoryId(categoryId);  dm.getReferenceByBusinessKey(category);}  }
class C{  public JToggleButton(Icon icon){  this(null,icon,false);}  }
class C{  public void removeComponent(Component cmp){  contentPane.removeComponent(cmp);}  }
class C{  public final long readUnsignedInt() throws IOException {  mPosition+=4;  d.readFully(w,0,4);  return ((long)(w[3]) << 24 | (w[2] & 0xff) << 16 | (w[1] & 0xff) << 8 | (w[0] & 0xff)) & 0X00000000FFFFFFFFL;}  }
class C{  public double toNumber(org.w3c.dom.Node n){  int nodeHandle=getDTMHandleFromNode(n);  DTM dtm=getDTM(nodeHandle);  XString xobj=(XString)dtm.getStringValue(nodeHandle);  return xobj.num();}  }
class C{  void addEntry(int hash,K key,V value,int bucketIndex){  createEntry(hash,key,value,bucketIndex);  Entry<K,V> eldest=header.after;  if (removeEldestEntry(eldest)) {    removeEntryForKey(eldest.key);  } else {    if (size >= threshold)     resize(2 * table.length);  }}  }
class C{  public static void checkAndSetLatLonParam(Element context,AVList params,String paramKey,String paramName,XPath xpath){  if (context == null) {    String message=Logging.getMessage("nullValue.ElementIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (params == null) {    String message=Logging.getMessage("nullValue.ParametersIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (paramKey == null) {    String message=Logging.getMessage("nullValue.ParameterKeyIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (paramName == null) {    String message=Logging.getMessage("nullValue.ParameterNameIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Object o=params.getValue(paramKey);  if (o == null) {    LatLon ll=getLatLon(context,paramName,xpath);    if (ll != null)     params.setValue(paramKey,ll);  }}  }
class C{  public void close(){}  }
class C{  private void formatFile(File file,ResultCollector rc,Properties hashCache,String basedirPath) throws MojoFailureException, MojoExecutionException {  try {    doFormatFile(file,rc,hashCache,basedirPath,false);  } catch (  IOException|MalformedTreeException|BadLocationException e) {    rc.failCount++;    getLog().warn(e);  }}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testNodeProcessing(){  FilteredLineToTokenArrayList oper=new FilteredLineToTokenArrayList();  ArrayListTestSink tokenSink=new ArrayListTestSink();  ArrayListTestSink stokenSink=new ArrayListTestSink();  oper.setSplitBy(";");  oper.setSplitTokenBy(",");  oper.tokens.setSink(tokenSink);  oper.splittokens.setSink(stokenSink);  String[] filters=new String[2];  filters[0]="a";  filters[1]="c";  oper.setFilterBy(filters);  oper.beginWindow(0);  String input1="a,2,3;b,1,2;c,4,5,6";  String input2="d";  String input3="";  int numTuples=1000;  for (int i=0; i < numTuples; i++) {    oper.data.process(input1);    oper.data.process(input2);    oper.data.process(input3);  }  oper.endWindow();  Assert.assertEquals("number emitted tuples",4,tokenSink.map.size());  Assert.assertEquals("number emitted tuples",2,stokenSink.map.size());  Assert.assertEquals("number emitted tuples",numTuples,tokenSink.getCount("a,2,3"));  Assert.assertEquals("number emitted tuples",numTuples,tokenSink.getCount("b,1,2"));  Assert.assertEquals("number emitted tuples",numTuples,tokenSink.getCount("c,4,5,6"));  Assert.assertEquals("number emitted tuples",numTuples,tokenSink.getCount("d"));  HashMap<Object,Object> smap=stokenSink.map;  for (  Map.Entry<Object,Object> e : smap.entrySet()) {    HashMap<String,ArrayList<String>> item=(HashMap<String,ArrayList<String>>)e.getKey();    for (    Map.Entry<String,ArrayList<String>> l : item.entrySet()) {      String key=l.getKey();      ArrayList<String> list=l.getValue();      Assert.assertTrue(!key.equals("b"));      Assert.assertTrue(!key.equals("d"));      if (key.equals("a")) {        Assert.assertEquals("number emitted values for \"a\"",2,list.size());        Assert.assertEquals("first value for \"a\"","2",list.get(0));        Assert.assertEquals("second value for \"a\"","3",list.get(1));      } else       if (key.equals("c")) {        Assert.assertEquals("number emitted values for \"c\"",3,list.size());        Assert.assertEquals("first value for \"c\"","4",list.get(0));        Assert.assertEquals("second value for \"c\"","5",list.get(1));        Assert.assertEquals("second value for \"c\"","6",list.get(2));      }    }  }}  }
class C{  public static Color hexadecimalToColor(final Display display,final String hexadecimal){  return new Color(display,hexadecimalToRGB(hexadecimal));}  }
class C{  public void sortList(Context context) throws JSONException {  ensureOrderer(context);  final Map<String,Integer> order=mOrderer.getOrder();  if (order != null) {    Collections.sort(mPlaylists,new PlaylistSort(order));  }}  }
class C{  public static Function asFunction(Resource resource){  return resource.as(Function.class);}  }
class C{  public void update(long timestamp){  if (!locked) {    buffer.writeLong(35,timestamp);    this.updated=timestamp;  }}  }
class C{  public int[] readIntArray(){  try {    DataInput dis;    if (bigEndian) {      dis=new DataInputStream(stream);    } else {      dis=new LEDataInputStream(stream);    }    Vector<Integer> intV=new Vector<Integer>();    try {      while (true) {        int i=dis.readInt();        intV.add(new Integer(i));      }    } catch (    EOFException eof) {      stream.close();    }    int[] array=new int[intV.size()];    for (int i=0; i < array.length; i++) {      array[i]=((Integer)intV.get(i)).intValue();    }    return array;  } catch (  IOException e) {    throw new IllegalArgumentException("InputStream is unreadable : " + e.toString());  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.AFTER_EVENT___TIMER_1:    setTimer_1(TIMER_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public boolean isTraining(){  return this.instanceContent.isTraining();}  }
class C{  private static boolean isEmpty(String[] fqs){  if (fqs == null || fqs.length == 0) {    return true;  }  for (  String fq : fqs) {    if (!StringUtils.isEmpty(fq) && fq.startsWith(ChronixQueryParams.FUNCTION)) {      return false;    }  }  return true;}  }
class C{  public void initializeResultsMetadataFromCache(String sql,CachedResultSetMetaData cachedMetaData,ResultSetInternalMethods resultSet) throws SQLException {  if (cachedMetaData == null) {    cachedMetaData=new CachedResultSetMetaData();    resultSet.buildIndexMapping();    resultSet.initializeWithMetadata();    if (resultSet instanceof UpdatableResultSet) {      ((UpdatableResultSet)resultSet).checkUpdatability();    }    resultSet.populateCachedMetaData(cachedMetaData);    this.resultSetMetadataCache.put(sql,cachedMetaData);  } else {    resultSet.initializeFromCachedMetaData(cachedMetaData);    resultSet.initializeWithMetadata();    if (resultSet instanceof UpdatableResultSet) {      ((UpdatableResultSet)resultSet).checkUpdatability();    }  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public BusinessObjectDefinitionDescriptiveInformationUpdateRequest createBusinessObjectDefinitionDescriptiveInformationUpdateRequest(String businessObjectDefinitionDescription,String displayName){  BusinessObjectDefinitionDescriptiveInformationUpdateRequest request=new BusinessObjectDefinitionDescriptiveInformationUpdateRequest();  request.setDescription(businessObjectDefinitionDescription);  request.setDisplayName(displayName);  return request;}  }
class C{  public static void main(String[] argv){  runFilter(new StringToWordVector(),argv);}  }
class C{  public DateConverter(final String defaultEraFormat,final String defaultFormat,final String[] acceptableFormats,final Locale locale,final TimeZone timeZone,final boolean lenient){  if (defaultEraFormat != null) {    this.defaultEraFormat=new ThreadSafeSimpleDateFormat(defaultEraFormat,timeZone,locale,4,20,lenient);  } else {    this.defaultEraFormat=null;  }  this.defaultFormat=new ThreadSafeSimpleDateFormat(defaultFormat,timeZone,locale,4,20,lenient);  this.acceptableFormats=acceptableFormats != null ? new ThreadSafeSimpleDateFormat[acceptableFormats.length] : new ThreadSafeSimpleDateFormat[0];  for (int i=0; i < this.acceptableFormats.length; i++) {    this.acceptableFormats[i]=new ThreadSafeSimpleDateFormat(acceptableFormats[i],timeZone,locale,1,20,lenient);  }}  }
class C{  public void stop(long tMillis){  if (mRingRadius.isActive()) {    mRingRadius.stop();  }  mFocusState=FocusState.STATE_HARD_STOP;  mHardExitStartMillis=computeExitStartTimeMs(tMillis,mHardExitDurationMillis);}  }
class C{  protected Textifier createTextifier(){  return new Textifier();}  }
class C{  private static boolean matches(Pattern pattern,String formattedStackTrace){  Matcher matcher=pattern.matcher(formattedStackTrace);  return matcher.matches();}  }
class C{  public static DBIDVar randomSample(DBIDs ids,Random random){  ArrayDBIDs aids=DBIDUtil.ensureArray(ids);  DBIDVar v=DBIDUtil.newVar();  aids.assignVar(random.nextInt(aids.size()),v);  return v;}  }
class C{  @Override public void dispose(){  if (mSendDelivery != null)   mSendDelivery.dispose();  if (mBlinkDelivery != null)   mBlinkDelivery.dispose();  if (mSender != null)   mSender.dispose();  if (mReceiver != null)   mReceiver.dispose();  if (mSendDispatcher != null)   mSendDispatcher.dispose();  if (mReceiveDispatcher != null)   mReceiveDispatcher.dispose();  HandleSelector.tryDispose();}  }
class C{  protected void extractMarkerListFromAuditParameter(SSPHandler sspHandler){  for (  Parameter parameter : sspHandler.getSSP().getAudit().getParameterSet()) {    String paramElCode=parameter.getParameterElement().getParameterElementCode();    for (    String markerCode : markerCodes) {      if (StringUtils.equalsIgnoreCase(paramElCode,markerCode)) {        String markerTab=parameter.getValue();        if (StringUtils.isNotEmpty(markerTab)) {          addMarkersToList(markerTab,markerList);        }      }    }    for (    String inverseMarkerCode : inverseMarkerCodes) {      if (StringUtils.equalsIgnoreCase(paramElCode,inverseMarkerCode)) {        String markerTab=parameter.getValue();        if (StringUtils.isNotEmpty(markerTab)) {          addMarkersToList(markerTab,inverseMarkerList);        }      }    }  }}  }
class C{  LiveSet filter(LexicalScope containingScope){  Iterator<Pair<String,LexicalScope>> it=symbols.iterator();  while (it.hasNext()) {    Pair<String,LexicalScope> s=it.next();    if (!isAncestorOf(s.b,containingScope)) {      Set<Pair<String,LexicalScope>> filtered=Sets.newLinkedHashSet(symbols);      filtered.remove(s);      while (it.hasNext()) {        s=it.next();        if (!isAncestorOf(s.b,containingScope)) {          filtered.remove(s);        }      }      return filtered.isEmpty() ? EMPTY : new LiveSet(filtered);    }  }  return this;}  }
class C{  public PromotionInfo(String sID,String sName,String sCriteria,String sScript,Boolean bIsEnabled,Boolean bAllProducts){  m_sID=sID;  m_sName=sName;  m_sCriteria=sCriteria;  m_sScript=sScript;  m_bIsEnabled=bIsEnabled;  m_bAllProducts=bAllProducts;}  }
class C{  public boolean isOutgoing(){  return !isIncoming();}  }
class C{  void collectExistingReadonlyFiles(IPath sourceStart,List sources,ArrayList noOverwrite,ArrayList overwriteReadonly,int policy){  IWorkspaceRoot workspaceRoot=ResourcesPlugin.getWorkspace().getRoot();  Iterator sourceIter=sources.iterator();  IPath sourceRootPath=null;  if (this.source != null) {    sourceRootPath=new Path(provider.getFullPath(this.source));  }  while (sourceIter.hasNext()) {    Object nextSource=sourceIter.next();    IPath sourcePath=new Path(provider.getFullPath(nextSource));    IPath newDestinationPath;    IResource newDestination;    if (sourceRootPath == null) {      newDestinationPath=sourceStart.append(provider.getLabel(nextSource));    } else {      int prefixLength=sourcePath.matchingFirstSegments(sourceRootPath);      IPath relativeSourcePath=sourcePath.removeFirstSegments(prefixLength);      newDestinationPath=this.destinationPath.append(relativeSourcePath);    }    newDestination=workspaceRoot.findMember(newDestinationPath);    if (newDestination == null) {      continue;    }    IFolder folder=getFolder(newDestination);    if (folder != null) {      if (policy != POLICY_FORCE_OVERWRITE) {        if (this.overwriteState == OVERWRITE_NONE || !queryOverwrite(newDestinationPath)) {          noOverwrite.add(folder);          continue;        }      }      if (provider.isFolder(nextSource)) {        collectExistingReadonlyFiles(newDestinationPath,provider.getChildren(nextSource),noOverwrite,overwriteReadonly,POLICY_FORCE_OVERWRITE);      }    } else {      IFile file=getFile(newDestination);      if (file != null) {        if (!queryOverwriteFile(file,policy)) {          noOverwrite.add(file.getFullPath());        } else         if (file.isReadOnly()) {          overwriteReadonly.add(file);        }      }    }  }}  }
class C{  public static Permutation newPermutation(int length){  return new Permutation(length);}  }
class C{  public JCExpression coerce(Env<AttrContext> env,JCExpression tree,Type target){  Env<AttrContext> prevEnv=this.env;  try {    this.env=env;    return coerce(tree,target);  }  finally {    this.env=prevEnv;  }}  }
class C{  public CAddressSpaceNode(final Window parent,final INaviAddressSpace addressSpace,final DefaultTreeModel model){  m_addressSpace=Preconditions.checkNotNull(addressSpace,"IE01820: Address space argument can not be null");  m_parent=Preconditions.checkNotNull(parent,"IE02332: Parent argument can not be null");  m_model=Preconditions.checkNotNull(model,"IE02333: Model argument can not be null");  m_addressSpace.addListener(m_internalSpaceListener);  m_addressSpace.getConfiguration().addListener(m_internalSpaceConfigurationListener);  createChildren();}  }
class C{  public boolean isTable(long arc){switch ((int)arc) {default :    break;}return false;}  }
class C{  @Override public void declareExtensions(ExtensionProfile extProfile){  super.declareExtensions(extProfile);  extProfile.declare(EventEntry.class,Who.getDefaultDescription());}  }
class C{  public void fatalError(SAXParseException e) throws SAXException {  if (errorHandler != null) {    errorHandler.fatalError(e);  }}  }
class C{  public Coord scale(int zoomLevel){  int divider=(1 << zoomLevel);  double longitude=(1.0 * projection().extent().longitudeDifference()) / divider / tileSize().getWidth();  double latitude=(1.0 * projection().extent().latitudeDifference()) / divider / tileSize().getHeight();  return new Coord(latitude,longitude,false);}  }
class C{  void continuePendingRequestsIfPossible(MultiplePermissionsListener listener,Thread thread){  if (!pendingPermissions.isEmpty()) {    this.listener=new MultiplePermissionListenerThreadDecorator(listener,thread);    if (!rationaleAccepted.get()) {      onActivityReady(activity);    }  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:11.625 -0500",hash_original_method="D61A5D8B8E38C1530E1AB8F6DB368DAC",hash_generated_method="4285F17E6EE9ADBD6970C3F9D9BCE520") @Override public String toString(){  return " at character " + pos + " of "+ in;}  }
class C{  public static Short[] nullToEmpty(final Short[] array){  if (array == null || array.length == 0) {    return ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;  }  return array;}  }
class C{  public T caseSingleAssociationEnd_(SingleAssociationEnd_ object){  return null;}  }
class C{  public void registerInput(String varName,JavaRDD<String> rdd,String format) throws DMLRuntimeException {  registerInput(varName,rdd.mapToPair(new ConvertStringToLongTextPair()),format,-1,-1,-1,null);}  }
class C{  private boolean isClosed(){  return out == null;}  }
class C{  public synchronized byte[] readNextPart(String username) throws JPlagException {  TransferObject obj=userToDownloadMap.get(username);  if (obj == null) {    throw new JPlagException("downloadException","No download started or download timed out!","Restart the download");  }  downloadTimeoutQueue.remove(obj);  byte[] data=obj.readNextPart();  if (obj.getRemainingBytes() != 0) {    obj.setTimeout(120);    downloadTimeoutQueue.add(obj);  } else {    userToDownloadMap.remove(username);    JPlagCentral.cancelSubmission(obj.getStruct());  }  return data;}  }
class C{  public void addArgument(AstNode arg){  assertNotNull(arg);  if (arguments == null) {    arguments=new ArrayList<AstNode>();  }  arguments.add(arg);  arg.setParent(this);}  }
class C{  boolean vsbIsVisible(boolean hsbVisible){  return (items.size() > itemsInWindow(hsbVisible));}  }
class C{  public void initRestAssured(){  super.initRestAssured();  RestAssured.requestSpecification.basePath(SERVER_ROOT);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:01.844 -0500",hash_original_method="EA803D38773CA0193E1AA7C91AAA6A50",hash_generated_method="AEB38833E430D517AABC28F6D901BEA1") @Override public String toString(){  return getClass().getName() + "[index=" + currentPosition+ ", errorIndex="+ errorIndex+ "]";}  }
class C{  public boolean containsSymbol(char[] buffer,int offset,int length){  int bucket=hash(buffer,offset,length) % fTableSize;  OUTER:   for (Entry entry=fBuckets[bucket]; entry != null; entry=entry.next) {    if (length == entry.characters.length) {      for (int i=0; i < length; i++) {        if (buffer[offset + i] != entry.characters[i]) {          continue OUTER;        }      }      return true;    }  }  return false;}  }
class C{  public static <T>Key<T> of(Type type){  return new Key<>(type);}  }
class C{  private void notifyServiceRevokedToServiceUsers(Class<?> serviceClass,BeanContextServiceProvider serviceProvider,boolean revokeCurrentServicesNow,BCSSChild bcssChild){  if (bcssChild.serviceRecords == null || bcssChild.serviceRecords.isEmpty()) {    return;  }synchronized (bcssChild.child) {    for (Iterator<ServiceRecord> it=bcssChild.serviceRecords.iterator(); it.hasNext(); ) {      ServiceRecord rec=(ServiceRecord)it.next();      if (rec.serviceClass == serviceClass && rec.provider == serviceProvider && rec.revokedListener != null && !rec.isDelegate) {        rec.revokedListener.serviceRevoked(new BeanContextServiceRevokedEvent(getBeanContextServicesPeer(),serviceClass,revokeCurrentServicesNow));        rec.revokedListener=null;      }    }  }}  }
class C{  public static void assertThrows(Class<?> throwable,CheckedRunnable runnable){  assertThrows(throwable,runnable,null);}  }
class C{  public void add(RegistrationHandle handle){  handles.add(handle);}  }
class C{  public String press(){  FacesContext context=FacesContext.getCurrentInstance();  append("press(rowIndex=" + data.getRowIndex() + ",accountId="+ accountId.getValue()+ ")");  clear();  return (null);}  }
class C{  public boolean isNull(int index){  return JSONObject.NULL.equals(opt(index));}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.sectionPaint,stream);  SerialUtilities.writePaint(this.baseSectionPaint,stream);  SerialUtilities.writePaint(this.sectionOutlinePaint,stream);  SerialUtilities.writePaint(this.baseSectionOutlinePaint,stream);  SerialUtilities.writeStroke(this.sectionOutlineStroke,stream);  SerialUtilities.writeStroke(this.baseSectionOutlineStroke,stream);  SerialUtilities.writePaint(this.shadowPaint,stream);  SerialUtilities.writePaint(this.labelPaint,stream);  SerialUtilities.writePaint(this.labelBackgroundPaint,stream);  SerialUtilities.writePaint(this.labelOutlinePaint,stream);  SerialUtilities.writeStroke(this.labelOutlineStroke,stream);  SerialUtilities.writePaint(this.labelShadowPaint,stream);  SerialUtilities.writePaint(this.labelLinkPaint,stream);  SerialUtilities.writeStroke(this.labelLinkStroke,stream);  SerialUtilities.writeShape(this.legendItemShape,stream);}  }
class C{  public static ComponentUI createUI(JComponent c){  return new ComboBoxUI();}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public MekaFileChooser(File currentDirectory){  super(currentDirectory);  initialize();}  }
class C{  static int shouldComponentDebug(JComponent component){  DebugGraphicsInfo info=info();  if (info == null) {    return 0;  } else {    Container container=(Container)component;    int debugOptions=0;    while (container != null && (container instanceof JComponent)) {      debugOptions|=info.getDebugOptions((JComponent)container);      container=container.getParent();    }    return debugOptions;  }}  }
class C{  public static int checkAck(boolean transacted,int acknowledgeMode){  if (!transacted && acknowledgeMode == Session.SESSION_TRANSACTED) {    return Session.AUTO_ACKNOWLEDGE;  }  return acknowledgeMode;}  }
class C{  @Override public boolean supportTransaction(){  return false;}  }
class C{  protected void prune(LinkedList<Integer> basisSet){  double[][] PHI_t_Array=new double[basisSet.size()][];  for (int j=0; j < basisSet.size(); j++) {    PHI_t_Array[j]=phi[basisSet.get(j)];  }  PHI_t=new Matrix(PHI_t_Array);  A=new Matrix(basisSet.size(),basisSet.size());  for (int j=0; j < basisSet.size(); j++) {    A.set(j,j,alpha[basisSet.get(j)]);  }}  }
class C{  private void copyTransformMatrix(ColorSpaceTransform src,float[] dst){  if (src != null) {    for (int r=0; r < 3; r++) {      for (int c=0; c < 3; c++) {        dst[r * 3 + c]=src.getElement(c,r).floatValue();      }    }  }}  }
class C{  public static String saveLyric(Lyric lyric){  return "";}  }
class C{  public void mouseMoved(){  if (!active) {    return;  }  GeometryOfInterest goi=getMovementInterest();  if (goi != null) {    mouseNotOver(goi.getGeometry());    setMovementInterest(null);  }}  }
class C{  private static void skipScalingList(ParsableBitArray bitArray){  for (int sizeId=0; sizeId < 4; sizeId++) {    for (int matrixId=0; matrixId < 6; matrixId+=sizeId == 3 ? 3 : 1) {      if (!bitArray.readBit()) {        bitArray.readUnsignedExpGolombCodedInt();      } else {        int coefNum=Math.min(64,1 << (4 + (sizeId << 1)));        if (sizeId > 1) {          bitArray.readSignedExpGolombCodedInt();        }        for (int i=0; i < coefNum; i++) {          bitArray.readSignedExpGolombCodedInt();        }      }    }  }}  }
class C{  public static void writeDataColumn(List<? extends Number> data,String outputPath){  File file=new File(outputPath);  File parent=file.getParentFile();  if (!parent.exists() && !parent.mkdirs()) {    throw new IllegalStateException("Couldn't create dir: " + parent);  }  try {    file.createNewFile();  } catch (  IOException e1) {    e1.printStackTrace();    System.exit(0);  }  try {    BufferedWriter writer=new BufferedWriter(new FileWriter(file));    for (    Number value : data) {      writer.write(value.toString() + "\n");    }    writer.close();  } catch (  IOException e) {    e.printStackTrace();    System.exit(0);  }}  }
class C{  public void rebind(Name name,Object obj) throws NamingException {  checkIsDestroyed();  Name parsedName=getParsedName(name);  if (parsedName.size() == 0 || parsedName.get(0).length() == 0) {    throw new InvalidNameException(LocalizedStrings.ContextImpl_NAME_CAN_NOT_BE_EMPTY.toLocalizedString());  }  String nameToBind=parsedName.get(0);  if (parsedName.size() == 1) {    ctxMaps.put(nameToBind,obj);  } else {    Object boundObject=ctxMaps.get(nameToBind);    if (boundObject instanceof Context) {      ((Context)boundObject).bind(parsedName.getSuffix(1),obj);    } else {      if (boundObject == null) {        Context sub=createSubcontext(nameToBind);        sub.bind(parsedName.getSuffix(1),obj);      } else {        throw new NotContextException(LocalizedStrings.ContextImpl_EXPECTED_CONTEXT_BUT_FOUND_0.toLocalizedString(boundObject));      }    }  }}  }
class C{  public Polygon createPolygon(CoordinateSequence shell){  return createPolygon(createLinearRing(shell));}  }
class C{  public EnsembleMTTest(String name){  super(name);}  }
class C{  private void storeMetadata() throws IOException {  long pos=0;  int position=0;  int bytesToRead=readSize;  if (raf.getLen() < readSize) {    position=0;    bytesToRead=(int)raf.getLen();  } else {    position=(int)(raf.getLen() - readSize);  }  while (true) {    raf.seek(position);    byte[] bytes=new byte[bytesToRead];    int lastIndex=0;    int totalLen=0;    while (true) {      int len=raf.read(bytes,lastIndex,bytesToRead - lastIndex);      totalLen+=len;      if (totalLen != bytesToRead) {        lastIndex=totalLen;      } else {        break;      }    }    int headerIndex=lastIndexOf(bytes,headerbytes,0,bytesToRead - 1);    if (headerIndex == -1) {      if (position == 0) {        raf.seek(0);        break;      }      bytesToRead=position;      if (bytesToRead > readSize) {        bytesToRead=readSize;      }      position-=(readSize - headerbytes.length);      if (position < 0) {        position=0;      }    } else {      raf.seek(position + headerIndex + headerbytes.length);      ByteArrayOutputStream bos=new ByteArrayOutputStream();      while (true) {        int i=raf.read();        if (i == 0) {          break;        }        bos.write(i);      }      String metadata=bos.toString();      StringTokenizer stk=new StringTokenizer(metadata,";");      while (stk.hasMoreTokens()) {        String token=stk.nextToken();        if (token.isEmpty()) {          continue;        }        int index1=token.indexOf(":");        if (index1 == -1) {          continue;        }        try {          offsetMap.put(Long.valueOf(token.substring(0,index1)),Long.valueOf(token.substring(index1 + 1)));        } catch (        Exception e) {          throw new IllegalArgumentException("Error in generating metadata",e);        }      }      break;    }  }  raf.seek(pos);}  }
class C{  public AnnotationPK addAnnotation(AppContext ctx,String projectId,Annotation annotation){  String message=annotation.getMessage();  if ((message != null) && (message.length() >= 2000)) {    throw new IllegalArgumentException("Message of the annotation must not exceed 2000 characters.");  }  AnnotationPK annotationPk=new AnnotationPK(ctx.getCustomerId(),projectId);  Annotation newAnnotation=new Annotation(annotationPk);  newAnnotation.setAuthorId(ctx.getUser().getId());  Long creationTimestamp=System.currentTimeMillis();  newAnnotation.setCreationTimestamp(creationTimestamp);  Long annotationTimestamp=annotation.getAnnotationTimestamp();  if (annotationTimestamp == null) {    newAnnotation.setAnnotationTimestamp(creationTimestamp);  } else {    newAnnotation.setAnnotationTimestamp(annotationTimestamp);  }  newAnnotation.setMessage(annotation.getMessage());  newAnnotation=AnnotationServiceBaseImpl.getInstance().store(ctx,newAnnotation);  return newAnnotation.getId();}  }
class C{  private void renderLeafNode(final CNodeNode treeNode){  final NaviNode graphNode=treeNode.getNode();  if (graphNode.isSelected() && graphNode.isVisible()) {    setForeground(SELECTED_FONT_COLOR);  } else   if (!graphNode.isVisible()) {    setForeground(INVISIBLE_FONT_COLOR);  }  setToolTipText(buildToolTip(graphNode));}  }
class C{  public void test_delete_insert_blankNodes01() throws MalformedQueryException, TokenMgrError, ParseException {  final String sparql="PREFIX foaf:  <http://xmlns.com/foaf/0.1/>\n" + "DELETE { [] foaf:givenName 'Bill' }\n" + "INSERT { ?person foaf:givenName 'William' }\n"+ "WHERE {\n"+ "  ?person foaf:givenName 'Bill'. \n"+ "  GRAPH <http://example/addresses> {\n"+ "    ?person foaf:givenName 'Bill'\n"+ "    }\n"+ "}";  try {    parseUpdate(sparql,baseURI);    fail("Expecting exception: blank nodes not allowed in DELETE template");  } catch (  MalformedQueryException ex) {  }}  }
class C{  public boolean hasActiveTasks(){  return userScheduler.hasActiveTasks() || userThreads.hasActiveNonDaemonThreads();}  }
class C{  public boolean isMarked(){  return pair.mark;}  }
class C{  Update(byte[] data){  this.data=data;  dlen=data.length;  if (dlen < 12) {    return;  }  idx=0;  isLittle=(getCARD8() == LITTLE_ENDIAN);  idx=4;  serial=getCARD32();  idx=8;  nsettings=getINT32();  updatedSettings=new HashMap();  isValid=true;}  }
class C{  @NonNull public IntroductionBuilder withSkipEnabled(@NonNull String text){  this.skipString=text;  this.skipResource=null;  return this;}  }
class C{  public static void recordSnapshotEvent(DbClient dbClient,Snapshot snap,FileShare fs,String type,String description,String extensions){  if (snap == null || fs == null) {    _log.error("Invalid Snapshot event");    return;  }  RecordableEventManager eventManager=new RecordableEventManager();  eventManager.setDbClient(dbClient);  RecordableBourneEvent event=new RecordableBourneEvent(type,fs.getTenant().getURI(),URI.create("ViPR-User"),fs.getProject().getURI(),fs.getVirtualPool(),EVENT_SERVICE_TYPE,snap.getId(),description,System.currentTimeMillis(),extensions,snap.getNativeGuid(),RecordType.Event.name(),EVENT_SERVICE_SOURCE,"","");  try {    eventManager.recordEvents(event);  } catch (  Exception ex) {    _log.error("Failed to record event. Event description: {}.",description,ex);  }}  }
class C{  @Override public Adapter createAdapter(Notifier target){  return modelSwitch.doSwitch((EObject)target);}  }
class C{  protected static int assertNonNegative(final String msg,final int v){  if (v < 0)   throw new IllegalArgumentException(msg);  return v;}  }
class C{  public static final boolean isJavaOperator(char ch){  return (ch <= '~') && (dataTable[ch] & JAVA_OPERATOR_MASK) > 0;}  }
class C{  public static void checkAndSetTimeParam(Element context,AVList params,String paramKey,String paramName,XPath xpath){  if (context == null) {    String message=Logging.getMessage("nullValue.ElementIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (params == null) {    String message=Logging.getMessage("nullValue.ParametersIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (paramKey == null) {    String message=Logging.getMessage("nullValue.ParameterKeyIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (paramName == null) {    String message=Logging.getMessage("nullValue.ParameterNameIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Object o=params.getValue(paramKey);  if (o == null) {    Long d=getTimeInMillis(context,paramName,xpath);    if (d != null)     params.setValue(paramKey,d);  }}  }
class C{  protected EvaluationStatistics doAggregate(List<EvaluationStatistics> stats){  EvaluationStatistics result;  List<String> keys;  TDoubleArrayList values;  result=new EvaluationStatistics(stats.get(0).getClassifier(),stats.get(0).getRelation(),null);  keys=EvaluationStatisticsUtils.keys(stats,false);  for (  String key : keys) {    values=new TDoubleArrayList();    for (    EvaluationStatistics stat : stats) {      if (stat.containsKey(key))       values.add(stat.get(key).doubleValue());    }    if (values.size() > 0) {      if (!m_SkipCount)       result.put(key + m_SuffixCount,values.size());      if (!m_SkipMean)       result.put(key + m_SuffixMean,Utils.mean(values.toArray()));      if (!m_SkipStdDev)       result.put(key + m_SuffixStdDev,Math.sqrt(Utils.variance(values.toArray())));    }  }  return result;}  }
class C{  public static Struct find(String strPattern,String strInput,int offset,boolean caseSensitive) throws MalformedPatternException {  Perl5Matcher matcher=new Perl5Matcher();  PatternMatcherInput input=new PatternMatcherInput(strInput);  int compileOptions=caseSensitive ? 0 : Perl5Compiler.CASE_INSENSITIVE_MASK;  compileOptions+=Perl5Compiler.SINGLELINE_MASK;  if (offset < 1)   offset=1;  Pattern pattern=getPattern(strPattern,compileOptions);  if (offset <= strInput.length())   input.setCurrentOffset(offset - 1);  if (offset <= strInput.length() && matcher.contains(input,pattern)) {    MatchResult result=matcher.getMatch();    int groupCount=result.groups();    Array posArray=new ArrayImpl();    Array lenArray=new ArrayImpl();    for (int i=0; i < groupCount; i++) {      int off=result.beginOffset(i);      posArray.appendEL(Integer.valueOf(off + 1));      lenArray.appendEL(Integer.valueOf(result.endOffset(i) - off));    }    Struct struct=new StructImpl();    struct.setEL("pos",posArray);    struct.setEL("len",lenArray);    return struct;  }  Array posArray=new ArrayImpl();  Array lenArray=new ArrayImpl();  posArray.appendEL(Constants.INTEGER_0);  lenArray.appendEL(Constants.INTEGER_0);  Struct struct=new StructImpl();  struct.setEL("pos",posArray);  struct.setEL("len",lenArray);  return struct;}  }
class C{  @NotNull public static List<IdeaPluginDescriptor> loadPluginsFromAllRepositories(@Nullable ProgressIndicator indicator) throws IOException {  List<IdeaPluginDescriptor> result=new ArrayList<IdeaPluginDescriptor>();  Set<String> addedPluginIds=new HashSet<String>();  for (  String host : getPluginHosts()) {    List<IdeaPluginDescriptor> plugins=loadPlugins(host,null,indicator);    for (    IdeaPluginDescriptor plugin : plugins) {      if (addedPluginIds.add(plugin.getPluginId().getIdString())) {        result.add(plugin);      }    }  }  return result;}  }
class C{  public Ring2DView(){  super();  stateChanged=false;}  }
class C{  protected void onFieldCustom(final Object obj,final Field field,final Bin annotation,final Object customFieldProcessor,final Object value){}  }
class C{  public boolean isValidCharacter(char aChar){  if (isLiteral()) {    return (getChar(aChar) == aChar);  }  aChar=getChar(aChar);  String filter=getValidCharacters();  if (filter != null && filter.indexOf(aChar) == -1) {    return false;  }  filter=getInvalidCharacters();  if (filter != null && filter.indexOf(aChar) != -1) {    return false;  }  return true;}  }
class C{  protected Arrays(){}  }
class C{  public Scheduler(){  super(Harness.options,"Scheduler","MMTk Harness scheduler",new String[]{"JAVA","DETERMINISTIC"},System.getProperty("mmtk.harness.scheduler","JAVA"));}  }
class C{  public void mouseEntered(MouseEvent e){  AbstractButton b=(AbstractButton)e.getSource();  ButtonModel model=b.getModel();  if (b.isRolloverEnabled() && !SwingUtilities.isLeftMouseButton(e)) {    model.setRollover(true);  }}  }
class C{  public static char highSurrogate(int c){  return (char)(((c - 0x00010000) >> 10) + 0xD800);}  }
class C{  public void rollbackMethodNull(String stepId) throws WorkflowException {  WorkflowStepCompleter.stepSucceded(stepId);}  }
class C{  private void obtainTitleColor(@StyleRes final int themeResourceId){  TypedArray typedArray=getContext().getTheme().obtainStyledAttributes(themeResourceId,new int[]{R.attr.bottomSheetTitleColor});  int color=typedArray.getColor(0,-1);  if (color != -1) {    setTitleColor(color);  }}  }
class C{  @Override public String toString(){  return type + "," + (colorR & 0xFF)+ ","+ (colorG & 0xFF)+ ","+ (colorB & 0xFF)+ ","+ (colorA & 0xFF)+ ","+ thickness+ ","+ x1+ ","+ y1+ ","+ x2+ ","+ y2+ ","+ (lastInChain ? "1" : "0");}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public double[][] confusionMatrix(){  double[][] newMatrix=new double[m_ConfusionMatrix.length][0];  for (int i=0; i < m_ConfusionMatrix.length; i++) {    newMatrix[i]=new double[m_ConfusionMatrix[i].length];    System.arraycopy(m_ConfusionMatrix[i],0,newMatrix[i],0,m_ConfusionMatrix[i].length);  }  return newMatrix;}  }
class C{  public final void blinkCaret(){  if (caretBlinks) {    blink=!blink;    painter.invalidateSelectedLines();  } else   blink=true;}  }
class C{  private void writeKML(String fileName,String[] labels,double[][][] data,int[][] clusterIndices,int[][] clusterSizes){  int[] traceOrder=sortTraces(labels);  Element traceSchema=new Element("Schema");  traceSchema.setAttribute("id","Cluster_Schema");  traceSchema.addContent(new Element("SimpleField").setAttribute("name","Label").setAttribute("type","string").addContent(new Element("displayName").addContent("Label")));  traceSchema.addContent(new Element("SimpleField").setAttribute("name","Number").setAttribute("type","double").addContent(new Element("displayName").addContent("Number")));  traceSchema.addContent(new Element("SimpleField").setAttribute("name","Year").setAttribute("type","double").addContent(new Element("displayName").addContent("Year")));  traceSchema.addContent(new Element("SimpleField").setAttribute("name","State").setAttribute("type","double").addContent(new Element("displayName").addContent("State")));  Element virusSchema=new Element("Schema");  virusSchema.setAttribute("id","Virus_Schema");  virusSchema.addContent(new Element("SimpleField").setAttribute("name","Label").setAttribute("type","string").addContent(new Element("displayName").addContent("Label")));  virusSchema.addContent(new Element("SimpleField").setAttribute("name","Year").setAttribute("type","double").addContent(new Element("displayName").addContent("Year")));  virusSchema.addContent(new Element("SimpleField").setAttribute("name","Trace").setAttribute("type","double").addContent(new Element("displayName").addContent("Trace")));  final Element traceFolderElement=new Element("Folder");  Element traceFolderNameElement=new Element("name");  traceFolderNameElement.addContent("traces");  traceFolderElement.addContent(traceFolderNameElement);  final Element clustersFolderElement=new Element("Folder");  Element clustersFolderNameElement=new Element("name");  clustersFolderNameElement.addContent("clusters");  clustersFolderElement.addContent(clustersFolderNameElement);  Element documentNameElement=new Element("name");  String documentName=fileName;  if (documentName.endsWith(".kml"))   documentName=documentName.replace(".kml","");  documentNameElement.addContent(documentName);  final Element documentElement=new Element("Document");  documentElement.addContent(documentNameElement);  documentElement.addContent(traceSchema);  documentElement.addContent(virusSchema);  documentElement.addContent(clustersFolderElement);  documentElement.addContent(traceFolderElement);  final Element rootElement=new Element("kml");  rootElement.addContent(documentElement);  Element traceElement=generateTraceElement(labels,data,traceOrder);  traceFolderElement.addContent(traceElement);  Element clustersElement=generateClusterElement(labels,data,clusterIndices,clusterSizes,traceOrder);  clustersFolderElement.addContent(clustersElement);  PrintStream resultsStream;  try {    resultsStream=new PrintStream(new File(fileName));    XMLOutputter xmlOutputter=new XMLOutputter(Format.getPrettyFormat().setTextMode(Format.TextMode.PRESERVE));    xmlOutputter.output(rootElement,resultsStream);  } catch (  IOException e) {    System.err.println("Error opening file: " + fileName);    System.exit(-1);  }}  }
class C{  private void applyDependentCoupling(SingleChannelElement target,ChannelElement cce,int index){  IndividualChannelStream ics=cce.ch[0].ics;  int offsets[]=ics.swbOffset;  float dest[]=target.coeffs;  float src[]=cce.ch[0].coeffs;  int idx=0;  if (ac.oc[1].m4ac.objectType == AOT_AAC_LTP) {    log.error(String.format("Dependent coupling is not supported together with LTP"));    return;  }  int destOffset=0;  int srcOffset=0;  for (int g=0; g < ics.numWindowGroups; g++) {    for (int i=0; i < ics.maxSfb; i++, idx++) {      if (cce.ch[0].bandType[idx] != ZERO_BT) {        final float gain=cce.coup.gain[index][idx];        for (int group=0; group < ics.groupLen[g]; group++) {          for (int k=offsets[i]; k < offsets[i + 1]; k++) {            dest[destOffset + group * 128 + k]+=gain * src[srcOffset + group * 128 + k];          }        }      }    }    destOffset+=ics.groupLen[g] * 128;    srcOffset+=ics.groupLen[g] * 128;  }}  }
class C{  public ActionErrors guardarError(HttpServletRequest request,TipoElementoDepositoException tede){  ActionErrors errores=obtenerErrores(request,true);  errores.add(ActionErrors.GLOBAL_ERROR,StrutsExceptionFormatter.getInstance().formatException(tede,request.getLocale()));  ErrorsTag.saveErrors(request,errores);  return errores;}  }
class C{  @Override public synchronized Object[] toArray(){  Object[] result=new Object[elementCount];  System.arraycopy(elementData,0,result,0,elementCount);  return result;}  }
class C{  private void createLink(final Network network,final OsmParser.OsmWay way,final OsmParser.OsmNode fromNode,final OsmParser.OsmNode toNode,final double length){  double nofLanes;  double laneCapacity;  double freespeed;  double freespeedFactor;  boolean oneway;  boolean onewayReverse=false;  boolean busOnlyLink=false;  String highway=way.tags.get(OsmTag.HIGHWAY);  String railway=way.tags.get(OsmTag.RAILWAY);  OsmConverterConfigGroup.OsmWayParams wayValues;  if (highway != null) {    wayValues=this.highwayParams.get(highway);    if (wayValues == null) {      if (way.tags.containsKey(OsmTag.PSV)) {        busOnlyLink=true;        wayValues=highwayParams.get(OsmValue.UNCLASSIFIED);      } else {        this.unknownHighways.add(highway);        return;      }    }  } else   if (railway != null) {    wayValues=this.railwayParams.get(railway);    if (wayValues == null) {      this.unknownRailways.add(railway);      return;    }  } else {    this.unknownWays.add(way.tags.values().toString());    return;  }  nofLanes=wayValues.getLanes();  laneCapacity=wayValues.getLaneCapacity();  freespeed=wayValues.getFreespeed();  freespeedFactor=wayValues.getFreespeedFactor();  oneway=wayValues.getOneway();  if ("roundabout".equals(way.tags.get(OsmTag.JUNCTION))) {    oneway=true;  }  String onewayTag=way.tags.get(OsmTag.ONEWAY);  if (onewayTag != null) {    if ("yes".equals(onewayTag)) {      oneway=true;    } else     if ("true".equals(onewayTag)) {      oneway=true;    } else     if ("1".equals(onewayTag)) {      oneway=true;    } else     if ("-1".equals(onewayTag)) {      onewayReverse=true;      oneway=false;    } else     if ("no".equals(onewayTag)) {      oneway=false;    }  }  if (highway != null) {    if (highway.equalsIgnoreCase("trunk") || highway.equalsIgnoreCase("primary") || highway.equalsIgnoreCase("secondary")) {      if (oneway && nofLanes == 1.0) {        nofLanes=2.0;      }    }  }  String maxspeedTag=way.tags.get(OsmTag.MAXSPEED);  if (maxspeedTag != null) {    try {      freespeed=Double.parseDouble(maxspeedTag) / 3.6;    } catch (    NumberFormatException e) {      boolean message=true;      if (config.getGuessFreeSpeed()) {        try {          message=false;          freespeed=Double.parseDouble(maxspeedTag.substring(0,2)) / 3.6;        } catch (        NumberFormatException e1) {          message=true;        }      }      if (!this.unknownMaxspeedTags.contains(maxspeedTag) && message) {        this.unknownMaxspeedTags.add(maxspeedTag);        log.warn("Could not parse maxspeed tag: " + e.getMessage() + " (way "+ way.id+ ") Ignoring it.");      }    }  }  String lanesTag=way.tags.get(OsmTag.LANES);  if (lanesTag != null) {    try {      double tmp=Double.parseDouble(lanesTag);      if (tmp > 0) {        nofLanes=tmp;      }    } catch (    Exception e) {      if (!this.unknownLanesTags.contains(lanesTag)) {        this.unknownLanesTags.add(lanesTag);        log.warn("Could not parse lanes tag: " + e.getMessage() + ". Ignoring it.");      }    }  }  double capacity=nofLanes * laneCapacity;  if (config.getScaleMaxSpeed()) {    freespeed=freespeed * freespeedFactor;  }  Set<String> modes=new HashSet<>();  if (!busOnlyLink && highway != null) {    modes.add(TransportMode.car);  }  if (busOnlyLink) {    modes.add("bus");    modes.add(TransportMode.pt);  }  if (railway != null && railwayParams.containsKey(railway)) {    modes.add(railway);  }  if (modes.isEmpty()) {    modes.add("unknownStreetType");  }  Set<Long> containingRelations=relationMembers.get(way.id);  if (containingRelations != null) {    for (    Long containingRelationId : containingRelations) {      OsmParser.OsmRelation rel=relations.get(containingRelationId);      String mode=rel.tags.get(OsmTag.ROUTE);      if (mode != null) {        if (mode.equals(OsmValue.TROLLEYBUS)) {          mode=OsmValue.BUS;        }        modes.add(mode);      }    }  }  Id<Node> fromId=Id.create(fromNode.id,Node.class);  Id<Node> toId=Id.create(toNode.id,Node.class);  if (network.getNodes().get(fromId) != null && network.getNodes().get(toId) != null) {    String origId=Long.toString(way.id);    if (!onewayReverse) {      Link l=network.getFactory().createLink(Id.create(this.id,Link.class),network.getNodes().get(fromId),network.getNodes().get(toId));      l.setLength(length);      l.setFreespeed(freespeed);      l.setCapacity(capacity);      l.setNumberOfLanes(nofLanes);      l.setAllowedModes(modes);      NetworkUtils.setOrigId(l,origId);      network.addLink(l);      this.id++;    }    if (!oneway) {      Link l=network.getFactory().createLink(Id.create(this.id,Link.class),network.getNodes().get(toId),network.getNodes().get(fromId));      l.setLength(length);      l.setFreespeed(freespeed);      l.setCapacity(capacity);      l.setNumberOfLanes(nofLanes);      l.setAllowedModes(modes);      NetworkUtils.setOrigId(l,origId);      network.addLink(l);      this.id++;    }  }}  }
class C{  protected void flagToRemoveFromMaintenanceQueue(NodePortTuple npt){  if (toRemoveFromMaintenanceQueue.contains(npt) == false) {    toRemoveFromMaintenanceQueue.add(npt);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public String toString(){  return "ProposedDelta(" + resource + ')';}  }
class C{  private void parseHeaderLine(HeadersSet headers,String header){  final int colonOffset=header.indexOf(':');  if (colonOffset == -1) {    return;  }  String headerName=header.substring(0,colonOffset).trim();  String headerValue=header.substring(header.indexOf(':') + 1).trim();  headers.addHeader(headerName,headerValue);}  }
class C{  @Override public boolean equals(Object object){  if (this == object) {    return true;  }  if ((null == object) || (getClass() != object.getClass())) {    return false;  }  final Team other=(Team)object;  return (id == other.id) && Objects.equals(players,other.players);}  }
class C{  protected Path constructPath(Node fromNode,Node toNode,double startTime,double arrivalTime){  ArrayList<Node> nodes=new ArrayList<>();  ArrayList<Link> links=new ArrayList<>();  nodes.add(0,toNode);  Link tmpLink=getData(toNode).getPrevLink();  if (tmpLink != null) {    while (tmpLink.getFromNode() != fromNode) {      links.add(0,tmpLink);      nodes.add(0,tmpLink.getFromNode());      tmpLink=getData(tmpLink.getFromNode()).getPrevLink();    }    links.add(0,tmpLink);    nodes.add(0,tmpLink.getFromNode());  }  DijkstraNodeData toNodeData=getData(toNode);  Path path=new Path(nodes,links,arrivalTime - startTime,toNodeData.getCost());  return path;}  }
class C{  private long createTimestamp(String monthStr) throws Exception {  SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM");  long month=sdf.parse(monthStr).getTime();  Calendar cal=Calendar.getInstance();  cal.setTimeInMillis(month);  cal.set(Calendar.HOUR_OF_DAY,0);  cal.set(Calendar.MINUTE,0);  cal.set(Calendar.SECOND,0);  cal.set(Calendar.MILLISECOND,0);  return cal.getTimeInMillis();}  }
class C{  public void addProperty(String property,Character value){  add(property,createJsonElement(value));}  }
class C{  public String pruningMethodTipText(){  return "The pruning method.";}  }
class C{  public void flush() throws IOException {  out.flush();}  }
class C{  public ReadyHandler(ImplDiscordAPI api){  super(api,false,"READY");}  }
class C{  protected int compareRulerLine(Position aPosition,IDocument document,int line){  int distance=0;  if (aPosition.getOffset() > -1 && aPosition.getLength() > -1) {    try {      int markerLine=document.getLineOfOffset(aPosition.getOffset());      if (line == markerLine) {        distance=1;      } else       if (markerLine <= line && line <= document.getLineOfOffset(aPosition.getOffset() + aPosition.getLength())) {        distance=2;      }    } catch (    BadLocationException e) {    }  }  return distance;}  }
class C{  public boolean sendEMailAttachments(int AD_User_ID,String subject,String message,Collection<File> attachments){  return sendEMailAttachments(AD_User_ID,subject,message,attachments,false);}  }
class C{  public boolean hasBatchStatus(){  return hasExtension(BatchStatus.class);}  }
class C{  public void storeMessage(DBTransaction transaction,String source,String target,String message,String messagetype) throws SQLException {  String query="INSERT INTO postman(source, target, message, messagetype) values ('[source]', '[target]', '[message]', '[messagetype]')";  logger.debug("postman is storing a message " + query);  Map<String,Object> params=new HashMap<String,Object>();  params.put("source",source);  params.put("target",target);  params.put("message",message);  params.put("messagetype",messagetype);  transaction.execute(query,params);}  }
class C{  @Override public int hashCode(){  return mainAttributes.hashCode() ^ getEntries().hashCode();}  }
class C{  @Scheduled(fixedDelay=1000) private void checkCache(){  if (lastCacheTime == null) {    return;  }  long tEnd=System.currentTimeMillis();  long tDelta=tEnd - lastCacheTime;  double elapsedSeconds=tDelta / 1000.0;  if (elapsedSeconds > 1.0 && !caching.isEmpty()) {    logger.debug("flush log cache by timeout " + elapsedSeconds);    flushCache();  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  double sum;  int[] dX;  int[] dY;  double[] weights;  int numPixelsInFilter;  boolean reflectAtBorders=true;  double centreValue;  String filterSize="3 x 3 (1)";  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  filterSize=args[2].toLowerCase().replace("\u00D7","x");  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("grey.pal");    if (filterSize.equals("3 x 3 (1)")) {      weights=new double[]{0,-1,0,-1,4,-1,0,-1,0};      dX=new int[]{-1,0,1,-1,0,1,-1,0,1};      dY=new int[]{-1,-1,-1,0,0,0,1,1,1};    } else     if (filterSize.equals("3 x 3 (2)")) {      weights=new double[]{0,-1,0,-1,5,-1,0,-1,0};      dX=new int[]{-1,0,1,-1,0,1,-1,0,1};      dY=new int[]{-1,-1,-1,0,0,0,1,1,1};    } else     if (filterSize.equals("3 x 3 (3)")) {      weights=new double[]{-1,-1,-1,-1,8,-1,-1,-1,-1};      dX=new int[]{-1,0,1,-1,0,1,-1,0,1};      dY=new int[]{-1,-1,-1,0,0,0,1,1,1};    } else     if (filterSize.equals("3 x 3 (4)")) {      weights=new double[]{1,-2,1,-2,4,-2,1,-2,1};      dX=new int[]{-1,0,1,-1,0,1,-1,0,1};      dY=new int[]{-1,-1,-1,0,0,0,1,1,1};    } else     if (filterSize.equals("5 x 5 (1)")) {      weights=new double[]{0,0,-1,0,0,0,-1,-2,-1,0,-1,-2,17,-2,-1,0,-1,-2,-1,0,0,0,-1,0,0};      dX=new int[]{-2,-1,0,1,2,-2,-1,0,1,2,-2,-1,0,1,2,-2,-1,0,1,2,-2,-1,0,1,2};      dY=new int[]{-2,-2,-2,-2,-2,-1,-1,-1,-1,-1,0,0,0,0,0,1,1,1,1,1,2,2,2,2,2};    } else {      weights=new double[]{0,0,-1,0,0,0,-1,-2,-1,0,-1,-2,16,-2,-1,0,-1,-2,-1,0,0,0,-1,0,0};      dX=new int[]{-2,-1,0,1,2,-2,-1,0,1,2,-2,-1,0,1,2,-2,-1,0,1,2,-2,-1,0,1,2};      dY=new int[]{-2,-2,-2,-2,-2,-1,-1,-1,-1,-1,0,0,0,0,0,1,1,1,1,1,2,2,2,2,2};    }    numPixelsInFilter=dX.length;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        centreValue=inputFile.getValue(row,col);        if (centreValue != noData) {          sum=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z == noData) {              z=centreValue;            }            sum+=z * weights[a];          }          outputFile.setValue(row,col,sum);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static Matrix4 calculateProjectionMatrix(int width,int height,double fx,double fy,double cx,double cy){  double near=0.1;  double far=100;  double xScale=near / fx;  double yScale=near / fy;  double xOffset=(cx - (width / 2.0)) * xScale;  double yOffset=-(cy - (height / 2.0)) * yScale;  double m[]=new double[16];  Matrix.frustumM(m,0,xScale * -width / 2.0 - xOffset,xScale * width / 2.0 - xOffset,yScale * -height / 2.0 - yOffset,yScale * height / 2.0 - yOffset,near,far);  return new Matrix4(m);}  }
class C{  private ListenableFuture<Void> indexDatabaseDtos(QualifiedName catalogName,List<DatabaseDto> dtos){  return esService.submit(null);}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public void deleteOutdatedOrIrrelevant(SecurityProfile currentProfile){  if (currentProfile == null || !currentProfile.isAutodelete())   return;  SQLiteDatabase db=getWritableDatabase();  if (db == null)   return;  Calendar reducedAge=Utils.reduceCalendar(Calendar.getInstance());  long ageThreshold=reducedAge.getTimeInMillis() - TimeUnit.DAYS.toMillis(currentProfile.getAutodeleteAge());  db.execSQL("DELETE FROM " + TABLE + " WHERE "+ COL_TRUST+ "<="+ (currentProfile.isAutodelete() ? currentProfile.getAutodeleteTrust() : 0)+ " OR ("+ COL_TIMESTAMP+ "> 0 AND "+ COL_TIMESTAMP+ "<"+ ageThreshold+ ")"+ " OR ("+ COL_EXPIRE+ "> 0 AND "+ COL_TIMESTAMP+ ">0 AND ("+ COL_EXPIRE+ "+"+ COL_TIMESTAMP+ ") <"+ System.currentTimeMillis()+ ");");}  }
class C{  public Instrumenter attachSpacingCollector(){  includeSpacing=true;  return this;}  }
class C{  public static String encode(Object object,Option... options){  StringWriter writer=new StringWriter();  encode(object,writer,options);  return writer.toString();}  }
class C{  public void reportNewConcolicExecutionTime(long concolicExecutionTimeMillis){  totalConcolicExecutionTimeMillis+=concolicExecutionTimeMillis;}  }
class C{  public double evaluateModelOnceAndRecordPrediction(double[] dist,Instance instance) throws Exception {  return m_delegate.evaluateModelOnceAndRecordPrediction(dist,instance);}  }
class C{  public Text[] fragments(){  return fragments;}  }
class C{  public TomcatSlf4jLogbackFactoryAccessor(ClassLoader cl) throws ClassNotFoundException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {  Class clazz=cl.loadClass("org.apache.juli.logging.org.slf4j.impl.StaticLoggerBinder");  Method getSingleton=MethodUtils.getAccessibleMethod(clazz,"getSingleton",new Class[0]);  Object singleton=getSingleton.invoke(null);  Method getLoggerFactory=MethodUtils.getAccessibleMethod(clazz,"getLoggerFactory",new Class[0]);  Object loggerFactory=getLoggerFactory.invoke(singleton);  Class loggerFactoryClass=cl.loadClass("org.apache.juli.logging.ch.qos.logback.classic.LoggerContext");  if (!loggerFactoryClass.isInstance(loggerFactory)) {    throw new RuntimeException("The singleton SLF4J binding was not Logback");  }  setTarget(loggerFactory);}  }
class C{  public boolean equals(Object other){  if (!(other instanceof TIntObjectHashMap)) {    return false;  }  TIntObjectHashMap that=(TIntObjectHashMap)other;  if (that.size() != this.size()) {    return false;  }  return forEachEntry(new EqProcedure<V>(that));}  }
class C{  public void resetValues(){  delegate.resetValues();}  }
class C{  protected ProtectedProperties createMetadata(Element parent) throws Exception {  ProtectedProperties result;  Properties props;  Vector<Element> list;  Element node;  Element metanode;  int i;  result=null;  metanode=null;  list=getChildTags(parent,TAG_METADATA);  if (list.size() > 0) {    metanode=list.get(0);  }  if (metanode != null) {    props=new Properties();    list=getChildTags(metanode,TAG_PROPERTY);    for (i=0; i < list.size(); i++) {      node=list.get(i);      props.setProperty(node.getAttribute(ATT_NAME),getContent(node));    }    result=new ProtectedProperties(props);  }  return result;}  }
class C{  @TargetApi(Build.VERSION_CODES.LOLLIPOP) @Override public void onScroll(AbsListView view,int firstVisibleItem,int visibleItemCount,int totalItemCount){  if (view != null && view.getChildCount() > 0 && firstVisibleItem == 0) {    int translation=view.getChildAt(0).getHeight() + view.getChildAt(0).getTop();    mFab.setTranslationY(translation > 0 ? translation : 0);    if (view.getChildAt(0).getTop() < -dpToPx(16)) {      toggleHeader(false,false);    } else {      toggleHeader(true,true);    }  } else {    toggleHeader(false,false);  }  if (isLollipop()) {    if (firstVisibleItem == 0) {      mToolbar.setElevation(0);    } else {      mToolbar.setElevation(dpToPx(4));    }  }}  }
class C{  public ViewPropertyAnimator rotationBy(float value){  animatePropertyBy(ROTATION,value);  return this;}  }
class C{  protected void paintChild(Graphics g,Rectangle alloc,int index){  listPainter.paint(g,alloc.x,alloc.y,alloc.width,alloc.height,this,index);  super.paintChild(g,alloc,index);}  }
class C{  public int indexOf(char c){  return indexOf(c,0);}  }
class C{  public static void registerCnd(Session session){  InputStream is=Thread.currentThread().getContextClassLoader().getResourceAsStream("mailbox-jcr.cnd");  try {    CndImporter.registerNodeTypes(new InputStreamReader(is),session);  } catch (  Exception e) {    throw new RuntimeException("Unable to register cnd file",e);  }}  }
class C{  public TriggerRace(String appName){  super(appName);  JButton goButton=controlPanel.getGoButton();  ActionTrigger trigger=ActionTrigger.addTrigger(goButton,animator);}  }
class C{  public void dispose(){  Container cp=getContentPane();  for (int i=0; i < cp.getComponentCount(); i++) {    cp.getComponent(i).removeMouseListener(tipListener);  }  ft.removeListeners();  super.dispose();}  }
class C{  @Override public void onTabSelected(ActionBar.Tab tab,FragmentTransaction ft){  Bundle tabHolder=(Bundle)tab.getTag();  String fragmentTag=tabHolder.getString(KEY_FRAGMENT_TAG,"");  Log.d(LOG_TAG,"## onTabSelected() FragTag=" + fragmentTag);  resetUi();  if (fragmentTag.equals(TAG_FRAGMENT_PEOPLE_ROOM_DETAILS)) {    mRoomDetailsMembersFragment=(VectorRoomDetailsMembersFragment)getSupportFragmentManager().findFragmentByTag(TAG_FRAGMENT_PEOPLE_ROOM_DETAILS);    if (null == mRoomDetailsMembersFragment) {      mRoomDetailsMembersFragment=VectorRoomDetailsMembersFragment.newInstance();      ft.replace(R.id.room_details_fragment_container,mRoomDetailsMembersFragment,TAG_FRAGMENT_PEOPLE_ROOM_DETAILS);      Log.d(LOG_TAG,"## onTabSelected() people frag replace");    } else {      ft.attach(mRoomDetailsMembersFragment);      Log.d(LOG_TAG,"## onTabSelected() people frag attach");    }    mCurrentTabIndex=PEOPLE_TAB_INDEX;    if (!mIsContactsPermissionChecked) {      mIsContactsPermissionChecked=true;      CommonActivityUtils.checkPermissions(CommonActivityUtils.REQUEST_CODE_PERMISSION_MEMBER_DETAILS,this);    }  } else   if (fragmentTag.equals(TAG_FRAGMENT_SETTINGS_ROOM_DETAIL)) {    onTabSelectSettingsFragment();    CommonActivityUtils.checkPermissions(CommonActivityUtils.REQUEST_CODE_PERMISSION_ROOM_DETAILS,this);    mCurrentTabIndex=SETTINGS_TAB_INDEX;  } else   if (fragmentTag.equals(TAG_FRAGMENT_FILES_DETAILS)) {    mSearchFilesFragment=(VectorSearchRoomFilesListFragment)getSupportFragmentManager().findFragmentByTag(TAG_FRAGMENT_FILES_DETAILS);    if (null == mSearchFilesFragment) {      mSearchFilesFragment=VectorSearchRoomFilesListFragment.newInstance(mSession.getCredentials().userId,mRoomId,org.matrix.androidsdk.R.layout.fragment_matrix_message_list_fragment);      ft.replace(R.id.room_details_fragment_container,mSearchFilesFragment,TAG_FRAGMENT_FILES_DETAILS);      Log.d(LOG_TAG,"## onTabSelected() file frag replace");    } else {      ft.attach(mSearchFilesFragment);      Log.d(LOG_TAG,"## onTabSelected() file frag attach");    }    mCurrentTabIndex=FILE_TAB_INDEX;    startFileSearch();  } else {    Toast.makeText(this,"Not yet implemented",Toast.LENGTH_SHORT).show();    mCurrentTabIndex=SETTINGS_TAB_INDEX;    Log.w(LOG_TAG,"## onTabSelected() unknown tab selected!!");  }  if (null != getSupportActionBar()) {    getSupportActionBar().setTitle(this.getResources().getString(R.string.room_details_title));  }}  }
class C{  @Override public void onCompletion(int token,Cursor cursor){  if (cursor != null && cursor.getCount() != 0)   getArgs().getOps().displayCursor(cursor);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected void closingCancel(){}  }
class C{  protected void preprocessSymbol(Symbol s){  symbolPreprocessor.visit(s,null);}  }
class C{  public static <T>T decodeFromByteArray(Coder<T> coder,byte[] encodedValue) throws CoderException {  return decodeFromByteArray(coder,encodedValue,Coder.Context.OUTER);}  }
class C{  public void addPopupMenuItem(ExtensionPopupMenuItem menuItem){  getPopupMenus().add(menuItem);}  }
class C{  public BufferIterator littleEndianIterator(){  return new NioBufferIterator(address,(int)size,ByteOrder.nativeOrder() != ByteOrder.LITTLE_ENDIAN);}  }
class C{  public static String remove(String original,String toBeRemoved,boolean ignoreCase){  String thisResult=null;  if (!toBeRemoved.equals("") && toBeRemoved != null) {    thisResult=replace(original,toBeRemoved,"",ignoreCase,true);  }  return thisResult;}  }
class C{  public static TranslationModel<IString,String> load(String filename) throws IOException {  TranslationModel<IString,String> translationModel=TranslationModelFactory.<String>factory(filename);  TranslationModel<IString,String> phraseGenerator=new CombinedTranslationModel<IString,String>(Arrays.asList(translationModel,new UnknownWordPhraseGenerator<IString,String>(true)),QUERY_LIMIT);  return phraseGenerator;}  }
class C{  public boolean isRequired(){  return required;}  }
class C{  private int integerDigits(double d){  double value=Math.abs(d);  if (value < 10) {    return 1;  }  return (int)Math.log10(value) + 1;}  }
class C{  public TileCacheRed(CachableRed cr){  super(cr,null);}  }
class C{  public static boolean isRocketBlock(Block b){  return GadgetRocket.BLOCKS.contains(b);}  }
class C{  public void write(byte[] buffer,int offset,int length,boolean isEnd) throws IOException {  throw new UnsupportedOperationException(String.valueOf(this));}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.205 -0400",hash_original_method="FCDFE61653D9A35ED4066A5E6B984F4F",hash_generated_method="DFAC34CC78324E0C08DD883C57ADD511") public static boolean isFileOlder(File file,File reference){  if (reference == null) {    throw new IllegalArgumentException("No specified reference file");  }  if (!reference.exists()) {    throw new IllegalArgumentException("The reference file '" + reference + "' doesn't exist");  }  return isFileOlder(file,reference.lastModified());}  }
class C{  public static void rebootIOSDevice(){  boolean ready=false;  Process p=null;  try {    String[] reboot={"ssh","-p","2222","root@localhost","reboot"};    p=Runtime.getRuntime().exec(reboot);    while (!ready) {      System.out.println("Waiting for device to reboot...");      Thread.sleep(1000);      ready=pingIOSDevice();    }  } catch (  Exception e) {    e.printStackTrace();  }  return;}  }
class C{  public boolean isBPartnerFlatDiscount(){  Object oo=get_Value(COLUMNNAME_IsBPartnerFlatDiscount);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public FastAdapterBottomSheetDialog<Item> clear(){  mFastItemAdapter.clear();  return this;}  }
class C{  protected Date evaluateWrapper(VariableWrapper variableWrapper,Locale locale,TimeZone tz){  Date date=null;  Object variableval=resolveWrapper(variableWrapper,locale,tz);  if (variableval instanceof Date) {    date=(Date)variableval;  } else {    String s=variableval.toString();    try {      date=getDateFormat(DEFAULT_DATE_FORMAT,tz,locale).parse(s);    } catch (    ParseException exp) {      wrapAndThrow(SEVERE,exp,"Invalid expression for date");    }  }  return date;}  }
class C{  private void maybeUpdateStats(){  if (lock.tryLock()) {    try {      if ((SystemClock.elapsedRealtime() - mLastRestatTime) > RESTAT_INTERVAL_MS) {        updateStats();      }    }  finally {      lock.unlock();    }  }}  }
class C{  public static IntInterval fromTo(int from,int to){  if (from <= to) {    return IntInterval.fromToBy(from,to,1);  }  return IntInterval.fromToBy(from,to,-1);}  }
class C{  default <T2,R>Zippable<R> zip(final BiFunction<? super T,? super T2,? extends R> fn,final Publisher<? extends T2> publisher){  return ReactiveSeq.fromIterable(this).zip(fn,publisher);}  }
class C{  @Inline @Entrypoint public static void longArrayWrite(long[] ref,int index,long value){  if (NEEDS_LONG_GC_WRITE_BARRIER) {    ObjectReference array=ObjectReference.fromObject(ref);    Offset offset=Offset.fromIntZeroExtend(index << LOG_BYTES_IN_LONG);    Selected.Mutator.get().longWrite(array,array.toAddress().plus(offset),value,offset.toWord(),Word.zero(),ARRAY_ELEMENT);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  private void initializeTimeZoneInfo(TungstenProperties serviceProps) throws ReplicatorException {  logger.info("Compatibility note: Replicator time zone is set from services.properties and defaults to GMT");  logger.info("Setting time zones via wrapper.conf -Duser.timezone option is deprecated");  logger.info("Consult system documentation before making any changes to time zone-related settings");  hostTimeZone=TimeZone.getDefault();  logger.info("Storing host time zone: id=" + hostTimeZone.getID() + " display name="+ hostTimeZone.getDisplayName());  String replicatorTimeZoneID=serviceProps.getString(ReplicatorConf.TIME_ZONE,ReplicatorConf.TIME_ZONE_DEFAULT,true);  if (!"GMT".equals(replicatorTimeZoneID)) {    logger.warn("Overriding replicator default GMT time zone using services.properties; this is not recommended except for test/emergency purposes: time zone id=" + replicatorTimeZoneID);  }  replicatorTimeZone=TimeZone.getTimeZone(replicatorTimeZoneID);  TimeZone.setDefault(replicatorTimeZone);  logger.info("Setting replicator JVM time zone: id=" + replicatorTimeZone.getID() + " display name="+ replicatorTimeZone.getDisplayName());}  }
class C{  public void transferStateToParent(){  if (parent == null) {    throw new IllegalStateException("This method may only be called on contexts that have a parent.");  }  parent.cfg.setNumberOfNodes(this.cfg.numberOfNodes());  if (this.generatedExceptionHandlers) {    parent.generatedExceptionHandlers=true;  }  if (this.allocFrame) {    parent.allocFrame=true;  }}  }
class C{  private Set<URI> processUnManagedSnapshots(StorageVolume driverVolume,UnManagedVolume unManagedParentVolume,com.emc.storageos.db.client.model.StorageSystem storageSystem,com.emc.storageos.db.client.model.StoragePool storagePool,List<UnManagedVolume> unManagedVolumesToCreate,List<UnManagedVolume> unManagedVolumesToUpdate,Set<URI> allCurrentUnManagedCgURIs,Map<String,UnManagedConsistencyGroup> unManagedCGToUpdateMap,Map<String,URI> unManagedVolumeNativeIdToUriMap,Map<String,List<HostExportInfo>> hostToUnManagedVolumeExportInfoMap,BlockStorageDriver driver,DbClient dbClient) throws Exception {  log.info("Processing snapshots for volume {} ",unManagedParentVolume.getNativeGuid());  Set<URI> snapshotUris=new HashSet<>();  List<VolumeSnapshot> driverSnapshots=driver.getVolumeSnapshots(driverVolume);  if (driverSnapshots == null || driverSnapshots.isEmpty()) {    log.info("There are no snapshots for volume {} ",unManagedParentVolume.getNativeGuid());  } else {    log.info("Snapshots for unManaged volume {}:" + Joiner.on("\t").join(driverSnapshots),unManagedParentVolume.getNativeGuid());    StringSet unManagedSnaps=new StringSet();    for (    VolumeSnapshot driverSnapshot : driverSnapshots) {      String managedSnapNativeGuid=NativeGUIDGenerator.generateNativeGuidForVolumeOrBlockSnapShot(storageSystem.getNativeGuid(),driverSnapshot.getNativeId());      BlockSnapshot systemSnap=DiscoveryUtils.checkBlockSnapshotExistsInDB(dbClient,managedSnapNativeGuid);      if (null != systemSnap) {        log.info("Skipping snapshot {} as it is already managed by the system.",managedSnapNativeGuid);        continue;      }      String unManagedSnapNatvieGuid=NativeGUIDGenerator.generateNativeGuidForPreExistingVolume(storageSystem.getNativeGuid(),driverSnapshot.getNativeId());      UnManagedVolume unManagedSnap=createUnManagedSnapshot(driverSnapshot,unManagedParentVolume,storageSystem,storagePool,unManagedVolumesToCreate,unManagedVolumesToUpdate,dbClient);      snapshotUris.add(unManagedSnap.getId());      unManagedSnaps.add(unManagedSnapNatvieGuid);      String isParentVolumeInCG=unManagedParentVolume.getVolumeCharacterstics().get(UnManagedVolume.SupportedVolumeCharacterstics.IS_VOLUME_ADDED_TO_CONSISTENCYGROUP.toString());      if (isParentVolumeInCG.equals(Boolean.TRUE.toString())) {        addObjectToUnManagedConsistencyGroup(storageSystem,driverVolume.getConsistencyGroup(),unManagedSnap,allCurrentUnManagedCgURIs,unManagedCGToUpdateMap,driver,dbClient);      }      unManagedVolumeNativeIdToUriMap.put(driverSnapshot.getNativeId(),unManagedSnap.getId());      getSnapshotExportInfo(driver,driverSnapshot,hostToUnManagedVolumeExportInfoMap);    }    if (!unManagedSnaps.isEmpty()) {      unManagedParentVolume.getVolumeCharacterstics().put(UnManagedVolume.SupportedVolumeCharacterstics.HAS_REPLICAS.toString(),TRUE);      StringSetMap unManagedVolumeInformation=unManagedParentVolume.getVolumeInformation();      log.info("New unManaged snaps for unManaged volume {}:" + Joiner.on("\t").join(unManagedSnaps),unManagedParentVolume.getNativeGuid());      if (unManagedVolumeInformation.containsKey(UnManagedVolume.SupportedVolumeInformation.SNAPSHOTS.toString())) {        log.info("Old unManaged snaps for unManaged volume {}:" + Joiner.on("\t").join(unManagedVolumeInformation.get(UnManagedVolume.SupportedVolumeInformation.SNAPSHOTS.toString())),unManagedParentVolume.getNativeGuid());        unManagedParentVolume.putVolumeInfo(UnManagedVolume.SupportedVolumeInformation.SNAPSHOTS.toString(),unManagedSnaps);        log.info("Replaced snaps :" + Joiner.on("\t").join(unManagedVolumeInformation.get(UnManagedVolume.SupportedVolumeInformation.SNAPSHOTS.toString())));      } else {        unManagedParentVolume.putVolumeInfo(UnManagedVolume.SupportedVolumeInformation.SNAPSHOTS.toString(),unManagedSnaps);      }    } else {      log.info("All snapshots for volume {} are already managed.",unManagedParentVolume.getNativeGuid());    }  }  return snapshotUris;}  }
class C{  @Override protected void writeMetadata(final ObjectOutput out) throws IOException {  super.writeMetadata(out);  out.writeBoolean(readOnly);  out.writeByte((byte)scaleOutTermIdBitsToReverse);}  }
class C{  @Override public boolean onScale(ScaleGestureDetector detector){  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:21.767 -0500",hash_original_method="5579597B1129E64225215E4123F94CC0",hash_generated_method="C5447136828C243E028DB5BE4DE9556C") public SSLSessionCache(Context context){  File dir=context.getDir("sslcache",Context.MODE_PRIVATE);  SSLClientSessionCache cache=null;  try {    cache=FileClientSessionCache.usingDirectory(dir);  } catch (  IOException e) {    Log.w(TAG,"Unable to create SSL session cache in " + dir,e);  }  mSessionCache=cache;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  boolean state;  Attr attribute;  Attr newAttribute;  doc=(Document)load("staff",false);  element=doc.createElementNS("http://www.w3.org/DOM","address");  attribute=doc.createAttributeNS("http://www.w3.org/DOM","domestic");  newAttribute=element.setAttributeNode(attribute);  state=element.hasAttributeNS("http://www.w3.org/DOM","domestic");  assertTrue("hasDomesticAttr",state);}  }
class C{  public RhythmOverlay(int initialCapacity){  super(initialCapacity);}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public CustomConfigRestRep createCustomConfig(CustomConfigCreateParam createParam){  String configType=createParam.getConfigType();  String theVal=createParam.getValue();  ArgValidator.checkFieldNotEmpty(configType,CONFIG_TYPE);  ArgValidator.checkFieldNotEmpty(theVal,VALUE);  ScopeParam scopeParam=createParam.getScope();  ArgValidator.checkFieldNotNull(scopeParam,SCOPE);  StringMap scopeMap=new StringMap();  scopeMap.put(scopeParam.getType(),scopeParam.getValue());  customConfigHandler.validate(configType,scopeMap,theVal,true);  String label=CustomConfigHandler.constructConfigName(configType,scopeMap);  CustomConfig config=new CustomConfig();  config.setId(URIUtil.createId(CustomConfig.class));  config.setConfigType(configType);  config.setScope(scopeMap);  config.setLabel(label);  config.setValue(theVal);  config.setRegistered(createParam.getRegistered());  config.setSystemDefault(false);  _dbClient.createObject(config);  auditOp(OperationTypeEnum.CREATE_CONFIG,true,null,config.getId().toString(),config.getLabel(),config.getScope());  return DbObjectMapper.map(config);}  }
class C{  public boolean isChecked(){  return getBooleanProperty(BOOLEAN_PROPERTY_CHECKED);}  }
class C{  public CloseSessionAction(){  super("Close Session");}  }
class C{  public boolean ignore_types_for_sccs(){  return soot.PhaseOptions.getBoolean(options,"ignore-types-for-sccs");}  }
class C{  public boolean accept(File f){  if (f.isDirectory()) {    if (directoryPattern != null && !f.getName().matches(directoryPattern))     return false; else     return true;  }  if (filePattern != null && !f.getName().matches(filePattern))   return false;  if (sizeExceedsMaxBytes > 0 && f.length() <= sizeExceedsMaxBytes)   return false;  if (lastModifiedAfter != null && lastModifiedAfter.after(new Date(f.lastModified())))   return false;  if (lastModifiedBefore != null && lastModifiedBefore.before(new Date(f.lastModified())))   return false;  return true;}  }
class C{  @Override @Nullable public Column loadChunk(int columnX,int columnZ,Runnable runnable){  if (runnable == null) {    return getColumn(columnX,columnZ,Requirement.LIGHT);  }  asyncGetColumn(columnX,columnZ,Requirement.LIGHT,null);  return null;}  }
class C{  public static void perform(IR ir,boolean forward,boolean unfactor){  if (ir.hasReachableExceptionHandlers()) {    if (unfactor) {      ir.unfactor();    } else {      throw new OperationNotImplementedException("IR with exception handlers");    }  }  LTDominators dom=new LTDominators(ir,forward);  ir.setLtDominators(dom);  dom.analyze(ir);}  }
class C{  public void dispose(){  if (this.getTextureAtlas().contains(this.getImageSource()))   this.getTextureAtlas().remove(this.getImageSource());  this.setImage(null);}  }
class C{  public void write(ByteBuf src,int srcStart,int srcLength) throws IOException {  final int bufferPosition=checkOffset(position,srcLength);  final long destAddress=PlatformDependent.directBufferAddress(lastMapped) + bufferPosition;  if (src.hasMemoryAddress()) {    final long srcAddress=src.memoryAddress() + srcStart;    PlatformDependent.copyMemory(srcAddress,destAddress,srcLength);  } else   if (src.hasArray()) {    final byte[] srcArray=src.array();    PlatformDependent.copyMemory(srcArray,srcStart,destAddress,srcLength);  } else {    throw new IllegalArgumentException("unsupported byte buffer");  }  position+=srcLength;  if (position > this.length) {    this.length=position;  }}  }
class C{  public ServerHello(HandshakeIODataStream in,int length) throws IOException {  server_version[0]=(byte)in.read();  server_version[1]=(byte)in.read();  Streams.readFully(in,random);  int size=in.readUint8();  session_id=new byte[size];  in.read(session_id,0,size);  byte b0=(byte)in.read();  byte b1=(byte)in.read();  cipher_suite=CipherSuite.getByCode(b0,b1);  compression_method=(byte)in.read();  this.length=38 + session_id.length;  if (this.length != length) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect ServerHello");  }}  }
class C{  private Decomposition decompose(NodeRepresentation nodeRep,Decomposition decomp){  SemanticNode sn=nodeRep.semanticNode;  if (!(sn instanceof OpApplNode)) {    return null;  }  OpApplNode node=(OpApplNode)sn;  OpApplNode unprimedNode=node;  Decomposition result=new Decomposition();  if (decomp != null) {    result.renaming.identifiers=(Vector<FormalParamNode>)decomp.renaming.identifiers.clone();    result.renaming.newNames=(Vector<String>)decomp.renaming.newNames.clone();  }  if (node.getOperator().getName() == ASTConstants.OP_prime) {    if (!(node.getArgs()[0] instanceof OpApplNode)) {      return null;    }    node=(OpApplNode)node.getArgs()[0];    unprimedNode=node;    result.primed=true;  }  if ((!nodeRep.isSubexpressionName) && (node.getOperator().getKind() == ASTConstants.UserDefinedOpKind)) {    OpDefNode definition=(OpDefNode)node.getOperator();    String operatorName=definition.getName().toString();    ExprNode opDef=definition.getBody();    if (opDef instanceof SubstInNode) {      return null;    }    if (opDef instanceof OpApplNode) {      ExprOrOpArgNode[] args=node.getArgs();      for (int i=0; i < args.length; i++) {        SyntaxTreeNode stn=(SyntaxTreeNode)args[i].stn;        Location stnLoc=stn.getLocation();        if (stnLoc.beginLine() != stnLoc.endLine()) {          return null;        }      }      node=(OpApplNode)opDef;      result.moduleName=((SyntaxTreeNode)node.stn).getLocation().source();      result.definedOp=operatorName;      result.definedOpRep=nodeRep.subNodeText(unprimedNode);      result.formalParams=definition.getParams();      result.arguments=new String[result.formalParams.length];      result.argNodes=unprimedNode.getArgs();      for (int i=0; i < result.arguments.length; i++) {        result.arguments[i]=stringArrayToString(nodeRep.subNodeText(((OpApplNode)unprimedNode).getArgs()[i]).nodeText);      }    } else {      return null;    }  }  boolean isAndOrOr=false;  boolean isJunction=false;  boolean isQuantifier=false;  boolean isBoundedQuantifier=false;  if (!(node.getOperator() instanceof OpDefNode)) {    return null;  }  UniqueString opId=((OpDefNode)node.getOperator()).getName();  String opName=opId.toString();  if ((opId == ASTConstants.OP_cl) || opName.equals("\\land")) {    result.type=NodeRepresentation.AND_TYPE;    if (opId == ASTConstants.OP_cl) {      isJunction=true;    } else {      isAndOrOr=true;    }  } else   if ((opId == ASTConstants.OP_dl) || opName.equals("\\lor")) {    result.type=NodeRepresentation.OR_TYPE;    if (opId == ASTConstants.OP_dl) {      isJunction=true;    } else {      isAndOrOr=true;    }  } else   if (opName.equals("=>")) {    result.type=NodeRepresentation.IMPLIES_TYPE;  } else   if ((opId == ASTConstants.OP_bf) || (opId == ASTConstants.OP_uf)) {    result.type=NodeRepresentation.FORALL_TYPE;    isQuantifier=true;    if (opId == ASTConstants.OP_bf) {      isBoundedQuantifier=true;    }  } else   if ((opId == ASTConstants.OP_be) || (opId == ASTConstants.OP_ue)) {    result.type=NodeRepresentation.EXISTS_TYPE;    isQuantifier=true;    if (opId == ASTConstants.OP_be) {      isBoundedQuantifier=true;    }  } else   if (opId == ASTConstants.OP_sa) {    result.type=NodeRepresentation.SQSUB_TYPE;  } else {    return null;  }  if (isAndOrOr) {    processAndOrOr(result,node,"",opName);  } else   if (isJunction) {    SemanticNode[] juncts=node.getArgs();    for (int i=0; i < juncts.length; i++) {      result.children.add(juncts[i]);      result.namePath.add("!" + (i + 1));    }  } else   if (isQuantifier) {    result.children.add(node.getArgs()[0]);    String namePath="!(";    result.quantIds=new Vector<FormalParamNode>();    if (isBoundedQuantifier) {      result.quantBounds=new Vector<ExprNode>();      result.quantBoundsubexpNames=new Vector<String>();      FormalParamNode[][] quantIdsArray=node.getBdedQuantSymbolLists();      ExprNode[] quantBounds=node.getBdedQuantBounds();      for (int i=0; i < quantIdsArray.length; i++) {        if (node.isBdedQuantATuple()[i]) {          return null;        }        FormalParamNode[] quantIds=quantIdsArray[i];        for (int j=0; j < quantIds.length; j++) {          result.quantIds.add(quantIds[j]);          result.quantBounds.add(quantBounds[i]);          result.quantBoundsubexpNames.add("!" + (i + 1));          if (!((i == 0) && (j == 0))) {            namePath=namePath + ",";          }          namePath=namePath + quantIds[j].getName().toString();        }      }    } else {      FormalParamNode[] quantIds=node.getUnbdedQuantSymbols();      for (int i=0; i < quantIds.length; i++) {        result.quantIds.add(quantIds[i]);        if (i != 0) {          namePath=namePath + ",";        }        namePath=namePath + quantIds[i].getName().toString();      }    }    namePath=namePath + ")";    result.namePath.add(namePath);  } else   if ((result.type == NodeRepresentation.IMPLIES_TYPE) || (result.type == NodeRepresentation.SQSUB_TYPE)) {    result.children.add(node.getArgs()[0]);    result.namePath.add("!1");    result.children.add(node.getArgs()[1]);    result.namePath.add("!2");  }  return result;}  }
class C{  public synchronized void removeMap(MVMap<?,?> map){  checkOpen();  DataUtils.checkArgument(map != meta,"Removing the meta map is not allowed");  map.clear();  int id=map.getId();  String name=getMapName(id);  markMetaChanged();  meta.remove(MVMap.getMapKey(id));  meta.remove("name." + name);  meta.remove(MVMap.getMapRootKey(id));  maps.remove(id);}  }
class C{  public void processMessage(SIPMessage sipMessage) throws Exception {  try {    if (sipMessage.getFrom() == null || sipMessage.getTo() == null || sipMessage.getCallId() == null || sipMessage.getCSeq() == null || sipMessage.getViaHeaders() == null) {      String badmsg=sipMessage.encode();      if (sipStack.isLoggingEnabled()) {        sipStack.getStackLogger().logError("bad message " + badmsg);        sipStack.getStackLogger().logError(">>> Dropped Bad Msg");      }      return;    }    ViaList viaList=sipMessage.getViaHeaders();    if (sipMessage instanceof SIPRequest) {      Via v=(Via)viaList.getFirst();      Hop hop=sipStack.addressResolver.resolveAddress(v.getHop());      this.peerProtocol=v.getTransport();      try {        this.peerAddress=mySock.getInetAddress();        if (v.hasParameter(Via.RPORT) || !hop.getHost().equals(this.peerAddress.getHostAddress())) {          v.setParameter(Via.RECEIVED,this.peerAddress.getHostAddress());        }        v.setParameter(Via.RPORT,Integer.toString(this.peerPort));      } catch (      java.text.ParseException ex) {        InternalErrorHandler.handleException(ex);      }      if (!this.isCached) {        ((TLSMessageProcessor)this.messageProcessor).cacheMessageChannel(this);        this.isCached=true;        String key=IOHandler.makeKey(mySock.getInetAddress(),this.peerPort);        sipStack.ioHandler.putSocket(key,mySock);      }    }    long receptionTime=System.currentTimeMillis();    if (sipMessage instanceof SIPRequest) {      SIPRequest sipRequest=(SIPRequest)sipMessage;      if (sipStack.isLoggingEnabled()) {        sipStack.getStackLogger().logDebug("----Processing Message---");      }      if (this.sipStack.getStackLogger().isLoggingEnabled(ServerLogger.TRACE_MESSAGES)) {        sipStack.serverLogger.logMessage(sipMessage,this.getPeerHostPort().toString(),this.messageProcessor.getIpAddress().getHostAddress() + ":" + this.messageProcessor.getPort(),false,receptionTime);      }      if (sipStack.getMaxMessageSize() > 0 && sipRequest.getSize() + (sipRequest.getContentLength() == null ? 0 : sipRequest.getContentLength().getContentLength()) > sipStack.getMaxMessageSize()) {        SIPResponse sipResponse=sipRequest.createResponse(SIPResponse.MESSAGE_TOO_LARGE);        this.sendMessage(sipResponse,false);        throw new Exception("Message size exceeded");      }      ServerRequestInterface sipServerRequest=sipStack.newSIPServerRequest(sipRequest,this);      if (sipServerRequest != null) {        try {          sipServerRequest.processRequest(sipRequest,this);        }  finally {          if (sipServerRequest instanceof SIPTransaction) {            SIPServerTransaction sipServerTx=(SIPServerTransaction)sipServerRequest;            if (!sipServerTx.passToListener())             ((SIPTransaction)sipServerRequest).releaseSem();          }        }      } else {        SIPResponse response=sipRequest.createResponse(Response.SERVICE_UNAVAILABLE);        RetryAfter retryAfter=new RetryAfter();        try {          retryAfter.setRetryAfter((int)(10 * (Math.random())));          response.setHeader(retryAfter);          this.sendMessage(response);        } catch (        Exception e) {        }        if (sipStack.isLoggingEnabled())         sipStack.getStackLogger().logWarning("Dropping message -- could not acquire semaphore");      }    } else {      SIPResponse sipResponse=(SIPResponse)sipMessage;      try {        sipResponse.checkHeaders();      } catch (      ParseException ex) {        if (sipStack.isLoggingEnabled())         sipStack.getStackLogger().logError("Dropping Badly formatted response message >>> " + sipResponse);        return;      }      if (sipStack.getMaxMessageSize() > 0 && sipResponse.getSize() + (sipResponse.getContentLength() == null ? 0 : sipResponse.getContentLength().getContentLength()) > sipStack.getMaxMessageSize()) {        if (sipStack.isLoggingEnabled())         this.sipStack.getStackLogger().logDebug("Message size exceeded");        return;      }      ServerResponseInterface sipServerResponse=sipStack.newSIPServerResponse(sipResponse,this);      if (sipServerResponse != null) {        try {          if (sipServerResponse instanceof SIPClientTransaction && !((SIPClientTransaction)sipServerResponse).checkFromTag(sipResponse)) {            if (sipStack.isLoggingEnabled())             sipStack.getStackLogger().logError("Dropping response message with invalid tag >>> " + sipResponse);            return;          }          sipServerResponse.processResponse(sipResponse,this);        }  finally {          if (sipServerResponse instanceof SIPTransaction && !((SIPTransaction)sipServerResponse).passToListener()) {            ((SIPTransaction)sipServerResponse).releaseSem();          }        }      } else {        if (sipStack.isLoggingEnabled())         sipStack.getStackLogger().logWarning("Could not get semaphore... dropping response");      }    }  }  finally {  }}  }
class C{  public void visitFieldInsn(int opcode,String owner,String name,String desc){  if (mv != null) {    mv.visitFieldInsn(opcode,owner,name,desc);  }}  }
class C{  void zApplyAllowKeyboardEditing(){  if (parentDatePicker == null) {    return;  }  parentDatePicker.getComponentDateTextField().setEditable(allowKeyboardEditing);  Color textFieldBorderColor=(allowKeyboardEditing) ? InternalConstants.colorEditableTextFieldBorder : InternalConstants.colorNotEditableTextFieldBorder;  parentDatePicker.getComponentDateTextField().setBorder(new CompoundBorder(new MatteBorder(1,1,1,1,textFieldBorderColor),new EmptyBorder(1,3,2,2)));}  }
class C{  @Override public void messageItemDetails(String strClass,String item,String description,String[] msgOption,int[] msgNumber,int defaultOption){  HashMap<Integer,String> options=new HashMap<>(msgOption.length);  for (int i=0; i < msgOption.length; i++) {    options.put(msgNumber[i],msgOption[i]);  }  messageItemDetails(strClass,description,item,options,defaultOption);}  }
class C{  public boolean isSplitterMovable(){  return mSplitterMovable;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.STRICTNESS___ANONYMOUS_STRICTNESS_11:    return ((InternalEList<?>)getAnonymous_strictness_1_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  protected void addOrthogonalPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_State_orthogonal_feature"),getString("_UI_PropertyDescriptor_description","_UI_State_orthogonal_feature","_UI_State_type"),SGraphPackage.Literals.STATE__ORTHOGONAL,false,false,false,ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,null,null));}  }
class C{  public static void run(){  if (!Config.v().runStringAnalysis)   return;  JSAResultInjection transformer=new JSAResultInjection();  for (  SootClass clz : Scene.v().getClasses()) {    for (    SootMethod meth : clz.getMethods()) {      if (meth.isConcrete()) {        try {          transformer.transform(meth.retrieveActiveBody());        } catch (        Exception ex) {          logger.info("Exception retrieving method body {}",ex);          continue;        }      }    }  }}  }
class C{  private static boolean disjoint(Type p,Type q,Unit unit){  if (q.getDeclaration().isDisjoint(p.getDeclaration())) {    return true;  } else {    Type ps=p.resolveAliases();    Type qs=q.resolveAliases();    return emptyMeet(ps,qs,unit) || hasEmptyIntersectionOfInvariantInstantiations(ps,qs);  }}  }
class C{  public boolean hasGenerator(GenericClass clazz){  try {    cacheGenerators(clazz);  } catch (  ConstructionFailedException e) {    AtMostOnceLogger.error(logger,"Failed to check cache for " + clazz + " : "+ e.getMessage());  }  if (!generatorCache.containsKey(clazz))   return false;  return !generatorCache.get(clazz).isEmpty();}  }
class C{  public GIZAWordAlignment(String f2e_line1,String f2e_line2,String f2e_line3,String e2f_line1,String e2f_line2,String e2f_line3) throws IOException {  init(f2e_line1,f2e_line2,f2e_line3,e2f_line1,e2f_line2,e2f_line3);}  }
class C{  public ArrayList<Fact> createFacts(MAcctSchema as){  setC_Currency_ID(as.getC_Currency_ID());  final ArrayList<Fact> facts=new ArrayList<Fact>();  if (MPPCostCollector.COSTCOLLECTORTYPE_MaterialReceipt.equals(m_cc.getCostCollectorType())) {    facts.add(createMaterialReceipt(as));  } else   if (MPPCostCollector.COSTCOLLECTORTYPE_ComponentIssue.equals(m_cc.getCostCollectorType())) {    facts.add(createComponentIssue(as));  } else   if (MPPCostCollector.COSTCOLLECTORTYPE_MethodChangeVariance.equals(m_cc.getCostCollectorType())) {    facts.add(createVariance(as,ProductCost.ACCTTYPE_P_MethodChangeVariance));  } else   if (MPPCostCollector.COSTCOLLECTORTYPE_UsegeVariance.equals(m_cc.getCostCollectorType())) {    facts.add(createVariance(as,ProductCost.ACCTTYPE_P_UsageVariance));  } else   if (MPPCostCollector.COSTCOLLECTORTYPE_UsegeVariance.equals(m_cc.getCostCollectorType())) {    facts.add(createVariance(as,ProductCost.ACCTTYPE_P_UsageVariance));  } else   if (MPPCostCollector.COSTCOLLECTORTYPE_RateVariance.equals(m_cc.getCostCollectorType())) {    facts.add(createVariance(as,ProductCost.ACCTTYPE_P_RateVariance));  } else   if (MPPCostCollector.COSTCOLLECTORTYPE_MixVariance.equals(m_cc.getCostCollectorType())) {    facts.add(createVariance(as,ProductCost.ACCTTYPE_P_MixVariance));  } else   if (MPPCostCollector.COSTCOLLECTORTYPE_ActivityControl.equals(m_cc.getCostCollectorType())) {    facts.addAll(createActivityControl(as));  }  return facts;}  }
class C{  public mat4 copyNegated(mat4 matA){  for (int i=0; i < 16; ++i) {    this.m[i]=-matA.m[i];  }  return this;}  }
class C{  public JPopupMenu createNetworkContextMenu(){  contextMenu=new JPopupMenu();  contextMenu.add(actionManager.getNewNeuronAction());  contextMenu.add(new AddNeuronsAction(this));  contextMenu.add(actionManager.getNewGroupMenu());  contextMenu.add(actionManager.getNewNetworkMenu());  contextMenu.addSeparator();  for (  Action action : actionManager.getClipboardActions()) {    contextMenu.add(action);  }  contextMenu.addSeparator();  contextMenu.add(actionManager.getClearSourceNeuronsAction());  contextMenu.add(actionManager.getSetSourceNeuronsAction());  contextMenu.addSeparator();  contextMenu.add(actionManager.getShowNetworkPreferencesAction());  return contextMenu;}  }
class C{  @Override public MinguoDate dateEpochDay(long epochDay){  return new MinguoDate(LocalDate.ofEpochDay(epochDay));}  }
class C{  public void updateParametersFrom(SQLiteDatabaseConfiguration other){  if (other == null) {    throw new IllegalArgumentException("other must not be null.");  }  if (!path.equals(other.path)) {    throw new IllegalArgumentException("other configuration must refer to " + "the same database.");  }  openFlags=other.openFlags;  maxSqlCacheSize=other.maxSqlCacheSize;  locale=other.locale;  foreignKeyConstraintsEnabled=other.foreignKeyConstraintsEnabled;  customFunctions.clear();  customFunctions.addAll(other.customFunctions);}  }
class C{  public void ifICmp(final int mode,final Label label){  ifCmp(Type.INT_TYPE,mode,label);}  }
class C{  public static void write(DataSet<?> data,Writer writer) throws IOException {  write(data,writer,DEFAULT_DELIMITER);}  }
class C{  public static Pair<String,String>[] cloneHeaders(HttpServletRequest req){  List<Pair<String,String>> headers=new ArrayList<Pair<String,String>>();  Enumeration<String> e=req.getHeaderNames(), ee;  String name;  while (e.hasMoreElements()) {    name=e.nextElement();    ee=req.getHeaders(name);    while (ee.hasMoreElements()) {      headers.add(new Pair<String,String>(name,ee.nextElement().toString()));    }  }  return (Pair<String,String>[])headers.toArray(new Pair[headers.size()]);}  }
class C{  public GeoShapeMapperBuilder transformations(GeoTransformation... transformations){  return transformations(Arrays.asList(transformations));}  }
class C{  private boolean isNavigationKey(KeyEvent event){  InputMap inputMap=tree.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);  KeyStroke key=KeyStroke.getKeyStrokeForEvent(event);  return inputMap != null && inputMap.get(key) != null;}  }
class C{  public void sort(int columnIndex,boolean ascending){  sortInstances(columnIndex,ascending);}  }
class C{  public MutableDateTime(Chronology chronology){  super(chronology);}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  @Timed @ExceptionMetered @DELETE @Path("{clientId}") public Response deleteClient(@Auth AutomationClient automationClient,@PathParam("clientId") LongParam clientId){  Client client=clientDAO.getClientById(clientId.get()).orElseThrow(null);  clientDAO.deleteClient(client);  Map<String,String> extraInfo=new HashMap<>();  extraInfo.put("deprecated","true");  auditLog.recordEvent(new Event(Instant.now(),EventTag.CLIENT_CREATE,automationClient.getName(),client.getName(),extraInfo));  return Response.ok().build();}  }
class C{  public void actionPerformed(ActionEvent e){  File file=EditorUtils.getSaveFile("image","png",getComp(),false,"Save");  Dimension size=getComp().getSize();  BufferedImage image=new BufferedImage(size.width,size.height,BufferedImage.TYPE_INT_ARGB);  Graphics graphics=image.getGraphics();  getComp().paint(graphics);  try {    ImageIO.write(image,"png",file);  } catch (  IOException e1) {    throw new RuntimeException(e1);  }}  }
class C{  private static void TestFinalizer() throws Exception {  FileDescriptor fd=null;  File tempFile=new File("TestFinalizer1.txt");  tempFile.deleteOnExit();  try (Writer writer=new FileWriter(tempFile)){    for (int i=0; i < 5; i++) {      writer.write("test file content test file content");    }  }   FileInputStream fis1=new FileInputStream(tempFile);  fd=fis1.getFD();  try (FileInputStream fis2=new FileInputStream(fd)){    fis1=null;    int ret=0;    while (ret >= 0) {      System.gc();      System.out.print(".");      ret=fis2.read();    }  }   File testFinalizerFile=new File("TestFinalizer");  RandomAccessFile raf=new RandomAccessFile(testFinalizerFile,"rw");  raf.writeBytes("test file content test file content");  raf.seek(0L);  fd=raf.getFD();  try (FileInputStream fis3=new FileInputStream(fd)){    raf=null;    int ret=0;    while (ret >= 0) {      System.gc();      System.out.print(".");      ret=fis3.read();    }  }  finally {    testFinalizerFile.delete();  }}  }
class C{  public int size(){  return values.length;}  }
class C{  protected float floatSpeed(int lSpeed){  if (lSpeed == 0) {    return 0.f;  }  return ((lSpeed) / 1000.f);}  }
class C{  public void deselect(int index){  checkWidget();  this.table.deselect(index);}  }
class C{  public static void sort(short[] array,int start,int end){  if (array == null) {    throw new NullPointerException();  }  checkBounds(array.length,start,end);  sort(start,end,array);}  }
class C{  public synchronized boolean continueOperation(boolean sendEmpty,boolean inStream) throws IOException {  if (!mGetOperation) {    if (!finalBitSet) {      if (sendEmpty) {        sendReply(ResponseCodes.OBEX_HTTP_CONTINUE);        return true;      } else {        if ((mResponseSize > 3) || (mPrivateOutput.size() > 0)) {          sendReply(ResponseCodes.OBEX_HTTP_CONTINUE);          return true;        } else {          return false;        }      }    } else {      return false;    }  } else {    sendReply(ResponseCodes.OBEX_HTTP_CONTINUE);    return true;  }}  }
class C{  public void processingInstruction(String arg0,String arg1) throws SAXException {  if (m_tracer != null)   super.fireEscapingEvent(arg0,arg1);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.playback_controls);  loadViews();  setupCallbacks();  mSession=new MediaSession(this,"LeanbackSampleApp");  mSession.setCallback(new MediaSessionCallback());  mSession.setFlags(MediaSession.FLAG_HANDLES_MEDIA_BUTTONS | MediaSession.FLAG_HANDLES_TRANSPORT_CONTROLS);  mSession.setActive(true);}  }
class C{  public void add(final D data){  this.container.add(data);  if (data instanceof ISizeable) {    this.byteSize+=((ISizeable)data).byteSize();  }}  }
class C{  public boolean equals(PLVector3 value){  return (x == value.x && y == value.y && z == value.z);}  }
class C{  public VerboseFragmentationStats(){  super(Options.set,"Verbose Fragmentation Stats","Should we print verbose fragmentation statistics for the free list allocator?",false);}  }
class C{  protected void writeTableCreationStmtEnding(Table table,StringBuilder ddl){  printEndOfStatement(ddl);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  @Override public boolean check(ProcessBranch operator,String value) throws OperatorException {  if (value == null) {    throw new UndefinedParameterError(ProcessBranch.PARAMETER_CONDITION_VALUE,operator);  }  double maxFitness=Double.POSITIVE_INFINITY;  try {    maxFitness=Double.parseDouble(value);  } catch (  NumberFormatException e) {    throw new UserError(operator,207,new Object[]{value,ProcessBranch.PARAMETER_CONDITION_VALUE,e});  }  PerformanceVector performance=operator.getConditionInput(PerformanceVector.class);  return performance.getMainCriterion().getFitness() < maxFitness;}  }
class C{  public void headers(Headers headers){  if (false) {    Log.v(LOGTAG,"TestEventHandler:headers()");  }  expects[TEST_HEADERS]=false;  if (notExpecting[TEST_HEADERS]) {    expectDetails.append("Header event received but not expected");    expectDetails.append("\r\n");  }  if (expectHeaders.isEmpty()) {    return;  }  for (int i=expectHeaders.size() - 1; i >= 0; i--) {    TestHeader h=expectHeaders.get(i);    System.out.println("Expected header name: " + h.name);    String s=null;switch (h.name.hashCode()) {case -1132779846:      s=Long.toString(headers.getContentLength());    break;case 785670158:  s=headers.getContentType();break;case 2095084583:s=headers.getContentEncoding();break;case 1901043637:s=headers.getLocation();break;case -243037365:s=headers.getWwwAuthenticate();break;case -301767724:s=headers.getProxyAuthenticate();break;case -1267267485:s=headers.getContentDisposition();break;case 1397189435:s=headers.getAcceptRanges();break;case -1309235404:s=headers.getExpires();break;case -208775662:s=headers.getCacheControl();break;case 150043680:s=headers.getLastModified();break;case 3123477:s=headers.getEtag();break;case -775651618:int ct=headers.getConnectionType();if (ct == Headers.CONN_CLOSE) {s=HTTP.CONN_CLOSE;} else if (ct == Headers.CONN_KEEP_ALIVE) {s=HTTP.CONN_KEEP_ALIVE;}break;default :s=null;}if (evaluateHeader(h,s)) {expectHeaders.remove(i);}}}  }
class C{  private void updateMinMax(Instance instance){  for (int j=0; j < instance.numAttributes(); j++) {    if (Double.isNaN(m_Min[j])) {      m_Min[j]=instance.value(j);      m_Max[j]=instance.value(j);    } else {      if (instance.value(j) < m_Min[j]) {        m_Min[j]=instance.value(j);      } else {        if (instance.value(j) > m_Max[j]) {          m_Max[j]=instance.value(j);        }      }    }  }}  }
class C{  public boolean isAny(){  return m_anyTagBox.isSelected();}  }
class C{  private FibonacciHeapNode<T> min(){  return minNode;}  }
class C{  public void testBug10630() throws Exception {  Connection conn2=null;  Statement stmt2=null;  try {    conn2=getConnectionWithProps((Properties)null);    stmt2=conn2.createStatement();    conn2.close();    stmt2.getWarnings();    fail("Should've caught an exception here");  } catch (  SQLException sqlEx) {    assertEquals(SQLError.SQL_STATE_ILLEGAL_ARGUMENT,sqlEx.getSQLState());  } finally {    if (stmt2 != null) {      stmt2.close();    }    if (conn2 != null) {      conn2.close();    }  }}  }
class C{  public static void incrementBind(){  Log.d(TAG,"onBind: " + bound.incrementAndGet());  Log.d(TAG,"onRecycled: " + recycled.get());}  }
class C{  private static byte[] crypt(byte[] msg,BigInteger n,BigInteger exp) throws BadPaddingException {  BigInteger m=parseMsg(msg,n);  BigInteger c=m.modPow(exp,n);  return toByteArray(c,getByteLength(n));}  }
class C{  @Override public void onBindViewHolder(BaseViewHolder holder,int position){  int itemViewType=getItemViewType(position);  if (itemViewType != VIEWTYPE_NONE) {    Binder binder=binders.get(itemViewType);    binder.onBindCallback(holder,getItem(position),position);  }}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public void testFsConfigurationOnly() throws Exception {  primaryCfgScheme=IGFS_SCHEME;  primaryCfgAuthority=PRIMARY_AUTHORITY;  passPrimaryConfiguration=true;  primaryFsUriStr=null;  secondaryCfgScheme=IGFS_SCHEME;  secondaryCfgAuthority=SECONDARY_AUTHORITY;  passSecondaryConfiguration=true;  secondaryFsUriStr=null;  check();}  }
class C{  public static boolean overlapConvexPolygons(Polygon p1,Polygon p2,Vector2 separation){  final float[] verts1=p1.getVertices();  final float[] verts2=p2.getVertices();  return !separateConvexPolygons(verts1,verts2,separation) && !separateConvexPolygons(verts2,verts1,separation);}  }
class C{  private ITag createFileMeta(){  IoBuffer buf=IoBuffer.allocate(1024);  buf.setAutoExpand(true);  Output out=new Output(buf);  out.writeString("onMetaData");  Map<Object,Object> props=new HashMap<Object,Object>();  props.put("duration",duration / 1000.0);  if (firstVideoTag != -1) {    long old=getCurrentPosition();    setCurrentPosition(firstVideoTag);    readTagHeader();    fillBuffer(1);    byte frametype=in.get();    props.put("videocodecid",frametype & MASK_VIDEO_CODEC);    setCurrentPosition(old);  }  if (firstAudioTag != -1) {    long old=getCurrentPosition();    setCurrentPosition(firstAudioTag);    readTagHeader();    fillBuffer(1);    byte frametype=in.get();    props.put("audiocodecid",(frametype & MASK_SOUND_FORMAT) >> 4);    setCurrentPosition(old);  }  props.put("canSeekToEnd",true);  out.writeMap(props,new Serializer());  buf.flip();  ITag result=new Tag(IoConstants.TYPE_METADATA,0,buf.limit(),null,0);  result.setBody(buf);  metadataSent=true;  out=null;  return result;}  }
class C{  @Override public void deActivateRoute(){  if (!activatedRoute) {    return;  }  activatedRoute=false;  for (int k=0; k < _controlSensorList.size(); k++) {    _controlSensorList.get(k).removeListener();  }  if (mTurnoutListener != null) {    Turnout ctl=getCtlTurnout();    if (ctl != null) {      ctl.removePropertyChangeListener(mTurnoutListener);    }    mTurnoutListener=null;  }  if (mLockTurnoutListener != null) {    Turnout lockCtl=getCtlTurnout();    if (lockCtl != null) {      lockCtl.removePropertyChangeListener(mLockTurnoutListener);    }    mLockTurnoutListener=null;  }  if (!mTurnoutsAlignedSensor.isEmpty()) {    for (int k=0; k < _outputTurnoutList.size(); k++) {      _outputTurnoutList.get(k).removeListener();    }  }}  }
class C{  public void resetOffset(){  this.offsetX=0.0F;  this.offsetY=0.0F;  this.offsetZ=0.0F;}  }
class C{  public void intern(CstNat nat){  intern(nat.getName());  intern(nat.getDescriptor());}  }
class C{  public boolean isVariadicOrOptional(){  return (this.isVariadic() || this.isOptional());}  }
class C{  public static String toString(double v[]){  return toString(v,2);}  }
class C{  private void pushRun(int runBase,int runLen){  this.runBase[stackSize]=runBase;  this.runLen[stackSize]=runLen;  stackSize++;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Airing a=getAir(stack);  return new Long(a == null ? 0 : a.getSchedulingEnd());}  }
class C{  private static InetAddress[] bytesToInetAddresses(byte[][] rawAddresses,String hostName) throws UnknownHostException {  InetAddress[] returnedAddresses=new InetAddress[rawAddresses.length];  for (int i=0; i < rawAddresses.length; i++) {    returnedAddresses[i]=makeInetAddress(rawAddresses[i],hostName);  }  return returnedAddresses;}  }
class C{  public void waitAllThreadComplete(int waitInMillis){  for (int i=0; i < pool.length; i++) {    if (pool[i] != null && pool[i].isAlive()) {      try {        pool[i].join(waitInMillis);      } catch (      InterruptedException e) {      }    }  }}  }
class C{  public boolean attr_exists(String name){  return (get_attr(name) != null);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.TSTRUCT_METHOD__DEFINED_MEMBER:    if (resolve)     return getDefinedMember();  return basicGetDefinedMember();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public T color(String value){  return attr("color",value);}  }
class C{  static void accumMultiGeneric(int counts[],int startTermIndex,SortedSetDocValues si,DocIdSetIterator disi,int subIndex,OrdinalMap map) throws IOException {  final LongValues ordMap=map == null ? null : map.getGlobalOrds(subIndex);  int doc;  while ((doc=disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {    si.setDocument(doc);    int term=(int)si.nextOrd();    if (term < 0) {      if (startTermIndex == -1) {        counts[0]++;      }      continue;    }    do {      if (map != null) {        term=(int)ordMap.get(term);      }      int arrIdx=term - startTermIndex;      if (arrIdx >= 0 && arrIdx < counts.length)       counts[arrIdx]++;    } while ((term=(int)si.nextOrd()) >= 0);  }}  }
class C{  public void overlap(LineSegment seg1,LineSegment seg2){}  }
class C{  @Override public boolean pruneValues(double threshold){  boolean changed=false;  for (  Assignment condition : table.keySet()) {    changed=changed || table.get(condition).pruneValues(threshold);  }  return changed;}  }
class C{  public CollectionResult<double[]> run(Database database,Relation<O> rel){  DistanceQuery<O> dq=rel.getDistanceQuery(getDistanceFunction());  int size=rel.size();  long pairs=(size * (long)size) >> 1;  final long ssize=sampling <= 1 ? (long)Math.ceil(sampling * pairs) : (long)sampling;  if (ssize > Integer.MAX_VALUE) {    throw new AbortException("Sampling size too large.");  }  final int qsize=quantile <= 0 ? 1 : (int)Math.ceil(quantile * ssize);  DoubleMaxHeap heap=new DoubleMaxHeap(qsize);  ArrayDBIDs ids=DBIDUtil.ensureArray(rel.getDBIDs());  DBIDArrayIter i1=ids.iter(), i2=ids.iter();  Random r=rand.getSingleThreadedRandom();  FiniteProgress prog=LOG.isVerbose() ? new FiniteProgress("Sampling",(int)ssize,LOG) : null;  for (long i=0; i < ssize; i++) {    int x=r.nextInt(size - 1) + 1, y=r.nextInt(x);    double dist=dq.distance(i1.seek(x),i2.seek(y));    if (dist != dist || (nozeros && dist < Double.MIN_NORMAL)) {      continue;    }    heap.add(dist,qsize);    LOG.incrementProcessed(prog);  }  LOG.statistics(new DoubleStatistic(PREFIX + ".quantile",quantile));  LOG.statistics(new LongStatistic(PREFIX + ".samplesize",ssize));  LOG.statistics(new DoubleStatistic(PREFIX + ".distance",heap.peek()));  LOG.ensureCompleted(prog);  Collection<String> header=Arrays.asList(new String[]{"Distance"});  Collection<double[]> data=Arrays.asList(new double[][]{new double[]{heap.peek()}});  return new CollectionResult<double[]>("Distances sample","distance-sample",data,header);}  }
class C{  public static void showDrawableImage(int resId,SimpleDraweeView view){  view.setImageURI(Uri.parse("res://cn.tianyilm.client/" + resId));}  }
class C{  protected void addChild(final SimpleNodeData parent,final long childAddr,final AbstractSimpleNodeData child){  final long nentries=(child.isLeaf() ? child.getKeyCount() : ((INodeData)child).getSpannedTupleCount());  if (parent.nchildren == parent.max) {    resetNode(parent);  }  if (log.isDebugEnabled())   log.debug("setting " + (child.isLeaf() ? "leaf" : "node") + " as child("+ parent.nchildren+ ")"+ " at h="+ parent.level+ ", col="+ writtenInLevel[parent.level]+ ", addr="+ addressManager.toString(childAddr));  final int nchildren=parent.nchildren;  parent.childAddr[nchildren]=childAddr;  parent.childEntryCount[nchildren]=nentries;  parent.nentries+=nentries;  if (versionTimestamps) {    parent.minimumVersionTimestamp=Math.min(parent.minimumVersionTimestamp,child.minimumVersionTimestamp);    parent.maximumVersionTimestamp=Math.max(parent.maximumVersionTimestamp,child.maximumVersionTimestamp);  }  parent.nchildren++;  if (parent.nchildren == parent.max) {    flushNodeOrLeaf(parent);  }}  }
class C{  public List<A> appendList(List<A> x){  return x.prependList(this);}  }
class C{  public static int compare(double left,Date right){  return compare(DateTimeUtil.getInstance().toDateTime(left).getTime() / 1000,right.getTime() / 1000);}  }
class C{  public T caseReservedLiteral(ReservedLiteral object){  return null;}  }
class C{  public boolean isDrawLabels(){  return getUTMRenderingParams().isDrawLabels();}  }
class C{  public void writeBoolean(boolean bool) throws IOException {  byte b=(bool ? (byte)1 : (byte)0);  this.writeByte(b);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof MeterInterval)) {    return false;  }  MeterInterval that=(MeterInterval)obj;  if (!this.label.equals(that.label)) {    return false;  }  if (!this.range.equals(that.range)) {    return false;  }  if (!PaintUtilities.equal(this.outlinePaint,that.outlinePaint)) {    return false;  }  if (!ObjectUtilities.equal(this.outlineStroke,that.outlineStroke)) {    return false;  }  if (!PaintUtilities.equal(this.backgroundPaint,that.backgroundPaint)) {    return false;  }  return true;}  }
class C{  public static void wtf(String tag,String msg){  wtf(tag,msg,null);}  }
class C{  public boolean containsValue(Object value){  if (value == null) {    return containsNullValue();  }  Entry[] tab=table;  for (int i=0; i < tab.length; i++)   for (Entry e=tab[i]; e != null; e=e.next)   if (value.equals(e.value))   return true;  return false;}  }
class C{  public Pos3D(TileEntity tileEntity){  this(tileEntity.xCoord,tileEntity.yCoord,tileEntity.zCoord);}  }
class C{  public List<UsuarioVO> findByName(String query){  StringBuffer qual=new StringBuffer(" WHERE ").append(DBUtils.generateInTokenField(CAMPO_TIPO,ConfiguracionSistemaArchivoFactory.getConfiguracionSistemaArchivo().getConfiguracionControlAcceso().getIdsUsuarios())).append("AND ( ").append(DBUtils.generateLikeTokenField(CAMPO_NOMBRE,query,true)).append(" OR ").append(DBUtils.generateLikeTokenField(CAMPO_APELLIDOS,query,true)).append(")");  return getVOS(qual.toString(),TABLE_NAME,COL_DEFS,UsuarioVO.class);}  }
class C{  protected void flushDefinitions(Movie movie,SWFTagTypes timelineWriter,SWFTagTypes definitionWriter) throws IOException {  for (  Placement placement : placements) {    placement.flushDefinitions(movie,timelineWriter,definitionWriter);  }}  }
class C{  public String printStates(){  StringBuilder stateBuilder=new StringBuilder();  for (int i=0; i < mStateDepository.size(); i++) {    stateBuilder.append(" ").append(mStateDepository.get(i).toString()).append("->");  }  return stateBuilder.toString();}  }
class C{  public String syncGetWifiStateByName(){switch (mWifiState.get()) {case WIFI_STATE_DISABLING:    return "disabling";case WIFI_STATE_DISABLED:  return "disabled";case WIFI_STATE_ENABLING:return "enabling";case WIFI_STATE_ENABLED:return "enabled";case WIFI_STATE_UNKNOWN:return "unknown state";default :return "[invalid state]";}}  }
class C{  public Secure(){  initCipher();}  }
class C{  public void attachToMovingGrabPoint(OffsetGrabPoint gp){  gp.addGrabPoint(gpo);}  }
class C{  public DefaultRequest eventAction(String value){  setString(EVENT_ACTION,value);  return this;}  }
class C{  @Override public void connect() throws IOException {  List<Proxy> proxyList=null;  if (proxy != null) {    proxyList=new ArrayList<Proxy>(1);    proxyList.add(proxy);  } else {    ProxySelector selector=ProxySelector.getDefault();    if (selector != null) {      proxyList=selector.select(uri);    }  }  if (proxyList == null) {    currentProxy=null;    connectInternal();  } else {    ProxySelector selector=ProxySelector.getDefault();    Iterator<Proxy> iter=proxyList.iterator();    boolean connectOK=false;    String failureReason="";    while (iter.hasNext() && !connectOK) {      currentProxy=iter.next();      try {        connectInternal();        connectOK=true;      } catch (      IOException ioe) {        failureReason=ioe.getLocalizedMessage();        if (selector != null && Proxy.NO_PROXY != currentProxy) {          selector.connectFailed(uri,currentProxy.address(),ioe);        }      }    }    if (!connectOK) {      throw new IOException("Unable to connect to server: " + failureReason);    }  }}  }
class C{  public LocatorState stop(){  final LocatorLauncher launcher=getInstance();  if (isStoppable()) {    return stopInProcess();  } else   if (isPidInProcess() && launcher != null) {    return launcher.stopInProcess();  } else   if (getPid() != null) {    return stopWithPid();  } else   if (getWorkingDirectory() != null) {    return stopWithWorkingDirectory();  } else {    return new LocatorState(this,Status.NOT_RESPONDING);  }}  }
class C{  public DebuggerOptions(final boolean canDetach,final boolean canAttach,final boolean canTerminate,final boolean canMemmap,final boolean stackAvailable,final boolean canValidMemory,final boolean canHalt,final boolean haltBeforeCommunicating,final boolean canMultithread,final boolean canSoftwareBreakpoints,final int breakpointCounter,final int pageSize,final List<DebuggerException> exceptions,final boolean canBreakOnModuleLoad,final boolean canBreakOnModuleUnload,final boolean canTraceCount){  Preconditions.checkArgument(breakpointCounter > 0,"IE01036: Breakpoint counter argument must be positive");  this.canDetach=canDetach;  this.canAttach=canAttach;  this.canTerminate=canTerminate;  this.canMemmap=canMemmap;  this.stackAvailable=stackAvailable;  this.canValidMemory=canValidMemory;  this.canMultithread=canMultithread;  this.canHalt=canHalt;  this.haltBeforeCommunicating=haltBeforeCommunicating;  this.canSoftwareBreakpoints=canSoftwareBreakpoints;  this.breakpointCounter=breakpointCounter;  this.pageSize=pageSize;  this.exceptions=new ArrayList<DebuggerException>(exceptions);  this.canBreakOnModuleLoad=canBreakOnModuleLoad;  this.canBreakOnModuleUnload=canBreakOnModuleUnload;  this.canTraceCount=canTraceCount;}  }
class C{  private TreeSet(SortedMap m){  this.m=m;  keySet=m.keySet();}  }
class C{  private static NetworkRoute computeNetworkRoute(Network network,TransitRoute transitRoute){  List<Id<Link>> routeLinkIds=new ArrayList<Id<Link>>();  double startOffset=Double.MAX_VALUE;  double endOffset=Double.MIN_VALUE;  TransitRouteStop start=null;  TransitRouteStop end=null;  for (  TransitRouteStop stop : transitRoute.getStops()) {    if (stop.getArrivalOffset() < startOffset) {      startOffset=stop.getArrivalOffset();      start=stop;    }    if (stop.getArrivalOffset() > endOffset) {      endOffset=stop.getArrivalOffset();      end=stop;    }  }  Id startLinkId=start.getStopFacility().getLinkId();  Id endLinkId=end.getStopFacility().getLinkId();  routeLinkIds.add(transitRoute.getRoute().getStartLinkId());  for (  Id linkId : transitRoute.getRoute().getLinkIds())   routeLinkIds.add(linkId);  routeLinkIds.add(transitRoute.getRoute().getEndLinkId());  int startIndex=routeLinkIds.indexOf(startLinkId);  int endIndex=routeLinkIds.indexOf(endLinkId);  for (int i=0; i < routeLinkIds.size(); i++) {    if (routeLinkIds.indexOf(routeLinkIds.get(i)) < startIndex)     routeLinkIds.remove(routeLinkIds.get(i));    if (routeLinkIds.indexOf(routeLinkIds.get(i)) > endIndex)     routeLinkIds.remove(routeLinkIds.get(i));  }  return RouteUtils.createNetworkRoute(routeLinkIds,network);}  }
class C{  public static MInOut createFrom(MOrder order,Timestamp movementDate,boolean forceDelivery,boolean allAttributeInstances,Timestamp minGuaranteeDate,boolean complete,String trxName){  if (order == null)   throw new IllegalArgumentException("No Order");  if (!forceDelivery && DELIVERYRULE_CompleteLine.equals(order.getDeliveryRule())) {    return null;  }  MInOut retValue=new MInOut(order,0,movementDate);  retValue.setDocAction(complete ? DOCACTION_Complete : DOCACTION_Prepare);  MOrderLine[] oLines=order.getLines(true,"M_Product_ID");  for (int i=0; i < oLines.length; i++) {    BigDecimal qty=oLines[i].getQtyOrdered().subtract(oLines[i].getQtyDelivered());    if (qty.signum() == 0)     continue;    MStorage[] storages=null;    MProduct product=oLines[i].getProduct();    if (product != null && product.get_ID() != 0 && product.isStocked()) {      String MMPolicy=product.getMMPolicy();      storages=MStorage.getWarehouse(order.getCtx(),order.getM_Warehouse_ID(),oLines[i].getM_Product_ID(),oLines[i].getM_AttributeSetInstance_ID(),minGuaranteeDate,MClient.MMPOLICY_FiFo.equals(MMPolicy),true,0,trxName);    } else {      continue;    }    if (!forceDelivery) {      BigDecimal maxQty=Env.ZERO;      for (int ll=0; ll < storages.length; ll++)       maxQty=maxQty.add(storages[ll].getQtyOnHand());      if (DELIVERYRULE_Availability.equals(order.getDeliveryRule())) {        if (maxQty.compareTo(qty) < 0)         qty=maxQty;      } else       if (DELIVERYRULE_CompleteLine.equals(order.getDeliveryRule())) {        if (maxQty.compareTo(qty) < 0)         continue;      }    }    if (retValue.get_ID() == 0)     retValue.save(trxName);    for (int ll=0; ll < storages.length; ll++) {      BigDecimal lineQty=storages[ll].getQtyOnHand();      if (lineQty.compareTo(qty) > 0)       lineQty=qty;      MInOutLine line=new MInOutLine(retValue);      line.setOrderLine(oLines[i],storages[ll].getM_Locator_ID(),order.isSOTrx() ? lineQty : Env.ZERO);      line.setQty(lineQty);      if (oLines[i].getQtyEntered().compareTo(oLines[i].getQtyOrdered()) != 0)       line.setQtyEntered(lineQty.multiply(oLines[i].getQtyEntered()).divide(oLines[i].getQtyOrdered(),12,BigDecimal.ROUND_HALF_UP));      line.setC_Project_ID(oLines[i].getC_Project_ID());      line.save(trxName);      qty=qty.subtract(lineQty);      if (qty.signum() == 0)       break;    }  }  if (retValue.get_ID() == 0)   return null;  return retValue;}  }
class C{  public boolean checkForStringAttributes(){  int i=0;  while (i < m_Attributes.size()) {    if (attribute(i++).isString()) {      return true;    }  }  return false;}  }
class C{  private void computeStaticLoadMetrics(AccessProfile accessProfile) throws BaseCollectionException {  URI storageSystemId=accessProfile.getSystemId();  StorageSystem storageSystem=null;  try {    storageSystem=_dbClient.queryObject(StorageSystem.class,storageSystemId);    _logger.info("started computeStaticLoadMetrics for storagesystem: {}",storageSystem.getLabel());    VNXeApiClient client=getVnxUnityClient(accessProfile);    List<VNXeNasServer> nasServers=client.getNasServers();    for (    VNXeNasServer nasServer : nasServers) {      if ((nasServer.getMode() == VNXeNasServer.NasServerModeEnum.DESTINATION) || nasServer.getIsReplicationDestination()) {        _logger.debug("Found a replication destination NasServer");        continue;      }      if (nasServer.getIsSystem()) {        continue;      }      VirtualNAS virtualNAS=findvNasByNativeId(storageSystem,nasServer.getId());      if (virtualNAS != null) {        _logger.info("Process db metrics for nas server : {}",nasServer.getName());        StringMap dbMetrics=virtualNAS.getMetrics();        if (dbMetrics == null) {          dbMetrics=new StringMap();        }        StringMap tmpDbMetrics=populateDbMetrics(nasServer,client);        dbMetrics.putAll(tmpDbMetrics);        virtualNAS.setMetrics(dbMetrics);        _dbClient.updateObject(virtualNAS);      }    }  } catch (  Exception e) {    _logger.error("CollectStatisticsInformation failed. Storage system: {}",storageSystemId,e);  }}  }
class C{  private void adjustTopBottomByAspectRatio(RectF rect,RectF bounds,float aspectRatio){  rect.inset(0,(rect.height() - rect.width() / aspectRatio) / 2);  if (rect.top < bounds.top) {    rect.offset(0,bounds.top - rect.top);  }  if (rect.bottom > bounds.bottom) {    rect.offset(0,bounds.bottom - rect.bottom);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void onRegister(){}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public static Range iterateRangeBounds(XYDataset dataset){  return iterateRangeBounds(dataset,true);}  }
class C{  public static IXMLParser createDefaultXMLParser() throws ClassNotFoundException, InstantiationException, IllegalAccessException {  String className=XMLParserFactory.DEFAULT_CLASS;  try {    className=System.getProperty(XMLParserFactory.CLASS_KEY,XMLParserFactory.DEFAULT_CLASS);  } catch (  AccessControlException e) {  }  return XMLParserFactory.createXMLParser(className,new StdXMLBuilder());}  }
class C{  @Inline public static void clearMarked(ObjectReference object){  Word oldValue, newValue;  do {    oldValue=VM.objectModel.prepareAvailableBits(object);    if (VM.VERIFY_ASSERTIONS)     VM.assertions._assert(isHeaderMarked(oldValue));    newValue=oldValue.and(MARK_BIT_MASK.not());  } while (!VM.objectModel.attemptAvailableBits(object,oldValue,newValue));}  }
class C{  protected ScriptableObject createGlobalObject(Context ctx){  return new GlobalWrapper(ctx);}  }
class C{  public boolean isLong(String key){  Object val=get(key);  return val instanceof Long;}  }
class C{  public List<Integer> postorderTraversalA(TreeNode root){  List<Integer> res=new ArrayList<Integer>();  if (root == null)   return res;  Stack<TreeNode> s=new Stack<TreeNode>();  s.push(root);  while (!s.isEmpty()) {    TreeNode curNode=s.pop();    res.add(curNode.val);    if (curNode.left != null)     s.push(curNode.left);    if (curNode.right != null)     s.push(curNode.right);  }  Collections.reverse(res);  return res;}  }
class C{  public static boolean isIndependentPooledFisher(List<IndependenceTest> independenceTests,Node x,Node y,List<Node> condSet){  double alpha=independenceTests.get(0).getAlpha();  double tf=0.0;  for (  IndependenceTest independenceTest : independenceTests) {    if (missingVariable(x,y,condSet,independenceTest))     continue;    List<Node> localCondSet=new ArrayList<>();    for (    Node node : condSet) {      localCondSet.add(independenceTest.getVariable(node.getName()));    }    independenceTest.isIndependent(independenceTest.getVariable(x.getName()),independenceTest.getVariable(y.getName()),localCondSet);    tf+=-2.0 * Math.log(independenceTest.getPValue());  }  double p=1.0 - ProbUtils.chisqCdf(tf,2 * independenceTests.size());  return (p > alpha);}  }
class C{  public SimState writeToCheckpoint(File file){  FileOutputStream f=null;  try {    f=new FileOutputStream(file);    writeToCheckpoint(f);    f.close();    return this;  } catch (  Exception e) {    try {      if (f != null)       f.close();    } catch (    Exception e2) {    }    e.printStackTrace();    return null;  }}  }
class C{  public static void printError(int errorCode,Throwable cause){  if (errorCode == EC.GENERAL) {    printError(errorCode,"",cause);  } else {    printError(errorCode,cause.getMessage(),cause,true);  }}  }
class C{  private void fillFieldValues(){  tolerance.setText("" + projector.getTolerance());  if (projector.getProjectionMethod() instanceof ProjectCoordinate) {    autoFind.setSelected(((ProjectCoordinate)projector.getProjectionMethod()).isAutoFind());  }}  }
class C{  @SuppressWarnings("unchecked") @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case EipPackage.AGGREGATOR__TO_CHANNELS:    return ((InternalEList<InternalEObject>)(InternalEList<?>)getToChannels()).basicAdd(otherEnd,msgs);case EipPackage.AGGREGATOR__FROM_CHANNELS:  return ((InternalEList<InternalEObject>)(InternalEList<?>)getFromChannels()).basicAdd(otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  public static Recipe fromCursor(Cursor cursor){  Recipe recipe=new Recipe(null);  for (int c=0; c < cursor.getColumnCount(); c++) {    String columnName=cursor.getColumnName(c);    if (columnName.equals(RecipeTable.ID_COLUMN)) {      recipe.id=cursor.getString(c);    } else     if (columnName.equals(RecipeTable.TITLE_COLUMN)) {      recipe.setTitle(cursor.getString(c));    } else     if (columnName.equals(RecipeTable.DESCRIPTION_COLUMN)) {      recipe.setDescription(cursor.getString(c));    } else     if (columnName.equals(RecipeTable.PHOTO_COLUMN)) {      recipe.setPhoto(cursor.getString(c));    } else     if (columnName.equals(RecipeTable.PREP_TIME_COLUMN)) {      recipe.setPrepTime(cursor.getString(c));    }  }  return recipe;}  }
class C{  public Chunk handleChunk(Chunk request){  if (false)   Log.v("ddm-heap","Handling " + name(request.type) + " chunk");  int type=request.type;  if (type == CHUNK_HELO) {    return handleHELO(request);  } else   if (type == CHUNK_FEAT) {    return handleFEAT(request);  } else {    throw new RuntimeException("Unknown packet " + ChunkHandler.name(type));  }}  }
class C{  public String toString(){  return new String(buf,0,count);}  }
class C{  public boolean isBroken(){  return getInt("amount") == 0;}  }
class C{  public Workflow.Method unmountAndDetachMethod(URI exportGroup,URI hostId,URI vcenter,URI vcenterDatacenter){  return new Workflow.Method("unmountAndDetach",exportGroup,hostId,vcenter,vcenterDatacenter);}  }
class C{  private Bitmap createStickyViewBitmap(View view){  stickyHeaderLeft=orientation == LayoutOrientation.HORIZONTAL ? 0 : view.getLeft();  stickyHeaderTop=orientation == LayoutOrientation.VERTICAL ? 0 : view.getTop();  Rect stickyViewBounds=new Rect(0,0,view.getRight() - view.getLeft(),view.getBottom() - view.getTop());  Bitmap bitmap=Bitmap.createBitmap(stickyViewBounds.width(),stickyViewBounds.height(),Bitmap.Config.ARGB_8888);  Canvas canvas=new Canvas(bitmap);  view.draw(canvas);  return bitmap;}  }
class C{  public Uri move(Uri from,Uri to) throws MmsException {  long msgId=ContentUris.parseId(from);  if (msgId == -1L) {    throw new MmsException("Error! ID of the message: -1.");  }  Integer msgBox=MESSAGE_BOX_MAP.get(to);  if (msgBox == null) {    throw new MmsException("Bad destination, must be one of " + "content://mms/inbox, content://mms/sent, " + "content://mms/drafts, content://mms/outbox, "+ "content://mms/temp.");  }  ContentValues values=new ContentValues(1);  values.put("msg_box",msgBox);  SqliteWrapper.update(mContext,mContentResolver,from,values,null,null);  return ContentUris.withAppendedId(to,msgId);}  }
class C{  public boolean increment(K key){  return adjustValue(key,1);}  }
class C{  public boolean hasContentType(){  return getContentType() != null;}  }
class C{  public int selectOutputType(){  int iType=0;  iType=javax.swing.JOptionPane.showOptionDialog(null,"Should the C/MRI output bit(s) be 'steady state' or 'pulsed'?","C/MRI Output Bits Question",javax.swing.JOptionPane.DEFAULT_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE,null,new String[]{"Steady State Output","Pulsed Output"},"Steady State Output");  return iType;}  }
class C{  public static void printCallHierarchy(){  if (Log.VERBOSE > DEBUG_LEVEL) {    String tag=getClassName();    String method=callMethodAndLine();    String hierarchy=getCallHierarchy();    Log.v(tag,method + hierarchy);    if (DEBUG_SYSOUT) {      System.out.println(tag + "  " + method+ hierarchy);    }  }}  }
class C{  protected void generateAdapter(@NotNull IButterKnife butterKnife){  StringBuilder holderBuilder=new StringBuilder();  holderBuilder.append(Utils.getViewHolderClassName());  holderBuilder.append("(android.view.View view) {");  holderBuilder.append(butterKnife.getCanonicalBindStatement());  holderBuilder.append("(this, view);");  holderBuilder.append("}");  PsiClass viewHolder=mFactory.createClassFromText(holderBuilder.toString(),mClass);  viewHolder.setName(Utils.getViewHolderClassName());  for (  Element element : mElements) {    if (!element.used) {      continue;    }    String rPrefix;    if (element.isAndroidNS) {      rPrefix="android.R.id.";    } else {      rPrefix="R.id.";    }    StringBuilder injection=new StringBuilder();    injection.append('@');    injection.append(butterKnife.getFieldAnnotationCanonicalName());    injection.append('(');    injection.append(rPrefix);    injection.append(element.id);    injection.append(") ");    if (element.nameFull != null && element.nameFull.length() > 0) {      injection.append(element.nameFull);    } else     if (Definitions.paths.containsKey(element.name)) {      injection.append(Definitions.paths.get(element.name));    } else {      injection.append("android.widget.");      injection.append(element.name);    }    injection.append(" ");    injection.append(element.fieldName);    injection.append(";");    viewHolder.add(mFactory.createFieldFromText(injection.toString(),mClass));  }  mClass.add(viewHolder);  StringBuilder comment=new StringBuilder();  comment.append("/**\n");  comment.append(" * This class contains all butterknife-injected Views & Layouts from layout file '");  comment.append(mLayoutFileName);  comment.append("'\n");  comment.append("* for easy to all layout elements.\n");  comment.append(" *\n");  comment.append(" * @author\tButterKnifeZelezny, plugin for Android Studio by Avast Developers (http://github.com/avast)\n");  comment.append("*/");  mClass.addBefore(mFactory.createKeyword("static",mClass),mClass.findInnerClassByName(Utils.getViewHolderClassName(),true));}  }
class C{  public void clear(){  for (  HealthCheck check : mHealthChecks) {    check.clear();  }}  }
class C{  public synchronized void insert(BoundedObject o){  if (o == null)   throw new NullPointerException("Cannot store null object");  if (root == null)   root=new Node(true);  Node n=chooseLeaf(o.getBounds(),root);  n.data.add(o);  n.computeMBR();  splitter.split(n);}  }
class C{  @Override public FuzzyQueryBuilder boost(float boost){  this.boost=boost;  return this;}  }
class C{  public void removeCheckpoint(String name){  if (!undoCheckpoints.isEmpty() && undoCheckpoints.getLast().isEmpty() && undoCheckpoints.getLast().name.equals(name))   undoCheckpoints.removeLast();}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public int nthSuperUglyNumber(int n,int[] primes){  int len=primes.length;  int[] index=new int[len];  int[] res=new int[n];  res[0]=1;  for (int i=1; i < n; i++) {    int min=Integer.MAX_VALUE;    for (int j=0; j < len; j++) {      min=Math.min(res[index[j]] * primes[j],min);    }    res[i]=min;    for (int j=0; j < len; j++) {      if (res[i] % primes[j] == 0)       index[j]++;    }  }  return res[n - 1];}  }
class C{  public String remove(String key){  return map.remove(key);}  }
class C{  protected void after(Description description) throws Throwable {}  }
class C{  public static Object callMethod(Object obj,String methodName,Class<?>[] parameterTypes,Object... args){  try {    return findMethodBestMatch(obj.getClass(),methodName,parameterTypes,args).invoke(obj,args);  } catch (  IllegalAccessException e) {    DexposedBridge.log(e);    throw new IllegalAccessError(e.getMessage());  }catch (  IllegalArgumentException e) {    throw e;  }catch (  InvocationTargetException e) {    throw new InvocationTargetError(e.getCause());  }}  }
class C{  private HashMap<String,List<StoragePort>> discoverIscsiPorts(StorageSystem system,VNXeApiClient client,Map<String,URI> spIdMap) throws VNXeException {  HashMap<String,List<StoragePort>> storagePorts=new HashMap<String,List<StoragePort>>();  List<StoragePort> newStoragePorts=new ArrayList<StoragePort>();  List<StoragePort> existingStoragePorts=new ArrayList<StoragePort>();  _logger.info("Start iSCSI storage port discovery for storage system {}",system.getId());  List<VNXeIscsiNode> ports=client.getAllIscsiPorts();  if (ports == null || ports.isEmpty()) {    _logger.info("No iSCSI ports found for the system: {} ",system.getId());    return storagePorts;  }  _logger.info("Number iSCSI ports found: {}",ports.size());  for (  VNXeIscsiNode node : ports) {    StoragePort port=null;    VNXeEthernetPort eport=node.getEthernetPort();    if (eport == null) {      _logger.info("No ethernet port found for the iscsi node: {}",node.getId());      continue;    }    VNXeBase spId=eport.getStorageProcessor();    if (spId == null) {      _logger.info("No storage processor info for the iscsi node: {}",node.getId());      continue;    }    String spIdStr=spId.getId();    URI haDomainUri=spIdMap.get(spIdStr);    if (haDomainUri == null) {      _logger.info("The sp {} has not been discovered.",spIdStr);      continue;    }    String portNativeGuid=NativeGUIDGenerator.generateNativeGuid(system,node.getName(),NativeGUIDGenerator.PORT);    URIQueryResultList results=new URIQueryResultList();    _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getStoragePortByNativeGuidConstraint(portNativeGuid),results);    Iterator<URI> it=results.iterator();    if (it.hasNext()) {      _logger.info("cross verifying for duplicate port");      StoragePort tmpPort=_dbClient.queryObject(StoragePort.class,it.next());      _logger.info(String.format("Actual StorageDevice %s : PortGroup found for port %s - Actual PortGroup %s",system.getId(),tmpPort.getPortNetworkId(),tmpPort.getPortGroup()));      if (tmpPort.getStorageDevice().equals(system.getId()) && tmpPort.getPortGroup().equals(spIdStr)) {        port=tmpPort;        _logger.info("found duplicate iscsi port {}",node.getName());      }    }    if (port == null) {      port=new StoragePort();      port.setId(URIUtil.createId(StoragePort.class));      port.setLabel(portNativeGuid);      port.setTransportType("IP");      port.setNativeGuid(portNativeGuid);      port.setStorageDevice(system.getId());      port.setRegistrationStatus(RegistrationStatus.REGISTERED.toString());      port.setPortName(eport.getId());      port.setPortNetworkId(node.getName());      port.setPortGroup(spIdStr);      port.setStorageHADomain(haDomainUri);      VNXeIscsiPortal portal=node.getIscsiPortal();      if (portal != null) {        port.setIpAddress(portal.getIpAddress());      }      _logger.info("Creating new storage port using NativeGuid : {}, IQN:",portNativeGuid,node.getName());      newStoragePorts.add(port);    } else {      existingStoragePorts.add(port);    }    Health health=node.getEthernetPort().getHealth();    if (health != null && health.getValue() == Health.HealthEnum.OK.getValue()) {      port.setOperationalStatus(StoragePort.OperationalStatus.OK.name());    } else {      port.setOperationalStatus(StoragePort.OperationalStatus.NOT_OK.name());    }    port.setDiscoveryStatus(DiscoveryStatus.VISIBLE.name());    port.setCompatibilityStatus(DiscoveredDataObject.CompatibilityStatus.COMPATIBLE.name());  }  _logger.info("iSCSI port discovery for storage system {} complete",system.getId());  storagePorts.put(NEW,newStoragePorts);  storagePorts.put(EXISTING,existingStoragePorts);  return storagePorts;}  }
class C{  public final void privateInitialize(String serviceName,CordovaInterface cordova,CordovaWebView webView,CordovaPreferences preferences){  assert this.cordova == null;  this.serviceName=serviceName;  this.cordova=cordova;  this.webView=webView;  this.preferences=preferences;  initialize(cordova,webView);  pluginInitialize();}  }
class C{  public ByteVector putInt(final int i){  int length=this.length;  if (length + 4 > data.length) {    enlarge(4);  }  byte[] data=this.data;  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  this.length=length;  return this;}  }
class C{  private void createBorderColor(){  this.borderColor=new RGB(Math.min(this.color.red * 2,255),Math.min(this.color.green * 2,255),Math.min(this.color.blue * 2,255));}  }
class C{  public DocumentFragment parseFragment(InputSource is,String context) throws IOException, SAXException {  domTreeBuilder.setFragmentContext(context.intern());  tokenize(is);  return domTreeBuilder.getDocumentFragment();}  }
class C{  public void deleteButtonActionPerformed(){  curNode=(XBeeNode)nodeField.getSelectedItem();  if (curNode == null) {    statusText1.setText(Bundle.getMessage("Error4"));    statusText1.setVisible(true);    errorInStatus1=true;    resetNotes2();    return;  }  if (javax.swing.JOptionPane.OK_OPTION == javax.swing.JOptionPane.showConfirmDialog(this,Bundle.getMessage("ConfirmDelete1") + "\n" + Bundle.getMessage("ConfirmDelete2"),Bundle.getMessage("ConfirmDeleteTitle"),javax.swing.JOptionPane.OK_CANCEL_OPTION,javax.swing.JOptionPane.WARNING_MESSAGE)) {    xtc.deleteNode((XBeeNode)curNode);    resetNotes();    statusText1.setText(Bundle.getMessage("FeedBackDelete") + " " + curNode.toString());    errorInStatus1=true;    changedNode=true;  } else {    resetNotes();  }  initAddressBoxes();}  }
class C{  public void addEvent(Event event){  getEvents().add(event);}  }
class C{  public IndexedMatrix(double[][] matrix){  assert MatrixUtils.isSquare(matrix);  this.matrix=new TetradMatrix(matrix).toArray();  setIndices(new int[0]);}  }
class C{  public int viewToModel(float fx,float fy,Shape a,Position.Bias[] bias){  bias[0]=Position.Bias.Forward;  Rectangle alloc=(Rectangle)a;  RSyntaxDocument doc=(RSyntaxDocument)getDocument();  int x=(int)fx;  int y=(int)fy;  if (y < alloc.y) {    return getStartOffset();  } else   if (y > alloc.y + alloc.height) {    return getEndOffset() - 1;  } else {    RSyntaxTextArea textArea=(RSyntaxTextArea)getContainer();    alloc.height=textArea.getLineHeight();    int p1=getEndOffset();    Element map=doc.getDefaultRootElement();    int p0=getStartOffset();    int line=map.getElementIndex(p0);    Token tlist=doc.getTokenListForLine(line);    while (p0 < p1) {      RSyntaxUtilities.makeTokenListStartAt(tlist,p0,WrappedSyntaxView.this,textArea,alloc.x);      int p=calculateBreakPosition(p0,tlist,alloc.x);      if ((y >= alloc.y) && (y < (alloc.y + alloc.height))) {        if (x < alloc.x) {          return p0;        } else         if (x > alloc.x + alloc.width) {          return p - 1;        } else {          int n=tlist.getListOffset(textArea,WrappedSyntaxView.this,alloc.x,x);          return Math.max(Math.min(n,p1 - 1),p0);        }      }      p0=(p == p0) ? p1 : p;      alloc.y+=alloc.height;    }    return getEndOffset() - 1;  }}  }
class C{  public void mouseEntered(MouseEvent evt){}  }
class C{  public static DeleteInstanceResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  DeleteInstanceResponse object=new DeleteInstanceResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"deleteInstanceResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (DeleteInstanceResponse)org.oscm.xsd.ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","return").equals(reader.getName())) {      object.set_return(org.oscm.xsd.BaseResult.Factory.parse(reader));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  private static void updateDebuggerHighlighting(final ZyGraph graph,final NaviNode node,final INaviCodeNode codeNode,final INaviInstruction instruction){  node.setHighlighting(CHighlightLayers.PROGRAM_COUNTER_LAYER,CCodeNodeHelpers.instructionToLine(codeNode,instruction),11,-1,ConfigManager.instance().getDebuggerColorSettings().getActiveLine());  if (!node.getRawNode().isVisible()) {    node.getRawNode().setVisible(true);    if (graph.getSettings().getProximitySettings().getProximityBrowsing()) {      graph.showNode(node,true);    }    graph.doLayout();  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @SuppressWarnings("unchecked") private static void addEqualsMethod(ClassNode classNode,List<TupleSchemaRegistry.SQLFieldInfo> fieldList) throws JSONException {  MethodNode equalsNode=new MethodNode(Opcodes.ACC_PUBLIC,"equals","(Ljava/lang/Object;)Z",null,null);  equalsNode.visitAnnotation("Ljava/lang/Override;",true);  LabelNode l0=new LabelNode();  LabelNode l1=new LabelNode();  LabelNode l2=new LabelNode();  LabelNode l3=new LabelNode();  LabelNode l4=new LabelNode();  equalsNode.instructions.add(new VarInsnNode(Opcodes.ALOAD,0));  equalsNode.instructions.add(new VarInsnNode(Opcodes.ALOAD,1));  equalsNode.instructions.add(new JumpInsnNode(Opcodes.IF_ACMPNE,l0));  equalsNode.instructions.add(new InsnNode(Opcodes.ICONST_1));  equalsNode.instructions.add(new InsnNode(Opcodes.IRETURN));  equalsNode.instructions.add(l0);  equalsNode.instructions.add(new VarInsnNode(Opcodes.ALOAD,1));  equalsNode.instructions.add(new JumpInsnNode(Opcodes.IFNULL,l1));  equalsNode.instructions.add(new VarInsnNode(Opcodes.ALOAD,1));  equalsNode.instructions.add(new TypeInsnNode(Opcodes.INSTANCEOF,classNode.name));  equalsNode.instructions.add(new JumpInsnNode(Opcodes.IFNE,l2));  equalsNode.instructions.add(l1);  equalsNode.instructions.add(new InsnNode(Opcodes.ICONST_0));  equalsNode.instructions.add(new InsnNode(Opcodes.IRETURN));  equalsNode.instructions.add(l2);  equalsNode.instructions.add(new VarInsnNode(Opcodes.ALOAD,1));  equalsNode.instructions.add(new TypeInsnNode(Opcodes.CHECKCAST,classNode.name));  equalsNode.instructions.add(new VarInsnNode(Opcodes.ASTORE,2));  for (int i=0; i < fieldList.size(); i++) {    boolean isLast=((i + 1) == fieldList.size());    TupleSchemaRegistry.SQLFieldInfo info=fieldList.get(i);    String fieldName=info.getColumnName();    String fieldType=info.getType().getJavaType().getName();    String fieldJavaType=getJavaType(fieldType);    String getterMethodName=(fieldType.equals("boolean") ? "is" : "get") + Character.toUpperCase(fieldName.charAt(0)) + fieldName.substring(1);    equalsNode.instructions.add(new VarInsnNode(Opcodes.ALOAD,2));    equalsNode.instructions.add(new MethodInsnNode(Opcodes.INVOKEVIRTUAL,classNode.name,getterMethodName,"()" + fieldJavaType,false));    equalsNode.instructions.add(new VarInsnNode(Opcodes.ALOAD,0));    equalsNode.instructions.add(new FieldInsnNode(Opcodes.GETFIELD,classNode.name,fieldName,fieldJavaType));switch (fieldType) {case "boolean":case "byte":case "char":case "short":case "int":      equalsNode.instructions.add(new JumpInsnNode(isLast ? Opcodes.IF_ICMPEQ : Opcodes.IF_ICMPNE,isLast ? l4 : l3));    break;case "long":  equalsNode.instructions.add(new InsnNode(Opcodes.LCMP));equalsNode.instructions.add(new JumpInsnNode(isLast ? Opcodes.IFEQ : Opcodes.IFNE,isLast ? l4 : l3));break;case "float":equalsNode.instructions.add(new InsnNode(Opcodes.FCMPL));equalsNode.instructions.add(new JumpInsnNode(isLast ? Opcodes.IFEQ : Opcodes.IFNE,isLast ? l4 : l3));break;case "double":equalsNode.instructions.add(new InsnNode(Opcodes.DCMPL));equalsNode.instructions.add(new JumpInsnNode(isLast ? Opcodes.IFEQ : Opcodes.IFNE,isLast ? l4 : l3));break;default :String objectOwnerType=fieldType.replace('.','/');LabelNode nonNullNode=new LabelNode();LabelNode continueNode=new LabelNode();equalsNode.instructions.add(new JumpInsnNode(Opcodes.IFNONNULL,nonNullNode));equalsNode.instructions.add(new JumpInsnNode(isLast ? Opcodes.IFNULL : Opcodes.IFNONNULL,isLast ? l4 : l3));equalsNode.instructions.add(new JumpInsnNode(Opcodes.GOTO,continueNode));equalsNode.instructions.add(nonNullNode);equalsNode.instructions.add(new InsnNode(Opcodes.POP));equalsNode.instructions.add(new VarInsnNode(Opcodes.ALOAD,0));equalsNode.instructions.add(new FieldInsnNode(Opcodes.GETFIELD,classNode.name,fieldName,fieldJavaType));equalsNode.instructions.add(new VarInsnNode(Opcodes.ALOAD,2));equalsNode.instructions.add(new MethodInsnNode(Opcodes.INVOKEVIRTUAL,classNode.name,getterMethodName,"()" + fieldJavaType,false));equalsNode.instructions.add(new MethodInsnNode(Opcodes.INVOKEVIRTUAL,objectOwnerType,"equals","(Ljava/lang/Object;)Z",false));equalsNode.instructions.add(new JumpInsnNode(isLast ? Opcodes.IFNE : Opcodes.IFEQ,isLast ? l4 : l3));equalsNode.instructions.add(continueNode);break;}}equalsNode.instructions.add(l3);equalsNode.instructions.add(new InsnNode(Opcodes.ICONST_0));equalsNode.instructions.add(new InsnNode(Opcodes.IRETURN));equalsNode.instructions.add(l4);equalsNode.instructions.add(new InsnNode(Opcodes.ICONST_1));equalsNode.instructions.add(new InsnNode(Opcodes.IRETURN));classNode.methods.add(equalsNode);}  }
class C{  protected void handleParseError(CommonException ce) throws CommonException {  throw ce;}  }
class C{  private ArrayList<WritableComparable> readPartitions(FileSystem fs,Path p,JobConf job) throws IOException {  SequenceFile.Reader reader=new SequenceFile.Reader(fs,p,job);  ArrayList<WritableComparable> parts=new ArrayList<WritableComparable>();  try {    DoubleWritable key=new DoubleWritable();    NullWritable value=NullWritable.get();    while (reader.next(key,value)) {      parts.add(key);      key=new DoubleWritable();    }  } catch (  Exception e) {    throw new RuntimeException(e);  } finally {    IOUtilFunctions.closeSilently(reader);  }  reader.close();  return parts;}  }
class C{  private void toast(@StringRes int message){  if (mCrouton != null) {    mCrouton.cancel();    mCrouton=null;  }  mCroutonView=new CroutonView(this,getString(message));  mCrouton=Crouton.make(this,mCroutonView,R.id.activity_artist_main_container);  mCrouton.show();}  }
class C{  public ManageReferralControl(){  super(OID,true,null);}  }
class C{  private void writeObject(java.io.ObjectOutputStream oos) throws IOException {  oos.defaultWriteObject();  if (certs == null || certs.length == 0) {    oos.writeInt(0);  } else {    oos.writeInt(certs.length);    for (int i=0; i < certs.length; i++) {      java.security.cert.Certificate cert=certs[i];      try {        oos.writeUTF(cert.getType());        byte[] encoded=cert.getEncoded();        oos.writeInt(encoded.length);        oos.write(encoded);      } catch (      CertificateEncodingException cee) {        throw new IOException(cee.getMessage());      }    }  }}  }
class C{  public void elementStarted(String name,String systemId,int lineNr) throws Exception {  this.delegate.elementStarted(name,systemId,lineNr);}  }
class C{  public InstructionGraph(final List<InstructionGraphNode> nodes,final List<InstructionGraphEdge> edges){  super(nodes,edges);}  }
class C{  private void readRoot() throws IOException {  if (root != null) {    return;  }  ByteArrayOutputStream content=new ByteArrayOutputStream();  byte[] buffer=new byte[READ_BUFFER_SIZE];  try {    while (trans_.read(buffer,0,READ_BUFFER_SIZE) > 0) {      content.write(buffer);    }  } catch (  TTransportException e) {    if (TTransportException.END_OF_FILE != e.getType()) {      throw new IOException(e);    }  }  root=OBJECT_MAPPER.readTree(content.toByteArray());}  }
class C{  public static EspUpgradeApkResult upgradeApk(){  return UpgradeAdministrator.getInstance().upgradeApk();}  }
class C{  public static short convert(String stringValue){  if (Strings.isNullOrEmpty(stringValue) || TypeUtils.MISSING_INDICATORS.contains(stringValue)) {    return (short)ColumnType.SHORT_INT.getMissingValue();  }  Matcher matcher=COMMA_PATTERN.matcher(stringValue);  return Short.parseShort(matcher.replaceAll(""));}  }
class C{  void parseElementDeclaration() throws IOException {  Vector<String> elems=parseIdentifierList(true);  BitSet inclusions=null;  BitSet exclusions=null;  boolean omitStart=false;  boolean omitEnd=false;  if ((ch == '-') || (ch == 'O')) {    omitStart=ch == 'O';    ch=in.read();    skipParameterSpace();    if ((ch == '-') || (ch == 'O')) {      omitEnd=ch == 'O';      ch=in.read();      skipParameterSpace();    } else {      expect('-');    }  }  int type=MODEL;  ContentModel content=null;  if (parseIdentifier(false)) {    String nm=getString(0);    type=Element.name2type(nm);    if (type == 0) {      error("invalid.arg","content type",nm);      type=EMPTY;    }    skipParameterSpace();  } else {    content=parseContentModel();  }  if ((type == MODEL) || (type == ANY)) {    if (ch == '-') {      ch=in.read();      Vector<String> v=parseIdentifierList(true);      exclusions=new BitSet();      for (Enumeration<String> e=v.elements(); e.hasMoreElements(); ) {        exclusions.set(dtd.getElement(e.nextElement()).getIndex());      }    }    if (ch == '+') {      ch=in.read();      Vector<String> v=parseIdentifierList(true);      inclusions=new BitSet();      for (Enumeration<String> e=v.elements(); e.hasMoreElements(); ) {        inclusions.set(dtd.getElement(e.nextElement()).getIndex());      }    }  }  expect('>');  if (in.replace == 0) {    for (Enumeration<String> e=elems.elements(); e.hasMoreElements(); ) {      dtd.defineElement(e.nextElement(),type,omitStart,omitEnd,content,exclusions,inclusions,null);    }  }}  }
class C{  public void testNegNegFirstLonger(){  String numA="-2837462783428374767845648748973847593874837948575684767";  String numB="-293478573489347658763745839457637";  String res="2837462783428374767845615168483972194300564226167553530";  BigInteger aNumber=new BigInteger(numA);  BigInteger bNumber=new BigInteger(numB);  BigInteger result=aNumber.xor(bNumber);  assertTrue(res.equals(result.toString()));}  }
class C{  @Override public boolean similar(Operand op){  if (!(op instanceof HeapOperand<?>)) {    return false;  }  HeapOperand<?> h=(HeapOperand<?>)op;  return (h.value == value);}  }
class C{  protected WordSetOption(OptionSet set,String name,String description,Word[] defaultValues){  super(set,WORD_SET_OPTION,name,description);  this.values=this.defaultValues=defaultValues;}  }
class C{  public Logo(int size){  this.width=size;  this.height=size;}  }
class C{  public String toString(int indentFactor) throws JSONException {  StringWriter sw=new StringWriter();synchronized (sw.getBuffer()) {    return this.write(sw,indentFactor,0).toString();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:08.597 -0500",hash_original_method="2C5EDAC0235777863EFD087B4072277C",hash_generated_method="9E7C21291AC9652038CC874A9632FB81") @DSSafe(DSCat.SAFE_LIST) public void concatenate(SIPHeaderList<HDR> other,boolean topFlag) throws IllegalArgumentException {  if (!topFlag) {    this.addAll(other);  } else {    this.addAll(0,other);  }}  }
class C{  private static InstalledApp _create_application(PackageManager pacman,PackageInfo pi){  ApplicationInfo info;  try {    info=pacman.getApplicationInfo(pi.packageName,PackageManager.GET_META_DATA);  } catch (  final PackageManager.NameNotFoundException e) {    info=null;  }  String applicationName=(String)(info != null ? pacman.getApplicationLabel(info) : null);  InstalledApp app=new InstalledApp(pi.packageName,applicationName,pi.versionName,null,is_system_package(pi));  UpdateSource us=UpdateSource.guess_update_source(pi,info != null ? info.metaData : null);  if (us != null) {    app.set_update_source(us.get_name());  }  int status;  try {    status=pacman.getApplicationEnabledSetting(pi.packageName);  } catch (  IllegalArgumentException ignored) {    return null;  }  if (status == PackageManager.COMPONENT_ENABLED_STATE_DISABLED_USER || status == PackageManager.COMPONENT_ENABLED_STATE_DISABLED) {    app.set_ignored(true);  }  _handle_icon(pacman,info,app);  app.save();  return app;}  }
class C{  boolean containsSimpleItem(Production production,int position,Terminal lookahead){  for (  LR1Item item : items) {    if (item.getProduction() == production && item.getPosition() == position && item.getLookaheads().contains(lookahead))     return true;  }  return false;}  }
class C{  public DrmRights(String rightsFilePath,String mimeType,String accountId){  this(rightsFilePath,mimeType);  mAccountId=accountId;}  }
class C{  public static String readAsciiLine(InputStream in) throws IOException {  StringBuilder result=new StringBuilder(80);  while (true) {    int c=in.read();    if (c == -1) {      throw new EOFException();    } else     if (c == '\n') {      break;    }    result.append((char)c);  }  int length=result.length();  if (length > 0 && result.charAt(length - 1) == '\r') {    result.setLength(length - 1);  }  return result.toString();}  }
class C{  public ProductAssociationServiceImpl(final GenericDAO<ProductAssociation,Long> productAssociationDao){  super(productAssociationDao);  this.productAssociationDao=productAssociationDao;}  }
class C{  public static long Fib(int n){  if (n < 2) {    return n;  } else {    return Fib(n - 1) + Fib(n - 2);  }}  }
class C{  @Override public void addChangeListener(ChangeListener l){  listenerList.add(ChangeListener.class,l);}  }
class C{  @Override public void generate(XmlWriter w,ExtensionProfile extProfile) throws IOException {  List<Attribute> attrs=new ArrayList<Attribute>();  if (fixed != null) {    attrs.add(new Attribute("fixed",fixed ? "yes" : "no"));  }  if (defaultScheme != null) {    attrs.add(new Attribute("scheme",defaultScheme));  }  if (href != null) {    attrs.add(new Attribute("href",href));  }  w.startElement(atomPubNs,"categories",attrs,null);  if (categories != null) {    w.startRepeatingElement();    for (    Category category : categories) {      category.generateAtom(w);    }    w.endRepeatingElement();  }  generateExtensions(w,extProfile);  w.endElement(atomPubNs,"categories");}  }
class C{  public static void i(String tag,String msg,Object... args){  if (sLevel > LEVEL_INFO) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.i(tag,msg);}  }
class C{  default B addCanDestoryMaterial(final BlockMaterialData material){  this.meta().addCanDestoryMaterial(material);  return this.getBuilder();}  }
class C{  protected void _skipString() throws IOException, JsonParseException {  _tokenIncomplete=false;  final int[] codes=CharTypes.getInputCodeUtf8();  final byte[] inputBuffer=_inputBuffer;  main_loop:   while (true) {    int c;    ascii_loop:     while (true) {      int ptr=_inputPtr;      int max=_inputEnd;      if (ptr >= max) {        loadMoreGuaranteed();        ptr=_inputPtr;        max=_inputEnd;      }      while (ptr < max) {        c=(int)inputBuffer[ptr++] & 0xFF;        if (codes[c] != 0) {          _inputPtr=ptr;          break ascii_loop;        }      }      _inputPtr=ptr;    }    if (c == INT_QUOTE) {      break main_loop;    }switch (codes[c]) {case 1:      _decodeEscaped();    break;case 2:  _skipUtf8_2(c);break;case 3:_skipUtf8_3(c);break;case 4:_skipUtf8_4(c);break;default :if (c < INT_SPACE) {_throwUnquotedSpace(c,"string value");} else {_reportInvalidChar(c);}}}}  }
class C{  public static void write(CharSequence data,Writer output) throws IOException {  if (data != null) {    write(data.toString(),output);  }}  }
class C{  public DockEvent(EventType<? extends DockEvent> eventType,double x,double y,double screenX,double screenY,PickResult pickResult){  this(null,null,eventType,x,y,screenX,screenY,pickResult);}  }
class C{  public static int direction(int x1,int y1,int x2,int y2){  int direction=0;  int vx=x2 - x1;  int vy=y2 - y1;  if (vy < vx && vx > -vy) {    direction=OUT_RIGHT;  } else   if (vy > vx && vy > -vx) {    direction=OUT_TOP;  } else   if (vx < vy && vx < -vy) {    direction=OUT_LEFT;  } else {    direction=OUT_BOTTOM;  }  return direction;}  }
class C{  public void copyUTF8Bytes(BytesRef bytes){  grow(bytes.length);  ref.length=UnicodeUtil.UTF8toUTF32(bytes,ref.ints);}  }
class C{  public OrganizationDataException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public void stop(String gatewayId) throws PageException {  executeThread(gatewayId,GatewayThread.STOP);}  }
class C{  public BiosCommandResult doStartReplicationPolicy(StorageSystem system,String policyName,TaskCompleter taskCompleter){  _log.info("IsilonMirrorOperations -  doStartReplicationPolicy started on storagesystem {}",system.getLabel());  try {    IsilonApi isi=getIsilonDevice(system);    IsilonSyncPolicy policy=isi.getReplicationPolicy(policyName);    IsilonSyncPolicy.JobState policyState=policy.getLastJobState();    if (!policy.getEnabled()) {      policy=doEnableReplicationPolicy(isi,policyName);      if (policy.getEnabled()) {        _log.info("Replication Policy - {} ENABLED successfully",policy.toString());      }    }    if (!policyState.equals(JobState.running) || !policyState.equals(JobState.paused) || !policyState.equals(JobState.resumed)) {      IsilonSyncJob job=new IsilonSyncJob();      job.setId(policyName);      isi.modifyReplicationJob(job);      policy=isi.getReplicationPolicy(policyName);      IsilonSyncJobStart isiSyncJobStart=new IsilonSyncJobStart(policyName,system.getId(),taskCompleter,policyName);      try {        ControllerServiceImpl.enqueueJob(new QueueJob(isiSyncJobStart));        return BiosCommandResult.createPendingResult();      } catch (      Exception ex) {        _log.error("Start Replication Job Failed ",ex);        ServiceError error=DeviceControllerErrors.isilon.jobFailed("Start Replication Job Failed as:" + ex.getMessage());        if (taskCompleter != null) {          taskCompleter.error(_dbClient,error);        }        return BiosCommandResult.createErrorResult(error);      }    } else {      _log.error("Replication Policy - {} can't be STARTED because policy is in {} state",policyName,policyState);      ServiceError error=DeviceControllerErrors.isilon.jobFailed("doStartReplicationPolicy as : Replication Policy can't be STARTED because " + "policy is already in Active state");      return BiosCommandResult.createErrorResult(error);    }  } catch (  IsilonException e) {    _log.error("doStartReplicationPolicy failed.",e);    return BiosCommandResult.createErrorResult(e);  }}  }
class C{  public StringReader(String s){  this.str=s;  this.length=s.length();}  }
class C{  private IgniteConfiguration dataNode(TcpDiscoveryIpFinder ipFinder,String gridName) throws Exception {  CacheConfiguration ccfg=new CacheConfiguration();  ccfg.setName(CACHE_NAME);  ccfg.setCacheMode(PARTITIONED);  ccfg.setAtomicityMode(TRANSACTIONAL);  ccfg.setNearConfiguration(new NearCacheConfiguration());  ccfg.setWriteSynchronizationMode(FULL_SYNC);  ccfg.setBackups(1);  IgniteConfiguration cfg=getConfiguration(gridName);  TcpDiscoverySpi spi=new TcpDiscoverySpi();  spi.setIpFinder(ipFinder);  cfg.setLocalHost("127.0.0.1");  cfg.setDiscoverySpi(spi);  cfg.setCacheConfiguration(ccfg);  cfg.setIncludeProperties();  cfg.setConnectorConfiguration(null);  return cfg;}  }
class C{  public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {  return encodeObject(serializableObject,NO_OPTIONS);}  }
class C{  private void partitionConstraintValidate(String query){  if (_partitionValues != null && _partitionValues.size() > 1) {    final String[] values=_partitionValues.get(0);    for (int i=1; i < _partitionValues.size(); ++i) {      final String[] tmpValues=_partitionValues.get(i);      for (int j=0; j < values.length; ++j) {        if (values[j] == null || (!values[j].equals(tmpValues[j]))) {          final String errMsg="One query for multiple partitions is NOT allowed for now! Query: " + query;          LOG.error(errMsg);          throw new IllegalArgumentException(errMsg);        }      }    }  }}  }
class C{  public static void addSettings(String propFile) throws SettingsError {  try {    props.load(new FileInputStream(propFile));  } catch (  IOException e) {    throw new SettingsError(e);  }}  }
class C{  private static CounterSet doCountersQuery(final HttpClient cm,final String hostname,final String baseRequestURI,final int uniqueId) throws Exception {  final String uriStr=baseRequestURI + "/counters";  final ConnectOptions o=new ConnectOptions(uriStr);  o.setAcceptHeader(ConnectOptions.MIME_APPLICATION_XML);  o.method="GET";  o.addRequestParam("path","/" + hostname + "/");  o.addRequestParam("depth","3");  o.addRequestParam("uniqueId",Integer.toString(uniqueId));  boolean didDrainEntity=false;  JettyResponseListener response=null;  try {    response=doConnect(cm,o);    RemoteRepository.checkResponseCode(response);    final String contentType=response.getContentType();    if (!contentType.startsWith(IMimeTypes.MIME_APPLICATION_XML)) {      throw new IOException("Expecting " + IMimeTypes.MIME_APPLICATION_XML + ", not Content-Type="+ contentType);    }    final CounterSet counterSet=new CounterSet();    final InputStream is=response.getInputStream();    try {      counterSet.readXML(is,DefaultInstrumentFactory.NO_OVERWRITE_60M,null);      didDrainEntity=true;      if (log.isDebugEnabled())       log.debug("hostname=" + hostname + ": counters="+ counterSet);      return counterSet;    }  finally {      try {        is.close();      } catch (      IOException ex) {        log.warn(ex);      }    }  }  finally {    if (response != null && !didDrainEntity) {      response.abort();    }  }}  }
class C{  public boolean isSingleLineTextArea(){  return singleLineTextArea;}  }
class C{  public Scan(){  super();}  }
class C{  public SabresQuery<T> whereNotContainedIn(String key,List<?> values){  List<String> stingValues=new ArrayList<>(values.size());  for (  Object o : values) {    stingValues.add(SabresValue.create(o).toSql());  }  addWhere(key,Where.notIn(key,stingValues));  return this;}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public void register(String name,KafkaConsumer kafkaConsumer){  if (this.m_kafkaConsumers == null) {    this.m_kafkaConsumers=new ConcurrentHashMap<String,KafkaConsumer>();  }  this.m_kafkaConsumers.put(name,kafkaConsumer);  if (LOGGER.isInfoEnabled())   LOGGER.info("Register " + name + " to KafkaController. ");}  }
class C{  public static String decryptString(CipherTextIvMac civ,SecretKeys secretKeys,String encoding) throws UnsupportedEncodingException, GeneralSecurityException {  return new String(decrypt(civ,secretKeys),encoding);}  }
class C{  public void addTargetLocation(String name){  if (name != null) {    this.targetLocationSet.add(name);  }}  }
class C{  public Builder InlineOldTag(String tag){  InlineOldTag=tag;  return this;}  }
class C{  public boolean computeScrollOffset(){  boolean resultX=mScrollerX.computeScrollOffset(mInterpolator);  boolean resultY=mScrollerY.computeScrollOffset(mInterpolator);  return resultX || resultY;}  }
class C{  public mat4 invert(){  mat4_util_inplace_invert(this.m);  return this;}  }
class C{  public ProjectSelection(List<Project> projects){  super(new JFrame(),true);  initComponents();  setLocationRelativeTo(null);  this.projects=projects;  jComboBox1.removeAllItems();  for (Iterator<Project> it=projects.iterator(); it.hasNext(); ) {    Project project=it.next();    ProjectInformation info=project.getLookup().lookup(ProjectInformation.class);    jComboBox1.addItem(info.getName());  }}  }
class C{  public static void zdemo6(){  Sorting sort=quickSort;  double[][] values={{3,7,0},{2,1,0},{2,2,0},{1,8,0},{2,5,0},{7,0,0},{2,3,0},{1,0,0},{4,0,0},{2,0,0}};  DoubleMatrix2D A=DoubleFactory2D.dense.make(values);  DoubleMatrix2D B, C;  System.out.println("\n\nunsorted:" + A);  B=quickSort.sort(A,1);  C=quickSort.sort(B,0);  System.out.println("quick sorted  :" + C);  B=mergeSort.sort(A,1);  C=mergeSort.sort(B,0);  System.out.println("merge sorted  :" + C);}  }
class C{  public ConditionalExpression newConditionalExpression(){  ConditionalExpression result=new ConditionalExpression(this);  return result;}  }
class C{  public double computeSpamProbability(Reader stream) throws java.io.IOException {  Set<String> tokens=parse(stream);  Map<String,Double> workCorpus=getCorpus();  SortedSet<TokenProbabilityStrength> tokenProbabilityStrengths=getTokenProbabilityStrengths(tokens,workCorpus);  return computeOverallProbability(tokenProbabilityStrengths,workCorpus);}  }
class C{  protected final void appendInt(final int number){  for (int i=3; i >= 0; --i) {    byteData.add(Byte.valueOf((byte)(number >> 8 * i & 0xFF)));  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (Sage.DBG)   System.out.println("Cancelling current file download operation.");  FileDownloader.getFileDownloader(stack.getUIMgrSafe()).cancel();  return null;}  }
class C{  public String product(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  Integer M_Product_ID=(Integer)value;  if (M_Product_ID == null || M_Product_ID.intValue() == 0)   return "";  BigDecimal priceActual=null;  Timestamp DateExpense=Env.getContextAsDate(ctx,WindowNo,"DateExpense");  if (DateExpense == null)   DateExpense=new Timestamp(System.currentTimeMillis());  String sql=null;  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    boolean noPrice=true;    sql="SELECT bomPriceStd(p.M_Product_ID,pv.M_PriceList_Version_ID) AS PriceStd," + "bomPriceList(p.M_Product_ID,pv.M_PriceList_Version_ID) AS PriceList," + "bomPriceLimit(p.M_Product_ID,pv.M_PriceList_Version_ID) AS PriceLimit,"+ "p.C_UOM_ID,pv.ValidFrom,pl.C_Currency_ID "+ "FROM M_Product p, M_ProductPrice pp, M_Pricelist pl, M_PriceList_Version pv "+ "WHERE p.M_Product_ID=pp.M_Product_ID"+ " AND pp.M_PriceList_Version_ID=pv.M_PriceList_Version_ID"+ " AND pv.M_PriceList_ID=pl.M_PriceList_ID"+ " AND pv.IsActive='Y'"+ " AND p.M_Product_ID=?"+ " AND pl.M_PriceList_ID=?"+ " ORDER BY pv.ValidFrom DESC";    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,M_Product_ID.intValue());    pstmt.setInt(2,Env.getContextAsInt(ctx,WindowNo,"M_PriceList_ID"));    rs=pstmt.executeQuery();    while (rs.next() && noPrice) {      java.sql.Date plDate=rs.getDate("ValidFrom");      if (plDate == null || !DateExpense.before(plDate)) {        noPrice=false;        priceActual=rs.getBigDecimal("PriceStd");        if (priceActual == null)         priceActual=rs.getBigDecimal("PriceList");        if (priceActual == null)         priceActual=rs.getBigDecimal("PriceLimit");        Integer ii=new Integer(rs.getInt("C_Currency_ID"));        if (!rs.wasNull())         mTab.setValue("C_Currency_ID",ii);      }    }    if (noPrice) {      sql="SELECT bomPriceStd(p.M_Product_ID,pv.M_PriceList_Version_ID) AS PriceStd," + "bomPriceList(p.M_Product_ID,pv.M_PriceList_Version_ID) AS PriceList," + "bomPriceLimit(p.M_Product_ID,pv.M_PriceList_Version_ID) AS PriceLimit,"+ "p.C_UOM_ID,pv.ValidFrom,pl.C_Currency_ID "+ "FROM M_Product p, M_ProductPrice pp, M_Pricelist pl, M_Pricelist bpl, M_PriceList_Version pv "+ "WHERE p.M_Product_ID=pp.M_Product_ID"+ " AND pp.M_PriceList_Version_ID=pv.M_PriceList_Version_ID"+ " AND pv.M_PriceList_ID=bpl.M_PriceList_ID"+ " AND pv.IsActive='Y'"+ " AND bpl.M_PriceList_ID=pl.BasePriceList_ID"+ " AND p.M_Product_ID=?"+ " AND pl.M_PriceList_ID=?"+ " ORDER BY pv.ValidFrom DESC";      DB.close(rs,pstmt);      pstmt=DB.prepareStatement(sql,null);      pstmt.setInt(1,M_Product_ID.intValue());      pstmt.setInt(2,Env.getContextAsInt(ctx,WindowNo,"M_PriceList_ID"));      rs=pstmt.executeQuery();      while (rs.next() && noPrice) {        java.sql.Date plDate=rs.getDate("ValidFrom");        if (plDate == null || !DateExpense.before(plDate)) {          noPrice=false;          priceActual=rs.getBigDecimal("PriceStd");          if (priceActual == null)           priceActual=rs.getBigDecimal("PriceList");          if (priceActual == null)           priceActual=rs.getBigDecimal("PriceLimit");          Integer ii=new Integer(rs.getInt("C_Currency_ID"));          if (!rs.wasNull())           mTab.setValue("C_Currency_ID",ii);        }      }    }  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);    return e.getLocalizedMessage();  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (priceActual == null)   priceActual=Env.ZERO;  mTab.setValue("ExpenseAmt",priceActual);  return "";}  }
class C{  public static Test suite(){  return new TestSuite(SortLabelsTest.class);}  }
class C{  private TreeStateNode createNodeForValue(Object value){  return new TreeStateNode(value);}  }
class C{  public PGraphics createGraphics(int iwidth,int iheight,String irenderer){  PGraphics pg=null;  if (irenderer.equals(JAVA2D)) {    pg=new PGraphicsAndroid2D();  } else   if (irenderer.equals(P2D)) {    if (!g.isGL()) {      throw new RuntimeException("createGraphics() with P2D requires size() to use P2D or P3D");    }    pg=new PGraphics2D();  } else   if (irenderer.equals(P3D)) {    if (!g.isGL()) {      throw new RuntimeException("createGraphics() with P3D or OPENGL requires size() to use P2D or P3D");    }    pg=new PGraphics3D();  } else {    Class<?> rendererClass=null;    Constructor<?> constructor=null;    try {      rendererClass=this.getClass().getClassLoader().loadClass(irenderer);    } catch (    ClassNotFoundException cnfe) {      throw new RuntimeException("Missing renderer class");    }    if (rendererClass != null) {      try {        constructor=rendererClass.getConstructor(new Class[]{});      } catch (      NoSuchMethodException nsme) {        throw new RuntimeException("Missing renderer constructor");      }      if (constructor != null) {        try {          pg=(PGraphics)constructor.newInstance();        } catch (        InvocationTargetException e) {          e.printStackTrace();          throw new RuntimeException(e.getMessage());        }catch (        IllegalAccessException e) {          e.printStackTrace();          throw new RuntimeException(e.getMessage());        }catch (        InstantiationException e) {          e.printStackTrace();          throw new RuntimeException(e.getMessage());        }catch (        IllegalArgumentException e) {          e.printStackTrace();        }      }    }  }  pg.setParent(this);  pg.setPrimary(false);  pg.setSize(iwidth,iheight);  return pg;}  }
class C{  protected SurfaceData initAcceleratedSurface(){  SurfaceData sData;  Component comp=vImg.getComponent();  WComponentPeer peer=(comp != null) ? (WComponentPeer)comp.getPeer() : null;  try {    boolean createVSynced=false;    boolean forceback=false;    if (context instanceof Boolean) {      forceback=((Boolean)context).booleanValue();      if (forceback) {        BufferCapabilities caps=peer.getBackBufferCaps();        if (caps instanceof ExtendedBufferCapabilities) {          ExtendedBufferCapabilities ebc=(ExtendedBufferCapabilities)caps;          if (ebc.getVSync() == VSYNC_ON && ebc.getFlipContents() == COPIED) {            createVSynced=true;            forceback=false;          }        }      }    }    if (forceback) {      sData=WGLSurfaceData.createData(peer,vImg,FLIP_BACKBUFFER);    } else {      WGLGraphicsConfig gc=(WGLGraphicsConfig)vImg.getGraphicsConfig();      ColorModel cm=gc.getColorModel(vImg.getTransparency());      int type=vImg.getForcedAccelSurfaceType();      if (type == OGLSurfaceData.UNDEFINED) {        type=gc.isCapPresent(CAPS_EXT_FBOBJECT) ? OGLSurfaceData.FBOBJECT : OGLSurfaceData.PBUFFER;      }      if (createVSynced) {        sData=WGLSurfaceData.createData(peer,vImg,type);      } else {        sData=WGLSurfaceData.createData(gc,vImg.getWidth(),vImg.getHeight(),cm,vImg,type);      }    }  } catch (  NullPointerException ex) {    sData=null;  }catch (  OutOfMemoryError er) {    sData=null;  }  return sData;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public int hashCode(){  return value;}  }
class C{  public static void main(String[] args){  runCLIApplication(ClassifierHoldoutEvaluationTask.class,args);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:42.436 -0500",hash_original_method="5FB5567CF156CEA2F5335691822C90DD",hash_generated_method="B368D6282366BEBE3AE8D6F6FEDFEAE5") public ProxyRequireParser(String require){  super(require);}  }
class C{  public static boolean isChinese(char c){  return (PinyinData.MIN_VALUE <= c && c <= PinyinData.MAX_VALUE && getPinyinCode(c) > 0) || PinyinData.CHAR_12295 == c;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean allowed=getBool(stack);  String profile=getString(stack);  String perm=getString(stack);  if (Permissions.hasPermission(Permissions.PERMISSION_SECURITY,stack.getUIMgr()))   Permissions.setPermission(perm,profile,allowed);  return null;}  }
class C{  private static long posOfPhi(final double phi,final long n){  final long pos=(long)Math.floor(phi * n);  return (pos == n) ? n - 1 : pos;}  }
class C{  @RequestMapping(value="/name/{serialId}",method=RequestMethod.PUT) @ResponseStatus(value=HttpStatus.OK) public void name(@PathVariable(value="serialId") final String serialId,@RequestBody final String name){  SERIAL_NAME_MAP.put(serialId,name == null ? "" : name);}  }
class C{  void optimize(){  calculateBestPlan();  bestPlan.removeUnusableIndexConditions();  TableFilter[] f2=bestPlan.getFilters();  topFilter=f2[0];  for (int i=0; i < f2.length - 1; i++) {    f2[i].addJoin(f2[i + 1],false,false,null);  }  for (  TableFilter f : f2) {    PlanItem item=bestPlan.getItem(f);    f.setPlanItem(item);  }}  }
class C{  @Override public <NV extends NumberVector>NV projectRelativeScaledToDataSpace(double[] v,NumberVector.Factory<NV> prototype){  final int dim=v.length;  double[] vec=new double[dim];  for (int d=0; d < dim; d++) {    vec[d]=scales[d].getRelativeUnscaled(v[d]);  }  return prototype.newNumberVector(vec);}  }
class C{  @Override protected final boolean request(final long size,final boolean force,AtomicBoolean shortStatus){  if (size == 0l)   return true;  final boolean unknown=size < 0l;  final boolean r=unknown ? properState(force) : size < available(force);  shortStatus.set(!r);  return r;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  private void writeName(DataOutputStream os,MLArray array) throws IOException {  ByteArrayOutputStream buffer=new ByteArrayOutputStream();  DataOutputStream bufferDOS=new DataOutputStream(buffer);  byte[] nameByteArray=array.getNameToByteArray();  buffer=new ByteArrayOutputStream();  bufferDOS=new DataOutputStream(buffer);  bufferDOS.write(nameByteArray);  OSArrayTag tag=new OSArrayTag(16,buffer.toByteArray());  tag.writeTo(os);}  }
class C{  @RequestMapping(value="/fe/taxreceipts/process/check",method=RequestMethod.POST) public ResponseEntity<String> check(@RequestParam(value="transactionId",required=true) final String transactionId,@RequestParam(value="counterSignature",required=true) final String counterSignature){  HttpHeaders responseHeaders=super.createBasicHttpHeaderResponse(APPLICATION_JSON);  Gson gson=new GsonBuilder().setDateFormat(Constants.DATE_FORMAT).setExclusionStrategies(new ResultProcessStatusExclusion()).create();  ResultResponse resultResponse;  try {    OCRTransaction ocrTransaction=ocrTransactionDAO.findById(new OCRTransaction(transactionId));    Assert.notNull(ocrTransaction);    Assert.isTrue(signatureUtils.validateCounterSignature(ocrTransaction.getSignature(),counterSignature));    resultResponse=new ResultProcessStatusResponse(true,ocrTransaction);  } catch (  Exception ex) {    ex.printStackTrace();    resultResponse=new ResultResponse(false);  }  return new ResponseEntity<>(gson.toJson(resultResponse),responseHeaders,HttpStatus.OK);}  }
class C{  public ZipUtil(File file){  open(file);}  }
class C{  public void inheritDoc(int i){}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/varray-change") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskList changeVolumesVirtualArray(VolumeVirtualArrayChangeParam param) throws InternalException, APIException {  _log.info("Request to change varray for volumes {}",param.getVolumes());  return changeVirtualArrayForVolumes(param.getVolumes(),param.getVirtualArray());}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (from == null) {    throw new NullPointerException();  }  if (to == null) {    throw new NullPointerException();  }}  }
class C{  public APIError(int statusCode,String message){  this.type=Type.STREAM_ERROR;  this.message=message;  this.statusCode=statusCode;  this.expected=null;}  }
class C{  public void testFieldTEN(){  String oneS="10";  double oneD=10.0;  assertEquals("incorrect string value",oneS,BigDecimal.TEN.toString());  assertEquals("incorrect double value",oneD,BigDecimal.TEN.doubleValue(),0);}  }
class C{  void dispatchOnLauncherTransitionStart(View v,boolean animated,boolean toWorkspace){  if (v instanceof LauncherTransitionable) {    ((LauncherTransitionable)v).onLauncherTransitionStart(mLauncher,animated,toWorkspace);  }  dispatchOnLauncherTransitionStep(v,0f);}  }
class C{  public int convert(String value){  if (Strings.isNullOrEmpty(value) || TypeUtils.MISSING_INDICATORS.contains(value) || value.equals("-1")) {    return (int)ColumnType.LOCAL_DATE.getMissingValue();  }  value=Strings.padStart(value,4,'0');  if (selectedFormatter == null) {    selectedFormatter=TypeUtils.getDateFormatter(value);  }  LocalDate date;  try {    date=LocalDate.parse(value,selectedFormatter);  } catch (  DateTimeParseException e) {    selectedFormatter=TypeUtils.DATE_FORMATTER;    date=LocalDate.parse(value,selectedFormatter);  }  return PackedLocalDate.pack(date);}  }
class C{  public byte[] elements(){  return elements;}  }
class C{  public void add(final InsnList insns){  if (insns.size == 0) {    return;  }  size+=insns.size;  if (last == null) {    first=insns.first;    last=insns.last;  } else {    AbstractInsnNode elem=insns.first;    last.next=elem;    elem.prev=last;    last=insns.last;  }  cache=null;  insns.removeAll(false);}  }
class C{  public synchronized Iterator sigs(){  return iterator(false,false);}  }
class C{  public AppletServer(int port) throws IOException, NotFoundException, CannotCompileException {  this(ClassPool.getDefault(),new StubGenerator(),port);}  }
class C{  public static String delegateAndAcceptAssignment(HttpServletRequest request,HttpServletResponse response){  ServletContext ctx=(ServletContext)request.getAttribute("servletContext");  RequestHandler rh=(RequestHandler)ctx.getAttribute("_REQUEST_HANDLER_");  Locale locale=UtilHttp.getLocale(request);  if (addToOrderRole(request)) {    try {      EventHandler eh=rh.getEventFactory().getEventHandler("service");      eh.invoke(new Event("service","","wfAcceptRoleAssignment",true),null,request,response);    } catch (    EventHandlerException e) {      Debug.logError(e,"Invocation error",module);      request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderFailedToInvokeTheWfDelegateAndAcceptAssignmentService",locale));      return "error";    }    return "success";  }  return "error";}  }
class C{  private TinyPlanetImage createTinyPlanet(){  mResultLock.lock();  try {    mResultBitmap.recycle();    mResultBitmap=null;    mSourceBitmap.recycle();    mSourceBitmap=null;  }  finally {    mResultLock.unlock();  }  Bitmap sourceBitmap=createPaddedSourceImage(mSourceImageUri,false);  int width=sourceBitmap.getWidth();  int height=sourceBitmap.getHeight();  int outputSize=width / 2;  Bitmap resultBitmap=Bitmap.createBitmap(outputSize,outputSize,Bitmap.Config.ARGB_8888);  TinyPlanetNative.process(sourceBitmap,width,height,resultBitmap,outputSize,mCurrentZoom,mCurrentAngle);  sourceBitmap.recycle();  sourceBitmap=null;  ByteArrayOutputStream jpeg=new ByteArrayOutputStream();  resultBitmap.compress(CompressFormat.JPEG,100,jpeg);  return new TinyPlanetImage(addExif(jpeg.toByteArray()),outputSize);}  }
class C{  static TypeValue instantiateParameterizedType(Context cx,ParameterizedName pname){  TypeValue cframe=getTypeValue(cx,pname);  if (cframe.resolved)   return cframe;  ObjectValue prot_ns=cx.getNamespace(pname.toString(),Context.NS_PROTECTED);  ObjectValue static_prot_ns=cx.getNamespace(pname.toString(),Context.NS_STATIC_PROTECTED);  cframe=TypeValue.defineTypeValue(cx,new ClassBuilder(pname,prot_ns,static_prot_ns),pname,TYPE_object);  cframe.type=cx.typeType().getDefaultTypeInfo();  ObjectValue iframe=new ObjectValue(cx,new InstanceBuilder(pname),cframe);  cframe.prototype=iframe;  TypeValue uninstantiated_generic=cx.vectorObjType();  FlowAnalyzer.inheritClassSlotsStatic(cframe,iframe,uninstantiated_generic,cx);  cframe.copyInstantiationData(uninstantiated_generic);  return cframe;}  }
class C{  protected void startTag(TagElement tag) throws ChangedCharSetException {  Element elem=tag.getElement();  if (!elem.isEmpty() || ((last != null) && !last.breaksFlow()) || (textpos != 0)) {    handleText(tag);  } else {    last=tag;    space=false;  }  lastBlockStartPos=currentBlockStartPos;  for (AttributeList a=elem.atts; a != null; a=a.next) {    if ((a.modifier == REQUIRED) && ((attributes.isEmpty()) || ((!attributes.isDefined(a.name)) && (!attributes.isDefined(HTML.getAttributeKey(a.name)))))) {      error("req.att ",a.getName(),elem.getName());    }  }  if (elem.isEmpty()) {    handleEmptyTag(tag);  } else {    recent=elem;    stack=new TagStack(tag,stack);    handleStartTag(tag);  }}  }
class C{  public Period negated(){  return multipliedBy(-1);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4mfPackage.PROJECT_REFERENCE__PROJECT:    setProject((SimpleProjectDescription)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  <T>List<ValidationRemark> validate(TableDefinition<T> def,boolean throwError){  List<ValidationRemark> remarks=New.arrayList();  if (!Modifier.isPublic(def.getModelClass().getModifiers())) {    remarks.add(error(table,"SCHEMA",MessageFormat.format("Class {0} MUST BE PUBLIC!",def.getModelClass().getCanonicalName())).throwError(throwError));  }  if (!StringUtils.isNullOrEmpty(schema)) {    if (StringUtils.isNullOrEmpty(def.schemaName)) {      remarks.add(consider(table,"SCHEMA",MessageFormat.format("@{0}(name={1})",JQSchema.class.getSimpleName(),schema)));    } else     if (!schema.equalsIgnoreCase(def.schemaName)) {      remarks.add(error(table,"SCHEMA",MessageFormat.format("@{0}(name={1}) != {2}",JQSchema.class.getSimpleName(),def.schemaName,schema)).throwError(throwError));    }  }  for (  IndexInspector index : indexes.values()) {    validate(remarks,def,index,throwError);  }  for (  FieldDefinition fieldDef : def.getFields()) {    validate(remarks,fieldDef,throwError);  }  return remarks;}  }
class C{  public void add(final Player player){  final String playerName=player.getName();  if (playerName != null) {    players.put(playerName.toLowerCase(),player);  } else {    throw new IllegalArgumentException("can't add player without name");  }}  }
class C{  @Override public void send(final Destination destination,final Message message,final int deliveryMode,final int priority,final long timeToLive) throws JMSException {  session.lock();  try {    if (ActiveMQRAMessageProducer.trace) {      ActiveMQRALogger.LOGGER.trace("send " + this + " destination="+ destination+ " message="+ message+ " deliveryMode="+ deliveryMode+ " priority="+ priority+ " ttl="+ timeToLive);    }    checkState();    producer.send(destination,message,deliveryMode,priority,timeToLive);    if (ActiveMQRAMessageProducer.trace) {      ActiveMQRALogger.LOGGER.trace("sent " + this + " result="+ message);    }  }  finally {    session.unlock();  }}  }
class C{  public static void createClientCache1(String host,Integer port1) throws Exception {  int PORT1=port1.intValue();  Properties props=new Properties();  props.setProperty(MCAST_PORT,"0");  props.setProperty(LOCATORS,"");  new PutAllDUnitTest().createCache(props);  props.setProperty("retryAttempts","2");  props.setProperty("endpoints","ep1=" + host + ":"+ PORT1);  props.setProperty("redundancyLevel","-1");  props.setProperty("establishCallbackConnection","true");  props.setProperty("LBPolicy","Sticky");  props.setProperty("readTimeout","2000");  props.setProperty("socketBufferSize","1000");  props.setProperty("retryInterval","250");  props.setProperty("connectionsPerServer","2");  AttributesFactory factory=new AttributesFactory();  factory.setScope(Scope.DISTRIBUTED_ACK);  PoolImpl p=(PoolImpl)ClientServerTestCase.configureConnectionPool(factory,host,PORT1,-1,true,-1,2,null);  CacheListener clientListener=new HAEventIdPropagationListenerForClient1();  factory.setCacheListener(clientListener);  RegionAttributes attrs=factory.create();  cache.createRegion(REGION_NAME,attrs);  Region region=cache.getRegion(Region.SEPARATOR + REGION_NAME);  assertNotNull(region);  region.registerInterest("ALL_KEYS",InterestResultPolicy.NONE);  pool=p;}  }
class C{  private Vector showTextFixedWidth(String text,int align){  Vector comps=new Vector();  if ((text == null) || (text.equals(""))) {    return comps;  }  int spaceW=width - x;  Vector words=getWords(text,align,false);  if (words.size() > 0) {    int w=0;    String wordStr="";    if ((CSSParser.isWhiteSpace(text.charAt(0))) && (curLine.getComponentCount() != 0)) {      wordStr=" ";    }    while (w < words.size()) {      String nextWord=(String)words.elementAt(w);      String space="";      if ((!wordStr.equals("")) && (!wordStr.equals(" "))) {        space=" ";      }      if (font.stringWidth(wordStr + space + nextWord) > spaceW - 2) {        comps.addElement(addString(wordStr,align));        newLineIfNotEmpty(align);        spaceW=width - x;        wordStr=nextWord;      } else {        wordStr+=space + nextWord;      }      w++;    }    if (CSSParser.isWhiteSpace(text.charAt(text.length() - 1))) {      wordStr+=" ";    }    comps.addElement(addString(wordStr,align));  }  return comps;}  }
class C{  public StaxWriter(final QNameMap qnameMap,final XMLStreamWriter out,final boolean writeEnclosingDocument,final boolean namespaceRepairingMode) throws XMLStreamException {  this(qnameMap,out,writeEnclosingDocument,namespaceRepairingMode,new XmlFriendlyNameCoder());}  }
class C{  public final void testRegexWithContextParameter(){  assertNotNull(Validators.regex(getContext(),Pattern.compile(".")));}  }
class C{  protected void load(File file) throws IOException {  BufferedReader reader=null;  try {    reader=new BufferedReader(new FileReader(file));    load(reader);  }  finally {    if (reader != null) {      reader.close();    }  }}  }
class C{  public boolean isNullable(){  return m_isNullable;}  }
class C{  protected boolean constantZero(List<V> column,Adapter adapter){  for (int i=0, s=adapter.size(column); i < s; i++) {    if (adapter.get(column,i) != 0.) {      return false;    }  }  return true;}  }
class C{  public static <I,A>Parser<I,A> choice(Parser<I,? extends A> p1,Parser<I,? extends A> p2){  return or(p1,p2);}  }
class C{  public void insertVariable(){  ScriptStep variableStep=ScriptStepFactory.createVariable(getVariableKey(),getVariableValue());  steps.add(getInsertIndex(),variableStep);  variableKey="";  variableValue="";  reindexScriptSteps();}  }
class C{  public boolean isComplete(){  return this.complete;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (curNumberOfParameters == 1) {    String maskString=stack.peek().toString();    int mediaMask=getMediaMask(stack);    return Wizard.getInstance().getFiles(mediaMask,maskString.indexOf("L") != -1);  } else   return Wizard.getInstance().getFiles();}  }
class C{  public void send(final OutputStream outputStream) throws IOException {  PacketOutputStream pos=(PacketOutputStream)outputStream;  pos.startPacket(0);  pos.write(Packet.COM_INIT_DB);  pos.write(database.getBytes("UTF-8"));  pos.finishPacketWithoutRelease(true);  pos.releaseBuffer();}  }
class C{  public boolean isWrapperFor(Class<?> iface){  return false;}  }
class C{  @Override public double computeScoreNormalization(double cooccurrence,int similarNodeDegree,int nodeDegree){  return 1.0 / (Math.sqrt(similarNodeDegree) * Math.sqrt(Math.abs(similarNodeDegree - nodeDegree) + 1.0));}  }
class C{  protected void onDeliverToNext(QueuedInputEvent q){  if (mNext != null) {    mNext.deliver(q);  } else {    finishInputEvent(q);  }}  }
class C{  private static void enlarge(Mat img,Size approxSize,boolean integerScale){  double scale=makeScale(img,approxSize,true,integerScale);  if (MathUtil.equal(scale,1) || scale < 1) {    return;  }  scale(img,scale);}  }
class C{  public TypingStartHandler(ImplDiscordAPI api){  super(api,true,"TYPING_START");}  }
class C{  public static MethodDeclaration findParentMethodDeclaration(ASTNode node){  while (node != null) {    if (node instanceof MethodDeclaration) {      return (MethodDeclaration)node;    } else     if (node instanceof BodyDeclaration || node instanceof AnonymousClassDeclaration || node instanceof LambdaExpression) {      return null;    }    node=node.getParent();  }  return null;}  }
class C{  public void connect() throws XMPPException {  connectUsingConfiguration(config);  if (connected && wasAuthenticated) {    if (isAnonymous()) {      loginAnonymously();    } else {      login(config.getUsername(),config.getPassword(),config.getResource());    }    notifyReconnection();  }}  }
class C{  public CallerMethodsTreeStructure(@NotNull Project project,@NotNull PsiMethod method,final String scopeType){  super(project,new CallHierarchyNodeDescriptor(project,null,method,true,false));  myScopeType=scopeType;}  }
class C{  public void call(String name,JsonOutput.JsonUnescaped json) throws IOException {  if (generator.isExcludingFieldsNamed(name)) {    return;  }  writeName(name);  verifyValue();  writer.write(json.toString());}  }
class C{  public ShopImageNameStrategyImpl(final String relativeInternalRootDirectory,final GenericDAO<AttrValueShop,Long> attrValueShopDao,final LanguageService languageService){  super(Constants.SHOP_IMAGE_REPOSITORY_URL_PATTERN,relativeInternalRootDirectory,languageService);  this.attrValueShopDao=attrValueShopDao;}  }
class C{  public Instances resampleWithWeights(Random random,double[] weights,boolean[] sampled){  return resampleWithWeights(random,weights,sampled,false);}  }
class C{  private void locateBlockByNumber(BlockInfo info,int blockNumber){  if (blockNumber < 0 || blockNumber >= blockCount)   throw new IndexOutOfBoundsException("Invalid XZ Block number: " + blockNumber);  if (info.blockNumber == blockNumber)   return;  for (int i=0; ; ++i) {    IndexDecoder index=(IndexDecoder)streams.get(i);    if (index.hasRecord(blockNumber)) {      index.setBlockInfo(info,blockNumber);      return;    }  }}  }
class C{  public MinRowExpression(){}  }
class C{  public static float calculateAspectRatio(float left,float top,float right,float bottom){  final float width=right - left;  final float height=bottom - top;  final float aspectRatio=width / height;  return aspectRatio;}  }
class C{  public boolean isSPD(){  return isspd;}  }
class C{  public static void d(String tag,String msg){  d(tag,msg,null);}  }
class C{  public SecureClassLoaderRepository(ClassLoaderRepository clr){  this.clr=clr;}  }
class C{  public IndexedCollectionCertStore(CertStoreParameters params) throws InvalidAlgorithmParameterException {  super(params);  if (!(params instanceof CollectionCertStoreParameters)) {    throw new InvalidAlgorithmParameterException("parameters must be CollectionCertStoreParameters");  }  Collection<?> coll=((CollectionCertStoreParameters)params).getCollection();  if (coll == null) {    throw new InvalidAlgorithmParameterException("Collection must not be null");  }  buildIndex(coll);}  }
class C{  public int search(int[] A,int target){  if (A == null || A.length == 0)   return -1;  int l=0;  int r=A.length - 1;  int m;  while (l <= r) {    m=l + (r - l) / 2;    if (A[m] == target)     return m;    if (A[m] >= A[l]) {      if (target >= A[l] && target < A[m]) {        r=m - 1;      } else       l=m + 1;    } else {      if (target > A[m] && target <= A[r]) {        l=m + 1;      } else       r=m - 1;    }  }  return -1;}  }
class C{  protected void paintNominal(Graphics gx){  setFonts(gx);  int numClasses;  numClasses=m_Instances.attribute(m_cIndex).numValues();  int maxLabelLen=0;  int idx=0;  int legendHeight;  int w=this.getWidth();  int hf=m_labelMetrics.getAscent();  for (int i=0; i < numClasses; i++) {    if (m_Instances.attribute(m_cIndex).value(i).length() > maxLabelLen) {      maxLabelLen=m_Instances.attribute(m_cIndex).value(i).length();      idx=i;    }  }  maxLabelLen=m_labelMetrics.stringWidth(m_Instances.attribute(m_cIndex).value(idx));  if (((w - (2 * m_HorizontalPad)) / (maxLabelLen + 5)) >= numClasses) {    legendHeight=1;  } else {    legendHeight=2;  }  int x=m_HorizontalPad;  int y=1 + hf;  int numToDo=((legendHeight == 1) ? numClasses : (numClasses / 2));  for (int i=0; i < numToDo; i++) {    gx.setColor(m_colorList.get(i));    if ((numToDo * maxLabelLen) > (w - (m_HorizontalPad * 2))) {      String val;      val=m_Instances.attribute(m_cIndex).value(i);      int sw=m_labelMetrics.stringWidth(val);      int rm=0;      if (sw > ((w - (m_HorizontalPad * 2)) / (numToDo))) {        int incr=(sw / val.length());        rm=(sw - ((w - (m_HorizontalPad * 2)) / numToDo)) / incr;        if (rm <= 0) {          rm=0;        }        if (rm >= val.length()) {          rm=val.length() - 1;        }        val=val.substring(0,val.length() - rm);        sw=m_labelMetrics.stringWidth(val);      }      NomLabel jj=new NomLabel(val,i);      jj.setFont(gx.getFont());      jj.setSize(m_labelMetrics.stringWidth(jj.getText()),m_labelMetrics.getAscent() + 4);      this.add(jj);      jj.setLocation(x,y);      jj.setForeground(m_colorList.get(i % m_colorList.size()));      x+=sw + 2;    } else {      NomLabel jj;      jj=new NomLabel(m_Instances.attribute(m_cIndex).value(i),i);      jj.setFont(gx.getFont());      jj.setSize(m_labelMetrics.stringWidth(jj.getText()),m_labelMetrics.getAscent() + 4);      this.add(jj);      jj.setLocation(x,y);      jj.setForeground(m_colorList.get(i % m_colorList.size()));      x+=((w - (m_HorizontalPad * 2)) / numToDo);    }  }  x=m_HorizontalPad;  y=1 + hf + 5+ hf;  for (int i=numToDo; i < numClasses; i++) {    gx.setColor(m_colorList.get(i));    if (((numClasses - numToDo + 1) * maxLabelLen) > (w - (m_HorizontalPad * 2))) {      String val;      val=m_Instances.attribute(m_cIndex).value(i);      int sw=m_labelMetrics.stringWidth(val);      int rm=0;      if (sw > ((w - (m_HorizontalPad * 2)) / (numClasses - numToDo + 1))) {        int incr=(sw / val.length());        rm=(sw - ((w - (m_HorizontalPad * 2)) / (numClasses - numToDo))) / incr;        if (rm <= 0) {          rm=0;        }        if (rm >= val.length()) {          rm=val.length() - 1;        }        val=val.substring(0,val.length() - rm);        sw=m_labelMetrics.stringWidth(val);      }      NomLabel jj=new NomLabel(val,i);      jj.setFont(gx.getFont());      jj.setSize(m_labelMetrics.stringWidth(jj.getText()),m_labelMetrics.getAscent() + 4);      this.add(jj);      jj.setLocation(x,y);      jj.setForeground(m_colorList.get(i % m_colorList.size()));      x+=sw + 2;    } else {      NomLabel jj;      jj=new NomLabel(m_Instances.attribute(m_cIndex).value(i),i);      jj.setFont(gx.getFont());      jj.setSize(m_labelMetrics.stringWidth(jj.getText()),m_labelMetrics.getAscent() + 4);      this.add(jj);      jj.setLocation(x,y);      jj.setForeground(m_colorList.get(i % m_colorList.size()));      x+=((w - (m_HorizontalPad * 2)) / (numClasses - numToDo));    }  }}  }
class C{  private void lobReset(){  m_lobInfo=null;}  }
class C{  public void loadArgArray(){  push(argumentTypes.length);  newArray(OBJECT_TYPE);  for (int i=0; i < argumentTypes.length; i++) {    dup();    push(i);    loadArg(i);    box(argumentTypes[i]);    arrayStore(OBJECT_TYPE);  }}  }
class C{  @Override public void drawSeries(Canvas canvas,Paint paint,List<Float> points,XYSeriesRenderer renderer,float yAxisValue,int seriesIndex,int startIndex){  paint.setColor(renderer.getColor());  paint.setStyle(Style.FILL);  int length=points.size();  XYValueSeries series=(XYValueSeries)mDataset.getSeriesAt(seriesIndex);  double max=series.getMaxValue();  double coef=MAX_BUBBLE_SIZE / max;  for (int i=0; i < length; i+=2) {    double size=series.getValue(startIndex + i / 2) * coef + MIN_BUBBLE_SIZE;    drawCircle(canvas,paint,points.get(i),points.get(i + 1),(float)size);  }}  }
class C{  public double dualCol(int j){  validate(j);  return py[j];}  }
class C{  void revokeResalePermissions(List<POResalePermissionDetails> permissionsToRevoke) throws ObjectNotFoundException, ServiceOperationException, OrganizationAuthorityException, OperationNotPermittedException {  ArgumentValidator.notNull("permissionsToRevoke",permissionsToRevoke);  for (  POResalePermissionDetails resalePerm : permissionsToRevoke) {    ArgumentValidator.notNull("service",resalePerm.getService());    ArgumentValidator.notNull("grantor",resalePerm.getGrantor());    ArgumentValidator.notNull("grantee",resalePerm.getGrantee());    String templateId=resalePerm.getService().getServiceId();    String grantorId=resalePerm.getGrantor().getOrganizationId();    String granteeId=resalePerm.getGrantee().getOrganizationId();    partnerSrvProv.revokeResalePermission(templateId,grantorId,granteeId);  }}  }
class C{  void write_header(long iterations,long dimensions,double endl,double endr,boolean b,double kappa,long nrow,long ncol,long vals){  printf("SOLVING THE [A^TA] EIGENPROBLEM\n");  printf("NO. OF ROWS               = %6d\n",nrow);  printf("NO. OF COLUMNS            = %6d\n",ncol);  printf("NO. OF NON-ZERO VALUES    = %6d\n",vals);  printf("MATRIX DENSITY            = %6.2f%%\n",((float)vals / nrow) * 100 / ncol);  printf("MAX. NO. OF LANCZOS STEPS = %6d\n",iterations);  printf("MAX. NO. OF EIGENPAIRS    = %6d\n",dimensions);  printf("LEFT  END OF THE INTERVAL = %9.2E\n",endl);  printf("RIGHT END OF THE INTERVAL = %9.2E\n",endr);  printf("KAPPA                     = %9.2E\n",kappa);  printf("\n");  return;}  }
class C{  public static void checkTimeout(){  ExecutionTracer tracer=getExecutionTracer();  if (tracer.disabled)   return;  if (tracer.killSwitch) {    if (!isInStaticInit())     throw new TestCaseExecutor.TimeoutExceeded();  }}  }
class C{  public void stroke(int rgb){  g.stroke(rgb);}  }
class C{  public boolean isValid(){  Object oo=get_Value(COLUMNNAME_IsValid);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public void add(final String obj){  throw new UnsupportedOperationException("add() is unsupported");}  }
class C{  protected AlgorithmParameters engineGetParameters(){  return core.getParameters("AES");}  }
class C{  public static char[] translatedName(char[] name){  if (name == null)   return null;  int nameLength=name.length;  char[] newName=new char[nameLength];  for (int i=0; i < nameLength; i++) {    if (name[i] == '/') {      newName[i]='.';    } else {      newName[i]=name[i];    }  }  return newName;}  }
class C{  public ToStringBuilder append(final String fieldName,final char[] array){  style.append(buffer,fieldName,array,null);  return this;}  }
class C{  NativeMethod(TypeReference declaringClass,MemberReference memRef,short modifiers,TypeReference[] exceptionTypes,Atom signature,RVMAnnotation[] annotations,RVMAnnotation[][] parameterAnnotations,Object annotationDefault){  super(declaringClass,memRef,modifiers,exceptionTypes,signature,annotations,parameterAnnotations,annotationDefault);}  }
class C{  private void checkForPendingTasks(URI tenant,Collection<? extends DataObject> dataObjects){  BlockServiceUtils.checkForPendingTasks(tenant,dataObjects,_dbClient);}  }
class C{  public Example2DataTableRowIterator(Iterator<Example> reader,List<Attribute> allAttributes,Attribute idAttribute){  this.reader=reader;  this.allAttributes=allAttributes;  this.idAttribute=idAttribute;}  }
class C{  @Override public void updateTime(String columnLabel,Time x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateTime(" + quote(columnLabel) + ", x);");    }    update(columnLabel,x == null ? (Value)ValueNull.INSTANCE : ValueTime.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public AffinityKey(K key){  A.notNull(key,"key");  this.key=key;}  }
class C{  private void sendDrawCall(){  final ByteBuf data=Unpooled.buffer();  data.writeBoolean(false);  data.writeBytes(drawCall);  getCasing().sendData(getFace(),data);}  }
class C{  private void processConfigInitAndNext(){  String name=this.config.getInit();  if (name.length() != 0) {    Object init=this.defns.get(name);    if (init == null) {      Assert.fail(EC.TLC_CONFIG_SPECIFIED_NOT_DEFINED,new String[]{"initial predicate",name});    }    if (!(init instanceof OpDefNode)) {      Assert.fail(EC.TLC_CONFIG_ID_MUST_NOT_BE_CONSTANT,new String[]{"initial predicate",name});    }    OpDefNode def=(OpDefNode)init;    if (def.getArity() != 0) {      Assert.fail(EC.TLC_CONFIG_ID_REQUIRES_NO_ARG,new String[]{"initial predicate",name});    }    this.initPredVec.addElement(new Action(def.getBody(),Context.Empty));  }  name=this.config.getNext();  if (name.length() != 0) {    Object next=this.defns.get(name);    if (next == null) {      Assert.fail(EC.TLC_CONFIG_SPECIFIED_NOT_DEFINED,new String[]{"next state action",name});    }    if (!(next instanceof OpDefNode)) {      Assert.fail(EC.TLC_CONFIG_ID_MUST_NOT_BE_CONSTANT,new String[]{"next state action",name});    }    OpDefNode def=(OpDefNode)next;    if (def.getArity() != 0) {      Assert.fail(EC.TLC_CONFIG_ID_REQUIRES_NO_ARG,new String[]{"next state action",name});    }    this.nextPred=new Action(def.getBody(),Context.Empty);  }}  }
class C{  protected void update(){  String val=element.getAttributeNS(namespaceURI,localName);  if (val.length() == 0) {    baseVal=defaultValue;  } else {    baseVal=getEnumerationNumber(val);  }  valid=true;}  }
class C{  public FeedForward(final Network network,int[] nodesPerLayer,Point2D initialPosition){  super(network);  LinearRule rule=new LinearRule();  Neuron neuron=new Neuron(network,rule);  rule.setIncrement(1);  rule.setLowerBound(0);  buildNetwork(network,nodesPerLayer,initialPosition,neuron);}  }
class C{  public void zoneAddInitiatorStep(URI vplexURI,URI exportURI,List<URI> initiatorURIs,URI varrayURI,String stepId) throws WorkflowException {  String initListStr=Joiner.on(',').join(initiatorURIs);  try {    ExportGroup exportGroup=getDataObject(ExportGroup.class,exportURI,_dbClient);    _log.info(String.format("Adding initiators %s to ExportGroup %s (%s)",initListStr,exportGroup.getLabel(),exportGroup.getId()));    List<Initiator> initiators=_dbClient.queryObject(Initiator.class,initiatorURIs);    List<ExportMask> exportMasks=ExportMaskUtils.getExportMasks(_dbClient,exportGroup,vplexURI);    Map<URI,List<URI>> maskToInitiatorsMap=new HashMap<URI,List<URI>>();    ExportMask sharedExportMask=VPlexUtil.getSharedExportMaskInDb(exportGroup,vplexURI,_dbClient,varrayURI,null,null);    for (    ExportMask exportMask : exportMasks) {      boolean shared=false;      if (sharedExportMask != null) {        if (sharedExportMask.getId().equals(exportMask.getId())) {          shared=true;        }      }      maskToInitiatorsMap.put(exportMask.getId(),new ArrayList<URI>());      Set<URI> exportMaskHosts=VPlexUtil.getExportMaskHosts(_dbClient,exportMask,shared);      for (      Initiator initiator : initiators) {        if (exportMaskHosts.contains(VPlexUtil.getInitiatorHost(initiator))) {          maskToInitiatorsMap.get(exportMask.getId()).add(initiator.getId());        }      }    }    _networkDeviceController.zoneExportAddInitiators(exportURI,maskToInitiatorsMap,stepId);  } catch (  Exception ex) {    _log.error("Exception adding initators: " + ex.getMessage(),ex);    String opName=ResourceOperationTypeEnum.ADD_INITIATOR_WORKFLOW_STEP.getName();    ServiceError serviceError=VPlexApiException.errors.zoneAddInitiatorStepFailed(opName,ex);    WorkflowStepCompleter.stepFailed(stepId,serviceError);  }}  }
class C{  public double logDensity(double value){  updateMeanAndVariance();  double val=-0.5 * (CONST + Math.log(m_Variance) + (value - m_Mean) * (value - m_Mean) / m_Variance);  return val;}  }
class C{  public void makeSet(E element){  if (!elementToSet.containsKey(element)) {    Set<E> set=new IdentityHashSet<E>();    set.add(element);    elementToSet.put(element,set);    disjointSets.add(set);  }}  }
class C{  protected void sequence_ExportedVariableStatement(ISerializationContext context,ExportedVariableStatement semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  protected static void init(){  String notificationfactoryClassName=null;  try {    notificationfactoryClassName=System.getProperty(NOTIFICATION_FACTORY_NAME);  } catch (  SecurityException e) {    throw new RuntimeException(e);  }  if (notificationfactoryClassName != null) {    Class<?> nfc;    try {      nfc=Class.forName(notificationfactoryClassName);      factory=(INotificationManagerFactory)nfc.newInstance();    } catch (    ClassNotFoundException|InstantiationException|IllegalAccessException e) {      throw new RuntimeException(e);    }  } else {    factory=new SyslogNotificationFactory();  }}  }
class C{  public SoftDoublyIndexedTable(){  table=new Entry[INITIAL_CAPACITY];}  }
class C{  public MemoryHandler(int size,Level pushLevel,FileHandler handler){  this.pushLevelC=(pushLevel == null) ? DEFAULT_PUSHLEVEL : pushLevel;  if (size <= 0)   size=DEFAULT_SIZE;  buffer=new LogRecord[size];  start=0;  count=0;  try {    targetC=handler;    targetC.setLevel(pushLevelC);    targetC.setFormatter(new SimpleLogFormatter());  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public void push(Vertex vertex){  log("push",Level.FINE,vertex);  this.contextStack.add(vertex.getId());  while (this.contextStack.size() > CONTEXT_SIZE) {    this.contextStack.remove(0);  }}  }
class C{  public int search(final char[] a,final int from,final int to){  final int n=pattern.length;  if (n == 0)   return from > to ? to : (from < 0 ? 0 : from);  if (n == 1)   return indexOf(a,from,to);  final char[] p=pattern;  final char last=p[n - 1];  final int m1=to - 1;  final int[] shift=badCharShift;  final int[] asciiShift=asciiBadCharShift;  final int m=mask;  final int hs=hashShift;  int i=(from < 0 ? 0 : from) + n - 1, j, k;  char c;  if (caseSensitive) {    while (i < m1) {      if (a[i] == last) {        j=n - 1;        k=i;        while (j-- != 0 && a[--k] == p[j])         ;        if (j < 0)         return k;      }      if ((c=a[++i]) < 128)       i+=asciiShift[c]; else {        j=shift[c * c & m];        k=shift[(c * PHI2) >> hs & m];        i+=j > k ? j : k;      }    }    if (i == m1) {      j=n;      while (j-- != 0 && a[i--] == p[j])       ;      if (j < 0)       return i + 1;    }    return -1;  } else   if (asciiCase) {    while (i < m1) {      if (asciiToLowerCase(a[i]) == last) {        j=n - 1;        k=i;        while (j-- != 0 && asciiToLowerCase(a[--k]) == p[j])         ;        if (j < 0)         return k;      }      if ((c=asciiToLowerCase(a[++i])) < 128)       i+=asciiShift[c]; else {        j=shift[c * c & m];        k=shift[(c * PHI2) >> hs & m];        i+=j > k ? j : k;      }    }    if (i == m1) {      j=n;      while (j-- != 0 && asciiToLowerCase(a[i--]) == p[j])       ;      if (j < 0)       return i + 1;    }    return -1;  } else {    while (i < m1) {      if (unicodeToLowerCase(a[i]) == last) {        j=n - 1;        k=i;        while (j-- != 0 && unicodeToLowerCase(a[--k]) == p[j])         ;        if (j < 0)         return k;      }      if ((c=unicodeToLowerCase(a[++i])) < 128)       i+=asciiShift[c]; else {        j=shift[c * c & m];        k=shift[(c * PHI2) >> hs & m];        i+=j > k ? j : k;      }    }    if (i == m1) {      j=n;      while (j-- != 0 && unicodeToLowerCase(a[i--]) == p[j])       ;      if (j < 0)       return i + 1;    }    return -1;  }}  }
class C{  public String toString(){  return "MDesktop ID=" + AD_Desktop_ID + " "+ Name;}  }
class C{  public static Range<String> valueOfString(String str){  return Range.valueOf(str,null);}  }
class C{  public void updateSizes(@ProgressDrawableSize int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  private void convertToBinary(final Query qry){  if (ctx.binaryMarshaller()) {    if (qry instanceof SqlQuery) {      final SqlQuery sqlQry=(SqlQuery)qry;      convertToBinary(sqlQry.getArgs());    } else     if (qry instanceof SpiQuery) {      final SpiQuery spiQry=(SpiQuery)qry;      convertToBinary(spiQry.getArgs());    } else     if (qry instanceof SqlFieldsQuery) {      final SqlFieldsQuery fieldsQry=(SqlFieldsQuery)qry;      convertToBinary(fieldsQry.getArgs());    }  }}  }
class C{  public static ServiceParameterException parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  ServiceParameterException object=new ServiceParameterException();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {      while (!reader.isEndElement())       reader.next();      return object;    }    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","ServiceParameterException").equals(reader.getName())) {          nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");          if ("true".equals(nillableValue) || "1".equals(nillableValue)) {            object.setServiceParameterException(null);            reader.next();          } else {            object.setServiceParameterException(ApplicationExceptionBean.Factory.parse(reader));          }        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public String toString(){  return "move " + tile;}  }
class C{  public DiskAccessException(String msg,String regionName){  this(msg,null,regionName);}  }
class C{  public boolean decodeContentLocation(int startIndex){  return decodeTextString(startIndex);}  }
class C{  public HaltonSequence(){  this(2);}  }
class C{  public RemoveCouponEventCommandImpl(final ShoppingCartCommandRegistry registry){  super(registry);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:19.045 -0500",hash_original_method="9D8B0292BF61165D11B09A1D07C57FAA",hash_generated_method="E361570C5B288849B1CC1922D12008B8") @Deprecated public static CacheResult createCacheFile(String url,int statusCode,Headers headers,String mimeType,boolean forceCache){  if (JniUtil.useChromiumHttpStack()) {    return null;  }  return createCacheFile(url,statusCode,headers,mimeType,0,forceCache);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.TRACE_CASE___TRACE_CASE_DEF_1:    return getTraceCaseDef_1();case UmplePackage.TRACE_CASE___TRACE_CASE_ACTIVATION_1:  return getTraceCaseActivation_1();case UmplePackage.TRACE_CASE___TRACE_CASE_DEACTIVATION_1:return getTraceCaseDeactivation_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void remove(SARAnnotation annotation){  if (annotation != null) {    annotationLayer.removeAnnotation(annotation);    if (currentAnnotation == annotation)     currentAnnotation=null;    if (annotation.getOwner() != null)     annotation.getOwner().markDirty();  }}  }
class C{  public void map(String value,Configuration configuration,Context context) throws IOException {  LOG.info("Processing file {}",value);  InputStream in=null;  Record record=null;  Timer.Context timerContext=elapsedTime.time();  try {    PathParts parts=new PathParts(value.toString(),configuration);    record=getRecord(parts);    if (record == null) {      return;    }    for (    Map.Entry<String,String> entry : commandLineMorphlineHeaders.entrySet()) {      record.replaceValues(entry.getKey(),entry.getValue());    }    long fileLength=parts.getFileStatus().getLen();    if (disableFileOpen) {      in=new ByteArrayInputStream(new byte[0]);    } else {      in=new BufferedInputStream(parts.getFileSystem().open(parts.getUploadPath()));    }    record.put(Fields.ATTACHMENT_BODY,in);    Notifications.notifyStartSession(morphline);    if (!morphline.process(record)) {      LOG.warn("Morphline {} failed to process record: {}",morphlineFileAndId,record);    }    if (context != null) {      context.getCounter(MorphlineCounters.class.getName(),MorphlineCounters.FILES_READ.toString()).increment(1);      context.getCounter(MorphlineCounters.class.getName(),MorphlineCounters.FILE_BYTES_READ.toString()).increment(fileLength);    }  } catch (  Exception e) {    LOG.error("Unable to process file " + value,e);    if (context != null) {      context.getCounter(getClass().getName() + ".errors",e.getClass().getName()).increment(1);    }    morphlineContext.getExceptionHandler().handleException(e,record);  } finally {    timerContext.stop();    if (in != null) {      in.close();    }  }}  }
class C{  public void validate(FacesContext facesContext,UIComponent component,Object value) throws ValidatorException {  if (value == null) {    return;  }  String str=value.toString();  if (str.length() == 0) {    return;  }  if (str.startsWith("/")) {    str="http://xy".concat(str);    if (ADMValidator.isUrl(str)) {      return;    }  }  Object[] args=null;  String label=JSFUtils.getLabel(component);  if (label != null) {    args=new Object[]{label};  }  ValidationException e=new ValidationException(ValidationException.ReasonEnum.RELATIVE_URL,label,null);  String text=JSFUtils.getText(e.getMessageKey(),args,facesContext);  throw new ValidatorException(new FacesMessage(FacesMessage.SEVERITY_ERROR,text,null));}  }
class C{  public void testMacro() throws Exception {  VelocityEngine ve=new VelocityEngine();  ve.init();  String template="#macro(foo) foo #end";  ve.evaluate(new VelocityContext(),new StringWriter(),"foo",template);  template="#macro($x) foo #end";  try {    ve.evaluate(new VelocityContext(),new StringWriter(),"foo",template);    assertTrue(false);  } catch (  ParseErrorException pe) {  }}  }
class C{  public T caseUnitFakeDefinition(UnitFakeDefinition object){  return null;}  }
class C{  public MySQLHealthMonitor(Set<String> shardNames,int windowSize,int healthySuccessThreshold,long unhealthyResetPeriodMillis){  this.windowSize=windowSize;  Preconditions.checkArgument(windowSize > 0);  this.healthySuccessThreshold=healthySuccessThreshold;  Preconditions.checkArgument(healthySuccessThreshold >= 0 && healthySuccessThreshold <= windowSize);  this.unhealthyResetPeriodMillis=unhealthyResetPeriodMillis;  Preconditions.checkArgument(unhealthyResetPeriodMillis > 0);  ImmutableMap.Builder<String,ShardState> builder=new ImmutableMap.Builder<String,ShardState>();  for (  String shard : shardNames) {    builder.put(shard,new ShardState(windowSize));  }  this.shardHealthMapRef.set(builder.build());}  }
class C{  public void removeAllCommands(){  menuBar.removeAllCommands();}  }
class C{  public JSONArray put(Collection value){  put((Object)new JSONArray(value));  return this;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element badElement;  doc=(Document)load("staff",true);{    boolean success=false;    try {      badElement=doc.createElement("invalid^Name");    } catch (    DOMException ex) {      success=(ex.code == DOMException.INVALID_CHARACTER_ERR);    }    assertTrue("throw_INVALID_CHARACTER_ERR",success);  }}  }
class C{  public static int[] convertInttoMultiByte(int val){  if (val < 0) {    throw new IllegalArgumentException("Negative values are not supported");  }  int size=0;  if ((val >> 24) > 0) {    size=4;  } else   if ((val >> 16) > 0) {    size=3;  } else   if ((val >> 8) > 0) {    size=2;  } else {    size=1;  }  int[] data=new int[size];  for (int i=0; i < size; i++) {    data[i]=(val >> (size - i - 1) * 8) & 0xFF;  }  return data;}  }
class C{  private static void sleepImpl(long millis,Closure closure){  long start=System.currentTimeMillis();  long rest=millis;  long current;  while (rest > 0) {    try {      Thread.sleep(rest);      rest=0;    } catch (    InterruptedException e) {      if (closure != null) {        if (DefaultTypeTransformation.castToBoolean(closure.call(e))) {          return;        }      }      current=System.currentTimeMillis();      rest=millis + start - current;    }  }}  }
class C{  @SuppressWarnings("unchecked") private static JSONObject convert(String text){  List<JSONObject> items=new LinkedList<>();  Set<ChatColor> formatting=EnumSet.noneOf(ChatColor.class);  StringBuilder current=new StringBuilder();  ChatColor color=null;  for (int i=0; i < text.length(); ++i) {    char ch=text.charAt(i);    if (ch != ChatColor.COLOR_CHAR) {      current.append(ch);      continue;    }    if (i == text.length() - 1) {      continue;    }    append(items,current,color,formatting);    ChatColor code=ChatColor.getByChar(text.charAt(++i));    if (code == ChatColor.RESET) {      color=null;      formatting.clear();    } else     if (code.isFormat()) {      formatting.add(code);    } else {      color=code;      formatting.clear();    }  }  append(items,current,color,formatting);  if (items.isEmpty()) {    JSONObject object=new JSONObject();    object.put("text","");    return object;  } else   if (items.size() == 1) {    return items.get(0);  } else {    JSONObject object=items.get(0);    if (object.size() == 1) {      object.put("extra",items.subList(1,items.size()));    } else {      object=new JSONObject();      object.put("text","");      object.put("extra",items);    }    return object;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:21.191 -0500",hash_original_method="1A7366BC9F5E7AAA65E998C16248FAE8",hash_generated_method="47A45A0DE2D83C625D0B819AC9C77DF2") public static void appendLong(AbstractStringBuilder sb,long l){  convertLong(sb,l);}  }
class C{  public SetParams ex(int secondsToExpire){  addParam(EX,secondsToExpire);  return this;}  }
class C{  @Override public void writeToNBT(NBTTagCompound tag){  try {    super.writeToNBT(tag);  } catch (  RuntimeException e) {  }  NBTTagCompound data=new NBTTagCompound();  data.setDouble("energy",energyStored);  tag.setTag("IC2BasicSource",data);}  }
class C{  public static void unInline(final JFrame parent,final ZyGraph graph,final INaviCodeNode node){  unInline(graph.getRawView(),node);  if (graph.getSettings().getLayoutSettings().getAutomaticLayouting()) {    CGraphLayouter.refreshLayout(parent,graph);  }}  }
class C{  public void decorateDocValueFields(@SuppressWarnings("rawtypes") SolrDocumentBase doc,int docid,Set<String> fields) throws IOException {  final int subIndex=ReaderUtil.subIndex(docid,leafContexts);  final int localId=docid - leafContexts.get(subIndex).docBase;  final LeafReader leafReader=leafContexts.get(subIndex).reader();  for (  String fieldName : fields) {    final SchemaField schemaField=schema.getFieldOrNull(fieldName);    if (schemaField == null || !schemaField.hasDocValues() || doc.containsKey(fieldName)) {      log.warn("Couldn't decorate docValues for field: [{}], schemaField: [{}]",fieldName,schemaField);      continue;    }    if (schemaField.multiValued()) {      final SortedSetDocValues values=leafReader.getSortedSetDocValues(fieldName);      if (values != null && values.getValueCount() > 0) {        if (values.advance(localId) == localId) {          final List<Object> outValues=new LinkedList<Object>();          for (long ord=values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord=values.nextOrd()) {            final BytesRef value=values.lookupOrd(ord);            outValues.add(schemaField.getType().toObject(schemaField,value));          }          assert outValues.size() > 0;          doc.addField(fieldName,outValues);        }      }    } else {      final DocValuesType dvType=fieldInfos.fieldInfo(fieldName).getDocValuesType();switch (dvType) {case NUMERIC:        final NumericDocValues ndv=leafReader.getNumericDocValues(fieldName);      if (ndv == null) {        continue;      }    Long val;  if (ndv.advanceExact(localId)) {    val=ndv.longValue();  } else {    continue;  }Object newVal=val;if (schemaField.getType() instanceof TrieIntField) {newVal=val.intValue();} else if (schemaField.getType() instanceof TrieFloatField) {newVal=Float.intBitsToFloat(val.intValue());} else if (schemaField.getType() instanceof TrieDoubleField) {newVal=Double.longBitsToDouble(val);} else if (schemaField.getType() instanceof TrieDateField) {newVal=new Date(val);} else if (schemaField.getType() instanceof EnumField) {newVal=((EnumField)schemaField.getType()).intValueToStringValue(val.intValue());}doc.addField(fieldName,newVal);break;case BINARY:BinaryDocValues bdv=leafReader.getBinaryDocValues(fieldName);if (bdv == null) {continue;}BytesRef value;if (bdv.advanceExact(localId)) {value=BytesRef.deepCopyOf(bdv.binaryValue());} else {continue;}doc.addField(fieldName,value);break;case SORTED:SortedDocValues sdv=leafReader.getSortedDocValues(fieldName);if (sdv == null) {continue;}if (sdv.advanceExact(localId)) {final BytesRef bRef=sdv.binaryValue();if (schemaField.getType() instanceof BoolField) {doc.addField(fieldName,schemaField.getType().toObject(schemaField,bRef));} else {doc.addField(fieldName,bRef.utf8ToString());}}break;case SORTED_NUMERIC:throw new AssertionError("SORTED_NUMERIC not supported yet!");case SORTED_SET:throw new AssertionError("SORTED_SET fields should be multi-valued!");case NONE:break;}}}}  }
class C{  @Override public void mark(int readLimit){  defaultMark=savePosition(readLimit);}  }
class C{  @Deprecated public void growthFactor(int growthFactor){}  }
class C{  public Type2Message(Type1Message type1){  this(type1,null,null);}  }
class C{  public static RevocationHash bruteForceHash(byte[] seed,byte[] target,int maxChildTries,int maxSiblingTries){  for (int i=0; i < maxChildTries; i++) {    for (int j=0; j < maxSiblingTries; j++) {      RevocationHash test=HashDerivation.calculateRevocationHash(seed,0,j);      if (Arrays.equals(test.getSecretHash(),target)) {        return new RevocationHash(i,j,test.getSecret(),test.getSecretHash());      }    }    seed=Tools.hashSecret(seed);  }  return null;}  }
class C{  public Loan(double annualInterestRate,int numberOfYears,double loanAmount){  this.annualInterestRate=annualInterestRate;  this.numberOfYears=numberOfYears;  this.loanAmount=loanAmount;  loanDate=new java.util.Date();}  }
class C{  public int count(){  return ids.length;}  }
class C{  @NotNull public static <K,V>MultiMap<K,V> create(){  return new MultiMap<K,V>();}  }
class C{  protected void sequence_CallableCtor(ISerializationContext context,TMethod semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public boolean isDiskType(){  return diskType;}  }
class C{  public void addIceServers(List<PeerConnection.IceServer> iceServers){  if (this.iceServers != null) {    iceServers.addAll(this.iceServers);  }  this.iceServers=iceServers;}  }
class C{  @SuppressWarnings("fallthrough") private void processFragmentizerRequest(IgfsFragmentizerRequest req) throws IgniteCheckedException {  req.finishUnmarshal(igfsCtx.kernalContext().config().getMarshaller(),null);  Collection<IgfsFileAffinityRange> ranges=req.fragmentRanges();  IgniteUuid fileId=req.fileId();  IgfsEntryInfo fileInfo=igfsCtx.meta().info(fileId);  if (fileInfo == null) {    if (log.isDebugEnabled())     log.debug("Failed to find file info for fragmentizer request: " + req);    return;  }  if (log.isDebugEnabled())   log.debug("Moving file ranges for fragmentizer request [req=" + req + ", fileInfo="+ fileInfo+ ']');  for (  IgfsFileAffinityRange range : ranges) {    try {      IgfsEntryInfo updated;switch (range.status()) {case RANGE_STATUS_INITIAL:{          updated=igfsCtx.meta().updateInfo(fileId,new IgfsMetaFileRangeUpdateProcessor(range,RANGE_STATUS_MOVING));          if (updated == null) {            igfsCtx.data().cleanBlocks(fileInfo,range,true);            continue;          }        }case RANGE_STATUS_MOVING:{        igfsCtx.data().spreadBlocks(fileInfo,range);        updated=igfsCtx.meta().updateInfo(fileId,new IgfsMetaFileRangeUpdateProcessor(range,RANGE_STATUS_MOVED));        if (updated == null) {          igfsCtx.data().cleanBlocks(fileInfo,range,true);          continue;        }      }case RANGE_STATUS_MOVED:{      igfsCtx.data().cleanBlocks(fileInfo,range,false);      updated=igfsCtx.meta().updateInfo(fileId,new IgfsMetaFileRangeDeleteProcessor(range));      if (updated == null)       igfsCtx.data().cleanBlocks(fileInfo,range,true);    }}} catch (IgfsInvalidRangeException e) {if (log.isDebugEnabled()) log.debug("Failed to update file range " + "[range=" + range + "fileId="+ fileId+ ", err="+ e.getMessage()+ ']');}}}  }
class C{  @Nullable public AllocationId allocationId(){  return this.allocationId;}  }
class C{  protected static void dump_state(lalr_state st) throws internal_error {  lalr_item_set itms;  lalr_item itm;  production_part part;  if (st == null) {    System.out.println("NULL lalr_state");    return;  }  System.out.println("lalr_state [" + st.index() + "] {");  itms=st.items();  for (Enumeration e=itms.all(); e.hasMoreElements(); ) {    itm=(lalr_item)e.nextElement();    System.out.print("  [");    System.out.print(itm.the_production().lhs().the_symbol().name());    System.out.print(" ::= ");    for (int i=0; i < itm.the_production().rhs_length(); i++) {      if (i == itm.dot_pos())       System.out.print("(*) ");      part=itm.the_production().rhs(i);      if (part.is_action())       System.out.print("{action} "); else       System.out.print(((symbol_part)part).the_symbol().name() + " ");    }    if (itm.dot_at_end())     System.out.print("(*) ");    System.out.println("]");  }  System.out.println("}");}  }
class C{  protected void scanComplete(){  LOG.debug("scan complete {}",lastScanMillis);  FileInfo fileInfo=discoveredFiles.peekLast();  if (fileInfo != null) {    fileInfo.lastFileOfScan=true;  }  lastScanMillis=System.currentTimeMillis();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.FORMAL_PARAMETER__DECLARED_TYPE_REF:    return basicSetDeclaredTypeRef(null,msgs);case N4JSPackage.FORMAL_PARAMETER__BOGUS_TYPE_REF:  return basicSetBogusTypeRef(null,msgs);case N4JSPackage.FORMAL_PARAMETER__ANNOTATIONS:return ((InternalEList<?>)getAnnotations()).basicRemove(otherEnd,msgs);case N4JSPackage.FORMAL_PARAMETER__INITIALIZER:return basicSetInitializer(null,msgs);case N4JSPackage.FORMAL_PARAMETER__BINDING_PATTERN:return basicSetBindingPattern(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void showNotification(int operationId,String messageTitle,String messageText){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    Intent notification=new Intent(context,NotificationReceiver.class);    notification.putExtra(Constants.OPERATION_ID,operationId);    PendingIntent dismiss=PendingIntent.getBroadcast(context,operationId,notification,PendingIntent.FLAG_ONE_SHOT);    NotificationCompat.Builder mBuilder=new NotificationCompat.Builder(context).setSmallIcon(R.drawable.notification).setContentTitle(messageTitle).setContentText(messageText).setPriority(android.app.Notification.PRIORITY_MAX).setDefaults(android.app.Notification.DEFAULT_VIBRATE).setDefaults(android.app.Notification.DEFAULT_SOUND).setCategory(android.app.Notification.CATEGORY_CALL).setOngoing(true).setOnlyAlertOnce(true).setTicker(context.getResources().getString(R.string.txt_notification)).addAction(R.drawable.abs__ic_clear,"Dismiss",dismiss);    notifyManager.notify(operationId,mBuilder.build());  } else {    Intent intent=new Intent(context,AlertActivity.class);    intent.putExtra(context.getResources().getString(R.string.intent_extra_message_title),messageTitle);    intent.putExtra(context.getResources().getString(R.string.intent_extra_message_text),messageText);    intent.putExtra(context.getResources().getString(R.string.intent_extra_operation_id),operationId);    intent.putExtra(context.getResources().getString(R.string.intent_extra_type),context.getResources().getString(R.string.intent_extra_alert));    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP| Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);    context.startActivity(intent);  }}  }
class C{  protected void _close(){  this.config=null;  this.c=null;}  }
class C{  protected boolean isUnambiguous(TemplateContext context){  return true;}  }
class C{  public void initialize(int cdmaDbm,int cdmaEcio,int evdoDbm,int evdoEcio,int evdoSnr){  mCdmaDbm=cdmaDbm;  mCdmaEcio=cdmaEcio;  mEvdoDbm=evdoDbm;  mEvdoEcio=evdoEcio;  mEvdoSnr=evdoSnr;}  }
class C{  public DataFilterCriteria.Builder<Select<T>> openBracketAnd(){  return new DataFilterCriteria.Builder<>(this,DataFilterClause.DataFilterConjunction.AND);}  }
class C{  public void reload(){  internalLoad();}  }
class C{  public static String byteArrayToHexString(byte[] block){  StringBuffer buf=new StringBuffer();  int len=block.length;  for (int i=0; i < len; i++) {    byte2hex(block[i],buf);    if ((i < len - 1) & WITH_BYTE_SEPARATOR) {      buf.append(BYTE_SEPARATOR);    }  }  return buf.toString();}  }
class C{  public double[] coefficients(){  double[] retval=new double[order + 1];  System.arraycopy(a,0,retval,0,order + 1);  return retval;}  }
class C{  public static final byte[] inflateBestEffort(byte[] in){  return inflateBestEffort(in,Integer.MAX_VALUE);}  }
class C{  @Override public Adapter createAdapter(Notifier target){  return modelSwitch.doSwitch((EObject)target);}  }
class C{  public static String encode(byte[] binaryData){  if (binaryData == null) {    return null;  }  int lengthDataBits=binaryData.length * EIGHTBIT;  if (lengthDataBits == 0) {    return "";  }  int fewerThan24bits=lengthDataBits % TWENTYFOURBITGROUP;  int numberTriplets=lengthDataBits / TWENTYFOURBITGROUP;  int numberQuartet=fewerThan24bits != 0 ? numberTriplets + 1 : numberTriplets;  char encodedData[]=null;  encodedData=new char[numberQuartet * 4];  byte k=0, l=0, b1=0, b2=0, b3=0;  int encodedIndex=0;  int dataIndex=0;  for (int i=0; i < numberTriplets; i++) {    b1=binaryData[dataIndex++];    b2=binaryData[dataIndex++];    b3=binaryData[dataIndex++];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    byte val3=((b3 & SIGN) == 0) ? (byte)(b3 >> 6) : (byte)((b3) >> 6 ^ 0xfc);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex++]=lookUpBase64Alphabet[(l << 2) | val3];    encodedData[encodedIndex++]=lookUpBase64Alphabet[b3 & 0x3f];  }  if (fewerThan24bits == EIGHTBIT) {    b1=binaryData[dataIndex];    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[k << 4];    encodedData[encodedIndex++]=PAD;    encodedData[encodedIndex++]=PAD;  } else   if (fewerThan24bits == SIXTEENBIT) {    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex++]=lookUpBase64Alphabet[l << 2];    encodedData[encodedIndex++]=PAD;  }  return new String(encodedData);}  }
class C{  public void parse(String string){  if (string == null) {    throw new NullPointerException("string is null");  }  int bufferSize=Math.max(MIN_BUFFER_SIZE,Math.min(DEFAULT_BUFFER_SIZE,string.length()));  try {    parse(new StringReader(string),bufferSize);  } catch (  IOException exception) {    throw new RuntimeException(exception);  }}  }
class C{  public EnclosingMethodAttribute(ConstPool cp,String className,String methodName,String methodDesc){  super(cp,tag);  int ci=cp.addClassInfo(className);  int ni=cp.addNameAndTypeInfo(methodName,methodDesc);  byte[] bvalue=new byte[4];  bvalue[0]=(byte)(ci >>> 8);  bvalue[1]=(byte)ci;  bvalue[2]=(byte)(ni >>> 8);  bvalue[3]=(byte)ni;  set(bvalue);}  }
class C{  private synchronized void clearScanFiles(){  if ((allFiles != null) && (allFiles.size() > 0)) {    Iterator it=allFiles.iterator();    File file=null;    while (it.hasNext()) {      file=(File)it.next();      file.delete();    }    allFiles.clear();  }}  }
class C{  public CircuitBreaker withSuccessThreshold(int successThreshold){  Assert.isTrue(successThreshold >= 1,"successThreshold must be greater than or equal to 1");  return withSuccessThreshold(successThreshold,successThreshold);}  }
class C{  public static boolean isEmpty(byte[] array){  return array == null || array.length == 0;}  }
class C{  private static Integer b2i(boolean b){  return b ? one : zero;}  }
class C{  public boolean hasMoved(){  return this.moved;}  }
class C{  public Builder showInlineDiffs(boolean val){  showInlineDiffs=val;  return this;}  }
class C{  public void testHashCode(){  int effectiveKeyBits=0;  byte[] iv=new byte[]{1,2,3,4,5,6,7,8};  RC2ParameterSpec ps1=new RC2ParameterSpec(effectiveKeyBits,iv);  RC2ParameterSpec ps2=new RC2ParameterSpec(effectiveKeyBits,iv);  assertTrue("Equal objects should have the same hash codes.",ps1.hashCode() == ps2.hashCode());}  }
class C{  void revisitNode(final Node n,final DijkstraNodeData data,final PseudoRemovePriorityQueue<Node> pendingNodes,final double time,final double cost,final Link outLink){  pendingNodes.remove(n);  data.visit(outLink,cost,time,getIterationId());  pendingNodes.add(n,getPriority(data));}  }
class C{  public void characters(char ch[],int start,int length) throws SAXException {  if (contentHandler != null) {    contentHandler.characters(ch,start,length);  }}  }
class C{  public String toString(){  return "PreferenceLevel{id=" + getPrefId().intValue() + ",prolog="+ getPrefProlog()+ ",name="+ getPrefName()+ "}";}  }
class C{  public static R1Interval fromPointPair(double p1,double p2){  if (p1 <= p2) {    return new R1Interval(p1,p2);  } else {    return new R1Interval(p2,p1);  }}  }
class C{  static void throwUserExceptionIfNeeded(Method m,String name){  if (m != null && m.getName().equals(name))   throw new UserError(name);}  }
class C{  public void addRangeWithWidth(double lonm1,double width){  if (width < 0)   addRange((int)Math.floor(lonm1 + width),(int)Math.ceil(lonm1)); else   addRange((int)Math.floor(lonm1),(int)Math.ceil(lonm1 + width));}  }
class C{  public static IJavaElement findInCompilationUnit(ICompilationUnit cu,IJavaElement element){  IJavaElement[] elements=cu.findElements(element);  if (elements != null && elements.length > 0) {    return elements[0];  }  return null;}  }
class C{  public void testTomcat7xContext() throws Exception {  final URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/user-context-test");  final String expected="Sample page for testing";  PingUtils.assertPingTrue(url.getPath() + " not started",expected,url,logger);}  }
class C{  private void createUserAndLicense(String userName,final long subscriptionCreationTime) throws Exception {  PlatformUser user=new PlatformUser();  user.setUserId(userName);  user.setOrganization(supplierAndProvider);  user.setEmail("user_1@user_1.com");  user.setStatus(UserAccountStatus.ACTIVE);  user.setLocale("en");  mgr.persist(user);  user=mgr.find(user);  UsageLicense license=new UsageLicense();  license.setAssignmentDate(subscriptionCreationTime);  license.setSubscription(subscription);  license.setUser(user);  license.setHistoryModificationTime(Long.valueOf(subscriptionCreationTime));  mgr.flush();  mgr.persist(license);}  }
class C{  public final void removeCallbacks(Runnable r,Object token){  final WeakRunnable runnable=mRunnables.remove(r);  if (runnable != null) {    mExec.removeCallbacks(runnable,token);  }}  }
class C{  public static void writeDataSource(PrintStream writer,DataSource ds){  writer.print("  <dataSource jndiName=\"");  writer.print(ds.getJndiLocation());  writer.print("\" id=\"");  writer.print(ds.getId());  writer.println("\">");  writer.print("    <jdbcDriver libraryRef=\"cargoLib\" ");  writer.print(ds.getConnectionType());  writer.print("=\"");  writer.print(ds.getDriverClass());  writer.println("\"/>");  writer.print("    <properties ");  String url=ds.getUrl();  if (url != null) {    writer.print("URL=\"");    writer.print(ds.getUrl());    writer.print("\" ");  }  writeProperties(writer,ds.getConnectionProperties());  writer.println("/>");  String user=ds.getUsername();  String pass=ds.getPassword();  if (user != null && pass != null) {    writer.print("    <containerAuthData user=\"");    writer.print(user);    writer.print("\" password=\"");    writer.print(pass);    writer.println("\"/>");  }  writer.println("  </dataSource>");}  }
class C{  public static Project lookupVplexProject(Volume protoVolume,StorageSystem vplexSystem,DbClient dbClient){  BasePermissionsHelper helper=new BasePermissionsHelper(dbClient);  TenantOrg rootTenant=helper.getRootTenant();  PrefixConstraint constraint=PrefixConstraint.Factory.getLabelPrefixConstraint(Project.class,vplexSystem.getNativeGuid());  URIQueryResultList result=new URIQueryResultList();  dbClient.queryByConstraint(constraint,result);  Iterator<URI> iter=result.iterator();  while (iter.hasNext()) {    Project project=dbClient.queryObject(Project.class,iter.next());    if (project == null || project.getInactive() == true) {      continue;    }    if (project.getLabel().equals(vplexSystem.getNativeGuid()) && project.getTenantOrg().getURI().toString().equals(rootTenant.getId().toString())) {      return project;    }  }  return dbClient.queryObject(Project.class,protoVolume.getProject().getURI());}  }
class C{  private Set<Transaction> findDoubleSpendsAgainst(Transaction tx,Map<Sha256Hash,Transaction> candidates){  checkState(lock.isHeldByCurrentThread());  if (tx.isCoinBase())   return Sets.newHashSet();  HashSet<TransactionOutPoint> outpoints=new HashSet<TransactionOutPoint>();  for (  TransactionInput input : tx.getInputs()) {    outpoints.add(input.getOutpoint());  }  Set<Transaction> doubleSpendTxns=Sets.newHashSet();  for (  Transaction p : candidates.values()) {    for (    TransactionInput input : p.getInputs()) {      TransactionOutPoint outpoint=input.getOutpoint();      if (outpoints.contains(outpoint)) {        doubleSpendTxns.add(p);      }    }  }  return doubleSpendTxns;}  }
class C{  public E[] toArray(int start,int len){  int remaining=len;  int pos=0;  E[] array=(E[])new Object[len];  if (len == 0) {    return array;  }  int i=0;  while (start >= buffers[i].length) {    start-=buffers[i].length;    i++;  }  while (i < buffersCount) {    E[] buf=buffers[i];    int c=Math.min(buf.length - start,remaining);    System.arraycopy(buf,start,array,pos,c);    pos+=c;    remaining-=c;    if (remaining == 0) {      break;    }    start=0;    i++;  }  return array;}  }
class C{  public JPAMailboxMessage(JPAMailbox mailbox,MessageUid uid,long modSeq,MailboxMessage message) throws MailboxException {  super(mailbox,uid,modSeq,message);  try {    this.body=IOUtils.toByteArray(message.getBodyContent());    this.header=IOUtils.toByteArray(message.getHeaderContent());  } catch (  IOException e) {    throw new MailboxException("Unable to parse message",e);  }}  }
class C{  private Resources(){}  }
class C{  private void markBeansAsRegistered(Map<Class<?>,Object> sharedObjects){  sharedObjects.entrySet().forEach(null);}  }
class C{  @Caching(evict={@CacheEvict(value="referenceData",allEntries=true),@CacheEvict(value="podcasts",allEntries=true),@CacheEvict(value="searchResults",allEntries=true),@CacheEvict(value="newestAndRecommendedPodcasts",allEntries=true),@CacheEvict(value="randomAndTopRatedPodcasts",allEntries=true)}) public void clearAllCaches(){  LOG.warn("All caches have been completely cleared");}  }
class C{  public SnapshotPacket(){}  }
class C{  public TimecodeComponentBO(KLVPacket.Header header,ByteProvider byteProvider,Map<Integer,MXFUID> localTagToUIDMap,IMFErrorLogger imfErrorLogger) throws IOException {  super(header);  long numBytesToRead=this.header.getVSize();  StructuralMetadata.populate(this,byteProvider,numBytesToRead,localTagToUIDMap);  if (this.instance_uid == null) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_METADATA_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,TimecodeComponent.ERROR_DESCRIPTION_PREFIX + "instance_uid is null");  }}  }
class C{  public static String readFile(File file,String charsetName) throws IOException {  String result=null;  try (FileInputStream fis=new FileInputStream(file)){    result=readStream(fis,charsetName);  }   return result;}  }
class C{  public void onCompleted(TotalCaptureResult result){}  }
class C{  public boolean isExists(){  return getResponse.isExists();}  }
class C{  private void drawSecondAnimation(Canvas canvas){  if (arcO == limite)   arcD+=6;  if (arcD >= 290 || arcO > limite) {    arcO+=6;    arcD-=6;  }  if (arcO > limite + 290) {    limite=arcO;    arcO=limite;    arcD=1;  }  rotateAngle+=4;  canvas.rotate(rotateAngle,getWidth() / 2,getHeight() / 2);  Bitmap bitmap=Bitmap.createBitmap(canvas.getWidth(),canvas.getHeight(),Bitmap.Config.ARGB_8888);  Canvas temp=new Canvas(bitmap);  Paint paint=new Paint();  paint.setAntiAlias(true);  paint.setColor(backgroundColor);  temp.drawArc(new RectF(0,0,getWidth(),getHeight()),arcO,arcD,true,paint);  Paint transparentPaint=new Paint();  transparentPaint.setAntiAlias(true);  transparentPaint.setColor(getResources().getColor(android.R.color.transparent));  transparentPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));  temp.drawCircle(getWidth() / 2,getHeight() / 2,(getWidth() / 2) - Utils.dpToPx(ringWidth,getResources()),transparentPaint);  canvas.drawBitmap(bitmap,0,0,new Paint());}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public static boolean containsAll(String line,String... elements){  for (  String element : elements)   if (!line.contains(element))   return false;  return true;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void testRPCFailed() throws Exception {  socketRpcServer.registerService(new FakeServiceImpl(REQUEST).failsWithError("Error"));  FakeSocket socket=new FakeSocket(false).withRequest(RPC_REQUEST);  runHandler(socket);  assertFalse(socket.getResponse().getCallback());  assertEquals("Error",socket.getResponse().getError());  assertEquals(ErrorReason.RPC_FAILED,socket.getResponse().getErrorReason());  socketRpcServer.registerBlockingService(new FakeServiceImpl(REQUEST).failsWithError("New Error").toBlockingService());  socket=new FakeSocket(false).withRequest(RPC_REQUEST);  runHandler(socket);  assertFalse(socket.getResponse().getCallback());  assertEquals("New Error",socket.getResponse().getError());  assertEquals(ErrorReason.RPC_FAILED,socket.getResponse().getErrorReason());}  }
class C{  public static void filterLine(File self,Writer writer,String charset,@ClosureParams(value=SimpleType.class,options="java.lang.String") Closure closure) throws IOException {  IOGroovyMethods.filterLine(newReader(self,charset),writer,closure);}  }
class C{  public void run(){  try {    Continuation cont=new Continuation();    cont.setError(this,info.name);    Name nm=(info.name == null || info.name.equals("")) ? new CompositeName() : new CompositeName().add(info.name);    results=context.searchAux(nm,info.filter,info.controls,true,false,cont);    ((LdapSearchEnumeration)(NamingEnumeration)results).setStartName(context.currentParsedDN);    SearchResult si;    Control[] respctls;    EntryChangeResponseControl ec;    long changeNum;    while (results.hasMore()) {      si=results.next();      respctls=(si instanceof HasControls) ? ((HasControls)si).getControls() : null;      if (debug) {        System.err.println("notifier: " + si);        System.err.println("respCtls: " + respctls);      }      if (respctls != null) {        for (int i=0; i < respctls.length; i++) {          if (respctls[i] instanceof EntryChangeResponseControl) {            ec=(EntryChangeResponseControl)respctls[i];            changeNum=ec.getChangeNumber();switch (ec.getChangeType()) {case EntryChangeResponseControl.ADD:              fireObjectAdded(si,changeNum);            break;case EntryChangeResponseControl.DELETE:          fireObjectRemoved(si,changeNum);        break;case EntryChangeResponseControl.MODIFY:      fireObjectChanged(si,changeNum);    break;case EntryChangeResponseControl.RENAME:  fireObjectRenamed(si,ec.getPreviousDN(),changeNum);break;}}break;}}}} catch (InterruptedNamingException e) {if (debug) System.err.println("NamingEventNotifier Interrupted");}catch (NamingException e) {fireNamingException(e);support.removeDeadNotifier(info);} finally {cleanup();}if (debug) System.err.println("NamingEventNotifier finished");}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void clearPreselections(){  for (  PRESELECT selection : PRESELECT.values())   prefs.edit().remove(selection.toString()).apply();}  }
class C{  public void dispose(){}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double zConvFactor=1;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  zConvFactor=Double.parseDouble(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    double[] N=new double[8];    float progress=0;    int[] Dy={-1,0,1,1,1,0,-1,-1};    int[] Dx={1,1,1,0,-1,-1,-1,0};    final double radToDeg=180 / Math.PI;    double Zx, Zy, Zxx, Zyy, Zxy, Zx2, Zy2, p;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=true;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double gridRes=inputFile.getCellSizeX();    double gridResTimes2=gridRes * 2;    double gridResSquared=gridRes * gridRes;    double fourTimesGridResSquared=gridResSquared * 4;    double curv;    double noData=inputFile.getNoDataValue();    if (inputFile.getXYUnits().toLowerCase().contains("deg") || inputFile.getProjection().toLowerCase().contains("geog")) {      double midLat=(inputFile.getNorth() - inputFile.getSouth()) / 2.0;      if (midLat <= 90 && midLat >= -90) {        zConvFactor=1.0 / (113200 * Math.cos(Math.toRadians(midLat)));      }    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("blue_white_red.pal");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          for (int i=0; i < 8; i++) {            N[i]=inputFile.getValue(row + Dy[i],col + Dx[i]);            if (N[i] != noData) {              N[i]=N[i] * zConvFactor;            } else {              N[i]=z * zConvFactor;            }          }          Zx=(N[1] - N[5]) / gridResTimes2;          Zy=(N[7] - N[3]) / gridResTimes2;          Zxx=(N[1] - 2 * z + N[5]) / gridResSquared;          Zyy=(N[7] - 2 * z + N[3]) / gridResSquared;          Zxy=(-N[6] + N[0] + N[4] - N[2]) / fourTimesGridResSquared;          Zx2=Zx * Zx;          Zy2=Zy * Zy;          p=Zx2 + Zy2;          if (p > 0) {            curv=(Zxx * Zy2 - 2 * Zxy * Zx* Zy + Zyy * Zx2) / Math.pow(p,1.5);            outputFile.setValue(row,col,curv * radToDeg * 100);          } else {            outputFile.setValue(row,col,noData);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  static int startingOffset(int[] elemInfo,int tripletIndex){  if (((tripletIndex * 3) + 0) >= elemInfo.length) {    return -1;  }  return elemInfo[(tripletIndex * 3) + 0];}  }
class C{  private void openMainPage(){  if (LayoutSpec.isPhone(this)) {    if (getSupportFragmentManager().findFragmentByTag(MainPhoneFragment.TAG) == null) {      replaceMainFragment(new MainPhoneFragment(),MainPhoneFragment.TAG);    }    Timber.i("No need to open main fragment");  } else {    if (getSupportFragmentManager().findFragmentByTag(MainTabletFragment.TAG) == null) {      replaceMainFragment(new MainTabletFragment(),MainTabletFragment.TAG);    }    Timber.i("No need to open main fragment");  }}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public static <T>LinkedBindingBuilder<T> bind(Binder binder,Class<T> type,Named name){  binder.disableCircularProxies();  return bind(binder,TypeLiteral.get(type));}  }
class C{  private void initPreds(){  this.preds=new HashMap<DTNHost,Double>();}  }
class C{  public static void main(String[] args){  try {    TcpEchoServer server=new TcpEchoServer(false);    server.serve();  } catch (  Exception e) {    System.err.println("Couldn't start server:\n" + e);  }}  }
class C{  public Tuple<Boolean,Timestamp> isUsernameBanned(final String username){  boolean found=false;  boolean expired=false;  Timestamp banTill=null;  final String sql="select username, ban_till from banned_usernames where username = ?";  final Connection con=Database.getConnection();  try {    final PreparedStatement ps=con.prepareStatement(sql);    ps.setString(1,username);    final ResultSet rs=ps.executeQuery();    found=rs.next();    if (found) {      banTill=rs.getTimestamp(2);      if (banTill != null && banTill.getTime() < System.currentTimeMillis()) {        s_logger.fine("Ban expired for:" + username);        expired=true;      }    }    rs.close();    ps.close();  } catch (  final SQLException sqle) {    s_logger.info("Error for testing banned username existence:" + username + " error:"+ sqle.getMessage());    throw new IllegalStateException(sqle.getMessage());  } finally {    DbUtil.closeConnection(con);  }  if (expired) {    removeBannedUsername(username);    return Tuple.of(false,banTill);  }  return Tuple.of(found,banTill);}  }
class C{  public static void addAttribute(String name,String oid,Class<?> clazz) throws CertificateException {  ObjectIdentifier objId;  try {    objId=new ObjectIdentifier(oid);  } catch (  IOException ioe) {    throw new CertificateException("Invalid Object identifier: " + oid);  }  OIDInfo info=new OIDInfo(name,objId,clazz);  if (oidMap.put(objId,info) != null) {    throw new CertificateException("Object identifier already exists: " + oid);  }  if (nameMap.put(name,info) != null) {    throw new CertificateException("Name already exists: " + name);  }}  }
class C{  private static double cosQ(double xa,double xb){  final double pi2a=1.5707963267948966;  final double pi2b=6.123233995736766E-17;  final double a=pi2a - xa;  double b=-(a - pi2a + xa);  b+=pi2b - xb;  return sinQ(a,b);}  }
class C{  @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:26.808 -0500",hash_original_method="56D76EA36DEC4CA5689518DF65F0FB11",hash_generated_method="E04A3B0C734A09D8E9927923EE922597") public Set<Map.Entry<String,V>> entrySet(){  if (entrySet == null) {    entrySet=new EntrySetImpl();  }  return entrySet;}  }
class C{  public void write(PcapPacket packet) throws IOException {  PacketHeader packetHeader=packet.getPacketHeader();  int tsSec=packetHeader.getTsSec();  int tsUsec=packetHeader.getTsUsec();  int inclLen=packetHeader.getInclLen();  int origLen=packetHeader.getOrigLen();  addInt(tsSec);  addInt(tsUsec);  addInt(inclLen);  addInt(origLen);  Buffer payload=packet.getPacketData();  try {    payload.mark();    while (true) {      list.add(payload.get());    }  } catch (  BufferUnderflowException e) {    payload.reset();  }  cachedPacketNum++;  if (cachedPacketNum == MAX_CACHED_PACKET_NUMBER) {    flush();  }}  }
class C{  public ExportTrustedCertificateAction(KseFrame kseFrame){  this(kseFrame,null);}  }
class C{  public static byte[] compress(byte[] raw) throws IOException {  ByteArrayOutputStream out=new ByteArrayOutputStream();  GZIPOutputStream gz=new GZIPOutputStream(out);  gz.write(raw);  gz.finish();  gz.flush();  return out.toByteArray();}  }
class C{  @DSSpec(DSCat.SPEC_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.327 -0400",hash_original_method="954E11DA9D99B56A3E0C00DDF1274471",hash_generated_method="ECD28A95C2DD57DE45861ACB0CB555AE") private synchronized void addTracker(String path,Object marker,FileDeleteStrategy deleteStrategy){  if (exitWhenFinished) {    throw new IllegalStateException("No new trackers can be added once exitWhenFinished() is called");  }  if (reaper == null) {    reaper=new Reaper();    reaper.start();  }  trackers.add(new Tracker(path,deleteStrategy,marker,q));}  }
class C{  public Integer stringValueToIntValue(String stringVal){  if (stringVal == null)   return null;  Integer intValue;  final Integer enumInt=enumStringToIntMap.get(stringVal);  if (enumInt != null)   return enumInt;  intValue=tryParseInt(stringVal);  if (intValue == null)   intValue=DEFAULT_VALUE;  final String enumString=enumIntToStringMap.get(intValue);  if (enumString != null)   return intValue;  return DEFAULT_VALUE;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  StringBuffer sb=new StringBuffer();  sb.append(m_arg0.execute(xctxt).str());  sb.append(m_arg1.execute(xctxt).str());  if (null != m_arg2)   sb.append(m_arg2.execute(xctxt).str());  if (null != m_args) {    for (int i=0; i < m_args.length; i++) {      sb.append(m_args[i].execute(xctxt).str());    }  }  return new XString(sb.toString());}  }
class C{  private void updateActionBarHeaderView(){  updateRoomHeaderAvatar();  if (null != mRoom) {    mActionBarHeaderRoomName.setText(VectorUtils.getRoomDisplayName(this,mSession,mRoom));  } else   if (null != sRoomPreviewData) {    mActionBarHeaderRoomName.setText(sRoomPreviewData.getRoomName());  } else {    mActionBarHeaderRoomName.setText("");  }  updateRoomHeaderTopic();  updateRoomHeaderMembersStatus();}  }
class C{  public static ExpiryTask startTrackerServices(GemFireCacheImpl cache){  long expiryTime=Long.getLong(DistributionConfig.GEMFIRE_PREFIX + "messageTrackingTimeout",PoolFactory.DEFAULT_SUBSCRIPTION_MESSAGE_TRACKING_TIMEOUT / 3).longValue();  ExpiryTask result=new ExpiryTask(cache,expiryTime);  cache.getCCPTimer().scheduleAtFixedRate(result,expiryTime,expiryTime);  return result;}  }
class C{  public void forKeyValue(BiConsumer<? super K,? super V> action){  forEach(toConsumer(action));}  }
class C{  static boolean canPopupOverlapTaskBar(){  boolean result=true;  Toolkit tk=Toolkit.getDefaultToolkit();  if (tk instanceof SunToolkit) {    result=((SunToolkit)tk).canPopupOverlapTaskBar();  }  return result;}  }
class C{  public String format(DateTimeFormatter formatter){  Objects.requireNonNull(formatter,"formatter");  return formatter.format(this);}  }
class C{  private static OFActionEnqueue decode_enqueue(String actionToDecode,OFVersion version,Logger log){  Matcher n=Pattern.compile("(?:((?:0x)?\\d+)\\:((?:0x)?\\d+))").matcher(actionToDecode);  if (n.matches()) {    OFPort port=OFPort.of(0);    if (n.group(1) != null) {      try {        port=OFPort.of(get_short(n.group(1)));      } catch (      NumberFormatException e) {        log.debug("Invalid port-num in: '{}' (error ignored)",actionToDecode);        return null;      }    }    int queueid=0;    if (n.group(2) != null) {      try {        queueid=get_int(n.group(2));      } catch (      NumberFormatException e) {        log.debug("Invalid queue-id in: '{}' (error ignored)",actionToDecode);        return null;      }    }    OFActionEnqueue.Builder ab=OFFactories.getFactory(version).actions().buildEnqueue();    ab.setPort(port);    ab.setQueueId(queueid);    log.debug("action {}",ab.build());    return ab.build();  } else {    log.debug("Invalid action: '{}'",actionToDecode);    return null;  }}  }
class C{  private void addTemporalCoverages(Document doc,Eml eml) throws DocumentException {  if (exists(eml.getTemporalCoverages()) && !eml.getTemporalCoverages().isEmpty()) {    Paragraph p=new Paragraph();    p.setAlignment(Element.ALIGN_JUSTIFIED);    p.setFont(font);    DateFormat dateFormat=DateFormat.getDateInstance(DateFormat.LONG);    SimpleDateFormat timeFormat=new SimpleDateFormat("SSS");    SimpleDateFormat yearFormat=new SimpleDateFormat("yyyy");    boolean firstCoverage=true;    for (    TemporalCoverage coverage : eml.getTemporalCoverages()) {      if (coverage.getType().equals(TemporalCoverageType.SINGLE_DATE)) {        if (coverage.getStartDate() != null) {          if (firstCoverage) {            firstCoverage=false;          } else {            p.add(Chunk.NEWLINE);          }          p.add(new Phrase(getText("rtf.tempcoverage") + ": ",fontTitle));          if (timeFormat.format(coverage.getStartDate()).equals("001")) {            p.add(yearFormat.format(coverage.getStartDate()));          } else {            p.add(dateFormat.format(coverage.getStartDate()));          }          p.add(Chunk.NEWLINE);        }      } else       if (coverage.getType() == TemporalCoverageType.DATE_RANGE) {        if (coverage.getStartDate() != null && coverage.getEndDate() != null) {          if (firstCoverage) {            firstCoverage=false;          } else {            p.add(Chunk.NEWLINE);          }          p.add(new Phrase(getText("rtf.tempcoverage") + ": ",fontTitle));          if (timeFormat.format(coverage.getStartDate()).equals("001")) {            p.add(yearFormat.format(coverage.getStartDate()));          } else {            p.add(dateFormat.format(coverage.getStartDate()));          }          p.add(" - ");          if (timeFormat.format(coverage.getEndDate()).equals("001")) {            p.add(yearFormat.format(coverage.getEndDate()));          } else {            p.add(dateFormat.format(coverage.getEndDate()));          }          p.add(Chunk.NEWLINE);        }      }    }    doc.add(p);    p.clear();  }}  }
class C{  public static boolean isStatic(int mod){  return Modifier.isStatic(mod);}  }
class C{  public void inc(){  value.incrementAndGet();  notifyMonitors();}  }
class C{  @Override public synchronized void reset(){  initialize();}  }
class C{  public static List<IOException> releaseLoader(URLClassLoader classLoader,List<String> jarsClosed){  List<IOException> ioExceptions=new LinkedList<IOException>();  try {    if (jarsClosed != null) {      jarsClosed.clear();    }    URLClassPath ucp=SharedSecrets.getJavaNetAccess().getURLClassPath(classLoader);    ArrayList<?> loaders=ucp.loaders;    Stack<?> urls=ucp.urls;    HashMap<?,?> lmap=ucp.lmap;synchronized (urls) {      urls.clear();    }synchronized (lmap) {      lmap.clear();    }synchronized (ucp) {      for (      Object o : loaders) {        if (o != null) {          if (o instanceof URLClassPath.JarLoader) {            URLClassPath.JarLoader jl=(URLClassPath.JarLoader)o;            JarFile jarFile=jl.getJarFile();            try {              if (jarFile != null) {                jarFile.close();                if (jarsClosed != null) {                  jarsClosed.add(jarFile.getName());                }              }            } catch (            IOException ioe) {              String jarFileName=(jarFile == null) ? "filename not available" : jarFile.getName();              String msg="Error closing JAR file: " + jarFileName;              IOException newIOE=new IOException(msg);              newIOE.initCause(ioe);              ioExceptions.add(newIOE);            }          }        }      }      loaders.clear();    }  } catch (  Throwable t) {    throw new RuntimeException(t);  }  return ioExceptions;}  }
class C{  private static Object castObject(Class toType,Class fromType,Object fromValue,int operation,boolean checkOnly) throws UtilEvalError {  if (checkOnly && fromValue != null)   throw new InterpreterError("bad cast params 1");  if (!checkOnly && fromValue == null)   throw new InterpreterError("bad cast params 2");  if (fromType == Primitive.class)   throw new InterpreterError("bad from Type, need to unwrap");  if (fromValue == Primitive.NULL && fromType != null)   throw new InterpreterError("inconsistent args 1");  if (fromValue == Primitive.VOID && fromType != Void.TYPE)   throw new InterpreterError("inconsistent args 2");  if (toType == Void.TYPE)   throw new InterpreterError("loose toType should be null");  if (toType == null || toType == fromType)   return checkOnly ? VALID_CAST : fromValue;  if (toType.isPrimitive()) {    if (fromType == Void.TYPE || fromType == null || fromType.isPrimitive()) {      return Primitive.castPrimitive(toType,fromType,(Primitive)fromValue,checkOnly,operation);    } else {      if (Primitive.isWrapperType(fromType)) {        Class unboxedFromType=Primitive.unboxType(fromType);        Primitive primFromValue;        if (checkOnly)         primFromValue=null; else         primFromValue=(Primitive)Primitive.wrap(fromValue,unboxedFromType);        return Primitive.castPrimitive(toType,unboxedFromType,primFromValue,checkOnly,operation);      } else {        if (checkOnly)         return INVALID_CAST; else         throw castError(toType,fromType,operation);      }    }  }  if (fromType == Void.TYPE || fromType == null || fromType.isPrimitive()) {    if (Primitive.isWrapperType(toType) && fromType != Void.TYPE && fromType != null) {      return checkOnly ? VALID_CAST : Primitive.castWrapper(Primitive.unboxType(toType),((Primitive)fromValue).getValue());    }    if (toType == Object.class && fromType != Void.TYPE && fromType != null) {      return checkOnly ? VALID_CAST : ((Primitive)fromValue).getValue();    }    return Primitive.castPrimitive(toType,fromType,(Primitive)fromValue,checkOnly,operation);  }  if (toType.isAssignableFrom(fromType))   return checkOnly ? VALID_CAST : fromValue;  if (toType.isInterface() && bsh.This.class.isAssignableFrom(fromType) && Capabilities.canGenerateInterfaces())   return checkOnly ? VALID_CAST : ((bsh.This)fromValue).getInterface(toType);  if (Primitive.isWrapperType(toType) && Primitive.isWrapperType(fromType))   return checkOnly ? VALID_CAST : Primitive.castWrapper(toType,fromValue);  if (checkOnly)   return INVALID_CAST; else   throw castError(toType,fromType,operation);}  }
class C{  private void checkChanges(){  settings.clearMovieNfoFilenames();  if (cbMovieNfoFilename1.isSelected()) {    settings.addMovieNfoFilename(MovieNfoNaming.FILENAME_NFO);  }  if (cbMovieNfoFilename2.isSelected()) {    settings.addMovieNfoFilename(MovieNfoNaming.MOVIE_NFO);  }  if (cbMovieNfoFilename3.isSelected()) {    settings.addMovieNfoFilename(MovieNfoNaming.DISC_NFO);  }  CertificationStyleWrapper wrapper=(CertificationStyleWrapper)cbCertificationStyle.getSelectedItem();  if (wrapper != null && settings.getMovieCertificationStyle() != wrapper.style) {    settings.setMovieCertificationStyle(wrapper.style);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.081 -0500",hash_original_method="7F812F523D0E5A460F612F9FF5DFBBFE",hash_generated_method="36F947C0B7CA3FFADBD301E3AB0D2646") @DSComment("Constructor") @DSSafe(DSCat.SAFE_OTHERS) public SocketOutputStream(Socket socket,OutputStream stream){  super(stream);  __socket=socket;}  }
class C{  public void init(final Properties props){  this.dirProperties=new Properties();  this.attrMap=new HashMap<SettingType,String>();  this.missingMandatoryLdapProps=new HashSet<String>(SettingType.LDAP_ATTRIBUTES_MANDATORY);  if (props != null) {    for (    Object propKey : props.keySet()) {      String key=String.valueOf(propKey);      SettingType settingType=SettingType.valueOf(key);      String value=props.getProperty(key);      if (settingType.getDirContextKey() != null) {        this.dirProperties.put(settingType.getDirContextKey(),value);      } else       if (SettingType.LDAP_ATTRIBUTES.contains(settingType)) {        this.attrMap.put(settingType,value);      } else       if (SettingType.LDAP_BASE_DN.equals(settingType)) {        this.baseDN=value;      }      this.missingMandatoryLdapProps.remove(key);    }  }}  }
class C{  @Override public <R,A>Eval<R> collect(final Collector<? super T,A,R> collector){  return Eval.later(null);}  }
class C{  @Override public void playSound(@RawRes int resourceId){  Timber.i("playSound: %s (AVS MediaManager intensity level = %s)",context.getResources().getResourceEntryName(resourceId),zMessagingApi.getMediaManager().getIntensity());  zMessagingApi.getMediaManager().playMedia(context.getResources().getResourceEntryName(resourceId));}  }
class C{  public CanvasComponentBuilder background(byte bg){  background=bg;  return this;}  }
class C{  public AddSynapseGroupAction(final NetworkPanel networkPanel){  super(networkPanel,"Connect Neuron Groups with Synapse Group...",EnablingCondition.SOURCE_AND_TARGET_NEURON_GROUPS);  if (networkPanel == null) {    throw new IllegalArgumentException("networkPanel must not be null");  }  this.networkPanel=networkPanel;  putValue(SHORT_DESCRIPTION,"Connect source and target neuron groups with a synpase group");}  }
class C{  public void replaceType(String oldType,String newType){  List<String> names=getNames(oldType);  addType(newType);  for (  String name : names) {    addName(newType,name);    setPriority(newType,name,getPriority(oldType,name));    setDropComment(newType,name,getDropComment(oldType,name));    setPickupComment(newType,name,getPickupComment(oldType,name));  }  listCarLoads.remove(oldType);}  }
class C{  public String toString(){  return "[" + getLocalName() + "|=\""+ getValue()+ "\"]";}  }
class C{  @Override public String toString(){  return "ConstraintFailure{" + "name='" + name + '\''+ ", reason='"+ reason+ '\''+ '}';}  }
class C{  private void createCheck(MPaySelectionLine line) throws Exception {  for (int i=0; i < m_list.size(); i++) {    MPaySelectionCheck check=(MPaySelectionCheck)m_list.get(i);    if (check.getC_BPartner_ID() == line.getInvoice().getC_BPartner_ID()) {      check.addLine(line);      if (!check.save())       throw new IllegalStateException("Cannot save MPaySelectionCheck");      line.setC_PaySelectionCheck_ID(check.getC_PaySelectionCheck_ID());      line.setProcessed(true);      if (!line.save())       throw new IllegalStateException("Cannot save MPaySelectionLine");      return;    }  }  String PaymentRule=line.getPaymentRule();  if (p_PaymentRule != null) {    if (!X_C_Order.PAYMENTRULE_DirectDebit.equals(PaymentRule))     PaymentRule=p_PaymentRule;  }  MPaySelectionCheck check=new MPaySelectionCheck(line,PaymentRule);  if (!check.isValid()) {    int C_BPartner_ID=check.getC_BPartner_ID();    MBPartner bp=MBPartner.get(getCtx(),C_BPartner_ID);    String msg="@NotFound@ @C_BP_BankAccount@: " + bp.getName();    throw new AdempiereUserError(msg);  }  if (!check.save())   throw new IllegalStateException("Cannot save MPaySelectionCheck");  line.setC_PaySelectionCheck_ID(check.getC_PaySelectionCheck_ID());  line.setProcessed(true);  if (!line.save())   throw new IllegalStateException("Cannot save MPaySelectionLine");  m_list.add(check);}  }
class C{  public EqualsBuilder append(Object lhs,Object rhs){  if (isEquals == false) {    return this;  }  if (lhs == rhs) {    return this;  }  if (lhs == null || rhs == null) {    this.setEquals(false);    return this;  }  Class lhsClass=lhs.getClass();  if (!lhsClass.isArray()) {    isEquals=lhs.equals(rhs);  } else   if (lhs.getClass() != rhs.getClass()) {    this.setEquals(false);  } else   if (lhs instanceof long[]) {    append((long[])lhs,(long[])rhs);  } else   if (lhs instanceof int[]) {    append((int[])lhs,(int[])rhs);  } else   if (lhs instanceof short[]) {    append((short[])lhs,(short[])rhs);  } else   if (lhs instanceof char[]) {    append((char[])lhs,(char[])rhs);  } else   if (lhs instanceof byte[]) {    append((byte[])lhs,(byte[])rhs);  } else   if (lhs instanceof double[]) {    append((double[])lhs,(double[])rhs);  } else   if (lhs instanceof float[]) {    append((float[])lhs,(float[])rhs);  } else   if (lhs instanceof boolean[]) {    append((boolean[])lhs,(boolean[])rhs);  } else {    append((Object[])lhs,(Object[])rhs);  }  return this;}  }
class C{  static int hash(int h){  h^=(h >>> 20) ^ (h >>> 12);  return h ^ (h >>> 7) ^ (h >>> 4);}  }
class C{  public void testUnspecifiedProperties() throws Exception {  RenameFilter rf=new RenameFilter();  rf.setTungstenSchema("tungsten_foo");  try {    filterHelper.setFilter(rf);    filterHelper.done();    fail("Exception not thrown during configure though definitionsFile property was not set");  } catch (  ReplicatorException e) {    logger.info(e);  }}  }
