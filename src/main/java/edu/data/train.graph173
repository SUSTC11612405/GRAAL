class C{  protected List<IEditProposal> collectEditProposals(){  List<IEditProposal> proposals=new ArrayList<IEditProposal>();  View selectedView=getSelectedView();  if (selectedView != null) {    if (proposalProviders != null) {      for (      IEditProposalProvider provider : proposalProviders) {        for (        IEditProposal editProposal : provider.getProposals(selectedView)) {          if (editProposal.isApplicable())           proposals.add(editProposal);        }      }    }  }  return proposals;}  }
class C{  private void chargeLocale(){  Locale lc=this.getLocale();  InputStream str=getClass().getClassLoader().getResourceAsStream("resources/message_" + lc.getCountry() + ".properties");  if (str == null) {    str=getClass().getClassLoader().getResourceAsStream("resources/message_ES.properties");  }  messages=new Properties();  try {    messages.load(str);  } catch (  FileNotFoundException e) {  }catch (  IOException e) {  }}  }
class C{  public static final void fillShape(GL2 gl,Shape s){  if (s instanceof Circle) {    RenderUtilities.fillCircle(gl,(Circle)s);  } else   if (s instanceof Rectangle) {    RenderUtilities.fillRectangle(gl,(Rectangle)s);  } else   if (s instanceof Polygon) {    RenderUtilities.fillPolygon(gl,(Polygon)s);  } else   if (s instanceof Segment) {  } else {  }}  }
class C{  public void addImplementationEventListenerNS(String namespaceURI,String type,EventListener listener,boolean useCapture){  HashTable listeners;  if (useCapture) {    if (capturingImplementationListeners == null) {      capturingImplementationListeners=new HashTable();    }    listeners=capturingImplementationListeners;  } else {    if (bubblingImplementationListeners == null) {      bubblingImplementationListeners=new HashTable();    }    listeners=bubblingImplementationListeners;  }  EventListenerList list=(EventListenerList)listeners.get(type);  if (list == null) {    list=new EventListenerList();    listeners.put(type,list);  }  list.addListener(namespaceURI,null,listener);}  }
class C{  private void initialDoubleTriangle(Graph graph){  List<Node> nodes=graph.getNodes();  for (  Node B : nodes) {    List<Node> intoBArrows=graph.getNodesInTo(B,Endpoint.ARROW);    List<Node> intoBCircles=graph.getNodesInTo(B,Endpoint.CIRCLE);    List<Node> possA=new LinkedList<>(intoBArrows);    List<Node> possC=new LinkedList<>(intoBArrows);    for (    Node D : intoBCircles) {      for (      Node A : possA) {        for (        Node C : possC) {          if (C == A) {            continue;          }          if (!graph.isAdjacentTo(A,D) || !graph.isAdjacentTo(C,D)) {            continue;          }          if (graph.isDefCollider(A,D,C)) {            continue;          }          boolean checkABC=false;          boolean checkADC=false;          for (          Set<Node> marginalSet : marginalVars) {            if (marginalSet.contains(A) && marginalSet.contains(B) && marginalSet.contains(C)) {              checkABC=true;            }            if (marginalSet.contains(A) && marginalSet.contains(D) && marginalSet.contains(C)) {              checkABC=true;            }          }          if (!checkABC || !checkADC) {            continue;          }          if (!isArrowpointAllowed(graph,D,B)) {            continue;          }          graph.setEndpoint(D,B,Endpoint.ARROW);          changeFlag=true;        }      }    }  }}  }
class C{  public SonstIT(CnATreeElement parent){  super(parent);  setEntity(new Entity(TYPE_ID));  getEntity().initDefaultValues(getTypeFactory());  setTitel(getTypeFactory().getMessage(TYPE_ID));}  }
class C{  private static int readCode(boolean[] rawbits,int startIndex,int length){  int res=0;  for (int i=startIndex; i < startIndex + length; i++) {    res<<=1;    if (rawbits[i]) {      res++;    }  }  return res;}  }
class C{  public MailContent text(String s){  html.a(escapeXml(s));  text.a(s);  return this;}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  InstructorEditForm frm=(InstructorEditForm)form;  frm.setLookupEnabled(ApplicationProperty.InstructorExternalIdLookup.isTrue() && ApplicationProperty.InstructorExternalIdLookupClass.value() != null);  return null;}  }
class C{  public boolean canRead(){  if (_stream != null)   return _stream.canRead(); else   return false;}  }
class C{  public void handle(PluginMessage message) throws IllegalArgumentException {  if (!message.getTag().equalsIgnoreCase(ForgeConstants.FML_HANDSHAKE_TAG)) {    throw new IllegalArgumentException("Expecting a Forge Handshake packet.");  }  message.setAllowExtendedPacket(true);  ForgeClientHandshakeState prevState=state;  packetQueue.add(message);  state=state.send(message,con);  if (state != prevState) {synchronized (packetQueue) {      while (!packetQueue.isEmpty()) {        ForgeLogger.logClient(ForgeLogger.LogDirection.SENDING,prevState.name(),packetQueue.getFirst());        con.getForgeServerHandler().receive(packetQueue.removeFirst());      }    }  }}  }
class C{  public synchronized long startTime(){  return startTime;}  }
class C{  public void reset(){  if (th != null) {    th.hook(4);  }  this.indexInfo.set(null);}  }
class C{  public BillingAdapterNotFoundException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public boolean isSubResourceLocator(){  return isSubResourceLocator;}  }
class C{  public Strategy withFixedSeed(long seed){  return new Strategy(defaultPRNG(seed),examples,shrinkCycles,reporter);}  }
class C{  public int viewToModel(GlyphView v,float x,float y,Shape a,Position.Bias[] biasReturn){  sync(v);  Rectangle alloc=(a instanceof Rectangle) ? (Rectangle)a : a.getBounds();  int p0=v.getStartOffset();  int p1=v.getEndOffset();  TabExpander expander=v.getTabExpander();  Segment text=v.getText(p0,p1);  int[] justificationData=getJustificationData(v);  int offs=Utilities.getTabbedTextOffset(v,text,metrics,alloc.x,(int)x,expander,p0,justificationData);  SegmentCache.releaseSharedSegment(text);  int retValue=p0 + offs;  if (retValue == p1) {    retValue--;  }  biasReturn[0]=Position.Bias.Forward;  return retValue;}  }
class C{  public BatchEnvironment(RootDoc rootDoc){  this.rootDoc=rootDoc;  docRemote=rootDoc().classNamed(REMOTE);  docException=rootDoc().classNamed(EXCEPTION);  docRemoteException=rootDoc().classNamed(REMOTE_EXCEPTION);  docRuntimeException=rootDoc().classNamed(RUNTIME_EXCEPTION);}  }
class C{  public void onExecuteQuery(){  try {    genForm.executeQuery();  }  finally {    Clients.showBusy(null,false);  }}  }
class C{  private boolean isBlack(final int x,final int y){  if (!inBounds(x,y)) {    return false;  }  return (m_bufferedImage.getRGB(x,y) & 0x00FFFFFF) == 0;}  }
class C{  public BaseDriveCollectionRequestBuilder(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  private void processSameAs3(ISPO spo){  ISPO[] spos=new ISPO[chunkSize];  int numSPOs=0;  Iterator<IV> samesIt=getSames(spo.o()).iterator();  while (samesIt.hasNext()) {    final IV same=samesIt.next();    if (spo.p().equals(sameAs) && spo.s().equals(same)) {      continue;    }    if (numSPOs == chunkSize) {      boolean present=false;      IChunkedOrderedIterator<ISPO> absent=db.bulkFilterStatements(spos,numSPOs,present);      if (absent.hasNext()) {        if (sameAs3 == null) {          sameAs3=createTempTripleStore();        }        db.addStatements(sameAs3,copyOnly,absent,null);      }      numSPOs=0;    }    spos[numSPOs++]=new SPO(spo.s(),spo.p(),same,StatementEnum.Inferred);    dumpSPO(spos[numSPOs - 1]);  }  if (numSPOs > 0) {    boolean present=false;    IChunkedOrderedIterator<ISPO> absent=db.bulkFilterStatements(spos,numSPOs,present);    if (absent.hasNext()) {      if (sameAs3 == null) {        sameAs3=createTempTripleStore();      }      db.addStatements(sameAs3,copyOnly,absent,null);    }  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:31.248 -0500",hash_original_method="E82979AF836D183FB2BABD0E0E7F3431",hash_generated_method="F9AF44DB11847DD24867E34B907F1D76") public static int reverseBytes(int i){  return i;}  }
class C{  public void resetToken(){  tokenIntern=String.valueOf(Math.random());}  }
class C{  public boolean isAvoidFirstLastClippingEnabled(){  return mAvoidFirstLastClipping;}  }
class C{  public void enter(Object monitor){  if (monitor == null) {    throw new NullPointerException();  }  monitors.add(monitor);}  }
class C{  public static String evaluateModel(String classifierString,String[] options) throws Exception {  return weka.classifiers.evaluation.Evaluation.evaluateModel(classifierString,options);}  }
class C{  public void unsetSender(){  this.sender=null;}  }
class C{  protected AnnotationImpl(){  super();}  }
class C{  public void removeAllTableListeners(){  m_listeners.clear();}  }
class C{  public static SimEvent findFirstDeferred(int src,Predicate p){  SimEvent ev=null;  Iterator<SimEvent> iterator=deferred.iterator();  while (iterator.hasNext()) {    ev=iterator.next();    if (ev.getDestination() == src && p.match(ev)) {      break;    }  }  return ev;}  }
class C{  public long next(long fromTime){  if (getCurrentCount() == 0 || fromTime == 0 || fromTime == startDate.getTime()) {    return first();  }  if (Debug.verboseOn()) {    Debug.logVerbose("Date List Size: " + (rDateList == null ? 0 : rDateList.size()),module);    Debug.logVerbose("Rule List Size: " + (rRulesList == null ? 0 : rRulesList.size()),module);  }  if (rDateList == null && rRulesList == null) {    return 0;  }  long nextRuleTime=fromTime;  boolean hasNext=true;  Iterator<RecurrenceRule> rulesIterator=getRecurrenceRuleIterator();  while (rulesIterator.hasNext()) {    RecurrenceRule rule=rulesIterator.next();    while (hasNext) {      nextRuleTime=getNextTime(rule,nextRuleTime);      if (nextRuleTime == 0 || isValid(nextRuleTime)) {        hasNext=false;      }    }  }  return nextRuleTime;}  }
class C{  private Security(){}  }
class C{  public void reset(){  isEmpty_=false;  theta_=Long.MAX_VALUE;  sketch_=null;  isFirstCall_=true;}  }
class C{  protected static EncodedStringValue parseEncodedStringValue(ByteArrayInputStream pduDataStream){  assert (null != pduDataStream);  pduDataStream.mark(1);  EncodedStringValue returnValue=null;  int charset=0;  int temp=pduDataStream.read();  assert (-1 != temp);  int first=temp & 0xFF;  if (first == 0) {    return null;  }  pduDataStream.reset();  if (first < TEXT_MIN) {    parseValueLength(pduDataStream);    charset=parseShortInteger(pduDataStream);  }  byte[] textString=parseWapString(pduDataStream,TYPE_TEXT_STRING);  try {    if (0 != charset) {      returnValue=new EncodedStringValue(charset,textString);    } else {      returnValue=new EncodedStringValue(textString);    }  } catch (  Exception e) {    return null;  }  return returnValue;}  }
class C{  public _BuildAgentUpdate(final String[] flagStrings){  super(flagStrings);}  }
class C{  public void removeFolder(AcsAccessObject acs,int userId,ArchiveObject arch,int fdrId,String entidad) throws Exception {  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    if (acs == null)     FolderMdoFdr.removeFolder(dbConn,null,userId,arch.getArchiveToken(),fdrId,entidad); else     FolderMdoFdr.removeFolder(dbConn,acs.getAccessToken(),userId,arch.getArchiveToken(),fdrId,entidad);  } catch (  Exception e) {    throw e;  } finally {    dbConn.close();  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static boolean contentEquals(InputStream input1,InputStream input2) throws IOException {  if (!(input1 instanceof BufferedInputStream)) {    input1=new BufferedInputStream(input1);  }  if (!(input2 instanceof BufferedInputStream)) {    input2=new BufferedInputStream(input2);  }  int ch=input1.read();  while (EOF != ch) {    int ch2=input2.read();    if (ch != ch2) {      return false;    }    ch=input1.read();  }  int ch2=input2.read();  return ch2 == EOF;}  }
class C{  public final void testEqualsObject01(){  Certificate c1=new MyCertificate("TEST_TYPE",testEncoding);  assertTrue(c1.equals(c1));}  }
class C{  public void nextValidId(int orderId){  try {    _log.debug("nextValidId: " + orderId);    int maxKey=m_tradePersistentModel.findTradeOrderByMaxKey();    if (maxKey < minOrderId) {      maxKey=minOrderId;    }    if (maxKey < orderId) {      orderKey=new AtomicInteger(orderId);    } else {      orderKey=new AtomicInteger(maxKey + 1);    }    this.fireConnectionOpened();  } catch (  Exception ex) {    error(orderId,3210,ex.getMessage());  }}  }
class C{  @Override boolean isDecoderSelected(){  return !mDecoderList.isSelectionEmpty();}  }
class C{  public void loadParameterFromZK(){  try {    _log.info("load token life time and idle time from zk");    PropertyInfoExt params=_coordinator.getTargetInfo(PropertyInfoExt.class);    _maxTokenLifeTimeInMins=NumberUtils.toInt(params.getProperty(Constants.TOKEN_LIFE_TIME),Constants.DEFAULT_TOKEN_LIFE_TIME);    _maxTokenIdleTimeInMins=NumberUtils.toInt(params.getProperty(Constants.TOKEN_IDLE_TIME),Constants.DEFAULT_TOKEN_IDLE_TIME);  } catch (  Exception e) {    _log.warn("load parameter from ZK error, use default values.");    _maxTokenLifeTimeInMins=Constants.DEFAULT_TOKEN_LIFE_TIME;    _maxTokenIdleTimeInMins=Constants.DEFAULT_TOKEN_IDLE_TIME;  }}  }
class C{  public void buildClassifier(Instances instances) throws Exception {  getCapabilities().testWithFail(instances);  instances=new Instances(instances);  instances.deleteWithMissingClass();  m_Discretizer.setIgnoreClass(true);  m_Discretizer.setAttributeIndices("" + (instances.classIndex() + 1));  m_Discretizer.setBins(getNumBins());  m_Discretizer.setUseEqualFrequency(getUseEqualFrequency());  m_Discretizer.setInputFormat(instances);  Instances newTrain=Filter.useFilter(instances,m_Discretizer);  m_OldIndexToNewIndex=null;  if (m_DeleteEmptyBins) {    int numNonEmptyClasses=0;    boolean[] notEmptyClass=new boolean[newTrain.numClasses()];    for (int i=0; i < newTrain.numInstances(); i++) {      if (!notEmptyClass[(int)newTrain.instance(i).classValue()]) {        numNonEmptyClasses++;        notEmptyClass[(int)newTrain.instance(i).classValue()]=true;      }    }    ArrayList<String> newClassVals=new ArrayList<String>(numNonEmptyClasses);    m_OldIndexToNewIndex=new int[newTrain.numClasses()];    for (int i=0; i < newTrain.numClasses(); i++) {      if (notEmptyClass[i]) {        m_OldIndexToNewIndex[i]=newClassVals.size();        newClassVals.add(newTrain.classAttribute().value(i));      }    }    Attribute newClass=new Attribute(newTrain.classAttribute().name(),newClassVals);    ArrayList<Attribute> newAttributes=new ArrayList<Attribute>(newTrain.numAttributes());    for (int i=0; i < newTrain.numAttributes(); i++) {      if (i != newTrain.classIndex()) {        newAttributes.add((Attribute)newTrain.attribute(i).copy());      } else {        newAttributes.add(newClass);      }    }    Instances newTrainTransformed=new Instances(newTrain.relationName(),newAttributes,newTrain.numInstances());    newTrainTransformed.setClassIndex(newTrain.classIndex());    for (int i=0; i < newTrain.numInstances(); i++) {      Instance inst=newTrain.instance(i);      newTrainTransformed.add(inst);      newTrainTransformed.lastInstance().setClassValue(m_OldIndexToNewIndex[(int)inst.classValue()]);    }    newTrain=newTrainTransformed;  }  m_OriginalTargetValues=new double[instances.numInstances()];  m_NewTargetValues=new int[instances.numInstances()];  for (int i=0; i < m_OriginalTargetValues.length; i++) {    m_OriginalTargetValues[i]=instances.instance(i).classValue();    m_NewTargetValues[i]=(int)newTrain.instance(i).classValue();  }  m_DiscretizedHeader=new Instances(newTrain,0);  int numClasses=newTrain.numClasses();  m_ClassMeans=new double[numClasses];  m_ClassCounts=new int[numClasses];  for (int i=0; i < instances.numInstances(); i++) {    Instance inst=newTrain.instance(i);    if (!inst.classIsMissing()) {      int classVal=(int)inst.classValue();      m_ClassCounts[classVal]++;      m_ClassMeans[classVal]+=instances.instance(i).classValue();    }  }  for (int i=0; i < numClasses; i++) {    if (m_ClassCounts[i] > 0) {      m_ClassMeans[i]/=m_ClassCounts[i];    }  }  if (m_Debug) {    System.out.println("Bin Means");    System.out.println("==========");    for (int i=0; i < m_ClassMeans.length; i++) {      System.out.println(m_ClassMeans[i]);    }    System.out.println();  }  m_Classifier.buildClassifier(newTrain);}  }
class C{  public String UseThis(int type,String id,String context){  int i=FindSym(type,id,context);  if (i == symtab.size())   return id; else   return ((SymTabEntry)symtab.elementAt(i)).useThis;}  }
class C{  public KeyToGroupMap(Comparable defaultGroup){  ParamChecks.nullNotPermitted(defaultGroup,"defaultGroup");  this.defaultGroup=defaultGroup;  this.groups=new ArrayList();  this.keyToGroupMap=new HashMap();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public MethodInvoker(Method method){  this.method=method;}  }
class C{  public void updateOutputs(char[] bits){  if (bits == null) {    log.debug("Empty char[] received");  } else {    for (int i=0; i < outputsToBeans.size(); i++) {      if (getOutputBean(i + 1) != null) {        getOutputBean(i + 1).setBinaryOutput(true);      }      if (bits[i] == '1' && getOutputBean(i + 1) != null && getOutputBean(i + 1).getCommandedState() != Turnout.CLOSED) {        getOutputBean(i + 1).setCommandedState(Turnout.CLOSED);      } else       if (bits[i] == '0' && getOutputBean(i + 1) != null && getOutputBean(i + 1).getCommandedState() != Turnout.THROWN) {        getOutputBean(i + 1).setCommandedState(Turnout.THROWN);      } else       if (bits[i] == 'n' || bits[i] == 'u') {      } else {        log.debug("Invalid element " + bits[i] + " cannot be converted to state for output #"+ i);      }    }  }}  }
class C{  private double computeProbability(String token){  double hamFactor=0;  double spamFactor=0;  boolean foundInHam=false;  boolean foundInSpam=false;  double minThreshold=0.01;  double maxThreshold=0.99;  if (hamTokenCounts.containsKey(token)) {    foundInHam=true;  }  if (spamTokenCounts.containsKey(token)) {    foundInSpam=true;  }  if (foundInHam) {    hamFactor=2 * hamTokenCounts.get(token).doubleValue();    if (!foundInSpam) {      minThreshold=(hamFactor > 20) ? 0.0001 : 0.0002;    }  }  if (foundInSpam) {    spamFactor=spamTokenCounts.get(token).doubleValue();    if (!foundInHam) {      maxThreshold=(spamFactor > 10) ? 0.9999 : 0.9998;    }  }  if ((hamFactor + spamFactor) < 5) {    return 0.4;  }  double spamFreq=Math.min(1.0,spamFactor / spamMessageCount);  double hamFreq=Math.min(1.0,hamFactor / hamMessageCount);  return Math.max(minThreshold,Math.min(maxThreshold,(spamFreq / (hamFreq + spamFreq))));}  }
class C{  public static boolean isValidKeyId(String keyId){  if (keyId == null) {    return false;  }  try {    Hex.decodeHex(keyId.toCharArray());switch (keyId.length()) {case HEX_SHORT_KEY_ID_LENGTH:case HEX_LONG_KEY_ID_LENGTH:case HEX_V4_FINGERPRINT_LENGTH:      return true;case HEX_V3_FINGERPRINT_LENGTH:default :  }} catch (DecoderException ex) {  LOGGER.info("Invalid hex formatted key id",ex);}return false;}  }
class C{  public TrackingId trackingId(){  return trackingId;}  }
class C{  public static boolean isSorted(final CommonIndex arr1,final long start,final long end){  assert 0 <= start;  assert start <= end;  assert end <= arr1.length();  for (long ii=start; ii < end - 1; ii++) {    if (arr1.get(ii) > arr1.get(ii + 1)) {      return false;    }  }  return true;}  }
class C{  public SimpleDateFormat(String pattern){  super();  this.pattern=pattern;}  }
class C{  public static Driver driver(String uri){  return driver(uri,Config.defaultConfig());}  }
class C{  public Decoder(Reader reader){  this.reader=reader;}  }
class C{  public synchronized void resultsReturned(CacheSnapshot snap,GemFireVM member,int snapshotId){  if (snapshotId == CacheCollector.snapshotCount) {    if (snap == null) {      noteResponse(member);    } else {      view.updateSnapshot(updateResultSet(snap,member),new ArrayList(heardFrom));    }  }}  }
class C{  public void commitChanges(){  networkPanel.getNetwork().setTimeStep(Double.parseDouble(timeStepField.getText()));  NetworkPanel.setNudgeAmount(Double.parseDouble(nudgeAmountField.getText()));  Network.setSynapseVisibilityThreshold(Integer.parseInt(tfSynapseVisibilityThreshold.getText()));  EditMode.setWandRadius(Integer.parseInt(wandRadiusField.getText()));  if (networkPanel.getEditMode().isWand()) {    networkPanel.getEditMode().resetWandCursor();    networkPanel.updateCursor();  }  networkPanel.setShowTime(showTimeBox.isSelected());  networkPanel.repaint();  NeuronGroup.setUseSubSampling(cbUseSubSampling.isSelected());  NeuronGroup.setNumSubSamples(Integer.parseInt(tfNumSubSamples.getText()));}  }
class C{  public boolean hasOption(int number){  return Collections.binarySearch(asSortedList(),new Option(number)) >= 0;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public NioDatagramConnector(IoProcessor<NioSession> processor){  super(new DefaultDatagramSessionConfig(),processor);}  }
class C{  public boolean contains(int left,int top,int right,int bottom){  return this.left < this.right && this.top < this.bottom && this.left <= left && this.top <= top && this.right >= right && this.bottom >= bottom;}  }
class C{  @Deprecated public Object angularGlobal(String name){  AngularObjectRegistry registry=interpreterContext.getAngularObjectRegistry();  AngularObject ao=registry.get(name,null,null);  if (ao == null) {    return null;  } else {    return ao.get();  }}  }
class C{  public static void main(String[] args) throws IOException {  boolean enableOutput=true;  boolean outputToFile=false;  String inputFolder="";  String outputFolder="";  String workload="random";  String vmAllocationPolicy="thr";  String vmSelectionPolicy="mc";  String parameter="0.8";  new RandomRunner(enableOutput,outputToFile,inputFolder,outputFolder,workload,vmAllocationPolicy,vmSelectionPolicy,parameter);}  }
class C{  public byte[] receiveSpecLenBytes(int len){  Log.d(TAG,"receiveSpecLenBytes() entrance: len = " + len);  try {    acquireLock();    mServerSocket.receive(mReceivePacket);    byte[] recDatas=Arrays.copyOf(mReceivePacket.getData(),mReceivePacket.getLength());    Log.d(TAG,"received len : " + recDatas.length);    for (int i=0; i < recDatas.length; i++) {      Log.e(TAG,"recDatas[" + i + "]:"+ recDatas[i]);    }    Log.e(TAG,"receiveSpecLenBytes: " + new String(recDatas));    if (recDatas.length != len) {      Log.w(TAG,"received len is different from specific len, return null");      return null;    }    return recDatas;  } catch (  IOException e) {    e.printStackTrace();  }  return null;}  }
class C{  public void addPart(final Part part){  LOG.trace("enter addPart(Part part)");  parameters.add(part);}  }
class C{  public static CacheHeader readHeader(InputStream is) throws IOException {  CacheHeader entry=new CacheHeader();  int magic=readInt(is);  if (magic != CACHE_MAGIC) {    throw new IOException();  }  entry.key=readString(is);  entry.etag=readString(is);  if (entry.etag.equals("")) {    entry.etag=null;  }  entry.serverDate=readLong(is);  entry.lastModified=readLong(is);  entry.ttl=readLong(is);  entry.softTtl=readLong(is);  entry.responseHeaders=readStringStringMap(is);  return entry;}  }
class C{  public ProcessBuilder createVersionCheckProcess(final Binary binary){  final Builder<String> builder=ImmutableList.<String>builder();  if (isWindows()) {    builder.add(WIN_SHELL_COMAMNDS);  } else {    builder.add(NIX_SHELL_COMAMNDS);  }  builder.add(escapeBinaryPath(binary.getBinaryAbsolutePath()) + " " + binary.getVersionArgument());  return create(builder.build(),binary,null,false);}  }
class C{  public boolean isMultiThreaded(){  return mode == DispatchMode.MULTI_THREAD;}  }
class C{  private void applyDataSocketTimeout() throws SocketException {  if (isPassive()) {    if (this.DataSocketPassive != null) {      this.DataSocketPassive.setSoTimeout(this.DataSocketTimeout * 1000);    }  } else {    if (this.DataSocketActive != null) {      this.DataSocketActive.setSoTimeout(this.DataSocketTimeout * 1000);    }  }}  }
class C{  private boolean containsAll(Graph g,Set<Node> nodes,NodePair pair){  List<String> nodeNames=g.getNodeNames();  if (!nodeNames.contains(pair.getFirst().getName()) || !nodeNames.contains(pair.getSecond().getName())) {    return false;  }  for (  Node node : nodes) {    if (!nodeNames.contains(node.getName())) {      return false;    }  }  return true;}  }
class C{  default Class<?> findDatabaseType(){  final String name=getDatabaseType();  try {    return Class.forName(name);  } catch (  final ClassNotFoundException ex) {    throw new SpeedmentConfigException("Could not find database type: '" + name + "'.",ex);  }}  }
class C{  protected void doDrawOrderedRenderable(DrawContext dc,PickSupport pickCandidates,Matrix matrix){  ShapeData current=(ShapeData)this.getCurrent();  current.renderMatrix=matrix;  super.doDrawOrderedRenderable(dc,pickCandidates);}  }
class C{  public static boolean isHighSurrogate(int c){  return (0xD800 <= c && c <= 0xDBFF);}  }
class C{  public static NSObject parse(byte[] bytes) throws ParseException {  ASCIIPropertyListParser parser=new ASCIIPropertyListParser(bytes);  return parser.parse();}  }
class C{  public ThriftReply(int seqId){  this.seqId=seqId;}  }
class C{  @GridifySetToSet(gridName="GridifySetToSetTarget",threshold=2,splitSize=2) @Override public long[] findPrimesInPrimitiveArray(long[] input){  return findPrimesInPrimitiveArray0(input);}  }
class C{  private static void initSettings(String[] confFiles,int firstIndex){  int i=firstIndex;  if (i >= confFiles.length) {    return;  }  try {    Settings.init(confFiles[i]);    for (i=firstIndex + 1; i < confFiles.length; i++) {      Settings.addSettings(confFiles[i]);    }  } catch (  SettingsError er) {    try {      Integer.parseInt(confFiles[i]);    } catch (    NumberFormatException nfe) {      System.err.println("Failed to load settings: " + er);      System.err.println("Caught at " + er.getStackTrace()[0]);      System.exit(-1);    }    System.err.println("Warning: using deprecated way of " + "expressing run indexes. Run index should be the " + "first option, or right after -b option (optionally "+ "as a range of start and end values).");    System.exit(-1);  }}  }
class C{  public double longing(F f,int N){  return Math.pow(1 - p(f),N);}  }
class C{  public void increaseSpeed(){  animation.setRate(animation.getRate() + 1);}  }
class C{  public int hashCode(){  return this.getName().hashCode();}  }
class C{  protected boolean shouldExcludeType(Class<?> type){  for (  Class<?> t : excludedFieldTypes) {    if (t.isAssignableFrom(type)) {      return true;    }  }  return false;}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == Expression.class) {switch (baseFeatureID) {default :      return -1;  }}if (baseClass == AnnotableExpression.class) {switch (baseFeatureID) {case N4JSPackage.ANNOTABLE_EXPRESSION__ANNOTATION_LIST:    return N4JSPackage.FUNCTION_EXPRESSION__ANNOTATION_LIST;default :  return -1;}}if (baseClass == GenericDeclaration.class) {switch (baseFeatureID) {case N4JSPackage.GENERIC_DECLARATION__TYPE_VARS:return N4JSPackage.FUNCTION_EXPRESSION__TYPE_VARS;default :return -1;}}if (baseClass == NamedElement.class) {switch (baseFeatureID) {default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  private HashMap<Integer,Trie> buildLookupTable(final Map<Integer,List<Trie>> childTries){  HashMap<Integer,Trie> lookup=new HashMap<>(childTries.size());  for (  int id : childTries.keySet()) {    final List<Trie> tries=childTries.get(id);    if (tries.size() == 1) {      lookup.put(id,tries.get(0));    } else {      lookup.put(id,new SliceAggregatingTrie(tries));    }  }  return lookup;}  }
class C{  private static Mode decodeAsciiSegment(BitSource bits,StringBuilder result,StringBuilder resultTrailer) throws FormatException {  boolean upperShift=false;  do {    int oneByte=bits.readBits(8);    if (oneByte == 0) {      throw FormatException.getFormatInstance();    } else     if (oneByte <= 128) {      if (upperShift) {        oneByte+=128;      }      result.append((char)(oneByte - 1));      return Mode.ASCII_ENCODE;    } else     if (oneByte == 129) {      return Mode.PAD_ENCODE;    } else     if (oneByte <= 229) {      int value=oneByte - 130;      if (value < 10) {        result.append('0');      }      result.append(value);    } else     if (oneByte == 230) {      return Mode.C40_ENCODE;    } else     if (oneByte == 231) {      return Mode.BASE256_ENCODE;    } else     if (oneByte == 232) {      result.append((char)29);    } else     if (oneByte == 233 || oneByte == 234) {    } else     if (oneByte == 235) {      upperShift=true;    } else     if (oneByte == 236) {      result.append("[)>\u001E05\u001D");      resultTrailer.insert(0,"\u001E\u0004");    } else     if (oneByte == 237) {      result.append("[)>\u001E06\u001D");      resultTrailer.insert(0,"\u001E\u0004");    } else     if (oneByte == 238) {      return Mode.ANSIX12_ENCODE;    } else     if (oneByte == 239) {      return Mode.TEXT_ENCODE;    } else     if (oneByte == 240) {      return Mode.EDIFACT_ENCODE;    } else     if (oneByte == 241) {    } else     if (oneByte >= 242) {      if (oneByte != 254 || bits.available() != 0) {        throw FormatException.getFormatInstance();      }    }  } while (bits.available() > 0);  return Mode.ASCII_ENCODE;}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 180) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public static <Type>void processAttributes(final Type widget,final LmlTag tag,final LmlParser parser,final ObjectSet<String> processedAttributes,final boolean throwExceptionIfAttributeUnknown){  if (GdxMaps.isEmpty(tag.getNamedAttributes())) {    return;  }  final LmlSyntax syntax=parser.getSyntax();  final boolean hasProcessedAttributes=processedAttributes != null;  for (  final Entry<String,String> attribute : tag.getNamedAttributes()) {    if (attribute == null || hasProcessedAttributes && processedAttributes.contains(attribute.key)) {      continue;    }    final LmlAttribute<Type> attributeProcessor=syntax.getAttributeProcessor(widget,attribute.key);    if (attributeProcessor == null) {      if (throwExceptionIfAttributeUnknown) {        parser.throwErrorIfStrict("Unknown attribute: \"" + attribute.key + "\" for widget type: "+ widget.getClass().getName());      }      continue;    }    attributeProcessor.process(parser,tag,widget,attribute.value);    if (hasProcessedAttributes) {      processedAttributes.add(attribute.key);    }  }}  }
class C{  public void invokeInterface(final Type owner,final Method method){  invokeInsn(Opcodes.INVOKEINTERFACE,owner,method,true);}  }
class C{  public static boolean isNetWare(){  return netware;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case NEW_NODE_ID:  return isSetNewNodeId();case NODE_STORE:return isSetNodeStore();}throw new IllegalStateException();}  }
class C{  public static void writeJSONString(List list,Writer out) throws IOException {  if (list == null) {    out.write("null");    return;  }  boolean first=true;  Iterator iter=list.iterator();  out.write('[');  while (iter.hasNext()) {    if (first)     first=false; else     out.write(',');    Object value=iter.next();    if (value == null) {      out.write("null");      continue;    }    JSONValue.writeJSONString(value,out);  }  out.write(']');}  }
class C{  private static float GetFloatField(JNIEnvironment env,int objJREF,int fieldID){  if (traceJNI)   VM.sysWrite("JNI called: GetFloatField  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    RVMField field=MemberReference.getFieldRef(fieldID).resolve();    return field.getFloatValueUnchecked(obj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0f;  }}  }
class C{  @Override public boolean spatialDirty(Spatial spatial,DirtyType type){  if (spatial == null) {    spatial=rootNode;  }  changed.set(false);switch (type) {case Attached:    rootNode.updateGeometricState(0,true);  changed.set(!(spatial instanceof Billboard));break;case Detached:rootNode.updateGeometricState(0,true);changed.set(!(spatial instanceof Billboard));break;case Bounding:rootNode.updateGeometricState(0,true);break;case RenderState:rootNode.updateGeometricState(0,true);changed.set(!(spatial instanceof Billboard));break;case Transform:spatial.updateWorldTransform(true);if (spatial instanceof Movable) {((Movable)spatial).notifyListeners();}changed.set(!(spatial instanceof Billboard) && !(spatial instanceof Marble));break;case Destroyed:break;}return (false);}  }
class C{  public final Operator createOperatorInstance() throws OperatorCreationException {  if (!isEnabled()) {    throw new OperatorCreationException(OperatorCreationException.OPERATOR_DISABLED_ERROR,key + "(" + clazz.getName()+ ")",null);  }  Operator operator=null;  try {    operator=createOperatorInstanceByDescription(this);  } catch (  InstantiationException e) {    throw new OperatorCreationException(OperatorCreationException.INSTANTIATION_ERROR,key + "(" + clazz.getName()+ ")",e);  }catch (  IllegalAccessException e) {    throw new OperatorCreationException(OperatorCreationException.ILLEGAL_ACCESS_ERROR,key + "(" + clazz.getName()+ ")",e);  }catch (  NoSuchMethodException e) {    throw new OperatorCreationException(OperatorCreationException.NO_CONSTRUCTOR_ERROR,key + "(" + clazz.getName()+ ")",e);  }catch (  java.lang.reflect.InvocationTargetException e) {    throw new OperatorCreationException(OperatorCreationException.CONSTRUCTION_ERROR,key + "(" + clazz.getName()+ ")",e);  }catch (  Throwable t) {    throw new OperatorCreationException(OperatorCreationException.INSTANTIATION_ERROR,"(" + clazz.getName() + ")",t);  }  OperatorService.invokeCreationHooks(operator);  return operator;}  }
class C{  public static void main(String[] args){  int width=Integer.parseInt(args[0]);  int height=Integer.parseInt(args[1]);  Picture picture=new Picture(width,height);  for (int row=0; row < height; row++) {    for (int col=0; col < width; col++) {      if (!BinaryStdIn.isEmpty()) {        boolean bit=BinaryStdIn.readBoolean();        if (bit)         picture.set(col,row,Color.BLACK); else         picture.set(col,row,Color.WHITE);      } else {        picture.set(col,row,Color.RED);      }    }  }  picture.show();}  }
class C{  public void testAttachFragmentUi_showsSpinnerDuringSyncWhenLocationTreeEmpty(){  mFakeSyncManager.setSyncing(true);  mController.init();  LocationTree locationTree=FakeAppLocationTreeFactory.emptyTree();  mFakeEventBus.post(new AppLocationTreeFetchedEvent(locationTree));  mController.attachFragmentUi(mMockFragmentUi);  verify(mMockFragmentUi).setBusyLoading(true);}  }
class C{  static void testCancel(Path dir) throws IOException {  System.out.println("-- Cancel --");  try (WatchService watcher=FileSystems.getDefault().newWatchService()){    System.out.format("register %s for events\n",dir);    WatchKey myKey=dir.register(watcher,new WatchEvent.Kind<?>[]{ENTRY_CREATE});    checkKey(myKey,dir);    System.out.println("cancel key");    myKey.cancel();    Path file=dir.resolve("mars");    System.out.format("create: %s\n",file);    Files.createFile(file);    System.out.println("poll...");    try {      WatchKey key=watcher.poll(3000,TimeUnit.MILLISECONDS);      if (key != null)       throw new RuntimeException("key should not be queued");    } catch (    InterruptedException x) {      throw new RuntimeException(x);    }    Files.delete(file);    System.out.println("OKAY");  } }  }
class C{  public void testRandomStrings() throws Exception {  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);}  }
class C{  public static DatabaseFieldConfig createFieldConfig(DatabaseType databaseType,Field field) throws SQLException {  Annotation columnAnnotation=null;  Annotation basicAnnotation=null;  Annotation idAnnotation=null;  Annotation generatedValueAnnotation=null;  Annotation oneToOneAnnotation=null;  Annotation manyToOneAnnotation=null;  Annotation joinColumnAnnotation=null;  Annotation enumeratedAnnotation=null;  Annotation versionAnnotation=null;  for (  Annotation annotation : field.getAnnotations()) {    Class<?> annotationClass=annotation.annotationType();    if (annotationClass.getName().equals("javax.persistence.Column")) {      columnAnnotation=annotation;    }    if (annotationClass.getName().equals("javax.persistence.Basic")) {      basicAnnotation=annotation;    }    if (annotationClass.getName().equals("javax.persistence.Id")) {      idAnnotation=annotation;    }    if (annotationClass.getName().equals("javax.persistence.GeneratedValue")) {      generatedValueAnnotation=annotation;    }    if (annotationClass.getName().equals("javax.persistence.OneToOne")) {      oneToOneAnnotation=annotation;    }    if (annotationClass.getName().equals("javax.persistence.ManyToOne")) {      manyToOneAnnotation=annotation;    }    if (annotationClass.getName().equals("javax.persistence.JoinColumn")) {      joinColumnAnnotation=annotation;    }    if (annotationClass.getName().equals("javax.persistence.Enumerated")) {      enumeratedAnnotation=annotation;    }    if (annotationClass.getName().equals("javax.persistence.Version")) {      versionAnnotation=annotation;    }  }  if (columnAnnotation == null && basicAnnotation == null && idAnnotation == null && oneToOneAnnotation == null && manyToOneAnnotation == null && enumeratedAnnotation == null && versionAnnotation == null) {    return null;  }  DatabaseFieldConfig config=new DatabaseFieldConfig();  String fieldName=field.getName();  if (databaseType.isEntityNamesMustBeUpCase()) {    fieldName=fieldName.toUpperCase();  }  config.setFieldName(fieldName);  if (columnAnnotation != null) {    try {      Method method=columnAnnotation.getClass().getMethod("name");      String name=(String)method.invoke(columnAnnotation);      if (name != null && name.length() > 0) {        config.setColumnName(name);      }      method=columnAnnotation.getClass().getMethod("columnDefinition");      String columnDefinition=(String)method.invoke(columnAnnotation);      if (columnDefinition != null && columnDefinition.length() > 0) {        config.setColumnDefinition(columnDefinition);      }      method=columnAnnotation.getClass().getMethod("length");      config.setWidth((Integer)method.invoke(columnAnnotation));      method=columnAnnotation.getClass().getMethod("nullable");      Boolean nullable=(Boolean)method.invoke(columnAnnotation);      if (nullable != null) {        config.setCanBeNull(nullable);      }      method=columnAnnotation.getClass().getMethod("unique");      Boolean unique=(Boolean)method.invoke(columnAnnotation);      if (unique != null) {        config.setUnique(unique);      }    } catch (    Exception e) {      throw SqlExceptionUtil.create("Problem accessing fields from the @Column annotation for field " + field,e);    }  }  if (basicAnnotation != null) {    try {      Method method=basicAnnotation.getClass().getMethod("optional");      Boolean optional=(Boolean)method.invoke(basicAnnotation);      if (optional == null) {        config.setCanBeNull(true);      } else {        config.setCanBeNull(optional);      }    } catch (    Exception e) {      throw SqlExceptionUtil.create("Problem accessing fields from the @Basic annotation for field " + field,e);    }  }  if (idAnnotation != null) {    if (generatedValueAnnotation == null) {      config.setId(true);    } else {      config.setGeneratedId(true);    }  }  if (oneToOneAnnotation != null || manyToOneAnnotation != null) {    if (Collection.class.isAssignableFrom(field.getType()) || ForeignCollection.class.isAssignableFrom(field.getType())) {      config.setForeignCollection(true);      if (joinColumnAnnotation != null) {        try {          Method method=joinColumnAnnotation.getClass().getMethod("name");          String name=(String)method.invoke(joinColumnAnnotation);          if (name != null && name.length() > 0) {            config.setForeignCollectionColumnName(name);          }          method=joinColumnAnnotation.getClass().getMethod("fetch");          Object fetchType=method.invoke(joinColumnAnnotation);          if (fetchType != null && fetchType.toString().equals("EAGER")) {            config.setForeignCollectionEager(true);          }        } catch (        Exception e) {          throw SqlExceptionUtil.create("Problem accessing fields from the @JoinColumn annotation for field " + field,e);        }      }    } else {      config.setForeign(true);      if (joinColumnAnnotation != null) {        try {          Method method=joinColumnAnnotation.getClass().getMethod("name");          String name=(String)method.invoke(joinColumnAnnotation);          if (name != null && name.length() > 0) {            config.setColumnName(name);          }          method=joinColumnAnnotation.getClass().getMethod("nullable");          Boolean nullable=(Boolean)method.invoke(joinColumnAnnotation);          if (nullable != null) {            config.setCanBeNull(nullable);          }          method=joinColumnAnnotation.getClass().getMethod("unique");          Boolean unique=(Boolean)method.invoke(joinColumnAnnotation);          if (unique != null) {            config.setUnique(unique);          }        } catch (        Exception e) {          throw SqlExceptionUtil.create("Problem accessing fields from the @JoinColumn annotation for field " + field,e);        }      }    }  }  if (enumeratedAnnotation != null) {    try {      Method method=enumeratedAnnotation.getClass().getMethod("value");      Object typeValue=method.invoke(enumeratedAnnotation);      if (typeValue != null && typeValue.toString().equals("STRING")) {        config.setDataType(DataType.ENUM_STRING);      } else {        config.setDataType(DataType.ENUM_INTEGER);      }    } catch (    Exception e) {      throw SqlExceptionUtil.create("Problem accessing fields from the @Enumerated annotation for field " + field,e);    }  }  if (versionAnnotation != null) {    config.setVersion(true);  }  if (config.getDataPersister() == null) {    config.setDataPersister(DataPersisterManager.lookupForField(field));  }  config.setUseGetSet(DatabaseFieldConfig.findGetMethod(field,false) != null && DatabaseFieldConfig.findSetMethod(field,false) != null);  return config;}  }
class C{  private void putEntry(String key,CacheHeader entry){  if (!mEntries.containsKey(key)) {    mTotalSize+=entry.size;  } else {    CacheHeader oldEntry=mEntries.get(key);    mTotalSize+=(entry.size - oldEntry.size);  }  mEntries.put(key,entry);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(7);  newVector.addElement(new Option("\tPopulation size","L",1,"-L <integer>"));  newVector.addElement(new Option("\tDescendant population size","A",1,"-A <integer>"));  newVector.addElement(new Option("\tNumber of runs","U",1,"-U <integer>"));  newVector.addElement(new Option("\tUse mutation.\n\t(default true)","M",0,"-M"));  newVector.addElement(new Option("\tUse cross-over.\n\t(default true)","C",0,"-C"));  newVector.addElement(new Option("\tUse tournament selection (true) or maximum subpopulatin (false).\n\t(default false)","O",0,"-O"));  newVector.addElement(new Option("\tRandom number seed","R",1,"-R <seed>"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  public void removeAll(){  List<Layer> oldLayers=getLayerList();  if (allLayers == null || allLayers.isEmpty()) {    return;  }  BeanContext bc=getBeanContext();  List<Layer> nonRemoveableLayers=new ArrayList<Layer>();  for (  Layer layer : oldLayers) {    if (layer != null) {      if (layer.isRemovable()) {        turnLayerOn(false,layer);        layer.clearListeners();        if (bc != null) {          bc.remove(layer);        }      } else {        nonRemoveableLayers.add(layer);      }    }  }  setLayerList(nonRemoveableLayers);  System.gc();}  }
class C{  public void deleteMirror(String instanceId) throws StorageCenterAPIException {  LOG.debug("Deleting mirror '{}'",instanceId);  RestResult rr=restClient.delete(String.format("StorageCenter/ScCopyMirrorMigrate/%s",instanceId));  if (!checkResults(rr)) {    String msg=String.format("Error deleting mirror %s: %s",instanceId,rr.getErrorMsg());    LOG.error(msg);    throw new StorageCenterAPIException(msg);  }}  }
class C{  public long id(){  return id;}  }
class C{  void addCommand(String sql){  if (sql == null) {    return;  }  sql=sql.trim();  if (sql.length() == 0) {    return;  }  if (commandHistory.size() > MAX_HISTORY) {    commandHistory.remove(0);  }  int idx=commandHistory.indexOf(sql);  if (idx >= 0) {    commandHistory.remove(idx);  }  commandHistory.add(sql);  if (server.isCommandHistoryAllowed()) {    server.saveCommandHistoryList(commandHistory);  }}  }
class C{  public Map<String,RawProtein<ProSitePatternRawMatch>> process(Map<String,RawProtein<ProSitePatternRawMatch>> proteinIdToRawMatchMap){  if (passLevels == null) {    throw new IllegalStateException("The ProfilePostProcessing class has not been correctly initialised. A List of acceptable Levels must be passed in.");  }  if (passLevels.size() == 0) {    LOGGER.warn("The ProfilePostProcessing class has been initialised such that NO matches will pass. (The list of acceptable levels is empty).");  }  Map<String,RawProtein<ProSitePatternRawMatch>> filteredMatches=new HashMap<String,RawProtein<ProSitePatternRawMatch>>();  for (  String candidateProteinId : proteinIdToRawMatchMap.keySet()) {    RawProtein<ProSitePatternRawMatch> candidateRawProtein=proteinIdToRawMatchMap.get(candidateProteinId);    RawProtein<ProSitePatternRawMatch> filteredProtein=new RawProtein<ProSitePatternRawMatch>(candidateRawProtein.getProteinIdentifier());    for (    ProSitePatternRawMatch rawMatch : candidateRawProtein.getMatches()) {      if (passLevels.contains(rawMatch.getPatternLevel())) {        filteredProtein.addMatch(rawMatch);      }    }    if (filteredProtein.getMatches() != null && filteredProtein.getMatches().size() > 0) {      filteredMatches.put(candidateProteinId,filteredProtein);    }  }  return filteredMatches;}  }
class C{  public Object extFunction(FuncExtFunction extFunction,Vector argVec) throws javax.xml.transform.TransformerException {  try {    String namespace=extFunction.getNamespace();    String functionName=extFunction.getFunctionName();    int arity=extFunction.getArgCount();    javax.xml.namespace.QName myQName=new javax.xml.namespace.QName(namespace,functionName);    if (extensionInvocationDisabled) {      String fmsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_EXTENSION_FUNCTION_CANNOT_BE_INVOKED,new Object[]{myQName.toString()});      throw new XPathFunctionException(fmsg);    }    XPathFunction xpathFunction=resolver.resolveFunction(myQName,arity);    ArrayList argList=new ArrayList(arity);    for (int i=0; i < arity; i++) {      Object argument=argVec.elementAt(i);      if (argument instanceof XNodeSet) {        argList.add(i,((XNodeSet)argument).nodelist());      } else       if (argument instanceof XObject) {        Object passedArgument=((XObject)argument).object();        argList.add(i,passedArgument);      } else {        argList.add(i,argument);      }    }    return (xpathFunction.evaluate(argList));  } catch (  XPathFunctionException xfe) {    throw new org.apache.xml.utils.WrappedRuntimeException(xfe);  }catch (  Exception e) {    throw new javax.xml.transform.TransformerException(e);  }}  }
class C{  public RemoteDrive(final String name){  this.name=Preconditions.checkNotNull(name,"IE00769: Name argument can not be null");}  }
class C{  public boolean isOnDemand(){  return this.onDemand;}  }
class C{  public static String byte2Hex(int value){  if (value > 255 || value < 0) {    throw new IllegalArgumentException("The int converting to hex should be in range 0~255");  }  return String.valueOf(FIRST_CHAR[value]) + String.valueOf(SECOND_CHAR[value]);}  }
class C{  private boolean checkCancellationLocked(){  if (runState == CANCEL_REQUESTED) {    workerHandler.obtainMessage(MSG_CALL_ACKNOWLEDGE_CANCEL,this).sendToTarget();    return true;  }  return false;}  }
class C{  public MessageEntry(BaseEntry<?> sourceEntry){  super(sourceEntry);  getCategories().add(MESSAGE_CATEGORY);}  }
class C{  public AnnotationScanner(ServletContext sc){  super(sc);  if (GroovyHelper.isGroovyAvailable(FacesContext.getCurrentInstance())) {    scriptManagers.add(new GroovyScriptManager(sc));  }  WebConfiguration webConfig=WebConfiguration.getInstance(sc);  initializeAnnotationScanPackages(sc,webConfig);}  }
class C{  public SketchesStateException(String message){  super(message);}  }
class C{  public XMLFilterImpl(XMLReader parent){  setParent(parent);}  }
class C{  public NotificationContext(Alert alert,Trigger trigger,Notification notification,long triggerFiredTime,String triggerEventValue){  this.alert=alert;  this.trigger=trigger;  this.coolDownExpiration=notification.getCooldownExpiration();  this.notification=notification;  this.triggerFiredTime=triggerFiredTime;  this.triggerEventValue=triggerEventValue;}  }
class C{  public void addMailStatus(E type,Exception exception){  items.add(new SendMailStatusItem<E>(type,exception));}  }
class C{  public static String escape(String pattern){  return regexpEscape.replace(pattern,"\\$&");}  }
class C{  public MutablePeriod(long duration,Chronology chronology){  super(duration,null,chronology);}  }
class C{  public static int compare(int x,int y){  return (x < y) ? -1 : ((x == y) ? 0 : 1);}  }
class C{  @Override public BlockingQueue<String> concurrentIDsByQuery(final String querystring,final String sort,final int offset,final int maxcount,final long maxtime,final int buffersize,final int concurrency){  List<String> querystrings=new ArrayList<>(1);  querystrings.add(querystring);  return concurrentIDsByQueries(querystrings,sort,offset,maxcount,maxtime,buffersize,concurrency);}  }
class C{  public static List<String> adaptModules(String name,List<Module> userModules){  Vector<String> dependents=new Vector<String>(userModules.size());  for (int i=0; i < userModules.size(); i++) {    Module module=userModules.get(i);    if (!module.getFile().getName().equals(name)) {      dependents.add(module.getFile().getName());    }  }  return dependents;}  }
class C{  public boolean handleMouseEvent(GUIState guistate,Manipulating2D manipulating,LocationWrapper wrapper,MouseEvent event,DrawInfo2D fieldPortrayalDrawInfo,int type){  return false;}  }
class C{  @SuppressWarnings("unchecked") public static <E>Function<E,E> identity(){  return (Function<E,E>)IdentityFunction.INSTANCE;}  }
class C{  public void testOrAndSwitchWithNegation(){  final ASTFilterNormalizationOptimizer rewriter=new ASTFilterNormalizationOptimizer();  final IBindingSet[] bsets=new IBindingSet[]{new ListBindingSet()};  final QueryRoot given=new QueryRoot(QueryType.SELECT);{    final ProjectionNode projection=new ProjectionNode();    given.setProjection(projection);    projection.addProjectionVar(new VarNode("s"));    final JoinGroupNode whereClause=new JoinGroupNode();    whereClause.setQueryHint(QueryHints.NORMALIZE_FILTER_EXPRESSIONS,"true");    given.setWhereClause(whereClause);    final StatementPatternNode spn=new StatementPatternNode(new VarNode("s"),new VarNode("p"),new VarNode("o"),null,Scope.DEFAULT_CONTEXTS);    whereClause.addChild(spn);    final FunctionNode notBound1=FunctionNode.NOT(new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s1")}));    final FunctionNode notBound2=FunctionNode.NOT(new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s2")}));    final FunctionNode notBound3=FunctionNode.NOT(new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s3")}));    final FunctionNode notBound4=FunctionNode.NOT(new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s4")}));    final FunctionNode notBound5=FunctionNode.NOT(new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s5")}));    final FilterNode filterNode=new FilterNode(FunctionNode.NOT(FunctionNode.AND(FunctionNode.OR(notBound1,notBound2),FunctionNode.OR(notBound3,FunctionNode.OR(notBound4,notBound5)))));    assertFalse(StaticAnalysis.isCNF(filterNode));    whereClause.addChild(filterNode);    whereClause.setProperty(QueryHints.NORMALIZE_FILTER_EXPRESSIONS,"true");  }  final QueryRoot expected=new QueryRoot(QueryType.SELECT);{    final ProjectionNode projection=new ProjectionNode();    expected.setProjection(projection);    projection.addProjectionVar(new VarNode("s"));    final JoinGroupNode whereClause=new JoinGroupNode();    whereClause.setQueryHint(QueryHints.NORMALIZE_FILTER_EXPRESSIONS,"true");    expected.setWhereClause(whereClause);    final StatementPatternNode spn=new StatementPatternNode(new VarNode("s"),new VarNode("p"),new VarNode("o"),null,Scope.DEFAULT_CONTEXTS);    whereClause.addChild(spn);    final FunctionNode bound1=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s1")});    final FunctionNode bound2=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s2")});    final FunctionNode bound3=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s3")});    final FunctionNode bound4=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s4")});    final FunctionNode bound5=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s5")});    final FunctionNode or1=FunctionNode.OR(bound1,bound3);    final FunctionNode or2=FunctionNode.OR(bound1,bound4);    final FunctionNode or3=FunctionNode.OR(bound1,bound5);    final FunctionNode or4=FunctionNode.OR(bound2,bound3);    final FunctionNode or5=FunctionNode.OR(bound2,bound4);    final FunctionNode or6=FunctionNode.OR(bound2,bound5);    whereClause.addChild(new FilterNode(or1));    whereClause.addChild(new FilterNode(or2));    whereClause.addChild(new FilterNode(or3));    whereClause.addChild(new FilterNode(or4));    whereClause.addChild(new FilterNode(or5));    whereClause.addChild(new FilterNode(or6));    whereClause.setProperty(QueryHints.NORMALIZE_FILTER_EXPRESSIONS,"true");  }  final AST2BOpContext context=new AST2BOpContext(new ASTContainer(given),store);  final IQueryNode actual=rewriter.optimize(context,new QueryNodeWithBindingSet(given,bsets)).getQueryNode();  assertSameAST(expected,actual);}  }
class C{  public static void checkFieldValueWithExpected(final boolean condition,final String fieldName,final Object value,final Collection<Object> expected){  if (!condition) {    throw APIException.badRequests.invalidParameterValueWithExpected(fieldName,value,expected);  }}  }
class C{  public static byte[] toByteArray(SmsUdhElement[] udhElements){  ByteArrayOutputStream baos=new ByteArrayOutputStream(100);  if (udhElements == null) {    return new byte[0];  }  baos.write((byte)SmsUdhUtil.getTotalSize(udhElements));  try {    for (    SmsUdhElement udhElement : udhElements) {      udhElement.writeTo(baos);    }  } catch (  IOException ioe) {    throw new RuntimeException(ioe);  }  return baos.toByteArray();}  }
class C{  public static byte[] base64Decode(String base64Encoded){  if (base64Encoded.contains("+") || base64Encoded.contains("/")) {    return BaseEncoding.base64().decode(base64Encoded);  } else {    return BaseEncoding.base64Url().decode(base64Encoded);  }}  }
class C{  public void attrib(Env<AttrContext> env){  if (env.tree.hasTag(TOPLEVEL))   attribTopLevel(env); else   attribClass(env.tree.pos(),env.enclClass.sym);}  }
class C{  public Class<? extends Annotation> annotationType(){  return annotationType;}  }
class C{  public <E extends Enum<E>>E optEnum(Class<E> clazz,int index,E defaultValue){  try {    Object val=this.opt(index);    if (JSONObject.NULL.equals(val)) {      return defaultValue;    }    if (clazz.isAssignableFrom(val.getClass())) {      @SuppressWarnings("unchecked") E myE=(E)val;      return myE;    }    return Enum.valueOf(clazz,val.toString());  } catch (  IllegalArgumentException|NullPointerException e) {    return defaultValue;  }}  }
class C{  public EntityQuery select(Set<String> fieldsToSelect){  this.fieldsToSelect=fieldsToSelect;  return this;}  }
class C{  public static WebElement findElementPresentAfter(SearchContext parent,By by,int timeoutInSeconds){  Preconditions.checkNotNull(parent);  Preconditions.checkNotNull(by);  try {    WebElementWait wait=new WebElementWait(parent,timeoutInSeconds);    return wait.until(null);  } catch (  TimeoutException e) {    throw new TimeoutException(String.format("Element %s is not present after %s seconds",by,timeoutInSeconds),e);  }}  }
class C{  public static boolean isSystemApplication(Context context,String packageName){  if (context == null) {    return false;  }  return isSystemApplication(context.getPackageManager(),packageName);}  }
class C{  public Outcome write(ICloud.MBSFile file,IOFunction<OutputStream,Long> writer) throws IOException {  logger.trace("<< write() < file: {}",file.getRelativePath());  Path path=directory.apply(file);  long written=createDirectoryWriteFile(path,writer);  logger.debug("-- write() > path: {} written: {}",path,written);  Outcome result;  if (file.getAttributes().hasEncryptionKey()) {    result=decrypt(path,file);  } else {    logger.debug("-- write() > success: {}",file.getRelativePath());    result=Outcome.WRITTEN;  }  if (setLastModifiedTime) {    setLastModifiedTime(path,file);  }  logger.trace(">> write() > file: {} result: {}",file.getRelativePath(),result);  return result;}  }
class C{  public void replacePlaceholder(Placeholder session,Bitmap placeholder){  Storage.replacePlaceholder(session.outputUri,placeholder);  CameraUtil.broadcastNewPicture(mContext,session.outputUri);}  }
class C{  private void heapifyUp(int twopos,double cur,int val){  while (twopos > 0) {    final int parent=(twopos - 1) >>> 1;    double par=twoheap[parent];    if (cur <= par) {      break;    }    twoheap[twopos]=par;    twovals[twopos]=twovals[parent];    twopos=parent;  }  twoheap[twopos]=cur;  twovals[twopos]=val;}  }
class C{  private OrderedCollection<PortChangeEvent> handlePortStatusDelete(OFPortDesc delPort){  OrderedCollection<PortChangeEvent> events=new LinkedHashSetWrapper<PortChangeEvent>();  lock.writeLock().lock();  try {    Map<OFPort,OFPortDesc> newPortByNumber=new HashMap<OFPort,OFPortDesc>(portsByNumber);    OFPortDesc prevPort=portsByNumber.get(delPort.getPortNo());    if (prevPort == null) {      prevPort=portsByName.get(delPort.getName());      if (prevPort != null) {        newPortByNumber.remove(prevPort.getPortNo());        events.add(new PortChangeEvent(prevPort,PortChangeType.DELETE));      }    } else     if (prevPort.getName().equals(delPort.getName())) {      newPortByNumber.remove(delPort.getPortNo());      events.add(new PortChangeEvent(delPort,PortChangeType.DELETE));    } else {      newPortByNumber.remove(delPort.getPortNo());      events.add(new PortChangeEvent(prevPort,PortChangeType.DELETE));      prevPort=portsByName.get(delPort.getName().toLowerCase());      if (prevPort != null) {        newPortByNumber.remove(prevPort.getPortNo());        events.add(new PortChangeEvent(prevPort,PortChangeType.DELETE));      }    }    updatePortsWithNewPortsByNumber(newPortByNumber);    return events;  }  finally {    lock.writeLock().unlock();  }}  }
class C{  public SubjectInfoAccessExtension(List<AccessDescription> accessDescriptions) throws IOException {  this.extensionId=PKIXExtensions.SubjectInfoAccess_Id;  this.critical=false;  this.accessDescriptions=accessDescriptions;  encodeThis();}  }
class C{  private void simulatePhi(PhiInsn insn){  int phiResultReg=insn.getResult().getReg();  if (latticeValues[phiResultReg] == VARYING) {    return;  }  RegisterSpecList sources=insn.getSources();  int phiResultValue=TOP;  Constant phiConstant=null;  int sourceSize=sources.size();  for (int i=0; i < sourceSize; i++) {    int predBlockIndex=insn.predBlockIndexForSourcesIndex(i);    int sourceReg=sources.get(i).getReg();    int sourceRegValue=latticeValues[sourceReg];    if (!executableBlocks.get(predBlockIndex)) {      continue;    }    if (sourceRegValue == CONSTANT) {      if (phiConstant == null) {        phiConstant=latticeConstants[sourceReg];        phiResultValue=CONSTANT;      } else       if (!latticeConstants[sourceReg].equals(phiConstant)) {        phiResultValue=VARYING;        break;      }    } else {      phiResultValue=sourceRegValue;      break;    }  }  if (setLatticeValueTo(phiResultReg,phiResultValue,phiConstant)) {    addUsersToWorklist(phiResultReg,phiResultValue);  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:55.194 -0500",hash_original_method="8A4CA4E7E43847BF1836AE50422D1EC2",hash_generated_method="11BB02842F74EFA0B750E0E2DC061F0E") public void notify(int id,Notification notification){  notify(null,id,notification);}  }
class C{  public boolean equals(Object o){  if (!(o instanceof Vector3f)) {    return false;  }  if (this == o) {    return true;  }  Vector3f comp=(Vector3f)o;  if (Float.compare(x,comp.x) != 0)   return false;  if (Float.compare(y,comp.y) != 0)   return false;  if (Float.compare(z,comp.z) != 0)   return false;  return true;}  }
class C{  private static void doCopyDirectory(File srcDir,File destDir,FileFilter filter,boolean preserveFileDate,List<String> exclusionList) throws IOException {  File[] srcFiles=filter == null ? srcDir.listFiles() : srcDir.listFiles(filter);  if (srcFiles == null) {    throw new IOException("Failed to list contents of " + srcDir);  }  if (destDir.exists()) {    if (destDir.isDirectory() == false) {      throw new IOException("Destination '" + destDir + "' exists but is not a directory");    }  } else {    if (!destDir.mkdirs() && !destDir.isDirectory()) {      throw new IOException("Destination '" + destDir + "' directory cannot be created");    }  }  if (destDir.canWrite() == false) {    throw new IOException("Destination '" + destDir + "' cannot be written to");  }  for (  File srcFile : srcFiles) {    File dstFile=new File(destDir,srcFile.getName());    if (exclusionList == null || !exclusionList.contains(srcFile.getCanonicalPath())) {      if (srcFile.isDirectory()) {        doCopyDirectory(srcFile,dstFile,filter,preserveFileDate,exclusionList);      } else {        doCopyFile(srcFile,dstFile,preserveFileDate);      }    }  }  if (preserveFileDate) {    destDir.setLastModified(srcDir.lastModified());  }}  }
class C{  public void testHasAttributeNS1() throws Throwable {  String localName="nomatch";  String namespaceURI="http://www.usa.com";  Document doc;  NodeList elementList;  Element testNode;  boolean state;  doc=(Document)load("staffNS",builder);  elementList=doc.getElementsByTagName("address");  testNode=(Element)elementList.item(0);  state=testNode.hasAttributeNS(namespaceURI,localName);  assertFalse("throw_False",state);}  }
class C{  @Override public void attributeRemoved(ServletContextAttributeEvent event){  log("attributeRemoved('" + event.getName() + "', '"+ event.getValue()+ "')");}  }
class C{  public void error(JSONObject message){  sendPluginResult(new PluginResult(PluginResult.Status.ERROR,message));}  }
class C{  public ImageMaster(Properties props){  setProperties(props);}  }
class C{  public Object pop(){  Object o=list.get(0);  list.remove(0);  return o;}  }
class C{  private static Map<Set<Edge>,Map<Triple,List<Set<Edge>>>> pathsEnsuringTrek(Graph graph,List<Node> ensureTrek,Set<Node> conditioning){  Map<Set<Edge>,Map<Triple,List<Set<Edge>>>> paths=new HashMap<>();  pathsEnsuringTrek(graph,ensureTrek,1,new LinkedList<>(Arrays.asList(ensureTrek.get(0))),conditioning,new HashMap<Triple,NodePair>(),paths,new HashSet<>(Arrays.asList(ensureTrek.get(0))));  return paths;}  }
class C{  public synchronized void addToState(DialogueState newState){  addToState((BNetwork)newState);  evidence.addAssignment(newState.getEvidence().addPrimes());}  }
class C{  public static byte[] decode(String data){  ByteArrayOutputStream bOut=new ByteArrayOutputStream();  try {    encoder.decode(data,bOut);  } catch (  Exception e) {    throw new DecoderException("exception decoding Hex string: " + e.getMessage(),e);  }  return bOut.toByteArray();}  }
class C{  private void parseTestClasses(String testClassArg,TestSuiteBuilder testSuiteBuilder){  String[] testClasses=testClassArg.split(",");  for (  String testClass : testClasses) {    parseTestClass(testClass,testSuiteBuilder);  }}  }
class C{  protected boolean stillWaiting(){  if (shutdown) {    ReplyException re=new ReplyException(new DistributedSystemDisconnectedException(LocalizedStrings.ReplyProcessor21_ABORTED_DUE_TO_SHUTDOWN.toLocalizedString()));    this.exception=re;    return false;  }  if (canStopWaiting()) {    return false;  }  if (stopBecauseOfExceptions()) {    return false;  }  return numMembers() > 0;}  }
class C{  private final void dispatachChars(Node node) throws org.xml.sax.SAXException {  if (fSerializer != null) {    this.fSerializer.characters(node);  } else {    String data=((Text)node).getData();    this.fSerializer.characters(data.toCharArray(),0,data.length());  }}  }
class C{  public ClientKeyExchange(BigInteger dh_Yc){  byte[] bb=dh_Yc.toByteArray();  if (bb[0] == 0) {    exchange_keys=new byte[bb.length - 1];    System.arraycopy(bb,1,exchange_keys,0,exchange_keys.length);  } else {    exchange_keys=bb;  }  length=exchange_keys.length + 2;  isRSA=false;}  }
class C{  public boolean isPure(){  if (!mutated.get(PurityGlobalNode.node).isEmpty())   return false;  Set<PurityNode> A=new HashSet<PurityNode>();  Set<PurityNode> B=new HashSet<PurityNode>();  internalPassNodes(paramNodes,A,false);  internalPassNodes(globEscape,B,true);  internalPassNode(PurityGlobalNode.node,B,true);  Iterator<PurityNode> it=A.iterator();  while (it.hasNext()) {    PurityNode n=it.next();    if (B.contains(n) || !mutated.get(n).isEmpty())     return false;  }  return true;}  }
class C{  private void trackOpt(final String event,final JSONObject props){  if (ENABLED) {    mMixpanelAPI.track(event,props);  }}  }
class C{  public BarcodeFX(BarcodeEncoding type,String content,Color background,Color foreground,int zoom,int border,BarcodeSettings barcodeSettings){  this.type=type;  this.setBarcodeSettings(barcodeSettings);  this.setContent(content);  this.setBackground(background);  this.setForeground(foreground);  this.setZoom(zoom);  this.setBorder(border);}  }
class C{  @Override public Object checkBoxBut(final FormObject form){  final JCheckBox checkBut=new JCheckBox();  setupButton(checkBut,form);  setupUniversalFeatures(checkBut,form);  if (checkBut.getBorder() != null) {    checkBut.setBorderPainted(true);  }  final boolean[] flags=form.getFieldFlags();  if ((flags != null) && (flags[FormObject.READONLY_ID])) {    checkBut.setEnabled(false);    checkBut.setDisabledIcon(checkBut.getIcon());    checkBut.setDisabledSelectedIcon(checkBut.getSelectedIcon());  }  return checkBut;}  }
class C{  public void stopDecoding(){  this.decodeMode=DecodeMode.NONE;  this.callback=null;  stopDecoderThread();}  }
class C{  public static void checkArgument(boolean expression){  if (!expression) {    throw new IllegalArgumentException();  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void input(Object input){  if (!isEnabled()) {    return;  }  log("Input",Bot.FINE,input);  push(getBot().memory().addActiveMemory((Vertex)input));}  }
class C{  public ConfusionMatrix(String[] classNames){  super(classNames.length,classNames.length);  m_ClassNames=classNames.clone();}  }
class C{  public final void initVerify(PublicKey publicKey) throws InvalidKeyException {  engineInitVerify(publicKey);  state=VERIFY;  if (!skipDebug && pdebug != null) {    pdebug.println("Signature." + algorithm + " verification algorithm from: "+ this.provider.getName());  }}  }
class C{  private static void registerDefaultNamespaces(){  registerNamespace("ds",XMLSignature.XMLNS);  registerNamespace("dsig",XMLSignature.XMLNS);  registerNamespace("xades",XAdESNamespaces.XAdES);  registerNamespace("xades141",XAdESNamespaces.XAdES141);  registerNamespace("xades122",XAdESNamespaces.XAdES122);  registerNamespace("xades111",XAdESNamespaces.XAdES111);  registerNamespace("asic",ASiCNamespaces.ASiC);}  }
class C{  public void fillInBaseValues(long base,boolean useNulls){  final int maxCollectionSize=100;  aChar=(char)base;  aBoolean=true;  aByte=(byte)base;  aShort=(short)base;  anInt=(int)base;  aLong=base;  aFloat=base;  aDouble=base;  aDate=new Date(base);  aString="" + base;  if (useNulls) {    aDate=null;    aString=null;    anObject=null;    aMap=null;    aCollection=null;    aBooleanArray=null;    aCharArray=null;    aByteArray=null;    aShortArray=null;    anIntArray=null;    aLongArray=null;    aFloatArray=null;    aDoubleArray=null;    anObjectArray=null;    anArrayOfByteArray=null;  } else {    int desiredCollectionSize=(int)Math.min(base,maxCollectionSize);    anObject=new SimpleClass((int)base,(byte)base);    aMap=new HashMap();    aCollection=new ArrayList();    aBooleanArray=new boolean[desiredCollectionSize];    aCharArray=new char[desiredCollectionSize];    aByteArray=new byte[desiredCollectionSize];    aShortArray=new short[desiredCollectionSize];    anIntArray=new int[desiredCollectionSize];    aLongArray=new long[desiredCollectionSize];    aFloatArray=new float[desiredCollectionSize];    aDoubleArray=new double[desiredCollectionSize];    aStringArray=new String[desiredCollectionSize];    anObjectArray=new Object[desiredCollectionSize];    anArrayOfByteArray=new byte[desiredCollectionSize][desiredCollectionSize];    if (desiredCollectionSize > 0) {      for (int i=0; i < desiredCollectionSize - 1; i++) {        aMap.put(i,i);        aCollection.add(i);        aBooleanArray[i]=(i % 2) == 0;        aCharArray[i]=(char)(i);        aByteArray[i]=(byte)(i);        aShortArray[i]=(short)i;        anIntArray[i]=i;        aLongArray[i]=i;        aFloatArray[i]=i;        aDoubleArray[i]=i;        aStringArray[i]="" + i;        anObjectArray[i]=anObject;        anArrayOfByteArray[i]=aByteArray;      }      aMap.put(base,base);      aCollection.add(base);      aBooleanArray[desiredCollectionSize - 1]=true;      aCharArray[desiredCollectionSize - 1]=(char)base;      aByteArray[desiredCollectionSize - 1]=(byte)base;      aShortArray[desiredCollectionSize - 1]=(short)base;      anIntArray[desiredCollectionSize - 1]=(int)base;      aLongArray[desiredCollectionSize - 1]=base;      aFloatArray[desiredCollectionSize - 1]=base;      aDoubleArray[desiredCollectionSize - 1]=base;      aStringArray[desiredCollectionSize - 1]="" + base;      anObjectArray[desiredCollectionSize - 1]=anObject;    }  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:25.024 -0500",hash_original_method="1126924377A1AF5E908D05CFB28B37FF",hash_generated_method="4CF24E78B398EE3E254FEEF5DF20DD61") public SweepGradient(float cx,float cy,int color0,int color1){  native_instance=nativeCreate2(cx,cy,color0,color1);  native_shader=nativePostCreate2(native_instance,cx,cy,color0,color1);}  }
class C{  public String distanceTipText(){  return "The distance to be used.";}  }
class C{  @Transactional public void unfollowUser(final String followerId,final String followingUserId) throws ServiceException {  try {    unfollow(followerId,followingUserId,Follow.FOLLOWING_TYPE_C_USER);  } catch (  final RepositoryException e) {    final String msg="User[id=" + followerId + "] unfollows a user[id="+ followingUserId+ "] failed";    LOGGER.log(Level.ERROR,msg,e);    throw new ServiceException(msg);  }}  }
class C{  @Override public void flush() throws IOException {synchronized (lock) {    out.flush();  }}  }
class C{  public Builder(){}  }
class C{  public boolean checkUpdateAfterCondition(UniformPair<EventBean[]> newOldEvents,StatementContext statementContext){  return isAfterConditionSatisfied || checkAfterCondition(newOldEvents == null ? 0 : (newOldEvents.getFirst() == null ? 0 : newOldEvents.getFirst().length),statementContext);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Inline public static Object moveObject(Address toAddress,Object fromObj,Object toObj,int numBytes){  if (VM.VerifyAssertions)   VM._assert(toAddress.isZero() || toObj == null);  int copyBytes=numBytes;  int objRefOffset=OBJECT_REF_OFFSET;  Word statusWord=Word.zero();  Word hashState=HASH_STATE_UNHASHED;  if (ADDRESS_BASED_HASHING) {    statusWord=Magic.getWordAtOffset(fromObj,STATUS_OFFSET);    hashState=statusWord.and(HASH_STATE_MASK);    if (hashState.EQ(HASH_STATE_HASHED)) {      copyBytes-=HASHCODE_BYTES;      if (!DYNAMIC_HASH_OFFSET) {        if (toObj == null) {          toAddress=toAddress.plus(HASHCODE_BYTES);        }      }    } else     if (!DYNAMIC_HASH_OFFSET && hashState.EQ(HASH_STATE_HASHED_AND_MOVED)) {      objRefOffset+=HASHCODE_BYTES;    }  }  if (toObj != null) {    toAddress=Magic.objectAsAddress(toObj).minus(objRefOffset);  }  Address fromAddress=Magic.objectAsAddress(fromObj).minus(objRefOffset);  Memory.aligned32Copy(toAddress,fromAddress,copyBytes);  if (toObj == null) {    toObj=Magic.addressAsObject(toAddress.plus(objRefOffset));  } else {    if (VM.VerifyAssertions)     VM._assert(toObj == Magic.addressAsObject(toAddress.plus(objRefOffset)));  }  if (hashState.EQ(HASH_STATE_HASHED)) {    int hashCode=Magic.objectAsAddress(fromObj).toWord().rshl(LOG_BYTES_IN_ADDRESS).toInt();    if (DYNAMIC_HASH_OFFSET) {      Magic.setIntAtOffset(toObj,Offset.fromIntSignExtend(numBytes - OBJECT_REF_OFFSET - HASHCODE_BYTES),hashCode);    } else {      Magic.setIntAtOffset(toObj,HASHCODE_OFFSET,(hashCode << 1) | ALIGNMENT_MASK);    }    Magic.setWordAtOffset(toObj,STATUS_OFFSET,statusWord.or(HASH_STATE_HASHED_AND_MOVED));    if (ObjectModel.HASH_STATS)     ObjectModel.hashTransition2++;  }  return toObj;}  }
class C{  public void addMessageListener(Listener<BinaryMessage> listener){  mBroadcaster.addListener(listener);}  }
class C{  public static EventType resolveType(String engineURI,String eventName,EventAdapterService eventAdapterService,URI[] optionalResolutionURIs) throws ExprValidationException {  EventType eventType=eventAdapterService.getExistsTypeByName(eventName);  if (eventType != null) {    return eventType;  }  String engineURIQualifier=engineURI;  if (engineURI == null || EPServiceProviderSPI.DEFAULT_ENGINE_URI.equals(engineURI)) {    engineURIQualifier=EPServiceProviderSPI.DEFAULT_ENGINE_URI__QUALIFIER;  }  if (eventName.startsWith(engineURIQualifier)) {    int indexDot=eventName.indexOf(".");    if (indexDot > 0) {      String eventNameURI=eventName.substring(0,indexDot);      String eventNameRemainder=eventName.substring(indexDot + 1);      if (engineURIQualifier.equals(eventNameURI)) {        eventType=eventAdapterService.getExistsTypeByName(eventNameRemainder);      }    }  }  if (eventType != null) {    return eventType;  }  String message=null;  try {    eventType=eventAdapterService.addBeanType(eventName,eventName,true,false,false,false);  } catch (  EventAdapterException ex) {    log.debug(".resolveType Event type named '" + eventName + "' not resolved as Java-Class event");    message="Failed to resolve event type: " + ex.getMessage();  }  try {    eventType=eventAdapterService.addPlugInEventType(eventName,optionalResolutionURIs,null);  } catch (  EventAdapterException ex) {    log.debug(".resolveType Event type named '" + eventName + "' not resolved by plug-in event representations");  }  if (eventType == null) {    throw new ExprValidationException(message);  }  return eventType;}  }
class C{  public boolean isTimedout(){  return timedout;}  }
class C{  @Override public void onMessage(UUID nodeId,Object msg){  GridMessageListener[] arr0=arr;  if (arr0 == null)   return;  for (  GridMessageListener l : arr0)   l.onMessage(nodeId,msg);}  }
class C{  @Override public ConnectionConsumer createConnectionConsumer(final Destination destination,final String name,final ServerSessionPool pool,final int maxMessages) throws JMSException {  if (ActiveMQRASessionFactoryImpl.trace) {    ActiveMQRALogger.LOGGER.trace("createConnectionConsumer(" + destination + ", "+ name+ ", "+ pool+ ", "+ maxMessages+ ")");  }  throw new IllegalStateException(ISE);}  }
class C{  private void layout(NodeItem p,Rectangle2D r){  Iterator childIter=p.children();  while (childIter.hasNext())   m_kids.add(childIter.next());  Collections.sort(m_kids,s_cmp);  double w=Math.min(r.getWidth(),r.getHeight());  squarify(m_kids,m_row,w,r);  m_kids.clear();  childIter=p.children();  while (childIter.hasNext()) {    NodeItem c=(NodeItem)childIter.next();    if (c.getChildCount() > 0 && c.getDouble(AREA) > 0) {      updateArea(c,r);      layout(c,r);    }  }}  }
class C{  public void testDistributionNumeric(){  performTest(true,false,true,false,false);}  }
class C{  public ContraryObservationFractionAnnotation(){  this("COF","Contrary observation fraction",AnnotationDataType.DOUBLE);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected AtomicArrayPart(AtomicArray<E> base,int offset,int length){  Validate.isTrue(offset >= 0,"offset can't be negative!");  Validate.isTrue(length > 0,"length must be positive!");  Validate.isTrue(offset < base.length(),"offset can't be bigger than array. (offset: " + offset + ", base: "+ base.length()+ ")");  Validate.isTrue((length + offset) <= base.length(),"base array is too small for this offset and length. (offset: " + offset + ", length: "+ length+ ", base: "+ base.length()+ ")");  this.base=base;  this.offset=offset;  this.length=length;}  }
class C{  UpdateUseArrayOperator(int v1,int v2){  v=new ValueNumberPair(v1,v2);}  }
class C{  public boolean isBlank(int start,int length){  for (int i=start; i < start + length; i++) {    if (charAt(i) > ' ')     return false;  }  return true;}  }
class C{  public void reset(){  m_next=0;}  }
class C{  public void lockItemOffer(){  if (tradeState != TradeState.MAKING_OFFERS) {    return;  }  tradeState=TradeState.LOCKED;  Player partner=SingletonRepository.getRuleProcessor().getPlayer(partnerName);  if (partner == null) {    cancelTradeInternally(partnerName);  }  tellClients();}  }
class C{  @Override public void printStackTrace(PrintWriter pw){  super.printStackTrace(pw);  if (nested != null)   nested.printStackTrace(pw);}  }
class C{  protected static String elementToHandle(final String project,final IJavaElement element){  return JavaRefactoringDescriptorUtil.elementToHandle(project,element);}  }
class C{  public static String buildSelectorFromElementDifferentFromAndAttribute(String elementName,String attributeName){  StringBuilder selector=new StringBuilder();  selector.append(NOT_PREFIX);  selector.append(elementName);  selector.append(CLOSE_PARENTHESE);  if (attributeName != null && !attributeName.isEmpty()) {    selector.append(OPEN_BRACKET);    selector.append(attributeName);    selector.append(CLOSE_BRACKET);  }  return selector.toString();}  }
class C{  private HashMap<String,ESMapping> createMapping(DimensionIndex index){  HashMap<String,ESMapping> mapping=new HashMap<>();  IDomain idDomainType=this.getAxisDomain(index);  ESTypeMapping idType=computeIDTypeMapping(index,idDomainType);  this.idName_mapping=idName;  if (idType.equals(ESTypeMapping.STRING)) {    mapping.put(idName_mapping,new ESMapping(idName_mapping,ESIndexMapping.BOTH,idType));  } else {    mapping.put(idName_mapping + ESIndexFacadeUtilities.rawSuffix,new ESMapping(idName_mapping + ESIndexFacadeUtilities.rawSuffix,ESIndexMapping.NOT_ANALYZED,idType));    mapping.put(idName_mapping,new ESMapping(idName_mapping,ESIndexMapping.BOTH,ESTypeMapping.STRING));  }  if (getAttributeCount() > 0) {    for (    Attribute attr : getAttributes()) {      try {        ExpressionAST attribute=index.getAxis().getParent().getUniverse().getParser().parse(index.getAxis().getParent().getDomain(),attr);        ESTypeMapping attrType=computeTypeMapping(getAttributeDomain(attribute));        if (attrType.equals((ESTypeMapping.STRING))) {          mapping.put(attr.getId().getAttributeId(),new ESMapping(attr.getId().getAttributeId(),ESIndexMapping.BOTH,attrType));        } else {          mapping.put(attr.getId().getAttributeId(),new ESMapping(attr.getId().getAttributeId(),ESIndexMapping.NOT_ANALYZED,attrType));        }      } catch (      ScopeException e) {        mapping.put(attr.getId().getAttributeId(),new ESMapping(attr.getId().getAttributeId(),ESIndexMapping.BOTH,ESTypeMapping.STRING));      }    }  }  if (index.getDimension().getType() == Type.CONTINUOUS) {    mapping.put(idName + "_l",new ESMapping(idName + "_l",ESIndexMapping.NO,computeTypeMapping(idDomainType)));    mapping.put(idName + "_u",new ESMapping(idName + "_u",ESIndexMapping.NO,computeTypeMapping(idDomainType)));  }  return mapping;}  }
class C{  public boolean isInterface(){  return false;}  }
class C{  public int compare(Value a,Value b){  return a.compareTo(b,compareMode);}  }
class C{  public void addRow(Expression[] expr){  list.add(expr);}  }
class C{  protected JButton makeCancelButton(){  return makeCancelButton("cancel");}  }
class C{  public static int countLetters(String s){  int numberOfLetters=0;  for (int i=0; i < s.length(); i++) {    if (Character.isLetter(s.charAt(i)))     numberOfLetters++;  }  return numberOfLetters;}  }
class C{  public ParallelTaskBuilder handleInWorker(){  this.config.setHandlerExecutionLocation(HandlerExecutionLocation.OPERATION_WORKER);  return this;}  }
class C{  public List<Position> calculateRoute(List<MapNode> markers,OsmMap map,int waySelection){  List<Position> result=new ArrayList<Position>();  try {    MapWayFilter wayFilter=createMapWayFilter(map,waySelection);    boolean ignoreOneways=(waySelection == 0);    List<MapNode[]> pNodeList=subdivideProblem(markers,map,wayFilter);    for (int i=0; i < pNodeList.size() && !CancelableThread.currIsCanceled(); i++) {      Problem problem=createProblem(pNodeList.get(i),map,wayFilter,ignoreOneways,waySelection);      HeuristicFunction hf=createHeuristicFunction(pNodeList.get(i),waySelection);      Search search=createSearch(hf,waySelection);      List<Action> actions=search.search(problem);      if (actions.isEmpty())       break;      for (      Object action : actions) {        if (action instanceof OsmMoveAction) {          OsmMoveAction a=(OsmMoveAction)action;          for (          MapNode node : a.getNodes())           if (result.isEmpty() || result.get(result.size() - 1) != node)           result.add(new Position(node.getLat(),node.getLon()));        }      }    }  } catch (  Exception e) {    e.printStackTrace();  }  return result;}  }
class C{  public final boolean isNoGrid(){  return noGrid;}  }
class C{  @Nullable public V value(){  return val;}  }
class C{  @Override public StringBuffer format(long number,StringBuffer toAppendTo,FieldPosition pos){  StringBuffer result=new StringBuffer();  if (this.showBase) {    result.append(this.baseLabel);    result.append(this.powerLabel);  }  result.append(this.formatter.format(calculateLog(number)));  return result;}  }
class C{  protected String processPostRequest(HttpServletRequest request){  if (request == null) {    return Helper.ERROR_UNKNOWN_JSON;  }  try {    JsonObject jsonObject=Helper.getJsonObjectFromRequestBody(request);    Integer id=JsonUtils.getIntegerFieldFromJsonObject(jsonObject,"id");    String name=JsonUtils.getStringFieldFromJsonObject(jsonObject,"name");    if (id != null) {      SuspensionsDao suspensionsDao=new SuspensionsDao();      Suspension suspension=suspensionsDao.getSuspension(id);      name=suspension.getName();    }    SuspensionsDao suspensionsDao=new SuspensionsDao();    Suspension suspension=suspensionsDao.getSuspensionByName(name);    if (suspension == null)     return Helper.ERROR_NOTFOUND_JSON;    com.pearson.statsagg.webui.Suspensions suspensions=new com.pearson.statsagg.webui.Suspensions();    String result=suspensions.removeSuspension(name);    return Helper.createSimpleJsonResponse(result);  } catch (  Exception e) {    logger.error(e.toString() + System.lineSeparator() + StackTrace.getStringFromStackTrace(e));    return Helper.ERROR_UNKNOWN_JSON;  }}  }
class C{  public static Frustum fromPerspectiveVecs(Vec4 vTL,Vec4 vTR,Vec4 vBL,Vec4 vBR,double near,double far){  if (vTL == null || vTR == null || vBL == null || vBR == null) {    String message=Logging.getMessage("Geom.ViewFrustum.EdgeVectorIsNull");    Logging.logger().fine(message);    throw new IllegalArgumentException(message);  }  double farMinusNear=far - near;  if (near <= 0 || farMinusNear <= 0) {    String message=Logging.getMessage("Geom.ViewFrustum.ClippingDistanceOutOfRange");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Vec4 lpn=vBL.cross3(vTL).normalize3();  Plane leftPlane=new Plane(lpn.x,lpn.y,lpn.z,0);  Vec4 rpn=vTR.cross3(vBR).normalize3();  Plane rightPlane=new Plane(rpn.x,rpn.y,rpn.z,0);  Vec4 bpn=vBR.cross3(vBL).normalize3();  Plane bottomPlane=new Plane(bpn.x,bpn.y,bpn.z,0);  Vec4 tpn=vTL.cross3(vTR).normalize3();  Plane topPlane=new Plane(tpn.x,tpn.y,tpn.z,0);  Plane nearPlane=new Plane(0d,0d,0d - 1d,0d - near);  Plane farPlane=new Plane(0d,0d,1d,far);  return new Frustum(leftPlane,rightPlane,bottomPlane,topPlane,nearPlane,farPlane);}  }
class C{  public boolean isReadOnly(){  return fileStore == null ? false : fileStore.isReadOnly();}  }
class C{  public GlyphEntry addChar(FontFace face,char c){  GlyphEntry ge=(GlyphEntry)glyphEntryMap.get(c);  if (ge == null) {    ge=face.getGlyphEntry(c);    if (ge != null) {      glyphEntryMap.put(c,ge);    }  }  if (flashType && ge != null && ge.zoneRecord == null && zoneRecordBuilder != null) {    ge.zoneRecord=zoneRecordBuilder.build(c);  }  return ge;}  }
class C{  protected int calcDamagePerHit(){  double toReturn=wtype.getDamage(nRange);  if (game.getOptions().booleanOption("tacops_ba_vs_ba") && (target instanceof BattleArmor)) {    toReturn=Compute.directBlowBADamage(toReturn,wtype.getBADamageClass(),(BattleArmor)target);  }  if ((target instanceof Infantry) && !(target instanceof BattleArmor)) {    toReturn=Compute.directBlowInfantryDamage(toReturn,bDirect ? toHit.getMoS() / 3 : 0,wtype.getInfantryDamageClass(),((Infantry)target).isMechanized(),toHit.getThruBldg() != null,ae.getId(),calcDmgPerHitReport);  } else   if (bDirect) {    toReturn=Math.min(toReturn + (toHit.getMoS() / 3),toReturn * 2);  }  if (bGlancing) {    if ((target instanceof Infantry) && !(target instanceof BattleArmor)) {      toReturn=(int)Math.ceil(toReturn / 2.0);    } else {      toReturn=(int)Math.floor(toReturn / 2.0);    }  }  if (game.getOptions().booleanOption(OptionsConstants.AC_TAC_OPS_RANGE) && (nRange > wtype.getRanges(weapon)[RangeType.RANGE_LONG])) {    toReturn=(int)Math.floor(toReturn * .75);  }  if (game.getOptions().booleanOption(OptionsConstants.AC_TAC_OPS_LOS_RANGE) && (nRange > wtype.getRanges(weapon)[RangeType.RANGE_EXTREME])) {    toReturn=(int)Math.floor(toReturn * .5);  }  return (int)toReturn;}  }
class C{  protected boolean[] multiInstanceHandler(){  boolean[] result=new boolean[2];  print("multi-instance clusterer...");  if (m_Clusterer instanceof MultiInstanceCapabilitiesHandler) {    println("yes");    result[0]=true;  } else {    println("no");    result[0]=false;  }  return result;}  }
class C{  public boolean render(InternalContextAdapter context,Writer writer) throws IOException, MethodInvocationException {  if (referenceType == RUNT) {    writer.write(rootString);    return true;  }  Object value=execute(null,context);  if (escaped) {    if (value == null) {      writer.write(escPrefix);      writer.write("\\");      writer.write(nullString);    } else {      writer.write(escPrefix);      writer.write(nullString);    }    return true;  }  EventCartridge ec=context.getEventCartridge();  if (ec != null) {    value=ec.referenceInsert(literal,value);  }  if (value == null) {    writer.write(escPrefix);    writer.write(escPrefix);    writer.write(morePrefix);    writer.write(nullString);    if (referenceType != QUIET_REFERENCE && rsvc.getBoolean(RuntimeConstants.RUNTIME_LOG_REFERENCE_LOG_INVALID,true)) {      rsvc.warn(new ReferenceException("reference : template = " + context.getCurrentTemplateName(),this));    }    return true;  } else {    writer.write(escPrefix);    writer.write(morePrefix);    writer.write(value.toString());    return true;  }}  }
class C{  final protected BOp[] argsCopy(){  final BOp[] tmp=new BOp[args.length];  for (int i=0; i < args.length; i++) {    tmp[i]=args[i];  }  return tmp;}  }
class C{  public String valueOf(long l){  return Long.toString(l);}  }
class C{  public PublishResponse clone(){  PublishResponse result=new PublishResponse();  result.ResponseHeader=ResponseHeader == null ? null : ResponseHeader.clone();  result.SubscriptionId=SubscriptionId;  result.AvailableSequenceNumbers=AvailableSequenceNumbers == null ? null : AvailableSequenceNumbers.clone();  result.MoreNotifications=MoreNotifications;  result.NotificationMessage=NotificationMessage == null ? null : NotificationMessage.clone();  result.Results=Results == null ? null : Results.clone();  result.DiagnosticInfos=DiagnosticInfos == null ? null : DiagnosticInfos.clone();  return result;}  }
class C{  public SpiderPanel(ExtensionSpider extension,SpiderParam spiderScanParam){  super("spider",new ImageIcon(SpiderPanel.class.getResource("/resource/icon/16/spider.png")),extension);  tabbedPane=new JTabbedPane();  this.extension=extension;  this.setDefaultAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_D,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | Event.SHIFT_MASK,false));  this.setMnemonic(Constant.messages.getChar("spider.panel.mnemonic"));}  }
class C{  public double distanceToLineSegment(LatLong A,LatLong B){  double Ax=(A.lng - lng) * Math.cos(0.5 * radians * (A.lat + lat));  double Ay=(A.lat - lat);  double Bx=(B.lng - lng) * Math.cos(0.5 * radians * (B.lat + lat));  double By=(B.lat - lat);  if (Ay == By) {    if ((Ax < 0 && Bx < 0) || (Ax > 0 && Bx > 0))     return Math.sqrt(Math.min(Ax * Ax + Ay * Ay,Bx * Bx + By * By)) * EarthRadius * radians;    if (Ax == Bx)     return Math.sqrt(Ax * Ax + Ay * Ay) * EarthRadius * radians;  } else {    double Ix=((By - Ay) * (Ax * By - Ay * Bx)) / ((Ax - Bx) * (Ax - Bx) + (Ay - By) * (Ay - By));    if ((Ix < Ax && Ix < Bx) || (Ix > Ax && Ix > Bx)) {      return Math.sqrt(Math.min(Ax * Ax + Ay * Ay,Bx * Bx + By * By)) * EarthRadius * radians;    }  }  return Math.abs((Bx - Ax) * Ay - Ax * (By - Ay)) / Math.sqrt((Bx - Ax) * (Bx - Ax) + (By - Ay) * (By - Ay)) * EarthRadius * radians;}  }
class C{  public void flush() throws IOException {  super.flush();}  }
class C{  protected void fillGap(boolean down){  final int count=getChildCount();  if (down) {    int position=mFirstPosition + count;    final int startOffset=getChildTop(position);    fillDown(position,startOffset);  } else {    int position=mFirstPosition - 1;    final int startOffset=getChildBottom(position);    fillUp(position,startOffset);  }  adjustViewsAfterFillGap(down);}  }
class C{  public boolean isShowLabels(){  return mShowLabels;}  }
class C{  private String locateGroupbyField(String groupby,TaggedLogAPIEntity obj){  if (groupby.equals(GROUPBY_ROOT_FIELD_NAME)) {    return GROUPBY_ROOT_FIELD_VALUE;  }  String tagv=obj.getTags().get(groupby);  if (tagv != null)   return tagv;  String fn=groupby.substring(0,1).toUpperCase() + groupby.substring(1,groupby.length());  try {    Method getM=obj.getClass().getMethod("get" + fn);    Object value=getM.invoke(obj);    return (String)value;  } catch (  Exception ex) {    LOG.warn(groupby + " field is in neither tags nor fields, " + ex.getMessage());    return null;  }}  }
class C{  public DiscoveryNodes nodes(){  return nodes;}  }
class C{  public void doScrollStateChange(AbsListView view,int scrollState){  mHandler.removeCallbacks(this);  mNewState=scrollState;  mHandler.postDelayed(this,SCROLL_CHANGE_DELAY);}  }
class C{  @SuppressWarnings("unchecked") protected static <T>T enumProperty(String name,Class cls,T dflt){  String val=property(name);  return val != null ? (T)Enum.valueOf(cls,val) : dflt;}  }
class C{  public <V>V ensureTransaction(Callable<V> transaction,HGTransactionConfig config){  if (getContext().getCurrent() != null)   try {    return transaction.call();  } catch (  Exception ex) {    throw new RuntimeException(ex);  } else   return transact(transaction,config);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public QuotaOfCinder createVpoolDefaultQuota(Project project,VirtualPool vpool,HashMap<String,String> defaultQuotaMap){  QuotaOfCinder objQuotaOfCinder=new QuotaOfCinder();  objQuotaOfCinder.setProject(project.getId());  objQuotaOfCinder.setVolumesLimit(Long.valueOf(defaultQuotaMap.get(CinderConstants.ResourceQuotaDefaults.VOLUMES.getResource() + "_" + vpool.getLabel())));  objQuotaOfCinder.setSnapshotsLimit(Long.valueOf(defaultQuotaMap.get(CinderConstants.ResourceQuotaDefaults.SNAPSHOTS.getResource() + "_" + vpool.getLabel())));  objQuotaOfCinder.setTotalQuota(Long.valueOf(defaultQuotaMap.get(CinderConstants.ResourceQuotaDefaults.GIGABYTES.getResource() + "_" + vpool.getLabel())));  objQuotaOfCinder.setId(URI.create(UUID.randomUUID().toString()));  objQuotaOfCinder.setVpool(vpool.getId());  _log.info("Create vpool default quota");  _dbClient.createObject(objQuotaOfCinder);  return objQuotaOfCinder;}  }
class C{  public BeanMap(){}  }
class C{  protected CCMenuItemAtlasFont(CCLabelAtlas label,CCNode rec,String cb){  super(label,rec,cb);}  }
class C{  public static String normalizeUnsignedInt(String value){  return normalizeIntegerValue(value,"0","4294967295");}  }
class C{  public static String center(String str,int size){  return center(str,size," ");}  }
class C{  @Override public int hashCode(){  return this.imageSource != null ? this.imageSource.hashCode() : 0;}  }
class C{  private static String samplesToString(String[] sampleArray){  String result=null;  if (sampleArray.length > 0) {    result=sampleArray[0];    for (int i=1; i < sampleArray.length; i++) {      result+="; ";      result+=sampleArray[i];    }  }  return result;}  }
class C{  public NotificationChain basicSetValue(Expression newValue,NotificationChain msgs){  Expression oldValue=value;  value=newValue;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,StextPackage.TIME_EVENT_SPEC__VALUE,oldValue,newValue);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private void handleSingleWorkingFolder(final String localPath,final VersionControlClient client) throws CLCException, CannotFindWorkspaceException {  Check.notNull(localPath,"localPath");  final WorkspaceInfo w=findCachedWorkspaceForPath(localPath);  if (w == null) {    final String messageFormat=Messages.getString("CommandWorkFold.NoWorkspaceFoundContainingMappingFormat");    final String message=MessageFormat.format(messageFormat,localPath);    throw new CLCException(message);  }  Workspace[] ret=null;  try {    ret=client.queryWorkspaces(w.getName(),w.getOwnerName(),w.getComputer());  } catch (  final Exception e) {    final String messageFormat=Messages.getString("CommandWorkFold.ErrorRefreshingCachedWorkspaceFormat");    final String message=MessageFormat.format(messageFormat,w.toString(),e.getLocalizedMessage());    throw new CLCException(message);  }  Check.isTrue(ret != null && ret.length == 1 && ret[0] != null,"ret != null && ret.length == 1 && ret[0] != null");  printWorkspace(ret[0]);}  }
class C{  public StartupException(String msg){  super(msg);}  }
class C{  private String processTable(final String line){  final StringBuilder out=new StringBuilder();  if (line.startsWith(this.tableStart) && !this.processingTable) {    this.processingTable=true;    this.newRowStart=true;    out.append("<table");    if (line.trim().length() > this.lenTableStart) {      out.append(filterTableProperties(line.substring(this.lenTableStart).trim()));    }    out.append(">");  } else   if (line.startsWith(this.newLine) && this.processingTable) {    if (!this.newRowStart) {      out.append("\t</tr>\n");    } else {      this.newRowStart=false;    }    out.append("\t<tr>");  } else   if (line.startsWith(this.cellDivider) && this.processingTable) {    out.append("\t\t<td");    final int cellEnd=(line.indexOf(this.cellDivider,this.lenCellDivider) > 0) ? (line.indexOf(this.cellDivider,this.lenCellDivider)) : (line.length());    int propEnd=line.indexOf(this.attribDivider,this.lenCellDivider);    final int occImage=line.indexOf("[[Image:",this.lenCellDivider);    final int occEscape=line.indexOf("[=",this.lenCellDivider);    if ((propEnd > this.lenCellDivider) && ((occImage > propEnd) || (occImage < 0)) && ((occEscape > propEnd) || (occEscape < 0))) {      propEnd=line.indexOf(this.attribDivider,this.lenCellDivider) + this.lenAttribDivider;    } else {      propEnd=cellEnd;    }    if (propEnd == cellEnd) {      propEnd=this.lenCellDivider;    } else {      out.append(filterTableProperties(line.substring(this.lenCellDivider,propEnd - this.lenAttribDivider).trim()));    }    if (propEnd > cellEnd) {      propEnd=this.lenCellDivider;    }    this.processingTable=false;    this.processingCell=true;    out.append(">");    out.append(processTable(line.substring(propEnd,cellEnd).trim()));    out.append("</td>");    this.processingTable=true;    this.processingCell=false;    if (cellEnd < line.length()) {      out.append("\n");      out.append(processTable(line.substring(cellEnd)));    }  } else   if (line.startsWith(this.tableEnd) && (this.processingTable)) {    this.processingTable=false;    out.append("\t</tr>\n</table>");    out.append(line.substring(this.lenTableEnd));  } else {    out.append(line);  }  return out.toString();}  }
class C{  public Object remove(Object key){  processQueue();  return hash.remove(key);}  }
class C{  public Builder contentType(String contentType){  Validator.isTrue((MediaType.parse(contentType) != null) && contentType.startsWith("audio/"),"contentType is not a valid mime audio format. Valid formats start with 'audio/'");  Validator.isTrue(!contentType.contains(HttpMediaType.AUDIO_RAW) || contentType.contains("rate"),"When using PCM the audio rate should be specified.");  this.contentType=contentType;  return this;}  }
class C{  @Override public Map<String,Object> nextRow(){  return null;}  }
class C{  public String classIndexTipText(){  return "Sets the class index (\"first\" and \"last\" are valid values)";}  }
class C{  public ScriptEditor(String initialText){  textArea=new RSyntaxTextArea(DEFAULT_HEIGHT,DEFAULT_WIDTH);  initPanel();  setText(initialText);  textArea.setCaretPosition(0);}  }
class C{  public int processBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  return (forEncryption) ? encryptBlock(in,inOff,out,outOff) : decryptBlock(in,inOff,out,outOff);}  }
class C{  public Builder heartbeatTimeout(Duration heartbeatTimeout){  this.heartbeatTimeout=heartbeatTimeout;  return this;}  }
class C{  public ServiceHost toggleDebuggingMode(boolean enable){  Level newLevel=enable ? Level.FINE : Level.INFO;  setLoggingLevel(newLevel);  this.setOperationTimeOutMicros(enable ? TimeUnit.MINUTES.toMicros(10) : ServiceHostState.DEFAULT_OPERATION_TIMEOUT_MICROS);  return this;}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.210 -0400",hash_original_method="DDF70BA66008B66322E842B36D738270",hash_generated_method="F390DFE8187C6D74B2BDC1F6273E2B10") public static void writeLines(Collection<?> lines,String lineEnding,Writer writer) throws IOException {  if (lines == null) {    return;  }  if (lineEnding == null) {    lineEnding=LINE_SEPARATOR;  }  for (  Object line : lines) {    if (line != null) {      writer.write(line.toString());    }    writer.write(lineEnding);  }}  }
class C{  public boolean isBlocked(){  return mBlocked;}  }
class C{  public void addDigest(X509Certificate x509certificate,String algorithmURI) throws XMLSecurityException {  this.add(new XMLX509Digest(this.doc,x509certificate,algorithmURI));}  }
class C{  public boolean isTooltipRequired(int col){  return false;}  }
class C{  private Object coerce(Object value,String fieldName,Class<?> fieldClass){  if (fieldClass != null && Collection.class.isAssignableFrom(fieldClass) && value instanceof Collection) {    return coerceCollection((Collection)value,fieldName,fieldClass);  }  if (fieldClass != null && Map.class.isAssignableFrom(fieldClass) && value instanceof Map) {    return coerceMap((Map<?,?>)value,fieldName,fieldClass);  }  return CoerceUtil.coerce(value,fieldClass);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.PACKAGE_MEMBER__ANNOTATIONS:    return getAnnotations();case TypesPackage.PACKAGE_MEMBER__ID:  return getId();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public synchronized void onDestroy(){  cleanupService();  mHandler.getLooper().quit();}  }
class C{  public void elementDecl(String name,String model) throws SAXException {  if (null != m_resultDeclHandler)   m_resultDeclHandler.elementDecl(name,model);}  }
class C{  private String removeEnclosedArray(final String resultAsString){  return resultAsString.replaceFirst("(?ims)\\[","").replaceFirst("(?ims)\\](?!.*\\])","");}  }
class C{  void internalSetReturnType(Type type){  supportedOnlyIn2();  if (type == null) {    throw new IllegalArgumentException();  }  ASTNode oldChild=this.returnType;  preReplaceChild(oldChild,type,RETURN_TYPE_PROPERTY);  this.returnType=type;  postReplaceChild(oldChild,type,RETURN_TYPE_PROPERTY);}  }
class C{  @Override @Deprecated public boolean completeExceptionally(Throwable ex){  return super.completeExceptionally(ex);}  }
class C{  private void loadChat(String userId,String wallId,String chatName,String tags,String image,String tagName){  final String chatId=Utils.generateChatId(userId,AppConstants.UserInfo.INSTANCE.getId());  final Intent chatScreenActivity=new Intent(getActivity(),ChatScreenActivity.class);  chatScreenActivity.putExtra(AppConstants.Keys.USER_ID,userId);  chatScreenActivity.putExtra(AppConstants.Keys.CHAT_ID,chatId);  chatScreenActivity.putExtra(AppConstants.Keys.WALL_ID,wallId);  chatScreenActivity.putExtra(AppConstants.Keys.CHAT_TITLE,chatName);  chatScreenActivity.putExtra(AppConstants.Keys.PROFILE_IMAGE,image);  chatScreenActivity.putExtra(AppConstants.Keys.FROM_WALL,true);  chatScreenActivity.putExtra(AppConstants.Keys.TAG_NAME,tagName);  chatScreenActivity.putExtra(AppConstants.Keys.MY_ID,AppConstants.UserInfo.INSTANCE.getId());  startActivity(chatScreenActivity);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:02.050 -0500",hash_original_method="9EDFB4E9C7052BBC86DC69FD90E3B91B",hash_generated_method="9EDFB4E9C7052BBC86DC69FD90E3B91B") DrmConstraintInfo(){  count=-1;  startDate=-1;  endDate=-1;  interval=-1;}  }
class C{  public void start(){  if (mTimeout == 0) {    if (sLogger.isActivated()) {      sLogger.info("Activity manager is disabled (no idle timeout)");    }    return;  }  if (sLogger.isActivated()) {    sLogger.info("Start the activity manager for " + mTimeout + "ms");  }  updateActivity();  startTimer(System.currentTimeMillis(),mTimeout);}  }
class C{  public FilteredQueryBuilder queryName(String queryName){  this.queryName=queryName;  return this;}  }
class C{  public void emitAdditionalJava(JavaFileWriter writer) throws IOException {}  }
class C{  public Connection buildConnectionTo(ConnectionAnchor target){  InputAnchor sink;  OutputAnchor source;  if (this.anchor instanceof InputAnchor) {    if (target instanceof InputAnchor) {      return null;    }    sink=(InputAnchor)this.anchor;    source=(OutputAnchor)target;  } else {    if (target instanceof OutputAnchor) {      return null;    }    sink=(InputAnchor)target;    source=(OutputAnchor)this.anchor;    if (sink.hasConnection()) {      sink.removeConnections();    }  }  if (sink.block == source.block && !(sink instanceof ResultAnchor && source instanceof BinderAnchor)) {    return null;  }  return new Connection(source,sink);}  }
class C{  private void startHelperServices(Operation startPost){  Operation postAWScomputeDescriptionService=Operation.createPost(this.getHost(),AWSComputeDescriptionCreationAdapterService.SELF_LINK).setReferer(this.getUri());  Operation postAWscomputeStateService=Operation.createPost(this.getHost(),AWSComputeStateCreationAdapterService.SELF_LINK).setReferer(this.getUri());  Operation postAWsNetworkStateService=Operation.createPost(this.getHost(),AWSNetworkStateCreationAdapterService.SELF_LINK).setReferer(this.getUri());  this.getHost().startService(postAWScomputeDescriptionService,new AWSComputeDescriptionCreationAdapterService());  this.getHost().startService(postAWscomputeStateService,new AWSComputeStateCreationAdapterService());  this.getHost().startService(postAWsNetworkStateService,new AWSNetworkStateCreationAdapterService());  getHost().registerForServiceAvailability(null,AWSComputeDescriptionCreationAdapterService.SELF_LINK,AWSComputeStateCreationAdapterService.SELF_LINK,AWSNetworkStateCreationAdapterService.SELF_LINK);}  }
class C{  public void reduce(Text key,Iterator<LinkDatum> values,OutputCollector<Text,Node> output,Reporter reporter) throws IOException {  Node node=new Node();  int numInlinks=0;  int numOutlinks=0;  while (values.hasNext()) {    LinkDatum next=values.next();    if (next.getLinkType() == LinkDatum.INLINK) {      numInlinks++;    } else     if (next.getLinkType() == LinkDatum.OUTLINK) {      numOutlinks++;    }  }  node.setNumInlinks(numInlinks);  node.setNumOutlinks(numOutlinks);  node.setInlinkScore(0.0f);  output.collect(key,node);}  }
class C{  public LoginDialog(java.awt.Component parent){  super((java.awt.Frame)SwingUtilities.getWindowAncestor(parent),true);  initComponents();  ModifiableJOptionPane.reverseOKCancel(loginButton,cancelButton);  Preferences p=Preferences.userNodeForPackage(getClass());  remember.setSelected(p.getBoolean("remeber",false));  if (remember.isSelected()) {    user.setText(p.get("user",""));    password.setText(p.get("pass",""));    globalUser=user.getText();    globalPassword=user.getText();  }  initialized=true;  setLocationByPlatform(true);  pack();  setVisible(true);}  }
class C{  public DeleteMessageBatchResult deleteMessageBatch(String queueUrl,List<DeleteMessageBatchRequestEntry> entries) throws AmazonServiceException, AmazonClientException {  return amazonSqsToBeExtended.deleteMessageBatch(queueUrl,entries);}  }
class C{  public AsyncResult CallAsync(RequestHeader RequestHeader,CallMethodRequest... MethodsToCall){  CallRequest req=new CallRequest(RequestHeader,MethodsToCall);  return channel.serviceRequestAsync(req);}  }
class C{  ComputingConcurrentHashMap(MapMaker builder,Function<? super K,? extends V> computingFunction){  super(builder);  this.computingFunction=checkNotNull(computingFunction);}  }
class C{  void waitForClose(boolean rethrow) throws IOException {  if (debug != null && Debug.isOn("ssl")) {    System.out.println(Thread.currentThread().getName() + ", waiting for close_notify or alert: state " + getConnectionState());  }  try {    int state;    while (((state=getConnectionState()) != cs_CLOSED) && (state != cs_ERROR) && (state != cs_APP_CLOSED)) {      if (inrec == null) {        inrec=new InputRecord();      }      try {        readRecord(inrec,true);      } catch (      SocketTimeoutException e) {      }    }    inrec=null;  } catch (  IOException e) {    if (debug != null && Debug.isOn("ssl")) {      System.out.println(Thread.currentThread().getName() + ", Exception while waiting for close " + e);    }    if (rethrow) {      throw e;    }  }}  }
class C{  @Override public void highlight(URI property){  String field=(property != null) ? SearchFields.getPropertyField(property) : "*";  request.addHighlightedField(field);  request.setHighlighterPreTags(SearchFields.HIGHLIGHTER_PRE_TAG);  request.setHighlighterPostTags(SearchFields.HIGHLIGHTER_POST_TAG);  request.setHighlighterNumOfFragments(0);}  }
class C{  public void evaluate(double[] x,double[] X){  for (int i=0; i < N2; i++) {    int j=i << 1;    xr[i]=x[j++];    xi[i]=x[j];  }  dft.evaluate(xr,xi,Xr,Xi);  X[0]=Xr[0] + Xi[0];  X[N2]=Xr[0] - Xi[0];  int N2pk=N2 + 1;  int N2mk=N2 - 1;  int Nmk=N - 1;  for (int k=1; k < N4; k++) {    double Xrk=Xr[k];    double Xik=Xi[k];    double XrN2mk=Xr[N2mk];    double XiN2mk=Xi[N2mk];    double Sr=(Xrk + XrN2mk) / 2;    double Si=(Xik - XiN2mk) / 2;    double Dr=(Xik + XiN2mk) / 2;    double Di=(XrN2mk - Xrk) / 2;    double tmp=c[k] * Dr + s[k] * Di;    Di=c[k] * Di - s[k] * Dr;    Dr=tmp;    X[k]=Sr + Dr;    X[Nmk]=Si + Di;    X[N2mk]=Sr - Dr;    X[N2pk]=Di - Si;    N2pk++;    N2mk--;    Nmk--;  }  X[N4]=Xr[N4];  X[N2 + N4]=-Xi[N4];}  }
class C{  public Term2IdTupleSerializer(){  super();}  }
class C{  public void keyReleased(GraphicsNodeKeyEvent evt){  dispatchKeyEvent("keyup",evt);  isDown=false;}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  protected FBParameterMetaData(RowDescriptor rowDescriptor,GDSHelper connection) throws SQLException {  super(rowDescriptor,connection);}  }
class C{  private static long nanosFromCalendar(Calendar cal){  int h=cal.get(Calendar.HOUR_OF_DAY);  int m=cal.get(Calendar.MINUTE);  int s=cal.get(Calendar.SECOND);  int millis=cal.get(Calendar.MILLISECOND);  return ((((((h * 60L) + m) * 60) + s) * 1000) + millis) * 1000000;}  }
class C{  private static String replaceMap(String input,Map map,boolean ignoreCase,boolean doResolveInternals) throws PageException {  if (doResolveInternals)   map=resolveInternals(map,ignoreCase,0);  String result=input;  Iterator<Map.Entry> it=map.entrySet().iterator();  Map.Entry e;  while (it.hasNext()) {    e=it.next();    result=replace(result,Caster.toString(e.getKey()),Caster.toString(e.getValue()),false,ignoreCase);  }  return result;}  }
class C{  public Creature(final RPObject object){  super(object);  setRPClass("creature");  put("type","creature");  put("title_type","enemy");  if (object.has("title_type")) {    put("title_type",object.get("title_type"));  }  dropsItems=new ArrayList<DropItem>();  dropItemInstances=new ArrayList<Item>();  setAIProfiles(new HashMap<String,String>());  susceptibilities=new EnumMap<Nature,Double>(Nature.class);  setMovementRange(20);  updateModifiedAttributes();}  }
class C{  public LineNumberReader(Reader in){  super(in);}  }
class C{  public static ChainingXmlWriter writeXml(Collection<ICalendar> icals){  return new ChainingXmlWriter(icals);}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="EI_EXPOSE_REP") public String[] validBaudRates(){  return validSpeeds;}  }
class C{  private String createWorkflowStepForResyncNativeFullCopy(Workflow workflow,StorageSystem nativeSystem,List<URI> nativeFullCopyURIs,String waitFor,Workflow.Method rollbackMethod){  URI nativeSystemURI=nativeSystem.getId();  Workflow.Method resyncFullCopyMethod=new Workflow.Method(RESYNC_FC_METHOD_NAME,nativeSystemURI,nativeFullCopyURIs,Boolean.FALSE);  workflow.createStep(RESYNC_FULL_COPY_STEP,String.format("Resynchronize native full copies: %s",nativeFullCopyURIs),waitFor,nativeSystemURI,nativeSystem.getSystemType(),BlockDeviceController.class,resyncFullCopyMethod,rollbackMethod,null);  _log.info("Created workflow step to resynchronize native full copies {}",nativeFullCopyURIs);  return RESYNC_FULL_COPY_STEP;}  }
class C{  public int count(final int[] query,boolean isSource){  if (query.length == 0)   return 0;  if (!isSource && this.tgtCountLBCache != null && this.tgtCountUBCache != null) {    final int tgtId=query[0];    final int lo=tgtCountLBCache[tgtId];    final int hi=tgtCountUBCache[tgtId];    if (query.length == 1) {      int count=hi - lo + 1;      assert count > 0 : String.format("%d %d %d %d",tgtId,count,lo,hi);      return count;    } else {      int lb=findBound(query,isSource,true,lo);      if (lb >= 0) {        int ub=findBound(query,isSource,false,lb,hi);        assert ub >= 0 : String.format("%d %d %d %d %d",tgtId,lo,hi,lb,ub);        return ub - lb + 1;      }    }  } else {    int lb=findBound(query,isSource,true,0);    if (lb >= 0) {      int ub=findBound(query,isSource,false,lb);      assert ub >= 0;      return ub - lb + 1;    }  }  return 0;}  }
class C{  public RegisterOperand makeTempInt(){  return new RegisterOperand(getInteger(),TypeReference.Int);}  }
class C{  private static float CallStaticFloatMethod(JNIEnvironment env,int classJREF,int methodID) throws Exception {  if (VM.VerifyAssertions) {    VM._assert(VM.BuildForPowerPC,ERROR_MSG_WRONG_IMPLEMENTATION);  }  if (traceJNI)   VM.sysWrite("JNI called: CallStaticFloatMethod  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object returnObj=JNIHelpers.invokeWithDotDotVarArg(methodID,TypeReference.Float);    return Reflection.unwrapFloat(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0f;  }}  }
class C{  public DeleteResourcesProcessor(IResource[] resources){  this(resources,false);}  }
class C{  protected String handleObject(Object obj){  return obj == null ? "" : String.valueOf(obj);}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  private void writeByte(int value) throws IOException {  if (this.msb0) {    value=JBBPUtils.reverseBitsInByte((byte)value) & 0xFF;  }  this.out.write(value);  this.byteCounter++;}  }
class C{  public static int nextChineseMonth(int y,int m){  int n=Math.abs(m) + 1;  if (m > 0) {    int index=y - baseChineseYear + baseIndex;    int v=chineseMonths[2 * index + 1];    v=(v >> 4) & 0x0F;    if (v == m) {      n=-m;    }  }  if (n == 13) {    n=1;  }  return n;}  }
class C{  public void acceptReInvite(){  if (sLogger.isActivated()) {    sLogger.debug("ReInvite has been accepted");  }synchronized (mWaitUserAnswer) {    mReInviteStatus=InvitationStatus.INVITATION_ACCEPTED;    mWaitUserAnswer.notifyAll();  }}  }
class C{  public static String stringFor(int f){switch (f) {case cudaChannelFormatKindSigned:    return "cudaChannelFormatKindSigned";case cudaChannelFormatKindUnsigned:  return "cudaChannelFormatKindUnsigned";case cudaChannelFormatKindFloat:return "cudaChannelFormatKindFloat";case cudaChannelFormatKindNone:return "cudaChannelFormatKindNone";}return "INVALID cudaChannelFormatKind: " + f;}  }
class C{  public boolean contains(Object node){  return (indexOf(node) >= 0);}  }
class C{  @Override public void advanceCounters(){}  }
class C{  public String downloadFile(String fileName,String destination) throws ManagerResponseException {  checkConnectedAndInFileExplorer();  String json=restUtils.sendGetCommand(authentificationUtils.finalHost + "/file/container/" + currentContainerId+ "?path="+ currentPath,authentificationUtils.getMap()).get("body");  List<FileUnit> fileUnits=JsonConverter.getFileUnits(json);  FileUnit fileUnit=fileUnits.stream().filter(null).findAny().orElseThrow(null);  if (fileUnit.isDir()) {    throw new CloudUnitCliException("Cannot download a directory");  }  String destFileName=System.getProperty("user.home") + "/" + fileName;  if (destination != null) {    destFileName=destination + "/" + fileName;  }  Map<String,Object> params=new HashMap<>();  params.putAll(authentificationUtils.getMap());  restUtils.sendGetFileCommand(authentificationUtils.finalHost + "/file/container/" + currentContainerId+ "/application/"+ applicationUtils.getCurrentApplication().getName()+ "?path="+ currentPath+ "/fileName/"+ fileName,destFileName,params);  return MessageFormat.format("File downloaded to {0}",destFileName);}  }
class C{  @RequestMapping(value="/authenticate",method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public String isAuthenticated(HttpServletRequest request){  log.debug("REST request to check if the current user is authenticated");  return request.getRemoteUser();}  }
class C{  public void ensureNotShared(){  if (_inputStart >= 0) {    unshare(16);  }}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public OutputStream(Channel video,Channel audio,Channel data){  this.video=video;  this.audio=audio;  this.data=data;}  }
class C{  public boolean isFresh(){  return (m_next == 0);}  }
class C{  KeyStore loadSourceKeyStore() throws Exception {  boolean isPkcs11=false;  InputStream is=null;  if (P11KEYSTORE.equalsIgnoreCase(srcstoretype) || KeyStoreUtil.isWindowsKeyStore(srcstoretype)) {    if (!NONE.equals(srcksfname)) {      System.err.println(MessageFormat.format(rb.getString(".keystore.must.be.NONE.if.storetype.is.{0}"),srcstoretype));      System.err.println();      tinyHelp();    }    isPkcs11=true;  } else {    if (srcksfname != null) {      File srcksfile=new File(srcksfname);      if (srcksfile.exists() && srcksfile.length() == 0) {        throw new Exception(rb.getString("Source.keystore.file.exists.but.is.empty.") + srcksfname);      }      is=new FileInputStream(srcksfile);    } else {      throw new Exception(rb.getString("Please.specify.srckeystore"));    }  }  KeyStore store;  try {    if (srcProviderName == null) {      store=KeyStore.getInstance(srcstoretype);    } else {      store=KeyStore.getInstance(srcstoretype,srcProviderName);    }    if (srcstorePass == null && !srcprotectedPath && !KeyStoreUtil.isWindowsKeyStore(srcstoretype)) {      System.err.print(rb.getString("Enter.source.keystore.password."));      System.err.flush();      srcstorePass=Password.readPassword(System.in);      passwords.add(srcstorePass);    }    if (P12KEYSTORE.equalsIgnoreCase(srcstoretype)) {      if (srckeyPass != null && srcstorePass != null && !Arrays.equals(srcstorePass,srckeyPass)) {        MessageFormat form=new MessageFormat(rb.getString("Warning.Different.store.and.key.passwords.not.supported.for.PKCS12.KeyStores.Ignoring.user.specified.command.value."));        Object[] source={"-srckeypass"};        System.err.println(form.format(source));        srckeyPass=srcstorePass;      }    }    store.load(is,srcstorePass);  }  finally {    if (is != null) {      is.close();    }  }  if (srcstorePass == null && !KeyStoreUtil.isWindowsKeyStore(srcstoretype)) {    System.err.println();    System.err.println(rb.getString(".WARNING.WARNING.WARNING."));    System.err.println(rb.getString(".The.integrity.of.the.information.stored.in.the.srckeystore."));    System.err.println(rb.getString(".WARNING.WARNING.WARNING."));    System.err.println();  }  return store;}  }
class C{  public static void saveThreadState(AbstractRegisters registers){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  public void createExpectedPartitionValueEntities(PartitionKeyGroupEntity partitionKeyGroupEntity,List<String> expectedPartitionValues){  for (  String expectedPartitionValue : expectedPartitionValues) {    ExpectedPartitionValueEntity expectedPartitionValueEntity=new ExpectedPartitionValueEntity();    expectedPartitionValueEntity.setPartitionKeyGroup(partitionKeyGroupEntity);    expectedPartitionValueEntity.setPartitionValue(expectedPartitionValue);    expectedPartitionValueDao.saveAndRefresh(expectedPartitionValueEntity);  }  partitionKeyGroupDao.saveAndRefresh(partitionKeyGroupEntity);  assertEquals(expectedPartitionValues.size(),partitionKeyGroupEntity.getExpectedPartitionValues().size());}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    float progress=0;    int numCells=0;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    int numBins=50000;    double minValue=inputFile.getMinimumValue();    double maxValue=inputFile.getMaximumValue();    double binSize=(maxValue - minValue) / numBins;    long[] histogram=new long[numBins];    int binNum;    int numBinsLessOne=numBins - 1;    double[] data;    updateProgress("Loop 1 of 2: ",0);    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          numCells++;          binNum=(int)((z - minValue) / binSize);          if (binNum > numBinsLessOne) {            binNum=numBinsLessOne;          }          histogram[binNum]++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2: ",(int)progress);    }    double[] cdf=new double[numBins];    cdf[0]=histogram[0];    for (int i=1; i < numBins; i++) {      cdf[i]=cdf[i - 1] + histogram[i];    }    histogram=null;    for (int i=0; i < numBins; i++) {      cdf[i]=cdf[i] / numCells;    }    updateProgress("Loop 2 of 2: ",0);    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          binNum=(int)((z - minValue) / binSize);          if (binNum > numBinsLessOne) {            binNum=numBinsLessOne;          }          outputFile.setValue(row,col,cdf[binNum]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2: ",(int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private synchronized void init(String channel,int mask){  int sep=channel.indexOf(':');  if (sep != -1) {    String num=channel.substring(sep + 1);    cname=channel.substring(0,sep);    try {      numrange=parseNum(num);    } catch (    Exception e) {      throw new IllegalArgumentException("invalid num range: " + num);    }  } else {    numrange=new int[]{NUM_MIN,NUM_MAX};  }}  }
class C{  @Bean public PasswordEncoder passwordEncoder(){  return new BCryptPasswordEncoder();}  }
class C{  private void removeElementWithParentWithLangAttr(){  if (elementWithLang.isEmpty()) {    return;  }  ElementHandler<Element> elementWithParentWithLang=new ElementHandlerImpl();  for (  Element el : elementWithoutLang.get()) {    if (isElementHasParentWithLang(el)) {      elementWithParentWithLang.add(el);    }  }  elementWithoutLang.removeAll(elementWithParentWithLang);  elementWithLang.addAll(elementWithParentWithLang.get());}  }
class C{  public ArrayDeque(Collection<? extends E> c){  allocateElements(c.size());  addAll(c);}  }
class C{  private void append(JCExpression expr){  if (arrayExprs != null) {    arrayExprs.append(expr);  } else {    if (this.argumentExpr != null) {      throw new BugException(errorNode,"assertion failed");    }    this.argumentExpr=expr;  }}  }
class C{  private DoubleFactor addEvidencePairs(DoubleFactor factor,Query query){  Set<String> inter=new HashSet<String>(query.getQueryVars());  inter.retainAll(query.getEvidence().getVariables());  Assignment evidence=query.getEvidence().getTrimmed(inter);  if (!inter.isEmpty()) {    DoubleFactor newFactor=new DoubleFactor();    for (    Assignment a : factor.getAssignments()) {      Assignment assign=new Assignment(a,evidence);      double[] entry=factor.getEntry(a);      newFactor.addEntry(assign,entry[0],entry[1]);    }    return newFactor;  } else {    return factor;  }}  }
class C{  public static <V,T>MutableMap<V,BigDecimal> sumByBigDecimal(Iterable<T> iterable,Function<T,V> groupBy,Function<? super T,BigDecimal> function){  if (iterable instanceof List) {    return ListIterate.sumByBigDecimal((List<T>)iterable,groupBy,function);  }  if (iterable != null) {    return IterableIterate.sumByBigDecimal(iterable,groupBy,function);  }  throw new IllegalArgumentException("Cannot perform an sumByBigDecimal on null");}  }
class C{  public void dropTables(DatabaseSession session){  dropTables(session,new JPAMSchemaManager(session));}  }
class C{  public static void loop(String filename){  URL url=null;  try {    File file=new File(filename);    if (file.canRead())     url=file.toURI().toURL();  } catch (  MalformedURLException e) {    e.printStackTrace();  }  if (url == null)   throw new RuntimeException("audio " + filename + " not found");  AudioClip clip=Applet.newAudioClip(url);  clip.loop();}  }
class C{  public boolean isClosePath(){  return m_closed;}  }
class C{  public static final int floorDivide(int n,int d,int[] r){  if (n >= 0) {    r[0]=n % d;    return n / d;  }  int q=((n + 1) / d) - 1;  r[0]=n - (q * d);  return q;}  }
class C{  public void deleteTableFiles(){  new File(filename).delete();  getRollForwardFile(filename,true).delete();  getRollForwardFile(filename,false).delete();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:48.379 -0500",hash_original_method="982D878B5D9789546161AA6A5787B81A",hash_generated_method="FA778DEB818C9C440A8ED2F5F9D4FBB2") public static ObjectStreamClass lookupAny(Class<?> cl){  return lookupStreamClass(cl);}  }
class C{  private double semiMajorAxis(){  return majorAxis() / 2;}  }
class C{  public boolean configure(final Object nd,final JScrollPane tv,final JList list,final int row){  bg=list.getBackground();  final boolean sel=list.isSelectionEmpty() ? false : list.getSelectionModel().isSelectedIndex(row);  final Component renderer=list.getCellRenderer().getListCellRendererComponent(list,nd,row,sel,false);  if (renderer != null) {    setComponent(renderer);  }  return true;}  }
class C{  protected ObjectMatrix2D like2D(int rows,int columns,int rowZero,int columnZero,int rowStride,int columnStride){  return new SparseObjectMatrix2D(rows,columns,this.elements,rowZero,columnZero,rowStride,columnStride);}  }
class C{  private void aliasUpdated(){  if (standardLocation.isSelected()) {    fileField.setText(LocalRepository.getDefaultRepositoryFolder(aliasField.getText()).toString());  }  dumpSettingsCheck();}  }
class C{  public Code39Reader(boolean usingCheckDigit){  this(usingCheckDigit,false);}  }
class C{  public G load(Reader reader,Supplier<? extends G> graph_factory) throws IOException {  return load(reader,graph_factory.get());}  }
class C{  private void waitForGC(boolean last,boolean blockAnyway){  Trace.trace(Item.SCHEDULER,"%d waitForGC in, state=%s, mutatorsBlocked=%d",Thread.currentThread().getId(),getState(),mutatorsBlocked);synchronized (trigger) {    while (blockAnyway && isState(MUTATOR)) {      Trace.trace(Item.SCHEDULER,"%d current state is MUTATOR",Thread.currentThread().getId());      try {        trigger.wait();      } catch (      InterruptedException ie) {      }    }    if (last && isState(BLOCKING)) {      setState(BLOCKED);      trigger.notifyAll();    }    while (isState(BLOCKED) || isState(BLOCKING)) {      try {        trigger.wait();      } catch (      InterruptedException ie) {      }    }  }  Trace.trace(Item.SCHEDULER,"%d waitForGC out",Thread.currentThread().getId());}  }
class C{  public static void checkEquals(double expected,BigDecimal actual){  checkEqualsWithScaleOfTen("",new BigDecimal(expected),actual);}  }
class C{  public void invite(@NonNull UserHostmask user){  bot.sendIRC().invite(user.getNick(),channel.getName());}  }
class C{  public final void testWriteReplace2(){  MyCertificate c1=new MyFailingCertificate("TEST_TYPE",testEncoding);  try {    c1.writeReplace();    fail();  } catch (  ObjectStreamException expected) {  }}  }
class C{  private void lockTurnouts(boolean lock){  for (int i=0; i < _outputTurnoutList.size(); i++) {    _outputTurnoutList.get(i).getTurnout().setLocked(Turnout.CABLOCKOUT + Turnout.PUSHBUTTONLOCKOUT,lock);  }}  }
class C{  public String toBigString(){  StringBuilder result=new StringBuilder();  for (int r=0; r < rows; r++) {    for (int c=0; c < columns; c++) {      int value=get(r,c);      if (value < 0) {        value+=256;      }      result.append(String.format("%02x ",value));    }    result.append("\n");  }  return result.toString();}  }
class C{  public void goBack(){  _backtracked++;  _index--;  checkBacktrackLoop(1);}  }
class C{  private void collectStats(Operation op){  JVMStats.JVMStatsSample statsSample=gatherStats();  JVMStats stats=getState(op);  stats.timeSeries.add(statsSample);}  }
class C{  public static ArrayList<File> searchrecursively(File folder,String ext){  ArrayList<File> list=new ArrayList<File>();  File[] files=folder.listFiles();  for (  File f : files) {    if (f.isDirectory()) {      for (      File f1 : searchrecursively(f,ext)) {        list.add(f1);      }    } else     if (f.isFile() && f.getName().endsWith(ext)) {      list.add(f);    }  }  return list;}  }
class C{  public static ComponentUI createUI(JComponent c){  return new BEFileChooserUIWin((JFileChooser)c);}  }
class C{  public void registerObserver(Observer<FunctionDescription> observer){  observable.addObserver(observer,false);}  }
class C{  public void addFooterView(View v){  addFooterView(v,null,true);}  }
class C{  public Resource toResourceWithSortingAndPagination(){  return toResource(null,null);}  }
class C{  public int lowKey(){  return stream.readInt(alignedBci + OFFSET_TO_LOW_KEY);}  }
class C{  protected ForwardingJavaFileManager(M fileManager){  fileManager.getClass();  this.fileManager=fileManager;}  }
class C{  private void bundleArchive() throws GeneratorException, InterruptedException {  checkForInterruption();  setState(STATE.BUNDLING);  File zip=null;  BigDecimal version=resource.getEmlVersion();  try {    zip=dataDir.tmpFile("dwca",".zip");    CompressionUtil.zipDir(dwcaFolder,zip);    if (zip.exists()) {      File versionedFile=dataDir.resourceDwcaFile(resource.getShortname(),version);      if (versionedFile.exists()) {        FileUtils.forceDelete(versionedFile);      }      FileUtils.moveFile(zip,versionedFile);    } else {      throw new GeneratorException("Archive bundling failed: temp archive not created: " + zip.getAbsolutePath());    }  } catch (  IOException e) {    throw new GeneratorException("Problem occurred while bundling DwC-A",e);  } finally {    if (zip != null && zip.exists()) {      FileUtils.deleteQuietly(zip);    }  }  addMessage(Level.INFO,"Archive has been compressed");}  }
class C{  public String globalInfo(){  return m_globalInfo;}  }
class C{  private int[] parseYMD(String string){  string=string.trim();  try {    if (string.charAt(4) != '-' || string.charAt(7) != '-') {      throw new IllegalArgumentException("date must be yyyy-MM-dd");    }    int[] ymd=new int[3];    ymd[0]=Integer.valueOf(string.substring(0,4));    ymd[1]=Integer.valueOf(string.substring(5,7));    ymd[2]=Integer.valueOf(string.substring(8,10));    return ymd;  } catch (  NumberFormatException ex) {    throw new IllegalArgumentException("date must be yyyy-MM-dd",ex);  }}  }
class C{  private int readInt(byte[] b){  return (((b[0] & 0xff) << 24) | ((b[1] & 0xff) << 16) | ((b[2] & 0xff) << 8)| (b[3] & 0xff));}  }
class C{  public BindRequest waitForBind(long timeout) throws IllegalStateException, TimeoutException {  SessionState currentSessionState=getSessionState();  if (currentSessionState.equals(SessionState.OPEN)) {    new PDUReaderWorker().start();    try {      return bindRequestReceiver.waitForRequest(timeout);    } catch (    IllegalStateException e) {      throw new IllegalStateException("Invocation of waitForBind() has been made",e);    }catch (    TimeoutException e) {      close();      throw e;    }  } else {    throw new IllegalStateException("waitForBind() should be invoked on OPEN state, actual state is " + currentSessionState);  }}  }
class C{  private String toString(GarbageCollectionNotificationInfo gcNotifyInfo){  GcInfo gcInfo=gcNotifyInfo.getGcInfo();  StringBuilder sb=new StringBuilder();  sb.append("Name: ").append(gcNotifyInfo.getGcName()).append("\n");  sb.append("Cause: ").append(gcNotifyInfo.getGcCause()).append("\n");  sb.append("Action: ").append(gcNotifyInfo.getGcAction()).append("\n");  sb.append("Duration: ").append(gcInfo.getDuration()).append("\n");  sb.append("Sequence: ").append(gcInfo.getId()).append("\n");  sb.append("When: ").append(when).append("\n\n");  sb.append("BeforeGc: ").append(formatGcData(gcInfo.getMemoryUsageBeforeGc())).append("\n\n");  sb.append("AfterGc: ").append(formatGcData(gcInfo.getMemoryUsageAfterGc())).append("\n");  gcInfoString=sb.toString();  return gcInfoString;}  }
class C{  protected void updateDegrees(int e,int incr){  if (!getEdgeTable().isValidRow(e))   return;  int s=getSourceNode(e);  int t=getTargetNode(e);  if (s < 0 || t < 0)   return;  updateDegrees(e,s,t,incr);  if (incr < 0) {    m_edgeTuples.invalidate(e);  }}  }
class C{  public void closeFragment(String tag){  Fragment fragmentByTag=context.getSupportFragmentManager().findFragmentByTag(tag);  if (fragmentByTag != null) {    closeFragment(fragmentByTag);    context.getSupportFragmentManager().popBackStackImmediate(tag,FragmentManager.POP_BACK_STACK_INCLUSIVE);  }}  }
class C{  private final double preNormMBR(SpatialComparable mbr,final int start,final int end){  double agg=0.;  for (int d=start; d < end; d++) {    double delta=mbr.getMin(d);    if (delta < 0.) {      delta=-mbr.getMax(d);    }    if (delta > 0.) {      agg+=Math.pow(delta,p);    }  }  return agg;}  }
class C{  public TwilightMossScroll(final String name,final String clazz,final String subclass,final Map<String,String> attributes){  super(name,clazz,subclass,attributes);}  }
class C{  public SortOrder(Database database,int[] queryColumnIndexes,int[] sortType,ArrayList<SelectOrderBy> orderList){  this.database=database;  this.queryColumnIndexes=queryColumnIndexes;  this.sortTypes=sortType;  this.orderList=orderList;}  }
class C{  public Component createComponent(){  ComponentImpl component=new ComponentImpl();  return component;}  }
class C{  public synchronized long waitForDuration(long startTimeMillis){  Log.d(TAG,"waitForDuration");  if (mEndTime < startTimeMillis) {    mEndTime=INVALID_ENDTIME;  }  if (mEndTime == INVALID_ENDTIME) {    try {      wait(DURATION_TEST_MAX_MS);    } catch (    InterruptedException iex) {      Log.e(TAG,"waitForDuration",iex);      return -1;    }  }  if (mEndTime == INVALID_ENDTIME) {    Log.d(TAG,"waitForDuration found invalid endtime. Did you exceed the max duration (" + DURATION_TEST_MAX_MS + " ms)?");    return -1;  }  Log.d(TAG,"waitForDuration returning endtime:" + mEndTime + " duration:"+ (mEndTime - startTimeMillis));  final long duration=mEndTime - startTimeMillis;  mEndTime=INVALID_ENDTIME;  return duration;}  }
class C{  public static AsyncUpgradeSubscriptionResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  AsyncUpgradeSubscriptionResponse object=new AsyncUpgradeSubscriptionResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"asyncUpgradeSubscriptionResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (AsyncUpgradeSubscriptionResponse)org.oscm.xsd.ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","return").equals(reader.getName())) {      object.set_return(org.oscm.xsd.BaseResult.Factory.parse(reader));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public boolean supportsMinimumSQLGrammar() throws SQLException {  return true;}  }
class C{  public RepeatedFieldBuilder<MType,BType,IType> addMessage(MType message){  if (message == null) {    throw new NullPointerException();  }  ensureMutableMessageList();  messages.add(message);  if (builders != null) {    builders.add(null);  }  onChanged();  incrementModCounts();  return this;}  }
class C{  public Builder memoryCacheExtraOptions(int maxImageWidthForMemoryCache,int maxImageHeightForMemoryCache){  this.maxImageWidthForMemoryCache=maxImageWidthForMemoryCache;  this.maxImageHeightForMemoryCache=maxImageHeightForMemoryCache;  return this;}  }
class C{  public Task<FileShareRestRep> share(URI id,FileSystemShareParam input){  return postTask(input,getSharesUrl(),id);}  }
class C{  private void replaceString(File file,String from,String to) throws IOException {  String fileName=file.getAbsolutePath();  BufferedReader in=new BufferedReader(new FileReader(file));  File tmpFile=new File(fileName + ".tmp");  BufferedWriter out=new BufferedWriter(new FileWriter(tmpFile,false));  boolean found=false;  String line=null;  int lineNo=0;  while ((line=in.readLine()) != null) {    lineNo++;    if (line.indexOf(from) != -1) {      found=true;      System.out.println("  " + lineNo + ": "+ line);      line=Util.replace(line,from,to);      m_actions++;    }    out.write(line);    out.newLine();  }  in.close();  out.close();  if (found) {    File oldFile=new File(fileName + ".old");    if (file.renameTo(oldFile)) {      if (tmpFile.renameTo(new File(fileName))) {        if (oldFile.delete())         System.out.println(" - File updated: " + fileName); else         System.err.println(" - Old File not deleted - " + fileName);      } else       System.err.println(" - New File not renamed - " + fileName);    } else     System.err.println(" - Old File not renamed - " + fileName);  } else {    if (!tmpFile.delete())     System.err.println(" - Temp file not deleted - " + tmpFile.getAbsolutePath());  }}  }
class C{  public boolean isSetRenameToTable(){  return this.renameToTable != null;}  }
class C{  private void chooseCharacter(final String character){  try {    StendhalClient.get().chooseCharacter(character);    setVisible(false);    stendhal.setDoLogin();    dispose();  } catch (  TimeoutException e) {    logger.error(e,e);    handleError("Your connection timed out, please login again.","Choose Character");  }catch (  InvalidVersionException e) {    logger.error(e,e);    handleError("Your version of Stendhal is incompatible with the server.","Choose Character");  }catch (  BannedAddressException e) {    logger.error(e,e);    handleError("Please login again.","Choose Character");  }}  }
class C{  private ColorPickerSwatch createColorSwatch(int color,int selectedColor){  ColorPickerSwatch view=new ColorPickerSwatch(getContext(),color,color == selectedColor,mOnColorSelectedListener);  TableRow.LayoutParams params=new TableRow.LayoutParams(mSwatchLength,mSwatchLength);  params.setMargins(mMarginSize,mMarginSize,mMarginSize,mMarginSize);  view.setLayoutParams(params);  return view;}  }
class C{  private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  Set roleNames=(Set)in.readObject();  Set roles=new HashSet(roleNames.size());  for (Iterator iter=roleNames.iterator(); iter.hasNext(); ) {    String name=(String)iter.next();    roles.add(InternalRole.getRole(name));  }  this.missingRoles=roles;}  }
class C{  public boolean shouldRecognizeSwipe(MotionEvent e1,MotionEvent e2){  return true;}  }
class C{  private List<Volume> verifyCGForFullCopyRequest(URI cgURI){  BlockConsistencyGroup consistencyGroup=(BlockConsistencyGroup)queryResource(cgURI);  if (!consistencyGroup.created()) {    throw APIException.badRequests.consistencyGroupNotCreated();  }  BlockServiceApi blockServiceApiImpl=getBlockServiceImpl(consistencyGroup);  List<Volume> cgVolumes=blockServiceApiImpl.getActiveCGVolumes(consistencyGroup);  if (cgVolumes.isEmpty()) {    throw APIException.badRequests.fullCopyOperationNotAllowedOnEmptyCG(consistencyGroup.getLabel());  }  return cgVolumes;}  }
class C{  public void reset(){  wasMoved=false;  List<BlockTarget> blockTargetsAt=this.getZone().getEntitiesAt(getX(),getY(),BlockTarget.class);  for (  BlockTarget blockTarget : blockTargetsAt) {    blockTarget.untrigger();  }  this.setPosition(startX,startY);  SingletonRepository.getTurnNotifier().dontNotify(this);  this.notifyWorldAboutChanges();}  }
class C{  boolean insertSubtree(BinarySearchTreeNode<E> node){  if (node == null)   return false;  Iterator<E> iterator=new BinarySearchTreeIterator<E>(node);  while (iterator.hasNext()) {    BinarySearchTreeNode<E> newNode=new BinarySearchTreeNode<E>(iterator.next());    this.insert(newNode);  }  return true;}  }
class C{  public _DeleteOptions(final _DeleteOptions_Flag[] flags){  super(flags);}  }
class C{  public WriteLock acquireWriteLock(String key){  return new WriteLock(key);}  }
class C{  protected KMLRoot parseCachedKMLFile(URL url,String linkBase,String contentType,boolean namespaceAware) throws IOException, XMLStreamException {  KMLDoc kmlDoc;  InputStream refStream=url.openStream();  if (KMLConstants.KMZ_MIME_TYPE.equals(contentType))   kmlDoc=new KMZInputStream(refStream); else   kmlDoc=new KMLInputStream(refStream,WWIO.makeURI(linkBase));  try {    KMLRoot refRoot=new KMLRoot(kmlDoc,namespaceAware);    refRoot=refRoot.parse();    return refRoot;  } catch (  XMLStreamException e) {    refStream.close();    throw e;  }}  }
class C{  private Point mirror_2nd_QuadrantPoint(Point secondQuadrantPoint){  return new Point(-secondQuadrantPoint.getX() + 2 * mX0,secondQuadrantPoint.getY());}  }
class C{  public T caseExpressionStatement(ExpressionStatement object){  return null;}  }
class C{  public TooManyListenersException(String s){  super(s);}  }
class C{  public void startTimer(){  _timer.start();}  }
class C{  public DrawerBuilder withFooterDivider(boolean footerDivider){  this.mFooterDivider=footerDivider;  return this;}  }
class C{  public void switchToHeader(String fragmentName,Bundle args){  setSelectedHeader(null);  switchToHeaderInner(fragmentName,args,0);}  }
class C{  public void addSqlFunction(FunctionIndex function){  functions.add(function);}  }
class C{  public static void writeFile(String fileName,String output) throws FileNotFoundException, IOException {  File file=openFile(fileName);  if (file == null) {    throw new FileNotFoundException(fileName);  }  Writer out=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file),"UTF8"));  try {    out.write(output);    out.flush();  }  finally {    out.close();  }}  }
class C{  protected void removeAt(int index){  _set[index]=no_entry_value;  super.removeAt(index);}  }
class C{  public JavaGenerator(){  this(new JavaTransformFactory());}  }
class C{  private void updateApplicationStatus(String applicationId){  ofy().assertInTransaction();  DateTime now=ofy().getTransactionTime();  DomainApplication domainApplication=loadDomainApplication(applicationId,now);  checkArgumentNotNull(domainApplication,"Domain application does not exist");  if (domainApplication.getApplicationStatus() == newStatus) {    System.err.printf("Domain application %s already has status %s\n",applicationId,newStatus);    return;  }  checkState(!domainApplication.getApplicationStatus().isFinalStatus(),"Domain application has final status %s",domainApplication.getApplicationStatus());  DomainApplication.Builder applicationBuilder=domainApplication.asBuilder().setApplicationStatus(newStatus).setLastEppUpdateTime(now).setLastEppUpdateClientId(domainApplication.getCurrentSponsorClientId());  HistoryEntry newHistoryEntry=new HistoryEntry.Builder().setType(HistoryEntry.Type.DOMAIN_APPLICATION_STATUS_UPDATE).setParent(domainApplication).setModificationTime(now).setClientId(clientId).setBySuperuser(true).build();  PollMessage.OneTime.Builder pollMessageBuilder=new PollMessage.OneTime.Builder().setClientId(domainApplication.getCurrentSponsorClientId()).setEventTime(ofy().getTransactionTime()).setMsg(message).setParent(newHistoryEntry).setResponseExtensions(ImmutableList.of(new LaunchInfoResponseExtension.Builder().setApplicationId(domainApplication.getForeignKey()).setPhase(domainApplication.getPhase()).setApplicationStatus(newStatus).build()));  if (newStatus.isFinalStatus()) {    applicationBuilder.removeStatusValue(StatusValue.PENDING_CREATE);    pollMessageBuilder.setResponseData(ImmutableList.of(DomainPendingActionNotificationResponse.create(domainApplication.getFullyQualifiedDomainName(),ALLOCATED.equals(newStatus),getCreationTrid(domainApplication),now)));  } else {    applicationBuilder.addStatusValue(StatusValue.PENDING_CREATE);  }  stageEntityChange(domainApplication,applicationBuilder.build());  stageEntityChange(null,pollMessageBuilder.build());  stageEntityChange(null,newHistoryEntry);}  }
class C{  public void drawLegendShape(Canvas canvas,SimpleSeriesRenderer renderer,float x,float y,int seriesIndex,Paint paint){  paint.setStyle(Style.FILL);  drawCircle(canvas,paint,x + SHAPE_WIDTH,y,3);}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("ServerParser.parse");  Server server=new Server();  try {    headerName(TokenTypes.SERVER);    if (this.lexer.lookAhead(0) == '\n')     throw createParseException("empty header");    while (this.lexer.lookAhead(0) != '\n' && this.lexer.lookAhead(0) != '\0') {      if (this.lexer.lookAhead(0) == '(') {        String comment=this.lexer.comment();        server.addProductToken('(' + comment + ')');      } else {        String tok;        int marker=0;        try {          marker=this.lexer.markInputPosition();          tok=this.lexer.getString('/');          if (tok.charAt(tok.length() - 1) == '\n')           tok=tok.trim();          server.addProductToken(tok);        } catch (        ParseException ex) {          this.lexer.rewindInputPosition(marker);          tok=this.lexer.getRest().trim();          server.addProductToken(tok);          break;        }      }    }  }  finally {    if (debug)     dbg_leave("ServerParser.parse");  }  return server;}  }
class C{  public DataSet(){  this(DEFAULT_CAPACITY);}  }
class C{  public void writeParameter(Parameter parameter,int dimension,XMLWriter writer){  if (parameter == null) {    throw new IllegalArgumentException("parameter (== null) is unknown");  }  if (parameter.isFixed()) {    writeParameter(parameter.getName(),dimension,parameter.getInitial(),Double.NaN,Double.NaN,writer);  } else {    double lower=Double.NaN;    double upper=Double.NaN;    if (parameter.isNonNegative) {      lower=0.0;    }    if (parameter.isZeroOne) {      lower=0.0;      upper=1.0;    }    writeParameter(parameter.getName(),dimension,parameter.getInitial(),lower,upper,writer);  }}  }
class C{  private Query createQuery(PriorityQueue<ScoreTerm> q){  BooleanQuery.Builder query=new BooleanQuery.Builder();  ScoreTerm scoreTerm;  float bestScore=-1;  while ((scoreTerm=q.pop()) != null) {    Query tq=new TermQuery(new Term(scoreTerm.topField,scoreTerm.word));    if (boost) {      if (bestScore == -1) {        bestScore=(scoreTerm.score);      }      float myScore=(scoreTerm.score);      tq=new BoostQuery(tq,boostFactor * myScore / bestScore);    }    try {      query.add(tq,BooleanClause.Occur.SHOULD);    } catch (    BooleanQuery.TooManyClauses ignore) {      break;    }  }  return query.build();}  }
class C{  public DiscussionExample(DiscussionObject sample){  oredCriteria=new ArrayList<Criteria>();  Criteria criteria=this.or();  if (sample.getProjectId() != null) {    criteria.andProjectIdEqualTo(sample.getProjectId());  }  if (sample.getSubject() != null) {    criteria.andSubjectEqualTo(sample.getSubject());  }  if (sample.getContent() != null) {    criteria.andContentEqualTo(sample.getContent());  }  if (sample.getCreatorId() != null) {    criteria.andCreatorIdEqualTo(sample.getCreatorId());  }  if (sample.getDeleted() != null) {    criteria.andDeletedEqualTo(sample.getDeleted());  }  if (sample.getCreated() != null) {    criteria.andCreatedEqualTo(sample.getCreated());  }  if (sample.getUpdated() != null) {    criteria.andUpdatedEqualTo(sample.getUpdated());  }  if (sample.getBcId() != null) {    criteria.andBcIdEqualTo(sample.getBcId());  }  if (sample.getCreatorName() != null) {    criteria.andCreatorNameEqualTo(sample.getCreatorName());  }  if (sample.getCompanyId() != null) {    criteria.andCompanyIdEqualTo(sample.getCompanyId());  }  if (sample.getCreatorAvatar() != null) {    criteria.andCreatorAvatarEqualTo(sample.getCreatorAvatar());  }}  }
class C{  public static char[] toCharArray(double[] array){  char[] result=new char[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(char)array[i];  }  return result;}  }
class C{  @NoInline public static void writeHex(int value){  if (runningVM) {    sysCall.sysConsoleWriteInteger(value,2);  } else {    writeHexNotRunningVM(value);  }}  }
class C{  public boolean isRefreshing(){  return mStatus == PTR_STATUS_LOADING;}  }
class C{  public boolean isMultipleOutputFiles(){  return multipleOutputFiles;}  }
class C{  private void startItemList(StringBuilder result,String rootId){  result.append("<div class=\"container\"" + "><div class=\"alone fakealone\" id=\"alone_ef_" + rootId + "\"></div><div class=\"justchildren fakejustchildren\">");}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:49.779 -0500",hash_original_method="7FFE2BA54C7A195E9FE8B5D995EC9572",hash_generated_method="85FFC9978267B1E67AAF608E98C06023") @Override public int read() throws IOException {synchronized (lock) {    checkNotClosed();    if (pos != count) {      return str.charAt(pos++);    }    return -1;  }}  }
class C{  public void cleanUp(){  if (mFrameLayout != null)   mFrameLayout.cleanUp();  if (mToolTipViewGroup != null) {    ((ViewGroup)mActivity.getWindow().getDecorView()).removeView(mToolTipViewGroup);  }}  }
class C{  public synchronized void addBuildOption(String option){  if (option.startsWith("-I")) {    addInclude(option.substring(2));    return;  }  if (extraBuildOptions == null)   extraBuildOptions=new ArrayList<String>();  extraBuildOptions.add(option);}  }
class C{  public void addNodesInDocOrder(NodeList nodelist,XPathContext support){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));  int nChildren=nodelist.getLength();  for (int i=0; i < nChildren; i++) {    Node node=nodelist.item(i);    if (null != node) {      addNodeInDocOrder(node,support);    }  }}  }
class C{  @Override public void processView(ViewEngineContext context) throws ViewEngineException {  try {    forwardRequest(context,"*.jsp","*.jspx");  } catch (  ServletException|IOException e) {    throw new ViewEngineException(e);  }}  }
class C{  public LocalVarTypeTableAttr(){  vars=new Vector();}  }
class C{  protected void paintRangeRings(Point2D originPnt,Point2D dest,Graphics graphics,MapBean theMap){  Geo originGeo=new Geo(originPnt.getY(),originPnt.getX(),true);  Geo destGeo=new Geo(dest.getY(),dest.getX(),true);  double distance=originGeo.distance(destGeo);  for (int i=1; i <= Math.max(1,numRings); i++) {    double ringDist=distance * (double)i;    paintCircle(originGeo,ringDist,graphics,theMap);    paintLabel(originGeo,ringDist,graphics,theMap);  }}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","jxcfs");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  @Nullable public static Method findMethod(Class c,String name,Object... params){  Class[] paramTypes=getParamTypes(params);  Method method=null;  try {    method=c.getDeclaredMethod(name,paramTypes);  } catch (  NoSuchMethodException e) {    try {      method=c.getMethod(name,paramTypes);    } catch (    NoSuchMethodException e1) {    }  }  if (method != null)   method.setAccessible(true);  return method;}  }
class C{  public Name build(){  return new Name(this);}  }
class C{  MultistepExprHolder addInSortedOrder(ExpressionOwner exprOwner,int stepCount){  MultistepExprHolder first=this;  MultistepExprHolder next=this;  MultistepExprHolder prev=null;  while (null != next) {    if (stepCount >= next.m_stepCount) {      MultistepExprHolder newholder=new MultistepExprHolder(exprOwner,stepCount,next);      if (null == prev)       first=newholder; else       prev.m_next=newholder;      return first;    }    prev=next;    next=next.m_next;  }  prev.m_next=new MultistepExprHolder(exprOwner,stepCount,null);  return first;}  }
class C{  public static void main(String[] args){  SpringApplication.run(Starter.class,args);}  }
class C{  public static int[] select(int[] data,int[] indices){  int[] returnData=new int[indices.length];  for (int i=0; i < indices.length; i++) {    returnData[i]=data[indices[i]];  }  return returnData;}  }
class C{  @Override public void endWindow(){  keycount.clear();}  }
class C{  public void visitSource(String source,String debug){  if (cv != null) {    cv.visitSource(source,debug);  }}  }
class C{  private boolean isInTransit(Response response){  Type type=response.getType();  boolean acked=response.isAcknowledged();  boolean timeout=response.isTimedOut();  boolean result=type == Type.CON && !acked && !timeout;  return result;}  }
class C{  private void write(OutputNode node,Map map) throws Exception {  for (  Object key : map.keySet()) {    Object item=map.get(key);    if (item != null) {      Class real=item.getClass();      Label label=group.getLabel(real);      if (label == null) {        throw new UnionException("Value of %s not declared in %s with annotation %s",real,type,group);      }      write(node,key,item,label);    }  }}  }
class C{  public static boolean isXML11InternalEntityContent(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_CONTENT_INTERNAL) != 0) || (0x10000 <= c && c <= 0x10FFFF);}  }
class C{  @POST @Path("image/install/") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public Response installImage(@QueryParam("version") String versionStr) throws Exception {  _log.info("installImage({})",versionStr);  final SoftwareVersion version;  try {    version=new SoftwareVersion(versionStr);  } catch (  InvalidSoftwareVersionException e) {    throw APIException.badRequests.parameterIsNotValid("version");  }  checkClusterState(false);  RepositoryInfo repoInfo=null;  try {    repoInfo=_coordinator.getTargetInfo(RepositoryInfo.class);  } catch (  Exception e) {    throw APIException.internalServerErrors.getObjectFromError("target repository info","coordinator",e);  }  SoftwareVersion currentVersion=repoInfo.getCurrentVersion();  List<SoftwareVersion> localAvailableVersions=repoInfo.getVersions();  if (localAvailableVersions.size() > SyncInfoBuilder.MAX_SOFTWARE_VERSIONS) {    throw APIException.badRequests.numberOfInstalledExceedsMax();  }  RemoteRepository repo=_upgradeManager.getRemoteRepository();  if (isInstalled(repoInfo.getVersions(),version)) {    throw APIException.badRequests.versionIsInstalled(versionStr);  }  if (!isUpgradable(repoInfo.getCurrentVersion(),version)) {    throw APIException.badRequests.versionIsNotAvailableForUpgrade(versionStr);  }  try {    repo.checkVersionDownloadable(version);  } catch (  RemoteRepositoryException e) {    throw APIException.internalServerErrors.getObjectError("remote repository info",e);  }  List<SoftwareVersion> newList=new ArrayList<SoftwareVersion>(localAvailableVersions);  newList.add(version);  int versionSize=repo.checkVersionSize(version);  _log.info("The size of the image is:" + versionSize);  initializeDownloadProgress(versionStr,versionSize);  try {    _coordinator.setTargetInfo(new RepositoryInfo(currentVersion,newList));  } catch (  Exception e) {    throw APIException.internalServerErrors.setObjectToError("target versions","coordinator",e);  }  auditUpgrade(OperationTypeEnum.INSTALL_IMAGE,AuditLogManager.AUDITLOG_SUCCESS,null,versionStr);  ClusterInfo clusterInfo=_coordinator.getClusterInfo();  if (clusterInfo == null) {    throw APIException.internalServerErrors.targetIsNullOrEmpty("Cluster info");  }  return toClusterResponse(clusterInfo);}  }
class C{  public object addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  private Transfer writeDouble(double i) throws IOException {  out.writeDouble(i);  return this;}  }
class C{  public void open(){}  }
class C{  public String statementToCodeString(int i){  StringBuilder oneStatement=new StringBuilder();  sequence.appendCode(oneStatement,i);  return oneStatement.toString();}  }
class C{  public void updateNetworkProperties(){  GetInterestsTask task=new GetInterestsTask(this);  ActivityResult result=null;  try {    result=activityManager.initiateActivity(task).get();  } catch (  Exception ex) {    throw new RuntimeException(ex);  }  if (result.getException() != null)   HGUtils.throwRuntimeException(result.getException());}  }
class C{  public boolean accept(File f){  boolean shown=true;  if (f != null && fileFilter != null) {    shown=fileFilter.accept(f);  }  return shown;}  }
class C{  public static void registerDemos(AimaDemoFrame frame){  frame.addApp(VacuumApp.class);  frame.addApp(RouteFindingAgentApp.class);  frame.addApp(EightPuzzleApp.class);  frame.addApp(NQueensApp.class);  frame.addApp(TicTacToeApp.class);  frame.addApp(ConnectFourApp.class);  frame.addApp(MapColoringApp.class);  frame.addApp(MonteCarloLocalizationApp.class);  frame.addProg(TrivialVacuumProg.class);  frame.addProg(EightPuzzleProg.class);  frame.addProg(TicTacToeProg.class);  frame.addProg(NQueensProg.class);  frame.addProg(MapColoringCSPProg.class);  frame.addProg(NondeterministicVacuumEnvironmentProg.class);  frame.addProg(TTEntailsProg.class);  frame.addProg(PLFCEntailsProg.class);  frame.addProg(PLResolutionProg.class);  frame.addProg(DPLLProg.class);  frame.addProg(WalkSatProg.class);  frame.addProg(FolProg.class);  frame.addProg(ProbabilityProg.class);  frame.addProg(LearningProg.class);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:13.405 -0500",hash_original_method="86BACF12AABDF1D79A57ADD37C52BB94",hash_generated_method="7D783B9D180F8C52920A38D45A9105E9") protected void removeFromMarkedPosition(){  System.arraycopy(buffer,read_pos,buffer,marked_pos,read_pos_end - read_pos);  read_pos_end-=(read_pos - marked_pos);  read_pos=marked_pos;}  }
class C{  public boolean isOpenedToRight(){  return openedToRight;}  }
class C{  public DOMMouseOverEventListener(){}  }
class C{  public void testDefaultsNoSecondaryUriNonPrimary() throws Exception {  startUp();  checkMode("/ignite/proxy",PRIMARY);  checkMode("/ignite/proxy/",PRIMARY);  checkMode("/ignite/proxy/subfolder",PRIMARY);  checkMode("/ignite/proxy/folder/file.txt",PRIMARY);  checkMode("/ignite/sync",PRIMARY);  checkMode("/ignite/sync/",PRIMARY);  checkMode("/ignite/sync/subfolder",PRIMARY);  checkMode("/ignite/sync/folder/file.txt",PRIMARY);  checkMode("/ignite/async",PRIMARY);  checkMode("/ignite/async/",PRIMARY);  checkMode("/ignite/async/subfolder",PRIMARY);  checkMode("/ignite/async/folder/file.txt",PRIMARY);}  }
class C{  public void styleDistributionSetTable(final Long installedDistItemId,final Long assignedDistTableItemId){  setCellStyleGenerator(null);}  }
class C{  public void testRandomStrings() throws Exception {  Analyzer analyzer=new SmartChineseAnalyzer();  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);  analyzer.close();}  }
class C{  default Instant dayAt(int month,int day){  return OffsetDateTime.of(2015,month,day,0,0,0,0,ZoneOffset.UTC).toInstant();}  }
class C{  public MiscType(){}  }
class C{  public boolean naive_side_effect(){  return soot.PhaseOptions.getBoolean(options,"naive-side-effect");}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  OpenSSLSessionImpl(byte[] derData,String peerHost,int peerPort,X509Certificate[] peerCertificates,AbstractSessionContext sessionContext) throws IOException {  this(NativeCrypto.d2i_SSL_SESSION(derData),null,peerCertificates,peerHost,peerPort,sessionContext);  if (this.sslSessionNativePointer == 0) {    throw new IOException("Invalid session data");  }}  }
class C{  public static String URLEnc(String s,String charset) throws UnsupportedEncodingException {  return URLEnc(s,charset,false);}  }
class C{  public void parse(InputStream is){  setPasswordMap(parseRulesFile(is));}  }
class C{  public UpdateInventoryOutput replyOk(){  UpdateInventoryOutput ok=new UpdateInventoryOutput();  ok.setCode("OK");  return ok;}  }
class C{  public MetricSetDto build(){  Set<MetricDto> tmp=metrics;  metrics=null;  return new MetricSetDto(name,tmp);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:50.286 -0500",hash_original_method="08F2996E575B7D53E4C32324607C70EA",hash_generated_method="128457AC2502CFA879226F57DFFA3530") protected void concatenate(GenericObjectList objList,boolean topFlag){  if (!topFlag) {    this.addAll(objList);  } else {    this.addAll(0,objList);  }}  }
class C{  public static void v(String msg,Throwable thr){  if (BuildConfig.DEBUG)   android.util.Log.v(TAG,buildMessage(msg),thr);}  }
class C{  public void checkBackupInfo(final File backupInfoFile,boolean backupInMultiVdc){  try (InputStream fis=new FileInputStream(backupInfoFile)){    Properties properties=new Properties();    properties.load(fis);    checkVersion(properties);    checkHosts(properties,backupInMultiVdc);  } catch (  IOException ex) {    log.warn("Unable to check backup Info",ex);  }}  }
class C{  public void testNegNegFirstShorter(){  String numA="293478573489347658763745839457637";  String numB="2837462783428374767845648748973847593874837948575684767";  String res="2837462783428374767845615168483972194300564226167553530";  BigInteger aNumber=new BigInteger(numA);  BigInteger bNumber=new BigInteger(numB);  BigInteger result=aNumber.xor(bNumber);  assertTrue(res.equals(result.toString()));}  }
class C{  public DefaultTableColumn addClosureColumn(Object headerValue,Closure readClosure,Closure writeClosure,Class type){  return addColumn(headerValue,new ClosureModel(rowModel,readClosure,writeClosure,type));}  }
class C{  public final void yyreset(java.io.Reader reader) throws java.io.IOException {  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  public HistoryEditText(Activity context,int[] cmdIds,EditText... editors){  this(context,context.getClass().getSimpleName() + "_history_","';'",8,cmdIds,editors);}  }
class C{  public void flip(int x,int y){  int offset=y * rowSize + (x >> 5);  bits[offset]^=1 << (x & 0x1f);}  }
class C{  @Override public void outputChanged(){  for (  final ILayer i : enabledLayers) {    i.reloadOn(surface);  }  for (  final ILayer i : disabledLayers) {    i.reloadOn(surface);  }}  }
class C{  public void initializeRadians(double lat,double lon){  double rlat=geocentricLatitude(lat);  double c=Math.cos(rlat);  x=c * Math.cos(lon);  y=c * Math.sin(lon);  z=Math.sin(rlat);}  }
class C{  public boolean hasBack(){  return Display.impl.browserHasBack(internal);}  }
class C{  public NATSException(Throwable ex,Connection nc,Subscription sub){  super(ex);  this.setConnection(nc);  this.setSubscription(sub);}  }
class C{  public void handleEvent(Event evt){  MutationEvent mevt=(MutationEvent)evt;  Node parent=mevt.getRelatedNode();  if (!(parent instanceof XBLOMDefinitionElement)) {    return;  }  EventTarget target=evt.getTarget();  if (!(target instanceof XBLOMTemplateElement)) {    return;  }  XBLOMTemplateElement template=(XBLOMTemplateElement)target;  DefinitionRecord defRec=(DefinitionRecord)definitions.get(parent,importElement);  if (defRec == null) {    return;  }  ImportRecord ir=(ImportRecord)imports.get(importElement);  if (defRec.template != null) {    for (Node n=parent.getFirstChild(); n != null; n=n.getNextSibling()) {      if (n == template) {        removeTemplateElementListeners(defRec.template,ir);        defRec.template=template;        break;      } else       if (n == defRec.template) {        return;      }    }  } else {    defRec.template=template;  }  addTemplateElementListeners(template,ir);  rebind(defRec.namespaceURI,defRec.localName,document.getDocumentElement());}  }
class C{  private static Pair<String,String> postIndexedReg(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2){  final String address=environment.getNextVariableString();  final String tmpVar1=environment.getNextVariableString();  long baseOffset=offset;  instructions.add(ReilHelpers.createStr(baseOffset++,dw,registerNodeValue1,dw,address));  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue1,dw,registerNodeValue2,dw,tmpVar1));  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar1,dw,dWordBitMask,dw,registerNodeValue1));  return new Pair<String,String>(address,registerNodeValue1);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return NODE_ID;case 3:return AUTH_SCHEME;case 4:return AUTH_CHALLENGE_RESPONSE;default :return null;}}  }
class C{  public int compareTo(Object o){  if (!(o instanceof Segment)) {    return -1;  }  Segment s=(Segment)o;  if (((s.endCode >= startCode) && (s.endCode <= endCode)) || ((s.startCode >= startCode) && (s.startCode <= endCode))) {    return 0;  }  if (endCode > s.endCode) {    return 1;  } else   if (endCode < s.endCode) {    return -1;  } else {    return 0;  }}  }
class C{  @Override public void step(SimState state){  if (!acceptable(region)) {    Polygon potentialNew=bestMove(((PolySchelling)state).polys);    if (potentialNew != null) {      updateLocation(potentialNew);    } else {    }  }}  }
class C{  public boolean canWriteCompressed(){  return canWriteCompressed;}  }
class C{  public void showAllCells() throws IOException, ServiceException {  CellFeed feed=service.getFeed(cellFeedUrl,CellFeed.class);  for (  CellEntry entry : feed.getEntries()) {    printCell(entry);  }}  }
class C{  public NotificationChain basicSetRhs(Expression newRhs,NotificationChain msgs){  Expression oldRhs=rhs;  rhs=newRhs;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.BINARY_LOGICAL_EXPRESSION__RHS,oldRhs,newRhs);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public String stem(String str){  if (str.length() <= 2) {    return str;  }  String stemmed=super.stem(str);  while (!stemmed.equals(str)) {    str=stemmed;    stemmed=super.stem(stemmed);  }  return stemmed;}  }
class C{  public SegmentTree(int left,int right,IConstructor<?> constructor){  this.constructor=constructor;  init(left,right);}  }
class C{  public void onAnimationEnd(Animator animation){  if (mRule == Dependency.AFTER) {    startIfReady(animation);  }}  }
class C{  public void print(){  System.out.println(toString());}  }
class C{  public UnweightedGraph(V[] vertices,int[][] edges){  super(vertices,edges);}  }
class C{  public boolean noStore(){  return noStore;}  }
class C{  @Override public void init(IEditorSite site,IEditorInput editorInput){  setSite(site);  setInputWithNotify(editorInput);  setPartName(editorInput.getName());  site.setSelectionProvider(this);  site.getPage().addPartListener(partListener);  ResourcesPlugin.getWorkspace().addResourceChangeListener(resourceChangeListener,IResourceChangeEvent.POST_CHANGE);}  }
class C{  private void saveState(){  PrefManager.get().setWindowState(frame.getExtendedState());  if (fc.getDirectory() != null) {    PrefManager.get().setSelectedPath(new File(fc.getDirectory()));  }  PrefManager.get().setPreferredSize(frame.getRootPane().getSize());  PrefManager.get().setWindowPos(frame.getX(),frame.getY());  if (isThreadDisplay()) {    PrefManager.get().setTopDividerPos(topSplitPane.getDividerLocation());    PrefManager.get().setDividerPos(splitPane.getDividerLocation());  }  PrefManager.get().flush();}  }
class C{  private void moveTab(int from,int to){  if (from == to) {    return;  }  Component comp=getComponentAt(from);  String title=getTitleAt(from);  String toolTip=getToolTipTextAt(from);  Icon icon=getIconAt(from);  Component tabComp=getTabComponentAt(from);  removeTabAt(from);  if (from < to) {    to--;  }  insertTab(title,icon,comp,toolTip,to);  setTabComponentAt(to,tabComp);  setSelectedComponent(comp);}  }
class C{  boolean whitelist(){  return reader.getBoolean(WHITELIST,false);}  }
class C{  public final int skipBytes(int n) throws java.io.IOException {  return 0;}  }
class C{  public CircledPortrayal2D(SimplePortrayal2D child,double offset,double scale,Paint paint,boolean onlyCircleWhenSelected){  super(paint,scale,false);  this.offset=offset;  this.child=child;  this.paint=paint;  this.onlyCircleWhenSelected=onlyCircleWhenSelected;}  }
class C{  private synchronized static void closeInstance(){  StatAlertsManager.alertManager=null;}  }
class C{  protected void assertOrder(Order actual,Order expected){  assertThat(actual,is(not(nullValue())));  assertThat(actual.getId(),is(expected.getId()));}  }
class C{  public synchronized int read() throws IOException {  if (!connected) {    throw new IOException("Pipe not connected");  } else   if (closedByReader) {    throw new IOException("Pipe closed");  } else   if (writeSide != null && !writeSide.isAlive() && !closedByWriter && (in < 0)) {    throw new IOException("Write end dead");  }  readSide=Thread.currentThread();  int trials=2;  while (in < 0) {    if (closedByWriter) {      return -1;    }    if ((writeSide != null) && (!writeSide.isAlive()) && (--trials < 0)) {      throw new IOException("Pipe broken");    }    notifyAll();    try {      wait(1000);    } catch (    InterruptedException ex) {      throw new java.io.InterruptedIOException();    }  }  int ret=buffer[out++] & 0xFF;  if (out >= buffer.length) {    out=0;  }  if (in == out) {    in=-1;  }  return ret;}  }
class C{  public void add(RuleGrounding other){  for (  Assignment otherAssign : other.groundings) {    if (groundings.stream().anyMatch(null)) {      continue;    }    groundings.add(otherAssign);  }  if (!isEmpty()) {    groundings.remove(new Assignment());  }}  }
class C{  protected HiddenUnit(Unit[] units,Random random){  this.units=units;  this.weights=new double[units.length];}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @SideOnly(Side.CLIENT) public void renderHUD(Minecraft mc,ScaledResolution res){}  }
class C{  @Override public void preProcess(ResultProducer rp) throws Exception {  m_RP=rp;  if ((m_OutputFile == null) || (m_OutputFile.getName().equals("-"))) {    m_Out=new PrintWriter(System.out,true);  } else {    m_Out=new PrintWriter(new BufferedOutputStream(new FileOutputStream(m_OutputFile)),true);  }  printResultNames(m_RP);}  }
class C{  @RequestMapping(value="/{id}",method=RequestMethod.DELETE) @ResponseBody public RestWrapper delete(@PathVariable("id") Long batchId,Principal principal){  RestWrapper restWrapper=null;  try {    batchDAO.delete(batchId);    restWrapper=new RestWrapper(null,RestWrapper.OK);    LOGGER.info(RECORDWITHID + batchId + " deleted from Batch by User:"+ principal.getName());  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public FieldInfos(FieldInfo[] infos){  boolean hasVectors=false;  boolean hasProx=false;  boolean hasPayloads=false;  boolean hasOffsets=false;  boolean hasFreq=false;  boolean hasNorms=false;  boolean hasDocValues=false;  boolean hasPointValues=false;  TreeMap<Integer,FieldInfo> byNumber=new TreeMap<>();  for (  FieldInfo info : infos) {    if (info.number < 0) {      throw new IllegalArgumentException("illegal field number: " + info.number + " for field "+ info.name);    }    FieldInfo previous=byNumber.put(info.number,info);    if (previous != null) {      throw new IllegalArgumentException("duplicate field numbers: " + previous.name + " and "+ info.name+ " have: "+ info.number);    }    previous=byName.put(info.name,info);    if (previous != null) {      throw new IllegalArgumentException("duplicate field names: " + previous.number + " and "+ info.number+ " have: "+ info.name);    }    hasVectors|=info.hasVectors();    hasProx|=info.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;    hasFreq|=info.getIndexOptions() != IndexOptions.DOCS;    hasOffsets|=info.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;    hasNorms|=info.hasNorms();    hasDocValues|=info.getDocValuesType() != DocValuesType.NONE;    hasPayloads|=info.hasPayloads();    hasPointValues|=(info.getPointDimensionCount() != 0);  }  this.hasVectors=hasVectors;  this.hasProx=hasProx;  this.hasPayloads=hasPayloads;  this.hasOffsets=hasOffsets;  this.hasFreq=hasFreq;  this.hasNorms=hasNorms;  this.hasDocValues=hasDocValues;  this.hasPointValues=hasPointValues;  this.values=Collections.unmodifiableCollection(byNumber.values());  Integer max=byNumber.isEmpty() ? null : Collections.max(byNumber.keySet());  if (max != null && max < ArrayUtil.MAX_ARRAY_LENGTH && max < 16L * byNumber.size()) {    byNumberMap=null;    byNumberTable=new FieldInfo[max + 1];    for (    Map.Entry<Integer,FieldInfo> entry : byNumber.entrySet()) {      byNumberTable[entry.getKey()]=entry.getValue();    }  } else {    byNumberMap=byNumber;    byNumberTable=null;  }}  }
class C{  @GET("sendResults") public void sendResults(@Param("nbResults") Integer nbResults,PaginationContext pageContext,Payload<List<Dog>> payload){  List<Dog> dogs=new ArrayList<>(nbResults);  for (int i=0; i < nbResults; i++) {    dogs.add(new Dog("My name is dog number " + i + " I wish I have a real name :'( ","Border collie"));  }  pageContext.setNbItems(nbResults);  payload.set(dogs.subList(pageContext.firstItemInPage(),pageContext.lastItemInPage()));}  }
class C{  public void addMessageListener(Listener<Message> listener){  mMessageListeners.add(listener);}  }
class C{  private boolean isFirstStrictlyGreaterThanLast(Number greater,Number less,String className){  if (className.equals("java.lang.Integer") || className.equals("java.lang.Byte") || className.equals("java.lang.Short")|| className.equals("java.lang.Long")) {    return (greater.longValue() > less.longValue());  } else   if (className.equals("java.lang.Float") || className.equals("java.lang.Double")) {    return (greater.doubleValue() > less.doubleValue());  } else {    MONITOR_LOGGER.logp(Level.FINEST,GaugeMonitor.class.getName(),"isFirstStrictlyGreaterThanLast","the threshold type is invalid");    return false;  }}  }
class C{  public char next() throws JSONException {  int c;  if (this.usePrevious) {    this.usePrevious=false;    c=this.previous;  } else {    try {      c=this.reader.read();    } catch (    IOException exception) {      throw new JSONException(exception);    }    if (c <= 0) {      this.eof=true;      c=0;    }  }  this.index+=1;  if (this.previous == '\r') {    this.line+=1;    this.character=c == '\n' ? 0 : 1;  } else   if (c == '\n') {    this.line+=1;    this.character=0;  } else {    this.character+=1;  }  this.previous=(char)c;  return this.previous;}  }
class C{  public void testNegativeRangeQuery(){  assertQ("Collated RangeQ: ",req("fl","id","q","sort_ar:[\u062F TO \u0698]","sort","id asc"),"//*[@numFound='0']");}  }
class C{  public double[][] computeNorms(double[][] mvTimeSeries1,double[][] mvTimeSeries2,int t){  int timeSteps=mvTimeSeries1.length;  double[][] norms=new double[timeSteps][2];  for (int t2=0; t2 < timeSteps; t2++) {    if (t2 == t) {      norms[t2][0]=Double.POSITIVE_INFINITY;      norms[t2][1]=Double.POSITIVE_INFINITY;      continue;    }    norms[t2][0]=norm(mvTimeSeries1[t],mvTimeSeries1[t2]);    norms[t2][1]=norm(mvTimeSeries2[t],mvTimeSeries2[t2]);  }  return norms;}  }
class C{  private void addButtonRow(){  if (BUTTON_ROW != null) {    SOUTH_PANEL=Box.createVerticalBox();    SOUTH_PANEL.setOpaque(false);    SOUTH_PANEL.add(Box.createVerticalStrut(GUIConstants.SEPARATOR));    JPanel buttonPanel=new JPanel();    buttonPanel.setLayout(new GridBagLayout());    GridBagConstraints gbc=new GridBagConstraints();    gbc.gridx=1;    gbc.gridy=0;    gbc.anchor=GridBagConstraints.CENTER;    gbc.fill=GridBagConstraints.NONE;    gbc.gridwidth=GridBagConstraints.RELATIVE;    gbc.weightx=1;    buttonPanel.add(BUTTON_ROW,gbc);    buttonPanel.setMaximumSize(new Dimension(Integer.MAX_VALUE,64));    SOUTH_PANEL.add(buttonPanel);    MAIN_PANEL.add(SOUTH_PANEL);  }}  }
class C{  public DividerDecoration(Context context,@IdRes int... excludedLayoutIDs){  this(context,false,excludedLayoutIDs);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public static void saveToProtectedStore(PrivateKey privateKey,Certificate certificate,File storeLocation,String alias,String privateKeyPassword,String keyStorePassword,String keyStoreType) throws IOException, KeyStoreException, NoSuchProviderException, NoSuchAlgorithmException, CertificateException {  KeyStore store=null;  if (keyStoreType.equals("PKCS12")) {    store=KeyStore.getInstance(keyStoreType,CryptoUtil.getSecurityProviderName(KeyStore.class));  } else   store=KeyStore.getInstance(keyStoreType);  store.load(null,null);  Certificate[] chain=new Certificate[1];  chain[0]=certificate;  if (privateKeyPassword != null)   store.setKeyEntry(alias,privateKey,privateKeyPassword.toCharArray(),chain); else   store.setKeyEntry(alias,privateKey,null,chain);  FileOutputStream fOut=new FileOutputStream(storeLocation);  try {    store.store(fOut,keyStorePassword == null ? null : keyStorePassword.toCharArray());  }  finally {    fOut.close();  }}  }
class C{  public void addConflictRemovedListener(final ConflictCacheListener listener){  Check.notNull(listener,"listener");synchronized (listenerLock) {    conflictListeners.addListener(listener,REMOVED);  }}  }
class C{  @Override public void focusGained(FocusEvent e){  spinner.repaint();}  }
class C{  public int rank(){  double eps=Math.pow(2.0,-52.0);  double tol=Math.max(m,n) * s[0] * eps;  int r=0;  for (int i=0; i < s.length; i++) {    if (s[i] > tol) {      r++;    }  }  return r;}  }
class C{  public boolean verify(Sha256Hash sigHash,ECDSASignature signature){  return ECKey.verify(sigHash.getBytes(),signature,getPubKey());}  }
class C{  public StringBuffer buildSelect(){  StringBuffer sql=new StringBuffer();  int size=getColumnCount();  for (int i=0; i < size; i++) {    if (isLazyLoading(i))     continue;    if (sql.length() > 0)     sql.append(",");    sql.append(getColumnSQL(i));  }  sql.insert(0,"SELECT ");  sql.append(" FROM ").append(getTableName());  return sql;}  }
class C{  public void beginAccept3(WebRequest theRequest){  theRequest.addHeader("Accept","text/plain; q=0.5, text/html, text/html;level=1");}  }
class C{  public static void storeGeofenceEnabled(Context context,boolean enable){  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);  SharedPreferences.Editor editor=prefs.edit();  editor.putBoolean(PREFERENCES_GEOFENCE_ENABLED,enable);  editor.apply();}  }
class C{  public void removeMapObserver(Observer<IOObjectMapEvent> observer){  mapObservable.removeObserver(observer);}  }
class C{  public boolean contains(int value){  return this.isWithinBoundaries(value) && (value - this.from) % this.step == 0;}  }
class C{  private byte[] embiggen(byte[] b,int len){  if (b == null || b.length < len) {    return new byte[len];  } else {    return b;  }}  }
class C{  public static EncryptionKey findKey(int etype,Integer kvno,EncryptionKey[] keys) throws KrbException {  if (!EType.isSupported(etype)) {    throw new KrbException("Encryption type " + EType.toString(etype) + " is not supported/enabled");  }  int ktype;  boolean etypeFound=false;  int kvno_found=0;  EncryptionKey key_found=null;  for (int i=0; i < keys.length; i++) {    ktype=keys[i].getEType();    if (EType.isSupported(ktype)) {      Integer kv=keys[i].getKeyVersionNumber();      if (etype == ktype) {        etypeFound=true;        if (versionMatches(kvno,kv)) {          return keys[i];        } else         if (kv > kvno_found) {          key_found=keys[i];          kvno_found=kv;        }      }    }  }  if ((etype == EncryptedData.ETYPE_DES_CBC_CRC || etype == EncryptedData.ETYPE_DES_CBC_MD5)) {    for (int i=0; i < keys.length; i++) {      ktype=keys[i].getEType();      if (ktype == EncryptedData.ETYPE_DES_CBC_CRC || ktype == EncryptedData.ETYPE_DES_CBC_MD5) {        Integer kv=keys[i].getKeyVersionNumber();        etypeFound=true;        if (versionMatches(kvno,kv)) {          return new EncryptionKey(etype,keys[i].getBytes());        } else         if (kv > kvno_found) {          key_found=new EncryptionKey(etype,keys[i].getBytes());          kvno_found=kv;        }      }    }  }  if (etypeFound) {    return key_found;  }  return null;}  }
class C{  final public int off(){  return 0;}  }
class C{  public JSONArray put(Map value){  this.put(new JSONObject(value));  return this;}  }
class C{  public void centerHorizontal(ArrayList<Integer> nodes){  if (m_bNeedsUndoAction) {    addUndoAction(new centerHorizontalAction(nodes));  }  int nMinY=-1;  int nMaxY=-1;  for (int iNode=0; iNode < nodes.size(); iNode++) {    int nY=getPositionY(nodes.get(iNode));    if (nY < nMinY || iNode == 0) {      nMinY=nY;    }    if (nY > nMaxY || iNode == 0) {      nMaxY=nY;    }  }  for (int iNode=0; iNode < nodes.size(); iNode++) {    int nNode=nodes.get(iNode);    m_nPositionY.set(nNode,(nMinY + nMaxY) / 2);  }}  }
class C{  public static boolean intersects(int tx,int ty,int tw,int th,int x,int y,int width,int height){  int rw=width;  int rh=height;  if (rw <= 0 || rh <= 0 || tw <= 0 || th <= 0) {    return false;  }  int rx=x;  int ry=y;  rw+=rx;  rh+=ry;  tw+=tx;  th+=ty;  return ((rw < rx || rw > tx) && (rh < ry || rh > ty) && (tw < tx || tw > rx)&& (th < ty || th > ry));}  }
class C{  public boolean verifySignature(byte[] signature){  contentDigest.doFinal(mDash,mDash.length - hLen - sLen);  try {    byte[] b=cipher.processBlock(signature,0,signature.length);    System.arraycopy(b,0,block,block.length - b.length,b.length);  } catch (  Exception e) {    return false;  }  if (block[block.length - 1] != trailer) {    clearBlock(block);    return false;  }  byte[] dbMask=maskGeneratorFunction1(block,block.length - hLen - 1,hLen,block.length - hLen - 1);  for (int i=0; i != dbMask.length; i++) {    block[i]^=dbMask[i];  }  block[0]&=(0xff >> ((block.length * 8) - emBits));  for (int i=0; i != block.length - hLen - sLen- 2; i++) {    if (block[i] != 0) {      clearBlock(block);      return false;    }  }  if (block[block.length - hLen - sLen- 2] != 0x01) {    clearBlock(block);    return false;  }  System.arraycopy(block,block.length - sLen - hLen- 1,mDash,mDash.length - sLen,sLen);  contentDigest.update(mDash,0,mDash.length);  contentDigest.doFinal(mDash,mDash.length - hLen);  for (int i=block.length - hLen - 1, j=mDash.length - hLen; j != mDash.length; i++, j++) {    if ((block[i] ^ mDash[j]) != 0) {      clearBlock(mDash);      clearBlock(block);      return false;    }  }  clearBlock(mDash);  clearBlock(block);  return true;}  }
class C{  @RequestProcessing(value="/dev/pointtransfer/gen",method=HTTPRequestMethod.GET) public void genInitPointtransferRecords(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final String key=request.getParameter("key");  if (!Symphonys.get("keyOfSymphony").equals(key)) {    return;  }  final JSONObject result=userRepository.get(new Query());  final List<JSONObject> users=CollectionUtils.jsonArrayToList(result.optJSONArray(Keys.RESULTS));  final Transaction transaction=pointtransferRepository.beginTransaction();  try {    for (    final JSONObject user : users) {      final String userId=user.optString(Keys.OBJECT_ID);      final List<Filter> filters=new ArrayList<Filter>();      filters.add(new PropertyFilter(Pointtransfer.FROM_ID,FilterOperator.EQUAL,userId));      filters.add(new PropertyFilter(Pointtransfer.FROM_ID,FilterOperator.EQUAL,userId));      final Query query=new Query().setFilter(new CompositeFilter(CompositeFilterOperator.AND,filters));      final JSONArray records=pointtransferRepository.get(query).optJSONArray(Keys.RESULTS);      int usedPoint=0;      for (int i=0; i < records.length(); i++) {        final int sum=records.getJSONObject(i).optInt(Pointtransfer.SUM);        usedPoint+=sum;      }      user.put(UserExt.USER_USED_POINT,usedPoint);      userRepository.update(userId,user);    }    transaction.commit();  } catch (  final Exception e) {    if (transaction.isActive()) {      transaction.rollback();    }    throw e;  }  response.sendRedirect("/");}  }
class C{  protected static String manglePropertyName(String basename){  int len=basename.length();  if (len == 0) {    return null;  }  StringBuilder sb=null;  for (int i=0; i < len; ++i) {    char upper=basename.charAt(i);    char lower=Character.toLowerCase(upper);    if (upper == lower) {      break;    }    if (sb == null) {      sb=new StringBuilder(basename);    }    sb.setCharAt(i,lower);  }  return (sb == null) ? basename : sb.toString();}  }
class C{  public boolean isFirstRoleAssignment(){  return firstRoleAssignment;}  }
class C{  public static void d(String msg){  log(LEVEL.DEBUG,null,msg,null);}  }
class C{  public X509CRLImpl(byte[] encoding) throws IOException {  this((CertificateList)CertificateList.ASN1.decode(encoding));}  }
class C{  @Override public void afterLast() throws SQLException {  try {    debugCodeCall("afterLast");    checkClosed();    while (nextRow()) {    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public int next(int x){  int n=members.length;  for (int i=0; i < n; ++i) {    if (x < members[i][0]) {      return members[i][0];    } else     if (x < members[i][1]) {      return x + 1;    }  }  return -1;}  }
class C{  public void subscribe() throws WBEMException, Exception {  s_logger.info("Subscribing to indications");  CimFilterMap filterMap=_connection.getIndicationFilterMap();  try {    getHandler();    for (    CimFilterInfo filterInfo : filterMap.getFilters().values()) {      try {        createSubscription(filterInfo);      } catch (      WBEMException e) {        if (e.getID() != WBEMException.CIM_ERR_ALREADY_EXISTS) {          throw e;        }        s_logger.debug("Subscription for filter {} already exists",filterInfo.getName());      }    }  } catch (  WBEMException e) {    if (e.getID() != WBEMException.CIM_ERR_ALREADY_EXISTS) {      throw e;    }    s_logger.debug("Subscription handler already exists.");  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] pointFiles;  String outputHeader=null;  String baseFileHeader=null;  int row, col;  double x, y, z;  double east, west, north, south;  int i, j;  int progress=0;  String delimiter=" ";  boolean firstLineHeader=false;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  double noData=-32768;  WhiteboxRaster.DataType dataType=WhiteboxRaster.DataType.FLOAT;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  firstLineHeader=Boolean.parseBoolean(args[1]);  outputHeader=args[2];  baseFileHeader=args[3];  if (args[4].toLowerCase().contains("double")) {    dataType=WhiteboxRaster.DataType.DOUBLE;  } else   if (args[4].toLowerCase().contains("float")) {    dataType=WhiteboxRaster.DataType.FLOAT;  } else   if (args[4].toLowerCase().contains("int")) {    dataType=WhiteboxRaster.DataType.INTEGER;  }  if ((inputFilesString.length() <= 0) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    pointFiles=inputFilesString.split(";");    int numPointFiles=pointFiles.length;    WhiteboxRaster baseImage=new WhiteboxRaster(baseFileHeader,"r");    double resolutionX=baseImage.getCellSizeX();    double resolutionY=baseImage.getCellSizeY();    noData=baseImage.getNoDataValue();    east=baseImage.getEast();    west=baseImage.getWest();    north=baseImage.getNorth();    south=baseImage.getSouth();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",baseFileHeader,dataType,noData);    for (i=0; i < numPointFiles; i++) {      DataInputStream in=null;      BufferedReader br=null;      try {        FileInputStream fstream=new FileInputStream(pointFiles[i]);        in=new DataInputStream(fstream);        br=new BufferedReader(new InputStreamReader(in));        String line;        String[] str;        j=1;        while ((line=br.readLine()) != null) {          str=line.split(delimiter);          if (str.length <= 1) {            delimiter="\t";            str=line.split(delimiter);            if (str.length <= 1) {              delimiter=" ";              str=line.split(delimiter);              if (str.length <= 1) {                delimiter=",";                str=line.split(delimiter);              }            }          }          if ((j > 1 || !firstLineHeader) && (str.length >= 3)) {            x=Double.parseDouble(str[0]);            y=Double.parseDouble(str[1]);            z=Double.parseDouble(str[2]);            row=(int)(Math.floor((y - south) / resolutionY));            col=(int)(Math.floor((x - west) / resolutionX));            output.setValue(row,col,z);          }          j++;        }        in.close();        br.close();      } catch (      java.io.IOException e) {        myHost.showFeedback("An error has occurred during operation. See log file for details.");        myHost.logException("Error in " + getDescriptiveName(),e);      } finally {        try {          if (in != null || br != null) {            in.close();            br.close();          }        } catch (        java.io.IOException ex) {        }      }    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void writeString(String headerName) throws IOException {  byte[] bytes=headerName.getBytes("UTF-8");  writeInt(bytes.length,PREFIX_8_BITS,0);  out.write(bytes);}  }
class C{  public T caseAnonymous_derivedAttribute_1_(Anonymous_derivedAttribute_1_ object){  return null;}  }
class C{  protected void dockNorth(DockWrapper wrapper,int idx){  dock(north,wrapper,idx);}  }
class C{  @Override public BufferedImage processImage(final BufferedImage image,final int pageNumber,final boolean isPrinting){  BufferedImage newImage=null;  if (isPrinting) {    newImage=new BufferedImage(image.getWidth(),image.getHeight(),BufferedImage.TYPE_BYTE_BINARY);    final Graphics2D newG2bw=newImage.createGraphics();    newG2bw.setPaint(Color.WHITE);    newG2bw.fillRect(0,0,image.getWidth(),image.getHeight());    newG2bw.drawImage(image,0,0,null);  }  return newImage;}  }
class C{  protected void positionText(int w,int h){  int xoff, yoff, justify;  if (xgrav.equals("+")) {    xoff=xpos;    justify=OMText.JUSTIFY_LEFT;  } else {    xoff=w - xpos;    justify=OMText.JUSTIFY_RIGHT;  }  if (ygrav.equals("+")) {    yoff=ypos;  } else {    yoff=h - ypos;  }  text.setX(xoff);  text.setY(yoff);  text.setJustify(justify);}  }
class C{  protected int compare(Instance one,Instance two,InstanceHolder oneH,InstanceHolder twoH){  for (int i=0; i < m_keyIndexesOne.length; i++) {    if (one.isMissing(m_keyIndexesOne[i]) && two.isMissing(m_keyIndexesTwo[i])) {      continue;    }    if (one.isMissing(m_keyIndexesOne[i]) || two.isMissing(m_keyIndexesTwo[i])) {      if (one.isMissing(m_keyIndexesOne[i])) {        return -1;      } else {        return 1;      }    }    if (m_mergedHeader.attribute(m_keyIndexesOne[i]).isNumeric()) {      double v1=one.value(m_keyIndexesOne[i]);      double v2=two.value(m_keyIndexesTwo[i]);      if (v1 != v2) {        return v1 < v2 ? -1 : 1;      }    } else     if (m_mergedHeader.attribute(m_keyIndexesOne[i]).isNominal()) {      String oneS=one.stringValue(m_keyIndexesOne[i]);      String twoS=two.stringValue(m_keyIndexesTwo[i]);      int cmp=oneS.compareTo(twoS);      if (cmp != 0) {        return cmp;      }    } else     if (m_mergedHeader.attribute(m_keyIndexesOne[i]).isString()) {      String attNameOne=m_mergedHeader.attribute(m_keyIndexesOne[i]).name();      String attNameTwo=m_mergedHeader.attribute(m_keyIndexesTwo[i]).name();      String oneS=oneH.m_stringVals == null || oneH.m_stringVals.size() == 0 ? one.stringValue(m_keyIndexesOne[i]) : oneH.m_stringVals.get(attNameOne);      String twoS=twoH.m_stringVals == null || twoH.m_stringVals.size() == 0 ? two.stringValue(m_keyIndexesTwo[i]) : twoH.m_stringVals.get(attNameTwo);      int cmp=oneS.compareTo(twoS);      if (cmp != 0) {        return cmp;      }    }  }  return 0;}  }
class C{  @Override public void processOtherContent(Wrapper<Content> content){  if (parentElement != null) {    parentElement.addContent(content.getContent());  }}  }
class C{  public FJListProcedureTask(FJListProcedureRunner<T,PT> newFJTaskRunner,ProcedureFactory<PT> newProcedureFactory,List<T> list,int index,int sectionSize,boolean isLast){  this.taskRunner=newFJTaskRunner;  this.procedureFactory=newProcedureFactory;  this.list=list;  this.start=index * sectionSize;  this.end=isLast ? this.list.size() - 1 : this.start + sectionSize - 1;}  }
class C{  public void addBookmark(final CCodeBookmark bookmark){  Preconditions.checkNotNull(bookmark,"IE00328: Bookmark argument can not be null");  Preconditions.checkArgument(!m_bookmarks.contains(bookmark),"IE00329: Bookmark can not be added more than once");  m_bookmarks.add(bookmark);  for (  final ICodeBookmarkManagerListener listener : m_listeners) {    try {      listener.addedBookmark(this,bookmark);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }}  }
class C{  public Object read(InputNode node,Object value) throws Exception {  Object result=readElement(node,value);  Label text=group.getText();  if (text != null) {    return readText(node,value);  }  return result;}  }
class C{  protected static int doSet(long seqno,long epoch,String eventId,String sourceId) throws ReplicatorException, InterruptedException {  if (admin.set(datasource,seqno,epoch,eventId,sourceId)) {    String msg="Service \"" + service + "\" datasource \""+ datasource+ "\" position was set to: seqno="+ seqno+ " epoch_number="+ epoch+ " eventid="+ eventId+ " source_id="+ sourceId;    logger.info(msg);    println(msg);    return 0;  } else {    String msg="FAILED to set position of service \"" + service + "\" datasource \""+ datasource+ "\" to: seqno="+ seqno+ " epoch_number="+ epoch+ " eventid="+ eventId+ " source_id="+ sourceId;    printlnerr(msg);    return 7;  }}  }
class C{  public void testFreespeedChangeAbsolute(){  for (  LinkFactory lf : linkFactories(15 * 60,30 * 3600)) {    final Network network=NetworkUtils.createNetwork();    NetworkFactory nf=network.getFactory();    nf.setLinkFactory(lf);    ((NetworkImpl)network).setFactory(nf);    Node node1=NetworkUtils.createAndAddNode(network,Id.create("1",Node.class),new Coord((double)0,(double)0));    Node node2=NetworkUtils.createAndAddNode(network,Id.create("2",Node.class),new Coord((double)100,(double)0));    final Node fromNode=node1;    final Node toNode=node2;    TimeVariantLinkImpl link=(TimeVariantLinkImpl)NetworkUtils.createAndAddLink(network,Id.create("1",Link.class),fromNode,toNode,(double)100,(double)10,(double)3600,(double)1);    assertEquals(10.0,link.getFreespeed(Time.UNDEFINED_TIME),EPSILON);    assertEquals(10.0,NetworkUtils.getFreespeedTravelTime(link,Time.UNDEFINED_TIME),EPSILON);    NetworkChangeEvent change=new NetworkChangeEvent(7 * 3600.0);    change.addLink(link);    change.setFreespeedChange(new ChangeValue(ChangeType.ABSOLUTE_IN_SI_UNITS,20));    link.applyEvent(change);    assertEquals(10.0,link.getFreespeed(Time.UNDEFINED_TIME),EPSILON);    assertEquals(10.0,link.getFreespeed(7 * 3600.0 - 1.0),EPSILON);    assertEquals(10.0,link.getFreespeed(7 * 3600.0 - 0.1),EPSILON);    assertEquals(20.0,link.getFreespeed(7 * 3600.0),EPSILON);    assertEquals(20.0,link.getFreespeed(8 * 3600.0),EPSILON);    assertEquals(10.0,NetworkUtils.getFreespeedTravelTime(link,Time.UNDEFINED_TIME),EPSILON);    assertEquals(10.0,NetworkUtils.getFreespeedTravelTime(link,7 * 3600.0 - 1.0),EPSILON);    assertEquals(10.0,NetworkUtils.getFreespeedTravelTime(link,7 * 3600.0 - 0.1),EPSILON);    assertEquals(5.0,NetworkUtils.getFreespeedTravelTime(link,7 * 3600.0),EPSILON);    assertEquals(5.0,NetworkUtils.getFreespeedTravelTime(link,8 * 3600.0),EPSILON);    assertEquals(5.0,NetworkUtils.getFreespeedTravelTime(link,24 * 3600.0),EPSILON);    assertEquals(5.0,NetworkUtils.getFreespeedTravelTime(link,30 * 3600.0),EPSILON);    assertEquals(5.0,NetworkUtils.getFreespeedTravelTime(link,36 * 3600.0),EPSILON);  }}  }
class C{  private boolean createPaySchedule(){  if (getC_PaymentTerm_ID() == 0)   return false;  MPaymentTerm pt=new MPaymentTerm(getCtx(),getC_PaymentTerm_ID(),null);  log.fine(pt.toString());  return pt.apply(this);}  }
class C{  public LogPanel(WekaTaskMonitor tm,boolean logHidden){  this(tm,logHidden,false,true);}  }
class C{  private Uri createSharingLogUri(List<Integer> providerIds){  HistoryUriBuilder uriBuilder=new HistoryUriBuilder(HistoryLog.CONTENT_URI);  for (  Integer providerId : providerIds) {    uriBuilder.appendProvider(providerId);  }  return uriBuilder.build();}  }
class C{  protected static void storeEventListener(BridgeContext ctx,EventTarget e,String t,EventListener l,boolean c){  ctx.storeEventListener(e,t,l,c);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean matchPasses=getBool(stack);  String technique=getString(stack);  MediaNode node=getMediaNode(stack);  node.appendFiltering(VFSFactory.getInstance().getFilter(technique,matchPasses));  return null;}  }
class C{  public boolean hasTitles(){  return hasRepeatingExtension(Title.class);}  }
class C{  @Override @SuppressWarnings("unchecked") public <T>T unwrap(Class<T> iface) throws SQLException {  if (isWrapperFor(iface)) {    return (T)this;  }  throw DbException.getInvalidValueException("iface",iface);}  }
class C{  public void stop(){  executor.shutdown();  try {    executor.awaitTermination(TERMINATE_DELAY,TimeUnit.SECONDS);  } catch (  Exception e) {    _logger.error("TimeOut occured while waiting for Cleaning thread to end.");    if (!executor.isShutdown()) {      executor.shutdownNow();    }  }}  }
class C{  protected void timeoutLinks(){  List<Link> eraseList=new ArrayList<Link>();  Long curTime=System.currentTimeMillis();  boolean linkChanged=false;  lock.writeLock().lock();  try {    Iterator<Entry<Link,LinkInfo>> it=this.links.entrySet().iterator();    while (it.hasNext()) {      Entry<Link,LinkInfo> entry=it.next();      Link lt=entry.getKey();      LinkInfo info=entry.getValue();      if ((info.getUnicastValidTime() != null) && (info.getUnicastValidTime() + (this.LINK_TIMEOUT * 1000) < curTime)) {        info.setUnicastValidTime(null);        linkChanged=true;      }      if ((info.getMulticastValidTime() != null) && (info.getMulticastValidTime() + (this.LINK_TIMEOUT * 1000) < curTime)) {        info.setMulticastValidTime(null);        linkChanged=true;      }      if (info.getUnicastValidTime() == null && info.getMulticastValidTime() == null) {        eraseList.add(entry.getKey());      } else       if (linkChanged) {        updates.add(new LDUpdate(lt.getSrc(),lt.getSrcPort(),lt.getDst(),lt.getDstPort(),getLinkType(lt,info),UpdateOperation.LINK_UPDATED));      }    }    if ((eraseList.size() > 0) || linkChanged) {      deleteLinks(eraseList,"LLDP timeout");    }  }  finally {    lock.writeLock().unlock();  }}  }
class C{  public void launchQuerySearch(){  launchQuerySearch(KeyEvent.KEYCODE_UNKNOWN,null);}  }
class C{  protected void uninstallListeners(){  if (keyListener != null) {    comboBox.removeKeyListener(keyListener);  }  if (itemListener != null) {    comboBox.removeItemListener(itemListener);  }  if (propertyChangeListener != null) {    comboBox.removePropertyChangeListener(propertyChangeListener);  }  if (focusListener != null) {    comboBox.removeFocusListener(focusListener);  }  if (popupMouseListener != null) {    comboBox.removeMouseListener(popupMouseListener);  }  if (popupMouseMotionListener != null) {    comboBox.removeMouseMotionListener(popupMouseMotionListener);  }  if (popupKeyListener != null) {    comboBox.removeKeyListener(popupKeyListener);  }  if (comboBox.getModel() != null) {    if (listDataListener != null) {      comboBox.getModel().removeListDataListener(listDataListener);    }  }}  }
class C{  public int cospan(final CharSet s,int from){  final int length=length();  if (s.size() == 0)   return from < 0 ? length : (from < length ? length - from : 0);  final char[] a=array;  if (from < 0)   from=0;  int i=from - 1;  while (++i < length)   if (s.contains(a[i]))   break;  return i - from;}  }
class C{  protected AbstractNode adopt(AbstractNode child) throws IllegalStateException {  child.ensureParentless();  child.parent=this;  return child;}  }
class C{  @Deprecated public static Source fromNamedText(CharSequence chars,String name){  CompilerAsserts.neverPartOfCompilation("do not call Source.fromNamedText from compiled code");  Content content=new LiteralSourceImpl(name,chars.toString());  final Source source=new SourceImpl(content);  return source;}  }
class C{  @Override protected void onStart(){  if (null != mDownloaderClientStub) {    mDownloaderClientStub.connect(this);  }  super.onStart();}  }
class C{  public T caseIntLiteral(IntLiteral object){  return null;}  }
class C{  private void addPropertiesToModel(List localProperties,Item parent){  for (Iterator iter=localProperties.iterator(); iter.hasNext(); ) {    Property property=(Property)iter.next();    Item propertyItem=new Item(property,parent);    model.add(propertyItem);    Property[] subProperties=property.getSubProperties();    if (subProperties != null && subProperties.length > 0)     addPropertiesToModel(Arrays.asList(subProperties),propertyItem);  }}  }
class C{  public void reset(){  fTaintMarker=null;  updateView();}  }
class C{  private void formatBounds(final StringBuffer sb,final String label,final PBounds bounds){  sb.append(" ");  sb.append(label);  sb.append("=[");  sb.append(nf.format(bounds.getWidth()));  sb.append("x");  sb.append(nf.format(bounds.getHeight()));  sb.append("@");  sb.append(nf.format(bounds.getX()));  sb.append(",");  sb.append(nf.format(bounds.getY()));  sb.append("]");}  }
class C{  private AnnotationFS newLink(JCas aJCas,int aBegin,int aEnd,AnnotationFeature aFeature,String aLabelValue){  String baseName=StringUtils.substringBeforeLast(getAnnotationTypeName(),CHAIN) + LINK;  Type linkType=CasUtil.getType(aJCas.getCas(),baseName);  AnnotationFS newLink=aJCas.getCas().createAnnotation(linkType,aBegin,aEnd);  BratAjaxCasUtil.setFeature(newLink,aFeature,aLabelValue);  aJCas.getCas().addFsToIndexes(newLink);  return newLink;}  }
class C{  public static int singleNum(int[] A){  Map<Integer,Integer> map=new HashMap<Integer,Integer>();  for (int i=0; i < A.length; i++) {    if (!map.containsKey(A[i]))     map.put(A[i],1); else     map.remove(A[i]);  }  int res=0;  for (  Integer key : map.keySet())   res=key;  return res;}  }
class C{  public NotImplementedException(final String message){  this(message,(String)null);}  }
class C{  public static Map<String,Point> readOneToOne(final InputStream stream) throws IOException {  if (stream == null) {    return Collections.emptyMap();  }  final Map<String,Point> mapping=new HashMap<>();  try (InputStreamReader inputStreamReader=new InputStreamReader(stream);LineNumberReader reader=new LineNumberReader(inputStreamReader)){    String current=reader.readLine();    while (current != null) {      if (current.trim().length() != 0) {        readSingle(current,mapping);      }      current=reader.readLine();    }  }  finally {    stream.close();  }  return mapping;}  }
class C{  private void strip(StringBuilder buffer){  boolean doMore=true;  while (doMore && buffer.length() > 3) {    if ((buffer.length() + substCount > 5) && buffer.substring(buffer.length() - 2,buffer.length()).equals("nd")) {      buffer.delete(buffer.length() - 2,buffer.length());    } else     if ((buffer.length() + substCount > 4) && buffer.substring(buffer.length() - 2,buffer.length()).equals("em")) {      buffer.delete(buffer.length() - 2,buffer.length());    } else     if ((buffer.length() + substCount > 4) && buffer.substring(buffer.length() - 2,buffer.length()).equals("er")) {      buffer.delete(buffer.length() - 2,buffer.length());    } else     if (buffer.charAt(buffer.length() - 1) == 'e') {      buffer.deleteCharAt(buffer.length() - 1);    } else     if (buffer.charAt(buffer.length() - 1) == 's') {      buffer.deleteCharAt(buffer.length() - 1);    } else     if (buffer.charAt(buffer.length() - 1) == 'n') {      buffer.deleteCharAt(buffer.length() - 1);    } else     if (buffer.charAt(buffer.length() - 1) == 't') {      buffer.deleteCharAt(buffer.length() - 1);    } else {      doMore=false;    }  }}  }
class C{  public OAuthRsaSha1Signer(PrivateKey privateKey) throws OAuthException {  setPrivateKey(privateKey);}  }
class C{  public void insertItemFromPlayer(EntityPlayer player,INetworkCache cache,int slot){}  }
class C{  public static final double[] plusEquals(final double[] v1,final double d){  for (int i=0; i < v1.length; i++) {    v1[i]+=d;  }  return v1;}  }
class C{  public static int gcd(int[] a){  if (a.length == 0) {    return 0;  }  int result=a[0];  for (int i=1; i < a.length; i++) {    result=gcd(a[i],result);    if ((result == 1) || (result == 0)) {      return result;    }  }  return result;}  }
class C{  double constraintApproach(Population population){  double feasible=1;  double violation=0.0;  for (int i=0; i < population.size(); i++) {    if (population.get(i).violatesConstraints()) {      violation=violation + sumOfConstraintViolations(population.get(i));    } else {      feasible++;    }  }  return (feasible / population.size()) * (violation / population.size());}  }
class C{  public void removeBindingListener(BindingListener l){  bindingListenerList.remove(BindingListener.class,l);}  }
class C{  public TPS currentRow(final INameFilter filter){  if (log.isDebugEnabled()) {    log.debug("filter=" + filter + ", preFilter="+ this);  }  final LinkedHashMap<String,TPV> m=new LinkedHashMap<String,TPV>();  final Iterator<ITPV> itr=tuples.values().iterator();  while (itr.hasNext()) {    final TPV tpv=(TPV)itr.next();    if (filter != null && !filter.accept(tpv.name)) {      if (log.isDebugEnabled()) {        log.debug("rejecting on filter: " + tpv);      }      continue;    }    if (tpv.value == null) {      final TPV old=m.remove(tpv.name);      if (log.isDebugEnabled() && old != null) {        log.debug("removed binding: " + old);      }    } else {      final TPV old=m.put(tpv.name,tpv);      if (log.isDebugEnabled() && old != null) {        log.debug("overwrote: \nold=" + old + "\nnew="+ tpv);      }    }  }  final TPS tps=new TPS(this.schema,this.writeTime);  for (  Map.Entry<String,TPV> entry : m.entrySet()) {    final String name=entry.getKey();    final TPV tpv=entry.getValue();    tps.tuples.put(new TP(name,tpv.timestamp),tpv);  }  if (log.isDebugEnabled()) {    log.debug("postFilter: " + tps);  }  return tps;}  }
class C{  public ECFieldElement sqrt(){  int[] x1=this.x;  if (Nat256.isZero(x1) || Nat256.isOne(x1)) {    return this;  }  int[] t1=Nat256.create();  int[] t2=Nat256.create();  SecP256R1Field.square(x1,t1);  SecP256R1Field.multiply(t1,x1,t1);  SecP256R1Field.squareN(t1,2,t2);  SecP256R1Field.multiply(t2,t1,t2);  SecP256R1Field.squareN(t2,4,t1);  SecP256R1Field.multiply(t1,t2,t1);  SecP256R1Field.squareN(t1,8,t2);  SecP256R1Field.multiply(t2,t1,t2);  SecP256R1Field.squareN(t2,16,t1);  SecP256R1Field.multiply(t1,t2,t1);  SecP256R1Field.squareN(t1,32,t1);  SecP256R1Field.multiply(t1,x1,t1);  SecP256R1Field.squareN(t1,96,t1);  SecP256R1Field.multiply(t1,x1,t1);  SecP256R1Field.squareN(t1,94,t1);  SecP256R1Field.square(t1,t2);  return Nat256.eq(x1,t2) ? new SecP256R1FieldElement(t1) : null;}  }
class C{  public FileTransfer transferFileToGroupChat(String chatId,Uri file,boolean attachFileIcon) throws RcsPermissionDeniedException, RcsPersistentStorageException, RcsServiceNotAvailableException, RcsGenericException {  return transferFileToGroupChat(chatId,file,Disposition.ATTACH,attachFileIcon);}  }
class C{  private static IMultiPoint[] randomPoints(int n,int d,int scale){  IMultiPoint points[]=new IMultiPoint[n];  for (int i=0; i < n; i++) {    StringBuilder sb=new StringBuilder();    for (int j=0; j < d; j++) {      sb.append(rGen.nextDouble() * scale);      if (j < d - 1) {        sb.append(",");      }    }    points[i]=new Hyperpoint(sb.toString());  }  return points;}  }
class C{  public NoSuchElementException(){}  }
class C{  public ColorLayoutImpl(int numberOfYCoeff,int numberOfCCoeff,BufferedImage image){  this.numCCoeff=getRightCoeffNumber(numberOfCCoeff);  this.numYCoeff=getRightCoeffNumber(numberOfYCoeff);  this.img=image;  imgYSize=image.getHeight();  imgXSize=image.getWidth();  init();}  }
class C{  public Effect basicGetEffect(){  return effect;}  }
class C{  public static int[] triadCensus(final Network network){  int[] census=new int[16];  for (int i=0; i < 16; i++)   census[i]=0;  int n=network.allNodes.numObjs;  if (n < 3)   return census;  Edge[][] adjMatrix=network.getAdjacencyMatrix();  for (int i=0; i < n; i++) {    Edge[] adj_i=adjMatrix[i];    for (int j=i + 1; j < n; j++) {      Edge[] adj_j=adjMatrix[j];      int e_ij=(adj_i[j] == null) ? 0 : 1;      int e_ji=(adj_j[i] == null) ? 0 : 1;      int c_ij;      int m_ij=0;      if ((c_ij=e_ij + e_ji) == 2)       m_ij++;      for (int k=j + 1; k < n; k++) {        int md=m_ij;        int c=c_ij=e_ij + e_ji;        Edge[] adj_k=adjMatrix[k];        int c_ik, c_jk;        int e_ik=(adj_i[k] == null) ? 0 : 1;        int e_jk=(adj_j[k] == null) ? 0 : 1;        int e_ki=(adj_k[i] == null) ? 0 : 1;        int e_kj=(adj_k[j] == null) ? 0 : 1;        if ((c_ik=e_ik + e_ki) == 2)         md++;        if ((c_jk=e_jk + e_kj) == 2)         md++;        c+=c_ik + c_jk;switch (c) {case 0:          census[TRIAD_003]++;        break;case 1:      census[TRIAD_012]++;    break;case 2:  if (md == 1) {    census[TRIAD_102]++;    break;  }int f=(c_ij == 0) ? e_jk + e_ik : (c_ik == 0) ? e_ij + e_kj : e_ji + e_ki;switch (f) {case 0:census[TRIAD_021D]++;break;case 1:census[TRIAD_021C]++;break;case 2:census[TRIAD_021U]++;break;}break;case 3:if (md == 1) {if (c_ij == 2) census[(e_ki + e_ki == 0) ? TRIAD_111U : TRIAD_111D]++; else if (c_ik == 2) census[(e_ji + e_jk == 0) ? TRIAD_111U : TRIAD_111D]++; else census[(e_ij + e_ik == 0) ? TRIAD_111U : TRIAD_111D]++;} else census[(e_ij + e_ik == 1 && e_ji + e_ki == 1 && e_ji + e_jk == 1 && e_ij + e_kj == 1) ? TRIAD_030C : TRIAD_030T]++;break;case 4:if (md == 2) census[TRIAD_201]++; else {int in, out;out=e_ij + e_ik;in=e_ji + e_ki;if (in + out == 2) {switch (out) {case 0:census[TRIAD_120U]++;break;case 1:census[TRIAD_120C]++;break;case 2:census[TRIAD_120D]++;break;}break;}in=e_ij + e_kj;out=e_ji + e_jk;if (in + out == 2) {switch (out) {case 0:census[TRIAD_120U]++;break;case 1:census[TRIAD_120C]++;break;case 2:census[TRIAD_120D]++;break;}break;}in=e_ik + e_jk;out=e_ki + e_kj;if (in + out == 2) {switch (out) {case 0:census[TRIAD_120U]++;break;case 1:census[TRIAD_120C]++;break;case 2:census[TRIAD_120D]++;break;}break;}}break;case 5:census[TRIAD_210]++;break;case 6:census[TRIAD_300]++;break;}}}}return census;}  }
class C{  @NotNull public static List<IdeaPluginDescriptor> loadPlugins(@Nullable String repositoryUrl,@Nullable BuildNumber buildnumber,@Nullable final ProgressIndicator indicator) throws IOException {  boolean forceHttps=repositoryUrl == null && IdeaApplication.isLoaded() && UpdateSettings.getInstance().canUseSecureConnection();  return loadPlugins(repositoryUrl,buildnumber,forceHttps,indicator);}  }
class C{  public RegisterResponseMessage(RegisterResponseMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }}  }
class C{  public static Bitmap drawableToBitmap(Drawable drawable){  int w=drawable.getIntrinsicWidth();  int h=drawable.getIntrinsicHeight();  Config config=drawable.getOpacity() != PixelFormat.OPAQUE ? Config.ARGB_8888 : Config.RGB_565;  Bitmap bitmap=Bitmap.createBitmap(w,h,config);  Canvas canvas=new Canvas(bitmap);  drawable.setBounds(0,0,w,h);  drawable.draw(canvas);  return bitmap;}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public static final String decode(final long[] obfuscated){  final int length=obfuscated.length;  final byte[] encoded=new byte[8 * (length - 1)];  final long seed=obfuscated[0];  final Random prng=new Random(seed);  for (int i=1; i < length; i++) {    final long key=prng.nextLong();    final int off=8 * (i - 1);    long l=obfuscated[i] ^ key;    final int end=Math.min(encoded.length,off + 8);    for (int i2=off; i2 < end; i2++) {      encoded[i2]=(byte)l;      l>>=8;    }  }  final String decoded;  try {    decoded=new String(encoded,"UTF8");  } catch (  UnsupportedEncodingException ex) {    throw new AssertionError(ex);  }  final int i=decoded.indexOf(0);  return i != -1 ? decoded.substring(0,i) : decoded;}  }
class C{  public static <T>int binarySearch(T[] array,int startIndex,int endIndex,T object,Comparator<? super T> comparator){  checkIndexForBinarySearch(array.length,startIndex,endIndex);  if (comparator == null) {    return binarySearch(array,startIndex,endIndex,object);  }  int low=startIndex, mid=-1, high=endIndex - 1, result=0;  while (low <= high) {    mid=(low + high) >>> 1;    if ((result=comparator.compare(array[mid],object)) < 0) {      low=mid + 1;    } else     if (result == 0) {      return mid;    } else {      high=mid - 1;    }  }  if (mid < 0) {    int insertPoint=endIndex;    for (int index=startIndex; index < endIndex; index++) {      if (comparator.compare(object,array[index]) < 0) {        insertPoint=index;      }    }    return -insertPoint - 1;  }  return -mid - (result >= 0 ? 1 : 2);}  }
class C{  public static byte[] decode(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decode(bytes,0,bytes.length);}  }
class C{  protected void callChildVisitors(XSLTVisitor visitor,boolean callAttrs){  if (callAttrs && (null != m_selectPattern))   m_selectPattern.getExpression().callVisitors(m_selectPattern,visitor);  super.callChildVisitors(visitor,callAttrs);}  }
class C{  public DomDriver(final String encoding){  this(encoding,new XmlFriendlyNameCoder());}  }
class C{  public static byte[] decrypt(byte[] encrypted) throws GeneralSecurityException {  SecretKeySpec skeySpec=new SecretKeySpec(Base64.decodeBase64(ENCRYPTION_KEY),"AES");  byte[] decoded=Base64.decodeBase64(encrypted);  Cipher cipher=Cipher.getInstance("AES");  cipher.init(Cipher.DECRYPT_MODE,skeySpec);  return cipher.doFinal(decoded);}  }
class C{  private void ensureMutableMessageList(){  if (!isMessagesListMutable) {    messages=new ArrayList<MType>(messages);    isMessagesListMutable=true;  }}  }
class C{  public static Byte valueOf(String string,int radix) throws NumberFormatException {  return valueOf(parseByte(string,radix));}  }
class C{  public GridOffHeapOutOfMemoryException(long size){  super("Failed to allocate memory: " + size);}  }
class C{  public void addStartOfScopeStatement(Statement s){  getClosestDeclarationContainer().addStartStatement(s);}  }
class C{  public boolean isDrawHighlightArrowEnabled(){  return mDrawHighlightArrow;}  }
class C{  public void onCloseMenu(){  selectedMenuBarItem.setNormalState();  selectedMenuBarItem=null;  lockLayer=null;}  }
class C{  public void calculateDistances(){  distances=new double[dimension][dimension];  for (int i=0; i < dimension; i++) {    for (int j=i + 1; j < dimension; j++) {      distances[i][j]=calculatePairwiseDistance(i,j);      distances[j][i]=distances[i][j];    }    distances[i][i]=0.0;  }  distancesKnown=true;}  }
class C{  public String toString(){  return this.getClass().getName() + "(" + tau+ ")";}  }
class C{  public BigInteger optBigInteger(int index,BigInteger defaultValue){  try {    return this.getBigInteger(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  static <E>void writeMultiset(Multiset<E> multiset,ObjectOutputStream stream) throws IOException {  int entryCount=multiset.entrySet().size();  stream.writeInt(entryCount);  for (  Multiset.Entry<E> entry : multiset.entrySet()) {    stream.writeObject(entry.getElement());    stream.writeInt(entry.getCount());  }}  }
class C{  public static void adjustRowIndicesMin(int[] vix,double[] vmb,BinaryOperator bOp){  if (bOp.fn instanceof GreaterThan) {    setMinIndexInPartition(vix,vmb);  } else   if (bOp.fn instanceof GreaterThanEquals) {    shiftLeft(vix,vmb);  } else   if (bOp.fn instanceof LessThanEquals) {    shiftRight(vix,vmb);  } else   if (bOp.fn instanceof Equals) {    double dFirstValue=vmb[0];    int i=0;    while (i < vmb.length - 1 && dFirstValue == vmb[i + 1])     i++;    if (i < vmb.length - 1)     vix[0]=i + 1; else     vix[0]=0;  } else   if (bOp.fn instanceof NotEquals) {    double dFirstValue=vmb[0];    int i=0;    while (i < vmb.length - 1 && dFirstValue == vmb[i + 1])     i++;    if (i < vmb.length - 1)     vix[0]=i - 1; else     vix[0]=0;  }}  }
class C{  public void testInit_showsSpinner(){  mController.init();  verify(mMockFragmentUi).showSpinner(true);}  }
class C{  public static void startDeviceActivity(Context context,String path,String name,String city){  Intent intent=new Intent(context,UtilityService.class);  intent.setAction(UtilityService.ACTION_START_DEVICE_ACTIVITY);  String extraInfo;  if (Constants.START_ATTRACTION_PATH.equals(path)) {    extraInfo=name;  } else {    extraInfo=name + ", " + city;  }  intent.putExtra(EXTRA_START_ACTIVITY_INFO,extraInfo);  intent.putExtra(EXTRA_START_PATH,path);  context.startService(intent);}  }
class C{  public boolean isAlterDrop(){  return columnsToDrop.size() > 0;}  }
class C{  public static WritableByteChannel create(String filename,String mimeType) throws IOException {  return getFactory(filename).create(filename,mimeType);}  }
class C{  public static void writeBack(final ITranslationEnvironment environment,final long offset,final IOperandTree targetOperand,final String sourceValue,final OperandSize size,final String address,final TranslationResultType targetType,final List<ReilInstruction> instructions) throws IllegalArgumentException, InternalTranslationException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(targetOperand,"Error: Argument targetOperand can't be null");  Preconditions.checkNotNull(sourceValue,"Error: Argument sourceValue can't be null");  Preconditions.checkNotNull(size,"Error: Argument size can't be null");  Preconditions.checkNotNull(targetType,"Error: Argument targetType can't be null");  Preconditions.checkNotNull(instructions,"Error: Argument instructions can't be null");  final OperandSize archSize=environment.getArchitectureSize();  if (targetType == TranslationResultType.REGISTER) {    if (address != null) {      throw new InternalTranslationException("Error: Invalid combination of parameters");    }    final String target=getLeafValue(targetOperand.getRootNode());    if ((size == archSize) || isSegment(target)) {      instructions.add(ReilHelpers.createStr(offset,size,sourceValue,size,target));    } else {      moveAndMask(environment,offset,size,sourceValue,target,instructions);    }  } else   if (targetType == TranslationResultType.MEMORY_ACCESS) {    instructions.add(ReilHelpers.createStm(offset,size,sourceValue,archSize,address));  } else {    throw new InternalTranslationException("Error: Invalid target type");  }}  }
class C{  public static DataStorage newDataStorage(String type) throws IllegalDataStorageTypeException {  DataStorageServiceProvider serviceProvider=DataStorageServiceLoader.getInstance().getStorageProviderByType(type);  if (serviceProvider == null) {    throw new IllegalDataStorageTypeException("data storage provider of type: " + type + " is null");  }  DataStorage dataStorage=serviceProvider.getStorage();  try {    LOG.info("Initializing data storage engine: " + dataStorage);    dataStorage.init();  } catch (  IOException e) {    LOG.error("Failed to initialize data storage engine " + dataStorage,e);    throw new IllegalStateException(e);  }  return dataStorage;}  }
class C{  public Polygon2D flipVertexOrder(){  Collections.reverse(vertices);  return this;}  }
class C{  public HostIdentifier(String scheme,String authority,String path,String query,String fragment) throws URISyntaxException {  uri=new URI(scheme,authority,path,query,fragment);}  }
class C{  public static boolean isZipFile(File file) throws IOException {  if (file.isDirectory()) {    return false;  }  final byte[] bytes=new byte[4];  try (FileInputStream fIn=new FileInputStream(file)){    if (fIn.read(bytes) != bytes.length) {      return false;    }  }   ByteBuffer zipFileHeaderSignature=ByteBuffer.wrap(bytes);  zipFileHeaderSignature.order(ByteOrder.LITTLE_ENDIAN);  return 0x04034b50 == zipFileHeaderSignature.getInt();}  }
class C{  public static boolean[] toBooleanArray(Byte[] array){  boolean[] result=new boolean[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i] > 0;  }  return result;}  }
class C{  public StringBuilder replace(int start,int end,String string){  replace0(start,end,string);  return this;}  }
class C{  static Object invokeMethod(Method method,Object object,Object[] args) throws ReflectError, InvocationTargetException {  if (args == null)   args=new Object[0];  logInvokeMethod("Invoking method (entry): ",method,args);  Object[] tmpArgs=new Object[args.length];  Class[] types=method.getParameterTypes();  try {    for (int i=0; i < args.length; i++)     tmpArgs[i]=Types.castObject(args[i],types[i],Types.ASSIGNMENT);  } catch (  UtilEvalError e) {    throw new InterpreterError("illegal argument type in method invocation: " + e);  }  tmpArgs=Primitive.unwrap(tmpArgs);  logInvokeMethod("Invoking method (after massaging values): ",method,tmpArgs);  try {    Object returnValue=method.invoke(object,tmpArgs);    if (returnValue == null)     returnValue=Primitive.NULL;    Class returnType=method.getReturnType();    return Primitive.wrap(returnValue,returnType);  } catch (  IllegalAccessException e) {    throw new ReflectError("Cannot access method " + StringUtil.methodString(method.getName(),method.getParameterTypes()) + " in '"+ method.getDeclaringClass()+ "' :"+ e);  }}  }
class C{  public WaveWriter(AudioFormat format,Path file) throws IOException {  this(format,file,Integer.MAX_VALUE * 2);}  }
class C{  @SuppressWarnings("unchecked") @Test(dataProvider="methodsWithBigDataStructures") public void methodWithBigData(String methodName){  List<String> parameterTypes=Mockito.mock(List.class);  Mockito.when(parameterTypes.size()).thenReturn(2);  Mockito.when(parameterTypes.get(0)).thenReturn("int");  Mockito.when(rsc.getParameterTypes()).thenReturn(parameterTypes);  Mockito.when(rsc.getTargetMethodName()).thenReturn(methodName);  Object[] parameters=new Object[]{1,"Value"};  Object object=new Object();  preparedStatementParameterHook.beforeBody(0,0,object,parameters,rsc);  preparedStatementParameterHook.firstAfterBody(0,0,object,parameters,null,rsc);  preparedStatementParameterHook.secondAfterBody(coreService,0,0,object,parameters,null,rsc);  String expected="[" + methodName.substring("set".length()) + "]";  Mockito.verify(statementStorage,Mockito.times(1)).addParameter(object,0,expected);  Mockito.verifyNoMoreInteractions(statementStorage);  Mockito.verifyZeroInteractions(coreService);}  }
class C{  protected void updateView(){  if (fInputElement != null && fParentComposite != null) {    showPage(PAGE_VIEWER);    fTreeViewer.setInput(fInputElement);  }}  }
class C{  public CandleSeries(CandleSeries series,int barSize,ZonedDateTime startTime,ZonedDateTime endTime){  super(series.getContract().getSymbol(),IndicatorSeries.CandleSeries,series.getDisplaySeries(),0,series.getSubChart());  this.symbol=series.getContract().getSymbol();  this.contract=series.getContract();  this.barSize=series.getBarSize();  this.startTime=startTime;  this.endTime=endTime;}  }
class C{  public TextEditCopier(TextEdit edit){  super();  fEdit=edit;  fCopies=new HashMap();}  }
class C{  public ConnectionManagerService(){  this(new ConnectionInfo());}  }
class C{  public IElementType advance() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  CharSequence zzBufferL=zzBuffer;  char[] zzBufferArrayL=zzBufferArray;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++)); else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 6:{        return GroovyDocTokenTypes.mGDOC_COMMENT_DATA;      }case 21:    break;case 13:{    return GroovyDocTokenTypes.mGDOC_TAG_VALUE_COMMA;  }case 22:break;case 12:{return GroovyDocTokenTypes.mGDOC_TAG_VALUE_SHARP_TOKEN;}case 23:break;case 16:{yybegin(COMMENT_DATA);return GroovyDocTokenTypes.mGDOC_TAG_VALUE_GT;}case 24:break;case 4:{if (checkAhead('@')) {yybegin(INLINE_TAG_NAME);} else {yybegin(COMMENT_DATA);}return GroovyDocTokenTypes.mGDOC_INLINE_TAG_START;}case 25:break;case 1:{return GroovyDocTokenTypes.mGDOC_COMMENT_BAD_CHARACTER;}case 26:break;case 15:{yybegin(DOC_TAG_VALUE);return GroovyDocTokenTypes.mGDOC_TAG_VALUE_RPAREN;}case 27:break;case 14:{yybegin(DOC_TAG_VALUE_IN_LTGT);return GroovyDocTokenTypes.mGDOC_TAG_VALUE_LT;}case 28:break;case 8:{yybegin(DOC_TAG_VALUE);return TokenType.WHITE_SPACE;}case 29:break;case 9:{yybegin(COMMENT_DATA);return TokenType.WHITE_SPACE;}case 30:break;case 17:{return GroovyDocTokenTypes.mGDOC_COMMENT_END;}case 31:break;case 11:{yybegin(DOC_TAG_VALUE_IN_PAREN);return GroovyDocTokenTypes.mGDOC_TAG_VALUE_LPAREN;}case 32:break;case 3:{return TokenType.WHITE_SPACE;}case 33:break;case 7:{if (checkAhead('<') || checkAhead('\"')) {yybegin(COMMENT_DATA);} else if (checkAhead('\u007b')) {yybegin(COMMENT_DATA);} else {yybegin(DOC_TAG_VALUE);}return TokenType.WHITE_SPACE;}case 34:break;case 19:{yybegin(COMMENT_DATA_START);return GroovyDocTokenTypes.mGDOC_COMMENT_START;}case 35:break;case 20:{yybegin(PARAM_TAG_SPACE);return GroovyDocTokenTypes.mGDOC_TAG_NAME;}case 36:break;case 18:{yybegin(TAG_DOC_SPACE);return GroovyDocTokenTypes.mGDOC_TAG_NAME;}case 37:break;case 5:{yybegin(COMMENT_DATA);return GroovyDocTokenTypes.mGDOC_INLINE_TAG_END;}case 38:break;case 2:{yybegin(COMMENT_DATA);return GroovyDocTokenTypes.mGDOC_COMMENT_DATA;}case 39:break;case 10:{return GroovyDocTokenTypes.mGDOC_TAG_VALUE_TOKEN;}case 40:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;zzDoEOF();return null;} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList employeeList;  Node child;  int length;  String childName;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(2);  employeeList=employeeNode.getChildNodes();  length=(int)employeeList.getLength();  if (equals(6,length)) {    child=employeeList.item(1);  } else {    child=employeeList.item(3);  }  childName=child.getNodeName();  assertEquals("nodeName","name",childName);}  }
class C{  @Override public long skip(long bytes) throws IOException {  if (closed) {    throw new FileUploadException(ItemSkippedException);  }  int av=available();  if (av == 0) {    av=makeAvailable();    if (av == 0) {      return 0;    }  }  long res=Math.min(av,bytes);  head+=res;  return res;}  }
class C{  protected void activateTestPgParameterSetOn(final String param){  PaymentGatewayParameter p=new PaymentGatewayParameterEntity();  p.setLabel(param);  p.setName(param);  p.setPgLabel("testPaymentGatewayLabel");  p.setValue("true");  TestPaymentGatewayImpl.getGatewayConfig().put(p.getLabel(),p);  testPgAlteredParameters.add(param);}  }
class C{  public byte[] readSource(String indexName,final String id){  GetResponse response=elasticsearchClient.prepareGet(indexName,null,id).execute().actionGet();  return response.getSourceAsBytes();}  }
class C{  @PUT @Consumes({MediaType.TEXT_PLAIN,MediaType.TEXT_HTML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_JSON}) public String updateClientImage(@PathParam("entity") final String entityName,@PathParam("entityId") final Long entityId,final String jsonRequestBody){  return addNewClientImage(entityName,entityId,jsonRequestBody);}  }
class C{  public void scale(VisualizationServer<?,?> vv,float amount,Point2D from){  Point2D ivtfrom=vv.getRenderContext().getMultiLayerTransformer().inverseTransform(Layer.VIEW,from);  MutableTransformer modelTransformer=vv.getRenderContext().getMultiLayerTransformer().getTransformer(Layer.LAYOUT);  modelTransformer.scale(amount,amount,ivtfrom);  vv.repaint();}  }
class C{  public GraphIOException(String message){  super(message);}  }
class C{  public boolean isDateTimeAllowed(LocalDateTime value){  LocalDate datePortion=(value == null) ? null : value.toLocalDate();  LocalTime timePortion=(value == null) ? null : value.toLocalTime();  boolean isDateAllowed=datePicker.isDateAllowed(datePortion);  boolean isTimeAllowed=timePicker.isTimeAllowed(timePortion);  return (isDateAllowed && isTimeAllowed);}  }
class C{  @Override public boolean isCancelled(){  return cancelled;}  }
class C{  public GridIterableAdapter(Iterator<T> impl){  A.notNull(impl,"impl");  this.impl=impl instanceof GridIterator ? (GridIterator<T>)impl : new IteratorWrapper<>(impl);}  }
class C{  @Override public void windowActivated(WindowEvent e){}  }
class C{  public HistogramBuilder extendedBounds(Long min,Long max){  extendedBoundsMin=min;  extendedBoundsMax=max;  return this;}  }
class C{  public static Map<UUID,Collection<ClusterNode>> neighbors(Collection<ClusterNode> topSnapshot){  Map<String,Collection<ClusterNode>> macMap=new HashMap<>(topSnapshot.size(),1.0f);  for (  ClusterNode node : topSnapshot) {    String macs=node.attribute(IgniteNodeAttributes.ATTR_MACS);    Collection<ClusterNode> nodes=macMap.get(macs);    if (nodes == null)     macMap.put(macs,nodes=new HashSet<>());    nodes.add(node);  }  Map<UUID,Collection<ClusterNode>> neighbors=new HashMap<>(topSnapshot.size(),1.0f);  for (  Collection<ClusterNode> group : macMap.values())   for (  ClusterNode node : group)   neighbors.put(node.id(),group);  return neighbors;}  }
class C{  public WriteBehindStateWriter(Writer out,FacesContext context,int bufSize){  this.out=out;  this.orig=out;  this.context=context;  this.bufSize=bufSize;  this.buf=new char[bufSize];  CUR_WRITER.set(this);}  }
class C{  public ApiProtocol(ChannelHandlerContext ctx,Object msg){  HttpRequest req=(HttpRequest)msg;  String uri=req.uri();  if (uri.length() <= 0) {    return;  }  logger.info(uri);  this.method=req.method();  parseEndpoint(uri);  setIp(ctx,req);  queryStringHandler(uri);  requestParametersHandler(req);  requestBodyHandler(msg);  if (this.parameters.size() > 0) {    setFields();  }}  }
class C{  private boolean arfNumberChangeRequired(final ContractorAdvanceRequisition entity,final CFinancialYear financialYear){  final String[] arfNum=entity.getAdvanceRequisitionNumber().split("/");  if (arfNum[3].equals(financialYear.getFinYearRange()))   return false;  return true;}  }
class C{  @Override public void close(MessageContext context){}  }
class C{  protected void skipWhitespace(final CharArrayBuffer buffer,final ParserCursor cursor){  int pos=cursor.getPos();  int indexTo=cursor.getUpperBound();  while ((pos < indexTo) && HTTP.isWhitespace(buffer.charAt(pos))) {    pos++;  }  cursor.updatePos(pos);}  }
class C{  void serialize(OutputStream os,List<Integer> tableOrdering) throws IOException {  List<Integer> finalTableOrdering=this.generateTableOrdering(tableOrdering);  List<Header> tableRecords=buildTableHeadersForSerialization(finalTableOrdering);  FontOutputStream fos=new FontOutputStream(os);  this.serializeHeader(fos,tableRecords);  this.serializeTables(fos,tableRecords);}  }
class C{  public RolePreference(String rolename,String key){  super();  Assert.hasText(owner,"Not allowed to create a RolePreference with an empty rolename");  Assert.hasText(key,"Not allowed to create a RolePreference with an empty key");  owner=rolename;  this.key=key;}  }
class C{  public static AnimatableTransformListValue interpolate(AnimatableTransformListValue res,AnimatableTransformListValue value1,AnimatableTransformListValue value2,AnimatableTransformListValue value3,AnimatableTransformListValue to1,AnimatableTransformListValue to2,AnimatableTransformListValue to3,float interpolation1,float interpolation2,float interpolation3,AnimatableTransformListValue accumulation,int multiplier){  int accSize=accumulation == null ? 0 : accumulation.transforms.size();  int newSize=accSize * multiplier + 1;  if (res == null) {    res=new AnimatableTransformListValue(to1.target);    res.transforms=new Vector(newSize);    res.transforms.setSize(newSize);  } else {    if (res.transforms == null) {      res.transforms=new Vector(newSize);      res.transforms.setSize(newSize);    } else     if (res.transforms.size() != newSize) {      res.transforms.setSize(newSize);    }  }  int index=0;  for (int j=0; j < multiplier; j++) {    for (int i=0; i < accSize; i++, index++) {      res.transforms.setElementAt(accumulation.transforms.elementAt(i),index);    }  }  AbstractSVGTransform ft1=(AbstractSVGTransform)value1.transforms.lastElement();  AbstractSVGTransform ft2=(AbstractSVGTransform)value2.transforms.lastElement();  AbstractSVGTransform ft3=(AbstractSVGTransform)value3.transforms.lastElement();  AbstractSVGTransform t=(AbstractSVGTransform)res.transforms.elementAt(index);  if (t == null) {    t=new SVGOMTransform();    res.transforms.setElementAt(t,index);  }  float x, y, r;  r=ft1.getAngle();  x=ft2.getX();  y=ft3.getY();  if (to1 != null) {    AbstractSVGTransform tt1=(AbstractSVGTransform)to1.transforms.lastElement();    AbstractSVGTransform tt2=(AbstractSVGTransform)to2.transforms.lastElement();    AbstractSVGTransform tt3=(AbstractSVGTransform)to3.transforms.lastElement();    r+=interpolation1 * (tt1.getAngle() - r);    x+=interpolation2 * (tt2.getX() - x);    y+=interpolation3 * (tt3.getY() - y);  }  t.setRotate(r,x,y);  res.hasChanged=true;  return res;}  }
class C{  @Override public String containedTypeName(int index){  if (index == 0)   return "E";  return null;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void clear(){  newDocument(getDocType(),getRootNode());}  }
class C{  protected SecretKey engineGenerateKey(){  DESKey desKey=null;  if (this.random == null) {    this.random=SunJCE.getRandom();  }  try {    byte[] key=new byte[DESKeySpec.DES_KEY_LEN];    do {      this.random.nextBytes(key);      setParityBit(key,0);    } while (DESKeySpec.isWeak(key,0));    desKey=new DESKey(key);  } catch (  InvalidKeyException e) {  }  return desKey;}  }
class C{  public static CPluginOutputDialog instance(){  return m_instance;}  }
class C{  private void calculatePath(){  mAboveWavePath.reset();  mBlowWavePath.reset();  if (mWaveLineMulti) {    for (int i=0; i < paths.size(); i++) {      paths.get(i).reset();    }  }  getWaveOffset();  float y;  mAboveWavePath.moveTo(left,bottom);  for (float x=0; x <= mMaxRight; x+=X_SPACE) {    y=(float)(mWaveHeight * Math.sin(omega * x + mAboveOffset + Math.PI) + mWaveHeight);    mAboveWavePath.lineTo(x,y);    if (mWaveLineMulti) {      for (int n=1; n <= paths.size(); n++) {        double yyy=Math.abs(y - mWaveHeight) * Math.cos(2 * 3 * n);        double sin;        if (y > mWaveHeight) {          sin=mWaveHeight + yyy * Math.cos(2 * 3 * n);        } else {          sin=mWaveHeight - yyy * Math.cos(2 * 3 * n);        }        paths.get(n - 1).lineTo(x,(float)sin);      }    }  }  mAboveWavePath.lineTo(right,bottom);  if (mWaveLineMulti) {    for (int n=1; n <= paths.size(); n++) {      paths.get(n - 1).lineTo(right,bottom);    }  }  mBlowWavePath.moveTo(left,bottom);  for (float x=0; x <= mMaxRight; x+=X_SPACE) {    y=(float)(mWaveHeight * Math.sin(omega * x + mAboveOffset) + mWaveHeight);    mBlowWavePath.lineTo(x,y);  }  mBlowWavePath.lineTo(right,bottom);}  }
class C{  public Atan(){  super(Number.class,Number.class);}  }
class C{  public static Map<ComponentWrapper,CC> parseComponentConstraints(Map<ComponentWrapper,String> constrMap){  HashMap<ComponentWrapper,CC> flowConstrMap=new HashMap<ComponentWrapper,CC>();  for (Iterator<Map.Entry<ComponentWrapper,String>> it=constrMap.entrySet().iterator(); it.hasNext(); ) {    Map.Entry<ComponentWrapper,String> entry=it.next();    flowConstrMap.put(entry.getKey(),parseComponentConstraint(entry.getValue()));  }  return flowConstrMap;}  }
class C{  public int writeKey(OutputStream out) throws IOException {  out.write(blockBuffer,keyOffset,klen);  return klen;}  }
class C{  private void closeRemoteResources(){  if (reader != null) {    try {      reader.close();    } catch (    final IOException ignore) {    }    reader=null;  }  if (writer != null) {    writer.close();    writer=null;  }  if (socketOutstream != null) {    try {      socketOutstream.close();    } catch (    final IOException ignore) {    }    socketOutstream=null;  }  if (socketInstream != null) {    try {      socketInstream.close();    } catch (    final IOException ignore) {    }    socketInstream=null;  }  if (socket != null) {    try {      socket.close();    } catch (    final IOException ignore) {    }    socket=null;  }}  }
class C{  static ClassLoader findClassLoader() throws ConfigurationError {  SecuritySupport ss=SecuritySupport.getInstance();  ClassLoader context=ss.getContextClassLoader();  ClassLoader system=ss.getSystemClassLoader();  ClassLoader chain=system;  while (true) {    if (context == chain) {      ClassLoader current=ObjectFactory.class.getClassLoader();      chain=system;      while (true) {        if (current == chain) {          return system;        }        if (chain == null) {          break;        }        chain=ss.getParentClassLoader(chain);      }      return current;    }    if (chain == null) {      break;    }    chain=ss.getParentClassLoader(chain);  }  ;  return context;}  }
class C{  public AESWrapEngine(boolean useReverseDirection){  super(new AESEngine(),useReverseDirection);}  }
class C{  String[] processName(String qName,boolean isAttribute){  String name[];  Hashtable table;  declsOK=false;  if (isAttribute) {    table=attributeNameTable;  } else {    table=elementNameTable;  }  name=(String[])table.get(qName);  if (name != null) {    return name;  }  name=new String[3];  name[2]=qName.intern();  int index=qName.indexOf(':');  if (index == -1) {    if (isAttribute) {      if (qName == "xmlns" && namespaceDeclUris)       name[0]=NSDECL; else       name[0]="";    } else     if (defaultNS == null) {      name[0]="";    } else {      name[0]=defaultNS;    }    name[1]=name[2];  } else {    String prefix=qName.substring(0,index);    String local=qName.substring(index + 1);    String uri;    if ("".equals(prefix)) {      uri=defaultNS;    } else {      uri=(String)prefixTable.get(prefix);    }    if (uri == null || (!isAttribute && "xmlns".equals(prefix))) {      return null;    }    name[0]=uri;    name[1]=local.intern();  }  table.put(name[2],name);  return name;}  }
class C{  @SuppressWarnings("unchecked") public void put(int pos,Object obj){  assert pos >= 0;  assert obj != null;switch (mode) {case MODE_EMPTY:    this.singlePos=pos;  this.data=obj;this.mode=MODE_SINGLE;break;case MODE_SINGLE:Map<Integer,Object> newData=new HashMap(3,1.0f);newData.put(singlePos,data);newData.put(pos,obj);this.singlePos=-1;this.data=newData;this.mode=MODE_MULTIPLE;break;default :assert mode == MODE_MULTIPLE;Map<Integer,Object> data0=(Map<Integer,Object>)data;data0.put(pos,obj);}}  }
class C{  public Property yearOfCentury(){  return new Property(this,getChronology().yearOfCentury());}  }
class C{  public IgnoreResourceException(String message,Throwable cause){  super(message);  this.initCause(cause);}  }
class C{  public static String purtify(String docString){  docString="<pre>" + docString + "</pre>";  docString=insertCommandLinks(docString);  docString=insertBisLinks(docString);  docString=insertFunctionLinks(docString);  return docString;}  }
class C{  public void testUserConfiguresDriverAndRequestsDataSourceWithXaTransactionSupport() throws MalformedURLException {  DataSourceFixture fixture=ConfigurationFixtureFactory.createDriverConfiguredDataSourceWithXaTransactionSupport();  testServletThatIssuesGetConnectionFrom(fixture,"datasource-cmt-local");}  }
class C{  @Override protected String compute(String text,double index){  if (text == null) {    return null;  } else   if (Double.isNaN(index)) {    index=0;  } else   if (index < 0 || index >= text.length()) {    return text;  }  return text.substring(0,Math.min(text.length(),(int)index));}  }
class C{  public static <K,V>ConstantMap<K,V> of(K firstKey,V firstValue,Object... others){  return ConstantMap.of(Order.DEFAULT,firstKey,firstValue,others);}  }
class C{  public QueryCliConfig parse(String[] args) throws ParseException, java.text.ParseException {  CommandLine commandLine=getParser().parse(queryOptions,args);  QueryCliConfig config=new QueryCliConfig();  super.parse(commandLine,config);  if (commandLine.hasOption("query")) {    config.setQuery(commandLine.getOptionValue("query"));  }  return config;}  }
class C{  final public boolean isFullyBuffered(){  return false;}  }
class C{  public static <K,V,M extends Map<K,V>>UnmodifiableMutableMap<K,V> of(M map){  if (map == null) {    throw new IllegalArgumentException("cannot create a UnmodifiableMutableMap for null");  }  return new UnmodifiableMutableMap<>(MapAdapter.adapt(map));}  }
class C{  public AnnotationVisitor visitLocalVariableAnnotation(int typeRef,TypePath typePath,Label[] start,Label[] end,int[] index,String desc,boolean visible){  if (mv != null) {    return mv.visitLocalVariableAnnotation(typeRef,typePath,start,end,index,desc,visible);  }  return null;}  }
class C{  public Collection<MailAddress> match(Mail mail) throws MessagingException {  Object attributeValue=mail.getAttribute(getAttributeName());  if (attributeValue != null && attributeValue.toString().trim().equals(getAttributeValue()))   return mail.getRecipients();  return null;}  }
class C{  public ShardIterator activeInitializingShardsRandomIt(){  return activeInitializingShardsIt(shuffler.nextSeed());}  }
class C{  private static BigInteger smallPrime(int bitLength,int certainty,Random rnd){  int magLen=(bitLength + 31) >>> 5;  int temp[]=new int[magLen];  int highBit=1 << ((bitLength + 31) & 0x1f);  int highMask=(highBit << 1) - 1;  while (true) {    for (int i=0; i < magLen; i++)     temp[i]=rnd.nextInt();    temp[0]=(temp[0] & highMask) | highBit;    if (bitLength > 2)     temp[magLen - 1]|=1;    BigInteger p=new BigInteger(temp,1);    if (bitLength > 6) {      long r=p.remainder(SMALL_PRIME_PRODUCT).longValue();      if ((r % 3 == 0) || (r % 5 == 0) || (r % 7 == 0)|| (r % 11 == 0)|| (r % 13 == 0)|| (r % 17 == 0)|| (r % 19 == 0)|| (r % 23 == 0)|| (r % 29 == 0)|| (r % 31 == 0)|| (r % 37 == 0)|| (r % 41 == 0))       continue;    }    if (bitLength < 4)     return p;    if (p.primeToCertainty(certainty,rnd))     return p;  }}  }
class C{  @Override public boolean dragTo(Selector obj,int destX,int destY,int steps) throws UiObjectNotFoundException, NotImplementedException {  return dragTo(device.findObject(obj.toUiSelector()),destX,destY,steps);}  }
class C{  public DirectedGraph(final List<NodeType> nodes,final List<EdgeType> edges){  Preconditions.checkNotNull(nodes,"Error: Nodes argument can not be null");  Preconditions.checkNotNull(edges,"Error: Edges argument can not be null");  for (  final NodeType node : nodes) {    Preconditions.checkNotNull(node,"Error: Node list contains null-nodes");  }  for (  final EdgeType edge : edges) {    m_outgoingEdges.put(edge.getSource(),edge);    m_incomingEdges.put(edge.getTarget(),edge);  }  m_nodes=nodes;  m_edges=edges;}  }
class C{  public int keyAt(int index){  if (mGarbage) {    gc();  }  return mKeys[index];}  }
class C{  public boolean isSide(String side){  if (Side.BOT.equals(side))   return getSide();  return (getSide() ? false : true);}  }
class C{  public OracleCollection openCollection(String collectionName) throws OracleException {  return (openCollection(collectionName,(CollectionDescriptor)null));}  }
class C{  @Override public void invokePostConstruct(Object managedBean) throws InjectionProviderException {}  }
class C{  public PhotoModule(AppController app){  super(app);  mGcamModeIndex=app.getAndroidContext().getResources().getInteger(R.integer.camera_mode_gcam);}  }
class C{  @Override public boolean isEncodingAlpha(){  return this.encodingAlpha;}  }
class C{  public static double content(DelaunayVertex[] simplex){  DelaunayVertex[] matrix=new DelaunayVertex[simplex.length];  for (int i=0; i < matrix.length; i++) {    matrix[i]=simplex[i].extend(1);  }  int fact=1;  for (int i=1; i < matrix.length; i++) {    fact=fact * i;  }  return determinant(matrix) / fact;}  }
class C{  public static XtremIOTag isTagAvailableInArray(XtremIOClient client,String tagName,String tagEntityType,String clusterName){  XtremIOTag tag=null;  try {    tag=client.getTagDetails(tagName,tagEntityType,clusterName);  } catch (  Exception e) {    _log.info("Tag {} not available in Array.",tagName);  }  return tag;}  }
class C{  public void notifyChange(){  executeEvent();}  }
class C{  public void write(ByteCodeWriter out) throws IOException {  out.writeUTF8Const(getName());  TempOutputStream ts=new TempOutputStream();  ByteCodeWriter o2=new ByteCodeWriter(ts,out.getJavaClass());  o2.writeShort(_maxStack);  o2.writeShort(_maxLocals);  o2.writeInt(_code.length);  o2.write(_code,0,_code.length);  o2.writeShort(_exceptions.size());  for (int i=0; i < _exceptions.size(); i++) {    ExceptionItem exn=_exceptions.get(i);    o2.writeShort(exn.getStart());    o2.writeShort(exn.getEnd());    o2.writeShort(exn.getHandler());    o2.writeShort(exn.getType());  }  o2.writeShort(_attributes.size());  for (int i=0; i < _attributes.size(); i++) {    Attribute attr=_attributes.get(i);    attr.write(o2);  }  out.writeInt(ts.getLength());  TempBuffer ptr=ts.getHead();  for (; ptr != null; ptr=ptr.next())   out.write(ptr.buffer(),0,ptr.length());  ts.destroy();}  }
class C{  public void addToken(Segment segment,int start,int end,int tokenType,int startOffset){switch (tokenType) {case Token.IDENTIFIER:    int value=wordsToHighlight.get(segment,start,end);  if (value != -1)   tokenType=value;break;}super.addToken(segment,start,end,tokenType,startOffset);}  }
class C{  public Composer bottomBase(float bottomBase){  this.mBottomBase=bottomBase;  return this;}  }
class C{  private static boolean isMatchingFormat(String formatName,String fileExtension){  if (formatName == null || fileExtension == null) {    return false;  }  ImageWriter iw;  try {    iw=ImageIO.getImageWritersByFormatName(formatName).next();  } catch (  NoSuchElementException e) {    return false;  }  String[] suffixes=iw.getOriginatingProvider().getFileSuffixes();  for (  String suffix : suffixes) {    if (fileExtension.equalsIgnoreCase(suffix)) {      return true;    }  }  return false;}  }
class C{  public Color color(){  return color(255,255,255);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("ProductCost[");  sb.append("M_Product_ID=").append(m_M_Product_ID).append(",M_AttributeSetInstance_ID").append(m_M_AttributeSetInstance_ID).append(",Qty=").append(m_qty).append("]");  return sb.toString();}  }
class C{  public static MatchesPredicate matches(Property<String> property,Variable variable){  return new MatchesPredicate(property(property),variable);}  }
class C{  public JSONArray put(Collection<?> value){  this.put(new JSONArray(value));  return this;}  }
class C{  public Builder useExpiredDataIfLoaderNotAvailable(boolean useExpiredDataIfLoaderNotAvailable){  this.useExpiredDataIfLoaderNotAvailable=useExpiredDataIfLoaderNotAvailable;  return this;}  }
class C{  public static String unicode2html(final String text,final boolean amp){  return unicode2html(text,amp,true);}  }
class C{  public EditSmellSourceAction(final OdorWorldPanel component,OdorWorldEntity entity){  super("Edit smell source...");  this.entity=entity;  if (component == null) {    throw new IllegalArgumentException("Desktop component must not be null");  }  this.component=component;  putValue(SMALL_ICON,ResourceManager.getImageIcon("Prefs.png"));  putValue(SHORT_DESCRIPTION,"View / Edit smell stimulus...");}  }
class C{  public Collection<Set<V>> cluster(int num_clusters){  return cluster_internal(null,num_clusters);}  }
class C{  @Override public synchronized String toString(){  Properties allProperties=new Properties();  allProperties.putAll(this);  for (  Property property : Property.values()) {    allProperties.putIfAbsent(property.key(),property.defaultValue());  }  StringBuilder sb=new StringBuilder();  sb.append("Using the following configured values:\n");  Pattern pattern=Pattern.compile("pwd|secret|password|passwd|token");  Set<String> names=new TreeSet<>(allProperties.stringPropertyNames());  names.stream().forEach(null);  return sb.toString();}  }
class C{  private void createJournalEntriesForAccruals(final LoanDTO loanDTO,final LoanTransactionDTO loanTransactionDTO,final Office office){  final Long loanProductId=loanDTO.getLoanProductId();  final Long loanId=loanDTO.getLoanId();  final String currencyCode=loanDTO.getCurrencyCode();  final String transactionId=loanTransactionDTO.getTransactionId();  final Date transactionDate=loanTransactionDTO.getTransactionDate();  final BigDecimal interestAmount=loanTransactionDTO.getInterest();  final BigDecimal feesAmount=loanTransactionDTO.getFees();  final BigDecimal penaltiesAmount=loanTransactionDTO.getPenalties();  final boolean isReversed=loanTransactionDTO.isReversed();  final Long paymentTypeId=loanTransactionDTO.getPaymentTypeId();  if (interestAmount != null && !(interestAmount.compareTo(BigDecimal.ZERO) == 0)) {    this.helper.createAccrualBasedJournalEntriesAndReversalsForLoan(office,currencyCode,ACCRUAL_ACCOUNTS_FOR_LOAN.INTEREST_RECEIVABLE.getValue(),ACCRUAL_ACCOUNTS_FOR_LOAN.INTEREST_ON_LOANS.getValue(),loanProductId,paymentTypeId,loanId,transactionId,transactionDate,interestAmount,isReversed);  }  if (feesAmount != null && !(feesAmount.compareTo(BigDecimal.ZERO) == 0)) {    this.helper.createAccrualBasedJournalEntriesAndReversalsForLoanCharges(office,currencyCode,ACCRUAL_ACCOUNTS_FOR_LOAN.FEES_RECEIVABLE.getValue(),ACCRUAL_ACCOUNTS_FOR_LOAN.INCOME_FROM_FEES.getValue(),loanProductId,loanId,transactionId,transactionDate,feesAmount,isReversed,loanTransactionDTO.getFeePayments());  }  if (penaltiesAmount != null && !(penaltiesAmount.compareTo(BigDecimal.ZERO) == 0)) {    this.helper.createAccrualBasedJournalEntriesAndReversalsForLoanCharges(office,currencyCode,ACCRUAL_ACCOUNTS_FOR_LOAN.PENALTIES_RECEIVABLE.getValue(),ACCRUAL_ACCOUNTS_FOR_LOAN.INCOME_FROM_PENALTIES.getValue(),loanProductId,loanId,transactionId,transactionDate,penaltiesAmount,isReversed,loanTransactionDTO.getPenaltyPayments());  }}  }
class C{  public static int readS16bit(byte[] code,int index){  return (code[index] << 8) | (code[index + 1] & 0xff);}  }
class C{  protected void checkNegativeSpiProperty(IgniteSpi spi,String propName,@Nullable Object val) throws Exception {  checkNegativeSpiProperty(spi,propName,val,true);}  }
class C{  public PartitionAttributesImpl(){}  }
class C{  private Element createElement(String name,String ns){  return document.createElementNS(ns,name);}  }
class C{  public static void removeCachedTeXFormula(Object o) throws ParseException {  if (o != null && o instanceof CachedTeXFormula) {    cache.remove((CachedTeXFormula)o);  }}  }
class C{  public static Response createPermissionErrorResponse(char errorCode,String reasonPhrase){  Response createPermissionErrorResponse=new Response();  createPermissionErrorResponse.setMessageType(Message.CREATEPERMISSION_ERROR_RESPONSE);  ErrorCodeAttribute errorCodeAttribute=AttributeFactory.createErrorCodeAttribute(errorCode,reasonPhrase);  createPermissionErrorResponse.putAttribute(errorCodeAttribute);  return createPermissionErrorResponse;}  }
class C{  public NeighbourNodeData(int sampleIndex,double[] norms,double distance){  super();  this.norms=norms;  this.sampleIndex=sampleIndex;  this.distance=distance;}  }
class C{  public DagScorer(ICovarianceMatrix covMatrix){  if (covMatrix == null) {    throw new NullPointerException("CovarianceMatrix must not be null.");  }  this.variables=covMatrix.getVariables();  this.covMatrix=covMatrix;  int m=this.getVariables().size();  this.edgeCoef=new TetradMatrix(m,m);  this.errorCovar=new TetradMatrix(m,m);  this.sampleCovar=covMatrix.getMatrix();}  }
class C{  public String maxDepthTipText(){  return "The maximum depth of the tree, 0 for unlimited.";}  }
class C{  public BurlapRemote(){}  }
class C{  public static OutputAnalyzer executeTestJvm(String... cmds) throws Throwable {  ProcessBuilder pb=createJavaProcessBuilder(Utils.addTestJavaOpts(cmds));  return executeProcess(pb);}  }
class C{  public static void addListener(final DiagnosticListener listener){  if (listener != null) {    LISTENERS.add(listener);  }}  }
class C{  public static void extractDimensionsAndMeasuresFromExpression(List<CustomAggregateExpression> expressions,List<CarbonDimension> dims,List<CarbonMeasure> msrs){  for (  CustomAggregateExpression expression : expressions) {    List<CarbonColumn> dimsFromExpr=expression.getReferredColumns();    for (    CarbonColumn dimFromExpr : dimsFromExpr) {      if (!dimFromExpr.isDimesion()) {        msrs.add((CarbonMeasure)dimFromExpr);      } else {        dims.add((CarbonDimension)dimFromExpr);      }    }  }}  }
class C{  public int size(){  return m_firstFree;}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"HomeChannelDB\" ("+ "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ,"+ "\"CHANNLE_ID\" TEXT,"+ "\"IS_USE\" TEXT,"+ "\"NAME\" TEXT,"+ "\"PIC\" TEXT,"+ "\"SNAME\" TEXT);");  db.execSQL("CREATE INDEX " + constraint + "IDX_HomeChannelDB_ID ON HomeChannelDB"+ " (\"ID\");");}  }
class C{  public boolean hasSecurityException(){  return hasSecurityException;}  }
class C{  protected int isShapeInsideBBox(final GeoShape path){  final GeoPoint[] pathPoints=path.getEdgePoints();  boolean foundOutside=false;  boolean foundInside=false;  for (  GeoPoint p : pathPoints) {    if (isWithin(p)) {      foundInside=true;    } else {      foundOutside=true;    }    if (foundInside && foundOutside) {      return SOME_INSIDE;    }  }  if (!foundInside && !foundOutside)   return NONE_INSIDE;  if (foundInside && !foundOutside)   return ALL_INSIDE;  if (foundOutside && !foundInside)   return NONE_INSIDE;  return SOME_INSIDE;}  }
class C{  public ServerBartender owner(){  for (int i=0; i < _owners.length; i++) {    ServerBartender serverBar=server(i);    if (serverBar != null && serverBar.isUp()) {      return serverBar;    }  }  return null;}  }
class C{  public static final Element encodeToElement(Document doc,String localName,byte[] bytes){  Element el=XMLUtils.createElementInSignatureSpace(doc,localName);  Text text=doc.createTextNode(encode(bytes));  el.appendChild(text);  return el;}  }
class C{  @RequestMapping(value="/register",method=RequestMethod.POST,produces=MediaType.TEXT_PLAIN_VALUE) @Timed public ResponseEntity<?> registerAccount(@Valid @RequestBody UserDTO userDTO,HttpServletRequest request){  return userRepository.findOneByLogin(userDTO.getLogin()).map(null).orElseGet(null);}  }
class C{  public <T>Collection<T> load(File dir,Class<T> type){  Set<T> logImporters=new HashSet<>();  if (!dir.exists()) {    return new ArrayList<>();  }  File[] files=dir.listFiles(null);  logImporters.addAll(loadFromDir(dir,type));  for (  File file : files) {    logImporters.addAll(loadFromJar(file,type));  }  return logImporters;}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);  builder.addAttribute(YOMI);}  }
class C{  public JonasDeploymentPlanTest(String testName,EnvironmentTestData testData) throws Exception {  super(testName,testData);}  }
class C{  public <T>Collection<T> speciesNew(Collection<?> collection){  if (collection instanceof MutableCollection) {    return ((MutableCollection<T>)collection).newEmpty();  }  if (collection instanceof Proxy) {    return DefaultSpeciesNewStrategy.createNewInstanceForCollectionType(collection);  }  if (ReflectionHelper.hasDefaultConstructor(collection.getClass())) {    return (Collection<T>)ReflectionHelper.newInstance(collection.getClass());  }  return DefaultSpeciesNewStrategy.createNewInstanceForCollectionType(collection);}  }
class C{  public void putDWord(int val) throws ArrayIndexOutOfBoundsException {  put(val,4);}  }
class C{  public Observable<String> exerciseHello(){  return Observable.just("Hello World!");}  }
class C{  public StandardAnalyzer(Reader stopwords) throws IOException {  this(loadStopwordSet(stopwords));}  }
class C{  public void toggle(){  mSlidingMenu.toggle();}  }
class C{  public boolean add(char[] text){  return map.put(text,PLACEHOLDER) == null;}  }
class C{  private RegExp expandMacro(String name,RegExp definition) throws MacroException {switch (definition.type) {case sym.BAR:case sym.CONCAT:    RegExp2 binary=(RegExp2)definition;  binary.r1=expandMacro(name,binary.r1);binary.r2=expandMacro(name,binary.r2);return definition;case sym.STAR:case sym.PLUS:case sym.QUESTION:case sym.BANG:case sym.TILDE:RegExp1 unary=(RegExp1)definition;unary.content=expandMacro(name,(RegExp)unary.content);return definition;case sym.MACROUSE:String usename=(String)((RegExp1)definition).content;if (name.equals(usename)) throw new MacroException(ErrorMessages.get(ErrorMessages.MACRO_CYCLE,name));RegExp usedef=getDefinition(usename);if (usedef == null) throw new MacroException(ErrorMessages.get(ErrorMessages.MACRO_DEF_MISSING,usename,name));markUsed(usename);return expandMacro(name,usedef);case sym.STRING:case sym.STRING_I:case sym.CHAR:case sym.CHAR_I:case sym.CCLASS:case sym.CCLASSNOT:return definition;default :throw new MacroException("unknown expression type " + definition.type + " in macro expansion");}}  }
class C{  public IComment editComment(final IComment comment,final String newComment) throws com.google.security.zynamics.binnavi.API.disassembly.CouldntSaveDataException {  try {    return m_node.editComment(comment,newComment);  } catch (  final CouldntSaveDataException exception) {    throw new com.google.security.zynamics.binnavi.API.disassembly.CouldntSaveDataException(exception);  }}  }
class C{  public static byte[] readBytes(ByteBuffer buffer,int size){  byte[] bytes=new byte[size];  buffer.get(bytes);  return bytes;}  }
class C{  public boolean isPublic(){  return Modifier.isPublic(_class.getModifiers());}  }
class C{  Object convertToDefaultObject(Value v){  Object o;switch (v.getType()) {case Value.CLOB:{      int id=getNextId(TraceObject.CLOB);      o=new JdbcClob(this,v,id);      break;    }case Value.BLOB:{    int id=getNextId(TraceObject.BLOB);    o=new JdbcBlob(this,v,id);    break;  }case Value.JAVA_OBJECT:if (SysProperties.serializeJavaObject) {  o=JdbcUtils.deserialize(v.getBytesNoCopy(),session.getDataHandler());  break;}default :o=v.getObject();}return o;}  }
class C{  private static int parseInt(String str,int defaultValue){  if (str == null)   return defaultValue;  return Integer.parseInt(str);}  }
class C{  private void drawX(Canvas canvas,Paint paint,float x,float y){  canvas.drawLine(x - size,y - size,x + size,y + size,paint);  canvas.drawLine(x + size,y - size,x - size,y + size,paint);}  }
class C{  protected boolean checkMethodReferenceAsOverride(MemberReferenceTree memberReferenceTree,Void p){  Pair<AnnotatedDeclaredType,AnnotatedExecutableType> result=atypeFactory.getFnInterfaceFromTree(memberReferenceTree);  AnnotatedDeclaredType overriddenType=result.first;  AnnotatedExecutableType overriddenMethodType=result.second;  AnnotatedTypeMirror overridingType=atypeFactory.getAnnotatedType(memberReferenceTree.getQualifierExpression());  ExecutableElement overridingElement=(ExecutableElement)InternalUtils.symbol(memberReferenceTree);  AnnotatedExecutableType overridingMethodType=atypeFactory.methodFromUse(memberReferenceTree,overridingElement,overridingType).first;  if (checkMethodReferenceInference(memberReferenceTree,overridingMethodType,overriddenMethodType,overridingType)) {    return true;  }  if (overridingMethodType.getTypeVariables().isEmpty() && !overriddenMethodType.getTypeVariables().isEmpty()) {    overriddenMethodType=overriddenMethodType.getErased();  }  QualifierPolymorphism poly=new QualifierPolymorphism(atypeFactory.getProcessingEnv(),atypeFactory);  poly.annotate(overriddenMethodType,overridingMethodType);  AnnotatedTypeMirror overridingReturnType;  if (overridingElement.getKind() == ElementKind.CONSTRUCTOR) {    if (overridingType.getKind() == TypeKind.ARRAY) {      overridingReturnType=overridingType;    } else {      overridingReturnType=atypeFactory.getResultingTypeOfConstructorMemberReference(memberReferenceTree,overridingMethodType);    }  } else {    overridingReturnType=overridingMethodType.getReturnType();  }  AnnotatedTypeMirror overriddenReturnType=overriddenMethodType.getReturnType();  if (overriddenReturnType.getKind() == TypeKind.VOID) {    overriddenReturnType=overridingReturnType;  }  OverrideChecker overrideChecker=new OverrideChecker(memberReferenceTree,overridingMethodType,overridingType,overridingReturnType,overriddenMethodType,overriddenType,overriddenReturnType);  return overrideChecker.checkOverride();}  }
class C{  public long compress(String contents,int level) throws IOException {  final ByteArrayOutputStream bos=new ByteArrayOutputStream();  final OutputStream out=new AdjustableGZIPOutputStream(bos,1024,level);  out.write(contents.getBytes());  out.flush();  out.close();  final byte[] bytes=bos.toByteArray();  final long size=bos.size();  final InputStream in=new WorkingGzipInputStream(new ByteArrayInputStream(bytes));  for (int i=0; i < contents.length(); i++) {    assertEquals(contents.charAt(i),in.read());  }  assertEquals(-1,in.read());  return size;}  }
class C{  public double gammaForward(){  final double temp=stdDev * forward;  final double DalphaDforward=dAlpha_dD1 / temp;  final double DbetaDforward=dBeta_dD2 / temp;  final double D2alphaDforward2=-DalphaDforward / forward * (1 + D1 / stdDev);  final double D2betaDforward2=-DbetaDforward / forward * (1 + D2 / stdDev);  final double temp2=D2alphaDforward2 * forward + 2.0 * DalphaDforward + D2betaDforward2 * x;  return discount * temp2;}  }
class C{  static public void main(String[] argv){  try {    BayesNet b=new BayesNet();    b.setSearchAlgorithm(new ICSSearchAlgorithm());    Instances instances=new Instances(new FileReader("C:\\eclipse\\workspace\\weka\\data\\contact-lenses.arff"));    instances.setClassIndex(instances.numAttributes() - 1);    b.buildClassifier(instances);    System.out.println(b.toString());  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public Boolean isReservationEnabled(){  return reservationEnabled;}  }
class C{  public ToDoubleFunction<U> similarity(U u1){  return null;}  }
class C{  public void printLenString(String v) throws IOException {  if (SIZE < _offset + 16)   flushBuffer();  if (v == null) {    _buffer[_offset++]=(byte)(0);    _buffer[_offset++]=(byte)(0);  } else {    int len=v.length();    _buffer[_offset++]=(byte)(len >> 8);    _buffer[_offset++]=(byte)(len);    printString(v,0,len);  }}  }
class C{  private static float spacing(MotionEvent event){  float x=event.getX(0) - event.getX(1);  float y=event.getY(0) - event.getY(1);  return (float)Math.sqrt(x * x + y * y);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();}  }
class C{  @SuppressWarnings("unchecked") public synchronized E elementAt(int location){  if (location < elementCount) {    return (E)elementData[location];  }  throw arrayIndexOutOfBoundsException(location,elementCount);}  }
class C{  private double psfunc3(double x,double t1,double t2,int dim){  dim=dim + 1;  double xy=4 * (x - 0.5);  if (lType == 31) {    double rate=dim / (double)numberOfVariables;    return xy - 4 * (t1 * t1 * rate + t2 * (1.0 - rate)) + 2;  } else   if (lType == 32) {    double theta=2 * Math.PI * t1 + dim * Math.PI / numberOfVariables;    return xy - 2 * t2 * Math.sin(theta);  } else {    throw new IllegalStateException();  }}  }
class C{  protected void buscarExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  buscarCodeLogic(mapping,form,request,response);}  }
class C{  public SanityDataTable(RawPageSpace rps,int logSize){  super(rps,logSize,Extent.fromIntSignExtend(BYTES_IN_WORD));}  }
class C{  private void calibratingCurrentElement(long difference,float isig,byte[] readData,int index,MedtronicSensorRecord record,int num,Date currentTime){  boolean calibrated=false;  if (isCalibrating) {    if (num > 0) {      calculateCalibration(difference,isig,readData[index]);      if (calibrationFactor > 0) {        if (!isCalibrating) {          if (calibrationStatus != MedtronicConstants.WITHOUT_ANY_CALIBRATION && calibrationStatus != MedtronicConstants.LAST_CALIBRATION_FAILED_USING_PREVIOUS && calibrationStatus != MedtronicConstants.CALIBRATION_MORE_THAN_12H_OLD) {            record.setBGValue(((int)lastGlucometerValue) + "");            record.setUnfilteredGlucose(lastGlucometerValue);            record.calibrationFactor=calibrationFactor;            record.isCalibrating=false;            record.calibrationStatus=calibrationStatus;            lastCalibrationDate=currentTime.getTime();            SharedPreferences.Editor editor=settings.edit();            log.debug("change lastCalibrationDate");            editor.putLong("lastCalibrationDate",lastCalibrationDate);            editor.commit();            calibrated=true;          }        }      }    }  }  if (calibrationFactor > 0 && !calibrated) {    List<Record> auxList=null;synchronized (lastRecordsListLock) {      auxList=lastRecordsInMemory.getListFromTail(2);    }    if (calibrationStatus != MedtronicConstants.WITHOUT_ANY_CALIBRATION) {      record.setUnfilteredGlucose(isig * calibrationFactor);      record.setBGValue((applyFilterToRecord(record,auxList)) + "");      record.isCalibrating=false;      record.calibrationFactor=calibrationFactor;      record.calibrationStatus=calibrationStatus;    } else {      record.setUnfilteredGlucose(isig * calibrationFactor);      record.setBGValue((applyFilterToRecord(record,auxList)) + "");      record.isCalibrating=false;      record.calibrationFactor=calibrationFactor;      record.calibrationStatus=MedtronicConstants.LAST_CALIBRATION_FAILED_USING_PREVIOUS;    }  }  calculateDate(record,currentTime,0);  previousRecord=record;}  }
class C{  public boolean accept(Node node){  return pseudoFunction.match(node,parsedExpression);}  }
class C{  public Rendon2(){  super(2,2);}  }
class C{  public static void buildCoffeeTable(Connection conn){  try {    Statement stmt=conn.createStatement();    stmt.execute("CREATE TABLE Coffee (" + "Description CHAR(25), " + "ProdNum CHAR(10) NOT NULL PRIMARY KEY, "+ "Price DOUBLE "+ ")");    stmt.execute("INSERT INTO Coffee VALUES ( " + "'Bolivian Dark', " + "'14-001', "+ "8.95 )");    stmt.execute("INSERT INTO Coffee VALUES ( " + "'Bolivian Medium', " + "'14-002', "+ "8.95 )");    stmt.execute("INSERT INTO Coffee VALUES ( " + "'Brazilian Dark', " + "'15-001', "+ "7.95 )");    stmt.execute("INSERT INTO Coffee VALUES ( " + "'Brazilian Medium', " + "'15-002', "+ "7.95 )");    stmt.execute("INSERT INTO Coffee VALUES ( " + "'Brazilian Decaf', " + "'15-003', "+ "8.55 )");    stmt.execute("INSERT INTO Coffee VALUES ( " + "'Central American Dark', " + "'16-001', "+ "9.95 )");    stmt.execute("INSERT INTO Coffee VALUES ( " + "'Central American Medium', " + "'16-002', "+ "9.95 )");    stmt.execute("INSERT INTO Coffee VALUES ( " + "'Sumatra Dark', " + "'17-001', "+ "7.95 )");    stmt.execute("INSERT INTO Coffee VALUES ( " + "'Sumatra Decaf', " + "'17-002', "+ "8.95 )");    stmt.execute("INSERT INTO Coffee VALUES ( " + "'Sumatra Medium', " + "'17-003', "+ "7.95 )");    stmt.execute("INSERT INTO Coffee VALUES ( " + "'Sumatra Organic Dark', " + "'17-004', "+ "11.95 )");    stmt.execute("INSERT INTO Coffee VALUES ( " + "'Kona Medium', " + "'18-001', "+ "18.45 )");    stmt.execute("INSERT INTO Coffee VALUES ( " + "'Kona Dark', " + "'18-002', "+ "18.45 )");    stmt.execute("INSERT INTO Coffee VALUES ( " + "'French Roast Dark', " + "'19-001', "+ "9.65 )");    stmt.execute("INSERT INTO Coffee VALUES ( " + "'Galapagos Medium', " + "'20-001', "+ "6.85 )");    stmt.execute("INSERT INTO Coffee VALUES ( " + "'Guatemalan Dark', " + "'21-001', "+ "9.95 )");    stmt.execute("INSERT INTO Coffee VALUES ( " + "'Guatemalan Decaf', " + "'21-002', "+ "10.45 )");    stmt.execute("INSERT INTO Coffee VALUES ( " + "'Guatemalan Medium', " + "'21-003', "+ "9.95 )");  } catch (  SQLException ex) {    System.out.println("ERROR: " + ex.getMessage());  }}  }
class C{  @Override public boolean canUpdate(){  return block instanceof Updater;}  }
class C{  public static S2LatLngRect fromEdge(S2Point a,S2Point b){  S2LatLngRect r=fromPointPair(new S2LatLng(a),new S2LatLng(b));  S2Point ab=S2.robustCrossProd(a,b);  S2Point dir=S2Point.crossProd(ab,new S2Point(0,0,1));  double da=dir.dotProd(a);  double db=dir.dotProd(b);  if (da * db >= 0) {    return r;  }  double absLat=Math.acos(Math.abs(ab.z / ab.norm()));  if (da < 0) {    return new S2LatLngRect(new R1Interval(r.lat().lo(),absLat),r.lng());  } else {    return new S2LatLngRect(new R1Interval(-absLat,r.lat().hi()),r.lng());  }}  }
class C{  public Wine runBackground(File executableToRun) throws ScriptFailureException {  runBackground(executableToRun,(List<String>)null,null);  return this;}  }
class C{  public InstantiationError(){  super();}  }
class C{  public void applyTheme(Resources.Theme t){}  }
class C{  @Override public boolean onTouchEvent(MotionEvent event){  if (event.getAction() == MotionEvent.ACTION_UP && isTouchEventWithinToggle(event)) {    togglePasswordVisibility();    return true;  }  return super.onTouchEvent(event);}  }
class C{  public static byte[] toByteArray(InputStream in) throws IOException {  ByteArrayOutputStream out=new ByteArrayOutputStream(Math.max(32,in.available()));  copy(in,out);  return out.toByteArray();}  }
class C{  public InlineQueryResultPhoto.InlineQueryResultPhotoBuilder caption(String caption){  this.caption=caption;  return this;}  }
class C{  public void validateTagParentKeyType(TagKey tagKey,TagKey parentTagKey){  Assert.isTrue(tagKey.getTagTypeCode().equalsIgnoreCase(parentTagKey.getTagTypeCode()),"Tag type code in parent tag key must match the tag type code in the request.");}  }
class C{  public static DragSourceMotionListener add(DragSourceMotionListener a,DragSourceMotionListener b){  return (DragSourceMotionListener)addInternal(a,b);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:34.543 -0400",hash_original_method="2A1663F8C334FCA3EDA5A21331CBE46C",hash_generated_method="360AFC346BBC1AD53AE615BE5483487C") public MethodNotSupportedException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  public boolean consumeEncumbranceBudget(final Map<String,Object> detailsMap){  if (detailsMap == null)   throw new ValidationException(Arrays.asList(new ValidationError("required input is null","required input is null")));  detailsMap.put(Constants.CONSUMEORRELEASE,true);  final BigDecimal bd=getDetails(detailsMap);  return bd.intValue() == 1;}  }
class C{  public boolean matches(Object filters){  SimpleSelectionFilter[] filterArr=(SimpleSelectionFilter[])filters;  for (int i=0; i < filterArr.length; i++) {    if (filterArr[i].toString().equals(mFilterName)) {      return true;    }  }  return false;}  }
class C{  public static boolean isAcute(Coordinate p0,Coordinate p1,Coordinate p2){  double dx0=p0.x - p1.x;  double dy0=p0.y - p1.y;  double dx1=p2.x - p1.x;  double dy1=p2.y - p1.y;  double dotprod=dx0 * dx1 + dy0 * dy1;  return dotprod > 0;}  }
class C{  public boolean isTransparent(){  return is(TRANSPARENT);}  }
class C{  protected void validate_return(VasaAssociationObject[] param){}  }
class C{  public byte readByteLE() throws IOException {  return inputStream.readByte();}  }
class C{  public double normF(DoubleMatrix2D A){  if (A.size() == 0)   return 0;  return A.aggregate(hypotFunction(),cern.jet.math.Functions.identity);}  }
class C{  @RabbitListener(queues={"twitter.follows"}) public void follows(String message) throws InterruptedException {  User user=null;  try {    user=objectMapper.readValue(message,User.class);  } catch (  IOException e) {    e.printStackTrace();  }  try {    if (user != null) {      CursoredList<Long> follows=twitter.friendOperations().getFriendIds(user.getProfileId());      saveFollows(user,follows);      while (follows.hasNext()) {        Long cursor=follows.getNextCursor();        follows=twitter.friendOperations().getFriendIdsInCursor(user.getProfileId(),cursor);        saveFollows(user,follows);      }      log.info(String.format("%s friends imported for user: %s",user.getFollowsCount(),user.getScreenName()));      prepareUserForRanking(user);      AnalyticsScheduler.resetTimer=true;      User nextUser=userRepository.findRankedUserToCrawl();      if (nextUser == null) {        nextUser=userRepository.findNextUserToCrawl();      }      if (nextUser != null) {        twitterService.discoverUserByProfileId(nextUser.getProfileId());      }    }  } catch (  RateLimitExceededException rateLimitException) {    AnalyticsScheduler.resetTimer=true;    Thread.sleep(40000L);    log.info(String.format("Rate limit exceeded while importing friends for user: %s",user.getScreenName()));    throw new AmqpIllegalStateException(rateLimitException.getMessage());  }catch (  Exception ex) {    log.info(ex);  }}  }
class C{  public SQLFeatureNotSupportedException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  public void reset(){  currentFormatFill=CellFormat.setBackground(0,(byte)0,DTVCCOpacity.TRANSPARENT);  currentFormatFill=CellFormat.setForeground(currentFormatFill,(byte)0,DTVCCOpacity.TRANSPARENT);  currentFormatFill=CellFormat.setPen(currentFormatFill,DTVCCFontType.DEFAULT,DTVCCSize.STANDARD,DTVCCOffset.NORMALSCRIPT);  clear();}  }
class C{  protected String processCommand(final String command){  return processCommand(command,getEnvironment(),null);}  }
class C{  protected AnnotableElementImpl(){  super();}  }
class C{  public DrawerBuilder addStickyDrawerItems(@NonNull IDrawerItem... stickyDrawerItems){  if (this.mStickyDrawerItems == null) {    this.mStickyDrawerItems=new ArrayList<>();  }  Collections.addAll(this.mStickyDrawerItems,IdDistributor.checkIds(stickyDrawerItems));  return this;}  }
class C{  private void useTranspilerType(Resource input,IFileSystemAccess fsa){  subGeneratorInstances().forEachOrdered(null);}  }
class C{  public void loadFunctions(Element e3,String source){  if (loadedOnce) {    return;  }  if (e3 != null) {    List<Element> l=e3.getChildren(RosterEntry.FUNCTION_LABEL);    for (    Element fn : l) {      int num=Integer.parseInt(fn.getAttribute("num").getValue());      String lock=fn.getAttribute("lockable").getValue();      String val=fn.getText();      if ((this.getFunctionLabel(num) == null) || (source.equalsIgnoreCase("model"))) {        this.setFunctionLabel(num,val);        this.setFunctionLockable(num,lock.equals("true"));        Attribute a;        if ((a=fn.getAttribute("functionImage")) != null && !a.getValue().isEmpty()) {          try {            if (FileUtil.getFile(a.getValue()).isFile()) {              this.setFunctionImage(num,FileUtil.getAbsoluteFilename(a.getValue()));            }          } catch (          FileNotFoundException ex) {            try {              if (FileUtil.getFile(FileUtil.getUserResourcePath() + a.getValue()).isFile()) {                this.setFunctionImage(num,FileUtil.getUserResourcePath() + a.getValue());              }            } catch (            FileNotFoundException ex1) {              this.setFunctionImage(num,null);            }          }        }        if ((a=fn.getAttribute("functionImageSelected")) != null && !a.getValue().isEmpty()) {          try {            if (FileUtil.getFile(a.getValue()).isFile()) {              this.setFunctionSelectedImage(num,FileUtil.getAbsoluteFilename(a.getValue()));            }          } catch (          FileNotFoundException ex) {            try {              if (FileUtil.getFile(FileUtil.getUserResourcePath() + a.getValue()).isFile()) {                this.setFunctionSelectedImage(num,FileUtil.getUserResourcePath() + a.getValue());              }            } catch (            FileNotFoundException ex1) {              this.setFunctionSelectedImage(num,null);            }          }        }      }    }  }  if (source.equalsIgnoreCase("RosterEntry")) {    loadedOnce=true;  }}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  protected byte[] decryptAEAD(byte[] byteArray,DTLSConnectionState currentReadState) throws GeneralSecurityException {  if (currentReadState == null) {    throw new NullPointerException("Current read state must not be null");  } else   if (byteArray == null) {    throw new NullPointerException("Ciphertext must not be null");  }  byte[] iv=currentReadState.getIv().getIV();  byte[] key=currentReadState.getEncryptionKey().getEncoded();  byte[] additionalData=generateAdditionalData(byteArray.length - 16);  DatagramReader reader=new DatagramReader(byteArray);  byte[] explicitNonce=generateExplicitNonce();  byte[] explicitNonceUsed=reader.readBytes(8);  if (!Arrays.equals(explicitNonce,explicitNonceUsed) && LOGGER.isLoggable(Level.FINE)) {    StringBuilder b=new StringBuilder("The explicit nonce used by the sender does not match the values provided in the DTLS record");    b.append("\nUsed    : ").append(ByteArrayUtils.toHexString(explicitNonceUsed));    b.append("\nExpected: ").append(ByteArrayUtils.toHexString(explicitNonce));    LOGGER.log(Level.FINE,b.toString());  }  byte[] nonce=getNonce(iv,explicitNonceUsed);  return CCMBlockCipher.decrypt(key,nonce,additionalData,reader.readBytesLeft(),8);}  }
class C{  public String toString(){  String result="";  if (m_negative) {    result+='-';  }  return result + "a" + (m_attributeIndex + 1);}  }
class C{  public synchronized int idleConnectionCount(){  int total=0;  for (  RealConnection connection : connections) {    if (connection.allocations.isEmpty())     total++;  }  return total;}  }
class C{  public ForumPostConfig fetch(ForumPostConfig config){  config.addCredentials(this);  String xml=POST(this.url + "/check-forum-post",config.toXML());  Element root=parse(xml);  if (root == null) {    return null;  }  try {    ForumPostConfig post=new ForumPostConfig();    post.parseXML(root);    return post;  } catch (  Exception exception) {    this.exception=SDKException.parseFailure(exception);    throw this.exception;  }}  }
class C{  public long length() throws SQLException {  throw new FBDriverNotCapableException("Cannot determine length for CLOB");}  }
class C{  public String minLogLikelihoodImprovementCVTipText(){  return "The minimum improvement in cross-validated log likelihood required " + "in order to consider increasing the number of clusters " + "when cross-validiting to find the best number of clusters";}  }
class C{  public synchronized void clear(){  Entry tab[]=table;  for (int i=0; i < tab.length; ++i) {    for (Entry e=tab[i]; e != null; e=e.next)     e.value=null;    tab[i]=null;  }  count=0;  recordModification(tab);}  }
class C{  public PartialResultException(String explanation){  super(explanation);}  }
class C{  public static ModelMetaDataImpl readMetaData(SQL table,int modelInternalId) throws AdeException {  final ModelMetaDataLoader mmdl=new ModelMetaDataLoader(table);  return mmdl.loadOne(modelInternalId);}  }
class C{  @Override public boolean hasOverlappingRendering(){  return false;}  }
class C{  public RequestHandle post(Context context,String url,HttpEntity entity,String contentType,ResponseHandlerInterface responseHandler){  return sendRequest(httpClient,httpContext,addEntityToRequestBase(new HttpPost(getURI(url)),entity),contentType,responseHandler,context);}  }
class C{  public void removeSyncedPalPalRecords(Context context,List<String> rmRecords){  if (context == null) {    Log.e("BCCache","param context NPE");    return;  }  final SharedPreferences prefs=context.getSharedPreferences(BC_PAYPAL_SHARED_PREFERENCE_NAME,0);  String records=prefs.getString(BC_PAYPAL_UNSYNCED_STR_CACHE,null);  if (records == null)   return;  List<String> oldRecords=Arrays.asList(records.split(separator));  List<String> leftRecords=new ArrayList<String>();  if (oldRecords.size() != 0)   leftRecords.addAll(oldRecords);  leftRecords.removeAll(rmRecords);  if (leftRecords.size() == 0) {    clearUnSyncedPayPalRecords(context);  } else {    SharedPreferences.Editor spEditor=prefs.edit();    spEditor.putString(BC_PAYPAL_UNSYNCED_STR_CACHE,joinStrings(leftRecords));    spEditor.apply();  }}  }
class C{  public final void reportCoverage(){  if (TLCGlobals.coverageInterval >= 0) {    MP.printMessage(EC.TLC_COVERAGE_START);    ObjLongTable counts=this.tool.getPrimedLocs();    ObjLongTable.Enumerator keys=this.astCounts.keys();    Object key;    while ((key=keys.nextElement()) != null) {      String loc=((SemanticNode)key).getLocation().toString();      counts.add(loc,astCounts.get(key));    }    Object[] skeys=counts.sortStringKeys();    for (int i=0; i < skeys.length; i++) {      long val=counts.get(skeys[i]);      MP.printMessage(EC.TLC_COVERAGE_VALUE,new String[]{skeys[i].toString(),String.valueOf(val)});    }    MP.printMessage(EC.TLC_COVERAGE_END);  }}  }
class C{  public boolean hasVoice(){  return _prefix.indexOf('+') >= 0;}  }
class C{  public Authorization authorizeDomain(String domain) throws AcmeException {  if (domain == null || domain.isEmpty()) {    throw new NullPointerException("domain must not be empty or null");  }  LOG.debug("authorizeDomain {}",domain);  try (Connection conn=getSession().provider().connect()){    ClaimBuilder claims=new ClaimBuilder();    claims.putResource(Resource.NEW_AUTHZ);    claims.object("identifier").put("type","dns").put("value",domain);    int rc=conn.sendSignedRequest(getSession().resourceUri(Resource.NEW_AUTHZ),claims,getSession());    if (rc != HttpURLConnection.HTTP_CREATED) {      conn.throwAcmeException();    }    Map<String,Object> json=conn.readJsonResponse();    Authorization auth=new Authorization(getSession(),conn.getLocation());    auth.unmarshalAuthorization(json);    return auth;  } catch (  IOException ex) {    throw new AcmeNetworkException(ex);  }}  }
class C{  public long put(long key,long value){  long previous=0;  int index=insertionIndex(key);  boolean isNewMapping=true;  if (index < 0) {    index=-index - 1;    previous=_values[index];    isNewMapping=false;  }  byte previousState=_states[index];  _set[index]=key;  _states[index]=FULL;  _values[index]=value;  if (isNewMapping) {    postInsertHook(previousState == FREE);  }  return previous;}  }
class C{  protected Node newNode(){  return new SVGOMEllipseElement();}  }
class C{  public int decrement(int decrement){  allocator.assertOpen();  final int outcome;  try (AutoCloseableLock write=writeLock.open()){    outcome=bufRefCnt.addAndGet(-decrement);    if (outcome == 0) {      lDestructionTime=System.nanoTime();      listener.release();    }  }   return outcome;}  }
class C{  public void onFailure(int statusCode,Header[] headers,Throwable throwable,JSONObject errorResponse){  Log.w(LOG_TAG,"onFailure(int, Header[], Throwable, JSONObject) was not overriden, but callback was received",throwable);}  }
class C{  public static Function min(Object column){  return new Function(format("min(%s)",column));}  }
class C{  @Override public void removeValue(final IScope scope,final Object value){  final V[] values=_values;  final int[] inserts=_indicesByInsertOrder;  for (int i=0; i <= _lastInsertOrderIndex; i++) {    final int index=inserts[i];    if (index == EMPTY) {      continue;    }    if (Objects.equal(value,values[index])) {      removeAt(index);      return;    }  }}  }
class C{  @Override public String toString(){  return this.getClass().getName() + '(' + getName()+ ':'+ getTypeInternal()+ ')';}  }
class C{  public static void checkState(boolean expression,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (!expression) {    throw new IllegalStateException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  public static final JIPClause create(final JIPTerm term){  return new JIPClause(Clause.getClause(term.getRealTerm(),true));}  }
class C{  public void onSnackbarActionPressed(Snackbar snackbar){}  }
class C{  protected void resetAttribute(SVGItem item){}  }
class C{  public StringBuilder append(int x){  append(Integer.toString(x));  return this;}  }
class C{  private static void printMainMenuHelp(){  System.out.println("<command> (<abbreviated command>) : <description>");  System.out.println("-------------------------------------------------");  System.out.println("portfolios (pr)  : portfolio commands");  System.out.println("positions (ps)   : position commands");  System.out.println("transactions (t) : transaction commands");  System.out.println("help (h)         : help");  System.out.println("quit (q)         : quit");  System.out.println("");}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(DShowTVPlayer.getDscalerDoubleRefresh());}  }
class C{  public Connection(String clientHandle,String clientId,String host,int port,Context context,MqttAndroidClient client,boolean sslConnection){  this.clientHandle=clientHandle;  this.clientId=clientId;  this.host=host;  this.port=port;  this.context=context;  this.client=client;  this.sslConnection=sslConnection;  history=new ArrayList<String>();  StringBuffer sb=new StringBuffer();  sb.append("Client: ");  sb.append(clientId);  sb.append(" created");  addAction(sb.toString());}  }
class C{  @Override public String toString(){  return String.format("GrcFluid(name=%s, color=%x)",getName(),getColor());}  }
class C{  @Override protected void makeFinished(){  byte[] verify_data;  boolean isTLS=(serverHello.server_version[1] == 1);  if (isTLS) {    verify_data=new byte[12];    computerVerifyDataTLS("server finished",verify_data);  } else {    verify_data=new byte[36];    computerVerifyDataSSLv3(SSLv3Constants.server,verify_data);  }  serverFinished=new Finished(verify_data);  send(serverFinished);  if (isResuming) {    if (isTLS) {      computerReferenceVerifyDataTLS("client finished");    } else {      computerReferenceVerifyDataSSLv3(SSLv3Constants.client);    }    status=NEED_UNWRAP;  } else {    session.lastAccessedTime=System.currentTimeMillis();    status=FINISHED;  }}  }
class C{  public ServerBuilderBaratine(Config config){  super(config);}  }
class C{  void runScript(){  String scr=null;  JOptionPane dialog=new JOptionPane();  scr=dialog.showInputDialog(this,"Give class to run as\nfile[!packagename.classname]" + "\nwhere file is a jar or a directory.");  if (scr == null || scr.length() == 0)   return;  try {    ScriptUtils.startScript(scr,node);  } catch (  NoSuchMethodException e) {    showError("The class does not conform with the interface specification.");  }catch (  Exception e) {    showError(e.toString());  }}  }
class C{  public Shape createScrollButtonTogetherDecrease(int x,int y,int w,int h){  path.reset();  path.moveTo(x + w,y);  path.lineTo(x + w,y + h);  path.lineTo(x,y + h);  addScrollGapPath(x,y,w,h,false);  path.closePath();  return path;}  }
class C{  void onAddToDatabase(Context context,ContentValues values){  values.put(LauncherSettings.BaseLauncherColumns.ITEM_TYPE,itemType);  values.put(LauncherSettings.Favorites.CONTAINER,container);  values.put(LauncherSettings.Favorites.SCREEN,screenId);  values.put(LauncherSettings.Favorites.CELLX,cellX);  values.put(LauncherSettings.Favorites.CELLY,cellY);  values.put(LauncherSettings.Favorites.SPANX,spanX);  values.put(LauncherSettings.Favorites.SPANY,spanY);  long serialNumber=UserManagerCompat.getInstance(context).getSerialNumberForUser(user);  values.put(LauncherSettings.Favorites.PROFILE_ID,serialNumber);  if (screenId == Workspace.EXTRA_EMPTY_SCREEN_ID) {    throw new RuntimeException("Screen id should not be EXTRA_EMPTY_SCREEN_ID");  }}  }
class C{  public void addAudioPacketListener(Listener<AudioPacket> listener){  mAudioPacketBroadcaster.addListener(listener);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  void removeFromExternalCache(final long clr,final int slotSize){  assert m_allocationWriteLock.isHeldByCurrentThread();  if (m_externalCache == null)   return;  if (slotSize == 0 || slotSize == m_cachedDatasize) {    m_externalCache.remove(clr);  }}  }
class C{  public static void convertActivityToTranslucentBeforeL(Activity activity){  try {    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method method=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz);    method.setAccessible(true);    method.invoke(activity,new Object[]{null});  } catch (  Throwable t) {  }}  }
class C{  public void decode(int[] received,int twoS) throws ReedSolomonException {  GenericGFPoly poly=new GenericGFPoly(field,received);  int[] syndromeCoefficients=new int[twoS];  boolean dataMatrix=field.equals(GenericGF.DATA_MATRIX_FIELD_256);  boolean noError=true;  for (int i=0; i < twoS; i++) {    int eval=poly.evaluateAt(field.exp(dataMatrix ? i + 1 : i));    syndromeCoefficients[syndromeCoefficients.length - 1 - i]=eval;    if (eval != 0) {      noError=false;    }  }  if (noError) {    return;  }  GenericGFPoly syndrome=new GenericGFPoly(field,syndromeCoefficients);  GenericGFPoly[] sigmaOmega=runEuclideanAlgorithm(field.buildMonomial(twoS,1),syndrome,twoS);  GenericGFPoly sigma=sigmaOmega[0];  GenericGFPoly omega=sigmaOmega[1];  int[] errorLocations=findErrorLocations(sigma);  int[] errorMagnitudes=findErrorMagnitudes(omega,errorLocations,dataMatrix);  for (int i=0; i < errorLocations.length; i++) {    int position=received.length - 1 - field.log(errorLocations[i]);    if (position < 0) {      throw new ReedSolomonException("Bad error location");    }    received[position]=GenericGF.addOrSubtract(received[position],errorMagnitudes[i]);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  String histoFile=null;  double range=0;  int numIterations=0;  double z=0;  int row, col;  float progress=0;  double[] data1;  double[] data2;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      histoFile=args[i];    } else     if (i == 3) {      range=Double.parseDouble(args[i]);    } else     if (i == 4) {      numIterations=Integer.parseInt(args[i]);    } else     if (i == 5) {      numBands=Integer.parseInt(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    DEM=new WhiteboxRaster(inputHeader,"r");    rows=DEM.getNumberRows();    cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    double[][] output=new double[rows][cols];    for (int iterationNum=0; iterationNum < numIterations; iterationNum++) {      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(0 * 100f / 5);      updateProgress("Loop " + (iterationNum + 1) + " of "+ numIterations+ ": ",(int)progress);      tempGrid1=new double[rows][cols];      tempGrid2=new double[rows][cols];      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          tempGrid2[row][col]=noData;        }      }      TurningBandSimulation(range);      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(1 * 100f / 5);      updateProgress("Loop " + (iterationNum + 1) + " of "+ numIterations+ ": ",(int)progress);      HistogramMatching(histoFile);      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(2 * 100f / 5);      updateProgress("Loop " + (iterationNum + 1) + " of "+ numIterations+ ": ",(int)progress);      for (row=0; row < rows; row++) {        data1=DEM.getRowValues(row);        for (col=0; col < cols; col++) {          if (data1[col] != noData) {            tempGrid1[row][col]=data1[col] + tempGrid2[row][col];          } else {            tempGrid1[row][col]=noData;          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(3 * 100f / 5);      updateProgress("Loop " + (iterationNum + 1) + " of "+ numIterations+ ": ",(int)progress);      FillDepressions();      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(4 * 100f / 5);      updateProgress("Loop " + (iterationNum + 1) + " of "+ numIterations+ ": ",(int)progress);      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          if (tempGrid2[row][col] > tempGrid1[row][col]) {            output[row][col]+=1;          }        }      }      progress=(float)(5 * 100f / 5);      updateProgress("Loop " + (iterationNum + 1) + " of "+ numIterations+ ": ",(int)progress);      if (cancelOp) {        cancelOperation();        return;      }    }    outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    outputFile.setPreferredPalette("spectrum.pal");    for (row=0; row < rows; row++) {      data1=DEM.getRowValues(row);      for (col=0; col < cols; col++) {        if (data1[col] != noData) {          outputFile.setValue(row,col,output[row][col]);        } else {          outputFile.setValue(row,col,noData);        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    DEM.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void remove(final AbstractInsnNode insn){  --size;  AbstractInsnNode next=insn.next;  AbstractInsnNode prev=insn.prev;  if (next == null) {    if (prev == null) {      first=null;      last=null;    } else {      prev.next=null;      last=prev;    }  } else {    if (prev == null) {      first=next;      next.prev=null;    } else {      prev.next=next;      next.prev=prev;    }  }  cache=null;  insn.index=-1;  insn.prev=null;  insn.next=null;}  }
class C{  protected boolean updateImageForProjection(Projection proj){  position(proj);  if (imageDecoder != null) {    if (!isOnMap(proj)) {      setNeedToRegenerate(true);      return false;    }    if (shouldFetchForProjection(proj)) {      if (realSelection == null) {        if (getFillPaint() == com.bbn.openmap.omGraphics.OMColor.clear) {          setFillPaint(DEFAULT_NON_CLEAR_FILL_PAINT);        }        realSelection=Boolean.valueOf(selected);      }      selected=true;      setShape();      setNeedToRegenerate(false);      return false;    } else     if (realSelection != null) {      if (getFillPaint() == DEFAULT_NON_CLEAR_FILL_PAINT) {        setFillPaint(com.bbn.openmap.omGraphics.OMColor.clear);      }      setFillPaint(com.bbn.openmap.omGraphics.OMColor.clear);      selected=realSelection.booleanValue();      realSelection=null;    }    if (bitmap == null) {      if (cache != null) {        setImage((Image)cache.get(imageDecoder));      } else {        setImage(imageDecoder.getBufferedImage());      }    }  }  return true;}  }
class C{  boolean update(){  if (selectedContent == null) {    selectedContent=new SelectedNodes();    return true;  }  return selectedContent.update();}  }
class C{  private StackFrame(Context cx,Dim dim,FunctionSource fsource){  this.dim=dim;  this.contextData=ContextData.get(cx);  this.fsource=fsource;  this.breakpoints=fsource.sourceInfo().breakpoints;  this.lineNumber=fsource.firstLine();}  }
class C{  public static List<String> createTargetDevices(StorageSystem storageSystem,String sourceGroupName,String label,Boolean createInactive,int count,URI storagePoolUri,long capacity,boolean isThinlyProvisioned,Volume sourceVolume,TaskCompleter taskCompleter,DbClient dbClient,SmisCommandHelper helper,CIMObjectPathFactory cimPath) throws DeviceControllerException {  _log.info(format("Creating target devices for: Storage System: {0}, Consistency Group: {1}, Pool: {2}, Count: {3}",storageSystem.getId(),sourceGroupName,storagePoolUri,count));  try {    StoragePool storagePool=dbClient.queryObject(StoragePool.class,storagePoolUri);    CIMObjectPath configSvcPath=cimPath.getConfigSvcPath(storageSystem);    CIMArgument[] inArgs=null;    if (storageSystem.checkIfVmax3()) {      CIMObjectPath volumeGroupPath=helper.getVolumeGroupPath(storageSystem,storageSystem,sourceVolume,storagePool);      CIMObjectPath poolPath=helper.getPoolPath(storageSystem,storagePool);      inArgs=helper.getCreateVolumesBasedOnVolumeGroupInputArguments(storageSystem,poolPath,volumeGroupPath,label,count,capacity);    } else {      inArgs=helper.getCreateVolumesInputArguments(storageSystem,storagePool,label,capacity,count,isThinlyProvisioned,null,true);    }    CIMArgument[] outArgs=new CIMArgument[5];    SmisCreateVmaxCGTargetVolumesJob job=new SmisCreateVmaxCGTargetVolumesJob(null,storageSystem.getId(),sourceGroupName,label,createInactive,taskCompleter);    helper.invokeMethodSynchronously(storageSystem,configSvcPath,helper.createVolumesMethodName(storageSystem),inArgs,outArgs,job);    return job.getTargetDeviceIds();  } catch (  Exception e) {    final String errMsg=format("An error occurred when creating target devices VMAX system {0}",storageSystem.getId());    _log.error(errMsg,e);    taskCompleter.error(dbClient,SmisException.errors.methodFailed(helper.createVolumesMethodName(storageSystem),e.getMessage()));    throw new SmisException(errMsg,e);  }}  }
class C{  public int addAllAbsent(Collection c){  int numNew=c.size();  if (numNew == 0)   return 0;synchronized (this) {    Object[] elements=getArray();    int len=elements.length;    Object[] temp=new Object[numNew];    int added=0;    for (Iterator itr=c.iterator(); itr.hasNext(); ) {      Object e=itr.next();      if (indexOf(e,elements,0,len) < 0 && indexOf(e,temp,0,added) < 0)       temp[added++]=e;    }    if (added != 0) {      Object[] newElements=new Object[len + added];      System.arraycopy(elements,0,newElements,0,len);      System.arraycopy(temp,0,newElements,len,added);      setArray(newElements);    }    return added;  }}  }
class C{  public static void runFinalization(){  RUNTIME.runFinalization();}  }
class C{  @Inline static void compilePutfieldBarrier(Assembler asm,GPR offset,int locationMetadata){  asm.emitPUSH_Reg(offset);  asm.emitPUSH_Imm(locationMetadata);  BaselineCompilerImpl.genParameterRegisterLoad(asm,4);  genNullCheck(asm,T0);  asm.generateJTOCcall(Entrypoints.objectFieldWriteBarrierMethod.getOffset());}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public mat4 rotate(vec3 v){  mat4_util_inplace_rotate(this.m,v.x(),v.y(),v.z());  return this;}  }
class C{  private static void s_ucummxx(SparseBlock a,double[] agg,double[] c,int m,int n,double init,Builtin builtin,int rl,int ru){  double[] cmxx=(agg != null) ? agg : new double[n];  if (agg == null)   Arrays.fill(cmxx,init);  int[] cnt=new int[n];  for (int i=rl, ix=rl * n; i < ru; i++, ix+=n) {    if (!a.isEmpty(i)) {      int apos=a.pos(i);      int alen=a.size(i);      int[] aix=a.indexes(i);      double[] avals=a.values(i);      builtinAgg(avals,cmxx,aix,apos,alen,builtin);      countAgg(avals,cnt,aix,apos,alen);    }    for (int j=0; j < n; j++)     if (cnt[j] < i + 1)     cmxx[j]=builtin.execute2(cmxx[j],0);    System.arraycopy(cmxx,0,c,ix,n);  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof InterfaceAddress)) {    return false;  }  InterfaceAddress rhs=(InterfaceAddress)obj;  return ((address == null) ? rhs.address == null : address.equals(rhs.address)) && (rhs.prefixLength == prefixLength) && ((broadcastAddress == null) ? rhs.broadcastAddress == null : broadcastAddress.equals(rhs.broadcastAddress));}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:43.496 -0500",hash_original_method="0CF9495AD70A3403C1A28AE06C2DFE6A",hash_generated_method="3096F049D35F1B9D2027C112D9B826AC") public OverScroller(Context context,Interpolator interpolator,float bounceCoefficientX,float bounceCoefficientY){  this(context,interpolator,true);}  }
class C{  public static PrintData parseXML(Properties ctx,File input){  log.config(input.toString());  PrintData pd=null;  try {    PrintDataHandler handler=new PrintDataHandler(ctx);    SAXParserFactory factory=SAXParserFactory.newInstance();    SAXParser parser=factory.newSAXParser();    parser.parse(input,handler);    pd=handler.getPrintData();  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);  }  return pd;}  }
class C{  public static boolean makeDirs(String filePath){  String folderName=getFolderName(filePath);  if (Handler_String.isEmpty(folderName)) {    return false;  }  File folder=new File(folderName);  return (folder.exists() && folder.isDirectory()) ? true : folder.mkdirs();}  }
class C{  public String processFieldChange(GridField changedField){  processDependencies(changedField);  return processCallout(changedField);}  }
class C{  final void parseRange(String range){  if (range == null) {    throw new IllegalArgumentException("Invalid IP range");  }  int index=range.indexOf('/');  String subnetStr=null;  if (index == -1) {    ipAddress=new IPAddress(range);  } else {    ipAddress=new IPAddress(range.substring(0,index));    subnetStr=range.substring(index + 1);  }  try {    if (subnetStr != null) {      extendedNetworkPrefix=Integer.parseInt(subnetStr);      if ((extendedNetworkPrefix < 0) || (extendedNetworkPrefix > 32)) {        throw new IllegalArgumentException("Invalid IP range [" + range + "]");      }      ipSubnetMask=computeMaskFromNetworkPrefix(extendedNetworkPrefix);    }  } catch (  NumberFormatException ex) {    ipSubnetMask=new IPAddress(subnetStr);    extendedNetworkPrefix=computeNetworkPrefixFromMask(ipSubnetMask);    if (extendedNetworkPrefix == -1) {      throw new IllegalArgumentException("Invalid IP range [" + range + "]",ex);    }  }}  }
class C{  public void memberLeft(ClientMembershipEvent event){  Notification notification=new Notification(JMXNotificationType.CLIENT_LEFT,serverSource,SequenceNumber.next(),System.currentTimeMillis(),ManagementConstants.CLIENT_LEFT_PREFIX + event.getMemberId());  serverLevelNotifEmitter.sendNotification(notification);  memberLevelNotifEmitter.sendNotification(notification);}  }
class C{  @Override public void initialize(Map<String,Object> properties){  return;}  }
class C{  public static boolean hasBinding(Injector injector,Key<?> key){  Binding<?> binding=getBinding(injector,key);  return binding != null;}  }
class C{  public String toString(){  return this.token;}  }
class C{  private <T>void releaseLocks(final LockFutureTask<T> t,final boolean waiting){  if (!lock.isHeldByCurrentThread())   throw new IllegalMonitorStateException();  if (DEBUG)   log.debug("Releasing locks: " + t);  try {    final Iterator<ResourceQueue<LockFutureTask<? extends Object>>> itr=t.lockedResources.iterator();    while (itr.hasNext()) {      final ResourceQueue<LockFutureTask<? extends Object>> resourceQueue=itr.next();      if (!resourceQueue.queue.remove(t)) {        log.error("Lock request not found: resource=" + resourceQueue.getResource() + ", task="+ t);      }      itr.remove();    }  }  finally {    if (waitsFor != null) {synchronized (waitsFor) {        try {          waitsFor.removeEdges(t,waiting);          if (waitsFor.releaseVertex(t)) {            log.error("No vertex? " + t);          }        } catch (        Throwable t2) {          log.error(this,t2);        }      }    }  }}  }
class C{  public NotFoundException(final ResourcePath path){  this(String.format("Resource [%s] not found",path.toString()));}  }
class C{  public ToStringBuilder append(byte value){  style.append(buffer,null,value);  return this;}  }
class C{  public Define(String functionName,Class<?> returnType){  this(functionName,returnType,new String[0],new Class<?>[0]);}  }
class C{  final private boolean isDefinitelyAssigned(int position){  if (position < BitCacheSize) {    return (this.definiteInits & (1L << position)) != 0;  }  if (this.extra == null)   return false;  int vectorIndex;  if ((vectorIndex=(position / BitCacheSize) - 1) >= this.extra[0].length) {    return false;  }  return ((this.extra[0][vectorIndex]) & (1L << (position % BitCacheSize))) != 0;}  }
class C{  private void generateIndexMap(int size){  mIndexMap=new int[size][size];  for (int x=0; x < size; x++) {    for (int y=0; y < size; y++) {      int z=x + y;      mIndexMap[x][y]=z < size ? z : z - size;    }  }}  }
class C{  @Override public synchronized void write(final int b){  int inBufferPos=this.count - this.filledBufferSum;  if (inBufferPos == this.currentBuffer.length) {    this.needNewBuffer(this.count + 1);    inBufferPos=0;  }  this.currentBuffer[inBufferPos]=(byte)b;  this.count++;}  }
class C{  SavedState(Parcelable superState){  super(superState);}  }
class C{  public void offset(float offset){}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public HttpException(){  super();  cause=null;}  }
class C{  public Object next(){  FeatureVector result=new FeatureVector();  try {    int features=in.readInt();    if (features == -1)     return FoldSeparator.separator; else {      for (int i=0; i < features; ++i)       result.addLabel(lexicon[in.readInt()]);      features=in.readInt();      for (int i=0; i < features; ++i)       result.addFeature(lexicon[in.readInt()]);    }  } catch (  EOFException eof) {    result=null;    close();  }catch (  Exception e) {    System.err.println("Can't read from '" + exampleFileName + "':");    e.printStackTrace();    System.exit(1);  }  return result;}  }
class C{  public Matrix solve(Matrix B){  return new LUDecomposition(this).solve(B);}  }
class C{  @Override public synchronized int size(){  return elementCount;}  }
class C{  public synchronized void put(K key,V value){  map.put(key,value);}  }
class C{  protected boolean isQuiet(){  return false;}  }
class C{  private void discoverUnmanagedObjects(AccessProfile accessProfile){  StorageSystem storageSystem=null;  String detailedStatusMessage=null;  try {    storageSystem=_dbClient.queryObject(StorageSystem.class,accessProfile.getSystemId());    if (null == storageSystem) {      return;    }    storageSystem.setDiscoveryStatus(DiscoveredDataObject.DataCollectionJobStatus.IN_PROGRESS.toString());    _dbClient.updateObject(storageSystem);    if (accessProfile.getnamespace().equals(StorageSystem.Discovery_Namespaces.UNMANAGED_FILESYSTEMS.toString())) {      unityUnManagedObjectDiscoverer.discoverUnManagedFileSystems(accessProfile,_dbClient,_coordinator,_partitionManager);      unityUnManagedObjectDiscoverer.discoverAllExportRules(accessProfile,_dbClient,_partitionManager);      unityUnManagedObjectDiscoverer.discoverAllCifsShares(accessProfile,_dbClient,_partitionManager);      unityUnManagedObjectDiscoverer.discoverAllTreeQuotas(accessProfile,_dbClient,_partitionManager);    } else     if (accessProfile.getnamespace().equals(StorageSystem.Discovery_Namespaces.UNMANAGED_VOLUMES.toString())) {      unityUnManagedObjectDiscoverer.discoverUnManagedVolumes(accessProfile,_dbClient,_coordinator,_partitionManager);    }    detailedStatusMessage=String.format("UnManaged Object Discovery completed successfully for VNX Unity: %s",storageSystem.getId().toString());    _logger.info(detailedStatusMessage);  } catch (  Exception e) {    detailedStatusMessage=String.format("Discovery of unmanaged volumes failed for system %s because %s",storageSystem.getId().toString(),e.getLocalizedMessage());    _logger.error(detailedStatusMessage,e);    throw VNXeException.exceptions.discoveryError("Unmanaged objectobject discovery error",e);  } finally {    if (storageSystem != null) {      try {        storageSystem.setLastDiscoveryStatusMessage(detailedStatusMessage);        _dbClient.updateObject(storageSystem);      } catch (      Exception ex) {        _logger.error("Error while updating unmanaged object discovery status for system.",ex);      }    }  }}  }
class C{  private void stageLocalChecks(){  if (sdCardWritable == CheckResult.UNKNOWN) {    sdCardWritable=(FileUtils.isSdCardWritable() ? CheckResult.PASSED : CheckResult.FAILED);  }  summarizeChecks();}  }
class C{  public synchronized void removeTextListener(TextListener cl){  m_textListeners.remove(cl);}  }
class C{  private void replaceContent(Fragment fragment,boolean addToBackStack){  FragmentTransaction fragmentTransaction=fragmentManager.beginTransaction();  fragmentTransaction.replace(contentViewId,fragment);  if (addToBackStack) {    fragmentTransaction.addToBackStack(null);  }  fragmentTransaction.commit();}  }
class C{  public static Address fromIntSignExtend(int address){  return null;}  }
class C{  @HLEFunction(nid=0x0AD043ED,version=150,checkInsideInterrupt=true) public int sceNetAdhocctlConnect(@CanBeNull @StringInfo(maxLength=GROUP_NAME_LENGTH) PspString groupName){  checkInitialized();  hleNetAdhocctlConnect(groupName.getString());  return 0;}  }
class C{  public Store(Store other){  __isset_bitfield=other.__isset_bitfield;  if (other.isSetStoreName()) {    this.storeName=other.storeName;  }  if (other.isSetScope()) {    this.scope=other.scope;  }  this.persist=other.persist;}  }
class C{  public static Color determineColor(String hexString){  return ColorOption.Util.determineColor(hexString);}  }
class C{  public static void transformedStringComparison(){  transformedStringComparison++;}  }
class C{  public final void assertz(final JIPTerm term){synchronized (m_globalDB) {    m_globalDB.assertz(Clause.getClause(term.getTerm(),getEnvVariable("enable_clause_check").equals("true")),null,true);  }}  }
class C{  public void visitJumpInsn(int opcode,Label label){  if (mv != null) {    mv.visitJumpInsn(opcode,label);  }}  }
class C{  public static String extractBuckTarget(Project project,VirtualFile file){  BuckFile buckFile=(BuckFile)PsiManager.getInstance(project).findFile(file);  if (buckFile == null) {    return null;  }  PsiElement[] children=buckFile.getChildren();  for (  PsiElement child : children) {    if (child.getNode().getElementType() == BuckTypes.RULE_BLOCK) {      PsiElement ruleName=child.getFirstChild();      if (ruleName != null && BuckPsiUtils.testType(ruleName,BuckTypes.RULE_NAME)) {        if (ruleName.getText().equals(PROJECT_CONFIG_RULE_NAME)) {          PsiElement bodyElement=BuckPsiUtils.findChildWithType(child,BuckTypes.RULE_BODY);          return getPropertyValue((BuckRuleBody)bodyElement,SRC_TARGET_PROPERTY_NAME);        }      }    }  }  return null;}  }
class C{  ImmutableRangeSet<Integer> lines(){  return lines;}  }
class C{  public static RegisterSpecList make(RegisterSpec spec0,RegisterSpec spec1,RegisterSpec spec2){  RegisterSpecList result=new RegisterSpecList(3);  result.set(0,spec0);  result.set(1,spec1);  result.set(2,spec2);  return result;}  }
class C{  public void addIdentifier(Identifier identifier){  getIdentifiers().add(identifier);}  }
class C{  private void sendClientMessage() throws IOException, JSONException {  log.debug("sending messages");  boolean success=true;  List<MurmurMessage> messagesPool=getMessages(commonFriends);  JSONObject exchangeInfoMessage=new JSONObject("{\"" + MESSAGE_COUNT_KEY + "\":"+ messagesPool.size()+ "}");  if (!lengthValueWrite(out,exchangeInfoMessage)) {    success=false;  } else {    for (    MurmurMessage message : messagesPool) {      log.debug("sending a message");      List<JSONObject> messageWrapper=new ArrayList<>();      messageWrapper.add(message.toJSON(mContext,commonFriends,FriendStore.getInstance(mContext).getAllFriends().size()));      ClientMessage cm=new ClientMessage((ArrayList<JSONObject>)messageWrapper,null);      if (!lengthValueWrite(out,cm.toJSON())) {        success=false;      }    }  }  if (!success) {    setExchangeStatus(Status.ERROR);    setErrorMessage("Length/value write of client message failed.");    throw new IOException("Length/value write of client message failed, but exception is hidden (see Exchange.java)");  }}  }
class C{  private String processLogoutResponse(LogoutResponse response,SessionManager sm) throws SamlServiceException {  String sessionId=null;  String inResponseTo=response.getInResponseTo();  Validate.notNull(inResponseTo);  Session session=sm.getByLogoutRequestId(inResponseTo);  Validate.notNull(session);  try {    session.getLock().lock();    LogoutRequestData logoutRequestData=session.getLogoutRequestData();    if (logoutRequestData == null) {      throw new SamlServiceException("Unable to find logout request data");    }    String currentRelyingParty=logoutRequestData.getCurrent();    if (currentRelyingParty == null || !session.containsSessionParticipantUrl(currentRelyingParty)) {      throw new SamlServiceException("Unable to find current relying party");    }    session.removeSessionParticipantByUrl(currentRelyingParty);    sessionId=session.getId();  }  finally {    session.getLock().unlock();  }  return sessionId;}  }
class C{  public TechnicalServiceOperationException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public void connectInput(SharedInteger input){  this.input=input;}  }
class C{  private String readFile(String fileName){  String text;  try {    Reader r=new FileReader(fileName);    try {      text=Kit.readReader(r);    }  finally {      r.close();    }  } catch (  IOException ex) {    MessageDialogWrapper.showMessageDialog(this,ex.getMessage(),"Error reading " + fileName,JOptionPane.ERROR_MESSAGE);    text=null;  }  return text;}  }
class C{  public void startContainer(final StartContainerParams params) throws IOException {  try (DockerConnection connection=connectionFactory.openConnection(dockerDaemonUri).method("POST").path(apiVersionPathPrefix + "/containers/" + params.getContainer()+ "/start")){    final DockerResponse response=connection.request();    final int status=response.getStatus();    if (NO_CONTENT.getStatusCode() != status && NOT_MODIFIED.getStatusCode() != status) {      final DockerException dockerException=getDockerException(response);      if (OK.getStatusCode() == status) {        LOG.warn(dockerException.getLocalizedMessage());      } else {        throw dockerException;      }    }  } }  }
class C{  public void hasBody(boolean hasBody){}  }
class C{  public ArrayType type(){  return mType;}  }
class C{  private boolean adjustOutputDownwardsForFee(Transaction tx,CoinSelection coinSelection,Coin feePerKb,boolean ensureMinRequiredFee){  final int size=tx.unsafeBitcoinSerialize().length + estimateBytesForSigning(coinSelection);  Coin fee=feePerKb.multiply(size).divide(1000);  if (ensureMinRequiredFee && fee.compareTo(Transaction.REFERENCE_DEFAULT_MIN_TX_FEE) < 0)   fee=Transaction.REFERENCE_DEFAULT_MIN_TX_FEE;  TransactionOutput output=tx.getOutput(0);  output.setValue(output.getValue().subtract(fee));  return !output.isDust();}  }
class C{  public OFActionOutput(short port,short maxLength){  super();  super.setType(OFActionType.OUTPUT);  super.setLength((short)MINIMUM_LENGTH);  this.port=port;  this.maxLength=maxLength;}  }
class C{  public <V>V transact(Callable<V> transaction){  return transact(transaction,HGTransactionConfig.DEFAULT);}  }
class C{  public RxJava1ClientWebRequestBuilder contentType(String contentType){  this.delegate.contentType(contentType);  return this;}  }
class C{  public static String readCookieIgnoreSpecialCharacters(HttpServletRequest request,String cookieName){  String cs=request.getHeader("cookie");  if (cs == null)   return null;  int start=cs.indexOf(cookieName);  if (start < 0)   return null;  cs=cs.substring(start + 1 + cookieName.length());  int end=cs.indexOf(';');  if (end > 0) {    cs=cs.substring(0,end);  }  return cs;}  }
class C{  public void handleProgress(boolean showProgress){  if (doNotHideProgressNow) {    doNotHideProgressNow=false;    return;  }  if (doNotShowProgressNow) {    doNotShowProgressNow=false;    return;  }  try {    if (showProgress) {      if (dialog != null && dialog.isShowing()) {        dialog.dismiss();        dialog=null;      }      dialog=new SimpleProgressDialog(this);      dialog.show();    } else {      if (dialog != null && dialog.isShowing()) {        dialog.dismiss();      }      dialog=null;    }  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public void refreshRow() throws SQLException {  throw new NotUpdatable();}  }
class C{  @Override public String toString(){  return ToStringBuilder.reflectionToString(this,ToStringStyle.SHORT_PREFIX_STYLE);}  }
class C{  public boolean add(String text){  return map.put(text,PLACEHOLDER) == null;}  }
class C{  public static Hashtable indexStringBuffer(StringBuffer thisText){  return indexString(thisText.toString());}  }
class C{  public static GeoBBox makeGeoBBox(final PlanetModel planetModel,double topLat,double bottomLat,double leftLon,double rightLon){  if (topLat > Math.PI * 0.5)   topLat=Math.PI * 0.5;  if (bottomLat < -Math.PI * 0.5)   bottomLat=-Math.PI * 0.5;  if (leftLon < -Math.PI)   leftLon=-Math.PI;  if (rightLon > Math.PI)   rightLon=Math.PI;  if ((Math.abs(leftLon + Math.PI) < Vector.MINIMUM_RESOLUTION && Math.abs(rightLon - Math.PI) < Vector.MINIMUM_RESOLUTION) || (Math.abs(rightLon + Math.PI) < Vector.MINIMUM_RESOLUTION && Math.abs(leftLon - Math.PI) < Vector.MINIMUM_RESOLUTION)) {    if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION && Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)     return new GeoWorld(planetModel);    if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION) {      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION || Math.abs(topLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)       return new GeoDegeneratePoint(planetModel,topLat,0.0);      return new GeoDegenerateLatitudeZone(planetModel,topLat);    }    if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)     return new GeoNorthLatitudeZone(planetModel,bottomLat); else     if (Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)     return new GeoSouthLatitudeZone(planetModel,topLat);    return new GeoLatitudeZone(planetModel,topLat,bottomLat);  }  double extent=rightLon - leftLon;  if (extent < 0.0)   extent+=Math.PI * 2.0;  if (topLat == Math.PI * 0.5 && bottomLat == -Math.PI * 0.5) {    if (Math.abs(leftLon - rightLon) < Vector.MINIMUM_RESOLUTION)     return new GeoDegenerateLongitudeSlice(planetModel,leftLon);    if (extent >= Math.PI)     return new GeoWideLongitudeSlice(planetModel,leftLon,rightLon);    return new GeoLongitudeSlice(planetModel,leftLon,rightLon);  }  if (Math.abs(leftLon - rightLon) < Vector.MINIMUM_RESOLUTION) {    if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION)     return new GeoDegeneratePoint(planetModel,topLat,leftLon);    return new GeoDegenerateVerticalLine(planetModel,topLat,bottomLat,leftLon);  }  if (extent >= Math.PI) {    if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION) {      return new GeoWideDegenerateHorizontalLine(planetModel,topLat,leftLon,rightLon);    }    if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {      return new GeoWideNorthRectangle(planetModel,bottomLat,leftLon,rightLon);    } else     if (Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {      return new GeoWideSouthRectangle(planetModel,topLat,leftLon,rightLon);    }    return new GeoWideRectangle(planetModel,topLat,bottomLat,leftLon,rightLon);  }  if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION) {    if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION || Math.abs(topLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {      return new GeoDegeneratePoint(planetModel,topLat,0.0);    }    return new GeoDegenerateHorizontalLine(planetModel,topLat,leftLon,rightLon);  }  if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {    return new GeoNorthRectangle(planetModel,bottomLat,leftLon,rightLon);  } else   if (Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {    return new GeoSouthRectangle(planetModel,topLat,leftLon,rightLon);  }  return new GeoRectangle(planetModel,topLat,bottomLat,leftLon,rightLon);}  }
class C{  public FullName(String value){  this();  setValue(value);}  }
class C{  public static GdbServer start(String host,int port,String file) throws InterruptedException, GdbParseException, IOException {  return new GdbServer(host,port,file);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:49.333 -0500",hash_original_method="790329C099FCB9AD7C46A077CBE50219",hash_generated_method="2FAC081356342D0DF3F1550E489D8328") protected Drawable loadDefaultLogo(PackageManager pm){  return null;}  }
class C{  public Intent putExtra(String name,short value){  if (mExtras == null) {    mExtras=new Bundle();  }  mExtras.putShort(name,value);  return this;}  }
class C{  public synchronized void deleteObserver(Observer observer){  observers.remove(observer);}  }
class C{  public static void clickButtonByPath(int[] path){  if (verbose) {    log("clickButtonByPath(" + toString(path) + ")");  }  Button b=(Button)getComponentByPath(path);  b.pressed();  waitFor(10);  b.released();  waitFor(10);}  }
class C{  private void createNewSeparatoRow(){  separatorRows.add(rows);  JLabel[] rowLabels=createNewRow();  assert rowLabels.length == columns;  for (int i=0; i < rowLabels.length; ++i) {    rowLabels[i].setBackground(GRID_COLOR);  }}  }
class C{  public boolean isRelayingAllowed(String remoteIP){  return false;}  }
class C{  @Override public int hashCode(){  int result=17;  final int mult=37;  result=mult * result + (this.host == null ? 0 : this.host.hashCode());  result=mult * result + this.port;  result=mult * result + (this.bindAddress == null ? 0 : this.bindAddress.hashCode());  return result;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createElementNS03.class,args);}  }
class C{  public Protos.Wallet walletToProto(Wallet wallet){  Protos.Wallet.Builder walletBuilder=Protos.Wallet.newBuilder();  walletBuilder.setNetworkIdentifier(wallet.getNetworkParameters().getId());  if (wallet.getDescription() != null) {    walletBuilder.setDescription(wallet.getDescription());  }  for (  WalletTransaction wtx : wallet.getWalletTransactions()) {    Protos.Transaction txProto=makeTxProto(wtx);    walletBuilder.addTransaction(txProto);  }  for (  ECKey key : wallet.getKeys()) {    Protos.Key.Builder keyBuilder=Protos.Key.newBuilder().setCreationTimestamp(key.getCreationTimeSeconds() * 1000).setType(Protos.Key.Type.ORIGINAL);    if (key.getPrivKeyBytes() != null)     keyBuilder.setPrivateKey(ByteString.copyFrom(key.getPrivKeyBytes()));    EncryptedPrivateKey encryptedPrivateKey=key.getEncryptedPrivateKey();    if (encryptedPrivateKey != null) {      Protos.EncryptedPrivateKey.Builder encryptedKeyBuilder=Protos.EncryptedPrivateKey.newBuilder().setEncryptedPrivateKey(ByteString.copyFrom(encryptedPrivateKey.getEncryptedBytes())).setInitialisationVector(ByteString.copyFrom(encryptedPrivateKey.getInitialisationVector()));      if (key.getKeyCrypter() == null) {        throw new IllegalStateException("The encrypted key " + key.toString() + " has no KeyCrypter.");      } else {        if (key.getKeyCrypter().getUnderstoodEncryptionType() == Protos.Wallet.EncryptionType.ENCRYPTED_SCRYPT_AES) {          keyBuilder.setType(Protos.Key.Type.ENCRYPTED_SCRYPT_AES);        } else {          throw new IllegalArgumentException("The key " + key.toString() + " is encrypted with a KeyCrypter of type "+ key.getKeyCrypter().getUnderstoodEncryptionType()+ ". This WalletProtobufSerialiser does not understand that type of encryption.");        }      }      keyBuilder.setEncryptedPrivateKey(encryptedKeyBuilder);    }    keyBuilder.setPublicKey(ByteString.copyFrom(key.getPubKey()));    walletBuilder.addKey(keyBuilder);  }  for (  Script script : wallet.getWatchedScripts()) {    Protos.Script protoScript=Protos.Script.newBuilder().setProgram(ByteString.copyFrom(script.getProgram())).setCreationTimestamp(script.getCreationTimeSeconds() * 1000).build();    walletBuilder.addWatchedScript(protoScript);  }  Sha256Hash lastSeenBlockHash=wallet.getLastBlockSeenHash();  if (lastSeenBlockHash != null) {    walletBuilder.setLastSeenBlockHash(hashToByteString(lastSeenBlockHash));    walletBuilder.setLastSeenBlockHeight(wallet.getLastBlockSeenHeight());  }  if (wallet.getLastBlockSeenTimeSecs() > 0)   walletBuilder.setLastSeenBlockTimeSecs(wallet.getLastBlockSeenTimeSecs());  KeyCrypter keyCrypter=wallet.getKeyCrypter();  if (keyCrypter == null) {    walletBuilder.setEncryptionType(EncryptionType.UNENCRYPTED);  } else {    walletBuilder.setEncryptionType(keyCrypter.getUnderstoodEncryptionType());    if (keyCrypter instanceof KeyCrypterScrypt) {      KeyCrypterScrypt keyCrypterScrypt=(KeyCrypterScrypt)keyCrypter;      walletBuilder.setEncryptionParameters(keyCrypterScrypt.getScryptParameters());    } else {      throw new RuntimeException("The wallet has encryption of type '" + keyCrypter.getUnderstoodEncryptionType() + "' but this WalletProtobufSerializer does not know how to persist this.");    }  }  if (wallet.getKeyRotationTime() != null) {    long timeSecs=wallet.getKeyRotationTime().getTime() / 1000;    walletBuilder.setKeyRotationTime(timeSecs);  }  populateExtensions(wallet,walletBuilder);  if (wallet.getVersion() != null) {    walletBuilder.setVersion(wallet.getVersion().getWalletVersionAsInt());  }  return walletBuilder.build();}  }
class C{  protected String doIt() throws Exception {  log.info("doIt - IMAPHost=" + p_IMAPHost + " IMAPUser="+ p_IMAPUser+ " RequestFolder="+ p_RequestFolder+ " InboxFolder="+ p_InboxFolder+ " ErrorFolder="+ p_ErrorFolder);  try {    getSession();    getStore();    processInBox();  } catch (  Exception e) {    log.log(Level.SEVERE,"processInBox",e);  }  try {    if (m_store.isConnected())     m_store.close();  } catch (  Exception e) {  }  return "processInBox - Total=" + noProcessed + " - Requests="+ noRequest+ " - Errors="+ noError;}  }
class C{  protected SyntaxRelatedTElementImpl(){  super();}  }
class C{  DataValidator(JComponent component,Document... docs){  this.component=component;  documents=docs;  for (  Document doc : docs) {    doc.addDocumentListener(this);  }  revalidate();}  }
class C{  public static double invPow2(int e){  assert (e | (1024 - e - 1)) >= 0 : "e cannot be negative or greater than 1023: " + e;  return Double.longBitsToDouble((1023L - e) << 52);}  }
class C{  public static FloatMatrix diag(FloatMatrix x){  FloatMatrix m=new FloatMatrix(x.length,x.length);  for (int i=0; i < x.length; i++) {    m.put(i,i,x.get(i));  }  return m;}  }
class C{  public static boolean referenceEquals(Object x,Object y){  return x == y;}  }
class C{  public void invalidate(String group){  Iterator items=items(group,ValidatedPredicate.TRUE);  while (items.hasNext()) {    VisualItem item=(VisualItem)items.next();    item.setValidated(false);  }}  }
class C{  public Model(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:28.179 -0500",hash_original_method="3DFE3DD93360D391D61344F06E56E68A",hash_generated_method="EE9DBC42532266034E02F6C7CB27EDC1") public static boolean isApiSupported(Context context){  return context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_SIP);}  }
class C{  public WildcardTypeBuilder withUpperBounds(final Type... bounds){  this.upperBounds=bounds;  return this;}  }
class C{  public boolean toWeatherState(){  return to;}  }
class C{  public Endpoint(URI endpointUrl,SecurityMode... modes){  if (modes == null || endpointUrl == null)   throw new IllegalArgumentException("null arg");  for (  SecurityMode m : modes) {    if (m == null)     throw new IllegalArgumentException("null arg");    hash=13 * hash + m.hashCode();  }  this.endpointUrl=endpointUrl.toString();  this.modes=modes;  this.endpointConfiguration=EndpointConfiguration.defaults();  hash=13 * hash + endpointUrl.hashCode();}  }
class C{  public static OptimizationPlanCompositeElement compose(String name,Object[] elems){  return new OptimizationPlanCompositeElement(name,elems);}  }
class C{  protected void notifyScrollingListenersAboutEnd(){  for (  OnWheelScrollListener listener : scrollingListeners) {    listener.onScrollingFinished(this);  }}  }
class C{  @Override protected EClass eStaticClass(){  return RegularExpressionPackage.Literals.GROUP;}  }
class C{  public void paint(Graphics g,Shape a){}  }
class C{  protected Class findClass(String name) throws ClassNotFoundException {  byte[] classfile;  try {    if (source != null) {      if (translator != null)       translator.onLoad(source,name);      try {        classfile=source.get(name).toBytecode();      } catch (      NotFoundException e) {        return null;      }    } else {      String jarname="/" + name.replace('.','/') + ".class";      InputStream in=this.getClass().getResourceAsStream(jarname);      if (in == null)       return null;      classfile=ClassPoolTail.readStream(in);    }  } catch (  Exception e) {    throw new ClassNotFoundException("caught an exception while obtaining a class file for " + name,e);  }  int i=name.lastIndexOf('.');  if (i != -1) {    String pname=name.substring(0,i);    if (getPackage(pname) == null)     try {      definePackage(pname,null,null,null,null,null,null,null);    } catch (    IllegalArgumentException e) {    }  }  if (domain == null)   return defineClass(name,classfile,0,classfile.length); else   return defineClass(name,classfile,0,classfile.length,domain);}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  private static double distance(double x1,double y1,double x2,double y2){  return Math.sqrt((y2 - y1) * (y2 - y1) + (x2 - x1) * (x2 - x1));}  }
class C{  public static void fill(long[] array,long value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  private void _serializeQuery(PageContext pc,Set test,Query query,StringBuilder sb,boolean serializeQueryByColumns,Set<Object> done) throws ConverterException {  Collection.Key[] _keys=CollectionUtil.keys(query);  sb.append(goIn());  sb.append("{");  if (serializeQueryByColumns) {    sb.append("\"ROWCOUNT\":");    sb.append(Caster.toString(query.getRecordcount()));    sb.append(',');  }  sb.append("\"COLUMNS\":[");  String[] cols=query.getColumns();  for (int i=0; i < cols.length; i++) {    if (i > 0)     sb.append(",");    sb.append(StringUtil.escapeJS(cols[i].toUpperCase(),'"',charsetEncoder));  }  sb.append("],");  sb.append("\"DATA\":");  if (serializeQueryByColumns) {    sb.append('{');    boolean oDoIt=false;    int len=query.getRecordcount();    for (int i=0; i < _keys.length; i++) {      if (oDoIt)       sb.append(',');      oDoIt=true;      sb.append(goIn());      sb.append(StringUtil.escapeJS(_keys[i].getString(),'"',charsetEncoder));      sb.append(":[");      boolean doIt=false;      for (int y=1; y <= len; y++) {        if (doIt)         sb.append(',');        doIt=true;        try {          _serialize(pc,test,query.getAt(_keys[i],y),sb,serializeQueryByColumns,done);        } catch (        PageException e) {          _serialize(pc,test,e.getMessage(),sb,serializeQueryByColumns,done);        }      }      sb.append(']');    }    sb.append('}');  } else {    sb.append('[');    boolean oDoIt=false;    int len=query.getRecordcount();    for (int row=1; row <= len; row++) {      if (oDoIt)       sb.append(',');      oDoIt=true;      sb.append("[");      boolean doIt=false;      for (int col=0; col < _keys.length; col++) {        if (doIt)         sb.append(',');        doIt=true;        try {          _serialize(pc,test,query.getAt(_keys[col],row),sb,serializeQueryByColumns,done);        } catch (        PageException e) {          _serialize(pc,test,e.getMessage(),sb,serializeQueryByColumns,done);        }      }      sb.append(']');    }    sb.append(']');  }  sb.append('}');}  }
class C{  public static String rawToHex(byte[] buf){  return (ByteArray.rawToHex(buf,0,buf.length));}  }
class C{  public void paintSplitPaneDragDivider(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public WFG4(int k,int l,int M){  super(k,l,M);}  }
class C{  public IntervalWindow(Instant start,Instant end){  this.start=start;  this.end=end;}  }
class C{  private static String retreiveSystemProperty(CoordinatorClient coordinator,String propertyName){  try {    PropertyInfoExt params=coordinator.getTargetInfo(PropertyInfoExt.class);    String propertyValue=params.getProperty(propertyName);    _log.info("retrieve property: " + propertyName + " = "+ propertyValue);    return propertyValue;  } catch (  Exception e) {    _log.warn("retrieve property: " + propertyName + " from ZK error");    return null;  }}  }
class C{  private void addPresetCategories(Collection<String> categories){  presetCategories.addAll(categories);}  }
class C{  public SeaGlassInternalFrameTitlePane(JInternalFrame f){  frame=f;  installTitlePane();}  }
class C{  @Deprecated public void expungeNotes(List<String> noteGuids,OnClientCallback<Integer> callback){  AsyncReflector.execute(mClient,callback,"expungeNotes",mAuthenticationToken,noteGuids);}  }
class C{  @Action(value="/reports/chequeCollectionReport-submissionReport") public String submissionReport(){  final Map<String,Object> session=getSession();  SimpleDateFormat sdf=new SimpleDateFormat("dd/MM/yyyy");  Date rcptDate=null;  try {    rcptDate=sdf.parse(receiptDate);  } catch (  ParseException e) {    LOGGER.error("Exception occured while parsing receipt created date",e);  }  critParams.put(EGOV_FROM_DATE,rcptDate);  critParams.put(EGOV_TO_DATE,rcptDate);  critParams.put(EGOV_COUNTER_OPERATOR_ID,Long.valueOf(-1L));  critParams.put(EGOV_COUNTER_ID,collectionsUtil.getLocationOfUser(getSession()).getId().longValue());  critParams.put(EGOV_RECEIPT_IDS,Arrays.asList((Long[])session.get(CollectionConstants.SESSION_VAR_RECEIPT_IDS)));  return report();}  }
class C{  public static void checkArgument(boolean expression,String errorMessageTemplate,Object... errorMessageArgs){  if (!expression) {    throw new IllegalArgumentException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  public Laumanns(){  super(2,2);}  }
class C{  public ICompilationUnit findCompilationUnit(String qualifiedTypeName){  String[] pkgName=CharOperation.NO_STRINGS;  String cuName=qualifiedTypeName;  int index=qualifiedTypeName.lastIndexOf('.');  if (index != -1) {    pkgName=Util.splitOn('.',qualifiedTypeName,0,index);    cuName=qualifiedTypeName.substring(index + 1);  }  index=cuName.indexOf('$');  if (index != -1) {    cuName=cuName.substring(0,index);  }  int pkgIndex=this.packageFragments.getIndex(pkgName);  if (pkgIndex != -1) {    Object value=this.packageFragments.valueTable[pkgIndex];    pkgName=(String[])this.packageFragments.keyTable[pkgIndex];    if (value instanceof PackageFragmentRoot) {      return findCompilationUnit(pkgName,cuName,(PackageFragmentRoot)value);    } else {      IPackageFragmentRoot[] roots=(IPackageFragmentRoot[])value;      for (int i=0; i < roots.length; i++) {        PackageFragmentRoot root=(PackageFragmentRoot)roots[i];        ICompilationUnit cu=findCompilationUnit(pkgName,cuName,root);        if (cu != null)         return cu;      }    }  }  return null;}  }
class C{  private void writeEndMask(int mask) throws IOException {  if (mask != 0) {    if ((mask & BOLD) != 0) {      write("</b>");    }    if ((mask & ITALIC) != 0) {      write("</i>");    }    if ((mask & UNDERLINE) != 0) {      write("</u>");    }  }}  }
class C{  public static boolean isArray(Type type){  return type instanceof GenericArrayType || type instanceof Class<?> && ((Class<?>)type).isArray();}  }
class C{  public void check(final int api){  if (api == Opcodes.ASM4) {    if (visibleTypeAnnotations != null && visibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }    if (invisibleTypeAnnotations != null && invisibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }    for (    FieldNode f : fields) {      f.check(api);    }    for (    MethodNode m : methods) {      m.check(api);    }  }}  }
class C{  private List<InstallmentReceiptTuple> enumerateTuples(){  final List<InstallmentReceiptTuple> allReceiptTuples=new ArrayList<InstallmentReceiptTuple>();  InstallmentReceiptTuple tuple=null;  List<EgDemand> allDemands=billable.getAllDemands();  if (allDemands != null)   for (  final EgDemand demand : allDemands)   for (  final EgDemandDetails det : demand.getEgDemandDetails())   for (  final EgdmCollectedReceipt collReceipt : det.getEgdmCollectedReceipts()) {    tuple=new InstallmentReceiptTuple(det.getEgDemandReason().getEgInstallmentMaster(),Receipt.mapFrom(collReceipt));    allReceiptTuples.add(tuple);  }  Collections.sort(allReceiptTuples);  LOGGER.info("enumerateTuples() returned: " + allReceiptTuples);  return allReceiptTuples;}  }
class C{  public final synchronized void updateRemainingTime(){  long now=System.currentTimeMillis();  int wTime=game.timeController.getRemainingTime(true,now);  int bTime=game.timeController.getRemainingTime(false,now);  int nextUpdate=0;  if (game.timeController.clockRunning()) {    int t=game.currPos().whiteMove ? wTime : bTime;    nextUpdate=t % 1000;    if (nextUpdate < 0)     nextUpdate+=1000;    nextUpdate+=1;  }  gui.setRemainingTime(wTime,bTime,nextUpdate);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:49.135 -0500",hash_original_method="E183481C16DEC5D87834DCD30C3A4B47",hash_generated_method="ABC3A129BCCCAFA25078A7742DEAC82A") public void notationDecl(String name,String publicId,String systemId) throws SAXException {}  }
class C{  void createButtons(){  if (scrollForwardButton != null) {    tabPane.remove(scrollForwardButton);    scrollForwardButton.removeActionListener(this);    tabPane.remove(scrollBackwardButton);    scrollBackwardButton.removeActionListener(this);  }  int tabPlacement=tabPane.getTabPlacement();  if (tabPlacement == TOP || tabPlacement == BOTTOM) {    scrollForwardButton=createScrollButton(EAST);    scrollBackwardButton=createScrollButton(WEST);  } else {    scrollForwardButton=createScrollButton(SOUTH);    scrollBackwardButton=createScrollButton(NORTH);  }  scrollForwardButton.addActionListener(this);  scrollBackwardButton.addActionListener(this);  tabPane.add(scrollForwardButton);  tabPane.add(scrollBackwardButton);}  }
class C{  private void writeSimpleTree(Tree tree,XMLWriter writer){  writer.writeComment("The user-specified starting tree in a simple tree format.");  writer.writeOpenTag(SimpleTreeParser.SIMPLE_TREE,new Attribute[]{new Attribute.Default<Object>(DateParser.UNITS,options.units.toString()),new Attribute.Default<Boolean>(SimpleTreeParser.USING_DATES,options.clockModelOptions.isTipCalibrated())});  writeSimpleNode(tree,tree.getRoot(),writer);  writer.writeCloseTag(SimpleTreeParser.SIMPLE_TREE);}  }
class C{  public WrappedCompilationUnit(final CompilationUnit cu){  compilationUnit=cu;}  }
class C{  public static void dropAndRecreateEncryptedTables(SQLiteDatabase db){  db.execSQL("DROP TABLE IF EXISTS USER_DATA_KEY");  db.execSQL("CREATE TABLE USER_DATA_KEY (_id integer primary key, APP_ID INTEGER NOT NULL,encrypted_key blob);");  for (  String table : new String[]{GpsLocationRow.TABLE_NAME,UserLocationRow.TABLE_NAME,TimeZoneTimeRow.TABLE_NAME}) {    dropAndRecreateEncryptedTable(db,table);  }}  }
class C{  private Ref functionArgDeclarationVarString() throws PageException {  cfml.removeSpace();  StringBuilder str=new StringBuilder();  String id=null;  while ((id=identifier(false)) != null) {    if (str.length() > 0)     str.append('.');    str.append(id);    cfml.removeSpace();    if (!cfml.forwardIfCurrent('.'))     break;    cfml.removeSpace();  }  cfml.removeSpace();  if (str.length() > 0 && cfml.charAt(cfml.getPos() - 1) != '.')   return new LString(str.toString());  throw new InterpreterException("invalid variable name definition");}  }
class C{  public static void v(String tag,String s,Object... args){  if (LOG.VERBOSE >= LOGLEVEL)   Log.v(tag,String.format(s,args));}  }
class C{  @Override public CompilerPhase newExecution(IR ir){  return this;}  }
class C{  public AISValidationResults validate(Collection<? extends AISValidation> validations){  AISFailureList validationFailures=new AISFailureList();  for (  AISValidation v : validations) {    v.validate(this,validationFailures);  }  return validationFailures;}  }
class C{  public void splitNode(KDTreeNode node,int numNodesCreated,double[][] nodeRanges,double[][] universe) throws Exception {  correctlyInitialized();  int splitDim=widestDim(nodeRanges,universe);  double splitVal=m_EuclideanDistance.getMiddle(nodeRanges[splitDim]);  int rightStart=rearrangePoints(m_InstList,node.m_Start,node.m_End,splitDim,splitVal);  if (rightStart == node.m_Start || rightStart > node.m_End) {    if (rightStart == node.m_Start)     throw new Exception("Left child is empty in node " + node.m_NodeNumber + ". Not possible with "+ "MidPointofWidestDim splitting method. Please "+ "check code."); else     throw new Exception("Right child is empty in node " + node.m_NodeNumber + ". Not possible with "+ "MidPointofWidestDim splitting method. Please "+ "check code.");  }  node.m_SplitDim=splitDim;  node.m_SplitValue=splitVal;  node.m_Left=new KDTreeNode(numNodesCreated + 1,node.m_Start,rightStart - 1,m_EuclideanDistance.initializeRanges(m_InstList,node.m_Start,rightStart - 1));  node.m_Right=new KDTreeNode(numNodesCreated + 2,rightStart,node.m_End,m_EuclideanDistance.initializeRanges(m_InstList,rightStart,node.m_End));}  }
class C{  public ImageRequest(String url,Response.Listener<Bitmap> listener,int maxWidth,int maxHeight,ScaleType scaleType,Config decodeConfig,Response.ErrorListener errorListener){  super(Method.GET,url,errorListener);  setRetryPolicy(new DefaultRetryPolicy(DEFAULT_IMAGE_TIMEOUT_MS,DEFAULT_IMAGE_MAX_RETRIES,DEFAULT_IMAGE_BACKOFF_MULT));  mListener=listener;  mDecodeConfig=decodeConfig;  mMaxWidth=maxWidth;  mMaxHeight=maxHeight;  mScaleType=scaleType;}  }
class C{  float removeInterval(Interval interval){  if (owner.hasPropagated) {    return Float.POSITIVE_INFINITY;  }  InstanceTime instance=(InstanceTime)instances.get(interval);  interval.removeDependent(instance,syncBegin);  return owner.removeInstanceTime(instance,isBegin);}  }
class C{  public boolean isDirty(){  return undo.canUndoOrRedo();}  }
class C{  public boolean isAllowSubTasks(){  return allowSubTasks;}  }
class C{  private static void bindPreferenceSummaryToValue(@NonNull final Preference preference){  preference.setOnPreferenceChangeListener(sBindPreferenceSummaryToValueListener);  sBindPreferenceSummaryToValueListener.onPreferenceChange(preference,PreferenceManager.getDefaultSharedPreferences(preference.getContext()).getString(preference.getKey(),""));}  }
class C{  boolean parse(byte[] buffer,int size){  if (size < 12) {    return false;  }  Segment seg=parseSeg(buffer,size);  if (logger.isLoggable(Level.FINE)) {    logger.log(Level.FINE,"--> " + debugName + "<CONV="+ seg.conv+ "><FLG="+ seg.flags+ "><SEQ="+ seg.seq+ ":"+ (seg.seq + seg.len)+ "><ACK="+ seg.ack+ "><WND="+ seg.wnd+ "><SCALE="+ m_swnd_scale+ "><TS="+ seg.tsval+ "><TSR="+ seg.tsecr+ "><LEN="+ seg.len+ ">");  }  return process(seg);}  }
class C{  public void putDouble(String key,double value){  editor.putLong(key,Double.doubleToLongBits(value));  boolean added=editor.commit();}  }
class C{  private synchronized void updateRecoveryButton(){  final IGame game=clientgui.getClient().getGame();  final Entity ce=ce();  if (null == ce) {    return;  }  if (ce instanceof Aero) {    Coords loadeePos=cmd.getFinalCoords();    if (clientgui.getClient().getGame().useVectorMove()) {      loadeePos=Compute.getFinalPosition(ce.getPosition(),cmd.getFinalVectors());    }    boolean isGood=false;    for (    Entity other : game.getEntitiesVector(loadeePos)) {      if ((other instanceof Aero) && other.isDone() && other.canLoad(ce)&& (cmd.getFinalFacing() == other.getFacing())&& !other.isCapitalFighter()) {        Aero oa=(Aero)other;        if (clientgui.getClient().getGame().useVectorMove()) {          if (Compute.sameVectors(cmd.getFinalVectors(),oa.getVectors())) {            if (ce instanceof Dropship) {              setDockEnabled(true);            } else {              setRecoverEnabled(true);            }            isGood=true;            break;          }        } else         if (cmd.getFinalVelocity() == oa.getCurrentVelocity()) {          if (ce instanceof Dropship) {            setDockEnabled(true);          } else {            setRecoverEnabled(true);          }          isGood=true;          break;        }      }      other=null;    }    if (!isGood) {      setRecoverEnabled(false);      setDockEnabled(false);    }  }}  }
class C{  public boolean maxValue(float val,float maxVal){  return GenericValidator.maxValue(val,maxVal);}  }
class C{  private byte[] encryptCTS(byte[] baseKey,int usage,byte[] ivec,byte[] new_ivec,byte[] plaintext,int start,int len,boolean confounder_exists) throws GeneralSecurityException, KrbCryptoException {  byte[] Ke=null;  byte[] Ki=null;  if (debug) {    System.err.println("usage: " + usage);    if (ivec != null) {      traceOutput("old_state.ivec",ivec,0,ivec.length);    }    traceOutput("plaintext",plaintext,start,Math.min(len,32));    traceOutput("baseKey",baseKey,0,baseKey.length);  }  try {    byte[] constant=new byte[5];    constant[0]=(byte)((usage >> 24) & 0xff);    constant[1]=(byte)((usage >> 16) & 0xff);    constant[2]=(byte)((usage >> 8) & 0xff);    constant[3]=(byte)(usage & 0xff);    constant[4]=(byte)0xaa;    Ke=dk(baseKey,constant);    byte[] toBeEncrypted=null;    if (confounder_exists) {      byte[] confounder=Confounder.bytes(BLOCK_SIZE);      toBeEncrypted=new byte[confounder.length + len];      System.arraycopy(confounder,0,toBeEncrypted,0,confounder.length);      System.arraycopy(plaintext,start,toBeEncrypted,confounder.length,len);    } else {      toBeEncrypted=new byte[len];      System.arraycopy(plaintext,start,toBeEncrypted,0,len);    }    byte[] output=new byte[toBeEncrypted.length + hashSize];    Cipher cipher=Cipher.getInstance("AES/CTS/NoPadding");    SecretKeySpec secretKey=new SecretKeySpec(Ke,"AES");    IvParameterSpec encIv=new IvParameterSpec(ivec,0,ivec.length);    cipher.init(Cipher.ENCRYPT_MODE,secretKey,encIv);    cipher.doFinal(toBeEncrypted,0,toBeEncrypted.length,output);    constant[4]=(byte)0x55;    Ki=dk(baseKey,constant);    if (debug) {      traceOutput("constant",constant,0,constant.length);      traceOutput("Ki",Ki,0,Ke.length);    }    byte[] hmac=getHmac(Ki,toBeEncrypted);    System.arraycopy(hmac,0,output,toBeEncrypted.length,hmac.length);    return output;  }  finally {    if (Ke != null) {      Arrays.fill(Ke,0,Ke.length,(byte)0);    }    if (Ki != null) {      Arrays.fill(Ki,0,Ki.length,(byte)0);    }  }}  }
class C{  public int generateCode(){  ir.MIRInfo.machinecode=CodeArray.Factory.create(ir.MIRInfo.mcSizeEstimate,true);  return genCode(ir,shouldPrint);}  }
class C{  public T caseGenerate_(Generate_ object){  return null;}  }
class C{  public MediaCategory(String scheme,String content){  this.scheme=scheme;  setContent(content);}  }
class C{  public static RelationalOpExpression leProperty(String propertyLeft,String propertyRight){  return new RelationalOpExpression(getPropExpr(propertyLeft),"<=",new PropertyValueExpression(propertyRight));}  }
class C{  public XObject operate(XObject left,XObject right) throws javax.xml.transform.TransformerException {  return left.greaterThanOrEqual(right) ? XBoolean.S_TRUE : XBoolean.S_FALSE;}  }
class C{  @Transactional public void deleteByIds(String ids,User currentUser) throws Exception {  transformer.idsStr2List(ids).forEach(null);}  }
class C{  public static boolean isPOSTag(String token){  if (posTagSet == null) {    initializePOSTagSet();  }  return posTagSet.contains(token);}  }
class C{  public PX4LogMessage readMessage() throws IOException {  while (true) {    int msgType=readHeader();    long pos=position();    PX4LogMessageDescription messageDescription=messageDescriptions.get(msgType);    if (messageDescription == null) {      errors.add(new FormatErrorException(pos,"Unknown message type: " + msgType));      continue;    }    try {      fillBuffer(messageDescription.length - HEADER_LEN);    } catch (    EOFException e) {      errors.add(new FormatErrorException(pos,"Unexpected end of file"));      throw e;    }    return messageDescription.parseMessage(buffer);  }}  }
class C{  private void updateAnimationPosition(int direction){  if (animationPosition != 0) {    animationPosition=0;    animate();  }  if (isSmoothScrolling()) {    if (orientation != HORIZONTAL) {      animationPosition+=(direction * getElementSize(false,true).getHeight());    } else {      animationPosition+=(direction * getElementSize(false,true).getWidth());    }    destination=Math.abs(animationPosition);    initListMotion();  }}  }
class C{  private void bindPreferenceSummaryToValue(Preference preference){  preference.setOnPreferenceChangeListener(this);  setPreferenceSummary(preference,PreferenceManager.getDefaultSharedPreferences(preference.getContext()).getString(preference.getKey(),""));}  }
class C{  public int keyAt(int index){  if (mGarbage) {    gc();  }  return mKeys[index];}  }
class C{  public EMail createEMail(String to,String subject,String message){  if (to == null || to.length() == 0) {    log.warning("No To");    return null;  }  EMail email=null;  MClient client=MClient.get(getCtx(),getAD_Client_ID());  if (client.isServerEMail() && Ini.isClient()) {    Server server=CConnection.get().getServer();    try {      if (server != null) {        email=server.createEMail(Env.getRemoteCallCtx(getCtx()),getAD_Client_ID(),to,subject,message);      } else       log.log(Level.WARNING,"No AppsServer");    } catch (    Exception ex) {      log.log(Level.SEVERE,getName() + " - AppsServer error",ex);    }  }  String from=getWStoreEMail();  if (from == null || from.length() == 0)   from=client.getRequestEMail();  if (email == null)   email=new EMail(client,from,to,subject,message);  if (client.isSmtpAuthorization()) {    if (getWStoreEMail() != null && getWStoreUser() != null && getWStoreUserPW() != null)     email.createAuthenticator(getWStoreUser(),getWStoreUserPW()); else     email.createAuthenticator(client.getRequestUser(),client.getRequestUserPW());  }  email.addBcc(from);  return email;}  }
class C{  SystemMemberBridgeServerJmxImpl(SystemMemberCacheImpl cache,AdminBridgeServer bridgeInfo) throws AdminException {  super(cache,bridgeInfo);  initializeMBean(cache);}  }
class C{  @Deprecated public String createExperimentTree(int indent){  return createProcessTree(indent);}  }
class C{  public static void navigateToTrafficPurchasePage(Context context,int slotId){  Intent intent=new Intent(NETWORKASSISTANT_PURCHASE_ACTION);  Bundle bundle=new Bundle();  bundle.putInt(BUNDLE_KEY_SLOTID,slotId);  intent.putExtra(BUNDLE_KEY_COMMON,bundle);  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  context.startActivity(intent);}  }
class C{  public void executeQuery(String query) throws SQLException {  executeQuery(this.connection,query);}  }
class C{  void variableNegationChanged(int row,String oper){  ConditionalVariable variable=_variableList.get(row);  boolean state=variable.isNegated();  if (oper == null) {    variable.setNegation(false);  } else {    variable.setNegation(oper.equals(Bundle.getMessage("LogicNOT")));  }  if (variable.isNegated() != state) {    makeAntecedent();  }}  }
class C{  private void computeDegree(){  for (degree=coefficients.length - 1; degree >= 0 && coefficients[degree] == 0; degree--) {    ;  }}  }
class C{  public static boolean validateMirrorOperationSupported(FileShare fs,VirtualPool currentVpool,StringBuffer notSuppReasonBuff,String operation){  _log.info("Checking if mirror operation {} is supported for file system {} ",operation,fs.getLabel());  if (!doBasicMirrorValidation(fs,currentVpool,notSuppReasonBuff)) {    return false;  }  if (fs.getPersonality() == null || !fs.getPersonality().equals(PersonalityTypes.SOURCE.name())) {    notSuppReasonBuff.append(String.format("File system - %s given in request is not having any active replication.",fs.getLabel()));    _log.info(notSuppReasonBuff.toString());    return false;  }  String currentMirrorStatus=fs.getMirrorStatus();  boolean isSupported=false;switch (operation) {case "refresh":    isSupported=true;  break;case "start":if (currentMirrorStatus.equalsIgnoreCase(MirrorStatus.UNKNOWN.toString())) isSupported=true;break;case "stop":if (currentMirrorStatus.equalsIgnoreCase(MirrorStatus.SYNCHRONIZED.toString()) || currentMirrorStatus.equalsIgnoreCase(MirrorStatus.IN_SYNC.toString())) isSupported=true;break;case "pause":if (currentMirrorStatus.equalsIgnoreCase(MirrorStatus.SYNCHRONIZED.toString()) || currentMirrorStatus.equalsIgnoreCase(MirrorStatus.IN_SYNC.toString())) isSupported=true;break;case "resume":if (currentMirrorStatus.equalsIgnoreCase(MirrorStatus.PAUSED.toString())) isSupported=true;break;case "failover":if (!(currentMirrorStatus.equalsIgnoreCase(MirrorStatus.UNKNOWN.toString()) || currentMirrorStatus.equalsIgnoreCase(MirrorStatus.FAILED_OVER.toString()))) isSupported=true;break;case "failback":if (currentMirrorStatus.equalsIgnoreCase(MirrorStatus.FAILED_OVER.toString())) isSupported=true;break;}notSuppReasonBuff.append(String.format(" : file system %s is in %s state",fs.getLabel(),currentMirrorStatus.toUpperCase()));return isSupported;}  }
class C{  private long calculateAnimationDelay1(int position){  int firstVisiblePosition=Utils.findFirstCompletelyVisibleItemPosition(mRecyclerView.getLayoutManager());  int lastVisiblePosition=Utils.findLastCompletelyVisibleItemPosition(mRecyclerView.getLayoutManager());  if (mMaxChildViews < mRecyclerView.getChildCount())   mMaxChildViews=mRecyclerView.getChildCount();  if (mLastAnimatedPosition > lastVisiblePosition)   lastVisiblePosition=mLastAnimatedPosition;  int visibleItems=lastVisiblePosition - firstVisiblePosition;  if (mLastAnimatedPosition > visibleItems || (firstVisiblePosition > 1 && firstVisiblePosition <= mMaxChildViews)) {    if (DEBUG)     Log.v(TAG,"Reset AnimationDelay on position " + position);    return 0L;  }  return mInitialDelay+=mStepDelay;}  }
class C{  public String testAbstractClass_method2(int p1,int p2) throws java.io.IOException, java.lang.NullPointerException {  return null;}  }
class C{  public void addElevations(String filename) throws IOException {  if (filename == null) {    String message=Logging.getMessage("nullValue.FilePathIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.addElevations(new File(filename));}  }
class C{  public JLBHOptions pauseAfterWarmupMS(int pauseMS){  this.pauseAfterWarmupMS=pauseMS;  return this;}  }
class C{  public static LoginDialogFragment newInstance(LoginDialogInterface loginDialogInterface){  LoginDialogFragment frag=new LoginDialogFragment();  frag.loginDialogInterface=loginDialogInterface;  return frag;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void serialize(DataOutput out) throws IOException {  out.writeUTF(id);  out.writeUTF(version);  out.writeInt(sourceFiles.size());  for (  Entry<String,List<RevisionFile>> e : sourceFiles.entrySet()) {    out.writeUTF(e.getKey());    List<RevisionFile> files=e.getValue();    out.writeInt(files.size());    for (    RevisionFile file : files) {      out.writeUTF(file.fileName);      out.writeLong(file.size);    }  }}  }
class C{  @SuppressWarnings("unchecked") public boolean canRun(Class scriptClass,GroovyClassLoader loader){  boolean isTest=false;  try {    try {      Class testAnnotationClass=loader.loadClass("org.testng.annotations.Test");      Annotation annotation=scriptClass.getAnnotation(testAnnotationClass);      if (annotation != null) {        isTest=true;      } else {        Method[] methods=scriptClass.getMethods();        for (        Method method : methods) {          annotation=method.getAnnotation(testAnnotationClass);          if (annotation != null) {            isTest=true;            break;          }        }      }    } catch (    ClassNotFoundException e) {    }  } catch (  Throwable e) {  }  return isTest;}  }
class C{  public void receive(Command c,Map h,String b){  if (c == Command.CONNECT) {    String login=(String)h.get("login");    String passcode=(String)h.get("passcode");    try {      _client_token=Server.this._authenticator.connect(login,passcode);      HashMap headers=new HashMap();      headers.put("session",String.valueOf(this.hashCode()));      transmit(Command.CONNECTED,headers,null);      _authenticated=true;    } catch (    javax.security.auth.login.LoginException e) {      transmit(Command.ERROR,null,"Login failed: " + e.getMessage());    }  } else {    if (!_authenticated) {      transmit(Command.ERROR,null,"Not CONNECTed, or not authorized");      return;    }    if (c == Command.DISCONNECT) {      if (h != null) {        String receipt=(String)h.get("receipt");        if (receipt != null) {          HashMap headers=new HashMap();          headers.put("receipt-id",receipt);          receive(Command.RECEIPT,headers,null);        }      }      _server.disconnect(this);      this.interrupt();      Thread.yield();      close();    } else     if (c == Command.ERROR) {      error(h,b);    } else {      _server.receive(c,h,b,this);    }  }}  }
class C{  public void testRandomStrings() throws Exception {  GermanAnalyzer a=new GermanAnalyzer();  checkRandomData(random(),a,1000 * RANDOM_MULTIPLIER);  a.close();}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(SSLTest.class);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader1=null;  String inputHeader2=null;  String outputHeader=null;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData1);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            outputFile.setValue(row,col,z1 * z2);          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData) {            outputFile.setValue(row,col,z1 * constant2);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile2.getPreferredPalette());      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData) {            outputFile.setValue(row,col,constant1 * z2);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static int checkSurveyResponse(HttpServletRequest request,String surveyId){  Delegator delegator=(Delegator)request.getAttribute("delegator");  GenericValue userLogin=(GenericValue)request.getSession().getAttribute("userLogin");  String productStoreId=getProductStoreId(request);  if (userLogin == null) {    return -1;  }  return checkSurveyResponse(delegator,userLogin.getString("partyId"),productStoreId,surveyId);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:47.825 -0500",hash_original_method="8F77A2CC8A8F4FEA0C562F269098A504",hash_generated_method="6F9397923729EA05DF2FDDC904142520") public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {  if (documentHandler != null)   documentHandler.ignorableWhitespace(ch,start,length);}  }
class C{  @Override public void close(){  shutdown(ShutdownModeAmp.GRACEFUL);}  }
class C{  public KeyboardButton.KeyboardButtonBuilder text(String text){  this.text=text;  return this;}  }
class C{  public static double sqrt(double a){  return 0.0d;}  }
class C{  public void addAll(double[] vals){  double[] wghts=new double[vals.length];  Arrays.fill(wghts,1.0);  addAll(vals,wghts);}  }
class C{  private void saveAndClose(boolean save){  content.setEnabled(false);  if (timer != null) {    timer.cancel();    timer=null;  }  if (timerNextSync != null) {    timerNextSync.cancel();    timerNextSync=null;  }  if (save) {    Log.d(LOG_TAG,"saveAndClose with SAVE");    saveData(null);  } else {    Log.d(LOG_TAG,"saveAndClose WITHOUT save");  }  Intent data=new Intent();  data.setAction(Intent.ACTION_VIEW);  data.putExtra(PARAM_NOTE,note);  data.putExtra(PARAM_NOTE_POSITION,notePosition);  setResult(RESULT_OK,data);  finish();}  }
class C{  protected void addMapping(int hashIndex,int hashCode,Object key,Object value){  modCount++;  HashEntry entry=createEntry(data[hashIndex],hashCode,key,value);  addEntry(entry,hashIndex);  size++;  checkCapacity();}  }
class C{  public Task<VirtualDataCenterRestRep> delete(URI id){  TaskResourceRep task=client.delete(TaskResourceRep.class,getIdUrl(),id);  return new Task<VirtualDataCenterRestRep>(client,task,resourceClass);}  }
class C{  public static void resume(final TargetProcessThread thread){  thread.setState(ThreadState.RUNNING);}  }
class C{  @Override public byte[] encode(){  byte binValue[]=new byte[HEADER_LENGTH + DATA_LENGTH];  binValue[0]=(byte)(getAttributeType() >> 8);  binValue[1]=(byte)(getAttributeType() & 0x00FF);  binValue[2]=(byte)(getDataLength() >> 8);  binValue[3]=(byte)(getDataLength() & 0x00FF);  binValue[4]=(byte)family;  return binValue;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:38.961 -0500",hash_original_method="7052304410F6ACDD18F00D1DE979132C",hash_generated_method="BB80C96EAFAACFABC6CADBC976E9EB8F") public Switch(Context context,AttributeSet attrs,int defStyle){  super(context,attrs,defStyle);  mTextPaint=new TextPaint(Paint.ANTI_ALIAS_FLAG);  Resources res=getResources();  mTextPaint.density=res.getDisplayMetrics().density;  mTextPaint.setCompatibilityScaling(res.getCompatibilityInfo().applicationScale);  TypedArray a=context.obtainStyledAttributes(attrs,com.android.internal.R.styleable.Switch,defStyle,0);  mThumbDrawable=a.getDrawable(com.android.internal.R.styleable.Switch_thumb);  mTrackDrawable=a.getDrawable(com.android.internal.R.styleable.Switch_track);  mTextOn=a.getText(com.android.internal.R.styleable.Switch_textOn);  mTextOff=a.getText(com.android.internal.R.styleable.Switch_textOff);  mThumbTextPadding=a.getDimensionPixelSize(com.android.internal.R.styleable.Switch_thumbTextPadding,0);  mSwitchMinWidth=a.getDimensionPixelSize(com.android.internal.R.styleable.Switch_switchMinWidth,0);  mSwitchPadding=a.getDimensionPixelSize(com.android.internal.R.styleable.Switch_switchPadding,0);  int appearance=a.getResourceId(com.android.internal.R.styleable.Switch_switchTextAppearance,0);  if (appearance != 0) {    setSwitchTextAppearance(context,appearance);  }  a.recycle();  ViewConfiguration config=ViewConfiguration.get(context);  mTouchSlop=config.getScaledTouchSlop();  mMinFlingVelocity=config.getScaledMinimumFlingVelocity();  refreshDrawableState();  setChecked(isChecked());}  }
class C{  Expression simplify(){  return this;}  }
class C{  public TypeScriptSearchActionGroup(IViewPart part){  this(part.getViewSite());}  }
class C{  public void foo(@NonNull Object o){}  }
class C{  public MutableDateTime toMutableDateTimeISO(){  return new MutableDateTime(getMillis(),ISOChronology.getInstance(getZone()));}  }
class C{  public Object onMessage(String id,Object data){  return null;}  }
class C{  public void removeLinks(){  state.links.clear();}  }
class C{  private void addCalendarEvent(String summary,Date start,boolean allDay,Date end,String location,String description,String[] attendees){  Intent intent=new Intent(Intent.ACTION_INSERT);  intent.setType("vnd.android.cursor.item/event");  long startMilliseconds=start.getTime();  intent.putExtra("beginTime",startMilliseconds);  if (allDay) {    intent.putExtra("allDay",true);  }  long endMilliseconds;  if (end == null) {    if (allDay) {      endMilliseconds=startMilliseconds + 24 * 60 * 60* 1000;    } else {      endMilliseconds=startMilliseconds;    }  } else {    endMilliseconds=end.getTime();  }  intent.putExtra("endTime",endMilliseconds);  intent.putExtra("title",summary);  intent.putExtra("eventLocation",location);  intent.putExtra("description",description);  if (attendees != null) {    intent.putExtra(Intent.EXTRA_EMAIL,attendees);  }  try {    rawLaunchIntent(intent);  } catch (  ActivityNotFoundException anfe) {    Log.w(TAG,"No calendar app available that responds to " + Intent.ACTION_INSERT);    intent.setAction(Intent.ACTION_EDIT);    launchIntent(intent);  }}  }
class C{  @Override public void endElement(String uri,String name,String qName){  setContent(content.toString().trim());  content=new StringBuffer();  inside="";  if (qName.equals("tag"))   endTag(); else   if (qName.equals("attribute"))   endAtt(); else   if (qName.equals("script"))   endScript();}  }
class C{  public void generate(int keyBits) throws InvalidKeyException {  KeyPair pair;  try {    if (prng == null) {      prng=new SecureRandom();    }    keyGen.initialize(keyBits,prng);    pair=keyGen.generateKeyPair();  } catch (  Exception e) {    throw new IllegalArgumentException(e.getMessage());  }  publicKey=pair.getPublic();  privateKey=pair.getPrivate();  if (!"X.509".equalsIgnoreCase(publicKey.getFormat())) {    throw new IllegalArgumentException("publicKey's is not X.509, but " + publicKey.getFormat());  }}  }
class C{  public static int decodeDigit(char character) throws DecodingException {  final int result=character - ASCII_ZERO;  if (result < 0 || result > 9) {    throw new DecodingException(HumanReadableText.ILLEGAL_ARGUMENTS,"Expected a digit but was '" + character + "'");  }  return result;}  }
class C{  @Override public void redrawRegion(Rectangle2D region,double scaleX,double scaleY,Shape savedClip,AffineTransform savedTransform) throws PrinterException {  WPrinterJob wPrinterJob=(WPrinterJob)getPrinterJob();  Printable painter=getPrintable();  PageFormat pageFormat=getPageFormat();  int pageIndex=getPageIndex();  BufferedImage deepImage=new BufferedImage((int)region.getWidth(),(int)region.getHeight(),BufferedImage.TYPE_3BYTE_BGR);  Graphics2D g=deepImage.createGraphics();  ProxyGraphics2D proxy=new ProxyGraphics2D(g,wPrinterJob);  proxy.setColor(Color.white);  proxy.fillRect(0,0,deepImage.getWidth(),deepImage.getHeight());  proxy.clipRect(0,0,deepImage.getWidth(),deepImage.getHeight());  proxy.translate(-region.getX(),-region.getY());  float sourceResX=(float)(wPrinterJob.getXRes() / scaleX);  float sourceResY=(float)(wPrinterJob.getYRes() / scaleY);  proxy.scale(sourceResX / DEFAULT_USER_RES,sourceResY / DEFAULT_USER_RES);  proxy.translate(-wPrinterJob.getPhysicalPrintableX(pageFormat.getPaper()) / wPrinterJob.getXRes() * DEFAULT_USER_RES,-wPrinterJob.getPhysicalPrintableY(pageFormat.getPaper()) / wPrinterJob.getYRes() * DEFAULT_USER_RES);  proxy.transform(new AffineTransform(getPageFormat().getMatrix()));  proxy.setPaint(Color.black);  painter.print(proxy,pageFormat,pageIndex);  g.dispose();  if (savedClip != null) {    deviceClip(savedClip.getPathIterator(savedTransform));  }  Rectangle2D.Float scaledBounds=new Rectangle2D.Float((float)(region.getX() * scaleX),(float)(region.getY() * scaleY),(float)(region.getWidth() * scaleX),(float)(region.getHeight() * scaleY));  ByteComponentRaster tile=(ByteComponentRaster)deepImage.getRaster();  wPrinterJob.drawImage3ByteBGR(tile.getDataStorage(),scaledBounds.x,scaledBounds.y,scaledBounds.width,scaledBounds.height,0f,0f,deepImage.getWidth(),deepImage.getHeight());}  }
class C{  public Label(){}  }
class C{  public static boolean isEmailAddress(String address){  if (TextUtils.isEmpty(address)) {    return false;  }  String s=extractAddrSpec(address);  Matcher match=Patterns.EMAIL_ADDRESS.matcher(s);  return match.matches();}  }
class C{  private static String prepareInstruction(String inst){  String tmp=inst;  tmp=tmp.replaceAll(Lop.OPERAND_DELIMITOR," ");  tmp=tmp.replaceAll(Lop.DATATYPE_PREFIX,".");  tmp=tmp.replaceAll(Lop.INSTRUCTION_DELIMITOR,", ");  return tmp;}  }
class C{  public void invalidateLayout(Container target){}  }
class C{  public CharSeq prepend(CharSeq another){  return new CharSeq(another.str + str);}  }
class C{  protected static char[] encodeHex(final byte[] data,final char[] toDigits){  final int l=data.length;  final char[] out=new char[l << 1];  for (int i=0, j=0; i < l; i++) {    out[j++]=toDigits[(0xF0 & data[i]) >>> 4];    out[j++]=toDigits[0x0F & data[i]];  }  return out;}  }
class C{  public void mouseDragged(MouseEvent e){  VisualizationViewer<?,?> vv=(VisualizationViewer<?,?>)e.getSource();  boolean accepted=checkModifiers(e);  if (accepted) {    if (vv instanceof SatelliteVisualizationViewer) {      VisualizationViewer<?,?> vvMaster=((SatelliteVisualizationViewer<?,?>)vv).getMaster();      MutableTransformer modelTransformerMaster=vvMaster.getRenderContext().getMultiLayerTransformer().getTransformer(Layer.LAYOUT);      vv.setCursor(Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR));      try {        Point2D q=vv.getRenderContext().getMultiLayerTransformer().inverseTransform(down);        Point2D p=vv.getRenderContext().getMultiLayerTransformer().inverseTransform(e.getPoint());        float dx=(float)(p.getX() - q.getX());        float dy=(float)(p.getY() - q.getY());        modelTransformerMaster.translate(-dx,-dy);        down.x=e.getX();        down.y=e.getY();      } catch (      RuntimeException ex) {        System.err.println("down = " + down + ", e = "+ e);        throw ex;      }    }    e.consume();  }}  }
class C{  public MultipleSoloMapComponentException(){  super();}  }
class C{  public static String toString(Memory mem){  return memoryToString(mem);}  }
class C{  public static short[] resize(short buffer[],int newSize){  short temp[]=new short[newSize];  System.arraycopy(buffer,0,temp,0,buffer.length >= newSize ? newSize : buffer.length);  return temp;}  }
class C{  private void logResponse(HttpURLConnection connection,String responseBody) throws IOException {  String responseLog="Response URL : " + connection.getURL() + "\n";  responseLog+="Response Code : " + connection.getResponseCode() + "\n";  responseLog+="Response Headers : " + "\n";  for (  Map.Entry<String,List<String>> header : connection.getHeaderFields().entrySet()) {    for (    String value : header.getValue()) {      if (header.getKey() == null) {        responseLog+="\t\t" + value + "\n";      } else {        responseLog+="\t\t" + header.getKey() + ":"+ value+ "\n";      }    }  }  responseLog+="Response Body : " + responseBody + "\n";  Log.i(TAG,responseLog);  if (connection.getHeaderField("X-Android-Sent-Millis") != null && connection.getHeaderField("X-Android-Received-Millis") != null) {    long messageSentMillis=Long.parseLong(connection.getHeaderField("X-Android-Sent-Millis"));    long messageReceivedMillis=Long.parseLong(connection.getHeaderField("X-Android-Received-Millis"));    Log.i(TAG,"Request Duration : " + (messageReceivedMillis - messageSentMillis) + " millisecs \n");  }}  }
class C{  public boolean hasPositionData(){  return hasExtension(PositionData.class);}  }
class C{  void updateMaskIfNecessary(){  if (!getAllowsInvalid() && (getFormat() != null)) {    if (!isValidMask()) {      updateMask();    } else {      String newString=getFormattedTextField().getText();      if (!newString.equals(string)) {        updateMask();      }    }  }}  }
class C{  public boolean hitObject(Object object,DrawInfo2D range){  if (preciseEllipse == null)   preciseEllipse=new Ellipse2D.Double();  final double SLOP=1.0;  final double width=range.draw.width * scale;  final double height=range.draw.height * scale;  preciseEllipse.setFrame(range.draw.x - width / 2 - SLOP,range.draw.y - height / 2 - SLOP,width + SLOP * 2,height + SLOP * 2);  return (preciseEllipse.intersects(range.clip.x,range.clip.y,range.clip.width,range.clip.height));}  }
