class C{  public Uniform(double min,double max,RandomEngine randomGenerator){  setRandomGenerator(randomGenerator);  setState(min,max);}  }
class C{  public String toStringX(){  StringBuffer sb=new StringBuffer("MLocation=[");  sb.append(get_ID()).append(",C_Country_ID=").append(getC_Country_ID()).append(",C_Region_ID=").append(getC_Region_ID()).append(",Postal=").append(getPostal()).append("]");  return sb.toString();}  }
class C{  public ContinueException(){}  }
class C{  public static synchronized void xit(String description,Function<ExampleConfiguration.Builder,ExampleConfiguration.Builder> collector,UnsafeBlock block){  notAllowedWhenCIModeEnabled("xit");  isValidContext("xit");  ExampleConfiguration config=collector.apply(new ExampleConfiguration.Builder()).description(description).executionFlag(IGNORED).build();  contexts.get().current().addExample(config,block);}  }
class C{  @Override protected int calcDamagePerHit(){  double toReturn=0;  if (target instanceof Infantry && !(target instanceof BattleArmor)) {    toReturn=Compute.d6();    if (((Infantry)target).isMechanized()) {      toReturn/=3;    } else {      toReturn/=2;    }    toReturn=Math.max(1,toReturn);  } else   if (target instanceof BattleArmor) {    toReturn=1;  }  return (int)toReturn;}  }
class C{  void cancel(){  isCancelled=true;}  }
class C{  public PackedLongIV(final String value){  this(Long.valueOf(value));}  }
class C{  public boolean hasErrors(){  return mHasErrors;}  }
class C{  private CipherBox(ProtocolVersion protocolVersion,BulkCipher bulkCipher,SecretKey key,IvParameterSpec iv,SecureRandom random,boolean encrypt) throws NoSuchAlgorithmException {  try {    this.protocolVersion=protocolVersion;    this.cipher=JsseJce.getCipher(bulkCipher.transformation);    this.mode=encrypt ? Cipher.ENCRYPT_MODE : Cipher.DECRYPT_MODE;    if (random == null) {      random=JsseJce.getSecureRandom();    }    this.random=random;    this.cipherType=bulkCipher.cipherType;    if (iv == null && bulkCipher.ivSize != 0 && mode == Cipher.DECRYPT_MODE && protocolVersion.v >= ProtocolVersion.TLS11.v) {      iv=getFixedMask(bulkCipher.ivSize);    }    if (cipherType == AEAD_CIPHER) {      tagSize=bulkCipher.tagSize;      this.key=key;      fixedIv=iv.getIV();      if (fixedIv == null || fixedIv.length != bulkCipher.fixedIvSize) {        throw new RuntimeException("Improper fixed IV for AEAD");      }      recordIvSize=bulkCipher.ivSize - bulkCipher.fixedIvSize;    } else {      this.tagSize=0;      this.fixedIv=new byte[0];      this.recordIvSize=0;      this.key=null;      cipher.init(mode,key,iv,random);    }  } catch (  NoSuchAlgorithmException e) {    throw e;  }catch (  Exception e) {    throw new NoSuchAlgorithmException("Could not create cipher " + bulkCipher,e);  }catch (  ExceptionInInitializerError e) {    throw new NoSuchAlgorithmException("Could not create cipher " + bulkCipher,e);  }}  }
class C{  public RecipeSearch(GoogleBaseService service,FeedURLFactory urlFactory,boolean ownItems){  this.service=service;  this.urlFactory=urlFactory;  this.ownItems=ownItems;  mainIngredient=null;  cuisine=null;  cookingTime=null;  query=null;  queryClean=null;}  }
class C{  private void sleep(long sleeptime){  try {    Thread.sleep(sleeptime);  } catch (  InterruptedException e) {  }}  }
class C{  @Nullable public static Point intersect(int xa,int ya,int xb,int yb,int xc,int yc,int xd,int yd){  double denom=((xb - xa) * (yd - yc) - (yb - ya) * (xd - xc));  double rnum=((ya - yc) * (xd - xc) - (xa - xc) * (yd - yc));  if (denom == 0.0) {    if (rnum == 0.0) {      if ((xa < xb && (xb < xc || xb < xd)) || (xa > xb && (xb > xc || xb > xd))) {        return new Point(xb,yb);      } else {        return new Point(xa,ya);      }    } else {      return null;    }  }  double r=rnum / denom;  double snum=((ya - yc) * (xb - xa) - (xa - xc) * (yb - ya));  double s=snum / denom;  if (0.0 <= r && r <= 1.0 && 0.0 <= s && s <= 1.0) {    int px=(int)(xa + (xb - xa) * r);    int py=(int)(ya + (yb - ya) * r);    return new Point(px,py);  } else {    return null;  }}  }
class C{  public void pauseTrigger(TriggerKey triggerKey) throws SchedulerException {  try {    getRemoteScheduler().pauseTrigger(triggerKey);  } catch (  RemoteException re) {    throw invalidateHandleCreateException("Error communicating with remote scheduler.",re);  }}  }
class C{  public TriggerProcessStatusException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  @SuppressWarnings("RedundantIfStatement") public static boolean equals(cn.nukkit.level.Location a,cn.nukkit.level.Location b){  if (Math.abs(a.getX() - b.getX()) > EQUALS_PRECISION)   return false;  if (Math.abs(a.getY() - b.getY()) > EQUALS_PRECISION)   return false;  if (Math.abs(a.getZ() - b.getZ()) > EQUALS_PRECISION)   return false;  return true;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public DrawerBuilder withAdapter(@NonNull BaseDrawerAdapter adapter){  if (mAdapter != null) {    throw new RuntimeException("the adapter was already set or items were added to it. A header is also a RecyclerItem");  }  this.mAdapter=adapter;  return this;}  }
class C{  private StateTrackableDelegate(State state){  this.theState=state;}  }
class C{  public Object clone(){  return new CharSet(chars);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.830 -0500",hash_original_method="5731BA9CD64E4E7BEF9BBCA44F05227A",hash_generated_method="B70511FEEEC415EBAA2F6405B63918CF") public NewsgroupInfo[] listNewsgroups() throws IOException {  if (!NNTPReply.isPositiveCompletion(list()))   return null;  return __readNewsgroupListing();}  }
class C{  public void init(int WindowNo,FormFrame frame){  log.info("");  m_WindowNo=WindowNo;  m_frame=frame;  try {    jbInit();    dynInit();    m_loadedOK=true;    if (checkAutoQuery.isSelected()) {      setFieldOldValues();      loadTableInfo();    }  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);  }}  }
class C{  public void testLucene() throws IOException {  int num=100;  Directory indexA=newDirectory();  Directory indexB=newDirectory();  fillIndex(random(),indexA,0,num);  boolean fail=verifyIndex(indexA,0);  if (fail) {    fail("Index a is invalid");  }  fillIndex(random(),indexB,num,num);  fail=verifyIndex(indexB,num);  if (fail) {    fail("Index b is invalid");  }  Directory merged=newDirectory();  IndexWriter writer=new IndexWriter(merged,newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy(2)));  writer.addIndexes(indexA,indexB);  writer.forceMerge(1);  writer.close();  fail=verifyIndex(merged,0);  assertFalse("The merged index is invalid",fail);  indexA.close();  indexB.close();  merged.close();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:39.194 -0500",hash_original_method="C012E24E08CF652349C6D573E660029C",hash_generated_method="8DF0AA288D0153FB277CC9AFFA6D62D9") public boolean hasMimeType(String mimeType){  for (int i=0; i < mMimeTypes.length; i++) {    if (compareMimeTypes(mMimeTypes[i],mimeType)) {      return true;    }  }  return false;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:31.638 -0500",hash_original_method="5EAE66D49E862BAEE0E410CA69871D83",hash_generated_method="1F6A742B0361C640F57D2BBE59EB53D0") public AddressFactoryImpl(){}  }
class C{  public static void fail(String message){  Class<?> junitAssertionFailedError=null;  try {    ClassLoader cl=Thread.currentThread().getContextClassLoader();    junitAssertionFailedError=Class.forName(JUNIT_ASSERTIONFAILED_ERROR,true,cl);  } catch (  ClassNotFoundException ex) {    throw new AssertionError();  }  if (junitAssertionFailedError == null) {    throw new AssertionError("Failed assertion and no JUnit found in classpath: " + message);  }  Constructor<?> ctor;  try {    ctor=junitAssertionFailedError.getConstructor(new Class[]{String.class});  } catch (  NoSuchMethodException e) {    throw new AssertionError("Failed to find JUnit method 'fail' method: " + e.getMessage());  }  try {    throw (AssertionError)ctor.newInstance(new Object[]{message});  } catch (  Exception e) {    throw new AssertionError("Failed to call ctor of '" + JUNIT_ASSERTIONFAILED_ERROR + "': "+ e.getMessage());  }}  }
class C{  public T caseWithStatement(WithStatement object){  return null;}  }
class C{  private void put(char[] string,int tokenType){  int hashCode=getHashCode(string,0,string.length);  addTokenToBucket(hashCode,new TokenMapToken(string,tokenType));}  }
class C{  public static void init(Context context){  if (cameraManager == null) {    cameraManager=new CameraManager(context);  }}  }
class C{  public boolean renewLease(IPv4Address ip,int time){  DHCPBinding binding=this.getDHCPbindingFromIPv4(ip);  if (binding != null) {    binding.setLeaseStartTimeSeconds();    binding.setLeaseDurationSeconds(time);    binding.setLeaseStatus(true);    return true;  }  return false;}  }
class C{  protected void addResources(JBoss7xInstalledLocalContainer container){  String version=container.getVersion("7.5.7.Final");  getLogger().debug("Parsing micro version for version: " + version,this.getClass().getName());  String microVersion=version.substring(version.indexOf(".",2) + 1,version.indexOf(".",4));  int microVersionValue=Integer.parseInt(microVersion);  String configurationXmlFile="configuration/" + getPropertyValue(JBossPropertySet.CONFIGURATION) + ".xml";  Map<String,String> ns=new HashMap<String,String>();  ns.put("mail","urn:jboss:domain:mail:1.2");  if (microVersionValue >= 7) {    ns.put("domain","urn:jboss:domain:1.8");  } else {    ns.put("domain","urn:jboss:domain:1.7");  }  String configurationXmlFilePath=getFileHandler().append(getHome(),configurationXmlFile);  for (  Resource resource : getResources()) {    if (ConfigurationEntryType.MAIL_SESSION.equals(resource.getType())) {      String host=resource.getParameter("mail.smtp.host") != null ? resource.getParameter("mail.smtp.host") : "localhost";      String port=resource.getParameter("mail.smtp.port") != null ? resource.getParameter("mail.smtp.port") : "25";      XmlFileBuilder manager=new DefaultXmlFileBuilder(getFileHandler(),true);      manager.setFile(configurationXmlFilePath);      Document document=manager.loadFile();      manager.setNamespaces(ns);      String jndiName=resource.getName();      if (!jndiName.startsWith("java:/")) {        jndiName="java:/" + jndiName;        getLogger().warn("JBoss 7 requires resource JNDI names to start with " + "java:/, hence changing the given JNDI name to: " + jndiName,this.getClass().getName());      }      Element mailSession=document.createElement("mail-session");      mailSession.setAttribute("jndi-name",jndiName);      mailSession.setAttribute("name",resource.getId());      if (resource.getParameter("mail.smtp.from") != null) {        mailSession.setAttribute("from",resource.getParameter("mail.smtp.from"));      }      Element smtpServer=mailSession.getOwnerDocument().createElement("smtp-server");      mailSession.appendChild(smtpServer);      smtpServer.setAttribute("outbound-socket-binding-ref",resource.getId());      manager.insertElementUnderXPath(mailSession,"//domain:profile/mail:subsystem");      Element socketBinding=document.createElement("outbound-socket-binding");      socketBinding.setAttribute("name",resource.getId());      Element remoteDestination=socketBinding.getOwnerDocument().createElement("remote-destination");      socketBinding.appendChild(remoteDestination);      remoteDestination.setAttribute("host",host);      remoteDestination.setAttribute("port",port);      manager.insertElementUnderXPath(socketBinding,"//domain:socket-binding-group");      manager.writeFile();    } else {      throw new CargoException("Resource type " + resource.getType() + " isn't supported.");    }  }}  }
class C{  protected int bytesPerAtom(){  return (3);}  }
class C{  private void fetchDocumentStart(){  fetchDocumentIndicator(true);}  }
class C{  public static ConfigurationLoader forFile(Path configFile){  try {    ConfigurationSet.Builder configSetBuilder=ConfigurationSet.newBuilder();    String fileContent=Joiner.on('\n').join(Files.readAllLines(configFile));    JsonFormat.parser().merge(fileContent,configSetBuilder);    return ConfigurationLoader.forConfigSet(configSetBuilder.build());  } catch (  IOException e) {    throw new RuntimeException("Unable to read config file: " + configFile.toString(),e);  }}  }
class C{  public void onSignInPressed(View view){  Intent intent=new Intent(CreateAccountActivity.this,LoginActivity.class);  intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);  startActivity(intent);  finish();}  }
class C{  public IndexSegmentPlan(final int m,final long nentries){  if (m < Options.MIN_BRANCHING_FACTOR)   throw new IllegalArgumentException();  if (nentries < 0)   throw new IllegalArgumentException();  this.m=m;  this.nentries=nentries;  m2=(m + 1) / 2;  if (nentries == 0) {    if (log.isInfoEnabled())     log.info("Empty tree.");    nleaves=1;    height=0;    numInLeaf=new int[]{0};    numInNode=new int[][]{new int[]{0}};    numInLevel=new long[]{1};    nnodes=0;    return;  }  nleaves=(int)Math.ceil((double)nentries / (double)m);  height=getMinimumHeight(m,nleaves);  if (log.isInfoEnabled())   log.info("branchingFactor=" + m + ", nentries="+ nentries+ ", nleaves="+ nleaves+ ", height="+ height);  numInLeaf=distributeKeys(m,m2,nleaves,nentries);  numInNode=new int[height + 1][];  numInLevel=new long[height + 1];  long nchildren=nleaves;  int nnodes=0;  for (int h=height - 1; h >= 0; h--) {    final long numThisLevel=(long)Math.ceil((double)nchildren / (double)m);    numInLevel[h]=numThisLevel;    numInNode[h]=distributeChildren(m,m2,numThisLevel,nchildren);    nchildren=numThisLevel;    nnodes+=numThisLevel;  }  numInNode[height]=numInLeaf;  numInLevel[height]=nleaves;  this.nnodes=nnodes;}  }
class C{  public boolean equalTo(Entry e){  if (e == null)   return false;  if (e.mData != this.mData)   return false;  if (e.mXIndex != this.mXIndex)   return false;  if (Math.abs(e.mVal - this.mVal) > 0.00001f)   return false;  return true;}  }
class C{  private void paintData(Graphics gx){  for (int j=0; j < m_plots.size(); j++) {    PlotData2D temp_plot=(m_plots.get(j));    for (int i=0; i < temp_plot.m_plotInstances.numInstances(); i++) {      if (temp_plot.m_plotInstances.instance(i).isMissing(m_xIndex) || temp_plot.m_plotInstances.instance(i).isMissing(m_yIndex)) {      } else {        double x=(temp_plot.m_pointLookup[i][0] + temp_plot.m_pointLookup[i][2]);        double y=(temp_plot.m_pointLookup[i][1] + temp_plot.m_pointLookup[i][3]);        double prevx=0;        double prevy=0;        if (i > 0) {          prevx=(temp_plot.m_pointLookup[i - 1][0] + temp_plot.m_pointLookup[i - 1][2]);          prevy=(temp_plot.m_pointLookup[i - 1][1] + temp_plot.m_pointLookup[i - 1][3]);        }        int x_range=(int)x - m_XaxisStart;        int y_range=(int)y - m_YaxisStart;        if (x_range >= 0 && y_range >= 0) {          if (m_drawnPoints[x_range][y_range] == i || m_drawnPoints[x_range][y_range] == 0 || temp_plot.m_shapeSize[i] == temp_plot.m_alwaysDisplayPointsOfThisSize || temp_plot.m_displayAllPoints == true) {            m_drawnPoints[x_range][y_range]=i;            if (temp_plot.m_plotInstances.attribute(m_cIndex).isNominal()) {              if (temp_plot.m_plotInstances.attribute(m_cIndex).numValues() > m_colorList.size() && !temp_plot.m_useCustomColour) {                extendColourMap(temp_plot.m_plotInstances.attribute(m_cIndex).numValues());              }              Color ci;              if (temp_plot.m_plotInstances.instance(i).isMissing(m_cIndex)) {                ci=Color.gray;              } else {                int ind=(int)temp_plot.m_plotInstances.instance(i).value(m_cIndex);                ci=m_colorList.get(ind);              }              if (!temp_plot.m_useCustomColour) {                gx.setColor(ci);              } else {                gx.setColor(temp_plot.m_customColour);              }              if (temp_plot.m_plotInstances.instance(i).isMissing(m_cIndex)) {                if (temp_plot.m_connectPoints[i] == true) {                  drawDataPoint(x,y,prevx,prevy,temp_plot.m_shapeSize[i],MISSING_SHAPE,gx);                } else {                  drawDataPoint(x,y,temp_plot.m_shapeSize[i],MISSING_SHAPE,gx);                }              } else {                if (temp_plot.m_shapeType[i] == CONST_AUTOMATIC_SHAPE) {                  if (temp_plot.m_connectPoints[i] == true) {                    drawDataPoint(x,y,prevx,prevy,temp_plot.m_shapeSize[i],j,gx);                  } else {                    drawDataPoint(x,y,temp_plot.m_shapeSize[i],j,gx);                  }                } else {                  if (temp_plot.m_connectPoints[i] == true) {                    drawDataPoint(x,y,prevx,prevy,temp_plot.m_shapeSize[i],temp_plot.m_shapeType[i],gx);                  } else {                    drawDataPoint(x,y,temp_plot.m_shapeSize[i],temp_plot.m_shapeType[i],gx);                  }                }              }            } else {              double r;              Color ci=null;              if (!temp_plot.m_plotInstances.instance(i).isMissing(m_cIndex)) {                r=(temp_plot.m_plotInstances.instance(i).value(m_cIndex) - m_minC) / (m_maxC - m_minC);                r=(r * 240) + 15;                ci=new Color((int)r,150,(int)(255 - r));              } else {                ci=Color.gray;              }              if (!temp_plot.m_useCustomColour) {                gx.setColor(ci);              } else {                gx.setColor(temp_plot.m_customColour);              }              if (temp_plot.m_plotInstances.instance(i).isMissing(m_cIndex)) {                if (temp_plot.m_connectPoints[i] == true) {                  drawDataPoint(x,y,prevx,prevy,temp_plot.m_shapeSize[i],MISSING_SHAPE,gx);                } else {                  drawDataPoint(x,y,temp_plot.m_shapeSize[i],MISSING_SHAPE,gx);                }              } else {                if (temp_plot.m_shapeType[i] == CONST_AUTOMATIC_SHAPE) {                  if (temp_plot.m_connectPoints[i] == true) {                    drawDataPoint(x,y,prevx,prevy,temp_plot.m_shapeSize[i],j,gx);                  } else {                    drawDataPoint(x,y,temp_plot.m_shapeSize[i],j,gx);                  }                } else {                  if (temp_plot.m_connectPoints[i] == true) {                    drawDataPoint(x,y,prevx,prevy,temp_plot.m_shapeSize[i],temp_plot.m_shapeType[i],gx);                  } else {                    drawDataPoint(x,y,temp_plot.m_shapeSize[i],temp_plot.m_shapeType[i],gx);                  }                }              }            }          }        }      }    }  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public String scheme(){  return scheme;}  }
class C{  public GPUImageCrosshatchFilter(){  this(0.03f,0.003f);}  }
class C{  public JFileChooser(String currentDirectoryPath,FileSystemView fsv){  setup(fsv);  if (currentDirectoryPath == null) {    setCurrentDirectory(null);  } else {    setCurrentDirectory(fileSystemView.createFileObject(currentDirectoryPath));  }}  }
class C{  public boolean markSupported(){  if (skippingCipher != null) {    return in.markSupported();  }  return false;}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    double multiplier=Math.PI / 180;    if (inputFile.getZUnits().toLowerCase().contains("rad")) {      multiplier=1;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.cosh(z * multiplier));        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static final double[][] minusTimesEquals(final double[][] m1,final double[][] m2,final double s2){  assert (getRowDimensionality(m1) == getRowDimensionality(m2) && getColumnDimensionality(m1) == getColumnDimensionality(m2)) : ERR_MATRIX_DIMENSIONS;  for (int i=0; i < m1.length; i++) {    final double[] row1=m1[i];    final double[] row2=m2[i];    for (int j=0; j < row1.length; j++) {      row1[j]-=s2 * row2[j];    }  }  return m1;}  }
class C{  public void createPaymentForReseller(long platformAdminKey,long resellerAdminKey,VOOrganization reseller) throws Exception {  createPaymentForSeller(platformAdminKey,resellerAdminKey,reseller,UserRoleType.RESELLER_MANAGER);}  }
class C{  private void initActivityScope(Bundle savedInstanceState){  MortarScope parentScope=Mortar.getScope(getApplication());  activityScope=Mortar.requireActivityScope(parentScope,new MainScreen());  Mortar.inject(this,this);  activityScope.onCreate(savedInstanceState);}  }
class C{  private TestCase create(File base,Element testCaseElement){  Element filePathElement=(Element)testCaseElement.getElementsByTagName("file-path").item(0);  Element purposeElement=(Element)testCaseElement.getElementsByTagName("purpose").item(0);  Element specCitationElement=(Element)testCaseElement.getElementsByTagName("spec-citation").item(0);  Element scenarioElement=(Element)testCaseElement.getElementsByTagName("scenario").item(0);  String category=testCaseElement.getAttribute("category");  String id=testCaseElement.getAttribute("id");  String name=category + "." + id;  String purpose=purposeElement != null ? purposeElement.getTextContent() : "";  String spec="place=" + specCitationElement.getAttribute("place") + " type"+ specCitationElement.getAttribute("type")+ " version="+ specCitationElement.getAttribute("version")+ " spec="+ specCitationElement.getAttribute("spec");  String operation=scenarioElement.getAttribute("operation");  Element principalDataElement=null;  Element principalStylesheetElement=null;  Element principalElement=null;  for (  Element element : elementsOf(scenarioElement.getChildNodes())) {    String role=element.getAttribute("role");    if (role.equals("principal-data")) {      principalDataElement=element;    } else     if (role.equals("principal-stylesheet")) {      principalStylesheetElement=element;    } else     if (role.equals("principal")) {      principalElement=element;    } else     if (!role.equals("supplemental-stylesheet") && !role.equals("supplemental-data")) {      return new MisspecifiedTest("Unexpected element at " + name);    }  }  String testDirectory=filePathElement.getTextContent();  File inBase=new File(base,testDirectory);  File outBase=new File(new File(base,"REF_OUT"),testDirectory);  if (principalDataElement == null || principalStylesheetElement == null) {    return new MisspecifiedTest("Expected <scenario> to have " + "principal=data and principal-stylesheet elements at " + name);  }  try {    File principalData=findFile(inBase,principalDataElement.getTextContent());    File principalStylesheet=findFile(inBase,principalStylesheetElement.getTextContent());    final File principal;    final String compareAs;    if (!operation.equals("execution-error")) {      if (principalElement == null) {        return new MisspecifiedTest("Expected <scenario> to have principal element at " + name);      }      principal=findFile(outBase,principalElement.getTextContent());      compareAs=principalElement.getAttribute("compare");    } else {      principal=null;      compareAs=null;    }    return new XsltTest(category,id,purpose,spec,principalData,principalStylesheet,principal,operation,compareAs);  } catch (  FileNotFoundException e) {    return new MisspecifiedTest(e.getMessage() + " at " + name);  }}  }
class C{  private void searchForHostExport(String hostId,List<SearchResultResourceRep> resRepLists,boolean selfOnly,boolean authorized){  URIQueryResultList egUris=new URIQueryResultList();  Set<URI> resultUris=new HashSet<URI>();  List<ExportGroup> exportGroups=new ArrayList<ExportGroup>();  if (selfOnly) {    exportGroups=CustomQueryUtility.queryActiveResourcesByConstraint(_dbClient,ExportGroup.class,AlternateIdConstraint.Factory.getConstraint(ExportGroup.class,"hosts",hostId));  } else {    List<NamedElement> initiatorElements=getModelClient().initiators().findIdsByHost(URI.create(hostId));    List<URI> initiators=toURIs(initiatorElements);    for (    URI iUri : initiators) {      _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getExportGroupInitiatorConstraint(iUri.toString()),egUris);      for (      URI eUri : egUris) {        resultUris.add(eUri);      }    }    exportGroups=_dbClient.queryObject(ExportGroup.class,resultUris,true);  }  buildExportGroupSearchResponse(exportGroups,resRepLists,selfOnly,ExportGroupType.Host.name(),authorized);}  }
class C{  public BsonTimestamp lastOffsetTimestamp(String replicaSetName){  Position existing=positionsByReplicaSetName.get(replicaSetName);  return existing != null ? existing.ts : INITIAL_TIMESTAMP;}  }
class C{  @Deprecated public static boolean checkAssignIdentifier(PsiBuilder b,int l){  return consumeToken(b,OPERATOR_ASSIGN) || checkAndConvertIdentifier(b,l,"=",OPERATOR_ASSIGN);}  }
class C{  public PlotterListCellRenderer(){  super();  this.label=new JLabel();  this.label.setHorizontalAlignment(SwingConstants.CENTER);  this.label.setVerticalAlignment(SwingConstants.TOP);  this.label.setHorizontalTextPosition(SwingConstants.CENTER);  this.label.setVerticalTextPosition(SwingConstants.BOTTOM);  this.add(this.label);  this.defaultBackground=this.getBackground();  this.defaultFont=this.label.getFont();  this.hoverFont=this.defaultFont.deriveFont(Font.BOLD);}  }
class C{  public void writeExtendedHeapDump(PrintWriter out) throws IOException {  throw new ConfigException(L.l("HeapDump requires Resin Professional"));}  }
class C{  final void advance(){  for (; ; ) {    if (nextTableIndex >= 0) {      if ((nextEntry=entryAt(currentTable,nextTableIndex--)) != null)       break;    } else     if (nextSegmentIndex >= 0) {      Segment<K,V> seg=segmentAt(segments,nextSegmentIndex--);      if (seg != null && (currentTable=seg.table) != null)       nextTableIndex=currentTable.length - 1;    } else     break;  }}  }
class C{  public static final void main(String[] args){  System.out.println("dyn4j v" + Version.getVersion());}  }
class C{  public HandleEvent(Handle src,@Nullable Rectangle invalidatedArea){  super(src);  this.invalidatedArea=invalidatedArea;}  }
class C{  public static Script createRedeemScript(int threshold,List<ECKey> pubkeys){  pubkeys=new ArrayList<ECKey>(pubkeys);  Collections.sort(pubkeys,ECKey.PUBKEY_COMPARATOR);  return ScriptBuilder.createMultiSigOutputScript(threshold,pubkeys);}  }
class C{  void checkThread(){  threadContext.checkThread();}  }
class C{  public final boolean contains(LatLon latLon){  if (latLon == null) {    String message=Logging.getMessage("nullValue.LatLonIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  return this.contains(latLon.getLatitude(),latLon.getLongitude());}  }
class C{  public String debugDump(int indentation){  stringRepresentation="";  String indent=new Indentation(indentation).getIndentation();  String className=this.getClass().getName();  sprint(indent + className);  sprint(indent + "{");  for (Iterator<HDR> it=hlist.iterator(); it.hasNext(); ) {    HDR sipHeader=(HDR)it.next();    sprint(indent + sipHeader.debugDump());  }  sprint(indent + "}");  return stringRepresentation;}  }
class C{  public static MandatoryUdaMissingException convertToApi(org.oscm.internal.types.exception.MandatoryUdaMissingException oldEx){  return convertExceptionToApi(oldEx,MandatoryUdaMissingException.class);}  }
class C{  public static float rotateY(float pX,float pY,float cX,float cY,float angleInDegrees){  double angle=Math.toRadians(angleInDegrees);  return (float)(Math.sin(angle) * (pX - cX) + Math.cos(angle) * (pY - cY) + cY);}  }
class C{  protected StringBuffer applyRules(final Calendar calendar,final StringBuffer buf){  return printer.applyRules(calendar,buf);}  }
class C{  protected org.eclipse.core.filebuffers.IDocumentFactory doGetDocumentFactory(IContentType[] contentTypes){  Set set=null;  int i=0;  while (i < contentTypes.length && set == null) {    set=(Set)fFactoryDescriptors.get(new ContentTypeAdapter(contentTypes[i++]));  }  if (set != null) {    IConfigurationElement entry=selectConfigurationElement(set);    return (org.eclipse.core.filebuffers.IDocumentFactory)getExtension(entry,fFactories,org.eclipse.core.filebuffers.IDocumentFactory.class);  }  return null;}  }
class C{  public ArrayIntCompressed(int[] ints){  this(ints,0,ints.length);}  }
class C{  public static Titan0Vertex createVertex(Titan0Graph graph,Vertex source){  if (source == null) {    return null;  }  return new Titan0Vertex(graph,source);}  }
class C{  protected UpdatePrefixListAction(GeneratedListModel listModel){  this.listModel=listModel;}  }
class C{  public boolean isImmutable_1(){  return immutable_1;}  }
class C{  public void updateStorageData(StorageData storageData) throws BusinessException, IOException, SerializationException {  StorageData local=getLocalStorageDataObject(storageData);  if (null == local) {    throw new BusinessException("Update of the storage data" + storageData + ".",StorageErrorCodeEnum.STORAGE_DOES_NOT_EXIST);  } else {synchronized (local) {      local.setName(storageData.getName());      local.setDescription(storageData.getDescription());      writeStorageDataToDisk(local);    }  }}  }
class C{  @Override @SuppressWarnings("unchecked") public synchronized <T>T[] toArray(T[] contents){  if (elementCount > contents.length) {    Class<?> ct=contents.getClass().getComponentType();    contents=(T[])Array.newInstance(ct,elementCount);  }  System.arraycopy(elementData,0,contents,0,elementCount);  if (elementCount < contents.length) {    contents[elementCount]=null;  }  return contents;}  }
class C{  public void clear(){  edges.clear();  previousEdges.clear();  nextEdges.clear();  oneEdge=null;}  }
class C{  public static final Handler sharedHandler(Context context){  if (sharedHandler == null) {    sharedHandler=new Handler(context.getMainLooper());  }  return sharedHandler;}  }
class C{  public CloseableImage decodeAnimatedWebp(final EncodedImage encodedImage,final ImageDecodeOptions options){  return mAnimatedImageFactory.decodeWebP(encodedImage,options,mBitmapConfig);}  }
class C{  public void removeAllBaudRateQueryCallbacks(){  baudRateQueryCallbacks.clear();}  }
class C{  public void insert(int i,Key key){  if (i < 0 || i >= nmax)   throw new IndexOutOfBoundsException();  if (contains(i))   throw new IllegalArgumentException("Index already there");  keys[i + d]=key;  pq[n + d]=i;  qp[i + d]=n;  swim(n++);}  }
class C{  public AWTThreadWatcher(UIManager inUIMgr){  super("AWTThreadWatcher-" + inUIMgr.getLocalUIClientName());  setDaemon(true);  alive=true;  uiMgr=inUIMgr;  checkPeriod=uiMgr.getLong("ui/awt_check_period",750);  requiredResponseTime=uiMgr.getLong("ui/awt_response_time",750);}  }
class C{  protected void writeColumnNotNullableStmt(StringBuilder ddl){  ddl.append("NOT NULL");}  }
class C{  public boolean isRegisterOwnUserPending(String userId){  ArgumentValidator.notNull("userId",userId);  ArgumentValidator.notEmptyString("userId",userId);  Query query=ds.createNamedQuery("TriggerProcessIdentifier.isRegisterOwnUserPending");  query.setParameter("pendingStates",TriggerProcess.getUnfinishedStatus());  query.setParameter("triggerType",TriggerType.REGISTER_OWN_USER);  query.setParameter("orgKeyName",TriggerProcessIdentifierName.ORGANIZATION_KEY);  query.setParameter("orgKey",String.valueOf(ds.getCurrentUser().getOrganization().getKey()));  query.setParameter("userIdName",TriggerProcessIdentifierName.USER_ID);  query.setParameter("userId",userId);  return ((Long)query.getSingleResult()).longValue() > 0;}  }
class C{  static int stringCompare(final char[] c1,int p1,final char[] c2,int p2){  if (p1 == c1.length) {    return 0;  }  final int l1=c1.length;  final int l2=c2.length;  while (p1 < l1 && p2 < l2) {    boolean escaped=false;    if (c1[p1] == c2[p2]) {      p1++;      p2++;      continue;    }    if (c1[p1] == '\\') {      p1++;      escaped=true;    }    if (c1[p1] == '*' && !escaped) {      p1++;      do {        if (stringCompare(c1,p1,c2,p2) == 0) {          return 0;        }        p2++;      } while (l2 - p2 > -1);      return 1;    } else {      if (c1[p1] < c2[p2]) {        return -1;      } else       if (c1[p1] > c2[p2]) {        return 1;      }    }  }  if (p2 == l2 && c1[p1 - 1] == c2[p2 - 1] && (p1 == l1 || p1 == l1 - 1 && c1[p1] == '*')) {    return 0;  }  if (p1 > 0 && c1[p1 - 1] == '*' && p1 == l1 && p2 == l2) {    return 0;  }  final int min=l1 < l2 ? l1 : l2;  return l1 == min ? -1 : 1;}  }
class C{  static Object doStrictFloorDiv(long x,long y){  try {    return StrictMath.floorDiv(x,y);  } catch (  ArithmeticException ae) {    return ae;  }}  }
class C{  @Override public void run(){  amIActive=true;  WhiteboxRaster image;  WhiteboxRaster image2;  int cols=0;  int rows=0;  double noData=-32768;  int numImages;  double z;  float progress=0;  int col, row;  int a, b, i;  String inputFilesString=null;  String[] imageFiles;  double[] imageSDs;  String[] shortNames=null;  String[] units=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  if (numImages < 1) {    showFeedback("At least one image must be specified for an image correlation.");    return;  }  try {    imageSDs=new double[numImages];    shortNames=new String[numImages];    units=new String[numImages];    double[] data;    for (a=0; a < numImages; a++) {      updateProgress("Image " + (a + 1) + ", Calculating image averages:",-1);      image=new WhiteboxRaster(imageFiles[a],"r");      noData=image.getNoDataValue();      rows=image.getNumberRows();      cols=image.getNumberColumns();      shortNames[a]=image.getShortHeaderFile();      if (!image.getZUnits().toLowerCase().equals("not specified")) {        units[a]=image.getZUnits();      } else {        units[a]="";      }      double imageTotal=0;      double imageN=0;      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            imageTotal+=data[col];            imageN++;          }        }        if (cancelOp) {          cancelOperation();          return;        }      }      double imageAverage=imageTotal / imageN;      double totalDeviation=0;      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            totalDeviation+=(data[col] - imageAverage) * (data[col] - imageAverage);          }        }        if (cancelOp) {          cancelOperation();          return;        }      }      imageSDs[a]=Math.sqrt(totalDeviation / (imageN - 1));      image.close();      progress=(int)(100f * (a + 1) / numImages);      updateProgress("Image " + (a + 1) + ", Calculating image average:",(int)progress);    }    String retstr=null;    retstr="IMAGE STANDARD DEVIATION\n";    DecimalFormat df=new DecimalFormat("0.0000");    for (a=0; a < numImages; a++) {      retstr=retstr + "\n" + shortNames[a]+ "\t"+ df.format(imageSDs[a]);    }    returnData(retstr);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public JsonObject addDevice(DeviceInfo selectedDevice){  JsonObject initJsonObjectParams=broadlinkStandardParams(BroadlinkConstants.CMD_DEVICE_ADD_ID,BroadlinkConstants.CMD_DEVICE_ADD);  initJsonObjectParams.addProperty("mac",selectedDevice.getMac());  initJsonObjectParams.addProperty("type",selectedDevice.getType());  initJsonObjectParams.addProperty("name",selectedDevice.getName());  initJsonObjectParams.addProperty("lock",selectedDevice.getLock());  initJsonObjectParams.addProperty("password",selectedDevice.getPassword());  initJsonObjectParams.addProperty("id",selectedDevice.getId());  initJsonObjectParams.addProperty("subdevice",selectedDevice.getSubdevice());  initJsonObjectParams.addProperty("key",selectedDevice.getKey());  return broadlinkExecuteCommand(initJsonObjectParams);}  }
class C{  public MemberScopeRequest(TypeRef originalReceiverTypeRef,EObject context,boolean checkVisibility,boolean staticAccess){  this.originalReceiverTypeRef=originalReceiverTypeRef;  this.context=context;  this.checkVisibility=checkVisibility;  this.staticAccess=staticAccess;}  }
class C{  public static boolean isNonEmpty(final String fileName){  return isNonEmpty(new File(fileName));}  }
class C{  private boolean toggleSignIfNecessary(DocumentFilter.FilterBypass fb,int offset,char aChar) throws BadLocationException {  if (aChar == getMinusSign() || aChar == getPositiveSign()) {    NumberFormat.Field field=getFieldFrom(offset,-1);    Object newValue;    try {      if (field == null || (field != NumberFormat.Field.EXPONENT && field != NumberFormat.Field.EXPONENT_SYMBOL && field != NumberFormat.Field.EXPONENT_SIGN)) {        newValue=toggleSign((aChar == getPositiveSign()));      } else {        newValue=toggleExponentSign(offset,aChar);      }      if (newValue != null && isValidValue(newValue,false)) {        int lc=getLiteralCountTo(offset);        String string=valueToString(newValue);        fb.remove(0,fb.getDocument().getLength());        fb.insertString(0,string,null);        updateValue(newValue);        repositionCursor(getLiteralCountTo(offset) - lc + offset,1);        return true;      }    } catch (    ParseException pe) {      invalidEdit();    }  }  return false;}  }
class C{  private boolean checkForRangeBoundednessAndTrimNotEqualKeyset(Set notEqualKeys,Object lessCondnKey,int lessOperator,Object greaterCondnKey,int greaterCondnOp) throws TypeMismatchException {  if (isConditionSatisfied(greaterCondnKey,lessCondnKey,lessOperator) && isConditionSatisfied(lessCondnKey,greaterCondnKey,greaterCondnOp)) {    if (notEqualKeys != null) {      Iterator itr=notEqualKeys.iterator();      Object neKey=null;      while (itr.hasNext()) {        neKey=itr.next();        if (!this.isConditionSatisfied(neKey,greaterCondnKey,greaterCondnOp) || !this.isConditionSatisfied(neKey,lessCondnKey,lessOperator)) {          itr.remove();        }      }    }    return true;  } else {    return false;  }}  }
class C{  private void removeScreenshotView(){  if (screenshotView == null)   return;  removeView(screenshotView);  screenshotView=null;  TurbolinksLog.d("Screenshot removed");}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void write(final int data,final int numBits){  if (numBits < 32 && data >= (1 << numBits)) {    throw new IllegalArgumentException(String.format("Truncating value %d to %d-bit integer",data,numBits));  }  for (int i=numBits - 1; i >= 0; i--) {    boolean bit=(data >> i & 1) != 0;    if (bit) {      currentByte|=(1 << currentBitIndex);    }    --currentBitIndex;    if (currentBitIndex < 0) {      writeCurrentByte();    }  }}  }
class C{  public void removeListener(final EventType eventType,final Listener<? extends BaseEvent> listener){  if (listeners == null) {    return;  }  String key=getKey(eventType);  List<Listener<BaseEvent>> list=listeners.get(key);  if (list != null) {    list.remove(listener);    if (list.isEmpty()) {      listeners.remove(key);    }  }}  }
class C{  public static double round(double number,int decimalPlace){  double multiplier=Math.pow(10,decimalPlace);  return Math.round(number * multiplier) / multiplier;}  }
class C{  protected void println(String s){  if (!quiet) {    sysOut.println(s);  }}  }
class C{  private boolean isEmpty(){  if (text != null) {    return false;  }  return root.isEmpty();}  }
class C{  private boolean removeFilter(){  if (isFiltering()) {    currentEntries=entries;    filteredEntries=null;    return true;  }  return false;}  }
class C{  public static boolean isFullyActive(Set<String> liveNodes,DocCollection collectionState,int expectedShards,int expectedReplicas){  Objects.requireNonNull(liveNodes);  if (collectionState == null)   return false;  int activeShards=0;  for (  Slice slice : collectionState) {    int activeReplicas=0;    for (    Replica replica : slice) {      if (replica.isActive(liveNodes) == false)       return false;      activeReplicas++;    }    if (activeReplicas != expectedReplicas)     return false;    activeShards++;  }  return activeShards == expectedShards;}  }
class C{  @SuppressWarnings("unchecked") @Test public void testGPL(){  final String response=getWikiText("GPL");  if (response != null) {    final Matcher<String> match=allOf(containsString("software license"),containsString("GNU"));    assertThat("There should be explained the GNU GPL.",response,match);  }}  }
class C{  public PrincipalId addGroup(String tenantName,String groupName,GroupDetail groupDetail) throws Exception {  return getService().addGroup(tenantName,groupName,groupDetail,this.getServiceContext());}  }
class C{  private void unlinkCancelledWaiters(){  Node t=firstWaiter;  Node trail=null;  while (t != null) {    Node next=t.nextWaiter;    if (t.waitStatus != Node.CONDITION) {      t.nextWaiter=null;      if (trail == null)       firstWaiter=next; else       trail.nextWaiter=next;      if (next == null)       lastWaiter=trail;    } else     trail=t;    t=next;  }}  }
class C{  @Override public void join(final Reference r){  final WordReference oe=(WordReference)r;  if (this.posintext > 0 && oe.posintext() > 0) {    if (this.posintext > oe.posintext()) {      this.addPosition(this.posintext);      this.posintext=oe.posintext();    } else {      this.addPosition(oe.posintext());    }  } else   if (this.posintext == 0) {    this.posintext=oe.posintext();  }  final int oePosofphrase=oe.posofphrase();  if (this.posofphrase == oePosofphrase) {    this.posinphrase=Math.min(this.posinphrase,oe.posinphrase());  } else   if (this.posofphrase > oePosofphrase) {    this.posofphrase=oePosofphrase;    this.posinphrase=oe.posinphrase();  }  this.termFrequency=this.termFrequency + oe.termFrequency();  this.wordsintext=Math.max(this.wordsintext,oe.wordsintext());  this.wordsintitle=Math.max(this.wordsintitle,oe.wordsintitle());  this.phrasesintext=Math.max(this.phrasesintext,oe.phrasesintext());  this.hitcount=Math.max(this.hitcount,oe.hitcount());}  }
class C{  static int checkDesc(final String desc,final int start,final boolean canBeVoid){  if (desc == null || start >= desc.length()) {    throw new IllegalArgumentException("Invalid type descriptor (must not be null or empty)");  }  int index;switch (desc.charAt(start)) {case 'V':    if (canBeVoid) {      return start + 1;    } else {      throw new IllegalArgumentException("Invalid descriptor: " + desc);    }case 'Z':case 'C':case 'B':case 'S':case 'I':case 'F':case 'J':case 'D':  return start + 1;case '[':index=start + 1;while (index < desc.length() && desc.charAt(index) == '[') {++index;}if (index < desc.length()) {return checkDesc(desc,index,false);} else {throw new IllegalArgumentException("Invalid descriptor: " + desc);}case 'L':index=desc.indexOf(';',start);if (index == -1 || index - start < 2) {throw new IllegalArgumentException("Invalid descriptor: " + desc);}try {checkInternalName(desc,start + 1,index,null);} catch (IllegalArgumentException unused) {throw new IllegalArgumentException("Invalid descriptor: " + desc);}return index + 1;default :throw new IllegalArgumentException("Invalid descriptor: " + desc);}}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  private void displayUpgradeAppDialog(File apkFile){  Intent intent=new Intent(Intent.ACTION_VIEW);  intent.setDataAndType(Uri.fromFile(apkFile),"application/vnd.android.package-archive");  intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  startActivity(intent);}  }
class C{  public static synchronized Object readAsXML(ObjectInput in) throws IOException {  if (readBuf == null)   readBuf=new byte[16384];  Thread cThread=Thread.currentThread();  ClassLoader oldCL=null;  try {    oldCL=cThread.getContextClassLoader();    cThread.setContextClassLoader(LayoutUtil.class.getClassLoader());  } catch (  SecurityException ignored) {  }  Object o=null;  try {    int length=in.readInt();    if (length > readBuf.length)     readBuf=new byte[length];    in.readFully(readBuf,0,length);    o=new XMLDecoder(new ByteArrayInputStream(readBuf,0,length)).readObject();  } catch (  EOFException ignored) {  }  if (oldCL != null)   cThread.setContextClassLoader(oldCL);  return o;}  }
class C{  public LazyReact autoMemoizeOn(final Cacheable memoizeCache){  return withAutoMemoize(true).withMemoizeCache(memoizeCache);}  }
class C{  public static void paintBreakpoints(final BreakpointManager manager,final NaviNode node,final INaviFunctionNode functionNode){  Preconditions.checkNotNull(manager,"IE02374: Manager argument can not be null");  Preconditions.checkNotNull(node,"IE02375: Node argument can not be null");  Preconditions.checkNotNull(functionNode,"IE02376: Code node argument can not be null");  final INaviFunction function=functionNode.getFunction();  final INaviModule module=function.getModule();  final int FUNCTION_BREAKPOINT_LINE=1;  final BreakpointAddress address=new BreakpointAddress(module,new UnrelocatedAddress(function.getAddress()));  if (manager.hasBreakpoint(BreakpointType.REGULAR,address)) {    node.setHighlighting(CHighlightLayers.BREAKPOINT_LAYER,FUNCTION_BREAKPOINT_LINE,BreakpointManager.getBreakpointColor(manager.getBreakpointStatus(address,BreakpointType.REGULAR)));  } else {    node.clearHighlighting(500,FUNCTION_BREAKPOINT_LINE);  }}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:38:21.674 -0400",hash_original_method="CC62B3AE287BE9611AD8DB95C455A800",hash_generated_method="9D58C88BAC8C9AE7235FE5DA19972734") public void compile(){  SR_GrammarCompile(mGrammar);}  }
class C{  static void replacePrimitivesWithWrappers(Class<?>[] types){  for (int i=0; i < types.length; i++) {    if (types[i] != null) {      if (types[i].isPrimitive()) {        types[i]=getType(types[i].getName());      }    }  }}  }
class C{  public ClientMessage request(final ClientMessage request,final long timeout) throws Exception {  request.putStringProperty(ClientMessageImpl.REPLYTO_HEADER_NAME,replyQueue);  requestProducer.send(request);  return replyConsumer.receive(timeout);}  }
class C{  @NonNull public JSONObject jsonSerialize(){  JSONObject json=jsonSerializeParams();  JsonUtil.put(json,KEY_CONFIGURATION,configuration.toJson());  JsonUtil.put(json,KEY_ADDITIONAL_PARAMETERS,JsonUtil.mapToJsonObject(additionalParameters));  return json;}  }
class C{  public void invalidateTitleSortable(){  for (  Movie movie : new ArrayList<>(movieList)) {    movie.clearTitleSortable();  }}  }
class C{  public PercentilesBuilder percentiles(double... percentiles){  for (int i=0; i < percentiles.length; i++) {    if (percentiles[i] < 0 || percentiles[i] > 100) {      throw new IllegalArgumentException("the percents in the percentiles aggregation [" + getName() + "] must be in the [0, 100] range");    }  }  this.percentiles=percentiles;  return this;}  }
class C{  public AbstractSparseGraphBuilder(GraphFactory<G,V,E> factory){  this.factory=factory;}  }
class C{  @Nullable public List<Object> payloads(){  return this.payloads;}  }
class C{  public static void fail(String message,Object... objects){  AssertionError e;  if (message == null) {    e=new AssertionError();  } else {    e=new AssertionError(String.format(message,objects));  }  StackTraceElement[] trace=e.getStackTrace();  int start=1;  String thisClassName=GraalTest.class.getName();  while (start < trace.length && trace[start].getClassName().equals(thisClassName) && (trace[start].getMethodName().equals("assertTrue") || trace[start].getMethodName().equals("assertFalse"))) {    start++;  }  e.setStackTrace(Arrays.copyOfRange(trace,start,trace.length));  throw e;}  }
class C{  public SearchResponse(long[] ids,Long highestModSeq){  super();  this.ids=ids;  this.highestModSeq=highestModSeq;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return TRUE_AS_OF_SECS;case 2:  return SOURCE;case 3:return SYSTEM;default :return null;}}  }
class C{  public JSONObject append(String key,Object value) throws JSONException {  testValidity(value);  Object object=this.opt(key);  if (object == null) {    this.put(key,new JSONArray().put(value));  } else   if (object instanceof JSONArray) {    this.put(key,((JSONArray)object).put(value));  } else {    throw new JSONException("JSONObject[" + key + "] is not a JSONArray.");  }  return this;}  }
class C{  public void onInited(){}  }
class C{  @Override public void truncate(long len) throws SQLException {  throw unsupported("LOB update");}  }
class C{  public static Short[] toReferenceType(short[] primArr){  Short[] refArr=new Short[primArr.length];  for (int i=0; i < primArr.length; i++)   refArr[i]=Short.valueOf(primArr[i]);  return refArr;}  }
class C{  static void IsoBlit(SurfaceData srcData,SurfaceData dstData,BufferedImage srcImg,BufferedImageOp biop,Composite comp,Region clip,AffineTransform xform,int hint,int sx1,int sy1,int sx2,int sy2,double dx1,double dy1,double dx2,double dy2,boolean texture){  int ctxflags=0;  if (srcData.getTransparency() == Transparency.OPAQUE) {    ctxflags|=D3DContext.SRC_IS_OPAQUE;  }  D3DSurfaceData d3dDst=(D3DSurfaceData)dstData;  D3DRenderQueue rq=D3DRenderQueue.getInstance();  boolean rtt=false;  rq.lock();  try {    D3DSurfaceData d3dSrc=(D3DSurfaceData)srcData;    int srctype=d3dSrc.getType();    D3DSurfaceData srcCtxData=d3dSrc;    if (srctype == D3DSurfaceData.TEXTURE) {      rtt=false;    } else {      rtt=true;    }    D3DContext.validateContext(srcCtxData,d3dDst,clip,comp,xform,null,null,ctxflags);    if (biop != null) {      D3DBufImgOps.enableBufImgOp(rq,d3dSrc,srcImg,biop);    }    int packedParams=createPackedParams(true,texture,rtt,xform != null,hint,0);    enqueueBlit(rq,srcData,dstData,packedParams,sx1,sy1,sx2,sy2,dx1,dy1,dx2,dy2);    if (biop != null) {      D3DBufImgOps.disableBufImgOp(rq,biop);    }  }  finally {    rq.unlock();  }  if (rtt && (d3dDst.getType() == D3DSurfaceData.WINDOW)) {    D3DScreenUpdateManager mgr=(D3DScreenUpdateManager)ScreenUpdateManager.getInstance();    mgr.runUpdateNow();  }}  }
class C{  public void updateUI(){  setUI((PanelUI)UIManager.getUI(this));}  }
class C{  public static UUIDPersistentHandle makeHandle(){  return new UUIDPersistentHandle();}  }
class C{  protected void deleteLinksOnPort(NodePortTuple npt,String reason){  List<Link> eraseList=new ArrayList<Link>();  if (this.portLinks.containsKey(npt)) {    if (log.isTraceEnabled()) {      log.trace("handlePortStatus: Switch {} port #{} " + "removing links {}",new Object[]{npt.getNodeId().toString(),npt.getPortId(),this.portLinks.get(npt)});    }    eraseList.addAll(this.portLinks.get(npt));    deleteLinks(eraseList,reason);  }}  }
class C{  public boolean dataPacket(DataPacket packet){  return this.dataPacket(packet,false) != -1;}  }
class C{  public void printToLog(){  CLogger log=CLogger.getCLogger(getClass());  log.fine("MultiMap.printToLog");  int size=m_keys.size();  for (int i=0; i < size; i++) {    Object k=m_keys.get(i);    Object v=m_values.get(i);    log.finest(k == null ? "null" : k.toString() + "=" + v == null ? "null" : v.toString());  }}  }
class C{  public JSONArray put(int index,boolean value) throws JSONException {  this.put(index,value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  protected static String listToCommaDelimitedString(List<String> stringList){  if (stringList == null) {    return "";  }  StringBuilder result=new StringBuilder();  for (Iterator<String> it=stringList.iterator(); it.hasNext(); ) {    Object element=it.next();    if (element != null) {      result.append(element);      if (it.hasNext()) {        result.append(", ");      }    }  }  return result.toString();}  }
class C{  public static void checkForPendingTasks(URI tenant,Collection<? extends DataObject> dataObjects,DbClient dbClient){  Set<URI> objectURIsThatHavePendingTasks=new HashSet<URI>();  for (  DataObject dataObject : dataObjects) {    List<Task> newTasks=TaskUtils.findResourceTasks(dbClient,dataObject.getId());    for (    Task newTask : newTasks) {      if (newTask.isPending() && newTask.getTenant().equals(tenant)) {        objectURIsThatHavePendingTasks.add(dataObject.getId());      }    }  }  List<String> pendingObjectLabels=new ArrayList<>();  for (  DataObject dataObject : dataObjects) {    if (dataObject.getInactive()) {      continue;    }    String label=dataObject.getLabel();    if (label == null) {      label=dataObject.getId().toString();    }    if (objectURIsThatHavePendingTasks.contains(dataObject.getId())) {      pendingObjectLabels.add(label);      objectURIsThatHavePendingTasks.remove(dataObject.getId());    }  }  if (!pendingObjectLabels.isEmpty()) {    String pendingListStr=Joiner.on(',').join(pendingObjectLabels);    _log.warn(String.format("Attempted to execute operation against these resources while there are tasks pending against them: %s",pendingListStr));    throw APIException.badRequests.cannotExecuteOperationWhilePendingTask(pendingListStr);  }}  }
class C{  public boolean checkLibraryForUsage(String libName){  boolean useLibrary=true;  List<String> libraryNames=getUseLibraries();  if (libraryNames != null && !libraryNames.isEmpty()) {    useLibrary=false;    for (    String libraryName : libraryNames) {      if (libName.startsWith(libraryName)) {        useLibrary=true;        break;      }    }  }  return useLibrary;}  }
class C{  public void removeTexture(ATexture texture){  mTextureList.remove(texture);  texture.unregisterMaterial(this);}  }
class C{  public static <T>T checkNotNull(T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  public static double[][] normaliseIntoNewArray(double[][] matrix,double[] means,double[] stds){  double[][] newMatrix=new double[matrix.length][matrix[0].length];  for (int r=0; r < newMatrix.length; r++) {    for (int c=0; c < newMatrix[r].length; c++) {      newMatrix[r][c]=matrix[r][c] - means[c];      if (!Double.isInfinite(1.0 / stds[c])) {        newMatrix[r][c]/=stds[c];      }    }  }  return newMatrix;}  }
class C{  static ByteString toBytes(String str){  try {    return ByteString.copyFrom(str.getBytes("UTF-8"));  } catch (  java.io.UnsupportedEncodingException e) {    throw new RuntimeException("UTF-8 not supported.",e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:41.298 -0500",hash_original_method="61AD7355C99E5A8A7ACA8AE385985070",hash_generated_method="459DDE1CE49277A1F7FB97704F993D16") public void onReceivedLoginRequest(WebView view,String realm,String account,String args){}  }
class C{  public SimpleFileFilter(String description,String[] extensions,int id){  this.description=description;  this.extensions=extensions;  this.id=id;}  }
class C{  public void deleteContacts(){  mCommands[ContactsCommandType.DELETE_COMMAND.ordinal()].execute(mModifyContacts.iterator());}  }
class C{  private void handleJsonSaveOptions(RequestAndResponse requestAndResponse) throws IOException, ServletException {  requestAndResponse.setResponseContentTypeJson();  boolean showTimestamps=false;  boolean saveOnEnter=false;  String csrft;  try {    final JsonNodeHelper json=getJsonNode(requestAndResponse);    showTimestamps=json.getBoolean("showTimestamps");    saveOnEnter=json.getBoolean("saveOnEnter");    csrft=json.getString("csrft");  } catch (  final IOException e) {    returnJson400(requestAndResponse,servletText.errorJson());    return;  }  if (isTheCsrftWrong(requestAndResponse,csrft)) {    requestAndResponse.print(servletText.errorRequiresSignIn(false));    return;  }  try {    final User user=dbLogic.getUserById(getEffectiveUserId(requestAndResponse));    if (user == null) {      requestAndResponse.print(servletText.errorRequiresSignIn(false));      return;    }    final String options="{\"showTimestamps\":" + showTimestamps + ",\"saveOnEnter\":"+ saveOnEnter+ "}";    user.setOptions(options);    dbLogic.commit();    returnJson200(requestAndResponse);  } catch (  final PersistenceException e) {    logger.log(Level.INFO,"Exception",e);    returnJson500(requestAndResponse,servletText.errorInternalDatabase());  }}  }
class C{  public boolean isDisplayChartValues(){  return mDisplayChartValues;}  }
class C{  private static void padInt(StringBuilder buffer,int value,int length){  String strValue=Integer.toString(value);  for (int i=length - strValue.length(); i > 0; i--) {    buffer.append('0');  }  buffer.append(strValue);}  }
class C{  public NTSidDomainPrincipal(String name){  super(name);}  }
class C{  public void try_createAuthenticationInfoFiles() throws ConfigurationException {  File f=null;  try {    f=new File(this.authenticationInfo.getPasswordFileLocation());    if (!f.isFile() || !f.canRead()) {      logger.warn(MessageFormat.format("Creating non existing file: {0}",f.getAbsolutePath()));      String parentPath=f.getParent();      if (parentPath != null) {        File pathToTarget=new File(parentPath);        if (!pathToTarget.isDirectory())         pathToTarget.mkdirs();      }      f.createNewFile();    }  } catch (  IOException e) {    logger.warn(MessageFormat.format("Could not create file: {0}",f.getAbsolutePath()));  }catch (  NullPointerException npe) {    throw new ConfigurationException("password_file.location is null");  }}  }
class C{  private void subscribe(Throwable exception){  Connection c=Connections.getInstance(context).getConnection(clientHandle);  String action=context.getString(R.string.toast_sub_failed,(Object[])additionalArgs);  c.addAction(action);  Notify.toast(context,action,Toast.LENGTH_SHORT);}  }
class C{  public GetLatestTask(final Shell shell,final TFSRepository repository,final TypedServerItem[] serverItems){  super(shell,repository);  this.serverItems=serverItems;  this.localItem=null;}  }
class C{  public boolean parse(Builder builder,String value){  Matcher m=regex.matcher(value);  if (!m.find()) {    return false;  }  boolean offsetPositive=false;  Integer offsetHour=null, offsetMinute=null;  for (int i=0; i < componentIndexes.length; i++) {    Integer index=componentIndexes[i];    if (index == null) {      continue;    }    int group=i + 1;    String groupStr=m.group(group);    if (groupStr != null) {      boolean startsWithPlus=groupStr.startsWith("+");      if (startsWithPlus) {        groupStr=groupStr.substring(1);      }      int component=Integer.parseInt(groupStr);      if (index == TIMEZONE_HOUR) {        offsetHour=component;        offsetPositive=startsWithPlus;        continue;      }      if (index == TIMEZONE_MINUTE) {        offsetMinute=component;        continue;      }      builder.components[index]=component;    }  }  if (offsetHour != null) {    if (offsetMinute == null) {      offsetMinute=0;    }    builder.offset=new UtcOffset(offsetPositive,offsetHour,offsetMinute);  }  return true;}  }
class C{  public BufferedReader openModelFile(){  String filename=modelDir + File.separator + modelFile;  BufferedReader fin=null;  try {    fin=new BufferedReader(new InputStreamReader(new FileInputStream(filename),"UTF-8"));  } catch (  IOException e) {    System.out.println(e.toString());    return null;  }  return fin;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapremovenameditemns01.class,args);}  }
class C{  public void fillData(int leftResId,String text,boolean useChevron){  textView.setText(text);  if (leftResId == 0) {    leftIcon.setVisibility(GONE);  } else {    leftIcon.setImageResource(leftResId);  }  if (useChevron) {    DEGREES=180;    rightIcon.setImageResource(R.drawable.ic_expandable_view_chevron);  } else {    DEGREES=-225;    rightIcon.setImageResource(R.drawable.ic_expandable_view_plus);  }}  }
class C{  String readTimeZone(String source,int ofs){  int sp=source.indexOf(' ',ofs);  String fragment;  if (sp != -1) {    fragment=source.substring(ofs,sp);  } else {    fragment=source.substring(ofs);  }  int len=fragment.length();  if (len == 1) {    return fragment.equals("z") ? source.substring(ofs,1) : null;  }  if (len >= 8 && fragment.startsWith(GMT)) {    return source.substring(ofs);  }  int ch=fragment.charAt(0);  if (len >= 5 && (ch == SIGN_NEGATIVE || ch == SIGN_POSITIVE)) {    return source.substring(ofs,ofs + 5);  }  for (  String timezone[] : getDateFormatSymbols().getZoneStrings()) {    for (    String z : timezone) {      if (z.equalsIgnoreCase(fragment)) {        return source.substring(ofs,ofs + z.length());      }    }  }  return null;}  }
class C{  private static void print(String identifier,Object object,StringBuffer indentBuf,StringBuffer buf) throws IllegalAccessException, InvocationTargetException {  if (object == null) {  } else   if (object instanceof MessageNano) {    int origIndentBufLength=indentBuf.length();    if (identifier != null) {      buf.append(indentBuf).append(deCamelCaseify(identifier)).append(" <\n");      indentBuf.append(INDENT);    }    Class<?> clazz=object.getClass();    for (    Field field : clazz.getFields()) {      int modifiers=field.getModifiers();      String fieldName=field.getName();      if ("cachedSize".equals(fieldName)) {        continue;      }      if ((modifiers & Modifier.PUBLIC) == Modifier.PUBLIC && (modifiers & Modifier.STATIC) != Modifier.STATIC && !fieldName.startsWith("_") && !fieldName.endsWith("_")) {        Class<?> fieldType=field.getType();        Object value=field.get(object);        if (fieldType.isArray()) {          Class<?> arrayType=fieldType.getComponentType();          if (arrayType == byte.class) {            print(fieldName,value,indentBuf,buf);          } else {            int len=value == null ? 0 : Array.getLength(value);            for (int i=0; i < len; i++) {              Object elem=Array.get(value,i);              print(fieldName,elem,indentBuf,buf);            }          }        } else {          print(fieldName,value,indentBuf,buf);        }      }    }    for (    Method method : clazz.getMethods()) {      String name=method.getName();      if (name.startsWith("set")) {        String subfieldName=name.substring(3);        Method hazzer=null;        try {          hazzer=clazz.getMethod("has" + subfieldName);        } catch (        NoSuchMethodException e) {          continue;        }        if (!(Boolean)hazzer.invoke(object)) {          continue;        }        Method getter=null;        try {          getter=clazz.getMethod("get" + subfieldName);        } catch (        NoSuchMethodException e) {          continue;        }        print(subfieldName,getter.invoke(object),indentBuf,buf);      }    }    if (identifier != null) {      indentBuf.setLength(origIndentBufLength);      buf.append(indentBuf).append(">\n");    }  } else   if (object instanceof Map) {    Map<?,?> map=(Map<?,?>)object;    identifier=deCamelCaseify(identifier);    for (    Map.Entry<?,?> entry : map.entrySet()) {      buf.append(indentBuf).append(identifier).append(" <\n");      int origIndentBufLength=indentBuf.length();      indentBuf.append(INDENT);      print("key",entry.getKey(),indentBuf,buf);      print("value",entry.getValue(),indentBuf,buf);      indentBuf.setLength(origIndentBufLength);      buf.append(indentBuf).append(">\n");    }  } else {    identifier=deCamelCaseify(identifier);    buf.append(indentBuf).append(identifier).append(": ");    if (object instanceof String) {      String stringMessage=sanitizeString((String)object);      buf.append("\"").append(stringMessage).append("\"");    } else     if (object instanceof byte[]) {      appendQuotedBytes((byte[])object,buf);    } else {      buf.append(object);    }    buf.append("\n");  }}  }
class C{  public T advanceToElement(Predicate<T> predicate){  Node<T> start=head;  if (head == null)   return null;  do {    T currElement=advance();    if (predicate.test(currElement)) {      return currElement;    }  } while (head != start);  return null;}  }
class C{  private void addRefTypeInternal(SootField field,SootClass clz,InfoKind unmodeledFlowType,boolean deepClone){  if (ClassCloner.isClonedClass(clz))   return;  clz=ClassCloner.getClonedClassFromClone(clz);  ClassCloner cloner;  if (deepClone || (Config.v().reportUnmodeledFlows && ("android.content.Intent".equals(clz.getName()) || "android.nfc.NdefRecord".equals(clz.getName()))))   cloner=ClassCloner.cloneClassAndInheritedMethods(clz,true); else   cloner=ClassCloner.cloneClass(clz);  SootClass clone=cloner.getClonedClass();  lastClonedClass=clone;  logger.info("Creating cloned class for fallback modeling: {}",clone);  classesAdded.add(clone);  installNoArgConstructor(clone);  for (  SootMethod method : clone.getMethods()) {    API.v().addSourceInfoKind(method,unmodeledFlowType.getName(),unmodeledFlowType.isSensitive());  }  if (!clone.declaresMethod(noArgConsSubSig)) {    logger.error("Error during fallback modeling. Class {} does not have a no arg constructor.",clone);  }  Local local=Jimple.v().newLocal("_$UG" + localID++,clz.getType());  dummyInitBody.getLocals().add(local);  addStmt(Jimple.v().newAssignStmt(local,Jimple.v().newNewExpr(clone.getType())));  addStmt(Jimple.v().newInvokeStmt(Jimple.v().newSpecialInvokeExpr(local,clone.getMethod(noArgConsSubSig).makeRef())));  addStmt(Jimple.v().newAssignStmt(Jimple.v().newStaticFieldRef(field.makeRef()),local));  logger.debug("Adding to fallback map: {} -> {}",clz.getType(),field);  typeToAddedField.put(clz.getType(),field);}  }
class C{  public void putLong(String key,long value){  checkForNullKey(key);  preferences.edit().putLong(key,value).apply();}  }
class C{  public static String chopNewline(String str){  int lastIdx=str.length() - 1;  char last=str.charAt(lastIdx);  if (last == '\n') {    if (str.charAt(lastIdx - 1) == '\r') {      lastIdx--;    }  } else {    lastIdx++;  }  return str.substring(0,lastIdx);}  }
class C{  public static void enforceAccessDrmPermission(Context context){  if (context.checkCallingOrSelfPermission(ACCESS_DRM_PERMISSION) != PackageManager.PERMISSION_GRANTED) {    throw new SecurityException("Requires DRM permission");  }}  }
class C{  public void endPrefixMapping(String prefix) throws org.xml.sax.SAXException {}  }
class C{  public int lastIndexOfFromTo(float element,int from,int to){  if (size == 0)   return -1;  checkRangeFromTo(from,to,size);  float[] theElements=elements;  for (int i=to; i >= from; i--) {    if (element == theElements[i]) {      return i;    }  }  return -1;}  }
class C{  public void addClickingListener(OnWheelClickedListener listener){  clickingListeners.add(listener);}  }
class C{  private NodeSequence(DTMManager dtmMgr){  super(new NodeVector());  m_last=0;  m_dtmMgr=dtmMgr;}  }
class C{  @Override protected synchronized void reloadFromStorage() throws SolrException {  String resourceId=getResourceId();  Object data=null;  try {    data=storage.load(resourceId);  } catch (  FileNotFoundException fnf) {  }catch (  IOException ioExc) {    throw new SolrException(ErrorCode.SERVER_ERROR,"Failed to load stored data for " + resourceId + " due to: "+ ioExc,ioExc);  }  Object managedData=processStoredData(data);  if (managedInitArgs == null)   managedInitArgs=new NamedList<>();  if (managedData != null)   onManagedDataLoadedFromStorage(managedInitArgs,managedData);}  }
class C{  public List<Map<String,Object>> query(String sql){  try {    return query(stat.executeQuery(sql));  } catch (  SQLException e) {    throw convert(e);  }}  }
class C{  public boolean isProvisioningNetwork(){  boolean retVal;  try {    Message msg=Message.obtain();    msg.what=DctConstants.CMD_IS_PROVISIONING_APN;    msg.setData(Bundle.forPair(DctConstants.APN_TYPE_KEY,mApnType));    Message result=mDataConnectionTrackerAc.sendMessageSynchronously(msg);    retVal=result.arg1 == DctConstants.ENABLED;  } catch (  NullPointerException e) {    loge("isProvisioningNetwork: X " + e);    retVal=false;  }  if (DBG)   log("isProvisioningNetwork: retVal=" + retVal);  return retVal;}  }
class C{  private void initialize() throws CarbonSortKeyAndGroupByException {  if (!mergerParameters.isCompressionEnabled() && !mergerParameters.isPrefetch()) {    try {      this.stream=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(mergerParameters.getOutFile()),mergerParameters.getFileWriteBufferSize()));      this.stream.writeInt(this.totalNumberOfRecords);    } catch (    FileNotFoundException e) {      throw new CarbonSortKeyAndGroupByException("Problem while getting the file",e);    }catch (    IOException e) {      throw new CarbonSortKeyAndGroupByException("Problem while writing the data to file",e);    }  } else {    writer=TempSortFileWriterFactory.getInstance().getTempSortFileWriter(mergerParameters.isCompressionEnabled(),mergerParameters.getDimColCount(),mergerParameters.getComplexDimColCount(),mergerParameters.getMeasureColCount(),mergerParameters.getNoDictionaryCount(),mergerParameters.getFileWriteBufferSize());    writer.initiaize(mergerParameters.getOutFile(),totalNumberOfRecords);    if (mergerParameters.isPrefetch()) {      totalSize=mergerParameters.getPrefetchBufferSize();    } else {      totalSize=mergerParameters.getNoOfRecordsInCompression();    }  }}  }
class C{  @Override protected EClass eStaticClass(){  return EipPackage.Literals.METADATABLE;}  }
class C{  public boolean isSetClusterJoinRequest(){  return this.clusterJoinRequest != null;}  }
class C{  private DSSXMLUtils(){}  }
class C{  public void logp(Level level,String sourceClass,String sourceMethod,String msg,Throwable thrown){  if (!isLoggable(level)) {    return;  }  LogRecord lr=new LogRecord(level,msg);  lr.setSourceClassName(sourceClass);  lr.setSourceMethodName(sourceMethod);  lr.setThrown(thrown);  doLog(lr);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static boolean sendHttpResponse(boolean isSuccess,HttpExchange exchange,byte[] response){  int returnCode=isSuccess ? HttpURLConnection.HTTP_OK : HttpURLConnection.HTTP_UNAVAILABLE;  try {    exchange.sendResponseHeaders(returnCode,response.length);  } catch (  IOException e) {    LOG.log(Level.SEVERE,"Failed to send response headers: ",e);    return false;  }  OutputStream os=exchange.getResponseBody();  try {    os.write(response);  } catch (  IOException e) {    LOG.log(Level.SEVERE,"Failed to send http response: ",e);    return false;  } finally {    try {      os.close();    } catch (    IOException e) {      LOG.log(Level.SEVERE,"Failed to close OutputStream: ",e);      return false;    }  }  return true;}  }
class C{  public boolean match() throws DBException {  String sql=buildSQL(new StringBuffer("SELECT 1 FROM ").append(table.getTableName()),false);  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,this.trxName);    rs=createResultSet(pstmt);    if (rs.next())     return true;  } catch (  SQLException e) {    throw new DBException(e,sql);  } finally {    DB.close(rs,pstmt);  }  return false;}  }
class C{  @DSComment("movement of Intent is spec") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:09.530 -0500",hash_original_method="84A47E40481CBF5586A9CCDD8AD7D655",hash_generated_method="02864C54AF97F2C1364CF06106399AA0") public void removeExtra(String name){  if (mExtras != null) {    mExtras.remove(name);    if (mExtras.size() == 0) {      mExtras=null;    }  }}  }
class C{  public OrgSymbol(){  super(KEY);}  }
class C{  public LocalDateTime minus(ReadableDuration duration){  return withDurationAdded(duration,-1);}  }
class C{  protected boolean isMultiReport(HttpServletRequest request,HttpServletResponse response,ActionForm form,ActionMapping mapping){  return true;}  }
class C{  @Override protected String generateJavadoc(int index) throws Exception {  String result;  TechnicalInformationHandler handler;  result="";  if (!canInstantiateClass()) {    return result;  }  if (!ClassDiscovery.hasInterface(TechnicalInformationHandler.class,getInstance().getClass())) {    throw new Exception("Class '" + getClassname() + "' is not a TechnicalInformationHandler!");  }  handler=(TechnicalInformationHandler)getInstance();switch (index) {case 0:    result=toHTML(handler.getTechnicalInformation().toString()) + "\n";  break;case 1:if (getProlog()) {  result="BibTeX:\n";}result+="<pre>\n";result+=toHTML(handler.getTechnicalInformation().toBibTex()).replaceAll("<br/>","") + "\n";result+="</pre>\n<p/>\n";break;}if (getUseStars()) {result=indent(result,1,"* ");}return result;}  }
class C{  @Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){  super.onMeasure(widthMeasureSpec,heightMeasureSpec);  widthMeasuredSpec=widthMeasureSpec;  int mode=MeasureSpec.getMode(heightMeasureSpec);  if (mode == MeasureSpec.UNSPECIFIED || mode == MeasureSpec.AT_MOST) {    if (height == 0) {      decorHeight=0;      for (int i=0; i < getChildCount(); i++) {        View child=getChildAt(i);        LayoutParams lp=(LayoutParams)child.getLayoutParams();        if (lp != null && lp.isDecor) {          int vgrav=lp.gravity & Gravity.VERTICAL_GRAVITY_MASK;          boolean consumeVertical=vgrav == Gravity.TOP || vgrav == Gravity.BOTTOM;          if (consumeVertical) {            decorHeight+=child.getMeasuredHeight();          }        }      }      int position=getCurrentItem();      View child=getViewAtPosition(position);      if (child != null) {        height=measureViewHeight(child);      }      Log.d(TAG,"onMeasure height:" + height + " decor:"+ decorHeight);    }    int totalHeight=height + decorHeight + getPaddingBottom()+ getPaddingTop();    heightMeasureSpec=MeasureSpec.makeMeasureSpec(totalHeight,MeasureSpec.EXACTLY);    Log.d(TAG,"onMeasure total height:" + totalHeight);  }  super.onMeasure(widthMeasureSpec,heightMeasureSpec);}  }
class C{  public int remove(long... ids){  return markRowDeleted(ids);}  }
class C{  public void updateMoveRightAnim(long playTime){  imageAAnimToRight.setCurrentPlayTime(playTime);  imageBAnimToRight.setCurrentPlayTime(playTime);  imageCAnimToRight.setCurrentPlayTime(playTime);  imageDAnimToRight.setCurrentPlayTime(playTime);  imageEAnimToRight.setCurrentPlayTime(playTime);  mCenterImageView.update(-mCenterImageView.getMeasuredWidth() * (1 - playTime * 1.0f / mDuration),true);}  }
class C{  @Override public String words(){  int numberOfWords=DEFAULT_RANDOM_NUMBERS_POOL[new Random().nextInt(DEFAULT_RANDOM_NUMBERS_POOL.length)];  return words(numberOfWords);}  }
class C{  static Object newInstance(String className,ClassLoader cl,boolean doFallback) throws ConfigurationError {  try {    Class providerClass=findProviderClass(className,cl,doFallback);    Object instance=providerClass.newInstance();    debugPrintln("created new instance of " + providerClass + " using ClassLoader: "+ cl);    return instance;  } catch (  ClassNotFoundException x) {    throw new ConfigurationError("Provider " + className + " not found",x);  }catch (  Exception x) {    throw new ConfigurationError("Provider " + className + " could not be instantiated: "+ x,x);  }}  }
class C{  public static String typeNameFor(int type){  String s="string";switch (type) {case VariableType.NUMBER:    s="number";  break;case VariableType.BOOLEAN:s="boolean";break;case VariableType.STRING:s="string";break;case VariableType.OBJECT:s="object";break;case VariableType.FUNCTION:s="function";break;case VariableType.MOVIECLIP:s="movieclip";break;case VariableType.NULL:s="null";break;case VariableType.UNDEFINED:case VariableType.UNKNOWN:default :s="undefined";break;}return s;}  }
class C{  public void clear(){  if (ENABLED) {synchronized (mLock) {      if (DEBUG) {        Log.i(LOG_TAG,"clear()");      }      final int nodeCount=mCacheImpl.size();      for (int i=0; i < nodeCount; i++) {        AccessibilityNodeInfo info=mCacheImpl.valueAt(i);        info.recycle();      }      mCacheImpl.clear();    }  }}  }
class C{  public void fixPackageContents(){  if (isFixed)   return;  isFixed=true;  fixEClassifiers();}  }
class C{  public Builder closeTimeout(Duration closeTimeout){  this.closeTimeout=closeTimeout;  return this;}  }
class C{  public void testCommunication(JMXServiceURL url) throws IOException {  final String defaultConf=getDefaultFileName(DefaultValues.CONFIG_FILE_NAME);  final String confname=System.getProperty(PropertyNames.CONFIG_FILE_NAME,defaultConf);  final Properties props=new Properties();  final File conf=new File(confname);  if (conf.exists()) {    FileInputStream fin=new FileInputStream(conf);    try {      props.load(fin);    }  finally {      fin.close();    }  }  final String useAuthenticationStr=props.getProperty(PropertyNames.USE_AUTHENTICATION,DefaultValues.USE_AUTHENTICATION);  final boolean useAuthentication=Boolean.valueOf(useAuthenticationStr).booleanValue();  final String defaultPasswordFileName=Utils.convertPath(getDefaultFileName(DefaultValues.PASSWORD_FILE_NAME));  final String passwordFileName=Utils.convertPath(props.getProperty(PropertyNames.PASSWORD_FILE_NAME,defaultPasswordFileName));  final String defaultAccessFileName=Utils.convertPath(getDefaultFileName(DefaultValues.ACCESS_FILE_NAME));  final String accessFileName=Utils.convertPath(props.getProperty(PropertyNames.ACCESS_FILE_NAME,defaultAccessFileName));  if (useAuthentication) {    System.out.println("PasswordFileName: " + passwordFileName);    System.out.println("accessFileName: " + accessFileName);  }  final Object[] allCredentials;  final Object[] noCredentials={null};  if (useAuthentication) {    final ArrayList l=readCredentials(passwordFileName);    if (l.size() == 0)     allCredentials=null; else     allCredentials=l.toArray();  } else   allCredentials=noCredentials;  int errorCount=0;  if (allCredentials != null) {    errorCount+=connectAndRead(url,allCredentials,true,true);  } else {    final String[][] someCredentials={null,{"modify","R&D"},{"measure","QED"}};    errorCount+=connectAndRead(url,someCredentials,false,false);  }  if (useAuthentication && allCredentials != noCredentials) {    final String[][] badCredentials={{"bad.user","R&D"},{"measure","bad.password"}};    errorCount+=connectAndRead(url,badCredentials,false,false);  }  if (errorCount > 0) {    final String err="Test " + confname + " failed with "+ errorCount+ " error(s)";    log.debug("testCommunication",err);    throw new RuntimeException(err);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void addGhoulLeggingsTexture(Item leggings,ResourceLocation res){  if (leggings == null || res == null)   return;  if (ghoul_leggings.containsKey(leggings))   FMLLog.log("AbyssalCraftAPI",Level.INFO,"Mod %s is overwriting the texture for Leggings %s",Loader.instance().activeModContainer().getModId(),leggings.getItemStackDisplayName(new ItemStack(leggings)));  ghoul_leggings.put(leggings,res);}  }
class C{  public final void normalizeCP(Matrix3d m1){  double mag=1.0 / Math.sqrt(m1.m00 * m1.m00 + m1.m10 * m1.m10 + m1.m20 * m1.m20);  m00=m1.m00 * mag;  m10=m1.m10 * mag;  m20=m1.m20 * mag;  mag=1.0 / Math.sqrt(m1.m01 * m1.m01 + m1.m11 * m1.m11 + m1.m21 * m1.m21);  m01=m1.m01 * mag;  m11=m1.m11 * mag;  m21=m1.m21 * mag;  m02=m10 * m21 - m11 * m20;  m12=m01 * m20 - m00 * m21;  m22=m00 * m11 - m01 * m10;}  }
class C{  public boolean isMultiSelectAllowed(){  return multiSelectAllowed;}  }
class C{  @Override public void reset(){  idx=mark;}  }
class C{  public boolean isChangeLog(){  Object oo=get_Value(COLUMNNAME_IsChangeLog);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  void onSourceChanged(SsaInsn insn,RegisterSpec oldSource,RegisterSpec newSource){  if (useList == null)   return;  if (oldSource != null) {    int reg=oldSource.getReg();    useList[reg].remove(insn);  }  int reg=newSource.getReg();  if (useList.length <= reg) {    useList=null;    return;  }  useList[reg].add(insn);}  }
class C{  protected void incorporateDigestMethod(final Element parentDom,final DigestAlgorithm digestAlgorithm){  final Element digestMethodDom=documentDom.createElementNS(XMLNS,DS_DIGEST_METHOD);  final String digestAlgorithmXmlId=digestAlgorithm.getXmlId();  digestMethodDom.setAttribute(ALGORITHM,digestAlgorithmXmlId);  parentDom.appendChild(digestMethodDom);}  }
class C{  public boolean hasNext(){  if (componentIndex >= numLines)   return false;  if (componentIndex == numLines - 1 && vertexIndex >= currentLine.getNumPoints())   return false;  return true;}  }
class C{  public JSONObject increment(String key) throws JSONException {  Object value=this.opt(key);  if (value == null) {    this.put(key,1);  } else   if (value instanceof BigInteger) {    this.put(key,((BigInteger)value).add(BigInteger.ONE));  } else   if (value instanceof BigDecimal) {    this.put(key,((BigDecimal)value).add(BigDecimal.ONE));  } else   if (value instanceof Integer) {    this.put(key,(Integer)value + 1);  } else   if (value instanceof Long) {    this.put(key,(Long)value + 1);  } else   if (value instanceof Double) {    this.put(key,(Double)value + 1);  } else   if (value instanceof Float) {    this.put(key,(Float)value + 1);  } else {    throw new JSONException("Unable to increment [" + quote(key) + "].");  }  return this;}  }
class C{  @SuppressWarnings({"unchecked"}) public Map<String,Object> sourceAsMap() throws ElasticsearchParseException {  if (source == null) {    return null;  }  if (sourceAsMap != null) {    return sourceAsMap;  }  sourceAsMap=SourceLookup.sourceAsMap(source);  return sourceAsMap;}  }
class C{  public static boolean hasImportStatement(PsiJavaFile javaFile,String importStatement){  PsiImportList importList=javaFile.getImportList();  if (importList == null) {    return false;  }  if (importStatement.endsWith(".*")) {    return importList.findOnDemandImportStatement(fixImportStatement(importStatement)) != null;  } else {    return importList.findSingleClassImportStatement(importStatement) != null;  }}  }
class C{  void printHelp(){  System.out.println("\nUsage: ktab <commands> <options>");  System.out.println();  System.out.println("Available commands:");  System.out.println();  System.out.println("-l [-e] [-t]\n" + "    list the keytab name and entries. -e with etype, -t with timestamp.");  System.out.println("-a <principal name> [<password>] [-n <kvno>] [-append]\n" + "    add new key entries to the keytab for the given principal name with\n" + "    optional <password>. If a <kvno> is specified, new keys' Key Version\n"+ "    Numbers equal to the value, otherwise, automatically incrementing\n"+ "    the Key Version Numbers. If -append is specified, new keys are\n"+ "    appended to the keytab, otherwise, old keys for the\n"+ "    same principal are removed.");  System.out.println("-d <principal name> [-f] [-e <etype>] [<kvno> | all | old]\n" + "    delete key entries from the keytab for the specified principal. If\n" + "    <kvno> is specified, delete keys whose Key Version Numbers match\n"+ "    kvno. If \"all\" is specified, delete all keys. If \"old\" is specified,\n"+ "    delete all keys except those with the highest kvno. Default action\n"+ "    is \"all\". If <etype> is specified, only keys of this encryption type\n"+ "    are deleted. <etype> should be specified as the numberic value etype\n"+ "    defined in RFC 3961, section 8. A prompt to confirm the deletion is\n"+ "    displayed unless -f is specified.");  System.out.println();  System.out.println("Common option(s):");  System.out.println();  System.out.println("-k <keytab name>\n" + "    specify keytab name and path with prefix FILE:");}  }
class C{  @Override public boolean equals(Object o){  if (o instanceof BasicCondition) {    return (((BasicCondition)o).getVariable().equals(variable) && ((BasicCondition)o).templateValue.equals(templateValue) && relation == ((BasicCondition)o).getRelation());  }  return false;}  }
class C{  public boolean equals(java.lang.Object obj){  return false;}  }
class C{  public Mapper add(Class objectClass,Class<? extends BindableLayout> viewClass){  if (mapping.containsKey(objectClass)) {    List<Class<? extends BindableLayout>> classes=new ArrayList<>();    classes.addAll(mapping.get(objectClass));    classes.add(viewClass);    mapping.put(objectClass,classes);  } else {    List<Class<? extends BindableLayout>> list=new ArrayList<>();    list.add(viewClass);    mapping.put(objectClass,list);  }  int position=viewTypes.size();  viewTypes.put(position,viewClass);  viewTypePositions.put(viewClass,position);  clearCachedData();  return this;}  }
class C{  public MockTransaction(final int type,final int version,final TimeInstant timeStamp,final long fee){  super(type,version,timeStamp,Utils.generateRandomAccount());  this.setFee(new Amount(fee));  this.setDeadline(timeStamp.addHours(2));}  }
class C{  public InvocationManagerBuilder<I> maxURLLength(int length){  _maxURLLength=length;  return this;}  }
class C{  public int hashCode(){  int result=17;  result=37 * result + Coordinate.hashCode(x);  result=37 * result + Coordinate.hashCode(y);  return result;}  }
class C{  @Override protected void onVisibilityChanged(View changedView,int visibility){  super.onVisibilityChanged(changedView,visibility);  if (visibility != View.VISIBLE)   return;  refresh();}  }
class C{  private boolean checkValue(){  if (flowLevel != 0) {    return true;  } else {    return Constant.NULL_BL_T_LINEBR.has(reader.peek(1));  }}  }
class C{  public ReadInputDiscretesResponse(){  super();  setFunctionCode(Modbus.READ_INPUT_DISCRETES);}  }
class C{  public boolean isItalic(){  return italic;}  }
class C{  private <T>T[] copyElements(T[] a){  if (head < tail) {    System.arraycopy(elements,head,a,0,size());  } else   if (head > tail) {    int headPortionLen=elements.length - head;    System.arraycopy(elements,head,a,0,headPortionLen);    System.arraycopy(elements,0,a,headPortionLen,tail);  }  return a;}  }
class C{  public final void printClusteringDetails(File file) throws AdeException {  final PrintWriter out=FileUtils.openPrintWriterToFile(file,true);  out.printf("%s%n",m_clusteringDetails);  out.close();}  }
class C{  public void addAction(String action){  Object[] args=new String[1];  SimpleDateFormat sdf=new SimpleDateFormat(context.getString(R.string.connection_dateFormat));  args[0]=sdf.format(new Date());  String timestamp=context.getString(R.string.timestamp,args);  history.add(action + timestamp);  notifyListeners(new PropertyChangeEvent(this,ActivityConstants.historyProperty,null,null));}  }
class C{  @Inline public final Address alloc(int bytes,int align,int offset){  Address start=alignAllocationNoFill(cursor,align,offset);  Address end=start.plus(bytes);  if (end.GT(internalLimit))   return allocSlow(start,end,align,offset);  fillAlignmentGap(cursor,start);  cursor=end;  end.plus(SIZE_OF_TWO_X86_CACHE_LINES_IN_BYTES).prefetch();  return start;}  }
class C{  @Override public boolean canLoad(Entity unit){  boolean result=false;  if (unit instanceof Mech) {    result=true;  }  if (currentSpace < 1) {    result=false;  }  if (doors <= loadedThisTurn) {    result=false;  }  return result;}  }
class C{  public void displayState(int s){  displayState(mastState());}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MHRPaySelection[");  sb.append(get_ID()).append(",").append(getName()).append("]");  return sb.toString();}  }
class C{  public final AC growPrio(int p,int... indexes){  for (int i=indexes.length - 1; i >= 0; i--) {    int ix=indexes[i];    makeSize(ix);    cList.get(ix).setGrowPriority(p);  }  return this;}  }
class C{  public void addDependency(AppComponent other){  if (dependencies.contains(other))   return;  if (other.dependsOn(this))   throw new RuntimeException("Circular dependency between app components '" + this + "' and '"+ other+ "'");  dependencies.add(other);}  }
class C{  public String carTipText(){  return "If enabled class association rules are mined instead of (general) association rules.";}  }
class C{  public static boolean asBoolean(Character character){  return character != 0;}  }
class C{  public static int[] subtract(int[] array,int value) throws Exception {  int[] returnValues=new int[array.length];  for (int i=0; i < returnValues.length; i++) {    returnValues[i]=array[i] - value;  }  return returnValues;}  }
class C{  private void addMnemonic(final int index,final int mnemonic){  if (mnemonicToIndexMap == null) {    initMnemonics();  }  mnemonicInputMap.put(KeyStroke.getKeyStroke(mnemonic,Event.ALT_MASK | Event.CTRL_MASK),"setSelectedIndex");  mnemonicToIndexMap.put(new Integer(mnemonic),new Integer(index));}  }
class C{  public boolean isTlsDebug(){  return tlsDebug;}  }
class C{  private void copyTables(){  prefixTable=(Hashtable)prefixTable.clone();  uriTable=(Hashtable)uriTable.clone();  if (elementNameTable != null)   elementNameTable=new Hashtable();  if (attributeNameTable != null)   attributeNameTable=new Hashtable();  tablesDirty=true;}  }
class C{  protected Entry(int hash,int key,Object value,Entry next){  this.hash=hash;  this.key=key;  this.value=value;  this.next=next;}  }
class C{  protected String rebuildSchemeSpecificPart(){  StringBuffer buffer=new StringBuffer();  if (opaque == false && (host != null || port != -1)) {    buffer.append(AUTHORITY_MARKER);    if (userInfo != null) {      buffer.append(getRawUserInfo() + USERINFO_SEPARATOR);    }    if (host != null) {      buffer.append(getHost());    }    if (port != -1) {      buffer.append(PORT_SEPARATOR);      buffer.append(getPort());    }  }  if (path != null) {    buffer.append(getRawPath());  }  if (query != null) {    if (querySeparator == SOCKET_QUERY_SEPARATOR) {      buffer.append(querySeparator + getRawQuery().replace(QUERY_SEPARATOR,SOCKET_QUERY_SEPARATOR));    } else {      buffer.append(QUERY_MARKER + getRawQuery());    }  }  return buffer.toString();}  }
class C{  public DataSource(Instances inst){  super();  m_BatchBuffer=inst;  m_Loader=null;  m_File=null;  m_URL=null;  m_Incremental=false;}  }
class C{  public void hasBody(boolean hasBody){}  }
class C{  private AFTPClient actionPutFile() throws IOException, PageException {  required("remotefile",remotefile);  required("localfile",localfile);  AFTPClient client=getClient();  Resource local=ResourceUtil.toResourceExisting(pageContext,localfile);  InputStream is=null;  try {    is=IOUtil.toBufferedInputStream(local.getInputStream());    client.setFileType(getType(local));    client.storeFile(remotefile,is);  }  finally {    IOUtil.closeEL(is);  }  writeCfftp(client);  return client;}  }
class C{  @PostConstruct public void resetAllChecks(){  checkRepository.resetAllChecks();}  }
class C{  public ReadExceptionStatusResponse(){  super();  setFunctionCode(Modbus.READ_EXCEPTION_STATUS);  setDataLength(1);}  }
class C{  @Deprecated static public void sort(@Nonnull Object[] values){  Arrays.sort(values);}  }
class C{  public void close(){  cur.close();}  }
class C{  public FadeDrawable(Drawable[] layers){  super(layers);  Preconditions.checkState(layers.length >= 1,"At least one layer required!");  mLayers=layers;  mStartAlphas=new int[layers.length];  mAlphas=new int[layers.length];  mAlpha=255;  mIsLayerOn=new boolean[layers.length];  mPreventInvalidateCount=0;  resetInternal();}  }
class C{  public ECSimulationCanvas(Frame p,int w,int h,String dscfile,boolean preserveSize){  if (p == null) {    graphics_on=false;    pause=false;  } else {    graphics_on=true;    pause=true;  }  parent=p;  simulated_objects=new SimulatedObject[0];  control_systems=new ControlSystemS[0];  this.preserveSize=preserveSize;  descriptionfile=dscfile;  if (graphics_on) {    setSize(w,h);    setBackground(Color.white);  }}  }
class C{  private boolean isViewAncestorOf(View child,View parent){  if (child == parent) {    return true;  }  final ViewParent theParent=child.getParent();  return (theParent instanceof ViewGroup) && isViewAncestorOf((View)theParent,parent);}  }
class C{  static Map<String,String> parseDocStrings(ClassLoader classLoader,Iterable<String> jsonPaths){  final ImmutableMap.Builder<String,String> docStrings=ImmutableMap.builder();  for (  String jsonPath : jsonPaths) {    docStrings.putAll(getDocStringsFromJsonResource(classLoader,jsonPath));  }  return docStrings.build();}  }
class C{  public static boolean isInsufficientSpace(int finalStatus){  return finalStatus == INSUFFICIENT_SPACE_ERROR;}  }
class C{  public void disconnected(boolean wasIdle){synchronized (this) {    if (idleFuture != null)     idleFuture.cancel(false);    if (wasIdle)     scheduleIdleReconnectTask(idleReconnectIntervalMsec);  }}  }
class C{  @Override public double computeLeftNeighborContribution(int leftNodeDegree){  return 1.0;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public static <K,V,M extends Map<K,V>>Collector<Entry<K,V>,?,M> toMap(Supplier<M> mapSupplier){  return Collectors.toMap(null,null,null,mapSupplier);}  }
class C{  public boolean waitToBeConnected(long timeout) throws InterruptedException {  if (Thread.interrupted())   throw new InterruptedException();  checkConnectCalled();  long start=System.currentTimeMillis();  while (System.currentTimeMillis() - start < timeout) {    if (this.gfManagerAgent.isInitialized()) {      return true;    } else {      Thread.sleep(100);    }  }  return this.isConnected();}  }
class C{  protected final void mergeFilters(WebXml theWebXml){  List<String> filterNames=WebXmlUtils.getFilterNames(theWebXml);  int count=0;  for (  String filterName : filterNames) {    if (!WebXmlUtils.hasFilter(webXml,filterName)) {      WebXmlUtils.addFilter(this.webXml,WebXmlUtils.getFilter(theWebXml,filterName));    } else {      List<String> filterInitParamNames=WebXmlUtils.getFilterInitParamNames(theWebXml,filterName);      for (      String paramName : filterInitParamNames) {        List<String> existingInitParams=WebXmlUtils.getFilterInitParamNames(this.webXml,filterName);        if (!existingInitParams.contains(paramName)) {          String paramValue=WebXmlUtils.getFilterInitParam(theWebXml,filterName,paramName);          WebXmlUtils.addFilterInitParam(this.webXml,filterName,paramName,paramValue);        }      }    }    List<FilterMapping> mappings=WebXmlUtils.getFilterMappingElements(theWebXml,filterName);    for (    FilterMapping mapping : mappings) {      WebXmlUtils.addFilterMapping(this.webXml,mapping);    }    count++;  }  getLogger().debug("Merged " + count + " filter definition"+ (count != 1 ? "s " : " ")+ "into the descriptor",this.getClass().getName());}  }
class C{  @SuppressWarnings("unchecked") protected Object alternateField(Document doc,int docId,String fieldName,FvhContainer fvhContainer,Query query,IndexReader reader,SolrQueryRequest req) throws IOException {  IndexSchema schema=req.getSearcher().getSchema();  SolrParams params=req.getParams();  String alternateField=params.getFieldParam(fieldName,HighlightParams.ALTERNATE_FIELD);  int alternateFieldLen=params.getFieldInt(fieldName,HighlightParams.ALTERNATE_FIELD_LENGTH,0);  if (alternateField == null || alternateField.length() == 0) {    return null;  }  if (params.getFieldBool(fieldName,HighlightParams.HIGHLIGHT_ALTERNATE,true) && !alternateField.equals(fieldName)) {    Object fieldHighlights=null;    SchemaField schemaField=schema.getFieldOrNull(alternateField);    if (schemaField != null) {      HashMap<String,String> invariants=new HashMap<>();      invariants.put("f." + alternateField + "."+ HighlightParams.SNIPPETS,"1");      invariants.put("f." + alternateField + "."+ HighlightParams.FRAGSIZE,alternateFieldLen > 0 ? String.valueOf(Math.max(18,alternateFieldLen)) : String.valueOf(Integer.MAX_VALUE));      SolrParams origParams=req.getParams();      req.setParams(SolrParams.wrapDefaults(new MapSolrParams(invariants),origParams));      fieldHighlights=doHighlightingOfField(doc,docId,schemaField,fvhContainer,query,reader,req,params);      req.setParams(origParams);      if (fieldHighlights != null) {        return fieldHighlights;      }    }  }  IndexableField[] docFields=doc.getFields(alternateField);  if (docFields.length == 0) {    docFields=doc.getFields(fieldName);  }  List<String> listFields=new ArrayList<>();  for (  IndexableField field : docFields) {    if (field.binaryValue() == null)     listFields.add(field.stringValue());  }  if (listFields.isEmpty()) {    return null;  }  String[] altTexts=listFields.toArray(new String[listFields.size()]);  Encoder encoder=getEncoder(fieldName,params);  List<String> altList=new ArrayList<>();  int len=0;  for (  String altText : altTexts) {    if (alternateFieldLen <= 0) {      altList.add(encoder.encodeText(altText));    } else {      altList.add(len + altText.length() > alternateFieldLen ? encoder.encodeText(new String(altText.substring(0,alternateFieldLen - len))) : encoder.encodeText(altText));      len+=altText.length();      if (len >= alternateFieldLen)       break;    }  }  return altList;}  }
class C{  public void putIntegerArrayList(String key,ArrayList<Integer> value){  map.put(key,value);}  }
class C{  private boolean checkDeadLoop(Object value){  int n=0;  Object obj=value;  while (obj != null) {    Record rec=objRecordMap.get(obj);    if (rec != null && rec.exp != null) {      obj=rec.exp.getTarget();    } else {      break;    }    if (obj != null && (obj.getClass().isAssignableFrom(value.getClass())) && obj.equals(value)) {      n++;      if (n >= DEADLOCK_THRESHOLD) {        return true;      }    }  }  return false;}  }
class C{  protected void generateDocumentChildren(Element root,Document doc,Tree delphiNode){  if (root == null || doc == null) {    return;  }  for (int i=0; i < delphiNode.getChildCount(); ++i) {    Tree childNode=delphiNode.getChild(i);    String processedName=processNodeName(childNode);    Element child=null;    try {      child=doc.createElement(processedName);    } catch (    DOMException e) {      child=doc.createElement("Wrapper");    }    child.setTextContent(childNode.getText());    child.setAttribute("line",String.valueOf(childNode.getLine()));    child.setAttribute("column",String.valueOf(childNode.getCharPositionInLine()));    child.setAttribute("class","");    child.setAttribute("method","");    child.setAttribute("package","");    child.setAttribute("type",String.valueOf(childNode.getType()));    root.appendChild(child);    generateDocumentChildren(child,doc,childNode);  }}  }
class C{  @Scheduled(cron="${batch.greeting.cron}") public void cronJob(){  logger.info("> cronJob");  counterService.increment("method.invoked.greetingBatchBean.cronJob");  final Collection<Greeting> greetings=greetingService.findAll();  logger.info(MESSAGE_FORMAT,greetings.size());  logger.info("< cronJob");}  }
class C{  public boolean equals(Object rawElement){  try {    return this.equalsXMLElement((IXMLElement)rawElement);  } catch (  ClassCastException e) {    return false;  }}  }
class C{  public synchronized void loadFromSettings(){  List<String> commandsToLoad=settings.getList("commands");  commands.clear();  for (  String c : commandsToLoad) {    if (c != null && !c.isEmpty()) {      String[] split=c.split(" ",2);      if (split.length == 2) {        String command=split[0];        if (command.startsWith("/")) {          command=command.substring(1);        }        command=command.trim();        if (!command.isEmpty()) {          commands.put(StringUtil.toLowerCase(command),split[1]);        }      }    }  }}  }
class C{  @Override public boolean canWrite(Object obj,Throwable err){  return obj instanceof EventAdapter && err == null;}  }
class C{  private void extractExtensionHeader(byte[] data,int length,int dataId,RtpPacket packet){  byte[] extensionHeaderData=new byte[length * 4];  System.arraycopy(data,++dataId,extensionHeaderData,0,extensionHeaderData.length);  packet.extensionHeader=new RtpExtensionHeader();  int i=0;  while (packet.extensionHeader.elementsCount() < length) {    byte idAndLength=extensionHeaderData[i];    if (idAndLength == 0x00) {      i=i + 1;      continue;    }    int elementId=(idAndLength & 0xf0) >>> 4;    if (elementId > 0 && elementId < 15) {      int elementLength=(idAndLength & 0x0f);      byte[] elementData=new byte[elementLength + 1];      System.arraycopy(extensionHeaderData,i + 1,elementData,0,elementData.length);      packet.extensionHeader.addElement(elementId,elementData);      i=i + elementData.length + 1;    } else {      break;    }  }}  }
class C{  private void removeFocusStackEntry(String clientToRemove,boolean signal){  if (!mFocusStack.empty() && mFocusStack.peek().mClientId.equals(clientToRemove)) {    FocusStackEntry fse=mFocusStack.pop();    fse.unlinkToDeath();    if (signal) {      notifyTopOfAudioFocusStack();synchronized (mRCStack) {        checkUpdateRemoteControlDisplay_syncAfRcs(RC_INFO_ALL);      }    }  } else {    Iterator<FocusStackEntry> stackIterator=mFocusStack.iterator();    while (stackIterator.hasNext()) {      FocusStackEntry fse=(FocusStackEntry)stackIterator.next();      if (fse.mClientId.equals(clientToRemove)) {        Log.i(TAG," AudioFocus  abandonAudioFocus(): removing entry for " + fse.mClientId);        stackIterator.remove();        fse.unlinkToDeath();      }    }  }}  }
class C{  public static byte[] decode(char[] in,int iOff,int iLen){  if (iLen % 4 != 0) {    throw new IllegalArgumentException("Length of Base64 encoded input string is not a multiple of 4.");  }  while (iLen > 0 && in[iOff + iLen - 1] == '=') {    iLen--;  }  int oLen=(iLen * 3) / 4;  byte[] out=new byte[oLen];  int ip=iOff;  int iEnd=iOff + iLen;  int op=0;  while (ip < iEnd) {    int i0=in[ip++];    int i1=in[ip++];    int i2=ip < iEnd ? in[ip++] : 'A';    int i3=ip < iEnd ? in[ip++] : 'A';    if (i0 > 127 || i1 > 127 || i2 > 127 || i3 > 127) {      throw new IllegalArgumentException("Illegal character in Base64 encoded data.");    }    int b0=map2[i0];    int b1=map2[i1];    int b2=map2[i2];    int b3=map2[i3];    if (b0 < 0 || b1 < 0 || b2 < 0 || b3 < 0) {      throw new IllegalArgumentException("Illegal character in Base64 encoded data.");    }    int o0=(b0 << 2) | (b1 >>> 4);    int o1=((b1 & 0xf) << 4) | (b2 >>> 2);    int o2=((b2 & 3) << 6) | b3;    out[op++]=(byte)o0;    if (op < oLen) {      out[op++]=(byte)o1;    }    if (op < oLen) {      out[op++]=(byte)o2;    }  }  return out;}  }
class C{  private void validateXpathAndSchema(){  xPathMapping=getXPathMapping();  List<Schema.Field> outFields=outSchema.getFields();  StringBuilder notOutput=new StringBuilder();  for (  Schema.Field field : outFields) {    String fieldName=field.getName();    if (!xPathMapping.keySet().contains(field.getName())) {      notOutput.append(fieldName + ";");    }  }  if (notOutput.length() > 0) {    throw new IllegalArgumentException("Following fields are not present in output schema :" + notOutput.toString());  }}  }
class C{  public boolean contains(Object o){  return map.containsKey(o);}  }
class C{  @Override public Query query(){  return this.query;}  }
class C{  public static BufferedImage createCompatibleImage(BufferedImage image,int width,int height){  return CONFIGURATION.createCompatibleImage(width,height,image.getTransparency());}  }
class C{  public static String deviceResolution(Context c){  DisplayMetrics metrics=c.getResources().getDisplayMetrics();  return String.valueOf(metrics.widthPixels) + "x" + metrics.heightPixels;}  }
class C{  public T caseParameterizedType(ParameterizedType object){  return null;}  }
class C{  protected static void assertState(final boolean validState,final String message,final Object... args){  if (!validState) {    throw new IllegalStateException(String.format(message,args));  }}  }
class C{  public final String identifier(){  return identifier;}  }
class C{  public ObjectNode retain(Collection<String> fieldNames){  if (_children != null) {    Iterator<Map.Entry<String,JsonNode>> entries=_children.entrySet().iterator();    while (entries.hasNext()) {      Map.Entry<String,JsonNode> entry=entries.next();      if (!fieldNames.contains(entry.getKey())) {        entries.remove();      }    }  }  return this;}  }
class C{  public void executeSimulation(List<CashBoxInstruction> cashBoxInstructions){  for (  CashBoxInstruction cashBoxInstruction : cashBoxInstructions) {    createStoreAndSignReceiptPackage(cashBoxInstruction);  }}  }
class C{  void free(){  if (trace.isDebugEnabled()) {    trace.debug("log free");  }  int currentDataPage=0;  if (pageOut != null) {    currentDataPage=pageOut.getCurrentDataPageId();    pageOut.freeReserved();  }  try {    freeing=true;    int first=0;    int loopDetect=1024, loopCount=0;    PageStreamTrunk.Iterator it=new PageStreamTrunk.Iterator(store,firstTrunkPage);    while (firstTrunkPage != 0 && firstTrunkPage < store.getPageCount()) {      PageStreamTrunk t=it.next();      if (t == null) {        if (it.canDelete()) {          store.free(firstTrunkPage,false);        }        break;      }      if (loopCount++ >= loopDetect) {        first=t.getPos();        loopCount=0;        loopDetect*=2;      } else       if (first != 0 && first == t.getPos()) {        throw DbException.throwInternalError("endless loop at " + t);      }      t.free(currentDataPage);      firstTrunkPage=t.getNextTrunk();    }  }  finally {    freeing=false;  }}  }
class C{  static private JettyResponseListener doConnect(final HttpClient httpClient,final ConnectOptions opts) throws IOException {  final String requestURL=opts.serviceURL;  final StringBuilder urlString=new StringBuilder(requestURL);  ConnectOptions.addQueryParams(urlString,opts.requestParams);  if (log.isDebugEnabled()) {    log.debug("*** Request ***");    log.debug(requestURL);    log.debug(opts.method);    log.debug(urlString.toString());  }  Request request=null;  try {    request=httpClient.newRequest(urlString.toString()).method(HttpMethod.GET);    if (opts.requestHeaders != null) {      for (      Map.Entry<String,String> e : opts.requestHeaders.entrySet()) {        request.header(e.getKey(),e.getValue());        if (log.isDebugEnabled())         log.debug(e.getKey() + ": " + e.getValue());      }    }    if (opts.entity != null) {      final EntityContentProvider cp=new EntityContentProvider(opts.entity);      request.content(cp,cp.getContentType());    }    final JettyResponseListener listener=new JettyResponseListener(request,TimeUnit.SECONDS.toMillis(300));    request.send(listener);    return listener;  } catch (  Throwable t) {    try {      if (request != null)       request.abort(t);    } catch (    Throwable t2) {      log.warn(t2);    }    throw new RuntimeException(requestURL + " : " + t,t);  }}  }
class C{  private void refreshDeviceCache(){  liteBluetooth.refreshDeviceCache();}  }
class C{  @Override public int delete(Uri uri,String selection,String[] selectionArgs){  SQLiteDatabase db=mOpenHelper.getWritableDatabase();  final int length=uri.getPathSegments().size();  if (length != 1) {    throw new IllegalArgumentException("Unknown Uri");  }  final String base=uri.getPathSegments().get(0);  int count=0;  if (base.equals(sSuggestions)) {    count=db.delete(sSuggestions,selection,selectionArgs);  } else {    throw new IllegalArgumentException("Unknown Uri");  }  getContext().getContentResolver().notifyChange(uri,null);  return count;}  }
class C{  public T caseLiteral(Literal object){  return null;}  }
class C{  public void add(int code){  super.add(code);}  }
class C{  public static boolean containsDestructuringPattern(VariableDeclarationContainer vdeclContainer){  for (  VariableDeclarationOrBinding vdeclOrBinding : vdeclContainer.getVarDeclsOrBindings())   if (vdeclOrBinding instanceof VariableBinding)   return true;  return false;}  }
class C{  void clearBridgeSecret(){  expectedBridgeSecret=-1;}  }
class C{  public PutRecordsRequestEntry toPutRecordsRequestEntry(){  return new PutRecordsRequestEntry().withExplicitHashKey(getExplicitHashKey()).withPartitionKey(getPartitionKey()).withData(ByteBuffer.wrap(toRecordBytes()));}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private int handleS(String value,DoubleMetaphoneResult result,int index,boolean slavoGermanic){  if (contains(value,index - 1,3,"ISL","YSL")) {    index++;  } else   if (index == 0 && contains(value,index,5,"SUGAR")) {    result.append('X','S');    index++;  } else   if (contains(value,index,2,"SH")) {    if (contains(value,index + 1,4,"HEIM","HOEK","HOLM","HOLZ")) {      result.append('S');    } else {      result.append('X');    }    index+=2;  } else   if (contains(value,index,3,"SIO","SIA") || contains(value,index,4,"SIAN")) {    if (slavoGermanic) {      result.append('S');    } else {      result.append('S','X');    }    index+=3;  } else   if ((index == 0 && contains(value,index + 1,1,"M","N","L","W")) || contains(value,index + 1,1,"Z")) {    result.append('S','X');    index=contains(value,index + 1,1,"Z") ? index + 2 : index + 1;  } else   if (contains(value,index,2,"SC")) {    index=handleSC(value,result,index);  } else {    if (index == value.length() - 1 && contains(value,index - 2,2,"AI","OI")) {      result.appendAlternate('S');    } else {      result.append('S');    }    index=contains(value,index + 1,1,"S","Z") ? index + 2 : index + 1;  }  return index;}  }
class C{  public String root(){  return root;}  }
class C{  public StreamStore(Map<Long,byte[]> map){  this.map=map;}  }
class C{  @SuppressWarnings("unchecked") public void testIpcCache() throws Exception {  Field cacheField=HadoopIgfsIpcIo.class.getDeclaredField("ipcCache");  cacheField.setAccessible(true);  Field activeCntField=HadoopIgfsIpcIo.class.getDeclaredField("activeCnt");  activeCntField.setAccessible(true);  Map<String,HadoopIgfsIpcIo> cache=(Map<String,HadoopIgfsIpcIo>)cacheField.get(null);  cache.clear();  String name="igfs:" + getTestGridName(0) + "@";  Configuration cfg=new Configuration();  cfg.addResource(U.resolveIgniteUrl(HADOOP_FS_CFG));  cfg.setBoolean("fs.igfs.impl.disable.cache",true);  cfg.setBoolean(String.format(HadoopIgfsUtils.PARAM_IGFS_ENDPOINT_NO_EMBED,name),true);  FileSystem fs1=FileSystem.get(new URI("igfs://" + name + "/"),cfg);  assertEquals(1,cache.size());  HadoopIgfsIpcIo io=null;  System.out.println("CACHE: " + cache);  for (  String key : cache.keySet()) {    if (key.contains("10500")) {      io=cache.get(key);      break;    }  }  assert io != null;  assertEquals(1,((AtomicInteger)activeCntField.get(io)).get());  FileSystem fs2=FileSystem.get(new URI("igfs://" + name + "/abc"),cfg);  assertEquals(1,cache.size());  assertEquals(2,((AtomicInteger)activeCntField.get(io)).get());  fs2.close();  assertEquals(1,cache.size());  assertEquals(1,((AtomicInteger)activeCntField.get(io)).get());  Field stopField=HadoopIgfsIpcIo.class.getDeclaredField("stopping");  stopField.setAccessible(true);  assert !(Boolean)stopField.get(io);  fs1.close();  assert cache.isEmpty();  assert (Boolean)stopField.get(io);}  }
class C{  public void clean(){  m_Distance.clean();}  }
class C{  static public String randomNegativeWhole(int length){  return "-" + NumericFunctions.randomPositiveWhole(length);}  }
class C{  void tokenize(String pat) throws javax.xml.transform.TransformerException {  tokenize(pat,null);}  }
class C{  public SwaggerBackendBuilder renderTags(final boolean renderTags){  options.setRenderTags(renderTags);  return this;}  }
class C{  @Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){  final int count=getChildCount();  int leftPos=getPaddingLeft();  int rightPos=right - left - getPaddingRight();  final int middleLeft=leftPos + mLeftWidth;  final int middleRight=rightPos - mRightWidth;  final int parentTop=getPaddingTop();  final int parentBottom=bottom - top - getPaddingBottom();  for (int i=0; i < count; i++) {    final View child=getChildAt(i);    if (child.getVisibility() != GONE) {      final LayoutParams lp=(LayoutParams)child.getLayoutParams();      final int width=child.getMeasuredWidth();      final int height=child.getMeasuredHeight();      if (lp.position == LayoutParams.POSITION_LEFT) {        mTmpContainerRect.left=leftPos + lp.leftMargin;        mTmpContainerRect.right=leftPos + width + lp.rightMargin;        leftPos=mTmpContainerRect.right;      } else       if (lp.position == LayoutParams.POSITION_RIGHT) {        mTmpContainerRect.right=rightPos - lp.rightMargin;        mTmpContainerRect.left=rightPos - width - lp.leftMargin;        rightPos=mTmpContainerRect.left;      } else {        mTmpContainerRect.left=middleLeft + lp.leftMargin;        mTmpContainerRect.right=middleRight - lp.rightMargin;      }      mTmpContainerRect.top=parentTop + lp.topMargin;      mTmpContainerRect.bottom=parentBottom - lp.bottomMargin;      Gravity.apply(lp.gravity,width,height,mTmpContainerRect,mTmpChildRect);      child.layout(mTmpChildRect.left,mTmpChildRect.top,mTmpChildRect.right,mTmpChildRect.bottom);    }  }}  }
class C{  private static boolean equals(char[] array1,char[] array2){  return Arrays.equals(array1,array2);}  }
class C{  public final CharSequence yytext(){  return zzBuffer.subSequence(zzStartRead,zzMarkedPos);}  }
class C{  private static void removeSchwamendingerTunnel(final Network network){  log.info("Closing/removing Schwamendingertunnel from IVTCH-OSM network ...");  linksToRemove=new ArrayList<Id<Link>>();  linksToRemove.add(Id.create(103727,Link.class));  linksToRemove.add(Id.create(103728,Link.class));  linksToRemove.add(Id.create(101895,Link.class));  linksToRemove.add(Id.create(101896,Link.class));  applyScenario(network);  log.info("Done closing Schwamendingertunnel!");}  }
class C{  private static void s_uaColSumLtGe(MatrixBlock in,MatrixBlock out,double[] bv,BinaryOperator bOp) throws DMLRuntimeException {  int agg0=sumRowSumGtLeColSumLtGe(0.0,bv,bOp);  out.allocateDenseBlock(true);  Arrays.fill(out.getDenseBlock(),0,out.getNumColumns(),agg0);  if (agg0 != 0.0)   out.setNonZeros(out.getNumColumns());  if (in.isEmptyBlock(false))   return;  SparseBlock sblock=in.getSparseBlock();  for (int j=0; j < sblock.numRows(); j++)   if (!sblock.isEmpty(j)) {    int apos=sblock.pos(j);    int alen=sblock.size(j);    int[] aix=sblock.indexes(j);    double[] avals=sblock.values(j);    for (int i=apos; i < apos + alen; i++) {      int cnt=sumRowSumGtLeColSumLtGe(avals[i],bv,bOp);      out.quickSetValue(0,aix[i],cnt);    }  }}  }
class C{  public void stopPreview(){  if (camera != null && previewing) {    if (!useOneShotPreviewCallback) {      camera.setPreviewCallback(null);    }    camera.stopPreview();    previewCallback.setHandler(null,0);    autoFocusCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  public void updateActivities(int act_length){  centerPane.setTitleAt(m_tabActivities,Msg.getMsg(m_ctx,"WorkflowActivities") + ": " + act_length);}  }
class C{  private void validateEntryForPage(DataPageMain dpMain,Entry entry){  if (dpMain._leaf != entry.isLeafEntry()) {    throw new IllegalStateException(withErrorContext("Trying to update page with wrong entry type; pageLeaf " + dpMain._leaf + ", entryLeaf "+ entry.isLeafEntry()));  }}  }
class C{  public ConstExponential(Type units){  super(units);}  }
class C{  public void showMenu(){  mSlidingMenu.showMenu();}  }
class C{  public static void main(String[] args){  VectorStreamNetworkAnalysis obj=new VectorStreamNetworkAnalysis();  args=new String[5];  args[0]="/Users/johnlindsay/Documents/Data/NewBrunswick/streams_geog_coord.shp";  args[1]="/Users/johnlindsay/Documents/Data/NewBrunswick/alosDEM1_trim.dep";  args[2]="not specified";  args[3]="/Users/johnlindsay/Documents/Data/NewBrunswick/tmp2.shp";  args[4]="10.0";  obj.setArgs(args);  obj.run();}  }
class C{  public static Pair<Filter,String> splitFilter(String varName){  int splitIndex=varName.indexOf('(');  if (splitIndex < 0) {    return null;  }  try {    String var=varName.substring(splitIndex + 1,varName.length() - 1);    Filter filter=Filter.valueOf(varName.substring(0,splitIndex).toUpperCase());    return Pair.of(filter,var);  } catch (  Exception e) {    return null;  }}  }
class C{  public BlinkAnimation(View view){  this.view=view;  numOfBlinks=2;  interpolator=new AccelerateDecelerateInterpolator();  duration=DURATION_LONG;  listener=null;}  }
class C{  public ForceSimulator(){  this(new RungeKuttaIntegrator());}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Seeker.getInstance().setUseDTVMajorMinorChans(evalBool(stack.pop()));  return null;}  }
class C{  void materialize(){  if (cachefill < 0) {    return;  }  double min=Double.MAX_VALUE, max=Double.MIN_VALUE;  for (int i=0; i < cachefill; i++) {    min=Math.min(min,cachec[i]);    max=Math.max(max,cachec[i]);  }  LinearScale scale=new LinearScale(min,max);  min=scale.getMin();  max=scale.getMax();  this.base=min;  this.max=max;  this.binsize=(max - min) / this.destsize;  this.data=new int[this.destsize << 1];  size=destsize;  final int end=cachefill;  cachefill=-1;  for (int i=0; i < end; i++) {    increment(cachec[i],cachev[i]);  }  cachec=null;  cachev=null;}  }
class C{  public void writeExternal(ObjectOutput out) throws IOException {  RemoteRef localRef=ref;  out.writeObject(id);  if (localRef == null) {    out.writeUTF("");  } else {    out.writeUTF(localRef.getRefClass(out));    localRef.writeExternal(out);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case GamlPackage.FACET__KEY:    setKey(KEY_EDEFAULT);  return;case GamlPackage.FACET__EXPR:setExpr((Expression)null);return;case GamlPackage.FACET__BLOCK:setBlock((Block)null);return;}super.eUnset(featureID);}  }
class C{  public void drawInto(Graphics g){  Enumeration<PMElement> iter=gr.elements();  while (iter.hasMoreElements()) {    PMElement pme=iter.nextElement();    if (pme != null)     pme.drawInto(g);  }}  }
class C{  private void generateProperties(SourceContext srcContext,TextNode parentNode,String parentVar,Variables varContext){  Map<String,TextNode> properties=parentNode.getTextProperties();  if (properties != null) {    StringBuilder buf=srcContext.functionBuffer;    for (    Map.Entry<String,TextNode> entry : properties.entrySet()) {      String propertyName=entry.getKey();      TextNode node=entry.getValue();      if (node instanceof TextLayoutFormatNode) {        if (parentNode instanceof RichTextNode) {          varContext.setVar(textLayoutFormatType,NodeType.TEXT_LAYOUT_FORMAT);          generateTextVariable(node,srcContext,varContext);          buf.append("        ").append(parentVar).append(".textFlow.").append(propertyName).append(" = ").append(varContext.elementVar).append(";\r\n");        } else {          varContext.setVar(textLayoutFormatType,NodeType.TEXT_LAYOUT_FORMAT);          generateTextVariable(node,srcContext,varContext);          buf.append("        ").append(parentVar).append(".").append(propertyName).append(" = ").append(varContext.elementVar).append(";\r\n");        }      }    }  }}  }
class C{  public void removeThread(final TargetProcessThread thread){  activeProcessThreads.remove(thread);  for (  final ProcessManagerListener listener : listeners) {    try {      listener.removedThread(thread);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }}  }
class C{  public static List<String> readPastebinAsList(String pasteID){  return readURLAsList(WebUtils.PASTEBIN_URL_PREFIX + pasteID);}  }
class C{  public boolean isOldValueVisible(){  return null == oldValueVisible ? _oldValueVisible : oldValueVisible.get();}  }
class C{  List<UserRoleAssignment> determineRoleAssignmentsWithFillingBlank(List<UserAssignment> userAssignmentsForOneUser){  List<UserRoleAssignment> determinedRoleAssignments=new ArrayList<UserRoleAssignment>();  if (!userAssignmentsForOneUser.isEmpty() && userAssignmentsForOneUser.get(0).hasUserRole()) {    UserRoleAssignment previousRoleAssignment=null;    long endTime=0;    for (    UserAssignment userAssignment : userAssignmentsForOneUser) {      for (      UserRoleAssignment roleAssignment : userAssignment.getRoleAssignments()) {        if (previousRoleAssignment == null) {          endTime=roleAssignment.getEndTime();        } else         if (!roleAssignment.getRoleKey().equals(previousRoleAssignment.getRoleKey())) {          determinedRoleAssignments.add(new UserRoleAssignment(previousRoleAssignment.getRoleKey(),previousRoleAssignment.getStartTime(),endTime));          endTime=previousRoleAssignment.getStartTime();        }        previousRoleAssignment=roleAssignment;      }    }    if (previousRoleAssignment != null) {      determinedRoleAssignments.add(new UserRoleAssignment(previousRoleAssignment.getRoleKey(),previousRoleAssignment.getStartTime(),endTime));    }    setFlagForFirstAndLastRole(determinedRoleAssignments);  }  return determinedRoleAssignments;}  }
class C{  public Boolean isCleanPowerOff(){  return cleanPowerOff;}  }
class C{  @Override public void writeTo(OutputStream os,String[] ignoreList) throws IOException, MessagingException {  writeTo(os,os,ignoreList);}  }
class C{  public void addFlag(int flag){  mFlags|=flag;}  }
class C{  public DefragFreeHeadroom(){  super(Options.set,"Defrag Free Headroom","Allow the defragmenter this amount of free headroom during defrag. For analysis purposes only!",DEFAULT_DEFRAG_FREE_HEADROOM);}  }
class C{  public MapMouseSupport(MapMouseMode mode){  this(mode,true);}  }
class C{  private static String unroll(ListIterator<?> it){  if (it.hasPrevious()) {    it.previous();  }  if (!it.hasNext()) {    return "";  }  StringBuilder sb=new StringBuilder();  sb.append(it.next());  while (it.hasNext()) {    sb.append(' ').append(it.next());  }  return sb.toString();}  }
class C{  @Override public int hashCode(){  if (null != xxHash32) {    return xxHash32.hash(data,0,data.length,0);  }  int result=Arrays.hashCode(data);  result=31 * result;  return result;}  }
class C{  protected boolean hasAttemptRemaining(){  return mCurrentRetryCount <= mMaxNumRetries;}  }
class C{  public static void clearPortAssociations(List<StoragePort> ports,DbClient dbClient){  for (  StoragePort port : ports) {    port.setNetwork(NullColumnValueGetter.getNullURI());    port.clearConnectedVirtualArray();    _log.info("Cleared the connected virtual arrays for removed port {}",port.getPortNetworkId());  }  dbClient.updateAndReindexObject(ports);}  }
class C{  public GeoDistanceBuilder point(String latLon){  return point(GeoPoint.parseFromLatLon(latLon));}  }
class C{  public void testCacheControl() throws Exception {  Headers h=new Headers();  CharArrayBuffer buffer=new CharArrayBuffer(64);  buffer.append(CACHE_CONTROL_MAX_AGE);  h.parseHeader(buffer);  buffer.clear();  buffer.append(LAST_MODIFIED);  h.parseHeader(buffer);  assertEquals("max-age=15",h.getCacheControl());  buffer.clear();  buffer.append(CACHE_CONTROL_PRIVATE);  h.parseHeader(buffer);  assertEquals("max-age=15,private",h.getCacheControl());}  }
class C{  public static boolean isKeyword(String s,boolean supportOffsetFetch){  if (s == null || s.length() == 0) {    return false;  }  return getSaveTokenType(s,supportOffsetFetch) != IDENTIFIER;}  }
class C{  public boolean okToSend(){  return activeSerialPort.isCTS();}  }
class C{  private static void populatePayload(final StringBuffer logMessage,final FormattedMqttMessage message,final MessageLog messageLogOptions){  boolean encoded=MessageLogEnum.XML_WITH_ENCODED_PAYLOAD.equals(messageLogOptions.getValue());  final String payload=new String(message.getPayload());  if (!encoded && (payload.contains(ConversionUtils.LINE_SEPARATOR_LINUX) || payload.contains(ConversionUtils.LINE_SEPARATOR_MAC) || payload.contains(ConversionUtils.LINE_SEPARATOR_WIN))) {    logger.debug("Message on topic {} contains a new line separator, so it needs to be encoded",message.getTopic());    encoded=true;  }  if (encoded) {    appendAttribute(logMessage,"encoded","true");  }  logMessage.append(">");  if (encoded) {    appendValue(logMessage,Base64.encodeBase64String(message.getRawMessage().getPayload()));  } else {    final boolean useCData=XML_CHARS.matcher(payload).find();    if (useCData) {      appendValue(logMessage,"<![CDATA[" + payload + "]]>");    } else {      appendValue(logMessage,payload);    }  }}  }
class C{  @Override public String toString(){  return canonicalForm;}  }
class C{  public static String escape(String string){  char c;  String s=string.trim();  int length=s.length();  StringBuilder sb=new StringBuilder(length);  for (int i=0; i < length; i+=1) {    c=s.charAt(i);    if (c < ' ' || c == '+' || c == '%' || c == '=' || c == ';') {      sb.append('%');      sb.append(Character.forDigit((char)((c >>> 4) & 0x0f),16));      sb.append(Character.forDigit((char)(c & 0x0f),16));    } else {      sb.append(c);    }  }  return sb.toString();}  }
class C{  private boolean isCorrectAnswer(int correct,List<Integer> answers){  for (  int answer : answers) {    if (answer == correct) {      return true;    }  }  return false;}  }
class C{  public static void reorderVisually(byte[] levels,int levelStart,Object[] objects,int objectStart,int count){  if (0 > levelStart || levels.length <= levelStart) {    throw new IllegalArgumentException("Value levelStart " + levelStart + " is out of range 0 to "+ (levels.length - 1));  }  if (0 > objectStart || objects.length <= objectStart) {    throw new IllegalArgumentException("Value objectStart " + levelStart + " is out of range 0 to "+ (objects.length - 1));  }  if (0 > count || objects.length < (objectStart + count)) {    throw new IllegalArgumentException("Value count " + levelStart + " is out of range 0 to "+ (objects.length - objectStart));  }  byte[] reorderLevels=new byte[count];  System.arraycopy(levels,levelStart,reorderLevels,0,count);  int[] indexMap=reorderVisual(reorderLevels);  Object[] temp=new Object[count];  System.arraycopy(objects,objectStart,temp,0,count);  for (int i=0; i < count; ++i) {    objects[objectStart + i]=temp[indexMap[i]];  }}  }
class C{  @Override public VolatileMemAllocator disableActiveGC(){  m_activegc=false;  return this;}  }
class C{  private void replacePathComponent(LookupFile file,int caretPos,int start,int end) throws BadLocationException {  final Document doc=myPathTextField.getDocument();  myPathTextField.setSelectionStart(0);  myPathTextField.setSelectionEnd(0);  final String name=file.getName();  boolean toRemoveExistingName;  String prefix="";  if (caretPos >= start) {    prefix=doc.getText(start,caretPos - start);    if (prefix.length() == 0) {      prefix=doc.getText(start,end - start);    }    if (SystemInfo.isFileSystemCaseSensitive) {      toRemoveExistingName=name.startsWith(prefix) && prefix.length() > 0;    } else {      toRemoveExistingName=StringUtil.toUpperCase(name).startsWith(StringUtil.toUpperCase(prefix)) && prefix.length() > 0;    }  } else {    toRemoveExistingName=true;  }  int newPos;  if (toRemoveExistingName) {    doc.remove(start,end - start);    doc.insertString(start,name,doc.getDefaultRootElement().getAttributes());    newPos=start + name.length();  } else {    doc.insertString(caretPos,name,doc.getDefaultRootElement().getAttributes());    newPos=caretPos + name.length();  }  if (file.isDirectory()) {    if (!myFinder.getSeparator().equals(doc.getText(newPos,1))) {      doc.insertString(newPos,myFinder.getSeparator(),doc.getDefaultRootElement().getAttributes());      newPos++;    }  }  if (newPos < doc.getLength()) {    if (myFinder.getSeparator().equals(doc.getText(newPos,1))) {      newPos++;    }  }  myPathTextField.setCaretPosition(newPos);}  }
class C{  public synchronized int size(){  return rrs.size() - nsigs;}  }
class C{  public boolean hasWebServer(){  ILaunchConfiguration config=getLaunch().getLaunchConfiguration();  if (config == null) {    GWTPluginLog.logError("Checking if the launch is running a web server, but the ILaunch does not have an ILaunchConfiguration.");    return true;  }  try {    List<String> commands=LaunchConfigurationProcessorUtilities.parseProgramArgs(config);    return !commands.contains("-noserver");  } catch (  CoreException e) {    GWTPluginLog.logError(e,"Could not check if the launch is running a web server.");    return true;  }}  }
class C{  @Override public String toString(){  return "cudaPointerAttributes[" + "memoryType=" + cudaMemoryType.stringFor(memoryType) + ","+ "device="+ device+ ","+ "devicePointer="+ devicePointer+ ","+ "hostPointer="+ hostPointer+ ","+ "isManaged="+ isManaged+ "]";}  }
class C{  @Override public void deliver(WriteStream os,OutHttp2 out) throws IOException {  _stream.writeCont(out);}  }
class C{  public int next(){  if (_startNode == _currentNode)   return NULL;  _currentNode=_startNode;  return returnNode(_startNode);}  }
class C{  public void addNotify(){synchronized (getTreeLock()) {    if (parent != null && !(parent instanceof Component)) {      super.addNotify();    } else {      if (peer == null)       peer=Toolkit.getDefaultToolkit().createPopupMenu(this);      int nitems=getItemCount();      for (int i=0; i < nitems; i++) {        MenuItem mi=getItem(i);        mi.parent=this;        mi.addNotify();      }    }  }}  }
class C{  public static Color convertRGBICCColor(Element paintedElement,Value colorDef,ICCColor iccColor,float opacity,BridgeContext ctx){  Color color=null;  if (iccColor != null) {    color=convertICCColor(paintedElement,iccColor,opacity,ctx);  }  if (color == null) {    color=convertColor(colorDef,opacity);  }  return color;}  }
class C{  public static Map<URI,List<URI>> partitionInitiatorsByVarray(DbClient dbClient,BlockStorageScheduler blockScheduler,List<URI> initiatorURIs,List<URI> varrayURIs,StorageSystem storage){  Map<URI,List<URI>> varrayToInitiators=new HashMap<>();  List<Initiator> initiators=dbClient.queryObject(Initiator.class,initiatorURIs);  Map<NetworkLite,List<Initiator>> networkToInitiators=NetworkUtil.getInitiatorsByNetwork(initiators,dbClient);  for (  URI varrayURI : varrayURIs) {    for (    NetworkLite network : networkToInitiators.keySet()) {      if (network.getConnectedVirtualArrays().contains(varrayURI.toString())) {        if (!varrayToInitiators.keySet().contains(varrayURI)) {          varrayToInitiators.put(varrayURI,new ArrayList<URI>());        }        for (        Initiator initiator : networkToInitiators.get(network)) {          varrayToInitiators.get(varrayURI).add(initiator.getId());        }      }    }  }  return varrayToInitiators;}  }
class C{  public void success(){  successCallback.invoke("Success");}  }
class C{  public boolean isSetAb(){  return this.ab != null;}  }
class C{  public static Set<org.oscm.vo.Setting> convertToApiSetting(Set<org.oscm.internal.vo.Setting> oldVO){  if (oldVO == null) {    return null;  }  Set<org.oscm.vo.Setting> newVO=new HashSet<org.oscm.vo.Setting>();  for (  org.oscm.internal.vo.Setting tmp : oldVO) {    newVO.add(convertToApi(tmp));  }  return newVO;}  }
class C{  public void removeGameView(EntityView view){  getRenderGroup(view.getRenderLayer()).getChildren().remove(view);  view.removeFromScene();}  }
class C{  private ConfigurationEntity createConfigurationEntity(String key,String value){  ConfigurationEntity configurationEntity=new ConfigurationEntity();  configurationEntity.setKey(key);  configurationEntity.setValue(value);  return configurationDao.saveAndRefresh(configurationEntity);}  }
class C{  protected AnyBreakpointRemovedReply(final int packetId,final int errorCode,final List<Pair<RelocatedAddress,Integer>> addresses){  super(packetId,errorCode);  this.addresses=Preconditions.checkNotNull(addresses,"IE01056: Addresses argument can not be null");}  }
class C{  public void close(){  closeStats();  if (bucketRegion != null)   bucketRegion.close();}  }
class C{  @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case ImPackage.PARAMETERIZED_TYPE_REF_IM__REWIRED_TARGET:    if (rewiredTarget != null)     msgs=((InternalEObject)rewiredTarget).eInverseRemove(this,ImPackage.SYMBOL_TABLE_ENTRY__REFERENCING_ELEMENTS,SymbolTableEntry.class,msgs);  return basicSetRewiredTarget((SymbolTableEntry)otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  public Tag(){}  }
class C{  public ConditionalTransferEntropyCalculatorKraskov() throws InstantiationException, IllegalAccessException, ClassNotFoundException {  super(COND_MI_CALCULATOR_KRASKOV1);  kraskovAlgorithmNumber=1;  props=new Hashtable<String,String>();}  }
class C{  private void handleGroupChatRejoinAsPartOfSendOperationFailed() throws PayloadException, NetworkException {  restartGroupChat();}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  Bundle args=getArguments();  if (args != null) {    mLabel=args.getCharSequence("label",mLabel);  }}  }
class C{  public CachingStream() throws IOException {  super(null);  Path tempFile=DefaultFilepaths.createTempFile("tmpattach",null);  channel=Files.newByteChannel(tempFile,StandardOpenOption.CREATE,StandardOpenOption.WRITE,StandardOpenOption.TRUNCATE_EXISTING,StandardOpenOption.READ,StandardOpenOption.DELETE_ON_CLOSE);  out=Channels.newOutputStream(channel);}  }
class C{  public void animateViewIfNecessary(final int position,@NonNull final View view,@NonNull final Animator[] animators){  if (mShouldAnimate && position > mLastAnimatedPosition) {    if (mFirstAnimatedPosition == -1) {      mFirstAnimatedPosition=position;    }    animateView(position,view,animators);    mLastAnimatedPosition=position;  }}  }
class C{  private ObservingEndpoint createObservingEndpoint(InetSocketAddress address){  ObservingEndpoint ep=new ObservingEndpoint(address);  ObservingEndpoint previous=endpoints.putIfAbsent(address,ep);  if (previous != null) {    return previous;  } else {    return ep;  }}  }
class C{  private void concatenate(WordDelimiterConcatenation concatenation){  if (concatenation.isEmpty()) {    concatenation.startOffset=savedStartOffset + iterator.current;  }  concatenation.append(savedBuffer,iterator.current,iterator.end - iterator.current);  concatenation.endOffset=savedStartOffset + iterator.end;}  }
class C{  public CompositeRouteFinder(final GameMap map,final HashMap<Match<Territory>,Integer> matches){  m_map=map;  m_matches=matches;  s_logger.finer("Initializing CompositeRouteFinderClass...");}  }
class C{  public void addRevision(Revision newRevision){  revisions.add(newRevision);}  }
class C{  public String toString(){  String s="";  s+=String.format("%.2f N + %.2f",slope(),intercept());  return s + "  (R^2 = " + String.format("%.3f",R2())+ ")";}  }
class C{  public boolean canBuildPrinter(){  return isPrinter(getFormatter());}  }
class C{  private void scrollTo(int y,boolean animate){  if (y < 0) {    y=0;  } else   if (y > getPreferredH() - getHeight()) {    y=getPreferredH() - getHeight();  }  if (animate) {    scrollRectToVisible(getX(),y,getWidth(),getHeight(),this);  } else {    setScrollY(y);  }}  }
class C{  public static String currentDatetimeFunctionName(CurrentDatetimeOperatorNode node){switch (node.getField()) {case DATE:    return "current_date";case TIME:  return "current_time";case TIMESTAMP:return "current_timestamp";default :return null;}}  }
class C{  static public void assertEquals(String msg,float[] expected,float[] actual){  if (msg == null) {    msg="";  } else {    msg=msg + " : ";  }  if (expected == null && actual == null) {    return;  }  if (expected == null && actual != null) {    fail(msg + "Expected a null array.");  }  if (expected != null && actual == null) {    fail(msg + "Not expecting a null array.");  }  if (expected.length != actual.length) {    assertEquals(msg + "length differs.",expected.length,actual.length);  }  for (int i=0; i < expected.length; i++) {    float delta=0f;    try {      assertEquals(expected[i],actual[i],delta);    } catch (    AssertionFailedError ex) {      fail(msg + "values differ: index=" + i,ex);    }  }}  }
class C{  private static Class<?> loadBuilderClass(String builderClassName) throws ClassNotFoundException {  final ClassLoader loader=Thread.currentThread().getContextClassLoader();  if (loader != null) {    return loader.loadClass(builderClassName);  }  return ReflectUtil.forName(builderClassName);}  }
class C{  private Reference<? extends T> dequeue(){  if (false)   VM.sysWriteln("in dequeue, this = ",Magic.objectAsAddress(this));  lock.lockWithHandshake();  if (false)   VM.sysWriteln("locked.");  Reference<? extends T> result=dequeueImpl();  lock.unlock();  return result;}  }
class C{  public void push(final long value){  if (value == 0L || value == 1L) {    mv.visitInsn(Opcodes.LCONST_0 + (int)value);  } else {    mv.visitLdcInsn(value);  }}  }
class C{  public void putInteger(int v,int tag){  putIntegerValue(v);  putTag(tag);}  }
class C{  private void generateTemplateIndices(WikipediaTemplateInfo info,Set<String> templateNames){  try {    for (    String name : templateNames) {      int id=info.checkTemplateId(name);      if (id != -1) {        tplNameToTplId.put(name,id);      }    }  } catch (  WikiApiException e) {  }}  }
class C{  private static int findEndOfLabel(String nTriplesLiteral){  boolean previousWasBackslash=false;  for (int i=1; i < nTriplesLiteral.length(); i++) {    char c=nTriplesLiteral.charAt(i);    if (c == '"' && !previousWasBackslash) {      return i;    } else     if (c == '\\' && !previousWasBackslash) {      previousWasBackslash=true;    } else     if (previousWasBackslash) {      previousWasBackslash=false;    }  }  return -1;}  }
class C{  public static short toShort(byte[] bytes){  return toShort(bytes,0,SIZEOF_SHORT);}  }
class C{  public CategoryImageRetrieveStrategyRandomProductImpl(final ProductService productService,final String attributeCode){  this.productService=productService;  this.attributeCode=attributeCode;}  }
class C{  private synchronized boolean updateDerivedGauge(Object scanGauge,GaugeMonitorObservedObject o){  boolean is_derived_gauge_valid;  if (differenceMode) {    if (o.getPreviousScanGauge() != null) {      setDerivedGaugeWithDifference((Number)scanGauge,o);      is_derived_gauge_valid=true;    } else {      is_derived_gauge_valid=false;    }    o.setPreviousScanGauge((Number)scanGauge);  } else {    o.setDerivedGauge((Number)scanGauge);    is_derived_gauge_valid=true;  }  return is_derived_gauge_valid;}  }
class C{  protected void fillStatement(PreparedStatement stmt,Object[] params) throws SQLException {  fillStatement(stmt,params,null);}  }
class C{  public void testObjectMarshallingToJson(){  ToDoItem toDoItem=getToDoItem(REMINDER_ON);  try {    JSONObject json=toDoItem.toJSON();    assertEquals(TEXT_BODY,json.getString("todotext"));    assertEquals(REMINDER_ON,json.getBoolean("todoreminder"));    assertEquals(String.valueOf(CURRENT_DATE.getTime()),json.getString("tododate"));  } catch (  JSONException e) {    fail("Exception thrown during test execution: " + e.getMessage());  }}  }
class C{  protected void showActionbar(boolean isShown){  if (getActivity() != null && getActivity() instanceof BaseActivity) {    ActionBar supportActionBar=((BaseActivity)getActivity()).getSupportActionBar();    if (isShown) {      supportActionBar.show();    } else {      supportActionBar.hide();    }  }}  }
class C{  @SuppressWarnings("unchecked") public CompositeComparator(Comparator<? super T>... comparators){  this(Arrays.asList(comparators));}  }
class C{  public int addSpeechStrategy(Iterable<EventSpeechRule> speechRules){  int count=0;synchronized (mPackageNameToSpeechRulesMap) {    for (    EventSpeechRule speechRule : speechRules) {      if (addSpeechRuleLocked(speechRule)) {        count++;      }    }  }  return count;}  }
class C{  public BinaryIn(Socket socket){  try {    InputStream is=socket.getInputStream();    in=new BufferedInputStream(is);    fillBuffer();  } catch (  IOException ioe) {    System.err.println("Could not open " + socket);  }}  }
class C{  public void removeHandler(Handler handler){  if (this.isNamed) {    LogManager.getLogManager().checkAccess();  }  if (handler == null) {    return;  }  this.handlers.remove(handler);  updateDalvikLogHandler();}  }
class C{  private void migrationStartInfo(){  s_logger.log(Level.INFO,"");  if (isUpgrade())   s_logger.log(Level.INFO,"migrateVersionMigration"); else   s_logger.log(Level.INFO,"migrateDatabaseMigration");}  }
class C{  protected Vcenter createNewTenantVcenter(TenantOrg tenant,VcenterParam param,Boolean validateConnection){  validateTenantVcenter(param,null,validateConnection);  Vcenter vcenter=new Vcenter();  vcenter.setId(URIUtil.createId(Vcenter.class));  addVcenterAclIfTenantAdmin(tenant,vcenter);  populateVcenterData(vcenter,param);  return vcenter;}  }
class C{  public boolean isSame(StoreFileMetaData md){  return metadata.isSame(md);}  }
class C{  public Prison(){  super();}  }
class C{  public String vertex(){  return (VERT_UNIFS + VERT_ATTRS + PER_VERT_ATTRS+ VERT_VARS+ "void main(void) {\n"+ VERT_SETPOS+ VERT_SETTEX+ VERT_SETCOLOR+ "}");}  }
class C{  private void initializeCommands(){  mCommands[ContactsCommandType.INSERT_COMMAND.ordinal()]=new InsertContactsCommand(this);  mCommands[ContactsCommandType.QUERY_COMMAND.ordinal()]=new QueryContactsCommand(this);  mCommands[ContactsCommandType.MODIFY_COMMAND.ordinal()]=new ModifyContactsCommand(this);  mCommands[ContactsCommandType.DELETE_COMMAND.ordinal()]=new DeleteContactsCommand(this);}  }
class C{  @Override public void write(DataOutput out) throws IOException {  this.value.write(out);}  }
class C{  @Override public void remove(Collection<? extends DataObject> objs) throws DatabaseException {  getDbClient().markForDeletion(objs);}  }
class C{  public Map<String,Long> map(){  Map<String,Long> map=new GridLeanMap<>(4);  map.put("reads",(long)reads);  map.put("writes",(long)writes);  map.put("hits",(long)hits);  map.put("misses",(long)misses);  return map;}  }
class C{  @Override public boolean isXMLExtraction(){  return options.isXMLExtraction();}  }
class C{  private SnmpPduRequest newValidResponsePdu(SnmpPduPacket reqPdu,SnmpVarBind[] varBindList){  SnmpPduRequest result=new SnmpPduRequest();  result.address=reqPdu.address;  result.port=reqPdu.port;  result.version=reqPdu.version;  result.community=reqPdu.community;  result.type=SnmpPduRequest.pduGetResponsePdu;  result.requestId=reqPdu.requestId;  result.errorStatus=SnmpDefinitions.snmpRspNoError;  result.errorIndex=0;  result.varBindList=varBindList;  ((SnmpAdaptorServer)adaptorServer).updateErrorCounters(result.errorStatus);  return result;}  }
class C{  private static String sniffCharacterEncoding(byte[] content){  int length=content.length < CHUNK_SIZE ? content.length : CHUNK_SIZE;  String str="";  try {    str=new String(content,0,length,Charset.forName("ASCII").toString());  } catch (  UnsupportedEncodingException e) {    return null;  }  Matcher metaMatcher=metaPattern.matcher(str);  String encoding=null;  if (metaMatcher.find()) {    Matcher charsetMatcher=charsetPattern.matcher(metaMatcher.group(1));    if (charsetMatcher.find())     encoding=new String(charsetMatcher.group(1));  }  return encoding;}  }
class C{  public void testAuthenticateSpringActiveDirectoryNotCorrect(){  LdapManager mgr=getLdapAD();  LdapAuthenticationUserNameVO authenticationInfo=new LdapAuthenticationUserNameVO();  authenticationInfo.setUserName("nacho");  authenticationInfo.setUserCredentials("archivo_2007k");  String ret=null;  try {    ret=mgr.authenticate(authenticationInfo);  } catch (  Exception e) {    assertEquals(LdapErrorCodes.ERR_10002_AUTHENTICATION_PROBLEM,((LdapException)e).getErrCode());  }  assertNull(ret);}  }
class C{  public void hard2(){  targetField=someField;  if (someField == 13) {    targetField=2;  }  if (targetField != 2) {    someField=targetField;  }}  }
class C{  public SimpleEdgePortrayal2D(){  this(Color.black,null);}  }
class C{  public SpatialSparseGraph(CoordinateReferenceSystem crs){  this.crs=crs;}  }
class C{  public synchronized void stopPreview(){  if (autoFocusManager != null) {    autoFocusManager.stop();    autoFocusManager=null;  }  if (camera != null && previewing) {    camera.stopPreview();    previewCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  public EmptyIteration(){}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Object removeFirst(){  Object o=null;  if (this.root.next != null) {    if (last == root) {      last=null;    }    o=this.root.obj;    this.root=this.root.next;    this.root.prev=null;    this.size--;  }  return o;}  }
class C{  public NodeSet(){  nodes=new ArrayList<Node>();}  }
class C{  public SearchColumn(int model,final String id,final String name,Icon icon,int width,boolean vis,Class<?> clazz){  super(model,id,name,icon,width,vis,clazz);  _visible=TablesHandlerSettings.getVisibility(id,vis).getValue();  _order=TablesHandlerSettings.getOrder(id,model).getValue();  _width=TablesHandlerSettings.getWidth(id,width).getValue();}  }
class C{  @Override public String toString(){  return "Tag Manager";}  }
class C{  public SignatureVisitor visitExceptionType(){  return this;}  }
class C{  static void test6(){  for (int i=0; i < input.length; i++) {    String s=input[i];    StringBuilder sb=new StringBuilder(s);    int length=s.length();    for (int j=0; j <= length; j++) {      int nCodePoints=Character.codePointCount(sb,j,length);      int result=sb.offsetByCodePoints(j,nCodePoints);      check(result != length,"offsetByCodePoints(input[" + i + "], "+ j+ ", "+ nCodePoints+ ")",result,length);      result=sb.offsetByCodePoints(length,-nCodePoints);      int expected=j;      if (j > 0 && j < length) {        int cp=sb.codePointBefore(j + 1);        if (Character.isSupplementaryCodePoint(cp)) {          expected--;        }      }      check(result != expected,"offsetByCodePoints(input[" + i + "], "+ j+ ", "+ (-nCodePoints)+ ")",result,expected);    }    for (int j=length; j >= 0; j--) {      int nCodePoints=Character.codePointCount(sb,0,j);      int result=sb.offsetByCodePoints(0,nCodePoints);      int expected=j;      if (j > 0 && j < length) {        int cp=sb.codePointAt(j - 1);        if (Character.isSupplementaryCodePoint(cp)) {          expected++;        }      }      check(result != expected,"offsetByCodePoints(input[" + i + "], 0, "+ nCodePoints+ ")",result,expected);      result=sb.offsetByCodePoints(j,-nCodePoints);      check(result != 0,"offsetBycodePoints(input[" + i + "], "+ j+ ", "+ (-nCodePoints)+ ")",result,0);    }    testOffsetByCodePoints(null,0,0,NullPointerException.class);    testOffsetByCodePoints(sb,-1,length,IndexOutOfBoundsException.class);    testOffsetByCodePoints(sb,0,length + 1,IndexOutOfBoundsException.class);    testOffsetByCodePoints(sb,1,-2,IndexOutOfBoundsException.class);    testOffsetByCodePoints(sb,length,length - 1,IndexOutOfBoundsException.class);    testOffsetByCodePoints(sb,length,-(length + 1),IndexOutOfBoundsException.class);  }}  }
class C{  public Generate_path_ createGenerate_path_(){  Generate_path_Impl generate_path_=new Generate_path_Impl();  return generate_path_;}  }
class C{  public VisorTaskArgument(UUID node,boolean debug){  this(node,null,debug);}  }
class C{  public void testSetCertificateCheckingLjava_X509Certificate() throws CertificateException {  X509CRLSelector selector=new X509CRLSelector();  CertificateFactory certFact=CertificateFactory.getInstance("X509");  X509Certificate cert=(X509Certificate)certFact.generateCertificate(new ByteArrayInputStream(TestUtils.getX509Certificate_v3()));  TestCRL crl=new TestCRL();  selector.setCertificateChecking(cert);  assertTrue("The CRL should match the selection criteria.",selector.match(crl));  assertEquals(cert,selector.getCertificateChecking());  selector.setCertificateChecking(null);  assertTrue("The CRL should match the selection criteria.",selector.match(crl));  assertNull(selector.getCertificateChecking());}  }
class C{  void simplifyConstantBranches(IR ir){  boolean didSomething=false;  for (Enumeration<BasicBlock> e=ir.forwardBlockEnumerator(); e.hasMoreElements(); ) {    BasicBlock bb=e.nextElement();    didSomething|=BranchSimplifier.simplify(bb,ir);  }  if (didSomething) {    branchOpts.perform(ir,true);    DefUse.computeDU(ir);    DefUse.recomputeSSA(ir);  }}  }
class C{  @Restrictions({@Restrict({"SYSTEM_ADMIN","SECURITY_ADMIN"}),@Restrict({"RESTRICTED_SYSTEM_ADMIN","RESTRICTED_SECURITY_ADMIN"})}) public static void clusterState(){  renderJSON(Common.getClusterInfo());}  }
class C{  long[] machar(){  long ibeta, it, irnd, machep, negep;  double beta, betain, betah, a, b, ZERO, ONE, TWO, temp, tempa, temp1;  long i, itemp;  ONE=(double)1;  TWO=ONE + ONE;  ZERO=ONE - ONE;  a=ONE;  temp1=ONE;  while (temp1 - ONE == ZERO) {    a=a + a;    temp=a + ONE;    temp1=temp - a;  }  b=ONE;  itemp=0;  while (itemp == 0) {    b=b + b;    temp=a + b;    itemp=(long)(temp - a);  }  ibeta=itemp;  beta=(double)ibeta;  it=0;  b=ONE;  temp1=ONE;  while (temp1 - ONE == ZERO) {    it=it + 1;    b=b * beta;    temp=b + ONE;    temp1=temp - b;  }  irnd=0;  betah=beta / TWO;  temp=a + betah;  if (temp - a != ZERO)   irnd=1;  tempa=a + beta;  temp=tempa + betah;  if ((irnd == 0) && (temp - tempa != ZERO))   irnd=2;  negep=it + 3;  betain=ONE / beta;  a=ONE;  for (i=0; i < negep; i++)   a=a * betain;  b=a;  temp=ONE - a;  while (temp - ONE == ZERO) {    a=a * beta;    negep=negep - 1;    temp=ONE - a;  }  negep=-(negep);  machep=-(it) - 3;  a=b;  temp=ONE + a;  while (temp - ONE == ZERO) {    a=a * beta;    machep=machep + 1;    temp=ONE + a;  }  eps=a;  return new long[]{ibeta,it,irnd,machep,negep};}  }
class C{  public static void prependChild(Element parent,Element child){  Node first=parent.getFirstChild();  if (first == null)   parent.appendChild(child); else {    parent.insertBefore(child,first);  }}  }
class C{  private boolean validate(InputNode node,String key) throws Exception {  String name=style.getElement(key);  InputNode next=node.getNext(name);  Class expect=type.getType();  if (next == null) {    return true;  }  if (next.isEmpty()) {    return true;  }  return root.validate(next,expect);}  }
class C{  public List<Map<String,String>> retrieveSendAs(String user) throws IllegalArgumentException, IOException, ServiceException {  if (isBlankOrNullString(user)) {    throw new IllegalArgumentException();  }  logger.log(Level.INFO,"Getting send-as settings for user " + user + " ...");  GenericFeed sendAsFeed=retrieveSettingsFeed(user,Constants.SEND_AS);  if (sendAsFeed != null) {    List<Map<String,String>> sendAs=new ArrayList<Map<String,String>>();    List<GenericEntry> sendAsEntries=sendAsFeed.getEntries();    for (    GenericEntry sendAsEntry : sendAsEntries) {      Map<String,String> sendAsMap=new HashMap<String,String>();      sendAsMap.put(Constants.ADDRESS,sendAsEntry.getProperty(Constants.ADDRESS));      sendAsMap.put(Constants.NAME,sendAsEntry.getProperty(Constants.NAME));      sendAsMap.put(Constants.REPLY_TO,sendAsEntry.getProperty(Constants.REPLY_TO));      sendAsMap.put(Constants.IS_DEFAULT,sendAsEntry.getProperty(Constants.IS_DEFAULT));      sendAsMap.put(Constants.VERIFIED,sendAsEntry.getProperty(Constants.VERIFIED));      sendAs.add(sendAsMap);    }    return sendAs;  }  return null;}  }
class C{  @VisibleForTesting protected State buildPatch(com.vmware.xenon.common.TaskState.TaskStage stage,@Nullable Throwable e){  State state=new State();  state.taskState=new com.vmware.xenon.common.TaskState();  state.taskState.stage=stage;  if (null != e) {    state.taskState.failure=Utils.toServiceErrorResponse(e);  }  return state;}  }
class C{  public static Response createBindingErrorResponseUnknownAttributes(char[] unknownAttributes) throws StunException {  return createBindingErrorResponse(ErrorCodeAttribute.UNKNOWN_ATTRIBUTE,null,unknownAttributes);}  }
class C{  public void deleteOIDCClient(String tenantName,String clientId) throws Exception {  getService().deleteOIDCClient(tenantName,clientId,this.getServiceContext());}  }
class C{  public void onItemSelected(AdapterView<?> parent,View view,int position,long id){  Log.d(LOG_TAG,"onItemSelected() position " + position);  mItemSelectedCalled=true;  mItemSelectedPosition=position;}  }
class C{  public static void putBooleanPref(SharedPreferences prefs,Resources res,int keyResId,boolean value){  storeBooleanAsync(prefs,res.getString(keyResId),value);}  }
class C{  public void addMessage(final String message){  final Runnable runner=null;  if (SwingUtilities.isEventDispatchThread()) {    runner.run();  } else {    SwingUtilities.invokeLater(runner);  }}  }
class C{  public SerbianNormalizationFilterFactory(Map<String,String> args){  super(args);  this.haircut=get(args,"haircut",Arrays.asList("bald","regular"),"bald");  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  private WindowsSecurityDescriptor(){  this.sidList=null;  this.aclBuffer=null;  this.sdBuffer=null;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"UADD16");  translateAll(environment,instruction,"UADD16",instructions);}  }
class C{  public final long offset(){  return ARRAY_BASE_OFFSET;}  }
class C{  public String globalInfo(){  return "Split an incoming data set into separate train and test sets.";}  }
class C{  public void refreshSpringConfigurations(){  Map<SpringConfig,String> springConfigMap=springConfigRegistry.getAllSpringConfig();  spinnerAdapter.clear();  mSpringConfigs.clear();  for (  Map.Entry<SpringConfig,String> entry : springConfigMap.entrySet()) {    if (entry.getKey() == SpringConfig.defaultConfig) {      continue;    }    mSpringConfigs.add(entry.getKey());    spinnerAdapter.add(entry.getValue());  }  mSpringConfigs.add(SpringConfig.defaultConfig);  spinnerAdapter.add(springConfigMap.get(SpringConfig.defaultConfig));  spinnerAdapter.notifyDataSetChanged();  if (mSpringConfigs.size() > 0) {    mSpringSelectorSpinner.setSelection(0);  }}  }
class C{  public final int computeLUD(GMatrix LU,GVector permutation){  int size=LU.nRow * LU.nCol;  double[] temp=new double[size];  int[] even_row_exchange=new int[1];  int[] row_perm=new int[LU.nRow];  int i, j;  if (nRow != nCol) {    throw new MatrixSizeException();  }  if (nRow != LU.nRow) {    throw new MatrixSizeException();  }  if (nCol != LU.nCol) {    throw new MatrixSizeException();  }  if (LU.nRow != permutation.size()) {    throw new MatrixSizeException();  }  for (i=0; i < nRow; i++) {    for (j=0; j < nCol; j++) {      temp[i * nCol + j]=values[i][j];    }  }  if (!decomposeLU(LU.nRow,temp,row_perm,even_row_exchange)) {    throw new SingularMatrixException();  }  for (i=0; i < nRow; i++) {    for (j=0; j < nCol; j++) {      LU.values[i][j]=temp[i * nCol + j];    }  }  for (i=0; i < LU.nRow; i++) {    permutation.values[i]=row_perm[i];  }  return even_row_exchange[0];}  }
class C{  public boolean contains(Object e){  if (e == null)   return false;  Class<?> eClass=e.getClass();  if (eClass != elementType && eClass.getSuperclass() != elementType)   return false;  return (elements & (1L << ((Enum<?>)e).ordinal())) != 0;}  }
class C{  public boolean isAccessibleRowSelected(int r){  if (validateIfNecessary()) {    if (r < 0 || r >= getAccessibleRowCount()) {      return false;    }    int nColumns=getAccessibleColumnCount();    TableCellElementInfo startCell=getCell(r,0);    if (startCell == null) {      return false;    }    int start=startCell.getElement().getStartOffset();    TableCellElementInfo endCell=getCell(r,nColumns - 1);    if (endCell == null) {      return false;    }    int end=endCell.getElement().getEndOffset();    return start >= editor.getSelectionStart() && end <= editor.getSelectionEnd();  }  return false;}  }
class C{  public static byte[] shortToBytes(int val){  byte[] arr=new byte[2];  arr[0]=(byte)(val >>> 8);  arr[1]=(byte)(val);  return arr;}  }
class C{  public static ItemStack mergeStacks(ItemStack a,ItemStack b){  return mergeStacksBang(a,b != null ? b.copy() : b);}  }
class C{  public AbstractConfigurationCapability(){  this.propertySupportMap=new HashMap<String,Boolean>();}  }
class C{  @SuppressLint("CommitPrefEdits") public void importPreferences(DataInputStream reader,SharedPreferences preferences) throws IOException {  Editor editor=preferences.edit();  editor.clear();  int numPreferences=reader.readInt();  for (int i=0; i < numPreferences; i++) {    String name=reader.readUTF();    byte typeId=reader.readByte();    readAndSetPreference(name,typeId,reader,editor);  }  ApiAdapterFactory.getApiAdapter().applyPreferenceChanges(editor);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.TANNOTATION_STRING_ARGUMENT__VALUE:    return VALUE_EDEFAULT == null ? value != null : !VALUE_EDEFAULT.equals(value);}return super.eIsSet(featureID);}  }
class C{  public StrBuilder deleteFirst(StrMatcher matcher){  return replace(matcher,null,0,size,1);}  }
class C{  public XMLString substring(int beginIndex,int endIndex){  return new XString(str().substring(beginIndex,endIndex));}  }
class C{  public static byte[] decode(byte[] source,int off,int len,int options) throws java.io.IOException {  if (source == null) {    throw new NullPointerException("Cannot decode null source array.");  }  if (off < 0 || off + len > source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and process %d bytes.",source.length,off,len));  }  if (len == 0) {    return new byte[0];  } else   if (len < 4) {    throw new IllegalArgumentException("Base64-encoded string must have at least four characters, but length specified was " + len);  }  byte[] DECODABET=getDecodabet(options);  int len34=len * 3 / 4;  byte[] outBuff=new byte[len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiDecode=0;  for (i=off; i < off + len; i++) {    sbiDecode=DECODABET[source[i] & 0xFF];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        b4[b4Posn++]=source[i];        if (b4Posn > 3) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,options);          b4Posn=0;          if (source[i] == EQUALS_SIGN) {            break;          }        }      }    } else {      throw new java.io.IOException(String.format("Bad Base64 input character decimal %d in array position %d",((int)source[i]) & 0xFF,i));    }  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  public boolean isSetDeleteResponse(){  return this.deleteResponse != null;}  }
class C{  @Override protected void processKeyEvent(KeyEvent e){  curPanel.dispatchEvent(e);  if (!e.isConsumed()) {    super.processKeyEvent(e);  }}  }
class C{  private Nickname(){}  }
class C{  public void drawLine(int x1,int y1,int x2,int y2){  impl.drawLine(nativeGraphics,xTranslate + x1,yTranslate + y1,xTranslate + x2,yTranslate + y2);}  }
class C{  @Nullable private IgfsEntryInfo fileForFragmentizer(Collection<IgniteUuid> exclude) throws IgniteCheckedException {  return fragmentizerEnabled ? igfsCtx.meta().fileForFragmentizer(exclude) : null;}  }
class C{  public ShrinkContext adjustStep(IntUnaryOperator offset){  return new ShrinkContext(offset.applyAsInt(step),remainingCyles,prng);}  }
class C{  @SuppressWarnings("deprecation") @Override public synchronized void acceptInstance(InstanceEvent e){  if (e.getStatus() == InstanceEvent.FORMAT_AVAILABLE) {    m_throughput=new StreamThroughput(statusMessagePrefix());    try {      m_Saver=makeCopy();    } catch (    Exception ex) {      if (m_logger != null) {        m_logger.statusMessage(statusMessagePrefix() + "ERROR (See log for details)");        m_logger.logMessage("[Saver] " + statusMessagePrefix() + " unable to copy saver. "+ ex.getMessage());      }    }    m_Saver.setRetrieval(weka.core.converters.Saver.INCREMENTAL);    m_structure=e.getStructure();    m_fileName=sanitizeFilename(m_structure.relationName());    m_Saver.setInstances(m_structure);    if (m_isDBSaver) {      if (((DatabaseSaver)m_SaverTemplate).getRelationForTableName()) {        ((DatabaseSaver)m_Saver).setTableName(m_fileName);        ((DatabaseSaver)m_Saver).setRelationForTableName(false);      }    }  }  if (e.getStatus() == InstanceEvent.INSTANCE_AVAILABLE) {    m_visual.setAnimated();    m_throughput.updateStart();    if (m_count == 0) {      passEnvOnToSaver();      if (!m_isDBSaver) {        try {          m_Saver.setDirAndPrefix(m_fileName,"");        } catch (        Exception ex) {          System.out.println(ex);          m_visual.setStatic();        }      }      m_count++;    }    try {      m_Saver.writeIncremental(e.getInstance());      m_throughput.updateEnd(m_logger);    } catch (    Exception ex) {      m_visual.setStatic();      System.err.println("Instance " + e.getInstance() + " could not been saved");      ex.printStackTrace();    }  }  if (e.getStatus() == InstanceEvent.BATCH_FINISHED) {    try {      if (m_count == 0) {        passEnvOnToSaver();        if (!m_isDBSaver) {          try {            m_Saver.setDirAndPrefix(m_fileName,"");          } catch (          Exception ex) {            System.out.println(ex);            m_visual.setStatic();          }        }        m_count++;      }      m_Saver.writeIncremental(e.getInstance());      if (e.getInstance() != null) {        m_throughput.updateStart();        m_Saver.writeIncremental(null);        m_throughput.updateEnd(m_logger);      }      m_visual.setStatic();      m_count=0;      m_throughput.finished(m_logger);    } catch (    Exception ex) {      m_visual.setStatic();      System.err.println("File could not have been closed.");      ex.printStackTrace();    }  }}  }
class C{  protected void serializeText(Text node) throws SAXException {  if (fNextIsRaw) {    fNextIsRaw=false;    fSerializer.processingInstruction(javax.xml.transform.Result.PI_DISABLE_OUTPUT_ESCAPING,"");    dispatachChars(node);    fSerializer.processingInstruction(javax.xml.transform.Result.PI_ENABLE_OUTPUT_ESCAPING,"");  } else {    boolean bDispatch=false;    if ((fFeatures & WELLFORMED) != 0) {      isTextWellFormed(node);    }    boolean isElementContentWhitespace=false;    if (fIsLevel3DOM) {      isElementContentWhitespace=node.isElementContentWhitespace();    }    if (isElementContentWhitespace) {      if ((fFeatures & ELEM_CONTENT_WHITESPACE) != 0) {        bDispatch=true;      }    } else {      bDispatch=true;    }    if (!applyFilter(node,NodeFilter.SHOW_TEXT)) {      return;    }    if (bDispatch) {      dispatachChars(node);    }  }}  }
class C{  public BulkRequest add(byte[] data,int from,int length) throws Exception {  return add(data,from,length,null,null);}  }
class C{  public boolean add(Object o){  return map.put(o,PRESENT) == null;}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public void testDynIntSortMissingLast() throws Exception {  checkSortMissingLast("dyn_intdv_missinglast","-1","4");}  }
class C{  public Boolean addPhoneNumberKitchenSink(Integer departmentId,PhoneNumber body,Integer employeeId,String X_PASS_CODE) throws ApiException {  Object postBody=body;  if (departmentId == null) {    throw new ApiException(400,"Missing the required parameter 'departmentId' when calling addPhoneNumberKitchenSink");  }  if (body == null) {    throw new ApiException(400,"Missing the required parameter 'body' when calling addPhoneNumberKitchenSink");  }  String path="/hr/kitchen/{departmentId}/employee/phoneNumber/kitchen/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "departmentId" + "\\}",apiClient.escapeString(departmentId.toString()));  List<Pair> queryParams=new ArrayList<Pair>();  Map<String,String> headerParams=new HashMap<String,String>();  Map<String,String> formParams=new HashMap<String,String>();  queryParams.addAll(apiClient.parameterToPairs("","employeeId",employeeId));  if (X_PASS_CODE != null)   headerParams.put("X-PASS-CODE",apiClient.parameterToString(X_PASS_CODE));  final String[] accepts={"application/json"};  final String accept=apiClient.selectHeaderAccept(accepts);  final String[] contentTypes={};  final String contentType=apiClient.selectHeaderContentType(contentTypes);  if (contentType.startsWith("multipart/form-data")) {    boolean hasFields=false;    FormDataMultiPart mp=new FormDataMultiPart();    if (hasFields)     postBody=mp;  } else {  }  try {    String[] authNames=new String[]{};    String response=apiClient.invokeAPI(path,"POST",queryParams,postBody,headerParams,formParams,accept,contentType,authNames);    if (response != null) {      return (Boolean)apiClient.deserialize(response,"",Boolean.class);    } else {      return null;    }  } catch (  ApiException ex) {    throw ex;  }}  }
class C{  public int pop(){  if (this.i < 0)   throw new InternalError("Cannot pop stack!");  this.i--;  return this.v[this.i + 1];}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  @Override public void qtest(Query q,int[] expDocNrs) throws Exception {  CheckHits.checkNoMatchExplanations(q,FIELD,searcher,expDocNrs);}  }
class C{  public boolean mousePressed(MouseEvent e){  if (coolMM) {    return getCurrentLayerMapMouseListener().mousePressed(e);  } else {    return false;  }}  }
class C{  public synchronized void allowThreadDecoding(ThreadSet threads){  for (  Thread t : threads) {    allowThreadDecoding(t);  }}  }
class C{  private static int calculateTotalBytes(ByteBuffer[] byteBufferArr){  int total=0;  for (int index=0; index < byteBufferArr.length; index++) {    total+=byteBufferArr[index].capacity();  }  return total;}  }
class C{  protected TVariableImpl(){  super();}  }
class C{  public JSONArray(){  this.myArrayList=new ArrayList<Object>();}  }
class C{  public WebResource createRequest(Client client,URI baseURI,URI requestPath){  URI fullURI=baseURI.resolve(requestPath);  return client.resource(fullURI);}  }
class C{  public static void main(String[] argv){  try {    if (argv.length == 0) {      throw new Exception("Usage: Range <rangespec>");    }    Range range=new Range();    range.setRanges(argv[0]);    range.setUpper(9);    range.setInvert(false);    System.out.println("Input: " + argv[0] + "\n"+ range.toString());    int[] rangeIndices=range.getSelection();    for (    int rangeIndice : rangeIndices) {      System.out.print(" " + (rangeIndice + 1));    }    System.out.println("");  } catch (  Exception ex) {    System.out.println(ex.getMessage());  }}  }
class C{  protected void header() throws IOException {}  }
class C{  private void onTrigger0(){  addInstruction(R.string.accessibility_tutorial_lesson_5_text_1,true);  mLayout.setAccessibilityDelegate(mEditTextFocusedDelegate);}  }
class C{  public void scheduleCommitWithin(long commitMaxTime){  _scheduleCommitWithin(commitMaxTime);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapgetnameditemns05.class,args);}  }
class C{  public MailOperationException(String message,Throwable cause){  super(message,cause);}  }
class C{  public QName(String namespaceURI,String localName){  this(namespaceURI,localName,false);}  }
class C{  public static InstalledApp find_app(String package_name){  if (package_name == null) {    Log.v(MainActivity.TAG,"[InstalledApp.find_app] Called with a null argument!");    return null;  }  List<InstalledApp> res=find(InstalledApp.class,"_packagename = ?",package_name);  if (res.size() == 0) {    return null;  } else   if (res.size() > 1) {    Log.v(MainActivity.TAG,"[InstalledApp.find_app] Multiple apps match " + package_name + ". This should not happen.");    for (    InstalledApp app : res) {      Log.v(MainActivity.TAG,"\t" + app.get_display_name());    }    return null;  }  return res.get(0);}  }
class C{  public boolean absolute(int row) throws SQLException {  checkCursorMove();  boolean result=fbFetcher.absolute(row);  if (result)   notifyRowUpdater();  return result;}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public BaseWroManagerFactory addModelTransformer(final Transformer<WroModel> modelTransformer){  if (modelTransformers == null) {    modelTransformers=new ArrayList<Transformer<WroModel>>();  }  this.modelTransformers.add(modelTransformer);  return this;}  }
class C{  public static long runMultiThreaded(Iterable<Callable<?>> calls,String threadName) throws Exception {  return runMultiThreaded(calls,new GridTestSafeThreadFactory(threadName));}  }
class C{  public TermsQueryBuilder queryName(String queryName){  this.queryName=queryName;  return this;}  }
class C{  private static int encodeText(CharSequence msg,int startpos,int count,StringBuilder sb,int initialSubmode){  StringBuilder tmp=new StringBuilder(count);  int submode=initialSubmode;  int idx=0;  while (true) {    char ch=msg.charAt(startpos + idx);switch (submode) {case SUBMODE_ALPHA:      if (isAlphaUpper(ch)) {        if (ch == ' ') {          tmp.append((char)26);        } else {          tmp.append((char)(ch - 65));        }      } else {        if (isAlphaLower(ch)) {          submode=SUBMODE_LOWER;          tmp.append((char)27);          continue;        } else         if (isMixed(ch)) {          submode=SUBMODE_MIXED;          tmp.append((char)28);          continue;        } else {          tmp.append((char)29);          tmp.append((char)PUNCTUATION[ch]);          break;        }      }    break;case SUBMODE_LOWER:  if (isAlphaLower(ch)) {    if (ch == ' ') {      tmp.append((char)26);    } else {      tmp.append((char)(ch - 97));    }  } else {    if (isAlphaUpper(ch)) {      tmp.append((char)27);      tmp.append((char)(ch - 65));      break;    } else     if (isMixed(ch)) {      submode=SUBMODE_MIXED;      tmp.append((char)28);      continue;    } else {      tmp.append((char)29);      tmp.append((char)PUNCTUATION[ch]);      break;    }  }break;case SUBMODE_MIXED:if (isMixed(ch)) {tmp.append((char)MIXED[ch]);} else {if (isAlphaUpper(ch)) {  submode=SUBMODE_ALPHA;  tmp.append((char)28);  continue;} else if (isAlphaLower(ch)) {  submode=SUBMODE_LOWER;  tmp.append((char)27);  continue;} else {  if (startpos + idx + 1 < count) {    char next=msg.charAt(startpos + idx + 1);    if (isPunctuation(next)) {      submode=SUBMODE_PUNCTUATION;      tmp.append((char)25);      continue;    }  }  tmp.append((char)29);  tmp.append((char)PUNCTUATION[ch]);}}break;default :if (isPunctuation(ch)) {tmp.append((char)PUNCTUATION[ch]);} else {submode=SUBMODE_ALPHA;tmp.append((char)29);continue;}}idx++;if (idx >= count) {break;}}char h=0;int len=tmp.length();for (int i=0; i < len; i++) {boolean odd=(i % 2) != 0;if (odd) {h=(char)((h * 30) + tmp.charAt(i));sb.append(h);} else {h=tmp.charAt(i);}}if ((len % 2) != 0) {sb.append((char)((h * 30) + 29));}return submode;}  }
class C{  private boolean isGivenVolumeListSameAsInStorageGroup(StorageSystem storage,CIMObjectPath groupPath,List<URI> volumeURIs) throws WBEMException {  Set<String> returnedNativeGuids=new HashSet<String>();  Set<String> givenNativeGuids=new HashSet<String>();  CloseableIterator<CIMObjectPath> volumePathItr=null;  try {    List<Volume> volumes=_dbClient.queryObject(Volume.class,volumeURIs);    volumePathItr=_helper.getAssociatorNames(storage,groupPath,null,SmisConstants.CIM_STORAGE_VOLUME,null,null);    while (volumePathItr.hasNext()) {      returnedNativeGuids.add(_helper.getVolumeNativeGuid(volumePathItr.next()));    }    for (    Volume volume : volumes) {      givenNativeGuids.add(volume.getNativeGuid());    }    _log.info("NativeGuids of Volumes from SG: {}",returnedNativeGuids);    _log.info("NativeGuids of Requested Volumes in this SG: {}",givenNativeGuids);    Set<String> diff=Sets.difference(returnedNativeGuids,givenNativeGuids);    return (diff.isEmpty());  }  finally {    volumePathItr.close();  }}  }
class C{  @Override public TransferResult<V,S> visitNode(Node n,TransferInput<V,S> in){  V value=null;  Tree tree=n.getTree();  if (tree != null) {    if (TreeUtils.canHaveTypeAnnotation(tree)) {      value=getValueFromFactory(tree,n);    }  }  if (in.containsTwoStores()) {    S thenStore=in.getThenStore();    S elseStore=in.getElseStore();    return new ConditionalTransferResult<>(finishValue(value,thenStore,elseStore),thenStore,elseStore);  } else {    S info=in.getRegularStore();    return new RegularTransferResult<>(finishValue(value,info),info);  }}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public static <T>List<Pair<IPlugin<T>,Exception>> initializePlugins(final T pluginInterface,final IPluginRegistry<IPlugin<T>> registry,final List<Pair<IPlugin<T>,PluginStatus>> list,final ConfigManager configFile){  Preconditions.checkNotNull(pluginInterface,"IE00828: Plugin interface can't be null");  Preconditions.checkNotNull(registry,"IE00829: Plugin registry can't be null");  Preconditions.checkNotNull(list,"IE00830: Plugins can't be null");  Preconditions.checkNotNull(configFile,"IE00831: Config File can't be null");  final ArrayList<Pair<IPlugin<T>,Exception>> initializedPlugins=new ArrayList<Pair<IPlugin<T>,Exception>>();  final List<PluginConfigItem> pluginOrder=configFile.getGeneralSettings().getPlugins();  final Set<Long> processedPlugins=new HashSet<Long>();  initializeKnownPlugins(pluginInterface,registry,pluginOrder,list,initializedPlugins,processedPlugins);  initializeUnknownPlugins(registry,pluginInterface,list,initializedPlugins,processedPlugins);  return initializedPlugins;}  }
class C{  public PreparedStatementCache(int capacity){  cache=new IndexedLRUCache<PreparedStatementHolder>(capacity,this);}  }
class C{  public ContextSessionManagementPanel(ExtensionSessionManagement extension,Context context){  super(context.getIndex());  this.extension=extension;  initialize();}  }
class C{  public Analyzer includeGenerationalDistance(){  includeGenerationalDistance=true;  return this;}  }
class C{  public FastStringBuffer append(char n){  if (count + 1 > value.length) {    resizeForMinimum(count + 1);  }  value[count]=n;  count++;  return this;}  }
class C{  private void putEntry(String key,CacheHeader entry){  if (!mEntries.containsKey(key)) {    mTotalSize+=entry.size;  } else {    CacheHeader oldEntry=mEntries.get(key);    mTotalSize+=(entry.size - oldEntry.size);  }  mEntries.put(key,entry);}  }
class C{  private void checkClusterStatus() throws Exception {  initNodeListByCheckDbStatus();  validateNodesStatus();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:47.794 -0500",hash_original_method="13D7CE02E81D272A0503942FC3D4E826",hash_generated_method="13D7CE02E81D272A0503942FC3D4E826") MiniEnumSet(Class<E> elementType,E[] enums){  super(elementType);  this.enums=enums;}  }
class C{  private Object extractTransferData(DropTargetDropEvent dtde){  if (dtde == null) {    Debug.message("defaultdndcatcher","ERROR> DefaultDnDCatcher::getTransferData(): dropEvent is null");    return null;  }  Transferable tr=dtde.getTransferable();  try {    return tr.getTransferData(DefaultTransferableObject.OBJECT_FLAVOR);  } catch (  Exception e) {    e.printStackTrace();    return null;  }}  }
class C{  boolean nameRefsAreLegal(){  assert (arity >= 0 && arity <= names.length);  assert (result >= -1 && result < names.length);  for (int i=0; i < arity; i++) {    Name n=names[i];    assert (n.index() == i) : Arrays.asList(n.index(),i);    assert (n.isParam());  }  for (int i=arity; i < names.length; i++) {    Name n=names[i];    assert (n.index() == i);    for (    Object arg : n.arguments) {      if (arg instanceof Name) {        Name n2=(Name)arg;        int i2=n2.index;        assert (0 <= i2 && i2 < names.length) : n.debugString() + ": 0 <= i2 && i2 < names.length: 0 <= " + i2+ " < "+ names.length;        assert (names[i2] == n2) : Arrays.asList("-1-",i,"-2-",n.debugString(),"-3-",i2,"-4-",n2.debugString(),"-5-",names[i2].debugString(),"-6-",this);        assert (i2 < i);      }    }  }  return true;}  }
class C{  public static StandardizedSemIm serializableInstance(){  return new StandardizedSemIm(SemIm.serializableInstance());}  }
class C{  public boolean isLoggingEnabled(){  return m_Logging;}  }
class C{  public void addBinding(Binding binding){  addBinding(binding.getName(),binding.getValue());}  }
class C{  public void rederiveColor(){  Color src=UIManager.getColor(uiDefaultParentName);  if (src != null) {    float[] tmp=Color.RGBtoHSB(src.getRed(),src.getGreen(),src.getBlue(),null);    tmp[0]=clamp(tmp[0] + hOffset);    tmp[1]=clamp(tmp[1] + sOffset);    tmp[2]=clamp(tmp[2] + bOffset);    int alpha=clamp(src.getAlpha() + aOffset);    argbValue=(Color.HSBtoRGB(tmp[0],tmp[1],tmp[2]) & 0xFFFFFF) | (alpha << 24);  } else {    float[] tmp=new float[3];    tmp[0]=clamp(hOffset);    tmp[1]=clamp(sOffset);    tmp[2]=clamp(bOffset);    int alpha=clamp(aOffset);    argbValue=(Color.HSBtoRGB(tmp[0],tmp[1],tmp[2]) & 0xFFFFFF) | (alpha << 24);  }}  }
class C{  public table addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  protected void parseScale() throws ParseException, IOException {  current=reader.read();  if (current != 'a') {    reportCharacterExpectedError('a',current);    skipTransform();    return;  }  current=reader.read();  if (current != 'l') {    reportCharacterExpectedError('l',current);    skipTransform();    return;  }  current=reader.read();  if (current != 'e') {    reportCharacterExpectedError('e',current);    skipTransform();    return;  }  current=reader.read();  skipSpaces();  if (current != '(') {    reportCharacterExpectedError('(',current);    skipTransform();    return;  }  current=reader.read();  skipSpaces();  float sx=parseFloat();  skipSpaces();switch (current) {case ')':    fragmentIdentifierHandler.scale(sx);  return;case ',':current=reader.read();skipSpaces();}float sy=parseFloat();skipSpaces();if (current != ')') {reportCharacterExpectedError(')',current);skipTransform();return;}fragmentIdentifierHandler.scale(sx,sy);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return STORE_NAME;case 3:return KEY;case 4:return VERSIONED_VALUE;case 5:return VALUE;default :return null;}}  }
class C{  private static double[] defaultBreakpoints(double max,double min,int numCategories){  double interval=(max - min) / numCategories;  double[] breakpoints=new double[numCategories - 1];  for (int i=0; i < breakpoints.length; i++) {    breakpoints[i]=min + (i + 1) * interval;  }  return breakpoints;}  }
class C{  private void scrollToRow(int index){  if (index != -1) {    scrollRectToVisible(getCellRect(index,0,true));  }}  }
class C{  public Attendee addAttendee(String email){  Attendee prop=new Attendee(null,email);  addAttendee(prop);  return prop;}  }
class C{  GeneralPath drawGeometry(Geometry geom,GeomInfo2D info,boolean fill){  Coordinate coords[]=geom.getCoordinates();  GeneralPath path=new GeneralPath(GeneralPath.WIND_NON_ZERO,coords.length);  path.moveTo((float)coords[0].x,(float)coords[0].y);  for (int i=1; i < coords.length; i++) {    path.lineTo((float)coords[i].x,(float)coords[i].y);  }  path.transform(info.transform);  return path;}  }
class C{  private static boolean paramsEqual(final String p1,final String p2){  if (p1 == null) {    return p1 == p2;  } else {    return p1.equals(p2);  }}  }
class C{  public static AC parseRowConstraints(String s){  return parseAxisConstraint(s,false);}  }
class C{  private int[] createEpochMonths(int epochDay,int minYear,int maxYear,Map<Integer,int[]> years){  int numMonths=(maxYear - minYear + 1) * 12 + 1;  int epochMonth=0;  int[] epochMonths=new int[numMonths];  minMonthLength=Integer.MAX_VALUE;  maxMonthLength=Integer.MIN_VALUE;  for (int year=minYear; year <= maxYear; year++) {    int[] months=years.get(year);    for (int month=0; month < 12; month++) {      int length=months[month];      epochMonths[epochMonth++]=epochDay;      if (length < 29 || length > 32) {        throw new IllegalArgumentException("Invalid month length in year: " + minYear);      }      epochDay+=length;      minMonthLength=Math.min(minMonthLength,length);      maxMonthLength=Math.max(maxMonthLength,length);    }  }  epochMonths[epochMonth++]=epochDay;  if (epochMonth != epochMonths.length) {    throw new IllegalStateException("Did not fill epochMonths exactly: ndx = " + epochMonth + " should be "+ epochMonths.length);  }  return epochMonths;}  }
class C{  public void populateTableByDistributionSet(final DistributionSet distributionSet){  removeAllItems();  if (distributionSet == null) {    return;  }  Container dataSource=getContainerDataSource();  List<TargetFilterQuery> filters=distributionSet.getAutoAssignFilters();  filters.forEach(null);}  }
class C{  private boolean journalRebuildRequired(){  final int REDUNDANT_OP_COMPACT_THRESHOLD=2000;  return redundantOpCount >= REDUNDANT_OP_COMPACT_THRESHOLD && redundantOpCount >= lruEntries.size();}  }
class C{  @Override protected void register(DeployerFactory deployerFactory){  deployerFactory.registerDeployer("resin2x",DeployerType.INSTALLED,ResinInstalledLocalDeployer.class);  deployerFactory.registerDeployer("resin3x",DeployerType.INSTALLED,ResinInstalledLocalDeployer.class);  deployerFactory.registerDeployer("resin31x",DeployerType.INSTALLED,ResinInstalledLocalDeployer.class);  deployerFactory.registerDeployer("resin4x",DeployerType.INSTALLED,ResinInstalledLocalDeployer.class);}  }
class C{  public String toString(){  return String.valueOf(val);}  }
class C{  public LZMAInputStream(InputStream in,long uncompSize,int lc,int lp,int pb,int dictSize,byte[] presetDict) throws IOException {  initialize(in,uncompSize,lc,lp,pb,dictSize,presetDict);}  }
class C{  public static String removeStopwordsAndBadwordsFromTvEpisodeName(String filename){  String before=filename;  filename=filename.replaceFirst("(?i)\\W\\d{3,4}x\\d{3,4}"," ");  for (  String s : stopwords) {    filename=filename.replaceAll("(?i)\\W" + s + "(\\W|$)"," ");    if (LOGGER.isTraceEnabled() && filename.length() != before.length()) {      LOGGER.trace("Removed some TV stopword (" + s + "): "+ before+ " -> "+ filename);      before=filename;    }  }  for (  String s : TvShowModuleManager.SETTINGS.getBadWords()) {    filename=filename.replaceAll("(?i)\\W" + s + "(\\W|$)"," ");    if (LOGGER.isTraceEnabled() && filename.length() != before.length()) {      LOGGER.trace("Removed some TV bad word (" + s + "): "+ before+ " -> "+ filename);      before=filename;    }  }  return filename;}  }
class C{  public JsonObjectRequest(int method,String url,JSONObject jsonRequest,Listener<JSONObject> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  final public void CompilationUnit() throws ParseException {  ASTCompilationUnit jjtn000=new ASTCompilationUnit(JJTCOMPILATIONUNIT);  boolean jjtc000=true;  jjtree.openNodeScope(jjtn000);  jjtn000.jjtSetFirstToken(getToken(1));  try {    Begin();    label_1:     while (true) {switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {case CLASS:{          ;          break;        }default :      jj_la1[0]=jj_gen;    break label_1;}ClassDeclaration();}End();jj_consume_token(0);} catch (Throwable jjte000) {if (jjtc000) {jjtree.clearNodeScope(jjtn000);jjtc000=false;} else {jjtree.popNode();}if (jjte000 instanceof RuntimeException) {{  if (true)   throw (RuntimeException)jjte000;}}if (jjte000 instanceof ParseException) {{  if (true)   throw (ParseException)jjte000;}}{if (true) throw (Error)jjte000;}} finally {if (jjtc000) {jjtree.closeNodeScope(jjtn000,true);jjtn000.jjtSetLastToken(getToken(0));}}}  }
class C{  private AttrSessionID(final String val){  super(val);}  }
class C{  @Deprecated public static void registerQuickFixAction(@Nullable HighlightInfo info,@Nullable IntentionAction action,@Nullable List<IntentionAction> options,@Nullable String displayName){  if (info == null)   return;  info.registerFix(action,options,displayName,null,null);}  }
class C{  public ScreenAnnotation(String text,Point position,Font font){  this.init(text,position,font,null);}  }
class C{  @Override protected boolean validate(Initiator initiator,CIMInstance mask,CIMInstance assocMask){  if (mask.equals(assocMask)) {    throw new IllegalArgumentException("Mask instance parameters must not be equal");  }  String name=(String)mask.getPropertyValue(SmisConstants.CP_DEVICE_ID);  String assocName=(String)assocMask.getPropertyValue(SmisConstants.CP_DEVICE_ID);  log.info("MV {} is sharing an initiator with MV {}",name,assocName);  URI maskURI=getExportMaskURI(name);  URI assocMaskURI=getExportMaskURI(assocName);  if (assocMaskURI == null) {    logFailure("associated mask is not under ViPR management");    return false;  }  List<ExportMask> masks=getMasks(maskURI,assocMaskURI);  URI groupURI=getExportGroupURI(maskURI);  URI assocGroupURI=getExportGroupURI(assocMaskURI);  if (groupURI == null || !groupURI.equals(assocGroupURI)) {    if (exportMasksHaveMatchingInitiators(masks)) {      logFailure("masks share the same initiators but exist in different export groups");      return false;    }  }  return true;}  }
class C{  public static ConsultaConnectBy generateNativeSQLWithConnectBy(DbConnection conn,TableDef tabla,DbColumnDef idElementoField,DbColumnDef idPadreField,String[] idsElementoOrigen,Map condiciones) throws IeciTdException {  StringBuffer sql=new StringBuffer("");  StringBuffer withClause=new StringBuffer("");  ConsultaConnectBy consultaSQL=null;  if (isOracle(conn)) {    StringBuffer qual=new StringBuffer("");    if (condiciones != null) {      Iterator it=condiciones.keySet().iterator();      while (it.hasNext()) {        qual.append(DBUtils.AND);        DbColumnDef columna=(DbColumnDef)it.next();        Object valor=condiciones.get(columna);        columna=DBUtils.getCustomizedField(columna,tabla.getAlias());        if (valor instanceof String) {          String valorString=(String)valor;          qual.append(DBUtils.generateEQTokenField(columna,valorString));        } else         if (valor instanceof Integer) {          Integer valorInteger=(Integer)valor;          if (valorInteger != null) {            int valorInt=valorInteger.intValue();            qual.append(DBUtils.generateEQTokenField(columna,valorInt));          }        } else         if (valor instanceof String[] || valor instanceof Integer[]) {          qual.append(DBUtils.generateInTokenField(columna,valor));        }      }    }    sql.append(DBUtils.SELECT).append(DBUtils.getCustomizedField(idElementoField,tabla.getAlias()).getQualifiedName()).append(DBUtils.FROM).append(tabla.getAlias()).append(DBUtils.START_WITH).append(DBUtils.generateInTokenField(idElementoField,idsElementoOrigen)).append(DBUtils.CONNECT_BY_PRIOR).append(DBUtils.getCustomizedField(idElementoField,tabla.getAlias())).append(Constants.EQUAL).append(DBUtils.getCustomizedField(idPadreField,tabla.getAlias())).append(qual);    consultaSQL=new ConsultaConnectBy(sql.toString());  } else   if (isSqlServer(conn) || isDB2(conn)) {    consultaSQL=new ConsultaConnectBy();    TableDef tablaIds=DBUtils.getCustomizedTable(tabla,DBUtils.NOMBRE_TABLA_IDS);    String aliasTablaPrincipal="A";    String aliasTablaRecursiva="R";    TableDef tablaRecursiva=DBUtils.getCustomizedTable(tablaIds,aliasTablaRecursiva);    StringBuffer qual=new StringBuffer("");    if (condiciones != null) {      Iterator it=condiciones.keySet().iterator();      while (it.hasNext()) {        qual.append(DBUtils.AND);        DbColumnDef columna=(DbColumnDef)it.next();        Object valor=condiciones.get(columna);        columna=DBUtils.getCustomizedField(columna,aliasTablaPrincipal);        if (valor instanceof String) {          String valorString=(String)valor;          qual.append(DBUtils.generateEQTokenField(columna,valorString));        } else         if (valor instanceof Integer) {          Integer valorInteger=(Integer)valor;          if (valorInteger != null) {            int valorInt=valorInteger.intValue();            qual.append(DBUtils.generateEQTokenField(columna,valorInt));          }        } else         if (valor instanceof String[] || valor instanceof Integer[]) {          qual.append(DBUtils.generateInTokenField(columna,valor));        }      }    }    withClause.append(getNativeWithSyntax(conn)).append(DBUtils.NOMBRE_TABLA_IDS).append(" (").append(idElementoField.getName()).append(")").append(DBUtils.AS).append("(").append(DBUtils.SELECT).append(idElementoField.getQualifiedName()).append(DBUtils.FROM).append(tabla.getName()).append(DBUtils.WHERE).append(DBUtils.generateInTokenField(idElementoField,idsElementoOrigen)).append(DBUtils.UNION_ALL).append(DBUtils.SELECT).append(DBUtils.getCustomizedField(idElementoField,aliasTablaPrincipal).getQualifiedName()).append(DBUtils.FROM).append(DBUtils.getCustomizedTable(tabla,aliasTablaPrincipal).getDeclaration()).append(Constants.COMMA).append(tablaRecursiva.getDeclaration()).append(DBUtils.WHERE).append(DBUtils.getCustomizedField(idPadreField,aliasTablaPrincipal)).append(Constants.EQUAL).append(DBUtils.getCustomizedField(idElementoField,aliasTablaRecursiva));    if (StringUtils.isNotEmpty(qual.toString())) {      withClause.append(qual);    }    withClause.append(") ");    consultaSQL.setWithClause(withClause.toString());    sql.append(DBUtils.SELECT).append(DBUtils.getCustomizedField(idElementoField,tablaIds.getAlias()).getQualifiedName()).append(DBUtils.FROM).append(tablaIds.getAlias());    consultaSQL.setSqlClause(sql.toString());  } else   if (isPostgreSQL(conn)) {    sql.append(getConnectByPostgreSyntax(tabla,idElementoField,idPadreField,idsElementoOrigen));    consultaSQL=new ConsultaConnectBy();    consultaSQL.setSqlClause(sql.toString());  }  return consultaSQL;}  }
class C{  public static TradestrategyStatus newInstance(){  final TradestrategyStatus returnInstance=new TradestrategyStatus();  returnInstance.setDefaultCode();  return returnInstance;}  }
class C{  protected void initGUI(){  setLayout(new BorderLayout());}  }
class C{  @BeforeClass public static void createLogDir(){  logDir=new File(FileUtils.getTempDirectory(),LogReaderTest.class.getSimpleName());  logDir.mkdirs();}  }
class C{  public synchronized int countAll(){  Query query=this.entityManager.createQuery("Select count(v) from Vertex v");  setHints(query);  return ((Number)query.getSingleResult()).intValue();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected void cacheCtClass(String classname,CtClass c,boolean dynamic){  if (dynamic) {    super.cacheCtClass(classname,c,dynamic);  } else {    if (repository.isPrune())     c.prune();    softcache.put(classname,c);  }}  }
class C{  public void onPackageRemoved(String packageName,int uid){}  }
class C{  public void write(OutputNode node,Collection list) throws Exception {  for (  Object item : list) {    if (item != null) {      Class expect=entry.getType();      Class actual=item.getClass();      if (!expect.isAssignableFrom(actual)) {        throw new PersistenceException("Entry %s does not match %s for %s",actual,expect,type);      }      root.write(node,item,expect,name);    }  }}  }
class C{  public void encode(OutputStream out,boolean isExplicit) throws CRLException {  try {    DerOutputStream extOut=new DerOutputStream();    Collection<Extension> allExts=map.values();    Object[] objs=allExts.toArray();    for (int i=0; i < objs.length; i++) {      if (objs[i] instanceof CertAttrSet)       ((CertAttrSet)objs[i]).encode(extOut); else       if (objs[i] instanceof Extension)       ((Extension)objs[i]).encode(extOut); else       throw new CRLException("Illegal extension object");    }    DerOutputStream seq=new DerOutputStream();    seq.write(DerValue.tag_Sequence,extOut);    DerOutputStream tmp=new DerOutputStream();    if (isExplicit)     tmp.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0),seq); else     tmp=seq;    out.write(tmp.toByteArray());  } catch (  IOException e) {    throw new CRLException("Encoding error: " + e.toString());  }catch (  CertificateException e) {    throw new CRLException("Encoding error: " + e.toString());  }}  }
class C{  void exceptionTest(int start,int length){  boolean gotException=false;  try {    mainThread.frames(start,length);  } catch (  IndexOutOfBoundsException exc) {    gotException=true;  }catch (  Exception exc) {    failure("unexpected exception thrown for: " + "start = " + start + ", length = "+ length+ " - "+ exc);    gotException=true;  }  if (!gotException) {    failure("expected IndexOutOfBoundsException " + "not thrown for: " + "start = " + start + ", length = "+ length);  }}  }
class C{  public static int ceil(double num){  int ceil=(int)num;  return (ceil == num) ? ceil : ((num > 0) ? (ceil + 1) : ceil);}  }
class C{  public VectorTileEncoder(Envelope targetBBox){  this(4096,targetBBox,0.1d,DEFAULT_SMALL_GEOMETRY_THRESHOLD);}  }
class C{  public T remove(RelatedResourceRep ref){  return remove(id(ref));}  }
class C{  public IdentityHashMap(){  this(DEFAULT_MAX_SIZE);}  }
class C{  private static void printUsage(){  StringBuffer use=new StringBuffer();  use.append("usage: java Chat (options) ...\n\n");  use.append("options:\n");  use.append("  -b name:port Specify name:port of broker.\n");  use.append("               Default broker: " + DEFAULT_BROKER_NAME + "\n");  use.append("  -u name      Specify unique user name. (Required)\n");  use.append("  -p password  Specify password for user.\n");  use.append("               Default password: " + DEFAULT_PASSWORD + "\n");  use.append("  -h           This help screen.\n");  System.err.println(use);}  }
class C{  @Override public void logoutError(Message arg0,HttpServletRequest request,HttpServletResponse response){  Validate.notNull(arg0,"Message");  com.vmware.identity.websso.client.ValidationResult clientVr=arg0.getValidationResult();  ValidationResult vr=null;  String message;  if (arg0.getStatus() != null && !arg0.getStatus().equals(OasisNames.SUCCESS)) {    vr=new ValidationResult(HttpServletResponse.SC_BAD_REQUEST,arg0.getStatus(),arg0.getSubstatus());    message=vr.getMessage(messageSource,getLogoutState().getLocale());    logger.error("Error logout message from Externel IDP: {} message: {}",vr.getResponseCode(),message);  } else {    vr=new ValidationResult(clientVr.getResponseCode(),clientVr.getStatus(),clientVr.getSubstatus());    message=vr.getMessage(messageSource,getLogoutState().getLocale());    logger.error("Failed in validating logout response from Externel IDP: {} message: {}",vr.getResponseCode(),message);  }  try {    response.sendError(vr.getResponseCode(),message);  } catch (  IOException e) {    logger.error("Caught IOException in sending error to logout request/response issurer");  }}  }
class C{  public NumberAxis3D(String label){  super(label);}  }
class C{  public static void putString2bytes(byte[] destbytes,String srcString,int destOffset,int srcOffset,int count){  for (int i=0; i < count; i++) {    destbytes[count + i]=srcString.getBytes()[i];  }}  }
class C{  public RegexpQuery(Term term,int flags){  this(term,flags,defaultProvider,Operations.DEFAULT_MAX_DETERMINIZED_STATES);}  }
class C{  public ST createSingleton(Token templateToken){  String template;  if (templateToken.getType() == GroupParser.BIGSTRING || templateToken.getType() == GroupParser.BIGSTRING_NO_NL) {    template=Misc.strip(templateToken.getText(),2);  } else {    template=Misc.strip(templateToken.getText(),1);  }  CompiledST impl=compile(getFileName(),null,null,template,templateToken);  ST st=createStringTemplateInternally(impl);  st.groupThatCreatedThisInstance=this;  st.impl.hasFormalArgs=false;  st.impl.name=ST.UNKNOWN_NAME;  st.impl.defineImplicitlyDefinedTemplates(this);  return st;}  }
class C{  public boolean isNumber(){  return value instanceof Number;}  }
class C{  public void insert(IPoint value){  if (value == null) {    throw new IllegalArgumentException("unable to insert null value into TwoDTree");  }  if (root == null) {    root=new VerticalNode(value);    return;  }  TwoDNode node=root;  TwoDNode next;  do {    if (node.isBelow(value)) {      next=node.getBelow();      if (next == null) {        node.setBelow(node.construct(value));        break;      } else {        node=next;      }    } else {      next=node.getAbove();      if (next == null) {        node.setAbove(node.construct(value));        break;      } else {        node=next;      }    }  } while (node != null);}  }
class C{  final Attribute stringifyObjDesc(Attributes classDefAttrs) throws NamingException {  Attribute objDescAttr=new BasicAttribute(OBJECTCLASSDESC_ATTR_ID);  objDescAttr.add(classDef2ObjectDesc(classDefAttrs));  return objDescAttr;}  }
class C{  @Override public OptimizedEdgeRandomIterator resetForNode(int node,int numSamplesToGet,Random randomGen){  super.resetForNode(node);  this.numSamples=numSamplesToGet;  this.random=randomGen;  return this;}  }
class C{  public CSearchPanel(final JHexView hexView){  super(new BorderLayout());  setBorder(new TitledBorder("Search"));  final CSearchOutputPanel outputPanel=new CSearchOutputPanel(hexView);  add(new CSearchInputPanel(hexView,outputPanel.getTableModel()),BorderLayout.NORTH);  add(outputPanel);}  }
class C{  protected Map<String,PsiElement> configureByFile(@TestDataFile @NonNls String filePath){  return configureByFile(filePath,MARKER);}  }
class C{  private static <E>ListIterator<E> constrainedListIterator(ListIterator<E> listIterator,Constraint<? super E> constraint){  return new ConstrainedListIterator<E>(listIterator,constraint);}  }
class C{  public static void registerJdbcType(Class<?> fieldType,Integer jdbcType){  _classJdbcType.put(fieldType,jdbcType);}  }
class C{  public static TetradMatrix matrixSubtract(TetradMatrix a,TetradMatrix b){  if (!(a.columns() == b.columns() && a.rows() == b.rows()))   return null;  TetradMatrix result=new TetradMatrix(a.rows(),a.columns());  for (int i=0; i < result.rows(); i++) {    for (int j=0; j < result.columns(); j++) {      result.set(i,j,a.get(i,j) - b.get(i,j));    }  }  return result;}  }
class C{  public static void enterTextAvoidSoftKeyBoard(int editTextIndex,String text){  EditText editText=SOLO.getEditText(editTextIndex);  SOLO.enterText(editText,text);  SOLO.hideSoftKeyboard();  InputMethodManager imm=(InputMethodManager)trackListActivity.getApplicationContext().getSystemService(Context.INPUT_METHOD_SERVICE);  imm.hideSoftInputFromWindow(editText.getWindowToken(),InputMethodManager.HIDE_IMPLICIT_ONLY);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Trie(Trie existingTrie){  m_Root=existingTrie.m_Root;  m_lowerCaseOnly=existingTrie.m_lowerCaseOnly;  int max=existingTrie.getLongestKeyLength();  m_charBuffer=new char[max];}  }
class C{  public void refresh(){  final Object[] expandedElements=viewer.getExpandedElements();  viewer.refresh();  viewer.setExpandedElements(expandedElements);}  }
class C{  public RoundBorder shadowX(float shadowX){  this.shadowX=shadowX;  return this;}  }
class C{  public Anonymous_genExpr_2_ createAnonymous_genExpr_2_(){  Anonymous_genExpr_2_Impl anonymous_genExpr_2_=new Anonymous_genExpr_2_Impl();  return anonymous_genExpr_2_;}  }
class C{  void generateLeaves(){  int var1=0;  for (int var2=this.leafNodes.length; var1 < var2; ++var1) {    int var3=this.leafNodes[var1][0];    int var4=this.leafNodes[var1][1];    int var5=this.leafNodes[var1][2];    this.generateLeafNode(var3,var4,var5);  }}  }
class C{  public String map(String typeName){  return typeName;}  }
class C{  public PTBTokenizer(boolean tokenizeCRs){  this.tokenizeCRs=tokenizeCRs;}  }
class C{  public Builder with(@StringRes int resId){  if (context == null) {    throw new IllegalStateException("Context should be set first.");  }  this.apiKey=context.getString(resId);  return this;}  }
class C{  public boolean contains(int iNode){  for (int iParent=0; iParent < m_nNrOfParents; iParent++) {    if (m_nParents[iParent] == iNode) {      return true;    }  }  return false;}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  processRequest(request,response);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String value=getString(stack);  String name=getString(stack);  MediaFile mf=getMediaFile(stack);  if (mf != null && mf.getFileFormat() != null && Permissions.hasPermission(Permissions.PERMISSION_EDITMETADATA,stack.getUIMgr())) {    mf.addMetadata(name,value);  }  return null;}  }
class C{  public static double blackFormulastddevDerivative(final PlainVanillaPayoff payoff,@Real final double forward,@StdDev final double stddev){  return blackFormulaStdDevDerivative(payoff,forward,stddev,1.0,0.0);}  }
class C{  static public void assertEquals(String message,long expected,long actual){  assertEquals(message,Long.valueOf(expected),Long.valueOf(actual));}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  if (instruction.getOperands().size() != 1) {    throw new InternalTranslationException("Error: Argument instruction is not a pop instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  final IOperandTree operand=instruction.getOperands().get(0);  final TranslationResult result=Helpers.translateOperand(environment,offset,operand,false);  final TranslationResultType resultType=result.getType();  final OperandSize resultSize=result.getSize();  instructions.addAll(result.getInstructions());  offset=baseOffset + instructions.size();  final String popResult=Helpers.generatePop(environment,offset,resultSize,null,instructions);  offset=baseOffset + instructions.size();  Helpers.writeBack(environment,offset,operand,popResult,resultSize,result.getAddress(),resultType,instructions);}  }
class C{  private void pushOutputValues(ValueNumber[] outputValueList){  ValueNumberFrame frame=getFrame();  for (  ValueNumber aOutputValueList : outputValueList) {    frame.pushValue(aOutputValueList);  }}  }
class C{  public PanEvent(Object source,float Az,float c){  super(source);  this.Az=Az;  this.c=c;}  }
class C{  public AbLevelView(Context context,AttributeSet attrs){  super(context,attrs);}  }
class C{  public boolean hasOrgSymbol(){  return super.hasElement(OrgSymbol.KEY);}  }
class C{  public int compareMediaRange(String media){  return (mediaRange.type + "/" + mediaRange.subtype).compareToIgnoreCase(media);}  }
class C{  private static int findClosestIndex(final float scale,final float[] scalings){  float currentMinDiff=Float.MAX_VALUE;  int closest=0;  for (int i=0; i < scalings.length - 1; i++) {    final float diff=Math.abs(scalings[i] - scale);    if (diff < currentMinDiff) {      currentMinDiff=diff;      closest=i;    }  }  return closest;}  }
class C{  public static <T>int indexOf(@NonNull T[] array,@Nullable T object){  for (int i=0; i < array.length; i++) {    if (array[i] == object)     return i;  }  return -1;}  }
class C{  public static double gammaOfArgOn2Plus1(int d){  if (d % 2 == 0) {    return factorialAsDouble(d / 2);  } else {    return Math.sqrt(Math.PI) * (double)doubleFactorialAsDouble(d) / (double)Math.pow(2,((double)(d + 1)) / 2.0);  }}  }
class C{  private void resetArraysForTesting(boolean[] fired,DistributedMember[] member,String[] memberId,boolean[] isClient){  for (int i=0; i < fired.length; i++) {    fired[i]=false;    member[i]=null;    memberId[i]=null;    isClient[i]=false;  }}  }
class C{  public Serializer registerClassLoader(String className,ClassLoader classLoader){  classLoaders.put(className,classLoader);  return this;}  }
class C{  public Vertex nextMostConscious(Primitive type,Vertex ignoring,float min,boolean inverse){  return nextMostConscious(this.network.createVertex(type),ignoring,0f,false);}  }
class C{  private void paintRoute(Graphics2D graphics,JXMapViewer viewer,PlottableEntity entity){  Set<Plottable> plottables=entity.getPlottables();  if (plottables.size() > 1) {    graphics.setColor(Color.BLACK);    graphics.setStroke(new BasicStroke(3));    drawRoute(plottables,graphics,viewer);    graphics.setColor(entity.getColor());    graphics.setStroke(new BasicStroke(1));    drawRoute(plottables,graphics,viewer);  }}  }
class C{  public static void toXContent(RepositoryMetaData repository,XContentBuilder builder,ToXContent.Params params) throws IOException {  builder.startObject(repository.name(),XContentBuilder.FieldCaseConversion.NONE);  builder.field("type",repository.type());  builder.startObject("settings");  repository.settings().toXContent(builder,params);  builder.endObject();  builder.endObject();}  }
class C{  public Resource fromPropertyString(String resourceInformation){  return fromProperties(PropertyUtils.splitPropertiesOnPipe(PropertyUtils.escapeBackSlashesIfNotNull(resourceInformation)));}  }
class C{  public static void onPause(Context context){  init(context);  dbHelper.setSessionTime();  end_date=deviceHelper.getTime();  end=Long.valueOf(System.currentTimeMillis());  duration=end - start + "";  if (!TextUtils.isEmpty(current_activity)) {    startLogService(MessageUtils.PAGE_DATA,getPauseJSONObject());  }}  }
class C{  public static DataDisplayTable listFontMetrics(Font font){  String[] header={"Name","Value"};  Align[] displayAlignment={Align.Left,Align.Left};  DataDisplayTable table=new DataDisplayTable(Arrays.asList(header));  table.setAlignment(Arrays.asList(displayAlignment));  FontHeaderTable headTable=(FontHeaderTable)FontUtils.getTable(font,Tag.head);  HorizontalHeaderTable hheaTable=(HorizontalHeaderTable)FontUtils.getTable(font,Tag.hhea);  OS2Table os2Table=(OS2Table)FontUtils.getTable(font,Tag.OS_2);  table.add(Arrays.asList(new String[]{"Units per em",String.format("%d",headTable.unitsPerEm())}));  table.add(Arrays.asList(new String[]{"[xMin, xMax]",String.format("[%d, %d]",headTable.xMin(),headTable.xMax())}));  table.add(Arrays.asList(new String[]{"[yMin, yMax]",String.format("[%d, %d]",headTable.yMin(),headTable.yMax())}));  table.add(Arrays.asList(new String[]{"Smallest readable size (px per em)",String.format("%d",headTable.lowestRecPPEM())}));  table.add(Arrays.asList(new String[]{"hhea ascender",String.format("%d",hheaTable.ascender())}));  table.add(Arrays.asList(new String[]{"hhea descender",String.format("%d",hheaTable.descender())}));  table.add(Arrays.asList(new String[]{"hhea typographic line gap",String.format("%d",hheaTable.lineGap())}));  table.add(Arrays.asList(new String[]{"OS/2 Windows ascender",String.format("%d",os2Table.usWinAscent())}));  table.add(Arrays.asList(new String[]{"OS/2 Windows descender",String.format("%d",os2Table.usWinDescent())}));  table.add(Arrays.asList(new String[]{"OS/2 typographic ascender",String.format("%d",os2Table.sTypoAscender())}));  table.add(Arrays.asList(new String[]{"OS/2 typographic ascender",String.format("%d",os2Table.sTypoDescender())}));  table.add(Arrays.asList(new String[]{"OS/2 typographic line gap",String.format("%d",os2Table.sTypoLineGap())}));  return table;}  }
class C{  private String writeProperties(Properties props){  if (props == null) {    return null;  }  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();  try {    props.store(outputStream,"");    return outputStream.toString("ISO-8859-1");  } catch (  IOException e) {    SaaSSystemException se=new SaaSSystemException("Storing properties failed!",e);    logger.logError(Log4jLogger.SYSTEM_LOG,se,LogMessageIdentifier.ERROR_STORE_PROPERTIES_FAILED);    throw se;  }}  }
class C{  public Socket afterHandshake() throws SocketException, IOException {  resetLoginTimeCountdown();  this.rawSocket.setSoTimeout(this.socketTimeoutBackup);  return this.rawSocket;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.CLASS_CONTENT___COMMENT_1:    getComment_1().clear();  return;case UmplePackage.CLASS_CONTENT___CLASS_DEFINITION_1:getClassDefinition_1().clear();return;case UmplePackage.CLASS_CONTENT___TRACE_1:getTrace_1().clear();return;case UmplePackage.CLASS_CONTENT___POSITION_1:getPosition_1().clear();return;case UmplePackage.CLASS_CONTENT___DISPLAY_COLOR_1:getDisplayColor_1().clear();return;case UmplePackage.CLASS_CONTENT___ABSTRACT_1:getAbstract_1().clear();return;case UmplePackage.CLASS_CONTENT___INVARIANT_1:getInvariant_1().clear();return;case UmplePackage.CLASS_CONTENT___SOFTWARE_PATTERN_1:getSoftwarePattern_1().clear();return;case UmplePackage.CLASS_CONTENT___DEPEND_1:getDepend_1().clear();return;case UmplePackage.CLASS_CONTENT___SYMMETRIC_REFLEXIVE_ASSOCIATION_1:getSymmetricReflexiveAssociation_1().clear();return;case UmplePackage.CLASS_CONTENT___ATTRIBUTE_1:getAttribute_1().clear();return;case UmplePackage.CLASS_CONTENT___STATE_MACHINE_1:getStateMachine_1().clear();return;case UmplePackage.CLASS_CONTENT___INLINE_ASSOCIATION_1:getInlineAssociation_1().clear();return;case UmplePackage.CLASS_CONTENT___CONCRETE_METHOD_DECLARATION_1:getConcreteMethodDeclaration_1().clear();return;case UmplePackage.CLASS_CONTENT___CONSTANT_DECLARATION_1:getConstantDeclaration_1().clear();return;case UmplePackage.CLASS_CONTENT___EXTRA_CODE_1:getExtraCode_1().clear();return;}super.eUnset(featureID);}  }
class C{  public String randomSeedTipText(){  return "The seed value for the random number generator.";}  }
class C{  protected ElemVariable createLocalPseudoVarDecl(QName uniquePseudoVarName,ElemTemplateElement psuedoVarRecipient,LocPathIterator lpi) throws org.w3c.dom.DOMException {  ElemVariable psuedoVar=new ElemVariablePsuedo();  XPath xpath=new XPath(lpi);  psuedoVar.setSelect(xpath);  psuedoVar.setName(uniquePseudoVarName);  ElemVariable var=addVarDeclToElem(psuedoVarRecipient,lpi,psuedoVar);  lpi.exprSetParent(var);  return var;}  }
class C{  public DurationSorter(boolean ascending){  super(ascending);}  }
class C{  public static void cancelAll(final boolean mayInterrupt){  RunningOperationStorage.getInstance().cancelAll(mayInterrupt);}  }
class C{  public static byte[] speedStep28Packet(Boolean full,int address,boolean longAddr,int speed,boolean fwd){  log.debug("28 step packet {} {}",address,speed);  if (full != true) {    log.error("invalid method invocation");    return null;  }  if (!addressCheck(address,longAddr)) {    return null;  }  if (speed < 0 || speed > 31) {    log.error("invalid speed " + speed);    return null;  }  int speedC=(speed & 0x1F) >> 1;  int c=(speed & 0x01) << 4;  speedC=speedC + c;  byte[] retVal;  int arg1=(fwd ? 0x60 : 0x40) | speedC;  if (longAddr) {    retVal=new byte[4];    retVal[0]=(byte)(192 + ((address / 256) & 0x3F));    retVal[1]=(byte)(address & 0xFF);    retVal[2]=(byte)arg1;    retVal[3]=(byte)(retVal[0] ^ retVal[1] ^ retVal[2]^ retVal[3]);  } else {    retVal=new byte[3];    retVal[0]=(byte)(address & 0xFF);    retVal[1]=(byte)arg1;    retVal[2]=(byte)(retVal[0] ^ retVal[1] ^ retVal[2]);  }  return retVal;}  }
class C{  @SuppressWarnings("unchecked") public static <T,U>T[] copyOfRange(U[] original,int from,int to,Class<? extends T[]> newType){  int newLength=to - from;  if (newLength < 0)   throw new IllegalArgumentException(from + " > " + to);  T[] copy=((Object)newType == (Object)Object[].class) ? (T[])new Object[newLength] : (T[])Array.newInstance(newType.getComponentType(),newLength);  System.arraycopy(original,from,copy,0,Math.min(original.length - from,newLength));  return copy;}  }
class C{  protected int handleAFCommands(final FormObject formObject,final String command,final String js,final String[] args,final int eventType,final char keyPressed){  int messageCode=ActionHandler.NOMESSAGE;  int type=JSFunction.UNKNOWN;  if (js.contains("_Keystroke")) {    type=JSFunction.KEYSTROKE;  } else   if (js.contains("_Validate")) {    type=JSFunction.VALIDATE;  } else   if (js.contains("_Format")) {    type=JSFunction.FORMAT;  } else   if (js.contains("_Calculate")) {    type=JSFunction.CALCULATE;  }  if (eventType != ActionHandler.FOCUS_EVENT && (type == JSFunction.VALIDATE || type == JSFunction.FORMAT)) {    JSFunction.debug("Not called on key event " + js);    return messageCode;  }  if (js.startsWith("AFSpecial_")) {    new AFSpecial(acro,formObject).execute(js,args,type,eventType,keyPressed);  } else   if (command.startsWith("AFPercent_")) {    new AFPercent(acro,formObject).execute(js,args,type,eventType,keyPressed);  } else   if (command.startsWith("AFSimple_")) {    new AFSimple(acro,formObject).execute(js,args,type,eventType,keyPressed);  } else   if (command.startsWith("AFDate_")) {    new AFDate(acro,formObject).execute(js,args,type,eventType,keyPressed);  } else   if (js.startsWith("AFNumber_")) {    messageCode=new AFNumber(acro,formObject).execute(js,args,type,eventType,keyPressed);  } else   if (js.startsWith("AFRange_")) {    new AFRange(acro,formObject).execute(js,args,type,eventType,keyPressed);  } else   if (js.startsWith("AFTime_")) {    new AFTime(acro,formObject).execute(js,args,type,eventType,keyPressed);  } else {    JSFunction.debug("Unknown command " + js);  }  return messageCode;}  }
class C{  public void addConstraintCommand(DefineCommand command){  if (command instanceof CreateIndex) {    constraintCommands.add(command);  } else {    AlterTableAddConstraint con=(AlterTableAddConstraint)command;    boolean alreadySet;    if (con.getType() == CommandInterface.ALTER_TABLE_ADD_CONSTRAINT_PRIMARY_KEY) {      alreadySet=setPrimaryKeyColumns(con.getIndexColumns());    } else {      alreadySet=false;    }    if (!alreadySet) {      constraintCommands.add(command);    }  }}  }
class C{  public VerticalOverScrollBounceEffectDecorator(IOverScrollDecoratorAdapter viewAdapter,float touchDragRatioFwd,float touchDragRatioBck,float decelerateFactor){  super(viewAdapter,decelerateFactor,touchDragRatioFwd,touchDragRatioBck);}  }
class C{  public PLTransitionBlend(float interval){  super(interval);}  }
class C{  public double rank(double element){  this.sort();  return cern.jet.stat.Descriptive.rankInterpolated(this.values,element);}  }
class C{  private static void floodFill(S2Region region,S2CellId start,ArrayList<S2CellId> output){  HashSet<S2CellId> all=new HashSet<S2CellId>();  ArrayList<S2CellId> frontier=new ArrayList<S2CellId>();  output.clear();  all.add(start);  frontier.add(start);  while (!frontier.isEmpty()) {    S2CellId id=frontier.get(frontier.size() - 1);    frontier.remove(frontier.size() - 1);    if (!region.mayIntersect(new S2Cell(id))) {      continue;    }    output.add(id);    S2CellId[] neighbors=new S2CellId[4];    id.getEdgeNeighbors(neighbors);    for (int edge=0; edge < 4; ++edge) {      S2CellId nbr=neighbors[edge];      boolean hasNbr=all.contains(nbr);      if (!all.contains(nbr)) {        frontier.add(nbr);        all.add(nbr);      }    }  }}  }
class C{  private void logSlowRequests(long requestLifetime,Request<?> request,byte[] responseContents,StatusLine statusLine){  if (DEBUG || requestLifetime > SLOW_REQUEST_THRESHOLD_MS) {    VolleyLog.d("HTTP response for request=<%s> [lifetime=%d], [size=%s], " + "[rc=%d], [retryCount=%s]",request,requestLifetime,responseContents != null ? responseContents.length : "null",statusLine.getStatusCode(),request.getRetryPolicy().getCurrentRetryCount());  }}  }
class C{  private Solution largestObjectiveValue(int objective,Population population){  Solution largest=null;  double value=Double.NEGATIVE_INFINITY;  for (  Solution solution : population) {    if (solution.getObjective(objective) > value) {      largest=solution;      value=solution.getObjective(objective);    }  }  return largest;}  }
class C{  public static Control insertHorizontalSeparator(Composite parent){  Label label=new Label(parent,SWT.SEPARATOR | SWT.WRAP | SWT.HORIZONTAL| SWT.SHADOW_NONE);  GridData separatorLayoutData=new GridData(SWT.FILL,SWT.CENTER,false,false,3,1);  separatorLayoutData.heightHint=25;  label.setLayoutData(separatorLayoutData);  return label;}  }
class C{  public static void logout(Activity activity,boolean goToLoginPage){  EventStreamService.removeNotification();  stopEventStream(activity);  try {    ShortcutBadger.setBadge(activity,0);  } catch (  Exception e) {    Log.d(LOG_TAG,"## logout(): Exception Msg=" + e.getMessage());  }  Collection<MXSession> sessions=Matrix.getMXSessions(activity);  for (  MXSession session : sessions) {    MyPresenceManager.getInstance(activity,session).advertiseOffline();    MyPresenceManager.remove(session);  }  SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(activity);  String homeServer=preferences.getString(LoginActivity.HOME_SERVER_URL_PREF,activity.getResources().getString(R.string.default_hs_server_url));  String identityServer=preferences.getString(LoginActivity.IDENTITY_SERVER_URL_PREF,activity.getResources().getString(R.string.default_identity_server_url));  Boolean useGa=GAHelper.useGA(activity);  SharedPreferences.Editor editor=preferences.edit();  editor.clear();  editor.putString(LoginActivity.HOME_SERVER_URL_PREF,homeServer);  editor.putString(LoginActivity.IDENTITY_SERVER_URL_PREF,identityServer);  editor.commit();  if (null != useGa) {    GAHelper.setUseGA(activity,useGa);  }  Matrix.getInstance(activity).getSharedGCMRegistrationManager().reset();  Matrix.getInstance(activity).clearSessions(activity,true);  Matrix.getInstance(activity).getLoginStorage().clear();  Matrix.getInstance(activity).clearTmpStoresList();  PIDsRetriever.getIntance().reset();  ContactsManager.reset();  MXMediasCache.clearThumbnailsCache(activity);  if (goToLoginPage) {    activity.startActivity(new Intent(activity,LoginActivity.class));    activity.finish();  }}  }
class C{  public static Node nearestCommonAncestor(Node node1,Node node2){  Node ancestor=node1;  while (ancestor != null) {    if (isAncestor(ancestor,node2)) {      return ancestor;    }    ancestor=ancestor.parent();  }  throw new IllegalStateException("node1 and node2 do not have common ancestor");}  }
class C{  protected void addNewEvent(Object eventKey,T event){  if (unwrittenEvents == null) {    unwrittenEvents=Maps.newHashMap();  }  List<T> listEvents=unwrittenEvents.get(eventKey);  if (listEvents == null) {    unwrittenEvents.put(eventKey,Lists.newArrayList(event));  } else {    listEvents.add(event);  }}  }
class C{  public boolean offerFirst(E e){  addFirst(e);  return true;}  }
class C{  public String showDialog(Component comp){  value=null;  setLocationRelativeTo(comp);  setVisible(true);  return value;}  }
class C{  private void updateButton(){  if (!initialized)   return;  Icon icon=IconManager.instance().getIconForButton(iconName);  if (icon == null) {    super.setText(message);    setVerticalTextPosition(SwingConstants.CENTER);    setHorizontalTextPosition(SwingConstants.CENTER);    setContentAreaFilled(true);    setBorderPainted(true);    setOpaque(true);  } else {    if (resizedWidth > 0 && resizedHeight > 0) {      icon=ImageManipulator.resize(icon,resizedWidth,resizedHeight);    }    setIcon(icon);    Icon rollover=IconManager.instance().getIconForButton(rollOverIconName);    if (rollover == null) {      rollover=IconManager.instance().getRolloverIconForButton(iconName);    }    if (resizedHeight > 0 && resizedWidth > 0) {      rollover=ImageManipulator.resize(rollover,resizedWidth,resizedHeight);    }    setRolloverIcon(rollover);    if (!horizontalText) {      setVerticalTextPosition(SwingConstants.BOTTOM);      setHorizontalTextPosition(SwingConstants.CENTER);    } else {      setVerticalTextPosition(SwingConstants.CENTER);      setHorizontalTextPosition(SwingConstants.TRAILING);    }    if (useTransparentBackground) {      setBorderPainted(false);      setOpaque(false);      setContentAreaFilled(false);    } else {      setBorderPainted(true);      setOpaque(false);      setContentAreaFilled(true);    }    if (!iconOnly && UISettings.TEXT_WITH_ICONS.getValue() && message != null && message.length() > 0) {      super.setText(message);      setPreferredSize(null);    } else {      super.setText(null);      int height=icon.getIconHeight();      int width=icon.getIconWidth();      if (message == null || message.length() > 0) {        height+=15;        width+=15;      }      setPreferredSize(new Dimension(height,width));    }  }}  }
class C{  public static boolean connect(FileDescriptor fd,InetAddress inetAddress,int port,int timeoutMs) throws SocketException, SocketTimeoutException {  try {    return connectErrno(fd,inetAddress,port,timeoutMs);  } catch (  ErrnoException errnoException) {    throw new ConnectException(connectDetail(inetAddress,port,timeoutMs,errnoException),errnoException);  }catch (  SocketException ex) {    throw ex;  }catch (  SocketTimeoutException ex) {    throw ex;  }catch (  IOException ex) {    throw new SocketException(ex);  }}  }
class C{  public static CoordinateReferenceSystem newCRS(Attributes attrs){  String value=attrs.getValue(SRID_ATTR);  if (value == null) {    logger.warn("No SRID attribute specified. Assuming CH1903LV03.");    value="21781";  }  int code=Integer.parseInt(value);  return CRSUtils.getCRS(code);}  }
class C{  public CountingOutputStream(OutputStream out){  super(checkNotNull(out));}  }
class C{  public void generateCode(BlockScope currentScope,boolean valueRequired){  if (this.constant != Constant.NotAConstant) {    return;  }switch ((this.bits & ASTNode.OperatorMASK) >> ASTNode.OperatorSHIFT) {case PLUS:switch (this.bits & ASTNode.ReturnTypeIDMASK) {case T_JavaLangString:      break;case T_int:    this.left.generateCode(currentScope,valueRequired);  this.right.generateCode(currentScope,valueRequired);break;case T_long:this.left.generateCode(currentScope,valueRequired);this.right.generateCode(currentScope,valueRequired);break;case T_double:this.left.generateCode(currentScope,valueRequired);this.right.generateCode(currentScope,valueRequired);break;case T_float:this.left.generateCode(currentScope,valueRequired);this.right.generateCode(currentScope,valueRequired);break;}break;case MINUS:switch (this.bits & ASTNode.ReturnTypeIDMASK) {case T_int:this.left.generateCode(currentScope,valueRequired);this.right.generateCode(currentScope,valueRequired);break;case T_long:this.left.generateCode(currentScope,valueRequired);this.right.generateCode(currentScope,valueRequired);break;case T_double:this.left.generateCode(currentScope,valueRequired);this.right.generateCode(currentScope,valueRequired);break;case T_float:this.left.generateCode(currentScope,valueRequired);this.right.generateCode(currentScope,valueRequired);break;}break;case MULTIPLY:switch (this.bits & ASTNode.ReturnTypeIDMASK) {case T_int:this.left.generateCode(currentScope,valueRequired);this.right.generateCode(currentScope,valueRequired);break;case T_long:this.left.generateCode(currentScope,valueRequired);this.right.generateCode(currentScope,valueRequired);break;case T_double:this.left.generateCode(currentScope,valueRequired);this.right.generateCode(currentScope,valueRequired);break;case T_float:this.left.generateCode(currentScope,valueRequired);this.right.generateCode(currentScope,valueRequired);break;}break;case DIVIDE:switch (this.bits & ASTNode.ReturnTypeIDMASK) {case T_int:this.left.generateCode(currentScope,true);this.right.generateCode(currentScope,true);break;case T_long:this.left.generateCode(currentScope,true);this.right.generateCode(currentScope,true);break;case T_double:this.left.generateCode(currentScope,valueRequired);this.right.generateCode(currentScope,valueRequired);break;case T_float:this.left.generateCode(currentScope,valueRequired);this.right.generateCode(currentScope,valueRequired);break;}break;case REMAINDER:switch (this.bits & ASTNode.ReturnTypeIDMASK) {case T_int:this.left.generateCode(currentScope,true);this.right.generateCode(currentScope,true);break;case T_long:this.left.generateCode(currentScope,true);this.right.generateCode(currentScope,true);break;case T_double:this.left.generateCode(currentScope,valueRequired);this.right.generateCode(currentScope,valueRequired);break;case T_float:this.left.generateCode(currentScope,valueRequired);this.right.generateCode(currentScope,valueRequired);break;}break;case AND:switch (this.bits & ASTNode.ReturnTypeIDMASK) {case T_int:if ((this.left.constant != Constant.NotAConstant) && (this.left.constant.typeID() == TypeIds.T_int) && (this.left.constant.intValue() == 0)) {this.right.generateCode(currentScope,false);} else {if ((this.right.constant != Constant.NotAConstant) && (this.right.constant.typeID() == TypeIds.T_int) && (this.right.constant.intValue() == 0)) {this.left.generateCode(currentScope,false);} else {this.left.generateCode(currentScope,valueRequired);this.right.generateCode(currentScope,valueRequired);}}break;case T_long:if ((this.left.constant != Constant.NotAConstant) && (this.left.constant.typeID() == TypeIds.T_long) && (this.left.constant.longValue() == 0L)) {this.right.generateCode(currentScope,false);} else {if ((this.right.constant != Constant.NotAConstant) && (this.right.constant.typeID() == TypeIds.T_long) && (this.right.constant.longValue() == 0L)) {this.left.generateCode(currentScope,false);} else {this.left.generateCode(currentScope,valueRequired);this.right.generateCode(currentScope,valueRequired);}}break;case T_boolean:generateLogicalAnd(currentScope,valueRequired);break;}break;case OR:switch (this.bits & ASTNode.ReturnTypeIDMASK) {case T_int:if ((this.left.constant != Constant.NotAConstant) && (this.left.constant.typeID() == TypeIds.T_int) && (this.left.constant.intValue() == 0)) {this.right.generateCode(currentScope,valueRequired);} else {if ((this.right.constant != Constant.NotAConstant) && (this.right.constant.typeID() == TypeIds.T_int) && (this.right.constant.intValue() == 0)) {this.left.generateCode(currentScope,valueRequired);} else {this.left.generateCode(currentScope,valueRequired);this.right.generateCode(currentScope,valueRequired);}}break;case T_long:if ((this.left.constant != Constant.NotAConstant) && (this.left.constant.typeID() == TypeIds.T_long) && (this.left.constant.longValue() == 0L)) {this.right.generateCode(currentScope,valueRequired);} else {if ((this.right.constant != Constant.NotAConstant) && (this.right.constant.typeID() == TypeIds.T_long) && (this.right.constant.longValue() == 0L)) {this.left.generateCode(currentScope,valueRequired);} else {this.left.generateCode(currentScope,valueRequired);this.right.generateCode(currentScope,valueRequired);}}break;case T_boolean:generateLogicalOr(currentScope,valueRequired);break;}break;case XOR:switch (this.bits & ASTNode.ReturnTypeIDMASK) {case T_int:if ((this.left.constant != Constant.NotAConstant) && (this.left.constant.typeID() == TypeIds.T_int) && (this.left.constant.intValue() == 0)) {this.right.generateCode(currentScope,valueRequired);} else {if ((this.right.constant != Constant.NotAConstant) && (this.right.constant.typeID() == TypeIds.T_int) && (this.right.constant.intValue() == 0)) {this.left.generateCode(currentScope,valueRequired);} else {this.left.generateCode(currentScope,valueRequired);this.right.generateCode(currentScope,valueRequired);}}break;case T_long:if ((this.left.constant != Constant.NotAConstant) && (this.left.constant.typeID() == TypeIds.T_long) && (this.left.constant.longValue() == 0L)) {this.right.generateCode(currentScope,valueRequired);} else {if ((this.right.constant != Constant.NotAConstant) && (this.right.constant.typeID() == TypeIds.T_long) && (this.right.constant.longValue() == 0L)) {this.left.generateCode(currentScope,valueRequired);} else {this.left.generateCode(currentScope,valueRequired);this.right.generateCode(currentScope,valueRequired);}}break;case T_boolean:generateLogicalXor(currentScope,valueRequired);break;}break;case LEFT_SHIFT:switch (this.bits & ASTNode.ReturnTypeIDMASK) {case T_int:this.left.generateCode(currentScope,valueRequired);this.right.generateCode(currentScope,valueRequired);break;case T_long:this.left.generateCode(currentScope,valueRequired);this.right.generateCode(currentScope,valueRequired);}break;case RIGHT_SHIFT:switch (this.bits & ASTNode.ReturnTypeIDMASK) {case T_int:this.left.generateCode(currentScope,valueRequired);this.right.generateCode(currentScope,valueRequired);break;case T_long:this.left.generateCode(currentScope,valueRequired);this.right.generateCode(currentScope,valueRequired);}break;case UNSIGNED_RIGHT_SHIFT:switch (this.bits & ASTNode.ReturnTypeIDMASK) {case T_int:this.left.generateCode(currentScope,valueRequired);this.right.generateCode(currentScope,valueRequired);break;case T_long:this.left.generateCode(currentScope,valueRequired);this.right.generateCode(currentScope,valueRequired);}break;case GREATER:generateOptimizedGreaterThan(currentScope,null,(new BranchLabel()),valueRequired);break;case GREATER_EQUAL:generateOptimizedGreaterThanOrEqual(currentScope,null,(new BranchLabel()),valueRequired);break;case LESS:generateOptimizedLessThan(currentScope,null,(new BranchLabel()),valueRequired);break;case LESS_EQUAL:generateOptimizedLessThanOrEqual(currentScope,null,(new BranchLabel()),valueRequired);}}  }
class C{  private List<PsiElement> findThrowToBlocks(PsiThrowStatement statement){  final PsiExpression exceptionExpr=statement.getException();  if (exceptionExpr == null)   return Collections.emptyList();  final PsiType throwType=exceptionExpr.getType();  if (!(throwType instanceof PsiClassType))   return Collections.emptyList();  return findThrowToBlocks((PsiClassType)throwType);}  }
class C{  public Node removeLast(){  Node node=header.getPreviousNode();  lastByte-=node.ba.last();  return removeNode(node);}  }
class C{  public boolean empty(){  return individuals.size() == 0;}  }
class C{  public boolean bool(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return (m_left.bool(xctxt) || m_right.bool(xctxt));}  }
class C{  private static byte[] buildRowkey(int prefixHash,List<Integer> partitionHashValues,long timestamp,SortedMap<Integer,Integer> tags){  final int len=4 + 8 + tags.size() * (4 + 4) + (partitionHashValues.size() * 4);  final byte[] rowkey=new byte[len];  int offset=0;  ByteUtil.intToBytes(prefixHash,rowkey,offset);  offset+=4;  for (  Integer partHash : partitionHashValues) {    ByteUtil.intToBytes(partHash,rowkey,offset);    offset+=4;  }  ByteUtil.longToBytes(timestamp,rowkey,offset);  offset+=8;  for (  Map.Entry<Integer,Integer> entry : tags.entrySet()) {    ByteUtil.intToBytes(entry.getKey(),rowkey,offset);    offset+=4;    ByteUtil.intToBytes(entry.getValue(),rowkey,offset);    offset+=4;  }  return rowkey;}  }
class C{  public void doLayout(){  for (int i=0; i < getComponentCount(); i++) {    Marker m=(Marker)getComponent(i);    m.updateLocation();  }  listener.caretUpdate(null);}  }
class C{  @DSSource({DSSourceKind.IO}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.176 -0400",hash_original_method="D1E5A8A2D81359B888D828F7C77A46F0",hash_generated_method="63F4257BD84ACD900B5E7ACB4A1EDF6F") public static byte[] toByteArray(Reader input,String encoding) throws IOException {  return toByteArray(input,Charsets.toCharset(encoding));}  }
class C{  @Override public void write(byte[] buffer,int off,int nbytes) throws IOException {  super.write(buffer,off,nbytes);  crc.update(buffer,off,nbytes);}  }
class C{  public InlineQueryResponse build(){  return new InlineQueryResponse(results,cache_time,is_personal,next_offset,switch_pm_text,switch_pm_parameter);}  }
class C{  public void preprocessIndividual(final EvolutionState state,final int thread){  for (int x=0; x < rulesets.length; x++)   rulesets[x].preprocessRules(state,thread);}  }
class C{  public String convertModelAttributeToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  public void validateParameters(StatementBlock sb) throws LanguageException {  for (  String varName : _otherParams.keySet())   if (!(varName.equals(CLASS_NAME) || varName.equals(EXEC_TYPE) || varName.equals(CONFIG_FILE))) {    LOG.warn(printWarningLocation() + "External function specifies undefined attribute type '" + varName+ "'.");  }  if (!_otherParams.containsKey(CLASS_NAME)) {    sb.raiseValidateError("External function does not specify the required attribute '" + CLASS_NAME + "'.",false);  } else   if (_otherParams.get(CLASS_NAME) == null) {    sb.raiseValidateError("External function specifies empty '" + CLASS_NAME + "'.",false);  }  if (_otherParams.containsKey(EXEC_TYPE)) {    String execType=_otherParams.get(EXEC_TYPE);    if (!(execType.equals(FILE_BASED) || execType.equals(IN_MEMORY))) {      sb.raiseValidateError("External function specifies invalid value for (optional) attribute '" + EXEC_TYPE + "' (valid values: "+ FILE_BASED+ ","+ IN_MEMORY+ ").",false);    }  } else {    _otherParams.put(EXEC_TYPE,DEFAULT_EXEC_TYPE);  }}  }
class C{  public void init(){  Debug.message("eomg","EditableOMPoint.init()");  setCanGrabGraphic(false);  setStateMachine(new PointStateMachine(this));  gPoints=new GrabPoint[2];}  }
class C{  public void read(Appendable dest) throws IOException {  if (_inputStream == null)   throw new IOException("No input stream or stream closed");  while (true) {    if (_start >= _end) {      _start=0;      _end=_inputStream.read(_bytes,0,_bytes.length);      if (_end <= 0) {        break;      }    }    byte b=_bytes[_start];    if (b >= 0) {      dest.append((char)b);      _start++;    } else {      int code=read2();      if (code < 0x10000) {        dest.append((char)code);      } else       if (code <= 0x10ffff) {        dest.append((char)(((code - 0x10000) >> 10) + 0xd800));        dest.append((char)(((code - 0x10000) & 0x3ff) + 0xdc00));      } else {        throw new CharConversionException("Cannot convert U+" + Integer.toHexString(code) + " to char (code greater than U+10FFFF)");      }    }  }}  }
class C{  private void updateAutoContrast(){  if (!mUseAutoContrast) {    return;  }  mHardware.set(CMHardwareManager.FEATURE_AUTO_CONTRAST,!isLowPowerMode() && isAutoContrastEnabled());}  }
class C{  private static <K,V>Map<K,V> newMap(){  return new HashMap<K,V>();}  }
class C{  public void testParseParallelTaskSequenceRepetition() throws Exception {  String taskStr="AddDoc";  String parsedTasks="[ " + taskStr + " ] : 1000";  Benchmark benchmark=new Benchmark(new StringReader(propPart + parsedTasks));  Algorithm alg=benchmark.getAlgorithm();  ArrayList<PerfTask> algTasks=alg.extractTasks();  boolean foundAdd=false;  for (  final PerfTask task : algTasks) {    if (task.toString().indexOf(taskStr) >= 0) {      foundAdd=true;    }    if (task instanceof TaskSequence) {      assertEquals("repetions should be 1000 for " + parsedTasks,1000,((TaskSequence)task).getRepetitions());      assertTrue("sequence for " + parsedTasks + " should be parallel!",((TaskSequence)task).isParallel());    }    assertTrue("Task " + taskStr + " was not found in "+ alg.toString(),foundAdd);  }}  }
class C{  public void testSplitAndJoinMultiplePropertiesOnSemicolon(){  Properties inner=PropertyUtils.splitPropertiesOnDelimiter(ONE_SEMI_TWO,';');  assertEquals("hello",inner.getProperty("inner-1"));  assertEquals("goodbye",inner.getProperty("inner-2"));  assertEquals(2,inner.size());  try {    assertEquals(ONE_SEMI_TWO,PropertyUtils.joinOnSemicolon(PropertyUtils.toMap(inner)));  } catch (  ComparisonFailure e) {    assertEquals(TWO_SEMI_ONE,PropertyUtils.joinOnSemicolon(PropertyUtils.toMap(inner)));  }}  }
class C{  @Override public void endWindow(){  if (values.size() == 0) {    return;  }  double mean=0.0;  for (  Double value : values) {    mean+=value;  }  mean=mean / values.size();  double outVal=0.0;  for (  Double value : values) {    outVal+=(value - mean) * (value - mean);  }  outVal=outVal / values.size();  if (variance.isConnected()) {    variance.emit(outVal);  }  standardDeviation.emit(Math.sqrt(outVal));  values=new ArrayList<Double>();}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  Log.i(TAG,"called onCreate");  super.onCreate(savedInstanceState);  getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);  setContentView(R.layout.activity_tutorial1);  mOpenCvCameraView=(CameraBridgeViewBase)findViewById(R.id.tutorial1_activity_java_surface_view);  mOpenCvCameraView.setVisibility(SurfaceView.VISIBLE);  mOpenCvCameraView.setCvCameraViewListener(this);}  }
class C{  public String source(){  return source;}  }
class C{  public static boolean parseBoolean(String s){  char ch=s.length() > 0 ? s.charAt(0) : 0;  return (ch == '1' || ch == 't' || ch == 'T');}  }
class C{  public DTMIterator cloneWithReset() throws CloneNotSupportedException {  ChildTestIterator clone=(ChildTestIterator)super.cloneWithReset();  clone.m_traverser=m_traverser;  return clone;}  }
class C{  public static void println(ErrorMessages message,String data){  if (Options.verbose) {    out.println(ErrorMessages.get(message,data));  }}  }
class C{  public int hashCode(){  if (hashCode == -1) {    hashCode=ASCIICaseInsensitiveComparator.lowerCaseHashCode(name);  }  return hashCode;}  }
class C{  private void refreshGUI(){  GUIMediator.instance().refreshGUI();}  }
class C{  public static Query csrq(String f,String l,String h,boolean il,boolean ih){  TermRangeQuery query=TermRangeQuery.newStringRange(f,l,h,il,ih);  query.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);  if (VERBOSE) {    System.out.println("TEST: query=" + query);  }  return query;}  }
class C{  public void removeRequestListener(TransportAddress localAddr,RequestListener listener){  removeMessageListener(localAddr,new RequestListenerMessageEventHandler(listener));}  }
class C{  public static <A>List<A> filter(List<A> l,A elem){  Assert.checkNonNull(elem);  List<A> res=List.nil();  for (  A a : l) {    if (a != null && !a.equals(elem)) {      res=res.prepend(a);    }  }  return res.reverse();}  }
class C{  @Override public Enumeration<Option> listOptions(){  return super.listOptions();}  }
class C{  public boolean hasMultitenant(){  return m_descriptor.hasMultitenantPolicy();}  }
class C{  @Override protected void deviceDrawLine(int xBegin,int yBegin,int xEnd,int yEnd,Color color){  Stroke stroke=getStroke();  if (stroke instanceof BasicStroke) {    BasicStroke lineStroke=(BasicStroke)stroke;    if (lineStroke.getDashArray() != null) {      draw(new Line2D.Float(xBegin,yBegin,xEnd,yEnd));      return;    }    float lineWidth=lineStroke.getLineWidth();    Point2D.Float penSize=new Point2D.Float(lineWidth,lineWidth);    AffineTransform deviceTransform=getTransform();    deviceTransform.deltaTransform(penSize,penSize);    float deviceLineWidth=Math.min(Math.abs(penSize.x),Math.abs(penSize.y));    Point2D.Float begin_pos=new Point2D.Float(xBegin,yBegin);    deviceTransform.transform(begin_pos,begin_pos);    Point2D.Float end_pos=new Point2D.Float(xEnd,yEnd);    deviceTransform.transform(end_pos,end_pos);    int endCap=lineStroke.getEndCap();    int lineJoin=lineStroke.getLineJoin();    if ((end_pos.getX() == begin_pos.getX()) && (end_pos.getY() == begin_pos.getY())) {      endCap=BasicStroke.CAP_ROUND;    }    WPrinterJob wPrinterJob=(WPrinterJob)getPrinterJob();    if (wPrinterJob.selectStylePen(endCap,lineJoin,deviceLineWidth,color)) {      wPrinterJob.moveTo((float)begin_pos.getX(),(float)begin_pos.getY());      wPrinterJob.lineTo((float)end_pos.getX(),(float)end_pos.getY());    } else {      double lowerRes=Math.min(wPrinterJob.getXRes(),wPrinterJob.getYRes());      if ((endCap == BasicStroke.CAP_ROUND) || (((xBegin == xEnd) || (yBegin == yEnd)) && (deviceLineWidth / lowerRes < MAX_THINLINE_INCHES))) {        wPrinterJob.selectPen(deviceLineWidth,color);        wPrinterJob.moveTo((float)begin_pos.getX(),(float)begin_pos.getY());        wPrinterJob.lineTo((float)end_pos.getX(),(float)end_pos.getY());      } else {        draw(new Line2D.Float(xBegin,yBegin,xEnd,yEnd));      }    }  }}  }
class C{  protected void finalize() throws Throwable {  this.elementName=null;  this.attributeName=null;  this.attributeValue=null;  super.finalize();}  }
class C{  public VolatileSurfaceManager createVolatileManager(SunVolatileImage vImg,Object context){  return new CGLVolatileSurfaceManager(vImg,context);}  }
class C{  protected HARegionQueue createHARegionQueue(String name) throws IOException, ClassNotFoundException, CacheException, InterruptedException {  AttributesFactory factory=new AttributesFactory();  factory.setDataPolicy(DataPolicy.REPLICATE);  factory.setScope(Scope.DISTRIBUTED_ACK);  HARegionQueue regionqueue=HARegionQueue.getHARegionQueueInstance(name,cache,HARegionQueue.NON_BLOCKING_HA_QUEUE,false);  return regionqueue;}  }
class C{  String formatId(String inputId){  return inputId.replaceAll("\\/",":");}  }
class C{  public OMGraphic drawFeature(VPFFeatureWarehouse warehouse,double dpplat,double dpplon,LatLonPoint ll1,LatLonPoint ll2,List<Object> text,String featureType,int primID){  if (warehouse != null) {    double ll1lat=ll1.getY();    double ll1lon=ll1.getX();    double ll2lat=ll2.getY();    double ll2lon=ll2.getX();    String textval=(String)text.get(textColumn);    CoordFloatString coords=(CoordFloatString)text.get(coordColumn);    double lat=coords.getYasFloat(0);    double lon=coords.getXasFloat(0);    if ((lat > ll2lat) && (lat < ll1lat) && (lon > ll1lon)&& (lon < ll2lon)) {      return warehouse.createText(covtable,this,text,lat,lon,textval,featureType,primID);    }  }  return null;}  }
class C{  @CheckForNull private <T extends BugAnnotation>T findPrimaryAnnotationOfType(Class<T> cls){  T firstMatch=null;  for (Iterator<BugAnnotation> i=annotationIterator(); i.hasNext(); ) {    BugAnnotation annotation=i.next();    if (cls.isAssignableFrom(annotation.getClass())) {      if (annotation.getDescription().endsWith("DEFAULT")) {        return cls.cast(annotation);      } else       if (firstMatch == null) {        firstMatch=cls.cast(annotation);      }    }  }  return firstMatch;}  }
class C{  public void initializeDecoding(){  XTIFFField fillOrderField=directory.getField(XTIFF.TIFFTAG_FILL_ORDER);  if (fillOrderField != null) {    fillOrder=fillOrderField.getAsInt(0);  } else {    fillOrder=1;  }  if (compression == 3) {    XTIFFField t4OptionsField=directory.getField(XTIFF.TIFFTAG_T4_OPTIONS);    if (t4OptionsField != null) {      tiffT4Options=t4OptionsField.getAsLong(0);    } else {      tiffT4Options=0;    }  }  if (compression == 4) {    XTIFFField t6OptionsField=directory.getField(XTIFF.TIFFTAG_T6_OPTIONS);    if (t6OptionsField != null) {      tiffT6Options=t6OptionsField.getAsLong(0);    } else {      tiffT6Options=0;    }  }  decoder=new XTIFFFaxDecoder(fillOrder,tileWidth,tileLength);}  }
class C{  public static void info(final InformationType type,final String... params){  info(type,false,params);}  }
class C{  private PlatformUser prepareUser(String userId,long passwordRecoveryStartDate){  pUser=new PlatformUser();  pUser.setUserId(userId);  pUser.setPasswordRecoveryStartDate(passwordRecoveryStartDate);  return pUser;}  }
class C{  public DiskBasedCache(File rootDirectory){  this(rootDirectory,DEFAULT_DISK_USAGE_BYTES);}  }
class C{  public boolean isAllowNegative(){  Object oo=get_Value(COLUMNNAME_IsAllowNegative);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private char handleCSSComment(ExtInputStreamReader r) throws IOException {  char c=r.readCharFromReader();  if (c == '*') {    char lastC='\0';    while ((c != '/') || (lastC != '*')) {      lastC=c;      c=r.readCharFromReader();    }    c=r.readCharFromReader();    while (((byte)c) != -1 && isWhiteSpace(c)) {      c=r.readCharFromReader();    }  } else {    r.unreadChar(c);    return '/';  }  return c;}  }
class C{  public void playBowlGames(){  for (  Game g : bowlGames) {    playBowl(g);  }  semiG14.playGame();  semiG23.playGame();  Team semi14winner;  Team semi23winner;  if (semiG14.homeScore > semiG14.awayScore) {    semiG14.homeTeam.semiFinalWL="SFW";    semiG14.awayTeam.semiFinalWL="SFL";    semiG14.awayTeam.totalBowlLosses++;    semiG14.homeTeam.totalBowls++;    semi14winner=semiG14.homeTeam;    newsStories.get(14).add(semiG14.homeTeam.name + " wins the " + semiG14.gameName+ "!>"+ semiG14.homeTeam.strRep()+ " defeats "+ semiG14.awayTeam.strRep()+ " in the semifinals, winning "+ semiG14.homeScore+ " to "+ semiG14.awayScore+ ". "+ semiG14.homeTeam.name+ " advances to the National Championship!");  } else {    semiG14.homeTeam.semiFinalWL="SFL";    semiG14.awayTeam.semiFinalWL="SFW";    semiG14.homeTeam.totalBowlLosses++;    semiG14.awayTeam.totalBowls++;    semi14winner=semiG14.awayTeam;    newsStories.get(14).add(semiG14.awayTeam.name + " wins the " + semiG14.gameName+ "!>"+ semiG14.awayTeam.strRep()+ " defeats "+ semiG14.homeTeam.strRep()+ " in the semifinals, winning "+ semiG14.awayScore+ " to "+ semiG14.homeScore+ ". "+ semiG14.awayTeam.name+ " advances to the National Championship!");  }  if (semiG23.homeScore > semiG23.awayScore) {    semiG23.homeTeam.semiFinalWL="SFW";    semiG23.awayTeam.semiFinalWL="SFL";    semiG23.homeTeam.totalBowls++;    semiG23.awayTeam.totalBowlLosses++;    semi23winner=semiG23.homeTeam;    newsStories.get(14).add(semiG23.homeTeam.name + " wins the " + semiG23.gameName+ "!>"+ semiG23.homeTeam.strRep()+ " defeats "+ semiG23.awayTeam.strRep()+ " in the semifinals, winning "+ semiG23.homeScore+ " to "+ semiG23.awayScore+ ". "+ semiG23.homeTeam.name+ " advances to the National Championship!");  } else {    semiG23.homeTeam.semiFinalWL="SFL";    semiG23.awayTeam.semiFinalWL="SFW";    semiG23.awayTeam.totalBowls++;    semiG23.homeTeam.totalBowlLosses++;    semi23winner=semiG23.awayTeam;    newsStories.get(14).add(semiG23.awayTeam.name + " wins the " + semiG23.gameName+ "!>"+ semiG23.awayTeam.strRep()+ " defeats "+ semiG23.homeTeam.strRep()+ " in the semifinals, winning "+ semiG23.awayScore+ " to "+ semiG23.homeScore+ ". "+ semiG23.awayTeam.name+ " advances to the National Championship!");  }  ncg=new Game(semi14winner,semi23winner,"NCG");  semi14winner.gameSchedule.add(ncg);  semi23winner.gameSchedule.add(ncg);}  }
class C{  private int doProcess(int codecNo,Buffer input){  if (codecNo == codecs.length) {    try {      if (input.isFragmented()) {        final Buffer[] fragments=input.getFragments();        for (int i=0; i < input.getFragmentsSize(); i++) {          Buffer fragment=fragments[i];          renderer.write(fragment);          fragment.setData(null);        }        input.setFragments(null);      } else {        renderer.write(input);      }      return Codec.BUFFER_PROCESSED_OK;    } catch (    NetworkException e) {      if (logger.isActivated()) {        logger.debug(e.getMessage());      }      return Codec.BUFFER_PROCESSED_FAILED;    }  }  Codec codec=codecs[codecNo];  int returnVal;  do {    returnVal=codec.process(input,buffers[codecNo]);    if (Codec.BUFFER_PROCESSED_FAILED == returnVal) {      if (logger.isActivated()) {        logger.error("Codec processing error " + returnVal);      }      return Codec.BUFFER_PROCESSED_FAILED;    }    if ((returnVal & Codec.OUTPUT_BUFFER_NOT_FILLED) == 0) {      if (!(buffers[codecNo].isDiscard() || buffers[codecNo].isEOM())) {        doProcess(codecNo + 1,buffers[codecNo]);      }      buffers[codecNo].setOffset(0);      buffers[codecNo].setLength(0);      buffers[codecNo].setFlags(0);      buffers[codecNo].setFragments(null);    }  } while ((returnVal & Codec.INPUT_BUFFER_NOT_CONSUMED) != 0);  return returnVal;}  }
class C{  public SQLTransientConnectionException(String reason,String sqlState,int vendorCode){  super(reason,sqlState,vendorCode);}  }
class C{  public static int compareCanonicalDecimals(String dec1,String dec2){  if (dec1.equals(dec2)) {    return 0;  }  if (dec1.charAt(0) == '-' && dec2.charAt(0) != '-') {    return -1;  }  if (dec2.charAt(0) == '-' && dec1.charAt(0) != '-') {    return 1;  }  int dotIdx1=dec1.indexOf('.');  int dotIdx2=dec2.indexOf('.');  int result=dotIdx1 - dotIdx2;  if (result == 0) {    for (int i=0; result == 0 && i < dotIdx1; i++) {      result=dec1.charAt(i) - dec2.charAt(i);    }    int dec1Length=dec1.length();    int dec2Length=dec2.length();    int lastIdx=dec1Length <= dec2Length ? dec1Length : dec2Length;    for (int i=dotIdx1 + 1; result == 0 && i < lastIdx; i++) {      result=dec1.charAt(i) - dec2.charAt(i);    }    if (result == 0) {      result=dec1Length - dec2Length;    }  }  if (dec1.charAt(0) == '-') {    result=-result;  }  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:44.184 -0500",hash_original_method="8EB82A3200B456D290A2F7A26355BB76",hash_generated_method="CF8918FE7154564E15A069C8BCA7C4A9") public void sendKeySync(KeyEvent event){  validateNotAppThread();  try {    (IWindowManager.Stub.asInterface(ServiceManager.getService("window"))).injectKeyEvent(event,true);  } catch (  RemoteException e) {  }}  }
class C{  protected void generateFields(@NotNull IButterKnife butterKnife){  for (  Element element : mElements) {    if (!element.used) {      continue;    }    StringBuilder injection=new StringBuilder();    injection.append('@');    injection.append(butterKnife.getFieldAnnotationCanonicalName());    injection.append('(');    injection.append(element.getFullID());    injection.append(") ");    if (element.nameFull != null && element.nameFull.length() > 0) {      injection.append(element.nameFull);    } else     if (Definitions.paths.containsKey(element.name)) {      injection.append(Definitions.paths.get(element.name));    } else {      injection.append("android.widget.");      injection.append(element.name);    }    injection.append(" ");    injection.append(element.fieldName);    injection.append(";");    mClass.add(mFactory.createFieldFromText(injection.toString(),mClass));  }}  }
class C{  private CopycatClient createClient() throws Throwable {  return createClient(RecoveryStrategies.CLOSE);}  }
class C{  protected Collection<CommunicationSummaryStatistics> doGetCommunicationSummaryStatistics(String tenantId,Criteria criteria){  String index=client.getIndex(tenantId);  Map<String,CommunicationSummaryStatistics> stats=new HashMap<>();  if (!criteria.transactionWide()) {    Criteria txnWideCriteria=criteria.deriveTransactionWide();    buildCommunicationSummaryStatistics(stats,index,txnWideCriteria,false);  }  buildCommunicationSummaryStatistics(stats,index,criteria,true);  return stats.values();}  }
class C{  public static Long[] transformLongArray(long[] source){  Long[] destin=new Long[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  @Override public String toString(){  return "(" + this.key.toString() + ", "+ this.value.toString()+ ")";}  }
class C{  public static void writeLibrary(PrintStream writer,String id,String[] cp){  writer.print("  <library");  if (id != null) {    writer.print(" id=\"");    writer.print(id);    writer.print('\"');  }  writer.println('>');  for (  String file : cp) {    File f=new File(file);    if (f.isDirectory()) {      writer.print("        <folder dir=\"");      writer.print(f.getAbsolutePath());      writer.println("\"/>");    } else {      writer.print("        <file name=\"");      writer.print(f.getAbsolutePath());      writer.println("\"/>");    }  }  writer.println("  </library>");}  }
class C{  public TaskResourceRep hostVcenterUnassignDecline(URI host,URI eventId){  return null;}  }
class C{  public static boolean isDefaultSecurityEnabled(){  return DEFAULT_SECURITY_ENABLED;}  }
class C{  @Override public boolean onCreateOptionsMenu(Menu menu){  getMenuInflater().inflate(R.menu.main,menu);  MainActivity.menu=menu;  setConversionSystem(EcuDataItem.cnvSystem);  return true;}  }
class C{  public HexEscapeSequence createHexEscapeSequence(){  HexEscapeSequenceImpl hexEscapeSequence=new HexEscapeSequenceImpl();  return hexEscapeSequence;}  }
class C{  protected void updateTTables(MWebProject project,MCStage stage,String trxName){  int[] tableKeys=X_CM_CStageTTable.getAllIDs(I_CM_CStageTTable.Table_Name,"CM_CStage_ID=" + stage.get_ID(),trxName);  if (tableKeys != null && tableKeys.length > 0) {    for (int i=0; i < tableKeys.length; i++) {      X_CM_CStageTTable thisStageTTable=new X_CM_CStageTTable(project.getCtx(),tableKeys[i],trxName);      int[] thisContainerTTableKeys=X_CM_ContainerTTable.getAllIDs(I_CM_ContainerTTable.Table_Name,"CM_Container_ID=" + stage.get_ID() + " AND CM_TemplateTable_ID="+ thisStageTTable.getCM_TemplateTable_ID(),trxName);      X_CM_ContainerTTable thisContainerTTable;      if (thisContainerTTableKeys != null && thisContainerTTableKeys.length > 0) {        thisContainerTTable=new X_CM_ContainerTTable(project.getCtx(),thisContainerTTableKeys[0],trxName);      } else {        thisContainerTTable=new X_CM_ContainerTTable(project.getCtx(),0,trxName);      }      thisContainerTTable.setCM_Container_ID(stage.get_ID());      PO.copyValues(new X_CM_CStageTTable(project.getCtx(),tableKeys[i],trxName),thisContainerTTable);      thisContainerTTable.save(trxName);    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void reverse(){  final ArrayList<Animator> animators=mAnimatedVectorState.mAnimators;  final int size=animators.size();  for (int i=0; i < size; i++) {    final Animator animator=animators.get(i);    if (canReverse(animator)) {      reverse(animator);    } else {      Log.w(LOGTAG,"AnimatedVectorDrawable can't reverse()");    }  }}  }
class C{  public void fullReset(){  startTime=System.currentTimeMillis();}  }
class C{  private int parent(int i){  return (i - 1) >> 1;}  }
class C{  public SizeSequence(int[] sizes){  this();  setSizes(sizes);}  }
class C{  public T caseAssociationDefinition_(AssociationDefinition_ object){  return null;}  }
class C{  public static byte[] sha256hash160(byte[] input){  byte[] sha256=Sha256Hash.hash(input);  RIPEMD160Digest digest=new RIPEMD160Digest();  digest.update(sha256,0,sha256.length);  byte[] out=new byte[20];  digest.doFinal(out,0);  return out;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void removeAllEntailments() throws SailException, RepositoryException {  try {    ((BigdataSailConnection)getSailConnection()).removeAllEntailments();  } catch (  Exception ex) {    throw new RepositoryException(ex);  }}  }
class C{  public void onStart(){  if (mFullscreenManager != null) {    mLastContentOffset=mFullscreenManager.getContentOffset();    mLastVisibleContentOffset=mFullscreenManager.getVisibleContentOffset();    mFullscreenManager.addListener(this);  }  requestRender();}  }
class C{  public void clearState(){  this.destroys.clear();  this.creates.clear();  this.invalidates.clear();  this.updates.clear();}  }
class C{  protected GenericNotation(){}  }
class C{  public void close(){  ensureOpen();  myIsClosed=true;  myService.unregisterHandler(myHandlerNo);}  }
class C{  public double normalizeLatitude(double lat){  if (lat > NORTH_POLE - epsilon) {    return NORTH_POLE - epsilon;  } else   if (lat < SOUTH_POLE + epsilon) {    return SOUTH_POLE + epsilon;  }  return lat;}  }
class C{  public boolean isEmpty(){  return mSize <= 0;}  }
class C{  static void verifyNotInPredelegation(Registry registry,DateTime now) throws BadCommandForRegistryPhaseException {  if (registry.getTldState(now) == TldState.PREDELEGATION) {    throw new BadCommandForRegistryPhaseException();  }}  }
class C{  public final void addHelperTextColorId(@ColorRes final int resourceId){  addHelperTextColor(ContextCompat.getColor(getContext(),resourceId));}  }
class C{  @Path("propset") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces({MediaType.APPLICATION_JSON,MediaType.TEXT_PLAIN}) public CLIOutputResponse propset(final PropertySetRequest request) throws ApiException, IOException {  request.setProjectPath(getAbsoluteProjectPath(request.getProjectPath()));  return this.subversionApi.propset(request);}  }
class C{  protected boolean isInitialized(){  return (getModel() != null);}  }
class C{  public void listenOn(String channel){  this.pcClient.listenOn(channel);}  }
class C{  private void sortNodes(){  if (mNeedsSort) {    mSortedNodes.clear();    ArrayList<Node> roots=new ArrayList<Node>();    int numNodes=mNodes.size();    for (int i=0; i < numNodes; ++i) {      Node node=mNodes.get(i);      if (node.dependencies == null || node.dependencies.size() == 0) {        roots.add(node);      }    }    ArrayList<Node> tmpRoots=new ArrayList<Node>();    while (roots.size() > 0) {      int numRoots=roots.size();      for (int i=0; i < numRoots; ++i) {        Node root=roots.get(i);        mSortedNodes.add(root);        if (root.nodeDependents != null) {          int numDependents=root.nodeDependents.size();          for (int j=0; j < numDependents; ++j) {            Node node=root.nodeDependents.get(j);            node.nodeDependencies.remove(root);            if (node.nodeDependencies.size() == 0) {              tmpRoots.add(node);            }          }        }      }      roots.clear();      roots.addAll(tmpRoots);      tmpRoots.clear();    }    mNeedsSort=false;    if (mSortedNodes.size() != mNodes.size()) {      throw new IllegalStateException("Circular dependencies cannot exist" + " in AnimatorSet");    }  } else {    int numNodes=mNodes.size();    for (int i=0; i < numNodes; ++i) {      Node node=mNodes.get(i);      if (node.dependencies != null && node.dependencies.size() > 0) {        int numDependencies=node.dependencies.size();        for (int j=0; j < numDependencies; ++j) {          Dependency dependency=node.dependencies.get(j);          if (node.nodeDependencies == null) {            node.nodeDependencies=new ArrayList<Node>();          }          if (!node.nodeDependencies.contains(dependency.node)) {            node.nodeDependencies.add(dependency.node);          }        }      }      node.done=false;    }  }}  }
class C{  public static String randomString(int len){  StringBuilder b=new StringBuilder();  for (int i=0; i < len; i++)   b.append(LETTERS_AND_DIGITS.charAt(seededRandom.nextInt(LETTERS_AND_DIGITS.length())));  return b.toString();}  }
class C{  public void testInitializeSession() throws Throwable {  ServerStateMachineContext context=mock(ServerStateMachineContext.class);  ServerSessionContext session=new ServerSessionContext(10,UUID.randomUUID(),mock(Log.class),context,1000);  assertEquals(session.id(),10);  assertEquals(session.getLastCompleted(),9);  assertEquals(session.getLastApplied(),9);}  }
class C{  public Tuple make(TupleKeyValue... keyValues){  checkNotNull(keyValues,"keyValues must not be null");  if (!Stream.of(keyValues).allMatch(null)) {    throw new IllegalArgumentException(String.format("Keys %s do not all belong to schema %s",getKeyNames(keyValues),this));  }  if (Stream.of(keyValues).map(null).distinct().count() != slots.length) {    throw new IllegalArgumentException(String.format("Not all slots in %s filled by provided keys %s",this,getKeyNames(keyValues)));  }  Object[] values=new Object[slots.length];  Stream.of(keyValues).forEach(null);  return new Tuple(this,values);}  }
class C{  protected void calculateItemWidth(CategoryPlot plot,Rectangle2D dataArea,int rendererIndex,CategoryItemRendererState state){  CategoryAxis domainAxis=getDomainAxis(plot,rendererIndex);  CategoryDataset dataset=plot.getDataset(rendererIndex);  if (dataset != null) {    int columns=dataset.getColumnCount();    int rows=state.getVisibleSeriesCount() >= 0 ? state.getVisibleSeriesCount() : dataset.getRowCount();    double space=0.0;    PlotOrientation orientation=plot.getOrientation();    if (orientation == PlotOrientation.HORIZONTAL) {      space=dataArea.getHeight();    } else     if (orientation == PlotOrientation.VERTICAL) {      space=dataArea.getWidth();    }    double maxWidth=space * getMaximumItemWidth();    double categoryMargin=0.0;    double currentItemMargin=0.0;    if (columns > 1) {      categoryMargin=domainAxis.getCategoryMargin();    }    if (rows > 1) {      currentItemMargin=getItemMargin();    }    double used=space * (1 - domainAxis.getLowerMargin() - domainAxis.getUpperMargin()- categoryMargin- currentItemMargin);    if ((rows * columns) > 0) {      state.setBarWidth(Math.min(used / (rows * columns),maxWidth));    } else {      state.setBarWidth(Math.min(used,maxWidth));    }  }}  }
class C{  public FormIndex stepIndexOut(FormIndex index){  if (index.isTerminal()) {    return null;  } else {    return new FormIndex(stepIndexOut(index.getNextLevel()),index);  }}  }
class C{  public boolean isAllowTimeTracking(){  return allowTimeTracking;}  }
class C{  private void onStateChanged(){  if (isEnabled() && !mPaused) {    updateState();    postUpdate();  } else {    removeUpdate();  }}  }
class C{  public ConcurrentModificationException(){}  }
class C{  private double linearApproximate(double[] x,double[] y,double pt,double low,double high){  int i=0;  int j=x.length - 1;  if (pt < x[i]) {    return low;  }  if (pt > x[j]) {    return high;  }  while (i < j - 1) {    int ij=(i + j) / 2;    if (pt < x[ij]) {      j=ij;    } else {      i=ij;    }  }  if (pt == x[j]) {    return y[j];  }  if (pt == x[i]) {    return y[i];  }  return y[i] + (y[j] - y[i]) * ((pt - x[i]) / (x[j] - x[i]));}  }
class C{  public void clearImportedNames(String moduleName){  Set<String> importedNames=new HashSet<>();  importedNamesInModules.put(moduleName,importedNames);  Map<Symbol,String> importedModulesForNames=new HashMap<>();  importedElementsInModules.put(moduleName,importedModulesForNames);}  }
class C{  private void checkCache(IgniteCache<String,Integer> c,int keyCnt){  Ignite g=c.unwrap(Ignite.class);  for (int i=0; i < keyCnt; i++) {    String key=Integer.toString(i);    if (affinity(c).isPrimaryOrBackup(g.cluster().localNode(),key))     assertEquals(Integer.valueOf(i),c.localPeek(key,CachePeekMode.ONHEAP));  }}  }
class C{  public static String toString(int i){  return IntegralToString.intToString(i);}  }
class C{  public ImageBevelBorder(Image img,Insets imageInsets,Insets borderInsets){  this(img,imageInsets,borderInsets,true);}  }
class C{  public boolean intersects(Rectangle2D r){  return path.intersects(r);}  }
class C{  public void cancelEditing(){  TableCellEditor editor=getCellEditor();  if (editor != null) {    editor.cancelCellEditing();  }}  }
class C{  public final void shiftColumnDown(int row,int col,int numRowsShifted){  if (row >= getNumRows() || col >= getNumColumns()) {    throw new IllegalArgumentException("Out of range:  row = " + row + " col = "+ col);  }  int lastRow=-1;  for (int i=getNumRows() - 1; i >= row; i--) {    if (!Double.isNaN(tetradMatrix.get(i,col))) {      lastRow=i;      break;    }  }  if (lastRow == -1) {    return;  }  resize(getNumRows() + numRowsShifted,getNumColumns());  for (int i=getNumRows() - 1; i >= row + numRowsShifted; i--) {    tetradMatrix.set(i,col,tetradMatrix.get(i - numRowsShifted,col));    tetradMatrix.set(i - numRowsShifted,col,Double.NaN);  }}  }
class C{  public void drawArc(int x,int y,int width,int height,int startAngle,int arcAngle){  g.drawArc(x,y,width,height,startAngle,arcAngle);}  }
class C{  public String toString(){  return Helper.concatenateList("/",this);}  }
class C{  public TranslateExpression withReferenceToCodebase(Expression referenceToCodebase){  return withOption("referenceToCodebase",referenceToCodebase.toString());}  }
class C{  boolean ensureProcessSizeFits(final ExecutionUnit process,final Rectangle2D rect){  Dimension processSize=model.getProcessSize(process);  if (processSize == null) {    return false;  }  if (rect == null) {    return false;  }  boolean needsResize=false;  double processWidth=processSize.getWidth() * (1 / model.getZoomFactor());  double processHeight=processSize.getHeight() * (1 / model.getZoomFactor());  double width=processWidth;  double height=processHeight;  if (processSize != null) {    if (processWidth < rect.getMaxX() + ProcessDrawer.GRID_X_OFFSET) {      double diff=rect.getMaxX() + ProcessDrawer.GRID_X_OFFSET - processWidth;      if (diff > ProcessDrawer.GRID_X_OFFSET) {        width+=diff;      } else {        width+=ProcessDrawer.GRID_X_OFFSET;      }      needsResize=true;    }    if (processHeight < rect.getMaxY() + ProcessDrawer.GRID_Y_OFFSET) {      double diff=rect.getMaxY() + ProcessDrawer.GRID_Y_OFFSET - processHeight;      if (diff > ProcessDrawer.GRID_Y_OFFSET) {        height+=diff;      } else {        height+=ProcessDrawer.GRID_Y_OFFSET;      }      needsResize=true;    }    if (needsResize) {      model.setProcessWidth(process,width);      model.setProcessHeight(process,height);      balance();      model.fireProcessSizeChanged();      return true;    }  }  return false;}  }
class C{  public int x(double lon){  return (int)Math.round(dotsPerDeg * (lon - originLon) * lonCorr);}  }
class C{  private void expunge(MessageUid uid){  final int msn=msn(uid);  remove(msn,uid);  final List<Integer> renumberMsns=new ArrayList<Integer>(msnToUid.tailMap(msn + 1).keySet());  for (  Integer msnInteger : renumberMsns) {    int aMsn=msnInteger.intValue();    Optional<MessageUid> aUid=uid(aMsn);    if (aUid.isPresent()) {      remove(aMsn,aUid.get());      add(aMsn - 1,aUid.get());    }  }  highestMsn--;}  }
class C{  public IndependenceTest indTestSubset(List<Node> vars){  if (vars.isEmpty()) {    throw new IllegalArgumentException("Subset may not be empty.");  }  for (  Node var : vars) {    if (!variables.contains(var)) {      throw new IllegalArgumentException("All vars must be original vars");    }  }  int[] indices=new int[vars.size()];  for (int i=0; i < indices.length; i++) {    indices[i]=indexMap.get(vars.get(i));  }  ICovarianceMatrix newCovMatrix=covMatrix.getSubmatrix(indices);  double alphaNew=getAlpha();  return new IndTestTrekSep(newCovMatrix,alphaNew,clustering,latents);}  }
class C{  public GemFireException(Throwable cause){  super(cause);}  }
class C{  public StreamMessageDecoder(ClassResolver classResolver,int maxObjectSize){  super(maxObjectSize,0,4,0,4);  this.classResolver=classResolver;}  }
class C{  public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tThe classifier (incl. options) that was used to generate\n" + "\tthe source code.","W",1,"-W <classname and options>"));  result.addElement(new Option("\tThe classname of the generated source code.","S",1,"-S <classname>"));  result.addElement(new Option("\tThe training set with which the source code was generated.","t",1,"-t <file>"));  result.addElement(new Option("\tThe class index of the training set. 'first' and 'last' are\n" + "\tvalid indices.\n" + "\t(default: last)","c",1,"-c <index>"));  return result.elements();}  }
class C{  public static <K,V>HashMap<K,V> hashMap(int initialCapacity){  return new HashMap<K,V>(initialCapacity);}  }
class C{  public static ParticipationStatus find(String value){  if ("NEEDS ACTION".equalsIgnoreCase(value)) {    return NEEDS_ACTION;  }  return enums.find(value);}  }
class C{  public void test_search01(){  byte[][] keys=new byte[5][];  int i=0;  keys[i++]=new byte[]{5};  keys[i++]=new byte[]{7};  keys[i++]=new byte[]{9};  keys[i++]=new byte[]{11};  keys[i++]=new byte[]{13};  int nkeys=5;  final MutableKeyBuffer kbuf=new MutableKeyBuffer(nkeys,keys);  doSearchTest01(kbuf);}  }
class C{  public boolean equals(Object obj){  if (obj == this)   return true;  if (super.equals(obj) == false)   return false;  if (!(obj instanceof SubjectCodeSource))   return false;  SubjectCodeSource that=(SubjectCodeSource)obj;  try {    if (this.getSubject() != that.getSubject())     return false;  } catch (  SecurityException se) {    return false;  }  if ((this.principals == null && that.principals != null) || (this.principals != null && that.principals == null))   return false;  if (this.principals != null && that.principals != null) {    if (!this.principals.containsAll(that.principals) || !that.principals.containsAll(this.principals))     return false;  }  return true;}  }
class C{  public String encrypt(String plainText,CharSequence password) throws KeyCrypterException {  try {    byte[] plainTextAsBytes;    if (plainText == null) {      plainTextAsBytes=new byte[0];    } else {      plainTextAsBytes=plainText.getBytes(STRING_ENCODING);    }    byte[] encryptedBytes=encrypt(plainTextAsBytes,password);    byte[] encryptedBytesPlusSaltedText=concat(openSSLSaltedBytes,encryptedBytes);    return Base64.encodeBase64String(encryptedBytesPlusSaltedText);  } catch (  Exception e) {    throw new KeyCrypterException("Could not encrypt string '" + plainText + "'",e);  }}  }
class C{  public CharAt(){  super("text_transformation.char",2);}  }
class C{  @Override protected void onDraw(Canvas canvas){  super.onDraw(canvas);  if (noxItemCatalog == null) {    wasInvalidatedBefore=false;    return;  }  updateShapeOffset();  for (int i=0; i < noxItemCatalog.size(); i++) {    if (shape.isItemInsideView(i)) {      loadNoxItem(i);      float left=shape.getXForItemAtPosition(i);      float top=shape.getYForItemAtPosition(i);      drawNoxItem(canvas,i,left,top);    }  }  canvas.restore();  wasInvalidatedBefore=false;}  }
class C{  public PagesPerMinuteColor(int value){  super(value,0,Integer.MAX_VALUE);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:28.829 -0500",hash_original_method="2FD69B096455E1B51D801F19A8DBFD35",hash_generated_method="259D9284B9E32D040665E61DB462A055") public boolean isOnHold(){synchronized (this) {    return mHold;  }}  }
class C{  public UpdatedBayesIm(BayesIm bayesIm){  this(bayesIm,Evidence.tautology(bayesIm));}  }
class C{  public void testBug68763() throws Exception {  ReplicationConnection replConn=null;  replConn=(ReplicationConnection)getMasterSlaveReplicationConnection();  replConn.setReadOnly(true);  assertFalse("isMasterConnection() should be false for slave connection",replConn.isMasterConnection());  replConn.setReadOnly(false);  assertTrue("isMasterConnection() should be true for master connection",replConn.isMasterConnection());}  }
class C{  public void stopClearOnNextRepaint(final boolean flag){  noRepaint=flag;}  }
class C{  private void joinAllThreads() throws InterruptedException {  receiveThread.join();}  }
class C{  public ObjectFactory(){}  }
class C{  public Period toPeriodFrom(ReadableInstant startInstant){  return new Period(startInstant,this);}  }
class C{  public String isValidOperand(FullArgument operand,boolean executeNow){  if (operand.address.type == Op.ERROR) {    return "Invalid Expression";  }  if ((operand.address.type & Op.MEM) != 0) {    return isValidAddress(operand.arg,operand.address.size,executeNow);  }  return null;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("Get from " + request.getRemoteHost() + " - "+ request.getRemoteAddr());  Properties ctx=JSPEnv.getCtx(request);  HttpSession session=request.getSession(true);  session.removeAttribute(WebSessionCtx.HDR_MESSAGE);  WebUser wu=(WebUser)session.getAttribute(WebUser.NAME);  MPayment p=(MPayment)session.getAttribute(ATTR_PAYMENT);  if (wu == null) {    log.info("No User");    String url="/index.jsp";    log.info("Forward to " + url);    RequestDispatcher dispatcher=getServletContext().getRequestDispatcher(url);    dispatcher.forward(request,response);  }  session.removeAttribute(WebOrder.NAME);  String amtParam=WebUtil.getParameter(request,"Amt");  if (amtParam == null || amtParam.length() == 0) {    log.info("No Payment Amount (" + amtParam + ")");    doPost(request,response);    return;  }  char[] chars=amtParam.toCharArray();  StringBuffer sb=new StringBuffer();  boolean decimal=false;  for (int i=chars.length - 1; i >= 0; i--) {    char c=chars[i];    if (c == ',' || c == '.') {      if (!decimal) {        sb.insert(0,'.');        decimal=true;      }    } else     if (Character.isDigit(c))     sb.insert(0,c);  }  BigDecimal amt=null;  try {    if (sb.length() > 0) {      amt=new BigDecimal(sb.toString());      amt=amt.abs();    }  } catch (  Exception ex) {    log.warning("Parsing Amount=" + amtParam + " ("+ sb+ ") - "+ ex.toString());  }  if (amt == null || amt.compareTo(Env.ZERO) < 0) {    log.info("No valid Payment Amount (" + amtParam + ") - "+ amt);    doPost(request,response);    return;  }  String invoiceParam=WebUtil.getParameter(request,"C_Invoice_ID");  int C_Invoice_ID=0;  try {    if (invoiceParam != null)     C_Invoice_ID=Integer.parseInt(invoiceParam);  } catch (  NumberFormatException ex) {    log.warning("Parsing C_Invoice_ID=" + invoiceParam + " - "+ ex.toString());  }  log.info("Amt=" + amt + ", C_Invoice_ID="+ C_Invoice_ID);  p=new MPayment(ctx,0,null);  p.setIsSelfService(true);  p.setAmount(0,amt);  p.setIsOnline(true);  p.setC_DocType_ID(true);  p.setTrxType(MPayment.TRXTYPE_Sales);  p.setTenderType(MPayment.TENDERTYPE_CreditCard);  p.setC_Invoice_ID(C_Invoice_ID);  p.setBP_BankAccount(wu.getBankAccount());  session.setAttribute(ATTR_PAYMENT,p);  String url="/paymentInfo.jsp";  log.info("Forward to " + url);  RequestDispatcher dispatcher=getServletContext().getRequestDispatcher(url);  dispatcher.forward(request,response);}  }
class C{  public void test_clearSolutionSet_02() throws UpdateExecutionException, RepositoryException, MalformedQueryException {  if (!isSolutionSetUpdateEnabled()) {    return;  }  con.prepareUpdate(QueryLanguage.SPARQL,"clear silent solutions %namedSet1").execute();}  }
class C{  boolean containsMember(InternalDistributedMember memberId){  if (this.nodes != null) {    for (    Node node : this.nodes) {      if (memberId.equals(node.getMemberId())) {        return true;      }    }  }  return false;}  }
class C{  public boolean canHalt(){  return targetInformation.getDebuggerOptions().canHalt();}  }
class C{  protected SVGOMElement(){}  }
class C{  private void updateDefaultAccounts(int C_AcctSchema_ID){  log.config("C_AcctSchema_ID=" + C_AcctSchema_ID);  MAcctSchema as=new MAcctSchema(getCtx(),C_AcctSchema_ID,get_TrxName());  if (as.getAcctSchemaElement("AC").getC_Element_ID() != m_C_Element_ID) {    log.log(Level.SEVERE,"C_Element_ID=" + m_C_Element_ID + " not in AcctSchema="+ as);    return;  }  int[] counts=new int[]{0,0,0};  String sql="SELECT i.C_ElementValue_ID, t.TableName, c.ColumnName, i.I_ElementValue_ID " + "FROM I_ElementValue i" + " INNER JOIN AD_Column c ON (i.AD_Column_ID=c.AD_Column_ID)"+ " INNER JOIN AD_Table t ON (c.AD_Table_ID=t.AD_Table_ID) "+ "WHERE i.I_IsImported='Y' AND Processing='Y'"+ " AND i.C_ElementValue_ID IS NOT NULL AND C_Element_ID=?";  try {    PreparedStatement pstmt=DB.prepareStatement(sql,get_TrxName());    pstmt.setInt(1,m_C_Element_ID);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      int C_ElementValue_ID=rs.getInt(1);      String TableName=rs.getString(2);      String ColumnName=rs.getString(3);      int I_ElementValue_ID=rs.getInt(4);      int u=updateDefaultAccount(TableName,ColumnName,C_AcctSchema_ID,C_ElementValue_ID);      counts[u]++;      if (u != UPDATE_ERROR) {        sql="UPDATE I_ElementValue SET Processing='N' " + "WHERE I_ElementValue_ID=" + I_ElementValue_ID;        int no=DB.executeUpdate(sql.toString(),get_TrxName());        if (no != 1)         log.log(Level.SEVERE,"Updated=" + no);      }    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,"",e);  }  addLog(0,null,new BigDecimal(counts[UPDATE_ERROR]),as.toString() + ": @Errors@");  addLog(0,null,new BigDecimal(counts[UPDATE_YES]),as.toString() + ": @Updated@");  addLog(0,null,new BigDecimal(counts[UPDATE_SAME]),as.toString() + ": OK");}  }
class C{  public boolean mousePressed(MouseEvent e){  Debug.message("eomg","ListStateMachine|unselected state|mousePressed");  GrabPoint mp=graphic.getMovingPoint(e);  if (mp != null) {    graphic.getStateMachine().setEdit();    graphic.fireEvent(EOMGCursors.EDIT,"",EOMGEvent.EOMG_EDIT);    graphic.redraw(e,true);  }  return getMapMouseListenerResponse();}  }
class C{  private void addEdge(){  childMatrix[randomParent][childMatrix[randomParent][0]]=randomChild;  childMatrix[randomParent][0]++;  parentMatrix[randomChild][parentMatrix[randomChild][0]]=randomParent;  parentMatrix[randomChild][0]++;}  }
class C{  public Socket accept() throws IOException {  checkOpen();  if (!isBound()) {    throw new SocketException("Socket is not bound");  }  Socket aSocket=new Socket();  try {    implAccept(aSocket);  } catch (  IOException e) {    aSocket.close();    throw e;  }  return aSocket;}  }
class C{  public ClampWeightsAction(final NetworkPanel networkPanel){  super("Clamp Weights");  if (networkPanel == null) {    throw new IllegalArgumentException("networkPanel must not be null");  }  this.networkPanel=networkPanel;  putValue(SMALL_ICON,ResourceManager.getImageIcon("Clamp_W.png"));  putValue(SHORT_DESCRIPTION,"Clamp Weights");}  }
class C{  public Shape3DPortrayal3D(Shape3D shape,Image image){  this(shape,appearanceForImage(image,true));}  }
class C{  public void updateAction(ActionRequest actionRequest,ActionResponse actionResponse) throws IOException {  String redirectURL=ParamUtil.getString(actionRequest,"redirectURL");  String returnURL=ParamUtil.getString(actionRequest,"returnURL");  SessionMessages.add(actionRequest,PortalUtil.getPortletId(actionRequest) + SessionMessages.KEY_SUFFIX_HIDE_DEFAULT_ERROR_MESSAGE);  long processWorkflowId=ParamUtil.getLong(actionRequest,"processWorkflowId");  long serviceProcessId=ParamUtil.getLong(actionRequest,"serviceProcessId");  long preProcessStepId=ParamUtil.getLong(actionRequest,"preProcessStepId");  long postProcessStepId=ParamUtil.getLong(actionRequest,"postProcessStepId");  String autoEvent=ParamUtil.getString(actionRequest,"autoEvent");  String actionName=ParamUtil.getString(actionRequest,"actionName");  boolean assignUser=ParamUtil.getBoolean(actionRequest,"assignUser");  long actionUserId=ParamUtil.getLong(actionRequest,"actionUserId");  boolean requestPayment=ParamUtil.getBoolean(actionRequest,"requestPaymentCheckbox");  String paymentFee=ParamUtil.getString(actionRequest,"paymentFee");  boolean generateReceptionNo=ParamUtil.getBoolean(actionRequest,"generateReceptionNoCheckbox");  String receptionNoPattern=ParamUtil.getString(actionRequest,"receptionNoPattern");  boolean generateDeadline=ParamUtil.getBoolean(actionRequest,"generateDeadlineCheckbox");  String deadlinePattern=ParamUtil.getString(actionRequest,"deadlinePattern");  boolean isFinishStep=ParamUtil.getBoolean(actionRequest,"isFinishStepCheckbox");  String preCondition=ParamUtil.getString(actionRequest,"preCondition");  boolean isMultipled=ParamUtil.getBoolean(actionRequest,"isMultipledCheckbox");  try {    ServiceContext serviceContext=ServiceContextFactory.getInstance(actionRequest);    if (processWorkflowId <= 0) {      ProcessWorkflow workflow=ProcessWorkflowLocalServiceUtil.addWorkflow(serviceProcessId,preProcessStepId,postProcessStepId,autoEvent,actionName,assignUser,actionUserId,requestPayment,paymentFee,generateReceptionNo,receptionNoPattern,generateDeadline,deadlinePattern,isFinishStep,preCondition,isMultipled,serviceContext);      List<WorkflowOutput> workflowOutputs=ProcessUtils.getWorkflowOutput(actionRequest,workflow.getProcessWorkflowId());      for (      WorkflowOutput output : workflowOutputs) {        WorkflowOutputLocalServiceUtil.addWorkflowOutput(output.getDossierPartId(),output.getProcessWorkflowId(),output.getRequired(),output.getEsign(),output.getPostback());      }    } else {      ProcessWorkflow workflow=ProcessWorkflowLocalServiceUtil.updateWorkflow(processWorkflowId,preProcessStepId,postProcessStepId,autoEvent,actionName,assignUser,actionUserId,requestPayment,paymentFee,generateReceptionNo,receptionNoPattern,generateDeadline,deadlinePattern,isFinishStep,preCondition,isMultipled,serviceContext);      List<WorkflowOutput> workflowOutputs=ProcessUtils.getWorkflowOutput(actionRequest,workflow.getProcessWorkflowId());      List<WorkflowOutput> beforeList=WorkflowOutputLocalServiceUtil.getByProcessWF(workflow.getProcessWorkflowId());      List<WorkflowOutput> removeWorkflow=ProcessUtils.getWorkflowOutputRemove(beforeList,workflowOutputs);      for (      WorkflowOutput output : removeWorkflow) {        WorkflowOutputLocalServiceUtil.deleteWorkflowOutput(output);      }      for (      WorkflowOutput output : workflowOutputs) {        if (output.getWorkflowOutputId() > 0) {          WorkflowOutputLocalServiceUtil.updateWorkflowOutput(output.getWorkflowOutputId(),output.getDossierPartId(),output.getProcessWorkflowId(),output.getRequired(),output.getEsign(),output.getPostback());        } else {          WorkflowOutputLocalServiceUtil.addWorkflowOutput(output.getDossierPartId(),output.getProcessWorkflowId(),output.getRequired(),output.getEsign(),output.getPostback());        }      }    }    if (Validator.isNotNull(redirectURL)) {      actionResponse.sendRedirect(redirectURL + "#_15_WAR_opencpsportlet_tab=_15_WAR_opencpsportlet_action");    }  } catch (  Exception e) {    if (Validator.isNotNull(returnURL)) {      actionResponse.sendRedirect(returnURL);    }  }}  }
class C{  protected TraceEndRunCycleImpl(){  super();}  }
class C{  public GreaterEqualConstraint(double constraintValue){  super(Double.valueOf(constraintValue));}  }
class C{  static void put(final AnnotationWriter[] panns,final int off,final ByteVector out){  int size=1 + 2 * (panns.length - off);  for (int i=off; i < panns.length; ++i) {    size+=panns[i] == null ? 0 : panns[i].getSize();  }  out.putInt(size).putByte(panns.length - off);  for (int i=off; i < panns.length; ++i) {    AnnotationWriter aw=panns[i];    AnnotationWriter last=null;    int n=0;    while (aw != null) {      ++n;      aw.visitEnd();      aw.prev=last;      last=aw;      aw=aw.next;    }    out.putShort(n);    aw=last;    while (aw != null) {      out.putByteArray(aw.bv.data,0,aw.bv.length);      aw=aw.prev;    }  }}  }
class C{  @Override public DefaultRunnerClient runner(){  return new DefaultRunnerClient(url,authenticationManager);}  }
class C{  public void testLowerCaseFilterLowSurrogateLeftover() throws IOException {  WhitespaceTokenizer tokenizer=new WhitespaceTokenizer();  tokenizer.setReader(new StringReader("BogustermBogusterm\udc16"));  LowerCaseFilter filter=new LowerCaseFilter(tokenizer);  assertTokenStreamContents(filter,new String[]{"bogustermbogusterm\udc16"});  filter.reset();  String highSurEndingUpper="BogustermBoguster\ud801";  String highSurEndingLower="bogustermboguster\ud801";  tokenizer.setReader(new StringReader(highSurEndingUpper));  assertTokenStreamContents(filter,new String[]{highSurEndingLower});  assertTrue(filter.hasAttribute(CharTermAttribute.class));  char[] termBuffer=filter.getAttribute(CharTermAttribute.class).buffer();  int length=highSurEndingLower.length();  assertEquals('\ud801',termBuffer[length - 1]);}  }
class C{  public float nextFloat(boolean includeZero,boolean includeOne){  float d=0.0f;  do {    d=nextFloat();    if (includeOne && nextBoolean())     d+=1.0f;  } while ((d > 1.0f) || (!includeZero && d == 0.0f));  return d;}  }
class C{  @TargetApi(Build.VERSION_CODES.M) public DropDownAdapter(@Nullable SpinnerAdapter adapter,@Nullable Resources.Theme dropDownTheme){  mAdapter=adapter;  if (adapter instanceof ListAdapter) {    mListAdapter=(ListAdapter)adapter;  }  if (dropDownTheme != null) {    if (IS_AT_LEAST_M && adapter instanceof android.widget.ThemedSpinnerAdapter) {      final android.widget.ThemedSpinnerAdapter themedAdapter=(android.widget.ThemedSpinnerAdapter)adapter;      if (themedAdapter.getDropDownViewTheme() != dropDownTheme) {        themedAdapter.setDropDownViewTheme(dropDownTheme);      }    } else     if (adapter instanceof ThemedSpinnerAdapter) {      final ThemedSpinnerAdapter themedAdapter=(ThemedSpinnerAdapter)adapter;      if (themedAdapter.getDropDownViewTheme() == null) {        themedAdapter.setDropDownViewTheme(dropDownTheme);      }    }  }}  }
class C{  private View fillDown(int pos,int nextTop){  View selectedView=null;  int end=(mBottom - mTop);  if ((mGroupFlags & CLIP_TO_PADDING_MASK) == CLIP_TO_PADDING_MASK) {    end-=mListPadding.bottom;  }  while (nextTop < end && pos < mItemCount) {    boolean selected=pos == mSelectedPosition;    View child=makeAndAddView(pos,nextTop,true,mListPadding.left,selected);    nextTop=child.getBottom() + mDividerHeight;    if (selected) {      selectedView=child;    }    pos++;  }  setVisibleRangeHint(mFirstPosition,mFirstPosition + getChildCount() - 1);  return selectedView;}  }
class C{  public static boolean isExistingNode(ASTNode node){  return node.getStartPosition() != -1;}  }
class C{  public SolrCore create(String coreName,Path instancePath,Map<String,String> parameters,boolean newCollection){  CoreDescriptor cd=new CoreDescriptor(this,coreName,instancePath,parameters);  if (getAllCoreNames().contains(coreName)) {    log.warn("Creating a core with existing name is not allowed");    throw new SolrException(ErrorCode.SERVER_ERROR,"Core with name '" + coreName + "' already exists.");  }  boolean preExisitingZkEntry=false;  try {    if (getZkController() != null) {      if (!Overseer.isLegacy(getZkController().getZkStateReader())) {        if (cd.getCloudDescriptor().getCoreNodeName() == null) {          throw new SolrException(ErrorCode.SERVER_ERROR,"non legacy mode coreNodeName missing " + parameters.toString());        }      }      preExisitingZkEntry=getZkController().checkIfCoreNodeNameAlreadyExists(cd);    }    SolrCore core=create(cd,true,newCollection);    coresLocator.create(this,cd);    return core;  } catch (  Exception ex) {    if (isZooKeeperAware() && !preExisitingZkEntry) {      try {        getZkController().unregister(coreName,cd);      } catch (      InterruptedException e) {        Thread.currentThread().interrupt();        SolrException.log(log,null,e);      }catch (      KeeperException e) {        SolrException.log(log,null,e);      }    }    Throwable tc=ex;    Throwable c=null;    do {      tc=tc.getCause();      if (tc != null) {        c=tc;      }    } while (tc != null);    String rootMsg="";    if (c != null) {      rootMsg=" Caused by: " + c.getMessage();    }    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Error CREATEing SolrCore '" + coreName + "': "+ ex.getMessage()+ rootMsg,ex);  }}  }
class C{  public CascadingNetworkBuilder(Network network,int numLayers,int numBrachesPerNeuron){  this.network=network;  this.numLayers=numLayers;  this.numBrachesPerNeuron=numBrachesPerNeuron;}  }
class C{  public List<RDOSummary> evaluateBillingResultForBillingDetails(RDOSummary summaryTemplate,Document doc,PlatformUser user,PriceConverter formatter) throws XPathExpressionException, SQLException {  this.formatter=formatter;  this.document=doc;  return evaluateBillingResultForBilling(summaryTemplate,user,null);}  }
class C{  private boolean isHookRouteUnregistration(HttpServerRequest request){  return request.uri().contains(HOOKS_ROUTE_URI_PART) && HttpMethod.DELETE == request.method();}  }
class C{  public boolean contains(Object o){  if (o == null)   return false;  int mask=elements.length - 1;  int i=head;  E x;  while ((x=elements[i]) != null) {    if (o.equals(x))     return true;    i=(i + 1) & mask;  }  return false;}  }
class C{  public List findUsersByName(String query){  return usuarioDBEntity.findByName(query);}  }
class C{  public Expression inlineValue(Environment env,Context ctx){  if (type == Type.tString && isConstant()) {    StringBuffer buffer=inlineValueSB(env,ctx,new StringBuffer());    if (buffer != null) {      return new StringExpression(where,buffer.toString());    }  }  return super.inlineValue(env,ctx);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.AWAIT_EXPRESSION__EXPRESSION:    setExpression((Expression)null);  return;}super.eUnset(featureID);}  }
class C{  protected JvmMemPoolTableMeta createJvmMemPoolTableMetaNode(String tableName,String groupName,SnmpMib mib,MBeanServer server){  return new JvmMemPoolTableMetaImpl(mib,objectserver);}  }
class C{  public static void OpenGooglePlayLink(Context ctx){  final String appPackageName="com.mariussoft.endlessjabber";  try {    ctx.startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse("market://details?id=" + appPackageName)));  } catch (  android.content.ActivityNotFoundException anfe) {    ctx.startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse("http://play.google.com/store/apps/details?id=" + appPackageName)));  }}  }
class C{  private void assembleClassXML(){  Collection<AsClass> classes=classTable.values();  Iterator<AsClass> classIterator=classes.iterator();  while (classIterator.hasNext()) {    AsClass asClass=classIterator.next();    if (verbose) {      System.out.println("assembling " + asClass.getFullName());    }    if (asClass.getNode() == null) {      continue;    }    if (asClass.getConstructorCount() > 1) {      NodeList apiConstructorList=asClass.getConstructors().getElementsByTagName("apiConstructor");      if (apiConstructorList != null && apiConstructorList.getLength() != 0) {        for (int ix=0; ix < apiConstructorList.getLength(); ix++) {          Element apiConstructor=(Element)apiConstructorList.item(ix);          apiConstructor.setAttribute("id",apiConstructor.getAttribute("id") + "_" + ix);        }      }    }    if (asClass.getConstructorCount() > 0) {      NodeList apiConstructorList=asClass.getConstructors().getElementsByTagName("apiConstructor");      if (apiConstructorList != null && apiConstructorList.getLength() != 0) {        for (int ix=0; ix < apiConstructorList.getLength(); ix++) {          Element apiConstructor=(Element)apiConstructorList.item(ix);          asClass.getNode().appendChild(apiConstructor.cloneNode(true));        }      }    }    if (asClass.getMethodCount() > 0) {      NodeList apiOperationList=asClass.getMethods().getElementsByTagName("apiOperation");      if (apiOperationList != null && apiOperationList.getLength() != 0) {        for (int ix=0; ix < apiOperationList.getLength(); ix++) {          Element apiOperation=(Element)apiOperationList.item(ix);          asClass.getNode().appendChild(apiOperation.cloneNode(true));        }      }    }    if (asClass.getFieldCount() > 0) {      NodeList apiValueList=asClass.getFields().getElementsByTagName("apiValue");      if (apiValueList != null && apiValueList.getLength() != 0) {        for (int ix=0; ix < apiValueList.getLength(); ix++) {          Element apiValue=(Element)apiValueList.item(ix);          Element apiName=asDocUtil.getElementByTagName(apiValue,"apiName");          Integer val=asClass.getFieldGetSet().get(apiName.getTextContent());          if (val == null) {            asClass.getNode().appendChild(apiValue.cloneNode(true));            continue;          }          Element apiValueDetail=null;          Element apiValueDef=null;          Element apiValueAccess=null;          apiValueDetail=asDocUtil.getElementByTagName(apiValue,"apiValueDetail");          if (apiValueDetail != null) {            apiValueDef=asDocUtil.getElementByTagName(apiValueDetail,"apiValueDef");            if (apiValueDef != null) {              apiValueAccess=asDocUtil.getElementByTagName(apiValueDef,"apiValueAccess");              if (apiValueAccess == null) {                apiValueAccess=outputObject.createElement("apiValueAccess");                apiValueDef.appendChild(apiValueAccess);              }            } else {              apiValueAccess=outputObject.createElement("apiValueAccess");              apiValueDef=outputObject.createElement("apiValueDef");              apiValueDef.appendChild(apiValueAccess);              apiValueDetail.appendChild(apiValueDef);            }          } else {            apiValueAccess=outputObject.createElement("apiValueAccess");            apiValueDef=outputObject.createElement("apiValueDef");            apiValueDetail=outputObject.createElement("apiValueDetail");            apiValueDef.appendChild(apiValueAccess);            apiValueDetail.appendChild(apiValueDef);            apiValue.appendChild(apiValueDetail);          }          if (val == 1) {            apiValueAccess.setAttribute("value","read");          } else           if (val == 2) {            apiValueAccess.setAttribute("value","write");          } else           if (val == 3) {            apiValueAccess.setAttribute("value","readwrite");          }          asClass.getNode().appendChild(apiValue.cloneNode(true));        }      }    }  }}  }
class C{  public void testPrintMessage() throws Exception {  String javaText=TextFormat.printToString(TestUtil.getAllSet());  javaText=javaText.replace(".0\n","\n");  assertEquals(allFieldsSetText,javaText);}  }
class C{  public GSSException(int majorCode){  if (validateMajor(majorCode))   major=majorCode; else   major=FAILURE;}  }
class C{  private UseGzip gzipPermitted(Message message) throws Fault {  LOG.fine("Response role, checking accept-encoding");  Exchange exchange=message.getExchange();  Message response=exchange.getOutMessage();  List<?> contentList=response.getContent(List.class);  String contentType=null;  if ((contentList != null) && (contentList.size() > 0)) {    if (contentList.get(0) instanceof ResponseImpl) {      ResponseImpl resp=(ResponseImpl)contentList.get(0);      contentType=resp.getHeaderString("Content-Type");    }  }  if (contentType != null && (contentType.equals(MediaType.APPLICATION_OCTET_STREAM))) {    LOG.fine("Content-Type:application/octet-stream, bypassing gzip compression");    return UseGzip.NO;  } else {    return gzipPermittedOriginal(message);  }}  }
class C{  private void initInterpolator(){  set("ACCELERATE_DECELERATE",0);  set("ACCELERATE",1);  set("ANTICIPATE",2);  set("ANTICIPATE_OVERSHOOT",3);  set("BOUNCE",4);  set("CYCLE",5);  set("DECELERATE",6);  set("LINEAR",7);  set("OVERSHOOT",8);}  }
class C{  protected void reportMatching(TypeDeclaration type,IJavaElement parent,int accuracy,MatchingNodeSet nodeSet,int occurrenceCount) throws CoreException {  IJavaElement enclosingElement=parent;  if (enclosingElement == null) {    enclosingElement=createTypeHandle(new String(type.name));  } else   if (enclosingElement instanceof IType) {    enclosingElement=((IType)parent).getType(new String(type.name));  } else   if (enclosingElement instanceof IMember) {    IMember member=(IMember)parent;    if (member.isBinary()) {      enclosingElement=((IClassFile)this.currentPossibleMatch.openable).getType();    } else {      enclosingElement=member.getType(new String(type.name),occurrenceCount);    }  }  if (enclosingElement == null)   return;  boolean enclosesElement=encloses(enclosingElement);  if (accuracy > -1 && enclosesElement) {    int offset=type.sourceStart;    SearchMatch match=this.patternLocator.newDeclarationMatch(type,enclosingElement,type.binding,accuracy,type.sourceEnd - offset + 1,this);    report(match);  }  boolean matchedClassContainer=(this.matchContainer & PatternLocator.CLASS_CONTAINER) != 0;  if (type.typeParameters != null) {    reportMatching(type.typeParameters,enclosingElement,parent,type.binding,nodeSet);  }  if (type.annotations != null) {    reportMatching(type.annotations,enclosingElement,null,type.binding,nodeSet,matchedClassContainer,enclosesElement);  }  if (type.javadoc != null) {    ASTNode[] nodes=nodeSet.matchingNodes(type.declarationSourceStart,type.sourceStart);    if (nodes != null) {      if (!matchedClassContainer) {        for (int i=0, l=nodes.length; i < l; i++)         nodeSet.matchingNodes.removeKey(nodes[i]);      } else {        for (int i=0, l=nodes.length; i < l; i++) {          ASTNode node=nodes[i];          Integer level=(Integer)nodeSet.matchingNodes.removeKey(node);          if (enclosesElement) {            this.patternLocator.matchReportReference(node,enclosingElement,null,null,type.binding,level.intValue(),this);          }        }      }    }  }  if ((type.bits & ASTNode.IsAnonymousType) != 0) {    TypeReference superType=type.allocation.type;    if (superType != null) {      Integer level=(Integer)nodeSet.matchingNodes.removeKey(superType);      if (level != null && matchedClassContainer)       this.patternLocator.matchReportReference(superType,enclosingElement,null,null,type.binding,level.intValue(),this);    }  } else {    TypeReference superClass=type.superclass;    if (superClass != null) {      reportMatchingSuper(superClass,enclosingElement,type.binding,nodeSet,matchedClassContainer);      for (int i=0, length=superClass.annotations == null ? 0 : superClass.annotations.length; i < length; i++) {        Annotation[] annotations=superClass.annotations[i];        if (annotations == null)         continue;        reportMatching(annotations,enclosingElement,null,type.binding,nodeSet,matchedClassContainer,enclosesElement);      }    }    TypeReference[] superInterfaces=type.superInterfaces;    if (superInterfaces != null) {      for (int i=0, l=superInterfaces.length; i < l; i++) {        reportMatchingSuper(superInterfaces[i],enclosingElement,type.binding,nodeSet,matchedClassContainer);        TypeReference typeReference=type.superInterfaces[i];        Annotation[][] annotations=typeReference != null ? typeReference.annotations : null;        if (annotations != null) {          for (int j=0, length=annotations.length; j < length; j++) {            if (annotations[j] == null)             continue;            reportMatching(annotations[j],enclosingElement,null,type.binding,nodeSet,matchedClassContainer,enclosesElement);          }        }      }    }  }  boolean typeInHierarchy=type.binding == null || typeInHierarchy(type.binding);  matchedClassContainer=matchedClassContainer && typeInHierarchy;  FieldDeclaration[] fields=type.fields;  if (fields != null) {    if (nodeSet.matchingNodes.elementSize == 0)     return;    FieldDeclaration[] otherFields=null;    int first=-1;    int length=fields.length;    for (int i=0; i < length; i++) {      FieldDeclaration field=fields[i];      boolean last=field.endPart2Position == 0 || field.declarationEnd == field.endPart2Position;      if (!last) {        if (first == -1) {          first=i;        }      }      if (first >= 0) {        if (i > first) {          if (otherFields == null) {            otherFields=new FieldDeclaration[length - i];          }          otherFields[i - 1 - first]=field;        }        if (last) {          for (int j=first; j <= i; j++) {            Integer level=(Integer)nodeSet.matchingNodes.removeKey(fields[j]);            int value=(level != null && matchedClassContainer) ? level.intValue() : -1;            reportMatching(fields[j],otherFields,type,enclosingElement,value,typeInHierarchy,nodeSet);          }          first=-1;          otherFields=null;        }      } else {        Integer level=(Integer)nodeSet.matchingNodes.removeKey(field);        int value=(level != null && matchedClassContainer) ? level.intValue() : -1;        reportMatching(field,null,type,enclosingElement,value,typeInHierarchy,nodeSet);      }    }  }  AbstractMethodDeclaration[] methods=type.methods;  if (methods != null) {    if (nodeSet.matchingNodes.elementSize == 0)     return;    for (int i=0, l=methods.length; i < l; i++) {      AbstractMethodDeclaration method=methods[i];      Integer level=(Integer)nodeSet.matchingNodes.removeKey(method);      int value=(level != null && matchedClassContainer) ? level.intValue() : -1;      reportMatching(method,type,enclosingElement,value,typeInHierarchy,nodeSet);    }  }  TypeDeclaration[] memberTypes=type.memberTypes;  if (memberTypes != null) {    for (int i=0, l=memberTypes.length; i < l; i++) {      if (nodeSet.matchingNodes.elementSize == 0)       return;      TypeDeclaration memberType=memberTypes[i];      Integer level=(Integer)nodeSet.matchingNodes.removeKey(memberType);      int value=(level != null && matchedClassContainer) ? level.intValue() : -1;      reportMatching(memberType,enclosingElement,value,nodeSet,1);    }  }}  }
class C{  @Override public void jmp(Label label){  if (label.isBound()) {    int offset=label.position() - position();    super.b(offset);  } else {    label.addPatchAt(position());    emitInt(PatchLabelKind.BRANCH_UNCONDITIONALLY.encoding);  }}  }
class C{  public static TypeReference newTypeParameterReference(int sort,int paramIndex){  return new TypeReference((sort << 24) | (paramIndex << 16));}  }
class C{  public static void createSingleton(String[] args){  if (m_MainSingleton == null) {    m_MainSingleton=new Main();  }  try {    m_MainSingleton.setOptions(args);  } catch (  Exception e) {    e.printStackTrace();  }  for (int i=0; i < m_StartupListeners.size(); i++) {    m_StartupListeners.elementAt(i).startUpComplete();  }}  }
class C{  public ByteArrayBody(final byte[] data,final String mimeType,final String filename){  super(mimeType);  if (data == null) {    throw new IllegalArgumentException("byte[] may not be null");  }  this.data=data;  this.filename=filename;}  }
class C{  public AbstractResourceOnStandaloneConfigurationTest(String testName,EnvironmentTestData testData) throws Exception {  super(testName,testData);}  }
class C{  @Override protected final void onRestart(){  super.onRestart();  geoLocationHelper.startRetrievingLocation(this);}  }
class C{  protected void sequence_S_Loop(ISerializationContext context,S_Loop semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void paste(String sXML) throws Exception {  try {    paste(sXML,TEST);  } catch (  Exception e) {    throw e;  }  paste(sXML,EXECUTE);}  }
class C{  public void initRemoteCrawler(final boolean activate){  this.setConfig(SwitchboardConstants.CRAWLJOB_REMOTE,activate);  this.peers.mySeed().setFlagAcceptRemoteCrawl(activate);  if (activate) {    this.crawlQueues.initRemoteCrawlQueues();    BusyThread rct=getThread(SwitchboardConstants.CRAWLJOB_REMOTE_TRIGGERED_CRAWL);    if (rct == null) {      deployThread(SwitchboardConstants.CRAWLJOB_REMOTE_TRIGGERED_CRAWL,"Remote Crawl Job","thread that performes a single crawl/indexing step triggered by a remote peer","/IndexCreateQueues_p.html?stack=REMOTE",new InstantBusyThread(this.crawlQueues,SwitchboardConstants.CRAWLJOB_REMOTE_TRIGGERED_CRAWL_METHOD_START,SwitchboardConstants.CRAWLJOB_REMOTE_TRIGGERED_CRAWL_METHOD_JOBCOUNT,SwitchboardConstants.CRAWLJOB_REMOTE_TRIGGERED_CRAWL_METHOD_FREEMEM,0,0),10000);      rct=getThread(SwitchboardConstants.CRAWLJOB_REMOTE_TRIGGERED_CRAWL);    }    rct.setBusySleep(getConfigLong(SwitchboardConstants.CRAWLJOB_REMOTE_TRIGGERED_CRAWL_BUSYSLEEP,1000));    rct.setIdleSleep(getConfigLong(SwitchboardConstants.CRAWLJOB_REMOTE_TRIGGERED_CRAWL_IDLESLEEP,10000));    BusyThread rcl=getThread(SwitchboardConstants.CRAWLJOB_REMOTE_CRAWL_LOADER);    if (rcl == null) {      deployThread(SwitchboardConstants.CRAWLJOB_REMOTE_CRAWL_LOADER,"Remote Crawl URL Loader","thread that loads remote crawl lists from other peers",null,new InstantBusyThread(this.crawlQueues,SwitchboardConstants.CRAWLJOB_REMOTE_CRAWL_LOADER_METHOD_START,SwitchboardConstants.CRAWLJOB_REMOTE_CRAWL_LOADER_METHOD_JOBCOUNT,SwitchboardConstants.CRAWLJOB_REMOTE_CRAWL_LOADER_METHOD_FREEMEM,10000,10000),10000);      rcl=getThread(SwitchboardConstants.CRAWLJOB_REMOTE_CRAWL_LOADER);    }    rcl.setBusySleep(getConfigLong(SwitchboardConstants.CRAWLJOB_REMOTE_CRAWL_LOADER_BUSYSLEEP,1000));    rcl.setIdleSleep(getConfigLong(SwitchboardConstants.CRAWLJOB_REMOTE_CRAWL_LOADER_IDLESLEEP,10000));  } else {    terminateThread(SwitchboardConstants.CRAWLJOB_REMOTE_CRAWL_LOADER,true);    terminateThread(SwitchboardConstants.CRAWLJOB_REMOTE_TRIGGERED_CRAWL,true);  }}  }
class C{  @SuppressWarnings("sync-override") @Override public final Throwable fillInStackTrace(){  return null;}  }
class C{  public static String toString(JSONObject jo) throws JSONException {  StringBuilder sb=new StringBuilder();  int i;  JSONArray ja;  String key;  Iterator<String> keys;  int length;  Object object;  String tagName;  String value;  tagName=jo.optString("tagName");  if (tagName == null) {    return XML.escape(jo.toString());  }  XML.noSpace(tagName);  tagName=XML.escape(tagName);  sb.append('<');  sb.append(tagName);  keys=jo.keys();  while (keys.hasNext()) {    key=keys.next();    if (!"tagName".equals(key) && !"childNodes".equals(key)) {      XML.noSpace(key);      value=jo.optString(key);      if (value != null) {        sb.append(' ');        sb.append(XML.escape(key));        sb.append('=');        sb.append('"');        sb.append(XML.escape(value));        sb.append('"');      }    }  }  ja=jo.optJSONArray("childNodes");  if (ja == null) {    sb.append('/');    sb.append('>');  } else {    sb.append('>');    length=ja.length();    for (i=0; i < length; i+=1) {      object=ja.get(i);      if (object != null) {        if (object instanceof String) {          sb.append(XML.escape(object.toString()));        } else         if (object instanceof JSONObject) {          sb.append(toString((JSONObject)object));        } else         if (object instanceof JSONArray) {          sb.append(toString((JSONArray)object));        } else {          sb.append(object.toString());        }      }    }    sb.append('<');    sb.append('/');    sb.append(tagName);    sb.append('>');  }  return sb.toString();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static boolean isNodeAfter(Node node1,Node node2){  if (node1 == node2 || isNodeTheSame(node1,node2))   return true;  boolean isNodeAfter=true;  Node parent1=getParentOfNode(node1);  Node parent2=getParentOfNode(node2);  if (parent1 == parent2 || isNodeTheSame(parent1,parent2)) {    if (null != parent1)     isNodeAfter=isNodeAfterSibling(parent1,node1,node2); else {    }  } else {    int nParents1=2, nParents2=2;    while (parent1 != null) {      nParents1++;      parent1=getParentOfNode(parent1);    }    while (parent2 != null) {      nParents2++;      parent2=getParentOfNode(parent2);    }    Node startNode1=node1, startNode2=node2;    if (nParents1 < nParents2) {      int adjust=nParents2 - nParents1;      for (int i=0; i < adjust; i++) {        startNode2=getParentOfNode(startNode2);      }    } else     if (nParents1 > nParents2) {      int adjust=nParents1 - nParents2;      for (int i=0; i < adjust; i++) {        startNode1=getParentOfNode(startNode1);      }    }    Node prevChild1=null, prevChild2=null;    while (null != startNode1) {      if (startNode1 == startNode2 || isNodeTheSame(startNode1,startNode2)) {        if (null == prevChild1) {          isNodeAfter=(nParents1 < nParents2) ? true : false;          break;        } else {          isNodeAfter=isNodeAfterSibling(startNode1,prevChild1,prevChild2);          break;        }      }      prevChild1=startNode1;      startNode1=getParentOfNode(startNode1);      prevChild2=startNode2;      startNode2=getParentOfNode(startNode2);    }  }  return isNodeAfter;}  }
class C{  public RelativeColor(Color base,Color target,Object actual){  this(base,target,actual,null);}  }
class C{  public static void forceSevereAlertProcessing(){  ForceSevereAlertProcessing.set(Boolean.TRUE);}  }
class C{  public static void deleteLocalCodeNodeComment(final SQLProvider provider,final INaviCodeNode codeNode,final Integer commentId,final Integer userId) throws CouldntDeleteException {  Preconditions.checkNotNull(provider,"IE02473: provider argument can not be null");  Preconditions.checkNotNull(codeNode,"IE02474: codeNode argument can not be null");  Preconditions.checkNotNull(commentId,"IE02475: comment argument can not be null");  Preconditions.checkNotNull(userId,"IE02476: userId argument can not be null");  final String function=" { ? = call delete_local_code_node_comment(?, ?, ?, ?) } ";  try {    final CallableStatement deleteCommentStatement=provider.getConnection().getConnection().prepareCall(function);    try {      deleteCommentStatement.registerOutParameter(1,Types.INTEGER);      deleteCommentStatement.setInt(2,codeNode.getParentFunction().getModule().getConfiguration().getId());      deleteCommentStatement.setInt(3,codeNode.getId());      deleteCommentStatement.setInt(4,commentId);      deleteCommentStatement.setInt(5,userId);      deleteCommentStatement.execute();      deleteCommentStatement.getInt(1);      if (deleteCommentStatement.wasNull()) {        throw new IllegalArgumentException("Error: the comment id returned from the database was null");      }    } catch (    final MaybeNullException exception) {      throw new CouldntDeleteException(exception);    } finally {      deleteCommentStatement.close();    }  } catch (  final SQLException exception) {    throw new CouldntDeleteException(exception);  }}  }
class C{  public String prepareIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_PREPARE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  MDocType dt=MDocType.get(getCtx(),getC_DocType_ID());  if (!MPeriod.isOpen(getCtx(),getDateAcct(),dt.getDocBaseType(),getAD_Org_ID())) {    m_processMsg="@PeriodClosed@";    return DocAction.STATUS_Invalid;  }  MJournal[] journals=getJournals(false);  if (journals.length == 0) {    m_processMsg="@NoLines@";    return DocAction.STATUS_Invalid;  }  BigDecimal TotalDr=Env.ZERO;  BigDecimal TotalCr=Env.ZERO;  for (int i=0; i < journals.length; i++) {    MJournal journal=journals[i];    if (!journal.isActive())     continue;    if (DOCSTATUS_Closed.equals(journal.getDocStatus()) || DOCSTATUS_Voided.equals(journal.getDocStatus()) || DOCSTATUS_Reversed.equals(journal.getDocStatus())|| DOCSTATUS_Completed.equals(journal.getDocStatus()))     ; else {      String status=journal.prepareIt();      if (!DocAction.STATUS_InProgress.equals(status)) {        journal.setDocStatus(status);        journal.saveEx();        m_processMsg=journal.getProcessMsg();        return status;      }      journal.setDocStatus(DOCSTATUS_InProgress);      journal.saveEx();    }    TotalDr=TotalDr.add(journal.getTotalDr());    TotalCr=TotalCr.add(journal.getTotalCr());  }  setTotalDr(TotalDr);  setTotalCr(TotalCr);  if (Env.ZERO.compareTo(getControlAmt()) != 0 && getControlAmt().compareTo(getTotalDr()) != 0) {    m_processMsg="@ControlAmtError@";    return DocAction.STATUS_Invalid;  }  for (int i=0; i < journals.length; i++) {    MJournal journal=journals[i];    MJournalLine[] lines=journal.getLines(true);    if (journal.getCurrencyRate() != null && journal.getCurrencyRate().compareTo(Env.ZERO) != 0) {      for (int j=0; j < lines.length; j++) {        MJournalLine line=lines[j];        line.setCurrencyRate(journal.getCurrencyRate());        line.saveEx();      }    }    if (journal.getC_ConversionType_ID() > 0) {      for (int j=0; j < lines.length; j++) {        MJournalLine line=lines[j];        line.setC_ConversionType_ID(journal.getC_ConversionType_ID());        line.saveEx();      }    }  }  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_PREPARE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  m_justPrepared=true;  return DocAction.STATUS_InProgress;}  }
class C{  public StaticComputer(StaticSiteRequest.PointRequest req,TransportNetwork network,TaskStatistics ts){  this.req=req;  this.network=network;  this.taskStatistics=ts;}  }
class C{  public void testUpdateParentRootPathMissing() throws Exception {  if (!propertiesSupported())   return;  Map<String,String> props=properties("owner","group","0555");  create(igfsSecondary,paths(DIR),null);  create(igfs,null,null);  igfs.update(DIR,props);  checkExist(igfs,DIR);  assertEquals(props,igfsSecondary.properties(DIR.toString()));  assertEquals(props,igfs.info(DIR).properties());}  }
class C{  public void addHeaders(List<Header> headers){  if (this.headers == null) {    this.headers=new ArrayList<HeaderItem>();  }  for (  Header header : headers) {    this.headers.add(new HeaderItem(header));  }}  }
class C{  public static SnapshotInfo readSnapshotInfo(StreamInput in) throws IOException {  SnapshotInfo snapshotInfo=new SnapshotInfo();  snapshotInfo.readFrom(in);  return snapshotInfo;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.LITERAL_ANNOTATION_ARGUMENT__LITERAL:    return getLiteral();}return super.eGet(featureID,resolve,coreType);}  }
class C{  protected void paintBackground(Graphics g){  super.paintBackground(g);  paintMatchedBracket(g);}  }
class C{  public StunMessageEvent(StunStack stunStack,RawMessage rawMessage,Message parsedMessage){  super(stunStack,rawMessage.getLocalAddress(),parsedMessage);  this.rawMessage=rawMessage;}  }
class C{  private int update(Counter<String> currentWts,int updateStep,MulticoreWrapper<ProcessorInput,ProcessorOutput> threadpool,OnlineUpdateRule<String> updater,Map<Integer,Sequence<IString>> nbestLists,boolean endOfEpoch,ParallelCorpus localTmTrainingData,List<Sequence<IString>> prefixDecodingOutputs){  Objects.requireNonNull(threadpool);  Objects.requireNonNull(currentWts);  Objects.requireNonNull(updater);  while (threadpool.peek()) {    final ProcessorOutput result=threadpool.poll();    boolean isEndOfEpoch=endOfEpoch && !threadpool.peek();    logger.info("Update {} gradient cardinality: {}",updateStep,result.gradient.keySet().size());    updater.update(currentWts,result.gradient,updateStep,isEndOfEpoch);    logger.info("Update {} with gradient from input step {} (diff: {})",updateStep,result.inputId,result.inputId - updateStep);    logger.info("Update {} approximate L2 ||w'-w|| {}",updateStep,Counters.L2Norm(result.gradient));    logger.info("Update {} cardinality: {}",updateStep,currentWts.keySet().size());    ++updateStep;    if (doParameterAveraging) {      wtsAccumulator.addAll(currentWts);    }    if (nbestLists != null || createPseudoReferences || localTmTrainingData != null) {      for (int i=0; i < result.translationIds.length; ++i) {        int sourceId=result.translationIds[i];        if (createPseudoReferences && nbestListWriter != null) {          IOTools.writeNbest(result.nbestLists.get(i),sourceId,"moses",null,nbestListWriter);        }        if (nbestLists != null) {          assert !nbestLists.containsKey(sourceId);          if (result.nbestLists.get(i).size() > 0) {            Sequence<IString> bestHypothesis=result.nbestLists.get(i).get(0).translation;            nbestLists.put(sourceId,bestHypothesis);          } else {            nbestLists.put(sourceId,Sequences.emptySequence());          }        }        if (localTmTrainingData != null && result.wordAlignments != null && !result.wordAlignments.isEmpty()) {          SymmetricalWordAlignment alignment=result.wordAlignments.get(i);          if (alignment != null) {            localTmTrainingData.add(alignment.f().toString(),alignment.e().toString(),alignment.toString());          } else {            logger.error("No forced alignment for input {}",result.inputId);          }        }      }    }    if (prefixDecodingOutputs != null && result.prefixDecodingOutput != null) {      for (int i=0; i < result.prefixDecodingOutput.size(); ++i)       prefixDecodingOutputs.add(result.prefixDecodingOutput.get(i).translation);    }  }  return updateStep;}  }
class C{  public static void updateAll(boolean[] states){  Iterator<WeakReference<ConditionalAction>> i=ALL_ACTIONS.iterator();  while (i.hasNext()) {    WeakReference<ConditionalAction> ref=i.next();    ConditionalAction c=ref.get();    if (c == null) {      i.remove();    } else {      c.update(states);    }  }}  }
class C{  private void skip(HttpServletRequest request,HttpServletResponse response) throws IOException {  PrintWriter out=response.getWriter();  String label=request.getParameter("skip");  Monitor mon=removeMon(label,null,DEFAULT_UNITS);  if (mon == null) {    out.println(ERROR + ": skip requires that an existing label is passed in.  For example: curl http://localhost:8080/jamon/Mon?skip=mylabel");  } else {    mon.skip();    out.println(OK + ": skip successfully called on - " + mon);  }}  }
class C{  public void resetFromCheckpoint() throws IOException {  output.restart();  exchanger.reinitializeContacts(this);  evaluator.reinitializeContacts(this);}  }
class C{  public void clearSelectedNode(){  this.selectNodeIndex=-1;}  }
class C{  protected Document createConfigurationDocument(AVList params){  Document doc=super.createConfigurationDocument(params);  if (doc == null || doc.getDocumentElement() == null)   return doc;  DataConfigurationUtils.createWMSLayerConfigElements(params,doc.getDocumentElement());  return doc;}  }
class C{  public void skip(int span){  add(new Label(""),span);}  }
class C{  public void service(Mail mail) throws MessagingException {  recipientRewriteTable.service(mail);  if (!mail.getState().equals(Mail.GHOST)) {    sieveMailet.service(mail);  }}  }
class C{  public static final double[] minusEquals(final double[] v1,final double d){  for (int i=0; i < v1.length; i++) {    v1[i]-=d;  }  return v1;}  }
class C{  @Override public void keyReleased(KeyEvent e){  char[] password1=null;  char[] password2=null;  if (passwordField != null) {    password1=passwordField.getPassword();  }  if (repeatPasswordField != null) {    password2=repeatPasswordField.getPassword();  }  boolean tickLabelVisible=false;  if (password1 != null && password2 != null) {    if (Arrays.equals(password1,password2)) {      tickLabelVisible=true;    }  }  tickLabel.setVisible(tickLabelVisible);  clearMessages();  for (int i=0; i < password1.length; i++) {    password1[i]=0;  }  for (int i=0; i < password2.length; i++) {    password2[i]=0;  }}  }
class C{  public String toString(){  return "[Digest Output Stream] " + digest.toString();}  }
class C{  boolean isLoop(Edge e,Map<Block,Block> idom){  return e.isBackedge() && dominates(e.to,e.from,idom);}  }
class C{  public Minute(int minute,int hour,int day,int month,int year){  this(minute,new Hour(hour,new Day(day,month,year)));}  }
class C{  public void run(){  devAudio.play();  if (DEBUG) {    System.out.println("AudioPlayer mixing loop.");  }  while (true) {    try {      Thread.sleep(5000);    } catch (    Exception e) {      break;    }  }  if (DEBUG) {    System.out.println("AudioPlayer exited.");  }}  }
class C{  public PolicyMappingsExtension(List<CertificatePolicyMap> map) throws IOException {  this.maps=map;  this.extensionId=PKIXExtensions.PolicyMappings_Id;  this.critical=false;  encodeThis();}  }
class C{  @Override public void onBackPressed(){  if (signupContainer.getVisibility() == View.VISIBLE && config.isCustomLoginEnabled()) {    signupContainer.setVisibility(View.GONE);    signinContainer.setVisibility(View.VISIBLE);  } else {    finish();  }}  }
class C{  public static boolean isDate(int displayType){  if (displayType == Date || displayType == DateTime || displayType == Time)   return true;  return false;}  }
class C{  @Override public void connectionStateChanged(State state){  if (state.equals(State.CONNECTED)) {    log.info("Connection reconnected. reloading the trust manager " + defaultViPRTrustManager);    loadTrustManager();  }}  }
class C{  public String toString(){  return getName();}  }
class C{  public int size(){  return 3;}  }
class C{  static FileSystem create() throws IOException {  FileSystemProvider provider=new PassThroughProvider();  Map<String,?> env=Collections.emptyMap();  URI uri=URI.create("pass:///");  return provider.newFileSystem(uri,env);}  }
class C{  private TungstenProperties runScript(String cmd) throws ReplicatorException {  return runScript(cmd,null);}  }
class C{  public String detectionPerAttributeTipText(){  return "Generates Outlier/ExtremeValue attribute pair for each numeric " + "attribute, not just a single pair for all numeric attributes together.";}  }
class C{  boolean isSameFamily(HTMLFont font){  return ((family != null) && (font.getFamily() != null) && (family.equals(font.getFamily())));}  }
class C{  public Address prepareAddress(){  return null;}  }
class C{  public boolean hasEndTime(){  return super.hasAttribute(END_TIME);}  }
class C{  public CheckboxTree(TreeNode root){  super(root);  initialize();}  }
class C{  public void start(@NonNull Context context,@NonNull Fragment fragment){  start(context,fragment,REQUEST_CROP);}  }
class C{  public RemoteStub exportObject(Remote impl,Object data) throws RemoteException {  forceStubUse=true;  return (RemoteStub)exportObject(impl,data,false);}  }
class C{  public HttpHeaders headers(final String url,final Object... urlVariables){  return getRestTemplate().headForHeaders(url,urlVariables);}  }
class C{  @Override public Solution newSolution(){  Solution solution=new Solution(getNumberOfVariables(),getNumberOfObjectives());  for (int i=0; i < getNumberOfVariables(); i++) {    solution.setVariable(i,new RealVariable(0.0,1.0));  }  return solution;}  }
class C{  public void deleteDocumentoVital(String id){  String qual=new StringBuffer().append(" WHERE ").append(DBUtils.generateEQTokenField(CAMPO_ID,id)).toString();  deleteVO(qual,TABLE_NAME);}  }
class C{  public boolean canInternalFrame(){  return canInternalFrame;}  }
class C{  private void validateTags(TechnicalProduct techProduct,String[] locales,String[] tags){  List<TechnicalProductTag> result=techProduct.getTags();  assertEquals(locales.length,result.size());  for (int i=0; i < locales.length; i++) {    boolean isInList=isTagInList(result,locales[i],tags[i]);    assertTrue("Expected tag not found",isInList);  }}  }
class C{  private Throwable cause(final Object[] args){  Throwable t=null;  if (args != null) {    for (    final Object arg : args) {      if (arg instanceof Throwable) {        t=(Throwable)arg;        break;      }    }  }  return t;}  }
class C{  private void submitXforms(DataInputStream dis,DataOutputStream dos,String serializerKey) throws Exception {  XformDataUploadManager.submitXforms(dis,new java.util.Date().toString(),serializerKey);  try {    dos.writeByte(STATUS_SUCCESS);  } catch (  Exception e) {    log.error(e.getMessage(),e);    dos.writeByte(STATUS_FAILURE);  }}  }
class C{  public void goToNextColor(){  mColorIndex=(mColorIndex + 1) % (mColors.length);}  }
class C{  public static ApplicationXmlVersion valueOf(DocType theDocType) throws NullPointerException {  return valueOf(theDocType.getPublicID());}  }
class C{  private void endMyTurn(){  Entity next=clientgui.getClient().getGame().getNextEntity(clientgui.getClient().getGame().getTurnIndex());  if ((IGame.Phase.PHASE_PHYSICAL == clientgui.getClient().getGame().getPhase()) && (null != next) && (null != ce())&& (next.getOwnerId() != ce().getOwnerId())) {    clientgui.setDisplayVisible(false);  }  cen=Entity.NONE;  target(null);  clientgui.getBoardView().select(null);  clientgui.getBoardView().highlight(null);  clientgui.getBoardView().cursor(null);  clientgui.bv.clearMovementData();  clientgui.setSelectedEntityNum(Entity.NONE);  disableButtons();}  }
class C{  void clear(){  Arrays.fill(entries,0,size,null);  size=0;}  }
class C{  public Dimension preferredLayoutSize(Container target){  Dimension size;synchronized (this) {    checkContainer(target);    checkRequests();    size=new Dimension(xTotal.preferred,yTotal.preferred);  }  Insets insets=target.getInsets();  size.width=(int)Math.min((long)size.width + (long)insets.left + (long)insets.right,Integer.MAX_VALUE);  size.height=(int)Math.min((long)size.height + (long)insets.top + (long)insets.bottom,Integer.MAX_VALUE);  return size;}  }
class C{  public BType addBuilder(int index,MType message){  ensureMutableMessageList();  ensureBuilders();  SingleFieldBuilder<MType,BType,IType> builder=new SingleFieldBuilder<MType,BType,IType>(message,this,isClean);  messages.add(index,null);  builders.add(index,builder);  onChanged();  incrementModCounts();  return builder.getBuilder();}  }
class C{  public boolean isBeforeFirst() throws SQLException {  checkState();  return rs.isBeforeFirst();}  }
class C{  public int totalSizeInBits(){  if (converted) {    return 24 + this.countC * 3 + this.countS * blocksize_S + this.countE * blocksize_E + this.countB * blocksize_B + this.countL * blocksize_L + this.countT * 8;  }  converted=true;  if (this.blocksize_B > 0) {    this.blocksize_B=(int)Math.ceil(Math.log(blocksize_B + 1) / Math.log(2.));  } else   if (this.countB > 0) {    this.blocksize_B=1;  }  if (this.blocksize_E > 0) {    this.blocksize_E=(int)Math.ceil(Math.log(blocksize_E + 1) / Math.log(2.));  } else   if (this.countE > 0) {    this.blocksize_E=1;  }  if (this.blocksize_L > 0) {    this.blocksize_L=(int)Math.ceil(Math.log(blocksize_L + 1) / Math.log(2.));  } else   if (this.countL > 0) {    this.blocksize_L=1;  }  if (this.blocksize_S > 0) {    this.blocksize_S=(int)Math.ceil(Math.log(blocksize_S + 1) / Math.log(2.));  } else   if (this.countS > 0) {    this.blocksize_S=1;  }  return 24 + this.countC * 3 + this.countS * blocksize_S + this.countE * blocksize_E + this.countB * blocksize_B + this.countL * blocksize_L + this.countT * 8;}  }
class C{  public static void main(String args[]){  int address=0x01;  String device="/dev/ttyUSB0";  if (args.length > 0) {    device=args[0];  }  if (args.length > 1) {    address=Integer.parseInt(args[1],16);  }  KLHandler hdlr=new KLHandler(device);  hdlr.init5Baud(address);  while (hdlr.getProtStat() != ProtStatus.CONNECTING && hdlr.getProtStat() != ProtStatus.OFFLINE) {    try {      Thread.sleep(1000);    } catch (    Exception e) {    }  }  hdlr.close();}  }
class C{  public void initialize(){  if (!isBegin) {    InstanceTime instance=new InstanceTime(this,TimedElement.INDEFINITE,false);    owner.addInstanceTime(instance,isBegin);  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:34.567 -0500",hash_original_method="A35A1609E030A9DBE1C939F4F901D824",hash_generated_method="FB5D0521166E9471DD89C7CA421592ED") static boolean shiftRight(int[] result,int resultLen,int[] source,int intCount,int count){  int i;  boolean allZero=true;  for (i=0; i < intCount; i++)   allZero&=source[i] == 0;  if (count == 0) {    System.arraycopy(source,intCount,result,0,resultLen);    i=resultLen;  } else {    int leftShiftCount=32 - count;    allZero&=(source[i] << leftShiftCount) == 0;    for (i=0; i < resultLen - 1; i++) {      result[i]=(source[i + intCount] >>> count) | (source[i + intCount + 1] << leftShiftCount);    }    result[i]=(source[i + intCount] >>> count);    i++;  }  return allZero;}  }
class C{  public VNXeCommandResult detachSnap(String snapId){  _logger.info("attaching snap:",snapId);  SnapRequests req=new SnapRequests(_khClient);  return req.detachSnapSync(snapId);}  }
class C{  protected BindingPropertyImpl(){  super();}  }
class C{  private void checkSortMissingDefault(final String field,final String negative,final String positive){  assertU(adoc("id","0"));  assertU(adoc("id","1",field,negative));  assertU(adoc("id","2",field,positive));  assertU(commit());  assertQ(req("q","*:*","sort",field + " asc"),"//result/doc[1]/str[@name='id'][.=1]","//result/doc[2]/str[@name='id'][.=0]","//result/doc[3]/str[@name='id'][.=2]");  assertQ(req("q","*:*","sort",field + " desc"),"//result/doc[1]/str[@name='id'][.=2]","//result/doc[2]/str[@name='id'][.=0]","//result/doc[3]/str[@name='id'][.=1]");}  }
class C{  public void checkTimesForStop(final TransitRouteStop stop){  TreeMap<Double,Double> test=this.travelTimes.get(stop);  for (  Double e : test.descendingKeySet())   System.out.println("At time " + Time.writeTime(e) + " travel time is "+ test.get(e));}  }
class C{  public Box(){  this(null);}  }
class C{  public Universe asRootUserContext(){  AppContext rootctx=ServiceUtils.getInstance().getRootUserContext(getContext());  Project projectRoot=((ProjectDAO)DAOFactory.getDAOFactory().getDAO(Project.class)).read(rootctx,getProject().getId()).get();  return new Universe(rootctx,projectRoot);}  }
class C{  private int emitConflicts(){  int conflicts=0;  StringBuilder builder=new StringBuilder();  for (  Map.Entry<String,Dependency> directDependency : directDependencies.entrySet()) {    String coordinate=directDependency.getKey();    Set<Map.Entry<IvyNodeElement,Set<String>>> entrySet=directDependency.getValue().conflictLocations.entrySet();    if (entrySet.isEmpty()) {      continue;    }    ++conflicts;    Map.Entry<IvyNodeElement,Set<String>> first=entrySet.iterator().next();    int notPrinted=entrySet.size() - 1;    builder.append("VERSION CONFLICT: transitive dependency in module(s) ");    boolean isFirst=true;    for (    String moduleName : first.getValue()) {      if (isFirst) {        isFirst=false;      } else {        builder.append(", ");      }      builder.append(moduleName);    }    builder.append(":\n");    IvyNodeElement element=first.getKey();    builder.append('/').append(element.getOrganization()).append('/').append(element.getName()).append('=').append(element.getRevision()).append('\n');    emitConflict(builder,coordinate,first.getKey(),1);    if (notPrinted > 0) {      builder.append("... and ").append(notPrinted).append(" more\n");    }    builder.append("\n");  }  if (builder.length() > 0) {    log(builder.toString());  }  return conflicts;}  }
class C{  private void parseValue(int curLen){  dataPos+=curLen;}  }
class C{  public HttpMessageConverterView(HttpMessageConverter<?> converter){  Assert.notNull(converter,"'converter' is required.");  this.converter=converter;  this.mediaTypes=converter.getWritableMediaTypes();}  }
class C{  public MemoryPageFile(int pageSize){  super(pageSize);  this.file=new TIntObjectHashMap<>();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Boolean isSuspended(){  return suspended;}  }
class C{  public String paramString(){  String typeStr;switch (id) {case ITEM_STATE_CHANGED:    typeStr="ITEM_STATE_CHANGED";  break;default :typeStr="unknown type";}String stateStr;switch (stateChange) {case SELECTED:stateStr="SELECTED";break;case DESELECTED:stateStr="DESELECTED";break;default :stateStr="unknown type";}return typeStr + ",item=" + item+ ",stateChange="+ stateStr;}  }
class C{  public boolean isRoot(){  return getParent() == null;}  }
class C{  void doOutsideScores(Tree<StateSet> tree,boolean unaryAbove,double[][][] spanScores){  if (grammar.isLogarithmMode() || lexicon.isLogarithmMode())   throw new Error("Grammar in logarithm mode!  Cannot do inside scores!");  if (tree.isLeaf())   return;  List<Tree<StateSet>> children=tree.getChildren();  StateSet parent=tree.getLabel();  short pState=parent.getState();  int nParentStates=parent.numSubStates();  if (tree.isPreTerminal()) {  } else {    double[] parentScores=parent.getOScores();    if (spanScores != null && !unaryAbove) {      for (int i=0; i < nParentStates; i++) {        parentScores[i]*=spanScores[parent.from][parent.to][stateClass[pState]];      }    }switch (children.size()) {case 0:      break;case 1:    StateSet child=children.get(0).getLabel();  short cState=child.getState();int nChildStates=child.numSubStates();double[][] uscores=grammar.getUnaryScore(pState,cState);double[] oScores=new double[nChildStates];for (int j=0; j < nChildStates; j++) {if (uscores[j] != null) {double childScore=0;for (int i=0; i < nParentStates; i++) {double pS=parentScores[i];if (pS == 0) continue;double rS=uscores[j][i];if (rS == 0) continue;childScore+=pS * rS;}oScores[j]=childScore;}}child.setOScores(oScores);child.scaleOScores(parent.getOScale());unaryAbove=true;break;case 2:StateSet leftChild=children.get(0).getLabel();StateSet rightChild=children.get(1).getLabel();int nLeftChildStates=leftChild.numSubStates();int nRightChildStates=rightChild.numSubStates();short lState=leftChild.getState();short rState=rightChild.getState();double[][][] bscores=grammar.getBinaryScore(pState,lState,rState);double[] lOScores=new double[nLeftChildStates];double[] rOScores=new double[nRightChildStates];for (int j=0; j < nLeftChildStates; j++) {double lcS=leftChild.getIScore(j);double leftScore=0;for (int k=0; k < nRightChildStates; k++) {double rcS=rightChild.getIScore(k);if (bscores[j][k] != null) {for (int i=0; i < nParentStates; i++) {double pS=parentScores[i];if (pS == 0) continue;double rS=bscores[j][k][i];if (rS == 0) continue;leftScore+=pS * rS * rcS;rOScores[k]+=pS * rS * lcS;}}lOScores[j]=leftScore;}}leftChild.setOScores(lOScores);leftChild.scaleOScores(parent.getOScale() + rightChild.getIScale());rightChild.setOScores(rOScores);rightChild.scaleOScores(parent.getOScale() + leftChild.getIScale());unaryAbove=false;break;default :throw new Error("Malformed tree: more than two children");}for (Tree<StateSet> child : children) {doOutsideScores(child,unaryAbove,spanScores);}}}  }
class C{  protected void emit_Disjunction_VerticalLineKeyword_1_1_0_a(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  public void addObservations(byte var1[],byte var2[],byte cond[],boolean[] valid){  int rows=var1.length;  for (int r=0; r < rows; r++) {    if (valid[r]) {      firstSecondCondCount[var1[r]][var2[r]][cond[r]]++;      firstCondCount[var1[r]][cond[r]]++;      secondCondCount[var2[r]][cond[r]]++;      condCount[cond[r]]++;      observations++;    }  }}  }
class C{  protected String parseTacticalGraphicsSymCode(String symCode){  StringBuilder sb=new StringBuilder();  String s=symCode.substring(0,1);  if (s != null && s.equalsIgnoreCase(SymbologyConstants.SCHEME_TACTICAL_GRAPHICS))   this.setScheme(s); else   sb.append(sb.length() > 0 ? ", " : "").append(Logging.getMessage("term.scheme"));  s=symCode.substring(1,2);  if (SymbologyConstants.STANDARD_IDENTITY_ALL.contains(s.toUpperCase()))   this.setStandardIdentity(s); else   sb.append(sb.length() > 0 ? ", " : "").append(Logging.getMessage("term.standardIdentity"));  s=symCode.substring(2,3);  if (SymbologyConstants.CATEGORY_ALL_TACTICAL_GRAPHICS.contains(s.toUpperCase()))   this.setCategory(s); else   sb.append(sb.length() > 0 ? ", " : "").append(Logging.getMessage("term.category"));  s=symCode.substring(3,4);  if (SymbologyConstants.STATUS_ALL_TACTICAL_GRAPHICS_METOC.contains(s.toUpperCase()))   this.setStatus(s); else   sb.append(sb.length() > 0 ? ", " : "").append(Logging.getMessage("term.status"));  s=symCode.substring(4,10);  if (!"------".equals(s))   this.setFunctionId(s);  s=symCode.substring(11,12);  if (SymbologyConstants.ECHELON_ALL.contains(s.toUpperCase()))   this.setEchelon(s); else   if (!UNUSED_POSITION_CODE.equals(s))   sb.append(sb.length() > 0 ? ", " : "").append(Logging.getMessage("term.echelon"));  s=symCode.substring(12,14);  if (!"--".equals(s))   this.setCountryCode(s);  s=symCode.substring(14,15);  if (SymbologyConstants.ORDER_OF_BATTLE_ALL_TACTICAL_GRAPHICS.contains(s.toUpperCase()))   this.setOrderOfBattle(s); else   if (!"-".equals(s))   sb.append(sb.length() > 0 ? ", " : "").append(Logging.getMessage("term.orderOfBattle"));  return sb.length() > 0 ? Logging.getMessage("Symbology.SymbolCodeFieldsUnrecognized",sb.toString(),symCode) : null;}  }
class C{  public void bestState(long state,Model bestModel){}  }
class C{  @Override public void mouseClicked(MouseEvent e){}  }
class C{  private int findInterestArea(int AD_Client_ID,String interestArea){  if (m_interests == null)   m_interests=MInterestArea.getAll(getCtx());  for (int i=0; i < m_interests.length; i++) {    if (AD_Client_ID == m_interests[i].getAD_Client_ID() && interestArea.equalsIgnoreCase(m_interests[i].getValue()))     return m_interests[i].getR_InterestArea_ID();  }  return 0;}  }
class C{  @Override public void stopPlaying(){  if (mController != null) {    mController.stopPlaying();  }  mCallbacks.onStop();  pushControllerState();  reportPlayingChanged();}  }
class C{  public static void enable(CComboBox comboBox,boolean strictMode){  comboBox.setEditable(true);  AutoCompletion ac=new AutoCompletion(comboBox);  ac.setStrictMode(strictMode);}  }
class C{  public ISchedulingRule deleteRule(IResource resource){  return parent(resource);}  }
class C{  public void processCommandLineArgs(String[] args){  if (args.length > 0)   open(new File(args[0]),m_FileChooser.getReaderForFile(new File(args[0])));}  }
class C{  public void withAspectRatio(float x,float y){  mOptionBundle.putFloat(EXTRA_ASPECT_RATIO_X,x);  mOptionBundle.putFloat(EXTRA_ASPECT_RATIO_Y,y);}  }
class C{  public Graphics2DRenderer(){  panel=new XHTMLPanel();  panel.setInteractive(false);}  }
class C{  void run(String driver,String url,String user,String password) throws Exception {  Class.forName(driver);  conn=DriverManager.getConnection(url,user,password);  stat=conn.createStatement();  try {    stat.execute("DROP TABLE USERS");  } catch (  SQLException e) {  }  stat.execute("CREATE TABLE USERS(ID INT PRIMARY KEY, " + "NAME VARCHAR(255), PASSWORD VARCHAR(255))");  stat.execute("INSERT INTO USERS VALUES(1, 'admin', 'super')");  stat.execute("INSERT INTO USERS VALUES(2, 'guest', '123456')");  stat.execute("INSERT INTO USERS VALUES(3, 'test', 'abc')");  loginByNameInsecure();  if (url.startsWith("jdbc:h2:")) {    loginStoredProcedureInsecure();    limitRowAccess();  }  loginByNameSecure();  if (url.startsWith("jdbc:h2:")) {    stat.execute("SET ALLOW_LITERALS NONE");    stat.execute("SET ALLOW_LITERALS NUMBERS");    stat.execute("SET ALLOW_LITERALS ALL");  }  loginByIdInsecure();  loginByIdSecure();  try {    stat.execute("DROP TABLE ITEMS");  } catch (  SQLException e) {  }  stat.execute("CREATE TABLE ITEMS(ID INT PRIMARY KEY, " + "NAME VARCHAR(255), ACTIVE INT)");  stat.execute("INSERT INTO ITEMS VALUES(0, 'XBox', 0)");  stat.execute("INSERT INTO ITEMS VALUES(1, 'XBox 360', 1)");  stat.execute("INSERT INTO ITEMS VALUES(2, 'PlayStation 1', 0)");  stat.execute("INSERT INTO ITEMS VALUES(3, 'PlayStation 2', 1)");  stat.execute("INSERT INTO ITEMS VALUES(4, 'PlayStation 3', 1)");  listActiveItems();  if (url.startsWith("jdbc:h2:")) {    stat.execute("DROP CONSTANT IF EXISTS TYPE_INACTIVE");    stat.execute("DROP CONSTANT IF EXISTS TYPE_ACTIVE");    stat.execute("CREATE CONSTANT TYPE_INACTIVE VALUE 0");    stat.execute("CREATE CONSTANT TYPE_ACTIVE VALUE 1");    listActiveItemsUsingConstants();  }  listItemsSortedInsecure();  listItemsSortedSecure();  if (url.startsWith("jdbc:h2:")) {    listItemsSortedSecureParam();    storePasswordHashWithSalt();  }  conn.close();}  }
class C{  public void visitAttribute(Attribute attr){  if (mv != null) {    mv.visitAttribute(attr);  }}  }
class C{  public void onOfferNeeded(long sessionId){  send(new RTCNeedOffer(deviceId,sessionId));}  }
class C{  public String sortTypeTipText(){  return "The type of sorting to use.";}  }
class C{  private static String padString(String s,Align alignment,int minLength){  if (alignment == Align.Left) {    return padRight(s,minLength);  } else   if (alignment == Align.Right) {    return padLeft(s,minLength);  } else {    throw new IndexOutOfBoundsException("Invalid alignment");  }}  }
class C{  public static boolean matchRule(Rule rule){  Value value=rule.value;  if (matchApilevelMin(value.apilevelMin) && matchApilevelMax(value.apilevelMax) && matchAppversionMin(value.appversionMin)&& matchAppversionMax(value.appversionMax)&& matchDateMin(value.dateMin)&& matchDateMax(value.dateMax)&& matchBuildType(value.buildtype)&& matchDevice(value.device))   return true; else   return false;}  }
class C{  public void check(final int api){  if (api == Opcodes.ASM4) {    if (visibleTypeAnnotations != null && visibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }    if (invisibleTypeAnnotations != null && invisibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }    int n=tryCatchBlocks == null ? 0 : tryCatchBlocks.size();    for (int i=0; i < n; ++i) {      TryCatchBlockNode tcb=tryCatchBlocks.get(i);      if (tcb.visibleTypeAnnotations != null && tcb.visibleTypeAnnotations.size() > 0) {        throw new RuntimeException();      }      if (tcb.invisibleTypeAnnotations != null && tcb.invisibleTypeAnnotations.size() > 0) {        throw new RuntimeException();      }    }    for (int i=0; i < instructions.size(); ++i) {      AbstractInsnNode insn=instructions.get(i);      if (insn.visibleTypeAnnotations != null && insn.visibleTypeAnnotations.size() > 0) {        throw new RuntimeException();      }      if (insn.invisibleTypeAnnotations != null && insn.invisibleTypeAnnotations.size() > 0) {        throw new RuntimeException();      }      if (insn instanceof MethodInsnNode) {        boolean itf=((MethodInsnNode)insn).itf;        if (itf != (insn.opcode == Opcodes.INVOKEINTERFACE)) {          throw new RuntimeException();        }      }    }    if (visibleLocalVariableAnnotations != null && visibleLocalVariableAnnotations.size() > 0) {      throw new RuntimeException();    }    if (invisibleLocalVariableAnnotations != null && invisibleLocalVariableAnnotations.size() > 0) {      throw new RuntimeException();    }  }}  }
class C{  protected ConversationParser(final SentenceImplementation sentence){  String text=sentence.getOriginalText();  if (text == null) {    text="";  } else   if (text.startsWith("_")) {    text="";  }  final String textWithoutPunctation=detectSentenceType(text,sentence);  tokenizer=new StringTokenizer(textWithoutPunctation);}  }
class C{  public <T>T mapTo(final String path,final Class<T> mappingClass){  return JBBPMapper.map(this,path,mappingClass);}  }
class C{  private static boolean isAssignable(final Type type,final GenericArrayType toGenericArrayType,final Map<TypeVariable<?>,Type> typeVarAssigns){  if (type == null) {    return true;  }  if (toGenericArrayType == null) {    return false;  }  if (toGenericArrayType.equals(type)) {    return true;  }  final Type toComponentType=toGenericArrayType.getGenericComponentType();  if (type instanceof Class<?>) {    final Class<?> cls=(Class<?>)type;    return cls.isArray() && isAssignable(cls.getComponentType(),toComponentType,typeVarAssigns);  }  if (type instanceof GenericArrayType) {    return isAssignable(((GenericArrayType)type).getGenericComponentType(),toComponentType,typeVarAssigns);  }  if (type instanceof WildcardType) {    for (    final Type bound : getImplicitUpperBounds((WildcardType)type)) {      if (isAssignable(bound,toGenericArrayType)) {        return true;      }    }    return false;  }  if (type instanceof TypeVariable<?>) {    for (    final Type bound : getImplicitBounds((TypeVariable<?>)type)) {      if (isAssignable(bound,toGenericArrayType)) {        return true;      }    }    return false;  }  if (type instanceof ParameterizedType) {    return false;  }  throw new IllegalStateException("found an unhandled type: " + type);}  }
class C{  public void test_ticket_1007_string2() throws Exception {  new TestHelper("ticket-1007-string2","ticket-1007-string2.rq","ticket-1007-custom.trig","ticket-1007-string.srx",false).runTest();}  }
class C{  public JCStatement Assignment(Symbol v,JCExpression rhs){  return Exec(Assign(Ident(v),rhs).setType(v.type));}  }
class C{  private Map<Installment,List<Receipt>> consolidateTuplesInstallmentWise(final List<InstallmentReceiptTuple> tuples){  final Map<Installment,List<Receipt>> consolidated=new HashMap<Installment,List<Receipt>>();  for (  final InstallmentReceiptTuple t : tuples) {    List<Receipt> receiptsForInstallment=consolidated.get(t.installment);    if (receiptsForInstallment == null) {      receiptsForInstallment=new ArrayList<Receipt>();      consolidated.put(t.installment,receiptsForInstallment);    }    if (!receiptsForInstallment.contains(t.receipt))     receiptsForInstallment.add(t.receipt);  }  LOGGER.info("consolidateTuplesInstallmentWise() returned: " + consolidated);  return consolidated;}  }
class C{  String asString(){  if (mParent == null) {    return "anyPolicy  ROOT\n";  } else {    StringBuilder sb=new StringBuilder();    for (int i=0, n=getDepth(); i < n; i++) {      sb.append("  ");    }    sb.append(policyToString(getValidPolicy()));    sb.append("  CRIT: ");    sb.append(isCritical());    sb.append("  EP: ");    for (    String policy : getExpectedPolicies()) {      sb.append(policyToString(policy));      sb.append(" ");    }    sb.append(" (");    sb.append(getDepth());    sb.append(")\n");    return sb.toString();  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-17 12:44:27.187 -0400",hash_original_method="22DD6D11219C23D125AE29FC1331896B",hash_generated_method="53E5B217C7BAF31B412612C6A27C6C3C") @Override protected void onNewIntent(Intent intent){  super.onNewIntent(intent);  mFragments.noteStateNotSaved();}  }
class C{  public void removeListener(final IWindowManagerListener listener){  m_listeners.removeListener(listener);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.NUMERIC_LITERAL__VALUE:    return VALUE_EDEFAULT == null ? value != null : !VALUE_EDEFAULT.equals(value);}return super.eIsSet(featureID);}  }
class C{  public Address loadAddress(){  return new Address(loadArchitecturalWord());}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case MappingPackage.FAULT_SOURCE__PROPERTY:    if (resolve)     return getProperty();  return basicGetProperty();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void addHalfEdges(int i,int j){  DoubleEdgeListVertex vertex1=this.vertices.get(i);  DoubleEdgeListVertex vertex2=this.vertices.get(j);  this.addHalfEdges(vertex1,vertex2);}  }
class C{  public static boolean isDominated(Individual i1,Individual i2){  double[] f1=i1.getFitnessValues();  double[] f2=i2.getFitnessValues();  double[][] performances=new double[f1.length][2];  for (int p=0; p < performances.length; p++) {    performances[p][0]=f1[p];    performances[p][1]=f2[p];  }  boolean dominated=true;  for (int p=0; p < performances.length; p++) {    dominated&=(performances[p][1] >= performances[p][0]);  }  boolean oneActuallyBetter=false;  for (int p=0; p < performances.length; p++) {    oneActuallyBetter|=(performances[p][1] > performances[p][0]);  }  dominated&=oneActuallyBetter;  return dominated;}  }
class C{  public boolean isReport(){  return X_AD_Menu.ACTION_Report.equals(m_imageIndicator);}  }
class C{  private String readAttachment(ITopic topic,String url){  String path=HyperlinkUtils.toAttachmentPath(url);  if (path.startsWith("#"))   path=path.substring(1);  IFileEntry entry=findAttachmentEntry(path,topic.getOwnedWorkbook().getManifest());  if (entry != null) {    url=HyperlinkUtils.toAttachmentURL(entry.getPath());  }  return url;}  }
class C{  public static long generate(long hash,long value){  final long m=0xc6a4a7935bd1e995L;  final int r=47;  int length=8;  hash^=length * m;  long k=Long.reverseBytes(value);  k*=m;  k^=k >>> r;  k*=m;  hash^=k;  hash*=m;  hash^=hash >>> r;  hash*=m;  hash^=hash >>> r;  return hash;}  }
class C{  @Override protected void displayMainFrame(java.awt.Dimension d){  jmri.UserPreferencesManager p=jmri.InstanceManager.getDefault(jmri.UserPreferencesManager.class);  if (!p.isWindowPositionSaved(mainFrame.getWindowFrameRef())) {    mainFrame.setSize(new java.awt.Dimension(1024,600));    mainFrame.setPreferredSize(new java.awt.Dimension(1024,600));  }  mainFrame.setVisible(true);}  }
class C{  @Override public void check(Certificate cert,Collection<String> unresCritExts) throws CertPathValidatorException {  checkPolicy((X509Certificate)cert);  if (unresCritExts != null && !unresCritExts.isEmpty()) {    unresCritExts.remove(CertificatePolicies_Id.toString());    unresCritExts.remove(PolicyMappings_Id.toString());    unresCritExts.remove(PolicyConstraints_Id.toString());    unresCritExts.remove(InhibitAnyPolicy_Id.toString());  }}  }
class C{  public static boolean isXML11ValidNmtoken(String nmtoken){  int length=nmtoken.length();  if (length == 0)   return false;  for (int i=0; i < length; ++i) {    char ch=nmtoken.charAt(i);    if (!isXML11Name(ch)) {      if (++i < length && isXML11NameHighSurrogate(ch)) {        char ch2=nmtoken.charAt(i);        if (!XMLChar.isLowSurrogate(ch2) || !isXML11Name(XMLChar.supplemental(ch,ch2))) {          return false;        }      } else {        return false;      }    }  }  return true;}  }
class C{  public NodeProbe(String host) throws IOException {  this.host=host;  this.port=defaultPort;  connect();}  }
class C{  private static boolean isInVerticalTargetZone(float x,float y,float handleX,float handleYStart,float handleYEnd,float targetRadius){  return Math.abs(x - handleX) <= targetRadius && y > handleYStart && y < handleYEnd;}  }
class C{  public MappedClass add(Global global){  this.xmlClass.global=global.toXStream();  return this;}  }
class C{  public int calibratePointValue(int source){  if (source < -500) {    return 0;  }  if (source == 0) {    return colors[0];  }  if (displayUnits != dataUnits) {    source=(int)displayUnits.fromRadians(dataUnits.toRadians(source));  }  int assignment=(int)(((source / bandHeight) % (10 - 2 * (3 - adjust)) * (colors.length / (10 - 2 * (3 - adjust)))) + 6);  return colors[assignment];}  }
class C{  public boolean stopEditing(JTree tree){  if (editingComponent != null && cellEditor.stopCellEditing()) {    completeEditing(false,false,true);    return true;  }  return false;}  }
class C{  @Override public QueueSession createQueueSession(final boolean transacted,final int acknowledgeMode) throws JMSException {  if (ActiveMQRASessionFactoryImpl.trace) {    ActiveMQRALogger.LOGGER.trace("createQueueSession(" + transacted + ", "+ acknowledgeMode+ ")");  }  checkClosed();  if (type == ActiveMQRAConnectionFactory.TOPIC_CONNECTION || type == ActiveMQRAConnectionFactory.XA_TOPIC_CONNECTION) {    throw new IllegalStateException("Can not get a queue session from a topic connection");  }  return allocateConnection(transacted,acknowledgeMode,type);}  }
class C{  public ChallanInfo(final ReceiptHeader receiptHeader,final EgovCommon egovCommon,final ReceiptHeader receiptHeaderRefObj,final ChartOfAccountsHibernateDAO chartOfAccountsHibernateDAO,final PersistenceService persistenceService){  this.receiptHeader=receiptHeader;  if (receiptHeaderRefObj != null && receiptHeaderRefObj.getChallan() != null)   receipHeaderReferenceObj=receiptHeaderRefObj;  for (  final ReceiptDetail receiptDetail : receiptHeader.getReceiptDetails()) {    accountDetails.add(new ReceiptAccountInfoImpl(receiptDetail,chartOfAccountsHibernateDAO,persistenceService));    for (    final AccountPayeeDetail accountPayeeDetail : receiptDetail.getAccountPayeeDetails())     accountPayeeDetails.add(new AccountPayeeDetailInfo(accountPayeeDetail,egovCommon));  }  for (  final InstrumentHeader instrumentHeader : receiptHeader.getReceiptInstrument())   instrumentDetails.add(new ReceiptInstrumentInfoImpl(instrumentHeader));}  }
class C{  public void assignPersistenceId(long id){  persistenceId=id;}  }
class C{  public static SoapMessageImpl build(ClientId sender,ServiceId receiver,String userId,String queryId) throws Exception {  return build(false,sender,receiver,userId,queryId,null);}  }
class C{  public void processingInstruction(String target,String data) throws org.xml.sax.SAXException {  append(m_doc.createProcessingInstruction(target,data));}  }
class C{  private P byteArrayToPage(byte[] array){  try {    ByteArrayInputStream bais=new ByteArrayInputStream(array);    ObjectInputStream ois=new ObjectInputStream(bais);    int type=ois.readInt();    if (type == EMPTY_PAGE) {      return null;    } else     if (type == FILLED_PAGE) {      P page;      try {        page=pageclass.newInstance();        page.readExternal(ois);      } catch (      InstantiationException|IllegalAccessException|ClassNotFoundException e) {        throw new AbortException("Error instanciating an index page",e);      }      return page;    } else {      throw new IllegalArgumentException("Unknown type: " + type);    }  } catch (  IOException e) {    throw new AbortException("IO Error in page file",e);  }}  }
class C{  public long index(){  return index;}  }
class C{  public static void sort(Comparable[] a){  int n=a.length;  for (int i=0; i < n; i++) {    for (int j=i; j > 0 && less(a[j],a[j - 1]); j--) {      exch(a,j,j - 1);    }    assert isSorted(a,0,i);  }  assert isSorted(a);}  }
class C{  public synchronized boolean hurry(){  if (in == null || error) {    return false;  }  try {    readAhead(false);  } catch (  Exception e) {    return false;  }  if (error) {    return false;  }  return (state == STATE_DONE);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case StextPackage.INTERFACE_SCOPE__NAME:    setName(NAME_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public LineNumber lookupLineNumber(InstructionHandle handle){  return lineNumberMap.get(handle);}  }
class C{  protected final void SSE2_IFCMP(Operator op,Instruction s,Operand val1,Operand val2){  EMIT(CPOS(s,MIR_Compare.create(op,val1,val2)));  EMIT(s);}  }
class C{  public XObject execute(XPathContext xctxt,int currentNode) throws javax.xml.transform.TransformerException {  DTM dtm=xctxt.getDTM(currentNode);  if (dtm != null) {    int expType=dtm.getExpandedTypeID(currentNode);    return execute(xctxt,currentNode,dtm,expType);  }  return NodeTest.SCORE_NONE;}  }
class C{  XMenuWindow(XMenuPeer menuPeer){  if (menuPeer != null) {    this.menuPeer=menuPeer;    this.target=menuPeer.getContainer().target;    Vector targetItemVector=null;    targetItemVector=getMenuTargetItems();    reloadItems(targetItemVector);  }}  }
class C{  private boolean useDateFormatSymbols(){  return useDateFormatSymbols || locale == null;}  }
class C{  TXLockServiceImpl(String name){  InternalDistributedSystem sys=InternalDistributedSystem.getAnyInstance();  if (sys == null) {    throw new IllegalStateException(LocalizedStrings.TXLockServiceImpl_TXLOCKSERVICE_CANNOT_BE_CREATED_UNTIL_CONNECTED_TO_DISTRIBUTED_SYSTEM.toLocalizedString());  }  sys.getCancelCriterion().checkCancelInProgress(null);  this.system=sys;  this.recoveryLock=new StoppableReentrantReadWriteLock(sys.getCancelCriterion());  this.dlock=(DLockService)DLockService.create(name,sys,true,true,true);  this.dlock.setDLockRecoverGrantorMessageProcessor(new TXRecoverGrantorMessageProcessor());  this.dlock.setDLockLessorDepartureHandler(new TXLessorDepartureHandler());}  }
class C{  public ActiveMQRATopicPublisher(final TopicPublisher producer,final ActiveMQRASession session){  super(producer,session);  if (ActiveMQRATopicPublisher.trace) {    ActiveMQRALogger.LOGGER.trace("constructor(" + producer + ", "+ session+ ")");  }}  }
class C{  public LargeObjectScanner(LargeObjectArray<T> array) throws IOException {  this.array=array;  this.cursorId=array.cursorAllocate();}  }
class C{  public void close() throws IOException {  closedByReader=true;synchronized (this) {    in=-1;  }}  }
class C{  public void createPictScenario02() throws Exception {  long setupStartTime=DateTimeHandling.calculateMillis("2013-06-02 20:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(setupStartTime);  String supplierAdminId="Pict02Supplier";  VOOrganization supplier=orgSetup.createOrganization(basicSetup.getPlatformOperatorUserKey(),supplierAdminId,"Pict02SupplierOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);  VOUser supplierAdmin=orgSetup.getUser(supplierAdminId,true);  VOMarketplace supplMarketplace=orgSetup.createMarketplace("Pict02Supplier_MP",false,supplier);  paymentSetup.createPaymentForSupplier(basicSetup.getPlatformOperatorUserKey(),supplierAdmin.getKey(),supplier);  setCutOffDay(supplierAdmin.getKey(),1);  String customerAdminId="PIC02Customer";  VOOrganization customer=orgSetup.registerCustomer("PIC02CustomerOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_UK,customerAdminId,supplMarketplace.getMarketplaceId(),supplier.getOrganizationId());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  orgSetup.saveAllVats(supplierAdmin.getKey(),VOVatRateFactory.newVOVatRate(new BigDecimal("13.00")),Arrays.asList(VOVatRateFactory.newVOCountryVatRate(new BigDecimal("20.00"),TestOrganizationSetup.ORGANIZATION_DOMICILE_UK),VOVatRateFactory.newVOCountryVatRate(new BigDecimal("19.00"),TestOrganizationSetup.ORGANIZATION_DOMICILE_DE)),null);  orgSetup.createMarketingPermission(basicSetup.getSupplierAdminKey(),supplier.getOrganizationId(),technicalServiceAsync);  VOServiceDetails serviceFreeTempl=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT_TEST_02",TestService.EXAMPLE_ASYNC,TestPriceModel.EXAMPLE_RATA_WEEK_ROLES_PARS,technicalServiceAsync,supplMarketplace);  VOServiceDetails serviceFree=serviceSetup.savePriceModelForCustomer(serviceFreeTempl,TestPriceModel.FREE,customer);  serviceFree=serviceSetup.activateMarketableService(serviceFree);  VOServiceDetails serviceProRataTempl=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT_TEST_02_Upgrade",TestService.EXAMPLE_ASYNC,TestPriceModel.FREE,technicalServiceAsync,supplMarketplace);  VOServiceDetails serviceProRata=serviceSetup.savePriceModelForCustomer(serviceProRataTempl,TestPriceModel.EXAMPLE_PICT02_RATA_WEEK,customer);  serviceProRata=serviceSetup.activateMarketableService(serviceProRata);  serviceSetup.registerCompatibleServices(supplierAdmin.getKey(),serviceFreeTempl,serviceProRataTempl);  VOServiceDetails serviceProRataTempl2=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT_TEST_02_Upgrade2",TestService.EXAMPLE_ASYNC,TestPriceModel.FREE,technicalServiceAsync,supplMarketplace);  VOServiceDetails serviceProRata2=serviceSetup.savePriceModelForCustomer(serviceProRataTempl2,TestPriceModel.EXAMPLE_PICT02_RATA_WEEK2,customer);  serviceProRata2=serviceSetup.activateMarketableService(serviceProRata2);  serviceSetup.registerCompatibleServices(supplierAdmin.getKey(),serviceProRataTempl,serviceProRataTempl2);  VORoleDefinition role=VOServiceFactory.getRole(serviceFree,"ADMIN");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PICT_TEST_02",serviceFree,customerAdmin,role);  long usageStartTime=DateTimeHandling.calculateMillis("2013-06-03 20:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  subDetails=subscrSetup.completeAsyncSubscription(basicSetup.getSupplierAdminKey(),customerAdmin,subDetails);  long userDeassignedTime=DateTimeHandling.calculateMillis("2013-06-18 10:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userDeassignedTime);  subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  long userAssignedTime=DateTimeHandling.calculateMillis("2013-06-19 10:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userAssignedTime);  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());  long usageAsycUpgradeTime=DateTimeHandling.calculateMillis("2013-06-30 00:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(usageAsycUpgradeTime);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails upgradedSubDetails=subscrSetup.upgradeSubscription(subDetails,serviceProRata);  long usageUpgradeTime=DateTimeHandling.calculateMillis("2013-07-01 00:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(usageUpgradeTime);  upgradedSubDetails=subscrSetup.completeAsyncUpgradeSubscription(basicSetup.getSupplierAdminKey(),customerAdmin,upgradedSubDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-07-03 09:00:00"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  serviceSetup.deleteMarketableService(serviceFree);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  userDeassignedTime=DateTimeHandling.calculateMillis("2013-07-03 10:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userDeassignedTime);  upgradedSubDetails=subscrSetup.revokeUser(customerAdmin,upgradedSubDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-07-03 13:00:00"));  VOSubscriptionDetails upgradedSubDetailsOld=upgradedSubDetails;  upgradedSubDetails.setSubscriptionId("PICT_TEST_02" + "_SubID2");  upgradedSubDetails=subscrSetup.modifySubscription(upgradedSubDetails,null);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-07-03 14:00:00"));  upgradedSubDetails=subscrSetup.completeAsyncModifySubscription(basicSetup.getSupplierAdminKey(),customerAdmin,upgradedSubDetailsOld);  userAssignedTime=DateTimeHandling.calculateMillis("2013-07-10 10:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userAssignedTime);  upgradedSubDetails=subscrSetup.addUser(customerAdmin,role,upgradedSubDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  subDetails=subscrSetup.modifyParameterForSubscription(upgradedSubDetails,DateTimeHandling.calculateMillis("2013-07-14 00:00:00"),"MAX_FOLDER_NUMBER","5");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-07-15 00:00:00"));  subDetails=subscrSetup.completeAsyncModifySubscription(basicSetup.getSupplierAdminKey(),customerAdmin,subDetails);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  long roleChangeTime=DateTimeHandling.calculateMillis("2013-07-15 00:00:01");  BillingIntegrationTestBase.setDateFactoryInstance(roleChangeTime);  upgradedSubDetails=subscrSetup.modifyUserRole(upgradedSubDetails.getUsageLicenses().get(0),VOServiceFactory.getRole(serviceProRata,"USER"),upgradedSubDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance("2013-07-21 00:00:00");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails upgradedSubDetails2=subscrSetup.upgradeSubscription(upgradedSubDetails,serviceProRata2);  usageUpgradeTime=DateTimeHandling.calculateMillis("2013-07-22 00:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(usageUpgradeTime);  upgradedSubDetails2=subscrSetup.completeAsyncUpgradeSubscription(basicSetup.getSupplierAdminKey(),customerAdmin,upgradedSubDetails2);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-07-22 13:10:00"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  serviceSetup.deleteMarketableService(serviceProRata);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-07-22 13:20:00"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  serviceSetup.deleteMarketableService(serviceProRata2);  long suspResTime=DateTimeHandling.calculateMillis("2013-07-23 00:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(suspResTime);  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  paymentSetup.deleteCustomerPaymentTypes(customer);  long reassignResTime=DateTimeHandling.calculateMillis("2013-07-24 00:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(reassignResTime);  paymentSetup.reassignCustomerPaymentTypes(customer);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  long userterminateTime=DateTimeHandling.calculateMillis("2013-07-31 00:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userterminateTime);  subscrSetup.unsubscribeToService(upgradedSubDetails.getSubscriptionId());  resetCutOffDay(supplierAdmin.getKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_02",subDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_02",upgradedSubDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_02",upgradedSubDetails2);  BillingIntegrationTestBase.updateCustomerListForTests("PICT_TEST_02",customer);}  }
class C{  public Clean(){  super();}  }
class C{  public static String keyString(SecretKeys keys){  return keys.toString();}  }
class C{  public void handleMessageEvent(StunMessageEvent e){  delegate.handleMessageEvent(e);}  }
class C{  public void execute(){  int pcDepth=getParams().getInt("depth",-1);  HitonMb search=new HitonMb(getIndependenceTest(),pcDepth,false);  String targetName=getParams().getString("targetName",null);  List<Node> nodes=search.findMb(targetName);  Graph graph=new EdgeListGraph();  for (  Node node : nodes) {    graph.addNode(node);  }  setResultGraph(graph);  if (getSourceGraph() != null) {    GraphUtils.arrangeBySourceGraph(graph,getSourceGraph());  } else {    GraphUtils.circleLayout(graph,200,200,150);  }}  }
class C{  private CGraphPanelExtender(){}  }
class C{  public boolean canBeLongAddress(int address){  return isLongAddress(address);}  }
class C{  public static String backQuoteChars(String string,char[] find,String[] replace){  int index;  StringBuilder newStr;  int i;  if (string == null)   return string;  for (i=0; i < find.length; i++) {    if (string.indexOf(find[i]) != -1) {      newStr=new StringBuilder();      while ((index=string.indexOf(find[i])) != -1) {        if (index > 0)         newStr.append(string.substring(0,index));        newStr.append(replace[i]);        if ((index + 1) < string.length())         string=string.substring(index + 1); else         string="";      }      newStr.append(string);      string=newStr.toString();    }  }  return string;}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  TypePath(byte[] b,int offset){  this.b=b;  this.offset=offset;}  }
class C{  public WeakIdentityHashMap(int initialCapacity,float loadFactor){  if (initialCapacity < 0)   throw new IllegalArgumentException("Illegal Initial Capacity: " + initialCapacity);  if (initialCapacity > MAXIMUM_CAPACITY)   initialCapacity=MAXIMUM_CAPACITY;  if (loadFactor <= 0 || Float.isNaN(loadFactor))   throw new IllegalArgumentException("Illegal Load factor: " + loadFactor);  int capacity=1;  while (capacity < initialCapacity)   capacity<<=1;  @SuppressWarnings("unchecked") Entry<K,V>[] tmp=new Entry[capacity];  table=tmp;  this.loadFactor=loadFactor;  threshold=(int)(capacity * loadFactor);}  }
class C{  protected void notifyScrollingListenersAboutStart(){  for (  OnWheelScrollListener listener : scrollingListeners) {    listener.onScrollingStarted(this);  }}  }
class C{  public SystemPropertiesLoader with(String fileName,String... sectionNames){  files.add(new FileWithSections(fileName,sectionNames));  return this;}  }
class C{  public boolean isDomainAttributeSpecified(){  return hasDomainAttribute;}  }
class C{  @Override public int compareTo(Version o){  if (equals(o))   return 0;  if (o.major != major)   return o.major > major ? -1 : 1;  if (o.minor != minor)   return o.minor > minor ? -1 : 1;  if (o.build != build)   return o.build > build ? -1 : 1;  if (o.preRelease && preRelease) {    if (o.prebuild == prebuild)     return o.prereleaseType > prereleaseType ? -1 : 1;    return o.prebuild > prebuild ? -1 : 1;  } else   if (o.preRelease)   return 1; else   if (preRelease)   return -1;  return 0;}  }
class C{  public boolean isEmpty(){  return empty_;}  }
class C{  public boolean supportClusterQuery(){  if ("Oracle".equalsIgnoreCase(this.dbType))   return true;  return false;}  }
class C{  protected HheaTable(){  super(TrueTypeTable.HEAD_TABLE);  setVersion(0x10000);}  }
class C{  public DataInputStream openDataInputStream() throws IOException {  return new DataInputStream(openInputStream());}  }
class C{  public boolean isSingleFocusMode(){  return isSingleFocusMode(0,getActualPane()) == 1;}  }
class C{  private Object[] parseSingleRow(int row) throws FitsException {  Object[] res=new Object[this.nFields];  try {    getBuffer(this.rowLen,this.fileOffset + (long)row * (long)this.rowLen);  } catch (  IOException e) {    throw new FitsException("Unable to read row",e);  }  for (int i=0; i < this.nFields; i+=1) {    res[i]=ArrayFuncs.newInstance(this.types[i],1);    if (!extractElement(this.offsets[i],this.lengths[i],res,i,0,this.nulls[i])) {      res[i]=null;    }  }  this.buffer=null;  return res;}  }
class C{  byte[] unzip(final byte[] data) throws IOException {  final InputStream input=new ByteArrayInputStream(data);  final byte[] buffer=new byte[1024];  final ZipInputStream zip=new ZipInputStream(input);  final ByteArrayOutputStream out=new ByteArrayOutputStream(data.length);  int count=0;  if (zip.getNextEntry() != null) {    while ((count=zip.read(buffer)) != -1) {      out.write(buffer,0,count);    }  }  out.flush();  zip.close();  out.close();  return out.toByteArray();}  }
class C{  private static DimConstraint parseDimConstraint(String s,BoundSize gapBefore,BoundSize gapAfter,boolean isCols){  DimConstraint dimConstraint=new DimConstraint();  dimConstraint.setGapBefore(gapBefore);  dimConstraint.setGapAfter(gapAfter);  String[] parts=toTrimmedTokens(s,',');  for (int i=0; i < parts.length; i++) {    String part=parts[i];    try {      if (part.length() == 0) {        continue;      }      if (part.equals("fill")) {        dimConstraint.setFill(true);        continue;      }      if (part.equals("nogrid")) {        dimConstraint.setNoGrid(true);        continue;      }      int ix=-1;      char c=part.charAt(0);      if (c == 's') {        ix=startsWithLenient(part,new String[]{"sizegroup","sg"},new int[]{5,2},true);        if (ix > -1) {          dimConstraint.setSizeGroup(part.substring(ix).trim());          continue;        }        ix=startsWithLenient(part,new String[]{"shrinkprio","shp"},new int[]{10,3},true);        if (ix > -1) {          dimConstraint.setShrinkPriority(Integer.parseInt(part.substring(ix).trim()));          continue;        }        ix=startsWithLenient(part,"shrink",6,true);        if (ix > -1) {          dimConstraint.setShrink(parseFloat(part.substring(ix).trim(),ResizeConstraint.WEIGHT_100));          continue;        }      }      if (c == 'g') {        ix=startsWithLenient(part,new String[]{"growpriority","gp"},new int[]{5,2},true);        if (ix > -1) {          dimConstraint.setGrowPriority(Integer.parseInt(part.substring(ix).trim()));          continue;        }        ix=startsWithLenient(part,"grow",4,true);        if (ix > -1) {          dimConstraint.setGrow(parseFloat(part.substring(ix).trim(),ResizeConstraint.WEIGHT_100));          continue;        }      }      if (c == 'a') {        ix=startsWithLenient(part,"align",2,true);        if (ix > -1) {          dimConstraint.setAlign(parseUnitValueOrAlign(part.substring(ix).trim(),isCols,null));          continue;        }      }      UnitValue align=parseAlignKeywords(part,isCols);      if (align != null) {        dimConstraint.setAlign(align);        continue;      }      dimConstraint.setSize(parseBoundSize(part,false,isCols));    } catch (    Exception ex) {      throw new IllegalArgumentException("Illegal constraint: '" + part + "'\n"+ ex.getMessage());    }  }  return dimConstraint;}  }
class C{  public void open(){  shell.open();  shell.layout();  while (shell != null && !shell.isDisposed()) {    if (display != null && !display.readAndDispatch()) {      display.sleep();    }  }}  }
class C{  public static void paintWithXorOnRetina(@NotNull Dimension size,@NotNull Graphics g,boolean useRetinaCondition,Consumer<Graphics2D> paintRoutine){  if (!useRetinaCondition || !isRetina() || Registry.is("ide.mac.retina.disableDrawingFix")) {    paintRoutine.consume((Graphics2D)g);  } else {    Rectangle rect=g.getClipBounds();    if (rect == null)     rect=new Rectangle(size);    Image image=new BufferedImage(rect.width * 2,rect.height * 2,BufferedImage.TYPE_INT_RGB);    Graphics2D imageGraphics=(Graphics2D)image.getGraphics();    imageGraphics.scale(2,2);    imageGraphics.translate(-rect.x,-rect.y);    imageGraphics.setClip(rect.x,rect.y,rect.width,rect.height);    paintRoutine.consume(imageGraphics);    image.flush();    imageGraphics.dispose();    ((Graphics2D)g).scale(0.5,0.5);    g.drawImage(image,rect.x * 2,rect.y * 2,null);  }}  }
class C{  @Override public Vertex parseReturnByteCode(DataInputStream dataStream,Network network) throws IOException {  Vertex expression=network.createTemporyVertex();  expression.addRelationship(Primitive.INSTANTIATION,Primitive.RETURN);  long id=dataStream.readLong();  if (id == 0) {    return expression;  }  Vertex element=network.findById(id);  if (element != null) {    if (element.is(Primitive.ARGUMENT)) {      expression.addRelationship(Primitive.RETURN,element);      id=dataStream.readLong();      while (id > 0) {        element=network.findById(id);        if (element != null) {          expression.addRelationship(Primitive.ARGUMENT,element,Integer.MAX_VALUE);        }        id=dataStream.readLong();      }    } else {      expression.addRelationship(Primitive.RETURN,element);    }  }  return expression;}  }
class C{  private static Element buildRepeatControl(Element bodyNode,Element controlNode,String name,Element modelNode){  Element repeatControl=bodyNode.createElement(NAMESPACE_XFORMS,null);  repeatControl.setName(CONTROL_REPEAT);  repeatControl.setAttribute(null,ATTRIBUTE_BIND,name);  if (controlNode != null)   repeatControl.addChild(Element.ELEMENT,controlNode); else   if (name.contains("problem_added") || name.contains("problem_resolved"))   addDefaultProblemListChild(name,repeatControl,null,modelNode); else   if (obsRepeatItems.contains(name))   addDefaultProblemListChild(name,repeatControl,"value",modelNode);  return repeatControl;}  }
class C{  public final void testValidateCaseInsensitiveAllowingSpacesFails(){  char[] allowedCharacters=new char[]{'-'};  LetterOrNumberValidator characterOrNumberValidator=new LetterOrNumberValidator("foo",Case.CASE_INSENSITIVE,true,allowedCharacters);  assertFalse(characterOrNumberValidator.validate("Ab C&-"));}  }
class C{  public CheckedListIterator(ListIterator<E> i,Class<E> type){  this.i=i;  this.type=type;}  }
class C{  private HashMap<String,List<StoragePort>> discoverPorts(StorageSystem system,Set<StorageHADomain> movers) throws VNXFileCollectionException, VNXException, IOException {  HashMap<String,List<StoragePort>> storagePorts=new HashMap<String,List<StoragePort>>();  List<StoragePort> newStoragePorts=new ArrayList<StoragePort>();  List<StoragePort> existingStoragePorts=new ArrayList<StoragePort>();  List<PhysicalNAS> modifiedServers=new ArrayList<PhysicalNAS>();  _logger.info("Start storage port discovery for storage system {}",system.getId());  List<VNXDataMoverIntf> allDmIntfs=getPorts(system);  List<VNXVdm> vdms=getVdmPortGroups(system);  List<VNXDataMoverIntf> dataMovers=null;  Map<String,VNXDataMoverIntf> dmIntMap=new HashMap();  for (  VNXDataMoverIntf intf : allDmIntfs) {    _logger.info("getPorts Adding {} : {}",intf.getName(),intf.getIpAddress());    dmIntMap.put(intf.getName(),intf);  }  VNXFileSshApi sshDmApi=new VNXFileSshApi();  sshDmApi.setConnParams(system.getIpAddress(),system.getUsername(),system.getPassword());  for (  VNXVdm vdm : vdms) {    Map<String,String> vdmIntfs=sshDmApi.getVDMInterfaces(vdm.getVdmName());    for (    String vdmIF : vdmIntfs.keySet()) {      _logger.info("Remove VDM interface {}",vdmIF);      dmIntMap.remove(vdmIF);    }  }  List<VNXDataMoverIntf> dmIntfs=new ArrayList(dmIntMap.values());  _logger.info("Number unfiltered mover interfaces found: {}",allDmIntfs.size());  _logger.info("Number mover interfaces found: {}",dmIntfs.size());  for (  VNXDataMoverIntf intf : dmIntfs) {    StoragePort port=null;    StorageHADomain matchingHADomain=getMatchingMoverById(movers,intf.getDataMoverId());    if (null == matchingHADomain) {      continue;    }    String portNativeGuid=NativeGUIDGenerator.generateNativeGuid(system,intf.getIpAddress(),NativeGUIDGenerator.PORT);    port=findExistingPort(portNativeGuid);    if (null == port) {      String oldNativeGuid=NativeGUIDGenerator.generateNativeGuid(system,intf.getIpAddress(),NativeGUIDGenerator.ADAPTER);      port=findExistingPort(oldNativeGuid);      if (null != port) {        port.setLabel(portNativeGuid);        port.setNativeGuid(portNativeGuid);      }    }    if (port == null) {      port=new StoragePort();      port.setId(URIUtil.createId(StoragePort.class));      port.setLabel(portNativeGuid);      port.setTransportType("IP");      port.setNativeGuid(portNativeGuid);      port.setStorageDevice(system.getId());      port.setRegistrationStatus(RegistrationStatus.REGISTERED.toString());      port.setPortName(intf.getName());      port.setPortNetworkId(intf.getIpAddress());      port.setPortGroup(intf.getDataMoverId());      port.setStorageHADomain(matchingHADomain.getId());      _logger.info("Creating new storage port using NativeGuid : {} name : {}, IP : {}",new Object[]{portNativeGuid,intf.getName(),intf.getIpAddress()});      newStoragePorts.add(port);    } else {      port.setStorageHADomain(matchingHADomain.getId());      existingStoragePorts.add(port);    }    port.setDiscoveryStatus(DiscoveryStatus.VISIBLE.name());    port.setCompatibilityStatus(DiscoveredDataObject.CompatibilityStatus.COMPATIBLE.name());    PhysicalNAS nas=findPhysicalNasByNativeId(system,intf.getDataMoverId());    if (nas != null) {      if (nas.getStoragePorts() != null && !nas.getStoragePorts().isEmpty()) {        if (nas.getStoragePorts().contains(port.getId())) {          nas.getStoragePorts().remove(port.getId());        }      }      nas.getStoragePorts().add(port.getId().toString());      modifiedServers.add(nas);      _logger.info("PhysicalNAS : {} : port : {} got modified",nas.getId(),port.getPortName());    }  }  if (modifiedServers != null && !modifiedServers.isEmpty()) {    _logger.info("Modified PhysicalNAS servers size {}",modifiedServers.size());    _dbClient.persistObject(modifiedServers);  }  _logger.info("Storage port discovery for storage system {} complete",system.getId());  for (  StoragePort newPort : newStoragePorts) {    _logger.info("New Storage Port : {} : {}",newPort.getNativeGuid(),newPort.getPortName() + ":" + newPort.getId());  }  for (  StoragePort port : existingStoragePorts) {    _logger.info("Old Storage Port : {} : {}",port.getNativeGuid(),port.getPortName() + ":" + port.getId());  }  storagePorts.put(NEW,newStoragePorts);  storagePorts.put(EXISTING,existingStoragePorts);  return storagePorts;}  }
class C{  protected DoubleMatrix3D viewSelectionLike(int[] sliceOffsets,int[] rowOffsets,int[] columnOffsets){  return new SelectedSparseDoubleMatrix3D(this.elements,sliceOffsets,rowOffsets,columnOffsets,0);}  }
class C{  public void run(){  List<?> targets=getOrderedSelection();  List<?> list=getCustomEntriesAsList();  list.removeAll(targets);  setCustomEntries(list);}  }
class C{  public Builder withTerm(long term){  request.term=Assert.argNot(term,term < 0,"term must be positive");  return this;}  }
class C{  public final void expand(Vector2 point){  ExpandingSimplexEdge edge=this.queue.poll();  ExpandingSimplexEdge edge1=new ExpandingSimplexEdge(edge.point1,point,this.winding);  ExpandingSimplexEdge edge2=new ExpandingSimplexEdge(point,edge.point2,this.winding);  this.queue.add(edge1);  this.queue.add(edge2);}  }
class C{  @DSComment("no action") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:06.836 -0500",hash_original_method="2EEDDDEB8BA1CD500E3647BC397BF54F",hash_generated_method="10C0B8E2B9DF49DDBC078E9919A022F7") public boolean isClosed(){  return isClosed;}  }
class C{  public Creature(final String clazz,final String subclass,final String name,final int hp,final int attack,final int defense,final int level,final int xp,final int width,final int height,final double baseSpeed,final List<DropItem> dropItems,final Map<String,String> aiProfiles,final LinkedHashMap<String,LinkedList<String>> noises,final int respawnTime,final String description){  this();  this.baseSpeed=baseSpeed;  setSize(width,height);  if (dropItems != null) {    this.dropsItems=dropItems;  }  this.setAIProfiles(aiProfiles);  this.noises=new LinkedHashMap<String,LinkedList<String>>();  this.noises.putAll(noises);  this.respawnTime=respawnTime;  setEntityClass(clazz);  setEntitySubclass(subclass);  setName(name);  put("x",0);  put("y",0);  setDescription(description);  setAtk(attack);  setDef(defense);  setXP(xp);  setBaseHP(hp);  setHP(hp);  setLevel(level);  if (Level.getLevel(xp) != level) {    LOGGER.debug("Wrong level for xp [" + name + "]: "+ xp+ " -> "+ Level.getLevel(xp)+ " (!"+ level+ ")");  }  update();  updateModifiedAttributes();  stop();  if (LOGGER.isDebugEnabled()) {    LOGGER.debug(getID() + " Created " + clazz+ ":"+ this);  }}  }
class C{  public static boolean isValid(Date expirationDate){  Date currentDate=new Date();  String formattedDate=dateFormat.format(currentDate);  currentDate=convertDate(formattedDate);  boolean isExpired=currentDate.after(expirationDate);  boolean isEqual=currentDate.equals(expirationDate);  return isExpired || isEqual;}  }
class C{  static void updateStyle(JTextComponent c,SeaGlassContext context,String prefix){  SeaGlassStyle style=(SeaGlassStyle)context.getStyle();  Color color=c.getCaretColor();  if (color == null || color instanceof UIResource) {    c.setCaretColor((Color)style.get(context,prefix + ".caretForeground"));  }  Color fg=c.getForeground();  if (fg == null || fg instanceof UIResource) {    fg=style.getColorForState(context,ColorType.TEXT_FOREGROUND);    if (fg != null) {      c.setForeground(fg);    }  }  Object ar=style.get(context,prefix + ".caretAspectRatio");  if (ar instanceof Number) {    c.putClientProperty("caretAspectRatio",ar);  }  context.setComponentState(SELECTED | FOCUSED);  Color s=c.getSelectionColor();  if (s == null || s instanceof UIResource) {    c.setSelectionColor(style.getColor(context,ColorType.TEXT_BACKGROUND));  }  Color sfg=c.getSelectedTextColor();  if (sfg == null || sfg instanceof UIResource) {    c.setSelectedTextColor(style.getColor(context,ColorType.TEXT_FOREGROUND));  }  context.setComponentState(DISABLED);  Color dfg=c.getDisabledTextColor();  if (dfg == null || dfg instanceof UIResource) {    c.setDisabledTextColor(style.getColor(context,ColorType.TEXT_FOREGROUND));  }  Insets margin=c.getMargin();  if (margin == null || margin instanceof UIResource) {    margin=(Insets)style.get(context,prefix + ".margin");    if (margin == null) {      margin=SeaGlassLookAndFeel.EMPTY_UIRESOURCE_INSETS;    }    c.setMargin(margin);  }  Caret caret=c.getCaret();  if (caret instanceof UIResource) {    Object o=style.get(context,prefix + ".caretBlinkRate");    if (o != null && o instanceof Integer) {      Integer rate=(Integer)o;      caret.setBlinkRate(rate.intValue());    }  }}  }
class C{  public boolean definitelySame(FieldReference that){  if (this == that)   return true;  if (getName() != that.getName() || getDescriptor() != that.getDescriptor()) {    return false;  }  RVMField mine=peekResolvedField();  RVMField theirs=that.peekResolvedField();  if (mine == null || theirs == null)   return false;  return mine == theirs;}  }
class C{  protected static String quoteTimestamp(java.sql.Timestamp x){  if (x == null) {    return "null";  }  return "Timestamp.valueOf(\"" + x.toString() + "\")";}  }
class C{  public static Point calculateSize(int maxWidth,int maxHeight,int originalWidth,int originalHeight,boolean respectFactor){  Point size=new Point();  if (respectFactor) {    size.y=maxHeight;    size.x=(int)(size.y * (double)originalWidth / (double)originalHeight);    if (size.x > maxWidth) {      size.x=maxWidth;      size.y=(int)(size.x * (double)originalHeight / (double)originalWidth);    }  } else {    size.x=maxWidth;    size.y=maxHeight;  }  return size;}  }
class C{  public void logFatal(Object message){  logInternal(FATAL,message,null);}  }
class C{  private static <T>Optional<RuleMatch<T>> route(final Rule<T> rule,final String method,final String uri){  final RuleRouter<T> router=RuleRouter.of(ImmutableList.of(rule));  final Request message=Request.forUri(uri,method);  try {    return router.match(message);  } catch (  InvalidUriException e) {    throw Throwables.propagate(e);  }}  }
class C{  @Override protected void doInit() throws InvalidNameException, Exception {  if (initialized) {    return;  }  LOG.debug("Initializing schema partition " + getId());  suffixDn.apply(schemaManager);  super.doInit();  final Map<String,Boolean> resMap=ResourceMap.getResources(Pattern.compile("schema[/\\Q\\\\E]ou=schema.*"));  for (  String resourcePath : new TreeSet<>(resMap.keySet())) {    if (resourcePath.endsWith(".ldif")) {      URL resource=DefaultSchemaLdifExtractor.getUniqueResource(resourcePath,"Schema LDIF file");      LdifEntry ldifEntry;      try (LdifReader reader=new LdifReader(resource.openStream())){        ldifEntry=reader.next();      }       Entry entry=new DefaultEntry(schemaManager,ldifEntry.getEntry());      if (entry.get(SchemaConstants.ENTRY_CSN_AT) == null) {        entry.add(SchemaConstants.ENTRY_CSN_AT,defaultCSNFactory.newInstance().toString());      }      if (entry.get(SchemaConstants.ENTRY_UUID_AT) == null) {        entry.add(SchemaConstants.ENTRY_UUID_AT,UUID.randomUUID().toString());      }      AddOperationContext addContext=new AddOperationContext(null,entry);      super.add(addContext);    }  }}  }
class C{  public void reset(){  runnerNumber=1;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.858 -0500",hash_original_method="EDB190C8321DBF8F29E66BCB92691482",hash_generated_method="E56E2E15D6CCD7BD6EC3738F6E50A17C") public boolean authenticate(String username,String password) throws IOException {  int replyCode=authinfoUser(username);  if (replyCode == NNTPReply.MORE_AUTH_INFO_REQUIRED) {    replyCode=authinfoPass(password);    if (replyCode == NNTPReply.AUTHENTICATION_ACCEPTED) {      _isAllowedToPost=true;      return true;    }  }  return false;}  }
class C{  public GF2Polynomial xor(GF2Polynomial b){  int i;  GF2Polynomial result;  int k=Math.min(blocks,b.blocks);  if (len >= b.len) {    result=new GF2Polynomial(this);    for (i=0; i < k; i++) {      result.value[i]^=b.value[i];    }  } else {    result=new GF2Polynomial(b);    for (i=0; i < k; i++) {      result.value[i]^=value[i];    }  }  result.zeroUnusedBits();  return result;}  }
class C{  public ImmutableMap<ShardId,ShardRestoreStatus> shards(){  return this.shards;}  }
class C{  private void assertNumFound(int expected,QueryResponse rsp){  assertEquals(expected,extractDocList(rsp).getNumFound());}  }
class C{  public Confirmation(){  this(null,null);}  }
class C{  Iterator<C> createColumnKeyIterator(){  return new ColumnKeyIterator();}  }
class C{  public Vec2D(float x,float y){  this.x=x;  this.y=y;}  }
class C{  @SuppressWarnings("unchecked") static final <K,V>Segment<K,V> segmentAt(Segment<K,V>[] ss,int j){  long u=(j << SSHIFT) + SBASE;  return ss == null ? null : (Segment<K,V>)UNSAFE.getObjectVolatile(ss,u);}  }
class C{  public static Point transformPoint(AffineTransform af,Point pt){  Point2D src=new Point2D.Float(pt.x,pt.y);  Point2D dest=af.transform(src,null);  Point point=new Point((int)Math.floor(dest.getX()),(int)Math.floor(dest.getY()));  return point;}  }
class C{  public void addImages(ImageInfo... images){  if (images == null) {    return;  }  List<ImageInfo> list=new ArrayList<ImageInfo>();  Collections.addAll(list,images);  this.setImages(list);}  }
class C{  public static void traverse(Tree tree,TreeItemAction action){  Treechildren treechildren=tree.getTreechildren();  traverse(treechildren,action);}  }
class C{  public void imageComplete(int status){  WritableRaster wr;switch (status) {case IMAGEERROR:case IMAGEABORTED:    model=null;  width=-1;height=-1;intPixels=null;bytePixels=null;break;case SINGLEFRAMEDONE:case STATICIMAGEDONE:if (width <= 0 || height <= 0) break;if (model instanceof DirectColorModel) {if (intPixels == null) break;wr=createDCMraster();} else if (model instanceof IndexColorModel) {int[] bandOffsets={0};if (bytePixels == null) break;DataBufferByte db=new DataBufferByte(bytePixels,width * height);wr=Raster.createInterleavedRaster(db,width,height,width,1,bandOffsets,null);} else {convertToRGB();if (intPixels == null) break;wr=createDCMraster();}BufferedImage bi=new BufferedImage(model,wr,model.isAlphaPremultiplied(),null);bi=bufferedImageOp.filter(bi,null);WritableRaster r=bi.getRaster();ColorModel cm=bi.getColorModel();int w=r.getWidth();int h=r.getHeight();consumer.setDimensions(w,h);consumer.setColorModel(cm);if (cm instanceof DirectColorModel) {DataBufferInt db=(DataBufferInt)r.getDataBuffer();consumer.setPixels(0,0,w,h,cm,db.getData(),0,w);} else if (cm instanceof IndexColorModel) {DataBufferByte db=(DataBufferByte)r.getDataBuffer();consumer.setPixels(0,0,w,h,cm,db.getData(),0,w);} else {throw new InternalError("Unknown color model " + cm);}break;}consumer.imageComplete(status);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  private boolean barDBupdate(boolean add,int Node_ID){  int AD_Client_ID=Env.getAD_Client_ID(Env.getCtx());  int AD_Org_ID=Env.getContextAsInt(Env.getCtx(),"#AD_Org_ID");  int AD_User_ID=Env.getContextAsInt(Env.getCtx(),"#AD_User_ID");  StringBuffer sql=new StringBuffer();  if (add)   sql.append("INSERT INTO AD_TreeBar " + "(AD_Tree_ID,AD_User_ID,Node_ID, " + "AD_Client_ID,AD_Org_ID, "+ "IsActive,Created,CreatedBy,Updated,UpdatedBy)VALUES (").append(m_AD_Tree_ID).append(",").append(AD_User_ID).append(",").append(Node_ID).append(",").append(AD_Client_ID).append(",").append(AD_Org_ID).append(",").append("'Y',SysDate,").append(AD_User_ID).append(",SysDate,").append(AD_User_ID).append(")"); else   sql.append("DELETE AD_TreeBar WHERE AD_Tree_ID=").append(m_AD_Tree_ID).append(" AND AD_User_ID=").append(AD_User_ID).append(" AND Node_ID=").append(Node_ID);  int no=DB.executeUpdate(sql.toString(),false,null);  return no == 1;}  }
class C{  private static void writeFully(WritableByteChannel ch,ByteBuffer bb) throws IOException {  if (ch instanceof SelectableChannel) {    SelectableChannel sc=(SelectableChannel)ch;synchronized (sc.blockingLock()) {      if (!sc.isBlocking())       throw new IllegalBlockingModeException();      writeFullyImpl(ch,bb);    }  } else {    writeFullyImpl(ch,bb);  }}  }
class C{  public ChangePropertiesCommand(final TFSRepository repository,final String[] paths,final PropertyValue[] values,final RecursionType recursion,final LockLevel lockLevel,final PendChangesOptions options,final String[] itemPropertyFilters){  this(repository,ItemProperties.fromStrings(paths,values),recursion,lockLevel,options,itemPropertyFilters);}  }
class C{  public static String calculateMD5Sum(Path file) throws IOException {  try {    MessageDigest md=MessageDigest.getInstance("MD5");    try (InputStream in=newInputStream(file)){      int read;      byte[] buffer=new byte[8192];      while ((read=in.read(buffer)) != -1) {        md.update(buffer,0,read);      }    }     byte[] digest=md.digest();    StringBuilder sb=new StringBuilder();    for (int i=0; i < digest.length; i++) {      sb.append(Integer.toString((digest[i] & 0xff) + 0x100,16).substring(1));    }    return sb.toString();  } catch (  NoSuchAlgorithmException e) {    throw new IllegalStateException(e);  }}  }
class C{  public static boolean isStrikeThrough(AttributeSet a){  Boolean strike=(Boolean)a.getAttribute(StrikeThrough);  if (strike != null) {    return strike.booleanValue();  }  return false;}  }
class C{  protected String findArtifactLocation(Set<Artifact> artifacts,Log log) throws MojoExecutionException {  Artifact resolvedArtifact=null;  log.debug("Searching for an artifact that matches [" + getGroupId() + ":"+ getArtifactId()+ ":"+ getType()+ ":"+ getClassifier()+ "]...");  for (  Artifact artifact : artifacts) {    log.debug("Checking artifact [" + artifact.getGroupId() + ":"+ artifact.getArtifactId()+ ":"+ artifact.getType()+ ":"+ artifact.getClassifier()+ "]...");    if (artifact.getGroupId().equals(getGroupId()) && artifact.getArtifactId().equals(getArtifactId())) {      if (artifact.getClassifier() == getClassifier() || artifact.getClassifier() != null && artifact.getClassifier().equals(getClassifier())) {        String artifactType=artifact.getType();        if (artifactType == null || DeployableType.EJB.getType().equals(artifactType)) {          artifactType="jar";        }        String type=getType();        if (type == null || DeployableType.BUNDLE.getType().equals(type) || DeployableType.EJB.getType().equals(type)) {          type="jar";        }        if (type.equals(artifactType)) {          resolvedArtifact=artifact;          break;        }      }    }  }  if (resolvedArtifact == null) {    throw new MojoExecutionException("Artifact [" + getGroupId() + ":"+ getArtifactId()+ ":"+ getType()+ "] is not a dependency of the project.");  }  if (resolvedArtifact.getFile() == null) {    throw new MojoExecutionException("The file for artifact [" + resolvedArtifact + " is null (probably does not exist).");  }  return resolvedArtifact.getFile().getPath();}  }
class C{  @Override public void onPlaylistNotFound(String playlistId,int errorCode){}  }
class C{  String rolesToString(Set<OrganizationRoleType> types){  String tmp=types.toString();  return tmp.substring(1,tmp.length() - 1);}  }
class C{  public static Object toObject(COMObject parent,Variant variant,String key) throws ExpressionException {  short type=variant.getvt();  if (type == Variant.VariantEmpty)   return null; else   if (type == Variant.VariantNull)   return null; else   if (type == Variant.VariantShort)   return Short.valueOf(variant.getShort()); else   if (type == Variant.VariantInt)   return Integer.valueOf(variant.getInt()); else   if (type == Variant.VariantFloat)   return new Float(variant.getFloat()); else   if (type == Variant.VariantDouble)   return new Double(variant.getDouble()); else   if (type == Variant.VariantCurrency) {    long l;    try {      l=variant.getCurrency().longValue();    } catch (    Throwable t) {      try {        Method toCurrency=variant.getClass().getMethod("toCurrency",new Class[0]);        Object curreny=toCurrency.invoke(variant,new Object[0]);        Method longValue=curreny.getClass().getMethod("longValue",new Class[0]);        l=Caster.toLongValue(longValue.invoke(curreny,new Object[0]),0);      } catch (      Throwable t2) {        l=0;      }    }    return Long.valueOf(l);  } else   if (type == Variant.VariantObject)   return variant.toEnumVariant(); else   if (type == Variant.VariantDate)   return new DateTimeImpl((long)variant.getDate(),true); else   if (type == Variant.VariantString)   return variant.getString(); else   if (type == Variant.VariantBoolean)   return variant.getBoolean() ? Boolean.TRUE : Boolean.FALSE; else   if (type == Variant.VariantByte)   return new Byte(variant.getByte()); else   if (type == Variant.VariantVariant) {    throw new ExpressionException("type variant is not supported");  } else   if (type == Variant.VariantArray) {    Variant[] varr=variant.getVariantArrayRef();    Object[] oarr=new Object[varr.length];    for (int i=0; i < varr.length; i++) {      oarr[i]=toObject(parent,varr[i],Caster.toString(i));    }    return new ArrayImpl(oarr);  } else   if (type == Variant.VariantDispatch) {    return new COMObject(variant,variant.toDispatch(),parent.getName() + "." + key);  }  throw new ExpressionException("COM Type [" + toStringType(type) + "] not supported");}  }
class C{  public static boolean equals(byte[][] field1,byte[][] field2){  int index1=0;  int length1=field1 == null ? 0 : field1.length;  int index2=0;  int length2=field2 == null ? 0 : field2.length;  while (true) {    while (index1 < length1 && field1[index1] == null) {      index1++;    }    while (index2 < length2 && field2[index2] == null) {      index2++;    }    boolean atEndOf1=index1 >= length1;    boolean atEndOf2=index2 >= length2;    if (atEndOf1 && atEndOf2) {      return true;    } else     if (atEndOf1 != atEndOf2) {      return false;    } else     if (!Arrays.equals(field1[index1],field2[index2])) {      return false;    }    index1++;    index2++;  }}  }
class C{  private void addAttributeImpl(final String name,final String value){  myBuffer.append(' ').append(name).append("=\"").append(value).append('"');}  }
class C{  static void testThreadInterrupt(Path dir) throws IOException {  System.out.println("-- Thread interrupted status test --");  FileSystem fs=FileSystems.getDefault();  Thread curr=Thread.currentThread();  try (WatchService watcher=fs.newWatchService()){    System.out.println("interrupting current thread");    curr.interrupt();    dir.register(watcher,ENTRY_CREATE);    if (!curr.isInterrupted())     throw new RuntimeException("thread should remain interrupted");    System.out.println("current thread is still interrupted");    System.out.println("OKAY");  }  finally {    curr.interrupted();  }}  }
class C{  public void addRam(AttackAction ea){  pendingRams.addElement(ea);  processGameEvent(new GameNewActionEvent(this,ea));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:22.088 -0500",hash_original_method="16D0E6CF226A4618D75D1B422CC8FCDF",hash_generated_method="4164740904B2F8F392B631D8C36F225E") public boolean isReliable(){  return true;}  }
class C{  public JBBPOut Byte(final String str) throws IOException {  assertNotEnded();  assertStringNotNull(str);  if (this.processCommands) {    for (int i=0; i < str.length(); i++) {      this.outStream.write(str.charAt(i));    }  }  return this;}  }
class C{  public int numRead(){  return pull;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFileTmp),Util.US_ASCII));  try {    writer.write(MAGIC);    writer.write("\n");    writer.write(VERSION_1);    writer.write("\n");    writer.write(Integer.toString(appVersion));    writer.write("\n");    writer.write(Integer.toString(valueCount));    writer.write("\n");    writer.write("\n");    for (    Entry entry : lruEntries.values()) {      if (entry.currentEditor != null) {        writer.write(DIRTY + ' ' + entry.key+ '\n');      } else {        writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');      }    }  }  finally {    writer.close();  }  if (journalFile.exists()) {    renameTo(journalFile,journalFileBackup,true);  }  renameTo(journalFileTmp,journalFile,false);  journalFileBackup.delete();  journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII));}  }
class C{  private static void solve_l2r_l1l2_svr(Problem prob,double[] w,Parameter param){  int l=prob.l;  double C=param.C;  double p=param.p;  int w_size=prob.n;  double eps=param.eps;  int i, s, iter=0;  int max_iter=1000;  int active_size=l;  int[] index=new int[l];  double d, G, H;  double Gmax_old=Double.POSITIVE_INFINITY;  double Gmax_new, Gnorm1_new;  double Gnorm1_init=0;  double[] beta=new double[l];  double[] QD=new double[l];  double[] y=prob.y;  double[] lambda=new double[]{0.5 / C};  double[] upper_bound=new double[]{Double.POSITIVE_INFINITY};  if (param.solverType == SolverType.L2R_L1LOSS_SVR_DUAL) {    lambda[0]=0;    upper_bound[0]=C;  }  for (i=0; i < l; i++) {    beta[i]=0;  }  for (i=0; i < w_size; i++) {    w[i]=0;  }  for (i=0; i < l; i++) {    QD[i]=0;    for (    Feature xi : prob.x[i]) {      double val=xi.getValue();      QD[i]+=val * val;      w[xi.getIndex() - 1]+=beta[i] * val;    }    index[i]=i;  }  while (iter < max_iter) {    Gmax_new=0;    Gnorm1_new=0;    for (i=0; i < active_size; i++) {      int j=i + random.nextInt(active_size - i);      swap(index,i,j);    }    for (s=0; s < active_size; s++) {      i=index[s];      G=-y[i] + lambda[GETI_SVR(i)] * beta[i];      H=QD[i] + lambda[GETI_SVR(i)];      for (      Feature xi : prob.x[i]) {        int ind=xi.getIndex() - 1;        double val=xi.getValue();        G+=val * w[ind];      }      double Gp=G + p;      double Gn=G - p;      double violation=0;      if (beta[i] == 0) {        if (Gp < 0) {          violation=-Gp;        } else         if (Gn > 0) {          violation=Gn;        } else         if (Gp > Gmax_old && Gn < -Gmax_old) {          active_size--;          swap(index,s,active_size);          s--;          continue;        }      } else       if (beta[i] >= upper_bound[GETI_SVR(i)]) {        if (Gp > 0) {          violation=Gp;        } else         if (Gp < -Gmax_old) {          active_size--;          swap(index,s,active_size);          s--;          continue;        }      } else       if (beta[i] <= -upper_bound[GETI_SVR(i)]) {        if (Gn < 0) {          violation=-Gn;        } else         if (Gn > Gmax_old) {          active_size--;          swap(index,s,active_size);          s--;          continue;        }      } else       if (beta[i] > 0) {        violation=Math.abs(Gp);      } else {        violation=Math.abs(Gn);      }      Gmax_new=Math.max(Gmax_new,violation);      Gnorm1_new+=violation;      if (Gp < H * beta[i]) {        d=-Gp / H;      } else       if (Gn > H * beta[i]) {        d=-Gn / H;      } else {        d=-beta[i];      }      if (Math.abs(d) < 1.0e-12) {        continue;      }      double beta_old=beta[i];      beta[i]=Math.min(Math.max(beta[i] + d,-upper_bound[GETI_SVR(i)]),upper_bound[GETI_SVR(i)]);      d=beta[i] - beta_old;      if (d != 0) {        for (        Feature xi : prob.x[i]) {          w[xi.getIndex() - 1]+=d * xi.getValue();        }      }    }    if (iter == 0) {      Gnorm1_init=Gnorm1_new;    }    iter++;    if (iter % 10 == 0) {      info(".");    }    if (Gnorm1_new <= eps * Gnorm1_init) {      if (active_size == l) {        break;      } else {        active_size=l;        info("*");        Gmax_old=Double.POSITIVE_INFINITY;        continue;      }    }    Gmax_old=Gmax_new;  }  info("%noptimization finished, #iter = %d%n",iter);  if (iter >= max_iter) {    info("%nWARNING: reaching max number of iterations%nUsing -s 11 may be faster%n%n");  }  double v=0;  int nSV=0;  for (i=0; i < w_size; i++) {    v+=w[i] * w[i];  }  v=0.5 * v;  for (i=0; i < l; i++) {    v+=p * Math.abs(beta[i]) - y[i] * beta[i] + 0.5 * lambda[GETI_SVR(i)] * beta[i]* beta[i];    if (beta[i] != 0) {      nSV++;    }  }  info("Objective value = %g%n",v);  info("nSV = %d%n",nSV);}  }
class C{  protected static void initializeImageRegistry(){  imageRegistry=Angular2UIPlugin.getDefault().getImageRegistry();  imageDescriptors=new HashMap<String,ImageDescriptor>();  registerImage(IMG_ANGULAR2,URL_OBJ + IMG_ANGULAR2 + ".png");}  }
class C{  private boolean checkTripZoneConsistency(){  log.info("Checking that zones and trips are consistent.");  HashSet<String> missingZones=new HashSet<String>();  for (  Trip T : trips.values()) {    BasicLocation zo=zones.getLocation(Id.create(T.zone_o,Zone.class));    BasicLocation zd=zones.getLocation(Id.create(T.zone_d,Zone.class));    if (zo == null) {      missingZones.add(T.zone_o);    }    if (zd == null) {      missingZones.add(T.zone_d);    }  }  if (missingZones.size() > 0) {    String msg=missingZones.size() + " zones are missing! Full list below: ";    for (    String s : missingZones)     msg+="\n\tZone \"" + s.toString() + "\"";    log.error(msg);    return false;  } else   log.info("All zones OK!");  return true;}  }
class C{  public TableHeaderElement(String s){  super("th",new StringElement(s));}  }
class C{  public static void sort(Object[] array,Comparator c){  Object temp;  int j, n=array.length;  for (j=n / 2; j > 0; j--) {    adjust(array,c,j,n);  }  for (j=n - 1; j > 0; j--) {    temp=array[0];    array[0]=array[j];    array[j]=temp;    adjust(array,c,1,j);  }}  }
class C{  public ValidateEditChecker(Object context){  fContext=context;}  }
class C{  public PatternCharacter createPatternCharacter(){  PatternCharacterImpl patternCharacter=new PatternCharacterImpl();  return patternCharacter;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void main(List<JCCompilationUnit> trees){  complete(trees,null);}  }
class C{  public void changeLock(){  put(LOCK_NUMBER,getInt(LOCK_NUMBER) + 1);  requestSave();}  }
class C{  protected KMLOrbitViewController(WorldWindow wwd){  super(wwd);  this.orbitView=(OrbitView)wwd.getView();}  }
class C{  public Shape3DPortrayal3D(Geometry geometry,Color color){  this(geometry,appearanceForColor(color));}  }
class C{  public synchronized void write(int b) throws IOException {  out.write(b);  incCount(1);}  }
class C{  public WarRootContextTest(String testName,EnvironmentTestData testData) throws Exception {  super(testName,testData);}  }
class C{  private void updatePanel(){  lLearningRate.setText("" + network.getSom().getAlpha());  lNeighborhoodSize.setText("" + network.getSom().getNeighborhoodSize());  iterationsLabel.setText("" + trainer.getIteration());}  }
class C{  public static Path createTempFile(Path tempDirPath,String prefix,String suffix) throws IOException {  if (!Files.exists(tempDirPath)) {    Files.createDirectory(tempDirPath);  }  return Files.createTempFile(tempDirPath,prefix,suffix,permissions);}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  public static String stringFor(int n){switch (n) {case cudaLimitStackSize:    return "cudaLimitStackSize";case cudaLimitPrintfFifoSize:  return "cudaLimitPrintfFifoSize";case cudaLimitMallocHeapSize:return "cudaLimitMallocHeapSize";case cudaLimitDevRuntimeSyncDepth:return "cudaLimitDevRuntimeSyncDepth";case cudaLimitDevRuntimePendingLaunchCount:return "cudaLimitDevRuntimePendingLaunchCount";}return "INVALID cudaLimit: " + n;}  }
