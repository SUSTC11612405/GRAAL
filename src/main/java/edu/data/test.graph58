class C{  public String toString(int maxKeysToPrint,boolean multiline){  PriorityQueue<E> pq=clone();  StringBuilder sb=new StringBuilder(multiline ? "" : "[");  int numKeysPrinted=0;  NumberFormat f=NumberFormat.getInstance();  f.setMaximumFractionDigits(5);  while (numKeysPrinted < maxKeysToPrint && pq.hasNext()) {    double priority=pq.getPriority();    E element=pq.next();    sb.append(element == null ? "null" : element.toString());    sb.append(" : ");    sb.append(f.format(priority));    if (numKeysPrinted < size() - 1)     sb.append(multiline ? "\n" : ", ");    numKeysPrinted++;  }  if (numKeysPrinted < size())   sb.append("...");  if (!multiline)   sb.append("]");  return sb.toString();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_HostileUp_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200988,skilltarget,skillcaster,skillname);}  }
class C{  Node<K,V> findNear(K kkey,int rel){  Comparable<? super K> key=comparable(kkey);  for (; ; ) {    Node<K,V> b=findPredecessor(key);    Node<K,V> n=b.next;    for (; ; ) {      if (n == null)       return ((rel & LT) == 0 || b.isBaseHeader()) ? null : b;      Node<K,V> f=n.next;      if (n != b.next)       break;      Object v=n.value;      if (v == null) {        n.helpDelete(b,f);        break;      }      if (v == n || b.value == null)       break;      int c=key.compareTo(n.key);      if ((c == 0 && (rel & EQ) != 0) || (c < 0 && (rel & LT) == 0))       return n;      if (c <= 0 && (rel & LT) != 0)       return b.isBaseHeader() ? null : b;      b=n;      n=f;    }  }}  }
class C{  public static void buildPositionStats(JsonObject json,EntityPlayerMP player){  json.addProperty("XPos",player.posX);  json.addProperty("YPos",player.posY);  json.addProperty("ZPos",player.posZ);  json.addProperty("Pitch",player.rotationPitch);  json.addProperty("Yaw",player.rotationYaw);}  }
class C{  public boolean isPlainText(){  return text != null;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PERSONAL_SHOP_SOLD_OUT(String value0){  return new SM_SYSTEM_MESSAGE(1300665,value0);}  }
class C{  private void initialize(URI p_other){  m_scheme=p_other.getScheme();  m_userinfo=p_other.getUserinfo();  m_host=p_other.getHost();  m_port=p_other.getPort();  m_regAuthority=p_other.getRegBasedAuthority();  m_path=p_other.getPath();  m_queryString=p_other.getQueryString();  m_fragment=p_other.getFragment();}  }
class C{  private static BitMatrix encodeLowLevel(DefaultPlacement placement,SymbolInfo symbolInfo){  int symbolWidth=symbolInfo.getSymbolDataWidth();  int symbolHeight=symbolInfo.getSymbolDataHeight();  ByteMatrix matrix=new ByteMatrix(symbolInfo.getSymbolWidth(),symbolInfo.getSymbolHeight());  int matrixY=0;  for (int y=0; y < symbolHeight; y++) {    int matrixX;    if ((y % symbolInfo.matrixHeight) == 0) {      matrixX=0;      for (int x=0; x < symbolInfo.getSymbolWidth(); x++) {        matrix.set(matrixX,matrixY,(x % 2) == 0);        matrixX++;      }      matrixY++;    }    matrixX=0;    for (int x=0; x < symbolWidth; x++) {      if ((x % symbolInfo.matrixWidth) == 0) {        matrix.set(matrixX,matrixY,true);        matrixX++;      }      matrix.set(matrixX,matrixY,placement.getBit(x,y));      matrixX++;      if ((x % symbolInfo.matrixWidth) == symbolInfo.matrixWidth - 1) {        matrix.set(matrixX,matrixY,(y % 2) == 0);        matrixX++;      }    }    matrixY++;    if ((y % symbolInfo.matrixHeight) == symbolInfo.matrixHeight - 1) {      matrixX=0;      for (int x=0; x < symbolInfo.getSymbolWidth(); x++) {        matrix.set(matrixX,matrixY,true);        matrixX++;      }      matrixY++;    }  }  return convertByteMatrixToBitMatrix(matrix);}  }
class C{  public void postMultiply(MatrixN mat){  final MatrixN tmp=new MatrixN(size());  for (int j=0; j < size(); j++)   for (int i=0; i < size(); i++) {    double f=0.;    for (int k=0; k < size(); k++)     f+=get(i,k) * mat.get(k,j);    tmp.set(i,j,f);  }  set(tmp);}  }
class C{  void addAck(String producerKey,String consumerKey,String ackedMessageID,String destNameToBeAcked){  acksVec.add(new Ack(producerKey,consumerKey,ackedMessageID,destNameToBeAcked));}  }
class C{  @Override protected float evaluate(Target target){  return Float.NaN;}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=(operation == null) ? 0 : operation.hashCode();  result+=prime * ((text == null) ? 0 : text.hashCode());  return result;}  }
class C{  public synchronized final int evictionCount(){  return evictionCount;}  }
class C{  public JavaCommand(String mainClassName,ClassPath classPath,String... mainArgs){  this(mainClassName,classPath,null,null,mainArgs);}  }
class C{  private void removeDataTagReference(final Alarm alarm){  tagConfigGateway.removeAlarmFromTag(alarm.getTagId(),alarm.getId());}  }
class C{  public DefaultRetryPolicy(int initialTimeoutMs,int maxNumRetries,float backoffMultiplier){  mCurrentTimeoutMs=initialTimeoutMs;  mMaxNumRetries=maxNumRetries;  mBackoffMultiplier=backoffMultiplier;}  }
class C{  public void showSecondaryMenu(){  mSlidingMenu.showSecondaryMenu();}  }
class C{  public static ExpectedCondition<Boolean> elementHasAttributeWithValue(final WebElement element,final String attributeName,final String attributeValue){  return null;}  }
class C{  public final int read(byte ba[],int off,int len) throws IOException {  return is.read(ba,off,len);}  }
class C{  public IntIterator edgeRows(){  return getEdgeTable().rows();}  }
class C{  public static void printThread(String tag,String msg){  if (IS_DEBUG_OF_THREAD) {    Log.w(tag,"### " + msg + " -> "+ "{name: "+ Thread.currentThread().getName()+ " , "+ "id:"+ Thread.currentThread().getId()+ "}");  }}  }
class C{  public Builder trackResize(Boolean trackResize){  this.trackResize=trackResize;  return this;}  }
class C{  public DefaultRetryPolicy(){  this(DEFAULT_TIMEOUT_MS,DEFAULT_MAX_RETRIES,DEFAULT_BACKOFF_MULT);}  }
class C{  public MessagesSearchDialogsQuery q(String value){  return unsafeParam("q",value);}  }
class C{  public static void toEntPos(Entity ent,Vec3 pos){  ent.posX=pos.xCoord;  ent.posY=pos.yCoord;  ent.posZ=pos.zCoord;}  }
class C{  public static String sendUpsRequest(String upsService,String xmlString,String shipmentGatewayConfigId,String resource,Delegator delegator,Locale locale) throws UpsConnectException {  String conStr=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"connectUrl",resource,"shipment.ups.connect.url");  if (conStr == null) {    throw new UpsConnectException(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsIncompleteConnectionURL",locale));  }  if (upsService == null) {    throw new UpsConnectException(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsServiceNameCannotBeNull",locale));  }  if (xmlString == null) {    throw new UpsConnectException(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsXmlMessageCannotBeNull",locale));  }  conStr=conStr.trim();  if (!conStr.endsWith("/")) {    conStr=conStr + "/";  }  conStr=conStr + upsService;  String timeOutStr=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"connectTimeout",resource,"shipment.ups.connect.timeout","60");  int timeout=60;  try {    timeout=Integer.parseInt(timeOutStr);  } catch (  NumberFormatException e) {    Debug.logError(e,"Unable to set timeout to " + timeOutStr + " using default "+ timeout);  }  HttpClient http=new HttpClient(conStr);  http.setTimeout(timeout * 1000);  http.setAllowUntrusted(true);  String response=null;  try {    response=http.post(xmlString);  } catch (  HttpClientException e) {    Debug.logError(e,"Problem connecting with UPS server [" + conStr + "]",module);    throw new UpsConnectException(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsURLConnectionProblem",UtilMisc.toMap("exception",e),locale));  }  if (response == null) {    throw new UpsConnectException(UtilProperties.getMessage(resourceError,"FacilityShipmentUpsReceivedNullResponse",locale));  }  if (Debug.verboseOn())   Debug.logVerbose("UPS Response : " + response,module);  return response;}  }
class C{  public String[] computeAlignmentPair(String query){  if (getCigar().getCigarElements().size() == 0) {    return new String[]{"No alignment","mapQ=0 (not uniquely mapped)",""};  }  if (query.equals("*"))   return new String[]{"No alignment","no string stored"};  final StringBuilder gappedQueryBuffer=new StringBuilder();  final StringBuilder gappedReferenceBuffer=new StringBuilder();  int posQuery=0;  for (  CigarElement element : getCigar().getCigarElements()) {    for (int i=0; i < element.getLength(); i++) {switch (element.getOperator()) {case D:        gappedQueryBuffer.append("-");      gappedReferenceBuffer.append("?");    break;case M:  gappedQueryBuffer.append(query.charAt(posQuery));gappedReferenceBuffer.append("?");posQuery++;break;case I:gappedQueryBuffer.append(query.charAt(posQuery));gappedReferenceBuffer.append("-");posQuery++;break;case N:gappedQueryBuffer.append(".");gappedReferenceBuffer.append("?");break;case S:posQuery++;break;case H:break;case P:gappedQueryBuffer.append("*");gappedReferenceBuffer.append("*");break;case EQ:gappedQueryBuffer.append(query.charAt(posQuery));gappedReferenceBuffer.append(query.charAt(posQuery));posQuery++;break;case X:gappedQueryBuffer.append(query.charAt(posQuery));gappedReferenceBuffer.append("?");posQuery++;break;}}}final String gappedQuerySequence=gappedQueryBuffer.toString();final String gappedReferenceSequence;if (getOptionalFields().get("MD") != null) {gappedReferenceSequence=Diff.getReference((String)getOptionalFields().get("MD"),gappedQuerySequence,gappedReferenceBuffer.toString());} else gappedReferenceSequence=gappedReferenceBuffer.toString();return new String[]{gappedQuerySequence,gappedReferenceSequence};}  }
class C{  public static String[][] APOS_ESCAPE(){  return APOS_ESCAPE.clone();}  }
class C{  public int length(){  return this.map.size();}  }
class C{  public void openOtherProfile(@NonNull Activity activity,String memberId,DeepLinkListener callback){  this.deepLinkListener=callback;  LISession session=LISessionManager.getInstance(activity.getApplicationContext()).getSession();  if (!session.isValid()) {    callback.onDeepLinkError(new LIDeepLinkError(LIAppErrorCode.NOT_AUTHENTICATED,"there is no access token"));    return;  }  try {    if (!LIAppVersion.isLIAppCurrent(activity)) {      AppStore.goAppStore(activity,true);      return;    }    deepLinkToProfile(activity,memberId,session.getAccessToken());  } catch (  ActivityNotFoundException e) {    callback.onDeepLinkError(new LIDeepLinkError(LIAppErrorCode.LINKEDIN_APP_NOT_FOUND,"LinkedIn app needs to be either installed or` updated"));    deepLinkListener=null;  }}  }
class C{  @CheckReturnValue public AddCmd files(String... files){  return files(ImmutableList.copyOf(files));}  }
class C{  @SuppressWarnings("UseJBColor") @Nullable public static Color parseColor(@Nullable String s){  s=StringUtil.trim(s);  if (StringUtil.isEmpty(s)) {    return null;  }  if (s.charAt(0) == '#') {    long longColor;    try {      longColor=Long.parseLong(s.substring(1),16);    } catch (    NumberFormatException e) {      return null;    }    if (s.length() == 4 || s.length() == 5) {      long a=s.length() == 4 ? 0xff : extend((longColor & 0xf000) >> 12);      long r=extend((longColor & 0xf00) >> 8);      long g=extend((longColor & 0x0f0) >> 4);      long b=extend((longColor & 0x00f));      longColor=(a << 24) | (r << 16) | (g << 8)| b;      return new Color((int)longColor,true);    }    if (s.length() == 7) {      longColor|=0x00000000ff000000;    } else     if (s.length() != 9) {      return null;    }    return new Color((int)longColor,true);  }  return null;}  }
class C{  public boolean contains(Rectangle2D r){  return false;}  }
class C{  public Sentence(String sentence,String tag){  tokens=sentence.split("\\s+");  lemmas=tokens;  tags=tag.split("\\s+");  if (tokens.length != tags.length) {    throw new IllegalArgumentException("Lengths do not match!");  }  position=new int[tokens.length];  for (int i=0; i < tokens.length; i++) {    position[i]=i;  }}  }
class C{  protected void shuffleTestAndTrainingSetTogether(){  ArrayList lOverall=new ArrayList(TestFiles.size() + TrainingFiles.size());  lOverall.addAll(TrainingFiles);  lOverall.addAll(TestFiles);  utils.shuffleList(lOverall);  TestFiles.clear();  TrainingFiles.clear();  TestFiles.addAll(lOverall.subList(0,TestFiles.size()));  TrainingFiles.addAll(lOverall.subList(TestFiles.size(),lOverall.size()));}  }
class C{  @Override public void keyTyped(KeyEvent e){synchronized (keyLock) {    keysTyped.addFirst(e.getKeyChar());  }}  }
class C{  protected String dfp2sci(){  char rawdigits[]=new char[mant.length * 4];  char outputbuffer[]=new char[mant.length * 4 + 20];  int p;  int q;  int e;  int ae;  int shf;  p=0;  for (int i=mant.length - 1; i >= 0; i--) {    rawdigits[p++]=(char)((mant[i] / 1000) + '0');    rawdigits[p++]=(char)(((mant[i] / 100) % 10) + '0');    rawdigits[p++]=(char)(((mant[i] / 10) % 10) + '0');    rawdigits[p++]=(char)(((mant[i]) % 10) + '0');  }  for (p=0; p < rawdigits.length; p++) {    if (rawdigits[p] != '0') {      break;    }  }  shf=p;  q=0;  if (sign == -1) {    outputbuffer[q++]='-';  }  if (p != rawdigits.length) {    outputbuffer[q++]=rawdigits[p++];    outputbuffer[q++]='.';    while (p < rawdigits.length) {      outputbuffer[q++]=rawdigits[p++];    }  } else {    outputbuffer[q++]='0';    outputbuffer[q++]='.';    outputbuffer[q++]='0';    outputbuffer[q++]='e';    outputbuffer[q++]='0';    return new String(outputbuffer,0,5);  }  outputbuffer[q++]='e';  e=exp * 4 - shf - 1;  ae=e;  if (e < 0) {    ae=-e;  }  for (p=1000000000; p > ae; p/=10) {  }  if (e < 0) {    outputbuffer[q++]='-';  }  while (p > 0) {    outputbuffer[q++]=(char)(ae / p + '0');    ae%=p;    p/=10;  }  return new String(outputbuffer,0,q);}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  public JSONArray(JSONTokener x) throws JSONException {  this();  if (x.nextClean() != '[') {    throw x.syntaxError("A JSONArray text must start with '['");  }  if (x.nextClean() != ']') {    x.back();    for (; ; ) {      if (x.nextClean() == ',') {        x.back();        this.myArrayList.add(JSONObject.NULL);      } else {        x.back();        this.myArrayList.add(x.nextValue());      }switch (x.nextClean()) {case ',':        if (x.nextClean() == ']') {          return;        }      x.back();    break;case ']':  return;default :throw x.syntaxError("Expected a ',' or ']'");}}}}  }
class C{  public static int calcTextHeight(Paint paint,String demoText){  Rect r=new Rect();  paint.getTextBounds(demoText,0,demoText.length(),r);  return r.height();}  }
class C{  public void clear(){  backedMap.clear();}  }
class C{  public void init$Children(){  children=new ASTNode[6];  setChild(new List(),1);  setChild(new List(),2);  setChild(new Opt(),3);  setChild(new List(),5);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public ParConstructorAccess fullCopy(){  ParConstructorAccess tree=(ParConstructorAccess)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public void testQueryWithPagination() throws Exception {  TaskQuery query=taskService.createTaskQuery();  assertEquals(10,query.count());  assertEquals(2,query.listPage(0,2).size());  query=taskService.createTaskQuery().excludeSubtasks();  assertEquals(3,query.count());  assertEquals(1,query.listPage(0,1).size());}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  @Override public void addDiag(Diag diag){  Location loc=SimpleLocation.UNKNOWN;  if (diag.getLocation() == SimpleLocation.UNKNOWN || diag.getLocation() == SimpleLocation.TOPLEVEL) {    loc=swaggerFileLocation;  } else {    loc=new SimpleLocation(String.format("%s: %s",swaggerFileName,diag.getLocation().toString()));  }  diag=diag.getKind() == Kind.ERROR ? Diag.error(loc,diag.getMessage()) : Diag.warning(loc,diag.getMessage());  diags.add(diag);  if (diag.getKind() == Diag.Kind.ERROR) {    errorCount++;  }}  }
class C{  public BobcatTargetLocator(TargetLocator targetLocator,FrameSwitcher frameSwitcher){  super();  this.targetLocator=targetLocator;  this.frameSwitcher=frameSwitcher;}  }
class C{  @Override public boolean isSingleton(){  return true;}  }
class C{  public int intValue(){  Dfp rounded;  int result=0;  rounded=rint();  if (rounded.greaterThan(newInstance(2147483647))) {    return 2147483647;  }  if (rounded.lessThan(newInstance(-2147483648))) {    return -2147483648;  }  for (int i=mant.length - 1; i >= mant.length - rounded.exp; i--) {    result=result * RADIX + rounded.mant[i];  }  if (rounded.sign == -1) {    result=-result;  }  return result;}  }
class C{  public AuthConfirmQuery(VkApiClient client,UserActor actor,int clientId,String clientSecret,String phone,String code){  super(client,"auth.confirm",ConfirmResponse.class);  accessToken(actor.getAccessToken());  clientId(clientId);  clientSecret(clientSecret);  phone(phone);  code(code);}  }
class C{  public ButtonFactory(String buttonTexture,int width,int height,Point disabledStart,Point enabledStart,Point hoveredStart){  this.buttonTexture=buttonTexture;  this.width=width;  this.height=height;  this.disabledStart=disabledStart;  this.enabledStart=enabledStart;  this.hoveredStart=hoveredStart;}  }
class C{  @Override public void sldDataUpdated(SLDDataInterface sldData,boolean dataEditedFlag){  menuSaveSLDEditorFile.setEnabled((sldData.getSldEditorFile() != null) && dataEditedFlag);  menuSaveSLDFile.setEnabled((sldData.getSLDFile() != null) && dataEditedFlag);  menuSaveAsSLDFile.setEnabled(true);  menuSaveAsSLDEditorFile.setEnabled(true);  if (application != null) {    application.updateWindowTitle(dataEditedFlag);  }}  }
class C{  public void write(short u0,short u1){  write(u0);  write(u1);}  }
class C{  public static void e(String tag,String msg){  if (sLevel > LEVEL_ERROR) {    return;  }  Log.e(tag,msg);}  }
class C{  public static SymbolTypeConfig parseSymbolTypeConfig(Class<?> localisationClass,Class<?> panelId,XMLFieldConfigEnumValue valueObj){  SymbolTypeConfig config=new SymbolTypeConfig(panelId);  String groupName=valueObj.getGroupName();  boolean isSeparateGroup=valueObj.isSeparateGroup();  if (groupName != null) {    config.setGroupName(groupName);  }  config.setSeparateGroup(isSeparateGroup);  for (  XMLFieldConfigEnumValueItem itemObj : valueObj.getItem()) {    config.addOption(itemObj.getId(),getLocalisedText(localisationClass,itemObj.getLabel()));  }  FieldList fieldList=valueObj.getFieldList();  if (fieldList != null) {    for (    XMLFieldConfigEnumValueField field : fieldList.getField()) {      config.addField(field.getId(),field.isEnabled());    }  }  return config;}  }
class C{  protected Set<D> computeReturnFlowFunction(FlowFunction<D> retFunction,D d1,D d2,N callSite,Set<D> callerSideDs){  return retFunction.computeTargets(d2);}  }
class C{  @Override public void paint(@NotNull Graphics2D gc){  myScreenView.getSize(myScreenViewSize);  mySizeRectangle.setBounds(myScreenView.getX(),myScreenView.getY(),myScreenViewSize.width,myScreenViewSize.height);  Rectangle2D.intersect(mySizeRectangle,gc.getClipBounds(),mySizeRectangle);  if (mySizeRectangle.isEmpty()) {    return;  }  Graphics2D g=(Graphics2D)gc.create();  Shape prevClip=null;  Shape screenShape=myScreenView.getScreenShape();  if (screenShape != null) {    prevClip=g.getClip();    g.clip(screenShape);  }  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  g.setColor(BLUEPRINT_BG_COLOR);  g.fillRect(mySizeRectangle.x,mySizeRectangle.y,mySizeRectangle.width,mySizeRectangle.height);  if (prevClip != null) {    g.setClip(prevClip);  }  NlModel model=myScreenView.getModel();  if (model.getComponents().size() == 0) {    return;  }  NlComponent component=model.getComponents().get(0);  component=component.getRoot();  ViewHandlerManager viewHandlerManager=ViewHandlerManager.get(model.getFacet());  if (drawComponent(g,component,viewHandlerManager,false)) {    Dimension size=myScreenView.getSize();    DesignSurface surface=myScreenView.getSurface();    if (size.width != 0 && size.height != 0) {      surface.repaint(myScreenView.getX(),myScreenView.getY(),size.width,size.height);    } else {      surface.repaint();    }  }  g.dispose();}  }
class C{  static void removeTextChangedListener(TextView textView,TextWatcher watcher){  textView.removeTextChangedListener(watcher);}  }
class C{  private void removeListOfFields(final List<String> fieldsToRemove,final Object targetObject) throws NoSuchFieldException, IllegalAccessException {  for (  String fieldName : fieldsToRemove) {    Field field=getField(targetObject.getClass(),fieldName);    if (field == null) {      throw new NoSuchFieldException("Field: '" + fieldName + "' not found "+ "in "+ targetObject.getClass().getName());    }    if (isSimpleType(field)) {      try {        Object parsedObject=parse("0",field);        setSimpleField(targetObject,fieldName,parsedObject);      } catch (      NoSimpleValueParseException e) {        e.printStackTrace();      }    } else {      setSimpleField(targetObject,fieldName,null);    }  }}  }
class C{  private boolean skipTripleQuote(char quot){  if (pos + 1 < buffer.length && buffer[pos] == quot && buffer[pos + 1] == quot) {    pos+=2;    return true;  } else {    return false;  }}  }
class C{  public double chiSquare(final long[][] counts) throws MathIllegalArgumentException, NullArgumentException {  checkArray(counts);  int nRows=counts.length;  int nCols=counts[0].length;  double[] rowSum=new double[nRows];  double[] colSum=new double[nCols];  double total=0.0d;  for (int row=0; row < nRows; row++) {    for (int col=0; col < nCols; col++) {      rowSum[row]+=counts[row][col];      colSum[col]+=counts[row][col];      total+=counts[row][col];    }  }  double sumSq=0.0d;  double expected=0.0d;  for (int row=0; row < nRows; row++) {    for (int col=0; col < nCols; col++) {      expected=(rowSum[row] * colSum[col]) / total;      sumSq+=((counts[row][col] - expected) * (counts[row][col] - expected)) / expected;    }  }  return sumSq;}  }
class C{  @Override public boolean equals(Object another){  if (another == null)   return false;  if (!(another instanceof GenericPrincipal))   return false;  if (!getUserName().equals(((GenericPrincipal)another).getUserName()))   return false;  return true;}  }
class C{  public void processUtterance(Utterance utterance) throws ProcessException {  Relation relation=utterance.createRelation(Relation.PHRASE);  Item p=null;  for (Item w=utterance.getRelation(Relation.WORD).getHead(); w != null; w=w.getNext()) {    if (p == null) {      p=relation.appendItem();      p.getFeatures().setString("name","BB");    }    p.addDaughter(w);    String results=(String)cart.interpret(w);    if (results.equals("BB")) {      p=null;    }  }}  }
class C{  public FontAction(String group){  super(group);}  }
class C{  public static boolean canRemoveItem(Player player,Item item){  ItemTemplate it=item.getItemTemplate();  if (it.getCategory() == ItemCategory.QUEST) {    return true;  }  return true;}  }
class C{  static ClassLoader findClassLoader() throws ConfigurationError {  ClassLoader context=SecuritySupport.getContextClassLoader();  ClassLoader system=SecuritySupport.getSystemClassLoader();  ClassLoader chain=system;  while (true) {    if (context == chain) {      ClassLoader current=ObjectFactory.class.getClassLoader();      chain=system;      while (true) {        if (current == chain) {          return system;        }        if (chain == null) {          break;        }        chain=SecuritySupport.getParentClassLoader(chain);      }      return current;    }    if (chain == null) {      break;    }    chain=SecuritySupport.getParentClassLoader(chain);  }  return context;}  }
class C{  public static void saveImage(Bitmap finalBitmap,String name){  String root=Environment.getExternalStorageDirectory().toString();  File myDir=new File(root + "/saved_images");  myDir.mkdirs();  String fileName="Image-" + name + ".jpg";  File file=new File(myDir,fileName);  if (file.exists()) {    file.delete();  }  try {    FileOutputStream out=new FileOutputStream(file);    finalBitmap.compress(Bitmap.CompressFormat.JPEG,100,out);    out.flush();    out.close();  } catch (  Exception exception) {    Timber.e("Exception thrown in saveImage()");    Timber.e(exception);  }}  }
class C{  private void removeDuplicateDrawables(FileHandle handle){  boolean refreshDrawables=false;  String name=DrawableData.proper(handle.name());  for (int i=0; i < AtlasData.getInstance().getDrawables().size; i++) {    DrawableData data=AtlasData.getInstance().getDrawables().get(i);    if (name.equals(DrawableData.proper(data.file.name()))) {      AtlasData.getInstance().getDrawables().removeValue(data,true);      for (      Array<StyleData> datas : JsonData.getInstance().getClassStyleMap().values()) {        for (        StyleData tempData : datas) {          for (          StyleProperty prop : tempData.properties.values()) {            if (prop != null && prop.type.equals(Drawable.class) && prop.value != null && prop.value.equals(data.toString())) {              prop.value=null;            }          }        }      }      refreshDrawables=true;      i--;    }  }  PanelStyleProperties.instance.populate(PanelClassBar.instance.getStyleSelectBox().getSelected());  PanelPreviewProperties.instance.render();  if (refreshDrawables) {    gatherDrawables();  }}  }
class C{  public void uiSelectingTab(long time,int id){  onTabSelecting(time,id);}  }
class C{  public String resolveIdentifier(XMLResourceIdentifier resourceIdentifier) throws IOException, XNIException {  String resolvedId=null;  String namespace=resourceIdentifier.getNamespace();  if (namespace != null) {    resolvedId=resolveURI(namespace);  }  if (resolvedId == null) {    String publicId=resourceIdentifier.getPublicId();    String systemId=getUseLiteralSystemId() ? resourceIdentifier.getLiteralSystemId() : resourceIdentifier.getExpandedSystemId();    if (publicId != null && systemId != null) {      resolvedId=resolvePublic(publicId,systemId);    } else     if (systemId != null) {      resolvedId=resolveSystem(systemId);    }  }  return resolvedId;}  }
class C{  private static int writeMatches(char separator,String readName,IReadBlock readBlock,Writer w) throws IOException {  int countMatches=0;  if (readBlock.getNumberOfAvailableMatchBlocks() == 0)   w.write(String.format("%s%c\n",readName,separator)); else {    w.write(readName);    for (    IMatchBlock matchBlock : readBlock.getMatchBlocks()) {      w.write(String.format("%c%d%c%.2f",separator,matchBlock.getTaxonId(),separator,matchBlock.getBitScore()));      countMatches++;    }    w.write("\n");  }  return countMatches;}  }
class C{  public static String serveObjectData(HttpServletRequest request,HttpServletResponse response){  Delegator delegator=(Delegator)request.getAttribute("delegator");  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  HttpSession session=request.getSession();  Locale locale=UtilHttp.getLocale(request);  GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");  String userAgent=request.getHeader("User-Agent");  Map<String,Object> httpParams=UtilHttp.getParameterMap(request);  String contentId=(String)httpParams.get("contentId");  if (UtilValidate.isEmpty(contentId)) {    String errorMsg="Required parameter contentId not found!";    Debug.logError(errorMsg,module);    request.setAttribute("_ERROR_MESSAGE_",errorMsg);    return "error";  }  String permissionService=EntityUtilProperties.getPropertyValue("content.properties","stream.permission.service","genericContentPermission",delegator);  GenericValue content;  try {    content=EntityQuery.use(delegator).from("Content").where("contentId",contentId).queryOne();  } catch (  GenericEntityException e) {    Debug.logError(e,module);    request.setAttribute("_ERROR_MESSAGE_",e.getMessage());    return "error";  }  if (content == null) {    String errorMsg="No content found for Content ID: " + contentId;    Debug.logError(errorMsg,module);    request.setAttribute("_ERROR_MESSAGE_",errorMsg);    return "error";  }  String dataResourceId=content.getString("dataResourceId");  if (UtilValidate.isEmpty(dataResourceId)) {    String errorMsg="No Data Resource found for Content ID: " + contentId;    Debug.logError(errorMsg,module);    request.setAttribute("_ERROR_MESSAGE_",errorMsg);    return "error";  }  GenericValue dataResource;  try {    dataResource=EntityQuery.use(delegator).from("DataResource").where("dataResourceId",dataResourceId).queryOne();  } catch (  GenericEntityException e) {    Debug.logError(e,module);    request.setAttribute("_ERROR_MESSAGE_",e.getMessage());    return "error";  }  if (dataResource == null) {    String errorMsg="No Data Resource found for ID: " + dataResourceId;    Debug.logError(errorMsg,module);    request.setAttribute("_ERROR_MESSAGE_",errorMsg);    return "error";  }  String isPublic=dataResource.getString("isPublic");  if (UtilValidate.isEmpty(isPublic)) {    isPublic="N";  }  if (!"Y".equalsIgnoreCase(isPublic)) {    Map<String,? extends Object> permSvcCtx=UtilMisc.toMap("userLogin",userLogin,"locale",locale,"mainAction","VIEW","contentId",contentId);    Map<String,Object> permSvcResp;    try {      permSvcResp=dispatcher.runSync(permissionService,permSvcCtx);    } catch (    GenericServiceException e) {      Debug.logError(e,module);      request.setAttribute("_ERROR_MESSAGE_",e.getMessage());      return "error";    }    if (ServiceUtil.isError(permSvcResp)) {      String errorMsg=ServiceUtil.getErrorMessage(permSvcResp);      Debug.logError(errorMsg,module);      request.setAttribute("_ERROR_MESSAGE_",errorMsg);      return "error";    }    Boolean hasPermission=(Boolean)permSvcResp.get("hasPermission");    if (!hasPermission.booleanValue()) {      String errorMsg=(String)permSvcResp.get("failMessage");      Debug.logError(errorMsg,module);      request.setAttribute("_ERROR_MESSAGE_",errorMsg);      return "error";    }  }  String contextRoot=(String)request.getAttribute("_CONTEXT_ROOT_");  String webSiteId=(String)session.getAttribute("webSiteId");  String dataName=dataResource.getString("dataResourceName");  String mimeType=DataResourceWorker.getMimeType(dataResource);  if (userAgent.indexOf("MSIE") > -1) {    Debug.logInfo("Found MSIE changing mime type from - " + mimeType,module);    mimeType="application/octet-stream";  }  String https="false";  String protocol=request.getProtocol();  if ("https".equalsIgnoreCase(protocol)) {    https="true";  }  Map<String,Object> resourceData;  try {    resourceData=DataResourceWorker.getDataResourceStream(dataResource,https,webSiteId,locale,contextRoot,false);  } catch (  IOException e) {    Debug.logError(e,"Error getting DataResource stream",module);    request.setAttribute("_ERROR_MESSAGE_",e.getMessage());    return "error";  }catch (  GeneralException e) {    Debug.logError(e,"Error getting DataResource stream",module);    request.setAttribute("_ERROR_MESSAGE_",e.getMessage());    return "error";  }  InputStream stream=null;  Long length=null;  if (resourceData != null) {    stream=(InputStream)resourceData.get("stream");    length=(Long)resourceData.get("length");  }  Debug.logInfo("Got resource data stream: " + length + " bytes",module);  if (stream != null && length != null) {    try {      UtilHttp.streamContentToBrowser(response,stream,length.intValue(),mimeType,dataName);    } catch (    IOException e) {      Debug.logError(e,"Unable to write content to browser",module);      request.setAttribute("_ERROR_MESSAGE_",e.getMessage());      return "io-error";    }  } else {    String errorMsg="No data is available.";    Debug.logError(errorMsg,module);    request.setAttribute("_ERROR_MESSAGE_",errorMsg);    return "error";  }  return "success";}  }
class C{  public ProcessFunctionParameterValue(ProcessFunctionParameterValue valueToCopy){  name=valueToCopy.name;  dataType=valueToCopy.dataType;  type=valueToCopy.type;  optional=valueToCopy.optional;  included=valueToCopy.included;  value=valueToCopy.value;  minOccurences=valueToCopy.minOccurences;  maxOccurences=valueToCopy.maxOccurences;  enumValueList=valueToCopy.enumValueList;}  }
class C{  public void outputData(){  System.out.print("The res:");  for (int i=num; i < allNum; i++) {    System.out.println(rs[i]);  }}  }
class C{  private void initResource(){  Resources resources=getContext().getResources();  try {    AssetManager newManager=AssetManager.class.newInstance();    Method addAssetPath=newManager.getClass().getMethod("addAssetPath",String.class);    addAssetPath.invoke(newManager,DynamicViewManager.getInstance().getUpdateFileFullPath());    Resources newResources=new Resources(newManager,resources.getDisplayMetrics(),resources.getConfiguration());    Reflect.onObject(getContext()).set("mResources",newResources);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public void activate(){  mSpectaculumView.setOnTouchListener(mOnTouchListener);  mSpectaculumViewTouchEnabled=mSpectaculumView.isTouchEnabled();  mSpectaculumView.setTouchEnabled(true);  mActive=true;}  }
class C{  static final LinkedVertexHull mergePointSegment(LinkedVertexHull left,LinkedVertexHull right){  LinkedVertexHull hull=new LinkedVertexHull();  hull.size=3;  LinkedVertexHull point=left;  LinkedVertexHull segment=right;  if (left.size == 1) {    hull.leftMost=left.root;    hull.rightMost=right.rightMost;  } else {    hull.leftMost=left.leftMost;    hull.rightMost=right.root;    point=right;    segment=left;  }  hull.root=point.root;  Vector2 p1=segment.root.point;  Vector2 p2=segment.root.next.point;  Vector2 p=point.root.point;  Vector2 v1=p.to(p1);  Vector2 v2=p1.to(p2);  double area=v1.cross(v2);  if (area < 0.0) {    point.root.next=segment.root.next;    segment.root.next.prev=point.root;    point.root.prev=segment.root;    segment.root.next=point.root;  } else {    point.root.next=segment.root;    segment.root.prev=point.root;    point.root.prev=segment.root.next;    segment.root.next.next=point.root;  }  return hull;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Root_END_A(String value0){  return new SM_SYSTEM_MESSAGE(1201131,value0);}  }
class C{  public ShapelessRecipe addIngredient(Material ingredient){  return addIngredient(1,ingredient,0);}  }
class C{  public ChangeEntriesSpaceOperationRequest(){}  }
class C{  public SparseArray(){  this(10);}  }
class C{  @Override public Throwable fillInStackTrace(){  return null;}  }
class C{  public UsersGetFollowersQueryWithFields offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=1;  result=prime * result + ((getId() == null) ? 0 : getId().hashCode());  result=prime * result + ((getGroupId() == null) ? 0 : getGroupId().hashCode());  result=prime * result + ((getTaskName() == null) ? 0 : getTaskName().hashCode());  result=prime * result + ((getTaskType() == null) ? 0 : getTaskType().hashCode());  result=prime * result + ((getTaskDesc() == null) ? 0 : getTaskDesc().hashCode());  result=prime * result + ((getTaskCron() == null) ? 0 : getTaskCron().hashCode());  result=prime * result + ((getTaskPreviousFireTime() == null) ? 0 : getTaskPreviousFireTime().hashCode());  result=prime * result + ((getTaskNextFireTime() == null) ? 0 : getTaskNextFireTime().hashCode());  result=prime * result + ((getContactEmail() == null) ? 0 : getContactEmail().hashCode());  result=prime * result + ((getEnable() == null) ? 0 : getEnable().hashCode());  result=prime * result + ((getCreateBy() == null) ? 0 : getCreateBy().hashCode());  result=prime * result + ((getCreateTime() == null) ? 0 : getCreateTime().hashCode());  result=prime * result + ((getUpdateBy() == null) ? 0 : getUpdateBy().hashCode());  result=prime * result + ((getUpdateTime() == null) ? 0 : getUpdateTime().hashCode());  return result;}  }
class C{  public int append(double[] buffer,int start,int len) throws IllegalArgumentException, IOException {  int bytesRead=0;  int bytesToRead=0;  if (start < 0 || len < 0)   throw new IllegalArgumentException("start and len must be positiv values");  if (buffer == null || buffer.length - start < len)   throw new IllegalArgumentException("Specified buffer is too samll to hold all samples.");  bytesToRead=len * frameSize;  bytesRead=read(bytesToRead);  convertToDouble(inputBuffer,bytesRead,buffer,start);  return bytesRead / frameSize;}  }
class C{  @Override public double[] makeCumulativeTestValues(){  return new double[]{0.001,0.01,0.025,0.05,0.1,0.999,0.990,0.975,0.950,0.900};}  }
class C{  public boolean addChild(DominatorNode<N> child){  if (children.contains(child)) {    return false;  } else {    children.add(child);    return true;  }}  }
class C{  public static Matrix identity(int m,int n){  Matrix A=new Matrix(m,n);  double[][] X=A.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      X[i][j]=(i == j ? 1.0 : 0.0);    }  }  return A;}  }
class C{  public long length() throws IOException {  return position;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GATHER_START_3_MINING(String value0){  return new SM_SYSTEM_MESSAGE(1330013,value0);}  }
class C{  @Path(path="popup2",login=true,access="access.user.query") public void popup2(){  String access=this.getString("access");  List<User> list=null;  if (!X.isEmpty(access)) {    list=User.loadByAccess(access);  } else {    Beans<User> bs=User.load(W.create().and(X.ID,0,W.OP_GT),0,1000);    if (bs != null) {      list=bs.getList();    }  }  JSON jo=new JSON();  if (list != null && list.size() > 0) {    List<JSON> arr=new ArrayList<JSON>();    for (    User e : list) {      JSON j=new JSON();      j.put("value",e.getId());      j.put("name",e.get("nickname") + "(" + e.get("name")+ ")");      arr.add(j);    }    jo.put("list",arr);    jo.put(X.STATE,200);  } else {    jo.put(X.STATE,201);  }  this.response(jo);}  }
class C{  public boolean isValidPoint(double x,double y){  if (x < xval[0] || x > xval[xval.length - 1] || y < yval[0] || y > yval[yval.length - 1]) {    return false;  } else {    return true;  }}  }
class C{  public boolean canGetBoolean(){  return canGet(boolean.class);}  }
class C{  public static void validate(Map<String,String> info,Map<String,? extends Object> test,boolean reverse,ModelService model,String mode,Locale locale) throws ServiceValidationException {  if (info == null || test == null) {    throw new ServiceValidationException("Cannot validate NULL maps",model);  }  Set<String> testSet=test.keySet();  Set<String> keySet=info.keySet();  if (info.size() == 0 && test.size() == 0)   return;  if (reverse && !testSet.containsAll(keySet)) {    Set<String> missing=new TreeSet<String>(keySet);    missing.removeAll(testSet);    List<String> missingMsgs=new LinkedList<String>();    for (    String key : missing) {      String msg=model.getParam(key).getPrimaryFailMessage(locale);      if (msg == null) {        String errMsg=UtilProperties.getMessage(ServiceUtil.resource,"ModelService.following_required_parameter_missing",locale);        msg=errMsg + " [" + mode+ "] ["+ model.name+ "."+ key+ "]";      }      missingMsgs.add(msg);    }    List<String> missingCopy=new LinkedList<String>();    missingCopy.addAll(missing);    throw new ServiceValidationException(missingMsgs,model,missingCopy,null,mode);  }  if (!keySet.containsAll(testSet)) {    Set<String> extra=new TreeSet<String>(testSet);    extra.removeAll(keySet);    List<String> extraMsgs=new LinkedList<String>();    for (    String key : extra) {      ModelParam param=model.getParam(key);      String msg=null;      if (param != null) {        msg=param.getPrimaryFailMessage(locale);      }      if (msg == null) {        msg="Unknown parameter found: [" + model.name + "."+ key+ "]";      }      extraMsgs.add(msg);    }    List<String> extraCopy=new LinkedList<String>();    extraCopy.addAll(extra);    throw new ServiceValidationException(extraMsgs,model,null,extraCopy,mode);  }  List<String> typeFailMsgs=new LinkedList<String>();  for (  String key : testSet) {    ModelParam param=model.getParam(key);    Object testObject=test.get(key);    String infoType=info.get(key);    if (UtilValidate.isNotEmpty(param.validators)) {      for (      ModelParam.ModelParamValidator val : param.validators) {        if (UtilValidate.isNotEmpty(val.getMethodName())) {          try {            if (!typeValidate(val,testObject)) {              String msg=val.getFailMessage(locale);              if (msg == null) {                msg="The following parameter failed validation: [" + model.name + "."+ key+ "]";              }              typeFailMsgs.add(msg);            }          } catch (          GeneralException e) {            Debug.logError(e,module);            String msg=param.getPrimaryFailMessage(locale);            if (msg == null) {              msg="The following parameter failed validation: [" + model.name + "."+ key+ "]";            }            typeFailMsgs.add(msg);          }        } else {          if (!ObjectType.instanceOf(testObject,infoType,null)) {            String msg=val.getFailMessage(locale);            if (msg == null) {              msg="The following parameter failed validation: [" + model.name + "."+ key+ "]";            }            typeFailMsgs.add(msg);          }        }      }    } else {      if (!ObjectType.instanceOf(testObject,infoType,null)) {        String testType=testObject == null ? "null" : testObject.getClass().getName();        String msg="Type check failed for field [" + model.name + "."+ key+ "]; expected type is ["+ infoType+ "]; actual type is ["+ testType+ "]";        typeFailMsgs.add(msg);      }    }  }  if (typeFailMsgs.size() > 0) {    throw new ServiceValidationException(typeFailMsgs,model,mode);  }}  }
class C{  public static void i(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_INFO) {    return;  }  Log.i(tag,msg,throwable);}  }
class C{  public IntIterator edgeRows(int node){  return edgeRows(node,UNDIRECTED);}  }
class C{  public void process() throws Exception {  assert Mary.currentState() == Mary.STATE_RUNNING;  long startTime=System.currentTimeMillis();  if (inputData == null)   throw new NullPointerException("Input data is not set.");  if (inputType.isXMLType() && inputData.getDocument() == null)   throw new NullPointerException("Input data contains no XML document.");  if (inputType.isMaryXML() && !inputData.getDocument().getDocumentElement().hasAttribute("xml:lang"))   throw new IllegalArgumentException("Mandatory attribute xml:lang is missing from maryxml document element.");  NodeList inputDataList;  MaryData rawmaryxml;  if (outputType.name().equals("PRAAT_TEXTGRID")) {    outputData=processOrLookupOneChunk(inputData,outputType,outputTypeParams);    return;  } else   if (inputType.isTextType() && inputType.name().startsWith("TEXT") || inputType.isXMLType() && !inputType.isMaryXML()) {    rawmaryxml=processOrLookupOneChunk(inputData,MaryDataType.get("RAWMARYXML"),null);    inputDataList=splitIntoChunks(rawmaryxml);  } else   if (inputType.equals(MaryDataType.get("RAWMARYXML"))) {    rawmaryxml=inputData;    inputDataList=splitIntoChunks(inputData);  } else {    outputData=processOrLookupOneChunk(inputData,outputType,outputTypeParams);    if (outputType == MaryDataType.AUDIO) {      assert appendableAudioStream != null;      appendableAudioStream.append(outputData.getAudio());      appendableAudioStream.doneAppending();    }    return;  }  assert rawmaryxml != null && rawmaryxml.getType().equals(MaryDataType.get("RAWMARYXML")) && rawmaryxml.getDocument() != null;  moveBoundariesIntoParagraphs(rawmaryxml.getDocument());  outputData=new MaryData(outputType,defaultLocale);  outputData.setDefaultVoice(defaultVoice);  outputData.setDefaultStyle(defaultStyle);  outputData.setDefaultEffects(defaultEffects);  if (outputType.isMaryXML()) {    outputData.setDocument(rawmaryxml.getDocument());  } else   if (outputType.equals(MaryDataType.get("AUDIO"))) {    outputData.setAudio(appendableAudioStream);    outputData.setAudioFileFormat(audioFileFormat);  }  int len=inputDataList.getLength();  for (int i=0; i < len && !abortRequested; i++) {    Element currentInputParagraph=(Element)inputDataList.item(i);    assert currentInputParagraph.getTagName().equals(MaryXML.PARAGRAPH);    NodeList outputNodeList=null;    if (DomUtils.getPlainTextBelow(currentInputParagraph).trim().equals("")) {      outputNodeList=currentInputParagraph.getChildNodes();    } else {      MaryData oneInputData=extractParagraphAsMaryData(rawmaryxml,currentInputParagraph);      MaryData oneOutputData=processOrLookupOneChunk(oneInputData,outputType,outputTypeParams);      if (outputType.isMaryXML()) {        NodeList outParagraphList=oneOutputData.getDocument().getDocumentElement().getElementsByTagName(MaryXML.PARAGRAPH);        outputNodeList=outParagraphList;      } else {        assert outputData != null;        outputData.append(oneOutputData);      }    }    if (outputType.isMaryXML()) {      assert outputNodeList != null;      DomUtils.replaceElement(currentInputParagraph,outputNodeList);    }  }  long stopTime=System.currentTimeMillis();  Log.i(Mary.LOG,"Request processed in " + (stopTime - startTime) + " ms.");  for (  MaryModule m : usedModules) {    Log.i(Mary.LOG,"   " + m.name() + " took "+ timingInfo.get(m)+ " ms");  }  if (appendableAudioStream != null)   appendableAudioStream.doneAppending();}  }
class C{  public static String arrayToCommaDelimitedString(Object[] arr){  return arrayToDelimitedString(arr,",");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_ARTIFACT_WIN_FORT_TO_ME(String value0){  return new SM_SYSTEM_MESSAGE(1390207,value0);}  }
class C{  public Bindings add(String property,JRadioButton[] cs){  registerPropertyChangeListener(cs);  return add(new JRadioButtonBinding(property,cs,0));}  }
class C{  private static int computeCountRec(int pid,Node v,ClassificationViewer viewer,int top,NodeIntegerArray numbering){  for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {    top=computeCountRec(pid,e.getTarget(),viewer,top,numbering);  }  if (v.getOutDegree() == 0) {    NodeData data=viewer.getNodeData(v);    if (data != null && data.getSummarized() != null)     top+=data.getSummarized()[pid];  }  numbering.set(v,top);  return top;}  }
class C{  public void addButtonPressedListener(FieldConfigStringButtonInterface listener){  if (buttonPressedListenerList == null) {    buttonPressedListenerList=new ArrayList<FieldConfigStringButtonInterface>();  }  buttonPressedListenerList.add(listener);}  }
class C{  @Override public void infoEntry(InfoEntry infoEntry){  throw new UnsupportedOperationException();}  }
class C{  public boolean supportsSeek() throws IOException {  return false;}  }
class C{  @Override public void close(){  for (int i=0; i < dictionaries.length; i++) {    CarbonUtil.clearDictionaryCache(dictionaries[i]);  }}  }
class C{  private int[] makeDefStateList(){  int[] retArray=new int[fElemMapSize];  for (int index=0; index < fElemMapSize; index++)   retArray[index]=-1;  return retArray;}  }
class C{  public void stopRecordingAudio(String id){  AudioPlayer audio=this.players.get(id);  if (audio != null) {    audio.stopRecording();  }}  }
class C{  public static boolean isXML11NameStart(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_NAME_START) != 0) || (0x10000 <= c && c < 0xF0000);}  }
class C{  public static String slurpFileNoExceptions(String filename,String encoding){  try {    return slurpFile(filename,encoding);  } catch (  Exception e) {    throw new RuntimeException();  }}  }
class C{  CharSequence buildHistory(){  SQLiteOpenHelper helper=new DBHelper(activity);  SQLiteDatabase db=null;  Cursor cursor=null;  try {    db=helper.getWritableDatabase();    cursor=db.query(DBHelper.TABLE_NAME,COLUMNS,null,null,null,null,DBHelper.TIMESTAMP_COL + " DESC");    DateFormat format=DateFormat.getDateTimeInstance(DateFormat.MEDIUM,DateFormat.MEDIUM);    StringBuilder historyText=new StringBuilder(1000);    while (cursor.moveToNext()) {      historyText.append('"').append(massageHistoryField(cursor.getString(0))).append("\",");      historyText.append('"').append(massageHistoryField(cursor.getString(1))).append("\",");      historyText.append('"').append(massageHistoryField(cursor.getString(2))).append("\",");      historyText.append('"').append(massageHistoryField(cursor.getString(3))).append("\",");      long timestamp=cursor.getLong(3);      historyText.append('"').append(massageHistoryField(format.format(new Date(timestamp)))).append("\",");      historyText.append('"').append(massageHistoryField(cursor.getString(4))).append("\"\r\n");    }    return historyText;  }  finally {    close(cursor,db);  }}  }
class C{  private static int removeWhiteSpace(char[] data){  if (data == null) {    return 0;  }  int newSize=0;  int len=data.length;  for (int i=0; i < len; i++) {    if (!isWhiteSpace(data[i])) {      data[newSize++]=data[i];    }  }  return newSize;}  }
class C{  boolean relative(){  return rel;}  }
class C{  public void denyAll(SimpleFlagHolder holder){  denyAll(holder.generalPermissions);}  }
class C{  public void maxLocal(Vector3f other){  x=other.x > x ? other.x : x;  y=other.y > y ? other.y : y;  z=other.z > z ? other.z : z;}  }
class C{  void hideSecurityButton(){  if (mSecurityButton.getVisibility() == View.GONE)   return;  if (mSecurityButtonHideAnimator.isRunning())   return;  mSecurityButtonHideAnimator.start();}  }
class C{  public Schema lockSchema(){  m_locked=true;  return this;}  }
class C{  public static void checkFinite(final double[] val) throws MathIllegalArgumentException {  for (int i=0; i < val.length; i++) {    final double x=val[i];    if (Double.isInfinite(x) || Double.isNaN(x)) {      throw new MathIllegalArgumentException(LocalizedCoreFormats.NOT_FINITE_NUMBER,x);    }  }}  }
class C{  public MqttScriptManager(final IKBus eventBus,final Executor executor,final IMqttConnection connection){  super(eventBus,executor);  this.setConnection(connection);}  }
class C{  public synchronized void waitForLastSpace() throws InterruptedException {  if (!_activeSpaces.isEmpty())   return;  _currentSpaceState=StartupState.WAITING;  wait();  changeState(StartupState.NOT_LAST);}  }
class C{  public static ContextSet fromSet(ContextSet contextSet){  if (contextSet == null) {    throw new NullPointerException("contextSet");  }  MutableContextSet set=new MutableContextSet();  set.addAll(contextSet.toSet());  return set.immutableCopy();}  }
class C{  private void performDoubleQRStep(final int il,final int im,final int iu,final ShiftInfo shift,final double[] hVec){  final int n=matrixT.length;  double p=hVec[0];  double q=hVec[1];  double r=hVec[2];  for (int k=im; k <= iu - 1; k++) {    boolean notlast=k != (iu - 1);    if (k != im) {      p=matrixT[k][k - 1];      q=matrixT[k + 1][k - 1];      r=notlast ? matrixT[k + 2][k - 1] : 0.0;      shift.x=FastMath.abs(p) + FastMath.abs(q) + FastMath.abs(r);      if (Precision.equals(shift.x,0.0,epsilon)) {        continue;      }      p/=shift.x;      q/=shift.x;      r/=shift.x;    }    double s=FastMath.sqrt(p * p + q * q + r * r);    if (p < 0.0) {      s=-s;    }    if (s != 0.0) {      if (k != im) {        matrixT[k][k - 1]=-s * shift.x;      } else       if (il != im) {        matrixT[k][k - 1]=-matrixT[k][k - 1];      }      p+=s;      shift.x=p / s;      shift.y=q / s;      double z=r / s;      q/=p;      r/=p;      for (int j=k; j < n; j++) {        p=matrixT[k][j] + q * matrixT[k + 1][j];        if (notlast) {          p+=r * matrixT[k + 2][j];          matrixT[k + 2][j]-=p * z;        }        matrixT[k][j]-=p * shift.x;        matrixT[k + 1][j]-=p * shift.y;      }      for (int i=0; i <= FastMath.min(iu,k + 3); i++) {        p=shift.x * matrixT[i][k] + shift.y * matrixT[i][k + 1];        if (notlast) {          p+=z * matrixT[i][k + 2];          matrixT[i][k + 2]-=p * r;        }        matrixT[i][k]-=p;        matrixT[i][k + 1]-=p * q;      }      final int high=matrixT.length - 1;      for (int i=0; i <= high; i++) {        p=shift.x * matrixP[i][k] + shift.y * matrixP[i][k + 1];        if (notlast) {          p+=z * matrixP[i][k + 2];          matrixP[i][k + 2]-=p * r;        }        matrixP[i][k]-=p;        matrixP[i][k + 1]-=p * q;      }    }  }  for (int i=im + 2; i <= iu; i++) {    matrixT[i][i - 2]=0.0;    if (i > im + 2) {      matrixT[i][i - 3]=0.0;    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_STIGMA_YOU_CANNOT_USE_THIS_SKILL_AFTER_UNEQUIP_STIGMA_STONE(String value0){  return new SM_SYSTEM_MESSAGE(1300403,value0);}  }
class C{  public static <T extends RealFieldElement<T>>FieldRotation<T> applyTo(final Rotation r1,final FieldRotation<T> rInner){  return new FieldRotation<T>(rInner.q0.multiply(r1.getQ0()).subtract(rInner.q1.multiply(r1.getQ1()).add(rInner.q2.multiply(r1.getQ2())).add(rInner.q3.multiply(r1.getQ3()))),rInner.q1.multiply(r1.getQ0()).add(rInner.q0.multiply(r1.getQ1())).add(rInner.q2.multiply(r1.getQ3()).subtract(rInner.q3.multiply(r1.getQ2()))),rInner.q2.multiply(r1.getQ0()).add(rInner.q0.multiply(r1.getQ2())).add(rInner.q3.multiply(r1.getQ1()).subtract(rInner.q1.multiply(r1.getQ3()))),rInner.q3.multiply(r1.getQ0()).add(rInner.q0.multiply(r1.getQ3())).add(rInner.q1.multiply(r1.getQ2()).subtract(rInner.q2.multiply(r1.getQ1()))),false);}  }
class C{  public CgEdge duplicate(){  CgEdge new_edge=new CgEdge(s,t,sootEdge,null);  new_edge.map_offset=map_offset;  new_edge.scc_edge=scc_edge;  new_edge.base_var=base_var;  return new_edge;}  }
class C{  @Override public void addVendorOption(Class<?> symbolizerClass,List<ValueComboBoxData> symbolList,Map<Class<?>,List<SymbolTypeConfig>> fieldEnableMap,Class<?> panelId){  fieldEnableMap.putAll(this.fieldEnableMap);}  }
class C{  private void check2PiConsistency() throws InconsistentStateAt2PiWrapping {  BSPTree<Sphere1D> root=getTree(false);  if (root.getCut() == null) {    return;  }  final Boolean stateBefore=(Boolean)getFirstLeaf(root).getAttribute();  final Boolean stateAfter=(Boolean)getLastLeaf(root).getAttribute();  if (stateBefore ^ stateAfter) {    throw new InconsistentStateAt2PiWrapping();  }}  }
class C{  public static String separatorsToSystem(String path){  if (path == null) {    return null;  }  if (isSystemWindows()) {    return separatorsToWindows(path);  } else {    return separatorsToUnix(path);  }}  }
class C{  public long queryAddASBSet(String name,int rank,int hunterType){  ContentValues values=new ContentValues();  values.put(S.COLUMN_ASB_SET_NAME,name);  values.put(S.COLUMN_ASB_SET_RANK,rank);  values.put(S.COLUMN_ASB_SET_HUNTER_TYPE,hunterType);  values.put(S.COLUMN_TALISMAN_EXISTS,0);  return insertRecord(S.TABLE_ASB_SETS,values);}  }
class C{  public boolean isAwake(){  return isAwake;}  }
class C{  public ArrayFieldVector(Field<T> field,int size){  this.field=field;  this.data=MathArrays.buildArray(field,size);}  }
class C{  @Override public Object evaluate(final Map<Long,Object> pInputParams) throws RuleEvaluationException {  Object result=null;  Iterator<IRuleCondition> i=conditions.iterator();  while (result == null && i.hasNext()) {    result=i.next().evaluate(pInputParams);  }  if (result == null) {    throw new RuleEvaluationException("Evaluation error: none of the rule's conditions are TRUE.");  }  return result;}  }
class C{  public TransactionStyle(int timeoutInSeconds,int retries,boolean isRetriableAfterTimeout){  this.retries=retries;  this.timeout=timeoutInSeconds;  this.isRetriableAfterTimeout=isRetriableAfterTimeout;}  }
class C{  public String toString(cp_info constant_pool[]){  cp_info bsm=constant_pool[bootstrap_method_index];  cp_info nat=constant_pool[name_and_type_index];  return nat.toString(constant_pool) + " - " + bsm.toString(constant_pool);}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("java.lang.Class forName0(java.lang.String,boolean,java.lang.ClassLoader)")) {    java_lang_Class_forName0(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.Object newInstance0()")) {    java_lang_Class_newInstance0(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.String getName()")) {    java_lang_Class_getName(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.ClassLoader getClassLoader0()")) {    java_lang_Class_getClassLoader0(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.Class getSuperclass()")) {    java_lang_Class_getSuperclass(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.Class[] getInterfaces()")) {    java_lang_Class_getInterfaces(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.Class getComponentType()")) {    java_lang_Class_getComponentType(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.Object[] getSigners()")) {    java_lang_Class_getSigners(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("void setSigners(java.lang.Object[])")) {    java_lang_Class_setSigners(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.Class getDeclaringClass()")) {    java_lang_Class_getDeclaringClass(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("void setProtectionDomain0(java.security.ProtectionDomain)")) {    java_lang_Class_setProtectionDomain0(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.security.ProtectionDomain getProtectionDomain0()")) {    java_lang_Class_getProtectionDomain0(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.Class getPrimitiveClass(java.lang.String)")) {    java_lang_Class_getPrimitiveClass(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.reflect.Field[] getFields0(int)")) {    java_lang_Class_getFields0(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.reflect.Method[] getMethods0(int)")) {    java_lang_Class_getMethods0(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.reflect.Constructor[] getConstructors0(int)")) {    java_lang_Class_getConstructors0(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.reflect.Field getField0(java.lang.String,int)")) {    java_lang_Class_getField0(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.reflect.Method getMethod0(java.lang.String,java.lang.Class[],int)")) {    java_lang_Class_getMethod0(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)")) {    java_lang_Class_getConstructor0(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.Class[] getDeclaredClasses0()")) {    java_lang_Class_getDeclaredClasses0(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.reflect.Constructor[] getDeclaredConstructors0(boolean)")) {    java_lang_Class_getDeclaredConstructors0(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  protected Dfp(final DfpField field,long x){  mant=new int[field.getRadixDigits()];  nans=FINITE;  this.field=field;  boolean isLongMin=false;  if (x == Long.MIN_VALUE) {    isLongMin=true;    ++x;  }  if (x < 0) {    sign=-1;    x=-x;  } else {    sign=1;  }  exp=0;  while (x != 0) {    System.arraycopy(mant,mant.length - exp,mant,mant.length - 1 - exp,exp);    mant[mant.length - 1]=(int)(x % RADIX);    x/=RADIX;    exp++;  }  if (isLongMin) {    for (int i=0; i < mant.length - 1; i++) {      if (mant[i] != 0) {        mant[i]++;        break;      }    }  }}  }
class C{  @Override public Relation putRolePlayer(RoleType roleType,Instance instance){  if (roleType == null) {    throw new IllegalArgumentException(ErrorMessage.ROLE_IS_NULL.getMessage(instance));  }  if (mindmapsGraph.isBatchLoadingEnabled()) {    return addNewRolePlayer(null,roleType,instance);  } else {    Map<RoleType,Instance> roleMap=rolePlayers();    roleMap.put(roleType,instance);    Relation otherRelation=mindmapsGraph.getRelation(type(),roleMap);    if (otherRelation == null) {      return addNewRolePlayer(roleMap,roleType,instance);    }    if (!this.equals(otherRelation)) {      throw new ConceptException(ErrorMessage.RELATION_EXISTS.getMessage(otherRelation));    } else {      return this;    }  }}  }
class C{  public static void removeMEGANClassificationData(DAAHeader header) throws IOException {  boolean hasMeganBlock=false;  long meganStart=header.getHeaderSize();  for (int i=0; i < header.getBlockTypeRankArrayLength(); i++) {    BlockType type=header.getBlockType(i);    if (type != BlockType.empty) {      if (type.toString().startsWith("megan") && !type.equals(BlockType.megan_ref_annotations)) {        hasMeganBlock=true;        header.setBlockTypeRank(i,BlockType.rank(BlockType.empty));        header.setBlockSize(i,0l);      } else       meganStart+=header.getBlockSize(i);    }  }  if (hasMeganBlock) {    header.save();    try (RandomAccessFile raf=new RandomAccessFile(header.getFileName(),"rw")){      raf.setLength(meganStart);    }   }}  }
class C{  void incrementRefCounter(){synchronized (mutex) {    refCounter++;  }}  }
class C{  public RTHtml<RTImage,RTAudio,RTVideo> convert(final Spanned text,RTFormat.Html rtFormat){  mText=text;  mRTFormat=rtFormat;  mOut=new StringBuilder();  mImages=new ArrayList<>();  mParagraphStyles.clear();  convertParagraphs();  return new RTHtml<>(rtFormat,mOut.toString(),mImages);}  }
class C{  private static Object maybeConvertToString(Object value){  if (value instanceof Doc) {    return ((Doc)value).prettyPrint(Integer.MAX_VALUE);  }  if (value instanceof Enum) {    return value.toString();  }  return value;}  }
class C{  public void handle(String line){}  }
class C{  public void dataSourceLoaded(DataSourceInterface dataSource){  dataSourceAttributePanel.dataSourceLoaded(dataSource);}  }
class C{  @Override public void attributeSelection(String field){}  }
class C{  private void replaceTop(Scope topOfStack){  stack.set(stack.size() - 1,topOfStack);}  }
class C{  private ExecutorUtils(){}  }
class C{  public ConsoleWriter erasePreviouslyPrintedLines(){  if (consoleWriterConfig.isAnsiCodeEnabled()) {    for (int i=0; i < numberOfNewLinesInLastPrintedString; i++) {      ansi.cursorUp(1);      ansi.eraseLine();    }  }  return this;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATKDrain_Instant_ME_TO_B(int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200568,num0,skilltarget,skillname);}  }
class C{  public int decrement(){  lock.lock();  int newValue=--value;  lock.unlock();  return newValue;}  }
class C{  @Override public void cleanup(){  fEntityManager.closeReaders();}  }
class C{  public void undoAll(){  undo();  setGroup(lastSavedValues.getGroup());  getConnections().clear();  getConnections().addAll(lastSavedValues.getConnections());  getSubgroups().clear();  getSubgroups().addAll(lastSavedValues.getSubgroups());  groupingModified=false;}  }
class C{  public Fraction add(final int i){  return new Fraction(numerator + i * denominator,denominator);}  }
class C{  public ExceptionWithContext(Throwable cause){  this(cause,null);}  }
class C{  public static byte[] decode(String s) throws java.io.IOException {  return decode(s,NO_OPTIONS);}  }
class C{  public FilterIterator(Iterator tuples,Predicate p){  this.predicate=p;  this.tuples=tuples;  next=advance();}  }
class C{  public LegendRenderData(@NotNull IconType icon,@NotNull Color color,@NotNull String label,ReportingSeries series){  mColor=color;  mIcon=icon;  mLabel=label;  mSeries=series;}  }
class C{  public Builder addColumnLong(String name){  return addColumn(new LongMetaData(name));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GUILD_CREATED(String value0){  return new SM_SYSTEM_MESSAGE(1300235,value0);}  }
class C{  protected void processStopRequest(boolean force){  if (mState != State.PREPARING || force) {    mState=State.STOPPED;    mFile=null;    mAccount=null;    releaseResources(true);    giveUpAudioFocus();    stopSelf();  }}  }
class C{  public static char[] encode(byte[] in,int iOff,int iLen){  int oDataLen=(iLen * 4 + 2) / 3;  int oLen=((iLen + 2) / 3) * 4;  char[] out=new char[oLen];  int ip=iOff;  int iEnd=iOff + iLen;  int op=0;  while (ip < iEnd) {    int i0=in[ip++] & 0xff;    int i1=ip < iEnd ? in[ip++] & 0xff : 0;    int i2=ip < iEnd ? in[ip++] & 0xff : 0;    int o0=i0 >>> 2;    int o1=((i0 & 3) << 4) | (i1 >>> 4);    int o2=((i1 & 0xf) << 2) | (i2 >>> 6);    int o3=i2 & 0x3F;    out[op++]=map1[o0];    out[op++]=map1[o1];    out[op]=op < oDataLen ? map1[o2] : '=';    op++;    out[op]=op < oDataLen ? map1[o3] : '=';    op++;  }  return out;}  }
class C{  private void sendChanged(ServiceRegistrar reg,String[] curGroups){  UnicastResponse resp=(UnicastResponse)registrars.get(reg.getServiceID());  registrars.put(reg.getServiceID(),new UnicastResponse(resp.getHost(),resp.getPort(),curGroups,resp.getRegistrar()));  if (!listeners.isEmpty()) {    addNotify((ArrayList)listeners.clone(),mapRegToGroups(reg,curGroups),CHANGED);  }}  }
class C{  public JSearchPanel(Visualization vis,String group,String searchGroup,String field,boolean autoIndex,boolean monitorKeystrokes){  this(vis,group,searchGroup,new String[]{field},autoIndex,monitorKeystrokes);}  }
class C{  public AdaptableList(int size){  children=new ArrayList(size);}  }
class C{  public void initialize(){  for (  TabModel model : mTabModelSelector.getModels())   model.addObserver(mTabModelObserver);  mTabModelSelector.addObserver(mTabModelSelectorObserver);}  }
class C{  public boolean isRecursiveImport(){  if (recursiveImport == null) {    return true;  } else {    return recursiveImport;  }}  }
class C{  public void updateReplacement(CompletionProposal proposal,CompletionItem item,char trigger,List<Integer> positions){  this.importRewrite=TypeProposalUtils.createImportRewrite(compilationUnit);  StringBuilder completionBuffer=new StringBuilder();  if (isSupportingRequiredProposals(proposal)) {    CompletionProposal[] requiredProposals=proposal.getRequiredProposals();    for (int i=0; requiredProposals != null && i < requiredProposals.length; i++) {      if (requiredProposals[i].getKind() == CompletionProposal.TYPE_REF) {        appendRequiredType(completionBuffer,requiredProposals[i],trigger,positions);      } else       if (requiredProposals[i].getKind() == CompletionProposal.TYPE_IMPORT) {        appendImportProposal(completionBuffer,requiredProposals[i],proposal.getKind());      } else       if (requiredProposals[i].getKind() == CompletionProposal.METHOD_IMPORT) {        appendImportProposal(completionBuffer,requiredProposals[i],proposal.getKind());      } else       if (requiredProposals[i].getKind() == CompletionProposal.FIELD_IMPORT) {        appendImportProposal(completionBuffer,requiredProposals[i],proposal.getKind());      } else {        Assert.isTrue(false);      }    }  }  appendReplacementString(completionBuffer,proposal,positions);  item.setInsertText(completionBuffer.toString());  addImports(item);}  }
class C{  public int hashCode(){  return (id != null) ? id.hashCode() : 0;}  }
class C{  private static boolean npcCanExpandLevel(WarehouseExpandTemplate clist,int level){  return clist.contains(level);}  }
class C{  public static byte[] toByteArray(InputStream input,int size) throws IOException {  if (size < 0) {    throw new IllegalArgumentException("Size must be equal or greater than zero: " + size);  }  if (size == 0) {    return new byte[0];  }  byte[] data=new byte[size];  int offset=0;  int readed;  while (offset < size && (readed=input.read(data,offset,size - offset)) != EOF) {    offset+=readed;  }  if (offset != size) {    throw new IOException("Unexpected readed size. current: " + offset + ", excepted: "+ size);  }  return data;}  }
class C{  @Nullable private TableReportEntryTable convertToTableReportEntryTable(String tableId,Map<String,Object> map,Predicate<String> placementFilter,Predicate<Boolean> droppedFilter,Predicate<Boolean> facadeFilter){  String placement=(String)map.get("placement");  if (!placementFilter.apply(placement)) {    return null;  }  Boolean dropped=Objects.firstNonNull((Boolean)map.get("dropped"),false);  if (!droppedFilter.apply(dropped)) {    return null;  }  Boolean facade=Objects.firstNonNull((Boolean)map.get("facade"),false);  if (!facadeFilter.apply(facade)) {    return null;  }  List<Integer> shards=Lists.newArrayList();  TableStatistics.Aggregator aggregator=TableStatistics.newAggregator();  Object shardJson=map.get("shards");  if (shardJson != null) {    Map<String,TableStatistics> shardMap=JsonHelper.convert(shardJson,new TypeReference<Map<String,TableStatistics>>(){    });    for (    Map.Entry<String,TableStatistics> entry : shardMap.entrySet()) {      Integer shardId=Integer.parseInt(entry.getKey());      shards.add(shardId);      aggregator.add(entry.getValue());    }  }  TableStatistics tableStatistics=aggregator.aggregate();  Collections.sort(shards);  return new TableReportEntryTable(tableId,placement,shards,dropped,facade,tableStatistics.getRecordCount(),tableStatistics.getColumnStatistics().toStatistics(),tableStatistics.getSizeStatistics().toStatistics(),tableStatistics.getUpdateTimeStatistics().toStatistics());}  }
class C{  private boolean isBeforeEnd(FastConcurrentSkipListMap.Node<K,V> n){  if (n == null)   return false;  if (hi == null)   return true;  K k=n.key;  if (k == null)   return true;  int c=m.compare(k,hi);  if (c > 0 || (c == 0 && !hiInclusive))   return false;  return true;}  }
class C{  public boolean isIconGenerated(){  return mIsIconGenerated;}  }
class C{  public static void postDelayed(Runnable r,long delayMillis){  sMainHandler.postDelayed(r,delayMillis);}  }
class C{  @Override public JavaDStream<INDArray> createStream(){  JavaPairInputDStream<String,String> messages=KafkaUtils.createStream(jssc,zkHost,"canova",Collections.singletonMap(kafkaTopic,kafkaPartitions));  JavaDStream<INDArray> dataset=messages.flatMap(new NDArrayFlatMap(recordToDataSetFunction)).cache();  return dataset;}  }
class C{  private SqlReservedWords(){}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  @Override public void onConnectionSuccess(){  super.onConnectionSuccess();}  }
class C{  @Override public void dropClass(String className,SpaceContext sc) throws RemoteException, DropClassException {  beforeTypeOperation(false,sc,SpacePrivilege.ALTER,className);  _engine.dropClass(className);  if (_embeddedProxy != null)   _embeddedProxy.directDropClass(className);  if (_clusteredProxy != null)   _clusteredProxy.directDropClass(className);  if (_taskProxy != null)   _taskProxy.directDropClass(className);  LRMIClassLoadersHolder.dropClass(className);}  }
class C{  public void addBoundaryMapObject(OrganisationUnit unit){  InternalMapObject mapObject=new InternalMapObject();  mapObject.setName(unit.getName());  mapObject.setFillOpacity(opacity);  mapObject.setStrokeColor(Color.BLACK);  mapObject.setMapLayerType(MapLayerType.BOUNDARY);  mapObject.buildGeometryForOrganisationUnit(unit);  addMapObject(mapObject);  mapObject.setMapLayer(this);}  }
class C{  public void actionPerformed(ActionEvent ev){  final File lastOpenFile=ProgramProperties.getFile(ClassificationManager.getMapFileKey(cName,mapType));  getDir().notifyLockInput();  ImportBlastDialog dialog=(ImportBlastDialog)getParent();  final String[] suffixes=(mapType == IdMapper.MapType.Accession ? new String[]{"map","abin"} : new String[]{"map","bin"});  final File file=ChooseFileDialog.chooseFileToOpen(dialog,lastOpenFile,new TextFileFilter(suffixes,true),new TextFileFilter(suffixes,true),ev,"Open " + mapType + " File");  getDir().notifyUnlockInput();  if (file != null) {    if (file.exists() && file.canRead()) {      ProgramProperties.put(ClassificationManager.getMapFileKey(cName,mapType),file);      execute("load mapFile='" + file.getPath() + "' mapType="+ mapType+ " cName="+ cName+ ";");    } else     NotificationsInSwing.showError(getViewer().getFrame(),"Failed to open file: " + file.getPath());  }}  }
class C{  public void updateCurrentTag(String tagPath){  scenarioContext.add(ContextKeys.CURRENT_TAG,tagPath);}  }
class C{  public void clearRoutingTasksList(){  this.productionRunRoutingTasks=null;}  }
class C{  public static void generateSampleXml(File file){  marshallChapters(ChaptersXmlSampleBuilder.buildInputChapters(),CHAPTERS_XML_SCHEME,file);}  }
class C{  public PolicyInitializationException(String message,Throwable cause){  super(message,cause);}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ZHISHU\"";  db.execSQL(sql);}  }
class C{  @Override protected void onStopLoading(){  cancelLoad();}  }
class C{  public Bitmap generateIconForText(String text){  Bitmap icon=Bitmap.createBitmap(mIconWidthPx,mIconHeightPx,Bitmap.Config.ARGB_8888);  Canvas canvas=new Canvas(icon);  canvas.drawRoundRect(mBackgroundRect,mCornerRadiusPx,mCornerRadiusPx,mBackgroundPaint);  String displayText=text.substring(0,1).toUpperCase(Locale.getDefault());  float textWidth=mTextPaint.measureText(displayText);  canvas.drawText(displayText,(mIconWidthPx - textWidth) / 2f,Math.round((Math.max(mIconHeightPx,mTextHeight) - mTextHeight) / 2.0f + mTextYOffset),mTextPaint);  return icon;}  }
class C{  public void recordOpenedRecents(){  setFirstAction(OPENED_RECENTS);}  }
class C{  @Override public void endParameterEntity(String name,Augmentations augs) throws XNIException {  if (fDTDGrammar != null)   fDTDGrammar.endParameterEntity(name,augs);  if (fDTDHandler != null) {    fDTDHandler.endParameterEntity(name,augs);  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  requestWindowFeature(Window.FEATURE_NO_TITLE);  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_qr_code_scan);  hasSurface=false;  inactivityTimer=new InactivityTimer(this);}  }
class C{  public LeaseException(String reason){  super(reason);}  }
class C{  private static Path qualified(Path rootPath,Path path){  URI rootUri=rootPath.toUri();  return path.makeQualified(rootUri,new Path(rootUri.getPath()));}  }
class C{  public void uncollapseSelectedNodes(boolean wholeSubtree){  final Set<Integer> ids=new HashSet<>();  for (Node v=getSelectedNodes().getFirstElement(); v != null; v=getSelectedNodes().getNextElement(v)) {    if (v.getOutDegree() == 0) {      Integer vid=(Integer)v.getInfo();      ids.add(vid);      if (!wholeSubtree)       setSelected(v,false);    }  }  final Set<Integer> seen=new HashSet<>();  for (  int id : ids) {    getCollapsedIds().remove(id);    Node vFull=classification.getFullTree().getANode(id);    if (!wholeSubtree) {      for (Iterator outEdgesFull=vFull.getOutEdges(); outEdgesFull.hasNext(); ) {        Edge eFull=(Edge)outEdgesFull.next();        Node wFull=eFull.getOpposite(vFull);        Integer wid=(Integer)wFull.getInfo();        getCollapsedIds().add(wid);      }    } else     uncollapseSelectedNodesRec(vFull,ids,seen);  }  updateTree();}  }
class C{  private void generateGetModuleMethod(NewBindingKey key,NewDependencyInfo dependencyInfo){  TypeElement scope=scopeCalculator.calculate(key);  generateGetModuleMethod(scope,dependencyInfo);}  }
class C{  public Feedback(CharSequence id,Activity activity,App appInfo,CharSequence userComment,boolean includeScreenshot,Uri screenshotFileUri,File screenshotFile,boolean includeLogs,Uri logsFileUri,File logsFile){  this.id=id;  this.deviceInfo=new DeviceInfo(activity);  this.appInfo=appInfo;  this.userComment=userComment;  this.includeLogs=includeLogs;  if (this.includeLogs) {    this.logsFile=logsFile;    this.logsFileUri=logsFileUri;  } else {    this.logsFile=null;    this.logsFileUri=null;  }  this.includeScreenshot=includeScreenshot;  if (this.includeScreenshot) {    this.screenshotFile=screenshotFile;    this.screenshotFileUri=screenshotFileUri;  } else {    this.screenshotFileUri=null;    this.screenshotFile=null;  }}  }
class C{  @Path(path="edit",login=true,access="access.role.admin") public void edit(){  if (method.isPost()) {    long id=this.getLong("id");    String name=this.getString("name");    Role r=Role.loadById(id);    if (r != null) {      if (r.update(V.create("name",name).set("memo",this.getString("memo"))) > 0) {        this.path=null;        this.set(X.MESSAGE,lang.get("save.success"));        String[] accesses=this.getStrings("access");        r.setAccess(accesses);      } else {        this.set("name",name);        this.set(X.ERROR,lang.get("save.failed"));      }    } else {      this.set("name",name);      this.set(X.ERROR,lang.get("save.failed"));    }    this.set(X.MESSAGE,lang.get("save.success"));    onGet();    return;  } else {    String ids=this.getString("id");    if (ids != null) {      String[] ss=ids.split(",");      for (      String s : ss) {        long id=X.toLong(s);        Role r=Role.loadById(id);        this.set("r",r);        JSON jo=new JSON();        r.toJSON(jo);        this.set(jo);        Map<String,List<Access>> bs=Access.load();        this.set("accesses",bs);        this.show("/admin/role.edit.html");        return;      }    }    this.set(X.ERROR,lang.get("select.required"));    onGet();  }}  }
class C{  public ConfigurationParser(boolean verify,ClassLoader loader) throws ParserConfigurationException {  factory=DocumentBuilderFactory.newInstance();  factory.setValidating(verify);  factory.setNamespaceAware(true);  factory.setExpandEntityReferences(true);  factory.setCoalescing(true);  builder=factory.newDocumentBuilder();  if (verify)   builder.setErrorHandler(new XMLErrorHandler());  if (loader == null)   throw new NullPointerException("loader is null");}  }
class C{  public static double regularizedBeta(double x,double a,double b,int maxIterations){  return regularizedBeta(x,a,b,DEFAULT_EPSILON,maxIterations);}  }
class C{  public FriendsGetByPhonesQuery fields(UserField... value){  return unsafeParam("fields",value);}  }
class C{  public PresenterAdapter(){  this.data=new ArrayList<>();  this.binderType=new ArrayList<>();}  }
class C{  @Override public void backgroundColourUpdate(Color backgroundColour){  mapPane.setBackground(backgroundColour);}  }
class C{  public JSONObject send(String command,Map<String,Object> params,Reader body) throws Exception {  StringBuilder url=new StringBuilder("http://localhost:");  url.append(port);  url.append('/');  url.append(command);  url.append('?');  for (  Map.Entry<String,Object> ent : params.entrySet()) {    if (ent.getValue() instanceof List) {      List<String> values=(List<String>)ent.getValue();      for (      String value : values) {        url.append(ent.getKey());        url.append('=');        url.append(URLEncoder.encode(value));      }    } else {      url.append(ent.getKey());      url.append('=');      url.append(URLEncoder.encode((String)ent.getValue()));    }  }  HttpURLConnection c=(HttpURLConnection)new URL(url.toString()).openConnection();  c.setUseCaches(false);  c.setDoOutput(true);  int chunkKB=TestUtil.nextInt(random,1,128);  c.setChunkedStreamingMode(chunkKB * 1024);  c.setRequestMethod("POST");  c.setRequestProperty("Charset","UTF-8");  CharsetEncoder encoder=StandardCharsets.UTF_8.newEncoder().onMalformedInput(CodingErrorAction.REPORT).onUnmappableCharacter(CodingErrorAction.REPORT);  Writer w=new OutputStreamWriter(c.getOutputStream(),encoder);  char[] buffer=new char[2048];  while (true) {    int count=body.read(buffer);    if (count == -1) {      break;    }    assert count > 0;    w.write(buffer,0,count);  }  w.flush();  int code=c.getResponseCode();  int size=c.getContentLength();  byte[] bytes=new byte[size];  if (code == 200) {    InputStream is=c.getInputStream();    readFully(is,bytes);    c.disconnect();    return (JSONObject)JSONValue.parseStrict(new String(bytes,"UTF-8"));  } else {    InputStream is=c.getErrorStream();    readFully(is,bytes);    c.disconnect();    throw new IOException("Server error:\n" + new String(bytes,"UTF-8"));  }}  }
class C{  public Object readObject() throws JMSException {  initializeReading();  try {    if (this.dataIn.available() == 0) {      throw new MessageEOFException("reached end of data");    }    this.dataIn.mark(65);    int type=this.dataIn.read();    if (type == _NULL) {      return null;    }    if (type == _STRING) {      return this.dataIn.readUTF();    }    if (type == _LONG) {      return Long.valueOf(this.dataIn.readLong());    }    if (type == _INT) {      return Integer.valueOf(this.dataIn.readInt());    }    if (type == _SHORT) {      return Short.valueOf(this.dataIn.readShort());    }    if (type == _BYTE) {      return Byte.valueOf(this.dataIn.readByte());    }    if (type == _FLOAT) {      return Float.valueOf(this.dataIn.readFloat());    }    if (type == _DOUBLE) {      return Double.valueOf(this.dataIn.readDouble());    }    if (type == _BOOLEAN) {      return Boolean.valueOf(this.dataIn.readBoolean());    }    if (type == _CHAR) {      return new Character(this.dataIn.readChar());    }    if (type == _BYTES) {      int len=this.dataIn.readInt();      byte[] value=new byte[len];      this.dataIn.read(value);      return value;    } else {      this.dataIn.reset();      throw new MessageFormatException("unknown type");    }  } catch (  NumberFormatException mfe) {    try {      this.dataIn.reset();    } catch (    IOException ioe) {      JMSException jmsEx=new JMSException("reset failed");      jmsEx.setLinkedException(ioe);    }    throw mfe;  }catch (  EOFException e) {    JMSException jmsEx=new MessageEOFException(e.toString());    jmsEx.setLinkedException(e);    throw jmsEx;  }catch (  IOException e) {    JMSException jmsEx=new MessageFormatException(e.toString());    jmsEx.setLinkedException(e);    throw jmsEx;  }}  }
class C{  public GroupsEditPlaceQuery latitude(Float value){  return unsafeParam("latitude",value);}  }
class C{  private static int textCompaction(int[] codewords,int codeIndex,StringBuilder result){  int[] textCompactionData=new int[(codewords[0] - codeIndex) * 2];  int[] byteCompactionData=new int[(codewords[0] - codeIndex) * 2];  int index=0;  boolean end=false;  while ((codeIndex < codewords[0]) && !end) {    int code=codewords[codeIndex++];    if (code < TEXT_COMPACTION_MODE_LATCH) {      textCompactionData[index]=code / 30;      textCompactionData[index + 1]=code % 30;      index+=2;    } else {switch (code) {case TEXT_COMPACTION_MODE_LATCH:        textCompactionData[index++]=TEXT_COMPACTION_MODE_LATCH;      break;case BYTE_COMPACTION_MODE_LATCH:case BYTE_COMPACTION_MODE_LATCH_6:case NUMERIC_COMPACTION_MODE_LATCH:case BEGIN_MACRO_PDF417_CONTROL_BLOCK:case BEGIN_MACRO_PDF417_OPTIONAL_FIELD:case MACRO_PDF417_TERMINATOR:    codeIndex--;  end=true;break;case MODE_SHIFT_TO_BYTE_COMPACTION_MODE:textCompactionData[index]=MODE_SHIFT_TO_BYTE_COMPACTION_MODE;code=codewords[codeIndex++];byteCompactionData[index]=code;index++;break;}}}decodeTextCompaction(textCompactionData,byteCompactionData,index,result);return codeIndex;}  }
class C{  public static PhasedBackoffWaitStrategy withLiteLock(long spinTimeout,long yieldTimeout,TimeUnit units){  return new PhasedBackoffWaitStrategy(spinTimeout,yieldTimeout,units,new LiteBlockingWaitStrategy());}  }
class C{  public boolean hasInit(){  return getInitOpt().getNumChild() != 0;}  }
class C{  void finishScrolling(){  if (isScrollingPerformed) {    notifyScrollingListenersAboutEnd();    isScrollingPerformed=false;  }  invalidateLayouts();  invalidate();}  }
class C{  public static boolean unbanIp(String ip){  Iterator<BannedIP> it=banList.iterator();  while (it.hasNext()) {    BannedIP ipBan=it.next();    if (ipBan.getMask().equals(ip)) {      if (getDAO().remove(ipBan)) {        it.remove();        return true;      }      break;    }  }  return false;}  }
class C{  protected final void clean(){  if (!isAlive())   return;synchronized (this) {    _shouldDie=true;    notify();  }  try {    join();  } catch (  InterruptedException e) {  }  if (_expirationList != null)   _expirationList.clear();}  }
class C{  public Builder withContentType(String contentType){  this.mContentType=contentType;  return this;}  }
class C{  public void handleNewRolledbackEntries(Context context,final XtnEntry xtnEntry) throws SAException {  ISAdapterIterator iter=null;  try {    iter=_cacheManager.makeUnderXtnEntriesIter(context,xtnEntry,SelectType.NEW_ENTRIES);    if (iter != null) {      final XtnData pXtn=xtnEntry.getXtnData();      while (true) {        IEntryHolder entry=(IEntryHolder)iter.next();        if (entry == null)         break;        ILockObject entryLock=null;        try {          entryLock=getEntryLockObject(entry);synchronized (entryLock) {            boolean fromLeaseExpiration=!_engine.getLeaseManager().isNoReapUnderXtnLeases() && entry.isExpired(_engine.getLeaseManager().getEffectiveEntryLeaseTime(xtnEntry.m_CommitRollbackTimeStamp)) && !_engine.isExpiredEntryStayInSpace(entry);            context.setOperationID(pXtn.getOperationID(entry.getUID()));            _engine.removeEntrySA(context,entry,false,true,false,fromLeaseExpiration ? SpaceEngine.EntryRemoveReasonCodes.LEASE_EXPIRED : SpaceEngine.EntryRemoveReasonCodes.TAKE,true,false,true);          }        }  finally {          if (entryLock != null)           freeEntryLockObject(entryLock);          entryLock=null;        }      }    }  }  finally {    if (iter != null)     iter.close();  }}  }
class C{  private void patchThreadConstructor(SootMethod smCons,SootClass runnable,SootField fldTarget){  SootClass sc=smCons.getDeclaringClass();  Body b=Jimple.v().newBody(smCons);  smCons.setActiveBody(b);  Local thisLocal=Jimple.v().newLocal("this",sc.getType());  b.getLocals().add(thisLocal);  b.getUnits().add(Jimple.v().newIdentityStmt(thisLocal,Jimple.v().newThisRef(sc.getType())));  Local param0Local=Jimple.v().newLocal("p0",runnable.getType());  b.getLocals().add(param0Local);  b.getUnits().add(Jimple.v().newIdentityStmt(param0Local,Jimple.v().newParameterRef(runnable.getType(),0)));  b.getUnits().add(Jimple.v().newAssignStmt(Jimple.v().newInstanceFieldRef(thisLocal,fldTarget.makeRef()),param0Local));  b.getUnits().add(Jimple.v().newReturnVoidStmt());}  }
class C{  public static final void toString(StringBuffer output,Vector vector){  if (vector == null) {    output.append("null");    return;  }  output.append("(");  int size=vector.size();  output.append(size);  if (listMax == -1 || size <= listMax) {    for (Enumeration e=vector.elements(); e.hasMoreElements(); ) {      output.append(",");      toString(output,e.nextElement());    }  } else {    int border=size / 2;    if (listBorder < border)     border=listBorder;    for (int i=0; i < border; i++) {      output.append(",");      toString(output,vector.elementAt(i));    }    output.append(",...");    for (int i=border; i > 0; i--) {      output.append(",");      toString(output,vector.elementAt(size - i));    }  }  output.append(")");}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  @Before public void customizeTextUnitSearcher() throws IllegalAccessException {  FieldUtils.writeField(textUnitSearcher,"ordered",true,true);}  }
class C{  public JMXDetailsPanel(){  initComponents();  postInit();}  }
class C{  private void sendQueryError(String errorMessage){  Iterable<String> splitError=Splitter.fixedLength(QUERY_CHUNK_SIZE).split(errorMessage + "\n");  for (  String errorChunk : splitError) {    sendJson(Json.object(ACTION,ACTION_ERROR,ERROR,errorChunk));  }  sendJson(Json.object(ACTION,ACTION_QUERY_END));}  }
class C{  public synchronized ZooKeeperClientBuilder zkServers(String zkServers){  this.zkServers=zkServers;  return this;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_TOWER_DEFENCE_ENTERED_PARTY(String value0){  return new SM_SYSTEM_MESSAGE(1400949,value0);}  }
class C{  @VisibleForTesting static boolean isTagsMatched(Launch launch,EmailSenderCase oneCase){  return !(null != oneCase.getTags() && !oneCase.getTags().isEmpty()) || null != launch.getTags() && oneCase.getTags().containsAll(launch.getTags());}  }
class C{  private static String parseHostHeader(HttpRequest httpRequest,boolean includePort){  List<String> hosts=httpRequest.headers().getAll(HttpHeaders.Names.HOST);  if (!hosts.isEmpty()) {    String hostAndPort=hosts.get(0);    if (includePort) {      return hostAndPort;    } else {      HostAndPort parsedHostAndPort=HostAndPort.fromString(hostAndPort);      return parsedHostAndPort.getHostText();    }  } else {    return null;  }}  }
class C{  @RequestMapping(method=RequestMethod.POST,value="orgUnits/{id}/dataSets") @ResponseBody public String saveDataSetValues2_8(@PathVariable int id,@RequestBody DataSetValue dataSetValue) throws NotAllowedException {  facilityReportingService.saveDataSetValues(getUnit(id),dataSetValue);  return DATASET_REPORT_UPLOADED;}  }
class C{  public KeyRefValueStore(KeyRef keyRef,KeyValueStore keyValueStore){  super(keyRef);  fKeyValueStore=keyValueStore;}  }
class C{  public static Map<String,Object> createDataResource(DispatchContext dctx,Map<String,? extends Object> context){  Map<String,Object> result=createDataResourceMethod(dctx,context);  return result;}  }
class C{  private void initial(){  int dayOfWeek=calendar.get(Calendar.DAY_OF_WEEK);  int monthStart=-1;  if (dayOfWeek >= 2 && dayOfWeek <= 7) {    monthStart=dayOfWeek - 2;  } else   if (dayOfWeek == 1) {    monthStart=6;  }  curStartIndex=monthStart;  date[monthStart]=1;  int daysOfMonth=daysOfCurrentMonth();  for (int i=1; i < daysOfMonth; i++) {    date[monthStart + i]=i + 1;  }  curEndIndex=monthStart + daysOfMonth;  if (calendar.get(Calendar.YEAR) == Calendar.getInstance().get(Calendar.YEAR) && calendar.get(Calendar.MONTH) == Calendar.getInstance().get(Calendar.MONTH)) {    todayIndex=Calendar.getInstance().get(Calendar.DAY_OF_MONTH) + monthStart - 1;  } else {    todayIndex=-1;  }}  }
class C{  public RectangularCholeskyDecomposition(RealMatrix matrix,double small) throws MathIllegalArgumentException {  final int order=matrix.getRowDimension();  final double[][] c=matrix.getData();  final double[][] b=new double[order][order];  int[] index=new int[order];  for (int i=0; i < order; ++i) {    index[i]=i;  }  int r=0;  for (boolean loop=true; loop; ) {    int swapR=r;    for (int i=r + 1; i < order; ++i) {      int ii=index[i];      int isr=index[swapR];      if (c[ii][ii] > c[isr][isr]) {        swapR=i;      }    }    if (swapR != r) {      final int tmpIndex=index[r];      index[r]=index[swapR];      index[swapR]=tmpIndex;      final double[] tmpRow=b[r];      b[r]=b[swapR];      b[swapR]=tmpRow;    }    int ir=index[r];    if (c[ir][ir] <= small) {      if (r == 0) {        throw new MathIllegalArgumentException(LocalizedCoreFormats.NOT_POSITIVE_DEFINITE_MATRIX);      }      for (int i=r; i < order; ++i) {        if (c[index[i]][index[i]] < -small) {          throw new MathIllegalArgumentException(LocalizedCoreFormats.NOT_POSITIVE_DEFINITE_MATRIX);        }      }      loop=false;    } else {      final double sqrt=FastMath.sqrt(c[ir][ir]);      b[r][r]=sqrt;      final double inverse=1 / sqrt;      final double inverse2=1 / c[ir][ir];      for (int i=r + 1; i < order; ++i) {        final int ii=index[i];        final double e=inverse * c[ii][ir];        b[i][r]=e;        c[ii][ii]-=c[ii][ir] * c[ii][ir] * inverse2;        for (int j=r + 1; j < i; ++j) {          final int ij=index[j];          final double f=c[ii][ij] - e * b[j][r];          c[ii][ij]=f;          c[ij][ii]=f;        }      }      loop=++r < order;    }  }  rank=r;  root=MatrixUtils.createRealMatrix(order,r);  for (int i=0; i < order; ++i) {    for (int j=0; j < r; ++j) {      root.setEntry(index[i],j,b[i][j]);    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Aura_END_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200765,skillcaster,skillname);}  }
class C{  public Session createSession(boolean transacted,int acknowledgeMode) throws JMSException {  if (closed) {    throw new IllegalStateException("Forbidden call on a closed connection.");  }  GSSessionImpl session=new GSSessionImpl(this,transacted,acknowledgeMode);  if (!isStopped()) {    session.start();  }  return session;}  }
class C{  public FriendsGetMutualQuery targetUids(List<Integer> value){  return unsafeParam("target_uids",value);}  }
class C{  private SpaceContext cacheIt(IRemoteSpace rj,SecurityContext securityContext) throws RemoteException {  SpaceContext spaceContext=proxy.getProxyRouter().getDefaultSpaceContext().createCopy(securityContext);  cache.put(rj.getSpaceUuid(),spaceContext);  return spaceContext;}  }
class C{  public InvokeStmt newInvokeStmt(Value op){  return new JInvokeStmt(op);}  }
class C{  public boolean isMinIsZero(){  return minIsZero;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DeathBlow_A_TO_SELF(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200805,skillcaster,num0,skillname);}  }
class C{  @Override public boolean isLeaf(){  return !isDir;}  }
class C{  protected void paintBufferToScreen(Graphics g){synchronized (this) {    g.drawImage(m_offscreen,0,0,null);  }}  }
class C{  public void addEvidence(Decision dPrv,String sFinalCategory){  String sSuggestedCategory=(String)dPrv.FinalDecision;  DocumentNGramGraph dDoc=(DocumentNGramGraph)dPrv.Document;  if (sFinalCategory != null) {    if (Repository.existsObject(sFinalCategory,INSECTDB.CATEGORY_TYPE)) {      NamedDocumentNGramGraph cCat=(NamedDocumentNGramGraph)Repository.loadObject(sFinalCategory,INSECTDB.CATEGORY_TYPE);      double dCatDocs=CategoryEvidenceCount.getValue(cCat.getName());      cCat.merge(dDoc,dCatDocs == 0 ? 1.0 : (dCatDocs / ++dCatDocs));      CategoryEvidenceCount.increaseValue(cCat.getName(),1.0);      Repository.saveObject(cCat,sFinalCategory,INSECTDB.CATEGORY_TYPE);    } else {      NamedDocumentNGramGraph cCat=new NamedDocumentNGramGraph();      cCat.setName(sFinalCategory);      cCat.setDataString(dDoc.getDataString());      Repository.saveObject(cCat,sFinalCategory,INSECTDB.CATEGORY_TYPE);    }    if (!sFinalCategory.equals(sSuggestedCategory)) {      NamedDocumentNGramGraph cCat=(NamedDocumentNGramGraph)Repository.loadObject(sSuggestedCategory,INSECTDB.CATEGORY_TYPE);      if (cCat != null) {        cCat.degrade(dDoc);        Repository.saveObject(cCat,sSuggestedCategory,INSECTDB.CATEGORY_TYPE);      }    }  }}  }
class C{  public synchronized BookKeeperClientBuilder statsLogger(StatsLogger statsLogger){  this.statsLogger=statsLogger;  return this;}  }
class C{  public static void moveFileToDirectory(File srcFile,File destDir,boolean createDestDir) throws IOException {  if (srcFile == null) {    throw new NullPointerException("Source must not be null");  }  if (destDir == null) {    throw new NullPointerException("Destination directory must not be null");  }  if (!destDir.exists() && createDestDir) {    destDir.mkdirs();  }  if (!destDir.exists()) {    throw new FileNotFoundException("Destination directory '" + destDir + "' does not exist [createDestDir="+ createDestDir+ "]");  }  if (!destDir.isDirectory()) {    throw new IOException("Destination '" + destDir + "' is not a directory");  }  moveFile(srcFile,new File(destDir,srcFile.getName()));}  }
class C{  @SuppressLint("InflateParams") @Override public Dialog onCreateDialog(Bundle savedInstanceState){  Mysplash.getInstance().setActivityInBackstage(true);  View view=LayoutInflater.from(getActivity()).inflate(R.layout.dialog_request_browsable_data,null,false);  setCancelable(false);  return new AlertDialog.Builder(getActivity()).setView(view).create();}  }
class C{  @Override public synchronized void powerOnSelfTest() throws Error {  Log.i(Mary.LOG,"Starting power-on self test.");  try {    MaryDataType inType=maryxmlToMbrola.inputType();    Collection voices=Voice.getAvailableVoices(this);    if (voices.isEmpty())     throw new Error("No MBROLA voices present");    Voice v=(Voice)voices.iterator().next();    assert v != null;    MaryData in=new MaryData(inType,v.getLocale());    String example=inType.exampleText(v.getLocale());    if (example != null) {      in.readFrom(new StringReader(example));      in.setDefaultVoice(v);      MaryData mbrola=maryxmlToMbrola.process(in);      mbrola.setAudioFileFormat(new AudioFileFormat(AudioFileFormat.Type.WAVE,Voice.AF22050,AudioSystem.NOT_SPECIFIED));      mbrola.setDefaultVoice(v);      mbrolaCaller.process(mbrola);    } else {      Log.d(Mary.LOG,"4 No example text -- no power-on self test!");    }  } catch (  Throwable t) {    throw new Error("Module " + toString() + ": Power-on self test failed.",t);  }  Log.i(Mary.LOG,"Power-on self test complete.");}  }
class C{  public static byte[] toByteArray(URI uri) throws IOException {  return IOUtils.toByteArray(uri.toURL());}  }
class C{  public NewsfeedGetRecommendedQuery startTime(Integer value){  return unsafeParam("start_time",value);}  }
class C{  public void paintSequences(Graphics g0){  Graphics2D g=(Graphics2D)g0;  Rectangle visibleRect=getVisibleRect();  if (visibleRect.getX() - cellWidth >= 0)   visibleRect.setRect(visibleRect.getX() - cellWidth,visibleRect.getY(),visibleRect.getWidth() + cellWidth,visibleRect.getHeight());  g.setColor(Color.WHITE);  g.fillRect(0,0,getWidth(),getHeight());  g.setColor(Color.BLACK);  g.setBackground(Color.WHITE);  g.setFont(sequenceFont);  final Lane referenceSequence=alignment.getReference();  final Lane consensusSequence=alignment.getConsensus();  if (alignment != null) {    final GapColumnContractor gapColumnContractor=getAlignment().getGapColumnContractor();    final RowCompressor rowCompressor=getAlignment().getRowCompressor();    boolean showGaps=(!rowCompressor.isEnabled());    int minVisibleRow=(int)Math.max(0,(visibleRect.getY() / cellHeight) - 1);    int maxVisibleRow=(int)Math.min(rowCompressor.getNumberRows() - 1,(visibleRect.getY() + visibleRect.getHeight()) / cellHeight);    int minVisibleCol=(int)Math.max(0,(visibleRect.getX() / cellWidth)) + gapColumnContractor.getFirstOriginalColumn();    int maxVisibleCol=(int)Math.min(gapColumnContractor.getLastOriginalColumn() - 1,(visibleRect.getX() + visibleRect.getWidth()) / cellWidth);    if (minVisibleCol - 3 > 0)     minVisibleCol-=3;    if ((!alignment.isTranslate() && cellWidth < 1) || cellWidth < 0.5) {      minVisibleCol=0;      g.setColor(Color.GRAY);      Integer[] jumpCols=gapColumnContractor.getJumpPositionsRelativeToOriginalColumns().toArray(new Integer[gapColumnContractor.getJumpPositionsRelativeToOriginalColumns().size()]);      for (int row=minVisibleRow; row <= maxVisibleRow; row++) {        for (        int read : rowCompressor.getCompressedRow2Reads(row)) {          Lane lane=alignment.getLane(read);          if (lane != null) {            int firstLayoutCol=lane.getFirstNonGapPosition();            if (jumpCols.length > 0) {              int jc=0;              int jumped=0;              while (jc < jumpCols.length && jumpCols[jc] <= firstLayoutCol) {                jumped+=gapColumnContractor.getJumpBeforeOriginalColumn(jumpCols[jc]);                jc++;              }              firstLayoutCol-=jumped;            }            int lastLayoutCol=lane.getLastNonGapPosition();            if (jumpCols.length > 0) {              int jc=0;              int jumped=0;              while (jc < jumpCols.length && jumpCols[jc] < lastLayoutCol) {                jumped+=gapColumnContractor.getJumpBeforeOriginalColumn(jumpCols[jc]);                jc++;              }              lastLayoutCol-=jumped;            }            double firstX=getX(firstLayoutCol);            double lastX=getX(lastLayoutCol);            if (firstLayoutCol <= maxVisibleCol && lastLayoutCol >= minVisibleCol) {              drawRect.setRect(firstX - 1,getY(row) - cellHeight,Math.max(2,lastX - firstX),Math.max(1,cellHeight - 1));              g.fill(drawRect);            }          }        }      }      g.setColor(Color.BLACK);    } else {      if (showColors && colorScheme != null) {        boolean notTiny=(cellHeight > 6);        final int inset=notTiny ? 1 : 0;        Integer[] jumpCols=gapColumnContractor.getJumpPositionsRelativeToLayoutColumns().toArray(new Integer[gapColumnContractor.getJumpPositionsRelativeToLayoutColumns().size()]);        g.setColor(Color.WHITE);        for (int row=minVisibleRow; row <= maxVisibleRow; row++) {          for (          int read : rowCompressor.getCompressedRow2Reads(row)) {            int jc=0;            int jumped=0;            Lane lane=alignment.getLane(read);            for (int layoutCol=minVisibleCol; layoutCol <= maxVisibleCol; layoutCol++) {              while (jc < jumpCols.length && jumpCols[jc] <= layoutCol) {                jumped+=gapColumnContractor.getJumpBeforeLayoutColumn(jumpCols[jc]);                jc++;              }              int trueCol=layoutCol + jumped;              if (trueCol < alignment.getLength()) {                double x=getX(layoutCol) - 1;                double y=getY(row);                if (notTiny && lane != null && trueCol == lane.getFirstNonGapPosition()) {                  g.setColor(Color.LIGHT_GRAY);                  drawLine.setLine(x - 2,y - cellHeight + inset,x - 2,y - inset);                  g.draw(drawLine);                }                char ch=lane.charAt(trueCol);                if (ch != 0) {                  if (ch != ' ') {                    if ((colorMatchesVsReference && ch == referenceSequence.charAt(trueCol)) || (colorMismatchesVsReference && ch != referenceSequence.charAt(trueCol)) || (colorMatchesVsConsensus && ch == consensusSequence.charAt(trueCol))|| (colorMismatchesVsConsensus && ch != consensusSequence.charAt(trueCol)))                     g.setColor(getColorScheme().getBackground(ch)); else                     g.setColor(Color.LIGHT_GRAY);                  }                  drawRect.setRect(x,y - cellHeight + inset,cellWidth,cellHeight - inset);                  g.fill(drawRect);                }                if (notTiny && trueCol == lane.getLastNonGapPosition() - 1) {                  g.setColor(Color.LIGHT_GRAY);                  drawLine.setLine(x + cellWidth + 1,y - cellHeight + inset,x + cellWidth + 1,y - inset);                  g.draw(drawLine);                }              }            }          }        }      }    }    if (sequenceFont.getSize() > 6) {      g.setColor(Color.BLACK);      Integer[] jumpCols=gapColumnContractor.getJumpPositionsRelativeToLayoutColumns().toArray(new Integer[gapColumnContractor.getJumpPositionsRelativeToLayoutColumns().size()]);      for (int row=minVisibleRow; row <= maxVisibleRow; row++) {        for (        int read : rowCompressor.getCompressedRow2Reads(row)) {          int jc=0;          int jumped=0;          Lane lane=alignment.getLane(read);          for (int layoutCol=minVisibleCol; layoutCol <= maxVisibleCol; layoutCol++) {            while (jc < jumpCols.length && jumpCols[jc] <= layoutCol) {              jumped+=gapColumnContractor.getJumpBeforeLayoutColumn(jumpCols[jc]);              jc++;            }            int trueCol=layoutCol + jumped;            if (trueCol < alignment.getLength()) {              double xCoord=getX(layoutCol);              double yCoord=getY(row) - 0.5 * cellHeight + 0.3 * getSequenceFont().getSize();              if (visibleRect.contains(xCoord,yCoord)) {                if (isShowUnalignedChars() && lane.hasUnalignedCharAt(trueCol)) {                  char ch=lane.getUnalignedCharAt(trueCol);                  if (ch != '-') {                    g.setColor(Color.GRAY);                    g.drawString("" + ch,Math.round(xCoord),Math.round(yCoord));                  }                } else {                  char ch=lane.charAt(trueCol);                  if (ch == 0) {                    if (!showGaps) {                      continue;                    } else                     ch='-';                  }                  if (ch == ' ') {                    continue;                  }                  if (showColors && colorScheme != null) {                    g.setColor(Color.BLACK);                  }                  g.drawString("" + ch,Math.round(xCoord),Math.round(yCoord));                }              }            }          }        }      }    }    SortedSet<Integer> jumpColumns=gapColumnContractor.getJumpPositionsRelativeToLayoutColumns();    for (    Integer col : jumpColumns) {      if (cellWidth > 1) {        g.setColor(Color.WHITE);        g.drawLine((int)getX(col),-1,(int)getX(col),getSize().height);        g.setColor(Color.GRAY);        g.drawLine((int)getX(col) - 1,-1,(int)getX(col) - 1,getSize().height);        g.drawLine((int)getX(col) + 1,-1,(int)getX(col) + 1,getSize().height);      } else {        g.setColor(Color.LIGHT_GRAY);        g.drawLine((int)getX(col),-1,(int)getX(col),getSize().height);      }    }  }}  }
class C{  @Override public void refreshWorkspace(String workspaceName){  GeoServerRESTManager manager=GeoServerRESTManagerFactory.getManager(connection);  if (manager != null) {    GeoServerRESTReader reader=manager.getReader();    if (reader != null) {      Map<String,List<StyleWrapper>> styleMap=new LinkedHashMap<String,List<StyleWrapper>>();      int count=1;      List<StyleWrapper> styleList=new ArrayList<StyleWrapper>();      if (workspaceName.compareTo(DEFAULT_WORKSPACE_NAME) == 0) {        count=parseStyleInDefaultWorkspace(reader,count,styleList);        styleMap.put(DEFAULT_WORKSPACE_NAME,styleList);      } else {        count=parseStyleInWorkspace(reader,styleMap,count,workspaceName);      }      if (parentObj != null) {        parentObj.readStylesComplete(connection,styleMap,true);      }    }  }}  }
class C{  @Override public long nodeNumber(){  return nodeNumber;}  }
class C{  public boolean isCodeAttribute(){  return false;}  }
class C{  public void requestNodeInfo(int nodeId){  enqueue(new RequestNodeInfoMessageClass().doRequest(nodeId));}  }
class C{  public CM_DIALOG_SELECT(int opcode,State state,State... restStates){  super(opcode,state,restStates);}  }
class C{  public void animateXY(int durationMillisX,int durationMillisY,Easing.EasingOption easingX,Easing.EasingOption easingY){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorY=ObjectAnimator.ofFloat(this,"phaseY",0f,1f);  animatorY.setInterpolator(Easing.getEasingFunctionFromOption(easingY));  animatorY.setDuration(durationMillisY);  ObjectAnimator animatorX=ObjectAnimator.ofFloat(this,"phaseX",0f,1f);  animatorX.setInterpolator(Easing.getEasingFunctionFromOption(easingX));  animatorX.setDuration(durationMillisX);  if (durationMillisX > durationMillisY) {    animatorX.addUpdateListener(mListener);  } else {    animatorY.addUpdateListener(mListener);  }  animatorX.start();  animatorY.start();}  }
class C{  private static void initiateGatewayFields(final ApplicationContext context){  tagManager=context.getBean(TagManager.class);  supervisionManager=context.getBean(SupervisionManager.class);  commandManager=context.getBean(CommandManager.class);  alarmService=context.getBean(AlarmService.class);  configurationService=context.getBean(ConfigurationService.class);  statisticsService=context.getBean(StatisticsService.class);  tagService=context.getBean(TagService.class);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  Constraint.verify(principals);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FORCE_HE_BECOME_OFFLINE_TIMEOUT(String value0){  return new SM_SYSTEM_MESSAGE(1301020,value0);}  }
class C{  private void updateNotification(int notificationId,int mediaType,String url){  if (doesNotificationExist(notificationId) && !doesNotificationNeedUpdate(notificationId,mediaType)) {    return;  }  destroyNotification(notificationId);  if (mediaType != MEDIATYPE_NO_MEDIA) {    createNotification(notificationId,mediaType,url);  }  if (mNotifications.size() == 0)   stopSelf();}  }
class C{  public boolean like(User user){  boolean like=this.likedBy.add(user);  if (like) {    this.likes++;  }  return like;}  }
class C{  public TShortHash(){  super();  this._hashingStrategy=this;}  }
class C{  public LongArrayList bottom(int n){  LongArrayList bottom=new LongArrayList();  long[] values=data.toLongArray();  LongArrays.parallelQuickSort(values);  for (int i=0; i < n && i < values.length; i++) {    bottom.add(values[i]);  }  return bottom;}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  executeImmediately(getSyntax());}  }
class C{  public void recordSplashscreenBackgroundColor(int type){  assert !mCommitted;  assert type >= 0 && type < SPLASHSCREEN_COLOR_STATUS_MAX;  mSplashScreenBackgroundColor=type;}  }
class C{  public void createSets(boolean bNoCategories){  createSets(true,1.0,bNoCategories);}  }
class C{  public boolean isCritical(){  return false;}  }
class C{  @Override public double[] makeCumulativeTestValues(){  double third=1 / 3.0;  double left=18.75;  double area=56.25;  return new double[]{0.0,0.0,0.75 / area,3 / area,6.75 / area,12 / area,third,(left + 7.125) / area,(left + 13.5) / area,(left + 36) / area,(left + 37.125) / area,1.0,1.0};}  }
class C{  public static ValueGetterSpacePredicate<ServerEntry> property(String propertyName,ISpacePredicate predicate){  return new ValueGetterSpacePredicate<ServerEntry>(new SpaceEntryPropertyGetter(propertyName),predicate);}  }
class C{  @Override public void download(){  doDownload(DownloadHelper.DOWNLOAD_TYPE);}  }
class C{  protected AdsGetAdsTargetingQuery accountId(int value){  return unsafeParam("account_id",value);}  }
class C{  public Builder appendStringColumnTransform(String column,String toAppend){  return transform(new AppendStringColumnTransform(column,toAppend));}  }
class C{  @Override public IAssignmentAlgorithm createAssignmentAlgorithm(){  return new AssignmentUsingLCAForTaxonomy(cName,usePercentIdentityFilter);}  }
class C{  @Override public void doctypeDecl(String rootElement,String publicId,String systemId,Augmentations augs) throws XNIException {  fInDTD=true;  try {    if (fLexicalHandler != null) {      fLexicalHandler.startDTD(rootElement,publicId,systemId);    }  } catch (  SAXException e) {    throw new XNIException(e);  }  if (fDeclHandler != null) {    fDeclaredAttrs=new SymbolHash();  }}  }
class C{  public JsonToken peek() throws IOException {  int p=peeked;  if (p == PEEKED_NONE) {    p=doPeek();  }switch (p) {case PEEKED_BEGIN_OBJECT:    return JsonToken.BEGIN_OBJECT;case PEEKED_END_OBJECT:  return JsonToken.END_OBJECT;case PEEKED_BEGIN_ARRAY:return JsonToken.BEGIN_ARRAY;case PEEKED_END_ARRAY:return JsonToken.END_ARRAY;case PEEKED_SINGLE_QUOTED_NAME:case PEEKED_DOUBLE_QUOTED_NAME:case PEEKED_UNQUOTED_NAME:return JsonToken.NAME;case PEEKED_TRUE:case PEEKED_FALSE:return JsonToken.BOOLEAN;case PEEKED_NULL:return JsonToken.NULL;case PEEKED_SINGLE_QUOTED:case PEEKED_DOUBLE_QUOTED:case PEEKED_UNQUOTED:case PEEKED_BUFFERED:return JsonToken.STRING;case PEEKED_LONG:case PEEKED_NUMBER:return JsonToken.NUMBER;case PEEKED_EOF:return JsonToken.END_DOCUMENT;default :throw new AssertionError();}}  }
class C{  public PhotosGetUserPhotosQuery sort(PhotosGetUserPhotosSort value){  return unsafeParam("sort",value);}  }
class C{  public void onDialogSelect(int dialogId,Player player,int questId,int extendedRewardIndex){}  }
class C{  public JRangeSlider createHorizontalRangeSlider(){  return createRangeSlider(JRangeSlider.HORIZONTAL,JRangeSlider.LEFTRIGHT_TOPBOTTOM);}  }
class C{  public CommandBuilder withArguments(String... arguments){  this.arguments.addAll(Arrays.asList(arguments));  return this;}  }
class C{  private static String toStartupShutdownString(String prefix,String[] msg){  StringBuilder b=new StringBuilder(prefix);  b.append("\n/************************************************************");  for (  String s : msg)   b.append("\n" + prefix + s);  b.append("\n************************************************************/");  return b.toString();}  }
class C{  private void putEntry(String key,CacheHeader entry){  if (!mEntries.containsKey(key)) {    mTotalSize+=entry.size;  } else {    CacheHeader oldEntry=mEntries.get(key);    mTotalSize+=(entry.size - oldEntry.size);  }  mEntries.put(key,entry);}  }
class C{  public DistributedTestCLI(String[] args){  cliOptions=createOptions();  try {    CommandLineParser parser=new GnuParser();    commandLine=parser.parse(cliOptions,args,true);    if (hasOption("h")) {      printHelp();      System.exit(1);    }    if (!hasOption("j")) {      logger.info("The full path of the jar file must be set with -j");      System.exit(1);    }  } catch (  Exception e) {    e.printStackTrace();    System.exit(1);  }}  }
class C{  public WriteModifiers remove(WriteModifiers modifiers){  return createIfNeeded(super.remove(modifiers));}  }
class C{  public SuffixFileFilter(String suffix){  this(suffix,IOCase.SENSITIVE);}  }
class C{  private void inspectConditionsWithBooleans(LinkedList<PsiElement> objBranchConditions){  for (  PsiElement objExpression : objBranchConditions) {    if (!(objExpression instanceof ConstantReference)) {      continue;    }    if (ExpressionSemanticUtil.isBoolean((ConstantReference)objExpression)) {      holder.registerProblem(objExpression,strProblemDescriptionBooleans,ProblemHighlightType.GENERIC_ERROR_OR_WARNING);    }  }}  }
class C{  private void doInterBlockOptimizations(){  boolean hasChanged=true;  while (hasChanged) {    hasChanged=false;    List<Unit> tempList=new ArrayList<Unit>();    tempList.addAll(mUnits);    Iterator<Unit> it=tempList.iterator();    while (it.hasNext()) {      Unit u=it.next();      if (u instanceof LoadInst) {        if (debug) {          G.v().out.println("inter trying: " + u);        }        Block loadBlock=mUnitToBlockMap.get(u);        List<Unit> defs=mLocalDefs.getDefsOfAt(((LoadInst)u).getLocal(),u);        if (defs.size() == 1) {          Block defBlock=mUnitToBlockMap.get(defs.get(0));          if (defBlock != loadBlock && !(isExceptionHandlerBlock(loadBlock))) {            Unit storeUnit=defs.get(0);            if (storeUnit instanceof StoreInst) {              List<UnitValueBoxPair> uses=mLocalUses.getUsesOf(storeUnit);              if (uses.size() == 1) {                if (allSuccesorsOfAreThePredecessorsOf(defBlock,loadBlock)) {                  if (getDeltaStackHeightFromTo(defBlock.getSuccOf(storeUnit),defBlock.getTail()) == 0) {                    Iterator<Block> it2=defBlock.getSuccs().iterator();                    boolean res=true;                    while (it2.hasNext()) {                      Block b=it2.next();                      if (getDeltaStackHeightFromTo(b.getHead(),b.getTail()) != 0) {                        res=false;                        break;                      }                      if (b.getPreds().size() != 1 || b.getSuccs().size() != 1) {                        res=false;                        break;                      }                    }                    if (debug) {                      G.v().out.println(defBlock.toString() + loadBlock.toString());                    }                    if (res) {                      defBlock.remove(storeUnit);                      mUnitToBlockMap.put(storeUnit,loadBlock);                      loadBlock.insertBefore(storeUnit,loadBlock.getHead());                      hasChanged=true;                      if (debug) {                        G.v().out.println("inter-block opti occurred " + storeUnit + " "+ u);                      }                      if (debug) {                        G.v().out.println(defBlock.toString() + loadBlock.toString());                      }                    }                  }                }              }            }          }        } else         if (defs.size() == 2) {          Unit def0=defs.get(0);          Unit def1=defs.get(1);          Block defBlock0=mUnitToBlockMap.get(def0);          Block defBlock1=mUnitToBlockMap.get(def1);          if (defBlock0 != loadBlock && defBlock1 != loadBlock && defBlock0 != defBlock1 && !(isExceptionHandlerBlock(loadBlock))) {            if (mLocalUses.getUsesOf(def0).size() == 1 && mLocalUses.getUsesOf(def1).size() == 1) {              List<Block> def0Succs=defBlock0.getSuccs();              List<Block> def1Succs=defBlock1.getSuccs();              if (def0Succs.size() == 1 && def1Succs.size() == 1) {                if (def0Succs.get(0) == loadBlock && def1Succs.get(0) == loadBlock) {                  if (loadBlock.getPreds().size() == 2) {                    if ((def0 == defBlock0.getTail() || getDeltaStackHeightFromTo(defBlock0.getSuccOf(def0),defBlock0.getTail()) == 0) && (def1 == defBlock1.getTail() || getDeltaStackHeightFromTo(defBlock1.getSuccOf(def1),defBlock1.getTail()) == 0)) {                      defBlock0.remove(def0);                      defBlock1.remove(def1);                      loadBlock.insertBefore(def0,loadBlock.getHead());                      mUnitToBlockMap.put(def0,loadBlock);                      hasChanged=true;                      if (debug) {                        G.v().out.println("inter-block opti2 occurred " + def0);                      }                    } else {                      if (debug) {                        G.v().out.println("failed: inter1");                      }                    }                  } else {                    if (debug) {                      G.v().out.println("failed: inter2");                    }                  }                } else {                  if (debug) {                    G.v().out.println("failed: inter3");                  }                }              } else {                if (debug) {                  G.v().out.println("failed: inter4");                }              }            } else {              if (debug) {                G.v().out.println("failed: inter5");              }            }          } else {            if (debug) {              G.v().out.println("failed: inter6");            }          }        }      }    }  }}  }
class C{  protected boolean isIncludeElement(QName element){  return element.localpart.equals(XINCLUDE_INCLUDE) && hasXIncludeNamespace(element);}  }
class C{  public DimensionsApiRequest(String dimension,String filters,String format,@NotNull String perPage,@NotNull String page,DimensionDictionary dimensionDictionary,UriInfo uriInfo) throws BadApiRequestException {  super(format,perPage,page,uriInfo);  this.dimensions=generateDimensions(dimension,dimensionDictionary);  this.filters=generateFilters(filters,dimensionDictionary);  LOG.debug("Api request: \nDimensions: {},\nFilters: {},\nFormat: {}\nPagination: {}",this.dimensions,this.filters,this.format,this.paginationParameters);}  }
class C{  public VelocityScroller(Context context,Interpolator interpolator){  this(context,interpolator,true);}  }
class C{  public void printVectors(double m[][],double v[][]){  for (int i=0; i < v.length; i++) {    System.out.print("  mean[" + i + "]: ");    for (int j=0; j < m[i].length; j++)     System.out.format("%.6f ",m[i][j]);    System.out.print("\n  vari[" + i + "]: ");    for (int j=0; j < v[i].length; j++)     System.out.format("%.6f ",v[i][j]);    System.out.println();  }}  }
class C{  public StatsGetQuery dateTo(String value){  return unsafeParam("date_to",value);}  }
class C{  public boolean do_tlo(){  return soot.PhaseOptions.getBoolean(options,"do-tlo");}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  public static DefaultColumnEntity of(String name,List<Column> columns){  DefaultColumnEntity columnEntity=new DefaultColumnEntity(name);  columnEntity.addAll(columns);  return columnEntity;}  }
class C{  protected void drawForm(Canvas c,float x,float y,int index,Legend legend){  int[] colors=legend.getColors();  if (colors[index] == ColorTemplate.COLOR_SKIP)   return;  mFormPaint.setColor(colors[index]);  float formSize=legend.getFormSize();  float half=formSize / 2f;switch (legend.getFormType()) {case CIRCLE:    c.drawCircle(x + half,y,half,mFormPaint);  break;case SQUARE:c.drawRect(x,y - half,x + formSize,y + half,mFormPaint);break;case LINE:c.drawLine(x,y,x + formSize,y,mFormPaint);break;}}  }
class C{  public static String identity(String str){  return Normalizer.normalize(str.trim().toLowerCase(),Normalizer.Form.NFD).replaceAll("[^a-z0-9]","");}  }
class C{  private T[][] orthogonalizeMatrix(final T[][] m,final double threshold) throws MathIllegalArgumentException {  T x00=m[0][0];  T x01=m[0][1];  T x02=m[0][2];  T x10=m[1][0];  T x11=m[1][1];  T x12=m[1][2];  T x20=m[2][0];  T x21=m[2][1];  T x22=m[2][2];  double fn=0;  double fn1;  final T[][] o=MathArrays.buildArray(m[0][0].getField(),3,3);  int i=0;  while (++i < 11) {    final T mx00=m[0][0].multiply(x00).add(m[1][0].multiply(x10)).add(m[2][0].multiply(x20));    final T mx10=m[0][1].multiply(x00).add(m[1][1].multiply(x10)).add(m[2][1].multiply(x20));    final T mx20=m[0][2].multiply(x00).add(m[1][2].multiply(x10)).add(m[2][2].multiply(x20));    final T mx01=m[0][0].multiply(x01).add(m[1][0].multiply(x11)).add(m[2][0].multiply(x21));    final T mx11=m[0][1].multiply(x01).add(m[1][1].multiply(x11)).add(m[2][1].multiply(x21));    final T mx21=m[0][2].multiply(x01).add(m[1][2].multiply(x11)).add(m[2][2].multiply(x21));    final T mx02=m[0][0].multiply(x02).add(m[1][0].multiply(x12)).add(m[2][0].multiply(x22));    final T mx12=m[0][1].multiply(x02).add(m[1][1].multiply(x12)).add(m[2][1].multiply(x22));    final T mx22=m[0][2].multiply(x02).add(m[1][2].multiply(x12)).add(m[2][2].multiply(x22));    o[0][0]=x00.subtract(x00.multiply(mx00).add(x01.multiply(mx10)).add(x02.multiply(mx20)).subtract(m[0][0]).multiply(0.5));    o[0][1]=x01.subtract(x00.multiply(mx01).add(x01.multiply(mx11)).add(x02.multiply(mx21)).subtract(m[0][1]).multiply(0.5));    o[0][2]=x02.subtract(x00.multiply(mx02).add(x01.multiply(mx12)).add(x02.multiply(mx22)).subtract(m[0][2]).multiply(0.5));    o[1][0]=x10.subtract(x10.multiply(mx00).add(x11.multiply(mx10)).add(x12.multiply(mx20)).subtract(m[1][0]).multiply(0.5));    o[1][1]=x11.subtract(x10.multiply(mx01).add(x11.multiply(mx11)).add(x12.multiply(mx21)).subtract(m[1][1]).multiply(0.5));    o[1][2]=x12.subtract(x10.multiply(mx02).add(x11.multiply(mx12)).add(x12.multiply(mx22)).subtract(m[1][2]).multiply(0.5));    o[2][0]=x20.subtract(x20.multiply(mx00).add(x21.multiply(mx10)).add(x22.multiply(mx20)).subtract(m[2][0]).multiply(0.5));    o[2][1]=x21.subtract(x20.multiply(mx01).add(x21.multiply(mx11)).add(x22.multiply(mx21)).subtract(m[2][1]).multiply(0.5));    o[2][2]=x22.subtract(x20.multiply(mx02).add(x21.multiply(mx12)).add(x22.multiply(mx22)).subtract(m[2][2]).multiply(0.5));    final double corr00=o[0][0].getReal() - m[0][0].getReal();    final double corr01=o[0][1].getReal() - m[0][1].getReal();    final double corr02=o[0][2].getReal() - m[0][2].getReal();    final double corr10=o[1][0].getReal() - m[1][0].getReal();    final double corr11=o[1][1].getReal() - m[1][1].getReal();    final double corr12=o[1][2].getReal() - m[1][2].getReal();    final double corr20=o[2][0].getReal() - m[2][0].getReal();    final double corr21=o[2][1].getReal() - m[2][1].getReal();    final double corr22=o[2][2].getReal() - m[2][2].getReal();    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;    if (FastMath.abs(fn1 - fn) <= threshold) {      return o;    }    x00=o[0][0];    x01=o[0][1];    x02=o[0][2];    x10=o[1][0];    x11=o[1][1];    x12=o[1][2];    x20=o[2][0];    x21=o[2][1];    x22=o[2][2];    fn=fn1;  }  throw new MathIllegalArgumentException(LocalizedGeometryFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX,i - 1);}  }
class C{  public static int apply(ViewerBase viewer,Writer writer,boolean showInternalLabels,boolean showUnassignedLabels,boolean simplify) throws IOException {  PhyloTree tree=viewer.getTree();  Node root=tree.getRoot();  if (root == null)   return 0;  NodeSet toUse=null;  if (viewer.getSelectedNodes().size() > 0) {    toUse=new NodeSet(tree);    visitNodesToUseRec(viewer,root,toUse);    while (!viewer.getSelected(root)) {      Node w=null;      for (Edge e=root.getFirstOutEdge(); e != null; e=root.getNextOutEdge(e)) {        if (toUse.contains(e.getTarget())) {          if (w == null)           w=e.getTarget(); else {            w=null;            break;          }        }      }      if (w != null)       root=w; else       break;    }  }  int countNodes=writeAsTreeRec(viewer,toUse,root,writer,showInternalLabels,showUnassignedLabels,simplify,0);  writer.write(";\n");  return countNodes;}  }
class C{  FirstMoment(){  n=0;  m1=Double.NaN;  dev=Double.NaN;  nDev=Double.NaN;}  }
class C{  public boolean isEntryFifoMode(){  return entryFifoMode;}  }
class C{  public PhotosGetAlbumsQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public void reassign(){  int i, j;  for (i=0, j=lastNumber - 1; i < j; ++i) {    if (numberToObj[i] != null)     continue;    while (j > i) {      if (numberToObj[j] != null)       break;      --j;    }    if (i == j)     break;    numberToObj[i]=numberToObj[j];    numberToObj[i].setNumber(i);    numberToObj[j]=null;  }  lastNumber=i;}  }
class C{  @Override public int read(byte[] buf,int off,int len) throws IOException {  int firstCount=0;  int b=0;  while (len > 0 && b >= 0) {    b=readFirstBytes();    if (b >= 0) {      buf[off++]=(byte)(b & 0xFF);      len--;      firstCount++;    }  }  int secondCount=in.read(buf,off,len);  return secondCount < 0 ? firstCount > 0 ? firstCount : -1 : firstCount + secondCount;}  }
class C{  public static boolean isWatchFeatureRequired(@NotNull AndroidFacet facet){  MergedManifest mergedManifest=MergedManifest.get(facet);  Element feature=mergedManifest.findUsedFeature(UsesFeature.HARDWARE_TYPE_WATCH);  return feature != null && isRequired(feature);}  }
class C{  @Override public void readFields(DataInput in) throws IOException {}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Root_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200282,skillname);}  }
class C{  public Bundler putBundle(String key,Bundle value){  bundle.putBundle(key,value);  return this;}  }
class C{  public static int nextNewLine(byte[] text,int offset){  while (offset < text.length) {    if (text[offset] == '\n')     return offset; else     offset++;  }  return offset;}  }
class C{  public Token nextToken(){  try {    while (true) {      int c=in.read();      if (isWhiteSpace(c))       continue;switch (c) {case EOF:        return null;case '(':      return LEFT_PAREN;case ')':    return RIGHT_PAREN;case '`':  return QUASIQUOTE;case '\'':return QUOTE;case ',':c=in.read();if (c == '@') return COMMA_AT; else {unreadIfNotEOF(c);return COMMA;}case ';':eatLineRemaining();break;case '#':c=in.read();switch (c) {case '|':eatNestedComment();break;case '!':c=Character.toLowerCase(in.read());if (c == 'f' || c == 'F') {foldingCase=true;expectIgnoreCase("old-case");} else if (c == 'n' || c == 'N') {foldingCase=false;expectIgnoreCase("o-fold-case");} else throw new LexicalException();break;case ';':return COMMENT_NEXT;case '\\':return nextCharacter();case 't':case 'T':c=in.read();if (c == 'r' || c == 'R') expectIgnoreCase("ue"); else unreadIfNotEOF(c);return ScmBoolean.TRUE;case 'f':case 'F':c=in.read();if (c == 'a' || c == 'A') expectIgnoreCase("lse"); else unreadIfNotEOF(c);return ScmBoolean.FALSE;case '(':return LEFT_VECTOR;case 'u':case 'U':if (in.read() == '8' && in.read() == '(') return BYTE8; else throw new LexicalException();case EOF:throw new LexicalException();default :in.unread(c);if (Character.isLetter(c)) {in.unread('#');return parseNumber(untilNextDelimiter());} else return nextLabel();}break;case '\"':return nextString();case '|':return nextVerbatimIdentifer();default :in.unread(c);return nextIdentiferOrNumber();}}} catch (IOException ex) {return null;}}  }
class C{  public static void main(String[] args){  for (int i=0; i < 256; i++) {    System.out.println("" + i + "="+ ulawToShort((short)i));  }}  }
class C{  public boolean isAttributeDeprecated(){  final String doc=getDocValue(null);  return doc != null && StringUtil.containsIgnoreCase(doc,"deprecated");}  }
class C{  public boolean isReleased(){  return (mInternalUseOnItemTouchListener == null);}  }
class C{  ScoutGroup(ConstraintWidget[] widgets){  bounds=new int[4][widgets.length];  for (int i=0; i < widgets.length; i++) {    ConstraintWidget widget=widgets[i];    bounds[0][i]=widget.getY();    bounds[1][i]=bounds[0][i] + widget.getHeight();    bounds[2][i]=widget.getX();    bounds[3][i]=bounds[2][i] + widget.getWidth();  }  mRows=Utils.gaps(bounds[0],bounds[1]);  mCols=Utils.gaps(bounds[2],bounds[3]);  int[] r=Utils.cells(bounds[0],bounds[1]);  int[] c=Utils.cells(bounds[2],bounds[3]);  ConstraintWidget[][] table=new ConstraintWidget[mCols][mRows];  for (  ConstraintWidget widget : widgets) {    int row=Utils.getPosition(r,widget.getY(),widget.getY() + widget.getHeight());    int col=Utils.getPosition(c,widget.getX(),widget.getX() + widget.getWidth());    if (row == -1 || col == -1) {      mSupported=false;      return;    }    table[col][row]=widget;  }  int skip=0;  for (int row=0; row < mRows; row++) {    for (int col=0; col < mCols; col++) {      if (table[col][row] == null) {        skip++;      } else {        if (skip > 0) {          table[col][row].setContainerItemSkip(skip);          skip=0;        } else {          table[col][row].setContainerItemSkip(0);        }      }    }  }  mColAlign=new int[mCols];  for (int i=0; i < table.length; i++) {    ConstraintWidget[] constraintWidgets=table[i];    mColAlign[i]=inferAlignment(constraintWidgets);  }}  }
class C{  public void incrementCount(K key,V value,double count){  Counter<V> valueCounter=ensureCounter(key);  valueCounter.incrementCount(value,count);}  }
class C{  public void clearDelimiters(){  smDelims=null;}  }
class C{  protected NotesDeleteQuery noteId(int value){  return unsafeParam("note_id",value);}  }
class C{  public Line(final Vector2D p1,final Vector2D p2,final double tolerance){  reset(p1,p2);  this.tolerance=tolerance;}  }
class C{  @Override public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException ex) {    throw new InternalError();  }}  }
class C{  public void initialiseSelectedSymbolizerIndex(){  this.selectedSymbolizerIndex=0;}  }
class C{  public void addHeader(String header,String value){  clientHeaderMap.put(header,value);}  }
class C{  public PDFView(Context context,AttributeSet set){  super(context,set);  if (isInEditMode()) {    return;  }  cacheManager=new CacheManager();  animationManager=new AnimationManager(this);  dragPinchManager=new DragPinchManager(this,animationManager);  paint=new Paint();  debugPaint=new Paint();  debugPaint.setStyle(Style.STROKE);  pdfiumCore=new PdfiumCore(context);  setWillNotDraw(false);}  }
class C{  public static Node makeSampleIconFX(Document doc,String sample,boolean setColor,boolean setShape,int size){  final javafx.scene.canvas.Canvas canvas=new javafx.scene.canvas.Canvas(size,size);  Color color=null;  if (setColor) {    color=doc.getSampleAttributeTable().getSampleColor(sample);    if (color == null)     color=doc.getChartColorManager().getSampleColor(sample);  }  final GraphicsContext gc=canvas.getGraphicsContext2D();  if (color != null)   gc.setFill(Utilities.getColorFX(color));  gc.setStroke(javafx.scene.paint.Color.BLACK);  String shapeName=doc.getSampleAttributeTable().getSampleShape(sample);  if (shapeName == null || !setShape)   shapeName="square";switch (shapeName.toLowerCase()) {case "triangle":    if (color != null)     gc.fillPolygon(new double[]{1,size - 1,size / 2},new double[]{size - 1,size - 1,1},3);  gc.strokePolygon(new double[]{1,size - 1,size / 2},new double[]{size - 1,size - 1,1},3);break;case "diamond":if (color != null) gc.fillPolygon(new double[]{1,size / 2,size - 1,size / 2},new double[]{size / 2,size - 1,size / 2,1},4);gc.strokePolygon(new double[]{1,size / 2,size - 1,size / 2},new double[]{size / 2,size - 1,size / 2,1},4);break;case "circle":if (color != null) gc.fillOval(1,1,size - 2,size - 2);gc.strokeOval(1,1,size - 2,size - 2);break;default :case "square":if (color != null) gc.fillRect(1,1,size - 2,size - 2);gc.strokeRect(1,1,size - 2,size - 2);}return canvas;}  }
class C{  public void with(@NotNull Runnable onAnyInvalidated){  myOnAnyInvalidated=onAnyInvalidated;}  }
class C{  void prepareDisplayTaskFor(ImageAware imageAware,String memoryCacheKey){  cacheKeysForImageAwares.put(imageAware.getId(),memoryCacheKey);}  }
class C{  public DateTime toJodaDateTime(Chronology chronology){  try {    return new DateTime(year,month,day,hour,minute,second,millis,chronology.withZone(DateTimeZone.forTimeZone(timeZone)));  } catch (  IllegalInstantException ex) {    LocalDateTime localDateTime=new LocalDateTime(year,month,day,hour,minute,second,millis,chronology.withZone(DateTimeZone.forTimeZone(timeZone)));    return localDateTime.toLocalDate().toDateTimeAtStartOfDay();  }}  }
class C{  public INDArray toBgr(BufferedImage image){  if (image == null)   throw new IllegalStateException("Unable to load image");  image=scalingIfNeed(image,false);  return toINDArrayBGR(image);}  }
class C{  private DataQueryParams removeDimension(String dimension){  this.dimensions.remove(new BaseDimensionalObject(dimension));  return this;}  }
class C{  public Matrix times(Matrix B){  if (B.m != n) {    throw new IllegalArgumentException("Matrix inner dimensions must agree.");  }  Matrix X=new Matrix(m,B.n);  double[][] C=X.getArray();  double[] Bcolj=new double[n];  for (int j=0; j < B.n; j++) {    for (int k=0; k < n; k++) {      Bcolj[k]=B.A[k][j];    }    for (int i=0; i < m; i++) {      double[] Arowi=A[i];      double s=0;      for (int k=0; k < n; k++) {        s+=Arowi[k] * Bcolj[k];      }      C[i][j]=s;    }  }  return X;}  }
class C{  public static String processTargetPage(HttpServletRequest request,HttpServletResponse response){  String targetPageResponse=(String)request.getAttribute("targetPageResponse");  if (targetPageResponse == null) {    targetPageResponse=request.getParameter("targetPageResponse");  }  if (UtilValidate.isNotEmpty(targetPageResponse)) {    if ("redirect-done".equals(targetPageResponse) || "forward-done".equals(targetPageResponse) || "forward-target".equals(targetPageResponse)|| "redirect-target".equals(targetPageResponse)) {      String targetPage;      boolean isAlt=targetPageResponse.endsWith("-done");      if (isAlt) {        targetPage=(String)request.getAttribute("donePage");        if (targetPage == null) {          targetPage=request.getParameter("donePage");          if (targetPage == null) {            targetPage=request.getParameter("DONE_PAGE");          }        }      } else {        isAlt=true;        targetPage=(String)request.getAttribute("targetPage");        if (targetPage == null) {          targetPage=request.getParameter("targetPage");          if (targetPage == null) {            targetPage=request.getParameter("TARGET_PAGE");          }        }      }      if (UtilValidate.isEmpty(targetPage)) {        Debug.logError("Scipio: Missing target page for targetPageResponse " + targetPageResponse,module);        return "error";      } else {        if (RequestHandler.controllerHasRequestUriDirect(request,targetPage)) {          request.setAttribute("targetPage",targetPage);          return targetPageResponse.substring(0,targetPageResponse.indexOf('-'));        } else {          Debug.logError("Scipio: targetPage is not a valid direct controller request URI for redirect/forward " + "('" + targetPage + "')",module);          return "error";        }      }    } else {      Debug.logError("Scipio: Invalid targetPageResponse: " + targetPageResponse,module);      return "error";    }  }  return "success";}  }
class C{  private static void doCopyDirectory(File srcDir,File destDir,FileFilter filter,boolean preserveFileDate,List<String> exclusionList) throws IOException {  File[] srcFiles=filter == null ? srcDir.listFiles() : srcDir.listFiles(filter);  if (srcFiles == null) {    throw new IOException("Failed to list contents of " + srcDir);  }  if (destDir.exists()) {    if (destDir.isDirectory() == false) {      throw new IOException("Destination '" + destDir + "' exists but is not a directory");    }  } else {    if (!destDir.mkdirs() && !destDir.isDirectory()) {      throw new IOException("Destination '" + destDir + "' directory cannot be created");    }  }  if (destDir.canWrite() == false) {    throw new IOException("Destination '" + destDir + "' cannot be written to");  }  for (  File srcFile : srcFiles) {    File dstFile=new File(destDir,srcFile.getName());    if (exclusionList == null || !exclusionList.contains(srcFile.getCanonicalPath())) {      if (srcFile.isDirectory()) {        doCopyDirectory(srcFile,dstFile,filter,preserveFileDate,exclusionList);      } else {        doCopyFile(srcFile,dstFile,preserveFileDate);      }    }  }  if (preserveFileDate) {    destDir.setLastModified(srcDir.lastModified());  }}  }
class C{  public void removeDatatransferProgressListener(OnDatatransferProgressListener listener,Account account,OCFile file){  if (account == null || file == null || listener == null)   return;  Long fileId=file.getFileId();  if (mBoundListeners.get(fileId) == listener) {    mBoundListeners.remove(fileId);  }}  }
class C{  public void dispose(StepMetaInterface smi,StepDataInterface sdi){  this.meta=((SortKeyStepMeta)smi);  this.data=((SortKeyStepData)sdi);  this.sortDataRows=null;  super.dispose(smi,sdi);  this.meta=null;  this.data=null;}  }
class C{  private void sendAutocomplete(Autocomplete autocomplete){  sendJson(Json.object(ACTION,ACTION_AUTOCOMPLETE,AUTOCOMPLETE_CANDIDATES,autocomplete.getCandidates(),AUTOCOMPLETE_CURSOR,autocomplete.getCursorPosition()));}  }
class C{  @Deployment public void testVariableNamesScope(){  Map<String,Object> varMap=new HashMap<String,Object>();  varMap.put("test","test");  varMap.put("helloWorld","helloWorld");  ProcessInstance pi=runtimeService.startProcessInstanceByKey("simpleSubProcess",varMap);  Task subProcessTask=taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult();  runtimeService.setVariableLocal(pi.getProcessInstanceId(),"mainProcessLocalVariable","Hello World");  assertEquals("Task in subprocess",subProcessTask.getName());  runtimeService.setVariableLocal(subProcessTask.getExecutionId(),"subProcessLocalVariable","Hello SubProcess");  List<String> result=processEngineConfiguration.getCommandExecutor().execute(new GetVariableNamesCommand(pi.getProcessInstanceId(),true));  assertTrue(result.contains("test"));  assertTrue(result.contains("helloWorld"));  assertTrue(result.contains("mainProcessLocalVariable"));  assertFalse(result.contains("subProcessLocalVariable"));  result=processEngineConfiguration.getCommandExecutor().execute(new GetVariableNamesCommand(pi.getProcessInstanceId(),false));  assertTrue(result.contains("test"));  assertTrue(result.contains("mainProcessLocalVariable"));  assertTrue(result.contains("helloWorld"));  assertFalse(result.contains("subProcessLocalVariable"));  result=processEngineConfiguration.getCommandExecutor().execute(new GetVariableNamesCommand(subProcessTask.getExecutionId(),true));  assertTrue(result.contains("test"));  assertTrue(result.contains("subProcessLocalVariable"));  assertFalse(result.contains("helloWorld"));  assertFalse(result.contains("mainProcessLocalVariable"));  result=processEngineConfiguration.getCommandExecutor().execute(new GetVariableNamesCommand(subProcessTask.getExecutionId(),false));  assertTrue(result.contains("test"));  assertTrue(result.contains("subProcessLocalVariable"));  assertTrue(result.contains("helloWorld"));  assertTrue(result.contains("mainProcessLocalVariable"));  taskService.complete(subProcessTask.getId());}  }
class C{  public WebDriverWrapper(WebDriver driver,FrameSwitcher frameSwitcher){  super(driver);  this.frameSwitcher=frameSwitcher;}  }
class C{  public boolean equals(Object other){  if (other == this) {    return true;  } else   if (other instanceof TIntArrayList) {    TIntArrayList that=(TIntArrayList)other;    if (that.size() != this.size()) {      return false;    } else {      for (int i=_pos; i-- > 0; ) {        if (this._data[i] != that._data[i]) {          return false;        }      }      return true;    }  } else {    return false;  }}  }
class C{  public static final int[] trim(int[] a,int size){  if (a.length == size) {    return a;  } else {    int[] b=new int[size];    System.arraycopy(a,0,b,0,size);    return b;  }}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public static DistributedLogServer runServer(Optional<String> uri,Optional<String> conf,Optional<String> streamConf,Optional<Integer> port,Optional<Integer> statsPort,Optional<Integer> shardId,Optional<Boolean> announceServerSet,Optional<Boolean> thriftmux,StatsReceiver statsReceiver,StatsProvider statsProvider) throws ConfigurationException, IllegalArgumentException, IOException {  final DistributedLogServer server=new DistributedLogServer(uri,conf,streamConf,port,statsPort,shardId,announceServerSet,thriftmux,statsReceiver,statsProvider);  server.runServer();  return server;}  }
class C{  public static void c2ir(double c[],int nc,double hh[],int leng){  hh[0]=Math.exp(c[0]);  for (int n=1; n < leng; n++) {    double d=0;    int upl=(n >= nc) ? nc - 1 : n;    for (int k=1; k <= upl; k++)     d+=k * c[k] * hh[n - k];    hh[n]=d / n;  }}  }
class C{  public static boolean isFilterClass(String clzName){  if (clzName == null || clzName.length() == 0)   return false;  for (  String prefix : Constants.FILTER_PREFIX) {    if (clzName.startsWith(prefix)) {      return true;    }  }  return false;}  }
class C{  public long readLong() throws IOException {  return dis.readLong();}  }
class C{  public DatabaseGetChairsQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public void count() throws QueryPlanException {  this.hasCount=true;}  }
class C{  private void logRequestMetrics(DataApiRequest request,Boolean readCache,DruidQuery<?> druidQuery){  Set<Dimension> dimensions=request.getDimensions();  for (  Dimension dim : dimensions) {    REGISTRY.meter("request.dimension." + dim.getApiName()).mark();  }  Set<LogicalMetric> metrics=request.getLogicalMetrics();  for (  LogicalMetric metric : metrics) {    REGISTRY.meter("request.metric." + metric.getName()).mark();  }  Table table=request.getTable();  REGISTRY.meter("request.logical.table." + table.getName() + "."+ table.getGranularity()).mark();  RequestLog.record(new BardQueryInfo(druidQuery.getQueryType().toJson(),false));  RequestLog.record(new DataRequest(table,request.getIntervals(),request.getFilters().values(),metrics,dimensions,druidQuery.getDataSource().getNames(),readCache,request.getFormat().toString()));}  }
class C{  protected void saveState(StartupState state) throws IOException {  createStateFileIfNotExists();  BufferedWriter writer=new BufferedWriter(new FileWriter(_stateFile));  writer.write(state.toString());  writer.flush();}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("load mapFile=");  final String fileName=np.getWordFileNamePunctuation();  np.matchIgnoreCase("mapType=");  final IdMapper.MapType mapType=IdMapper.MapType.valueOf(np.getWordMatchesRespectingCase(Basic.toString(IdMapper.MapType.values()," ")));  np.matchIgnoreCase("cName=");  final String cName=np.getWordMatchesRespectingCase(Basic.toString(ClassificationManager.getAllSupportedClassifications()," "));  np.matchIgnoreCase(";");  try {    Classification classification=ClassificationManager.get(cName,true);    ProgressListener progressListener;    if (ProgramProperties.isUseGUI())     progressListener=new ProgressDialog("Loading file","",(Component)getParent()); else     progressListener=new ProgressPercentage();    try {      final IdMapper mapper=classification.getIdMapper();      mapper.loadMappingFile(fileName,mapType,true,progressListener);    }  finally {      progressListener.close();    }    if (getParent() instanceof ImportBlastDialog) {      ((ImportBlastDialog)getParent()).getCommandManager().execute("use cViewer=" + cName + " state=true;");    }    ProgramProperties.put(ClassificationManager.getMapFileKey(cName,mapType),fileName);  } catch (  Exception ex) {    Basic.caught(ex);  }}  }
class C{  public boolean DeleteNode(int nodeId){synchronized (stream) {    File file=new File(this.folderName,String.format("node%d.xml",nodeId));    return file.delete();  }}  }
class C{  public XSDFACM(CMNode syntaxTree,int leafCount){  fLeafCount=leafCount;  fIsCompactedForUPA=syntaxTree.isCompactedForUPA();  if (DEBUG_VALIDATE_CONTENT) {    XSDFACM.time-=System.currentTimeMillis();  }  buildDFA(syntaxTree);  if (DEBUG_VALIDATE_CONTENT) {    XSDFACM.time+=System.currentTimeMillis();    System.out.println("DFA build: " + XSDFACM.time + "ms");  }}  }
class C{  public void removeEntryReferences(IEntryCacheInfo pEntry,TypeData pType,int numOfIndexesInsertedOnError){  boolean onError=numOfIndexesInsertedOnError > 0;  int refpos=1;  pType.getEntries().remove(pEntry.getMainListBackRef());  int numIndexesProcessed=0;  if (pType.hasIndexes()) {    IEntryData entryData=pEntry.getEntryHolder(this).getEntryData();    final TypeDataIndex[] indexes=pType.getIndexes();    for (    TypeDataIndex index : indexes) {      if (index.disableIndexUsageForOperation(pType,pEntry.getLatestIndexCreationNumber()))       continue;      if (onError) {        if (pEntry.getBackRefs() != null) {          if (refpos > pEntry.getBackRefs().size() - 1)           break;        } else {          if (numIndexesProcessed == numOfIndexesInsertedOnError)           break;        }      }      refpos=index.removeEntryIndexedField_main(pEntry.getEntryHolder(this),pEntry.getBackRefs(),index.getIndexValue(entryData),refpos,true,pEntry);      numIndexesProcessed++;    }    for (    QueryExtensionIndexManagerWrapper queryExtensionIndexManager : pType.getForeignQueriesHandlers())     queryExtensionIndexManager.removeEntry(new SpaceServerEntryImpl(pEntry,this),QueryExtensionIndexRemoveMode.NO_XTN,pEntry.getVersion());  }  if (pEntry.getBackRefs() != null)   pEntry.getBackRefs().clear();}  }
class C{  private void writeObject(ObjectOutputStream out) throws IOException {  if (unserializable) {    throw new NotSerializableException(GrantPermission.class.getName());  }  out.defaultWriteObject();}  }
class C{  protected void testAssertMappedValues(double[] data,Object[][] map,Double p,Double tolerance,NaNStrategy nanStrategy){  for (  Object[] o : map) {    Percentile.EstimationType e=(Percentile.EstimationType)o[0];    double expected=(Double)o[1];    try {      double result=new Percentile(p).withEstimationType(e).withNaNStrategy(nanStrategy).evaluate(data);      assertEquals("expected[" + e + "] = "+ expected+ " but was = "+ result,expected,result,tolerance);    } catch (    Exception ex) {      fail("Exception occured for estimation type " + e + ":"+ ex.getLocalizedMessage());    }  }}  }
class C{  public static String encodeBytes(byte[] source,int off,int len){  String encoded=null;  try {    encoded=encodeBytes(source,off,len,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  @Override public void draw(Canvas canvas){  Barcode barcode=mBarcode;  if (barcode == null) {    return;  }  RectF rect=new RectF(barcode.getBoundingBox());  rect.left=translateX(rect.left);  rect.top=translateY(rect.top);  rect.right=translateX(rect.right);  rect.bottom=translateY(rect.bottom);  if (graphicOverlay.isDrawRect())   canvas.drawRect(rect,mRectPaint);  if (graphicOverlay.isShowText())   canvas.drawText(barcode.rawValue,rect.left,rect.bottom,mTextPaint);}  }
class C{  public static boolean ensureAccess(SootMethod container,SootClass target,String options){  boolean accessors=options.equals("accessors");  boolean allowChanges=!(options.equals("none"));  boolean safeChangesOnly=!(options.equals("unsafe"));  if (isAccessLegal(container,target))   return true;  if (!allowChanges && !accessors)   return false;  if (safeChangesOnly && !accessors)   throw new RuntimeException("Not implemented yet!");  if (accessors)   return false;  if (target.isApplicationClass()) {    target.setModifiers(target.getModifiers() | Modifier.PUBLIC);    return true;  } else   return false;}  }
class C{  public boolean isApplicable(){  AlignmentViewer viewer=(AlignmentViewer)getViewer();  return viewer.getAlignment().getLength() > 0;}  }
class C{  public static void e(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_ERROR) {    return;  }  Log.e(tag,msg,throwable);}  }
class C{  public EulerAngle subtract(double x,double y,double z){  return add(-x,-y,-z);}  }
class C{  public static boolean isClosing(String tagName,String openTag){  if (openTag.equalsIgnoreCase("HEAD"))   return !isElement(tagName,ALLOWED_HEAD);  if (openTag.equalsIgnoreCase("P"))   return isElement(tagName,CLOSE_P);  if (openTag.equalsIgnoreCase("DT") || openTag.equalsIgnoreCase("DD"))   return isElement(tagName,CLOSE_DD_DT);  if (openTag.equalsIgnoreCase("LI") || openTag.equalsIgnoreCase("OPTION"))   return isElement(tagName,CLOSE_SELF);  if (openTag.equalsIgnoreCase("THEAD") || openTag.equalsIgnoreCase("TFOOT") || openTag.equalsIgnoreCase("TBODY")|| openTag.equalsIgnoreCase("TR")|| openTag.equalsIgnoreCase("COLGROUP"))   return isElement(tagName,CLOSE_TABLE);  if (openTag.equalsIgnoreCase("TH") || openTag.equalsIgnoreCase("TD"))   return isElement(tagName,CLOSE_TH_TD);  return false;}  }
class C{  void changeBackgroundColor(int backgroundColor){  this.backgroundColor=backgroundColor;  invalidate();}  }
class C{  public AbstractSequencer(int bufferSize,WaitStrategy waitStrategy){  if (bufferSize < 1) {    throw new IllegalArgumentException("bufferSize must not be less than 1");  }  if (Integer.bitCount(bufferSize) != 1) {    throw new IllegalArgumentException("bufferSize must be a power of 2");  }  this.bufferSize=bufferSize;  this.waitStrategy=waitStrategy;}  }
class C{  private void addSpanWatcher(){  Spannable spannable=getText();  if (spannable.getSpans(0,spannable.length(),getClass()) != null) {    spannable.setSpan(this,0,spannable.length(),Spanned.SPAN_INCLUSIVE_INCLUSIVE);  }}  }
class C{  public final void close(GsServerPacket closePacket,boolean forced){synchronized (guard) {    if (isWriteDisabled()) {      return;    }    pendingClose=true;    isForcedClosing=forced;    sendMsgQueue.clear();    sendMsgQueue.addLast(closePacket);    enableWriteInterest();  }}  }
class C{  public static Map<String,Object> prodFindDistinctVariants(DispatchContext dctx,Map<String,? extends Object> context){  return ServiceUtil.returnFailure();}  }
class C{  public ProjectUpdatedEvent(Project before,Project after,String updatedBy,UpdateProjectRQ updateProjectRQ){  super(before,after);  Preconditions.checkArgument(!Strings.isNullOrEmpty(updatedBy));  this.updatedBy=updatedBy;  this.updateProjectRQ=updateProjectRQ;}  }
class C{  @Override public void close() throws java.io.IOException {  flushBase64();  super.close();  buffer=null;  out=null;}  }
class C{  private static long addStackableItem(Player player,ItemTemplate itemTemplate,long count,ItemUpdatePredicate predicate){  Storage inventory=player.getInventory();  Collection<Item> items=inventory.getItemsByItemId(itemTemplate.getTemplateId());  for (  Item item : items) {    if (count == 0) {      break;    }    count=inventory.increaseItemCount(item,count,predicate.getUpdateType(item,true));  }  if (itemTemplate.getCategory() == ItemCategory.SHARD) {    Equipment equipment=player.getEquipment();    items=equipment.getEquippedItemsByItemId(itemTemplate.getTemplateId());    for (    Item item : items) {      if (count == 0) {        break;      }      count=equipment.increaseEquippedItemCount(item,count);    }  }  while (!inventory.isFull(itemTemplate.getExtraInventoryId()) && count > 0) {    Item newItem=ItemFactory.newItem(itemTemplate.getTemplateId(),count);    count-=newItem.getItemCount();    inventory.add(newItem,predicate.getAddType());  }  return count;}  }
class C{  public int indexOfKey(Object key){  return key == null ? indexOfNull() : indexOf(key,key.hashCode());}  }
class C{  public void initialize(LocalDispatcher dispatcher){  this.dispatcher=dispatcher;  this.delegator=dispatcher.getDelegator();  Debug.logInfo(this.getClass().getName() + " Authenticator initialized",module);}  }
class C{  private static byte[] sign(String stringData,final byte[] key) throws AWSIotException {  try {    byte[] data=stringData.getBytes(UTF8);    return sign(data,key);  } catch (  Exception e) {    throw new AWSIotException("Unable to calculate a request signature: " + e.getMessage());  }}  }
class C{  private ConstraintAlternatives(InvocationConstraint[] constraints,boolean allAbs){  this.constraints=constraints;  if (!allAbs) {    setRelative();  }}  }
class C{  public static Bitmap decodeSampledBitmapFromDescriptor(FileDescriptor fileDescriptor,int reqWidth,int reqHeight){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeFileDescriptor(fileDescriptor,null,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  options.inJustDecodeBounds=false;  addInBitmapOptions(options);  return BitmapFactory.decodeFileDescriptor(fileDescriptor,null,options);}  }
class C{  public void press(int key){  controller.keyPress(key);}  }
class C{  public V value(){  return _map._values[_index];}  }
class C{  public FieldConfigTimePeriod(FieldConfigCommonData commonData){  super(commonData);}  }
class C{  @SuppressWarnings("ResourceType") private void initFromAttributes(Context context,AttributeSet attrs){  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.CircleProgressBar);  mBackgroundColor=a.getColor(R.styleable.CircleProgressBar_background_color,Color.TRANSPARENT);  mDrawProgressText=a.getBoolean(R.styleable.CircleProgressBar_draw_progress_text,true);  mLineCount=a.getInt(R.styleable.CircleProgressBar_line_count,DEFAULT_LINE_COUNT);  mProgressTextFormatPattern=a.hasValue(R.styleable.CircleProgressBar_progress_text_format_pattern) ? a.getString(R.styleable.CircleProgressBar_progress_text_format_pattern) : DEFAULT_PATTERN;  mStyle=a.getInt(R.styleable.CircleProgressBar_style,LINE);  mShader=a.getInt(R.styleable.CircleProgressBar_progress_shader,LINEAR);  mCap=a.hasValue(R.styleable.CircleProgressBar_progress_stroke_cap) ? Paint.Cap.values()[a.getInt(R.styleable.CircleProgressBar_progress_stroke_cap,0)] : Paint.Cap.BUTT;  mLineWidth=a.getDimensionPixelSize(R.styleable.CircleProgressBar_line_width,UnitUtils.dip2px(getContext(),DEFAULT_LINE_WIDTH));  mProgressTextSize=a.getDimensionPixelSize(R.styleable.CircleProgressBar_progress_text_size,UnitUtils.dip2px(getContext(),DEFAULT_PROGRESS_TEXT_SIZE));  mProgressStrokeWidth=a.getDimensionPixelSize(R.styleable.CircleProgressBar_progress_stroke_width,UnitUtils.dip2px(getContext(),DEFAULT_PROGRESS_STROKE_WIDTH));  mProgressStartColor=a.getColor(R.styleable.CircleProgressBar_progress_start_color,Color.parseColor(COLOR_FFF2A670));  mProgressEndColor=a.getColor(R.styleable.CircleProgressBar_progress_end_color,Color.parseColor(COLOR_FFF2A670));  mProgressTextColor=a.getColor(R.styleable.CircleProgressBar_progress_text_color,Color.parseColor(COLOR_FFF2A670));  mProgressBackgroundColor=a.getColor(R.styleable.CircleProgressBar_progress_background_color,Color.parseColor(COLOR_FFD3D3D5));  a.recycle();}  }
class C{  private void writeAttributes(Attributes atts) throws SAXException {  int len=atts.getLength();  for (int i=0; i < len; i++) {    write(' ');    writeName(atts.getURI(i),atts.getLocalName(i),atts.getQName(i),false);    if (htmlMode && booleanAttribute(atts.getLocalName(i),atts.getQName(i),atts.getValue(i)))     break;    write("=\"");    String s=atts.getValue(i);    writeEscUTF16(s,0,s.length(),true);    write('"');  }}  }
class C{  public static void moveFile(File srcFile,File destFile){  boolean rename=srcFile.renameTo(destFile);  if (!rename) {    copyFile(srcFile.getAbsolutePath(),destFile.getAbsolutePath());    deleteFile(srcFile.getAbsolutePath());  }}  }
class C{  public ObjectRangeModel(Object[] objects){  setValueRange(objects);}  }
class C{  private void initData(Context context){  scroller=new WheelScroller(getContext(),scrollingListener);}  }
class C{  public int executeUpdate(String sql) throws SQLException {  init();  if (sql.trim().toUpperCase().startsWith("SELECT"))   throw new SQLException("Cannot call SELECT with executeUpdate. Use executeQuery instead","GSP",-143);  ResponsePacket response=connection.sendStatement(sql);  updateCount=response.getIntResult();  return updateCount;}  }
class C{  public void start() throws JMSException {synchronized (this) {    ensureOpen();    setModified();    try {      if (stopped) {        if (_logger.isLoggable(Level.FINE)) {          _logger.fine("GSConnectionImpl.start()  starting connection: " + toString());        }        for (int i=0; i < sessions.size(); i++) {          GSSessionImpl session=(GSSessionImpl)sessions.get(i);          session.start();        }        stopped=false;        if (_logger.isLoggable(Level.FINE)) {          _logger.fine("GSConnectionImpl.start()  connection was started: " + toString());        }      }    } catch (    JMSException exception) {      throw exception;    }  }}  }
class C{  @Override public void deleteNodes(NodeInterface nodeToTransfer,List<SLDDataInterface> sldDataList){}  }
class C{  public void updateLocalFeedData(final InputStream stream,final SyncResult syncResult) throws IOException, XmlPullParserException, RemoteException, OperationApplicationException, ParseException {  final FeedParser feedParser=new FeedParser();  final ContentResolver contentResolver=getContext().getContentResolver();  Log.i(TAG,"Parsing stream as Atom feed");  final List<FeedParser.Entry> entries=feedParser.parse(stream);  Log.i(TAG,"Parsing complete. Found " + entries.size() + " entries");  ArrayList<ContentProviderOperation> batch=new ArrayList<ContentProviderOperation>();  HashMap<String,FeedParser.Entry> entryMap=new HashMap<String,FeedParser.Entry>();  for (  FeedParser.Entry e : entries) {    entryMap.put(e.id,e);  }  Log.i(TAG,"Fetching local entries for merge");  Uri uri=FeedContract.Entry.CONTENT_URI;  Cursor c=contentResolver.query(uri,PROJECTION,null,null,null);  assert c != null;  Log.i(TAG,"Found " + c.getCount() + " local entries. Computing merge solution...");  int id;  String entryId;  String title;  String link;  long published;  while (c.moveToNext()) {    syncResult.stats.numEntries++;    id=c.getInt(COLUMN_ID);    entryId=c.getString(COLUMN_ENTRY_ID);    title=c.getString(COLUMN_TITLE);    link=c.getString(COLUMN_LINK);    published=c.getLong(COLUMN_PUBLISHED);    FeedParser.Entry match=entryMap.get(entryId);    if (match != null) {      entryMap.remove(entryId);      Uri existingUri=FeedContract.Entry.CONTENT_URI.buildUpon().appendPath(Integer.toString(id)).build();      if ((match.title != null && !match.title.equals(title)) || (match.link != null && !match.link.equals(link)) || (match.published != published)) {        Log.i(TAG,"Scheduling update: " + existingUri);        batch.add(ContentProviderOperation.newUpdate(existingUri).withValue(FeedContract.Entry.COLUMN_NAME_TITLE,match.title).withValue(FeedContract.Entry.COLUMN_NAME_LINK,match.link).withValue(FeedContract.Entry.COLUMN_NAME_PUBLISHED,match.published).build());        syncResult.stats.numUpdates++;      } else {        Log.i(TAG,"No action: " + existingUri);      }    } else {      Uri deleteUri=FeedContract.Entry.CONTENT_URI.buildUpon().appendPath(Integer.toString(id)).build();      Log.i(TAG,"Scheduling delete: " + deleteUri);      batch.add(ContentProviderOperation.newDelete(deleteUri).build());      syncResult.stats.numDeletes++;    }  }  c.close();  for (  FeedParser.Entry e : entryMap.values()) {    Log.i(TAG,"Scheduling insert: entry_id=" + e.id);    batch.add(ContentProviderOperation.newInsert(FeedContract.Entry.CONTENT_URI).withValue(FeedContract.Entry.COLUMN_NAME_ENTRY_ID,e.id).withValue(FeedContract.Entry.COLUMN_NAME_TITLE,e.title).withValue(FeedContract.Entry.COLUMN_NAME_LINK,e.link).withValue(FeedContract.Entry.COLUMN_NAME_PUBLISHED,e.published).build());    syncResult.stats.numInserts++;  }  Log.i(TAG,"Merge solution ready. Applying batch update");  mContentResolver.applyBatch(FeedContract.CONTENT_AUTHORITY,batch);  mContentResolver.notifyChange(FeedContract.Entry.CONTENT_URI,null,false);}  }
class C{  public boolean isSetTraceInfo(){  return this.traceInfo != null;}  }
class C{  public boolean implicit_entry(){  return soot.PhaseOptions.getBoolean(options,"implicit-entry");}  }
class C{  public static ProcessCacheObject createTestProcess1(){  ProcessCacheObject processCacheObject=new ProcessCacheObject(new Long(90),"Test Process",new Long(1200),100,100);  processCacheObject.setDescription("Test process description");  processCacheObject.setAliveInterval(60);  processCacheObject.setAliveTagId(new Long(510));  processCacheObject.setStateTagId(510L);  processCacheObject.setSupervisionStatus(SupervisionStatus.DOWN);  processCacheObject.setStatusTime(new Timestamp(System.currentTimeMillis()));  processCacheObject.setStartupTime(new Timestamp(0));  processCacheObject.setStatusDescription("Status description");  processCacheObject.setCurrentHost("test host");  processCacheObject.setRequiresReboot(false);  processCacheObject.setProcessPIK(12345L);  processCacheObject.setLocalConfig(LocalConfig.Y);  return processCacheObject;}  }
class C{  public Matrix refresh(Matrix newMatrix,View chart,boolean invalidate){  mMatrixTouch.set(newMatrix);  limitTransAndScale(mMatrixTouch,mContentRect);  if (invalidate) {    chart.invalidate();  }  newMatrix.set(mMatrixTouch);  return newMatrix;}  }
class C{  public AdsGetAdsTargetingQuery clientId(Integer value){  return unsafeParam("client_id",value);}  }
class C{  public int read(byte[] b,int off,int len) throws IOException {  if (firstRead) {    firstRead=false;    refillBuffer();    pos=skipSize;    if (ratio != 1) {      b[off++]=0;      b[off++]=0;      return readBytesFormBuffer(b,off,len - 2) + 2;    } else {      return readBytesFormBuffer(b,off,len);    }  } else {    return readBytesFormBuffer(b,off,len);  }}  }
class C{  public final void cancelAll(){  for (  ActionPair actionPair : mActions) {    if (actionPair.action instanceof Cancelable) {      ((Cancelable)actionPair.action).cancel();    }  }}  }
class C{  @Override public int read(byte[] b,int off,int len) throws IOException {  if (max >= 0 && pos >= max) {    return -1;  }  long maxRead=max >= 0 ? Math.min(len,max - pos) : len;  int bytesRead=in.read(b,off,(int)maxRead);  if (bytesRead == -1) {    return -1;  }  pos+=bytesRead;  return bytesRead;}  }
class C{  public FieldVector3D<T> add(final Vector3D v){  return new FieldVector3D<T>(x.add(v.getX()),y.add(v.getY()),z.add(v.getZ()));}  }
class C{  @SuppressWarnings("hiding") private static <K,ComplexValue extends Comparable<? super ComplexValue>>LinkedHashMap<K,ComplexValue> sortByValue(Map<K,ComplexValue> map){  List<Map.Entry<K,ComplexValue>> list=new LinkedList<>(map.entrySet());  Collections.sort(list,null);  LinkedHashMap<K,ComplexValue> result=new LinkedHashMap<>();  int counter=0;  for (  Map.Entry<K,ComplexValue> entry : list) {    if (counter < ITEMS_COUNT_VALUE) {      result.put(entry.getKey(),entry.getValue());      counter++;    } else     break;  }  return result;}  }
class C{  @Override protected boolean access(long time){  boolean access=super.access(time);  _data.setLastAccessed(_data.getAccessed());  _data.setAccessed(time);  _data.setExpiryTime(getMaxInactiveInterval() < 0 ? Long.MAX_VALUE : (time + TimeUnit.SECONDS.toMillis(getMaxInactiveInterval())));  return access;}  }
class C{  public XorExpr newXorExpr(Value op1,Value op2){  return new GXorExpr(op1,op2);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public void destroyView() throws CanceledException {  MeganProperties.removePropertiesListListener(getJMenuBar().getRecentFilesListener());  super.destroyView();}  }
class C{  public SpaceEntryPropertyGetter(String name){  this._propertyName=name;  this._propertyIndex=-1;}  }
class C{  protected List<ZWaveEvent> processCommandClassMessage(byte[] packetData,int version){  SerialMessage msg=new SerialMessage(packetData);  assertEquals(true,msg.isValid);  assertEquals(SerialMessageType.Request,msg.getMessageType());  assertEquals(SerialMessageClass.ApplicationCommandHandler,msg.getMessageClass());  ZWaveController controller=Mockito.mock(ZWaveController.class);  argument=ArgumentCaptor.forClass(ZWaveEvent.class);  Mockito.doNothing().when(controller).notifyEventListeners(argument.capture());  ZWaveNode node=Mockito.mock(ZWaveNode.class);  ZWaveEndpoint endpoint=Mockito.mock(ZWaveEndpoint.class);  try {    ZWaveCommandClass cls=ZWaveCommandClass.getInstance(msg.getMessagePayloadByte(3),node,controller);    cls.setEndpoint(endpoint);    assertNotNull(cls);    cls.setVersion(version);    cls.handleApplicationCommandRequest(msg,4,0);  } catch (  ZWaveSerialMessageException e) {    fail("Out of bounds exception processing data");  }  assertNotNull(argument.getAllValues());  assertNotEquals(argument.getAllValues().size(),0);  return argument.getAllValues();}  }
class C{  public static SparseMatrix loadSparseMatrix(String filename) throws IOException, IllegalFormatException {  return loadSparseMatrix(new File(filename));}  }
class C{  public static <T>T read(String path,TypeReference typeReference){  ObjectMapper mapper=new ObjectMapper(new YAMLFactory());  try {    URI uri=Resources.getResource(path + YAML).toURI();    File file=Paths.get(uri).toFile();    return mapper.readValue(file,typeReference);  } catch (  IOException|URISyntaxException e) {    LOG.error("Could not read YAML file: {}",path);    throw new IllegalStateException("YAML file could not be read");  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_BUY_ITEM(String value0){  return new SM_SYSTEM_MESSAGE(1300784,value0);}  }
class C{  public DistributedLogClientBuilder clientBuilder(ClientBuilder builder){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._clientBuilder=builder;  return newBuilder;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GUILD_CHANGE_LEVEL_DONE(String value0){  return new SM_SYSTEM_MESSAGE(1300320,value0);}  }
class C{  public static DimensionColumn addNewDimensionColumn(PhysicalTable physicalTable,Dimension d){  return addNewDimensionColumn(physicalTable,d,physicalTable);}  }
class C{  public void removeHeaderView(@NonNull View view){  mNavigationView.removeHeaderView(view);}  }
class C{  public static final void onPlayerLogin(Player player){  for (  PlayerGroup group : groups.values()) {    PlayerGroupMember member=group.getMember(player.getObjectId());    if (member != null) {      group.onEvent(new PlayerConnectedEvent(group,player));    }  }}  }
class C{  public SumReducer ignoreExceptions(){  this.ignoreExceptions=true;  return this;}  }
class C{  @Override public boolean isEnabled(){  if ((attributeSelectionPanel != null) && !isValueOnly()) {    return attributeSelectionPanel.isEnabled();  } else {    if (textField != null) {      return textField.isEnabled();    }  }  return false;}  }
class C{  public CompositeComparator(Comparator[] cmp){  this(cmp,false);}  }
class C{  public static boolean isDiscover(String cc){  String first4digs=cc.substring(0,4);  if ((cc.length() == 16) && (first4digs.equals("6011")))   return isCreditCard(cc);  return false;}  }
class C{  protected MockZooKeeper createMockZooKeeper() throws Exception {  MockZooKeeper zk=MockZooKeeper.newInstance(MoreExecutors.sameThreadExecutor());  ZkUtils.createFullPathOptimistic(zk,LOADBALANCE_BROKERS_ROOT,"".getBytes(ZookeeperClientFactoryImpl.ENCODING_SCHEME),ZooDefs.Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);  return zk;}  }
class C{  public PhotosCreateCommentQuery message(String value){  return unsafeParam("message",value);}  }
class C{  private int calcNumberOfLines() throws DataFallbackException {  int lines=0;  openFallbackInputStream();  try {    while (getInput().readLine() != null) {      lines++;    }  } catch (  IOException e) {    throw new DataFallbackException();  } finally {    closeFallbackInputStream();  }  return lines;}  }
class C{  public Predicate pred(){  return pred;}  }
class C{  private void fill() throws IOException {  if (eof)   return;  if (count > 0) {    if (count - pos == 2) {      System.arraycopy(buf,pos,buf,0,count - pos);      count-=pos;      pos=0;    } else {      throw new IllegalStateException("fill() detected illegal buffer state");    }  }  int read=0;  int boundaryLength=boundary.length();  int maxRead=buf.length - boundaryLength - 2;  while (count < maxRead) {    read=((ServletInputStream)in).readLine(buf,count,buf.length - count);    if (read == -1) {      throw new IOException("unexpected end of part");    } else {      if (read >= boundaryLength) {        eof=true;        for (int i=0; i < boundaryLength; i++) {          if (boundary.charAt(i) != buf[count + i]) {            eof=false;            break;          }        }        if (eof) {          break;        }      }    }    count+=read;  }}  }
class C{  public static boolean cover(String dest,int type,int w,int h,List<String> sources) throws Exception {  if (sources == null) {    throw new Exception("no source!");  }switch (type) {case 1:    return _cover1(dest,w,h,sources);case 2:  return _cover2(dest,w,h,sources);case 3:return _cover3(dest,w,h,sources);case 4:return _cover4(dest,w,h,sources);case 5:return _cover5(dest,w,h,sources);default :throw new Exception("the TYPE Must be 1-5");}}  }
class C{  public static void printf(String format,Object... args){  out.printf(LOCALE,format,args);  out.flush();}  }
class C{  public SecantSolver(final double absoluteAccuracy){  super(absoluteAccuracy);}  }
class C{  public DTDConfiguration(SymbolTable symbolTable,XMLGrammarPool grammarPool){  this(symbolTable,grammarPool,null);}  }
class C{  @Override public TableGrainView formatTableGrain(LogicalTable logicalTable,String grain,UriInfo uriInfo){  TableGrainView resultRow=new TableGrainView();  resultRow.put("name",grain);  resultRow.put("longName",StringUtils.capitalize(grain));  resultRow.put("description","The " + logicalTable.getName() + " "+ grain+ " grain");  resultRow.put("retention",logicalTable.getRetention().toString());  resultRow.put("dimensions",DimensionsServlet.getDimensionListSummaryView(logicalTable.getDimensions(),uriInfo));  resultRow.put("metrics",MetricsServlet.getLogicalMetricListSummaryView(logicalTable.getLogicalMetrics(),uriInfo));  return resultRow;}  }
class C{  @Override public int available(){  int available=0;  for (int i=0; i < sources.length; i++) {    int a=sources[i].available();    if (a > available)     available=a;  }  return available;}  }
class C{  public static boolean gr(double a,double b){  return (a - b > SMALL);}  }
class C{  public static boolean isFileNewer(File file,File reference){  if (reference == null) {    throw new IllegalArgumentException("No specified reference file");  }  if (!reference.exists()) {    throw new IllegalArgumentException("The reference file '" + reference + "' doesn't exist");  }  return isFileNewer(file,reference.lastModified());}  }
class C{  public SharedDataIteratorSource(Object identifier,ISourceDataIteratorProvider<T> sourceDataIteratorProvider,long timeToLive){  if (sourceDataIteratorProvider == null)   throw new IllegalArgumentException("sourceDataIteratorProvider cannot be null");  _identifier=identifier;  _sourceDataIteratorProvider=sourceDataIteratorProvider;  _timeToLive=timeToLive;  _createdTime=SystemTime.timeMillis();}  }
class C{  protected void clearDictionary(List<Dictionary> dictionaryList){  for (  Dictionary dictionary : dictionaryList) {    dictionary.clear();  }}  }
class C{  @Override protected XMLDTDValidator createDTDValidator(){  return new XMLNSDTDValidator();}  }
class C{  public static boolean hasEncoding(List<Encoding> encodings,Encoding encoding){  return encodings.contains(encoding);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_LIST_USER(String value0){  return new SM_SYSTEM_MESSAGE(1300641,value0);}  }
class C{  protected String tryDefaultAnnotationEnvVar(String envVarName) throws AbortException {  ProjectConfig projectConfig=getProjectConfig();  if (projectConfig != null) {    GitConfig gitConfig=getGitConfig();    String repoName=projectConfig.getBuildName();    String userEnvVar="JENKINS_GOGS_USER";    String username=env.get(userEnvVar);    if (io.fabric8.utils.Objects.equal("BUILD_URL",envVarName)) {      String jobUrl=projectConfig.getLink("Job");      if (Strings.isNullOrBlank(jobUrl)) {        String name=projectConfig.getBuildName();        if (Strings.isNullOrBlank(name)) {          if (Strings.isNotBlank(repoName)) {            name=repoName;            if (Strings.isNotBlank(username)) {              name=ProjectRepositories.createBuildName(username,repoName);            } else {              listener.getLogger().println("Cannot auto-default BUILD_URL as there is no environment variable `" + userEnvVar + "` defined so we can't guess the Jenkins build URL");            }          }        }        if (Strings.isNotBlank(name)) {          String jenkinsUrl=KubernetesHelper.getServiceURLInCurrentNamespace(getKubernetes(),ServiceNames.JENKINS,"http",null,true);          jobUrl=URLUtils.pathJoin(jenkinsUrl,"/job",name);        }      }      if (Strings.isNotBlank(jobUrl)) {        String buildId=env.get("BUILD_ID");        if (Strings.isNotBlank(buildId)) {          jobUrl=URLUtils.pathJoin(jobUrl,buildId);        } else {          listener.getLogger().println("Cannot find BUILD_ID to create a specific jenkins build URL. So using: " + jobUrl);        }      }      return jobUrl;    } else     if (io.fabric8.utils.Objects.equal("GIT_URL",envVarName)) {      String gitUrl=projectConfig.getLinks().get("Git");      if (Strings.isNullOrBlank(gitUrl)) {        listener.getLogger().println("No Job link found in fabric8.yml so we cannot set the GIT_URL");      } else {        if (gitUrl.endsWith(".git")) {          gitUrl=gitUrl.substring(0,gitUrl.length() - 4);        }        String gitCommitId=gitConfig.getCommit();        if (Strings.isNotBlank(gitCommitId)) {          gitUrl=URLUtils.pathJoin(gitUrl,"commit",gitCommitId);        }        return gitUrl;      }    } else     if (io.fabric8.utils.Objects.equal("GIT_COMMIT",envVarName)) {      String gitCommit=gitConfig.getCommit();      if (Strings.isNullOrBlank(gitCommit)) {        listener.getLogger().println("No git commit found in git.yml so we cannot set the GIT_COMMIT");      }      return gitCommit;    } else     if (io.fabric8.utils.Objects.equal("GIT_BRANCH",envVarName)) {      String gitBranch=gitConfig.getBranch();      if (Strings.isNullOrBlank(gitBranch)) {        listener.getLogger().println("No git branch found in git.yml so we cannot set the GIT_BRANCH");      }      return gitBranch;    }  } else {    listener.getLogger().println("No fabric8.yml so unable to add environment pod annotations");  }  return null;}  }
class C{  public Iterator children(Node n){  return super.outNeighbors(n);}  }
class C{  public static String toString(URI uri,String encoding) throws IOException {  return toString(uri,Charsets.toCharset(encoding));}  }
class C{  public static void regenerateClientID(long seed){  clientID=new Random(seed).nextLong();}  }
class C{  @Override protected FieldConfigBase createCopy(FieldConfigBase fieldConfigBase){  FieldConfigGeometry copy=null;  if (fieldConfigBase != null) {    copy=new FieldConfigGeometry(fieldConfigBase.getCommonData(),this.buttonText);  }  return copy;}  }
class C{  public PhotosDeleteQuery delete(UserActor actor,int photoId){  return new PhotosDeleteQuery(getClient(),actor,photoId);}  }
class C{  private JSONWriter end(char mode,char c) throws JSONException {  if (this.mode != mode) {    throw new JSONException(mode == 'a' ? "Misplaced endArray." : "Misplaced endObject.");  }  this.pop(mode);  try {    this.writer.write(c);  } catch (  IOException e) {    throw new JSONException(e);  }  this.comma=true;  return this;}  }
class C{  @Override public boolean upload(File file,DateTime todayStart){  logger.info("Snapshot backup: sending " + file.length() + " bytes to S3");  String keyName=config.getBackupLocation() + "/" + iid.getInstance().getDatacenter()+ "/"+ iid.getInstance().getRack()+ "/"+ iid.getInstance().getToken()+ "/"+ todayStart.getMillis();  logger.info("Key in Bucket: " + keyName);  logger.info("S3 Bucket Name:" + config.getBucketName());  AmazonS3Client s3Client=new AmazonS3Client(cred.getAwsCredentialProvider());  try {    if (!(s3Client.doesBucketExist(config.getBucketName()))) {      logger.error("Bucket with name: " + config.getBucketName() + " does not exist");      return false;    } else {      logger.info("Uploading data to S3\n");      List<PartETag> partETags=new ArrayList<PartETag>();      InitiateMultipartUploadRequest initRequest=new InitiateMultipartUploadRequest(config.getBucketName(),keyName);      InitiateMultipartUploadResult initResponse=s3Client.initiateMultipartUpload(initRequest);      long contentLength=file.length();      long filePosition=0;      long partSize=this.initPartSize;      try {        for (int i=1; filePosition < contentLength; i++) {          partSize=Math.min(partSize,(contentLength - filePosition));          UploadPartRequest uploadRequest=new UploadPartRequest().withBucketName(config.getBucketName()).withKey(keyName).withUploadId(initResponse.getUploadId()).withPartNumber(i).withFileOffset(filePosition).withFile(file).withPartSize(partSize);          partETags.add(s3Client.uploadPart(uploadRequest).getPartETag());          filePosition+=partSize;        }        CompleteMultipartUploadRequest compRequest=new CompleteMultipartUploadRequest(config.getBucketName(),keyName,initResponse.getUploadId(),partETags);        s3Client.completeMultipartUpload(compRequest);      } catch (      Exception e) {        logger.error("Abosting multipart upload due to error");        s3Client.abortMultipartUpload(new AbortMultipartUploadRequest(config.getBucketName(),keyName,initResponse.getUploadId()));      }      return true;    }  } catch (  AmazonServiceException ase) {    logger.error("AmazonServiceException;" + " request made it to Amazon S3, but was rejected with an error ");    logger.error("Error Message:    " + ase.getMessage());    logger.error("HTTP Status Code: " + ase.getStatusCode());    logger.error("AWS Error Code:   " + ase.getErrorCode());    logger.error("Error Type:       " + ase.getErrorType());    logger.error("Request ID:       " + ase.getRequestId());    return false;  }catch (  AmazonClientException ace) {    logger.error("AmazonClientException;" + " the client encountered " + "an internal error while trying to "+ "communicate with S3, ");    logger.error("Error Message: " + ace.getMessage());    return false;  }}  }
class C{  public SpaceTypeDescriptorBuilder addPathIndex(String path,SpaceIndexType indexType,boolean unique){  return addIndex(SpaceIndexFactory.createPathIndex(path,indexType,unique));}  }
class C{  public void addImportDecl(ImportDecl node){  List<ImportDecl> list=(parent == null || state == null) ? getImportDeclListNoTransform() : getImportDeclList();  list.addChild(node);}  }
class C{  public void restartAndInstallIfNecessary(){  File patchesDir=new File(mySdkHandler.getLocation(),PatchInstallerUtil.PATCHES_DIR_NAME);  StudioLoggerProgressIndicator progress=new StudioLoggerProgressIndicator(PatchInstallerFactory.class);  if (patchesDir.exists()) {    File[] subDirs=patchesDir.listFiles(null);    for (    File patchDir : subDirs) {      processPatch(mySdkHandler.getLocation(),progress,patchDir);    }  }}  }
class C{  private static boolean isUppercaseLetter(char ch){  return ('A' <= ch && ch <= 'Z');}  }
class C{  public BracketingNthOrderBrentSolver(final double absoluteAccuracy,final int maximalOrder) throws MathIllegalArgumentException {  super(absoluteAccuracy);  if (maximalOrder < 2) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_SMALL,maximalOrder,2);  }  this.maximalOrder=maximalOrder;  this.allowed=AllowedSolution.ANY_SIDE;}  }
class C{  public static String relativeTimeString(int days){  GregorianCalendar gregCal=new GregorianCalendar();  gregCal.add(Calendar.DAY_OF_YEAR,days);  return TestUtils.getTimeString(gregCal);}  }
class C{  public Matrix minus(Matrix B){  checkMatrixDimensions(B);  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=A[i][j] - B.A[i][j];    }  }  return X;}  }
class C{  public static final float toJulian(Calendar c){  int Y=c.get(Calendar.YEAR);  int M=c.get(Calendar.MONTH);  int D=c.get(Calendar.DATE);  int A=Y / 100;  int B=A / 4;  int C=2 - A + B;  float E=(int)(365.25f * (Y + 4716));  float F=(int)(30.6001f * (M + 1));  float JD=C + D + E+ F - 1524.5f;  return JD;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_REMOVE_ITEM_OPTION_NO_OPTION_TO_REMOVE(String value0){  return new SM_SYSTEM_MESSAGE(1300470,value0);}  }
class C{  public String toString(){  final StringBuilder buf=new StringBuilder("{");  for (int i=0, end=_pos - 1; i < end; i++) {    buf.append(_data[i]);    buf.append(", ");  }  if (size() > 0) {    buf.append(_data[_pos - 1]);  }  buf.append("}");  return buf.toString();}  }
class C{  private Properties removeRedundantProperties(Properties props){  if (props == null) {    return null;  }  Properties clonedProps=(Properties)props.clone();  clonedProps.remove(XPathProperties.CONTAINER_JNDI_URL);  return clonedProps;}  }
class C{  private void check(){  boolean star=types == null;  int len=name.length();  if (len == 0) {    throw new IllegalArgumentException("method name cannot be empty");  }  char c=name.charAt(0);  if (!Character.isJavaIdentifierStart(c) && !(star && c == '*' && len > 1)) {    throw new IllegalArgumentException("invalid method name");  }  if (star && c != '*' && name.charAt(len - 1) == '*') {    len--;  }  while (--len >= 1) {    if (!Character.isJavaIdentifierPart(name.charAt(len))) {      throw new IllegalArgumentException("invalid method name");    }  }  if (types != null) {    for (int i=types.length; --i >= 0; ) {      if (types[i] == null) {        throw new NullPointerException("class cannot be null");      }    }  }}  }
class C{  public GetFormKeyCmd(String processDefinitionId){  setProcessDefinitionId(processDefinitionId);}  }
class C{  synchronized final void releaseDTDLoader(String xmlVersion,XMLDTDLoader loader){  if ("1.1".equals(xmlVersion)) {    ++freeXML11DTDLoaderIndex;    if (xml11DTDLoaders.length == freeXML11DTDLoaderIndex) {      xml11DTDLoaderCurrentSize+=SIZE;      SoftReference[] newarray=new SoftReference[xml11DTDLoaderCurrentSize];      System.arraycopy(xml11DTDLoaders,0,newarray,0,xml11DTDLoaders.length);      xml11DTDLoaders=newarray;    }    SoftReference ref=xml11DTDLoaders[freeXML11DTDLoaderIndex];    if (ref != null) {      XMLDTDLoaderHolder holder=(XMLDTDLoaderHolder)ref.get();      if (holder != null) {        holder.loader=loader;        return;      }    }    xml11DTDLoaders[freeXML11DTDLoaderIndex]=new SoftReference(new XMLDTDLoaderHolder(loader));  } else {    ++freeXML10DTDLoaderIndex;    if (xml10DTDLoaders.length == freeXML10DTDLoaderIndex) {      xml10DTDLoaderCurrentSize+=SIZE;      SoftReference[] newarray=new SoftReference[xml10DTDLoaderCurrentSize];      System.arraycopy(xml10DTDLoaders,0,newarray,0,xml10DTDLoaders.length);      xml10DTDLoaders=newarray;    }    SoftReference ref=xml10DTDLoaders[freeXML10DTDLoaderIndex];    if (ref != null) {      XMLDTDLoaderHolder holder=(XMLDTDLoaderHolder)ref.get();      if (holder != null) {        holder.loader=loader;        return;      }    }    xml10DTDLoaders[freeXML10DTDLoaderIndex]=new SoftReference(new XMLDTDLoaderHolder(loader));  }}  }
class C{  public void combination(int... keys){  press(keys);  for (int i=keys.length - 1; i >= 0; i--) {    release(keys[i]);  }}  }
class C{  public ObjectPoolWithThreadAffinity(PoolableObjectFactory factory,int maxActive,long maxWait,int maxIdle,int minIdle,boolean testOnBorrow,boolean testOnReturn,long timeBetweenEvictionRunsMillis,long minEvictableIdleTimeMillis,long softMinEvictableIdleTimeMillis){  this.factory=factory;  this.maxActive=maxActive;  this.whenExhaustedAction=WHEN_EXHAUSTED_BLOCK;  this.maxWait=maxWait;  this.maxIdle=maxIdle;  this.minIdle=minIdle;  this.testOnBorrow=testOnBorrow;  this.timeBetweenEvictionRunsMillis=timeBetweenEvictionRunsMillis;  this.minEvictableIdleTimeMillis=minEvictableIdleTimeMillis;  this.softMinEvictableIdleTimeMillis=softMinEvictableIdleTimeMillis;  pool=new LruListWithThreadAffinity();  startEvictor(this.timeBetweenEvictionRunsMillis);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);}  }
class C{  private void updateStyleImp(Map<String,Object> style){  if (style != null) {    if (style.containsKey(WXDomPropConstant.WX_LINES)) {      int lines=WXStyle.getLines(style);      if (lines > 0) {        mNumberOfLines=lines;      }    }    if (style.containsKey(WXDomPropConstant.WX_FONTSIZE)) {      mFontSize=WXStyle.getFontSize(style);    }    if (style.containsKey(WXDomPropConstant.WX_FONTWEIGHT)) {      mFontWeight=WXStyle.getFontWeight(style);    }    if (style.containsKey(WXDomPropConstant.WX_FONTSTYLE)) {      mFontStyle=WXStyle.getFontStyle(style);    }    if (style.containsKey(WXDomPropConstant.WX_COLOR)) {      mColor=WXResourceUtils.getColor(WXStyle.getTextColor(style));      mIsColorSet=mColor != Integer.MIN_VALUE;    }    if (style.containsKey(WXDomPropConstant.WX_TEXTDECORATION)) {      mTextDecoration=WXStyle.getTextDecoration(style);    }    if (style.containsKey(WXDomPropConstant.WX_FONTFAMILY)) {      mFontFamily=WXStyle.getFontFamily(style);    }    mAlignment=WXStyle.getTextAlignment(style);    textOverflow=WXStyle.getTextOverflow(style);    int lineHeight=WXStyle.getLineHeight(style);    if (lineHeight != UNSET) {      mLineHeight=lineHeight;    }  }}  }
class C{  static int findBestSampleSize(int actualWidth,int actualHeight,int desiredWidth,int desiredHeight){  double wr=(double)actualWidth / desiredWidth;  double hr=(double)actualHeight / desiredHeight;  double ratio=Math.min(wr,hr);  float n=1.0f;  while ((n * 2) <= ratio) {    n*=2;  }  return (int)n;}  }
class C{  public static List<Object> distinct(String table,String name,String where,Object[] args){  TimeStamp t=TimeStamp.create();  StringBuilder sql=new StringBuilder();  sql.append("select distinct(").append(name).append(") from ").append(table);  if (where != null) {    sql.append(" where ").append(where);  }  Connection c=null;  PreparedStatement p=null;  ResultSet r=null;  try {    c=getConnection();    if (c == null)     return null;    p=c.prepareStatement(sql.toString());    int order=1;    if (args != null) {      for (int i=0; i < args.length; i++) {        Object o=args[i];        setParameter(p,order++,o);      }    }    r=p.executeQuery();    List<Object> list=new ArrayList<Object>();    while (r.next()) {      list.add(r.getObject(1));    }    if (log.isDebugEnabled())     log.debug("load - cost=" + t.past() + "ms, collection="+ table+ ", sql="+ sql+ ", result="+ list);    if (t.past() > 10000) {      log.warn("load - cost=" + t.past() + "ms, collection="+ table+ ", sql="+ sql+ ", result="+ list);    }    return list;  } catch (  Exception e) {    if (log.isErrorEnabled())     log.error(sql.toString() + toString(args),e);  } finally {    close(r,p,c);  }  return null;}  }
class C{  public static <T extends RealFieldElement<T>>T distanceSq(final FieldVector3D<T> v1,final FieldVector3D<T> v2){  return v1.distanceSq(v2);}  }
class C{  @Override public String toString(){  return MoreObjects.toStringHelper(this).add("id",getId()).add("civility",getCivility()).add("firstName",getFirstName()).add("lastName",getLastName()).add("email",getEmail()).add("birthDate",getBirthDate()).add("birthDateTime",getBirthDateTime()).toString();}  }
class C{  public DelayabilityAnalysis(DirectedGraph<Unit> dg,EarliestnessComputation earliest,Map<Unit,EquivalentValue> equivRhsMap,BoundedFlowSet<EquivalentValue> set){  super(dg);  UnitGraph g=(UnitGraph)dg;  this.set=set;  unitToKillValue=equivRhsMap;  this.earliest=earliest;  doAnalysis();{    for (    Unit currentUnit : g) {      FlowSet<EquivalentValue> beforeSet=getFlowBefore(currentUnit);      beforeSet.union(earliest.getFlowBefore(currentUnit));    }  }}  }
class C{  private void checkForDuplicateImage(int type){  int diff=1;  Uri contentStore=whichContentStore();  Cursor cursor=queryImgDB(contentStore);  int currentNumOfImages=cursor.getCount();  if (type == FILE_URI && this.saveToPhotoAlbum) {    diff=2;  }  if ((currentNumOfImages - numPics) == diff) {    cursor.moveToLast();    int id=Integer.valueOf(cursor.getString(cursor.getColumnIndex(MediaStore.Images.Media._ID)));    if (diff == 2) {      id--;    }    Uri uri=Uri.parse(contentStore + "/" + id);    this.cordova.getActivity().getContentResolver().delete(uri,null,null);    cursor.close();  }}  }
class C{  public static Properties readProperties(Class clazz){  return readProperties(clazz.getName());}  }
class C{  public DiscoveryConstraintTrustVerifier(){}  }
class C{  public boolean isSelected(){  return currentScope.getAttribute(HtmlTags.Attributes.CLASS).contains("x-grid3-row-selected");}  }
class C{  public UsersGetQuery(VkApiClient client,UserActor actor){  super(client,"users.get",Utils.buildParametrizedType(List.class,UserXtrCounters.class));  accessToken(actor.getAccessToken());}  }
class C{  protected RealMatrix computeCovarianceMatrix(double[][] data,boolean biasCorrected) throws MathIllegalArgumentException {  return computeCovarianceMatrix(new BlockRealMatrix(data),biasCorrected);}  }
class C{  public void load() throws IOException {  BulkTimer.LOAD.start("Lexicon");  compiledURL=Utilities.getResourceURL("cmulex_compiled.bin");  addendaURL=Utilities.getResourceURL("cmulex_addenda.bin");  if (compiledURL == null) {    throw new IOException("Can't load lexicon");  }  if (addendaURL == null) {    throw new IOException("Can't load lexicon addenda ");  }  if (loadedCompiledLexicons == null) {    loadedCompiledLexicons=new HashMap();  }  if (!loadedCompiledLexicons.containsKey(compiledURL)) {    InputStream compiledIS=Utilities.getInputStream(compiledURL);    if (compiledIS == null) {      throw new IOException("Can't load lexicon from " + compiledURL);    }    Map newCompiled=createLexicon(compiledIS,binary,65000);    loadedCompiledLexicons.put(compiledURL,newCompiled);    compiledIS.close();  }  assert loadedCompiledLexicons.containsKey(compiledURL);  compiled=Collections.unmodifiableMap((Map)loadedCompiledLexicons.get(compiledURL));  InputStream addendaIS=Utilities.getInputStream(addendaURL);  if (addendaIS == null) {    throw new IOException("Can't load lexicon addenda from " + addendaURL);  }  addenda=createLexicon(addendaIS,binary,50);  addendaIS.close();  String userAddenda=Utilities.getProperty("com.sun.speech.freetts.lexicon.userAddenda",null);  if (userAddenda != null) {    try {      URL userAddendaURL=new URL(userAddenda);      InputStream userAddendaIS=Utilities.getInputStream(userAddendaURL);      if (userAddendaIS == null) {        throw new IOException("Can't load user addenda from " + userAddenda);      }      Map tmpAddenda=createLexicon(userAddendaIS,false,50);      userAddendaIS.close();      for (Iterator keys=tmpAddenda.keySet().iterator(); keys.hasNext(); ) {        Object key=keys.next();        addenda.put(key,tmpAddenda.get(key));      }    } catch (    MalformedURLException e) {      throw new IOException("User addenda URL is malformed: " + userAddenda);    }  }  loaded=true;  BulkTimer.LOAD.stop("Lexicon");  letterToSound=new LetterToSoundImpl(letterToSoundURL,binary);}  }
class C{  public static int subAndCheck(int x,int y) throws MathRuntimeException {  long s=(long)x - (long)y;  if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {    throw new MathRuntimeException(LocalizedCoreFormats.OVERFLOW_IN_SUBTRACTION,x,y);  }  return (int)s;}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  executeImmediately(getSyntax());}  }
class C{  private int calculateDepth(TemplateDruidQuery candidate){  int theDepth=1;  TemplateDruidQuery iterator=candidate.nestedQuery;  while (iterator != null) {    theDepth++;    iterator=iterator.getInnerQuery();  }  return theDepth;}  }
class C{  public FieldLUDecomposition(FieldMatrix<T> matrix){  if (!matrix.isSquare()) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NON_SQUARE_MATRIX,matrix.getRowDimension(),matrix.getColumnDimension());  }  final int m=matrix.getColumnDimension();  field=matrix.getField();  lu=matrix.getData();  pivot=new int[m];  cachedL=null;  cachedU=null;  cachedP=null;  for (int row=0; row < m; row++) {    pivot[row]=row;  }  even=true;  singular=false;  for (int col=0; col < m; col++) {    T sum=field.getZero();    for (int row=0; row < col; row++) {      final T[] luRow=lu[row];      sum=luRow[col];      for (int i=0; i < row; i++) {        sum=sum.subtract(luRow[i].multiply(lu[i][col]));      }      luRow[col]=sum;    }    int nonZero=col;    for (int row=col; row < m; row++) {      final T[] luRow=lu[row];      sum=luRow[col];      for (int i=0; i < col; i++) {        sum=sum.subtract(luRow[i].multiply(lu[i][col]));      }      luRow[col]=sum;      if (lu[nonZero][col].equals(field.getZero())) {        ++nonZero;      }    }    if (nonZero >= m) {      singular=true;      return;    }    if (nonZero != col) {      T tmp=field.getZero();      for (int i=0; i < m; i++) {        tmp=lu[nonZero][i];        lu[nonZero][i]=lu[col][i];        lu[col][i]=tmp;      }      int temp=pivot[nonZero];      pivot[nonZero]=pivot[col];      pivot[col]=temp;      even=!even;    }    final T luDiag=lu[col][col];    for (int row=col + 1; row < m; row++) {      final T[] luRow=lu[row];      luRow[col]=luRow[col].divide(luDiag);    }  }}  }
class C{  public boolean isQuery(){  return SqlViewType.QUERY.equals(type);}  }
class C{  public Configuration subConfig(String prefix,String keyPrefix){  Configuration sub=new Configuration();  addToSubConf(sub,prefix.length() > 0 ? prefix + "." + keyPrefix : keyPrefix);  return sub;}  }
class C{  public static boolean checkRootPermission(){  return execCommand("echo root",true,false).result == 0;}  }
class C{  private List<Elem> parseOptionalArgs(TokenStream tokens){  ImmutableList.Builder<Elem> args=ImmutableList.builder();  if (tokens.has("(")) {    tokens.next();    if (!tokens.has(")")) {      for (; ; ) {        Elem arg=parseExpr(tokens);        if (arg != null) {          args.add(arg);        }        if (tokens.has(",")) {          tokens.next();        } else {          break;        }      }    }    tokens.expect(")");  }  return args.build();}  }
class C{  public static User createUser(){  return createUser(Constants.DEFAULT_PREFIX_USER + internalId++);}  }
class C{  public void clearLastReceivedHeaders(){  this.lastReceivedHeaders=null;}  }
class C{  public UnusableEntryException(Throwable e){  initCause(e);  if (e == null)   throw new NullPointerException("e must be non-null");  partialEntry=null;  unusableFields=null;  nestedExceptions=new Throwable[]{e};}  }
class C{  public SQLQuery(Class<T> type,String sqlExpression,QueryResultType queryResultType,Object... parameters){  this(sqlExpression,type.getName(),null,queryResultType,parameters);}  }
class C{  @Override public boolean onLayoutChild(CoordinatorLayout parent,V child,int layoutDirection){  child.layout(0,parent.getMeasuredHeight(),child.getMeasuredWidth(),parent.getMeasuredHeight() + child.getMeasuredHeight());  return true;}  }
class C{  public void readFrom(InputStream is,String endMarker) throws ParserConfigurationException, SAXException, IOException, TransformerException {  if (type.isUtterances())   throw new IOException("Cannot read into utterance-based data type!");  if (type.isXMLType() || type.isTextType())   readFrom(new InputStreamReader(is,"UTF-8"),endMarker); else {    setAudio((AudioInputStream)is);  }}  }
class C{  public boolean waitForAcquireQuietly(){  boolean success=false;  try {    success=Await.result(acquireFuture);  } catch (  InterruptedException ie) {    Thread.currentThread().interrupt();  }catch (  LockTimeoutException lte) {    logger.debug("Timeout on lock acquiring",lte);  }catch (  Exception e) {    logger.error("Caught exception waiting for lock acquired",e);  }  return success;}  }
class C{  private static int resolveGravity(int gravity){  return gravity == Gravity.NO_GRAVITY ? GravityCompat.START | Gravity.TOP : gravity;}  }
class C{  @Override public boolean isAutoStartup(){  return false;}  }
class C{  public SimpleTextHistoDocument(){  Graph=new DocumentWordGraph();  Histogram=new DocumentWordHistogram();}  }
class C{  @Override public boolean isDeprecated(){  return proto.getOptions().getDeprecated();}  }
class C{  public V putIfAbsent(short key,V value){  int index=insertionIndex(key);  if (index < 0)   return _values[-index - 1];  return doPut(key,value,index);}  }
class C{  public boolean isHighQualityRenderingEnabled(){  return highQualityRenderingEnabled;}  }
class C{  public static Map<String,Object> createImage(DispatchContext dctx,Map<String,? extends Object> context){  Map<String,Object> result=createImageMethod(dctx,context);  return result;}  }
class C{  public MessagesSearchQuery(VkApiClient client,Actor actor){  super(client,"messages.search",SearchResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public boolean add(int val){  int index=insertionIndex(val);  if (index < 0) {    return false;  }  byte previousState=_states[index];  _set[index]=val;  _states[index]=FULL;  postInsertHook(previousState == FREE);  return true;}  }
class C{  private static float calcSum(float[] vals){  if (vals == null)   return 0f;  float sum=0f;  for (  float f : vals)   sum+=f;  return sum;}  }
class C{  private Optional<Secret> prepareDomainMismatchSecret(){  val annotations=ImmutableMap.of(REQUEST_ANNOTATION,"[\"test1.k8s.io\", \"test3.k8s.io\"]");  val secretMeta=Mockito.mock(ObjectMeta.class);  when(secretMeta.getName()).thenReturn(MISMATCH_SECRET);  when(secretMeta.getAnnotations()).thenReturn(annotations);  val secret=Mockito.mock(Secret.class);  when(secret.getMetadata()).thenReturn(secretMeta);  return Optional.of(secret);}  }
class C{  private void disableHistoryMode(){  ClientDataTagImpl historyTag=null;  Collection<BaseListener> listeners=null;  for (  Entry<Long,ClientDataTagImpl> entry : historyCache.entrySet()) {    historyTag=entry.getValue();    listeners=historyTag.getUpdateListeners();    historyTag.removeAllUpdateListeners();    liveCache.get(entry.getKey()).addUpdateListeners(listeners);  }  activeCache=liveCache;  historyCache.clear();}  }
class C{  public BucketChangeEvent(UserInfo user,ExperimentBase experiment,Bucket bucket,String propertyName,String before,String after){  super(user,propertyName,before,after);  if (experiment == null) {    throw new IllegalArgumentException("Experiment must not be null!");  }  if (bucket == null) {    throw new IllegalArgumentException("Bucket must not be null!");  }  this.experiment=experiment;  this.bucket=bucket;  this.appName=experiment.getApplicationName();}  }
class C{  public void addWildPokemons(Collection<WildPokemon> wildPokemons){  if (wildPokemons == null || wildPokemons.isEmpty()) {    return;  }  complete=true;  this.wildPokemons.addAll(wildPokemons);}  }
class C{  @Override public void startLinting(){}  }
class C{  public static void requestPermissions(CordovaPlugin plugin,int requestCode,String[] permissions){  try {    Method requestPermission=CordovaInterface.class.getDeclaredMethod("requestPermissions",CordovaPlugin.class,int.class,String[].class);    requestPermission.invoke(plugin.cordova,plugin,requestCode,permissions);  } catch (  NoSuchMethodException noSuchMethodException) {    LOG.d(LOG_TAG,"No need to request permissions " + Arrays.toString(permissions));    deliverPermissionResult(plugin,requestCode,permissions);  }catch (  IllegalAccessException illegalAccessException) {    LOG.e(LOG_TAG,"IllegalAccessException when requesting permissions " + Arrays.toString(permissions),illegalAccessException);  }catch (  InvocationTargetException invocationTargetException) {    LOG.e(LOG_TAG,"invocationTargetException when requesting permissions " + Arrays.toString(permissions),invocationTargetException);  }}  }
class C{  NewProjectDescriptor withCompanyDomain(@NotNull String domain){  myDomain=domain;  return this;}  }
class C{  public final boolean isInvalid(){  return qualityCode != SourceDataQuality.OK;}  }
class C{  @Override public void finish() throws QueryExecutionException {  if (null != queryProperties.executorService) {    queryProperties.executorService.shutdownNow();  }}  }
class C{  public CircularWallForce(float x,float y,float r){  this(DEFAULT_GRAV_CONSTANT,x,y,r);}  }
class C{  public SubEquipmentConfiguration createSubEquipmentConfiguration(String subEquipmentUnitXml){  Element subEquipmentElement=parser.parse(subEquipmentUnitXml).getDocumentElement();  Long subEquipmentId=Long.parseLong(subEquipmentElement.getAttribute(ID_ATTRIBUTE));  String subEquipmentName=subEquipmentElement.getAttribute(NAME_ATTRIBUTE);  log.debug("Creating SubEquipment configuration: id=" + subEquipmentId + " name="+ subEquipmentName);  Long commFaultTagId=Long.parseLong(getTagValue(subEquipmentElement,COMMFAULT_TAG_ID_ELEMENT));  Boolean commFaultTagValue=Boolean.parseBoolean(getTagValue(subEquipmentElement,COMMFAULT_TAG_VALUE_ELEMENT));  SubEquipmentConfiguration subEquipmentConfiguration=new SubEquipmentConfiguration(subEquipmentId,subEquipmentName,commFaultTagId,commFaultTagValue);  try {    subEquipmentConfiguration.setAliveTagId(Long.parseLong(getTagValue(subEquipmentElement,ALIVE_TAG_ID_ELEMENT)));  } catch (  NullPointerException e) {    log.debug("SubEquipment has no alive tag id.");  }  try {    subEquipmentConfiguration.setAliveInterval(Long.parseLong(getTagValue(subEquipmentElement,ALIVE_INTERVAL_ELEMENT)));  } catch (  NullPointerException e) {    log.debug("SubEquipment has no alive tag interval.");  }  return subEquipmentConfiguration;}  }
class C{  public void closeConnector(){  if (getMeganFile().hasDataConnector()) {    try {      if (isDirty()) {        if (getMeganFile().isReadOnly())         System.err.println("File is read-only, discarding changes"); else {          saveAuxiliaryData();        }      }      MeganFile.removeUIdFromSetOfOpenFiles(getMeganFile().getName(),getMeganFile().getDataConnector().getUId());      getMeganFile().setFileName("");    } catch (    IOException e) {      Basic.caught(e);    }  }}  }
class C{  public static CompilerSettings defaultSettings(){  return CompilerSettings.of(DEFAULT_CPU_ACCOUNTING_MODE,DEFAULT_CONST_FOLDING_MODE,DEFAULT_CONST_CACHING_MODE,DEFAULT_BYTE_STRING_MODE,DEFAULT_NODE_SIZE_LIMIT);}  }
class C{  public UpdateTMWithXLIFFResult updateTMWithTranslationKitXLIFF(String xliffContent,TMTextUnitVariant.Status importStatus) throws OkapiBadFilterInputException {  return updateTMWithXliff(xliffContent,importStatus,new ImportTranslationsWithTranslationKitStep());}  }
class C{  private static void populateBlocks(Set<Distributable> uniqueBlocks,int noOfBlocksPerNode,List<Distributable> blockLst){  Iterator<Distributable> blocks=uniqueBlocks.iterator();  if (blockLst.size() == noOfBlocksPerNode) {    return;  }  while (blocks.hasNext()) {    Distributable block=blocks.next();    blockLst.add(block);    blocks.remove();    if (blockLst.size() >= noOfBlocksPerNode) {      break;    }  }}  }
class C{  public void onUpdate(){}  }
class C{  public static <T>String join(Collection<T> collection,CharSequence joinedBy){  if (collection.isEmpty()) {    return "";  }  StringBuilder stringBuilder=new StringBuilder(256);  for (  T t : collection) {    stringBuilder.append(t.toString()).append(joinedBy);  }  return stringBuilder.substring(0,stringBuilder.length() - joinedBy.length());}  }
class C{  @Override public void install(JEditorPane editorPane){  super.install(editorPane);  editorPane.setFont(DEFAULT_FONT);  Keymap km_parent=JTextComponent.getKeymap(JTextComponent.DEFAULT_KEYMAP);  Keymap km_new=JTextComponent.addKeymap(null,km_parent);  String kitName=this.getClass().getSimpleName();  Color caretColor=CONFIG.getPrefixColor(kitName,"CaretColor",Color.BLACK);  editorPane.setCaretColor(caretColor);  addSyntaxActions(km_new,"");  addSyntaxActions(km_new,kitName);  editorPane.setKeymap(km_new);  String[] components=CONFIG.getPrefixPropertyList(kitName,"Components");  for (  String c : components) {    try {      @SuppressWarnings("unchecked") Class<SyntaxComponent> compClass=(Class<SyntaxComponent>)Class.forName(c);      SyntaxComponent comp=compClass.newInstance();      comp.config(CONFIG,kitName);      comp.install(editorPane);      editorComponents.add(comp);    } catch (    InstantiationException ex) {      LOG.log(Level.SEVERE,null,ex);    }catch (    IllegalAccessException ex) {      LOG.log(Level.SEVERE,null,ex);    }catch (    ClassNotFoundException ex) {      LOG.log(Level.SEVERE,null,ex);    }  }}  }
class C{  public PhotosSearchQuery search(UserActor actor){  return new PhotosSearchQuery(getClient(),actor);}  }
class C{  public static StorableTimeFence inTuesdayInterval(TimeZone timeZone,long startTimeOfDayMillis,long stopTimeOfDayMillis){  return new StorableTimeFence(TUESDAY,timeZone,startTimeOfDayMillis,stopTimeOfDayMillis);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Hide_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200987,skilltarget,skillcaster,skillname);}  }
class C{  public Builder fillOpacity(Number fillOpacity){  this.fillOpacity=fillOpacity;  return this;}  }
class C{  public void createTable(String tblName,Schema sch,Transaction tx){  if (tblName != TCAT_TBLNAME && tblName != FCAT_TBLNAME)   formatFileHeader(tblName,tx);  tiMap.put(tblName,new TableInfo(tblName,sch));  RecordFile tcatfile=tcatInfo.open(tx,true);  tcatfile.insert();  tcatfile.setVal(TCAT_TBLNAME,new VarcharConstant(tblName));  tcatfile.close();  RecordFile fcatfile=fcatInfo.open(tx,true);  for (  String fldname : sch.fields()) {    fcatfile.insert();    fcatfile.setVal(FCAT_TBLNAME,new VarcharConstant(tblName));    fcatfile.setVal(FCAT_FLDNAME,new VarcharConstant(fldname));    fcatfile.setVal(FCAT_TYPE,new IntegerConstant(sch.type(fldname).getSqlType()));    fcatfile.setVal(FCAT_TYPEARG,new IntegerConstant(sch.type(fldname).getArgument()));  }  fcatfile.close();}  }
class C{  @Override public void recordTag(final SourceDataTag tag){  DataTagAddress address=tag.getAddress();  if (isDynamicTimeDeadband(tag)) {switch (address.getPriority()) {case DataTagConstants.PRIORITY_LOW:      this.lowDynamicTimeDeadbandFilterActivator.newTagValueSent(tag.getId());    break;case DataTagConstants.PRIORITY_MEDIUM:  this.medDynamicTimeDeadbandFilterActivator.newTagValueSent(tag.getId());break;default :break;}}}  }
class C{  public boolean isResizeable(){  return resizeable;}  }
class C{  public static double regularizedGammaP(double a,double x,double epsilon,int maxIterations){  double ret;  if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0)|| (x < 0.0)) {    ret=Double.NaN;  } else   if (x == 0.0) {    ret=0.0;  } else   if (x >= a + 1) {    ret=1.0 - regularizedGammaQ(a,x,epsilon,maxIterations);  } else {    double n=0.0;    double an=1.0 / a;    double sum=an;    while (FastMath.abs(an / sum) > epsilon && n < maxIterations && sum < Double.POSITIVE_INFINITY) {      n+=1.0;      an*=x / (a + n);      sum+=an;    }    if (n >= maxIterations) {      throw new MathIllegalStateException(LocalizedCoreFormats.MAX_COUNT_EXCEEDED,maxIterations);    } else     if (Double.isInfinite(sum)) {      ret=1.0;    } else {      ret=FastMath.exp(-x + (a * FastMath.log(x)) - logGamma(a)) * sum;    }  }  return ret;}  }
class C{  public PhotosSaveQuery(VkApiClient client,UserActor actor){  super(client,"photos.save",Utils.buildParametrizedType(List.class,Photo.class));  accessToken(actor.getAccessToken());}  }
class C{  @Override public void onPause(){  super.onPause();  if (mPreview != null) {    mPreview.stop();  }}  }
class C{  private BTreeNode findLastLeafNode(IndexKey key,BTreeNode node){  int childNodeIndex;  int low=0;  int high=node.nodeSize() - 1;  int mid=0;  int compareRes=-1;  IndexKey[] nodeKeys=node.getNodeKeys();  while (low <= high) {    mid=(low + high) >>> 1;    compareRes=compareIndexes(key,nodeKeys[mid]);    if (compareRes < 0) {      high=mid - 1;    } else     if (compareRes > 0) {      low=mid + 1;    } else {      int currentPos=mid;      while (currentPos + 1 < node.nodeSize() && compareIndexes(key,nodeKeys[currentPos + 1]) == 0) {        currentPos++;      }      mid=currentPos;      break;    }  }  if (compareRes < 0) {    if (mid > 0) {      mid--;    }    childNodeIndex=mid;  } else {    childNodeIndex=mid;  }  node=node.getChild(childNodeIndex);  return node;}  }
class C{  @Inject public DroppableWebElement(@Assisted WebElement dropArea,@Assisted FramePath framePath,FrameSwitcher switcher){  this.dropArea=dropArea;  this.framePath=framePath;  this.switcher=switcher;}  }
class C{  public MultiwayPoolBuilder<K,R> maximumSize(long size){  checkState(maximumSize == UNSET_INT,"maximum size was already set to %s",maximumSize);  checkArgument(size >= 0,"maximum size must not be negative");  maximumSize=size;  return this;}  }
class C{  protected void notifyDataInvalidatedEvent(){  if (datasetObservers != null) {    for (    DataSetObserver observer : datasetObservers) {      observer.onInvalidated();    }  }}  }
class C{  public static int editDistance(String s,String t){  int d[][];  int n;  int m;  int i;  int j;  char s_i;  char t_j;  int cost;  n=s.length();  m=t.length();  if (n == 0) {    return m;  }  if (m == 0) {    return n;  }  d=new int[n + 1][m + 1];  for (i=0; i <= n; i++) {    d[i][0]=i;  }  for (j=0; j <= m; j++) {    d[0][j]=j;  }  for (i=1; i <= n; i++) {    s_i=s.charAt(i - 1);    for (j=1; j <= m; j++) {      t_j=t.charAt(j - 1);      if (s_i == t_j) {        cost=0;      } else {        cost=1;      }      d[i][j]=SloppyMath.min(d[i - 1][j] + 1,d[i][j - 1] + 1,d[i - 1][j - 1] + cost);    }  }  return d[n][m];}  }
class C{  public boolean showDialog(PrefData prefData){  chckbxUseAntiAlias.setSelected(prefData.isUseAntiAlias());  model.setSelectedVendorOptionVersions(prefData.getVendorOptionVersionList());  for (  String displayName : uiLayoutMap.keySet()) {    String className=uiLayoutMap.get(displayName);    if (prefData.getUiLayoutClass() != null) {      if (className.compareTo(prefData.getUiLayoutClass()) == 0) {        uiLayoutComboBox.setSelectedItem(displayName);      }    }  }  setVisible(true);  return okPressed;}  }
class C{  public static int ceilingNextPowerOfTwo(final int x){  return 1 << (32 - Integer.numberOfLeadingZeros(x - 1));}  }
class C{  public boolean isScanRefinable(){  if (currScan != null && prevScan != null) {    Pokemon currPokemon=currScan.pokemon;    Pokemon prevPokemon=prevScan.pokemon;    boolean higherLevel=currScan.estimatedPokemonLevel > prevScan.estimatedPokemonLevel;    boolean sameOrHigherLevel=currScan.estimatedPokemonLevel >= prevScan.estimatedPokemonLevel;    boolean evolved=currPokemon.isNextEvolutionOf(prevPokemon);    boolean sameOrEvolved=currPokemon.number == prevPokemon.number || evolved;    return (higherLevel || evolved) && sameOrHigherLevel && sameOrEvolved;  }  return false;}  }
class C{  protected boolean postlexicalRules(Element token,AllophoneSet allophoneSet){  return false;}  }
class C{  public T distance1(final Vector3D v){  final T dx=x.subtract(v.getX()).abs();  final T dy=y.subtract(v.getY()).abs();  final T dz=z.subtract(v.getZ()).abs();  return dx.add(dy).add(dz);}  }
class C{  public Builder duration(Number duration){  this.duration=duration;  return this;}  }
class C{  protected synchronized int assignDocTypeNumber(){  return ++docAndDoctypeCounter;}  }
class C{  public Thread thread(Runnable r){  String name="JiniWakeupManager";  Thread thr=getGroup() == null ? new GSThread(r,name) : new GSThread(getGroup(),r,name);  thr.setDaemon(isDaemon());  thr.setPriority(getPriority());  return thr;}  }
class C{  @NotNull public ActionButtonFixture findRunApplicationButton(){  return findActionButtonByActionId("Run");}  }
class C{  public static ArrayType v(Type baseType,int numDimensions){  Type elementType;  if (numDimensions == 1) {    elementType=baseType;  } else   if (numDimensions > 1) {    elementType=ArrayType.v(baseType,numDimensions - 1);  } else   throw new RuntimeException("Invalid number of array dimensions: " + numDimensions);  ArrayType ret=elementType.getArrayType();  if (ret == null) {    ret=new ArrayType(baseType,numDimensions);    elementType.setArrayType(ret);  }  return ret;}  }
class C{  public LinearConstraint(final double[] lhsCoefficients,final double lhsConstant,final Relationship relationship,final double[] rhsCoefficients,final double rhsConstant){  double[] sub=new double[lhsCoefficients.length];  for (int i=0; i < sub.length; ++i) {    sub[i]=lhsCoefficients[i] - rhsCoefficients[i];  }  this.coefficients=new ArrayRealVector(sub,false);  this.relationship=relationship;  this.value=rhsConstant - lhsConstant;}  }
class C{  private void configureOutputStream(){  String filename=generateFilename();  File file=null;  try {    file=acquireUniqueFile(filename);    if (isDebuggable(Level.CONFIG)) {      LogHelper.println("com.gigaspaces.logger",Level.CONFIG,"Log file: " + file.getAbsolutePath());    }    FileOutputStream fout=new FileOutputStream(file,append);    BufferedOutputStream bout=new BufferedOutputStream(fout);    MeteredStream meteredStream=new MeteredStream(bout,(int)file.length());    setOutputStream(meteredStream);    sizeRollingPolicy.setMeteredStream(meteredStream);    timeRollingPolicy.setTimestamp();    backupPolicy.track(file);    if (monitorCreatedFiles) {      filesCreated.add(0,file);    }  } catch (  IOException ioe) {    String filepath=file != null ? file.getAbsolutePath() : filename;    reportError("Failed while configuring output file: " + filepath,ioe,ErrorManager.OPEN_FAILURE);    corruptedOutputStream=true;  }}  }
class C{  public Env<T> open(final File path,final int mode,final EnvFlags... flags){  requireNonNull(path);  if (opened) {    throw new AlreadyOpenException();  }  opened=true;  final PointerByReference envPtr=new PointerByReference();  checkRc(LIB.mdb_env_create(envPtr));  final Pointer ptr=envPtr.getValue();  try {    checkRc(LIB.mdb_env_set_mapsize(ptr,mapSize));    checkRc(LIB.mdb_env_set_maxdbs(ptr,maxDbs));    checkRc(LIB.mdb_env_set_maxreaders(ptr,maxReaders));    final int flagsMask=mask(flags);    final boolean readOnly=isSet(flagsMask,MDB_RDONLY_ENV);    checkRc(LIB.mdb_env_open(ptr,path.getAbsolutePath(),flagsMask,mode));    return new Env<>(proxy,ptr,readOnly);  } catch (  final LmdbNativeException e) {    LIB.mdb_env_close(ptr);    throw e;  }}  }
class C{  public EqException(final int error){  this(error,"");}  }
class C{  static protected Action findAction(String name){  if (kit == null)   kit=new DefaultEditorKit();  Action[] actions=kit.getActions();  for (int i=0; i < kit.getActions().length; i++) {    Action action=actions[i];    if (action.getValue(AbstractAction.NAME).equals(name))     return action;  }  return null;}  }
class C{  public DocsGetUploadServerQuery groupId(Integer value){  return unsafeParam("group_id",value);}  }
class C{  public static Zmat o(Zdiagmat D,Zmat A) throws JampackException {  if (D.order != A.nrow || D.order != A.ncol) {    throw new JampackException("Matrices not conformable for addition");  }  Zmat C=new Zmat(A);  for (int i=0; i < D.order; i++) {    C.re[i][i]=C.re[i][i] + D.re[i];    C.im[i][i]=C.im[i][i] + D.im[i];  }  return C;}  }
class C{  public PhotosEditAlbumQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  private static String capitalize(String s){  if (s == null || s.length() == 0) {    return "";  }  char first=s.charAt(0);  if (Character.isUpperCase(first)) {    return s;  } else {    return Character.toUpperCase(first) + s.substring(1);  }}  }
class C{  public static <T>boolean hasUniqueObject(Collection<T> collection){  if (isEmpty(collection))   return false;  boolean hasCandidate=false;  T candidate=null;  for (  T elem : collection) {    if (!hasCandidate) {      hasCandidate=true;      candidate=elem;    } else     if (candidate != elem)     return false;  }  return true;}  }
class C{  private DataQueryParams pruneToDimensionType(DimensionType type){  Iterator<DimensionalObject> dimensionIter=dimensions.iterator();  while (dimensionIter.hasNext()) {    if (!dimensionIter.next().getDimensionType().equals(type)) {      dimensionIter.remove();    }  }  Iterator<DimensionalObject> filterIter=filters.iterator();  while (filterIter.hasNext()) {    if (!filterIter.next().getDimensionType().equals(type)) {      filterIter.remove();    }  }  return this;}  }
class C{  public AWSIotTopic(String topic,AWSIotQos qos){  super(topic,qos);}  }
class C{  @Override protected void checkFeature(String featureId) throws XMLConfigurationException {  if (featureId.startsWith(Constants.XERCES_FEATURE_PREFIX)) {    final int suffixLength=featureId.length() - Constants.XERCES_FEATURE_PREFIX.length();    if (suffixLength == Constants.DYNAMIC_VALIDATION_FEATURE.length() && featureId.endsWith(Constants.DYNAMIC_VALIDATION_FEATURE)) {      return;    }    if (suffixLength == Constants.DEFAULT_ATTRIBUTE_VALUES_FEATURE.length() && featureId.endsWith(Constants.DEFAULT_ATTRIBUTE_VALUES_FEATURE)) {      short type=XMLConfigurationException.NOT_SUPPORTED;      throw new XMLConfigurationException(type,featureId);    }    if (suffixLength == Constants.VALIDATE_CONTENT_MODELS_FEATURE.length() && featureId.endsWith(Constants.VALIDATE_CONTENT_MODELS_FEATURE)) {      short type=XMLConfigurationException.NOT_SUPPORTED;      throw new XMLConfigurationException(type,featureId);    }    if (suffixLength == Constants.LOAD_DTD_GRAMMAR_FEATURE.length() && featureId.endsWith(Constants.LOAD_DTD_GRAMMAR_FEATURE)) {      return;    }    if (suffixLength == Constants.LOAD_EXTERNAL_DTD_FEATURE.length() && featureId.endsWith(Constants.LOAD_EXTERNAL_DTD_FEATURE)) {      return;    }    if (suffixLength == Constants.VALIDATE_DATATYPES_FEATURE.length() && featureId.endsWith(Constants.VALIDATE_DATATYPES_FEATURE)) {      short type=XMLConfigurationException.NOT_SUPPORTED;      throw new XMLConfigurationException(type,featureId);    }  }  super.checkFeature(featureId);}  }
class C{  public void addFriend(Friend friend){  friends.add(friend);}  }
class C{  public Vector3f mult(float scalar,Vector3f product){  if (null == product) {    product=new Vector3f();  }  product.x=x * scalar;  product.y=y * scalar;  product.z=z * scalar;  return product;}  }
class C{  public void loadData(String classificationName,Set<Integer> classIds,String name,ProgressListener progressListener) throws IOException, CanceledException {  this.classificationName=classificationName;  this.className=name;  totalNumberOfReads=0;  int totalReadsUsed=0;  reference2ReadMatchPairs.clear();  setBlastType(UNKNOWN);  boolean blastFormatUnknown=true;  boolean warnedUnknownBlastFormatEncountered=false;  final Set<String> matchesSeenForGivenRead=new HashSet<>();  progressListener.setTasks("Alignment viewer","Collecting data");  System.err.println("Collecting data...");  if (!doc.getMeganFile().hasDataConnector())   throw new IOException("Alignment requires archive");  final Map<String,Set<String>> reference2seen=new HashMap<>(100000);  int count=0;  boolean seenActiveMatch=false;  try (IReadBlockIterator it=doc.getMeganFile().getDataConnector().getReadsIteratorForListOfClassIds(classificationName,classIds,doc.getMinScore(),doc.getMaxExpected(),true,true)){    progressListener.setMaximum(it.getMaximumProgress());    progressListener.setProgress(0);    while (it.hasNext()) {      final BitSet activeMatches=new BitSet();      final IReadBlock readBlock=it.next();      totalNumberOfReads++;      count++;      boolean readUsed=false;      ActiveMatches.compute(doc.getMinScore(),doc.getTopPercent(),doc.getMaxExpected(),doc.getMinPercentIdentity(),readBlock,classificationName,activeMatches);      if (activeMatches.cardinality() > 0) {        String readHeader=readBlock.getReadHeader().replaceAll("[\r\n]","");        if (readHeader.startsWith(">"))         readHeader=readHeader.substring(1).trim();        String readName=Basic.getFirstWord(readHeader);        String readSequence=readBlock.getReadSequence();        if (readSequence == null)         throw new IOException("Can't display alignments, reads sequences appear to be missing from RMA file");        if (readSequence != null)         readSequence=readSequence.replaceAll("[\t\r\n ]","");        for (int i=0; i < readBlock.getNumberOfAvailableMatchBlocks(); i++) {          IMatchBlock matchBlock=readBlock.getMatchBlock(i);          if (matchBlock.getText() == null) {            System.err.println("Error: Match text: null");            continue;          }          if (doc.isUseIdentityFilter() && matchBlock.getPercentIdentity() > 0 && matchBlock.getPercentIdentity() < 97)           continue;          if (activeMatches.get(i)) {            final String matchText=removeReferenceHeaderFromBlastMatch(truncateBeforeSecondOccurrence(matchBlock.getText(),"Score ="));            final String key=Basic.getFirstLine(matchBlock.getText());            if (blastFormatUnknown) {              setBlastType(guessBlastType(matchText));              if (getBlastType().equals(UNKNOWN)) {                if (!warnedUnknownBlastFormatEncountered) {                  System.err.println("Error: Unknown BLAST format encountered");                  warnedUnknownBlastFormatEncountered=true;                }                continue;              } else               blastFormatUnknown=false;            }            Set<String> seen=reference2seen.get(key);            if (seen == null) {              seen=new HashSet<>(10000);              reference2seen.put(key,seen);            }            if (!seen.contains(readName)) {              seen.add(readName);              if (!matchesSeenForGivenRead.contains(key)) {                matchesSeenForGivenRead.add(key);                List<byte[][]> pairs=reference2ReadMatchPairs.get(key);                if (pairs == null) {                  pairs=new LinkedList<>();                  reference2ReadMatchPairs.put(key,pairs);                }                pairs.add(new byte[][]{readHeader.getBytes(),readSequence != null ? readSequence.getBytes() : null,matchText.getBytes()});                readUsed=true;              }            }          }        }        if (readUsed) {          totalReadsUsed++;        }        matchesSeenForGivenRead.clear();        if (!seenActiveMatch && activeMatches.cardinality() > 0)         seenActiveMatch=true;      }      if ((count % 100) == 0) {        progressListener.setSubtask("Collecting data (" + count + " reads processed)");        progressListener.setProgress(count);      }    }  } catch (  CanceledException ex) {    System.err.println("USER CANCELED EXECUTE, dataset may be incomplete");  } finally {    reference2seen.clear();  }  if (!seenActiveMatch)   throw new IOException("No active matches found");  final int minReads=ProgramProperties.get(MeganProperties.MININUM_READS_IN_ALIGNMENT,10);  if (minReads > 1) {    boolean hasMinReads=false;    for (    List<byte[][]> list : reference2ReadMatchPairs.values()) {      if (list.size() >= minReads) {        hasMinReads=true;        break;      }    }    if (hasMinReads) {      System.err.print("Removing all alignments with less than " + minReads + " reads: ");      List<String> toDelete=new LinkedList<>();      for (      String reference : reference2ReadMatchPairs.keySet()) {        if (reference2ReadMatchPairs.get(reference).size() < minReads)         toDelete.add(reference);      }      reference2ReadMatchPairs.keySet().removeAll(toDelete);      System.err.println(toDelete.size());    }  }  System.err.println("Reads total: " + totalNumberOfReads);  System.err.println("Reads used:  " + totalReadsUsed);  System.err.println("References:  " + reference2ReadMatchPairs.keySet().size());  if (getBlastType().equals(UNKNOWN))   throw new IOException("Couldn't determine BLAST flavor. Aligner requires BLASTX, BLASTP or BLASTN matches");}  }
class C{  @Override public void clear(){  super.clear();  mIconUrlToIconMap.clear();}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public AnonymousDecl fullCopy(){  AnonymousDecl tree=(AnonymousDecl)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {switch (i) {case 3:        tree.children[i]=new Opt();      continue;case 4:    tree.children[i]=new List();  continue;}ASTNode child=(ASTNode)children[i];if (child != null) {child=child.fullCopy();tree.setChild(child,i);}}}return tree;}  }
class C{  public void startClientWithProperties() throws InterruptedException {  System.setProperty("c2mon.client.conf.url","http://timweb/test/conf/c2mon-client.properties");  C2monServiceGateway.startC2monClientSynchronous();  ClientCommandTag<Boolean> commandTag=C2monServiceGateway.getCommandManager().getCommandTag(104974L);  assertNotNull(commandTag.getName());  assertTrue(!commandTag.getName().equalsIgnoreCase(""));  assertNotNull(commandTag.getProcessId());  assertNotNull(commandTag.getHardwareAddress());}  }
class C{  public Color mixDyes(DyeColor... colors){  Validate.noNullElements(colors,"Colors cannot be null");  Color[] toPass=new Color[colors.length];  for (int i=0; i < colors.length; i++) {    toPass[i]=colors[i].getColor();  }  return mixColors(toPass);}  }
class C{  public static ActAction act(float delta){  ActAction action=action(ActAction.class);  action.setDelta(delta);  return action;}  }
class C{  @SuppressWarnings("rawtypes") public Value newUnboundVariable(String name,Class type){  return newBoundVariable(name,type);}  }
class C{  public static EquivalentValue equiVal(Value val){  if (val == null)   return null;  return new EquivalentValue(val);}  }
class C{  public boolean wasDoubleClicked(int code){  MouseButton mb=this.buttons.get(code);  if (mb == null) {    return false;  }  return mb.wasDoubleClicked();}  }
class C{  public static RequestLog dump(){  RequestLog current=RLOG.get();  RequestLog copy=new RequestLog(current);  current.clear();  RLOG.remove();  return copy;}  }
class C{  public GeneralException(String msg,Throwable nested){  super(msg,nested);}  }
class C{  private String prepareSlowConsumerCloseMsg(SocketAddress address){  return "Closed slow consumer: " + address + " SlowConsumerThroughput="+ _slowConsumerThroughput+ " SlowConsumerRetries="+ _slowConsumerRetries+ " SlowConsumerLatency="+ _slowConsumerLatency;}  }
class C{  static void expandToViewportWidthIfNecessary(@NotNull JTable table,int ignoreIndex){  if (table.getColumnModel().getColumnCount() < ConstantColumn.COUNT) {    return;  }  int widthToFillViewport=getAdditionalWidthToFillViewport(table);  if (widthToFillViewport <= 0) {    return;  }  int totalNumColumns=table.getColumnModel().getColumnCount();  int numColumnsForDistribution=totalNumColumns - ConstantColumn.COUNT;  if (ConstantColumn.COUNT <= ignoreIndex && ignoreIndex < totalNumColumns) {    --numColumnsForDistribution;  }  if (numColumnsForDistribution == 0) {    TableColumn column=table.getColumn(ConstantColumn.DEFAULT_VALUE.name);    setPreferredWidth(column,column.getPreferredWidth() + widthToFillViewport);    return;  }  int extraWidth=widthToFillViewport / numColumnsForDistribution;  for (int i=ConstantColumn.COUNT; i < totalNumColumns; ++i) {    if (i == ignoreIndex) {      continue;    }    TableColumn column=table.getColumnModel().getColumn(i);    setPreferredWidth(column,column.getPreferredWidth() + extraWidth);    widthToFillViewport-=extraWidth;  }  int resizeIndex=totalNumColumns - 1;  if (resizeIndex == ignoreIndex) {    --resizeIndex;  }  TableColumn column=table.getColumnModel().getColumn(resizeIndex);  setPreferredWidth(column,column.getPreferredWidth() + widthToFillViewport);}  }
class C{  static Object createObject(String factoryId,String fallbackClassName) throws ConfigurationError {  return createObject(factoryId,null,fallbackClassName);}  }
class C{  @SuppressWarnings("unchecked") public static <T extends DimensionalItemObject>List<T> asTypedList(Collection<DimensionalItemObject> collection){  List<T> list=new ArrayList<>();  if (collection != null) {    for (    DimensionalItemObject object : collection) {      list.add((T)object);    }  }  return list;}  }
class C{  public DistributionWordDocument(int iNeighbourhoodWindow){  super(iNeighbourhoodWindow);}  }
class C{  public T walkInOptimizedOrder(final FieldVectorChangingVisitor<T> visitor){  return walkInDefaultOrder(visitor);}  }
class C{  public static boolean supports(String db,int majorVersion,int minorVersion){  return MYSQL_DB_NAME.equals(db) && majorVersion == 5;}  }
class C{  public InvalidJobException(Throwable nested){  super(nested);}  }
class C{  private void updateNotification(String content){  String ticker=String.format(getString(R.string.media_notif_ticker),getString(R.string.app_name));  Intent showDetailsIntent=new Intent(this,FileDisplayActivity.class);  showDetailsIntent.putExtra(FileActivity.EXTRA_FILE,mFile);  showDetailsIntent.putExtra(FileActivity.EXTRA_ACCOUNT,mAccount);  showDetailsIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  mNotificationBuilder.setContentIntent(PendingIntent.getActivity(getApplicationContext(),(int)System.currentTimeMillis(),showDetailsIntent,PendingIntent.FLAG_UPDATE_CURRENT));  mNotificationBuilder.setWhen(System.currentTimeMillis());  mNotificationBuilder.setTicker(ticker);  mNotificationBuilder.setContentTitle(ticker);  mNotificationBuilder.setContentText(content);  mNotificationManager.notify(R.string.media_notif_ticker,mNotificationBuilder.build());}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  public boolean isStream(){  return inputStream != null;}  }
class C{  public static Bitmap takeScreenshotBitmap(Activity activity){  if (activity == null) {    throw new IllegalArgumentException("Parameter activity cannot be null.");  }  try {    return takeBitmapUnchecked(activity);  } catch (  Exception e) {    String message="Unable to take screenshot to bitmap of activity " + activity.getClass().getName();    Log.e(TAG,message,e);    throw new UnableToTakeScreenshotException(message,e);  }}  }
class C{  public FloatColumn(int nrows,int capacity,float defaultValue){  super(float.class,new Float(defaultValue));  if (capacity < nrows) {    throw new IllegalArgumentException("Capacity value can not be less than the row count.");  }  m_values=new float[capacity];  Arrays.fill(m_values,defaultValue);  m_size=nrows;}  }
class C{  public Code39Reader(boolean usingCheckDigit,boolean extendedMode){  this.usingCheckDigit=usingCheckDigit;  this.extendedMode=extendedMode;  decodeRowResult=new StringBuilder(20);  counters=new int[9];}  }
class C{  public static String execute(String command){  return execute(command,null);}  }
class C{  public static boolean isFileExist(String filePath){  if (StringUtil.isEmpty(filePath)) {    return false;  }  File file=new File(filePath);  return (file.exists() && file.isFile());}  }
class C{  public EntityQuery orderBy(List<String> orderBy){  this.orderBy=orderBy;  return this;}  }
class C{  public static Observable<Integer> characters(CharSequence string){  return RxJavaPlugins.onAssembly(new ObservableCharSequence(string));}  }
class C{  private void checkDimension(final int expected,final Object array) throws MathIllegalArgumentException {  int arrayDimension=(array == null) ? 0 : Array.getLength(array);  if (arrayDimension != expected) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,arrayDimension,expected);  }}  }
class C{  public void put(int key,int value){  int i=binarySearch(mKeys,mSize,key);  if (i >= 0) {    mValues[i]=value;  } else {    i=~i;    mKeys=insertElementIntoIntArray(mKeys,mSize,i,key);    mValues=insertElementIntoIntArray(mValues,mSize,i,value);    ++mSize;  }}  }
class C{  public void reset(){  for (int i=0; i < counters.length; ++i) {    counters[i].set(0);  }  counters[0].set(_initialValue);}  }
class C{  public final void warn(final Object o){  log(Level.WARN,o);}  }
class C{  public PhotosSearchQuery(VkApiClient client){  super(client,"photos.search",SearchResponse.class);}  }
class C{  public void goToNextColor(){  mColorIndex=(mColorIndex + 1) % (mColors.length);}  }
class C{  public XPath(String xpath,SymbolTable symbolTable,NamespaceContext context) throws XPathException {  super(fixupXPath(xpath),symbolTable,context);  for (int i=0; i < fLocationPaths.length; i++) {    for (int j=0; j < fLocationPaths[i].steps.length; j++) {      mf.org.apache.xerces.impl.xpath.XPath.Axis axis=fLocationPaths[i].steps[j].axis;      if (axis.type == XPath.Axis.ATTRIBUTE && (j < fLocationPaths[i].steps.length - 1)) {        throw new XPathException("c-fields-xpaths");      }    }  }}  }
class C{  public static boolean performBuyFromRewardShop(Npc npc,Player player,TradeList tradeList){  if (!RestrictionsManager.canTrade(player)) {    return false;  }  if (!validateBuyItems(npc,tradeList,player)) {    PacketSendUtility.sendMessage(player,"Some items are not allowed to be selled from this npc");    return false;  }  Storage inventory=player.getInventory();  int freeSlots=inventory.getFreeSlots();  if (!tradeList.calculateRewardBuyListPrice(player)) {    return false;  }  if (freeSlots < tradeList.size()) {    return false;  }  Map<Integer,Long> requiredItems=tradeList.getRequiredItems();  for (  Integer itemId : requiredItems.keySet()) {    if (!player.getInventory().decreaseByItemId(itemId,requiredItems.get(itemId))) {      AuditLogger.info(player,"Possible hack. Not removed items on buy in rewardshop.");      return false;    }  }  LimitedItem item=null;  for (  TradeItem tradeItem : tradeList.getTradeItems()) {    item=LimitedItemTradeService.getInstance().getLimitedItem(tradeItem.getItemId(),npc.getNpcId());    if (item != null) {      if (item.getBuyLimit() == 0 && item.getDefaultSellLimit() != 0) {        item.getBuyCount().putIfAbsent(player.getObjectId(),0);        if (item.getSellLimit() - tradeItem.getCount() < 0)         return false;        item.setSellLimit(item.getSellLimit() - (int)tradeItem.getCount());      } else       if (item.getBuyLimit() != 0 && item.getDefaultSellLimit() == 0) {        item.getBuyCount().putIfAbsent(player.getObjectId(),0);        if (item.getBuyLimit() - tradeItem.getCount() < 0)         return false;        if (item.getBuyCount().containsKey(player.getObjectId())) {          if (item.getBuyCount().get(player.getObjectId()) < item.getBuyLimit()) {            item.getBuyCount().put(player.getObjectId(),item.getBuyCount().get(player.getObjectId()) + (int)tradeItem.getCount());          } else           return false;        }      } else       if (item.getBuyLimit() != 0 && item.getDefaultSellLimit() != 0) {        item.getBuyCount().putIfAbsent(player.getObjectId(),0);        if (item.getBuyLimit() - tradeItem.getCount() < 0 || item.getSellLimit() - tradeItem.getCount() < 0)         return false;        if (item.getBuyCount().containsKey(player.getObjectId())) {          if (item.getBuyCount().get(player.getObjectId()) < item.getBuyLimit()) {            item.getBuyCount().put(player.getObjectId(),item.getBuyCount().get(player.getObjectId()) + (int)tradeItem.getCount());          } else           return false;        }        item.setSellLimit(item.getSellLimit() - (int)tradeItem.getCount());      }    }    long count=ItemService.addItem(player,tradeItem.getItemTemplate().getTemplateId(),tradeItem.getCount());    if (count != 0) {      log.warn(String.format("CHECKPOINT: itemservice couldnt add all items on buy: %d %d %d %d",player.getObjectId(),tradeItem.getItemTemplate().getTemplateId(),tradeItem.getCount(),count));      return false;    }  }  return true;}  }
class C{  private void initialize(Collection<OrganisationUnit> sources,Collection<Period> periods,Collection<ValidationRule> rules){  addPeriodsToContext(periods);  boolean surveillanceRulesPresent=addRulesToContext(rules);  removeAnyUnneededPeriodTypes();  addSourcesToContext(sources,true);  countOfSourcesToValidate=sources.size();  if (surveillanceRulesPresent) {    Set<OrganisationUnit> otherDescendants=getAllOtherDescendants(sources);    addSourcesToContext(otherDescendants,false);  }}  }
class C{  private void addNewScan(IVScanResult res){  prevScan=currScan;  currScan=res;}  }
class C{  private boolean isRequestingSensorEventData(String nodeId){  SensorDataRequest request=sensorDataRequests.get(nodeId);  if (request == null) {    return false;  }  return request.getEndTimestamp() == DataRequest.TIMESTAMP_NOT_SET;}  }
class C{  @deprecated public Object clone(){  try {    CompactByteArray other=(CompactByteArray)super.clone();    other.values=((byte[])this.values.clone());    other.indices=((char[])this.indices.clone());    if (this.hashes != null)     other.hashes=((int[])this.hashes.clone());    return other;  } catch (  CloneNotSupportedException e) {    throw new IllegalStateException();  }}  }
class C{  public boolean isApplicable(){  return ((AlignmentViewer)getViewer()).getSelectedBlock().isSelected();}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,byte[] alphabet){  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=alphabet[(inBuff >>> 18)];  destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=alphabet[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  public void unsetQuota(ServiceUnitId suName) throws Exception {  String suNameStr=(suName == null) ? null : suName.toString();  this.unsetQuota(suNameStr);}  }
class C{  public void addDeviceProperty(DeviceProperty deviceProperty){  this.deviceProperties.add(deviceProperty);}  }
class C{  public void initialize(){  setupEnvVars();  this.configSource.initialize(ASG_NAME,getDataCenter());  setDefaultRACList(getDataCenter());}  }
class C{  @Override public void startContentModel(String elementName,Augmentations augs) throws XNIException {  XMLElementDecl elementDecl=(XMLElementDecl)this.fElementDeclTab.get(elementName);  if (elementDecl != null) {    fElementDecl=elementDecl;  }  fDepth=0;  initializeContentModelStack();}  }
class C{  public static boolean isNullOrEmpty(String string){  return TextUtils.isEmpty(string);}  }
class C{  private Launch validate(String launchId,String projectName){  Launch launch=launchRepository.findOne(launchId);  expect(launch,notNull()).verify(LAUNCH_NOT_FOUND,launchId);  expect(launch.getProjectRef(),equalTo(projectName)).verify(ErrorType.FORBIDDEN_OPERATION,formattedSupplier("Specified launch with id '{}' not referenced to specified project '{}'",launchId,projectName));  return launch;}  }
class C{  @Override public void keyPressed(KeyEvent e){synchronized (keyLock) {    keysDown.add(e.getKeyCode());  }}  }
class C{  public IsGreaterThanExtended(Expression expression1,Expression expression2){  super(expression1,expression2);}  }
class C{  private void writeName(String uri,String localName,String qName,boolean isElement) throws SAXException {  String prefix=doPrefix(uri,qName,isElement);  if (prefix != null && !"".equals(prefix)) {    write(prefix);    write(':');  }  if (localName != null && !"".equals(localName)) {    write(localName);  } else {    int i=qName.indexOf(':');    write(qName.substring(i + 1,qName.length()));  }}  }
class C{  public static Array<String> splitAndTrim(String str){  return splitAndTrim(str,"\n");}  }
class C{  public boolean isDividerAllowedBelow(){  return mDividerAllowedBelow;}  }
class C{  public static final void drawVector(GL2 gl,double sx,double sy,double dx,double dy,double l){  gl.glBegin(GL.GL_LINES);  gl.glVertex2d(sx,sy);  gl.glVertex2d(sx + dx * l,sy + dy * l);  gl.glEnd();}  }
class C{  public Task startTask(String taskId){  Task currentTask=associationManager.getTask();  if (currentTask != null && currentTask.getId().equals(taskId)) {    return currentTask;  }  Task task=processEngine.getTaskService().createTaskQuery().taskId(taskId).singleResult();  if (task == null) {    throw new ActivitiCdiException("Cannot resume task with id '" + taskId + "', no such task.");  }  associationManager.setTask(task);  associateExecutionById(task.getProcessInstanceId());  return task;}  }
class C{  public H264Stream(int cameraId){  super(cameraId);  mMimeType="video/avc";  mCameraImageFormat=ImageFormat.NV21;  mVideoEncoder=MediaRecorder.VideoEncoder.H264;  mPacketizer=new H264Packetizer();}  }
class C{  public void denyAll(PermissionFlag flag,Message message){  generalPermissions.put(flag,message);  strictPermission.getOrDefault(flag,emptyMap()).values().removeIf(null);}  }
class C{  public static void load(NBTTagCompound nbt){  NBTTagList registryList=nbt.getTagList("Registry",10);  for (int i=0; i < registryList.tagCount(); i++) {    NBTTagCompound registryNBT=registryList.getCompoundTagAt(i);    AutomaticNamespacedRegistry<Object,Object> registry=Registries.getRegistryMap().get(registryNBT.getString("type"));    if (registry == null) {      continue;    }    NBTTagList registeredObjectList=registryNBT.getTagList("Data",10);    Map<String,Integer> nameIdMap=new HashMap<>();    for (int j=0; j < registeredObjectList.tagCount(); j++) {      NBTTagCompound registeredObject=registeredObjectList.getCompoundTagAt(j);      nameIdMap.put(registeredObject.getString("key"),registeredObject.getInteger("value"));    }    registry.setRegistryObjects(nameIdMap);  }}  }
class C{  @Override public void onUIReset(PtrFrameLayout frame){  mScale=1f;  mDrawable.stop();}  }
class C{  @Override public void onRequestCompleted(int code,Object result){  progressDialog.cancel();  if (code == ConnectAPI.TIMELINE_CODE) {    TimelineResult timelineResult=(TimelineResult)result;    if (timelineResult != null) {      if (timelineResult.getStatus() == ErrorDefinitions.CODE_SUCCESS) {        DataHandler.getInstance(getActivity()).saveTimeline(timelineResult.getTimeline());        Log.d("Realm result:",DataHandler.getInstance(getActivity()).getPhases().toString());        setData();      } else {        showMessage(timelineResult.getMessage());      }    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedFPATK_Instant_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200349,skillname);}  }
class C{  public int end(){  return start + rawString.length();}  }
class C{  public CustomSwitchPreference(Context context){  super(context,null);}  }
class C{  void notifyStop(){  if (!m_isQueue) {synchronized (synchTopicNotifyLock) {      if (currentMessage == null) {        currentMessage=this.topicWakeupObject;        synchTopicNotifyLock.notify();      }    }  }}  }
class C{  private static void addDesignTimeAttributes(@NotNull final String namespacePrefix,@NotNull final PsiElement psiElement,@NotNull final AndroidFacet facet,@NotNull final XmlAttribute attribute,@NotNull final CompletionResultSet resultSet){  final XmlTag tag=attribute.getParent();  final DomElement element=DomManager.getDomManager(tag.getProject()).getDomElement(tag);  final Set<XmlName> registeredAttributes=new HashSet<>();  if (element instanceof LayoutElement) {    AttributeProcessingUtil.processLayoutAttributes(facet,tag,(LayoutElement)element,registeredAttributes,null);  }}  }
class C{  public static void main(String[] args){  if (functionsobj.isApplicationExpired()) {    JOptionPane.showMessageDialog(null,"Application Expired",null,0);    System.exit(0);  }  String GoogleAnalyticsTrackers=functionsobj.getGoogleAnalyticsTrackers();  List<String> GoogleAnalyticsTrackersIDs=Arrays.asList(GoogleAnalyticsTrackers.split(","));  if (SETTINGS.getString("googleanalyticstracker.setting").equalsIgnoreCase("on")) {    for (int i=0; i < GoogleAnalyticsTrackersIDs.size(); i++) {      functionsobj.jGoogleAnalyticsTracker("AppLoad",SETTINGS.getString("googleanalyticstracker.version"),GoogleAnalyticsTrackersIDs.get(i).toUpperCase());    }  }  try {    if (Functions.isMac()) {      UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());    } else     if (Functions.isWindows()) {      UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());    } else     if (Functions.isLinux()) {      UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());    }  } catch (  ClassNotFoundException e) {    e.printStackTrace();  }catch (  InstantiationException e) {    e.printStackTrace();  }catch (  IllegalAccessException e) {    e.printStackTrace();  }catch (  UnsupportedLookAndFeelException e) {    e.printStackTrace();  }  @SuppressWarnings("unused") VDICalculator sal=new VDICalculator(args);}  }
class C{  private void DrawPrimitive(DrawItem i,World w) throws Exception {  ItemStack item=MinecraftTypeHelper.getItemStackFromDrawItem(i);  if (item == null)   throw new Exception("Unrecognised item type: " + i.getType());  BlockPos pos=new BlockPos(i.getX(),i.getY(),i.getZ());  placeItem(item,pos,w,true);}  }
class C{  public void addComment(XmlElement xmlElement){}  }
class C{  public ServiceConfigurationError(String msg){  super(msg);}  }
class C{  protected void readStreamHeader() throws IOException {}  }
class C{  private static long toLong(int x,int z){  return ((long)x << 32) + z - Integer.MIN_VALUE;}  }
class C{  public WatchedObject addIdleWatch(ConnectionResource client){  return addWatch(new ClientWatchedObject(this,client));}  }
class C{  public VideoPutTagQuery putTag(UserActor actor,int userId,int videoId){  return new VideoPutTagQuery(getClient(),actor,userId,videoId);}  }
class C{  public FaveGetVideosQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public byte[] toByteArray(){  return Arrays.copyOf(bytes,bytes.length);}  }
class C{  public boolean isGenericBlock(){  return isOptionEnabled(UrlFilterRuleOption.GENERIC_BLOCK);}  }
class C{  private double generalizedHarmonic(final int n,final double m){  double value=0;  for (int k=n; k > 0; --k) {    value+=1.0 / FastMath.pow(k,m);  }  return value;}  }
class C{  public static RevealBuilder reveal(@NonNull final View viewToReveal){  return new RevealBuilder(viewToReveal);}  }
class C{  public static JsonElement createNumberFormat(INumberFormat numberFormat){  if (instance != null) {    return instance.internal_createNumberFormat(numberFormat);  }  return null;}  }
class C{  public int compareTo(Object o){  float thisValue=this.value;  float thatValue=((FloatWritable)o).value;  return (thisValue < thatValue ? -1 : (thisValue == thatValue ? 0 : 1));}  }
class C{  public void stopScrolling(){  scroller.stopScrolling();}  }
class C{  @Override public void run(){  Account account=AccountUtils.getAccount();  boolean syncActive=ContentResolver.isSyncActive(account,FeedContract.CONTENT_AUTHORITY);  boolean syncPending=ContentResolver.isSyncPending(account,FeedContract.CONTENT_AUTHORITY);  setRefreshActionButtonState(syncActive || syncPending);}  }
class C{  private boolean registerNamespace(String namespace,boolean ensureOwned) throws PulsarServerException {  String myUrl=pulsar.getBrokerServiceUrl();  try {    NamespaceName nsname=new NamespaceName(namespace);    String otherUrl=null;    NamespaceBundle nsFullBundle=null;    nsFullBundle=bundleFactory.getFullBundle(nsname);    otherUrl=ownershipCache.getOrSetOwner(nsFullBundle).getNativeUrl();    if (myUrl.equals(otherUrl)) {      if (nsFullBundle != null) {        pulsar.loadNamespaceDestinations(nsFullBundle);      }      return true;    }    String msg=String.format("namespace already owned by other broker : ns=%s expected=%s actual=%s",namespace,myUrl,otherUrl);    if (!ensureOwned) {      LOG.info(msg);      return false;    }    throw new IllegalStateException(msg);  } catch (  Exception e) {    LOG.error(e.getMessage(),e);    throw new PulsarServerException(e);  }}  }
class C{  public boolean isUpdateRequired(){  return this.updateRequired;}  }
class C{  private void clean(){  SREntry entry=(SREntry)fReferenceQueue.poll();  while (entry != null) {    removeEntry(entry);    entry=(SREntry)fReferenceQueue.poll();  }}  }
class C{  public static void d(String tag,String msg){  if (sLevel > LEVEL_DEBUG) {    return;  }  Log.d(tag,msg);}  }
class C{  static boolean isSystemWindows(){  return SYSTEM_SEPARATOR == WINDOWS_SEPARATOR;}  }
class C{  public Product(){  n=0;  value=1;}  }
class C{  public WallGetByIdQuery copyHistoryDepth(Integer value){  return unsafeParam("copy_history_depth",value);}  }
class C{  public BinaryHttpResponseHandler(String[] allowedContentTypes){  this();  mAllowedContentTypes=allowedContentTypes;}  }
class C{  public grammaticalityEstimator(String sText,int iMinChar,int iMaxChar,int iCharWindow,int iMinWord,int iMaxWord,int iWordWindow){  iMinCharNGram=iMinChar;  iMaxCharNGram=iMaxChar;  iMinWordNGram=iMinWord;  iMaxWordNGram=iMaxWord;  iWordDist=iWordWindow;  iCharDist=iCharWindow;  DistroDocs=new TreeMap<Integer,DistributionDocument>();  DistroWordDocs=new TreeMap<Integer,DistributionWordDocument>();  FullTextDataString=sText;  for (int iCnt=iMinCharNGram; iCnt <= iMaxCharNGram; iCnt++) {    DistroDocs.put(iCnt,new DistributionDocument(iCharDist,iCnt));  }  for (int iCnt=iMinWordNGram; iCnt <= iMaxWordNGram; iCnt++) {    DistroWordDocs.put(iCnt,new DistributionWordDocument(iWordDist,iCnt));  }}  }
class C{  public static WxUserGroupResult fromJson(String json) throws JsonParseException, JsonMappingException, IOException {  ObjectMapper mapper=new ObjectMapper();  return mapper.readValue(json,WxUserGroupResult.class);}  }
class C{  @Deprecated public void onSuccess(int statusCode,Header[] headers,String content){  onSuccess(statusCode,content);}  }
class C{  public static long calculateDifferentSecond(long startTimeMillis,long endTimeMillis){  return calculateDifference(startTimeMillis,endTimeMillis,DifferenceMode.Second);}  }
class C{  public EntityQuery filterByDate(){  this.filterByDate=true;  this.filterByDateMoment=null;  this.filterByFieldNames=null;  return this;}  }
class C{  public Node<K,V> first(){  Node<K,V> node=this;  Node<K,V> child=node.left;  while (child != null) {    node=child;    child=node.left;  }  return node;}  }
class C{  private Map<String,List<ChartObject>> assembleData(Map<String,Integer> data){  Map<String,String> values=new HashMap<>();  data.keySet().stream().forEach(null);  ChartObject chartObject=new ChartObject();  chartObject.setValues(values);  Map<String,List<ChartObject>> result=new HashMap<>();  result.put(RESULT,Collections.singletonList(chartObject));  return result;}  }
class C{  private void addDynamicDimensionValues(DataQueryParams params,Grid grid){  if (params.getDataDimensionAndFilterOptions().isEmpty() && !params.isSkipData()) {    Map<String,Double> aggregatedDataMap=getAggregatedDataValueMap(DataQueryParams.newBuilder(params).withIncludeNumDen(false).build());    for (    Map.Entry<String,Double> entry : aggregatedDataMap.entrySet()) {      Double value=params.isSkipRounding() ? entry.getValue() : MathUtils.getRounded(entry.getValue());      grid.addRow();      grid.addValues(entry.getKey().split(DIMENSION_SEP));      grid.addValue(value);      if (params.isIncludeNumDen()) {        grid.addNullValues(3);      }    }  }}  }
class C{  protected ShortMessage(byte[] data){  super(data);}  }
class C{  public void clear(){  this.point=null;  this.normal=null;  this.distance=0.0;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_TOGGLE_SKILL_TURNED_OFF(String value0){  return new SM_SYSTEM_MESSAGE(1300051,value0);}  }
class C{  private boolean canChangeSelfIntro(Player activePlayer,String newSelfIntro){  return isValidSelfIntro(newSelfIntro);}  }
class C{  @Override public void revertToDefaultValue(){  if (wktPanel != null) {    wktPanel.revertToDefaultValue();  }}  }
class C{  public void lockUserInput(){  locked=true;  statusbar.setText1("");  statusbar.setText2("Busy...");  searchManager.getFindDialogAsToolBar().setEnableCritical(false);  if (bottomToolBar != null)   bottomToolBar.setEnabled(false);  getCommandManager().setEnableCritical(false);  setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));}  }
class C{  public JsonArray add(boolean value){  values.add(Json.value(value));  return this;}  }
class C{  public ResourceNameValidator exist(){  myExist=true;  myUnique=false;  return this;}  }
class C{  @Override public long flushAndSync() throws IOException {  checkClosedOrInError("flushAndSync");  LOG.debug("FlushAndSync Started");  long highestTransactionId=0;  BKLogSegmentWriter writer=getCachedLogWriter();  if (null != writer) {    highestTransactionId=Math.max(highestTransactionId,FutureUtils.result(writer.commit()));    LOG.debug("FlushAndSync Completed");  } else {    LOG.debug("FlushAndSync Completed - Nothing to Flush");  }  return highestTransactionId;}  }
class C{  public ReplaceDialog(JTextComponent text,FindReplaceActions finderActions){  super(ActionUtils.getFrameFor(text),false);  initComponents();  registerKeyAction(this);  textComponent=text;  finder=finderActions;  textComponent.addCaretListener(this);  setLocationRelativeTo(text.getRootPane());}  }
class C{  public static boolean launchSigninPromoIfNeeded(final Activity activity){  ChromePreferenceManager preferenceManager=ChromePreferenceManager.getInstance(activity);  if (MultiWindowUtils.getInstance().isMultiWindow(activity))   return false;  if (!preferenceManager.getShowSigninPromo())   return false;  preferenceManager.setShowSigninPromo(false);  String lastSyncName=PrefServiceBridge.getInstance().getSyncLastAccountName();  if (SigninManager.getAndroidSigninPromoExperimentGroup() < 0 || ChromeSigninController.get(activity).isSignedIn() || !TextUtils.isEmpty(lastSyncName)) {    return false;  }  SigninPromoScreen promoScreen=new SigninPromoScreen(activity);  promoScreen.show();  preferenceManager.setSigninPromoShown();  return true;}  }
class C{  public Pair<Integer,Integer> writeOverlapGraph(Writer writer) throws IOException, CanceledException {  final NodeArray<String> names=new NodeArray<>(overlapGraph);  final NodeArray<String> sequences=new NodeArray<>(overlapGraph);  for (Node v=overlapGraph.getFirstNode(); v != null; v=v.getNext()) {    int i=(Integer)v.getInfo();    sequences.set(v,alignment.getLane(i).getBlock());    names.set(v,Basic.getFirstWord(alignment.getLane(i).getName()));  }  final Map<String,NodeArray<?>> label2nodes=new TreeMap<>();  label2nodes.put("label",names);  label2nodes.put("sequence",sequences);  final EdgeArray<Integer> overlap=new EdgeArray<>(overlapGraph);  for (Edge e=overlapGraph.getFirstEdge(); e != null; e=e.getNext()) {    overlap.set(e,(Integer)e.getInfo());  }  final Map<String,EdgeArray<?>> label2edges=new TreeMap<>();  label2edges.put("label",null);  label2edges.put("overlap",overlap);  overlapGraph.writeGML(writer,"Overlap graph generated by MEGAN6",true,alignment.getName(),1,label2nodes,label2edges);  return new Pair<>(overlapGraph.getNumberOfNodes(),overlapGraph.getNumberOfEdges());}  }
class C{  public JSONException syntaxError(String message){  return new JSONException(message + this.toString());}  }
class C{  private boolean considerTaskExecution(int keyCode){  if (keyCode == Config.HALT_TASK && config.isEnabledHaltingKeyPressed()) {    currentKeyChain.getKeys().clear();    haltAllTasks();    return true;  }  if (disablingFunction.apply(null)) {    return true;  }  UserDefinedAction action=actionMap.get(currentKeyChain);  if (action != null) {    action.setInvoker(TaskActivation.newBuilder().withHotKey(currentKeyChain.clone()).build());    action.setInvokingKeyChain(currentKeyChain.clone());  }  return startExecutingAction(action);}  }
class C{  public static byte[] toByteArray(Reader input) throws IOException {  return toByteArray(input,Charset.defaultCharset());}  }
class C{  public void onBitmapRendered(PagePart part){  if (part.isThumbnail()) {    cacheManager.cacheThumbnail(part);  } else {    cacheManager.cachePart(part);  }  redraw();}  }
class C{  @Override public void redoAction(UndoInterface undoRedoObject){  if ((textField != null) && (undoRedoObject != null)) {    if (undoRedoObject.getNewValue() instanceof String) {      String newValue=(String)undoRedoObject.getNewValue();      textField.setText(newValue);    }  }}  }
class C{  public static JsonValue parse(String string){  if (string == null) {    throw new NullPointerException("string is null");  }  DefaultHandler handler=new DefaultHandler();  new JsonParser(handler).parse(string);  return handler.getValue();}  }
class C{  public static boolean isMainThread(){  return sMainThread == Thread.currentThread();}  }
class C{  @NonNull public Builder popTo(@NonNull Object state){  while (!isEmpty() && !peek().equals(state)) {    pop();  }  checkArgument(!isEmpty(),String.format("%s not found in history",state));  return this;}  }
class C{  public void reinitialiseNode(int nodeId){  this.zwaveNodes.remove(nodeId);  addNode(nodeId);}  }
class C{  public NaturalRanking(NaNStrategy nanStrategy,RandomGenerator randomGenerator){  super();  this.nanStrategy=nanStrategy;  this.tiesStrategy=TiesStrategy.RANDOM;  randomData=RandomDataGenerator.of(randomGenerator);}  }
class C{  public final void fatal(final Object o,final Throwable t){  log(Level.FATAL,o,t);}  }
class C{  final public void disable_tracing(){}  }
class C{  @Override public boolean checkNeedRefresh(){  return view.checkNeedRefresh();}  }
class C{  @Override public boolean equals(Object dataTag){  if (dataTag instanceof AbstractTagCacheObject) {    return this.id.equals(((AbstractTagCacheObject)dataTag).getId());  } else {    return false;  }}  }
class C{  @Override public boolean equals(Object that){  if (this == that) {    return true;  }  if (that == null) {    return false;  }  if (getClass() != that.getClass()) {    return false;  }  SysUser other=(SysUser)that;  return (this.getId() == null ? other.getId() == null : this.getId().equals(other.getId())) && (this.getAccount() == null ? other.getAccount() == null : this.getAccount().equals(other.getAccount())) && (this.getPassword() == null ? other.getPassword() == null : this.getPassword().equals(other.getPassword()))&& (this.getPhone() == null ? other.getPhone() == null : this.getPhone().equals(other.getPhone()))&& (this.getSex() == null ? other.getSex() == null : this.getSex().equals(other.getSex()))&& (this.getUserName() == null ? other.getUserName() == null : this.getUserName().equals(other.getUserName()))&& (this.getAvatar() == null ? other.getAvatar() == null : this.getAvatar().equals(other.getAvatar()))&& (this.getUserType() == null ? other.getUserType() == null : this.getUserType().equals(other.getUserType()))&& (this.getDeptId() == null ? other.getDeptId() == null : this.getDeptId().equals(other.getDeptId()))&& (this.getLocked() == null ? other.getLocked() == null : this.getLocked().equals(other.getLocked()))&& (this.getEnable() == null ? other.getEnable() == null : this.getEnable().equals(other.getEnable()))&& (this.getRemark() == null ? other.getRemark() == null : this.getRemark().equals(other.getRemark()))&& (this.getCreateTime() == null ? other.getCreateTime() == null : this.getCreateTime().equals(other.getCreateTime()))&& (this.getCreateBy() == null ? other.getCreateBy() == null : this.getCreateBy().equals(other.getCreateBy()))&& (this.getUpdateTime() == null ? other.getUpdateTime() == null : this.getUpdateTime().equals(other.getUpdateTime()))&& (this.getUpdateBy() == null ? other.getUpdateBy() == null : this.getUpdateBy().equals(other.getUpdateBy()));}  }
class C{  protected DirectoryWalker(){  this(null,-1);}  }
class C{  public void clear(){  pointList.clear();  this.fireTableDataChanged();}  }
class C{  public static String toREditRate(BigFraction editRate){  return String.format("%s/%s",String.valueOf(editRate.getNumeratorAsLong()),String.valueOf(editRate.getDenominatorAsLong()));}  }
class C{  private void validateFields(){  String url=urlCombo.getText();  if (url.length() == 0) {    setErrorMessage(null);    setPageComplete(false);    return;  }  try {    new SVNUrl(url);  } catch (  MalformedURLException e) {    setErrorMessage(Policy.bind("ConfigurationWizardMainPage.invalidUrl",e.getMessage()));    setPageComplete(false);    return;  }  setErrorMessage(null);  setPageComplete(true);}  }
class C{  public static boolean hasAny(Intent intent,String... extras){  for (  String extra : extras) {    if (intent.hasExtra(extra)) {      return true;    }  }  return false;}  }
class C{  public void startSubreport(String subreport){  currentTest.get().startSubreport(subreport);}  }
class C{  @VisibleForTesting int approximateBinarySearch(long searchX,int startIndex,int endIndex,boolean preferStart,int searchRange){  if (mData.isEmpty()) {    return 0;  }  long startValue=mData.get(startIndex).getX();  if (searchX <= startValue) {    return startIndex;  }  long endValue=mData.get(endIndex).getX();  if (searchX >= endValue) {    return endIndex;  }  if (endIndex - startIndex <= searchRange) {    return preferStart ? startIndex : endIndex;  }  if (searchRange == 0 && endIndex - startIndex == 1) {    long distanceToStart=searchX - startValue;    long distanceToEnd=endValue - searchX;    if (distanceToStart < distanceToEnd) {      return startIndex;    } else {      return endIndex;    }  }  int mid=(startIndex + endIndex) / 2;  long midX=mData.get(mid).getX();  if (midX < searchX) {    return approximateBinarySearch(searchX,mid,endIndex,preferStart,searchRange);  } else   if (midX > searchX) {    return approximateBinarySearch(searchX,startIndex,mid,preferStart,searchRange);  } else {    return mid;  }}  }
class C{  public void addColumn(String name,Class type){  throw new UnsupportedOperationException();}  }
class C{  public static FactorialLog create(){  return new FactorialLog(0,null);}  }
class C{  public final void addChangeListener(ChangeListener listener){  if (!listeners.contains(listener))   listeners.add(listener);}  }
class C{  public boolean lazy_pts(){  return soot.PhaseOptions.getBoolean(options,"lazy-pts");}  }
class C{  public static String createFullSpaceName(String containerName,String spaceName){  return containerName + ":" + spaceName;}  }
class C{  private static ServiceTypeBase toServiceTypeBase(Class cls,boolean needCodebase) throws MarshalException {  if (cls == null)   return null;  SoftReference cref=(SoftReference)serviceMap.get(cls);  ServiceTypeBase stype=null;  if (cref != null)   stype=(ServiceTypeBase)cref.get();  if (stype == null) {    stype=new ServiceTypeBase(new ServiceType(cls,toServiceType(cls.getSuperclass()),toServiceType(cls.getInterfaces())),null);    serviceMap.put(cls,new SoftReference(stype));  }  if (needCodebase && stype.codebase == null)   stype.setCodebase(cls);  return stype;}  }
class C{  public MessagesSendQuery lng(Float value){  return unsafeParam("long",value);}  }
class C{  private boolean dynomiteRedisCheck(){  Jedis dynomiteJedis=new Jedis(LOCAL_ADDRESS,DYNO_PORT,5000);  try {    dynomiteJedis.connect();    if (!dynomiteRedisPing(dynomiteJedis)) {      sleeper.sleepQuietly(1000);      if (!dynomiteRedisPing(dynomiteJedis)) {        logger.warn("Second effort to ping Dynomite failed");        return false;      }    }  } catch (  Exception e) {    logger.warn("Unable to create a Jedis connection to Dynomite" + e.getMessage());    return false;  }  return true;}  }
class C{  protected void drawHole(Canvas c){  if (mChart.isDrawHoleEnabled()) {    float radius=mChart.getRadius();    float holeRadius=radius * (mChart.getHoleRadius() / 100);    PointF center=mChart.getCenterCircleBox();    if (Color.alpha(mHolePaint.getColor()) > 0) {      mBitmapCanvas.drawCircle(center.x,center.y,holeRadius,mHolePaint);    }    if (Color.alpha(mTransparentCirclePaint.getColor()) > 0 && mChart.getTransparentCircleRadius() > mChart.getHoleRadius()) {      int alpha=mTransparentCirclePaint.getAlpha();      float secondHoleRadius=radius * (mChart.getTransparentCircleRadius() / 100);      mTransparentCirclePaint.setAlpha((int)((float)alpha * mAnimator.getPhaseX() * mAnimator.getPhaseY()));      mHoleCirclePath.reset();      mHoleCirclePath.addCircle(center.x,center.y,secondHoleRadius,Path.Direction.CW);      mHoleCirclePath.addCircle(center.x,center.y,holeRadius,Path.Direction.CCW);      mBitmapCanvas.drawPath(mHoleCirclePath,mTransparentCirclePaint);      mTransparentCirclePaint.setAlpha(alpha);    }  }}  }
class C{  @Override protected Object internalPut(Object key,Object value,Transaction txn,long timeToLive,long timeout) throws CacheException {  SpaceMapEntry newEnvelope=buildEnvelope(key,value,null);  try {    SpaceMapEntry oldEntry=(SpaceMapEntry)_spaceProxy.update(newEnvelope,txn,timeToLive,timeout,UpdateModifiers.UPDATE_OR_WRITE);    Object envValue=null;    if (oldEntry != null) {      envValue=oldEntry.getValue();      if (_isVersioned)       _entryInfos.setEntryVersion(envValue,key,oldEntry.getVersion());    }    if (_isVersioned)     _entryInfos.setEntryVersion(value,key,newEnvelope.getVersion());    return envValue;  } catch (  OperationTimeoutException e) {    throw new CacheTimeoutException(key);  }catch (  Exception e) {    throw new SpaceCacheException("Failed to put value in space cache",e);  }}  }
class C{  public long increaseItemCount(long count){  if (count <= 0) {    return 0;  }  long cap=itemTemplate.getMaxStackCount();  long addCount=this.itemCount + count > cap ? cap - this.itemCount : count;  if (addCount != 0) {    this.itemCount+=addCount;    setPersistentState(PersistentState.UPDATE_REQUIRED);  }  return count - addCount;}  }
class C{  public Set<Value> mayAliasesAtExit(Value v){  Set<Value> res=new HashSet<Value>();  for (  Unit u : graph.getTails()) {    Set<Set<Value>> flow=getFlowAfter(u);    for (    Set<Value> set : flow) {      if (set.contains(v))       res.addAll(set);    }  }  return res;}  }
class C{  public boolean start(OutputStream os){  if (os == null)   return false;  boolean ok=true;  closeStream=false;  out=os;  try {    writeString("GIF89a");  } catch (  IOException e) {    ok=false;  }  return started=ok;}  }
class C{  public <T>Future execute(int retries,CompletionCallback<T> callback){  return this.execute(retries,0,callback);}  }
class C{  public PrivilegedTask(Task<T> task){  super(task);}  }
class C{  public static void d(String tag,String msg){  if (isDebug) {    Log.d(tag,msg);  }}  }
class C{  public void destroy(){  mBookmarksModel.removeDeleteObserver(this);  mSnackbarManager.dismissSnackbars(this);}  }
class C{  public Diphone(String name,Sample[] samples,int midPoint){  this.name=name;  this.midPoint=midPoint;  this.samples=samples;  this.unitSizePart1=0;  this.unitSizePart2=0;  for (int i=0; i < midPoint; i++) {    unitSizePart1+=samples[i].getResidualSize();  }  for (int i=midPoint; i < samples.length; i++) {    unitSizePart2+=samples[i].getResidualSize();  }}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public ShortType fullCopy(){  ShortType tree=(ShortType)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static Map<String,Object> createEmailAddress(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> newContext=UtilMisc.makeMapWritable(context);  newContext.put("infoString",newContext.get("emailAddress"));  newContext.remove("emailAddress");  newContext.put("contactMechTypeId","EMAIL_ADDRESS");  return createContactMech(ctx,newContext);}  }
class C{  public void testBoundaryEventSubscrptionsDeletedOnProcessInstanceDelete(){  String deploymentId1=deployBoundarySignalTestProcess();  runtimeService.startProcessInstanceByKey("signalTest");  assertEquals("My Task",taskService.createTaskQuery().singleResult().getName());  String deploymentId2=deployBoundarySignalTestProcess();  ProcessInstance processInstance2=runtimeService.startProcessInstanceByKey("signalTest");  assertEquals(2,taskService.createTaskQuery().count());  assertEquals(2,getAllEventSubscriptions().size());  runtimeService.deleteProcessInstance(processInstance2.getId(),"testing");  assertEquals("My Task",taskService.createTaskQuery().singleResult().getName());  assertEquals(1,getAllEventSubscriptions().size());  runtimeService.signalEventReceived("mySignal");  assertEquals(0,getAllEventSubscriptions().size());  assertEquals("Task after signal",taskService.createTaskQuery().singleResult().getName());  cleanup(deploymentId1,deploymentId2);}  }
class C{  private String readLine() throws IOException {  StringBuilder sbuf=new StringBuilder();  int result;  String line;  do {    result=in.readLine(buf,0,buf.length);    if (result != -1) {      sbuf.append(new String(buf,0,result,encoding));    }  } while (result == buf.length);  if (sbuf.length() == 0) {    return null;  }  int len=sbuf.length();  if (len >= 2 && sbuf.charAt(len - 2) == '\r') {    sbuf.setLength(len - 2);  } else   if (len >= 1 && sbuf.charAt(len - 1) == '\n') {    sbuf.setLength(len - 1);  }  return sbuf.toString();}  }
class C{  private void writeEscUTF16(String s,int start,int length,boolean isAttVal) throws SAXException {  String subString=s.substring(start,start + length);  write(StringEscapeUtils.escapeHtml4(subString));}  }
class C{  private Cursor queryImgDB(Uri contentStore){  return this.cordova.getActivity().getContentResolver().query(contentStore,new String[]{MediaStore.Images.Media._ID},null,null,null);}  }
class C{  protected ForkProcessException newForkProcessException(Throwable t){  return new ForkProcessException("Failed to start process [" + getProcessArgs() + "]",t);}  }
class C{  public static double exactBinomial(int k,int n,double p){  double total=0.0;  for (int m=k; m <= n; m++) {    double nChooseM=1.0;    for (int r=1; r <= m; r++) {      nChooseM*=(n - r) + 1;      nChooseM/=r;    }    total+=nChooseM * Math.pow(p,m) * Math.pow(1.0 - p,n - m);  }  return total;}  }
class C{  public void removeContainer(ConstraintWidgetContainer container){  ConstraintWidgetContainer parent=(ConstraintWidgetContainer)container.getParent();  if (parent == null) {    return;  }  for (  ConstraintWidget widget : mWidgets.values()) {    widget.disconnectWidget(container);  }  ArrayList<ConstraintWidget> children=new ArrayList<>(container.getChildren());  for (  ConstraintWidget child : children) {    parent.add(child);    child.resetAnchors();    child.setX(child.getX() + container.getX());    child.setY(child.getY() + container.getY());  }  parent.remove(container);  mWidgets.remove(getTag(container));}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  protected SecureSendSMSNotificationQuery message(String value){  return unsafeParam("message",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_CANT_USE_HOUSE_OBJECT_ITEM_CHECK(DescriptionId id){  return new SM_SYSTEM_MESSAGE(1401199,id);}  }
class C{  @SuppressLint("SetTextI18n") private void initView(){  this.handler=new SafeHandler<>(this);  NavigationView nav=(NavigationView)findViewById(R.id.activity_main_navView);  if (Mysplash.getInstance().isLightTheme()) {    nav.inflateMenu(R.menu.activity_main_drawer_light);  } else {    nav.inflateMenu(R.menu.activity_main_drawer_dark);  }  nav.setNavigationItemSelectedListener(this);  View header=nav.getHeaderView(0);  header.setOnClickListener(this);  this.navAvatar=(CircleImageView)header.findViewById(R.id.container_nav_header_avatar);  this.appIcon=(ImageView)header.findViewById(R.id.container_nav_header_appIcon);  Glide.with(this).load(R.drawable.ic_launcher).into(appIcon);  this.navTitle=(TextView)header.findViewById(R.id.container_nav_header_title);  DisplayUtils.setTypeface(this,navTitle);  this.navSubtitle=(TextView)header.findViewById(R.id.container_nav_header_subtitle);  DisplayUtils.setTypeface(this,navSubtitle);  this.navButton=(ImageButton)header.findViewById(R.id.container_nav_header_button);  navButton.setOnClickListener(this);  drawMeAvatar();  drawMeTitle();  drawMeSubtitle();  drawMeButton();  if (AuthManager.getInstance().isAuthorized() && TextUtils.isEmpty(AuthManager.getInstance().getUsername())) {    AuthManager.getInstance().refreshPersonalProfile();  }}  }
class C{  void applyFacets1(XSFacets facets,short presentFacet,short fixedFacet){  try {    applyFacets(facets,presentFacet,fixedFacet,SPECIAL_PATTERN_NONE,fDummyContext);  } catch (  InvalidDatatypeFacetException e) {    throw new RuntimeException("internal error");  }  fIsImmutable=true;}  }
class C{  public byte[] convert(Object source){  ByteArrayOutputStream byteStream=new ByteArrayOutputStream(1024);  try {    GZIPOutputStream gzipStream=new GZIPOutputStream(byteStream);    this.serializer.serialize(source,gzipStream);    gzipStream.close();    return byteStream.toByteArray();  } catch (  Throwable ex) {    throw new SerializationFailedException("Failed to serialize object using " + this.serializer.getClass().getSimpleName(),ex);  }}  }
class C{  @Override public void filter(ClientRequestContext request) throws IOException {  appendRequestId(request.getStringHeaders().getFirst(X_REQUEST_ID_HEADER));  RequestLog.startTiming(CLIENT_TOTAL_TIMER);  request.setProperty(PROPERTY_NANOS,System.nanoTime());}  }
class C{  public CFGToDotGraph(){  setOnePage(true);  setBriefLabels(false);  setShowExceptions(true);  setUnexceptionalControlFlowAttr("color","black");  setExceptionalControlFlowAttr("color","red");  setExceptionEdgeAttr("color","lightgray");  setHeadAttr("fillcolor","gray");  setTailAttr("fillcolor","lightgray");}  }
class C{  public static AllSpacePredicate all(ISpacePredicate... predicates){  return new AllSpacePredicate(predicates);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelDeBuff_A_TO_B(String skillcaster,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200968,skillcaster,skilltarget,skillname);}  }
class C{  public boolean isActive(){  return this.state != null && this.state.equals(AlarmCondition.ACTIVE);}  }
class C{  public BoardAddTopicQuery text(String value){  return unsafeParam("text",value);}  }
class C{  public void removeEdge(Edge edge) throws Exception {  if (EdgeDistros.containsKey(edge))   EdgeDistros.remove(edge);  super.removeEdge(edge);}  }
class C{  @Override public boolean checkCondition(){  return alliance.hasMember(disconnected.getObjectId());}  }
class C{  public void init$Children(){  children=new ASTNode[6];  setChild(new List(),1);  setChild(new List(),2);  setChild(new Opt(),3);  setChild(new List(),5);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonBindingGroupGate_ME_TO_B(String value0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200575,value0,skilltarget,skillname);}  }
class C{  private SM_INIT(byte[] publicRsaKey,byte[] blowfishKey,int sessionId){  super(0x00);  this.sessionId=sessionId;  this.publicRsaKey=publicRsaKey;  this.blowfishKey=blowfishKey;}  }
class C{  public DefaultHibernateSpaceSynchronizationEndpointConfigurer sessionFactory(SessionFactory sessionFactory){  this.sessionFactory=sessionFactory;  return this;}  }
class C{  @Override public String object2Relation(String fieldType){  if (fieldType != null) {    if (fieldType.equals("boolean") || fieldType.equals("java.lang.Boolean")) {      return "integer";    }  }  return null;}  }
class C{  public boolean forall(P2SetVisitor v){  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_PET_CONDITION_UP_02(String value0){  return new SM_SYSTEM_MESSAGE(1400867,value0);}  }
class C{  private void closeStreams(Closeable... streams){  if (null != streams) {    for (    Closeable stream : streams) {      if (null != stream) {        try {          stream.close();        } catch (        IOException e) {          LOG.error("Error while closing stream" + stream);        }      }    }  }}  }
class C{  public void addInsertion(int position,Insertion insert){  setHasNewItems(true);  int insertPosition=calcInsertPosition(position);  if (insertPosition == getItemCount()) {    mInserts.add(insert);    getItems().add(null);  } else {    mInserts.add(insertPosition,insert);    getItems().add(insertPosition,null);  }  updateCounter(insert);  notifyIfNeed();}  }
class C{  public static void writeNBTList(PacketBuffer buf,NBTTagList value){  buf.writeInt(value.tagCount());  for (int i=0; i < value.tagCount(); i++) {    buf.writeNBTTagCompoundToBuffer(value.getCompoundTagAt(i));  }}  }
class C{  private static String limitParagraph(String body){  String returnString=body;  final Pattern pattern=Pattern.compile("((.+?)<br><br>){1,2}");  final Matcher matcher=pattern.matcher(body);  try {    matcher.find();    returnString=matcher.group(0);  } catch (  IllegalStateException e) {    if (e.getMessage().equalsIgnoreCase("No match found")) {      return returnString;    }  }  return returnString;}  }
class C{  public ServiceTestBase(int responseLogLengthLimit){  this.responseLogLengthLimit=responseLogLengthLimit;  logger=getLogger(this.getClass());}  }
class C{  public static String parseColumnType(String typeName,int colSize,int scale){  typeName=typeName.toUpperCase();  if ((typeName.startsWith("INT") || typeName.startsWith("SMALLINT") || typeName.startsWith("TINYINT")|| typeName.startsWith("INTEGER")|| (typeName.startsWith("NUMBER") && scale <= 0)) && colSize < 10) {    return iswrapper ? INT_WRAPPER : INT;  } else   if ((typeName.startsWith("BIGINT") || typeName.startsWith("LONG") || (typeName.startsWith("NUMBER") && scale <= 0)|| typeName.startsWith("INT")) && colSize >= 10) {    return iswrapper ? LONG_WRAPPER : LONG;  } else   if (typeName.startsWith("VARCHAR")) {    return STRING;  } else   if ((typeName.startsWith("NUMBER") || typeName.startsWith("DECIMAL") || typeName.startsWith("NUMERIC")|| typeName.startsWith("DOUBLE")|| typeName.startsWith("FLOAT")) && scale > 0) {    return DECIMAL;  } else   if (typeName.startsWith("TIMESTAMP") || typeName.startsWith("DATETIME")) {    return TIMESTAMP;  } else   if (typeName.startsWith("DATE")) {    return DATE;  } else {    return STRING;  }}  }
class C{  public PreferenceStore(String filename){  myFilename=filename;}  }
class C{  public static boolean isInitialized(Context ctx){  vitamioPackage=ctx.getPackageName();  vitamioLibraryPath=ContextUtils.getDataDir(ctx) + "lib/";  return true;}  }
class C{  public int optInt(String key){  return this.optInt(key,0);}  }
class C{  @Override public void touchNavigatorIcon(Activity a){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    a.finishAfterTransition();  } else {    a.finish();    a.overridePendingTransition(0,R.anim.activity_slide_out_bottom);  }}  }
class C{  public Bitmap put(String key,Bitmap value){  return cache.put(key,value);}  }
class C{  public APIUser(String username){  this.username=username;}  }
class C{  private static String segOnsetCtype(Item seg,String ctype){  Item daughter=seg.getItemAs(Relation.SYLLABLE_STRUCTURE).getParent().getDaughter();  while (daughter != null) {    if ("+".equals(getPhoneFeature(daughter,"vc"))) {      return "0";    }    if (ctype.equals(getPhoneFeature(daughter,"ctype"))) {      return "1";    }    daughter=daughter.getNext();  }  return "0";}  }
class C{  public Builder delayBeforeLoading(int delayInMillis){  this.delayBeforeLoading=delayInMillis;  return this;}  }
class C{  private void throwNotMutableException(){  throw new UnsupportedOperationException("This instance is not mutable");}  }
class C{  public void applyInterpolatedRadii(){  Assert.isTrue(mapObjects != null);  Assert.isTrue(mapObjects.size() > 0);  InternalMapObject min=null, max=null;  for (  InternalMapObject mapObject : mapObjects) {    if (min == null || mapObject.getValue() < min.getValue()) {      min=mapObject;    }    if (max == null || mapObject.getValue() > max.getValue()) {      max=mapObject;    }  }  for (  InternalMapObject mapObject : mapObjects) {    double factor=(mapObject.getValue() - min.getValue()) / (max.getValue() - min.getValue());    int radius=MapUtils.lerp(radiusLow,radiusHigh,factor);    mapObject.setRadius(radius);  }}  }
class C{  public CountClearEntriesSpaceOperationResult(){}  }
class C{  public GroupsGetByIdQuery(VkApiClient client){  super(client,"groups.getById",Utils.buildParametrizedType(List.class,GroupFull.class));}  }
class C{  private void createSpaceXML(String spaceName,JSpaceAttributes spaceAttr) throws com.gigaspaces.config.ConfigurationException {  try {    InputStream spaceSchemaInputStream=null;    boolean schemaFileSetAndExists=false;    String schemaName=spaceAttr.getSchemaName();    String schemaFilePath=null;    if (schemaName != null) {      SchemaProperties schemaProperties=ResourceLoader.findSpaceSchema(schemaName);      spaceSchemaInputStream=schemaProperties.getInputStream();      schemaFilePath=schemaProperties.getFullPath();      if (spaceSchemaInputStream != null)       schemaFileSetAndExists=true; else {        if (_logger.isLoggable(Level.WARNING)) {          _logger.info("The requested space schema <" + schemaName + "> does not exist in the resource bundle");        }      }    }    String fullSpaceName=JSpaceUtilities.createFullSpaceName(_containerName,spaceName);    File spaceFile=new File(m_configDirectory + File.separator + spaceName+ ".xml");    if (spaceFile.exists()) {      if (schemaFileSetAndExists) {        JProperties.setUrlWithSchema(fullSpaceName,spaceAttr.getCustomProperties(),spaceSchemaInputStream);        Logger logger=Logger.getLogger(com.gigaspaces.logger.Constants.LOGGER_CONFIG);        if (logger.isLoggable(Level.FINE)) {          logger.fine("Loaded the requested space schema < " + schemaName + " > to be used for the < "+ spaceName+ " > space configuration.");        }      } else {        JProperties.setUrlWithoutSchema(fullSpaceName,spaceAttr.getCustomProperties(),spaceFile.getPath());      }    } else {      if (m_spaceConfigNode != null && !schemaFileSetAndExists) {        Node spaceNode=m_containerConfigFileDocument.createElement(spaceName);        JSpaceAttributes attr=(JSpaceAttributes)spaceAttr.clone();        Node spaceConfigNode=m_spaceConfigNode.cloneNode(true);        NodeList nList=spaceConfigNode.getChildNodes();        boolean perstNotExist=true;        for (int i=0; i < nList.getLength() && perstNotExist; i++) {          perstNotExist=nList.item(i).getNodeName().equals("persistent") ? false : true;        }        if (perstNotExist && attr.isPersistent()) {          Node persist=m_containerConfigFileDocument.createElement("persistent");          Node perstEnabledClassNode=m_containerConfigFileDocument.createElement(Constants.StorageAdapter.PERSISTENT_ENABLED);          perstEnabledClassNode.appendChild(m_containerConfigFileDocument.createTextNode(Boolean.FALSE.toString()));          persist.appendChild(perstEnabledClassNode);          spaceConfigNode.appendChild(persist);        }        spaceNode.appendChild(spaceConfigNode);        PrintStream propStream=new PrintStream(new FileOutputStream(spaceFile.getPath()));        JSpaceUtilities.domWriter(spaceNode,propStream," ");        propStream.flush();        propStream.close();        String spaceFileURL=spaceFile.getPath();        if (spaceAttr != null) {          if (spaceAttr.getClusterConfigURL() != null && !spaceAttr.getClusterConfigURL().equals(CLUSTER_CONFIG_URL_DEFAULT))           spaceAttr.setClusterConfigURL(spaceAttr.getClusterConfigURL().replace('\\','/'));          SpaceImpl.setConfig(spaceName,_containerName,spaceAttr,spaceFileURL);        }        JProperties.setUrlWithoutSchema(fullSpaceName,spaceAttr.getCustomProperties(),spaceFileURL);        if (_logger.isLoggable(Level.INFO)) {          _logger.info("XML configuration file " + spaceName + ".xml created successfully");        }      } else       if (schemaFileSetAndExists) {        JProperties.setUrlWithSchema(fullSpaceName,spaceAttr.getCustomProperties(),spaceSchemaInputStream);        Properties spaceProps=JProperties.getSpaceProperties(fullSpaceName);        if (_url != null && _clusterSchema != null && !isFirstSpaceCreated)         spaceProps.setProperty(fullSpaceName + '.' + SPACE_CONFIG+ '.'+ IS_CLUSTER_SPACE_PROP,Boolean.TRUE.toString());        Logger logger=Logger.getLogger(com.gigaspaces.logger.Constants.LOGGER_CONFIG);        if (logger.isLoggable(Level.FINE)) {          logger.fine("Loaded the requested space schema < " + spaceAttr.getSchemaName() + " > to be used for the < "+ spaceName+ " > space configuration.");        }      } else       JProperties.setSpaceProperties(fullSpaceName,new Properties());    }    if (schemaFilePath != null) {      Properties spaceProperties=JProperties.getSpaceProperties(fullSpaceName);      spaceProperties.put(Constants.Schemas.SCHEMA_FILE_PATH,schemaFilePath);      JProperties.setSpaceProperties(fullSpaceName,spaceProperties);    }    putDCacheProperites(spaceName);  } catch (  com.gigaspaces.config.ConfigurationException sce) {    throw sce;  }catch (  Exception ex) {    if (_logger.isLoggable(Level.WARNING)) {      _logger.log(Level.WARNING,ex.toString() + " exception occurred during < " + spaceName+ " > space configuration setup.",ex);    }  }}  }
class C{  public static boolean isNameStart(int c){  return c < 0x10000 && (CHARS[c] & MASK_NAME_START) != 0;}  }
class C{  private void error(String message,Object... args){  if (input == null) {    errors.add(Issue.create(Location.TOP_LEVEL,message,args));  } else {    errors.add(Issue.create(input.location(),message,args));  }}  }
class C{  public static String readFileToString(File file,Charset encoding) throws IOException {  InputStream in=null;  try {    in=openInputStream(file);    return IOUtils.toString(in,Charsets.toCharset(encoding));  }  finally {    IOUtils.closeQuietly(in);  }}  }
class C{  public RequestHandle put(Context context,String url,HttpEntity entity,String contentType,ResponseHandlerInterface responseHandler){  return sendRequest(httpClient,httpContext,addEntityToRequestBase(new HttpPut(url),entity),contentType,responseHandler,context);}  }
class C{  protected void merge(Object in1,Object in2,Object out){  FlowSet inSet1=((FlowSet)in1).clone(), inSet2=((FlowSet)in2).clone(), outSet=(FlowSet)out;  inSet1.union(inSet2,outSet);}  }
class C{  public WMSEnvVarValues(){}  }
class C{  private String gaps(int n){  StringBuilder buf=new StringBuilder();  for (; n > 0; n--) {    buf.append('-');  }  return buf.toString();}  }
class C{  private EmoResponse toEmoResponse(ClientResponse clientResponse){  return new JerseyEmoResponse(clientResponse);}  }
class C{  public static void writeSchema(String outputPath,Schema schema,JavaSparkContext sc) throws IOException {  writeStringToFile(outputPath,schema.toString(),sc);}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public SearchQueryBinding(TupleSet ts,String field){  this(ts,field,new PrefixSearchTupleSet());}  }
class C{  protected void drawLabel(Canvas c,float x,float y,String label){  c.drawText(label,x,y,mLabelPaint);}  }
class C{  public static boolean lowMemoryCondition(){  return MaryUtils.availableMemory() < lowMemoryThreshold();}  }
class C{  public static void createAircraft(AirMapAircraft aircraft,@Nullable AirMapCallback<AirMapAircraft> callback){  PilotService.createAircraft(aircraft,callback);}  }
class C{  public boolean containsGroup(Group group){  return containsGroup(group.getName());}  }
class C{  @Override public Text splitText(int offset) throws DOMException {  if (isReadOnly()) {    throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NO_MODIFICATION_ALLOWED_ERR",null));  }  if (needsSyncData()) {    synchronizeData();  }  if (offset < 0 || offset > data.length()) {    throw new DOMException(DOMException.INDEX_SIZE_ERR,DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"INDEX_SIZE_ERR",null));  }  Text newText=getOwnerDocument().createTextNode(data.substring(offset));  setNodeValue(data.substring(0,offset));  Node parentNode=getParentNode();  if (parentNode != null) {    parentNode.insertBefore(newText,nextSibling);  }  return newText;}  }
class C{  public void addExceptionIfAbsent(SootClass e){  if (!throwsException(e))   addException(e);}  }
class C{  public static Zmat aib(Zmat A,Zmat B) throws JampackException {  Zludpp LU;  A.getProperties();  B.getProperties();  if (A.nr != A.nc)   throw new JampackException("Rectangular matrix.");  if (A.nr != B.nr)   throw new JampackException("Inconsistent dimensions.");  if (Parameters.History) {    A.clean();    if (A.LU == null)     A.LU=new Zludpp(A);    LU=A.LU;  } else   LU=new Zludpp(A);  Zmat X=new Zmat(B);  Pivot.row(X,LU.pvt);  return Solve.aib(LU.U,Solve.aib(LU.L,X));}  }
class C{  protected FalseFileFilter(){}  }
class C{  @Override public synchronized boolean canUnsubscribe(Consumer consumer){  return (consumers.size() == 1) && Objects.equals(consumer,activeConsumer.get());}  }
class C{  public boolean print_debug(){  return soot.PhaseOptions.getBoolean(options,"print-debug");}  }
class C{  public static void expandLetters(String letters,WordRelation wordRelation){  letters=letters.toLowerCase();  char c;  for (int i=0; i < letters.length(); i++) {    c=letters.charAt(i);    if (isDigit(c)) {      wordRelation.addWord(digit2num[c - '0']);    } else     if (letters.equals("a")) {      wordRelation.addWord("_a");    } else {      wordRelation.addWord(String.valueOf(c));    }  }}  }
class C{  public Iterator aggregatedTuples(int row){  return new AggregatedIterator(row);}  }
class C{  public PhotosGetQueryWithExtended feed(Integer value){  return unsafeParam("feed",value);}  }
class C{  @SuppressLint("InflateParams") @Override public Dialog onCreateDialog(Bundle savedInstanceState){  Mysplash.getInstance().setActivityInBackstage(true);  View view=LayoutInflater.from(getActivity()).inflate(R.layout.dialog_stats,null,false);  initWidget(view);  service.requestStats(photo.id,this);  return new AlertDialog.Builder(getActivity()).setView(view).create();}  }
class C{  public VideoRemoveTagQuery(VkApiClient client,UserActor actor,int tagId,int videoId){  super(client,"video.removeTag",OkResponse.class);  accessToken(actor.getAccessToken());  tagId(tagId);  videoId(videoId);}  }
class C{  public boolean isDeletedByOwnTxn(){  return m_DeletedByOwnTxn;}  }
class C{  public Lexicon removeLowDfWords(int minDf){  int id=0;  Hashtable<Integer,Integer> translation=new Hashtable<Integer,Integer>();  for (  Entry<Integer,Word> e : idHash.entrySet()) {    Word w=e.getValue();    if (w.df < minDf) {      continue;    }    translation.put(w.id,id);    ++id;  }  return map(translation);}  }
class C{  public FilterSpec addExpression(FilterSpec expr){  if (expressions == null) {    expressions=new ArrayList<>();  }  expressions.add((FilterSpec)expr);  return this;}  }
class C{  public boolean hasNext(){  return iterator.hasNext() || pos < top;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_PARTY_ATTACK(String value0,int num2,String value1){  return new SM_SYSTEM_MESSAGE(1220000,value0,num2,value1);}  }
class C{  @Override public long limit(){  return limit;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_StatUp_A_TO_ME(String skillcaster,String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200724,skillcaster,value0,skillname);}  }
class C{  public synchronized void readUnlock(){  activeReaders--;  if (activeReaders == 0)   notifyAll();}  }
class C{  private void initBulkProcessor(){  this.bulkProcessor=BulkProcessor.builder(client,createBulkProcessorListener()).setName(bulkProcessorName).setBulkActions(bulkActions).setBulkSize(new ByteSizeValue(bulkSize,ByteSizeUnit.GB)).setFlushInterval(TimeValue.timeValueSeconds(flushInterval)).setConcurrentRequests(concurrent).build();  log.debug("initBulkSettings() - BulkProcessor created.");}  }
class C{  protected DatabaseGetFacultiesQuery universityId(int value){  return unsafeParam("university_id",value);}  }
class C{  public static InputStream toInputStream(String input,Charset encoding){  return new ByteArrayInputStream(input.getBytes(Charsets.toCharset(encoding)));}  }
class C{  public static String returnWindowsFileAppropriateName(String nameOfFile){  return nameOfFile.replaceAll(" ","").replace(":","-");}  }
class C{  public synchronized boolean addMacro(int macroPosition,String macroXML){  if (macrosses.containsKey(macroPosition)) {    macrosses.remove(macroPosition);    macrosses.put(macroPosition,macroXML);    return false;  }  macrosses.put(macroPosition,macroXML);  return true;}  }
class C{  public <T>Future execute(int retries,int interval,CompletionCallback<T> callback){  if (callback == null)   throw new IllegalArgumentException("Callback cannot be null");  TaskManagerImpl<T> taskManager=new TaskManagerImpl<>(this.executor_,this.task_,retries,interval,callback);  this.executor_.execute(taskManager);  return new Future(taskManager);}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  protected Expanded doExpand(Record record,long fullConsistencyTimestamp,long compactionConsistencyTimeStamp,MutableIntrinsics intrinsics,boolean ignoreRecent) throws RestartException {  List<UUID> keysToDelete=Lists.newArrayList();  DeltasArchive deltasArchive=new DeltasArchive();  Map.Entry<UUID,Compaction> compactionEntry=findEffectiveCompaction(record.passOneIterator(),keysToDelete,compactionConsistencyTimeStamp);  if (compactionEntry != null && compactionEntry.getValue().getCompactedDelta() == null) {    return _legacyCompactor.doExpand(record,fullConsistencyTimestamp,intrinsics,ignoreRecent,compactionEntry);  }  List<UUID> compactionKeysToDelete=Lists.newArrayList(keysToDelete.iterator());  PeekingIterator<Map.Entry<UUID,DeltaTagPair>> deltaIterator=Iterators.peekingIterator(deltaIterator(record.passTwoIterator(),compactionEntry));  UUID compactionKey=null;  Compaction compaction=null;  UUID cutoffId=null;  UUID initialCutoff=null;  Delta cutoffDelta=null;  Delta initialCutoffDelta=null;  boolean compactionChanged=false;  int numPersistentDeltas=0;  long numDeletedDeltas=0;  boolean deleteDeltasForCompaction;  boolean createNewCompaction=true;  Resolver resolver;  if (compactionEntry == null) {    resolver=new DefaultResolver(intrinsics);  } else {    deleteDeltasForCompaction=TimeUUIDs.getTimeMillis(compactionEntry.getKey()) < compactionConsistencyTimeStamp;    createNewCompaction=deleteDeltasForCompaction;    compactionKey=compactionEntry.getKey();    compaction=compactionEntry.getValue();    numDeletedDeltas=compaction.getCount();    resolver=new DefaultResolver(intrinsics,compaction);    cutoffId=compaction.getCutoff();    initialCutoff=compaction.getCutoff();    while (deltaIterator.hasNext() && TimeUUIDs.compare(deltaIterator.peek().getKey(),cutoffId) <= 0) {      if (!deleteDeltasForCompaction) {        deltaIterator.next();        continue;      }      Map.Entry<UUID,DeltaTagPair> deltaEntry=deltaIterator.next();      keysToDelete.add(deltaEntry.getKey());      numPersistentDeltas++;    }    assert (compaction.getCompactedDelta().isConstant()) : "Compacted delta was not a literal";    cutoffDelta=compaction.getCompactedDelta();    initialCutoffDelta=compaction.getCompactedDelta();  }  List<UUID> compactibleChangeIds=Lists.newArrayList();  while (createNewCompaction && deltaIterator.hasNext() && TimeUUIDs.getTimeMillis(deltaIterator.peek().getKey()) < fullConsistencyTimestamp) {    Map.Entry<UUID,DeltaTagPair> entry=deltaIterator.next();    resolver.update(entry.getKey(),entry.getValue().delta,entry.getValue().tags);    compactibleChangeIds.add(entry.getKey());    deltasArchive.addDeltaArchive(entry.getKey(),entry.getValue().delta);    numPersistentDeltas++;  }  if (!compactibleChangeIds.isEmpty()) {    Resolved resolved=resolver.resolved();    compactionKey=TimeUUIDs.newUUID();    compaction=new Compaction(resolved.getIntrinsics().getVersion(),resolved.getIntrinsics().getFirstUpdateAtUuid(),resolved.getIntrinsics().getLastUpdateAtUuid(),resolved.getIntrinsics().getSignature(),resolved.getIntrinsics().getLastMutateAtUuid(),resolved.getLastMutation(),resolved.getConstant(),resolved.getLastTags());    cutoffId=compaction.getCutoff();    cutoffDelta=resolved.getConstant();    compactionChanged=true;    resolver=new DefaultResolver(intrinsics,compaction);  }  PendingCompaction pendingCompaction=(compactionChanged || !keysToDelete.isEmpty()) ? new PendingCompaction(compactionKey,compaction,cutoffId,initialCutoff,cutoffDelta,initialCutoffDelta,keysToDelete,compactionKeysToDelete,deltasArchive.deltasToArchive) : null;  try {    updateSizeCounter(pendingCompaction);  } catch (  DeltaHistorySizeExceededException ex) {    assert pendingCompaction != null : "Unexpected NPE for pendingCompaction";    pendingCompaction.getDeltasToArchive().clear();  }  while (deltaIterator.hasNext()) {    Map.Entry<UUID,DeltaTagPair> entry=deltaIterator.next();    if (ignoreRecent && TimeUUIDs.getTimeMillis(entry.getKey()) >= fullConsistencyTimestamp) {      break;    }    resolver.update(entry.getKey(),entry.getValue().delta,entry.getValue().tags);    numPersistentDeltas++;  }  return new Expanded(resolver.resolved(),pendingCompaction,numPersistentDeltas,numDeletedDeltas);}  }
class C{  public void pow(final double a,final double[] operand,final int operandOffset,final double[] result,final int resultOffset){  final double[] function=new double[1 + order];  if (a == 0) {    if (operand[operandOffset] == 0) {      function[0]=1;      double infinity=Double.POSITIVE_INFINITY;      for (int i=1; i < function.length; ++i) {        infinity=-infinity;        function[i]=infinity;      }    } else     if (operand[operandOffset] < 0) {      Arrays.fill(function,Double.NaN);    }  } else {    function[0]=FastMath.pow(a,operand[operandOffset]);    final double lnA=FastMath.log(a);    for (int i=1; i < function.length; ++i) {      function[i]=lnA * function[i - 1];    }  }  compose(operand,operandOffset,function,result,resultOffset);}  }
class C{  @PostConstruct public void init(){  listenerContainer=cacheRegistrationService.registerToAllTags(this,numEvaluationThreads);}  }
class C{  public static int recordSize(Schema sch){  int pos=0;  for (  String fldname : sch.fields())   pos+=Page.maxSize(sch.type(fldname));  return pos < MIN_REC_SIZE ? MIN_REC_SIZE : pos;}  }
class C{  public void outputOrigin(){  out.println("After decoding:");  for (int i=0; i < data_disk_nbr; i++) {    out.printf("data:%d:  ",i);    out.println(check_data[i]);  }}  }
class C{  public static void d(String tag,String msg){  if (LOG_ENABLE && Log.isLoggable(tag,Log.DEBUG)) {    Log.d(tag,buildMsg(msg));  }}  }
class C{  public Record verify(List<DataType> values) throws SchemaException {  return null;}  }
class C{  public void showEmpty(Drawable emptyImageDrawable,String emptyTextContent){  switchState(EMPTY,emptyImageDrawable,emptyTextContent,null,null,Collections.<Integer>emptyList());}  }
class C{  @Override public void processingInstruction(String target,XMLString data,Augmentations augs) throws XNIException {}  }
class C{  public void goToNextColor(){  setColorIndex(getNextColorIndex());}  }
class C{  public JSONObject(Object bean){  this();  this.populateMap(bean);}  }
class C{  public static void export(String type,OutputStream out,JasperPrint jasperPrint) throws JRException {  if (TYPE_XLS.equals(type)) {    SimpleXlsReportConfiguration config=new SimpleXlsReportConfiguration();    config.setDetectCellType(true);    config.setRemoveEmptySpaceBetweenRows(true);    config.setRemoveEmptySpaceBetweenRows(true);    config.setCollapseRowSpan(true);    config.setWhitePageBackground(false);    JRXlsExporter exporter=new JRXlsExporter();    exporter.setExporterInput(new SimpleExporterInput(jasperPrint));    exporter.setExporterOutput(new SimpleOutputStreamExporterOutput(out));    exporter.setConfiguration(config);    exporter.exportReport();  } else   if (TYPE_PDF.equals(type)) {    JRPdfExporter exporter=new JRPdfExporter();    exporter.setExporterInput(new SimpleExporterInput(jasperPrint));    exporter.setExporterOutput(new SimpleOutputStreamExporterOutput(out));    exporter.exportReport();  }}  }
class C{  public PhotosGetOwnerPhotoUploadServerQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public NewsfeedSaveListQuery noReposts(Boolean value){  return unsafeParam("no_reposts",value);}  }
class C{  public byte[] externalize(){  byte[] options=new byte[312];  options[0]=(byte)99;  options[1]=(byte)130;  options[2]=(byte)83;  options[3]=(byte)99;  int position=4;  Enumeration<DHCPOptionsEntry> e=this.optionsTable.elements();  while (e.hasMoreElements()) {    DHCPOptionsEntry entry=e.nextElement();    options[position++]=entry.code;    options[position++]=entry.length;    for (int i=0; i < entry.length; ++i) {      options[position++]=entry.content[i];    }  }  options[position]=(byte)255;  return options;}  }
class C{  private int parseParameter(String parameter,String parameterName) throws BadPaginationException {  if (parameter.equals("")) {    ErrorMessageFormat errorMessage=ErrorMessageFormat.PAGINATION_PARAMETER_MISSING;    LOG.debug(errorMessage.logFormat(parameterName));    throw new BadPaginationException(errorMessage.format(parameterName));  }  try {    return Integer.parseInt(parameter);  } catch (  NumberFormatException ignored) {    ErrorMessageFormat errorMessage=ErrorMessageFormat.PAGINATION_PARAMETER_INVALID;    LOG.debug(errorMessage.logFormat(parameterName,parameter));    throw new BadPaginationException(errorMessage.format(parameterName,parameter));  }}  }
class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  public static Predicate<ApiFilter> isNonAggregatableInFilter(){  return null;}  }
class C{  public VideoDeleteQuery targetId(Integer value){  return unsafeParam("target_id",value);}  }
class C{  public AudioSearchQuery(VkApiClient client,UserActor actor){  super(client,"audio.search",SearchResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public static String base64ToString(final String data){  return ConversionUtils.arrayToString(Base64.decodeBase64(data));}  }
class C{  public void pause(){}  }
class C{  public Vector process(AudioPreProcessor in) throws IllegalArgumentException, IOException {  if (in == null)   throw new IllegalArgumentException("the audio preprocessor must not be a null value");  if (in.getSampleRate() != sampleRate)   throw new IllegalArgumentException("sample rates of inputstream differs from sample rate of the sone processor");  Vector mfcc=new Vector();  int samplesRead=in.append(inputData,hopSize,hopSize);  while (samplesRead == hopSize) {    for (int i=hopSize, j=0; i < windowSize; j++, i++)     inputData[j]=inputData[i];    samplesRead=in.append(inputData,hopSize,hopSize);    mfcc.add(processWindow(inputData,0));  }  return mfcc;}  }
class C{  @Override public DimensionColumnDataChunk[] readDimensionChunks(FileHolder fileReader,int... blockIndexes){  DimensionColumnDataChunk[] dataChunks=new DimensionColumnDataChunk[dimensionColumnChunk.size()];  for (int i=0; i < blockIndexes.length; i++) {    dataChunks[blockIndexes[i]]=readDimensionChunk(fileReader,blockIndexes[i]);  }  return dataChunks;}  }
class C{  public boolean acceptsParent(@NotNull NlComponent layout,@NotNull NlComponent newChild){  return true;}  }
class C{  public boolean contains(ChangeModifiers modifiers){  return super.contains(modifiers);}  }
