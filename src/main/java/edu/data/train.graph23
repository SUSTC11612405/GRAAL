class C{  public static boolean isUsableAuthenticationProvider(AuthnProviderParamsToValidate param,StringBuilder errorString){  String endpoint=null;  int attempts=0;  while (attempts < _MAX_VALIDATION_RETRIES) {    _log.debug("Validation attempt {}",++attempts);    AuthSvcInternalApiClientIterator authSvcClientItr=new AuthSvcInternalApiClientIterator(_authSvcEndPointLocator,_coordinator);    try {      if (authSvcClientItr.hasNext()) {        endpoint=authSvcClientItr.peek().toString();        _log.info("isAuthenticationProvider(): {}",endpoint);        final ClientResponse response=authSvcClientItr.post(URI.create(_URI_VALIDATE_AUTHNPROVIDER.toString()),param);        final int status=response.getStatus();        String errorRaw=response.getEntity(String.class);        _log.debug("Status: {}",status);        _log.debug("Response entity: {}",errorRaw);        if (status == ClientResponse.Status.OK.getStatusCode()) {          return true;        } else         if (status == ClientResponse.Status.BAD_REQUEST.getStatusCode()) {          errorString.append(errorRaw);          return false;        } else {          _log.info("Unexpected response code {}.",status);        }      }    } catch (    Exception e) {      _log.info("Exception connecting to {}. ",endpoint,e);    }  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:47.397 -0400",hash_original_method="DD9093B6630FDA95068771DA019094CE",hash_generated_method="D72ED220325CA7066E9333C435204C50") protected boolean isJdk14Available(){  return isLogLibraryAvailable("Jdk14","org.apache.commons.logging.impl.Jdk14Logger");}  }
class C{  private final boolean subparse(String text,ParsePosition parsePosition,String positivePrefix,String negativePrefix,DigitList digits,boolean isExponent,boolean status[]){  int position=parsePosition.index;  int oldStart=parsePosition.index;  int backup;  boolean gotPositive, gotNegative;  gotPositive=text.regionMatches(position,positivePrefix,0,positivePrefix.length());  gotNegative=text.regionMatches(position,negativePrefix,0,negativePrefix.length());  if (gotPositive && gotNegative) {    if (positivePrefix.length() > negativePrefix.length()) {      gotNegative=false;    } else     if (positivePrefix.length() < negativePrefix.length()) {      gotPositive=false;    }  }  if (gotPositive) {    position+=positivePrefix.length();  } else   if (gotNegative) {    position+=negativePrefix.length();  } else {    parsePosition.errorIndex=position;    return false;  }  status[STATUS_INFINITE]=false;  if (!isExponent && text.regionMatches(position,symbols.getInfinity(),0,symbols.getInfinity().length())) {    position+=symbols.getInfinity().length();    status[STATUS_INFINITE]=true;  } else {    digits.decimalAt=digits.count=0;    char zero=symbols.getZeroDigit();    char decimal=isCurrencyFormat ? symbols.getMonetaryDecimalSeparator() : symbols.getDecimalSeparator();    char grouping=symbols.getGroupingSeparator();    String exponentString=symbols.getExponentSeparator();    boolean sawDecimal=false;    boolean sawExponent=false;    boolean sawDigit=false;    int exponent=0;    int digitCount=0;    backup=-1;    for (; position < text.length(); ++position) {      char ch=text.charAt(position);      int digit=ch - zero;      if (digit < 0 || digit > 9) {        digit=Character.digit(ch,10);      }      if (digit == 0) {        backup=-1;        sawDigit=true;        if (digits.count == 0) {          if (!sawDecimal) {            continue;          }          --digits.decimalAt;        } else {          ++digitCount;          digits.append((char)(digit + '0'));        }      } else       if (digit > 0 && digit <= 9) {        sawDigit=true;        ++digitCount;        digits.append((char)(digit + '0'));        backup=-1;      } else       if (!isExponent && ch == decimal) {        if (isParseIntegerOnly() || sawDecimal) {          break;        }        digits.decimalAt=digitCount;        sawDecimal=true;      } else       if (!isExponent && ch == grouping && isGroupingUsed()) {        if (sawDecimal) {          break;        }        backup=position;      } else       if (!isExponent && text.regionMatches(position,exponentString,0,exponentString.length()) && !sawExponent) {        ParsePosition pos=new ParsePosition(position + exponentString.length());        boolean[] stat=new boolean[STATUS_LENGTH];        DigitList exponentDigits=new DigitList();        if (subparse(text,pos,"",Character.toString(symbols.getMinusSign()),exponentDigits,true,stat) && exponentDigits.fitsIntoLong(stat[STATUS_POSITIVE],true)) {          position=pos.index;          exponent=(int)exponentDigits.getLong();          if (!stat[STATUS_POSITIVE]) {            exponent=-exponent;          }          sawExponent=true;        }        break;      } else {        break;      }    }    if (backup != -1) {      position=backup;    }    if (!sawDecimal) {      digits.decimalAt=digitCount;    }    digits.decimalAt+=exponent;    if (!sawDigit && digitCount == 0) {      parsePosition.index=oldStart;      parsePosition.errorIndex=oldStart;      return false;    }  }  if (!isExponent) {    if (gotPositive) {      gotPositive=text.regionMatches(position,positiveSuffix,0,positiveSuffix.length());    }    if (gotNegative) {      gotNegative=text.regionMatches(position,negativeSuffix,0,negativeSuffix.length());    }    if (gotPositive && gotNegative) {      if (positiveSuffix.length() > negativeSuffix.length()) {        gotNegative=false;      } else       if (positiveSuffix.length() < negativeSuffix.length()) {        gotPositive=false;      }    }    if (gotPositive == gotNegative) {      parsePosition.errorIndex=position;      return false;    }    parsePosition.index=position + (gotPositive ? positiveSuffix.length() : negativeSuffix.length());  } else {    parsePosition.index=position;  }  status[STATUS_POSITIVE]=gotPositive;  if (parsePosition.index == oldStart) {    parsePosition.errorIndex=position;    return false;  }  return true;}  }
class C{  public void startUnRegistration(Context context){  String regId=Preference.getString(context,context.getResources().getString(R.string.shared_pref_regId));  JSONObject requestParams=new JSONObject();  try {    requestParams.put(context.getResources().getString(R.string.shared_pref_regId),regId);  } catch (  JSONException e) {    Log.e(TAG,"Registration ID not retrieved." + e.toString());  }  CommonUtils.clearAppData(context);  CommonUtils.callSecuredAPI(context,Constants.UNREGISTER_ENDPOINT,HTTP_METHODS.POST,requestParams,AgentDeviceAdminReceiver.this,Constants.UNREGISTER_REQUEST_CODE);}  }
class C{  public static boolean process(final Instruction[] flow,final int start,final Processor<Instruction> processor){  final int length=flow.length;  boolean[] visited=new boolean[length];  Arrays.fill(visited,false);  final IntStack stack=new IntStack(length);  stack.push(start);  while (!stack.empty()) {    ProgressManager.checkCanceled();    final int num=stack.pop();    final Instruction instruction=flow[num];    if (!processor.process(instruction)) {      return false;    }    for (    Instruction succ : instruction.allSucc()) {      final int succNum=succ.num();      if (!visited[succNum]) {        visited[succNum]=true;        stack.push(succNum);      }    }  }  return true;}  }
class C{  private void driveIpReconfigStateMachine() throws Exception {  log.info("driving ipreconfig state machine ...");  String localnode_status_key=String.format(IpReconfigConstants.CONFIG_NODESTATUS_KEY,localNodeId);  IpReconfigConstants.NodeStatus localnode_status=IpReconfigConstants.NodeStatus.valueOf(config.getConfig(localnode_status_key));  IpReconfigConstants.NodeStatus target_nodestatus=null;  String base64Encoded_newipinfo=config.getConfig(IpReconfigConstants.CONFIG_IPINFO_KEY);  newIpinfo=ClusterIpInfo.deserialize(Base64.decodeBase64(base64Encoded_newipinfo.getBytes(UTF_8)));  if (!newIpinfo.equals(localIpinfo)) {switch (localnode_status) {case None:      IpReconfigUtil.writeIpinfoFile(localIpinfo,IpReconfigConstants.OLDIP_PATH);    IpReconfigUtil.writeIpinfoFile(newIpinfo,IpReconfigConstants.NEWIP_PATH);  String strExpirationTime=config.getConfig(IpReconfigConstants.CONFIG_EXPIRATION_KEY);FileUtils.writeObjectToFile(strExpirationTime,IpReconfigConstants.NEWIP_EXPIRATION);target_nodestatus=IpReconfigConstants.NodeStatus.LOCALAWARE_LOCALPERSISTENT;setNodeStatus(target_nodestatus.toString());break;case LOCALAWARE_LOCALPERSISTENT:target_nodestatus=IpReconfigConstants.NodeStatus.LOCALAWARE_CLUSTERPERSISTENT;if (isReadyForNextStatus(localnode_status,target_nodestatus)) {setNodeStatus(target_nodestatus.toString());}break;case LOCALAWARE_CLUSTERPERSISTENT:target_nodestatus=IpReconfigConstants.NodeStatus.CLUSTERACK_CLUSTERPERSISTENT;if (isReadyForNextStatus(localnode_status,target_nodestatus)) {setNodeStatus(target_nodestatus.toString());}break;case CLUSTERACK_CLUSTERPERSISTENT:target_nodestatus=IpReconfigConstants.NodeStatus.LOCAL_SUCCEED;if (isReadyForNextStatus(localnode_status,target_nodestatus)) {haltNode(config.getConfig(IpReconfigConstants.CONFIG_POST_OPERATION_KEY));}break;default :log.error("unexpected node status before reboot: {}",localnode_status);setFailed(IpReconfigConstants.ERRSTR_MANUAL_CONFIGURED);break;}} else {switch (localnode_status) {case LOCALAWARE_CLUSTERPERSISTENT:log.info("jumping to ClusterACK_ClusterPersistent status...");setNodeStatus(IpReconfigConstants.NodeStatus.CLUSTERACK_CLUSTERPERSISTENT.toString());break;case CLUSTERACK_CLUSTERPERSISTENT:setNodeStatus(IpReconfigConstants.NodeStatus.LOCAL_SUCCEED.toString());break;case LOCAL_SUCCEED:target_nodestatus=IpReconfigConstants.NodeStatus.CLUSTER_SUCCEED;if (isReadyForNextStatus(localnode_status,target_nodestatus)) {assureIPConsistent();setSucceed();}break;default :log.error("unexpected node status after reboot: {}",localnode_status);setFailed(IpReconfigConstants.ERRSTR_MANUAL_CONFIGURED);break;}}}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:18.410 -0500",hash_original_method="2468FB71A40A0019FA8D57CEA81AC8A6",hash_generated_method="B71728294A7ADAA6224D584B4DB6A1F8") private int distanceToView(View descendant){  int distance=0;  descendant.getDrawingRect(mTempRect);  offsetDescendantRectToMyCoords(descendant,mTempRect);  final int listBottom=mBottom - mTop - mListPadding.bottom;  if (mTempRect.bottom < mListPadding.top) {    distance=mListPadding.top - mTempRect.bottom;  } else   if (mTempRect.top > listBottom) {    distance=mTempRect.top - listBottom;  }  return distance;}  }
class C{  private void acquireWifiLock(){  if (mWifiLock != null && !mWifiLock.isHeld() && mMediaPlayer.isStreaming()) {    mWifiLock.acquire();  }}  }
class C{  public boolean isElement(){  return element != null;}  }
class C{  public boolean isModified(){  return false;}  }
class C{  public boolean equals(Object other){  if (other instanceof Name)   return table == ((Name)other).table && index == ((Name)other).getIndex(); else   return false;}  }
class C{  public static String format(Date date){  return format(date,false,TIMEZONE_UTC);}  }
class C{  static public SerialLightManager instance(){  if (_instance == null) {    _instance=new SerialLightManager();  }  return _instance;}  }
class C{  public TransformW(){  m00=m11=1.0;}  }
class C{  public DrawingOpacityIcon(DrawingEditor editor,AttributeKey<Double> opacityKey,AttributeKey<Color> fillColorKey,AttributeKey<Color> strokeColorKey,URL imageLocation,Shape fillShape,Shape strokeShape){  super(imageLocation);  this.editor=editor;  this.opacityKey=opacityKey;  this.fillColorKey=fillColorKey;  this.strokeColorKey=strokeColorKey;  this.fillShape=fillShape;  this.strokeShape=strokeShape;}  }
class C{  @Override public boolean receiveImage(ImageToProcess img,Set<TaskImageContainer> tasks,boolean blockUntilImageRelease,boolean closeOnImageRelease,Optional<Runnable> runnableWhenDone) throws InterruptedException {  if (tasks == null || tasks.size() <= 0) {    return false;  }  if (img == null) {    throw new RuntimeException("ERROR: Initial call must reference valid Image!");  }  int countImageRefs=numPropagatedImageReferences(img,tasks);  initializeTaskDone(tasks,runnableWhenDone);  ImageReleaseProtocol protocol=setSemaphoreReferenceCount(img,countImageRefs,blockUntilImageRelease,closeOnImageRelease);  scheduleTasks(tasks);  if (protocol.blockUntilRelease) {    protocol.block();  }  return true;}  }
class C{  protected void clearOtherErrors(String formName,String... fieldsToKeep){  Set<play.data.validation.Error> errors=Sets.newHashSet();  for (  String name : fieldsToKeep) {    play.data.validation.Error error=Validation.error(String.format("%s.%s",formName,name));    if (error != null) {      errors.add(error);    }  }  Validation.clear();  for (  play.data.validation.Error error : errors) {    Validation.addError(error.getKey(),error.message());  }}  }
class C{  public void addOrShowTerminal(MachineEntity machine){  String machineId=machine.getId();  TerminalPresenter terminal=terminals.get(machineId);  if (terminal != null) {    terminal.connect();    view.showTerminal(terminal);    return;  }  TerminalPresenter newTerminal=terminalFactory.create(machine);  terminals.put(machineId,newTerminal);  view.addTerminal(newTerminal);}  }
class C{  private void deleteNode(TSTNode nodeToDelete){  if (nodeToDelete == null) {    return;  }  nodeToDelete.data=null;  while (nodeToDelete != null) {    nodeToDelete=deleteNodeRecursion(nodeToDelete);  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:12.203 -0500",hash_original_method="F97CF4B9707D277EAF947474019CC6FE",hash_generated_method="CEE6F0364685959E02A5037951EEC7AB") public AtomicReference(){}  }
class C{  private static int convertFromDphi(int dphi,int units){  if (units < 1) {    throw new IllegalArgumentException(": units is < 1");  }  int round=units / 2;  return (dphi + round) / units;}  }
class C{  public static SecretKey loadOrGenerateKeys(Context context,File keyFile) throws GeneralSecurityException, IOException {  final SecretKeyWrapper wrapper=new SecretKeyWrapper(context,"settings");  if (!keyFile.exists()) {    final byte[] raw=new byte[KEY_LENGTH];    new SecureRandom().nextBytes(raw);    final SecretKey key=new SecretKeySpec(raw,"AES");    final byte[] wrapped=wrapper.wrap(key);    writeFully(keyFile,wrapped);  }  final byte[] wrapped=readFully(keyFile);  return wrapper.unwrap(wrapped);}  }
class C{  public void putInt(int x){  bb.putInt(space-=4,x);}  }
class C{  private Object showNode(Node node,Object data){  String tokens="";  String special="";  Token t;  if (showTokens) {    t=node.getFirstToken();    if (t.specialToken != null && !t.specialToken.image.startsWith("##"))     special=t.specialToken.image;    tokens=" -> " + special + t.image;  }  System.out.println(indentString() + node + tokens);  ++indent;  data=node.childrenAccept(this,data);  --indent;  return data;}  }
class C{  @Override protected void onDestroy(){  super.onDestroy();  Log.d(TAG,"onDestroy() - the activity is about to be destroyed");}  }
class C{  public int idRangeOffsetLocation(int segment){  isValidIndex(segment);  return idRangeOffsetOffset(this.segCount) + segment * FontData.DataSize.USHORT.size();}  }
class C{  boolean isLogUpToDate(long lastIndex,long lastTerm,Request request){  if (context.getLog().isEmpty()) {    LOGGER.debug("{} - Accepted {}: candidate's log is up-to-date",context.getCluster().member().address(),request);    return true;  }  long localLastIndex=context.getLog().lastIndex();  long localLastTerm=context.getLog().term(localLastIndex);  if (lastTerm < localLastTerm) {    LOGGER.debug("{} - Rejected {}: candidate's last log entry ({}) is at a lower term than the local log ({})",context.getCluster().member().address(),request,lastTerm,localLastTerm);    return false;  }  if (lastTerm == localLastTerm && lastIndex < localLastIndex) {    LOGGER.debug("{} - Rejected {}: candidate's last log entry ({}) is at a lower index than the local log ({})",context.getCluster().member().address(),request,lastIndex,localLastIndex);    return false;  }  LOGGER.debug("{} - Accepted {}: candidate's log is up-to-date",context.getCluster().member().address(),request);  return true;}  }
class C{  ZoneData(ZoneAttributes attributes,Modifiers modifiers,WeatherEntity entity){  this.attributes=attributes;  this.modifiers=modifiers;  this.entity=entity;}  }
class C{  public Vec3D closestPointTo(ReadonlyVec3D p){  final Vec3D v=b.sub(a);  final float t=p.sub(a).dot(v) / v.magSquared();  if (t < 0.0f) {    return a.copy();  } else   if (t > 1.0f) {    return b.copy();  }  return a.add(v.scaleSelf(t));}  }
class C{  private boolean isColoringEnabled(){  return Boolean.parseBoolean(WtWindowManager.getInstance().getProperty("ui.colormaps","true"));}  }
class C{  boolean explicitCastEquivalentToAsType(MethodType newType){  if (this == newType)   return true;  if (!explicitCastEquivalentToAsType(rtype,newType.rtype)) {    return false;  }  Class<?>[] srcTypes=newType.ptypes;  Class<?>[] dstTypes=ptypes;  if (dstTypes == srcTypes) {    return true;  }  assert (dstTypes.length == srcTypes.length);  for (int i=0; i < dstTypes.length; i++) {    if (!explicitCastEquivalentToAsType(srcTypes[i],dstTypes[i])) {      return false;    }  }  return true;}  }
class C{  private void reset(){  reassembledData=null;  reassembledDataSize=null;  reassembledDataFullSize=0;  reassembledDataHasStart=false;  reassembledDataHasEnd=false;  reassembledDataPosSeqStart=Integer.MAX_VALUE;  reassembledDataPosSeqEnd=Integer.MIN_VALUE;  reassembledDataNALHeader=0;  timeStamp=-1;  format=null;}  }
class C{  public void clear(){synchronized (lock) {    changesByServerPath.clear();    changesByParentServerPath.clear();    changesByLocalPath.clear();    changesByParentLocalPath.clear();  }}  }
class C{  private void commit(Method method){  if (commit == null) {    commit=getFunction(method);  }}  }
class C{  public Top(int value){  this.value=value;}  }
class C{  public static HostResource persistDeletedHost(String hostName,DateTime deletionTime){  return persistResource(newHostResource(hostName).asBuilder().setDeletionTime(deletionTime).build());}  }
class C{  public static double angle(double[] v1,double[] v2,double[] o){  final int mindim=(v1.length >= v2.length) ? v1.length : v2.length;  double s=0, e1=0, e2=0;  for (int k=0; k < mindim; k++) {    final double ok=(k < o.length) ? o[k] : 0;    final double r1=v1[k] - ok;    final double r2=v2[k] - ok;    s+=r1 * r2;    e1+=r1 * r1;    e2+=r2 * r2;  }  for (int k=mindim; k < v1.length; k++) {    final double ok=(k < o.length) ? o[k] : 0;    final double r1=v1[k] - ok;    e1+=r1 * r1;  }  for (int k=mindim; k < v2.length; k++) {    final double ok=(k < o.length) ? o[k] : 0;    final double r2=v2[k] - ok;    e2+=r2 * r2;  }  double a=Math.sqrt((s / e1) * (s / e2));  return (a < 1.) ? a : 1.;}  }
class C{  public boolean isStandardColumn(){  String columnName=getColumnName();  if (columnName.equals("AD_Client_ID") || columnName.equals("AD_Org_ID") || columnName.equals("IsActive")|| columnName.startsWith("Created")|| columnName.startsWith("Updated"))   return true;  return false;}  }
class C{  public GL10 createGL(){  return (GL10)mEglContext.getGL();}  }
class C{  public OtaBitmap(BufferedImage img){  int bitOffset=0;  int data=0;  int nByte=0;  int nTotalBytes=0;  Raster raster=img.getData();  width_=img.getWidth();  height_=img.getHeight();  nTotalBytes=(width_ * height_) / 8;  if (((width_ * height_) % 8) > 0) {    nTotalBytes++;  }  otaImgData_=new byte[nTotalBytes];  for (int y=0; y < height_; y++) {    for (int x=0; x < width_; x++) {      int color=img.getRGB(x,y);      if (color != 0) {        data|=((1 << (7 - bitOffset)) & 0xff);      }      bitOffset++;      if (bitOffset >= 8) {        otaImgData_[nByte]=(byte)(data & 0xff);        bitOffset=0;        data=0x00;        nByte++;      }    }  }  if (bitOffset > 0) {    otaImgData_[nByte]=(byte)(data & 0xff);  }}  }
class C{  private E peekExpired(){  E first=q.peek();  return (first == null || first.getDelay(NANOSECONDS) > 0) ? null : first;}  }
class C{  private void contactedBy(InternalDistributedMember sender,long timeStamp){  TimeStamp cTS=new TimeStamp(timeStamp);  cTS=memberTimeStamps.putIfAbsent(sender,cTS);  if (cTS != null && cTS.getTime() < timeStamp) {    cTS.setTime(timeStamp);  }  if (suspectedMemberInView.remove(sender) != null) {    logger.info("No longer suspecting {}",sender);  }  setNextNeighbor(currentView,null);}  }
class C{  @NonNull public static <T extends Collection<?>>T checkCollectionNotEmpty(T collection,@Nullable Object errorMessage){  checkNotNull(collection,errorMessage);  checkArgument(!collection.isEmpty(),errorMessage);  return collection;}  }
class C{  public void addWrapper(String jspUri,JspServletWrapper jsw){  jsps.remove(jspUri);  jsps.put(jspUri,jsw);}  }
class C{  public String toString(){  StringBuilder result=new StringBuilder("{ ");  for (  Interval interval : intervals)   result.append(interval);  result.append(" }");  return result.toString();}  }
class C{  public AssertionConsumerService(String name,String binding,String endpoint){  ValidateUtil.validateNotEmpty(binding,"binding");  ValidateUtil.validateNotEmpty(endpoint,"endpoint");  this.name=name;  this.endpoint=endpoint;  this.binding=binding;}  }
class C{  public Filter createFilter(BridgeContext ctx,Element filterElement,Element filteredElement,GraphicsNode filteredNode,Filter inputFilter,Rectangle2D filterRegion,Map filterMap){  Rectangle2D defaultRegion=filterRegion;  Rectangle2D primitiveRegion=SVGUtilities.convertFilterPrimitiveRegion(filterElement,filteredElement,filteredNode,defaultRegion,filterRegion,ctx);  Filter in=getIn(filterElement,filteredElement,filteredNode,inputFilter,filterMap,ctx);  if (in == null) {    return null;  }  Filter filter=new TileRable8Bit(in,primitiveRegion,in.getBounds2D(),false);  handleColorInterpolationFilters(filter,filterElement);  updateFilterMap(filterElement,filter,filterMap);  return filter;}  }
class C{  public static void recordExplicitUserNavigation(String destinationUrl,int rapporMetric){switch (rapporMetric) {case RAPPOR_ACTION_NAVIGATED_USING_OMNIBOX:    RapporServiceBridge.sampleDomainAndRegistryFromURL("NTP.ExplicitUserAction.PageNavigation.OmniboxNonSearch",destinationUrl);  return;case RAPPOR_ACTION_VISITED_SUGGESTED_TILE:RapporServiceBridge.sampleDomainAndRegistryFromURL("NTP.ExplicitUserAction.PageNavigation.NTPTileClick",destinationUrl);return;default :return;}}  }
class C{  public ImageSizesAdapter(Context context,int layoutResourceId){  super(context,layoutResourceId);  mContext=context;  mLayoutResourceId=layoutResourceId;  mLayoutInflater=LayoutInflater.from(mContext);}  }
class C{  public Rect[] newArray(int size){  return new Rect[size];}  }
class C{  public static boolean isHebrew(int codePoint){  return Character.UnicodeBlock.HEBREW.equals(Character.UnicodeBlock.of(codePoint));}  }
class C{  public void finished(int tenantclass,Operation op,long latency){  finished(op,tenantclass,0,latency);}  }
class C{  public void update(Matrix X){  Matrix CD=epoch(X);  Matrix dW=(CD.minusEquals(this.W.times(COST))).timesEquals(LEARNING_RATE);  this.W.plusEquals(dW.plus(this.dW_.timesEquals(MOMENTUM)));  this.dW_=dW;}  }
class C{  public boolean isHealthy(boolean doExtensiveChecks){  if (socket.isClosed() || socket.isInputShutdown() || socket.isOutputShutdown()) {    return false;  }  if (framedConnection != null) {    return true;  }  if (doExtensiveChecks) {    try {      int readTimeout=socket.getSoTimeout();      try {        socket.setSoTimeout(1);        if (source.exhausted()) {          return false;        }        return true;      }  finally {        socket.setSoTimeout(readTimeout);      }    } catch (    SocketTimeoutException ignored) {    }catch (    IOException e) {      return false;    }  }  return true;}  }
class C{  public String toString(){  return getCssText();}  }
class C{  public static boolean removeDirectory(final String dir){  final File file=new File(dir);  return file.delete();}  }
class C{  public static boolean isAnnotationPresent(final Method method,final Class<? extends Annotation> annotationType){  return method != null && method.isAnnotationPresent(annotationType);}  }
class C{  public String sqlMetadata_checkTables(String vendorName,String catalogName,String schemaName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlMetadata_checkTables(catalogName,schemaName);}  }
class C{  public TrashExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public WampClientBuilder(){  roles=EnumSet.of(WampRoles.Caller,WampRoles.Callee,WampRoles.Publisher,WampRoles.Subscriber);  WampSerialization.addDefaultSerializations(serializations);}  }
class C{  public Node item(int index){  return null;}  }
class C{  public boolean isIncludeInReceiverChannel(){  return includeInReceiverChannel;}  }
class C{  public static boolean isWhiteSpace(char ch[],int start,int length){  int end=start + length;  for (int s=start; s < end; s++) {    if (!isWhiteSpace(ch[s]))     return false;  }  return true;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] imageFiles=null;  String outputHeader=null;  WhiteboxRasterInfo[] images=null;  WhiteboxRaster ouptut=null;  int nCols=0;  int nRows=0;  double z;  int numClasses=0;  int numImages;  int progress=0;  int col, row;  int a, i, j;  double[][] data;  double noData=-32768;  double[][] classCentres=null;  double[] classCentre;  ArrayList<double[]> centres=new ArrayList<double[]>();  double[][] imageMetaData;  long[] numPixelsInEachClass;  int maxIterations=100;  double dist, minDist;  int whichClass;  byte initializationMode=0;  long numPixelsChanged=0;  long totalNumCells=0;  boolean totalNumCellsCounted=false;  double percentChanged=0;  double percentChangedThreshold=1.0;  double centroidMergeDist=30;  int minimumAllowableClassSize=1;  int initialNumClasses=10000;  double maxDist=Double.POSITIVE_INFINITY;  int unassignedClass=-1;  boolean isNoDataPixel;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  outputHeader=args[1];  maxIterations=Integer.parseInt(args[2]);  percentChangedThreshold=Double.parseDouble(args[3]);  centroidMergeDist=Double.parseDouble(args[4]);  if (!args[5].toLowerCase().contains("not specified")) {    maxDist=Double.parseDouble(args[5]);  }  minimumAllowableClassSize=Integer.parseInt(args[6]);  if (args[7].toLowerCase().contains("random")) {    initializationMode=1;  } else {    initializationMode=0;  }  int[] clusterHistory=new int[maxIterations];  double[] changeHistory=new double[maxIterations];  try {    imageFiles=inputFilesString.split(";");    numImages=imageFiles.length;    images=new WhiteboxRasterInfo[numImages];    imageMetaData=new double[numImages][3];    for (i=0; i < numImages; i++) {      images[i]=new WhiteboxRasterInfo(imageFiles[i]);      if (i == 0) {        nCols=images[i].getNumberColumns();        nRows=images[i].getNumberRows();        noData=images[i].getNoDataValue();      } else {        if (images[i].getNumberColumns() != nCols || images[i].getNumberRows() != nRows) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }      }      imageMetaData[i][0]=images[i].getNoDataValue();      imageMetaData[i][1]=images[i].getMinimumValue();      imageMetaData[i][2]=images[i].getMaximumValue();    }    numClasses=initialNumClasses;    data=new double[numImages][];    numPixelsInEachClass=new long[numImages];    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",imageFiles[0],WhiteboxRaster.DataType.INTEGER,noData);    output.setDataScale(DataScale.CATEGORICAL);    output.setPreferredPalette("qual.pal");    if (initializationMode == 1) {      Random generator=new Random();      double range;      for (a=0; a < numClasses; a++) {        classCentre=new double[numImages];        for (i=0; i < numImages; i++) {          range=imageMetaData[i][2] - imageMetaData[i][1];          classCentre[i]=imageMetaData[i][1] + generator.nextDouble() * range;        }        centres.add(classCentre);      }    } else {      double range, spacing;      for (a=0; a < numClasses; a++) {        classCentre=new double[numImages];        for (i=0; i < numImages; i++) {          range=imageMetaData[i][2] - imageMetaData[i][1];          spacing=range / numClasses;          classCentre[i]=imageMetaData[i][1] + spacing * a;        }        centres.add(classCentre);      }    }    j=0;    whichClass=0;    do {      if (j > 0) {        numClasses=classCentres.length;        centres.clear();        for (a=0; a < classCentres.length; a++) {          centres.add(classCentres[a]);        }        ArrayList<Long> numPixels=new ArrayList<Long>();        for (i=0; i < numPixelsInEachClass.length; i++) {          numPixels.add(numPixelsInEachClass[i]);        }        boolean flag=true;        a=0;        do {          if (numPixels.get(a) == 0) {            centres.remove(a);            numPixels.remove(a);            flag=true;            a=-1;          }          a++;          if (a >= numPixels.size()) {            flag=false;          }        } while (flag);        long numPixels1, numPixels2;        do {          flag=false;          for (a=0; a < centres.size(); a++) {            if (flag) {              break;            }            classCentre=centres.get(a);            numPixels1=numPixels.get(a);            for (int b=a; b < centres.size(); b++) {              numPixels2=numPixels.get(b);              if (b > a && numPixels1 > 0 && numPixels2 > 0) {                double[] classCentre2=centres.get(b);                dist=0;                for (i=0; i < numImages; i++) {                  dist+=(classCentre[i] - classCentre2[i]) * (classCentre[i] - classCentre2[i]);                }                dist=Math.sqrt(dist);                if (dist < centroidMergeDist) {                  double[] classCentre3=new double[numImages];                  long totalPix=numPixels1 + numPixels2;                  double weight1=(double)numPixels1 / totalPix;                  double weight2=(double)numPixels2 / totalPix;                  for (int k=0; k < numImages; k++) {                    classCentre3[k]=classCentre[k] * weight1 + classCentre2[k] * weight2;                  }                  centres.remove(Math.max(a,b));                  centres.remove(Math.min(a,b));                  centres.add(classCentre3);                  numPixels.remove(Math.max(a,b));                  numPixels.remove(Math.min(a,b));                  numPixels.add(totalPix);                  flag=true;                }                if (flag) {                  break;                }              }            }          }          numClasses=centres.size();        } while (flag);        flag=true;        a=0;        do {          if (numPixels.get(a) < minimumAllowableClassSize) {            centres.remove(a);            numPixels.remove(a);            flag=true;            a=-1;          }          a++;          if (a >= numPixels.size()) {            flag=false;          }        } while (flag);      }      numClasses=centres.size();      classCentres=new double[numClasses][numImages];      for (a=0; a < numClasses; a++) {        classCentre=centres.get(a);        classCentres[a]=classCentre.clone();      }      j++;      updateProgress("Loop " + j,1);      double[][] classCentreData=new double[numClasses][numImages];      numPixelsInEachClass=new long[numClasses];      numPixelsChanged=0;      for (row=0; row < nRows; row++) {        for (i=0; i < numImages; i++) {          data[i]=images[i].getRowValues(row);        }        for (col=0; col < nCols; col++) {          isNoDataPixel=false;          for (i=0; i < numImages; i++) {            if (data[i][col] == imageMetaData[i][0]) {              isNoDataPixel=true;              break;            }          }          if (!isNoDataPixel) {            if (!totalNumCellsCounted) {              totalNumCells++;            }            minDist=Double.POSITIVE_INFINITY;            whichClass=unassignedClass;            for (a=0; a < numClasses; a++) {              dist=0;              for (i=0; i < numImages; i++) {                dist+=(data[i][col] - classCentres[a][i]) * (data[i][col] - classCentres[a][i]);              }              if (dist < minDist && dist <= maxDist) {                minDist=dist;                whichClass=a;              }            }            z=output.getValue(row,col);            if ((int)z != whichClass) {              numPixelsChanged++;              output.setValue(row,col,whichClass);            }            if (whichClass != unassignedClass) {              numPixelsInEachClass[whichClass]++;              for (i=0; i < numImages; i++) {                classCentreData[whichClass][i]+=(data[i][col] - imageMetaData[i][1]);              }            }          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nRows - 1));        updateProgress("Loop " + j,progress);      }      totalNumCellsCounted=true;      for (a=0; a < numClasses; a++) {        if (numPixelsInEachClass[a] > 0) {          double[] newClassCentre=new double[numImages];          for (i=0; i < numImages; i++) {            newClassCentre[i]=classCentreData[a][i] / numPixelsInEachClass[a] + imageMetaData[i][1];          }          for (i=0; i < numImages; i++) {            classCentres[a][i]=newClassCentre[i];          }        }      }      percentChanged=(double)numPixelsChanged / totalNumCells * 100;      clusterHistory[j - 1]=numClasses;      changeHistory[j - 1]=percentChanged;    } while ((percentChanged > percentChangedThreshold) && (j < maxIterations));    double[] totalDeviations=new double[numClasses];    int numberOfUnassignedPixels=0;    for (row=0; row < nRows; row++) {      for (i=0; i < numImages; i++) {        data[i]=images[i].getRowValues(row);      }      for (col=0; col < nCols; col++) {        isNoDataPixel=false;        for (i=0; i < numImages; i++) {          if (data[i][col] == imageMetaData[i][0]) {            isNoDataPixel=true;            break;          }        }        if (!isNoDataPixel) {          whichClass=(int)(output.getValue(row,col));          if (whichClass != unassignedClass) {            dist=0;            for (i=0; i < numImages; i++) {              dist+=(data[i][col] - classCentres[whichClass][i]) * (data[i][col] - classCentres[whichClass][i]);            }            totalDeviations[whichClass]+=dist;          } else {            numberOfUnassignedPixels++;          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (nRows - 1));      updateProgress("Loop " + j,progress);    }    double[] standardDeviations=new double[numClasses];    for (a=0; a < numClasses; a++) {      standardDeviations[a]=Math.sqrt(totalDeviations[a] / (numPixelsInEachClass[a] - 1));    }    DecimalFormat df;    df=new DecimalFormat("0.00");    String retStr="Modified k-Means Classification Report\n\n";    retStr+="     \tCentroid Vector\n";    retStr+="     \t";    for (i=0; i < numImages; i++) {      retStr+="Image" + (i + 1) + "\t";    }    retStr+="SD\tPixels\t% Area\n";    for (a=0; a < numClasses; a++) {      String str="";      for (i=0; i < numImages; i++) {        str+=df.format(classCentres[a][i]) + "\t";      }      retStr+="Cluster " + a + "\t"+ str+ df.format(standardDeviations[a])+ "\t"+ numPixelsInEachClass[a]+ "\t"+ df.format((double)numPixelsInEachClass[a] / totalNumCells * 100)+ "\n";    }    retStr+="\n";    retStr+="Number of unassigned pixels (class = -1): " + numberOfUnassignedPixels + "\n\n";    for (i=0; i < numImages; i++) {      retStr+="Image" + (i + 1) + " = "+ images[i].getShortHeaderFile()+ "\n";    }    retStr+="\nCluster Centroid Distance Analysis:\n";    for (a=0; a < numClasses; a++) {      retStr+="\tClus. " + a;    }    retStr+="\n";    for (a=0; a < numClasses; a++) {      retStr+="Cluster " + a;      for (int b=0; b < numClasses; b++) {        if (b >= a) {          dist=0;          for (i=0; i < numImages; i++) {            dist+=(classCentres[a][i] - classCentres[b][i]) * (classCentres[a][i] - classCentres[b][i]);          }          retStr+="\t" + df.format(Math.sqrt(dist));        } else {          retStr+="\t";        }      }      retStr+="\n";    }    retStr+="\nCluster Merger History:\n";    retStr+="Iteration\tNumber of Clusters\tPercent Changed\n";    for (i=0; i < maxIterations; i++) {      if (clusterHistory[i] > 0) {        retStr+=(i + 1) + "\t" + clusterHistory[i]+ "\t"+ changeHistory[i]+ "\n";      } else {        break;      }    }    returnData(retStr);    Dendrogram plot=new Dendrogram(classCentres,numPixelsInEachClass);    returnData(plot);    for (i=0; i < numImages; i++) {      images[i].close();    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void clearPanel(){  if (this.loadingThread != null && this.loadingThread.isAlive()) {    this.loadingThread.interrupt();    return;  }  if (this.nameField != null)   this.nameField.setText("");  if (this.urlField != null)   this.urlField.setText("");  if (this.layerTree != null) {    this.layerTree.clearTree();  }}  }
class C{  public boolean isContext(){  return context;}  }
class C{  public void rtestSerialization(){  setUp();  boolean simulation=true;  this.session.clearNodes();  SessionNode node1=new SessionNode(Type6.class);  SessionNode node2=new SessionNode(Type7.class);  SessionNode node3=new SessionNode(Type8.class);  this.session.addNode(node1);  this.session.addNode(node2);  this.session.addNode(node3);  node1.addParent(node2);  node1.addParent(node3);  node3.addParent(node2);  try {    node2.createModel(Type7.class,simulation);    node3.createModel(Type8.class,simulation);    node1.createModel(Type6.class,simulation);  } catch (  Exception e) {    fail("Model not created.");  }  try {    new MarshalledObject(this.session).get();  } catch (  Exception e) {    fail("Serialization failed.");  }}  }
class C{  public static void println(PrintStream self,Object value){  self.println(InvokerHelper.toString(value));}  }
class C{  public static void initPluginGuis(MainFrame mainframe){  callPluginInitMethods("initGui",new Class[]{MainFrame.class},new Object[]{mainframe},false);}  }
class C{  private static void init(){  if (DEFAULT_REPORTER == null) {synchronized (XTrace.class) {      if (DEFAULT_REPORTER == null) {        XTRACE_ENABLED=XTraceSettings.On();        if (XTRACE_ENABLED) {          PubSubReporter pubsub=new PubSubReporter();          pubsub.start();          DEFAULT_REPORTER=pubsub;          DEFAULT_LOGGER=new XTraceLoggerImpl("",DEFAULT_REPORTER);          RECYCLE_LOGGER=new XTraceLoggerImpl("Recycle",DEFAULT_REPORTER);        } else {          DEFAULT_REPORTER=new NullReporter();          DEFAULT_LOGGER=NULL_LOGGER;          RECYCLE_LOGGER=NULL_LOGGER;        }      }    }  }}  }
class C{  void startSequenceDelay(){  int delay=Integer.parseInt(mDelayField[mNextSequenceElement].getText());  mNextSequenceElement++;  restartTimer(delay);}  }
class C{  @Override public String toString(){  return expression.toString();}  }
class C{  public JMSSubscription(){}  }
class C{  @Override public boolean isEnabled(){  return jpfPassword.isEnabled();}  }
class C{  private int calculateNewCapacity(){  int oldCapacity=queue.length;  int newCapacity=(oldCapacity < 64) ? (oldCapacity + 1) * 2 : IntMath.checkedMultiply(oldCapacity / 2,3);  return capAtMaximumSize(newCapacity,maximumSize);}  }
class C{  @Override protected void finishInit(){  m_TabbedPane.setSelectedIndex(0);  for (  AbstractExplorerTab tab : m_Tabs)   tab.update();  updateMenu();}  }
class C{  public void startDocument(XMLLocator locator,String encoding,NamespaceContext namespaceContext,Augmentations augs) throws XNIException {  fNamespaceContext=namespaceContext;  try {    if (fDocumentHandler != null) {      if (locator != null) {        fDocumentHandler.setDocumentLocator(new LocatorProxy(locator));      }      fDocumentHandler.startDocument();    }    if (fContentHandler != null) {      if (locator != null) {        fContentHandler.setDocumentLocator(new LocatorProxy(locator));      }      fContentHandler.startDocument();    }  } catch (  SAXException e) {    throw new XNIException(e);  }}  }
class C{  public void stringLessThan() throws IOException {  print("stringLessThan",null);}  }
class C{  public StatementBuilder append(String s){  builder.append(s);  return this;}  }
class C{  @Singleton @Provides SubscribeOn provideSubscribeOn(){  return (null);}  }
class C{  public LanguageTranslator(){  super(SERVICE_NAME);  if ((getEndPoint() == null) || getEndPoint().isEmpty()) {    setEndPoint(URL);  }}  }
class C{  public boolean invertedY(){  return invertedY;}  }
class C{  static String kindToString(int kind){switch (kind) {case IClasspathEntry.CPE_PROJECT:    return "src";case IClasspathEntry.CPE_SOURCE:  return "src";case IClasspathEntry.CPE_LIBRARY:return "lib";case IClasspathEntry.CPE_VARIABLE:return "var";case IClasspathEntry.CPE_CONTAINER:return "con";case org.eclipse.jdt.internal.core.ClasspathEntry.K_OUTPUT:return "output";default :return "unknown";}}  }
class C{  public void add(int index,DataSource source,boolean visible){  data.add(index,source);  if (visible) {    dataVisible.add(source);  }  autoscaleAxes();  if (getLegend() != null) {    getLegend().add(source);  }  source.addDataListener(this);  invalidateAxisExtrema();}  }
class C{  public static int addCount(){  return _stateCount++;}  }
class C{  public T caseNumericalMultiplyDivideExpression(NumericalMultiplyDivideExpression object){  return null;}  }
class C{  protected void updateConnection(){  if (connection != null && !connection.isClosed()) {    connection.update();  }}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:45.516 -0500",hash_original_method="C8C31043DDFE26EC3BE146F1B2B418E3",hash_generated_method="4278121A770EE39DDEB6E37D007DBBC8") public void sendMessage(int what){  Message msg=Message.obtain();  msg.what=what;  sendMessage(msg);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getSymmetricReflexiveAssociation_();}  }
class C{  protected synchronized void putJarTypeInfo(IJavaElement type,Object info){  this.cache.jarTypeCache.put(type,info);}  }
class C{  public static int centroids(Relation<? extends NumberVector> rel,List<? extends Cluster<?>> clusters,NumberVector[] centroids,NoiseHandling noiseOption){  assert (centroids.length == clusters.size());  int ignorednoise=0;  Iterator<? extends Cluster<?>> ci=clusters.iterator();  for (int i=0; ci.hasNext(); i++) {    Cluster<?> cluster=ci.next();    if (cluster.size() <= 1 || cluster.isNoise()) {switch (noiseOption) {case IGNORE_NOISE:        ignorednoise+=cluster.size();case TREAT_NOISE_AS_SINGLETONS:      centroids[i]=null;    continue;case MERGE_NOISE:  break;}}centroids[i]=ModelUtil.getPrototypeOrCentroid(cluster.getModel(),rel,cluster.getIDs());}return ignorednoise;}  }
class C{  public static int prevClothColor(int data){switch (data) {case ClothColor.ID.LIGHT_GRAY:    return ClothColor.ID.WHITE;case ClothColor.ID.GRAY:  return ClothColor.ID.LIGHT_GRAY;case ClothColor.ID.BLACK:return ClothColor.ID.GRAY;case ClothColor.ID.BROWN:return ClothColor.ID.BLACK;case ClothColor.ID.RED:return ClothColor.ID.BROWN;case ClothColor.ID.ORANGE:return ClothColor.ID.RED;case ClothColor.ID.YELLOW:return ClothColor.ID.ORANGE;case ClothColor.ID.LIGHT_GREEN:return ClothColor.ID.YELLOW;case ClothColor.ID.DARK_GREEN:return ClothColor.ID.LIGHT_GREEN;case ClothColor.ID.CYAN:return ClothColor.ID.DARK_GREEN;case ClothColor.ID.LIGHT_BLUE:return ClothColor.ID.CYAN;case ClothColor.ID.BLUE:return ClothColor.ID.LIGHT_BLUE;case ClothColor.ID.PURPLE:return ClothColor.ID.BLUE;case ClothColor.ID.MAGENTA:return ClothColor.ID.PURPLE;case ClothColor.ID.PINK:return ClothColor.ID.MAGENTA;case ClothColor.ID.WHITE:return ClothColor.ID.PINK;}return ClothColor.ID.WHITE;}  }
class C{  public PaletteColorWheelChooser(){}  }
class C{  private void trackAllChildViews(){  int childCount=mRv.getChildCount();  for (int i=0; i < childCount; i++) {    View v=mRv.getChildAt(i);    if (v instanceof BaseRecyclerViewFastScrollBar.FastScrollFocusableView) {      mTrackedFastScrollViews.add((BaseRecyclerViewFastScrollBar.FastScrollFocusableView)v);    }  }}  }
class C{  public void add(String[] titles,double[] values){  add(mCategories.size() + "",titles,values);}  }
class C{  public TooltipEvent(Optional<Entity> entity,List<String> tooltips){  this.entity=entity;  this.tooltips=tooltips;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:54:51.366 -0400",hash_original_method="995562A88AB64E96C6246F34F5EFC890",hash_generated_method="29CC6ED3C9950F5F3090A7D5209533A8") protected DrmEvent(int uniqueId,int type,String message,HashMap<String,Object> attributes){  mUniqueId=uniqueId;  mType=type;  if (null != message) {    mMessage=message;  }  if (null != attributes) {    mAttributes=attributes;  }}  }
class C{  private void initialize(){  if (!cacheDir.exists()) {    cacheDir.mkdirs();  }  File[] files=cacheDir.listFiles();  if (files == null) {    return;  }  for (int i=0; i < files.length; i++) {    File file=files[i];    if (file.length() == 0) {      file.delete();    } else {      CacheSpan span=CacheSpan.createCacheEntry(file);      if (span == null) {        file.delete();      } else {        addSpan(span);      }    }  }}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void addProperty(String name,String value){  Property prop=new Property();  prop.setName(name);  prop.setValue(value);  getRepeatingExtension(Property.class).add(prop);}  }
class C{  public final boolean deprecation(){  return (getFlags() & F_DEPRECATION) != 0;}  }
class C{  public void testMultivariateMIforRandomVariablesRepeatedDataFromFile() throws Exception {  ArrayFileReader afr=new ArrayFileReader("demos/data/4randomCols-1.txt");  double[][] data=afr.getDouble2DMatrix();  double[][] data2=new double[data.length + 30][data[0].length];  for (int r=0; r < data.length; r++) {    for (int c=0; c < data[r].length; c++) {      data2[r][c]=data[r][c];    }  }  for (int r=0; r < 30; r++) {    for (int c=0; c < data[r].length; c++) {      data2[r + data.length][c]=data[r][c];    }  }  int[] kNNs={1,2,3,4,5,6,10,15};  double[] expectedFromMILCA_2={0.16846374,0.04091779,0.02069109,0.00700680,0.00121768,-0.00134164,-0.00870685,-0.00966508};  System.out.println("Kraskov comparison 5 - multivariate random data 1 with 30 repeated rows");  checkMIForGivenData(MatrixUtils.selectColumns(data2,new int[]{0,1}),MatrixUtils.selectColumns(data2,new int[]{2,3}),kNNs,expectedFromMILCA_2);}  }
class C{  public static void modifyEclipseProject(Project project,Consumer<EclipseModel> modifier){  ProjectPlugin.getPlugin(project,EclipsePlugin.class);  project.afterEvaluate(null);}  }
class C{  public static Test suite(){  return (new TestSuite(FormELITCase.class));}  }
class C{  public int countEntries(){  int size=0;  if (entriesFromStorage == null)   return 0;  for (  String ofswitch : entriesFromStorage.keySet())   size+=entriesFromStorage.get(ofswitch).size();  return size;}  }
class C{  public boolean isCritical(){  Object oo=get_Value(COLUMNNAME_IsCritical);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  public Robot() throws AWTException {  if (GraphicsEnvironment.isHeadless()) {    throw new AWTException("headless environment");  }  init(GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice());}  }
class C{  public static void generateLoadFromStack(final ITranslationEnvironment environment,final long baseOffset,final OperandSize size,final String target,final List<ReilInstruction> instructions) throws IllegalArgumentException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(size,"Error: Argument size can't be null");  Preconditions.checkNotNull(target,"Error: Argument target can't be null");  Preconditions.checkNotNull(instructions,"Error: Argument instructions can't be null");  long offset=baseOffset;  final OperandSize archSize=environment.getArchitectureSize();  if (size == archSize) {    Helpers.generatePop(environment,offset,size,target,instructions);  } else {    final String loadedReg=Helpers.generatePop(environment,offset,size,null,instructions);    offset=offset + instructions.size();    final String maskedReg=environment.getNextVariableString();    instructions.add(ReilHelpers.createAnd(offset,size,target,size,"4294901760",size,maskedReg));    instructions.add(ReilHelpers.createOr(offset + 1,size,loadedReg,size,maskedReg,size,target));  }}  }
class C{  public static void hideSoftKeyboard(Activity activity){  InputMethodManager inputMethodManager=(InputMethodManager)activity.getSystemService(Activity.INPUT_METHOD_SERVICE);  if (activity.getCurrentFocus() != null) {    inputMethodManager.hideSoftInputFromWindow(activity.getCurrentFocus().getWindowToken(),0);  }}  }
class C{  public boolean willFireOn(Calendar test,boolean dayOnly){  test=(Calendar)test.clone();  test.set(Calendar.MILLISECOND,0);  if (dayOnly) {    test.set(Calendar.HOUR_OF_DAY,0);    test.set(Calendar.MINUTE,0);    test.set(Calendar.SECOND,0);  }  Date testTime=test.getTime();  Date fta=getFireTimeAfter(new Date(test.getTime().getTime() - 1000));  if (fta == null)   return false;  Calendar p=Calendar.getInstance(test.getTimeZone());  p.setTime(fta);  int year=p.get(Calendar.YEAR);  int month=p.get(Calendar.MONTH);  int day=p.get(Calendar.DATE);  if (dayOnly) {    return (year == test.get(Calendar.YEAR) && month == test.get(Calendar.MONTH) && day == test.get(Calendar.DATE));  }  while (fta.before(testTime)) {    fta=getFireTimeAfter(fta);  }  return fta.equals(testTime);}  }
class C{  public List<IMessage> deleteBefore(int index) throws RateLimitException, DiscordException, MissingPermissionsException {  return deleteFromRange(0,index + 1);}  }
class C{  public void syncUser(String username) throws AuthenticatorException {  Debug.logInfo(this.getClass().getName() + " Authenticator syncUser()",module);}  }
class C{  public void info(String msg){  log(Level.INFO,msg);}  }
class C{  protected InlineTagImpl(){  super();}  }
class C{  public ClockPane(int hour,int minute,int second){  this.hour=hour;  this.minute=minute;  this.second=second;  hourHandVisible=minuteHandVisible=secondHandVisible=true;  paintClock();}  }
class C{  public ConfigurationSocketAdapter configure(File configFile) throws RuntimeException {  if (log.isDebugEnabled()) {    log.debug("configuring from file: " + configFile.getName());  }  FileInputStream inputStream=null;  try {    inputStream=new FileInputStream(configFile);    ConfigurationSocketAdapterParser.doConfigure(this,inputStream,configFile.toString());  } catch (  FileNotFoundException fnfe) {    throw new RuntimeException("could not find file: " + configFile,fnfe);  } finally {    if (inputStream != null) {      try {        inputStream.close();      } catch (      IOException e) {        log.debug("Error closing input stream",e);      }    }  }  return this;}  }
class C{  @Override public InetAddress addressLocal(){  Socket s=getSocket();  if (s != null) {    return s.getLocalAddress();  } else {    return null;  }}  }
class C{  public void changeForwarding(List<String> users,boolean enable,String forwardTo,String action) throws IllegalArgumentException, ServiceException, MalformedURLException, IOException {  if (users.size() == 0) {    throw new IllegalArgumentException();  }  GenericEntry entry=new GenericEntry();  if (enable) {    entry.addProperty(Constants.ENABLE,Constants.TRUE);    entry.addProperty(Constants.FORWARD_TO,forwardTo);    entry.addProperty(Constants.ACTION,action);  } else {    entry.addProperty(Constants.ENABLE,Constants.FALSE);  }  for (  String user : users) {    if (enable) {      logger.log(Level.INFO,"Updating forwarding settings ( " + "enable: true" + ", forwardTo: " + forwardTo + ", action: "+ action+ " ) for user"+ user+ " ...");    } else {      logger.log(Level.INFO,"Updating forwarding settings ( enable: false ) " + "for user" + user + " ...");    }    updateSettings(user,entry,Constants.FORWARDING);    logger.log(Level.INFO,"Successfully updated forwarding settings.");  }}  }
class C{  public Map<String,Heading> buildHeaders(Heading heading){  Map<String,Heading> headingIndex=new HashMap<String,Heading>();  for (int i=0; i < 100; i++) {    col:     for (    Column col : heading.columns()) {      String[] parentAndKey=parentKey(col.getColumn(),i);      if (parentAndKey == null)       continue;      Heading subH=headingIndex.get(parentAndKey[0]);      if (subH == null) {        for (        String key : headingIndex.keySet()) {          if (parentAndKey[0].startsWith(key) && headingIndex.get(key).hasAllCols())           continue col;        }        subH=new Heading();        headingIndex.put(parentAndKey[0],subH);      }      if (parentAndKey[1] == null) {        headingIndex.put(parentAndKey[0],new Heading().setAllColls(true));      } else       if (!subH.hasLabel(parentAndKey[1]) && !subH.hasAllCols()) {        subH.add(new Column(parentAndKey[1]));      }    }  }  if (!headingIndex.containsKey(""))   headingIndex.put("",new Heading().setAllColls(true));  if (heading.hasAllCols())   headingIndex.get("").setAllColls(true);  return headingIndex;}  }
class C{  public ServicePermissionCollection(){  permissions=new Hashtable();  all_allowed=false;}  }
class C{  public static boolean isSpace(int c){  return c <= 0x20 && (CHARS[c] & MASK_SPACE) != 0;}  }
class C{  public BNode removeNode(String nodeId){  if (!nodes.containsKey(nodeId)) {  } else {    BNode node=nodes.get(nodeId);    for (    BNode inputNode : node.getInputNodes()) {      node.removeInputNode(inputNode.getId());    }    for (    BNode outputNode : node.getOutputNodes()) {      outputNode.removeInputNode(nodeId);    }    if (node instanceof ChanceNode) {      chanceNodes.remove(nodeId);    } else     if (node instanceof UtilityNode) {      utilityNodes.remove(nodeId);    } else     if (node instanceof ActionNode) {      actionNodes.remove(nodeId);    }  }  return nodes.remove(nodeId);}  }
class C{  @Override protected final void beforeSendMessage(IMessageInstance mi) throws AdeException {  handleLoggerUnavailable(mi);  final LinuxSyslogMessageReader linuxReader=(LinuxSyslogMessageReader)a_adeInputStream.getReader();  final MessageRateStats msgRateStats=MessageRateStats.getMessageRateStatsForSource(mi.getSourceId());  msgRateStats.addMessage(mi.getMessageId(),mi.getDateTime().getTime(),linuxReader.isWrapperMessage());  super.beforeSendMessage(mi);}  }
class C{  public static Encoder forName(String contextName) throws NullPointerException, UnsupportedContextException {  if (contextName == null) {    throw new NullPointerException();  }  Encoder encoder=ENCODERS_MAP.get(contextName);  if (encoder == null) {    throw new UnsupportedContextException(contextName);  }  return encoder;}  }
class C{  public synchronized static void addGlobalUnitConverter(UnitConverter conv){  if (conv == null)   throw new NullPointerException();  CONVERTERS.add(conv);}  }
class C{  protected void createRegistry(int port){  if (rmiRegistry == null) {    try {      if (logger.isDebugEnabled()) {        logger.debug("Starting RMI registry on registryPort: " + port);      }      rmiRegistry=LocateRegistry.createRegistry(port);    } catch (    Throwable e) {      throw new ServerRuntimeException("Unable to start rmi registry on registryPort: " + port,e);    }  }}  }
class C{  public void printWrapped(PrintWriter pw,int width,int nextLineTabStop,String text){  StringBuffer sb=new StringBuffer(text.length());  renderWrappedText(sb,width,nextLineTabStop,text);  pw.println(sb.toString());}  }
class C{  public Path createAuxClasspath(){  if (auxClasspath == null) {    auxClasspath=new Path(getProject());  }  return auxClasspath.createPath();}  }
class C{  public static Optional<String> packageName(String longName){  if (longName.contains(".")) {    return Optional.of(longName.substring(0,longName.lastIndexOf(".")));  } else {    return Optional.empty();  }}  }
class C{  public String routing(){  return this.routing;}  }
class C{  @ObjectiveCName("isDocAutoDownloadEnabled") public boolean isDocAutoDownloadEnabled(){  return modules.getSettingsModule().isDocAutoDownloadEnabled();}  }
class C{  private void initializeLight(String systemName){  mBit=SerialAddress.getBitFromSystemName(systemName);  setState(OFF);}  }
class C{  private void handleDimmerChange(final int idx,final int value,boolean selector){  listener.onDimmerChange(idx,value,selector);}  }
class C{  public void invoke(RemoteCall call) throws Exception {  throw new UnsupportedOperationException(versionComplaint);}  }
class C{  public JSONWriter object() throws JSONException {  if (this.mode == 'i') {    this.mode='o';  }  if (this.mode == 'o' || this.mode == 'a') {    this.append("{");    this.push(new JSONObject());    this.comma=false;    return this;  }  throw new JSONException("Misplaced object.");}  }
class C{  @Ignore("Bug51491") @Test public void test_GatewaySender_Parallel_DistributedRegion(){  cache=new CacheFactory().set(MCAST_PORT,"0").create();  GatewaySenderFactory fact=cache.createGatewaySenderFactory();  fact.setParallel(true);  fact.setManualStart(true);  GatewaySender sender1=fact.create("NYSender",2);  AttributesFactory factory=new AttributesFactory();  factory.addGatewaySenderId(sender1.getId());  factory.setScope(Scope.DISTRIBUTED_ACK);  factory.setDataPolicy(DataPolicy.REPLICATE);  try {    RegionFactory regionFactory=cache.createRegionFactory(factory.create());    Region region=regionFactory.create("test_GatewaySender_Parallel_DistributedRegion");  } catch (  Exception e) {    fail("Unexpected Exception :" + e);  }}  }
class C{  static final private String rawToBubblebabbleFingerprint(byte[] raw){  final char[] v="aeiouy".toCharArray();  final char[] c="bcdfghklmnprstvzx".toCharArray();  StringBuffer sb=new StringBuffer();  int seed=1;  int rounds=(raw.length / 2) + 1;  sb.append('x');  for (int i=0; i < rounds; i++) {    if (((i + 1) < rounds) || ((raw.length) % 2 != 0)) {      sb.append(v[(((raw[2 * i] >> 6) & 3) + seed) % 6]);      sb.append(c[(raw[2 * i] >> 2) & 15]);      sb.append(v[((raw[2 * i] & 3) + (seed / 6)) % 6]);      if ((i + 1) < rounds) {        sb.append(c[(((raw[(2 * i) + 1])) >> 4) & 15]);        sb.append('-');        sb.append(c[(((raw[(2 * i) + 1]))) & 15]);        seed=((seed * 5) + (((raw[2 * i] & 0xff) * 7) + (raw[(2 * i) + 1] & 0xff))) % 36;      }    } else {      sb.append(v[seed % 6]);      sb.append('x');      sb.append(v[seed / 6]);    }  }  sb.append('x');  return sb.toString();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void reduce(Text key,Iterator<ObjectWritable> values,OutputCollector<Text,Route> output,Reporter reporter) throws IOException {  String url=key.toString();  Node node=null;  List<LinkDatum> outlinkList=new ArrayList<LinkDatum>();  while (values.hasNext()) {    ObjectWritable objWrite=values.next();    Object obj=objWrite.get();    if (obj instanceof LinkDatum) {      outlinkList.add((LinkDatum)obj);    } else     if (obj instanceof Node) {      node=(Node)obj;    }  }  if (node != null) {    int numInlinks=node.getNumInlinks();    if (numInlinks > 0) {      for (      LinkDatum datum : outlinkList) {        String outlinkUrl=datum.getUrl();        Route route=new Route();        route.setFound(false);        route.setLookingFor(url);        route.setOutlinkUrl(outlinkUrl);        output.collect(new Text(outlinkUrl),route);      }    }  }}  }
class C{  public Builder host(String host){  this.host=host;  return this;}  }
class C{  @Override public boolean isResultRequired(ResultProducer rp,Object[] key) throws Exception {  if (m_ResultProducer != rp) {    throw new Error("Unrecognized ResultProducer calling isResultRequired!");  }  if (m_Debug) {    System.err.print("Is result required...");    for (    Object element : key) {      System.err.print(" " + element);    }    System.err.flush();  }  boolean retval=false;  if (!m_CacheKeyName.equals("")) {    if (!isCacheValid(key)) {      loadCache(rp,key);    }    retval=!isKeyInCache(rp,key);  } else {    retval=!isKeyInTable(m_ResultsTableName,rp,key);  }  if (m_Debug) {    System.err.println(" ..." + (retval ? "required" : "not required") + (m_CacheKeyName.equals("") ? "" : " (cache)"));    System.err.flush();  }  return retval;}  }
class C{  private void doCommit(final MyLoadStats totals){  if (flush && buffer != null) {    buffer.flush();  }  if (commitEnum == CommitEnum.Batch) {    if (log.isInfoEnabled())     log.info("Commit after batch");    final long beginCommit=System.currentTimeMillis();    database.commit();    totals.commit();    totals.commitTime.add(System.currentTimeMillis() - beginCommit);    if (log.isInfoEnabled())     log.info("commit: latency=" + totals.commitTime + "ms");    if (verbose > 1)     logCounters(database);  }}  }
class C{  public String constructSpecName(String proposition,boolean firstRun){  Spec existingSpec=getSpecByName(proposition);  if (existingSpec != null) {    if (firstRun) {      return constructSpecName(proposition.concat("_1"),false);    } else {      String oldNumber=proposition.substring(proposition.lastIndexOf("_"));      int number=Integer.parseInt(oldNumber) + 1;      proposition=proposition.substring(0,proposition.lastIndexOf("_"));      return constructSpecName(proposition + number,false);    }  }  return proposition;}  }
class C{  public boolean isOneDotSeven(){  return jdkVersion == JDK1_7;}  }
class C{  public static String collapseSequenceOfDots(@NotNull String word){  return word.replaceAll("[.]+",".");}  }
class C{  private boolean hasSearchableColumns(){  boolean retValue=false;  m_tableName=MQuery.getZoomTableName(m_columnName);  m_keyColumnName=MQuery.getZoomColumnName(m_columnName);  if (m_columnName.equals("M_Product_ID") || m_columnName.equals("M_ProductBOM_ID") || m_columnName.equals("C_BPartner_ID")|| m_columnName.equals("C_Order_ID")|| m_columnName.equals("C_Invoice_ID")|| m_columnName.equals("M_InOut_ID")|| m_columnName.equals("C_Payment_ID")|| m_columnName.equals("GL_JournalBatch_ID")|| m_columnName.equals("SalesRep_ID")) {    retValue=true;  } else {    String query="SELECT t.TableName, c.ColumnName " + "FROM AD_Column c " + " INNER JOIN AD_Table t ON (c.AD_Table_ID=t.AD_Table_ID AND t.IsView='N')"+ " WHERE (c.ColumnName IN ('DocumentNo', 'Value', 'Name') OR c.IsIdentifier='Y')"+ " AND c.AD_Reference_ID IN (10,14)"+ " AND EXISTS (SELECT * FROM AD_Column cc WHERE cc.AD_Table_ID=t.AD_Table_ID"+ " AND cc.IsKey='Y' AND cc.ColumnName=?)";    PreparedStatement pstmt=null;    ResultSet rs=null;    try {      pstmt=DB.prepareStatement(query,null);      pstmt.setString(1,m_keyColumnName);      rs=pstmt.executeQuery();      if (rs.next()) {        retValue=true;      }    } catch (    SQLException ex) {      log.log(Level.SEVERE,query,ex);    } finally {      DB.close(rs,pstmt);      rs=null;      pstmt=null;    }  }  return retValue;}  }
class C{  public static byte[] toBytes(int val){  byte[] b=new byte[4];  for (int i=3; i > 0; i--) {    b[i]=(byte)val;    val>>>=8;  }  b[0]=(byte)val;  return b;}  }
class C{  private void put122(final int b,final int s1,final int s2){  pool.put12(b,s1).putShort(s2);}  }
class C{  public String binRangePrecisionTipText(){  return "The number of decimal places for cut points to use when generating bin labels";}  }
class C{  public void initialize(int numVertices){  this.numVertices=numVertices;  Dk=new float[numVertices][];  Dk_minus_one=new float[numVertices][];  for (int i=0; i < numVertices; i++) {    Dk[i]=new float[numVertices];    Dk_minus_one[i]=new float[numVertices];  }  Pk=new int[numVertices][];  Pk_minus_one=new int[numVertices][];  for (int i=0; i < numVertices; i++) {    Pk[i]=new int[numVertices];    Pk_minus_one[i]=new int[numVertices];  }}  }
class C{  public void configureManagers(){  jmri.InstanceManager.store(getPowerPr2Manager(),jmri.PowerManager.class);  jmri.InstanceManager.setThrottleManager(getPr2ThrottleManager());  jmri.InstanceManager.setProgrammerManager(new jmri.jmrix.loconet.LnProgrammerManager(getSlotManager(),this));}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case GamlPackage.PRAGMA__NAME:    return getName();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public ViewTagITCase(String name){  super(name);}  }
class C{  public Scanner(String s){  super(s);}  }
class C{  @Override @Deprecated public int writeBulk(List<LogRecord> records) throws IOException {  return getLedgerWriter(records.get(0).getTransactionId(),false).writeBulk(records);}  }
class C{  public com.wipro.ats.bdre.imcrawler.mr.Contents.Builder clearPath(){  path=null;  fieldSetFlags()[3]=false;  return this;}  }
class C{  public void write(BufferedImage bimg,String filePath) throws IOException {  File file=new File(filePath);  if (file.exists()) {    if (!file.delete()) {      throw new IOException("File " + filePath + " exists already, and call to .delete() failed "+ "unexpectedly");    }  } else {    if (!file.createNewFile()) {      throw new IOException("Unable to create file at path " + filePath + ", call to .createNewFile() "+ "failed unexpectedly.");    }  }  OutputStream fos=new BufferedOutputStream(new FileOutputStream(file));  try {    write(bimg,fos);  }  finally {    try {      fos.close();    } catch (    IOException e) {    }  }}  }
class C{  private static void testSwitch(){  System.out.println("Switch.testSwitch");  int a=1;switch (a) {case -1:    assert (false);  break;case 0:assert (false);break;case 1:break;case 2:assert (false);break;case 3:assert (false);break;case 4:assert (false);break;default :assert (false);break;}switch (a) {case 3:assert (false);break;case 4:assert (false);break;default :break;}a=0x12345678;switch (a) {case 0x12345678:break;case 0x12345679:assert (false);break;default :assert (false);break;}switch (a) {case 57:assert (false);break;case -6:assert (false);break;case 0x12345678:break;case 22:assert (false);break;case 3:assert (false);break;default :assert (false);break;}switch (a) {case -6:assert (false);break;case 3:assert (false);break;default :break;}a=-5;switch (a) {case 12:assert (false);break;case -5:break;case 0:assert (false);break;default :assert (false);break;}switch (a) {default :break;}}  }
class C{  protected void onEmptyDbCreated(){  Utilities.getPrefs(mContext).edit().putBoolean(EMPTY_DATABASE_CREATED,true).commit();  ManagedProfileHeuristic.processAllUsers(Collections.<UserHandleCompat>emptyList(),mContext);}  }
class C{  @Override public void clear(){  symbolToIndexMap.clear();  indexToSymbolMap.clear();}  }
class C{  public TokenType type(){  return type;}  }
class C{  public static void w(String msg){  if (LOGW_DEBUG && mLogAll) {    Log.e(DEFAULT_TAG,getInformation(msg));  }}  }
class C{  protected ConstraintToken_Impl(){  super();}  }
class C{  @Override public void notifyEvent(DataStoreEvent event){  if (!event.isExternal()) {    GenericPK pk=null;    if (event.getSource() instanceof GenericPK) {      pk=(GenericPK)event.getSource();    }    if (event.getSource() instanceof Persistent<?>) {      pk=((Persistent<?>)event.getSource()).getId();    }    if (pk != null) {      GlobalDataStoreEvent devent=new GlobalDataStoreEvent(event.getEmitter(),pk,event.getType(),System.currentTimeMillis(),serverUUID);      MongoDBHelper.getDatastore().save(devent);    }  }}  }
class C{  public void removeBean(JComponent container,Integer... tab){  int index=0;  if (tab.length > 0) {    index=tab[0].intValue();  }  Vector<Object> components=null;  if (TABBED_COMPONENTS.size() > 0 && index < TABBED_COMPONENTS.size()) {    components=TABBED_COMPONENTS.get(index);  }  for (int i=0; i < components.size(); i++) {    if (components.elementAt(i) == this) {      System.out.println("Removing bean");      components.removeElementAt(i);    }  }  if (container != null) {    container.remove((JComponent)m_bean);    container.revalidate();    container.repaint();  }}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return TYPE;case 2:  return HELLO;case 3:return ERROR;case 4:return ECHO_REQUEST;case 5:return ECHO_REPLY;case 6:return GET_REQUEST;case 7:return GET_RESPONSE;case 8:return PUT_REQUEST;case 9:return PUT_RESPONSE;case 10:return DELETE_REQUEST;case 11:return DELETE_RESPONSE;case 12:return SYNC_VALUE;case 13:return SYNC_VALUE_RESPONSE;case 14:return SYNC_OFFER;case 15:return SYNC_REQUEST;case 16:return FULL_SYNC_REQUEST;case 17:return CURSOR_REQUEST;case 18:return CURSOR_RESPONSE;case 19:return REGISTER_REQUEST;case 20:return REGISTER_RESPONSE;case 21:return CLUSTER_JOIN_REQUEST;case 22:return CLUSTER_JOIN_RESPONSE;default :return null;}}  }
class C{  public MockTransaction(final TimeInstant timeStamp){  this(0,timeStamp);}  }
class C{  public LegendItem(String label,String description,String toolTipText,String urlText,Shape shape,Paint fillPaint,Stroke outlineStroke,Paint outlinePaint){  this(label,description,toolTipText,urlText,true,shape,true,fillPaint,true,outlinePaint,outlineStroke,false,UNUSED_SHAPE,UNUSED_STROKE,Color.black);}  }
class C{  public JSONObject optJSONObject(int index){  Object o=this.opt(index);  return o instanceof JSONObject ? (JSONObject)o : null;}  }
class C{  public static RangeQueryBuilder rangeQuery(String name){  return new RangeQueryBuilder(name);}  }
class C{  public _BuildReason(final String[] flagStrings){  super(flagStrings);}  }
class C{  public static final boolean isLeap(final int year){  return yearIsLeap[year - 1900];}  }
class C{  public T id(int... path){  return id(findView(path));}  }
class C{  void remove(int key){  cache.remove(key);}  }
class C{  protected static final String addEscapes(String str){  StringBuilder retval=new StringBuilder();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  void warnIncompleteComprehensive(File file){  String result=checkIncompleteComprehensive(file);  if (result.equals("")) {    JOptionPane.showMessageDialog(_who,"OK, Comprehensive.xml is complete");  } else {    JOptionPane.showMessageDialog(_who,result);  }}  }
class C{  private void writeSegment(byte[] buf) throws SQLException {synchronized (owner.getSynchronizationObject()) {    blobHandle.putSegment(buf);  }}  }
class C{  public static String createIntersectionTypeSignature(String[] typeSignatures){  int typeSignaturesLenth=typeSignatures.length;  char[][] signatures=new char[typeSignaturesLenth][];  for (int i=0; i < typeSignaturesLenth; i++) {    signatures[i]=typeSignatures[i].toCharArray();  }  return createIntersectionTypeSignature(signatures);}  }
class C{  public static boolean sameClass(final Object first,final Object second){  return first.getClass() == second.getClass();}  }
class C{  public boolean isAnalyzed(String fqn){  ClassEntry entry=fqnToClassEntryMap.get(fqn);  return entry != null ? true : false;}  }
class C{  private void drawShadows(Canvas canvas){  int height=(int)(1.5 * getItemHeight());  topShadow.setBounds(0,0,getWidth(),height);  topShadow.draw(canvas);  bottomShadow.setBounds(0,getHeight() - height,getWidth(),getHeight());  bottomShadow.draw(canvas);}  }
class C{  public FacetSequence(CoordinateSequence pts,int start,int end){  this.pts=pts;  this.start=start;  this.end=end;}  }
class C{  public Java2TypeScriptTranslator(TranspilationHandler logHandler,JSweetContext context,JCCompilationUnit compilationUnit,boolean preserveSourceLineNumbers){  super(logHandler,context,compilationUnit,new Java2TypeScriptAdapter(context),preserveSourceLineNumbers);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:57.840 -0500",hash_original_method="9AAEF167BAB79AB4F88321224520B47D",hash_generated_method="D1446C5613D089036ABDE6782BA7A84D") public static void cancelThumbnailRequest(ContentResolver cr,long origId,long groupId){  InternalThumbnails.cancelThumbnailRequest(cr,origId,EXTERNAL_CONTENT_URI,groupId);}  }
class C{  public static void f(String tag,String msg,Object... args){  if (sLevel > LEVEL_FATAL) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.wtf(tag,msg);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tFull name of the clusterer analyzed.\n" + "\teg: weka.clusterers.SimpleKMeans\n" + "\t(default weka.clusterers.SimpleKMeans)","W",1,"-W"));  result.addAll(Collections.list(super.listOptions()));  if ((m_Clusterer != null) && (m_Clusterer instanceof OptionHandler)) {    result.addElement(new Option("","",0,"\nOptions specific to clusterer " + m_Clusterer.getClass().getName() + ":"));    result.addAll(Collections.list(((OptionHandler)m_Clusterer).listOptions()));  }  return result.elements();}  }
class C{  private void createTitle(){  if (this.image != null) {    final Label imageLabel=createLabel();    imageLabel.setImage(this.image);  }  if (this.text != null && !this.text.trim().equals("")) {    final Label textLabel=createLabel();    textLabel.setText(this.text);  }}  }
class C{  @Override public DataStoreTransaction beginTransaction(){  Session session=sessionFactory.getCurrentSession();  Preconditions.checkNotNull(session);  session.beginTransaction();  return new HibernateTransaction(session,isScrollEnabled,scrollMode);}  }
class C{  double percentToAproxY(Rectangle2D.Double area){  return percentY * area.getHeight();}  }
class C{  public static PdxInstance fromJSON(byte[] jsonByteArray){  JsonParser jp=null;  try {    jp=new JsonFactory().createParser(jsonByteArray);    enableJSONParserFeature(jp);    return new JSONFormatter().getPdxInstance(jp,states.NONE,null).getPdxInstance();  } catch (  JsonParseException jpe) {    throw new JSONFormatterException("Could not parse JSON document ",jpe);  }catch (  IOException e) {    throw new JSONFormatterException("Could not parse JSON document: " + jp.getCurrentLocation(),e);  }catch (  Exception e) {    throw new JSONFormatterException("Could not parse JSON document: " + jp.getCurrentLocation(),e);  }}  }
class C{  public synchronized Collection<X509CRL> engineGetCRLs(CRLSelector selector) throws CertStoreException {  if (debug != null) {    debug.println("LDAPCertStore.engineGetCRLs() selector: " + selector);  }  if (selector == null) {    selector=new X509CRLSelector();  }  if (!(selector instanceof X509CRLSelector)) {    throw new CertStoreException("need X509CRLSelector to find CRLs");  }  X509CRLSelector xsel=(X509CRLSelector)selector;  HashSet<X509CRL> crls=new HashSet<>();  Collection<Object> issuerNames;  X509Certificate certChecking=xsel.getCertificateChecking();  if (certChecking != null) {    issuerNames=new HashSet<>();    X500Principal issuer=certChecking.getIssuerX500Principal();    issuerNames.add(issuer.getName(X500Principal.RFC2253));  } else {    issuerNames=xsel.getIssuerNames();    if (issuerNames == null) {      throw new CertStoreException("need issuerNames or certChecking to " + "find CRLs");    }  }  for (  Object nameObject : issuerNames) {    String issuerName;    if (nameObject instanceof byte[]) {      try {        X500Principal issuer=new X500Principal((byte[])nameObject);        issuerName=issuer.getName(X500Principal.RFC2253);      } catch (      IllegalArgumentException e) {        continue;      }    } else {      issuerName=(String)nameObject;    }    Collection<X509CRL> entryCRLs=Collections.emptySet();    if (certChecking == null || certChecking.getBasicConstraints() != -1) {      LDAPRequest request=new LDAPRequest(issuerName);      request.addRequestedAttribute(CROSS_CERT);      request.addRequestedAttribute(CA_CERT);      request.addRequestedAttribute(ARL);      if (prefetchCRLs) {        request.addRequestedAttribute(CRL);      }      try {        entryCRLs=getCRLs(request,ARL,xsel);        if (entryCRLs.isEmpty()) {          prefetchCRLs=true;        } else {          crls.addAll(entryCRLs);        }      } catch (      CertStoreException e) {        if (debug != null) {          debug.println("LDAPCertStore.engineGetCRLs non-fatal error " + "retrieving ARLs:" + e);          e.printStackTrace();        }      }    }    if (entryCRLs.isEmpty() || certChecking == null) {      LDAPRequest request=new LDAPRequest(issuerName);      request.addRequestedAttribute(CRL);      entryCRLs=getCRLs(request,CRL,xsel);      crls.addAll(entryCRLs);    }  }  return crls;}  }
class C{  public DefaultKeyedChannelPool(EventLoop eventLoop,Function<K,Future<Channel>> channelFactory,KeyedChannelPoolHandler<K> channelPoolHandler){  this(eventLoop,channelFactory,ChannelHealthChecker.ACTIVE,channelPoolHandler,true);}  }
class C{  @Override protected EClass eStaticClass(){  return EipPackage.Literals.AGGREGATOR;}  }
class C{  public static Pointer to(char values[]){  return new Pointer(CharBuffer.wrap(values));}  }
class C{  public void stdoutShouldNotContain(String notExpectedString){  if (stdout.contains(notExpectedString)) {    reportDiagnosticSummary();    throw new RuntimeException("'" + notExpectedString + "' found in stdout \n");  }}  }
class C{  static Uri createRcsContactIfNeeded(Context context,ContactId contactId) throws RemoteException, OperationApplicationException {  int phoneId=getContactIdOfAddressBook(context,contactId);  if (phoneId != INVALID_CONTACT_ID) {    return ContentUris.withAppendedId(ContactsContract.Contacts.CONTENT_URI,phoneId);  }  ContentValues values=new ContentValues();  values.putNull(ContactsContract.Contacts.DISPLAY_NAME);  values.put(Phone.NUMBER,contactId.toString());  values.put(Phone.TYPE,Phone.TYPE_MOBILE);  return createContact(context,values);}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (!success)   return success;  return updateHeader();}  }
class C{  public ConvertToCovMatixAction(DataEditor editor){  super("Covariance Matrix");  if (editor == null) {    throw new NullPointerException();  }  this.dataEditor=editor;}  }
class C{  public Operation(int nTail,int nHead,int nOperation){  m_nHead=nHead;  m_nTail=nTail;  m_nOperation=nOperation;}  }
class C{  public SetSkuQuantityToCartEventCommandImpl(final ShoppingCartCommandRegistry registry,final PriceService priceService,final PricingPolicyProvider pricingPolicyProvider,final ProductService productService,final ShopService shopService,final ProductQuantityStrategy productQuantityStrategy){  super(registry,priceService,pricingPolicyProvider,productService,shopService);  this.productQuantityStrategy=productQuantityStrategy;}  }
class C{  public void assertLabel(int[] path,String text){  TestUtils.assertLabel(path,text);}  }
class C{  public ObjectStreamField(String name,Class<?> cl){  if (name == null) {    throw new NullPointerException("name == null");  } else   if (cl == null) {    throw new NullPointerException("cl == null");  }  this.name=name;  this.type=new WeakReference<Class<?>>(cl);}  }
class C{  ByteVector put11(final int b1,final int b2){  int length=this.length;  if (length + 2 > data.length) {    enlarge(2);  }  byte[] data=this.data;  data[length++]=(byte)b1;  data[length++]=(byte)b2;  this.length=length;  return this;}  }
class C{  SkinPaletteSelector(SkinColorSelectionModel model){  super(model);}  }
class C{  public <T>List<T> createListDtoFromJson(String json,Class<T> dtoInterface){  final DtoProvider<T> dtoProvider=getDtoProvider(dtoInterface);  final JSONArray jsonArray=JSONParser.parseStrict(json).isArray();  final List<T> result=new ArrayList<>();  for (int i=0; i < jsonArray.size(); i++) {    String payload=jsonArray.get(i).isObject().toString();    result.add(dtoProvider.fromJson(payload));  }  return result;}  }
class C{  private static int map(int x,int in_min,int in_max,int out_min,int out_max){  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;}  }
class C{  public static _GetOption fromString(final String value) throws SOAPSerializationException {  return (_GetOption)Enumeration.fromString(value,_GetOption.VALUES_TO_INSTANCES);}  }
class C{  Model learn(ExampleSet trainingSet) throws OperatorException {  innerTrainSetSource.deliver(trainingSet);  getSubprocess(1).execute();  return innerModelSink.getData(Model.class);}  }
class C{  private boolean isActiveSMISProvider(String smisProviderURI) throws IOException {  _logger.debug("Entering {}",Thread.currentThread().getStackTrace()[1].getMethodName());  Set<String> activeSMISProvidersFromDB=getAllActiveSMISProviderFromDB();  _logger.debug("Exiting {}",Thread.currentThread().getStackTrace()[1].getMethodName());  return activeSMISProvidersFromDB.contains(smisProviderURI);}  }
class C{  public static boolean isOptional(BOp node){  return node instanceof IJoinNode && ((IJoinNode)node).isOptional();}  }
class C{  public final void testValidateFails(){  IPv6AddressValidator iPv4AddressValidator=new IPv6AddressValidator("foo");  assertFalse(iPv4AddressValidator.validate("FE80:0000:0000:0000:0202:B3XX:FE1E:8329"));  assertFalse(iPv4AddressValidator.validate("FE80:0000:0000:0000:0202:B3FF:FE1E:8329:3492"));}  }
class C{  private void elementDecl(XSElementDecl decl,String extraAtts){  XSType type=decl.getType();  String str=MessageFormat.format("Element name=\"{0}\"{1}{2}",new Object[]{decl.getName(),type.isLocal() ? "" : " type=\"{" + type.getTargetNamespace() + "}"+ type.getName()+ "\"",extraAtts});  SchemaTreeNode newNode=new SchemaTreeNode(str,decl.getLocator());  this.currNode.add(newNode);  this.currNode=newNode;  if (type.isLocal()) {    if (type.isLocal()) {      type.visit(this);    }  }  this.currNode=(SchemaTreeNode)this.currNode.getParent();}  }
class C{  private boolean redirectCarsFromAlternateTrack(){  if (!Setup.isBuildAggressive()) {    return false;  }  boolean redirected=false;  List<RollingStock> cars=carManager.getByTrainList(_train);  for (  RollingStock rs : cars) {    Car car=(Car)rs;    if (car.getFinalDestination() == null || car.getFinalDestinationTrack() == null || !car.getFinalDestinationName().equals(car.getDestinationName())) {      continue;    }    log.debug("Car ({}) destination track ({}) has final destination track ({}) location ({})",car.toString(),car.getDestinationTrackName(),car.getFinalDestinationTrackName(),car.getDestinationName());    if (car.getKernel() != null && !car.getKernel().isLead(car)) {      continue;    }    if (car.testDestination(car.getFinalDestination(),car.getFinalDestinationTrack()).equals(Track.OKAY)) {      Track alternate=car.getFinalDestinationTrack().getAlternateTrack();      if (alternate != null && car.getDestinationTrack() == alternate && (alternate.getTrackType().equals(Track.YARD) || alternate.getTrackType().equals(Track.INTERCHANGE)) && checkDropTrainDirection(car,car.getRouteDestination(),car.getFinalDestinationTrack()) && checkTrainCanDrop(car,car.getFinalDestinationTrack())) {        log.debug("Car ({}) alternate track ({}) can be redirected to final destination track ({})",car.toString(),car.getDestinationTrackName(),car.getFinalDestinationTrackName());        if (car.getKernel() != null) {          for (          Car k : car.getKernel().getCars()) {            addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildRedirectFromAlternate"),new Object[]{car.getFinalDestinationName(),car.getFinalDestinationTrackName(),k.toString(),car.getDestinationTrackName()}));            k.setDestination(car.getFinalDestination(),car.getFinalDestinationTrack());          }        } else {          addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildRedirectFromAlternate"),new Object[]{car.getFinalDestinationName(),car.getFinalDestinationTrackName(),car.toString(),car.getDestinationTrackName()}));          car.setDestination(car.getFinalDestination(),car.getFinalDestinationTrack());        }        redirected=true;      }    }  }  return redirected;}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  @Override public int compare(MovePath mp1,MovePath mp2){  int d1=mp1.getFinalCoords().distance(destination);  int d2=mp2.getFinalCoords().distance(destination);  if (d1 != d2)   return d1 - d2; else   return mp1.getMpUsed() - mp2.getMpUsed();}  }
class C{  public HtmlElement(final String label,final By by){  this.label=label;  this.by=by;}  }
class C{  protected void removeChild(final AbstractNode child){  assert child != null;  assert !child.deleted;  assert child.parent.get() == this;  assert dirty;  assert !deleted;  assert !isPersistent();  assert !isReadOnly();  final BTree btree=(BTree)this.btree;  if (btree.debug)   assertInvariants();  if (DEBUG) {    log.debug("this=" + this + ", child="+ child);  }  final int i=getIndexOf(child);{    final int index=i;    final int nkeys=getKeyCount();    final int lengthChildCopy=nkeys - index;    final int lengthKeyCopy=lengthChildCopy - 1;    final MutableKeyBuffer keys=(MutableKeyBuffer)this.getKeys();    final MutableNodeData data=(MutableNodeData)this.data;    if (data.childAddr[index] != 0) {      btree.recycle(data.childAddr[index]);    }    if (lengthKeyCopy > 0) {      System.arraycopy(keys.keys,index + 1,keys.keys,index,lengthKeyCopy);    }    if (lengthChildCopy > 0) {      System.arraycopy(childRefs,index + 1,childRefs,index,lengthChildCopy);      System.arraycopy(data.childAddr,index + 1,data.childAddr,index,lengthChildCopy);      System.arraycopy(data.childEntryCounts,index + 1,data.childEntryCounts,index,lengthChildCopy);    }    if (nkeys > 0) {      keys.keys[nkeys - 1]=null;    }    childRefs[nkeys]=null;    data.childAddr[nkeys]=NULL;    data.childEntryCounts[nkeys]=0;    child.parent=null;    keys.nkeys--;    if (child.isLeaf()) {      btree.nleaves--;    } else {      btree.nnodes--;    }    child.delete();  }  if (btree.root == this) {    if (getKeyCount() == 0 && !isLeaf()) {      final AbstractNode<?> lastChild=getChild(0);      if (btree.debug)       lastChild.assertInvariants();      if (DEBUG) {        log.debug("replacing root: root=" + btree.root + ", node="+ this+ ", lastChild="+ lastChild);      }      final boolean wasDirty=btree.root.dirty;      assert lastChild != null;      btree.root=lastChild;      if (!wasDirty) {        btree.fireDirtyEvent();      }      lastChild.parent=null;      btree.height--;      this.delete();      btree.nnodes--;      if (BTree.INFO) {        BTree.log.info("reduced tree height: height=" + btree.height + ", newRoot="+ btree.root);      }      btree.getBtreeCounters().rootsJoined++;    }  } else {    if (data.getKeyCount() < minKeys()) {      join();    }  }}  }
class C{  public final int numberOfNodes(){  int n=0;  if (root == null)   return n;  for (Enumeration<TreeNode> e=elements(); e.hasMoreElements(); ) {    e.nextElement();    n++;  }  return n;}  }
class C{  public boolean isConnected(){  if (connection == null) {    LOG.debug("Not connected to vSphere. URL: " + url + ", UserId: "+ user);    return false;  }  try {    long ref=System.currentTimeMillis();    new ManagedObjectAccessor(connection).getDecendentMoRef(null,"VirtualMachine","no-name");    LOG.debug("vSphere connection is alive. Check took " + (System.currentTimeMillis() - ref) + "ms. URL: "+ url+ ", UserId: "+ user);    return true;  } catch (  @SuppressWarnings("unused") Exception e) {    LOG.debug("Current connection is invalid. URL: " + url + ", UserId: "+ user);    return false;  }}  }
class C{  public EventStoreBuilder useSslConnection(String certificateCommonName){  settingsBuilder.sslSettings(SslSettings.trustCertificateCN(certificateCommonName));  return this;}  }
class C{  public Property year(){  return new Property(this,getChronology().year());}  }
class C{  @Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){  setMeasuredDimension(getResources().getDisplayMetrics().widthPixels,DisplayUtils.getStatusBarHeight(getResources()));}  }
class C{  public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(5);  newVector.addElement(new Option("\tUse resampling instead of reweighting for boosting.","Q",0,"-Q"));  newVector.addElement(new Option("\tPercentage of weight mass to base training on.\n" + "\t(default 100, reduce to around 90 speed up)","P",1,"-P <percent>"));  newVector.addElement(new Option("\tThreshold on the improvement of the likelihood.\n" + "\t(default -Double.MAX_VALUE)","L",1,"-L <num>"));  newVector.addElement(new Option("\tShrinkage parameter.\n" + "\t(default 1)","H",1,"-H <num>"));  newVector.addElement(new Option("\tZ max threshold for responses." + "\n\t(default 3)","Z",1,"-Z <num>"));  newVector.addElement(new Option("\t" + poolSizeTipText() + " (default 1)","O",1,"-O <int>"));  newVector.addElement(new Option("\t" + numThreadsTipText() + "\n"+ "\t(default 1)","E",1,"-E <int>"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  public static void download(IBurpExtenderCallbacks cb,IHttpRequestResponse baseRequestResponse,byte[] request,String baseConfigFile){  IExtensionHelpers helpers=cb.getHelpers();  String requestToString=helpers.bytesToString(request);  PrintWriter stderr=new PrintWriter(cb.getStderr(),true);  IRequestInfo requestInfo=helpers.analyzeRequest(baseRequestResponse);  try {    String passwdLFIRequest=requestToString.replace(baseConfigFile,helpers.urlEncode("../../../../../../../../../../../../../../../etc/passwd"));    IHttpRequestResponse passwdRequestResponse=cb.makeHttpRequest(baseRequestResponse.getHttpService(),helpers.stringToBytes(passwdLFIRequest));    byte[] passwdResponse=passwdRequestResponse.getResponse();    if (isEtcPasswdFile(passwdResponse,helpers)) {      cb.addScanIssue(new CustomScanIssue(baseRequestResponse.getHttpService(),requestInfo.getUrl(),passwdRequestResponse,"Local File Include - /etc/passwd Retrieved","J2EEScan was able to retrieve the <i>/etc/passwd</i> resource through the LFI vulnerability","Analyse the issue to understand if the vulnerability is caused by an infrastructure component or by an application issue.",Risk.High,Confidence.Firm));    }  } catch (  Exception ex) {    ex.printStackTrace(stderr);  }  try {    String shadowLFIRequest=requestToString.replace(baseConfigFile,helpers.urlEncode("../../../../../../../../../../../../../../../etc/shadow"));    IHttpRequestResponse shadowRequestResponse=cb.makeHttpRequest(baseRequestResponse.getHttpService(),helpers.stringToBytes(shadowLFIRequest));    byte[] shadowResponse=shadowRequestResponse.getResponse();    if (isEtcShadowFile(shadowResponse,helpers)) {      cb.addScanIssue(new CustomScanIssue(baseRequestResponse.getHttpService(),requestInfo.getUrl(),shadowRequestResponse,"Local File Include - /etc/shadow Retrieved","J2EEScan was able tor retrieve the <i>/etc/shadow</i> resource " + "through the LFI vulnerability. " + "It seems that the remote web server/application server "+ "process is running with too much privileges.<br /><br />"+ "<b>References</b>:<br /><br />"+ "http://cwe.mitre.org/data/definitions/250.html<br />","Verify the remote process privileges",Risk.High,Confidence.Certain));    }  } catch (  Exception ex) {    ex.printStackTrace(stderr);  }  try {    String ibmwebLFIRequest=requestToString.replace(baseConfigFile,"ibm-web-ext.xml");    IHttpRequestResponse ibmwebRequestResponse=cb.makeHttpRequest(baseRequestResponse.getHttpService(),helpers.stringToBytes(ibmwebLFIRequest));    byte[] ibmwebResponse=ibmwebRequestResponse.getResponse();    if (HTTPMatcher.isIBMWebExtFileWAS7(ibmwebResponse,helpers)) {      cb.addScanIssue(new CustomScanIssue(baseRequestResponse.getHttpService(),requestInfo.getUrl(),ibmwebRequestResponse,"Local File Include - ibm-web-ext.xml Retrieved","J2EEScan was able tor retrieve the IBM Application Server ibm-web-ext.xml resource through the LFI vulnerability.",LFI_REMEDY,Risk.Low,Confidence.Certain));    }  } catch (  Exception ex) {    ex.printStackTrace(stderr);  }  try {    String ibmwebLFIRequest=requestToString.replace(baseConfigFile,"ibm-web-ext.xmi");    IHttpRequestResponse ibmwebRequestResponse=cb.makeHttpRequest(baseRequestResponse.getHttpService(),helpers.stringToBytes(ibmwebLFIRequest));    byte[] ibmwebResponse=ibmwebRequestResponse.getResponse();    if (HTTPMatcher.isIBMWebExtFileWAS6(ibmwebResponse,helpers)) {      cb.addScanIssue(new CustomScanIssue(baseRequestResponse.getHttpService(),requestInfo.getUrl(),ibmwebRequestResponse,"Local File Include - ibm-web-ext.xmi Retrieved","J2EEScan was able tor retrieve the IBM Application Server ibm-web-ext.xmi resource through the LFI vulnerability.",LFI_REMEDY,Risk.Low,Confidence.Certain));    }  } catch (  Exception ex) {    ex.printStackTrace(stderr);  }  try {    String ibmwebLFIRequest=requestToString.replace(baseConfigFile,"ibm-ws-bnd.xml");    IHttpRequestResponse ibmwebRequestResponse=cb.makeHttpRequest(baseRequestResponse.getHttpService(),helpers.stringToBytes(ibmwebLFIRequest));    byte[] ibmwebResponse=ibmwebRequestResponse.getResponse();    if (isIBMWSBinding(ibmwebResponse,helpers)) {      cb.addScanIssue(new CustomScanIssue(baseRequestResponse.getHttpService(),requestInfo.getUrl(),ibmwebRequestResponse,"Local File Include - ibm-ws-bnd.xml Retrieved","J2EEScan was able tor retrieve the IBM Application Server ibm-ws-bnd.xml resource through the LFI vulnerability.",LFI_REMEDY,Risk.Low,Confidence.Certain));    }  } catch (  Exception ex) {    ex.printStackTrace(stderr);  }  try {    String weblogicLFIRequest=requestToString.replace(baseConfigFile,"weblogic.xml");    IHttpRequestResponse weblogicRequestResponse=cb.makeHttpRequest(baseRequestResponse.getHttpService(),helpers.stringToBytes(weblogicLFIRequest));    byte[] weblogicResponse=weblogicRequestResponse.getResponse();    if (HTTPMatcher.isWebLogicFile(weblogicResponse,helpers)) {      cb.addScanIssue(new CustomScanIssue(baseRequestResponse.getHttpService(),requestInfo.getUrl(),weblogicRequestResponse,"Local File Include - weblogic.xml Retrieved","J2EEScan was able tor retrieve the weblogic.xml resource through the LFI vulnerability.",LFI_REMEDY,Risk.High,Confidence.Certain));    }  } catch (  Exception ex) {    ex.printStackTrace(stderr);  }  try {    final List<String> STRUTS_PATHS=Arrays.asList(helpers.urlEncode("classes/struts.xml"),"struts-config.xml","struts.xml");    for (    String STRUT_PATH : STRUTS_PATHS) {      String strutLFIRequest=requestToString.replace(baseConfigFile,STRUT_PATH);      IHttpRequestResponse strutsRequestResponse=cb.makeHttpRequest(baseRequestResponse.getHttpService(),helpers.stringToBytes(strutLFIRequest));      byte[] strutsResponse=strutsRequestResponse.getResponse();      if (isApacheStrutsConfigFile(strutsResponse,helpers)) {        cb.addScanIssue(new CustomScanIssue(baseRequestResponse.getHttpService(),requestInfo.getUrl(),strutsRequestResponse,"Local File Include - struts.xml Retrieved","J2EEScan was able tor retrieve the Apache Struts configuration file through the LFI vulnerability.",LFI_REMEDY,Risk.High,Confidence.Certain));      }    }  } catch (  Exception ex) {    ex.printStackTrace(stderr);  }  try {    final List<String> APPLICATION_CONTEXTS_PATHS=Arrays.asList("applicationContext.xml",helpers.urlEncode("classes/applicationContext.xml"),"application-context.xml");    for (    String APPLICATION_CONTEXT_PATH : APPLICATION_CONTEXTS_PATHS) {      String strutLFIRequest=requestToString.replace(baseConfigFile,APPLICATION_CONTEXT_PATH);      IHttpRequestResponse springRequestResponse=cb.makeHttpRequest(baseRequestResponse.getHttpService(),helpers.stringToBytes(strutLFIRequest));      byte[] springResponse=springRequestResponse.getResponse();      if (isSpringContextConfigFile(springResponse,helpers)) {        cb.addScanIssue(new CustomScanIssue(baseRequestResponse.getHttpService(),requestInfo.getUrl(),springRequestResponse,"Local File Include - Spring Application Context Retrieved","J2EEScan was able tor retrieve the Spring Application Context" + "  configuration file through the LFI vulnerability.",LFI_REMEDY,Risk.High,Confidence.Certain));      }    }  } catch (  Exception ex) {    ex.printStackTrace(stderr);  }}  }
class C{  public Industry(int id,String name){  this(id,name,null);}  }
class C{  public void mark(){  mark(1);}  }
class C{  public long value(){  return value;}  }
class C{  private static void attemptRetryOnException(String logPrefix,Request<?> request,VolleyError exception) throws VolleyError {  RetryPolicy retryPolicy=request.getRetryPolicy();  int oldTimeout=request.getTimeoutMs();  try {    retryPolicy.retry(exception);  } catch (  VolleyError e) {    request.addMarker(String.format("%s-timeout-giveup [timeout=%s]",logPrefix,oldTimeout));    throw e;  }  request.addMarker(String.format("%s-retry [timeout=%s]",logPrefix,oldTimeout));}  }
class C{  public static String generatePassword(){  return RandomStringUtils.randomAlphanumeric(DEF_COUNT);}  }
class C{  public boolean isMemory(){  return memory;}  }
class C{  private static void uaRIMGe(MatrixBlock in,MatrixBlock out,double[] bv,int[] bvi,BinaryOperator bOp) throws DMLRuntimeException {  int ind0=uarimaxGe(0.0,bv,bvi,bOp);  int m=in.rlen;  for (int i=0; i < m; i++) {    double ai=in.quickGetValue(i,0);    int ind=(ai == 0) ? ind0 : uarimaxGe(ai,bv,bvi,bOp);    out.quickSetValue(i,0,ind);  }}  }
class C{  public GuildRoleDeleteHandler(ImplDiscordAPI api){  super(api,true,"GUILD_ROLE_DELETE");}  }
class C{  public SRuntimeFactoryImpl(){  super();}  }
class C{  public boolean digitalRead(int pin){  if (!isConnected()) {    onError(OneSheeldError.DEVICE_NOT_CONNECTED);    return false;  } else   if (isUpdatingFirmware()) {    onError(OneSheeldError.FIRMWARE_UPDATE_IN_PROGRESS);    return false;  }  if (isPinDebuggingEnabled)   Log.i("Device " + this.name + ": Digital read from pin "+ pin+ ".");  if (pin >= 20 || pin < 0)   throw new IncorrectPinException("The specified pin number is incorrect, are you sure you specified it correctly?");  return getDigitalPinStatus(pin);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:19.217 -0400",hash_original_method="35E182D2C7EEB0F8214080478407DB5E",hash_generated_method="B3CA99D2C95F40EB28F19456D85CA93B") public boolean isRightToLeft(){  return direction == UBiDiDirection_UBIDI_RTL;}  }
class C{  void cp(Deque<Block> code){  EdgeMap<Expr> uses=findUses(code);  Map<Expr,Expr> map=new HashMap<Expr,Expr>();  Set<Expr> work=new TreeSet<Expr>();  for (  Block b : code) {    if (!b.must_isolate_block) {      for (      Expr e : b)       if (e.op == OP_phi || e.op == OP_dup)       work.add(e);    }  }  while (!work.isEmpty()) {    Expr e=getExpr(work);    rename(e,e.args,map,uses);    rename(e,e.scopes,map,uses);    rename(e,e.locals,map,uses);    if (e.op == OP_dup) {      map.put(e,e.locals[0]);      work.addAll(uses.get(e));    } else     if (e.op == OP_phi) {      assert (e.args.length == e.pred.length);      for (int j=e.pred.length - 1; j >= 0; j--)       if (!code.contains(e.pred[j].from))       e.removePhiInput(j);      Expr a=null;      for (int j=e.pred.length - 1; j >= 0; j--) {        if (e.args[j] != e && e.args[j] != a)         if (a == null)         a=e.args[j]; else {          a=null;          break;        }      }      if (a != null && map.get(e) != a) {        map.put(e,a);        work.addAll(uses.get(e));        e.clearEffect();      }    }  }  for (  Block b : code) {    for (    Expr e : b.exprs) {      if (e.is_live_out) {        b.addLiveOut(e);      }    }  }}  }
class C{  public boolean hasDeleteTargetPermission(){  return hasTargetReadPermission() && permissionService.hasPermission(SpPermission.DELETE_TARGET);}  }
class C{  public static boolean intersectRayCircle(double originX,double originY,double dirX,double dirY,double centerX,double centerY,double radiusSquared,Vector2d result){  double Lx=centerX - originX;  double Ly=centerY - originY;  double tca=Lx * dirX + Ly * dirY;  double d2=Lx * Lx + Ly * Ly - tca * tca;  if (d2 > radiusSquared)   return false;  double thc=Math.sqrt(radiusSquared - d2);  double t0=tca - thc;  double t1=tca + thc;  if (t0 < t1 && t1 >= 0.0) {    result.x=t0;    result.y=t1;    return true;  }  return false;}  }
class C{  public boolean execute(INode n){  if (!isValid(n)) {    return false;  }  FreeCellNode state=(FreeCellNode)n;  Column col=state.cols[nth];  col.remove();  if (col.num == 0) {    state.sortMap();  }  state.insertFoundation(card);  return true;}  }
class C{  public final void endDocument() throws org.xml.sax.SAXException {  flushPending();  if (m_doIndent && !m_isprevtext) {    try {      outputLineSep();    } catch (    IOException e) {      throw new SAXException(e);    }  }  flushWriter();  if (m_tracer != null)   super.fireEndDoc();}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  protected boolean checkGeneratorArg(String[] argv,int currentIndex){  boolean result=true;  if (argv[currentIndex].startsWith("-")) {    String arg=argv[currentIndex].substring(1).toLowerCase();    for (int i=0; i < generatorArgs.length; i++) {      if (arg.equalsIgnoreCase(generatorArgs[i])) {        Generator gen=addGenerator(arg);        if (gen == null) {          return false;        }        result=gen.parseArgs(argv,this);        break;      }    }  }  return result;}  }
class C{  public boolean isSetStore(){  return this.store != null;}  }
class C{  public JSONArray put(int index,int value) throws JSONException {  this.put(index,new Integer(value));  return this;}  }
class C{  protected DoubleFactory1D(){}  }
class C{  public void loadScale(float x,float y,float z){  loadIdentity();  mMat[0]=x;  mMat[4]=y;  mMat[8]=z;}  }
class C{  private static Placemark createAircraftPlacemark(Position position){  Placemark placemark=Placemark.createWithImage(position,ImageSource.fromResource(R.drawable.aircraft_fighter));  placemark.getAttributes().setImageOffset(Offset.bottomCenter()).setImageScale(NORMAL_IMAGE_SCALE).setDrawLeader(true);  placemark.setHighlightAttributes(new PlacemarkAttributes(placemark.getAttributes()).setImageScale(HIGHLIGHTED_IMAGE_SCALE));  return placemark;}  }
class C{  public void testPrefixTerm() throws IOException {  Directory indexStore=getIndexStore("field",new String[]{"prefix","prefixx"});  IndexReader reader=DirectoryReader.open(indexStore);  IndexSearcher searcher=newSearcher(reader);  MultiTermQuery wq=new WildcardQuery(new Term("field","prefix*"));  assertMatches(searcher,wq,2);  wq=new WildcardQuery(new Term("field","*"));  assertMatches(searcher,wq,2);  Terms terms=MultiFields.getTerms(searcher.getIndexReader(),"field");  assertFalse(wq.getTermsEnum(terms).getClass().getSimpleName().contains("AutomatonTermsEnum"));  reader.close();  indexStore.close();}  }
class C{  private URI createBlockConsistencyGroup(String name){  BlockConsistencyGroup cg=new BlockConsistencyGroup();  URI cgURI=URIUtil.createId(BlockConsistencyGroup.class);  cg.setId(cgURI);  cg.setLabel(name);  _dbClient.createObject(cg);  return cg.getId();}  }
class C{  public void arrayLength(){  mv.visitInsn(Opcodes.ARRAYLENGTH);}  }
class C{  public WindowSurface(EglCore eglCore,Surface surface,boolean releaseSurface){  super(eglCore);  createWindowSurface(surface);  mSurface=surface;  mReleaseSurface=releaseSurface;}  }
class C{  @DSComment("not sensitive") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:49.608 -0500",hash_original_method="85FD61C7B117729DDA17405FA5EDFA09",hash_generated_method="685D98350CD97C9342EE1C690C8DF05E") @Override public void flush() throws IOException {  super.flush();}  }
class C{  public Item(final int id,@NonNull final CharSequence title){  super(id,title);  ensureAtLeast(id,0,"The id must be at least 0");  ensureNotNull(title,"The title may not be null");  ensureNotEmpty(title,"The title may not be empty");  this.icon=null;  this.enabled=true;}  }
class C{  @Override public void execute(){  getArgs().setCounter(0);  executeImpl();}  }
class C{  public void draw(Canvas canvas){  for (int i=0; i < mHolders.size(); ++i) {    Drawable drawable=get(i).getTopLevelDrawable();    if (drawable != null) {      drawable.draw(canvas);    }  }}  }
class C{  private Transform matchUtility(Class type) throws Exception {  if (type == Date.class) {    return new DateTransform(type);  }  if (type == Locale.class) {    return new LocaleTransform();  }  if (type == Currency.class) {    return new CurrencyTransform();  }  if (type == GregorianCalendar.class) {    return new GregorianCalendarTransform();  }  if (type == TimeZone.class) {    return new TimeZoneTransform();  }  if (type == AtomicInteger.class) {    return new AtomicIntegerTransform();  }  if (type == AtomicLong.class) {    return new AtomicLongTransform();  }  return null;}  }
class C{  @Override public double downsideDeviation(){  return Math.sqrt(downsideVariance());}  }
class C{  public static boolean isImsConnected(){  Core core=Core.getInstance();  if (core == null) {    return false;  }  ImsNetworkInterface networkInterface=core.getImsModule().getCurrentNetworkInterface();  return networkInterface != null && networkInterface.isRegistered();}  }
class C{  private TaskList performFileProtectionAction(FileReplicationParam param,URI id,String op){  TaskResourceRep taskResp=null;  TaskList taskList=new TaskList();  FileCopy copy=param.getCopies().get(0);  if (copy.getType().equalsIgnoreCase(FileTechnologyType.REMOTE_MIRROR.name()) || copy.getType().equalsIgnoreCase(FileTechnologyType.LOCAL_MIRROR.name())) {    taskResp=performProtectionAction(id,op);    taskList.getTaskList().add(taskResp);    return taskList;  } else {    throw APIException.badRequests.invalidCopyType(copy.getType());  }}  }
class C{  protected List<Callable<RuleStats>> newMutationTasks(final IStep step,final IJoinNexus joinNexus,final Map<String,IBuffer<ISolution[]>> buffers){  if (log.isDebugEnabled())   log.debug("program=" + step.getName());  final List<Callable<RuleStats>> tasks;  if (step.isRule()) {    if (step.isRule() && ((IRule)step).getHead() == null) {      throw new IllegalArgumentException("No head for this rule: " + step);    }    tasks=new ArrayList<Callable<RuleStats>>(1);    final IRule rule=(IRule)step;    final IBuffer<ISolution[]> buffer=buffers.get(rule.getHead().getOnlyRelationName());    final Callable<RuleStats> task=joinNexus.getRuleTaskFactory(false,rule).newTask(rule,joinNexus,buffer);    tasks.add(task);  } else {    final IProgram program=(IProgram)step;    final boolean parallel=program.isParallel();    tasks=new ArrayList<Callable<RuleStats>>(program.stepCount());    final Iterator<IStep> itr=program.steps();    while (itr.hasNext()) {      final IRule rule=(IRule)itr.next();      if (rule.getHead() == null) {        throw new IllegalArgumentException("No head for this rule: " + rule);      }      final IBuffer<ISolution[]> buffer=buffers.get(rule.getHead().getOnlyRelationName());      final IStepTask task=joinNexus.getRuleTaskFactory(parallel,rule).newTask(rule,joinNexus,buffer);      if (!parallel || joinNexus.forceSerialExecution()) {        tasks.add(new RunRuleAndFlushBufferTask(task,buffer));      } else {        tasks.add(task);      }    }  }  if (log.isDebugEnabled()) {    log.debug("Created " + tasks.size() + " mutation tasks: action="+ action);  }  return tasks;}  }
class C{  @Override public void flushBuffer() throws IOException {  getDelegate().flushBuffer();  logStream().flush();}  }
class C{  public ThumbnailParameter(double widthScalingFactor,double heightScalingFactor,Region sourceRegion,boolean keepAspectRatio,String outputFormat,String outputFormatType,float outputQuality,int imageType,List<ImageFilter> filters,Resizer resizer,boolean fitWithinDimensions,boolean useExifOrientation){  this(null,widthScalingFactor,heightScalingFactor,sourceRegion,keepAspectRatio,outputFormat,outputFormatType,outputQuality,imageType,filters,new FixedResizerFactory(resizer),fitWithinDimensions,useExifOrientation);  validateScalingFactor();}  }
class C{  public void testMatchLjava_security_cert_X509CRL(){  X509CRLSelector selector=new X509CRLSelector();  assertFalse("The null object should not match",selector.match((X509CRL)null));}  }
class C{  public static void drawAxis(SVGPlot plot,Element parent,LinearScale scale,double x1,double y1,double x2,double y2,LabelStyle labelstyle,StyleLibrary style) throws CSSNamingConflict {  assert (parent != null);  Element line=plot.svgLine(x1,y1,x2,y2);  SVGUtil.setCSSClass(line,CSS_AXIS);  parent.appendChild(line);  final double tx=x2 - x1;  final double ty=y2 - y1;  final double tw=ty * 0.01;  final double th=-tx * 0.01;  final boolean labels, ticks;switch (labelstyle) {case LEFTHAND:case RIGHTHAND:    labels=true;  ticks=true;break;case NOLABELS:labels=false;ticks=true;break;case ENDLABEL:case NOTHING:default :labels=false;ticks=false;}Alignment pos=Alignment.LL;if (labels) {double angle=Math.atan2(ty,tx);if (angle > 2.6) {pos=labelstyle == LabelStyle.RIGHTHAND ? Alignment.RC : Alignment.LC;} else if (angle > 0.5) {pos=labelstyle == LabelStyle.RIGHTHAND ? Alignment.RR : Alignment.LL;} else if (angle > -0.5) {pos=labelstyle == LabelStyle.RIGHTHAND ? Alignment.RC : Alignment.LC;} else if (angle > -2.6) {pos=labelstyle == LabelStyle.RIGHTHAND ? Alignment.RL : Alignment.LR;} else {pos=labelstyle == LabelStyle.RIGHTHAND ? Alignment.RC : Alignment.LC;}}double textvoff=style.getTextSize(StyleLibrary.AXIS_LABEL) * .35;if (ticks || labels) {int sw=1;{int numticks=(int)((scale.getMax() - scale.getMin()) / scale.getRes());double tlen=Math.sqrt(tx * tx + ty * ty);double minl=10 * style.getLineWidth(StyleLibrary.AXIS_TICK);if (sw * tlen / numticks < minl) {for (int i=2; i <= (numticks >> 1); i++) {if (numticks % i == 0) {if (i * tlen / numticks >= minl) {sw=i;break;}}}}if (sw * tlen / numticks < minl) {sw=(int)Math.floor(minl * numticks / tlen);}}for (double tick=scale.getMin(); tick <= scale.getMax() + scale.getRes() / 10; tick+=sw * scale.getRes()) {double x=x1 + tx * scale.getScaled(tick);double y=y1 + ty * scale.getScaled(tick);if (ticks) {Element tickline=plot.svgLine(x - tw,y - th,x + tw,y + th);SVGUtil.setAtt(tickline,SVGConstants.SVG_CLASS_ATTRIBUTE,CSS_AXIS_TICK);parent.appendChild(tickline);}if (labels) {double tex=x;double tey=y;switch (pos) {case LL:case LC:case LR:tex=x + tw * 2.5;tey=y + th * 2.5 + textvoff;break;case RL:case RC:case RR:tex=x - tw * 2.5;tey=y - th * 2.5 + textvoff;}Element text=plot.svgText(tex,tey,scale.formatValue(tick));text.setAttribute(SVGConstants.SVG_CLASS_ATTRIBUTE,CSS_AXIS_LABEL);switch (pos) {case LL:case RL:text.setAttribute(SVGConstants.SVG_TEXT_ANCHOR_ATTRIBUTE,SVGConstants.SVG_START_VALUE);break;case LC:case RC:text.setAttribute(SVGConstants.SVG_TEXT_ANCHOR_ATTRIBUTE,SVGConstants.SVG_MIDDLE_VALUE);break;case LR:case RR:text.setAttribute(SVGConstants.SVG_TEXT_ANCHOR_ATTRIBUTE,SVGConstants.SVG_END_VALUE);break;}parent.appendChild(text);}}}if (labelstyle == LabelStyle.ENDLABEL) {{Element text=plot.svgText(x1 - tx * 0.02,y1 - ty * 0.02 + textvoff,scale.formatValue(scale.getMin()));text.setAttribute(SVGConstants.SVG_CLASS_ATTRIBUTE,CSS_AXIS_LABEL);text.setAttribute(SVGConstants.SVG_TEXT_ANCHOR_ATTRIBUTE,SVGConstants.SVG_MIDDLE_VALUE);parent.appendChild(text);}{Element text=plot.svgText(x2 + tx * 0.02,y2 + ty * 0.02 + textvoff,scale.formatValue(scale.getMax()));text.setAttribute(SVGConstants.SVG_CLASS_ATTRIBUTE,CSS_AXIS_LABEL);text.setAttribute(SVGConstants.SVG_TEXT_ANCHOR_ATTRIBUTE,SVGConstants.SVG_MIDDLE_VALUE);parent.appendChild(text);}}setupCSSClasses(plot,plot.getCSSClassManager(),style);}  }
class C{  public static Document createXMLValidationList(ValidationResults results,int initRow,int enabled,Locale locale,List fieldsInfo,String caseSensitive){  Document doc=createDocument(initRow,results,RBUtil.getInstance(locale).getProperty(I18N_VALIDATIONUSECASE_TYPESUBJECT),"","",fieldsInfo,locale,caseSensitive,0,0);  Element root=doc.getRootElement();  Element nodeList=root.addElement(XML_NODELIST_TEXT);  if (results.getResults().isEmpty()) {    addNode(Integer.MIN_VALUE,"","","",null,"",Integer.MIN_VALUE,"",nodeList,"");  } else {    ScrCa scr=null;    ScrCaeu scrEu=null;    ScrCagl scrGl=null;    ScrCact scrCt=null;    Boolean bool=null;    for (Iterator it=results.getResults().iterator(); it.hasNext(); ) {      Object scrCaAux=it.next();      if (scrCaAux instanceof ScrCa) {        scr=(ScrCa)scrCaAux;        if (scr.getEnabled().equals(new Integer(1))) {          bool=Boolean.TRUE;        } else {          bool=Boolean.FALSE;        }        addNode(scr.getId().intValue(),scr.getMatter(),scr.getCode(),"",bool,"",Integer.MIN_VALUE,"",nodeList,"");      } else       if (scrCaAux instanceof ScrCaeu) {        scrEu=(ScrCaeu)scrCaAux;        if (scrEu.getEnabled().equals(new Integer(1))) {          bool=Boolean.TRUE;        } else {          bool=Boolean.FALSE;        }        addNode(scrEu.getId().intValue(),scrEu.getMatter(),scrEu.getCode(),"",bool,"",Integer.MIN_VALUE,"",nodeList,"");      } else       if (scrCaAux instanceof ScrCagl) {        scrGl=(ScrCagl)scrCaAux;        if (scrGl.getEnabled().equals(new Integer(1))) {          bool=Boolean.TRUE;        } else {          bool=Boolean.FALSE;        }        addNode(scrGl.getId().intValue(),scrGl.getMatter(),scrGl.getCode(),"",bool,"",Integer.MIN_VALUE,"",nodeList,"");      } else       if (scrCaAux instanceof ScrCact) {        scrCt=(ScrCact)scrCaAux;        if (scrCt.getEnabled().equals(new Integer(1))) {          bool=Boolean.TRUE;        } else {          bool=Boolean.FALSE;        }        addNode(scrCt.getId().intValue(),scrCt.getMatter(),scrCt.getCode(),"",bool,"",Integer.MIN_VALUE,"",nodeList,"");      }    }  }  return doc;}  }
class C{  @Override public void execute(String[] params,Server server,Conversation conversation,IRCService service) throws CommandException {  if (params.length == 2) {    showCommandDetails(service,server,conversation,params[1]);  } else   if (params.length == 1) {    showAllCommands(service,server,conversation);  } else {    throw new CommandException(service.getString(R.string.invalid_number_of_params));  }}  }
class C{  public ExecutionVariable createExecutionVariable(){  ExecutionVariableImpl executionVariable=new ExecutionVariableImpl();  return executionVariable;}  }
class C{  public SortingParams by(final String pattern){  return by(SafeEncoder.encode(pattern));}  }
class C{  protected final <T extends IgniteSpiManagementMBean>void registerMBean(String gridName,T impl,Class<T> mbeanItf) throws IgniteSpiException {  MBeanServer jmx=ignite.configuration().getMBeanServer();  assert mbeanItf == null || mbeanItf.isInterface();  assert jmx != null;  try {    spiMBean=U.registerMBean(jmx,gridName,"SPIs",getName(),impl,mbeanItf);    if (log.isDebugEnabled())     log.debug("Registered SPI MBean: " + spiMBean);  } catch (  JMException e) {    throw new IgniteSpiException("Failed to register SPI MBean: " + spiMBean,e);  }}  }
class C{  private String randomString(){  return ("test" + Math.random()).substring(0,10);}  }
class C{  @SuppressWarnings("unchecked") private static void loadExtensions(final ClassLoader classLoader){  for (  final Map.Entry<Class,Set<Class>> entry : definitionMap.entrySet()) {    final ServiceLoader<?> serviceLoader=ServiceLoader.load(entry.getKey(),classLoader);    for (    final Object o : serviceLoader) {      registerServiceClass(o.getClass(),extensionClassloaderLookup,classLoader,entry.getValue());    }  }}  }
class C{  public void requestFocus(){}  }
class C{  protected void isEntityReferneceWellFormed(EntityReference node){  if (!isXMLName(node.getNodeName(),fIsXMLVersion11)) {    String msg=Utils.messages.createMessage(MsgKey.ER_WF_INVALID_CHARACTER_IN_NODE_NAME,new Object[]{"EntityReference",node.getNodeName()});    if (fErrorHandler != null) {      fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER_IN_NODE_NAME,null,null,null));    }  }  Node parent=node.getParentNode();  DocumentType docType=node.getOwnerDocument().getDoctype();  if (docType != null) {    NamedNodeMap entities=docType.getEntities();    for (int i=0; i < entities.getLength(); i++) {      Entity ent=(Entity)entities.item(i);      String nodeName=node.getNodeName() == null ? "" : node.getNodeName();      String nodeNamespaceURI=node.getNamespaceURI() == null ? "" : node.getNamespaceURI();      String entName=ent.getNodeName() == null ? "" : ent.getNodeName();      String entNamespaceURI=ent.getNamespaceURI() == null ? "" : ent.getNamespaceURI();      if (parent.getNodeType() == Node.ELEMENT_NODE) {        if (entNamespaceURI.equals(nodeNamespaceURI) && entName.equals(nodeName)) {          if (ent.getNotationName() != null) {            String msg=Utils.messages.createMessage(MsgKey.ER_WF_REF_TO_UNPARSED_ENT,new Object[]{node.getNodeName()});            if (fErrorHandler != null) {              fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_REF_TO_UNPARSED_ENT,null,null,null));            }          }        }      }      if (parent.getNodeType() == Node.ATTRIBUTE_NODE) {        if (entNamespaceURI.equals(nodeNamespaceURI) && entName.equals(nodeName)) {          if (ent.getPublicId() != null || ent.getSystemId() != null || ent.getNotationName() != null) {            String msg=Utils.messages.createMessage(MsgKey.ER_WF_REF_TO_EXTERNAL_ENT,new Object[]{node.getNodeName()});            if (fErrorHandler != null) {              fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_REF_TO_EXTERNAL_ENT,null,null,null));            }          }        }      }    }  }}  }
class C{  public Transaction fromWire(WireFormat.Reader reader) throws IOException {  Transaction.Builder builder=new Transaction.Builder();  builder=builder.version(reader.readUint32());  long nin=reader.readVarInt();  if (nin > 0) {    List<TransactionInput> inputs=new ArrayList<>();    for (int i=0; i < nin; ++i) {      inputs.add(TransactionInput.fromWire(reader));    }    builder=builder.inputs(inputs);  }  long nout=reader.readVarInt();  if (nout > 0) {    List<TransactionOutput> outputs=new ArrayList<>();    if (flags.contains(WireFormatFlags.NATIVE_ASSET)) {      for (int i=0; i < nout; ++i) {        outputs.add(ColoredTransactionOutput.fromWireNativeAsset(reader));      }    } else {      for (int i=0; i < nout; ++i) {        outputs.add(TransactionOutput.fromWire(reader));      }    }    builder=builder.outputs(outputs);  }  return builder.lockTime(reader.readUint32()).build();}  }
class C{  public T caseDocletElement(DocletElement object){  return null;}  }
class C{  public synchronized void addThresholdDataListener(ThresholdDataListener cl){  m_thresholdListeners.addElement(cl);}  }
class C{  public void unwind(GridCacheContext ctx){  List<CA> q;synchronized (undeploys) {    q=undeploys.remove(ctx.name());  }  if (q == null)   return;  int cnt=0;  for (  CA c : q) {    c.apply();    cnt++;  }  if (log.isDebugEnabled())   log.debug("Unwound undeploys count: " + cnt);}  }
class C{  public void addMovingPoint(){  Projection proj=getProjection();  if (proj == null) {    return;  }  int numOfSpritesToAdd=1;  if (spinner != null) {    try {      numOfSpritesToAdd=Integer.parseInt(spinner.getValue().toString());    } catch (    NumberFormatException nfe) {      spinner.setValue(1);    }  }  double mapHeight=proj.getHeight();  double mapWidth=proj.getWidth();  for (int i=0; i < numOfSpritesToAdd; i++) {    double ranY=(Math.random() * mapHeight);    double ranX=(Math.random() * mapWidth);    Point2D newLoc=proj.inverse(ranX,ranY);    OMPoint point=new OMPoint(newLoc.getY(),newLoc.getX(),5);    point.setFillPaint(Color.red);    movingPoints.add(point);  }  spriteCountLabel.setText(Integer.toString(movingPoints.size()));  doPrepare();}  }
class C{  public void remove(){}  }
class C{  public DelimitedTextTableWriter(String delimiter){  this(delimiter,true);}  }
class C{  public File resolveFileName(final String name){  File absolute=new File(name);  if (absolute.isAbsolute()) {    return absolute;  }  if (processLocation instanceof FileProcessLocation) {    File processFile=((FileProcessLocation)processLocation).getFile();    return Tools.getFile(processFile.getParentFile(),name);  } else {    String homeName;    String resolvedir=System.getProperty("rapidminer.test.resolvedir");    if (resolvedir == null) {      homeName=System.getProperty("user.home");    } else {      homeName=resolvedir;    }    if (homeName != null) {      File file=new File(new File(homeName),name);      getLogger().warning("Process not attached to a file. Resolving against user directory: '" + file + "'.");      return file;    } else {      getLogger().warning("Process not attached to a file. Trying abolute filename '" + name + "'.");      return new File(name);    }  }}  }
class C{  public static SendableChatActionBuilder builder(){  return new SendableChatActionBuilder();}  }
class C{  public ExtractMethodRefactoring(ICompilationUnit unit,int selectionStart,int selectionLength){  fCUnit=unit;  fRoot=null;  fMethodName="extracted";  fSelectionStart=selectionStart;  fSelectionLength=selectionLength;  fVisibility=-1;}  }
class C{  public void limitTransAndScale(Matrix matrix,RectF content){  float[] vals=new float[9];  matrix.getValues(vals);  float curTransX=vals[Matrix.MTRANS_X];  float curScaleX=vals[Matrix.MSCALE_X];  float curTransY=vals[Matrix.MTRANS_Y];  float curScaleY=vals[Matrix.MSCALE_Y];  mScaleX=Math.max(mMinScaleX,curScaleX);  mScaleY=Math.max(mMinScaleY,curScaleY);  float width=0f;  float height=0f;  if (content != null) {    width=content.width();    height=content.height();  }  float maxTransX=-width * (mScaleX - 1f);  float newTransX=Math.min(Math.max(curTransX,maxTransX - mTransOffsetX),mTransOffsetX);  float maxTransY=height * (mScaleY - 1f);  float newTransY=Math.max(Math.min(curTransY,maxTransY + mTransOffsetY),-mTransOffsetY);  vals[Matrix.MTRANS_X]=newTransX;  vals[Matrix.MSCALE_X]=mScaleX;  vals[Matrix.MTRANS_Y]=newTransY;  vals[Matrix.MSCALE_Y]=mScaleY;  matrix.setValues(vals);}  }
class C{  public static FXGLogger createDefaultLogger(){  return new SystemLogger();}  }
class C{  public void add(K key,V value){  if (key == null) {    return;  }  K[] keys=_keys;  int size=_size;  for (int i=size - 1; i >= 0; i--) {    if (key.equals(keys[i])) {      _values[i].add(value);      return;    }  }  if (_keys.length <= size) {    int newSize=Math.min(2 * size,_maxCapacity);    if (newSize <= _size) {      log.warning("Overflow map");      return;    }    K[] newKeys=(K[])new Object[newSize];    List<V>[] newValues=(List<V>[])new List[newSize];    System.arraycopy(_keys,0,newKeys,0,_keys.length);    System.arraycopy(_values,0,newValues,0,_values.length);    _keys=newKeys;    _values=newValues;  }  _keys[size]=key;  _values[size]=new ArrayList<V>();  _values[size].add(value);  _size=size + 1;}  }
class C{  public boolean itemPlaceAllowed(int slot,ItemStack stack){  return getSlotType(slot) != SlotType.RESULT;}  }
class C{  public static Date tomorrowAt(int hour,int minute,int second){  validateSecond(second);  validateMinute(minute);  validateHour(hour);  Date date=new Date();  Calendar c=Calendar.getInstance();  c.setTime(date);  c.setLenient(true);  c.add(Calendar.DAY_OF_YEAR,1);  c.set(Calendar.HOUR_OF_DAY,hour);  c.set(Calendar.MINUTE,minute);  c.set(Calendar.SECOND,second);  c.set(Calendar.MILLISECOND,0);  return c.getTime();}  }
class C{  public label addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public static String normalizeReference(String reference){  IScanner scanner=ToolFactory.createScanner(false,false,false,false);  scanner.setSource(reference.toCharArray());  StringBuffer sb=new StringBuffer();  try {    int tokenType=scanner.getNextToken();    while (tokenType != ITerminalSymbols.TokenNameEOF) {      sb.append(scanner.getRawTokenSource());      tokenType=scanner.getNextToken();    }  } catch (  InvalidInputException e) {    Assert.isTrue(false,reference);  }  reference=sb.toString();  return reference;}  }
class C{  public int nscan(){  return sharedQueue.nscan();}  }
class C{  public static final <ReferenceType extends WordReference>ByteBuffer compressIndex(final ReferenceContainer<WordReference> inputContainer,final ReferenceContainer<WordReference> excludeContainer,final long maxtime){  final long timeout=maxtime == Long.MAX_VALUE ? Long.MAX_VALUE : (maxtime < 0) ? Long.MAX_VALUE : System.currentTimeMillis() + maxtime;  final TreeMap<String,StringBuilder> doms=new TreeMap<String,StringBuilder>();synchronized (inputContainer) {    final Iterator<WordReference> i=inputContainer.entries();    WordReference iEntry;    String dom, mod;    StringBuilder paths;    while (i.hasNext()) {      iEntry=i.next();      if ((excludeContainer != null) && (excludeContainer.getReference(iEntry.urlhash()) != null))       continue;      dom=(iEntry instanceof WordReferenceVars) ? ((WordReferenceVars)iEntry).hosthash() : ASCII.String(iEntry.urlhash(),6,6);      mod=ASCII.String(iEntry.urlhash(),0,6);      if ((paths=doms.get(dom)) == null) {        doms.put(dom,new StringBuilder(30).append(mod));      } else {        doms.put(dom,paths.append(mod));      }      if (System.currentTimeMillis() > timeout)       break;    }  }  final ByteBuffer bb=new ByteBuffer(inputContainer.size() * 6);  bb.append('{');  final Iterator<Map.Entry<String,StringBuilder>> i=doms.entrySet().iterator();  Map.Entry<String,StringBuilder> entry;  while (i.hasNext()) {    entry=i.next();    bb.append(entry.getKey());    bb.append(':');    bb.append(entry.getValue().toString());    if (System.currentTimeMillis() > timeout)     break;    if (i.hasNext())     bb.append(',');  }  bb.append('}');  return bb;}  }
class C{  protected boolean _findCanonicalLabelling(boolean tmpPreviouslyEqualToMin){  boolean foundNewMinimum=false;  IntArrayList underlyingVertexPosThatExtendTmp=getUnderlyingVertexPosThatExtendTmp();  IntCursor underlyingVertexPosThatExtendTmpCursor=underlyingVertexPosThatExtendTmp.cursor();  while (underlyingVertexPosThatExtendTmpCursor.moveNext()) {    int underlyingVertexPosToAdd=underlyingVertexPosThatExtendTmpCursor.elem();    int newTmpVertexPos=addTmpVertex(underlyingVertexPosToAdd);    int newTmpVertexLabel=underlyingPosToLabel.getUnchecked(underlyingVertexPosToAdd);    IntSet neighbourUnderlyingPositions=underlyingAdjacencyList.get(underlyingVertexPosToAdd);    IntCursor neighbourUnderlyingPositionsCursor=neighbourUnderlyingPositions.cursor();    PatternEdgeArrayList edgesToAdd=createPatternEdgeArrayList();    while (neighbourUnderlyingPositionsCursor.moveNext()) {      int neighbourUnderlyingPos=neighbourUnderlyingPositionsCursor.elem();      int neighbourTmpPos=tmpLabelling.get(neighbourUnderlyingPos);      if (neighbourTmpPos == -1) {        continue;      }      addCandidatePatternEdges(edgesToAdd,neighbourUnderlyingPos,neighbourTmpPos,underlyingVertexPosToAdd,newTmpVertexPos);    }    if (edgesToAdd.size() > 0 || newTmpVertexPos == 0) {      edgesToAdd.sort();      boolean promisingTmpPattern=true;      boolean equalToMinTmpPattern=tmpPreviouslyEqualToMin;      if (foundMinimum) {        int comparisonResult;        if (newTmpVertexPos > 0) {          PatternEdgeArrayList minEquivalentEdges=minEdges.get(newTmpVertexPos);          comparisonResult=edgesToAdd.compareTo(minEquivalentEdges);        } else {          int minFirstUnderlyingVertexPos=minInverseLabelling.get(newTmpVertexPos);          int minFirstUnderylingVertexLabel=underlyingPosToLabel.getUnchecked(minFirstUnderlyingVertexPos);          comparisonResult=Integer.compare(newTmpVertexLabel,minFirstUnderylingVertexLabel);        }        equalToMinTmpPattern=equalToMinTmpPattern && comparisonResult == 0;        if (tmpPreviouslyEqualToMin && !equalToMinTmpPattern) {          if (comparisonResult > 0) {            promisingTmpPattern=false;          }        }      }      if (promisingTmpPattern) {        addTmpEdges(edgesToAdd);        if (tmpLabelling.size() == getNumberOfVertices()) {          if (!equalToMinTmpPattern || !foundMinimum) {            copyTmpToMin();            foundNewMinimum=true;            vertexPositionEquivalences.clear();          }          IntIntCursor tmpLabellingCursor=tmpLabelling.cursor();          while (tmpLabellingCursor.moveNext()) {            int underlyingPos=tmpLabellingCursor.key();            int tmpEquivalentPos=tmpLabellingCursor.value();            int underlyingPosAccordingToMin=minInverseLabelling.get(tmpEquivalentPos);            vertexPositionEquivalences.addEquivalence(underlyingPos,underlyingPosAccordingToMin);          }        } else {          boolean foundNewMinimumInChild=_findCanonicalLabelling(equalToMinTmpPattern);          if (foundNewMinimumInChild) {            tmpPreviouslyEqualToMin=true;            foundNewMinimum=true;          }        }        removeLastTmpEdges();      } else {        edgesToAdd.reclaim();      }    }    removeLastTmpVertex();  }  underlyingVertexPosThatExtendTmp.reclaim();  return foundNewMinimum;}  }
class C{  public static Array listToArrayTrim(String list,String delimiter,int[] info){  if (delimiter.length() == 1)   return listToArrayTrim(list,delimiter.charAt(0),info);  if (list.length() == 0)   return new ArrayImpl();  char[] del=delimiter.toCharArray();  char c;  outer:   while (list.length() > 0) {    c=list.charAt(0);    for (int i=0; i < del.length; i++) {      if (c == del[i]) {        info[0]++;        list=list.substring(1);        continue outer;      }    }    break;  }  int len;  outer:   while (list.length() > 0) {    c=list.charAt(list.length() - 1);    for (int i=0; i < del.length; i++) {      if (c == del[i]) {        info[1]++;        len=list.length();        list=list.substring(0,len - 1 < 0 ? 0 : len - 1);        continue outer;      }    }    break;  }  return listToArray(list,delimiter);}  }
class C{  public static JPanel createDialogButtonPanel(JButton jbPositive,JButton jbNegative,JButton jbOther,boolean resizable){  return createDialogButtonPanel(jbPositive,jbNegative,(jbOther == null ? null : new JButton[]{jbOther}),resizable);}  }
class C{  protected void changeLayers(ContainerEvent e){  if (!doContainerChange) {    return;  }  Component[] comps=this.getComponents();  int ncomponents=comps.length;  Layer[] newLayers=new Layer[ncomponents];  System.arraycopy(comps,0,newLayers,0,ncomponents);  if (logger.isLoggable(Level.FINE)) {    debugmsg("changeLayers() - firing change");  }  firePropertyChange(LayersProperty,currentLayers,newLayers);  for (  Layer layer : addedLayers) {    layer.added(this);  }  addedLayers.removeAllElements();  currentLayers=newLayers;}  }
class C{  public static CategoryLabelPositions createDownRotationLabelPositions(double angle){  return new CategoryLabelPositions(new CategoryLabelPosition(RectangleAnchor.BOTTOM,TextBlockAnchor.BOTTOM_RIGHT,TextAnchor.BOTTOM_RIGHT,angle,CategoryLabelWidthType.RANGE,0.50f),new CategoryLabelPosition(RectangleAnchor.TOP,TextBlockAnchor.TOP_LEFT,TextAnchor.TOP_LEFT,angle,CategoryLabelWidthType.RANGE,0.50f),new CategoryLabelPosition(RectangleAnchor.RIGHT,TextBlockAnchor.TOP_RIGHT,TextAnchor.TOP_RIGHT,angle,CategoryLabelWidthType.RANGE,0.50f),new CategoryLabelPosition(RectangleAnchor.LEFT,TextBlockAnchor.BOTTOM_LEFT,TextAnchor.BOTTOM_LEFT,angle,CategoryLabelWidthType.RANGE,0.50f));}  }
class C{  public static double cauchy(){  return Math.tan(Math.PI * (uniform() - 0.5));}  }
class C{  public static <T>List<T> distributedSample(List<T> items,int m){  if (items.size() <= m) {    return new ArrayList<>(items);  }  List<T> res=new ArrayList<>(m);  int n=items.size();  int step=n / m;  for (int i=0; i < n; i+=step) {    res.add(items.get(i));  }  return res;}  }
class C{  final void advance(){  if (next == null)   throw new NoSuchElementException();  lastReturned=next;  for (; ; ) {    next=next.next;    if (next == null)     break;    Object x=next.value;    if (x != null && x != next)     break;  }}  }
class C{  public String toString(Tag tag){  return createHTML(readFile(tag.text()));}  }
class C{  private void groupBuild(Node r){  if (m_groupNum > 0) {    m_groupNum=0;    m_groups[0].m_p=r;    m_groupNum++;    for (int noa=0; noa < m_groupNum; noa++) {      groupFind(m_groups[noa].m_p,noa);    }  }}  }
class C{  final boolean unlink(Index<K,V> succ){  return node.value != null && casRight(succ,succ.right);}  }
class C{  public static String flagsToString(Flags flags){  StringBuilder b=new StringBuilder();  if (flags.contains(Flag.ANSWERED)) {    b.append("ANSWERED ");  }  if (flags.contains(Flag.DELETED)) {    b.append("DELETED ");  }  if (flags.contains(Flag.DRAFT)) {    b.append("DRAFT ");  }  if (flags.contains(Flag.FLAGGED)) {    b.append("FLAGGED ");  }  if (flags.contains(Flag.RECENT)) {    b.append("RECENT ");  }  if (flags.contains(Flag.SEEN)) {    b.append("SEEN ");  }  if (flags.contains(Flag.USER)) {    b.append("USER ");  }  for (  String flag : flags.getUserFlags()) {    b.append(flag);    b.append(" ");  }  return b.toString();}  }
class C{  public static void expand(ByteBuffer in,ByteBuffer out){  do {    int ctrl=in.get() & 255;    if (ctrl < MAX_LITERAL) {      ctrl++;      for (int i=0; i < ctrl; i++) {        out.put(in.get());      }    } else {      int len=ctrl >> 5;      if (len == 7) {        len+=in.get() & 255;      }      len+=2;      ctrl=-((ctrl & 0x1f) << 8) - 1;      ctrl-=in.get() & 255;      ctrl+=out.position();      for (int i=0; i < len; i++) {        out.put(out.get(ctrl++));      }    }  } while (out.position() < out.capacity());}  }
class C{  public void stop() throws IllegalStateException {  Log.d(TAG,"stop");  if (mediaPlayer != null) {    currentState=State.STOPPED;    mediaPlayer.stop();  } else   throw new RuntimeException("Media Player is not initialized");}  }
class C{  protected MapNode selectRandomOkNode(List<MapNode> nodes){  MapNode n;  do {    n=nodes.get(rng.nextInt(nodes.size()));  } while (okMapNodeTypes != null && !n.isType(okMapNodeTypes));  return n;}  }
class C{  public ChatLinearLayoutManager(Context context){  this(context,VERTICAL,false);}  }
class C{  private static void err(String message){  out.println(message);}  }
class C{  public void testExplode(){  String[] testStrings={"a:b","ab:cd","ab::cd",":ab:cd","ab:cd:",":ab:cd:","::ab::cd::","a","ab",""};  for (  String test : testStrings) {    String[] resultExplode=StringUtils.explode(test,':');    String[] resultSplit=test.split(":");    assertEquals("Different result lengths with test string \"" + test + "\"",resultSplit.length,resultExplode.length);    for (int i=0; i < resultExplode.length; i++) {      assertEquals("Different result part " + i + " when testing string: \""+ test+ "\"",resultSplit[i],resultExplode[i]);    }  }}  }
class C{  public Registry loadRegistry(){  try {    Input input=new Input(new FileInputStream(Registry.HOME_DATA_FILE));    RegistryDescriptor registryDescriptor=kryo.readObjectOrNull(input,RegistryDescriptor.class);    if (registryDescriptor == null) {      registryDescriptor=new RegistryDescriptor();    }    return DescriptorConverter.convert(registryDescriptor);  } catch (  FileNotFoundException e) {    e.printStackTrace();  }  return new Registry();}  }
class C{  public void add(int[] vals,int offset,int length){  ensureCapacity(_pos + length);  System.arraycopy(vals,offset,_data,_pos,length);  _pos+=length;}  }
class C{  public Boolean isHotAddRemove(){  return hotAddRemove;}  }
class C{  public ProtocolVersion(int major,int minor){  this.minor=minor;  this.major=major;}  }
class C{  public void run(){  Logger.debug(getClass().getName(),"Launching " + agent);  List peers=DRM.getContributions();  try {    final String pre=agent.getType() + "." + agent.getJob();    if (!StringCollections.containsPrefix(getNames(),pre) || peers.size() == 0) {      type="local";      return;    }    int p=(int)Math.floor(Math.random() * (peers.size() + 1));    ContributionBox peer=null;    if (p < peers.size())     peer=(ContributionBox)peers.get(p);    if (p == peers.size() || peer.contributor.name.equals(name)) {      type="random local";      return;    } else {      type="random";      target=peer.contributor;    }  } catch (  Throwable e) {    thr=e;  } finally {    if (thr != null) {      status=ERROR;    } else     if (target == null) {      Logger.debug(getClass().getName(),"Launch type: '" + type + "'");      IRequest r=launch("DIRECT",agent,target);      status=r.getStatus();      thr=r.getThrowable();    } else {      Logger.debug(getClass().getName(),"Launch type '" + type + "' to "+ target);      IRequest r=launch("DIRECT",agent,target);      try {        ((Thread)r).join();      } catch (      Exception e) {      }      status=r.getStatus();      thr=r.getThrowable();    }  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MNote[").append(get_ID()).append(",AD_Message_ID=").append(getAD_Message_ID()).append(",").append(getReference()).append(",Processed=").append(isProcessed()).append("]");  return sb.toString();}  }
class C{  @Override public void runSingleIteration(){  LOG.info("SALSA: running right subgraph iteration");  salsaSubgraphInternalState.traverseSubgraphRightToLeft();}  }
class C{  @Override synchronized public void stop(){  if (mRunTask != null && !mRunTask.isCancelled()) {    if (mLogVerbose)     Log.v(TAG,"Stopping graph.");    mRunTask.cancel(false);  }}  }
class C{  private ArrayList<Long> buildCursorPositionMapping(final long[] order,final String columnName,final List<? extends Object> extraData){  ArrayList<Long> missingIds=new ArrayList<Long>();  mOrderedPositions=new ArrayList<Integer>(mCursor.getCount());  mExtraData=new ArrayList<Object>();  mMapCursorPositions=new HashMap<Long,Integer>(mCursor.getCount());  final int idPosition=mCursor.getColumnIndex(columnName);  if (mCursor.moveToFirst()) {    do {      mMapCursorPositions.put(mCursor.getLong(idPosition),mCursor.getPosition());    } while (mCursor.moveToNext());    for (int i=0; order != null && i < order.length; i++) {      final long id=order[i];      if (mMapCursorPositions.containsKey(id)) {        mOrderedPositions.add(mMapCursorPositions.get(id));        mMapCursorPositions.remove(id);        if (extraData != null) {          mExtraData.add(extraData.get(i));        }      } else {        missingIds.add(id);      }    }    mCursor.moveToFirst();  }  return missingIds;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected final void showFileExistsErrorMessage(@NotNull VirtualFile file,@NotNull String id,@NotNull Project project){  final String message;  if (file.isDirectory()) {    message=PyBundle.message("refactoring.error.directory.exists",file.getName());  } else {    message=PyBundle.message("refactoring.error.file.exists",file.getName());  }  CommonRefactoringUtil.showErrorMessage(RefactoringBundle.message("error.title"),message,id,project);}  }
class C{  @Override public synchronized void acceptDataSet(DataSetEvent e){  m_busy=true;  if (m_completed == null) {    m_completed=new HashMap<Object,Instances>();    m_tempBatchFiles=new HashMap<Object,File>();  }  Object source=e.getSource();  if (m_completed.containsKey(source)) {    if (m_log != null && !e.isStructureOnly()) {      String msg=statusMessagePrefix() + "Resetting appender.";      m_log.statusMessage(msg);      m_log.logMessage("[Appender] " + msg + " New batch for an incoming connection "+ "detected before "+ "all incoming connections have sent data!");    }    m_completed=new HashMap<Object,Instances>();    m_tempBatchFiles=new HashMap<Object,File>();  }  Instances header=new Instances(e.getDataSet(),0);  m_completed.put(source,header);  try {    File tmpF=File.createTempFile("weka",SerializedInstancesLoader.FILE_EXTENSION);    tmpF.deleteOnExit();    ObjectOutputStream oos=new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream(tmpF)));    oos.writeObject(e.getDataSet());    oos.flush();    oos.close();    m_tempBatchFiles.put(source,tmpF);  } catch (  IOException e1) {    stop();    e1.printStackTrace();    String msg=statusMessagePrefix() + "ERROR: unable to save batch instances to temp file";    if (m_log != null) {      m_log.statusMessage(msg);      m_log.logMessage("[Appender] " + e1.getMessage());    }    m_busy=false;    return;  }  if (m_completed.size() == m_listenees.size()) {    try {      Instances output=makeOutputHeader();      if (m_log != null) {        String msg=statusMessagePrefix() + "Making output header";        m_log.statusMessage(msg);        m_log.logMessage("[Appender] " + msg);      }      for (      File f : m_tempBatchFiles.values()) {        ObjectInputStream ois=new ObjectInputStream(new BufferedInputStream(new FileInputStream(f)));        Instances temp=(Instances)ois.readObject();        ois.close();        for (int i=0; i < temp.numInstances(); i++) {          Instance converted=makeOutputInstance(output,temp.instance(i));          output.add(converted);        }      }      DataSetEvent d=new DataSetEvent(this,output);      notifyDataListeners(d);    } catch (    Exception ex) {      stop();      ex.printStackTrace();      String msg=statusMessagePrefix() + "ERROR: unable to output appended data set";      if (m_log != null) {        m_log.statusMessage(msg);        m_log.logMessage("[Appender] " + ex.getMessage());      }    }    m_completed=null;    m_tempBatchFiles=null;    if (m_log != null) {      m_log.statusMessage(statusMessagePrefix() + "Finished");    }  }  m_busy=false;}  }
class C{  boolean checkEOF() throws IOException {switch (getConnectionState()) {case cs_START:    throw new SocketException("Socket is not connected");case cs_HANDSHAKE:case cs_DATA:case cs_RENEGOTIATE:case cs_SENT_CLOSE:  return false;case cs_APP_CLOSED:throw new SocketException("Socket is closed");case cs_ERROR:case cs_CLOSED:default :if (closeReason == null) {return true;}IOException e=new SSLException("Connection has been shutdown: " + closeReason);e.initCause(closeReason);throw e;}}  }
class C{  public UndertowFraction enableAJP(){  this.enableAJP=true;  return this;}  }
class C{  private void drawConditions(MoveStep step,Point stepPos,Graphics graph,Color col){  if (step.isEvading()) {    String evade=Messages.getString("BoardView1.Evade");    graph.setFont(new Font("SansSerif",Font.PLAIN,12));    int evadeX=(stepPos.x + 42) - (graph.getFontMetrics(graph.getFont()).stringWidth(evade) / 2);    graph.setColor(Color.darkGray);    graph.drawString(evade,evadeX,stepPos.y + 64);    graph.setColor(col);    graph.drawString(evade,evadeX - 1,stepPos.y + 63);  }  if (step.isRolled()) {    String roll=Messages.getString("BoardView1.Roll");    graph.setFont(new Font("SansSerif",Font.PLAIN,12));    int rollX=(stepPos.x + 42) - (graph.getFontMetrics(graph.getFont()).stringWidth(roll) / 2);    graph.setColor(Color.darkGray);    graph.drawString(roll,rollX,stepPos.y + 18);    graph.setColor(col);    graph.drawString(roll,rollX - 1,stepPos.y + 17);  }}  }
class C{  public void initialize(){  ((NodeEventTarget)eventTarget).addEventListenerNS(eventNamespaceURI,eventType,this,false,null);}  }
class C{  public Object invoke(String methodName,Class<?>[] paramClasses,Object[] paramValues){  Object result;  result=null;  if (getInterpreter() != null) {    result=invoke(getInterpreter(),methodName,paramClasses,paramValues);  }  return result;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_activity_1_();}  }
class C{  public byte[] toByteArray(){  if (index > 0xFFFF) {    throw new RuntimeException("Class file too large!");  }  int size=24 + 2 * interfaceCount;  int nbFields=0;  FieldWriter fb=firstField;  while (fb != null) {    ++nbFields;    size+=fb.getSize();    fb=(FieldWriter)fb.fv;  }  int nbMethods=0;  MethodWriter mb=firstMethod;  while (mb != null) {    ++nbMethods;    size+=mb.getSize();    mb=(MethodWriter)mb.mv;  }  int attributeCount=0;  if (bootstrapMethods != null) {    ++attributeCount;    size+=8 + bootstrapMethods.length;    newUTF8("BootstrapMethods");  }  if (ClassReader.SIGNATURES && signature != 0) {    ++attributeCount;    size+=8;    newUTF8("Signature");  }  if (sourceFile != 0) {    ++attributeCount;    size+=8;    newUTF8("SourceFile");  }  if (sourceDebug != null) {    ++attributeCount;    size+=sourceDebug.length + 4;    newUTF8("SourceDebugExtension");  }  if (enclosingMethodOwner != 0) {    ++attributeCount;    size+=10;    newUTF8("EnclosingMethod");  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;    size+=6;    newUTF8("Deprecated");  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((version & 0xFFFF) < Opcodes.V1_5 || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {      ++attributeCount;      size+=6;      newUTF8("Synthetic");    }  }  if (innerClasses != null) {    ++attributeCount;    size+=8 + innerClasses.length;    newUTF8("InnerClasses");  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;    size+=8 + anns.getSize();    newUTF8("RuntimeVisibleAnnotations");  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;    size+=8 + ianns.getSize();    newUTF8("RuntimeInvisibleAnnotations");  }  if (attrs != null) {    attributeCount+=attrs.getCount();    size+=attrs.getSize(this,null,0,-1,-1);  }  size+=pool.length;  ByteVector out=new ByteVector(size);  out.putInt(0xCAFEBABE).putInt(version);  out.putShort(index).putByteArray(pool.data,0,pool.length);  int mask=Opcodes.ACC_DEPRECATED | ACC_SYNTHETIC_ATTRIBUTE | ((access & ACC_SYNTHETIC_ATTRIBUTE) / TO_ACC_SYNTHETIC);  out.putShort(access & ~mask).putShort(name).putShort(superName);  out.putShort(interfaceCount);  for (int i=0; i < interfaceCount; ++i) {    out.putShort(interfaces[i]);  }  out.putShort(nbFields);  fb=firstField;  while (fb != null) {    fb.put(out);    fb=(FieldWriter)fb.fv;  }  out.putShort(nbMethods);  mb=firstMethod;  while (mb != null) {    mb.put(out);    mb=(MethodWriter)mb.mv;  }  out.putShort(attributeCount);  if (bootstrapMethods != null) {    out.putShort(newUTF8("BootstrapMethods"));    out.putInt(bootstrapMethods.length + 2).putShort(bootstrapMethodsCount);    out.putByteArray(bootstrapMethods.data,0,bootstrapMethods.length);  }  if (ClassReader.SIGNATURES && signature != 0) {    out.putShort(newUTF8("Signature")).putInt(2).putShort(signature);  }  if (sourceFile != 0) {    out.putShort(newUTF8("SourceFile")).putInt(2).putShort(sourceFile);  }  if (sourceDebug != null) {    int len=sourceDebug.length - 2;    out.putShort(newUTF8("SourceDebugExtension")).putInt(len);    out.putByteArray(sourceDebug.data,2,len);  }  if (enclosingMethodOwner != 0) {    out.putShort(newUTF8("EnclosingMethod")).putInt(4);    out.putShort(enclosingMethodOwner).putShort(enclosingMethod);  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(newUTF8("Deprecated")).putInt(0);  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((version & 0xFFFF) < Opcodes.V1_5 || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {      out.putShort(newUTF8("Synthetic")).putInt(0);    }  }  if (innerClasses != null) {    out.putShort(newUTF8("InnerClasses"));    out.putInt(innerClasses.length + 2).putShort(innerClassesCount);    out.putByteArray(innerClasses.data,0,innerClasses.length);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (attrs != null) {    attrs.put(this,null,0,-1,-1,out);  }  if (invalidFrames) {    ClassWriter cw=new ClassWriter(COMPUTE_FRAMES);    new ClassReader(out.data).accept(cw,ClassReader.SKIP_FRAMES);    return cw.toByteArray();  }  return out.data;}  }
class C{  public static String format(Object value,int valueType){  if (value == null) {    return "?";  }  if (Ontology.ATTRIBUTE_VALUE_TYPE.isA(valueType,Ontology.NOMINAL)) {    return (String)value;  }  if (Ontology.ATTRIBUTE_VALUE_TYPE.isA(valueType,Ontology.NUMERICAL)) {    return formatIntegerIfPossible((Double)value);  }  if (Ontology.ATTRIBUTE_VALUE_TYPE.isA(valueType,Ontology.DATE)) {    return formatDate((Date)value);  }  if (Ontology.ATTRIBUTE_VALUE_TYPE.isA(valueType,Ontology.TIME)) {    return formatTime((Date)value);  }  if (Ontology.ATTRIBUTE_VALUE_TYPE.isA(valueType,Ontology.DATE_TIME)) {    return formatDateTime((Date)value);  }  return "?";}  }
class C{  public PacketBUTTON(String map_name,String button_name,boolean repeat,boolean down,boolean queue,short amount,byte axis){  super(PT_BUTTON);  short code=0;  short flags=BT_USE_NAME;  appendPayload(code,map_name,button_name,repeat,down,queue,amount,axis,flags);}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (loadFactor <= 0 || Float.isNaN(loadFactor))   throw new StreamCorruptedException("Illegal Load: " + loadFactor);  int origlength=s.readInt();  int elements=s.readInt();  if (elements < 0)   throw new StreamCorruptedException("Illegal # of Elements: " + elements);  origlength=Math.max(origlength,(int)(elements / loadFactor) + 1);  int length=(int)((elements + elements / 20) / loadFactor) + 3;  if (length > elements && (length & 1) == 0)   length--;  length=Math.min(length,origlength);  table=new Entry<?,?>[length];  threshold=(int)Math.min(length * loadFactor,MAX_ARRAY_SIZE + 1);  count=0;  for (; elements > 0; elements--) {    @SuppressWarnings("unchecked") K key=(K)s.readObject();    @SuppressWarnings("unchecked") V value=(V)s.readObject();    reconstitutionPut(table,key,value);  }}  }
class C{  public InvitationExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public void gcspyGatherData(LinearSpaceDriver driver){  driver.setRange(space.getStart(),limit);  this.linearScan(driver.getScanner());}  }
class C{  public static byte[] decodeWebSafe(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,WEBSAFE_DECODABET);}  }
class C{  private void checkInternalMods(){  if (modules.getModList() == null)   return;  for (  final ModuleBean mod : modules.getModList()) {    final Path intModPath=LEnv.PATH_MODS.resolve(mod.getFolder()).resolve(mod.getVersion().toString());    if (Files.exists(intModPath) && Files.isDirectory(intModPath))     validateModule(mod,false); else     updateModule(mod,false,false);    acknowledgeModChecked();  }}  }
class C{  private static Script scriptFromString(String scriptString,ScriptType scriptType){  return new Script(scriptString,scriptType);}  }
class C{  public static MatrixChar_N_ReducerGroups computeMatrixCharacteristics(JobConf job,byte[] inputIndexes,String dataGenInstructions,String instructionsInMapper,String reblockInstructions,String aggInstructionsInReducer,String aggBinInstructions,String otherInstructionsInReducer,byte[] resultIndexes,HashSet<Byte> mapOutputIndexes,boolean forMMCJ) throws DMLRuntimeException {  HashSet<Byte> intermediateMatrixIndexes=new HashSet<Byte>();  HashMap<Byte,MatrixCharacteristics> dims=new HashMap<Byte,MatrixCharacteristics>();  for (  byte i : inputIndexes) {    MatrixCharacteristics dim=new MatrixCharacteristics(getNumRows(job,i),getNumColumns(job,i),getNumRowsPerBlock(job,i),getNumColumnsPerBlock(job,i),getNumNonZero(job,i));    dims.put(i,dim);  }  DataGenMRInstruction[] dataGenIns=null;  dataGenIns=MRInstructionParser.parseDataGenInstructions(dataGenInstructions);  if (dataGenIns != null) {    for (    DataGenMRInstruction ins : dataGenIns) {      MatrixCharacteristics.computeDimension(dims,ins);    }  }  MRInstruction[] insMapper=MRInstructionParser.parseMixedInstructions(instructionsInMapper);  if (insMapper != null) {    for (    MRInstruction ins : insMapper) {      MatrixCharacteristics.computeDimension(dims,ins);      if (ins instanceof UnaryMRInstructionBase) {        UnaryMRInstructionBase tempIns=(UnaryMRInstructionBase)ins;        setIntermediateMatrixCharactristics(job,tempIns.input,dims.get(tempIns.input));        intermediateMatrixIndexes.add(tempIns.input);      } else       if (ins instanceof AppendMInstruction) {        AppendMInstruction tempIns=(AppendMInstruction)ins;        setIntermediateMatrixCharactristics(job,tempIns.input1,dims.get(tempIns.input1));        intermediateMatrixIndexes.add(tempIns.input1);      } else       if (ins instanceof AppendGInstruction) {        AppendGInstruction tempIns=(AppendGInstruction)ins;        setIntermediateMatrixCharactristics(job,tempIns.input1,dims.get(tempIns.input1));        intermediateMatrixIndexes.add(tempIns.input1);      } else       if (ins instanceof BinaryMInstruction) {        BinaryMInstruction tempIns=(BinaryMInstruction)ins;        setIntermediateMatrixCharactristics(job,tempIns.input1,dims.get(tempIns.input1));        intermediateMatrixIndexes.add(tempIns.input1);      } else       if (ins instanceof AggregateBinaryInstruction) {        AggregateBinaryInstruction tempIns=(AggregateBinaryInstruction)ins;        setIntermediateMatrixCharactristics(job,tempIns.input1,dims.get(tempIns.input1));        intermediateMatrixIndexes.add(tempIns.input1);      } else       if (ins instanceof MapMultChainInstruction) {        MapMultChainInstruction tempIns=(MapMultChainInstruction)ins;        setIntermediateMatrixCharactristics(job,tempIns.getInput1(),dims.get(tempIns.getInput2()));        intermediateMatrixIndexes.add(tempIns.getInput1());      } else       if (ins instanceof PMMJMRInstruction) {        PMMJMRInstruction tempIns=(PMMJMRInstruction)ins;        setIntermediateMatrixCharactristics(job,tempIns.input2,dims.get(tempIns.input2));        intermediateMatrixIndexes.add(tempIns.input2);      }    }  }  ReblockInstruction[] reblockIns=MRInstructionParser.parseReblockInstructions(reblockInstructions);  if (reblockIns != null) {    for (    ReblockInstruction ins : reblockIns) {      MatrixCharacteristics.computeDimension(dims,ins);      setMatrixCharactristicsForReblock(job,ins.output,dims.get(ins.output));    }  }  Instruction[] aggIns=MRInstructionParser.parseAggregateInstructions(aggInstructionsInReducer);  if (aggIns != null) {    for (    Instruction ins : aggIns) {      MatrixCharacteristics.computeDimension(dims,(MRInstruction)ins);      MRInstruction mrins=(MRInstruction)ins;      boolean found=false;      for (      byte b : resultIndexes) {        if (b == mrins.output) {          found=true;          break;        }      }      if (!found) {        setIntermediateMatrixCharactristics(job,mrins.output,dims.get(mrins.output));        intermediateMatrixIndexes.add(mrins.output);      }    }  }  long numReduceGroups=0;  AggregateBinaryInstruction[] aggBinIns=getAggregateBinaryInstructions(job);  if (aggBinIns != null) {    for (    AggregateBinaryInstruction ins : aggBinIns) {      MatrixCharacteristics dim1=dims.get(ins.input1);      MatrixCharacteristics dim2=dims.get(ins.input2);      setMatrixCharactristicsForBinAgg(job,ins.input1,dim1);      setMatrixCharactristicsForBinAgg(job,ins.input2,dim2);      MatrixCharacteristics.computeDimension(dims,ins);      if (forMMCJ)       numReduceGroups=(long)Math.ceil((double)dim1.getCols() / (double)dim1.getColsPerBlock());    }  }  if (!forMMCJ) {    ArrayList<Long> xs=new ArrayList<Long>(mapOutputIndexes.size());    ArrayList<Long> ys=new ArrayList<Long>(mapOutputIndexes.size());    for (    byte idx : mapOutputIndexes) {      MatrixCharacteristics dim=dims.get(idx);      long x=(long)Math.ceil((double)dim.getRows() / (double)dim.getRowsPerBlock());      long y=(long)Math.ceil((double)dim.getCols() / (double)dim.getColsPerBlock());      int i=0;      boolean toadd=true;      while (i < xs.size()) {        if ((x >= xs.get(i) && y > ys.get(i)) || (x > xs.get(i) && y >= ys.get(i))) {          xs.remove(i);          ys.remove(i);        } else         if (x <= xs.get(i) && y <= ys.get(i)) {          toadd=false;          break;        } else         i++;      }      if (toadd) {        xs.add(x);        ys.add(y);      }    }    TreeMap<Long,Long> map=new TreeMap<Long,Long>();    for (int i=0; i < xs.size(); i++)     map.put(xs.get(i),ys.get(i));    numReduceGroups=0;    long prev=0;    for (    Entry<Long,Long> e : map.entrySet()) {      numReduceGroups+=(e.getKey() - prev) * e.getValue();      prev=e.getKey();    }  }  MRInstruction[] insReducer=MRInstructionParser.parseMixedInstructions(otherInstructionsInReducer);  if (insReducer != null) {    for (    MRInstruction ins : insReducer) {      MatrixCharacteristics.computeDimension(dims,ins);      if (ins instanceof UnaryMRInstructionBase) {        UnaryMRInstructionBase tempIns=(UnaryMRInstructionBase)ins;        setIntermediateMatrixCharactristics(job,tempIns.input,dims.get(tempIns.input));        intermediateMatrixIndexes.add(tempIns.input);      } else       if (ins instanceof RemoveEmptyMRInstruction) {        RemoveEmptyMRInstruction tempIns=(RemoveEmptyMRInstruction)ins;        setIntermediateMatrixCharactristics(job,tempIns.input1,dims.get(tempIns.input1));        intermediateMatrixIndexes.add(tempIns.input1);      }      boolean found=false;      for (      byte b : resultIndexes) {        if (b == ins.output) {          found=true;          break;        }      }      if (!found) {        setIntermediateMatrixCharactristics(job,ins.output,dims.get(ins.output));        intermediateMatrixIndexes.add(ins.output);      }    }  }  setIntermediateMatrixIndexes(job,intermediateMatrixIndexes);  for (  byte tag : mapOutputIndexes)   setMatrixCharactristicsForMapperOutput(job,tag,dims.get(tag));  MatrixCharacteristics[] stats=new MatrixCharacteristics[resultIndexes.length];  MatrixCharacteristics resultDims;  for (int i=0; i < resultIndexes.length; i++) {    resultDims=dims.get(resultIndexes[i]);    stats[i]=resultDims;    setMatrixCharactristicsForOutput(job,resultIndexes[i],stats[i]);  }  return new MatrixChar_N_ReducerGroups(stats,numReduceGroups);}  }
class C{  public final void add(IndexableField field){  fields.add(field);}  }
class C{  public void addComment(Comment comment){  addProperty(comment);}  }
class C{  public void prepareDraw(){  if (parentNode != null)   parentNode.prepareDraw(); else {    setAbsoluteRotations();    setVectors();  }}  }
class C{  public String htmlAll(boolean setIncluded){  StringBuilder sb=new StringBuilder();  for (  Node node : nodes) {    sb.append(setIncluded ? node.getHtml() : node.getInnerHtml());  }  return sb.toString();}  }
class C{  public final boolean isProtReady(){  return (state == STATE_DONE);}  }
class C{  public static void writeInputStreamToFile(InputStream inputStream,File file){  OutputStream outStream=null;  try {    outStream=new FileOutputStream(file);    byte[] buffer=new byte[8 * 1024];    int bytesRead;    while ((bytesRead=inputStream.read(buffer)) != -1) {      outStream.write(buffer,0,bytesRead);    }  } catch (  Exception e) {    fail();  } finally {    try {      inputStream.close();      outStream.close();    } catch (    Exception e) {      fail();    }  }}  }
class C{  public void testShortOptions(){  ArgumentParser parser=new ArgumentParser(new String[]{"-a","-b","-cd","-efg","-h=j","-kl=m","-nop=qrs","-tu=vw xyz","=","-","-=","-1","-2=","-=3","-=4=5"},true);  Iterator<String> iter=parser.iterator();  assertEquals("-a",iter.next());  assertEquals("-b",iter.next());  assertEquals("-c",iter.next());  assertEquals("-d",iter.next());  assertEquals("-e",iter.next());  assertEquals("-f",iter.next());  assertEquals("-g",iter.next());  assertEquals("-h",iter.next());  assertEquals("j",iter.next());  assertEquals("-k",iter.next());  assertEquals("-l",iter.next());  assertEquals("m",iter.next());  assertEquals("-n",iter.next());  assertEquals("-o",iter.next());  assertEquals("-p",iter.next());  assertEquals("qrs",iter.next());  assertEquals("-t",iter.next());  assertEquals("-u",iter.next());  assertEquals("vw xyz",iter.next());  assertEquals("=",iter.next());  assertEquals("-",iter.next());  assertEquals("-=",iter.next());  assertEquals("-1",iter.next());  assertEquals("-2",iter.next());  assertEquals("",iter.next());  assertEquals("-=3",iter.next());  assertEquals("-=4=5",iter.next());  assertIteratorAtEnd(iter);}  }
class C{  private Node<Key> merge(Node<Key> h,Node<Key> x,Node<Key> y){  if (x == null && y == null)   return h; else   if (x == null)   h.sibling=merge(y,null,y.sibling); else   if (y == null)   h.sibling=merge(x,x.sibling,null); else   if (x.order < y.order)   h.sibling=merge(x,x.sibling,y); else   h.sibling=merge(y,x,y.sibling);  return h;}  }
class C{  @SuppressWarnings("ManualArrayToCollectionCopy") public void addExistingIds(Collection<IgniteUuid> col,boolean relaxed){  if (relaxed) {    col.add(ids[lastExistingIdx]);    if (lastExistingIdx == ids.length - 1 && lastExistingIdx > 0)     col.add(ids[lastExistingIdx - 1]);  } else {    for (int i=0; i <= lastExistingIdx; i++)     col.add(ids[i]);  }}  }
class C{  private void makeFPRPrimaryForThisNode(){  PartitionedRegion partitionedRegion=model.getPartitionedRegion();  List<FixedPartitionAttributesImpl> FPAs=partitionedRegion.getFixedPartitionAttributesImpl();  InternalDistributedMember targetId=partitionedRegion.getDistributionManager().getId();  Member target=model.getMember(targetId);  for (  Bucket bucket : model.getBuckets()) {    if (bucket != null) {      for (      FixedPartitionAttributesImpl fpa : FPAs) {        if (fpa.hasBucket(bucket.getId()) && fpa.isPrimary()) {          Member source=bucket.getPrimary();          if (source != target) {            source=(source == null || source == model.INVALID_MEMBER) ? target : source;            if (logger.isDebugEnabled()) {              logger.debug("PRLM#movePrimariesForFPR: For Bucket#{}, moving primary from source {} to target {}",bucket.getId(),bucket.getPrimary(),target);            }            boolean successfulMove=model.movePrimary(new Move(source,target,bucket));            Assert.assertTrue(successfulMove," Fixed partitioned region not able to move the primary!");            if (successfulMove) {              if (logger.isDebugEnabled()) {                logger.debug("PRLM#movePrimariesForFPR: For Bucket#{}, moved primary from source {} to target {}",bucket.getId(),bucket.getPrimary(),target);              }              bucket.setPrimary(target,bucket.getPrimaryLoad());            }          }        }      }    }  }}  }
class C{  public static synchronized void sendAuthPathProto(UserLeafNode uln,RootNode root,Socket socket){  Logging.log("Sending authentication path response... ");  AuthPath authPath=buildAuthPathMsg(uln,root);  sendMsgProto(MsgType.AUTH_PATH,authPath,socket);}  }
class C{  @Nonnull public static Uri addEmptyPlaceholder(@Nonnull Size size){  Uri uri=generateUniquePlaceholderUri();  sSessionsToSizes.put(uri,new Point(size.getWidth(),size.getHeight()));  sSessionsToPlaceholderBitmap.remove(uri);  Integer currentVersion=sSessionsToPlaceholderVersions.get(uri);  sSessionsToPlaceholderVersions.put(uri,currentVersion == null ? 0 : currentVersion + 1);  return uri;}  }
class C{  private void initializeScreen(){  mListView=(ListView)findViewById(R.id.list_view_shopping_list_items);  mTextViewPeopleShopping=(TextView)findViewById(R.id.text_view_people_shopping);  mButtonShopping=(Button)findViewById(R.id.button_shopping);  Toolbar toolbar=(Toolbar)findViewById(R.id.app_bar);  setSupportActionBar(toolbar);  if (getSupportActionBar() != null) {    getSupportActionBar().setDisplayHomeAsUpEnabled(true);  }  View footer=getLayoutInflater().inflate(R.layout.footer_empty,null);  mListView.addFooterView(footer);}  }
class C{  private static boolean shouldWrite(PngChunk c,int currentGroup){  if (currentGroup == CHUNK_GROUP_2_PLTE)   return c.id.equals(ChunkHelper.PLTE);  if (currentGroup % 2 == 0)   throw new PngjOutputException("bad chunk group?");  int minChunkGroup, maxChunkGroup;  if (c.getOrderingConstraint().mustGoBeforePLTE())   minChunkGroup=maxChunkGroup=ChunksList.CHUNK_GROUP_1_AFTERIDHR; else   if (c.getOrderingConstraint().mustGoBeforeIDAT()) {    maxChunkGroup=ChunksList.CHUNK_GROUP_3_AFTERPLTE;    minChunkGroup=c.getOrderingConstraint().mustGoAfterPLTE() ? ChunksList.CHUNK_GROUP_3_AFTERPLTE : ChunksList.CHUNK_GROUP_1_AFTERIDHR;  } else {    maxChunkGroup=ChunksList.CHUNK_GROUP_5_AFTERIDAT;    minChunkGroup=ChunksList.CHUNK_GROUP_1_AFTERIDHR;  }  int preferred=maxChunkGroup;  if (c.hasPriority())   preferred=minChunkGroup;  if (ChunkHelper.isUnknown(c) && c.getChunkGroup() > 0)   preferred=c.getChunkGroup();  if (currentGroup == preferred)   return true;  if (currentGroup > preferred && currentGroup <= maxChunkGroup)   return true;  return false;}  }
class C{  public boolean isDone(){  return index > poly.npoints;}  }
class C{  public JBBPOut Byte(final byte[] value) throws IOException {  assertNotEnded();  assertArrayNotNull(value);  if (this.processCommands) {    this.outStream.write(value);  }  return this;}  }
class C{  public Section readNextSection(String titleToLookFor) throws IOException {  String title=null;  StringBuilder keyBuilder=null;  while (true) {    String line=reader.readLine();    if (line == null) {      Preconditions.checkArgument(title == null,"missing end tag (%s)",title);      return null;    }    if (keyBuilder == null) {      Matcher m=BEGIN_PATTERN.matcher(line);      if (m.matches()) {        String curTitle=m.group(1);        if (titleToLookFor == null || curTitle.equals(titleToLookFor)) {          keyBuilder=new StringBuilder();          title=curTitle;        }      }    } else {      Matcher m=END_PATTERN.matcher(line);      if (m.matches()) {        String endTitle=m.group(1);        Preconditions.checkArgument(endTitle.equals(title),"end tag (%s) doesn't match begin tag (%s)",endTitle,title);        return new Section(title,Base64.decodeBase64(keyBuilder.toString()));      }      keyBuilder.append(line);    }  }}  }
class C{  public LeaderZookeeperStateMachineEnsemble(CuratorFramework curatorClient,String basePath,boolean cleanState,int logSize){  super(curatorClient,basePath,cleanState,logSize);  this.curatorClient=curatorClient;  this.basePath=basePath;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void drawButton(AbstractButton b,Graphics g,Shape shape){  Graphics2D g2=(Graphics2D)g;  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  int h=(int)shape.getBounds().getHeight();  if (b.isEnabled()) {    if (b.getModel().isPressed() || b.getModel().isSelected()) {      Paint gp=new GradientPaint(0,0,Colors.BUTTON_BACKGROUND_PRESSED_GRADIENT_START,0,h,Colors.BUTTON_BACKGROUND_PRESSED_GRADIENT_END);      g2.setPaint(gp);    } else     if (b.getModel().isRollover()) {      Paint gp=new GradientPaint(0,0,Colors.BUTTON_BACKGROUND_ROLLOVER_GRADIENT_START,0,h,Colors.BUTTON_BACKGROUND_ROLLOVER_GRADIENT_END);      g2.setPaint(gp);    } else {      Paint gp=new GradientPaint(0,0,Colors.BUTTON_BACKGROUND_GRADIENT_START,0,h,Colors.BUTTON_BACKGROUND_GRADIENT_END);      g2.setPaint(gp);    }  } else {    Paint gp=new GradientPaint(0,0,Colors.BUTTON_BACKGROUND_DISABLED_GRADIENT_START,0,h,Colors.BUTTON_BACKGROUND_DISABLED_GRADIENT_END);    g2.setPaint(gp);  }  g2.fill(shape);}  }
class C{  public Clustering<CorrelationModel> run(Database database,Relation<V> relation){  final int dimensionality=RelationUtil.dimensionality(relation);  StepProgress stepprog=LOG.isVerbose() ? new StepProgress(3) : null;  LOG.beginStep(stepprog,1,"Preprocessing local correlation dimensionalities and partitioning data");  ERiCNeighborPredicate<V>.Instance npred=new ERiCNeighborPredicate<V>(settings).instantiate(database,relation);  CorePredicate.Instance<DBIDs> cpred=new MinPtsCorePredicate(settings.minpts).instantiate(database);  Clustering<Model> copacResult=new GeneralizedDBSCAN.Instance<>(npred,cpred,false).run();  LOG.beginStep(stepprog,2,"Extract correlation clusters");  List<List<Cluster<CorrelationModel>>> clusterMap=extractCorrelationClusters(copacResult,relation,dimensionality,npred);  if (LOG.isDebugging()) {    StringBuilder msg=new StringBuilder("Step 2: Extract correlation clusters...");    for (int corrDim=0; corrDim < clusterMap.size(); corrDim++) {      List<Cluster<CorrelationModel>> correlationClusters=clusterMap.get(corrDim);      msg.append("\n\ncorrDim ").append(corrDim);      for (      Cluster<CorrelationModel> cluster : correlationClusters) {        msg.append("\n  cluster ").append(cluster).append(", ids: ").append(cluster.getIDs().size());      }    }    LOG.debugFine(msg.toString());  }  if (LOG.isVerbose()) {    int clusters=0;    for (    List<Cluster<CorrelationModel>> correlationClusters : clusterMap) {      clusters+=correlationClusters.size();    }    LOG.verbose(clusters + " clusters extracted.");  }  LOG.beginStep(stepprog,3,"Building hierarchy");  Clustering<CorrelationModel> clustering=new Clustering<>("ERiC clustering","eric-clustering");  buildHierarchy(clustering,clusterMap,npred);  if (LOG.isDebugging()) {    StringBuilder msg=new StringBuilder("Step 3: Build hierarchy");    for (int corrDim=0; corrDim < clusterMap.size(); corrDim++) {      List<Cluster<CorrelationModel>> correlationClusters=clusterMap.get(corrDim);      for (      Cluster<CorrelationModel> cluster : correlationClusters) {        msg.append("\n  cluster ").append(cluster).append(", ids: ").append(cluster.getIDs().size());        for (Iter<Cluster<CorrelationModel>> iter=clustering.getClusterHierarchy().iterParents(cluster); iter.valid(); iter.advance()) {          msg.append("\n   parent ").append(iter.get());        }        for (Iter<Cluster<CorrelationModel>> iter=clustering.getClusterHierarchy().iterChildren(cluster); iter.valid(); iter.advance()) {          msg.append("\n   child ").append(iter.get());        }      }    }    LOG.debugFine(msg.toString());  }  LOG.setCompleted(stepprog);  for (  Cluster<CorrelationModel> rc : clusterMap.get(clusterMap.size() - 1)) {    clustering.addToplevelCluster(rc);  }  return clustering;}  }
class C{  public boolean performPrivateCommand(String action,Bundle data){  return false;}  }
class C{  public static String quoteRemarkSQL(String sql){  sql=replaceAll(sql,"*/","++/");  return replaceAll(sql,"/*","/++");}  }
class C{  @Override protected EClass eStaticClass(){  return ImPackage.Literals.REFERENCING_ELEMENT_EXPRESSION_IM;}  }
class C{  public static StackTraceElement[] approxSourceStackTraceElement(BytecodePosition bytecodePosition){  ArrayList<StackTraceElement> elements=new ArrayList<>();  BytecodePosition position=bytecodePosition;  while (position != null) {    ResolvedJavaMethod method=position.getMethod();    if (method != null) {      elements.add(method.asStackTraceElement(position.getBCI()));    }    position=position.getCaller();  }  return elements.toArray(new StackTraceElement[0]);}  }
class C{  public void testReset() throws InvalidKeyException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  Mac[] macs=createMacs();  assertNotNull("Mac objects were not created",macs);  byte[] bb={(byte)1,(byte)2,(byte)3,(byte)4,(byte)5};  SecretKeySpec sks=new SecretKeySpec(bb,"SHA1");  byte[] bbuf={(byte)5,(byte)4,(byte)3,(byte)2,(byte)1};  byte[] bb1;  byte[] bb2;  for (int i=0; i < macs.length; i++) {    macs[i].init(sks);    bb1=macs[i].doFinal();    macs[i].reset();    bb2=macs[i].doFinal();    assertEquals("incorrect result",bb1.length,bb2.length);    for (int t=0; t < bb1.length; t++) {      assertEquals("Incorrect doFinal result",bb1[t],bb2[t]);    }    macs[i].reset();    macs[i].update(bbuf);    bb1=macs[i].doFinal();    macs[i].reset();    macs[i].update(bbuf,0,bbuf.length);    bb2=macs[i].doFinal();    assertEquals("incorrect result",bb1.length,bb2.length);    for (int t=0; t < bb1.length; t++) {      assertEquals("Incorrect doFinal result",bb1[t],bb2[t]);    }  }}  }
class C{  @Override public boolean isFactoryForType(Object object){  if (object == modelPackage) {    return true;  }  if (object instanceof EObject) {    return ((EObject)object).eClass().getEPackage() == modelPackage;  }  return false;}  }
class C{  public boolean isDynamicSiblings(){  return dynamicSiblings;}  }
class C{  private void removeSession(AbstractIoSession session){  sessions.remove(session);}  }
class C{  public static Float toFloat(boolean b){  return new Float(toFloatValue(b));}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (standardizedSemIm == null) {    throw new NullPointerException();  }}  }
class C{  public static int encode(byte[] data,OutputStream out) throws IOException {  return encoder.encode(data,0,data.length,out);}  }
class C{  protected void initialize(){  Vector<String> classes;  int i;  Class<?> cls;  ResultMatrix matrix;  m_Result=CANCEL_OPTION;  if (m_OutputFormatClasses == null) {    classes=GenericObjectEditor.getClassnames(ResultMatrix.class.getName());    m_OutputFormatClasses=new Vector<Class<?>>();    m_OutputFormatNames=new Vector<String>();    for (i=0; i < classes.size(); i++) {      try {        cls=Class.forName(classes.get(i).toString());        matrix=(ResultMatrix)cls.newInstance();        m_OutputFormatClasses.add(cls);        m_OutputFormatNames.add(matrix.getDisplayName());      } catch (      Exception e) {        e.printStackTrace();      }    }  }}  }
class C{  public static Writer leftShift(OutputStream self,Object value) throws IOException {  OutputStreamWriter writer=new FlushingStreamWriter(self);  leftShift(writer,value);  return writer;}  }
class C{  protected ActionForward listadoConsultaNoDisponible(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  return mappings.findForward("ver_consultas_no_disponibles");}  }
class C{  public LSSVM(KernelTrick kernel){  this(kernel,CacheMode.NONE);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.PROPERTY_NAME_OWNER__DECLARED_NAME:    setDeclaredName((LiteralOrComputedPropertyName)null);  return;}super.eUnset(featureID);}  }
class C{  public boolean isPublic(){  return setter == null;}  }
class C{  boolean accept(VcfRecord record){  mVcfFilterStatistics.increment(Stat.TOTAL_COUNT);  if (mSampleFailed != null) {    Arrays.fill(mSampleFailed,false);  }  mNonSampleSpecificFailed=false;  if (mRemoveOverlapping && record.getSequenceName().equals(mEndRef) && record.getStart() < mEndPosition) {    mVcfFilterStatistics.increment(Stat.OVERLAP_COUNT);    mNonSampleSpecificFailed=true;    return false;  }  mEndRef=record.getSequenceName();  mEndPosition=record.getEnd();  boolean keep=(mKeepInfos.size() + mKeepFilters.size()) == 0;  for (  final String tag : record.getInfo().keySet()) {    if (mKeepInfos.contains(tag)) {      keep=true;    }  }  if (record.getFilters().size() == 0) {    if (mKeepFilters.contains(VcfUtils.MISSING_FIELD)) {      keep=true;    }  } else {    for (    final String tag : record.getFilters()) {      if (mKeepFilters.contains(tag)) {        keep=true;      }    }  }  if (!keep) {    mVcfFilterStatistics.increment(Stat.FAILED_KEEP_COUNT);    mNonSampleSpecificFailed=true;    return false;  }  for (  final String tag : record.getInfo().keySet()) {    if (mRemoveInfos.contains(tag)) {      mVcfFilterStatistics.incrementInfoTag(tag);      mNonSampleSpecificFailed=true;      return false;    }  }  if (record.getFilters().size() == 0) {    if (mRemoveFilters.contains(VcfUtils.MISSING_FIELD)) {      mVcfFilterStatistics.incrementFilterTag(VcfUtils.MISSING_FIELD);      mNonSampleSpecificFailed=true;      return false;    }  } else {    for (    final String tag : record.getFilters()) {      if (mRemoveFilters.contains(tag)) {        mVcfFilterStatistics.incrementFilterTag(tag);        mNonSampleSpecificFailed=true;        return false;      }    }  }  if (allSameAsRef(record)) {    return false;  }  if (mCheckingSample) {    boolean acceptGt=true;    for (    final int sampleIndex : mSampleIndexes) {      if (!acceptGtSpecific(record,sampleIndex)) {        acceptGt=false;        if (mSampleFailed != null) {          mSampleFailed[sampleIndex]=true;        } else {          break;        }      }    }    if (!acceptGt) {      return false;    }  }  if (mExcludeBed != null && mExcludeBed.enclosed(record)) {    mVcfFilterStatistics.increment(Stat.EXCLUDE_BED_COUNT);    mNonSampleSpecificFailed=true;    return false;  }  if (mIncludeBed != null && !mIncludeBed.overlapped(record)) {    mVcfFilterStatistics.increment(Stat.INCLUDE_BED_COUNT);    mNonSampleSpecificFailed=true;    return false;  }  for (  final VcfFilter filter : mFilters) {    if (!filter.accept(record)) {      if (!(filter instanceof VcfSampleFilter)) {        mNonSampleSpecificFailed=true;      }      return false;    }  }  return true;}  }
class C{  public FolderEntry createFolder(String name) throws ConflictException, ServerException, ForbiddenException {  return new FolderEntry(getVirtualFile().createFolder(name),projectRegistry);}  }
class C{  @Override public void resetTaskCompleted(){  lastTaskCompleted=true;  super.resetTaskCompleted();}  }
class C{  private void playSoundInternal(String id,String channel){  if (client.settings.getBoolean("sounds") && checkRequirements(client.settings.getString(id + "Sound"),channel)) {    playSound(id);  }}  }
class C{  public static TypeRef enforceNominalTyping(TypeRef rawT){  if (rawT.getTypingStrategy() == TypingStrategy.NOMINAL || rawT.isUseSiteStructuralTyping()) {    return rawT;  } else {    TypeRef T=TypeUtils.copy(rawT);    if (T instanceof StructuralTypeRef) {      ((StructuralTypeRef)T).setTypingStrategy(TypingStrategy.NOMINAL);    } else     if (T instanceof ParameterizedTypeRef) {      ((ParameterizedTypeRef)T).setDefinedTypingStrategy(TypingStrategy.NOMINAL);    }    return T;  }}  }
class C{  public static String fasta(String... sequences){  final StringBuilder sb=new StringBuilder();  for (int i=0; i < sequences.length; i++) {    sb.append(">").append(i).append(StringUtils.LS).append(sequences[i]).append(StringUtils.LS);  }  return sb.toString();}  }
class C{  public XYZBounds(){}  }
class C{  public void resetCount(){  mProgress=0.0f;  mTargetProgress=0.0f;  invalidate();}  }
class C{  public synchronized StringBuffer reverse(){  reverse0();  return this;}  }
class C{  public static byte[] speedStep28Packet(int address,boolean longAddr,int speed,boolean fwd){  log.debug("28 step packet {} {}",address,speed);  if (!addressCheck(address,longAddr)) {    return null;  }  if (speed < 0 || speed > 28) {    log.error("invalid speed " + speed);    return null;  }  int speedC=(speed & 0x1F) >> 1;  if (speed > 0) {    speedC=speedC + 1;  }  int c=(speed & 0x01) << 4;  speedC=speedC + c;  byte[] retVal;  int arg1=(fwd ? 0x60 : 0x40) | speedC;  if (longAddr) {    retVal=new byte[4];    retVal[0]=(byte)(192 + ((address / 256) & 0x3F));    retVal[1]=(byte)(address & 0xFF);    retVal[2]=(byte)arg1;    retVal[3]=(byte)(retVal[0] ^ retVal[1] ^ retVal[2]^ retVal[3]);  } else {    retVal=new byte[3];    retVal[0]=(byte)(address & 0xFF);    retVal[1]=(byte)arg1;    retVal[2]=(byte)(retVal[0] ^ retVal[1] ^ retVal[2]);  }  return retVal;}  }
class C{  public void loadStaticAspects(NBTTagCompound nbt){  this.matchedAspects.clear();  NBTTagList entryList=(NBTTagList)nbt.getTag("entries");  entryIT:   for (int i=0; i < entryList.tagCount(); i++) {    NBTTagCompound entryCompound=entryList.getCompoundTagAt(i);    AspectItem itemEntry=AspectItem.readFromNBT(entryCompound);    if (itemEntry == null) {      continue;    }    NBTTagList aspectList=(NBTTagList)entryCompound.getTag("aspects");    List<Aspect> itemAspects=new ArrayList<Aspect>();    for (int c=0; c < aspectList.tagCount(); c++) {      NBTTagCompound aspectCompound=aspectList.getCompoundTagAt(c);      Aspect aspect=Aspect.readFromNBT(aspectCompound);      if (aspect == null) {        continue entryIT;      }      itemAspects.add(aspect);    }    this.updateMatchedAspects(itemEntry,itemAspects);  }}  }
class C{  public FloatConverter(){  super(true);}  }
class C{  public String repository(){  return repository;}  }
class C{  public void initVolumeExtensions(){  volume.setExtensions(new StringMap());}  }
class C{  public static Shape createShape(String name,ShapeType shapeType,float arg1,float arg2,float arg3){  Spatial geometry=null;switch (shapeType) {case none:    break;case arrow:  geometry=new Arrow("_arrow",arg1,arg2);break;case ball:geometry=new Sphere("_sphere",(int)arg1,(int)arg1,arg2);geometry.setTranslation(0,0,arg1 * 0.5f);break;case box:geometry=new Box("_box",new Vector3(),0.5f * arg1,0.5f * arg2,0.5f * arg3);geometry.setTranslation(0,0,0.5f * arg3);break;case cone:geometry=new Cone("_cone",(int)arg1,(int)arg1,arg2,arg3,true);geometry.setRotation(new Matrix3().fromAngles(Math.PI,0,0));geometry.setTranslation(0,0,0.5f * arg3);break;case cylinder:geometry=new Cylinder("_cylinder",(int)arg1,(int)arg1,arg2,arg3,true);geometry.setTranslation(0,0,0.5f * arg3);break;case dart:geometry=new Cone("_dart",(int)arg1,(int)arg1,arg2,arg3,true);geometry.setTranslation(0,0,0.5f * arg3);break;case disk:geometry=new Disk("_disk",(int)arg1,(int)arg1,arg2);break;case dome:geometry=new Dome("_dome",(int)arg1 / 2,(int)arg1,arg2);geometry.setRotation(new Matrix3().fromAngles(Math.PI / 2,0,0));break;case flag:geometry=new Flag("_flag",arg1);geometry.setTranslation(0,0,0.5f * arg1);break;case pyramid:geometry=new Pyramid("_pyramid",arg1,arg2);geometry.setRotation(new Matrix3().fromAngles(Math.PI / 2,0,0));geometry.setTranslation(0,0,arg1 * 0.5f);break;case quad:geometry=new Quad("_quad",arg1,arg1);break;case rod:geometry=new Rod("_rod",(int)arg1,30,arg2,arg3);geometry.setTranslation(0,0,arg2);break;case sphere:geometry=new Sphere("_sphere",(int)arg1,(int)arg1,arg2);break;case teapot:geometry=new Teapot("_teapot");geometry.setRotation(new Matrix3().fromAngles(Math.PI / 2,0,0));geometry.setScale(new Vector3(arg1,arg1,arg1));break;case torus:geometry=new Torus("_torus",(int)arg1,(int)arg1,arg2,arg3);break;}if (geometry == null) {return (new Shape(name,ShapeType.none,null));}return (new Shape(name,shapeType,geometry));}  }
class C{  private void shrink(){  long maxSize=this.maxSize;  int maxBlocks=this.maxBlocks;  int cnt=queue.sizex();  for (int i=0; i < cnt && (maxBlocks > 0 && queue.sizex() > maxBlocks || maxSize > 0 && curSize.longValue() > maxSize); i++) {    EvictableEntry<IgfsBlockKey,byte[]> entry=queue.poll();    if (entry == null)     break;    byte[] val=peek(entry);    if (val != null)     changeSize(-val.length);    if (!entry.evict()) {      entry.removeMeta();      touch(entry);    }  }}  }
class C{  public DateTimeFormatterBuilder appendFixedDecimal(DateTimeFieldType fieldType,int numDigits){  if (fieldType == null) {    throw new IllegalArgumentException("Field type must not be null");  }  if (numDigits <= 0) {    throw new IllegalArgumentException("Illegal number of digits: " + numDigits);  }  return append0(new FixedNumber(fieldType,numDigits,false));}  }
class C{  private void copyTable(String table) throws DatabaseException {  StringBuffer selectSQL=new StringBuffer();  StringBuffer insertSQL=new StringBuffer();  StringBuffer values=new StringBuffer();  Collection<String> columns=source.listColumns(table);  Logger.getLogger(this.getClass()).debug("Begin copy: " + table);  selectSQL.append("SELECT ");  insertSQL.append("INSERT INTO ");  insertSQL.append(table);  insertSQL.append("(");  boolean first=true;  for (  String column : columns) {    if (!first) {      selectSQL.append(",");      insertSQL.append(",");      values.append(",");    } else {      first=false;    }    selectSQL.append(column);    insertSQL.append(column);    values.append("?");  }  selectSQL.append(" FROM ");  selectSQL.append(table);  insertSQL.append(") VALUES (");  insertSQL.append(values);  insertSQL.append(")");  PreparedStatement statement=null;  ResultSet rs=null;  try {    statement=target.prepareStatement(insertSQL.toString());    rs=source.executeQuery(selectSQL.toString());    int rows=0;    while (rs.next()) {      rows++;      for (int i=1; i <= columns.size(); i++) {        try {          statement.setString(i,rs.getString(i));        } catch (        SQLException e) {          Logger.getLogger(this.getClass()).debug("Error setting column: " + ((List)columns).get(i));          try {            statement.setString(i,"");          } catch (          Exception e2) {            statement.setString(i,"0");          }        }      }      statement.execute();    }    if (LOG.isDebugEnabled()) {      LOG.debug("Copied " + rows + " rows.");      LOG.debug("");    }  } catch (  SQLException e) {    throw (new DatabaseException(e));  } finally {    try {      if (statement != null) {        statement.close();      }    } catch (    SQLException e) {      throw (new DatabaseException(e));    }    try {      if (rs != null) {        statement.close();      }    } catch (    SQLException e) {      throw (new DatabaseException(e));    }  }}  }
class C{  private int readAhead(boolean allowBlocking) throws IOException {  if (state == STATE_DONE) {    return -1;  }  if (chunkPos >= chunkCount) {    chunkCount=0;    chunkPos=0;  }  if (allowBlocking) {    return readAheadBlocking();  } else {    return readAheadNonBlocking();  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public TableId tableId(){  return tableId;}  }
class C{  protected JobStateReason(int value){  super(value);}  }
class C{  public static double nextLambda(double l3,double l4,MersenneTwisterFast randomGenerator){  double l_sign;  if ((l3 < 0) || (l4 < 0))   l_sign=-1.0; else   l_sign=1.0;  double u=randomGenerator.nextDouble();  double x=l_sign * (Math.exp(Math.log(u) * l3) - Math.exp(Math.log(1.0 - u) * l4));  return x;}  }
class C{  public ItemGuardCreature(final Creature copy,final String itemType,final String questSlot,final String questState,final int questIndex){  super(copy);  this.itemType=itemType;  this.questSlot=questSlot;  this.questState=questState;  this.questIndex=questIndex;  noises=new LinkedHashMap<String,LinkedList<String>>(noises);  final LinkedList<String> ll=new LinkedList<String>();  ll.add("Thou shall not obtain the " + itemType + "!");  noises.put("idle",ll);  noises.put("fight",ll);  noises.put("follow",ll);  if (!SingletonRepository.getEntityManager().isItem(itemType)) {    logger.error(copy.getName() + " drops unexisting item " + itemType);  }}  }
class C{  public void doMouseClicked(java.awt.event.MouseEvent e){  if (!_editor.getFlag(Editor.OPTION_CONTROLS,isControlling())) {    return;  }  if (e.isMetaDown() || e.isAltDown()) {    return;  }  if ((namedTurnoutWest == null) || (namedTurnoutEast == null)) {    log.error("No turnout connection, can't process click");    return;  }switch (turnoutType) {case DOUBLESLIP:    doDoubleSlipMouseClick();  break;case SINGLESLIP:doSingleSlipMouseClick();break;case THREEWAY:do3WayMouseClick();break;case SCISSOR:doScissorMouseClick();break;default :log.error("turnoutType value {} should not have appeared",turnoutType);}}  }
class C{  public Source<LocalDate> withDays(long daysFromEpoch){  lowerBoundGEQLongLocalDateMin(daysFromEpoch);  return Compositions.weightWithValues(LocalDates.withDays(daysFromEpoch),LocalDate.ofEpochDay(daysFromEpoch));}  }
class C{  protected double computeFactor(double omega,double sigma){  double root=Math.sqrt(Math.pow(2.0,1.0 / omega) - 1);  return 2.0 * root / sigma;}  }
class C{  void sendByte5Baud(int address) throws IOException {  long start=System.currentTimeMillis();  sendBit5Baud(false);  for (int i=0; i < 8; i++) {    sendBit5Baud((address & (1 << i)) != 0);  }  sendBit5Baud(true);  log.debug(String.format("TX-5Baud:%02X finished after %dms",address,System.currentTimeMillis() - start));}  }
class C{  public HarvestInfo(final Deserializer deserializer){  this.blockId=deserializer.readLong("id");  this.height=BlockHeight.readFrom(deserializer,"height");  this.timeStamp=TimeInstant.readFrom(deserializer,"timeStamp");  this.totalFee=Amount.readFrom(deserializer,"totalFee");  this.difficulty=deserializer.readLong("difficulty");}  }
class C{  @Override public <R>CouchbaseManifestComparator<R> withKey(String key){  return new CouchbaseManifestComparator<>(key,connection);}  }
class C{  public CF2(int numberOfVariables){  super(numberOfVariables,2,1);}  }
class C{  public synchronized void close() throws IOException {  if (in != null) {    in.close();    slack=null;    in=null;  }}  }
class C{  protected void processPrepareResponse(final GenericResponse genericResponse) throws SQLException {  parseStatementInfo(genericResponse.getData());  switchState(StatementState.PREPARED);}  }
class C{  public int compareTo(TokenizerSymbol symbol){  return symbol.startText.compareTo(startText);}  }
class C{  private boolean advanceRepeatGroups() throws IOException {  for (  PhrasePositions[] rg : rptGroups) {    if (hasMultiTermRpts) {      int incr;      for (int i=0; i < rg.length; i+=incr) {        incr=1;        PhrasePositions pp=rg[i];        int k;        while ((k=collide(pp)) >= 0) {          PhrasePositions pp2=lesser(pp,rg[k]);          if (!advancePP(pp2)) {            return false;          }          if (pp2.rptInd < i) {            incr=0;            break;          }        }      }    } else {      for (int j=1; j < rg.length; j++) {        for (int k=0; k < j; k++) {          if (!rg[j].nextPosition()) {            return false;          }        }      }    }  }  return true;}  }
class C{  private DisiWrapper popTail(){  assert tailSize > 0;  final DisiWrapper result=tail[0];  tail[0]=tail[--tailSize];  downHeapCost(tail,tailSize);  return result;}  }
class C{  public boolean checkInRange(String flagName,double lowValue,boolean lowInclusive,double highValue,boolean highInclusive){  if (isSet(flagName)) {    final double value=(Double)getValue(flagName);    if ((value < lowValue) || (value <= lowValue && !lowInclusive) || (value > highValue)|| (value >= highValue && !highInclusive)) {      final String range=(lowInclusive ? "[" : "(") + lowValue + ", "+ highValue+ (highInclusive ? "]" : ")");      setParseMessage("The value for " + LONG_FLAG_PREFIX + flagName+ " must be in the range "+ range);      return false;    }  }  return true;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Uri iconUri(){  return mIconUri;}  }
class C{  public void testValueChangeListenerWithBinding() throws Exception {  HtmlForm form;  HtmlSubmitInput submit;  HtmlAnchor link;  HtmlTextInput input;  HtmlPage page;  page=getPage("/faces/binding01.jsp");  form=getFormById(page,"form");  submit=(HtmlSubmitInput)form.getInputByName("form" + NamingContainer.SEPARATOR_CHAR + "changeValue");  input=(HtmlTextInput)form.getInputByName("form" + NamingContainer.SEPARATOR_CHAR + "toChange");  input.setValueAttribute("binding works!!");  page=(HtmlPage)submit.click();  form=getFormById(page,"form");  input=(HtmlTextInput)form.getInputByName("form" + NamingContainer.SEPARATOR_CHAR + "toChange");  assertEquals("Input does not have expected value","binding works!!",input.getOnBlurAttribute());}  }
class C{  public static JCalValue structured(List<List<?>> values){  List<JsonValue> array=new ArrayList<JsonValue>(values.size());  for (  List<?> list : values) {    if (list.isEmpty()) {      array.add(new JsonValue(""));      continue;    }    if (list.size() == 1) {      Object value=list.get(0);      if (value == null) {        value="";      }      array.add(new JsonValue(value));      continue;    }    List<JsonValue> subArray=new ArrayList<JsonValue>(list.size());    for (    Object value : list) {      if (value == null) {        value="";      }      subArray.add(new JsonValue(value));    }    array.add(new JsonValue(subArray));  }  return new JCalValue(new JsonValue(array));}  }
class C{  public Env<AttrContext> attribute(Env<AttrContext> env){  if (compileStates.isDone(env,CompileState.ATTR))   return env;  if (verboseCompilePolicy)   printNote("[attribute " + env.enclClass.sym + "]");  if (verbose)   log.printVerbose("checking.attribution",env.enclClass.sym);  if (!taskListener.isEmpty()) {    TaskEvent e=new TaskEvent(TaskEvent.Kind.ANALYZE,env.toplevel,env.enclClass.sym);    taskListener.started(e);  }  JavaFileObject prev=log.useSource(env.enclClass.sym.sourcefile != null ? env.enclClass.sym.sourcefile : env.toplevel.sourcefile);  try {    attr.attrib(env);    if (errorCount() > 0 && !shouldStop(CompileState.ATTR)) {      attr.postAttr(env.tree);    }    compileStates.put(env,CompileState.ATTR);    if (rootClasses != null && rootClasses.contains(env.enclClass)) {      reportPublicApi(env.enclClass.sym);    }  }  finally {    log.useSource(prev);  }  return env;}  }
class C{  public static void resignToken(String fileName) throws IOException, SAXException, ParserConfigurationException, SsoKeyStoreOperationException, ParserException {  FileInputStream fileStream=new FileInputStream(fileName);  String samlXml;  try {    samlXml=TestTokenUtil.loadStreamContent(fileStream);  }  finally {    fileStream.close();  }  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();  dbf.setNamespaceAware(true);  ByteArrayInputStream tokenStream=new ByteArrayInputStream(samlXml.getBytes());  Document parsedToken=dbf.newDocumentBuilder().parse(tokenStream);  NodeList signatureList=parsedToken.getElementsByTagNameNS("http://www.w3.org/2000/09/xmldsig#","Signature");  if (signatureList == null || signatureList.getLength() != 1) {    return;  }  parsedToken.getDocumentElement().removeChild(signatureList.item(0));  KeyStoreData keystore=TestTokenUtil.loadDefaultKeystore();  String assertionId=parsedToken.getDocumentElement().getAttribute(ID_ATTR);  signMessage(parsedToken.getDocumentElement(),"#" + assertionId,keystore.getPrivateKey(DEF_KEYSTORE_PRIV_KEY_PASS),keystore.getCertificate());  PrintWriter pw=new PrintWriter(new File(fileName));  try {    pw.print(Util.serializeToString(parsedToken));    pw.flush();  }  finally {    pw.close();  }}  }
class C{  public static <T>Iterator<T> arrayAsIterator(T[] array){  return new ArrayIterator<T>(array);}  }
class C{  public static boolean isBlank(String str){  return (null == str || 0 == str.trim().length());}  }
class C{  int encryptFinal(byte[] plain,int plainOffset,int plainLen,byte[] cipher,int cipherOffset) throws IllegalBlockSizeException {  if (plainLen < blockSize) {    throw new IllegalBlockSizeException("input is too short!");  } else   if (plainLen == blockSize) {    encrypt(plain,plainOffset,plainLen,cipher,cipherOffset);  } else {    int nLeft=plainLen % blockSize;    if (nLeft == 0) {      encrypt(plain,plainOffset,plainLen,cipher,cipherOffset);      int lastBlkIndex=cipherOffset + plainLen - blockSize;      int nextToLastBlkIndex=lastBlkIndex - blockSize;      byte[] tmp=new byte[blockSize];      System.arraycopy(cipher,lastBlkIndex,tmp,0,blockSize);      System.arraycopy(cipher,nextToLastBlkIndex,cipher,lastBlkIndex,blockSize);      System.arraycopy(tmp,0,cipher,nextToLastBlkIndex,blockSize);    } else {      int newPlainLen=plainLen - (blockSize + nLeft);      if (newPlainLen > 0) {        encrypt(plain,plainOffset,newPlainLen,cipher,cipherOffset);        plainOffset+=newPlainLen;        cipherOffset+=newPlainLen;      }      byte[] tmp=new byte[blockSize];      for (int i=0; i < blockSize; i++) {        tmp[i]=(byte)(plain[plainOffset + i] ^ r[i]);      }      byte[] tmp2=new byte[blockSize];      embeddedCipher.encryptBlock(tmp,0,tmp2,0);      System.arraycopy(tmp2,0,cipher,cipherOffset + blockSize,nLeft);      for (int i=0; i < nLeft; i++) {        tmp2[i]=(byte)(plain[plainOffset + blockSize + i] ^ tmp2[i]);      }      embeddedCipher.encryptBlock(tmp2,0,cipher,cipherOffset);    }  }  return plainLen;}  }
class C{  protected void handleException(Throwable e){  if (endTime == 0)   endTime=System.currentTimeMillis();  Log.logger.log(Level.SEVERE,"Uncaught exception.",e);  status|=sERROR;  ControlThread.signalShutdown();  done=true;}  }
class C{  public static final Object loadObject(String filename) throws Exception {  FileInputStream streamIn=new FileInputStream(filename);  ObjectInputStream objectinputstream=new ObjectInputStream(streamIn);  Object object=objectinputstream.readObject();  objectinputstream.close();  return object;}  }
class C{  public static Column fromString(String s){  StringTokenizer st=new StringTokenizer(s," ");  Column col=new Column();  while (st.hasMoreTokens()) {    col.add(FreeCellNode.fromCard(st.nextToken()));  }  return col;}  }
class C{  @Override public void onReceivedError(WebView view,int errorCode,String description,String failingUrl){  String message=String.format("Error '%s' (%d) loading url: %s",description,errorCode,failingUrl);  Log.w(TAG,message);}  }
class C{  public boolean isValid(TicTacToeBoard board){  return (neighbors(board) >= 1);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.516 -0500",hash_original_method="D442CACA5F4C37E249E32A5FC3EA1B00",hash_generated_method="DDBB425D41D43B34CE4517F62847711C") public void putCharSequenceArray(String key,CharSequence[] value){  unparcel();  mMap.put(key,value);}  }
class C{  public BerkeleyDbEnvironment(){}  }
class C{  @Override public boolean isWrapperFor(Class<?> iface) throws SQLException {  return iface != null && iface.isAssignableFrom(getClass());}  }
class C{  public static boolean hasTradeOrders(Tradingday tradingday){  for (  Tradestrategy tradestrategy : tradingday.getTradestrategies()) {    if (!tradestrategy.getTradeOrders().isEmpty()) {      return true;    }  }  return false;}  }
class C{  public Boolean isVimAccountNameRequired(){  return vimAccountNameRequired;}  }
class C{  public CheckBox(){  this("");}  }
class C{  @EventHandler(ignoreCancelled=true) public void onPlayerDropItem(PlayerDropItemEvent event){  if (!canInteract(event.getPlayer())) {    event.setCancelled(true);  }}  }
class C{  @Override public String toString(){  return toString(6);}  }
class C{  public int rsq(int a,int b){  assert b >= a && a > 0 && b > 0;  return rsq(b) - rsq(a - 1);}  }
class C{  final SolrInputField field(String name,float boost,Object... values){  SolrInputField f=new SolrInputField(name);  for (  Object v : values) {    f.addValue(v,1.0F);  }  f.setBoost(boost);  return f;}  }
class C{  public void restartWithSearchQuery(String searchQuery){  mFilter=searchQuery;  if (mAdapter != null) {    mAdapter.clear();  }  if (mListView != null && mListView.getFooterViewsCount() != 0) {    mListView.removeFooterView(mFooterView);  }  if (mProgressBar != null) {    mProgressBar.setVisibility(View.VISIBLE);  }  mStartPage=1;  getLoaderManager().restartLoader(1,null,MoviesFragment.this);}  }
class C{  @NotNull public QueryBuilder addArguments(@NotNull Collection<?> args){  arguments.addAll(args);  return this;}  }
class C{  public static int findNextWordEnd(String s,int startIndex){  int i=startIndex;  for (; i < s.length(); i++) {    char currChar=s.charAt(i);    if (!Character.isLetterOrDigit(currChar)) {      return i;    }  }  return i;}  }
class C{  public static boolean deleteFile(String filePathAndName){  if ((filePathAndName == null) || filePathAndName.isEmpty()) {    return false;  }  boolean isSuccessfulDelete=false;  try {    File fileToDelete=new File(filePathAndName);    isSuccessfulDelete=fileToDelete.delete();  } catch (  Exception e) {    logger.debug(e.toString() + System.lineSeparator() + StackTrace.getStringFromStackTrace(e));    isSuccessfulDelete=false;  }  return isSuccessfulDelete;}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public boolean isShortCircuit(){  ensureEnabled();  return shortCircuit;}  }
class C{  public Matrix4f add(Matrix4fc other){  return add(other,this);}  }
class C{  public void register(OpModeManager manager){  manager.register("NullOp",NullOp.class);  manager.register("Basic Vision Sample",BasicVisionSample.class);  manager.register("Linear Vision Sample",LinearVisionSample.class);  manager.register("Manual Vision Sample",ManualVisionSample.class);}  }
class C{  final void cleanUpActivityServicesLocked(ActivityRecord r){  if (r.connections != null) {    Iterator<ConnectionRecord> it=r.connections.iterator();    while (it.hasNext()) {      ConnectionRecord c=it.next();      mService.mServices.removeConnectionLocked(c,null,r);    }    r.connections=null;  }}  }
class C{  protected boolean isKeyEvent(){  return ((descriptor & KEY_RELEASED_MASK) != 0) || ((descriptor & KEY_PRESSED_MASK) != 0);}  }
class C{  protected final void addWorkers(Collection<WorkerThread> workers){  for (final Iterator<WorkerThread> iter=workers.iterator(); iter.hasNext(); ) {    final WorkerThread worker=iter.next();    addWorker(worker);  }}  }
class C{  public IntPair insertNFA(RegExp regExp){  IntPair nfa1, nfa2;  int start, end;  RegExp2 r;  if (Options.DEBUG)   Out.debug("Inserting RegExp : " + regExp);  if (regExp.isCharClass(macros)) {    start=numStates;    end=numStates + 1;    ensureCapacity(end + 1);    if (end + 1 > numStates)     numStates=end + 1;    insertCCLNFA(regExp,start,end);    return new IntPair(start,end);  }switch (regExp.type) {case sym.BAR:    r=(RegExp2)regExp;  nfa1=insertNFA(r.r1);nfa2=insertNFA(r.r2);start=nfa2.end + 1;end=nfa2.end + 2;addEpsilonTransition(start,nfa1.start);addEpsilonTransition(start,nfa2.start);addEpsilonTransition(nfa1.end,end);addEpsilonTransition(nfa2.end,end);return new IntPair(start,end);case sym.CONCAT:r=(RegExp2)regExp;nfa1=insertNFA(r.r1);nfa2=insertNFA(r.r2);addEpsilonTransition(nfa1.end,nfa2.start);return new IntPair(nfa1.start,nfa2.end);case sym.STAR:nfa1=insertNFA((RegExp)((RegExp1)regExp).content);start=nfa1.end + 1;end=nfa1.end + 2;addEpsilonTransition(nfa1.end,end);addEpsilonTransition(start,nfa1.start);addEpsilonTransition(start,end);addEpsilonTransition(nfa1.end,nfa1.start);return new IntPair(start,end);case sym.PLUS:nfa1=insertNFA((RegExp)((RegExp1)regExp).content);start=nfa1.end + 1;end=nfa1.end + 2;addEpsilonTransition(nfa1.end,end);addEpsilonTransition(start,nfa1.start);addEpsilonTransition(nfa1.end,nfa1.start);return new IntPair(start,end);case sym.QUESTION:nfa1=insertNFA((RegExp)((RegExp1)regExp).content);addEpsilonTransition(nfa1.start,nfa1.end);return new IntPair(nfa1.start,nfa1.end);case sym.BANG:return complement(insertNFA((RegExp)((RegExp1)regExp).content));case sym.TILDE:return insertNFA(regExp.resolveTilde(macros));case sym.STRING:return insertStringNFA(false,(String)((RegExp1)regExp).content);case sym.STRING_I:return insertStringNFA(true,(String)((RegExp1)regExp).content);case sym.MACROUSE:return insertNFA(macros.getDefinition((String)((RegExp1)regExp).content));}throw new Error("Unknown expression type " + regExp.type + " in NFA construction");}  }
class C{  public void testIdWithoutDotsOrSlashes(){  String jndiName="DataSource";  String propertyString=DatasourcePropertySet.JNDI_LOCATION + "=" + jndiName;  DataSource ds=dataSourceConverter.fromPropertyString(propertyString);  assertEquals(jndiName,ds.getId());}  }
class C{  public final int countDataSchemes(){  return mDataSchemes != null ? mDataSchemes.size() : 0;}  }
class C{  @Override public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other){  Set<RequestMethod> set=new LinkedHashSet<>(this.methods);  set.addAll(other.methods);  return new RequestMethodsRequestCondition(set);}  }
class C{  public synchronized void onDialogsLoaded(){  if (!isDialogsLoaded) {    isDialogsLoaded=true;    context.getPreferences().putBool("app.dialogs.loaded",true);    updateLoaded();  }}  }
class C{  public boolean covers(Envelope other){  if (isNull() || other.isNull()) {    return false;  }  return other.getMinX() >= minx && other.getMaxX() <= maxx && other.getMinY() >= miny && other.getMaxY() <= maxy;}  }
class C{  private static void displayTree(Account parentAccount,int level){  for (int i=0; i < level; i++) {    System.out.print("  ");  }  System.out.printf("Account with ID \"%s\" and name \"%s\" was found.\n",parentAccount.getId(),parentAccount.getName());  List<Account> subAccounts=parentAccount.getSubAccounts();  if (subAccounts != null && !subAccounts.isEmpty()) {    for (    Account subAccount : subAccounts) {      displayTree(subAccount,level + 1);    }  }}  }
class C{  public void notifyThrottleFound(DccThrottle t){  if (log.isDebugEnabled()) {    log.debug("Throttle found");  }  _throttle=t;  for (int i=0; i < FunctionPanel.NUM_FUNCTION_BUTTONS; i++) {    try {      int functionNumber=functionButton[i].getIdentity();      java.lang.reflect.Method getter=_throttle.getClass().getMethod("getF" + functionNumber,(Class[])null);      Boolean state=(Boolean)getter.invoke(_throttle,(Object[])null);      functionButton[i].setState(state.booleanValue());      if (_rosterEntry != null) {        String text=_rosterEntry.getFunctionLabel(functionNumber);        if (text != null) {          functionButton[i].setText(text);          int butWidth=functionButton[i].getFontMetrics(functionButton[i].getFont()).stringWidth(text);          butWidth=butWidth + 20;          if (butWidth < FunctionButton.getButtonWidth()) {            butWidth=FunctionButton.getButtonWidth();          }          functionButton[i].setPreferredSize(new Dimension(butWidth,FunctionButton.getButtonHeight()));          functionButton[i].setIsLockable(_rosterEntry.getFunctionLockable(functionNumber));        }      }    } catch (    java.lang.NoSuchMethodException ex1) {      log.warn("Exception in notifyThrottleFound: " + ex1);    }catch (    java.lang.IllegalAccessException ex2) {      log.warn("Exception in notifyThrottleFound: " + ex2);    }catch (    java.lang.reflect.InvocationTargetException ex3) {      log.warn("Exception in notifyThrottleFound: " + ex3);    }  }  this.setEnabled(true);  _throttle.addPropertyChangeListener(this);}  }
class C{  public IllegalConnectorArgumentsException(String s,String name){  super(s);  names=new ArrayList<String>(1);  names.add(name);}  }
class C{  public void endElement(String namespaceURI,String localName,String qName) throws SAXException {  if (m_firstTagNotEmitted) {    flush();    if (namespaceURI == null && m_firstElementURI != null)     namespaceURI=m_firstElementURI;    if (localName == null && m_firstElementLocalName != null)     localName=m_firstElementLocalName;  }  m_handler.endElement(namespaceURI,localName,qName);}  }
class C{  public void drawNamedImage(Image image,String name){  if (image != null) {    LosslessImage losslessImage=new LosslessImage(image);    int width=losslessImage.getWidth();    int height=losslessImage.getHeight();    DefineBitsLossless defineBits=DefineBitsLosslessBuilder.build(losslessImage.getPixels(),width,height);    defineTags.defineBitsLossless2(defineBits);    DefineShape ds3=ImageShapeBuilder.buildImage(defineBits,defineBits.width,defineBits.height);    defineTags.defineShape3(ds3);    applyBounds(ds3.bounds.xMin,ds3.bounds.yMin,ds3.bounds.xMax,ds3.bounds.yMax);    PlaceObject po2=new PlaceObject(ds3,depth++);    po2.setMatrix(MatrixBuilder.build(graphicContext.getTransform()));    po2.setName(name);    defineTags.placeObject2(po2);  }}  }
class C{  private ModifiableHyperBoundingBox mbr(final DoubleIntPair[] sorting,final int from,final int to){  ModifiableHyperBoundingBox mbr=new ModifiableHyperBoundingBox(get(sorting[from]));  for (int i=from + 1; i < to; i++) {    mbr.extend(get(sorting[i]));  }  return mbr;}  }
class C{  public static void sort(Object[] a){  Object[] aux=(Object[])a.clone();  mergeSort(aux,a,0,a.length,0);}  }
class C{  public void putSerializable(String key,Serializable value){  map.put(key,value);}  }
class C{  public int rt_priority(){  return Integer.parseInt(fields[39]);}  }
class C{  public IndexToLocFormat formatVersion(){  return this.formatVersion;}  }
class C{  public int frequency(int key){  return frequencies.frequency(key);}  }
class C{  public DimStore(int id,String name,String zip,String addr){  this.id=id;  this.name=name;  this.zip=zip;  this.addr=addr;}  }
class C{  public DocumentInputIterator(boolean hasPayloads,boolean hasContexts) throws IOException {  this.hasPayloads=hasPayloads;  this.hasContexts=hasContexts;  docCount=reader.maxDoc() - 1;  weightValues=(weightField != null) ? MultiDocValues.getNumericValues(reader,weightField) : null;  liveDocs=(reader.leaves().size() > 0) ? MultiFields.getLiveDocs(reader) : null;  relevantFields=getRelevantFields(new String[]{field,weightField,payloadField,contextsField});}  }
class C{  public AcceptedOptionSet(final Class[] optionalOptions,final String freeArgumentsSyntax,final Class[] requiredOptions){  Check.notNull(optionalOptions,"optionalOptions");  Check.notNull(requiredOptions,"requiredOptions");  this.freeArgumentsSyntax=freeArgumentsSyntax;  this.optionalOptions.addAll(Arrays.asList(optionalOptions));  this.requiredOptions.addAll(Arrays.asList(requiredOptions));}  }
class C{  int next(){  int next=rbbi.next();  while (next == BreakIterator.DONE && scriptIterator.next()) {    rbbi=getBreakIterator(scriptIterator.getScriptCode());    rbbi.setText(text,scriptIterator.getScriptStart(),scriptIterator.getScriptLimit() - scriptIterator.getScriptStart());    next=rbbi.next();  }  return (next == BreakIterator.DONE) ? BreakIterator.DONE : next + scriptIterator.getScriptStart();}  }
class C{  @Override public Object execute(CompiledScript template,Map<String,Object> vars){  BytesStreamOutput result=new BytesStreamOutput();  try (UTF8StreamWriter writer=utf8StreamWriter().setOutput(result)){    ((Mustache)template.compiled()).execute(writer,vars);  } catch (  Exception e) {    logger.error("Error executing " + template,e);    throw new ScriptException("Error executing " + template,e);  }  return result.bytes();}  }
class C{  public void insertChildAfter(HtmlNode node,HtmlNode nodeToInsert){  int index=getChildIndex(node);  if (index >= 0) {    insertChild(index + 1,nodeToInsert);  }}  }
class C{  public void reset(){  super.reset();  H1=0x6a09e667f3bcc908L;  H2=0xbb67ae8584caa73bL;  H3=0x3c6ef372fe94f82bL;  H4=0xa54ff53a5f1d36f1L;  H5=0x510e527fade682d1L;  H6=0x9b05688c2b3e6c1fL;  H7=0x1f83d9abfb41bd6bL;  H8=0x5be0cd19137e2179L;}  }
class C{  public void calculateDependentVariableStats(int depVarIndex){  if (values[depVarIndex] == null)   return;  double sumOfDV=0.0;  for (int i=0; i < values[depVarIndex].length; i++)   sumOfDV+=values[depVarIndex][i];  dependentVariableMean[depVarIndex]=sumOfDV / values[depVarIndex].length;  dependentVariableSumOfAbsoluteError[depVarIndex]=0.0;  dependentVariableSumOfSquaredAbsoluteError[depVarIndex]=0.0;  dependentVariableSumOfRelativeError[depVarIndex]=0.0;  dependentVariableSumOfSquaredRelativeError[depVarIndex]=0.0;  for (int i=0; i < values[depVarIndex].length; i++) {    double diff=values[depVarIndex][i] - dependentVariableMean[depVarIndex];    dependentVariableSumOfAbsoluteError[depVarIndex]+=Math.abs(diff);    dependentVariableSumOfSquaredAbsoluteError[depVarIndex]+=diff * diff;    double diffRelative=diff / dependentVariableMean[depVarIndex];    dependentVariableSumOfRelativeError[depVarIndex]+=Math.abs(diffRelative);    dependentVariableSumOfSquaredRelativeError[depVarIndex]+=diffRelative * diffRelative;  }  dependentVariableVariance[depVarIndex]=dependentVariableSumOfSquaredAbsoluteError[depVarIndex] / values[depVarIndex].length;}  }
class C{  private String arrangeRemoteCommand(InternalManagedEntity entity,String cmd){  String host=entity.getEntityConfig().getHost();  if (InetAddressUtil.isLocalHost(host)) {    return cmd;  }  String prefix=entity.getEntityConfig().getRemoteCommand();  if (prefix == null || prefix.length() <= 0) {    prefix=entity.getDistributedSystem().getRemoteCommand();  }  if (prefix == null || prefix.length() <= 0) {    throw new IllegalStateException(LocalizedStrings.ManagedEntityController_A_REMOTE_COMMAND_MUST_BE_SPECIFIED_TO_OPERATE_ON_A_MANAGED_ENTITY_ON_HOST_0.toLocalizedString(host));  }  int hostIdx=prefix.indexOf(HOST);  int cmdIdx=prefix.indexOf(CMD);  if (hostIdx == -1 && cmdIdx == -1) {    return prefix + " " + host+ " "+ cmd;  }  if (hostIdx >= 0) {    String start=prefix.substring(0,hostIdx);    String end=null;    if (hostIdx + HOST.length() >= prefix.length()) {      end="";    } else {      end=prefix.substring(hostIdx + HOST.length());    }    prefix=start + host + end;    cmdIdx=prefix.indexOf(CMD);  }  if (cmdIdx >= 0) {    String start=prefix.substring(0,cmdIdx);    String end=null;    if (cmdIdx + CMD.length() >= prefix.length()) {      end="";    } else {      end=prefix.substring(cmdIdx + CMD.length());    }    prefix=start + cmd + end;  }  return prefix;}  }
class C{  private void insertOrder(String orderId,String productId,PurchaseState state,long purchaseTime,String developerPayload){  ContentValues values=new ContentValues();  values.put(HISTORY_ORDER_ID_COL,orderId);  values.put(HISTORY_PRODUCT_ID_COL,productId);  values.put(HISTORY_STATE_COL,state.ordinal());  values.put(HISTORY_PURCHASE_TIME_COL,purchaseTime);  values.put(HISTORY_DEVELOPER_PAYLOAD_COL,developerPayload);  mDb.replace(PURCHASE_HISTORY_TABLE_NAME,null,values);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void round(Calendar c,String unit){  Integer uu=CALENDAR_UNITS.get(unit);  if (null == uu) {    throw new IllegalArgumentException("Rounding Unit not recognized: " + unit);  }  int u=uu.intValue();switch (u) {case Calendar.YEAR:    c.clear(Calendar.MONTH);case Calendar.MONTH:  c.clear(Calendar.DAY_OF_MONTH);c.clear(Calendar.DAY_OF_WEEK);c.clear(Calendar.DAY_OF_WEEK_IN_MONTH);c.clear(Calendar.DAY_OF_YEAR);c.clear(Calendar.WEEK_OF_MONTH);c.clear(Calendar.WEEK_OF_YEAR);case Calendar.DATE:c.clear(Calendar.HOUR_OF_DAY);c.clear(Calendar.HOUR);c.clear(Calendar.AM_PM);case Calendar.HOUR_OF_DAY:c.clear(Calendar.MINUTE);case Calendar.MINUTE:c.clear(Calendar.SECOND);case Calendar.SECOND:c.clear(Calendar.MILLISECOND);break;default :throw new IllegalStateException("No logic for rounding value (" + u + ") "+ unit);}}  }
class C{  Location(double[][] a){  maxValue=a[0][0];  row=0;  column=0;  for (int i=0; i < a.length; i++) {    for (int j=0; j < a[i].length; j++) {      if (a[i][j] > maxValue) {        maxValue=a[i][j];        row=i;        column=j;      }    }  }}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  init(getName(),getMask(actions));}  }
class C{  public double train(double[][] X_,double[][] Y_,int I) throws Exception {  if (getDebug()) {    System.out.println("BPNN train; For " + I + " epochs ...");  }  int N=X_.length;  boolean breakEarly=(I < 0) ? true : false;  I=Math.abs(I);  double E_=Double.MAX_VALUE;  double E=0.0;  for (int e=0; e < I; e++) {    E=update(X_,Y_);    if (breakEarly && E > E_) {      if (getDebug())       System.out.println(" early stopped at epcho " + e + " ... ");      break;    }    E_=E;  }  if (getDebug())   System.out.println("Done.");  return E;}  }
class C{  public void removeIndicationListener(TransportAddress localAddr,MessageEventHandler indicationListener){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.365 -0500",hash_original_method="2361364E4BB205FAC2A8F8549D9431F6",hash_generated_method="AF914157A79A59D795CD06072A593918") public SecurityClientHeader createSecurityClientHeader(){  SecurityClient secClient=new SecurityClient();  return secClient;}  }
class C{  public static SecretKeys generateKeyFromPassword(String password,String salt) throws GeneralSecurityException {  return generateKeyFromPassword(password,Base64.decode(salt,BASE64_FLAGS));}  }
class C{  @SmallTest public void testSessionList(){  AudioTrack track=createTestTrack();  int session=track.getAudioSessionId();  AudioSessionInfo info=findAudioSessionInfo(session);  assertNotNull(info);  assertEquals(session,info.getSessionId());  assertEquals(3,info.getChannelMask());  track.release();  info=findAudioSessionInfo(session);  assertNull(info);}  }
class C{  public void release(){  if (downloadRequestQueue != null) {    downloadRequestQueue.release();    downloadRequestQueue=null;  }}  }
class C{  public XmlTextBuilder(int initialCapacity){  m_textBuf=new StringBuffer(initialCapacity);  m_auxBuf=new StringBuffer(AUX_CAPACITY);}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == TClassifier.class) {switch (baseOperationID) {case TypesPackage.TCLASSIFIER___IS_ABSTRACT:      return TypesPackage.TINTERFACE___IS_ABSTRACT;case TypesPackage.TCLASSIFIER___GET_SUPER_CLASSIFIER_REFS:    return TypesPackage.TINTERFACE___GET_SUPER_CLASSIFIER_REFS;case TypesPackage.TCLASSIFIER___GET_IMPLEMENTED_OR_EXTENDED_INTERFACE_REFS:  return TypesPackage.TINTERFACE___GET_IMPLEMENTED_OR_EXTENDED_INTERFACE_REFS;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public void simulate(){  double[] lambda=new double[stateCount * stateCount];  if (!branchSpecificLambda) {    siteModel.getSubstitutionModel().getInfinitesimalMatrix(lambda);  }  NodeRef root=tree.getRoot();  double[] categoryProbs=siteModel.getCategoryProportions();  int[] category=new int[nReplications];  for (int i=0; i < nReplications; i++) {    category[i]=MathUtils.randomChoicePDF(categoryProbs);  }  FrequencyModel frequencyModel=siteModel.getSubstitutionModel().getFrequencyModel();  int[] seq=new int[nReplications];  for (int i=0; i < nReplications; i++) {    seq[i]=MathUtils.randomChoicePDF(frequencyModel.getFrequencies());  }  setDataType(siteModel.getSubstitutionModel().getDataType());  traverse(root,seq,category,this,lambda);}  }
class C{  private int makeAvailable() throws IOException {  if (pos != -1) {    return 0;  }  total+=tail - head - pad;  System.arraycopy(buffer,tail - pad,buffer,0,pad);  head=0;  tail=pad;  for (; ; ) {    int bytesRead=input.read(buffer,tail,bufSize - tail);    if (bytesRead == -1) {      final String msg="Stream ended unexpectedly";      throw new MalformedStreamException(msg);    }    tail+=bytesRead;    findSeparator();    int av=available();    if (av > 0 || pos != -1) {      return av;    }  }}  }
class C{  public ImportFailedException(final String msg){  super(msg);}  }
class C{  @Nullable public Object firstFieldValue(Object o) throws IgniteCheckedException {  assert o != null;  Field f=firstField(o.getClass());  if (f != null) {    try {      return f.get(o);    } catch (    IllegalAccessException e) {      throw new IgniteCheckedException("Failed to access field for object [field=" + f + ", obj="+ o+ ']',e);    }  }  return null;}  }
class C{  public static SipResponse create200OkInviteResponse(SipDialogPath dialog,String[] featureTags,String[] acceptContactTags,String sdp) throws PayloadException {  try {    Response response=SipUtils.MSG_FACTORY.createResponse(200,dialog.getInvite().getStackMessage());    ToHeader to=(ToHeader)response.getHeader(ToHeader.NAME);    to.setTag(dialog.getLocalTag());    response.addHeader(dialog.getSipStack().getContact());    SipUtils.setFeatureTags(response,featureTags,acceptContactTags);    SipUtils.buildAllowHeader(response);    response.addHeader(SipUtils.buildServerHeader());    if (dialog.getSessionExpireTime() >= SessionTimerManager.MIN_EXPIRE_PERIOD) {      Header requireHeader=SipUtils.HEADER_FACTORY.createHeader(RequireHeader.NAME,"timer");      response.addHeader(requireHeader);      Header sessionExpiresHeader=SipUtils.HEADER_FACTORY.createHeader(SipUtils.HEADER_SESSION_EXPIRES,String.valueOf(dialog.getSessionExpireTime() / SECONDS_TO_MILLISECONDS_CONVERSION_RATE) + ";refresher=" + dialog.getInvite().getSessionTimerRefresher());      response.addHeader(sessionExpiresHeader);    }    response.setContent(sdp,SipUtils.HEADER_FACTORY.createContentTypeHeader("application","sdp"));    response.setContentLength(SipUtils.HEADER_FACTORY.createContentLengthHeader(sdp.getBytes(UTF8).length));    SipResponse resp=new SipResponse(response);    resp.setStackTransaction(dialog.getInvite().getStackTransaction());    return resp;  } catch (  ParseException|InvalidArgumentException e) {    throw new PayloadException("Can't create SIP response with SDP : " + sdp,e);  }}  }
class C{  public static String encodeWebSafe(byte[] source,boolean doPadding){  return encode(source,0,source.length,WEBSAFE_ALPHABET,doPadding);}  }
class C{  @Override public boolean supportsANSI92IntermediateSQL(){  debugCodeCall("supportsANSI92IntermediateSQL");  return false;}  }
class C{  public boolean refreshCredentials(final URI targetUri,final boolean requireCompactToken){  BaseSecureStore.validateTargetUri(targetUri);  Trace.writeLine("BaseVsoAuthentication::refreshCredentials");  try {    TokenPair tokens=null;    AtomicReference<Token> refreshToken=new AtomicReference<Token>();    if (this.AdaRefreshTokenStore.readToken(targetUri,refreshToken)) {      if ((tokens=this.VsoAuthority.acquireTokenByRefreshToken(targetUri,this.ClientId,this.Resource,refreshToken.get())) != null) {        Trace.writeLine("   Azure token found in primary cache.");        this.TenantId=tokens.AccessToken.getTargetIdentity();        return this.generatePersonalAccessToken(targetUri,tokens.AccessToken,requireCompactToken);      }    }    AtomicReference<Token> federatedAuthToken=new AtomicReference<Token>();    if (this.VsoIdeTokenCache.readToken(targetUri,federatedAuthToken)) {      Trace.writeLine("   federated auth token found in IDE cache.");      return this.generatePersonalAccessToken(targetUri,federatedAuthToken.get(),requireCompactToken);    }  } catch (  final Exception exception) {    Debug.Assert(false,exception.getMessage());  }  Trace.writeLine("   failed to refresh credentials.");  return false;}  }
class C{  private void adjustWindowSize(ContainerWrapper parent){  BoundSize wBounds=lc.getPackWidth();  BoundSize hBounds=lc.getPackHeight();  if (wBounds == BoundSize.NULL_SIZE && hBounds == BoundSize.NULL_SIZE)   return;  Container packable=getPackable((Component)parent.getComponent());  if (packable != null) {    Component pc=(Component)parent.getComponent();    Container c=pc instanceof Container ? (Container)pc : pc.getParent();    for (; c != null; c=c.getParent()) {      LayoutManager layout=c.getLayout();      if (layout instanceof BoxLayout || layout instanceof OverlayLayout)       ((LayoutManager2)layout).invalidateLayout(c);    }    Dimension prefSize=packable.getPreferredSize();    int targW=constrain(checkParent(packable),packable.getWidth(),prefSize.width,wBounds);    int targH=constrain(checkParent(packable),packable.getHeight(),prefSize.height,hBounds);    Point p=packable.isShowing() ? packable.getLocationOnScreen() : packable.getLocation();    int x=Math.round(p.x - ((targW - packable.getWidth()) * (1 - lc.getPackWidthAlign())));    int y=Math.round(p.y - ((targH - packable.getHeight()) * (1 - lc.getPackHeightAlign())));    if (packable instanceof JPopupMenu) {      JPopupMenu popupMenu=(JPopupMenu)packable;      popupMenu.setVisible(false);      popupMenu.setPopupSize(targW,targH);      Component invoker=popupMenu.getInvoker();      Point popPoint=new Point(x,y);      SwingUtilities.convertPointFromScreen(popPoint,invoker);      ((JPopupMenu)packable).show(invoker,popPoint.x,popPoint.y);      packable.setPreferredSize(null);    } else {      packable.setBounds(x,y,targW,targH);    }  }}  }
class C{  @Deprecated public void put(final String name,final String[] values){  map.put(name,Lists.newArrayList(values));}  }
class C{  public boolean containsBlock(Block b){  ArrayList<Block> bList=getInternalBlocksList();  for (int i=0; i < bList.size(); i++) {    if (b == bList.get(i)) {      return true;    }  }  return false;}  }
class C{  public MP3Reader(File file) throws FileNotFoundException {  this.file=file;  fis=new FileInputStream(file);  channel=fis.getChannel();  try {    mappedFile=channel.map(FileChannel.MapMode.READ_ONLY,0,channel.size());  } catch (  IOException e) {    log.error("MP3Reader {}",e);  }  mappedFile.order(ByteOrder.BIG_ENDIAN);  in=IoBuffer.wrap(mappedFile);  analyzeKeyFrames();  firstTags.addFirst(createFileMeta());  if (in.remaining() > 4) {    searchNextFrame();    int pos=in.position();    MP3Header header=readHeader();    in.position(pos);    if (header != null) {      checkValidHeader(header);    } else {      throw new RuntimeException("No initial header found.");    }  }}  }
class C{  public static <K>IndirectDoublePriorityQueue<K> synchronize(final IndirectDoublePriorityQueue<K> q,final Object sync){  return new SynchronizedIndirectDoublePriorityQueue<K>(q,sync);}  }
class C{  public String newWorkflowStep(Workflow workflow,String groupId,String description,DiscoveredSystemObject storageSystem,Workflow.Method method,Workflow.Method rollback,String waitFor) throws WorkflowException {  if (groupId == null) {    groupId=method.getClass().getSimpleName();  }  return workflow.createStep(groupId,description,waitFor,storageSystem.getId(),storageSystem.getSystemType(),ExportWorkflowEntryPoints.class,method,rollback,null);}  }
class C{  public static double[] parseCommaDelimitedDoubles(String src){  final String[] parts=ArrayUtils.parseCommaDelimitedString(src);  if (parts.length == 0)   return new double[0];  double[] rtr=new double[parts.length];  for (int i=0; i < parts.length; i++)   rtr[i]=Double.parseDouble(parts[i]);  return rtr;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean isAssumedNonNullBefore(Unit s,Immediate i){  AnalysisInfo ai=(AnalysisInfo)getFlowBefore(s);  return ai.get(i) == NON_NULL;}  }
class C{  public void testSetBitNegativeInside4(){  String as="-4294967295";  int number=0;  BigInteger aNumber=new BigInteger(as);  BigInteger result=aNumber.setBit(number);  assertEquals(as,result.toString());}  }
class C{  public void endLocal(int address,RegisterSpec endedLocal,Disposition disposition){  if (DEBUG) {    System.err.printf("%04x end %s\n",address,endedLocal);  }  int regNum=endedLocal.getReg();  endedLocal=filterSpec(endedLocal);  aboutToProcess(address,regNum);  int endAt=endIndices[regNum];  if (endAt >= 0) {    return;  }  if (checkForEmptyRange(address,endedLocal)) {    return;  }  add(address,disposition,endedLocal);}  }
class C{  public Wedge(Position centerPosition,Angle angle,double height,double radius){  if (centerPosition == null) {    String message=Logging.getMessage("nullValue.PositionIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (angle == null) {    String message=Logging.getMessage("nullValue.AngleIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (radius <= 0) {    String message=Logging.getMessage("generic.ArgumentOutOfRange","radius <= 0");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (height <= 0) {    String message=Logging.getMessage("generic.ArgumentOutOfRange","height <= 0");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (angle.getRadians() < 0 || angle.getRadians() > 2 * Math.PI) {    String message=Logging.getMessage("generic.ArgumentOutOfRange","angle < 0 or angle > 2 PI");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.centerPosition=centerPosition;  this.wedgeAngle=angle;  this.northSouthRadius=radius;  this.verticalRadius=height / 2;  this.eastWestRadius=radius;  this.setUpGeometryCache();}  }
class C{  public Solution undx(Solution[] parents){  if (parents.length < 2) {    throw new IllegalArgumentException("requires at least 2 parents");  }  int k=parents.length;  int n=parents[0].getNumberOfVariables();  double[][] x=new double[k][n];  for (int i=0; i < k; i++) {    for (int j=0; j < n; j++) {      x[i][j]=((RealVariable)parents[i].getVariable(j)).getValue();    }  }  double[] g=Vector.mean(x);  List<double[]> e_zeta=new ArrayList<double[]>();  List<double[]> e_eta=new ArrayList<double[]>();  for (int i=0; i < k - 1; i++) {    double[] d=Vector.subtract(x[i],g);    if (!Vector.isZero(d)) {      double dbar=Vector.magnitude(d);      double[] e=Vector.orthogonalize(d,e_zeta);      if (!Vector.isZero(e)) {        e_zeta.add(Vector.multiply(dbar,Vector.normalize(e)));      }    }  }  double D=Vector.magnitude(Vector.subtract(x[k - 1],g));  for (int i=0; i < n - e_zeta.size(); i++) {    double[] d=randomVector(n);    if (!Vector.isZero(d)) {      double[] e=Vector.orthogonalize(d,e_eta);      if (!Vector.isZero(e)) {        e_eta.add(Vector.multiply(D,Vector.normalize(e)));      }    }  }  double[] variables=g;  for (int i=0; i < e_zeta.size(); i++) {    variables=Vector.add(variables,Vector.multiply(PRNG.nextGaussian(0.0,zeta),e_zeta.get(i)));  }  for (int i=0; i < e_eta.size(); i++) {    variables=Vector.add(variables,Vector.multiply(PRNG.nextGaussian(0.0,eta / Math.sqrt(n)),e_eta.get(i)));  }  Solution result=parents[k - 1].copy();  for (int j=0; j < n; j++) {    RealVariable variable=(RealVariable)result.getVariable(j);    double value=variables[j];    if (value < variable.getLowerBound()) {      value=variable.getLowerBound();    } else     if (value > variable.getUpperBound()) {      value=variable.getUpperBound();    }    variable.setValue(value);  }  return result;}  }
class C{  public void registerObserver(Observer<FunctionInputPanel> observer){  observable.addObserver(observer,false);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Ministry.getInstance().getJobFormat(getInt(stack));}  }
class C{  protected void processData(){  VisualNode visualRoot=root;  if (visualRoot != null) {    visualRoot.getChildren().forEach(null);    vis.validateEdges();    vis.checkThresholds();    vis.autoLayout();  }}  }
class C{  public int compare(Object o1,Object o2){  Tuple t1=(Tuple)o1, t2=(Tuple)o2;  int c=0;  if (m_col == -1) {    if (m_type == int.class || m_type == byte.class) {      c=((LiteralComparator)m_cmp).compare(t1.getInt(m_field),t2.getInt(m_field));    } else     if (m_type == double.class) {      c=((LiteralComparator)m_cmp).compare(t1.getDouble(m_field),t2.getDouble(m_field));    } else     if (m_type == long.class) {      c=((LiteralComparator)m_cmp).compare(t1.getLong(m_field),t2.getLong(m_field));    } else     if (m_type == float.class) {      c=((LiteralComparator)m_cmp).compare(t1.getFloat(m_field),t2.getFloat(m_field));    } else     if (m_type == boolean.class) {      c=((LiteralComparator)m_cmp).compare(t1.getBoolean(m_field),t2.getBoolean(m_field));    } else     if (!m_type.isPrimitive()) {      c=m_cmp.compare(t1.get(m_field),t2.get(m_field));    } else {      throw new IllegalStateException("Unsupported type: " + m_type.getName());    }  } else {    if (m_type == int.class || m_type == byte.class) {      c=((LiteralComparator)m_cmp).compare(t1.getInt(m_col),t2.getInt(m_col));    } else     if (m_type == double.class) {      c=((LiteralComparator)m_cmp).compare(t1.getDouble(m_col),t2.getDouble(m_col));    } else     if (m_type == long.class) {      c=((LiteralComparator)m_cmp).compare(t1.getLong(m_col),t2.getLong(m_col));    } else     if (m_type == float.class) {      c=((LiteralComparator)m_cmp).compare(t1.getFloat(m_col),t2.getFloat(m_col));    } else     if (m_type == boolean.class) {      c=((LiteralComparator)m_cmp).compare(t1.getBoolean(m_col),t2.getBoolean(m_col));    } else     if (!m_type.isPrimitive()) {      c=m_cmp.compare(t1.get(m_col),t2.get(m_col));    } else {      throw new IllegalStateException("Unsupported type: " + m_type.getName());    }  }  return m_rev * c;}  }
class C{  private void addMethod(MethodNode methodNode){  String[] exceptions=new String[methodNode.exceptions.size()];  methodNode.exceptions.toArray(exceptions);  MethodVisitor mv=cv.visitMethod(methodNode.access,methodNode.name,methodNode.desc,methodNode.signature,exceptions);  methodNode.instructions.resetLabels();  methodNode.accept(new RemappingMethodAdapter(methodNode.access,methodNode.desc,mv,new SimpleRemapper(classToMerge.name,baseClassName)));}  }
class C{  public static int parseInt(String text,int defaultValue){  try {    return Integer.parseInt(text);  } catch (  NumberFormatException|NullPointerException ex) {    return defaultValue;  }}  }
class C{  public static double optimizeWindowSize(double delta,double currentLevel,double targetLevel){  return optimizeWindowSize(delta,Double.MAX_VALUE,currentLevel,targetLevel);}  }
class C{  public long count(){  return xStats.count();}  }
class C{  public boolean isListInvoices(){  Object oo=get_Value(COLUMNNAME_IsListInvoices);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void registerVerb(final String verb){  final String key=trimWord(verb);  final WordEntry entry=words.get(key);  if ((entry == null) || (entry.getType() == null) || entry.getType().isEmpty()) {    final WordEntry newEntry=new WordEntry();    newEntry.setNormalized(key);    newEntry.setType(new ExpressionType(VERB_DYNAMIC));    words.put(key,newEntry);  }}  }
class C{  public double pdf(double x){  if (x <= 0.0)   throw new IllegalArgumentException();  double logGamma=Fun.logGamma(freedom / 2.0);  return Math.exp((freedom / 2.0 - 1.0) * Math.log(x / 2.0) - x / 2.0 - logGamma) / 2.0;}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  log.fine("Success=" + success);  if (!success) {    return false;  }  if (newRecord) {    MWFNode[] nodes=getNodesInOrder(0);    for (int i=0; i < nodes.length; i++) {      nodes[i].saveEx(get_TrxName());    }  }  if (newRecord) {    int AD_Role_ID=Env.getAD_Role_ID(getCtx());    MWorkflowAccess wa=new MWorkflowAccess(this,AD_Role_ID);    wa.saveEx();  } else   if (is_ValueChanged("IsActive") || is_ValueChanged(COLUMNNAME_Name) || is_ValueChanged(COLUMNNAME_Description)|| is_ValueChanged(COLUMNNAME_Help)) {    MMenu[] menues=MMenu.get(getCtx(),"AD_Workflow_ID=" + getAD_Workflow_ID(),get_TrxName());    for (int i=0; i < menues.length; i++) {      menues[i].setIsActive(isActive());      menues[i].setName(getName());      menues[i].setDescription(getDescription());      menues[i].saveEx();    }  }  return success;}  }
class C{  public boolean hasMoreArguments() throws SyntaxError {  int ch=sp.peek();  return (!(ch == 0 || ch == ')'));}  }
class C{  private OptionManagerEncryption(){  this.m_OptionSoapAction=new OptionSoapAction("Change\nAction?","Allows to change the SoapAction Header.");  this.m_OptionSchemaFiles=new OptionSimpleMultiFiles("Used\nSchema\nfiles","Set the Schema Files.\nSoap11, Soap12, WSA, WSSE, WSU, DS and XPathFilter2\nare included by default.");  this.m_OptionUseSchema=new OptionSimpleBoolean("Schema?",true,"Use XML Schema.");  this.m_OptionPayloadList=new ArrayList<AbstractEncryptionElement>();  this.m_OptionServerResponse=null;  PKCS1AttackConfig pKCS1AttackCFG=new PKCS1AttackConfig();  this.m_AttackCfg=new AttackConfig();  m_AttackCfg.setPKCS1AttackCfg(pKCS1AttackCFG);  initAttackCfg();  m_PipeLine=new Pipeline();}  }
class C{  public STGroupFile(URL url,String encoding,char delimiterStartChar,char delimiterStopChar){  super(delimiterStartChar,delimiterStopChar);  this.url=url;  this.encoding=encoding;  this.fileName=null;}  }
class C{  public CorrelationAnalysisSolution<V> generateModel(Relation<V> db,DBIDs ids){  return generateModel(db,ids,Centroid.make(db,ids).getArrayRef());}  }
class C{  public NotificationChain basicSetDeclaredName(LiteralOrComputedPropertyName newDeclaredName,NotificationChain msgs){  LiteralOrComputedPropertyName oldDeclaredName=declaredName;  declaredName=newDeclaredName;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.N4_FIELD_ACCESSOR__DECLARED_NAME,oldDeclaredName,newDeclaredName);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static Predicates2<String,String> notStartsWith(){  return NOT_STARTS_WITH;}  }
class C{  private void foo(String methodName) throws RuntimeException {  RuntimeException re=new RuntimeException("unexpected call to " + methodName);  N4IDEXpectUIPlugin.logError(getClass().getSimpleName() + " does not impleemnt " + methodName+ ", check xpect setups if it should",re);  throw re;}  }
class C{  public static boolean isDynamicAttribute(MetaProperty metaProperty){  return metaProperty instanceof DynamicAttributesMetaProperty;}  }
class C{  public String optimize(){  LanguageModelSearch search=new LanguageModel11EA(constantValue,objective);  return search.optimise();}  }
class C{  public static boolean checkTransactionLockTime(Transaction transaction,int locktime){  if (Math.abs(transaction.getLockTime() - locktime) > 5 * 60) {    System.out.println("Locktime not correct. Should be: " + locktime + " Is: "+ transaction.getLockTime()+ " Diff: "+ Math.abs(transaction.getLockTime() - locktime));    return false;  }  if (locktime == 0) {    return true;  }  for (  TransactionInput input : transaction.getInputs()) {    if (input.getSequenceNumber() == 0) {      return true;    }  }  System.out.println("No Sequence Number is 0..");  return false;}  }
class C{  public boolean checkUserNum() throws MailOperationException {  long currentNum=countRegisteredUsers();  long maxNum=configService.getLongConfigurationSetting(ConfigurationKey.MAX_NUMBER_ALLOWED_USERS,Configuration.GLOBAL_CONTEXT);  if (currentNum > maxNum) {    sendMailToOperators(currentNum,maxNum);    logger.logInfo(Log4jLogger.SYSTEM_LOG,LogMessageIdentifier.INFO_USER_NUM_EXCEEDED,String.valueOf(maxNum),String.valueOf(currentNum));  }  return true;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MAlert[");  sb.append(get_ID()).append("-").append(getName()).append(",Valid=").append(isValid());  if (m_rules != null)   sb.append(",Rules=").append(m_rules.length);  if (m_recipients != null)   sb.append(",Recipients=").append(m_recipients.length);  sb.append("]");  return sb.toString();}  }
class C{  public boolean isSetPutRequest(){  return this.putRequest != null;}  }
class C{  private void createInitialDirContext(String server,int port) throws InvalidAlgorithmParameterException {  String url="ldap://" + server + ":"+ port;  Hashtable<String,Object> env=new Hashtable<>();  env.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");  env.put(Context.PROVIDER_URL,url);  boolean disableAppResourceFiles=AccessController.doPrivileged(new GetBooleanAction(PROP_DISABLE_APP_RESOURCE_FILES));  if (disableAppResourceFiles) {    if (debug != null) {      debug.println("LDAPCertStore disabling app resource files");    }    env.put("com.sun.naming.disable.app.resource.files","true");  }  try {    ctx=new InitialDirContext(env);    Hashtable<?,?> currentEnv=ctx.getEnvironment();    if (currentEnv.get(Context.REFERRAL) == null) {      ctx.addToEnvironment(Context.REFERRAL,"follow");    }  } catch (  NamingException e) {    if (debug != null) {      debug.println("LDAPCertStore.engineInit about to throw " + "InvalidAlgorithmParameterException");      e.printStackTrace();    }    Exception ee=new InvalidAlgorithmParameterException("unable to create InitialDirContext using supplied parameters");    ee.initCause(e);    throw (InvalidAlgorithmParameterException)ee;  }}  }
class C{  public boolean isExplored(GraphNode node){  NodeState result=findNodeState(node);  if (null == result) {    return false;  }  return (result.explored > 0);}  }
class C{  public static List<String> stringRefIds(Collection<? extends RelatedResourceRep> refs){  List<String> ids=new ArrayList<String>();  if (refs != null) {    for (    RelatedResourceRep ref : refs) {      ids.add(stringId(ref));    }  }  return ids;}  }
class C{  protected View createZone(int p0,int p1){  Document doc=getDocument();  View zone;  try {    zone=new Zone(getElement(),doc.createPosition(p0),doc.createPosition(p1));  } catch (  BadLocationException ble) {    throw new StateInvariantError(ble.getMessage());  }  return zone;}  }
class C{  protected void closeOldResultSet() throws SQLException {  try {    if (!closedByResultSet) {      if (resultSet != null) {        resultSet.closeInternal();      }    }  }  finally {    cancelled=false;    resultSet=null;    updateCount=-1;  }}  }
class C{  private static boolean includeAuthorityInRequestLine(Request request,Proxy.Type proxyType){  return !request.isHttps() && proxyType == Proxy.Type.HTTP;}  }
class C{  public String Get(StreamKind StreamKind,int StreamNumber,int parameterIndex,InfoKind infoKind){  if (isLoaded()) {    return MediaInfoLibrary.INSTANCE.GetI(handle,StreamKind.ordinal(),StreamNumber,parameterIndex,infoKind.ordinal()).toString();  } else {    return "";  }}  }
class C{  private DistributedMember disconnectMethod(){  DistributedMember dsMember=((InternalDistributedSystem)getCache().getDistributedSystem()).getDistributionManager().getId();  getCache().getDistributedSystem().disconnect();  LogWriterUtils.getLogWriter().info("disconnectMethod() completed ..");  return dsMember;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return TRACE_ID;case 3:  return NAME;case 4:return ID;case 5:return PARENT_ID;case 6:return ANNOTATIONS;case 8:return BINARY_ANNOTATIONS;case 9:return DEBUG;default :return null;}}  }
class C{  public static String stringFor(int n){switch (n) {case CU_TR_ADDRESS_MODE_WRAP:    return "CU_TR_ADDRESS_MODE_WRAP";case CU_TR_ADDRESS_MODE_CLAMP:  return "CU_TR_ADDRESS_MODE_CLAMP";case CU_TR_ADDRESS_MODE_MIRROR:return "CU_TR_ADDRESS_MODE_MIRROR";}return "INVALID CUaddress_mode: " + n;}  }
class C{  public static <E>int moveElement(List<E> list,int oldPos,int newPos){  if (list == null) {    throw new IllegalArgumentException("List must have been initialized.");  }  if (list.isEmpty() || list.size() == 1) {    throw new IllegalArgumentException("List contains not enough elements, move makes no sense.");  }  if (oldPos < 0) {    throw new IllegalArgumentException("Referred position of the element to move must not be negative.");  }  if (oldPos >= list.size()) {    throw new IllegalArgumentException("List has fewer elements than the referred position of the element to move.");  }  if (oldPos != newPos) {    E itemToBeMoved=list.remove(oldPos);    if (newPos < 0) {      newPos=0;    }    if (newPos >= list.size()) {      newPos=list.size();    }    list.add(newPos,itemToBeMoved);  }  return newPos;}  }
class C{  public void init(int WindowNo,FormFrame frame){  log.info("");  m_WindowNo=WindowNo;  m_frame=frame;  Env.setContext(Env.getCtx(),m_WindowNo,"IsSOTrx","N");  panel=new VGenPanel(this,WindowNo,frame);  try {    super.dynInit();    dynInit();    jbInit();  } catch (  Exception ex) {    log.log(Level.SEVERE,"init",ex);  }}  }
class C{  int curveProgressToScreenY(float p){  if (p < 0 || p > 1)   return mStackVisibleRect.top + (int)(p * mStackVisibleRect.height());  float pIndex=p * PrecisionSteps;  int pFloorIndex=(int)Math.floor(pIndex);  int pCeilIndex=(int)Math.ceil(pIndex);  float xFraction=0;  if (pFloorIndex < PrecisionSteps && (pCeilIndex != pFloorIndex)) {    float pFraction=(pIndex - pFloorIndex) / (pCeilIndex - pFloorIndex);    xFraction=(xp[pCeilIndex] - xp[pFloorIndex]) * pFraction;  }  float x=xp[pFloorIndex] + xFraction;  return mStackVisibleRect.top + (int)(x * mStackVisibleRect.height());}  }
class C{  private void createDataLinks(Draft3Workflow workflow) throws Draft3Exception {  for (  Draft3OutputPort port : workflow.getOutputs()) {    port.setId(Draft2ToDraft3Converter.convertPortID(port.getId()));    List<String> sources=transformSource(port.getSource());    for (int position=0; position < sources.size(); position++) {      String destination=port.getId();      LinkMerge linkMerge=port.getLinkMerge() != null ? LinkMerge.valueOf(port.getLinkMerge()) : LinkMerge.merge_nested;      String source=sources.get(position);      source=Draft2ToDraft3Converter.convertSource(source);      source=Draft3SchemaHelper.normalizeId(source);      Draft3DataLink dataLink=new Draft3DataLink(source,destination,linkMerge,position + 1);      workflow.addDataLink(dataLink);    }  }  for (  Draft3Step step : workflow.getSteps()) {    step.setId(Draft2ToDraft3Converter.convertStepID(step.getId()));    List<Draft3DataLink> dataLinks=new ArrayList<>();    for (    Map<String,Object> input : step.getInputs()) {      List<String> sources=transformSource(Draft3BindingHelper.getSource(input));      for (int position=0; position < sources.size(); position++) {        String destination=Draft3BindingHelper.getId(input);        destination=Draft2ToDraft3Converter.convertDestinationId(destination);        destination=step.getId() + SLASH_SEPARATOR + destination;        LinkMerge linkMerge=Draft3BindingHelper.getLinkMerge(input) != null ? LinkMerge.valueOf(Draft3BindingHelper.getLinkMerge(input)) : LinkMerge.merge_nested;        String source=sources.get(position);        source=Draft2ToDraft3Converter.convertSource(source);        source=Draft3SchemaHelper.normalizeId(source);        Draft3DataLink dataLink=new Draft3DataLink(source,destination,linkMerge,position + 1);        dataLinks.add(dataLink);      }    }    workflow.addDataLinks(dataLinks);  }}  }
class C{  void deinitializeImpl(){  super.deinitializeImpl();  int componentCount=components.size();  for (int iter=0; iter < componentCount; iter++) {    Component cmp=components.get(iter);    cmp.deinitializeImpl();  }  flushReplace();}  }
class C{  @Path("showlog") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces({MediaType.APPLICATION_JSON,MediaType.TEXT_PLAIN}) @RolesAllowed("workspace/developer") public CLIOutputResponse showLog(final ShowLogRequest request) throws ServerException, IOException {  request.setProjectPath(getRealPath(request.getProjectPath()));  return this.subversionApi.showLog(request);}  }
class C{  public Rest parameter(final String name,final String value) throws RestException {  try {    this.parameters.put(URLEncoder.encode(name,"UTF-8"),URLEncoder.encode(value,"UTF-8"));  } catch (  UnsupportedEncodingException e) {    throw new RestException(e);  }  return this;}  }
class C{  public TObjectLongHashMap(int initialCapacity){  super(initialCapacity);}  }
class C{  @Override public void updateBlob(String columnLabel,Blob x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateBlob(" + quote(columnLabel) + ", x);");    }    checkClosed();    Value v;    if (x == null) {      v=ValueNull.INSTANCE;    } else {      v=conn.createBlob(x.getBinaryStream(),-1);    }    update(columnLabel,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public DelegationSpec(SamlToken actAsToken,boolean isDelegable){  ValidateUtil.validateNotNull(actAsToken,"ActAs token");  this.isDelegable=isDelegable;  this.delegateTo=null;  this.actAsToken=actAsToken;  assert invariantRespected();}  }
class C{  public MailScriptCommand(Configuration configuration,String resourcePath,Resource resource){  super(configuration,resourcePath);  this.resource=resource;}  }
class C{  public static ObjectMapper config(){  final ObjectMapper m=new ObjectMapper(new YAMLFactory());  m.addMixIn(ClusterDiscoveryModule.class,TypeNameMixin.class);  m.addMixIn(RpcProtocolModule.class,TypeNameMixin.class);  m.addMixIn(ConsumerModule.Builder.class,TypeNameMixin.class);  m.addMixIn(MetadataModule.class,TypeNameMixin.class);  m.addMixIn(SuggestModule.class,TypeNameMixin.class);  m.addMixIn(MetricModule.class,TypeNameMixin.class);  m.addMixIn(MetricGeneratorModule.class,TypeNameMixin.class);  m.addMixIn(MetadataGenerator.class,TypeNameMixin.class);  m.addMixIn(JettyConnectionFactory.Builder.class,TypeNameMixin.class);  m.addMixIn(AnalyticsModule.Builder.class,TypeNameMixin.class);  m.addMixIn(StatisticsModule.class,TypeNameMixin.class);  m.registerModule(commonSerializers());  m.registerModule(new Jdk8Module());  return m;}  }
class C{  public Vertex applyEval(Map<Vertex,Vertex> variables,Network network){  Vertex result=null;  try {    if (isVariable()) {      result=variables.get(this);      if (result == null) {        result=network.createVertex(Primitive.NULL);      }    } else     if (instanceOf(Primitive.EQUATION)) {      if (getData() instanceof BinaryData) {        Vertex equation=new SelfDecompiler().parseEquationByteCode(this,(BinaryData)getData(),this.network);        return equation.applyEval(variables,network);      }      Vertex operator=getRelationship(Primitive.OPERATOR);      List<Relationship> arguments=orderedRelationships(Primitive.ARGUMENT);      if (operator.is(Primitive.EVAL)) {        return arguments.get(0).getTarget().applyQuotient(variables,network);      }    } else {      result=(Vertex)(Object)this;    }    if (result == null) {      result=network.createVertex(Primitive.NULL);    }    if (result.getNetwork() != network) {      result=network.createVertex(result);    }    boolean formula=result.instanceOf(Primitive.FORMULA);    boolean pattern=result.instanceOf(Primitive.PATTERN);    if (formula || pattern) {      List<Vertex> words=result.orderedRelations(Primitive.WORD);      if (words == null) {        return result;      }      List<Vertex> newWords=new ArrayList<Vertex>(words.size());      boolean eval=false;      boolean formulaRequired=false;      for (      Vertex word : words) {        if (word.instanceOf(Primitive.EQUATION)) {          if (word.getData() instanceof BinaryData) {            word=new SelfDecompiler().parseEquationByteCode(word,(BinaryData)word.getData(),this.network);          }          Vertex operator=word.getRelationship(Primitive.OPERATOR);          if (operator != null && operator.is(Primitive.EVAL)) {            eval=true;            Vertex newWord=word.applyEval(variables,network);            if (newWord.instanceOf(Primitive.EQUATION) || newWord.instanceOf(Primitive.FORMULA)) {              formulaRequired=true;            }            newWords.add(newWord);          } else {            formulaRequired=true;            newWords.add(word);          }        } else         if (word.instanceOf(Primitive.VARIABLE)) {          formulaRequired=true;          newWords.add(word);        } else {          newWords.add(word);        }      }      if (eval) {        if (pattern) {          result=network.createTemporyVertex();          result.addRelationship(Primitive.INSTANTIATION,Primitive.PATTERN);        } else         if (formulaRequired) {          result=network.createInstance(Primitive.FORMULA);        } else {          result=network.createTemporyVertex();          result.addRelationship(Primitive.INSTANTIATION,Primitive.SENTENCE);        }        int index=0;        for (        Vertex word : newWords) {          result.addRelationship(Primitive.WORD,word,index);          index++;        }        if (!formulaRequired) {          Language language=network.getBot().mind().getThought(Language.class);          result=language.createSentenceText(result,network);          if (pattern) {            result=network.createSentence(Utils.reduce(result.printString()));          }        }      }    }  } catch (  SelfExecutionException exception) {    throw exception;  }catch (  Exception exception) {    throw new SelfExecutionException(this,exception);  }  return result;}  }
class C{  private Field findIdField(Class<?> entityClass){  if (entityClass == null) {    return null;  }  Field idField=null;  for (  Field field : entityClass.getDeclaredFields()) {    if (Modifier.isStatic(field.getModifiers())) {      continue;    }    if (field.isAnnotationPresent(Id.class)) {      return field;    }    if (field.getName().equals("id") || field.getName().equals("_id")) {      idField=field;    }  }  Field idParent=findIdField(entityClass.getSuperclass());  if (idParent != null && idParent.isAnnotationPresent(Id.class)) {    return idParent;  } else   if (idField != null) {    return idField;  } else {    return idParent;  }}  }
class C{  private void createHelper(EnumerationContext ctx,GCPInstance virtualMachine,AtomicInteger size){  List<Operation> operations=new ArrayList<>();  ComputeDescription computeDescription=new ComputeDescription();  computeDescription.id=UUID.randomUUID().toString();  computeDescription.name=virtualMachine.name;  computeDescription.zoneId=virtualMachine.zone;  computeDescription.regionId=extractRegionFromZone(virtualMachine.zone);  computeDescription.instanceType=extractActualInstanceType(virtualMachine.machineType);  computeDescription.authCredentialsLink=ctx.parentAuth.documentSelfLink;  computeDescription.documentSelfLink=computeDescription.id;  computeDescription.environmentName=ENVIRONMENT_NAME_GCP;  computeDescription.instanceAdapterReference=UriUtils.buildUri(ServiceHost.LOCAL_HOST,this.getHost().getPort(),GCPUriPaths.GCP_INSTANCE_ADAPTER,null);  computeDescription.statsAdapterReference=UriUtils.buildUri(ServiceHost.LOCAL_HOST,this.getHost().getPort(),GCPUriPaths.GCP_STATS_ADAPTER,null);  computeDescription.tenantLinks=ctx.computeHostDesc.tenantLinks;  Operation compDescOp=Operation.createPost(getHost(),ComputeDescriptionService.FACTORY_LINK).setBody(computeDescription);  operations.add(compDescOp);  DiskService.DiskState rootDisk=new DiskService.DiskState();  rootDisk.id=UUID.randomUUID().toString();  rootDisk.documentSelfLink=rootDisk.id;  rootDisk.customProperties=new HashMap<>();  boolean foundRoot=false;  if (virtualMachine.disks != null && !virtualMachine.disks.isEmpty()) {    for (    GCPDisk gcpDisk : virtualMachine.disks) {      if (gcpDisk.boot) {        foundRoot=true;        rootDisk.name=gcpDisk.deviceName;        rootDisk.customProperties.put(DISK_AUTO_DELETE,gcpDisk.autoDelete.toString());        break;      }    }  }  if (!foundRoot) {    rootDisk.name=rootDisk.id;  }  rootDisk.type=DiskType.HDD;  rootDisk.capacityMBytes=DEFAULT_DISK_CAPACITY;  rootDisk.sourceImageReference=URI.create(DEFAULT_DISK_SOURCE_IMAGE);  rootDisk.customizationServiceReference=URI.create(DEFAULT_DISK_SERVICE_REFERENCE);  rootDisk.bootOrder=1;  rootDisk.tenantLinks=ctx.computeHostDesc.tenantLinks;  Operation diskOp=Operation.createPost(getHost(),DiskService.FACTORY_LINK).setBody(rootDisk);  operations.add(diskOp);  List<String> vmDisks=new ArrayList<>();  vmDisks.add(UriUtils.buildUriPath(DiskService.FACTORY_LINK,rootDisk.documentSelfLink));  ComputeState resource=new ComputeState();  resource.id=virtualMachine.id.toString();  resource.name=virtualMachine.name;  resource.parentLink=ctx.enumRequest.resourceLink();  resource.descriptionLink=UriUtils.buildUriPath(ComputeDescriptionService.FACTORY_LINK,computeDescription.documentSelfLink);  resource.resourcePoolLink=ctx.enumRequest.resourcePoolLink;  resource.diskLinks=vmDisks;  resource.customProperties=new HashMap<>();  String osType=getNormalizedOSType(virtualMachine);  if (osType != null) {    resource.customProperties.put(CUSTOM_OS_TYPE,osType);  }  resource.tenantLinks=ctx.computeHostDesc.tenantLinks;  assignIPAddress(resource,virtualMachine);  assignPowerState(resource,virtualMachine.status);  Operation resourceOp=Operation.createPost(getHost(),ComputeService.FACTORY_LINK).setBody(resource);  operations.add(resourceOp);  OperationJoin.create(operations).setCompletion(null).sendWith(this);}  }
class C{  public boolean isRegistered(){  return mRegistered;}  }
class C{  private void mkdirs(File directory,String message) throws IOException {  try {    FileUtils.mkdirs(directory);  } catch (  FileUtils.CreateDirectoryException cde) {    mCacheErrorLogger.logError(CacheErrorLogger.CacheErrorCategory.WRITE_CREATE_DIR,TAG,message,cde);    throw cde;  }}  }
class C{  public static void populate(InterchangeObject.InterchangeObjectBO object,ByteProvider byteProvider,long numBytesToRead,Map<Integer,MXFUID> localTagToUIDMap) throws IOException {  long numBytesRead=0;  while (numBytesRead < numBytesToRead) {    int localTag=MXFPropertyPopulator.getUnsignedShortAsInt(byteProvider.getBytes(2),KLVPacket.BYTE_ORDER);    numBytesRead+=2;    long length;    if (object.getHeader().getRegistryDesignator() == 0x53) {      length=MXFPropertyPopulator.getUnsignedShortAsInt(byteProvider.getBytes(2),KLVPacket.BYTE_ORDER);      numBytesRead+=2;    } else     if (object.getHeader().getRegistryDesignator() == 0x13) {      KLVPacket.LengthField lengthField=KLVPacket.getLength(byteProvider);      length=lengthField.value;      numBytesRead+=lengthField.sizeOfLengthField;    } else {      throw new MXFException(String.format("Byte 5 (zero-indexed) for MXF Structural Metadata key = %s is invalid",Arrays.toString(object.getHeader().getKey())));    }    MXFUID mxfUL=localTagToUIDMap.get(localTag);    if ((mxfUL != null) && (StructuralMetadata.ItemULToItemName.get(mxfUL) != null)) {      String itemName=StructuralMetadata.ItemULToItemName.get(mxfUL);      int expectedLength=MXFPropertyPopulator.getFieldSizeInBytes(object,itemName);      if ((expectedLength > 0) && (length != expectedLength)) {        throw new MXFException(String.format("Actual length from bitstream = %d is different from expected length = %d",length,expectedLength));      }      MXFPropertyPopulator.populateField((int)length,byteProvider,object,itemName);    } else {      byteProvider.skipBytes(length);    }    numBytesRead+=length;  }}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FAVITER_APPS'";  db.execSQL(sql);}  }
class C{  public void startUp(){}  }
class C{  private void scaleBitmaps(Bitmap[] bitmaps,float scale){  for (int i=0; i < bitmaps.length; i++) {    bitmaps[i]=scaleBitmap(bitmaps[i],scale);  }}  }
class C{  private void syncFiles(CachedFile src,CachedFile dst) throws IOException {  if (logger.isTraceEnabled())   logger.trace("syncFiles (" + src + ","+ dst+ ")");  CatalogManager.callback.incStepProgressIndicatorPosition();  assert (src != null) & (dst != null) : "Unexpected parameter to copy: src=" + src + ", dst="+ dst;  if (!src.exists()) {    src.clearCachedInformation();    if (src.exists()) {      logger.error("syncFiles: Incorrect caching of exists()=false status for file: " + src.getAbsolutePath());    }  }  if (!src.exists()) {    if (!src.isDirectory()) {      logger.error("syncFiles: Missing catalog file " + src.getAbsolutePath());      return;    }    logger.warn("syncFiles: Unexpected missing file: " + src.getAbsolutePath());    return;  }  if (src.getAbsolutePath().equalsIgnoreCase(dst.getAbsolutePath())) {    CatalogManager.statsCopyToSelf++;    if (syncFilesDetail && logger.isTraceEnabled())     logger.trace("syncFiles: attempting to copy file to itself: " + src.getAbsolutePath());    return;  }  if (src.isDirectory()) {    if (logger.isTraceEnabled())     logger.trace("Directory " + src.getName() + " Processing Started");    String displayText=src.getParentFile().getName() + File.separator + src.getName();    if (displayText.startsWith(CatalogManager.getGenerateFolder().getName())) {      displayText=displayText.substring(CatalogManager.getGenerateFolder().getName().length() + 1);    }    CatalogManager.callback.showMessage(displayText);    msgCount=0;    if (!dst.exists()) {      dst.clearCachedInformation();    }    if (!dst.exists()) {      if (logger.isTraceEnabled())       logger.trace("Directory " + dst.getName() + " Create missing target");      CatalogManager.syncLogPrintln("CREATED: %s",dst.getName());      assert !dst.getName().endsWith("_Page");      dst.mkdirs();      dst.clearCachedInformation();    }    if (!dst.isDirectory()) {      logger.warn("Directory " + src.getName() + " Unexpected file with name expected for directory");      return;    }    File sourceFiles[]=src.listFiles();    File destfiles[]=dst.listFiles();    List<File> targetNotInSourceFiles;    if (destfiles != null) {      targetNotInSourceFiles=new LinkedList<File>(Arrays.asList(dst.listFiles()));    } else {      logger.debug("***** Possible Program Error: unexpected null from dst.listFiles() when dst=" + dst);      targetNotInSourceFiles=new LinkedList<File>();    }    for (int i=0; i < sourceFiles.length; i++) {      CachedFile sourceFile=CachedFileManager.addCachedFile(sourceFiles[i]);      String fileName=sourceFile.getName();      CachedFile destFile=CachedFileManager.addCachedFile(dst,fileName);      if (destFile.exists()) {        if ((src.getName().endsWith(Constants.XML_EXTENSION)) && (currentProfile.getGenerateOpds() == true)) {          if (logger.isTraceEnabled())           logger.trace("No OPDS catalog so delete " + src.getAbsolutePath());        } else {          targetNotInSourceFiles.remove(destFile);          assert CachedFileManager.inCache(destFile) != null;        }      } else {        if (logger.isTraceEnabled())         logger.trace("Directory " + src.getAbsolutePath() + " Unexpected missing target"+ dst.getName());        CachedFileManager.removeCachedFile(destFile);      }      syncFiles(sourceFile,destFile);    }    for (    File file : targetNotInSourceFiles) {      CachedFile deleteFile=CachedFileManager.addCachedFile(file);      if (deleteFile.isChanged() == true) {        Helper.delete(deleteFile,true);        CatalogManager.syncLogPrintln("DELETED: %s",deleteFile.getName());        CatalogManager.statsCopyDeleted++;        CachedFileManager.removeCachedFile(deleteFile);      } else {        CatalogManager.statsCopyUnchanged++;        CatalogManager.syncLogPrintln("UNCHANGED: %s",deleteFile.getName());      }    }    if (logger.isTraceEnabled())     logger.trace("Directory " + src.getName() + " Processing completed");  } else {    boolean copyflag;    if (!currentProfile.getGenerateOpds()) {      if (src.getName().endsWith(Constants.XML_EXTENSION)) {        int dummy=1;        if (syncFilesDetail && logger.isTraceEnabled())         logger.trace("File " + dst.getAbsolutePath() + ": "+ (dst.exists() ? ": Deleted as XML file and no OPDS catalog required" : ": Ignored as XML file and no OPDS catalog required"));        CachedFileManager.removeCachedFile(src);        CachedFileManager.removeCachedFile(dst);        return;      }    }    if (syncFilesDetail && logger.isTraceEnabled())     logger.trace("File " + src.getName() + ": Checking to see if should be copied");    if (!dst.exists()) {      dst.clearCachedInformation();    }    if (!dst.exists()) {      if (syncFilesDetail && logger.isTraceEnabled())       logger.trace("File " + src.getName() + ": Copy as target is missing");      CatalogManager.statsCopyExistHits++;      copyflag=true;      CatalogManager.syncLogPrintln("COPIED (New file): %s",dst.getName());      dst.clearCachedInformation();    } else {      if (dst.isChanged() == false) {        copyflag=false;        CatalogManager.statsCopyUnchanged++;      } else {        if (syncFilesDetail && logger.isTraceEnabled())         logger.trace("File " + src.getName() + ": .. exists on target");        if (src.length() != dst.length()) {          if (logger.isTraceEnabled())           logger.trace("File " + src.getName() + ": Copy as size changed");          CatalogManager.statsCopyLengthHits++;          copyflag=true;          CatalogManager.syncLogPrintln("COPIED (length changed): %s\n",src.getName());        } else {          if (syncFilesDetail && logger.isTraceEnabled())           logger.trace("File " + src.getName() + ": .. size same on source and target");          if (src.lastModified() <= dst.lastModified()) {            if (logger.isTraceEnabled())             logger.trace("File " + src.getName() + ": Skip Copy as source is not newer");            CatalogManager.statsCopyDateMisses++;            copyflag=false;            CatalogManager.syncLogPrintln("NOT COPIED (Source not newer): %s\n",dst.getName());          } else {            if (syncFilesDetail && logger.isTraceEnabled())             logger.trace("File " + src.getName() + ": .. source is newer");            if (CatalogManager.isSourceFileSameAsTargetFile(src,dst)) {              if (logger.isTraceEnabled())               logger.trace("File " + src.getName() + ": Skip copy as CRC's match");              CatalogManager.statsCopyCrcMisses++;              copyflag=false;              CatalogManager.syncLogPrintln("NOT COPIED (CRC same): %s\n",src.getName());            } else {              if (logger.isTraceEnabled())               logger.trace("File " + src.getName() + ": Copy as CRC's different");              CatalogManager.statsCopyCrcHits++;              copyflag=true;              CatalogManager.syncLogPrintln("COPIED (CRC changed): %s\n",src.getName());            }          }        }      }    }    msgCount++;    if (copyflag || msgCount > MSGCOUNT_INTERVAL) {      CatalogManager.callback.showMessage(src.getParentFile().getName() + File.separator + src.getName());      msgCount=0;    }    if (copyflag) {      if (msgCount != 0) {        CatalogManager.callback.showMessage(src.getParentFile().getName() + File.separator + src.getName());        msgCount=0;      }      msgCount++;      if (syncFilesDetail && logger.isDebugEnabled())       logger.debug("Copying file " + src.getName() + " to "+ dst.getAbsolutePath());      try {        Helper.copy(src,dst);        dst.setCachedValues(true,src.lastModified(),src.length(),src.getCrc(),src.isDirectory());      } catch (      java.io.FileNotFoundException e) {        logger.warn("Unable to to copy file " + src);        if (logger.isDebugEnabled())         logger.debug(e.toString());      }    }  }}  }
class C{  public LocalDate create(final Calendar c){  return LocalDate.of(c.get(Calendar.YEAR),c.get(Calendar.MONTH) + 1,c.get(Calendar.DAY_OF_MONTH));}  }
class C{  @Override public void paintBar(Graphics2D g2,BarRenderer renderer,int row,int column,RectangularShape bar,RectangleEdge base){  Paint itemPaint=renderer.getItemPaint(row,column);  Color c0, c1;  if (itemPaint instanceof Color) {    c0=(Color)itemPaint;    c1=c0.brighter();  } else   if (itemPaint instanceof GradientPaint) {    GradientPaint gp=(GradientPaint)itemPaint;    c0=gp.getColor1();    c1=gp.getColor2();  } else {    c0=Color.BLUE;    c1=Color.BLUE.brighter();  }  if (c0.getAlpha() == 0) {    return;  }  if (base == RectangleEdge.TOP || base == RectangleEdge.BOTTOM) {    Rectangle2D[] regions=splitVerticalBar(bar,this.g1,this.g2,this.g3);    GradientPaint gp=new GradientPaint((float)regions[0].getMinX(),0.0f,c0,(float)regions[0].getMaxX(),0.0f,Color.WHITE);    g2.setPaint(gp);    g2.fill(regions[0]);    gp=new GradientPaint((float)regions[1].getMinX(),0.0f,Color.WHITE,(float)regions[1].getMaxX(),0.0f,c0);    g2.setPaint(gp);    g2.fill(regions[1]);    gp=new GradientPaint((float)regions[2].getMinX(),0.0f,c0,(float)regions[2].getMaxX(),0.0f,c1);    g2.setPaint(gp);    g2.fill(regions[2]);    gp=new GradientPaint((float)regions[3].getMinX(),0.0f,c1,(float)regions[3].getMaxX(),0.0f,c0);    g2.setPaint(gp);    g2.fill(regions[3]);  } else   if (base == RectangleEdge.LEFT || base == RectangleEdge.RIGHT) {    Rectangle2D[] regions=splitHorizontalBar(bar,this.g1,this.g2,this.g3);    GradientPaint gp=new GradientPaint(0.0f,(float)regions[0].getMinY(),c0,0.0f,(float)regions[0].getMaxY(),Color.WHITE);    g2.setPaint(gp);    g2.fill(regions[0]);    gp=new GradientPaint(0.0f,(float)regions[1].getMinY(),Color.WHITE,0.0f,(float)regions[1].getMaxY(),c0);    g2.setPaint(gp);    g2.fill(regions[1]);    gp=new GradientPaint(0.0f,(float)regions[2].getMinY(),c0,0.0f,(float)regions[2].getMaxY(),c1);    g2.setPaint(gp);    g2.fill(regions[2]);    gp=new GradientPaint(0.0f,(float)regions[3].getMinY(),c1,0.0f,(float)regions[3].getMaxY(),c0);    g2.setPaint(gp);    g2.fill(regions[3]);  }  if (renderer.isDrawBarOutline()) {    Stroke stroke=renderer.getItemOutlineStroke(row,column);    Paint paint=renderer.getItemOutlinePaint(row,column);    if (stroke != null && paint != null) {      g2.setStroke(stroke);      g2.setPaint(paint);      g2.draw(bar);    }  }}  }
class C{  public CertificateX509Key(InputStream in) throws IOException {  DerValue val=new DerValue(in);  key=X509Key.parse(val);}  }
class C{  public static <T>T invoke(@Nullable Class<?> cls,@Nullable Object obj,String mtdName,Class[] paramTypes,Object... params) throws IgniteCheckedException {  assert cls != null || obj != null;  assert mtdName != null;  try {    for (Class<?> c=cls != null ? cls : obj.getClass(); cls != Object.class; cls=cls.getSuperclass()) {      Method mtd;      try {        mtd=c.getDeclaredMethod(mtdName,paramTypes);      } catch (      NoSuchMethodException ignored) {        continue;      }      boolean accessible=mtd.isAccessible();      T res;      try {        mtd.setAccessible(true);        res=(T)mtd.invoke(obj,params);      }  finally {        if (!accessible)         mtd.setAccessible(false);      }      return res;    }  } catch (  Exception e) {    throw new IgniteCheckedException("Failed to invoke [mtdName=" + mtdName + ", cls="+ cls+ ']',e);  }  throw new IgniteCheckedException("Failed to invoke (method was not found) [mtdName=" + mtdName + ", cls="+ cls+ ']');}  }
class C{  private static int createPackedParams(boolean isoblit,boolean texture,boolean rtt,boolean xform,int hint,int srctype){  return ((srctype << OFFSET_SRCTYPE) | (hint << OFFSET_HINT) | ((texture ? 1 : 0) << OFFSET_TEXTURE)| ((rtt ? 1 : 0) << OFFSET_RTT)| ((xform ? 1 : 0) << OFFSET_XFORM)| ((isoblit ? 1 : 0) << OFFSET_ISOBLIT));}  }
class C{  public String toString(){  return (rb.getString("SolarisNumericUserPrincipal.") + name);}  }
class C{  public DomainEditorKit(){  xmlViewFactory=new XmlViewFactory();}  }
class C{  public void addParam(String param){  mParamList.add(scrubJdiffParamType(param));}  }
class C{  protected void notifyDataChangedEvent(){  if (datasetObservers != null) {    for (    DataSetObserver observer : datasetObservers) {      observer.onChanged();    }  }}  }
class C{  @Override public boolean isOutputFormatDefined(){  return m_attributeFilter.isOutputFormatDefined();}  }
class C{  private void parseArguments(String[] args) throws IOException {  for (int i=0; i < args.length; i++) {    String arg=args[i];    if (arg.equals("-i")) {      i++;      if (args.length <= i) {        parsingError(arg + " requires an argument that was not provided.");      }      indirectory=new File(args[i]);      if (!indirectory.exists()) {        parsingError(args[i] + " did not exist, the input directory must exist and contain plain text data files.");      }    } else     if (arg.equals("-o")) {      i++;      if (args.length <= i) {        parsingError(arg + " requires an argument that was not provided.");      }      outdirectory=new File(args[i]);    } else     if (arg.equals("-c")) {      i++;      if (args.length <= i) {        parsingError(arg + " requires an argument that was not provided.");      }      File config=new File(args[i]);      if (!config.exists()) {        parsingError(arg + "The config file specified, \"" + args[i]+ "\" did not exist.");      }      nerAnnotator=NerAnnotatorManager.buildNerAnnotator(new ResourceManager(args[i]),ViewNames.NER_CONLL);    } else     if (arg.equals("-t")) {      i++;      try {        max=Integer.parseInt(args[i]);      } catch (      NumberFormatException nfe) {        parsingError("\"-t\" must be followed by an integer number to limit the number of threads, \"" + args[i] + "\" is not numberic.");      }    } else {      parsingError("\"" + arg + "\" is not a valid command line argument.");    }  }  if (nerAnnotator == null) {    parsingError("A configuration file must be specified with the \"-c\" option.");  }  if (outdirectory != null && !outdirectory.exists()) {    if (indirectory == null)     outdirectory.createNewFile(); else     if (indirectory.isDirectory()) {      outdirectory.mkdirs();    } else {      outdirectory.createNewFile();    }  }}  }
class C{  public DriverTask deleteVolumeClone(VolumeClone clone){  LOG.info("Deleting volume clone {}",clone);  DellSCDriverTask task=new DellSCDriverTask("deleteVolumeClone");  try {    StorageCenterAPI api=connectionManager.getConnection(clone.getStorageSystemId());    api.deleteVolume(clone.getNativeId());    task.setStatus(TaskStatus.READY);  } catch (  StorageCenterAPIException|DellSCDriverException dex) {    String error=String.format("Error deleting volume clone %s: %s",clone.getNativeId(),dex);    LOG.error(error);    task.setFailed(error);  }  return task;}  }
class C{  public static byte[] hashToBytes(double datum,long seed){  double d=(datum == 0.0) ? 0.0 : datum;  long[] data={Double.doubleToLongBits(d)};  return toByteArray(hash(data,seed));}  }
class C{  protected void finalize() throws Throwable {  this.entities.clear();  this.entities=null;  super.finalize();}  }
class C{  private static int length(double[] u,double[] v){  if (u.length != v.length) {    throw new IllegalArgumentException("vectors must have same length");  }  return u.length;}  }
class C{  public void runCommercial(String stream,int length){  if (stream == null || stream.isEmpty()) {    commercialResult(stream,"Can't run commercial, not on a channel.",TwitchApi.RequestResult.FAILED);  } else {    String channel="#" + stream;    if (isChannelOpen(channel)) {      g.printLine(channel,"Trying to run " + length + "s commercial..");    } else {      g.printLine("Trying to run " + length + "s commercial.. ("+ stream+ ")");    }    api.runCommercial(stream,settings.getString("token"),length);  }}  }
class C{  public static boolean isTagEnabled(String tag){  if (enableAllTags) {    return true;  }  String[] tags=enabledTags;  if (tags == null || tags.length == 0) {    return false;  }  for (int i=0; i < tags.length; i++) {    if (tags[i].equals(tag)) {      return true;    }  }  return false;}  }
class C{  @SuppressWarnings("unchecked") public <T>T retryOperation(ZkOperation operation) throws KeeperException, InterruptedException {  KeeperException exception=null;  for (int i=0; i < retryCount; i++) {    try {      return (T)operation.execute();    } catch (    KeeperException.ConnectionLossException e) {      if (exception == null) {        exception=e;      }      if (Thread.currentThread().isInterrupted()) {        Thread.currentThread().interrupt();        throw new InterruptedException();      }      if (i != retryCount - 1) {        retryDelay(i);      }    }  }  throw exception;}  }
class C{  public void addColumnToDrop(Column column){  if (!columnsToDrop.contains(column)) {    columnsToDrop.add(column);  }}  }
class C{  public static void registerResourceClass(String typeName,Class resourceClass){  registeredClasses.put(typeName,resourceClass);}  }
class C{  public static KindName absentKind(int kind){switch (kind) {case ABSENT_VAR:    return KindName.VAR;case WRONG_MTHS:case WRONG_MTH:case ABSENT_MTH:case WRONG_STATICNESS:  return KindName.METHOD;case ABSENT_TYP:return KindName.CLASS;default :throw new AssertionError("Unexpected kind: " + kind);}}  }
class C{  public void addRslUrl(String url){  if (url == null) {    throw new NullPointerException("url may not be null");  }  rslUrls.add(url);  addSignedFlag(isRslUrlSigned(url));}  }
class C{  public boolean isReverse(){  return true;}  }
class C{  public static String className(Declaration decl){  String name=decl.getQualifiedNameString().replace("::",".");  if (Naming.isLowerCase(decl.getName())) {    name+="_";  }  return name;}  }
class C{  @Override public double maxImpurity(){  return maxImpurity;}  }
class C{  @NonNull public static DatePickerDialog createDialog(@Nullable Date date,@Nullable OnDateSetListener listener,@NonNull Clock clock){  Calendar calendar=DateHelper.getCalendarFromClock(clock);  if (date != null) {    calendar.setTime(date);  }  DatePickerDialog.OnDateSetListener dialogCallBack=null;  int year=calendar.get(Calendar.YEAR);  int monthOfYear=calendar.get(Calendar.MONTH);  int dayOfMonth=calendar.get(Calendar.DAY_OF_MONTH);  DatePickerDialog datePickerDialog=DatePickerDialog.newInstance(dialogCallBack,year,monthOfYear,dayOfMonth);  datePickerDialog.dismissOnPause(true);  return datePickerDialog;}  }
class C{  protected void doEdit(){  IStructuredSelection selection=(IStructuredSelection)tableViewer.getSelection();  Formula formula=(Formula)selection.getFirstElement();  Formula editedFormula=doEditFormula(formula);  if (editedFormula != null) {    formula.setFormula(editedFormula.getFormula());    if (tableViewer instanceof CheckboxTableViewer) {      ((CheckboxTableViewer)tableViewer).setChecked(formula,true);    }    tableViewer.refresh();  }  changeButtonEnablement();  view.getModel().setTraceExplorerExpression(FormHelper.getSerializedInput(tableViewer));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public EntityQuery where(Map<String,Object> fieldMap){  this.whereEntityCondition=EntityCondition.makeCondition(fieldMap);  return this;}  }
class C{  public void push(String type,String fullName){  StringBuilder sb=new StringBuilder("(");  sb.append(type).append(")");  sb.append(fullName);  push(sb.toString());}  }
class C{  private void sincronizarBase(int emprestimo){  listaEmprestimoItens=ControleDAO.getBanco().getEmprestimoDAO().listarItens(emprestimo);}  }
class C{  @Override public void lightSpecular(float x,float y,float z){  colorCalc(x,y,z);  currentLightSpecular[0]=calcR;  currentLightSpecular[1]=calcG;  currentLightSpecular[2]=calcB;}  }
class C{  private void collapseAll(Object nil){  vis().setAllExpanded(false);}  }
class C{  public int iterativeSize(){  IntList p=this;  int size=0;  while (p != null) {    size+=1;    p=p.tail;  }  return size;}  }
class C{  @Nullable @Override public IBinder onBind(Intent intent){  return mediaPlayerBinder;}  }
class C{  private void extractOtherEndOfSeededEdge(final Edge edge,final GetAdjacentEntitySeeds operation,final EntitySeed[] reuseableTuple){  reuseableTuple[0]=null;  reuseableTuple[1]=null;  boolean matchSource=!edge.isDirected() || !INCOMING.equals(operation.getIncludeIncomingOutGoing());  boolean matchDestination=!edge.isDirected() || !OUTGOING.equals(operation.getIncludeIncomingOutGoing());  for (  final EntitySeed seed : operation.getSeeds()) {    if (matchSource && edge.getSource().equals(seed.getVertex())) {      reuseableTuple[1]=new EntitySeed(edge.getDestination());      matchSource=false;      if (!matchDestination) {        break;      }    }    if (matchDestination && edge.getDestination().equals(seed.getVertex())) {      reuseableTuple[0]=new EntitySeed(edge.getSource());      matchDestination=false;      if (!matchSource) {        break;      }    }  }  if (reuseableTuple[0] != null && reuseableTuple[1] != null && reuseableTuple[0].equals(reuseableTuple[1])) {    reuseableTuple[1]=null;  }}  }
class C{  public Builder nodeSettings(ClusterNodeSettings clusterNodeSettings){  this.clusterNodeSettings=clusterNodeSettings;  return this;}  }
class C{  public Object jjtAccept(PartitionParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public final boolean goNode(Node node){  if (node == currentNode)   return false;  ArrayList<Integer> path=node.getPathFromRoot();  while (currentNode != rootNode)   goBack();  for (  Integer c : path)   goForward(c);  return true;}  }
class C{  public static void fill(double[] array,int start,int end,double value){  Arrays.checkStartAndEnd(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  public void testACipher(BungeeCipher cipher) throws Exception {  ByteBuf nativePlain=Unpooled.directBuffer(plainBytes.length);  nativePlain.writeBytes(plainBytes);  ByteBuf nativeCiphered=Unpooled.directBuffer(cipheredBytes.length);  nativeCiphered.writeBytes(cipheredBytes);  ByteBuf out=Unpooled.directBuffer(plainBytes.length);  cipher.init(true,secret);  cipher.cipher(nativePlain,out);  Assert.assertEquals(nativeCiphered,out);  out.clear();  cipher.init(false,secret);  cipher.cipher(nativeCiphered,out);  nativePlain.resetReaderIndex();  Assert.assertEquals(nativePlain,out);  System.out.println("This cipher works correctly!");}  }
class C{  public InstructionCounter(){  initComponents();  WindowPropSaver.loadWindowProperties(this);}  }
class C{  public static Builder prepare(){  return new Builder();}  }
class C{  public void updateConsistencyGroupPolicy(UpdateCGPolicyParams policyParam){  if (policyParam == null) {    logger.warn("Unable to update policy for CG. The update paramaters are invalid.");    return;  }  if (policyParam.getPolicyParams() == null) {    logger.warn("Unable to update policy for CG. The update paramaters are missing.");    return;  }  if (policyParam.getPolicyParams().getCopyMode() == null) {    logger.warn("Unable to update CG policy copy mode. The copy mode paramaters is missing.");    return;  }  try {    String copyMode=policyParam.getPolicyParams().getCopyMode();    ConsistencyGroupUID cgUID=getConsistencyGroupUID(policyParam.getCgName());    FullConsistencyGroupPolicy cgPolicy=functionalAPI.getFullConsistencyGroupPolicy(cgUID);    List<FullConsistencyGroupLinkPolicy> linkPolicies=cgPolicy.getLinksPolicies();    for (    FullConsistencyGroupLinkPolicy linkPolicy : linkPolicies) {      ConsistencyGroupLinkPolicy cgLinkPolicy=linkPolicy.getLinkPolicy();      LinkProtectionPolicy linkProtectionPolicy=cgLinkPolicy.getProtectionPolicy();      if (copyMode != null) {        ProtectionMode protectionMode=ProtectionMode.valueOf(copyMode);        if (protectionMode != null) {          linkProtectionPolicy.setProtectionType(protectionMode);          cgLinkPolicy.setProtectionPolicy(linkProtectionPolicy);        }      }    }    logger.info(String.format("Setting protection mode for CG links to %s, for CG %s",copyMode,policyParam.getCgName()));    functionalAPI.setFullConsistencyGroupPolicy(cgPolicy);  } catch (  FunctionalAPIActionFailedException_Exception e) {    throw RecoverPointException.exceptions.failedToUpdateCgLinkPolicy(policyParam.getCgName(),e);  }catch (  FunctionalAPIInternalError_Exception e) {    throw RecoverPointException.exceptions.failedToUpdateCgLinkPolicy(policyParam.getCgName(),e);  }catch (  Exception e) {    throw RecoverPointException.exceptions.failedToUpdateCgLinkPolicy(policyParam.getCgName(),e);  }}  }
class C{  FunctionListener(ExpressionContext lookup){  this.lookup=lookup;}  }
class C{  public TimelineTrack(TimelineTrackBO timelineTrackBO,Sequence sequence){  this.timelineTrackBO=timelineTrackBO;  this.sequence=sequence;}  }
class C{  public static long toLong(short a,short b,short c,short d){  return ((long)a << (SHORT_SIZE * 3)) | (((long)b & SHORT_MASK) << (SHORT_SIZE * 2)) | (((long)c & SHORT_MASK) << SHORT_SIZE)| ((long)d & SHORT_MASK);}  }
class C{  public TungstenProperties(Map<String,String> map){  properties=new HashMap<String,Object>(map);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Deprecated public static String encodeValue(int s[]){  StringBuilder sb=new StringBuilder(String.valueOf(s[0]));  for (int i=1; i < s.length; i++) {    sb.append('+').append(s[i]);  }  return sb.toString();}  }
class C{  public void addTester(final Tester tester){  testers.add(tester);}  }
class C{  @Deprecated public void angularWatchGlobal(String name,AngularObjectWatcher watcher){  angularWatch(name,null,watcher);}  }
class C{  public CStepIntoHotkeyAction(final JFrame parent,final IFrontEndDebuggerProvider panel){  Preconditions.checkNotNull(panel,"IE01655: Panel argument can not be null");  m_parent=parent;  m_debugPerspectiveModel=panel;}  }
class C{  public void hide(){  LayoutParams lp=(LayoutParams)mContentView.getLayoutParams();  lp.height=0;  mContentView.setLayoutParams(lp);}  }
class C{  private Object readResolve() throws ObjectStreamException {  return INSTANCE;}  }
class C{  public boolean isRenderPoints(SimpleSeriesRenderer renderer){  return ((XYSeriesRenderer)renderer).getPointStyle() != PointStyle.POINT;}  }
class C{  public h4 addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Integer(stack.getUIMgrSafe().getVideoFrame().getDVDTotalTitles());}  }
class C{  public void removeDialog(SIPDialog dialog){  String id=dialog.getDialogId();  String earlyId=dialog.getEarlyDialogId();  if (earlyId != null) {    this.earlyDialogTable.remove(earlyId);    this.dialogTable.remove(earlyId);  }  if (id != null) {    Object old=this.dialogTable.get(id);    if (old == dialog) {      this.dialogTable.remove(id);    }    if (!dialog.testAndSetIsDialogTerminatedEventDelivered()) {      DialogTerminatedEvent event=new DialogTerminatedEvent(dialog.getSipProvider(),dialog);      dialog.getSipProvider().handleEvent(event,null);    }  } else   if (this.isDialogTerminatedEventDeliveredForNullDialog) {    if (!dialog.testAndSetIsDialogTerminatedEventDelivered()) {      DialogTerminatedEvent event=new DialogTerminatedEvent(dialog.getSipProvider(),dialog);      dialog.getSipProvider().handleEvent(event,null);    }  }}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  private void defineSeparators(UIDefaults d){  String c=PAINTER_PREFIX + "SeparatorPainter";  d.put("Separator.contentMargins",new InsetsUIResource(0,0,0,0));  d.put("Separator[Enabled].backgroundPainter",new LazyPainter(c,SeparatorPainter.Which.BACKGROUND_ENABLED));}  }
class C{  private void initializeRawSourceCodeMap(String rawSource){  rawSourceCodeWithLine=new LinkedHashMap<>();  int lineNumber=1;  StringReader sr=new StringReader(rawSource);  BufferedReader br=new BufferedReader(sr);  String line;  try {    while ((line=br.readLine()) != null) {      if (StringUtils.isNotBlank(line)) {        rawSourceCodeWithLine.put(lineNumber,line);        lineNumber++;      }    }  } catch (  IOException ex) {    LOGGER.error("Error occured while initialize raw source code map " + ex.getMessage());  }}  }
class C{  public boolean isSpdy(){  return spdyConnection != null;}  }
class C{  public void reloadComponents(){  initOmniboxPosition();}  }
class C{  public static double calculateRowTotal(Values2D data,int row,int[] validCols){  ParamChecks.nullNotPermitted(data,"data");  double total=0.0;  int colCount=data.getColumnCount();  for (int v=0; v < validCols.length; v++) {    int col=validCols[v];    if (col < colCount) {      Number n=data.getValue(row,col);      if (n != null) {        total+=n.doubleValue();      }    }  }  return total;}  }
class C{  public Map<Feature,Point3d> adjustModel2(){  Map<Feature,Point3d> map=new HashMap<>();  Matrix p=new Matrix(3,1);  Matrix r=R.inverse().times(1 / scaleFactor);  for (  Entry<Feature,Point3d> e : model2.getPointMap().entrySet()) {    p.set(0,0,e.getValue().x);    p.set(1,0,e.getValue().y);    p.set(2,0,e.getValue().z);    p=r.times(p.minus(T));    map.put(e.getKey(),new Point3d(p.get(0,0),p.get(1,0),p.get(2,0)));  }  return map;}  }
class C{  private void refreshStateFormat2Collections(){  for (  String coll : collectionWatches.keySet()) {    new StateWatcher(coll).refreshAndWatch();  }}  }
class C{  public boolean isNoCache(){  return noCache;}  }
class C{  public float distanceSquared(Vector3f v){  double dx=x - v.x;  double dy=y - v.y;  double dz=z - v.z;  return (float)(dx * dx + dy * dy + dz * dz);}  }
class C{  public boolean isHorizontal(){  return (orientation & HORIZ_BIT) != 0;}  }
class C{  public boolean supportsGroupByBeyondSelect() throws SQLException {  return false;}  }
class C{  public static int highestOneBit(int i){  i|=(i >> 1);  i|=(i >> 2);  i|=(i >> 4);  i|=(i >> 8);  i|=(i >> 16);  return i - (i >>> 1);}  }
class C{  public static <K,V>Map<K,V> collectEntries(Iterable<?> self,Map<K,V> collector){  return collectEntries(self.iterator(),collector);}  }
class C{  private RemoteClass(BatchEnvironment env,ClassDefinition implClassDef){  this.env=env;  this.implClassDef=implClassDef;}  }
class C{  @Override public void show(float translationX,float translationY){  setTranslation(translationX,translationY);  if (getVisibility() != View.VISIBLE) {    float pivotX=getPivotX() + translationX;    float pivotY=getPivotY() + translationY;    ScaleAnimation anim;    if (pivotX == 0 || pivotY == 0) {      anim=new ScaleAnimation(0,1,0,1,Animation.RELATIVE_TO_SELF,0.5f,Animation.RELATIVE_TO_SELF,0.5f);    } else {      anim=new ScaleAnimation(0,1,0,1,pivotX,pivotY);    }    anim.setDuration(FAB_ANIM_DURATION);    anim.setInterpolator(getInterpolator());    startAnimation(anim);  }  setVisibility(View.VISIBLE);}  }
class C{  @Deprecated public void authenticateToSharedNotebook(String shareKey,OnClientCallback<AuthenticationResult> callback){  AsyncReflector.execute(mClient,callback,"authenticateToSharedNotebook",mAuthenticationToken,shareKey);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  } else {    System.out.println(String.valueOf(progress) + "%");  }  previousProgress=progress;}  }
class C{  protected RegionAttributes createRegionAttributesForPR(int redundancy,int localMaxMem){  AttributesFactory attr=new AttributesFactory();  PartitionAttributesFactory paf=new PartitionAttributesFactory();  PartitionAttributes prAttr=paf.setRedundantCopies(redundancy).setLocalMaxMemory(localMaxMem).setTotalNumBuckets(totalNumBuckets).create();  attr.setPartitionAttributes(prAttr);  return attr.create();}  }
class C{  public WriteBuffer putInt(int index,int value){  buff.putInt(index,value);  return this;}  }
class C{  @Override protected Template createValue(String valueStr){  return Template.create(valueStr);}  }
class C{  static int interpretType(String typeName){  if ("unset".equals(typeName)) {    return TYPE_UNSET;  } else   if ("boolean".equals(typeName)) {    return TYPE_BOOLEAN;  } else   if ("byte".equals(typeName)) {    return TYPE_BYTE;  } else   if ("short".equals(typeName)) {    return TYPE_SHORT;  } else   if ("int".equals(typeName)) {    return TYPE_INT;  } else   if ("long".equals(typeName)) {    return TYPE_LONG;  } else   if ("float".equals(typeName)) {    return TYPE_FLOAT;  } else   if ("double".equals(typeName)) {    return TYPE_DOUBLE;  } else   if ("String".equals(typeName)) {    return TYPE_STRING;  }  return TYPE_ERROR;}  }
class C{  public <K,V>JavaPairRDD<T,Option<V>> outerJoinGeodeRegion(String regionPath,Function<T,K> func,GeodeConnectionConf connConf){  GeodeOuterJoinRDD<T,K,V> rdd=rddf.outerJoinGeodeRegion(regionPath,func,connConf);  ClassTag<T> kt=fakeClassTag();  ClassTag<Option<V>> vt=fakeClassTag();  return new JavaPairRDD<>(rdd,kt,vt);}  }
class C{  public MaxPQ(Comparator<Key> comparator){  this(1,comparator);}  }
class C{  static <E>ImmutableList<E> asImmutableList(Object[] elements){  return asImmutableList(elements,elements.length);}  }
class C{  public void disable() throws IOException {  if (!isOptOut()) {    configuration.getCategory(Configuration.CATEGORY_GENERAL).get("opt-out").set("true");    configuration.save();  }  FMLCommonHandler.instance().bus().unregister(this);}  }
class C{  public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (fv != null) {    return fv.visitTypeAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  private boolean isParsableToDouble(String i){  return i.matches("\\d+\\.\\d+");}  }
class C{  protected OMGraphicList generateGraphics(){  OMGraphicList omgraphics=new OMGraphicList();  OMPoint circ;  OMText text;  int circle_r=2;  int circle_h=5;  for (int i=0, j=0; i < llData.length; i+=2, j++) {    OMGraphicList group=new OMGraphicList(2);    circ=new OMPoint(llData[i],llData[i + 1],circle_r);    circ.setOval(true);    circ.setFillPaint(lineColor);    group.add(circ);    text=new OMText(llData[i],llData[i + 1],0,circle_h + 10,infoData[j],java.awt.Font.decode("SansSerif"),OMText.JUSTIFY_CENTER);    text.setLinePaint(lineColor);    group.add(text);    group.putAttribute(OMGraphic.APP_OBJECT,new Integer(j));    omgraphics.add(group);  }  omgraphics.generate(getProjection(),false);  return omgraphics;}  }
class C{  @Override protected void updateIfNeeded(DrawContext dc){  long webViewWindowPtr=WindowsWebView.this.webViewWindowPtr;  if (webViewWindowPtr == 0)   return;  Texture texture=this.getTextureFromCache(dc);  if (texture == null)   return;  long newUpdateTime=WindowsWebViewJNI.getUpdateTime(webViewWindowPtr);  if (newUpdateTime != this.updateTime) {    WindowsWebViewJNI.loadDisplayInGLTexture(webViewWindowPtr,texture.getTarget());    this.updateTime=newUpdateTime;  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(ownerDocument01.class,args);}  }
class C{  public SearchContextAggregations(AggregatorFactories factories){  this.factories=factories;}  }
class C{  public RepeatedFieldBuilder<MType,BType,IType> addMessage(MType message){  if (message == null) {    throw new NullPointerException();  }  ensureMutableMessageList();  messages.add(message);  if (builders != null) {    builders.add(null);  }  onChanged();  incrementModCounts();  return this;}  }
class C{  public void init() throws ServletException {}  }
class C{  public Scanner skip(String pattern){  return skip(patternCache.forName(pattern));}  }
class C{  @Override public int hashCode(){  return lowerBound.hashCode() * 31 + upperBound.hashCode();}  }
class C{  public boolean canWrite(){  return getWrappedPath().canWrite();}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) protected void affectEntitiesWithin(){  float diameter=explosionSize * 2.0F;  int i=MathHelper.floor_double(explosionX - (double)explosionSize - 1.0D);  int j=MathHelper.floor_double(explosionX + (double)explosionSize + 1.0D);  int k=MathHelper.floor_double(explosionY - (double)explosionSize - 1.0D);  int l1=MathHelper.floor_double(explosionY + (double)explosionSize + 1.0D);  int i2=MathHelper.floor_double(explosionZ - (double)explosionSize - 1.0D);  int j2=MathHelper.floor_double(explosionZ + (double)explosionSize + 1.0D);  List list=worldObj.getEntitiesWithinAABBExcludingEntity(exploder,AxisAlignedBB.getBoundingBox((double)i,(double)k,(double)i2,(double)j,(double)l1,(double)j2));  Vec3 vec3=Vec3.createVectorHelper(explosionX,explosionY,explosionZ);  for (int k2=0; k2 < list.size(); ++k2) {    Entity entity=(Entity)list.get(k2);    double d7=(scalesWithDistance ? entity.getDistance(explosionX,explosionY,explosionZ) / (double)diameter : 0.0D);    if (d7 <= 1.0D) {      double d0=entity.posX - explosionX;      double d1=entity.posY + (double)entity.getEyeHeight() - explosionY;      double d2=entity.posZ - explosionZ;      double d8=(double)MathHelper.sqrt_double(d0 * d0 + d1 * d1 + d2 * d2);      if (d8 != 0.0D) {        d0/=d8;        d1/=d8;        d2/=d8;        double d9=(double)worldObj.getBlockDensity(vec3,entity.boundingBox);        double d10=(1.0D - d7) * d9;        float amount=(damage == 0.0F ? (float)((int)((d10 * d10 + d10) / 2.0D * 8.0D * diameter + 1.0D)) : damage * (float)d10);        if (entity.attackEntityFrom(getDamageSource(),amount) && isFlaming && !entity.isImmuneToFire()) {          if (!scalesWithDistance || rand.nextFloat() < d10) {            entity.setFire(burnTime);          }        }        double d11=EnchantmentProtection.func_92092_a(entity,d10);        entity.motionX+=d0 * d11 * motionFactor;        entity.motionY+=d1 * d11 * motionFactor;        entity.motionZ+=d2 * d11 * motionFactor;        if (entity instanceof EntityPlayer) {          affectedPlayers.put((EntityPlayer)entity,Vec3.createVectorHelper(d0 * d10,d1 * d10,d2 * d10));        }      }    }  }}  }
class C{  private void handleMessageReceived(Intent intent){  if (BuildConfig.DEBUG)   Log.v("SMSReceiver: Intercept Message");  Bundle bundle=intent.getExtras();  if (bundle != null) {  }}  }
class C{  public LifecycleSupport(Lifecycle lifecycle){  super();  this.lifecycle=lifecycle;}  }
class C{  public Offset diff(Address addr2){  return null;}  }
class C{  public static String urlEncode(String s){  try {    return URLEncoder.encode(s,"UTF-8");  } catch (  Exception e) {    throw DbException.convert(e);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void main(String[] args) throws Exception {  run("put",CacheAtomicityMode.ATOMIC);  run("get",CacheAtomicityMode.ATOMIC);  run("put",CacheAtomicityMode.TRANSACTIONAL);  run("get",CacheAtomicityMode.TRANSACTIONAL);}  }
class C{  public Info(){  sizes=new HashMap<Integer,Double>();}  }
class C{  void stopNow(){  this.stop=true;  try {    socket.close();  } catch (  IOException e) {  }}  }
class C{  public BloomFilter(final int n,final int d){  this.d=d;  final long wantedNumberOfBits=(long)Math.ceil(n * (d / NATURAL_LOG_OF_2));  if (wantedNumberOfBits > MAX_BITS)   throw new IllegalArgumentException("The wanted number of bits (" + wantedNumberOfBits + ") is larger than "+ MAX_BITS);  bits=new long[(int)((wantedNumberOfBits + Long.SIZE - 1) / Long.SIZE)];  m=bits.length * (long)Long.SIZE;  if (DEBUG)   System.err.println("Number of bits: " + m);  final MersenneTwister mersenneTwister=new MersenneTwister(new Random().nextInt());  weight=new int[d][];  init=new int[d];  for (int i=0; i < d; i++) {    weight[i]=new int[NUMBER_OF_WEIGHTS];    init[i]=mersenneTwister.nextInt();    for (int j=0; j < NUMBER_OF_WEIGHTS; j++)     weight[i][j]=mersenneTwister.nextInt();  }}  }
class C{  public void addVolumesToConsistencyGroup(StorageSystem storage,final BlockConsistencyGroup consistencyGroup,final List<Volume> volumes,final String replicationGroupName,final TaskCompleter taskCompleter) throws DeviceControllerException {  if (isSRDFProtected(volumes.get(0))) {    return;  }  if (consistencyGroup == null || !consistencyGroup.created(storage.getId())) {    final String errMsg="Unable to add volumes to consistency group: no consistency group provided or it has not been created in the array";    _log.error(errMsg);    ServiceError error=DeviceControllerErrors.smis.noConsistencyGroupProvided();    taskCompleter.error(_dbClient,error);    return;  }  if (consistencyGroup.getTypes().contains(BlockConsistencyGroup.Types.SRDF.name())) {    taskCompleter.ready(_dbClient);    return;  }  if (volumes == null || volumes.isEmpty()) {    final String errMsg=format("Unable to add volumes to consistency group {0}: no volumes provided",consistencyGroup.getId());    _log.error(errMsg);    ServiceError error=DeviceControllerErrors.smis.noConsistencyGroupProvided();    taskCompleter.error(_dbClient,error);    return;  }  if (storage == null) {    final String errMsg=format("Unable to add volumes to consistency group {0}: no storage system provided",consistencyGroup.getId());    _log.error(errMsg);    ServiceError error=DeviceControllerErrors.smis.noStorageSystemProvided();    taskCompleter.error(_dbClient,error);    return;  }  _log.info("Adding Volumes to Consistency Group: {}",consistencyGroup.getId());  try {    String groupName=ControllerUtils.generateReplicationGroupName(storage,consistencyGroup,replicationGroupName,_dbClient);    storage=findProviderFactory.withGroup(storage,groupName).find();    if (storage == null) {      ServiceError error=DeviceControllerErrors.smis.noConsistencyGroupWithGivenName();      taskCompleter.error(_dbClient,error);      return;    }    final CIMObjectPath replicationSvc=_cimPath.getControllerReplicationSvcPath(storage);    final Map<String,Volume> nativeIdToVolumeMap=new HashMap<String,Volume>();    for (    final Volume volume : volumes) {      if (!RPHelper.isAssociatedToRpVplexType(volume,_dbClient,PersonalityTypes.METADATA,PersonalityTypes.TARGET)) {        nativeIdToVolumeMap.put(volume.getNativeId(),volume);      } else {        _log.info("Volume {} will not be added to consistency group because it is a backing volume for " + "an RP+VPlex virtual journal volume.",volume.getId().toString());      }    }    Set<String> nativeIds=nativeIdToVolumeMap.keySet();    _log.info("List of native ids to be added: {}",nativeIds);    if (!nativeIds.isEmpty()) {      final CIMArgument[] outArgs=new CIMArgument[5];      final String[] memberNames=nativeIds.toArray(new String[nativeIds.size()]);      final CIMObjectPath[] volumePaths=_cimPath.getVolumePaths(storage,memberNames);      boolean cgHasGroupRelationship=ControllerUtils.checkCGHasGroupRelationship(storage,consistencyGroup.getId(),_dbClient);      if (storage.deviceIsType(Type.vnxblock) || !cgHasGroupRelationship) {        if (storage.deviceIsType(Type.vnxblock) && !consistencyGroup.getArrayConsistency()) {          _log.info("No array operation needed for VNX replication group {}",groupName);        } else {          final CIMObjectPath cgPath=_cimPath.getReplicationGroupPath(storage,groupName);          final CIMArgument[] inArgs=_helper.getAddMembersInputArguments(cgPath,volumePaths);          _helper.invokeMethod(storage,replicationSvc,SmisConstants.ADD_MEMBERS,inArgs,outArgs);        }      } else {        final CIMObjectPath maskingGroupPath=_cimPath.getMaskingGroupPath(storage,groupName,SmisConstants.MASKING_GROUP_TYPE.SE_DeviceMaskingGroup);        _log.info("Adding volumes {} to device masking group {}",StringUtils.join(memberNames,", "),maskingGroupPath.toString());        final CIMArgument[] inArgs=_helper.getAddOrRemoveMaskingGroupMembersInputArguments(maskingGroupPath,volumePaths,true);        _helper.invokeMethodSynchronously(storage,_cimPath.getControllerConfigSvcPath(storage),SmisConstants.ADD_MEMBERS,inArgs,outArgs,null);      }      Collection<Volume> volumesToUpdate=nativeIdToVolumeMap.values();      for (      Volume volume : volumesToUpdate) {        volume.setReplicationGroupInstance(groupName);      }      _dbClient.updateObject(volumesToUpdate);      _log.info("Volumes sucessfully added to the Consistency Group: {}" + consistencyGroup.getId());    }  } catch (  Exception e) {    _log.error("Problem making SMI-S call: ",e);    ServiceError error=DeviceControllerErrors.smis.unableToCallStorageProvider(e.getMessage());    taskCompleter.error(_dbClient,error);  }}  }
class C{  @Override protected void onPreviewNativeEvent(NativePreviewEvent event){  super.onPreviewNativeEvent(event);  if (event.getTypeInt() == Event.ONKEYDOWN && event.getNativeEvent().getKeyCode() == KeyCodes.KEY_ESCAPE) {    hide();  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:40.008 -0500",hash_original_method="CE81298360999BF52006386DE7E36DBD",hash_generated_method="3C7B22114503E6EA0B68A72F303C2BF0") private Multiplication(){}  }
class C{  @Override public void run(){  amIActive=true;  String[] shapefiles=new String[2];  String outputFile;  int progress;  int i, n, FID;  int oneHundredthTotal;  int numRecs;  ShapeType shapeType;  ShapeType outputShapeType=ShapeType.POLYGON;  GeometryFactory factory=new GeometryFactory();  com.vividsolutions.jts.geom.Geometry g1=null;  com.vividsolutions.jts.geom.Geometry g2=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  shapefiles[0]=args[0];  shapefiles[1]=args[1];  outputFile=args[2];  if ((shapefiles[0].length() <= 0) || (shapefiles[1].length() <= 0) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    com.vividsolutions.jts.geom.Geometry[] recJTSGeometries=null;    ArrayList<com.vividsolutions.jts.geom.Geometry> inputGeometryList=new ArrayList<>();    com.vividsolutions.jts.geom.Geometry outputGeometry=null;    ShapeFile input1=new ShapeFile(shapefiles[0]);    shapeType=input1.getShapeType();    numRecs=input1.getNumberOfRecords();    if (shapeType.getBaseType() == ShapeType.POINT || shapeType.getBaseType() == ShapeType.MULTIPOINT) {      outputShapeType=ShapeType.POINT;    } else     if (shapeType.getBaseType() == ShapeType.POLYLINE && outputShapeType == ShapeType.POLYGON) {      outputShapeType=ShapeType.POLYLINE;    }    oneHundredthTotal=numRecs / 100;    progress=0;    n=0;    for (    ShapeFileRecord record : input1.records) {      if (record.getShapeType() != ShapeType.NULLSHAPE) {        recJTSGeometries=record.getGeometry().getJTSGeometries();        for (int a=0; a < recJTSGeometries.length; a++) {          recJTSGeometries[a].setUserData(record.getRecordNumber());          if (recJTSGeometries[a].isValid()) {            inputGeometryList.add(recJTSGeometries[a]);          } else {            System.out.println(record.getRecordNumber() + " is invalid.");          }        }      }      n++;      if (n >= oneHundredthTotal) {        n=0;        if (cancelOp) {          cancelOperation();          return;        }        progress++;        updateProgress("Loop 1 of " + 2 + ": Reading data:",progress);      }    }    g1=factory.buildGeometry(inputGeometryList);    inputGeometryList.clear();    ShapeFile input2=new ShapeFile(shapefiles[1]);    shapeType=input2.getShapeType();    if (input2.getShapeType() != shapeType) {      showFeedback("Both input images must be of the same shape type.");      return;    }    numRecs=input2.getNumberOfRecords();    if (shapeType.getBaseType() == ShapeType.POINT || shapeType.getBaseType() == ShapeType.MULTIPOINT) {      outputShapeType=ShapeType.POINT;    } else     if (shapeType.getBaseType() == ShapeType.POLYLINE && outputShapeType == ShapeType.POLYGON) {      outputShapeType=ShapeType.POLYLINE;    }    oneHundredthTotal=numRecs / 100;    progress=0;    n=0;    for (    ShapeFileRecord record : input2.records) {      if (record.getShapeType() != ShapeType.NULLSHAPE) {        recJTSGeometries=record.getGeometry().getJTSGeometries();        for (int a=0; a < recJTSGeometries.length; a++) {          recJTSGeometries[a].setUserData(record.getRecordNumber());          if (recJTSGeometries[a].isValid()) {            inputGeometryList.add(recJTSGeometries[a]);          } else {            System.out.println(record.getRecordNumber() + " is invalid.");          }        }      }      n++;      if (n >= oneHundredthTotal) {        n=0;        if (cancelOp) {          cancelOperation();          return;        }        progress++;        updateProgress("Loop 2 of " + 2 + ": Reading data:",progress);      }    }    g2=factory.buildGeometry(inputGeometryList);    inputGeometryList.clear();    updateProgress("Performing operation (progress will not be updated):",-1);    try {      outputGeometry=g1.difference(g2);    } catch (    Exception ex) {      outputGeometry=com.vividsolutions.jts.operation.overlay.snap.SnapOverlayOp.difference(g1,g2);    }    ShapeFile output=null;    DBFWriter writer=null;    output=new ShapeFile(outputFile,outputShapeType);    output.setProjectionStringFromOtherShapefile(input1);    DBFField fields[]=new DBFField[3];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    fields[1]=new DBFField();    fields[1].setName("PARENT1_ID");    fields[1].setDataType(DBFField.DBFDataType.NUMERIC);    fields[1].setFieldLength(10);    fields[1].setDecimalCount(0);    fields[2]=new DBFField();    fields[2].setName("PARENT2_ID");    fields[2].setDataType(DBFField.DBFDataType.NUMERIC);    fields[2].setFieldLength(10);    fields[2].setDecimalCount(0);    String DBFName=output.getDatabaseFile();    writer=new DBFWriter(new File(DBFName));    writer.setFields(fields);    PreparedGeometry[] tests1=new PreparedGeometry[g1.getNumGeometries()];    com.vividsolutions.jts.geom.Geometry[] testGs1=new com.vividsolutions.jts.geom.Geometry[g1.getNumGeometries()];    int[] userData1=new int[g1.getNumGeometries()];    for (int a=0; a < g1.getNumGeometries(); a++) {      tests1[a]=PreparedGeometryFactory.prepare(g1.getGeometryN(a));      userData1[a]=Integer.parseInt(g1.getGeometryN(a).getUserData().toString());      testGs1[a]=g1.getGeometryN(a);    }    PreparedGeometry[] tests2=new PreparedGeometry[g2.getNumGeometries()];    com.vividsolutions.jts.geom.Geometry[] testGs2=new com.vividsolutions.jts.geom.Geometry[g2.getNumGeometries()];    int[] userData2=new int[g2.getNumGeometries()];    for (int a=0; a < g2.getNumGeometries(); a++) {      tests2[a]=PreparedGeometryFactory.prepare(g2.getGeometryN(a));      userData2[a]=Integer.parseInt(g2.getGeometryN(a).getUserData().toString());      testGs2[a]=g2.getGeometryN(a);    }    if (outputGeometry instanceof GeometryCollection) {      int numGeometries=outputGeometry.getNumGeometries();      oneHundredthTotal=(int)(numGeometries / 100.0);      progress=0;      n=0;      FID=0;      int parentRecNum=0;      for (int a=0; a < numGeometries; a++) {        parentRecNum=-99;        com.vividsolutions.jts.geom.Geometry gN=outputGeometry.getGeometryN(a);        for (int m=0; m < tests1.length; m++) {          if (tests1[m].overlaps(gN) || tests1[m].covers(gN) || gN.distance(testGs1[m]) < 0.0001) {            parentRecNum=userData1[m];            break;          }        }        if (gN instanceof com.vividsolutions.jts.geom.Point && outputShapeType == ShapeType.POINT) {          Coordinate p=gN.getCoordinate();          whitebox.geospatialfiles.shapefile.Point wbGeometry=new whitebox.geospatialfiles.shapefile.Point(p.x,p.y);          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[1];          rowData[0]=new Double(FID);          writer.addRecord(rowData);        } else         if (gN instanceof LineString && outputShapeType == ShapeType.POLYLINE) {          LineString ls=(LineString)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts={0};          Coordinate[] coords=ls.getCoordinates();          for (i=0; i < coords.length; i++) {            pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[3];          rowData[0]=new Double(FID);          rowData[1]=new Double(parentRecNum);          rowData[2]=null;          writer.addRecord(rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYLINE) {          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (Topology.isClockwisePolygon(coords)) {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[3];          rowData[0]=new Double(FID);          rowData[1]=new Double(parentRecNum);          rowData[2]=null;          writer.addRecord(rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYGON) {          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (Topology.isClockwisePolygon(coords)) {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.Polygon wbGeometry=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[3];          rowData[0]=new Double(FID);          rowData[1]=new Double(parentRecNum);          rowData[2]=null;          writer.addRecord(rowData);        } else {        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Saving output file",progress);        }      }    } else {      showFeedback("An error was encountered when saving the output file.");      return;    }    updateProgress("Performing operation (progress will not be updated):",-1);    try {      outputGeometry=g2.difference(g1);    } catch (    Exception ex) {      outputGeometry=com.vividsolutions.jts.operation.overlay.snap.SnapOverlayOp.difference(g2,g1);    }    if (outputGeometry instanceof GeometryCollection) {      int numGeometries=outputGeometry.getNumGeometries();      oneHundredthTotal=(int)(numGeometries / 100.0);      progress=0;      n=0;      int parentRecNum=0;      for (int a=0; a < numGeometries; a++) {        parentRecNum=-99;        com.vividsolutions.jts.geom.Geometry gN=outputGeometry.getGeometryN(a);        for (int m=0; m < tests2.length; m++) {          if (tests2[m].overlaps(gN) || tests2[m].covers(gN) || gN.distance(testGs2[m]) < 0.0001) {            parentRecNum=userData2[m];            break;          }        }        if (gN instanceof com.vividsolutions.jts.geom.Point && outputShapeType == ShapeType.POINT) {          Coordinate p=gN.getCoordinate();          whitebox.geospatialfiles.shapefile.Point wbGeometry=new whitebox.geospatialfiles.shapefile.Point(p.x,p.y);          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[3];          rowData[0]=new Double(FID);          rowData[1]=null;          rowData[2]=new Double(parentRecNum);          writer.addRecord(rowData);        } else         if (gN instanceof LineString && outputShapeType == ShapeType.POLYLINE) {          LineString ls=(LineString)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();          int[] parts={0};          Coordinate[] coords=ls.getCoordinates();          for (i=0; i < coords.length; i++) {            pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[3];          rowData[0]=new Double(FID);          rowData[1]=null;          rowData[2]=new Double(parentRecNum);          writer.addRecord(rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYLINE) {          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (Topology.isClockwisePolygon(coords)) {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[3];          rowData[0]=new Double(FID);          rowData[1]=null;          rowData[2]=new Double(parentRecNum);          writer.addRecord(rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYGON) {          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (Topology.isClockwisePolygon(coords)) {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.Polygon wbGeometry=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[3];          rowData[0]=new Double(FID);          rowData[1]=null;          rowData[2]=new Double(parentRecNum);          writer.addRecord(rowData);        } else {        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Saving output file",progress);        }      }    } else {      showFeedback("An error was encountered when saving the output file.");      return;    }    if (outputShapeType == ShapeType.POLYGON) {      updateProgress("Performing operation (progress will not be updated):",-1);      try {        outputGeometry=g1.intersection(g2);      } catch (      Exception ex) {        outputGeometry=com.vividsolutions.jts.operation.overlay.snap.SnapOverlayOp.intersection(g1,g2);      }      if (outputGeometry instanceof GeometryCollection) {        int numGeometries=outputGeometry.getNumGeometries();        oneHundredthTotal=(int)(numGeometries / 100.0);        progress=0;        n=0;        int parentRecNum1=0;        int parentRecNum2=0;        for (int a=0; a < numGeometries; a++) {          parentRecNum1=-99;          parentRecNum2=-99;          com.vividsolutions.jts.geom.Geometry gN=outputGeometry.getGeometryN(a);          for (int m=0; m < tests1.length; m++) {            if (tests1[m].overlaps(gN) || tests1[m].covers(gN) || gN.distance(testGs1[m]) < 0.0001) {              parentRecNum1=userData1[m];              break;            }          }          for (int m=0; m < tests2.length; m++) {            if (tests2[m].overlaps(gN) || tests2[m].covers(gN) || gN.distance(testGs2[m]) < 0.0001) {              parentRecNum2=userData2[m];              break;            }          }          if (gN instanceof com.vividsolutions.jts.geom.Point && outputShapeType == ShapeType.POINT) {            Coordinate p=gN.getCoordinate();            whitebox.geospatialfiles.shapefile.Point wbGeometry=new whitebox.geospatialfiles.shapefile.Point(p.x,p.y);            output.addRecord(wbGeometry);            FID++;            Object[] rowData=new Object[3];            rowData[0]=new Double(FID);            rowData[1]=new Double(parentRecNum1);            rowData[2]=new Double(parentRecNum2);            writer.addRecord(rowData);          } else           if (gN instanceof LineString && outputShapeType == ShapeType.POLYLINE) {            LineString ls=(LineString)gN;            ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();            int[] parts={0};            Coordinate[] coords=ls.getCoordinates();            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }            PointsList pl=new PointsList(pnts);            whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());            output.addRecord(wbGeometry);            FID++;            Object[] rowData=new Object[3];            rowData[0]=new Double(FID);            rowData[1]=new Double(parentRecNum1);            rowData[2]=new Double(parentRecNum2);            writer.addRecord(rowData);          } else           if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYLINE) {            com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;            ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();            int[] parts=new int[p.getNumInteriorRing() + 1];            Coordinate[] coords=p.getExteriorRing().getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }            for (int b=0; b < p.getNumInteriorRing(); b++) {              parts[b + 1]=pnts.size();              coords=p.getInteriorRingN(b).getCoordinates();              if (Topology.isClockwisePolygon(coords)) {                for (i=coords.length - 1; i >= 0; i--) {                  pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));                }              } else {                for (i=0; i < coords.length; i++) {                  pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));                }              }            }            PointsList pl=new PointsList(pnts);            whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());            output.addRecord(wbGeometry);            FID++;            Object[] rowData=new Object[3];            rowData[0]=new Double(FID);            rowData[1]=new Double(parentRecNum1);            rowData[2]=new Double(parentRecNum2);            writer.addRecord(rowData);          } else           if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYGON) {            com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;            ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();            int[] parts=new int[p.getNumInteriorRing() + 1];            Coordinate[] coords=p.getExteriorRing().getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }            for (int b=0; b < p.getNumInteriorRing(); b++) {              parts[b + 1]=pnts.size();              coords=p.getInteriorRingN(b).getCoordinates();              if (Topology.isClockwisePolygon(coords)) {                for (i=coords.length - 1; i >= 0; i--) {                  pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));                }              } else {                for (i=0; i < coords.length; i++) {                  pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));                }              }            }            PointsList pl=new PointsList(pnts);            whitebox.geospatialfiles.shapefile.Polygon wbGeometry=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());            output.addRecord(wbGeometry);            FID++;            Object[] rowData=new Object[3];            rowData[0]=new Double(FID);            rowData[1]=new Double(parentRecNum1);            rowData[2]=new Double(parentRecNum2);            writer.addRecord(rowData);          } else {          }          n++;          if (n >= oneHundredthTotal) {            n=0;            if (cancelOp) {              cancelOperation();              return;            }            progress++;            updateProgress("Saving output file",progress);          }        }      } else {        showFeedback("An error was encountered when saving the output file.");        return;      }    }    output.write();    writer.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:10.271 -0500",hash_original_method="D45AACC1784EFE96257BB7DED0205226",hash_generated_method="7AF95849154BC919DB73EF5F0602B568") public static final int primaryOrder(int order){  return CollationElementIteratorICU.primaryOrder(order);}  }
class C{  public Element next(){  return theNext;}  }
class C{  public static RIcon f(final String name){  return new RIcon(hu.sllauncher.gui.icon.LIcons.ResUtil.f_(name));}  }
class C{  public static void rollbackTo(@Nullable PsiBuilder.Marker marker){  if (marker != null) {    marker.rollbackTo();  }}  }
class C{  public QName(String qname,PrefixResolver resolver,boolean validate){  String prefix=null;  _namespaceURI=null;  int indexOfNSSep=qname.indexOf(':');  if (indexOfNSSep > 0) {    prefix=qname.substring(0,indexOfNSSep);    if (prefix.equals("xml")) {      _namespaceURI=S_XMLNAMESPACEURI;    } else {      _namespaceURI=resolver.getNamespaceForPrefix(prefix);    }    if (null == _namespaceURI) {      throw new RuntimeException(XMLMessages.createXMLMessage(XMLErrorResources.ER_PREFIX_MUST_RESOLVE,new Object[]{prefix}));    }    _localName=qname.substring(indexOfNSSep + 1);  } else   if (indexOfNSSep == 0) {    throw new RuntimeException(XMLMessages.createXMLMessage(XMLErrorResources.ER_NAME_CANT_START_WITH_COLON,null));  } else {    _localName=qname;  }  if (validate) {    if ((_localName == null) || (!XML11Char.isXML11ValidNCName(_localName))) {      throw new IllegalArgumentException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ARG_LOCALNAME_INVALID,null));    }  }  m_hashCode=toString().hashCode();  _prefix=prefix;}  }
class C{  public static float toDIPFromPixel(float value){  return value / DisplayMetricsHolder.getDisplayMetrics().density;}  }
class C{  private AppliedMigration createAppliedMigration(int version,String description){  return new AppliedMigration(version,version,MigrationVersion.fromVersion(Integer.toString(version)),description,MigrationType.CQL,"x",null,new Date(),"sa",123,true);}  }
class C{  private CharSequence findConstraintViolation(){  if (Build.VERSION.SDK_INT < mMinSdkVersion) {    return mContext.getString(R.string.requires_android_api_level,mMinSdkVersion);  }  if (mCustomConstraintSummary != null) {    return mCustomConstraintSummary;  }  if (!isEnabledForAdmin(getCurrentAdmin())) {    return getAdminConstraintSummary();  }  if (!isEnabledForUser(getCurrentUser())) {    return getUserConstraintSummary();  }  return null;}  }
class C{  @Transactional(readOnly=true) public List<T> retrieveAll(){  String queryString=String.format("select o from %s o",unqualifiedModelClassName);  Query query=this.entityManager.createQuery(queryString);  @SuppressWarnings("unchecked") List<T> results=query.getResultList();  return results;}  }
class C{  void saveEntities(DataOutputStream out) throws IOException {  int num=0;  for (Enumeration<Entity> e=entityHash.elements(); e.hasMoreElements(); ) {    Entity ent=e.nextElement();    if (ent.isGeneral()) {      num++;    }  }  out.writeShort((short)num);  for (Enumeration<Entity> e=entityHash.elements(); e.hasMoreElements(); ) {    Entity ent=e.nextElement();    if (ent.isGeneral()) {      out.writeShort(getNameId(ent.getName()));      out.writeByte(ent.getType() & ~GENERAL);      out.writeUTF(ent.getString());    }  }}  }
class C{  public Task<FileSnapshotRestRep> updateShareACL(URI id,String shareName,SnapshotCifsShareACLUpdateParams param){  UriBuilder builder=client.uriBuilder(getShareACLsUrl());  URI targetUri=builder.build(id,shareName);  return putTaskURI(param,targetUri);}  }
class C{  public void runko(){  final String portStr=System.getProperty("rmi.port",null);  final int port=portStr != null ? Integer.parseInt(portStr) : basePort;  final File[] conf=findConfigurationFilesKo();  if ((conf == null) || (conf.length == 0))   throw new RuntimeException("No configuration found");  String errStr;  for (int i=0; i < conf.length; i++) {    errStr=testConfigurationKo(conf[i],port + testPort++);    if (errStr != null) {      throw new RuntimeException(errStr);    }  }}  }
class C{  final Node<K,V> findFirst(){  for (Node<K,V> b, n; ; ) {    if ((n=(b=head.node).next) == null)     return null;    if (n.value != null)     return n;    n.helpDelete(b,n.next);  }}  }
class C{  public Object invoke(String methodName,Class<?>[] paramClasses,Object[] paramValues){  Object result;  result=null;  if (getClassLoader() != null) {    result=invoke(getClassLoader(),methodName,paramClasses,paramValues);  }  return result;}  }
class C{  public DefaultHandleTracker(Handle handle){  masterHandle=handle;  multicaster=new HandleMulticaster(handle);}  }
class C{  public ContainerVmBwProvisionerSimple(long bw){  super(bw);  setBwTable(new HashMap<String,Long>());}  }
class C{  private void moveTyped(){  final Collection<T> elementsCollection=MembersManager.fetchElements(myMemberInfoCollection);  final Collection<? extends PyElement> references=myManager.getElementsToStoreReferences(elementsCollection);  for (  final PyElement element : references) {    PyClassRefactoringUtil.rememberNamedReferences(element,PyNames.CANONICAL_SELF);  }  final Collection<PyElement> newElements=myManager.moveMembers(myFrom,myMemberInfoCollection,myTo);  for (  final PyElement element : newElements) {    PyClassRefactoringUtil.restoreNamedReferences(element);  }}  }
class C{  private void findViews(){  this.etNumber=(EditText)findViewById(R.id.etNumber);  this.optColombian=(RadioButton)findViewById(R.id.optColombian);  this.optExpresso=(RadioButton)findViewById(R.id.optExpresso);  this.optDecaf=(RadioButton)findViewById(R.id.optDecaf);  this.chkCream=(CheckBox)findViewById(R.id.chkCream);  this.chkSugar=(CheckBox)findViewById(R.id.chkSugar);  this.btnCancel=(Button)findViewById(R.id.btnCancel);  this.btnOrder=(Button)findViewById(R.id.btnOrder);}  }
class C{  @Override public String toString(){  return "CUstream[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + "]";}  }
class C{  protected void updateCapabilitiesFilter(Capabilities filter){  Instances tempInst;  Capabilities filterClass;  if (filter == null) {    m_FilterEditor.setCapabilitiesFilter(new Capabilities(null));    return;  }  if (!ExplorerDefaults.getInitGenericObjectEditorFilter())   tempInst=new Instances(m_Instances,0); else   tempInst=new Instances(m_Instances);  tempInst.setClassIndex(m_AttVisualizePanel.getColorBox().getSelectedIndex() - 1);  try {    filterClass=Capabilities.forInstances(tempInst);  } catch (  Exception e) {    filterClass=new Capabilities(null);  }  m_FilterEditor.setCapabilitiesFilter(filterClass);  m_ApplyFilterBut.setEnabled(true);  Capabilities currentCapabilitiesFilter=m_FilterEditor.getCapabilitiesFilter();  Filter currentFilter=(Filter)m_FilterEditor.getValue();  Capabilities currentFilterCapabilities=null;  if (currentFilter != null && currentCapabilitiesFilter != null && (currentFilter instanceof CapabilitiesHandler)) {    currentFilterCapabilities=((CapabilitiesHandler)currentFilter).getCapabilities();    if (!currentFilterCapabilities.supportsMaybe(currentCapabilitiesFilter) && !currentFilterCapabilities.supports(currentCapabilitiesFilter)) {      try {        currentFilter.setInputFormat(getInstances());      } catch (      Exception ex) {        m_ApplyFilterBut.setEnabled(false);      }    }  }}  }
class C{  public BeaconAnalysis analyzeFrame(Mat img,Mat gray,ScreenOrientation orientation){  return analyzeFrame(this.redDetector,this.blueDetector,img,gray,orientation);}  }
class C{  private Point2D edge_point(Point2D p,double current_azimuth){  double c=HEMISPHERE_EDGE;  LatLonPoint tmpll=GreatCircle.sphericalBetween(centerY,centerX,c,current_azimuth);  double phi=tmpll.getRadLat();  double lambda=tmpll.getRadLon();  double kPrime=1f / Math.cos(c);  double cosPhi=Math.cos(phi);  double sinPhi=Math.sin(phi);  double lambdaMinusCtrLon=lambda - centerX;  double cosLambdaMinusCtrLon=Math.cos(lambdaMinusCtrLon);  double sinLambdaMinusCtrLon=Math.sin(lambdaMinusCtrLon);  double x=(scaled_radius * kPrime * cosPhi* sinLambdaMinusCtrLon) + wx;  double y=hy - (scaled_radius * kPrime * (cosCtrLat * sinPhi - sinCtrLat * cosPhi * cosLambdaMinusCtrLon));  p.setLocation(x,y);  return p;}  }
class C{  static UtilEvalError castError(Class lhsType,Class rhsType,int operation){  return castError(Reflect.normalizeClassName(lhsType),Reflect.normalizeClassName(rhsType),operation);}  }
class C{  public void testEquals_equalObjectsInDifferentEqualityGroups(){  assertTestEqualsCausesException("Equal objects in different equality group should cause an exception.",new EqualsTester().newEqualityGroup("a").newEqualityGroup("a"));}  }
class C{  @Category(FlakyTest.class) @Test public void testDLockMBean() throws Throwable {  initManagement(false);  VM[] managedNodes=new VM[getManagedNodeList().size()];  VM managingNode=getManagingNode();  getManagedNodeList().toArray(managedNodes);  createGrantorLockService(managedNodes[0]);  createLockService(managedNodes[1]);  createLockService(managedNodes[2]);  for (  VM vm : getManagedNodeList()) {    verifyLockData(vm);  }  verifyLockDataRemote(managingNode);  for (  VM vm : getManagedNodeList()) {    closeLockService(vm);  }}  }
class C{  public boolean removeDefaultRemoveGraph(IRI graphURI){  return defaultRemoveGraphs.remove(graphURI);}  }
class C{  protected void addCommentPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_DeprecatableElement_comment_feature"),getString("_UI_PropertyDescriptor_description","_UI_DeprecatableElement_comment_feature","_UI_DeprecatableElement_type"),SGenPackage.Literals.DEPRECATABLE_ELEMENT__COMMENT,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public String username(){  return this.username;}  }
class C{  public ChannelFuture connectAsync(){  logger.info("Connecting to {}",getSocketAddress());  final Bootstrap b=getBootstrap();  reconnectOnCloseListener.requestReconnect();  final ChannelFuture connectFuture=b.connect();  connectFuture.addListener(null);  return connectFuture;}  }
class C{  @SuppressWarnings("fallthrough") public static Automaton toAutomaton(Term wildcardquery){  List<Automaton> automata=new ArrayList<>();  String wildcardText=wildcardquery.text();  for (int i=0; i < wildcardText.length(); ) {    final int c=wildcardText.codePointAt(i);    int length=Character.charCount(c);switch (c) {case WILDCARD_STRING:      automata.add(Automata.makeAnyString());    break;case WILDCARD_CHAR:  automata.add(Automata.makeAnyChar());break;case WILDCARD_ESCAPE:if (i + length < wildcardText.length()) {final int nextChar=wildcardText.codePointAt(i + length);length+=Character.charCount(nextChar);automata.add(Automata.makeChar(nextChar));break;}default :automata.add(Automata.makeChar(c));}i+=length;}return Operations.concatenate(automata);}  }
class C{  public int adjustAlpha(int color,float factor){  int alpha=Math.round(Color.alpha(color) * factor);  int red=Color.red(color);  int green=Color.green(color);  int blue=Color.blue(color);  return Color.argb(alpha,red,green,blue);}  }
class C{  FlowState manageOperationProcess(FlowState flowState,InstanceStatus result){  EC2Communication ec2comm=new EC2Communication(ph);  FlowState newState=null;switch (flowState) {case START_REQUESTED:    ec2comm.startInstance(ph.getAWSInstanceId());  result.setDescription(Messages.getAll("accessInfo_STARTING"));result.setAccessInfo(Messages.get(ph.getCustomerLocale(),"accessInfo_NOT_AVAILABLE"));newState=FlowState.STARTING;break;case STARTING:if (isInstanceRunning(ec2comm)) {String accessInfo=Messages.get(ph.getCustomerLocale(),"accessInfo_DNS",new Object[]{ec2comm.getPublicDNS(ph.getAWSInstanceId())});result.setAccessInfo(accessInfo + KEY_PAIR_NAME + ph.getKeyPairName());newState=FlowState.FINISHED;}break;case STOP_REQUESTED:ec2comm.stopInstance(ph.getAWSInstanceId());result.setDescription(Messages.getAll("accessInfo_STOPPING"));result.setAccessInfo(Messages.get(ph.getCustomerLocale(),"accessInfo_NOT_AVAILABLE"));newState=FlowState.STOPPING;break;case STOPPING:if (isInstanceStopped(ec2comm)) {result.setAccessInfo(Messages.get(ph.getCustomerLocale(),"accessInfo_NOT_AVAILABLE"));newState=FlowState.FINISHED;}break;default :}return newState;}  }
class C{  synchronized boolean isTerminated(){  return state instanceof TerminatedStateHandler;}  }
class C{  @Override public String globalInfo(){  return "Combining several multi-label classifiers using Bootstrap AGGregatING.\n" + "Duplicates Instances instead of assigning higher weights -- should work for methods that do not handle weights at all.";}  }
class C{  public String standardPattern(){  return pattern.pattern();}  }
class C{  void drawRGB(int[] rgbData,int offset,int x,int y,int w,int h,boolean processAlpha){  impl.drawRGB(nativeGraphics,rgbData,offset,x + xTranslate,y + yTranslate,w,h,processAlpha);}  }
class C{  public ObjectFactory(){}  }
class C{  protected Pair<Class<? extends Page>,PageParameters> determineRedirectTarget(boolean isCheckout){  final Class<? extends Page> successfulPage;  final PageParameters parameters=new PageParameters();  if (isCheckout) {    successfulPage=(Class)wicketPagesMounter.getPageProviderByUri("/checkout").get();    parameters.set(CheckoutPage.THREE_STEPS_PROCESS,"true").set(CheckoutPage.STEP,CheckoutPage.STEP_ADDR);  } else {    successfulPage=Application.get().getHomePage();  }  return new Pair<Class<? extends Page>,PageParameters>(successfulPage,parameters);}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public static void writeBytesToFilename(String filename,byte[] bytes){  FileOutputStream fos=null;  try {    if (filename != null && bytes != null) {      File f=new File(filename);      fos=new FileOutputStream(f);      fos.write(bytes);      fos.close();    } else {      if (log.isLoggable(java.util.logging.Level.FINE)) {        log.log(java.util.logging.Level.FINE,"writeBytesToFilename got null byte[] pointed");      }    }  } catch (  IOException ex) {    if (fos != null) {      try {        fos.close();      } catch (      IOException ioe) {        if (log.isLoggable(java.util.logging.Level.FINE)) {          log.log(java.util.logging.Level.FINE,ioe.getMessage(),ioe);        }      }    }  }}  }
class C{  @Override public String serialize(boolean full){  try {    StringWriter writer=new StringWriter();    XMLStreamWriter serializer=makeXMLSerializer(writer);    serializer.writeStartDocument();    serializer.writeComment("This file is autogenerated. Please don't edit.");    serializer.setDefaultNamespace("http://marklogic.com/data-hub");    serializer.writeStartElement("flow");    if (full) {      serializer.writeStartElement("name");      serializer.writeCharacters(this.flowName);      serializer.writeEndElement();      serializer.writeStartElement("entity");      serializer.writeCharacters(this.entityName);      serializer.writeEndElement();      serializer.writeStartElement("type");      serializer.writeCharacters(this.type.toString());      serializer.writeEndElement();    }    serializer.writeStartElement("complexity");    serializer.writeCharacters(this.flowComplexity.toString());    serializer.writeEndElement();    serializer.writeStartElement("data-format");    serializer.writeCharacters(this.dataFormat.getDefaultMimetype());    serializer.writeEndElement();    if (this.collector != null) {      this.collector.serialize(serializer);    }    serializer.writeStartElement("plugins");    for (    Plugin t : this.plugins) {      if (t != null) {        t.serialize(serializer);      }    }    serializer.writeEndElement();    Writer w=this.getWriter();    if (w != null) {      this.getWriter().serialize(serializer);    }    serializer.writeEndElement();    serializer.writeEndDocument();    serializer.flush();    serializer.close();    StringWriter finalWriter=new StringWriter();    Transformer t=TransformerFactory.newInstance().newTransformer();    t.setOutputProperty(OutputKeys.INDENT,"yes");    t.setOutputProperty("{http://xml.apache.org/xslt}indent-amount","2");    t.transform(new StreamSource(new StringReader(writer.toString())),new StreamResult(finalWriter));    return finalWriter.toString().replaceFirst("<!--","\n<!--").replaceFirst("-->","-->\n");  } catch (  Exception e) {    throw new MarkLogicIOException(e);  }}  }
class C{  public JmsSiBusScriptCommand(Configuration configuration,String resourcePath,Resource resource){  super(configuration,resourcePath);  this.resource=resource;}  }
class C{  public void produceImage() throws IOException, ImageFormatException {  char nm[]=new char[80];  int c;  int i=0;  int state=0;  int H=0;  int W=0;  int x=0;  int y=0;  boolean start=true;  byte raster[]=null;  IndexColorModel model=null;  while (!aborted && (c=input.read()) != -1) {    if ('a' <= c && c <= 'z' || 'A' <= c && c <= 'Z' || '0' <= c && c <= '9' || c == '#' || c == '_') {      if (i < 78)       nm[i++]=(char)c;    } else     if (i > 0) {      int nc=i;      i=0;      if (start) {        if (nc != 7 || nm[0] != '#' || nm[1] != 'd' || nm[2] != 'e' || nm[3] != 'f' || nm[4] != 'i' || nm[5] != 'n' || nm[6] != 'e') {          error("Not an XBM file");        }        start=false;      }      if (nm[nc - 1] == 'h')       state=1; else       if (nm[nc - 1] == 't' && nc > 1 && nm[nc - 2] == 'h')       state=2; else       if (nc > 2 && state < 0 && nm[0] == '0' && nm[1] == 'x') {        int n=0;        for (int p=2; p < nc; p++) {          c=nm[p];          if ('0' <= c && c <= '9')           c=c - '0'; else           if ('A' <= c && c <= 'Z')           c=c - 'A' + 10; else           if ('a' <= c && c <= 'z')           c=c - 'a' + 10; else           c=0;          n=n * 16 + c;        }        for (int mask=1; mask <= 0x80; mask<<=1) {          if (x < W) {            if ((n & mask) != 0)             raster[x]=1; else             raster[x]=0;          }          x++;        }        if (x >= W) {          if (setPixels(0,y,W,1,model,raster,0,W) <= 0) {            return;          }          x=0;          if (y++ >= H) {            break;          }        }      } else {        int n=0;        for (int p=0; p < nc; p++)         if ('0' <= (c=nm[p]) && c <= '9')         n=n * 10 + c - '0'; else {          n=-1;          break;        }        if (n > 0 && state > 0) {          if (state == 1)           W=n; else           H=n;          if (W == 0 || H == 0)           state=0; else {            model=new IndexColorModel(8,2,XbmColormap,0,false,0);            setDimensions(W,H);            setColorModel(model);            setHints(XbmHints);            headerComplete();            raster=new byte[W];            state=-1;          }        }      }    }  }  input.close();  imageComplete(ImageConsumer.STATICIMAGEDONE,true);}  }
class C{  public DefaultRetryPolicy(){  this(DEFAULT_TIMEOUT_MS,DEFAULT_MAX_RETRIES,DEFAULT_BACKOFF_MULT);}  }
class C{  public boolean hasSource(){  return getSource() != null;}  }
class C{  @Deprecated public AssumptionViolatedException(String assumption,Throwable e){  this(assumption,false,null,null);  initCause(e);}  }
class C{  public void testSignumNegative(){  String a="-92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=41;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  assertEquals("incorrect value",-1,aNumber.signum());}  }
class C{  public Double3D(final Double2D p){  x=p.x;  y=p.y;  z=0.0;}  }
class C{  @Override public void write(int b) throws IOException {  Iterator<Client> it=clients.iterator();  while (it.hasNext()) {    Client client=it.next();    try {      client.output.write(b);    } catch (    Exception e) {      it.remove();      close(client);    }  }}  }
class C{  public static void finishShareToMessenger(Activity activity,ShareToMessengerParams shareToMessengerParams){  Intent originalIntent=activity.getIntent();  Set<String> categories=originalIntent.getCategories();  if (categories == null) {    activity.setResult(Activity.RESULT_CANCELED,null);    activity.finish();    return;  }  if (categories.contains(ORCA_THREAD_CATEGORY_20150314)) {    Bundle appLinkExtras=AppLinks.getAppLinkExtras(originalIntent);    Intent resultIntent=new Intent();    if (categories.contains(ORCA_THREAD_CATEGORY_20150314)) {      resultIntent.putExtra(EXTRA_PROTOCOL_VERSION,MessengerUtils.PROTOCOL_VERSION_20150314);      String threadToken=appLinkExtras.getString(MessengerUtils.EXTRA_THREAD_TOKEN_KEY);      resultIntent.putExtra(EXTRA_THREAD_TOKEN_KEY,threadToken);    } else {      throw new RuntimeException();    }    resultIntent.setDataAndType(shareToMessengerParams.uri,shareToMessengerParams.mimeType);    resultIntent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);    resultIntent.putExtra(EXTRA_APP_ID,FacebookSdk.getApplicationId());    resultIntent.putExtra(EXTRA_METADATA,shareToMessengerParams.metaData);    resultIntent.putExtra(EXTRA_EXTERNAL_URI,shareToMessengerParams.externalUri);    activity.setResult(Activity.RESULT_OK,resultIntent);    activity.finish();  } else {    activity.setResult(Activity.RESULT_CANCELED,null);    activity.finish();  }}  }
class C{  public void startDocument() throws SAXException {}  }
class C{  @Override protected void process(DistributionManager dm){  doGet(dm);}  }
class C{  @Override public boolean longTryCompareAndSwap(ObjectReference objref,long expected,long newValue,Word offset,Word unused,int mode){  if (org.jikesrvm.VM.BuildForIA32) {    return Magic.attemptLong(objref.toObject(),offset.toOffset(),expected,newValue);  } else {    long oldValue;    do {      oldValue=Magic.prepareLong(objref,offset.toOffset());      if (oldValue != expected)       return false;    } while (!Magic.attemptLong(objref,offset.toOffset(),oldValue,newValue));    return true;  }}  }
class C{  public ReceiveFileTransfer acceptFileTransfer(IncomingFileTransferEvent event,File destination) throws IOException {  checkNotNull(event,"Event cannot be null");  checkNotNull(destination,"Destination file cannot be null");  return acceptFileTransfer(event,destination,0);}  }
class C{  public IndexStats(StatisticsFactory factory,String indexName){  stats=factory.createAtomicStatistics(type,indexName);}  }
class C{  public AboutAction(KseFrame kseFrame){  super(kseFrame);  putValue(LONG_DESCRIPTION,res.getString("AboutAction.statusbar"));  putValue(NAME,res.getString("AboutAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("AboutAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("AboutAction.image")))));}  }
class C{  public CF9(){  this(10);}  }
class C{  public static double cdf(double val,double loc,double scale,double shape){  val=(val - loc) / scale;  if (shape != 0.) {    final double tmp=1 - shape * val;    if (tmp < 1e-15) {      return (shape < 0) ? 0 : 1;    }    val=-Math.log(tmp) / shape;  }  return 1. / (1. + Math.exp(-val));}  }
class C{  public void finer(String mesg){  log(Level.FINER,mesg,null);}  }
class C{  public Project tagProjectWithOpenstackId(URI projectId,String osTenantId,String coprhdTenantId){  Project project=_dbClient.queryObject(Project.class,projectId);  if (project != null) {    ScopedLabelSet tagSet=new ScopedLabelSet();    ScopedLabel tagLabel=new ScopedLabel(coprhdTenantId,osTenantId);    tagSet.add(tagLabel);    project.setTag(tagSet);    _dbClient.updateObject(project);    return project;  }  throw APIException.internalServerErrors.targetIsNullOrEmpty("Project with id: " + projectId);}  }
class C{  public static void initAllPipes(GraphManager m,int stageId){  int idx;  initInputPipesAsNeeded(m,stageId);  int pipeId;  idx=m.stageIdToOutputsBeginIdx[stageId];  while (-1 != (pipeId=m.multOutputIds[idx++])) {    try {      int consumerId=getRingConsumerId(m,pipeId);      if (consumerId < 0 && !Pipe.isInit(getRing(m,pipeId))) {        String schemaName=Pipe.schemaName(m.pipeIdToPipe[pipeId]);        int producerId=getRingProducerId(m,pipeId);        if (producerId < 0) {          throw new UnsupportedOperationException("Can not find stage consuming Pipe<" + schemaName + "> #"+ pipeId+ " "+ CHECK_GRAPH_CONSTRUCTION);        } else {          PronghornStage prodStage=getRingProducer(m,pipeId);          throw new UnsupportedOperationException("Can not find stage consuming Pipe<" + schemaName + "> #"+ pipeId+ " Which is produced by stage "+ prodStage+ ". "+ CHECK_GRAPH_CONSTRUCTION);        }      }    } catch (    ArrayIndexOutOfBoundsException aiobe) {      if ("-1".equals(aiobe.getMessage())) {        throw new UnsupportedOperationException("No consumer for pipe " + pipeId);      } else {        throw new RuntimeException(aiobe);      }    }    if (!stageForMonitorData(m,getStage(m,stageId))) {      long timeout=System.currentTimeMillis() + 20_000;      while (!Pipe.isInit(m.pipeIdToPipe[pipeId])) {        Thread.yield();        if (System.currentTimeMillis() > timeout) {          throw new RuntimeException("Check Graph, unable to startup " + GraphManager.getStage(m,stageId) + " due to output "+ m.pipeIdToPipe[pipeId]+ " consumed by "+ getRingConsumer(m,m.pipeIdToPipe[pipeId].id));        }      }    }  }}  }
class C{  private void drawRightPart(final Point buttonSize){  gc.setForeground(selectedBackgroundColor);  gc.setBackground(selectedBackgroundColor);  gc.setClipping(3,3,buttonSize.x / 2,buttonSize.y - 1);  if (round) {    gc.fillRoundRectangle(2,2,buttonSize.x,buttonSize.y,arc,arc);  } else {    gc.fillRectangle(2,2,buttonSize.x,buttonSize.y);  }  gc.setForeground(selectedForegroundColor);  final Point textSize=gc.textExtent(textForSelect);  gc.drawString(textForSelect,(buttonSize.x / 2 - textSize.x) / 2 + arc,(buttonSize.y - textSize.y) / 2 + arc);}  }
class C{  public void testRepeatedClose() throws IOException {  fetch("www.fortify.net",443,true,"/sslcheck.html",10,1,0,60);  fetch("mail.google.com",443,true,"/mail/",10,1,0,60);  fetch("www.paypal.com",443,true,"/",10,1,0,60);  fetch("www.yellownet.ch",443,true,"/",10,1,0,60);}  }
class C{  public void plnI(Object o) throws IOException {  p(o.toString());  pln();  pI();}  }
class C{  public static void writeDataRow(String data,String outputPath){  File file=new File(outputPath);  try {    file.createNewFile();  } catch (  IOException e1) {    e1.printStackTrace();    System.exit(0);  }  try {    BufferedWriter writer=new BufferedWriter(new FileWriter(file));    writer.write(data);    writer.close();  } catch (  IOException e) {    e.printStackTrace();    System.exit(0);  }}  }
class C{  public boolean swapChildren(@NonNull DisplayBase child1,@NonNull DisplayBase child2){  int childIndex1=mDisplayList.indexOf(child1);  int childIndex2=mDisplayList.indexOf(child2);  if (childIndex1 == -1 || childIndex2 == -1) {    return false;  }  removeChildAt(childIndex1);  addChildAt(childIndex1,child2);  removeChildAt(childIndex2);  addChildAt(childIndex2,child1);  return true;}  }
class C{  public int hashCode(){  int result=0;  int cnt;  Enumeration e;  for (e=all(), cnt=0; e.hasMoreElements() && cnt < 5; cnt++)   result^=((symbol)e.nextElement()).hashCode();  return result;}  }
class C{  public boolean checkProcess(final IOContainer inputContainer){  rootOperator.checkAll();  return true;}  }
class C{  private static String createGDSExceptionMessage(GDSException ex){  return "GDS Exception. " + ex.getIntParam() + ". "+ ex.getMessage();}  }
class C{  public int[] readAllInts(){  String[] fields=readAllStrings();  int[] vals=new int[fields.length];  for (int i=0; i < fields.length; i++)   vals[i]=Integer.parseInt(fields[i]);  return vals;}  }
class C{  protected void drawFrame(DrawContext dc){  GL2 gl=dc.getGL().getGL2();  OGLStackHandler oglStack=new OGLStackHandler();  try {    oglStack.pushModelviewIdentity(gl);    FrameAttributes attributes=this.getActiveAttributes();    gl.glTranslated(this.frameBounds.x,this.frameBounds.y,0.0);    boolean drawHorizontalScrollbar=this.showHorizontalScrollbar;    boolean drawVerticalScrollbar=this.showVerticalScrollbar;    if (!dc.isPickingMode()) {      Color[] color=attributes.getBackgroundColor();      try {        gl.glEnable(GL.GL_LINE_SMOOTH);        OGLUtil.applyColor(gl,color[0],1.0,false);        gl.glLineWidth(this.frameLineWidth);        FrameFactory.drawBuffer(dc,GL.GL_LINE_STRIP,this.vertexBuffer);      }  finally {        gl.glDisable(GL.GL_LINE_SMOOTH);      }      gl.glLoadIdentity();      gl.glTranslated(this.innerBounds.x,this.innerBounds.y,0.0);      TreeUtil.drawRectWithGradient(gl,new Rectangle(0,0,this.innerBounds.width,this.innerBounds.height),color[0],color[1],attributes.getBackgroundOpacity(),AVKey.VERTICAL);    } else {      int frameHeight=this.frameBounds.height;      int frameWidth=this.frameBounds.width;      TreeUtil.drawPickableRect(dc,this.pickSupport,this,new Rectangle(0,0,frameWidth,frameHeight));      if (this.isEnableResizeControl() && !this.isDrawMinimized()) {        Color color=dc.getUniquePickColor();        int colorCode=color.getRGB();        this.pickSupport.addPickableObject(colorCode,this.frameResizeControl);        gl.glColor3ub((byte)color.getRed(),(byte)color.getGreen(),(byte)color.getBlue());        gl.glLineWidth(this.borderPickWidth);        FrameFactory.drawBuffer(dc,GL.GL_LINE_STRIP,this.vertexBuffer);      }      gl.glLoadIdentity();      gl.glTranslated(this.innerBounds.x,this.innerBounds.y,0.0);      if (drawVerticalScrollbar && drawHorizontalScrollbar && !this.isDrawMinimized()) {        gl.glRecti(this.innerBounds.width - this.scrollBarSize,0,this.innerBounds.width,this.scrollBarSize);      }    }    if (!this.isDrawMinimized())     this.drawScrollBars(dc);    if (this.isDrawTitleBar()) {      gl.glTranslated(0,this.innerBounds.height - this.titleBarHeight,0);      this.drawTitleBar(dc);    }    if (!dc.isPickingMode()) {      gl.glLoadIdentity();      int minX=(int)this.innerBounds.getMinX();      int minY=(int)this.innerBounds.getMinY();      int maxX=(int)this.innerBounds.getMaxX();      int maxY=(int)this.innerBounds.getMaxY();      OGLUtil.applyColor(gl,attributes.getForegroundColor(),false);      gl.glBegin(GL2.GL_LINE_STRIP);      try {        if (!drawVerticalScrollbar)         gl.glVertex2f(maxX,minY + 0.5f);        gl.glVertex2f(maxX,maxY);        gl.glVertex2f(minX + 0.5f,maxY);        gl.glVertex2f(minX + 0.5f,minY + 0.5f);        if (!drawHorizontalScrollbar)         gl.glVertex2f(maxX,minY + 0.5f);      }  finally {        gl.glEnd();      }    }  }  finally {    oglStack.pop(gl);  }}  }
class C{  private static Point2D calcCenterOfMass(final Point2D[] pointArray){  final int N=pointArray.length;  double cx=0;  double cy=0;  double area=calcSignedPolygonArea(pointArray);  final Point2D centroid=new Point2D.Double();  int i;  int j;  double factor=0;  for (i=0; i < N; i++) {    j=(i + 1) % N;    factor=(pointArray[i].getX() * pointArray[j].getY() - pointArray[j].getX() * pointArray[i].getY());    cx+=(pointArray[i].getX() + pointArray[j].getX()) * factor;    cy+=(pointArray[i].getY() + pointArray[j].getY()) * factor;  }  area*=6.0f;  factor=1 / area;  cx*=factor;  cy*=factor;  centroid.setLocation(cx,cy);  return centroid;}  }
class C{  protected boolean isSourceNewer(URL source,Class cls) throws IOException {  long lastMod;  if (isFile(source)) {    String path=source.getPath().replace('/',File.separatorChar).replace('|',':');    File file=new File(path);    lastMod=file.lastModified();  } else {    URLConnection conn=source.openConnection();    lastMod=conn.getLastModified();    conn.getInputStream().close();  }  long classTime=getTimeStamp(cls);  return classTime + config.getMinimumRecompilationInterval() < lastMod;}  }
class C{  public static boolean checkConnected(ConnectivityManager cm,boolean onlyWifi,boolean onlyUnmeteredNetwork){  if (cm == null)   return false;  NetworkInfo info=cm.getActiveNetworkInfo();  if (info != null && info.isConnected()) {    if (onlyWifi && info.getType() != ConnectivityManager.TYPE_WIFI) {      return false;    }    if (onlyUnmeteredNetwork) {      return !cm.isActiveNetworkMetered();    }    return true;  }  return false;}  }
class C{  public void testCaseInsensitive(){  m_Filter=getFilter(SortLabels.SORT_CASEINSENSITIVE,"first-last");  testBuffered();  Instances result=performTest();  String[] sorted=new String[]{"b","g","r"};  for (int i=0; i < sorted.length; i++)   assertEquals("Values differ for index #" + (i + 1),sorted[i],result.attribute(0).value(i));}  }
class C{  public static String toHexString(byte[] buf,int of,int cb,String sep,int lineLen){  if (buf == null)   return null;  if (lineLen <= 0)   lineLen=Integer.MAX_VALUE;  StringBuffer res=new StringBuffer(cb * 2);  for (int c=0; c < cb; c++) {    int b=buf[of++];    res.append(HEX_DIGITS[(b >> 4) & 0xf]);    res.append(HEX_DIGITS[b & 0xf]);    if (c > 0 && (c % lineLen) == 0)     res.append('\n'); else     if (sep != null && c < lineLen - 1)     res.append(sep);  }  return res.toString();}  }
class C{  public static Ed25519GroupElement cached(final Ed25519FieldElement YPlusX,final Ed25519FieldElement YMinusX,final Ed25519FieldElement Z,final Ed25519FieldElement T2d){  return new Ed25519GroupElement(CoordinateSystem.CACHED,YPlusX,YMinusX,Z,T2d);}  }
class C{  public Iterator iterator(){  return new IntMapIterator();}  }
class C{  public boolean isSetGetResponse(){  return this.getResponse != null;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof BarRenderer)) {    return false;  }  BarRenderer that=(BarRenderer)obj;  if (this.base != that.base) {    return false;  }  if (this.itemMargin != that.itemMargin) {    return false;  }  if (this.drawBarOutline != that.drawBarOutline) {    return false;  }  if (this.maximumBarWidth != that.maximumBarWidth) {    return false;  }  if (this.minimumBarLength != that.minimumBarLength) {    return false;  }  if (!ObjectUtilities.equal(this.gradientPaintTransformer,that.gradientPaintTransformer)) {    return false;  }  if (!ObjectUtilities.equal(this.positiveItemLabelPositionFallback,that.positiveItemLabelPositionFallback)) {    return false;  }  if (!ObjectUtilities.equal(this.negativeItemLabelPositionFallback,that.negativeItemLabelPositionFallback)) {    return false;  }  if (!this.barPainter.equals(that.barPainter)) {    return false;  }  if (this.shadowsVisible != that.shadowsVisible) {    return false;  }  if (!PaintUtilities.equal(this.shadowPaint,that.shadowPaint)) {    return false;  }  if (this.shadowXOffset != that.shadowXOffset) {    return false;  }  if (this.shadowYOffset != that.shadowYOffset) {    return false;  }  return super.equals(obj);}  }
class C{  private MatrixBlock collectBinaryBlock(Iterable<Writable> valueList) throws IOException {  MatrixBlock partition=null;  try {    if (_tSparseCol)     partition=new MatrixBlock(_clen,_rlen,true); else     partition=new MatrixBlock(_rlen,_clen,false);    for (    Writable val : valueList) {      PairWritableBlock pairValue=(PairWritableBlock)val;      int row_offset=(int)(pairValue.indexes.getRowIndex() - 1) * _brlen;      int col_offset=(int)(pairValue.indexes.getColumnIndex() - 1) * _bclen;      MatrixBlock block=pairValue.block;      if (!partition.isInSparseFormat()) {        partition.copy(row_offset,row_offset + block.getNumRows() - 1,col_offset,col_offset + block.getNumColumns() - 1,pairValue.block,false);      } else {        partition.appendToSparse(pairValue.block,row_offset,col_offset);      }    }    cleanupCollectedMatrixPartition(partition,partition.isInSparseFormat());  } catch (  DMLRuntimeException ex) {    throw new IOException(ex);  }  return partition;}  }
class C{  public List<MType> build(){  isClean=true;  if (!isMessagesListMutable && builders == null) {    return messages;  }  boolean allMessagesInSync=true;  if (!isMessagesListMutable) {    for (int i=0; i < messages.size(); i++) {      Message message=messages.get(i);      SingleFieldBuilder<MType,BType,IType> builder=builders.get(i);      if (builder != null) {        if (builder.build() != message) {          allMessagesInSync=false;          break;        }      }    }    if (allMessagesInSync) {      return messages;    }  }  ensureMutableMessageList();  for (int i=0; i < messages.size(); i++) {    messages.set(i,getMessage(i,true));  }  messages=Collections.unmodifiableList(messages);  isMessagesListMutable=false;  return messages;}  }
class C{  public void visit(){  int num=ByteArray.readU16bit(info,0);  int pos=2;  for (int i=0; i < num; i++) {    int offset=ByteArray.readU16bit(info,pos);    int numLoc=ByteArray.readU16bit(info,pos + 2);    pos=locals(pos + 4,offset,numLoc);    int numStack=ByteArray.readU16bit(info,pos);    pos=stack(pos + 2,offset,numStack);  }}  }
class C{  public void paintComponent(Graphics g){  if (getFrame() != null) {    setState(getFrame().getExtendedState());  }  JRootPane rootPane=getRootPane();  Window window=getWindow();  boolean leftToRight=(window == null) ? rootPane.getComponentOrientation().isLeftToRight() : window.getComponentOrientation().isLeftToRight();  boolean isSelected=(window == null) ? true : window.isActive();  int width=getWidth();  int height=getHeight();  Color background;  Color foreground;  Color darkShadow;  if (isSelected) {    background=activeBackground;    foreground=activeForeground;    darkShadow=activeShadow;  } else {    background=inactiveBackground;    foreground=inactiveForeground;    darkShadow=inactiveShadow;  }  paintTitlePane(g,0,0,width,height,isSelected);  int xOffset=leftToRight ? 5 : width - 5;  if (getWindowDecorationStyle() == JRootPane.FRAME || getWindowDecorationStyle() == JRootPane.PLAIN_DIALOG) {    xOffset+=leftToRight ? IMAGE_WIDTH + 5 : -IMAGE_WIDTH - 5;  }  String theTitle=getTitle();  if (theTitle != null) {    FontMetrics fm=MySwingUtilities2.getFontMetrics(rootPane,g);    int yOffset=((height - fm.getHeight()) / 2) + fm.getAscent();    Rectangle rect=new Rectangle(0,0,0,0);    if (iconifyButton != null && iconifyButton.getParent() != null) {      rect=iconifyButton.getBounds();    }    int titleW;    if (leftToRight) {      if (rect.x == 0) {        rect.x=window.getWidth() - window.getInsets().right - 2;      }      titleW=rect.x - xOffset - 4;      theTitle=MySwingUtilities2.clipStringIfNecessary(rootPane,fm,theTitle,titleW);    } else {      titleW=xOffset - rect.x - rect.width- 4;      theTitle=MySwingUtilities2.clipStringIfNecessary(rootPane,fm,theTitle,titleW);      xOffset-=MySwingUtilities2.stringWidth(rootPane,fm,theTitle);    }    int titleLength=MySwingUtilities2.stringWidth(rootPane,fm,theTitle);    g.setColor(foreground);    MySwingUtilities2.drawString(rootPane,g,theTitle,xOffset,yOffset);    xOffset+=leftToRight ? titleLength + 5 : -5;  }}  }
class C{  public void pause(){  fan.pause();}  }
class C{  public static BigDecimal toBigDecimal(byte[] bytes){  return toBigDecimal(bytes,0,bytes.length);}  }
class C{  public String weightTrimBetaTipText(){  return "Set the beta value used for weight trimming in LogitBoost. " + "Only instances carrying (1 - beta)% of the weight from previous iteration " + "are used in the next iteration. Set to 0 for no weight trimming. "+ "The default value is 0.";}  }
class C{  public boolean hasMultipleConfigurations(){  return (this.getInstrOfferingConfigs().size() > 1);}  }
class C{  private Geometry unionActual(Geometry g0,Geometry g1){  return restrictToPolygons(g0.union(g1));}  }
class C{  static synchronized void returnStream(PSOutputStream stream){  if (m_streamCount > 10) {    return;  }  stream.m_count=0;  if (m_poolTail != null) {    m_poolTail.setNext(stream);  } else {    m_poolHead=stream;  }  m_poolTail=stream;  m_streamCount++;}  }
class C{  public int search(final CharSequence s,final int from){  return search(s,from,s.length());}  }
class C{  protected void writeNetscapeExt() throws IOException {  out.write(0x21);  out.write(0xff);  out.write(11);  writeString("NETSCAPE" + "2.0");  out.write(3);  out.write(1);  writeShort(repeat);  out.write(0);}  }
class C{  public static void checkHTML(String text){  if (containsHTML(text)) {    throw new BotException("HTML tag characters are not allowed");  }}  }
class C{  public Quaterniond lookAlong(double dirX,double dirY,double dirZ,double upX,double upY,double upZ){  return lookAlong(dirX,dirY,dirZ,upX,upY,upZ,this);}  }
class C{  public XMLDecoder(InputStream in,Object owner,ExceptionListener exceptionListener){  this(in,owner,exceptionListener,null);}  }
class C{  public void pop(){  if (s.pop().equals(minStack.peek()))   minStack.pop();}  }
class C{  public final void checkAccess(){}  }
class C{  private boolean checkLevelCompleted(){  for (  Block entity : boxes) {    Pair<Integer,Integer> point=new Pair<Integer,Integer>(Integer.valueOf(entity.getX()),Integer.valueOf(entity.getY()));    if (!containerLocations.contains(point)) {      return false;    }  }  return true;}  }
class C{  public void unsubscribe(String clientHandle,final String[] topic,String invocationContext,String activityToken){  MqttConnection client=getConnection(clientHandle);  client.unsubscribe(topic,invocationContext,activityToken);}  }
class C{  public boolean isHome(){  return isHome;}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public boolean attempt(int old,int value,Offset offset){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return false;}  }
class C{  public static String replaceFirst(String s,char sub,char with){  int index=s.indexOf(sub);  if (index == -1) {    return s;  }  char[] str=s.toCharArray();  str[index]=with;  return new String(str);}  }
class C{  public List<NamedRelatedResourceRep> listVcenters(URI tenantId){  UriBuilder uriBuilder=client.uriBuilder(baseUrl);  if (tenantId != null) {    uriBuilder.queryParam(TENANT_PARAM,tenantId);  }  return getList(uriBuilder.build());}  }
class C{  private void populateCephAccessProfile(AccessProfile accessProfile,StorageProvider providerInfo){  accessProfile.setSystemId(providerInfo.getId());  accessProfile.setSystemClazz(providerInfo.getClass());  accessProfile.setIpAddress(providerInfo.getIPAddress());  accessProfile.setUserName(providerInfo.getUserName());  accessProfile.setPassword(providerInfo.getPassword());  accessProfile.setSystemType("ceph");}  }
class C{  synchronized void decrementCallCount(){  if (--callCount < 0) {    throw new Error("internal error: call count less than zero");  }  if (!permanent && removed && callCount == 0) {    ObjectTable.decrementKeepAliveCount();  }}  }
class C{  protected int nextInNotationType() throws IOException, XMLException {switch (current) {case 0x9:case 0xA:case 0xD:case 0x20:    do {      nextChar();    } while (current != -1 && XMLUtilities.isXMLSpace((char)current));  return LexicalUnits.S;case '|':nextChar();return LexicalUnits.PIPE;case '(':nextChar();return LexicalUnits.LEFT_BRACE;case ')':nextChar();context=ATTLIST_CONTEXT;return LexicalUnits.RIGHT_BRACE;default :return readName(LexicalUnits.NAME);}}  }
class C{  protected SnippetImpl(){  super();}  }
class C{  public boolean equals(Object otherObj){  if (!(otherObj instanceof ShortArrayList))   return super.equals(otherObj);  if (this == otherObj)   return true;  if (otherObj == null)   return false;  ShortArrayList other=(ShortArrayList)otherObj;  if (size() != other.size())   return false;  short[] theElements=elements();  short[] otherElements=other.elements();  for (int i=size(); --i >= 0; ) {    if (theElements[i] != otherElements[i])     return false;  }  return true;}  }
class C{  public synchronized void streamClosed(){  for (int i=0; i < listeners.length; i++) {    try {      if (listeners[i] != null) {        listeners[i].processFinished();      }    } catch (    Exception e) {      TLCActivator.logError("Error broadcasting the stream closed event",e);    }  }}  }
class C{  public ObjectNode welcomeDetails(){  return welcomeDetails.deepCopy();}  }
class C{  public CloneFailedException(final String message){  super(message);}  }
class C{  public int port(){  return _myPort;}  }
class C{  public static BlockConsistencyGroup findOrCreateRPBlockConsistencyGroup(IngestionRequestContext requestContext,UnManagedVolume unManagedVolume,ProtectionSet pset,DbClient dbClient){  BlockConsistencyGroup cg=null;  Project project=dbClient.queryObject(Project.class,pset.getProject());  NamedURI projectNamedUri=new NamedURI(pset.getProject(),project.getLabel());  RecoverPointVolumeIngestionContext rpContext=null;  if (requestContext instanceof RecoverPointVolumeIngestionContext) {    rpContext=(RecoverPointVolumeIngestionContext)requestContext;  } else   if (requestContext.getVolumeContext(unManagedVolume.getNativeGuid()) instanceof RecoverPointVolumeIngestionContext) {    rpContext=(RecoverPointVolumeIngestionContext)requestContext.getVolumeContext(unManagedVolume.getNativeGuid());  }  if (rpContext != null) {    cg=rpContext.findExistingBlockConsistencyGroup(pset.getLabel(),projectNamedUri,project.getTenantOrg());  }  URI varrayId=null;  URI storageSystemId=null;  if (pset.getVolumes() != null) {    for (    String volumeIdStr : pset.getVolumes()) {      Volume volume=requestContext.findDataObjectByType(Volume.class,URI.create(volumeIdStr),true);      if (volume != null) {        if (PersonalityTypes.SOURCE.name().equalsIgnoreCase(volume.getPersonality())) {          varrayId=volume.getVirtualArray();          if (volume.isVPlexVolume(dbClient)) {            storageSystemId=volume.getStorageController();          }        }      }    }  }  if (cg == null) {    cg=new BlockConsistencyGroup();    cg.setId(URIUtil.createId(BlockConsistencyGroup.class));    cg.setLabel(pset.getLabel());    cg.setProject(projectNamedUri);    cg.addConsistencyGroupTypes(Types.RP.name());    cg.setArrayConsistency(false);    cg.setTenant(project.getTenantOrg());    cg.setVirtualArray(varrayId);    cg.setStorageController(storageSystemId);    _logger.info("Created new block consistency group: " + cg.getId().toString());  }  cg.addSystemConsistencyGroup(pset.getProtectionSystem().toString(),pset.getLabel());  return cg;}  }
class C{  private void copyInstances(int from,Instances dest,int num){  for (int i=0; i < num; i++) {    dest.add(instance(from + i));  }}  }
class C{  public static boolean showDefaultConfigurationFileMissingChoice(final String title,final Scene scene){  final DialogAction createWithSample=new DialogAction("Create " + BaseConfigurationManager.APPLICATION_NAME + " configuration file with sample content",System.getProperty("line.separator") + "This creates a configuration file " + "in \""+ BaseConfigurationManager.getDefaultHomeDirectory()+ "\""+ " called \""+ BaseConfigurationManager.getDefaultConfigurationFileName()+ "\""+ ", which will include sample connections to localhost and iot.eclipse.org.");  final DialogAction createEmpty=new DialogAction("Create empty " + BaseConfigurationManager.APPLICATION_NAME + " configuration file",System.getProperty("line.separator") + "This creates a configuration file " + "in \""+ BaseConfigurationManager.getDefaultHomeDirectory()+ "\""+ " called \""+ BaseConfigurationManager.getDefaultConfigurationFileName()+ "\" with no sample connections.");  final DialogAction copyExisting=new DialogAction("Copy existing " + BaseConfigurationManager.APPLICATION_NAME + " configuration file",System.getProperty("line.separator") + "This copies an existing configuration file (selected in the next step) " + "to \""+ BaseConfigurationManager.getDefaultHomeDirectory()+ "\""+ " and renames it to \""+ BaseConfigurationManager.getDefaultConfigurationFileName()+ "\".");  final DialogAction dontDoAnything=new DialogAction("Don't do anything",System.getProperty("line.separator") + "You can still point " + BaseConfigurationManager.APPLICATION_NAME+ " at your chosen configuration file "+ "by using the \"--configuration=my_custom_path\""+ " command line parameter or open a configuration file from the main menu.");  final List<DialogAction> links=Arrays.asList(createWithSample,createEmpty,copyExisting,dontDoAnything);  Optional<DialogAction> response=CommandLinksDialog.showCommandLinks(title,"Please select one of the following options with regards to the " + BaseConfigurationManager.APPLICATION_NAME + " configuration file:",links.get(0),links,550,650,30,110,scene.getStylesheets());  boolean configurationFileCreated=false;  if (!response.isPresent()) {  } else   if (response.get().getHeading().toLowerCase().contains("sample")) {    configurationFileCreated=BaseConfigurationManager.createDefaultConfigFromClassPath("sample");  } else   if (response.get().getHeading().toLowerCase().contains("empty")) {    configurationFileCreated=BaseConfigurationManager.createDefaultConfigFromClassPath("empty");  } else   if (response.get().getHeading().toLowerCase().contains("copy")) {    final FileChooser fileChooser=new FileChooser();    fileChooser.setTitle("Select configuration file to copy");    String extensions="xml";    fileChooser.setSelectedExtensionFilter(new ExtensionFilter("XML file",extensions));    final File selectedFile=fileChooser.showOpenDialog(scene.getWindow());    if (selectedFile != null) {      configurationFileCreated=BaseConfigurationManager.createDefaultConfigFromFile(selectedFile);    }  } else {  }  return configurationFileCreated;}  }
class C{  private void fillBuf() throws IOException {  int result=in.read(buf,0,buf.length);  if (result == -1) {    throw new EOFException();  }  pos=0;  end=result;}  }
class C{  public String toString(){  return "null";}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:07.824 -0500",hash_original_method="CDA0A8C6D295040926E78ABE78DD6146",hash_generated_method="4B933B475475A8A7E23E265423554132") private void nativeScrollFocusedTextInput(float xPercent,int y){  addTaint(xPercent);  addTaint(y);}  }
class C{  public T caseLineStart(LineStart object){  return null;}  }
class C{  public void remove(String key){  Tool tool=(Tool)items.remove(key.intern());  if (tool != null) {    remove(tool.getFace());    tool.getFace().removeComponentListener(this);    firePropertyChange(MembershipProperty,null,items);  }}  }
class C{  public void addAttributeCertificates(Store attrStore) throws CMSException {  certs.addAll(CMSUtils.getAttributeCertificatesFromStore(attrStore));}  }
class C{  public static boolean isRFC1939Compatible(String uid){  if (uid == null) {    return false;  }  for (int i=0; i < uid.length(); i++) {    if ((uid.charAt(i) >= 0x21 && uid.charAt(i) <= 0x7E) == false) {      return false;    }  }  return true;}  }
class C{  public boolean isPortOpen(){  return portOpen;}  }
class C{  public LabelView(Context context,AttributeSet attrs){  super(context,attrs);  initLabelView();  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.LabelView);  CharSequence s=a.getString(R.styleable.LabelView_text);  if (s != null) {    setText(s.toString());  }  setTextColor(a.getColor(R.styleable.LabelView_textColor,0xFF000000));  int textSize=a.getDimensionPixelOffset(R.styleable.LabelView_textSize,0);  if (textSize > 0) {    setTextSize(textSize);  }  a.recycle();}  }
class C{  public synchronized void release(){  if (connection != null) {    connection.release();    connection=null;    readQueue.release();    readQueue=null;  }}  }
class C{  @Nullable public StackTraceElement[] stackTraceElements(){  return stackTraceElements;}  }
class C{  public <B>Source<B> as(Function<T,B> conversion,Function<B,T> backFunction){  return new Source<>(prngToValue.andThen(conversion),null,defaultAsString());}  }
class C{  public boolean isNull(){  return value.getValue() == null;}  }
class C{  private void loadAdminUsersId(String entidad) throws Exception {  DynamicTable tableInfo=new DynamicTable();  DynamicRows rowsInfo=new DynamicRows();  DynamicRow rowInfo=new DynamicRow();  UsersTable usrTbl=new UsersTable();  int counter;  BasicUserImpl user;  String qual;  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    tableInfo.setTableObject(usrTbl);    tableInfo.setClassName(UsersTable.class.getName());    qual=usrTbl.getLoadAminUsersQual(UserDefs.PRODUCT_USER);    tableInfo.setTablesMethod("getUserAdminTableNames");    tableInfo.setColumnsMethod("getAdminUserColumnNames");    rowInfo=new DynamicRow();    rowsInfo=new DynamicRows();    rowInfo.setClassName(BasicUserImpl.class.getName());    rowInfo.setValuesMethod("loadValues");    rowsInfo.add(rowInfo);    DynamicFns.selectMultiple(dbConn,qual,true,tableInfo,rowsInfo);    for (counter=0; counter < rowInfo.getRowCount(); counter++) {      user=(BasicUserImpl)rowInfo.getRow(counter);      _adminUsers.add(user);    }  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }}  }
class C{  public void removeEventSourceListener(EventSourceListener listener){  LOG.entering(CLASS_NAME,"removeEventSourceListener",listener);  _getDelegate().removeEventSourceListener(listener);}  }
class C{  public static boolean hasEmbeddedIPv4ClientAddress(Inet6Address ip){  return isCompatIPv4Address(ip) || is6to4Address(ip) || isTeredoAddress(ip);}  }
class C{  public boolean isCellEditable(int row,int col){switch (col) {case ADDTOGROUPCOL:    return true;default :  return false;}}  }
class C{  public final int generateSecret(byte[] sharedSecret,int offset) throws IllegalStateException, ShortBufferException {  chooseFirstProvider();  return spi.engineGenerateSecret(sharedSecret,offset);}  }
class C{  public static boolean verify(int userId,int resourceId,ResourceType resourceType,OperationType operationType){  if (isAdmin(userId)) {    return true;  }  Resource userOwnedResource=resourceBiz.getResourceByUserAndResourceId(userId,resourceId,resourceType);  Resource groupOwnedResource=resourceBiz.getGroupResourceByResourceId(resourceId,resourceType);  Role userRoleType=Role.NOTEXIST;  if (userOwnedResource != null) {    userRoleType=userOwnedResource.getRole();  }  Role userRoleTypeInGroup=Role.NOTEXIST;  if (groupOwnedResource != null) {    UserGroupMap userGroup=authBiz.getUserGroup(userId,groupOwnedResource.getOwnerId());    if (userGroup != null) {      userRoleTypeInGroup=userGroup.getRole();    }  }  if (userRoleType == Role.ADMINISTRATOR) {    return true;  }  boolean result=false;switch (operationType) {case GET:    if (userRoleType.getAccessLevel() < Role.GUEST.getAccessLevel()) {      result=true;    } else     if (userRoleTypeInGroup.getAccessLevel() < Role.GUEST.getAccessLevel()) {      result=true;    } else     if (resourceType == ResourceType.PROJECT) {      result=projectBiz.isAuthorited(resourceId);    } else {      throw new PermitException(userId,resourceId,resourceType,operationType);    }  break;case MODIFY:result=userRoleType.getAccessLevel() <= Role.DEVELOPER.getAccessLevel() || userRoleTypeInGroup.getAccessLevel() <= Role.DEVELOPER.getAccessLevel();break;case DELETE:result=userRoleType.getAccessLevel() <= Role.MASTER.getAccessLevel() || userRoleTypeInGroup.getAccessLevel() <= Role.MASTER.getAccessLevel();break;case SET:result=true;break;case ADDUSER:result=userRoleType.getAccessLevel() <= Role.MASTER.getAccessLevel() || userRoleTypeInGroup.getAccessLevel() <= Role.MASTER.getAccessLevel();break;case GETUSER:result=userRoleType.getAccessLevel() <= Role.MASTER.getAccessLevel() || userRoleTypeInGroup.getAccessLevel() <= Role.MASTER.getAccessLevel();break;case MODIFYUSER:result=userRoleType.getAccessLevel() <= Role.MASTER.getAccessLevel() || userRoleTypeInGroup.getAccessLevel() <= Role.MASTER.getAccessLevel();break;case DELETEUSER:result=userRoleType.getAccessLevel() <= Role.MASTER.getAccessLevel() || userRoleTypeInGroup.getAccessLevel() <= Role.MASTER.getAccessLevel();break;}if (!result) {throw new PermitException(userId,resourceId,resourceType,operationType);}return true;}  }
class C{  public UserIdNotFoundException(String message,ReasonEnum reason,Throwable cause,Object[] params){  super(message,cause,params);  bean.setReason(reason);  setMessageKey(getMessageKey() + "." + reason.toString());}  }
class C{  public void testIndex() throws IOException {  Index index=Index.createIndex(indexDir.toString(),indexName);  NNInvertedIndex invidx=(NNInvertedIndex)index.getInvertedIndex();  assertEquals("" + NN,index.getProperties().get("nearest.neighbours"));  collection.reset();  collection.nextDocument();  QLFDocument<QuantisedKeypoint> doc=collection.getDocument();  doc.reset();  String term=doc.getNextTerm();  int[] nns=doc.getCurrentNearestNeighbourTIdsKD(NN);  TIntHashSet set=new TIntHashSet(nns);  nns=set.toArray();  Arrays.sort(nns);  LexiconEntry le=index.getLexicon().getLexiconEntry(term);  TermPayloadIterablePosting<int[]> posting=invidx.getPostings((BitIndexPointer)le);  TIntObjectHashMap<int[][]> payloads=invidx.getPayloads((BitIndexPointer)le);  posting.next();  assertEquals(0,posting.getId());  assertArrayEquals(nns,posting.getPayloads()[0]);  assertArrayEquals(nns,payloads.get(posting.getId())[0]);  ApplicationSetup.setProperty("ignore.low.idf.terms","false");  ApplicationSetup.setProperty("matching.dsms",NNScoreModifier.class.getName());  QLFDocument<QuantisedKeypoint> qdoc=new QLFDocument<QuantisedKeypoint>(MemoryLocalFeatureList.read(getClass().getResourceAsStream("siftintensity/ukbench00000.jpg.loc"),QuantisedKeypoint.class),"00000",null);  QLFDocumentQuery<QuantisedKeypoint> query=new QLFDocumentQuery<QuantisedKeypoint>(qdoc);  ResultSet res=search(index,query);  for (int i=0; i < res.getScores().length; i++) {    assertEquals(i,res.getDocids()[i]);  }}  }
class C{  public Base64OutputStream(OutputStream out,int flags,boolean encode){  super(out);  this.flags=flags;  if (encode) {    coder=new Base64.Encoder(flags,null);  } else {    coder=new Base64.Decoder(flags,null);  }}  }
class C{  protected void processConfDoc(Document doc){  Element rootElement=doc.getDocumentElement();  if ("true".equalsIgnoreCase(getAttrValue(rootElement,"use-query-string")))   setUseQueryString(true);  if ("true".equalsIgnoreCase(getAttrValue(rootElement,"use-context"))) {    log.debug("use-context set to true");    setUseContext(true);  }  setDecodeUsing(getAttrValue(rootElement,"decode-using"));  setDefaultMatchType(getAttrValue(rootElement,"default-match-type"));  NodeList rootElementList=rootElement.getChildNodes();  for (int i=0; i < rootElementList.getLength(); i++) {    Node node=rootElementList.item(i);    if (node.getNodeType() == Node.ELEMENT_NODE && ((Element)node).getTagName().equals("rule")) {      Element ruleElement=(Element)node;      NormalRule rule=new NormalRule();      processRuleBasics(ruleElement,rule);      procesConditions(ruleElement,rule);      processRuns(ruleElement,rule);      Node toNode=ruleElement.getElementsByTagName("to").item(0);      rule.setTo(getNodeValue(toNode));      rule.setToType(getAttrValue(toNode,"type"));      rule.setToContextStr(getAttrValue(toNode,"context"));      rule.setToLast(getAttrValue(toNode,"last"));      rule.setQueryStringAppend(getAttrValue(toNode,"qsappend"));      if ("true".equalsIgnoreCase(getAttrValue(toNode,"encode")))       rule.setEncodeToUrl(true);      processSetAttributes(ruleElement,rule);      addRule(rule);    } else     if (node.getNodeType() == Node.ELEMENT_NODE && ((Element)node).getTagName().equals("class-rule")) {      Element ruleElement=(Element)node;      ClassRule classRule=new ClassRule();      if ("false".equalsIgnoreCase(getAttrValue(ruleElement,"enabled")))       classRule.setEnabled(false);      if ("false".equalsIgnoreCase(getAttrValue(ruleElement,"last")))       classRule.setLast(false);      classRule.setClassStr(getAttrValue(ruleElement,"class"));      classRule.setMethodStr(getAttrValue(ruleElement,"method"));      addRule(classRule);    } else     if (node.getNodeType() == Node.ELEMENT_NODE && ((Element)node).getTagName().equals("outbound-rule")) {      Element ruleElement=(Element)node;      OutboundRule rule=new OutboundRule();      processRuleBasics(ruleElement,rule);      if ("true".equalsIgnoreCase(getAttrValue(ruleElement,"encodefirst")))       rule.setEncodeFirst(true);      procesConditions(ruleElement,rule);      processRuns(ruleElement,rule);      Node toNode=ruleElement.getElementsByTagName("to").item(0);      rule.setTo(getNodeValue(toNode));      rule.setToLast(getAttrValue(toNode,"last"));      if ("false".equalsIgnoreCase(getAttrValue(toNode,"encode")))       rule.setEncodeToUrl(false);      processSetAttributes(ruleElement,rule);      addOutboundRule(rule);    } else     if (node.getNodeType() == Node.ELEMENT_NODE && ((Element)node).getTagName().equals("catch")) {      Element catchXMLElement=(Element)node;      CatchElem catchElem=new CatchElem();      catchElem.setClassStr(getAttrValue(catchXMLElement,"class"));      processRuns(catchXMLElement,catchElem);      catchElems.add(catchElem);    }  }  docProcessed=true;}  }
class C{  public static int bkResultCode(Throwable throwable){  if (throwable instanceof BKException) {    return ((BKException)throwable).getCode();  }  return BKException.Code.UnexpectedConditionException;}  }
class C{  public ParameterFlagGlobalConstraint(Parameter<? extends S> p,List<? extends ParameterConstraint<? super S>> c,Flag f,boolean flagConstraint){  param=p;  flag=f;  this.flagConstraint=flagConstraint;  cons=c;}  }
class C{  public boolean importPkcs12(){  return jrbPkcs12.isSelected();}  }
class C{  static public void showMethodWarning(String method){  showWarning(method + "() is not available with this renderer.");}  }
class C{  private static void createPattern(){  validIPV4Pattern=Pattern.compile(IPV4PATTERN,Pattern.CASE_INSENSITIVE);  validIPV6Pattern=Pattern.compile(IPV6PATTERN,Pattern.CASE_INSENSITIVE);  validEmailPattern=Pattern.compile(EMAILlPATTERN);}  }
class C{  public void onFileChanged(Path file){}  }
class C{  protected boolean comparePatterns(int[] pattern1,int[] pattern2){  int len=pattern1.length;  for (int i=0; i < len; i++) {    if (pattern1[i] != pattern2[i]) {      return false;    }  }  return true;}  }
class C{  public <T>ImmutableList<String> validate(T o,Class<?>... groups){  final Set<String> errors=Sets.newHashSet();  if (o == null) {    errors.add("request entity required");  } else {    final Set<ConstraintViolation<T>> violations=factory.getValidator().validate(o,groups);    for (    ConstraintViolation<T> v : violations) {      errors.add(format("%s %s (was %s)",v.getPropertyPath(),v.getMessage(),v.getInvalidValue()));    }  }  List<String> l=Ordering.natural().sortedCopy(errors);  return ImmutableList.copyOf(l);}  }
class C{  protected void convertHomingShotToEntityTarget(){  ArtilleryAttackAction aaa=(ArtilleryAttackAction)waa;  final Coords tc=target.getPosition();  Targetable newTarget=null;  Vector<TagInfo> v=game.getTagInfo();  Vector<TagInfo> allowed=new Vector<TagInfo>();  for (  TagInfo ti : v) {switch (ti.targetType) {case Targetable.TYPE_BLDG_TAG:case Targetable.TYPE_HEX_TAG:      allowed.add(ti);    break;case Targetable.TYPE_ENTITY:  if (ae.isEnemyOf((Entity)ti.target) || game.getOptions().booleanOption("friendly_fire")) {    allowed.add(ti);  }break;}}if (allowed.size() == 0) {toHit=new ToHitData(TargetRoll.IMPOSSIBLE,"no targets tagged this turn");return;}v=new Vector<TagInfo>();for (TagInfo ti : allowed) {newTarget=ti.target;if (!ti.missed && (newTarget != null)) {v.add(ti);}}assert (newTarget != null);if (v.size() == 0) {aaa.setTargetId(newTarget.getTargetId());aaa.setTargetType(newTarget.getTargetType());target=newTarget;toHit=new ToHitData(TargetRoll.IMPOSSIBLE,"tag missed the target");return;}allowed=new Vector<TagInfo>();for (TagInfo ti : v) {newTarget=ti.target;if (tc.distance(newTarget.getPosition()) <= 8) {allowed.add(ti);}}if (allowed.size() == 0) {aaa.setTargetId(newTarget.getTargetId());aaa.setTargetType(newTarget.getTargetType());target=newTarget;toHit=new ToHitData(TargetRoll.IMPOSSIBLE,"no tag in 8 hex radius of target hex");} else {int bestDistance=Integer.MAX_VALUE;TagInfo targetTag=allowed.firstElement();for (TagInfo ti : allowed) {int distance=tc.distance(newTarget.getPosition());if (ti.shots > targetTag.shots) {bestDistance=distance;targetTag=ti;continue;}if (ti.shots == targetTag.shots) {if (ti.priority > targetTag.priority) {  bestDistance=distance;  targetTag=ti;  continue;}if ((ti.priority == targetTag.priority) && (bestDistance > distance)) {  bestDistance=distance;  targetTag=ti;}}}if (targetTag.shots == 0) {game.clearTagInfoShots(ae,tc);}targetTag.shots--;target=targetTag.target;aaa.setTargetId(target.getTargetId());aaa.setTargetType(target.getTargetType());}}  }
class C{  public void insert(int offset,long[] values,int valOffset,int len){  if (offset == _pos) {    add(values,valOffset,len);    return;  }  ensureCapacity(_pos + len);  System.arraycopy(_data,offset,_data,offset + len,_pos - offset);  System.arraycopy(values,valOffset,_data,offset,len);  _pos+=len;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  private synchronized boolean canSubmit(long elapsedMs){  return !unsentRecords.isEmpty() && (flushRequested || elapsedMs >= lingerMs || unsentRecords.size() >= batchSize);}  }
class C{  public void testCertStore14() throws InvalidAlgorithmParameterException, NoSuchAlgorithmException {  if (!initParams()) {    return;  }  CertStore certS;  for (int i=0; i < dValid.length; i++) {    certS=CertStore.getInstance(dValid[i],dParams,dProv);    assertEquals("Incorrect type",certS.getType(),dValid[i]);    certS.getCertStoreParameters();  }}  }
class C{  public void copyIntoArray(int fromStart,Object[] to,int toStart,int len){  System.arraycopy(objs,fromStart,to,toStart,len);}  }
class C{  public void assumePreconditionsSatisfied(){  for (  InputPort inputPort : getInputPorts().getAllPorts()) {    for (    Precondition precondition : inputPort.getAllPreconditions()) {      precondition.assumeSatisfied();    }  }}  }
class C{  MethodType methodType(){  return signatureType(basicTypeSignature());}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.STATE_INTERNAL___COMMENT_1:    getComment_1().clear();  return;case UmplePackage.STATE_INTERNAL___CHANGE_TYPE_1:setChangeType_1(CHANGE_TYPE_1_EDEFAULT);return;case UmplePackage.STATE_INTERNAL___STATE_ENTITY_1:getStateEntity_1().clear();return;}super.eUnset(featureID);}  }
class C{  public static LayoutData createHorizontallyEndAlignedLayoutData(int horizontalSpan){  return createLayoutData(Alignment.END,Alignment.CENTER,true,false,horizontalSpan,1);}  }
class C{  private void checkGpsAvailability(){  LocationManager service=(LocationManager)getSystemService(LOCATION_SERVICE);  boolean enabled=service.isProviderEnabled(LocationManager.GPS_PROVIDER);  if (!enabled) {    Intent intent=new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);    startActivity(intent);  }}  }
class C{  synchronized public void saveContact(EaseUser user){  SQLiteDatabase db=dbHelper.getWritableDatabase();  ContentValues values=new ContentValues();  values.put(UserDao.COLUMN_NAME_ID,user.getUsername());  if (user.getNick() != null)   values.put(UserDao.COLUMN_NAME_NICK,user.getNick());  if (user.getAvatar() != null)   values.put(UserDao.COLUMN_NAME_AVATAR,user.getAvatar());  if (user.getUserInfo() != null)   values.put(UserDao.COLUMN_NAME_INFO,user.getUserInfo());  if (db.isOpen()) {    db.replace(UserDao.TABLE_NAME,null,values);  }}  }
class C{  public int size(){  return SIZE;}  }
class C{  public LoginException(){}  }
class C{  public PISAAlgorithm(String name,Problem problem,Variation variation,Properties properties) throws IOException {  super(problem);  this.variation=variation;  TypedProperties typedProperties=new TypedProperties(properties);  String command=Settings.getPISACommand(name);  String configuration=Settings.getPISAConfiguration(name);  int pollRate=Settings.getPISAPollRate();  if (command == null) {    throw new IllegalArgumentException("missing command");  }  filePrefix=File.createTempFile("pisa","").getCanonicalPath();  if (!properties.containsKey("seed")) {    properties.setProperty("seed",Integer.toString(PRNG.nextInt()));  }  if (configuration == null) {    PrintWriter writer=null;    configuration=new File(filePrefix + "par").getCanonicalPath();    try {      writer=new PrintWriter(new BufferedWriter(new FileWriter(configuration)));      for (      String parameter : Settings.getPISAParameters(name)) {        writer.print(parameter);        writer.print(' ');        writer.println(typedProperties.getString(parameter,Settings.getPISAParameterDefaultValue(name,parameter)));      }    }  finally {      if (writer != null) {        writer.close();      }    }  }  selector=new ProcessBuilder(ArrayUtils.addAll(Settings.parseCommand(command),configuration,filePrefix,Double.toString(pollRate / (double)1000)));  int populationSize=(int)typedProperties.getDouble("populationSize",100);  while (populationSize % variation.getArity() != 0) {    populationSize++;  }  alpha=populationSize;  mu=(int)typedProperties.getDouble("mu",alpha);  lambda=(int)typedProperties.getDouble("lambda",alpha);  state=new State(new File(filePrefix + "sta"));  solutions=new HashMap<Integer,Solution>();}  }
class C{  public LeafNode(HNode node,SplitNode parentNode,String parentBranch){  m_theNode=node;  m_parentNode=parentNode;  m_parentBranch=parentBranch;}  }
class C{  public double empiricalHSICincompleteCholesky(TetradMatrix Gy,TetradMatrix Gx,int m){  int ky=Gy.columns();  int kx=Gx.columns();  TetradMatrix H=KernelUtils.constructH(m);  TetradMatrix Gcy=H.times(Gy);  TetradMatrix Gcx=H.times(Gx);  TetradMatrix Gcyt=Gcy.transpose();  TetradMatrix A=Gcyt.times(Gcx);  TetradMatrix B=Gcy.times(A);  TetradMatrix Gcxt=Gcx.transpose();  double empHSIC=0.0;  for (int i=0; i < m; i++) {    empHSIC+=matrixProductEntry(B,Gcxt,i,i);  }  empHSIC/=Math.pow(m - 1,2);  return empHSIC;}  }
class C{  protected boolean isConnectionOk(IoSession session){  SocketAddress remoteAddress=session.getRemoteAddress();  if (remoteAddress instanceof InetSocketAddress) {    InetSocketAddress addr=(InetSocketAddress)remoteAddress;    long now=System.currentTimeMillis();    lock.lock();    try {      if (clients.containsKey(addr.getAddress().getHostAddress())) {        LOGGER.debug("This is not a new client");        Long lastConnTime=clients.get(addr.getAddress().getHostAddress());        clients.put(addr.getAddress().getHostAddress(),now);        if (now - lastConnTime < allowedInterval) {          LOGGER.warn("Session connection interval too short");          return false;        }        return true;      }      clients.put(addr.getAddress().getHostAddress(),now);    }  finally {      lock.unlock();    }    return true;  }  return false;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected boolean isPossibleToDequeueGroupFileTransfer(String chatId,Uri file,long size){  if (!isPossibleToDequeueFileTransfer(file,size)) {    return false;  }  if (!isPossibleToDequeueGroupChatMessagesAndGroupFileTransfers(chatId)) {    return false;  }  if (!mRcsSettings.getMyCapabilities().isFileTransferHttpSupported()) {    if (mLogger.isActivated()) {      mLogger.debug("Cannot transfer file to group chat as FT over HTTP capabilities are not supported for self.");    }    return false;  }  return true;}  }
class C{  public ConsultaExcepcion(String message){  this(message,null);}  }
class C{  private void readObject(ObjectInputStream oos) throws IOException, ClassNotFoundException {  iInstant=(LocalDate)oos.readObject();  DateTimeFieldType type=(DateTimeFieldType)oos.readObject();  iField=type.getField(iInstant.getChronology());}  }
class C{  public void appendList(List<T> l){  if (l != null && l.size() > 0) {    this.list.addAll(l);    this.notifyDataSetChanged();  }}  }
class C{  public void paint(Graphics2D g){  g.setColor(val > 0 ? this.getForeground() : this.getBackground());  if (val >= 0)   g.fillRect(width / 2,0,(int)(val * width / 2),height); else   g.fillRect(width / 2 + (int)(val * width / 2),0,(int)(-val * width / 2),height);  g.setColor(grey);  g.fillRect(width / 2 - 1,0,2,height);}  }
class C{  public static QueryExp between(ValueExp v1,ValueExp v2,ValueExp v3){  return new BetweenQueryExp(v1,v2,v3);}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){}  }
class C{  public String toString(){  String s="";  Enumeration names=getAttributeNames();  while (names.hasMoreElements()) {    Object key=names.nextElement();    Object value=getAttribute(key);    if (value instanceof AttributeSet) {      s=s + key + "=**AttributeSet** ";    } else {      s=s + key + "="+ value+ " ";    }  }  return s;}  }
class C{  List<CharsRef> applyAffix(char strippedWord[],int length,int affix,int prefixFlag,int recursionDepth,boolean prefix,boolean circumfix,boolean caseVariant) throws IOException {  affixReader.setPosition(8 * affix);  char flag=(char)(affixReader.readShort() & 0xffff);  affixReader.skipBytes(2);  int condition=(char)(affixReader.readShort() & 0xffff);  boolean crossProduct=(condition & 1) == 1;  condition>>>=1;  char append=(char)(affixReader.readShort() & 0xffff);  List<CharsRef> stems=new ArrayList<>();  IntsRef forms=dictionary.lookupWord(strippedWord,0,length);  if (forms != null) {    for (int i=0; i < forms.length; i+=formStep) {      dictionary.flagLookup.get(forms.ints[forms.offset + i],scratch);      char wordFlags[]=Dictionary.decodeFlags(scratch);      if (Dictionary.hasFlag(wordFlags,flag)) {        boolean chainedPrefix=dictionary.complexPrefixes && recursionDepth == 1 && prefix;        if (chainedPrefix == false && prefixFlag >= 0 && !Dictionary.hasFlag(wordFlags,(char)prefixFlag)) {          dictionary.flagLookup.get(append,scratch);          char appendFlags[]=Dictionary.decodeFlags(scratch);          if (!hasCrossCheckedFlag((char)prefixFlag,appendFlags,false)) {            continue;          }        }        if (dictionary.circumfix != -1) {          dictionary.flagLookup.get(append,scratch);          char appendFlags[]=Dictionary.decodeFlags(scratch);          boolean suffixCircumfix=Dictionary.hasFlag(appendFlags,(char)dictionary.circumfix);          if (circumfix != suffixCircumfix) {            continue;          }        }        if (caseVariant && dictionary.keepcase != -1 && Dictionary.hasFlag(wordFlags,(char)dictionary.keepcase)) {          continue;        }        if (dictionary.onlyincompound != -1 && Dictionary.hasFlag(wordFlags,(char)dictionary.onlyincompound)) {          continue;        }        stems.add(newStem(strippedWord,length,forms,i));      }    }  }  if (dictionary.circumfix != -1 && !circumfix && prefix) {    dictionary.flagLookup.get(append,scratch);    char appendFlags[]=Dictionary.decodeFlags(scratch);    circumfix=Dictionary.hasFlag(appendFlags,(char)dictionary.circumfix);  }  if (crossProduct) {    if (recursionDepth == 0) {      if (prefix) {        stems.addAll(stem(strippedWord,length,affix,flag,flag,++recursionDepth,dictionary.complexPrefixes && dictionary.twoStageAffix,true,true,circumfix,caseVariant));      } else       if (dictionary.complexPrefixes == false && dictionary.twoStageAffix) {        stems.addAll(stem(strippedWord,length,affix,flag,prefixFlag,++recursionDepth,false,true,false,circumfix,caseVariant));      }    } else     if (recursionDepth == 1) {      if (prefix && dictionary.complexPrefixes) {        stems.addAll(stem(strippedWord,length,affix,flag,flag,++recursionDepth,false,true,true,circumfix,caseVariant));      } else       if (prefix == false && dictionary.complexPrefixes == false && dictionary.twoStageAffix) {        stems.addAll(stem(strippedWord,length,affix,flag,prefixFlag,++recursionDepth,false,true,false,circumfix,caseVariant));      }    }  }  return stems;}  }
class C{  protected void computeTxFillLevel(){  if (isFullDuplex()) {    txInterruptFillLevel=tfc & TFC_TIL0_MASK;  } else {    txInterruptFillLevel=tfc & TFC_TIL_MASK;  }}  }
class C{  private static int decode4to3(byte[] source,byte[] destination,int destOffset,byte[] decodabet){  if (source[0 + 2] == EQUALS_SIGN) {    int outBuff=((decodabet[source[0]] << 24) >>> 6) | ((decodabet[source[0 + 1]] << 24) >>> 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[0 + 3] == EQUALS_SIGN) {    int outBuff=((decodabet[source[0]] << 24) >>> 6) | ((decodabet[source[0 + 1]] << 24) >>> 12) | ((decodabet[source[0 + 2]] << 24) >>> 18);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((decodabet[source[0]] << 24) >>> 6) | ((decodabet[source[0 + 1]] << 24) >>> 12) | ((decodabet[source[0 + 2]] << 24) >>> 18)| ((decodabet[source[0 + 3]] << 24) >>> 24);    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  public boolean isEmpty(){  return queue.isEmpty();}  }
class C{  public Matrix4 avg(Matrix4[] t){  final float w=1.0f / t.length;  tmpVec.set(t[0].getScale(tmpUp).scl(w));  quat.set(t[0].getRotation(quat2).exp(w));  tmpForward.set(t[0].getTranslation(tmpUp).scl(w));  for (int i=1; i < t.length; i++) {    tmpVec.add(t[i].getScale(tmpUp).scl(w));    quat.mul(t[i].getRotation(quat2).exp(w));    tmpForward.add(t[i].getTranslation(tmpUp).scl(w));  }  quat.nor();  setToScaling(tmpVec);  rotate(quat);  setTranslation(tmpForward);  return this;}  }
class C{  private String genBeanDescriptor(DocBeanInfo dbi){  String code="";  int beanflags=dbi.beanflags;  if ((beanflags & DocBeanInfo.EXPERT) != 0)   code+=" sun.swing.BeanInfoUtils.EXPERT, Boolean.TRUE,\n";  if ((beanflags & DocBeanInfo.HIDDEN) != 0)   code+="                    sun.swing.BeanInfoUtils.HIDDEN, Boolean.TRUE,\n";  if ((beanflags & DocBeanInfo.PREFERRED) != 0)   code+="                 sun.swing.BeanInfoUtils.PREFERRED, Boolean.TRUE,\n";  if (!(dbi.customizerclass.equals("null")))   code+="            sun.swing.BeanInfoUtils.CUSTOMIZERCLASS, " + dbi.customizerclass + ".class,\n";  if (dbi.attribs != null) {    code+=genAttributes(dbi.attribs);  }  return code;}  }
class C{  public PcdRunner(DataWrapper dataWrapper,Parameters params){  super(dataWrapper,params,null);}  }
class C{  @Override public boolean isFactoryForType(Object type){  return supportedTypes.contains(type) || super.isFactoryForType(type);}  }
class C{  public static void unbox(MethodVisitor mv,Class type){  if (type.isPrimitive() && type != Void.TYPE) {    String returnString="(Ljava/lang/Object;)" + BytecodeHelper.getTypeDescription(type);    mv.visitMethodInsn(INVOKESTATIC,DTT_CLASSNAME,type.getName() + "Unbox",returnString,false);  }}  }
class C{  @Override public String toString(){  return "CUmodule[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + "]";}  }
class C{  public static byte[] readData(final InputStream input) throws IOException {  final byte[] inputBuffer=new byte[BUFFER_LENGTH];  final ByteArrayOutputStream byteOutput=new ByteArrayOutputStream(BUFFER_LENGTH);  int bytesRead;  while ((bytesRead=input.read(inputBuffer)) != -1) {    byteOutput.write(inputBuffer,0,bytesRead);  }  final byte[] r=byteOutput.toByteArray();  byteOutput.close();  return r;}  }
class C{  static <T>ListIterator<T> cast(Iterator<T> iterator){  return (ListIterator<T>)iterator;}  }
class C{  public void stop() throws Exception {  ldapServer.stop();  directoryService.shutdown();}  }
class C{  public IterationObject(IterationObject parent){  this.id=parent.getId();  this.created=parent.getCreated();  this.status=parent.getStatus();  this.startTime=parent.getStartTime();  this.endTime=parent.getEndTime();  this.creatorId=parent.getCreatorId();  this.projectId=parent.getProjectId();  this.companyId=parent.getCompanyId();  this.creatorName=parent.getCreatorName();  this.creatorAvatar=parent.getCreatorAvatar();  this.updated=parent.getUpdated();  this.deleted=parent.getDeleted();}  }
class C{  @Override protected void onNotice(String sourceNick,String sourceLogin,String sourceHostname,String target,String notice){  Conversation conversation;  if (service.getSettings().showNoticeInServerWindow()) {    conversation=server.getConversation(ServerInfo.DEFAULT_NAME);  } else {    conversation=server.getConversation(server.getSelectedConversation());    if (conversation == null) {      conversation=server.getConversation(ServerInfo.DEFAULT_NAME);    }  }  Message message=new Message("-" + sourceNick + "- "+ notice);  message.setIcon(R.drawable.info);  conversation.addMessage(message);  Intent intent=Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),conversation.getName());  service.sendBroadcast(intent);}  }
class C{  public static void studentLockerChanges(String[] lockers){  int start=0;  for (int s=1; s <= lockers.length; s++) {    for (int l=0; l < lockers.length; l+=s) {      if (isOpen(lockers[l]))       lockers[l]="CLOSED"; else       lockers[l]="OPEN";    }    start++;  }}  }
class C{  private static COperandTree generateTree(final OperandTree rawTree,final SQLProvider provider,final INaviModule module){  final ArrayList<COperandTreeNode> realNodes=new ArrayList<COperandTreeNode>();  final HashMap<COperandTreeNode,OperandTreeNode> realToRawMapping=new HashMap<COperandTreeNode,OperandTreeNode>();  final HashMap<Integer,COperandTreeNode> idToRealMapping=new HashMap<Integer,COperandTreeNode>();  COperandTreeNode root=null;  final TypeManager typeManager=module.getTypeManager();  final TypeInstanceContainer instanceContainer=module.getContent().getTypeInstanceContainer();  for (  final OperandTreeNode rawNode : rawTree.getNodes()) {    final COperandTreeNode node=new COperandTreeNode(rawNode.getId(),rawNode.getType(),rawNode.getValue(),rawNode.getReplacement(),rawNode.getReferences(),provider,typeManager,instanceContainer);    if (rawNode.getTypeSubstitution() != null) {      typeManager.initializeTypeSubstitution(node,rawNode.getTypeSubstitution());    }    if (rawNode.getTypeInstanceId() != null) {      instanceContainer.initializeTypeInstanceReference(rawNode.getAddress(),rawNode.getPosition(),rawNode.getId(),node);    }    realToRawMapping.put(node,rawNode);    idToRealMapping.put(rawNode.getId(),node);    if (rawNode.getParentId() == null) {      root=node;    }    realNodes.add(node);  }  for (  final COperandTreeNode realNode : realNodes) {    final OperandTreeNode rawNode=realToRawMapping.get(realNode);    final Integer parentId=rawNode.getParentId();    if (parentId == null) {      continue;    }    final COperandTreeNode realParent=idToRealMapping.get(parentId);    COperandTreeNode.link(realParent,realNode);  }  return new COperandTree(root,provider,typeManager,instanceContainer);}  }
class C{  public void insert(int offset,double[] values){  insert(offset,values,0,values.length);}  }
class C{  public static EntropyCalculatorDiscrete newInstance(int blocksize,int base){  return new BlockEntropyCalculatorDiscrete(blocksize,base);}  }
class C{  public CRemoveTagFromAllNodesAction(final JFrame parent,final ZyGraph graph,final CTag tag){  super("Remove Tag from all Nodes");  Preconditions.checkNotNull(parent,"IE01254: Parent argument can not be null");  Preconditions.checkNotNull(graph,"IE01255: Graph argument can not be null");  Preconditions.checkNotNull(tag,"IE01787: Tag can't be null");  m_parent=parent;  m_graph=graph;  m_tag=tag;}  }
class C{  protected void clearError(){synchronized (lock) {    ioError=false;  }}  }
class C{  public SecureShellAgent(final String host,final int port,final String user,final Path privateKeyFileAbsolutePath) throws AgentException {  try {    session=getSession(host,port,user);    jsch.addIdentity(privateKeyFileAbsolutePath.toString());  } catch (  Exception e) {    String errorMessage=format("Can't connect to host '%s@%s:%s' by using private key '%s'.",user,host,port,privateKeyFileAbsolutePath);    throw create(errorMessage,e);  }}  }
class C{  public LZ3(){  super(30,2,21,23,1);}  }
class C{  public void testTypical(){  Instances result=useFilter();  assertEquals(m_Instances.numAttributes(),result.numAttributes());  assertEquals(m_Instances.numInstances(),result.numInstances());  Attribute mergedAtt=result.attribute(4);  assertTrue("Attribute 5 has all values merged in result",mergedAtt.value(0).equals("a_or_b_or_c_or_d"));}  }
class C{  @SuppressWarnings("unchecked") private void processMethods(){  List<MethodNode> methodNodes=cn.methods;  for (  MethodNode mn : methodNodes) {    if ((mn.access & Opcodes.ACC_NATIVE) == Opcodes.ACC_NATIVE)     continue;    if (DescriptorMapping.getInstance().isTransformedMethod(className,mn.name,mn.desc)) {      logger.info("Transforming signature of method " + mn.name + mn.desc);      transformMethodSignature(mn);      logger.info("Transformed signature to " + mn.name + mn.desc);    }    transformMethod(mn);  }}  }
class C{  public static Comparator<Long> longComparator(){  return LONG_COMPARATOR;}  }
class C{  public void deinstall(JTextComponent c){  if (!(c instanceof RTextArea))   throw new IllegalArgumentException("c must be instance of RTextArea");  super.deinstall(c);}  }
class C{  private int readNextWithEOF(boolean ignoreComments) throws CoreException {  int curr=0;  do {    try {      curr=fScanner.getNextToken();    } catch (    InvalidInputException e) {      throw new CoreException(createError(LEXICAL_ERROR,e.getMessage(),e));    }  } while (ignoreComments && isComment(curr));  return curr;}  }
class C{  private static UTF8StreamWriter utf8StreamWriter(){  SoftReference<UTF8StreamWriter> ref=utf8StreamWriter.get();  UTF8StreamWriter writer=(ref == null) ? null : ref.get();  if (writer == null) {    writer=new UTF8StreamWriter(1024 * 4);    utf8StreamWriter.set(new SoftReference<>(writer));  }  writer.reset();  return writer;}  }
class C{  public SslToServiceAuth(){  requestFileName="getstate.query";  responseFile="getstate.answer";}  }
class C{  Entry kill(){  Entry entry;  for (int i=entries.size() - 1; i >= 0; i--) {    entry=entries.get(i);    if (!entry.dead) {      entry.dead=true;      return entry;    }  }  throw new IllegalStateException("There is no entry to kill");}  }
class C{  public GeneratorConfigurationItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public void removeComponent(Component component){  components.removeValue(component,true);}  }
class C{  public void gcspyGatherData(int event,TreadmillDriver losDriver){  ((LargeObjectSpace)space).getTreadmill().gcspyGatherData(event,losDriver);}  }
class C{  @Override public boolean equals(Object o){  if (o instanceof DateTime) {    return this.value == ((DateTime)o).value;  } else   if (o instanceof Date) {    return this.value == ((Date)o).getTime();  } else {    return false;  }}  }
class C{  public void commit(boolean onSave){  String expression=this.expressionEvalInput.getDocument().get();  getModel().unsavedSetEvalExpression(expression);  super.commit(onSave);}  }
class C{  public static BufferedImage createCompatibleImage(BufferedImage image,int width,int height){  return getGraphicsConfiguration().createCompatibleImage(width,height,image.getTransparency());}  }
class C{  public void endDocument() throws SAXException {  if (documentHandler != null)   documentHandler.endDocument();}  }
class C{  private void dumpNPC(PreparedStatement stmt,SpeakerNPC npc) throws SQLException {  stmt.setString(1,npc.getName());  stmt.setString(2,npc.getTitle());  stmt.setString(3,npc.get("class"));  stmt.setString(4,getOutfit(npc));  stmt.setInt(5,npc.getHP());  stmt.setInt(6,npc.getBaseHP());  stmt.setString(7,npc.getZone().getName());  stmt.setInt(8,npc.getX());  stmt.setInt(9,npc.getY());  stmt.setInt(10,npc.getLevel());  stmt.setString(11,npc.getDescription());  stmt.setString(12,npc.getJob());  stmt.setString(13,npc.getAlternativeImage());  stmt.addBatch();}  }
class C{  void release(){  imageLoader.cancelPendingRequests();  loading=new boolean[noxItems.size()];}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  journalWriter.flush();}  }
class C{  public static void beforeClass(){  Assert.assertTrue("Given spec file does not exist: " + specA,new File(specA).exists());  RCPTestSetupHelper.beforeClass();}  }
class C{  public TungstenProperties loadPasswordsAsTungstenProperties() throws ServerRuntimeException {  this.passwordsProperties=SecurityHelper.loadPasswordsFromAuthenticationInfo(this.authenticationInfo);  return passwordsProperties;}  }
class C{  public Vector3D addU(Vector3D a){  x+=a.x;  y+=a.y;  z+=a.z;  return (this);}  }
class C{  static int applyMaskPenaltyRule4(ByteMatrix matrix){  int numDarkCells=0;  byte[][] array=matrix.getArray();  int width=matrix.getWidth();  int height=matrix.getHeight();  for (int y=0; y < height; y++) {    byte[] arrayY=array[y];    for (int x=0; x < width; x++) {      if (arrayY[x] == 1) {        numDarkCells++;      }    }  }  int numTotalCells=matrix.getHeight() * matrix.getWidth();  int fivePercentVariances=Math.abs(numDarkCells * 2 - numTotalCells) * 10 / numTotalCells;  return fivePercentVariances * N4;}  }
class C{  public synchronized Object recover() throws IOException {  if (Debug)   System.err.println("log.debug: recover()");  if (version == 0)   return null;  Object snapshot;  String fname=versionName(snapshotPrefix);  File snapshotFile=new File(fname);  InputStream in=new BufferedInputStream(new FileInputStream(snapshotFile));  if (Debug)   System.err.println("log.debug: recovering from " + fname);  try {    try {      snapshot=handler.recover(in);    } catch (    IOException e) {      throw e;    }catch (    Exception e) {      if (Debug)       System.err.println("log.debug: recovery failed: " + e);      throw new IOException("log recover failed with " + "exception: " + e);    }    snapshotBytes=snapshotFile.length();  }  finally {    in.close();  }  return recoverUpdates(snapshot);}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == ReferencingElement_IM.class) {switch (baseOperationID) {case ImPackage.REFERENCING_ELEMENT_IM___GET_ORIGINAL_TARGET_OF_REWIRED_TARGET:      return ImPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION_IM___GET_ORIGINAL_TARGET_OF_REWIRED_TARGET;default :    return -1;}}if (baseClass == ReferencingElementExpression_IM.class) {switch (baseOperationID) {default :  return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public static boolean isLocationOld(Location location){  return !LocationUtils.isValidLocation(location) || (System.currentTimeMillis() - location.getTime() > MAX_LOCATION_AGE_MS);}  }
class C{  public static float bytesToFloat(byte[] arr){  return Float.intBitsToFloat(bytesToInt(arr));}  }
class C{  protected static void createEntry(String name) throws CacheException {  GenericListener l=getListener(name);  createEntry(name,0,ExpirationAction.INVALIDATE,l);}  }
class C{  public static OMEllipse read(DataInputStream dis) throws IOException {  return read(dis,null);}  }
class C{  public static String hash(File fle){  FileInputStream fis;  try {    fis=new FileInputStream(fle);  } catch (  FileNotFoundException e) {    Log.error("Couldn't hash %s: File not found.",fle.getName());    e.printStackTrace();    return null;  }  try {    MessageDigest sha=MessageDigest.getInstance("SHA-1");    sha.reset();    int read=0;    byte buffer[]=new byte[65536];    while ((read=fis.read(buffer)) > 0)     sha.update(buffer,0,read);    byte digest[]=sha.digest();    String hash="";    for (int i=0; i < digest.length; i++) {      int b=digest[i] & 0xFF;      int left=b >>> 4;      int right=b & 0x0F;      hash+=HEX.charAt(left);      hash+=HEX.charAt(right);    }    return hash;  } catch (  IOException e) {    Log.error("IOException while hashing file %s",fle.getName());    e.printStackTrace();    return null;  }catch (  NoSuchAlgorithmException e) {    Log.error("Holy crap this shouldn't happen. SHA-1 not found!!!!");    e.printStackTrace();    return null;  } finally {    close(fis);  }}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return true;}  }
class C{  public static boolean deleteDirectorySubdirectories(String rootDirectory){  if ((rootDirectory == null)) {    return false;  }  boolean didSuccessfullyDeleteAllDirectories=true;  try {    List<File> files=getListOfFilesInADirectory(rootDirectory);    for (    File file : files) {      if (file.isDirectory()) {        boolean deleteSuccess=deleteDirectoryAndContents(file);        if (!deleteSuccess) {          logger.debug("Warning - failed to delete " + file.getAbsolutePath());          didSuccessfullyDeleteAllDirectories=false;        }      }    }  } catch (  Exception e) {    logger.debug(e.toString() + System.lineSeparator() + StackTrace.getStringFromStackTrace(e));    return false;  }  return didSuccessfullyDeleteAllDirectories;}  }
class C{  public ZyGraph(final INaviView view,final LinkedHashMap<Node,NaviNode> nodeMap,final LinkedHashMap<Edge,NaviEdge> edgeMap,final ZyGraphViewSettings settings,final ZyGraph2DView g2dview){  super(g2dview,nodeMap,edgeMap,settings);  m_rawView=Preconditions.checkNotNull(view,"IE00869: Argument view can't be null");  m_settings=Preconditions.checkNotNull(settings,"IE00870: Settings argument can't be null");  m_synchronizer=new CViewGraphSynchronizer(this,new GraphInternals(),getMappings());  hideInvisibleElements();  CLayoutFunctions.updateBackground(this);  CEdgeDrawingFunctions.initializeEdgeDrawingMode(this);  initializeListeners();  initializeProximityBrowser();  if ((m_rawView.getType() == ViewType.Native) && (getGraph().nodeCount() >= m_settings.getProximitySettings().getProximityBrowsingActivationThreshold())) {    m_settings.getProximitySettings().setProximityBrowsing(true);  }  updateMultipleEdgeState();}  }
class C{  public java.lang.String toString(){  return null;}  }
class C{  public void addSwipeOpenListener(ActionListener l){  dispatcher.addListener(l);}  }
class C{  @Override public boolean isLabelVisible(){  return (false);}  }
class C{  public static String rename(String desc,Map map){  if (map == null)   return desc;  StringBuffer newdesc=new StringBuffer();  int head=0;  int i=0;  for (; ; ) {    int j=desc.indexOf('L',i);    if (j < 0)     break;    int k=desc.indexOf(';',j);    if (k < 0)     break;    i=k + 1;    String name=desc.substring(j + 1,k);    String name2=(String)map.get(name);    if (name2 != null) {      newdesc.append(desc.substring(head,j));      newdesc.append('L');      newdesc.append(name2);      newdesc.append(';');      head=i;    }  }  if (head == 0)   return desc; else {    int len=desc.length();    if (head < len)     newdesc.append(desc.substring(head,len));    return newdesc.toString();  }}  }
class C{  public void mousePress(MouseEvent e){}  }
class C{  @Override public void buildClone(Object original,CacheKey cacheKey,Object clone,Integer refreshCascade,AbstractSession cloningSession){  Object attributeValue=getAttributeValueFromObject(original);  Object aggregateClone=buildClonePart(original,clone,cacheKey,attributeValue,refreshCascade,cloningSession);  if (aggregateClone != null && cloningSession.isUnitOfWork()) {    ClassDescriptor descriptor=getReferenceDescriptor(aggregateClone,cloningSession);    descriptor.getObjectChangePolicy().setAggregateChangeListener(clone,aggregateClone,(UnitOfWorkImpl)cloningSession,descriptor,getAttributeName());  }  setAttributeValueInObject(clone,aggregateClone);}  }
class C{  public QRDecomposition(Matrix A){  QR=A.getArrayCopy();  m=A.getRowDimension();  n=A.getColumnDimension();  Rdiag=new double[n];  for (int k=0; k < n; k++) {    double nrm=0;    for (int i=k; i < m; i++) {      nrm=Maths.hypot(nrm,QR[i][k]);    }    if (nrm != 0.0) {      if (QR[k][k] < 0) {        nrm=-nrm;      }      for (int i=k; i < m; i++) {        QR[i][k]/=nrm;      }      QR[k][k]+=1.0;      for (int j=k + 1; j < n; j++) {        double s=0.0;        for (int i=k; i < m; i++) {          s+=QR[i][k] * QR[i][j];        }        s=-s / QR[k][k];        for (int i=k; i < m; i++) {          QR[i][j]+=s * QR[i][k];        }      }    }    Rdiag[k]=-nrm;  }}  }
class C{  public void create(View view){  ForumPostConfig config=new ForumPostConfig();  saveProperties(config);  config.forum=MainActivity.instance.id;  CheckBox checkbox=(CheckBox)findViewById(R.id.replyToParentCheckBox);  if (checkbox.isChecked() && MainActivity.post.parent != null && MainActivity.post.parent.length() != 0) {    config.parent=MainActivity.post.parent;  } else {    config.parent=MainActivity.post.id;  }  HttpAction action=new HttpCreateReplyAction(this,config);  action.execute();}  }
class C{  public void testGetColumns() throws Exception {  try {    this.stmt.execute("CREATE TABLE IF NOT EXISTS longblob_regress(field_1 longblob)");    DatabaseMetaData dbmd=this.conn.getMetaData();    ResultSet dbmdRs=null;    try {      dbmdRs=dbmd.getColumns("","","longblob_regress","%");      while (dbmdRs.next()) {        dbmdRs.getInt(7);      }    }  finally {      if (dbmdRs != null) {        try {          dbmdRs.close();        } catch (        SQLException ex) {        }      }    }  }  finally {    this.stmt.execute("DROP TABLE IF EXISTS longblob_regress");  }}  }
class C{  public static long hash64(final String text){  final byte[] bytes=text.getBytes();  return hash64(bytes,bytes.length);}  }
class C{  public int generateDirectSurrogateKey(String memberStr,String format){  if (null == format) {    return generateDirectSurrogateKeyForNonTimestampType(memberStr);  } else {    SimpleDateFormat timeParser=new SimpleDateFormat(format);    timeParser.setLenient(false);    if (null == memberStr || memberStr.trim().isEmpty() || memberStr.equals(CarbonCommonConstants.MEMBER_DEFAULT_VAL)) {      return 1;    }    return getDirectSurrogateForMember(memberStr,timeParser);  }}  }
class C{  public void publish(String message,Level level){  try {    publish(new LogRecord(level,message));  } catch (  BadLocationException e) {    throw new RuntimeException("Error writing a log-like message.",e);  }}  }
class C{  public static int previousSetBit(long[] v,int start){  if (start == -1) {    return -1;  }  int wordindex=start >>> LONG_LOG2_SIZE;  if (wordindex >= v.length) {    return magnitude(v) - 1;  }  final int off=Long.SIZE - 1 - (start & LONG_LOG2_MASK);  long cur=v[wordindex] & (LONG_ALL_BITS >>> off);  for (; ; ) {    if (cur != 0) {      return (wordindex + 1) * Long.SIZE - 1 - Long.numberOfLeadingZeros(cur);    }    if (wordindex == 0) {      return -1;    }    wordindex--;    cur=v[wordindex];  }}  }
class C{  public ClientConfig withTasksExecutionTimeoutSeconds(int tasksExecutionTimeoutSeconds){  this.setTasksExecutionTimeoutSeconds(tasksExecutionTimeoutSeconds);  return this;}  }
class C{  public void shutdownOutput() throws IOException {  implCreateIfNeeded();  impl.shutdownOutput();}  }
class C{  public static JSONArray rowToJSONArray(JSONTokener x) throws JSONException {  JSONArray ja=new JSONArray();  for (; ; ) {    String value=getValue(x);    char c=x.next();    if (value == null || (ja.length() == 0 && value.length() == 0 && c != ',')) {      return null;    }    ja.put(value);    for (; ; ) {      if (c == ',') {        break;      }      if (c != ' ') {        if (c == '\n' || c == '\r' || c == 0) {          return ja;        }        throw x.syntaxError("Bad character '" + c + "' ("+ (int)c+ ").");      }      c=x.next();    }  }}  }
class C{  private String removeDuplicateWords(String phrase){  String[] words=phrase.split(" ");  String out="";  boolean add=true;  for (  String s : words) {    if (add) {      out+=s + " ";      add=false;    } else {      add=true;    }  }  if (words.length % 2 == 0)   return out + words[words.length - 1];  return out;}  }
class C{  private void removeMovie(MovieSet movieSet,Movie movie){synchronized (root) {    MovieSetTreeNode parent=(MovieSetTreeNode)nodeMap.get(movieSet);    MovieTreeNode child=(MovieTreeNode)nodeMap.get(movie);    if (parent != null && child != null && parent.isNodeChild(child)) {      int index=parent.getIndex(child);      parent.remove(child);      nodeMap.remove(movie);      TreeModelEvent event=new TreeModelEvent(this,parent.getPath(),new int[]{index},new Object[]{child});      for (      TreeModelListener listener : listeners) {        listener.treeNodesRemoved(event);      }    }  }}  }
class C{  public Instrumenter attachAllMetricCollectors(){  attachHypervolumeCollector();  attachGenerationalDistanceCollector();  attachInvertedGenerationalDistanceCollector();  attachSpacingCollector();  attachAdditiveEpsilonIndicatorCollector();  attachContributionCollector();  return this;}  }
class C{  public static CommandResult execCommand(String[] commands,boolean isRoot){  return execCommand(commands,isRoot,true);}  }
class C{  public boolean doMousePressed(MouseEvent event,Positionable pos){  if (_drawFrame instanceof DrawPolygon) {    DrawPolygon f=(DrawPolygon)_drawFrame;    f.anchorPoint(event.getX(),event.getY());  }  if (pos instanceof PositionableShape && _editor.isEditable()) {    if (!pos.equals(_currentSelection)) {      if (_currentSelection != null) {        _currentSelection.removeHandles();      }      _currentSelection=(PositionableShape)pos;      _currentSelection.drawHandles();    }    return true;  }  if (_currentSelection != null) {    _currentSelection.removeHandles();    _currentSelection=null;  }  return false;}  }
class C{  public void ajaxFired(AjaxBehaviorEvent event) throws AbortProcessingException {  setFireState(event.getComponent().getClientId() + "-" + vip);}  }
class C{  public CDumpMemoryRangeAction(final JFrame parent,final IDebugger debugger,final IDataProvider dataProvider,final IAddress start,final int size){  super("Dump whole section");  m_parent=Preconditions.checkNotNull(parent,"IE01412: Parent argument can not be null");  m_debugger=Preconditions.checkNotNull(debugger,"IE01413: Debugger argument can not be null");  m_dataProvider=Preconditions.checkNotNull(dataProvider,"IE01414: Data provider argument can not be null");  m_start=Preconditions.checkNotNull(start,"IE01415: Start argument can not be null");  m_size=size;}  }
class C{  private void constructModel(ModelBase modelBase,double modelScale,boolean renderDoubleFace){  this.modelBoxList.clear();  double modelWidth=modelBase.textureWidth;  double modelHeight=modelBase.textureHeight;  for (  ModelRenderer modelRenderer : (List<ModelRenderer>)modelBase.boxList) {    if (modelRenderer.childModels != null) {      for (      ModelRenderer childModelRenderer : (List<ModelRenderer>)modelRenderer.childModels) {        this.childOfMap.put(childModelRenderer,modelRenderer);      }    }  }  for (  ModelRenderer modelRenderer : (List<ModelRenderer>)modelBase.boxList) {    this.parentMap.put(modelRenderer,this.getParentList(new ArrayList<ModelRenderer>(),modelRenderer));  }  for (  ModelRenderer modelRenderer : (List<ModelRenderer>)modelBase.boxList) {    for (    ModelBox modelBox : (List<ModelBox>)modelRenderer.cubeList) {      Vec3UV o=this.getBoxCorner(false,false,false,modelBox,modelRenderer,modelScale,ROTATION_MATRIX);      Vec3UV ox=this.getBoxCorner(true,false,false,modelBox,modelRenderer,modelScale,ROTATION_MATRIX);      Vec3UV oy=this.getBoxCorner(false,true,false,modelBox,modelRenderer,modelScale,ROTATION_MATRIX);      Vec3UV oz=this.getBoxCorner(false,false,true,modelBox,modelRenderer,modelScale,ROTATION_MATRIX);      Vec3UV oxy=this.getBoxCorner(true,true,false,modelBox,modelRenderer,modelScale,ROTATION_MATRIX);      Vec3UV oyz=this.getBoxCorner(false,true,true,modelBox,modelRenderer,modelScale,ROTATION_MATRIX);      Vec3UV oxz=this.getBoxCorner(true,false,true,modelBox,modelRenderer,modelScale,ROTATION_MATRIX);      Vec3UV oxyz=this.getBoxCorner(true,true,true,modelBox,modelRenderer,modelScale,ROTATION_MATRIX);      if (f_mbQuadList == null) {        f_mbQuadList=ReflectionHelper.findField(ModelBox.class,"quadList","field_78254_i");      }      TexturedQuad[] mbQuadList=null;      try {        mbQuadList=(TexturedQuad[])f_mbQuadList.get(modelBox);      } catch (      Exception ex) {        ex.printStackTrace();      }      PositionTextureVertex[] mbVertices1=mbQuadList[0].vertexPositions;      PositionTextureVertex[] mbVertices2=mbQuadList[1].vertexPositions;      PositionTextureVertex[] mbVertices3=mbQuadList[2].vertexPositions;      PositionTextureVertex[] mbVertices4=mbQuadList[3].vertexPositions;      PositionTextureVertex[] mbVertices5=mbQuadList[4].vertexPositions;      PositionTextureVertex[] mbVertices6=mbQuadList[5].vertexPositions;      ArrayList<Quad> quadList=new ArrayList<Quad>(12);      Quad face1=new Quad(new Vec3UV(o,mbVertices5[0].texturePositionX,mbVertices5[0].texturePositionY,modelWidth,modelHeight),new Vec3UV(oy,mbVertices5[3].texturePositionX,mbVertices5[3].texturePositionY,modelWidth,modelHeight),new Vec3UV(oxy,mbVertices5[2].texturePositionX,mbVertices5[2].texturePositionY,modelWidth,modelHeight),new Vec3UV(ox,mbVertices5[1].texturePositionX,mbVertices5[1].texturePositionY,modelWidth,modelHeight));      quadList.add(face1);      if (renderDoubleFace) {        Quad face1d=new Quad(new Vec3UV(o,mbVertices5[0].texturePositionX,mbVertices5[0].texturePositionY,modelWidth,modelHeight),new Vec3UV(ox,mbVertices5[1].texturePositionX,mbVertices5[1].texturePositionY,modelWidth,modelHeight),new Vec3UV(oxy,mbVertices5[2].texturePositionX,mbVertices5[2].texturePositionY,modelWidth,modelHeight),new Vec3UV(oy,mbVertices5[3].texturePositionX,mbVertices5[3].texturePositionY,modelWidth,modelHeight));        quadList.add(face1d);      }      Quad face2=new Quad(new Vec3UV(oz,mbVertices6[1].texturePositionX,mbVertices6[1].texturePositionY,modelWidth,modelHeight),new Vec3UV(oxz,mbVertices6[0].texturePositionX,mbVertices6[0].texturePositionY,modelWidth,modelHeight),new Vec3UV(oxyz,mbVertices6[3].texturePositionX,mbVertices6[3].texturePositionY,modelWidth,modelHeight),new Vec3UV(oyz,mbVertices6[2].texturePositionX,mbVertices6[2].texturePositionY,modelWidth,modelHeight));      quadList.add(face2);      if (renderDoubleFace) {        Quad face2d=new Quad(new Vec3UV(oz,mbVertices6[1].texturePositionX,mbVertices6[1].texturePositionY,modelWidth,modelHeight),new Vec3UV(oyz,mbVertices6[2].texturePositionX,mbVertices6[2].texturePositionY,modelWidth,modelHeight),new Vec3UV(oxyz,mbVertices6[3].texturePositionX,mbVertices6[3].texturePositionY,modelWidth,modelHeight),new Vec3UV(oxz,mbVertices6[0].texturePositionX,mbVertices6[0].texturePositionY,modelWidth,modelHeight));        quadList.add(face2d);      }      Quad face3=new Quad(new Vec3UV(oy,mbVertices4[1].texturePositionX,mbVertices4[1].texturePositionY,modelWidth,modelHeight),new Vec3UV(oyz,mbVertices4[2].texturePositionX,mbVertices4[2].texturePositionY,modelWidth,modelHeight),new Vec3UV(oxyz,mbVertices4[3].texturePositionX,mbVertices4[3].texturePositionY,modelWidth,modelHeight),new Vec3UV(oxy,mbVertices4[0].texturePositionX,mbVertices4[0].texturePositionY,modelWidth,modelHeight));      quadList.add(face3);      if (renderDoubleFace) {        Quad face3d=new Quad(new Vec3UV(oy,mbVertices4[1].texturePositionX,mbVertices4[1].texturePositionY,modelWidth,modelHeight),new Vec3UV(oxy,mbVertices4[0].texturePositionX,mbVertices4[0].texturePositionY,modelWidth,modelHeight),new Vec3UV(oxyz,mbVertices4[3].texturePositionX,mbVertices4[3].texturePositionY,modelWidth,modelHeight),new Vec3UV(oyz,mbVertices4[2].texturePositionX,mbVertices4[2].texturePositionY,modelWidth,modelHeight));        quadList.add(face3d);      }      Quad face4=new Quad(new Vec3UV(o,mbVertices3[2].texturePositionX,mbVertices3[2].texturePositionY,modelWidth,modelHeight),new Vec3UV(ox,mbVertices3[3].texturePositionX,mbVertices3[3].texturePositionY,modelWidth,modelHeight),new Vec3UV(oxz,mbVertices3[0].texturePositionX,mbVertices3[0].texturePositionY,modelWidth,modelHeight),new Vec3UV(oz,mbVertices3[1].texturePositionX,mbVertices3[1].texturePositionY,modelWidth,modelHeight));      quadList.add(face4);      if (renderDoubleFace) {        Quad face4d=new Quad(new Vec3UV(o,mbVertices3[2].texturePositionX,mbVertices3[2].texturePositionY,modelWidth,modelHeight),new Vec3UV(oz,mbVertices3[1].texturePositionX,mbVertices3[1].texturePositionY,modelWidth,modelHeight),new Vec3UV(oxz,mbVertices3[0].texturePositionX,mbVertices3[0].texturePositionY,modelWidth,modelHeight),new Vec3UV(ox,mbVertices3[3].texturePositionX,mbVertices3[3].texturePositionY,modelWidth,modelHeight));        quadList.add(face4d);      }      Quad face5=new Quad(new Vec3UV(ox,mbVertices1[1].texturePositionX,mbVertices1[1].texturePositionY,modelWidth,modelHeight),new Vec3UV(oxy,mbVertices1[2].texturePositionX,mbVertices1[2].texturePositionY,modelWidth,modelHeight),new Vec3UV(oxyz,mbVertices1[3].texturePositionX,mbVertices1[3].texturePositionY,modelWidth,modelHeight),new Vec3UV(oxz,mbVertices1[0].texturePositionX,mbVertices1[0].texturePositionY,modelWidth,modelHeight));      quadList.add(face5);      if (renderDoubleFace) {        Quad face5d=new Quad(new Vec3UV(ox,mbVertices1[1].texturePositionX,mbVertices1[1].texturePositionY,modelWidth,modelHeight),new Vec3UV(oxz,mbVertices1[0].texturePositionX,mbVertices1[0].texturePositionY,modelWidth,modelHeight),new Vec3UV(oxyz,mbVertices1[3].texturePositionX,mbVertices1[3].texturePositionY,modelWidth,modelHeight),new Vec3UV(oxy,mbVertices1[2].texturePositionX,mbVertices1[2].texturePositionY,modelWidth,modelHeight));        quadList.add(face5d);      }      Quad face6=new Quad(new Vec3UV(o,mbVertices2[0].texturePositionX,mbVertices2[0].texturePositionY,modelWidth,modelHeight),new Vec3UV(oz,mbVertices2[1].texturePositionX,mbVertices2[1].texturePositionY,modelWidth,modelHeight),new Vec3UV(oyz,mbVertices2[2].texturePositionX,mbVertices2[2].texturePositionY,modelWidth,modelHeight),new Vec3UV(oy,mbVertices2[3].texturePositionX,mbVertices2[3].texturePositionY,modelWidth,modelHeight));      quadList.add(face6);      if (renderDoubleFace) {        Quad face6d=new Quad(new Vec3UV(o,mbVertices2[0].texturePositionX,mbVertices2[0].texturePositionY,modelWidth,modelHeight),new Vec3UV(oy,mbVertices2[3].texturePositionX,mbVertices2[3].texturePositionY,modelWidth,modelHeight),new Vec3UV(oyz,mbVertices2[2].texturePositionX,mbVertices2[2].texturePositionY,modelWidth,modelHeight),new Vec3UV(oz,mbVertices2[1].texturePositionX,mbVertices2[1].texturePositionY,modelWidth,modelHeight));        quadList.add(face6d);      }      Quad[] quads=quadList.toArray(new Quad[0]);      this.addBox(new Box(quads,modelRenderer,modelBox));    }  }  Map<ModelRenderer,List<ModelRenderer>> childModelMap=new HashMap<ModelRenderer,List<ModelRenderer>>();  for (  Box box : this.modelBoxList) {    ModelRenderer mr=box.modelRenderer;    List<ModelRenderer> childList=childModelMap.get(mr);    if (childList == null) {      childList=new ArrayList<ModelRenderer>();      childModelMap.put(mr,childList);    }    List<ModelRenderer> childModels=this.getChildModels(new ArrayList<ModelRenderer>(),mr);    for (    ModelRenderer childModel : childModels) {      if (!childList.contains(childModel)) {        childList.add(childModel);      }    }  }  for (  Box box : this.modelBoxList) {    List<ModelRenderer> childModels=childModelMap.get(box.modelRenderer);    for (    ModelRenderer childModel : childModels) {      List<Box> childBoxes=this.modelRendererBoxMap.get(childModel);      for (      Box childBox : childBoxes) {        if (!box.childBoxes.contains(childBox)) {          box.childBoxes.add(childBox);        }      }    }  }  this.model=new Model(this.modelBoxList,this.fwdVec,this.upVec);}  }
class C{  public Stack(final File stackFile) throws IOException {  this.stack=new Heap(stackFile,8,NaturalOrder.naturalOrder,0);  this.lastHandle=0;}  }
class C{  public void testCsiS(){  withTerminalSized(3,4).enterString("1\r\n2\r\n3\r\nhi\033[2Sy").assertLinesAre("3  ","hi ","   ","  y");  withTerminalSized(3,4).enterString("1\r\n2\r\n3\r\nhi\033[Sy").assertLinesAre("2  ","3  ","hi ","  y");}  }
class C{  protected void validateState(State current){  ValidationUtils.validateState(current);}  }
class C{  public int size(){  return count;}  }
class C{  protected boolean isUserLoggedIn(HttpServletRequest request){  return null != request.getUserPrincipal();}  }
class C{  private void markSubroutineWalk(final BitSet sub,final int index,final BitSet anyvisited){  if (LOGGING) {    log("markSubroutineWalk: sub=" + sub + " index="+ index);  }  markSubroutineWalkDFS(sub,index,anyvisited);  boolean loop=true;  while (loop) {    loop=false;    for (Iterator<TryCatchBlockNode> it=tryCatchBlocks.iterator(); it.hasNext(); ) {      TryCatchBlockNode trycatch=it.next();      if (LOGGING) {        log("Scanning try/catch " + trycatch);      }      int handlerindex=instructions.indexOf(trycatch.handler);      if (sub.get(handlerindex)) {        continue;      }      int startindex=instructions.indexOf(trycatch.start);      int endindex=instructions.indexOf(trycatch.end);      int nextbit=sub.nextSetBit(startindex);      if (nextbit != -1 && nextbit < endindex) {        if (LOGGING) {          log("Adding exception handler: " + startindex + '-'+ endindex+ " due to "+ nextbit+ " handler "+ handlerindex);        }        markSubroutineWalkDFS(sub,handlerindex,anyvisited);        loop=true;      }    }  }}  }
class C{  public static void enableLog(){  isLogEnable=true;}  }
class C{  public static List<DownloadFileDescription> sortByMapName(final List<DownloadFileDescription> downloads){  checkNotNull(downloads);  final List<DownloadFileDescription> returnList=new ArrayList<>();  List<DownloadFileDescription> maps=new ArrayList<>();  for (  final DownloadFileDescription download : downloads) {    maps.add(download);  }  if (!maps.isEmpty()) {    returnList.addAll(sort(maps));  }  return returnList;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.459 -0500",hash_original_method="9556B578266975E5A98CFEB0C2204667",hash_generated_method="B0F6AB4EB61F7A86F4C78599925651CF") public long insert(ContentValues values){  return insertInternal(values,false);}  }
class C{  public void unsign(){  LinkedList<String> entriesToRemove=new LinkedList<String>();  for (  Entry<String,JarEntry> jarEntry : jarEntries.entrySet()) {    if (jarEntry.getKey().endsWith(".SF") || jarEntry.getKey().endsWith(".DSA") || jarEntry.getKey().endsWith(".RSA")|| jarEntry.getKey().endsWith(".EC")) {      entriesToRemove.add(jarEntry.getKey());    }  }  for (  String entryToRemove : entriesToRemove) {    jarEntries.remove(entryToRemove);  }}  }
class C{  @Override public void run(){  amIActive=true;  try {    String inputFilesString="";    String sagaHeaderFile="";    String sagaDataFile="";    int i=0;    int row, col, rows=0, cols=0;    double north=0, south=0, east=0, west=0, cellSize=0;    long dataFileOffset=0;    double zFactor=1.0;    String description="";    String xyUnit="not specified";    String dataFormat="";    boolean topToBottom=false;    int rowStart=0;    int rowIncrement=1;    java.nio.ByteOrder byteorder=java.nio.ByteOrder.BIG_ENDIAN;    String[] imageFiles;    int numImages=0;    double noData=-32768;    String returnHeaderFile="";    DataInputStream in=null;    BufferedReader br=null;    if (args.length <= 0) {      showFeedback("Plugin parameters have not been set.");      return;    }    inputFilesString=args[0];    if ((inputFilesString == null)) {      showFeedback("One or more of the input parameters have not been set properly.");      return;    }    imageFiles=inputFilesString.split(";");    numImages=imageFiles.length;    for (i=0; i < numImages; i++) {      int progress=(int)(100f * i / (numImages - 1));      if (numImages > 1) {        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      String inputFile=imageFiles[i];      File file=new File(inputFile);      if (!file.exists()) {        showFeedback("Image file does not exist.");        break;      }      String fileExtension=whitebox.utilities.FileUtilities.getFileExtension(inputFile).toLowerCase();      if (fileExtension.equals("sgrd")) {        sagaHeaderFile=inputFile;        sagaDataFile=inputFile.replace(fileExtension,"sdat");        if (!new File(sagaDataFile).exists()) {          showFeedback("Image file does not exist.");          break;        }      } else {        sagaDataFile=inputFile;        sagaHeaderFile=inputFile.replace(fileExtension,"sgrd");        if (!new File(sagaHeaderFile).exists()) {          showFeedback("Image file does not exist.");          break;        }      }      FileInputStream fstream=new FileInputStream(sagaHeaderFile);      in=new DataInputStream(fstream);      br=new BufferedReader(new InputStreamReader(in));      String delimiter="\t";      String line;      String[] str;      while ((line=br.readLine()) != null) {        str=line.split(delimiter);        if (str.length <= 1) {          delimiter=" ";          str=line.split(delimiter);          if (str.length <= 1) {            delimiter=",";            str=line.split(delimiter);          }        }        if (str[0].toLowerCase().contains("description")) {          description=str[str.length - 1].replace("=","").trim();        } else         if (str[0].toLowerCase().contains("unit")) {          if (!str[str.length - 1].replace("=","").trim().isEmpty()) {            xyUnit=str[str.length - 1].replace("=","").trim();          }        } else         if (str[0].toLowerCase().contains("datafile_offset")) {          dataFileOffset=Long.parseLong(str[str.length - 1].replace("=","").trim());        } else         if (str[0].toLowerCase().contains("dataformat")) {          dataFormat=str[str.length - 1].replace("=","").trim().toLowerCase();        } else         if (str[0].toLowerCase().contains("byteorder_big")) {          if (str[str.length - 1].toLowerCase().contains("f")) {            byteorder=java.nio.ByteOrder.LITTLE_ENDIAN;          } else {            byteorder=java.nio.ByteOrder.BIG_ENDIAN;          }        } else         if (str[0].toLowerCase().contains("position_xmin")) {          west=Double.parseDouble(str[str.length - 1].replace("=","").trim());        } else         if (str[0].toLowerCase().contains("position_ymin")) {          south=Double.parseDouble(str[str.length - 1].replace("=","").trim());        } else         if (str[0].toLowerCase().contains("cellcount_x")) {          cols=Integer.parseInt(str[str.length - 1].replace("=","").trim());        } else         if (str[0].toLowerCase().contains("cellcount_y")) {          rows=Integer.parseInt(str[str.length - 1].replace("=","").trim());        } else         if (str[0].toLowerCase().contains("cellsize")) {          cellSize=Double.parseDouble(str[str.length - 1].replace("=","").trim());        } else         if (str[0].toLowerCase().contains("z_factor")) {          zFactor=Double.parseDouble(str[str.length - 1].replace("=","").trim());        } else         if (str[0].toLowerCase().contains("nodata_value")) {          noData=Double.parseDouble(str[str.length - 1].replace("=","").trim());        } else         if (str[0].toLowerCase().contains("toptobottom")) {          topToBottom=!str[str.length - 1].toLowerCase().contains("f");        }      }      north=south + cellSize * rows;      east=west + cellSize * cols;      if (!topToBottom) {        rowStart=rows - 1;        rowIncrement=-1;      }      in.close();      br.close();      WhiteboxRasterBase.DataType outputDataType;switch (dataFormat) {case "bit":case "byte_unsigned":case "byte":case "shortint_unsigned":case "shortint":        outputDataType=WhiteboxRasterBase.DataType.INTEGER;      break;case "float":    outputDataType=WhiteboxRasterBase.DataType.FLOAT;  break;default :outputDataType=WhiteboxRasterBase.DataType.DOUBLE;break;}if (zFactor < 1.0 && outputDataType == WhiteboxRasterBase.DataType.INTEGER) {outputDataType=WhiteboxRasterBase.DataType.FLOAT;}String whiteboxHeaderFile=imageFiles[i].replace(fileExtension,"dep");if (i == 0) {returnHeaderFile=whiteboxHeaderFile;}WhiteboxRaster output=new WhiteboxRaster(whiteboxHeaderFile,north,south,east,west,rows,cols,WhiteboxRasterBase.DataScale.CONTINUOUS,outputDataType,noData,noData);file=new File(sagaDataFile);int fileLength=(int)file.length();RandomAccessFile rIn=null;FileChannel inChannel=null;ByteBuffer buf=ByteBuffer.allocate(fileLength);rIn=new RandomAccessFile(sagaDataFile,"r");inChannel=rIn.getChannel();inChannel.position(0);inChannel.read(buf);buf.order(byteorder);buf.rewind();byte[] ba=new byte[(int)fileLength];buf.get(ba);double z;row=0;col=0;int pos=(int)dataFileOffset;int oldProgress=-1;boolean flag=true;row=rowStart;switch (dataFormat) {case "bit":byte b;while (flag) {b=buf.get(pos);for (int bit=0; bit < 8; bit++) {if (BitOps.checkBit(b,bit)) {output.setValue(row,col,1.0);} else {output.setValue(row,col,0.0);}col++;if (col >= cols) {row+=rowIncrement;progress=(int)(100f * (row - rowStart) / (rows - 1));if (progress != oldProgress) {  updateProgress("Importing SAGA file...",progress);  oldProgress=progress;}}if (row >= rows || row < 0) {flag=false;}}pos+=1;if (pos >= fileLength) {flag=false;}}case "byte_unsigned":while (flag) {for (col=0; col < cols; col++) {z=(double)(Unsigned.getUnsignedByte(buf,pos)) * zFactor;output.setValue(row,col,z);pos+=1;}progress=(int)(100f * (row - rowStart) / (rows - 1));if (progress != oldProgress) {updateProgress("Importing SAGA file...",progress);oldProgress=progress;}row+=rowIncrement;if (row >= rows || row < 0) {flag=false;}}case "byte":while (flag) {for (col=0; col < cols; col++) {z=(double)buf.get(pos) * zFactor;output.setValue(row,col,z);pos+=1;}progress=(int)(100f * (row - rowStart) / (rows - 1));if (progress != oldProgress) {updateProgress("Importing SAGA file...",progress);oldProgress=progress;}row+=rowIncrement;if (row >= rows || row < 0) {flag=false;}}case "shortint_unsigned":while (flag) {for (col=0; col < cols; col++) {z=(double)(Unsigned.getUnsignedShort(buf,pos)) * zFactor;output.setValue(row,col,z);pos+=2;}progress=(int)(100f * (row - rowStart) / (rows - 1));if (progress != oldProgress) {updateProgress("Importing SAGA file...",progress);oldProgress=progress;}row+=rowIncrement;if (row >= rows || row < 0) {flag=false;}}case "shortint":while (flag) {for (col=0; col < cols; col++) {z=(double)buf.getShort(pos) * zFactor;output.setValue(row,col,z);pos+=2;}progress=(int)(100f * (row - rowStart) / (rows - 1));if (progress != oldProgress) {updateProgress("Importing SAGA file...",progress);oldProgress=progress;}row+=rowIncrement;if (row >= rows || row < 0) {flag=false;}}case "integer":while (flag) {for (col=0; col < cols; col++) {z=(double)buf.getInt(pos) * zFactor;output.setValue(row,col,z);pos+=4;}progress=(int)(100f * (row - rowStart) / (rows - 1));if (progress != oldProgress) {updateProgress("Importing SAGA file...",progress);oldProgress=progress;}row+=rowIncrement;if (row >= rows || row < 0) {flag=false;}}break;case "integer_unsigned":while (flag) {for (col=0; col < cols; col++) {z=(double)(Unsigned.getUnsignedInt(buf,pos)) * zFactor;output.setValue(row,col,z);pos+=4;}progress=(int)(100f * (row - rowStart) / (rows - 1));if (progress != oldProgress) {updateProgress("Importing SAGA file...",progress);oldProgress=progress;}row+=rowIncrement;if (row >= rows || row < 0) {flag=false;}}case "float":while (flag) {for (col=0; col < cols; col++) {z=(double)buf.getFloat(pos) * zFactor;output.setValue(row,col,z);pos+=4;}progress=(int)(100f * (row - rowStart) / (rows - 1));if (progress != oldProgress) {updateProgress("Importing SAGA file...",progress);oldProgress=progress;}row+=rowIncrement;if (row >= rows || row < 0) {flag=false;}}break;default :while (flag) {for (col=0; col < cols; col++) {z=buf.getDouble(pos) * zFactor;output.setValue(row,col,z);pos+=8;}progress=(int)(100f * (row - rowStart) / (rows - 1));if (progress != oldProgress) {updateProgress("Importing SAGA file...",progress);oldProgress=progress;}row+=rowIncrement;if (row >= rows || row < 0) {flag=false;}}break;}inChannel.close();output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());output.flush();output.findMinAndMaxVals();output.writeHeaderFile();output.close();}returnData(returnHeaderFile);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void addFillOutsideLine(FillOutsideLine fill){  mFillBelowLine.add(fill);}  }
class C{  public String displayInputParameters(){  return MLContextUtil.displayMap("Input Parameters",inputParameters);}  }
class C{  public VectorStore makeWriteableVectorStore(){  VectorStoreRAM outputVectors=new VectorStoreRAM(flagConfig);  for (int i=0; i < this.luceneUtils.getNumDocs(); ++i) {    try {      String externalDocId=luceneUtils.getExternalDocId(i);      Vector docVector=this.docVectors.getVector(externalDocId);      outputVectors.putVector(externalDocId,docVector);    } catch (    CorruptIndexException e) {      e.printStackTrace();    }catch (    IOException e) {      e.printStackTrace();    }  }  return outputVectors;}  }
class C{  public Builder addFormDataPart(String name,String filename,RequestBody body){  return addPart(Part.createFormData(name,filename,body));}  }
class C{  public synchronized void write(String logData){  if (logEnabled) {    histData.append(logData);    histData.revalidate();synchronized (histData) {      histData.notify();    }  }}  }
class C{  protected static float convertSpecularExponent(Element filterElement,BridgeContext ctx){  String s=filterElement.getAttributeNS(null,SVG_SPECULAR_EXPONENT_ATTRIBUTE);  if (s.length() == 0) {    return 1;  } else {    try {      float v=SVGUtilities.convertSVGNumber(s);      if (v < 1 || v > 128) {        throw new BridgeException(ctx,filterElement,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_SPECULAR_CONSTANT_ATTRIBUTE,s});      }      return v;    } catch (    NumberFormatException nfEx) {      throw new BridgeException(ctx,filterElement,nfEx,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_SPECULAR_CONSTANT_ATTRIBUTE,s,nfEx});    }  }}  }
class C{  static String generateErrorCorrection(CharSequence dataCodewords,int errorCorrectionLevel){  int k=getErrorCorrectionCodewordCount(errorCorrectionLevel);  char[] e=new char[k];  int sld=dataCodewords.length();  for (int i=0; i < sld; i++) {    int t1=(dataCodewords.charAt(i) + e[e.length - 1]) % 929;    int t2;    int t3;    for (int j=k - 1; j >= 1; j--) {      t2=(t1 * EC_COEFFICIENTS[errorCorrectionLevel][j]) % 929;      t3=929 - t2;      e[j]=(char)((e[j - 1] + t3) % 929);    }    t2=(t1 * EC_COEFFICIENTS[errorCorrectionLevel][0]) % 929;    t3=929 - t2;    e[0]=(char)(t3 % 929);  }  StringBuilder sb=new StringBuilder(k);  for (int j=k - 1; j >= 0; j--) {    if (e[j] != 0) {      e[j]=(char)(929 - e[j]);    }    sb.append(e[j]);  }  return sb.toString();}  }
class C{  protected void incrementVmsAcks(){  vmsAcks++;}  }
class C{  public boolean isAssignableFrom(Class cl){  if (getName().equals(cl.getName()))   return true;  Class[] ifc=cl.getInterfaces();  for (int i=0; i < ifc.length; i++) {    if (isAssignableFrom(ifc[i]))     return true;  }  if (cl.getSuperclass() != null)   return isAssignableFrom(cl.getSuperclass()); else   return false;}  }
class C{  public static int interp(int c1,int c2,double frac){  double ifrac=1 - frac;  return rgba((int)Math.round(frac * red(c2) + ifrac * red(c1)),(int)Math.round(frac * green(c2) + ifrac * green(c1)),(int)Math.round(frac * blue(c2) + ifrac * blue(c1)),(int)Math.round(frac * alpha(c2) + ifrac * alpha(c1)));}  }
class C{  public ContinueStatement createContinueStatement(){  ContinueStatementImpl continueStatement=new ContinueStatementImpl();  return continueStatement;}  }
class C{  public R1Interval union(R1Interval y){  if (isEmpty()) {    return y;  }  if (y.isEmpty()) {    return this;  }  return new R1Interval(Math.min(lo(),y.lo()),Math.max(hi(),y.hi()));}  }
class C{  public XMLContent(String content){  this(wrap(content));}  }
class C{  public static double info(int counts[]){  int total=0;  double x=0;  for (int j=0; j < counts.length; j++) {    x-=xlogx(counts[j]);    total+=counts[j];  }  return x + xlogx(total);}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public void add(String keyword,byte id){  int key=getStringMapKey(keyword);  map[key]=new Keyword(keyword.toCharArray(),id,map[key]);}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GroupVideo'";  db.execSQL(sql);}  }
class C{  protected void paintGlass(Graphics g){}  }
class C{  @Override public void finish() throws IOException {  if (out == null) {    throw new IOException("Stream is closed");  }  if (cDir == null) {    return;  }  if (entries.isEmpty()) {    throw new ZipException("No entries");  }  if (currentEntry != null) {    closeEntry();  }  int cdirSize=cDir.size();  writeLong(cDir,ENDSIG);  writeShort(cDir,0);  writeShort(cDir,0);  writeShort(cDir,entries.size());  writeShort(cDir,entries.size());  writeLong(cDir,cdirSize);  writeLong(cDir,offset);  writeShort(cDir,commentBytes.length);  if (commentBytes.length > 0) {    cDir.write(commentBytes);  }  cDir.writeTo(out);  cDir=null;}  }
class C{  public StackOfIntegers(){  this(DEFAULT_CAPACITY);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case DomPackage.COMPOSITE__CONTENTS:    getContents().clear();  getContents().addAll((Collection<? extends ContentNode>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public boolean containsIdentical(Object element){  for (  Object obj : objects)   if (element == obj)   return true;  return false;}  }
class C{  public static <Req,Res>void loadTestConcurrency(final int concurrency,final int warmupRequests,final ReceivePort<Req> requests,final RequestExecutor<Req,Res> executor,final SendPort<TimingEvent<Res>> eventChannel,final FiberScheduler fiberScheduler) throws SuspendExecution, InterruptedException {  loadTestConcurrency(concurrency,warmupRequests,requests,executor,eventChannel,fiberScheduler,null);}  }
class C{  private void updatePositionConfiguration(){  if (mWindowWidth == 0 || mWindowHeight == 0) {    return;  }  mPositionConfiguration=getPositionConfiguration(mWindowWidth,mWindowHeight,mAspectRatio,mRotation);}  }
class C{  public static void main(String[] args) throws IOException {  int low=0;  int high=32000;  if (args == null || args.length == 0) {  } else   if (args.length == 1) {    low=Integer.valueOf(args[0]);  } else   if (args.length >= 2) {    low=Integer.valueOf(args[0]);    high=Integer.valueOf(args[1]);    if (args.length > 2) {      System.err.println("Ignoring all command arguments but " + args[0] + " and "+ args[1]);    }  }  File f=new File("Output.report.txt");  FileWriter fw=new FileWriter(f);  pw=new PrintWriter(fw);  FreeCellNode goal=Deal.goal();  System.out.println("Processing boards [" + low + ","+ high+ "] to "+ f);  File inputFile=new File("artifacts","32000.txt");  for (DealIterator di=Deal.iterator(inputFile); di.hasNext(); ) {    INode fc=di.next();    if (di.getNextDealNumber() - 1 < low || di.getNextDealNumber() - 1 > high) {      continue;    }    pw.println("Search for:" + (di.getNextDealNumber() - 1));    pw.println(fc);    pw.flush();    System.out.println("working on: " + (di.getNextDealNumber() - 1));    IScore eval=new BoardScorer();    GoalDirectedStagedDeepening<short[]> gdsd=new GoalDirectedStagedDeepening<short[]>(goal,eval);    Result res=gdsd.fullSearch(fc,eval,FreeCellNode.comparator());    Stack<IMove> st=res.solution();    if (res.success) {      System.out.println("  Solution found!");      pw.println(st.size() + " moves");    } else {      System.out.println(" No solution uncovered.");      pw.println("  NO SOLUTION FOUND!");    }    pw.flush();  }}  }
class C{  protected void addIfdData(IfdData data){  mIfdDatas[data.getId()]=data;}  }
class C{  public static void assertVocabulary(Analyzer a,Path zipFile,String voc,String out) throws IOException {  Path tmp=LuceneTestCase.createTempDir();  try (InputStream in=Files.newInputStream(zipFile)){    TestUtil.unzip(in,tmp);  }   try (InputStream v=Files.newInputStream(tmp.resolve(voc));InputStream o=Files.newInputStream(tmp.resolve(out))){    assertVocabulary(a,v,o);  } }  }
class C{  @Override public void run(){  try {    while (true) {      InputStreamReader isr=null;      try {        isr=new InputStreamReader(getFeedInputStream());        SyndFeedInput feedInput=new SyndFeedInput();        SyndFeed feed=feedInput.build(isr);        List entries=feed.getEntries();        List<RomeFeedEntry> nfeedItems=new ArrayList<RomeFeedEntry>();        boolean oldEntries=false;        for (int i=0; i < entries.size(); ++i) {          SyndEntry syndEntry=(SyndEntry)entries.get(i);          RomeFeedEntry romeFeedEntry=getSerializableEntry(syndEntry);          if (!oldEntries) {            if (!feedItems.contains(romeFeedEntry)) {              outputPort.emit(romeFeedEntry);            } else             if (orderedUpdate) {              oldEntries=true;            }          }          nfeedItems.add(romeFeedEntry);        }        feedItems=nfeedItems;      } catch (      Exception e) {        logger.error(e.getMessage());      } finally {        if (isr != null) {          try {            isr.close();          } catch (          Exception ce) {            logger.error(ce.getMessage());          }        }      }      Thread.sleep(interval);    }  } catch (  InterruptedException ie) {    logger.error("Interrupted: " + ie.getMessage());  }}  }
class C{  public static <K extends Comparable<K>,V extends Comparable<V>>Map<K,V> createByValueSortedConcurrentMap(Map<K,V> map,boolean reversed,Comparator<V> comparator){  return new ByValueSortingConcurrentSkipListMap<>(ByValueComparator.create(map,reversed,comparator));}  }
class C{  @Override public void release(){  super.release();  clazz=null;  scope=Constants.class.getName();}  }
class C{  public String className(){  return getConstPool().getClassInfo(classIndex());}  }
class C{  @Override public V put(K key,V value){  if (key == null) {    return putValueForNullKey(value);  }  int hash=secondaryHash(key);  HashMapEntry<K,V>[] tab=table;  int index=hash & (tab.length - 1);  for (HashMapEntry<K,V> e=tab[index]; e != null; e=e.next) {    if (e.hash == hash && key.equals(e.key)) {      preModify(e);      V oldValue=e.value;      e.value=value;      return oldValue;    }  }  modCount++;  if (size++ > threshold) {    tab=doubleCapacity();    index=hash & (tab.length - 1);  }  addNewEntry(key,value,hash,index);  return null;}  }
class C{  public BasicSplitPaneDivider createDefaultDivider(){  return new BasicSplitPaneDivider(this);}  }
class C{  public DateHeader createDateHeader(Calendar date){  SIPDateHeader d=new SIPDateHeader();  if (date == null)   throw new NullPointerException("null date");  d.setDate(date);  return d;}  }
class C{  public void addChildBefore(Node newChild,Node node){  if (newChild.next != null)   throw new RuntimeException("newChild had siblings in addChildBefore");  if (first == node) {    newChild.next=first;    first=newChild;    return;  }  Node prev=getChildBefore(node);  addChildAfter(newChild,prev);}  }
class C{  protected void writeTldDescription() throws IOException {  writer.startElement("taglib",TAG_LIB_SCHEMA_ATTRIBUTES);  writer.writeComment("============== Tag Library Description Elements =============");  writer.startElement("description");  writer.writeText(propManager.getProperty(PropertyManager.TAGLIB_DESCRIPTION));  writer.closeElement();  writer.startElement("tlib-version");  writer.writeText(JSF_TLIB_VERSION);  writer.closeElement();  writer.startElement("short-name");  writer.writeText(propManager.getProperty(PropertyManager.TAGLIB_SHORT_NAME));  writer.closeElement();  writer.startElement("uri");  writer.writeText(propManager.getProperty(PropertyManager.TAGLIB_URI));  writer.closeElement();}  }
class C{  public boolean supports(StringBuilder string){  SortedSet<StringBuilder> t=this.dict.tailSet(string);  for (  final StringBuilder r : t) {    if (StringBuilderComparator.CASE_INSENSITIVE_ORDER.startsWith(string,r)) {      return true;    }    break;  }  string=reverse(string);  t=this.tcid.tailSet(string);  for (  final StringBuilder r : t) {    if (StringBuilderComparator.CASE_INSENSITIVE_ORDER.startsWith(string,r)) {      return true;    }    break;  }  return false;}  }
class C{  public <T>T notNull(T reference,String errorMessageTemplate,Object... errorMessageArgs){  if (reference == null) {    throw new NullPointerException(format(errorMessageTemplate,errorMessageArgs));  }  return reference;}  }
class C{  static Tuple<Map<String,String>,Long> readLegacyChecksums(Directory directory) throws IOException {synchronized (directory) {    long lastFound=-1;    for (    String name : directory.listAll()) {      if (!isChecksum(name)) {        continue;      }      long current=Long.parseLong(name.substring(CHECKSUMS_PREFIX.length()));      if (current > lastFound) {        lastFound=current;      }    }    if (lastFound > -1) {      try (IndexInput indexInput=directory.openInput(CHECKSUMS_PREFIX + lastFound,IOContext.READONCE)){        indexInput.readInt();        return new Tuple(indexInput.readStringStringMap(),lastFound);      }     }    return new Tuple(new HashMap<>(),-1l);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:17.088 -0500",hash_original_method="1B4F9BFF1D832A07D0E1F41D0B16D2FF",hash_generated_method="5D26BC6CD7492E3645E935033A475185") @DSVerified @DSSafe(DSCat.ANDROID_CALLBACK) protected void onStart(){  if (mActionBar != null)   mActionBar.setShowHideAnimationEnabled(true);}  }
class C{  public NotificationChain basicSetElseStep(Step newElseStep,NotificationChain msgs){  Step oldElseStep=elseStep;  elseStep=newElseStep;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,SexecPackage.IF__ELSE_STEP,oldElseStep,newElseStep);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public long lastBinlogPosition(){  return lastBinlogPosition;}  }
class C{  protected void start(){  log.debug("main initialization done");}  }
class C{  private void findLicenseUrl(Element element){  if (!"a".equalsIgnoreCase(element.getTagName()))   return;  String href=element.getAttribute("href");  if (href == null)   return;  try {    URL url=new URL(base,href);    if ("http".equalsIgnoreCase(url.getProtocol()) && "creativecommons.org".equalsIgnoreCase(url.getHost()) && url.getPath() != null && url.getPath().startsWith("/licenses/") && url.getPath().length() > "/licenses/".length()) {      String rel=element.getAttribute("rel");      if (rel != null && "license".equals(rel) && this.relLicense == null) {        this.relLicense=url;      } else       if (this.anchorLicense == null) {        this.anchorLicense=url;      }    }  } catch (  MalformedURLException e) {  }}  }
class C{  public void nextEntry(ZipEntry ze) throws IOException {  LOG.fine("nextEntry().currentPos=" + currentPos);  byte[] intBuffer=new byte[4];  int bytesRead=fis.read(intBuffer);  LOG.fine("bytes read=" + bytesRead);  if (bytesRead == -1) {    throw new IOException("no data available - available=" + fis.available());  }  int dataDescriptorLength=0;  if (Arrays.equals(intBuffer,new byte[]{0x50,0x4b,0x07,0x08})) {    dataDescriptorLength=4 + 4 + 4;    fis.skip(dataDescriptorLength);    fis.read(intBuffer);  }  if (!Arrays.equals(intBuffer,new byte[]{0x50,0x4b,0x03,0x04})) {    throw new IOException("wrong local file header signature - value=" + ByteArrayHelper.toString(intBuffer));  }  boolean hasDataDescriptor=(ze.getMethod() & 8) > 0;  LOG.fine("nextEntry().hasDataDescriptor=" + hasDataDescriptor);  this.compressedSize=ze.getCompressedSize();  fis.skip(14 + 4 + 4);  byte[] shortBuffer=new byte[2];  fis.read(shortBuffer);  int fileNameLength=ByteArrayHelper.toInt(shortBuffer);  fis.read(shortBuffer);  int extraFieldLength=ByteArrayHelper.toInt(shortBuffer);  startPos=18 + 12 + fileNameLength+ extraFieldLength+ dataDescriptorLength;  currentPos=startPos;  endPos=startPos + this.compressedSize;  fis.skip(fileNameLength + extraFieldLength);}  }
class C{  public Realm(DerValue encoding) throws Asn1Exception, RealmException, IOException {  if (encoding == null) {    throw new IllegalArgumentException("encoding can not be null");  }  realm=new KerberosString(encoding).toString();  if (realm == null || realm.length() == 0)   throw new RealmException(Krb5.REALM_NULL);  if (!isValidRealmString(realm))   throw new RealmException(Krb5.REALM_ILLCHAR);}  }
class C{  public ActionForward searchInstructionalOfferings(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  sessionContext.checkPermission(Right.InstructionalOfferings);  InstructionalOfferingListForm frm=(InstructionalOfferingListForm)form;  ActionMessages errors=null;  errors=frm.validate(mapping,request);  if (errors.size() > 0) {    saveErrors(request,errors);    frm.setSubjectAreas(SubjectArea.getUserSubjectAreas(sessionContext.getUser()));    frm.setInstructionalOfferings(null);    return mapping.findForward("showInstructionalOfferingSearch");  }  StringBuffer ids=new StringBuffer();  StringBuffer names=new StringBuffer();  StringBuffer subjIds=new StringBuffer();  for (int i=0; i < frm.getSubjectAreaIds().length; i++) {    if (i > 0) {      names.append(",");      subjIds.append(",");    }    ids.append("&subjectAreaIds=" + frm.getSubjectAreaIds()[i]);    subjIds.append(frm.getSubjectAreaIds()[i]);    names.append(((new SubjectAreaDAO()).get(new Long(frm.getSubjectAreaIds()[i]))).getSubjectAreaAbbreviation());  }  sessionContext.setAttribute(SessionAttribute.OfferingsSubjectArea,subjIds.toString());  sessionContext.setAttribute(SessionAttribute.OfferingsCourseNumber,frm.getCourseNbr());  if ("1".equals(request.getParameter("loadInstrFilter"))) {    setupInstrOffrListSpecificFormFilters(sessionContext,frm);  } else {    sessionContext.getUser().setProperty("InstructionalOfferingList.divSec",frm.getDivSec() ? "1" : "0");    sessionContext.getUser().setProperty("InstructionalOfferingList.demand",frm.getDemand() ? "1" : "0");    sessionContext.getUser().setProperty("InstructionalOfferingList.projectedDemand",frm.getProjectedDemand() ? "1" : "0");    sessionContext.getUser().setProperty("InstructionalOfferingList.minPerWk",frm.getMinPerWk() ? "1" : "0");    sessionContext.getUser().setProperty("InstructionalOfferingList.limit",frm.getLimit() ? "1" : "0");    sessionContext.getUser().setProperty("InstructionalOfferingList.roomLimit",frm.getRoomLimit() ? "1" : "0");    sessionContext.getUser().setProperty("InstructionalOfferingList.manager",frm.getManager() ? "1" : "0");    sessionContext.getUser().setProperty("InstructionalOfferingList.datePattern",frm.getDatePattern() ? "1" : "0");    sessionContext.getUser().setProperty("InstructionalOfferingList.timePattern",frm.getTimePattern() ? "1" : "0");    sessionContext.getUser().setProperty("InstructionalOfferingList.instructor",frm.getInstructor() ? "1" : "0");    sessionContext.getUser().setProperty("InstructionalOfferingList.preferences",frm.getPreferences() ? "1" : "0");    sessionContext.getUser().setProperty("InstructionalOfferingList.timetable",(frm.getTimetable() == null ? "0" : frm.getTimetable() ? "1" : "0"));    sessionContext.getUser().setProperty("InstructionalOfferingList.credit",frm.getCredit() ? "1" : "0");    sessionContext.getUser().setProperty("InstructionalOfferingList.subpartCredit",frm.getSubpartCredit() ? "1" : "0");    sessionContext.getUser().setProperty("InstructionalOfferingList.schedulePrintNote",frm.getSchedulePrintNote() ? "1" : "0");    sessionContext.getUser().setProperty("InstructionalOfferingList.note",frm.getNote() ? "1" : "0");    sessionContext.getUser().setProperty("InstructionalOfferingList.title",frm.getTitle() ? "1" : "0");    sessionContext.getUser().setProperty("InstructionalOfferingList.exams",(frm.getExams() == null ? "0" : frm.getExams() ? "1" : "0"));    sessionContext.getUser().setProperty("InstructionalOfferingList.consent",frm.getConsent() ? "1" : "0");    sessionContext.getUser().setProperty("InstructionalOfferingList.sortBy",frm.getSortBy());  }  if (!sessionContext.hasPermission(Right.Examinations))   frm.setExams(null);  Map<Long,TreeSet<InstructionalOffering>> instrOfferings=getInstructionalOfferings(sessionContext.getUser().getCurrentAcademicSessionId(),classAssignmentService.getAssignment(),frm);  frm.setSubjectAreas(SubjectArea.getUserSubjectAreas(sessionContext.getUser()));  frm.setInstructionalOfferings(instrOfferings);  if (instrOfferings.isEmpty()) {    errors.add("searchResult",new ActionMessage("errors.generic",MSG.errorNoRecords()));    saveErrors(request,errors);    return mapping.findForward("showInstructionalOfferingSearch");  } else {    BackTracker.markForBack(request,"instructionalOfferingSearch.do?op=Back&doit=Search&loadInstrFilter=1" + ids + "&courseNbr="+ frm.getCourseNbr(),MSG.labelInstructionalOfferings() + " (" + names+ (frm.getCourseNbr() == null || frm.getCourseNbr().length() == 0 ? "" : " " + frm.getCourseNbr())+ ")",true,true);    if (request.getParameter("op") == null || (request.getParameter("op") != null && !request.getParameter("op").equalsIgnoreCase("Back"))) {      if (frm.getSubjectAreaIds().length == 1) {        TreeSet<InstructionalOffering> offerings=frm.getInstructionalOfferings(Long.valueOf(frm.getSubjectAreaIds()[0]));        if (offerings != null && offerings.size() == 1) {          InstructionalOffering io=offerings.first();          if (sessionContext.hasPermission(io,Right.InstructionalOfferingDetail)) {            ActionRedirect redirect=new ActionRedirect(mapping.findForward("showInstructionalOfferingDetail"));            redirect.addParameter("op","view");            redirect.addParameter("io",io.getUniqueId().toString());            return redirect;          }        }      }    }    return mapping.findForward("showInstructionalOfferingList");  }}  }
class C{  public hr removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public void add(Object obj){  throw new UnsupportedOperationException("add() is unsupported");}  }
class C{  public boolean canSeeEntity(GlowEntity entity){  return knownEntities.contains(entity);}  }
class C{  private void init(){  mainPanel=new JPanel();  mainPanel.setLayout(new BoxLayout(mainPanel,BoxLayout.Y_AXIS));  mainPanel.add(connectionPanel);  propertiesPanel=ConnectionSynapsePropertiesPanel.createSynapsePropertiesPanel(this);  mainPanel.add(propertiesPanel);  eirPanel=SynapsePolarityAndRandomizerPanel.createPolarityRatioPanel(this);  mainPanel.add(eirPanel);  fillFrame();}  }
class C{  public BurpCertificate cloneCertificate(BurpCertificate certificate,BurpCertificateBuilder burpCertificateBuilder){  cloneProperties(certificate,burpCertificateBuilder);  setStatus("Cloning certificate...");  BurpCertificate burpCertificate;  try {    burpCertificate=burpCertificateBuilder.generateSelfSignedCertificate();    burpCertificate.setSource("Cloned");    burpCertificateStore.addCertificate(burpCertificate);    setStatus("Certificate cloned.");    setCertificateTree();    return burpCertificate;  } catch (  IOException e) {    setStatus("I/O error. (" + e.getMessage() + ")");    e.printStackTrace();  }catch (  CertificateEncodingException e) {    setStatus("Problem with certificate encoding. (" + e.getMessage() + ")");    e.printStackTrace();  }catch (  InvalidKeyException e) {    setStatus("Invalid Key.");    e.printStackTrace();  }catch (  NoSuchAlgorithmException e) {    setStatus("Unsupported algorithm specified. (" + e.getMessage() + ")");    e.printStackTrace();  }catch (  SignatureException e) {    setStatus("Error creating signature. (" + e.getMessage() + ")");    e.printStackTrace();  }catch (  InvalidKeySpecException e) {    setStatus("Unsupported key specifications. (" + e.getMessage() + ")");    e.printStackTrace();  }catch (  NoSuchProviderException|IllegalStateException e) {    setStatus("Error cloning certificate. (" + e.getMessage() + ")");    e.printStackTrace();  }catch (  Exception e) {    setStatus("Error (" + e.getMessage() + ")");  }  return null;}  }
class C{  protected void updateOutput(){  AcelaNode tNode=AcelaAddress.getNodeFromSystemName(tSystemName,_memo);  if (tNode == null) {    log.error("Can't resolve Acela Signal with name '" + tSystemName + "', command ignored");    return;  }  int cmd;  if (mLit) {switch (mAppearance) {case RED:      cmd=1;    break;case FLASHRED:  cmd=2;break;case YELLOW:cmd=3;break;case FLASHYELLOW:cmd=4;break;case GREEN:cmd=5;break;case FLASHGREEN:cmd=6;break;case DARK:cmd=7;break;default :log.warn("Unexpected new appearance: " + mAppearance);cmd=2;break;}} else {cmd=7;}tNode.setOutputSpecial(addr,cmd);tNode.setOutputBit(addr,true);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static API v(){  return v;}  }
class C{  public Builder addAddress(Address address){  addresses.add(address);  return this;}  }
