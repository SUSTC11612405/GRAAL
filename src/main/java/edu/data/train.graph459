class C{  @Override public int hashCode(){  int result=19;  result=37 * result + (int)(this.segmentSize ^ (this.segmentSize >>> 32));  result=37 * result + (int)(this.startTime ^ (this.startTime >>> 32));  return result;}  }
class C{  public static void restoreContextClassLoader(@Nullable ClassLoader oldLdr){  ClassLoader newLdr=Thread.currentThread().getContextClassLoader();  if (newLdr != oldLdr)   Thread.currentThread().setContextClassLoader(oldLdr);}  }
class C{  public Ceiling(){  super("ceil",1);}  }
class C{  @Override protected boolean isValidFragment(String fragmentName){  return PreferenceFragment.class.getName().equals(fragmentName) || PinLockFragment.class.getName().equals(fragmentName);}  }
class C{  public void run(){  while (true) {    lock.lock();    try {      while (caller == null)       condition.await();      result=caller.call();      resultAvailable=true;      caller=null;    } catch (    InterruptedException e) {    } finally {      lock.unlock();    }  }}  }
class C{  public boolean equals(Object object){  return super.equals(object) && object instanceof JobImpressions;}  }
class C{  protected Fact createMaterialReceipt(MAcctSchema as){  final Fact fact=new Fact(this,as,Fact.POST_Actual);  FactLine dr=null;  FactLine cr=null;  final MAccount credit=m_line.getAccount(ProductCost.ACCTTYPE_P_WorkInProcess,as);  final MAccount burden=m_line.getAccount(ProductCost.ACCTTYPE_P_Burden,as);  MAccount debit=m_line.getAccount(ProductCost.ACCTTYPE_P_Asset,as);  BigDecimal totalcosts=Env.ZERO;  BigDecimal totalcostsScrapped=Env.ZERO;  for (  MCostDetail cd : getCostDetails()) {    MCostElement element=MCostElement.get(getCtx(),cd.getM_CostElement_ID());    if (MCostElement.COSTELEMENTTYPE_BurdenMOverhead.equals(element.getCostElementType())) {      BigDecimal cost=cd.getAmt().add(cd.getAmtLL());      if (cost.scale() > as.getStdPrecision())       cost=cost.setScale(as.getStdPrecision(),RoundingMode.HALF_UP);      if (cost.compareTo(Env.ZERO) == 0)       continue;      cr=fact.createLine(m_line,burden,as.getC_Currency_ID(),null,cost);      cr.setQty(m_cc.getMovementQty());      String description=cd.getM_CostType().getName() + " - " + element.getName();      cr.setDescription(description);      totalcosts=totalcosts.add(cost);      continue;    }    if (m_cc.getMovementQty().signum() != 0) {      BigDecimal cost=cd.getAmt().add(cd.getAmtLL());      if (cost.scale() > as.getStdPrecision())       cost=cost.setScale(as.getStdPrecision(),RoundingMode.HALF_UP);      if (cost.compareTo(Env.ZERO) == 0)       continue;      cr=fact.createLine(m_line,credit,as.getC_Currency_ID(),cost.negate());      cr.setQty(m_cc.getMovementQty());      String description=cd.getM_CostType().getName() + " - " + element.getName();      cr.setDescription(description);      totalcosts=totalcosts.add(cost);    }    if (m_cc.getScrappedQty().signum() != 0) {      BigDecimal cost=cd.getPrice().multiply(m_cc.getScrappedQty()).add(cd.getCurrentCostPriceLL());      if (cost.compareTo(Env.ZERO) == 0)       continue;      if (cost.scale() > as.getStdPrecision())       cost=cost.setScale(as.getStdPrecision(),RoundingMode.HALF_UP);      cr=fact.createLine(m_line,credit,as.getC_Currency_ID(),null,cost);      cr.setQty(m_cc.getMovementQty());      String description=cd.getM_CostType().getName() + " - " + element.getName()+ " - Costo de Desperdicio ";      cr.setDescription(description);      totalcostsScrapped=totalcostsScrapped.add(cost);    }  }  dr=fact.createLine(m_line,debit,as.getC_Currency_ID(),totalcosts);  dr.setQty(m_cc.getMovementQty());  if (totalcostsScrapped.compareTo(Env.ZERO) != 0) {    dr=fact.createLine(m_line,debit,as.getC_Currency_ID(),totalcostsScrapped);    dr.setQty(m_cc.getScrappedQty());    String description="Desperdicio ";    dr.setDescription(description);  }  return fact;}  }
class C{  public static Configuration newConfiguration(Preferences prefs){  if (allowUserConfigurations)   return new Configuration(prefs);  return null;}  }
class C{  public JsonObject add(String name,float value){  add(name,valueOf(value));  return this;}  }
class C{  @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR1) public static boolean sameAs(Typeface typeface1,Typeface typeface2){  if (typeface1 == null) {    return typeface2 == null;  } else   if (typeface2 == null) {    return false;  }  Paint paint=new Paint();  paint.setTypeface(typeface1);  Rect bounds=new Rect();  paint.getTextBounds(TEXT,0,TEXT.length(),bounds);  Bitmap bitmap1=Bitmap.createBitmap(bounds.width(),bounds.height(),Bitmap.Config.ALPHA_8);  Canvas canvas=new Canvas(bitmap1);  canvas.drawText(TEXT,0,0,paint);  paint.setTypeface(typeface2);  paint.getTextBounds(TEXT,0,TEXT.length(),bounds);  Bitmap bitmap2=Bitmap.createBitmap(bounds.width(),bounds.height(),Bitmap.Config.ALPHA_8);  canvas.setBitmap(bitmap2);  canvas.drawText(TEXT,0,0,paint);  return bitmap1.sameAs(bitmap2);}  }
class C{  public static LazyDequeX<Integer> range(int start,int end){  return fromStreamS(ReactiveSeq.range(start,end));}  }
class C{  protected static String LexicalError(boolean EOFSeen,int lexState,int errorLine,int errorColumn,String errorAfter,char curChar){  return ("Lexical error at line " + errorLine + ", column "+ errorColumn+ ".  Encountered: "+ (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int)curChar+ "), ")+ "after : \""+ addEscapes(errorAfter)+ "\"");}  }
class C{  private static PrivateKey readPrivateKey(InputStream file) throws IOException, GeneralSecurityException {  final DataInputStream input=new DataInputStream(file);  try {    byte[] bytes=new byte[10000];    int nBytesTotal=0, nBytes;    while ((nBytes=input.read(bytes,nBytesTotal,10000 - nBytesTotal)) != -1) {      nBytesTotal+=nBytes;    }    final byte[] bytes2=new byte[nBytesTotal];    System.arraycopy(bytes,0,bytes2,0,nBytesTotal);    bytes=bytes2;    KeySpec spec=decryptPrivateKey(bytes);    if (spec == null) {      spec=new PKCS8EncodedKeySpec(bytes);    }    try {      return KeyFactory.getInstance("RSA").generatePrivate(spec);    } catch (    final InvalidKeySpecException ex) {      return KeyFactory.getInstance("DSA").generatePrivate(spec);    }  }  finally {    input.close();  }}  }
class C{  private void createStyles(){  this.redCrossStyle=kmlObjectFactory.createStyleType();  this.redCrossStyle.setId("redCrossStyle");  this.redMinusStyle=kmlObjectFactory.createStyleType();  this.redMinusStyle.setId("redMinusStyle");  this.yellowCrossStyle=kmlObjectFactory.createStyleType();  this.yellowCrossStyle.setId("yellowCrossStyle");  this.yellowMinusStyle=kmlObjectFactory.createStyleType();  this.yellowMinusStyle.setId("yellowMinusStyle");  this.greenCrossStyle=kmlObjectFactory.createStyleType();  this.greenCrossStyle.setId("greenCrossStyle");  this.greenMinusStyle=kmlObjectFactory.createStyleType();  this.greenMinusStyle.setId("greenMinusStyle");  this.greyCrossStyle=kmlObjectFactory.createStyleType();  this.greyCrossStyle.setId("greyCrossStyle");  this.greyMinusStyle=kmlObjectFactory.createStyleType();  this.greyMinusStyle.setId("greyMinusStyle");  byte[] red=new byte[]{(byte)0xFF,(byte)0x0F,(byte)0x0F,(byte)0xBE};  byte[] green=new byte[]{(byte)0xFF,(byte)0x14,(byte)0xDC,(byte)0x0A};  byte[] yellow=new byte[]{(byte)0xFF,(byte)0x14,(byte)0xE6,(byte)0xE6};  byte[] grey=new byte[]{(byte)0xFF,(byte)0x42,(byte)0x42,(byte)0x42};  HashMap<StyleType,byte[]> colors=new HashMap<StyleType,byte[]>();  colors.put(this.redCrossStyle,red);  colors.put(this.redMinusStyle,red);  colors.put(this.yellowCrossStyle,yellow);  colors.put(this.yellowMinusStyle,yellow);  colors.put(this.greenCrossStyle,green);  colors.put(this.greenMinusStyle,green);  colors.put(this.greyCrossStyle,grey);  colors.put(this.greyMinusStyle,grey);  HashMap<StyleType,String> hrefs=new HashMap<StyleType,String>();  hrefs.put(this.redCrossStyle,CROSSICON);  hrefs.put(this.redMinusStyle,MINUSICON);  hrefs.put(this.yellowCrossStyle,CROSSICON);  hrefs.put(this.yellowMinusStyle,MINUSICON);  hrefs.put(this.greenCrossStyle,CROSSICON);  hrefs.put(this.greenMinusStyle,MINUSICON);  hrefs.put(this.greyCrossStyle,CROSSICON);  hrefs.put(this.greyMinusStyle,MINUSICON);  for (  StyleType styleType : new StyleType[]{this.redCrossStyle,this.redMinusStyle,this.yellowCrossStyle,this.yellowMinusStyle,this.greenCrossStyle,this.greenMinusStyle,this.greyCrossStyle,this.greyMinusStyle}) {    IconStyleType icon=kmlObjectFactory.createIconStyleType();    icon.setColor(new byte[]{colors.get(styleType)[0],colors.get(styleType)[1],colors.get(styleType)[2],colors.get(styleType)[3]});    icon.setScale(ICONSCALE);    LinkType link=kmlObjectFactory.createLinkType();    link.setHref(hrefs.get(styleType));    icon.setIcon(link);    styleType.setIconStyle(icon);    this.mainDoc.getAbstractStyleSelectorGroup().add(kmlObjectFactory.createStyle(styleType));  }}  }
class C{  public int calcChecksum(final ChecksumUtility checker){  if (checker == null)   throw new IllegalArgumentException();  return checker.checksum(buf,0,SIZEOF_ROOT_BLOCK - SIZEOF_CHECKSUM);}  }
class C{  public static SerializedProxy makeSerializedProxy(Object proxy) throws java.io.InvalidClassException {  Class clazz=proxy.getClass();  MethodHandler methodHandler=null;  if (proxy instanceof ProxyObject)   methodHandler=((ProxyObject)proxy).getHandler(); else   if (proxy instanceof Proxy)   methodHandler=ProxyFactory.getHandler((Proxy)proxy);  return new SerializedProxy(clazz,ProxyFactory.getFilterSignature(clazz),methodHandler);}  }
class C{  public static void main(String[] args){  String userToShareWith=null;  if (args.length < 2 || args.length > 3) {    usage();    return;  } else   if (args.length == 3) {    userToShareWith=args[2];  }  CalendarService myService=new CalendarService("demo-AclFeedDemo-1");  String userName=args[0];  String userPassword=args[1];  try {    metafeedUrl=new URL(METAFEED_URL_BASE + userName);    aclFeedUrl=new URL(METAFEED_URL_BASE + userName + ACL_FEED_URL_SUFFIX);  } catch (  MalformedURLException e) {    System.err.println("Uh oh - you've got an invalid URL.");    e.printStackTrace();    return;  }  try {    myService.setUserCredentials(userName,userPassword);    printAclList(myService);    if (userToShareWith != null) {      addAccessControl(myService,userToShareWith,CalendarAclRole.FREEBUSY);      updateAccessControl(myService,userToShareWith,CalendarAclRole.READ);      deleteAccessControl(myService,userToShareWith);    }  } catch (  IOException e) {    System.err.println("There was a problem communicating with the service.");    e.printStackTrace();  }catch (  ServiceException e) {    System.err.println("The server had a problem handling your request.");    e.printStackTrace();  }}  }
class C{  public static XtremIOVolume isVolumeAvailableInArray(XtremIOClient client,String label,String clusterName){  XtremIOVolume volume=null;  try {    volume=client.getVolumeDetails(label,clusterName);  } catch (  Exception e) {    _log.info("Volume {} already deleted.",label);  }  return volume;}  }
class C{  @Override public Eval<Optional<T>> findFirst(){  return Eval.later(null);}  }
class C{  public void edit(NewArray a) throws CannotCompileException {}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:24.285 -0500",hash_original_method="4FF06135DA529EA5945D38DB9DEC9B0E",hash_generated_method="B945D9D44581F68296FA3FBD6173A146") private void pushRun(int runBase,int runLen){  this.runBase[stackSize]=runBase;  this.runLen[stackSize]=runLen;  stackSize++;}  }
class C{  public Histogram(DataSet dataSet){  if (dataSet.getVariables().size() < 1) {    throw new IllegalArgumentException("Can't do histograms for an empty data sets.");  }  this.dataSet=dataSet;  setTarget(dataSet.getVariable(0).getName());}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"IP_INFO\" ("+ "\"_id\" INTEGER PRIMARY KEY ,"+ "\"COUNTRY\" TEXT,"+ "\"COUNTRY_ID\" REAL,"+ "\"AREA\" REAL,"+ "\"AREA_ID\" REAL,"+ "\"IP\" REAL);");}  }
class C{  public PaletteSliderThumbIcon(Image[] images){  super(images);}  }
class C{  private void reset(){  isContent=false;  finished=false;}  }
class C{  public Region(String value){  this();  setValue(value);}  }
class C{  protected void onUpdateTab(TabLayout.Tab tab){  tab.setCustomView(null);}  }
class C{  public CredentialsNotAvailableException(final String message){  super(message);}  }
class C{  public EventReader provide(Reader source) throws Exception {  return provide(factory.createXMLEventReader(source));}  }
class C{  public boolean doTriggerActions(){  return _triggersActions;}  }
class C{  public void zeroDrAndCrAmounts(){  dramount=BigDecimal.ZERO;  cramount=BigDecimal.ZERO;}  }
class C{  public String encodedUsername(){  if (username.isEmpty())   return "";  int usernameStart=scheme.length() + 3;  int usernameEnd=delimiterOffset(url,usernameStart,url.length(),":@");  return url.substring(usernameStart,usernameEnd);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected final float curl(int idx){  float du_dy=(u[idx + totalWidth] - u[idx - totalWidth]) * 0.5f;  float dv_dx=(v[idx + 1] - v[idx - 1]) * 0.5f;  return du_dy - dv_dx;}  }
class C{  public static boolean isDeflated(byte[] data) throws IOException {  try {    Compression.decompress(data);  } catch (  DataFormatException e) {    return false;  }  return true;}  }
class C{  public static final boolean isLocationProviderEnabledForUser(ContentResolver cr,String provider,int userId){  String allowedProviders=Settings.Secure.getStringForUser(cr,LOCATION_PROVIDERS_ALLOWED,userId);  return TextUtils.delimitedStringContains(allowedProviders,',',provider);}  }
class C{  public void assertNotEqual(int expected,int actual,String errorMessage){  TestUtils.assertNotEqual(expected,actual,errorMessage);}  }
class C{  protected FloatControl(Type type,float minimum,float maximum,float precision,int updatePeriod,float initialValue,String units){  this(type,minimum,maximum,precision,updatePeriod,initialValue,units,"","","");}  }
class C{  public SnmpOid toOid(){  long[] oid=new long[engineId.length + 1];  oid[0]=engineId.length;  for (int i=1; i <= engineId.length; i++)   oid[i]=(long)(engineId[i - 1] & 0xFF);  return new SnmpOid(oid);}  }
class C{  public void addClusterConnection(SimpleString name,TransportConfiguration[] tcConfigs,ClusterConnectionConfiguration config){  ServerLocatorImpl serverLocator=(ServerLocatorImpl)ActiveMQClient.createServerLocatorWithHA(tcConfigs);  configAndAdd(name,serverLocator,config);}  }
class C{  public boolean isVariableListEqual(int[] variables){  return Arrays.equals(variables,this.variables);}  }
class C{  @Ignore("This test needs an existing DOI registered with EZID plugged into it each time - test DOIs are periodically purged") public void testReuseAndReserveExistingRegisteredDoiEZID() throws Exception {  AppConfig mockAppConfig=mock(AppConfig.class);  DataDir mockDataDir=mock(DataDir.class);  when(mockAppConfig.getDataDir()).thenReturn(mockDataDir);  when(mockAppConfig.getResourceUri(anyString())).thenReturn(new URI("http://130.226.238.151:7010/ipt/resource?r=test2&v=3.0"));  RegistrationManager mockRegistrationManagerEZID=mock(RegistrationManager.class);  Organisation oEZID=new Organisation();  oEZID.setKey(ORGANISATION_KEY.toString());  oEZID.setAgencyAccountPrimary(true);  oEZID.setName("GBIF");  oEZID.setDoiPrefix("10.5072/FK2");  oEZID.setCanHost(true);  oEZID.setAgencyAccountUsername("apitest");  oEZID.setAgencyAccountPassword("apitest");  oEZID.setDoiRegistrationAgency(DOIRegistrationAgency.EZID);  when(mockRegistrationManagerEZID.findPrimaryDoiAgencyAccount()).thenReturn(oEZID);  when(mockRegistrationManagerEZID.get(any(UUID.class))).thenReturn(oEZID);  ServiceConfig cfgEZID=new ServiceConfig("apitest","apitest");  EzidService ezidService=new EzidService(HttpUtil.newMultithreadedClient(10000,2,2),cfgEZID);  when(mockRegistrationManagerEZID.getDoiService()).thenReturn(ezidService);  action=new OverviewAction(mock(SimpleTextProvider.class),mockAppConfig,mockRegistrationManagerEZID,mock(ResourceManager.class),mock(UserAccountManager.class),mock(ExtensionManager.class),mock(VocabulariesManager.class),mock(GenerateDwcaFactory.class));  LOG.info("Testing EZID with test Prefix...");  action.setReserveDoi("true");  action.setResource(r);  assertNull(r.getDoi());  assertEquals(IdentifierStatus.UNRESERVED,r.getIdentifierStatus());  assertNotNull(r.getEml().getCitation());  assertNull(r.getEml().getCitation().getIdentifier());  DOI existingDOI=new DOI("doi:10.5072/FK29OGDWW");  r.setCitationAutoGenerated(true);  r.getEml().setCitation(new Citation("Replaced by auto-generated citation",existingDOI.toString()));  r.setStatus(PublicationStatus.PUBLIC);  action.reserveDoi();  assertEquals(0,action.getActionErrors().size());  assertNotNull(r.getDoi());  assertEquals(existingDOI.getDoiName(),r.getDoi().getDoiName());  assertEquals(ORGANISATION_KEY,r.getDoiOrganisationKey());  assertEquals(IdentifierStatus.PUBLIC_PENDING_PUBLICATION,r.getIdentifierStatus());  assertEquals(1,r.getEml().getAlternateIdentifiers().size());  assertEquals(r.getDoi().getUrl().toString(),r.getEml().getCitation().getIdentifier());  LOG.info("Existing registered DOI was reused successfully, DOI=" + existingDOI.getDoiName());}  }
class C{  public long forceGetValueAsLong(long defaultValue){  long[] l=getValueAsLongs();  if (l != null && l.length >= 1) {    return l[0];  }  byte[] b=getValueAsBytes();  if (b != null && b.length >= 1) {    return b[0];  }  Rational[] r=getValueAsRationals();  if (r != null && r.length >= 1 && r[0].getDenominator() != 0) {    return (long)r[0].toDouble();  }  return defaultValue;}  }
class C{  private static int hash(Object x){  int h=x.hashCode();  return ((h << 7) - h + (h >>> 9) + (h >>> 17));}  }
class C{  public void registerSerializer(Serializer serializer){  serializers.registerSerializer(serializer);}  }
class C{  @SuppressWarnings("ConstantConditions") public void addMapping(List<ClusterNode> nodes){  assert !F.isEmpty(nodes) : nodes;  ClusterNode primary=nodes.get(0);  int size=nodes.size();  if (size > 1) {    Collection<UUID> backups=txNodes.get(primary.id());    if (backups == null) {      backups=U.newHashSet(size - 1);      txNodes.put(primary.id(),backups);    }    for (int i=1; i < size; i++)     backups.add(nodes.get(i).id());  } else   txNodes.put(primary.id(),new GridLeanSet<UUID>());}  }
class C{  public void gcspyGatherData(int event,TreadmillDriver tmDriver,boolean tospace){  if (tospace)   toSpace.gcspyGatherData(tmDriver); else   fromSpace.gcspyGatherData(tmDriver);}  }
class C{  public void initElements(){  for (int i=0; i < pcms.length; i++) {    pcms[i]=new GuiPCM(10,30 + 105 * i,i,this);  }}  }
class C{  public GrammarException(String message,int line){  super(MessageFormat.format("{0} (line {1})",message,line));}  }
class C{  public void restartProxy(int hostNumber){  if (hostNumber != -1) {    proxySet.get(currentType)[hostNumber - 1].restart();  }}  }
class C{  public void close() throws java.io.IOException {  if (m_writer != null)   m_writer.close();  flushBuffer();}  }
class C{  public JSONStringer endArray() throws JSONException {  return close(Scope.EMPTY_ARRAY,Scope.NONEMPTY_ARRAY,"]");}  }
class C{  public void startCDATA(){  theNextState=S_CDATA;}  }
class C{  public final TestSubscriber assertNoValues(){  return assertValueCount(0);}  }
class C{  public Job createJobFromActivitiXml(String activitiXml,List<Parameter> parameters) throws Exception {  jobDefinitionServiceTestHelper.createJobDefinitionForActivitiXml(activitiXml);  return jobService.createAndStartJob(createJobCreateRequest(AbstractServiceTest.TEST_ACTIVITI_NAMESPACE_CD,AbstractServiceTest.TEST_ACTIVITI_JOB_NAME,parameters));}  }
class C{  public static final long flipFlop(final long b){  return ((b & MAGIC[6]) >>> 1) | ((b & MAGIC[0]) << 1);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node childNode;  Node clonedNode;  Node lastChildNode;  String childValue;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("sup");  childNode=elementList.item(1);  clonedNode=childNode.cloneNode(true);  lastChildNode=clonedNode.getLastChild();  childValue=lastChildNode.getNodeValue();  assertEquals("cloneContainsText","35,000",childValue);}  }
class C{  public void addBehaviour(Class<?> behaviour,URI type) throws ObjectStoreConfigException {  List<URI> list=behaviours.get(behaviour);  if (list == null && behaviours.containsKey(behaviour))   throw new ObjectStoreConfigException(behaviour.getSimpleName() + " can only be added once");  if (list == null) {    behaviours.put(behaviour,list=new LinkedList<URI>());  }  list.add(type);}  }
class C{  public boolean isStrict(){  return strict;}  }
class C{  public final void testGetPublic02() throws InvalidKeySpecException {  PublicKey pk=TestKeyPair.getPublic();  KeyPair kp=new KeyPair(pk,null);  assertSame(pk,kp.getPublic());}  }
class C{  public void restat(String path){  mStat=doStat(path);}  }
class C{  boolean newLine(){  boolean p=shouldPrint();  numLines++;  if (!p)   return false;  numLinesPrinted++;  int msPerLine=LogInfo.msPerLine;  if (numLines <= 2 || msPerLine == 0 || printAllLines || forcePrint)   nextLineToPrint++; else {    long elapsed_ms=watch.getCurrTimeLong();    if (elapsed_ms == 0) {      nextLineToPrint*=2;    } else     nextLineToPrint+=(int)Math.max((double)numLines * msPerLine / elapsed_ms,1);  }  forcePrint=false;  return true;}  }
class C{  public static int diffOfBits(long simHash1,long simHash2){  long bits=simHash1 ^ simHash2;  int count=0;  while (bits != 0) {    bits&=bits - 1;    ++count;  }  return count;}  }
class C{  public static <T extends Comparable<T>>Pair<Integer,T> max(T[] array){  return max(asList(array));}  }
class C{  @Override public int delete(Uri uri,String where,String[] whereArgs){  SQLiteDatabase db=getDbHelper().getWritableDatabase();  int count;switch (sUriMatcher.match(uri)) {case FORMS:    Cursor del=null;  try {    del=this.query(uri,null,where,whereArgs,null);    if (del.getCount() > 0) {      del.moveToFirst();      do {        deleteFileOrDir(del.getString(del.getColumnIndex(FormsColumns.JRCACHE_FILE_PATH)));        String formFilePath=del.getString(del.getColumnIndex(FormsColumns.FORM_FILE_PATH));        Collect.getInstance().getActivityLogger().logAction(this,"delete",formFilePath);        deleteFileOrDir(formFilePath);        deleteFileOrDir(del.getString(del.getColumnIndex(FormsColumns.FORM_MEDIA_PATH)));      } while (del.moveToNext());    }  }  finally {    if (del != null) {      del.close();    }  }count=db.delete(FORMS_TABLE_NAME,where,whereArgs);break;case FORM_ID:String formId=uri.getPathSegments().get(1);Cursor c=null;try {c=this.query(uri,null,where,whereArgs,null);if (c.getCount() > 0) {c.moveToFirst();do {deleteFileOrDir(c.getString(c.getColumnIndex(FormsColumns.JRCACHE_FILE_PATH)));String formFilePath=c.getString(c.getColumnIndex(FormsColumns.FORM_FILE_PATH));Collect.getInstance().getActivityLogger().logAction(this,"delete",formFilePath);deleteFileOrDir(formFilePath);deleteFileOrDir(c.getString(c.getColumnIndex(FormsColumns.FORM_MEDIA_PATH)));try {ItemsetDbAdapter ida=new ItemsetDbAdapter();ida.open();ida.delete(c.getString(c.getColumnIndex(FormsColumns.FORM_MEDIA_PATH)) + "/itemsets.csv");ida.close();} catch (Exception e) {}} while (c.moveToNext());}}  finally {if (c != null) {c.close();}}count=db.delete(FORMS_TABLE_NAME,FormsColumns._ID + "=" + formId+ (!TextUtils.isEmpty(where) ? " AND (" + where + ')' : ""),whereArgs);break;default :throw new IllegalArgumentException("Unknown URI " + uri);}getContext().getContentResolver().notifyChange(uri,null);return count;}  }
class C{  public static int beU2(byte[] data,int bci){  return ((data[bci] & 0xff) << 8) | (data[bci + 1] & 0xff);}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }  ArrayTable.writeArrayTable(s,clientProperties);}  }
class C{  public Builder withSocket(String socket){  this.disqueURI.connectionPoints.add(new DisqueSocket(socket));  return this;}  }
class C{  @Override public void endTransaction(){  throw new UnsupportedOperationException("Transaction Unsupported.");}  }
class C{  public boolean onRightclick(IGregTechTileEntity aBaseMetaTileEntity,EntityPlayer aPlayer){  return false;}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  private File createMessageFile(VirtualFile root,final String message) throws IOException {  File file=FileUtil.createTempFile(GIT_COMMIT_MSG_FILE_PREFIX,GIT_COMMIT_MSG_FILE_EXT);  file.deleteOnExit();  @NonNls String encoding=GitConfigUtil.getCommitEncoding(myProject,root);  Writer out=new OutputStreamWriter(new FileOutputStream(file),encoding);  try {    out.write(message);  }  finally {    out.close();  }  return file;}  }
class C{  public final CC shrinkPrio(int... widthHeight){switch (widthHeight.length) {default :    throw new IllegalArgumentException("Illegal argument count: " + widthHeight.length);case 2:  shrinkPrioY(widthHeight[1]);case 1:shrinkPrioX(widthHeight[0]);}return this;}  }
class C{  @Override public int hashCode(){  return results.hashCode();}  }
class C{  public Attribute classAttribute() throws Exception {  if (m_Dataset == null) {    throw new UnassignedDatasetException("Instance doesn't have access to a dataset!");  }  return m_Dataset.classAttribute();}  }
class C{  protected void addOptionalPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_FeatureType_optional_feature"),getString("_UI_PropertyDescriptor_description","_UI_FeatureType_optional_feature","_UI_FeatureType_type"),SGenPackage.Literals.FEATURE_TYPE__OPTIONAL,true,false,false,ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,null,null));}  }
class C{  public String correctDurationValue(String value){  if (value.matches("PT[0-9]+H")) {    for (    MatchResult mr : Toolbox.findMatches(Pattern.compile("PT([0-9]+)H"),value)) {      try {        int hours=Integer.parseInt(mr.group(1));        if ((hours % 24) == 0) {          int days=hours / 24;          value="P" + days + "D";        }      } catch (      NumberFormatException e) {        Logger.printDetail(component,"Couldn't do granularity conversion for " + value);      }    }  } else   if (value.matches("PT[0-9]+M")) {    for (    MatchResult mr : Toolbox.findMatches(Pattern.compile("PT([0-9]+)M"),value)) {      try {        int minutes=Integer.parseInt(mr.group(1));        if ((minutes % 60) == 0) {          int hours=minutes / 60;          value="PT" + hours + "H";        }      } catch (      NumberFormatException e) {        Logger.printDetail(component,"Couldn't do granularity conversion for " + value);      }    }  } else   if (value.matches("P[0-9]+M")) {    for (    MatchResult mr : Toolbox.findMatches(Pattern.compile("P([0-9]+)M"),value)) {      try {        int months=Integer.parseInt(mr.group(1));        if ((months % 12) == 0) {          int years=months / 12;          value="P" + years + "Y";        }      } catch (      NumberFormatException e) {        Logger.printDetail(component,"Couldn't do granularity conversion for " + value);      }    }  }  return value;}  }
class C{  public TaskSeries(String name){  super(name);  this.tasks=new java.util.ArrayList();}  }
class C{  @Override public void onUpdate(){  super.onUpdate();  checkOwnerFlute();  if (this.getIsBatHanging()) {    this.motionX=this.motionY=this.motionZ=0.0D;    this.posY=(double)MathHelper.floor_double(this.posY) + 1.0D - (double)this.height;  } else {    this.motionY*=0.6D;  }  if (isRecalled) {    ItemStack batstack=ItemPocketedPetBat.fromBatEntity(this);    if (batstack != null && owner != null) {      ItemStack flute=PetBatMod.instance().removeFluteFromPlayer(owner,petName);      if (owner.inventory.addItemStackToInventory(batstack)) {        worldObj.playSoundAtEntity(owner,"mob.slime.big",1F,1F);        setDeadWithoutRecall();      } else {        owner.inventory.addItemStackToInventory(flute);      }    }  }}  }
class C{  public DriverTask createVolumeClone(List<VolumeClone> clones){  LOG.info("Creating volume clone");  DellSCDriverTask task=new DellSCDriverTask("createVolumeClone");  StringBuilder errBuffer=new StringBuilder();  int createCount=0;  for (  VolumeClone clone : clones) {    try {      StorageCenterAPI api=connectionManager.getConnection(clone.getStorageSystemId());      ScReplay replay=null;      api.checkAndInitVolume(clone.getParentId());      if (clone.getSourceType() == SourceType.SNAPSHOT) {        replay=api.getReplay(clone.getParentId());      } else {        replay=api.createReplay(clone.getParentId(),5);      }      ScVolume scVol=api.createViewVolume(clone.getDisplayName(),replay.instanceId);      clone.setProvisionedCapacity(SizeUtil.sizeStrToBytes(scVol.configuredSize));      clone.setAllocatedCapacity(0L);      clone.setWwn(scVol.deviceId);      clone.setNativeId(scVol.instanceId);      clone.setDeviceLabel(scVol.name);      clone.setAccessStatus(AccessStatus.READ_WRITE);      clone.setReplicationState(ReplicationState.SYNCHRONIZED);      createCount++;    } catch (    DellSCDriverException|StorageCenterAPIException dex) {      String error=String.format("Error creating clone of volume %s: %s",clone.getParentId(),dex);      errBuffer.append(String.format("%s%n",error));    }  }  task.setMessage(errBuffer.toString());  if (createCount == clones.size()) {    task.setStatus(TaskStatus.READY);  } else   if (createCount == 0) {    task.setStatus(TaskStatus.FAILED);  } else {    task.setStatus(TaskStatus.PARTIALLY_FAILED);  }  return task;}  }
class C{  public static void execStandalone(String invokeWith,String classPath,String className,String[] args){  StringBuilder command=new StringBuilder(invokeWith);  command.append(" /system/bin/dalvikvm -classpath '").append(classPath);  command.append("' ").append(className);  Zygote.appendQuotedShellArgs(command,args);  Zygote.execShell(command.toString());}  }
class C{  public static ClassificationDataSet generate3DimIn10(Random rand,int t0,int t1,int t2){  ClassificationDataSet cds=new ClassificationDataSet(10,new CategoricalData[0],new CategoricalData(4));  int cSize=40;  for (int i=0; i < cSize; i++) {    Vec dv=DenseVector.random(10,rand);    dv.mutableDivide(3);    dv.set(t0,5.0);    dv.set(t1,5.0);    dv.set(t2,0.0);    cds.addDataPoint(dv,new int[0],0);  }  for (int i=0; i < cSize; i++) {    Vec dv=DenseVector.random(10,rand);    dv.mutableDivide(3);    dv.set(t0,5.0);    dv.set(t1,5.0);    dv.set(t2,5.0);    cds.addDataPoint(dv,new int[0],1);  }  for (int i=0; i < cSize; i++) {    Vec dv=DenseVector.random(10,rand);    dv.mutableDivide(3);    dv.set(t0,5.0);    dv.set(t1,0.0);    dv.set(t2,5.0);    cds.addDataPoint(dv,new int[0],2);  }  for (int i=0; i < cSize; i++) {    Vec dv=DenseVector.random(10,rand);    dv.mutableDivide(3);    dv.set(t0,0.0);    dv.set(t1,5.0);    dv.set(t2,5.0);    cds.addDataPoint(dv,new int[0],3);  }  return cds;}  }
class C{  private void determineBounds(){  double value, min, max;  if (m_plotInstances != null && m_plotInstances.numAttributes() > 0 && m_plotInstances.numInstances() > 0) {    min=Double.POSITIVE_INFINITY;    max=Double.NEGATIVE_INFINITY;    if (m_plotInstances.attribute(m_xIndex).isNominal()) {      m_minX=0;      m_maxX=m_plotInstances.attribute(m_xIndex).numValues() - 1;    } else {      for (int i=0; i < m_plotInstances.numInstances(); i++) {        if (!m_plotInstances.instance(i).isMissing(m_xIndex)) {          value=m_plotInstances.instance(i).value(m_xIndex);          if (value < min) {            min=value;          }          if (value > max) {            max=value;          }        }      }      if (min == Double.POSITIVE_INFINITY) {        min=max=0.0;      }      m_minX=min;      m_maxX=max;      if (min == max) {        m_maxX+=0.05;        m_minX-=0.05;      }    }    min=Double.POSITIVE_INFINITY;    max=Double.NEGATIVE_INFINITY;    if (m_plotInstances.attribute(m_yIndex).isNominal()) {      m_minY=0;      m_maxY=m_plotInstances.attribute(m_yIndex).numValues() - 1;    } else {      for (int i=0; i < m_plotInstances.numInstances(); i++) {        if (!m_plotInstances.instance(i).isMissing(m_yIndex)) {          value=m_plotInstances.instance(i).value(m_yIndex);          if (value < min) {            min=value;          }          if (value > max) {            max=value;          }        }      }      if (min == Double.POSITIVE_INFINITY) {        min=max=0.0;      }      m_minY=min;      m_maxY=max;      if (min == max) {        m_maxY+=0.05;        m_minY-=0.05;      }    }    min=Double.POSITIVE_INFINITY;    max=Double.NEGATIVE_INFINITY;    for (int i=0; i < m_plotInstances.numInstances(); i++) {      if (!m_plotInstances.instance(i).isMissing(m_cIndex)) {        value=m_plotInstances.instance(i).value(m_cIndex);        if (value < min) {          min=value;        }        if (value > max) {          max=value;        }      }    }    if (min == Double.POSITIVE_INFINITY) {      min=max=0.0;    }    m_minC=min;    m_maxC=max;  }}  }
class C{  public UnescapedCharSequence(char[] chars,boolean[] wasEscaped,int offset,int length){  this.chars=new char[length];  this.wasEscaped=new boolean[length];  System.arraycopy(chars,offset,this.chars,0,length);  System.arraycopy(wasEscaped,offset,this.wasEscaped,0,length);}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  public static <E>E parse(String jsonString,Class<E> jsonObjectClass) throws IOException {  return mapperFor(jsonObjectClass).parse(jsonString);}  }
class C{  public boolean isEmpty(){  return size() == 0;}  }
class C{  public boolean isSensitiveAction(SootMethod method){  if (!all_sys_methods.contains(method))   return false;  if (spec_methods.contains(method))   return true;  if (safe_methods.contains(method))   return false;  if (spec_methods.containsPoly(method))   return true;  if (safe_methods.containsPoly(method))   return false;  if (banned_methods.contains(method))   return true;  return false;}  }
class C{  public static DrmConvertSession open(Context context,String mimeType){  DrmManagerClient drmClient=null;  int convertSessionId=-1;  if (context != null && mimeType != null && !mimeType.equals("")) {    try {      drmClient=new DrmManagerClient(context);      try {        convertSessionId=drmClient.openConvertSession(mimeType);      } catch (      IllegalArgumentException e) {        Log.w(TAG,"Conversion of Mimetype: " + mimeType + " is not supported.",e);      }catch (      IllegalStateException e) {        Log.w(TAG,"Could not access Open DrmFramework.",e);      }    } catch (    IllegalArgumentException e) {      Log.w(TAG,"DrmManagerClient instance could not be created, context is Illegal.");    }catch (    IllegalStateException e) {      Log.w(TAG,"DrmManagerClient didn't initialize properly.");    }  }  if (drmClient == null || convertSessionId < 0) {    return null;  } else {    return new DrmConvertSession(drmClient,convertSessionId);  }}  }
class C{  public EventProcessorHost(final String hostName,final String eventHubPath,final String consumerGroupName,final String eventHubConnectionString,ICheckpointManager checkpointManager,ILeaseManager leaseManager,ExecutorService executorService){  EventProcessorHost.TRACE_LOGGER.setLevel(Level.SEVERE);  if ((hostName == null) || hostName.isEmpty()) {    throw new IllegalArgumentException("hostName argument must not be null or empty string");  }  if ((consumerGroupName == null) || consumerGroupName.isEmpty()) {    throw new IllegalArgumentException("consumerGroupName argument must not be null or empty");  }  if ((eventHubConnectionString == null) || eventHubConnectionString.isEmpty()) {    throw new IllegalArgumentException("eventHubConnectionString argument must not be null or empty");  }  ConnectionStringBuilder providedCSB=new ConnectionStringBuilder(eventHubConnectionString);  String extractedEntityPath=providedCSB.getEntityPath();  this.eventHubConnectionString=eventHubConnectionString;  if ((eventHubPath != null) && !eventHubPath.isEmpty()) {    this.eventHubPath=eventHubPath;    if (extractedEntityPath != null) {      if (eventHubPath.compareTo(extractedEntityPath) != 0) {        throw new IllegalArgumentException("Provided EventHub path in eventHubPath parameter conflicts with the path in provided EventHub connection string");      }    } else {      ConnectionStringBuilder rebuildCSB=new ConnectionStringBuilder(providedCSB.getEndpoint(),this.eventHubPath,providedCSB.getSasKeyName(),providedCSB.getSasKey());      rebuildCSB.setOperationTimeout(providedCSB.getOperationTimeout());      rebuildCSB.setRetryPolicy(providedCSB.getRetryPolicy());      this.eventHubConnectionString=rebuildCSB.toString();    }  } else {    if ((extractedEntityPath != null) && !extractedEntityPath.isEmpty()) {      this.eventHubPath=extractedEntityPath;    } else {      throw new IllegalArgumentException("Provide EventHub entity path in either eventHubPath argument or in eventHubConnectionString");    }  }  if (checkpointManager == null) {    throw new IllegalArgumentException("Must provide an object which implements ICheckpointManager");  }  if (leaseManager == null) {    throw new IllegalArgumentException("Must provide an object which implements ILeaseManager");  }  this.hostName=hostName;  this.consumerGroupName=consumerGroupName;  this.checkpointManager=checkpointManager;  this.leaseManager=leaseManager;synchronized (EventProcessorHost.weOwnExecutor) {    if (EventProcessorHost.executorService != null) {      if (EventProcessorHost.weOwnExecutor) {        EventProcessorHost.executorRefCount++;      }    } else {      if (executorService != null) {        EventProcessorHost.weOwnExecutor=false;        EventProcessorHost.executorService=executorService;        EventProcessorHost.autoShutdownExecutor=false;      } else {        EventProcessorHost.weOwnExecutor=true;        EventProcessorHost.executorService=Executors.newCachedThreadPool();        EventProcessorHost.executorRefCount++;      }    }  }  this.partitionManager=new PartitionManager(this);  logWithHost(Level.INFO,"New EventProcessorHost created");}  }
class C{  void transfer(Entry[] newTable){  Entry[] src=table;  int newCapacity=newTable.length;  for (int j=0; j < src.length; j++) {    Entry e=src[j];    if (e != null) {      src[j]=null;      do {        Entry next=e.next;        int i=indexFor(e.hash,newCapacity);        e.next=newTable[i];        newTable[i]=e;        e=next;      } while (e != null);    }  }}  }
class C{  protected void timeoutLinks(){  List<Link> eraseList=new ArrayList<Link>();  Long curTime=System.currentTimeMillis();  boolean linkChanged=false;  lock.writeLock().lock();  try {    Iterator<Entry<Link,LinkInfo>> it=this.links.entrySet().iterator();    while (it.hasNext()) {      Entry<Link,LinkInfo> entry=it.next();      Link lt=entry.getKey();      LinkInfo info=entry.getValue();      if ((info.getUnicastValidTime() != null) && (info.getUnicastValidTime().getTime() + (this.LINK_TIMEOUT * 1000) < curTime)) {        info.setUnicastValidTime(null);        linkChanged=true;      }      if ((info.getMulticastValidTime() != null) && (info.getMulticastValidTime().getTime() + (this.LINK_TIMEOUT * 1000) < curTime)) {        info.setMulticastValidTime(null);        linkChanged=true;      }      if (info.getUnicastValidTime() == null && info.getMulticastValidTime() == null) {        eraseList.add(entry.getKey());      } else       if (linkChanged) {        updates.add(new LDUpdate(lt.getSrc(),lt.getSrcPort(),lt.getDst(),lt.getDstPort(),getLinkType(lt,info),UpdateOperation.LINK_UPDATED));      }    }    if ((eraseList.size() > 0) || linkChanged) {      deleteLinks(eraseList,"LLDP timeout");    }  }  finally {    lock.writeLock().unlock();  }}  }
class C{  public void testOnServerHealthy_doesNothingIfUsersAvailable(){  when(mTroubleshooter.isServerHealthy()).thenReturn(false);  mController.init();  JsonUser user=new JsonUser("idA","nameA");  mFakeEventBus.post(new KnownUsersLoadedEvent(ImmutableSet.of(user)));  when(mTroubleshooter.isServerHealthy()).thenReturn(true);  mFakeEventBus.post(new TroubleshootingActionsChangedEvent(ImmutableSet.of(TroubleshootingAction.CHECK_PACKAGE_SERVER_CONFIGURATION),null));  verify(mMockUserManager,times(1)).loadKnownUsers();}  }
class C{  public StrTokenizer reset(){  tokenPos=0;  tokens=null;  return this;}  }
class C{  public GroupFileTransferDeleteTask(FileTransferServiceImpl fileTransferService,InstantMessagingService imService,LocalContentResolver contentResolver,String chatId){  super(contentResolver,FileTransferData.CONTENT_URI,FileTransferData.KEY_FT_ID,FileTransferData.KEY_CHAT_ID,SELECTION_FILETRANSFER_BY_CHATID,chatId);  mFileTransferService=fileTransferService;  mImService=imService;}  }
class C{  public static void fill(short[] a,short val){  fill(a,0,a.length,val);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public STGroupFile(URL url,String encoding,char delimiterStartChar,char delimiterStopChar){  super(delimiterStartChar,delimiterStopChar);  this.url=url;  this.encoding=encoding;  this.fileName=null;}  }
class C{  public static void main(String[] args){  runFileSaver(new XRFFSaver(),args);}  }
class C{  public static void muxArray(Object src,int[] dims,Object dst){  int len=getLength(dims);  if (Array.getLength(dst) != len)   throw new IllegalArgumentException("The length of src does not match the length of dst");  _fillMux(0,dims,src,dst,0);}  }
class C{  protected void removeAllPremoveDrops(){  for (  PremoveInfo info : premoves.toArray(new PremoveInfo[0])) {    if (info.isPremoveDrop) {      premoves.remove(info);    }  }}  }
class C{  private void checkPeerCertificatesPresent() throws SSLPeerUnverifiedException {  if (peerCertificates == null || peerCertificates.length == 0) {    throw new SSLPeerUnverifiedException("No peer certificates");  }}  }
class C{  @Deprecated public final int addOperator(Operator o){  for (  ExecutionUnit process : subprocesses) {    if (process.getNumberOfOperators() == 0) {      process.addOperator(o);      getLogger().warning("OperatorChain.addOperator() is deprecated! Use getSubprocess(int).addOperator(). I have added the operator to subprocess " + process.getName());    }  }  throw new UnsupportedOperationException("addOperator() is no longer supported. Failed to guess which subprocess was intended. Try getSubprocess(int).addOperator()");}  }
class C{  public RegisterServer2Response RegisterServer2(RequestHeader RequestHeader,RegisteredServer2 Server) throws ServiceFaultException, ServiceResultException {  RegisterServer2Request req=new RegisterServer2Request(RequestHeader,Server);  return (RegisterServer2Response)channel.serviceRequest(req);}  }
class C{  public static String display(final String arg){  final StringBuilder sb=new StringBuilder();  sb.append("\"");  for (int i=0; i < arg.length(); i++) {    final Character c=arg.charAt(i);    final String trans=REPLACE.get(c);    if (trans != null) {      sb.append("\\").append(trans);      continue;    }    if (c >= 32 && c < 127) {      sb.append(c);      continue;    }    sb.append("\\u");    final String hexl=Integer.toHexString(c);    final String hex=hexl.toUpperCase(Locale.getDefault());    for (int j=hex.length(); j < 4; j++) {      sb.append("0");    }    sb.append(hex);  }  sb.append("\"");  return sb.toString();}  }
class C{  public Input(InputStream inputStream){  this(4096);  if (inputStream == null)   throw new IllegalArgumentException("inputStream cannot be null.");  this.inputStream=inputStream;}  }
class C{  @Override public int hashCode(){  long hash=classHash();  hash=hash * 31 + Double.doubleToLongBits(latCenter);  hash=hash * 31 + Double.doubleToLongBits(lonMin);  return (int)(hash >> 32 + hash);}  }
class C{  public static DeterministicKeyChain watch(DeterministicKey accountKey){  return new DeterministicKeyChain(accountKey);}  }
class C{  public Object2DoubleOpenHashMap<IntRBTreeSet> confidenceMap(double supportThreshold){  List<ItemSet> itemSets=learn();  Object2DoubleOpenHashMap<IntRBTreeSet> confidenceMap=new Object2DoubleOpenHashMap<>(itemSets.size());  long intSupportThreshold=Math.round(itemSets.size() * supportThreshold);  for (  ItemSet itemSet : itemSets) {    if (itemSet.support >= intSupportThreshold) {      IntRBTreeSet itemSetCopy=new IntRBTreeSet(itemSet.items);      confidenceMap.put(itemSetCopy,itemSet.support / (double)setCount);    }  }  return confidenceMap;}  }
class C{  public boolean isFinished(){  return finished;}  }
class C{  public boolean isSetValues(){  return this.values != null;}  }
class C{  synchronized boolean readCertificates(){  if (metaEntries == null) {    return false;  }  Iterator<String> it=metaEntries.keySet().iterator();  while (it.hasNext()) {    String key=it.next();    if (key.endsWith(".DSA") || key.endsWith(".RSA")) {      verifyCertificate(key);      if (metaEntries == null) {        return false;      }      it.remove();    }  }  return true;}  }
class C{  public TrustManagerImpl(KeyStore keyStore){  this(keyStore,null);}  }
class C{  private int compareLabel(JsonObject jsonObj1,JsonObject jsonObj2){  String label1=getLabel(jsonObj1);  String label2=getLabel(jsonObj2);  return label1.compareTo(label2);}  }
class C{  public void addLayoutComponent(Component component,Object constraints){  if (constraints instanceof Constraints) {    putConstraints(component,(Constraints)constraints);  }}  }
class C{  public TechnicalServiceMultiSubscriptions(String message){  super(message);}  }
class C{  public static Core createCore(Context ctx,CoreListener listener,RcsSettings rcsSettings,ContentResolver contentResolver,LocalContentResolver localContentResolver,ContactManager contactManager,MessagingLog messagingLog,HistoryLog historyLog,RichCallHistory richCallHistory) throws IOException, KeyStoreException {  if (sInstance != null) {    return sInstance;  }synchronized (Core.class) {    if (sInstance == null) {      KeyStoreManager.loadKeyStore(rcsSettings);      sInstance=new Core(ctx,listener,contentResolver,localContentResolver,rcsSettings,contactManager,messagingLog,historyLog,richCallHistory);    }  }  return sInstance;}  }
class C{  public ToStringBuilder append(double[] array){  style.append(buffer,null,array,null);  return this;}  }
class C{  public javax.naming.Context createSubcontext(String name) throws NamingException {  return createSubcontext(new CompositeName(name));}  }
class C{  public void join(Object[] pieces){  int sum=0;  for (int x=0; x < pieces.length; x++)   sum+=((boolean[])(pieces[x])).length;  int runningsum=0;  boolean[] newgenome=new boolean[sum];  for (int x=0; x < pieces.length; x++) {    System.arraycopy(pieces[x],0,newgenome,runningsum,((boolean[])(pieces[x])).length);    runningsum+=((boolean[])(pieces[x])).length;  }  genome=newgenome;}  }
class C{  public Enumeration listOptions(){  Vector newVector=new Vector();  OptionUtils.addOption(newVector,sizeTipText(),"" + getDefaultSize(),"size");  OptionUtils.add(newVector,super.listOptions());  return OptionUtils.toEnumeration(newVector);}  }
class C{  public static void clearThreadLocals(){  createInProgress=new ThreadLocal<>();}  }
class C{  public boolean closed(){  return state == State.CLOSED;}  }
class C{  private void executeNext(){  lastSearchResult=searchExecutor.next();  processSearchResult(lastSearchResult);}  }
class C{  private boolean fireSelectionListeners(final Event originalEvent){  final Event event=new Event();  event.button=originalEvent.button;  event.display=this.getDisplay();  event.item=null;  event.widget=this;  event.data=null;  event.time=originalEvent.time;  event.x=originalEvent.x;  event.y=originalEvent.y;  for (  final SelectionListener listener : this.selectionListeners) {    final SelectionEvent selEvent=new SelectionEvent(event);    listener.widgetSelected(selEvent);    if (!selEvent.doit) {      return false;    }  }  return true;}  }
class C{  public AccessTokensBuilder warnPercentLeft(final int warnPercentLeft){  checkLock();  this.warnPercentLeft=warnPercentLeft;  return this;}  }
class C{  public <T extends B>MinMaxPriorityQueue<T> create(){  return create(Collections.<T>emptySet());}  }
class C{  public ActivitiesAnalyzer(){  this.autoConfig=true;  this.createGraphs=true;  this.observedAgents=null;  reset(0);}  }
class C{  public UpdateBuilder bind(String from,String to){  update=update.replace('%' + from + '%',to);  return this;}  }
class C{  private static boolean isLargeText(TextView textView){  float textSize=textView.getTextSize();  if ((textSize >= ContrastUtils.WCAG_LARGE_TEXT_MIN_SIZE) || ((textSize >= ContrastUtils.WCAG_LARGE_BOLD_TEXT_MIN_SIZE) && textView.getTypeface().isBold())) {    return true;  }  return false;}  }
class C{  public static ExtendedCoordinateSequenceFactory instance(){  return instance;}  }
class C{  public void printState(Vertex state,Writer writer,String indent,Set<Vertex> elements,Network network,long start,long timeout) throws IOException {  if (state.getData() instanceof BinaryData) {    Vertex detached=parseStateByteCode(state,(BinaryData)state.getData(),network);    elements.add(detached);    printState(detached,writer,indent,elements,network,start,timeout);    return;  }  printComments(state,writer,indent,false,network);  writer.write(indent);  printElement(state,writer,indent,null,null,elements,network);  writer.write(" {\r\n");  if ((System.currentTimeMillis() - start) > timeout) {    writer.write(indent);    writer.write("\t");    writer.write("** decompile timeout reached **\r\n");    writer.write(indent);    writer.write("}\r\n");    return;  }  String childIndent=indent + "\t";  Collection<Relationship> equations=state.orderedRelationships(Primitive.DO);  List<Vertex> newEquations=new ArrayList<Vertex>();  List<Vertex> newVariables=new ArrayList<Vertex>();  List<Vertex> newStates=new ArrayList<Vertex>();  if (equations != null) {    for (    Relationship equation : equations) {      printComments(equation.getTarget(),writer,indent,true,network);      if (equation.getTarget().instanceOf(Primitive.CASE)) {        printCase(equation.getTarget(),writer,childIndent,elements,newVariables,newEquations,newStates,network);      } else       if (equation.getTarget().instanceOf(Primitive.DO)) {        writer.write(childIndent);        printOperator(equation.getTarget().getRelationship(Primitive.DO),writer,indent,newEquations,newVariables,elements,network);        writer.write(";\r\n");      } else       if (equation.getTarget().instanceOf(Primitive.GOTO)) {        printGoto(equation.getTarget(),writer,childIndent,elements,network,start,timeout);      } else       if (equation.getTarget().instanceOf(Primitive.PUSH)) {        printPush(equation.getTarget(),writer,childIndent,elements,network,start,timeout);      } else       if (equation.getTarget().instanceOf(Primitive.RETURN)) {        printReturn(equation.getTarget(),writer,childIndent,elements,network,start,timeout);      }    }  }  for (  Vertex variable : newVariables) {    printVariable(variable,writer,childIndent,elements,network);  }  for (  Vertex newEquation : newEquations) {    printEquation(newEquation,writer,childIndent,elements,network);  }  newEquations=new ArrayList<Vertex>();  newVariables=new ArrayList<Vertex>();  Collection<Relationship> quotients=state.orderedRelationships(Primitive.QUOTIENT);  if (quotients != null) {    for (    Relationship quotient : quotients) {      writer.write(childIndent);      writer.write("Answer:");      writer.write(String.format("%.02f",quotient.getCorrectness()));      writer.write(":");      printElement(quotient.getTarget(),writer,indent,newEquations,newVariables,elements,network);      if (quotient.hasMeta()) {        writer.write(" {\r\n");        Collection<Relationship> previousRelationships=quotient.getMeta().orderedRelationships(Primitive.PREVIOUS);        if (previousRelationships != null) {          for (          Relationship previous : previousRelationships) {            writer.write(childIndent);            if (previous.getCorrectness() > 0) {              writer.write("\tprevious is ");            } else {              writer.write("\tprevious is not ");            }            printElement(previous.getTarget(),writer,indent + 1,newEquations,newVariables,elements,network);            writer.write(";\r\n");          }        }        writer.write(childIndent);        writer.write("}");      }      writer.write(";\r\n");      for (      Vertex variable : newVariables) {        printVariable(variable,writer,childIndent,elements,network);      }      for (      Vertex newEquation : newEquations) {        printEquation(newEquation,writer,childIndent,elements,network);      }    }  }  Collection<Relationship> possibleQuotients=state.orderedRelationships(Primitive.POSSIBLE_QUOTIENT);  if (possibleQuotients != null) {    for (    Relationship quotient : possibleQuotients) {      writer.write(childIndent);      writer.write("//Possible Quotient:");      printElement(quotient.getTarget(),writer,indent,newEquations,newVariables,elements,network);      writer.write(";\r\n");    }  }  for (  Vertex element : newStates) {    if (element.instanceOf(Primitive.STATE)) {      printState(element,writer,childIndent,elements,network,start,timeout);    }  }  writer.write(indent);  writer.write("}\r\n");}  }
class C{  public float[] toArray(float[] result,int offset){  if (result == null || result.length - offset < 2) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Vec2","toArray","missingResult"));  }  result[offset++]=(float)this.x;  result[offset]=(float)this.y;  return result;}  }
class C{  public ProgressEvent(Object source,int type,String taskDescription,float finishValue,float currentValue){  super(source);  this.finishedValue=finishValue;  this.currentValue=currentValue;  this.taskDescription=taskDescription;  this.type=type;}  }
class C{  public boolean isGhost(){  return false;}  }
class C{  boolean ensureCreated(){  if (!isCreated()) {    XCreateWindowParams params=getDelayedParams();    params.remove(DELAYED);    params.add(OVERRIDE_REDIRECT,Boolean.TRUE);    params.add(XWindow.TARGET,target);    init(params);  }  return true;}  }
class C{  public void validateBusinessObjectFormat(Integer expectedBusinessObjectFormatId,String expectedNamespaceCode,String expectedBusinessObjectDefinitionName,String expectedBusinessObjectFormatUsage,String expectedBusinessObjectFormatFileType,Integer expectedBusinessObjectFormatVersion,Boolean expectedIsLatestVersion,String expectedPartitionKey,String expectedDescription,List<Attribute> expectedAttributes,List<AttributeDefinition> expectedAttributeDefinitions,Schema expectedSchema,BusinessObjectFormat actualBusinessObjectFormat){  assertNotNull(actualBusinessObjectFormat);  if (expectedBusinessObjectFormatId != null) {    assertEquals(expectedBusinessObjectFormatId,Integer.valueOf(actualBusinessObjectFormat.getId()));  }  assertEquals(expectedNamespaceCode,actualBusinessObjectFormat.getNamespace());  assertEquals(expectedBusinessObjectDefinitionName,actualBusinessObjectFormat.getBusinessObjectDefinitionName());  assertEquals(expectedBusinessObjectFormatUsage,actualBusinessObjectFormat.getBusinessObjectFormatUsage());  assertEquals(expectedBusinessObjectFormatFileType,actualBusinessObjectFormat.getBusinessObjectFormatFileType());  assertEquals(expectedBusinessObjectFormatVersion,Integer.valueOf(actualBusinessObjectFormat.getBusinessObjectFormatVersion()));  assertEquals(expectedIsLatestVersion,actualBusinessObjectFormat.isLatestVersion());  assertEquals(expectedPartitionKey,actualBusinessObjectFormat.getPartitionKey());  AbstractServiceTest.assertEqualsIgnoreNullOrEmpty("description",expectedDescription,actualBusinessObjectFormat.getDescription());  if (!CollectionUtils.isEmpty(expectedAttributes)) {    assertEquals(expectedAttributes,actualBusinessObjectFormat.getAttributes());  } else {    assertEquals(0,actualBusinessObjectFormat.getAttributes().size());  }  if (!CollectionUtils.isEmpty(expectedAttributeDefinitions)) {    assertEquals(expectedAttributeDefinitions,actualBusinessObjectFormat.getAttributeDefinitions());  } else {    assertEquals(0,actualBusinessObjectFormat.getAttributeDefinitions().size());  }  if (expectedSchema != null) {    assertNotNull(actualBusinessObjectFormat.getSchema());    AbstractServiceTest.assertEqualsIgnoreNullOrEmpty("null value",expectedSchema.getNullValue(),actualBusinessObjectFormat.getSchema().getNullValue());    AbstractServiceTest.assertEqualsIgnoreNullOrEmpty("delimiter",expectedSchema.getDelimiter(),actualBusinessObjectFormat.getSchema().getDelimiter());    AbstractServiceTest.assertEqualsIgnoreNullOrEmpty("escape character",expectedSchema.getEscapeCharacter(),actualBusinessObjectFormat.getSchema().getEscapeCharacter());    assertEquals(expectedSchema.getPartitionKeyGroup(),actualBusinessObjectFormat.getSchema().getPartitionKeyGroup());    assertEquals(expectedSchema.getColumns().size(),actualBusinessObjectFormat.getSchema().getColumns().size());    for (int i=0; i < expectedSchema.getColumns().size(); i++) {      SchemaColumn expectedSchemaColumn=expectedSchema.getColumns().get(i);      SchemaColumn actualSchemaColumn=actualBusinessObjectFormat.getSchema().getColumns().get(i);      assertEquals(expectedSchemaColumn.getName(),actualSchemaColumn.getName());      assertEquals(expectedSchemaColumn.getType(),actualSchemaColumn.getType());      assertEquals(expectedSchemaColumn.getSize(),actualSchemaColumn.getSize());      assertEquals(expectedSchemaColumn.isRequired(),actualSchemaColumn.isRequired());      assertEquals(expectedSchemaColumn.getDefaultValue(),actualSchemaColumn.getDefaultValue());      assertEquals(expectedSchemaColumn.getDescription(),actualSchemaColumn.getDescription());    }    if (CollectionUtils.isEmpty(expectedSchema.getPartitions())) {      assertTrue(CollectionUtils.isEmpty(actualBusinessObjectFormat.getSchema().getPartitions()));    } else {      for (int i=0; i < expectedSchema.getPartitions().size(); i++) {        SchemaColumn expectedPartitionColumn=expectedSchema.getPartitions().get(i);        SchemaColumn actualPartitionColumn=actualBusinessObjectFormat.getSchema().getPartitions().get(i);        assertEquals(expectedPartitionColumn.getName(),actualPartitionColumn.getName());        assertEquals(expectedPartitionColumn.getType(),actualPartitionColumn.getType());        assertEquals(expectedPartitionColumn.getSize(),actualPartitionColumn.getSize());        assertEquals(expectedPartitionColumn.isRequired(),actualPartitionColumn.isRequired());        assertEquals(expectedPartitionColumn.getDefaultValue(),actualPartitionColumn.getDefaultValue());        assertEquals(expectedPartitionColumn.getDescription(),actualPartitionColumn.getDescription());      }    }  } else {    assertNull(actualBusinessObjectFormat.getSchema());  }}  }
class C{  int findEndText(String source,int ofs){  for (int i=ofs; i < source.length(); i++) {    if (isAlpha(source.charAt(i)) == false && isNumeric(source.charAt(i)) == false) {      return i;    }  }  return -1;}  }
class C{  public DeletionConstraintException(String message){  super(message);}  }
class C{  public Response.Builder readResponse() throws IOException {  if (state != STATE_OPEN_REQUEST_BODY && state != STATE_READ_RESPONSE_HEADERS) {    throw new IllegalStateException("state: " + state);  }  try {    while (true) {      StatusLine statusLine=StatusLine.parse(source.readUtf8LineStrict());      Response.Builder responseBuilder=new Response.Builder().protocol(statusLine.protocol).code(statusLine.code).message(statusLine.message).headers(readHeaders());      if (statusLine.code != HTTP_CONTINUE) {        state=STATE_OPEN_RESPONSE_BODY;        return responseBuilder;      }    }  } catch (  EOFException e) {    IOException exception=new IOException("unexpected end of stream on " + streamAllocation);    exception.initCause(e);    throw exception;  }}  }
class C{  public Polygon createPolygon(LinearRing shell,LinearRing[] holes){  return new Polygon(shell,holes,this);}  }
class C{  private void refreshRestaurants(Context context,ContentProviderClient cp) throws RemoteException {  int rows=Content.getCount(context,RESTAURANTS_URI);  int days=30;  Uri uri=Uris.limit(RESTAURANTS_URI,rows / days + 1);  String[] proj={_ID,Restaurants.PLACE_ID};  String sel=Restaurants.PLACE_ID + " IS NOT NULL AND " + Restaurants.PLACE_ID+ " NOT LIKE 'NOT_FOUND_%' AND ("+ Restaurants.REFRESHED_ON+ " IS NULL OR "+ Restaurants.REFRESHED_ON+ " <= datetime('now', '-"+ days+ " days')) AND "+ Restaurants.STATUS_ID+ " = ?";  String[] args={String.valueOf(ACTIVE.id)};  String order=Restaurants.REFRESHED_ON + " IS NULL DESC, " + Restaurants.REFRESHED_ON+ ", "+ _ID;  EasyCursor c=new EasyCursor(cp.query(uri,proj,sel,args,order));  Result[] results=null;  try {    results=RestaurantsRefreshService.refresh(c);  } catch (  IOException e) {    Log.e(TAG,"refreshing restaurants",e);    exception(e);  }  c.close();  if (results != null) {    for (    Result result : results) {      if (result.newReviewTimes != null) {        int size=result.newReviewTimes.size();        for (int i=0; i < size; i++) {          cp.insert(SYNCS_URI,Syncs.values(result.newReviewTimes.keyAt(i),result.newReviewTimes.valueAt(i)));        }      }    }  }}  }
class C{  public static void fixRectForAspectRatio(Rect rect,int aspectRatioX,int aspectRatioY){  if (aspectRatioX == aspectRatioY && rect.width() != rect.height()) {    if (rect.height() > rect.width()) {      rect.bottom-=rect.height() - rect.width();    } else {      rect.right-=rect.width() - rect.height();    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:09.918 -0500",hash_original_method="BD3CEF4F9337B2BC7C235E398D43BE2A",hash_generated_method="AEC1C8C7C09A3C195FC2992BF8B6587C") public int prestartAllCoreThreads(){  int n=0;  while (addWorker(null,true))   ++n;  return n;}  }
class C{  void pauseMigrations(List<String> migrationNames) throws VPlexApiException {  s_logger.info("Pausing migrations {}",migrationNames);  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();  List<VPlexMigrationInfo> migrationInfoList=discoveryMgr.findMigrations(migrationNames);  StringBuilder migrationArgBuilder=new StringBuilder();  for (  VPlexMigrationInfo migrationInfo : migrationInfoList) {    String migrationStatus=migrationInfo.getStatus();    if (VPlexApiConstants.MIGRATION_PAUSED.equals(migrationStatus)) {      continue;    } else     if (!VPlexApiConstants.MIGRATION_INPROGRESS.equals(migrationInfo.getStatus())) {      throw VPlexApiException.exceptions.cantPauseMigrationNotInProgress(migrationInfo.getName());    }    if (migrationArgBuilder.length() != 0) {      migrationArgBuilder.append(",");    }    migrationArgBuilder.append(migrationInfo.getPath());  }  String migrationPaths=migrationArgBuilder.toString();  if (migrationPaths.length() == 0) {    s_logger.info("All requested migrations are already paused");    return;  }  URI requestURI=_vplexApiClient.getBaseURI().resolve(VPlexApiConstants.URI_PAUSE_MIGRATIONS);  s_logger.info("Pause migrations URI is {}",requestURI.toString());  ClientResponse response=null;  try {    s_logger.info("Pausing migrations");    Map<String,String> argsMap=new HashMap<String,String>();    argsMap.put(VPlexApiConstants.ARG_DASH_M,migrationArgBuilder.toString());    JSONObject postDataObject=VPlexApiUtils.createPostData(argsMap,false);    s_logger.info("Pause migrations POST data is {}",postDataObject.toString());    response=_vplexApiClient.post(requestURI,postDataObject.toString());    String responseStr=response.getEntity(String.class);    s_logger.info("Pause migrations response is {}",responseStr);    if (response.getStatus() != VPlexApiConstants.SUCCESS_STATUS) {      if (response.getStatus() == VPlexApiConstants.ASYNC_STATUS) {        s_logger.info("Pause migrations is completing asynchronously");        _vplexApiClient.waitForCompletion(response);      } else {        String cause=VPlexApiUtils.getCauseOfFailureFromResponse(responseStr);        throw VPlexApiException.exceptions.pauseMigrationsFailureStatus(migrationNames,String.valueOf(response.getStatus()),cause);      }    }    s_logger.info("Successfully paused migrations {}",migrationNames);  } catch (  VPlexApiException vae) {    throw vae;  }catch (  Exception e) {    throw VPlexApiException.exceptions.failedPauseMigrations(migrationNames,e);  } finally {    if (response != null) {      response.close();    }  }}  }
class C{  public static AddNeuronsDialog createAddNeuronsDialog(final NetworkPanel networkPanel){  final AddNeuronsDialog addND=new AddNeuronsDialog(networkPanel);  addND.combinedNeuronInfoPanel=NeuronPropertiesPanel.createNeuronPropertiesPanel(Collections.singletonList(addND.baseNeuron),addND,false);  addND.init();  addND.combinedNeuronInfoPanel.getUpdateRulePanel().getCbNeuronType().addActionListener(null);  return addND;}  }
class C{  private void send(SimpleMailMessage msg) throws MailException {  mailSender.send(msg);}  }
class C{  public static String toPMML(Instances train,Instances structureAfterFiltering,double[][] par,int numClasses){  PMML pmml=initPMML();  addDataDictionary(train,pmml);  String currentAttrName=null;  TransformationDictionary transformDict=null;  LocalTransformations localTransforms=null;  MiningSchema schema=new MiningSchema();  for (int i=0; i < structureAfterFiltering.numAttributes(); i++) {    Attribute attr=structureAfterFiltering.attribute(i);    Attribute originalAttr=train.attribute(attr.name());    if (i == structureAfterFiltering.classIndex()) {      schema.addMiningFields(new MiningField(attr.name(),FIELDUSAGETYPE.PREDICTED));    }    if (originalAttr == null) {      if (localTransforms == null) {        localTransforms=new LocalTransformations();      }      if (transformDict == null) {        transformDict=new TransformationDictionary();      }      String[] nameAndValue=getNameAndValueFromUnsupervisedNominalToBinaryDerivedAttribute(train,attr);      if (!nameAndValue[0].equals(currentAttrName)) {        currentAttrName=nameAndValue[0];        if (i != structureAfterFiltering.classIndex()) {          int mode=(int)train.meanOrMode(train.attribute(nameAndValue[0]));          schema.addMiningFields(new MiningField(nameAndValue[0],FIELDUSAGETYPE.ACTIVE,MISSINGVALUETREATMENTMETHOD.AS_MODE,train.attribute(nameAndValue[0]).value(mode)));        }      }      DerivedField derivedfield=new DerivedField(attr.name(),DATATYPE.DOUBLE,OPTYPE.CONTINUOUS);      NormDiscrete normDiscrete=new NormDiscrete(nameAndValue[0],nameAndValue[1]);      derivedfield.setNormDiscrete(normDiscrete);      transformDict.addDerivedField(derivedfield);    } else {      if (i != structureAfterFiltering.classIndex()) {        if (originalAttr.isNumeric()) {          String mean="" + train.meanOrMode(originalAttr);          schema.addMiningFields(new MiningField(originalAttr.name(),FIELDUSAGETYPE.ACTIVE,MISSINGVALUETREATMENTMETHOD.AS_MEAN,mean));        } else {          int mode=(int)train.meanOrMode(originalAttr);          schema.addMiningFields(new MiningField(originalAttr.name(),FIELDUSAGETYPE.ACTIVE,MISSINGVALUETREATMENTMETHOD.AS_MODE,originalAttr.value(mode)));        }      }    }  }  RegressionModel model=new RegressionModel();  if (transformDict != null) {    pmml.setTransformationDictionary(transformDict);  }  model.addContent(schema);  model.setFunctionName(MININGFUNCTION.CLASSIFICATION);  model.setAlgorithmName("logisticRegression");  model.setModelType("logisticRegression");  model.setNormalizationMethod(REGRESSIONNORMALIZATIONMETHOD.SOFTMAX);  Output output=new Output();  Attribute classAttribute=structureAfterFiltering.classAttribute();  for (int i=0; i < classAttribute.numValues(); i++) {    OutputField outputField=new OutputField();    outputField.setName(classAttribute.name());    outputField.setValue(classAttribute.value(i));    output.addOutputField(outputField);  }  model.addContent(output);  for (int i=0; i < numClasses - 1; i++) {    RegressionTable table=new RegressionTable(structureAfterFiltering.classAttribute().value(i));    int j=1;    for (int k=0; k < structureAfterFiltering.numAttributes(); k++) {      if (k != structureAfterFiltering.classIndex()) {        Attribute attr=structureAfterFiltering.attribute(k);        table.addNumericPredictor(new NumericPredictor(attr.name(),BigInteger.valueOf(1),par[j][i]));        j++;      }    }    table.setIntercept(par[0][i]);    model.addContent(table);  }  pmml.addAssociationModelOrBaselineModelOrClusteringModes(model);  try {    StringWriter sw=new StringWriter();    JAXBContext jc=JAXBContext.newInstance(PMML.class);    Marshaller marshaller=jc.createMarshaller();    marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);    marshaller.marshal(pmml,sw);    return sw.toString();  } catch (  JAXBException e) {    e.printStackTrace();  }  return "";}  }
class C{  public static Set<InetAddress> myPublicIPv4(){  return publicIPv4HostAddresses;}  }
class C{  public EventReplayer inAscendingOrder(){  return new EventReplayer(events,null,filter);}  }
class C{  public static ComponentUI createUI(JComponent button){  return UI;}  }
class C{  private void recoverProductionAndWait(FunctionalAPIImpl impl,ConsistencyGroupCopyUID groupCopy) throws FunctionalAPIActionFailedException_Exception, FunctionalAPIInternalError_Exception, RecoverPointException, InterruptedException {  logger.info("Wait for recoverProduction to complete");  impl.recoverProduction(groupCopy,true);  logger.info("Wait for recoverProduction to complete");  this.waitForCGCopyState(impl,groupCopy,false,ImageAccessMode.UNKNOWN);}  }
class C{  public Marker(GraphicsNode markerNode,Point2D ref,double orient){  if (markerNode == null) {    throw new IllegalArgumentException();  }  if (ref == null) {    throw new IllegalArgumentException();  }  this.markerNode=markerNode;  this.ref=ref;  this.orient=orient;}  }
class C{  public static UnicodeEscaper below(final int codepoint){  return outsideOf(codepoint,Integer.MAX_VALUE);}  }
class C{  @Override public double classProb(int classIndex,Instance instance,int theSubset) throws Exception {  if (theSubset > -1) {    return m_globalNB.classProb(classIndex,instance,theSubset);  } else {    throw new Exception("This shouldn't happen!!!");  }}  }
class C{  public boolean equals(Object obj2){  if (null == obj2)   return false;  if (obj2 instanceof XNumber)   return obj2.equals(this); else   if (obj2 instanceof XNodeSet)   return obj2.equals(this); else   if (obj2 instanceof XStringForFSB)   return equals((XMLString)obj2); else   return equals(obj2.toString());}  }
class C{  public String globalInfo(){  return "Evaluates the classifier using cross-validation. Order can be preserved.";}  }
class C{  public SQLSetStatement parseAssign(){  accept(Token.SET);  SQLSetStatement stmt=new SQLSetStatement(getDbType());  parseAssignItems(stmt.getItems(),stmt);  return stmt;}  }
class C{  private GWTJavaProblem(String filename,int offset,int length,int line,int column,GWTProblemType problemType,GdtProblemSeverity severity,String[] messageArguments,String[] problemArguments){  super(filename,offset,length,line,column,problemType,severity,messageArguments,problemArguments);}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/continuous-copies/swap") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskList swap(@PathParam("id") URI id,CopiesParam param) throws ControllerException {  TaskResourceRep taskResp=null;  TaskList taskList=new TaskList();  ArgValidator.checkFieldUriType(id,BlockConsistencyGroup.class,"id");  ArgValidator.checkFieldNotEmpty(param.getCopies(),"copies");  final BlockConsistencyGroup consistencyGroup=(BlockConsistencyGroup)queryResource(id);  if (!consistencyGroup.created()) {    throw APIException.badRequests.consistencyGroupNotCreated();  }  List<Copy> copies=param.getCopies();  if (copies.size() > 1) {    throw APIException.badRequests.swapCopiesParamCanOnlyBeOne();  }  Copy copy=copies.get(0);  ArgValidator.checkFieldUriType(copy.getCopyID(),VirtualArray.class,"copyId");  ArgValidator.checkFieldNotEmpty(copy.getType(),"type");  if (TechnologyType.RP.name().equalsIgnoreCase(copy.getType())) {    taskResp=performProtectionAction(id,copy,ProtectionOp.SWAP.getRestOp());    taskList.getTaskList().add(taskResp);  } else   if (TechnologyType.SRDF.name().equalsIgnoreCase(copy.getType())) {    taskResp=performSRDFProtectionAction(id,copy,ProtectionOp.SWAP.getRestOp());    taskList.getTaskList().add(taskResp);  } else {    throw APIException.badRequests.invalidCopyType(copy.getType());  }  return taskList;}  }
class C{  public void testNotZero(){  byte rBytes[]={-1};  BigInteger aNumber=BigInteger.ZERO;  BigInteger result=aNumber.not();  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public String fireModelChange(PO po,int changeType){  if (po == null || m_modelChangeListeners.size() == 0)   return null;  String propertyName=po.get_TableName() + "*";  ArrayList<ModelValidator> list=m_modelChangeListeners.get(propertyName);  if (list != null) {    String error=fireModelChange(po,changeType,list);    if (error != null && error.length() > 0)     return error;  }  propertyName=po.get_TableName() + po.getAD_Client_ID();  list=m_modelChangeListeners.get(propertyName);  if (list != null) {    String error=fireModelChange(po,changeType,list);    if (error != null && error.length() > 0)     return error;  }  List<MTableScriptValidator> scriptValidators=MTableScriptValidator.getModelValidatorRules(po.getCtx(),po.get_Table_ID(),ModelValidator.tableEventValidators[changeType]);  if (scriptValidators != null) {    for (    MTableScriptValidator scriptValidator : scriptValidators) {      MRule rule=MRule.get(po.getCtx(),scriptValidator.getAD_Rule_ID());      if (rule != null && rule.isActive() && rule.getRuleType().equals(MRule.RULETYPE_JSR223ScriptingAPIs) && rule.getEventType().equals(MRule.EVENTTYPE_ModelValidatorTableEvent)) {        String error;        try {          ScriptEngine engine=rule.getScriptEngine();          MRule.setContext(engine,po.getCtx(),0);          engine.put(MRule.ARGUMENTS_PREFIX + "Ctx",po.getCtx());          engine.put(MRule.ARGUMENTS_PREFIX + "PO",po);          engine.put(MRule.ARGUMENTS_PREFIX + "Type",changeType);          engine.put(MRule.ARGUMENTS_PREFIX + "Event",ModelValidator.tableEventValidators[changeType]);          Object retval=engine.eval(rule.getScript());          error=(retval == null ? "" : retval.toString());        } catch (        Exception e) {          e.printStackTrace();          error=e.toString();        }        if (error != null && error.length() > 0)         return error;      }    }  }  return null;}  }
class C{  public void write(ByteCodeWriter out) throws IOException {  out.writeUTF8Const(getName());  out.writeInt(_value.length);  out.write(_value,0,_value.length);}  }
class C{  public static void writeStringToFile(File file,String data,boolean append) throws IOException {  writeStringToFile(file,data,Charset.defaultCharset(),append);}  }
class C{  public void shutdown(){  mClassNameToClassMap.clear();  mPackageMonitor.unregister();}  }
class C{  public static Date monthBefore(final Date date){  return dateFrom(date,1,CalendarUnit.MONTH,Occurrence.BEFORE);}  }
class C{  public boolean isActive(){  return active;}  }
class C{  public void testEquals(){  UsernameAttribute usernameAttribute2=new UsernameAttribute();  usernameAttribute2.setUsername(usernameValue.getBytes());  assertEquals("testequals failed",usernameAttribute,usernameAttribute2);  usernameAttribute2=new UsernameAttribute();  usernameAttribute2.setUsername("some other username".getBytes());  assertFalse("testequals failed",usernameAttribute.equals(usernameAttribute2));  assertFalse("testequals failed",usernameAttribute.equals(null));}  }
class C{  public static void checkInt(Integer expected,IonValue actual){  checkInt((expected == null ? null : expected.longValue()),actual);}  }
class C{  public static DeposePrimaryBucketResponse send(InternalDistributedMember recipient,PartitionedRegion region,int bucketId){  Assert.assertTrue(recipient != null,"DeposePrimaryBucketMessage NULL recipient");  DeposePrimaryBucketResponse response=new DeposePrimaryBucketResponse(region.getSystem(),recipient,region);  DeposePrimaryBucketMessage msg=new DeposePrimaryBucketMessage(recipient,region.getPRId(),response,bucketId);  Set<InternalDistributedMember> failures=region.getDistributionManager().putOutgoing(msg);  if (failures != null && failures.size() > 0) {    return null;  }  region.getPrStats().incPartitionMessagesSent();  return response;}  }
class C{  public CompositeTransferable(){}  }
class C{  public static <T extends SerializableEntity>Deserializer roundtripSerializableEntityWithBinarySerializer(final T originalEntity,final AccountLookup accountLookup){  final BinarySerializer binarySerializer=new BinarySerializer();  originalEntity.serialize(binarySerializer);  return new BinaryDeserializer(binarySerializer.getBytes(),new DeserializationContext(accountLookup));}  }
class C{  private void addExternalLinks(Document doc,Eml eml) throws DocumentException {  if (!eml.getPhysicalData().isEmpty()) {    Paragraph p=new Paragraph();    p.setAlignment(Element.ALIGN_JUSTIFIED);    p.setFont(font);    p.add(new Phrase(getText("rtf.dtasets.external"),fontTitle));    p.add(Chunk.NEWLINE);    p.add(Chunk.NEWLINE);    for (    PhysicalData data : eml.getPhysicalData()) {      p.add(new Phrase(getText("rtf.datasets.description"),fontTitle));      p.add(Chunk.NEWLINE);      if (exists(data.getName())) {        p.add(new Phrase(getText("rtf.datasets.object") + ": ",fontTitle));        p.add(data.getName());        p.add(Chunk.NEWLINE);      }      if (exists(data.getCharset())) {        p.add(new Phrase(getText("rtf.datasets.character") + ": ",fontTitle));        p.add(data.getCharset());        p.add(Chunk.NEWLINE);      }      if (exists(data.getFormat())) {        p.add(new Phrase(getText("rtf.datasets.format") + ": ",fontTitle));        p.add(data.getFormat());        p.add(Chunk.NEWLINE);      }      if (exists(data.getFormatVersion())) {        p.add(new Phrase(getText("rtf.datasets.format.version") + ": ",fontTitle));        p.add(data.getFormatVersion());        p.add(Chunk.NEWLINE);      }      if (exists(data.getDistributionUrl())) {        p.add(new Phrase(getText("rtf.datasets.distribution") + ": ",fontTitle));        Anchor distributionLink=new Anchor(data.getDistributionUrl(),fontLink);        distributionLink.setReference(data.getDistributionUrl());        p.add(distributionLink);        p.add(Chunk.NEWLINE);      }      p.add(Chunk.NEWLINE);    }    doc.add(p);    p.clear();  }}  }
class C{  public AuditLogTooManyRowsException(){  super();}  }
class C{  private void createContent(){switch (this.alignment) {case SWT.CENTER:    createSeparator();  createTitle();createSeparator();break;case SWT.LEFT:createTitle();createSeparator();break;default :createSeparator();createTitle();break;}}  }
class C{  public Class<?> findClass(String className,ClassLoader loader) throws ReflectionException {  return loadClass(className,loader);}  }
class C{  public boolean isSetRegisterRequest(){  return this.registerRequest != null;}  }
class C{  public boolean rejectIt(){  log.info("rejectIt - " + toString());  setIsApproved(false);  return true;}  }
class C{  private void prepareTechnicalProduct(TechnicalProduct tProd) throws NonUniqueBusinessKeyException {  ParameterDefinition pd=TechnicalProducts.addParameterDefinition(ParameterValueType.INTEGER,"intParam",ParameterType.SERVICE_PARAMETER,tProd,mgr,null,null,true);  ParameterOption option=new ParameterOption();  option.setOptionId("OPT");  option.setParameterDefinition(pd);  List<ParameterOption> list=new ArrayList<ParameterOption>();  list.add(option);  pd.setOptionList(list);  mgr.persist(option);  TechnicalProducts.addEvent("eventId",EventType.SERVICE_EVENT,tProd,mgr);}  }
class C{  private boolean hasHour(){  return getHour() != null;}  }
class C{  public Tasks<BlockSnapshotSessionRestRep> linkTargets(URI snapshotSessionId,SnapshotSessionLinkTargetsParam linkTargetsParam){  return postTasks(linkTargetsParam,getIdUrl() + "/link-targets",snapshotSessionId);}  }
class C{  protected void appendAndPush(StylesheetHandler handler,ElemTemplateElement elem) throws org.xml.sax.SAXException {  handler.pushElemTemplateElement(elem);}  }
class C{  public boolean storesUpperCaseQuotedIdentifiers() throws SQLException {  return false;}  }
class C{  public static String validateCheckNo(String CheckNo){  int length=checkNumeric(CheckNo).length();  if (length > 0)   return "";  return "PaymentBankCheckNotValid";}  }
class C{  public final void initLineSource(String lineSource){  if (lineSource == null)   throw new IllegalArgumentException();  if (this.lineSource != null)   throw new IllegalStateException();  this.lineSource=lineSource;}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public void remove(String name){  if (impl.formalArguments == null) {    if (impl.hasFormalArgs) {      throw new IllegalArgumentException("no such attribute: " + name);    }    return;  }  FormalArgument arg=impl.formalArguments.get(name);  if (arg == null) {    throw new IllegalArgumentException("no such attribute: " + name);  }  locals[arg.index]=EMPTY_ATTR;}  }
class C{  private void deleteObsoleteEntries(DBTransaction transaction,Set<SearchIndexEntry> toDelete) throws SQLException {  StringBuilder sql=new StringBuilder();  sql.append("DELETE FROM searchindex WHERE id IN (");  boolean first=true;  for (  SearchIndexEntry entry : toDelete) {    if (first) {      first=false;    } else {      sql.append(",");    }    sql.append(String.valueOf(entry.getDbId()));  }  sql.append(")");  if (!first) {    transaction.execute(sql.toString(),null);  }}  }
class C{  public FciMax(IndependenceTest independenceTest){  if (independenceTest == null || knowledge == null) {    throw new NullPointerException();  }  this.independenceTest=independenceTest;  this.variables.addAll(independenceTest.getVariables());  buildIndexing(independenceTest.getVariables());}  }
class C{  public void testOffer(){  storedQueue.clear();  assertTrue(storedQueue.isEmpty());  assertTrue(storedQueue.offer(String.valueOf(0)));  assertTrue(storedQueue.offer(String.valueOf(1)));  assertEquals(2,storedQueue.size());}  }
class C{  private void loadDrawerFragments(){  getSupportFragmentManager().beginTransaction().replace(R.id.nav_drawer_container,new NavigationDrawerFragment()).commit();  mQueueDrawerFragment=new QueueDrawerFragment();  getSupportFragmentManager().beginTransaction().replace(R.id.current_queue_drawer_container,mQueueDrawerFragment).commit();}  }
class C{  public static byte[] serializeToByteArray(Object value){  try {    ByteArrayOutputStream buffer=new ByteArrayOutputStream();    try (ObjectOutputStream oos=new ObjectOutputStream(buffer)){      oos.writeObject(value);    }     return buffer.toByteArray();  } catch (  IOException exn) {    throw new IllegalArgumentException("unable to serialize " + value,exn);  }}  }
class C{  private static boolean isIPv6(String host){  return host.contains(":");}  }
class C{  public static void storeBugCollection(IProject project,final SortedBugCollection bugCollection,IProgressMonitor monitor) throws IOException, CoreException {  project.setSessionProperty(SESSION_PROPERTY_BUG_COLLECTION,bugCollection);  if (bugCollection != null) {    writeBugCollection(project,bugCollection,monitor);  }}  }
class C{  public void lineTo(float x,float y){  mPoints.add(PathPoint.lineTo(x,y));}  }
class C{  public int vLength(){  return nV;}  }
class C{  public void testUnsupportedOldIndexes() throws Exception {  for (int i=0; i < unsupportedNames.length; i++) {    if (VERBOSE) {      System.out.println("TEST: index " + unsupportedNames[i]);    }    Path oldIndexDir=createTempDir(unsupportedNames[i]);    TestUtil.unzip(getDataInputStream("unsupported." + unsupportedNames[i] + ".zip"),oldIndexDir);    BaseDirectoryWrapper dir=newFSDirectory(oldIndexDir);    dir.setCheckIndexOnClose(false);    IndexReader reader=null;    IndexWriter writer=null;    try {      reader=DirectoryReader.open(dir);      fail("DirectoryReader.open should not pass for " + unsupportedNames[i]);    } catch (    IndexFormatTooOldException e) {      if (e.getReason() != null) {        assertNull(e.getVersion());        assertNull(e.getMinVersion());        assertNull(e.getMaxVersion());        assertEquals(e.getMessage(),new IndexFormatTooOldException(e.getResourceDescription(),e.getReason()).getMessage());      } else {        assertNotNull(e.getVersion());        assertNotNull(e.getMinVersion());        assertNotNull(e.getMaxVersion());        assertTrue(e.getMessage(),e.getMaxVersion() >= e.getMinVersion());        assertTrue(e.getMessage(),e.getMaxVersion() < e.getVersion() || e.getVersion() < e.getMinVersion());        assertEquals(e.getMessage(),new IndexFormatTooOldException(e.getResourceDescription(),e.getVersion(),e.getMinVersion(),e.getMaxVersion()).getMessage());      }      if (VERBOSE) {        System.out.println("TEST: got expected exc:");        e.printStackTrace(System.out);      }    } finally {      if (reader != null)       reader.close();      reader=null;    }    try {      writer=new IndexWriter(dir,newIndexWriterConfig(new MockAnalyzer(random())).setCommitOnClose(false));      fail("IndexWriter creation should not pass for " + unsupportedNames[i]);    } catch (    IndexFormatTooOldException e) {      if (e.getReason() != null) {        assertNull(e.getVersion());        assertNull(e.getMinVersion());        assertNull(e.getMaxVersion());        assertEquals(e.getMessage(),new IndexFormatTooOldException(e.getResourceDescription(),e.getReason()).getMessage());      } else {        assertNotNull(e.getVersion());        assertNotNull(e.getMinVersion());        assertNotNull(e.getMaxVersion());        assertTrue(e.getMessage(),e.getMaxVersion() >= e.getMinVersion());        assertTrue(e.getMessage(),e.getMaxVersion() < e.getVersion() || e.getVersion() < e.getMinVersion());        assertEquals(e.getMessage(),new IndexFormatTooOldException(e.getResourceDescription(),e.getVersion(),e.getMinVersion(),e.getMaxVersion()).getMessage());      }      if (VERBOSE) {        System.out.println("TEST: got expected exc:");        e.printStackTrace(System.out);      }      assertTrue("got exc message: " + e.getMessage(),e.getMessage().indexOf("path=\"") != -1);    } finally {      if (writer != null) {        try {          writer.commit();        }  finally {          writer.close();        }      }      writer=null;    }    ByteArrayOutputStream bos=new ByteArrayOutputStream(1024);    CheckIndex checker=new CheckIndex(dir);    checker.setInfoStream(new PrintStream(bos,false,IOUtils.UTF_8));    CheckIndex.Status indexStatus=checker.checkIndex();    assertFalse(indexStatus.clean);    assertTrue(bos.toString(IOUtils.UTF_8).contains(IndexFormatTooOldException.class.getName()));    checker.close();    dir.close();  }}  }
class C{  public void archiveList(){}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == VariableEnvironmentElement.class) {switch (derivedFeatureID) {default :      return -1;  }}if (baseClass == NamedElement.class) {switch (derivedFeatureID) {default :    return -1;}}if (baseClass == PropertyNameOwner.class) {switch (derivedFeatureID) {case N4JSPackage.PROPERTY_ASSIGNMENT__DECLARED_NAME:  return N4JSPackage.PROPERTY_NAME_OWNER__DECLARED_NAME;default :return -1;}}if (baseClass == TypableElement.class) {switch (derivedFeatureID) {default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public WriteBuffer putVarInt(int x){  DataUtils.writeVarInt(ensureCapacity(5),x);  return this;}  }
class C{  public static void UF8(double[] x,double[] f,int nx){  int count1=0;  int count2=0;  int count3=0;  double sum1=0.0;  double sum2=0.0;  double sum3=0.0;  double yj;  for (int j=3; j <= nx; j++) {    yj=x[j - 1] - 2.0 * x[1] * Math.sin(2.0 * PI * x[0] + j * PI / nx);    if (j % 3 == 1) {      sum1+=yj * yj;      count1++;    } else     if (j % 3 == 2) {      sum2+=yj * yj;      count2++;    } else {      sum3+=yj * yj;      count3++;    }  }  f[0]=Math.cos(0.5 * PI * x[0]) * Math.cos(0.5 * PI * x[1]) + 2.0 * sum1 / (double)count1;  f[1]=Math.cos(0.5 * PI * x[0]) * Math.sin(0.5 * PI * x[1]) + 2.0 * sum2 / (double)count2;  f[2]=Math.sin(0.5 * PI * x[0]) + 2.0 * sum3 / (double)count3;}  }
class C{  @Override public void report(){}  }
class C{  public static NormalizedUrl create(String url) throws MalformedURLException {  return Url.create(url).normalize();}  }
class C{  protected void resetInputValue(){  if (inputComponent != null && (inputComponent instanceof JTextField)) {    optionPane.setInputValue(((JTextField)inputComponent).getText());  } else   if (inputComponent != null && (inputComponent instanceof JComboBox)) {    optionPane.setInputValue(((JComboBox)inputComponent).getSelectedItem());  } else   if (inputComponent != null) {    optionPane.setInputValue(((JList)inputComponent).getSelectedValue());  }}  }
class C{  public static void editTextNodeComment(final SQLProvider provider,final INaviTextNode textNode,final Integer commentId,final Integer userId,final String newComment) throws CouldntSaveDataException {  Preconditions.checkNotNull(provider,"IE02505: provider argument can not be null");  Preconditions.checkNotNull(textNode,"IE02506: groupNode argument can not be null");  Preconditions.checkNotNull(commentId,"IE02507: commentId argument can not be null");  Preconditions.checkNotNull(userId,"IE02508: userId argument can not be null");  Preconditions.checkNotNull(newComment,"IE02509: newComment argument can not be null");  PostgreSQLCommentFunctions.editComment(provider,commentId,userId,newComment);}  }
class C{  private void inorder(){  inorder(root);}  }
class C{  public boolean isAlwaysFalse(){  return compareType == Comparison.FALSE;}  }
class C{  public void startCDATA() throws SAXException {  m_handler.startCDATA();}  }
class C{  int measureNullChild(int childIndex){  return 0;}  }
class C{  public synchronized boolean authenticateWithPublicKey(String user,char[] pemPrivateKey,String password) throws IOException {  if (tm == null)   throw new IllegalStateException("Connection is not established!");  if (authenticated)   throw new IllegalStateException("Connection is already authenticated!");  if (am == null)   am=new AuthenticationManager(tm);  if (cm == null)   cm=new ChannelManager(tm);  if (user == null)   throw new IllegalArgumentException("user argument is null");  if (pemPrivateKey == null)   throw new IllegalArgumentException("pemPrivateKey argument is null");  authenticated=am.authenticatePublicKey(user,pemPrivateKey,password,getOrCreateSecureRND());  return authenticated;}  }
class C{  public OptionScanNode buildTreeFromWindowList(List<AccessibilityWindowInfo> windowList,AccessibilityService service){  OptionScanNode tree;  List<GlobalActionNode> globalActions=GlobalActionNode.getGlobalActionList(service);  if (mOptionScanningEnabled) {    tree=mOptionScanTreeBuilder.buildContextMenuTree(globalActions);  } else {    tree=LinearScanTreeBuilder.buildContextMenuTree(globalActions);  }  if (windowList != null) {    List<SwitchAccessWindowInfo> wList=SwitchAccessWindowInfo.convertZOrderWindowList(windowList);    sortWindowListForTraversalOrder(wList);    removeSystemButtonsWindowFromWindowList(wList);    if (mOptionScanningEnabled) {      return mOptionScanTreeBuilder.buildTreeFromWindowList(wList,tree);    }    for (    SwitchAccessWindowInfo window : wList) {      SwitchAccessNodeCompat windowRoot=window.getRoot();      if (windowRoot != null) {        if (window.getType() == AccessibilityWindowInfo.TYPE_INPUT_METHOD) {          tree=mBuilderForIMEs.buildTreeFromNodeTree(windowRoot,tree);        } else {          tree=mBuilderForViews.buildTreeFromNodeTree(windowRoot,tree);        }        windowRoot.recycle();      }    }  }  return tree;}  }
class C{  protected int _dataOrQName(int identity){  if (identity < m_size)   return m_dataOrQName.elementAt(identity);  while (true) {    boolean isMore=nextNode();    if (!isMore)     return NULL; else     if (identity < m_size)     return m_dataOrQName.elementAt(identity);  }}  }
class C{  static RouteBuilder put(String path){  return builder().put(path);}  }
class C{  public static void sort(short[] a,int fromIndex,int toIndex){  rangeCheck(a.length,fromIndex,toIndex);  sort1(a,fromIndex,toIndex - fromIndex);}  }
class C{  public void pushDat11(long[] l){  tmp.push(l);}  }
class C{  private void onFailureDetectorEvent(FailureDetectorEvent fdEvent){  MembershipRecord r0=membershipTable.get(fdEvent.member().id());  if (r0 == null) {    return;  }  if (r0.status() == fdEvent.status()) {    return;  }  LOGGER.debug("Received status change on failure detector event: {}",fdEvent);  if (fdEvent.status() == MemberStatus.ALIVE) {    Message syncMsg=prepareSyncDataMsg(SYNC,null);    transport.send(fdEvent.member().address(),syncMsg);  } else {    MembershipRecord r1=new MembershipRecord(r0.member(),fdEvent.status(),r0.incarnation());    updateMembership(r1,true);  }}  }
class C{  public E hole(BaseLineStringBuilder<?> hole){  holes.add(hole);  return thisRef();}  }
class C{  private void centerTabs(int tabCount,int totalLength,int tabAreaLength){  Insets tabAreaInsets=getTabAreaInsets(tabPlacement);  Point corner=new Point(tabAreaRect.x + tabAreaInsets.left,tabAreaRect.y + tabAreaInsets.top);  int startPosition=orientation.getPosition(corner);  int offset=orientation.getOrthogonalOffset(corner);  int thickness=(orientation == ControlOrientation.HORIZONTAL) ? maxTabHeight : maxTabWidth;  int delta=-(tabAreaLength - totalLength) / 2 - startPosition;  for (int i=leadingTabIndex; i <= trailingTabIndex; i++) {    int position=orientation.getPosition(rects[i]) - delta;    int length=orientation.getLength(rects[i]);    rects[i].setBounds(orientation.createBounds(position,offset,length,thickness));  }}  }
class C{  public Filter(String name,FilterType type,FilterPred pred){  this(name,type,pred,true);}  }
class C{  public Iterable<FieldAccessor> ownedOrMixedIn(){  if (getter != null) {    if (setter != null) {      return Arrays.asList(getter,setter);    } else {      return singletonList(getter);    }  } else   if (setter != null) {    return singletonList(setter);  }  return emptyList();}  }
class C{  public static Double checkLatitude(String name,Double latitude){  if (latitude == null) {    throw new IndexException("{} required",name);  } else   if (latitude < MIN_LATITUDE || latitude > MAX_LATITUDE) {    throw new IndexException("{} must be in range [{}, {}], but found {}",name,MIN_LATITUDE,MAX_LATITUDE,latitude);  }  return latitude;}  }
class C{  public MessageCommand(){  handler=new MessageHandler();}  }
class C{  public BerDecoder(byte b[]){  bytes=b;  reset();}  }
class C{  public VisibilityFilter(Visualization vis,String group,Predicate p){  super(vis,group);  setPredicate(p);}  }
class C{  private static Solution search(INode initial,INode goal){  if (initial.equals(goal)) {    return new Solution(initial,goal);  }  open=StateStorageFactory.create(StateStorageFactory.STACK);  open.insert(initial.copy());  closed=StateStorageFactory.create(StateStorageFactory.HASH);  while (!open.isEmpty()) {    INode n=open.remove();    closed.insert(n);    DepthTransition trans=(DepthTransition)n.storedData();    DoubleLinkedList<IMove> moves=n.validMoves();    for (Iterator<IMove> it=moves.iterator(); it.hasNext(); ) {      IMove move=it.next();      INode successor=n.copy();      move.execute(successor);      if (closed.contains(successor) != null) {        if (ge.eval(successor) < closedMax) {          closedMax=ge.eval(successor);          System.out.println("closed and not inspecting (" + closedMax + "):\n"+ successor);        }        continue;      }      int depth=1;      if (trans != null) {        depth=trans.depth + 1;      }      successor.storedData(new DepthTransition(move,n,depth));      if (successor.equals(goal)) {        return new Solution(initial,successor);      }      if (depth < maxDepth) {        open.insert(successor);      } else {        withinOne(successor,goal);      }    }  }  return new Solution(initial,goal,false);}  }
class C{  public TPrimitiveHash(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  public static int murmurhash3_x86_32(CharSequence data,int offset,int len,int seed){  final int c1=0xcc9e2d51;  final int c2=0x1b873593;  int h1=seed;  int pos=offset;  int end=offset + len;  int k1=0;  int k2=0;  int shift=0;  int bits=0;  int nBytes=0;  while (pos < end) {    int code=data.charAt(pos++);    if (code < 0x80) {      k2=code;      bits=8;    } else     if (code < 0x800) {      k2=(0xC0 | (code >> 6)) | ((0x80 | (code & 0x3F)) << 8);      bits=16;    } else     if (code < 0xD800 || code > 0xDFFF || pos >= end) {      k2=(0xE0 | (code >> 12)) | ((0x80 | ((code >> 6) & 0x3F)) << 8) | ((0x80 | (code & 0x3F)) << 16);      bits=24;    } else {      int utf32=(int)data.charAt(pos++);      utf32=((code - 0xD7C0) << 10) + (utf32 & 0x3FF);      k2=(0xff & (0xF0 | (utf32 >> 18))) | ((0x80 | ((utf32 >> 12) & 0x3F))) << 8 | ((0x80 | ((utf32 >> 6) & 0x3F))) << 16 | (0x80 | (utf32 & 0x3F)) << 24;      bits=32;    }    k1|=k2 << shift;    shift+=bits;    if (shift >= 32) {      k1*=c1;      k1=(k1 << 15) | (k1 >>> 17);      k1*=c2;      h1^=k1;      h1=(h1 << 13) | (h1 >>> 19);      h1=h1 * 5 + 0xe6546b64;      shift-=32;      if (shift != 0) {        k1=k2 >>> (bits - shift);      } else {        k1=0;      }      nBytes+=4;    }  }  if (shift > 0) {    nBytes+=shift >> 3;    k1*=c1;    k1=(k1 << 15) | (k1 >>> 17);    k1*=c2;    h1^=k1;  }  h1^=nBytes;  h1^=h1 >>> 16;  h1*=0x85ebca6b;  h1^=h1 >>> 13;  h1*=0xc2b2ae35;  h1^=h1 >>> 16;  return h1;}  }
class C{  protected void runOperation(MultiOperation op,IJavaElement[] elements,IJavaElement[] siblings,String[] renamings,IProgressMonitor monitor) throws JavaModelException {  op.setRenamings(renamings);  if (siblings != null) {    for (int i=0; i < elements.length; i++) {      op.setInsertBefore(elements[i],siblings[i]);    }  }  op.runOperation(monitor);}  }
class C{  private void waiting(){  try {    new ConsoleReader().resetPromptLine(textWait,"",1);  } catch (  IOException e) {    throw new IllegalStateException("Unable to write",e);  }  List<String> progress=Arrays.asList("|","/","-","\\");  int index=0;  while (wait) {    try {      new ConsoleReader().resetPromptLine(textWait,progress.get(index),1);    } catch (    IOException e) {      throw new IllegalStateException("Unable to write",e);    }    try {      Thread.sleep(2000L);    } catch (    InterruptedException e) {      throw new IllegalStateException("Unable to wait",e);    }    index++;    if (index >= progress.size()) {      index=0;    }  }  try {    new ConsoleReader().resetPromptLine(textAfter,"",0);  } catch (  IOException e) {    throw new IllegalStateException("Unable to write",e);  }  System.out.println();  runnerStopped.countDown();}  }
class C{  public ListenableFuture<String> pull(final Expression expr){  return pullRaw(expr.toHaskell());}  }
class C{  @Override public synchronized void reset() throws IOException {  if (buf == null) {    throw new IOException("Stream is closed");  }  if (-1 == markpos) {    throw new IOException("Mark has been invalidated.");  }  pos=markpos;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public final boolean isClosed(){  return closed.get();}  }
class C{  public static int showConfirmDialog(Component parentComponent,Object message,String title,int optionType) throws HeadlessException {  return showConfirmDialog(parentComponent,message,title,optionType,QUESTION_MESSAGE);}  }
class C{  void toFarSideData(DataOutput out,boolean largeModCount,boolean sendVersionTag,boolean sendShadowKey) throws IOException {  Operation operation=getFarSideOperation();  out.writeByte(operation.ordinal);  if (largeModCount) {    out.writeInt(this.modSerialNum);  } else {    out.writeByte(this.modSerialNum);  }  DataSerializer.writeObject(getCallbackArgument(),out);  DataSerializer.writeObject(getFilterRoutingInfo(),out);  if (sendVersionTag) {    DataSerializer.writeObject(getVersionTag(),out);    assert getVersionTag() != null || !txRegionState.getRegion().concurrencyChecksEnabled || txRegionState.getRegion().dataPolicy != DataPolicy.REPLICATE : "tag:" + getVersionTag() + " r:"+ txRegionState.getRegion()+ " op:"+ opToString()+ " key:";  }  if (sendShadowKey) {    out.writeLong(this.tailKey);  }  out.writeInt(getFarSideEventOffset());  if (!operation.isDestroy()) {    out.writeBoolean(didDistributedDestroy());    if (!operation.isInvalidate()) {      boolean sendObject=Token.isInvalidOrRemoved(getPendingValue());      sendObject=sendObject || getPendingValue() instanceof byte[];      out.writeBoolean(sendObject);      if (sendObject) {        DataSerializer.writeObject(getPendingValue(),out);      } else {        DataSerializer.writeObjectAsByteArray(getPendingValue(),out);      }    }  }}  }
class C{  public static boolean migrationSupportedForVolume(Volume volume,URI varrayURI,DbClient dbClient){  boolean supported=true;  if (volume.isIngestedVolumeWithoutBackend(dbClient)) {    VirtualPool vpool=dbClient.queryObject(VirtualPool.class,volume.getVirtualPool());    if (VirtualPool.HighAvailabilityType.vplex_distributed.name().equals(vpool.getHighAvailability())) {      StorageSystem vplexSystem=dbClient.queryObject(StorageSystem.class,volume.getStorageController());      try {        VPlexApiFactory apiFactory=VPlexApiFactory.getInstance();        VPlexApiClient client=getVPlexAPIClient(apiFactory,vplexSystem,dbClient);        VPlexVirtualVolumeInfo vvInfo=client.getVirtualVolumeStructure(volume.getDeviceLabel());        VPlexDistributedDeviceInfo ddInfo=(VPlexDistributedDeviceInfo)vvInfo.getSupportingDeviceInfo();        List<VPlexDeviceInfo> localDeviceInfoList=ddInfo.getLocalDeviceInfo();        for (        VPlexDeviceInfo localDeviceInfo : localDeviceInfoList) {          _log.info("localDeviceInfo: {}, {}",localDeviceInfo.getName(),localDeviceInfo.getCluster());          if (varrayURI != null) {            _log.info("varrayURI:{}",varrayURI);            String varrayCluster=ConnectivityUtil.getVplexClusterForVarray(varrayURI,vplexSystem.getId(),dbClient);            _log.info("varrayCluster:{}",varrayCluster);            if (!localDeviceInfo.getCluster().contains(varrayCluster)) {              continue;            }          }          _log.info("Local device: {}",localDeviceInfo.getName());          _log.info("Extent count: {}",localDeviceInfo.getExtentInfo().size());          if (localDeviceInfo.getExtentInfo().size() != 1) {            supported=false;            break;          }        }      } catch (      VPlexApiException vae) {        _log.error("Exception checking if migration supported for volume:",vae);        throw vae;      }catch (      Exception ex) {        _log.error("Exception checking if migration supported for volume",ex);        throw VPlexApiException.exceptions.failedGettingMigrationSupportedForVolume(vplexSystem.getId().toString(),volume.getLabel());      }    }  }  return supported;}  }
class C{  private void addCombinedOccurence(List<AttributeSource> originalAttributeSources,List<Attribute> unionAttributeList,MemoryExampleTable unionTable,Example leftExample,Example rightExample){  double[] unionDataRow=new double[unionAttributeList.size()];  int attributeIndex=0;  for (  AttributeSource attributeSource : originalAttributeSources) {    if (attributeSource.getSource() == AttributeSource.FIRST_SOURCE) {      unionDataRow[attributeIndex]=leftExample.getValue(attributeSource.getAttribute());    } else     if (attributeSource.getSource() == AttributeSource.SECOND_SOURCE) {      unionDataRow[attributeIndex]=rightExample.getValue(attributeSource.getAttribute());    }    attributeIndex++;  }  unionTable.addDataRow(new DoubleArrayDataRow(unionDataRow));}  }
class C{  public TreeViewerBuilder(Composite parent,int style){  mappings=Collections.emptyMap();  checkable=(style & SWT.CHECK) == SWT.CHECK;  if (checkable) {    viewer=new CheckboxTreeViewer(parent,style);  } else {    viewer=new TreeViewer(parent,style);  }  ColumnViewerToolTipSupport.enableFor(viewer,ToolTip.NO_RECREATE);}  }
class C{  public DriverTask createVolumeMirror(List<VolumeMirror> mirrors){  LOG.info("Creating volume mirror");  DriverTask task=new DellSCDriverTask("createVolumeMirror");  StringBuilder errBuffer=new StringBuilder();  int mirrorsCreated=0;  for (  VolumeMirror mirror : mirrors) {    LOG.debug("Creating mirror of volume {}",mirror.getParentId());    String ssn=mirror.getStorageSystemId();    try {      StorageCenterAPI api=connectionManager.getConnection(ssn);      ScVolume srcVol=api.getVolume(mirror.getParentId());      ScVolume destVol=api.createVolume(ssn,mirror.getDisplayName(),srcVol.storageType.instanceId,SizeUtil.byteToMeg(SizeUtil.sizeStrToBytes(srcVol.configuredSize)),null);      ScCopyMirrorMigrate scCmm=api.createMirror(ssn,srcVol.instanceId,destVol.instanceId);      mirror.setNativeId(scCmm.instanceId);      mirror.setSyncState(SynchronizationState.COPYINPROGRESS);      mirrorsCreated++;      LOG.info("Created volume mirror '{}'",scCmm.instanceId);    } catch (    StorageCenterAPIException|DellSCDriverException dex) {      String error=String.format("Error creating volume mirror %s: %s",mirror.getDisplayName(),dex);      LOG.error(error);      errBuffer.append(String.format("%s%n",error));    }  }  task.setMessage(errBuffer.toString());  if (mirrorsCreated == mirrors.size()) {    task.setStatus(TaskStatus.READY);  } else   if (mirrorsCreated == 0) {    task.setStatus(TaskStatus.FAILED);  } else {    task.setStatus(TaskStatus.PARTIALLY_FAILED);  }  return task;}  }
class C{  public boolean subsampleinwindow(){  return subsampleinwindow;}  }
class C{  public T vertexProcessor(final BiConsumer<Vertex,Map<String,Object>> vertexProcessor){  this.vertexProcessor=Optional.ofNullable(vertexProcessor);  return extendingClass.cast(this);}  }
class C{  public boolean isModifyPrice(){  Object oo=get_Value(COLUMNNAME_IsModifyPrice);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private HashMap duplicate(HashMap funcs,boolean deepCopy){  if (deepCopy)   throw new PageRuntimeException(new ExpressionException("deep copy not supported"));  Iterator it=funcs.entrySet().iterator();  Map.Entry entry;  HashMap cm=new HashMap();  while (it.hasNext()) {    entry=(Entry)it.next();    cm.put(entry.getKey(),deepCopy ? entry.getValue() : entry.getValue());  }  return cm;}  }
class C{  public static byte[] encode(byte[] data){  return encode(data,0,data.length);}  }
class C{  public void saveVoice(VoiceConfig config){  config.addCredentials(this);  POST(this.url + "/save-voice",config.toXML());}  }
class C{  protected void basicOperateOnRegion(EntryEventImpl ev,DistributedRegion rgn){  if (logger.isDebugEnabled()) {    logger.debug("Processing  {}",this);  }  try {    long time=this.lastModified;    if (ev.getVersionTag() != null) {      checkVersionTag(rgn,ev.getVersionTag());      time=ev.getVersionTag().getVersionTimeStamp();    }    this.appliedOperation=doPutOrCreate(rgn,ev,time);  } catch (  ConcurrentCacheModificationException e) {    dispatchElidedEvent(rgn,ev);    this.appliedOperation=false;  }}  }
class C{  public static boolean isDrive(final File file){  Preconditions.checkNotNull(file,"IE01493: File argument can not be null");  return file.getParent() == null;}  }
class C{  public boolean __gt__(final Object rhs){  return getBigInteger(this).compareTo(getBigInteger(rhs)) > 0;}  }
class C{  Scope enterScope(Env<AttrContext> env){  return (env.tree.hasTag(JCTree.Tag.CLASSDEF)) ? ((JCClassDecl)env.tree).sym.members_field : env.info.scope;}  }
class C{  public void addScrollingListener(OnWheelScrollListener listener){  scrollingListeners.add(listener);}  }
class C{  public URI normalize(){  String thisPath=getPath();  StringTokenizer st=new StringTokenizer(thisPath,String.valueOf(PATH_SEPARATOR));  List<String> segments=new ArrayList<String>();  while (st.hasMoreTokens()) {    segments.add(st.nextToken());  }  List<Integer> removals=new ArrayList<Integer>();  for (int i=0; i < segments.size(); i++) {    String segment=segments.get(i);    if (segment.equals(".")) {      removals.add(0,i);      continue;    } else     if (i > 0 && segment.equals("..")) {      if (segments.get(i - 1).equals("..") == false) {        removals.add(0,i - 1);        removals.add(0,i);        continue;      }    }  }  Iterator<Integer> iter=removals.iterator();  while (iter.hasNext()) {    segments.remove(iter.next());  }  StringBuffer buffer=new StringBuffer();  for (int i=0; i < segments.size(); i++) {    String segment=segments.get(i);    if (i == 0) {      if (isAbsolute()) {        buffer.append(PATH_SEPARATOR);      } else       if (segment.indexOf(SCHEME_SEPARATOR) != -1) {        buffer.append('.');        buffer.append(PATH_SEPARATOR);      }      buffer.append(segment);      continue;    }    buffer.append(PATH_SEPARATOR);    buffer.append(segment);  }  try {    return new URI(getScheme(),getUserInfo(),getHost(),getPort(),buffer.toString(),getQuery(),getFragment());  } catch (  URISyntaxException e) {    throw new IllegalArgumentException(e.getMessage());  }}  }
class C{  public static void main(String[] args) throws Exception {  int order1=ORDER_MEDIUM;  int order2=ORDER_SMALL;  int order3=ORDER_KARATSUBA;  int order4=ORDER_TOOM_COOK;  if (args.length > 0)   order1=(int)((Integer.parseInt(args[0])) * 3.333);  if (args.length > 1)   order2=(int)((Integer.parseInt(args[1])) * 3.333);  if (args.length > 2)   order3=(int)((Integer.parseInt(args[2])) * 3.333);  if (args.length > 3)   order4=(int)((Integer.parseInt(args[3])) * 3.333);  prime();  nextProbablePrime();  arithmetic(order1);  arithmetic(order3);  arithmetic(order4);  divideAndRemainder(order1);  divideAndRemainder(order3);  divideAndRemainder(order4);  pow(order1);  pow(order3);  pow(order4);  square(ORDER_MEDIUM);  square(ORDER_KARATSUBA_SQUARE);  square(ORDER_TOOM_COOK_SQUARE);  bitCount();  bitLength();  bitOps(order1);  bitwise(order1);  shift(order1);  byteArrayConv(order1);  modInv(order1);  modInv(order3);  modInv(order4);  modExp(order1,order2);  modExp2(order1);  stringConv();  serialize();  multiplyLarge();  squareLarge();  divideLarge();  if (failure)   throw new RuntimeException("Failure in BigIntegerTest.");}  }
class C{  static int threshold(int size) throws Throwable {  IdentityHashMap<Object,Object> m=new IdentityHashMap<>(size);  int initialCapacity=capacity(m);  while (capacity(m) == initialCapacity)   growUsingPut(m,1);  return m.size() - 1;}  }
class C{  public static <T>org.hamcrest.Matcher<T> theInstance(T target){  return org.hamcrest.core.IsSame.theInstance(target);}  }
class C{  public AlphabetIndexer(Cursor cursor,int sortedColumnIndex,CharSequence alphabet){  mDataCursor=cursor;  mColumnIndex=sortedColumnIndex;  mAlphabet=alphabet;  mAlphabetLength=alphabet.length();  mAlphabetArray=new String[mAlphabetLength];  for (int i=0; i < mAlphabetLength; i++) {    mAlphabetArray[i]=Character.toString(mAlphabet.charAt(i));  }  mAlphaMap=new SparseIntArray(mAlphabetLength);  if (cursor != null) {    cursor.registerDataSetObserver(this);  }  mCollator=java.text.Collator.getInstance();  mCollator.setStrength(java.text.Collator.PRIMARY);}  }
class C{  public Effect(BasicEffect effect){  subeffects=Arrays.asList(effect);  fullyGrounded=!effect.containsSlots();  valueTable=new HashMap<String,Map<Value,Double>>();  randomsToGenerate=new HashSet<String>();  if (effect instanceof TemplateEffect) {    ((TemplateEffect)effect).getAllSlots().stream().filter(null).forEach(null);  }}  }
class C{  public synchronized void terminatedByServer(){  if (!mSubscribed) {    return;  }  if (sLogger.isActivated()) {    sLogger.info("Subscription has been terminated by server");  }  stopTimer();  resetDialogPath();  mSubscribed=false;}  }
class C{  public void putListBoolean(String key,ArrayList<Boolean> boolList){  ArrayList<String> newList=new ArrayList<String>();  for (  Boolean item : boolList) {    if (item) {      newList.add("true");    } else {      newList.add("false");    }  }  putListString(key,newList);}  }
class C{  public double volume(){  if (cachedVolume < 0) {    cachedVolume=1.0;    IHypercube cube=this.region;    int nd=cube.dimensionality();    for (int d=1; d <= nd; d++) {      double right=cube.getRight(d);      double left=cube.getLeft(d);      if (Double.isInfinite(right)) {        right=+1;      }      if (Double.isInfinite(left)) {        left=-1;      }      if (left == -1 && right == +1) {      } else {        cachedVolume*=(right - left);      }    }  }  return cachedVolume;}  }
class C{  public static double interpolate(double start,double end,double lambda){  return (start + (3 * lambda * lambda - 2 * lambda * lambda* lambda) * (end - start));}  }
class C{  public PriorityQueue(){  this(DEFAULT_CAPACITY);}  }
class C{  private void splitFullName(){  int firstEnd=fullName.indexOf('.');  int secondEnd=fullName.indexOf('.',firstEnd + 1);  timestamp=fullName.substring(0,firstEnd);  uniqueString=fullName.substring(firstEnd + 1,secondEnd);  hostnameAndMeta=fullName.substring(secondEnd + 1,fullName.length());}  }
class C{  public double[] RGBtoIHS(double r,double g,double b){  double[] ret=new double[3];  double i, h, s;  double minRGB=b;  i=r + g + b;  if (g < minRGB) {    minRGB=g;  }  if (r < minRGB) {    minRGB=r;  }  if (i == 3) {    h=0;  } else   if (b == minRGB) {    h=(g - b) / (i - 3 * b);  } else   if (r == minRGB) {    h=(b - r) / (i - 3 * r) + 1;  } else {    h=(r - g) / (i - 3 * g) + 2;  }  if (h <= 1) {    s=(i - 3 * b) / i;  } else   if (h <= 2) {    s=(i - 3 * r) / i;  } else {    s=(i - 3 * g) / i;  }  ret[0]=i;  ret[1]=h;  ret[2]=s;  return ret;}  }
class C{  @Override public void runWatchers(){  device.runWatchers();}  }
class C{  protected SVGOMFlowRootElement(){}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length != 1) {    System.err.println("Use: java -cp <classPath> org.apache.activemq.artemis.utils.DefaultSensitiveStringCodec password-to-encode");    System.err.println("Error: no password on the args");    System.exit(-1);  }  DefaultSensitiveStringCodec codec=new DefaultSensitiveStringCodec();  Object encode=codec.encode(args[0]);  System.out.println("Encoded password (without quotes): \"" + encode + "\"");}  }
class C{  public void drawString(String s,float x,float y){  if (textAsShapes) {    GlyphVector gv=getFont().createGlyphVector(getFontRenderContext(),s);    drawGlyphVector(gv,x,y);    return;  }  if (generatorCtx.svgFont) {    domTreeManager.gcConverter.getFontConverter().recordFontUsage(s,getFont());  }  AffineTransform savTxf=getTransform();  AffineTransform txtTxf=transformText(x,y);  Element text=getDOMFactory().createElementNS(SVG_NAMESPACE_URI,SVG_TEXT_TAG);  text.setAttributeNS(null,SVG_X_ATTRIBUTE,generatorCtx.doubleString(x));  text.setAttributeNS(null,SVG_Y_ATTRIBUTE,generatorCtx.doubleString(y));  text.setAttributeNS(XML_NAMESPACE_URI,XML_SPACE_QNAME,XML_PRESERVE_VALUE);  text.appendChild(getDOMFactory().createTextNode(s));  domGroupManager.addElement(text,DOMGroupManager.FILL);  if (txtTxf != null) {    this.setTransform(savTxf);  }}  }
class C{  public Tasks<BlockConsistencyGroupRestRep> detachFullCopy(URI consistencyGroupId,URI fullCopyId){  final String url=getIdUrl() + "/protection/full-copies/{fcid}/detach";  return postTasks(url,consistencyGroupId,fullCopyId);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public String delete(String request) throws IOException {  HttpDelete httpDelete=new HttpDelete(getBaseURL() + request);  return getResponse(httpDelete);}  }
class C{  @Override public void dispose(){  super.dispose();  _finishedWorkers=null;  _failedWorkers=null;  _runningWorkers=null;}  }
class C{  public XmlHandler addAttributes(Class<?> aClass,Attribute... attributes){  try {    xml.addAttributes(aClass,attributes);    xml.write();  } catch (  Exception e) {    JmapperLog.ERROR(e);  }  return this;}  }
class C{  private String buildTask1GoldElem(StringBuilder textBuilder,List<String> goldElems){  String strGold;  textBuilder.setLength(0);  textBuilder.append("[");  textBuilder.append(concatWithSeparator(goldElems,","));  textBuilder.append("]");  strGold=new String(textBuilder);  return strGold;}  }
class C{  protected void bindView(ViewInterface<T,? extends ViewModel> viewInterface){  mView=viewInterface;}  }
class C{  public void endPrefixMapping(String prefix) throws SAXException {  if (contentHandler != null) {    contentHandler.endPrefixMapping(prefix);  }}  }
class C{  public boolean isLowerInclusive(){  return lowerInclusive;}  }
class C{  public static void restore(final Context context){  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);  if (LongTermOrbits.isSupported() && prefs.getBoolean(KEY_LOCATION_TOGGLE,false)) {    saveDownloadDataWifiOnlyPref(context);    AlarmManager am=(AlarmManager)context.getSystemService(Context.ALARM_SERVICE);    Intent intent=new Intent(context,LtoService.class);    PendingIntent pi=PendingIntent.getService(context,0,intent,PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_ONE_SHOT);    long nextLtoDownload=System.currentTimeMillis() + (1000 * 60 * 2L);    am.set(AlarmManager.RTC,nextLtoDownload,pi);  }}  }
class C{  public int size(){  return strings.size();}  }
class C{  public void mark(){  mark(1);}  }
class C{  public Suspend(){  super();}  }
class C{  public T caseFunctionBlock(FunctionBlock object){  return null;}  }
class C{  public boolean booleanPrimitiveValueOfParameterNamed(final String parameterName){  final Boolean value=this.fromApiJsonHelper.extractBooleanNamed(parameterName,this.parsedCommand);  return (Boolean)ObjectUtils.defaultIfNull(value,Boolean.FALSE);}  }
class C{  public static boolean equalDirs(Configuration conf,Path src,Path dest,Optional<PathFilter> filter,boolean compareModificationTimes) throws IOException {  boolean srcExists=src.getFileSystem(conf).exists(src);  boolean destExists=dest.getFileSystem(conf).exists(dest);  if (!srcExists || !destExists) {    return false;  }  Set<FileStatus> srcFileStatuses=getFileStatusesRecursive(conf,src,filter);  Set<FileStatus> destFileStatuses=getFileStatusesRecursive(conf,dest,filter);  Map<String,Long> srcFileSizes=null;  Map<String,Long> destFileSizes=null;  try {    srcFileSizes=getRelPathToSizes(src,srcFileStatuses);    destFileSizes=getRelPathToSizes(dest,destFileStatuses);  } catch (  ArgumentException e) {    throw new IOException("Invalid file statuses!",e);  }  long srcSize=totalSize(srcFileSizes);  long destSize=totalSize(destFileSizes);  LOG.debug("Size of " + src + " is "+ srcSize);  LOG.debug("Size of " + dest + " is "+ destSize);  if (srcSize != destSize) {    LOG.debug(String.format("Size of %s and %s do not match!",src,dest));    return false;  }  if (srcFileSizes.size() != destFileSizes.size()) {    LOG.warn(String.format("Number of files in %s (%d) and %s (%d) " + "do not match!",src,srcFileSizes.size(),dest,destFileSizes.size()));    return false;  }  for (  String file : srcFileSizes.keySet()) {    if (!destFileSizes.containsKey(file)) {      LOG.warn(String.format("%s missing from %s!",file,dest));      return false;    }    if (!srcFileSizes.get(file).equals(destFileSizes.get(file))) {      LOG.warn(String.format("Size mismatch between %s (%d) in %s " + "and %s (%d) in %s",file,srcFileSizes.get(file),src,file,destFileSizes.get(file),dest));      return false;    }  }  if (compareModificationTimes) {    Map<String,Long> srcFileModificationTimes=null;    Map<String,Long> destFileModificationTimes=null;    try {      srcFileModificationTimes=getRelativePathToModificationTime(src,srcFileStatuses);      destFileModificationTimes=getRelativePathToModificationTime(dest,destFileStatuses);    } catch (    ArgumentException e) {      throw new IOException("Invalid file statuses!",e);    }    for (    String file : srcFileModificationTimes.keySet()) {      if (!srcFileModificationTimes.get(file).equals(destFileModificationTimes.get(file))) {        LOG.warn(String.format("Modification time mismatch between " + "%s (%d) in %s and %s (%d) in %s",file,srcFileModificationTimes.get(file),src,file,destFileModificationTimes.get(file),dest));        return false;      }    }  }  LOG.debug(String.format("%s and %s are the same",src,dest));  return true;}  }
class C{  public boolean minLength(String input,int length){  return GenericValidator.minLength(input,length);}  }
class C{  public WeakIdentityHashMap(int initialCapacity){  this(initialCapacity,DEFAULT_LOAD_FACTOR);}  }
class C{  @GridifySetToValue(gridName="GridifySetToValueTarget",threshold=2,splitSize=2) @Override public Long findMaximum(Collection<Long> input){  return findMaximum0(input);}  }
class C{  public EpsilonBoxDominanceArchive(double[] epsilon){  super(new EpsilonBoxDominanceComparator(epsilon));}  }
class C{  public static void saveImage(final Bitmap bitmap,final File saveToFile){  if (saveToFile.exists()) {    saveToFile.delete();  }  try {    final FileOutputStream out=new FileOutputStream(saveToFile);    bitmap.compress(Bitmap.CompressFormat.PNG,90,out);    out.flush();    out.close();  } catch (  final Exception e) {    e.printStackTrace();  }}  }
class C{  private void jbInit() throws Exception {  panel.setLayout(mainLayout);  treeLabel.setText(Msg.translate(Env.getCtx(),"AD_Tree_ID"));  cbAllNodes.setEnabled(false);  cbAllNodes.setText(Msg.translate(Env.getCtx(),"IsAllNodes"));  treeInfo.setText(" ");  bAdd.setToolTipText("Add to Tree");  bAddAll.setToolTipText("Add ALL to Tree");  bDelete.setToolTipText("Delete from Tree");  bDeleteAll.setToolTipText("Delete ALL from Tree");  bAdd.addActionListener(this);  bAddAll.addActionListener(this);  bDelete.addActionListener(this);  bDeleteAll.addActionListener(this);  northPanel.setLayout(northLayout);  northLayout.setAlignment(FlowLayout.LEFT);  panel.add(northPanel,BorderLayout.NORTH);  northPanel.add(treeLabel,null);  northPanel.add(treeField,null);  northPanel.add(cbAllNodes,null);  northPanel.add(treeInfo,null);  northPanel.add(bAddAll,null);  northPanel.add(bAdd,null);  northPanel.add(bDelete,null);  northPanel.add(bDeleteAll,null);  panel.add(splitPane,BorderLayout.CENTER);  splitPane.add(centerTree,JSplitPane.LEFT);  splitPane.add(new JScrollPane(centerList),JSplitPane.RIGHT);  centerList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);  centerList.addListSelectionListener(this);}  }
class C{  public static boolean isNative(int mod){  return (mod & NATIVE) != 0;}  }
class C{  public String toASCIIString(){  StringBuilder result=new StringBuilder();  ASCII_ONLY.appendEncoded(result,toString());  return result.toString();}  }
class C{  @Override public void put(double[] val,double weight){  assert (val.length == elements.length);  if (weight == 0) {    return;  }  final double nwsum=weight + wsum;  for (int i=BitsUtil.nextSetBit(dims,0); i >= 0; i=BitsUtil.nextSetBit(dims,i + 1)) {    final double delta=val[i] - elements[i];    final double rval=delta * weight / nwsum;    elements[i]+=rval;  }  wsum=nwsum;}  }
class C{  public static Text valueOf(float f){  TextBuilder tb=new TextBuilder();  return tb.append(f).toText();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  DShowMediaPlayer.setUseVmr();  return null;}  }
class C{  @Deprecated public String unescapeName(final String name){  return super.decodeNode(name);}  }
class C{  public String more(){  return "again";}  }
class C{  public Rect createFromParcel(Parcel in){  Rect r=new Rect();  r.readFromParcel(in);  return r;}  }
class C{  public void visitJumpInsn(int opcode,Label label){  if (mv != null) {    mv.visitJumpInsn(opcode,label);  }}  }
class C{  public static boolean isConnectedMobile(Context context){  NetworkInfo info=Connectivity.getNetworkInfo(context);  return (info != null && info.isConnected() && info.getType() == ConnectivityManager.TYPE_MOBILE);}  }
class C{  public ClosedConnectionException(){}  }
class C{  CSVReader(Reader reader,int line,CSVParser csvParser,boolean keepCR,boolean verifyReader){  this.br=(reader instanceof BufferedReader ? (BufferedReader)reader : new BufferedReader(reader));  this.lineReader=new LineReader(br,keepCR);  this.skipLines=line;  this.parser=csvParser;  this.keepCR=keepCR;  this.verifyReader=verifyReader;}  }
class C{  public StaticMap format(Format format){  this.format=format;  return this;}  }
class C{  public static int fastModPrime(long data){  int high=(int)(data >>> 32);  int alpha=((int)data) + (high << 2 + high);  if (alpha < 0 && alpha > -5) {    alpha=alpha + 5;  }  return alpha;}  }
class C{  long interfaceHash(){  return interfaceHash;}  }
class C{  @Override public void startPrefixMapping(String str,String str1) throws SAXException {}  }
class C{  void insertFileNodes(String name,String path,DefaultMutableTreeNode parent){  File fp=new File(path);  if (!fp.exists()) {    return;  }  if (fp.getName().startsWith(".")) {    return;  }  if (fp.getName().equals("CVS")) {    return;  }  DefaultMutableTreeNode newElement=new DefaultMutableTreeNode(name);  insertNodeInto(newElement,parent,parent.getChildCount());  if (fp.isDirectory()) {    String[] sp=fp.list();    for (int i=0; i < sp.length; i++) {      insertFileNodes(sp[i],path + "/" + sp[i],newElement);    }  }}  }
class C{  public static void showTabErrors(Project project,String title,List<VcsException> errors){  AbstractVcsHelper.getInstance(project).showErrors(errors,title);}  }
class C{  boolean doSimStep(final double time){  if (withindayEngine != null)   withindayEngine.doSimStep(time);  for (  MobsimEngine mobsimEngine : mobsimEngines) {    if (mobsimEngine == this.withindayEngine)     continue;    mobsimEngine.doSimStep(time);  }  this.printSimLog(time);  return (this.agentCounter.isLiving() && (this.stopTime > time));}  }
class C{  protected void fixupJumps(byte[] bytes2){  byte[] bytes=bytes2;  for (Iterator enumumerator=jumps.iterator(); enumumerator.hasNext(); ) {    Object[] obja=(Object[])enumumerator.next();    String label=(String)obja[0];    int target=((Integer)obja[1]).intValue();    int[] labelInfo=(int[])labels.get(label);    if (labelInfo == null) {      System.out.println("Missing label '" + label + "' in action code");      continue;    }    int absolute=labelInfo[0];    int relative=absolute - (target + 2);    byte[] val=OutStream.sintTo2Bytes(relative);    bytes[target]=val[0];    bytes[target + 1]=val[1];  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:47.828 -0500",hash_original_method="01B4469A7119F79BBDA4CF4D6616EEC2",hash_generated_method="C70CBD95926A226F6C9CF5E1BEC7E5B3") public void processingInstruction(String target,String data) throws SAXException {  if (documentHandler != null)   documentHandler.processingInstruction(target,data);}  }
class C{  public java.lang.String toLowerCase(){  return null;}  }
class C{  public double localScore(int i){  double sum=0.0;  for (  BDeuScore score : scores) {    sum+=score.localScore(i);  }  return sum / scores.size();}  }
class C{  public synchronized void add(String name,long threadId){  if (mFinished) {    throw new IllegalStateException("Marker added to finished log");  }  mMarkers.add(new Marker(name,threadId,SystemClock.elapsedRealtime()));}  }
class C{  public int sizeInPackets(final int packetSize) throws IOException {  final int sizeInBytes=sizeInBytes();  return sizeInBytes / packetSize + ((sizeInBytes % packetSize) > 0 ? 1 : 0);}  }
class C{  public Request addRequestHeader(String header,String value){  if (header == null) {    throw new NullPointerException("header cannot be null");  }  if (header.contains(":")) {    throw new IllegalArgumentException("header may not contain ':'");  }  if (value == null) {    value="";  }  mRequestHeaders.add(Pair.create(header,value));  return this;}  }
class C{  private boolean checkClassInstanceCreation(){  if (topKnownElementKind(COMPLETION_OR_ASSIST_PARSER) == K_BETWEEN_NEW_AND_LEFT_BRACKET) {    int length=this.identifierLengthStack[this.identifierLengthPtr];    int numberOfIdentifiers=this.genericsIdentifiersLengthStack[this.genericsIdentifiersLengthPtr];    if (length != numberOfIdentifiers || this.genericsLengthStack[this.genericsLengthPtr] != 0) {      return true;    }    TypeReference type;    if (this.invocationType == ALLOCATION) {      AllocationExpression allocExpr=new AllocationExpression();      if (topKnownElementKind(COMPLETION_OR_ASSIST_PARSER,1) == K_INSIDE_THROW_STATEMENT && topKnownElementInfo(COMPLETION_OR_ASSIST_PARSER,1) == this.bracketDepth) {        pushOnElementStack(K_NEXT_TYPEREF_IS_EXCEPTION);        type=getTypeReference(0);        popElement(K_NEXT_TYPEREF_IS_EXCEPTION);      } else {        type=getTypeReference(0);      }      if (type instanceof CompletionOnSingleTypeReference) {        ((CompletionOnSingleTypeReference)type).isConstructorType=true;      } else       if (type instanceof CompletionOnQualifiedTypeReference) {        ((CompletionOnQualifiedTypeReference)type).isConstructorType=true;      }      allocExpr.type=type;      allocExpr.sourceStart=type.sourceStart;      allocExpr.sourceEnd=type.sourceEnd;      pushOnExpressionStack(allocExpr);      this.isOrphanCompletionNode=false;    } else {      QualifiedAllocationExpression allocExpr=new QualifiedAllocationExpression();      pushOnGenericsIdentifiersLengthStack(this.identifierLengthStack[this.identifierLengthPtr]);      pushOnGenericsLengthStack(0);      if (topKnownElementKind(COMPLETION_OR_ASSIST_PARSER,1) == K_INSIDE_THROW_STATEMENT && topKnownElementInfo(COMPLETION_OR_ASSIST_PARSER,1) == this.bracketDepth) {        pushOnElementStack(K_NEXT_TYPEREF_IS_EXCEPTION);        type=getTypeReference(0);        popElement(K_NEXT_TYPEREF_IS_EXCEPTION);      } else {        type=getTypeReference(0);      }      if (type instanceof CompletionOnSingleTypeReference) {        ((CompletionOnSingleTypeReference)type).isConstructorType=true;      }      allocExpr.type=type;      allocExpr.enclosingInstance=this.expressionStack[this.qualifier];      allocExpr.sourceStart=this.intStack[this.intPtr--];      allocExpr.sourceEnd=type.sourceEnd;      this.expressionStack[this.qualifier]=allocExpr;      this.isOrphanCompletionNode=false;    }    this.assistNode=type;    this.lastCheckPoint=type.sourceEnd + 1;    popElement(K_BETWEEN_NEW_AND_LEFT_BRACKET);    return true;  }  return false;}  }
class C{  public int treeNumber(){  if (owner == null)   return NO_TREENUM;  if (owner.trees == null)   return NO_TREENUM;  for (int x=0; x < owner.trees.length; x++)   if (owner.trees[x] == this)   return x;  return NO_TREENUM;}  }
class C{  public RolloutRenderer(final RendererClickListener listener){  this();  addClickListener(listener);}  }
class C{  public boolean equals(Object o){  IntCharSet set=(IntCharSet)o;  return intervals.equals(set.intervals);}  }
class C{  public void addExtendedProperty(ExtendedProperty extendedProperty){  getExtendedProperties().add(extendedProperty);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.POSTFIX_EXPRESSION__EXPRESSION:    return expression != null;case N4JSPackage.POSTFIX_EXPRESSION__OP:  return op != OP_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public void syncBeforeInvoke(){  copyTagToPageScope(VariableInfo.NESTED);  copyTagToPageScope(VariableInfo.AT_BEGIN);}  }
class C{  private boolean keyChainContainsPrivateKey(Collection<ECKey> keyChain,ECKey keyToAdd){  if (keyChain == null || keyToAdd == null) {    return false;  } else {    for (    ECKey loopKey : keyChain) {      if (Arrays.equals(keyToAdd.getPrivKeyBytes(),loopKey.getPrivKeyBytes())) {        return true;      }    }    return false;  }}  }
class C{  public LuceneLevenshteinDistance(){}  }
class C{  public File resolve(String name,boolean isModule){  if (isModule && name.endsWith(".tla")) {    name=name.substring(0,name.length() - 4);  }  String sourceFileName;  if (isModule) {    sourceFileName=name + ".tla";  } else {    sourceFileName=name;  }  File sourceFile=locate(sourceFileName);  return sourceFile;}  }
class C{  public SocialShare image(Uri imageUri){  if (imageUri == null)   throw new IllegalArgumentException("imageUri == null");  if (this.uri != null)   throw new IllegalStateException("Not allowed multiple uri's");  this.uri=imageUri;  this.mimeType=Mime.ANY_IMAGE;  return this;}  }
class C{  public Model(DatasetGenerator datasetGenerator){  this.datasetGenerator=datasetGenerator;  columnNames[0]="";  columnNames[1]="";  for (int metric=DatasetGenerator.METRIC_FIRST; metric <= DatasetGenerator.METRIC_LAST; ++metric) {    String metricName=DatasetGenerator.getMetricNameWithUnit(metric);    int c=metricToColumn(metric);    columnNames[c]=metricName;    datasets[metric - DatasetGenerator.METRIC_FIRST]=datasetGenerator.newCategoryDataset(metric,false);  }  update();}  }
class C{  public ItemStreamRequest(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  public boolean removeNeighbour(Triangle triangle){  return getNeighbours().remove(triangle);}  }
class C{  protected void parseDefineFunction(InStream in) throws IOException {  String name=in.readString();  int paramCount=in.readUI16();  String[] params=new String[paramCount];  for (int i=0; i < params.length; i++) {    params[i]=in.readString();  }  actions.startFunction(name,params);  blockDepth++;}  }
class C{  private void validateQuietZone(BitArray row,int startPattern) throws NotFoundException {  int quietCount=this.narrowLineWidth * 10;  for (int i=startPattern - 1; quietCount > 0 && i >= 0; i--) {    if (row.get(i)) {      break;    }    quietCount--;  }  if (quietCount != 0) {    throw NotFoundException.getNotFoundInstance();  }}  }
class C{  protected SystemMember removeSystemMember(InternalDistributedMember internalId){  if (internalId == null)   return null;  boolean found=false;  SystemMemberImpl member=null;synchronized (this.cacheServerSet) {    SERVERS:     for (Iterator iter=this.cacheServerSet.iterator(); iter.hasNext() && !found; ) {      Future future=(Future)iter.next();      if (future instanceof AdminFutureTask) {        AdminFutureTask task=(AdminFutureTask)future;        if (task.getMemberId().equals(internalId)) {          future.cancel(true);        } else {          continue SERVERS;        }      }      for (; ; ) {        checkCancellation();        boolean interrupted=Thread.interrupted();        try {          member=(SystemMemberImpl)future.get();          break;        } catch (        InterruptedException ex) {          interrupted=true;          continue;        }catch (        CancellationException ex) {          continue SERVERS;        }catch (        ExecutionException ex) {          handle(ex);          return null;        } finally {          if (interrupted) {            Thread.currentThread().interrupt();          }        }      }      InternalDistributedMember cacheServerId=member.getInternalId();      if (internalId.equals(cacheServerId)) {        iter.remove();        found=true;      }    }  }synchronized (this.applicationSet) {    for (Iterator iter=this.applicationSet.iterator(); iter.hasNext() && !found; ) {      Future future=(Future)iter.next();      try {        if (future instanceof AdminFutureTask) {          AdminFutureTask task=(AdminFutureTask)future;          if (task.getMemberId().equals(internalId)) {            iter.remove();            found=true;            if (future.isDone()) {              member=(SystemMemberImpl)future.get();            }            break;          } else {            continue;          }        }        if (future.isDone()) {          member=(SystemMemberImpl)future.get();        } else {          future.cancel(true);        }      } catch (      InterruptedException ex) {        Thread.currentThread().interrupt();        checkCancellation();        throw new RuntimeException(LocalizedStrings.AdminDistributedSystemImpl_INTERRUPTED.toLocalizedString(),ex);      }catch (      CancellationException ex) {        continue;      }catch (      ExecutionException ex) {        handle(ex);        return null;      }      InternalDistributedMember applicationId=member.getInternalId();      if (internalId.equals(applicationId)) {        iter.remove();        found=true;      }    }  }  if (found) {    try {      if (member != null) {        member.setGemFireVM(null);      }    } catch (    AdminException ex) {      logger.fatal(LocalizedMessage.create(LocalizedStrings.AdminDistributedSystem_UNEXPECTED_ADMINEXCEPTION),ex);    }    return member;  } else {    if (logger.isDebugEnabled()) {      logger.debug("Couldn't remove member {}",internalId);    }    return null;  }}  }
class C{  public final boolean put(long k){  if (count >= thresh)   this.grow();  if (k == 0) {    if (this.hasZero)     return true;    this.hasZero=true;    this.count++;    return false;  } else {    int loc=((int)k & 0x7FFFFFFF) % this.length;    while (true) {      long ent=this.table[loc];      if (ent == k)       return true;      if (ent == 0) {        table[loc]=k;        count++;        return false;      }      loc=(loc + 1) % this.length;    }  }}  }
class C{  public CustomerServiceImpl(final GenericDAO<Customer,Long> genericDao,final HashHelper passwordHashHelper,final GenericDAO<Object,Long> customerShopDao,final AttributeService attributeService,final ShopService shopService,final CustomerNameFormatter customerNameFormatter){  super(genericDao);  this.passwordHashHelper=passwordHashHelper;  this.customerShopDao=customerShopDao;  this.attributeService=attributeService;  this.shopService=shopService;  this.customerNameFormatter=customerNameFormatter;}  }
class C{  private void drawHeader(){  final String title=this.getParentWizardTitle();  Pane header=new Pane();  header.setId("header");  header.setPrefSize(722,65);  header.setLayoutX(-1);  header.setLayoutY(-1);  header.setBackground(new Background(new BackgroundFill(Color.WHITE,CornerRadii.EMPTY,Insets.EMPTY)));  ImageView topImage=new ImageView(this.createTopImage());  topImage.setLayoutX(626);  header.getChildren().add(topImage);  this.addToStep(header);}  }
class C{  public boolean isSetHost(){  return this.host != null;}  }
class C{  private static void encodeBinary(byte[] bytes,int startpos,int count,int startmode,StringBuilder sb){  if (count == 1 && startmode == TEXT_COMPACTION) {    sb.append((char)SHIFT_TO_BYTE);  }  int idx=startpos;  if (count >= 6) {    sb.append((char)LATCH_TO_BYTE);    char[] chars=new char[5];    while ((startpos + count - idx) >= 6) {      long t=0;      for (int i=0; i < 6; i++) {        t<<=8;        t+=bytes[idx + i] & 0xff;      }      for (int i=0; i < 5; i++) {        chars[i]=(char)(t % 900);        t/=900;      }      for (int i=chars.length - 1; i >= 0; i--) {        sb.append(chars[i]);      }      idx+=6;    }  }  if (idx < startpos + count) {    sb.append((char)LATCH_TO_BYTE_PADDED);  }  for (int i=idx; i < startpos + count; i++) {    int ch=bytes[i] & 0xff;    sb.append((char)ch);  }}  }
class C{  public String push(){  String text=indent(index++);  if (indent > 0) {    count+=indent;  }  return text;}  }
class C{  public boolean moreWorkThan(StoredBlock other){  return chainWork.compareTo(other.chainWork) > 0;}  }
class C{  @Override public void send(final Queue destination,final Message message,final int deliveryMode,final int priority,final long timeToLive) throws JMSException {  session.lock();  try {    if (ActiveMQRAQueueSender.trace) {      ActiveMQRALogger.LOGGER.trace("send " + this + " destination="+ destination+ " message="+ message+ " deliveryMode="+ deliveryMode+ " priority="+ priority+ " ttl="+ timeToLive);    }    checkState();    producer.send(destination,message,deliveryMode,priority,timeToLive);    if (ActiveMQRAQueueSender.trace) {      ActiveMQRALogger.LOGGER.trace("sent " + this + " result="+ message);    }  }  finally {    session.unlock();  }}  }
class C{  @Override public synchronized void removeDataSourceListener(DataSourceListener dsl){  m_dataListeners.remove(dsl);}  }
class C{  public float readFloat(){  return readFloatArray()[0];}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:02.993 -0500",hash_original_method="7D555C87655E096A1AB206CCF6046FBB",hash_generated_method="DCDF332367FDF65B6154F1DE58068709") private boolean shouldPostNotification(FailCause cause){  return (cause != FailCause.UNKNOWN);}  }
class C{  public static String rightPad(String str,int size,String delim){  size=(size - str.length()) / delim.length();  if (size > 0) {    str+=repeat(delim,size);  }  return str;}  }
class C{  public DefaultDependencyManager(){  ignorePatterns=emptySet();}  }
class C{  @Override public void renderFormsOntoG2(final Object raw,final int pageIndex,final int currentIndent,final int currentRotation,final Map componentsToIgnore,final FormFactory formFactory,final int pageHeight){  if (formsUnordered == null || rasterizeForms) {  } else   if (this.formFactory.getType() == FormFactory.HTML || this.formFactory.getType() == FormFactory.SVG) {    renderFormsOntoG2WithHTML(pageIndex,componentsToIgnore);  } else   if (GraphicsEnvironment.isHeadless() || formFactory == null) {    renderFormsOntoG2InHeadless(raw,pageIndex,componentsToIgnore,formFactory);  } else {    renderFormsOntoG2WithSwing(raw,pageIndex,currentIndent,currentRotation,componentsToIgnore,formFactory,pageHeight);  }}  }
class C{  @Action(value="/reports/cashCollectionReport-submissionReport") public String submissionReport(){  final Map<String,Object> session=getSession();  collectionsUtil.getLoggedInUser();  SimpleDateFormat sdf=new SimpleDateFormat("dd/MM/yyyy");  Date rcptDate=null;  try {    rcptDate=sdf.parse(receiptDate);  } catch (  ParseException e) {    LOGGER.error("Exception occured while parsing receipt created date",e);  }  critParams.put(EGOV_FROM_DATE,rcptDate);  critParams.put(EGOV_TO_DATE,rcptDate);  critParams.put(EGOV_COUNTER_OPERATOR_ID,Long.valueOf(-1L));  critParams.put(EGOV_COUNTER_ID,collectionsUtil.getLocationOfUser(getSession()).getId().longValue());  critParams.put(EGOV_RECEIPT_IDS,Arrays.asList((Long[])session.get(CollectionConstants.SESSION_VAR_RECEIPT_IDS)));  return report();}  }
class C{  public void removeRow(int row){  dataVector.removeElementAt(row);  fireTableRowsDeleted(row,row);}  }
class C{  public T screenColors(String value){  setString(SCREEN_COLORS,value);  return (T)this;}  }
class C{  public static <K,V>ImmutableListMultimap<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4,K k5,V v5){  ImmutableListMultimap.Builder<K,V> builder=ImmutableListMultimap.builder();  builder.put(k1,v1);  builder.put(k2,v2);  builder.put(k3,v3);  builder.put(k4,v4);  builder.put(k5,v5);  return builder.build();}  }
class C{  public static LatLonPoint UTMtoLL(Ellipsoid ellip,double UTMNorthing,double UTMEasting,int ZoneNumber,boolean isNorthern,LatLonPoint llpoint){  return UTMtoLL(ellip,UTMNorthing,UTMEasting,ZoneNumber,(isNorthern) ? 'N' : 'S',llpoint);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public void onDestroy(){  this.pluginDestroyed=true;}  }
class C{  public QualifiedName(String name){  if (name == null)   throw new IllegalArgumentException("name argument must not be null");  namespaceIndex=0;  this.name=name;}  }
class C{  public double absSum(){  return this.matrix.absSum();}  }
class C{  private PathPatternProcessorDecorator(final Object processor,final boolean includes,final String... patterns){  super(processor);  notEmpty(patterns,"A pattern set is required.");  this.includes=includes;  matcher=new AntPathMatcher();  this.patterns=patterns;  LOG.debug("{} patterns {}",includes ? "include" : "exclude",Arrays.toString(patterns));}  }
class C{  public boolean equals(Object obj){  if (this == obj)   return true;  if (obj instanceof ECFieldF2m) {    return ((m == ((ECFieldF2m)obj).m) && (Arrays.equals(ks,((ECFieldF2m)obj).ks)));  }  return false;}  }
class C{  public void testAddLocationSimple(){  long startTime=1000;  tripStatisticsUpdater=new TripStatisticsUpdater(startTime);  TripStatistics tripStatistics=tripStatisticsUpdater.getTripStatistics();  assertEquals(0.0,tripStatisticsUpdater.getSmoothedElevation());  assertEquals(Double.POSITIVE_INFINITY,tripStatistics.getMinElevation());  assertEquals(Double.NEGATIVE_INFINITY,tripStatistics.getMaxElevation());  assertEquals(0.0,tripStatistics.getMaxSpeed());  assertEquals(Double.POSITIVE_INFINITY,tripStatistics.getMinGrade());  assertEquals(Double.NEGATIVE_INFINITY,tripStatistics.getMaxGrade());  assertEquals(0.0,tripStatistics.getTotalElevationGain());  assertEquals(0,tripStatistics.getMovingTime());  assertEquals(0.0,tripStatistics.getTotalDistance());  addMoveLocations(100,startTime,tripStatistics,0,0);  addWaitLocations(100,startTime,tripStatistics,100,99);  addMoveLocations(100,startTime,tripStatistics,200,100);  addWaitLocations(100,startTime,tripStatistics,300,199);  addMoveLocations(100,startTime,tripStatistics,400,200);  addWaitLocations(100,startTime,tripStatistics,500,299);  addMoveLocations(100,startTime,tripStatistics,600,300);}  }
class C{  public static double cosh(double value){  if (USE_JDK_MATH) {    return Math.cosh(value);  }  if (value < 0.0) {    value=-value;  }  if (value < LOG_TWO_POW_27) {    if (value < TWO_POW_N27) {      return 1;    } else {      final double t=exp(value);      return 0.5 * (t + 1 / t);    }  } else   if (value < LOG_DOUBLE_MAX_VALUE) {    return 0.5 * exp(value);  } else {    final double t=exp(value * 0.5);    return 0.5 * t * t;  }}  }
class C{  public Boolean isWriteLocked(K token){  RWLock<K> lock=locks.get(token);  if (lock == null)   return null;  return lock.isWriteLocked();}  }
class C{  public ClassSignature(final Class<?> clazz,boolean isRuntimeClass){  this.reader=null;  this.isRuntimeClass=isRuntimeClass;  this.className=Type.getType(clazz).getInternalName();  final Class<?> superclazz=clazz.getSuperclass();  this.superName=superclazz == null ? null : Type.getType(superclazz).getInternalName();  final Class<?>[] interfClasses=clazz.getInterfaces();  this.interfaces=new String[interfClasses.length];  for (int i=0; i < interfClasses.length; i++) {    this.interfaces[i]=Type.getType(interfClasses[i]).getInternalName();  }  final Set<Method> methods=new HashSet<Method>();  final Set<String> fields=new HashSet<String>();  final Set<String> signaturePolymorphicMethods=new HashSet<String>();  for (  final java.lang.reflect.Method m : clazz.getDeclaredMethods()) {    methods.add(Method.getMethod(m));    if (className.startsWith(SIGNATURE_POLYMORPHIC_PKG_INTERNALNAME) && m.isVarArgs() && (m.getModifiers() & Modifier.NATIVE) != 0 && SIGNATURE_POLYMORPHIC_DESCRIPTOR.equals(Type.getMethodDescriptor(m))) {      signaturePolymorphicMethods.add(m.getName());    }  }  for (  final java.lang.reflect.Constructor<?> m : clazz.getDeclaredConstructors()) {    methods.add(Method.getMethod(m));  }  for (  final java.lang.reflect.Field f : clazz.getDeclaredFields()) {    fields.add(f.getName());  }  this.methods=createSet(methods);  this.fields=createSet(fields);  this.signaturePolymorphicMethods=createSet(signaturePolymorphicMethods);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.replaceData(0,50,"2600");  childData=child.getData();  assertEquals("characterdataReplaceDataExceedsLengthOfDataAssert","2600",childData);}  }
class C{  public ASTFlattener(){  this.fBuffer=new StringBuffer();}  }
class C{  @SuppressWarnings("unchecked") public static <C extends Comparable>ImmutableRangeSet<C> of(){  return (ImmutableRangeSet<C>)EMPTY;}  }
class C{  public static void unPad(byte[] src,int start,byte[] dest){  System.arraycopy(src,start,dest,0,CG2_PAD_POSITION);  System.arraycopy(src,start + CG2_PAD_POSITION + 1,dest,CG2_PAD_POSITION,CG2_RAW_READ_LENGTH - CG2_PAD_POSITION);}  }
class C{  public static boolean isBetween(double val,double theshold1,double theshold2){  return theshold2 > theshold1 ? val > theshold1 && val < theshold2 : val > theshold2 && val < theshold1;}  }
class C{  private void periodicallyPublishLastNInfo(TStream<JsonObject> stream,int count,int nSec,String event){  List<JsonObject> lastN=Collections.synchronizedList(new ArrayList<>());  stream.last(count,JsonTuples.keyFn()).aggregate(null).tag(event + ".lastN").sink(null);  TStream<JsonObject> periodicLastN=t.poll(null,nSec,TimeUnit.SECONDS).tag(event + ".trigger").filter(null).tag(event + ".changed").map(null).tag(event);  traceStream(periodicLastN,event);  app.mqttDevice().events(PlumbingStreams.pressureReliever(periodicLastN,null,30).tag(event + ".pressureRelieved"),app.sensorEventId(sensorId,event),QoS.FIRE_AND_FORGET);}  }
class C{  protected int estimateProtocolVersionLen(final ProtocolVersion version){  return version.getProtocol().length() + 4;}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:12.574 -0500",hash_original_method="345309F322E0CB3C0BD3B9A37C988F09",hash_generated_method="C3E285EC69CC0008B4692DA77698D14C") @Override public void send(HandshakeIODataStream out){  int total_length=0;  if (encoded_certs == null) {    encoded_certs=new byte[certs.length][];    for (int i=0; i < certs.length; i++) {      try {        encoded_certs[i]=certs[i].getEncoded();      } catch (      CertificateEncodingException e) {        fatalAlert(AlertProtocol.INTERNAL_ERROR,"INTERNAL ERROR",e);      }    }  }  total_length=3 * encoded_certs.length;  for (int i=0; i < encoded_certs.length; i++) {    total_length+=encoded_certs[i].length;  }  out.writeUint24(total_length);  for (int i=0; i < encoded_certs.length; i++) {    out.writeUint24(encoded_certs[i].length);    out.write(encoded_certs[i]);  }}  }
class C{  public static <V>CaseInsensitiveMap<V> createCaseInsensitiveMap(int initial){  return new CaseInsensitiveMapImpl<>(initial);}  }
class C{  private void resolveRights(MailboxACLEntryKey queryKey,GroupMembershipResolver groupMembershipResolver,Map<MailboxACLEntryKey,MailboxACLRights> entries,String resourceOwner,boolean resourceOwnerIsGroup,MailboxACL.MailboxACLRights[] positiveNegativePair) throws UnsupportedRightException {  if (entries != null) {    for (    Entry<MailboxACLEntryKey,MailboxACLRights> entry : entries.entrySet()) {      final MailboxACLEntryKey key=entry.getKey();      if (applies(key,queryKey,groupMembershipResolver,resourceOwner,resourceOwnerIsGroup)) {        if (key.isNegative()) {          positiveNegativePair[NEGATIVE_INDEX]=positiveNegativePair[NEGATIVE_INDEX].union(entry.getValue());        } else {          positiveNegativePair[POSITIVE_INDEX]=positiveNegativePair[POSITIVE_INDEX].union(entry.getValue());        }      }    }  }}  }
class C{  protected V12Database(WireDatabaseConnection connection,ProtocolDescriptor descriptor){  super(connection,descriptor);}  }
class C{  public static boolean isEmpty(Object value){  return (null == value) || (value.getClass().equals(String.class) && isNullOrEmpty((String)value) || (Collection.class.isAssignableFrom(value.getClass()) && ((Collection)value).isEmpty()) || (Map.class.isAssignableFrom(value.getClass()) && ((Map)value).isEmpty()));}  }
class C{  public Vector3f cross(Vector3f v,Vector3f result){  return cross(v.x,v.y,v.z,result);}  }
class C{  public SelectAllAction(@Nullable JComponent target){  super(target);  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");  labels.configureAction(this,ID);}  }
class C{  public boolean isBroken(){  final ReentrantLock lock=this.lock;  lock.lock();  try {    return generation.broken;  }  finally {    lock.unlock();  }}  }
class C{  VPlexDeviceInfo findLocalDevice(String deviceName) throws VPlexApiException {  VPlexDeviceInfo deviceInfo=null;  List<VPlexClusterInfo> clusterInfoList=getClusterInfoLite();  for (  VPlexClusterInfo clusterInfo : clusterInfoList) {    String clusterName=clusterInfo.getName();    s_logger.info("Find device {} on cluster {}",deviceName,clusterName);    List<VPlexDeviceInfo> deviceInfoList=getLocalDeviceInfoOnCluster(clusterName);    for (    VPlexDeviceInfo clusterDeviceInfo : deviceInfoList) {      if (clusterDeviceInfo.getName().equals(deviceName)) {        deviceInfo=clusterDeviceInfo;        deviceInfo.setCluster(clusterName);        break;      }    }    if (deviceInfo != null) {      break;    }  }  return deviceInfo;}  }
class C{  private static boolean isUriHandled(Uri uri){  String scheme=uri.getScheme();  if (TextUtils.equals(scheme,FRODO_SCHEME)) {    return true;  } else   if (MoreTextUtils.equalsAny(scheme,"https","http")) {    String host=uri.getHost();    if (!TextUtils.isEmpty(host) && MoreTextUtils.equalsAny(host,"www.douban.com","m.douban.com","book.douban.com","movie.douban.com","music.douban.com","dongxi.douban.com")) {      List<String> pathSegments=uri.getPathSegments();      String pathSegment0=pathSegments.size() >= 1 ? pathSegments.get(0) : null;      if (!TextUtils.isEmpty(pathSegment0)) {        if (MoreTextUtils.equalsAny(pathSegment0,"group","theme","update","hashtag","app_topic","subject","book","music","movie","game","mobileapp","event","note","show","doulist","review","photos","celebrity")) {          return true;        } else         if (TextUtils.equals(pathSegment0,"people")) {          String pathSegment2=pathSegments.size() >= 3 ? pathSegments.get(2) : null;          if (TextUtils.isEmpty(pathSegment2)) {            return true;          } else           if (MoreTextUtils.equalsAny(pathSegment2,"reviews","wish","collect","games","apps","status")) {            return true;          }        }      }    }  }  return false;}  }
class C{  public AttributeSet parseDeclaration(String string){  try {    return parseDeclaration(new StringReader(string));  } catch (  IOException ioe) {  }  return null;}  }
class C{  public boolean isGet(){  return HttpMethod.GET.equals(getMethod());}  }
class C{  public void blend(PImage src,int sx,int sy,int sw,int sh,int dx,int dy,int dw,int dh,int mode){  g.blend(src,sx,sy,sw,sh,dx,dy,dw,dh,mode);}  }
class C{  @Override public String toString(){  return mUuid.toString();}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  if (evt.getPropertyName().equals(org.compiere.model.GridField.PROPERTY))   setValue(evt.getNewValue());}  }
class C{  private boolean findNodeFromTail(Node node){  Node t=tail;  for (; ; ) {    if (t == node)     return true;    if (t == null)     return false;    t=t.prev;  }}  }
class C{  private void write(Map<String,String> sortedProps,String filePath) throws IOException {  File outFile=new File(filePath);  if (outFile.exists()) {    outFile.delete();  }  outFile.createNewFile();  FileOutputStream fos=null;  try {    fos=new FileOutputStream(outFile);    for (    String key : sortedProps.keySet()) {      String entry=String.format("%s=%s%n",key,saveConvert(sortedProps.get(key),false));      fos.write(entry.getBytes("UTF-8"));    }  }  finally {    if (fos != null) {      fos.close();    }  }}  }
class C{  public void diff_cleanupSemantic(LinkedList<Diff> diffs){  if (diffs.isEmpty()) {    return;  }  boolean changes=false;  Stack<Diff> equalities=new Stack<Diff>();  String lastequality=null;  ListIterator<Diff> pointer=diffs.listIterator();  int length_insertions1=0;  int length_deletions1=0;  int length_insertions2=0;  int length_deletions2=0;  Diff thisDiff=pointer.next();  while (thisDiff != null) {    if (thisDiff.operation == Operation.EQUAL) {      equalities.push(thisDiff);      length_insertions1=length_insertions2;      length_deletions1=length_deletions2;      length_insertions2=0;      length_deletions2=0;      lastequality=thisDiff.text;    } else {      if (thisDiff.operation == Operation.INSERT) {        length_insertions2+=thisDiff.text.length();      } else {        length_deletions2+=thisDiff.text.length();      }      if (lastequality != null && (lastequality.length() <= Math.max(length_insertions1,length_deletions1)) && (lastequality.length() <= Math.max(length_insertions2,length_deletions2))) {        while (thisDiff != equalities.lastElement()) {          thisDiff=pointer.previous();        }        pointer.next();        pointer.set(new Diff(Operation.DELETE,lastequality));        pointer.add(new Diff(Operation.INSERT,lastequality));        equalities.pop();        if (!equalities.empty()) {          equalities.pop();        }        if (equalities.empty()) {          while (pointer.hasPrevious()) {            pointer.previous();          }        } else {          thisDiff=equalities.lastElement();          while (thisDiff != pointer.previous()) {          }        }        length_insertions1=0;        length_insertions2=0;        length_deletions1=0;        length_deletions2=0;        lastequality=null;        changes=true;      }    }    thisDiff=pointer.hasNext() ? pointer.next() : null;  }  if (changes) {    diff_cleanupMerge(diffs);  }  diff_cleanupSemanticLossless(diffs);  pointer=diffs.listIterator();  Diff prevDiff=null;  thisDiff=null;  if (pointer.hasNext()) {    prevDiff=pointer.next();    if (pointer.hasNext()) {      thisDiff=pointer.next();    }  }  while (thisDiff != null) {    if (prevDiff.operation == Operation.DELETE && thisDiff.operation == Operation.INSERT) {      String deletion=prevDiff.text;      String insertion=thisDiff.text;      int overlap_length1=this.diff_commonOverlap(deletion,insertion);      int overlap_length2=this.diff_commonOverlap(insertion,deletion);      if (overlap_length1 >= overlap_length2) {        if (overlap_length1 >= deletion.length() / 2.0 || overlap_length1 >= insertion.length() / 2.0) {          pointer.previous();          pointer.add(new Diff(Operation.EQUAL,insertion.substring(0,overlap_length1)));          prevDiff.text=deletion.substring(0,deletion.length() - overlap_length1);          thisDiff.text=insertion.substring(overlap_length1);        }      } else {        if (overlap_length2 >= deletion.length() / 2.0 || overlap_length2 >= insertion.length() / 2.0) {          pointer.previous();          pointer.add(new Diff(Operation.EQUAL,deletion.substring(0,overlap_length2)));          prevDiff.operation=Operation.INSERT;          prevDiff.text=insertion.substring(0,insertion.length() - overlap_length2);          thisDiff.operation=Operation.DELETE;          thisDiff.text=deletion.substring(overlap_length2);        }      }      thisDiff=pointer.hasNext() ? pointer.next() : null;    }    prevDiff=thisDiff;    thisDiff=pointer.hasNext() ? pointer.next() : null;  }}  }
class C{  public boolean equals(Object obj){  if (this == obj)   return true;  if (this == POINT_INFINITY)   return false;  if (obj instanceof ECPoint) {    return ((x.equals(((ECPoint)obj).x)) && (y.equals(((ECPoint)obj).y)));  }  return false;}  }
class C{  public Location(String address){  setAddress(address);}  }
class C{  protected void updateLocalBest(){  for (int i=0; i < swarmSize; i++) {    int flag=dominanceComparator.compare(particles[i],localBestParticles[i]);    if (flag <= 0) {      localBestParticles[i]=particles[i];    }  }}  }
class C{  private void add(int[] ngram,long value,long[][] funcs){  if (ngram == null)   return;  int qValue=quantize(value);  for (int i=1; i <= qValue; i++) {    int hash=hashNgram(ngram,0,ngram.length,i);    bf.add(hash,funcs);  }}  }
class C{  public AuthorizationData(DerValue der) throws Asn1Exception, IOException {  Vector<AuthorizationDataEntry> v=new Vector<>();  if (der.getTag() != DerValue.tag_Sequence) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  while (der.getData().available() > 0) {    v.addElement(new AuthorizationDataEntry(der.getData().getDerValue()));  }  if (v.size() > 0) {    entry=new AuthorizationDataEntry[v.size()];    v.copyInto(entry);  }}  }
class C{  protected void processDocType() throws Exception {  if (!XMLUtil.checkLiteral(this.reader,"OCTYPE")) {    XMLUtil.errorExpectedInput(reader.getSystemID(),reader.getLineNr(),"<!DOCTYPE");    return;  }  XMLUtil.skipWhitespace(this.reader,null);  String systemID=null;  StringBuffer publicID=new StringBuffer();  String rootElement=XMLUtil.scanIdentifier(this.reader);  XMLUtil.skipWhitespace(this.reader,null);  char ch=this.reader.read();  if (ch == 'P') {    systemID=XMLUtil.scanPublicID(publicID,reader);    XMLUtil.skipWhitespace(this.reader,null);    ch=this.reader.read();  } else   if (ch == 'S') {    systemID=XMLUtil.scanSystemID(reader);    XMLUtil.skipWhitespace(this.reader,null);    ch=this.reader.read();  }  if (ch == '[') {    this.validator.parseDTD(publicID.toString(),this.reader,this.entityResolver,false);    XMLUtil.skipWhitespace(this.reader,null);    ch=this.reader.read();  }  if (ch != '>') {    XMLUtil.errorExpectedInput(reader.getSystemID(),reader.getLineNr(),"`>'");  }  if (false) {    if (systemID != null) {      Reader reader=this.reader.openStream(publicID.toString(),systemID);      this.reader.startNewStream(reader);      this.reader.setSystemID(systemID);      this.reader.setPublicID(publicID.toString());      this.validator.parseDTD(publicID.toString(),this.reader,this.entityResolver,true);    }  }}  }
class C{  private StorageSample(){}  }
class C{  private void addFacetSelection(AppContext ctx,Universe universe,List<Facet> facetsSel,DashboardSelection ds,DashboardSelection compareFrom) throws ScopeException, ComputingException, InterruptedException {  for (  Facet facetSel : facetsSel) {    if (SegmentManager.isSegmentFacet(facetSel)) {      SegmentManager.addSegmentSelection(ctx,universe,facetSel,ds);    } else {      Axis axis=getFacetAxis(ctx,universe,facetSel);      if (axis != null) {        Domain domain=axis.getParent().getRoot();        DimensionIndex index=universe.getDomainHierarchy(domain,true).getDimensionIndex(axis);        if (index == null) {          if (axis.getDimension() != null) {            Domain shortcut=axis.getParent().getDomain();            index=universe.getDomainHierarchy(shortcut,true).getDimensionIndex(axis.prune());          } else {            throw new ScopeException("unable to filter on " + axis.getDefinitionSafe().prettyPrint());          }        }        AccessRightsUtils.getInstance().checkRole(ctx,index.getDimension(),Role.READ);        for (        FacetMember selectedItem : facetSel.getSelectedItems()) {          if (selectedItem instanceof FacetMemberInterval) {            IntervalleObject compareFromInterval=null;            if (compareFrom != null) {              Collection<DimensionMember> members=compareFrom.getMembers(axis);              if (members.size() == 1) {                DimensionMember member=members.iterator().next();                if (member.getID() instanceof IntervalleObject) {                  compareFromInterval=(IntervalleObject)member.getID();                }              }            }            FacetMemberInterval fmi=(FacetMemberInterval)selectedItem;            try {              Date lowerDate=convertToDate(universe,index,Bound.LOWER,fmi.getLowerBound(),compareFromInterval);              Date upperDate=convertToDate(universe,index,Bound.UPPER,fmi.getUpperBound(),compareFromInterval);              ds.add(axis,IntervalleObject.createInterval(lowerDate,upperDate));            } catch (            java.text.ParseException e) {              throw new ComputingException(e);            }          } else           if (selectedItem instanceof FacetMemberString) {            FacetMemberString fmember=(FacetMemberString)selectedItem;            if (fmember.getId() != null && !fmember.getId().equals("") && facetSel.getId() != null) {              DimensionMember member=index.getMemberByKey(fmember.getId());              if (member != null) {                ds.add(axis,member);              } else               if (fmember.getValue() != null) {                member=index.getMemberByID(fmember.getValue());                if (member != null) {                  fmember.setId(member.getKey());                  ds.add(axis,member);                } else {                  throw new ComputingException("invalid selection, unkonwn index value");                }              } else {                throw new ComputingException("invalid selection, unkonwn index reference");              }            } else             if (fmember.getValue() != null) {              DimensionMember member=index.getMemberByID(fmember.getValue());              if (member != null) {                fmember.setId(member.getKey());                ds.add(axis,member);              } else {                throw new ComputingException("invalid selection, unkonwn index value");              }            } else {              throw new ComputingException("invalid selection, undefine index");            }          }        }      } else {        logger.info("ignoring invalid facet selection");      }    }  }}  }
class C{  @Override @Inline public ObjectReference traceObject(ObjectReference object){  return object;}  }
class C{  @SuppressWarnings("restriction") public boolean load(java.io.InputStream in) throws XMLStreamException {  XMLStreamReader reader=null;  try {    reader=inputFactory.createXMLStreamReader(new java.io.InputStreamReader(in));    while (reader.hasNext()) {      int evtType=reader.next();      if (evtType != XMLStreamConstants.START_ELEMENT)       continue;      String tagName=reader.getLocalName();      if (!"stat".equals(tagName))       continue;      String name=reader.getAttributeValue(null,"name");      if (name != null && name.trim().length() > 0) {        this.statMap.put(name.toLowerCase(),reader.getElementText());      }    }  }  finally {    if (reader != null)     try {      reader.close();      reader=null;    } catch (    Exception iex) {    }  }  return false;}  }
class C{  public ExecutionSynchronization createExecutionSynchronization(){  ExecutionSynchronizationImpl executionSynchronization=new ExecutionSynchronizationImpl();  return executionSynchronization;}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public List<String> updateDeletionStatus(String loadDate,String tableFolderPath,Long loadStartTime){  ICarbonLock carbonLock=CarbonLockFactory.getCarbonLockObj(absoluteTableIdentifier.getCarbonTableIdentifier(),LockUsage.METADATA_LOCK);  List<String> invalidLoadTimestamps=new ArrayList<String>(0);  try {    if (carbonLock.lockWithRetries()) {      LOG.info("Metadata lock has been successfully acquired");      CarbonTablePath carbonTablePath=CarbonStorePath.getCarbonTablePath(absoluteTableIdentifier.getStorePath(),absoluteTableIdentifier.getCarbonTableIdentifier());      String dataLoadLocation=carbonTablePath.getTableStatusFilePath();      LoadMetadataDetails[] listOfLoadFolderDetailsArray=null;      if (!FileFactory.isFileExist(dataLoadLocation,FileFactory.getFileType(dataLoadLocation))) {        LOG.error("Error message: " + "Load metadata file is not present.");        invalidLoadTimestamps.add(loadDate);        return invalidLoadTimestamps;      }      listOfLoadFolderDetailsArray=readLoadMetadata(tableFolderPath);      if (listOfLoadFolderDetailsArray != null && listOfLoadFolderDetailsArray.length != 0) {        updateDeletionStatus(loadDate,listOfLoadFolderDetailsArray,invalidLoadTimestamps,loadStartTime);        if (invalidLoadTimestamps.isEmpty()) {          writeLoadDetailsIntoFile(dataLoadLocation,listOfLoadFolderDetailsArray);        } else {          return invalidLoadTimestamps;        }      } else {        LOG.audit("Delete load by date is failed. No matching load found.");        invalidLoadTimestamps.add(loadDate);        return invalidLoadTimestamps;      }    } else {      LOG.error("Error message: " + "Unable to acquire the metadata lock");    }  } catch (  IOException e) {    LOG.error("Error message: " + "IOException" + e.getMessage());  } finally {    fileUnlock(carbonLock);  }  return invalidLoadTimestamps;}  }
class C{  public PortUnreachableException(String detailMessage){  super(detailMessage);}  }
class C{  public void trimToSize(){  if (size < array.length) {    int[] olddata=array;    array=new int[size];    System.arraycopy(olddata,0,array,0,size);  }}  }
class C{  public Message(MessageLevel level,Object sender,String id,String[] idParams){  this(level,sender,new String[0],id,idParams);}  }
class C{  public void removeUINodes(Node... nodes){  for (  Node node : nodes)   removeUINode(node);}  }
class C{  private synchronized CompletableFuture<Void> compact(Compaction compaction,CompletableFuture<Void> future,ThreadContext context){  CompactionManager manager=compaction.manager(this);  AtomicInteger counter=new AtomicInteger();  Collection<CompactionTask> tasks=manager.buildTasks(storage,segments);  if (!tasks.isEmpty()) {    LOGGER.info("Compacting log with compaction: {}",compaction);    LOGGER.debug("Executing {} compaction task(s)",tasks.size());    for (    CompactionTask task : tasks) {      LOGGER.debug("Executing {}",task);      ThreadContext taskThread=new ThreadPoolContext(executor,segments.serializer());      taskThread.execute(task).whenComplete(null);    }  } else {    future.complete(null);  }  return future;}  }
class C{  private boolean isMoveOperation(TransferSupport ts,boolean isRepositoryInLocations){  return (latestAction == MOVE || ts.isDrop() && ts.getDropAction() == MOVE) && !isRepositoryInLocations;}  }
class C{  public static WrapperQueryBuilder wrapperQuery(String source){  return new WrapperQueryBuilder(source);}  }
class C{  public static boolean isPortalBlock(Block b){  for (  BlockFace face : BlockFace.values())   if (b.getRelative(face).getType() == Material.PORTAL)   return true;  return false;}  }
class C{  public T casePreValidation(PreValidation object){  return null;}  }
class C{  private Job createJobWithParameters(S3PropertiesLocation jobDefinitionS3PropertiesLocation,List<Parameter> jobDefinitionParameters,S3PropertiesLocation jobCreateRequestS3PropertiesLocation,List<Parameter> jobCreateRequestParameters) throws Exception {  namespaceDaoTestHelper.createNamespaceEntity(TEST_ACTIVITI_NAMESPACE_CD);  JobDefinitionCreateRequest jobDefinitionCreateRequest=jobDefinitionServiceTestHelper.createJobDefinitionCreateRequest();  jobDefinitionCreateRequest.setParameters(jobDefinitionParameters);  jobDefinitionCreateRequest.setS3PropertiesLocation(jobDefinitionS3PropertiesLocation);  jobDefinitionService.createJobDefinition(jobDefinitionCreateRequest,false);  JobCreateRequest jobCreateRequest=jobServiceTestHelper.createJobCreateRequest(TEST_ACTIVITI_NAMESPACE_CD,TEST_ACTIVITI_JOB_NAME);  jobCreateRequest.setParameters(jobCreateRequestParameters);  jobCreateRequest.setS3PropertiesLocation(jobCreateRequestS3PropertiesLocation);  return jobService.createAndStartJob(jobCreateRequest);}  }
class C{  protected void subdivide(Line2D src,Line2D left,Line2D right){  double x1=src.getX1();  double y1=src.getY1();  double x2=src.getX2();  double y2=src.getY2();  double mx=x1 + (x2 - x1) / 2.0;  double my=y1 + (y2 - y1) / 2.0;  if (left != null) {    left.setLine(x1,y1,mx,my);  }  if (right != null) {    right.setLine(mx,my,x2,y2);  }}  }
class C{  @PreDestroy @Override public void dispose(){  logger.info(getClass().getName() + " dispose...");  active.set(false);  dequeueService.shutdownNow();  workerService.shutdown();  long stop=System.currentTimeMillis() + 60000;  while (numActive.get() != 0 && stop > System.currentTimeMillis()) {    try {      Thread.sleep(1000);    } catch (    Exception ignored) {    }  }  logger.info(getClass().getName() + " thread shutdown completed.");}  }
class C{  public Zone selectExistingZoneForInitiatorPort(NetworkLite network,String initiatorWwn,String portWwn,List<Zone> existingZones){  if (existingZones == null || existingZones.isEmpty()) {    return null;  }  boolean existingZone=true;  Zone foundZone=null;  String key=FCZoneReference.makeEndpointsKey(initiatorWwn,portWwn);  List<FCZoneReference> fcZoneRefs=getFCZoneReferencesForKey(key);  if (!fcZoneRefs.isEmpty()) {    Zone matchedZone=null;    _log.info("Found {} FCZoneReference for key {}",fcZoneRefs.size(),key);    for (    FCZoneReference fcZoneRef : fcZoneRefs) {      if (network.getNetworkSystems().contains(fcZoneRef.getNetworkSystemUri().toString()) && network.getNativeId().equals(fcZoneRef.getFabricId())) {        _log.debug("Found an FCZoneReference for zone {}",fcZoneRef.getZoneName());        matchedZone=findZoneByNameAndPort(fcZoneRef.getZoneName(),portWwn,existingZones);        if (matchedZone != null) {          _log.debug("Found the zone for FCZoneReference {} in the initiator existing zones",fcZoneRef.getZoneName());          _log.debug(matchedZone.getLogString());          foundZone=matchedZone;          if (!fcZoneRef.getExistingZone()) {            existingZone=false;            _log.debug("Selected zone {} because it was created by ViPR",foundZone.getName());            break;          }        }      }    }  }  if (foundZone != null) {    _log.debug("Selected existing Zone {} as it is already used by ViPR",foundZone.getName());  } else {    outer:     for (    Zone curZone : existingZones) {      for (      ZoneMember member : curZone.getMembers()) {        if (member.getAddress() != null && member.getAddress().equals(portWwn)) {          foundZone=curZone;          if (curZone.getMembers().size() == 2) {            _log.debug("Selected existing Zone {} as it has only 2 members",foundZone.getName());            break outer;          }        }      }    }  }  if (foundZone != null) {    foundZone.setExistingZone(existingZone);  }  return foundZone;}  }
class C{  public void initialise(int dimensions,int base,double epsilon){  this.epsilon=epsilon;  usingSingleKernelWidthValue=true;  mvke.initialise(dimensions,epsilon);  initialiseCommon(base);}  }
class C{  public void addFooterStatement(String footerStatement){  footerStatements.add(footerStatement);}  }
class C{  public void resultChanged(Result res){  fireResultChanged(res);}  }
class C{  public void testUrlValidWithSimplePath(){  setParameterToInitMockMethod("http://myurl.com/myPage",TestSolution.PASSED);  SeoRule01081 test=new SeoRule01081();  test.setProcessResultDataService(mockProcessResultDataService);  test.setTest(mockTest);  ProcessResult processResult=test.processImpl(mockSspHandler);  assertEquals(mockDefiniteResult,processResult);}  }
class C{  @Nullable public static Class<?>[] readClassArray(ObjectInput in) throws IOException, ClassNotFoundException {  int len=in.readInt();  Class<?>[] arr=null;  if (len > 0) {    arr=new Class<?>[len];    for (int i=0; i < len; i++)     arr[i]=(Class<?>)in.readObject();  }  return arr;}  }
class C{  private void rotateTurntable(double distance){  rotate.fromAngleNormalAxis(azimuth,Vector3.NEG_UNIT_Z);  workRot.fromAngleNormalAxis(elevation,Vector3.UNIT_X);  rotate.multiplyLocal(workRot);  location.set(Vector3.UNIT_Z);  rotate.applyPost(location,location);  location.normalizeLocal();  location.multiplyLocal(distance);  location.addLocal(camera.getLookAt());  camera.setFrame(location,rotate);  updateFromCamera();  updateGeometricState(0);  changed.set(true);  Dert.getMainWindow().updateCompass(azimuth);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.main);}  }
class C{  public Set<String> knownClasses(){  Set<String> r=new HashSet<String>();  r.addAll(branchMap.keySet());  r.addAll(branchlessMethods.keySet());  if (logger.isDebugEnabled()) {    logger.debug("Known classes: " + r);  }  return r;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  XYSeries clone=(XYSeries)super.clone();  clone.data=(List)ObjectUtilities.deepClone(this.data);  return clone;}  }
class C{  void replaceAtt(int nTargetNode,String sName,ArrayList<String> values){  Attribute newAtt=new Attribute(sName,values);  if (m_Instances.classIndex() == nTargetNode) {    m_Instances.setClassIndex(-1);    m_Instances.deleteAttributeAt(nTargetNode);    m_Instances.insertAttributeAt(newAtt,nTargetNode);    m_Instances.setClassIndex(nTargetNode);  } else {    m_Instances.deleteAttributeAt(nTargetNode);    m_Instances.insertAttributeAt(newAtt,nTargetNode);  }}  }
class C{  public static void compileFiles(List<File> files) throws IOException {  JavaCompiler compiler=ToolProvider.getSystemJavaCompiler();  try (StandardJavaFileManager fileManager=compiler.getStandardFileManager(null,null,null)){    Iterable<? extends JavaFileObject> compilationUnit=fileManager.getJavaFileObjectsFromFiles(files);    compiler.getTask(null,fileManager,null,null,null,compilationUnit).call();  } }  }
class C{  public head(Element value){  addElement(value);}  }
class C{  public static void e(String tag,String msg,Throwable thr){  log(LEVEL.ERROR,tag,msg,thr);}  }
class C{  public Credentials withToken(Token token){  this.token=token;  return this;}  }
class C{  private static RPClass createRPClass(){  final RPClass rpclass=new RPClass("area");  rpclass.isA("entity");  rpclass.addAttribute(ATTR_NAME,Type.STRING);  return rpclass;}  }
class C{  public double distanceSq(final java.awt.geom.Point2D p){  final double dx=(double)this.x - p.getX();  final double dy=(double)this.y - p.getY();  return (dx * dx + dy * dy);}  }
class C{  private void prepareInitiatorData() throws Exception {  String currentLabel="RPInitiator1";  Initiator initiator=new Initiator();  initiator.setId(URIUtil.createId(Initiator.class));  initiator.setHostName(currentLabel);  initiator.setInitiatorPort("PORT");  initiator.setInitiatorNode("NODE");  initiator.setProtocol("FC");  initiator.setIsManualCreation(false);  _dbClient.createObject(initiator);  rpTestInitiatorURIs.add(initiator.getId());  rpTestInitiators.add(initiator);  currentLabel="RPInitiator2";  initiator=new Initiator();  initiator.setId(URIUtil.createId(Initiator.class));  initiator.setHostName(currentLabel);  initiator.setInitiatorPort("PORT");  initiator.setInitiatorNode("NODE");  initiator.setProtocol("FC");  initiator.setIsManualCreation(false);  _dbClient.createObject(initiator);  rpTestInitiatorURIs.add(initiator.getId());  rpTestInitiators.add(initiator);  currentLabel="RegularInitiator1";  initiator=new Initiator();  initiator.setId(URIUtil.createId(Initiator.class));  initiator.setHostName(NullColumnValueGetter.getNullStr());  initiator.setInitiatorPort("PORT");  initiator.setInitiatorNode("NODE");  initiator.setProtocol("FC");  initiator.setIsManualCreation(false);  _dbClient.createObject(initiator);  rpTestInitiatorURIs.add(initiator.getId());  rpTestInitiators.add(initiator);  currentLabel="RegularInitiator2";  initiator=new Initiator();  initiator.setId(URIUtil.createId(Initiator.class));  initiator.setHostName(NullColumnValueGetter.getNullStr());  initiator.setInitiatorPort("PORT");  initiator.setInitiatorNode("NODE");  initiator.setProtocol("FC");  initiator.setIsManualCreation(false);  _dbClient.createObject(initiator);  rpTestInitiatorURIs.add(initiator.getId());  rpTestInitiators.add(initiator);  List<URI> initiatorURIs=_dbClient.queryByType(Initiator.class,false);  int count=0;  for (  @SuppressWarnings("unused") URI ignore : initiatorURIs) {    count++;  }  Assert.assertTrue("Expected 4 Initiators, found only " + count,count == 4);}  }
class C{  private boolean isDominated(State newState){  for (Iterator<State> it=bestStatesAtEdge.get(newState.backEdge).iterator(); it.hasNext(); ) {    State existingState=it.next();    if (dominates(existingState,newState)) {      return true;    } else     if (dominates(newState,existingState)) {      it.remove();    }  }  return false;}  }
class C{  public boolean isUnset(String name){  return (values.get(name) == null);}  }
class C{  public Vector decodeEvents(final String document){  if (document != null) {    if (document.trim().equals("")) {      return null;    }    String newDoc=null;    String newPartialEvent=null;    if (document.lastIndexOf(RECORD_END) == -1) {      partialEvent=partialEvent + document;      return null;    }    if (document.lastIndexOf(RECORD_END) + RECORD_END.length() < document.length()) {      newDoc=document.substring(0,document.lastIndexOf(RECORD_END) + RECORD_END.length());      newPartialEvent=document.substring(document.lastIndexOf(RECORD_END) + RECORD_END.length());    } else {      newDoc=document;    }    if (partialEvent != null) {      newDoc=partialEvent + newDoc;    }    partialEvent=newPartialEvent;    Document doc=parse(newDoc);    if (doc == null) {      return null;    }    return decodeEvents(doc);  }  return null;}  }
class C{  public BasePermissionRequest(String requestUrl,IOneDriveClient client,List<Option> options){  super(requestUrl,client,options,Permission.class);}  }
class C{  public Method var(int opcode,int from,int to){  if (from < to) {    for (; from <= to; from++) {      this.insnList.add(new VarInsnNode(opcode,from));    }  } else   if (from > to) {    for (; from >= to; from--) {      this.insnList.add(new VarInsnNode(opcode,from));    }  } else {    this.insnList.add(new VarInsnNode(opcode,from));  }  return this;}  }
class C{  @Override public boolean clonePropertiesOf(PLIObject object){  if (object != null) {    this.setXAxisEnabled(object.isXAxisEnabled());    this.setYAxisEnabled(object.isYAxisEnabled());    this.setZAxisEnabled(object.isZAxisEnabled());    this.setPitchEnabled(object.isPitchEnabled());    this.setYawEnabled(object.isYawEnabled());    this.setRollEnabled(object.isRollEnabled());    this.setReverseRotation(object.isReverseRotation());    this.setYZAxisInverseRotation(object.isYZAxisInverseRotation());    this.setXRange(object.getXRange());    this.setYRange(object.getYRange());    this.setZRange(object.getZRange());    this.setPitchRange(object.getPitchRange());    this.setYawRange(object.getYawRange());    this.setRollRange(object.getRollRange());    this.setX(object.getX());    this.setY(object.getY());    this.setZ(object.getZ());    this.setPitch(object.getPitch());    this.setYaw(object.getYaw());    this.setRoll(object.getRoll());    this.setDefaultAlpha(object.getDefaultAlpha());    this.setAlpha(object.getAlpha());    return true;  }  return false;}  }
class C{  protected AbstractMapEntry(K key,V value){  super(key,value);}  }
class C{  public static boolean showSoftInput(Activity activity){  if (activity.getCurrentFocus() != null) {    InputMethodManager imm=(InputMethodManager)activity.getSystemService(Context.INPUT_METHOD_SERVICE);    return imm.showSoftInput(activity.getCurrentFocus(),InputMethodManager.SHOW_FORCED);  }  return false;}  }
class C{  public GroovyClassDoc[] innerClasses(){  Collections.sort(nested);  return nested.toArray(new GroovyClassDoc[nested.size()]);}  }
class C{  public static Distribution guessAlpha(DataSet d){  return new Uniform(1e-3,1.0);}  }
class C{  public void freeConnection(final HttpConnection conn){  final HostConfiguration connectionConfiguration=configurationForConnection(conn);  if (LOG.isDebugEnabled()) {    LOG.debug("Freeing connection, hostConfig=" + connectionConfiguration);  }synchronized (this) {    if (shutdown) {      conn.close();      return;    }    final HostConnectionPool hostPool=getHostPool(connectionConfiguration,true);    hostPool.freeConnections.add(conn);    if (hostPool.numConnections == 0) {      LOG.error("Host connection pool not found, hostConfig=" + connectionConfiguration);      hostPool.numConnections=1;    }    freeConnections.add(conn);    removeReferenceToConnection((HttpConnectionWithReference)conn);    if (numConnections == 0) {      LOG.error("Host connection pool not found, hostConfig=" + connectionConfiguration);      numConnections=1;    }    idleConnectionHandler.add(conn);    notifyWaitingThread(hostPool);  }}  }
class C{  public void notationDecl(String name,String publicId,String systemId) throws SAXException {}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void createPush(RTLExpression value,StatementSequence seq){  createSPIncrement(-(value.getBitWidth() / 8),seq);  seq.addLast(new RTLMemoryAssignment(ExpressionFactory.createMemoryLocation(sp,arch.getAddressBitWidth()),value));}  }
class C{  public int V(){  return V;}  }
class C{  public final AssertSubscriber<T> assertError(Class<? extends Throwable> clazz){  assertNotComplete();  int s=errors.size();  if (s == 0) {    throw new AssertionError("No error",null);  }  if (s == 1) {    Throwable e=errors.get(0);    if (!clazz.isInstance(e)) {      throw new AssertionError("Error class incompatible: expected = " + clazz + ", actual = "+ e,null);    }  }  if (s > 1) {    throw new AssertionError("Multiple errors: " + s,null);  }  return this;}  }
class C{  public WavBuffer(java.io.File file) throws java.io.IOException {  if (file == null) {    throw new java.io.IOException("Null file during ctor");  }  java.io.InputStream s=new java.io.BufferedInputStream(new java.io.FileInputStream(file));  try {    buffer=new byte[(int)file.length()];    s.read(buffer);    initFmt();    initData();  } catch (  java.io.IOException e1) {    log.error("error reading file",e1);    throw e1;  } finally {    try {      s.close();    } catch (    java.io.IOException e2) {      log.error("Exception closing file",e2);    }  }}  }
class C{  public synchronized void put(Object key,Object value){  if (key == null) {    String message=Logging.getMessage("nullValue.KeyIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.entries.put(key,value);}  }
class C{  public void deleteImageSharings() throws RemoteException {  mRichcallService.tryToDeleteImageSharings();}  }
class C{  default Class<?> validateToClass(){  return Object.class;}  }
class C{  public HornExecution(TransitSectionAction tsa){  _tsa=tsa;}  }
class C{  @ModelAttribute public void addDataToModel(ModelMap model){  SearchData dataForSearchBar=new SearchData();  dataForSearchBar.setSearchMode("natural");  dataForSearchBar.setCurrentPage(1);  dataForSearchBar.setQueryText(null);  dataForSearchBar.setNumberResultsPerPage(10);  model.put("advancedSearchData",dataForSearchBar);}  }
class C{  private void onPrintJobSent(PrintJob printJob){  printJob.start();}  }
class C{  private boolean isOperationMethod(Method method){  Class<?>[] paramTypes=method.getParameterTypes();  return paramTypes.length == 1 && paramTypes[0] == Commit.class;}  }
class C{  public JComponent createComponent(){  return createHorizontalRangeSlider();}  }
class C{  public void testGetInternalSubset() throws Throwable {  Document doc;  DocumentType docType;  DOMImplementation domImpl;  String internal;  String nullNS=null;  doc=(Document)load("staffNS",builder);  domImpl=doc.getImplementation();  docType=domImpl.createDocumentType("l2:root",nullNS,nullNS);  internal=docType.getInternalSubset();  assertNull("internalSubsetNull",internal);}  }
class C{  public static String translateLogicalProcessorConstraint(License license){  String limit;  try {    limit=license.getConstraints().getConstraintValue(ProductConstraintManager.INSTANCE.getLogicalProcessorConstraint());  } catch (  ConstraintNotRestrictedException e) {    limit=I18N.getMessage(I18N.getGUIBundle(),"gui.license.constraint.value.unlimited.label");  }  return I18N.getMessage(I18N.getGUIBundle(),"gui.license.constraint.logical_processor.label",limit);}  }
class C{  public boolean inviteContactToSharePresence(ContactId contact) throws PayloadException, NetworkException {  mXdm.removeContactFromBlockedList(contact);  mXdm.removeContactFromRevokedList(contact);  HttpResponse response=mXdm.addContactToGrantedList(contact);  if ((response != null) && response.isSuccessfullResponse()) {    return true;  }  return false;}  }
class C{  public void customizerClosing(){  m_dataVis.setOffscreenXAxis(m_xAxisBack);  m_dataVis.setOffscreenWidth(m_widthBack);  m_dataVis.setOffscreenHeight(m_heightBack);  m_dataVis.setOffscreenAdditionalOpts(m_optsBack);  m_dataVis.setOffscreenRendererName(m_rendererNameBack);}  }
class C{  @Nullable public V pop(){  return (V)mFreeList.poll();}  }
class C{  public void testParameterParser() throws Exception {  if (!versionMeetsMinimum(5,0)) {    return;  }  CallableStatement cstmt=null;  try {    createTable("t1","(id   char(16) not null default '', data int not null)");    createTable("t2","(s   char(16),  i   int,  d   double)");    createProcedure("foo42","() insert into test.t1 values ('foo', 42);");    this.conn.prepareCall("{CALL foo42()}");    this.conn.prepareCall("{CALL foo42}");    createProcedure("bar","(x char(16), y int, z DECIMAL(10)) insert into test.t1 values (x, y);");    cstmt=this.conn.prepareCall("{CALL bar(?, ?, ?)}");    ParameterMetaData md=cstmt.getParameterMetaData();    assertEquals(3,md.getParameterCount());    assertEquals(Types.CHAR,md.getParameterType(1));    assertEquals(Types.INTEGER,md.getParameterType(2));    assertEquals(Types.DECIMAL,md.getParameterType(3));    createProcedure("p","() label1: WHILE @a=0 DO SET @a=1; END WHILE");    this.conn.prepareCall("{CALL p()}");    createFunction("f","() RETURNS INT NO SQL return 1; ");    cstmt=this.conn.prepareCall("{? = CALL f()}");    md=cstmt.getParameterMetaData();    assertEquals(Types.INTEGER,md.getParameterType(1));  }  finally {    if (cstmt != null) {      cstmt.close();    }  }}  }
class C{  public static boolean canFileBeStoredOnCurrentFilesystem(String fileName){  if (fileName == null) {    return false;  }  String osName=System.getProperty("os.name");  boolean checkColon=osName == null ? true : osName.toLowerCase(Locale.ENGLISH).contains("windows") ? true : false;  if (checkColon && fileName.contains(":")) {    return false;  }  try {    File file=new File(System.getProperty("java.io.tmpdir") + File.separator + fileName);    if (!file.exists()) {      file.createNewFile();      if (file.exists()) {        file.delete();        return true;      } else {        return false;      }    }  } catch (  IOException e) {    return false;  }catch (  SecurityException e) {    return false;  }catch (  Exception e) {    LogService.getRoot().log(Level.WARNING,"Failed to check filename for illegal characters.",e);    return false;  }  return true;}  }
class C{  public void sub(IntegerPolynomial b,int modulus){  sub(b);  mod(modulus);}  }
class C{  public void connect() throws MqttPersistenceException {  MqttToken token=new MqttToken(client.getClientId());  token.setActionCallback(this);  token.setUserContext(this);  persistence.open(client.getClientId(),client.getServerURI());  if (options.isCleanSession()) {    persistence.clear();  }  if (options.getMqttVersion() == MqttConnectOptions.MQTT_VERSION_DEFAULT) {    options.setMqttVersion(MqttConnectOptions.MQTT_VERSION_3_1_1);  }  try {    comms.connect(options,token);  } catch (  MqttException e) {    onFailure(token,e);  }}  }
class C{  public double doOperation() throws OperatorFailedException {  NodeRef node0=tree.getInternalNode(MathUtils.nextInt(tree.getInternalNodeCount()));  NodeRef node1=tree.getChild(node0,0);  NodeRef node2=tree.getChild(node0,1);  if (swapRates) {    if (swapAtRoot) {      double[] rates=new double[]{tree.getNodeRate(node0),tree.getNodeRate(node1),tree.getNodeRate(node2)};      int r1=MathUtils.nextInt(3);      tree.setNodeRate(node0,rates[r1]);      rates[r1]=rates[2];      int r2=MathUtils.nextInt(2);      tree.setNodeRate(node1,rates[r2]);      rates[r2]=rates[1];      tree.setNodeRate(node2,rates[0]);    } else {      double tmp=tree.getNodeRate(node1);      tree.setNodeRate(node1,tree.getNodeRate(node2));      tree.setNodeRate(node2,tmp);    }  }  if (swapTraits) {    if (swapAtRoot) {      double[] traits=new double[]{tree.getNodeTrait(node0,TRAIT),tree.getNodeTrait(node1,TRAIT),tree.getNodeTrait(node2,TRAIT)};      int r1=MathUtils.nextInt(3);      tree.setNodeTrait(node0,TRAIT,traits[r1]);      traits[r1]=traits[2];      int r2=MathUtils.nextInt(2);      tree.setNodeTrait(node1,TRAIT,traits[r2]);      traits[r2]=traits[1];      tree.setNodeTrait(node2,TRAIT,traits[0]);    } else {      double tmp=tree.getNodeTrait(node1,TRAIT);      tree.setNodeTrait(node1,TRAIT,tree.getNodeTrait(node2,TRAIT));      tree.setNodeTrait(node2,TRAIT,tmp);    }  }  if (!tree.isRoot(node0) && moveHeight) {    double lower=tree.getNodeHeightLower(node0);    double upper=tree.getNodeHeightUpper(node0);    double newValue=(MathUtils.nextDouble() * (upper - lower)) + lower;    tree.setNodeHeight(node0,newValue);  }  return 0.0;}  }
class C{  public Coord4D difference(Coord4D other){  return new Coord4D(xCoord - other.xCoord,yCoord - other.yCoord,zCoord - other.zCoord,dimensionId);}  }
class C{  public byte[] calculateChecksum(byte[] baseKey,int usage,byte[] input,int start,int len) throws GeneralSecurityException {  if (!KeyUsage.isValid(usage)) {    throw new GeneralSecurityException("Invalid key usage number: " + usage);  }  byte[] constant=new byte[5];  constant[0]=(byte)((usage >> 24) & 0xff);  constant[1]=(byte)((usage >> 16) & 0xff);  constant[2]=(byte)((usage >> 8) & 0xff);  constant[3]=(byte)(usage & 0xff);  constant[4]=(byte)0x99;  byte[] Kc=dk(baseKey,constant);  if (debug) {    System.err.println("usage: " + usage);    traceOutput("input",input,start,Math.min(len,32));    traceOutput("constant",constant,0,constant.length);    traceOutput("baseKey",baseKey,0,baseKey.length);    traceOutput("Kc",Kc,0,Kc.length);  }  try {    byte[] hmac=getHmac(Kc,input);    if (debug) {      traceOutput("hmac",hmac,0,hmac.length);    }    if (hmac.length == getChecksumLength()) {      return hmac;    } else     if (hmac.length > getChecksumLength()) {      byte[] buf=new byte[getChecksumLength()];      System.arraycopy(hmac,0,buf,0,buf.length);      return buf;    } else {      throw new GeneralSecurityException("checksum size too short: " + hmac.length + "; expecting : "+ getChecksumLength());    }  }  finally {    Arrays.fill(Kc,0,Kc.length,(byte)0);  }}  }
class C{  public boolean isCurrentNumber(){  if (!isValidIndex())   return false;  return lcText[pos] >= '0' && lcText[pos] <= '9';}  }
class C{  public void push(final long value){  if (value == 0L || value == 1L) {    mv.visitInsn(Opcodes.LCONST_0 + (int)value);  } else {    mv.visitLdcInsn(new Long(value));  }}  }
class C{  public static double min(double[] array){  if (array == null) {    throw new IllegalArgumentException("The Array must not be null");  } else   if (array.length == 0) {    throw new IllegalArgumentException("Array cannot be empty.");  }  double min=array[0];  for (int i=1; i < array.length; i++) {    if (Double.isNaN(array[i])) {      return Double.NaN;    }    if (array[i] < min) {      min=array[i];    }  }  return min;}  }
class C{  public AttributeInfo copy(ConstPool newCp,Map classnames){  Copier copier=new Copier(info,constPool,newCp,classnames);  try {    copier.parameters();    return new ParameterAnnotationsAttribute(newCp,getName(),copier.close());  } catch (  Exception e) {    throw new RuntimeException(e.toString());  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof OHLC)) {    return false;  }  OHLC that=(OHLC)obj;  if (this.open != that.open) {    return false;  }  if (this.close != that.close) {    return false;  }  if (this.high != that.high) {    return false;  }  if (this.low != that.low) {    return false;  }  return true;}  }
class C{  public static String decodeJavaOpts(String encodedJavaOpts){  String javaOptsBase64=encodedJavaOpts.replaceAll("^\"+","").replaceAll("\\s+$","").replace("&equals;","=");  return new String(DatatypeConverter.parseBase64Binary(javaOptsBase64),Charset.forName("UTF-8"));}  }
class C{  public synchronized void unset(){  try {    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();    this.unset(contextClassLoader);  } catch (  SecurityException e) {  }}  }
class C{  public AcquireTokenByGssInitiateRequestBuilder(TokenSpec tokenSpec,byte[] initialLeg,boolean hokConfirmation,JAXBContext jaxbContext,int requestValidityInSeconds){  super(tokenSpec,hokConfirmation,jaxbContext,requestValidityInSeconds);  assert initialLeg != null;  this.leg=initialLeg;  this.contextId=Util.randomNCNameUUID();}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 42) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  private void placeVolumeToMaskWithLeastNumberOfVolumes(URI volumeURI,Map<URI,ExportMask> placedMasks){  log.info("These exportMasks are pointing to the same cluster: {}",placedMasks.keySet());  int leastNumberOfVolumes=Integer.MAX_VALUE;  Set<URI> exportMaskWithMoreVolumes=new HashSet<>();  ExportMask currMaskWithLeastVolumes=null;  for (  ExportMask mask : placedMasks.values()) {    int totalVolumeCount=mask.returnTotalVolumeCount();    if (totalVolumeCount < leastNumberOfVolumes) {      if (currMaskWithLeastVolumes != null) {        exportMaskWithMoreVolumes.add(currMaskWithLeastVolumes.getId());      }      leastNumberOfVolumes=totalVolumeCount;      currMaskWithLeastVolumes=mask;    } else {      exportMaskWithMoreVolumes.add(mask.getId());    }  }  if (currMaskWithLeastVolumes != null) {    log.info(String.format("ExportMask %s was selected for volume %s, as it has %d total volumes",currMaskWithLeastVolumes.getId(),volumeURI,currMaskWithLeastVolumes.returnTotalVolumeCount()));  }  log.info("Determined that this volume {} can be unplaced from these ExportMasks: {}",volumeURI,exportMaskWithMoreVolumes);  log.info("placeVolumeToMaskWithLeastNumberOfVolumes - PlacementDescriptor before:\n{}",placementDescriptor.toString());  for (  URI exportMaskURI : exportMaskWithMoreVolumes) {    placementDescriptor.unplaceVolumeFromMask(volumeURI,exportMaskURI);  }  log.info("placeVolumeToMaskWithLeastNumberOfVolumes - PlacementDescriptor after:\n{}",placementDescriptor.toString());}  }
class C{  public static void check(final boolean b){  check(b,"");}  }
class C{  public boolean isCellEditable(int rowIndex,int columnIndex){  assert 0 <= rowIndex && rowIndex < rows;  assert 0 <= columnIndex && columnIndex < columns;  return false;}  }
class C{  protected void focusNext(View view){  int nextId=view.getNextFocusRightId();  if (nextId == NO_ID) {    return;  }  View nextView=findViewById(nextId);  if (nextView.getVisibility() != View.VISIBLE) {    focusNext(nextView);    return;  }  nextView.requestFocus();  currentFocus=nextView;  buttonFocusChangeListener.onFocusChange(nextView,true);}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public String prefix(){  return prefix;}  }
class C{  private void checkPath(String path){  if (!StringUtils.equals(path,_basePath)) {    String root=_basePath + "/";    if (!StringUtils.startsWith(path,root)) {      _log.debug("path '{}' is not within base path '{}'",path,_basePath);      throw CoordinatorException.fatals.dataManagerPathOutOfBounds(path,_basePath);    } else     if (StringUtils.countMatches(StringUtils.remove(path,root),"/") > 0) {      _log.debug("path '{}' is more than one level deep below base path '{}'",path,_basePath);      throw CoordinatorException.fatals.dataManagerPathOutOfBounds(path,_basePath);    }  }}  }
class C{  public JSONException syntaxError(String message,Throwable causedBy){  return new JSONException(message + this.toString(),causedBy);}  }
class C{  private String readAttributeName(boolean returnLowerCase){  skipWhitespace();  int c=find(ATTRIBUTE_NAME_TERMINATORS);  String forSubstring=returnLowerCase ? inputLowerCase : input;  String result=pos < c ? forSubstring.substring(pos,c) : null;  pos=c;  return result;}  }
class C{  public char readChar() throws EOFException, FormatException {  try {    int retv=read();    if (retv == -1) {      throw new EOFException("Error in ReadChar, EOF reached");    }    return (char)retv;  } catch (  IOException i) {    throw new FormatException("IOException in ReadChar: " + i.getMessage());  }}  }
class C{  public void checkStateErrors(MediaRecorderStateErrors stateErrors){  assertTrue(!stateErrors.errorInInitializedState);  assertTrue(stateErrors.errorInInitialState);  assertTrue(stateErrors.errorInInitialStateAfterReset);  assertTrue(stateErrors.errorInInitialStateAfterStop);  assertTrue(stateErrors.errorInPreparedState);  assertTrue(stateErrors.errorInRecordingState);  assertTrue(stateErrors.errorInErrorState);  assertTrue(stateErrors.errorInDataSourceConfiguredState);}  }
class C{  public BurlapInput(InputStream is){  init(is);}  }
class C{  @Override protected Instances determineOutputFormat(Instances inputFormat) throws Exception {  Instances result;  Attribute att;  Attribute attSorted;  ArrayList<Attribute> atts;  ArrayList<String> values;  Vector<String> sorted;  int i;  int n;  m_AttributeIndices.setUpper(inputFormat.numAttributes() - 1);  atts=new ArrayList<Attribute>();  m_NewOrder=new int[inputFormat.numAttributes()][];  for (i=0; i < inputFormat.numAttributes(); i++) {    att=inputFormat.attribute(i);    if (!att.isNominal() || !m_AttributeIndices.isInRange(i)) {      m_NewOrder[i]=new int[0];      atts.add((Attribute)inputFormat.attribute(i).copy());      continue;    }    sorted=new Vector<String>();    for (n=0; n < att.numValues(); n++) {      sorted.add(att.value(n));    }    Collections.sort(sorted,m_Comparator);    m_NewOrder[i]=new int[att.numValues()];    values=new ArrayList<String>();    for (n=0; n < att.numValues(); n++) {      m_NewOrder[i][n]=sorted.indexOf(att.value(n));      values.add(sorted.get(n));    }    attSorted=new Attribute(att.name(),values);    attSorted.setWeight(att.weight());    atts.add(attSorted);  }  result=new Instances(inputFormat.relationName(),atts,0);  result.setClassIndex(inputFormat.classIndex());  return result;}  }
class C{  public static int execCommand(String[] commands,boolean isRoot){  int result=-1;  if (commands == null || commands.length == 0) {    return result;  }  Process process=null;  BufferedReader succBR=null;  BufferedReader errorBR=null;  DataOutputStream dos=null;  try {    process=Runtime.getRuntime().exec(isRoot ? COMMAND_SU : COMMAND_SH);    dos=new DataOutputStream(process.getOutputStream());    for (    String command : commands) {      if (command == null) {        continue;      }      dos.write(command.getBytes());      dos.writeBytes(COMMAND_LINE_END);      dos.flush();    }    dos.writeBytes(COMMAND_EXIT);    dos.flush();    result=process.waitFor();  } catch (  IOException e) {    e.printStackTrace();  }catch (  Exception e) {    e.printStackTrace();  } finally {    IOUtils.close(dos);    IOUtils.close(succBR);    IOUtils.close(errorBR);    if (process != null) {      process.destroy();    }  }  return result;}  }
class C{  public void save(String filename){  g.save(savePath(filename));}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case MappingPackage.INFO_MODEL_ATTRIBUTE_SOURCE__ATTRIBUTE:    setAttribute((ModelAttribute)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public MatteBorder(Insets borderInsets,Color matteColor){  super(borderInsets);  this.color=matteColor;}  }
class C{  public void findAndUndo(Object someObj){  if (someObj == md) {    md=null;  }  if (someObj instanceof MapBean) {    ((MapBean)someObj).removeProjectionListener(this);    setProjection((Projection)null);  }  if (someObj instanceof LayerHandler) {    LayerHandler lh=(LayerHandler)someObj;    lh.removeLayerListener(this);    setLayers((Layer[])null);  }}  }
class C{  public int size(){  return sharedQueue.size();}  }
class C{  public void printShortString(PrintWriter pw){  pw.print('[');  pw.print(left);  pw.print(',');  pw.print(top);  pw.print("][");  pw.print(right);  pw.print(',');  pw.print(bottom);  pw.print(']');}  }
class C{  public LiveRef(int port,RMIClientSocketFactory csf,RMIServerSocketFactory ssf){  this((new ObjID()),port,csf,ssf);}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof MediaSize);}  }
class C{  protected final boolean isTransientEntity(final Object object){  return object instanceof Identifiable && ((Identifiable)object).getId() <= 0L;}  }
class C{  protected AbstractVisionWorldModel(){  super();  setSource(this);}  }
class C{  public static Mapping serializableInstance(){  return new Mapping(SemIm.serializableInstance(),Parameter.serializableInstance(),new TetradMatrix(0,0),1,1);}  }
class C{  @Override public ImmutableMap<String,BlobMetaData> listBlobs() throws IOException {  throw new UnsupportedOperationException("URL repository doesn't support this operation");}  }
class C{  public void pushCurrentTemplateRuleIsNull(boolean b){  m_currentTemplateRuleIsNull.push(b);}  }
class C{  public FolderControl(final Composite parent,final int style,final boolean includeFiles){  this(parent,style,includeFiles,true);}  }
class C{  public RuleNode leftNode(){  return m_left;}  }
class C{  public void create(View view){  InstanceConfig instance=new InstanceConfig();  saveProperties(instance);  EditText text=(EditText)findViewById(R.id.templateText);  instance.template=text.getText().toString().trim();  CheckBox checkbox=(CheckBox)findViewById(R.id.forkingCheckBox);  instance.allowForking=checkbox.isChecked();  HttpAction action=new HttpCreateAction(this,instance);  action.execute();}  }
class C{  public boolean hasNext(){  if (firstIdx < buff.length) {    long[] bucket=buff[firstIdx];    if (bucket != null && secondIdx < bucket.length && bucket[secondIdx] > 0) {      return true;    } else {      for (int i=firstIdx + 1; i < buff.length; i++) {        if (buff[i] != null && buff[i].length > 0 && buff[i][0] > 0) {          return true;        }      }    }  }  return false;}  }
class C{  public ElixirEffect addAttributeModifier(IAttribute attribute,String uuid,double modifier,int operation){  if (this.potionEffect != null) {    this.potionEffect.registerPotionAttributeModifier(attribute,uuid,modifier,operation);  } else {    this.elixirAttributeModifiers.add(new ElixirAttributeModifier(attribute,uuid,modifier,operation));  }  return this;}  }
class C{  public Builder title(String title){  event.title=title;  return this;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.BLOCK;}  }
class C{  public void include(String name,String encoding,boolean parse) throws IOException, TemplateException {  include(getTemplateForInclusion(name,encoding,parse));}  }
class C{  public static Document createXMLValidationList(ValidationResults results,int initRow,Locale locale,String caseSensitive){  List fieldsInfo=createFieldsInfo(results);  Document doc=createDocument(initRow,results,results.getAdditionalFieldName(),"","",fieldsInfo,locale,caseSensitive,0,0);  Element root=doc.getRootElement();  Element nodeList=root.addElement(XML_NODELIST_TEXT);  Object[] scr=null;  Boolean bool=null;  for (Iterator it=results.getResults().iterator(); it.hasNext(); ) {    scr=(Object[])it.next();    addNode(0,(String)scr[1],(String)scr[0],"",Boolean.TRUE,"",Integer.MIN_VALUE,"",nodeList,"");  }  return doc;}  }
class C{  public T caseBindingElement(BindingElement object){  return null;}  }
class C{  private void printStepInstanceState(StepInstance stepInstance,boolean canBeSubmitted,boolean serialGroupCanRun,int unfinishedStepInstances){  if (!Utilities.verboseLog) {    return;  }  StepExecutionState state=stepInstance.getStepInstanceState();  if (stepInstance.getStepInstanceState() == StepExecutionState.STEP_EXECUTION_SUBMITTED) {    Utilities.verboseLog("Job: " + stepInstance.getStepId() + " id: "+ stepInstance.getId()+ " state: "+ state);    return;  }  if (verboseLogLevel >= 10 && unfinishedStepInstances < 50) {    String dependsOn="";    if (stepInstance.getStep(jobs).getId().contains("stepWriteOutput")) {      dependsOn="... all the stepInstances ...";    } else {      List<StepInstance> dependeOnStepInstances=stepInstance.stepInstanceDependsUpon();      for (      StepInstance dependsOnSteInstance : dependeOnStepInstances) {        dependsOn+=getStepInstanceState(dependsOnSteInstance) + " ... ";      }    }    Utilities.verboseLog("-------------------------------\n" + "stepInstance considered:  " + stepInstance.getId() + " Step Name: "+ stepInstance.getStep(jobs).getId()+ " canBeSubmitted : "+ canBeSubmitted+ " why? "+ " dependsOn: "+ dependsOn+ " Executions #: "+ stepInstance.getExecutions().size()+ " serialGroupCanRun: "+ serialGroupCanRun+ " serialgroup: "+ stepInstance.getStep(jobs).getSerialGroup()+ " stepInstance actual: "+ getStepInstanceState(stepInstance));  }  List<StepInstance> serialGroupStepInstances=stepInstanceDAO.getSerialGroupInstances(stepInstance,jobs);  int serialGroupStepInstancesSize=0;  if (serialGroupStepInstances != null) {    serialGroupStepInstancesSize=serialGroupStepInstances.size();  }  Utilities.verboseLog("Steps still running for the serial group: " + stepInstance.getStep(jobs).getSerialGroup() + " ("+ serialGroupStepInstancesSize+ ")");  if (serialGroupStepInstancesSize > 0) {    for (    StepInstance serialGroupStepInstance : serialGroupStepInstances) {      Utilities.verboseLog("Serial group check: " + serialGroupStepInstance.getStepId() + " - "+ serialGroupStepInstance.getId()+ " "+ serialGroupStepInstance.getExecutions());    }  }  Utilities.verboseLog(getDependencyInfo(stepInstance));}  }
class C{  public String dbName(){  return dbName;}  }
class C{  private static boolean copyFile(Path oldFilename,Path newFilename){  if (!oldFilename.toAbsolutePath().toString().equals(newFilename.toAbsolutePath().toString())) {    LOGGER.info("copy file " + oldFilename + " to "+ newFilename);    if (oldFilename.equals(newFilename)) {      return moveFile(oldFilename,newFilename);    }    try {      if (!Files.exists(newFilename.getParent())) {        Files.createDirectory(newFilename.getParent());      }      Utils.copyFileSafe(oldFilename,newFilename,true);      return true;    } catch (    Exception e) {      return false;    }  } else {    return true;  }}  }
class C{  public void callArgVisitors(XPathVisitor visitor){  for (int i=0; i < m_argVec.size(); i++) {    Expression exp=(Expression)m_argVec.elementAt(i);    exp.callVisitors(new ArgExtOwner(exp),visitor);  }}  }
class C{  public void notifyInvalidated(){synchronized (mObservers) {    for (    DataSetObserverExtended observer : mObservers) {      observer.onInvalidated();    }  }}  }
class C{  public ServerContext validateServerConnection(final ServerContext context){  Validator validator=new Validator(context);  return validateServerConnection(context,validator);}  }
class C{  public static <I,A>Parser<I,A> choice(Parser<I,? extends A> p1,Parser<I,? extends A> p2,Parser<I,? extends A> p3,Parser<I,? extends A> p4,Parser<I,? extends A> p5){  return or(p1,or(p2,or(p3,or(p4,p5))));}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildForger(zone);}  }
class C{  public IntHashMap(int initialCapacity,float loadFactor){  super();  if (initialCapacity < 0) {    throw new IllegalArgumentException("Illegal Capacity: " + initialCapacity);  }  if (loadFactor <= 0) {    throw new IllegalArgumentException("Illegal Load: " + loadFactor);  }  if (initialCapacity == 0) {    initialCapacity=1;  }  this.loadFactor=loadFactor;  table=new Entry[initialCapacity];  threshold=(int)(initialCapacity * loadFactor);}  }
class C{  public String toString(){  return image;}  }
class C{  void startForegroundCompat(int id,Notification notification){  if (mStartForeground != null) {    mStartForegroundArgs[0]=Integer.valueOf(id);    mStartForegroundArgs[1]=notification;    invokeMethod(mStartForeground,mStartForegroundArgs);    return;  }  mSetForegroundArgs[0]=Boolean.TRUE;  invokeMethod(mSetForeground,mSetForegroundArgs);  mNM.notify(id,notification);}  }
class C{  public MultiPolygon createMultiPolygon(Polygon[] polygons){  return new MultiPolygon(polygons,this);}  }
class C{  @NoInline @Entrypoint static void raiseIllegalAccessError(){  throw new java.lang.IllegalAccessError();}  }
class C{  public void lookupLoadComplete(){  if (m_lookup == null)   return;  m_lookup.loadComplete();}  }
class C{  public TLongObjectHashMap(int initialCapacity){  super(initialCapacity);  _hashingStrategy=this;}  }
class C{  public FaceletException(Throwable cause){  super(cause);}  }
class C{  protected <T extends SpatialComparable>void peanoSort(List<T> objs,int start,int end,double[] mms,int[] dims,int depth,long[] bits,boolean desc){  final int numdim=(dims != null) ? dims.length : (mms.length >> 1);  final int edim=(dims != null) ? dims[depth] : depth;  final double min=mms[2 * edim], max=mms[2 * edim + 1];  final double tfirst=(min + min + max) / 3.;  final double tsecond=(min + max + max) / 3.;  if (max - tsecond < 1E-10 || tsecond - tfirst < 1E-10 || tfirst - min < 1E-10) {    boolean ok=false;    for (int d=0; d < numdim; d++) {      int d2=((dims != null) ? dims[d] : d) << 1;      if (mms[d2 + 1] - mms[d2] >= 1E-10) {        ok=true;        break;      }    }    if (!ok) {      return;    }  }  final boolean inv=BitsUtil.get(bits,edim) ^ desc;  int fsplit, ssplit;  if (!inv) {    fsplit=pivotizeList1D(objs,start,end,edim,tfirst,false);    ssplit=(fsplit < end - 1) ? pivotizeList1D(objs,fsplit,end,edim,tsecond,false) : fsplit;  } else {    fsplit=pivotizeList1D(objs,start,end,edim,tsecond,true);    ssplit=(fsplit < end - 1) ? pivotizeList1D(objs,fsplit,end,edim,tfirst,true) : fsplit;  }  int nextdim=(depth + 1) % numdim;  if (start < fsplit - 1) {    mms[2 * edim]=!inv ? min : tsecond;    mms[2 * edim + 1]=!inv ? tfirst : max;    peanoSort(objs,start,fsplit,mms,dims,nextdim,bits,desc);  }  if (fsplit < ssplit - 1) {    BitsUtil.flipI(bits,edim);    mms[2 * edim]=tfirst;    mms[2 * edim + 1]=tsecond;    peanoSort(objs,fsplit,ssplit,mms,dims,nextdim,bits,!desc);    BitsUtil.flipI(bits,edim);  }  if (ssplit < end - 1) {    mms[2 * edim]=!inv ? tsecond : min;    mms[2 * edim + 1]=!inv ? max : tfirst;    peanoSort(objs,ssplit,end,mms,dims,nextdim,bits,desc);  }  mms[2 * edim]=min;  mms[2 * edim + 1]=max;}  }
class C{  private static byte[] readClass(final InputStream is,boolean close) throws IOException {  if (is == null) {    throw new IOException("Class not found");  }  try {    byte[] b=new byte[is.available()];    int len=0;    while (true) {      int n=is.read(b,len,b.length - len);      if (n == -1) {        if (len < b.length) {          byte[] c=new byte[len];          System.arraycopy(b,0,c,0,len);          b=c;        }        return b;      }      len+=n;      if (len == b.length) {        int last=is.read();        if (last < 0) {          return b;        }        byte[] c=new byte[b.length + 1000];        System.arraycopy(b,0,c,0,len);        c[len++]=(byte)last;        b=c;      }    }  }  finally {    if (close) {      is.close();    }  }}  }
class C{  public Source<Double> fromNegativeInfinityToNegativeZero(){  return Compositions.weightWithValues(Doubles.fromNegativeInfinityToNegativeZero(),Double.NEGATIVE_INFINITY,-0d);}  }
class C{  public void removeNode(Node n){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));  this.removeElement(n);}  }
class C{  private static void verifyCodewordCount(int[] codewords,int numECCodewords) throws FormatException {  if (codewords.length < 4) {    throw FormatException.getFormatInstance();  }  int numberOfCodewords=codewords[0];  if (numberOfCodewords > codewords.length) {    throw FormatException.getFormatInstance();  }  if (numberOfCodewords == 0) {    if (numECCodewords < codewords.length) {      codewords[0]=codewords.length - numECCodewords;    } else {      throw FormatException.getFormatInstance();    }  }}  }
class C{  public void test_getBitsFromByteArray_06(){  final byte[] b=new byte[2];  BytesUtil.setBit(b,11,true);  BytesUtil.setBit(b,12,true);  BytesUtil.setBit(b,13,true);  BytesUtil.setBit(b,14,true);  assertEquals(0x00000000,getBits(b,0,11));  assertEquals(0x00000001,getBits(b,0,12));  assertEquals(0x00000003,getBits(b,0,13));  assertEquals(0x00000007,getBits(b,0,14));  assertEquals(0x0000000f,getBits(b,0,15));  assertEquals(0x0000001e,getBits(b,0,16));  try {    getBits(b,0,17);    fail("Expecting: " + IllegalArgumentException.class);  } catch (  IllegalArgumentException ex) {    if (log.isInfoEnabled())     log.info("Ignoring expected exception: " + ex);  }  assertEquals(0x0000001e,getBits(b,1,15));  assertEquals(0x0000001e,getBits(b,2,14));  assertEquals(0x0000001e,getBits(b,3,13));  assertEquals(0x0000001e,getBits(b,4,12));  assertEquals(0x0000001e,getBits(b,5,11));  assertEquals(0x0000001e,getBits(b,6,10));  assertEquals(0x0000001e,getBits(b,7,9));  assertEquals(0x0000001e,getBits(b,8,8));  assertEquals(0x0000001e,getBits(b,9,7));  assertEquals(0x0000001e,getBits(b,10,6));  assertEquals(0x0000001e,getBits(b,11,5));  assertEquals(0x0000000e,getBits(b,12,4));  assertEquals(0x00000006,getBits(b,13,3));  assertEquals(0x00000002,getBits(b,14,2));  assertEquals(0x00000000,getBits(b,15,1));  try {    getBits(b,16,1);    fail("Expecting: " + IllegalArgumentException.class);  } catch (  IllegalArgumentException ex) {    if (log.isInfoEnabled())     log.info("Ignoring expected exception: " + ex);  }}  }
class C{  public static void exitWithFailure(){  exitWithFailure(1);}  }
class C{  private void rebuildNode(){  m_realizer.regenerate();  m_graph.updateViews();}  }
class C{  public void readLbMaps(BufferedReader fin) throws IOException {  if (lbStr2Int != null) {    lbStr2Int.clear();  } else {    lbStr2Int=new HashMap();  }  if (lbInt2Str != null) {    lbInt2Str.clear();  } else {    lbInt2Str=new HashMap();  }  String line;  if ((line=fin.readLine()) == null) {    System.out.println("No label map size information");    return;  }  int numLabels=Integer.parseInt(line);  if (numLabels <= 0) {    System.out.println("Invalid label map size");    return;  }  System.out.println("Reading label maps ...");  for (int i=0; i < numLabels; i++) {    line=fin.readLine();    if (line == null) {      System.out.println("Invalid label map line");      return;    }    StringTokenizer strTok=new StringTokenizer(line," \t\r\n");    if (strTok.countTokens() != 2) {      continue;    }    String lbStr=strTok.nextToken();    String lbInt=strTok.nextToken();    lbStr2Int.put(lbStr,new Integer(lbInt));    lbInt2Str.put(new Integer(lbInt),lbStr);  }  System.out.println("Reading label maps (" + Integer.toString(lbStr2Int.size()) + " entries) completed!");  line=fin.readLine();}  }
class C{  public static void main(String[] args){  String deviceCfg=args[0];  DirectProvider tp=new DirectProvider();  DirectTopology topology=tp.newTopology("IotpSensors");  IotDevice device=new IotpDevice(topology,new File(deviceCfg));  simulatedSensors(device,true);  heartBeat(device,true);  displayMessages(device,true);  tp.submit(topology);}  }
class C{  @Override public void initialize(Map<String,Object> properties){  if (properties.containsKey("traversal-limit")) {    TRAVERSAL_LIMIT=Integer.parseInt((String)properties.get("traversal-limit"));    log("Init property:",Level.FINE,"traversal-limit",TRAVERSAL_LIMIT);  }}  }
class C{  public void mouseReleased(MouseEvent e){}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.TYPE_DEFINING_ELEMENT__DEFINED_TYPE:    setDefinedType((Type)null);  return;}super.eUnset(featureID);}  }
class C{  private void adjustSizeForAbsolute(boolean isHor){  int[] curSizes=isHor ? width : height;  Cell absCell=grid.get(null);  if (absCell == null || absCell.compWraps.size() == 0) {    return;  }  ArrayList<CompWrap> cws=absCell.compWraps;  int maxEnd=0;  for (int j=0, cwSz=absCell.compWraps.size(); j < cwSz + 3; j++) {    boolean doAgain=false;    for (int i=0; i < cwSz; i++) {      CompWrap cw=cws.get(i);      int[] stSz=getAbsoluteDimBounds(cw,0,isHor);      int end=stSz[0] + stSz[1];      if (maxEnd < end) {        maxEnd=end;      }      if (linkTargetIDs != null) {        doAgain|=setLinkedBounds(cw.comp,cw.cc,stSz[0],stSz[0],stSz[1],stSz[1],false);      }    }    if (doAgain == false) {      break;    }    maxEnd=0;    clearGroupLinkBounds();  }  maxEnd+=LayoutUtil.getInsets(lc,isHor ? 3 : 2,!hasDocks()).getPixels(0,container,null);  if (curSizes[LayoutUtil.MIN] < maxEnd) {    curSizes[LayoutUtil.MIN]=maxEnd;  }  if (curSizes[LayoutUtil.PREF] < maxEnd) {    curSizes[LayoutUtil.PREF]=maxEnd;  }}  }
class C{  public ServiceCompatibilityException(Reason reason){  super(reason.toString());  setMessageKey(getMessageKey() + "." + reason.toString());  bean.setReason(reason);}  }
class C{  public boolean hasData(final long address,final int length){  Preconditions.checkArgument(address >= 0,"Error: Address can't be less than 0");  Preconditions.checkArgument(length > 0,"Error: Length must be positive");  try {    m_readLock.lock();    MemoryChunk nextChunk=findChunk(address);    int nextLength=length;    long nextAddress=address;    do {      if (nextChunk == null) {        return false;      } else       if (((nextChunk.getAddress() + nextChunk.getLength()) - nextAddress) >= nextLength) {        return true;      } else {        nextLength-=(nextChunk.getAddress() + nextChunk.getLength()) - nextAddress;        nextAddress=nextChunk.getAddress() + nextChunk.getLength();        nextChunk=findChunk(nextAddress);      }    } while (true);  }  finally {    m_readLock.unlock();  }}  }
class C{  private synchronized void closeAllConnections(){  for (  MySQLConnection c : this.liveConnections.values()) {    try {      c.close();    } catch (    SQLException e) {    }  }  if (!this.isClosed) {    this.balancer.destroy();    if (this.connectionGroup != null) {      this.connectionGroup.closeConnectionProxy(this);    }  }  this.liveConnections.clear();  this.connectionsToHostsMap.clear();}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public static void importTypes(final CConnection connection,final int rawModuleId,final int moduleId) throws SQLException {  final String query="INSERT INTO " + CTableNames.TYPE_MEMBERS_TABLE + " SELECT "+ moduleId+ ", id, name, base_type, parent_id, position, argument, number_of_elements"+ " FROM "+ String.format(CTableNames.RAW_TYPES,rawModuleId);  connection.executeUpdate(query,true);  final String updateSequence=String.format("SELECT setval('bn_types_id_seq', " + "COALESCE((SELECT MAX(id) + 1 FROM %s), 1), false) from %s",CTableNames.TYPE_MEMBERS_TABLE,CTableNames.TYPE_MEMBERS_TABLE);  connection.executeQuery(updateSequence,true);}  }
class C{  public void populateAnnotatedStrings(){  for (  Example example : this.examples) {    example.populateAnnotatedStrings();  }}  }
class C{  protected void registerKnownJdkImmutableClasses(){  registerImmutable(String.class);  registerImmutable(Integer.class);  registerImmutable(Long.class);  registerImmutable(Boolean.class);  registerImmutable(Class.class);  registerImmutable(Float.class);  registerImmutable(Double.class);  registerImmutable(Character.class);  registerImmutable(Byte.class);  registerImmutable(Short.class);  registerImmutable(Void.class);  registerImmutable(BigDecimal.class);  registerImmutable(BigInteger.class);  registerImmutable(URI.class);  registerImmutable(URL.class);  registerImmutable(UUID.class);  registerImmutable(Pattern.class);}  }
class C{  public Date(long date){  fastTime=date;}  }
class C{  public static boolean canVisualize(Relation<?> rel,AbstractMTree<?,?,?,?> tree){  if (!TypeUtil.NUMBER_VECTOR_FIELD.isAssignableFromType(rel.getDataTypeInformation())) {    return false;  }  return getLPNormP(tree) > 0;}  }
class C{  public void putStopTime(Integer stopSequencePosition,StopTime stopTime){  stopTimes.put(stopSequencePosition,stopTime);}  }
class C{  public LinkedList<Patch> patch_make(String text1,String text2){  if (text1 == null || text2 == null) {    throw new IllegalArgumentException("Null inputs. (patch_make)");  }  LinkedList<Diff> diffs=diff_main(text1,text2,true);  if (diffs.size() > 2) {    diff_cleanupSemantic(diffs);    diff_cleanupEfficiency(diffs);  }  return patch_make(text1,diffs);}  }
class C{  protected void volumeChange(ChangeEvent e){  JSlider v=(JSlider)e.getSource();  log.debug("Volume slider moved. value = " + v.getValue());  firePropertyChange(PropertyChangeID.VOLUME_CHANGE,v.getValue(),v.getValue());}  }
class C{  protected Instance mergeInstances(Instance source,Instance dest){  Instances outputFormat=outputFormatPeek();  double[] vals=new double[outputFormat.numAttributes()];  for (int i=0; i < vals.length; i++) {    if ((i != outputFormat.classIndex()) && (m_SelectedCols.isInRange(i))) {      if ((source != null) && !source.isMissing(i) && !dest.isMissing(i)) {        vals[i]=dest.value(i) - source.value(i);      } else {        vals[i]=Utils.missingValue();      }    } else {      vals[i]=dest.value(i);    }  }  Instance inst=null;  if (dest instanceof SparseInstance) {    inst=new SparseInstance(dest.weight(),vals);  } else {    inst=new DenseInstance(dest.weight(),vals);  }  inst.setDataset(dest.dataset());  return inst;}  }
class C{  public boolean sameReturnType(MemberDefinition method){  if (!isMethod() || !method.isMethod()) {    throw new CompilerError("sameReturnType: not method");  }  Type myReturnType=getType().getReturnType();  Type yourReturnType=method.getType().getReturnType();  return (myReturnType == yourReturnType);}  }
class C{  protected void sequence_AnnotatedExportableElement_ClassExtendsClause_ClassImplementsList_Members_N4ClassDeclaration_TypeVariables(ISerializationContext context,N4ClassDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public UncheckedExecutionException(@Nullable Throwable cause){  super(cause);}  }
class C{  public DefaultRetryPolicy(int initialTimeoutMs,int maxNumRetries,float backoffMultiplier){  mCurrentTimeoutMs=initialTimeoutMs;  mMaxNumRetries=maxNumRetries;  mBackoffMultiplier=backoffMultiplier;}  }
class C{  public ExtendedKeyUsageExtension(Vector<ObjectIdentifier> keyUsages) throws IOException {  this(Boolean.FALSE,keyUsages);}  }
class C{  public void testBadDynamicUpdate() throws Exception {  pm.loadProperties();  try {    TungstenProperties dynaProps=new TungstenProperties();    dynaProps.setString(ReplicatorConf.APPLIER,"bad value!");    pm.setDynamicProperties(dynaProps);    fail("Able to update non-dynamic property: " + ReplicatorConf.APPLIER);  } catch (  ReplicatorException e) {  }  try {    TungstenProperties dynaProps=new TungstenProperties();    dynaProps.setString("foo","non-existent property");    pm.setDynamicProperties(dynaProps);    fail("Able to update non-dynamic property: foo");  } catch (  ReplicatorException e) {  }}  }
class C{  public OSXApplication(){}  }
class C{  public INode contains(INode n){  for (int i=0; i < stack.size(); i++) {    if (stack.elementAt(i).equals(n)) {      return stack.elementAt(i);    }  }  return null;}  }
class C{  public static double cuCimag(cuDoubleComplex x){  return x.y;}  }
class C{  public static LongStream dropWhile(LongStream stream,LongPredicate predicate){  Objects.requireNonNull(stream);  Objects.requireNonNull(predicate);  return StreamSupport.longStream(new WhileOps.UnorderedWhileSpliterator.OfLong.Dropping(stream.spliterator(),true,predicate),stream.isParallel()).onClose(null);}  }
class C{  private static void removeLiveReference(Object value){synchronized (sLiveObjects) {    Integer count=sLiveObjects.get(value);    if (count == null) {      FLog.wtf("SharedReference","No entry in sLiveObjects for value of type %s",value.getClass());    } else     if (count == 1) {      sLiveObjects.remove(value);    } else {      sLiveObjects.put(value,count - 1);    }  }}  }
class C{  private void onMouseDown(){  panel.setStyleName(toolbarResources.toolbar().popupButtonPanelDown());}  }
class C{  private static String makeDateName(final Date date){  final long millis=date.getTime();  final long mask=(long)1E4;  final int lodate=(int)(millis % mask);  final int hidate=(int)(millis / mask);  final String newname=Integer.toHexString(lodate) + Integer.toHexString(hidate);  return newname;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:54:55.686 -0400",hash_original_method="9641FF451616EC3082A54513AAA1A1A4",hash_generated_method="CF9ED3CF8BF1BA7AC9C1394B6CB12D83") public DrmInfo(int infoType,byte[] data,String mimeType){  mInfoType=infoType;  mMimeType=mimeType;  mData=data;}  }
class C{  public AttributeServiceImpl(final GenericDAO<Attribute,Long> attributeDao,final AttributeGroupService attributeGroupService){  super(attributeDao);  this.attributeDao=attributeDao;  this.attributeGroupService=attributeGroupService;}  }
class C{  public void testBug33734() throws Exception {  Connection testConn=getConnectionWithProps("cachePrepStmts=true,useServerPrepStmts=false");  try {    testConn.prepareStatement("SELECT 1");  }  finally {    testConn.close();  }}  }
class C{  public void startExecutionEveryDayAt(CustomTimerTask task,int targetHour,int targetMin,int targetSec){  BotLogger.warn(LOGTAG,"Posting new task" + task.getTaskName());  final Runnable taskWrapper=null;  if (task.getTimes() != 0) {    final long delay=computNextDilay(targetHour,targetMin,targetSec);    executorService.schedule(taskWrapper,delay,TimeUnit.SECONDS);  }}  }
class C{  public synchronized void clear(){  if (mMap.isEmpty())   return;  for (  Pair<Integer,Subscription> pair : mMap.values()) {    if (!pair.second.isUnsubscribed())     pair.second.unsubscribe();  }}  }
class C{  public void drag(long time,float x,float y,float amountX,float amountY){  float scrollDrag, discardDrag;  if (mCurrentMode == Orientation.PORTRAIT) {    discardDrag=amountX;    scrollDrag=amountY;  } else {    discardDrag=amountY;    scrollDrag=LocalizationUtils.isLayoutRtl() ? -amountX : amountX;  }  DragLock hintLock=computeDragLock(scrollDrag,discardDrag);  if (hintLock == DragLock.DISCARD) {    discard(x,y,amountX,amountY);  } else {    if (mDragLock == DragLock.SCROLL && mDiscardingTab != null) {      commitDiscard(time,false);    }    scroll(x,y,LocalizationUtils.isLayoutRtl() ? -amountX : amountX,amountY,false);  }  requestUpdate();}  }
class C{  protected int compare(Object a,Object b,boolean ascending){  String s1;  String s2;  if (a instanceof String) {    s1=(String)a;    s2=(String)b;  } else {    s1=(String)((Map)a).get("name");    s2=(String)((Map)b).get("name");  }  s1=s1.toUpperCase();  s2=s2.toUpperCase();  if (ascending) {    return s1.compareTo(s2);  } else {    return -s1.compareTo(s2);  }}  }
class C{  protected void firePropertyChange(String propertyName,Object oldValue,Object newValue){  if (changeSupport != null) {    changeSupport.firePropertyChange(propertyName,oldValue,newValue);  }}  }
class C{  public Filter createFilter(BridgeContext ctx,Element filterElement,Element filteredElement,GraphicsNode filteredNode,Filter inputFilter,Rectangle2D filterRegion,Map filterMap){  Filter in=getIn(filterElement,filteredElement,filteredNode,inputFilter,filterMap,ctx);  if (in == null) {    return null;  }  Rectangle2D defaultRegion=in.getBounds2D();  Rectangle2D primitiveRegion=SVGUtilities.convertFilterPrimitiveRegion(filterElement,filteredElement,filteredNode,defaultRegion,filterRegion,ctx);  float dx=convertNumber(filterElement,SVG_DX_ATTRIBUTE,0,ctx);  float dy=convertNumber(filterElement,SVG_DY_ATTRIBUTE,0,ctx);  AffineTransform at=AffineTransform.getTranslateInstance(dx,dy);  PadRable pad=new PadRable8Bit(in,primitiveRegion,PadMode.ZERO_PAD);  Filter filter=new AffineRable8Bit(pad,at);  filter=new PadRable8Bit(filter,primitiveRegion,PadMode.ZERO_PAD);  handleColorInterpolationFilters(filter,filterElement);  updateFilterMap(filterElement,filter,filterMap);  return filter;}  }
class C{  public boolean isCharacterElementContentWhitespace(int nodeHandle){  return false;}  }
class C{  public SVGMaskElementBridge(){}  }
class C{  public void send(String message){  try {    writer.write(message + "\n");    writer.flush();  } catch (  IOException e) {    throw new RuntimeException("Error writing " + message,e);  }}  }
class C{  public Permutation(int n){  if (n <= 0) {    throw new IllegalArgumentException("invalid length");  }  perm=new int[n];  for (int i=n - 1; i >= 0; i--) {    perm[i]=i;  }}  }
class C{  public boolean registerRequest(HGPeerIdentity peerId,Timestamp last_version,Timestamp current_version){  Peer peer=getPeer(peerId);  if (peer.getLastFrom().compareTo(last_version) != 0 && false) {    try {      System.out.println("Log: expecting " + last_version + " and found "+ peer.getLastFrom()+ ". Waiting...");      getPeerQueue(peerId,true).put(last_version,current_version);synchronized (current_version) {        current_version.wait();      }    } catch (    InterruptedException e) {      e.printStackTrace();    }    return true;  }  return true;}  }
class C{  private Iterator iterator(){  List list=list();  if (list != null) {    return (list.iterator());  } else {    return (null);  }}  }
class C{  public URI(final String s,final boolean escaped) throws URIException, NullPointerException {  parseUriReference(s,escaped);}  }
class C{  public UnscheduleTimeEvent createUnscheduleTimeEvent(){  UnscheduleTimeEventImpl unscheduleTimeEvent=new UnscheduleTimeEventImpl();  return unscheduleTimeEvent;}  }
class C{  public static long calculateDays(Date mDate1,Date mDate2){  return Math.abs((mDate1.getTime() - mDate2.getTime()) / (24 * 60 * 60* 1000) + 1);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:05.457 -0500",hash_original_method="5D7214C35F0B8EFCD4776395D10A0F27",hash_generated_method="29ACC9DE2D8A4C1B8CFCE6AA59A2D59D") public PasswordAuthentication(String userName,char[] password){  this.userName=userName;  this.password=password.clone();}  }
class C{  @Override public <R,A>CompletableFuture<R> collect(final Collector<? super T,A,R> collector){  return CompletableFuture.supplyAsync(null);}  }
class C{  protected static final List<CView> processQueryResults(final ResultSet resultSet,final INaviProject project,final Map<Integer,Set<CTag>> tags,final ITagManager nodeTagManager,final SQLProvider provider,final List<CView> views,final ViewType viewType,final GraphType graphType) throws SQLException {  final Map<Integer,Set<CTag>> nodeTagMap=getNodeTags(provider.getConnection(),project,nodeTagManager);  try {    while (resultSet.next()) {      final int viewId=resultSet.getInt("view_id");      final String name=PostgreSQLHelpers.readString(resultSet,"name");      final String description=PostgreSQLHelpers.readString(resultSet,"description");      final Timestamp creationDate=resultSet.getTimestamp("creation_date");      final Timestamp modificationDate=resultSet.getTimestamp("modification_date");      final boolean starState=resultSet.getBoolean("stared");      final int nodeCount=resultSet.getInt("bbcount");      final int edgeCount=resultSet.getInt("edgecount");      final Set<CTag> viewTags=tags.containsKey(viewId) ? tags.get(viewId) : new HashSet<CTag>();      final Set<CTag> nodeTags=nodeTagMap.containsKey(viewId) ? nodeTagMap.get(viewId) : new HashSet<CTag>();      final CProjectViewGenerator generator=new CProjectViewGenerator(provider,project);      views.add(generator.generate(viewId,name,description,viewType,graphType,creationDate,modificationDate,nodeCount,edgeCount,viewTags,nodeTags,starState));    }    return views;  }  finally {    resultSet.close();  }}  }
class C{  @Override public void close(){  close(null);}  }
class C{  @Override public void expandToInclude(final Envelope other){  if (other.isNull()) {    return;  }  final double otherMinZ=getMinZOf(other);  final double otherMaxZ=getMaxZOf(other);  if (isNull()) {    super.expandToInclude(other);    minz=otherMinZ;    maxz=otherMaxZ;  } else {    super.expandToInclude(other);    if (otherMinZ < minz) {      minz=otherMinZ;    }    if (otherMaxZ > maxz) {      maxz=otherMaxZ;    }  }}  }
class C{  @Deprecated public AssumptionViolatedException(String assumption){  this(assumption,false,null,null);}  }
class C{  public void formListDownloadingComplete(HashMap<String,FormDetails> result){  dismissDialog(PROGRESS_DIALOG);  mDownloadFormListTask.setDownloaderListener(null);  mDownloadFormListTask=null;  if (result == null) {    Log.e(t,"Formlist Downloading returned null.  That shouldn't happen");    createAlertDialog(getString(R.string.load_remote_form_error),getString(R.string.error_occured),EXIT);    return;  }  if (result.containsKey(DownloadFormListTask.DL_AUTH_REQUIRED)) {    showDialog(AUTH_DIALOG);  } else   if (result.containsKey(DownloadFormListTask.DL_ERROR_MSG)) {    String dialogMessage=getString(R.string.list_failed_with_error,result.get(DownloadFormListTask.DL_ERROR_MSG).errorStr);    String dialogTitle=getString(R.string.load_remote_form_error);    createAlertDialog(dialogTitle,dialogMessage,DO_NOT_EXIT);  } else {    mFormNamesAndURLs=result;    mFormList.clear();    ArrayList<String> ids=new ArrayList<String>(mFormNamesAndURLs.keySet());    for (int i=0; i < result.size(); i++) {      String formDetailsKey=ids.get(i);      FormDetails details=mFormNamesAndURLs.get(formDetailsKey);      HashMap<String,String> item=new HashMap<String,String>();      item.put(FORMNAME,details.formName);      item.put(FORMID_DISPLAY,((details.formVersion == null) ? "" : (getString(R.string.version) + " " + details.formVersion+ " ")) + "ID: " + details.formID);      item.put(FORMDETAIL_KEY,formDetailsKey);      item.put(FORM_ID_KEY,details.formID);      item.put(FORM_VERSION_KEY,details.formVersion);      if (mFormList.size() == 0) {        mFormList.add(item);      } else {        int j;        for (j=0; j < mFormList.size(); j++) {          HashMap<String,String> compareMe=mFormList.get(j);          String name=compareMe.get(FORMNAME);          if (name.compareTo(mFormNamesAndURLs.get(ids.get(i)).formName) > 0) {            break;          }        }        mFormList.add(j,item);      }    }    selectSupersededForms();    mFormListAdapter.notifyDataSetChanged();    mDownloadButton.setEnabled(!(selectedItemCount() == 0));  }}  }
class C{  public static String atomMarshall(Object entityDto) throws ODataException, UnsupportedEncodingException {  return atomMarshall(entityDto,getDefaultTestUri());}  }
class C{  void debugCode(String java){  if (isEnabled(TraceSystem.DEBUG)) {    traceWriter.write(TraceSystem.DEBUG,module,lineSeparator + "/**/" + java,null);  }}  }
class C{  public void update(byte[] in,int off,int len){  while (len > 0 && messageLength < mBuf.length) {    this.update(in[off]);    off++;    len--;  }  digest.update(in,off,len);  messageLength+=len;}  }
class C{  private String createNonCGSrdfPairStepsOnEmptyGroup(List<VolumeDescriptor> sourceDescriptors,List<VolumeDescriptor> targetDescriptors,RemoteDirectorGroup group,Map<URI,Volume> uriVolumeMap,String waitFor,Workflow workflow){  StorageSystem system=dbClient.queryObject(StorageSystem.class,group.getSourceStorageSystemUri());  URI vpoolChangeUri=getVirtualPoolChangeVolume(sourceDescriptors);  log.info("VPoolChange URI {}",vpoolChangeUri);  List<URI> sourceURIs=VolumeDescriptor.getVolumeURIs(sourceDescriptors);  List<URI> targetURIs=new ArrayList<>();  for (  URI sourceURI : sourceURIs) {    Volume source=uriVolumeMap.get(sourceURI);    StringSet srdfTargets=source.getSrdfTargets();    for (    String targetStr : srdfTargets) {      URI targetURI=URI.create(targetStr);      targetURIs.add(targetURI);    }  }  Method createListMethod=createListReplicasMethod(system.getId(),sourceURIs,targetURIs,vpoolChangeUri,true);  Method rollbackMethod=rollbackSRDFLinksMethod(system.getId(),sourceURIs,targetURIs,false);  String stepId=workflow.createStep(CREATE_SRDF_ACTIVE_VOLUME_PAIR_STEP_GROUP,CREATE_SRDF_ACTIVE_VOLUME_PAIR_STEP_DESC,waitFor,system.getId(),system.getSystemType(),getClass(),createListMethod,rollbackMethod,null);  return stepId;}  }
class C{  public SurfaceObjectTileStateKey(DrawContext dc,SurfaceObjectTile tile){  if (tile != null && tile.hasObjects()) {    this.tileKey=tile.getTileKey();    this.intersectingObjectKeys=new Object[tile.getObjectList().size()];    int index=0;    for (    SurfaceRenderable so : tile.getObjectList()) {      this.intersectingObjectKeys[index++]=so.getStateKey(dc);    }  } else {    this.tileKey=null;    this.intersectingObjectKeys=null;  }}  }
class C{  public static String restoreBSSID(String BSSID){  StringBuilder sb=new StringBuilder();  for (int index=0; index < BSSID.length(); index+=2) {    sb.append(BSSID.substring(index,index + 2));    if (index != BSSID.length() - 2) {      sb.append(":");    }  }  return sb.toString().toLowerCase(Locale.US);}  }
class C{  public boolean equals(TextLayout rhs){  if (rhs == null) {    return false;  }  if (rhs == this) {    return true;  }  ensureCache();  return textLine.equals(rhs.textLine);}  }
class C{  public UserDeletionConstraintException(String message){  super(message);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case GamlPackage.IF__IF_FALSE:    setIfFalse((Expression)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  protected String rebuildUserQuery(List<Clause> clauses,boolean lowercaseOperators){  StringBuilder sb=new StringBuilder();  for (int i=0; i < clauses.size(); i++) {    Clause clause=clauses.get(i);    String s=clause.raw;    if (lowercaseOperators && i > 0 && i + 1 < clauses.size()) {      if ("AND".equalsIgnoreCase(s)) {        s="AND";      } else       if ("OR".equalsIgnoreCase(s)) {        s="OR";      }    }    sb.append(s);    sb.append(' ');  }  return sb.toString();}  }
class C{  private VNXeException(final ServiceCode code,final Throwable cause,final String detailBase,final String detailKey,final Object[] detailParams){  super(false,code,cause,detailBase,detailKey,detailParams);}  }
class C{  public static void main(String[] args) throws SolrServerException, IOException {  service=new RetrieveAndRank();  service.setUsernameAndPassword(USERNAME,PASSWORD);  solrClient=getSolrClient(service.getSolrUrl(SOLR_CLUSTER_ID),USERNAME,PASSWORD);  try {    uploadConfiguration();    createCollection();    indexDocumentAndCommit();    searchAllDocs();  } catch (  final Exception e) {    e.printStackTrace();  } finally {    cleanupResources();  }}  }
class C{  public boolean hasPlayers(){  return !gameData.getPlayers().isEmpty();}  }
class C{  public int rangeToInt(int bitOffset,int numOfBits){  int result=0;  int baseShift=numOfBits - 8 + bitOffset % 8;  int byteIdx=bitOffset / 8;  while (baseShift >= 0) {    result|=vector[byteIdx] << baseShift;    byteIdx++;    baseShift-=8;  }  if (baseShift < 0)   result|=vector[byteIdx] >>> Math.abs(baseShift);  result&=0xFFFFFFFF >>> 32 - numOfBits;  return result;}  }
class C{  public void testIndexWriterSettings() throws Exception {  String algLines[]={"# ----- properties ","content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource","docs.file=" + getReuters20LinesFile(),"content.source.log.step=3","ram.flush.mb=-1","max.buffered=2","compound=cmpnd:true:false","doc.term.vector=vector:false:true","content.source.forever=false","directory=RAMDirectory","doc.stored=false","merge.factor=3","doc.tokenized=false","debug.level=1","# ----- alg ","{ \"Rounds\"","  ResetSystemErase","  CreateIndex","  { \"AddDocs\"  AddDoc > : * ","  NewRound","} : 2"};  Benchmark benchmark=execBenchmark(algLines);  final IndexWriter writer=benchmark.getRunData().getIndexWriter();  assertEquals(2,writer.getConfig().getMaxBufferedDocs());  assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH,(int)writer.getConfig().getRAMBufferSizeMB());  assertEquals(3,((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor());  assertEquals(0.0d,writer.getConfig().getMergePolicy().getNoCFSRatio(),0.0);  writer.close();  Directory dir=benchmark.getRunData().getDirectory();  IndexReader reader=DirectoryReader.open(dir);  Fields tfv=reader.getTermVectors(0);  assertNotNull(tfv);  assertTrue(tfv.size() > 0);  reader.close();}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case ImPackage.SCRIPT_IM__SYMBOL_TABLE:    setSymbolTable((SymbolTable)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public static void checkState(boolean expression,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (!expression) {    throw new IllegalStateException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  public void writeBinary(BinaryRawWriter writer){  writer.writeInt(items.size());  for (  Map.Entry<String,byte[]> e : items.entrySet()) {    writer.writeString(e.getKey());    writer.writeByteArray(e.getValue());  }  writer.writeByteArray(staticObjects);  writer.writeInt(timeout);  writer.writeUuid(lockNodeId);  writer.writeLong(lockId);  writer.writeTimestamp(lockTime);}  }
class C{  @Override protected void onPart(String target,String sender,String login,String hostname){  if (sender.equals(getNick())) {    service.ackNewMentions(server.getId(),target);    server.removeConversation(target);    Intent intent=Broadcast.createConversationIntent(Broadcast.CONVERSATION_REMOVE,server.getId(),target);    service.sendBroadcast(intent);  } else   if (service.getSettings().showJoinPartAndQuit()) {    Message message=new Message(service.getString(R.string.message_part,sender),Message.TYPE_MISC);    message.setColor(Message.COLOR_GREEN);    message.setIcon(R.drawable.part);    server.getConversation(target).addMessage(message);    Intent intent=Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),target);    service.sendBroadcast(intent);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private Object recoverUpdates(Object state) throws IOException {  logBytes=0;  logEntries=0;  if (version == 0)   return state;  String fname=versionName(logfilePrefix);  InputStream in=new BufferedInputStream(new FileInputStream(fname));  DataInputStream dataIn=new DataInputStream(in);  if (Debug)   System.err.println("log.debug: reading updates from " + fname);  try {    majorFormatVersion=dataIn.readInt();    logBytes+=intBytes;    minorFormatVersion=dataIn.readInt();    logBytes+=intBytes;  } catch (  EOFException e) {    openLogFile(true);    in=null;  }  if (majorFormatVersion != PreferredMajorVersion) {    if (Debug) {      System.err.println("log.debug: major version mismatch: " + majorFormatVersion + "."+ minorFormatVersion);    }    throw new IOException("Log file " + logName + " has a "+ "version "+ majorFormatVersion+ "."+ minorFormatVersion+ " format, and this implementation "+ " understands only version "+ PreferredMajorVersion+ "."+ PreferredMinorVersion);  }  try {    while (in != null) {      int updateLen=0;      try {        updateLen=dataIn.readInt();      } catch (      EOFException e) {        if (Debug)         System.err.println("log.debug: log was sync'd cleanly");        break;      }      if (updateLen <= 0) {        if (Debug) {          System.err.println("log.debug: last update incomplete, " + "updateLen = 0x" + Integer.toHexString(updateLen));        }        break;      }      if (in.available() < updateLen) {        if (Debug)         System.err.println("log.debug: log was truncated");        break;      }      if (Debug)       System.err.println("log.debug: rdUpdate size " + updateLen);      try {        state=handler.readUpdate(new LogInputStream(in,updateLen),state);      } catch (      IOException e) {        throw e;      }catch (      Exception e) {        e.printStackTrace();        throw new IOException("read update failed with " + "exception: " + e);      }      logBytes+=(intBytes + updateLen);      logEntries++;    }  }  finally {    if (in != null)     in.close();  }  if (Debug)   System.err.println("log.debug: recovered updates: " + logEntries);  openLogFile(false);  if (log == null) {    throw new IOException("rmid's log is inaccessible, " + "it may have been corrupted or closed");  }  log.seek(logBytes);  log.setLength(logBytes);  return state;}  }
class C{  public String server(){  return this.server;}  }
class C{  @Override public void removeHandler(Handler handler){synchronized (this) {    ClassLoader loader=Thread.currentThread().getContextClassLoader();    if (loader == null) {      loader=_systemClassLoader;    }    for (int i=_loaders.size() - 1; i >= 0; i--) {      WeakReference<ClassLoader> ref=_loaders.get(i);      ClassLoader refLoader=ref.get();      if (refLoader == null) {        _loaders.remove(i);      }      if (isParentLoader(loader,refLoader)) {        removeHandler(handler,refLoader);      }    }    HandlerEntry ownHandlers=_ownHandlers.get();    if (ownHandlers != null)     ownHandlers.removeHandler(handler);  }}  }
class C{  public int minIndex(){  if (isEmpty())   throw new NoSuchElementException("Priority queue is empty");  Node<Key> min=head;  Node<Key> current=head;  while (current.sibling != null) {    min=(greater(min.key,current.sibling.key)) ? current.sibling : min;    current=current.sibling;  }  return min.index;}  }
class C{  public Boolean isUsernameToken(){  return usernameToken;}  }
class C{  static double logGamma(double x){  double tmp=(x - 0.5) * Math.log(x + 4.5) - (x + 4.5);  double ser=1.0 + 76.18009173 / (x + 0) - 86.50532033 / (x + 1) + 24.01409822 / (x + 2) - 1.231739516 / (x + 3) + 0.00120858003 / (x + 4) - 0.00000536382 / (x + 5);  return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));}  }
class C{  public static int[] toIntArray(boolean[] array){  int[] result=new int[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i] ? 1 : 0;  }  return result;}  }
class C{  public Coords driftAddSmoke(Coords coords,int windDir,int windStr){  return driftAddSmoke(coords,windDir,windStr,0);}  }
class C{  public void read(org.apache.thrift.protocol.TProtocol iprot,Message struct) throws org.apache.thrift.TException {  org.apache.thrift.protocol.TField schemeField;  iprot.readStructBegin();  while (true) {    schemeField=iprot.readFieldBegin();    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {      break;    }switch (schemeField.id) {case 1:      if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {        org.apache.thrift.protocol.TList _list0=iprot.readListBegin();        struct.receivers=new ArrayList<String>(_list0.size);        String _elem1;        for (int _i2=0; _i2 < _list0.size; ++_i2) {          _elem1=iprot.readString();          struct.receivers.add(_elem1);        }        iprot.readListEnd();        struct.setReceiversIsSet(true);      } else {        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);      }    break;case 2:  if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {    struct.sender=iprot.readString();    struct.setSenderIsSet(true);  } else {    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);  }break;case 3:if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {struct.subject=iprot.readString();struct.setSubjectIsSet(true);} else {org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;case 4:if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {struct.messageType=iprot.readString();struct.setMessageTypeIsSet(true);} else {org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;case 5:if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {struct.extendAttrs=iprot.readString();struct.setExtendAttrsIsSet(true);} else {org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;case 6:if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {org.apache.thrift.protocol.TList _list3=iprot.readListBegin();struct.attachments=new ArrayList<Attachment>(_list3.size);Attachment _elem4;for (int _i5=0; _i5 < _list3.size; ++_i5) {_elem4=new Attachment();_elem4.read(iprot);struct.attachments.add(_elem4);iprot.readListEnd();}struct.setAttachmentsIsSet(true);} else {org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;case 7:if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {org.apache.thrift.protocol.TMap _map6=iprot.readMapBegin();struct.params=new HashMap<String,String>(2 * _map6.size);String _key7;String _val8;for (int _i9=0; _i9 < _map6.size; ++_i9) {_key7=iprot.readString();_val8=iprot.readString();struct.params.put(_key7,_val8);}iprot.readMapEnd();struct.setParamsIsSet(true);} else {org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;default :org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}iprot.readFieldEnd();}iprot.readStructEnd();struct.validate();}  }
class C{  @Override public boolean supportsUnionAll(){  debugCodeCall("supportsUnionAll");  return true;}  }
class C{  private static int hashCode(final IVariable<?>[] joinVars,final IBindingSet bset,final boolean ignoreUnboundVariables) throws JoinVariableNotBoundException {  int h=ONE;  for (  IVariable<?> v : joinVars) {    final IConstant<?> c=bset.get(v);    if (c == null) {      if (ignoreUnboundVariables)       continue;      throw new JoinVariableNotBoundException(v.getName());    }    h=31 * h + c.hashCode();  }  if (log.isTraceEnabled())   log.trace("hashCode=" + h + ", joinVars="+ Arrays.toString(joinVars)+ " : "+ bset);  return h;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 1624) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  private Calendar parseCalendar(String string) throws ParseException {  Calendar cal=new GregorianCalendar(TimeZone.getTimeZone("GMT"));  SimpleDateFormat sdf2=new SimpleDateFormat("dd.MM.yy");  SimpleDateFormat sdf4=new SimpleDateFormat("dd.MM.yyyy");  sdf2.setLenient(false);  sdf4.setLenient(false);  Date date;  try {    date=sdf2.parse(string);  } catch (  ParseException e) {    date=sdf4.parse(string);  }  cal.setTime(date);  return cal;}  }
class C{  public static Float toFloat(char c){  return new Float(toFloatValue(c));}  }
class C{  @VisibleForTesting protected void processBothConflicts(final Conflict conflict,final ServerContext context,final ResolveConflictsModel model,final File conflictPath,@Nullable final ContentTriplet contentTriplet) throws VcsException {  final RenameConflict renameConflict=(RenameConflict)conflict;  final String mergedServerPath=ConflictsEnvironment.getNameMerger().mergeName(renameConflict,project);  if (mergedServerPath == null) {    logger.warn("User canceled rename merge");    return;  }  if (StringUtils.equals(mergedServerPath,renameConflict.getServerPath())) {    logger.debug("Taking their name before processing content conflict");    resolveConflictWithProgress(conflict.getLocalPath(),ResolveConflictsCommand.AutoResolveType.TakeTheirs,context,model,false);    processContentConflict(context,model,contentTriplet,VersionControlPath.getFilePath(mergedServerPath,conflictPath.isDirectory()));  } else {    logger.debug("Keeping your name so continue to content conflict");    processContentConflict(context,model,contentTriplet,VersionControlPath.getFilePath(conflict.getLocalPath(),conflictPath.isDirectory()));  }}  }
class C{  @DSSource({DSSourceKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:41.471 -0500",hash_original_method="0327FB2868DF4020C01C73472A1250C2",hash_generated_method="5C840CD56D613D383A8D887516F98DEF") public static byte[] stringToGsm7BitPacked(String data,int languageTable,int languageShiftTable) throws EncodeException {  return stringToGsm7BitPacked(data,0,true,languageTable,languageShiftTable);}  }
class C{  default CategoryColumn upperCase(){  CategoryColumn newColumn=CategoryColumn.create(this.name() + "[ucase]");  for (int r=0; r < size(); r++) {    String value=getString(r);    if (value == null) {      newColumn.set(r,null);    } else {      newColumn.set(r,value.toUpperCase());    }  }  return newColumn;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public synchronized void stop(){  if (mConnectThread != null) {    mConnectThread.cancel();    mConnectThread=null;  }  if (mConnectedThread != null) {    mConnectedThread.cancel();    mConnectedThread=null;  }  if (mAcceptThread != null) {    mAcceptThread.cancel();    mAcceptThread=null;  }  mBluetoothDevice=null;  setState(State.STATE_NONE);}  }
class C{  public static void disableBreakpoints(final BackEndDebuggerProvider debuggerProvider,final int[] rows){  Preconditions.checkNotNull(debuggerProvider,"IE01919: Debugger provider argument can not be null");  Preconditions.checkNotNull(rows,"IE02254: Rows argument can't be null");  for (  final int row : rows) {    final Pair<IDebugger,Integer> breakpoint=CBreakpointTableHelpers.findBreakpoint(debuggerProvider,row);    final BreakpointManager manager=breakpoint.first().getBreakpointManager();    final int breakpointIndex=breakpoint.second();    manager.setBreakpointStatus(BreakpointType.REGULAR,BreakpointStatus.BREAKPOINT_DISABLED,breakpointIndex);  }}  }
class C{  public static long parseDateAsEpoch(String dateStr){  try {    return DateUtils.parseDate(dateStr).getTime();  } catch (  DateParseException e) {    return 0;  }}  }
class C{  public GroupImpl(String mask) throws UnknownHostException {  super(mask);}  }
class C{  protected void dispose(){  Component component=getComponent();  Window window=SwingUtilities.getWindowAncestor(component);  if (component instanceof JWindow) {    ((Window)component).dispose();    component=null;  }  if (window instanceof DefaultFrame) {    window.dispose();  }}  }
class C{  public boolean hasAuth(String authBackend){  Assert.hasText(authBackend,"AuthBackend must not be empty");  return adminOperations.getAuthMounts().containsKey(authBackend + "/");}  }
class C{  public String toString(boolean includeGenerics){  return getTypeCategory().asString(this);}  }
class C{  public void defaultRouteSet(boolean enabled){  mDefaultRouteSet.set(enabled);}  }
class C{  private JCExpression enumBase(int pos,ClassSymbol c){  JCExpression result=make.at(pos).TypeApply(make.QualIdent(syms.enumSym),List.<JCExpression>of(make.Type(c.type)));  return result;}  }
class C{  public void sleepSeconds(final long seconds){  sleepMillis(seconds * 1000);}  }
class C{  public static void touchLastDatabaseUpdateTime(){  lastDatabaseUpdateTime=System.currentTimeMillis();}  }
class C{  public static String truncateField(String field,int limit,String appId){  if (field != null && limit > TRUNCATE_SUFFIX.length() && field.length() > limit) {    logger.info("Truncating " + field + " to "+ limit+ " characters for "+ appId);    field=field.substring(0,limit - 3) + "...";  }  return field;}  }
class C{  public NegativeArraySizeException(){}  }
class C{  protected Caret createCaret(){  return MotifTextUI.createCaret();}  }
class C{  private boolean determineExportGroupCreateSteps(Workflow workflow,String previousStep,BlockStorageDevice device,StorageSystem storage,ExportGroup exportGroup,List<URI> initiatorURIs,Map<URI,Integer> volumeMap,String token) throws Exception {  Map<String,URI> portNameToInitiatorURI=new HashMap<String,URI>();  List<URI> volumeURIs=new ArrayList<URI>();  volumeURIs.addAll(volumeMap.keySet());  List<URI> hostURIs=new ArrayList<URI>();  List<String> portNames=new ArrayList<String>();  processInitiators(exportGroup,initiatorURIs,portNames,portNameToInitiatorURI,hostURIs);  queryHostInitiatorsAndAddToList(portNames,portNameToInitiatorURI,initiatorURIs,hostURIs);  URI fillerHostURI=URIUtil.createId(Host.class);  if (!initiatorURIs.isEmpty()) {    Map<URI,List<URI>> hostInitiatorMap=new HashMap<URI,List<URI>>();    for (    URI newExportMaskInitiator : initiatorURIs) {      Initiator initiator=_dbClient.queryObject(Initiator.class,newExportMaskInitiator);      URI hostURI=initiator.getHost();      if (hostURI == null) {        hostURI=fillerHostURI;      }      List<URI> initiatorSet=hostInitiatorMap.get(hostURI);      if (initiatorSet == null) {        initiatorSet=new ArrayList<URI>();        hostInitiatorMap.put(hostURI,initiatorSet);      }      initiatorSet.add(initiator.getId());      _log.info(String.format("host = %s, " + "initiators to add: %d, ",hostURI,hostInitiatorMap.get(hostURI).size()));    }    if (!hostInitiatorMap.isEmpty()) {      String exportStep=null;      for (      URI hostID : hostInitiatorMap.keySet()) {        _log.info(String.format("new export masks %s",Joiner.on(",").join(hostInitiatorMap.get(hostID))));        if (exportStep == null) {          GenExportMaskCreateWorkflowResult result=generateExportMaskCreateWorkflow(workflow,previousStep,storage,exportGroup,hostInitiatorMap.get(hostID),volumeMap,token);          exportStep=result.getStepId();        } else {          GenExportMaskCreateWorkflowResult result=generateExportMaskCreateWorkflow(workflow,exportStep,storage,exportGroup,hostInitiatorMap.get(hostID),volumeMap,token);          exportStep=result.getStepId();        }      }    }  }  return true;}  }
class C{  private void checkDirectory(){  if (!directory.exists()) {    boolean created=directory.mkdirs();    if (!created) {      throw new RuntimeException(String.format("Unable to create the path '%s'.",directory));    }  } else   if (!directory.canWrite()) {    throw new RuntimeException(String.format("The path '%s' is not writable.",directory));  }}  }
class C{  public boolean isSystemMethod(String sig){  return all_sys_methods.contains(sig);}  }
class C{  private void populateAndPersistChallanReceipt(){  if (voucherNumber != null && !"".equals(voucherNumber)) {    final CVoucherHeader voucherHeader=(CVoucherHeader)persistenceService.findByNamedQuery(CollectionConstants.QUERY_VOUCHERHEADER_BY_VOUCHERNUMBER,voucherNumber);    if (voucherHeader == null)     errors.add(new ValidationError("challan.invalid.vouchernumber","Voucher not found. Please check the voucher number."));    receiptHeader.getChallan().setVoucherHeader(voucherHeader);  }  receiptHeader.setStatus(collectionsUtil.getStatusForModuleAndCode(CollectionConstants.MODULE_NAME_RECEIPTHEADER,CollectionConstants.RECEIPT_STATUS_CODE_PENDING));  receiptHeader.setIsReconciled(Boolean.TRUE);  receiptHeader.setIsModifiable(Boolean.FALSE);  receiptHeader.setReceipttype(CollectionConstants.RECEIPT_TYPE_CHALLAN);  receiptHeader.setPaidBy(CollectionConstants.CHAIRPERSON);  receiptHeader.setSource(Source.SYSTEM.toString());  receiptHeader.setReceiptdate(new Date());  receiptHeader.setService(serviceDetailsService.findById(serviceId,false));  receiptHeader.getService().setServiceCategory(serviceCategoryService.findById(serviceCategoryId,false));  receiptHeader.getReceiptMisc().setFund(fundDAO.fundById(receiptHeader.getReceiptMisc().getFund().getId(),false));  final Department dept=(Department)getPersistenceService().findByNamedQuery(CollectionConstants.QUERY_DEPARTMENT_BY_ID,Long.valueOf(deptId));  receiptHeader.getReceiptMisc().setDepartment(dept);  if (boundaryId != null)   receiptHeader.getReceiptMisc().setBoundary(boundaryService.getBoundaryById(boundaryId));  receiptHeader.getReceiptMisc().setReceiptHeader(receiptHeader);  BigDecimal debitamount=BigDecimal.ZERO;  removeEmptyRows(billDetailslist);  removeEmptyRows(subLedgerlist);  int m=0;  validateAccountDetails();  BigDecimal totalAmt=BigDecimal.ZERO;  for (  final ReceiptDetailInfo rDetails : billDetailslist) {    final CChartOfAccounts account=chartOfAccountsDAO.getCChartOfAccountsByGlCode(rDetails.getGlcodeDetail());    CFunction function=null;    if (functionId != null)     function=functionDAO.getFunctionById(functionId);    ReceiptDetail receiptDetail=new ReceiptDetail(account,function,rDetails.getCreditAmountDetail(),rDetails.getDebitAmountDetail(),null,Long.valueOf(m),null,null,receiptHeader,PURPOSE.OTHERS.toString());    receiptDetail.setCramount(rDetails.getCreditAmountDetail());    totalAmt=totalAmt.add(receiptDetail.getCramount()).subtract(receiptDetail.getDramount());    final CFinancialYear financialYear=financialYearDAO.findById(rDetails.getFinancialYearId(),false);    receiptDetail.setFinancialYear(financialYear);    if (rDetails.getCreditAmountDetail() == null)     receiptDetail.setCramount(BigDecimal.ZERO); else     receiptDetail.setCramount(rDetails.getCreditAmountDetail());    if (rDetails.getDebitAmountDetail() == null)     receiptDetail.setDramount(BigDecimal.ZERO); else     receiptDetail.setDramount(rDetails.getDebitAmountDetail());    receiptDetail=setAccountPayeeDetails(subLedgerlist,receiptDetail);    receiptHeader.addReceiptDetail(receiptDetail);    debitamount=debitamount.add(rDetails.getCreditAmountDetail());    debitamount=debitamount.subtract(rDetails.getDebitAmountDetail());    m++;  }  receiptHeader.setTotalAmount(totalAmt);  receiptHeader.getChallan().setStatus(collectionsUtil.getStatusForModuleAndCode(CollectionConstants.MODULE_NAME_CHALLAN,CollectionConstants.CHALLAN_STATUS_CODE_CREATED));  if (receiptHeader.getChallan().getService() != null && receiptHeader.getChallan().getService().getId() != null)   receiptHeader.getChallan().setService((ServiceDetails)getPersistenceService().findByNamedQuery(CollectionConstants.QUERY_SERVICE_BY_ID,receiptHeader.getChallan().getService().getId()));  SimpleDateFormat sdf=new SimpleDateFormat("dd/MM/yyyy");  try {    cutOffDate=sdf.parse(collectionsUtil.getAppConfigValue(CollectionConstants.MODULE_NAME_COLLECTIONS_CONFIG,CollectionConstants.APPCONFIG_VALUE_COLLECTIONDATAENTRYCUTOFFDATE));  } catch (  ParseException e) {    LOGGER.error(getText("Error parsing Cut Off Date") + e.getMessage());  }  if (receiptHeader.getChallan().getChallanDate().before(cutOffDate))   actionName=CollectionConstants.WF_ACTION_NAME_VALIDATE_CHALLAN;  receiptHeaderService.persistChallan(receiptHeader,position,actionName,approvalRemarks);  receiptId=receiptHeader.getId();  LOGGER.info("Persisted Challan and Created Receipt In Pending State For the Challan");}  }
class C{  void shutdown(){  cursor=NONE;  if (nextIndex >= 0)   nextIndex=REMOVED;  if (lastRet >= 0) {    lastRet=REMOVED;    lastItem=null;  }  prevTakeIndex=DETACHED;}  }
class C{  private UpdateSingleResult updateSingle(ClusterNode node,boolean hasNear,GridNearAtomicUpdateRequest req,GridNearAtomicUpdateResponse res,List<GridDhtCacheEntry> locked,GridCacheVersion ver,@Nullable GridDhtAtomicUpdateFuture dhtFut,CI2<GridNearAtomicUpdateRequest,GridNearAtomicUpdateResponse> completionCb,boolean replicate,String taskName,@Nullable IgniteCacheExpiryPolicy expiry,boolean sndPrevVal) throws GridCacheEntryRemovedException {  GridCacheReturn retVal=null;  Collection<IgniteBiTuple<GridDhtCacheEntry,GridCacheVersion>> deleted=null;  List<KeyCacheObject> keys=req.keys();  AffinityTopologyVersion topVer=req.topologyVersion();  boolean checkReaders=hasNear || ctx.discovery().hasNearCache(name(),topVer);  boolean readersOnly=false;  boolean intercept=ctx.config().getInterceptor() != null;  for (int i=0; i < keys.size(); i++) {    KeyCacheObject k=keys.get(i);    GridCacheOperation op=req.operation();    try {      GridDhtCacheEntry entry=locked.get(i);      if (entry == null)       continue;      GridCacheVersion newConflictVer=req.conflictVersion(i);      long newConflictTtl=req.conflictTtl(i);      long newConflictExpireTime=req.conflictExpireTime(i);      assert !(newConflictVer instanceof GridCacheVersionEx) : newConflictVer;      boolean primary=!req.fastMap() || ctx.affinity().primary(ctx.localNode(),entry.key(),req.topologyVersion());      Object writeVal=op == TRANSFORM ? req.entryProcessor(i) : req.writeValue(i);      Collection<UUID> readers=null;      Collection<UUID> filteredReaders=null;      if (checkReaders) {        readers=entry.readers();        filteredReaders=F.view(entry.readers(),F.notEqualTo(node.id()));      }      GridCacheUpdateAtomicResult updRes=entry.innerUpdate(ver,node.id(),locNodeId,op,writeVal,req.invokeArguments(),(primary || (ctx.store().isLocal() && !ctx.shared().localStorePrimaryOnly())) && writeThrough() && !req.skipStore(),!req.skipStore(),sndPrevVal || req.returnValue(),req.keepBinary(),expiry,true,true,primary,ctx.config().getAtomicWriteOrderMode() == CLOCK,topVer,req.filter(),replicate ? primary ? DR_PRIMARY : DR_BACKUP : DR_NONE,newConflictTtl,newConflictExpireTime,newConflictVer,true,intercept,req.subjectId(),taskName,null,null,dhtFut);      if (dhtFut == null && !F.isEmpty(filteredReaders)) {        dhtFut=createDhtFuture(ver,req,res,completionCb,true);        readersOnly=true;      }      if (dhtFut != null) {        if (updRes.sendToDht()) {          GridCacheVersionConflictContext<?,?> conflictCtx=updRes.conflictResolveResult();          if (conflictCtx == null)           newConflictVer=null; else           if (conflictCtx.isMerge())           newConflictVer=null;          EntryProcessor<Object,Object,Object> entryProcessor=null;          if (!readersOnly) {            dhtFut.addWriteEntry(entry,updRes.newValue(),entryProcessor,updRes.newTtl(),updRes.conflictExpireTime(),newConflictVer,sndPrevVal,updRes.oldValue(),updRes.updateCounter());          }          if (!F.isEmpty(filteredReaders))           dhtFut.addNearWriteEntries(filteredReaders,entry,updRes.newValue(),entryProcessor,updRes.newTtl(),updRes.conflictExpireTime());        } else {          if (log.isDebugEnabled())           log.debug("Entry did not pass the filter or conflict resolution (will skip write) " + "[entry=" + entry + ", filter="+ Arrays.toString(req.filter())+ ']');        }      }      if (hasNear) {        if (primary && updRes.sendToDht()) {          if (!ctx.affinity().belongs(node,entry.partition(),topVer)) {            if (op == TRANSFORM || writeVal != updRes.newValue()) {              res.addNearValue(i,updRes.newValue(),updRes.newTtl(),updRes.conflictExpireTime());            } else             res.addNearTtl(i,updRes.newTtl(),updRes.conflictExpireTime());            if (updRes.newValue() != null) {              IgniteInternalFuture<Boolean> f=entry.addReader(node.id(),req.messageId(),topVer);              assert f == null : f;            }          } else           if (F.contains(readers,node.id()))           entry.removeReader(node.id(),req.messageId()); else           res.addSkippedIndex(i);        } else         res.addSkippedIndex(i);      }      if (updRes.removeVersion() != null) {        if (deleted == null)         deleted=new ArrayList<>(keys.size());        deleted.add(F.t(entry,updRes.removeVersion()));      }      if (op == TRANSFORM) {        assert !req.returnValue();        IgniteBiTuple<Object,Exception> compRes=updRes.computedResult();        if (compRes != null && (compRes.get1() != null || compRes.get2() != null)) {          if (retVal == null)           retVal=new GridCacheReturn(node.isLocal());          retVal.addEntryProcessResult(ctx,k,null,compRes.get1(),compRes.get2(),req.keepBinary());        }      } else {        if (retVal == null) {          CacheObject ret=updRes.oldValue();          retVal=new GridCacheReturn(ctx,node.isLocal(),req.keepBinary(),req.returnValue() ? ret : null,updRes.success());        }      }    } catch (    IgniteCheckedException e) {      res.addFailedKey(k,e);    }  }  return new UpdateSingleResult(retVal,deleted,dhtFut);}  }
class C{  public GemFireHealth.Health evaluate(){  List status=new ArrayList();  this.memberHealth.evaluate(status);  this.cacheHealth.evaluate(status);  GemFireHealth.Health overallHealth=GemFireHealth.GOOD_HEALTH;  this.okayDiagnoses.clear();  this.poorDiagnoses.clear();  for (Iterator iter=status.iterator(); iter.hasNext(); ) {    AbstractHealthEvaluator.HealthStatus health=(AbstractHealthEvaluator.HealthStatus)iter.next();    if (overallHealth == GemFireHealth.GOOD_HEALTH) {      if ((health.getHealthCode() != GemFireHealth.GOOD_HEALTH)) {        overallHealth=health.getHealthCode();      }    } else     if (overallHealth == GemFireHealth.OKAY_HEALTH) {      if (health.getHealthCode() == GemFireHealth.POOR_HEALTH) {        overallHealth=GemFireHealth.POOR_HEALTH;      }    }    GemFireHealth.Health healthCode=health.getHealthCode();    if (healthCode == GemFireHealth.OKAY_HEALTH) {      this.okayDiagnoses.add(health.getDiagnosis());    } else     if (healthCode == GemFireHealth.POOR_HEALTH) {      this.poorDiagnoses.add(health.getDiagnosis());    }  }  if (logger.isDebugEnabled()) {    logger.debug("Evaluated health to be {}",overallHealth);  }  return overallHealth;}  }
class C{  private double[][] initialProbs(int numInstances){  double[][] probs=new double[numInstances][m_NumClasses];  for (int i=0; i < numInstances; i++) {    for (int j=0; j < m_NumClasses; j++) {      probs[i][j]=1.0 / m_NumClasses;    }  }  return probs;}  }
class C{  void constructNode(String nodeName,String prefix,String nodeNamespace,TransformerImpl transformer) throws TransformerException {  if (null != nodeName && nodeName.length() > 0) {    SerializationHandler rhandler=transformer.getSerializationHandler();    String val=transformer.transformToString(this);    try {      String localName=QName.getLocalPart(nodeName);      if (prefix != null && prefix.length() > 0) {        rhandler.addAttribute(nodeNamespace,localName,nodeName,"CDATA",val,true);      } else {        rhandler.addAttribute("",localName,nodeName,"CDATA",val,true);      }    } catch (    SAXException e) {    }  }}  }
class C{  public SparseBitmap or(final SparseBitmap rhs){  return new SparseBitmap(this.bitmap.or(rhs.bitmap));}  }
class C{  public static TextView findTextViewByIndex(String text,int index){  int number=1;  ArrayList<View> allViews=SOLO.getViews();  for (  View view : allViews) {    if (view instanceof TextView) {      TextView textView=(TextView)view;      String textString=(String)textView.getText();      if (textView.isShown() && textString.endsWith(text)) {        if (number == index) {          return textView;        } else {          number++;        }      }    }  }  return null;}  }
class C{  public AttachmentFaulty(){  requestFileName="attachm-error.query";  requestContentType="multipart/related; charset=UTF-8; " + "boundary=jetty771207119h3h10dty";}  }
class C{  public KeyboardButton.KeyboardButtonBuilder requestContact(boolean requestContact){  this.request_contact=requestContact;  if (requestContact)   this.request_location=false;  return this;}  }
class C{  private void testList() throws Exception {  LOG.info("list");  List<Mailbox> result=mapper.list();  assertEquals(mailboxList.size(),result.size());}  }
class C{  protected void putForValidation(Region region){  final byte[] value=new byte[1024];  region.put("testKey",value);}  }
class C{  public static int toFixedPoint(double d){  return (int)(d * 32d);}  }
class C{  private void assignClusterNums(int[] cl_num) throws Exception {  if (m_children != null && m_children.size() < 2) {    throw new Exception("assignClusterNums: tree not built correctly!");  }  m_clusterNum=cl_num[0];  cl_num[0]++;  if (m_children != null) {    for (int i=0; i < m_children.size(); i++) {      CNode child=m_children.get(i);      child.assignClusterNums(cl_num);    }  }}  }
class C{  public void stopSession(){  if (logger.isActivated()) {    logger.debug("Stop the session");  }  if (processor != null) {    processor.stopProcessing();  }  if (outputStream != null)   outputStream.close();}  }
class C{  public void read(DataInputStream s) throws IOException {  setECEF(s.readDouble(),s.readDouble(),s.readDouble());}  }
class C{  public void test_DSAKeyPairGenerator02(){  int[] invalidLen={-1,0,511,513,650,1023,1025};  DSAParams dsaParams=new DSAParameterSpec(p,q,g);  SecureRandom random=null;  MyDSA dsa=new MyDSA(null);  try {    random=SecureRandom.getInstance("SHA1PRNG");  } catch (  Exception e) {    fail("Unexpected exception for SecureRandom: " + e);  }  try {    dsa.initialize(520,false,random);    fail("InvalidParameterException was not thrown");  } catch (  InvalidParameterException ipe) {    String str=ipe.getMessage();    if (!str.equals("there are not precomputed parameters")) {      fail("Incorrect exception's message: " + str);    }  }catch (  Exception e) {    fail(e + " was thrown instead of InvalidParameterException");  }  for (int i=0; i < invalidLen.length; i++) {    try {      dsa.initialize(invalidLen[i],true,random);      fail("InvalidParameterException was not thrown");    } catch (    InvalidParameterException ipe) {      String str=ipe.getMessage();      if (!str.equals("Incorrect modlen")) {        fail("Incorrect exception's message: " + str);      }    }catch (    Exception e) {      fail(e + " was thrown instead of InvalidParameterException");    }  }  dsa=new MyDSA(dsaParams);  try {    dsa.initialize(520,true,random);  } catch (  Exception e) {    fail(e + " was thrown for subcase 1");  }  try {    dsa.initialize(520,false,random);  } catch (  Exception e) {    fail(e + " was thrown for subcase 1");  }}  }
class C{  public void stopProcessing(){  if (sLogger.isActivated()) {    sLogger.debug("Stop media processor");  }  interrupted=true;  outputStream.close();  inputStream.close();}  }
class C{  @RequestMapping(value={"/options/{ptid}"},method=RequestMethod.POST) @ResponseBody public RestWrapperOptions options(@PathVariable("ptid") Integer processTypeId){  RestWrapperOptions restWrapperOptions=null;  try {    List<com.wipro.ats.bdre.md.dao.jpa.ProcessType> jpaProcessTypes=processTypeDAO.list(processTypeId);    List<ProcessType> processTypes=new ArrayList<ProcessType>();    for (    com.wipro.ats.bdre.md.dao.jpa.ProcessType processType : jpaProcessTypes) {      ProcessType returnProcessType=new ProcessType();      returnProcessType.setProcessTypeId(processType.getProcessTypeId());      returnProcessType.setParentProcessTypeId(processType.getParentProcessTypeId());      returnProcessType.setProcessTypeName(processType.getProcessTypeName());      returnProcessType.setCounter(jpaProcessTypes.size());      processTypes.add(returnProcessType);    }    LOGGER.debug(processTypes.get(0).getProcessTypeId());    List<RestWrapperOptions.Option> options=new ArrayList<RestWrapperOptions.Option>();    for (    ProcessType type : processTypes) {      RestWrapperOptions.Option option=new RestWrapperOptions.Option(type.getProcessTypeName(),type.getProcessTypeId());      options.add(option);      LOGGER.debug(option.getDisplayText());    }    restWrapperOptions=new RestWrapperOptions(options,RestWrapperOptions.OK);  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapperOptions=new RestWrapperOptions(e.getMessage(),RestWrapperOptions.ERROR);  }  return restWrapperOptions;}  }
class C{  @SuppressLint("DrawAllocation") @Override protected void onDraw(Canvas canvas){  float drawSpaceWidth=getMeasuredWidth();  float drawSpaceHeight=getMeasuredHeight() - MARGIN_BOTTOM - MARGIN_TOP;  int highestTemp;  int lowestTemp;  if (yesterdayTemps != null) {    highestTemp=yesterdayTemps[0];    lowestTemp=yesterdayTemps[1];  } else {    highestTemp=maxiTemps[0];    lowestTemp=miniTemps[0];  }  for (  int t : maxiTemps) {    if (t > highestTemp) {      highestTemp=t;    }  }  for (  int t : miniTemps) {    if (t < lowestTemp) {      lowestTemp=t;    }  }  if (highestTemp == lowestTemp) {    highestTemp+=7;    lowestTemp-=7;  }  int[] timeLineCoordinates=new int[maxiTemps.length];  for (int i=0; i < timeLineCoordinates.length; i++) {    timeLineCoordinates[i]=(int)(drawSpaceWidth / (timeLineCoordinates.length * 2.0) * (2 * i + 1));  }  Point[] maxiTempPoints=new Point[timeLineCoordinates.length];  for (int i=0; i < maxiTempPoints.length; i++) {    maxiTempPoints[i]=new Point(timeLineCoordinates[i],(int)(drawSpaceHeight / (highestTemp - lowestTemp) * (highestTemp - maxiTemps[i]) + MARGIN_TOP));  }  Point[] miniTempPoints=new Point[timeLineCoordinates.length];  for (int i=0; i < miniTempPoints.length; i++) {    miniTempPoints[i]=new Point(timeLineCoordinates[i],(int)(drawSpaceHeight / (highestTemp - lowestTemp) * (highestTemp - miniTemps[i]) + MARGIN_TOP));  }  int[] yesterdayTempCoordinates=yesterdayTemps == null ? null : new int[]{(int)(drawSpaceHeight / (highestTemp - lowestTemp) * (highestTemp - yesterdayTemps[0]) + MARGIN_TOP),(int)(drawSpaceHeight / (highestTemp - lowestTemp) * (highestTemp - yesterdayTemps[1]) + MARGIN_TOP)};  this.drawTimeLine(canvas,timeLineCoordinates);  this.drawYesterdayTempLine(canvas,yesterdayTempCoordinates);  this.drawMaxiTemp(canvas,maxiTempPoints);  this.drawMiniTemp(canvas,miniTempPoints);}  }
class C{  static public void put(PrintWriter log,Throwable exception){  put(log,(String)null,exception);}  }
class C{  public synchronized void acquireWakeLock(){  if (!wakeLock.isHeld()) {    writeDebug("acquiring wake lock");    wakeLock.acquire();  }}  }
class C{  protected DoubleVal(double d){  this.d=d;  hashcode=new Double(d).hashCode();}  }
class C{  public String generateConfigV3(){  org.matsim.contrib.matsim4urbansim.matsim4urbansim.jaxbconfigv3.ObjectFactory of=new org.matsim.contrib.matsim4urbansim.matsim4urbansim.jaxbconfigv3.ObjectFactory();  org.matsim.contrib.matsim4urbansim.matsim4urbansim.jaxbconfigv3.FileType externalMatsimConfig=of.createFileType();  externalMatsimConfig.setInputFile(this.matsimExternalConfigFileName);  org.matsim.contrib.matsim4urbansim.matsim4urbansim.jaxbconfigv3.FileType network=of.createFileType();  network.setInputFile(this.networkInputFileName);  org.matsim.contrib.matsim4urbansim.matsim4urbansim.jaxbconfigv3.FileType emptyShapeFile=of.createFileType();  emptyShapeFile.setInputFile("");  org.matsim.contrib.matsim4urbansim.matsim4urbansim.jaxbconfigv3.FileType warmStartPlansFile=of.createFileType();  warmStartPlansFile.setInputFile(this.hotstartPlansFileName);  org.matsim.contrib.matsim4urbansim.matsim4urbansim.jaxbconfigv3.FileType hotStartPlansFile=of.createFileType();  hotStartPlansFile.setInputFile(this.hotstartPlansFileName);  org.matsim.contrib.matsim4urbansim.matsim4urbansim.jaxbconfigv3.MatsimConfigType matsimConfigType=of.createMatsimConfigType();  matsimConfigType.setCellSize(this.cellSizeCellBasedAccessibility);  matsimConfigType.setAccessibilityComputationAreaFromShapeFile(false);  matsimConfigType.setAccessibilityComputationAreaFromBoundingBox(false);  matsimConfigType.setAccessibilityComputationAreaFromNetwork(true);  matsimConfigType.setStudyAreaBoundaryShapeFile(emptyShapeFile);  matsimConfigType.setUrbansimZoneRandomLocationDistributionByRadius(this.randomLocationDistributionRadiusForUrbanSimZone);  matsimConfigType.setUrbansimZoneRandomLocationDistributionByShapeFile("");  matsimConfigType.setExternalMatsimConfig(externalMatsimConfig);  matsimConfigType.setNetwork(network);  matsimConfigType.setWarmStartPlansFile(warmStartPlansFile);  matsimConfigType.setHotStartPlansFile(hotStartPlansFile);  matsimConfigType.setUseHotStart(true);  matsimConfigType.setActivityType0(this.activityType_0);  matsimConfigType.setActivityType1(this.activityType_1);  matsimConfigType.setHomeActivityTypicalDuration(this.homeActivityTypicalDuration);  matsimConfigType.setWorkActivityTypicalDuration(this.workActivityTypicalDuration);  matsimConfigType.setWorkActivityOpeningTime(this.workActivityOpeningTime);  matsimConfigType.setWorkActivityLatestStartTime(this.workActivityLatestStartTime);  matsimConfigType.setFirstIteration(this.firstIteration);  matsimConfigType.setLastIteration(this.lastIteration);  org.matsim.contrib.matsim4urbansim.matsim4urbansim.jaxbconfigv3.Matsim4UrbansimType matsim4UrbanSimType=of.createMatsim4UrbansimType();  matsim4UrbanSimType.setPopulationSamplingRate(this.populationSamplingRate);  matsim4UrbanSimType.setYear(this.year);  matsim4UrbanSimType.setOpusHome(this.opusHome);  matsim4UrbanSimType.setOpusDataPath(this.opusDataPath);  matsim4UrbanSimType.setMatsim4Opus(this.matsim4opus);  matsim4UrbanSimType.setMatsim4OpusConfig(this.matsim4opusConfig);  matsim4UrbanSimType.setMatsim4OpusOutput(this.matsim4opusOutput);  matsim4UrbanSimType.setMatsim4OpusTemp(this.matsim4opusTemp);  matsim4UrbanSimType.setCustomParameter(this.customParameter);  matsim4UrbanSimType.setZone2ZoneImpedance(this.zone2zoneImpedance);  matsim4UrbanSimType.setAgentPerfomance(this.agentPerformance);  matsim4UrbanSimType.setZoneBasedAccessibility(this.zoneBasedAccessibility);  matsim4UrbanSimType.setParcelBasedAccessibility(this.cellBasedAccessibility);  matsim4UrbanSimType.setBackupRunData(this.backupRunData);  Matsim4UrbansimConfigType m4uConfigType=of.createMatsim4UrbansimConfigType();  m4uConfigType.setMatsim4Urbansim(matsim4UrbanSimType);  m4uConfigType.setMatsimConfig(matsimConfigType);  return writeConfigFileV3(m4uConfigType);}  }
class C{  public MultiThreadedBruteForceNearestNeighbor(IMultiPoint[] points){  if (points == null || points.length == 0) {    throw new IllegalArgumentException("BruteForce requires at least one point.");  }  int maxd=points[0].dimensionality();  this.points=new double[points.length][maxd];  for (int i=0; i < points.length; i++) {    IMultiPoint imp=points[i];    for (int d=1; d <= maxd; d++) {      this.points[i][d - 1]=imp.getCoordinate(d);    }  }  this.results=points;  indices=new int[numThreads];}  }
class C{  public DeviceUniqueIndex(EnumSet<DeviceField> keyFields){  super(keyFields);  index=new ConcurrentHashMap<IndexedEntity,Long>();}  }
class C{  public AtCommandResponse sendAtCommand(AtCommand command) throws XBeeException {  return (AtCommandResponse)this.sendSynchronous(command,5000);}  }
class C{  public static void output(String outputString){  try {    if (outputLog != null) {      outputLog.writeBytes(outputString);      outputLog.writeBytes("\n");    }  } catch (  IOException ioe) {    notifyOut=true;    out=System.out;    error("Debug: output writing <" + outputString + "> to log! \n"+ ioe);    return;  }  if (notifyOut) {    out.println(outputString);  }}  }
class C{  @Override public Map<String,Object> runSync(String localName,ModelService modelService,Map<String,Object> context) throws GenericServiceException {  Map<String,Object> result=serviceInvoker(localName,modelService,context);  if (result == null)   throw new GenericServiceException("Service did not return expected result");  return result;}  }
class C{  public static String chomp(String str,String sep){  int idx=str.lastIndexOf(sep);  if (idx != -1) {    return str.substring(0,idx);  } else {    return str;  }}  }
class C{  public void close() throws IOException {  do {    nextStream();  } while (in != null);}  }
class C{  public Iterator<ModelList> iterator(){  return values().iterator();}  }
class C{  public void clear(){  solrDoc=null;  indexedId=null;  updateTerm=null;  version=0;}  }
class C{  ChangeRequestAttribute(){  super(CHANGE_REQUEST);}  }
class C{  public void visitOuterClass(String owner,String name,String desc){  if (cv != null) {    cv.visitOuterClass(owner,name,desc);  }}  }
class C{  static public boolean hideWindow(CFrame window){  if (!Ini.isCacheWindow() || s_closingWindows)   return false;  for (int i=0; i < s_hiddenWindows.size(); i++) {    CFrame hidden=s_hiddenWindows.get(i);    s_log.info(i + ": " + hidden);    if (hidden.getAD_Window_ID() == window.getAD_Window_ID())     return false;  }  if (window.getAD_Window_ID() != 0) {    if (s_hiddenWindows.add(window)) {      window.setVisible(false);      s_log.info(window.toString());      if (s_hiddenWindows.size() > 10) {        CFrame toClose=s_hiddenWindows.remove(0);        try {          s_closingWindows=true;          toClose.dispose();        }  finally {          s_closingWindows=false;        }      }      return true;    }  }  return false;}  }
class C{  public XmlDom child(String tag){  return child(tag,null,null);}  }
class C{  public void test_ticket_1105_quads_update2() throws Exception {  new UpdateTestHelper("ticket_1105_quads_update2","ticket_1105_update2.rq","ticket_1105.trig");}  }
class C{  @Override public boolean performOperation(int generation){  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:37.896 -0500",hash_original_method="4F64A0C3F2C04A008F76D91B875DAC0D",hash_generated_method="C8EDEC31BDA79F97EF024E56F171B440") public SIPResponse createResponse(int statusCode,String reasonPhrase){  SIPResponse newResponse;  Iterator headerIterator;  SIPHeader nextHeader;  newResponse=new SIPResponse();  try {    newResponse.setStatusCode(statusCode);  } catch (  ParseException ex) {    throw new IllegalArgumentException("Bad code " + statusCode);  }  if (reasonPhrase != null)   newResponse.setReasonPhrase(reasonPhrase); else   newResponse.setReasonPhrase(SIPResponse.getReasonPhrase(statusCode));  headerIterator=getHeaders();  while (headerIterator.hasNext()) {    nextHeader=(SIPHeader)headerIterator.next();    if (nextHeader instanceof From || nextHeader instanceof To || nextHeader instanceof ViaList|| nextHeader instanceof CallID|| (nextHeader instanceof RecordRouteList && mustCopyRR(statusCode))|| nextHeader instanceof CSeq|| nextHeader instanceof TimeStamp) {      try {        newResponse.attachHeader((SIPHeader)nextHeader.clone(),false);      } catch (      SIPDuplicateHeaderException e) {        e.printStackTrace();      }    }  }  if (MessageFactoryImpl.getDefaultServerHeader() != null) {    newResponse.setHeader(MessageFactoryImpl.getDefaultServerHeader());  }  if (newResponse.getStatusCode() == 100) {    newResponse.getTo().removeParameter("tag");  }  ServerHeader server=MessageFactoryImpl.getDefaultServerHeader();  if (server != null) {    newResponse.setHeader(server);  }  return newResponse;}  }
class C{  @Override public void perspective(){  perspective(cameraFOV,cameraAspect,cameraNear,cameraFar);}  }
class C{  public boolean isVerb(){  return typeString.startsWith(VERB);}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  public static Map<String,Object> adjustDebugLevels(DispatchContext dctc,Map<String,?> context){  Debug.set(Debug.FATAL,"Y".equalsIgnoreCase((String)context.get("fatal")));  Debug.set(Debug.ERROR,"Y".equalsIgnoreCase((String)context.get("error")));  Debug.set(Debug.WARNING,"Y".equalsIgnoreCase((String)context.get("warning")));  Debug.set(Debug.IMPORTANT,"Y".equalsIgnoreCase((String)context.get("important")));  Debug.set(Debug.INFO,"Y".equalsIgnoreCase((String)context.get("info")));  Debug.set(Debug.TIMING,"Y".equalsIgnoreCase((String)context.get("timing")));  Debug.set(Debug.VERBOSE,"Y".equalsIgnoreCase((String)context.get("verbose")));  return ServiceUtil.returnSuccess();}  }
class C{  public String toString(){  if (tag == ARRAY) {    StringBuilder sb=new StringBuilder(80);    sb.append(name).append("=[");    int len=Array.getLength(value);    for (int i=0; i < len; i++) {      if (i != 0)       sb.append(", ");      sb.append(Array.get(value,i));    }    return sb.append("]").toString();  } else {    return name + "=" + value;  }}  }
class C{  @CanIgnoreReturnValue public Builder<C> add(Range<C> range){  if (range.isEmpty()) {    throw new IllegalArgumentException("range must not be empty, but was " + range);  } else   if (!rangeSet.complement().encloses(range)) {    for (    Range<C> currentRange : rangeSet.asRanges()) {      checkArgument(!currentRange.isConnected(range) || currentRange.intersection(range).isEmpty(),"Ranges may not overlap, but received %s and %s",currentRange,range);    }    throw new AssertionError("should have thrown an IAE above");  }  rangeSet.add(range);  return this;}  }
class C{  private void addText(String msg,boolean asUnicode){  if (asUnicode) {    addMultipart(NokiaItemType.TEXT_UNICODE,msg.getBytes(StandardCharsets.UTF_16BE));  } else {    addMultipart(NokiaItemType.TEXT_ISO_8859_1,msg.getBytes(StandardCharsets.ISO_8859_1));  }}  }
class C{  public CalendarIntervalTriggerImpl(){  super();}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public boolean initialise(ServletContext context){  this.servletContext=context;  initialised=true;  boolean ok=true;  for (int i=0; i < conditions.size(); i++) {    final Condition condition=(Condition)conditions.get(i);    condition.setRule(this);    if (!condition.initialise()) {      ok=false;    }  }  for (int i=0; i < runs.size(); i++) {    final Run run=(Run)runs.get(i);    if (!run.initialise(context)) {      ok=false;    }    if (run.isFilter()) {      log.debug("rule is a filtering rule");      filter=true;    }  }  for (int i=0; i < setAttributes.size(); i++) {    final SetAttribute setAttribute=(SetAttribute)setAttributes.get(i);    if (!setAttribute.initialise()) {      ok=false;    }  }  if (!isMatchTypeWildcard()) {    matchType=DEFAULT_MATCH_TYPE;  }  if (StringUtils.isBlank(from)) {    log.debug("rule's from is blank, setting to " + DEFAULT_RULE_FROM);    from=DEFAULT_RULE_FROM;  }  try {    if (isMatchTypeWildcard()) {      log.debug("rule match type is wildcard");      pattern=new WildcardPattern(from);    } else {      pattern=new RegexPattern(from,fromCaseSensitive);    }  } catch (  StringMatchingPatternSyntaxException e) {    addError("from (" + from + ") is an invalid expression - "+ e.getMessage());  }  if (StringUtils.isBlank(to) && setAttributes.size() == 0 && runs.size() == 0) {    addError("to is not valid because it is blank (it is allowed to be blank when there is a 'set' specified)");  } else   if ("null".equalsIgnoreCase(to)) {    stopFilterChainOnMatch=true;  } else   if ("-".equals(to)) {    noSubstitution=true;  } else   if (StringUtils.isBlank(to)) {    toEmpty=true;  } else   if (!StringUtils.isBlank(to)) {    if (BackReferenceReplacer.containsBackRef(to)) {      toContainsBackReference=true;    }    if (VariableReplacer.containsVariable(to)) {      toContainsVariable=true;    }    if (FunctionReplacer.containsFunction(to)) {      toContainsFunction=true;    }  }  if (ok) {    log.debug("loaded rule " + getFullDisplayName());  } else {    log.debug("failed to load rule");  }  if (errors.size() > 0) {    ok=false;  }  valid=ok;  return ok;}  }
class C{  private static void attemptRetryOnException(String logPrefix,Request<?> request,VolleyError exception) throws VolleyError {  RetryPolicy retryPolicy=request.getRetryPolicy();  int oldTimeout=request.getTimeoutMs();  try {    retryPolicy.retry(exception);  } catch (  VolleyError e) {    request.addMarker(String.format("%s-timeout-giveup [timeout=%s]",logPrefix,oldTimeout));    throw e;  }  request.addMarker(String.format("%s-retry [timeout=%s]",logPrefix,oldTimeout));}  }
class C{  private String createString(String f){  return "srcArray=" + srcArray + f+ "srcPos="+ srcPos+ f+ "srcPtr="+ srcPtr+ f+ "dstArray="+ dstArray+ f+ "dstPos="+ dstPos+ f+ "dstPtr="+ dstPtr+ f+ "extent="+ extent+ f+ "kind="+ cudaMemcpyKind.stringFor(kind);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:32.352 -0500",hash_original_method="42F15B8B44D9B8805537AB8032035046",hash_generated_method="406165FEC400D5ECDB795C083EF7D87D") private void enqueueInputEvent(Message msg,long when){  InputEventMessage inputMessage=InputEventMessage.obtain(msg);  if (mPendingInputEvents == null) {    mPendingInputEvents=inputMessage;  } else {    InputEventMessage currMessage=mPendingInputEvents;    while (currMessage.mNext != null) {      currMessage=currMessage.mNext;    }    currMessage.mNext=inputMessage;  }  sendEmptyMessageAtTime(PROCESS_INPUT_EVENTS,when);}  }
class C{  private JPanel createMemoryStatus(){  memStatus=new JProgressBar(0,100);  memStatus.setPreferredSize(new Dimension(100,15));  memStatus.setStringPainted(true);  JPanel memPanel=new JPanel(new FlowLayout(FlowLayout.RIGHT));  memPanel.add(memStatus);  new Thread(new MemoryStatusUpdater(memStatus)).start();  return memPanel;}  }
class C{  public Element createElement(SVGGeneratorContext generatorContext){  Element imageElement=generatorContext.getDOMFactory().createElementNS(SVG_NAMESPACE_URI,SVG_USE_TAG);  return imageElement;}  }
class C{  public void endVisit(SimpleName node){}  }
class C{  public void visitLookupSwitchInsn(Label dflt,int[] keys,Label[] labels){  if (mv != null) {    mv.visitLookupSwitchInsn(dflt,keys,labels);  }}  }
class C{  private void addProducedBindings(final TermNode t,final Set<IVariable<?>> producedBindings){  if (t instanceof VarNode) {    producedBindings.add(((VarNode)t).getValueExpression());  } else   if (t instanceof ConstantNode) {    final ConstantNode cNode=(ConstantNode)t;    final Constant<?> c=(Constant<?>)cNode.getValueExpression();    final IVariable<?> var=c.getVar();    if (var != null) {      producedBindings.add(var);    }  }}  }
class C{  private boolean notificationMatchesUserId(NotificationRecord r,int userId){  return userId == UserHandle.USER_ALL || r.getUserId() == UserHandle.USER_ALL || r.getUserId() == userId;}  }
class C{  public Enumeration oids(){  return ordering.elements();}  }
class C{  protected void threadStart(){  if (thread != null) {    return;  }  threadDone=false;  thread=new Thread(this,threadName);  thread.setDaemon(true);  thread.start();}  }
class C{  protected static String translateFileName(String fileName){  fileName=fileName.replace('\\','/');  if (fileName.startsWith("file:")) {    fileName=fileName.substring("file:".length());  }  return expandUserHomeDirectory(fileName);}  }
class C{  public void parse(final InputStream input,final CompressedXmlParserListener listener) throws IOException {  if (listener == null) {    throw new IllegalArgumentException("CompressedXmlParser Listener can' be null");  }  mListener=listener;  mData=new byte[input.available()];  input.read(mData);  input.close();  parseCompressedXml();}  }
class C{  @Override public int read() throws IOException {  return Streams.readSingleByte(this);}  }
class C{  private void updateDisplayOfUr92Count(){  Object[] messageArguments={numUr92,numUr92};  java.text.MessageFormat formatter=new java.text.MessageFormat("");  try {    formatter.applyPattern(rb.getString("LabelDeviceCountUR92"));    double[] pluralLimits={0,1,2};    String[] devicePlurals={rb.getString("LabelDeviceCountUR92Plural0"),rb.getString("LabelDeviceCountUR92Plural1"),rb.getString("LabelDeviceCountUR92Plural2")};    java.text.ChoiceFormat pluralForm=new java.text.ChoiceFormat(pluralLimits,devicePlurals);    java.text.Format[] messageFormats={java.text.NumberFormat.getInstance(),pluralForm};    formatter.setFormats(messageFormats);    String ur92CountString=formatter.format(messageArguments);    swingNumUr92Label.setText(ur92CountString);  } catch (  java.lang.Exception e) {    String s="Found " + numUr92 + " UR92(s)";    swingNumUr92Label.setText(s);  }  swingNumUr92Label.repaint();}  }
class C{  private void unscheduleInvalidTapNotification(){  mRunnableHandler.removeCallbacks(mHandleInvalidTapRunnable);  mIsWaitingForInvalidTapDetection=true;}  }
class C{  public CF10(){  this(10);}  }
class C{  static long first(long binAddr,GridUnsafeMemory mem){  return mem.readLong(binAddr);}  }
class C{  public SimpleColorMap(Color[] colorTable,double minLevel,double maxLevel,Color minColor,Color maxColor){  setColorTable(colorTable);  setLevels(minLevel,maxLevel,minColor,maxColor);}  }
class C{  public void testConstructorBytesException(){  byte aBytes[]={};  try {    new BigInteger(aBytes);    fail("NumberFormatException has not been caught");  } catch (  NumberFormatException e) {  }}  }
class C{  public String insertDocumentoVital(InfoBDocumentoVitalExtVO documentoVital){  documentoVital.setId(getGuid(documentoVital.getId()));  insertVO(TABLE_NAME,COL_DEFS,documentoVital);  return documentoVital.getId();}  }
class C{  public PTQuery_Partial HappenedBeforeJoin(String x,Tracepoint tracepoint) throws PTQueryException {  return AddHappenedBefore(this,x,PTQuery.From(tracepoint));}  }
class C{  public boolean add(E e){  if (offer(e))   return true; else   throw new IllegalStateException("Queue full");}  }
class C{  public int costInline(int thresh,Environment env,Context ctx){  int cost=2;  if (init != null) {    cost+=init.costInline(thresh,env,ctx);  }  if (cond != null) {    cost+=cond.costInline(thresh,env,ctx);  }  if (body != null) {    cost+=body.costInline(thresh,env,ctx);  }  if (inc != null) {    cost+=inc.costInline(thresh,env,ctx);  }  return cost;}  }
class C{  static ScenarioForEvalData createPlanfallMixed(ScenarioForEvalData nullfall){  ScenarioForEvalData planfall=nullfall.createDeepCopy();  Values planfallForOD=planfall.getByODRelation("BC");{    ValuesForAMode railValues=planfallForOD.getByMode(Mode.rail);    railValues.getByDemandSegment(DemandSegment.PV_NON_COMMERCIAL).incByEntry(Attribute.hrs,-4.);    double delta=90.;    railValues.getByDemandSegment(DemandSegment.PV_NON_COMMERCIAL).incByEntry(Attribute.XX,delta);    planfall.getByODRelation("BC").getByMode(Mode.road).getByDemandSegment(DemandSegment.PV_NON_COMMERCIAL).incByEntry(Attribute.XX,-delta / 2);  }  return planfall;}  }
class C{  public static String nextCode(){  return nextCode(new Date());}  }
class C{  public long arg_start(){  return Long.parseLong(fields[47]);}  }
class C{  public void pause(){  thread.suspend();}  }
class C{  public static Output buildOutput(){  Output output;  output=new Output(true);  output.addLog(ec.util.Log.D_STDOUT,false);  output.addLog(ec.util.Log.D_STDERR,true);  return output;}  }
class C{  public void prepare(FIXMessage message,CharSequence msgType){  message.reset();  message.addField(MsgType).setString(msgType);  prepare(message);}  }
class C{  public final int lastIndexOf(java.lang.CharSequence csq){  return lastIndexOf(csq,0);}  }
class C{  protected void init() throws ConfigurationException, LoggingException {  this.sqlEncoder=new SQLEncoder(logger);}  }
class C{  private static Instance createInstanceTemplate(String userEmail,String projectId,String zoneId,List<String> scopes){  Instance instance=new Instance();  instance.setMachineType(String.format(ENUMERATION_TEST_MACHINE_TYPE,projectId,zoneId));  NetworkInterface ifc=new NetworkInterface();  ifc.setNetwork(String.format(NETWORK_INTERFACE,projectId));  List<AccessConfig> configs=new ArrayList<>();  AccessConfig config=new AccessConfig();  config.setType(NETWORK_INTERFACE_CONFIG);  config.setName(NETWORK_ACCESS_CONFIG);  configs.add(config);  ifc.setAccessConfigs(configs);  instance.setNetworkInterfaces(Collections.singletonList(ifc));  AttachedDisk disk=new AttachedDisk();  disk.setBoot(true);  disk.setAutoDelete(true);  disk.setType(DISK_TYPE_PERSISTENT);  AttachedDiskInitializeParams params=new AttachedDiskInitializeParams();  params.setSourceImage(SOURCE_IMAGE);  params.setDiskType(String.format(DISK_TYPE,projectId,zoneId));  disk.setInitializeParams(params);  instance.setDisks(Collections.singletonList(disk));  ServiceAccount account=new ServiceAccount();  account.setEmail(userEmail);  account.setScopes(scopes);  instance.setServiceAccounts(Collections.singletonList(account));  return instance;}  }
class C{  private Cursor makePeopleCursor(CharSequence email) throws SQLException {  if (email == null) {    email="";  }  String[] pieces=TextUtils.split(email.toString(),",");  String piece;  if (pieces.length == 0) {    piece="";  } else {    piece=pieces[pieces.length - 1].trim();  }  return ((AndroidDatabaseResults)app.getDao(Person.class).queryRaw("SELECT rowid _id, * FROM people WHERE " + Person.ISBOT_FIELD + " = 0 AND "+ Person.ISACTIVE_FIELD+ " = 1 AND "+ Person.EMAIL_FIELD+ " LIKE ? ESCAPE '\\' ORDER BY "+ Person.NAME_FIELD+ " COLLATE NOCASE",DatabaseHelper.likeEscape(piece) + "%").closeableIterator().getRawResults()).getRawCursor();}  }
class C{  public static boolean isParentOf(Node node,Node parentNode){  if (node == null || parentNode == null || node.getParentNode() != parentNode) {    return false;  }  return true;}  }
class C{  public void whisper(String user,String message){  checkSocket();  this.socket.sendTextMessage("whisper:" + user + ": "+ message);}  }
class C{  private void addTestPackage(List<TestPackage> testList,ITestPackageDef testPkgDef){  IRemoteTest testForPackage=testPkgDef.createTest(mCtsBuild.getTestCasesDir());  if (testForPackage != null) {    Collection<TestIdentifier> knownTests=testPkgDef.getTests();    testList.add(new TestPackage(testPkgDef,testForPackage,knownTests));  }}  }
class C{  protected void handleNodeAttributes(Object node,Map attributes){  if (node == null) {    return;  }  for (  Closure attrDelegate : getProxyBuilder().getAttributeDelegates()) {    FactoryBuilderSupport builder=this;    if (attrDelegate.getOwner() instanceof FactoryBuilderSupport) {      builder=(FactoryBuilderSupport)attrDelegate.getOwner();    } else     if (attrDelegate.getDelegate() instanceof FactoryBuilderSupport) {      builder=(FactoryBuilderSupport)attrDelegate.getDelegate();    }    attrDelegate.call(new Object[]{builder,node,attributes});  }  if (getProxyBuilder().getCurrentFactory().onHandleNodeAttributes(getProxyBuilder().getChildBuilder(),node,attributes)) {    getProxyBuilder().setNodeAttributes(node,attributes);  }}  }
class C{  private boolean gpsPreferenceEnabled(){  SharedPreferences sharedPref=PreferenceManager.getDefaultSharedPreferences(context);  boolean gpsPref=sharedPref.getBoolean("allowGps",false);  Log.d(TAG,"Gps pref set to: " + gpsPref);  return gpsPref;}  }
class C{  @Override protected EClass eStaticClass(){  return DomPackage.Literals.TAG_TITLE;}  }
class C{  private static synchronized void initKeychainAuthenticatedVault(Context context) throws GeneralSecurityException {  if (SharedPreferenceVaultFactory.canUseKeychainAuthentication(context) && SharedPreferenceVaultRegistry.getInstance().getVault(KEYCHAIN_AUTHENTICATED_KEY_INDEX) == null) {    SharedPreferenceVault sharedPreferenceVault=SharedPreferenceVaultFactory.getKeychainAuthenticatedAes256Vault(context,KEYCHAIN_AUTHENTICATED_PREF_FILE_NAME,KEYCHAIN_AUTHENTICATED_KEY_ALIAS,KEYCHAIN_AUTHENTICATED_AUTH_DURATION);    SharedPreferenceVaultRegistry.getInstance().addVault(KEYCHAIN_AUTHENTICATED_KEY_INDEX,KEYCHAIN_AUTHENTICATED_PREF_FILE_NAME,KEYCHAIN_AUTHENTICATED_KEY_ALIAS,sharedPreferenceVault);  }}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"CPS");  long baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);  instructions.add(ReilHelpers.createUnknown(baseOffset));}  }
class C{  public Java2DRenderer(String url,int width,int height){  this(url,url,width,height);}  }
class C{  public static AISMerge newForModifyTable(AISCloner aisCloner,NameGenerator generator,AkibanInformationSchema sourceAIS,Collection<ChangedTableDescription> alteredTables){  List<JoinChange> changedJoins=new ArrayList<>();  Map<IndexName,IndexInfo> indexesToFix=new HashMap<>();  List<IdentityInfo> identityToFix=new ArrayList<>();  Set<TableName> groupsToClear=new HashSet<>();  AkibanInformationSchema targetAIS=copyAISForModify(aisCloner,sourceAIS,indexesToFix,changedJoins,identityToFix,alteredTables,groupsToClear);  return new AISMerge(aisCloner,generator,targetAIS,null,MergeType.MODIFY_TABLE,changedJoins,indexesToFix,identityToFix,groupsToClear);}  }
class C{  private void beforeKey() throws JSONException {  Scope context=peek();  if (context == Scope.NONEMPTY_OBJECT) {    out.append(',');  } else   if (context != Scope.EMPTY_OBJECT) {    throw new JSONException("Nesting problem");  }  newline();  replaceTop(Scope.DANGLING_KEY);}  }
class C{  public static long popParameterLong(){  return parametersLong.pop();}  }
class C{  private Figure readLineElement(IXMLElement elem) throws IOException {  HashMap<AttributeKey,Object> a=new HashMap<AttributeKey,Object>();  readCoreAttributes(elem,a);  readTransformAttribute(elem,a);  readOpacityAttribute(elem,a);  readLineAttributes(elem,a);  if (FILL_COLOR.get(a) != null && STROKE_COLOR.get(a) == null) {    STROKE_COLOR.put(a,FILL_COLOR.get(a));  }  if (FILL_GRADIENT.get(a) != null && STROKE_GRADIENT.get(a) == null) {    STROKE_GRADIENT.put(a,FILL_GRADIENT.get(a));  }  FILL_COLOR.put(a,null);  FILL_GRADIENT.put(a,null);  double x1=toNumber(elem,readAttribute(elem,"x1","0"));  double y1=toNumber(elem,readAttribute(elem,"y1","0"));  double x2=toNumber(elem,readAttribute(elem,"x2","0"));  double y2=toNumber(elem,readAttribute(elem,"y2","0"));  Figure figure=factory.createLine(x1,y1,x2,y2,a);  elementObjects.put(elem,figure);  return figure;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (flaggedUsageMarkingFinished: ");  result.append(flaggedUsageMarkingFinished);  result.append(')');  return result.toString();}  }
class C{  @Override public byte[] srandmember(final byte[] key){  checkIsInMultiOrPipeline();  client.srandmember(key);  return client.getBinaryBulkReply();}  }
class C{  public void requestRedraw(){  this.firePropertyChange(AVKey.REPAINT,null,null);}  }
class C{  protected Element addElement(Element parent,String name,String classname,boolean primitive,int array,boolean isnull){  Element result;  if (parent == null) {    result=m_Document.getDocument().getDocumentElement();  } else {    result=(Element)parent.appendChild(m_Document.getDocument().createElement(TAG_OBJECT));  }  result.setAttribute(ATT_NAME,name);  result.setAttribute(ATT_CLASS,classname);  if (!booleanToString(primitive).equals(ATT_PRIMITIVE_DEFAULT)) {    result.setAttribute(ATT_PRIMITIVE,booleanToString(primitive));  }  if (array > 1) {    result.setAttribute(ATT_ARRAY,Integer.toString(array));  } else {    if (!booleanToString(array == 1).equals(ATT_ARRAY_DEFAULT)) {      result.setAttribute(ATT_ARRAY,booleanToString(array == 1));    }  }  if (!booleanToString(isnull).equals(ATT_NULL_DEFAULT)) {    result.setAttribute(ATT_NULL,booleanToString(isnull));  }  return result;}  }
class C{  public static boolean isGenerateFileSameAsCatalogFile(String filename){  CachedFile generateFile=CachedFileManager.addCachedFile(CatalogManager.getGenerateFolder().getAbsolutePath() + File.separator + filename);  CachedFile catalogFile=CachedFileManager.addCachedFile(CatalogManager.getCatalogFolder().getAbsolutePath() + File.separator + filename);  assert generateFile != null;  assert catalogFile != null;  return isSourceFileSameAsTargetFile(generateFile,catalogFile);}  }
class C{  public final int _exptype2Type(int exptype){  if (NULL != exptype)   return m_extendedTypes[exptype].getNodeType(); else   return NULL;}  }
class C{  public InvalidStaticWriteAccessDescription(IEObjectDescription delegate,String memberDefiningTypeName,String aliasOfMemberDefiningType){  super(delegate);  this.memberDefTypeName=memberDefiningTypeName;  this.aliasOfMemberDefiningType=aliasOfMemberDefiningType;}  }
class C{  public void closeCajaExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  removeInTemporalSession(request,TransferenciasConstants.CAJA_MAINTAIN_VISITADOS_KEY);  removeInTemporalSession(request,TransferenciasConstants.CAJA_VISITADOS_KEY);  goBackExecuteLogic(mappings,form,request,response);}  }
class C{  public boolean contains(final AbstractInsnNode insn){  AbstractInsnNode i=first;  while (i != null && i != insn) {    i=i.next;  }  return i != null;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public boolean startsWith(String string){  if (string == null)   return false;  int strlen=string.length();  if (_length < strlen)   return false;  char[] buffer=_buffer;  int offset=_offset;  while (--strlen >= 0) {    if (buffer[offset + strlen] != string.charAt(strlen))     return false;  }  return true;}  }
class C{  public RegularTimePeriod previous(){  return new CandlePeriod(this.getStart().minusSeconds(secondsLength),secondsLength);}  }
class C{  private static Capitalization containsAt(String s,int index,String... substrings){  for (  String substring : substrings) {    if (index + substring.length() <= s.length()) {      boolean found=true;      Boolean up1=null;      Boolean up2=null;      for (int i=0; i < substring.length(); i++) {        char c1=s.charAt(index + i);        char c2=substring.charAt(i);        if (c1 != c2 && Character.toUpperCase(c1) != Character.toUpperCase(c2)) {          found=false;          break;        } else         if (Character.isLetter(c1)) {          if (up1 == null) {            up1=Character.isUpperCase(c1);          } else           if (up2 == null) {            up2=Character.isUpperCase(c1);          }        }      }      if (found) {        return Capitalization.toCapitalization(up1,up2);      }    }  }  return null;}  }
class C{  private void initializePopulationND(int populationSize){  int N=50;  int numberOfObjectives=problem.getNumberOfObjectives();  List<double[]> weights=new ArrayList<double[]>(populationSize * N);  for (int i=0; i < populationSize * N; i++) {    double[] weight=new double[numberOfObjectives];    for (int j=0; j < numberOfObjectives; j++) {      weight[j]=PRNG.nextDouble();    }    double sum=StatUtils.sum(weight);    for (int j=0; j < numberOfObjectives; j++) {      weight[j]/=sum;    }    weights.add(weight);  }  population=new ArrayList<Individual>(populationSize);  for (int i=0; i < numberOfObjectives; i++) {    double[] weight=new double[numberOfObjectives];    weight[i]=1.0;    population.add(new Individual(weight));  }  while (population.size() < populationSize) {    double[] weight=null;    double distance=Double.NEGATIVE_INFINITY;    for (int i=0; i < weights.size(); i++) {      double d=Double.POSITIVE_INFINITY;      for (int j=0; j < population.size(); j++) {        d=Math.min(d,MathArrays.distance(weights.get(i),population.get(j).getWeights()));      }      if (d > distance) {        weight=weights.get(i);        distance=d;      }    }    population.add(new Individual(weight));    weights.remove(weight);  }}  }
class C{  public final void length(int newLength){  if (newLength < 0)   throw new IndexOutOfBoundsException("illegal argument");  ensureCapacity(newLength);  super.length(newLength);}  }
class C{  public void add(String category,String[] titles,double[] values){  mCategories.add(category);  mTitles.add(titles);  mValues.add(values);}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="FE_FLOATING_POINT_EQUALITY",justification="equality is specifically 'Unchanged' here") public void changeLocoSpeed(DccThrottle t,Block blk,float speed){  if (blk == referenced && speed == desiredSpeedStep) {    return;  }  float blockLength=blk.getLengthMm();  if (blk == referenced) {    distanceRemaining=distanceRemaining - getDistanceTravelled(_throttle.getIsForward(),_throttle.getSpeedSetting(),((float)(System.nanoTime() - lastTimeTimerStarted) / 1000000000));    blockLength=distanceRemaining;    log.debug("Block passed is the same as we are currently processing");  } else {    referenced=blk;  }  changeLocoSpeed(t,blockLength,speed);}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  Person.registerMetadata(registry);  registry.build(KEY);}  }
class C{  @Override protected MBeanNotificationInfo[] createMBeanNotificationInfo(){  MBeanNotificationInfo[] notificationsInfo=new MBeanNotificationInfo[MAX_NOTIFICATIONS_COUNT];  String[] notificationTypes=new String[]{AdminDistributedSystemJmxImpl.NOTIF_MEMBER_JOINED};  notificationsInfo[0]=new MBeanNotificationInfo(notificationTypes,Notification.class.getName(),"A GemFire manager, cache, or other member has joined this distributed system.");  notificationTypes=new String[]{AdminDistributedSystemJmxImpl.NOTIF_MEMBER_LEFT};  notificationsInfo[1]=new MBeanNotificationInfo(notificationTypes,Notification.class.getName(),"A GemFire manager, cache, or other member has left the distributed system.");  notificationTypes=new String[]{AdminDistributedSystemJmxImpl.NOTIF_MEMBER_CRASHED};  notificationsInfo[2]=new MBeanNotificationInfo(notificationTypes,Notification.class.getName(),"A member of this distributed system has crashed instead of leaving cleanly.");  notificationTypes=new String[]{AdminDistributedSystemJmxImpl.NOTIF_ALERT};  notificationsInfo[3]=new MBeanNotificationInfo(notificationTypes,Notification.class.getName(),"A member of this distributed system has generated an alert.");  notificationTypes=new String[]{AdminDistributedSystemJmxImpl.NOTIF_ADMIN_SYSTEM_DISCONNECT};  notificationsInfo[4]=new MBeanNotificationInfo(notificationTypes,Notification.class.getName(),"A GemFire manager, cache, or other member has joined this distributed system.");  notificationTypes=new String[]{SystemMemberJmx.NOTIF_CACHE_CREATED};  notificationsInfo[5]=new MBeanNotificationInfo(notificationTypes,Notification.class.getName(),"A cache got created on a member of this distributed system.");  notificationTypes=new String[]{SystemMemberJmx.NOTIF_CACHE_CLOSED};  notificationsInfo[6]=new MBeanNotificationInfo(notificationTypes,Notification.class.getName(),"A cache is closed on a member of this distributed system.");  notificationTypes=new String[]{SystemMemberJmx.NOTIF_REGION_CREATED};  notificationsInfo[7]=new MBeanNotificationInfo(notificationTypes,Notification.class.getName(),"A region is created in a cache on a member of this distributed system.");  notificationTypes=new String[]{SystemMemberJmx.NOTIF_REGION_LOST};  notificationsInfo[8]=new MBeanNotificationInfo(notificationTypes,Notification.class.getName(),"A region was removed from a cache on a member of this distributed system.");  return notificationsInfo;}  }
class C{  static public void dumpManifest(String fileName){  Manifest mf=getManifest(fileName);  if (mf == null) {    System.out.println("No Jar file: " + fileName);    return;  }  System.out.println(mf.getEntries());}  }
class C{  public void endCompose(StylesheetRoot sroot) throws TransformerException {  StylesheetRoot.ComposeState cstate=sroot.getComposeState();  cstate.popStackMark();}  }
class C{  public RequestScope(String path,JsonApiDocument jsonApiDocument,DataStoreTransaction transaction,User user,EntityDictionary dictionary,JsonApiMapper mapper,AuditLogger auditLogger,MultivaluedMap<String,String> queryParams,SecurityMode securityMode,Function<RequestScope,PermissionExecutor> permissionExecutorGenerator,MultipleFilterDialect filterDialect,boolean useFilterExpressions){  this.path=path;  this.jsonApiDocument=jsonApiDocument;  this.transaction=transaction;  this.user=user;  this.dictionary=dictionary;  this.mapper=mapper;  this.auditLogger=auditLogger;  this.securityMode=securityMode;  this.filterDialect=filterDialect;  this.useFilterExpressions=useFilterExpressions;  this.globalFilterExpression=null;  this.expressionsByType=new HashMap<>();  this.objectEntityCache=new ObjectEntityCache();  this.newPersistentResources=new LinkedHashSet<>();  this.dirtyResources=new LinkedHashSet<>();  this.commitTriggers=new LinkedHashSet<>();  this.permissionExecutor=(permissionExecutorGenerator == null) ? new ActivePermissionExecutor(this) : permissionExecutorGenerator.apply(this);  this.queryParams=(queryParams == null || queryParams.size() == 0) ? Optional.empty() : Optional.of(queryParams);  if (this.queryParams.isPresent()) {    MultivaluedMap filterParams=getFilterParams(queryParams);    String errorMessage="";    if (!filterParams.isEmpty()) {      try {        globalFilterExpression=filterDialect.parseGlobalExpression(path,filterParams);      } catch (      ParseException e) {        errorMessage=e.getMessage();      }      try {        expressionsByType.putAll(filterDialect.parseTypedExpression(path,filterParams));      } catch (      ParseException e) {        if (globalFilterExpression == null) {          if (errorMessage.isEmpty()) {            errorMessage=e.getMessage();          } else           if (!errorMessage.equals(e.getMessage())) {            errorMessage=errorMessage + "\n" + e.getMessage();          }          throw new InvalidPredicateException(errorMessage);        }      }    }    this.sparseFields=parseSparseFields(queryParams);    this.sorting=Sorting.parseQueryParams(queryParams);    this.pagination=Pagination.parseQueryParams(queryParams);  } else {    this.sparseFields=Collections.emptyMap();    this.sorting=Sorting.getDefaultEmptyInstance();    this.pagination=Pagination.getDefaultPagination();  }  if (transaction instanceof RequestScopedTransaction) {    ((RequestScopedTransaction)transaction).setRequestScope(this);  }}  }
class C{  @Override public boolean accept(final IScope scope,final IShape source,final IShape a){  final IAgent agent=a.getAgent();  if (agent == null) {    return false;  }  if (agent.getPopulation() != this) {    return false;  }  if (agent.dead()) {    return false;  }  final IAgent as=source.getAgent();  if (agent == as) {    return false;  }  return true;}  }
class C{  public static boolean isNoCacheEqual(Set<Feature> feats_1,Set<Feature> feats_2){  ArrayList<Feature> feats_long;  ArrayList<Feature> feats_short;  if (feats_1.size() > feats_2.size()) {    feats_long=new ArrayList(feats_1);    feats_short=new ArrayList(feats_2);  } else   if (feats_1.size() < feats_2.size()) {    feats_long=new ArrayList(feats_2);    feats_short=new ArrayList(feats_1);  } else   return isEqual(feats_1,feats_2);  boolean hold=false;  ArrayList<String> splited_long;  ArrayList<String> splited_short=null;  for (int i=0, j=0; i < feats_short.size(); ) {    if ((feats_long.size() - j - 1) < (feats_short.size() - i - 1))     return false;    if (!hold) {      splited_long=new ArrayList(Arrays.asList(feats_long.get(j).getName().split(":")));      splited_short=new ArrayList(Arrays.asList(feats_short.get(i).getName().split(":")));      splited_long.removeAll(Collections.singleton(""));      splited_short.removeAll(Collections.singleton(""));    } else {      splited_long=new ArrayList(Arrays.asList(feats_long.get(j).getName().split(":")));      splited_long.removeAll(Collections.singleton(""));    }    for (int k=1; k < splited_short.size(); k++) {      if (splited_short.get(k).equals(splited_long.get(k))) {        hold=false;        continue;      } else       if (splited_short.get(k).equals("#word#") && splited_long.get(k).equals("#wd")) {        hold=false;        continue;      } else {        hold=true;        break;      }    }    if (!hold) {      i++;      j++;    } else {      j++;    }  }  return !hold;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean next(){  this.position=this.buffer.position();  if (!buffer.hasRemaining()) {    return false;  }  this.nextCalled=true;  byte tsTypeFlag=buffer.get();  if (GTSEncoder.FLAGS_ENCRYPTED == (tsTypeFlag & GTSEncoder.FLAGS_MASK_ENCRYPTED)) {    int enclen=(int)Varint.decodeUnsignedLong(buffer);    if (null == wrappingKey) {      buffer.position(buffer.position() + enclen);      return next();    }    byte[] encrypted=new byte[enclen];    buffer.get(encrypted);    AESWrapEngine engine=new AESWrapEngine();    CipherParameters params=new KeyParameter(this.wrappingKey);    engine.init(false,params);    try {      byte[] decrypted=engine.unwrap(encrypted,0,encrypted.length);      PKCS7Padding padding=new PKCS7Padding();      int padcount=padding.padCount(decrypted);      this.buffer.insert(decrypted,0,decrypted.length - padcount);    } catch (    InvalidCipherTextException icte) {    }    return next();  }  byte locElevFlag=0x0;  if (GTSEncoder.FLAGS_CONTINUATION == (tsTypeFlag & GTSEncoder.FLAGS_CONTINUATION)) {    if (!buffer.hasRemaining()) {      return false;    }    locElevFlag=buffer.get();  }switch (tsTypeFlag & GTSEncoder.FLAGS_MASK_TIMESTAMP) {case GTSEncoder.FLAGS_TIMESTAMP_RAW_ABSOLUTE:{      ByteOrder order=buffer.order();      buffer.order(ByteOrder.BIG_ENDIAN);      previousLastTimestamp=lastTimestamp;      lastTimestamp=buffer.getLong();      buffer.order(order);    }  break;case GTSEncoder.FLAGS_TIMESTAMP_EQUALS_BASE:previousLastTimestamp=lastTimestamp;lastTimestamp=baseTimestamp;break;case GTSEncoder.FLAGS_TIMESTAMP_ZIGZAG_DELTA_BASE:{long delta=Varint.decodeSignedLong(buffer);previousLastTimestamp=lastTimestamp;lastTimestamp=baseTimestamp + delta;}break;case GTSEncoder.FLAGS_TIMESTAMP_ZIGZAG_DELTA_PREVIOUS:{long delta=Varint.decodeSignedLong(buffer);previousLastTimestamp=lastTimestamp;lastTimestamp=lastTimestamp + delta;}break;default :throw new RuntimeException("Invalid timestamp format.");}if (GTSEncoder.FLAGS_LOCATION == (locElevFlag & GTSEncoder.FLAGS_LOCATION)) {if (GTSEncoder.FLAGS_LOCATION_IDENTICAL != (locElevFlag & GTSEncoder.FLAGS_LOCATION_IDENTICAL)) {if (GTSEncoder.FLAGS_LOCATION_GEOXPPOINT_ZIGZAG_DELTA == (locElevFlag & GTSEncoder.FLAGS_LOCATION_GEOXPPOINT_ZIGZAG_DELTA)) {long delta=Varint.decodeSignedLong(buffer);previousLastGeoXPPoint=lastGeoXPPoint;lastGeoXPPoint=lastGeoXPPoint + delta;} else {ByteOrder order=buffer.order();buffer.order(ByteOrder.BIG_ENDIAN);previousLastGeoXPPoint=lastGeoXPPoint;lastGeoXPPoint=buffer.getLong();buffer.order(order);}}} else {previousLastGeoXPPoint=lastGeoXPPoint;lastGeoXPPoint=GeoTimeSerie.NO_LOCATION;}if (GTSEncoder.FLAGS_ELEVATION == (locElevFlag & GTSEncoder.FLAGS_ELEVATION)) {if (GTSEncoder.FLAGS_ELEVATION_IDENTICAL != (locElevFlag & GTSEncoder.FLAGS_ELEVATION_IDENTICAL)) {boolean zigzag=GTSEncoder.FLAGS_ELEVATION_ZIGZAG == (locElevFlag & GTSEncoder.FLAGS_ELEVATION_ZIGZAG);long encoded;if (zigzag) {encoded=Varint.decodeSignedLong(buffer);} else {ByteOrder order=buffer.order();buffer.order(ByteOrder.BIG_ENDIAN);encoded=buffer.getLong();buffer.order(order);}if (GTSEncoder.FLAGS_ELEVATION_DELTA_PREVIOUS == (locElevFlag & GTSEncoder.FLAGS_ELEVATION_DELTA_PREVIOUS)) {previousLastElevation=lastElevation;lastElevation=lastElevation + encoded;} else {previousLastElevation=lastElevation;lastElevation=encoded;}}} else {previousLastElevation=lastElevation;lastElevation=GeoTimeSerie.NO_ELEVATION;}switch (tsTypeFlag & GTSEncoder.FLAGS_MASK_TYPE) {case GTSEncoder.FLAGS_TYPE_LONG:lastType=TYPE.LONG;if (GTSEncoder.FLAGS_VALUE_IDENTICAL != (tsTypeFlag & GTSEncoder.FLAGS_VALUE_IDENTICAL)) {long encoded;if (GTSEncoder.FLAGS_LONG_ZIGZAG == (tsTypeFlag & GTSEncoder.FLAGS_LONG_ZIGZAG)) {encoded=Varint.decodeSignedLong(buffer);} else {ByteOrder order=buffer.order();buffer.order(ByteOrder.BIG_ENDIAN);encoded=buffer.getLong();buffer.order(order);}if (GTSEncoder.FLAGS_LONG_DELTA_PREVIOUS == (tsTypeFlag & GTSEncoder.FLAGS_LONG_DELTA_PREVIOUS)) {previousLastLongValue=lastLongValue;lastLongValue=lastLongValue + encoded;} else {previousLastLongValue=lastLongValue;lastLongValue=encoded;}}break;case GTSEncoder.FLAGS_TYPE_DOUBLE:lastType=TYPE.DOUBLE;if (GTSEncoder.FLAGS_VALUE_IDENTICAL != (tsTypeFlag & GTSEncoder.FLAGS_VALUE_IDENTICAL)) {if (GTSEncoder.FLAGS_DOUBLE_IEEE754 == (tsTypeFlag & GTSEncoder.FLAGS_DOUBLE_IEEE754)) {ByteOrder order=buffer.order();buffer.order(ByteOrder.BIG_ENDIAN);previousLastDoubleValue=lastDoubleValue;lastDoubleValue=buffer.getDouble();previousLastBDValue=lastBDValue;lastBDValue=null;buffer.order(order);} else {int scale=buffer.get();long unscaled=Varint.decodeSignedLong(buffer);previousLastBDValue=lastBDValue;lastBDValue=new BigDecimal(new BigInteger(Long.toString(unscaled)),scale);}}break;case GTSEncoder.FLAGS_TYPE_STRING:lastType=TYPE.STRING;if (GTSEncoder.FLAGS_VALUE_IDENTICAL != (tsTypeFlag & GTSEncoder.FLAGS_VALUE_IDENTICAL)) {long len=Varint.decodeUnsignedLong(buffer);if (len > buffer.remaining()) {throw new RuntimeException("Invalid string length.");}byte[] utf8=new byte[(int)len];buffer.get(utf8);previousLastStringValue=lastStringValue;lastStringValue=new String(utf8,Charsets.UTF_8);}break;case GTSEncoder.FLAGS_TYPE_BOOLEAN:if (GTSEncoder.FLAGS_DELETE_MARKER == (tsTypeFlag & GTSEncoder.FLAGS_MASK_TYPE_FLAGS)) {lastType=TYPE.UNDEFINED;} else {lastType=TYPE.BOOLEAN;if (GTSEncoder.FLAGS_BOOLEAN_VALUE_TRUE == (tsTypeFlag & GTSEncoder.FLAGS_MASK_TYPE_FLAGS)) {lastBooleanValue=true;} else if (GTSEncoder.FLAGS_BOOLEAN_VALUE_FALSE == (tsTypeFlag & GTSEncoder.FLAGS_MASK_TYPE_FLAGS)) {lastBooleanValue=false;} else {throw new RuntimeException("Invalid boolean value.");}}break;default :throw new RuntimeException("Invalid type encountered!");}return true;}  }
class C{  protected void fireValueChanged(int firstIndex,int lastIndex){  fireValueChanged(firstIndex,lastIndex,getValueIsAdjusting());}  }
class C{  public static File selectPath(Iterable<? extends File> paths,String file){  file=absoluteFile(new File(file)).getPath();  int srcDirLength=0;  File srcDirFile=null;  for (  File prefixFile : paths) {    String absPrefix=absoluteFile(prefixFile).getPath() + File.separatorChar;    if (file.startsWith(absPrefix) && absPrefix.length() > srcDirLength) {      srcDirLength=absPrefix.length();      srcDirFile=prefixFile;    }  }  return srcDirFile;}  }
class C{  public LogisticRegression2(DataSet dataSet){  setRows(new int[dataSet.getNumRows()]);  for (int i=0; i < getRows().length; i++)   getRows()[i]=i;}  }
class C{  private void openContextMenu(MouseEvent e){  if (e.isPopupTrigger()) {    User user=getUser(e);    if (user != null) {      UserContextMenu m=new UserContextMenu(user,contextMenuListener);      m.show(this,e.getX(),e.getY());    }  }}  }
class C{  public boolean hasAttribute(String name){  return (node.getAttributes().getNamedItem(name) != null);}  }
class C{  public void scheduleUpdate(double simTime){  scheduledUpdates.addUpdate(simTime);}  }
class C{  public GeneratorEntry createGeneratorEntry(){  GeneratorEntryImpl generatorEntry=new GeneratorEntryImpl();  return generatorEntry;}  }
class C{  public void reset(){  if (text != null) {    text.reset();    NormalizerBase.Mode mode=CollatorUtilities.toNormalizerMode(owner.getDecomposition());    text.setMode(mode);  }  buffer=null;  expIndex=0;  swapOrder=0;}  }
class C{  public Object remove(Object key){  key=convertKey(key);  int hashCode=hash(key);  int index=hashIndex(hashCode,data.length);  HashEntry entry=data[index];  HashEntry previous=null;  while (entry != null) {    if (entry.hashCode == hashCode && isEqualKey(key,entry.key)) {      Object oldValue=entry.getValue();      removeMapping(entry,index,previous);      return oldValue;    }    previous=entry;    entry=entry.next;  }  return null;}  }
class C{  private static int checkIdentifier(final String signature,int pos){  if (!Character.isJavaIdentifierStart(getChar(signature,pos))) {    throw new IllegalArgumentException(signature + ": identifier expected at index " + pos);  }  ++pos;  while (Character.isJavaIdentifierPart(getChar(signature,pos))) {    ++pos;  }  return pos;}  }
class C{  public void saveToXmlFile() throws KeyStoreException, NoSuchAlgorithmException, CertificateException, IOException {  FileOutputStream writeStream=new FileOutputStream(this._keyStoreFilePath);  try {    _keyStore.store(writeStream,this._keyStorePwd.toCharArray());  }  finally {    writeStream.close();  }}  }
class C{  @Override public void onCreate(){  super.onCreate();  if (BuildConfig.DEBUG) {    Timber.plant(new Timber.DebugTree());    StrictMode.setVmPolicy(new StrictMode.VmPolicy.Builder().detectAll().penaltyLog().build());    StrictMode.ThreadPolicy.Builder threadPolicyBuilder=new StrictMode.ThreadPolicy.Builder().detectAll().penaltyLog();    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {      threadPolicyBuilder.penaltyDeathOnNetwork();    }    StrictMode.setThreadPolicy(threadPolicyBuilder.build());  }}  }
class C{  @Override public boolean adjustEntry(MkMaxEntry entry,DBID routingObjectID,double parentDistance,AbstractMTree<O,MkMaxTreeNode<O>,MkMaxEntry,?> mTree){  super.adjustEntry(entry,routingObjectID,parentDistance,mTree);  entry.setKnnDistance(kNNDistance());  return true;}  }
class C{  public static List<ISetting<?>> createSettingListFromFields(final Class<?> settingCollectionClass){  final List<ISetting<?>> settingList=new ArrayList<>();  for (  final Field field : settingCollectionClass.getDeclaredFields()) {    if (!ISetting.class.isAssignableFrom(field.getType()))     continue;    final ISetting<?> setting;    try {      setting=(ISetting<?>)field.get(settingCollectionClass);    } catch (    final IllegalArgumentException|IllegalAccessException e) {      LEnv.LOGGER.error("Failed to get setting field!",e);      continue;    }    if (setting instanceof INodeSetting)     continue;    settingList.add(setting);  }  return settingList;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.TEMPLATE_SEGMENT__RAW_VALUE:    return RAW_VALUE_EDEFAULT == null ? rawValue != null : !RAW_VALUE_EDEFAULT.equals(rawValue);}return super.eIsSet(featureID);}  }
class C{  public String toString(){  try {    Iterator keys=keys();    StringBuffer sb=new StringBuffer("{");    while (keys.hasNext()) {      if (sb.length() > 1) {        sb.append(',');      }      Object o=keys.next();      sb.append(quote(o.toString()));      sb.append(':');      sb.append(valueToString(this.map.get(o)));    }    sb.append('}');    return sb.toString();  } catch (  Exception e) {    return null;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:47.290 -0500",hash_original_method="C25B69CBC1412EAEFB170FBF9B530EF5",hash_generated_method="AD0F03654918E48BE3984210F2815FEB") public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("ContentDispositionParser.parse");  try {    headerName(TokenTypes.CONTENT_DISPOSITION);    ContentDisposition cd=new ContentDisposition();    cd.setHeaderName(SIPHeaderNames.CONTENT_DISPOSITION);    this.lexer.SPorHT();    this.lexer.match(TokenTypes.ID);    Token token=lexer.getNextToken();    cd.setDispositionType(token.getTokenValue());    this.lexer.SPorHT();    super.parse(cd);    this.lexer.SPorHT();    this.lexer.match('\n');    return cd;  } catch (  ParseException ex) {    throw createParseException(ex.getMessage());  } finally {    if (debug)     dbg_leave("ContentDispositionParser.parse");  }}  }
class C{  public boolean isValidName(){  String _name=this.getName();  boolean _equals=Objects.equal("prototype",_name);  if (_equals) {    return false;  }  return true;}  }
class C{  private void _writeInt(final int value) throws IOException {  this.outStream.writeInt(value,this.byteOrder);}  }
class C{  public HasParentQueryBuilder scoreMode(String scoreMode){  this.scoreMode=scoreMode;  return this;}  }
class C{  private void resetBlockletProcessingCount(){  blockletProcessingCount.set(0);}  }
class C{  private void initializeTable(int capacity){  this.table=new Object[capacity * 2];  this.mask=table.length - 1;  this.clean=0;  this.maximumLoad=capacity * 2 / 3;}  }
class C{  @OnMessage public void onMessage(final String message){}  }
class C{  public final void printQuotedSymbol(CharSequence text) throws IOException {  if (text == null) {    appendAscii("null.symbol");  } else   if (text.length() == 0) {    throw new EmptySymbolException();  } else {    appendAscii('\'');    printCodePoints(text,SYMBOL_ESCAPE_CODES);    appendAscii('\'');  }}  }
class C{  @Override public String isValid(String newText){  int len=newText.length();  return null;}  }
class C{  public final void print(char[] buffer) throws IOException {  print(buffer,0,buffer.length);}  }
class C{  private void log(String message){  if (mDebug) {    Log.d(TAG,message);  }}  }
class C{  public static BufferedInputStream newInputStream(URL url) throws MalformedURLException, IOException {  return new BufferedInputStream(configuredInputStream(null,url));}  }
class C{  public boolean render(InternalContextAdapter context,Writer writer,Node node) throws IOException, MethodInvocationException, ResourceNotFoundException, ParseErrorException {  Object listObject=node.jjtGetChild(2).value(context);  if (listObject == null)   return false;  Iterator i=null;  try {    i=rsvc.getUberspect().getIterator(listObject,uberInfo);  } catch (  Exception ee) {    System.out.println(ee);  }  if (i == null) {    return false;  }  int counter=counterInitialValue;  Object o=context.get(elementKey);  Object ctr=context.get(counterName);  while (i.hasNext()) {    context.put(counterName,new Integer(counter));    context.put(elementKey,i.next());    node.jjtGetChild(3).render(context,writer);    counter++;  }  if (ctr != null) {    context.put(counterName,ctr);  } else {    context.remove(counterName);  }  if (o != null) {    context.put(elementKey,o);  } else {    context.remove(elementKey);  }  return true;}  }
class C{  public void countTilesOfSegments(){  for (  String fileName : allFiles) {    TiledMap map;    TmxMapLoader mapLoader;    mapLoader=new TmxMapLoader();    map=mapLoader.load(fileName);    totalTiles+=map.getProperties().get("width",Integer.class);  }}  }
class C{  public Presence(Type type,String status,int priority,Mode mode){  setType(type);  setStatus(status);  setPriority(priority);  setMode(mode);}  }
class C{  public static DimensionConstrain createMaxDimensionNoOrientation(int length1,int length2){  return createMaxDimensionNoOrientation(length1,length2,false);}  }
class C{  public int read(byte b[]) throws IOException {  int nr=in.read(b);  if (nr > 0)   monitor.setProgress(nread+=nr);  if (monitor.isCanceled()) {    InterruptedIOException exc=new InterruptedIOException("progress");    exc.bytesTransferred=nread;    throw exc;  }  return nr;}  }
class C{  @Ignore("Disabling due to bug #52347") @Test public void testConcurrentEventsOnEmptyRegion(){  versionTestConcurrentEventsOnEmptyRegion();}  }
class C{  public void executeReset(){  if (mDecoEventManager != null) {    mDecoEventManager.resetEvents();  }  if (mChartSeries != null) {    for (    ChartSeries chartSeries : mChartSeries) {      chartSeries.reset();    }  }}  }
class C{  public Capabilities(CapabilitiesHandler owner){  super();  setOwner(owner);  m_Capabilities=new HashSet<Capability>();  m_Dependencies=new HashSet<Capability>();  if (doNotCheckCapabilities()) {    return;  }  if (PROPERTIES == null) {    try {      PROPERTIES=Utils.readProperties(PROPERTIES_FILE);    } catch (    Exception e) {      e.printStackTrace();      PROPERTIES=new Properties();    }  }  m_Test=Boolean.parseBoolean(PROPERTIES.getProperty("Test","true"));  m_InstancesTest=Boolean.parseBoolean(PROPERTIES.getProperty("InstancesTest","true")) && m_Test;  m_AttributeTest=Boolean.parseBoolean(PROPERTIES.getProperty("AttributeTest","true")) && m_Test;  m_MissingValuesTest=Boolean.parseBoolean(PROPERTIES.getProperty("MissingValuesTest","true")) && m_Test;  m_MissingClassValuesTest=Boolean.parseBoolean(PROPERTIES.getProperty("MissingClassValuesTest","true")) && m_Test;  m_MinimumNumberInstancesTest=Boolean.parseBoolean(PROPERTIES.getProperty("MinimumNumberInstancesTest","true")) && m_Test;  if (owner instanceof weka.classifiers.UpdateableClassifier || owner instanceof weka.clusterers.UpdateableClusterer) {    setMinimumNumberInstances(0);  }}  }
class C{  public void addXmlEntity(XmlEntity xmlEntity,String[] groups) throws Exception {  Region<String,Configuration> configRegion=getConfigurationRegion();  if (groups == null || groups.length == 0) {    groups=new String[]{SharedConfiguration.CLUSTER_CONFIG};  }  for (  String group : groups) {    Configuration configuration=(Configuration)configRegion.get(group);    if (configuration == null) {      configuration=new Configuration(group);    }    String xmlContent=configuration.getCacheXmlContent();    if (xmlContent == null || xmlContent.isEmpty()) {      StringWriter sw=new StringWriter();      PrintWriter pw=new PrintWriter(sw);      CacheXmlGenerator.generateDefault(pw);      xmlContent=sw.toString();    }    final Document doc=createAndUpgradeDocumentFromXml(xmlContent);    XmlUtils.addNewNode(doc,xmlEntity);    configuration.setCacheXmlContent(XmlUtils.prettyXml(doc));    configRegion.put(group,configuration);    writeConfig(configuration);  }}  }
class C{  public static synchronized void installCBSContextListener(ContextListener s){  int numListeners=cbsContextListeners.length;  ContextListener[] tmp=new ContextListener[numListeners + 1];  for (int i=0; i < numListeners; i++) {    tmp[i]=cbsContextListeners[i];  }  tmp[numListeners]=s;  cbsContextListeners=tmp;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  String fullName=m_arg0.execute(xctxt).str();  int indexOfNSSep=fullName.indexOf(':');  String result;  String propName="";  Properties xsltInfo=new Properties();  loadPropertyFile(XSLT_PROPERTIES,xsltInfo);  if (indexOfNSSep > 0) {    String prefix=(indexOfNSSep >= 0) ? fullName.substring(0,indexOfNSSep) : "";    String namespace;    namespace=xctxt.getNamespaceContext().getNamespaceForPrefix(prefix);    propName=(indexOfNSSep < 0) ? fullName : fullName.substring(indexOfNSSep + 1);    if (namespace.startsWith("http://www.w3.org/XSL/Transform") || namespace.equals("http://www.w3.org/1999/XSL/Transform")) {      result=xsltInfo.getProperty(propName);      if (null == result) {        warn(xctxt,XPATHErrorResources.WG_PROPERTY_NOT_SUPPORTED,new Object[]{fullName});        return XString.EMPTYSTRING;      }    } else {      warn(xctxt,XPATHErrorResources.WG_DONT_DO_ANYTHING_WITH_NS,new Object[]{namespace,fullName});      try {        result=System.getProperty(propName);        if (null == result) {          return XString.EMPTYSTRING;        }      } catch (      SecurityException se) {        warn(xctxt,XPATHErrorResources.WG_SECURITY_EXCEPTION,new Object[]{fullName});        return XString.EMPTYSTRING;      }    }  } else {    try {      result=System.getProperty(fullName);      if (null == result) {        return XString.EMPTYSTRING;      }    } catch (    SecurityException se) {      warn(xctxt,XPATHErrorResources.WG_SECURITY_EXCEPTION,new Object[]{fullName});      return XString.EMPTYSTRING;    }  }  if (propName.equals("version") && result.length() > 0) {    try {      return new XString("1.0");    } catch (    Exception ex) {      return new XString(result);    }  } else   return new XString(result);}  }
class C{  public T longdesc(String value){  return attr("longdesc",value);}  }
class C{  @SafeVarargs public static <T>Supplier<T> randomlySelect(T... values){  if (values == null || values.length == 0)   throw new IllegalArgumentException("The values array may not be null or empty");  Random rng=new Random(System.currentTimeMillis());  return null;}  }
class C{  public void hideProgress(){  mProgress.setVisibility(View.GONE);}  }
class C{  public TLongLongHashMap(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  public static String longToHex(final long src,final int srcPos,final String dstInit,final int dstPos,final int nHexs){  if (0 == nHexs) {    return dstInit;  }  if ((nHexs - 1) * 4 + srcPos >= 64) {    throw new IllegalArgumentException("(nHexs-1)*4+srcPos is greather or equal to than 64");  }  final StringBuilder sb=new StringBuilder(dstInit);  int shift=0;  int append=sb.length();  for (int i=0; i < nHexs; i++) {    shift=i * 4 + srcPos;    final int bits=(int)(0xF & (src >> shift));    if (dstPos + i == append) {      ++append;      sb.append(intToHexDigit(bits));    } else {      sb.setCharAt(dstPos + i,intToHexDigit(bits));    }  }  return sb.toString();}  }
class C{  public void testExpBeta1(){  this.config.planCalcScore().setBrainExpBeta(1.0);  Person person=PopulationUtils.getFactory().createPerson(Id.create(1,Person.class));  Plan plan1=PersonUtils.createAndAddPlan(person,false);  plan1.setScore(96.0);  Plan plan2=PersonUtils.createAndAddPlan(person,false);  plan2.setScore(97.0);  Plan plan3=PersonUtils.createAndAddPlan(person,false);  plan3.setScore(98.0);  Plan plan4=PersonUtils.createAndAddPlan(person,false);  plan4.setScore(99.0);  Plan plan5=PersonUtils.createAndAddPlan(person,false);  plan5.setScore(100.0);  ExpBetaPlanSelector<Plan,Person> selector=new ExpBetaPlanSelector<Plan,Person>(this.config.planCalcScore());  int cnt1=0;  int cnt2=0;  int cnt3=0;  int cnt4=0;  int cnt5=0;  for (int i=0; i < 10000; i++) {    Plan plan=selector.selectPlan(person);    if (plan == plan1)     cnt1++;    if (plan == plan2)     cnt2++;    if (plan == plan3)     cnt3++;    if (plan == plan4)     cnt4++;    if (plan == plan5)     cnt5++;  }  log.info("Plan 1 was returned " + cnt1 + " times.");  log.info("Plan 2 was returned " + cnt2 + " times.");  log.info("Plan 3 was returned " + cnt3 + " times.");  log.info("Plan 4 was returned " + cnt4 + " times.");  log.info("Plan 5 was returned " + cnt5 + " times.");  assertEquals(101,cnt1);  assertEquals(310,cnt2);  assertEquals(816,cnt3);  assertEquals(2313,cnt4);  assertEquals(6460,cnt5);}  }
class C{  public DockNodeEventHandler(Node node){  this.node=node;}  }
class C{  public boolean isRotationEnabled(){  return mRotationEnabled;}  }
class C{  static protected byte[] writeOnBuffer(final RDFFormat format,final Graph g) throws RDFHandlerException {  final RDFWriterFactory writerFactory=RDFWriterRegistry.getInstance().get(format);  if (writerFactory == null)   fail("RDFWriterFactory not found: format=" + format);  final ByteArrayOutputStream baos=new ByteArrayOutputStream();  final RDFWriter writer=writerFactory.getWriter(baos);  writer.startRDF();  for (  Statement stmt : g) {    writer.handleStatement(stmt);  }  writer.endRDF();  return baos.toByteArray();}  }
class C{  public void execute(){  DataModel source=getDataModel();  Graph graph=null;  if (source instanceof DataModelList) {    graph=multiLingamPattern((DataModelList)source,pattern);  } else {    DataModelList list=new DataModelList();    list.add(source);    graph=multiLingamPattern(list,pattern);  }  setResultGraph(graph);  if (getSourceGraph() != null) {    GraphUtils.arrangeBySourceGraph(graph,getSourceGraph());  } else   if (((IKnowledge)getParams().get("knowledge",new Knowledge2())).isDefaultToKnowledgeLayout()) {    SearchGraphUtils.arrangeByKnowledgeTiers(graph,(IKnowledge)getParams().get("knowledge",new Knowledge2()));  } else {    GraphUtils.circleLayout(graph,200,200,150);  }}  }
class C{  public static void write(DataSet<?> data,Writer writer,char delimiter) throws IOException {  String[][] catNamesToUse=getSafeNames(data.getCategories(),delimiter);  String[] classNames=null;  if (data instanceof ClassificationDataSet)   classNames=getSafeNames(new CategoricalData[]{((ClassificationDataSet)data).getPredicting()},delimiter)[0];  for (int i=0; i < data.getSampleSize(); i++) {    if (i > 0)     writer.write('\n');    boolean nothingWrittenYet=true;    if (data instanceof ClassificationDataSet) {      int targetClass=((ClassificationDataSet)data).getDataPointCategory(i);      writer.write(classNames[targetClass]);      nothingWrittenYet=false;    } else     if (data instanceof RegressionDataSet) {      double targetVal=((RegressionDataSet)data).getTargetValue(i);      writer.write(Double.toString(targetVal));      nothingWrittenYet=false;    }    DataPoint dp=data.getDataPoint(i);    Vec v=dp.getNumericalValues();    int[] c=dp.getCategoricalValues();    for (int j=0; j < v.length(); j++) {      if (!nothingWrittenYet)       writer.write(delimiter);      double val=v.get(j);      if (Math.rint(val) == val)       writer.write(Long.toString((long)val)); else       writer.write(Double.toString(val));      nothingWrittenYet=false;    }    for (int j=0; j < c.length; j++) {      if (!nothingWrittenYet)       writer.write(delimiter);      if (c[j] >= 0)       writer.write(catNamesToUse[j][c[j]]);      nothingWrittenYet=false;    }  }  writer.flush();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static <Type>Validator<Type> negate(@NonNull final CharSequence errorMessage,@NonNull final Validator<Type> validator){  return NegateValidator.create(errorMessage,validator);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public void resetGzipStream() throws IOException {  finish();  def.reset();}  }
class C{  public ComputationException(@Nullable Throwable cause){  super(cause);}  }
class C{  public SelectAndViewEditor(final String labelTitle,final String defaultHelp){  super();  m_defaultHelp=defaultHelp;  final Font oldFont=m_helpButton.getFont();  m_helpButton.setFont(new Font(oldFont.getName(),Font.BOLD,oldFont.getSize()));  m_view.setLayout(new GridBagLayout());  m_selectorLabel=new JLabel(labelTitle + ":");  add(m_selectorLabel,new GridBagConstraints(0,0,1,1,0d,0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(0,0,1,2),0,0));  add(m_selector,new GridBagConstraints(1,0,1,1,1.0,0,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(0,0,1,0),0,0));  add(m_helpButton,new GridBagConstraints(2,0,1,1,0d,0,GridBagConstraints.NORTHEAST,GridBagConstraints.NONE,new Insets(0,0,1,0),0,0));  add(m_view,new GridBagConstraints(0,1,3,1,1.0,1.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,0,0,0),0,0));  m_selector.setRenderer(new DisplayNameComboBoxRender());  m_selector.addItemListener(null);  m_properChangeListener=null;  m_helpPanel=new JEditorPane();  m_helpPanel.setEditable(false);  m_helpPanel.setContentType("text/html");  m_helpPanel.setAutoscrolls(true);  m_helpPanel.setBackground(m_selectorLabel.getBackground());  final Dimension preferredSize=new Dimension(500,500);  m_helpPanel.setPreferredSize(preferredSize);  m_helpPanel.setSize(preferredSize);  final JScrollPane notesScroll=new JScrollPane();  notesScroll.setViewportView(m_helpPanel);  notesScroll.setBorder(null);  notesScroll.getViewport().setBorder(null);  m_helpButton.addActionListener(null);}  }
class C{  public double updateDouble(String key,double delta) throws SimError {  double current;  try {    current=(Double)getProperty(key);    updateProperty(key,current + delta);  } catch (  ClassCastException cce) {    throw new SimError("No Double value for key " + key);  }catch (  NullPointerException npe) {    throw new SimError("No value for key " + key);  }  return current + delta;}  }
class C{  private String activateZonesStrategy(MDSDialog dialog,Integer vsanId) throws NetworkDeviceControllerException {  waitForSession(dialog,vsanId);  Long time=System.currentTimeMillis();  Zoneset activeZoneset=getActiveZoneset(dialog,vsanId);  if (activeZoneset == null || activeZoneset.getZones().isEmpty()) {    _log.error("Activate zone requires vsan: " + vsanId + " to have a non-empty active zoneset.");    throw NetworkDeviceControllerException.exceptions.noActiveZonesetForFabric(vsanId.toString());  }  try {    dialog.config();    zonesetClone(dialog,vsanId,activeZoneset);    commitZones(dialog,vsanId,activeZoneset);    dialog.copyRunningConfigToStartupFabric();    dialog.endConfig();    time=System.currentTimeMillis() - time;    _log.info("Zoneset: " + activeZoneset.getName() + " activate time (msec): "+ time.toString());    return activeZoneset.getName();  } catch (  Exception ex) {    throw NetworkDeviceControllerException.exceptions.activateZonesStrategyFailed(ex);  } finally {    safeExitSession(dialog,vsanId);  }}  }
class C{  @DELETE @Path("{path:.*}") @Consumes("application/vnd.api+json") public Response delete(@PathParam("path") String path,@Context SecurityContext securityContext,String jsonApiDocument){  return build(elide.delete(path,jsonApiDocument,getUser.apply(securityContext)));}  }
class C{  protected void validateHouseNumber(final Long wardId,final String houseNo,final BasicProperty basicProperty){  final Query qry=getPersistenceService().getSession().createQuery("from BasicPropertyImpl bp where bp.address.houseNoBldgApt = :houseNo and bp.boundary.id = :wardId and bp.active = 'Y'");  qry.setParameter("houseNo",houseNo);  qry.setParameter("wardId",wardId);  if (!qry.list().isEmpty() && (basicProperty == null || basicProperty != null && !basicProperty.getAddress().getHouseNoBldgApt().equals(houseNo)))   addActionError(getText("houseNo.unique"));}  }
class C{  private List<FahrzeitEvent> substituteStopNames(String stopNamesMapFilename,List<FahrzeitEvent> fahrzeitEvents,boolean keepRoutesWithMissingStops){  List<FahrzeitEvent> fahrzeitEventsOut=new LinkedList<FahrzeitEvent>();  Map<String,String> old2newStopNamesMap=ReadStopNameMap.readStopNameMap(stopNamesMapFilename);  Set<Id<TransitStopFacility>> stopsNotFound=new TreeSet<>();  Map<Id<TransitLine>,Set<Id<TransitRoute>>> incompleteRoutes=new HashMap<>();  for (  FahrzeitEvent fahrzeitEvent : fahrzeitEvents) {    String oldStopName=fahrzeitEvent.getStopId().toString();    String newStopName=old2newStopNamesMap.get(oldStopName);    if (incompleteRoutes.get(fahrzeitEvent.getFahrtEvent().getLineId()) == null) {      incompleteRoutes.put(fahrzeitEvent.getFahrtEvent().getLineId(),new TreeSet<Id<TransitRoute>>());    }    if (newStopName == null) {      stopsNotFound.add(Id.create(oldStopName,TransitStopFacility.class));      incompleteRoutes.get(fahrzeitEvent.getFahrtEvent().getLineId()).add(fahrzeitEvent.getFahrtEvent().getRouteId());    } else {      fahrzeitEvent.setNewStopId(newStopName);    }  }  int nIncompleteRoutes=0;  for (  Set<Id<TransitRoute>> set : incompleteRoutes.values()) {    nIncompleteRoutes+=set.size();  }  log.info("Tagged " + nIncompleteRoutes + " routes as incomplete...");  log.info(incompleteRoutes);  if (stopsNotFound.size() == 0) {    log.info("Could substitute all old stop names by new ones");  } else {    log.warn("Could not substitute " + stopsNotFound.size() + " old stop names by new ones");  }  for (  FahrzeitEvent event : fahrzeitEvents) {    if (keepRoutesWithMissingStops) {      fahrzeitEventsOut.add(event);    } else {      if (!incompleteRoutes.get(event.getFahrtEvent().getLineId()).contains(event.getFahrtEvent().getRouteId())) {        fahrzeitEventsOut.add(event);      }    }  }  log.info("Returning " + fahrzeitEventsOut.size() + " fahrzeitEvents");  return fahrzeitEventsOut;}  }
class C{  public synchronized void executeQuery(String query,ObjectVisitor visitor) throws OQLException {  debugPrint("query : " + query);  StringTokenizer st=new StringTokenizer(query);  if (st.hasMoreTokens()) {    String first=st.nextToken();    if (!first.equals("select")) {      try {        Object res=evalScript(query);        visitor.visit(res);      } catch (      Exception e) {        throw new OQLException(e);      }      return;    }  } else {    throw new OQLException("query syntax error: no 'select' clause");  }  String selectExpr="";  boolean seenFrom=false;  while (st.hasMoreTokens()) {    String tok=st.nextToken();    if (tok.equals("from")) {      seenFrom=true;      break;    }    selectExpr+=" " + tok;  }  if (selectExpr.equals("")) {    throw new OQLException("query syntax error: 'select' expression can not be empty");  }  String className=null;  boolean isInstanceOf=false;  String whereExpr=null;  String identifier=null;  if (seenFrom) {    if (st.hasMoreTokens()) {      String tmp=st.nextToken();      if (tmp.equals("instanceof")) {        isInstanceOf=true;        if (!st.hasMoreTokens()) {          throw new OQLException("no class name after 'instanceof'");        }        className=st.nextToken();      } else {        className=tmp;      }    } else {      throw new OQLException("query syntax error: class name must follow 'from'");    }    if (st.hasMoreTokens()) {      identifier=st.nextToken();      if (identifier.equals("where")) {        throw new OQLException("query syntax error: identifier should follow class name");      }      if (st.hasMoreTokens()) {        String tmp=st.nextToken();        if (!tmp.equals("where")) {          throw new OQLException("query syntax error: 'where' clause expected after 'from' clause");        }        whereExpr="";        while (st.hasMoreTokens()) {          whereExpr+=" " + st.nextToken();        }        if (whereExpr.equals("")) {          throw new OQLException("query syntax error: 'where' clause cannot have empty expression");        }      }    } else {      throw new OQLException("query syntax error: identifier should follow class name");    }  }  executeQuery(new OQLQuery(selectExpr,isInstanceOf,className,identifier,whereExpr),visitor);}  }
class C{  private void displayVideoFormat(){  try {    VideoDescriptor videoDescriptor=mVideoSharing.getVideoDescriptor();    String format=mVideoSharing.getVideoEncoding() + " " + videoDescriptor.getWidth()+ "x"+ videoDescriptor.getHeight();    TextView fmtView=(TextView)findViewById(R.id.video_format);    fmtView.setText(format);  } catch (  RcsPersistentStorageException|RcsGenericException e) {    Log.w(LOGTAG,ExceptionUtil.getFullStackTrace(e));  }}  }
class C{  public void initializeWithInstance(CatalystInstance catalystInstance){  if (catalystInstance == null) {    throw new IllegalArgumentException("CatalystInstance cannot be null.");  }  if (mCatalystInstance != null) {    throw new IllegalStateException("ReactContext has been already initialized");  }  mCatalystInstance=catalystInstance;  CatalystQueueConfiguration queueConfig=catalystInstance.getCatalystQueueConfiguration();  mUiMessageQueueThread=queueConfig.getUIQueueThread();  mNativeModulesMessageQueueThread=queueConfig.getNativeModulesQueueThread();  mJSMessageQueueThread=queueConfig.getJSQueueThread();}  }
class C{  public void addOptionalExcludedName(String name){  Object obj=lookupQualifiedName(scope,name);  if (obj != null && obj != UniqueTag.NOT_FOUND) {    if (!(obj instanceof Scriptable)) {      throw new IllegalArgumentException("Object for excluded name " + name + " is not a Scriptable, it is "+ obj.getClass().getName());    }    table.put(obj,name);  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:34.494 -0500",hash_original_method="2FE036AE685D31E73E4BA8A8E1238828",hash_generated_method="D152F181C92FF38DA4914B0E1B0F1C5D") public boolean equals(Object other){  if (this == other)   return true;  if (other instanceof Address) {    final Address o=(Address)other;    return this.getURI().equals(o.getURI());  }  return false;}  }
class C{  public static TextureData newTextureData(GLProfile glp,File file,boolean useMipMaps) throws IOException {  boolean ddsFormat="dds".equalsIgnoreCase(WWIO.getSuffix(file.getPath()));  if (!ddsFormat) {    BufferedImage img=ImageIO.read(file);    if (img != null)     return AWTTextureIO.newTextureData(glp,img,useMipMaps);  }  return TextureIO.newTextureData(glp,file,useMipMaps,null);}  }
class C{  public boolean isMetadataChanged(){  return this.metadataChangeFlag.getValue();}  }
class C{  @Override public boolean addAll(Collection c){  return super.addAll(c);}  }
class C{  private void logMessage(String message){  checkLogFile();  String logInfo=message;  if (printWriter != null) {    printWriter.println(logInfo);  }  if (sipStack.isLoggingEnabled()) {    stackLogger.logInfo(logInfo);  }}  }
class C{  public static boolean isDefaultBridgeDuplicateDetection(){  return DEFAULT_BRIDGE_DUPLICATE_DETECTION;}  }
class C{  public void put(E newE){  HGTransaction tx=txManager.getContext().getCurrent();  if (tx == null) {    txManager.COMMIT_LOCK.lock();    commit(tx,newE,txManager.mostRecentRecord.transactionNumber);    txManager.COMMIT_LOCK.unlock();  } else {    tx.setBoxValue(this,newE);  }}  }
class C{  public void finish(){  if (!started)   return;synchronized (state.schedule) {    Steppable[] _finish2=finish2;    System.arraycopy(finish,0,finish2,0,finishSize);    int _finishSize=finishSize;    finishSize=0;    for (int x=0; x < _finishSize; x++)     _finish2[x].step(state);  }  state.finish();  resetQueues();  started=false;}  }
class C{  public int lengthMgmtData(){  return this.length(Constants.SignatureSpecNS,Constants._TAG_MGMTDATA);}  }
class C{  public CSVInputAdapter(AdapterInputSource adapterInputSource,String eventTypeName){  this(null,adapterInputSource,eventTypeName);}  }
class C{  public void testAddAll1(){  try {    LinkedBlockingQueue q=new LinkedBlockingQueue(1);    q.addAll(null);    shouldThrow();  } catch (  NullPointerException success) {  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int extraFilterArgs=curNumberOfParameters - 4;  final java.util.ArrayList extraArgs=new java.util.ArrayList();  while (extraFilterArgs-- > 0)   extraArgs.add(stack.pop());  boolean invertRes=false;  invertRes=!evalBool(stack.pop());  Object matchValue=stack.pop();  String filterMethName=getString(stack);  Object dataObj=stack.pop();  if (dataObj == null)   return null;  if ("UserCategories".equals(filterMethName)) {    if (matchValue == null) {      if (!invertRes)       return null; else       return dataObj;    }    java.util.StringTokenizer toker=new java.util.StringTokenizer(matchValue.toString(),",");    String[] catMatches=new String[toker.countTokens()];    for (int i=0; i < catMatches.length; i++)     catMatches[i]=toker.nextToken().trim();    Agent[] cachedFavs=Wizard.getInstance().getFavorites();    if (dataObj instanceof java.util.Collection || dataObj instanceof java.util.Map) {      java.util.Collection currData;      if (dataObj instanceof java.util.Collection)       currData=(java.util.Collection)dataObj; else       currData=((java.util.Map)dataObj).keySet();      java.util.Iterator walker=currData.iterator();      while (walker.hasNext()) {        Object currObj=walker.next();        boolean testResult=categoryTest(currObj,catMatches,cachedFavs);        if (invertRes == testResult)         walker.remove();      }      return dataObj;    } else {      Object[] currData=(Object[])dataObj;      Class filterClass=currData.getClass().getComponentType();      java.util.ArrayList passedData=new java.util.ArrayList();      for (int i=0; i < currData.length; i++) {        boolean testResult=categoryTest(currData[i],catMatches,cachedFavs);        if (invertRes != testResult)         passedData.add(currData[i]);      }      return passedData.toArray((Object[])java.lang.reflect.Array.newInstance(filterClass,passedData.size()));    }  }  java.util.ArrayList filtMeths=new java.util.ArrayList();  java.util.StringTokenizer toker=new java.util.StringTokenizer(filterMethName," |");  while (toker.hasMoreTokens()) {    filtMeths.add(Catbert.getAPI().get(toker.nextToken()));  }  if (dataObj instanceof java.util.Collection || dataObj instanceof java.util.Map) {    java.util.Collection currData;    if (dataObj instanceof java.util.Collection)     currData=(java.util.Collection)dataObj; else     currData=((java.util.Map)dataObj).keySet();    java.util.Iterator walker=currData.iterator();    if ("GetAiringTitle".equals(filterMethName) || "GetShowTitle".equals(filterMethName)) {      while (walker.hasNext()) {        Object currObj=walker.next();        if (filterTestAiringTitle(currObj,matchValue) == invertRes)         walker.remove();      }    } else     if ("GetMovieImageCount".equals(filterMethName)) {      int matchInt=0;      try {        matchInt=Integer.parseInt(matchValue.toString());      } catch (      NumberFormatException nfe) {        if (Sage.DBG)         System.out.println("ERROR in int parameter for filtering on movie image count of:" + nfe);      }      while (walker.hasNext()) {        Object currObj=walker.next();        if (filterTestMovieImageCount(currObj,matchInt) == invertRes)         walker.remove();      }    } else     if ("GetOriginalAiringDate".equals(filterMethName)) {      long matchLong=0;      try {        matchLong=Long.parseLong(matchValue.toString());      } catch (      NumberFormatException nfe) {        if (Sage.DBG)         System.out.println("ERROR in int parameter for filtering on org air date of:" + nfe);      }      while (walker.hasNext()) {        Object currObj=walker.next();        if (filterTestOriginalAirDate(currObj,matchLong) == invertRes)         walker.remove();      }    } else     if ("GetShowSeasonNumber".equals(filterMethName)) {      int matchInt=0;      try {        matchInt=Integer.parseInt(matchValue.toString());      } catch (      NumberFormatException nfe) {        if (Sage.DBG)         System.out.println("ERROR in int parameter for filtering of:" + nfe);      }      while (walker.hasNext()) {        Object currObj=walker.next();        if (filterTestSeasonNumber(currObj,matchInt) == invertRes)         walker.remove();      }    } else     if ("GetShowEpisodeNumber".equals(filterMethName)) {      int matchInt=0;      try {        matchInt=Integer.parseInt(matchValue.toString());      } catch (      NumberFormatException nfe) {        if (Sage.DBG)         System.out.println("ERROR in int parameter for filtering of:" + nfe);      }      while (walker.hasNext()) {        Object currObj=walker.next();        if (filterTestEpisodeNumber(currObj,matchInt) == invertRes)         walker.remove();      }    } else {      while (walker.hasNext()) {        Object currObj=walker.next();        boolean testResult=false;        for (int j=0; j < filtMeths.size(); j++) {          sage.jep.function.PostfixMathCommandI filtMeth=(sage.jep.function.PostfixMathCommandI)filtMeths.get(j);          stack.push(currObj);          for (int i=extraArgs.size() - 1; i >= 0; i--)           stack.push(extraArgs.get(i));          filtMeth.setCurNumberOfParameters(1 + extraArgs.size());          filtMeth.run(stack);          Object testRes=stack.pop();          boolean didPass=(testRes == matchValue) || (testRes != null && (testRes.equals(matchValue) || (matchValue != null && testRes.toString().equals(matchValue.toString()))));          if (didPass) {            testResult=true;            break;          }        }        if (invertRes == testResult)         walker.remove();      }    }    return dataObj;  } else {    Object[] currData=(Object[])dataObj;    Class filterClass=currData.getClass().getComponentType();    java.util.ArrayList passedData=new java.util.ArrayList();    if ("GetAiringTitle".equals(filterMethName) || "GetShowTitle".equals(filterMethName)) {      for (int i=0; i < currData.length; i++) {        if (filterTestAiringTitle(currData[i],matchValue) != invertRes)         passedData.add(currData[i]);      }    } else     if ("GetMovieImageCount".equals(filterMethName)) {      int matchInt=0;      try {        matchInt=Integer.parseInt(matchValue.toString());      } catch (      NumberFormatException nfe) {        if (Sage.DBG)         System.out.println("ERROR in int parameter for filtering on movie image count of:" + nfe);      }      for (int i=0; i < currData.length; i++) {        if (filterTestMovieImageCount(currData[i],matchInt) != invertRes)         passedData.add(currData[i]);      }    } else     if ("GetOriginalAiringDate".equals(filterMethName)) {      long matchLong=0;      try {        matchLong=Long.parseLong(matchValue.toString());      } catch (      NumberFormatException nfe) {        if (Sage.DBG)         System.out.println("ERROR in int parameter for filtering on org air date of:" + nfe);      }      for (int i=0; i < currData.length; i++) {        if (filterTestOriginalAirDate(currData[i],matchLong) != invertRes)         passedData.add(currData[i]);      }    } else     if ("GetShowSeasonNumber".equals(filterMethName)) {      int matchInt=0;      try {        matchInt=Integer.parseInt(matchValue.toString());      } catch (      NumberFormatException nfe) {        if (Sage.DBG)         System.out.println("ERROR in int parameter for filtering of:" + nfe);      }      for (int i=0; i < currData.length; i++) {        if (filterTestSeasonNumber(currData[i],matchInt) != invertRes)         passedData.add(currData[i]);      }    } else     if ("GetShowEpisodeNumber".equals(filterMethName)) {      int matchInt=0;      try {        matchInt=Integer.parseInt(matchValue.toString());      } catch (      NumberFormatException nfe) {        if (Sage.DBG)         System.out.println("ERROR in int parameter for filtering of:" + nfe);      }      for (int i=0; i < currData.length; i++) {        if (filterTestEpisodeNumber(currData[i],matchInt) != invertRes)         passedData.add(currData[i]);      }    } else {      for (int i=0; i < currData.length; i++) {        boolean testResult=false;        for (int j=0; j < filtMeths.size(); j++) {          sage.jep.function.PostfixMathCommandI filtMeth=(sage.jep.function.PostfixMathCommandI)filtMeths.get(j);          stack.push(currData[i]);          for (int k=extraArgs.size() - 1; k >= 0; k--)           stack.push(extraArgs.get(k));          filtMeth.setCurNumberOfParameters(1 + extraArgs.size());          filtMeth.run(stack);          Object testRes=stack.pop();          boolean didPass=(testRes == matchValue) || (testRes != null && (testRes.equals(matchValue) || (matchValue != null && testRes.toString().equals(matchValue.toString()))));          if (didPass) {            testResult=true;            break;          }        }        if (invertRes != testResult)         passedData.add(currData[i]);      }    }    return passedData.toArray((Object[])java.lang.reflect.Array.newInstance(filterClass,passedData.size()));  }}  }
class C{  public void sendMessage(String text,String replyUser,String id){  log("Sending message:",Level.INFO,text,replyUser);  try {    Map<String,String> params=new HashMap<String,String>();    params.put("message",text);    getConnection().callPostAPI("/" + id + "/messages",params);  } catch (  Exception exception) {    this.errors++;    log(exception);  }}  }
class C{  private void generateShipments_complete(ProcessInfo pi){  tabbedPane.setSelectedIndex(1);  ProcessInfoUtil.setLogFromDB(pi);  iText.append("<b>").append(pi.getSummary()).append("</b><br>(").append(Msg.getMsg(Env.getCtx(),"InOutGenerateInfo")).append(")<br>").append(pi.getLogInfo(true));  info.setText(iText.toString());  int[] ids=pi.getIDs();  if (ids == null || ids.length == 0)   return;  log.config("PrintItems=" + ids.length);  confirmPanelGen.getOKButton().setEnabled(false);  if (ADialog.ask(m_WindowNo,this,"PrintShipments")) {    setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));    int retValue=ADialogDialog.A_CANCEL;    do {      for (int i=0; i < ids.length; i++) {        int M_InOut_ID=ids[i];        ReportCtl.startDocumentPrint(ReportEngine.SHIPMENT,M_InOut_ID,this,Env.getWindowNo(this),true);      }      ADialogDialog d=new ADialogDialog(m_frame,Env.getHeader(Env.getCtx(),m_WindowNo),Msg.getMsg(Env.getCtx(),"PrintoutOK?"),JOptionPane.QUESTION_MESSAGE);      retValue=d.getReturnCode();    } while (retValue == ADialogDialog.A_CANCEL);    setCursor(Cursor.getDefaultCursor());  }  confirmPanelGen.getOKButton().setEnabled(true);}  }
class C{  private void logSlowRequests(long requestLifetime,Request<?> request,byte[] responseContents,StatusLine statusLine){  if (DEBUG || requestLifetime > SLOW_REQUEST_THRESHOLD_MS) {    VolleyLog.d("HTTP response for request=<%s> [lifetime=%d], [size=%s], " + "[rc=%d], [retryCount=%s]",request,requestLifetime,responseContents != null ? responseContents.length : "null",statusLine.getStatusCode(),request.getRetryPolicy().getCurrentRetryCount());  }}  }
class C{  private JsonToken decodeNumber(char[] chars,int offset,int length){  int i=offset;  int c=chars[i];  if (c == '-') {    c=chars[++i];  }  if (c == '0') {    c=chars[++i];  } else   if (c >= '1' && c <= '9') {    c=chars[++i];    while (c >= '0' && c <= '9') {      c=chars[++i];    }  } else {    return JsonToken.STRING;  }  if (c == '.') {    c=chars[++i];    while (c >= '0' && c <= '9') {      c=chars[++i];    }  }  if (c == 'e' || c == 'E') {    c=chars[++i];    if (c == '+' || c == '-') {      c=chars[++i];    }    if (c >= '0' && c <= '9') {      c=chars[++i];      while (c >= '0' && c <= '9') {        c=chars[++i];      }    } else {      return JsonToken.STRING;    }  }  if (i == offset + length) {    return JsonToken.NUMBER;  } else {    return JsonToken.STRING;  }}  }
class C{  protected void validateIndex(final int index){  if (index < 0 || index > size) {    throw new StringIndexOutOfBoundsException(index);  }}  }
class C{  @Override public int hashCode(){  int h=classHash();  h=31 * h + Float.floatToIntBits(tieBreakerMultiplier);  h=31 * h + Arrays.hashCode(disjuncts);  return h;}  }
class C{  public boolean invoke(){  if (mClickListener != null && mClickListener.onMenuItemClick(this)) {    return true;  }  if (mMenu.dispatchMenuItemSelected(mMenu.getRootMenu(),this)) {    return true;  }  if (mItemCallback != null) {    mItemCallback.run();    return true;  }  if (mIntent != null) {    try {      mMenu.getContext().startActivity(mIntent);      return true;    } catch (    ActivityNotFoundException e) {      Log.e(TAG,"Can't find activity to handle intent; ignoring",e);    }  }  if (mActionProvider != null && mActionProvider.onPerformDefaultAction()) {    return true;  }  return false;}  }
class C{  public ExtensionInfo findMutableExtensionByNumber(final Descriptor containingType,final int fieldNumber){  return mutableExtensionsByNumber.get(new DescriptorIntPair(containingType,fieldNumber));}  }
class C{  public ConnectionlessBootstrap bootStrapUdpClient() throws HttpRequestCreateException {  ConnectionlessBootstrap udpClient=null;  try {    udpClient=new ConnectionlessBootstrap(udpMeta.getChannelFactory());    udpClient.setPipeline(new UdpPipelineFactory(TcpUdpSshPingResourceStore.getInstance().getTimer(),this).getPipeline());  } catch (  Exception t) {    throw new TcpUdpRequestCreateException("Error in creating request in udp worker. " + " If udpClient is null. Then fail to create.",t);  }  return udpClient;}  }
class C{  public void readDataFile(URL fileUrl) throws DataFileException {  if (fileUrl == null) {    throw new IllegalStateException("File URL is null, cannot load file");  }  RecordIterator recordIterator=this.makeRecordIterator(fileUrl);  while (recordIterator.hasNext()) {    this.records.add(recordIterator.next());  }}  }
class C{  @Override protected EClass eStaticClass(){  return SGraphPackage.Literals.REGION;}  }
class C{  @Override public String resolveURI(String uri){  return _uriResolver.resolve(uri);}  }
class C{  public DSAPrivateKey loadChangePrivKey(){  changePrivKey=KeyOps.loadDSAPrivateKeyFile(username);  return changePrivKey;}  }
class C{  protected void drawBar(Canvas canvas,float xMin,float yMin,float xMax,float yMax,float halfDiffX,int seriesNr,int seriesIndex,Paint paint){  int scale=mDataset.getSeriesAt(seriesIndex).getScaleNumber();  if (mType == Type.STACKED || mType == Type.HEAPED) {    drawBar(canvas,xMin - halfDiffX,yMax,xMax + halfDiffX,yMin,scale,seriesIndex,paint);  } else {    float startX=xMin - seriesNr * halfDiffX + seriesIndex * 2 * halfDiffX;    drawBar(canvas,startX,yMax,startX + 2 * halfDiffX,yMin,scale,seriesIndex,paint);  }}  }
class C{  private void updateFormBody(){  clearFormBody();  if ((null != displayedRepositoryDefinition) && (null != displayedAgent)) {    TreeModelManager treeModelManager=null;    treeModelManager=new TreeModelManager(displayedRepositoryDefinition,displayedAgent,hideInactiveInstrumentations);    if ((null != treeModelManager) && (null != displayedAgent)) {      treeViewer.setInput(treeModelManager);      treeViewer.getTree().setVisible(true);      treeViewer.getTree().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));    } else {      displayMessage("Repository is currently unavailable.",Display.getDefault().getSystemImage(SWT.ICON_ERROR));    }  } else   if ((null != displayedRepositoryDefinition) && (null == displayedAgent)) {    if (null == availableAgents) {      displayMessage("No agent could be loaded on selected repository.",Display.getDefault().getSystemImage(SWT.ICON_WARNING));    } else {      displayMessage("This repository is empty.",Display.getDefault().getSystemImage(SWT.ICON_INFORMATION));    }  }  mainForm.getBody().layout();}  }
class C{  public WrappingStringBuilder append(final String s){  final int end=s.length();  for (int i=0; i < end; i++) {    append(s.charAt(i));  }  return this;}  }
class C{  private boolean processPayment(HttpServletRequest request,Properties ctx,MPayment payment,WebUser wu,WebOrder wo){  boolean ok=processParameter(request,ctx,payment,wu);  if (ok) {    if (payment.getPayAmt().compareTo(Env.ZERO) < 0)     payment.setPayAmt(payment.getPayAmt().abs());    ok=payment.processOnline();    if (ok) {      if (wo != null) {        if (!wo.isCompleted())         wo.process(payment);        if (!wo.isCompleted())         log.warning("Order not processed " + wo);      } else       log.warning("No Order");      payment.processIt(DocAction.ACTION_Complete);      payment.saveEx();      sendThanksEMail(request,ctx,payment,wu,wo);    } else {      log.fine(payment.getErrorMessage());      String errMsg=payment.getErrorMessage();      payment.save();      payment.setErrorMessage(errMsg);      request.getSession().setAttribute(WebSessionCtx.HDR_MESSAGE,errMsg);      sendDeclineEMail(request,payment,wu,wo);    }  }  return ok;}  }
class C{  public Object clone(){  try {    ArrayList<?> v=(ArrayList<?>)super.clone();    v.elementData=Arrays.copyOf(elementData,size);    v.modCount=0;    return v;  } catch (  CloneNotSupportedException e) {    throw new InternalError(e);  }}  }
class C{  public void add(T item){  getList().add(item);  int size=getItemPositions();  notifyItemInserted(size);  notifyItemRangeChanged(size,1);}  }
class C{  private void initView(Context context){  mContext=context;  footerView=new LinearLayout(context);  footerView.setOrientation(LinearLayout.HORIZONTAL);  footerView.setGravity(Gravity.CENTER);  footerView.setMinimumHeight(AbViewUtil.scale(mContext,100));  footerTextView=new TextView(context);  footerTextView.setGravity(Gravity.CENTER_VERTICAL);  setTextColor(Color.rgb(107,107,107));  AbViewUtil.setTextSize(footerTextView,30);  AbViewUtil.setPadding(footerView,0,10,0,10);  footerProgressBar=new ProgressBar(context,null,android.R.attr.progressBarStyle);  footerProgressBar.setVisibility(View.GONE);  LinearLayout.LayoutParams layoutParamsWW=new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);  layoutParamsWW.gravity=Gravity.CENTER;  layoutParamsWW.width=AbViewUtil.scale(mContext,50);  layoutParamsWW.height=AbViewUtil.scale(mContext,50);  layoutParamsWW.rightMargin=AbViewUtil.scale(mContext,10);  footerView.addView(footerProgressBar,layoutParamsWW);  LinearLayout.LayoutParams layoutParamsWW1=new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);  footerView.addView(footerTextView,layoutParamsWW1);  LinearLayout.LayoutParams layoutParamsFW=new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT);  addView(footerView,layoutParamsFW);  AbViewUtil.measureView(this);  footerHeight=this.getMeasuredHeight();}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (!success)   return success;  reIndex(newRecord);  return success;}  }
class C{  public void addTemporaryResult(LocalResult result){  if (!result.needToClose()) {    return;  }  if (temporaryResults == null) {    temporaryResults=New.hashSet();  }  if (temporaryResults.size() < 100) {    temporaryResults.add(result);  }}  }
class C{  public TIntFloatHashMap(){}  }
class C{  public Presence createPresence(){  PresenceImpl presence=new PresenceImpl();  return presence;}  }
class C{  public SetOperationBuilder initMemory(Memory dstMem){  bDstMem=dstMem;  return this;}  }
class C{  protected void runningSum(Set<Map.Entry<Double,Double>> c,double value,double[] sums){  double offset=CONST - Math.log(m_Width);  double logFactor=Math.log(m_Threshold) - Math.log(1 - m_Threshold);  double logSumOfWeights=Math.log(m_SumOfWeights);  Iterator<Map.Entry<Double,Double>> itr=c.iterator();  while (itr.hasNext()) {    Map.Entry<Double,Double> entry=itr.next();    if (entry.getValue() > 0) {      double diff=(entry.getKey() - value) / m_Width;      double logDensity=offset - 0.5 * diff * diff;      double logWeight=Math.log(entry.getValue());      sums[0]=logOfSum(sums[0],logWeight + logDensity);      sums[1]=logOfSum(sums[1],logWeight);      if (logDensity + logSumOfWeights < logOfSum(logFactor + sums[0],logDensity + sums[1])) {        break;      }    }  }}  }
class C{  public Vector3f mulPosition(Matrix4fc mat){  return mulPosition(mat,this);}  }
class C{  private static final String[] split(final String string,final String onToken){  final StringTokenizer tokenizer=new StringTokenizer(string,onToken);  final String[] result=new String[tokenizer.countTokens()];  for (int i=0; i < result.length; i++) {    result[i]=tokenizer.nextToken();  }  return result;}  }
class C{  public static int countKeywords(File file) throws Exception {  String[] keywordString={"abstract","assert","boolean","break","byte","case","catch","char","class","const","continue","default","do","double","else","enum","extends","for","final","finally","float","goto","if","implements","import","instanceof","int","interface","long","native","new","package","private","protected","public","return","short","static","strictfp","super","switch","synchronized","this","throw","throws","transient","try","void","volatile","while","true","false","null"};  Set<String> keywordSet=new HashSet<>(Arrays.asList(keywordString));  int count=0;  Scanner input=new Scanner(file);  while (input.hasNext()) {    String word=input.next();    if (word.equals("//")) {      input.nextLine();    } else     if (word.contains("\"")) {      String nextWord;      do {        nextWord=input.next();      } while (!nextWord.contains("\""));    } else     if (word.contains("/*")) {      String nextWord;      do {        nextWord=input.next();      } while (!nextWord.contains("*/"));    } else     if (keywordSet.contains(word))     count++;  }  return count;}  }
class C{  public synchronized Relationship addRelationship(Primitive type,Vertex target,int index){  return addRelationship(this.network.createVertex(type),target,index,false);}  }
class C{  public static float convertPixelsToDp(float px,Context context){  Resources resources=context.getResources();  DisplayMetrics metrics=resources.getDisplayMetrics();  float dp=px / (metrics.densityDpi / 160f);  return dp;}  }
class C{  public boolean isOver(Entity entity,float x,float y){  return true;}  }
class C{  public WhereBuilder and(String columnName,String op,Object value){  appendCondition(whereItems.size() == 0 ? null : "AND",columnName,op,value);  return this;}  }
class C{  public boolean isParsable(CharSequence buffer,Language fileLanguage,final Project project){  return false;}  }
class C{  public void cleanup(){  m_train=new Instances(m_train,0);  m_numericData=null;}  }
class C{  public void addMoney(Money money){  getMoney().add(money);}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  private void removeBestTestSuite(String testName){  File file=getFileForTargetBestTest(testName);  if (!file.exists()) {    logger.debug("Nothing to delete, as following file does not exist: " + file.getAbsolutePath());  } else {    boolean deleted=file.delete();    if (!deleted) {      logger.warn("Failed to delete " + file.getAbsolutePath());    }  }}  }
class C{  private void updateShineOverlayBasedOnTime(Time time){  float minuteMapped=map(time.minute,0,60,0,360);  mShineOverlay.updateAngle(minuteMapped);  mShadowOverlay.updateAngle(minuteMapped);  float initShine=map(sunlightRatio,sunlightRatioMin,sunlightRatioMax,0.6f,0.0f);  float finalShine=1.0f;  float initShadow=map(sunlightRatio,sunlightRatioMin,sunlightRatioMax,0.6f,0.2f);  float finalShadow=map(sunlightRatio,sunlightRatioMin,sunlightRatioMax,1.0f,1.0f);  float alphaShine=map(sunlightRatio,sunlightRatioMin,sunlightRatioMax,255.0f,100.0f);  float radiusShine=map(sunlightRatio,sunlightRatioMin,sunlightRatioMax,300.0f,250.0f);  float radiusShadow=map(sunlightRatio,sunlightRatioMin,sunlightRatioMax,300.0f,350.0f);  float alphaShadow=map(sunlightRatio,sunlightRatioMin,sunlightRatioMax,60.0f,200.0f);  mShineOverlay.updateRadialGradient(radiusShine,Color.argb((int)alphaShine,255,255,255),0x00FFFFFF,initShine,finalShine);  mShadowOverlay.updateRadialGradient(radiusShadow,Color.argb((int)alphaShadow,0,0,0),0x00000000,initShadow,finalShadow);}  }
class C{  private void collectChildren(Clustering<DendrogramModel> clustering,TempCluster cur,Cluster<DendrogramModel> clus,boolean flatten,boolean hierarchical){  for (  TempCluster child : cur.children) {    if (flatten || child.totalStability() < 0) {      members.addDBIDs(child.members);      collectChildren(clustering,child,clus,flatten,hierarchical);    } else {      child.finalizeCluster(clustering,clus,true,hierarchical);    }  }}  }
class C{  public XTIFFDecodeParam(){}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ENTITY___CLASS_DEFINITION_1:    getClassDefinition_1().clear();  return;case UmplePackage.ENTITY___INTERFACE_DEFINITION_1:getInterfaceDefinition_1().clear();return;case UmplePackage.ENTITY___EXTERNAL_DEFINITION_1:getExternalDefinition_1().clear();return;case UmplePackage.ENTITY___ASSOCIATION_DEFINITION_1:getAssociationDefinition_1().clear();return;case UmplePackage.ENTITY___ASSOCIATION_CLASS_DEFINITION_1:getAssociationClassDefinition_1().clear();return;case UmplePackage.ENTITY___STATE_MACHINE_DEFINITION_1:getStateMachineDefinition_1().clear();return;}super.eUnset(featureID);}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  @Override public void endWindow(){  mapkeyval.clear();}  }
class C{  public boolean isDeclaredProvidedByRuntime(){  return declaredProvidedByRuntime;}  }
class C{  public void configureOption3(String value){  super.configureOption3(value);  log.debug("configureOption3: " + value);  setTurnoutHandling(value);}  }
class C{  public boolean hit(Rectangle rect,Shape s,boolean onStroke){  return mGraphics.hit(rect,s,onStroke);}  }
class C{  boolean isStateChange(XDecoratedPeer window,XPropertyEvent e){  if (!window.isShowing()) {    stateLog.finer("Window is not showing");    return false;  }  int wm_state=window.getWMState();  if (wm_state == XUtilConstants.WithdrawnState) {    stateLog.finer("WithdrawnState");    return false;  } else {    if (stateLog.isLoggable(PlatformLogger.Level.FINER)) {      stateLog.finer("Window WM_STATE is " + wm_state);    }  }  boolean is_state_change=false;  if (e.get_atom() == XA_WM_STATE.getAtom()) {    is_state_change=true;  }  for (  XStateProtocol proto : getProtocols(XStateProtocol.class)) {    is_state_change|=proto.isStateChange(e);    if (stateLog.isLoggable(PlatformLogger.Level.FINEST)) {      stateLog.finest(proto + ": is state changed = " + is_state_change);    }  }  return is_state_change;}  }
class C{  public static <T>T[] asArray(T... t){  return t;}  }
class C{  public static List<List<String>> chunkPaths(VirtualFile root,Collection<FilePath> files){  return chunkRelativePaths(toRelativePaths(root,files));}  }
class C{  public static DoubleVector pchisq(double x,DoubleVector ncp){  int n=ncp.size();  DoubleVector p=new DoubleVector(n);  double mean;  double xh=Math.sqrt(x);  for (int i=0; i < n; i++) {    mean=Math.sqrt(ncp.get(i));    p.set(i,pnorm(xh - mean) - pnorm(-xh - mean));  }  return p;}  }
class C{  public double sigmoid(double x){  return 1.0 / (1.0 + Math.exp(-x));}  }
class C{  private HashMapEntry<K,V>[] doubleCapacity(){  HashMapEntry<K,V>[] oldTable=table;  int oldCapacity=oldTable.length;  if (oldCapacity == MAXIMUM_CAPACITY) {    return oldTable;  }  int newCapacity=oldCapacity * 2;  HashMapEntry<K,V>[] newTable=makeTable(newCapacity);  if (size == 0) {    return newTable;  }  for (int j=0; j < oldCapacity; j++) {    HashMapEntry<K,V> e=oldTable[j];    if (e == null) {      continue;    }    int highBit=e.hash & oldCapacity;    HashMapEntry<K,V> broken=null;    newTable[j | highBit]=e;    for (HashMapEntry<K,V> n=e.next; n != null; e=n, n=n.next) {      int nextHighBit=n.hash & oldCapacity;      if (nextHighBit != highBit) {        if (broken == null)         newTable[j | nextHighBit]=n; else         broken.next=n;        broken=e;        highBit=nextHighBit;      }    }    if (broken != null)     broken.next=null;  }  return newTable;}  }
class C{  private void doExtract(){  alwaysFalse=false;  start=end=null;  Database db=session.getDatabase();  for (int i=0, size=indexConditions.size(); i < size; i++) {    IndexCondition condition=indexConditions.get(i);    if (!condition.isEvaluatable()) {      continue;    }    if (condition.isAlwaysFalse()) {      alwaysFalse=true;      break;    }    Column column=condition.getColumn();    if (condition.getCompareType() == Comparison.IN_LIST) {      Value[] inList=condition.getCurrentValueList(session);      Set<Value> values=inColumns.get(column);      if (values == null) {        values=New.hashSet();        inColumns.put(column,values);      }      for (      Value v : inList) {        if (v != ValueNull.INSTANCE) {          values.add(v);        }      }    } else     if (condition.getCompareType() == Comparison.IN_QUERY) {      ResultInterface inResult=condition.getCurrentResult();      Set<Value> values=inColumns.get(column);      if (values == null) {        values=New.hashSet();        inColumns.put(column,values);      }      while (inResult.next()) {        Value v=inResult.currentRow()[0];        if (v != ValueNull.INSTANCE) {          v=column.convert(v);          values.add(v);        }      }    } else {      Value v=condition.getCurrentValue(session);      boolean isStart=condition.isStart();      boolean isEnd=condition.isEnd();      int columnId=column.getColumnId();      if (isStart) {        start=getSearchRow(start,columnId,v,true);      }      if (isEnd) {        end=getSearchRow(end,columnId,v,false);      }      if (!db.getSettings().optimizeIsNull) {        if (isStart && isEnd) {          if (v == ValueNull.INSTANCE) {            alwaysFalse=true;          }        }      }    }    if (alwaysFalse) {      return;    }  }  for (int i=0, size=indexConditions.size(); i < size; i++) {    IndexCondition condition=indexConditions.get(i);    Column column=condition.getColumn();    int idx=column.getColumnId();    Value v1=start == null ? null : start.getValue(idx);    Value v2=end == null ? null : end.getValue(idx);    if (v1 == null && v2 == null) {      continue;    } else     if (v1 != null || v2 != null) {      if (v1 != null) {        Set<Value> values=inColumns.get(column);        if (values != null) {          for (          Value value : values) {            if (db.compare(value,v1) < 0) {              values.remove(value);            }          }          if (values.isEmpty()) {            alwaysFalse=true;          }        }      } else {        Set<Value> values=inColumns.get(column);        if (values != null) {          for (          Value value : values) {            if (db.compare(value,v1) > 0) {              values.remove(value);            }          }          if (values.isEmpty()) {            alwaysFalse=true;          }        }      }    } else {      if (db.compare(v1,v2) > 0) {        alwaysFalse=true;      }    }  }  if (alwaysFalse) {    return;  }}  }
class C{  private boolean isComplete(Task task) throws Exception {  TaskInfo info=task.getTaskInfo();  TaskInfoState state=info.getState();  if (state == TaskInfoState.success) {    return true;  } else   if (state == TaskInfoState.error) {    return true;  }  return false;}  }
class C{  private ResultPoint[] centerEdges(ResultPoint y,ResultPoint z,ResultPoint x,ResultPoint t){  float yi=y.getX();  float yj=y.getY();  float zi=z.getX();  float zj=z.getY();  float xi=x.getX();  float xj=x.getY();  float ti=t.getX();  float tj=t.getY();  if (yi < width / 2.0f) {    return new ResultPoint[]{new ResultPoint(ti - CORR,tj + CORR),new ResultPoint(zi + CORR,zj + CORR),new ResultPoint(xi - CORR,xj - CORR),new ResultPoint(yi + CORR,yj - CORR)};  } else {    return new ResultPoint[]{new ResultPoint(ti + CORR,tj + CORR),new ResultPoint(zi + CORR,zj - CORR),new ResultPoint(xi - CORR,xj + CORR),new ResultPoint(yi - CORR,yj - CORR)};  }}  }
class C{  public tfoot addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public void configure(){  Dcc4PcTrafficController control=new Dcc4PcTrafficController();  this.getSystemConnectionMemo().setDcc4PcTrafficController(control);  this.getSystemConnectionMemo().setDefaultProgrammer(getOptionState(option1Name));  control.connectPort(this);  this.getSystemConnectionMemo().configureManagers();  jmri.jmrix.dcc4pc.ActiveFlag.setActive();}  }
class C{  public static boolean canInteract(User issuer,User target,Guild guild){  if (guild.getOwner() == issuer)   return true;  if (guild.getOwner() == target)   return false;  List<Role> issuerRoles=guild.getRolesForUser(issuer);  List<Role> targetRoles=guild.getRolesForUser(target);  if (issuerRoles == null)   throw new IllegalArgumentException("Issuer user is not in the provided guild!");  if (targetRoles == null)   throw new IllegalArgumentException("Target user is not in the provided guild!");  return !issuerRoles.isEmpty() && (targetRoles.isEmpty() || canInteract(issuerRoles.get(0),targetRoles.get(0)));}  }
class C{  public static Number minus(Character left,Number right){  return NumberNumberMinus.minus(Integer.valueOf(left),right);}  }
class C{  public static String createHandlerRequestPath(final CacheKey cacheKey,final HttpServletRequest request){  final String handlerQueryPath=getRequestHandlerPath(cacheKey.getGroupName(),cacheKey.getType());  return request.getServletPath() + handlerQueryPath;}  }
class C{  @Override public void postSolve(Contact contact,ContactImpulse impulse){  Object dataA=contact.getFixtureA().getBody().getUserData();  Object dataB=contact.getFixtureB().getBody().getUserData();  boolean hitCane=false;  if (dataA != null && !(dataA instanceof Gumball) && (Integer)dataA > TiltGameView.GUMBALL_PURPLE) {    hitCane=true;  } else   if (dataB != null && !(dataB instanceof Gumball) && (Integer)dataB > TiltGameView.GUMBALL_PURPLE) {    hitCane=true;  }  if (hitCane && impulse.normalImpulses[0] > 80) {    playBounceSound(impulse.normalImpulses[0]);  }}  }
class C{  @Dev public PlayerHasKilledNumberOfCreaturesCondition(Map<String,Integer> kills){  creatures=new HashMap<String,Integer>();  creatures.putAll(kills);}  }
class C{  public void commit() throws RollbackException, HeuristicMixedException, HeuristicRollbackException, SecurityException, SystemException {  LogWriterI18n writer=TransactionUtils.getLogWriterI18n();  try {    XAResource xar=null;    XAResource xar1=null;    int loop=0;    Boolean isActive=Boolean.FALSE;synchronized (this.resourceMap) {      Map.Entry entry;      Iterator iterator=resourceMap.entrySet().iterator();      while (iterator.hasNext()) {        try {          entry=(Map.Entry)iterator.next();          xar=(XAResource)entry.getKey();          isActive=(Boolean)entry.getValue();          if (loop == 0)           xar1=xar;          loop++;          if (isActive.booleanValue()) {            xar.end(xid,XAResource.TMSUCCESS);            entry.setValue(Boolean.FALSE);          }        } catch (        Exception e) {          if (VERBOSE)           writer.info(LocalizedStrings.ONE_ARG,"GlobalTransaction::commit:Exception in delisting XAResource",e);        }      }    }    if (xar1 != null)     xar1.commit(xid,true);    status=Status.STATUS_COMMITTED;    if (VERBOSE)     writer.fine("GlobalTransaction::commit:Transaction committed successfully");  } catch (  Exception e) {    status=Status.STATUS_ROLLING_BACK;    try {      rollback();    } catch (    VirtualMachineError err) {      SystemFailure.initiateFailure(err);      throw err;    }catch (    Throwable t) {      SystemFailure.checkFailure();      status=Status.STATUS_ROLLEDBACK;      String exception=LocalizedStrings.GlobalTransaction_GLOBALTRANSACTION_COMMIT_ERROR_IN_COMMITTING_BUT_TRANSACTION_COULD_NOT_BE_ROLLED_BACK_DUE_TO_EXCEPTION_0.toLocalizedString(t);      if (VERBOSE)       writer.fine(exception,t);      SystemException sysEx=new SystemException(exception);      sysEx.initCause(t);      throw sysEx;    }    String exception=LocalizedStrings.GlobalTransaction_GLOBALTRANSACTION_COMMIT_ERROR_IN_COMMITTING_THE_TRANSACTION_TRANSACTION_ROLLED_BACK_EXCEPTION_0_1.toLocalizedString(new Object[]{e," " + (e instanceof XAException ? ("Error Code =" + ((XAException)e).errorCode) : "")});    if (VERBOSE)     writer.fine(exception,e);    RollbackException rbEx=new RollbackException(exception);    rbEx.initCause(e);    throw rbEx;  } finally {    TransactionManagerImpl.getTransactionManager().cleanGlobalTransactionMap(transactions);    transactions.clear();  }}  }
class C{  @Override protected EClass eStaticClass(){  return SGraphPackage.Literals.TRANSITION;}  }
class C{  protected NamedList<NamedList> handleAnalysisRequest(FieldAnalysisRequest request,IndexSchema schema){  NamedList<NamedList> analysisResults=new SimpleOrderedMap<>();  NamedList<NamedList> fieldTypeAnalysisResults=new SimpleOrderedMap<>();  if (request.getFieldTypes() != null) {    for (    String fieldTypeName : request.getFieldTypes()) {      FieldType fieldType=schema.getFieldTypes().get(fieldTypeName);      fieldTypeAnalysisResults.add(fieldTypeName,analyzeValues(request,fieldType,null));    }  }  NamedList<NamedList> fieldNameAnalysisResults=new SimpleOrderedMap<>();  if (request.getFieldNames() != null) {    for (    String fieldName : request.getFieldNames()) {      FieldType fieldType=schema.getFieldType(fieldName);      fieldNameAnalysisResults.add(fieldName,analyzeValues(request,fieldType,fieldName));    }  }  analysisResults.add("field_types",fieldTypeAnalysisResults);  analysisResults.add("field_names",fieldNameAnalysisResults);  return analysisResults;}  }
class C{  public String replacePath(String inputURI){  if (inputURI.contains(TemporaryDirectoryManager.DIRECTORY_TEMPLATE) && passedInDirectoryName != null && !passedInDirectoryName.isEmpty()) {    final String mungedURI=inputURI.replace(TemporaryDirectoryManager.DIRECTORY_TEMPLATE,passedInDirectoryName);    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("URI changed to " + mungedURI);    }    return mungedURI;  } else {    LOGGER.debug("Returning inputURI unchanged: " + inputURI);    return inputURI;  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public ul addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public static Text createTextLeft(String title,Composite parent,FormToolkit toolkit){  Label createLabel=toolkit.createLabel(parent,title);  GridData gd=new GridData();  createLabel.setLayoutData(gd);  gd.verticalAlignment=SWT.TOP;  Text text=toolkit.createText(parent,"");  gd=new GridData(SWT.FILL,SWT.LEFT,true,false);  gd.horizontalIndent=30;  gd.verticalAlignment=SWT.TOP;  gd.horizontalAlignment=SWT.RIGHT;  gd.minimumWidth=200;  text.setLayoutData(gd);  return text;}  }
class C{  public MethodRef(String declClass,String[] argTypes,String returnType,String methodName){  mDeclClass=declClass;  mArgTypes=argTypes;  mReturnType=returnType;  mMethodName=methodName;}  }
class C{  @SuppressWarnings({"unchecked"}) public static <T>T[] insertAt(T[] dest,T[] src,int offset,Class componentType){  T[] temp=(T[])Array.newInstance(componentType,dest.length + src.length - 1);  System.arraycopy(dest,0,temp,0,offset);  System.arraycopy(src,0,temp,offset,src.length);  System.arraycopy(dest,offset + 1,temp,src.length + offset,dest.length - offset - 1);  return temp;}  }
class C{  @Override public boolean isEmpty(){  return size == 0;}  }
class C{  public void add(T object){synchronized (mLock) {    if (mOriginalValues != null) {      mOriginalValues.add(object);    } else {      mObjects.add(object);    }  }  if (mNotifyOnChange)   notifyDataSetChanged();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:48.306 -0500",hash_original_method="C730C766F4F6CE91266CBA72D38C529A",hash_generated_method="023C0B2F9BE49BF16B5DD6A189CAE77F") private boolean inSamePackage(Class<?> c1,Class<?> c2){  String nameC1=c1.getName();  String nameC2=c2.getName();  int indexDotC1=nameC1.lastIndexOf('.');  int indexDotC2=nameC2.lastIndexOf('.');  if (indexDotC1 != indexDotC2) {    return false;  }  if (indexDotC1 == -1) {    return true;  }  return nameC1.regionMatches(0,nameC2,0,indexDotC1);}  }
class C{  public Matrix4d billboardCylindrical(Vector3dc objPos,Vector3dc targetPos,Vector3dc up){  double dirX=targetPos.x() - objPos.x();  double dirY=targetPos.y() - objPos.y();  double dirZ=targetPos.z() - objPos.z();  double leftX=up.y() * dirZ - up.z() * dirY;  double leftY=up.z() * dirX - up.x() * dirZ;  double leftZ=up.x() * dirY - up.y() * dirX;  double invLeftLen=1.0 / Math.sqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);  leftX*=invLeftLen;  leftY*=invLeftLen;  leftZ*=invLeftLen;  dirX=leftY * up.z() - leftZ * up.y();  dirY=leftZ * up.x() - leftX * up.z();  dirZ=leftX * up.y() - leftY * up.x();  double invDirLen=1.0 / Math.sqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);  dirX*=invDirLen;  dirY*=invDirLen;  dirZ*=invDirLen;  m00=leftX;  m01=leftY;  m02=leftZ;  m03=0.0;  m10=up.x();  m11=up.y();  m12=up.z();  m13=0.0;  m20=dirX;  m21=dirY;  m22=dirZ;  m23=0.0;  m30=objPos.x();  m31=objPos.y();  m32=objPos.z();  m33=1.0;  properties=PROPERTY_AFFINE;  return this;}  }
class C{  public String trimChar(String str,final char ch){  Boolean b=true, e=true;  str=str.trim();  while (str.length() > 0 && (b || e)) {    if (str.charAt(0) == ch)     str=str.substring(1,str.length()); else     b=false;    if (str.charAt(str.length() - 1) == ch)     str=str.substring(0,str.length() - 1); else     e=false;  }  return str;}  }
class C{  public void subscribeToBrokerServiceNoDiscount() throws Exception {  VendorData supplierData=setupNewSupplier("2013-01-01 08:00:00");  setCutOffDay(supplierData.getAdminKey(),1);  setDateFactory("2013-01-02 20:00:00");  VOServiceDetails supplService=createPublishActivateService(supplierData,TestPriceModel.EXAMPLE_RATA_WEEK_ROLES,"supplSrvForBroker");  updateOperatorRevenueShare(5.0D,supplService.getKey());  updatePartnerRevenueShares(15.0D,20.0D,supplService);  VendorData brokerData=setupNewBroker("2013-01-03 08:10:00");  CustomerData brokerCustomerData=registerCustomer(brokerData,"brokerCustomer");  updateMarketplaceRevenueShare(10.0D,brokerData.getMarketplaceId(0));  setDateFactory("2013-01-03 10:00:00");  VOServiceDetails brokerService=grantResalePermission(supplierData,supplService,brokerData);  brokerService=publishActivateService(brokerData,brokerService);  subscribe(brokerCustomerData.getAdminUser(),"brokerSubscr1",brokerService,"2013-01-04 00:00:00","ADMIN");  resetCutOffDay(supplierData.getAdminKey());  cacheTestData("subscribeToBrokerServiceNoDiscount",new TestData(supplierData,brokerData));}  }
class C{  @Override public boolean remove(Object obj){  return removeFirstOccurrenceImpl(obj);}  }
class C{  private static Review current(Cursor c){  Review review=new Review();  Syncing.from(c,review);  int col=c.getColumnIndex(RESTAURANT_ID);  if (col >= 0) {    review.restaurantId=c.getLong(col);  }  col=c.getColumnIndex(TYPE_ID);  if (col >= 0) {    review.type=Review.Type.get(c.getInt(col));  }  col=c.getColumnIndex(CONTACT_ID);  if (col >= 0) {    review.userId=c.getLong(col);  }  col=c.getColumnIndex(COMMENTS);  if (col >= 0) {    review.comments=c.getString(col);  }  col=c.getColumnIndex(RATING);  if (col >= 0) {    review.rating=c.getInt(col);  }  col=c.getColumnIndex(WRITTEN_ON);  if (col >= 0) {    review.writtenOn=c.getString(col);  }  return review;}  }
class C{  @Override public void write(final String filename){  try {    this.openFile(filename);    this.handler.writeHeaderAndStartElement(this.writer);    this.handler.startPlans(this.population,this.writer);    this.handler.writeSeparator(this.writer);    this.writePersons();    this.handler.endPlans(this.writer);    log.info("Population written to: " + filename);  } catch (  IOException e) {    throw new UncheckedIOException(e);  } finally {    this.close();    counter.printCounter();    counter.reset();  }}  }
class C{  public void display() throws IOException, ObjectNotFoundException, OperationNotPermittedException, ValidationException, OrganizationAuthoritiesException {  VOPriceModel priceModel=model.getService().getPriceModel().getVo();  ExternalPriceModelDisplayHandler displayHandler=new ExternalPriceModelDisplayHandler();  displayHandler.setContent(priceModel.getPresentation());  displayHandler.setContentType(priceModel.getPresentationDataType());  displayHandler.display();}  }
class C{  public static void main(String[] args){  Log.printLine("Starting ContainerCloudSimExample1...");  try {    int num_user=1;    Calendar calendar=Calendar.getInstance();    boolean trace_flag=false;    CloudSim.init(num_user,calendar,trace_flag);    ContainerAllocationPolicy containerAllocationPolicy=new PowerContainerAllocationPolicySimple();    PowerContainerVmSelectionPolicy vmSelectionPolicy=new PowerContainerVmSelectionPolicyMaximumUsage();    HostSelectionPolicy hostSelectionPolicy=new HostSelectionPolicyFirstFit();    double overUtilizationThreshold=0.80;    double underUtilizationThreshold=0.70;    hostList=new ArrayList<ContainerHost>();    hostList=createHostList(ConstantsExamples.NUMBER_HOSTS);    cloudletList=new ArrayList<ContainerCloudlet>();    vmList=new ArrayList<ContainerVm>();    ContainerVmAllocationPolicy vmAllocationPolicy=new PowerContainerVmAllocationPolicyMigrationAbstractHostSelection(hostList,vmSelectionPolicy,hostSelectionPolicy,overUtilizationThreshold,underUtilizationThreshold);    int overBookingFactor=80;    ContainerDatacenterBroker broker=createBroker(overBookingFactor);    int brokerId=broker.getId();    cloudletList=createContainerCloudletList(brokerId,ConstantsExamples.NUMBER_CLOUDLETS);    containerList=createContainerList(brokerId,ConstantsExamples.NUMBER_CLOUDLETS);    vmList=createVmList(brokerId,ConstantsExamples.NUMBER_VMS);    String logAddress="~/Results";    @SuppressWarnings("unused") PowerContainerDatacenter e=(PowerContainerDatacenter)createDatacenter("datacenter",PowerContainerDatacenterCM.class,hostList,vmAllocationPolicy,containerAllocationPolicy,getExperimentName("ContainerCloudSimExample-1",String.valueOf(overBookingFactor)),ConstantsExamples.SCHEDULING_INTERVAL,logAddress,ConstantsExamples.VM_STARTTUP_DELAY,ConstantsExamples.CONTAINER_STARTTUP_DELAY);    broker.submitCloudletList(cloudletList.subList(0,containerList.size()));    broker.submitContainerList(containerList);    broker.submitVmList(vmList);    CloudSim.terminateSimulation(86400.00);    CloudSim.startSimulation();    CloudSim.stopSimulation();    List<ContainerCloudlet> newList=broker.getCloudletReceivedList();    printCloudletList(newList);    Log.printLine("ContainerCloudSimExample1 finished!");  } catch (  Exception e) {    e.printStackTrace();    Log.printLine("Unwanted errors happen");  }}  }
class C{  public void testMultivariateMIforDependentVariablesFromFile() throws Exception {  ArrayFileReader afr=new ArrayFileReader("demos/data/4ColsPairedDirectDependence-1.txt");  double[][] data=afr.getDouble2DMatrix();  int[] kNNs={1,2,3,4,5,6,10,15};  double[] expectedFromMILCA_2={8.44056282,7.69813699,7.26909347,6.97095249,6.73728113,6.53105867,5.96391264,5.51627278};  System.out.println("Kraskov comparison 6 - multivariate dependent data 1");  checkMIForGivenData(MatrixUtils.selectColumns(data,new int[]{0,1,2,3}),kNNs,expectedFromMILCA_2);}  }
class C{  public Map<String,String> toMap(){  return putIn(new HashMap<String,String>(values.length));}  }
class C{  public void doBucketsSyncOnPrimaryLoss(TestType typeOfTest){  IgnoredException.addIgnoredException("killing member's ds");  IgnoredException.addIgnoredException("killing member's ds");  Host host=Host.getHost(0);  VM vm0=host.getVM(0);  VM vm1=host.getVM(1);  VM vm2=host.getVM(2);  Set<VM> verifyVMs=new HashSet<VM>();  final String name=this.getUniqueName() + "Region";  verifyVMs.add(vm0);  verifyVMs.add(vm1);  verifyVMs.add(vm2);  disconnectAllFromDS();  try {    createRegion(vm0,name,typeOfTest);    createRegion(vm1,name,typeOfTest);    createRegion(vm2,name,typeOfTest);    createEntry1(vm0);    VM primaryOwner;    if (isPrimaryForBucket0(vm0))     primaryOwner=vm0; else     if (isPrimaryForBucket0(vm1))     primaryOwner=vm1; else     primaryOwner=vm2;    verifyVMs.remove(primaryOwner);    VM creatorVM=null;    InternalDistributedMember primaryID=getID(primaryOwner);    VersionSource primaryVersionID=getVersionID(primaryOwner);    for (    VM vm : verifyVMs) {      creatorVM=vm;      createEntry2(creatorVM,primaryID,primaryVersionID);      break;    }    verifyVMs.remove(creatorVM);    DistributedTestUtils.crashDistributedSystem(primaryOwner);    for (    VM vm : verifyVMs) {      verifySynchronized(vm,primaryID);    }  }  finally {    disconnectAllFromDS();  }}  }
class C{  public void test_ConstructorIII(){  Date d1=new Date(70,0,1);  Date d2=new Date(0 + d1.getTimezoneOffset() * 60 * 1000);  assertTrue("Created incorrect date",d1.equals(d2));  Date date=new Date(99,5,22);  Calendar cal=new GregorianCalendar(1999,Calendar.JUNE,22);  assertTrue("Wrong time zone",date.equals(cal.getTime()));}  }
class C{  public String toString(){  return "[Place " + player.getMark() + " @ ("+ col+ ","+ row+ ")]";}  }
class C{  public NodeRepresentation(){}  }
class C{  public String metaphone(String txt){  boolean hard=false;  if ((txt == null) || (txt.length() == 0)) {    return "";  }  if (txt.length() == 1) {    return txt.toUpperCase();  }  char[] inwd=txt.toUpperCase().toCharArray();  StringBuffer local=new StringBuffer(40);  StringBuffer code=new StringBuffer(10);switch (inwd[0]) {case 'K':case 'G':case 'P':    if (inwd[1] == 'N') {      local.append(inwd,1,inwd.length - 1);    } else {      local.append(inwd);    }  break;case 'A':if (inwd[1] == 'E') {  local.append(inwd,1,inwd.length - 1);} else {  local.append(inwd);}break;case 'W':if (inwd[1] == 'R') {local.append(inwd,1,inwd.length - 1);break;}if (inwd[1] == 'H') {local.append(inwd,1,inwd.length - 1);local.setCharAt(0,'W');} else {local.append(inwd);}break;case 'X':inwd[0]='S';local.append(inwd);break;default :local.append(inwd);}int wdsz=local.length();int n=0;while ((code.length() < this.getMaxCodeLen()) && (n < wdsz)) {char symb=local.charAt(n);if ((symb != 'C') && (isPreviousChar(local,n,symb))) {n++;} else {switch (symb) {case 'A':case 'E':case 'I':case 'O':case 'U':if (n == 0) {code.append(symb);}break;case 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {break;}code.append(symb);break;case 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && (this.frontv.indexOf(local.charAt(n + 1)) >= 0)) {break;}if (regionMatch(local,n,"CIA")) {code.append('X');break;}if (!isLastChar(wdsz,n) && (this.frontv.indexOf(local.charAt(n + 1)) >= 0)) {code.append('S');break;}if (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {code.append('K');break;}if (isNextChar(local,n,'H')) {if ((n == 0) && (wdsz >= 3) && isVowel(local,2)) {code.append('K');} else {code.append('X');}} else {code.append('K');}break;case 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && (this.frontv.indexOf(local.charAt(n + 2)) >= 0)) {code.append('J');n+=2;} else {code.append('T');}break;case 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {break;}if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {break;}if ((n > 0) && (regionMatch(local,n,"GN") || regionMatch(local,n,"GNED"))) {break;}if (isPreviousChar(local,n,'G')) {hard=true;} else {hard=false;}if (!isLastChar(wdsz,n) && (this.frontv.indexOf(local.charAt(n + 1)) >= 0) && (!hard)) {code.append('J');} else {code.append('K');}break;case 'H':if (isLastChar(wdsz,n)) {break;}if ((n > 0) && (this.varson.indexOf(local.charAt(n - 1)) >= 0)) {break;}if (isVowel(local,n + 1)) {code.append('H');}break;case 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);break;case 'K':if (n > 0) {if (!isPreviousChar(local,n,'C')) {code.append(symb);}} else {code.append(symb);}break;case 'P':if (isNextChar(local,n,'H')) {code.append('F');} else {code.append(symb);}break;case 'Q':code.append('K');break;case 'S':if (regionMatch(local,n,"SH") || regionMatch(local,n,"SIO") || regionMatch(local,n,"SIA")) {code.append('X');} else {code.append('S');}break;case 'T':if (regionMatch(local,n,"TIA") || regionMatch(local,n,"TIO")) {code.append('X');break;}if (regionMatch(local,n,"TCH")) {break;}if (regionMatch(local,n,"TH")) {code.append('0');} else {code.append('T');}break;case 'V':code.append('F');break;case 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {code.append(symb);}break;case 'X':code.append('K');code.append('S');break;case 'Z':code.append('S');break;}n++;}if (code.length() > this.getMaxCodeLen()) {code.setLength(this.getMaxCodeLen());}}return code.toString();}  }
class C{  public int encodeMessage(byte[] outputBytes) throws SnmpTooBigException {  int encodingLength=0;  if (SNMP_LOGGER.isLoggable(Level.FINER)) {    SNMP_LOGGER.logp(Level.FINER,SnmpV3Message.class.getName(),"encodeMessage","Can't encode directly V3Message! Need a SecuritySubSystem");  }  throw new IllegalArgumentException("Can't encode");}  }
class C{  public String minRadiusTipText(){  return "The lower boundary for the radius of the clusters.";}  }
class C{  public boolean isAutocomplete(){  Object oo=get_Value(COLUMNNAME_IsAutocomplete);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public DaylightCondition(final DaylightPhase... daylightPhases){  super();  this.daylightPhases=Arrays.asList(daylightPhases);}  }
class C{  @Override public boolean markSupported(){  return false;}  }
class C{  void minimizeLocalICs(){  List<InnerClass> diff=computeICdiff();  List<InnerClass> actualICs=innerClasses;  List<InnerClass> localICs;  if (diff.isEmpty()) {    localICs=null;    if (actualICs != null && actualICs.isEmpty()) {      if (verbose > 0)       Utils.log.info("Warning: Dropping empty InnerClasses attribute from " + this);    }  } else   if (actualICs == null) {    localICs=Collections.emptyList();  } else {    localICs=diff;  }  setInnerClasses(localICs);  if (verbose > 1 && localICs != null)   Utils.log.fine("keeping local ICs in " + this + ": "+ localICs);}  }
class C{  public static TypeReference createExactTrusted(ResolvedJavaType type){  if (type == null) {    return null;  }  return new TypeReference(type,true);}  }
class C{  public boolean isPrivateUserGroup(){  return isPrivateUserGroup(this.type,this.autoDelete,this.name);}  }
class C{  private boolean journalRebuildRequired(){  final int REDUNDANT_OP_COMPACT_THRESHOLD=2000;  return redundantOpCount >= REDUNDANT_OP_COMPACT_THRESHOLD && redundantOpCount >= lruEntries.size();}  }
class C{  public ClassMarkerProcessor(ProjectMarkerProcessor projectProcessor,String className){  fProjectProcessor=projectProcessor;  fFile=DroidsafePluginUtilities.getFile(projectProcessor.getProject(),className);  fTaintedDataMap=projectProcessor.getTaintedDataMap(className);  fUnreachableSourceMethodMap=projectProcessor.getUnreachableSourceMethodMap(className);}  }
class C{  protected void configureExtraClasspathToken(WAR deployable,Element context){  getLogger().warn("Tomcat 5.x doesn't support extra classpath on WARs",this.getClass().getName());}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case EipPackage.EIP_MODEL__OWNED_ROUTES:    return getOwnedRoutes();case EipPackage.EIP_MODEL__OWNED_SERVICE_REFS:  return getOwnedServiceRefs();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @SuppressWarnings("rawtypes") public Object checkNotAllowedMethods(ProceedingJoinPoint pjp) throws Throwable {  Class targetClass=pjp.getTarget().getClass();  MethodSignature targetMethodSignature=(MethodSignature)pjp.getSignature();  String methodName=targetClass.getName() + "." + targetMethodSignature.getName();  configurationDaoHelper.checkNotAllowedMethod(methodName);  return pjp.proceed();}  }
class C{  private static int guessCapacity(int capacity,Map<CharSequence,CharSequence> replacements){  if (capacity >= 0) {    return capacity;  }  boolean possiblyBigger=false;  for (  Map.Entry<CharSequence,CharSequence> entry : replacements.entrySet()) {    if (entry.getValue().length() > entry.getKey().length()) {      possiblyBigger=true;      break;    }  }  return possiblyBigger ? replacements.size() * 3 / 2 : replacements.size();}  }
class C{  public void actionPerformed(ActionEvent e){  if (ADJUSTTIMER) {    long time=System.currentTimeMillis();    if (lastCall > 0) {      int nextDelay=(int)(previousDelay - time + lastCall + getRepaintInterval());      if (nextDelay < MINIMUM_DELAY) {        nextDelay=MINIMUM_DELAY;      }      timer.setInitialDelay(nextDelay);      previousDelay=nextDelay;    }    timer.start();    lastCall=time;  }  incrementAnimationIndex();}  }
class C{  @Catch({UnexpectedException.class,ViPRException.class}) public static void handleJsonError(Exception e){  if (request.isAjax() || StringUtils.endsWithIgnoreCase(request.action,"json")) {    Throwable cause=Common.unwrap(e);    String message=Common.getUserMessage(cause);    Logger.error(e,"AJAX request failed: %s.%s [%s]",request.controller,request.action,message);    error(message);  }}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  SpecialSegmentTreeNode(int left,int right){  super(left,right);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void propertyChange(java.beans.PropertyChangeEvent evt){  setText(evt.getNewValue().toString());}  }
class C{  public boolean forwardIfCurrent(String first,char second){  int start=pos;  if (!forwardIfCurrent(first))   return false;  removeSpace();  boolean rtn=forwardIfCurrent(second);  if (!rtn)   pos=start;  return rtn;}  }
class C{  protected void addVetoableChangeSupport(ClassNode declaringClass){  ClassNode vcsClassNode=ClassHelper.make(VetoableChangeSupport.class);  ClassNode vclClassNode=ClassHelper.make(VetoableChangeListener.class);  FieldNode vcsField=declaringClass.addField("this$vetoableChangeSupport",ACC_FINAL | ACC_PRIVATE | ACC_SYNTHETIC,vcsClassNode,ctorX(vcsClassNode,args(varX("this"))));  declaringClass.addMethod(new MethodNode("addVetoableChangeListener",ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(vclClassNode,"listener")),ClassNode.EMPTY_ARRAY,stmt(callX(fieldX(vcsField),"addVetoableChangeListener",args(varX("listener",vclClassNode))))));  declaringClass.addMethod(new MethodNode("addVetoableChangeListener",ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.STRING_TYPE,"name"),param(vclClassNode,"listener")),ClassNode.EMPTY_ARRAY,stmt(callX(fieldX(vcsField),"addVetoableChangeListener",args(varX("name",ClassHelper.STRING_TYPE),varX("listener",vclClassNode))))));  declaringClass.addMethod(new MethodNode("removeVetoableChangeListener",ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(vclClassNode,"listener")),ClassNode.EMPTY_ARRAY,stmt(callX(fieldX(vcsField),"removeVetoableChangeListener",args(varX("listener",vclClassNode))))));  declaringClass.addMethod(new MethodNode("removeVetoableChangeListener",ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.STRING_TYPE,"name"),param(vclClassNode,"listener")),ClassNode.EMPTY_ARRAY,stmt(callX(fieldX(vcsField),"removeVetoableChangeListener",args(varX("name",ClassHelper.STRING_TYPE),varX("listener",vclClassNode))))));  declaringClass.addMethod(new MethodNode("fireVetoableChange",ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.STRING_TYPE,"name"),param(ClassHelper.OBJECT_TYPE,"oldValue"),param(ClassHelper.OBJECT_TYPE,"newValue")),new ClassNode[]{ClassHelper.make(PropertyVetoException.class)},stmt(callX(fieldX(vcsField),"fireVetoableChange",args(varX("name",ClassHelper.STRING_TYPE),varX("oldValue"),varX("newValue"))))));  declaringClass.addMethod(new MethodNode("getVetoableChangeListeners",ACC_PUBLIC,vclClassNode.makeArray(),Parameter.EMPTY_ARRAY,ClassNode.EMPTY_ARRAY,returnS(callX(fieldX(vcsField),"getVetoableChangeListeners"))));  declaringClass.addMethod(new MethodNode("getVetoableChangeListeners",ACC_PUBLIC,vclClassNode.makeArray(),params(param(ClassHelper.STRING_TYPE,"name")),ClassNode.EMPTY_ARRAY,returnS(callX(fieldX(vcsField),"getVetoableChangeListeners",args(varX("name",ClassHelper.STRING_TYPE))))));}  }
class C{  public static URI createURI(URI archiveFile,String entry) throws IllegalArgumentException {  URI result=URI.createHierarchicalURI("archive",archiveFile.toString() + "!",null,new String[]{entry},null,null);  return result;}  }
class C{  private void start(){  if (mDestinations == null || !mMapFragment.isInitialised()) {    return;  }  if (!mIsLive) {    startTracking();  }}  }
class C{  public boolean isRefreshTokenRequested(){  return this.refreshTokenRequested;}  }
class C{  private void proceedPrepare(){  for (  Map.Entry<UUID,Collection<UUID>> entry : txNodes.entrySet()) {    UUID nodeId=entry.getKey();    if (!nodes.containsKey(nodeId) && nodeId.equals(cctx.localNodeId()))     continue;    if (failedNodeIds.contains(nodeId)) {      for (      UUID id : entry.getValue()) {        if (txNodes.containsKey(id) || id.equals(cctx.localNodeId()))         continue;        MiniFuture fut=new MiniFuture(id);        add(fut);        GridCacheTxRecoveryRequest req=new GridCacheTxRecoveryRequest(tx,nodeTransactions(id),false,futureId(),fut.futureId(),tx.activeCachesDeploymentEnabled());        try {          cctx.io().send(id,req,tx.ioPolicy());          if (msgLog.isDebugEnabled()) {            msgLog.debug("Recovery fut, sent request to backup [txId=" + tx.nearXidVersion() + ", dhtTxId="+ tx.xidVersion()+ ", node="+ id+ ']');          }        } catch (        ClusterTopologyCheckedException ignored) {          fut.onNodeLeft(id);        }catch (        IgniteCheckedException e) {          if (msgLog.isDebugEnabled()) {            msgLog.debug("Recovery fut, failed to send request to backup [txId=" + tx.nearXidVersion() + ", dhtTxId="+ tx.xidVersion()+ ", node="+ id+ ", err="+ e+ ']');          }          fut.onError(e);          break;        }      }    } else {      MiniFuture fut=new MiniFuture(nodeId);      add(fut);      GridCacheTxRecoveryRequest req=new GridCacheTxRecoveryRequest(tx,nodeTransactions(nodeId),false,futureId(),fut.futureId(),tx.activeCachesDeploymentEnabled());      try {        cctx.io().send(nodeId,req,tx.ioPolicy());        if (msgLog.isDebugEnabled()) {          msgLog.debug("Recovery fut, sent request to primary [txId=" + tx.nearXidVersion() + ", dhtTxId="+ tx.xidVersion()+ ", node="+ nodeId+ ']');        }      } catch (      ClusterTopologyCheckedException ignored) {        fut.onNodeLeft(nodeId);      }catch (      IgniteCheckedException e) {        if (msgLog.isDebugEnabled()) {          msgLog.debug("Recovery fut, failed to send request to primary [txId=" + tx.nearXidVersion() + ", dhtTxId="+ tx.xidVersion()+ ", node="+ nodeId+ ", err="+ e+ ']');        }        fut.onError(e);        break;      }    }  }  markInitialized();}  }
class C{  private void validateOperatorAttribute(LogicalPlan dag,String name,int memory){  LogicalPlan.OperatorMeta oMeta=dag.getOperatorMeta(name);  Attribute.AttributeMap attrs=oMeta.getAttributes();  Assert.assertEquals((int)attrs.get(OperatorContext.MEMORY_MB),memory);  Assert.assertEquals("Application window id is 2 ",(int)attrs.get(OperatorContext.APPLICATION_WINDOW_COUNT),2);  Assert.assertEquals("Locality host is host1",attrs.get(OperatorContext.LOCALITY_HOST),"host1");  Assert.assertEquals(attrs.get(OperatorContext.PARTITIONER).getClass(),TestPartitioner.class);  Assert.assertEquals("Checkpoint window count ",(int)attrs.get(OperatorContext.CHECKPOINT_WINDOW_COUNT),120);  Assert.assertEquals("Operator is stateless ",attrs.get(OperatorContext.STATELESS),true);  Assert.assertEquals("SPIN MILLIS is set to 20 ",(int)attrs.get(OperatorContext.SPIN_MILLIS),20);}  }
class C{  public static TimeOfDay hourAndMinuteFromDate(Date dateTime){  return hourAndMinuteFromDate(dateTime,null);}  }
class C{  private void createCache(Properties props) throws Exception {  DistributedSystem ds=getSystem(props);  assertNotNull(ds);  ds.disconnect();  ds=getSystem(props);  cache=CacheFactory.create(ds);  assertNotNull(cache);}  }
class C{  @Override public void forceRefetch(String url,WebPage page,boolean asap){  if (page.getFetchInterval() > maxInterval)   page.setFetchInterval(Math.round(maxInterval * 0.9f));  page.setStatus((int)CrawlStatus.STATUS_UNFETCHED);  page.setRetriesSinceFetch(0);  page.setModifiedTime(0L);  if (asap)   page.setFetchTime(System.currentTimeMillis());}  }
class C{  public List<String> compile(File dir) throws ObjectStoreConfigException, IOException {  if (resolver == null) {    resolver=buildJavaNameResolver(pkgPrefix,memPrefix,ns,model,normalizer,cl);  }  List<String> classes=buildJavaFiles(dir);  saveConceptResources(dir);  if (!classes.isEmpty()) {    ClassPathBuilder cb=new ClassPathBuilder();    cb.append(getClass().getClassLoader()).append(cl);    List<File> classpath=cb.toFileList();    compiler.compile(classes,dir,classpath);  }  return classes;}  }
class C{  protected double lerp(double val){  return val * val * val* (val * (6f * val - 15f) + 10f);}  }
class C{  @Override public void process(Map<K,V> tuple){  if (emitted) {    return;  }  V val=tuple.get(getKey());  if (val == null) {    return;  }  if (compareValue(val.doubleValue())) {    first.emit(cloneTuple(tuple));    emitted=true;  }}  }
class C{  @Override protected void initData(){  this.registerReceiver();}  }
class C{  public void createKinesisClient(String accessKey,String secretKey,String endPoint) throws Exception {  if (client == null) {    try {      client=new AmazonKinesisClient(new BasicAWSCredentials(accessKey,secretKey));      if (endPoint != null) {        client.setEndpoint(endPoint);      }    } catch (    Exception e) {      throw new AmazonClientException("Unable to load credentials",e);    }  }}  }
class C{  public static boolean assertNotNull(final Object obj){  if (obj == null) {    throw new ExamException("Is null");  }  return true;}  }
class C{  public final void testAddAllHelperTextIdsFromArray(){  CharSequence helperText1=getContext().getText(android.R.string.cancel);  CharSequence helperText2=getContext().getText(android.R.string.copy);  int[] helperTextIds=new int[2];  helperTextIds[0]=android.R.string.cancel;  helperTextIds[1]=android.R.string.copy;  PasswordEditText passwordEditText=new PasswordEditText(getContext());  passwordEditText.addAllHelperTextIds(helperTextIds);  passwordEditText.addAllHelperTextIds(helperTextIds);  Collection<CharSequence> helperTexts=passwordEditText.getHelperTexts();  assertEquals(helperTextIds.length,helperTexts.size());  Iterator<CharSequence> iterator=helperTexts.iterator();  assertEquals(helperText1,iterator.next());  assertEquals(helperText2,iterator.next());}  }
class C{  synchronized void addNamingListener(String nm,String filter,SearchControls ctls,NamingListener l) throws NamingException {  if (l instanceof ObjectChangeListener || l instanceof NamespaceChangeListener) {    NotifierArgs args=new NotifierArgs(nm,filter,ctls,l);    NamingEventNotifier notifier=notifiers.get(args);    if (notifier == null) {      notifier=new NamingEventNotifier(this,ctx,args,l);      notifiers.put(args,notifier);    } else {      notifier.addNamingListener(l);    }  }  if (l instanceof UnsolicitedNotificationListener) {    if (unsolicited == null) {      unsolicited=new Vector<>(3);    }    unsolicited.addElement((UnsolicitedNotificationListener)l);  }}  }
class C{  public static boolean isConfigured(){  return Logger.getRootLogger().getAllAppenders().hasMoreElements();}  }
class C{  public static double floatToDoubleLower(float f){  if (Float.isNaN(f)) {    return Double.NaN;  }  if (Float.isInfinite(f)) {    if (f < 0) {      return Double.NEGATIVE_INFINITY;    } else {      return Double.longBitsToDouble(0x47efffffffffffffL);    }  }  long bits=Double.doubleToRawLongBits((double)f);  if ((bits & 0x8000000000000000L) == 0) {    if (bits == 0L) {      return +0.0d;    }    if (f == Float.MIN_VALUE) {      return Double.longBitsToDouble(0x3690000000000001L);    }    if (Float.MIN_NORMAL > f) {      final long bits2=Double.doubleToRawLongBits((double)-Math.nextUp(-f));      bits=(bits >>> 1) + (bits2 >>> 1) + 1L;    } else {      bits-=0xfffffffL;    }    return Double.longBitsToDouble(bits);  } else {    if (bits == 0x8000000000000000L) {      return Double.longBitsToDouble(0xb690000000000000L);    }    if (f == -Float.MIN_VALUE) {      return Double.longBitsToDouble(0xb6a7ffffffffffffL);    }    if (-Float.MIN_NORMAL < f) {      final long bits2=Double.doubleToRawLongBits((double)-Math.nextUp(-f));      bits=(bits >>> 1) + (bits2 >>> 1) - 1L;    } else {      bits+=0xfffffffL;    }    return Double.longBitsToDouble(bits);  }}  }
class C{  @Override public void writeExternalIndexDropStmt(Table table,IIndex index,StringBuilder ddl){  ddl.append("DROP INDEX ");  printIdentifier(getIndexName(index),ddl);  printEndOfStatement(ddl);}  }
class C{  public InterruptedNamingException(String explanation){  super(explanation);}  }
class C{  @Override public int nextInt(){  return (int)nextLong();}  }
class C{  public boolean noThrownExceptions(){  return exceptions.isEmpty();}  }
class C{  public WildcardID(String value){  assert (value != null && value.contains(WILDCARD) && value.length() < 10);  mValue=value;  try {    mPattern=Pattern.compile(value.replace(WILDCARD,REGEX_WILDCARD));  } catch (  Exception e) {    throw new IllegalArgumentException("Invalid regex pattern for alias ID value [" + value + "]",e);  }  mWeight=calculateWeight();}  }
class C{  public boolean hasGainPercentage(){  return getGainPercentage() != null;}  }
class C{  static P11Key convertKey(Token token,Key key,String algo) throws InvalidKeyException {  return convertKey(token,key,algo,null);}  }
class C{  protected Anonymous_afterCode_1_Impl(){  super();}  }
class C{  public void output(OutputStream os) throws IOException, SpkacException {  OutputStreamWriter osw=null;  try {    osw=new OutputStreamWriter(os);    outputProperty(osw,SPKAC_PROPERTY,new String(Base64.encode(createSignedPublicKeyAndChallenge().getEncoded(ASN1Encoding.DER))));    outputProperty(osw,CN_PROPERTY,subject.getCN());    outputProperty(osw,OU_PROPERTY,subject.getOU());    outputProperty(osw,O_PROPERTY,subject.getO());    outputProperty(osw,L_PROPERTY,subject.getL());    outputProperty(osw,ST_PROPERTY,subject.getST());    outputProperty(osw,C_PROPERTY,subject.getC());  } catch (  IOException ex) {    throw new SpkacException(res.getString("NoOutputSpkac.exception.message"),ex);  } finally {    IOUtils.closeQuietly(osw);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:22.162 -0500",hash_original_method="51201694E0EE76265BF39848EF10BE9C",hash_generated_method="49E6B3D175AEB85C0CC035D6E473FA9A") public boolean isSecure(){  return false;}  }
class C{  public void appendOpenAnchorTag(String href,String style){  StringBuilder sb=new StringBuilder("<a");  if (href != null) {    sb.append(" href=\"");    sb.append(href);    sb.append("\"");  }  if (style != null) {    sb.append(" style=\"");    sb.append(style);    sb.append("\"");  }  sb.append(">");  text.append(sb.toString());}  }
class C{  @PostMapping @ResponseBody public ResponseEntity<Response<RoleVO>> create(@RequestBody @Valid @NotNull RoleVO role,HttpServletRequest req,HttpServletResponse resp){  RoleVO createdRole=m.map(service.save(m.map(role,Role.class)),RoleVO.class);  resp.addHeader(HttpHeaders.LOCATION,getLocationForCreatedResource(req,createdRole.getId().toString()));  return buildResponse(HttpStatus.CREATED,translate(Messages.CREATED),Messages.CREATED);}  }
class C{  @Override public void assign(String variable,String expression,Map<String,Object> transientState){  Object result=execute(expression,transientState);  state.put(variable,result);}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  public void update(byte[] input,int inOff,int length){  digest.update(input,inOff,length);}  }
class C{  public static KeyToken fromValues(byte[] token,byte[] address,int port){  return new KeyToken(token,address,port);}  }
class C{  private void rebuild(){  List<SearchResultDataLine> existing=new ArrayList<SearchResultDataLine>(_list);  List<SearchResultDataLine> hidden=new ArrayList<SearchResultDataLine>(HIDDEN);  simpleClear();  if (isSorted()) {    for (int i=0; i < existing.size(); i++) {      addSorted(existing.get(i));    }  } else {    for (int i=0; i < existing.size(); i++) {      add(existing.get(i));    }  }  Map<String,SearchResultDataLine> mergeMap=new HashMap<String,SearchResultDataLine>();  for (int i=0; i < hidden.size(); i++) {    SearchResultDataLine tl=hidden.get(i);    if (isSorted()) {      addSorted(tl);    } else {      add(tl);    }  }  if (isSorted()) {    for (    SearchResultDataLine line : mergeMap.values())     addSorted(line);  } else {    for (    SearchResultDataLine line : mergeMap.values())     add(line);  }}  }
class C{  public ScReplay createReplay(String instanceId,int expireTime) throws StorageCenterAPIException {  Parameters params=new Parameters();  params.add("description",NOTES_STRING);  params.add("expireTime",expireTime);  RestResult rr=restClient.post(String.format("StorageCenter/ScVolume/%s/CreateReplay",instanceId),params.toJson());  if (!checkResults(rr)) {    String msg=String.format("Error creating replay %s: %s",instanceId,rr.getErrorMsg());    LOG.warn(msg);    throw new StorageCenterAPIException(msg);  }  return gson.fromJson(rr.getResult(),ScReplay.class);}  }
class C{  public <T>T read(T value,String source) throws Exception {  return read(value,source,true);}  }
class C{  public static boolean isGzipRandomOutputFile(File file) throws FileNotFoundException {  return isGzipRandomOutputFile(new SeekableRandomAccessFile(file));}  }
