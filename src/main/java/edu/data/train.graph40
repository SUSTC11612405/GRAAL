class C{  private static void regDeleteKey(String subKey,int regLevel) throws RegisterFailedException {  int hKey=getHKeyByLevel(regLevel);  if (WinRegistryWrapper.WinRegDeleteKey(hKey,subKey) != ERROR_SUCCESS) {    throw new RegisterFailedException("Key " + subKey + " delete error.");  }}  }
class C{  private boolean calledWithin(Set<MemberHandle> calledBy,Class<?> pureClass,ProjectModel pm,MethodHandle callTo){  for (  MemberHandle memberHandle : calledBy) {    if (calledWithin(memberHandle,pureClass)) {      for (      MemberHandle call : pm.getCalls(memberHandle)) {        if (call.equals(callTo)) {          if (call instanceof StackArgumentsMethodHandle) {            if (((StackArgumentsMethodHandle)call).getLocalVariables().contains(0)) {              return true;            }          }        }      }    }  }  return false;}  }
class C{  public RoundedBitmapBuilder borderWidthDp(float width){  mBorderWidth=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,width,mDisplayMetrics);  return this;}  }
class C{  @Override public int doStartTag() throws JspException {  FacesContext facesContext=FacesContext.getCurrentInstance();  if (facesContext == null) {    throw new IllegalStateException(MessageUtils.getExceptionMessageString(MessageUtils.FACES_CONTEXT_NOT_FOUND_ID));  }  Object response=facesContext.getExternalContext().getResponse();  Method customFlush=ReflectionUtils.lookupMethod(response.getClass(),"flushContentToWrappedResponse",RIConstants.EMPTY_CLASS_ARGS);  if (customFlush != null) {    try {      pageContext.getOut().flush();      customFlush.invoke(response,RIConstants.EMPTY_METH_ARGS);    } catch (    IOException|IllegalAccessException|IllegalArgumentException|InvocationTargetException e) {      throw new JspException("Exception attemtping to write content above the <f:view> tag.",e);    }  } else {    if (LOGGER.isLoggable(Level.FINE)) {      LOGGER.log(Level.FINE,"jsf.core.taglib.viewtag.interweaving_failed");    }  }  int rc;  try {    rc=super.doStartTag();  } catch (  JspException e) {    if (LOGGER.isLoggable(Level.WARNING)) {      LOGGER.log(Level.WARNING,"Can't leverage base class",e);    }    throw e;  }catch (  Throwable t) {    if (LOGGER.isLoggable(Level.WARNING)) {      LOGGER.log(Level.WARNING,"Can't leverage base class",t);    }    throw new JspException(t);  }  pageContext.getResponse().setLocale(facesContext.getViewRoot().getLocale());  List<UIComponent> preViewLoadBundleComponents=LoadBundleTag.getPreViewLoadBundleComponentList();  if (!preViewLoadBundleComponents.isEmpty()) {    Iterator<UIComponent> iter=preViewLoadBundleComponents.iterator();    UIComponent cur;    while (iter.hasNext()) {      cur=iter.next();      LoadBundleTag.addChildToParentTagAndParentComponent(cur,this);    }    preViewLoadBundleComponents.clear();  }  Stack<UIComponentClassicTagBase> viewTagStack=SubviewTag.getViewTagStack();  viewTagStack.push(this);  return rc;}  }
class C{  @SuppressWarnings("unchecked") protected TypeToken(){  this.type=getSuperclassTypeParameter(getClass());  this.rawType=(Class<? super T>)$Gson$Types.getRawType(type);  this.hashCode=type.hashCode();}  }
class C{  public void write(byte[] b) throws IOException {  write(b,0,b.length);}  }
class C{  public int next(){  int node;  for (node=_currentNode; node != END; node=getNextNamespaceNode(_startNode,node,true)) {    if (getExpandedTypeID(node) == _nodeType || getNodeType(node) == _nodeType || getNamespaceType(node) == _nodeType) {      _currentNode=node;      return returnNode(node);    }  }  return (_currentNode=END);}  }
class C{  public Map.Entry<VersionTag,T> take(){  if (tombstoneMap.isEmpty()) {    return null;  } else {    long lowestTimestamp=Long.MAX_VALUE;    TreeMap<VersionTag,T> lowestMap=null;    for (    TreeMap<VersionTag,T> memberMap : tombstoneMap.values()) {      VersionTag firstTag=memberMap.firstKey();      long stamp=firstTag.getVersionTimeStamp();      if (stamp < lowestTimestamp) {        lowestTimestamp=stamp;        lowestMap=memberMap;      }    }    if (lowestMap == null) {      return null;    }    Entry<VersionTag,T> result=lowestMap.firstEntry();    lowestMap.remove(result.getKey());    if (lowestMap.isEmpty()) {      tombstoneMap.remove(result.getKey().getMemberID());    }    return result;  }}  }
class C{  public void addBreakpoint(BreakPoint breakpoint) throws DebuggerException {  final String className=breakpoint.getLocation().getClassName();  final int lineNumber=breakpoint.getLocation().getLineNumber();  List<ReferenceType> classes=vm.classesByName(className);  if (classes.isEmpty()) {    deferBreakpoint(breakpoint);    return;  }  ReferenceType clazz=classes.get(0);  List<com.sun.jdi.Location> locations;  try {    locations=clazz.locationsOfLine(lineNumber);  } catch (  AbsentInformationException|ClassNotPreparedException e) {    throw new DebuggerException(e.getMessage(),e);  }  if (locations.isEmpty()) {    throw new InvalidBreakPointException("Line " + lineNumber + " not found in class "+ className);  }  com.sun.jdi.Location location=locations.get(0);  if (location.method() == null) {    throw new InvalidBreakPointException("Invalid line " + lineNumber + " in class "+ className);  }  EventRequestManager requestManager=getEventManager();  for (  BreakpointRequest breakpointRequest : requestManager.breakpointRequests()) {    if (location.equals(breakpointRequest.location())) {      LOG.debug("Breakpoint at {} already set",location);      return;    }  }  try {    EventRequest breakPointRequest=requestManager.createBreakpointRequest(location);    breakPointRequest.setSuspendPolicy(EventRequest.SUSPEND_ALL);    String expression=breakpoint.getCondition();    if (!(expression == null || expression.isEmpty())) {      ExpressionParser parser=ExpressionParser.newInstance(expression);      breakPointRequest.putProperty("org.eclipse.che.ide.java.debug.condition.expression.parser",parser);    }    breakPointRequest.setEnabled(true);  } catch (  NativeMethodException|IllegalThreadStateException|InvalidRequestStateException e) {    throw new DebuggerException(e.getMessage(),e);  }  LOG.debug("Add breakpoint: {}",location);}  }
class C{  public void markAsDefinitelyUnknown(LocalVariableBinding local){  if (this != DEAD_END) {    this.tagBits|=NULL_FLAG_MASK;    long mask;    int position;    if ((position=local.id + this.maxFieldCount) < BitCacheSize) {      this.nullBit1|=(mask=1L << position);      this.nullBit4|=mask;      this.nullBit2&=(mask=~mask);      this.nullBit3&=mask;      if (COVERAGE_TEST_FLAG) {        if (CoverageTestId == 26) {          this.nullBit4=0;        }      }    } else {      int vectorIndex=(position / BitCacheSize) - 1;      if (this.extra == null) {        int length=vectorIndex + 1;        this.extra=new long[extraLength][];        for (int j=0; j < extraLength; j++) {          this.extra[j]=new long[length];        }      } else {        int oldLength;        if (vectorIndex >= (oldLength=this.extra[0].length)) {          for (int j=0; j < extraLength; j++) {            System.arraycopy(this.extra[j],0,(this.extra[j]=new long[vectorIndex + 1]),0,oldLength);          }        }      }      this.extra[2][vectorIndex]|=(mask=1L << (position % BitCacheSize));      this.extra[5][vectorIndex]|=mask;      this.extra[3][vectorIndex]&=(mask=~mask);      this.extra[4][vectorIndex]&=mask;      if (COVERAGE_TEST_FLAG) {        if (CoverageTestId == 27) {          this.extra[5][vectorIndex]=0;        }      }    }  }}  }
class C{  public synchronized void removeHyperlinkListener(HyperlinkListener listener){  listenerList.remove(HyperlinkListener.class,listener);}  }
class C{  public Object parse() throws XMLException {  try {    this.builder.startBuilding(this.reader.getSystemID(),this.reader.getLineNr());    this.scanData();    return this.builder.getResult();  } catch (  XMLException e) {    throw e;  }catch (  Exception e) {    XMLException error=new XMLException(e);    error.initCause(e);    throw error;  }}  }
class C{  Class<?> type(int id){  return types.get(id);}  }
class C{  public static int toInt(NibbleArray nibbles,int start){  return toInt(nibbles.get(start),nibbles.get(start + 1),nibbles.get(start + 2),nibbles.get(start + 3),nibbles.get(start + 4),nibbles.get(start + 5),nibbles.get(start + 6),nibbles.get(start + 7));}  }
class C{  public Format(){  this(new char[]{' ',' '},new char[]{'\n'},Format.SPACE_AFTER_LABEL | Format.COMPACT_EMPTY_ELEMENT);}  }
class C{  public DoubleConstant(ConstantPool pool,int index,double value){  super(pool,index);  _value=value;}  }
class C{  public final void mul(Matrix3d m1,Matrix3d m2){  if (this != m1 && this != m2) {    this.m00=m1.m00 * m2.m00 + m1.m01 * m2.m10 + m1.m02 * m2.m20;    this.m01=m1.m00 * m2.m01 + m1.m01 * m2.m11 + m1.m02 * m2.m21;    this.m02=m1.m00 * m2.m02 + m1.m01 * m2.m12 + m1.m02 * m2.m22;    this.m10=m1.m10 * m2.m00 + m1.m11 * m2.m10 + m1.m12 * m2.m20;    this.m11=m1.m10 * m2.m01 + m1.m11 * m2.m11 + m1.m12 * m2.m21;    this.m12=m1.m10 * m2.m02 + m1.m11 * m2.m12 + m1.m12 * m2.m22;    this.m20=m1.m20 * m2.m00 + m1.m21 * m2.m10 + m1.m22 * m2.m20;    this.m21=m1.m20 * m2.m01 + m1.m21 * m2.m11 + m1.m22 * m2.m21;    this.m22=m1.m20 * m2.m02 + m1.m21 * m2.m12 + m1.m22 * m2.m22;  } else {    double m00, m01, m02, m10, m11, m12, m20, m21, m22;    m00=m1.m00 * m2.m00 + m1.m01 * m2.m10 + m1.m02 * m2.m20;    m01=m1.m00 * m2.m01 + m1.m01 * m2.m11 + m1.m02 * m2.m21;    m02=m1.m00 * m2.m02 + m1.m01 * m2.m12 + m1.m02 * m2.m22;    m10=m1.m10 * m2.m00 + m1.m11 * m2.m10 + m1.m12 * m2.m20;    m11=m1.m10 * m2.m01 + m1.m11 * m2.m11 + m1.m12 * m2.m21;    m12=m1.m10 * m2.m02 + m1.m11 * m2.m12 + m1.m12 * m2.m22;    m20=m1.m20 * m2.m00 + m1.m21 * m2.m10 + m1.m22 * m2.m20;    m21=m1.m20 * m2.m01 + m1.m21 * m2.m11 + m1.m22 * m2.m21;    m22=m1.m20 * m2.m02 + m1.m21 * m2.m12 + m1.m22 * m2.m22;    this.m00=m00;    this.m01=m01;    this.m02=m02;    this.m10=m10;    this.m11=m11;    this.m12=m12;    this.m20=m20;    this.m21=m21;    this.m22=m22;  }}  }
class C{  @Override public int hashCode(){  int result;  result=(address != null ? address.hashCode() : 0);  result=29 * result + (city != null ? city.hashCode() : 0);  result=29 * result + (province != null ? province.hashCode() : 0);  result=29 * result + (country != null ? country.hashCode() : 0);  result=29 * result + (postalCode != null ? postalCode.hashCode() : 0);  return result;}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.newattr.com";  String qualifiedName="emp:newAttr";  Document doc;  NodeList elementList;  Node testAddr;  Attr newAttr;  Attr newAddrAttr;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("emp:address");  testAddr=elementList.item(0);  assertNotNull("empAddrNotNull",testAddr);  newAttr=doc.createAttributeNS(namespaceURI,qualifiedName);  newAddrAttr=((Element)testAddr).setAttributeNodeNS(newAttr);  assertNull("throw_Null",newAddrAttr);}  }
class C{  private List<Session> retrieveProductSessionDataForSessionId(String sessionId){  Query query=dm.createNamedQuery("Session.findEntriesForSessionId");  query.setParameter("sessionId",sessionId);  query.setParameter("sessionType",SessionType.SERVICE_SESSION);  return ParameterizedTypes.list(query.getResultList(),Session.class);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof StatisticalBarRenderer)) {    return false;  }  StatisticalBarRenderer that=(StatisticalBarRenderer)obj;  if (!PaintUtilities.equal(this.errorIndicatorPaint,that.errorIndicatorPaint)) {    return false;  }  if (!ObjectUtilities.equal(this.errorIndicatorStroke,that.errorIndicatorStroke)) {    return false;  }  return super.equals(obj);}  }
class C{  public static Object invokeInitializer(Class<?> cls,int methodID,Address argAddress,boolean isJvalue,boolean isDotDotStyle) throws Exception {  MemberReference mr=MemberReference.getMemberRef(methodID);  TypeReference tr=java.lang.JikesRVMSupport.getTypeForClass(cls).getTypeRef();  MethodReference methodRef=MemberReference.findOrCreate(tr,mr.getName(),mr.getDescriptor()).asMethodReference();  RVMMethod mth=methodRef.resolve();  Constructor<?> constMethod=java.lang.reflect.JikesRVMSupport.createConstructor(mth);  if (!mth.isPublic()) {    constMethod.setAccessible(true);  }  Object[] argObjs;  if (isJvalue) {    argObjs=packageParametersFromJValuePtr(methodRef,argAddress);  } else   if (isDotDotStyle) {    if (VM.BuildForPower64ELF_ABI) {      Address varargAddress=pushVarArgToSpillArea(methodID,false);      argObjs=packageParameterFromVarArg(methodRef,varargAddress);    } else {      if (VM.VerifyAssertions)       VM._assert(VM.BuildForSVR4ABI);      Address gluefp=Magic.getCallerFramePointer(Magic.getCallerFramePointer(Magic.getCallerFramePointer(Magic.getFramePointer())));      argObjs=packageParameterFromDotArgSVR4(methodRef,gluefp,false);    }  } else {    if (VM.BuildForPower64ELF_ABI) {      argObjs=packageParameterFromVarArg(methodRef,argAddress);    } else {      if (VM.VerifyAssertions)       VM._assert(VM.BuildForSVR4ABI);      argObjs=packageParameterFromVarArgSVR4(methodRef,argAddress);    }  }  return constMethod.newInstance(argObjs);}  }
class C{  private int[] parseMetaDataInformation() throws UserError {  int[] selectedColumns=new int[metaData.size()];  Set<String> usedColumnNames=new HashSet<>();  int columnIndex=0;  int usedColumnIndex=0;  for (  ColumnMetaData column : metaData) {    if (!column.isRemoved()) {      selectedColumns[usedColumnIndex]=columnIndex;      usedColumnIndex++;      String columnName=column.getName();      if (!usedColumnNames.contains(columnName)) {        usedColumnNames.add(columnName);      } else {        throw new UserError(null,"data_import.non_unique_column_name",columnName);      }    }    columnIndex++;  }  int[] attributeColumns=Arrays.copyOf(selectedColumns,usedColumnIndex);  return attributeColumns;}  }
class C{  public static void attribute(String name,double value){  openAttribute(name);  Log.write(value);  closeAttribute();}  }
class C{  public void compileStmnt(String src) throws CompileError {  Parser p=new Parser(new Lex(src));  SymbolTable stb=new SymbolTable(stable);  while (p.hasMore()) {    Stmnt s=p.parseStatement(stb);    if (s != null)     s.accept(gen);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isActualAllocationEqTotal(){  return m_actualAllocation.compareTo(getTotalQty()) == 0;}  }
class C{  public AlgorithmInitializationException(Algorithm algorithm,String message,Throwable cause){  super(algorithm,message,cause);}  }
class C{  public void peek(byte[] buf) throws BufferUnderflowException {  peek(buf,0,buf.length);}  }
class C{  public boolean isRecoverable(){  return recoverable;}  }
class C{  public static String[] splitc(String src,String d){  if ((d.length() == 0) || (src.length() == 0)) {    return new String[]{src};  }  return splitc(src,d.toCharArray());}  }
class C{  public boolean equals(Object o){  if (o == null)   return false;  if (o instanceof JumpingSolitaireState) {    JumpingSolitaireState jss=(JumpingSolitaireState)o;    for (int i=0; i < filled.length; i++) {      if (filled[i] != jss.filled[i]) {        return false;      }    }    return true;  }  return false;}  }
class C{  public static boolean isVmaxUsing81SMIS(StorageSystem storage,DbClient dbClient){  if (storage != null && !NullColumnValueGetter.isNullURI(storage.getActiveProviderURI())) {    StorageProvider provider=dbClient.queryObject(StorageProvider.class,storage.getActiveProviderURI());    if (provider != null && provider.getVersionString() != null) {      String providerVersion=provider.getVersionString().replaceFirst("[^\\d]","");      String provStr[]=providerVersion.split(Constants.SMIS_DOT_REGEX);      int major=Integer.parseInt(provStr[0]);      int minor=Integer.parseInt(provStr[1]);      return major > SMIS_MAJOR_VERSION || major == SMIS_MAJOR_VERSION && minor >= SMIS_MINOR_VERSION;    }  }  return false;}  }
class C{  public DirichletBayesImEditor(DirichletBayesImWrapper dirichletBayesImWrapper){  this(dirichletBayesImWrapper.getDirichletBayesIm());}  }
class C{  public DetectorResult detect() throws NotFoundException {  return detect(null);}  }
class C{  private SheetDialog(){}  }
class C{  public EventLogTrainer(int sourceGroup) throws AdeException {  final String groupName=GroupRead.getAnalysisGroupName(sourceGroup);  final Ade ade=Ade.getAde();  m_mainScorer=ade.getFlowFactory().getEmptyMainScorer(sourceGroup);  final ScorerEnvironment env=new ScorerEnvironment(groupName);  env.m_traceOutputPath=new File(ade.getDirectoryManager().getTracePath(),groupName);  m_mainScorer.initTraining(env);}  }
class C{  public Builder addPart(Part part){  if (part == null)   throw new NullPointerException("part == null");  parts.add(part);  return this;}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,byte[] alphabet){  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=alphabet[(inBuff >>> 18)];  destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=alphabet[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  private void doExportCert(String alias,PrintStream out) throws Exception {  if (storePass == null && !KeyStoreUtil.isWindowsKeyStore(storetype)) {    printWarning();  }  if (alias == null) {    alias=keyAlias;  }  if (keyStore.containsAlias(alias) == false) {    MessageFormat form=new MessageFormat(rb.getString("Alias.alias.does.not.exist"));    Object[] source={alias};    throw new Exception(form.format(source));  }  X509Certificate cert=(X509Certificate)keyStore.getCertificate(alias);  if (cert == null) {    MessageFormat form=new MessageFormat(rb.getString("Alias.alias.has.no.certificate"));    Object[] source={alias};    throw new Exception(form.format(source));  }  dumpCert(cert,out);}  }
class C{  private StringBuffer printNode(MTreeNode node,Properties ctx){  StringBuffer sb=new StringBuffer();  if (!node.isSummary()) {    String cssClassName="";    String servletName="";    if (node.isWindow()) {      cssClassName="menuWindow";      servletName="WWindow";    } else     if (node.isForm()) {      return sb;    } else     if (node.isReport()) {      cssClassName="menuReport";      servletName="WProcess";    } else     if (node.isProcess()) {      cssClassName="menuProcess";      servletName="WProcess";    } else     if (node.isWorkFlow()) {      return sb;    } else     if (node.isTask()) {      return sb;    } else     servletName="WError";    String name=Msg.getMsg(ctx,node.getName().replace('\'',' ').replace('"',' '));    String description=Msg.getMsg(ctx,node.getDescription().replace('\'',' ').replace('"',' '));    sb.append("<li class=\"" + cssClassName + "\" id=\""+ node.getNode_ID()+ "\"><a href=\"");    boolean standardURL=true;    if (standardURL) {      sb.append(MobileEnv.getBaseDirectory(servletName)).append("?AD_Menu_ID=").append(node.getNode_ID());    }    sb.append("\" class=\"whiteButton\" target=\"_self\" title=\"" + description + "\">").append(name).append("</a></li>\n");  } else {    String name=node.getName().replace('\'',' ').replace('"',' ');    sb.append("\n<li><a href=\"#" + node.getNode_ID() + "\">").append(name).append("</a></li>\n");  }  return sb;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:18.018 -0500",hash_original_method="087397511909414364D6379E0DA93FA7",hash_generated_method="D5EA3A8DD5A081129A60AA2627E71EC7") public static List<InputMethodSubtype> sort(Context context,int flags,InputMethodInfo imi,List<InputMethodSubtype> subtypeList){  if (imi == null)   return subtypeList;  final HashSet<InputMethodSubtype> inputSubtypesSet=new HashSet<InputMethodSubtype>(subtypeList);  final ArrayList<InputMethodSubtype> sortedList=new ArrayList<InputMethodSubtype>();  int N=imi.getSubtypeCount();  for (int i=0; i < N; ++i) {    InputMethodSubtype subtype=imi.getSubtypeAt(i);    if (inputSubtypesSet.contains(subtype)) {      sortedList.add(subtype);      inputSubtypesSet.remove(subtype);    }  }  for (  InputMethodSubtype subtype : inputSubtypesSet) {    sortedList.add(subtype);  }  return sortedList;}  }
class C{  public @DottedClassName String toDottedClassName(){  return ClassName.toDottedClassName(className);}  }
class C{  public void receiveNotification(SipRequest notify) throws PayloadException, NetworkException {  if (!isNotifyForThisSubscriber(notify)) {    return;  }  if (sLogger.isActivated()) {    sLogger.debug("New presence notification received");  }  String content=notify.getContent();  if (TextUtils.isEmpty(content)) {    throw new PayloadException("Presence notification content should not be null or empty!");  }  try {    String boundary=notify.getBoundaryContentType();    Multipart multi=new Multipart(content,boundary);    if (!multi.isMultipart()) {      throw new PayloadException("Presence notification content not multipart!");    }    String rlmiPart=multi.getPart("application/rlmi+xml");    if (rlmiPart != null) {      InputSource rlmiInput=new InputSource(new ByteArrayInputStream(rlmiPart.getBytes(UTF8)));      RlmiParser rlmiParser=new RlmiParser(rlmiInput).parse();      RlmiDocument rlmiInfo=rlmiParser.getResourceInfo();      Vector<ResourceInstance> list=rlmiInfo.getResourceList();      for (      ResourceInstance res : list) {        String uri=res.getUri();        PhoneNumber number=ContactUtil.getValidPhoneNumberFromUri(uri);        if (number == null) {          if (sLogger.isActivated()) {            sLogger.debug("Invalid uri '" + uri + "'");          }          continue;        }        ContactId contact=ContactUtil.createContactIdFromValidatedData(number);        String state=res.getState();        String reason=res.getReason();        if ((state != null) && (reason != null)) {          if (state.equalsIgnoreCase("terminated") && reason.equalsIgnoreCase("rejected")) {            getImsModule().getPresenceService().getXdmManager().removeContactFromGrantedList(contact);          }          getImsModule().getPresenceService().handlePresenceSharingNotification(contact,state,reason);        }      }    }    String pidfPart=multi.getPart("application/pidf+xml");    InputSource pidfInput=new InputSource(new ByteArrayInputStream(pidfPart.getBytes(UTF8)));    PidfParser pidfParser=new PidfParser(pidfInput).parse();    PidfDocument presenceInfo=pidfParser.getPresence();    String entity=presenceInfo.getEntity();    PhoneNumber number=ContactUtil.getValidPhoneNumberFromUri(entity);    if (number == null) {      throw new PayloadException(new StringBuilder("Invalid entity :").append(entity).toString());    }    ContactId contact=ContactUtil.createContactIdFromValidatedData(number);    getImsModule().getPresenceService().handlePresenceInfoNotification(contact,presenceInfo);  } catch (  ParserConfigurationException e) {    throw new PayloadException("Can't parse presence notification!",e);  }catch (  SAXException e) {    throw new PayloadException("Can't parse presence notification!",e);  }catch (  ParseFailureException e) {    throw new PayloadException("Can't parse presence notification!",e);  }  SubscriptionStateHeader stateHeader=(SubscriptionStateHeader)notify.getHeader(SubscriptionStateHeader.NAME);  if ((stateHeader != null) && stateHeader.getState().equalsIgnoreCase("terminated")) {    if (sLogger.isActivated()) {      sLogger.info("Presence subscription has been terminated by server");    }    terminatedByServer();  }}  }
class C{  static Class lookUpFactoryClass(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {  String factoryClassName=lookUpFactoryClassName(factoryId,propertiesFilename,fallbackClassName);  ClassLoader cl=findClassLoader();  if (factoryClassName == null) {    factoryClassName=fallbackClassName;  }  try {    Class providerClass=findProviderClass(factoryClassName,cl,true);    debugPrintln("created new instance of " + providerClass + " using ClassLoader: "+ cl);    return providerClass;  } catch (  ClassNotFoundException x) {    throw new ConfigurationError("Provider " + factoryClassName + " not found",x);  }catch (  Exception x) {    throw new ConfigurationError("Provider " + factoryClassName + " could not be instantiated: "+ x,x);  }}  }
class C{  @Override public String bgsave(){  client.bgsave();  return client.getStatusCodeReply();}  }
class C{  public InstanceInfoFrame(){  super("Weka: Instance info");  initialize();  initGUI();  initFinished();}  }
class C{  public static int fieldModifiers(){  return PUBLIC | PROTECTED | PRIVATE| STATIC| FINAL| TRANSIENT| VOLATILE;}  }
class C{  public void add(final String word,final V value){  char c=word.charAt(0);  LetterNode<V> node=get(c);  if (node == null) {    node=new LetterNode<V>(this.word + c);  }  this.nodes.put(c,node);  if (word.length() == 1) {    node.isKeyword=true;    node.value=value;    return;  }  node.add(word.substring(1),value);}  }
class C{  public boolean hasMoreTokens(){  newPosition=skipDelimiters(currentPosition);  return (newPosition < maxPosition);}  }
class C{  private void handleEnumerationRequestForDeletion(EnumerationDeletionContext aws){switch (aws.stage) {case ENUMERATE:switch (aws.computeEnumerationRequest.enumerationAction) {case START:      logInfo("Started deletion enumeration for %s",aws.computeEnumerationRequest.resourceReference);    aws.computeEnumerationRequest.enumerationAction=EnumerationAction.REFRESH;  handleEnumerationRequestForDeletion(aws);break;case REFRESH:logInfo("Running enumeration service for deletion in refresh mode for %s",aws.parentCompute.description.environmentName);deleteResourcesInLocalSystem(aws);break;case STOP:logInfo("Stopping deletion enumeration service for %s",aws.computeEnumerationRequest.resourceReference);setOperationDurationStat(aws.awsAdapterOperation);aws.awsAdapterOperation.complete();break;default :logSevere("Unknown AWS enumeration action %s ",aws.computeEnumerationRequest.enumerationAction.toString());Throwable t=new Exception("Unknown AWS enumeration action");signalErrorToEnumerationAdapter(aws,t);break;}break;case ERROR:AdapterUtils.sendFailurePatchToEnumerationTask(this,aws.computeEnumerationRequest.taskReference,aws.error);break;default :logSevere("Unknown AWS enumeration stage %s ",aws.stage.toString());Throwable t=new Exception("Unknown AWS enumeration stage");signalErrorToEnumerationAdapter(aws,t);break;}}  }
class C{  public DurableSubscriberNonPersistentMessageTest(String testName){  super(testName);}  }
class C{  void printHeaders(PrintStream ps) throws IOException {  if ((testNum < -1) || (testNum > Support_TestWebData.tests.length - 1)) {    return;  }  SimpleDateFormat df=new SimpleDateFormat("EE, dd MMM yyyy HH:mm:ss");  psPrint(ps,"Server: TestWebServer" + mPort);  psWriteEOL(ps);  psPrint(ps,"Date: " + df.format(new Date()));  psWriteEOL(ps);  psPrint(ps,"Connection: " + ((keepAlive) ? "Keep-Alive" : "Close"));  psWriteEOL(ps);  if (redirectCode == -1) {    if (testNum == -1) {      if (!Support_TestWebData.test0DataAvailable) {        log("testdata was not initilaized");        return;      }      if (chunked) {        psPrint(ps,"Transfer-Encoding: chunked");      } else {        psPrint(ps,"Content-length: " + Support_TestWebData.test0Data.length);      }      psWriteEOL(ps);      psPrint(ps,"Last Modified: " + (new Date(Support_TestWebData.test0Params.testLastModified)));      psWriteEOL(ps);      psPrint(ps,"Content-type: " + Support_TestWebData.test0Params.testType);      psWriteEOL(ps);      if (Support_TestWebData.testParams[testNum].testExp > 0) {        long exp;        exp=Support_TestWebData.testParams[testNum].testExp;        psPrint(ps,"expires: " + df.format(exp) + " GMT");        psWriteEOL(ps);      }    } else     if (!Support_TestWebData.testParams[testNum].testDir) {      if (chunked) {        psPrint(ps,"Transfer-Encoding: chunked");      } else {        psPrint(ps,"Content-length: " + Support_TestWebData.testParams[testNum].testLength);      }      psWriteEOL(ps);      psPrint(ps,"Last Modified: " + (new Date(Support_TestWebData.testParams[testNum].testLastModified)));      psWriteEOL(ps);      psPrint(ps,"Content-type: " + Support_TestWebData.testParams[testNum].testType);      psWriteEOL(ps);      if (Support_TestWebData.testParams[testNum].testExp > 0) {        long exp;        exp=Support_TestWebData.testParams[testNum].testExp;        psPrint(ps,"expires: " + df.format(exp) + " GMT");        psWriteEOL(ps);      }    } else {      psPrint(ps,"Content-type: text/html");      psWriteEOL(ps);    }  } else {    psPrint(ps,"Content-length: " + (Support_TestWebData.testServerResponse[Support_TestWebData.REDIRECT_301]).length());    psWriteEOL(ps);    psWriteEOL(ps);  }  log("Headers sent");}  }
class C{  @Override public String toString(){  String pals="<no principals>";  if (principals != null && principals.length > 0) {    StringBuilder palBuf=new StringBuilder("(principals ");    for (int i=0; i < principals.length; i++) {      palBuf.append(principals[i].getClass().getName() + " \"" + principals[i].getName()+ "\"");      if (i < principals.length - 1)       palBuf.append(",\n"); else       palBuf.append(")\n");    }    pals=palBuf.toString();  }  PermissionCollection pc=Policy.isSet() && seeAllp() ? mergePermissions() : getPermissions();  return "ProtectionDomain " + " " + codesource + "\n"+ " "+ classloader+ "\n"+ " "+ pals+ "\n"+ " "+ pc+ "\n";}  }
class C{  public In(File file){  if (file == null)   throw new NullPointerException("argument is null");  try {    FileInputStream fis=new FileInputStream(file);    scanner=new Scanner(new BufferedInputStream(fis),CHARSET_NAME);    scanner.useLocale(LOCALE);  } catch (  IOException ioe) {    throw new IllegalArgumentException("Could not open " + file);  }}  }
class C{  public static void openUrl(Context context,String url){  Uri uri=Uri.parse(url);  Intent intent=new Intent(Intent.ACTION_VIEW,uri);  context.startActivity(intent);}  }
class C{  private void updateEnabledState(Container c,boolean enabled){  for (int counter=c.getComponentCount() - 1; counter >= 0; counter--) {    Component child=c.getComponent(counter);    if (DefaultLookup.getBoolean(spinner,this,"Spinner.disableOnBoundaryValues",false)) {      SpinnerModel model=spinner.getModel();      if (child.getName() == "Spinner.nextButton" && model.getNextValue() == null) {        child.setEnabled(false);      } else       if (child.getName() == "Spinner.previousButton" && model.getPreviousValue() == null) {        child.setEnabled(false);      } else {        child.setEnabled(enabled);      }    } else {      child.setEnabled(enabled);    }    if (child instanceof Container) {      updateEnabledState((Container)child,enabled);    }  }}  }
class C{  public Vec2D(){  x=y=0;}  }
class C{  @Override public boolean authorizeOperation(String regionName,final OperationContext context){  Map<OperationCode,FunctionSecurityPrmsHolder> operationMap;  if (context.isClientUpdate()) {    operationMap=this.allowedOps.get(regionName);    if (operationMap == null && regionName.length() > 0) {      operationMap=this.allowedOps.get(EMPTY_VALUE);    }    if (operationMap != null) {      return operationMap.containsKey(OperationCode.GET);    }    return false;  }  OperationCode opCode=context.getOperationCode();  if (opCode.isQuery() || opCode.isExecuteCQ() || opCode.isCloseCQ()|| opCode.isStopCQ()) {    operationMap=this.allowedOps.get(EMPTY_VALUE);    boolean globalPermission=(operationMap != null && operationMap.containsKey(opCode));    Set<String> regionNames=((QueryOperationContext)context).getRegionNames();    if (regionNames == null || regionNames.size() == 0) {      return globalPermission;    }    for (    String r : regionNames) {      regionName=normalizeRegionName(r);      operationMap=this.allowedOps.get(regionName);      if (operationMap == null) {        if (!globalPermission) {          return false;        }      } else       if (!operationMap.containsKey(opCode)) {        return false;      }    }    return true;  }  final String normalizedRegionName=normalizeRegionName(regionName);  operationMap=this.allowedOps.get(normalizedRegionName);  if (operationMap == null && normalizedRegionName.length() > 0) {    operationMap=this.allowedOps.get(EMPTY_VALUE);  }  if (operationMap != null) {    if (context.getOperationCode() != OperationCode.EXECUTE_FUNCTION) {      return operationMap.containsKey(context.getOperationCode());    } else {      if (!operationMap.containsKey(context.getOperationCode())) {        return false;      } else {        if (!context.isPostOperation()) {          FunctionSecurityPrmsHolder functionParameter=operationMap.get(context.getOperationCode());          ExecuteFunctionOperationContext functionContext=(ExecuteFunctionOperationContext)context;          if (functionContext.getRegionName() != null) {            if (functionParameter.isOptimizeForWrite() != null && functionParameter.isOptimizeForWrite().booleanValue() != functionContext.isOptimizeForWrite()) {              return false;            }            if (functionParameter.getFunctionIds() != null && !functionParameter.getFunctionIds().contains(functionContext.getFunctionId())) {              return false;            }            if (functionParameter.getKeySet() != null && functionContext.getKeySet() != null) {              if (functionContext.getKeySet().containsAll(functionParameter.getKeySet())) {                return false;              }            }            return true;          } else {            if (functionParameter.getFunctionIds() != null && !functionParameter.getFunctionIds().contains(functionContext.getFunctionId())) {              return false;            }            return true;          }        } else {          ExecuteFunctionOperationContext functionContext=(ExecuteFunctionOperationContext)context;          FunctionSecurityPrmsHolder functionParameter=operationMap.get(context.getOperationCode());          if (functionContext.getRegionName() != null) {            if (functionContext.getResult() instanceof ArrayList && functionParameter.getKeySet() != null) {              ArrayList<String> resultList=(ArrayList)functionContext.getResult();              Set<String> nonAllowedKeys=functionParameter.getKeySet();              if (resultList.containsAll(nonAllowedKeys)) {                return false;              }            }            return true;          } else {            ArrayList<String> resultList=(ArrayList)functionContext.getResult();            final String inSecureItem="Insecure item";            if (resultList.contains(inSecureItem)) {              return false;            }            return true;          }        }      }    }  }  return false;}  }
class C{  public static void saveLq(Bitmap src,String fileName) throws ImageSaveException {  saveJpeg(src,fileName,JPEG_QUALITY_LOW);}  }
class C{  public MarketplaceRemovedException(){}  }
class C{  public FasRunner(GraphSource graphWrapper,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(graphWrapper.getGraph(),params,knowledgeBoxModel);}  }
class C{  public SessionFinishedEvent(final String sessionId){  super(sessionId);}  }
class C{  public String lookupNamespace(String prefix){  String uri=null;  final Stack stack=getPrefixStack(prefix);  if (stack != null && !stack.isEmpty()) {    uri=((MappingRecord)stack.peek()).m_uri;  }  if (uri == null)   uri=EMPTYSTRING;  return uri;}  }
class C{  public int arityOf(int fn){  return fn == F_NOT ? 1 : 2;}  }
class C{  @PostConstruct public void ejbCreate(){  m_no=++s_no;  try {    if (!Adempiere.startup(false))     throw new CreateException("Adempiere could not start");  } catch (  Exception ex) {    log.log(Level.SEVERE,"ejbCreate",ex);  }  log.info("#" + getStatus());}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testNodeProcessing() throws Exception {  StreamMerger oper=new StreamMerger();  CountTestSink mergeSink=new CountTestSink();  oper.out.setSink(mergeSink);  oper.beginWindow(0);  int numtuples=500;  Integer input=0;  for (int i=0; i < numtuples; i++) {    oper.data1.process(input);    oper.data2.process(input);  }  oper.endWindow();  Assert.assertEquals("number emitted tuples",numtuples * 2,mergeSink.count);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static int invoiceDueDays(int p_C_Invoice_ID,Timestamp p_PayDate) throws SQLException {  if (p_C_Invoice_ID == 0)   return 0;  int retValue=0;  String sql="SELECT C_PaymentTerm_ID, DateInvoiced " + "FROM C_Invoice " + "WHERE C_Invoice_ID=?";  PreparedStatement pstmt=Adempiere.prepareStatement(sql);  pstmt.setInt(1,p_C_Invoice_ID);  ResultSet rs=pstmt.executeQuery();  if (rs.next()) {    int C_PaymentTerm_ID=rs.getInt(1);    Timestamp DocDate=rs.getTimestamp(2);    retValue=dueDays(C_PaymentTerm_ID,DocDate,p_PayDate);  }  rs.close();  pstmt.close();  return retValue;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private Object createInner(SimpleObject post,RequestContext context) throws ResponseException {  try {    String xml=completeXform(convertUuidsToIds(post));    File file=File.createTempFile("projectbuendia",null);    processor.processXForm(xml,file.getAbsolutePath(),true,context.getRequest());  } catch (  IOException e) {    throw new GenericRestException("Error storing xform data",e);  }catch (  ResponseException e) {    throw e;  }catch (  Exception e) {    throw new ConversionException("Error processing xform data",e);  }  Encounter encounter=guessEncounterFromXformSubmission(post);  if (encounter == null) {    return post;  }  SimpleObject returnJson=new SimpleObject();  EncounterResource.populateJsonProperties(encounter,returnJson);  return returnJson;}  }
class C{  public BubbleActions withIndicator(int indicatorRes){  this.indicator=ResourcesCompat.getDrawable(root.getResources(),indicatorRes,root.getContext().getTheme());  return this;}  }
class C{  public Class defineClass(ClassNode classNode,String file,String newCodeBase){  CodeSource codeSource=null;  try {    codeSource=new CodeSource(new URL("file","",newCodeBase),(java.security.cert.Certificate[])null);  } catch (  MalformedURLException e) {  }  CompilationUnit unit=createCompilationUnit(config,codeSource);  ClassCollector collector=createCollector(unit,classNode.getModule().getContext());  try {    unit.addClassNode(classNode);    unit.setClassgenCallback(collector);    unit.compile(Phases.CLASS_GENERATION);    definePackageInternal(collector.generatedClass.getName());    return collector.generatedClass;  } catch (  CompilationFailedException e) {    throw new RuntimeException(e);  }}  }
class C{  void registerQNames(QNameList qNames,Source source){  for (int i=0, size=qNames.size(); i < size; i++) {    QName qN=qNames.get(i);    qNameTable.put(qN,source);  }}  }
class C{  public AbstractNaryOperator(final List<? extends Expr> args){  this();  setArgs(args);}  }
class C{  protected void fadeInCurrentTheme(){  if (currentTheme != null) {    currentTheme.setLooping(false);    currentTheme.setVolume(0f);    currentTheme.setOnCompletionListener(listener);    stage.addAction(VolumeAction.setVolume(currentTheme,0f,musicVolume.getPercent(),duration,Interpolation.fade));    currentTheme.play();  }}  }
class C{  @Override public void updateRenderer(EntityLivingBase view){  if (needsUpdate) {    needsUpdate=false;    skipRenderPass[0]=true;    skipRenderPass[1]=true;    bytesDrawn=0;    vertexState=null;    Chunk chunk=worldObj.getChunkFromBlockCoords(posX,posZ);    if (chunk instanceof EmptyChunk) {      if (tileEntityRenderers.size() > 0) {        tileEntities.removeAll(tileEntityRenderers);        tileEntityRenderers.clear();      }      needsUpdate=true;      isInitialized=false;      return;    }    final int xStart=posX;    final int yStart=posY;    final int zStart=posZ;    final int xEnd=posX + 16;    final int yEnd=posY + 16;    final int zEnd=posZ + 16;    Chunk.isLit=false;    HashSet<TileEntity> existingTiles=null;    if (tileEntityRenderers.size() > 0) {      existingTiles=new HashSet<TileEntity>();      existingTiles.addAll(tileEntityRenderers);      tileEntityRenderers.clear();    }    ++chunksUpdated;    if (!chunk.getAreLevelsEmpty(yStart,yEnd)) {      final int off=1;      ChunkCache chunkcache=new ChunkCache(worldObj,xStart - off,yStart - off,zStart - off,xEnd + off,yEnd + off,zEnd + off,off);      EntityLivingBase view2=Minecraft.getMinecraft().renderViewEntity;      int viewX=MathHelper.floor_double(view2.posX);      int viewY=MathHelper.floor_double(view2.posY);      int viewZ=MathHelper.floor_double(view2.posZ);      RenderBlocks renderblocks=null;      TileEntityRendererDispatcher dispatcher=TileEntityRendererDispatcher.instance;      List<TileEntity> tileEntityRenderers=this.tileEntityRenderers;      for (int pass=0; pass < 2; ++pass) {        boolean hasNextPass=false;        boolean renderedBlock=false;        boolean startedDrawing=false;        for (int y=yStart; y < yEnd; ++y) {          for (int z=zStart; z < zEnd; ++z) {            for (int x=xStart; x < xEnd; ++x) {              Block block=chunkcache.getBlock(x,y,z);              if (block.getMaterial() != Material.air) {                if (pass == 0 && block.hasTileEntity(chunkcache.getBlockMetadata(x,y,z))) {                  TileEntity tileentity=chunkcache.getTileEntity(x,y,z);                  if (dispatcher.hasSpecialRenderer(tileentity)) {                    tileEntityRenderers.add(tileentity);                  }                }                hasNextPass|=block.getRenderBlockPass() > pass;                if (block.canRenderInPass(pass)) {                  if (!startedDrawing) {                    if (renderblocks == null) {                      renderblocks=new RenderBlocks(chunkcache);                      net.minecraftforge.client.ForgeHooksClient.setWorldRendererRB(renderblocks);                    }                    startedDrawing=true;                    preRenderBlocks(pass);                  }                  renderedBlock|=renderblocks.renderBlockByRenderType(block,x,y,z);                  if (block.getRenderType() == 0 && x == viewX && y == viewY && z == viewZ) {                    renderblocks.setRenderFromInside(true);                    renderblocks.setRenderAllFaces(true);                    renderblocks.renderBlockByRenderType(block,x,y,z);                    renderblocks.setRenderFromInside(false);                    renderblocks.setRenderAllFaces(false);                  }                }              }            }          }        }        if (startedDrawing) {          if (renderedBlock) {            skipRenderPass[pass]=false;          }          postRenderBlocks(pass,view);        }        if (!hasNextPass) {          break;        }      }      if (renderblocks != null) {        net.minecraftforge.client.ForgeHooksClient.setWorldRendererRB(null);      }    }    if (tileEntityRenderers.size() > 0) {      if (existingTiles == null) {        tileEntities.addAll(tileEntityRenderers);      } else {        HashSet<TileEntity> hashset1=new HashSet<TileEntity>();        hashset1.addAll(tileEntityRenderers);        hashset1.removeAll(existingTiles);        tileEntities.addAll(hashset1);      }    }    if (existingTiles != null) {      existingTiles.removeAll(tileEntityRenderers);      tileEntities.removeAll(existingTiles);    }    isChunkLit=Chunk.isLit;    isInitialized=true;  }}  }
class C{  private void filtro(String valor,ObservableList<Estratigrafia> listaEstratigrafia){  FilteredList<Estratigrafia> dadosFiltrados=new FilteredList<>(listaEstratigrafia,null);  dadosFiltrados.setPredicate(null);  SortedList<Estratigrafia> dadosOrdenados=new SortedList<>(dadosFiltrados);  dadosOrdenados.comparatorProperty().bind(tbEstratigrafia.comparatorProperty());  Filtro.mensagem(legenda,dadosOrdenados.size(),"Quantidade de estratigrafias encontradas");  tbEstratigrafia.setItems(dadosOrdenados);}  }
class C{  public static final String sanitizeForHTML(String str){  return ESCAPE_FUNC.apply(UNESCAPE_FUNC.apply(str));}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static boolean isValidJavaEncoding(String javaEncoding){  if (javaEncoding != null) {    int length=javaEncoding.length();    if (length > 0) {      for (int i=1; i < length; i++) {        char c=javaEncoding.charAt(i);        if ((c < 'A' || c > 'Z') && (c < 'a' || c > 'z') && (c < '0' || c > '9')&& c != '.' && c != '_' && c != '-') {          return false;        }      }      return true;    }  }  return false;}  }
class C{  public static String makeTemplate(String... templateItems){  StringBuilder template=new StringBuilder();  for (  String item : templateItems) {    template.append(item).append(ITEM_SEPARATOR);  }  template.append(CHANGESET_SEPARATOR);  return template.toString();}  }
class C{  public void unset(String name) throws EvalError {  CallStack callstack=new CallStack();  try {    LHS lhs=globalNameSpace.getNameResolver(name).toLHS(callstack,this);    if (lhs.type != LHS.VARIABLE)     throw new EvalError("Can't unset, not a variable: " + name,SimpleNode.JAVACODE,new CallStack());    lhs.nameSpace.unsetVariable(name);  } catch (  UtilEvalError e) {    throw new EvalError(e.getMessage(),SimpleNode.JAVACODE,new CallStack());  }}  }
class C{  public void removeListener(final IDatabaseListener listener){  m_listeners.removeListener(listener);}  }
class C{  public boolean isPersonalAccess(){  Object oo=get_Value(COLUMNNAME_IsPersonalAccess);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public HeaderSet(){  mUnicodeUserDefined=new String[16];  mSequenceUserDefined=new byte[16][];  mByteUserDefined=new Byte[16];  mIntegerUserDefined=new Long[16];  responseCode=-1;  mRandom=new SecureRandom();}  }
class C{  public MessageListView(Context context){  super(context);  setOnItemClickListener(MessageClickListener.getInstance());  setDivider(null);  setCacheColorHint(0x000000);  setVerticalFadingEdgeEnabled(false);  setBackgroundColor(Color.parseColor("#f5f5f5"));  setScrollBarStyle(SCROLLBARS_OUTSIDE_INSET);  float density=context.getResources().getDisplayMetrics().density;  int padding=(int)(5 * density);  setPadding(padding,padding,padding,padding);  setDivider(new ColorDrawable(0x00FFFFFFF));  setDividerHeight(20);  setTranscriptMode(TRANSCRIPT_MODE_NORMAL);}  }
class C{  @Override public void addUndoPoint(){  File tempFile;  ObjectOutputStream oos;  if (!isUndoEnabled()) {    return;  }  if (getInstances() != null) {    try {      tempFile=File.createTempFile("arffviewer",null);      tempFile.deleteOnExit();      oos=new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream(tempFile)));      oos.writeObject(getInstances());      oos.flush();      oos.close();      m_UndoList.add(tempFile);    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  public QueryBuilder groupBy(String key){  mGroupBy=key;  return this;}  }
class C{  public Map<String,Object> convertDataToObjects(Map<String,String> data){  Map<String,Object> results=new HashMap<>();  if (data != null) {    for (    String key : data.keySet()) {      results.put(key,data.get(key));    }  }  return results;}  }
class C{  public boolean validate(Class type,Reader source) throws Exception {  return validate(type,source,true);}  }
class C{  @Override public void endWindow(){  if (dval == 0) {    return;  }  double val=1 - (nval / dval);  if (percent) {    val=val * 100;  }  margin.emit(getValue(val));  nval=0.0;  dval=0.0;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:32:01.513 -0400",hash_original_method="607AEEC83545C16FE1721D19F208C5BE",hash_generated_method="CEB4572DA5E3EDD2E0968C2CD5270B55") public void register(Character command,AtCommandHandler handler){  mBasicHandlers.put(command,handler);}  }
class C{  public Boolean isDelegatable(){  return delegatable;}  }
class C{  public void registerDownloadStatusListener(OnFileDownloadStatusListener onFileDownloadStatusListener){  registerDownloadStatusListener(onFileDownloadStatusListener,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:49.550 -0500",hash_original_method="EA6AC5CC522A2884BAFD1D1CC4525D81",hash_generated_method="AE1FD32E979E85F92B8FF10149DD076E") public CharSequence loadDescription(PackageManager pm){  if (nonLocalizedDescription != null) {    return nonLocalizedDescription;  }  if (descriptionRes != 0) {    CharSequence label=pm.getText(packageName,descriptionRes,null);    if (label != null) {      return label;    }  }  return null;}  }
class C{  @Override protected void closeDialogOk(){  somPanel.commitChanges();  SOMNetwork somNet=(SOMNetwork)somPanel.getGroup();  SOMGroup som=somNet.getSom();  layoutPanel.commitChanges();  som.setLayout(layoutPanel.getCurrentLayout());  som.applyLayout();  somNet.layoutNetwork();  networkPanel.getNetwork().addGroup(somNet);  super.closeDialogOk();}  }
class C{  private JLabel createIconLabel(JCheckBox checkBox){  checkBox.setOpaque(false);  checkBox.setSize(checkBox.getMinimumSize());  Image image=new BufferedImage(checkBox.getWidth(),checkBox.getHeight(),Transparency.TRANSLUCENT);  Graphics g=image.getGraphics();  checkBox.paint(g);  g.dispose();  return new JLabel(new ImageIcon(image));}  }
class C{  public static long floor(double value){  return Math.round(Math.floor(value));}  }
class C{  private Image createImage(String resource){  ImageDescriptor desc=getImageDescriptor(resource);  Image image=null;  if (desc != null) {    image=desc.createImage();    if (!desc.equals(ImageDescriptor.getMissingImageDescriptor())) {      getImageRegistry().put(resource,image);    }  }  return image;}  }
class C{  @EnsuresOddIf(result=true,expression="f1") boolean condOddF1(boolean b){  if (b) {    f1=null;    return true;  }  return false;}  }
class C{  public OMSpline(double latPoint,double lonPoint,int[] xPoints,int[] yPoints,int cMode){  super(latPoint,lonPoint,xPoints,yPoints,cMode);}  }
class C{  protected void doReadObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  loadFactor=in.readFloat();  int capacity=in.readInt();  int size=in.readInt();  init();  data=new HashEntry[capacity];  for (int i=0; i < size; i++) {    K key=(K)in.readObject();    V value=(V)in.readObject();    put(key,value);  }  threshold=calculateThreshold(data.length,loadFactor);}  }
class C{  public JavaClass parse(InputStream is) throws IOException {  _is=is;  if (_loader == null)   _loader=new JavaClassLoader();  if (_class == null)   _class=new JavaClass(_loader);  _cp=_class.getConstantPool();  parseClass();  return _class;}  }
class C{  public void testAdaptContent(){  System.out.println("adaptContent");  AuditCommand mockAuditCommand=createMock(AuditCommand.class);  mockAuditCommand.adaptContent();  expectLastCall().once();  replay(mockAuditCommand);  AuditServiceThreadImpl instance=initialiseAuditServiceThread(mockAuditCommand);  instance.adaptContent();  verify(mockAuditCommand);}  }
class C{  private void testBug71396PrepStatementCheck(PreparedStatement testPStmt,String query,int expRowCount) throws SQLException {  ResultSet testRS;  testRS=testPStmt.executeQuery();  assertTrue(testRS.last());  assertEquals(String.format("Wrong number of rows for query '%s'",query),expRowCount,testRS.getRow());  testRS.close();  testPStmt.execute();  testRS=testPStmt.getResultSet();  assertTrue(testRS.last());  assertEquals(String.format("Wrong number of rows for query '%s'",query),expRowCount,testRS.getRow());  testRS.close();}  }
class C{  protected void createShapes(DrawContext dc){  this.paths=new ArrayList<Path>();  Iterator<Double> radii=this.getRadii().iterator();  Iterator<? extends Angle> azimuths=this.getAzimuths().iterator();  Angle prevLeftAzimuth=Angle.NEG180;  Angle prevRightAzimuth=Angle.POS180;  double prevRadius=0;  while (radii.hasNext()) {    double radius=radii.next();    if (radius > this.maxRadius)     this.maxRadius=radius;    Angle leftAzimuth=azimuths.hasNext() ? azimuths.next() : prevLeftAzimuth;    Angle rightAzimuth=azimuths.hasNext() ? azimuths.next() : prevRightAzimuth;    leftAzimuth=this.normalizeAzimuth(leftAzimuth);    rightAzimuth=this.normalizeAzimuth(rightAzimuth);    List<Position> positions=new ArrayList<Position>();    this.createArc(dc,prevRadius,Angle.max(leftAzimuth,prevLeftAzimuth),leftAzimuth,positions);    this.createArc(dc,radius,leftAzimuth,rightAzimuth,positions);    this.createArc(dc,prevRadius,rightAzimuth,Angle.min(rightAzimuth,prevRightAzimuth),positions);    this.paths.add(this.createPath(positions));    prevRadius=radius;    prevLeftAzimuth=leftAzimuth;    prevRightAzimuth=rightAzimuth;  }  boolean fullCircle=Math.abs(prevLeftAzimuth.subtract(prevRightAzimuth).degrees) >= 360;  if (!fullCircle) {    this.centerAzimuth=this.computeCenterSectorAngle(prevLeftAzimuth,prevRightAzimuth);    this.createCenterOfSectorArrow(dc,centerAzimuth,prevRadius);  } else {    this.centerAzimuth=Angle.POS180;  }}  }
class C{  public static double studentTInverse(double alpha,int size){  double cumProb=1 - alpha / 2;  double f1, f2, f3;  double x1, x2, x3;  double g, s12;  cumProb=1 - alpha / 2;  x1=normalInverse(cumProb);  if (size > 200) {    return x1;  }  f1=studentT(size,x1) - cumProb;  x2=x1;  f2=f1;  do {    if (f1 > 0) {      x2=x2 / 2;    } else {      x2=x2 + x1;    }    f2=studentT(size,x2) - cumProb;  } while (f1 * f2 > 0);  do {    s12=(f2 - f1) / (x2 - x1);    x3=x2 - f2 / s12;    f3=studentT(size,x3) - cumProb;    if (Math.abs(f3) < 1e-8) {      return x3;    }    if (f3 * f2 < 0) {      x1=x2;      f1=f2;      x2=x3;      f2=f3;    } else {      g=f2 / (f2 + f3);      f1=g * f1;      x2=x3;      f2=f3;    }  } while (Math.abs(x2 - x1) > 0.001);  if (Math.abs(f2) <= Math.abs(f1)) {    return x2;  } else {    return x1;  }}  }
class C{  public StreamServerConfigurationImpl(){}  }
class C{  private static void decodeBase256Segment(BitSource bits,StringBuilder result,Collection<byte[]> byteSegments) throws FormatException {  int codewordPosition=1 + bits.getByteOffset();  int d1=unrandomize255State(bits.readBits(8),codewordPosition++);  int count;  if (d1 == 0) {    count=bits.available() / 8;  } else   if (d1 < 250) {    count=d1;  } else {    count=250 * (d1 - 249) + unrandomize255State(bits.readBits(8),codewordPosition++);  }  if (count < 0) {    throw FormatException.getFormatInstance();  }  byte[] bytes=new byte[count];  for (int i=0; i < count; i++) {    if (bits.available() < 8) {      throw FormatException.getFormatInstance();    }    bytes[i]=(byte)unrandomize255State(bits.readBits(8),codewordPosition++);  }  byteSegments.add(bytes);  try {    result.append(new String(bytes,"ISO8859_1"));  } catch (  UnsupportedEncodingException uee) {    throw new IllegalStateException("Platform does not support required encoding: " + uee);  }}  }
class C{  @Hook("android.hardware.Camera->open") public static Camera Camera_open(){  try {    return OriginalMethod.by(new $(){    }).invokeStatic();  } catch (  Exception e) {    throw new SecurityException("We do not allow Camera access",e);  }}  }
class C{  public boolean canFinishEarly(){  return canFinishEarly;}  }
class C{  public Mask createMask(BridgeContext ctx,Element maskElement,Element maskedElement,GraphicsNode maskedNode){  String s;  Rectangle2D maskRegion=SVGUtilities.convertMaskRegion(maskElement,maskedElement,maskedNode,ctx);  GVTBuilder builder=ctx.getGVTBuilder();  CompositeGraphicsNode maskNode=new CompositeGraphicsNode();  CompositeGraphicsNode maskNodeContent=new CompositeGraphicsNode();  maskNode.getChildren().add(maskNodeContent);  boolean hasChildren=false;  for (Node node=maskElement.getFirstChild(); node != null; node=node.getNextSibling()) {    if (node.getNodeType() != Node.ELEMENT_NODE) {      continue;    }    Element child=(Element)node;    GraphicsNode gn=builder.build(ctx,child);    if (gn == null) {      continue;    }    hasChildren=true;    maskNodeContent.getChildren().add(gn);  }  if (!hasChildren) {    return null;  }  AffineTransform Tx;  s=maskElement.getAttributeNS(null,SVG_TRANSFORM_ATTRIBUTE);  if (s.length() != 0) {    Tx=SVGUtilities.convertTransform(maskElement,SVG_TRANSFORM_ATTRIBUTE,s,ctx);  } else {    Tx=new AffineTransform();  }  short coordSystemType;  s=maskElement.getAttributeNS(null,SVG_MASK_CONTENT_UNITS_ATTRIBUTE);  if (s.length() == 0) {    coordSystemType=SVGUtilities.USER_SPACE_ON_USE;  } else {    coordSystemType=SVGUtilities.parseCoordinateSystem(maskElement,SVG_MASK_CONTENT_UNITS_ATTRIBUTE,s,ctx);  }  if (coordSystemType == SVGUtilities.OBJECT_BOUNDING_BOX) {    Tx=SVGUtilities.toObjectBBox(Tx,maskedNode);  }  maskNodeContent.setTransform(Tx);  Filter filter=maskedNode.getFilter();  if (filter == null) {    filter=maskedNode.getGraphicsNodeRable(true);  }  return new MaskRable8Bit(filter,maskNode,maskRegion);}  }
class C{  public static boolean isSynchronized(int mod){  return (mod & SYNCHRONIZED) != 0;}  }
class C{  public IncrementalTermVectors(FlagConfig flagConfig,LuceneUtils luceneUtils) throws IOException {  this.flagConfig=flagConfig;  this.luceneUtils=luceneUtils;  createIncrementalTermVectorsFromLucene();}  }
class C{  public int length(){  return this.myArrayList.size();}  }
class C{  protected void registerListenerTags(){  addTagProvider(new ChangeListenerLmlTagProvider(),"onChange","changeListener");  addTagProvider(new ClickListenerLmlTagProvider(),"onClick","clickListener");  addTagProvider(new InputListenerLmlTagProvider(),"onInput","inputListener");}  }
class C{  public static void main(String[] args){  if (args.length != 3) {    System.err.println("Usage: TestCaseReplacer <targetClass> <filename> <methodname>");    System.exit(1);  }  Properties.TARGET_CLASS=args[0];  TestCaseReplacer replacer=new TestCaseReplacer();  TestCase result=replacer.replaceTest(args[0],args[1],args[2],System.getProperty("java.class.path").split(":"));  System.out.println("Resulting test case:");  System.out.println(result.toCode());  System.exit(0);}  }
class C{  TransactionInput(NetworkParameters params,Transaction parentTransaction,TransactionOutput output){  super(params);  long outputIndex=output.getIndex();  if (output.getParentTransaction() != null) {    outpoint=new TransactionOutPoint(params,outputIndex,output.getParentTransaction());  } else {    outpoint=new TransactionOutPoint(params,output);  }  scriptBytes=EMPTY_ARRAY;  sequence=NO_SEQUENCE;  setParent(parentTransaction);  this.value=output.getValue();  length=41;}  }
class C{  boolean inSameProgramUnit(LexicalScope that){  LexicalScope shallow, deep;  if (this.root.depth >= that.root.depth) {    deep=this;    shallow=that;  } else {    deep=that;    shallow=this;  }  while (shallow.parent != null && !shallow.isFunctionScope()) {    shallow=shallow.parent;  }  for (LexicalScope s=deep; s != null; s=s.parent) {    if (s == shallow) {      return true;    }    if (s.isFunctionScope()) {      return false;    }  }  return false;}  }
class C{  public MultiplePiePlot(CategoryDataset dataset){  super();  setDataset(dataset);  PiePlot piePlot=new PiePlot(null);  piePlot.setIgnoreNullValues(true);  this.pieChart=new JFreeChart(piePlot);  this.pieChart.removeLegend();  this.dataExtractOrder=TableOrder.BY_COLUMN;  this.pieChart.setBackgroundPaint(null);  TextTitle seriesTitle=new TextTitle("Series Title",new Font("SansSerif",Font.BOLD,12));  seriesTitle.setPosition(RectangleEdge.BOTTOM);  this.pieChart.setTitle(seriesTitle);  this.aggregatedItemsKey="Other";  this.aggregatedItemsPaint=Color.lightGray;  this.sectionPaints=new HashMap();  this.legendItemShape=new Ellipse2D.Double(-4.0,-4.0,8.0,8.0);}  }
class C{  public RankingImageListProvider type(RankingsType listType){  mListType=listType;  return this;}  }
class C{  public void createBug10476_upgradeSuspendedSubscription2() throws Exception {  setDateFactory("2013-08-02 10:00:00");  String customerAdminId="Bug10476UpgrSus2CustomerAdmin";  VOOrganization customer=orgSetup.registerCustomer("Bug10476UpgrSus2Customer",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,customerAdminId,supplierMarketplace.getMarketplaceId(),basicSetup.getSupplierOrgID());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"BUG10476_UPGRSUS2_SERVICE",TestService.EXAMPLE2,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),3);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService(customerAdmin.getKey(),"BUG10476_UPGRSUS2",serviceDetails,customerAdmin,VOServiceFactory.getRole(serviceDetails,"GUEST"));  setDateFactory("2013-08-03 00:00:00");  paymentSetup.deleteCustomerPaymentTypes(basicSetup.getSupplierAdminKey(),customer);  subDetails=subscrSetup.getSubscriptionDetails(customerAdmin.getKey(),subDetails.getSubscriptionId());  setDateFactory("2013-08-04 12:00:00");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOServiceDetails upgradedServiceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"BUG10476_UPGRSUS2_FREE_SERVICE",TestService.EXAMPLE2,TestPriceModel.FREE,technicalService,supplierMarketplace);  serviceSetup.registerCompatibleServices(basicSetup.getSupplierAdminKey(),serviceDetails,upgradedServiceDetails);  setDateFactory("2013-08-04 23:10:00");  VOSubscriptionDetails upgradedSubDetails=subscrSetup.upgradeSubscription(customerAdmin.getKey(),subDetails,upgradedServiceDetails);  setDateFactory("2013-08-11 15:00:00");  paymentSetup.reassignCustomerPaymentTypes(basicSetup.getSupplierAdminKey(),customer);  upgradedSubDetails=subscrSetup.getSubscriptionDetails(customerAdmin.getKey(),upgradedSubDetails.getSubscriptionId());  setDateFactory("2013-08-15 08:12:00");  subscrSetup.unsubscribeToService(upgradedSubDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("BUG10476_UPGRSUS2",subDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("BUG10476_UPGRSUS2",upgradedSubDetails);  BillingIntegrationTestBase.updateCustomerListForTests("BUG10476_UPGRSUS2",customer);}  }
class C{  protected JButton createRightOneTouchButton(){  SeaGlassArrowButton b=new SeaGlassArrowButton(SwingConstants.NORTH);  int oneTouchSize=lookupOneTouchSize();  b.setName("SplitPaneDivider.rightOneTouchButton");  b.setMinimumSize(new Dimension(oneTouchSize,oneTouchSize));  b.setCursor(Cursor.getPredefinedCursor(splitPane.getOrientation() == JSplitPane.HORIZONTAL_SPLIT ? Cursor.E_RESIZE_CURSOR : Cursor.S_RESIZE_CURSOR));  b.setFocusPainted(false);  b.setBorderPainted(false);  b.setRequestFocusEnabled(false);  b.setDirection(mapDirection(false));  return b;}  }
class C{  protected Element(){}  }
class C{  @Override protected void register(ConfigurationFactory configurationFactory){  configurationFactory.registerConfiguration("geronimo1x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,Geronimo1xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("geronimo1x",ContainerType.INSTALLED,ConfigurationType.EXISTING,GeronimoExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("geronimo2x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,Geronimo2xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("geronimo2x",ContainerType.INSTALLED,ConfigurationType.EXISTING,GeronimoExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("geronimo3x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,Geronimo3xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("geronimo3x",ContainerType.INSTALLED,ConfigurationType.EXISTING,GeronimoExistingLocalConfiguration.class);}  }
class C{  public void addAll(RadioButton... rb){  for (  RadioButton r : rb) {    add(r);  }}  }
class C{  @Deprecated public static ObjectType[] findDeclaredExceptions(InvokeInstruction inv,ConstantPoolGen cpg){  return Hierarchy2.findDeclaredExceptions(inv,cpg);}  }
class C{  @Override public String toString(){  if (ping) {    return "PING (" + ttl + ")";  } else {    return "PONG (" + ttl + ")";  }}  }
class C{  public void cancelActiveSync(Account account,int userId,String authority){  sendCancelSyncsMessage(account,userId,authority);}  }
class C{  public static DialogOption showYesNoCancelMessage(final String message){  return MessageService.instance().showYesNoCancelMessage(message);}  }
class C{  public void testCompareLessScale1(){  String a="12380964839238475457356735674573563567890295784902768787678287";  int aScale=18;  String b="4573563567890295784902768787678287";  int bScale=28;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  int result=1;  assertEquals("incorrect result",result,aNumber.compareTo(bNumber));}  }
class C{  public void forEachDstIn(Allocation ain,Allocation aout){  blend(6,ain,aout);}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public Object jjtAccept(PartitionParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (mandatory: ");  result.append(mandatory);  result.append(')');  return result.toString();}  }
class C{  @Override public void updateCharacterStream(int columnIndex,Reader x,int length) throws SQLException {  updateCharacterStream(columnIndex,x,(long)length);}  }
class C{  @Override public void clearBatch() throws SQLException {  try {    debugCodeCall("clearBatch");    checkClosed();    batchCommands=null;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static String toString(JSONObject jo) throws JSONException {  boolean b=false;  Iterator<String> keys=jo.keys();  String string;  StringBuilder sb=new StringBuilder();  while (keys.hasNext()) {    string=keys.next();    if (!jo.isNull(string)) {      if (b) {        sb.append(';');      }      sb.append(Cookie.escape(string));      sb.append("=");      sb.append(Cookie.escape(jo.getString(string)));      b=true;    }  }  return sb.toString();}  }
class C{  static public void showWarning(String msg){  if (warnings == null) {    warnings=new HashMap<String,Object>();  }  if (!warnings.containsKey(msg)) {    System.err.println(msg);    warnings.put(msg,new Object());  }}  }
class C{  public AbIocEventListener itemLongClick(String method){  this.itemLongClickMehtod=method;  return this;}  }
class C{  public static <K,V>List<KeyValue<K,V>> waitUntilMinKeyValueRecordsReceived(Properties consumerConfig,String topic,int expectedNumRecords,long waitTime) throws InterruptedException {  List<KeyValue<K,V>> accumData=new ArrayList<>();  long startTime=System.currentTimeMillis();  while (true) {    List<KeyValue<K,V>> readData=readKeyValues(topic,consumerConfig);    accumData.addAll(readData);    if (accumData.size() >= expectedNumRecords)     return accumData;    if (System.currentTimeMillis() > startTime + waitTime)     throw new AssertionError("Expected " + expectedNumRecords + " but received only "+ accumData.size()+ " records before timeout "+ waitTime+ " ms");    Thread.sleep(Math.min(waitTime,100L));  }}  }
class C{  public List<ResultSet> execQuerySQL(String sql,String... bindArgs){  Cursor cursor=null;  try {    openDB();    cursor=mSQLiteDatabase.rawQuery(sql,bindArgs);    if (cursor.getCount() < 1) {      return null;    }    List<ResultSet> resultList=new ArrayList<ResultSet>();    parseCursorToResult(cursor,resultList);    return resultList;  } catch (  SQLException ex) {    throw ex;  } finally {    if (cursor != null)     cursor.close();  }}  }
class C{  public void doPrintPreview(){  doPrint();}  }
class C{  public static boolean isPN_PREFIX(String prefix){  if (prefix.length() == 0) {    logger.debug("PN_PREFIX was not valid (empty)");    return false;  }  if (!isPN_CHARS_BASE(prefix.charAt(0))) {    logger.debug("PN_PREFIX was not valid (start character invalid) i=0 nextchar={} prefix=",prefix.charAt(0),prefix);    return false;  }  final int numberOfCodePoints=prefix.codePointCount(0,prefix.length());  for (int i=1; i < numberOfCodePoints; i++) {    final int codePoint=prefix.codePointAt(i);    if (!isPN_CHARS(codePoint) || (codePoint == '.' && i < (numberOfCodePoints - 1))) {      logger.debug("PN_PREFIX was not valid (intermediate character invalid) i=" + i + " nextchar={} prefix={}",Character.toChars(codePoint),prefix);      return false;    }    if (codePoint == '%' && (prefix.length() - i) < 2) {      logger.debug("PN_PREFIX was not valid (percent encoding) i=" + i + " nextchar={} prefix={}",Character.toChars(codePoint),prefix);      return false;    }    if (Character.isHighSurrogate((char)codePoint)) {      i++;    }  }  return true;}  }
class C{  private boolean hasFallbackChildren(){  for (ElemTemplateElement child=m_firstChild; child != null; child=child.m_nextSibling) {    if (child.getXSLToken() == Constants.ELEMNAME_FALLBACK)     return true;  }  return false;}  }
class C{  public static TaskStackBuilder create(Context context){  return new TaskStackBuilder(context);}  }
class C{  public Writer write(Writer writer,int indentFactor,int indent) throws JSONException {  try {    boolean commanate=false;    final int length=this.length();    Iterator<String> keys=this.keys();    writer.write('{');    if (length == 1) {      Object key=keys.next();      writer.write(quote(key.toString()));      writer.write(':');      if (indentFactor > 0) {        writer.write(' ');      }      writeValue(writer,this.map.get(key),indentFactor,indent);    } else     if (length != 0) {      final int newindent=indent + indentFactor;      while (keys.hasNext()) {        Object key=keys.next();        if (commanate) {          writer.write(',');        }        if (indentFactor > 0) {          writer.write('\n');        }        indent(writer,newindent);        writer.write(quote(key.toString()));        writer.write(':');        if (indentFactor > 0) {          writer.write(' ');        }        writeValue(writer,this.map.get(key),indentFactor,newindent);        commanate=true;      }      if (indentFactor > 0) {        writer.write('\n');      }      indent(writer,indent);    }    writer.write('}');    return writer;  } catch (  IOException exception) {    throw new JSONException(exception);  }}  }
class C{  public int size(){  return cartLines.size();}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.EXPORT_DECLARATION__EXPORTED_ELEMENT:    setExportedElement((ExportableElement)newValue);  return;case N4JSPackage.EXPORT_DECLARATION__DEFAULT_EXPORTED_EXPRESSION:setDefaultExportedExpression((Expression)newValue);return;case N4JSPackage.EXPORT_DECLARATION__NAMED_EXPORTS:getNamedExports().clear();getNamedExports().addAll((Collection<? extends ExportSpecifier>)newValue);return;case N4JSPackage.EXPORT_DECLARATION__WILDCARD_EXPORT:setWildcardExport((Boolean)newValue);return;case N4JSPackage.EXPORT_DECLARATION__DEFAULT_EXPORT:setDefaultExport((Boolean)newValue);return;case N4JSPackage.EXPORT_DECLARATION__REEXPORTED_FROM:setReexportedFrom((TModule)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void paint(SynthContext context,Graphics g){}  }
class C{  public static SitemapsEntry insertSitemap(WebmasterToolsService myService,String siteUrl,String sitemapUrl) throws IOException, ServiceException {  SitemapsRegularEntry entry=new SitemapsRegularEntry();  entry.setId(sitemapUrl);  entry.setSitemapType(GENERAL_WEB_SITEMAP);  System.out.println("Sitemap: " + sitemapUrl + " now being added.");  return myService.insert(getSitemapsFeedUrl(siteUrl),entry);}  }
class C{  public static boolean isMesh(String data){  return data.contains("with mesh");}  }
class C{  public PriceModelHandler(DataService mgr,PriceModel priceModel,long txnTime){  this.mgr=mgr;  this.priceModel=priceModel;  this.txnTime=Long.valueOf(txnTime);}  }
class C{  public int makeSphere(final Vector pos,final Pattern block,double radiusX,double radiusY,double radiusZ,final boolean filled) throws MaxChangedBlocksException {  radiusX+=0.5;  radiusY+=0.5;  radiusZ+=0.5;  final double invRadiusX=1 / radiusX;  final double invRadiusY=1 / radiusY;  final double invRadiusZ=1 / radiusZ;  final int ceilRadiusX=(int)Math.ceil(radiusX);  final int ceilRadiusY=(int)Math.ceil(radiusY);  final int ceilRadiusZ=(int)Math.ceil(radiusZ);  double nextXn=0;  forX:   for (int x=0; x <= ceilRadiusX; ++x) {    final double xn=nextXn;    nextXn=(x + 1) * invRadiusX;    double nextYn=0;    forY:     for (int y=0; y <= ceilRadiusY; ++y) {      final double yn=nextYn;      nextYn=(y + 1) * invRadiusY;      double nextZn=0;      forZ:       for (int z=0; z <= ceilRadiusZ; ++z) {        final double zn=nextZn;        nextZn=(z + 1) * invRadiusZ;        final double distanceSq=this.lengthSq(xn,yn,zn);        if (distanceSq > 1) {          if (z == 0) {            if (y == 0) {              break forX;            }            break forY;          }          break forZ;        }        if (!filled) {          if ((this.lengthSq(nextXn,yn,zn) <= 1) && (this.lengthSq(xn,nextYn,zn) <= 1) && (this.lengthSq(xn,yn,nextZn) <= 1)) {            continue;          }        }        this.setBlock(pos.add(x,y,z),block);        this.setBlock(pos.add(-x,y,z),block);        this.setBlock(pos.add(x,-y,z),block);        this.setBlock(pos.add(x,y,-z),block);        this.setBlock(pos.add(-x,-y,z),block);        this.setBlock(pos.add(x,-y,-z),block);        this.setBlock(pos.add(-x,y,-z),block);        this.setBlock(pos.add(-x,-y,-z),block);      }    }  }  return changes;}  }
class C{  public static boolean isCurrentUserInRole(String authority){  SecurityContext securityContext=SecurityContextHolder.getContext();  Authentication authentication=securityContext.getAuthentication();  if (authentication != null) {    if (authentication.getPrincipal() instanceof UserDetails) {      UserDetails springSecurityUser=(UserDetails)authentication.getPrincipal();      return springSecurityUser.getAuthorities().contains(new SimpleGrantedAuthority(authority));    }  }  return false;}  }
class C{  public PLVertex(){  this(0.0f,0.0f,0.0f);}  }
class C{  public void testDumpLoad() throws FileNotFoundException, IOException {  System.out.println("dumpLoad");  FileInputStream fis=null;  DumpParser instance=null;  try {    fis=new FileInputStream("test/none/test.log");    Map dumpMap=new HashMap();    Vector topNodes=new Vector();    instance=DumpParserFactory.get().getDumpParserForLogfile(fis,dumpMap,false,0);    assertTrue(instance instanceof SunJDKParser);    while (instance.hasMoreDumps()) {      topNodes.add(instance.parseNext());    }    assertEquals(3,topNodes.size());  }  finally {    if (instance != null) {      instance.close();    }    if (fis != null) {      fis.close();    }  }}  }
class C{  public Builder withLeader(Address leader){  response.leader=leader;  return this;}  }
class C{  public static boolean isBeforeByDate(final Date actualDate,final Date when){  final SimpleDateFormat df=new SimpleDateFormat("dd/MM/yyyy",new Locale("en","IN"));  final String strFromDate=df.format(actualDate);  final String strToDate=df.format(when);  Date tFromDate=null;  Date tToDate=null;  try {    tFromDate=df.parse(strFromDate);    tToDate=df.parse(strToDate);    return tFromDate.before(tToDate);  } catch (  final ParseException pe) {    logger.error("Exp in isBeforeByDate() >>>" + pe);    return false;  }catch (  final IllegalArgumentException ie) {    logger.error("Exp in isBeforeByDate() >>>" + ie);    return false;  }}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  private void doAutoShuffleUpdate(){  boolean notify=false;  if (mPlayPos > 10) {    removeTracks(0,mPlayPos - 9);    notify=true;  }  final int toAdd=7 - (mPlayListLen - (mPlayPos < 0 ? -1 : mPlayPos));  for (int i=0; i < toAdd; i++) {    int lookback=mHistory.size();    int idx=-1;    while (true) {      idx=mShuffler.nextInt(mAutoShuffleList.length);      if (!wasRecentlyUsed(idx,lookback)) {        break;      }      lookback/=2;    }    mHistory.add(idx);    if (mHistory.size() > MAX_HISTORY_SIZE) {      mHistory.remove(0);    }    ensurePlayListCapacity(mPlayListLen + 1);    mPlayList[mPlayListLen++]=mAutoShuffleList[idx];    notify=true;  }  if (notify) {    notifyChange(QUEUE_CHANGED);  }}  }
class C{  public Vehicle_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_vehicleIdentifier=jcas.getRequiredFeatureDE(casType,"vehicleIdentifier","uima.cas.String",featOkTst);  casFeatCode_vehicleIdentifier=(null == casFeat_vehicleIdentifier) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_vehicleIdentifier).getCode();}  }
class C{  public String toString(int indentFactor) throws JSONException {  StringWriter sw=new StringWriter();synchronized (sw.getBuffer()) {    return this.write(sw,indentFactor,0).toString();  }}  }
class C{  public T caseTypeParameter(TypeParameter object){  return null;}  }
class C{  public Image mirror(){  int width=getWidth();  int height=getHeight();  int[] tmp=getRGB();  int[] arr=new int[width * height];  for (int x=0; x < width; x++) {    for (int y=0; y < height; y++) {      arr[x + y * width]=tmp[width - x - 1 + y * width];    }  }  Image i=new Image(Display.impl.createImage(arr,width,height));  i.opaque=opaque;  i.opaqueTested=opaqueTested;  return i;}  }
class C{  public final CC gapBefore(String boundsSize){  hor.setGapBefore(ConstraintParser.parseBoundSize(boundsSize,true,true));  return this;}  }
class C{  public void run(){  Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);  State state=new State(mInfo,mService);  AndroidHttpClient client=null;  PowerManager.WakeLock wakeLock=null;  int finalStatus=DownloaderService.STATUS_UNKNOWN_ERROR;  try {    PowerManager pm=(PowerManager)mContext.getSystemService(Context.POWER_SERVICE);    wakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,Constants.TAG);    wakeLock.acquire();    if (Constants.LOGV) {      Log.v(Constants.TAG,"initiating download for " + mInfo.mFileName);      Log.v(Constants.TAG,"  at " + mInfo.mUri);    }    client=AndroidHttpClient.newInstance(userAgent(),mContext);    boolean finished=false;    while (!finished) {      if (Constants.LOGV) {        Log.v(Constants.TAG,"initiating download for " + mInfo.mFileName);        Log.v(Constants.TAG,"  at " + mInfo.mUri);      }      ConnRouteParams.setDefaultProxy(client.getParams(),getPreferredHttpHost(mContext,state.mRequestUri));      HttpGet request=new HttpGet(state.mRequestUri);      try {        executeDownload(state,client,request);        finished=true;      } catch (      RetryDownload exc) {      } finally {        request.abort();        request=null;      }    }    if (Constants.LOGV) {      Log.v(Constants.TAG,"download completed for " + mInfo.mFileName);      Log.v(Constants.TAG,"  at " + mInfo.mUri);    }    finalizeDestinationFile(state);    finalStatus=DownloaderService.STATUS_SUCCESS;  } catch (  StopRequest error) {    Log.w(Constants.TAG,"Aborting request for download " + mInfo.mFileName + ": "+ error.getMessage());    error.printStackTrace();    finalStatus=error.mFinalStatus;  }catch (  Throwable ex) {    Log.w(Constants.TAG,"Exception for " + mInfo.mFileName + ": "+ ex);    finalStatus=DownloaderService.STATUS_UNKNOWN_ERROR;  } finally {    if (wakeLock != null) {      wakeLock.release();      wakeLock=null;    }    if (client != null) {      client.close();      client=null;    }    cleanupDestination(state,finalStatus);    notifyDownloadCompleted(finalStatus,state.mCountRetry,state.mRetryAfter,state.mRedirectCount,state.mGotData,state.mFilename);  }}  }
class C{  static Automaton reverse(Automaton a,Set<Integer> initialStates){  if (Operations.isEmpty(a)) {    return new Automaton();  }  int numStates=a.getNumStates();  Automaton.Builder builder=new Automaton.Builder();  builder.createState();  for (int s=0; s < numStates; s++) {    builder.createState();  }  builder.setAccept(1,true);  Transition t=new Transition();  for (int s=0; s < numStates; s++) {    int numTransitions=a.getNumTransitions(s);    a.initTransition(s,t);    for (int i=0; i < numTransitions; i++) {      a.getNextTransition(t);      builder.addTransition(t.dest + 1,s + 1,t.min,t.max);    }  }  Automaton result=builder.finish();  int s=0;  BitSet acceptStates=a.getAcceptStates();  while (s < numStates && (s=acceptStates.nextSetBit(s)) != -1) {    result.addEpsilon(0,s + 1);    if (initialStates != null) {      initialStates.add(s + 1);    }    s++;  }  result.finishState();  return result;}  }
class C{  public int addAttribute(QName name,String type,String value){  int index;  if (fLength < SIZE_LIMIT) {    index=name.uri != null && !name.uri.equals("") ? getIndexFast(name.uri,name.localpart) : getIndexFast(name.rawname);    if (index == -1) {      index=fLength;      if (fLength++ == fAttributes.length) {        Attribute[] attributes=new AttributeMMImpl[fAttributes.length + 4];        System.arraycopy(fAttributes,0,attributes,0,fAttributes.length);        for (int i=fAttributes.length; i < attributes.length; i++) {          attributes[i]=new AttributeMMImpl();        }        fAttributes=attributes;      }    }  } else   if (name.uri == null || name.uri.length() == 0 || (index=getIndexFast(name.uri,name.localpart)) == -1) {    if (!fIsTableViewConsistent || fLength == SIZE_LIMIT) {      prepareAndPopulateTableView();      fIsTableViewConsistent=true;    }    int bucket=getTableViewBucket(name.rawname);    if (fAttributeTableViewChainState[bucket] != fLargeCount) {      index=fLength;      if (fLength++ == fAttributes.length) {        Attribute[] attributes=new AttributeMMImpl[fAttributes.length << 1];        System.arraycopy(fAttributes,0,attributes,0,fAttributes.length);        for (int i=fAttributes.length; i < attributes.length; i++) {          attributes[i]=new AttributeMMImpl();        }        fAttributes=attributes;      }      fAttributeTableViewChainState[bucket]=fLargeCount;      fAttributes[index].next=null;      fAttributeTableView[bucket]=fAttributes[index];    } else {      Attribute found=fAttributeTableView[bucket];      while (found != null) {        if (found.name.rawname == name.rawname) {          break;        }        found=found.next;      }      if (found == null) {        index=fLength;        if (fLength++ == fAttributes.length) {          Attribute[] attributes=new AttributeMMImpl[fAttributes.length << 1];          System.arraycopy(fAttributes,0,attributes,0,fAttributes.length);          for (int i=fAttributes.length; i < attributes.length; i++) {            attributes[i]=new AttributeMMImpl();          }          fAttributes=attributes;        }        fAttributes[index].next=fAttributeTableView[bucket];        fAttributeTableView[bucket]=fAttributes[index];      } else {        index=getIndexFast(name.rawname);      }    }  }  Attribute attribute=fAttributes[index];  attribute.name.setValues(name);  attribute.type=type;  attribute.value=value;  attribute.nonNormalizedValue=value;  attribute.specified=false;  attribute.augs.removeAllItems();  return index;}  }
class C{  public void removeHierarchyChangeListener(@NotNull final HierarchyChangeListener l){  myListenerList.remove(HierarchyChangeListener.class,l);}  }
class C{  public void removeAllErrorCallbacks(){  errorCallbacks.clear();}  }
class C{  public List<Recommendation> scheduleStorage(VirtualArray srcVarray,Set<URI> requestedVPlexSystems,URI srcStorageSystem,VirtualPool srcVpool,boolean isHARequest,VirtualArray requestedHaVarray,VirtualPool haVpool,VirtualPoolCapabilityValuesWrapper capabilities,Project project,VpoolUse vpoolUse,Map<VpoolUse,List<Recommendation>> currentRecommendations){  _log.info("Executing VPlex high availability placement strategy");  if (!isHARequest) {    return scheduleStorageForLocalVPLEXVolume(srcVarray,requestedVPlexSystems,srcStorageSystem,srcVpool,capabilities,project,vpoolUse,currentRecommendations);  } else {    return scheduleStorageForDistributedVPLEXVolume(srcVarray,requestedVPlexSystems,srcStorageSystem,srcVpool,requestedHaVarray,haVpool,capabilities,project,vpoolUse,currentRecommendations);  }}  }
class C{  public GlobalBeforeTranslationScanner(TranspilationHandler logHandler,JSweetContext context){  super(logHandler,context,null);}  }
class C{  void tidy(int windowStartYear){  if (lastRuleList.size() == 1) {    throw new IllegalStateException("Cannot have only one rule defined as being forever");  }  if (windowEnd.equals(LocalDateTime.MAX)) {    maxLastRuleStartYear=Math.max(maxLastRuleStartYear,windowStartYear) + 1;    for (    TZRule lastRule : lastRuleList) {      addRule(lastRule.year,maxLastRuleStartYear,lastRule.month,lastRule.dayOfMonthIndicator,lastRule.dayOfWeek,lastRule.time,lastRule.timeEndOfDay,lastRule.timeDefinition,lastRule.savingAmountSecs);      lastRule.year=maxLastRuleStartYear + 1;    }    if (maxLastRuleStartYear == YEAR_MAX_VALUE) {      lastRuleList.clear();    } else {      maxLastRuleStartYear++;    }  } else {    int endYear=windowEnd.getYear();    for (    TZRule lastRule : lastRuleList) {      addRule(lastRule.year,endYear + 1,lastRule.month,lastRule.dayOfMonthIndicator,lastRule.dayOfWeek,lastRule.time,lastRule.timeEndOfDay,lastRule.timeDefinition,lastRule.savingAmountSecs);    }    lastRuleList.clear();    maxLastRuleStartYear=YEAR_MAX_VALUE;  }  Collections.sort(ruleList);  Collections.sort(lastRuleList);  if (ruleList.size() == 0 && fixedSavingAmountSecs == null) {    fixedSavingAmountSecs=0;  }}  }
class C{  private void finishEdit(){  this.setVisible(false);}  }
class C{  public static boolean isJarFileURL(URL url){  return (URL_PROTOCOL_FILE.equals(url.getProtocol()) && url.getPath().toLowerCase().endsWith(JAR_FILE_EXTENSION));}  }
class C{  public static boolean isIdentityEncoding(char ch){  return ch >= 0 && ch <= 255 && IDENT_PDF_DOC_ENCODING_MAP[ch];}  }
class C{  protected EnumerationTypeImpl(){  super();}  }
class C{  public boolean canBeStaticallyBound(){  return Modifier.isFinal(flags | clazz.getModifiers());}  }
class C{  public void putVector(Object key,Vector vector){  IncompatibleVectorsException.checkVectorsCompatible(zeroVector,vector);  ObjectVector objectVector=new ObjectVector(key,vector);  this.objectVectors.put(key,objectVector);}  }
class C{  public static int editDistance(String s,String t){  int n=s.length();  int m=t.length();  if (n == 0) {    return m;  } else   if (m == 0) {    return n;  }  int p[]=new int[n + 1];  int d[]=new int[n + 1];  int _d[];  int i;  int j;  char t_j;  int cost;  for (i=0; i <= n; i++) {    p[i]=i;  }  for (j=1; j <= m; j++) {    t_j=t.charAt(j - 1);    d[0]=j;    for (i=1; i <= n; i++) {      cost=s.charAt(i - 1) == t_j ? 0 : 1;      d[i]=Math.min(Math.min(d[i - 1] + 1,p[i] + 1),p[i - 1] + cost);    }    _d=p;    p=d;    d=_d;  }  return p[n];}  }
class C{  public DataUri(String text){  this("text/plain",text);}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  protected UDPSlaveTerminal(InetAddress localaddress){  address=localaddress;}  }
class C{  private void checkDestroyed(){  if (this.destroyed) {    String s="Attempting to use destroyed grant token: " + this;    IllegalStateException e=new IllegalStateException(s);    throw e;  }}  }
class C{  public void testNextFloat(){  float f=ThreadLocalRandom.current().nextFloat();  int i=0;  while (i < NCALLS && ThreadLocalRandom.current().nextFloat() == f)   ++i;  assertTrue(i < NCALLS);}  }
class C{  public void stopClusterGossiping(){  DbJmxClient localClient=getJmxClient(LOCALHOST);  List<String> liveNodes=localClient.getDcLiveNodes(VdcUtil.getLocalShortVdcId());  for (  String ip : liveNodes) {    log.info("Stop gossiping for {}",ip);    ip=getEffectiveAddress(ip);    try {      DbJmxClient client=getJmxClient(ip);      client.stopGossiping();    } catch (    Exception ignored) {      log.error("Ignored: stop gossiping failed on node {}",ip);    }  }}  }
class C{  public void addVetoableChangeListener(String propertyName,VetoableChangeListener in_vcl){  beanContextChildSupport.addVetoableChangeListener(propertyName,in_vcl);}  }
class C{  public final boolean isUnion(){  return true;}  }
class C{  public static void syncContactsIfNecessary(boolean uploadFlag){  if (uploadFlag) {    final long lastContactSyncTime=SharedPreferenceHelper.getLong(R.string.pref_last_contact_sync_time);    if ((Utils.getCurrentEpochTime() - lastContactSyncTime) > AppConstants.CONTACT_SYNC_INTERVAL) {      final Intent syncContactsIntent=new Intent(sStaticContext,FriendFinderService.class);      syncContactsIntent.setAction(FriendFinderService.ACTION_FIND_FRIENDS);      sStaticContext.startService(syncContactsIntent);    }  }}  }
class C{  public void executeOperation() throws SaaSApplicationException {  POSubscription sub=model.getSelectedSubscription();  if (sub == null) {    return;  }  OperationModel selectedOperation=sub.getSelectedOperation();  if (selectedOperation == null || selectedOperation.getOperation() == null) {    return;  }  VOTechnicalServiceOperation operation=selectedOperation.getOperation();  try {    subscriptionService.executeServiceOperation(sub.getVOSubscription(),operation);  } catch (  ConcurrentModificationException e) {    ui.handleError(null,ERROR_SUBSCRIPTION_CONCURRENTMODIFY);    return;  }  ui.handle(INFO_OPERATION_EXECUTED,operation.getOperationName());}  }
class C{  public void testDatagram() throws Exception {  Reflector reflector=null;  DatagramSocket socket=null;  try {    reflector=new Reflector(1234,InetAddress.getLocalHost());    reflector.start();    byte[] buffer=new byte[256];    DatagramPacket packet=new DatagramPacket(buffer,buffer.length);    socket=new DatagramSocket(2345,InetAddress.getLocalHost());    socket.setSoTimeout(5 * 1000);    for (int i=1; i <= 10; i++) {      String s="Hello, Android world #" + i + "!";      stringToPacket(s,packet);      packet.setAddress(InetAddress.getLocalHost());      packet.setPort(1234);      socket.send(packet);      try {        Thread.sleep(100);      } catch (      InterruptedException ex) {      }      packet.setLength(buffer.length);      socket.receive(packet);      String t=stringFromPacket(packet);      assertEquals(s.toUpperCase(),t);    }  }  finally {    if (reflector != null) {      reflector.alive=false;      reflector.interrupt();      reflector.socket.close();    }    if (socket != null) {      socket.close();    }  }}  }
class C{  public int num(){  return i & (~HARDENED_BIT);}  }
class C{  public synchronized Sha256Hash hashForSignature(int inputIndex,byte[] connectedScript,SigHash type,boolean anyoneCanPay){  byte sigHashType=(byte)TransactionSignature.calcSigHashValue(type,anyoneCanPay);  return hashForSignature(inputIndex,connectedScript,sigHashType);}  }
class C{  protected void sequence_TypeVariable(ISerializationContext context,TypeVariable semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  static void register(Object value){synchronized (HashCodeBuilder.class) {    if (getRegistry() == null) {      REGISTRY.set(new HashSet());    }  }  getRegistry().add(new IDKey(value));}  }
class C{  private void pushStatementContext(){  statementSpecStack.push(statementSpec);  astExprNodeMapStack.push(astExprNodeMap);  statementSpec=new StatementSpecRaw(defaultStreamSelector);  astExprNodeMap=new HashMap<>();}  }
class C{  public Object put(String name,Object value){  checkKey(name);  return map.put(name,value);}  }
class C{  public URI parseServerAuthority() throws URISyntaxException {  if (!serverAuthority) {    parseAuthority(true);  }  return this;}  }
class C{  public void addError(@Nonnull IMFErrors.ErrorCodes errorCode,@Nonnull IMFErrors.ErrorLevels errorLevel,@Nonnull String errorDescription){  this.errorObjects.add(new ErrorLogger.ErrorObject(errorCode,errorLevel,errorDescription));}  }
class C{  @Override void addMapping(RegionEntry entry) throws IMQException {  throw new RuntimeException(LocalizedStrings.PartitionedIndex_NOT_SUPPORTED_ON_PARTITIONED_INDEX.toLocalizedString());}  }
class C{  protected boolean isValid(T method){  return Modifier.isPublic(method.getModifiers());}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public boolean isDnsConfigSupported(){  return dnsConfigSupported;}  }
class C{  private void initNativeTransform(){  if (nativeTransform == null) {    nativeTransform=impl.makeTransformIdentity();    if (type == TYPE_TRANSLATION) {      impl.setTransformTranslation(nativeTransform,translateX,translateY,translateZ);    } else     if (type == TYPE_SCALE) {      impl.setTransformScale(nativeTransform,scaleX,scaleY,scaleZ);    }  } else {switch (type) {case TYPE_TRANSLATION:      impl.setTransformTranslation(nativeTransform,translateX,translateY,translateZ);    break;case TYPE_SCALE:  impl.setTransformScale(nativeTransform,scaleX,scaleY,scaleZ);break;case TYPE_IDENTITY:impl.setTransformIdentity(nativeTransform);break;}}dirty=false;}  }
class C{  @Override public void close() throws IOException {}  }
class C{  public int encryptBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  if ((inOff + blockSize) > in.length) {    throw new DataLengthException("input buffer too short");  }  if ((outOff + blockSize) > out.length) {    throw new DataLengthException("output buffer too short");  }  cipher.processBlock(cfbV,0,cfbOutV,0);  for (int i=0; i < blockSize; i++) {    out[outOff + i]=(byte)(cfbOutV[i] ^ in[inOff + i]);  }  System.arraycopy(cfbV,blockSize,cfbV,0,cfbV.length - blockSize);  System.arraycopy(out,outOff,cfbV,cfbV.length - blockSize,blockSize);  return blockSize;}  }
class C{  @Override public String toString(){  StringBuffer text=new StringBuffer();  if (m_trainInstances == null) {    text.append("ReliefF feature evaluator has not been built yet\n");  } else {    text.append("\tReliefF Ranking Filter");    text.append("\n\tInstances sampled: ");    if (m_sampleM == -1) {      text.append("all\n");    } else {      text.append(m_sampleM + "\n");    }    text.append("\tNumber of nearest neighbours (k): " + m_Knn + "\n");    if (m_weightByDistance) {      text.append("\tExponentially decreasing (with distance) " + "influence for\n" + "\tnearest neighbours. Sigma: " + m_sigma + "\n");    } else {      text.append("\tEqual influence nearest neighbours\n");    }  }  return text.toString();}  }
class C{  public final String replaceFirst(String input,String replacement){  return this.pattern.matcher(input).replaceFirst(replacement);}  }
class C{  public void acceptMerge(final @NotNull Conflict conflict,final ResolveConflictsModel model) throws VcsException {  logger.info(String.format("Merging changes for file %s",conflict.getLocalPath()));  final File conflictPath=new File(conflict.getLocalPath());  final ServerContext context=TFSVcs.getInstance(project).getServerContext(false);  final FilePath localPath=VersionControlPath.getFilePath(conflict.getLocalPath(),conflictPath.isDirectory());  ContentTriplet contentTriplet=null;  if (isContentConflict(conflict)) {    logger.info("Content conflict have been found so getting file contents");    contentTriplet=populateThreeWayDiffWithProgress(conflict,conflictPath,localPath,context);  }  if (isNameConflict(conflict) && isContentConflict(conflict)) {    logger.info("Both conflict types found");    processBothConflicts(conflict,context,model,conflictPath,contentTriplet);  } else   if (isNameConflict(conflict)) {    logger.info("Naming conflict found");    processRenameConflict(conflict,context,model);  } else   if (isContentConflict(conflict)) {    logger.info("Content conflict found");    processContentConflict(context,model,contentTriplet,localPath);  } else {    logger.error("Unknown conflict state");  }}  }
class C{  public void internalFrameClosing(InternalFrameEvent e){  ActionEvent e2=new ActionEvent(e.getSource(),ActionEvent.ACTION_PERFORMED,"FrameClosing");  CloseSessionAction closeSessionAction=new CloseSessionAction();  closeSessionAction.actionPerformed(e2);}  }
class C{  public Statement having(Object column){  statement.append(" HAVING ").append(column);  return this;}  }
class C{  protected void writeTldDescription() throws IOException {  writer.startElement("taglib");  writer.writeComment("============== Tag Library Description Elements =============");  writer.startElement("tlib-version");  writer.writeText(JSF_TLIB_VERSION);  writer.closeElement();  writer.startElement("jsp-version");  writer.writeText(JSP_VERSION);  writer.closeElement();  writer.startElement("short-name");  writer.writeText(propManager.getProperty(PropertyManager.TAGLIB_SHORT_NAME));  writer.closeElement();  writer.startElement("uri");  writer.writeText(propManager.getProperty(PropertyManager.TAGLIB_URI));  writer.closeElement();  String description=propManager.getProperty(PropertyManager.TAGLIB_DESCRIPTION);  if (description != null && description.length() > 0) {    writer.startElement("description");    writer.writeText(description);    writer.closeElement();  }}  }
class C{  private boolean isNameAndAddressSet(){  return mName != null && mAddress != null && mName.length() > 0 && mAddress.length() > 0;}  }
class C{  public void paint(Graphics g){  Graphics2D g2=(Graphics2D)g;  g2.setBackground(bgColor);  g2.translate(PLAYFIELD_OFFSET,PLAYFIELD_OFFSET);  g2.clearRect(-PLAYFIELD_OFFSET,-PLAYFIELD_OFFSET,this.getWidth() + PLAYFIELD_OFFSET,this.getHeight() + PLAYFIELD_OFFSET);  if (underlayImage != null) {    g2.drawImage(underlayImage,curTransform,null);  }  if (mapGraphic != null && showMapGraphic) {    mapGraphic.draw(g2);  }  for (  DTNHost h : w.getHosts()) {    new NodeGraphic(h).draw(g2);  }  for (int i=0, n=overlayGraphics.size(); i < n; i++) {    overlayGraphics.get(i).draw(g2);  }  this.refGraphic.draw(g2);}  }
class C{  public void testCCParentExpressionEvaluationWithNestingLevels() throws Exception {  HtmlPage page=getPage("/faces/composite/nesting07.xhtml");  List<HtmlSpan> spans=new ArrayList<HtmlSpan>(4);  getAllElementsOfGivenClass(page,spans,HtmlSpan.class);  assertEquals(4,4,spans.size());  final String[] expectedSpanValues={"A","A","B","C"};  for (int i=0, len=spans.size(); i < len; i++) {    String spanText=spans.get(i).asText();    assertEquals("Index: " + i + ", expected: "+ expectedSpanValues[i]+ ", received: "+ spanText,expectedSpanValues[i],spanText);  }  HtmlSubmitInput button=(HtmlSubmitInput)getInputContainingGivenId(page,"form:submit");  assertNotNull(button);  page=button.click();  spans.clear();  getAllElementsOfGivenClass(page,spans,HtmlSpan.class);  assertEquals(4,4,spans.size());  for (int i=0, len=spans.size(); i < len; i++) {    String spanText=spans.get(i).asText();    assertEquals("Index: " + i + ", expected: "+ expectedSpanValues[i]+ ", received: "+ spanText,expectedSpanValues[i],spanText);  }}  }
class C{  public boolean hasCondition(){  return (condition != null);}  }
class C{  protected void fireStateChanged(){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ChangeListener.class) {      if (changeEvent == null)       changeEvent=new ChangeEvent(this);      ((ChangeListener)listeners[i + 1]).stateChanged(changeEvent);    }  }}  }
class C{  void determineCameraAvailability(){  PackageManager manager=getPackageManager();  isFrontFacingCameraDetected=manager.hasSystemFeature(PackageManager.FEATURE_CAMERA_FRONT);  isBackFacingCameraDetected=manager.hasSystemFeature(PackageManager.FEATURE_CAMERA);  if (!isFrontFacingCameraDetected && !isBackFacingCameraDetected) {    progressBar.setVisibility(View.INVISIBLE);    pleaseWaitTextView.setVisibility(View.INVISIBLE);    TextView notFoundTextView=(TextView)findViewById(R.id.not_found_textview);    notFoundTextView.setVisibility(View.VISIBLE);  }  SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(this);  String cameraTypeName=sharedPreferences.getString("cameraType",CameraDetector.CameraType.CAMERA_FRONT.name());  if (cameraTypeName.equals(CameraDetector.CameraType.CAMERA_FRONT.name())) {    cameraType=CameraDetector.CameraType.CAMERA_FRONT;    mirrorPoints=true;  } else {    cameraType=CameraDetector.CameraType.CAMERA_BACK;    mirrorPoints=false;  }}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  response.setContentType("text/html");  PrintWriter out=response.getWriter();  out.println("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">");  out.println("<HTML>");  out.println("  <HEAD><TITLE>A Servlet</TITLE></HEAD>");  out.println("  <BODY>");  out.print("    This is ");  out.print(this.getClass());  out.println(", using the POST method");  out.println("  </BODY>");  out.println("</HTML>");  out.flush();  out.close();}  }
class C{  public static boolean contentEquals(InputStream input1,InputStream input2) throws IOException {  if (!(input1 instanceof BufferedInputStream)) {    input1=new BufferedInputStream(input1);  }  if (!(input2 instanceof BufferedInputStream)) {    input2=new BufferedInputStream(input2);  }  int ch=input1.read();  while (EOF != ch) {    int ch2=input2.read();    if (ch != ch2) {      return false;    }    ch=input1.read();  }  int ch2=input2.read();  return ch2 == EOF;}  }
class C{  private static void checkParameters(XYMultipleSeriesDataset dataset,XYMultipleSeriesRenderer renderer){  if (dataset == null || renderer == null || dataset.getSeriesCount() != renderer.getSeriesRendererCount()) {    throw new IllegalArgumentException("Dataset and renderer should be not null and should have the same number of series");  }}  }
class C{  public StatisticsDisabledException(){}  }
class C{  public SynonymQuery(Term... terms){  this.terms=Objects.requireNonNull(terms).clone();  String field=null;  for (  Term term : terms) {    if (field == null) {      field=term.field();    } else     if (!term.field().equals(field)) {      throw new IllegalArgumentException("Synonyms must be across the same field");    }  }  if (terms.length > BooleanQuery.getMaxClauseCount()) {    throw new BooleanQuery.TooManyClauses();  }  Arrays.sort(this.terms);}  }
class C{  public void receiveErrordeletePlatformSession(java.lang.Exception e){}  }
class C{  public List<CountryRO> viewAddressCountryOptions(final ShoppingCart cart,final Shop shop,final String addressType){  final List<Country> countries=addressBookFacade.getAllCountries(shop.getCode(),addressType);  return map(countries,CountryRO.class,Country.class);}  }
class C{  public void clearDomainMarkers(){  if (this.domainMarkers != null) {    this.domainMarkers.clear();    fireChangeEvent();  }}  }
class C{  private SerializerWriteInteger(){}  }
class C{  public CGroupNode(final int nodeId,final double x,final double y,final double width,final double height,final Color color,final boolean selected,final boolean visible,final Set<CTag> tags,final List<IComment> comment,final boolean collapsed,final SQLProvider provider){  super(nodeId,x,y,width,height,color,color.darker().darker(),selected,visible,tags,provider);  m_collapsed=collapsed;  m_provider=Preconditions.checkNotNull(provider,"IE02535: provider argument can not be null");  CommentManager.get(m_provider).initializeGroupNodeComment(this,comment == null ? Lists.<IComment>newArrayList() : comment);  CommentManager.get(m_provider).addListener(m_internalCommentListener);}  }
class C{  private static void readIndex(){  try {    readIndexMulti();  } catch (  Exception ex) {    throw new AssertionError(ex);  }  zoneInfos=new ZoneInfo[ids.length];}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override protected void unhookListeners(){  super.unhookListeners();  Text text=(Text)getCellEditor().getControl();  text.removeVerifyListener(verifyListener);  verifyListener=null;}  }
class C{  public RefactoringStatus checkConstantNameOnChange() throws JavaModelException {  if (Arrays.asList(getExcludedVariableNames()).contains(fConstantName))   return RefactoringStatus.createErrorStatus(Messages.format(RefactoringCoreMessages.ExtractConstantRefactoring_another_variable,BasicElementLabels.getJavaElementName(getConstantName())));  return Checks.checkConstantName(fConstantName,fCu);}  }
class C{  public static Object registerNamespace(String name,REnvironment env){  REnvironment nsreg=RContext.getInstance().stateREnvironment.getNamespaceRegistry();  try {    nsreg.put(name,env);    return env;  } catch (  PutException ex) {    return null;  }}  }
class C{  public void actionPerformed(ActionEvent evt){  System.out.println("Reload Page triggered");}  }
class C{  public void testCertPathBuilder07() throws NoSuchAlgorithmException, NoSuchProviderException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  CertPathBuilder certPB;  for (int i=0; i < validValues.length; i++) {    certPB=CertPathBuilder.getInstance(validValues[i],defaultProviderName);    assertEquals("Incorrect algorithm",certPB.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider name",certPB.getProvider().getName(),defaultProviderName);  }}  }
class C{  RegisterOperand makeLocal(int i,RegisterOperand props){  RegisterOperand local=makeLocal(i,props.getType());  local.setInheritableFlags(props);  BC2IR.setGuardForRegOp(local,BC2IR.copyGuardFromOperand(props));  return local;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof CyclicNumberAxis)) {    return false;  }  if (!super.equals(obj)) {    return false;  }  CyclicNumberAxis that=(CyclicNumberAxis)obj;  if (this.period != that.period) {    return false;  }  if (this.offset != that.offset) {    return false;  }  if (!PaintUtilities.equal(this.advanceLinePaint,that.advanceLinePaint)) {    return false;  }  if (!ObjectUtilities.equal(this.advanceLineStroke,that.advanceLineStroke)) {    return false;  }  if (this.advanceLineVisible != that.advanceLineVisible) {    return false;  }  if (this.boundMappedToLastCycle != that.boundMappedToLastCycle) {    return false;  }  return true;}  }
class C{  private LagWorkbench(Graph graph){  super(graph);  setRightClickPopupAllowed(true);}  }
class C{  public int reset(){  int no=super.size();  clear();  return no;}  }
class C{  public boolean isUnindexSupported(){  return true;}  }
class C{  public void dragDropEnd(DragSourceDropEvent dsde){  System.out.println("[Source] dragDropEnd");}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Response createResponse(int statusCode,CallIdHeader callId,CSeqHeader cSeq,FromHeader from,ToHeader to,List via,MaxForwardsHeader maxForwards,Object content,ContentTypeHeader contentType) throws ParseException {  if (callId == null || cSeq == null || from == null || to == null || via == null || maxForwards == null || content == null || contentType == null)   throw new NullPointerException(" unable to create the response");  SIPResponse sipResponse=new SIPResponse();  StatusLine statusLine=new StatusLine();  statusLine.setStatusCode(statusCode);  String reasonPhrase=SIPResponse.getReasonPhrase(statusCode);  statusLine.setReasonPhrase(reasonPhrase);  sipResponse.setStatusLine(statusLine);  sipResponse.setCallId(callId);  sipResponse.setCSeq(cSeq);  sipResponse.setFrom(from);  sipResponse.setTo(to);  sipResponse.setVia(via);  sipResponse.setMaxForwards(maxForwards);  sipResponse.setContent(content,contentType);  if (userAgent != null) {    sipResponse.setHeader(userAgent);  }  return sipResponse;}  }
class C{  public static Streamable<Integer> fromIntStream(final IntStream stream){  Objects.requireNonNull(stream);  return fromStream(ReactiveSeq.fromIntStream(stream));}  }
class C{  public void addButtonActionPerformed(){  javax.swing.JOptionPane.showMessageDialog(this,rb.getString("NotSupported1") + "\n" + rb.getString("NotSupported2"),rb.getString("NotSupportedTitle"),javax.swing.JOptionPane.INFORMATION_MESSAGE);  resetNotes();  return;}  }
class C{  public static void error(String tag,String text){  try {    Log.e(tag,getFormattedLogLine() + text);  } catch (  OutOfMemoryError error) {    error.printStackTrace();  }catch (  Exception exception) {    exception.printStackTrace();  }}  }
class C{  private static int haasAndStokes(int nRows,int sampleSize,ReaderColumnSelection sampleRowsReader){  HashMap<DblArray,Integer> valsCount=getValCounts(sampleRowsReader);  if (valsCount.size() == 0)   return 1;  int[] freqCounts=getFreqCounts(valsCount);  float q=((float)sampleSize) / nRows;  float _1MinusQ=1 - q;  float duj1Fraction=((float)sampleSize) / (sampleSize - _1MinusQ * freqCounts[0]);  float duj1=duj1Fraction * valsCount.size();  float gamma=0;  for (int i=1; i <= freqCounts.length; i++) {    gamma+=i * (i - 1) * freqCounts[i - 1];  }  gamma*=duj1 / sampleSize / sampleSize;  gamma+=duj1 / nRows - 1;  gamma=Math.max(gamma,0);  int estimate;  if (gamma < HAAS_AND_STOKES_ALPHA1) {    estimate=(int)(duj1Fraction * (valsCount.size() - freqCounts[0] * _1MinusQ * Math.log(_1MinusQ)* gamma / q));  } else   if (gamma < HAAS_AND_STOKES_ALPHA2) {    int numRemovedClasses=0;    float updatedNumRows=nRows;    int updatedSampleSize=sampleSize;    for (    Integer cnt : valsCount.values()) {      if (cnt > HAAS_AND_STOKES_UJ2A_C) {        numRemovedClasses++;        freqCounts[cnt - 1]--;        updatedSampleSize-=cnt;        updatedNumRows-=((float)cnt) / q;      }    }    if (updatedSampleSize == 0) {      estimate=(int)(duj1Fraction * (valsCount.size() - freqCounts[0] * (_1MinusQ) * Math.log(_1MinusQ)* gamma / q));    } else {      float updatedQ=((float)updatedSampleSize) / updatedNumRows;      int updatedSampleCardinality=valsCount.size() - numRemovedClasses;      float updatedDuj1Fraction=((float)updatedSampleSize) / (updatedSampleSize - (1 - updatedQ) * freqCounts[0]);      float updatedDuj1=updatedDuj1Fraction * updatedSampleCardinality;      float updatedGamma=0;      for (int i=1; i <= freqCounts.length; i++) {        updatedGamma+=i * (i - 1) * freqCounts[i - 1];      }      updatedGamma*=updatedDuj1 / updatedSampleSize / updatedSampleSize;      updatedGamma+=updatedDuj1 / updatedNumRows - 1;      updatedGamma=Math.max(updatedGamma,0);      estimate=(int)(updatedDuj1Fraction * (updatedSampleCardinality - freqCounts[0] * (1 - updatedQ) * Math.log(1 - updatedQ)* updatedGamma / updatedQ)) + numRemovedClasses;    }  } else {    float fraq1Numer=0;    float fraq1Denom=0;    float fraq2Numer=0;    float fraq2Denom=0;    for (int i=1; i <= freqCounts.length; i++) {      fraq1Numer+=i * q * q* Math.pow(1 - q * q,i - 1)* freqCounts[i - 1];      fraq1Denom+=Math.pow(_1MinusQ,i) * (Math.pow(1 + q,i) - 1) * freqCounts[i - 1];      fraq2Numer+=Math.pow(_1MinusQ,i) * freqCounts[i - 1];      fraq2Denom+=i * q * Math.pow(_1MinusQ,i - 1)* freqCounts[i - 1];    }    estimate=(int)(valsCount.size() + freqCounts[0] * fraq1Numer / fraq1Denom * fraq2Numer * fraq2Numer / fraq2Denom / fraq2Denom);  }  return estimate < 1 ? 1 : estimate;}  }
class C{  protected LocoNetMessage progOnMainMessage(int hopsa,int lopsa,int val,int cvnum){  LocoNetMessage m=new LocoNetMessage(0x1F);  m.setOpCode(LnConstants.OPC_IMM_PACKET);  m.setElement(1,0x1F);  m.setElement(2,0x01);  m.setElement(3,0x49);  m.setElement(4,0x42);  m.setElement(5,0x71 | (hopsa & 0x01) << 1 | (cvnum & 0x80) >> 4);  m.setElement(6,0x5E);  m.setElement(7,lopsa);  m.setElement(8,hopsa / 2);  m.setElement(9,cvnum & 0x7F);  m.setElement(10,0x70 | ((val & 0x80) >> 6));  m.setElement(11,cvnum / 256);  m.setElement(12,val & 0x7F);  m.setElement(15,0x10);  return m;}  }
class C{  public void dispose(){  if (keys != null) {    keys.clear();    keys=null;  }  super.dispose();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Attr newAttribute;  Node testAddress;  NamedNodeMap attributes;  Attr streetAttr;  boolean specified;  Node removedNode;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  testAddress=elementList.item(2);  attributes=testAddress.getAttributes();  removedNode=attributes.removeNamedItem("class");  streetAttr=(Attr)attributes.getNamedItem("class");  assertNull("isnull",streetAttr);}  }
class C{  @Override public boolean equals(Object objectToCompare){  if (super.equals(objectToCompare) && objectToCompare instanceof MappingAccessor) {    MappingAccessor mappingAccessor=(MappingAccessor)objectToCompare;    if (!valuesMatch(getClassAccessor(),mappingAccessor.getClassAccessor())) {      return false;    }    if (!valuesMatch(m_field,mappingAccessor.getField())) {      return false;    }    return valuesMatch(getAttributeType(),mappingAccessor.getAttributeType());  }  return false;}  }
class C{  public void tagDefineBits(int id,byte[] imageData) throws IOException {  startTag(SWFConstants.TAG_DEFINEBITS,id,true);  out.write(imageData);  completeTag();}  }
class C{  private void updateTableDefinition(int rowCountInc) throws IOException {  ByteBuffer tdefPage=_tableDefBufferH.setPage(getPageChannel(),_tableDefPageNumber);  _rowCount+=rowCountInc;  tdefPage.putInt(getFormat().OFFSET_NUM_ROWS,_rowCount);  tdefPage.putInt(getFormat().OFFSET_NEXT_AUTO_NUMBER,_lastLongAutoNumber);  int ctypeOff=getFormat().OFFSET_NEXT_COMPLEX_AUTO_NUMBER;  if (ctypeOff >= 0) {    tdefPage.putInt(ctypeOff,_lastComplexTypeAutoNumber);  }  for (  IndexData indexData : _indexDatas) {    tdefPage.putInt(indexData.getUniqueEntryCountOffset(),indexData.getUniqueEntryCount());    indexData.update();  }  getPageChannel().writePage(tdefPage,_tableDefPageNumber);}  }
class C{  private void addInstruction(final CCodeNode node,final InstructionLine line){  final CInstruction instruction=InstructionConverter.createInstruction(line,sqlProvider);  InstructionCache.get(sqlProvider).addInstruction(instruction);  localCommentIdToInstruction.put(line.getLocalInstructionCommentId(),new Pair<INaviInstruction,INaviCodeNode>(instruction,node));  globalCommentIdToInstruction.put(line.getGlobalInstructionComment(),instruction);  localCommentIdToCodeNode.put(line.getLocalNodeCommentId(),node);  globalCommentIdToCodeNode.put(line.getGlobalNodeCommentId(),node);  node.addInstruction(instruction,null);}  }
class C{  public final static byte[] decode(String str){  int sLen=str != null ? str.length() : 0;  if (sLen == 0)   return new byte[0];  int sepCnt=0;  for (int i=0; i < sLen; i++)   if (IA[str.charAt(i)] < 0)   sepCnt++;  if ((sLen - sepCnt) % 4 != 0)   return null;  int pad=0;  for (int i=sLen; i > 1 && IA[str.charAt(--i)] <= 0; )   if (str.charAt(i) == '=')   pad++;  int len=((sLen - sepCnt) * 6 >> 3) - pad;  byte[] dArr=new byte[len];  for (int s=0, d=0; d < len; ) {    int i=0;    for (int j=0; j < 4; j++) {      int c=IA[str.charAt(s++)];      if (c >= 0)       i|=c << (18 - j * 6); else       j--;    }    dArr[d++]=(byte)(i >> 16);    if (d < len) {      dArr[d++]=(byte)(i >> 8);      if (d < len)       dArr[d++]=(byte)i;    }  }  return dArr;}  }
class C{  public Polygon(double[] polyLats,double[] polyLons,Polygon... holes){  if (polyLats == null) {    throw new IllegalArgumentException("polyLats must not be null");  }  if (polyLons == null) {    throw new IllegalArgumentException("polyLons must not be null");  }  if (holes == null) {    throw new IllegalArgumentException("holes must not be null");  }  if (polyLats.length != polyLons.length) {    throw new IllegalArgumentException("polyLats and polyLons must be equal length");  }  if (polyLats.length != polyLons.length) {    throw new IllegalArgumentException("polyLats and polyLons must be equal length");  }  if (polyLats.length < 4) {    throw new IllegalArgumentException("at least 4 polygon points required");  }  if (polyLats[0] != polyLats[polyLats.length - 1]) {    throw new IllegalArgumentException("first and last points of the polygon must be the same (it must close itself): polyLats[0]=" + polyLats[0] + " polyLats["+ (polyLats.length - 1)+ "]="+ polyLats[polyLats.length - 1]);  }  if (polyLons[0] != polyLons[polyLons.length - 1]) {    throw new IllegalArgumentException("first and last points of the polygon must be the same (it must close itself): polyLons[0]=" + polyLons[0] + " polyLons["+ (polyLons.length - 1)+ "]="+ polyLons[polyLons.length - 1]);  }  for (int i=0; i < polyLats.length; i++) {    GeoUtils.checkLatitude(polyLats[i]);    GeoUtils.checkLongitude(polyLons[i]);  }  for (int i=0; i < holes.length; i++) {    Polygon inner=holes[i];    if (inner.holes.length > 0) {      throw new IllegalArgumentException("holes may not contain holes: polygons may not nest.");    }  }  this.polyLats=polyLats.clone();  this.polyLons=polyLons.clone();  this.holes=holes.clone();  double minLat=Double.POSITIVE_INFINITY;  double maxLat=Double.NEGATIVE_INFINITY;  double minLon=Double.POSITIVE_INFINITY;  double maxLon=Double.NEGATIVE_INFINITY;  for (int i=0; i < polyLats.length; i++) {    minLat=Math.min(polyLats[i],minLat);    maxLat=Math.max(polyLats[i],maxLat);    minLon=Math.min(polyLons[i],minLon);    maxLon=Math.max(polyLons[i],maxLon);  }  this.minLat=minLat;  this.maxLat=maxLat;  this.minLon=minLon;  this.maxLon=maxLon;}  }
class C{  Object processPATTERN(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  try {    XPath pattern=handler.createMatchPatternXPath(value,owner);    return pattern;  } catch (  TransformerException te) {    throw new org.xml.sax.SAXException(te);  }}  }
class C{  byte[] doFinal(byte[] input,int inputOffset,int inputLen) throws IllegalBlockSizeException, BadPaddingException {  return cipher.doFinal(input,inputOffset,inputLen);}  }
class C{  protected void validate(Component cmp){  Object val=getComponentValue(cmp);  setValid(cmp,constraintList.get(cmp).isValid(val));}  }
class C{  private static byte[] decodeHex(final char[] data){  final int len=(data == null) ? 0 : data.length;  if ((len & 0x01) != 0) {    throw new RuntimeException("Odd number of characters.");  }  final byte[] out=new byte[len >> 1];  for (int i=0, j=0; j < len; i++) {    int f=toDigit(data[j],j) << 4;    j++;    f=f | toDigit(data[j],j);    j++;    out[i]=(byte)(f & 0xFF);  }  return out;}  }
class C{  @Override public ResponseFuture request(Object request,int timeout) throws RemotingException {  return channel.request(request,timeout);}  }
class C{  private void ensureOpen() throws IOException {  if (closed) {    throw new IOException("Stream closed");  }}  }
class C{  public boolean mergerSlice(){  boolean mergeStatus=false;  int index=0;  try {    dataHandler.initialise();    for (    RawResultIterator leaftTupleIterator : this.rawResultIteratorList) {      this.recordHolderHeap.add(leaftTupleIterator);      index++;    }    RawResultIterator iterator=null;    while (index > 1) {      iterator=this.recordHolderHeap.poll();      Object[] convertedRow=iterator.next();      if (null == convertedRow) {        throw new SliceMergerException("Unable to generate mdkey during compaction.");      }      addRow(convertedRow);      if (!iterator.hasNext()) {        index--;        continue;      }      this.recordHolderHeap.add(iterator);    }    iterator=this.recordHolderHeap.poll();    while (true) {      Object[] convertedRow=iterator.next();      if (null == convertedRow) {        throw new SliceMergerException("Unable to generate mdkey during compaction.");      }      addRow(convertedRow);      if (!iterator.hasNext()) {        break;      }    }    this.dataHandler.finish();    mergeStatus=true;  } catch (  Exception e) {    LOGGER.error("Exception in compaction merger " + e.getMessage());    mergeStatus=false;  } finally {    try {      this.dataHandler.closeHandler();    } catch (    CarbonDataWriterException e) {      LOGGER.error("Exception while closing the handler in compaction merger " + e.getMessage());      mergeStatus=false;    }  }  return mergeStatus;}  }
class C{  public void drawCapInterior(DrawContext dc,ShapeData shapeData){  super.prepareToDrawInterior(dc,this.getActiveCapAttributes(),defaultAttributes);  GL2 gl=dc.getGL().getGL2();  if (!dc.isPickingMode() && this.mustApplyLighting(dc,this.getActiveCapAttributes()))   gl.glNormalPointer(GL.GL_FLOAT,0,shapeData.capNormalBuffer.rewind());  WWTexture texture=this.getCapTexture();  if (!dc.isPickingMode() && texture != null && this.capTextureCoords != null) {    texture.bind(dc);    texture.applyInternalTransform(dc);    gl.glTexCoordPointer(2,GL.GL_FLOAT,0,this.capTextureCoords.rewind());    dc.getGL().glEnable(GL.GL_TEXTURE_2D);    gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);  } else {    dc.getGL().glDisable(GL.GL_TEXTURE_2D);    gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);  }  gl.glVertexPointer(3,GL.GL_FLOAT,0,shapeData.capVertexBuffer.rewind());  for (int i=0; i < shapeData.cb.getPrimTypes().size(); i++) {    IntBuffer ib=shapeData.capFillIndexBuffers.get(i);    gl.glDrawElements(shapeData.cb.getPrimTypes().get(i),ib.limit(),GL.GL_UNSIGNED_INT,ib.rewind());  }}  }
class C{  public static boolean isWhiteSpace(char ch[],int start,int length){  int end=start + length;  for (int s=start; s < end; s++) {    if (!isWhiteSpace(ch[s]))     return false;  }  return true;}  }
class C{  public void testFragnoOrdering() throws Exception {  File logDir=prepareLogDir("testFragnoOrdering");  DiskLog log=openLog(logDir,false);  LogConnection conn=log.connect(false);  THLEvent e25_1=createTHLEvent(25,(short)0,false,"x");  conn.store(e25_1,false);  THLEvent e25_2=createTHLEvent(25,(short)1,false,"x");  conn.store(e25_2,false);  THLEvent e25_same=createTHLEvent(25,(short)1,false,"x");  try {    conn.store(e25_same,true);    throw new Exception("Able to store the same fragment number again");  } catch (  LogConsistencyException e) {    logger.info("Caught expected exception: " + e.getMessage());  }  THLEvent e25_less=createTHLEvent(25,(short)0,false,"x");  try {    conn.store(e25_less,true);    throw new Exception("Able to store a lower fragment number");  } catch (  LogConsistencyException e) {    logger.info("Caught expected exception: " + e.getMessage());  }  conn.release();  log.release();}  }
class C{  public boolean isKeyPairCol(){  return m_keyPairColSQL.length() > 0;}  }
class C{  static Object evalInContext(SuspendedEvent ev,String code,FrameInstance frameInstance) throws IOException {  try {    Node node;    MaterializedFrame frame;    if (frameInstance == null) {      node=ev.getContext().getInstrumentedNode();      frame=ev.getMaterializedFrame();    } else {      node=frameInstance.getCallNode();      frame=frameInstance.getFrame(FrameAccess.MATERIALIZE,true).materialize();    }    return Debugger.ACCESSOR.evalInContext(ev.getSession().getDebugger().getSourceVM(),node,frame,code);  } catch (  KillException kex) {    throw new IOException("Evaluation was killed.",kex);  }}  }
class C{  static BigDecimal bomPrice(int p_M_Product_ID,int p_M_PriceList_Version_ID,String p_what) throws SQLException {  BigDecimal price=null;  String sql="SELECT " + p_what + " FROM M_ProductPrice "+ "WHERE M_PriceList_Version_ID=? AND M_Product_ID=?";  PreparedStatement pstmt=Adempiere.prepareStatement(sql);  pstmt.setInt(1,p_M_PriceList_Version_ID);  pstmt.setInt(2,p_M_Product_ID);  ResultSet rs=pstmt.executeQuery();  if (rs.next())   price=rs.getBigDecimal(1);  rs.close();  pstmt.close();  if (price == null || price.signum() == 0) {    price=Adempiere.ZERO;    sql="SELECT bl.M_Product_ID , CASE WHEN bl.IsQtyPercentage = 'N' THEN bl.QtyBOM ELSE bl.QtyBatch / 100 END AS Qty , p.IsBOM FROM PP_Product_BOM b " + "INNER JOIN M_Product p ON (p.M_Product_ID=b.M_Product_ID) " + "INNER JOIN PP_Product_BOMLine bl ON (bl.PP_Product_BOM_ID=b.PP_Product_BOM_ID) "+ "WHERE b.M_Product_ID = ?";    pstmt=Adempiere.prepareStatement(sql);    pstmt.setInt(1,p_M_Product_ID);    rs=pstmt.executeQuery();    while (rs.next()) {      int M_ProductBOM_ID=rs.getInt(1);      BigDecimal qty=rs.getBigDecimal(2);      BigDecimal productPrice=bomPrice(M_ProductBOM_ID,p_M_PriceList_Version_ID,p_what);      productPrice=productPrice.multiply(qty);      price=price.add(productPrice);    }    rs.close();    pstmt.close();  }  return price;}  }
class C{  protected void genParameterRegisterLoad(MethodReference method,boolean hasThisParam){  int max=NUM_PARAMETER_GPRS + NUM_PARAMETER_FPRS;  if (max == 0)   return;  int gpr=0;  int fpr=0;  GPR T=T0;  int params=method.getParameterWords() + (hasThisParam ? 1 : 0);  Offset offset=Offset.fromIntSignExtend((params - 1) << LG_WORDSIZE);  if (hasThisParam) {    if (gpr < NUM_PARAMETER_GPRS) {      stackMoveHelper(T,offset);      T=T1;      gpr++;      max--;    }    offset=offset.minus(WORDSIZE);  }  for (  TypeReference type : method.getParameterTypes()) {    if (max == 0)     return;    TypeReference t=type;    if (t.isLongType()) {      if (gpr < NUM_PARAMETER_GPRS) {        if (WORDSIZE == 4) {          stackMoveHelper(T,offset);          T=T1;          gpr++;          max--;          if (gpr < NUM_PARAMETER_GPRS) {            stackMoveHelper(T,offset.minus(WORDSIZE));            gpr++;            max--;          }        } else {          stackMoveHelper(T,offset.minus(WORDSIZE));          T=T1;          gpr++;          max--;        }      }      offset=offset.minus(2 * WORDSIZE);    } else     if (t.isFloatType()) {      if (fpr < NUM_PARAMETER_FPRS) {        if (SSE2_FULL) {          asm.emitMOVSS_Reg_RegDisp(XMM.lookup(fpr),SP,offset);        } else {          asm.emitFLD_Reg_RegDisp(FP0,SP,offset);        }        fpr++;        max--;      }      offset=offset.minus(WORDSIZE);    } else     if (t.isDoubleType()) {      if (fpr < NUM_PARAMETER_FPRS) {        if (SSE2_FULL) {          asm.emitMOVSD_Reg_RegDisp(XMM.lookup(fpr),SP,offset.minus(WORDSIZE));        } else {          asm.emitFLD_Reg_RegDisp_Quad(FP0,SP,offset.minus(WORDSIZE));        }        fpr++;        max--;      }      offset=offset.minus(2 * WORDSIZE);    } else     if (t.isReferenceType() || t.isWordLikeType()) {      if (gpr < NUM_PARAMETER_GPRS) {        stackMoveHelper(T,offset);        T=T1;        gpr++;        max--;      }      offset=offset.minus(WORDSIZE);    } else {      if (gpr < NUM_PARAMETER_GPRS) {        if (offset.isZero()) {          asm.emitMOV_Reg_RegInd(T,SP);        } else {          asm.emitMOV_Reg_RegDisp(T,SP,offset);        }        T=T1;        gpr++;        max--;      }      offset=offset.minus(WORDSIZE);    }  }  if (VM.VerifyAssertions)   VM._assert(offset.EQ(Offset.fromIntSignExtend(-WORDSIZE)));}  }
class C{  public void parseRule(String source) throws CSSException, IOException {  parser.parseRule(new InputSource(new StringReader(source)));}  }
class C{  protected void addCSSClasses(int maxClusterSize){  StyleLibrary style=context.getStyleLibrary();  CSSClass cssReferenceBorder=new CSSClass(this.getClass(),CLR_BORDER_CLASS);  cssReferenceBorder.setStatement(SVGConstants.SVG_FILL_ATTRIBUTE,style.getColor(STYLE_BORDER));  svgp.addCSSClassOrLogError(cssReferenceBorder);  CSSClass cluster_hover=new CSSClass(this.getClass(),CLR_HOVER_CLASS);  cluster_hover.setStatement(SVGConstants.SVG_FILL_ATTRIBUTE,style.getColor(STYLE_HOVER) + " !important");  cluster_hover.setStatement(SVGConstants.SVG_CURSOR_TAG,SVGConstants.SVG_POINTER_VALUE);  svgp.addCSSClassOrLogError(cluster_hover);  CSSClass cluster_unpaired=new CSSClass(this.getClass(),CLR_UNPAIRED_CLASS);  cluster_unpaired.setStatement(SVGConstants.SVG_FILL_ATTRIBUTE,style.getBackgroundColor(STYLE));  cluster_unpaired.setStatement(SVGConstants.SVG_STROKE_ATTRIBUTE,SVGConstants.CSS_NONE_VALUE);  svgp.addCSSClassOrLogError(cluster_unpaired);  CSSClass cluster_unpaired_s=new CSSClass(this.getClass(),SEG_UNPAIRED_SELECTED_CLASS);  cluster_unpaired_s.setStatement(SVGConstants.SVG_FILL_ATTRIBUTE,style.getColor(STYLE_HOVER) + " !important");  svgp.addCSSClassOrLogError(cluster_unpaired_s);  String firstcol=style.getColor(STYLE_GRADIENT_FIRST);  String secondcol=style.getColor(STYLE_GRADIENT_SECOND);  String[] clusterColorShades=makeGradient(maxClusterSize,new String[]{firstcol,secondcol});  for (int i=0; i < maxClusterSize; i++) {    CSSClass clusterClasses=new CSSClass(CircleSegmentsVisualizer.class,CLR_CLUSTER_CLASS_PREFIX + "_" + i);    clusterClasses.setStatement(SVGConstants.SVG_FILL_ATTRIBUTE,clusterColorShades[i]);    clusterClasses.setStatement(SVGConstants.SVG_STROKE_ATTRIBUTE,SVGConstants.SVG_NONE_VALUE);    svgp.addCSSClassOrLogError(clusterClasses);  }}  }
class C{  public static void destroyForcibly(Process process){  try {    Method methodToFind=Process.class.getMethod("destroyForcibly",(Class<?>[])null);    methodToFind.invoke(process);  } catch (  Exception e) {    process.destroy();  }}  }
class C{  @Override public void visit(Visitor visitor){  for (  Group g : groups.values()) {    g.visit(visitor);  }}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 2:{        addToken(Token.IDENTIFIER);      }case 37:    break;case 32:{    addToken(Token.LITERAL_BOOLEAN);  }case 38:break;case 13:{addToken(start,zzStartRead - 1,Token.COMMENT_DOCUMENTATION);return firstToken;}case 39:break;case 18:{addToken(Token.ERROR_CHAR);}case 40:break;case 15:{addToken(Token.ERROR_NUMBER_FORMAT);}case 41:break;case 4:{addToken(Token.ERROR_CHAR);addNullToken();return firstToken;}case 42:break;case 19:{addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}case 43:break;case 30:{addToken(Token.FUNCTION);}case 44:break;case 6:{addToken(Token.ERROR_STRING_DOUBLE);addNullToken();return firstToken;}case 45:break;case 1:{addToken(Token.ERROR_IDENTIFIER);}case 46:break;case 35:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_DOCUMENTATION);addToken(temp,zzMarkedPos - 1,Token.VARIABLE);start=zzMarkedPos;}case 47:break;case 25:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_DOCUMENTATION);addToken(temp,zzMarkedPos - 1,Token.PREPROCESSOR);start=zzMarkedPos;}case 48:break;case 10:{addToken(Token.VARIABLE);}case 49:break;case 34:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_DOCUMENTATION);addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_DOCUMENTATION);start=zzMarkedPos;}case 50:break;case 26:{addToken(Token.LITERAL_CHAR);}case 51:break;case 17:{addToken(Token.LITERAL_NUMBER_HEXADECIMAL);}case 52:break;case 21:{start=zzMarkedPos - 2;yybegin(MLC);}case 53:break;case 7:{addToken(Token.WHITESPACE);}case 54:break;case 24:{yybegin(YYINITIAL);addToken(start,zzStartRead + 1,Token.COMMENT_DOCUMENTATION);}case 55:break;case 29:{addToken(Token.DATA_TYPE);}case 56:break;case 23:{yybegin(YYINITIAL);addToken(start,zzStartRead + 1,Token.COMMENT_MULTILINE);}case 57:break;case 3:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 58:break;case 28:{start=zzMarkedPos - 3;yybegin(DOCCOMMENT);}case 59:break;case 22:{addToken(Token.RESERVED_WORD);}case 60:break;case 33:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_MULTILINE);start=zzMarkedPos;}case 61:break;case 14:{addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addNullToken();return firstToken;}case 62:break;case 9:{addToken(Token.SEPARATOR);}case 63:break;case 5:{addNullToken();return firstToken;}case 64:break;case 12:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 65:break;case 8:{addToken(Token.OPERATOR);}case 66:break;case 16:{addToken(Token.LITERAL_NUMBER_FLOAT);}case 67:break;case 36:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_EOL);start=zzMarkedPos;}case 68:break;case 20:{start=zzMarkedPos - 2;yybegin(EOL_COMMENT);}case 69:break;case 31:{addToken(Token.COMMENT_MULTILINE);}case 70:break;case 11:{}case 71:break;case 27:{addToken(Token.ERROR_STRING_DOUBLE);}case 72:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case EOL_COMMENT:{addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addNullToken();return firstToken;}case 959:break;case DOCCOMMENT:{yybegin(YYINITIAL);addToken(start,zzEndRead,Token.COMMENT_DOCUMENTATION);return firstToken;}case 960:break;case YYINITIAL:{addNullToken();return firstToken;}case 961:break;case MLC:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 962:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public ToHitData toHit(IGame game){  final Entity entity=game.getEntity(getEntityId());  return toHit(game,game.getTarget(getTargetType(),getTargetId()),entity.getPosition(),entity.getElevation(),entity.getPriorPosition(),entity.moved);}  }
class C{  public EncodingWriter create(String javaEncoding){  return _writer;}  }
class C{  public Object[] toUnlinkedArray(){  Object[] o=new Object[_size];  int i=0;  for (T link=_head; link != null; i++) {    o[i]=link;    T tmp=link;    link=(T)link.getNext();    tmp.setNext(null);    tmp.setPrevious(null);  }  _size=0;  _head=_tail=null;  return o;}  }
class C{  public void testAndSetIfSpiking(){  boolean spiking=true;  for (  Neuron n : neuronList) {    if (!n.getUpdateRule().isSpikingNeuron()) {      spiking=false;      break;    }  }  setSpikingNeuronGroup(spiking);}  }
class C{  public boolean isCollectiveAsset(){  Object oo=get_Value(COLUMNNAME_IsCollectiveAsset);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void testMinUnequal1(){  String a="92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=24;  String b="92948782094488478231212478987482988429808779810457634781384756794987";  int bScale=41;  String c="92948782094488478231212478987482988429808779810457634781384756794987";  int cScale=41;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal cNumber=new BigDecimal(new BigInteger(c),cScale);  assertEquals("incorrect value",cNumber,aNumber.min(bNumber));}  }
class C{  protected void addPaintAttributes(AttributedString as,Element element,TextNode node,TextPaintInfo pi,BridgeContext ctx){  if ((!SVGUtilities.matchUserAgent(element,ctx.getUserAgent())) || (!CSSUtilities.convertDisplay(element))) {    return;  }  Object o=elemTPI.get(element);  if (o != null) {    node.swapTextPaintInfo(pi,(TextPaintInfo)o);  }  addChildPaintAttributes(as,element,node,pi,ctx);}  }
class C{  protected void sequence_IntersectionTypeExpressionOLD(ISerializationContext context,IntersectionTypeExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void testSetScaleRoundCeiling(){  String a="1231212478987482988429808779810457634781384756794987";  String b="123121247898748298842980877981045763478139";  int aScale=28;  int newScale=18;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=aNumber.setScale(newScale,BigDecimal.ROUND_CEILING);  assertTrue("incorrect scale",bNumber.scale() == newScale);  assertTrue("incorrect value",bNumber.unscaledValue().toString().equals(b));}  }
class C{  DefaultBoundSetOperations(K key,RedisOperations<K,V> operations){  super(key,operations);  this.ops=operations.opsForSet();}  }
class C{  public int read(char[] buf,int offset,int length) throws IOException {  for (int i=0; i < length; i++) {    int ch=_is.read();    if (ch < 0)     return i > 0 ? i : -1; else {      buf[offset + i]=(char)ch;    }  }  return length;}  }
class C{  public void testGetF22Momentary(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF22Momentary();  assertEquals(expResult,result);}  }
class C{  @Override public Model learn(ExampleSet exampleSet) throws OperatorException {  Attribute label=exampleSet.getAttributes().getLabel();  if (label.getMapping().size() != 2) {    throw new UserError(this,114,getName(),label.getName());  }  Kernel kernel=Kernel.createKernel(this);  PSOSVMOptimization optimization=new PSOSVMOptimization(exampleSet,kernel,getParameterAsDouble(PARAMETER_C),getParameterAsInt(PARAMETER_MAX_EVALUATIONS),getParameterAsInt(PARAMETER_GENERATIONS_WITHOUT_IMPROVAL),getParameterAsInt(PARAMETER_POPULATION_SIZE),getParameterAsDouble(PARAMETER_INERTIA_WEIGHT),getParameterAsDouble(PARAMETER_LOCAL_BEST_WEIGHT),getParameterAsDouble(PARAMETER_GLOBAL_BEST_WEIGHT),getParameterAsBoolean(PARAMETER_DYNAMIC_INERTIA_WEIGHT),getParameterAsBoolean(PARAMETER_SHOW_CONVERGENCE_PLOT),RandomGenerator.getRandomGenerator(this));  optimization.optimize();  double[] bestAlphas=optimization.getBestValuesEver();  return optimization.getModel(bestAlphas);}  }
class C{  public static void deployFunctions(Resource dir,boolean doNew){  Resource f=dir.getRealResource("ajaxOnLoad." + TEMPLATE_EXTENSION);  if (!f.exists() || doNew)   XMLConfigFactory.createFileFromResourceEL("/resource/library/function/ajaxOnLoad." + TEMPLATE_EXTENSION,f);}  }
class C{  public static CtMethod make(MethodInfo minfo,CtClass declaring) throws CannotCompileException {  if (declaring.getClassFile2().getConstPool() != minfo.getConstPool())   throw new CannotCompileException("bad declaring class");  return new CtMethod(minfo,declaring);}  }
class C{  public InputSource resolveEntity(String publicId,String systemId) throws SAXException {  if (publicId == null) {    if (log.isDebugEnabled()) {      log.debug("Couldn't resolve entity with no publicId, system id is " + systemId);    }    if (confSystemId != null && !hasProtocol(systemId)) {      return new InputSource(confSystemId.substring(0,confSystemId.lastIndexOf('/')) + "/" + systemId);    }    return new InputSource(systemId);  }  String entity=(String)dtdPaths.get(publicId);  if (entity == null) {    if (log.isDebugEnabled()) {      log.debug("Couldn't resolve DTD: " + publicId + ", "+ systemId);    }    return null;  }  if (log.isDebugEnabled()) {    log.debug("Resolving to DTD " + entity);  }  return new InputSource(ConfHandler.class.getResourceAsStream(entity));}  }
class C{  public OutOfMemoryError(java.lang.String s){  super(s);}  }
class C{  public SecurityCheckException(){  super();}  }
class C{  public static ViewAction clearFocus(){  return actionWithAssertions(new ClearFocus());}  }
class C{  public SearchScrollRequest scroll(Scroll scroll){  this.scroll=scroll;  return this;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  public static String TO_NUMBER(BigDecimal number,int displayType){  return s_cc.getDatabase().TO_NUMBER(number,displayType);}  }
class C{  public boolean isDirect(){  return this.isDirect;}  }
class C{  private void drawCar(){  getChildren().clear();  rectangle=new Rectangle(x,y - 20,50,10);  polygon=new Polygon(x + 10,y - 20,x + 20,y - 30,x + 30,y - 30,x + 40,y - 20);  circle1=new Circle(x + 15,y - 5,radius);  circle2=new Circle(x + 35,y - 5,radius);  getChildren().addAll(rectangle,circle1,circle2,polygon);}  }
class C{  public ChildObjectModel(){}  }
class C{  public void testThreeArgMethod() throws Exception {  Map<String,Method> functions=new HashMap<>();  functions.put("foo",getClass().getMethod("threeArgMethod",double.class,double.class,double.class));  Expression expr=JavascriptCompiler.compile("foo(3, 4, 5)",functions,getClass().getClassLoader());  assertEquals(12,expr.evaluate(0,null),DELTA);}  }
class C{  public static String generatePassword(){  return RandomStringUtils.randomAlphanumeric(DEF_COUNT);}  }
class C{  private void scanString(StringBuffer string){  char delimiter=this.readChar();  if ((delimiter != '\'') && (delimiter != '"')) {    throw this.expectedInput("' or \"");  }  for (; ; ) {    char ch=this.readChar();    if (ch == delimiter) {      return;    } else     if (ch == '&') {      this.resolveEntity(string);    } else {      string.append(ch);    }  }}  }
class C{  public static void replaceNonCarModesWithPT(Network network){  log.info("... Replacing all non-car link modes with \"pt\"");  Set<String> modesCar=Collections.singleton(TransportMode.car);  Set<String> modesCarPt=new HashSet<>();  modesCarPt.add(TransportMode.car);  modesCarPt.add(TransportMode.pt);  Set<String> modesPt=new HashSet<>();  modesPt.add(TransportMode.pt);  for (  Link link : network.getLinks().values()) {    if (link.getAllowedModes().size() == 0 && link.getAllowedModes().contains(TransportMode.car)) {      link.setAllowedModes(modesCar);    }    if (link.getAllowedModes().size() > 0 && link.getAllowedModes().contains(TransportMode.car)) {      link.setAllowedModes(modesCarPt);    } else     if (!link.getAllowedModes().contains(TransportMode.car)) {      link.setAllowedModes(modesPt);    }  }}  }
class C{  public static Date convertDateValueToDate(long dateValue){  long millis=getMillis(null,yearFromDateValue(dateValue),monthFromDateValue(dateValue),dayFromDateValue(dateValue),0,0,0,0);  return new Date(millis);}  }
class C{  public void notifyHideHack(){  if (localHackList == null) {    return;  }  ComponentEvent ce=new ComponentEvent(this,ComponentEvent.COMPONENT_HIDDEN);  for (  ComponentListener listener : localHackList) {    listener.componentHidden(ce);  }}  }
class C{  protected boolean isPotentialBeanType(Class<?> type){  String typeStr=ClassUtil.canBeABeanType(type);  if (typeStr != null) {    throw new IllegalArgumentException("Can not deserialize Class " + type.getName() + " (of type "+ typeStr+ ") as a Bean");  }  if (ClassUtil.isProxyType(type)) {    throw new IllegalArgumentException("Can not deserialize Proxy class " + type.getName() + " as a Bean");  }  typeStr=ClassUtil.isLocalType(type,true);  if (typeStr != null) {    throw new IllegalArgumentException("Can not deserialize Class " + type.getName() + " (of type "+ typeStr+ ") as a Bean");  }  return true;}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public void render(OutputStream out,int indent) throws IOException {  DotGraphUtility.renderLine(out,command,indent);}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/shares/{shareName}/acl") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskResourceRep updateSnapshotShareACL(@PathParam("id") URI id,@PathParam("shareName") String shareName,SnapshotCifsShareACLUpdateParams param) throws InternalException {  _log.info("Update snapshot share acl request received. Snapshot: {}, Share: {}",id.toString(),shareName);  _log.info("Request body: {}",param.toString());  ArgValidator.checkFieldNotNull(shareName,"shareName");  ArgValidator.checkFieldUriType(id,Snapshot.class,"id");  Snapshot snapshot=queryResource(id);  ArgValidator.checkEntity(snapshot,id,isIdEmbeddedInURL(id));  if (!CifsShareUtility.doesShareExist(snapshot,shareName)) {    _log.error("CIFS share does not exist {}",shareName);    throw APIException.notFound.invalidParameterObjectHasNoSuchShare(snapshot.getId(),shareName);  }  FileShare fs=_permissionsHelper.getObjectById(snapshot.getParent(),FileShare.class);  StorageSystem device=_dbClient.queryObject(StorageSystem.class,fs.getStorageDevice());  CifsShareUtility.checkForUpdateShareACLOperationOnStorage(device.getSystemType(),OperationTypeEnum.UPDATE_FILE_SNAPSHOT_SHARE_ACL.name());  String task=UUID.randomUUID().toString();  VirtualPool vpool=_dbClient.queryObject(VirtualPool.class,fs.getVirtualPool());  if (!vpool.getProtocols().contains(StorageProtocol.File.CIFS.name())) {    throw APIException.methodNotAllowed.vPoolDoesntSupportProtocol("Vpool doesn't support " + StorageProtocol.File.CIFS.name() + " protocol");  }  CifsShareUtility util=new CifsShareUtility(_dbClient,null,snapshot,shareName);  util.verifyShareACLs(param);  _log.info("Request payload verified. No errors found.");  Operation op=_dbClient.createTaskOpStatus(Snapshot.class,snapshot.getId(),task,ResourceOperationTypeEnum.UPDATE_FILE_SNAPSHOT_SHARE_ACL);  FileServiceApi fileServiceApi=FileService.getFileShareServiceImpl(fs,_dbClient);  fileServiceApi.updateShareACLs(device.getId(),snapshot.getId(),shareName,param,task);  auditOp(OperationTypeEnum.UPDATE_FILE_SNAPSHOT_SHARE_ACL,true,AuditLogManager.AUDITOP_BEGIN,snapshot.getId().toString(),device.getId().toString(),param);  return toTask(snapshot,task,op);}  }
class C{  public static void showOnMap(Activity activity,double[] latLong){  try {    String uri=String.format(Locale.ENGLISH,"http://maps.google.com/maps?f=q&q=(%f,%f)",latLong[0],latLong[1]);    ComponentName compName=new ComponentName(MAPS_PACKAGE_NAME,MAPS_CLASS_NAME);    Intent mapsIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(uri)).setComponent(compName);    mapsIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_DOCUMENT);    activity.startActivity(mapsIntent);  } catch (  ActivityNotFoundException e) {    Log.e(TAG,"GMM activity not found!",e);    String url=String.format(Locale.ENGLISH,"geo:%f,%f",latLong[0],latLong[1]);    Intent mapsIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));    activity.startActivity(mapsIntent);  }}  }
class C{  private void ensureSamplesExist(){  final SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(getActivity());  final int version=preferences.getInt(PREFS_SAMPLES_VERSION,0);  if (version == CURRENT_SAMPLES_VERSION)   return;  final File root=new File(Environment.getExternalStorageDirectory(),"Nordic Semiconductor");  if (!root.exists()) {    root.mkdir();  }  final File board=new File(root,"Board");  if (!board.exists()) {    board.mkdir();  }  final File pca20006=new File(board,"pca20006");  if (!pca20006.exists()) {    pca20006.mkdir();  }  new File(root,"ble_app_beacon.hex").delete();  boolean oldCopied=false;  boolean newCopied=false;  File f=new File(pca20006,"ble_app_beacon_v1_0_1_s110_v6_0_0.hex");  if (!f.exists()) {    copyRawResource(R.raw.ble_app_beacon_v1_0_1_s110_v6_0_0,f);    oldCopied=true;  }  f=new File(pca20006,"ble_app_beacon_v1_1_0_s110_v7_1_0.zip");  if (!f.exists()) {    copyRawResource(R.raw.ble_app_beacon_v1_1_0_s110_v7_1_0,f);    newCopied=true;  }  if (oldCopied)   Toast.makeText(getActivity(),R.string.dfu_example_files_created,Toast.LENGTH_SHORT).show(); else   if (newCopied)   Toast.makeText(getActivity(),R.string.dfu_example_files_added,Toast.LENGTH_SHORT).show();  preferences.edit().putInt(PREFS_SAMPLES_VERSION,CURRENT_SAMPLES_VERSION).apply();}  }
class C{  public boolean hasChanged(){  if (getValue() != null)   if (m_oldValue != null)   return !m_oldValue.equals(getValue()); else   return true; else   if (m_oldValue != null)   return true; else   return false;}  }
class C{  public static Typeface captureIt(Context context){  return FontSourceProcessor.process(R.raw.capture_it,context);}  }
class C{  public static String geFileFromAssets(Context context,String fileName){  if (context == null || StringUtils.isEmpty(fileName)) {    return null;  }  StringBuilder s=new StringBuilder("");  try {    InputStreamReader in=new InputStreamReader(context.getResources().getAssets().open(fileName));    BufferedReader br=new BufferedReader(in);    String line;    while ((line=br.readLine()) != null) {      s.append(line);      s.append("\n");    }    return s.toString();  } catch (  IOException e) {    e.printStackTrace();    return null;  }}  }
class C{  protected int engineUpdate(byte[] input,int inputOffset,int inputLen,byte[] output,int outputOffset) throws ShortBufferException {  return core.update(input,inputOffset,inputLen,output,outputOffset);}  }
class C{  public void onSaveInstanceState(Bundle outState){  outState.putAll(mBundle);  outState.putString(mKeyTags,mDelegateTag);  for (  MvpDelegate childDelegate : mChildDelegates) {    childDelegate.onSaveInstanceState(outState);  }}  }
class C{  public boolean isLocked(Object key){  return (locks.get(key) != null);}  }
class C{  final Attribute copy(String newName){  Attribute copy=new Attribute(newName);  copy.m_Index=m_Index;  if (!isNominal() && !isString())   return copy;  copy.m_Type=m_Type;  copy.m_Values=m_Values;  copy.m_Hashtable=m_Hashtable;  return copy;}  }
class C{  private static void processCommandLineOptions(final CommandlineOptions commandLine){  if (commandLine.isVeryVerboseMode()) {    NaviLogger.setLevel(Level.ALL);  } else   if (commandLine.isVerboseMode()) {    NaviLogger.setLevel(Level.INFO);  }}  }
class C{  private RegulatedOutputStream(Builder builder) throws IllegalArgumentException, RegulationException {  super(builder.wrappedStream,builder.bufferSize);  if (builder.regulator != null) {    this.regulator=builder.regulator;  }}  }
class C{  public void incBoughtForItem(String item,int count){  handlePrefixedCounting(item,count,"bought.",bought);}  }
class C{  public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public GridReversedLinesFileReader(final File file,final int blockSize,final String encoding) throws IOException {  this(file,blockSize,Charset.forName(encoding));}  }
class C{  @Override public void onTextChanged(CharSequence charSequence,int i,int i1,int i2){  if (isEditingMessage()) {    if (message == null) {      return;    }    boolean enableControls=!TextUtils.equals(newCursorEditText.getText(),message.getBody());    hintView.setVisibility(View.GONE);    editMessageCursorToolbar.enableEditControls(enableControls);    return;  }  String text=charSequence.toString();  if (cursorCallback != null) {    cursorCallback.onEditTextHasChanged(newCursorEditText.getSelectionStart(),text);  }  if (TextUtils.isEmpty(charSequence.toString())) {    hintView.setVisibility(View.VISIBLE);  } else {    hintView.setVisibility(View.GONE);  }  showTopbar(newCursorEditText.getLineCount() > maxLines);}  }
class C{  public OutputNode top(){  int size=size();  if (size <= 0) {    return null;  }  return get(size - 1);}  }
class C{  @SuppressForbidden(reason="resolves against CWD because that is how classpaths work") static URL[] parseClassPath(String classPath){  String pathSeparator=System.getProperty("path.separator");  String fileSeparator=System.getProperty("file.separator");  String elements[]=classPath.split(pathSeparator);  URL urlElements[]=new URL[elements.length];  for (int i=0; i < elements.length; i++) {    String element=elements[i];    if (element.isEmpty()) {      throw new IllegalStateException("Classpath should not contain empty elements! (outdated shell script from a previous version?) classpath='" + classPath + "'");    }    if (element.startsWith("/") && "\\".equals(fileSeparator)) {      element=element.replace("/","\\");      if (element.length() >= 3 && element.charAt(2) == ':') {        element=element.substring(1);      }    }    try {      urlElements[i]=PathUtils.get(element).toUri().toURL();    } catch (    MalformedURLException e) {      throw new RuntimeException(e);    }  }  return urlElements;}  }
class C{  public void createSeries(CandleDataset source,int seriesIndex){  if (source.getSeries(seriesIndex) == null) {    throw new IllegalArgumentException("Null source (CandleDataset).");  }  for (int i=0; i < source.getSeries(seriesIndex).getItemCount(); i++) {    this.updateSeries(source.getSeries(seriesIndex),i,true);  }}  }
class C{  public static boolean isSwapEnabled(ClusterNode node){  return !node.attributes().containsKey(NOOP_SWAP_SPACE_SPI_ATTR_NAME);}  }
class C{  public double calcAngleBetweenLines(Entry start1,Entry end1,Entry start2,Entry end2){  double angle1=calcAngleWithRatios(start1,end1);  double angle2=calcAngleWithRatios(start2,end2);  return Math.abs(angle1 - angle2);}  }
class C{  void reserve(int minBuffer){  if (reserved < minBuffer) {    int pageSize=store.getPageSize();    int capacityPerPage=PageStreamData.getCapacity(pageSize);    int pages=PageStreamTrunk.getPagesAddressed(pageSize);    int pagesToAllocate=0, totalCapacity=0;    do {      pagesToAllocate+=pages + 1;      totalCapacity+=pages * capacityPerPage;    } while (totalCapacity < minBuffer);    int firstPageToUse=atEnd ? trunkPageId : 0;    store.allocatePages(reservedPages,pagesToAllocate,exclude,firstPageToUse);    reserved+=totalCapacity;    if (data == null) {      initNextData();    }  }}  }
class C{  @Override protected EClass eStaticClass(){  return DatatypePackage.Literals.ENTITY;}  }
class C{  public DateTime minus(long duration){  return withDurationAdded(duration,-1);}  }
class C{  @Override public boolean supportsMultipleResultSets(){  debugCodeCall("supportsMultipleResultSets");  return false;}  }
class C{  private void boardSave(){  if (curfileBoard == null) {    boardSaveAs();    return;  }  try {    OutputStream os=new FileOutputStream(curfileBoard);    client.getGame().getBoard().save(os);    os.close();  } catch (  IOException ex) {    System.err.println("error opening file to save!");    System.err.println(ex);  }}  }
class C{  public void restartWebServer(){  DevModeRequest.RestartWebServer.Builder restartWebServerBuilder=DevModeRequest.RestartWebServer.newBuilder();  DevModeRequest.Builder devModeRequestBuilder=DevModeRequest.newBuilder();  devModeRequestBuilder.setRequestType(DevModeRequest.RequestType.RESTART_WEB_SERVER);  devModeRequestBuilder.setRestartWebServer(restartWebServerBuilder);  Request.Builder request=buildRequestMessageFromDevModeRequest(devModeRequestBuilder);  Future<Response> responseFuture=transport.executeRequestAsync(request.build());  waitForResponse(responseFuture);}  }
class C{  CryptoResult(final T result,final List<K> masterKeys,final CiphertextHeaders headers){  result_=result;  masterKeys_=Collections.unmodifiableList(masterKeys);  headers_=headers;  encryptionContext_=headers_.getEncryptionContextMap();}  }
class C{  public void addTrace(final Trace trace){  traceList.add(trace);  add(trace);  revalidate();}  }
class C{  protected static <O>DoubleIntPair[] rankReferencePoints(DistanceQuery<O> distanceQuery,O obj,ArrayDBIDs referencepoints){  DoubleIntPair[] priority=new DoubleIntPair[referencepoints.size()];  for (DBIDArrayIter iter=referencepoints.iter(); iter.valid(); iter.advance()) {    final int i=iter.getOffset();    final double dist=distanceQuery.distance(obj,iter);    priority[i]=new DoubleIntPair(dist,i);  }  Arrays.sort(priority);  return priority;}  }
class C{  void resolve(final MethodWriter owner,final int position,final byte[] data){  this.status|=RESOLVED;  this.position=position;  int i=0;  while (i < referenceCount) {    int source=srcAndRefPositions[i++];    int reference=srcAndRefPositions[i++];    int offset=position - source;    data[reference++]=(byte)(offset >>> 8);    data[reference]=(byte)offset;  }}  }
class C{  public Class loadClass(String name,boolean resolve) throws ClassNotFoundException {  Class c=null;  c=findLoadedClass(name);  if (c != null)   return c;  if (name.startsWith(ClassManagerImpl.BSH_PACKAGE))   try {    return bsh.Interpreter.class.getClassLoader().loadClass(name);  } catch (  ClassNotFoundException e) {  }  try {    c=findClass(name);  } catch (  ClassNotFoundException e) {  }  if (c == null)   throw new ClassNotFoundException("here in loaClass");  if (resolve)   resolveClass(c);  return c;}  }
class C{  public static MediaType create(String type,String subtype){  return create(type,subtype,ImmutableListMultimap.<String,String>of());}  }
class C{  @Override public final Node loadTree(Body p,MathVector xpic,int l,Tree tree){  Cell retval=new Cell();  int si=subindex(tree,l);  retval.subp[si]=this;  si=oldSubindex(xpic,l);  Node rt=retval.subp[si];  if (rt != null)   retval.subp[si]=rt.loadTree(p,xpic,l >> 1,tree); else   retval.subp[si]=p;  return retval;}  }
class C{  public void addRevision(int revnumber,String date,String authorinitials,String revremark){  Revision r=new Revision();  r.revnumber=revnumber;  r.date=date;  r.authorinitials=authorinitials;  r.revremark=revremark;  list.add(r);}  }
class C{  public int addNodeInDocOrder(Node node,XPathContext support){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));  return addNodeInDocOrder(node,true,support);}  }
class C{  public static void perspectiveM(float[] m,int offset,float fovy,float aspect,float zNear,float zFar){  float f=1.0f / (float)Math.tan(fovy * (Math.PI / 360.0));  float rangeReciprocal=1.0f / (zNear - zFar);  m[offset + 0]=f / aspect;  m[offset + 1]=0.0f;  m[offset + 2]=0.0f;  m[offset + 3]=0.0f;  m[offset + 4]=0.0f;  m[offset + 5]=f;  m[offset + 6]=0.0f;  m[offset + 7]=0.0f;  m[offset + 8]=0.0f;  m[offset + 9]=0.0f;  m[offset + 10]=(zFar + zNear) * rangeReciprocal;  m[offset + 11]=-1.0f;  m[offset + 12]=0.0f;  m[offset + 13]=0.0f;  m[offset + 14]=2.0f * zFar * zNear* rangeReciprocal;  m[offset + 15]=0.0f;}  }
class C{  public T caseTClassifier(TClassifier object){  return null;}  }
class C{  protected void replaceBody(final Object newValue){  this.children.clear();  this.children.add(newValue);}  }
class C{  public Queue<Env<AttrContext>> flow(Env<AttrContext> env){  ListBuffer<Env<AttrContext>> results=new ListBuffer<>();  flow(env,results);  return stopIfError(CompileState.FLOW,results);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public Token nextToken(){  Token t=super.nextToken();  while (t.getType() == STLexer.NEWLINE || t.getType() == STLexer.INDENT) {    t=super.nextToken();  }  return t;}  }
class C{  @Override public boolean shouldFetch(String url,WebPage page,long curTime){  long fetchTime=page.getFetchTime();  if (fetchTime - curTime > maxInterval * 1000L) {    if (page.getFetchInterval() > maxInterval) {      page.setFetchInterval(Math.round(maxInterval * 0.9f));    }    page.setFetchTime(curTime);  }  return fetchTime <= curTime;}  }
class C{  public GlowScheduler(GlowServer server,WorldScheduler worlds){  this.server=server;  this.worlds=worlds;  inTickTaskCondition=worlds.getAdvanceCondition();  tickEndRun=null;  primaryThread=Thread.currentThread();}  }
class C{  public DetectorResult detect() throws NotFoundException {  ResultPoint[] cornerPoints=rectangleDetector.detect();  ResultPoint pointA=cornerPoints[0];  ResultPoint pointB=cornerPoints[1];  ResultPoint pointC=cornerPoints[2];  ResultPoint pointD=cornerPoints[3];  List<ResultPointsAndTransitions> transitions=new ArrayList<ResultPointsAndTransitions>(4);  transitions.add(transitionsBetween(pointA,pointB));  transitions.add(transitionsBetween(pointA,pointC));  transitions.add(transitionsBetween(pointB,pointD));  transitions.add(transitionsBetween(pointC,pointD));  Collections.sort(transitions,new ResultPointsAndTransitionsComparator());  ResultPointsAndTransitions lSideOne=transitions.get(0);  ResultPointsAndTransitions lSideTwo=transitions.get(1);  Map<ResultPoint,Integer> pointCount=new HashMap<ResultPoint,Integer>();  increment(pointCount,lSideOne.getFrom());  increment(pointCount,lSideOne.getTo());  increment(pointCount,lSideTwo.getFrom());  increment(pointCount,lSideTwo.getTo());  ResultPoint maybeTopLeft=null;  ResultPoint bottomLeft=null;  ResultPoint maybeBottomRight=null;  for (  Map.Entry<ResultPoint,Integer> entry : pointCount.entrySet()) {    ResultPoint point=entry.getKey();    Integer value=entry.getValue();    if (value == 2) {      bottomLeft=point;    } else {      if (maybeTopLeft == null) {        maybeTopLeft=point;      } else {        maybeBottomRight=point;      }    }  }  if (maybeTopLeft == null || bottomLeft == null || maybeBottomRight == null) {    throw NotFoundException.getNotFoundInstance();  }  ResultPoint[] corners={maybeTopLeft,bottomLeft,maybeBottomRight};  ResultPoint.orderBestPatterns(corners);  ResultPoint bottomRight=corners[0];  bottomLeft=corners[1];  ResultPoint topLeft=corners[2];  ResultPoint topRight;  if (!pointCount.containsKey(pointA)) {    topRight=pointA;  } else   if (!pointCount.containsKey(pointB)) {    topRight=pointB;  } else   if (!pointCount.containsKey(pointC)) {    topRight=pointC;  } else {    topRight=pointD;  }  int dimensionTop=transitionsBetween(topLeft,topRight).getTransitions();  int dimensionRight=transitionsBetween(bottomRight,topRight).getTransitions();  if ((dimensionTop & 0x01) == 1) {    dimensionTop++;  }  dimensionTop+=2;  if ((dimensionRight & 0x01) == 1) {    dimensionRight++;  }  dimensionRight+=2;  BitMatrix bits;  ResultPoint correctedTopRight;  if (4 * dimensionTop >= 7 * dimensionRight || 4 * dimensionRight >= 7 * dimensionTop) {    correctedTopRight=correctTopRightRectangular(bottomLeft,bottomRight,topLeft,topRight,dimensionTop,dimensionRight);    if (correctedTopRight == null) {      correctedTopRight=topRight;    }    dimensionTop=transitionsBetween(topLeft,correctedTopRight).getTransitions();    dimensionRight=transitionsBetween(bottomRight,correctedTopRight).getTransitions();    if ((dimensionTop & 0x01) == 1) {      dimensionTop++;    }    if ((dimensionRight & 0x01) == 1) {      dimensionRight++;    }    bits=sampleGrid(image,topLeft,bottomLeft,bottomRight,correctedTopRight,dimensionTop,dimensionRight);  } else {    int dimension=Math.min(dimensionRight,dimensionTop);    correctedTopRight=correctTopRight(bottomLeft,bottomRight,topLeft,topRight,dimension);    if (correctedTopRight == null) {      correctedTopRight=topRight;    }    int dimensionCorrected=Math.max(transitionsBetween(topLeft,correctedTopRight).getTransitions(),transitionsBetween(bottomRight,correctedTopRight).getTransitions());    dimensionCorrected++;    if ((dimensionCorrected & 0x01) == 1) {      dimensionCorrected++;    }    bits=sampleGrid(image,topLeft,bottomLeft,bottomRight,correctedTopRight,dimensionCorrected,dimensionCorrected);  }  return new DetectorResult(bits,new ResultPoint[]{topLeft,bottomLeft,bottomRight,correctedTopRight});}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public int readInt(int len) throws IOException {  int i, x=0;  if (len < 0 || len > 32)   throw new IllegalArgumentException("You cannot read " + len + " bits into an integer.");  if (fill < 16)   refill();  if (len <= fill)   return readFromCurrent(len);  len-=fill;  x=readFromCurrent(fill);  i=len >> 3;  while (i-- != 0)   x=x << 8 | read();  readBits+=len & ~7;  len&=7;  return (x << len) | readFromCurrent(len);}  }
class C{  public void addInvokeinterface(CtClass clazz,String name,CtClass returnType,CtClass[] paramTypes,int count){  String desc=Descriptor.ofMethod(returnType,paramTypes);  addInvokeinterface(clazz,name,desc,count);}  }
class C{  public static int findFirstDiff(char[] source,int index,char match){  for (int i=index; i < source.length; i++) {    if (source[i] != match) {      return i;    }  }  return -1;}  }
class C{  public void pop(){  int size=level.size() - 1;  Object ob=level.remove(size);  if (ob != null) {    symb=(SymbMap)ob;    if (size == 0) {      cloned=false;    } else {      cloned=(level.get(size - 1) != symb);    }  } else {    cloned=false;  }}  }
class C{  public GlassFishExistingLocalConfigurationCapability(){  this.propertySupportMap.remove(GeneralPropertySet.PROTOCOL);  this.propertySupportMap.remove(GeneralPropertySet.JAVA_HOME);  this.propertySupportMap.put(RemotePropertySet.USERNAME,Boolean.TRUE);  this.propertySupportMap.put(RemotePropertySet.PASSWORD,Boolean.TRUE);  this.propertySupportMap.put(GlassFishPropertySet.ADMIN_PORT,Boolean.TRUE);  this.propertySupportMap.put(GlassFishPropertySet.DOMAIN_NAME,Boolean.TRUE);  this.propertySupportMap.put(GlassFishPropertySet.DEBUG_MODE,Boolean.TRUE);}  }
class C{  static int stepLevel(SemanticNode nd){  String stepStr=((SyntaxTreeNode)nd.stn).getHeirs()[0].image.toString();  String stepNum=stepStr.substring(stepStr.indexOf('<') + 1,stepStr.indexOf('>'));  return Integer.valueOf(stepNum).intValue();}  }
class C{  public boolean isEventCondition(){  return false;}  }
class C{  public void start(){  int delay=200;  log.fine("PosKeyboardFocusManager.start - " + delay);  if (m_timer == null)   m_timer=new javax.swing.Timer(delay,this);  if (!m_timer.isRunning())   m_timer.start();}  }
class C{  public void extraCallback(String callbackName,Bundle args){}  }
class C{  public String report(){  if (true)   return "-";  StringBuffer parameter=new StringBuffer("?");  if (getRecord_ID() == 0)   return "ID=0";  if (getRecord_ID() == 1) {    parameter.append("ISSUE=");    HashMap htOut=get_HashMap();    try {      ByteArrayOutputStream bOut=new ByteArrayOutputStream();      ObjectOutput oOut=new ObjectOutputStream(bOut);      oOut.writeObject(htOut);      oOut.flush();      String hexString=Secure.convertToHexString(bOut.toByteArray());      parameter.append(hexString);    } catch (    Exception e) {      log.severe(e.getLocalizedMessage());      return "New-" + e.getLocalizedMessage();    }  } else {    try {      parameter.append("RECORDID=").append(getRecord_ID());      parameter.append("&DBADDRESS=").append(URLEncoder.encode(getDBAddress(),"UTF-8"));      parameter.append("&COMMENTS=").append(URLEncoder.encode(getComments(),"UTF-8"));    } catch (    Exception e) {      log.severe(e.getLocalizedMessage());      return "Update-" + e.getLocalizedMessage();    }  }  InputStreamReader in=null;  String target="http://dev1/wstore/issueReportServlet";  try {    StringBuffer urlString=new StringBuffer(target).append(parameter);    URL url=new URL(urlString.toString());    URLConnection uc=url.openConnection();    in=new InputStreamReader(uc.getInputStream());  } catch (  Exception e) {    String msg="Cannot connect to http://" + target;    if (e instanceof FileNotFoundException || e instanceof ConnectException)     msg+="\nServer temporarily down - Please try again later"; else {      msg+="\nCheck connection - " + e.getLocalizedMessage();      log.log(Level.FINE,msg);    }    return msg;  }  return readResponse(in);}  }
class C{  public static XorPeerAddressAttribute createXorPeerAddressAttribute(TransportAddress address,byte[] tranID){  XorPeerAddressAttribute attribute=new XorPeerAddressAttribute();  attribute.setAddress(address,tranID);  return attribute;}  }
class C{  public Builder callbackUrlDebug(){  callbackUrl="debug://callback";  return this;}  }
class C{  public void afterEmitPropertyDeclaration(JavaFileWriter writer,PropertyGenerator propertyGenerator) throws IOException {}  }
class C{  protected boolean isActiveDefinition(XBLOMDefinitionElement def,Element imp){  DefinitionRecord defRec=(DefinitionRecord)definitions.get(def,imp);  if (defRec == null) {    return false;  }  return defRec == getActiveDefinition(defRec.namespaceURI,defRec.localName);}  }
class C{  public boolean accept(File file){  if (file.isDirectory()) {    return true;  }  String filename=file.toString().toLowerCase();  for (int j=0; j < imageFormats.length; j++) {    if (filename.endsWith("." + imageFormats[j].toLowerCase())) {      return true;    }  }  return false;}  }
class C{  private final void addExpandOrder(String contractChars,String expandChars,int anOrder) throws ParseException {  int tableIndex=addExpansion(anOrder,expandChars);  if (contractChars.length() > 1) {    char ch=contractChars.charAt(0);    if (Character.isHighSurrogate(ch) && contractChars.length() == 2) {      char ch2=contractChars.charAt(1);      if (Character.isLowSurrogate(ch2)) {        addOrder(Character.toCodePoint(ch,ch2),tableIndex);      }    } else {      addContractOrder(contractChars,tableIndex);    }  } else {    addOrder(contractChars.charAt(0),tableIndex);  }}  }
class C{  @SuppressWarnings("cast") public ExecutionEventNode lookupExecutionEventNode(EventBinding<? extends ExecutionEventNodeFactory> binding){  if (!(binding.getElement() instanceof ExecutionEventNodeFactory)) {    throw new IllegalArgumentException(String.format("Binding is not a subtype of %s.",ExecutionEventNodeFactory.class.getSimpleName()));  }  return probeNode.lookupExecutionEventNode(binding);}  }
class C{  public void insertUpdate(DocumentEvent e){  updateTree(e);}  }
class C{  private QueryBuilderKraken parseMap(){  return parseMap(new MapQueryBuilder(_tableManager,_sql));}  }
class C{  public ElemTemplateElement appendChild(ElemTemplateElement newChild){  int type=((ElemTemplateElement)newChild).getXSLToken();switch (type) {case Constants.ELEMNAME_TEXTLITERALRESULT:case Constants.ELEMNAME_APPLY_TEMPLATES:case Constants.ELEMNAME_APPLY_IMPORTS:case Constants.ELEMNAME_CALLTEMPLATE:case Constants.ELEMNAME_FOREACH:case Constants.ELEMNAME_VALUEOF:case Constants.ELEMNAME_COPY_OF:case Constants.ELEMNAME_NUMBER:case Constants.ELEMNAME_CHOOSE:case Constants.ELEMNAME_IF:case Constants.ELEMNAME_TEXT:case Constants.ELEMNAME_COPY:case Constants.ELEMNAME_VARIABLE:case Constants.ELEMNAME_MESSAGE:    break;default :  error(XSLTErrorResources.ER_CANNOT_ADD,new Object[]{newChild.getNodeName(),this.getNodeName()});}return super.appendChild(newChild);}  }
class C{  private void initialize(){  try {    transportPlugin.initializeExchange(backend.getBackendConfiguration().getExchange(),backend.getBackendConfiguration().getExchangeType());    transportPlugin.initializeExchange(backend.getEngineConfiguration().getExchange(),backend.getEngineConfiguration().getExchangeType());  } catch (  TransportPluginException e) {  }}  }
class C{  protected Object writeReplace(){  CacheConfiguration<K,V> cfg=new CacheConfiguration<>(this);  cfg.listenerConfigurations=new HashSet<>();  return cfg;}  }
class C{  private boolean execute(LinkedList<SessionNode> tierOrdering,boolean doRepetition,boolean simulation,boolean overwrite){  if (tierOrdering.isEmpty()) {    return true;  }  SessionNode sessionNode=tierOrdering.getFirst();  if (!session.contains(sessionNode)) {    throw new IllegalArgumentException("Session node not in the " + "session: " + sessionNode.getDisplayName());  }  if (!nodesToExecute.contains(sessionNode)) {    return false;  }  int repetition=doRepetition ? getRepetition(sessionNode) : 1;  Preferences.userRoot().putBoolean("errorFound",false);  for (int i=0; i < repetition; i++) {    if (Preferences.userRoot().getBoolean("experimental",false) && Preferences.userRoot().getBoolean("errorFound",false)) {    }    if (!overwrite && sessionNode.getModel() != null) {      return false;    }    sessionNode.destroyModel();    try {      if (repetition > 1) {        TetradLogger.getInstance().forceLogMessage("\nREPETITION #" + (i + 1) + " FOR "+ sessionNode.getDisplayName()+ "\n");      }      boolean created=sessionNode.createModel(simulation);      if (created) {        SessionModel source=sessionNode.getModel();        Map<String,String> paramSettings=new LinkedHashMap<>();        collectParentParamSettings(sessionNode,paramSettings);        if (source instanceof SimulationParamsSource) {          ((SimulationParamsSource)source).setAllParamSettings(paramSettings);        }      }      if (!created) {        return false;      }    } catch (    RuntimeException e) {      e.printStackTrace();      return false;    }    LinkedList<SessionNode> _tierOrdering=new LinkedList<>(tierOrdering);    _tierOrdering.removeFirst();    boolean success=execute(_tierOrdering,doRepetition,simulation,overwrite);    if (!success) {      return false;    }  }  return true;}  }
class C{  public static option[] convertToOption(NamePair[] list,String default_ID){  int size=list.length;  option[] retValue=new option[size];  for (int i=0; i < size; i++) {    boolean selected=false;    if (i == 0 && (default_ID == null || default_ID.length() == 0))     selected=true;    String name=Util.maskHTML(list[i].getName());    retValue[i]=new option(list[i].getID()).addElement(name);    if (default_ID != null && default_ID.equals(list[i].getID()))     selected=true;    retValue[i].setSelected(selected);  }  return retValue;}  }
class C{  public void newArray(final Type type){  int typ;switch (type.getSort()) {case Type.BOOLEAN:    typ=Opcodes.T_BOOLEAN;  break;case Type.CHAR:typ=Opcodes.T_CHAR;break;case Type.BYTE:typ=Opcodes.T_BYTE;break;case Type.SHORT:typ=Opcodes.T_SHORT;break;case Type.INT:typ=Opcodes.T_INT;break;case Type.FLOAT:typ=Opcodes.T_FLOAT;break;case Type.LONG:typ=Opcodes.T_LONG;break;case Type.DOUBLE:typ=Opcodes.T_DOUBLE;break;default :typeInsn(Opcodes.ANEWARRAY,type);return;}mv.visitIntInsn(Opcodes.NEWARRAY,typ);}  }
class C{  protected boolean lineStart(TextView widget,Spannable buffer){  return false;}  }
class C{  @Override public void onUpdate(){  if (!this.worldObj.isRemote) {    ExplosivePreDetonationEvent evt=new ExplosivePreDetonationEvent(worldObj,posX,posY,posZ,ExplosiveType.BLOCK,ExplosiveRegistry.get(explosiveID));    MinecraftForge.EVENT_BUS.post(evt);    if (evt.isCanceled()) {      DefenseTechBlocks.blockExplosive.dropBlockAsItem(this.worldObj,(int)this.posX,(int)this.posY,(int)this.posZ,this.explosiveID,0);      this.setDead();      return;    }  }  this.prevPosX=this.posX;  this.prevPosY=this.posY;  this.prevPosZ=this.posZ;  this.motionX*=0.95;  this.motionY-=0.045D;  this.motionZ*=0.95;  this.moveEntity(this.motionX,this.motionY,this.motionZ);  if (this.fuse < 1) {    this.explode();  } else {    ExplosiveRegistry.get(this.explosiveID).onDetonation(this.worldObj,new Pos3D(this.posX,this.posY,this.posZ),this.fuse);  }  this.fuse--;  super.onUpdate();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SGraphPackage.VERTEX__PARENT_REGION:    return basicGetParentRegion() != null;case SGraphPackage.VERTEX__INCOMING_TRANSITIONS:  return incomingTransitions != null && !incomingTransitions.isEmpty();case SGraphPackage.VERTEX__OUTGOING_TRANSITIONS:return outgoingTransitions != null && !outgoingTransitions.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public static void openDial(Context context,String number){  Uri uri=Uri.parse("tel:" + number);  Intent intent=new Intent(Intent.ACTION_DIAL,uri);  context.startActivity(intent);}  }
class C{  public static String makeCompliantMBeanNameProperty(String value){  value=value.replace(':','-');  value=value.replace(',','-');  value=value.replace('=','-');  value=value.replace('*','-');  value=value.replace('?','-');  if (value.length() < 1) {    value="nothing";  }  return value;}  }
class C{  @Override public void onTerminate(){  super.onTerminate();  if (_communicator != null) {    try {      _communicator.destroy();    } catch (    Ice.LocalException ex) {    }  }}  }
class C{  public static <B>ImmutableTypeToInstanceMap<B> of(){  return new ImmutableTypeToInstanceMap<B>(ImmutableMap.<TypeToken<? extends B>,B>of());}  }
class C{  public OMArc(double latPoint,double lonPoint,double radius,Length units,int nverts,double s,double e){  this(new LatLonPoint.Double(latPoint,lonPoint),radius,units,nverts,s,e);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof StandardDialFrame)) {    return false;  }  StandardDialFrame that=(StandardDialFrame)obj;  if (!PaintUtilities.equal(this.backgroundPaint,that.backgroundPaint)) {    return false;  }  if (!PaintUtilities.equal(this.foregroundPaint,that.foregroundPaint)) {    return false;  }  if (this.radius != that.radius) {    return false;  }  if (!this.stroke.equals(that.stroke)) {    return false;  }  return super.equals(obj);}  }
class C{  @Override public void validateRestoreSnapshot(BlockSnapshot snapshot,Volume parentVolume){  if (!snapshot.getIsSyncActive()) {    throw APIException.badRequests.snapshotNotActivated(snapshot.getLabel());  }  URI parentVolumeURI=parentVolume.getId();  URI cgURI=snapshot.getConsistencyGroup();  if (NullColumnValueGetter.isNullURI(cgURI)) {    URIQueryResultList queryResults=new URIQueryResultList();    _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getVolumeByAssociatedVolumesConstraint(parentVolumeURI.toString()),queryResults);    URI vplexVolumeURI=queryResults.iterator().next();    Volume vplexVolume=_dbClient.queryObject(Volume.class,vplexVolumeURI);    List<URI> activeMirrors=getActiveMirrorsForVolume(vplexVolume);    if (!activeMirrors.isEmpty()) {      throw APIException.badRequests.snapshotParentForVPlexHasActiveMirrors(snapshot.getLabel(),vplexVolume.getLabel(),vplexVolume.getId().toString());    }  }}  }
class C{  public void addItemSet(FrequentBinaryItemSet setToAdd){  m_sets.add(setToAdd);}  }
class C{  private static Object compareClasses(Object parameter,Class trgClass){  Class srcClass=parameter.getClass();  trgClass=primitiveToWrapperType(trgClass);  try {    if (parameter instanceof ObjectWrap)     parameter=((ObjectWrap)parameter).getEmbededObject();    if (srcClass == trgClass)     return parameter; else     if (instaceOf(srcClass,trgClass)) {      return parameter;    } else     if (trgClass.getName().equals("java.lang.String")) {      return Caster.toString(parameter);    } else     if (trgClass.getName().equals("java.lang.Boolean")) {      return Caster.toBoolean(parameter);    } else     if (trgClass.getName().equals("java.lang.Byte")) {      return new Byte(Caster.toString(parameter));    } else     if (trgClass.getName().equals("java.lang.Character")) {      String str=Caster.toString(parameter);      if (str.length() == 1)       return new Character(str.toCharArray()[0]);      return null;    } else     if (trgClass.getName().equals("java.lang.Short")) {      return Short.valueOf((short)Caster.toIntValue(parameter));    } else     if (trgClass.getName().equals("java.lang.Integer")) {      return Integer.valueOf(Caster.toIntValue(parameter));    } else     if (trgClass.getName().equals("java.lang.Long")) {      return Long.valueOf((long)Caster.toDoubleValue(parameter));    } else     if (trgClass.getName().equals("java.lang.Float")) {      return Float.valueOf((float)Caster.toDoubleValue(parameter));    } else     if (trgClass.getName().equals("java.lang.Double")) {      return Caster.toDouble(parameter);    }  } catch (  PageException e) {    return null;  }  return null;}  }
class C{  public static void erro(Node no,String mensagem){  try {    if (no != null) {      no.setStyle("-fx-border-color: #ff7575;");      origem(no);    }  } catch (  Exception ex) {    Nota.erro("Erro erro campo");  }}  }
class C{  public REProgram(int parens,char[] instruction){  this(instruction,instruction.length);  this.maxParens=parens;}  }
class C{  public Composite createControl(final Composite parent,final KeyListener kListener){  final String labelId=type == MIN ? "Min scale:" : "Max scale:";  final Composite part=AbstractSimpleConfigurator.subpart(parent,labelId);  this.on=new Button(part,SWT.CHECK);  this.on.addSelectionListener(this.sync);  this.scaleEditor=new Combo(part,SWT.DROP_DOWN);  this.scaleEditor.setItems(new String[]{"100","1000","10000","100000","1000000","10000000"});  this.scaleEditor.setTextLimit(10);  this.scaleEditor.addKeyListener(kListener);  final String tooltip=type == MIN ? "Minimum scale denominator" : "Maximum scale denominator";  this.scaleEditor.setToolTipText(tooltip);  return part;}  }
class C{  public static MailTo parse(String url) throws ParseException {  if (url == null) {    throw new NullPointerException();  }  if (!isMailTo(url)) {    throw new ParseException("Not a mailto scheme");  }  String noScheme=url.substring(MAILTO_SCHEME.length());  Uri email=Uri.parse(noScheme);  MailTo m=new MailTo();  String query=email.getQuery();  if (query != null) {    String[] queries=query.split("&");    for (    String q : queries) {      String[] nameval=q.split("=");      if (nameval.length == 0) {        continue;      }      m.mHeaders.put(Uri.decode(nameval[0]).toLowerCase(Locale.ROOT),nameval.length > 1 ? Uri.decode(nameval[1]) : null);    }  }  String address=email.getPath();  if (address != null) {    String addr=m.getTo();    if (addr != null) {      address+=", " + addr;    }    m.mHeaders.put(TO,address);  }  return m;}  }
class C{  public Object opt(String key){  return key == null ? null : this.map.get(key);}  }
class C{  protected void engineInit(AlgorithmParameterSpec params,SecureRandom random) throws InvalidAlgorithmParameterException {  throw new InvalidAlgorithmParameterException("DES key generation does not take any parameters");}  }
class C{  private static void writeJpegFile(OutputStream os,List<Section> sections) throws IOException {  os.write(0xff);  os.write(M_SOI);  for (  Section section : sections) {    os.write(0xff);    os.write(section.marker);    if (section.length > 0) {      int lh=section.length >> 8;      int ll=section.length & 0xff;      os.write(lh);      os.write(ll);    }    os.write(section.data);  }}  }
class C{  private static List<CTutorialStep> readSteps(final Node node){  final List<CTutorialStep> steps=new ArrayList<CTutorialStep>();  for (int i=0; i < node.getChildNodes().getLength(); ++i) {    final Node child=node.getChildNodes().item(i);    final String childText=child.getNodeName();    if ("step".equals(childText)) {      final List<Long> identifiers=new ArrayList<Long>();      final List<Long> allows=new ArrayList<Long>();      String actionDescription=null;      boolean next=false;      for (int j=0; j < child.getChildNodes().getLength(); ++j) {        final Node child2=child.getChildNodes().item(j);        final String childName=child2.getNodeName();        if ("action".equals(childName)) {          final long index=Long.valueOf(child2.getTextContent());          if (index == 0) {            next=true;            continue;          }          identifiers.add(index);        } else         if ("allowed".equals(childName)) {          final long index=Long.valueOf(child2.getTextContent());          allows.add(index);        } else         if ("description".equals(childName)) {          actionDescription=child2.getTextContent();        }      }      steps.add(new CTutorialStep(actionDescription,identifiers,allows,next));    }  }  return steps;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public int read(byte b[],int off,int len) throws IOException {  if (ostart >= ofinish) {    int i=0;    while (i == 0)     i=getMoreData();    if (i == -1)     return -1;  }  if (len <= 0) {    return 0;  }  int available=ofinish - ostart;  if (len < available)   available=len;  if (b != null) {    System.arraycopy(obuffer,ostart,b,off,available);  }  ostart=ostart + available;  return available;}  }
class C{  public FieldRef(String declClass,String fieldType,String fieldName){  mDeclClass=declClass;  mFieldType=fieldType;  mFieldName=fieldName;}  }
class C{  private void runGnuplotScript(String gnuplotScriptName,int iteration){  String pathToSpecificAnalysisDir=scenario.getConfig().controler().getOutputDirectory() + "ITERS/it." + iteration+ "/analysis";  String relativePathToGnuplotScript="../../../../../analysis/" + gnuplotScriptName + ".p";  log.info("execute command: cd " + pathToSpecificAnalysisDir);  log.info("and afterwards: gnuplot " + relativePathToGnuplotScript);  GnuplotUtils.runGnuplotScript(pathToSpecificAnalysisDir,relativePathToGnuplotScript);}  }
class C{  public void move(RepositoryLocation source,Folder destination,ProgressListener listener) throws RepositoryException {  move(source,destination,null,listener);}  }
class C{  @Override public boolean isRowAvailable(){  if (list == null) {    return (false);  } else   if ((index >= 0) && (index < list.size())) {    return (true);  } else {    return (false);  }}  }
class C{  public AnnotationSetItem(Annotations annotations){  super(ALIGNMENT,writeSize(annotations));  this.annotations=annotations;  this.items=new AnnotationItem[annotations.size()];  int at=0;  for (  Annotation a : annotations.getAnnotations()) {    items[at]=new AnnotationItem(a);    at++;  }}  }
class C{  public DefinitionsSpec buildDefinitionsSpecAndDependencies(StaticDefinitions staticDefs){  for (  StaticDefinitions dependent : staticDefs.getDependentStaticDefinitions()) {    buildDefinitionsSpecAndDependencies(dependent);  }  DefinitionsSpec spec=buildDefinitionsSpec(staticDefs);  return spec;}  }
class C{  public AddressExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public static byte[] toByteArray(Byte[] array){  byte[] result=new byte[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i];  }  return result;}  }
class C{  public void annotationRemoved(Annotation annotation){  annotationRemoved(annotation,null);}  }
class C{  public void removeZoomListener(ZoomListener listener){}  }
class C{  private void closeCurrentDump(){  TreePath selPath=tree.getSelectionPath();  while (selPath != null && !(checkNameFromNode((DefaultMutableTreeNode)selPath.getLastPathComponent(),File.separator) || checkNameFromNode((DefaultMutableTreeNode)selPath.getLastPathComponent(),2,File.separator))) {    selPath=selPath.getParentPath();  }  Object[] options={"Close File","Cancel close"};  String fileName=((DefaultMutableTreeNode)selPath.getLastPathComponent()).getUserObject().toString();  fileName=fileName.substring(fileName.indexOf(File.separator));  int selectValue=JOptionPane.showOptionDialog(null,"<html><body>Are you sure, you want to close the currently selected dump file<br><b>" + fileName + "</b></body></html>","Confirm closing...",JOptionPane.DEFAULT_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);  if (selectValue == 0) {    topNodes.remove(selPath.getLastPathComponent());    if (topNodes.size() == 0) {      removeAll();      revalidate();      init(runningAsJConsolePlugin,runningAsVisualVMPlugin);      getMainMenu().getLongMenuItem().setEnabled(false);      getMainMenu().getCloseMenuItem().setEnabled(false);      getMainMenu().getSaveSessionMenuItem().setEnabled(false);      getMainMenu().getCloseToolBarButton().setEnabled(false);      getMainMenu().getExpandButton().setEnabled(false);      getMainMenu().getCollapseButton().setEnabled(false);      getMainMenu().getFindLRThreadsToolBarButton().setEnabled(false);      getMainMenu().getCloseAllMenuItem().setEnabled(false);      getMainMenu().getExpandAllMenuItem().setEnabled(false);      getMainMenu().getCollapseAllMenuItem().setEnabled(false);    } else {      getMainMenu().getCloseMenuItem().setEnabled(false);      getMainMenu().getCloseToolBarButton().setEnabled(false);      createTree();    }    revalidate();  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private final void primitiveRightShift(int n){  int[] val=value;  int n2=32 - n;  for (int i=offset + intLen - 1, c=val[i]; i > offset; i--) {    int b=c;    c=val[i - 1];    val[i]=(c << n2) | (b >>> n);  }  val[offset]>>>=n;}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_A:    return stateVector[0] == State.main_region_A;case main_region_B:  return stateVector[0] == State.main_region_B;default :return false;}}  }
class C{  public boolean dataRequery(String whereClause,boolean onlyCurrentRows,int onlyCurrentDays){  log.info(whereClause + "; OnlyCurrent=" + onlyCurrentRows);  close(false);  m_onlyCurrentDays=onlyCurrentDays;  setSelectWhereClause(whereClause,onlyCurrentRows,m_onlyCurrentDays);  open(m_maxRows);  m_rowData=null;  m_changed=false;  m_rowChanged=-1;  m_inserting=false;  fireTableDataChanged();  fireDataStatusIEvent(DATA_REFRESH_MESSAGE,"");  return true;}  }
class C{  public boolean contains(Object child){  return children.contains(child);}  }
class C{  @Override public XAQueueConnection createXAQueueConnection(final String userName,final String password) throws JMSException {  if (ActiveMQRAConnectionFactoryImpl.trace) {    ActiveMQRALogger.LOGGER.trace("createXAQueueConnection(" + userName + ", ****)");  }  ActiveMQRASessionFactoryImpl s=new ActiveMQRASessionFactoryImpl(mcf,cm,getResourceAdapter().getTM(),ActiveMQRAConnectionFactory.XA_QUEUE_CONNECTION);  s.setUserName(userName);  s.setPassword(password);  validateUser(s);  if (ActiveMQRAConnectionFactoryImpl.trace) {    ActiveMQRALogger.LOGGER.trace("Created queue connection: " + s);  }  return s;}  }
class C{  static void errorMissingPCData(String systemID,int lineNr,String parentElementName) throws XMLValidationException {  throw new XMLValidationException(XMLValidationException.MISSING_PCDATA,systemID,lineNr,null,null,null,"Missing #PCDATA in element " + parentElementName);}  }
class C{  public void importFilesToChildTable(final String childTableName) throws Exception {  final Configuration childConfig=MergeToolMapper.getChildConfig(conf);  final AccumuloRdfConfiguration childAccumuloRdfConfiguration=new AccumuloRdfConfiguration(childConfig);  childAccumuloRdfConfiguration.setTablePrefix(childTablePrefix);  final Connector childConnector=AccumuloRyaUtils.setupConnector(childAccumuloRdfConfiguration);  final TableOperations childTableOperations=childConnector.tableOperations();  final Path localWorkDir=getPath(localCopyFileImportDir,childTableName);  final Path hdfsBaseWorkDir=getPath(baseImportDir,childTableName);  final FileSystem fs=FileSystem.get(conf);  if (fs.exists(hdfsBaseWorkDir)) {    fs.delete(hdfsBaseWorkDir,true);  }  log.info("Importing from the local directory: " + localWorkDir);  log.info("Importing to the HDFS directory: " + hdfsBaseWorkDir);  copyLocalToHdfs(localWorkDir,hdfsBaseWorkDir);  final Path files=getPath(hdfsBaseWorkDir.toString(),"files");  final Path failures=getPath(hdfsBaseWorkDir.toString(),"failures");  final FsShell shell=new FsShell(conf);  shell.run(new String[]{"-chmod","777",hdfsBaseWorkDir.toString()});  if (fs.exists(failures)) {    fs.delete(failures,true);  }  fs.mkdirs(failures);  childTableOperations.importDirectory(childTableName,files.toString(),failures.toString(),false);}  }
class C{  public Dimension minimumLayoutSize(Container target){  checkContainer(target);  checkRequests();  Dimension size=new Dimension(xTotal.minimum,yTotal.minimum);  Insets insets=target.getInsets();  size.width+=insets.left + insets.right;  size.height+=insets.top + insets.bottom;  return size;}  }
class C{  public void putStringNoNull(String s){  ensureCapacity(s.length() * 2);  System.arraycopy(s.getBytes(),0,this.byteBuffer,this.position,s.length());  this.position+=s.length();}  }
class C{  public GROUP_BY GROUP_BY(String groupBy){  return new GROUP_BY(this,groupBy);}  }
class C{  public String makeKeyPredicate(EdmEntitySet entity_set,ODataEntry entity) throws EdmException {  if (entity_set == null)   throw new IllegalArgumentException("entity_set must not be null.");  if (entity == null)   throw new IllegalArgumentException("entity must not be null.");  List<EdmProperty> edm_props=entity_set.getEntityType().getKeyProperties();  StringBuilder sb=new StringBuilder();  for (  EdmProperty edm_prop : edm_props) {    String key_prop_name=edm_prop.getName();    Object key_prop_val=entity.getProperties().get(key_prop_name);    if (sb.length() > 0)     sb.append(',');    sb.append(key_prop_name).append('=');    if (key_prop_val instanceof String)     sb.append('\'').append(key_prop_val).append('\''); else     sb.append(key_prop_val);  }  return sb.toString();}  }
class C{  private void loadLevelFile(String tableName,String columnName,String cubeName,String schemaName){  String baseLocation=CarbonUtil.getCarbonStorePath(schemaName,cubeName);  baseLocation=baseLocation + File.separator + schemaName+ File.separator+ cubeName;  if (loadFolderList.size() == 0) {    checkAndUpdateFolderList(baseLocation);  }  try {    File[] filesArray=null;    for (    File loadFoler : loadFolderList) {      filesArray=getFilesArray(loadFoler,tableName + '_' + columnName);      if (null != filesArray) {        for (int i=0; i < filesArray.length; i++) {          readLevelFileAndUpdateCache(filesArray[i],tableName + '_' + columnName);        }      }    }  } catch (  IOException e) {    LOGGER.error("Problem while populating the cache");  }}  }
class C{  @Override public void propertyChange(PropertyChangeEvent e){  if (SynthLookAndFeel.shouldUpdateStyle(e)) {    updateStyle((JRootPane)e.getSource());  }  super.propertyChange(e);}  }
class C{  public boolean removeProperty(String property){  return getProperties().remove(property) != null;}  }
class C{  @FlashException public static void deregisterStoragePools(String virtualArrayId,@As(",") String[] ids){  if ((ids != null) && (ids.length > 0)) {    for (    StoragePoolRestRep pool : StoragePoolUtils.getStoragePools(uris(ids))) {      if (RegistrationStatus.isRegistered(pool.getRegistrationStatus())) {        StoragePoolUtils.deregister(id(pool));      }    }  }  storagePools(virtualArrayId);}  }
class C{  private int readNextToken(char[] chars,int start,int len,StrBuilder workArea,List tokens){  while (start < len) {    int removeLen=Math.max(getIgnoredMatcher().isMatch(chars,start,start,len),getTrimmerMatcher().isMatch(chars,start,start,len));    if (removeLen == 0 || getDelimiterMatcher().isMatch(chars,start,start,len) > 0 || getQuoteMatcher().isMatch(chars,start,start,len) > 0) {      break;    }    start+=removeLen;  }  if (start >= len) {    addToken(tokens,"");    return -1;  }  int delimLen=getDelimiterMatcher().isMatch(chars,start,start,len);  if (delimLen > 0) {    addToken(tokens,"");    return start + delimLen;  }  int quoteLen=getQuoteMatcher().isMatch(chars,start,start,len);  if (quoteLen > 0) {    return readWithQuotes(chars,start + quoteLen,len,workArea,tokens,start,quoteLen);  }  return readWithQuotes(chars,start,len,workArea,tokens,0,0);}  }
class C{  public RSASSAPSSparams(){  hashAlgorithm=DEFAULT_HASH_ALGORITHM;  maskGenAlgorithm=DEFAULT_MASK_GEN_FUNCTION;  saltLength=DEFAULT_SALT_LENGTH;  trailerField=DEFAULT_TRAILER_FIELD;}  }
class C{  @Override public void keyTyped(KeyEvent e){synchronized (keyLock) {    keysTyped.addFirst(e.getKeyChar());  }}  }
class C{  @Nonnull public BugInstance addCalledMethod(MethodGen methodGen,InvokeInstruction inv){  ConstantPoolGen cpg=methodGen.getConstantPool();  return addCalledMethod(cpg,inv);}  }
class C{  private void readObject(ObjectInputStream s) throws ClassNotFoundException, IOException {  s.defaultReadObject();  undoManager=new RUndoManager(this);  getDocument().addUndoableEditListener(undoManager);  lineHighlightManager=null;}  }
class C{  public DoughnutChart(MultipleCategorySeries dataset,DefaultRenderer renderer){  super(null,renderer);  mDataset=dataset;}  }
class C{  public static boolean disjoint(Collection<?> c1,Collection<?> c2){  if ((c1 instanceof Set) && !(c2 instanceof Set) || (c2.size()) > c1.size()) {    Collection<?> tmp=c1;    c1=c2;    c2=tmp;  }  Iterator<?> it=c1.iterator();  while (it.hasNext()) {    if (c2.contains(it.next())) {      return false;    }  }  return true;}  }
class C{  protected final void endOfInput() throws IOException {  if (state != STATE_READING_RESPONSE_BODY)   throw new IllegalStateException("state: " + state);  detachTimeout(timeout);  state=STATE_CLOSED;  if (streamAllocation != null) {    streamAllocation.streamFinished(Http1xStream.this);  }}  }
class C{  @Override public void write(byte[] buffer) throws IOException {  write(buffer,0,buffer.length);}  }
class C{  public AccountHeaderBuilder withActivity(@NonNull Activity activity){  this.mActivity=activity;  return this;}  }
class C{  public Email(String email){  super(email);}  }
class C{  private boolean[] correctBits(boolean[] rawbits) throws FormatException {  GenericGF gf;  if (ddata.getNbLayers() <= 2) {    codewordSize=6;    gf=GenericGF.AZTEC_DATA_6;  } else   if (ddata.getNbLayers() <= 8) {    codewordSize=8;    gf=GenericGF.AZTEC_DATA_8;  } else   if (ddata.getNbLayers() <= 22) {    codewordSize=10;    gf=GenericGF.AZTEC_DATA_10;  } else {    codewordSize=12;    gf=GenericGF.AZTEC_DATA_12;  }  int numDataCodewords=ddata.getNbDatablocks();  int numECCodewords;  int offset;  if (ddata.isCompact()) {    offset=NB_BITS_COMPACT[ddata.getNbLayers()] - numCodewords * codewordSize;    numECCodewords=NB_DATABLOCK_COMPACT[ddata.getNbLayers()] - numDataCodewords;  } else {    offset=NB_BITS[ddata.getNbLayers()] - numCodewords * codewordSize;    numECCodewords=NB_DATABLOCK[ddata.getNbLayers()] - numDataCodewords;  }  int[] dataWords=new int[numCodewords];  for (int i=0; i < numCodewords; i++) {    int flag=1;    for (int j=1; j <= codewordSize; j++) {      if (rawbits[codewordSize * i + codewordSize - j + offset]) {        dataWords[i]+=flag;      }      flag<<=1;    }  }  try {    ReedSolomonDecoder rsDecoder=new ReedSolomonDecoder(gf);    rsDecoder.decode(dataWords,numECCodewords);  } catch (  ReedSolomonException rse) {    throw FormatException.getFormatInstance();  }  offset=0;  invertedBitCount=0;  boolean[] correctedBits=new boolean[numDataCodewords * codewordSize];  for (int i=0; i < numDataCodewords; i++) {    boolean seriesColor=false;    int seriesCount=0;    int flag=1 << (codewordSize - 1);    for (int j=0; j < codewordSize; j++) {      boolean color=(dataWords[i] & flag) == flag;      if (seriesCount == codewordSize - 1) {        if (color == seriesColor) {          throw FormatException.getFormatInstance();        }        seriesColor=false;        seriesCount=0;        offset++;        invertedBitCount++;      } else {        if (seriesColor == color) {          seriesCount++;        } else {          seriesCount=1;          seriesColor=color;        }        correctedBits[i * codewordSize + j - offset]=color;      }      flag>>>=1;    }  }  return correctedBits;}  }
class C{  public static boolean isWhiteSpace(int c){switch (c) {case NUL_CHAR:case '\t':case '\n':case FF_CHAR:case '\r':case ' ':    return true;default :  return false;}}  }
class C{  static void reloadLuceneSPI(ClassLoader loader){  PostingsFormat.reloadPostingsFormats(loader);  DocValuesFormat.reloadDocValuesFormats(loader);  Codec.reloadCodecs(loader);  CharFilterFactory.reloadCharFilters(loader);  TokenFilterFactory.reloadTokenFilters(loader);  TokenizerFactory.reloadTokenizers(loader);}  }
class C{  public AccessTokensBuilder connectionRequestTimeout(final int connectionRequestTimeout){  checkLock();  this.httpConfig.setConnectionRequestTimeout(connectionRequestTimeout);  return this;}  }
class C{  private void fetchloop(){  Thread me=Thread.currentThread();  while (isFetcher(me)) {    me.interrupted();    me.setPriority(HIGH_PRIORITY);    ImageFetchable src=nextImage();    if (src == null) {      return;    }    try {      src.doFetch();    } catch (    Exception e) {      System.err.println("Uncaught error fetching image:");      e.printStackTrace();    }    stoppingAnimation(me);  }}  }
class C{  public static double toDegrees(final double angrad){  if (USE_JDK_MATH) {    return Math.toDegrees(angrad);  }  return angrad * (180 / Math.PI);}  }
class C{  public static void register(String instantiatorClass,String instantiatedClass,int id,boolean distribute){  if (checkForThread()) {    register(instantiatorClass,new InstantiatorAttributesHolder(instantiatorClass,instantiatedClass,id),distribute);  }}  }
class C{  public boolean isDefaultGroup(String groupName){  return defaultGroups.contains(groupName);}  }
class C{  public static Number max(Number a,Number b){  if (isFloatingPoint(a) || isFloatingPoint(b)) {    return Math.max(a.doubleValue(),b.doubleValue());  } else {    return Math.max(a.longValue(),b.longValue());  }}  }
class C{  public MockedValueIV(final IV<?,?> delegate){  super(DTE.Extension);  if (delegate == null) {    throw new IllegalArgumentException();  }  this.delegate=delegate;}  }
class C{  private void raiseWindow(){  if ((windowShell != null) && (!windowShell.isDisposed())) {    location=windowShell.getLocation();    windowShell.close();    windowShell.dispose();  }  Shell topshell=UIHelper.getShellProvider().getShell();  windowShell=new Shell(topshell,SWT.CLOSE | SWT.TITLE | SWT.RESIZE);  windowShell.setText("Decompose Proof");  windowShell.addDisposeListener(new WindowDisposeListener(this));  Composite shell=new Composite(windowShell,SWT.NONE);  GridLayout gridLayout=new GridLayout(3,false);  shell.setLayout(gridLayout);  Composite topMenu=new Composite(shell,SWT.NONE);  gridLayout=new GridLayout(7,false);  gridLayout.marginBottom=0;  topMenu.setLayout(gridLayout);  GridData gridData=new GridData();  gridData.horizontalSpan=3;  topMenu.setLayoutData(gridData);  Button backButton=new Button(topMenu,SWT.PUSH);  setupMenuButton(backButton,BACK_BUTTON,"\u2190");  backButton.setFont(JFaceResources.getFontRegistry().get(JFaceResources.HEADER_FONT));  backButton.setEnabled(state.previousState != null);  Button replaceButton=new Button(topMenu,SWT.PUSH);  setupMenuButton(replaceButton,PROVE_BUTTON,"P");  replaceButton.setFont(JFaceResources.getFontRegistry().get(JFaceResources.HEADER_FONT));  replaceButton.setEnabled(state.hasChanged && (!state.splitChosen()));  showContextButton=new Button(topMenu,SWT.CHECK);  setupCheckButton(showContextButton,"Show Context");  showContextButton.setSelection(showContextValue);  showContextButton.addSelectionListener(new DecomposeProofButtonListener(this,new Integer(SHOW_CONTEXT_BUTTON),MENU));  useSufficesButton=new Button(topMenu,SWT.CHECK);  setupCheckButton(useSufficesButton,"Use SUFFICES");  useSufficesButton.setSelection(useSufficesValue);  useCaseButton=new Button(topMenu,SWT.CHECK);  setupCheckButton(useCaseButton,"Use CASE");  useCaseButton.setSelection(useCaseValue);  subexpressionButton=new Button(topMenu,SWT.CHECK);  setupCheckButton(subexpressionButton,"Use subexpression names");  subexpressionButton.setSelection(subexpressionValue);  gridData=new GridData();  gridData.horizontalAlignment=GridData.FILL;  gridData.grabExcessHorizontalSpace=true;  subexpressionButton.setLayoutData(gridData);  subexpressionButton.setVisible(false);  Button helpButton=HelpButton.helpButton(topMenu,"prover/decompose.html");  gridData=new GridData();  gridData.horizontalIndent=20;  helpButton.setLayoutData(gridData);  Label assumeLabel;  if (state.assumeReps != null) {    addAssumptionsToComposite(state.assumeReps,shell);  }  gridData=new GridData();  gridData.horizontalSpan=3;  assumeLabel=new Label(shell,SWT.NONE);  assumeLabel.setLayoutData(gridData);  assumeLabel.setText("PROVE");  assumeLabel.setFont(JFaceResources.getFontRegistry().get(JFaceResources.HEADER_FONT));  String labelText=null;  boolean isProver=false;  boolean disable=false;switch (state.goalRep.nodeSubtype) {case NodeRepresentation.AND_TYPE:    labelText="/\\";  isProver=true;disable=(state.splitChosen());break;case NodeRepresentation.FORALL_TYPE:labelText="\\A";disable=state.splitChosen();break;case NodeRepresentation.IMPLIES_TYPE:labelText="=>";break;default :labelText=null;}if (labelText != null) {Button goalButton=new Button(shell,SWT.PUSH);setupActionButton(goalButton,state.goalRep,labelText);goalButton.setEnabled(!disable);} else {assumeLabel=new Label(shell,SWT.NONE);assumeLabel.setText("  ");}Composite comp;comp=new Composite(shell,SWT.NONE);gridLayout=new GridLayout(1,false);comp.setLayout(gridLayout);if (isProver && !disable) {assumeLabel=new Label(comp,SWT.NONE);assumeLabel.setText("P");assumeLabel.setFont(JFaceResources.getFontRegistry().get(JFaceResources.HEADER_FONT));}comp.setSize(0,5);assumeLabel=new Label(shell,SWT.NONE);assumeLabel.setText(stringArrayToString(state.goalRep.primedNodeText()));gridData=new GridData();gridData.verticalAlignment=SWT.TOP;assumeLabel.setLayoutData(gridData);assumeLabel.setFont(JFaceResources.getFontRegistry().get(JFaceResources.TEXT_FONT));shell.pack();windowShell.pack();windowShell.update();if (this.location != null) {windowShell.setLocation(this.location);}windowShell.open();editorIFile.setReadOnly(true);}  }
class C{  @action(name="propose",args={@arg(name=GamaMessageType.MESSAGE_STR,type=IType.MESSAGE,optional=false,doc=@doc("The message to be replied")),@arg(name=GamaMessage.CONTENTS,type=IType.LIST,optional=false,doc=@doc("The content of the replying message"))},doc=@doc("Replies a message with a 'propose' performative message.")) public Object primPropose(final IScope scope) throws GamaRuntimeException {  final IList originals=getMessageArg(scope);  if (originals == null || originals.size() == 0) {    throw GamaRuntimeException.error("No message to reply",scope);  }  return replyMessage(scope,originals,PROPOSE,getContentArg(scope));}  }
class C{  public static String encodeRefinementValuePath(List<String> values){  assert null != values;  if (values.isEmpty()) {    return "";  }  StringBuilder out=new StringBuilder();  for (  String val : values) {    if (null == val) {      out.append('^');    } else {      out.append('~');      StrUtils.appendEscapedTextToBuilder(out,val,',');    }    out.append(',');  }  out.deleteCharAt(out.length() - 1);  return out.toString();}  }
class C{  private void refresh(){  if (!isHalfClosed()) {    mRefreshTimestamp=System.currentTimeMillis();  }}  }
class C{  public static PTuple ofInternal(Map<TupleTag<?>,?> valueMap){  return new PTuple(valueMap);}  }
class C{  public boolean isSetMessage(){  return this.message != null;}  }
class C{  public SyncHttpClient(SchemeRegistry schemeRegistry){  super(schemeRegistry);}  }
class C{  public void objectVariable(int pos,int clazz){}  }
class C{  public Model addPluginRepository(Repository pluginRepository){  requireNonNull(pluginRepository,"Required not null plugin repository");  pluginRepositories().add(pluginRepository);  if (root.hasSingleChild("pluginRepositories")) {    root.getSingleChild("pluginRepositories").appendChild(pluginRepository.asXMLElement());    pluginRepository.element=root.getLastChild();  } else {    root.insertChild(createElement("pluginRepositories",pluginRepository.asXMLElement()),beforeAnyOf("build","reporting","profiles").or(inTheEnd()));    pluginRepository.element=root.getSingleChild("pluginRepositories").getFirstChild();  }  return this;}  }
class C{  public SetTriggeringResponse SetTriggering(SetTriggeringRequest req) throws ServiceFaultException, ServiceResultException {  return (SetTriggeringResponse)channel.serviceRequest(req);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:28.469 -0500",hash_original_method="1664CDF216B0331D581B002047F21426",hash_generated_method="BBECBC9C9331443995A0AB76563E077B") public void unlockCanvasAndPost(Canvas canvas){  addTaint(canvas.getTaint());}  }
class C{  public void repaint(Layer layer){  if (bufferedLayer == null || bufferedLayer.isReadyToPaint()) {    super.repaint(layer);  }}  }
class C{  protected UncheckedExecutionException(@Nullable String message){  super(message);}  }
class C{  private Long convertDuration(String durationValue){  Number parsedDuration=getParsedDuration(durationValue);  if (parsedDuration != null) {    double milliseconds=parsedDuration.doubleValue();    Long msLong=Long.valueOf(Math.round(milliseconds));    if (milliseconds > Long.MAX_VALUE || msLong.longValue() % MILLISECONDS_PER_DAY != 0) {      return null;    } else {      return Long.valueOf(Math.round(milliseconds));    }  } else {    return null;  }}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  public Xception(Xception other){  __isset_bitfield=other.__isset_bitfield;  this.errorCode=other.errorCode;  if (other.isSetMessage()) {    this.message=other.message;  }}  }
class C{  @SuppressWarnings("unchecked") @NonNull public <U>Result<U> sameFailure(){  checkState(failed(),"Not a failure");  return (Result<U>)this;}  }
class C{  public void newRowsAdded(TableModelEvent e){  justifyRows(e.getFirstRow(),e.getLastRow() + 1);  fireTableChanged(e);}  }
class C{  public static void createTopLevelXML(ASDocConfiguration configuration,LocalizationManager l10n) throws ConfigurationException, CompilerException {  flex2.compiler.CompilerAPI.setupHeadless(configuration);  flex2.compiler.CompilerAPI.setSkipTimestampCheck(true);  String[] sourceMimeTypes=flex2.tools.WebTierAPI.getSourcePathMimeTypes();  CompilerConfiguration compilerConfig=configuration.getCompilerConfiguration();  if (!compilerConfig.doc()) {    compilerConfig.cfgDoc(null,true);  }  SourcePath sourcePath=new SourcePath(sourceMimeTypes,compilerConfig.allowSourcePathOverlap());  sourcePath.addPathElements(compilerConfig.getSourcePath());  List<VirtualFile>[] array=flex2.compiler.CompilerAPI.getVirtualFileList(configuration.getDocSources(),java.util.Collections.<VirtualFile>emptySet(),new HashSet<String>(Arrays.asList(sourceMimeTypes)),sourcePath.getPaths(),configuration.getExcludeSources());  NameMappings mappings=flex2.compiler.CompilerAPI.getNameMappings(configuration);  Transcoder[] transcoders=flex2.tools.WebTierAPI.getTranscoders(configuration);  flex2.compiler.SubCompiler[] compilers=getCompilers(compilerConfig,mappings,transcoders);  FileSpec fileSpec=new FileSpec(array[0],flex2.tools.WebTierAPI.getFileSpecMimeTypes(),false);  SourceList sourceList=new SourceList(array[1],compilerConfig.getSourcePath(),null,flex2.tools.WebTierAPI.getSourceListMimeTypes(),false);  ResourceContainer resources=new ResourceContainer();  ResourceBundlePath bundlePath=new ResourceBundlePath(configuration.getCompilerConfiguration(),null);  Map<String,Source> classes=new HashMap<String,Source>();  List nsComponents=SwcAPI.setupNamespaceComponents(configuration.getNamespaces(),mappings,sourcePath,sourceList,classes,configuration.getIncludeLookupOnly(),configuration.isIncludeAllForAsdoc());  SwcAPI.setupClasses(configuration.getClasses(),sourcePath,sourceList,classes);  Set<String> includeOnly=null;  if (configuration.excludeDependencies()) {    includeOnly=new HashSet<String>();    for (Iterator iterator=nsComponents.iterator(); iterator.hasNext(); ) {      SwcComponent component=(SwcComponent)iterator.next();      includeOnly.add(component.getClassName());    }    includeOnly.addAll(configuration.getClasses());  }  List excludeClasses=configuration.getExcludeClasses();  Set packages=configuration.getPackagesConfiguration().getPackageNames();  ASDocExtension asdoc=new ASDocExtension(excludeClasses,includeOnly,packages,configuration.restoreBuiltinClasses());  As3Compiler asc=(flex2.compiler.as3.As3Compiler)compilers[0];  asc.addCompilerExtension(asdoc);  asc.addCompilerExtension(new HostComponentExtension(configuration.getCompilerConfiguration().reportMissingRequiredSkinPartsAsWarnings()));  String gendir=(compilerConfig.keepGeneratedActionScript() ? compilerConfig.getGeneratedDirectory() : null);  asc.addCompilerExtension(new BindableExtension(gendir,compilerConfig.getGenerateAbstractSyntaxTree(),true));  asc.addCompilerExtension(new ManagedExtension(gendir,compilerConfig.getGenerateAbstractSyntaxTree(),true));  ((flex2.compiler.mxml.MxmlCompiler)compilers[1]).addImplementationCompilerExtension(asdoc);  if (ThreadLocalToolkit.getBenchmark() != null) {    ThreadLocalToolkit.getBenchmark().benchmark(l10n.getLocalizedTextString(new flex2.tools.Mxmlc.InitialSetup()));  }  CompilerSwcContext swcContext=new CompilerSwcContext();  SwcCache cache=new SwcCache();  cache.setLazyRead(true);  swcContext.load(compilerConfig.getLibraryPath(),compilerConfig.getExternalLibraryPath(),null,mappings,I18nUtils.getTranslationFormat(compilerConfig),cache);  configuration.addExterns(swcContext.getExterns());  flex2.compiler.CompilerAPI.validateCompilationUnits(fileSpec,sourceList,sourcePath,bundlePath,resources,swcContext,null,configuration);  Map licenseMap=configuration.getLicensesConfiguration().getLicenseMap();  CompilerAPI.compile(fileSpec,sourceList,classes.values(),sourcePath,resources,bundlePath,swcContext,mappings,configuration,compilers,new CompcPreLink(null,null,true),licenseMap,new ArrayList<Source>());  asdoc.finish(configuration.restoreBuiltinClasses());  asdoc.saveFile(new File(configuration.getOutput(),"toplevel.xml"));  if (excludeClasses.size() != 0) {    StringBuilder sb=new StringBuilder();    for (Iterator iterator=excludeClasses.iterator(); iterator.hasNext(); ) {      sb.append(' ');      sb.append(iterator.next());    }    ThreadLocalToolkit.log(new NotFound("exclude-classes",sb.toString()));  }  if (packages.size() != 0) {    StringBuilder sb=new StringBuilder();    for (Iterator iterator=packages.iterator(); iterator.hasNext(); ) {      sb.append(' ');      sb.append(iterator.next());    }    ThreadLocalToolkit.log(new NotFound("packages",sb.toString()));  }}  }
class C{  int escape() throws RESyntaxException {  if (pattern.charAt(idx) != '\\') {    internalError();  }  if (idx + 1 == len) {    syntaxError("Escape terminates string");  }  idx+=2;  char escapeChar=pattern.charAt(idx - 1);switch (escapeChar) {case RE.E_BOUND:case RE.E_NBOUND:    return ESC_COMPLEX;case RE.E_ALNUM:case RE.E_NALNUM:case RE.E_SPACE:case RE.E_NSPACE:case RE.E_DIGIT:case RE.E_NDIGIT:  return ESC_CLASS;case 'u':case 'x':{  int hexDigits=(escapeChar == 'u' ? 4 : 2);  int val=0;  for (; idx < len && hexDigits-- > 0; idx++) {    char c=pattern.charAt(idx);    if (c >= '0' && c <= '9') {      val=(val << 4) + c - '0';    } else {      c=Character.toLowerCase(c);      if (c >= 'a' && c <= 'f') {        val=(val << 4) + (c - 'a') + 10;      } else {        syntaxError("Expected " + hexDigits + " hexadecimal digits after \\"+ escapeChar);      }    }  }  return val;}case 't':return '\t';case 'n':return '\n';case 'r':return '\r';case 'f':return '\f';case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':if ((idx < len && Character.isDigit(pattern.charAt(idx))) || escapeChar == '0') {int val=escapeChar - '0';if (idx < len && Character.isDigit(pattern.charAt(idx))) {val=((val << 3) + (pattern.charAt(idx++) - '0'));if (idx < len && Character.isDigit(pattern.charAt(idx))) {val=((val << 3) + (pattern.charAt(idx++) - '0'));}}return val;}return ESC_BACKREF;default :return escapeChar;}}  }
class C{  public static boolean contains(double[] array,double value){  return indexOf(array,value) != -1;}  }
class C{  private static void checkResultSet(VOServiceListResult result,int... indices){  Set<Long> svcKeys=new HashSet<Long>();  for (  VOService svc : result.getServices()) {    svcKeys.add(new Long(svc.getKey()));  }  for (  int index : indices) {    Assert.assertTrue("Expected service at index " + (index) + " to be in the result set",svcKeys.contains(new Long(allServices.get(index).getKey())));  }  System.out.println("Result contains " + resultAsString(result));  Assert.assertEquals("Result contains " + resultAsString(result),indices.length,result.getResultSize());}  }
class C{  public CronThreadPoolExecutor(int corePoolSize,ThreadFactory threadFactory){  super(corePoolSize,threadFactory);  this.cronJobWatchDogs=new ArrayList<>();  this.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);}  }
class C{  public ST createStringTemplateInternally(CompiledST impl){  ST st=createStringTemplate(impl);  if (trackCreationEvents && st.debugState != null) {    st.debugState.newSTEvent=null;  }  return st;}  }
class C{  @Field(11) public Pointer<Byte> bstrVal(){  return this.io.getPointerField(this,11);}  }
class C{  public PhoneNumberFormattingTextWatcher(String countryCode){  if (countryCode == null)   throw new IllegalArgumentException();  mFormatter=PhoneNumberUtil.getInstance().getAsYouTypeFormatter(countryCode);}  }
class C{  public static String separatorsToSystemEscaped(String path){  if (path == null) {    return null;  }  String pathConverted=FilenameUtils.separatorsToSystem(path);  return pathConverted.replace("\\","\\\\");}  }
class C{  public static Path[] files(Path directory) throws IOException {  try (DirectoryStream<Path> stream=Files.newDirectoryStream(directory)){    return Iterators.toArray(stream.iterator(),Path.class);  } }  }
class C{  public NegatedCondition(Condition initCondition){  this.initCondition=initCondition;}  }
class C{  public static IDownloaderService CreateProxy(Messenger msg){  return new Proxy(msg);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public NumericalToHistogram(DataSet dataSet){  this(dataSet,(int)Math.ceil(Math.sqrt(dataSet.getSampleSize())));}  }
class C{  void programmerSelected(){  DefaultComboBoxModel<ProgrammingMode> model=new DefaultComboBoxModel<ProgrammingMode>();  Programmer p=getProgrammer();  if (p != null) {    for (    ProgrammingMode mode : getProgrammer().getSupportedModes()) {      model.addElement(mode);    }  }  log.trace("programmerSelected sets model");  modeBox.setModel(model);  ProgrammingMode mode=(getProgrammer() != null) ? getProgrammer().getMode() : null;  log.trace("programmerSelected sets mode {}",mode);  modeBox.setSelectedItem(mode);}  }
class C{  public static long lastModified(String fileName){  return FilePath.get(fileName).lastModified();}  }
class C{  protected void creatingOMGraphic(OMGraphic newOMG){}  }
class C{  public void clear() throws KeeperException, InterruptedException {  List<String> childNames=zookeeper.getChildren(dir,null,true);  for (  String childName : childNames) {    zookeeper.delete(dir + "/" + childName,-1,true);  }}  }
class C{  public BaseThumbnailSetRequest(String requestUrl,IOneDriveClient client,List<Option> options){  super(requestUrl,client,options,ThumbnailSet.class);}  }
class C{  public Analyzer addAll(String name,Collection<NondominatedPopulation> results){  for (  NondominatedPopulation result : results) {    add(name,result);  }  return this;}  }
class C{  public static String generateTopJumpToQuery(AbstractSqlPagingQueryProvider provider,String topClause){  StringBuilder sql=new StringBuilder();  sql.append("SELECT ").append(topClause).append(" ").append(provider.getSelectClause());  sql.append(" FROM ").append(provider.getFromClause());  sql.append(provider.getWhereClause() == null ? "" : " WHERE " + provider.getWhereClause());  sql.append(" ORDER BY ").append(buildSortClause(provider));  return sql.toString();}  }
class C{  public X509Name(Vector oids,Vector values){  this(oids,values,new X509DefaultEntryConverter());}  }
class C{  public boolean validate(InputNode node) throws Exception {  InputNode from=node.getParent();  String name=node.getName();  while (node != null) {    boolean valid=root.validate(node);    if (valid == false) {      return false;    }    node=from.getNext(name);  }  return true;}  }
class C{  public final AlertDialog initiateScan(){  return initiateScan(ALL_CODE_TYPES,-1);}  }
class C{  public boolean containsKey(String key){  return map.containsKey(key);}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == PropertyAssignment.class) {switch (baseFeatureID) {default :      return -1;  }}if (baseClass == AnnotablePropertyAssignment.class) {switch (baseFeatureID) {case N4JSPackage.ANNOTABLE_PROPERTY_ASSIGNMENT__ANNOTATION_LIST:    return N4JSPackage.PROPERTY_SETTER_DECLARATION__ANNOTATION_LIST;default :  return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public UnsupportedRDFormatException(Throwable cause){  super(cause);}  }
class C{  public void testRandomHugeStrings() throws Exception {  Random random=random();  checkRandomData(random,a,100 * RANDOM_MULTIPLIER,8192);}  }
class C{  static ObjectName createMBean(ManagedResource resource){  return createMBean(resource,lookupManagedBean(resource));}  }
class C{  public void removeOffsets(){  _offsets.clear();}  }
class C{  public static boolean supportsUuid(){  try {    Bukkit.class.getDeclaredMethod("getPlayer",UUID.class);  } catch (  NoSuchMethodException e) {    return false;  }  return new Version().isCompatible("1.7.5");}  }
class C{  public ObdItemTableRenderer(){  setOpaque(true);  setBorder(brdr);}  }
class C{  @Override public boolean removeVertex(V vertex){  if (!delegate.containsVertex(vertex))   return false;  for (  V v : getChildren(vertex)) {    removeVertex(v);    vertex_depths.remove(v);  }  vertex_depths.remove(vertex);  return delegate.removeVertex(vertex);}  }
class C{  public boolean doPostFilter(final Element element){  final ViewElementDefinition viewDef=operation.getView().getElement(element.getGroup());  if (viewDef != null) {    return postFilter(element,viewDef.getPostTransformFilter());  }  return true;}  }
class C{  public EditableOMRangeRings(GraphicAttributes ga){  createGraphic(ga);}  }
class C{  public View createLemmaView(TextAnnotation inputTa) throws IOException {  String[] toks=inputTa.getTokens();  TokenLabelView lemmaView=new TokenLabelView(ViewNames.LEMMA,NAME,inputTa,1.0);  for (int i=0; i < toks.length; ++i) {    String lemma=getLemma(inputTa,i);    Constituent lemmaConstituent=new Constituent(lemma,ViewNames.LEMMA,inputTa,i,i + 1);    lemmaView.addConstituent(lemmaConstituent);  }  inputTa.addView(ViewNames.LEMMA,lemmaView);  return lemmaView;}  }
class C{  public TreeRTGPiceaPungens(){  super();}  }
class C{  @Override public int pollMax(){  return _selectMax;}  }
class C{  public SetBillingSeparateFromShippingAddressCommandImpl(final ShoppingCartCommandRegistry registry){  super(registry);}  }
class C{  public String marshal(JAXBElement<?> element) throws MarshalException {  return internalMarshal(element,true);}  }
class C{  public void assertEqual(float expected,float actual,double maxRelativeError){  TestUtils.assertEqual(expected,actual,maxRelativeError);}  }
class C{  public Provider(XmlPullParser parser) throws XmlPullParserException, IOException {  int eventType;  while ((eventType=parser.next()) != XmlPullParser.END_DOCUMENT) {    String tagName=parser.getName();    if (eventType == XmlPullParser.END_TAG) {      if ("ImageryProvider".equals(tagName)) {        break;      }    }    if (eventType == XmlPullParser.START_TAG) {      if ("Attribution".equals(tagName) && parser.next() == XmlPullParser.TEXT) {        attribution=parser.getText().trim();      }      if ("CoverageArea".equals(tagName)) {        try {          coverageAreas.add(new CoverageArea(parser));        } catch (        Exception x) {        }      }    }  }}  }
class C{  @Deprecated public T withTintSelectedIcon(boolean iconTinted){  return withIconTintingEnabled(iconTinted);}  }
class C{  public RevolvingFileStrategy(final File baseFile,final int initialRotation,final int maxRotations){  m_decimalFormat=new DecimalFormat(PATTERN);  m_baseFile=baseFile;  m_rotation=initialRotation;  m_maxRotations=maxRotations;  if (-1 == m_maxRotations) {    m_maxRotations=Integer.MAX_VALUE;  }  if (-1 == initialRotation) {    m_rotation=calculateInitialRotation();  }  if (m_rotation > m_maxRotations) {    m_rotation=m_maxRotations;  }  if (m_rotation < 0) {    m_rotation=0;  }}  }
class C{  public void addToSpriteGroup(BaseSub sprite){  l_sprite_group.add(sprite);}  }
class C{  protected Activity_Impl(){  super();}  }
class C{  protected void warning(int line,int column,String msg) throws LexerException {  if (warnings.contains(Warning.ERROR))   error(line,column,msg); else   if (listener != null)   listener.handleWarning(source,line,column,msg); else   throw new LexerException("Warning at " + line + ":"+ column+ ": "+ msg);}  }
class C{  public void registerInput(String varName,JavaRDD<String> rddIn,String format,long rlen,long clen,FileFormatProperties props,List<ValueType> schema) throws DMLRuntimeException {  if (!(DMLScript.rtplatform == RUNTIME_PLATFORM.SPARK || DMLScript.rtplatform == RUNTIME_PLATFORM.HYBRID_SPARK)) {    throw new DMLRuntimeException("The registerInput functionality only supported for spark runtime. Please use MLContext(sc) instead of default constructor.");  }  long nnz=-1;  if (_variables == null)   _variables=new LocalVariableMap();  if (_inVarnames == null)   _inVarnames=new ArrayList<String>();  JavaPairRDD<LongWritable,Text> rddText=rddIn.mapToPair(new ConvertStringToLongTextPair());  int blksz=ConfigurationManager.getBlocksize();  MatrixCharacteristics mc=new MatrixCharacteristics(rlen,clen,blksz,blksz,nnz);  FrameObject fo=null;  if (format.equals("csv")) {    CSVFileFormatProperties csvprops=(props != null) ? (CSVFileFormatProperties)props : new CSVFileFormatProperties();    fo=new FrameObject(OptimizerUtils.getUniqueTempFileName(),new MatrixFormatMetaData(mc,OutputInfo.CSVOutputInfo,InputInfo.CSVInputInfo));    fo.setFileFormatProperties(csvprops);  } else   if (format.equals("text")) {    if (rlen == -1 || clen == -1) {      throw new DMLRuntimeException("The metadata is required in registerInput for format:" + format);    }    fo=new FrameObject(null,new MatrixFormatMetaData(mc,OutputInfo.TextCellOutputInfo,InputInfo.TextCellInputInfo));  } else {    throw new DMLRuntimeException("Incorrect format in registerInput: " + format);  }  if (props != null)   fo.setFileFormatProperties(props);  fo.setRDDHandle(new RDDObject(rddText,varName));  fo.setSchema("String");  _variables.put(varName,fo);  _inVarnames.add(varName);  checkIfRegisteringInputAllowed();}  }
class C{  private long reconcileState(){  final Phaser root=this.root;  long s=state;  if (root != this) {    int phase, p;    while ((phase=(int)(root.state >>> PHASE_SHIFT)) != (int)(s >>> PHASE_SHIFT) && !U.compareAndSwapLong(this,STATE,s,s=(((long)phase << PHASE_SHIFT) | ((phase < 0) ? (s & COUNTS_MASK) : (((p=(int)s >>> PARTIES_SHIFT) == 0) ? EMPTY : ((s & PARTIES_MASK) | p))))))     s=state;  }  return s;}  }
class C{  public static List<String> filterTags(List<LanguageRange> priorityList,Collection<String> tags,FilteringMode mode){  return null;}  }
class C{  public final void testMaxLengthWithCharSequenceParameter(){  assertNotNull(Validators.maxLength("foo",1));}  }
class C{  public OperatorWarningHandler(ProcessRendererModel model){  this.model=model;}  }
class C{  public JsonArrayRequest(int method,String url,JSONObject jsonRequest,Listener<JSONArray> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  public AttachmentEntry updateAttachment(AttachmentEntry entry,String newTitle,String newDescription) throws IOException, ServiceException {  entry.setTitle(new PlainTextConstruct(newTitle));  entry.setSummary(new PlainTextConstruct(newDescription));  return entry.update();}  }
class C{  public synchronized void sendOpen(int taskNumber,int numTasks,byte[] serializer){  String open=String.format("OPEN %d %d",taskNumber,numTasks);  byte[] msg=Bytes.concat((open + " ;").getBytes(),serializer);  publisher.send(msg);  opened.set(true);}  }
class C{  private void gaussianExpectation(SemIm semIm){  double beta[][]=new double[numLatent][numLatent];  double fi[][]=new double[numLatent][numLatent];  double lambdaI[][]=new double[numObserved][numObserved];  double lambdaL[][]=new double[numObserved][numLatent];  double tau[][]=new double[numObserved][numObserved];  for (int i=0; i < numLatent; i++) {    for (int j=0; j < numLatent; j++) {      beta[i][j]=0.;      fi[i][j]=0.;    }  }  for (int i=0; i < numObserved; i++) {    for (int j=0; j < numLatent; j++) {      lambdaL[i][j]=0.;    }  }  for (int i=0; i < numObserved; i++) {    for (int j=0; j < numObserved; j++) {      tau[i][j]=0.;      lambdaI[i][j]=0.;    }  }  List parameters=semIm.getFreeParameters();  double paramValues[]=semIm.getFreeParamValues();  for (int i=0; i < parameters.size(); i++) {    Parameter parameter=(Parameter)parameters.get(i);    if (parameter.getType() == ParamType.COEF) {      Node from=parameter.getNodeA();      Node to=parameter.getNodeB();      if (to.getNodeType() == NodeType.MEASURED && from.getNodeType() == NodeType.LATENT) {        int position1=(Integer)latentNames.get(from.getName());        int position2=(Integer)observableNames.get(to.getName());        lambdaL[position2][position1]=paramValues[i];      } else       if (to.getNodeType() == NodeType.MEASURED && from.getNodeType() == NodeType.MEASURED) {        int position1=(Integer)observableNames.get(from.getName());        int position2=(Integer)observableNames.get(to.getName());        lambdaI[position2][position1]=paramValues[i];      } else       if (to.getNodeType() == NodeType.LATENT) {        int position1=(Integer)latentNames.get(from.getName());        int position2=(Integer)latentNames.get(to.getName());        beta[position2][position1]=paramValues[i];      }    } else     if (parameter.getType() == ParamType.VAR) {      Node exo=parameter.getNodeA();      if (exo.getNodeType() == NodeType.ERROR) {        Iterator ci=semIm.getSemPm().getGraph().getChildren(exo).iterator();        exo=(Node)ci.next();      }      if (exo.getNodeType() == NodeType.LATENT) {        fi[((Integer)latentNames.get(exo.getName()))][((Integer)latentNames.get(exo.getName()))]=paramValues[i];      } else {        tau[((Integer)observableNames.get(exo.getName()))][((Integer)observableNames.get(exo.getName()))]=paramValues[i];      }    } else     if (parameter.getType() == ParamType.COVAR) {      Node exo1=parameter.getNodeA();      Node exo2=parameter.getNodeB();      exo1=semIm.getSemPm().getGraph().getVarNode(exo1);      exo2=semIm.getSemPm().getGraph().getVarNode(exo2);      tau[((Integer)observableNames.get(exo1.getName()))][((Integer)observableNames.get(exo2.getName()))]=tau[((Integer)observableNames.get(exo2.getName()))][((Integer)observableNames.get(exo1.getName()))]=paramValues[i];    }  }  double identity[][]=new double[numLatent][numLatent];  for (int i=0; i < numLatent; i++) {    for (int j=0; j < numLatent; j++) {      if (i == j) {        identity[i][j]=1.;      } else {        identity[i][j]=0.;      }    }  }  double identityI[][]=new double[numObserved][numObserved];  for (int i=0; i < numObserved; i++) {    for (int j=0; j < numObserved; j++) {      if (i == j) {        identityI[i][j]=1.;      } else {        identityI[i][j]=0.;      }    }  }  double iMinusB[][]=MatrixUtils.inverse(MatrixUtils.subtract(identity,beta));  double latentImpliedCovar[][]=MatrixUtils.product(iMinusB,MatrixUtils.product(fi,MatrixUtils.transpose(iMinusB)));  double iMinusI[][]=MatrixUtils.inverse(MatrixUtils.subtract(identityI,lambdaI));  double indImpliedCovar[][]=MatrixUtils.product(MatrixUtils.product(iMinusI,MatrixUtils.sum(MatrixUtils.product(MatrixUtils.product(lambdaL,latentImpliedCovar),MatrixUtils.transpose(lambdaL)),tau)),MatrixUtils.transpose(iMinusI));  double loadingLatentCovar[][]=MatrixUtils.product(iMinusI,MatrixUtils.product(lambdaL,latentImpliedCovar));  double smallDelta[][]=MatrixUtils.product(MatrixUtils.inverse(indImpliedCovar),loadingLatentCovar);  double bigDelta[][]=MatrixUtils.subtract(latentImpliedCovar,MatrixUtils.product(MatrixUtils.transpose(loadingLatentCovar),smallDelta));  this.Cyz=MatrixUtils.product(this.Cyy,smallDelta);  this.Czz=MatrixUtils.sum(MatrixUtils.product(MatrixUtils.transpose(smallDelta),Cyz),bigDelta);}  }
class C{  public WrappedByteBuffer putShortAt(int index,short v){  _checkForWriteAt(index,2);  _buf.putShort(index,v);  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:41.449 -0500",hash_original_method="0740E554006F2DFE2DCF335B04D4CE86",hash_generated_method="4DA5AC396128B7762E9943B8E33776F7") public static int charToGsm(char c){  try {    return charToGsm(c,false);  } catch (  EncodeException ex) {    return sCharsToGsmTables[0].get(' ',' ');  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:13.268 -0500",hash_original_method="2827C86400F787FBBD0EA58BB5706D02",hash_generated_method="2934D7504E02E9D936FDCFD6FF0437F1") public boolean isEnumConstant(){  int flags=getFieldModifiers(declaringClass,slot);  return 1 == ((flags & Modifier.ENUM) + 0);}  }
class C{  public void onCreate(Bundle savedInstanceState){  mSlidingMenu=(SlidingMenu)LayoutInflater.from(mActivity).inflate(R.layout.slidingmenumain,null);}  }
class C{  int codeLValue(Environment env,Context ctx,Assembler asm){  return 0;}  }
class C{  public void removeRegion(Region r){  regions.remove(r);}  }
class C{  final void ensureActivitiesVisibleLocked(ActivityRecord starting,int configChanges){  ActivityRecord r=topRunningActivityLocked(null);  if (r != null) {    ensureActivitiesVisibleLocked(r,starting,null,configChanges);  }}  }
class C{  public void clearAuthenticationTokens(){  if (this.appView != null && this.appView.viewClient != null) {    this.appView.viewClient.clearAuthenticationTokens();  }}  }
class C{  private Debug(){}  }
class C{  public boolean shippingApplies(){  GenericValue product=getProduct();  if (product != null) {    return ProductWorker.shippingApplies(product);  } else {    return false;  }}  }
class C{  protected PShape parseChild(XML elem){  String name=elem.getName();  PShapeSVG shape=null;  if (name == null) {  } else   if (name.equals("g")) {    shape=new PShapeSVG(this,elem,true);  } else   if (name.equals("defs")) {    shape=new PShapeSVG(this,elem,true);  } else   if (name.equals("line")) {    shape=new PShapeSVG(this,elem,true);    shape.parseLine();  } else   if (name.equals("circle")) {    shape=new PShapeSVG(this,elem,true);    shape.parseEllipse(true);  } else   if (name.equals("ellipse")) {    shape=new PShapeSVG(this,elem,true);    shape.parseEllipse(false);  } else   if (name.equals("rect")) {    shape=new PShapeSVG(this,elem,true);    shape.parseRect();  } else   if (name.equals("polygon")) {    shape=new PShapeSVG(this,elem,true);    shape.parsePoly(true);  } else   if (name.equals("polyline")) {    shape=new PShapeSVG(this,elem,true);    shape.parsePoly(false);  } else   if (name.equals("path")) {    shape=new PShapeSVG(this,elem,true);    shape.parsePath();  } else   if (name.equals("radialGradient")) {    return new RadialGradient(this,elem);  } else   if (name.equals("linearGradient")) {    return new LinearGradient(this,elem);  } else   if (name.equals("font")) {    return new Font(this,elem);  } else   if (name.equals("metadata")) {    return null;  } else   if (name.equals("text")) {    PGraphics.showWarning("Text and fonts in SVG files " + "are not currently supported, " + "convert text to outlines instead.");  } else   if (name.equals("filter")) {    PGraphics.showWarning("Filters are not supported.");  } else   if (name.equals("mask")) {    PGraphics.showWarning("Masks are not supported.");  } else   if (name.equals("pattern")) {    PGraphics.showWarning("Patterns are not supported.");  } else   if (name.equals("stop")) {  } else   if (name.equals("sodipodi:namedview")) {  } else {    PGraphics.showWarning("Ignoring <" + name + "> tag.");  }  return shape;}  }
class C{  public OrderedStruct(OrderedStruct other){  __isset_bitfield=other.__isset_bitfield;  this.id=other.id;}  }
class C{  @Deprecated @Override public void toXML(final StringBuilder builder,final ConfigVerification errors){  throw new UnsupportedOperationException();}  }
class C{  public CLIOutputResponse revert(RevertRequest request) throws IOException, SubversionException, UnauthorizedException {  final File projectPath=new File(request.getProjectPath());  final List<String> cliArgs=defaultArgs();  addOption(cliArgs,"--depth",request.getDepth());  cliArgs.add("revert");  final CommandLineResult result=runCommand(null,cliArgs,projectPath,addWorkingCopyPathIfNecessary(request.getPaths()));  return DtoFactory.getInstance().createDto(CLIOutputResponse.class).withCommand(result.getCommandLine().toString()).withOutput(result.getStdout()).withErrOutput(result.getStderr());}  }
class C{  private void resetTraceLog(){  m_traceLog=null;  m_trace.setEnabled(false);}  }
class C{  public DateEnd(Date endDate){  super(endDate);}  }
class C{  public GuardedObject(Object object,Guard guard){  this.guard=guard;  this.object=object;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:59.589 -0500",hash_original_method="3A5282E15CEE22EBD4B3059F6543301A",hash_generated_method="A41902CC088B7F31C09F291B7A79AD58") @Deprecated public static Uri addToMyContactsGroup(ContentResolver resolver,long personId){  long groupId=tryGetMyContactsGroupId(resolver);  if (groupId == 0) {    throw new IllegalStateException("Failed to find the My Contacts group");  }  return addToGroup(resolver,personId,groupId);}  }
class C{  public static void printInstances(Compute compute,String projectId) throws IOException {  System.out.println("================== Listing Compute Engine Instances ==================");  Compute.Instances.List instances=compute.instances().list(projectId,zoneName);  InstanceList list=instances.execute();  if (list.getItems() == null) {    System.out.println("No instances found. Sign in to the Google APIs Console and create " + "an instance at: code.google.com/apis/console");  } else {    for (    Instance instance : list.getItems()) {      System.out.println(instance.toPrettyString());    }  }}  }
class C{  public RequestCreator rotate(float degrees){  data.rotate(degrees);  return this;}  }
class C{  public static boolean containsAllRPSourceVolumes(DbClient dbClient,ProtectionSet protectionSet,Collection<URI> volumeIDs){  List<URI> sourceVolumeIDs=new ArrayList<URI>();  _log.info("Inspecting protection set: " + protectionSet.getLabel() + " to see if request contains all source volumes");  for (  String volumeIDStr : protectionSet.getVolumes()) {    Volume volume=dbClient.queryObject(Volume.class,URI.create(volumeIDStr));    if (volume != null) {      _log.debug("Looking at volume: " + volume.getLabel());      if (!volume.getInactive() && volume.getPersonality().equals(Volume.PersonalityTypes.SOURCE.toString())) {        _log.debug("Adding volume: " + volume.getLabel());        sourceVolumeIDs.add(volume.getId());      }    }  }  sourceVolumeIDs.removeAll(volumeIDs);  if (!sourceVolumeIDs.isEmpty()) {    _log.info("Found that the volumes requested do not contain all source volumes in the protection set, namely: " + Joiner.on(',').join(sourceVolumeIDs));    return false;  }  _log.info("Found that all of the source volumes in the protection set are in the request.");  return true;}  }
class C{  private void push(final double number,final int type){  if (stkPtr > 99 || stkTypePtr > 99) {    if (LogWriter.isRunningFromIDE) {      throw new RuntimeException("Stack or stackType overflow");    }  } else {    stack[stkPtr]=number;    stackType[stkTypePtr]=type;  }  stkPtr++;  stkTypePtr++;}  }
class C{  void adjustTime(){  if (!hasUntil()) {    return;  }  if (untilTime.isSTD() || untilTime.isWall()) {    untilInMillis-=gmtOffset;  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  int read(byte[] buffer,int offset,int length) throws IOException {  int readLength=0;  while (length > 0) {    while (_chunkLength <= 0) {      if (_isLastChunk)       return readLength == 0 ? -1 : readLength;      int code=read();switch (code) {case 'b':        _isLastChunk=false;      _chunkLength=(read() << 8) + read();    break;case 'B':  _isLastChunk=true;_chunkLength=(read() << 8) + read();break;default :throw expect("byte[]",code);}}int sublen=_chunkLength;if (length < sublen) sublen=length;sublen=_is.read(buffer,offset,sublen);offset+=sublen;readLength+=sublen;length-=sublen;_chunkLength-=sublen;}return readLength;}  }
class C{  public boolean isHard(){  return mode == Mode.hard;}  }
class C{  public ContextSensitiveImportRewriteContext(CompilationUnit compilationUnit,int position,ImportRewrite importRewrite){  fCompilationUnit=compilationUnit;  fPosition=position;  fImportRewrite=importRewrite;  fDeclarationsInScope=null;  fImportedNames=null;}  }
class C{  public String substring(int start){  return substring(start,lcText.length - start);}  }
class C{  public static void main(final String[] args){  new Cg2Sdf().mainExit(args);}  }
class C{  public IndicesAliasesRequestBuilder addAlias(String[] indices,String alias,Map<String,Object> filter){  request.addAlias(alias,filter,indices);  return this;}  }
class C{  public void drawItem(Graphics2D g2,XYItemRendererState state,Rectangle2D dataArea,PlotRenderingInfo info,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,CrosshairState crosshairState,int pass){  if (dataset instanceof OHLCVwapDataset) {    EntityCollection entities=null;    if (info != null) {      entities=info.getOwner().getEntityCollection();    }    CandleDataset candleDataset=(CandleDataset)dataset;    CandleItem candle=(CandleItem)candleDataset.getSeries(series).getDataItem(item);    double startX=candle.getPeriod().getFirstMillisecond();    if (Double.isNaN(startX)) {      return;    }    double endX=candle.getPeriod().getLastMillisecond();    if (Double.isNaN(endX)) {      return;    }    if (startX <= endX) {      if (!domainAxis.getRange().intersects(startX,endX)) {        return;      }    } else {      if (!domainAxis.getRange().intersects(endX,startX)) {        return;      }    }    RectangleEdge location=plot.getDomainAxisEdge();    double translatedStartX=domainAxis.valueToJava2D(startX,dataArea,location);    double translatedEndX=domainAxis.valueToJava2D(endX,dataArea,location);    double translatedWidth=Math.max(1,Math.abs(translatedEndX - translatedStartX));    if (getMargin() > 0.0) {      double cut=translatedWidth * getMargin();      translatedWidth=translatedWidth - cut;    }    double x=candleDataset.getXValue(series,item);    double yHigh=candleDataset.getHighValue(series,item);    double yLow=candleDataset.getLowValue(series,item);    double yOpen=candleDataset.getOpenValue(series,item);    double yClose=candleDataset.getCloseValue(series,item);    RectangleEdge domainEdge=plot.getDomainAxisEdge();    double xx=domainAxis.valueToJava2D(x,dataArea,domainEdge);    RectangleEdge edge=plot.getRangeAxisEdge();    double yyHigh=rangeAxis.valueToJava2D(yHigh,dataArea,edge);    double yyLow=rangeAxis.valueToJava2D(yLow,dataArea,edge);    double yyOpen=rangeAxis.valueToJava2D(yOpen,dataArea,edge);    double yyClose=rangeAxis.valueToJava2D(yClose,dataArea,edge);    Paint outlinePaint=null;    outlinePaint=getItemOutlinePaint(series,item);    g2.setStroke(getItemStroke(series,item));    g2.setPaint(outlinePaint);    double yyMaxOpenClose=Math.max(yyOpen,yyClose);    double yyMinOpenClose=Math.min(yyOpen,yyClose);    double maxOpenClose=Math.max(yOpen,yClose);    double minOpenClose=Math.min(yOpen,yClose);    Shape body=null;    boolean highlight=highlight(series,item);    if (yHigh > maxOpenClose) {      if (highlight) {        body=new Rectangle2D.Double(xx - (translatedWidth / 2),yyHigh - 10,translatedWidth,(yyMaxOpenClose - yyHigh) + 10);        g2.setPaint(Color.YELLOW);        g2.fill(body);        g2.draw(body);      }    }    if (yHigh > maxOpenClose) {      if (nightMode) {        if (yClose > yOpen) {          g2.setPaint(upPaint);        } else {          g2.setPaint(downPaint);        }      } else {        g2.setPaint(Color.black);      }      g2.draw(new Line2D.Double(xx,yyHigh,xx,yyMaxOpenClose));    }    if (yLow < minOpenClose) {      if (highlight) {        body=new Rectangle2D.Double(xx - (translatedWidth / 2),yyMinOpenClose,translatedWidth,(yyLow - yyMinOpenClose) + 10);        g2.setPaint(Color.YELLOW);        g2.fill(body);        g2.draw(body);      }      if (yLow < minOpenClose) {        if (nightMode) {          if (yClose > yOpen) {            g2.setPaint(upPaint);          } else {            g2.setPaint(downPaint);          }        } else {          g2.setPaint(Color.BLACK);        }        g2.draw(new Line2D.Double(xx,yyLow,xx,yyMinOpenClose));      }    }    body=new Rectangle2D.Double(xx - (translatedWidth / 2),yyMinOpenClose,translatedWidth,yyMaxOpenClose - yyMinOpenClose);    if (nightMode) {      g2.setPaint(Color.white);    } else {      if (yClose > yOpen) {        g2.setPaint(upPaint);      } else {        g2.setPaint(downPaint);      }    }    g2.fill(body);    g2.draw(body);    if (nightMode) {      if (yClose > yOpen) {        g2.setPaint(upPaint);      } else {        g2.setPaint(downPaint);      }    } else {      g2.setPaint(outlinePaint);    }    g2.draw(body);    if (entities != null) {      String tip=null;      XYToolTipGenerator generator=getToolTipGenerator(series,item);      if (generator != null) {        tip=generator.generateToolTip(dataset,series,item);      }      XYItemEntity entity=new XYItemEntity(body,dataset,series,item,tip,null);      entities.add(entity);    }    double x1=dataset.getXValue(series,item);    double y1=dataset.getYValue(series,item);    double transX1=domainAxis.valueToJava2D(x1,dataArea,location);    double transY1=rangeAxis.valueToJava2D(y1,dataArea,plot.getRangeAxisEdge());    int domainAxisIndex=plot.getDomainAxisIndex(domainAxis);    int rangeAxisIndex=plot.getRangeAxisIndex(rangeAxis);    updateCrosshairValues(crosshairState,x1,y1,domainAxisIndex,rangeAxisIndex,transX1,transY1,plot.getOrientation());  }}  }
class C{  public Float(double value){}  }
class C{  public void projectionChanged(ProjectionEvent e){  super.projectionChanged(e);  logger.info("calling helper - projection changed.");synchronized (this) {    if (helper == null)     setHelper();    helper.projectionChanged(e);  }}  }
class C{  public void ExportGtfsFiles(String foldername) throws IOException {  BufferedWriter wRoutes=new BufferedWriter(new FileWriter(foldername + "/routes.txt"));  BufferedWriter wStopTimes=new BufferedWriter(new FileWriter(foldername + "/stop_times.txt"));  BufferedWriter wTrips=new BufferedWriter(new FileWriter(foldername + "/trips.txt"));  BufferedWriter wFrequencies=new BufferedWriter(new FileWriter(foldername + "/frequencies.txt"));  wRoutes.write("route_id,agency_id,route_short_name,route_long_name,route_desc,route_type,route_url,route_color,route_text_color");  wStopTimes.write("trip_id,arrival_time,departure_time,stop_id,stop_sequence,stop_headsign,pickup_type,drop_off_type");  wTrips.write("route_id,service_id,trip_id,trip_headsign,direction_id,shape_id");  wFrequencies.write("trip_id,start_time,end_time,headway_secs,exact_times");  int currentRoute=0;  int currentTrip=0;  HashSet<String> routesExported=new HashSet<String>();  HashMap<String,HashSet<String>> routeDirectionsMap=new HashMap<String,HashSet<String>>();  HashMap<String,Integer> routeCurrentDirectionMap=new HashMap<String,Integer>();  for (  ScheduledRoute R : this.routes) {    String routeId=(currentRoute < 100) ? (currentRoute < 10) ? ("00" + currentRoute) : ("0" + currentRoute) : (currentRoute + "");    String sname=R.routename.substring(0,2);    if (!routesExported.contains(R.routename)) {      routesExported.add(R.routename);      currentRoute++;      String lname=R.routename.substring(2);      int type=R.mode.equals("train") ? 2 : 3;      wRoutes.write("\n" + routeId + ",,"+ sname+ ","+ lname+ ",,"+ type+ ",,");      routeDirectionsMap.put(R.routename,new HashSet<String>());      routeDirectionsMap.get(R.routename).add(R.direction);      routeCurrentDirectionMap.put(R.routename,new Integer(0));    }{      String tripId=sname + R.direction + "_"+ R.branch;      if (!routeDirectionsMap.get(R.routename).contains(R.direction)) {        routeDirectionsMap.get(R.routename).add(R.direction);        routeCurrentDirectionMap.put(R.routename,routeCurrentDirectionMap.get(R.routename) + 1);      }      wTrips.write("\n" + routeId + ",1,"+ tripId+ ",,"+ routeCurrentDirectionMap.get(R.routename)+ ",");{        int numberOfDepartures=R.stops.get(0).getTimes().size();        if (numberOfDepartures == 1) {          for (int i=0; i < R.stops.size(); i++) {            ScheduledStop S=R.stops.get(i);            if (S.isVIA)             continue;            wStopTimes.write("\n" + tripId + S.getTimes().get(0).getFirst()+ ","+ S.getTimes().get(0).getSecond()+ ","+ S.getId()+ ","+ (i + 1)+ ",0,0,");          }        } else {          for (int i=0; i < R.stops.size(); i++) {            ScheduledStop S=R.stops.get(i);            if (S.isVIA)             continue;            wStopTimes.write("\n" + tripId + S.getAvgArrTime()+ ","+ S.getAvgDepTime()+ ","+ S.getId()+ ","+ (i + 1)+ ",0,0,");          }          ArrayList<Tuple<Double,Double>> departures=R.stops.get(0).getTimes();          double startTime=departures.get(0).getSecond();          double prevDep=departures.get(1).getSecond();          int prevHdwy=(int)(prevDep - startTime);          double dep=0;          for (int i=2; i < departures.size(); i++) {            dep=departures.get(i).getSecond();            int hdwy=(int)(dep - prevDep);            if (hdwy != prevHdwy) {              wFrequencies.write("\n" + tripId + ","+ startTime+ ","+ dep+ ","+ prevHdwy+ ",0");              startTime=dep;              prevHdwy=hdwy;            }            prevDep=dep;          }          wFrequencies.write("\n" + tripId + ","+ startTime+ ","+ dep+ ","+ prevHdwy+ ",0");        }      }    }    System.out.println("Completed " + R.id);  }  wRoutes.close();  wTrips.close();  wStopTimes.close();  wFrequencies.close();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  Node textNode;  String textName;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  testAddr=(Element)elementList.item(0);  textNode=testAddr.getFirstChild();  textName=textNode.getNodeName();  assertEquals("nodeTextNodeNameAssert1","#text",textName);}  }
class C{  public static ObjectNamesResponse create(DistributionManager dm,InternalDistributedMember recipient){  ObjectNamesResponse m=new ObjectNamesResponse();  m.setRecipient(recipient);  return m;}  }
class C{  public static void saveBamIndex(final File bamFile,final File bamIndex) throws IOException, UnindexableDataException {  final SequenceIndexContainer indexs=createBamIndex(bamFile);  saveBamIndex(indexs,bamIndex);}  }
class C{  EmulatedFieldsForLoading(ObjectStreamClass streamClass){  this.streamClass=streamClass;  emulatedFields=new EmulatedFields(streamClass.getLoadFields(),streamClass.fields());}  }
class C{  @Override public Automaton<LR1Item,LR1State> createAutomaton() throws GeneratorException {  return new LALR1CPAutomatonFactory().createAutomaton(this,grammarInfo);}  }
class C{  public Builder removeField(String fieldName){  fields.remove(fieldName);  return this;}  }
class C{  protected ReservedLiteralImpl(){  super();}  }
class C{  public GoToAction(PDFDestination dest){  super("GoTo");  this.dest=dest;}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public List<Object> readVectorObject(){  throw new RuntimeException("Vector objects not supported with AMF0");}  }
class C{  private void verifyReservedBit3(WebSocketFrame frame) throws WebSocketException {  if (frame.getRsv3() == false) {    return;  }  throw new WebSocketException(WebSocketError.UNEXPECTED_RESERVED_BIT,"The RSV3 bit of a frame is set unexpectedly.");}  }
class C{  public void playTogether(Collection<Animator> items){  if (items != null && items.size() > 0) {    mNeedsSort=true;    Builder builder=null;    for (    Animator anim : items) {      if (builder == null) {        builder=play(anim);      } else {        builder.with(anim);      }    }  }}  }
class C{  private static int selectColorFormat(MediaCodecInfo codecInfo,String mimeType){  MediaCodecInfo.CodecCapabilities capabilities=codecInfo.getCapabilitiesForType(mimeType);  for (int i=0; i < capabilities.colorFormats.length; i++) {    int colorFormat=capabilities.colorFormats[i];    if (isRecognizedFormat(colorFormat)) {      return colorFormat;    }  }  Log.e(TAG,"couldn't find a good color format for " + codecInfo.getName() + " / "+ mimeType);  return 0;}  }
class C{  private static String delimit(String s,char c){  int i=s.indexOf(c);  while (i != -1) {    if (i == 0 || s.charAt(i - 1) != '\\') {      s=s.substring(0,i) + "\\" + s.substring(i);      i=s.indexOf(c,i + 2);    } else {      i=s.indexOf(c,i + 1);    }  }  return s;}  }
class C{  public Class<? extends XtextResourceSet> bindXtextResourceSet(){  return SynchronizedXtextResourceSet.class;}  }
class C{  public StringRequest(int method,String url,Listener<String> listener,ErrorListener errorListener){  super(method,url,errorListener);  mListener=listener;}  }
class C{  public static String roleValueToString(List<ObjectName> roleValue) throws IllegalArgumentException {  if (roleValue == null) {    String excMsg="Invalid parameter";    throw new IllegalArgumentException(excMsg);  }  StringBuilder result=new StringBuilder();  for (  ObjectName currObjName : roleValue) {    if (result.length() > 0)     result.append("\n");    result.append(currObjName.toString());  }  return result.toString();}  }
class C{  synchronized public void addDTM(DTM dtm,int id){  addDTM(dtm,id,0);}  }
class C{  public boolean isRequired(){  return required;}  }
class C{  @Override public double logDensity(double value){  updateWidth();  double[] sums=new double[2];  sums[0]=Double.NaN;  sums[1]=Double.NaN;  runningSum(m_TM.tailMap(value,true).entrySet(),value,sums);  runningSum(m_TM.headMap(value,false).descendingMap().entrySet(),value,sums);  return sums[0] - Math.log(m_SumOfWeights);}  }
class C{  public Object[] parse(String string) throws ParseException {  ParsePosition position=new ParsePosition(0);  Object[] result=parse(string,position);  if (position.getIndex() == 0) {    throw new ParseException("Parse failure",position.getErrorIndex());  }  return result;}  }
class C{  @Override protected void rehash(int newCapacity){  int oldCapacity=_set.length;  K[] oldKeys=(K[])_set;  int[] oldVals=_values;  _set=new Object[newCapacity];  _values=new int[newCapacity];  for (int i=oldCapacity; i-- > 0; ) {    if (oldKeys[i] != null && oldKeys[i] != REMOVED) {      K o=oldKeys[i];      int index=insertionIndex(o);      if (index < 0) {        throwObjectContractViolation(_set[-index - 1],o);      }      _set[index]=o;      _values[index]=oldVals[i];    }  }}  }
class C{  private double fastUpperBound(int i){  int pre=i;  int post=i;  while (post - pre < k) {    int pre_level=(pre - 1 >= 0) ? pf[pre - 1].level : -2;    int post_level=(post < capital_n - 1) ? pf[post].level : -2;    if (post_level >= pre_level) {      post++;    } else {      pre--;    }  }  return k * maxDistLevel(pf[i].id,minRegLevel(pre,post));}  }
class C{  public Boolean isExtensionSession(){  return extensionSession;}  }
class C{  @Override protected void onProgressUpdate(String... strings){  super.onProgressUpdate(strings);  statusText.setText(strings[0]);}  }
class C{  public static Vector2d interpolateTriangle(double v0X,double v0Y,double f0X,double f0Y,double v1X,double v1Y,double f1X,double f1Y,double v2X,double v2Y,double f2X,double f2Y,double x,double y,Vector2d dest){  double v12Y=v1Y - v2Y;  double v21X=v2X - v1X;  double v02X=v0X - v2X;  double yv2Y=y - v2Y;  double xv2X=x - v2X;  double v02Y=v0Y - v2Y;  double invDen=1.0 / (v12Y * v02X + v21X * v02Y);  double l1=(v12Y * xv2X + v21X * yv2Y) * invDen;  double l2=(v02X * yv2Y - v02Y * xv2X) * invDen;  double l3=1.0 - l1 - l2;  dest.x=l1 * f0X + l2 * f1X + l3 * f2X;  dest.y=l1 * f0Y + l2 * f1Y + l3 * f2Y;  return dest;}  }
class C{  public final void transform(Vector3f normal){  float x, y;  x=m00 * normal.x + m01 * normal.y + m02 * normal.z;  y=m10 * normal.x + m11 * normal.y + m12 * normal.z;  normal.z=m20 * normal.x + m21 * normal.y + m22 * normal.z;  normal.x=x;  normal.y=y;}  }
class C{  void saveWindowState(){  int state=FRAME.getExtendedState();  if (state == Frame.NORMAL) {    Dimension dim=GUIMediator.getAppSize();    if ((dim.height > 100) && (dim.width > 100)) {      Point loc=GUIMediator.getAppLocation();      ApplicationSettings.APP_WIDTH.setValue(dim.width);      ApplicationSettings.APP_HEIGHT.setValue(dim.height);      ApplicationSettings.WINDOW_X.setValue(loc.x);      ApplicationSettings.WINDOW_Y.setValue(loc.y);      ApplicationSettings.MAXIMIZE_WINDOW.setValue(false);    }  } else   if ((state & Frame.MAXIMIZED_BOTH) == Frame.MAXIMIZED_BOTH) {    ApplicationSettings.MAXIMIZE_WINDOW.setValue(true);    if (lastState != null && lastState.time == System.currentTimeMillis()) {      ApplicationSettings.WINDOW_X.setValue(lastState.x);      ApplicationSettings.WINDOW_Y.setValue(lastState.y);      lastState=null;    }  }}  }
class C{  public void actionPerformed(ActionEvent e){  log.config("Action=" + e.getActionCommand());  if (e.getActionCommand().equals(ConfirmPanel.A_REFRESH)) {    Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR);    loadBankAccount();    dialog.tableChanged(null);    Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR);  }}  }
class C{  public TrustedAppEntry(String fakePackageName,int simpleNameId,int iconId){  this.packageName=fakePackageName;  this.simpleName=MainActivity.this.getString(simpleNameId);  Drawable icon=MainActivity.this.getResources().getDrawable(iconId);  icon.setBounds(0,0,iconSize,iconSize);  this.icon=icon;}  }
class C{  public static SpeechletResponse newTellResponse(final OutputSpeech outputSpeech,final Card card){  if (card == null) {    throw new IllegalArgumentException("Card cannot be null");  }  SpeechletResponse response=newTellResponse(outputSpeech);  response.setCard(card);  return response;}  }
class C{  public void clearScreen(){  final DynamicVectorRenderer currentDisplay=fileAccess.getDynamicRenderer();  currentDisplay.writeCustom(DynamicVectorRenderer.FLUSH,null);  pages.refreshDisplay();}  }
class C{  public List initializers(){  return this.initializers;}  }
class C{  public boolean equals(Version o){  return o.preRelease == preRelease && !(o.major != major || o.minor != minor || o.build != build) && (!preRelease || o.prereleaseType == prereleaseType && o.prebuild == prebuild);}  }
class C{  public void removeSelection(){}  }
class C{  public JSONArray put(boolean value){  this.put(value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  @ExceptionHandler(MultiErrorException.class) @ResponseStatus(value=HttpStatus.BAD_REQUEST) public Map<String,Object> handleMultiErrorException(MultiErrorException ex){  List<FieldError> errors=ex.getErrors();  log.warn("MultiErrorException: " + errors.toString());  return LemonUtil.mapOf("exception","MultiErrorException","message",ex.getMessage(),"errors",errors);}  }
class C{  public static JSONObject rowToJSONObject(JSONArray names,JSONTokener x) throws JSONException {  JSONArray ja=rowToJSONArray(x);  return ja != null ? ja.toJSONObject(names) : null;}  }
class C{  public IncompatibleRolesException(String message,Object[] params){  super(message,params);}  }
class C{  public static boolean isPrimitiveWrapper(DictionaryTypes2.ModelDesign.DataType dt){  if (isPrimitive(dt))   return false;  if (!dt.getFields().isEmpty())   return false;  DictionaryTypes2.ModelDesign.DataType superType=dt.getSuperType();  if (superType == null)   return false;  if (isPrimitive(superType))   return true;  return isPrimitiveWrapper(superType);}  }
class C{  protected int engineUpdate(byte[] input,int inputOffset,int inputLen,byte[] output,int outputOffset) throws ShortBufferException {  return core.update(input,inputOffset,inputLen,output,outputOffset);}  }
class C{  public static SimbrainJTable createTable(SimbrainDataTable dataModel){  SimbrainJTable table=new SimbrainJTable(dataModel);  table.initJTable();  table.setHasChangedSinceLastSave(false);  return table;}  }
class C{  public void testUrlWithUnderscoreInParameter(){  setParameterToInitMockMethod("http://myurl.com/?my_Page",TestSolution.PASSED);  SeoRule01081 test=new SeoRule01081();  test.setProcessResultDataService(mockProcessResultDataService);  test.setTest(mockTest);  ProcessResult processResult=test.processImpl(mockSspHandler);  assertEquals(mockDefiniteResult,processResult);}  }
class C{  public void endTest(Test test){  for (  TestListener each : cloneListeners()) {    each.endTest(test);  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.INLINE_COMMENT___INLINE_COMMENT_1:    return INLINE_COMMENT_1_EDEFAULT == null ? inlineComment_1 != null : !INLINE_COMMENT_1_EDEFAULT.equals(inlineComment_1);}return super.eIsSet(featureID);}  }
class C{  public int readCPI4(){  assert opcode == Bytecodes.INVOKEDYNAMIC;  return Bytes.beS4(code,curBCI + 1);}  }
class C{  @Override public void finalizeCheckpoint(){  for (  Message message : messages) {    try {      message.acknowledge();      Instant currentMessageTimestamp=new Instant(message.getJMSTimestamp());      if (currentMessageTimestamp.isAfter(oldestPendingTimestamp)) {        oldestPendingTimestamp=currentMessageTimestamp;      }    } catch (    Exception e) {    }  }  messages.clear();}  }
class C{  public void appendOpenCiteTag(){  text.append("<cite>");}  }
class C{  static boolean isOctetStringValid(String value,int maxLength){  if (value == null)   return true;  if (value.length() > maxLength)   return false;  return true;}  }
class C{  public LUDecomposition(Matrix A){  LU=A.getArrayCopy();  m=A.getRowDimension();  n=A.getColumnDimension();  piv=new int[m];  for (int i=0; i < m; i++) {    piv[i]=i;  }  pivsign=1;  double[] LUrowi;  double[] LUcolj=new double[m];  for (int j=0; j < n; j++) {    for (int i=0; i < m; i++) {      LUcolj[i]=LU[i][j];    }    for (int i=0; i < m; i++) {      LUrowi=LU[i];      int kmax=Math.min(i,j);      double s=0.0;      for (int k=0; k < kmax; k++) {        s+=LUrowi[k] * LUcolj[k];      }      LUrowi[j]=LUcolj[i]-=s;    }    int p=j;    for (int i=j + 1; i < m; i++) {      if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {        p=i;      }    }    if (p != j) {      for (int k=0; k < n; k++) {        double t=LU[p][k];        LU[p][k]=LU[j][k];        LU[j][k]=t;      }      int k=piv[p];      piv[p]=piv[j];      piv[j]=k;      pivsign=-pivsign;    }    if (j < m & LU[j][j] != 0.0) {      for (int i=j + 1; i < m; i++) {        LU[i][j]/=LU[j][j];      }    }  }}  }
class C{  public void imprimirCompresion(){  System.out.print("  Compresion: ");switch (code) {case 1:    System.out.println("None");  break;case 2:System.out.println("Grupo 3-1D");break;case 3:System.out.println("Grupo 3-2D");break;case 4:System.out.println("Grupo 4");break;case 5:System.out.println("LZW");break;case 7:System.out.println("JPG-TTN2");break;case 32946:System.out.println("Deflate");break;default :System.out.println("No registrada");break;}}  }
class C{  @Override public Properties trackUserSignUpForAccount(){  SegmentAnalyticsEvent aEvent=new SegmentAnalyticsEvent();  aEvent.properties.putValue(Keys.NAME,Values.USER_NO_ACCOUNT);  aEvent.setAppNameContext();  tracker.track(Events.SIGN_UP,aEvent.properties);  return aEvent.properties;}  }
class C{  protected void initAttrs(AttributeSet attrs,int defStyle){  TypedArray a=getContext().getTheme().obtainStyledAttributes(attrs,R.styleable.ChangeLogListView,defStyle,defStyle);  try {    mRowLayoutId=a.getResourceId(R.styleable.ChangeLogListView_rowLayoutId,mRowLayoutId);    mRowHeaderLayoutId=a.getResourceId(R.styleable.ChangeLogListView_rowHeaderLayoutId,mRowHeaderLayoutId);    mChangeLogFileResourceId=a.getResourceId(R.styleable.ChangeLogListView_changeLogFileResourceId,mChangeLogFileResourceId);  }  finally {    a.recycle();  }}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  @Override public boolean equals(Object object){  if (this == object) {    return true;  }  if (object instanceof Set) {    Set<?> s=(Set<?>)object;    try {      return size() == s.size() && containsAll(s);    } catch (    NullPointerException ignored) {      return false;    }catch (    ClassCastException ignored) {      return false;    }  }  return false;}  }
class C{  public boolean isBeingEdited(){  return newContents != null;}  }
class C{  private DocLine[] loadLines(MAllocationHdr alloc){  ArrayList<DocLine> list=new ArrayList<DocLine>();  MAllocationLine[] lines=alloc.getLines(false);  for (int i=0; i < lines.length; i++) {    MAllocationLine line=lines[i];    DocLine_Allocation docLine=new DocLine_Allocation(line,this);    if (line.getC_Payment_ID() != 0) {      MPayment payment=new MPayment(getCtx(),line.getC_Payment_ID(),getTrxName());      int C_ConversionType_ID=payment.getC_ConversionType_ID();      docLine.setC_ConversionType_ID(C_ConversionType_ID);    }    log.fine(docLine.toString());    list.add(docLine);  }  DocLine[] dls=new DocLine[list.size()];  list.toArray(dls);  return dls;}  }
class C{  public void updateSeries(CandleSeries source,int skip,boolean newBar){  if (source == null) {    throw new IllegalArgumentException("Null source (CandleSeries).");  }  if (getLength() == null || getLength() < 1) {    throw new IllegalArgumentException("ATR period must be greater than 0.");  }  if (source.getItemCount() > skip) {    CandleItem candleItem=(CandleItem)source.getDataItem(skip);    double highLessLow=candleItem.getHigh() - candleItem.getLow();    if (this.getRollingCandle()) {      highLessLow=source.getRollingCandle().getHigh() - source.getRollingCandle().getLow();    }    double absHighLessPrevClose=0;    double absLowLessPrevClose=0;    if (source.getItemCount() > 1) {      CandleItem prevCandleItem=(CandleItem)source.getDataItem(skip - 1);      absHighLessPrevClose=Math.abs(candleItem.getHigh() - prevCandleItem.getClose());      absLowLessPrevClose=Math.abs(candleItem.getLow() - prevCandleItem.getClose());      double tR=Math.max(highLessLow,Math.max(absHighLessPrevClose,absLowLessPrevClose));      if (newBar) {        sum=sum + tR;        prevTR=tR;        prevATR=currATR;      } else {        sum=sum - prevTR + tR;      }      if (skip >= getLength() - 1) {        if (currATR == -1) {          currATR=sum / getLength();        } else {          currATR=((prevATR * (getLength() - 1)) + tR) / getLength();        }        if (newBar) {          AverageTrueRangeItem dataItem=new AverageTrueRangeItem(candleItem.getPeriod(),new BigDecimal(currATR));          this.add(dataItem,false);        } else {          AverageTrueRangeItem dataItem=(AverageTrueRangeItem)this.getDataItem(this.getItemCount() - 1);          dataItem.setAverageTrueRange(currATR);        }      }    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected LinkedList<Diff> diff_bisect(String text1,String text2,long deadline){  int text1_length=text1.length();  int text2_length=text2.length();  int max_d=(text1_length + text2_length + 1) / 2;  int v_offset=max_d;  int v_length=2 * max_d;  int[] v1=new int[v_length];  int[] v2=new int[v_length];  for (int x=0; x < v_length; x++) {    v1[x]=-1;    v2[x]=-1;  }  v1[v_offset + 1]=0;  v2[v_offset + 1]=0;  int delta=text1_length - text2_length;  boolean front=(delta % 2 != 0);  int k1start=0;  int k1end=0;  int k2start=0;  int k2end=0;  for (int d=0; d < max_d; d++) {    if (System.currentTimeMillis() > deadline) {      break;    }    for (int k1=-d + k1start; k1 <= d - k1end; k1+=2) {      int k1_offset=v_offset + k1;      int x1;      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {        x1=v1[k1_offset + 1];      } else {        x1=v1[k1_offset - 1] + 1;      }      int y1=x1 - k1;      while (x1 < text1_length && y1 < text2_length && text1.charAt(x1) == text2.charAt(y1)) {        x1++;        y1++;      }      v1[k1_offset]=x1;      if (x1 > text1_length) {        k1end+=2;      } else       if (y1 > text2_length) {        k1start+=2;      } else       if (front) {        int k2_offset=v_offset + delta - k1;        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {          int x2=text1_length - v2[k2_offset];          if (x1 >= x2) {            return diff_bisectSplit(text1,text2,x1,y1,deadline);          }        }      }    }    for (int k2=-d + k2start; k2 <= d - k2end; k2+=2) {      int k2_offset=v_offset + k2;      int x2;      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {        x2=v2[k2_offset + 1];      } else {        x2=v2[k2_offset - 1] + 1;      }      int y2=x2 - k2;      while (x2 < text1_length && y2 < text2_length && text1.charAt(text1_length - x2 - 1) == text2.charAt(text2_length - y2 - 1)) {        x2++;        y2++;      }      v2[k2_offset]=x2;      if (x2 > text1_length) {        k2end+=2;      } else       if (y2 > text2_length) {        k2start+=2;      } else       if (!front) {        int k1_offset=v_offset + delta - k2;        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {          int x1=v1[k1_offset];          int y1=v_offset + x1 - k1_offset;          x2=text1_length - x2;          if (x1 >= x2) {            return diff_bisectSplit(text1,text2,x1,y1,deadline);          }        }      }    }  }  LinkedList<Diff> diffs=new LinkedList<Diff>();  diffs.add(new Diff(Operation.DELETE,text1));  diffs.add(new Diff(Operation.INSERT,text2));  return diffs;}  }
class C{  public Object clone(){  return this;}  }
class C{  public void unsetPriority(){  issetBitfield=EncodingUtils.clearBit(issetBitfield,PRIORITY_ISSET_ID);}  }
class C{  public void configure(){  if (getHost() != null && !getHost().trim().isEmpty()) {    getLogger().debug("host : " + getHost(),this.getClass().getName());    getLogger().debug("port : " + getPort(),this.getClass().getName());    getLogger().debug("excludeHosts : " + getExcludeHosts(),this.getClass().getName());    getLogger().debug("user : " + getUser(),this.getClass().getName());    Properties sysprops=System.getProperties();    String portString=Integer.toString(getPort());    sysprops.put("http.proxyHost",getHost());    sysprops.put("http.proxyPort",portString);    sysprops.put("https.proxyHost",getHost());    sysprops.put("https.proxyPort",portString);    sysprops.put("ftp.proxyHost",getHost());    sysprops.put("ftp.proxyPort",portString);    if (getExcludeHosts() != null) {      sysprops.put("http.nonProxyHosts",getExcludeHosts());      sysprops.put("https.nonProxyHosts",getExcludeHosts());      sysprops.put("ftp.nonProxyHosts",getExcludeHosts());    }    if (getUser() != null) {      sysprops.put("http.proxyUser",getUser());      sysprops.put("http.proxyPassword",getPassword());      Authenticator.setDefault(new ProxyAuthenticator(getUser(),getPassword()));    }  }}  }
class C{  boolean merge(final ClassWriter cw,final Frame frame,final int edge){  boolean changed=false;  int i, s, dim, kind, t;  int nLocal=inputLocals.length;  int nStack=inputStack.length;  if (frame.inputLocals == null) {    frame.inputLocals=new int[nLocal];    changed=true;  }  for (i=0; i < nLocal; ++i) {    if (outputLocals != null && i < outputLocals.length) {      s=outputLocals[i];      if (s == 0) {        t=inputLocals[i];      } else {        dim=s & DIM;        kind=s & KIND;        if (kind == BASE) {          t=s;        } else {          if (kind == LOCAL) {            t=dim + inputLocals[s & VALUE];          } else {            t=dim + inputStack[nStack - (s & VALUE)];          }          if ((s & TOP_IF_LONG_OR_DOUBLE) != 0 && (t == LONG || t == DOUBLE)) {            t=TOP;          }        }      }    } else {      t=inputLocals[i];    }    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputLocals,i);  }  if (edge > 0) {    for (i=0; i < nLocal; ++i) {      t=inputLocals[i];      changed|=merge(cw,t,frame.inputLocals,i);    }    if (frame.inputStack == null) {      frame.inputStack=new int[1];      changed=true;    }    changed|=merge(cw,edge,frame.inputStack,0);    return changed;  }  int nInputStack=inputStack.length + owner.inputStackTop;  if (frame.inputStack == null) {    frame.inputStack=new int[nInputStack + outputStackTop];    changed=true;  }  for (i=0; i < nInputStack; ++i) {    t=inputStack[i];    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputStack,i);  }  for (i=0; i < outputStackTop; ++i) {    s=outputStack[i];    dim=s & DIM;    kind=s & KIND;    if (kind == BASE) {      t=s;    } else {      if (kind == LOCAL) {        t=dim + inputLocals[s & VALUE];      } else {        t=dim + inputStack[nStack - (s & VALUE)];      }      if ((s & TOP_IF_LONG_OR_DOUBLE) != 0 && (t == LONG || t == DOUBLE)) {        t=TOP;      }    }    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputStack,nInputStack + i);  }  return changed;}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  protected void drawScrollBars(DrawContext dc){  if (this.showVerticalScrollbar) {    int x1=this.innerBounds.width - this.scrollBarSize;    int y1=1;    if (this.showHorizontalScrollbar)     y1+=this.scrollBarSize;    Rectangle scrollBarBounds=new Rectangle(x1,y1,this.scrollBarSize,this.contentBounds.height + 1);    this.verticalScrollBar.setBounds(scrollBarBounds);    this.verticalScrollBar.render(dc);  }  if (this.showHorizontalScrollbar) {    int x1=1;    int y1=1;    int width=this.innerBounds.width - 1;    if (this.showVerticalScrollbar)     width-=this.scrollBarSize;    Rectangle scrollBarBounds=new Rectangle(x1,y1,width,this.scrollBarSize);    this.horizontalScrollBar.setBounds(scrollBarBounds);    this.horizontalScrollBar.render(dc);  }}  }
class C{  @Override public boolean equals(Object other){  return sameClassAs(other) && equalsTo(getClass().cast(other));}  }
class C{  public String toShortString(){  return getLocalCandidate().toShortString() + " -> " + getRemoteCandidate().toShortString()+ " ("+ getParentComponent().toShortString()+ ")";}  }
class C{  @Override public boolean supportsCoreSQLGrammar(){  debugCodeCall("supportsCoreSQLGrammar");  return true;}  }
class C{  private void proposeGetterDelegate(IJavaProject project,IMethod method,int invocationOffset,int indentationUnits,boolean isStatic,List<ICompletionProposal> proposals,int numCharsFilled,int numCharsToOverwrite) throws JavaModelException {  String methodName=method.getElementName();  String[] parameterNames=method.getParameterNames();  String expression="return " + createJsMethodInvocationExpression(methodName,isStatic,parameterNames);  String code=createJsniBlock(project,expression,indentationUnits);  proposals.add(createProposal(method.getFlags(),code,invocationOffset,numCharsFilled,numCharsToOverwrite,expression));}  }
class C{  private void typeParametersRest(List<? extends TypeParameterTree> typeParameters,Indent plusIndent){  builder.open(plusIndent);  builder.breakOp();  builder.open(ZERO);  boolean first=true;  for (  TypeParameterTree typeParameter : typeParameters) {    if (!first) {      token(",");      builder.breakOp(" ");    }    scan(typeParameter,null);    first=false;  }  token(">");  builder.close();  builder.close();}  }
class C{  public static OptionalParameter.Byte newSarTotalSegments(byte value){  return new OptionalParameter.Byte(Tag.SAR_TOTAL_SEGMENTS,value);}  }
class C{  public void render(URL templateUrl,Writer writer) throws SurveyWrapperException {  String responseId=this.getThisResponseId();  GenericValue survey=this.getSurvey();  List<GenericValue> surveyQuestionAndAppls=this.getSurveyQuestionAndAppls();  Map<String,Object> results=this.getResults(surveyQuestionAndAppls);  Map<String,Object> currentAnswers=null;  if (responseId != null && canUpdate()) {    currentAnswers=this.getResponseAnswers(responseId);  } else {    currentAnswers=this.getResponseAnswers(null);  }  Map<String,Object> sqaaWithColIdListByMultiRespId=FastMap.newInstance();  for (  GenericValue surveyQuestionAndAppl : surveyQuestionAndAppls) {    String surveyMultiRespColId=surveyQuestionAndAppl.getString("surveyMultiRespColId");    if (UtilValidate.isNotEmpty(surveyMultiRespColId)) {      String surveyMultiRespId=surveyQuestionAndAppl.getString("surveyMultiRespId");      UtilMisc.addToListInMap(surveyQuestionAndAppl,sqaaWithColIdListByMultiRespId,surveyMultiRespId);    }  }  if (templateContext == null) {    templateContext=FastMap.newInstance();  }  templateContext.put("partyId",partyId);  templateContext.put("survey",survey);  templateContext.put("surveyResults",results);  templateContext.put("surveyQuestionAndAppls",surveyQuestionAndAppls);  templateContext.put("sqaaWithColIdListByMultiRespId",sqaaWithColIdListByMultiRespId);  templateContext.put("alreadyShownSqaaPkWithColId",FastSet.newInstance());  templateContext.put("surveyAnswers",currentAnswers);  templateContext.put("surveyResponseId",responseId);  templateContext.put("sequenceSort",UtilMisc.toList("sequenceNum"));  templateContext.put("additionalFields",passThru);  templateContext.put("defaultValues",defaultValues);  templateContext.put("delegator",this.delegator);  templateContext.put("locale",Locale.getDefault());  Template template=this.getTemplate(templateUrl);  try {    FreeMarkerWorker.renderTemplate(template,templateContext,writer);  } catch (  TemplateException e) {    Debug.logError(e,"Error rendering Survey with template at [" + templateUrl.toExternalForm() + "]",module);  }catch (  IOException e) {    Debug.logError(e,"Error rendering Survey with template at [" + templateUrl.toExternalForm() + "]",module);  }}  }
class C{  public String toValue(){  return value;}  }
class C{  public OutputStreamWriter(OutputStream out,CharsetEncoder enc){  super(out);  if (enc == null)   throw new NullPointerException("charset encoder");  se=StreamEncoder.forOutputStreamWriter(out,this,enc);}  }
class C{  @Nullable public String expandMacrosInString(String str,boolean firstQueueExpand,DataContext dataContext) throws Macro.ExecutionCancelledException {  return expandMacroSet(str,firstQueueExpand,dataContext,getMacros().iterator());}  }
class C{  private LinkBuilder(int type){  this.type=type;}  }
class C{  public void addElement(double x){  if (capacity() == 0) {    setCapacity(10);  }  if (size() == capacity()) {    setCapacity(2 * capacity());  }  V[size()]=x;  setSize(size() + 1);}  }
class C{  public boolean isTimeToRenew(){  return creationTime + (lifetime * 3) / 4 < System.currentTimeMillis();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public TTFFont(String baseFont,PDFObject fontObj,PDFFontDescriptor descriptor) throws IOException {  super(baseFont,fontObj,descriptor);  String fontName=descriptor.getFontName();  PDFObject ttfObj=descriptor.getFontFile2();  if (ttfObj != null) {    font=TrueTypeFont.parseFont(ttfObj.getStreamBuffer());    HeadTable head=(HeadTable)font.getTable("head");    unitsPerEm=head.getUnitsPerEm();  } else {    font=null;  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private PathDataEvaluator(){}  }
class C{  public String toJson(Object body){  for (int i=1; ; i++) {    try {      return this.compact.toJson(body);    } catch (    IllegalStateException e) {      handleIllegalStateException(e,i);    }  }}  }
class C{  public static Union createUnion(Model model,ElementList elements){  Union union=model.createResource(SP.Union).as(Union.class);  union.addProperty(SP.elements,elements);  return union;}  }
class C{  private void updatePage(int selectedPage){  updateFab(selectedPage);  updateSnackbar(selectedPage);}  }
class C{  public void testBuildTravelTimeDataObjects(){  setupTest();  String f=(new File(getInputDirectory())).getParent() + "/linkstats.txt";  MyLinkStatsReader m=new MyLinkStatsReader(f);  Map<Id<Link>,TravelTimeData> map1=m.buildTravelTimeDataObject(scenario,"min");  Map<Id<Link>,TravelTimeData> map2=m.buildTravelTimeDataObject(scenario,"avg");  Map<Id<Link>,TravelTimeData> map3=m.buildTravelTimeDataObject(scenario,"max");  assertEquals("Wrong entry for link 2; 6-7; min.","360.44",String.format("%3.2f",map1.get(Id.create("2",Link.class)).getTravelTime(6,EPSILON)));  assertEquals("Wrong entry for link 2; 6-7; avg.","360.65",String.format("%3.2f",map2.get(Id.create("2",Link.class)).getTravelTime(6,EPSILON)));  assertEquals("Wrong entry for link 2; 6-7; max.","360.70",String.format("%3.2f",map3.get(Id.create("2",Link.class)).getTravelTime(6,EPSILON)));  assertEquals("Wrong entry for link 22; 9-10; max.","1259.90",String.format("%4.2f",map3.get(Id.create("22",Link.class)).getTravelTime(9,EPSILON)));  assertEquals("Wrong entry for link 22; 10-11; min.","1260.00",String.format("%4.2f",map1.get(Id.create("22",Link.class)).getTravelTime(10,EPSILON)));  assertEquals("Wrong entry for link 12; 6-7; min.","183.60",String.format("%3.2f",map1.get(Id.create("12",Link.class)).getTravelTime(6,EPSILON)));  assertEquals("Wrong entry for link 12; 6-7; avg.","185.43",String.format("%3.2f",map2.get(Id.create("12",Link.class)).getTravelTime(6,EPSILON)));  assertEquals("Wrong entry for link 12; 6-7; max.","187.00",String.format("%3.2f",map3.get(Id.create("12",Link.class)).getTravelTime(6,EPSILON)));}  }
class C{  protected void sendMomentaryFunctionGroup1(){  if (tc.getCommandStation().getCommandStationType() == 0x10) {    if (log.isDebugEnabled()) {      log.debug("Command station does not support Momentary functions");    }    return;  }  XNetMessage msg=XNetMessage.getFunctionGroup1SetMomMsg(this.getDccAddress(),f0Momentary,f1Momentary,f2Momentary,f3Momentary,f4Momentary);  queueMessage(msg,THROTTLEFUNCSENT);}  }
class C{  public static String encodeBody(final byte[] buf){  char[] b=new char[buf.length];  int blen=buf.length;  for (int iter=0; iter < blen; iter++) {    b[iter]=(char)buf[iter];  }  return encode(b,"+");}  }
class C{  public static Throwable shouldFail(Closure code){  boolean failed=false;  Throwable th=null;  try {    code.call();  } catch (  GroovyRuntimeException gre) {    failed=true;    th=ScriptBytecodeAdapter.unwrap(gre);  }catch (  Throwable e) {    failed=true;    th=e;  }  assertTrue("Closure " + code + " should have failed",failed);  return th;}  }
class C{  public static double evaluate(DoubleList values,double percentile){  double[] doubles=values.toArray();  Arrays.sort(doubles);  return evaluateForDoubles(doubles,percentile);}  }
class C{  private static VertexOrder computeActiveBuildConfigOrder(final Iterable<ExternalProject> projects){  final SortedSet<IBuildConfiguration> allAccessibleBuildConfigs=new TreeSet<>(new BuildConfigurationComparator());  final ExternalProject[] allProjects=Iterables.toArray(projects,ExternalProject.class);  final List<IBuildConfiguration[]> edges=new ArrayList<>(allProjects.length);  for (int i=0; i < allProjects.length; i++) {    final ExternalProject project=allProjects[i];    if (!project.isAccessible()) {      continue;    }    if (!allAccessibleBuildConfigs.contains(project.unsafeGetActiveBuildConfig())) {      allAccessibleBuildConfigs.add(project.unsafeGetActiveBuildConfig());      final Stack<IBuildConfiguration> stack=new Stack<>();      stack.push(project.unsafeGetActiveBuildConfig());      while (!stack.isEmpty()) {        final IBuildConfiguration buildConfiguration=stack.pop();        final Project subProject=(Project)buildConfiguration.getProject();        final IBuildConfiguration[] refs=subProject.internalGetReferencedBuildConfigs(buildConfiguration.getName(),false);        for (int j=0; j < refs.length; j++) {          final IBuildConfiguration ref=refs[j];          if (ref.equals(buildConfiguration)) {            continue;          }          edges.add(new IBuildConfiguration[]{buildConfiguration,ref});          if (allAccessibleBuildConfigs.contains(ref)) {            continue;          }          allAccessibleBuildConfigs.add(ref);          stack.push(ref);        }      }    }  }  return ComputeProjectOrder.computeVertexOrder(allAccessibleBuildConfigs,edges);}  }
class C{  public synchronized void writeToSUT(byte b){  localBuffer.add(b);}  }
class C{  public int randomIndexChoice(List<Integer> weights){  int result=0, index;  double maxKey=0.0;  double u, key;  int weight;  for (ListIterator<Integer> it=weights.listIterator(); it.hasNext(); ) {    index=it.nextIndex();    weight=it.next();    u=random.nextDouble();    key=Math.pow(u,(1.0 / weight));    if (key > maxKey) {      maxKey=key;      result=index;    }  }  return result;}  }
class C{  public SecurityPermission(String name,String actions){  super(name,actions);}  }
class C{  private final boolean checkNullNextTrailIndex(){  if (m_nextIndex_ <= 0) {    m_nextCodepoint_+=TRAIL_SURROGATE_COUNT_ - 1;    int nextLead=UTF16.getLeadSurrogate(m_nextCodepoint_);    int leadBlock=m_trie_.m_index_[nextLead >> Trie.INDEX_STAGE_1_SHIFT_] << Trie.INDEX_STAGE_2_SHIFT_;    if (m_trie_.m_dataManipulate_ == null) {      throw new NullPointerException("The field DataManipulate in this Trie is null");    }    m_nextIndex_=m_trie_.m_dataManipulate_.getFoldingOffset(m_trie_.getValue(leadBlock + (nextLead & Trie.INDEX_STAGE_3_MASK_)));    m_nextIndex_--;    m_nextBlockIndex_=DATA_BLOCK_LENGTH_;    return true;  }  return false;}  }
class C{  public void addHeading(String name){  c.gridwidth=GridBagConstraints.REMAINDER;  addLabel(name).setFont(this.headingFont);}  }
class C{  @Override public void onCreate(){  super.onCreate();  mAudioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);  mMediaNotificationManager=new MediaNotificationManager(this);  mMediaPlayerState=MediaPlayerState.STATE_IDLE;  mPlaybackState=new PlaybackState.Builder().setState(PlaybackState.STATE_NONE,0,1.0f).build();  mMediaSession=new MediaSession(this,PodcastPlayerService.class.getSimpleName());  mMediaSession.setMediaButtonReceiver(PendingIntentHelper.getMediaButtonReceiverIntent(this));  mMediaSession.setCallback(new MediaSessionCallback());  mMediaSession.setFlags(MediaSession.FLAG_HANDLES_MEDIA_BUTTONS | MediaSession.FLAG_HANDLES_TRANSPORT_CONTROLS);  mMediaSession.setActive(true);  mMediaSession.setPlaybackState(mPlaybackState);  mHeadsetReceiver=new HeadsetReceiver();  mWifiLock=((WifiManager)getSystemService(Context.WIFI_SERVICE)).createWifiLock(WifiManager.WIFI_MODE_FULL,"uAmp_lock");  mEpisodeDownloadedReceiver=new EpisodeDownloadedReceiver();  LocalBroadcastManager.getInstance(this).registerReceiver(mEpisodeDownloadedReceiver,new IntentFilter(BroadcastHelper.INTENT_EPISODE_DOWNLOADED));}  }
class C{  public Enumeration<V> elements(){  return new ValueIterator();}  }
class C{  public boolean drawImage(Image img,int x,int y,ImageObserver observer){  return mGraphics.drawImage(img,x,y,observer);}  }
class C{  public void flush(){  LinkedList<Pair<Runnable,Integer>> queue=new LinkedList<Pair<Runnable,Integer>>();synchronized (mQueue) {    queue.addAll(mQueue);    mQueue.clear();  }  for (  Pair<Runnable,Integer> p : queue) {    p.first.run();  }}  }
class C{  @Override public void doFilterInternal(HttpServletRequest request,HttpServletResponse response,FilterChain chain) throws IOException, ServletException {  UrlPathHelper urlPathHelper=new UrlPathHelper();  String path=urlPathHelper.getPathWithinApplication(request);  boolean pathExcluded=PatternMatchUtils.simpleMatch(excludes,path);  boolean pathIncluded=PatternMatchUtils.simpleMatch(includes,path);  if (pathIncluded && !pathExcluded) {    if (logger.isDebugEnabled()) {      logger.debug("Forwarding to static resource: " + path);    }    if (path.contains(".html")) {      response.setContentType("text/html");    }    RequestDispatcher rd=getServletContext().getRequestDispatcher(path);    rd.include(request,response);    return;  }  if (servletName != null) {    RequestDispatcher rd=getServletContext().getNamedDispatcher(servletName);    rd.forward(request,response);    return;  }  chain.doFilter(request,response);}  }
class C{  private int checkFlow(Map<String,Object> rows){  int state=0;  boolean dl_type=false;  boolean nw_proto=false;  boolean nw_layer=false;  boolean icmp6_type=false;  boolean icmp6_code=false;  boolean nd_target=false;  boolean nd_sll=false;  boolean nd_tll=false;  boolean ip6=false;  boolean ip4=false;  int eth_type=-1;  int nw_protocol=-1;  int icmp_type=-1;  if (rows.containsKey(StaticFlowEntryPusher.COLUMN_DL_TYPE)) {    if (((String)rows.get(StaticFlowEntryPusher.COLUMN_DL_TYPE)).startsWith("0x")) {      eth_type=Integer.parseInt(((String)rows.get(StaticFlowEntryPusher.COLUMN_DL_TYPE)).replaceFirst("0x",""),16);      dl_type=true;    } else {      eth_type=Integer.parseInt((String)rows.get(StaticFlowEntryPusher.COLUMN_DL_TYPE));      dl_type=true;    }    if (eth_type == 0x86dd) {      ip6=true;      dl_type=true;    } else     if (eth_type == 0x800 || eth_type == 0x806 || eth_type == 0x8035) {      ip4=true;      dl_type=true;    }  }  if (rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_DST) || rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_SRC)) {    nw_layer=true;    ip4=true;  }  if (rows.containsKey(StaticFlowEntryPusher.COLUMN_ICMP_CODE) || rows.containsKey(StaticFlowEntryPusher.COLUMN_ICMP_TYPE) || rows.containsKey(StaticFlowEntryPusher.COLUMN_ARP_DHA)|| rows.containsKey(StaticFlowEntryPusher.COLUMN_ARP_SHA)|| rows.containsKey(StaticFlowEntryPusher.COLUMN_ARP_SPA)|| rows.containsKey(StaticFlowEntryPusher.COLUMN_ARP_DPA)|| rows.containsKey(StaticFlowEntryPusher.COLUMN_ARP_OPCODE)) {    ip4=true;  }  if (rows.containsKey(StaticFlowEntryPusher.COLUMN_IPV6_FLOW_LABEL) || rows.containsKey(StaticFlowEntryPusher.COLUMN_NW6_SRC) || rows.containsKey(StaticFlowEntryPusher.COLUMN_NW6_DST)) {    nw_layer=true;    ip6=true;  }  if (rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_PROTO)) {    nw_proto=true;    if (((String)rows.get(StaticFlowEntryPusher.COLUMN_NW_PROTO)).startsWith("0x")) {      nw_protocol=Integer.parseInt(((String)rows.get(StaticFlowEntryPusher.COLUMN_NW_PROTO)).replaceFirst("0x",""),16);    } else {      nw_protocol=Integer.parseInt((String)rows.get(StaticFlowEntryPusher.COLUMN_NW_PROTO));    }  }  if (rows.containsKey(StaticFlowEntryPusher.COLUMN_ICMP6_CODE)) {    icmp6_code=true;    ip6=true;  }  if (rows.containsKey(StaticFlowEntryPusher.COLUMN_ICMP6_TYPE)) {    icmp6_type=true;    ip6=true;    if (((String)rows.get(StaticFlowEntryPusher.COLUMN_ICMP6_TYPE)).startsWith("0x")) {      icmp_type=Integer.parseInt(((String)rows.get(StaticFlowEntryPusher.COLUMN_ICMP6_TYPE)).replaceFirst("0x",""),16);    } else {      icmp_type=Integer.parseInt((String)rows.get(StaticFlowEntryPusher.COLUMN_ICMP6_TYPE));    }  }  if (rows.containsKey(StaticFlowEntryPusher.COLUMN_ND_SLL)) {    nd_sll=true;    ip6=true;  }  if (rows.containsKey(StaticFlowEntryPusher.COLUMN_ND_TLL)) {    nd_tll=true;    ip6=true;  }  if (rows.containsKey(StaticFlowEntryPusher.COLUMN_ND_TARGET)) {    nd_target=true;    ip6=true;  }  if (nw_layer == true || nw_proto == true) {    if (dl_type == true) {      if (!(ip4 == true || ip6 == true)) {        state=2;        return state;      }    } else {      state=1;      return state;    }  }  if (icmp6_type == true || icmp6_code == true) {    if (nw_proto == true) {      if (nw_protocol != 0x3A) {        state=4;        return state;      }    } else {      state=3;      return state;    }  }  if (nd_sll == true || nd_tll == true || nd_target == true) {    if (icmp6_type == true) {      if (nd_target == true) {        if (!(icmp_type == 135 || icmp_type == 136)) {          state=6;          return state;        }      } else       if (nd_tll == true) {        if (!(icmp_type == 136)) {          state=6;          return state;        }      } else       if (nd_sll == true) {        if (!(icmp_type == 135)) {          state=6;          return state;        }      }    } else {      state=5;      return state;    }  }  int result=checkActions(rows);  if ((ip4 == true && ip6 == true) || (result == -1) || (result == 1 && ip6 == true)|| (result == 2 && ip4 == true)) {    state=7;    return state;  }  if (rows.containsKey(StaticFlowEntryPusher.COLUMN_SWITCH)) {    try {      DatapathId.of((String)rows.get(StaticFlowEntryPusher.COLUMN_SWITCH));    } catch (    Exception e) {      state=9;    }  } else {    state=8;  }  return state;}  }
class C{  public void testBug18258() throws Exception {  String bogusDatabaseName="abcdefghijklmnopqrstuvwxyz";  this.conn.getMetaData().getTables(bogusDatabaseName,"%","%",new String[]{"TABLE","VIEW"});  this.conn.getMetaData().getColumns(bogusDatabaseName,"%","%","%");  this.conn.getMetaData().getProcedures(bogusDatabaseName,"%","%");}  }
class C{  int readCorner3(int numRows,int numColumns){  int currentByte=0;  if (readModule(numRows - 1,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 3,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 3,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  public SynapseGroup connectNeuronGroups(NeuronGroup source,NeuronGroup target,String sourceLabel,String targetLabel,ConnectNeurons connection){  SynapseGroup newGroup=SynapseGroup.createSynapseGroup(source,target,connection);  addSynapseGroup(newGroup);  setSynapseGroupLabel(source,target,newGroup,sourceLabel,targetLabel);  return newGroup;}  }
class C{  @Benchmark public long test2_UsingForEachAndMapEntry() throws IOException {  long i=0;  for (  Map.Entry<Integer,Integer> pair : map.entrySet()) {    i+=pair.getKey() + pair.getValue();  }  return i;}  }
class C{  static public void reportMissingClass(ClassNotFoundException e){  requireNonNull(e,"argument is null");  String missing=AbstractBugReporter.getMissingClassName(e);  if (skipReportingMissingClass(missing)) {    return;  }  if (!analyzingApplicationClass()) {    return;  }  RepositoryLookupFailureCallback lookupFailureCallback=getCurrentLookupFailureCallback();  if (lookupFailureCallback != null) {    lookupFailureCallback.reportMissingClass(e);  }}  }
class C{  public void deselect(final int index){  deselect(index,true);}  }
class C{  private void startContentSynchronizations(List<SyncOperation> filesToSyncContents,OwnCloudClient client) throws OperationCancelledException {  Log_OC.v(TAG,"Starting content synchronization... ");  RemoteOperationResult contentsResult=null;  for (  SyncOperation op : filesToSyncContents) {    if (mCancellationRequested.get()) {      throw new OperationCancelledException();    }    contentsResult=op.execute(getStorageManager(),mContext);    if (!contentsResult.isSuccess()) {      if (contentsResult.getCode() == ResultCode.SYNC_CONFLICT) {        mConflictsFound++;      } else {        mFailsInFileSyncsFound++;        if (contentsResult.getException() != null) {          Log_OC.e(TAG,"Error while synchronizing file : " + contentsResult.getLogMessage(),contentsResult.getException());        } else {          Log_OC.e(TAG,"Error while synchronizing file : " + contentsResult.getLogMessage());        }      }    }  }}  }
class C{  private static boolean equalsHandlesNulls(Object a,Object b){  return (a == null) ? (b == null) : a.equals(b);}  }
class C{  public final DoubleGrid2D lowerBound(final double toNoLowerThanThisMuch){  double[] fieldx=null;  final int width=this.width;  final int height=this.height;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++)     if (fieldx[y] < toNoLowerThanThisMuch)     fieldx[y]=toNoLowerThanThisMuch;  }  return this;}  }
class C{  public String sslKeyStorePassword(){  return reader.getString(SSL_KEY_STORE_PASSWORD,null);}  }
class C{  public void configChanged(){  setLevel(cfg.getLogLevel());  useChildLogging=cfg.getLogFile() != null && !cfg.getLogFile().equals(new File("")) && cfg.getLogFileSizeLimit() != 0;  if (useChildLogging()) {    childLogPattern=getLogPattern(this.cfg.getLogFile().getName());    logDir=getParentFile(this.cfg.getLogFile());    mainLogId=calcNextMainId(logDir,true);  }  if (started) {    if (useChildLogging()) {      if (mainLog) {        rollLog();      }    } else {      switchLogs(this.cfg.getLogFile(),true);    }  }}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getParameter_();}  }
class C{  public static String loadTestResource(@SuppressWarnings("rawtypes") Class clazz,String file) throws Throwable {  URL url=clazz.getResource(file);  Path resPath=Paths.get(url.toURI());  return new String(Files.readAllBytes(resPath),"UTF8");}  }
class C{  public void addf2e(int f,int e){  f2e[f].add(e);}  }
class C{  public double evaluateClustering(Database db,Relation<? extends NumberVector> rel,Clustering<?> c){  List<? extends Cluster<?>> clusters=c.getAllClusters();  int ignorednoise=0, withinPairs=0;  for (  Cluster<?> cluster : clusters) {    if ((cluster.size() <= 1 || cluster.isNoise())) {switch (noiseHandling) {case IGNORE_NOISE:        ignorednoise+=cluster.size();      continue;case TREAT_NOISE_AS_SINGLETONS:    continue;case MERGE_NOISE:  break;}}withinPairs+=(cluster.size() * (cluster.size() - 1)) >>> 1;if (withinPairs < 0) {throw new AbortException("Integer overflow - clusters too large to compute pairwise distances.");}}double[] withinDistances=computeWithinDistances(rel,clusters,withinPairs);int[] withinTies=new int[withinDistances.length];countTies(withinDistances,withinTies);long concordantPairs=0, discordantPairs=0, betweenPairs=0;for (int i=0; i < clusters.size(); i++) {Cluster<?> ocluster1=clusters.get(i);if ((ocluster1.size() <= 1 || ocluster1.isNoise()) && noiseHandling.equals(NoiseHandling.IGNORE_NOISE)) {continue;}for (int j=i + 1; j < clusters.size(); j++) {Cluster<?> ocluster2=clusters.get(j);if ((ocluster2.size() <= 1 || ocluster2.isNoise()) && noiseHandling.equals(NoiseHandling.IGNORE_NOISE)) {continue;}betweenPairs+=ocluster1.size() * ocluster2.size();for (DBIDIter oit1=ocluster1.getIDs().iter(); oit1.valid(); oit1.advance()) {NumberVector obj=rel.get(oit1);for (DBIDIter oit2=ocluster2.getIDs().iter(); oit2.valid(); oit2.advance()) {  double dist=distanceFunction.distance(obj,rel.get(oit2));  int p=Arrays.binarySearch(withinDistances,dist);  if (p >= 0) {    while (p > 0 && withinDistances[p - 1] >= dist) {      --p;    }    concordantPairs+=p;    discordantPairs+=withinDistances.length - p - withinTies[p];    continue;  }  p=-p - 1;  concordantPairs+=p;  discordantPairs+=withinDistances.length - p;}}}}final long t=((rel.size() - ignorednoise) * (long)(rel.size() - ignorednoise - 1)) >>> 1;final long tt=(t * (t - 1)) >>> 1;final double gamma=(concordantPairs - discordantPairs) / (double)(concordantPairs + discordantPairs);final double tau=computeTau(concordantPairs,discordantPairs,tt,withinDistances.length,betweenPairs);if (LOG.isStatistics()) {LOG.statistics(new StringStatistic(key + ".pbm.noise-handling",noiseHandling.toString()));if (ignorednoise > 0) {LOG.statistics(new LongStatistic(key + ".pbm.ignored",ignorednoise));}LOG.statistics(new DoubleStatistic(key + ".gamma",gamma));LOG.statistics(new DoubleStatistic(key + ".tau",tau));}EvaluationResult ev=EvaluationResult.findOrCreate(db.getHierarchy(),c,"Internal Clustering Evaluation","internal evaluation");MeasurementGroup g=ev.findOrCreateGroup("Concordance-based Evaluation");g.addMeasure("Gamma",gamma,-1.,1.,0.,false);g.addMeasure("Tau",tau,-1.,+1.,0.,false);db.getHierarchy().resultChanged(ev);return gamma;}  }
class C{  public boolean isBlurEnabled(){  return blurEnabled;}  }
class C{  public boolean epsilonEquals(Vector2 obj,float epsilon){  if (obj == null)   return false;  if (Math.abs(obj.x - x) > epsilon)   return false;  if (Math.abs(obj.y - y) > epsilon)   return false;  return true;}  }
class C{  public boolean isUserShellAccessSupported(){  return userShellAccessSupported;}  }
class C{  public static void showMessageSheet(Component parentComponent,Object message){  showMessageSheet(parentComponent,message,JOptionPane.INFORMATION_MESSAGE);}  }
class C{  public X509ExtensionSetLoadException(String message){  super(message);}  }
class C{  public void installUI(JComponent c){  super.installUI(c);  root=(JRootPane)c;  updateTextured();  int style=root.getWindowDecorationStyle();  Container parent=root.getParent();  if (parent != null && (parent instanceof JFrame || parent instanceof JDialog) && style != JRootPane.NONE) {    installClientDecorations(root);  }}  }
class C{  @SuppressWarnings("PMD.AvoidInstantiatingObjectsInLoops") private static Iterable<String> extend(final Response res,final Iterable<? extends CharSequence> headers) throws IOException {  Response resp=res;  for (  final CharSequence hdr : headers) {    resp=new RsWithHeader(resp,hdr);  }  return resp.head();}  }
class C{  public ExpectedPartitionValuesDeleteRequest createExpectedPartitionValuesDeleteRequest(String partitionKeyGroupName,List<String> expectedPartitionValues){  ExpectedPartitionValuesDeleteRequest expectedPartitionValuesDeleteRequest=new ExpectedPartitionValuesDeleteRequest();  expectedPartitionValuesDeleteRequest.setPartitionKeyGroupKey(partitionKeyGroupServiceTestHelper.createPartitionKeyGroupKey(partitionKeyGroupName));  expectedPartitionValuesDeleteRequest.setExpectedPartitionValues(expectedPartitionValues);  return expectedPartitionValuesDeleteRequest;}  }
class C{  private void load(Reader reader) throws IOException {  Pattern specificationLine=Pattern.compile("knapsack problem specification \\((\\d+) knapsacks, (\\d+) items\\)");  Pattern capacityLine=Pattern.compile(" capacity: \\+(\\d+)");  Pattern weightLine=Pattern.compile("  weight: \\+(\\d+)");  Pattern profitLine=Pattern.compile("  profit: \\+(\\d+)");  CommentedLineReader lineReader=null;  String line=null;  Matcher matcher=null;  try {    lineReader=new CommentedLineReader(reader);    line=lineReader.readLine();    matcher=specificationLine.matcher(line);    if (matcher.matches()) {      nsacks=Integer.parseInt(matcher.group(1));      nitems=Integer.parseInt(matcher.group(2));    } else {      throw new IOException("knapsack data file not properly formatted: invalid specification line");    }    capacity=new int[nsacks];    profit=new int[nsacks][nitems];    weight=new int[nsacks][nitems];    for (int i=0; i < nsacks; i++) {      line=lineReader.readLine();      line=lineReader.readLine();      line=lineReader.readLine();      matcher=capacityLine.matcher(line);      if (matcher.matches()) {        capacity[i]=Integer.parseInt(matcher.group(1));      } else {        throw new IOException("knapsack data file not properly formatted: invalid capacity line");      }      for (int j=0; j < nitems; j++) {        line=lineReader.readLine();        line=lineReader.readLine();        matcher=weightLine.matcher(line);        if (matcher.matches()) {          weight[i][j]=Integer.parseInt(matcher.group(1));        } else {          throw new IOException("knapsack data file not properly formatted: invalid weight line");        }        line=lineReader.readLine();        matcher=profitLine.matcher(line);        if (matcher.matches()) {          profit[i][j]=Integer.parseInt(matcher.group(1));        } else {          throw new IOException("knapsack data file not properly formatted: invalid profit line");        }      }    }  }  finally {    if (lineReader != null) {      lineReader.close();    }  }}  }
class C{  int maxLength(){  FontMetrics fm=getFontMetrics(getFont());  int m=0;  int end=items.size();  for (int i=0; i < end; i++) {    int l=fm.stringWidth(((String)items.elementAt(i)));    m=Math.max(m,l);  }  return m;}  }
class C{  public synchronized void removeYTextLabel(double y,int scale){  mYTextLabels.get(scale).remove(y);}  }
class C{  @SuppressWarnings("ThrowableResultOfMethodCallIgnored") private static List<Formatter<?>> makeErrorFormatters(){  final List<Formatter<?>> formatters=new ArrayList<>();  final int error_exception_of_type=R.string.error_exception_of_type;  Func2<Throwable,Context,String> guessMessage=null;  formatters.add(new RetrofitStatusFormatter(null,R.string.error_cloudflare).doNotReport());  formatters.add(new RetrofitStatusFormatter(null,R.string.error_blocked).doNotReport());  formatters.add(new RetrofitStatusFormatter(null,R.string.error_not_authorized).doNotReport());  formatters.add(new RetrofitStatusFormatter(null,R.string.error_rate_limited).doNotReport());  formatters.add(new RetrofitStatusFormatter(null,R.string.error_not_found).doNotReport());  formatters.add(new RetrofitStatusFormatter(null,R.string.error_proxy_timeout).doNotReport());  formatters.add(new RetrofitStatusFormatter(null,R.string.error_origin_timeout_ddos).doNotReport());  formatters.add(new RetrofitStatusFormatter(null,R.string.error_service_unavailable).doNotReport());  formatters.add(new Formatter<>(JsonSyntaxException.class,R.string.error_json));  formatters.add(new Formatter<>(Throwable.class,null,R.string.error_timeout).doNotReport());  formatters.add(new Formatter<>(Throwable.class,null,R.string.error_timeout).doNotReport());  formatters.add(new Formatter<>(Throwable.class,null,R.string.error_conversion).doNotReport());  formatters.add(new Formatter<>(Throwable.class,null,R.string.error_host_not_found).doNotReport());  formatters.add(new Formatter<>(Throwable.class,null,R.string.error_ssl_error).doNotReport());  formatters.add(new Formatter<>(Throwable.class,null,R.string.error_protocol_exception));  final int error_connect_exception_https=R.string.error_connect_exception_https;  final int error_connect_exception=R.string.error_connect_exception;  formatters.add(new Formatter<>(Throwable.class,null,null).doNotReport());  formatters.add(new Formatter<>(Throwable.class,null,R.string.error_socket).doNotReport());  formatters.add(new Formatter<>(Throwable.class,null,R.string.error_socket).doNotReport());  formatters.add(new Formatter<>(LoginCookieHandler.LoginRequiredException.class,R.string.error_login_required_exception));  formatters.add(new Formatter<>(IllegalStateException.class,null).doNotReport());  final int error_json_mapping=R.string.error_json_mapping;  formatters.add(new Formatter<>(IllegalStateException.class,null,null).doNotReport());  final int error_permission_not_granted=R.string.error_permission_not_granted;  formatters.add(new Formatter<>(PermissionHelper.PermissionNotGranted.class,null));  formatters.add(new Formatter<>(IOException.class,null).doNotReport());  formatters.add(new Formatter<>(NullPointerException.class,R.string.error_nullpointer));  formatters.add(new Formatter<>(OutOfMemoryError.class,R.string.error_oom));  formatters.add(new Formatter<>(Throwable.class,null));  return formatters;}  }
class C{  public int next(){  if (_currentNode != NULL) {    int node=_currentNode;    _currentNode=_nextsib2(node);    return returnNode(makeNodeHandle(node));  }  return END;}  }
class C{  public void addVetoableChangeListener(String propertyName,VetoableChangeListener in_vcl){  beanContextChildSupport.addVetoableChangeListener(propertyName,in_vcl);}  }
class C{  private int createOverflowBucket() throws IOException {  long offset=nioFile.size();  writeEmptyBuckets(offset,1);  return (int)((offset - HEADER_LENGTH) / recordSize) - bucketCount + 1;}  }
class C{  @Override public boolean input(Instance instance) throws Exception {  Instance inst;  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (isNewBatch()) {    resetQueue();    m_NewBatch=false;  }  if (isFirstBatchDone()) {    inst=convertInstance(instance);    inst.setDataset(getOutputFormat());    push(inst);    return true;  } else {    bufferInput(instance);    return false;  }}  }
class C{  public void transformValues(TLongFunction function){  byte[] states=_states;  long[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (states[i] == FULL) {      values[i]=function.execute(values[i]);    }  }}  }
class C{  public String exportNote(String noteId) throws IOException, IllegalArgumentException {  GsonBuilder gsonBuilder=new GsonBuilder();  gsonBuilder.setPrettyPrinting();  Gson gson=gsonBuilder.create();  Note note=getNote(noteId);  if (note == null) {    throw new IllegalArgumentException(noteId + " not found");  }  return gson.toJson(note);}  }
class C{  private void readDrawingPagePropertiesElement(IXMLElement elem,HashMap<AttributeKey,Object> a) throws IOException {  if (DEBUG) {    System.out.println("ODGStylesReader unsupported <" + elem.getName() + "> element.");  }}  }
class C{  public Collection<File> findPaths(final DigestURL url,final int depth,final String ext){  String id=ASCII.String(url.hash());  File pathToShard=pathToShard(url,depth);  String[] list=pathToShard.exists() && pathToShard.isDirectory() ? pathToShard.list() : null;  ArrayList<File> paths=new ArrayList<>();  if (list != null) {    for (    String f : list) {      if (f.startsWith(id) && (ext == null || f.endsWith(ext)))       paths.add(new File(pathToShard,f));    }  }  return paths;}  }
class C{  public boolean decodeExtensionMedia(int startIndex){  int index=startIndex;  mDataLength=0;  mStringValue=null;  int length=mWspData.length;  boolean rtrn=index < length;  while (index < length && mWspData[index] != 0) {    index++;  }  mDataLength=index - startIndex + 1;  mStringValue=new String(mWspData,startIndex,mDataLength - 1);  return rtrn;}  }
class C{  @Override public void updateDouble(String columnLabel,double x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateDouble(" + quote(columnLabel) + ", "+ x+ "d);");    }    update(columnLabel,ValueDouble.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void notifyChangedSlot(LocoNetSlot s){  DccThrottle throttle=new LocoNetThrottle((LocoNetSystemConnectionMemo)adapterMemo,s);  notifyThrottleKnown(throttle,new DccLocoAddress(s.locoAddr(),isLongAddress(s.locoAddr())));  if (waitingForNotification.containsKey(s.locoAddr())) {    Thread r=waitingForNotification.get(s.locoAddr());synchronized (r) {      r.interrupt();    }    waitingForNotification.remove(s.locoAddr());  }}  }
class C{  protected void addContextToChild(BridgeContext ctx,Element e){  if (SVG_NAMESPACE_URI.equals(e.getNamespaceURI())) {    if (e.getLocalName().equals(SVG_TSPAN_TAG)) {      ((SVGOMElement)e).setSVGContext(new TspanBridge(ctx,this,e));    } else     if (e.getLocalName().equals(SVG_TEXT_PATH_TAG)) {      ((SVGOMElement)e).setSVGContext(new TextPathBridge(ctx,this,e));    } else     if (e.getLocalName().equals(SVG_TREF_TAG)) {      ((SVGOMElement)e).setSVGContext(new TRefBridge(ctx,this,e));    }  }  Node child=getFirstChild(e);  while (child != null) {    if (child.getNodeType() == Node.ELEMENT_NODE) {      addContextToChild(ctx,(Element)child);    }    child=getNextSibling(child);  }}  }
class C{  @SuppressWarnings("IfMayBeConditional") private void checkConfigurationConsistency(IgniteSpiContext spiCtx,ClusterNode node,boolean starting) throws IgniteSpiException {  assert spiCtx != null;  assert node != null;  boolean optional=checkOptional();  boolean enabled=checkEnabled();  boolean checkClient=checkClient();  if (!enabled)   return;  if (!checkClient && (CU.clientNode(getLocalNode()) || CU.clientNode(node)))   return;  String clsAttr=createSpiAttributeName(IgniteNodeAttributes.ATTR_SPI_CLASS);  String name=getName();  SB sb=new SB();  String locCls=spiCtx.localNode().attribute(clsAttr);  String rmtCls=node.attribute(clsAttr);  assert locCls != null : "Local SPI class name attribute not found: " + clsAttr;  boolean isSpiConsistent=false;  String tipStr=" (fix configuration or set " + "-D" + IGNITE_SKIP_CONFIGURATION_CONSISTENCY_CHECK + "=true system property)";  if (rmtCls == null) {    if (!optional && starting)     throw new IgniteSpiException("Remote SPI with the same name is not configured" + tipStr + " [name="+ name+ ", loc="+ locCls+ ']');    sb.a(format(">>> Remote SPI with the same name is not configured: " + name,locCls));  } else   if (!locCls.equals(rmtCls)) {    if (!optional && starting)     throw new IgniteSpiException("Remote SPI with the same name is of different type" + tipStr + " [name="+ name+ ", loc="+ locCls+ ", rmt="+ rmtCls+ ']');    sb.a(format(">>> Remote SPI with the same name is of different type: " + name,locCls,rmtCls));  } else   isSpiConsistent=true;  if (optional && !isSpiConsistent)   return;  if (isSpiConsistent) {    List<String> attrs=getConsistentAttributeNames();    for (    String attr : attrs) {      if (!attr.equals(clsAttr)) {        Object rmtVal=node.attribute(attr);        Object locVal=spiCtx.localNode().attribute(attr);        if (locVal == null && rmtVal == null)         continue;        if (locVal == null || rmtVal == null || !locVal.equals(rmtVal))         sb.a(format(">>> Remote node has different " + getName() + " SPI attribute "+ attr,locVal,rmtVal));      }    }  }  if (sb.length() > 0) {    String msg;    if (starting)     msg=U.nl() + U.nl() + ">>> +--------------------------------------------------------------------+"+ U.nl()+ ">>> + Courtesy notice that starting node has inconsistent configuration. +"+ U.nl()+ ">>> + Ignore this message if you are sure that this is done on purpose.  +"+ U.nl()+ ">>> +--------------------------------------------------------------------+"+ U.nl()+ ">>> Remote Node ID: "+ node.id().toString().toUpperCase()+ U.nl()+ sb; else     msg=U.nl() + U.nl() + ">>> +-------------------------------------------------------------------+"+ U.nl()+ ">>> + Courtesy notice that joining node has inconsistent configuration. +"+ U.nl()+ ">>> + Ignore this message if you are sure that this is done on purpose. +"+ U.nl()+ ">>> +-------------------------------------------------------------------+"+ U.nl()+ ">>> Remote Node ID: "+ node.id().toString().toUpperCase()+ U.nl()+ sb;    U.courtesy(log,msg);  }}  }
class C{  @SuppressWarnings("fallthrough") @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="SF_SWITCH_FALLTHROUGH") public String format(){  int b1=-1;  int b2=-1;  int b3=-1;  int b4=-1;switch (getNumDataElements()) {case 4:    b4=getElement(3) & 0xff;case 3:  b3=getElement(2) & 0xff;case 2:b2=getElement(1) & 0xff;case 1:b1=getElement(0) & 0xff;}return SerialMessage.staticFormat(b1,b2,b3,b4);}  }
class C{  protected boolean isBlockTag(AttributeSet attr){  Object o=attr.getAttribute(StyleConstants.NameAttribute);  if (o instanceof HTML.Tag) {    HTML.Tag name=(HTML.Tag)o;    return name.isBlock();  }  return false;}  }
class C{  public AsyncResult PublishAsync(PublishRequest req){  return channel.serviceRequestAsync(req);}  }
class C{  @SuppressWarnings("deprecation") protected void removeAccount(@NonNull Account account){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP_MR1) {    accountManager.removeAccount(account,null,null,null);  } else {    accountManager.removeAccount(account,null,null);  }}  }
class C{  public static <T>ContextEncodedCachingLmWrapper<T> wrapWithCacheNotThreadSafe(final ContextEncodedNgramLanguageModel<T> lm){  return wrapWithCacheNotThreadSafe(lm,18);}  }
class C{  @Override public void write(Integer value){  internalMasterPartner.reverseWrite(value);}  }
class C{  public Builder ignoreWhiteSpaces(boolean val){  ignoreWhiteSpaces=val;  return this;}  }
class C{  protected void initialize(){  m_Data=new Vector<Instances>();}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response){  PrintWriter out=null;  try {    String json=getMetricGroupsList(request);    response.setContentType("application/json");    out=response.getWriter();    out.println(json);  } catch (  Exception e) {    logger.error(e.toString() + System.lineSeparator() + StackTrace.getStringFromStackTrace(e));  } finally {    if (out != null) {      out.close();    }  }}  }
class C{  public void add(T object,int frequency){  Bin bin=hash.get(object.toString());  if (bin != null) {    bin.frequency+=1;  } else {    bin=new Bin(object,frequency);    hash.put(object.toString(),bin);    size+=1;    sorted=false;  }}  }
class C{  @SuppressWarnings("unchecked") private void notifyTextListeners(TextEvent ge){  Vector<TextListener> l;synchronized (this) {    l=(Vector<TextListener>)m_textListeners.clone();  }  if (l.size() > 0) {    for (int i=0; i < l.size(); i++) {      l.elementAt(i).acceptText(ge);    }  }}  }
class C{  public void processMenuKeyEvent(MenuKeyEvent e){  if (DEBUG) {    System.out.println("in JMenuItem.processMenuKeyEvent for " + getText() + "  "+ KeyStroke.getKeyStrokeForEvent(e));  }switch (e.getID()) {case KeyEvent.KEY_PRESSED:    fireMenuKeyPressed(e);  break;case KeyEvent.KEY_RELEASED:fireMenuKeyReleased(e);break;case KeyEvent.KEY_TYPED:fireMenuKeyTyped(e);break;default :break;}}  }
class C{  public void rename(String newName,String newMediaType) throws ConflictException, ForbiddenException, ServerException {  final VirtualFile rVf=getVirtualFile().rename(newName,newMediaType,null);  setVirtualFile(rVf);}  }
class C{  public synchronized boolean isAutoWaitForIdle(){  return isAutoWaitForIdle;}  }
class C{  public final int elementAt(int i){  return m_map[i];}  }
class C{  private void initCameraLayout(){  DisplayMetrics metrics=new DisplayMetrics();  getWindowManager().getDefaultDisplay().getMetrics(metrics);  int screenHeight=metrics.heightPixels;  mScreenWidth=metrics.widthPixels;  mCameraPreviewHeight=(int)(screenHeight * SURFACE_VIEW_HEIGHT_RATIO);  mCameraPreviewLayout=(RelativeLayout)findViewById(R.id.medias_picker_camera_preview_layout);  ViewGroup.LayoutParams previewLayoutParams=mCameraPreviewLayout.getLayoutParams();  previewLayoutParams.height=mCameraPreviewHeight;  mCameraPreviewLayout.setLayoutParams(previewLayoutParams);  mPreviewAndGalleryLayout=(RelativeLayout)findViewById(R.id.medias_picker_preview_gallery_layout);  computePreviewAndGalleryHeight();}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:13.988 -0400",hash_original_method="7252BD32CC7657429DF8A7A188F08933",hash_generated_method="3461AC50EF0367A9F1F25629F9750BDB") public PathMeasure(){  native_instance=native_create(0,false);}  }
class C{  private boolean isConnected(Context context,int networkType){  NetworkInfo networkInfo=null;  if (connectivityManager != null) {    networkInfo=connectivityManager.getNetworkInfo(networkType);  }  return networkInfo == null ? false : networkInfo.isConnected();}  }
class C{  private static void loadSchema(Map<FacesSchema,Schema> schemaMap,FacesSchema schemaId){  URL url;  URLConnection conn;  InputStream in;  SchemaFactory factory;  File f;  Schema schema;  try {switch (schemaId) {case FACES_12:      url=DbfFactory.class.getResource(FACES_1_2_XSD);    if (url == null) {      f=new File(FACES_1_2_XSD_FILE);      if (!f.exists()) {        throw new IllegalStateException("Unable to find web-facesconfig_1_2.xsd");      }      url=f.toURI().toURL();    }  conn=url.openConnection();conn.setUseCaches(false);in=conn.getInputStream();factory=Util.createSchemaFactory(XMLConstants.W3C_XML_SCHEMA_NS_URI);factory.setResourceResolver((LSResourceResolver)DbfFactory.FACES_ENTITY_RESOLVER);schema=factory.newSchema(new StreamSource(in));schemaMap.put(schemaId,schema);break;case FACES_11:url=DbfFactory.class.getResource(FACES_1_1_XSD);conn=url.openConnection();conn.setUseCaches(false);in=conn.getInputStream();factory=Util.createSchemaFactory(XMLConstants.W3C_XML_SCHEMA_NS_URI);factory.setResourceResolver((LSResourceResolver)DbfFactory.FACES_ENTITY_RESOLVER);schema=factory.newSchema(new StreamSource(in));schemaMap.put(schemaId,schema);break;case FACES_21:url=DbfFactory.class.getResource(FACES_2_1_XSD);if (url == null) {f=new File(FACES_2_1_XSD_FILE);if (!f.exists()) {throw new IllegalStateException("Unable to find web-facesconfig_2_1.xsd");}url=f.toURI().toURL();}conn=url.openConnection();conn.setUseCaches(false);in=conn.getInputStream();factory=Util.createSchemaFactory(XMLConstants.W3C_XML_SCHEMA_NS_URI);factory.setResourceResolver((LSResourceResolver)DbfFactory.FACES_ENTITY_RESOLVER);schema=factory.newSchema(new StreamSource(in));schemaMap.put(schemaId,schema);break;case FACES_22:url=DbfFactory.class.getResource(FACES_2_2_XSD);if (url == null) {f=new File(FACES_2_2_XSD_FILE);if (!f.exists()) {throw new IllegalStateException("Unable to find web-facesconfig_2_2.xsd");}url=f.toURI().toURL();}conn=url.openConnection();conn.setUseCaches(false);in=conn.getInputStream();factory=SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);factory.setResourceResolver((LSResourceResolver)DbfFactory.FACES_ENTITY_RESOLVER);schema=factory.newSchema(new StreamSource(in));schemaMap.put(schemaId,schema);break;case FACES_23:url=DbfFactory.class.getResource(FACES_2_3_XSD);if (url == null) {f=new File(FACES_2_3_XSD_FILE);if (!f.exists()) {throw new IllegalStateException("Unable to find web-facesconfig_2_3.xsd");}url=f.toURI().toURL();}conn=url.openConnection();conn.setUseCaches(false);in=conn.getInputStream();factory=SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);factory.setResourceResolver((LSResourceResolver)DbfFactory.FACES_ENTITY_RESOLVER);schema=factory.newSchema(new StreamSource(in));schemaMap.put(schemaId,schema);break;case FACES_20:url=DbfFactory.class.getResource(FACES_2_0_XSD);if (url == null) {f=new File(FACES_2_0_XSD_FILE);if (!f.exists()) {throw new IllegalStateException("Unable to find web-facesconfig_2_0.xsd");}url=f.toURI().toURL();}conn=url.openConnection();conn.setUseCaches(false);in=conn.getInputStream();factory=Util.createSchemaFactory(XMLConstants.W3C_XML_SCHEMA_NS_URI);factory.setResourceResolver((LSResourceResolver)DbfFactory.FACES_ENTITY_RESOLVER);schema=factory.newSchema(new StreamSource(in));schemaMap.put(schemaId,schema);break;case FACELET_TAGLIB_20:url=DbfFactory.class.getResource(FACELET_TAGLIB_2_0_XSD);if (url == null) {f=new File(FACELET_TAGLIB_2_0_XSD_FILE);if (!f.exists()) {throw new IllegalStateException("Unable to find web-facelettaglibrary_2_0.xsd");}url=f.toURI().toURL();}conn=url.openConnection();conn.setUseCaches(false);in=conn.getInputStream();factory=Util.createSchemaFactory(XMLConstants.W3C_XML_SCHEMA_NS_URI);factory.setResourceResolver((LSResourceResolver)DbfFactory.FACES_ENTITY_RESOLVER);schema=factory.newSchema(new StreamSource(in));schemaMap.put(schemaId,schema);break;case FACELET_TAGLIB_22:url=DbfFactory.class.getResource(FACELET_TAGLIB_2_2_XSD);if (url == null) {f=new File(FACELET_TAGLIB_2_2_XSD_FILE);if (!f.exists()) {throw new IllegalStateException("Unable to find web-facelettaglibrary_2_2.xsd");}url=f.toURI().toURL();}conn=url.openConnection();conn.setUseCaches(false);in=conn.getInputStream();factory=Util.createSchemaFactory(XMLConstants.W3C_XML_SCHEMA_NS_URI);factory.setResourceResolver((LSResourceResolver)DbfFactory.FACES_ENTITY_RESOLVER);schema=factory.newSchema(new StreamSource(in));schemaMap.put(schemaId,schema);break;default :throw new ConfigurationException("Unrecognized Faces Version: " + schemaId.toString());}} catch (IllegalStateException|IOException|SAXException|ConfigurationException e) {throw new ConfigurationException(e);}}  }
class C{  public void downloadFileIcon() throws NetworkException, FileAccessException {  mDownloadManager.downloadThumbnail(mIconRemoteUri,getFileicon());}  }
class C{  public static Weeks weeksBetween(ReadablePartial start,ReadablePartial end){  if (start instanceof LocalDate && end instanceof LocalDate) {    Chronology chrono=DateTimeUtils.getChronology(start.getChronology());    int weeks=chrono.weeks().getDifference(((LocalDate)end).getLocalMillis(),((LocalDate)start).getLocalMillis());    return Weeks.weeks(weeks);  }  int amount=BaseSingleFieldPeriod.between(start,end,ZERO);  return Weeks.weeks(amount);}  }
class C{  private void onAudioManagerChangedState(){  Log.d(TAG,"onAudioManagerChangedState: devices=" + audioDevices + ", selected="+ selectedAudioDevice);  if (audioDevices.size() == 2) {    AppRTCUtils.assertIsTrue(audioDevices.contains(AudioDevice.EARPIECE) && audioDevices.contains(AudioDevice.SPEAKER_PHONE));    proximitySensor.start();  } else   if (audioDevices.size() == 1) {    proximitySensor.stop();  } else {    Log.e(TAG,"Invalid device list");  }  if (onStateChangeListener != null) {    onStateChangeListener.run();  }}  }
class C{  public Shape screenToChartShape(Shape s){  GeneralPath p=new GeneralPath();  Transform t=Transform.makeIdentity();  if (currentTransform != null) {    t.concatenate(currentTransform.getInverse());  }  t.translate(-getAbsoluteX(),-getAbsoluteY());  p.append(s.getPathIterator(t),false);  return p;}  }
class C{  public static WifiP2pDnsSdServiceRequest newInstance(){  return new WifiP2pDnsSdServiceRequest();}  }
class C{  @Override public boolean equals(Object obj){  if ((obj == null) || !(obj.getClass().equals(this.getClass()))) {    return false;  }  Evaluation cmp=(Evaluation)obj;  if (m_ClassIsNominal != cmp.m_ClassIsNominal) {    return false;  }  if (m_NumClasses != cmp.m_NumClasses) {    return false;  }  if (m_Incorrect != cmp.m_Incorrect) {    return false;  }  if (m_Correct != cmp.m_Correct) {    return false;  }  if (m_Unclassified != cmp.m_Unclassified) {    return false;  }  if (m_MissingClass != cmp.m_MissingClass) {    return false;  }  if (m_WithClass != cmp.m_WithClass) {    return false;  }  if (m_SumErr != cmp.m_SumErr) {    return false;  }  if (m_SumAbsErr != cmp.m_SumAbsErr) {    return false;  }  if (m_SumSqrErr != cmp.m_SumSqrErr) {    return false;  }  if (m_SumClass != cmp.m_SumClass) {    return false;  }  if (m_SumSqrClass != cmp.m_SumSqrClass) {    return false;  }  if (m_SumPredicted != cmp.m_SumPredicted) {    return false;  }  if (m_SumSqrPredicted != cmp.m_SumSqrPredicted) {    return false;  }  if (m_SumClassPredicted != cmp.m_SumClassPredicted) {    return false;  }  if (m_ClassIsNominal) {    for (int i=0; i < m_NumClasses; i++) {      for (int j=0; j < m_NumClasses; j++) {        if (m_ConfusionMatrix[i][j] != cmp.m_ConfusionMatrix[i][j]) {          return false;        }      }    }  }  return true;}  }
class C{  public static String readAsciiLine(InputStream in) throws IOException {  StringBuilder result=new StringBuilder(80);  while (true) {    int c=in.read();    if (c == -1) {      throw new EOFException();    } else     if (c == '\n') {      break;    }    result.append((char)c);  }  int length=result.length();  if (length > 0 && result.charAt(length - 1) == '\r') {    result.setLength(length - 1);  }  return result.toString();}  }
class C{  public Builder enableSsl(final boolean enable){  this.enableSsl=enable;  return this;}  }
class C{  public void showPanel(AbstractPanel panel){  validateNotNull(panel,"panel");  if (layout == Layout.FULL) {    getTabbedFull().setVisible(panel,true);  } else {    getTabbedSelect().setVisible(panel,true);    getTabbedStatus().setVisible(panel,true);    getTabbedWork().setVisible(panel,true);  }  panel.setTabFocus();}  }
class C{  @SuppressWarnings("deprecation") private static Map<String,String> decodeUrl(String s){  Map<String,String> params=new HashMap<>();  if (s != null) {    String array[]=s.split("&");    for (    String parameter : array) {      String v[]=parameter.split("=");      if (v.length > 1) {        params.put(URLDecoder.decode(v[0]),v.length > 1 ? URLDecoder.decode(v[1]) : null);      }    }  }  return params;}  }
class C{  ConfirmationCodeController(ResultReceiver resultReceiver,StateButton stateButton,InvertedStateButton resendButton,InvertedStateButton callMeButton,SpacedEditText confirmationEditText,String phoneNumber,SessionManager<DigitsSession> sessionManager,DigitsClient client,ErrorCodes errors,ActivityClassManager activityClassManager,DigitsEventCollector digitsEventCollector,boolean isEmailCollection,TextView timerText,DigitsEventDetailsBuilder digitsEventDetailsBuilder){  super(resultReceiver,stateButton,confirmationEditText,client,errors,activityClassManager,sessionManager,digitsEventCollector,digitsEventDetailsBuilder);  this.phoneNumber=phoneNumber;  this.isEmailCollection=isEmailCollection;  this.resendButton=resendButton;  this.callMeButton=callMeButton;  this.countDownTimer=createCountDownTimer(DigitsConstants.RESEND_TIMER_DURATION_MILLIS,timerText,resendButton,callMeButton);  this.timerText=timerText;  this.confirmationEditText=confirmationEditText;}  }
class C{  public static byte[] toBinary(Object o) throws PageException {  if (o instanceof byte[])   return (byte[])o; else   if (o instanceof ObjectWrap)   return toBinary(((ObjectWrap)o).getEmbededObject("")); else   if (o instanceof InputStream) {    ByteArrayOutputStream barr=new ByteArrayOutputStream();    try {      IOUtil.copy((InputStream)o,barr,false,true);    } catch (    IOException e) {      throw ExpressionException.newInstance(e);    }    return barr.toByteArray();  } else   if (o instanceof Image) {    return ((Image)o).getImageBytes(null);  } else   if (o instanceof BufferedImage) {    return new Image(((BufferedImage)o)).getImageBytes("png");  } else   if (o instanceof ByteArrayOutputStream) {    return ((ByteArrayOutputStream)o).toByteArray();  } else   if (o instanceof Blob) {    InputStream is=null;    try {      is=((Blob)o).getBinaryStream();      return IOUtil.toBytes(is);    } catch (    Exception e) {      throw new ExpressionException(e.getMessage());    } finally {      IOUtil.closeEL(is);    }  }  try {    return Base64Encoder.decode(toString(o));  } catch (  CoderException e) {    throw new CasterException(e.getMessage(),"binary");  }catch (  PageException e) {    throw new CasterException(o,"binary");  }}  }
class C{  public DefaultTreeModel(TreeNode root,boolean asksAllowsChildren){  super();  this.root=root;  this.asksAllowsChildren=asksAllowsChildren;}  }
class C{  public boolean hasFeedLink(){  return hasExtension(FeedLink.class);}  }
class C{  public static List<org.oscm.vo.VOCategory> convertToApiVOCategory(List<org.oscm.internal.vo.VOCategory> oldVO){  if (oldVO == null) {    return null;  }  List<org.oscm.vo.VOCategory> newVO=new ArrayList<org.oscm.vo.VOCategory>();  for (  org.oscm.internal.vo.VOCategory tmp : oldVO) {    newVO.add(convertToApi(tmp));  }  return newVO;}  }
class C{  public void actionPerformed(ActionEvent e){  List modelComponents=this.graphEditor.getSelectedModelComponents();  SubgraphSelection selection=new SubgraphSelection(modelComponents);  InternalClipboard.getInstance().setContents(selection,this);}  }
class C{  public static void invokeFinalize(Object o) throws Throwable {  o.finalize();}  }
class C{  public MersenneTwister(Date d){  this((int)d.getTime());}  }
class C{  SSLSocketImpl(SSLContextImpl context,String host,int port,InetAddress localAddr,int localPort) throws IOException, UnknownHostException {  super();  this.host=host;  this.serverNames=Utilities.addToSNIServerNameList(this.serverNames,this.host);  init(context,false);  bind(new InetSocketAddress(localAddr,localPort));  SocketAddress socketAddress=host != null ? new InetSocketAddress(host,port) : new InetSocketAddress(InetAddress.getByName(null),port);  connect(socketAddress,0);}  }
class C{  public Swagger2MarkupConfigBuilder withSwaggerMarkupLanguage(MarkupLanguage swaggerMarkupLanguage){  Validate.notNull(swaggerMarkupLanguage,"%s must not be null","swaggerMarkupLanguage");  config.swaggerMarkupLanguage=swaggerMarkupLanguage;  return this;}  }
class C{  public Collection<String> removeHttpHeaders(String name){  return headers.removeAll(name);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.TYPE__ANNOTATIONS:    getAnnotations().clear();  getAnnotations().addAll((Collection<? extends TAnnotation>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @Override protected void finalize(){  if (requiresFree()) {    System.err.println("ERROR: freeMemory() has not been called: Address: " + nativeRawStartAddress_ + ", capacity: "+ capacityBytes_);    StackTraceElement[] arr=Thread.currentThread().getStackTrace();    for (int i=0; i < arr.length; i++) {      System.err.println(arr[i].toString());    }  }}  }
class C{  Subscription findSubscriptionForAsyncCallBack(String subscriptionId,String organizationId) throws ObjectNotFoundException {  Subscription subscription=null;  try {    subscription=findSubscription(subscriptionId,organizationId);  } catch (  ObjectNotFoundException e) {    Long result=null;    try {      result=getSubscriptionDao().findSubscriptionForAsyncCallBack(subscriptionId,organizationId);    } catch (    NoResultException ex) {      LOG.logError(Log4jLogger.SYSTEM_LOG,ex,LogMessageIdentifier.ERROR_SUBSCRIPTIONID_NOT_EXIST_IN_MODIFIEDENTITY,subscriptionId,organizationId);      throw e;    }catch (    NonUniqueResultException se) {      LOG.logError(Log4jLogger.SYSTEM_LOG,se,LogMessageIdentifier.ERROR_SUBSCRIPTIONID_NOT_UNIQUE_IN_MODIFIEDENTITY,subscriptionId,organizationId);      throw e;    }    subscription=dataManager.getReference(Subscription.class,result.longValue());  }  return subscription;}  }
class C{  private void processECR(){  String sql="SELECT * FROM R_Request r " + "WHERE M_ChangeRequest_ID IS NULL" + " AND EXISTS ("+ "SELECT * FROM R_RequestType rt "+ "WHERE rt.R_RequestType_ID=r.R_RequestType_ID"+ " AND rt.IsAutoChangeRequest='Y')"+ "AND EXISTS ("+ "SELECT * FROM R_Group g "+ "WHERE g.R_Group_ID=r.R_Group_ID"+ " AND (g.M_BOM_ID IS NOT NULL OR g.M_ChangeNotice_ID IS NOT NULL)	)";  int count=0;  int failure=0;  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(sql,null);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      MRequest r=new MRequest(getCtx(),rs,null);      MGroup rg=MGroup.get(getCtx(),r.getR_Group_ID());      MChangeRequest ecr=new MChangeRequest(r,rg);      if (r.save()) {        r.setM_ChangeRequest_ID(ecr.getM_ChangeRequest_ID());        if (r.save())         count++; else         failure++;      } else       failure++;    }    rs.close();  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(pstmt);  }  m_summary.append("Auto Change Request #").append(count);  if (failure > 0)   m_summary.append("(fail=").append(failure).append(")");  m_summary.append(" - ");}  }
class C{  protected int index(float val){  byte[] states=_states;  float[] set=_set;  int length=states.length;  int hash=_hashingStrategy.computeHashCode(val) & 0x7fffffff;  int index=hash % length;  if (states[index] != FREE && (states[index] == REMOVED || set[index] != val)) {    int probe=1 + (hash % (length - 2));    do {      index-=probe;      if (index < 0) {        index+=length;      }    } while (states[index] != FREE && (states[index] == REMOVED || set[index] != val));  }  return states[index] == FREE ? -1 : index;}  }
class C{  public ActionForward executeAction(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  DynaValidatorForm buscarLiquidacionesForm=(DynaValidatorForm)form;  List oLista=null;  try {    oLista=PagoElectronicoManagerHelper.buscarLiquidaciones(request,buscarLiquidacionesForm,UserCertificateUtil.getUserData(request));  } catch (  SigemException e) {    logger.error(e.getMessage(),e);    request.setAttribute(ERROR_KEY,e.getMessage());    return mapping.findForward(ERROR_FORWARD);  }  request.setAttribute(LISTA_LIQUIDACIONES_KEY,oLista);  return mapping.findForward(SUCCESS_FORWARD);}  }
class C{  private static void appendStackTrace(final PrintWriter writer,final Throwable ex){  ex.printStackTrace(writer);}  }
class C{  public void cancel(NotificationEntry entry){  if (entry.isSentToTarget(ID)) {    mCenter.cancel(entry);  }}  }
class C{  public N4ClassifierDefinition basicGetOwner(){  if (eContainerFeatureID() != N4JSPackage.N4_GETTER_DECLARATION__OWNER)   return null;  return (N4ClassifierDefinition)eInternalContainer();}  }
class C{  public DomFactoryImpl(){  super();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Permissions.getDefaultSecurityProfile();}  }
class C{  public void box(final Type type){  if (type.getSort() == Type.OBJECT || type.getSort() == Type.ARRAY) {    return;  }  if (type == Type.VOID_TYPE) {    push((String)null);  } else {    Type boxed=getBoxedType(type);    newInstance(boxed);    if (type.getSize() == 2) {      dupX2();      dupX2();      pop();    } else {      dupX1();      swap();    }    invokeConstructor(boxed,new Method("<init>",Type.VOID_TYPE,new Type[]{type}));  }}  }
class C{  public void clear(){  GridUnsafe.copyMemory(spineEmpty,INT_ARR_OFF,spine,INT_ARR_OFF,spineEmpty.length << 2);  GridUnsafe.copyMemory(nextEmpty,INT_ARR_OFF,next,INT_ARR_OFF,nextEmpty.length << 2);  Arrays.fill(objs,null);  size=0;}  }
class C{  private Node<E> findPredecessorOfLast(){  for (; ; ) {    Index<E> q=head;    for (; ; ) {      Index<E> d, r;      if ((r=q.right) != null) {        if (r.indexesDeletedNode()) {          q.unlink(r);          break;        }        if (r.node.next != null) {          q=r;          continue;        }      }      if ((d=q.down) != null)       q=d; else       return q.node;    }  }}  }
class C{  @Override public synchronized void prepare() throws ReplicatorException, InterruptedException {  connectionManager=new SqlConnectionManager();  connectionManager.setConnectionSpec(connectionSpec);  connectionManager.setCsvSpec(csv);  connectionManager.setPrivileged(privileged);  connectionManager.setLogOperations(logOperations);  connectionManager.prepare();  commitSeqno=new SqlCommitSeqno(connectionManager,connectionSpec.getSchema(),connectionSpec.getTableType());  commitSeqno.setChannels(channels);  commitSeqno.configure();  commitSeqno.prepare();}  }
class C{  public void testLoadLocations_DoesNotHideSpinnerWhenSyncInProgress(){  mController.init();  mController.attachFragmentUi(mMockFragmentUi);  mFakeSyncManager.setSyncing(true);  LocationTree locationTree=FakeAppLocationTreeFactory.build();  mFakeEventBus.post(new AppLocationTreeFetchedEvent(locationTree));  verify(mMockFragmentUi).setBusyLoading(true);}  }
class C{  public ClusterStateRequestBuilder all(){  request.all();  return this;}  }
class C{  public Seconds toStandardSeconds(){  long seconds=getStandardSeconds();  return Seconds.seconds(FieldUtils.safeToInt(seconds));}  }
class C{  @Override public void acceptTrainingSet(TrainingSetEvent e){  Instances trainingSet=e.getTrainingSet();  DataSetEvent dse=new DataSetEvent(this,trainingSet);  acceptDataSet(dse);}  }
class C{  @Override public void onSharedPreferenceChanged(SharedPreferences companionPrefs,String key){  Object value=SharedPreferencesUtil.getObject(companionPrefs,key);  if (value != null) {    SharedPreferences.Editor wearablePrefsEditor=getSharedPreferences(WearableConfigListenerService.PREFS_WEARABLE_CONFIG,MODE_PRIVATE).edit();    SharedPreferencesUtil.putObject(wearablePrefsEditor,key,value);    wearablePrefsEditor.commit();    DataMap prefsDataMap=new DataMap();    DataMapUtil.putObject(prefsDataMap,key,value);    DataMap dataMap=new DataMap();    dataMap.putDataMap(SharedPreferencesUtil.DATA_KEY_CONFIG_PREFS,prefsDataMap);    dataMap.putLong(SharedPreferencesUtil.DATA_KEY_CONFIG_TIMESTAMP,System.currentTimeMillis());    mWearableAPIHelper.putDataMap(SharedPreferencesUtil.DATA_PATH_CONFIG_UPDATE_COMPANION,dataMap,null);  }}  }
class C{  public static void enlarge(Mat img,Size approxSize){  enlarge(img,approxSize,false);}  }
class C{  public HotspotIntegerGenerator(int lowerBound,int upperBound,double hotsetFraction,double hotOpnFraction){  if (hotsetFraction < 0.0 || hotsetFraction > 1.0) {    System.err.println("Hotset fraction out of range. Setting to 0.0");    hotsetFraction=0.0;  }  if (hotOpnFraction < 0.0 || hotOpnFraction > 1.0) {    System.err.println("Hot operation fraction out of range. Setting to 0.0");    hotOpnFraction=0.0;  }  if (lowerBound > upperBound) {    System.err.println("Upper bound of Hotspot generator smaller than the lower bound. " + "Swapping the values.");    int temp=lowerBound;    lowerBound=upperBound;    upperBound=temp;  }  this.lowerBound=lowerBound;  this.upperBound=upperBound;  this.hotsetFraction=hotsetFraction;  int interval=upperBound - lowerBound + 1;  this.hotInterval=(int)(interval * hotsetFraction);  this.coldInterval=interval - hotInterval;  this.hotOpnFraction=hotOpnFraction;  random=new Random();}  }
class C{  @Override protected MetaData modifyGeneratedModelMetaData(PredictionModelMetaData unmodifiedMetaData){  InputPort in=getTrainingSetInputPort();  MetaData esetIn=in.getMetaData();  if ((esetIn != null) && (esetIn instanceof ExampleSetMetaData)) {    return new PredictionModelMetaData(MultiModelByRegression.class,(ExampleSetMetaData)esetIn);  }  return unmodifiedMetaData;}  }
class C{  public StatsCollectionEvent(){}  }
class C{  static void lookupPrincipalTests(Path dir) throws IOException {  System.out.println("-- Lookup UserPrincipal Tests --");  UserPrincipalLookupService lookupService=dir.getFileSystem().getUserPrincipalLookupService();  PosixFileAttributes attrs=Files.readAttributes(dir,PosixFileAttributes.class);  System.out.format("lookup: %s\n",attrs.owner().getName());  try {    UserPrincipal owner=lookupService.lookupPrincipalByName(attrs.owner().getName());    if (owner instanceof GroupPrincipal)     throw new RuntimeException("owner is a group?");    if (!owner.equals(attrs.owner()))     throw new RuntimeException("owner different from file owner");  } catch (  UserPrincipalNotFoundException x) {    System.out.println("user not found - test skipped");  }  System.out.format("lookup group: %s\n",attrs.group().getName());  try {    GroupPrincipal group=lookupService.lookupPrincipalByGroupName(attrs.group().getName());    if (!group.equals(attrs.group()))     throw new RuntimeException("group different from file group-owner");  } catch (  UserPrincipalNotFoundException x) {    System.out.println("group not found - test skipped");  }  String invalidPrincipal="scumbag99";  try {    System.out.format("lookup: %s\n",invalidPrincipal);    lookupService.lookupPrincipalByName(invalidPrincipal);    throw new RuntimeException("'" + invalidPrincipal + "' is a valid user?");  } catch (  UserPrincipalNotFoundException x) {  }  try {    System.out.format("lookup group: %s\n",invalidPrincipal);    lookupService.lookupPrincipalByGroupName("idonotexist");    throw new RuntimeException("'" + invalidPrincipal + "' is a valid group?");  } catch (  UserPrincipalNotFoundException x) {  }  System.out.println("OKAY");}  }
class C{  private void load() throws IOException {  if (!knownHosts.exists()) {    return;  }  assertKnownHostFileReadable();  BufferedReader reader=new BufferedReader(new FileReader(knownHosts));  String line;  while ((line=reader.readLine()) != null) {    if ((!line.trim().startsWith("#"))) {      String[] strings=line.split(" ");      if (strings[0].trim().equals(serverId)) {        fingerprint=strings[1].trim();        return;      }    }  }  reader.close();}  }
class C{  public boolean isServiceRegistered(){  return ServerApiUtils.isImsConnected();}  }
class C{  protected void printPoint(UnifiedImageBuilder imageBdr,MapNode node,DefaultEntityViewInfo pInfo,UColor nameColor){  int x=transformer.x(node.getLon());  int y=transformer.y(node.getLat());  int width=0;  if (pInfo.icon != null) {    width=Math.round(pInfo.icon.size * displayFactorSym);    pInfo.icon.draw(imageBdr,x,y,displayFactor);  }  if (nameColor != null) {    String name=(debugMode) ? "P" + Long.toString(node.getId()) : node.getName();    if (name != null) {      NameInfo info=new NameInfo(name,nameColor,pInfo.printOrder);      info.x=x + width;      info.y=y + width / 4;      nameInfoBuffer.add(info);    }  }}  }
class C{  public void requestPTY(String term,int term_width_characters,int term_height_characters,int term_width_pixels,int term_height_pixels,byte[] terminal_modes) throws IOException {  if (term == null)   throw new IllegalArgumentException("TERM cannot be null.");  if ((terminal_modes != null) && (terminal_modes.length > 0)) {    if (terminal_modes[terminal_modes.length - 1] != 0)     throw new IOException("Illegal terminal modes description, does not end in zero byte");  } else   terminal_modes=new byte[]{0};synchronized (this) {    if (flag_closed)     throw new IOException("This session is closed.");    if (flag_pty_requested)     throw new IOException("A PTY was already requested.");    if (flag_execution_started)     throw new IOException("Cannot request PTY at this stage anymore, a remote execution has already started.");    flag_pty_requested=true;  }  cm.requestPTY(cn,term,term_width_characters,term_height_characters,term_width_pixels,term_height_pixels,terminal_modes);}  }
class C{  public static BitSet xor(BitSet left,BitSet right){  BitSet result=(BitSet)left.clone();  result.xor(right);  return result;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return null;}  }
class C{  public <T extends Mediator>T retrieveMediator(String mediatorName){  return this.view.retrieveMediator(mediatorName);}  }
class C{  private void loadIntegerSetting(SQLiteStatement stmt,String name,int resId){  loadSetting(stmt,name,Integer.toString(mContext.getResources().getInteger(resId)));}  }
class C{  public static boolean isZoningRequired(DbClient dbClient,VirtualArray nh){  if (nh.getAutoSanZoning() == false) {    _log.info("SAN Zoning is not enabled for Neighborhood: " + nh.getLabel());    return false;  }  return NetworkUtil.areNetworkSystemDiscovered(dbClient);}  }
class C{  public static long shallowSizeOf(Object[] arr){  return alignObjectSize((long)NUM_BYTES_ARRAY_HEADER + (long)NUM_BYTES_OBJECT_REF * arr.length);}  }
class C{  public void dispose(){  rootGN=null;  rootFilter=null;  rootCR=null;  workingOffScreen=null;  workingBaseRaster=null;  workingRaster=null;  currentOffScreen=null;  currentBaseRaster=null;  currentRaster=null;  renderingHints=null;  lastCache=null;  lastCR=null;}  }
class C{  void dodge(){  if (clientgui.doYesNoDialog(Messages.getString("PhysicalDisplay.DodgeDialog.title"),Messages.getString("PhysicalDisplay" + ".DodgeDialog" + ".message"))) {    disableButtons();    Entity entity=clientgui.getClient().getGame().getEntity(cen);    entity.dodging=true;    DodgeAction act=new DodgeAction(cen);    attacks.addElement(act);    ready();  }}  }
class C{  public void configureBaudRate(String rate){  log.debug("configureBaudRate: " + rate);  selectedSpeed=rate;  super.configureBaudRate(rate);}  }
class C{  private void appendRootMetadataToBuilder(AccessibilityNodeInfoCompat node,SpannableStringBuilder descriptionBuilder){  if (AccessibilityNodeInfoUtils.isActionableForAccessibility(node) && !node.isEnabled()) {    StringBuilderUtils.appendWithSeparator(descriptionBuilder,mContext.getString(R.string.value_disabled));  }}  }
class C{  public boolean isIvrVsan(int vsanId){  boolean inRange=vsans.contains(vsanId);  if (!inRange) {    for (    IntRange range : getVsansRanges()) {      inRange=range.containsInteger(vsanId);      if (inRange) {        break;      }    }  }  return inRange;}  }
class C{  public void writeFile(File pFile,Element existingElement,Element newLocomotive){  if (log.isDebugEnabled()) {    log.debug("writeFile to " + pFile.getAbsolutePath() + " "+ pFile.getName());  }  try {    Element root=new Element("locomotive-config");    Document doc=newDocument(root,dtdLocation + "locomotive-config.dtd");    root.addContent(newLocomotive);    java.util.Map<String,String> m=new java.util.HashMap<>();    m.put("type","text/xsl");    m.put("href",xsltLocation + "locomotive.xsl");    ProcessingInstruction p=new ProcessingInstruction("xml-stylesheet",m);    doc.addContent(0,p);    Element values=existingElement.getChild("locomotive").getChild("values");    newLocomotive.addContent(values.clone());    writeXML(pFile,doc);  } catch (  IOException ex) {    ex.printStackTrace();  }}  }
class C{  public void doWindowOpen(){  doConnect();}  }
class C{  public void validate() throws org.apache.thrift.TException {  if (triggerName == null) {    throw new org.apache.thrift.protocol.TProtocolException("Required field 'triggerName' was not present! Struct: " + toString());  }}  }
class C{  public static boolean containsWhitespace(final CharSequence seq){  if (isEmpty(seq)) {    return false;  }  final int strLen=seq.length();  for (int i=0; i < strLen; i++) {    if (Character.isWhitespace(seq.charAt(i))) {      return true;    }  }  return false;}  }
class C{  public void morphIntoSheet(int endX,int endY,Side side,int arcDegrees,float scaleFactor,long duration,AnimationListener listener){  morph(endX,endY,side,arcDegrees,scaleFactor,duration,listener);}  }
class C{  private static int expandParametersToCall(Instruction call,IR ir){  int nGPRParams=0;  int nFPRParams=0;  PhysicalRegisterSet phys=(PhysicalRegisterSet)ir.regpool.getPhysicalRegisterSet();  int FPRRegisterParams=countFPRParams(call);  FPRRegisterParams=Math.min(FPRRegisterParams,PhysicalRegisterSet.getNumberOfFPRParams());  int parameterBytes=0;  call.insertBefore(MIR_UnaryNoRes.create(REQUIRE_ESP,IC(0)));  int numParams=MIR_Call.getNumberOfParams(call);  int nParamsInRegisters=0;  for (int i=0; i < numParams; i++) {    Operand param=MIR_Call.getClearParam(call,i);    MIR_Call.setParam(call,i,null);    TypeReference paramType=param.getType();    if (paramType.isFloatType() || paramType.isDoubleType()) {      nFPRParams++;      int size;      if (paramType.isFloatType()) {        size=BYTES_IN_FLOAT;        parameterBytes-=WORDSIZE;      } else {        size=BYTES_IN_DOUBLE;        parameterBytes-=2 * WORDSIZE;      }      if (nFPRParams > PhysicalRegisterSet.getNumberOfFPRParams()) {        Operand M=new StackLocationOperand(false,parameterBytes,size);        if (SSE2_FULL) {          if (paramType.isFloatType()) {            call.insertBefore(MIR_Move.create(IA32_MOVSS,M,param));          } else {            call.insertBefore(MIR_Move.create(IA32_MOVSD,M,param));          }        } else {          call.insertBefore(MIR_Move.create(IA32_FMOV,M,param));        }      } else {        RegisterOperand real;        if (SSE2_FULL) {          real=new RegisterOperand(phys.getFPRParam(nFPRParams - 1),paramType);          if (paramType.isFloatType()) {            call.insertBefore(MIR_Move.create(IA32_MOVSS,real,param));          } else {            call.insertBefore(MIR_Move.create(IA32_MOVSD,real,param));          }        } else {          real=new RegisterOperand(phys.getFPRParam(FPRRegisterParams - nFPRParams),paramType);          call.insertBefore(MIR_Move.create(IA32_FMOV,real,param));        }        MIR_Call.setParam(call,nParamsInRegisters++,real.copy());      }    } else {      nGPRParams++;      parameterBytes-=WORDSIZE;      if (paramIsNativeLongOn64Bit(param)) {        parameterBytes-=WORDSIZE;      }      if (nGPRParams > PhysicalRegisterSet.getNumberOfGPRParams()) {        if (paramIsNativeLongOn64Bit(param)) {          call.insertBefore(MIR_UnaryNoRes.create(REQUIRE_ESP,IC(parameterBytes + WORDSIZE * 2)));          call.insertBefore(MIR_UnaryNoRes.create(IA32_PUSH,IC(0)));        } else {          call.insertBefore(MIR_UnaryNoRes.create(REQUIRE_ESP,IC(parameterBytes + WORDSIZE)));        }        call.insertBefore(MIR_UnaryNoRes.create(IA32_PUSH,param));      } else {        Register phy=phys.getGPRParam(nGPRParams - 1);        RegisterOperand real=new RegisterOperand(phy,paramType);        call.insertBefore(MIR_Move.create(IA32_MOV,real,param));        MIR_Call.setParam(call,nParamsInRegisters++,real.copy());      }    }  }  return parameterBytes;}  }
class C{  @Override public final void onCreate(final Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.credits);  final TextView tvClientVersion=(TextView)findViewById(R.id.credits_client_version);  tvClientVersion.setText(RadioBeacon.SW_VERSION);  final TextView tvBuild=(TextView)findViewById(R.id.credits_build);  tvBuild.setText("(" + readBuildInfo() + ")");  final TextView tvSignature=(TextView)findViewById(R.id.credits_build_signature);  tvSignature.setText(CertificateUtils.getCertificateSHA1Fingerprint(this));}  }
class C{  public SparseIntArray(){  this(10);}  }
class C{  private Map<IVariable<?>,Map<URI,StatementPatternNode>> verifyGraphPattern(final AbstractTripleStore database,final GroupNodeBase<IGroupMemberNode> group){  Map<IVariable<?>,Map<URI,StatementPatternNode>> tmp=null;  final int arity=group.arity();  for (int i=0; i < arity; i++) {    final BOp child=group.get(i);    if (child instanceof GroupNodeBase<?>) {      throw new RuntimeException("Nested groups are not allowed.");    }    if (child instanceof StatementPatternNode) {      final StatementPatternNode sp=(StatementPatternNode)child;      final TermNode p=sp.p();      if (!p.isConstant())       throw new RuntimeException("Expecting search predicate: " + sp);      final URI uri=(URI)((ConstantNode)p).getValue();      if (!uri.stringValue().startsWith(BDS.NAMESPACE))       throw new RuntimeException("Expecting search predicate: " + sp);      if (!ASTSearchOptimizer.searchUris.contains(uri))       throw new RuntimeException("Unknown search predicate: " + uri);      final TermNode s=sp.s();      if (!s.isVariable())       throw new RuntimeException("Subject of search predicate is constant: " + sp);      final IVariable<?> searchVar=((VarNode)s).getValueExpression();      if (tmp == null) {        tmp=new LinkedHashMap<IVariable<?>,Map<URI,StatementPatternNode>>();      }      Map<URI,StatementPatternNode> statementPatterns=tmp.get(searchVar);      if (statementPatterns == null) {        tmp.put(searchVar,statementPatterns=new LinkedHashMap<URI,StatementPatternNode>());      }      statementPatterns.put(uri,sp);    }  }  return tmp;}  }
class C{  public TSetter createTSetter(){  TSetterImpl tSetter=new TSetterImpl();  return tSetter;}  }
class C{  public static boolean isConnectionFast(int type,int subType){  if (type == ConnectivityManager.TYPE_WIFI) {    return true;  } else   if (type == ConnectivityManager.TYPE_MOBILE) {switch (subType) {case TelephonyManager.NETWORK_TYPE_1xRTT:      return false;case TelephonyManager.NETWORK_TYPE_CDMA:    return false;case TelephonyManager.NETWORK_TYPE_EDGE:  return false;case TelephonyManager.NETWORK_TYPE_EVDO_0:return true;case TelephonyManager.NETWORK_TYPE_EVDO_A:return true;case TelephonyManager.NETWORK_TYPE_GPRS:return false;case TelephonyManager.NETWORK_TYPE_HSDPA:return true;case TelephonyManager.NETWORK_TYPE_HSPA:return true;case TelephonyManager.NETWORK_TYPE_HSUPA:return true;case TelephonyManager.NETWORK_TYPE_UMTS:return true;case TelephonyManager.NETWORK_TYPE_EHRPD:return true;case TelephonyManager.NETWORK_TYPE_EVDO_B:return true;case TelephonyManager.NETWORK_TYPE_HSPAP:return true;case TelephonyManager.NETWORK_TYPE_IDEN:return false;case TelephonyManager.NETWORK_TYPE_LTE:return true;case TelephonyManager.NETWORK_TYPE_UNKNOWN:default :return false;}} else {return false;}}  }
class C{  private HadoopFileSystemCounterWriterDelegate delegate(HadoopJob job){  HadoopFileSystemCounterWriterDelegate delegate0=delegate;  if (delegate0 == null) {synchronized (mux) {      delegate0=delegate;      if (delegate0 == null) {        delegate0=HadoopDelegateUtils.counterWriterDelegate(job.getClass().getClassLoader(),this);        delegate=delegate0;      }    }  }  return delegate0;}  }
class C{  public final String identifier(){  return identifier;}  }
class C{  public DateMidnight roundHalfCeilingCopy(){  return iInstant.withMillis(iField.roundHalfCeiling(iInstant.getMillis()));}  }
class C{  public void finish(int root_table){  prep(minalign,SIZEOF_INT);  addOffset(root_table);  bb.position(space);  finished=true;}  }
class C{  private static int compare(byte[] first,byte[] second,boolean reverseOrdering){  if (reverseOrdering) {    return UnsignedBytes.lexicographicalComparator().compare(second,first);  } else {    return UnsignedBytes.lexicographicalComparator().compare(first,second);  }}  }
class C{  @Deprecated public JCTree.JCCompilationUnit parse(String filename){  JavacFileManager fm=(JavacFileManager)fileManager;  return parse(fm.getJavaFileObjectsFromStrings(List.of(filename)).iterator().next());}  }
class C{  @Override public String toString(){  return "LABEL" + Label.getBlock(target).block.getNumber();}  }
class C{  private boolean ensurePathIsExpanded(TreePath aPath,boolean expandLast){  if (aPath != null) {    if (treeModel.isLeaf(aPath.getLastPathComponent())) {      aPath=aPath.getParentPath();      expandLast=true;    }    if (aPath != null) {      FHTreeStateNode lastNode=getNodeForPath(aPath,false,true);      if (lastNode != null) {        lastNode.makeVisible();        if (expandLast)         lastNode.expand();        return true;      }    }  }  return false;}  }
class C{  protected void freeStatements() throws SQLException {  List<Statement> statements=new ArrayList<>(activeStatements);  SQLExceptionChainBuilder<SQLException> chain=new SQLExceptionChainBuilder<>();  for (  Statement stmt : statements) {    try {      stmt.close();    } catch (    SQLException ex) {      chain.append(ex);    }  }  if (chain.hasException())   throw chain.getException();}  }
class C{  public static void pointerDrag(float x,float y,String componentName){  if (verbose) {    log("pointerDrag(" + x + ", "+ y+ ", "+ componentName+ ")");  }  Component c=findByName(componentName);  int actualX=c.getAbsoluteX() + (int)(x * c.getWidth());  int actualY=c.getAbsoluteY() + (int)(y * c.getHeight());  Display.getInstance().getCurrent().pointerDragged(actualX,actualY);}  }
class C{  @Deprecated public boolean isAssignableFrom(Type from){  if (from == null) {    return false;  }  if (type.equals(from)) {    return true;  }  if (type instanceof Class<?>) {    return rawType.isAssignableFrom($Gson$Types.getRawType(from));  } else   if (type instanceof ParameterizedType) {    return isAssignableFrom(from,(ParameterizedType)type,new HashMap<String,Type>());  } else   if (type instanceof GenericArrayType) {    return rawType.isAssignableFrom($Gson$Types.getRawType(from)) && isAssignableFrom(from,(GenericArrayType)type);  } else {    throw buildUnexpectedTypeError(type,Class.class,ParameterizedType.class,GenericArrayType.class);  }}  }
class C{  public Quaterniond rotationTo(Vector3dc toDir,Quaterniond dest){  return dest.rotationTo(this,toDir);}  }
class C{  public boolean containsValue(Object value){  Node<K,V>[] tab;  V v;  if ((tab=table) != null && size > 0) {    for (int i=0; i < tab.length; ++i) {      for (Node<K,V> e=tab[i]; e != null; e=e.next) {        if ((v=e.value) == value || (value != null && value.equals(v)))         return true;      }    }  }  return false;}  }
class C{  public ObjectFactory(){}  }
class C{  @SuppressLint("NewApi") public static void postInvalidateOnAnimation(View view){  if (Build.VERSION.SDK_INT >= 16)   view.postInvalidateOnAnimation(); else   view.postInvalidateDelayed(10);}  }
class C{  public void registerUser(Object o){  if (ulist.contains(o)) {    return;  }  if (log.isDebugEnabled())   confirmAdapterAvailable(o);  ulist.add(o);}  }
class C{  public final void readFully(byte[] b,int off,int len) throws java.io.IOException {  return;}  }
class C{  public synchronized void clear(){  this.entries.clear();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public MarketingPermissionNotFoundException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public void addDataSources(final int numDataSources){  for (int i=0; i < numDataSources; i++) {    addDataSource();  }}  }
class C{  public static void w(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_WARNING) {    return;  }  Log.w(tag,msg,throwable);}  }
class C{  public void periodicProcessing() throws NetworkException {  try {    if (sLogger.isActivated()) {      sLogger.debug("Send keep-alive");    }    mSip.getDefaultSipProvider().getListeningPoints()[0].sendHeartbeat(mSip.getOutboundProxyAddr(),mSip.getOutboundProxyPort());    startTimer(System.currentTimeMillis(),mPeriod);  } catch (  IOException e) {    throw new NetworkException("Failed to send keep-alive!",e);  }}  }
class C{  @Override protected void onPrimaryColorChanged(){  if (mBackgroundColorSet)   return;  int primaryColor=getToolbarDataProvider().getPrimaryColor();  getBackground().setColor(primaryColor);  mUseDarkColors=!ColorUtils.shoudUseLightForegroundOnBackground(primaryColor);  updateVisualsForState();  mBackgroundColorSet=true;}  }
class C{  @Override public void write(int ch) throws IOException {  int len=_writeLength;  byte[] writeBuffer=_writeBuffer;  if (writeBuffer.length <= len) {    if (_source == null) {      return;    }    _writeLength=0;    _source.write(writeBuffer,0,len,false);    _position+=len;    _isFlushRequired=true;    len=0;  }  writeBuffer[len]=(byte)ch;  _writeLength=len + 1;  if (_implicitFlush)   flush();}  }
class C{  public java.lang.StringBuilder append(java.lang.Object obj){  return null;}  }
class C{  void flushBuffer() throws IOException {  se.flushBuffer();}  }
class C{  public double normalDistance(final double x,final double y,final double z,final Membership... bounds){  final double dist=evaluate(x,y,z);  final double perpX=x - dist * this.x;  final double perpY=y - dist * this.y;  final double perpZ=z - dist * this.z;  if (!meetsAllBounds(perpX,perpY,perpZ,bounds)) {    return Double.POSITIVE_INFINITY;  }  return Math.abs(dist);}  }
class C{  private boolean createProvisioning(String xmlFileContent,ContactId myContact){  String phoneNumber=myContact.toString();  String configToParse=xmlFileContent.replaceAll(TOKEN_MSISDN,phoneNumber.substring(1));  ProvisioningParser parser=new ProvisioningParser(configToParse,mRcsSettings);  RcsSettingsData.GsmaRelease release=mRcsSettings.getGsmaRelease();  CommonServiceConfiguration.MessagingMode messagingMode=mRcsSettings.getMessagingMode();  mRcsSettings.setGsmaRelease(RcsSettingsData.GsmaRelease.ALBATROS);  mRcsSettings.setMessagingMode(CommonServiceConfiguration.MessagingMode.NONE);  try {    parser.parse(release,messagingMode,true);    mRcsSettings.setUserProfileImsDisplayName(phoneNumber);    mRcsSettings.setFileTransferHttpSupported(mRcsSettings.getFtHttpServer() != null && mRcsSettings.getFtHttpLogin() != null && mRcsSettings.getFtHttpPassword() != null);    return true;  } catch (  SAXException e) {    if (sLogger.isActivated()) {      sLogger.debug(e.getMessage());    }    mRcsSettings.setGsmaRelease(release);    mRcsSettings.setMessagingMode(messagingMode);    return false;  }}  }
class C{  public final Vec4D unweight(){  float iw=MathUtils.abs(w) > MathUtils.EPS ? 1f / w : 0;  x*=iw;  y*=iw;  z*=iw;  return this;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  int dataSize;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  ArrayList<Double> data=new ArrayList<Double>();  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          data.clear();          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData && filterShape[a] == 1) {              data.add(z);            }          }          Collections.sort(data);          dataSize=data.size();          if (dataSize % 2 == 1) {            z=data.get((dataSize + 1) / 2 - 1);          } else {            double lower=data.get(dataSize / 2 - 1);            double upper=data.get(dataSize / 2);            z=(lower + upper) / 2.0;          }          outputFile.setValue(row,col,z);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void runBidiOnParagraphs(LayoutContext c){  for (  Paragraph p : paragraphs.values()) {    p.runBidiSplitter(c.getBidiSplitterFactory().createBidiSplitter(),c);  }}  }
class C{  public void time(long time){  this.time=time;}  }
class C{  public static void startupDelay(){  sleep(500);}  }
class C{  private void storeArgs(Method method,Array methodArgs){  Class[] pmt=method.getParameterTypes();  Object o=methodArgs.get(pmt.length + 1,null);  Method[] args;  if (o == null) {    args=new Method[1];    methodArgs.setEL(pmt.length + 1,args);  } else {    Method[] ms=(Method[])o;    args=new Method[ms.length + 1];    for (int i=0; i < ms.length; i++) {      args[i]=ms[i];    }    methodArgs.setEL(pmt.length + 1,args);  }  args[args.length - 1]=method;}  }
class C{  public ValueNumber[] lookupOutputValues(Entry entry){  if (DEBUG) {    System.out.println("VN cache lookup: " + entry);  }  ValueNumber[] result=entryToOutputMap.get(entry);  if (DEBUG) {    System.out.println("   result ==> " + Arrays.toString(result));  }  return result;}  }
class C{  public static void main(String[] argv) throws Exception {  if (argv.length != 1) {    System.err.println("Usage: " + BetterCFGBuilder2.class.getName() + " <class file>");    System.exit(1);  }  String methodName=SystemProperties.getProperty("cfgbuilder.method");  JavaClass jclass=new ClassParser(argv[0]).parse();  ClassGen classGen=new ClassGen(jclass);  Method[] methodList=jclass.getMethods();  for (  Method method : methodList) {    if (method.isAbstract() || method.isNative()) {      continue;    }    if (methodName != null && !method.getName().equals(methodName)) {      continue;    }    MethodDescriptor descriptor=DescriptorFactory.instance().getMethodDescriptor(jclass,method);    MethodGen methodGen=new MethodGen(method,jclass.getClassName(),classGen.getConstantPool());    CFGBuilder cfgBuilder=new BetterCFGBuilder2(descriptor,methodGen);    cfgBuilder.build();    CFG cfg=cfgBuilder.getCFG();    CFGPrinter cfgPrinter=new CFGPrinter(cfg);    System.out.println("---------------------------------------------------------------------");    System.out.println("Method: " + SignatureConverter.convertMethodSignature(methodGen));    System.out.println("---------------------------------------------------------------------");    cfgPrinter.print(System.out);  }}  }
class C{  public static PrintWriter newPrintWriter(OutputStream stream){  return new GroovyPrintWriter(stream);}  }
class C{  protected void unfilteredNextNode(){  if (referenceNode == null) {    return;  }  if (referenceNode.getNodeType() != Node.ENTITY_REFERENCE_NODE || expandEntityReferences) {    Node n=referenceNode.getFirstChild();    if (n != null) {      referenceNode=n;      return;    }  }  Node n=referenceNode.getNextSibling();  if (n != null) {    referenceNode=n;    return;  }  n=referenceNode;  while ((n=n.getParentNode()) != null && n != root) {    Node t=n.getNextSibling();    if (t != null) {      referenceNode=t;      return;    }  }  referenceNode=null;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void testUpdate5() throws SQLException {  DatabaseCreator.fillFKCascadeTable(conn);  statement.executeUpdate("UPDATE " + DatabaseCreator.PARENT_TABLE + " SET id = 5 WHERE id = 1;");  ResultSet r=statement.executeQuery("SELECT COUNT(*) " + "FROM " + DatabaseCreator.FKCASCADE_TABLE + " WHERE name_id = 1;");  r.next();  assertEquals("Should be 2 rows",2,r.getInt(1));  r=statement.executeQuery("SELECT COUNT(*) " + "FROM " + DatabaseCreator.FKCASCADE_TABLE + " WHERE name_id = 5;");  r.next();  assertEquals("Should be 0 rows",0,r.getInt(1));  r.close();}  }
class C{  public ByteArrayTag(byte... value){  super(TagType.BYTE_ARRAY);  this.value=value;}  }
class C{  public void assertEqual(float expected,float actual,double maxRelativeError,String errorMessage){  TestUtils.assertEqual(expected,actual,maxRelativeError,errorMessage);}  }
class C{  private void handleNumericAttribute(Instances trainInstances) throws Exception {  int firstMiss;  int next=1;  int last=0;  int splitIndex=-1;  double currentInfoGain;  double defaultEnt;  double minSplit;  Instance instance;  int i;  m_distribution=new Distribution(2,trainInstances.numClasses());  Enumeration<Instance> enu=trainInstances.enumerateInstances();  i=0;  while (enu.hasMoreElements()) {    instance=enu.nextElement();    if (instance.isMissing(m_attIndex)) {      break;    }    m_distribution.add(1,instance);    i++;  }  firstMiss=i;  minSplit=0.1 * (m_distribution.total()) / (trainInstances.numClasses());  if (Utils.smOrEq(minSplit,m_minNoObj)) {    minSplit=m_minNoObj;  } else   if (Utils.gr(minSplit,25)) {    minSplit=25;  }  if (Utils.sm(firstMiss,2 * minSplit)) {    return;  }  defaultEnt=infoGainCrit.oldEnt(m_distribution);  while (next < firstMiss) {    if (trainInstances.instance(next - 1).value(m_attIndex) + 1e-5 < trainInstances.instance(next).value(m_attIndex)) {      m_distribution.shiftRange(1,0,trainInstances,last,next);      if (Utils.grOrEq(m_distribution.perBag(0),minSplit) && Utils.grOrEq(m_distribution.perBag(1),minSplit)) {        currentInfoGain=infoGainCrit.splitCritValue(m_distribution,m_sumOfWeights,defaultEnt);        if (Utils.gr(currentInfoGain,m_infoGain)) {          m_infoGain=currentInfoGain;          splitIndex=next - 1;        }        m_index++;      }      last=next;    }    next++;  }  if (m_index == 0) {    return;  }  if (m_useMDLcorrection) {    m_infoGain=m_infoGain - (Utils.log2(m_index) / m_sumOfWeights);  }  if (Utils.smOrEq(m_infoGain,0)) {    return;  }  m_numSubsets=2;  m_splitPoint=(trainInstances.instance(splitIndex + 1).value(m_attIndex) + trainInstances.instance(splitIndex).value(m_attIndex)) / 2;  if (m_splitPoint == trainInstances.instance(splitIndex + 1).value(m_attIndex)) {    m_splitPoint=trainInstances.instance(splitIndex).value(m_attIndex);  }  m_distribution=new Distribution(2,trainInstances.numClasses());  m_distribution.addRange(0,trainInstances,0,splitIndex + 1);  m_distribution.addRange(1,trainInstances,splitIndex + 1,firstMiss);  m_gainRatio=gainRatioCrit.splitCritValue(m_distribution,m_sumOfWeights,m_infoGain);}  }
class C{  public static boolean isEdgeListItem(Context context,AccessibilityNodeInfoCompat node,int direction,NodeFilter filter){  if (node == null) {    return false;  }  if ((direction <= 0) && isMatchingEdgeListItem(context,node,NodeFocusFinder.SEARCH_BACKWARD,FILTER_SCROLL_BACKWARD.and(filter))) {    return true;  }  if ((direction >= 0) && isMatchingEdgeListItem(context,node,NodeFocusFinder.SEARCH_FORWARD,FILTER_SCROLL_FORWARD.and(filter))) {    return true;  }  return false;}  }
class C{  public static boolean hasStatus(byte[] receivedApdu,byte[] statusCode) throws IOException {  byte[] receivedStatus=statusBytes(receivedApdu);  return receivedStatus[0] == statusCode[0] && receivedStatus[1] == statusCode[1];}  }
class C{  public double mahalanobisDistance(NumberVector vec){  double agg=0.;  for (int i=0; i < variances.length; i++) {    double diff=vec.doubleValue(i) - mean[i];    agg+=diff / variances[i] * diff;  }  return agg;}  }
class C{  public void widgetSelected(SelectionEvent e){  List list=((List)e.widget);  Spec spec=ToolboxHandle.getCurrentSpec();  if (spec != null) {    spec.setModuleToShow(list.getSelection()[0]);    String moduleName=list.getSelection()[0];    spec.setModuleToShow(list.getSelection()[0]);    int idx=selectString(moduleNames,moduleName);    if (idx != -1) {      setUseMarkers(showUses[idx],moduleName,spec);    }  }}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  String inputHeader2=args[1];  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");    WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData1=inputFile1.getNoDataValue();    double noData2=inputFile2.getNoDataValue();    if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {      showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");      return;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData1);    outputFile.setPreferredPalette("black_white.pal");    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      data2=inputFile2.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        z2=data2[col];        if ((z1 != noData1) && (z2 != noData2)) {          if (z1 != 0 && z2 == 0) {            outputFile.setValue(row,col,1);          } else {            outputFile.setValue(row,col,0);          }        } else {          outputFile.setValue(row,col,noData1);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    inputFile2.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static boolean isSamsung(){  return sBuildModel.startsWith("gt-") || sBuildModel.contains("samsung") || sBuildModel.startsWith("sgh-")|| sBuildModel.startsWith("sph-")|| sBuildModel.startsWith("sch-");}  }
class C{  private void extractNalUnitHeader(int position,Buffer input){  if (mNalUnitHeader == null) {    mNalUnitHeader=NalUnitHeader.extract(position,(byte[])input.getData());  } else {    NalUnitHeader.extract(position,(byte[])input.getData(),mNalUnitHeader);  }}  }
class C{  private boolean conditionL0(String value,int index){  if (index == value.length() - 3 && contains(value,index - 1,4,"ILLO","ILLA","ALLE")) {    return true;  } else   if ((contains(value,value.length() - 2,2,"AS","OS") || contains(value,value.length() - 1,1,"A","O")) && contains(value,index - 1,4,"ALLE")) {    return true;  } else {    return false;  }}  }
class C{  public void test_prefixNamespaceOverride(){  final IIndexManager indexManager=null;  final Properties properties=new Properties();  final String namespace="foo.baz";  final String globalName="bigdata.bar";  final String defaultValue="goo";  final String overrideName=Configuration.getOverrideProperty(namespace,globalName);  final String overrideValue="boo";  assertEquals(defaultValue,Configuration.getProperty(indexManager,properties,namespace,globalName,defaultValue));  properties.setProperty(overrideName,overrideValue);  assertEquals(overrideValue,Configuration.getProperty(indexManager,properties,namespace,globalName,defaultValue));}  }
class C{  private void siftUp(int k,E x){  if (comparator != null)   siftUpUsingComparator(k,x); else   siftUpComparable(k,x);}  }
class C{  public MediaFormat(){  mMap=new HashMap<String,Object>();}  }
class C{  private void moveTransitToQueue(final double now){  QVehicle veh;  List<QVehicle> departingTransitVehicles=null;  while ((veh=transitVehicleStopQueue.peek()) != null) {    if (veh.getEarliestLinkExitTime() > now) {      break;    }    if (departingTransitVehicles == null) {      departingTransitVehicles=new LinkedList<QVehicle>();    }    departingTransitVehicles.add(transitVehicleStopQueue.poll());  }  if (departingTransitVehicles != null) {    ListIterator<QVehicle> iter=departingTransitVehicles.listIterator(departingTransitVehicles.size());    while (iter.hasPrevious()) {      this.vehQueue.addFirst(iter.previous());    }  }}  }
class C{  public void deactivate(URI id){  doDeactivate(id);}  }
class C{  public KDTree(List<Datum> data,int leafCapacity){  this.leafCapacity=leafCapacity;  this.k=data.get(0).metrics().getDimension();  this.boundaries=new double[k][2];  boundaries=AlgebraUtils.getBoundingBox(data);  if (data.size() > this.leafCapacity) {    double[] differences=new double[this.k];    for (int i=0; i < k; i++) {      differences[i]=this.boundaries[i][1] - this.boundaries[i][0];    }    int widestDimension=0;    double maxDidth=-1;    for (int i=0; i < k; i++) {      if (differences[i] > maxDidth) {        maxDidth=differences[i];        widestDimension=i;      }    }    this.splitDimension=widestDimension;    Collections.sort(data,new DatumComparator(splitDimension));    int splitIndex=data.size() / 2;    Datum belowSplit=data.get(splitIndex - 1);    Datum aboveSplit=data.get(splitIndex);    this.splitValue=0.5 * (aboveSplit.metrics().getEntry(splitDimension) + belowSplit.metrics().getEntry(splitDimension));    this.loChild=new KDTree(data.subList(0,splitIndex),leafCapacity);    this.hiChild=new KDTree(data.subList(splitIndex,data.size()),leafCapacity);    this.nBelow=data.size();    this.mean=(loChild.mean.mapMultiply(loChild.nBelow).add(hiChild.mean.mapMultiply(hiChild.nBelow)).mapDivide(loChild.nBelow + hiChild.nBelow));  } else {    this.items=data;    this.nBelow=data.size();    RealMatrix ret=new Array2DRowRealMatrix(data.size(),this.k);    RealVector sum=new ArrayRealVector(this.k);    int index=0;    for (    Datum d : data) {      ret.setRow(index,d.metrics().toArray());      sum=sum.add(d.metrics());      index+=1;    }    this.mean=sum.mapDivide(this.nBelow);  }}  }
class C{  public T visibility(int visibility){  if (view != null && view.getVisibility() != visibility) {    view.setVisibility(visibility);  }  return self();}  }
class C{  private void decodeSubscription(ByteBuf in,SubscribeMessage message) throws UnsupportedEncodingException {  String topic=Utils.decodeString(in);  if (topic.length() == 0) {    throw new CorruptedFrameException("Received a SUBSCRIBE with empty topic filter");  }  byte qosByte=in.readByte();  if ((qosByte & 0xFC) > 0) {    throw new CorruptedFrameException("subscribe MUST have QoS byte with reserved buts to 0, found " + Integer.toHexString(qosByte));  }  byte qos=(byte)(qosByte & 0x03);  message.addSubscription(new SubscribeMessage.Couple(qos,topic));}  }
class C{  public Array diagonal(){  QL.require(rows() == cols(),MATRIX_MUST_BE_SQUARE);  final Array result=new Array(cols());  int addr=0;  for (int i=0; i < cols(); i++) {    result.$[i]=$[addr];    addr+=cols() + 1;  }  return result;}  }
class C{  @Override public boolean othersDeletesAreVisible(int type){  debugCodeCall("othersDeletesAreVisible",type);  return false;}  }
class C{  @Override public Object createFromString(EDataType eDataType,String initialValue){switch (eDataType.getClassifierID()) {case SGraphPackage.ENTRY_KIND:    return createEntryKindFromString(eDataType,initialValue);case SGraphPackage.CHOICE_KIND:  return createChoiceKindFromString(eDataType,initialValue);default :throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");}}  }
class C{  boolean persistManagedSchemaToZooKeeper(boolean createOnly){  final ZkSolrResourceLoader zkLoader=(ZkSolrResourceLoader)loader;  final ZkController zkController=zkLoader.getZkController();  final SolrZkClient zkClient=zkController.getZkClient();  final String managedSchemaPath=zkLoader.getConfigSetZkPath() + "/" + managedSchemaResourceName;  boolean success=true;  boolean schemaChangedInZk=false;  try {    StringWriter writer=new StringWriter();    persist(writer);    final byte[] data=writer.toString().getBytes(StandardCharsets.UTF_8);    if (createOnly) {      try {        zkClient.create(managedSchemaPath,data,CreateMode.PERSISTENT,true);        schemaZkVersion=0;        log.info("Created and persisted managed schema znode at " + managedSchemaPath);      } catch (      KeeperException.NodeExistsException e) {        log.info("Managed schema znode at " + managedSchemaPath + " already exists - no need to create it");      }    } else {      try {        Stat stat=zkClient.setData(managedSchemaPath,data,schemaZkVersion,true);        schemaZkVersion=stat.getVersion();        log.info("Persisted managed schema version " + schemaZkVersion + " at "+ managedSchemaPath);      } catch (      KeeperException.BadVersionException e) {        log.error("Bad version when trying to persist schema using " + schemaZkVersion + " due to: "+ e);        success=false;        schemaChangedInZk=true;      }    }  } catch (  Exception e) {    if (e instanceof InterruptedException) {      Thread.currentThread().interrupt();    }    final String msg="Error persisting managed schema at " + managedSchemaPath;    log.error(msg,e);    throw new SolrException(ErrorCode.SERVER_ERROR,msg,e);  }  if (schemaChangedInZk) {    String msg="Failed to persist managed schema at " + managedSchemaPath + " - version mismatch";    log.info(msg);    throw new SchemaChangedInZkException(ErrorCode.CONFLICT,msg + ", retry.");  }  return success;}  }
class C{  KeyResolverSpi itemInternalKeyResolver(int i){  return this.internalKeyResolvers.get(i);}  }
class C{  public static Matrix diag(Matrix A){  Matrix diag=null;  if (A.getColumnDimension() == 1 || A.getRowDimension() == 1) {    if (A.getColumnDimension() == 1) {      diag=new Matrix(A.getRowDimension(),A.getRowDimension());      for (int i=0; i < diag.getColumnDimension(); i++)       diag.set(i,i,A.get(i,0));    } else {      diag=new Matrix(A.getColumnDimension(),A.getColumnDimension());      for (int i=0; i < diag.getRowDimension(); i++)       diag.set(i,i,A.get(0,i));    }  } else {    diag=new Matrix(A.getRowDimension(),1);    for (int i=0; i < diag.getRowDimension(); i++)     diag.set(i,0,A.get(i,i));  }  return diag;}  }
class C{  protected ScopedClassPool(ClassLoader cl,ClassPool src,ScopedClassPoolRepository repository,boolean isTemp){  super(src);  this.repository=repository;  this.classLoader=new WeakReference(cl);  if (cl != null) {    classPath=new LoaderClassPath(cl);    this.insertClassPath(classPath);  }  childFirstLookup=true;  if (!isTemp && cl == null) {    isBootstrapCl=true;  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:08.254 -0500",hash_original_method="6F3415F478603350217F65D672585814",hash_generated_method="0E236ABE9114E40AAA3268CD6473B8F7") public MalformedURLException(){}  }
class C{  public void addNodes(NodeSet ns){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));  addNodes((NodeIterator)ns);}  }
class C{  public String toString(){  return "null";}  }
class C{  private void resizeFramebufferTexture(){  glDeleteTextures(tex);  glDeleteBuffers(imageBuffer);  createFramebufferTexture();  createFramebufferBuffer();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:09.116 -0500",hash_original_method="D55849C3A95A52797F56CE21D0AC9A77",hash_generated_method="9763415CD958E82BBBFBC321C58C931A") public void copy1DRangeFrom(int off,int count,int[] d){  validateIsInt32();  copy1DRangeFromUnchecked(off,count,d);}  }
class C{  public void addConflict(final Conflict conflict){  Check.notNull(conflict,"conflict");  ListenerCategory listenerType;  int eventType;synchronized (conflictLock) {    if (conflicts.containsKey(conflict.getConflictID())) {      final Conflict oldConflict=conflicts.remove(conflict.getConflictID());      conflictsByLocalPath.remove(oldConflict.getLocalPath());      listenerType=MODIFIED;      eventType=ConflictCacheEvent.MODIFIED;    } else {      listenerType=ADDED;      eventType=ConflictCacheEvent.ADDED;    }    conflicts.put(conflict.getConflictID(),conflict);    conflictsByLocalPath.put(conflict.getLocalPath(),conflict);  }synchronized (listenerLock) {    final ConflictCacheListener listener=(ConflictCacheListener)conflictListeners.getListener(listenerType);    final ConflictCacheEvent e=new ConflictCacheEvent(this,eventType,conflict);    listener.onConflictEvent(e);  }}  }
class C{  private void updateColumnMaps(int columnIndex){  deleteColumnIndexFromMaps(columnIndex);  addColumnToColumnsMaps(columnIndex,columnMetaData.get(columnIndex));}  }
class C{  public TaskList relinkTargetVolumesToSnapshotSession(URI snapSessionURI,SnapshotSessionRelinkTargetsParam param){  s_logger.info("START relink targets to snapshot session {}",snapSessionURI);  BlockSnapshotSession snapSession=BlockSnapshotSessionUtils.querySnapshotSession(snapSessionURI,_uriInfo,_dbClient,true);  BlockObject snapSessionSourceObj=null;  List<BlockObject> snapSessionSourceObjs=getAllSnapshotSessionSources(snapSession);  snapSessionSourceObj=snapSessionSourceObjs.get(0);  Project project=BlockSnapshotSessionUtils.querySnapshotSessionSourceProject(snapSessionSourceObj,_dbClient);  BlockSnapshotSessionApi snapSessionApiImpl=determinePlatformSpecificImplForSource(snapSessionSourceObj);  List<URI> linkedTargetURIs=param.getLinkedTargetIds();  snapSessionApiImpl.validateRelinkSnapshotSessionTargets(snapSessionSourceObj,snapSession,project,linkedTargetURIs,_uriInfo);  String taskId=UUID.randomUUID().toString();  Operation op=new Operation();  op.setResourceType(getRelinkResourceOperationTypeEnum(snapSession));  _dbClient.createTaskOpStatus(BlockSnapshotSession.class,snapSessionURI,taskId,op);  snapSession.getOpStatus().put(taskId,op);  TaskResourceRep response=toTask(snapSession,taskId);  TaskList taskList=new TaskList();  taskList.addTask(response);  try {    snapSessionApiImpl.relinkTargetVolumesToSnapshotSession(snapSessionSourceObj,snapSession,linkedTargetURIs,taskId);  } catch (  Exception e) {    String errorMsg=format("Failed to relink targets to snapshot session %s: %s",snapSessionURI,e.getMessage());    ServiceCoded sc=null;    if (e instanceof ServiceCoded) {      sc=(ServiceCoded)e;    } else {      sc=APIException.internalServerErrors.genericApisvcError(errorMsg,e);    }    cleanupFailure(Arrays.asList(response),new ArrayList<DataObject>(),errorMsg,taskId,sc);    throw e;  }  auditOp(OperationTypeEnum.RELINK_SNAPSHOT_SESSION_TARGET,true,AuditLogManager.AUDITOP_BEGIN,snapSessionURI.toString(),snapSessionSourceObj.getId().toString(),snapSessionSourceObj.getStorageController().toString());  s_logger.info("FINISH relink targets to snapshot session {}",snapSessionURI);  return taskList;}  }
class C{  public void writeField(String name,long value) throws java.io.IOException {  writeField(name,Long.toString(value));}  }
class C{  @Deprecated public void addPreferencesFromResource(int preferencesResId){  requirePreferenceManager();  setPreferenceScreen(mPreferenceManager.inflateFromResource(this,preferencesResId,getPreferenceScreen()));}  }
class C{  public static boolean isFullCopyDetached(Volume volume,DbClient dbClient){  boolean result=false;  String replicaState=volume.getReplicaState();  if (!isVolumeFullCopy(volume,dbClient) && replicaState != null && !replicaState.isEmpty()) {    ReplicationState state=ReplicationState.getEnumValue(replicaState);    if (state != null && state == ReplicationState.DETACHED) {      result=true;    }  }  return result;}  }
class C{  public Pkcs11SignatureToken(String pkcs11Path,PasswordInputCallback callback,int slotIndex){  this(pkcs11Path,callback);  this.slotIndex=slotIndex;}  }
class C{  public AttachNotSupportedException(){  super();}  }
class C{  private void changeSourceDocumentState(SourceDocument aSourceDocument,User aUser,SourceDocumentStateTransition aSourceDocumentStateTransition) throws IOException {  aSourceDocument.setState(SourceDocumentStateTransition.transition(aSourceDocumentStateTransition));  repository.createSourceDocument(aSourceDocument,aUser);}  }
class C{  public static boolean compressorRunning(byte id){  return enabled_compressors[id] && loop_compressors[id] && !compressor_pressure[id];}  }
class C{  @Override public Map<String,Runnable> handleMenu(final IAgent data,final int x,final int y){  return null;}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);  builder.addElement(Draft.KEY);}  }
class C{  @Override protected Instance process(Instance instance) throws Exception {  Instance result;  Attribute att;  double[] values;  int i;  values=new double[instance.numAttributes()];  for (i=0; i < instance.numAttributes(); i++) {    att=instance.attribute(i);    if (!att.isNominal() || !m_AttributeIndices.isInRange(i) || instance.isMissing(i)) {      values[i]=instance.value(i);    } else {      values[i]=m_NewOrder[i][(int)instance.value(i)];    }  }  result=new DenseInstance(instance.weight(),values);  return result;}  }
class C{  public LocalDateTime addToCopy(int value){  return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(),value));}  }
class C{  default <R>R unwrap(){  return (R)this;}  }
class C{  int y2index(int y){  if (!validY(y)) {    return -1;  }  int i=(y - MARGIN) / getItemHeight() + vsb.getValue();  int last=lastItemDisplayed();  if (i > last) {    i=last;  }  return i;}  }
class C{  public static String toString(InputStream input,Charset encoding) throws IOException {  StringBuilderWriter sw=new StringBuilderWriter();  copy(input,sw,encoding);  return sw.toString();}  }
class C{  public void fireOrderChangedEvent(){  fireEvent(EventType.ORDER_CHANGED);}  }
class C{  public TicTacToeState copy(){  TicTacToeState state=new TicTacToeState(new TicTacToeBoard(board),logic.copy());  state._ctr=this._ctr;  return state;}  }
class C{  int medianExclusiveTimeMicros(){switch (type) {case LOAD:    return loadedClass.medianLoadTimeMicros();case INIT:  return loadedClass.medianInitTimeMicros();default :throw new AssertionError();}}  }
class C{  @Override public void preProcess(ResultProducer rp) throws Exception {  m_ResultProducer=rp;  updateResultsTableName(m_ResultProducer);}  }
class C{  public boolean execute() throws SQLException {  checkValidity();synchronized (getSynchronizationObject()) {    notifyStatementStarted();    boolean hasResultSet=internalExecute(isExecuteProcedureStatement);    if (!hasResultSet)     notifyStatementCompleted();    return hasResultSet;  }}  }
class C{  @Override public void merge(MeasureAggregator aggregator){  SumDistinctBigDecimalAggregator distinctAggregator=(SumDistinctBigDecimalAggregator)aggregator;  if (!aggregator.isFirstTime()) {    agg(distinctAggregator.valueSet);    firstTime=false;  }}  }
class C{  public CallbackProxy(Context context,WebViewClassic w){  mContext=context;  mWebView=w;  mBackForwardList=new WebBackForwardListClassic(this);}  }
class C{  public Builder indexConfiguration(IndexConfiguration indexConfiguration){  this.indexConfiguration=indexConfiguration;  return this;}  }
class C{  public static <V>List<V> invertList(List<V> sourceList){  if (isEmpty(sourceList)) {    return sourceList;  }  List<V> invertList=new ArrayList<V>(sourceList.size());  for (int i=sourceList.size() - 1; i >= 0; i--) {    invertList.add(sourceList.get(i));  }  return invertList;}  }
class C{  public android.app.Notification build(){  android.support.v7.app.NotificationCompat.Builder notificationBuilder=new android.support.v7.app.NotificationCompat.Builder(context);  notificationBuilder.setContentTitle(attributes.subject).setContentText(attributes.message).setSmallIcon(context.getResources().getIdentifier(attributes.smallIcon,"mipmap",context.getPackageName())).setAutoCancel(attributes.autoClear).setContentIntent(getContentIntent());  if (attributes.priority != null) {    notificationBuilder.setPriority(attributes.priority);  }  if (attributes.largeIcon != null) {    int largeIconId=context.getResources().getIdentifier(attributes.largeIcon,"drawable",context.getPackageName());    Bitmap largeIcon=BitmapFactory.decodeResource(context.getResources(),largeIconId);    notificationBuilder.setLargeIcon(largeIcon);  }  if (attributes.group != null) {    notificationBuilder.setGroup(attributes.group);    notificationBuilder.setGroupSummary(true);  }  if (attributes.inboxStyle) {    android.support.v7.app.NotificationCompat.InboxStyle inboxStyle=new android.support.v7.app.NotificationCompat.InboxStyle();    if (attributes.inboxStyleBigContentTitle != null) {      inboxStyle.setBigContentTitle(attributes.inboxStyleBigContentTitle);    }    if (attributes.inboxStyleSummaryText != null) {      inboxStyle.setSummaryText(attributes.inboxStyleSummaryText);    }    if (attributes.inboxStyleLines != null) {      for (int i=0; i < attributes.inboxStyleLines.size(); i++) {        inboxStyle.addLine(Html.fromHtml(attributes.inboxStyleLines.get(i)));      }    }    notificationBuilder.setStyle(inboxStyle);    Log.i("ReactSystemNotification","set inbox style!!");  } else {    int defaults=0;    if ("default".equals(attributes.sound)) {      defaults=defaults | android.app.Notification.DEFAULT_SOUND;    }    if ("default".equals(attributes.vibrate)) {      defaults=defaults | android.app.Notification.DEFAULT_VIBRATE;    }    if ("default".equals(attributes.lights)) {      defaults=defaults | android.app.Notification.DEFAULT_LIGHTS;    }    notificationBuilder.setDefaults(defaults);  }  if (attributes.onlyAlertOnce != null) {    notificationBuilder.setOnlyAlertOnce(attributes.onlyAlertOnce);  }  if (attributes.tickerText != null) {    notificationBuilder.setTicker(attributes.tickerText);  }  if (attributes.when != null) {    notificationBuilder.setWhen(attributes.when);    notificationBuilder.setShowWhen(true);  }  if (attributes.bigText != null) {    notificationBuilder.setStyle(new android.support.v7.app.NotificationCompat.BigTextStyle().bigText(attributes.bigText));  } else   if (attributes.bigStyleUrlImgage != null && attributes.bigStyleUrlImgage != "") {    Bitmap bigPicture=null;    try {      Log.i("ReactSystemNotification","start to get image from URL : " + attributes.bigStyleUrlImgage);      URL url=new URL(attributes.bigStyleUrlImgage);      bigPicture=BitmapFactory.decodeStream(url.openStream());      Log.i("ReactSystemNotification","finishing to get image from URL");    } catch (    Exception e) {      Log.e("ReactSystemNotification","Error when getting image from URL" + e.getStackTrace());    }    if (bigPicture != null) {      notificationBuilder.setStyle(new NotificationCompat.BigPictureStyle().bigPicture(bigPicture));    }  } else   if (attributes.bigStyleImageBase64 != null) {    Bitmap bigPicture=null;    try {      Log.i("ReactSystemNotification","start to convert bigStyleImageBase64 to bitmap");      byte[] bitmapAsBytes=Base64.decode(attributes.bigStyleImageBase64.getBytes(),Base64.DEFAULT);      bigPicture=BitmapFactory.decodeByteArray(bitmapAsBytes,0,bitmapAsBytes.length);      Log.i("ReactSystemNotification","finished to convert bigStyleImageBase64 to bitmap");    } catch (    Exception e) {      Log.e("ReactSystemNotification","Error when converting base 64 to Bitmap" + e.getStackTrace());    }    if (bigPicture != null) {      notificationBuilder.setStyle(new NotificationCompat.BigPictureStyle().bigPicture(bigPicture));    }  }  if (attributes.color != null) {    notificationBuilder.setColor(Color.parseColor(attributes.color));  }  if (attributes.subText != null) {    notificationBuilder.setSubText(attributes.subText);  }  if (attributes.progress != null) {    if (attributes.progress < 0 || attributes.progress > 1000) {      notificationBuilder.setProgress(1000,100,true);    } else {      notificationBuilder.setProgress(1000,attributes.progress,false);    }  }  if (attributes.number != null) {    notificationBuilder.setNumber(attributes.number);  }  if (attributes.localOnly != null) {    notificationBuilder.setLocalOnly(attributes.localOnly);  }  if (attributes.sound != null) {    notificationBuilder.setSound(Uri.parse(attributes.sound));  }  return notificationBuilder.build();}  }
class C{  public AssertionFailedError(String message){  super(defaultString(message));}  }
class C{  public static boolean checkMinTopologySize(ClusterGroup grp,int size){  int prjSize=grp.nodes().size();  if (prjSize < size) {    System.err.println(">>> Please start at least " + size + " cluster nodes to run example.");    return false;  }  return true;}  }
class C{  public static String readAsUTF8(InputStream in) throws IOException {  return new String(read(in),"UTF-8");}  }
class C{  public void run(){  String lastUsedPath=getDialogSetting(LAST_PATH_SETTING);  if (lastUsedPath == null) {    lastUsedPath="";  }  FileDialog dialog=new FileDialog(getShell(),SWT.MULTI);  dialog.setText("File Selection");  dialog.setFilterPath(lastUsedPath);  String res=dialog.open();  if (res == null) {    return;  }  IPath filterPath=new Path(dialog.getFilterPath());  IRuntimeClasspathEntry[] elems=new IRuntimeClasspathEntry[1];  IPath path=new Path(res).makeAbsolute();  elems[0]=JavaRuntime.newArchiveRuntimeClasspathEntry(path);  setDialogSetting(LAST_PATH_SETTING,filterPath.toOSString());  getViewer().addEntries(elems);}  }
class C{  public void resetAffine(){  impl.resetAffine(nativeGraphics);  scaleX=1;  scaleY=1;}  }
class C{  public void test_noCycles__batch_001(){  final int CAPACITY=5;  final TxDag dag=new TxDag(CAPACITY);  final String tx0="tx0";  final String tx1="tx1";  final String tx2="tx2";  final String tx3="tx3";  final String tx4="tx4";  dag.addEdges(tx0,new Object[]{tx1,tx2,tx4});  dag.addEdges(tx4,new Object[]{tx3});}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  private static Query makeLatestTimestampQuery(String namespace){  Query.Builder timestampQuery=Query.newBuilder();  if (namespace == null) {    timestampQuery.addKindBuilder().setName("__Stat_Total__");  } else {    timestampQuery.addKindBuilder().setName("__Stat_Ns_Total__");  }  timestampQuery.addOrder(makeOrder("timestamp",DESCENDING));  timestampQuery.setLimit(Int32Value.newBuilder().setValue(1));  return timestampQuery.build();}  }
class C{  public static String fromCacheOrNew(String s){  if (!SysProperties.OBJECT_CACHE) {    return s;  }  if (s == null) {    return s;  } else   if (s.length() == 0) {    return "";  }  int hash=s.hashCode();  String[] cache=getCache();  int index=hash & (SysProperties.OBJECT_CACHE_SIZE - 1);  if (cache == null) {    return s;  }  String cached=cache[index];  if (cached != null) {    if (s.equals(cached)) {      return cached;    }  }  s=new String(s);  cache[index]=s;  return s;}  }
class C{  @SuppressWarnings("deprecation") public CLImage2D createImage2DFromGLTexture2D(CLMem.Usage usage,GLTextureTarget textureTarget,int texture,int mipLevel){}  }
class C{  @Override public void receive(DatagramPacket p) throws IOException {  multiplexing.receive(this,p);}  }
class C{  @Deprecated public BaseBlock rawGetBlock(final Vector position){  return bypassAll.getLazyBlock(position);}  }
class C{  public boolean contains(final double[] a){  int i=d, l=a.length;  long bits[]=this.bits;  while (i-- != 0)   if (!get(bits,hash(a,l,i)))   return false;  return true;}  }
class C{  protected void expandCluster(Relation<O> relation,RangeQuery<O> rangeQuery,DBIDRef startObjectID,ArrayModifiableDBIDs seeds,FiniteProgress objprog,IndefiniteProgress clusprog){  DoubleDBIDList neighbors=rangeQuery.getRangeForDBID(startObjectID,epsilon);  ncounter+=neighbors.size();  if (neighbors.size() < minpts) {    noise.add(startObjectID);    processedIDs.add(startObjectID);    if (objprog != null) {      objprog.incrementProcessed(LOG);    }    return;  }  ModifiableDBIDs currentCluster=DBIDUtil.newArray();  currentCluster.add(startObjectID);  processedIDs.add(startObjectID);  assert (seeds.size() == 0);  seeds.clear();  processNeighbors(neighbors.iter(),currentCluster,seeds);  DBIDVar o=DBIDUtil.newVar();  while (!seeds.isEmpty()) {    neighbors=rangeQuery.getRangeForDBID(seeds.pop(o),epsilon);    ncounter+=neighbors.size();    if (neighbors.size() >= minpts) {      processNeighbors(neighbors.iter(),currentCluster,seeds);    }    if (objprog != null) {      objprog.incrementProcessed(LOG);    }  }  resultList.add(currentCluster);  if (clusprog != null) {    clusprog.setProcessed(resultList.size(),LOG);  }}  }
class C{  protected double applyFunction(double value){switch (m_operator) {case 'l':    return Math.log(value);case 'b':  return Math.abs(value);case 'c':return Math.cos(value);case 'e':return Math.exp(value);case 's':return Math.sqrt(value);case 'f':return Math.floor(value);case 'h':return Math.ceil(value);case 'r':return Math.rint(value);case 't':return Math.tan(value);case 'n':return Math.sin(value);}return Double.NaN;}  }
class C{  public boolean containsLeftNeighbor(CLIQUEInterval i){  CLIQUEInterval interval=getInterval(i.getDimension());  return (interval != null) && (interval.getMax() == i.getMin());}  }
class C{  public static synchronized InterfaceMethodSignature findOrCreate(MemberReference ref){  InterfaceMethodSignature key=new InterfaceMethodSignature(ref.getName(),ref.getDescriptor(),nextId + 1);  InterfaceMethodSignature val=dictionary.get(key);  if (val != null)   return val;  nextId++;  dictionary.add(key);  return key;}  }
class C{  public boolean isUnderBuildAction(){  StackTraceElement[] stackTrace=new Exception().getStackTrace();  for (  StackTraceElement stackTraceElement : stackTrace) {    if (!stackTraceElement.getMethodName().equals("run")) {      continue;    }    String className=stackTraceElement.getClassName();    if (className.endsWith(".BuildAction") || className.endsWith(".GlobalBuildAction")) {      return true;    }  }  return false;}  }
class C{  private void initialize(){  if (selection != null && selection.isEmpty() == false && selection instanceof IStructuredSelection) {    IStructuredSelection ssel=(IStructuredSelection)selection;    if (ssel.size() > 1)     return;    Object obj=ssel.getFirstElement();    if (obj instanceof IResource) {      IContainer container;      if (obj instanceof IContainer)       container=(IContainer)obj; else       container=((IResource)obj).getParent();      containerText.setText(container.getFullPath().toString());    }  }  fileText.setText("new_file.ump");}  }
class C{  public Node renameNode(Node n,String namespaceURI,String name) throws DOMException {  return n;}  }
class C{  private static void decodeTextSegment(BitSource bits,StringBuilder result) throws FormatException {  boolean upperShift=false;  int[] cValues=new int[3];  int shift=0;  do {    if (bits.available() == 8) {      return;    }    int firstByte=bits.readBits(8);    if (firstByte == 254) {      return;    }    parseTwoBytes(firstByte,bits.readBits(8),cValues);    for (int i=0; i < 3; i++) {      int cValue=cValues[i];switch (shift) {case 0:        if (cValue < 3) {          shift=cValue + 1;        } else         if (cValue < TEXT_BASIC_SET_CHARS.length) {          char textChar=TEXT_BASIC_SET_CHARS[cValue];          if (upperShift) {            result.append((char)(textChar + 128));            upperShift=false;          } else {            result.append(textChar);          }        } else {          throw FormatException.getFormatInstance();        }      break;case 1:    if (upperShift) {      result.append((char)(cValue + 128));      upperShift=false;    } else {      result.append((char)cValue);    }  shift=0;break;case 2:if (cValue < C40_SHIFT2_SET_CHARS.length) {char c40char=C40_SHIFT2_SET_CHARS[cValue];if (upperShift) {  result.append((char)(c40char + 128));  upperShift=false;} else {  result.append(c40char);}} else if (cValue == 27) {result.append((char)29);} else if (cValue == 30) {upperShift=true;} else {throw FormatException.getFormatInstance();}shift=0;break;case 3:if (cValue < TEXT_SHIFT3_SET_CHARS.length) {char textChar=TEXT_SHIFT3_SET_CHARS[cValue];if (upperShift) {result.append((char)(textChar + 128));upperShift=false;} else {result.append(textChar);}shift=0;} else {throw FormatException.getFormatInstance();}break;default :throw FormatException.getFormatInstance();}}} while (bits.available() > 0);}  }
class C{  protected void removeTransfer(String digest){  this.allowedConnections.remove(digest);  this.connectionMap.remove(digest);}  }
class C{  public boolean containsValue(float val){  byte[] states=_states;  float[] vals=_values;  for (int i=vals.length; i-- > 0; ) {    if (states[i] == FULL && val == vals[i]) {      return true;    }  }  return false;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  HeapArrayOfDoublesUnion(final int nomEntries,final int numValues,final long seed){  super(new HeapArrayOfDoublesQuickSelectSketch(nomEntries,3,1f,numValues,seed));}  }
class C{  ParentNode(Locator locator){  super(locator);}  }
class C{  public boolean forEachKey(TDoubleProcedure procedure){  return forEach(procedure);}  }
class C{  public static boolean isNative(int mod){  return (mod & NATIVE) != 0;}  }
class C{  public static long endRefreshAndNotifyWaiters(HtmlSpeedHttpExchange exchange,TempRsrc refreshedRsrc,Rsrc modifiedRsrc,long maxAge,ConfigData configData){  TempRsrc tmpRsrc=refreshedRsrc;  Rsrc rsrc=tmpRsrc.replacer;  CacheStructure cache=configData.cache;synchronized (cache.globalLock) {    if (modifiedRsrc != null) {      modifiedRsrc.variant=rsrc.variant;      if (rsrc.versionUrl != null)       removeFromCache(rsrc.variant,rsrc.versionUrl,configData);      rsrc=modifiedRsrc;    }    tmpRsrc.isBeingRefreshed=false;    rsrc.isBeingLoaded=false;    rsrc.lastRefreshTime=System.currentTimeMillis();    rsrc.maxFreshTime=rsrc.lastRefreshTime + maxAge * 1000;    rsrc.lastUsageTime=rsrc.lastRefreshTime;    rsrc.maxAge=maxAge;    rsrc.host=tmpRsrc.host;    rsrc.url=tmpRsrc.url;    putInCache(rsrc.variant,rsrc.url,rsrc,configData);    if (tmpRsrc.waiters != null)     for (    LoadLock w : tmpRsrc.waiters)     w.decCount();    tmpRsrc.waiters=null;  }  return maxAge;}  }
class C{  public boolean validate() throws SchemaException {  for (  String edgeGroup : getEdgeGroups()) {    if (null != getEntity(edgeGroup)) {      LOGGER.warn("Groups must not be shared between Entity definitions and Edge definitions." + "Found edgeGroup '" + edgeGroup + "' in the collection of entities");      return false;    }  }  for (  Map.Entry<String,SchemaEdgeDefinition> elementDefEntry : getEdges().entrySet()) {    if (null == elementDefEntry.getValue()) {      throw new SchemaException("Edge definition was null for group: " + elementDefEntry.getKey());    }    if (!elementDefEntry.getValue().validate()) {      LOGGER.warn("VALIDITY ERROR: Invalid edge definition for group: " + elementDefEntry.getKey());      return false;    }  }  for (  Map.Entry<String,SchemaEntityDefinition> elementDefEntry : getEntities().entrySet()) {    if (null == elementDefEntry.getValue()) {      throw new SchemaException("Entity definition was null for group: " + elementDefEntry.getKey());    }    if (!elementDefEntry.getValue().validate()) {      LOGGER.warn("VALIDITY ERROR: Invalid entity definition for group: " + elementDefEntry.getKey());      return false;    }  }  return true;}  }
class C{  public boolean createHTML(Writer writer,boolean onlyTable,Language language){  return createHTML(writer,onlyTable,language,null);}  }
class C{  public StatTrackingEventListener(long startTime,String prefix,String info,boolean logError){  this(startTime,prefix,info,logError,null);}  }
class C{  public static <NodeType extends IViewableNode>Rectangle2D calculateBoundingBox(final Collection<NodeType> nodes){  Preconditions.checkNotNull(nodes,"Node list argument can't be null");  Preconditions.checkArgument(nodes.size() != 0,"Node list argument can't be empty");  final Rectangle2D box=new Rectangle2D.Double();  for (  final NodeType node : nodes) {    node.calcUnionRect(box);  }  return box;}  }
class C{  private double calculateAttainment(){  int count=0;  for (int i=0; i < metrics.length; i++) {    if (metrics[i][metric] >= threshold) {      count++;    }  }  return count / (double)metrics.length;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:28.854 -0500",hash_original_method="BE36FC25647C071258E2596D1C885DDC",hash_generated_method="E7DD5E17E9CF2A6AA642736E4B8EFE55") @Override public final int hashCode(){  int hc=this.targetHost.hashCode();  if (this.localAddress != null)   hc^=localAddress.hashCode();  if (this.proxyChain != null) {    hc^=proxyChain.length;    for (    HttpHost aProxyChain : proxyChain)     hc^=aProxyChain.hashCode();  }  if (this.secure)   hc^=0x11111111;  hc^=this.tunnelled.hashCode();  hc^=this.layered.hashCode();  return hc;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  @Override public String readLine() throws IOException {  if (this.pointer >= this.length - 1) {    return null;  } else {    final StringBuilder buf=new StringBuilder();    int c;    while ((c=read()) >= 0) {      if ((c == 10) || (c == 13)) {        if (((peek() == 10) || (peek() == 13)) && (peek() != c)) {          read();        }        break;      }      buf.append((char)c);    }    return buf.toString();  }}  }
class C{  protected void update(){  if (!updated) {    vertices[X]=position.x;    vertices[Y]=position.y;    vertices[Z]=position.z;  }}  }
class C{  public String nextTo(char delimiter) throws JSONException {  StringBuilder sb=new StringBuilder();  for (; ; ) {    char c=this.next();    if (c == delimiter || c == 0 || c == '\n' || c == '\r') {      if (c != 0) {        this.back();      }      return sb.toString().trim();    }    sb.append(c);  }}  }
class C{  public static void stopVM(){  stopMainLoop=true;}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.paint=SerialUtilities.readPaint(stream);  this.stroke=SerialUtilities.readStroke(stream);}  }
class C{  public void add(long l){  requestFreeSize(8);  U.longToBytes(l,data,size);  size+=8;}  }
class C{  public CFunctionSelectionTree(final IDatabase database,final IActionProvider actionProvider){  Preconditions.checkNotNull(database,"IE01575: Database argument can not be null");  Preconditions.checkNotNull(actionProvider,"IE01576: Action provider argument can not be null");  final DefaultTreeModel model=new DefaultTreeModel(null);  setModel(model);  setRootVisible(false);  model.setRoot(new CRootNode(database,model,actionProvider));  setCellRenderer(new IconNodeRenderer());  addMouseListener(new InternalMouseListener());}  }
class C{  @Override public Bundle editProperties(AccountAuthenticatorResponse response,String accountType){  throw new UnsupportedOperationException();}  }
class C{  public EmbeddedSolrServer(Path solrHome,String defaultCoreName){  this(load(new CoreContainer(SolrXmlConfig.fromSolrHome(solrHome))),defaultCoreName);}  }
class C{  public static <T>List<T> satisfy(List<T> input,Function<? super T,? extends OrderingConstraints<T>> constraintSupplier){  return satisfy(input,Function.identity(),constraintSupplier);}  }
class C{  public FilteredTree(Composite parent,int treeStyle,PatternFilter filter){  super(parent,SWT.NONE);  init(treeStyle,filter);}  }
class C{  public static ZyGraph buildGraph(final INaviView view) throws LoadCancelledException {  Preconditions.checkNotNull(view,"IE01763: View argument can't be null");  final Pair<Map<String,String>,ZyGraphViewSettings> viewSettings=loadSettings(view);  final Map<String,String> rawSettings=viewSettings.first();  final ZyGraphViewSettings graphSettings=viewSettings.second();  graphSettings.rawSettings=rawSettings;  final ZyGraphBuilder builder=new ZyGraphBuilder();  ZyGraphBuilderManager.instance().setBuilder(view,builder);  final Graph2D graph=builder.convert(view.getGraph().getNodes(),view.getGraph().getEdges(),graphSettings,view.getType() == ViewType.Native);  final ZyGraph2DView graphView=new ZyGraph2DView(graph);  final ZyGraph zyGraph=new ZyGraph(view,builder.getNodeMap(),builder.getEdgeMap(),graphSettings,graphView);  zyGraph.getView().setCenter(CViewSettingsGenerator.createDoubleSetting(rawSettings,"view_center_x",0),CViewSettingsGenerator.createDoubleSetting(rawSettings,"view_center_y",0));  zyGraph.getView().setWorldRect(CViewSettingsGenerator.createIntegerSetting(rawSettings,"world_rect_x",0),CViewSettingsGenerator.createIntegerSetting(rawSettings,"world_rect_y",0),CViewSettingsGenerator.createIntegerSetting(rawSettings,"world_rect_width",800),CViewSettingsGenerator.createIntegerSetting(rawSettings,"world_rect_height",600));  zyGraph.getView().setZoom(CViewSettingsGenerator.createDoubleSetting(rawSettings,"zoom",1));  ZyGraphBuilderManager.instance().removeBuilder(view);  return zyGraph;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:15.498 -0500",hash_original_method="457243F9D7A1AB9FD34866D85709C85D",hash_generated_method="A39955CCDB637DC031D6F4E12755F242") public boolean isReliable(){  return false;}  }
class C{  public void flush() throws IOException {  if (out == null) {    out.flush();  }}  }
class C{  private byte[] convertBitmapToBytes(final Bitmap bitmap){  int size=bitmap.getRowBytes() * bitmap.getHeight();  ByteArrayOutputStream out=new ByteArrayOutputStream(size);  try {    if (bitmap.compress(Bitmap.CompressFormat.PNG,0,out)) {      return out.toByteArray();    }    if (sLogger.isActivated()) {      sLogger.debug("Unable to convert bitmap, compression failed");    }    return null;  }  finally {    CloseableUtils.tryToClose(out);  }}  }
class C{  public void testCreateModel(){  boolean simulation=true;  SessionNode node1=new SessionNode(Type1.class);  SessionNode node2=new SessionNode(Type2.class);  SessionNode node3=new SessionNode(Type3.class);  node3.addParent(node2);  node1.addParent(node2);  node1.addParent(node3);  try {    node2.createModel(Type2.class,simulation);    node3.createModel(Type3.class,simulation);    node1.createModel(Type1.class,simulation);  } catch (  Exception e) {    e.printStackTrace();    fail("Model not created.");  }  node1.destroyModel();  assertNull(node1.getModel());}  }
class C{  protected BasePeriod(long startInstant,long endInstant,PeriodType type,Chronology chrono){  super();  type=checkPeriodType(type);  chrono=DateTimeUtils.getChronology(chrono);  iType=type;  iValues=chrono.get(this,startInstant,endInstant);}  }
class C{  public boolean isMatched(){  return matched;}  }
class C{  SolrInputDocument doc(SolrInputField... fields){  SolrInputDocument d=new SolrInputDocument();  for (  SolrInputField f : fields) {    d.put(f.getName(),f);  }  return d;}  }
class C{  public List<XmlTag> extractRoutesForMethod(@NotNull Method method){  List<XmlTag> routesForMethod=WebApiTypesFileBasedIndex.getWebApiRoutes(method);  PhpClass phpClass=method.getContainingClass();  if (phpClass == null) {    return routesForMethod;  }  for (  PhpClass parent : method.getContainingClass().getSupers()) {    for (    Method parentMethod : parent.getMethods()) {      if (parentMethod.getName().equals(method.getName())) {        routesForMethod.addAll(extractRoutesForMethod(parentMethod));      }    }  }  return routesForMethod;}  }
class C{  public boolean containsKey(Object key){  return get(key) != null;}  }
class C{  @Override public boolean handleMouseClick(Point2D.Double p,MouseEvent evt,DrawingView view){  if (evt.getClickCount() == 2 && view.getHandleDetailLevel() % 2 == 0) {    for (    Figure child : getChildren()) {      ODGBezierFigure bf=(ODGBezierFigure)child;      int index=bf.getBezierPath().findSegment(p,5f / view.getScaleFactor());      if (index != -1) {        bf.handleMouseClick(p,evt,view);        evt.consume();        return true;      }    }  }  return false;}  }
class C{  public static byte[] decode(byte[] source,int off,int len,byte[] decodabet) throws Base64DecoderException {  int len34=len * 3 / 4;  byte[] outBuff=new byte[2 + len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=0; i < len; i++) {    sbiCrop=(byte)(source[i + off] & 0x7f);    sbiDecode=decodabet[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        if (sbiCrop == EQUALS_SIGN) {          int bytesLeft=len - i;          byte lastByte=(byte)(source[len - 1 + off] & 0x7f);          if (b4Posn == 0 || b4Posn == 1) {            throw new Base64DecoderException();          } else           if ((b4Posn == 3 && bytesLeft > 2) || (b4Posn == 4 && bytesLeft > 1)) {            throw new Base64DecoderException();          } else           if (lastByte != EQUALS_SIGN && lastByte != NEW_LINE) {            throw new Base64DecoderException();          }          break;        }        b4[b4Posn++]=sbiCrop;        if (b4Posn == 4) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);          b4Posn=0;        }      }    } else {      throw new Base64DecoderException();    }  }  if (b4Posn != 0) {    if (b4Posn == 1) {      throw new Base64DecoderException();    }    b4[b4Posn++]=EQUALS_SIGN;    outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  public void createSecurityManager(Password password,String id) throws DOMException, PageException {  checkWriteAccess();  ConfigServerImpl cs=(ConfigServerImpl)ConfigImpl.getConfigServer(config,password);  SecurityManagerImpl dsm=(SecurityManagerImpl)cs.getDefaultSecurityManager().cloneSecurityManager();  cs.setSecurityManager(id,dsm);  Element security=_getRootElement("security");  Element accessor=null;  Element[] children=XMLConfigWebFactory.getChildren(security,"accessor");  for (int i=0; i < children.length; i++) {    if (id.equals(children[i].getAttribute("id"))) {      accessor=children[i];    }  }  if (accessor == null) {    accessor=doc.createElement("accessor");    security.appendChild(accessor);  }  updateSecurityFileAccess(accessor,dsm.getCustomFileAccess(),dsm.getAccess(SecurityManager.TYPE_FILE));  accessor.setAttribute("id",id);  accessor.setAttribute("setting",SecurityManagerImpl.toStringAccessValue(dsm.getAccess(SecurityManager.TYPE_SETTING)));  accessor.setAttribute("file",SecurityManagerImpl.toStringAccessValue(dsm.getAccess(SecurityManager.TYPE_FILE)));  accessor.setAttribute("direct_java_access",SecurityManagerImpl.toStringAccessValue(dsm.getAccess(SecurityManager.TYPE_DIRECT_JAVA_ACCESS)));  accessor.setAttribute("mail",SecurityManagerImpl.toStringAccessValue(dsm.getAccess(SecurityManager.TYPE_MAIL)));  accessor.setAttribute("datasource",SecurityManagerImpl.toStringAccessValue(dsm.getAccess(SecurityManager.TYPE_DATASOURCE)));  accessor.setAttribute("mapping",SecurityManagerImpl.toStringAccessValue(dsm.getAccess(SecurityManager.TYPE_MAPPING)));  accessor.setAttribute("custom_tag",SecurityManagerImpl.toStringAccessValue(dsm.getAccess(SecurityManager.TYPE_CUSTOM_TAG)));  accessor.setAttribute("cfx_setting",SecurityManagerImpl.toStringAccessValue(dsm.getAccess(SecurityManager.TYPE_CFX_SETTING)));  accessor.setAttribute("cfx_usage",SecurityManagerImpl.toStringAccessValue(dsm.getAccess(SecurityManager.TYPE_CFX_USAGE)));  accessor.setAttribute("debugging",SecurityManagerImpl.toStringAccessValue(dsm.getAccess(SecurityManager.TYPE_DEBUGGING)));  accessor.setAttribute("cache",SecurityManagerImpl.toStringAccessValue(dsm.getAccess(SecurityManagerImpl.TYPE_CACHE)));  accessor.setAttribute("gateway",SecurityManagerImpl.toStringAccessValue(dsm.getAccess(SecurityManagerImpl.TYPE_GATEWAY)));  accessor.setAttribute("orm",SecurityManagerImpl.toStringAccessValue(dsm.getAccess(SecurityManagerImpl.TYPE_ORM)));  accessor.setAttribute("tag_execute",SecurityManagerImpl.toStringAccessValue(dsm.getAccess(SecurityManager.TYPE_TAG_EXECUTE)));  accessor.setAttribute("tag_import",SecurityManagerImpl.toStringAccessValue(dsm.getAccess(SecurityManager.TYPE_TAG_IMPORT)));  accessor.setAttribute("tag_object",SecurityManagerImpl.toStringAccessValue(dsm.getAccess(SecurityManager.TYPE_TAG_OBJECT)));  accessor.setAttribute("tag_registry",SecurityManagerImpl.toStringAccessValue(dsm.getAccess(SecurityManager.TYPE_TAG_REGISTRY)));}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  if (evt.getPropertyName().equals(GridField.PROPERTY))   setValue(evt.getNewValue());}  }
class C{  public int encodeBase64Chunk(int b24,byte[] buffer,int ptr){  buffer[ptr++]=_base64ToAsciiB[(b24 >> 18) & 0x3F];  buffer[ptr++]=_base64ToAsciiB[(b24 >> 12) & 0x3F];  buffer[ptr++]=_base64ToAsciiB[(b24 >> 6) & 0x3F];  buffer[ptr++]=_base64ToAsciiB[b24 & 0x3F];  return ptr;}  }
class C{  public boolean offer(E e,long timeout,TimeUnit unit) throws InterruptedException {  if (e == null)   throw new NullPointerException();  long nanos=unit.toNanos(timeout);  int c=-1;  final ReentrantLock putLock=this.putLock;  final AtomicInteger count=this.count;  putLock.lockInterruptibly();  try {    while (count.get() == capacity) {      if (nanos <= 0)       return false;      nanos=notFull.awaitNanos(nanos);    }    enqueue(new Node<E>(e));    c=count.getAndIncrement();    if (c + 1 < capacity)     notFull.signal();  }  finally {    putLock.unlock();  }  if (c == 0)   signalNotEmpty();  return true;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:33.014 -0500",hash_original_method="A43A8FC0DB505099966EA05BCA8E1BC7",hash_generated_method="0371090DC73679EC93E57AEC0836198E") synchronized void enqueue(Reference<? extends T> reference){  if (head == null) {    reference.queueNext=reference;  } else {    reference.queueNext=head;  }  head=reference;  notify();}  }
class C{  @Override public double logDensity(Instance inst,double value) throws Exception {  inst=filterInstance(inst);  Matrix k=new Matrix(m_NumTrain,1);  for (int i=0; i < m_NumTrain; i++) {    k.set(i,0,m_kernel.eval(-1,i,inst));  }  double estimate=k.transpose().times(m_t).get(0,0) + m_avg_target;  double sigma=computeStdDev(inst,k);  value=value * m_Alin + m_Blin;  value=value - estimate;  double z=-Math.log(sigma * Math.sqrt(2 * Math.PI)) - value * value / (2.0 * sigma * sigma);  return z + Math.log(m_Alin);}  }
class C{  IndexEntryArray(ByteProvider byteProvider) throws IOException {  this.header=new CompoundDataTypes.MXFCollections.Header(byteProvider);  for (long i=0; i < header.getNumberOfElements(); i++) {    indexEntries.add(new IndexEntry(byteProvider));    byteProvider.skipBytes(this.header.getSizeOfElement() - 11);  }}  }
class C{  public void store(float val){  SimulatedMemory.setFloat(this,val);}  }
class C{  public static void visit(String page,String referer){  instance.visitPage(page,referer);}  }
class C{  @Override public Double zincrby(final String key,final double score,final String member){  checkIsInMultiOrPipeline();  client.zincrby(key,score,member);  String newscore=client.getBulkReply();  return Double.valueOf(newscore);}  }
class C{  public AclNotFoundException(){}  }
class C{  public void deleteAllRows(){  while (rows.size() > 0) {    rows.remove(0);  }  ((AbstractTableModel)table.getModel()).fireTableStructureChanged();}  }
class C{  public CategoryDatasetHandler(){  this.dataset=null;}  }
class C{  public static String searchRemoveFromCategory(HttpServletRequest request,HttpServletResponse response){  Delegator delegator=(Delegator)request.getAttribute("delegator");  String productCategoryId=request.getParameter("SE_SEARCH_CATEGORY_ID");  String errMsg=null;  try {    boolean beganTransaction=TransactionUtil.begin(DEFAULT_TX_TIMEOUT);    try {      EntityListIterator eli=getProductSearchResults(request);      if (eli == null) {        errMsg=UtilProperties.getMessage(resource,"productsearchevents.no_results_found_probably_error_constraints",UtilHttp.getLocale(request));        request.setAttribute("_ERROR_MESSAGE_",errMsg);        return "error";      }      int numRemoved=0;      GenericValue searchResultView=null;      while ((searchResultView=eli.next()) != null) {        String productId=searchResultView.getString("mainProductId");        numRemoved+=delegator.removeByAnd("ProductCategoryMember",UtilMisc.toMap("productCategoryId",productCategoryId,"productId",productId));      }      eli.close();      Map<String,String> messageMap=UtilMisc.toMap("numRemoved",Integer.toString(numRemoved));      errMsg=UtilProperties.getMessage(resource,"productsearchevents.removed_x_items",messageMap,UtilHttp.getLocale(request));      request.setAttribute("_EVENT_MESSAGE_",errMsg);    } catch (    GenericEntityException e) {      Map<String,String> messageMap=UtilMisc.toMap("errSearchResult",e.toString());      errMsg=UtilProperties.getMessage(resource,"productsearchevents.error_getting_search_results",messageMap,UtilHttp.getLocale(request));      Debug.logError(e,errMsg,module);      request.setAttribute("_ERROR_MESSAGE_",errMsg);      TransactionUtil.rollback(beganTransaction,errMsg,e);      return "error";    } finally {      TransactionUtil.commit(beganTransaction);    }  } catch (  GenericTransactionException e) {    Map<String,String> messageMap=UtilMisc.toMap("errSearchResult",e.toString());    errMsg=UtilProperties.getMessage(resource,"productsearchevents.error_getting_search_results",messageMap,UtilHttp.getLocale(request));    Debug.logError(e,errMsg,module);    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  return "success";}  }
class C{  public void recordStartTime(){  _currentRequestStartTime.set(System.currentTimeMillis());}  }
class C{  public static void writeStaticField(final Field field,final Object value,final boolean forceAccess) throws IllegalAccessException {  if (field == null) {    throw new IllegalArgumentException("The field must not be null");  }  if (!Modifier.isStatic(field.getModifiers())) {    throw new IllegalArgumentException("The field '" + field.getName() + "' is not static");  }  FieldUtils.writeField(field,(Object)null,value,forceAccess);}  }
class C{  public void receive(DatagramPacket p) throws IOException {synchronized (packetsToReceive) {    do {      if (closed) {        throw new SocketException(GoogleRelayedCandidateDatagramSocket.class.getSimpleName() + " has been closed.");      } else       if (packetsToReceive.isEmpty()) {        try {          packetsToReceive.wait();        } catch (        InterruptedException iex) {        }      } else {        DatagramPacket packetToReceive=packetsToReceive.remove(0);        MultiplexingXXXSocketSupport.copy(packetToReceive,p);        packetsToReceive.notifyAll();        break;      }    } while (true);  }}  }
class C{  @Override public void process(final DM dm,final ReplyProcessor21 p){  final long startTime=getTimestamp();  FetchKeysResponse processor=(FetchKeysResponse)p;  if (processor == null) {    if (logger.isTraceEnabled(LogMarker.DM)) {      logger.trace(LogMarker.DM,"FetchKeysReplyMessage processor not found");    }    return;  }  processor.processChunk(this);  if (logger.isTraceEnabled(LogMarker.DM)) {    logger.trace(LogMarker.DM,"{} processed {}",processor,this);  }  dm.getStats().incReplyMessageTime(DistributionStats.getStatTime() - startTime);}  }
class C{  protected Provider(String name,double version,String info){  this.name=name;  this.version=version;  this.info=info;  putId();  initialized=true;}  }
class C{  public ScrambledZipfianGenerator(long _min,long _max){  this(_min,_max,ZipfianGenerator.ZIPFIAN_CONSTANT);}  }
class C{  public String typeName(){  return typeName;}  }
class C{  public void initializeDefinition(String definition){  m_definition=definition;  s_logger.log(Level.FINEST,toString());}  }
class C{  ClusterState configure(Configuration configuration){  Assert.notNull(configuration,"configuration");  if (this.configuration != null && configuration.index() <= this.configuration.index())   return this;  Instant time=Instant.ofEpochMilli(configuration.time());  boolean transition=false;  for (  Member member : configuration.members()) {    if (member.equals(this.member)) {      transition=this.member.type().ordinal() < member.type().ordinal();      this.member.update(member.type(),time).update(member.clientAddress(),time);      members.add(this.member);    } else {      MemberState state=membersMap.get(member.id());      if (state == null) {        state=new MemberState(new ServerMember(member.type(),member.serverAddress(),member.clientAddress(),time),this);        state.resetState(context.getLog());        this.members.add(state.getMember());        this.remoteMembers.add(state);        membersMap.put(member.id(),state);        addressMap.put(member.address(),state);        joinListeners.accept(state.getMember());      }      state.getMember().update(member.clientAddress(),time);      if (state.getMember().type() != member.type()) {        state.getMember().update(member.type(),time);        state.resetState(context.getLog());      }      if (state.getMember().status() != member.status()) {        state.getMember().update(member.status(),time);      }      for (      List<MemberState> memberType : memberTypes.values()) {        memberType.remove(state);      }      List<MemberState> memberType=memberTypes.get(member.type());      if (memberType == null) {        memberType=new CopyOnWriteArrayList<>();        memberTypes.put(member.type(),memberType);      }      memberType.add(state);    }  }  if (transition) {    context.transition(this.member.type());  }  int i=0;  while (i < this.remoteMembers.size()) {    MemberState member=this.remoteMembers.get(i);    if (!configuration.members().contains(member.getMember())) {      this.members.remove(member.getMember());      this.remoteMembers.remove(i);      for (      List<MemberState> memberType : memberTypes.values()) {        memberType.remove(member);      }      membersMap.remove(member.getMember().id());      addressMap.remove(member.getMember().address());      leaveListeners.accept(member.getMember());    } else {      i++;    }  }  if (!configuration.members().contains(member)) {    members.remove(member);  }  this.configuration=configuration;  if (context.getCommitIndex() >= configuration.index()) {    context.getMetaStore().storeConfiguration(configuration);  }  reassign();  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:03.690 -0500",hash_original_method="FECE7B1FE9D2EDFD266D412A8771534E",hash_generated_method="89EF250677DABA772E2AC6EFFDEC1C97") public final void endBufferedOps(){  __receiveBuffer=null;  __receiveDatagram=null;  _sendBuffer=null;  __sendDatagram=null;}  }
class C{  public Builder addCapHandler(CapHandler handler){  getCapHandlers().add(handler);  return this;}  }
class C{  public boolean forwardIfCurrent(String first,String second){  int start=pos;  if (!forwardIfCurrent(first))   return false;  if (!removeSpace()) {    pos=start;    return false;  }  boolean rtn=forwardIfCurrent(second);  if (!rtn)   pos=start;  return rtn;}  }
class C{  @Override protected EClass eStaticClass(){  return StextPackage.Literals.ALWAYS_EVENT;}  }
class C{  public void onChildItemPinned(int groupPosition,int childPosition){  final DialogFragment dialog=ExpandableItemPinnedMessageDialogFragment.newInstance(groupPosition,childPosition);  getSupportFragmentManager().beginTransaction().add(dialog,FRAGMENT_TAG_ITEM_PINNED_DIALOG).commit();}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getDisplayColor_();}  }
class C{  public static double gaussian(double mu,double sigma){  return mu + sigma * gaussian();}  }
class C{  public TaxiRideSource(String dataFilePath,int servingSpeedFactor){  this(dataFilePath,0,servingSpeedFactor);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:24.239 -0500",hash_original_method="DD8A0FE95AA726B14C9A7464570F0B95",hash_generated_method="DD8A0FE95AA726B14C9A7464570F0B95") void append(String xml) throws SAXException {  try {    appendString(this.pointer,xml,false);  } catch (  ExpatException e) {    throw new ParseException(e.getMessage(),this.locator);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Wizard.getInstance().getFavorites();}  }
class C{  private void pop(final int elements){  if (outputStackTop >= elements) {    outputStackTop-=elements;  } else {    owner.inputStackTop-=elements - outputStackTop;    outputStackTop=0;  }}  }
class C{  public long skip(long n) throws IOException {  int charWidth=(fEncoding >= 4) ? 2 : 1;  long bytesSkipped=fInputStream.skip(n << charWidth);  if ((bytesSkipped & (charWidth | 1)) == 0)   return bytesSkipped >> charWidth;  return (bytesSkipped >> charWidth) + 1;}  }
class C{  private <T>T[] concat(T[] first,T[] second,Class<?> cls){  Collection<T> res=new ArrayList<>();  res.addAll(Arrays.asList(first));  res.addAll(Arrays.asList(second));  return res.toArray((T[])Array.newInstance(cls,res.size()));}  }
class C{  public boolean echoCharIsSet(){  return echoChar != 0;}  }
class C{  public Metaphone(){  super();}  }
class C{  public Type attribExpr(JCTree tree,Env<AttrContext> env,Type pt){  return attribTree(tree,env,new ResultInfo(VAL,!pt.hasTag(ERROR) ? pt : Type.noType));}  }
class C{  public static RichDiagnosticFormatter instance(Context context){  RichDiagnosticFormatter instance=context.get(RichDiagnosticFormatter.class);  if (instance == null)   instance=new RichDiagnosticFormatter(context);  return instance;}  }
class C{  T tz(TimeZone defaultTimeZone,boolean outlookCompatible){  this.defaultTimeZone=(defaultTimeZone == null) ? null : TimezoneAssignment.download(defaultTimeZone,outlookCompatible);  return this_;}  }
class C{  public static void sort(byte[] a){  doSort(a,0,a.length - 1);}  }
class C{  public NemesisBlockInfo(final Hash generationHash,final Address address,final Amount amount,final String dataFileName){  this.generationHash=generationHash;  this.address=address;  this.amount=amount;  this.dataFileName=dataFileName;}  }
class C{  protected void processExecuteSingletonResponse(SqlResponse sqlResponse) throws SQLException, IOException {  if (sqlResponse.getCount() > 0) {    queueRowData(readSqlData());  }}  }
