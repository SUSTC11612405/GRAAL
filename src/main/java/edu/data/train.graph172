class C{  public static void checkKeyType(HCatSchema schema,String fieldName) throws IOException {  HCatFieldSchema keyType=schema.get(fieldName);  HCatFieldSchema.Category category=keyType.getCategory();  if (category != HCatFieldSchema.Category.PRIMITIVE) {    throw new IllegalArgumentException("key must be primitive type");  }}  }
class C{  protected Class findClass(String name) throws ClassNotFoundException {  if (delegatationLoader == null)   return super.findClass(name);  return delegatationLoader.loadClass(name);}  }
class C{  protected Iterable<CharSequence> contexts(){  return contexts;}  }
class C{  public RawData(byte[] data,InetSocketAddress address){  this(data,address,null,false);}  }
class C{  public String toString(){  return Integer.toString(getValue());}  }
class C{  public void addSubtitle(Title subtitle){  this.chart.addSubtitle(subtitle);}  }
class C{  protected void clearOutEvents(){}  }
class C{  public boolean isIgnoreLinearDependent(){  return ignoreLinearDependent;}  }
class C{  public static int copy(InputStream in,OutputStream out) throws IOException {  Assert.notNull(in,"No InputStream specified");  Assert.notNull(out,"No OutputStream specified");  try {    return StreamUtils.copy(in,out);  }  finally {    try {      in.close();    } catch (    IOException ex) {    }    try {      out.close();    } catch (    IOException ex) {    }  }}  }
class C{  public void cleanup(){  ContextManager.removeContext(offscreenDrawable.getContext());  offscreenDrawable.destroy();}  }
class C{  public String toXML(boolean header){  return null;}  }
class C{  protected boolean internalFirst() throws SQLException {  boolean bool=super.internalFirst();  if (p == null) {    return bool;  }  while (bool) {    if (p.evaluate(this)) {      break;    }    bool=super.internalNext();  }  return bool;}  }
class C{  @Override protected void configure(AuthenticationManagerBuilder auth) throws Exception {  auth.inMemoryAuthentication().withUser("user").password("password").roles("USER").and().withUser("admin").password("admin").roles("USER","ADMIN");}  }
class C{  public boolean allValuesEqual(final int integer){  if (m_values.isEmpty()) {    return false;  }  for (  final int value : m_values.values()) {    if (integer != value) {      return false;    }  }  return true;}  }
class C{  public MyIdentityHashMap(int initialCapacity,float loadFactor){  if (initialCapacity < 0)   throw new IllegalArgumentException("Illegal initial capacity: " + initialCapacity);  if (initialCapacity > MAXIMUM_CAPACITY)   initialCapacity=MAXIMUM_CAPACITY;  if (loadFactor <= 0 || Float.isNaN(loadFactor))   throw new IllegalArgumentException("Illegal load factor: " + loadFactor);  int capacity=1;  while (capacity < initialCapacity)   capacity<<=1;  this.loadFactor=loadFactor;  threshold=(int)(capacity * loadFactor);  table=new Entry[capacity];  init();}  }
class C{  public void clear(){  warnings.clear();}  }
class C{  public NamedObject(ObjectName objectName,DynamicMBean object){  if (objectName.isPattern()) {    throw new RuntimeOperationsException(new IllegalArgumentException("Invalid name->" + objectName.toString()));  }  this.name=objectName;  this.object=object;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:49.459 -0500",hash_original_method="CAF32B6D436555758214A0AC3F1F5894",hash_generated_method="5C573BF9CE1FD82E4A0CBC97D477F4AB") public static String toHexString(byte b[]){  int pos=0;  char[] c=new char[b.length * 2];  for (int i=0; i < b.length; i++) {    c[pos++]=toHex[(b[i] >> 4) & 0x0F];    c[pos++]=toHex[b[i] & 0x0f];  }  return new String(c);}  }
class C{  public boolean isInvoiced(){  Object oo=get_Value(COLUMNNAME_IsInvoiced);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public BytesInputStream(int size){  super(new byte[size]);  dataInputStream=new DataInputStream(this);}  }
class C{  protected boolean isReceiveBufferSizeChanged(){  return true;}  }
class C{  public void actionPerformed(ActionEvent e){  super.actionPerformed(e);  String ac=e.getActionCommand();  if (ac.equalsIgnoreCase(RedrawCmd)) {    doPrepare();  } else {    currentTool.getState().actionPerformed(e);  }}  }
class C{  @Override public String toString(){  return "ExpGammaDistribution(k=" + k + ", theta="+ theta+ ", shift="+ shift+ ")";}  }
class C{  protected void bindViewHelper(CustomBaseViewHolder viewHolder){  Context ctx=viewHolder.itemView.getContext();  viewHolder.itemView.setId(hashCode());  viewHolder.itemView.setSelected(isSelected());  viewHolder.itemView.setTag(this);  int selectedColor=getSelectedColor(ctx);  int color=getColor(ctx);  int selectedTextColor=getSelectedTextColor(ctx);  int iconColor=getIconColor(ctx);  int selectedIconColor=getSelectedIconColor(ctx);  UIUtils.setBackground(viewHolder.view,UIUtils.getSelectableBackground(ctx,selectedColor,true));  StringHolder.applyTo(this.getName(),viewHolder.name);  StringHolder.applyToOrHide(this.getDescription(),viewHolder.description);  viewHolder.name.setTextColor(getTextColorStateList(color,selectedTextColor));  ColorHolder.applyToOr(getDescriptionTextColor(),viewHolder.description,getTextColorStateList(color,selectedTextColor));  if (getTypeface() != null) {    viewHolder.name.setTypeface(getTypeface());    viewHolder.description.setTypeface(getTypeface());  }  DrawerImageLoader.getInstance().cancelImage(viewHolder.icon);  viewHolder.icon.setImageBitmap(null);  ImageHolder.applyTo(icon,viewHolder.icon,"customUrlItem");  DrawerUIUtils.setDrawerVerticalPadding(viewHolder.view);}  }
class C{  public StackSlot allocateRBPSpillSlot(){  return ((AMD64FrameMap)getFrameMap()).allocateRBPSpillSlot();}  }
class C{  public LayoutParams(int width,int height,int gravity){  super(width,height);  this.gravity=gravity;}  }
class C{  public static String createHttpFileTransferXml(FileTransferHttpInfoDocument fileTransferData){  FileTransferHttpThumbnail fileIcon=fileTransferData.getFileThumbnail();  StringBuilder info=new StringBuilder("<?xml version=\"1.0\" encoding=\"").append(UTF8_STR).append("\"?><file>");  if (fileIcon != null) {    String fileIconInfo=createHttpFileInfoXml(FILEICON_INFO,fileIcon.getUri(),null,fileIcon.getMimeType(),fileIcon.getSize(),fileIcon.getExpiration(),null,-1);    info.append(fileIconInfo);  }  String fileInfo=createHttpFileInfoXml(FILE_INFO,fileTransferData.getUri(),fileTransferData.getFilename(),fileTransferData.getMimeType(),fileTransferData.getSize(),fileTransferData.getExpiration(),FileSharingSession.DispositionToString(fileTransferData.getFileDisposition()),fileTransferData.getPlayingLength());  info.append(fileInfo);  info.append("</file>");  return info.toString();}  }
class C{  public boolean isMetadataSearch(){  return metadataSearch;}  }
class C{  protected Frame<V> newFrame(final int nLocals,final int nStack){  return new Frame<V>(nLocals,nStack);}  }
class C{  private void writeTaxa(TaxonList taxonList,XMLWriter writer) throws Arguments.ArgumentException {  writer.writeComment("The list of taxa to be analysed (can also include dates/ages).","ntax=" + taxonList.getTaxonCount());  writer.writeOpenTag(TaxaParser.TAXA,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,TaxaParser.TAXA)});  boolean hasAttr=options.traits.size() > 0;  boolean firstDate=true;  for (int i=0; i < taxonList.getTaxonCount(); i++) {    Taxon taxon=taxonList.getTaxon(i);    boolean hasDate=false;    if (options.clockModelOptions.isTipCalibrated()) {      hasDate=TaxonList.Utils.hasAttribute(taxonList,i,dr.evolution.util.Date.DATE);    }    if (hasDate) {      dr.evolution.util.Date date=(dr.evolution.util.Date)taxon.getAttribute(dr.evolution.util.Date.DATE);      if (firstDate) {        options.units=date.getUnits();        firstDate=false;      } else {        if (options.units != date.getUnits()) {          System.err.println("Error: Units in dates do not match.");        }      }    }    writeTaxon(taxon,hasDate,hasAttr,writer);  }  writer.writeCloseTag(TaxaParser.TAXA);}  }
class C{  @Deprecated private static final double[] toDoubleArray(String labelSet,int L){  int set[]=(labelSet.length() <= 2) ? new int[]{} : MLUtils.toIntArray(labelSet);  double y[]=new double[L];  for (  int j : set) {    y[j]=1.;  }  return y;}  }
class C{  public void removeMoreListener(){  mOnMoreListener=null;}  }
class C{  public static boolean checkReceiptForDamagedSigatureCreationDevice(String jwsCompactRepresentation){  String encodedSignatureValueBase64=jwsCompactRepresentation.split("\\.")[2];  String decodedSignatureValue=new String(CashBoxUtils.base64Decode(encodedSignatureValueBase64,true));  return "Sicherheitseinrichtung ausgefallen".equals(decodedSignatureValue);}  }
class C{  protected ST(){  if (STGroup.trackCreationEvents) {    if (debugState == null)     debugState=new ST.DebugState();    debugState.newSTEvent=new ConstructionEvent();  }}  }
class C{  public void stop(){  try {    server.stop(1);  } catch (  Exception e) {  }}  }
class C{  public void moveForward(double units){  mTempVec.setAll(WorldParameters.FORWARD_AXIS);  mTempVec.rotateBy(mOrientation).normalize();  mTempVec.multiply(units);  mPosition.add(mTempVec);  if (mLookAtEnabled && mLookAtValid) {    mLookAt.add(mTempVec);    resetToLookAt();  }  markModelMatrixDirty();}  }
class C{  public Vector2 sub(Vector2 v){  x-=v.x;  y-=v.y;  return this;}  }
class C{  @Override public void updateBaseCost(double changeAmount){  if (changeAmount >= 0) {    OperationalAnalyticsReporter.planChangeAccepted(AnalyticsCnsts.BASE_INCREASE,changeAmount);  } else {    OperationalAnalyticsReporter.planChangeAccepted(AnalyticsCnsts.BASE_DECREASE,changeAmount);  }  basePlan.setBaseCost(basePlan.getBaseCost() + changeAmount);  updateBasePlanMFP();  basePlanStream.onNext(basePlan);}  }
class C{  public static ArrayList<Page> TextPages(int x,int y,String unlocalizedName,String pageName,boolean isHidden,Item manualType){  ArrayList<Page> newPages=new ArrayList<>();  String text=TranslationHelper.translateToLocal(unlocalizedName);  TextContainer textContainer=parseTextContainer(new TextContainer(116,144,text,Minecraft.getMinecraft().fontRendererObj));  for (int i=0; i < textContainer.getPages().size(); i++) {    newPages.add(new Page(pageName,isHidden,manualType,new TextWidget(x,y,unlocalizedName,i)));  }  return newPages;}  }
class C{  @Deprecated @Override public final void add(int index,E element){  throw new UnsupportedOperationException();}  }
class C{  public NodeList applyTo(String xpathSpec,List nodeSet){  return new NodeList(XPathCache.getXPath(xpathSpec).applyTo(nodeSet),false);}  }
class C{  public String nextTo(char delimiter) throws JSONException {  StringBuilder sb=new StringBuilder();  for (; ; ) {    char c=this.next();    if (c == delimiter || c == 0 || c == '\n' || c == '\r') {      if (c != 0) {        this.back();      }      return sb.toString().trim();    }    sb.append(c);  }}  }
class C{  public void disconnectNode(short nodeId){synchronized (connections) {    Short n=Short.valueOf(nodeId);    MessageWindow mw=messageWindows.get(n);    if (mw != null) {      mw.lock.lock();      mw.disconnected=true;      try {        mw.full.signalAll();        messageWindows.remove(n);      }  finally {        mw.lock.unlock();      }    }    NodeConnection nc=connections.get(nodeId);    if (nc != null) {      nc.nuke();    }    connections.remove(nodeId);  }}  }
class C{  public KeywordExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  private Room searchCallableRoom(){  if (!mSession.isAlive()) {    Log.e(LOG_TAG,"searchCallableRoom : the session is not anymore valid");    return null;  }  mCallableRoom=null;  Collection<Room> rooms=mSession.getDataHandler().getStore().getRooms();  for (  Room room : rooms) {    Collection<RoomMember> members=room.getMembers();    if (members.size() == 2) {      for (      RoomMember member : members) {        if (member.getUserId().equals(mMemberId) && room.canPerformCall()) {          return mCallableRoom=room;        }      }    }  }  return null;}  }
class C{  @DSComment("data structure class") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:37.420 -0500",hash_original_method="1050A4E9D6DF2BBB4B07F9E50B35502F",hash_generated_method="114BF55AC26E62B9CA474044AEB4178D") public void put(String key,Double value){  mValues.put(key,value);}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.newattr.com";  String qualifiedName="emp:newAttr";  Document doc1;  Document doc2;  Attr newAttr;  NodeList elementList;  Node testAddr;  Attr setAttr1;  doc1=(Document)load("staffNS",true);  doc2=(Document)load("staffNS",true);  newAttr=doc2.createAttributeNS(namespaceURI,qualifiedName);  elementList=doc1.getElementsByTagName("emp:address");  testAddr=elementList.item(0);{    boolean success=false;    try {      setAttr1=((Element)testAddr).setAttributeNodeNS(newAttr);    } catch (    DOMException ex) {      success=(ex.code == DOMException.WRONG_DOCUMENT_ERR);    }    assertTrue("throw_WRONG_DOCUMENT_ERR",success);  }}  }
class C{  public JSONArray(Object array) throws JSONException {  this();  if (array.getClass().isArray()) {    int length=Array.getLength(array);    for (int i=0; i < length; i+=1) {      this.put(JSONObject.wrap(Array.get(array,i)));    }  } else {    throw new JSONException("JSONArray initial value should be a string or collection or array.");  }}  }
class C{  public static void clear(JTabbedPane self){  self.removeAll();}  }
class C{  public NotContextException(String explanation){  super(explanation);}  }
class C{  public synchronized void returnBuf(byte[] buf){  if (buf == null || buf.length > mSizeLimit) {    return;  }  mBuffersByLastUse.add(buf);  int pos=Collections.binarySearch(mBuffersBySize,buf,BUF_COMPARATOR);  if (pos < 0) {    pos=-pos - 1;  }  mBuffersBySize.add(pos,buf);  mCurrentSize+=buf.length;  trim();}  }
class C{  private ImageIcon addColor(ImageIcon icon,Color color){  if (icon == null || color == null) {    return icon;  }  BufferedImage newImage=new BufferedImage(icon.getIconWidth(),icon.getIconWidth(),BufferedImage.TYPE_INT_ARGB);  Graphics g=newImage.getGraphics();  g.setColor(color);  g.drawImage(icon.getImage(),0,0,color,null);  g.dispose();  return new ImageIcon(newImage);}  }
class C{  public int costInline(int thresh,Environment env,Context ctx){  return 1 + cond.costInline(thresh,env,ctx) + left.costInline(thresh,env,ctx)+ ((right == null) ? 0 : right.costInline(thresh,env,ctx));}  }
class C{  public void dump(Printer pw,String prefix){  pw.println(prefix + "usagePercent: " + usagePercent);  pw.println(prefix + "durationMicros: " + durationMicros);  pw.println(prefix + "usageDetails: " + usageDetails);  pw.println(prefix + "checkinDetails: " + checkinDetails);}  }
class C{  public void handleOnInitialize(){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {    final boolean fineLocationRationale=_activity.shouldShowRequestPermissionRationale(Manifest.permission.ACCESS_FINE_LOCATION);    final boolean coarseLocationRationale=_activity.shouldShowRequestPermissionRationale(Manifest.permission.ACCESS_COARSE_LOCATION);    if (fineLocationRationale || coarseLocationRationale) {      _denyCounter++;    } else {      _denyCounter=0;    }  }}  }
class C{  public void writeNext(String[] nextLine){  writeNext(nextLine,true);}  }
class C{  private int readAnnotationValues(int v,final char[] buf,final boolean named,final AnnotationVisitor av){  int i=readUnsignedShort(v);  v+=2;  if (named) {    for (; i > 0; --i) {      v=readAnnotationValue(v + 2,buf,readUTF8(v,buf),av);    }  } else {    for (; i > 0; --i) {      v=readAnnotationValue(v,buf,null,av);    }  }  if (av != null) {    av.visitEnd();  }  return v;}  }
class C{  public void clearRegular(){  Iterator<AttributeMetaData> iterator=getAllAttributes().iterator();  while (iterator.hasNext()) {    AttributeMetaData amd=iterator.next();    if (!amd.isSpecial()) {      iterator.remove();    }  }}  }
class C{  @Override public String toString(){  return currencyCode;}  }
class C{  protected void releaseObjects(){  if (this.surfaceHolder != null) {    this.surfaceHolder.removeCallback(this);    this.surfaceHolder=null;  }  if (this.mediaPlayer != null) {    this.mediaPlayer.release();    this.mediaPlayer=null;  }  if (this.surfaceView != null)   removeView(this.surfaceView);  if (this.onProgressView != null)   removeView(this.onProgressView);}  }
class C{  public IntervalCategoryToolTipGenerator(String labelFormat,NumberFormat formatter){  super(labelFormat,formatter);}  }
class C{  public boolean isSelectAllEnabled(){  if (text == null || text.isDisposed()) {    return false;  }  return text.getCharCount() > 0;}  }
class C{  protected void validateState(State currentState){  ValidationUtils.validateState(currentState);}  }
class C{  public static boolean isAnyNodeAncestorOf(ArrayList ancestorNodes,Node node){  int n=ancestorNodes.size();  for (int i=0; i < n; i++) {    Node ancestor=(Node)ancestorNodes.get(i);    if (isAncestorOf(ancestor,node)) {      return true;    }  }  return false;}  }
class C{  public static void main(String[] args) throws IOException {  final PrereadNames names=new PrereadNames(new File(args[0]),LongRange.NONE);  for (int i=0; i < names.length(); i++) {    System.out.println(i + ": " + names.name(i));  }}  }
class C{  public PiecewiseExponentialPopulation(double[] intervals,double[] thetas,double lambda,Type units){  super(units);  if (thetas == null || intervals == null) {    throw new IllegalArgumentException();  }  if (thetas.length != intervals.length + 1) {    throw new IllegalArgumentException();  }  this.thetas=thetas;  this.intervals=intervals;  this.lambdas=new double[]{lambda};}  }
class C{  public Code39Reader(boolean usingCheckDigit){  this.usingCheckDigit=usingCheckDigit;  this.extendedMode=false;}  }
class C{  public float max(){  if (size() == 0) {    throw new IllegalStateException("cannot find maximum of an empty list");  }  float max=_data[_pos - 1];  for (int i=_pos - 1; i-- > 0; ) {    max=Math.max(max,_data[_pos]);  }  return max;}  }
class C{  public void addToThis(GFElement addend) throws RuntimeException {  if (!(addend instanceof GF2nPolynomialElement)) {    throw new RuntimeException();  }  if (!mField.equals(((GF2nPolynomialElement)addend).mField)) {    throw new RuntimeException();  }  polynomial.addToThis(((GF2nPolynomialElement)addend).polynomial);}  }
class C{  public static String propertiesToStringIgnoreEmptyKeys(Properties props){  return propertiesToString(removeEmptyValue(props));}  }
class C{  public static void removeKeywordSet(List<KeywordSet> keywords,String thesaurus){  if (!Strings.isNullOrEmpty(thesaurus)) {    for (Iterator<KeywordSet> iterator=keywords.iterator(); iterator.hasNext(); ) {      String keywordThesaurus=iterator.next().getKeywordThesaurus();      if (!Strings.isNullOrEmpty(keywordThesaurus) && keywordThesaurus.equalsIgnoreCase(thesaurus)) {        iterator.remove();      }    }  }}  }
class C{  public ParallelTaskBuilder sync(){  this.mode=TaskRunMode.SYNC;  return this;}  }
class C{  @Override public String eTag(){  String tag=super.eTag();  if (tag == null && response != null && super.code() == HTTP_NOT_MODIFIED)   tag=response.eTag;  return tag;}  }
class C{  public LogicAsserter startSubst(){  expectedSubsts.add(new HashMap<>());  return this;}  }
class C{  public void printStackTrace(PrintStream output){synchronized (output) {    super.printStackTrace(output);    Throwable throwable=getException();    if (throwable != null) {      if (this.fileName != null) {        output.print("Caused in ");        output.print(this.fileName);        output.print(" by: ");      } else {        output.print("Caused by: ");      }      throwable.printStackTrace(output);    }  }}  }
class C{  public synchronized void requestPreviewFrame(Handler handler,int message){  Camera theCamera=camera;  if (theCamera != null && previewing) {    previewCallback.setHandler(handler,message);    theCamera.setOneShotPreviewCallback(previewCallback);  }}  }
class C{  public static boolean canAssign(ITypeBinding typeToAssign,ITypeBinding definedType){  TypeEnvironment typeEnvironment=new TypeEnvironment(false,true);  TType defined=typeEnvironment.create(definedType);  TType toAssign=typeEnvironment.create(typeToAssign);  return toAssign.canAssignTo(defined);}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  DaoTestDao.createTable(db,ifNotExists);}  }
class C{  public Path(String[] elements){  this();  for (int i=0; i < elements.length; i++)   m_Elements.add(new PathElement(elements[i]));}  }
class C{  @DSSink({DSSinkKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:28.218 -0500",hash_original_method="7A0B7FD710461D3DD9E5460070BF3AA7",hash_generated_method="19C5A33FDFC1B63C0DB8E261167CC24C") public static Intent createIncomingCallBroadcast(String callId,String sessionDescription){  Intent intent=new Intent();  intent.putExtra(EXTRA_CALL_ID,callId);  intent.putExtra(EXTRA_OFFER_SD,sessionDescription);  return intent;}  }
class C{  @Override public void run(){  amIActive=true;  String[] shapefiles=new String[2];  String outputFile;  int progress;  int i, n, FID;  int oneHundredthTotal;  int numRecs;  ShapeType shapeType;  ShapeType outputShapeType=ShapeType.POLYGON;  GeometryFactory factory=new GeometryFactory();  com.vividsolutions.jts.geom.Geometry g1=null;  com.vividsolutions.jts.geom.Geometry g2=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  shapefiles[0]=args[0];  shapefiles[1]=args[1];  outputFile=args[2];  if ((shapefiles[0].length() <= 0) || (shapefiles[1].length() <= 0) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    com.vividsolutions.jts.geom.Geometry[] recJTSGeometries=null;    ArrayList<com.vividsolutions.jts.geom.Geometry> inputGeometryList=new ArrayList<>();    com.vividsolutions.jts.geom.Geometry outputGeometry=null;    ShapeFile input1=new ShapeFile(shapefiles[0]);    shapeType=input1.getShapeType();    numRecs=input1.getNumberOfRecords();    if (shapeType.getBaseType() == ShapeType.POINT || shapeType.getBaseType() == ShapeType.MULTIPOINT) {      outputShapeType=ShapeType.POINT;    } else     if (shapeType.getBaseType() == ShapeType.POLYLINE && outputShapeType == ShapeType.POLYGON) {      outputShapeType=ShapeType.POLYLINE;    }    oneHundredthTotal=numRecs / 100;    progress=0;    n=0;    for (    ShapeFileRecord record : input1.records) {      if (record.getShapeType() != ShapeType.NULLSHAPE) {        recJTSGeometries=record.getGeometry().getJTSGeometries();        for (int a=0; a < recJTSGeometries.length; a++) {          recJTSGeometries[a].setUserData(record.getRecordNumber());          if (recJTSGeometries[a].isValid()) {            inputGeometryList.add(recJTSGeometries[a]);          } else {            System.out.println(record.getRecordNumber() + " is invalid.");          }        }      }      n++;      if (n >= oneHundredthTotal) {        n=0;        if (cancelOp) {          cancelOperation();          return;        }        progress++;        updateProgress("Loop 1 of " + 2 + ": Reading data:",progress);      }    }    g1=factory.buildGeometry(inputGeometryList);    inputGeometryList.clear();    ShapeFile input2=new ShapeFile(shapefiles[1]);    shapeType=input2.getShapeType();    if (input2.getShapeType() != shapeType) {      showFeedback("Both input images must be of the same shape type.");      return;    }    numRecs=input2.getNumberOfRecords();    if (shapeType.getBaseType() == ShapeType.POINT || shapeType.getBaseType() == ShapeType.MULTIPOINT) {      outputShapeType=ShapeType.POINT;    } else     if (shapeType.getBaseType() == ShapeType.POLYLINE && outputShapeType == ShapeType.POLYGON) {      outputShapeType=ShapeType.POLYLINE;    }    oneHundredthTotal=numRecs / 100;    progress=0;    n=0;    for (    ShapeFileRecord record : input2.records) {      if (record.getShapeType() != ShapeType.NULLSHAPE) {        recJTSGeometries=record.getGeometry().getJTSGeometries();        for (int a=0; a < recJTSGeometries.length; a++) {          recJTSGeometries[a].setUserData(record.getRecordNumber());          if (recJTSGeometries[a].isValid()) {            inputGeometryList.add(recJTSGeometries[a]);          } else {            System.out.println(record.getRecordNumber() + " is invalid.");          }        }      }      n++;      if (n >= oneHundredthTotal) {        n=0;        if (cancelOp) {          cancelOperation();          return;        }        progress++;        updateProgress("Loop 2 of " + 2 + ": Reading data:",progress);      }    }    g2=factory.buildGeometry(inputGeometryList);    inputGeometryList.clear();    updateProgress("Performing operation (progress will not be updated):",-1);    try {      outputGeometry=g1.difference(g2);    } catch (    Exception ex) {      outputGeometry=com.vividsolutions.jts.operation.overlay.snap.SnapOverlayOp.difference(g1,g2);    }    ShapeFile output=null;    DBFWriter writer=null;    output=new ShapeFile(outputFile,outputShapeType);    output.setProjectionStringFromOtherShapefile(input1);    DBFField fields[]=new DBFField[3];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    fields[1]=new DBFField();    fields[1].setName("PARENT1_ID");    fields[1].setDataType(DBFField.DBFDataType.NUMERIC);    fields[1].setFieldLength(10);    fields[1].setDecimalCount(0);    fields[2]=new DBFField();    fields[2].setName("PARENT2_ID");    fields[2].setDataType(DBFField.DBFDataType.NUMERIC);    fields[2].setFieldLength(10);    fields[2].setDecimalCount(0);    String DBFName=output.getDatabaseFile();    writer=new DBFWriter(new File(DBFName));    writer.setFields(fields);    PreparedGeometry[] tests1=new PreparedGeometry[g1.getNumGeometries()];    com.vividsolutions.jts.geom.Geometry[] testGs1=new com.vividsolutions.jts.geom.Geometry[g1.getNumGeometries()];    int[] userData1=new int[g1.getNumGeometries()];    for (int a=0; a < g1.getNumGeometries(); a++) {      tests1[a]=PreparedGeometryFactory.prepare(g1.getGeometryN(a));      userData1[a]=Integer.parseInt(g1.getGeometryN(a).getUserData().toString());      testGs1[a]=g1.getGeometryN(a);    }    PreparedGeometry[] tests2=new PreparedGeometry[g2.getNumGeometries()];    com.vividsolutions.jts.geom.Geometry[] testGs2=new com.vividsolutions.jts.geom.Geometry[g2.getNumGeometries()];    int[] userData2=new int[g2.getNumGeometries()];    for (int a=0; a < g2.getNumGeometries(); a++) {      tests2[a]=PreparedGeometryFactory.prepare(g2.getGeometryN(a));      userData2[a]=Integer.parseInt(g2.getGeometryN(a).getUserData().toString());      testGs2[a]=g2.getGeometryN(a);    }    if (outputGeometry instanceof GeometryCollection) {      int numGeometries=outputGeometry.getNumGeometries();      oneHundredthTotal=(int)(numGeometries / 100.0);      progress=0;      n=0;      FID=0;      int parentRecNum=0;      for (int a=0; a < numGeometries; a++) {        parentRecNum=-99;        com.vividsolutions.jts.geom.Geometry gN=outputGeometry.getGeometryN(a);        for (int m=0; m < tests1.length; m++) {          if (tests1[m].overlaps(gN) || tests1[m].covers(gN) || gN.distance(testGs1[m]) < 0.0001) {            parentRecNum=userData1[m];            break;          }        }        if (gN instanceof com.vividsolutions.jts.geom.Point && outputShapeType == ShapeType.POINT) {          Coordinate p=gN.getCoordinate();          whitebox.geospatialfiles.shapefile.Point wbGeometry=new whitebox.geospatialfiles.shapefile.Point(p.x,p.y);          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[1];          rowData[0]=new Double(FID);          writer.addRecord(rowData);        } else         if (gN instanceof LineString && outputShapeType == ShapeType.POLYLINE) {          LineString ls=(LineString)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts={0};          Coordinate[] coords=ls.getCoordinates();          for (i=0; i < coords.length; i++) {            pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[3];          rowData[0]=new Double(FID);          rowData[1]=new Double(parentRecNum);          rowData[2]=null;          writer.addRecord(rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYLINE) {          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (Topology.isClockwisePolygon(coords)) {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[3];          rowData[0]=new Double(FID);          rowData[1]=new Double(parentRecNum);          rowData[2]=null;          writer.addRecord(rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYGON) {          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (Topology.isClockwisePolygon(coords)) {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.Polygon wbGeometry=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[3];          rowData[0]=new Double(FID);          rowData[1]=new Double(parentRecNum);          rowData[2]=null;          writer.addRecord(rowData);        } else {        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Saving output file",progress);        }      }    } else {      showFeedback("An error was encountered when saving the output file.");      return;    }    updateProgress("Performing operation (progress will not be updated):",-1);    try {      outputGeometry=g2.difference(g1);    } catch (    Exception ex) {      outputGeometry=com.vividsolutions.jts.operation.overlay.snap.SnapOverlayOp.difference(g2,g1);    }    if (outputGeometry instanceof GeometryCollection) {      int numGeometries=outputGeometry.getNumGeometries();      oneHundredthTotal=(int)(numGeometries / 100.0);      progress=0;      n=0;      int parentRecNum=0;      for (int a=0; a < numGeometries; a++) {        parentRecNum=-99;        com.vividsolutions.jts.geom.Geometry gN=outputGeometry.getGeometryN(a);        for (int m=0; m < tests2.length; m++) {          if (tests2[m].overlaps(gN) || tests2[m].covers(gN) || gN.distance(testGs2[m]) < 0.0001) {            parentRecNum=userData2[m];            break;          }        }        if (gN instanceof com.vividsolutions.jts.geom.Point && outputShapeType == ShapeType.POINT) {          Coordinate p=gN.getCoordinate();          whitebox.geospatialfiles.shapefile.Point wbGeometry=new whitebox.geospatialfiles.shapefile.Point(p.x,p.y);          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[3];          rowData[0]=new Double(FID);          rowData[1]=null;          rowData[2]=new Double(parentRecNum);          writer.addRecord(rowData);        } else         if (gN instanceof LineString && outputShapeType == ShapeType.POLYLINE) {          LineString ls=(LineString)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();          int[] parts={0};          Coordinate[] coords=ls.getCoordinates();          for (i=0; i < coords.length; i++) {            pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[3];          rowData[0]=new Double(FID);          rowData[1]=null;          rowData[2]=new Double(parentRecNum);          writer.addRecord(rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYLINE) {          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (Topology.isClockwisePolygon(coords)) {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[3];          rowData[0]=new Double(FID);          rowData[1]=null;          rowData[2]=new Double(parentRecNum);          writer.addRecord(rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYGON) {          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (Topology.isClockwisePolygon(coords)) {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.Polygon wbGeometry=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[3];          rowData[0]=new Double(FID);          rowData[1]=null;          rowData[2]=new Double(parentRecNum);          writer.addRecord(rowData);        } else {        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Saving output file",progress);        }      }    } else {      showFeedback("An error was encountered when saving the output file.");      return;    }    if (outputShapeType == ShapeType.POLYGON) {      updateProgress("Performing operation (progress will not be updated):",-1);      try {        outputGeometry=g1.intersection(g2);      } catch (      Exception ex) {        outputGeometry=com.vividsolutions.jts.operation.overlay.snap.SnapOverlayOp.intersection(g1,g2);      }      if (outputGeometry instanceof GeometryCollection) {        int numGeometries=outputGeometry.getNumGeometries();        oneHundredthTotal=(int)(numGeometries / 100.0);        progress=0;        n=0;        int parentRecNum1=0;        int parentRecNum2=0;        for (int a=0; a < numGeometries; a++) {          parentRecNum1=-99;          parentRecNum2=-99;          com.vividsolutions.jts.geom.Geometry gN=outputGeometry.getGeometryN(a);          for (int m=0; m < tests1.length; m++) {            if (tests1[m].overlaps(gN) || tests1[m].covers(gN) || gN.distance(testGs1[m]) < 0.0001) {              parentRecNum1=userData1[m];              break;            }          }          for (int m=0; m < tests2.length; m++) {            if (tests2[m].overlaps(gN) || tests2[m].covers(gN) || gN.distance(testGs2[m]) < 0.0001) {              parentRecNum2=userData2[m];              break;            }          }          if (gN instanceof com.vividsolutions.jts.geom.Point && outputShapeType == ShapeType.POINT) {            Coordinate p=gN.getCoordinate();            whitebox.geospatialfiles.shapefile.Point wbGeometry=new whitebox.geospatialfiles.shapefile.Point(p.x,p.y);            output.addRecord(wbGeometry);            FID++;            Object[] rowData=new Object[3];            rowData[0]=new Double(FID);            rowData[1]=new Double(parentRecNum1);            rowData[2]=new Double(parentRecNum2);            writer.addRecord(rowData);          } else           if (gN instanceof LineString && outputShapeType == ShapeType.POLYLINE) {            LineString ls=(LineString)gN;            ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();            int[] parts={0};            Coordinate[] coords=ls.getCoordinates();            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }            PointsList pl=new PointsList(pnts);            whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());            output.addRecord(wbGeometry);            FID++;            Object[] rowData=new Object[3];            rowData[0]=new Double(FID);            rowData[1]=new Double(parentRecNum1);            rowData[2]=new Double(parentRecNum2);            writer.addRecord(rowData);          } else           if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYLINE) {            com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;            ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();            int[] parts=new int[p.getNumInteriorRing() + 1];            Coordinate[] coords=p.getExteriorRing().getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }            for (int b=0; b < p.getNumInteriorRing(); b++) {              parts[b + 1]=pnts.size();              coords=p.getInteriorRingN(b).getCoordinates();              if (Topology.isClockwisePolygon(coords)) {                for (i=coords.length - 1; i >= 0; i--) {                  pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));                }              } else {                for (i=0; i < coords.length; i++) {                  pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));                }              }            }            PointsList pl=new PointsList(pnts);            whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());            output.addRecord(wbGeometry);            FID++;            Object[] rowData=new Object[3];            rowData[0]=new Double(FID);            rowData[1]=new Double(parentRecNum1);            rowData[2]=new Double(parentRecNum2);            writer.addRecord(rowData);          } else           if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYGON) {            com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;            ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();            int[] parts=new int[p.getNumInteriorRing() + 1];            Coordinate[] coords=p.getExteriorRing().getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }            for (int b=0; b < p.getNumInteriorRing(); b++) {              parts[b + 1]=pnts.size();              coords=p.getInteriorRingN(b).getCoordinates();              if (Topology.isClockwisePolygon(coords)) {                for (i=coords.length - 1; i >= 0; i--) {                  pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));                }              } else {                for (i=0; i < coords.length; i++) {                  pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));                }              }            }            PointsList pl=new PointsList(pnts);            whitebox.geospatialfiles.shapefile.Polygon wbGeometry=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());            output.addRecord(wbGeometry);            FID++;            Object[] rowData=new Object[3];            rowData[0]=new Double(FID);            rowData[1]=new Double(parentRecNum1);            rowData[2]=new Double(parentRecNum2);            writer.addRecord(rowData);          } else {          }          n++;          if (n >= oneHundredthTotal) {            n=0;            if (cancelOp) {              cancelOperation();              return;            }            progress++;            updateProgress("Saving output file",progress);          }        }      } else {        showFeedback("An error was encountered when saving the output file.");        return;      }    }    output.write();    writer.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public MqttAndroidClient createClient(Context context,String serverURI,String clientId){  MqttAndroidClient client=new MqttAndroidClient(context,serverURI,clientId);  return client;}  }
class C{  @Override public String toString(){  return getClass().getName() + "[value=" + value+ ']';}  }
class C{  public static float length(Vector2 a){  return (float)Math.sqrt(lengthSquared(a));}  }
class C{  public void testToPlainStringPosNegExp(){  String a="123809648392384754573567356745735.63567890295784902768787678287E-100";  BigDecimal aNumber=new BigDecimal(a);  String result="0.000000000000000000000000000000000000000000000000000000000000000000012380964839238475457356735674573563567890295784902768787678287";  assertTrue("incorrect value",aNumber.toPlainString().equals(result));}  }
class C{  @Override protected boolean isSwitchFor(EPackage ePackage){  return ePackage == modelPackage;}  }
class C{  public int maxNumberMoves(){  return 16;}  }
class C{  private static int uarimaxGt(double value,double[] bv,int bvi[],BinaryOperator bOp) throws DMLRuntimeException {  int ixMax=bv.length;  if (value <= bv[0] || value > bv[bv.length - 1])   return ixMax;  int ix=Arrays.binarySearch(bv,value);  ix=Math.abs(ix) - 1;  ixMax=bvi[ix - 1] + 1;  return ixMax;}  }
class C{  public E2LSH(List<V> vecs,double radius,double eps,int w,int k,double delta,DistanceMetric dm,List<Double> distCache){  this.vecs=vecs;  setRadius(radius);  this.delta=delta;  setEps(eps);  if (w <= 0)   this.w=4; else   this.w=w;  setDistanceMetric(dm);  this.distCache=distCache;  if (k <= 0)   this.k=(int)ceil(log(vecs.size()) / log(1 / p2)); else   this.k=k;  if (delta <= 0 || delta >= 1)   throw new IllegalArgumentException("dleta must be in range (0,1)");  L=(int)ceil(log(1 / delta) / -log(1 - pow(p1,this.k)));  Random rand=new XORWOW();  createTablesAndHashes(rand);}  }
class C{  public DERUTCTime(String time){  this.time=Strings.toByteArray(time);  try {    this.getDate();  } catch (  ParseException e) {    throw new IllegalArgumentException("invalid date string: " + e.getMessage());  }}  }
class C{  public static final int[] readThisIntArrayXml(XmlPullParser parser,String endTag,String[] name) throws XmlPullParserException, IOException {  int num;  try {    num=Integer.parseInt(parser.getAttributeValue(null,"num"));  } catch (  NullPointerException e) {    throw new XmlPullParserException("Need num attribute in byte-array");  }catch (  NumberFormatException e) {    throw new XmlPullParserException("Not a number in num attribute in byte-array");  }  int[] array=new int[num];  int i=0;  int eventType=parser.getEventType();  do {    if (eventType == parser.START_TAG) {      if (parser.getName().equals("item")) {        try {          array[i]=Integer.parseInt(parser.getAttributeValue(null,"value"));        } catch (        NullPointerException e) {          throw new XmlPullParserException("Need value attribute in item");        }catch (        NumberFormatException e) {          throw new XmlPullParserException("Not a number in value attribute in item");        }      } else {        throw new XmlPullParserException("Expected item tag at: " + parser.getName());      }    } else     if (eventType == parser.END_TAG) {      if (parser.getName().equals(endTag)) {        return array;      } else       if (parser.getName().equals("item")) {        i++;      } else {        throw new XmlPullParserException("Expected " + endTag + " end tag at: "+ parser.getName());      }    }    eventType=parser.next();  } while (eventType != parser.END_DOCUMENT);  throw new XmlPullParserException("Document ended before " + endTag + " end tag");}  }
class C{  public TransformationPlan hasDeclarationAndMarkBrokenness(Tree.Declaration node){  return annotateBrokenness(declarationVisitor.getRecoveryPlan(node));}  }
class C{  void registerDecorators(){  view.addDrawDecorator(processBackgroundImageDrawer,RenderPhase.BACKGROUND);}  }
class C{  @Override public void declareExtensions(ExtensionProfile extProfile){  super.declareExtensions(extProfile);  extProfile.declare(SitemapsNewsEntry.class,ExtensionDescription.getDefaultDescription(PublicationLabel.class));}  }
class C{  public GitHubRepositoryList createRepositoriesList(PagedIterable<GHRepository> ghRepositoriesList) throws ApiException, IOException {  GitHubRepositoryList dtoRepositoriesList=DtoFactory.getInstance().createDto(GitHubRepositoryList.class);  List<GitHubRepository> dtoRepositories=new ArrayList<>();  for (  GHRepository ghRepository : ghRepositoriesList) {    dtoRepositories.add(createRepository(ghRepository));  }  dtoRepositoriesList.setRepositories(dtoRepositories);  return dtoRepositoriesList;}  }
class C{  public static boolean isPresent(){  IBinder b=ServiceManager.getService(Context.LOCATION_SERVICE);  ILocationManager lm=ILocationManager.Stub.asInterface(b);  try {    return lm.geocoderIsPresent();  } catch (  RemoteException e) {    Log.e(TAG,"isPresent: got RemoteException",e);    return false;  }}  }
class C{  @Nullable public static String evaluateString(@NotNull final PyExpression expression){  return PyUtil.as(new PyAnyExpressionEvaluator(false).evaluate(expression),String.class);}  }
class C{  private void messageToMap(Message message,Map<Object,Object> mapRequest){  if (message == null || mapRequest == null) {    return;  }  setJsonField(mapRequest,PARAM_PRIORITY,message.getPriority());  setJsonField(mapRequest,PARAM_CONTENT_AVAILABLE,message.getContentAvailable());  setJsonField(mapRequest,PARAM_TIME_TO_LIVE,message.getTimeToLive());  setJsonField(mapRequest,PARAM_COLLAPSE_KEY,message.getCollapseKey());  setJsonField(mapRequest,PARAM_RESTRICTED_PACKAGE_NAME,message.getRestrictedPackageName());  setJsonField(mapRequest,PARAM_DELAY_WHILE_IDLE,message.isDelayWhileIdle());  setJsonField(mapRequest,PARAM_DRY_RUN,message.isDryRun());  Map<String,String> payload=message.getData();  if (!payload.isEmpty()) {    mapRequest.put(JSON_PAYLOAD,payload);  }  if (message.getNotification() != null) {    Notification notification=message.getNotification();    Map<Object,Object> nMap=new HashMap<Object,Object>();    if (notification.getBadge() != null) {      setJsonField(nMap,JSON_NOTIFICATION_BADGE,notification.getBadge().toString());    }    setJsonField(nMap,JSON_NOTIFICATION_BODY,notification.getBody());    setJsonField(nMap,JSON_NOTIFICATION_BODY_LOC_ARGS,notification.getBodyLocArgs());    setJsonField(nMap,JSON_NOTIFICATION_BODY_LOC_KEY,notification.getBodyLocKey());    setJsonField(nMap,JSON_NOTIFICATION_CLICK_ACTION,notification.getClickAction());    setJsonField(nMap,JSON_NOTIFICATION_COLOR,notification.getColor());    setJsonField(nMap,JSON_NOTIFICATION_ICON,notification.getIcon());    setJsonField(nMap,JSON_NOTIFICATION_SOUND,notification.getSound());    setJsonField(nMap,JSON_NOTIFICATION_TAG,notification.getTag());    setJsonField(nMap,JSON_NOTIFICATION_TITLE,notification.getTitle());    setJsonField(nMap,JSON_NOTIFICATION_TITLE_LOC_ARGS,notification.getTitleLocArgs());    setJsonField(nMap,JSON_NOTIFICATION_TITLE_LOC_KEY,notification.getTitleLocKey());    mapRequest.put(JSON_NOTIFICATION,nMap);  }}  }
class C{  public int totalTermCount(){  return totalTermCount;}  }
class C{  public static void cacheClientUserId(ConsumerBean consumerBean,Long internalId,String clientId){  cacheClientUserId(consumerBean.getShort_name(),internalId,clientId);}  }
class C{  public boolean contains(double minLatitude,double minLongitude,double deltaLatitude,double deltaLongitude){  double maxLatitude=Location.clampLatitude(minLatitude + (deltaLatitude > 0 ? deltaLatitude : Double.NaN));  double maxLongitude=Location.clampLongitude(minLongitude + (deltaLongitude > 0 ? deltaLongitude : Double.NaN));  return this.minLatitude <= minLatitude && this.maxLatitude >= maxLatitude && this.minLongitude <= minLongitude && this.maxLongitude >= maxLongitude;}  }
class C{  @Override boolean isCallPermitted(){  return true;}  }
class C{  public boolean isHandshakeComplete(){  return handshakeComplete;}  }
class C{  public static Tooltip create(final Element targetElement,final String header,final PositionController.VerticalAlign vAlign,final PositionController.HorizontalAlign hAlign,final String... tooltipText){  final PositionerBuilder positionrBuilder=new TooltipPositionerBuilder().setVerticalAlign(vAlign).setHorizontalAlign(hAlign);  final Positioner positioner=positionrBuilder.buildAnchorPositioner(targetElement);  final Builder builder=new Builder(targetElement,positioner);  builder.setTooltipRenderer(new ListRenderer(header,tooltipText));  return builder.build();}  }
class C{  public void onListItemClick(ListView l,View v,int position,long id){}  }
class C{  public void searchAllTypeNames(final char[] packageExactName,final char[] typeName,final int matchRule,int searchFor,IJavaSearchScope scope,final TypeNameRequestor nameRequestor,int waitingPolicy,IProgressMonitor progressMonitor) throws JavaModelException {  searchAllTypeNames(packageExactName,SearchPattern.R_EXACT_MATCH,typeName,matchRule,searchFor,scope,nameRequestor,waitingPolicy,progressMonitor);}  }
class C{  @Override public void addHeader(final String header,final String value){  mBaseRequest.addHeader(header,value);}  }
class C{  public void test_isLenient(){  DateFormat df=DateFormat.getInstance();  Calendar c=df.getCalendar();  if (df.isLenient()) {    try {      c.set(Calendar.DAY_OF_MONTH,32);      c.get(Calendar.DAY_OF_MONTH);    } catch (    Exception e) {      fail("Unexpected exception " + e.toString());    }    c.setLenient(false);    try {      c.set(Calendar.DAY_OF_MONTH,32);      c.get(Calendar.DAY_OF_MONTH);      fail("Expected IllegalArgumentException was not thrown");    } catch (    IllegalArgumentException e) {    }catch (    Exception e) {      fail("Unexpected exception " + e.toString());    }  } else {    try {      c.set(Calendar.DAY_OF_MONTH,32);      c.get(Calendar.DAY_OF_MONTH);      fail("Expected IllegalArgumentException was not thrown");    } catch (    IllegalArgumentException e) {    }catch (    Exception e) {      fail("Unexpected exception " + e.toString());    }    c.setLenient(true);    try {      c.set(Calendar.DAY_OF_MONTH,32);      c.get(Calendar.DAY_OF_MONTH);    } catch (    Exception e) {      fail("Unexpected exception " + e.toString());    }  }}  }
class C{  static void writeOffset(ZoneOffset offset,DataOutput out) throws IOException {  final int offsetSecs=offset.getTotalSeconds();  int offsetByte=offsetSecs % 900 == 0 ? offsetSecs / 900 : 127;  out.writeByte(offsetByte);  if (offsetByte == 127) {    out.writeInt(offsetSecs);  }}  }
class C{  public synchronized long size(){  return size;}  }
class C{  public Shape createArrowDown(final double x,final double y,final double w,final double h){  path.reset();  path.moveTo(x,y);  path.lineTo(x + w / 2,y + h);  path.lineTo(x + w,y);  path.closePath();  return path;}  }
class C{  public final void popCurrentExpressionNode(){  m_currentExpressionNodes.quickPop(1);}  }
class C{  public FastItemAdapter<Item> withUseIdDistributor(boolean useIdDistributor){  mItemAdapter.withUseIdDistributor(useIdDistributor);  return this;}  }
class C{  public void registerImage(final String key,final Image img){  _imageRegistry.put(key,img);}  }
class C{  private void processNonMeshDevices(List<IEspDevice> nonMeshDevices,IEspDeviceStatus status){  for (  IEspDevice nonMeshDevice : nonMeshDevices) {    if (nonMeshDevice.getDeviceState().isStateLocal()) {      IEspActionDevicePostStatusLocal actionLocal=new EspActionDevicePostStatusLocal();      actionLocal.doActionDevicePostStatusLocal(nonMeshDevice,status);    } else {      IEspActionDevicePostStatusInternet actionInternet=new EspActionDevicePostStatusInternet();      actionInternet.doActionDevicePostStatusInternet(nonMeshDevice,status);    }  }}  }
class C{  public boolean addAll(Collection c){  throw new UnsupportedOperationException();}  }
class C{  public void selectRelation(Relation r){  if (r != null) {    for (    RelationMember rm : r.getMembers()) {      OsmElement e=rm.getElement();      if (e != null) {        if (e.getName().equals(Way.NAME)) {          addSelectedRelationWay((Way)e);        } else         if (e.getName().equals(Node.NAME)) {          addSelectedRelationNode((Node)e);        } else         if (e.getName().equals(Relation.NAME) && (selectedRelationRelations == null || !selectedRelationRelations.contains((Relation)e))) {          addSelectedRelationRelation((Relation)e);        }      }    }  }}  }
class C{  public void clear(){  paintMap.clear();  nextPaintIndex=0;}  }
class C{  public void testMultiSort() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(new SortedDocValuesField("value1",new BytesRef("foo")));  doc.add(new NumericDocValuesField("value2",0));  doc.add(newStringField("value1","foo",Field.Store.YES));  doc.add(newStringField("value2","0",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new SortedDocValuesField("value1",new BytesRef("bar")));  doc.add(new NumericDocValuesField("value2",1));  doc.add(newStringField("value1","bar",Field.Store.YES));  doc.add(newStringField("value2","1",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new SortedDocValuesField("value1",new BytesRef("bar")));  doc.add(new NumericDocValuesField("value2",0));  doc.add(newStringField("value1","bar",Field.Store.YES));  doc.add(newStringField("value2","0",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new SortedDocValuesField("value1",new BytesRef("foo")));  doc.add(new NumericDocValuesField("value2",1));  doc.add(newStringField("value1","foo",Field.Store.YES));  doc.add(newStringField("value2","1",Field.Store.YES));  writer.addDocument(doc);  IndexReader ir=writer.getReader();  writer.close();  IndexSearcher searcher=newSearcher(ir);  Sort sort=new Sort(new SortField("value1",SortField.Type.STRING),new SortField("value2",SortField.Type.LONG));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(4,td.totalHits);  assertEquals("bar",searcher.doc(td.scoreDocs[0].doc).get("value1"));  assertEquals("bar",searcher.doc(td.scoreDocs[1].doc).get("value1"));  assertEquals("foo",searcher.doc(td.scoreDocs[2].doc).get("value1"));  assertEquals("foo",searcher.doc(td.scoreDocs[3].doc).get("value1"));  assertEquals("0",searcher.doc(td.scoreDocs[0].doc).get("value2"));  assertEquals("1",searcher.doc(td.scoreDocs[1].doc).get("value2"));  assertEquals("0",searcher.doc(td.scoreDocs[2].doc).get("value2"));  assertEquals("1",searcher.doc(td.scoreDocs[3].doc).get("value2"));  td=searcher.search(new MatchAllDocsQuery(),1,sort);  assertEquals(4,td.totalHits);  assertEquals("bar",searcher.doc(td.scoreDocs[0].doc).get("value1"));  assertEquals("0",searcher.doc(td.scoreDocs[0].doc).get("value2"));  ir.close();  dir.close();}  }
class C{  @Override public void close(){  try {    channel.close();  } catch (  Throwable e) {    logger.warn(e.getMessage(),e);  }}  }
class C{  @Override protected boolean useTeleportScroll(final Player player){  StendhalRPZone zone=SingletonRepository.getRPWorld().getZone("0_semos_city");  int x=30;  int y=40;  final String infostring=getInfoString();  if (infostring != null) {    final StringTokenizer st=new StringTokenizer(infostring);    if (st.countTokens() == 3) {      final String zoneName=st.nextToken();      final StendhalRPZone temp=SingletonRepository.getRPWorld().getZone(zoneName);      if (temp == null) {        player.sendPrivateText("Oh oh. For some strange reason the scroll did not teleport me to the right place.");        logger.warn("marked scroll to unknown zone " + infostring + " teleported "+ player.getName()+ " to Semos instead");      } else {        if (player.getKeyedSlot("!visited",zoneName) == null) {          player.sendPrivateText("Although you have heard a lot of rumors about the destination, " + "you cannot concentrate on it because you have never been there.");          return false;        } else {          zone=temp;          x=Integer.parseInt(st.nextToken());          y=Integer.parseInt(st.nextToken());          if (!zone.isTeleportInAllowed(x,y)) {            player.sendPrivateText("The strong anti magic aura in the destination area prevents the scroll from working!");            return false;          }        }      }    }  }  TeleportNotifier.get().notify(player,true);  return player.teleport(zone,x,y,null,player);}  }
class C{  protected boolean shouldAddSelectionInActionMode(){  return false;}  }
class C{  private boolean isEsxOrOtherHost(Host host){  return StringUtils.equalsIgnoreCase(host.getType(),HostType.Esx.toString()) || StringUtils.equalsIgnoreCase(host.getType(),HostType.Other.toString());}  }
class C{  public synchronized void add(double x,double y,double value){  super.add(x,y);  mValue.add(value);  updateRange(value);}  }
class C{  @Override public void close() throws SQLException {  try {    debugCodeCall("close");    closeInternal();  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  final void assignBuckets(final Cache cache){  if (isAssignBucketsAllowed(cache)) {    for (    PartitionedRegion region : ((GemFireCacheImpl)cache).getPartitionedRegions()) {      PartitionRegionHelper.assignBucketsToPartitions(region);    }  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:55.600 -0500",hash_original_method="5BADF30C241906ADFE33CA4BF6040CF6",hash_generated_method="5BADF30C241906ADFE33CA4BF6040CF6") CdmaConnection(Context context,CdmaCallWaitingNotification cw,CdmaCallTracker ct,CdmaCall parent){  createWakeLock(context);  acquireWakeLock();  owner=ct;  h=new MyHandler(owner.getLooper());  address=cw.number;  numberPresentation=cw.numberPresentation;  cnapName=cw.name;  cnapNamePresentation=cw.namePresentation;  index=-1;  isIncoming=true;  createTime=System.currentTimeMillis();  connectTime=0;  this.parent=parent;  parent.attachFake(this,CdmaCall.State.WAITING);}  }
class C{  public SendableVenueMessage build(){  return new SendableVenueMessage(latitude,longitude,title,address,foursquareId,replyTo,replyMarkup,disableNotification);}  }
class C{  public synchronized void reassertRole(OFSwitchHandshakeHandler ofSwitchHandshakeHandler,HARole role){  if (this.getRole() != role)   return;  ofSwitchHandshakeHandler.sendRoleRequestIfNotPending(this.getRole().getOFRole());}  }
class C{  public static List<Entry> readMetadata(ByteBuf buf) throws IOException {  List<Entry> entries=new ArrayList<>();  byte item;  while ((item=buf.readByte()) != -1) {    MetadataType type=MetadataType.byId(buf.readByte());    MetadataIndex index=MetadataIndex.getIndex((int)item,type);switch (type) {case BYTE:      entries.add(new Entry(index,buf.readByte()));    break;case INT:  entries.add(new Entry(index,ByteBufUtils.readVarInt(buf)));break;case FLOAT:entries.add(new Entry(index,buf.readFloat()));break;case STRING:entries.add(new Entry(index,ByteBufUtils.readUTF8(buf)));break;case ITEM:entries.add(new Entry(index,readSlot(buf)));break;case BOOLEAN:entries.add(new Entry(index,buf.readBoolean()));break;case VECTOR:float x=buf.readFloat();float y=buf.readFloat();float z=buf.readFloat();entries.add(new MetadataMap.Entry(index,new EulerAngle(x,y,z)));break;case POSITION:case OPTPOSITION:entries.add(new Entry(index,Position.getPosition(buf.readLong())));break;case DIRECTION:entries.add(new Entry(index,ByteBufUtils.readVarInt(buf)));break;case OPTUUID:if (buf.readBoolean()) {entries.add(new Entry(index,readUuid(buf)));}break;case BLOCKID:entries.add(new Entry(index,ByteBufUtils.readVarInt(buf)));}}return entries;}  }
class C{  public void stop(){}  }
class C{  public static void stopMouseCapture(Context cx,Scriptable thisObj,Object[] args,Function funObj){  GlobalWrapper gw=(GlobalWrapper)thisObj;  SVGGlobal global=(SVGGlobal)gw.window;  global.stopMouseCapture();}  }
class C{  public DViewAsn1Dump(JDialog parent,X509CRL crl) throws Asn1Exception, IOException {  super(res.getString("DViewAsn1Dump.Crl.Title"));  this.crl=crl;  initComponents();}  }
class C{  private static void searchInBuildDir(){  String url=PlatformUtilities.class.getProtectionDomain().getCodeSource().getLocation().getPath();  if (url == null) {    logSevere("Failed to locate 'rapidminer.home'. Could not locate base directory of classes!");  } else {    File buildDir=new File(url).getParentFile();    logInfo("Trying base directory of classes (build) '" + buildDir + "' ...");    if (buildDir != null && buildDir.isDirectory()) {      File rmHome=retrieveRMHomeFromLibraryDir(buildDir);      if (rmHome != null && rmHome.isDirectory()) {        logInfo("Gotcha! rapidminer.home is: " + rmHome);        try {          System.setProperty(PROPERTY_RAPIDMINER_HOME,rmHome.getCanonicalPath());        } catch (        IOException e) {          System.setProperty(PROPERTY_RAPIDMINER_HOME,rmHome.getAbsolutePath());        }      } else {        logSevere("Failed to locate 'rapidminer.home'! Parent dir of build directory does not exist.");      }    } else {      logSevere("Failed to locate 'rapidminer.home'! Build directory does not exists or isn't a directory.");    }  }}  }
class C{  public void migrateProperties(){  Network memory=getBot().memory().newMemory();  Vertex language=memory.createVertex(getPrimitive());  Vertex property=language.getRelationship(Primitive.EMOTE);  if (property != null) {    setEnableEmote((Boolean)property.getData());  }  property=language.getRelationship(Primitive.LANGUAGE);  if (property != null) {    setLanguage((String)property.getData());  }  property=language.getRelationship(Primitive.LEARNING);  if (property != null) {    setLearningMode(LearningMode.valueOf((String)property.getData()));  }  property=language.getRelationship(Primitive.MAXRESPONSEMATCHPROCESS);  if (property != null) {    setMaxResponseMatchProcess((Integer)property.getData());  }  property=language.getRelationship(Primitive.MAXSTATEPROCESS);  if (property != null) {    setMaxStateProcess((Integer)property.getData());  }  property=language.getRelationship(Primitive.CONVERSATIONMATCHPERCENTAGE);  if (property != null) {    setConversationMatchPercentage((Float)property.getData());  }  property=language.getRelationship(Primitive.DISCUSSIONMATCHPERCENTAGE);  if (property != null) {    setDiscussionMatchPercentage((Float)property.getData());  }  property=language.getRelationship(Primitive.LEARNINGRATE);  if (property != null) {    setLearningRate((Float)property.getData());  }  property=language.getRelationship(Primitive.CHECKEXACTMATCHFIRST);  if (property != null) {    setCheckExactMatchFirst((Boolean)property.getData());  }  property=language.getRelationship(Primitive.ENABLERESPONSEMATCH);  if (property != null) {    setEnableResponseMatch((Boolean)property.getData());  }  property=language.getRelationship(Primitive.LEARNGRAMMAR);  if (property != null) {    setLearnGrammar((Boolean)property.getData());  }  property=language.getRelationship(Primitive.FIXFORMULACASE);  if (property != null) {    setFixFormulaCase((Boolean)property.getData());  }  property=language.getRelationship(Primitive.CORRECTION);  if (property != null) {    if (property.getData() instanceof Boolean) {      if ((Boolean)property.getData()) {        setCorrectionMode(CorrectionMode.Everyone);      } else {        setCorrectionMode(CorrectionMode.Administrators);      }    } else {      setCorrectionMode(CorrectionMode.valueOf((String)property.getData()));    }  }  language.internalRemoveRelationships(Primitive.EMOTE);  language.internalRemoveRelationships(Primitive.LANGUAGE);  language.internalRemoveRelationships(Primitive.LEARNING);  language.internalRemoveRelationships(Primitive.MAXRESPONSEMATCHPROCESS);  language.internalRemoveRelationships(Primitive.MAXSTATEPROCESS);  language.internalRemoveRelationships(Primitive.CONVERSATIONMATCHPERCENTAGE);  language.internalRemoveRelationships(Primitive.DISCUSSIONMATCHPERCENTAGE);  language.internalRemoveRelationships(Primitive.LEARNINGRATE);  language.internalRemoveRelationships(Primitive.CHECKEXACTMATCHFIRST);  language.internalRemoveRelationships(Primitive.ENABLERESPONSEMATCH);  language.internalRemoveRelationships(Primitive.LEARNGRAMMAR);  language.internalRemoveRelationships(Primitive.FIXFORMULACASE);  language.internalRemoveRelationships(Primitive.CORRECTION);  memory.save();  saveProperties();}  }
class C{  public static void log(Context c,InputStream stream){  BufferedReader reader=null;  try {    reader=new BufferedReader(new InputStreamReader(stream));    int n;    char[] buffer=new char[1024];    while ((n=reader.read(buffer)) != -1) {      String msg=String.valueOf(buffer,0,n);      appendMessage(c,msg);    }  } catch (  IOException e) {  } finally {    close(reader);    close(stream);  }}  }
class C{  public WriteBuffer put(ByteBuffer src){  ensureCapacity(buff.remaining()).put(src);  return this;}  }
class C{  public LiveExprNode pushNeg(boolean hasNeg){  if (hasNeg) {    return new LNBool(!b);  }  return super.pushNeg(hasNeg);}  }
class C{  public void testResourcesAvailable(){  new CatalanAnalyzer().close();}  }
class C{  public DefaultGenerator(DependencyManager mgr,TransformFactory factory){  this.factory=requireNonNull(factory);  this.mgr=requireNonNull(mgr);  this.renderStack=new DefaultRenderStack();  this.renderTreeBuilder=new LinkedList<>();  this.renderTreeBuilder.add(RenderTree.builder());}  }
class C{  protected void callAction(){  if (commandSession != null && switchCommand != null) {    try {      switchCommand.execute(commandSession);    } catch (    Exception e) {      LOGGER.log(Level.FINEST,"Unable to execute the command",e);    }  }}  }
class C{  public void messageItemDetails(String strClass,String item,String description,HashMap<Integer,String> options,int defaultOption){  if (!classPreferenceList.containsKey(strClass)) {    classPreferenceList.put(strClass,new ClassPreferences());  }  ArrayList<MultipleChoice> a=classPreferenceList.get(strClass).getMultipleChoiceList();  for (int i=0; i < a.size(); i++) {    if (a.get(i).getItem().equals(item)) {      a.get(i).setMessageItems(description,options,defaultOption);      return;    }  }  a.add(new MultipleChoice(description,item,options,defaultOption));}  }
class C{  public static int supplemental(char h,char l){  return (h - 0xD800) * 0x400 + (l - 0xDC00) + 0x10000;}  }
class C{  public void addTableModelListener(TableModelListener l){  if (getModel() != null)   ((DataTableModel)getModel()).addTableModelListener(l);}  }
class C{  public void deactivate(URI id){  doDeactivate(id);}  }
class C{  public void addSplit(String splitLabel){  if (mDisabled)   return;  long now=SystemClock.elapsedRealtime();  mSplits.add(now);  mSplitLabels.add(splitLabel);}  }
class C{  protected Node newNode(){  return new SVGOMViewElement();}  }
class C{  @Override public void onClick(ClickEvent event){  if (!enabled) {    return;  }  ActionEvent e=new ActionEvent(place,presentation,actionManager,0);  if (action instanceof ActionGroup && !(action instanceof CustomComponentAction) && ((ActionGroup)action).isPopup()) {  } else {    action.actionPerformed(e);  }}  }
class C{  public final Vec2D frac(){  x-=MathUtils.floor(x);  y-=MathUtils.floor(y);  return this;}  }
class C{  void analyze(final MethodResult methodResult){  lock.lock();  try {    buildPackagePrefix(methodResult.getParentResource().getOriginalClass());    determineReturnTypes(methodResult.getInstructions()).stream().reduce(null).ifPresent(null);  }  finally {    lock.unlock();  }}  }
class C{  public void addLanguage(ExecutionLanguage language){  languages.add(1,language);}  }
class C{  public void reloadWorkspace(){  mModel.resetLoadedState(false,true);  mModel.startLoaderFromBackground();}  }
class C{  public Object next() throws IOException {  if (prevPos <= 0)   return null;  long endOfThisRecord=prevPos;  int thisLength=nextLength;  long recordStart=prevPos - thisLength;  prevPos=recordStart - 4;  if (prevPos <= 0)   return null;  long bufferPos=fis.getBufferPos();  if (prevPos >= bufferPos) {  } else {    long seekPos=endOfThisRecord - fis.getBufferSize();    seekPos=Math.min(seekPos,prevPos);    seekPos=Math.max(seekPos,0);    fis.seek(seekPos);    fis.peek();  }  fis.seek(prevPos);  nextLength=fis.readInt();  Object o=codec.readVal(fis);  return o;}  }
class C{  public double actual(){  return m_Actual;}  }
class C{  public static boolean isValid(@Nullable CloseableReference<?> ref){  return ref != null && ref.isValid();}  }
class C{  public NorwegianLightStemFilterFactory(Map<String,String> args){  super(args);  String variant=get(args,"variant");  if (variant == null || "nb".equals(variant)) {    flags=BOKMAAL;  } else   if ("nn".equals(variant)) {    flags=NYNORSK;  } else   if ("no".equals(variant)) {    flags=BOKMAAL | NYNORSK;  } else {    throw new IllegalArgumentException("invalid variant: " + variant);  }  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public boolean isValidYear(int year){  return (day == 29 && month == 2 && Year.isLeap(year) == false) == false;}  }
class C{  protected static void emitWideningBytecodeForPrimitiveConversion(ClassFileAssembler cb,Class<?> fromType,Class<?> toType){  if (fromType == Byte.TYPE || fromType == Short.TYPE || fromType == Character.TYPE || fromType == Integer.TYPE) {    if (toType == Long.TYPE) {      cb.opc_i2l();    } else     if (toType == Float.TYPE) {      cb.opc_i2f();    } else     if (toType == Double.TYPE) {      cb.opc_i2d();    }  } else   if (fromType == Long.TYPE) {    if (toType == Float.TYPE) {      cb.opc_l2f();    } else     if (toType == Double.TYPE) {      cb.opc_l2d();    }  } else   if (fromType == Float.TYPE) {    if (toType == Double.TYPE) {      cb.opc_f2d();    }  }}  }
class C{  public long done(){  return System.currentTimeMillis() - startTime;}  }
class C{  protected String onException(InvocationContext ctx,String label,Exception exception) throws Exception {  Object[] parameters=ctx.getParameters();  String details=createExceptionDetails(label,parameters,exception);  MonitorFactory.add(new MonKeyImp(MonitorFactory.EXCEPTIONS_LABEL,details,EXCEPTION_UNITS),1);  MonitorFactory.add(new MonKeyImp(exceptionLabel,details,EXCEPTION_UNITS),1);  if (exception != null) {    MonitorFactory.add(new MonKeyImp(exception.getClass().getName(),details,EXCEPTION_UNITS),1);  }  return details;}  }
class C{  protected final CUfunction initialize(String cuFileName,String functionName){  JCudaDriver.setExceptionsEnabled(true);  cuInit(0);  CUdevice device=new CUdevice();  cuDeviceGet(device,0);  CUcontext context=new CUcontext();  cuCtxCreate(context,0,device);  String ptxFileName=JCudaTestUtils.preparePtxFile(cuFileName);  CUmodule module=new CUmodule();  cuModuleLoad(module,ptxFileName);  CUfunction function=new CUfunction();  cuModuleGetFunction(function,module,functionName);  return function;}  }
class C{  private void drawHost(Graphics2D g2){  Coord loc=node.getLocation();  if (drawCoverage && node.isRadioActive()) {    ArrayList<NetworkInterface> interfaces=new ArrayList<NetworkInterface>();    interfaces.addAll(node.getInterfaces());    for (    NetworkInterface ni : interfaces) {      double range=ni.getTransmitRange();      Ellipse2D.Double coverage;      coverage=new Ellipse2D.Double(scale(loc.getX() - range),scale(loc.getY() - range),scale(range * 2),scale(range * 2));      g2.setColor(rangeColor);      g2.draw(coverage);    }  }  if (drawConnections) {    g2.setColor(conColor);    Coord c1=node.getLocation();    ArrayList<Connection> conList=new ArrayList<Connection>();    conList.addAll(node.getConnections());    for (    Connection c : conList) {      DTNHost otherNode=c.getOtherNode(node);      Coord c2;      if (otherNode == null) {        continue;      }      c2=otherNode.getLocation();      g2.drawLine(scale(c1.getX()),scale(c1.getY()),scale(c2.getX()),scale(c2.getY()));    }  }  g2.setColor(hostColor);  g2.drawRect(scale(loc.getX() - 1),scale(loc.getY() - 1),scale(2),scale(2));  if (isHighlighted()) {    g2.setColor(highlightedNodeColor);    g2.fillRect(scale(loc.getX()) - 3,scale(loc.getY()) - 3,6,6);  }  if (drawNodeName) {    g2.setColor(hostNameColor);    g2.drawString(node.toString(),scale(loc.getX()),scale(loc.getY()));  }}  }
class C{  public byte[] technicalProductToXml(List<TechnicalProduct> techProds,LocalizerServiceLocal localizer,DataService dm){  XmlDocument xml=technicalProductToXmlDocumentInt(techProds,localizer);  return xml.docToXml();}  }
class C{  public BenchmarkResults(java.awt.Component parent,String ram,String layout,String drawing,Map<String,Long> paintTimes,Map<String,Long> layoutTimes){  super((java.awt.Frame)SwingUtilities.windowForComponent(parent),true);  initComponents();  this.ram.setText(ram);  this.drawing.setText(drawing);  this.layoutSpeed.setText(layout);  paintTimesTable.setModel(mapToModel(paintTimes));  layoutTimesTable.setModel(mapToModel(layoutTimes));  setLocationRelativeTo(parent);  setVisible(true);}  }
class C{  @Override public CompanyApplicationObject copy(){  return new CompanyApplicationObject(this);}  }
class C{  public BlowFishCrypt(File keyFile){  try {    FileInputStream is=new FileInputStream(keyFile);    ObjectInputStream os=new ObjectInputStream(is);    String keyString=(String)os.readObject();    is.close();    byte[] keyBytes=keyString.getBytes();    secretKeySpec=new SecretKeySpec(keyBytes,"Blowfish");  } catch (  Exception e) {  }}  }
class C{  public void constValueIndex(float value) throws IOException {  constValueIndex('F',pool.addFloatInfo(value));}  }
class C{  public ContourBuilder(int width,int height,double[] values){  if (width < 1) {    String msg=Logging.getMessage("generic.InvalidWidth",width);    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (height < 1) {    String msg=Logging.getMessage("generic.InvalidHeight",height);    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (values == null) {    String msg=Logging.getMessage("nullValue.ArrayIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (values.length != width * height) {    String msg=Logging.getMessage("generic.ArrayInvalidLength",values.length);    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  this.width=width;  this.height=height;  this.values=values;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean isOverloadEnabled(){  return _isOverloadEnabled;}  }
class C{  public Attribute export(JavaClass cl,JavaClass target){  ConstantPool cp=target.getConstantPool();  cp.addUTF8(getName());  ExceptionsAttribute attr=new ExceptionsAttribute(getName());  for (int i=0; i < _exceptions.size(); i++) {    String exn=_exceptions.get(i);    cp.addClass(exn);    attr.addException(exn);  }  return attr;}  }
class C{  public Vector clampY(int min,int max){  return new Vector(x,Math.max(min,Math.min(max,y)),z);}  }
class C{  public void markArticle(int id,String mark,int state){  if (!isDBAvailable())   return;  SQLiteDatabase db=getOpenHelper().getWritableDatabase();  write.lock();  try {    db.beginTransaction();    markArticles("" + id,mark,"" + state);    db.setTransactionSuccessful();  }  finally {    try {      db.endTransaction();    }  finally {      write.unlock();    }  }}  }
class C{  public DateOrDateTimeProperty(ICalDate value){  super(value);}  }
class C{  public double gaussianShortfall(double target){  final CumulativeNormalDistribution gIntegral=new CumulativeNormalDistribution(mean(),standardDeviation());  return gIntegral.op(target);}  }
class C{  public ExponentialSawtooth(Type units){  super(units);}  }
class C{  @ZeppelinApi public void angularUnbind(String name){  String noteId=interpreterContext.getNoteId();  angularUnbind(name,noteId);}  }
class C{  public static void checkAndAppendDoubleElement(AVList params,String paramKey,Element context,String path){  if (params == null) {    String message=Logging.getMessage("nullValue.ParametersIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (paramKey == null) {    String message=Logging.getMessage("nullValue.ParameterKeyIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (context == null) {    String message=Logging.getMessage("nullValue.ElementIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Double d=AVListImpl.getDoubleValue(params,paramKey);  if (d != null) {    appendDouble(context,path,d);  }}  }
class C{  public boolean isSupported(String latestAllowedVersion){  return isSupported(new Version(latestAllowedVersion));}  }
class C{  public void clear(){  length=0;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypesPackage.TYPE__ANNOTATIONS:    return ((InternalEList<?>)getAnnotations()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public DiskBasedCache(File rootDirectory,int maxCacheSizeInBytes){  mRootDirectory=rootDirectory;  mMaxCacheSizeInBytes=maxCacheSizeInBytes;}  }
class C{  public void selfSub(SymetricalMatrix s){  if ((rows != s.rows) || (columns != s.columns)) {    throw new IllegalArgumentException("cannot substract a " + s.rows + 'x'+ s.columns+ " matrix from a "+ rows+ 'x'+ columns+ " matrix");  }  for (int i=0; i < rows; ++i) {    int indexU=i * (columns + 1);    int indexL=indexU;    data[indexU]-=s.data[indexU];    for (int j=i + 1; j < columns; ++j) {      ++indexU;      indexL+=columns;      data[indexU]-=s.data[indexU];      data[indexL]=data[indexU];    }  }}  }
class C{  private void handleOtherStatus(State state,InnerState innerState,int statusCode) throws StopRequest {  int finalStatus;  if (DownloaderService.isStatusError(statusCode)) {    finalStatus=statusCode;  } else   if (statusCode >= 300 && statusCode < 400) {    finalStatus=DownloaderService.STATUS_UNHANDLED_REDIRECT;  } else   if (innerState.mContinuingDownload && statusCode == DownloaderService.STATUS_SUCCESS) {    finalStatus=DownloaderService.STATUS_CANNOT_RESUME;  } else {    finalStatus=DownloaderService.STATUS_UNHANDLED_HTTP_CODE;  }  throw new StopRequest(finalStatus,"http error " + statusCode);}  }
class C{  public void testCreateConfigDirWhenDirectoryDoesNotExist() throws Exception {  String configDir="ram:///cargo/testCreateConfigDirWhenDirectoryDoesNotExist";  FileObject configDirObject=VFS.getManager().resolveFile(configDir);  FileObject timestampFileObject=configDirObject.resolveFile(".cargo");  configDirObject.delete(new AllFileSelector());  TestableAbstractStandaloneConfiguration configuration=new TestableAbstractStandaloneConfiguration(configDir);  configuration.setFileHandler(new VFSFileHandler());  configuration.setupConfigurationDir();  assertTrue("Config dir should have been created",configDirObject.exists());  assertTrue("Cargo timestamp should have existed",timestampFileObject.exists());}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj instanceof Tick) {    Tick t=(Tick)obj;    if (!ObjectUtilities.equal(this.text,t.text)) {      return false;    }    if (!ObjectUtilities.equal(this.textAnchor,t.textAnchor)) {      return false;    }    if (!ObjectUtilities.equal(this.rotationAnchor,t.rotationAnchor)) {      return false;    }    if (!(this.angle == t.angle)) {      return false;    }    return true;  }  return false;}  }
class C{  private void collectingToAList(List<Trade> trades){  List<Trade> bigTrades=trades.stream().filter(null).collect(Collectors.toList());  bigTrades.forEach(null);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public void createSeries(CandleDataset source,int seriesIndex){  if (source.getSeries(seriesIndex) == null) {    throw new IllegalArgumentException("Null source (CandleDataset).");  }  for (int i=0; i < source.getSeries(seriesIndex).getItemCount(); i++) {    this.updateSeries(source.getSeries(seriesIndex),i,true);  }}  }
class C{  @Subscribe(sticky=true,threadMode=ThreadMode.MAIN) public void onEventMainThread(MediaEvent event){  RTEditText editor=mEditors.get(mActiveEditor);  RTMedia media=event.getMedia();  if (editor != null && media instanceof RTImage) {    insertImage(editor,(RTImage)media);    EventBus.getDefault().removeStickyEvent(event);    mActiveEditor=Integer.MAX_VALUE;  }}  }
class C{  private void dispatchPress(View child){  if (child != null) {    child.setPressed(true);  }  setPressed(true);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementgettagname.class,args);}  }
class C{  public MemberSelectTree buildArrayLengthAccess(ExpressionTree expression){  return (JCTree.JCFieldAccess)maker.Select((JCTree.JCExpression)expression,symtab.lengthVar);}  }
class C{  public void addLSEnvironment(String key,String value){  mLSEnvironments.put(key,value);}  }
class C{  public JRadioButton(String text){  this(text,null,false);}  }
class C{  public OrdersHistoryRecyclerAdapter(OrdersRecyclerInterface ordersRecyclerInterface){  this.ordersRecyclerInterface=ordersRecyclerInterface;}  }
class C{  public static String valueToString(Object value) throws JSONException {  if (value == null || value.equals(null)) {    return "null";  }  if (value instanceof JSONString) {    Object object;    try {      object=((JSONString)value).toJSONString();    } catch (    Exception e) {      throw new JSONException(e);    }    if (object instanceof String) {      return (String)object;    }    throw new JSONException("Bad value from toJSONString: " + object);  }  if (value instanceof Number) {    return numberToString((Number)value);  }  if (value instanceof Boolean || value instanceof JSONObject || value instanceof JSONArray) {    return value.toString();  }  if (value instanceof Map) {    Map<?,?> map=(Map<?,?>)value;    return new JSONObject(map).toString();  }  if (value instanceof Collection) {    Collection<?> coll=(Collection<?>)value;    return new JSONArray(coll).toString();  }  if (value.getClass().isArray()) {    return new JSONArray(value).toString();  }  return quote(value.toString());}  }
class C{  public boolean supportsTransactionIsolationLevel(int level) throws SQLException {switch (level) {case Connection.TRANSACTION_READ_UNCOMMITTED:case Connection.TRANSACTION_READ_COMMITTED:case Connection.TRANSACTION_REPEATABLE_READ:case Connection.TRANSACTION_SERIALIZABLE:    return true;default :  return false;}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:06.836 -0500",hash_original_method="9921BFF09FACC23B6D23BD0D026EB023",hash_generated_method="4C8E8780FA3C7A09AF94E1277F10CB12") public boolean match(Object other){  if (other instanceof ContentLength)   return true; else   return false;}  }
class C{  public void test_SSLEngineResultStatus_valueOf(){  String[] str={"BUFFER_OVERFLOW","BUFFER_UNDERFLOW","CLOSED","OK"};  String[] str_invalid={"","OK1","BUFFER_overflow","BUFFER_UND","CLOSED_CLOSED","Bad string for verification valueOf method"};  SSLEngineResult.Status enS;  for (int i=0; i < str.length; i++) {    try {      enS=SSLEngineResult.Status.valueOf(str[i]);      assertEquals("Incorrect Status",enS.toString(),str[i]);    } catch (    Exception e) {      fail("Unexpected exception " + e + " was thrown for "+ str[i]);    }  }  for (int i=0; i < str_invalid.length; i++) {    try {      enS=SSLEngineResult.Status.valueOf(str_invalid[i]);      fail("IllegalArgumentException should be thrown for " + str_invalid[i]);    } catch (    IllegalArgumentException iae) {    }  }  try {    enS=SSLEngineResult.Status.valueOf(null);    fail("NullPointerException/IllegalArgumentException should be thrown for NULL parameter");  } catch (  NullPointerException npe) {  }catch (  IllegalArgumentException iae) {  }}  }
class C{  public static void main(String[] args) throws Exception {  RangeFacetsExample example=new RangeFacetsExample();  example.index();  System.out.println("Facet counting example:");  System.out.println("-----------------------");  System.out.println(example.search());  System.out.println("\n");  System.out.println("Facet drill-down example (timestamp/Past six hours):");  System.out.println("---------------------------------------------");  TopDocs hits=example.drillDown(example.PAST_SIX_HOURS);  System.out.println(hits.totalHits + " totalHits");  example.close();}  }
class C{  protected void updatePath(boolean pathChanged){  Iterator<Positionable> iter=_pathGroup.iterator();  while (iter.hasNext()) {    Positionable pos=iter.next();    if (pos instanceof IndicatorTrack) {      ((IndicatorTrack)pos).addPath(TEST_PATH);    } else {      ((PortalIcon)pos).setStatus(PortalIcon.PATH);    }  }  _pathChange=pathChanged;  String name=_pathName.getText();  if (name == null || name.length() == 0) {    JOptionPane.showMessageDialog(this,Bundle.getMessage("needPathName"),Bundle.getMessage("makePath"),JOptionPane.INFORMATION_MESSAGE);  } else {  }}  }
class C{  public int filesize(){  return getInt(CollectionSchema.size_i);}  }
class C{  DropTargetContext(DropTarget dt){  super();  dropTarget=dt;}  }
class C{  public double localScore(int i){  return localScore(i,new int[0]);}  }
class C{  public boolean hasHash(){  return this.hasHash;}  }
class C{  @Override public void initialize(IR ir){  for (Enumeration<Instruction> e=ir.forwardInstrEnumerator(); e.hasMoreElements(); ) {    Instruction s=e.nextElement();switch (s.getOpcode()) {case PPC_MOVE_opcode:      Operand result=MIR_Move.getResult(s);    Operand value=MIR_Move.getValue(s);  if (result.isRegister() && value.isRegister()) {    Register r1=result.asRegister().getRegister();    Register r2=value.asRegister().getRegister();    addAffinity(1,r2,r1);    if (SYMBOLIC_SYMBOLIC_HEURISTIC && r1.isSymbolic() && r2.isSymbolic()) {      addAffinity(1,r2,r1);    }  }break;default :break;}}}  }
class C{  public static GeoTimeSerie prob(GeoTimeSerie gts){  Map<Object,Long> histogram=valueHistogram(gts);  GeoTimeSerie prob=gts.cloneEmpty(gts.values);  for (int i=0; i < gts.values; i++) {    long timestamp=tickAtIndex(gts,i);    long geoxppoint=locationAtIndex(gts,i);    long elevation=elevationAtIndex(gts,i);    Object value=valueAtIndex(gts,i);    setValue(prob,timestamp,geoxppoint,elevation,histogram.get(value).doubleValue() / gts.values,false);  }  return prob;}  }
class C{  static ByteBuf encodeRemainingLength(int value) throws CorruptedFrameException {  if (value > MAX_LENGTH_LIMIT || value < 0) {    throw new CorruptedFrameException("Value should in range 0.." + MAX_LENGTH_LIMIT + " found "+ value);  }  ByteBuf encoded=Unpooled.buffer(4);  byte digit;  do {    digit=(byte)(value % 128);    value=value / 128;    if (value > 0) {      digit=(byte)(digit | 0x80);    }    encoded.writeByte(digit);  } while (value > 0);  return encoded;}  }
class C{  public void cancelAuthentication(){synchronized (syncLock) {    authenticating=false;    timer.cancel();    timer.purge();  }}  }
class C{  public List<AcronymExpansion> doInBackground(String acronym){  try {    List<AcronymExpansion> longForms=mAcronymCache.get(acronym);    if (longForms != null && !longForms.isEmpty()) {      Log.v(TAG,acronym + ": in cache");      return longForms;    } else {      Log.v(TAG,acronym + ": not in cache");      AcronymData result=null;      longForms=result.getLfs();      mAcronymCache.put(result.getSf(),longForms);      return longForms;    }  } catch (  Exception e) {    Log.v(TAG,"doInBackground() " + e);    return null;  }}  }
class C{  public static String toStringType(int type) throws DatabaseException {switch (type) {case Types.ARRAY:    return "CF_SQL_ARRAY";case Types.BIGINT:  return "CF_SQL_BIGINT";case Types.BINARY:return "CF_SQL_BINARY";case Types.BIT:return "CF_SQL_BIT";case Types.BOOLEAN:return "CF_SQL_BOOLEAN";case Types.BLOB:return "CF_SQL_BLOB";case Types.CHAR:return "CF_SQL_CHAR";case Types.CLOB:return "CF_SQL_CLOB";case Types.DATALINK:return "CF_SQL_DATALINK";case Types.DATE:return "CF_SQL_DATE";case Types.DISTINCT:return "CF_SQL_DISTINCT";case Types.NUMERIC:return "CF_SQL_NUMERIC";case Types.DECIMAL:return "CF_SQL_DECIMAL";case Types.DOUBLE:return "CF_SQL_DOUBLE";case Types.REAL:return "CF_SQL_REAL";case Types.FLOAT:return "CF_SQL_FLOAT";case Types.TINYINT:return "CF_SQL_TINYINT";case Types.SMALLINT:return "CF_SQL_SMALLINT";case Types.STRUCT:return "CF_SQL_STRUCT";case Types.INTEGER:return "CF_SQL_INTEGER";case Types.VARCHAR:return "CF_SQL_VARCHAR";case Types.NVARCHAR:return "CF_SQL_NVARCHAR";case CFTypes.VARCHAR2:return "CF_SQL_VARCHAR2";case Types.LONGVARBINARY:return "CF_SQL_LONGVARBINARY";case Types.VARBINARY:return "CF_SQL_VARBINARY";case Types.LONGVARCHAR:return "CF_SQL_LONGVARCHAR";case Types.TIME:return "CF_SQL_TIME";case Types.TIMESTAMP:return "CF_SQL_TIMESTAMP";case Types.REF:return "CF_SQL_REF";case CFTypes.CURSOR:return "CF_SQL_REFCURSOR";case Types.OTHER:return "CF_SQL_OTHER";case Types.NULL:return "CF_SQL_NULL";default :throw new DatabaseException("invalid CF SQL Type",null,null,null);}}  }
class C{  public static BufferedImage createCompatibleImage(BufferedImage image){  return createCompatibleImage(image,image.getWidth(),image.getHeight());}  }
class C{  public void testEmptySubmit(){  SubmissionPublisher<Integer> p=basicPublisher();  assertEquals(0,p.submit(1));}  }
class C{  @Override protected Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    throw new AssertionError(e);  }}  }
class C{  @Override public final char charAt(int i){  if (i < 0 || _length <= i)   throw new IndexOutOfBoundsException();  return _buffer[i + _offset];}  }
class C{  public final CharSequence nextToken(CharSequence csq,CharSet charSet){  int n=csq.length();  for (int i=index; i < n; i++) {    if (!charSet.contains(csq.charAt(i))) {      int j=i;      for (; (++j < n) && !charSet.contains(csq.charAt(j)); ) {      }      index=j;      return csq.subSequence(i,j);    }  }  index=n;  return null;}  }
class C{  @Override public void visit(NodeVisitor v){  if (v.visit(this)) {    expr.visit(v);  }}  }
class C{  public TextLayout nextLayout(float wrappingWidth){  return nextLayout(wrappingWidth,limit,false);}  }
class C{  public boolean wasCancelled(){  return cancelled;}  }
class C{  public ResourceNode locate(String sessionID,String path) throws DirectoryNotFoundException {  return locate(sessionID,path,getCurrentNode(sessionID));}  }
class C{  public AbstractCargoTestCase(String testName,EnvironmentTestData testData) throws Exception {  super(testName);  this.testData=testData;  File targetDir=new File(getTestData().targetDir);  targetDir.mkdirs();  if (!targetDir.isDirectory()) {    fail("Directory " + targetDir + " does not exist");  }  this.logger=new FileLogger(new File(targetDir.getParentFile(),"cargo.log"),true);  this.logger.setLevel(LogLevel.DEBUG);}  }
class C{  public ScheduleItem(org.jdom2.Element e){  org.jdom2.Attribute a;  if ((a=e.getAttribute(Xml.ID)) != null) {    _id=a.getValue();  } else {    log.warn("no id attribute in Schedule Item element when reading operations");  }  if ((a=e.getAttribute(Xml.SEQUENCE_ID)) != null) {    _sequenceId=Integer.parseInt(a.getValue());  }  if ((a=e.getAttribute(Xml.RANDOM)) != null) {    _random=a.getValue();  }  if ((a=e.getAttribute(Xml.TRAIN_SCHEDULE_ID)) != null) {    _setoutTrainScheduleId=a.getValue();  }  if ((a=e.getAttribute(Xml.PICKUP_TRAIN_SCHEDULE_ID)) != null) {    _pickupTrainScheduleId=a.getValue();  }  if ((a=e.getAttribute(Xml.COUNT)) != null) {    _count=Integer.parseInt(a.getValue());  }  if ((a=e.getAttribute(Xml.WAIT)) != null) {    _wait=Integer.parseInt(a.getValue());  }  if ((a=e.getAttribute(Xml.TYPE)) != null) {    _type=a.getValue();  }  if ((a=e.getAttribute(Xml.ROAD)) != null) {    _road=a.getValue();  }  if ((a=e.getAttribute(Xml.LOAD)) != null) {    _load=a.getValue();  }  if ((a=e.getAttribute(Xml.SHIP)) != null) {    _ship=a.getValue();  }  if ((a=e.getAttribute(Xml.DESTINATION_ID)) != null) {    _destination=LocationManager.instance().getLocationById(a.getValue());  }  if ((a=e.getAttribute(Xml.DEST_TRACK_ID)) != null && _destination != null) {    _trackDestination=_destination.getTrackById(a.getValue());  }  if ((a=e.getAttribute(Xml.COMMENT)) != null) {    _comment=a.getValue();  }  if ((a=e.getAttribute(Xml.HITS)) != null) {    _hits=Integer.parseInt(a.getValue());  }}  }
class C{  public void clearCurrentTheme(){  if (currentTheme != null) {    if (currentTheme.isPlaying()) {      currentTheme.stop();    }    currentTheme=null;  }}  }
class C{  private void CLINIT_BEGIN(String className){  env.ensurePrepared(className);  Frame frame=new StaticInitializerFrame(className);  env.pushFrame(frame);}  }
class C{  public static Result result(){  return new Result();}  }
class C{  @Override public boolean onTouchEvent(MotionEvent event){  boolean retValue=mGestureDetector.onTouchEvent(event);  int action=event.getAction();  if (action == MotionEvent.ACTION_UP) {    onUp();  } else   if (action == MotionEvent.ACTION_CANCEL) {    onCancel();  }  return retValue;}  }
class C{  public Token<T> peek() throws ParseException {  fetch(true);  return current.t;}  }
class C{  public static KDC create(String realm,String kdc,int port,boolean asDaemon) throws IOException {  return new KDC(realm,kdc,port,asDaemon);}  }
class C{  @Override public void propertyChange(java.beans.PropertyChangeEvent e){  String property=e.getPropertyName();  if (log.isDebugEnabled())   log.debug("propertyChange \"" + property + "\" old= "+ e.getOldValue()+ " new= "+ e.getNewValue()+ " source= "+ e.getSource().getClass().getName());  if (property.equals("DnDrop")) {    doAction(e.getSource());  } else   if (e.getSource() instanceof Warrant && _warrant.equals(e.getSource())) {switch (_warrant.getRunMode()) {case Warrant.MODE_NONE:      _warrant.removePropertyChangeListener(this);    int oldMode=((Integer)e.getOldValue()).intValue();  if (oldMode != Warrant.MODE_NONE) {    OBlock block=_warrant.getCurrentBlockOrder().getBlock();    int state=block.getState();    if ((state & OBlock.OCCUPIED) != 0 || (state & OBlock.DARK) != 0 || _runBlind.isSelected()) {      setStatusText(Bundle.getMessage("warrantEnd",_warrant.getTrainName(),_warrant.getDisplayName(),block.getDisplayName()),myGreen);    } else {      setStatusText(Bundle.getMessage("warrantAbort",_warrant.getTrainName(),_warrant.getDisplayName()),myGreen);    }  }break;case Warrant.MODE_LEARN:if (property.equals("blockChange")) {OBlock oldBlock=(OBlock)e.getOldValue();OBlock newBlock=(OBlock)e.getNewValue();if (newBlock == null) {  stopRunTrain();  setStatusText(Bundle.getMessage("ChangedRoute",_warrant.getDisplayName(),oldBlock.getDisplayName(),_warrant.getTrainName()),Color.red);} else {  setThrottleCommand("NoOp",Bundle.getMessage("Mark"),((OBlock)e.getNewValue()).getDisplayName());  setStatusText(Bundle.getMessage("TrackerBlockEnter",_warrant.getTrainName(),newBlock.getDisplayName()),myGreen);}} else if (property.equals("abortLearn")) {stopRunTrain();int oldIdx=((Integer)e.getOldValue()).intValue();int newIdx=((Integer)e.getNewValue()).intValue();if (oldIdx > newIdx) {  setStatusText(Bundle.getMessage("LearnAbortOccupied",_warrant.getBlockAt(oldIdx),_warrant.getDisplayName()),Color.red);} else {  setStatusText(Bundle.getMessage("warrantAbort",_warrant.getTrainName(),_warrant.getDisplayName()),Color.red);}} else {setStatusText(Bundle.getMessage("Learning",_warrant.getCurrentBlockOrder().getBlock().getDisplayName()),Color.black);}break;case Warrant.MODE_RUN:case Warrant.MODE_MANUAL:if (e.getPropertyName().equals("blockChange")) {OBlock oldBlock=(OBlock)e.getOldValue();OBlock newBlock=(OBlock)e.getNewValue();if (newBlock == null) {setStatusText(Bundle.getMessage("ChangedRoute",_warrant.getDisplayName(),oldBlock.getDisplayName(),_warrant.getTrainName()),Color.red);} else {setStatusText(Bundle.getMessage("TrackerBlockEnter",_warrant.getTrainName(),newBlock.getDisplayName()),myGreen);}} else if (e.getPropertyName().equals("blockRelease")) {OBlock block=(OBlock)e.getNewValue();long et=(System.currentTimeMillis() - block._entryTime) / 1000;setStatusText(Bundle.getMessage("TrackerBlockLeave",_warrant.getTrainName(),block.getDisplayName(),et / 60,et % 60),myGreen);} else if (e.getPropertyName().equals("SpeedRestriction")) {setStatusText(Bundle.getMessage("speedChange",_warrant.getTrainName(),_warrant.getCurrentBlockOrder().getBlock().getDisplayName(),e.getNewValue()),Color.black);} else if (e.getPropertyName().equals("runMode")) {oldMode=((Integer)e.getOldValue()).intValue();int newMode=((Integer)e.getNewValue()).intValue();if (oldMode == Warrant.MODE_NONE) {if (newMode != Warrant.MODE_NONE) {setStatusText(Bundle.getMessage("warrantStart",_warrant.getTrainName(),_warrant.getDisplayName(),_warrant.getCurrentBlockOrder().getBlock().getDisplayName(),Bundle.getMessage(Warrant.MODES[newMode])),myGreen);if (_warrant.getState() == Warrant.HALT) {  JOptionPane.showMessageDialog(this,_warrant.getRunningMessage(),Bundle.getMessage("WarningTitle"),JOptionPane.WARNING_MESSAGE);}}} else {setStatusText(Bundle.getMessage("modeChange",_warrant.getTrainName(),_warrant.getDisplayName(),Bundle.getMessage(Warrant.MODES[oldMode]),Bundle.getMessage(Warrant.MODES[newMode])),Color.black);}} else if (e.getPropertyName().equals("controlChange")) {int runState=((Integer)e.getOldValue()).intValue();int newCntrl=((Integer)e.getNewValue()).intValue();String stateStr=null;if (runState < 0) {stateStr=Bundle.getMessage(Warrant.MODES[-runState]);} else {stateStr=Bundle.getMessage(Warrant.RUN_STATE[runState],_warrant.getCurrentBlockOrder().getBlock().getDisplayName());}setStatusText(Bundle.getMessage("controlChange",_warrant.getTrainName(),stateStr,Bundle.getMessage(Warrant.CNTRL_CMDS[newCntrl])),Color.black);} else if (e.getPropertyName().equals("throttleFail")) {setStatusText(Bundle.getMessage("ThrottleFail",_warrant.getTrainName(),e.getNewValue()),Color.red);}break;}}invalidate();}  }
class C{  private void addEnumMembers(JCClassDecl tree,Env<AttrContext> env){  JCExpression valuesType=make.Type(new ArrayType(tree.sym.type,syms.arrayClass));  JCMethodDecl values=make.MethodDef(make.Modifiers(Flags.PUBLIC | Flags.STATIC),names.values,valuesType,List.<JCTypeParameter>nil(),List.<JCVariableDecl>nil(),List.<JCExpression>nil(),null,null);  memberEnter(values,env);  JCMethodDecl valueOf=make.MethodDef(make.Modifiers(Flags.PUBLIC | Flags.STATIC),names.valueOf,make.Type(tree.sym.type),List.<JCTypeParameter>nil(),List.of(make.VarDef(make.Modifiers(Flags.PARAMETER | Flags.MANDATED),names.fromString("name"),make.Type(syms.stringType),null)),List.<JCExpression>nil(),null,null);  memberEnter(valueOf,env);}  }
class C{  protected byte[] calculateChecksum(byte[] data,int size) throws KrbCryptoException {  MessageDigest md5=null;  try {    md5=MessageDigest.getInstance("MD5");  } catch (  Exception e) {    throw new KrbCryptoException("JCE provider may not be installed. " + e.getMessage());  }  try {    md5.update(data);    return (md5.digest());  } catch (  Exception e) {    throw new KrbCryptoException(e.getMessage());  }}  }
class C{  private static void resolveChildTableContent(LayoutContext c,BlockBox parent,List children,ChildBoxInfo info,IdentValue target){  List childrenForAnonymous=new ArrayList();  List childrenWithAnonymous=new ArrayList();  IdentValue nextUp=getPreviousTableNestingLevel(target);  for (Iterator i=children.iterator(); i.hasNext(); ) {    Styleable styleable=(Styleable)i.next();    if (matchesTableLevel(target,styleable.getStyle().getIdent(CSSName.DISPLAY))) {      childrenForAnonymous.add(styleable);    } else {      if (childrenForAnonymous.size() > 0) {        createAnonymousTableContent(c,(BlockBox)childrenForAnonymous.get(0),nextUp,childrenForAnonymous,childrenWithAnonymous);        childrenForAnonymous=new ArrayList();      }      childrenWithAnonymous.add(styleable);    }  }  if (childrenForAnonymous.size() > 0) {    createAnonymousTableContent(c,(BlockBox)childrenForAnonymous.get(0),nextUp,childrenForAnonymous,childrenWithAnonymous);  }  if (nextUp == IdentValue.TABLE) {    rebalanceInlineContent(childrenWithAnonymous);    info.setContainsBlockLevelContent(true);    resolveChildren(c,parent,childrenWithAnonymous,info);  } else {    resolveChildTableContent(c,parent,childrenWithAnonymous,info,nextUp);  }}  }
class C{  public static org.oscm.internal.vo.VOServicePaymentConfiguration convertToUp(org.oscm.vo.VOServicePaymentConfiguration oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOServicePaymentConfiguration newVO=new org.oscm.internal.vo.VOServicePaymentConfiguration();  newVO.setEnabledPaymentTypes(convertToUpVOPaymentType(oldVO.getEnabledPaymentTypes()));  newVO.setService(convertToUp(oldVO.getService()));  return newVO;}  }
class C{  public Message editMessageReplyMarkup(Message oldMessage,InlineReplyMarkup inlineReplyMarkup){  return this.editMessageReplyMarkup(oldMessage.getChat().getId(),oldMessage.getMessageId(),inlineReplyMarkup);}  }
class C{  protected void expand(){  if (!isExpanded && !isLeaf()) {    boolean visible=isVisible();    isExpanded=true;    childCount=treeModel.getChildCount(getUserObject());    if (visible) {      didExpand();    }    if (visible && treeSelectionModel != null) {      treeSelectionModel.resetRowSelection();    }  }}  }
class C{  public void addPoly(float latPoint,float lonPoint,int[] xpoints,int[] ypoints,int cMode,LinkProperties properties) throws IOException {  LinkPoly.write(latPoint,lonPoint,xpoints,ypoints,cMode,properties,link.dos);}  }
class C{  public static FileSystemProvider create(){  String osname=AccessController.doPrivileged(new GetPropertyAction("os.name"));  if (osname.equals("SunOS"))   return createProvider("sun.nio.fs.SolarisFileSystemProvider");  if (osname.equals("Linux"))   return createProvider("sun.nio.fs.LinuxFileSystemProvider");  if (osname.contains("OS X"))   return createProvider("sun.nio.fs.MacOSXFileSystemProvider");  if (osname.equals("AIX"))   return createProvider("sun.nio.fs.AixFileSystemProvider");  throw new AssertionError("Platform not recognized");}  }
class C{  public static final double[][] transposeTimes(final double[][] m1,final double[][] m2){  final int coldim1=getColumnDimensionality(m1);  final int coldim2=getColumnDimensionality(m2);  assert (m2.length == m1.length) : ERR_MATRIX_INNERDIM;  final double[][] re=new double[coldim1][coldim2];  final double[] Bcolj=new double[m1.length];  for (int j=0; j < coldim2; j++) {    for (int k=0; k < m1.length; k++) {      Bcolj[k]=m2[k][j];    }    for (int i=0; i < coldim1; i++) {      double s=0;      for (int k=0; k < m1.length; k++) {        s+=m1[k][i] * Bcolj[k];      }      re[i][j]=s;    }  }  return re;}  }
class C{  public void fill(View view){  validateNotNullableView(view);  try {    if (view instanceof ViewGroup) {      ViewGroup viewGroup=(ViewGroup)view;      for (int i=0; i < viewGroup.getChildCount(); i++) {        View child=viewGroup.getChildAt(i);        fill(child);      }    } else {      if (mIds == null) {        fillView(view);      } else       if (mIds.contains(view.getId())) {        fillView(view);      }    }  } catch (  Exception e) {    e.printStackTrace();  } finally {    mFaker=null;  }}  }
class C{  public Document loadDocument(Resource file) throws SAXException, IOException {  DOMParser parser=new DOMParser();  InputStream in=null;  try {    in=file.getInputStream();    InputSource source=new InputSource(in);    parser.parse(source);  }  finally {    IOUtil.closeEL(in);  }  return parser.getDocument();}  }
class C{  public NotificationChain basicSetOwningEnumeration(EnumerationType newOwningEnumeration,NotificationChain msgs){  msgs=eBasicSetContainer((InternalEObject)newOwningEnumeration,TypesPackage.ENUMERATOR__OWNING_ENUMERATION,msgs);  return msgs;}  }
class C{  void resetPageCaches(final int startPage,final int endPage){  for (  final Object o : this.cachedPageViews.keySet()) {    final Integer currentKey=(Integer)o;    final int keyValue=currentKey;    if ((keyValue >= startPage) && (keyValue <= endPage)) {      final DynamicVectorRenderer obj=cachedPageViews.get(currentKey);      if (obj != null) {        this.currentPageViews.put(currentKey,obj);      }    }  }{    Iterator keys=this.currentPageViews.keySet().iterator();    final Map<Integer,String> keysToTrash=new HashMap<Integer,String>();    while (keys.hasNext()) {      final Integer currentKey=(Integer)keys.next();      final int keyValue=currentKey;      if ((keyValue < startPage) || (keyValue > endPage)) {        final DynamicVectorRenderer obj=currentPageViews.get(currentKey);        if (obj != null) {          this.cachedPageViews.put(currentKey,obj);        }        keysToTrash.put(currentKey,"x");      }    }    keys=keysToTrash.keySet().iterator();    while (keys.hasNext()) {      final Integer currentKey=(Integer)keys.next();      final int keyValue=currentKey;      currentPageViews.remove(keyValue);    }  }}  }
class C{  public void testGenerateCertificate() throws Exception {  try {    CertificateFactory.getInstance("X.509").generateCertificate(null);    fail("CertificateException was not thrown");  } catch (  CertificateException e) {  }}  }
class C{  @Override public void invalidate(){  valid=false;}  }
class C{  public void write(final PrintStream stream){  stream.print("time\ttime_s");  for (  String type : this.data.keySet()) {    stream.print("\tstarts_" + type + "\tends_"+ type+ "\tin_act_"+ type);  }  stream.print("\n");  int[] inActPerType=new int[this.data.size()];  for (int i=0; i < nofBins; i++) {    stream.print(Time.writeTime(i * this.binSize) + "\t" + i * this.binSize);    int mode=0;    for (    DataFrame dataFrame : this.data.values()) {      inActPerType[mode]=inActPerType[mode] + dataFrame.countsStart[i] - dataFrame.countsEnd[i];      stream.print("\t" + dataFrame.countsStart[i] + "\t"+ dataFrame.countsEnd[i]+ "\t"+ inActPerType[mode]);      mode++;    }    stream.print("\n");  }}  }
class C{  public void shuffleFromTo(int from,int to){  if (size == 0) {    return;  }  checkRangeFromTo(from,to,size);  cern.jet.random.Uniform gen=new cern.jet.random.Uniform(new cern.jet.random.engine.DRand(new java.util.Date()));  int tmpElement;  int[] theElements=elements;  int random;  for (int i=from; i < to; i++) {    random=gen.nextIntFromTo(i,to);    tmpElement=theElements[random];    theElements[random]=theElements[i];    theElements[i]=tmpElement;  }}  }
class C{  public static <T>Function0<T> memoizeFunction0(Function0<T> s,Cacheable<T> cache){  return null;}  }
class C{  DirectArrayOfDoublesCompactSketch(final Memory mem){  this(mem,DEFAULT_UPDATE_SEED);}  }
class C{  protected void renderImage(int width,int height,int hint){  Image master=getMasterImage();  if (master != null) {    do {      Image i=master.getScaledInstance(width,height,hint);      tracker.addImage(i,1);      try {        tracker.waitForID(1);      } catch (      InterruptedException e) {        e.printStackTrace();        bgImage=null;        return;      } finally {        tracker.removeImage(i,1);      }      bgImage.getGraphics().drawImage(i,0,0,null);      tracker.addImage(bgImage,0);      try {        tracker.waitForID(0);      } catch (      InterruptedException e) {        e.printStackTrace();        bgImage=null;        return;      } finally {        tracker.removeImage(bgImage,0);      }    } while (bgImage.contentsLost());  } else {    bgImage=null;  }}  }
class C{  public PlaceAutocompleteAdapter(Context context,int resource,GoogleApiClient googleApiClient,LatLngBounds bounds,AutocompleteFilter filter){  super(context,resource);  mGoogleApiClient=googleApiClient;  mBounds=bounds;  mPlaceFilter=filter;}  }
class C{  public static void main(String[] args) throws Exception {  System.setProperty("java.io.tmpdir",TMP_DIR_FOR_TEST);  createCorruptedLibFile();  IpcSharedMemoryNativeLoader.load(null);}  }
class C{  public static boolean hasAPI7(){  return hasAPI(7);}  }
class C{  @Override final public void mousePressed(MouseEvent e){  isComponentPressedDown=true;  mousePress(e);}  }
class C{  public void putFloatArray(String key,float[] value){  map.put(key,value);}  }
class C{  public void testShiftRightNegZeroesMul32(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,0,0,0,0,0,0,0,0};  int aSign=-1;  int number=64;  byte rBytes[]={-2,127,-57,-101,1,75,-90,-46,-91};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.shiftRight(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public static byte[] convertPinToBytes(String pin){  if (pin == null) {    return null;  }  byte[] pinBytes;  try {    pinBytes=pin.getBytes("UTF-8");  } catch (  UnsupportedEncodingException uee) {    Log.e(TAG,"UTF-8 not supported?!?");    return null;  }  if (pinBytes.length <= 0 || pinBytes.length > 16) {    return null;  }  return pinBytes;}  }
class C{  public JSaver(BrowsableEditableData bd){  initComponents();  m_bd=bd;  m_bd.addStateListener(this);}  }
class C{  @Override protected EClass eStaticClass(){  return DatatypePackage.Literals.PROPERTY;}  }
class C{  public static Builder newInstance(Id<Link> from,Id<Link> to,int size){  return new Builder(from,to,size);}  }
class C{  public double nextDouble(){  return nextDouble(this.freedom);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();}  }
class C{  public void deleteLogicalRouter(String id,FutureCallback<Void> responseCallback) throws IOException {  deleteAsync(LOGICAL_ROUTERS_BASE_PATH + "/" + id,HttpStatus.SC_OK,responseCallback);}  }
class C{  public void removeListener(ILabelProviderListener listener){}  }
class C{  public void putCharSequenceArray(String key,CharSequence[] value){  map.put(key,value);}  }
class C{  public void offer(T item,double incrementCount){  Counter<T> counterNode=counterMap.get(item);  if (counterNode == null) {    counterNode=new Counter<T>(item,incrementCount);    counterMap.put(item,counterNode);    counterList.add(counterNode);  } else {    counterNode.setCount(counterNode.getCount() + incrementCount);  }  ordered=false;}  }
class C{  public boolean generate(Projection proj){  boolean ret=super.generate(proj);  createLabels();  labels.generate(proj);  points.generate(proj);  return ret;}  }
class C{  protected static int skipWapValue(ByteArrayInputStream pduDataStream,int length){  assert (null != pduDataStream);  byte[] area=new byte[length];  int readLen=pduDataStream.read(area,0,length);  if (readLen < length) {    return -1;  } else {    return readLen;  }}  }
class C{  public ImageReaderWriterSpi(String vendorName,String version,String[] names,String[] suffixes,String[] MIMETypes,String pluginClassName,boolean supportsStandardStreamMetadataFormat,String nativeStreamMetadataFormatName,String nativeStreamMetadataFormatClassName,String[] extraStreamMetadataFormatNames,String[] extraStreamMetadataFormatClassNames,boolean supportsStandardImageMetadataFormat,String nativeImageMetadataFormatName,String nativeImageMetadataFormatClassName,String[] extraImageMetadataFormatNames,String[] extraImageMetadataFormatClassNames){  super(vendorName,version);  if (names == null) {    throw new IllegalArgumentException("names == null!");  }  if (names.length == 0) {    throw new IllegalArgumentException("names.length == 0!");  }  if (pluginClassName == null) {    throw new IllegalArgumentException("pluginClassName == null!");  }  this.names=(String[])names.clone();  if (suffixes != null && suffixes.length > 0) {    this.suffixes=(String[])suffixes.clone();  }  if (MIMETypes != null && MIMETypes.length > 0) {    this.MIMETypes=(String[])MIMETypes.clone();  }  this.pluginClassName=pluginClassName;  this.supportsStandardStreamMetadataFormat=supportsStandardStreamMetadataFormat;  this.nativeStreamMetadataFormatName=nativeStreamMetadataFormatName;  this.nativeStreamMetadataFormatClassName=nativeStreamMetadataFormatClassName;  if (extraStreamMetadataFormatNames != null && extraStreamMetadataFormatNames.length > 0) {    this.extraStreamMetadataFormatNames=(String[])extraStreamMetadataFormatNames.clone();  }  if (extraStreamMetadataFormatClassNames != null && extraStreamMetadataFormatClassNames.length > 0) {    this.extraStreamMetadataFormatClassNames=(String[])extraStreamMetadataFormatClassNames.clone();  }  this.supportsStandardImageMetadataFormat=supportsStandardImageMetadataFormat;  this.nativeImageMetadataFormatName=nativeImageMetadataFormatName;  this.nativeImageMetadataFormatClassName=nativeImageMetadataFormatClassName;  if (extraImageMetadataFormatNames != null && extraImageMetadataFormatNames.length > 0) {    this.extraImageMetadataFormatNames=(String[])extraImageMetadataFormatNames.clone();  }  if (extraImageMetadataFormatClassNames != null && extraImageMetadataFormatClassNames.length > 0) {    this.extraImageMetadataFormatClassNames=(String[])extraImageMetadataFormatClassNames.clone();  }}  }
class C{  public void advance(){  moveToNextIndex();}  }
class C{  public DefaultBoundListOperations(K key,RedisOperations<K,V> operations){  super(key,operations);  this.ops=operations.opsForList();}  }
class C{  protected ClassMap createClassMap(Class c){  ClassMap classMap=new ClassMap(c);  classMethodMaps.put(c,classMap);  cachedClassNames.add(c.getName());  return classMap;}  }
class C{  public boolean timeout(){  return (timer.getTime() > timeout);}  }
class C{  public RequireHeader createRequireHeader(String optionTag) throws ParseException {  if (optionTag == null)   throw new NullPointerException("null optionTag");  Require require=new Require();  require.setOptionTag(optionTag);  return require;}  }
class C{  public boolean hasDetails(String sku){  return mSkuMap.containsKey(sku);}  }
class C{  public Alias filter(Map<String,Object> filter){  if (filter == null || filter.isEmpty()) {    this.filter=null;    return this;  }  try {    XContentBuilder builder=XContentFactory.contentBuilder(XContentType.JSON);    builder.map(filter);    this.filter=builder.string();    return this;  } catch (  IOException e) {    throw new ElasticsearchGenerationException("Failed to generate [" + filter + "]",e);  }}  }
class C{  private static boolean isSupported(String extension){  if (extension == null) {    return false;  }  String[] types=iTunesSettings.ITUNES_SUPPORTED_FILE_TYPES.getValue();  for (  String type : types) {    if (extension.equalsIgnoreCase(type)) {      return true;    }  }  return false;}  }
class C{  public void cancelVibration(){  Vibrator vibrator=(Vibrator)this.cordova.getActivity().getSystemService(Context.VIBRATOR_SERVICE);  vibrator.cancel();}  }
class C{  private void loadRecordAccess(boolean reload){  if (!(reload || m_recordAccess == null || m_recordDependentAccess == null))   return;  ArrayList<MRecordAccess> list=new ArrayList<MRecordAccess>();  ArrayList<MRecordAccess> dependent=new ArrayList<MRecordAccess>();  PreparedStatement pstmt=null;  ResultSet rs=null;  String sql="SELECT * FROM AD_Record_Access " + "WHERE AD_Role_ID=? AND IsActive='Y' ORDER BY AD_Table_ID";  try {    pstmt=DB.prepareStatement(sql,get_TrxName());    pstmt.setInt(1,getAD_Role_ID());    rs=pstmt.executeQuery();    while (rs.next()) {      MRecordAccess ra=new MRecordAccess(getCtx(),rs,get_TrxName());      list.add(ra);      if (ra.isDependentEntities())       dependent.add(ra);    }  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);  }  m_recordAccess=new MRecordAccess[list.size()];  list.toArray(m_recordAccess);  m_recordDependentAccess=new MRecordAccess[dependent.size()];  dependent.toArray(m_recordDependentAccess);  log.fine("#" + m_recordAccess.length + " - Dependent #"+ m_recordDependentAccess.length);}  }
class C{  public AttributesExampleReader(Iterator<Example> parent,ExampleSet exampleSet){  this.parent=parent;  this.exampleSet=exampleSet;}  }
class C{  public void actionPerformed(final ActionEvent evt){  System.exit(0);}  }
class C{  protected void print(char v) throws IOException {  os.write(v);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node createdNode;  Node childNode;  String childName;  int childType;  Node textNode;  java.util.List actual=new java.util.ArrayList();  java.util.List expected=new java.util.ArrayList();  expected.add("em");  expected.add("strong");  expected.add("code");  expected.add("sup");  expected.add("var");  expected.add("acronym");  expected.add("br");  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  createdNode=doc.createElement("br");  employeeNode=employeeNode.appendChild(createdNode);  for (int indexN10087=0; indexN10087 < childList.getLength(); indexN10087++) {    childNode=(Node)childList.item(indexN10087);    childName=childNode.getNodeName();    childType=(int)childNode.getNodeType();    if (equals(1,childType)) {      actual.add(childName);    } else {      assertEquals("textNodeType",3,childType);    }  }  assertEqualsAutoCase("element","childElements",expected,actual);}  }
class C{  public void refreshZoningMap(ExportMask exportMask,Collection<String> removedInitiators,Collection<String> removedPorts,boolean maskUpdated,boolean persist){  try {    if (!zoningEnabled(exportMask)) {      _log.info("Zoning not enabled for export mask {}. Zoning refresh will not be done",exportMask.getMaskName());      return;    }    if (!(maskUpdated || alwaysRefreshZone())) {      _log.info("The mask ports and initiators were not modified and alwaysRefreshZones is false" + " Zoning refresh will not be done for mask {}",exportMask.getMaskName());      return;    }    List<Initiator> initiators=ExportUtils.getExportMaskInitiators(exportMask,_dbClient);    _log.info("Refreshing zones for export mask {}. \n\tCurrent initiators " + "in this mask are:  {}. \n\tStorage ports in the mask are : {}. \n\tZoningMap is : {}. " + "\n\tRemoved initiators: {}. \n\tRemoved ports: {}",new Object[]{exportMask.getMaskName(),exportMask.getInitiators(),exportMask.getStoragePorts(),exportMask.getZoningMap(),removedInitiators,removedPorts});    Long start=System.currentTimeMillis();    List<StoragePort> storagePorts=ExportUtils.getStoragePorts(exportMask,_dbClient);    ZoneInfoMap zoneInfoMap=getInitiatorsZoneInfoMap(initiators,storagePorts);    List<StoragePort> allStoragePorts=DataObjectUtils.iteratorToList(_dbClient.queryIterativeObjects(StoragePort.class,StringSetUtil.stringSetToUriList(removedPorts)));    allStoragePorts.addAll(storagePorts);    List<Initiator> allInitiators=DataObjectUtils.iteratorToList(_dbClient.queryIterativeObjects(Initiator.class,StringSetUtil.stringSetToUriList(removedInitiators)));    allInitiators.addAll(initiators);    StringSetMap allZonesMap=new StringSetMap();    StringSetMap tempMap=exportMask.getZoningMap() == null ? new StringSetMap() : exportMask.getZoningMap();    for (    String key : tempMap.keySet()) {      if (removedInitiators.contains(key) && (tempMap.get(key) == null || tempMap.get(key).isEmpty())) {        allZonesMap.put(key,new StringSet(removedPorts));        if (exportMask.getStoragePorts() != null) {          allZonesMap.get(key).addAll(exportMask.getStoragePorts());        }      } else {        allZonesMap.put(key,new StringSet(tempMap.get(key)));      }    }    Map<String,List<FCZoneReference>> existingRefs=getZoneReferences(allZonesMap,allInitiators,allStoragePorts);    List<ZoneInfo> addedZoneInfos=new ArrayList<ZoneInfo>();    List<ZoneInfo> updatedZoneInfos=new ArrayList<ZoneInfo>();    List<String> removedZonesKeys=new ArrayList<String>();    ZoneInfo zoneInfo=null;    String initId=null;    String portId=null;    if (exportMask.getZoningMap() == null) {      exportMask.setZoningMap(new StringSetMap());    }    for (    Entry<String,ZoneInfo> entry : zoneInfoMap.entrySet()) {      zoneInfo=entry.getValue();      initId=zoneInfo.getInitiatorId();      portId=zoneInfo.getPortId();      if (exportMask.getZoningMap().containsKey(initId) && exportMask.getZoningMap().get(initId).contains(portId)) {        _log.debug("Zoning between initiator {} and port {} did not change",zoneInfo.getInitiatorWwn(),zoneInfo.getPortWwn());        allZonesMap.remove(initId,portId);        updatedZoneInfos.add(zoneInfo);      } else {        _log.info("New zone was found between initiator {} and port {} and will be added",zoneInfo.getInitiatorWwn(),zoneInfo.getPortWwn());        if (exportMask.hasExistingInitiator(zoneInfo.getInitiatorWwn())) {          exportMask.getZoningMap().put(initId,portId);          addedZoneInfos.add(zoneInfo);        }        allZonesMap.remove(initId,portId);      }    }    Initiator initiator=null;    StoragePort port=null;    for (    String key : allZonesMap.keySet()) {      initiator=DataObjectUtils.findInCollection(allInitiators,key);      if (allZonesMap.get(key) != null && !allZonesMap.get(key).isEmpty()) {        for (        String val : allZonesMap.get(key)) {          port=DataObjectUtils.findInCollection(allStoragePorts,val);          _log.info("Zone between initiator {} and port {} was removed from the network system" + " or no longer belongs to this mask.",key,val);          if (port == null || initiator == null) {            exportMask.getZoningMap().remove(key,val);            _log.info("Removed zoningMap entry between initiator {} and port {} because " + "the port and/or the initiator were removed from the mask",key,val);          } else           if (removedInitiators.contains(key) || removedPorts.contains(val)) {            exportMask.getZoningMap().remove(key,val);            _log.info("Removed zoningMap entry between initiator {} and port {} because " + "the port and/or the initiator were removed from the mask",initiator.getInitiatorPort(),port.getPortNetworkId());          } else           if (exportMask.hasExistingInitiator(WWNUtility.getUpperWWNWithNoColons(initiator.getInitiatorPort()))) {            exportMask.getZoningMap().remove(key,val);            _log.info("Removed zoningMap entry between initiator {} and port {} because " + "this was a brownfield zone for a brownfield initiator",initiator.getInitiatorPort(),port.getPortNetworkId());          } else {            _log.info("The zone between initiator {} and port {} was removed from " + " the network system but the zoningMap entry will be kept because it was" + " a ViPR initiator-port assignment",initiator.getInitiatorPort(),port.getPortNetworkId());          }          if (port != null && initiator != null) {            removedZonesKeys.add(FCZoneReference.makeEndpointsKey(initiator.getInitiatorPort(),port.getPortNetworkId()));          }        }      }    }    refreshFCZoneReferences(exportMask,existingRefs,addedZoneInfos,updatedZoneInfos,removedZonesKeys);    if (persist) {      _dbClient.updateAndReindexObject(exportMask);    }    _log.info("Changed zones for export mask {} to {}. \nRefreshin zones took {} ms",new Object[]{exportMask.getMaskName(),exportMask.getZoningMap(),(System.currentTimeMillis() - start)});  } catch (  Exception ex) {    _log.error("An exception occurred while updating zoning map for export mask {} with message {}",new Object[]{exportMask.getMaskName(),ex.getMessage()},ex);  }}  }
class C{  public void buildGraphicsNode(BridgeContext ctx,Element e,GraphicsNode node){  initializeDynamicSupport(ctx,e,node);}  }
class C{  public static IViewPart showView(final String viewID){  ClientTelemetryHelper.sendTeamExplorerPageView(viewID);  IViewPart view=null;  try {    view=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(viewID);  } catch (  final PartInitException e) {    log.error(e);  }  return view;}  }
class C{  public void checkAccess(Thread t){  if ((t.getState() != Thread.State.TERMINATED) && !inThreadGroup(t)) {    checkPermission(SecurityConstants.MODIFY_THREAD_PERMISSION);  }}  }
class C{  public boolean unitCanWriteTo(Unit u,Value v){  return valueTouchesRWSet(writeSet(u),v,u.getDefBoxes());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public PoolingByteArrayOutputStream(ByteArrayPool pool){  this(pool,DEFAULT_SIZE);}  }
class C{  private void restoreDefaultWebContentKeyBindings(){  Settings.Secure.putString(getActivity().getContentResolver(),Settings.Secure.ACCESSIBILITY_WEB_CONTENT_KEY_BINDINGS,sDefaultKeyBindings);}  }
class C{  public Vector add(Vector addend){  throw new RuntimeException("not implemented");}  }
class C{  @NonNull public Completable isLocationAvailable(){  return Observable.fromEmitter(locationAvailableProvider.get(),AsyncEmitter.BackpressureMode.NONE).toCompletable();}  }
class C{  private void ensureKeyGuard(){  if (!checkKeyGuardQuality()) {    new ConfigureKeyGuardDialog();    return;  }  if (confirmKeyGuard()) {    return;  }  finish();}  }
class C{  @Override public void show(FileDescriptor fileDescriptor,ExportFormat format){  show(new FileDataProvider(fileDescriptor),fileDescriptor.getName(),format);}  }
class C{  private int readField(final ClassVisitor classVisitor,final Context context,int u){  char[] c=context.buffer;  int access=readUnsignedShort(u);  String name=readUTF8(u + 2,c);  String desc=readUTF8(u + 4,c);  u+=6;  String signature=null;  int anns=0;  int ianns=0;  int tanns=0;  int itanns=0;  Object value=null;  Attribute attributes=null;  for (int i=readUnsignedShort(u); i > 0; --i) {    String attrName=readUTF8(u + 2,c);    if ("ConstantValue".equals(attrName)) {      int item=readUnsignedShort(u + 8);      value=item == 0 ? null : readConst(item,c);    } else     if (SIGNATURES && "Signature".equals(attrName)) {      signature=readUTF8(u + 8,c);    } else     if ("Deprecated".equals(attrName)) {      access|=Opcodes.ACC_DEPRECATED;    } else     if ("Synthetic".equals(attrName)) {      access|=Opcodes.ACC_SYNTHETIC | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE;    } else     if (ANNOTATIONS && "RuntimeVisibleAnnotations".equals(attrName)) {      anns=u + 8;    } else     if (ANNOTATIONS && "RuntimeVisibleTypeAnnotations".equals(attrName)) {      tanns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleAnnotations".equals(attrName)) {      ianns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {      itanns=u + 8;    } else {      Attribute attr=readAttribute(context.attrs,attrName,u + 8,readInt(u + 4),c,-1,null);      if (attr != null) {        attr.next=attributes;        attributes=attr;      }    }    u+=6 + readInt(u + 4);  }  u+=2;  FieldVisitor fv=classVisitor.visitField(access,name,desc,signature,value);  if (fv == null) {    return u;  }  if (ANNOTATIONS && anns != 0) {    for (int i=readUnsignedShort(anns), v=anns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,fv.visitAnnotation(readUTF8(v,c),true));    }  }  if (ANNOTATIONS && ianns != 0) {    for (int i=readUnsignedShort(ianns), v=ianns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,fv.visitAnnotation(readUTF8(v,c),false));    }  }  if (ANNOTATIONS && tanns != 0) {    for (int i=readUnsignedShort(tanns), v=tanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,fv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),true));    }  }  if (ANNOTATIONS && itanns != 0) {    for (int i=readUnsignedShort(itanns), v=itanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,fv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),false));    }  }  while (attributes != null) {    Attribute attr=attributes.next;    attributes.next=null;    fv.visitAttribute(attributes);    attributes=attr;  }  fv.visitEnd();  return u;}  }
class C{  public UserTokenPolicy clone(){  UserTokenPolicy result=new UserTokenPolicy();  result.PolicyId=PolicyId;  result.TokenType=TokenType;  result.IssuedTokenType=IssuedTokenType;  result.IssuerEndpointUrl=IssuerEndpointUrl;  result.SecurityPolicyUri=SecurityPolicyUri;  return result;}  }
class C{  public BrowseResponse clone(){  BrowseResponse result=new BrowseResponse();  result.ResponseHeader=ResponseHeader == null ? null : ResponseHeader.clone();  if (Results != null) {    result.Results=new BrowseResult[Results.length];    for (int i=0; i < Results.length; i++)     result.Results[i]=Results[i].clone();  }  result.DiagnosticInfos=DiagnosticInfos == null ? null : DiagnosticInfos.clone();  return result;}  }
class C{  public void java_lang_Class_getFields0(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getLeastArrayObject());}  }
class C{  @Override public boolean testAttribute(final Object target,final String name,final String value){  if (target instanceof TFSFolder) {    final TFSFolder folder=(TFSFolder)target;    final String serverPath=folder.getFullPath();    WorkingFolder exactFolder;    boolean isMapped;    try {      final Workspace workspace=getRepository().getWorkspace();      exactFolder=workspace.getExactMappingForServerPath(serverPath);      isMapped=workspace.isServerPathMapped(serverPath);    } catch (    final PathTooLongException e) {      exactFolder=null;      isMapped=false;    }    if (name.equals("MappingState")) {      if (value.equals("Unmapped")) {        return isMapped == false && exactFolder == null;      } else       if (value.equals("ExactMapping")) {        return exactFolder != null && exactFolder.isCloaked() == false;      } else       if (value.equals("MappedByParent")) {        return isMapped == true && exactFolder == null;      } else       if (value.equals("Cloaked")) {        return exactFolder != null && exactFolder.isCloaked() == true;      }    }  }  return false;}  }
class C{  public void flush(){  writer.flush();}  }
class C{  private boolean isInlineOnlyCheck(final Class<? extends Annotation> annotationClass){  return ReadPermission.class.isAssignableFrom(annotationClass) || DeletePermission.class.isAssignableFrom(annotationClass);}  }
class C{  public static RealVector fftApproxInvConvolution(RealVector first,RealVector second){  return fftConvolution(getInvolution(first),second);}  }
class C{  public static TransformMatrix2D scale(double x,double y){  return new TransformMatrix2D(x,0.0d,0.0d,y,0.0d,0.0d);}  }
class C{  public TransformerFactoryConfigurationError(Exception e,String msg){  super(msg);  this.exception=e;}  }
class C{  void loadTable(Path tablePath){  File f=tablePath.toFile();  if (!f.exists() || !f.isFile())   return;  try (FileChannel chan=FileChannel.open(tablePath,StandardOpenOption.READ)){    ByteBuffer buf=ByteBuffer.allocateDirect((int)chan.size());    chan.read(buf);    buf.flip();    Map<String,Object> table=ThreadLocalUtils.getDecoder().decode(buf);    AtomicInteger counter=new AtomicInteger();    Key oldKey=typedGet(table,"oldKey",byte[].class).filter(null).map(null).orElse(null);    boolean reuseKey=getRootID().equals(oldKey);    Comparator<KBucketEntry> comp=new KBucketEntry.DistanceOrder(getRootID());    typedGet(table,"mainEntries",List.class).ifPresent(null);    typedGet(table,"replacements",List.class).ifPresent(null);    typedGet(table,"log2estimate",byte[].class).filter(null).ifPresent(null);    long timeStamp=typedGet(table,"timestamp",Long.class).orElse(-1L);    DHT.logInfo("Loaded " + counter.get() + " entries from cache. Cache was "+ ((System.currentTimeMillis() - timeStamp) / (60 * 1000))+ "min old. Reusing old id = "+ reuseKey);    rebuildAddressCache();  } catch (  IOException e) {    DHT.log(e,LogLevel.Error);  }  ;}  }
class C{  public void run(String module,String version,Class<?> runClass,String... arguments){  setup(module,version);  try {    invokeMain(runClass,arguments);  } catch (  NoSuchMethodException|SecurityException|IllegalAccessException|IllegalArgumentException|InvocationTargetException e) {    throw new RuntimeException(e);  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:14.803 -0500",hash_original_method="B115D176D9854B47E8C200D036ACDD5B",hash_generated_method="17C2F2870E5A9D6E9ACE9C99368E106F") @Override public String toString(){  return "DragEvent{" + Integer.toHexString(System.identityHashCode(this)) + " action="+ mAction+ " @ ("+ mX+ ", "+ mY+ ") desc="+ mClipDescription+ " data="+ mClipData+ " local="+ mLocalState+ " result="+ mDragResult+ "}";}  }
class C{  public ProblemFactory(){  super();}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildLabyrinth(zone);}  }
class C{  public void insertEntity(DefaultMapEntity entity){  if (children == null) {    entities.add(entity);    isSorted=false;    if (entities.size() > maxEntities && depth < maxDepth) {      computeSplitValues();      BoundingBox c1bb;      BoundingBox c2bb;      if (splitAtLat) {        c1bb=new BoundingBox(bb.getLatMin(),bb.getLonMin(),splitValue,bb.getLonMax());        c2bb=new BoundingBox(splitValue,bb.getLonMin(),bb.getLatMax(),bb.getLonMax());      } else {        c1bb=new BoundingBox(bb.getLatMin(),bb.getLonMin(),bb.getLatMax(),splitValue);        c2bb=new BoundingBox(bb.getLatMin(),splitValue,bb.getLatMax(),bb.getLonMax());      }      children=new KDTree[2];      children[0]=new KDTree(c1bb,maxEntities,maxDepth,depth + 1);      children[1]=new KDTree(c2bb,maxEntities,maxDepth,depth + 1);      List<DefaultMapEntity> tmp=entities;      entities=new ArrayList<DefaultMapEntity>();      for (      DefaultMapEntity ne : tmp)       insertEntity(ne);    }  } else {    int cr=(splitAtLat ? entity.compareLatitude(splitValue) : entity.compareLongitude(splitValue));    if (cr < 0)     children[0].insertEntity(entity); else     if (cr > 0)     children[1].insertEntity(entity); else {      entities.add(entity);      isSorted=false;    }  }}  }
class C{  @GetMapping("/ping") public void ping(){  log.debug("Received a ping");}  }
class C{  public ReferenceExpression(Type objectType,int instanceId,int expressionSize,boolean containsSymbolicVariable){  super(null,expressionSize,containsSymbolicVariable);  this.objectType=objectType;  this.instanceId=instanceId;  this.isInitialized=false;  this.concIdentityHashCode=-1;}  }
class C{  public StandardCategorySeriesLabelGenerator(String format){  ParamChecks.nullNotPermitted(format,"format");  this.formatPattern=format;}  }
class C{  private String escape(final String value){  return value.replace("'","&apos;");}  }
class C{  public synchronized void firePan(float az,float c){  if (isEmpty())   return;  PanEvent evt=new PanEvent(source,az,c);  for (  PanListener listener : this) {    listener.pan(evt);  }}  }
class C{  protected final void cancelNotification(final String key) throws RemoteException {  mController.cancelNotification(mWrapper,key);}  }
class C{  public void save(OutputStream os) throws IOException {  DataOutputStream dos=null;  try {    dos=new DataOutputStream(os);    dos.writeLong(FILE_MAGIC_NUMBER);    dos.writeInt(FILE_VERSION);    saveExtensions(criticalExtensions,dos);    saveExtensions(nonCriticalExtensions,dos);  }  finally {    IOUtils.closeQuietly(dos);  }}  }
class C{  public static TypeReference newTypeParameterReference(int sort,int paramIndex){  return new TypeReference((sort << 24) | (paramIndex << 16));}  }
class C{  public void removeTurnFor(Entity entity){  if (turnVector.size() == 0) {    return;  }  if (getOptions().booleanOption("inf_move_multi") && (entity instanceof Infantry) && (phase == Phase.PHASE_MOVEMENT)) {    if ((getInfantryLeft(entity.getOwnerId()) % getOptions().intOption("inf_proto_move_multi")) != 1) {      if (hasMoreTurns()) {        GameTurn nextTurn=turnVector.elementAt(turnIndex + 1);        if (nextTurn instanceof GameTurn.EntityClassTurn) {          GameTurn.EntityClassTurn ect=(GameTurn.EntityClassTurn)nextTurn;          if (ect.isValidClass(GameTurn.CLASS_INFANTRY) && !ect.isValidClass(~GameTurn.CLASS_INFANTRY)) {            turnVector.removeElementAt(turnIndex + 1);          }        }      }      return;    }  }  if (getOptions().booleanOption("protos_move_multi") && (entity instanceof Protomech) && (phase == Phase.PHASE_MOVEMENT)) {    if ((getProtomechsLeft(entity.getOwnerId()) % getOptions().intOption("inf_proto_move_multi")) != 1) {      if (hasMoreTurns()) {        GameTurn nextTurn=turnVector.elementAt(turnIndex + 1);        if (nextTurn instanceof GameTurn.EntityClassTurn) {          GameTurn.EntityClassTurn ect=(GameTurn.EntityClassTurn)nextTurn;          if (ect.isValidClass(GameTurn.CLASS_PROTOMECH) && !ect.isValidClass(~GameTurn.CLASS_PROTOMECH)) {            turnVector.removeElementAt(turnIndex + 1);          }        }      }      return;    }  }  if (getOptions().booleanOption("vehicle_lance_movement") && (entity instanceof Tank) && (phase == Phase.PHASE_MOVEMENT)) {    if ((getVehiclesLeft(entity.getOwnerId()) % getOptions().intOption("vehicle_lance_movement_number")) != 1) {      if (hasMoreTurns()) {        GameTurn nextTurn=turnVector.elementAt(turnIndex + 1);        if (nextTurn instanceof GameTurn.EntityClassTurn) {          GameTurn.EntityClassTurn ect=(GameTurn.EntityClassTurn)nextTurn;          if (ect.isValidClass(GameTurn.CLASS_TANK) && !ect.isValidClass(~GameTurn.CLASS_TANK)) {            turnVector.removeElementAt(turnIndex + 1);          }        }      }      return;    }  }  if (getOptions().booleanOption("mek_lance_movement") && (entity instanceof Mech) && (phase == Phase.PHASE_MOVEMENT)) {    if ((getMechsLeft(entity.getOwnerId()) % getOptions().intOption("mek_lance_movement_number")) != 1) {      if (hasMoreTurns()) {        GameTurn nextTurn=turnVector.elementAt(turnIndex + 1);        if (nextTurn instanceof GameTurn.EntityClassTurn) {          GameTurn.EntityClassTurn ect=(GameTurn.EntityClassTurn)nextTurn;          if (ect.isValidClass(GameTurn.CLASS_MECH) && !ect.isValidClass(~GameTurn.CLASS_MECH)) {            turnVector.removeElementAt(turnIndex + 1);          }        }      }      return;    }  }  boolean useInfantryMoveLaterCheck=true;  if ((getOptions().booleanOption("inf_move_later") && (entity instanceof Infantry)) || (getOptions().booleanOption("protos_move_later") && (entity instanceof Protomech))) {    useInfantryMoveLaterCheck=false;  }  for (int i=turnVector.size() - 1; i >= turnIndex; i--) {    GameTurn turn=turnVector.elementAt(i);    if (turn.isValidEntity(entity,this,useInfantryMoveLaterCheck)) {      turnVector.removeElementAt(i);      break;    }  }}  }
class C{  public void updateRcsStatusOrCreateNewContact(ContactId contact,RcsStatus rcsStatus){synchronized (mContactInfoCache) {    long currentTime=System.currentTimeMillis();    ContentValues values=new ContentValues();    values.put(KEY_PRESENCE_SHARING_STATUS,rcsStatus.toInt());    values.put(KEY_TIMESTAMP_CONTACT_UPDATED,currentTime);    if (isContactIdAssociatedWithRcsContactProvider(contact)) {      Uri uri=Uri.withAppendedPath(CONTENT_URI,contact.toString());      mLocalContentResolver.update(uri,values,null,null);    } else {      values.put(KEY_CONTACT,contact.toString());      values.put(KEY_RCS_STATUS,rcsStatus.toInt());      values.put(KEY_RCS_STATUS_TIMESTAMP,currentTime);      values.put(KEY_REGISTRATION_STATE,RegistrationState.UNKNOWN.toInt());      values.put(KEY_PRESENCE_TIMESTAMP,-1);      values.put(KEY_CAPABILITY_TIMESTAMP_LAST_REQUEST,Capabilities.INVALID_TIMESTAMP);      values.put(KEY_CAPABILITY_CS_VIDEO,0);      values.put(KEY_CAPABILITY_IMAGE_SHARE,0);      values.put(KEY_CAPABILITY_VIDEO_SHARE,0);      values.put(KEY_CAPABILITY_IM_SESSION,0);      values.put(KEY_CAPABILITY_FILE_TRANSFER,0);      values.put(KEY_CAPABILITY_PRESENCE_DISCOVERY,0);      values.put(KEY_CAPABILITY_SOCIAL_PRESENCE,0);      values.put(KEY_CAPABILITY_GEOLOC_PUSH,0);      values.put(KEY_CAPABILITY_FILE_TRANSFER_HTTP,0);      values.put(KEY_CAPABILITY_FILE_TRANSFER_THUMBNAIL,0);      values.put(KEY_CAPABILITY_IP_VOICE_CALL,0);      values.put(KEY_CAPABILITY_IP_VIDEO_CALL,0);      values.put(KEY_CAPABILITY_FILE_TRANSFER_SF,0);      values.put(KEY_CAPABILITY_GROUP_CHAT_SF,0);      values.put(KEY_BLOCKED,BLOCKED_VALUE_NOT_SET);      values.put(KEY_BLOCKING_TIMESTAMP,INVALID_TIME);      values.put(KEY_AUTOMATA,0);      values.put(KEY_CAPABILITY_TIMESTAMP_LAST_RESPONSE,Capabilities.INVALID_TIMESTAMP);      mLocalContentResolver.insert(CONTENT_URI,values);    }    getContactInfoInternal(contact).setRcsStatus(rcsStatus);  }}  }
class C{  public void viewProperty(){}  }
class C{  protected void targetMBPerSecChanged(){}  }
class C{  public void clearSelection(){  m_selectedItems.clear();}  }
class C{  public Message(String to,Type type){  setTo(to);  this.type=type;}  }
class C{  public static void addDependency(Source path,ClassLoader loader){}  }
class C{  public UnconditionalFlowInfo discardInitializationInfo(){  if (this == DEAD_END) {    return this;  }  this.definiteInits=this.potentialInits=0;  if (this.extra != null) {    for (int i=0, length=this.extra[0].length; i < length; i++) {      this.extra[0][i]=this.extra[1][i]=0;    }  }  return this;}  }
class C{  public int addBoxPlot(String name,Color color,double[][] XYdXdY){  return ((Plot2DCanvas)plotCanvas).addBoxPlot(name,color,XYdXdY);}  }
class C{  public void validatePath(){  if (generalPath == null) {    generalPath=toGeneralPath();  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childNodes;  Node childNode;  int childType;  String childName;  java.util.List elementNames=new java.util.ArrayList();  java.util.List expectedElementNames=new java.util.ArrayList();  expectedElementNames.add("employeeId");  expectedElementNames.add("name");  expectedElementNames.add("position");  expectedElementNames.add("salary");  expectedElementNames.add("gender");  expectedElementNames.add("address");  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  childNodes=employeeNode.getChildNodes();  for (int indexN1006C=0; indexN1006C < childNodes.getLength(); indexN1006C++) {    childNode=(Node)childNodes.item(indexN1006C);    childType=(int)childNode.getNodeType();    if (equals(1,childType)) {      childName=childNode.getNodeName();      elementNames.add(childName);    }  }  assertEquals("elementNames",expectedElementNames,elementNames);}  }
class C{  public List<Notification> createNotification(BigInteger alertId,Notification notification) throws IOException {  String requestUrl=RESOURCE + "/" + alertId.toString()+ "/notifications";  ArgusResponse response=getClient().executeHttpRequest(ArgusHttpClient.RequestType.POST,requestUrl,notification);  assertValidResponse(response,requestUrl);  return fromJson(response.getResult(),new TypeReference<List<Notification>>(){  });}  }
class C{  private boolean userFlag(){  return Bits.get(flags,USERFLAG_BIT);}  }
class C{  public void dup(){  ClassNode type=getTopOperand();  stack.add(type);  MethodVisitor mv=controller.getMethodVisitor();  if (type == ClassHelper.double_TYPE || type == ClassHelper.long_TYPE) {    mv.visitInsn(DUP2);  } else {    mv.visitInsn(DUP);  }}  }
class C{  private String createUniqueName(String baseName){  int r=random.nextInt();  String suffix=Integer.toString(r);  if (suffix.charAt(0) == '-') {    suffix=suffix.replace('-','_');  }  return baseName + suffix;}  }
class C{  public ToStringBuilder append(String fieldName,int[] array){  style.append(buffer,fieldName,array,null);  return this;}  }
class C{  public Configuration createConfiguration(){  ConfigurationImpl configuration=new ConfigurationImpl();  return configuration;}  }
class C{  public String convertSourceFragmentTypeToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  public void buildClassifier(Instances data) throws Exception {  getCapabilities().testWithFail(data);  data=new Instances(data);  data.deleteWithMissingClass();  Random random=new Random(m_seed);  data.stratify(numSets);  buildTree(data.trainCV(numSets,numSets - 1,random),data.testCV(numSets,numSets - 1),!m_cleanup);  if (pruneTheTree) {    prune();  }  if (m_cleanup) {    cleanup(new Instances(data,0));  }}  }
class C{  protected String encodeCookie(SerializableHttpCookie cookie){  if (cookie == null)   return null;  ByteArrayOutputStream os=new ByteArrayOutputStream();  try {    ObjectOutputStream outputStream=new ObjectOutputStream(os);    outputStream.writeObject(cookie);  } catch (  IOException e) {    Log.d(LOG_TAG,"IOException in encodeCookie",e);    return null;  }  return byteArrayToHexString(os.toByteArray());}  }
class C{  public static long periodEnd(long now,long period){  LocalDateTime time=LocalDateTime.ofEpochSecond(now / 1000,0,ZoneOffset.UTC);  long endTime=periodEnd(now,period,time);  return endTime;}  }
class C{  public PolynomialGF2mSmallM gcd(PolynomialGF2mSmallM f){  int[] resultCoeff=gcd(coefficients,f.coefficients);  return new PolynomialGF2mSmallM(field,resultCoeff);}  }
class C{  public boolean put(int key,int value){  int i=indexOfInsertion(key);  if (i < 0) {    i=-i - 1;    this.values[i]=value;    return false;  }  if (this.distinct > this.highWaterMark) {    int newCapacity=chooseGrowCapacity(this.distinct + 1,this.minLoadFactor,this.maxLoadFactor);    rehash(newCapacity);    return put(key,value);  }  this.table[i]=key;  this.values[i]=value;  if (this.state[i] == FREE)   this.freeEntries--;  this.state[i]=FULL;  this.distinct++;  if (this.freeEntries < 1) {    int newCapacity=chooseGrowCapacity(this.distinct + 1,this.minLoadFactor,this.maxLoadFactor);    rehash(newCapacity);  }  return true;}  }
class C{  protected final void buildResourcePathSpecificFirst(ArrayList<String> pathList){  ClassLoader parent=getParent();  ArrayList<Loader> loaders=getLoaders();  int size=loaders != null ? loaders.size() : 0;  for (int i=0; i < size; i++) {    Loader loader=loaders.get(i);    loader.buildSourcePath(pathList);  }  if (parent instanceof DynamicClassLoader)   ((DynamicClassLoader)parent).buildResourcePathSpecificFirst(pathList); else {    String tail=getSystemClassPath();    if (tail != null) {      char sep=File.pathSeparatorChar;      String[] values=tail.split("[" + sep + "]");      for (int i=0; i < values.length; i++) {        pathList.add(values[i]);      }    }  }}  }
class C{  public static S2CellId sentinel(){  return new S2CellId(MAX_UNSIGNED);}  }
class C{  public E push(E object){  addElement(object);  return object;}  }
class C{  public boolean enqueue(){  return this.queue.enqueue(this);}  }
class C{  public CpcRunner(GraphSource graphWrapper,Parameters params){  super(graphWrapper.getGraph(),params);}  }
class C{  public void testPolygonNullPolyLats(){  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("polyLats must not be null"));}  }
class C{  public String encodeNode(final String name){  return nameCoder.encodeNode(name);}  }
class C{  private JBBPTokenizerException checkFieldName(final String name,final int position){  if (name != null) {    final String normalized=JBBPUtils.normalizeFieldNameOrPath(name);    if (normalized.indexOf('.') >= 0) {      return new JBBPTokenizerException("Field name must not contain '.' char",position);    }    if (this.reservedTypeNames.contains(normalized) || normalized.startsWith("$")) {      return new JBBPTokenizerException("'" + name + "' can't be used as field name",position);    }  }  return null;}  }
class C{  public void right(BalancedBinaryNode<K,V> newRight){  right=newRight;}  }
class C{  private boolean swappable(final GPInitializer initializer,final GPNode node){  if (node.children.length < 2)   return false;  if (initializer.numAtomicTypes + initializer.numSetTypes == 1)   return true;  for (int x=0; x < node.constraints(initializer).childtypes.length - 1; x++)   for (int y=x + 1; y < node.constraints(initializer).childtypes.length; y++)   if (node.children[x].constraints(initializer).returntype.compatibleWith(initializer,node.constraints(initializer).childtypes[y]) && node.children[y].constraints(initializer).returntype.compatibleWith(initializer,node.constraints(initializer).childtypes[x]))   return true;  return false;}  }
class C{  public void chooseOutfit(){  final RPObject player=userContext.getPlayer();  final int outfit;  if (player.has("outfit_org")) {    outfit=player.getInt("outfit_org");  } else {    outfit=player.getInt("outfit");  }  if (outfitDialog == null) {    outfitDialog=new OutfitDialog(frame,"Set outfit",outfit,new OutfitColor(player));    outfitDialog.setVisible(true);  } else {    outfitDialog.setState(outfit,OutfitColor.get(player));    outfitDialog.setVisible(true);    outfitDialog.toFront();  }}  }
class C{  public Lucene50StoredFieldsFormat(Mode mode){  this.mode=Objects.requireNonNull(mode);}  }
class C{  public FactLine createLine(DocLine docLine,MAccount account,int C_Currency_ID,BigDecimal debitAmt,BigDecimal creditAmt){  if (account == null) {    log.info("No account for " + docLine + ": Amt="+ debitAmt+ "/"+ creditAmt+ " - "+ toString());    return null;  }  FactLine line=new FactLine(m_doc.getCtx(),m_doc.get_Table_ID(),m_doc.get_ID(),docLine == null ? 0 : docLine.get_ID(),m_trxName);  line.setDocumentInfo(m_doc,docLine);  line.setPostingType(m_postingType);  line.setAccount(m_acctSchema,account);  if (!line.setAmtSource(C_Currency_ID,debitAmt,creditAmt)) {    if (docLine == null || docLine.getQty() == null || docLine.getQty().signum() == 0) {      log.fine("Both amounts & qty = 0/Null - " + docLine + " - "+ toString());      return null;    }    log.fine("Both amounts = 0/Null, Qty=" + docLine.getQty() + " - "+ docLine+ " - "+ toString());  }  line.convert();  if (docLine != null && (docLine.getAmtAcctDr() != null || docLine.getAmtAcctCr() != null))   line.setAmtAcct(docLine.getAmtAcctDr(),docLine.getAmtAcctCr());  log.fine(line.toString());  add(line);  return line;}  }
class C{  private void initResourceBundle(UIDefaults table){  table.addResourceBundle("com.sun.java.swing.plaf.windows.resources.windows");}  }
class C{  public static Amount fromNem(final long amount){  return new Amount(amount * MICRONEMS_IN_NEM);}  }
class C{  public CCNode addChild(CCNode node,int z,int tag){  assert (false) : "addChild: is not supported on CCTMXLayer. Instead use setTileGID:at:/tileAt:";  return null;}  }
class C{  private Object convertFieldValueUsingType(SchemaField sf,final Object rawValue){  if (rawValue instanceof CharSequence) {    FieldType fieldType=userVersionField.getType();    BytesRefBuilder term=new BytesRefBuilder();    fieldType.readableToIndexed((CharSequence)rawValue,term);    return fieldType.toObject(userVersionField,term.get());  }  return rawValue;}  }
class C{  public PayPalExpressCheckoutFilter(final PaymentCallBackHandlerFacade paymentCallBackHandlerFacade,final ShopService shopService,final IPResolver ipResolver,final PaymentProcessorFactory paymentProcessorFactory,final CustomerOrderService customerOrderService){  super(paymentCallBackHandlerFacade,shopService,ipResolver);  this.paymentProcessorFactory=paymentProcessorFactory;  this.customerOrderService=customerOrderService;  this.paymentCallBackHandlerFacade=paymentCallBackHandlerFacade;}  }
class C{  public FileReadException(final Exception exception){  super(exception);  m_originalStacktrace=exception.getStackTrace();}  }
class C{  public static String format(float[] d,String sep){  return (d == null) ? "null" : (d.length == 0) ? "" : formatTo(new StringBuilder(),d,sep).toString();}  }
class C{  public void addTreeWillExpandListener(TreeWillExpandListener tel){  listenerList.add(TreeWillExpandListener.class,tel);}  }
class C{  public static String geFileFromAssets(Context context,String fileName){  if (context == null || StringUtils.isEmpty(fileName)) {    return null;  }  StringBuilder s=new StringBuilder("");  try {    InputStreamReader in=new InputStreamReader(context.getResources().getAssets().open(fileName));    BufferedReader br=new BufferedReader(in);    String line;    while ((line=br.readLine()) != null) {      s.append(line);    }    return s.toString();  } catch (  IOException e) {    e.printStackTrace();    return null;  }}  }
class C{  public NodePool(){  this(16,Integer.MAX_VALUE);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof DeviationRenderer)) {    return false;  }  DeviationRenderer that=(DeviationRenderer)obj;  if (this.alpha != that.alpha) {    return false;  }  return super.equals(obj);}  }
class C{  public static String prettyPrintXml(String xml) throws TransformerException, IOException {  Source xmlInput=new StreamSource(new StringReader(xml));  try (StringWriter stringWriter=new StringWriter()){    StreamResult xmlOutput=new StreamResult(stringWriter);    TransformerFactory transformerFactory=TransformerFactory.newInstance();    transformerFactory.setAttribute("indent-number",DEFAULT_INDENT);    Transformer transformer=transformerFactory.newTransformer();    transformer.setOutputProperty(OutputKeys.ENCODING,StandardCharsets.UTF_8.name());    transformer.setOutputProperty(OutputKeys.VERSION,"1.0");    transformer.setOutputProperty(OutputKeys.INDENT,"yes");    transformer.transform(xmlInput,xmlOutput);    return xmlOutput.getWriter().toString();  } }  }
class C{  void restore(){  x=0;  y=0;  radius=0;}  }
class C{  @Override public boolean equals(Object o){  return o.hashCode() == hashCode();}  }
class C{  public Block fromXml(XmlPullParser parser) throws XmlPullParserException, IOException, BlocklyParserException {  String type=parser.getAttributeValue(null,"type");  String id=parser.getAttributeValue(null,"id");  if (type == null || type.isEmpty()) {    throw new BlocklyParserException("Block was missing a type.");  }  Block resultBlock=obtainBlock(type,id);  if (resultBlock == null) {    throw new BlocklyParserException("Tried to obtain a block of an unknown type " + type);  }  String collapsedString=parser.getAttributeValue(null,"collapsed");  if (collapsedString != null) {    resultBlock.setCollapsed(Boolean.parseBoolean(collapsedString));  }  String deletableString=parser.getAttributeValue(null,"deletable");  if (deletableString != null) {    resultBlock.setDeletable(Boolean.parseBoolean(deletableString));  }  String disabledString=parser.getAttributeValue(null,"disabled");  if (disabledString != null) {    resultBlock.setDisabled(Boolean.parseBoolean(disabledString));  }  String editableString=parser.getAttributeValue(null,"editable");  if (editableString != null) {    resultBlock.setEditable(Boolean.parseBoolean(editableString));  }  String inputsInlineString=parser.getAttributeValue(null,"inline");  if (inputsInlineString != null) {    resultBlock.setInputsInline(Boolean.parseBoolean(inputsInlineString));  }  String movableString=parser.getAttributeValue(null,"movable");  if (movableString != null) {    resultBlock.setMovable(Boolean.parseBoolean(movableString));  }  String x=parser.getAttributeValue(null,"x");  String y=parser.getAttributeValue(null,"y");  if (x != null && y != null) {    resultBlock.setPosition(Integer.parseInt(x),Integer.parseInt(y));  }  int eventType=parser.next();  String text="";  String fieldName="";  Block childBlock=null;  Block childShadow=null;  Input valueInput=null;  Input statementInput=null;  while (eventType != XmlPullParser.END_DOCUMENT) {    String tagname=parser.getName();switch (eventType) {case XmlPullParser.START_TAG:      text="";    if (tagname.equalsIgnoreCase("block")) {      childBlock=fromXml(parser);    } else     if (tagname.equalsIgnoreCase("shadow")) {      childShadow=fromXml(parser);    } else     if (tagname.equalsIgnoreCase("field")) {      fieldName=parser.getAttributeValue(null,"name");    } else     if (tagname.equalsIgnoreCase("value")) {      valueInput=resultBlock.getInputByName(parser.getAttributeValue(null,"name"));      if (valueInput == null) {        throw new BlocklyParserException("The value input was null at line " + parser.getLineNumber() + "!");      }    } else     if (tagname.equalsIgnoreCase("statement")) {      statementInput=resultBlock.getInputByName(parser.getAttributeValue(null,"name"));    } else     if (tagname.equalsIgnoreCase("mutation")) {    }  break;case XmlPullParser.TEXT:text=parser.getText();break;case XmlPullParser.END_TAG:Connection parentConnection=null;if (tagname.equalsIgnoreCase("block")) {if (resultBlock == null) {throw new BlocklyParserException("Created a null block. This should never happen.");}return resultBlock;} else if (tagname.equalsIgnoreCase("shadow")) {if (resultBlock == null) {throw new BlocklyParserException("Created a null block. This should never happen.");}try {resultBlock.setShadow(true);} catch (IllegalStateException e) {throw new BlocklyParserException(e);}return resultBlock;} else if (tagname.equalsIgnoreCase("field")) {Field toSet=resultBlock.getFieldByName(fieldName);if (toSet != null) {if (!toSet.setFromString(text)) {throw new BlocklyParserException("Failed to set a field's value from XML.");}}} else if (tagname.equalsIgnoreCase("comment")) {resultBlock.setComment(text);} else if (tagname.equalsIgnoreCase("value")) {if (valueInput != null) {parentConnection=valueInput.getConnection();if (parentConnection == null) {throw new BlocklyParserException("The input connection was null.");}} else {throw new BlocklyParserException("A value input was null.");}} else if (tagname.equalsIgnoreCase("statement")) {if (statementInput != null) {parentConnection=statementInput.getConnection();if (parentConnection == null) {throw new BlocklyParserException("The statement connection was null.");}} else {throw new BlocklyParserException("A statement input was null.");}} else if (tagname.equalsIgnoreCase("next")) {parentConnection=resultBlock.getNextConnection();if (parentConnection == null) {throw new BlocklyParserException("A next connection was null");}}if (parentConnection != null) {if (childBlock != null) {Connection childConnection=childBlock.getPreviousConnection();if (childConnection == null) {childConnection=childBlock.getOutputConnection();}if (childConnection == null) {throw new BlocklyParserException("The child block's connection was null.");}if (parentConnection.isConnected()) {throw new BlocklyParserException("Duplicated " + tagname + " in block.");}parentConnection.connect(childConnection);}if (childShadow != null) {Connection shadowConnection=childShadow.getPreviousConnection();if (shadowConnection == null) {shadowConnection=childShadow.getOutputConnection();}if (shadowConnection == null) {throw new BlocklyParserException("The shadow block connection was null.");}if (parentConnection.getShadowConnection() != null) {throw new BlocklyParserException("Duplicated " + tagname + " in block.");}parentConnection.setShadowConnection(shadowConnection);if (!parentConnection.isConnected()) {parentConnection.connect(shadowConnection);}}childBlock=null;childShadow=null;valueInput=null;statementInput=null;}break;default :break;}eventType=parser.next();}throw new BlocklyParserException("Reached the end of Block.fromXml. This should never happen.");}  }
class C{  protected boolean isValidFragment(String fragmentName){  return PreferenceFragment.class.getName().equals(fragmentName) || GeneralPreferenceFragment.class.getName().equals(fragmentName) || DataSyncPreferenceFragment.class.getName().equals(fragmentName)|| NotificationPreferenceFragment.class.getName().equals(fragmentName);}  }
class C{  public Tree(Table nodes,Table edges){  this(nodes,edges,DEFAULT_SOURCE_KEY,DEFAULT_TARGET_KEY);}  }
class C{  public boolean isCircular(){  return this.circular;}  }
class C{  private int remainingData(){  return buffer.remaining();}  }
class C{  public List<VirtualArrayRestRep> findByInitiatorPort(String initiatorPort,ResourceFilter<VirtualArrayRestRep> filter){  return search().byInitiatorPort(initiatorPort).filter(filter).run();}  }
class C{  public static void generateEncryptedSubmission(File instanceXml,File submissionXml,EncryptedFormInformation formInfo) throws IOException, EncryptionException {  if (!submissionXml.exists() || !submissionXml.isFile()) {    throw new IOException("No submission.xml found");  }  List<File> mediaFiles=encryptSubmissionFiles(instanceXml,submissionXml,formInfo);  writeSubmissionManifest(formInfo,submissionXml,mediaFiles);}  }
class C{  public final void signal(){  if (!isHeldExclusively())   throw new IllegalMonitorStateException();  Node first=firstWaiter;  if (first != null)   doSignal(first);}  }
class C{  public static void i(String msg,Object... args){  if (!allowI)   return;  StackTraceElement caller=getCallerStackTraceElement();  String tag=generateTag(caller);  if (sLevel > LEVEL_INFO) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.i(tag,msg);}  }
class C{  public synchronized boolean remove(Object o){  Object[] elements=getArray();  int len=elements.length;  if (len != 0) {    int newlen=len - 1;    Object[] newElements=new Object[newlen];    for (int i=0; i < newlen; ++i) {      if (eq(o,elements[i])) {        for (int k=i + 1; k < len; ++k)         newElements[k - 1]=elements[k];        setArray(newElements);        return true;      } else       newElements[i]=elements[i];    }    if (eq(o,elements[newlen])) {      setArray(newElements);      return true;    }  }  return false;}  }
class C{  public void quit(){  super.quit();  if (displayFrame != null) {    displayFrame.dispose();  }  displayFrame=null;  display=null;}  }
class C{  public static String style(String name,String source) throws IOException, ParserConfigurationException, TransformerException {  return createOutput(name,parseSource(source));}  }
class C{  public int read(char array[]){  return read(array,0,array.length);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case GamlPackage.IF__IF_FALSE:    return ifFalse != null;}return super.eIsSet(featureID);}  }
class C{  public void rebuildMainPageTree(){  multiPageComp.rebuildPageTree(false);}  }
class C{  void discardLast(){  --lastUsed;}  }
class C{  protected void sendBytes(boolean clearMessage) throws IOException {  if (this.sc != null) {    this.sc.updateProcessingMessage();  }  if (this.socket == null) {    throw new IOException(LocalizedStrings.Message_DEAD_CONNECTION.toLocalizedString());  }  try {    final ByteBuffer cb=getCommBuffer();    if (cb == null) {      throw new IOException("No buffer");    }    int msgLen=0;synchronized (cb) {      long totalPartLen=0;      long headerLen=0;      int partsToTransmit=this.numberOfParts;      for (int i=0; i < this.numberOfParts; i++) {        Part part=this.partsList[i];        headerLen+=PART_HEADER_SIZE;        totalPartLen+=part.getLength();      }      Part securityPart=this.getSecurityPart();      if (securityPart == null) {        securityPart=this.securePart;      }      if (securityPart != null) {        headerLen+=PART_HEADER_SIZE;        totalPartLen+=securityPart.getLength();        partsToTransmit++;      }      if ((headerLen + totalPartLen) > Integer.MAX_VALUE) {        throw new MessageTooLargeException("Message size (" + (headerLen + totalPartLen) + ") exceeds maximum integer value");      }      msgLen=(int)(headerLen + totalPartLen);      if (msgLen > MAX_MESSAGE_SIZE) {        throw new MessageTooLargeException("Message size (" + msgLen + ") exceeds gemfire.client.max-message-size setting ("+ MAX_MESSAGE_SIZE+ ")");      }      cb.clear();      packHeaderInfoForSending(msgLen,(securityPart != null));      for (int i=0; i < partsToTransmit; i++) {        Part part=(i == this.numberOfParts) ? securityPart : partsList[i];        if (cb.remaining() < PART_HEADER_SIZE) {          flushBuffer();        }        int partLen=part.getLength();        cb.putInt(partLen);        cb.put(part.getTypeCode());        if (partLen <= cb.remaining()) {          part.writeTo(cb);        } else {          flushBuffer();          if (this.sockCh != null) {            part.writeTo(this.sockCh,cb);          } else {            part.writeTo(this.os,cb);          }          if (this.msgStats != null) {            this.msgStats.incSentBytes(partLen);          }        }      }      if (cb.position() != 0) {        flushBuffer();      }      this.messageModified=false;      if (this.sockCh == null) {        this.os.flush();      }    }  }  finally {    if (clearMessage) {      clearParts();    }  }}  }
class C{  private boolean notifyPersistentConnectionListener(HttpMessage httpMessage,Socket inSocket,ZapGetMethod method){  boolean keepSocketOpen=false;  PersistentConnectionListener listener=null;synchronized (persistentConnectionListener) {    for (int i=0; i < persistentConnectionListener.size(); i++) {      listener=persistentConnectionListener.get(i);      try {        if (listener.onHandshakeResponse(httpMessage,inSocket,method)) {          keepSocketOpen=true;          break;        }      } catch (      Exception e) {        logger.warn(e.getMessage(),e);      }    }  }  return keepSocketOpen;}  }
class C{  public double centroidLatitude(){  return 0.5 * (this.minLatitude + this.maxLatitude);}  }
class C{  public float scaled(float length){  return factor * length;}  }
class C{  @Override public Object create(final ConfigurableFactoryContext ctx){  return new DigArea(getCondition(ctx),getAction(ctx),getWidth(ctx),getHeight(ctx));}  }
class C{  public EmbeddedJMSResource(String serverConfigurationFileName,String jmsConfigurationFileName){  if (serverConfigurationFileName == null) {    throw new IllegalArgumentException("ActiveMQServer configuration file name cannot be null");  }  if (jmsConfigurationFileName == null) {    throw new IllegalArgumentException("JMSServerManager configuration file name cannot be null");  }  FileDeploymentManager coreDeploymentManager=new FileDeploymentManager(serverConfigurationFileName);  FileConfiguration coreConfiguration=new FileConfiguration();  coreDeploymentManager.addDeployable(coreConfiguration);  try {    coreDeploymentManager.readConfiguration();  } catch (  Exception readCoreConfigEx) {    throw new EmbeddedJMSResourceException(String.format("Failed to read ActiveMQServer configuration from file %s",serverConfigurationFileName),readCoreConfigEx);  }  this.configuration=coreConfiguration;  FileJMSConfiguration jmsConfiguration=new FileJMSConfiguration();  FileDeploymentManager jmsDeploymentManager=new FileDeploymentManager(jmsConfigurationFileName);  jmsDeploymentManager.addDeployable(jmsConfiguration);  try {    jmsDeploymentManager.readConfiguration();  } catch (  Exception readJmsConfigEx) {    throw new EmbeddedJMSResourceException(String.format("Failed to read JMSServerManager configuration from file %s",jmsConfigurationFileName),readJmsConfigEx);  }  this.jmsConfiguration=jmsConfiguration;  init();}  }
class C{  void store(int n,storeVals isw,int j,double[] s){switch (isw) {case STORQ:    if (null == LanStore[j + MAXLL]) {      LanStore[j + MAXLL]=svd_doubleArray(n,false,"LanStore[j]");    }  svd_dcopy(n,s,1,LanStore[j + MAXLL],1);break;case RETRQ:if (null == LanStore[j + MAXLL]) throw new Error(String.format("svdLAS2: store (RETRQ) called on index %d (not allocated)",j + MAXLL));svd_dcopy(n,LanStore[j + MAXLL],1,s,1);break;case STORP:if (j >= MAXLL) {throw new Error("svdLAS2: store (STORP) called with j >= MAXLL");}if (null == LanStore[j]) {LanStore[j]=svd_doubleArray(n,false,"LanStore[j]");}svd_dcopy(n,s,1,LanStore[j],1);break;case RETRP:if (j >= MAXLL) {svd_error("svdLAS2: store (RETRP) called with j >= MAXLL");break;}if (null == LanStore[j]) throw new Error(String.format("svdLAS2: store (RETRP) called on index %d (not allocated)",j));svd_dcopy(n,LanStore[j],1,s,1);break;}return;}  }
class C{  @POST @Path("/policies") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public Response createPolicy(@Context final HttpServletRequest httpServletRequest,@QueryParam("org") String orgId,@QueryParam("space") String spaceId,String jsonString){  JSONObject response=new JSONObject();  response.put("policyId",TESTPOLICYID);  return RestApiResponseHandler.getResponseCreatedOk(response.toString());}  }
class C{  public static void main(String[] args){  ListDemo demo=new ListDemo(null);  demo.mainImpl();}  }
class C{  protected boolean isTokenSeparator(char ch){  return (ch == ',');}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  protected SVGOMMaskElement(){}  }
class C{  private Class readValue(Type type,NodeMap node) throws Exception {  Node entry=node.remove(label);  Class expect=type.getType();  if (expect.isArray()) {    expect=expect.getComponentType();  }  if (entry != null) {    String name=entry.getValue();    expect=loader.load(name);  }  return expect;}  }
class C{  public void cancelPendingUpdates(){synchronized (downloadJobs) {    for (    DownloadJob dlj : downloadJobs) {      dlj.cancel();    }    downloadJobs.clear();  }}  }
class C{  String buildQuery(String[] projectionIn,String selection,String[] selectionArgs,String groupBy,String having,String orderBy,String limit){  return null;}  }
class C{  public void open(InputStream is) throws IOException {  Assert.check(this.in == null,EC.SYSTEM_STREAM_EMPTY);  this.in=is;  this.len=this.in.read(this.buff);  Assert.check(this.len != 0,EC.SYSTEM_STREAM_EMPTY);}  }
class C{  final public void disable_tracing(){}  }
class C{  public RosterItemEntity(){}  }
class C{  @Deprecated public static boolean publishInstallAndWait(final Context context,final String applicationId){  Response response=publishInstallAndWaitForResponse(context,applicationId);  return response != null && response.getError() == null;}  }
class C{  protected void updateKeys(){  ButtonInfo[] buttons=NavigationButtons.loadButtonMap(mContext);  int visibleCount=0;  for (int i=0; i < buttons.length; i++) {    int id=BUTTON_IDS[i];    ButtonInfo info=buttons[mVertical ? buttons.length - i - 1 : i];    KeyButtonView button=(KeyButtonView)mParent.findViewById(id);    boolean isSmallButton=NavigationButtons.IS_SLOT_SMALL[i];    button.setInfo(info,mVertical,isSmallButton);    if (!info.equals(NavigationButtons.EMPTY) && !isSmallButton) {      visibleCount++;    }    button.setTranslationX(0);    mButtonViews.set(i,button);  }  if (isDevicePhone(mContext)) {    adjustPadding(visibleCount);  }  updateLowLights(visibleCount);}  }
class C{  public List findFmtFichaAccesibles(String idFicha,int tipoFormato){  FmtPrefFichaVO newFmtPrefFicha=null;  ServiceRepository services=ServiceRepository.getInstance(serviceClient);  GestionDescripcionBI descripcionBI=services.lookupGestionDescripcionBI();  List fmtFichas=descripcionBI.getFmtFichas(idFicha,tipoFormato);  List fmtFichasAccesibles=new ArrayList();  if (fmtFichas != null) {    for (int i=0; (newFmtPrefFicha == null) && (i < fmtFichas.size()); i++) {      FmtFichaVO fmtFicha=(FmtFichaVO)fmtFichas.get(i);      if (SecurityManagerBase.isAccessAllowed(serviceClient,fmtFicha.getTipo(),fmtFicha.getNivelAcceso())) {        fmtFichasAccesibles.add(fmtFicha);      }    }  }  return fmtFichasAccesibles;}  }
class C{  @SuppressWarnings("unchecked") protected CommandResult doExecuteWithResult(IProgressMonitor monitor,IAdaptable info) throws ExecutionException {  BooleanValueStyle style=GMFNotationUtil.getBooleanValueStyle(view,StateViewFactory.ALIGNMENT_ORIENTATION);  if (style == null) {    style=NotationFactory.eINSTANCE.createBooleanValueStyle();    style.setBooleanValue(true);    style.setName(StateViewFactory.ALIGNMENT_ORIENTATION);    view.getStyles().add(style);  } else {    style.setBooleanValue(!style.isBooleanValue());  }  return CommandResult.newOKCommandResult(view);}  }
class C{  public TransportAddress(InetSocketAddress address,Transport transport){  this(address.getAddress(),address.getPort(),transport);}  }
class C{  public boolean find(byte[] uuid){  node_trie node=root;  byte position;  byte offset=0;  while (true) {    if (offset % 2 == 0) {      position=(byte)(uuid[offset >> 1] >> 4);      if (position < 0)       position=(byte)(-position + 7);    } else     position=(byte)(uuid[offset >> 1] & 0x0F);    if (offset == 31)     return node.children[position] != null;    node_trie child=(node_trie)node.children[position];    if (child == null)     return false;    if (child.count == 0) {      node.children[position]=null;      node.count--;      return false;    }    node=child;    offset++;  }}  }
class C{  protected void onException(final Exception e,final String content){  throw WroRuntimeException.wrap(e);}  }
class C{  public double worldToView(Axis axis,Number value,boolean extrapolate){  double min=axis.getMin().doubleValue();  double max=axis.getMax().doubleValue();  double val=value.doubleValue();  if (!extrapolate) {    if (val <= min) {      return 0.0;    }    if (val >= max) {      return getShapeLength();    }  }  return (val - min) / (max - min) * getShapeLength();}  }
class C{  public void testBoost() throws Exception {  XmlDoc xml=new XmlDoc();  xml.xml="<doc>" + "<field name=\"id\">0</field>" + "<field name=\"title\" boost=\"3.0\">mytitle</field>"+ "</doc>";  assertNull(h.validateUpdate(add(xml,new String[0])));}  }
class C{  public void formatTextActionPerformed(View view){  EditText editTextLocal=(EditText)findViewById(R.id.editText);  spannable=editTextLocal.getText();  int posStart=editTextLocal.getSelectionStart();  int posEnd=editTextLocal.getSelectionEnd();  if (view.getTag().toString().equals("bold")) {    spannable.setSpan(new StyleSpan(Typeface.BOLD),posStart,posEnd,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);  } else   if (view.getTag().toString().equals("italic")) {    spannable.setSpan(new StyleSpan(Typeface.ITALIC),posStart,posEnd,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);  } else   if (view.getTag().toString().equals("underline")) {    spannable.setSpan(new UnderlineSpan(),posStart,posEnd,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);  } else   if (view.getTag().toString().equals("textBlack")) {    spannable.setSpan(new ForegroundColorSpan(Color.BLACK),posStart,posEnd,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);  } else   if (view.getTag().toString().equals("textRed")) {    spannable.setSpan(new ForegroundColorSpan(Color.RED),posStart,posEnd,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);  } else   if (view.getTag().toString().equals("textBlue")) {    spannable.setSpan(new ForegroundColorSpan(Color.BLUE),posStart,posEnd,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);  } else   if (view.getTag().toString().equals("textGreen")) {    spannable.setSpan(new ForegroundColorSpan(Color.GREEN),posStart,posEnd,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);  } else   if (view.getTag().toString().equals("textYellow")) {    spannable.setSpan(new ForegroundColorSpan(Color.YELLOW),posStart,posEnd,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);  }  editTextLocal.setText(spannable);}  }
class C{  protected final void expandCapacity(int minimumCapacity){  int newCapacity=Math.max(2 * _buffer.length,minimumCapacity);  char[] chars=new char[newCapacity];  System.arraycopy(buffer(),0,chars,0,_buffer.length);  _buffer=chars;}  }
class C{  private Map<PluginUtil.CheckerProp,Object> makeProps(){  final String sourcePath=StringUtils.join(compileSourceRoots.iterator(),File.pathSeparator);  final List<String> miscOptions=new ArrayList<String>();  miscOptions.add("-sourcepath");  miscOptions.add(sourcePath);  if (!StringUtils.isEmpty(javaParams)) {    miscOptions.addAll(PluginUtil.toJavaOpts(Arrays.asList(javaParams.split(" "))));  }  if (!StringUtils.isEmpty(javacParams)) {    miscOptions.addAll(Arrays.asList(javacParams.split(" ")));  }  final Map<PluginUtil.CheckerProp,Object> props=new HashMap<PluginUtil.CheckerProp,Object>();  props.put(PluginUtil.CheckerProp.MISC_COMPILER,miscOptions);  return props;}  }
class C{  private static Request build(final Request req,final String hdr,final String val) throws IOException {  final Request request;  if (new RqHeaders.Base(req).header(hdr).iterator().hasNext()) {    request=req;  } else {    request=new RqWithHeader(req,hdr,val);  }  return request;}  }
class C{  protected void deleteLinks(List<Link> links,String reason,List<LDUpdate> updateList){  NodePortTuple srcNpt, dstNpt;  List<LDUpdate> linkUpdateList=new ArrayList<LDUpdate>();  lock.writeLock().lock();  try {    for (    Link lt : links) {      srcNpt=new NodePortTuple(lt.getSrc(),lt.getSrcPort());      dstNpt=new NodePortTuple(lt.getDst(),lt.getDstPort());      if (switchLinks.containsKey(lt.getSrc())) {        switchLinks.get(lt.getSrc()).remove(lt);        if (switchLinks.get(lt.getSrc()).isEmpty())         this.switchLinks.remove(lt.getSrc());      }      if (this.switchLinks.containsKey(lt.getDst())) {        switchLinks.get(lt.getDst()).remove(lt);        if (this.switchLinks.get(lt.getDst()).isEmpty())         this.switchLinks.remove(lt.getDst());      }      if (this.portLinks.get(srcNpt) != null) {        this.portLinks.get(srcNpt).remove(lt);        if (this.portLinks.get(srcNpt).isEmpty())         this.portLinks.remove(srcNpt);      }      if (this.portLinks.get(dstNpt) != null) {        this.portLinks.get(dstNpt).remove(lt);        if (this.portLinks.get(dstNpt).isEmpty())         this.portLinks.remove(dstNpt);      }      LinkInfo info=this.links.remove(lt);      LinkType linkType=getLinkType(lt,info);      linkUpdateList.add(new LDUpdate(lt.getSrc(),lt.getSrcPort(),lt.getDst(),lt.getDstPort(),lt.getLatency(),linkType,UpdateOperation.LINK_REMOVED));      eventCategory.newEventWithFlush(new DirectLinkEvent(lt.getSrc(),lt.getSrcPort(),lt.getDst(),lt.getDstPort(),"link-deleted::" + reason));      removeLinkFromStorage(lt);      if (linkType == ILinkDiscovery.LinkType.DIRECT_LINK) {        log.info("Inter-switch link removed: {}",lt);        notifier.postNotification("Inter-switch link removed: " + lt.toString());      } else       if (log.isTraceEnabled()) {        log.trace("Deleted link {}",lt);      }    }  }  finally {    if (updateList != null)     linkUpdateList.addAll(updateList);    updates.addAll(linkUpdateList);    lock.writeLock().unlock();  }}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getDebug_();}  }
class C{  public FIXValue(int capacity){  bytes=new byte[capacity];  bytes[0]=SOH;  offset=0;  length=0;}  }
class C{  public static boolean isDistanceUnit(MeasureUnit unit){  Context context=context();  String pref=Prefs.getString(context,DISTANCE_UNIT);  if (pref.equals(context.getString(R.string.automatic_value))) {    pref=Locales.getDistanceUnit().getSubtype();  }  return pref.equals(unit.getSubtype());}  }
class C{  @Override public void fromData(DataInput in) throws IOException, ClassNotFoundException {  _operation=EnumListenerEvent.getEnumListenerEvent(in.readByte());  int dataSerializerCount=in.readInt();  this.serializedDataSerializer=new byte[dataSerializerCount][];  for (int i=0; i < dataSerializerCount; i++) {    this.serializedDataSerializer[i]=DataSerializer.readByteArray(in);  }  _membershipId=ClientProxyMembershipID.readCanonicalized(in);  _eventIdentifier=(EventID)DataSerializer.readObject(in);}  }
class C{  public SharingProfileModel(){}  }
class C{  public static boolean registerWrench(ItemStack aTool){  return registerTool(aTool,sWrenchList);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:00.758 -0500",hash_original_method="9599D1040188F59722C5FA5110991675",hash_generated_method="A081EA0AA099270013DF221F7CC39B44") public boolean isGroupOwner(){  return mIsGroupOwner;}  }
class C{  public void writeWorld(String worldName){  Out out=new Out("huglife/" + worldName + ".world");  for (int j=N; j >= 0; j--) {    for (int i=0; i < N; i++) {      Occupant o=getOccupant(i,j);      out.println(o.name + " " + i+ " "+ j);    }    out.println();  }}  }
class C{  private int decodeRunLength(int k){  if ((k & 1) == 1) {    return ((k >>> 1) & 63) ^ 63;  } else {    return Integer.numberOfLeadingZeros(k << p + (31 - sp)) + 1;  }}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  protected String add_escapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  public void play(){  if (isInitialized()) {    resumeSystemTimeUs=System.nanoTime() / 1000;    audioTrack.play();  }}  }
class C{  public static IndexKeyRange aroundObject(IndexRowType indexRowType,IndexBound lo){  if (lo == null) {    throw new IllegalArgumentException("IndexBound argument must not be null");  }  return new IndexKeyRange(indexRowType,lo,true,null,false,IndexKind.SPATIAL_OBJECT);}  }
class C{  public Object value(){  return value;}  }
class C{  private void Header(){  m_printstream.println("%!PS-Adobe-3.0 EPSF-3.0");  m_printstream.println("%%BoundingBox: 0 0 " + xScale(m_extent.width) + " "+ yScale(m_extent.height));  m_printstream.println("%%CreationDate: " + Calendar.getInstance().getTime());  m_printstream.println("/Oval { % x y w h filled");  m_printstream.println("gsave");  m_printstream.println("/filled exch def /h exch def /w exch def /y exch def /x exch def");  m_printstream.println("x w 2 div add y h 2 div sub translate");  m_printstream.println("1 h w div scale");  m_printstream.println("filled {0 0 moveto} if");  m_printstream.println("0 0 w 2 div 0 360 arc");  m_printstream.println("filled {closepath fill} {stroke} ifelse grestore} bind def");  m_printstream.println("/Rect { % x y w h filled");  m_printstream.println("/filled exch def /h exch def /w exch def /y exch def /x exch def");  m_printstream.println("newpath ");  m_printstream.println("x y moveto");  m_printstream.println("w 0 rlineto");  m_printstream.println("0 h neg rlineto");  m_printstream.println("w neg 0 rlineto");  m_printstream.println("closepath");  m_printstream.println("filled {fill} {stroke} ifelse} bind def");  m_printstream.println("%%BeginProlog\n%%EndProlog");  m_printstream.println("%%Page 1 1");  setFont(null);  setColor(null);  setStroke(null);}  }
class C{  public void removeSelectionListener(final SelectionListener listener){  checkWidget();  if (listener == null) {    SWT.error(SWT.ERROR_NULL_ARGUMENT);  }  listOfSelectionListeners.remove(listener);}  }
class C{  public static void registerUserAndLaunchChat(Context context,User user){  startChatActivity(context,user);}  }
class C{  protected void doReadObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  loadFactor=in.readFloat();  int capacity=in.readInt();  int size=in.readInt();  init();  threshold=calculateThreshold(capacity,loadFactor);  data=new HashEntry[capacity];  for (int i=0; i < size; i++) {    Object key=in.readObject();    Object value=in.readObject();    put(key,value);  }}  }
class C{  public static void move(Path source,Path destination) throws IOException {  try {    Files.move(source,destination);  } catch (  DirectoryNotEmptyException e) {    Files.walkFileTree(source,new TreeCopier(source,destination,true));  }}  }
class C{  public void assertMultipliesWith(FloatMatrix a){  if (!multipliesWith(a)) {    throw new SizeException("Number of columns of left matrix must be equal to number of rows of right matrix.");  }}  }
class C{  public void updateLine(float lat_1,float lon_1,float lat_2,float lon_2,int lineType,int nsegs,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkLine.write(lat_1,lon_1,lat_2,lon_2,lineType,nsegs,properties,link.dos);}  }
class C{  private void loginToLdapServer() throws Exception {  log.debug("loginToLdapServer");  Hashtable<String,String> env=new Hashtable<String,String>();  env.put(Context.INITIAL_CONTEXT_FACTORY,CONTEXT_FACTORY);  env.put(Context.PROVIDER_URL,ldap_connection_url);  env.put(Context.SECURITY_AUTHENTICATION,ldap_auth_type);  env.put(Context.SECURITY_PRINCIPAL,ldap_admin_dn);  env.put(Context.SECURITY_CREDENTIALS,ldap_passwd);  authContext=new InitialDirContext(env);}  }
class C{  public static <T>Predicate<T> onNegative(Predicate<T> test,Consumer<T> action){  return null;}  }
class C{  public GameController(Logic logic){  if (logic == null) {    throw new RuntimeException("GameController cannot have null logic.");  }  board=new TicTacToeBoard();  gameState=new TicTacToeState(board,logic);  this.logic=logic;  reset();}  }
class C{  public Matrix4x3d rotateZYX(double angleZ,double angleY,double angleX){  return rotateZYX(angleZ,angleY,angleX,this);}  }
class C{  @Override public void readFromNBT(NBTTagCompound nbt){  super.readFromNBT(nbt);  this.tier=nbt.getInteger("tier");}  }
class C{  public String toJson(){  GsonBuilder gson=new GsonBuilder();  gson.setPrettyPrinting();  return gson.create().toJson(this);}  }
class C{  public UF7(int numberOfVariables){  super(numberOfVariables,2);}  }
class C{  @Override public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {  if (qName.equals(KEY_TAG)) {    clearCurrentText();  } else {    throw new SAXException("Expecting <Key> but found " + qName);  }}  }
class C{  public void test2(){  final JPanel panel=new JPanel(new GridLayoutManager(2,2,new Insets(0,0,0,0),0,0));  final JButton button=new JButton();  button.setPreferredSize(new Dimension(50,10));  final JTextField field1=new JTextField();  field1.setPreferredSize(new Dimension(50,10));  final JTextField field2=new JTextField();  panel.add(button,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  panel.add(field1,new GridConstraints(0,1,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  panel.add(field2,new GridConstraints(1,0,1,2,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  final Dimension preferredSize=panel.getPreferredSize();  if (SystemInfo.isMac) {    assertEquals(125,preferredSize.width);  } else {    assertEquals(100,preferredSize.width);  }  panel.setSize(new Dimension(500,panel.getHeight()));  panel.doLayout();  assertEquals(500,field2.getWidth());  if (SystemInfo.isMac) {    assertEquals(263,button.getWidth());    assertEquals(237,field1.getWidth());  } else {    assertEquals(250,button.getWidth());    assertEquals(250,field1.getWidth());  }}  }
class C{  public static LinearFunction serializableInstance(){  return new LinearFunction(BasicLagGraph.serializableInstance());}  }
class C{  public void register(StateCallback<S> callback){  phlux.register(key,callback);}  }
class C{  public CharSequence substring(@NotNull char[] originalData,int start,int end){  if (myChanges.isEmpty()) {    return new String(originalData,start,end - start);  }  if (end == start) {    return "";  }  int startChangeIndex=getChangeIndex(start);  int endChangeIndex=getChangeIndex(end);  boolean substringAffectedByChanges=startChangeIndex >= 0 || endChangeIndex >= 0 || startChangeIndex != endChangeIndex;  int clientShift=0;  int originalStart=0;  if (startChangeIndex < 0) {    startChangeIndex=-startChangeIndex - 1;    if (startChangeIndex > 0 && startChangeIndex <= myChanges.size()) {      ChangeEntry changeEntry=myChanges.get(startChangeIndex - 1);      clientShift=changeEntry.clientStartOffset - changeEntry.change.getStart() + changeEntry.change.getDiff();      originalStart=changeEntry.change.getEnd();    }  } else {    ChangeEntry changeEntry=myChanges.get(startChangeIndex);    clientShift=changeEntry.clientStartOffset - changeEntry.change.getStart();  }  if (!substringAffectedByChanges) {    return new String(originalData,start - clientShift,end - start);  }  char[] data=new char[end - start];  int outputOffset=0;  for (int i=startChangeIndex; i < myChanges.size() && outputOffset < data.length; i++) {    ChangeEntry changeEntry=myChanges.get(i);    int clientStart=changeEntry.clientStartOffset;    if (clientStart >= end) {      if (i == startChangeIndex) {        return new String(originalData,start - clientShift,end - start);      }      System.arraycopy(originalData,originalStart,data,outputOffset,data.length - outputOffset);      break;    }    int clientEnd=clientStart + changeEntry.change.getText().length();    if (clientEnd > start) {      if (clientStart > start) {        int length=Math.min(clientStart - start,changeEntry.change.getStart() - originalStart);        length=Math.min(length,data.length - outputOffset);        System.arraycopy(originalData,changeEntry.change.getStart() - length,data,outputOffset,length);        outputOffset+=length;        if (outputOffset >= data.length) {          break;        }      }      if (end >= clientStart && clientStart < clientEnd) {        int changeTextStartOffset=start <= clientStart ? 0 : start - clientStart;        int length=Math.min(clientEnd,end) - Math.max(clientStart,start);        CharArrayUtil.getChars(changeEntry.change.getText(),data,changeTextStartOffset,outputOffset,length);        outputOffset+=length;      }    }    originalStart=changeEntry.change.getEnd();  }  if (outputOffset < data.length) {    System.arraycopy(originalData,originalStart,data,outputOffset,data.length - outputOffset);  }  return StringFactory.createShared(data);}  }
class C{  public MovieTrailer(MediaTrailer mediaTrailer){  if (mediaTrailer != null) {    name=mediaTrailer.getName();    url=mediaTrailer.getUrl();    quality=mediaTrailer.getQuality();    provider=mediaTrailer.getProvider();    date=mediaTrailer.getDate();  }}  }
class C{  public OMGraphic edit(OMGraphic g,DrawingToolRequestor requestor,MouseEvent e){  OMGraphic ret=null;  if (getCurrentEditable() == null) {    EditableOMGraphic eomg=getEditableGraphic(g);    if (eomg != null) {      ret=edit(eomg,requestor,e);    }  }  return ret;}  }
class C{  protected void addBackupsToBackupRequestBuffer(FbService service,ServiceRequestBuffer backupSPB) throws SQLException {  for (Iterator<PathSizeStruct> iter=backupPaths.iterator(); iter.hasNext(); ) {    PathSizeStruct pathSize=iter.next();    backupSPB.addArgument(isc_spb_bkp_file,pathSize.getPath());    if (iter.hasNext() && pathSize.getSize() == -1) {      throw new SQLException("No size specified for a backup file " + pathSize.getPath());    }    if (iter.hasNext()) {      backupSPB.addArgument(isc_spb_bkp_length,pathSize.getSize());    }  }}  }
class C{  public void addRow(Object... row) throws IOException {  super.print(Strings.join(row,"\t") + "\n");}  }
class C{  public ByteValue(byte value){  this.value=value;}  }
class C{  private Variable parseVariableSpecification(String token) throws ParseException {  if (!token.endsWith(")")) {    throw new ParseException("invalid variable specification '" + token + "', not properly formatted");  }  if (token.startsWith("R(")) {    String content=token.substring(2,token.length() - 1);    int index=content.indexOf(';');    if (index >= 0) {      double lowerBound=Double.parseDouble(content.substring(0,index));      double upperBound=Double.parseDouble(content.substring(index + 1,content.length()));      return EncodingUtils.newReal(lowerBound,upperBound);    } else {      throw new ParseException("invalid real specification '" + token + "', expected R(<lb>,<ub>)");    }  } else   if (token.startsWith("B(")) {    String content=token.substring(2,token.length() - 1);    try {      int length=Integer.parseInt(content.trim());      return EncodingUtils.newBinary(length);    } catch (    NumberFormatException e) {      throw new ParseException("invalid binary specification '" + token + "', expected B(<length>)");    }  } else   if (token.startsWith("P(")) {    String content=token.substring(2,token.length() - 1);    try {      int length=Integer.parseInt(content.trim());      return EncodingUtils.newPermutation(length);    } catch (    NumberFormatException e) {      throw new ParseException("invalid permutation specification '" + token + "', expected P(<length>)");    }  } else {    throw new ParseException("invalid variable specification '" + token + "', unknown type");  }}  }
class C{  public static boolean isJavaProject(Node node){  if (!(node instanceof HasProjectDescriptor)) {    return false;  }  ProjectDescriptor descriptor=((HasProjectDescriptor)node).getProjectDescriptor();  Map<String,List<String>> attributes=descriptor.getAttributes();  return attributes.containsKey(Constants.LANGUAGE) && attributes.get(Constants.LANGUAGE) != null && "java".equals(attributes.get(Constants.LANGUAGE).get(0));}  }
class C{  public void testSharedMode() throws Exception {  processTestBothNodesDeploy(DeploymentMode.SHARED);}  }
class C{  public static void print(float x){  out.print(x);  out.flush();}  }
class C{  public static boolean isValidNCName(String ncName){  if (ncName.length() == 0)   return false;  char ch=ncName.charAt(0);  if (isNCNameStart(ch) == false)   return false;  for (int i=1; i < ncName.length(); i++) {    ch=ncName.charAt(i);    if (isNCName(ch) == false) {      return false;    }  }  return true;}  }
class C{  @Override protected EClass eStaticClass(){  return SexecPackage.Literals.EXECUTION_FLOW;}  }
class C{  protected void preSerialize(T t){}  }
class C{  public static NameAndTags searchInNames(Context ctx,String term,int maxDistance){  Map<String,NameAndTags> namesSearchIndex=Application.getNameSearchIndex(ctx);  NameAndTags result=null;  int lastDistance=Integer.MAX_VALUE;  term=SearchIndexUtils.normalize(term);  for (  String n : namesSearchIndex.keySet()) {    int distance=OptimalStringAlignment.editDistance(n,term,maxDistance);    if (distance >= 0 && distance <= maxDistance) {      if (distance < lastDistance) {        result=namesSearchIndex.get(n);        lastDistance=distance;        if (distance == 0) {          return result;        }      }    }  }  return result;}  }
class C{  public boolean isPerformingBlockingOperation(){  return (!mServiceHandler.mPendingOperations.isEmpty());}  }
class C{  public boolean isOrderedUpdate(){  return orderedUpdate;}  }
class C{  void appendBtoFList(NodeSetDTM flist,NodeSetDTM blist){  int n=blist.size();  for (int i=(n - 1); i >= 0; i--) {    flist.addElement(blist.item(i));  }}  }
class C{  protected final GridNioServer<?> startServer(GridNioParser parser,GridNioServerListener lsnr,@Nullable Integer queueLimit) throws Exception {  for (int i=0; i < 10; i++) {    int srvPort=port++;    try {      GridNioServer.Builder<?> builder=serverBuilder(srvPort,parser,lsnr);      if (queueLimit != null)       builder.sendQueueLimit(queueLimit);      GridNioServer<?> srvr=builder.build();      srvr.start();      return srvr;    } catch (    IgniteCheckedException e) {      if (i < 9 && e.hasCause(BindException.class)) {        log.error("Failed to start server, will try another port [err=" + e + ", port="+ srvPort+ ']');        U.sleep(5000);      } else       throw e;    }  }  fail("Failed to start server.");  return null;}  }
class C{  public String CrossValidateAttributes() throws Exception {  Instances cvData=new Instances(m_trainInstances);  Instances train;  Random random=new Random(m_seed);  cvData.randomize(random);  if (!(m_ASEvaluator instanceof UnsupervisedSubsetEvaluator) && !(m_ASEvaluator instanceof UnsupervisedAttributeEvaluator)) {    if (cvData.classAttribute().isNominal()) {      cvData.stratify(m_numFolds);    }  }  for (int i=0; i < m_numFolds; i++) {    train=cvData.trainCV(m_numFolds,i,random);    selectAttributesCVSplit(train);  }  return CVResultsString();}  }
class C{  public FileShareRestRep releaseFileSystem(URI fsId,StorageOSUser user){  WebResource rRoot=createRequest(INTERNAL_FILE_ROOT + fsId + RELEASE);  WebResource.Builder requestBuilder=addSignature(rRoot);  FileShareRestRep resp=addTokens(requestBuilder,user.getToken(),user.getProxyToken()).post(FileShareRestRep.class);  return resp;}  }
class C{  public Collection<V> values(){  if (values == null) {    values=new ReferenceValues<K,V>(this);  }  return values;}  }
class C{  protected static void printServiceException(ServiceException e){  System.err.print("Error");  if (e.getHttpErrorCodeOverride() > 0) {    System.err.print(e.getHttpErrorCodeOverride());  }  System.err.print(": ");  System.err.println(e.getMessage());  ServiceErrors errors=new ServiceErrors(e);  for (  ServiceError error : errors.getAllErrors()) {    String field=error.getField();    System.err.print("  ");    if (field != null) {      System.err.print("in field '");      System.err.print(field);      System.err.print("' ");    }    System.err.println(error.getReason());  }}  }
class C{  private void reportTestRunEnded(){  for (  ITestRunListener listener : mTestListeners) {    listener.testRunEnded(mTotalRunTime,getRunMetrics());  }  mTestRunStartReported=false;}  }
class C{  public static double skewness(double[] x){  double mean=mean(x);  double stdev=stdev(x);  double skew=0.0;  double len=x.length;  for (  double xv : x) {    double diff=xv - mean;    diff/=stdev;    skew+=(diff * diff * diff);  }  skew*=(len / ((len - 1) * (len - 2)));  return skew;}  }
class C{  private List<IModel> gatherModelDependencies(IModel model,List<IModel> foundDependencies){  Collection<ResourceLocation> dependencies=model.getDependencies();  for (  ResourceLocation dependency : dependencies) {    try {      IModel dependencyModel=ModelLoaderRegistry.getModel(dependency);      if (!foundDependencies.contains(dependencyModel)) {        foundDependencies.add(dependencyModel);        this.gatherModelDependencies(dependencyModel,foundDependencies);      }    } catch (    LoaderException ex) {    }catch (    Exception ex) {      throw new RuntimeException(ex);    }  }  return foundDependencies;}  }
class C{  public static byte[] decode(byte[] source,int off,int len,int options) throws java.io.IOException {  if (source == null) {    throw new NullPointerException("Cannot decode null source array.");  }  if (off < 0 || off + len > source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and process %d bytes.",source.length,off,len));  }  if (len == 0) {    return new byte[0];  } else   if (len < 4) {    throw new IllegalArgumentException("Base64-encoded string must have at least four characters, but length specified was " + len);  }  byte[] DECODABET=getDecodabet(options);  int len34=len * 3 / 4;  byte[] outBuff=new byte[len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiDecode=0;  for (i=off; i < off + len; i++) {    sbiDecode=DECODABET[source[i] & 0xFF];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        b4[b4Posn++]=source[i];        if (b4Posn > 3) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,options);          b4Posn=0;          if (source[i] == EQUALS_SIGN) {            break;          }        }      }    } else {      throw new java.io.IOException(String.format("Bad Base64 input character decimal %d in array position %d",((int)source[i]) & 0xFF,i));    }  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  @Override public String toString(){  return "Property " + getCoordinate();}  }
class C{  public boolean more() throws JSONException {  this.next();  if (this.end()) {    return false;  }  this.back();  return true;}  }
class C{  public boolean isModuleNameCompleted(){  FullMemberReference ref=nodeAsFullMemberReference();  if (ref != null && ref.moduleNameSet()) {    if (lastChar() == '.') {      return true;    }    return ref.typeNameSet();  }  return false;}  }
class C{  public String readLine(){  String line;  try {    line=scanner.nextLine();  } catch (  Exception e) {    line=null;  }  return line;}  }
class C{  public Path(String device,String path){  initialize(device,path);}  }
class C{  public void paragraphSeparator(){  System.out.println("************************************************************");}  }
class C{  public static OutputLimitClause create(Expression whenExpression){  return new OutputLimitClause(OutputLimitSelector.DEFAULT,whenExpression,new ArrayList<Assignment>());}  }
class C{  public static AsymmetricKeyParameter createKey(SubjectPublicKeyInfo keyInfo) throws IOException {  AlgorithmIdentifier algId=keyInfo.getAlgorithm();  if (algId.getAlgorithm().equals(PKCSObjectIdentifiers.rsaEncryption) || algId.getAlgorithm().equals(X509ObjectIdentifiers.id_ea_rsa)) {    RSAPublicKey pubKey=RSAPublicKey.getInstance(keyInfo.parsePublicKey());    return new RSAKeyParameters(false,pubKey.getModulus(),pubKey.getPublicExponent());  } else   if (algId.getAlgorithm().equals(X9ObjectIdentifiers.dhpublicnumber)) {    DHPublicKey dhPublicKey=DHPublicKey.getInstance(keyInfo.parsePublicKey());    BigInteger y=dhPublicKey.getY().getValue();    DHDomainParameters dhParams=DHDomainParameters.getInstance(algId.getParameters());    BigInteger p=dhParams.getP().getValue();    BigInteger g=dhParams.getG().getValue();    BigInteger q=dhParams.getQ().getValue();    BigInteger j=null;    if (dhParams.getJ() != null) {      j=dhParams.getJ().getValue();    }    DHValidationParameters validation=null;    DHValidationParms dhValidationParms=dhParams.getValidationParms();    if (dhValidationParms != null) {      byte[] seed=dhValidationParms.getSeed().getBytes();      BigInteger pgenCounter=dhValidationParms.getPgenCounter().getValue();      validation=new DHValidationParameters(seed,pgenCounter.intValue());    }    return new DHPublicKeyParameters(y,new DHParameters(p,g,q,j,validation));  } else   if (algId.getAlgorithm().equals(PKCSObjectIdentifiers.dhKeyAgreement)) {    DHParameter params=DHParameter.getInstance(algId.getParameters());    ASN1Integer derY=(ASN1Integer)keyInfo.parsePublicKey();    BigInteger lVal=params.getL();    int l=lVal == null ? 0 : lVal.intValue();    DHParameters dhParams=new DHParameters(params.getP(),params.getG(),null,l);    return new DHPublicKeyParameters(derY.getValue(),dhParams);  } else   if (algId.getAlgorithm().equals(X9ObjectIdentifiers.id_dsa) || algId.getAlgorithm().equals(OIWObjectIdentifiers.dsaWithSHA1)) {    ASN1Integer derY=(ASN1Integer)keyInfo.parsePublicKey();    ASN1Encodable de=algId.getParameters();    DSAParameters parameters=null;    if (de != null) {      DSAParameter params=DSAParameter.getInstance(de.toASN1Primitive());      parameters=new DSAParameters(params.getP(),params.getQ(),params.getG());    }    return new DSAPublicKeyParameters(derY.getValue(),parameters);  } else   if (algId.getAlgorithm().equals(X9ObjectIdentifiers.id_ecPublicKey)) {    X962Parameters params=new X962Parameters((ASN1Primitive)algId.getParameters());    X9ECParameters x9;    if (params.isNamedCurve()) {      ASN1ObjectIdentifier oid=(ASN1ObjectIdentifier)params.getParameters();      x9=X962NamedCurves.getByOID(oid);      if (x9 == null) {        x9=SECNamedCurves.getByOID(oid);        if (x9 == null) {          x9=NISTNamedCurves.getByOID(oid);        }      }    } else {      x9=X9ECParameters.getInstance(params.getParameters());    }    ASN1OctetString key=new DEROctetString(keyInfo.getPublicKeyData().getBytes());    X9ECPoint derQ=new X9ECPoint(x9.getCurve(),key);    ECDomainParameters dParams=new ECDomainParameters(x9.getCurve(),x9.getG(),x9.getN(),x9.getH(),x9.getSeed());    return new ECPublicKeyParameters(derQ.getPoint(),dParams);  } else {    throw new RuntimeException("algorithm identifier in key not recognised");  }}  }
class C{  @Override public final BufferedImage toBufferedImage(byte[] bytes,String format) throws IOException {  try {    return Sanselan.getBufferedImage(new ByteArrayInputStream(bytes));  } catch (  ImageReadException e) {    throw ExceptionUtil.toIOException(e);  }}  }
class C{  public static void main(String[] args) throws Exception {  new ARFFConverter().start(args);}  }
class C{  @Override public void retry(VolleyError error) throws VolleyError {  mCurrentRetryCount++;  mCurrentTimeoutMs+=(mCurrentTimeoutMs * mBackoffMultiplier);  if (!hasAttemptRemaining()) {    throw error;  }}  }
class C{  public void println() throws IOException {  _os.println();  if (!_lastCr)   _destLine++;  _lastCr=false;  _startLine=true;}  }
class C{  @Override public IList<T> createAgents(final IScope scope,final IContainer<?,? extends IShape> geometries){  final int number=geometries.length(scope);  if (number == 0) {    return GamaListFactory.create();  }  final IList<T> list=GamaListFactory.create(getType().getContentType(),number);  final IAgentConstructor<T> constr=((SpeciesDescription)species.getDescription()).getAgentConstructor();  for (  final IShape geom : geometries.iterable(scope)) {    final T a=constr.createOneAgent(this);    final int ind=currentAgentIndex++;    a.setIndex(ind);    a.setGeometry(geom);    list.add(a);  }  addAll(list);  for (  final IAgent a : list) {    a.schedule(scope);  }  createVariablesFor(scope,list,Collections.EMPTY_LIST);  fireAgentsAdded(list);  return list;}  }
class C{  public double updateContainerVmsProcessing(double currentTime){  double smallerTime=Double.MAX_VALUE;  for (  ContainerVm containerVm : getVmList()) {    double time=containerVm.updateVmProcessing(currentTime,getContainerVmScheduler().getAllocatedMipsForContainerVm(containerVm));    if (time > 0.0 && time < smallerTime) {      smallerTime=time;    }  }  return smallerTime;}  }
class C{  public Agent(String url){  setUrl(url);}  }
class C{  public Out(Socket socket){  try {    OutputStream os=socket.getOutputStream();    OutputStreamWriter osw=new OutputStreamWriter(os,CHARSET_NAME);    out=new PrintWriter(osw,true);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public DeviceIndexInterator(DeviceManagerImpl deviceManager,Iterator<Long> subIterator){  super();  this.deviceManager=deviceManager;  this.subIterator=subIterator;}  }
class C{  private void match(char ttype) throws ParserException, IOException {  if (lookahead.ttype == (int)ttype) {    nextToken();  } else {    throw new SyntaxException(st.lineno(),new Token((int)ttype),lookahead);  }}  }
class C{  public String formatDateTimeShort(Date d){  return d.toString();}  }
class C{  @Override public void postProcessDistances(double distances[]){  for (int i=0; i < distances.length; i++) {    distances[i]=Math.pow(distances[i],1 / m_Order);  }}  }
class C{  public void storeDeviceThrottled(Device d){  long intervalNs=syncStoreWriteIntervalMs * 1000L * 1000L;  if (!isMaster)   return;  if (d == null)   return;  long now=System.nanoTime();  Long last=lastWriteTimes.get(d.getDeviceKey());  if (last == null || (now - last) > intervalNs) {    writeUpdatedDeviceToStorage(d);    lastWriteTimes.put(d.getDeviceKey(),now);  } else {    cntDeviceStoreThrottled.increment();  }}  }
class C{  public static Bitmap loadDownsampledBitmap(Context context,Uri uri,int sampleSize){  BitmapFactory.Options options=new BitmapFactory.Options();  options.inMutable=true;  options.inSampleSize=sampleSize;  return loadBitmap(context,uri,options);}  }
class C{  private void write(String level,Object o,Throwable throwable){  String msg=getMsg(level,o).toString();  if (usingSystemOut || context == null) {    System.out.println(msg);    throwable.printStackTrace(System.out);  } else   if (usingSystemErr) {    System.err.println(msg);    throwable.printStackTrace(System.err);  } else {    context.log(msg,throwable);  }}  }
class C{  public boolean wasCanceled(){  return m_wasCanceled;}  }
class C{  public static boolean writeFile(File file,InputStream stream,boolean append){  OutputStream o=null;  try {    makeDirs(file.getAbsolutePath());    o=new FileOutputStream(file,append);    byte data[]=new byte[1024];    int length=-1;    while ((length=stream.read(data)) != -1) {      o.write(data,0,length);    }    o.flush();    return true;  } catch (  FileNotFoundException e) {    throw new RuntimeException("FileNotFoundException occurred. ",e);  }catch (  IOException e) {    throw new RuntimeException("IOException occurred. ",e);  } finally {    if (o != null) {      try {        o.close();        stream.close();      } catch (      IOException e) {        throw new RuntimeException("IOException occurred. ",e);      }    }  }}  }
class C{  public GifSequenceWriter(ImageOutputStream outputStream,int imageType,int timeBetweenFramesMS,boolean loopContinuously) throws IIOException, IOException {  gifWriter=getWriter();  imageWriteParam=gifWriter.getDefaultWriteParam();  ImageTypeSpecifier imageTypeSpecifier=ImageTypeSpecifier.createFromBufferedImageType(imageType);  imageMetaData=gifWriter.getDefaultImageMetadata(imageTypeSpecifier,imageWriteParam);  String metaFormatName=imageMetaData.getNativeMetadataFormatName();  IIOMetadataNode root=(IIOMetadataNode)imageMetaData.getAsTree(metaFormatName);  IIOMetadataNode graphicsControlExtensionNode=getNode(root,"GraphicControlExtension");  graphicsControlExtensionNode.setAttribute("disposalMethod","none");  graphicsControlExtensionNode.setAttribute("userInputFlag","FALSE");  graphicsControlExtensionNode.setAttribute("transparentColorFlag","FALSE");  graphicsControlExtensionNode.setAttribute("delayTime",Integer.toString(timeBetweenFramesMS / 10));  graphicsControlExtensionNode.setAttribute("transparentColorIndex","0");  IIOMetadataNode commentsNode=getNode(root,"CommentExtensions");  commentsNode.setAttribute("CommentExtension","Created by MAH");  IIOMetadataNode appEntensionsNode=getNode(root,"ApplicationExtensions");  IIOMetadataNode child=new IIOMetadataNode("ApplicationExtension");  child.setAttribute("applicationID","NETSCAPE");  child.setAttribute("authenticationCode","2.0");  int loop=loopContinuously ? 0 : 1;  child.setUserObject(new byte[]{0x1,(byte)(loop & 0xFF),(byte)((loop >> 8) & 0xFF)});  appEntensionsNode.appendChild(child);  imageMetaData.setFromTree(metaFormatName,root);  gifWriter.setOutput(outputStream);  gifWriter.prepareWriteSequence(null);}  }
class C{  @Override public boolean contains(Object key){  if (key == null)   return _map._nullValue != null;  K1[] keys=_map._keys;  for (int i=keys.length - 1; i >= 0; i--) {    K1 testKey=keys[i];    if (key.equals(testKey))     return true;  }  return false;}  }
class C{  public boolean saveLine(){  log.info("MBankStatementLoader.importLine");  boolean result=false;  X_I_BankStatement imp=new X_I_BankStatement(getCtx(),0,get_TrxName());  if (m_loader == null) {    errorMessage="LoadError";    return result;  }  log.config("MBankStatementLoader.importLine Bank Account=" + m_loader.getBankAccountNo());  imp.setBankAccountNo(m_loader.getBankAccountNo());  log.config("MBankStatementLoader.importLine Routing No=" + m_loader.getRoutingNo());  imp.setRoutingNo(m_loader.getRoutingNo());  log.config("MBankStatementLoader.importLine EFT Statement Reference No=" + m_loader.getStatementReference());  imp.setEftStatementReference(m_loader.getStatementReference());  log.config("MBankStatementLoader.importLine EFT Statement Date=" + m_loader.getStatementDate());  imp.setEftStatementDate(m_loader.getStatementDate());  log.config("MBankStatementLoader.importLine Statement Date=" + m_loader.getStatementDate());  imp.setStatementDate(m_loader.getStatementDate());  log.config("MBankStatementLoader.importLine EFT Transaction ID=" + m_loader.getTrxID());  imp.setEftTrxID(m_loader.getTrxID());  log.config("MBankStatementLoader.importLine Statement Line Date=" + m_loader.getStatementLineDate());  imp.setStatementLineDate(m_loader.getStatementLineDate());  imp.setStatementLineDate(m_loader.getStatementLineDate());  imp.setEftStatementLineDate(m_loader.getStatementLineDate());  log.config("MBankStatementLoader.importLine Valuta Date=" + m_loader.getValutaDate());  imp.setValutaDate(m_loader.getValutaDate());  imp.setEftValutaDate(m_loader.getValutaDate());  log.config("MBankStatementLoader.importLine Statement Amount=" + m_loader.getStmtAmt());  imp.setStmtAmt(m_loader.getStmtAmt());  imp.setEftAmt(m_loader.getStmtAmt());  log.config("MBankStatementLoader.importLine Transaction Amount=" + m_loader.getTrxAmt());  imp.setTrxAmt(m_loader.getTrxAmt());  log.config("MBankStatementLoader.importLine Interest Amount=" + m_loader.getInterestAmt());  imp.setInterestAmt(m_loader.getInterestAmt());  log.config("MBankStatementLoader.importLine Reference No=" + m_loader.getReference());  imp.setReferenceNo(m_loader.getReference());  imp.setEftReference(m_loader.getReference());  log.config("MBankStatementLoader.importLine Check No=" + m_loader.getCheckNo());  imp.setEftCheckNo(m_loader.getCheckNo());  log.config("MBankStatementLoader.importLine Memo=" + m_loader.getMemo());  imp.setMemo(m_loader.getMemo());  imp.setEftMemo(m_loader.getMemo());  log.config("MBankStatementLoader.importLine Payee Name=" + m_loader.getPayeeName());  imp.setEftPayee(m_loader.getPayeeName());  log.config("MBankStatementLoader.importLine Payee Account No=" + m_loader.getPayeeAccountNo());  imp.setEftPayeeAccount(m_loader.getPayeeAccountNo());  log.config("MBankStatementLoader.importLine EFT Transaction Type=" + m_loader.getTrxType());  imp.setEftTrxType(m_loader.getTrxType());  log.config("MBankStatementLoader.importLine Currency=" + m_loader.getCurrency());  imp.setEftCurrency(m_loader.getCurrency());  imp.setISO_Code(m_loader.getCurrency());  log.config("MBankStatementLoader.importLine Charge Name=" + m_loader.getChargeName());  imp.setChargeName(m_loader.getChargeName());  log.config("MBankStatementLoader.importLine Charge Amount=" + m_loader.getChargeAmt());  imp.setChargeAmt(m_loader.getChargeAmt());  imp.setProcessed(false);  imp.setI_IsImported(false);  result=imp.save();  if (result) {    loadCount++;  } else {    errorMessage="LoadError";  }  imp=null;  return result;}  }
class C{  public void appendToSubVer(String name,String version,@Nullable String comments){  checkSubVerComponent(name);  checkSubVerComponent(version);  if (comments != null) {    checkSubVerComponent(comments);    subVer=subVer.concat(String.format("%s:%s(%s)/",name,version,comments));  } else {    subVer=subVer.concat(String.format("%s:%s/",name,version));  }}  }
class C{  protected FunctionNode binary(final SimpleNode node,final URI functionURI) throws VisitorException {  return new FunctionNode(functionURI,null,new ValueExpressionNode[]{left(node),right(node)});}  }
class C{  private void doTargetRefresh(SIPMessage sipMessage){  ContactList contactList=sipMessage.getContactHeaders();  if (contactList != null) {    Contact contact=(Contact)contactList.getFirst();    this.setRemoteTarget(contact);  }}  }
class C{  private void mergeSymLabels(){  for (Iterator nodeit=graph.getNodes().iterator(); nodeit.hasNext(); ) {    Node node=(Node)nodeit.next();    ((DirectedEdgeStar)node.getEdges()).mergeSymLabels();  }}  }
class C{  public void onClick(View v){  if (v.getId() == R.id.btn_speak) {    startVoiceRecognitionActivity();  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:45.162 -0500",hash_original_method="622A6BD0A40561F44F0949C5CF1F5483",hash_generated_method="622A6BD0A40561F44F0949C5CF1F5483") void tearDown(){  if (getErrorID() == OK) {    WebViewWorker.CacheSaveData data=new WebViewWorker.CacheSaveData();    data.mListener=this;    data.mUrl=mUrl;    data.mPostId=mPostIdentifier;    WebViewWorker.getHandler().obtainMessage(WebViewWorker.MSG_SAVE_CACHE,data).sendToTarget();  } else {    WebViewWorker.getHandler().obtainMessage(WebViewWorker.MSG_REMOVE_CACHE,this).sendToTarget();  }  if (mNativeLoader != 0) {    if (!mSetNativeResponse) {      setNativeResponse();    }    nativeFinished();    clearNativeLoader();  }}  }
class C{  public static File newFile(File root,String fileName) throws ArgumentException {  try {    String subpath=fileName.substring(0,2) + File.separator + fileName.substring(2,4)+ File.separator+ fileName;    return new File(root,subpath);  } catch (  Exception r) {    throw new ArgumentException("Invalid file name:" + fileName);  }}  }
class C{  public static Border createEtchedBorder(int type){switch (type) {case EtchedBorder.RAISED:    if (sharedRaisedEtchedBorder == null) {      sharedRaisedEtchedBorder=new EtchedBorder(EtchedBorder.RAISED);    }  return sharedRaisedEtchedBorder;case EtchedBorder.LOWERED:return sharedEtchedBorder;default :throw new IllegalArgumentException("type must be one of EtchedBorder.RAISED or EtchedBorder.LOWERED");}}  }
class C{  public void cleanHistory(Collection<Peer> availablePeers){  log.debug("cleaning history");  List<String> newPeerAddresses=new ArrayList<>();  if (availablePeers != null) {    for (    Peer peer : availablePeers) {      if (peer != null && peer.address != null) {        newPeerAddresses.add(peer.address);      }    }  }  List<ExchangeHistoryItem> updatedHistory=new ArrayList<>();  for (  ExchangeHistoryItem peer : history) {    if (newPeerAddresses.contains(peer.address)) {      updatedHistory.add(peer);    }  }  history=updatedHistory;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public IgniteSpiVersionCheckException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public WritableRaster createCompatibleWritableRaster(int w,int h){  int dataSize=w * h * numComponents;  WritableRaster raster=null;switch (transferType) {case DataBuffer.TYPE_BYTE:case DataBuffer.TYPE_USHORT:    raster=Raster.createInterleavedRaster(transferType,w,h,numComponents,null);  break;default :SampleModel sm=createCompatibleSampleModel(w,h);DataBuffer db=sm.createDataBuffer();raster=Raster.createWritableRaster(sm,db,null);}return raster;}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public boolean isSomeoneSelected(){  return selected != null;}  }
class C{  @Override @ResponseBody public ResponseEntity<InputStream> downloadArtifact(@PathVariable("softwareModuleId") final Long softwareModuleId,@PathVariable("artifactId") final Long artifactId){  final SoftwareModule module=findSoftwareModuleWithExceptionIfNotFound(softwareModuleId,artifactId);  if (null == module || !module.getArtifact(artifactId).isPresent()) {    return new ResponseEntity<>(HttpStatus.NOT_FOUND);  }  final Artifact artifact=module.getArtifact(artifactId).get();  final DbArtifact file=artifactManagement.loadArtifactBinary(artifact);  final HttpServletRequest request=requestResponseContextHolder.getHttpServletRequest();  final String ifMatch=request.getHeader("If-Match");  if (ifMatch != null && !RestResourceConversionHelper.matchesHttpHeader(ifMatch,artifact.getSha1Hash())) {    return new ResponseEntity<>(HttpStatus.PRECONDITION_FAILED);  }  return RestResourceConversionHelper.writeFileResponse(artifact,requestResponseContextHolder.getHttpServletResponse(),request,file);}  }
class C{  @Ignore @Test public void javabeanTester(){  JavaBeanTester.builder(IpInfo.class).loadData().test();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.438 -0400",hash_original_method="EEFDACC2C301B42650B1064C3D4059CC",hash_generated_method="E96997EF41B5EE4DD2D315BC127B1E7A") @Override public void close() throws IOException {  eof=false;  position=0;  mark=-1;}  }
class C{  @Kroll.method public boolean requestPermission(String requestedPermission,@Kroll.argument(optional=true) KrollFunction permissionCallback,@Kroll.argument(optional=true) Integer requestCode){  Log.d(LCAT,"Requesting permission: " + requestedPermission);  if (!isValidPermissionString(requestedPermission)) {    Log.e(LCAT,"Requested permission is not supported :" + requestedPermission);    return false;  }  return handleRequest(new String[]{requestedPermission},requestCode,permissionCallback);}  }
class C{  private void jbInit() throws Exception {  this.setTitle(res.getString("CConnectionDialog"));  mainPanel.setLayout(mainLayout);  southPanel.setLayout(southLayout);  southLayout.setAlignment(FlowLayout.RIGHT);  centerPanel.setLayout(centerLayout);  nameLabel.setText(res.getString("Name"));  nameField.setColumns(30);  nameField.setReadWrite(false);  hostLabel.setText(res.getString("DBHost"));  hostField.setColumns(30);  portLabel.setText(res.getString("DBPort"));  dbPortField.setColumns(10);  sidLabel.setText(res.getString("DBName"));  cbFirewall.setToolTipText("");  cbFirewall.setText(res.getString("ViaFirewall"));  fwHostLabel.setText(res.getString("FWHost"));  fwHostField.setColumns(30);  fwPortLabel.setText(res.getString("FWPort"));  bTestDB.setText(res.getString("TestConnection"));  bTestDB.setHorizontalAlignment(JLabel.LEFT);  dbTypeLabel.setText(res.getString("Type"));  sidField.setColumns(30);  fwPortField.setColumns(10);  cbBequeath.setText(res.getString("BequeathConnection"));  appsHostLabel.setText(res.getString("AppsHost"));  appsHostField.setColumns(30);  appsPortLabel.setText(res.getString("AppsPort"));  appsPortField.setColumns(10);  bTestApps.setText(res.getString("TestApps"));  bTestApps.setHorizontalAlignment(JLabel.LEFT);  dbUidLabel.setText(res.getString("DBUidPwd"));  dbUidField.setColumns(10);  this.getContentPane().add(mainPanel,BorderLayout.CENTER);  mainPanel.add(centerPanel,BorderLayout.CENTER);  mainPanel.add(southPanel,BorderLayout.SOUTH);  southPanel.add(bCancel,null);  southPanel.add(bOK,null);  centerPanel.add(nameLabel,new GridBagConstraints(0,0,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(12,12,5,5),0,0));  centerPanel.add(nameField,new GridBagConstraints(1,0,2,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(12,0,5,12),0,0));  centerPanel.add(appsHostLabel,new GridBagConstraints(0,1,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,12,5,5),0,0));  centerPanel.add(appsHostField,new GridBagConstraints(1,1,2,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,0,5,12),0,0));  centerPanel.add(appsPortLabel,new GridBagConstraints(0,2,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,12,5,5),0,0));  centerPanel.add(appsPortField,new GridBagConstraints(1,2,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,0,0,0),0,0));  centerPanel.add(bTestApps,new GridBagConstraints(1,3,1,1,0.0,0.0,GridBagConstraints.SOUTHWEST,GridBagConstraints.HORIZONTAL,new Insets(5,0,12,0),0,0));  centerPanel.add(dbTypeLabel,new GridBagConstraints(0,4,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,12,5,5),0,0));  centerPanel.add(dbTypeField,new GridBagConstraints(1,4,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,0,5,0),0,0));  centerPanel.add(cbBequeath,new GridBagConstraints(2,4,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,5,5,12),0,0));  centerPanel.add(hostLabel,new GridBagConstraints(0,5,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,12,5,5),0,0));  centerPanel.add(hostField,new GridBagConstraints(1,5,2,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,0,5,12),0,0));  centerPanel.add(portLabel,new GridBagConstraints(0,6,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,12,5,5),0,0));  centerPanel.add(dbPortField,new GridBagConstraints(1,6,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,0,5,0),0,0));  centerPanel.add(sidLabel,new GridBagConstraints(0,7,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,12,5,5),0,0));  centerPanel.add(sidField,new GridBagConstraints(1,7,2,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,0,5,12),0,0));  centerPanel.add(dbUidLabel,new GridBagConstraints(0,8,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,12,5,5),0,0));  centerPanel.add(dbUidField,new GridBagConstraints(1,8,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,0,5,0),0,0));  centerPanel.add(dbPwdField,new GridBagConstraints(2,8,1,1,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,5,5,12),0,0));  centerPanel.add(cbFirewall,new GridBagConstraints(1,9,2,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,0,12),0,0));  centerPanel.add(fwHostLabel,new GridBagConstraints(0,10,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,12,5,5),0,0));  centerPanel.add(fwHostField,new GridBagConstraints(1,10,2,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,0,5,12),0,0));  centerPanel.add(fwPortLabel,new GridBagConstraints(0,11,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,12,5,5),0,0));  centerPanel.add(fwPortField,new GridBagConstraints(1,11,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,0,5,0),0,0));  centerPanel.add(bTestDB,new GridBagConstraints(1,12,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,0,12,0),0,0));  nameField.addActionListener(this);  appsHostField.addActionListener(this);  appsPortField.addActionListener(this);  bTestApps.addActionListener(this);  dbTypeField.addActionListener(this);  hostField.addActionListener(this);  dbPortField.addActionListener(this);  sidField.addActionListener(this);  cbBequeath.addActionListener(this);  cbFirewall.addActionListener(this);  fwHostField.addActionListener(this);  fwPortField.addActionListener(this);  bTestDB.addActionListener(this);  bOK.addActionListener(this);  bCancel.addActionListener(this);  if (!Ini.isClient()) {    appsHostLabel.setVisible(false);    appsHostField.setVisible(false);    appsPortLabel.setVisible(false);    appsPortField.setVisible(false);    bTestApps.setVisible(false);  } else   cbBequeath.setVisible(false);}  }
class C{  public static JTable autoResizeColWidth(JTable table,AbstractTableModel model){  table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);  table.setModel(model);  int margin=5;  for (int i=0; i < table.getColumnCount(); i++) {    int vColIndex=i;    DefaultTableColumnModel colModel=(DefaultTableColumnModel)table.getColumnModel();    TableColumn col=colModel.getColumn(vColIndex);    int width;    TableCellRenderer renderer=col.getHeaderRenderer();    if (renderer == null) {      renderer=table.getTableHeader().getDefaultRenderer();    }    Component comp=renderer.getTableCellRendererComponent(table,col.getHeaderValue(),false,false,0,0);    width=comp.getPreferredSize().width;    for (int r=0; r < table.getRowCount(); r++) {      renderer=table.getCellRenderer(r,vColIndex);      comp=renderer.getTableCellRendererComponent(table,table.getValueAt(r,vColIndex),false,false,r,vColIndex);      width=Math.max(width,comp.getPreferredSize().width);    }    width+=2 * margin;    col.setPreferredWidth(width);  }  ((DefaultTableCellRenderer)table.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(SwingConstants.LEFT);  return table;}  }
class C{  public boolean isOne(){  int i;  for (i=1; i < blocks; i++) {    if (value[i] != 0) {      return false;    }  }  if (value[0] != 0x01) {    return false;  }  return true;}  }
class C{  public boolean acquireWorkflowStepLocks(String stepId,List<String> lockKeys,long time){  boolean gotLocks=false;  try {    Workflow workflow=null;    try {      workflow=loadWorkflowFromStepId(stepId);    } catch (    WorkflowException ex) {      _log.warn("Workflow not found for stepId: " + stepId);    }    if (workflow == null) {      return false;    }    Long stepStartTimeSeconds=System.currentTimeMillis();    StepStatus stepStatus=workflow.getStepStatusMap().get(stepId);    if (stepStatus != null && stepStatus.startTime != null) {      stepStartTimeSeconds=stepStatus.startTime.getTime() / MILLISECONDS_IN_SECOND;    }    List<String> locksToAcquire=new ArrayList<String>(lockKeys);    locksToAcquire.removeAll(_ownerLocker.getLocksForOwner(workflow.getWorkflowURI().toString()));    locksToAcquire.removeAll(_ownerLocker.getLocksForOwner(stepId));    if (locksToAcquire.isEmpty()) {      return true;    }    gotLocks=_ownerLocker.acquireLocks(locksToAcquire,stepId,stepStartTimeSeconds,time);  } catch (  LockRetryException ex) {    _log.info(String.format("Lock retry exception key: %s remaining time %d",ex.getLockIdentifier(),ex.getRemainingWaitTimeSeconds()));    WorkflowStepCompleter.stepQueued(stepId);    throw ex;  }catch (  Exception ex) {    _log.info("Exception acquiring WorkflowStep locks: ",ex);  }  return gotLocks;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public static final void showErrorDialog(Context context,int resourceId){  showToast(context.getApplicationContext(),resourceId);}  }
class C{  public TextPath createTextPath(BridgeContext ctx,Element textPathElement){  String uri=XLinkSupport.getXLinkHref(textPathElement);  Element pathElement=ctx.getReferencedElement(textPathElement,uri);  if ((pathElement == null) || (!SVG_NAMESPACE_URI.equals(pathElement.getNamespaceURI())) || (!pathElement.getLocalName().equals(SVG_PATH_TAG))) {    throw new BridgeException(ctx,textPathElement,ERR_URI_BAD_TARGET,new Object[]{uri});  }  String s=pathElement.getAttributeNS(null,SVG_D_ATTRIBUTE);  Shape pathShape=null;  if (s.length() != 0) {    AWTPathProducer app=new AWTPathProducer();    app.setWindingRule(CSSUtilities.convertFillRule(pathElement));    try {      PathParser pathParser=new PathParser();      pathParser.setPathHandler(app);      pathParser.parse(s);    } catch (    ParseException pEx) {      throw new BridgeException(ctx,pathElement,pEx,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_D_ATTRIBUTE});    } finally {      pathShape=app.getShape();    }  } else {    throw new BridgeException(ctx,pathElement,ERR_ATTRIBUTE_MISSING,new Object[]{SVG_D_ATTRIBUTE});  }  s=pathElement.getAttributeNS(null,SVG_TRANSFORM_ATTRIBUTE);  if (s.length() != 0) {    AffineTransform tr=SVGUtilities.convertTransform(pathElement,SVG_TRANSFORM_ATTRIBUTE,s,ctx);    pathShape=tr.createTransformedShape(pathShape);  }  TextPath textPath=new TextPath(new GeneralPath(pathShape));  s=textPathElement.getAttributeNS(null,SVG_START_OFFSET_ATTRIBUTE);  if (s.length() > 0) {    float startOffset=0;    int percentIndex=s.indexOf('%');    if (percentIndex != -1) {      float pathLength=textPath.lengthOfPath();      String percentString=s.substring(0,percentIndex);      float startOffsetPercent=0;      try {        startOffsetPercent=SVGUtilities.convertSVGNumber(percentString);      } catch (      NumberFormatException e) {        startOffsetPercent=-1;      }      if (startOffsetPercent < 0) {        throw new BridgeException(ctx,textPathElement,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_START_OFFSET_ATTRIBUTE,s});      }      startOffset=(float)(startOffsetPercent * pathLength / 100.0);    } else {      UnitProcessor.Context uctx=UnitProcessor.createContext(ctx,textPathElement);      startOffset=UnitProcessor.svgOtherLengthToUserSpace(s,SVG_START_OFFSET_ATTRIBUTE,uctx);    }    textPath.setStartOffset(startOffset);  }  return textPath;}  }
class C{  private void replace(String tag,String value){  String modified=content.replace(tag_(tag),val_(value));  Preconditions.checkState(!modified.equals(content),"No effect: %s to %s",tag,value);  this.content=modified;}  }
class C{  @DSSpec(DSCat.DATABASE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 21:46:52.561 -0400",hash_original_method="751D905881D500785FB6386F5B08F863",hash_generated_method="5D3AE3B6F9B4A4BADCE160BAD2076E7C") @Override public Cursor runQueryOnBackgroundThread(CharSequence constraint){  if (DBG)   Log.d(LOG_TAG,"runQueryOnBackgroundThread(" + constraint + ")");  String query=(constraint == null) ? "" : constraint.toString();  Cursor cursor=null;  if (mSearchView.getVisibility() != View.VISIBLE || mSearchView.getWindowVisibility() != View.VISIBLE) {    return null;  }  try {    cursor=getSearchManagerSuggestions(mSearchable,query,QUERY_LIMIT);    if (cursor != null) {      cursor.getCount();      return cursor;    }  } catch (  RuntimeException e) {    Log.w(LOG_TAG,"Search suggestions query threw an exception.",e);  }  return null;}  }
class C{  public ScenarioResult(Classifier<?> supplier,Classifier<?> client){  this.supplier=Objects.requireNonNull(supplier);  this.client=Objects.requireNonNull(client);  this.factory=null;  this.implementer=null;}  }
class C{  public static int ENOSR(){  return Errno.ENOSR.intValue();}  }
class C{  public Context(Context ctx,MemberDefinition field){  this.field=field;  if (ctx == null) {    this.frameNumber=1;    this.scopeNumber=2;    this.varNumber=0;  } else {    this.prev=ctx;    this.locals=ctx.locals;    this.classes=ctx.classes;    if (field != null && (field.isVariable() || field.isInitializer())) {      this.frameNumber=ctx.frameNumber;      this.scopeNumber=ctx.scopeNumber + 1;    } else {      this.frameNumber=ctx.scopeNumber + 1;      this.scopeNumber=this.frameNumber + 1;    }    this.varNumber=ctx.varNumber;  }}  }
class C{  public long length(){  return numBits;}  }
class C{  public void saveAsPNG(String fileName,int width,int height) throws IOException {  ChartUtilities.saveChartAsPNG(new File(fileName),m_chart,width,height);}  }
class C{  @Override public int numEvals(){  return m_kernelEvals;}  }
class C{  public void zoomReset(){  if (mFitZoom != null) {    mFitZoom.apply();    mZoomIn.notifyZoomResetListeners();    repaint();  }}  }
class C{  public final void inject(Object object){  graph.inject(object);}  }
class C{  public void defaultInit(){  addDataSources(INITIAL_DATA_SOURCES);}  }
class C{  public boolean hasSuperPickAxe(){  return superPickaxe;}  }
class C{  private void siftDown(int k,E x){  if (comparator != null)   siftDownUsingComparator(k,x); else   siftDownComparable(k,x);}  }
class C{  @Override public void destroyRegion(Object aCallbackArgument) throws CacheWriterException, TimeoutException {  RegionEventImpl event=new RegionEventImpl(this,Operation.REGION_DESTROY,aCallbackArgument,true,getMyId());  basicDestroyRegion(event,true);}  }
class C{  public static String amountInWords(final BigDecimal amount){  return NumberToWord.amountInWords(amount.doubleValue());}  }
class C{  protected void registerSpinnerAttributes(){  addAttributeProcessor(new SpinnerArrayLmlAttribute(),"items");  addAttributeProcessor(new SpinnerDisabledLmlAttribute(),"inputDisabled");  addAttributeProcessor(new SpinnerNameLmlAttribute(),"selectorName","text");  addAttributeProcessor(new SpinnerPrecisionLmlAttribute(),"precision","scale");  addAttributeProcessor(new SpinnerProgrammaticChangeEventsLmlAttribute(),"programmaticChangeEvents");  addAttributeProcessor(new SpinnerSelectedLmlAttribute(),"selected");  addAttributeProcessor(new SpinnerTextFieldEventPolicyLmlAttribute(),"textFieldEventPolicy");  addAttributeProcessor(new SpinnerWrapLmlAttribute(),"wrap");}  }
class C{  @Override protected int calcDamagePerHit(){  float toReturn=2;  if ((ae instanceof BattleArmor) && (weapon.getLocation() == BattleArmor.LOC_SQUAD) && !(weapon.isSquadSupportWeapon())&& (ae.getSwarmTargetId() == target.getTargetId())) {    toReturn*=((BattleArmor)ae).getShootingStrength();  }  if ((target instanceof Infantry) && !(target instanceof BattleArmor)) {    toReturn*=wtype.getRackSize();    if (bDirect) {      toReturn+=toHit.getMoS() / 3;    }    if (bGlancing) {      toReturn=(int)Math.floor(toReturn / 2.0);    }  }  if (((target instanceof Entity) && !(target instanceof Infantry)) || (target instanceof BattleArmor)) {    toReturn=0;  }  return (int)Math.ceil(toReturn);}  }
class C{  private void tempRemoveFromQueue(){  if (inQueue()) {    previousInQueue.nextInQueue=nextInQueue;    nextInQueue.previousInQueue=previousInQueue;  }}  }
class C{  NormalMethod(TypeReference dc,MemberReference mr,short mo,TypeReference[] et,short lw,short ow,byte[] bc,ExceptionHandlerMap eMap,int[] lm,LocalVariableTable lvt,int[] constantPool,Atom sig,RVMAnnotation[] annotations,RVMAnnotation[][] parameterAnnotations,Object ad){  super(dc,mr,mo,et,sig,annotations,parameterAnnotations,ad);  localWords=lw;  operandWords=ow;  bytecodes=bc;  exceptionHandlerMap=eMap;  lineNumberMap=lm;  localVariableTables.put(this,lvt);  computeSummary(constantPool);}  }
class C{  public synchronized void connect(BluetoothDevice device,boolean secure){  if (D)   Log.d(TAG,"connect to: " + device);  if (mState == STATE_CONNECTING) {    if (mConnectThread != null) {      mConnectThread.cancel();      mConnectThread=null;    }  }  if (mConnectedThread != null) {    mConnectedThread.cancel();    mConnectedThread=null;  }  mConnectThread=new ConnectThread(device,secure);  mConnectThread.start();  setState(STATE_CONNECTING);}  }
class C{  private void required(String attributeName,Resource attributValue,boolean exists) throws ApplicationException {  if (attributValue == null)   throw new ApplicationException("invalid attribute constellation for the tag zip","attribute [" + attributeName + "] is required, if action is ["+ action+ "]");  if (exists && !attributValue.exists())   throw new ApplicationException(attributeName + " resource [" + attributValue+ "] doesn't exist"); else   if (exists && !attributValue.canRead())   throw new ApplicationException("no access to " + attributeName + " resource ["+ attributValue+ "]");}  }
class C{  @Override public StreamImpl openReadImpl() throws IOException {  ClassLoader loader=Thread.currentThread().getContextClassLoader();  if (loader == null) {    loader=ClassLoader.getSystemClassLoader();  }  InputStream is=loader.getResourceAsStream(getTrimPath());  if (is == null) {    throw new FileNotFoundException(getURL());  }  return new VfsStreamOld(is,null);}  }
class C{  public static boolean isOracleJVM(){  return isJvmVendor(ORACLE_JVM_VENDOR_NAME);}  }
class C{  public char[] toCharArray(){synchronized (lock) {    char[] result=new char[count];    System.arraycopy(buf,0,result,0,count);    return result;  }}  }
class C{  public void reset(){  buffer.reset();}  }
class C{  public static void log(Throwable error,String message,Object... args){  if (loggingEnabled) {    Log.d(TAG,args.length == 0 ? message : String.format(message,args),error);  }}  }
class C{  private boolean containsKey(String key){  return properties.containsKey(key);}  }
class C{  private void validatePatch(State current,State patch){  ValidationUtils.validatePatch(current,patch);  ValidationUtils.validateTaskStageProgression(current.taskState,patch.taskState);  if (null != current.taskState.subStage && null != patch.taskState.subStage) {    checkState(patch.taskState.subStage.ordinal() >= current.taskState.subStage.ordinal());  }}  }
class C{  private static int scanBackward(IDocument document,int position,String partitioning,int bound,char[] chars){  Assert.isTrue(bound >= -1);  Assert.isTrue(position < document.getLength());  Arrays.sort(chars);  try {    while (position > bound) {      if (Arrays.binarySearch(chars,document.getChar(position)) >= 0 && isDefaultPartition(document,position,partitioning))       return position;      position--;    }  } catch (  BadLocationException e) {  }  return -1;}  }
class C{  TransferObject(AccessStructure struct,File file,int filesize,long timeout){  this.struct=struct;  this.file=file;  this.filesize=filesize;  remainingBytes=filesize;  setTimeout(timeout);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public final boolean a1Castle(){  return (castleMask & (1 << A1_CASTLE)) != 0;}  }
class C{  @Override public MultivariateTable toDiscrete(){  if (discreteCache == null) {    MultivariateTable.Builder probs=new MultivariateTable.Builder();    double incr=1.0 / samples.size();    for (    Assignment sample : samples) {      Assignment trimmed=sample.getTrimmed(variables);      probs.incrementRow(trimmed,incr);    }    discreteCache=probs.build();  }  return discreteCache;}  }
class C{  protected boolean isEqualKey(Object key1,Object key2){  return (key1 == key2 || key1.equals(key2));}  }
class C{  public SimpleSelectionFilterGroup(SimpleSelectionFilter... filters){  this(FilterType.AND,filters);}  }
class C{  @Override public boolean contains(Point2D.Double p){  if (get(TRANSFORM) != null) {    try {      p=(Point2D.Double)get(TRANSFORM).inverseTransform(p,new Point2D.Double());    } catch (    NoninvertibleTransformException ex) {      ex.printStackTrace();    }  }  return getTextShape().getBounds2D().contains(p);}  }
class C{  private void createVMs(Host host){  for (int i=0; i < 4; i++) {    vm[i]=host.getVM(i);  }}  }
class C{  private void fetchDrawableFromAttr(TypedArray ta){  if (mConf == null) {    return;  }  mConf.setOffDrawable(fetchDrawable(ta,R.styleable.SwitchButton_offDrawable,R.styleable.SwitchButton_offColor,Configuration.Default.DEFAULT_OFF_COLOR));  mConf.setOnDrawable(fetchDrawable(ta,R.styleable.SwitchButton_onDrawable,R.styleable.SwitchButton_onColor,Configuration.Default.DEFAULT_ON_COLOR));  mConf.setThumbDrawable(fetchThumbDrawable(ta));}  }
class C{  public static final double scalarProduct(final double[] v1,final double[] v2){  assert (v1.length == v2.length) : ERR_VEC_DIMENSIONS;  double scalarProduct=0.0;  for (int row=0; row < v1.length; row++) {    scalarProduct+=v1[row] * v2[row];  }  return scalarProduct;}  }
class C{  protected String extractImportUrl(final Matcher matcher){  return matcher.group(INDEX_URL);}  }
class C{  public static String asSystemPropertySetting(OptionValue<?> value){  return GRAAL_OPTION_PROPERTY_PREFIX + value.getName() + "="+ value.getValue();}  }
class C{  protected void deleteDirectory(File webAppFile){  if (webAppFile.isDirectory()) {    File[] children=webAppFile.listFiles();    for (    File element : children) {      deleteDirectory(element);    }    webAppFile.delete();  } else {    webAppFile.delete();  }}  }
class C{  public boolean equals(lalr_item other){  if (other == null)   return false;  return super.equals(other);}  }
class C{  public void testExtFunc(){  TransformerFactory factory=TransformerFactory.newInstance();  try {    transform(factory);    System.out.println("testExtFunc: OK");  } catch (  TransformerConfigurationException e) {    fail(e.getMessage());  }catch (  TransformerException ex) {    fail(ex.getMessage());  }}  }
class C{  public ChannelDeleteHandler(ImplDiscordAPI api){  super(api,true,"CHANNEL_DELETE");}  }
class C{  public void testActiveAvailabilityChange() throws Throwable {  testAvailabilityChange(Member.Type.ACTIVE);}  }
class C{  public ServiceOperationException(String message){  super(message);}  }
class C{  @Override public synchronized void clear(){  File[] files=mRootDirectory.listFiles();  if (files != null) {    for (    File file : files) {      file.delete();    }  }  mEntries.clear();  mTotalSize=0;  VolleyLog.d("Cache cleared.");}  }
class C{  public void writeString(String s,Encoding encoding) throws IOException {  if (encoding != null) {    byte[] buffer=encoding.encodeToCharset(s);    writeBuffer(buffer);  } else {    writeBuffer(s.getBytes());  }}  }
class C{  public boolean do_mhp(){  return soot.PhaseOptions.getBoolean(options,"do-mhp");}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static BufferedImage createCompatibleTranslucentImage(int width,int height){  return getGraphicsConfiguration().createCompatibleImage(width,height,Transparency.TRANSLUCENT);}  }
class C{  protected long checkRead(long offset,long length){  checkOffset(offset);  long position=offset + length;  if (position > size())   throw new BufferUnderflowException();  return position;}  }
class C{  public void invalidatePathBounds(TreePath path){  TreeStateNode node=getNodeForPath(path,true,false);  if (node != null) {    node.markSizeInvalid();    if (node.isVisible())     updateYLocationsFrom(node.getRow());  }}  }
class C{  @Override public void draw(Graphics2D g2,Rectangle2D area){  draw(g2,area,null);}  }
class C{  public static Object clone(final Object obj){  return clone(obj,new IdentityHashMap<Object,Object>(),new HashMap<Class<?>,ClassMetadata>());}  }
class C{  private static boolean isRecognizedFormat(int colorFormat){switch (colorFormat) {case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420Planar:case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420PackedPlanar:case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420SemiPlanar:case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420PackedSemiPlanar:case MediaCodecInfo.CodecCapabilities.COLOR_TI_FormatYUV420PackedSemiPlanar:    return true;default :  return false;}}  }
class C{  public BuilderForGossipSeedDiscoverer gossipSeeds(List<GossipSeed> gossipSeeds){  super.gossipSeeds=gossipSeeds;  return this;}  }
class C{  public ErrorInfoParser(String errorInfo){  super(errorInfo);}  }
class C{  public void test_allocCommitFreeCommit(){  Journal store=(Journal)getStore();  try {    RWStrategy bs=(RWStrategy)store.getBufferStrategy();    final long addr=bs.write(randomData(78));    store.commit();    bs.delete(addr);    assertTrue(bs.isCommitted(addr));    store.commit();    assertFalse(bs.isCommitted(addr));  }  finally {    store.destroy();  }}  }
class C{  public boolean isOpaque(){  Color back=getBackground();  Component p=getParent();  if (p != null) {    p=p.getParent();  }  JComponent jp=(JComponent)p;  boolean colorMatch=(back != null) && (p != null) && back.equals(p.getBackground())&& jp.isOpaque();  return !colorMatch && super.isOpaque();}  }
class C{  public NewHistogramAction(final Workspace workspace){  super("Histogram",workspace);  putValue(SMALL_ICON,ResourceManager.getImageIcon("BarChart.png"));  putValue(SHORT_DESCRIPTION,"New Histogram");}  }
class C{  protected String overrideClassname(String classname){  Enumeration<Class<?>> enm;  String result;  Class<?> currentCls;  result=classname;  enm=m_ClassnameOverride.keys();  while (enm.hasMoreElements()) {    currentCls=enm.nextElement();    if (currentCls.getName().equals(classname)) {      result=m_ClassnameOverride.get(currentCls);      break;    }  }  return result;}  }
class C{  public void println(){  out.println();}  }
class C{  public Builder put(String key,String value){  map.put(key,value);  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:50.496 -0500",hash_original_method="2445129A1CDA7F03AFDA7F9C777F984A",hash_generated_method="FF7DC1FEB70492C2E8AF52B85A93BCFA") @DSVerified @DSSafe(DSCat.IPC_CALLBACK) @Override public void onReceive(Context context,Intent intent){  String action=intent.getAction();  if (ACTION_PASSWORD_CHANGED.equals(action)) {    onPasswordChanged(context,intent);  } else   if (ACTION_PASSWORD_FAILED.equals(action)) {    onPasswordFailed(context,intent);  } else   if (ACTION_PASSWORD_SUCCEEDED.equals(action)) {    onPasswordSucceeded(context,intent);  } else   if (ACTION_DEVICE_ADMIN_ENABLED.equals(action)) {    onEnabled(context,intent);  } else   if (ACTION_DEVICE_ADMIN_DISABLE_REQUESTED.equals(action)) {    CharSequence res=onDisableRequested(context,intent);    if (res != null) {      Bundle extras=getResultExtras(true);      extras.putCharSequence(EXTRA_DISABLE_WARNING,res);    }  } else   if (ACTION_DEVICE_ADMIN_DISABLED.equals(action)) {    onDisabled(context,intent);  } else   if (ACTION_PASSWORD_EXPIRING.equals(action)) {    onPasswordExpiring(context,intent);  }}  }
class C{  private boolean isPositionVisible(final long position){  final int firstVisible=getFirstVisibleByte();  final int lastVisible=firstVisible + getMaximumVisibleBytes();  return (position >= (2 * firstVisible)) && (position <= (2 * lastVisible));}  }
class C{  public static boolean dumpVMNamespace(String namespace){  return RuntimeSingleton.dumpVMNamespace(namespace);}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  journalWriter.close();  journalWriter=null;}  }
class C{  @SuppressWarnings("unchecked") private void registerUse(Instruction s,String a){  if (VM.VerifyAssertions)   VM._assert(s.operator() != PHI);  if (heapTypes != null) {    if (!heapTypes.contains(a)) {      return;    }  }  HeapVariable<Object> H=findOrCreateHeapVariable(a);  HeapOperand<Object>[] Hprime=new HeapOperand[1];  Hprime[0]=new HeapOperand<Object>(H);  Hprime[0].setInstruction(s);  uses.put(s,Hprime);}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public static Key parse(final String str){  final Key r=new Key();  r.fromString(str);  return r;}  }
class C{  public static boolean isStop(String str){  if (str.compareTo(".") == 0) {    return true;  }  if (str.compareTo("?") == 0) {    return true;  }  if (str.compareTo("!") == 0) {    return true;  }  return false;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case STORE_NAME:  return isSetStoreName();case KEY:return isSetKey();}throw new IllegalStateException();}  }
class C{  protected void openVisibleInstances(){  try {    int returnVal=m_FileChooser.showOpenDialog(this);    if (returnVal == JFileChooser.APPROVE_OPTION) {      File sFile=m_FileChooser.getSelectedFile();      if (!sFile.getName().toLowerCase().endsWith(Instances.FILE_EXTENSION)) {        sFile=new File(sFile.getParent(),sFile.getName() + Instances.FILE_EXTENSION);      }      File selected=sFile;      Instances insts=new Instances(new BufferedReader(new FileReader(selected)));      openVisibleInstances(insts);    }  } catch (  Exception ex) {    ex.printStackTrace();    m_plot.m_plot2D.removeAllPlots();    JOptionPane.showMessageDialog(this,ex.getMessage(),"Error loading file...",JOptionPane.ERROR_MESSAGE);  }}  }
class C{  protected Document createConfigDoc(AVList params){  AVList configParams=params.copy();  if (configParams.getValue(AVKey.DISPLAY_NAME) == null)   configParams.setValue(AVKey.DISPLAY_NAME,params.getValue(AVKey.DATASET_NAME));  if (configParams.getValue(AVKey.SERVICE_NAME) == null)   configParams.setValue(AVKey.SERVICE_NAME,AVKey.SERVICE_NAME_OFFLINE);  configParams.setValue(AVKey.NETWORK_RETRIEVAL_ENABLED,Boolean.FALSE);  configParams.setValue(AVKey.TEXTURE_FORMAT,DEFAULT_TEXTURE_FORMAT);  configParams.setValue(AVKey.USE_MIP_MAPS,Boolean.TRUE);  configParams.setValue(AVKey.USE_TRANSPARENT_TEXTURES,Boolean.TRUE);  return BasicTiledImageLayer.createTiledImageLayerConfigDocument(configParams);}  }
class C{  private static boolean ensureMappers(UUID nodeId,HadoopInputSplit... expSplits){  Collection<HadoopInputSplit> expSplitsCol=new ArrayList<>();  Collections.addAll(expSplitsCol,expSplits);  Collection<HadoopInputSplit> splits=PLAN.get().mappers(nodeId);  return F.eq(expSplitsCol,splits);}  }
class C{  public void close(){}  }
class C{  public void flag(WebMediumConfig config){  config.addCredentials(this);  POST(this.url + "/flag-" + config.getType(),config.toXML());}  }
class C{  public BasicBlock lastBasicBlockInCodeOrder(){  return cfg.lastInCodeOrder();}  }
class C{  public NBTTagCompound write(NBTTagCompound nbtTags){  nbtTags.setDouble("x",xPos);  nbtTags.setDouble("y",yPos);  nbtTags.setDouble("z",zPos);  return nbtTags;}  }
class C{  private static void report(String s){  if (DEBUG) {    VM.sysWriteln(s);  }}  }
class C{  public static void main(final String[] args) throws Exception {  final KeyFactory kf=KeyFactory.getInstance("RSA");  final Object[] sizeModExp=loadKey(RsaConsts.PATH_PUBLIC_KEY);  final int keySize=(Integer)sizeModExp[0];  final PublicKey pubKey=kf.generatePublic(new RSAPublicKeySpec((BigInteger)sizeModExp[1],(BigInteger)sizeModExp[2]));  final int blockSize=keySize / 8;  final Cipher cipher=Cipher.getInstance("RSA/ECB/PKCS1Padding");  cipher.init(Cipher.DECRYPT_MODE,pubKey);  System.out.println("Decrypting...");  final long start=System.nanoTime();  final ByteArrayOutputStream baOut=new ByteArrayOutputStream();  try (final InputStream in=Files.newInputStream(RsaConsts.PATH_DECRYPT_INPUT)){    final int headerSize=RsaConsts.REG_FILE_MAGIC.length + RsaConsts.REG_FILE_VERSION.length + RsaConsts.KEY_SELECTOR.length;    for (int i=0; i < headerSize; i++)     in.read();    final byte[] buffer=new byte[blockSize];    int bytesRead;    byte[] result;    while ((bytesRead=in.read(buffer)) > 0) {      result=cipher.doFinal(buffer,0,bytesRead);      if (result != null)       baOut.write(result);    }  }   try (final InputStream in=new InflaterInputStream(new ByteArrayInputStream(baOut.toByteArray()));final OutputStream out=Files.newOutputStream(RsaConsts.PATH_DECRYPT_OUTPUT)){    final byte[] buffer=new byte[blockSize];    int bytesRead;    while ((bytesRead=in.read(buffer)) > 0) {      out.write(buffer,0,bytesRead);    }  }   final long end=System.nanoTime();  System.out.println("Done. (" + ((end - start) / 1_000_000) + " ms)");}  }
class C{  private String checkLogin(Properties ctx,int AD_User_ID,int AD_Role_ID,int AD_Client_ID,int AD_Org_ID,int M_Warehouse_ID){  String loginInfo=null;  String sql="SELECT u.Name || '@' || c.Name || '.' || o.Name || ' [' || INITCAP(USER) || ']' AS Text " + "FROM AD_User u, AD_Client c, AD_Org o, AD_User_Roles ur " + "WHERE u.AD_User_ID=?"+ " AND c.AD_Client_ID=?"+ " AND o.AD_Org_ID=?"+ " AND ur.AD_Role_ID=?"+ " AND ur.AD_User_ID=u.AD_User_ID"+ " AND (o.AD_Client_ID = 0 OR o.AD_Client_ID=c.AD_Client_ID)"+ " AND c.AD_Client_ID IN (SELECT AD_Client_ID FROM AD_Role_OrgAccess ca WHERE ca.AD_Role_ID=ur.AD_Role_ID)"+ " AND o.AD_Org_ID IN (SELECT AD_Org_ID FROM AD_Role_OrgAccess ca WHERE ca.AD_Role_ID=ur.AD_Role_ID)";  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,AD_User_ID);    pstmt.setInt(2,AD_Client_ID);    pstmt.setInt(3,AD_Org_ID);    pstmt.setInt(4,AD_Role_ID);    ResultSet rs=pstmt.executeQuery();    if (rs.next())     loginInfo=rs.getString(1);    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }  if (loginInfo == null)   return null;  KeyNamePair org=new KeyNamePair(AD_Org_ID,String.valueOf(AD_Org_ID));  KeyNamePair wh=null;  if (M_Warehouse_ID > 0)   wh=new KeyNamePair(M_Warehouse_ID,String.valueOf(M_Warehouse_ID));  Timestamp date=null;  String printer=null;  Login login=new Login(ctx);  login.loadPreferences(org,wh,date,printer);  return loginInfo;}  }
class C{  public static String map2OID(String algName){  return alg2OidMap.get(algName.toUpperCase(Locale.US));}  }
class C{  public static double[] sum(double[][] v){  int m=v.length;  int n=v[0].length;  double[] X=new double[n];  double s;  for (int j=0; j < n; j++) {    s=0;    for (int i=0; i < m; i++)     s+=v[i][j];    X[j]=s;  }  return X;}  }
class C{  @UiThread public void cleanUp(){  internalFragment=null;}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  final RPAction summon=new RPAction();  summon.put("type","summonat");  summon.put("target",params[0]);  summon.put("slot",params[1]);  int amount;  String itemName;  if (params[2].matches("[0-9].*")) {    try {      amount=Integer.parseInt(params[2]);    } catch (    final NumberFormatException ex) {      ClientSingletonRepository.getUserInterface().addEventLine(new StandardEventLine("Invalid amount: " + params[2]));      return true;    }    itemName=remainder;  } else {    amount=1;    itemName=(params[2] + " " + remainder).trim();  }  final String singularName=Grammar.singular(itemName);  summon.put("amount",amount);  summon.put("item",singularName);  ClientSingletonRepository.getClientFramework().send(summon);  return true;}  }
class C{  public BlockTarget(String shape){  this();  this.shape=shape;}  }
class C{  public static void removeTransitRouteByMode(TransitSchedule schedule,Set<String> modesToRemove){  for (  TransitLine transitLine : schedule.getTransitLines().values()) {    for (    TransitRoute transitRoute : new HashSet<>(transitLine.getRoutes().values())) {      if (modesToRemove.contains(transitRoute.getTransportMode())) {        transitLine.removeRoute(transitRoute);      }    }  }}  }
class C{  private void handleEvent(SiteNode parent,SiteNode node,EventType eventType){switch (eventType) {case ADD:    publishEvent(SiteMapEventPublisher.SITE_NODE_ADDED_EVENT,node);  if (parent == getRoot()) {    publishEvent(SiteMapEventPublisher.SITE_ADDED_EVENT,node);  }break;case REMOVE:publishEvent(SiteMapEventPublisher.SITE_NODE_REMOVED_EVENT,node);if (parent == getRoot()) {publishEvent(SiteMapEventPublisher.SITE_REMOVED_EVENT,node);}}}  }
class C{  public int findLastVisibleItemPosition(){  final View child=findOneVisibleChild(layoutManager.getChildCount() - 1,-1,false,true);  return child == null ? NO_POSITION : recyclerView.getChildPosition(child);}  }
class C{  public boolean isAutoChangeRequest(){  Object oo=get_Value(COLUMNNAME_IsAutoChangeRequest);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void withNoFailover(){  compute.withNoFailover();  computeForPlatform.withNoFailover();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SGenPackage.FEATURE_CONFIGURATION__TYPE:    setType((FeatureType)null);  return;case SGenPackage.FEATURE_CONFIGURATION__PARAMETER_VALUES:getParameterValues().clear();return;}super.eUnset(featureID);}  }
class C{  public String toString(){  if (_data != null) {    return new String(_data,0,_count);  } else {    char[] data=new char[_count];    this.getChars(0,_count,data,0);    return new String(data,0,_count);  }}  }
class C{  @Override public void onMessagesDeleted(String chatId,List<String> msgIds) throws RemoteException {  mListener.onMessagesDeleted(chatId,new HashSet<>(msgIds));}  }
class C{  public void readConfig(String filename) throws FileNotFoundException {  if (filename == null || filename.equals(""))   return;  readConfig(new FileReader(filename));}  }
class C{  public DeserializeResult(final T object,final int size){  this.object=object;  this.size=size;}  }
class C{  public static void hshaServer(PacketStreamer.Processor<PacketStreamerHandler> processor){  try {    TNonblockingServerTransport serverTransport=new TNonblockingServerSocket(port);    THsHaServer.Args args=new THsHaServer.Args(serverTransport);    args.processor(processor);    args.transportFactory(new TFramedTransport.Factory());    args.protocolFactory(new TBinaryProtocol.Factory(true,true));    TServer server=new THsHaServer(args);    log.info("Starting the packetstreamer hsha server on port {} ...",port);    server.serve();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  private static void cleanup() throws Exception {  if (!run_cleanup) {    Config.INSTANCE.logger.debug("Cleanup unnecessary.");    return;  }  Config.INSTANCE.logger.debug("Running cleanup to clear old data and re-initialize to start processing.");  final String cleanup_sql=Config.INSTANCE.sql.getProperty("sql.jpgagent.cleanup");  final String register_agent_sql=Config.INSTANCE.sql.getProperty("sql.jpgagent.register_agent");  try (final Statement statement=Database.INSTANCE.getMainConnection().createStatement();final PreparedStatement register_agent_statement=Database.INSTANCE.getMainConnection().prepareStatement(register_agent_sql)){    statement.execute(cleanup_sql);    register_agent_statement.setInt(1,Database.INSTANCE.getPid());    register_agent_statement.setString(2,Config.INSTANCE.hostname);    register_agent_statement.setInt(3,Database.INSTANCE.getPid());    register_agent_statement.setString(4,Config.INSTANCE.hostname);    register_agent_statement.execute();  }   Config.INSTANCE.logger.debug("Cleanup of completed jobs started.");  final List<Integer> job_ids_to_remove=new ArrayList<>();  for (  Integer job_id : job_future_map.keySet()) {    if (job_future_map.get(job_id).isDone()) {      job_ids_to_remove.add(job_id);    }  }  for (  Integer job_id : job_ids_to_remove) {    job_future_map.remove(job_id);  }  job_ids_to_remove.clear();  run_cleanup=false;  Config.INSTANCE.logger.debug("Successfully cleaned up.");}  }
class C{  public SurfaceCircle(LatLon center,double radius,int intervals){  super(center,radius,radius,Angle.ZERO,intervals);}  }
class C{  public EntityQuery from(String entityName){  this.entityName=entityName;  this.dynamicViewEntity=null;  return this;}  }
class C{  public void reset(Reader in){  lexer.yyreset(in);  reset();}  }
class C{  public ReactWebView(ThemedReactContext reactContext){  super(reactContext);}  }
class C{  Cursor<String,HeaderCard> positionAfterIndex(IFitsHeader prefix,int col){  String colnum=String.valueOf(col);  this.iter.setKey(prefix.n(col).key());  if (this.iter.hasNext()) {    boolean toFar=false;    while (this.iter.hasNext()) {      String key=this.iter.next().getKey().trim();      if (key == null || key.length() <= colnum.length() || !key.substring(key.length() - colnum.length()).equals(colnum)) {        toFar=true;        break;      }    }    if (toFar) {      this.iter.prev();    }  }  return this.iter;}  }
class C{  public SamFilterParamsBuilder bedRegionsFile(File bedRegionsFile){  mBedRegionsFile=bedRegionsFile;  return this;}  }
class C{  private static Annotation extractAnnotation(AnnotationExpr expr){  String exprName=expr.toString().substring(1);  if (exprName.contains("+")) {    return null;  }  AnnotationDef def=new AnnotationDef(exprName);  def.setFieldTypes(Collections.<String,AnnotationFieldType>emptyMap());  return new Annotation(def,Collections.<String,Object>emptyMap());}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.PROPERTY_SETTER_DECLARATION__ANNOTATION_LIST:    setAnnotationList((PropertyAssignmentAnnotationList)null);  return;}super.eUnset(featureID);}  }
class C{  public void log(Level level,String msg,Object arg0,Object arg1,Object arg2){  innerLog(level,null,msg,arg0,arg1,arg2,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:23.776 -0400",hash_original_method="31A5CB4F3A5FC4630F0ACA0F4B056F4D",hash_generated_method="5D194EC9AA1BCD348BC2C1DED9C2CC1F") private void onCreatePairedDeviceResult(String address,int result){  address=address.toUpperCase();  mBluetoothService.onCreatePairedDeviceResult(address,result);}  }
class C{  public void readRegisters() throws DebugException {  try {    m_debugger.readRegisters();  } catch (  final DebugExceptionWrapper e) {    throw new DebugException(e);  }}  }
class C{  private void addGowallaPeopleAndSocialNetwork(){  try {    StAndrewsSocialNetworkParser parser=new StAndrewsSocialNetworkParser(GOWALLA_SOCIAL_NETWORK_FILE,'\t',0,this);    socialNetwork=parser.getNetwork();  } catch (  FileNotFoundException e) {    e.printStackTrace();    System.exit(1);  }  boolean outOfRange;  try {    System.err.println("Parsing trace file " + GOWALLA_MOBILITY_TRACE_FILE);    CSVFieldChunkReader chunkReader=new CSVFieldChunkReader(GOWALLA_MOBILITY_TRACE_FILE,GOWALLA_DELIMITER,QUOTE_CHAR,GOWALLA_LINES_TO_SKIP,GOWALLA_INDEX_PERSON_ID);    List<String[]> chunk;    int i=0;    while ((chunk=chunkReader.nextChunk()) != null) {      i++;      outOfRange=false;      if (i % 10000 == 0) {        System.err.print(i + ", ");      }      List<Location> locations=new ArrayList<Location>();      for (      String[] line : chunk) {        double lat=Double.parseDouble(line[GOWALLA_INDEX_LATITUDE]);        if (lat < GOWALLA_MIN_LATITUDE || lat > GOWALLA_MAX_LATITUDE) {          outOfRange=true;          break;        }        double lon=Double.parseDouble(line[GOWALLA_INDEX_LONGITUDE]);        if (lon < GOWALLA_MIN_LONGITUDE || lon > GOWALLA_MAX_LONGITUDE) {          outOfRange=true;          break;        }        String dateString=line[GOWALLA_INDEX_DATE];        Date date=dateStringToDate(dateString);        Location location=new Location(lat,lon,date);        locations.add(location);      }      int id;      if (chunk.size() > 0) {        id=Integer.parseInt(chunk.get(0)[GOWALLA_INDEX_PERSON_ID]);        Person person=getPersonWithID(id);        if (person == null) {          System.err.println("Person with id " + id + " exists in mobility but not in social network");          System.exit(1);        }        if (outOfRange) {          socialNetwork.removeNode(person);          continue;        }        MobilityTrace trace=new MobilityTrace(locations);        person.addMobilityTrace(trace);        System.err.println("trace has this many entries " + trace.locations.size());        person.schedule();      } else {        System.err.println("This shouldn't happen! ASDF");      }    }    System.err.println("The number of nodes in the network are " + socialNetwork.getAllNodes().numObjs);  } catch (  FileNotFoundException e) {    e.printStackTrace();    System.exit(1);  }}  }
class C{  public int computeRoots(TraceLocal trace){  Clock.stop();  Trace.trace(Item.ROOTS,"--- Computing roots, stack frame %s (%s) ---",method.getName(),base);  Clock.start();  int rootCount=0;  for (  Address root : getRootAddresses()) {    ObjectReference obj=root.loadObjectReference();    if (!obj.isNull()) {      Clock.stop();      Sanity.assertValid(obj);      if (Trace.isEnabled(Item.ROOTS)) {        Trace.trace(Item.ROOTS,"Tracing root %s->%s",root,ObjectModel.getString(obj));      }      Clock.start();      trace.reportDelayedRootEdge(root);      rootCount++;    }  }  Clock.stop();  Trace.trace(Item.REFERENCES,"Discovering references");  Clock.start();  for (  ReferenceValue reference : getReferences()) {    ReferenceProcessor.discover(reference);  }  return rootCount;}  }
class C{  public boolean hasVoice(){  return hasVoice;}  }
class C{  public boolean isSetError(){  return this.error != null;}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.SVAR;}  }
class C{  public void endVisit(AssertStatement node){}  }
class C{  public StrBuilder append(final boolean value){  if (value) {    ensureCapacity(size + 4);    buffer[size++]='t';    buffer[size++]='r';    buffer[size++]='u';    buffer[size++]='e';  } else {    ensureCapacity(size + 5);    buffer[size++]='f';    buffer[size++]='a';    buffer[size++]='l';    buffer[size++]='s';    buffer[size++]='e';  }  return this;}  }
class C{  @Override public boolean hasOverlappingRendering(){  return false;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean isAnyOrg(){  Object oo=get_Value(COLUMNNAME_AnyOrg);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void maybeProposePropertyWrite(IJavaProject project,IMethod method,String propertyName,int invocationOffset,int indentationUnits,boolean isStatic,List<ICompletionProposal> proposals,int numCharsFilled,int numCharsToOverwrite) throws JavaModelException {  String[] parameterNames=method.getParameterNames();  if (parameterNames.length == 1 && propertyName.length() > 0) {    String expression=createJsPropertyWriteExpression(propertyName,parameterNames[0],isStatic);    String code=createJsniBlock(project,expression,indentationUnits);    proposals.add(createProposal(method.getFlags(),code,invocationOffset,numCharsFilled,numCharsToOverwrite,expression));  }}  }
class C{  public static <E>String formatList(List<E> list){  return formatList(list,"&",",");}  }
class C{  protected static void resetType(QueryColumnImpl column){  column.type=Types.OTHER;}  }
class C{  public void readSubpopulation(final EvolutionState state,final LineNumberReader reader) throws IOException {  int numIndividuals=Code.readIntegerWithPreamble(NUM_INDIVIDUALS_PREAMBLE,state,reader);  if (numIndividuals < 1)   state.output.fatal("On reading subpopulation from text stream, the subpopulation size must be >= 1.  The provided value was: " + numIndividuals + ".");  if (numIndividuals != individuals.length) {    state.output.warnOnce("On reading subpopulation from text stream, the current subpopulation size didn't match the number of individuals in the file.  " + "The size of the subpopulation will be revised accordingly.  There were " + numIndividuals + " individuals in the file and "+ individuals.length+ " individuals expected for the subopulation.");    individuals=new Individual[numIndividuals];    for (int i=0; i < individuals.length; i++) {      int j=Code.readIntegerWithPreamble(INDIVIDUAL_INDEX_PREAMBLE,state,reader);      if (j != i)       state.output.warnOnce("On reading subpopulation from text stream, some individual indexes in the subpopulation did not match.  " + "The first was individual " + i + ", which is listed in the file as "+ j);      individuals[i]=species.newIndividual(state,reader);    }  } else   for (int i=0; i < individuals.length; i++) {    int j=Code.readIntegerWithPreamble(INDIVIDUAL_INDEX_PREAMBLE,state,reader);    if (j != i)     state.output.warnOnce("On reading subpopulation from text stream, some individual indexes in the subpopulation did not match.  " + "The first was individual " + i + ", which is listed in the file as "+ j);    if (individuals[i] != null)     individuals[i].readIndividual(state,reader); else {      state.output.warnOnce("On reading subpopulation from text stream, some of the preexisting subpopulation's slots were null.  " + "If you're starting an evolutionary run by reading an existing population from a file, this is expected -- ignore this message.");      individuals[i]=species.newIndividual(state,reader);    }  }}  }
class C{  public boolean removeNode(ServiceNode node){  try {    return nodes.remove(node);  } catch (  Exception e) {    return false;  }}  }
class C{  public String single(final CharSequence name,final String def) throws IOException {  final String value;  final Iterator<String> params=this.param(name).iterator();  if (params.hasNext()) {    value=params.next();  } else {    value=def;  }  return value;}  }
class C{  public BitSequence(String s){  BitSequence bs=new BitSequence();  for (  char b : s.toCharArray()) {    if (b == '0') {      bs.append(0);    } else     if (b == '1') {      bs.append(1);    } else {      throw new IllegalArgumentException("Bit Sequence creation string contains: " + b);    }  }  this.bits=bs.bits;  this.numBits=bs.numBits;  this.firstBitNum=0;  this.lastBitNum=bs.numBits;}  }
class C{  public void updatePresonInfo(){  this.leftPerson=person2LeavingPersonInfo.get(this.personId);  this.enteredPerson=person2EnteringPersonInfo.get(this.personId);}  }
class C{  public QueryResultParseException(Throwable t){  super(t);}  }
class C{  private void drawValue(Canvas canvas){  valuePaint.setColor(VALUE_TEXT_COLOR);  valuePaint.drawableState=getDrawableState();  Rect bounds=new Rect();  itemsLayout.getLineBounds(visibleItems / 2,bounds);  if (labelLayout != null) {    canvas.save();    canvas.translate(itemsLayout.getWidth() + LABEL_OFFSET,bounds.top);    labelLayout.draw(canvas);    canvas.restore();  }  if (valueLayout != null) {    canvas.save();    canvas.translate(0,bounds.top + scrollingOffset);    valueLayout.draw(canvas);    canvas.restore();  }}  }
class C{  private EndIsland createMainEndIsland(int chunkX,int chunkY){  return new EndIsland(chunkX,chunkY,8.0f);}  }
class C{  public void resetTimeout(AbstractMRMessage m){  return;}  }
class C{  public SortedMap<String,HealthCheck.Result> runHealthChecks(){  final SortedMap<String,HealthCheck.Result> results=new TreeMap<String,HealthCheck.Result>();  for (  Entry<String,HealthCheck> entry : healthChecks.entrySet()) {    final HealthCheck.Result result=entry.getValue().execute();    results.put(entry.getKey(),result);  }  return Collections.unmodifiableSortedMap(results);}  }
class C{  private void openScriptEditorPanel(UpdateActionCustom action){  ScriptEditor panel=new ScriptEditor(((UpdateActionCustom)action).getScriptString(),SCRIPT_DIR);  StandardDialog dialog=panel.getDialog(panel);  dialog.pack();  dialog.setLocationRelativeTo(null);  dialog.setVisible(true);  if (!dialog.hasUserCancelled()) {    ((UpdateActionCustom)action).setScriptString(panel.getTextArea().getText());    ((UpdateActionCustom)action).init();  }}  }
class C{  public void clear(){  processQueue();  hash.clear();}  }
class C{  public boolean isReconnecting(){  return reconnecting;}  }
class C{  Node createNode(String loc,Location location){  if (location == null) {    location=getLocation();  }  if (location != null) {    if (ctx.getString(R.string.voice_here).equals(loc)) {      double lon=location.getLongitude();      double lat=location.getLatitude();      if (lon >= -180 && lon <= 180 && lat >= -GeoMath.MAX_LAT && lat <= GeoMath.MAX_LAT) {        final Logic logic=Application.getLogic();        logic.setSelectedNode(null);        Node node=logic.performAddNode(lon,lat);        logic.setSelectedNode(null);        return node;      }    }  }  return null;}  }
class C{  public final void removeMessages(int what){  mExec.removeMessages(what);}  }
class C{  public void test_checkClientTrusted_02() throws Exception {  X509TrustManagerImpl xtm=new X509TrustManagerImpl();  X509Certificate[] xcert=setInvalid();  try {    xtm.checkClientTrusted(xcert,"SSL");    fail("CertificateException wasn't thrown");  } catch (  CertificateException expected) {  }}  }
class C{  public static void main(String[] args){  if (args.length != 2) {    System.out.println("WordTrainGenerating [Model Dir] [File/Folder]");    System.out.println("Generating training data for word segmentation with FlexCRFs++ or jvnmaxent (in JVnTextPro)");    System.out.println("Model Dir: directory containing featuretemple file");    System.out.println("Input File/Folder: file/folder name containing data manually tagged for training");    return;  }  WordTrainGenerating trainGen=new WordTrainGenerating(args[0]);  trainGen.generateTrainData(args[1],args[1]);}  }
class C{  public void testResourcesAvailable(){  new LithuanianAnalyzer().close();}  }
class C{  protected String debugInfoToString(BytecodePosition codePos,ReferenceMap refMap,IndexedValueMap liveBasePointers,RegisterSaveLayout calleeSaveInfo){  StringBuilder sb=new StringBuilder();  if (refMap != null) {    sb.append("reference-map: ");    sb.append(refMap.toString());    sb.append("\n");  }  if (liveBasePointers != null) {    sb.append("live-base-pointers: ");    sb.append(liveBasePointers);    sb.append("\n");  }  if (calleeSaveInfo != null) {    sb.append("callee-save-info:");    for (    Map.Entry<Register,Integer> e : calleeSaveInfo.registersToSlots(true).entrySet()) {      sb.append(" " + e.getKey() + " -> s"+ e.getValue());    }    sb.append("\n");  }  if (codePos != null) {    BytecodePosition curCodePos=codePos;    List<VirtualObject> virtualObjects=new ArrayList<>();    do {      sb.append(MetaUtil.toLocation(curCodePos.getMethod(),curCodePos.getBCI()));      sb.append('\n');      if (curCodePos instanceof BytecodeFrame) {        BytecodeFrame frame=(BytecodeFrame)curCodePos;        if (frame.numStack > 0) {          sb.append("stack: ");          for (int i=0; i < frame.numStack; i++) {            sb.append(valueToString(frame.getStackValue(i),virtualObjects)).append(' ');          }          sb.append("\n");        }        sb.append("locals: ");        for (int i=0; i < frame.numLocals; i++) {          sb.append(valueToString(frame.getLocalValue(i),virtualObjects)).append(' ');        }        sb.append("\n");        if (frame.numLocks > 0) {          sb.append("locks: ");          for (int i=0; i < frame.numLocks; ++i) {            sb.append(valueToString(frame.getLockValue(i),virtualObjects)).append(' ');          }          sb.append("\n");        }      }      curCodePos=curCodePos.getCaller();    } while (curCodePos != null);    for (int i=0; i < virtualObjects.size(); i++) {      VirtualObject obj=virtualObjects.get(i);      sb.append(obj).append(" ").append(obj.getType().getName()).append(" ");      for (int j=0; j < obj.getValues().length; j++) {        sb.append(valueToString(obj.getValues()[j],virtualObjects)).append(' ');      }      sb.append("\n");    }  }  return sb.toString();}  }
class C{  protected void printResult(final CommandResult commandResult,PrintStream printStream){  assert (commandResult != null);  assert (printStream != null);  commandResult.resetToFirstLine();  printStream.print(commandResultToString(commandResult));}  }
class C{  private static void determineObjectMethodsToGenerate(List<ExecutableElement> methods,AutoJsonTemplateVars vars){  vars.equals=false;  vars.hashCode=false;  vars.toString=false;  for (  ExecutableElement method : methods) {    ObjectMethodToOverride override=objectMethodToOverride(method);    boolean canGenerate=method.getModifiers().contains(Modifier.ABSTRACT) || isJavaLangObject((TypeElement)method.getEnclosingElement());switch (override) {case EQUALS:      vars.equals=canGenerate;    break;case HASH_CODE:  vars.hashCode=canGenerate;break;case TO_STRING:vars.toString=canGenerate;break;}}}  }
class C{  @Override public final boolean equals(Object obj){  if (this == obj)   return true;  if (!(obj instanceof TextBuilder))   return false;  TextBuilder that=(TextBuilder)obj;  if (this._length != that._length)   return false;  for (int i=0; i < _length; ) {    if (this.charAt(i) != that.charAt(i++))     return false;  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:04.037 -0500",hash_original_method="DC27EBD9E1BDFC9CCA499BC74F11D850",hash_generated_method="95BF3D2E10AD365B3C7CFF52E91E0AEE") public boolean isStale(){  return this.getParameterAsBoolean(ParameterNames.STALE);}  }
class C{  public final void handleUnexpectedException(Throwable e){  debugAssist(e);  systemExitAssist(103);}  }
class C{  public void futureIntResult(long futPtr,int res){  enter();  try {    PlatformCallbackUtils.futureIntResult(envPtr,futPtr,res);  }  finally {    leave();  }}  }
class C{  private void cmd_errorEMail(){  new WEMailDialog(this,"EMail Trace",MUser.get(Env.getCtx()),"","Adempiere Trace Info",CLogErrorBuffer.get(true).getErrorInfo(Env.getCtx(),bErrorsOnly.isSelected()),null);}  }
class C{  public final StringBuffer format(Object[] arguments,StringBuffer result,@Nullable FieldPosition pos){  return subformat(arguments,result,pos,null);}  }
class C{  public static String guessUrl(String inUrl){  String retVal=inUrl;  WebAddress webAddress;  if (DebugFlags.URL_UTIL)   Log.v(LOGTAG,"guessURL before queueRequest: " + inUrl);  if (inUrl.length() == 0)   return inUrl;  if (inUrl.startsWith("about:"))   return inUrl;  if (inUrl.startsWith("data:"))   return inUrl;  if (inUrl.startsWith("file:"))   return inUrl;  if (inUrl.startsWith("javascript:"))   return inUrl;  if (inUrl.endsWith(".") == true) {    inUrl=inUrl.substring(0,inUrl.length() - 1);  }  try {    webAddress=new WebAddress(inUrl);  } catch (  ParseException ex) {    if (DebugFlags.URL_UTIL) {      Log.v(LOGTAG,"smartUrlFilter: failed to parse url = " + inUrl);    }    return retVal;  }  if (webAddress.getHost().indexOf('.') == -1) {    webAddress.setHost("www." + webAddress.getHost() + ".com");  }  return webAddress.toString();}  }
class C{  public ConnectException(){}  }
class C{  public static double doubleFactorialAsDouble(int n){  double result=1.0;  int startValue;  if (n % 2 == 0) {    startValue=2;  } else {    startValue=3;  }  for (int i=startValue; i <= n; i+=2) {    result*=(double)i;  }  return result;}  }
class C{  public void endElement(String uri,String localName,String qName) throws SAXException {  if (documentHandler != null)   documentHandler.endElement(qName);}  }
class C{  public void insertBeforeSuper(String body,CtClass targetClass,String targetMethodName,CtClass... targetMethodParams) throws CannotCompileException, AfterBurnerImpossibleException, NotFoundException {  InsertableMethod insertableMethod=new InsertableMethodBuilder(mSignatureExtractor).insertIntoClass(targetClass).beforeSuper(targetMethodName,targetMethodParams).withBody(body).createInsertableMethod();  addOrInsertMethod(insertableMethod);}  }
class C{  void updateThumbnailVisibility(int clipBottom){  boolean invisible=mTaskBar != null && (getHeight() - clipBottom) <= mTaskBar.getHeight();  if (invisible != mInvisible) {    mInvisible=invisible;    if (!mInvisible) {      updateThumbnailPaintFilter();    }    invalidate();  }}  }
class C{  public final int compare(byte[] bytes1,byte[] bytes2){  int diff;  for (int i=0; i < bytes1.length && i < bytes2.length; i++) {    diff=(bytes1[i] & 0xFF) - (bytes2[i] & 0xFF);    if (diff != 0) {      return diff;    }  }  return bytes1.length - bytes2.length;}  }
class C{  private int handleH(String value,DoubleMetaphoneResult result,int index){  if ((index == 0 || isVowel(charAt(value,index - 1))) && isVowel(charAt(value,index + 1))) {    result.append('H');    index+=2;  } else {    index++;  }  return index;}  }
class C{  private static int checkTypeArgument(final String signature,int pos){  char c=getChar(signature,pos);  if (c == '*') {    return pos + 1;  } else   if (c == '+' || c == '-') {    pos++;  }  return checkFieldTypeSignature(signature,pos);}  }
class C{  public void addVis(Object parent,VisualizationItem vis){  vistree.add(parent,vis);  notifyFactories(vis);  visChanged(vis);}  }
class C{  public static void main(String[] args){  Header.printHeader(InAreaPlanKeeper.class.toString(),args);  String inputPlansFile=args[0];  String inputAttributesFile=args[1];  String shapefile=args[2];  String outputPlansFile=args[3];  String outputAttributesFile=args[4];  Scenario sc=ScenarioUtils.createScenario(ConfigUtils.createConfig());  new PopulationReader(sc).readFile(inputPlansFile);  new ObjectAttributesXmlReader(sc.getPopulation().getPersonAttributes()).readFile(inputAttributesFile);  Scenario cleanScenario=InAreaPlanKeeper.run(sc,shapefile,false);  new PopulationWriter(cleanScenario.getPopulation()).write(outputPlansFile);  new ObjectAttributesXmlWriter(cleanScenario.getPopulation().getPersonAttributes()).writeFile(outputAttributesFile);  Header.printFooter();}  }
class C{  public InlineKeyboardMarkupBuilder addRow(List<InlineKeyboardButton> buttons){  inline_keyboard.add(new LinkedList<>(buttons));  return this;}  }
class C{  @SuppressWarnings("unused") @Subscribe public void onEvent(UpdateDownloadErrorEvent event){  Log.d("CHCP","Failed to update");  final ChcpError error=event.error();  if (error == ChcpError.LOCAL_VERSION_OF_APPLICATION_CONFIG_NOT_FOUND || error == ChcpError.LOCAL_VERSION_OF_MANIFEST_NOT_FOUND) {    Log.d("CHCP","Can't load application config from installation folder. Reinstalling external folder");    installWwwFolder();  }  PluginResult jsResult=PluginResultHelper.pluginResultFromEvent(event);  if (downloadJsCallback != null) {    downloadJsCallback.sendPluginResult(jsResult);    downloadJsCallback=null;  }  sendMessageToDefaultCallback(jsResult);  rollbackIfCorrupted(event.error());}  }
class C{  static float min(final float a,final float b){  if (a > b) {    return b;  } else {    return a;  }}  }
class C{  public static int square(int num){  return num * num;}  }
class C{  public void put(String key,Object value){  if (key != null && value != null) {    urlParamsWithObjects.put(key,value);  }}  }
class C{  public FeatureVectorBuffer(IFeatureVector fv){  idxList=new ArrayList<Integer>(Ints.asList(fv.getIndices()));  valList=new ArrayList<Float>(Floats.asList(fv.getValues()));}  }
class C{  protected void appendNullText(StringBuffer buffer,String fieldName){  buffer.append(nullText);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public BinaryBlockMatrix(JavaPairRDD<MatrixIndexes,MatrixBlock> binaryBlocks,MatrixCharacteristics matrixCharacteristics){  this.binaryBlocks=binaryBlocks;  this.matrixMetadata=new MatrixMetadata(matrixCharacteristics);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.SWITCH_STATEMENT__EXPRESSION:    return expression != null;case N4JSPackage.SWITCH_STATEMENT__CASES:  return cases != null && !cases.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public void mapToMiningSchema(Instances dataSet) throws Exception {  if (m_fieldsMap == null) {    m_fieldsMap=new MappingInfo(dataSet,m_miningSchema,m_log);    m_initialized=true;  }}  }
class C{  private static Iterable<ClusterNode> nodesPerJvm(Iterable<ClusterNode> nodes){  Map<String,ClusterNode> grpMap=new HashMap<>();  for (  ClusterNode node : nodes) {    String grpId=node.attribute(ATTR_MACS) + "|" + node.attribute(ATTR_JVM_PID);    if (!grpMap.containsKey(grpId))     grpMap.put(grpId,node);  }  return grpMap.values();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatadeletedatabegining.class,args);}  }
class C{  private DrawerLayout.LayoutParams processDrawerLayoutParams(DrawerLayout.LayoutParams params){  if (params != null) {    if (drawerGravity != 0 && (drawerGravity == Gravity.RIGHT || drawerGravity == Gravity.END)) {      params.rightMargin=0;      if (Build.VERSION.SDK_INT >= 17) {        params.setMarginEnd(0);      }      params.leftMargin=activity.getResources().getDimensionPixelSize(R.dimen.dd_debug_drawer_margin);      if (Build.VERSION.SDK_INT >= 17) {        params.setMarginEnd(activity.getResources().getDimensionPixelSize(R.dimen.dd_debug_drawer_margin));      }    }    if (drawerWidth > -1) {      params.width=drawerWidth;    } else {      params.width=UIUtils.getOptimalDrawerWidth(activity);    }  }  return params;}  }
class C{  public void subtract(final long operand){  this.value-=operand;}  }
class C{  public String weightThresholdTipText(){  return "Weight threshold for weight pruning (reduce to 90 " + "for speeding up learning process).";}  }
class C{  public HexCharset(boolean caps,int measure){  super((caps ? "HEX" : "hex") + ":" + measure,new String[]{"HEX"});  codes=caps ? codeHEX : codehex;  this.measure=measure;}  }
class C{  public void endVisit(VariableDeclarationStatement node){}  }
class C{  @Override protected boolean isZoneLevelResource(){  return false;}  }
class C{  protected void complete(){  doClose();}  }
class C{  public ASN1Primitive toASN1Primitive(){  ASN1EncodableVector v=new ASN1EncodableVector();  v.add(subjectKeyIdentifier);  if (date != null) {    v.add(date);  }  if (other != null) {    v.add(other);  }  return new DERSequence(v);}  }
class C{  public int add(byte[] data){  for (int i=0; i < hashFunctions; ++i) {    setBit((int)((murmurhash3bit(i,data,tweak) & 0xFFFFFFFFL) % (filter.length * 8)));  }  return Arrays.hashCode(data);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case MappingPackage.INFOMODEL_SOURCE__MODEL:    return model != null;}return super.eIsSet(featureID);}  }
class C{  public void clean(ObjID[] ids,long sequenceNum,VMID vmid,boolean strong){  for (  ObjID id : ids) {    if (dgcLog.isLoggable(Log.VERBOSE)) {      dgcLog.log(Log.VERBOSE,"id = " + id + ", vmid = "+ vmid+ ", strong = "+ strong);    }    ObjectTable.unreferenced(id,sequenceNum,vmid,strong);  }}  }
class C{  public IndicesAliasesRequest removeAlias(String index,String... aliases){  addAliasAction(new AliasActions(AliasAction.Type.REMOVE,index,aliases));  return this;}  }
class C{  public synchronized boolean hasAlert(Alert alert){  if (alerts == null) {    return false;  }  return alerts.contains(alert);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:55.701 -0500",hash_original_method="B22823BCA8FD058C901A741025BA8FB1",hash_generated_method="92EC2B489D0BE6DE5617D9029E2D7E07") public String toString(){  if (soid == null) {    StringBuilder sb=new StringBuilder(4 * oid.length);    for (int i=0; i < oid.length - 1; ++i) {      sb.append(oid[i]);      sb.append('.');    }    sb.append(oid[oid.length - 1]);    soid=sb.toString();  }  return soid;}  }
class C{  public GraphicsNode createGraphicsNode(BridgeContext ctx,Element e){  CompositeGraphicsNode gn=buildCompositeGraphicsNode(ctx,e,null);  return gn;}  }
class C{  public void finish() throws IOException {  encodePendingBytes(true);}  }
class C{  protected boolean chestCloser(){  if (getZone().getPlayers().size() > 0) {    return true;  } else {    close();    notifyWorldAboutChanges();  }  return false;}  }
class C{  public Graph search(){  long startTime=System.currentTimeMillis();  learnEdges(1000);  elapsedTime=System.currentTimeMillis() - startTime;  return graphFromMGM();}  }
class C{  public boolean process(ContentEvent event){  Preconditions.checkState(numberClassifiers == ensembleStreams.length,String.format("Ensemble size ({}) and number of ensemble streams ({}) do not match.",numberClassifiers,ensembleStreams.length));  InstanceContentEvent inEvent=(InstanceContentEvent)event;  if (inEvent.getInstanceIndex() < 0) {    for (    Stream stream : ensembleStreams)     stream.put(event);    return false;  }  if (inEvent.isTesting()) {    Instance testInstance=inEvent.getInstance();    for (int i=0; i < numberClassifiers; i++) {      Instance instanceCopy=testInstance.copy();      InstanceContentEvent instanceContentEvent=new InstanceContentEvent(inEvent.getInstanceIndex(),instanceCopy,false,true);      instanceContentEvent.setEvaluationIndex(i);      ensembleStreams[i].put(instanceContentEvent);    }  }  if (inEvent.isTraining()) {    train(inEvent);  }  return true;}  }
class C{  public synchronized void requestContactCapabilities(ContactId contact){  if (sLogger.isActivated()) {    sLogger.debug("Request capabilities for ".concat(contact.toString()));  }  mOptionsManager.requestCapabilities(contact);}  }
class C{  public AbstractInternalTransition(State<S,E> source,Collection<Action<S,E>> actions,E event,Guard<S,E> guard,Trigger<S,E> trigger){  super(source,source,actions,event,TransitionKind.INTERNAL,guard,trigger);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Workspace(){  manager=new CouplingManager(this);  updater=new WorkspaceUpdater(this);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void testResample(double coord){  final int bin=getBinNr(coord);  final int sizereq, off;  if (bin < 0) {    sizereq=size - bin;    off=-bin;  } else   if (bin >= data.length) {    sizereq=bin + 1;    off=0;  } else {    return;  }  if (sizereq < data.length) {    return;  }  final int levels=BitsUtil.magnitude(sizereq / this.destsize) - 1;  assert (levels > 0) : "No resampling required?!? sizereq=" + sizereq + " destsize="+ destsize+ " array="+ data.length;  final int step=1 << levels;  final int fixpoint=off / (step - 1);{    int oup=(fixpoint >= 0) ? fixpoint : 0;    int inp=(oup << levels) - off;    assert (-step < inp && inp <= oup && oup < inp + step) : (inp + " -> " + oup+ " s="+ step+ " o="+ off+ " l="+ levels);    for (; inp < size; inp+=step, oup++) {      assert (oup < inp + step && oup < data.length);      data[oup]=downsample(data,Math.max(0,inp),Math.min(size,inp + step),step);    }    for (; oup < data.length; oup++) {      data[oup]=0;    }  }  if (off >= step) {    int oup=(fixpoint - 1 < size) ? fixpoint - 1 : size - 1;    int inp=(oup << levels) - off;    assert (oup > inp) : (inp + " -> " + oup+ " s="+ step+ " o="+ off+ " l="+ levels);    for (; inp > -step; inp-=step, oup--) {      assert (oup >= inp && oup >= 0);      data[oup]=downsample(data,Math.max(0,inp),Math.min(size,inp + step),step);    }    for (; oup >= 0; oup--) {      data[oup]=0;    }  }  base=base - (offset + off) * binsize;  offset=0;  size=(size + 1) >> levels;  binsize=binsize * (1 << levels);  max=base + binsize * size;}  }
class C{  private Object readResolve(){  return iChronology.dayOfYear();}  }
class C{  private void generateSysCall(int parametersSize,RVMField target){  asm.emitLAddrToc(S0,Entrypoints.the_boot_recordField.getOffset());  asm.emitLAddrOffset(S0,S0,target.getOffset());  generateSysCall(parametersSize);}  }
class C{  public void initializeActiveSlotsList(String slots){  if (activeSlotsList == null) {    activeSlotsList=new ArrayList<String>();  }  for (  String s : slots.split(";")) {    activeSlotsList.add(s);  }}  }
class C{  public void createWeekScenarioParChangeAndUserDeassign() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance("2013-02-01 00:00:00");  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"PARCHARGE_PU_WEEK_DEASSIGN",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES_PARS_STEPPED,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PARCHARGE_PU_WEEK_DEASSIGN",serviceDetails,basicSetup.getCustomerUser1(),role);  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-02-04 00:00:00"),"LONG_NUMBER","1523");  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-02-12 18:00:00"),"LONG_NUMBER","400");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-14 12:00:00"));  subDetails=subscrSetup.revokeUser(basicSetup.getCustomerUser1(),subDetails.getSubscriptionId());  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-02-16 06:00:00"),"LONG_NUMBER","29");  BillingIntegrationTestBase.setDateFactoryInstance("2013-03-01 00:00:00");  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PARCHARGE_PU_WEEK_DEASSIGN",subDetails);}  }
class C{  private Stat checkStaleRegistration() throws Exception {  Stat stat=_zkConnection.curator().checkExists().forPath(_servicePath);  if (stat != null && stat.getEphemeralOwner() != _zkConnection.curator().getZookeeperClient().getZooKeeper().getSessionId()) {    _zkConnection.curator().delete().forPath(_servicePath);    _log.info("Deleted stale service registration from previous session");    stat=null;  }  return stat;}  }
class C{  public String join(String separator) throws JSONException {  int len=this.length();  StringBuilder sb=new StringBuilder();  for (int i=0; i < len; i+=1) {    if (i > 0) {      sb.append(separator);    }    sb.append(JSONObject.valueToString(this.myArrayList.get(i)));  }  return sb.toString();}  }
class C{  public QueryParameter addColumn(String... columns){  return addToList(mColumns,false,columns);}  }
class C{  static boolean destroyProcess(@NotNull final Process process,final boolean softKill){  try {    if (SystemInfo.isWindows) {      sendCtrlEventThroughStream(process,softKill ? C : BRK);      return true;    } else     if (SystemInfo.isUnix) {      if (softKill) {        return UnixProcessManager.sendSigIntToProcessTree(process);      } else {        return UnixProcessManager.sendSigKillToProcessTree(process);      }    } else {      return false;    }  } catch (  Exception e) {    LOG.error("Couldn't terminate the process",e);    return false;  }}  }
class C{  public static boolean isLetter(int c){  return (c >= 65 && c <= 90) || (c >= 97 && c <= 122);}  }
class C{  public STGroupFile(URL url,String encoding,char delimiterStartChar,char delimiterStopChar){  super(delimiterStartChar,delimiterStopChar);  this.url=url;  this.encoding=encoding;  this.fileName=null;}  }
class C{  public void delete(String id){  String qual=new StringBuffer().append(DBUtils.WHERE).append(DBUtils.generateEQTokenField(CAMPO_ID,id)).toString();  if (logger.isDebugEnabled())   logger.debug("Se va a eliminar la lista descriptora con id: " + id);  deleteVO(qual,TABLE_NAME);}  }
class C{  private String provideLastName(){  if (!treeFile.getName().isEmpty()) {    return treeFile.getPath();  }  if (!treeFile.isAbsolute()) {    return ".";  }  return "";}  }
class C{  public VisualTable(Table parent,Visualization vis,String group,Predicate rowFilter,Schema schema){  super(parent,rowFilter,null,TableVisualItem.class);  init(vis,group,schema);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  TextView tv=new TextView(this);  tv.setText("Hello, Crashy Android");  setContentView(tv);}  }
class C{  @Override public boolean deletesAreDetected(int type){  debugCodeCall("deletesAreDetected",type);  return false;}  }
class C{  public void deselectAll(){  for (int i=0; i < mMusicTrackAdapter.getCount(); i++) {    MusicTrack musicTrack=mMusicTrackAdapter.getItem(i);    selectTrack(musicTrack,null,TrackSelectionState.Deselect);  }  updateListView();}  }
class C{  public NotificationChain basicSetVarDecl(VariableDeclaration newVarDecl,NotificationChain msgs){  VariableDeclaration oldVarDecl=varDecl;  varDecl=newVarDecl;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.BINDING_ELEMENT__VAR_DECL,oldVarDecl,newVarDecl);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static String stringFor(int n){switch (n) {case CU_MEM_ADVISE_SET_READ_MOSTLY:    return "CU_MEM_ADVISE_SET_READ_MOSTLY";case CU_MEM_ADVISE_UNSET_READ_MOSTLY:  return "CU_MEM_ADVISE_UNSET_READ_MOSTLY";case CU_MEM_ADVISE_SET_PREFERRED_LOCATION:return "CU_MEM_ADVISE_SET_PREFERRED_LOCATION";case CU_MEM_ADVISE_UNSET_PREFERRED_LOCATION:return "CU_MEM_ADVISE_UNSET_PREFERRED_LOCATION";case CU_MEM_ADVISE_SET_ACCESSED_BY:return "CU_MEM_ADVISE_SET_ACCESSED_BY";case CU_MEM_ADVISE_UNSET_ACCESSED_BY:return "CU_MEM_ADVISE_UNSET_ACCESSED_BY";}return "INVALID CUmem_advise: " + n;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_CONSTRAINT_1__CONSTRAINT_BODY_1:    return constraintBody_1 != null && !constraintBody_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public static String format(double[][] m,int w,int d,String pre,String pos,String csep){  DecimalFormat format=new DecimalFormat();  format.setDecimalFormatSymbols(new DecimalFormatSymbols(Locale.US));  format.setMinimumIntegerDigits(1);  format.setMaximumFractionDigits(d);  format.setMinimumFractionDigits(d);  format.setGroupingUsed(false);  StringBuilder msg=new StringBuilder();  for (int i=0; i < m.length; i++) {    double[] row=m[i];    msg.append(pre);    for (int j=0; j < row.length; j++) {      if (j > 0) {        msg.append(csep);      }      String s=format.format(row[j]);      whitespace(msg,w - s.length());      msg.append(s);    }    msg.append(pos);  }  return msg.toString();}  }
class C{  public void wide() throws OperatorFailedException {  NodeRef i=null, iP=null, j=null, jP=null;  int tries=0;  while (tries < MAX_TRIES) {    i=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));    while (tree.getRoot() == i) {      i=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));    }    j=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));    while (j == i || j == tree.getRoot()) {      j=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));    }    iP=tree.getParent(i);    jP=tree.getParent(j);    if ((iP != jP) && (i != jP) && (j != iP)&& (tree.getNodeHeight(j) < tree.getNodeHeight(iP))&& (tree.getNodeHeight(i) < tree.getNodeHeight(jP))) {      break;    }    tries+=1;  }  if (tries < MAX_TRIES) {    eupdate(i,j,iP,jP);  } else {    throw new OperatorFailedException("Couldn't find valid wide move on this tree!");  }}  }
class C{  protected JvmRTClassPathTableMeta createJvmRTClassPathTableMetaNode(String tableName,String groupName,SnmpMib mib,MBeanServer server){  return new JvmRTClassPathTableMeta(mib,objectserver);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public NotificationChain basicSetExpr(Expression newExpr,NotificationChain msgs){  Expression oldExpr=expr;  expr=newExpr;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,GamlPackage.FACET__EXPR,oldExpr,newExpr);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public List<ExportGroupRestRep> exportBlockResources(List<URI> resourceIds){  return exportBlockResources(resourceIds,null);}  }
class C{  @Deprecated public static void encode(String s,String encoding,Appendable out) throws UnsupportedEncodingException, IOException {  encode(s,encoding,DEFAULT_SAFE_OCTETS,true,out);}  }
class C{  public UnsignedInteger subtract(long decrement){  return valueOf(getValue() - decrement);}  }
class C{  @Deprecated public void remove(){  throw new UnsupportedOperationException();}  }
class C{  private void validateExtensionDataFiles(Set<ArchiveFile> extensions) throws InterruptedException, GeneratorException, IOException {  for (  ArchiveFile extension : extensions) {    validateExtensionDataFile(extension);  }}  }
class C{  public List<DiscoveryNode> filteredNodes(){  return nodesService.filteredNodes();}  }
class C{  public void onReduceConfigure(){}  }
class C{  protected static final String addEscapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case '\b':      retval.append("\\b");    continue;case '\t':  retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  public ResumeThreadSynchronizer(final IDebugger debugger,final ListenerProvider<IDebugEventListener> listeners){  super(debugger,listeners);}  }
class C{  public JSONArray put(int index,Collection<Object> value) throws JSONException {  this.put(index,new JSONArray(value));  return this;}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType){  this(context,account,authTokenType,false);}  }
class C{  private void forceNSDecls(){  Enumeration<String> prefixes=forcedDeclTable.keys();  while (prefixes.hasMoreElements()) {    String prefix=(String)prefixes.nextElement();    doPrefix(prefix,null,true);  }}  }
class C{  public void saveButtonActionPerformed(ActionEvent ae){  if (reporterBox.getSelectedItem() == null || reporterBox.getSelectedItem().equals("")) {    JOptionPane.showMessageDialog(null,rb.getString("SelectLocationToEdit"),rb.getString("NoLocationSelected"),JOptionPane.ERROR_MESSAGE);    return;  }  Reporter l=getReporterFromList();  if (l == null) {    return;  }  int value=JOptionPane.showConfirmDialog(null,MessageFormat.format(rb.getString("UpdatePhysicalLocation"),new Object[]{l.getDisplayName()}),rb.getString("SaveLocation?"),JOptionPane.YES_NO_OPTION);  if (value == JOptionPane.YES_OPTION) {    saveSpinnerValues(l);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  public void store(final long address,final byte[] data){  Preconditions.checkArgument(address >= 0,"Error: Address can't be less than 0");  Preconditions.checkNotNull(data,"Error: Data can't be null");  try {    m_writeLock.lock();    remove(address,data.length);    final MemoryChunk chunk=new MemoryChunk(address,data);    insertChunk(chunk);    final MemoryChunk nextChunk=findChunk(address + chunk.getLength());    if (nextChunk != null) {      connectChunks(chunk,nextChunk);    }  }  finally {    m_writeLock.unlock();  }  notifyListeners(address,data.length);}  }
class C{  public String translationTipText(){  return "The translation of the output range (default: 0).";}  }
class C{  public void updateSceneGraph(boolean waitForRenderer){  if (canvas == null)   return;  if (dirty && waitForRenderer) {    createSceneGraph();    return;  }  boolean changes=false;  Iterator iter=portrayals.iterator();  moveBogusMover();  while (iter.hasNext()) {    Portrayal3DHolder ph=(Portrayal3DHolder)iter.next();    if (portrayalSwitchMask.get(ph.subgraphIndex)) {      ph.portrayal.setCurrentDisplay(this);      ph.portrayal.getModel((ph.portrayal instanceof FieldPortrayal3D) ? ((FieldPortrayal3D)ph.portrayal).getField() : null,(TransformGroup)portrayalSwitch.getChild(ph.subgraphIndex));      changes=true;    }  }  waitForRenderer&=changes;  if (!waitForRenderer)   return;synchronized (canvas) {    try {      if (!Thread.currentThread().isInterrupted())       canvas.wait(0);    } catch (    InterruptedException ex) {      try {        Thread.currentThread().interrupt();      } catch (      SecurityException ex2) {      }    }  }synchronized (simulation.state.schedule) {    if (movieMaker != null)     movieMaker.add(canvas.getLastImage());  }}  }
class C{  public static double[] select(double[] data,int[] indices){  double[] returnData=new double[indices.length];  for (int i=0; i < indices.length; i++) {    returnData[i]=data[indices[i]];  }  return returnData;}  }
class C{  public LoginException(String message){  super(message);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element entRefAddr;  Node entRefNode;  int nodeType;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  entRefAddr=(Element)elementList.item(1);  entRefNode=entRefAddr.getFirstChild();  nodeType=(int)entRefNode.getNodeType();  if (equals(3,nodeType)) {    entRefNode=doc.createEntityReference("ent2");    assertNotNull("createdEntRefNotNull",entRefNode);    nodeType=(int)entRefNode.getNodeType();  }  assertEquals("entityNodeType",5,nodeType);}  }
class C{  private void selectWord(MouseEvent e){  if (selectedWordEvent != null && selectedWordEvent.getX() == e.getX() && selectedWordEvent.getY() == e.getY()) {    return;  }  Action a=null;  ActionMap map=getComponent().getActionMap();  if (map != null) {    a=map.get(DefaultEditorKit.selectWordAction);  }  if (a == null) {    if (selectWord == null) {      selectWord=new DefaultEditorKit.SelectWordAction();    }    a=selectWord;  }  a.actionPerformed(new ActionEvent(getComponent(),ActionEvent.ACTION_PERFORMED,null,e.getWhen(),e.getModifiers()));  selectedWordEvent=e;}  }
class C{  @Inject public ResetFilesPresenter(ResetFilesView view,GitServiceClient service,AppContext appContext,GitLocalizationConstant constant,NotificationManager notificationManager,DtoFactory dtoFactory,DialogFactory dialogFactory,GitOutputConsoleFactory gitOutputConsoleFactory,ProcessesPanelPresenter processesPanelPresenter){  this.view=view;  this.dtoFactory=dtoFactory;  this.dialogFactory=dialogFactory;  this.gitOutputConsoleFactory=gitOutputConsoleFactory;  this.consolesPanelPresenter=processesPanelPresenter;  this.view.setDelegate(this);  this.service=service;  this.appContext=appContext;  this.constant=constant;  this.notificationManager=notificationManager;}  }
class C{  private boolean checkEntityIsDomesticAnimal(final Player player,final Entity entity){  if (!(entity instanceof DomesticAnimal)) {    player.sendPrivateText("Maybe you should stick to owning domestic animals.");    return false;  }  return true;}  }
class C{  private void updateToolBar(){  final String currentFontName=getCurrentFontName();  if (currentFontName != null) {    fontNameCombo.setText(currentFontName);  }  fontNameCombo.setEnabled(queryCommandEnabled("FontName"));  final String currentFontSize=getCurrentFontSize();  if (currentFontSize != null) {    fontSizeCombo.setText(currentFontSize);  }  fontSizeCombo.setEnabled(queryCommandEnabled("FontSize"));  boldButtonItem.setEnabled(queryCommandEnabled("Bold"));  boldButtonItem.setSelection(queryCommandState("Bold"));  italicButtonItem.setEnabled(queryCommandEnabled("Italic"));  italicButtonItem.setSelection(queryCommandState("Italic"));  underlineButtonItem.setEnabled(queryCommandEnabled("Underline"));  underlineButtonItem.setSelection(queryCommandState("Underline"));  leftMenuItem.setEnabled(queryCommandEnabled("JustifyLeft"));  leftMenuItem.setSelection(queryCommandState("JustifyLeft"));  centerMenuItem.setEnabled(queryCommandEnabled("JustifyCenter"));  centerMenuItem.setSelection(queryCommandState("JustifyCenter"));  rightMenuItem.setEnabled(queryCommandEnabled("JustifyRight"));  rightMenuItem.setSelection(queryCommandState("JustifyRight"));  justifyMenuItem.setEnabled(queryCommandEnabled("JustifyFull"));  justifyMenuItem.setSelection(queryCommandState("JustifyFull"));  unorderedListButtonItem.setEnabled(queryCommandEnabled("InsertUnorderedList"));  orderedListButtonItem.setEnabled(queryCommandEnabled("InsertOrderedList"));  linkButtonItem.setEnabled(queryCommandEnabled("CreateLink"));}  }
class C{  public String toString(cp_info constant_pool[]){  return Double.toString(convert());}  }
class C{  public CRLDistributionPointsExtension(List<DistributionPoint> distributionPoints) throws IOException {  this(false,distributionPoints);}  }
class C{  public static byte testPattern(Object o,byte start){  int[] dims=ArrayFuncs.getDimensions(o);  if (dims.length > 1) {    for (int i=0; i < ((Object[])o).length; i+=1) {      start=testPattern(((Object[])o)[i],start);    }  } else   if (dims.length == 1) {    for (int i=0; i < dims[0]; i+=1) {      java.lang.reflect.Array.setByte(o,i,start);      start+=1;    }  }  return start;}  }
class C{  public T3Glyph(final T3Renderer glyphDisplay,final int x,final int y,final boolean lockColours){  this.glyphDisplay=glyphDisplay;  this.maxWidth=x;  this.maxHeight=y;  this.lockColours=lockColours;}  }
class C{  public static long toLong(NibbleArray nibbles,int start){  return toLong(nibbles.get(start),nibbles.get(start + 1),nibbles.get(start + 2),nibbles.get(start + 3),nibbles.get(start + 4),nibbles.get(start + 5),nibbles.get(start + 6),nibbles.get(start + 7),nibbles.get(start + 8),nibbles.get(start + 9),nibbles.get(start + 10),nibbles.get(start + 11),nibbles.get(start + 12),nibbles.get(start + 13),nibbles.get(start + 14),nibbles.get(start + 15));}  }
class C{  public static <T>int binarySearch(T[] array,T object,Comparator<? super T> comparator){  return binarySearch(array,0,array.length,object,comparator);}  }
class C{  public static BufferedImage createCompatibleImage(BufferedImage image){  return createCompatibleImage(image,image.getWidth(),image.getHeight());}  }
class C{  public static boolean equal(Object a,Object b){  return a == b || (a != null && a.equals(b));}  }
class C{  @Deprecated public int growthFactor(){  return 16;}  }
class C{  public static String reflectionToString(Object object,ToStringStyle style,boolean outputTransients){  return ReflectionToStringBuilder.toString(object,style,outputTransients,false,null);}  }
class C{  public void publishTile(int id,CustomTile customTile){  publishTile(null,id,customTile);}  }
class C{  public void generateResults(){  Result.getGlobalResult().add(new ResultEntry(ResultLevel.Trace,"attackModel","Generate Results - start"));  int secondsTotal=(int)((this.tsAttackStop - this.tsAttackStart) / 1000);  int currentMillisecond=0;  int matchingInterval=0;  long currentDuration;  mapLogEntryIntervalUntampered=new HashMap<Integer,LogEntryInterval>();  mapLogEntryIntervalTampered=new HashMap<Integer,LogEntryInterval>();  mapLogEntryIntervalTestProbe=new HashMap<Integer,LogEntryInterval>();  for (  LogEntryRequest currentLogEntryUntampered : this.logListUntamperedRequests) {    writeLogEntryRequestToLogEntryInterval(mapLogEntryIntervalUntampered,currentLogEntryUntampered);  }  for (  LogEntryRequest currentLogEntryTampered : this.logListTamperedRequests) {    writeLogEntryRequestToLogEntryInterval(mapLogEntryIntervalTampered,currentLogEntryTampered);  }  for (  LogEntryRequest currentLogEntryTestProbe : this.logListTestProbeRequests) {    writeLogEntryRequestToLogEntryInterval(mapLogEntryIntervalTestProbe,currentLogEntryTestProbe);  }  Result.getGlobalResult().add(new ResultEntry(ResultLevel.Trace,"attackModel","Generate Results - end"));}  }
class C{  public IfElse(Class<?> type){  super(type,Boolean.class,type,type);}  }
class C{  public void findResultEdges(){  for (Iterator it=dirEdgeList.iterator(); it.hasNext(); ) {    DirectedEdge de=(DirectedEdge)it.next();    if (de.getDepth(Position.RIGHT) >= 1 && de.getDepth(Position.LEFT) <= 0 && !de.isInteriorAreaEdge()) {      de.setInResult(true);    }  }}  }
class C{  public void put(Object key,Object value){  LRUListEntry entry=new LRUListEntry();  entry.value=value;  entry.key=key;synchronized (this) {    remove(key);    map.put(key,entry);    setMostRecentlyUsed(entry);    if (tail == null) {      tail=entry;    }    if (map.size() > maxSize) {      purgeLRUElements();    }    rmStats(entry);  }}  }
class C{  @PUT @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{volume_id}") @CheckPermission(roles={Role.SYSTEM_MONITOR,Role.TENANT_ADMIN},acls={ACL.ANY}) public Response updateVolume(@PathParam("tenant_id") String openstackTenantId,@PathParam("volume_id") String volumeId,@HeaderParam("X-Cinder-V1-Call") String isV1Call,VolumeUpdateRequestGen param,@Context HttpHeaders header){  boolean ishex=volumeId.matches("[a-fA-F0-9\\-]+");  _log.debug(" Matcher  {}",ishex);  if (!ishex) {    _log.info("Update volume is failed : Invalid source volume id ");    return CinderApiUtils.createErrorResponse(404,"Not Found : Invalid source volume id");  }  if (volumeId == null) {    _log.debug("Update volume is failed : Volume id is empty ");    return CinderApiUtils.createErrorResponse(404,"Not Found : volume id is empty");  }  Volume vol=findVolume(volumeId,openstackTenantId);  if (vol == null) {    _log.debug("Update volume is failed : Non existent source volume id ");    return CinderApiUtils.createErrorResponse(404,"Not Found : Non existent source volume id");  }  _log.debug("Update volume {}: ",vol.getLabel());  String label=null;  String description=null;  if (isV1Call != null) {    label=param.volume.display_name;    description=param.volume.display_description;  } else {    label=param.volume.name;    description=param.volume.description;  }  _log.debug("new name = {}, description = {}",label,description);  if (label != null && (label.length() > 2)) {    if (!vol.getLabel().equals(label)) {      URI projectUri=vol.getProject().getURI();      checkForDuplicateName(label,Volume.class,projectUri,"project",_dbClient);      _log.debug("Update volume : not a duplicate name");      vol.setLabel(label);    }  }  if (description != null && (description.length() > 2)) {    StringMap extensions=vol.getExtensions();    if (extensions == null)     extensions=new StringMap();    extensions.put("display_description",description);    _log.debug("Update volume : stored description");    vol.setExtensions(extensions);  }  _dbClient.updateObject(vol);  return CinderApiUtils.getCinderResponse(getVolumeDetail(vol,isV1Call,openstackTenantId),header,true,STATUS_OK);}  }
class C{  public ContentValues(){  mValues=new HashMap<String,Object>(8);}  }
class C{  @Override public boolean removeMib(SnmpMibAgent mib){  root.unregister(mib);  return (mibs.removeElement(mib));}  }
class C{  public static boolean is2DArray(int[] array){  return (array.length == 2) ? true : false;}  }
class C{  protected StatefulTokenizer(){  joinedTypes=new HashSet<Object>();  ignoredTypes=new HashSet<Object>();  grammar=new HashMap<String,Rule[]>();}  }
class C{  private void updateDataTableColumns(final TableViewer tableViewer,final String[] definedColumnNames){  final HashSet<String> existingColumnNames=new HashSet<String>();  for (  final TableColumn column : tableViewer.getTable().getColumns()) {    existingColumnNames.add(column.getText());  }  boolean hasNewColumn=false;  for (  final String columnName : definedColumnNames) {    if (existingColumnNames.contains(columnName)) {      existingColumnNames.remove(columnName);    } else {      hasNewColumn=true;      break;    }  }  if (hasNewColumn || existingColumnNames.size() > 0) {    while (tableViewer.getTable().getColumns().length > 0) {      tableViewer.getTable().getColumns()[0].dispose();    }    final TableLayout layout=new TableLayout();    tableViewer.getTable().setLayout(layout);    for (    final String columnName : definedColumnNames) {      final TableColumn column=new TableColumn(tableViewer.getTable(),SWT.None);      column.setText(columnName);      layout.addColumnData(new ColumnWeightData(5,true));    }    for (    final TableColumn column : tableViewer.getTable().getColumns()) {      column.pack();    }    tableViewer.refresh();  }}  }
class C{  public ClassMemberValue(String className,ConstPool cp){  super('c',cp);  setValue(className);}  }
class C{  public boolean isAccessibilityComputationAreaFromBoundingBox(){  return accessibilityComputationAreaFromBoundingBox;}  }
class C{  public void testConflicts() throws Exception {  final PyPullUpPresenterImpl sut=configureByClass("ChildWithConflicts");  configureParent();  final Collection<PyMemberInfo<PyElement>> infos=getMemberInfos(sut);  final Capture<MultiMap<PyClass,PyMemberInfo<?>>> conflictCapture=new Capture<MultiMap<PyClass,PyMemberInfo<?>>>();  EasyMock.expect(myView.showConflictsDialog(EasyMock.capture(conflictCapture),EasyMock.<Collection<PyMemberInfo<?>>>anyObject())).andReturn(false).anyTimes();  EasyMock.expect(myView.getSelectedMemberInfos()).andReturn(infos).anyTimes();  final PyClass parent=getClassByName("ParentWithConflicts");  EasyMock.expect(myView.getSelectedParent()).andReturn(parent).anyTimes();  myMocksControl.replay();  sut.okClicked();  final MultiMap<PyClass,PyMemberInfo<?>> conflictMap=conflictCapture.getValue();  Assert.assertTrue("No conflicts found, while it should",conflictMap.containsKey(parent));  final Collection<String> conflictedMemberNames=Collections2.transform(conflictMap.get(parent),NameTransformer.INSTANCE);  Assert.assertThat("Failed to find right conflicts",conflictedMemberNames,Matchers.containsInAnyOrder("extends Bar","CLASS_FIELD","self.instance_field","my_func(self)","__init__(self)"));}  }
class C{  @Override public RuntimeAnnotationHandler scan(Class<?> clazz){  Util.notNull("clazz",clazz);  WebServiceRefHandler handler=null;  ArrayList<WebServiceRef> classAnnotations=new ArrayList<>();  WebServiceRef classAnnotation=clazz.getAnnotation(WebServiceRef.class);  if (classAnnotation != null) {    classAnnotations.add(classAnnotation);  }  ArrayList<WebServiceRef> fieldAnnotations=new ArrayList<>();  ArrayList<Field> fields=new ArrayList<>();  for (  Field field : clazz.getDeclaredFields()) {    WebServiceRef fieldAnnotation=field.getAnnotation(WebServiceRef.class);    if (fieldAnnotation != null) {      fieldAnnotations.add(fieldAnnotation);      fields.add(field);    }  }  ArrayList<WebServiceRef> methodAnnotations=new ArrayList<>();  ArrayList<Method> methods=new ArrayList<>();  for (  Method method : clazz.getDeclaredMethods()) {    WebServiceRef methodAnnotation=method.getAnnotation(WebServiceRef.class);    if (methodAnnotation != null) {      methodAnnotations.add(methodAnnotation);      methods.add(method);    }  }  if (!classAnnotations.isEmpty() || !fieldAnnotations.isEmpty()) {    handler=new WebServiceRefHandler(fields.toArray(new Field[0]),(WebServiceRef[])fieldAnnotations.toArray(new WebServiceRef[0]),methods.toArray(new Method[0]),(WebServiceRef[])methodAnnotations.toArray(new WebServiceRef[0]));  }  return handler;}  }
class C{  public void perform(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {  String[] pathElements=getPathElements(req);  if (pathElements.length != 2) {    throw new ServletException("invalid path, must contain shard ID and action, e.g. */s1/update");  }  final ReplicationAction action;  try {    action=ReplicationAction.valueOf(pathElements[ACTION_IDX].toUpperCase(Locale.ENGLISH));  } catch (  IllegalArgumentException e) {    throw new ServletException("Unsupported action provided: " + pathElements[ACTION_IDX]);  }  final Replicator replicator=replicators.get(pathElements[SHARD_IDX]);  if (replicator == null) {    throw new ServletException("unrecognized shard ID " + pathElements[SHARD_IDX]);  }  ServletOutputStream resOut=resp.getOutputStream();  try {switch (action) {case OBTAIN:      final String sessionID=extractRequestParam(req,REPLICATE_SESSION_ID_PARAM);    final String fileName=extractRequestParam(req,REPLICATE_FILENAME_PARAM);  final String source=extractRequestParam(req,REPLICATE_SOURCE_PARAM);InputStream in=replicator.obtainFile(sessionID,source,fileName);try {copy(in,resOut);}  finally {in.close();}break;case RELEASE:replicator.release(extractRequestParam(req,REPLICATE_SESSION_ID_PARAM));break;case UPDATE:String currVersion=req.getParameter(REPLICATE_VERSION_PARAM);SessionToken token=replicator.checkForUpdate(currVersion);if (token == null) {resOut.write(0);} else {resOut.write(1);token.serialize(new DataOutputStream(resOut));}break;}} catch (Exception e) {resp.setStatus(HttpStatus.SC_INTERNAL_SERVER_ERROR);try {ObjectOutputStream oos=new ObjectOutputStream(resOut);oos.writeObject(e);oos.flush();} catch (Exception e2) {throw new IOException("Could not serialize",e2);}} finally {resp.flushBuffer();}}  }
class C{  public ChannelFuture connect() throws InterruptedException {  final Channel channel=connectAsync().sync().channel();  assert (channel != null) : "Channel must be set";  setChannel(channel);  return channel.closeFuture();}  }
class C{  public boolean addAction(Action action){  if (action == null) {    throw new IllegalArgumentException("The given action is null.");  }  if (action.getVerb() == null) {    throw new IllegalArgumentException("the given action object has null verb field.");  } else   if (action.getCommand() == null) {    throw new IllegalArgumentException("the given action object has null command field.");  }  if (actionList == null) {    actionList=new ArrayList<Action>();  }  return actionList.add(new Action(action.getVerb(),action.getCommand(),action.getDescription()));}  }
class C{  public void updateBoolean(String columnName,boolean x) throws SQLException {  checkUpdatable();  getField(columnName).setBoolean(x);}  }
class C{  public FieldData dataAt(int index){  if (mGarbage) {    gc();  }  return mData[index];}  }
class C{  public void addUpdateRemoteCandidates(RemoteCandidate candidate){  logger.info("Update remote candidate for " + toShortString() + ": "+ candidate.getTransportAddress());  List<RemoteCandidate> existingCandidates=new LinkedList<>();synchronized (remoteCandidates) {    existingCandidates.addAll(remoteCandidates);  }synchronized (remoteUpdateCandidates) {    existingCandidates.addAll(remoteUpdateCandidates);    TransportAddress transportAddress=candidate.getTransportAddress();    CandidateType type=candidate.getType();    for (    RemoteCandidate existingCandidate : existingCandidates) {      if (transportAddress.equals(existingCandidate.getTransportAddress()) && type == existingCandidate.getType()) {        logger.info("Not adding duplicate remote candidate: " + candidate.getTransportAddress());        return;      }    }    remoteUpdateCandidates.add(candidate);  }}  }
class C{  protected boolean isCustomerExists(final String customerEmail){  return customerServiceFacade.isCustomerRegistered(ApplicationDirector.getCurrentShop(),customerEmail);}  }
class C{  public static final double asinh(double x){  return (double)Math.log(x + Math.sqrt(x * x + 1));}  }
class C{  private void startThread(){  if (mSearchThread != null) {    LogUtil.d(TAG,"thread is not null");    mSearchThread.setSearchTimes(0);  } else {    LogUtil.d(TAG,"thread is null, create a new thread");    mSearchThread=new SearchThread(mControlPoint);  }  if (mSearchThread.isAlive()) {    LogUtil.d(TAG,"thread is alive");    mSearchThread.awake();  } else {    LogUtil.d(TAG,"start the thread");    mSearchThread.start();  }}  }
class C{  public static double[] product(double[] v,double[][] B){  double[][] A=new double[1][];  A[0]=v;  return product(A,B)[0];}  }
class C{  private FlatGazetteers(){}  }
class C{  public void removeCheckBoxListener(ChangeListener listener){  listenerList.remove(ChangeListener.class,listener);}  }
class C{  @Override public void addChild(FXGNode child){  if (!(delegate instanceof TextNode)) {    throw new FXGException(child.getStartLine(),child.getStartColumn(),"InvalidChildNode",getNodeName(),delegate.getNodeName());  } else   if (delegate instanceof TextNode && child instanceof TextNode) {    ((TextNode)delegate).addTextProperty(getNodeName(),(TextNode)child);  } else {    throw new FXGException(getStartLine(),getStartColumn(),"InvalidChildNode",child.getNodeName(),getNodeName());  }}  }
class C{  protected void sequence_ColonSepTypeRef_VariableDeclaration_VariableDeclarationImpl(ISerializationContext context,VariableDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public boolean isReferenced(){  if (copyOfBook != null)   return copyOfBook.isReferenced();  return isFlags(FLAG_REFERENCED);}  }
class C{  public void addNodes(NodeIterator iterator){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));  if (null != iterator) {    Node obj;    while (null != (obj=iterator.nextNode())) {      addElement(obj);    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(noderemovechildnomodificationallowederr.class,args);}  }
class C{  public static final void sort(Object[] a,int[] b,int length,Comparator cmp){  mergesort(a,b,0,length - 1,cmp);}  }
class C{  private void addDescription(String name,String description,SearchIndexEntryType type,int baseScore){  if (description == null) {    return;  }  String lowerCaseName=name.toLowerCase(Locale.ENGLISH);  StringTokenizer st=new StringTokenizer(description.toLowerCase(Locale.ENGLISH)," #;:,.-!\"");  while (st.hasMoreTokens()) {    String token=st.nextToken();    if (token.equals(lowerCaseName)) {      continue;    }    if (STOP_WORDS.contains(token)) {      continue;    }    index.add(new SearchIndexEntry(token,type.getEntityType(),name,baseScore + type.getMinorScore()));  }}  }
class C{  public VcfRecord addFilter(String filter){  mFilters.remove(VcfUtils.FILTER_PASS);  mFilters.add(filter);  return this;}  }
class C{  private void saveQueue(final boolean full){  if (!mQueueIsSaveable || mPreferences == null) {    return;  }  final SharedPreferences.Editor editor=mPreferences.edit();  if (full) {    final StringBuilder q=new StringBuilder();    int len=mPlayListLen;    for (int i=0; i < len; i++) {      long n=mPlayList[i];      if (n == 0) {        q.append("0;");      } else {        while (n != 0) {          final int digit=(int)(n & 0xf);          n>>>=4;          q.append(HEX_DIGITS[digit]);        }        q.append(";");      }    }    editor.putString("queue",q.toString());    editor.putInt("cardid",mCardId);    if (mShuffleMode != SHUFFLE_NONE) {      len=mHistory.size();      q.setLength(0);      for (int i=0; i < len; i++) {        int n=mHistory.get(i);        if (n == 0) {          q.append("0;");        } else {          while (n != 0) {            final int digit=n & 0xf;            n>>>=4;            q.append(HEX_DIGITS[digit]);          }          q.append(";");        }      }      editor.putString("history",q.toString());    }  }  editor.putInt("curpos",mPlayPos);  if (mPlayer != null && mPlayer.isInitialized()) {    try {      final long pos=mPlayer.position();      editor.putLong("seekpos",pos);    } catch (    Throwable e) {    }  }  editor.putInt("repeatmode",mRepeatMode);  editor.putInt("shufflemode",mShuffleMode);  editor.apply();}  }
class C{  private void repairAction(Action action){  if (action.getTimes() == null)   action.setTimes(1);}  }
class C{  public void showTipOfTheDay(){  DTipOfTheDay dTipOfTheDay=new DTipOfTheDay(frame,applicationSettings.getShowTipsOnStartUp(),res,applicationSettings.getNextTipIndex());  dTipOfTheDay.setLocationRelativeTo(frame);  dTipOfTheDay.setVisible(true);  applicationSettings.setShowTipsOnStartUp(dTipOfTheDay.showTipsOnStartup());  applicationSettings.setNextTipIndex(dTipOfTheDay.nextTipIndex());}  }
class C{  public BatchRequest(Long requestId,String relativeUrl,String method,Set<Header> headers,Long reference,String body){  this.requestId=requestId;  this.relativeUrl=relativeUrl;  this.method=method;  this.headers=headers;  this.reference=reference;  this.body=body;}  }
class C{  private void addAnnotationItem(AnnotationModel annotationModel,Annotation annotation,Map<String,String> decorations){  if (this.hasTextMarkers != null) {    final String className=decorations.get(annotation.getType());    if (className == null) {      return;    }    final Position position=annotationModel.getPosition(annotation);    if (position == null) {      Log.warn(InlineAnnotationRenderer.class,"Can't add annotation with no position");      return;    }    final TextPosition from=this.document.getPositionFromIndex(position.getOffset());    final TextPosition to=this.document.getPositionFromIndex(position.getOffset() + position.getLength());    final MarkerRegistration registration=this.hasTextMarkers.addMarker(new TextRange(from,to),className);    if (registration != null) {      this.markers.put(annotation,registration);    }  }}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"UQADD8");  translateAll(environment,instruction,"UQADD8",instructions);}  }
class C{  private void processName(XmlCursor cursor,ObjArray declarations){  javax.xml.namespace.QName qname=cursor.getName();  String uri=qname.getNamespaceURI();  Set prefixes=(Set)uriToPrefix.get(uri);  if (prefixes == null || prefixes.size() == 0) {    undeclared.add(uri);    if (declarations != null)     declarations.add(new Namespace(lib,uri));  }}  }
class C{  private boolean isInWhiteList(String tpl){  if ((!whiteList.isEmpty() && whiteList.contains(tpl)) || (whiteList.isEmpty())) {    return true;  }  return false;}  }
class C{  private static void addTagPenetration(Person p){  Id id=p.getId();  int subpopulation=getSubpopulationInt(p);  double random=MatsimRandom.getRandom().nextDouble();  double penetration=0.0;switch (subpopulation) {case 0:    penetration=TagPenetration.CAR;  break;case 1:penetration=TagPenetration.COMMERCIAL;break;case 2:penetration=TagPenetration.BUS;break;case 3:penetration=TagPenetration.TAXI;break;case 4:penetration=TagPenetration.EXTERNAL;break;}if (random <= penetration) {sc.getPopulation().getPersonAttributes().putAttribute(id.toString(),"eTag",true);} else {sc.getPopulation().getPersonAttributes().putAttribute(id.toString(),"eTag",false);}}  }
class C{  public static int xDigitToInt(int c,int accumulator){  check: {    if (c <= '9') {      c-='0';      if (0 <= c) {        break check;      }    } else     if (c <= 'F') {      if ('A' <= c) {        c-=('A' - 10);        break check;      }    } else     if (c <= 'f') {      if ('a' <= c) {        c-=('a' - 10);        break check;      }    }    return -1;  }  return (accumulator << 4) | c;}  }
class C{  private void addCurrentName(FormalParamNode node,String name,Renaming rename){  int i=0;  while ((i < rename.identifiers.size()) && (rename.identifiers.elementAt(i) != node)) {    i++;  }  if (i < rename.identifiers.size()) {    rename.newNames.remove(i);    rename.newNames.insertElementAt(name,i);  } else {    if (!name.equals(node.getName().toString())) {      rename.identifiers.add(node);      rename.newNames.add(name);    }  }}  }
class C{  public boolean contains(double latitude,double longitude){  if (latitude <= maxY && longitude <= maxX) {    if (componentContains(latitude,longitude)) {      return true;    }    if (left != null) {      if (left.contains(latitude,longitude)) {        return true;      }    }    if (right != null && ((splitX == false && latitude >= minLat) || (splitX && longitude >= minLon))) {      if (right.contains(latitude,longitude)) {        return true;      }    }  }  return false;}  }
class C{  public static ConfusionMatrix parseFromText(String text) throws IllegalArgumentException {  try {    String[] lines=text.split("\n");    String[] l=lines[0].split("\\s+");    List<String> labels=new ArrayList<>();    for (    String aL : l) {      if (!aL.isEmpty()) {        labels.add(aL);      }    }    ConfusionMatrix result=new ConfusionMatrix();    for (int i=1; i < lines.length; i++) {      String line=lines[i];      String[] split=line.split("\\s+");      List<String> row=new ArrayList<>();      for (      String aSplit : split) {        if (!aSplit.isEmpty()) {          row.add(aSplit);        }      }      String predictedLabel=row.get(0);      for (int r=1; r < row.size(); r++) {        String s=row.get(r);        Integer val=Integer.valueOf(s);        String goldLabel=labels.get(r - 1);        result.increaseValue(predictedLabel,goldLabel,val);      }    }    return result;  } catch (  Exception e) {    throw new IllegalArgumentException("Wrong input format",e);  }}  }
class C{  @Override public void writeValueInsert(){  m_oId=null;  m_jTaxID.setText(null);  m_jSearchkey.setText(null);  m_jName.setText(null);  m_CategoryModel.setSelectedKey(null);  m_jNotes.setText(null);  txtMaxdebt.setText(null);  txtDiscount.setText(null);  txtCurdebt.setText(null);  txtCurdate.setText(null);  m_jVisible.setSelected(true);  jcard.setText(null);  txtFirstName.setText(null);  txtLastName.setText(null);  txtEmail.setText(null);  txtPhone.setText(null);  txtPhone2.setText(null);  txtFax.setText(null);  m_jImage.setImage(null);  txtAddress.setText(null);  txtAddress2.setText(null);  txtPostal.setText(null);  txtCity.setText(null);  txtRegion.setText(null);  txtCountry.setText(null);  j_mDOB.setText(null);  m_jTaxID.setEnabled(true);  m_jSearchkey.setEnabled(true);  m_jName.setEnabled(true);  m_jCategory.setEnabled(true);  m_jNotes.setEnabled(true);  txtMaxdebt.setEnabled(true);  txtDiscount.setEnabled(true);  txtCurdebt.setEnabled(true);  txtCurdate.setEnabled(true);  m_jVisible.setEnabled(true);  jcard.setEnabled(true);  txtFirstName.setEnabled(true);  txtLastName.setEnabled(true);  txtEmail.setEnabled(true);  txtPhone.setEnabled(true);  txtPhone2.setEnabled(true);  txtFax.setEnabled(true);  m_jImage.setEnabled(true);  txtAddress.setEnabled(true);  txtAddress2.setEnabled(true);  txtPostal.setEnabled(true);  txtCity.setEnabled(true);  txtRegion.setEnabled(true);  txtCountry.setEnabled(true);  jButton2.setEnabled(true);  jButton3.setEnabled(true);  jTable1.setEnabled(false);  jTable1.setVisible(false);  j_mDOB.setEnabled(false);}  }
class C{  public boolean isCompatibleRaster(Raster raster){  SampleModel sm=raster.getSampleModel();  SinglePixelPackedSampleModel spsm;  if (sm instanceof SinglePixelPackedSampleModel) {    spsm=(SinglePixelPackedSampleModel)sm;  } else {    return false;  }  if (spsm.getNumBands() != getNumComponents()) {    return false;  }  int[] bitMasks=spsm.getBitMasks();  for (int i=0; i < numComponents; i++) {    if (bitMasks[i] != maskArray[i]) {      return false;    }  }  return (raster.getTransferType() == transferType);}  }
class C{  public ProtocolEncoderException(String message,Throwable cause){  super(message,cause);}  }
class C{  public boolean add(final char[] a){  int i=d, l=a.length;  long bits[]=this.bits;  boolean alreadySet=true;  while (i-- != 0)   alreadySet&=set(bits,hash(a,l,i));  if (!alreadySet)   size++;  return !alreadySet;}  }
class C{  public void testStatsTagHasComma() throws Exception {  if (random().nextBoolean()) {    index();  }  assertQEx("Can't use multiple tags in stats local param until SOLR-6663 is decided",req("q","*:*","facet","true","stats","true","stats.field","{!tag=foo}price_ti","stats.field","{!tag=bar}id","facet.pivot","{!stats=foo,bar}place_t,company_t"),400);}  }
class C{  public RequestCreator skipMemoryCache(){  skipMemoryCache=true;  return this;}  }
class C{  protected Query parseEscapedQuery(ExtendedSolrQueryParser up,String escapedUserQuery,ExtendedDismaxConfiguration config) throws SyntaxError {  Query query=up.parse(escapedUserQuery);  if (query instanceof BooleanQuery) {    BooleanQuery t=new BooleanQuery();    SolrPluginUtils.flattenBooleanQuery(t,(BooleanQuery)query);    SolrPluginUtils.setMinShouldMatch(t,config.minShouldMatch);    query=t;  }  return query;}  }
class C{  private static ValueAnimator loadAnimator(Context context,AttributeSet attrs,ValueAnimator anim) throws NotFoundException {  TypedArray a=context.obtainStyledAttributes(attrs,Animator);  long duration=a.getInt(Animator_duration,0);  long startDelay=a.getInt(Animator_startOffset,0);  int valueType=a.getInt(Animator_valueType,VALUE_TYPE_FLOAT);  if (anim == null) {    anim=new ValueAnimator();  }  int valueFromIndex=Animator_valueFrom;  int valueToIndex=Animator_valueTo;  boolean getFloats=(valueType == VALUE_TYPE_FLOAT);  TypedValue tvFrom=a.peekValue(valueFromIndex);  boolean hasFrom=(tvFrom != null);  int fromType=hasFrom ? tvFrom.type : 0;  TypedValue tvTo=a.peekValue(valueToIndex);  boolean hasTo=(tvTo != null);  int toType=hasTo ? tvTo.type : 0;  if ((hasFrom && (fromType >= TypedValue.TYPE_FIRST_COLOR_INT) && (fromType <= TypedValue.TYPE_LAST_COLOR_INT)) || (hasTo && (toType >= TypedValue.TYPE_FIRST_COLOR_INT) && (toType <= TypedValue.TYPE_LAST_COLOR_INT))) {    getFloats=false;    anim.setEvaluator(new ArgbEvaluator());  }  if (getFloats) {    float valueFrom;    float valueTo;    if (hasFrom) {      if (fromType == TypedValue.TYPE_DIMENSION) {        valueFrom=a.getDimension(valueFromIndex,0f);      } else {        valueFrom=a.getFloat(valueFromIndex,0f);      }      if (hasTo) {        if (toType == TypedValue.TYPE_DIMENSION) {          valueTo=a.getDimension(valueToIndex,0f);        } else {          valueTo=a.getFloat(valueToIndex,0f);        }        anim.setFloatValues(valueFrom,valueTo);      } else {        anim.setFloatValues(valueFrom);      }    } else {      if (toType == TypedValue.TYPE_DIMENSION) {        valueTo=a.getDimension(valueToIndex,0f);      } else {        valueTo=a.getFloat(valueToIndex,0f);      }      anim.setFloatValues(valueTo);    }  } else {    int valueFrom;    int valueTo;    if (hasFrom) {      if (fromType == TypedValue.TYPE_DIMENSION) {        valueFrom=(int)a.getDimension(valueFromIndex,0f);      } else       if ((fromType >= TypedValue.TYPE_FIRST_COLOR_INT) && (fromType <= TypedValue.TYPE_LAST_COLOR_INT)) {        valueFrom=a.getColor(valueFromIndex,0);      } else {        valueFrom=a.getInt(valueFromIndex,0);      }      if (hasTo) {        if (toType == TypedValue.TYPE_DIMENSION) {          valueTo=(int)a.getDimension(valueToIndex,0f);        } else         if ((toType >= TypedValue.TYPE_FIRST_COLOR_INT) && (toType <= TypedValue.TYPE_LAST_COLOR_INT)) {          valueTo=a.getColor(valueToIndex,0);        } else {          valueTo=a.getInt(valueToIndex,0);        }        anim.setIntValues(valueFrom,valueTo);      } else {        anim.setIntValues(valueFrom);      }    } else {      if (hasTo) {        if (toType == TypedValue.TYPE_DIMENSION) {          valueTo=(int)a.getDimension(valueToIndex,0f);        } else         if ((toType >= TypedValue.TYPE_FIRST_COLOR_INT) && (toType <= TypedValue.TYPE_LAST_COLOR_INT)) {          valueTo=a.getColor(valueToIndex,0);        } else {          valueTo=a.getInt(valueToIndex,0);        }        anim.setIntValues(valueTo);      }    }  }  anim.setDuration(duration);  anim.setStartDelay(startDelay);  if (a.hasValue(Animator_repeatCount)) {    anim.setRepeatCount(a.getInt(Animator_repeatCount,0));  }  if (a.hasValue(Animator_repeatMode)) {    anim.setRepeatMode(a.getInt(Animator_repeatMode,ValueAnimator.RESTART));  }  final int resID=a.getResourceId(Animator_interpolator,0);  if (resID > 0) {    anim.setInterpolator(AnimationUtils.loadInterpolator(context,resID));  }  a.recycle();  return anim;}  }
class C{  private static Element createRelationTypeOptionNode(RelationshipType relationshipType,Element controlNode,boolean isA){  Element itemNode=controlNode.createElement(XformBuilder.NAMESPACE_XFORMS,null);  itemNode.setName(XformBuilder.NODE_ITEM);  Element node=itemNode.createElement(XformBuilder.NAMESPACE_XFORMS,null);  node.setName(XformBuilder.NODE_LABEL);  node.addChild(Element.TEXT,"is the " + ((isA) ? relationshipType.getaIsToB() : relationshipType.getbIsToA()) + " ["+ relationshipType.getRelationshipTypeId()+ "]");  itemNode.addChild(Element.ELEMENT,node);  node=itemNode.createElement(XformBuilder.NAMESPACE_XFORMS,null);  node.setName(XformBuilder.NODE_VALUE);  node.addChild(Element.TEXT,relationshipType.getRelationshipTypeId() + ((isA) ? "A" : "B"));  itemNode.addChild(Element.ELEMENT,node);  return itemNode;}  }
class C{  public UnsupportedVersionException(short versionOrdinal){  super(String.valueOf(versionOrdinal));}  }
class C{  private void writeDocument(String fullDocument,String filename){  File outFile=new File(mOutputDir,filename + ".xml");  BufferedWriter bw=null;  try {    bw=new BufferedWriter(new FileWriter(outFile));    bw.append(fullDocument);  } catch (  IOException e) {    e.printStackTrace();    Logger.printError(component,"File " + outFile.getAbsolutePath() + " could not be written.");  } finally {    try {      bw.close();    } catch (    IOException e) {      e.printStackTrace();      Logger.printError(component,"File " + outFile.getAbsolutePath() + " could not be closed.");    }  }}  }
class C{  public ScrolledViewport(JComponent view){  this.view=view;  originalBorder=view.getBorder();  scrollPane=new JScrollPane(view);  ComponentListener listener=new ScrollBarVisibilityChangeListener();  scrollPane.getHorizontalScrollBar().addComponentListener(listener);  scrollPane.getVerticalScrollBar().addComponentListener(listener);}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == VariableEnvironmentElement.class) {switch (baseFeatureID) {default :      return -1;  }}if (baseClass == ThisArgProvider.class) {switch (baseFeatureID) {default :    return -1;}}if (baseClass == FunctionOrFieldAccessor.class) {switch (baseFeatureID) {case N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR__BODY:  return N4JSPackage.N4_METHOD_DECLARATION__BODY;case N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR__LOK:return N4JSPackage.N4_METHOD_DECLARATION__LOK;default :return -1;}}if (baseClass == TypeDefiningElement.class) {switch (baseFeatureID) {case N4JSPackage.TYPE_DEFINING_ELEMENT__DEFINED_TYPE:return N4JSPackage.N4_METHOD_DECLARATION__DEFINED_TYPE;default :return -1;}}if (baseClass == FunctionDefinition.class) {switch (baseFeatureID) {case N4JSPackage.FUNCTION_DEFINITION__FPARS:return N4JSPackage.N4_METHOD_DECLARATION__FPARS;case N4JSPackage.FUNCTION_DEFINITION__RETURN_TYPE_REF:return N4JSPackage.N4_METHOD_DECLARATION__RETURN_TYPE_REF;case N4JSPackage.FUNCTION_DEFINITION__GENERATOR:return N4JSPackage.N4_METHOD_DECLARATION__GENERATOR;case N4JSPackage.FUNCTION_DEFINITION__DECLARED_ASYNC:return N4JSPackage.N4_METHOD_DECLARATION__DECLARED_ASYNC;default :return -1;}}if (baseClass == GenericDeclaration.class) {switch (baseFeatureID) {case N4JSPackage.GENERIC_DECLARATION__TYPE_VARS:return N4JSPackage.N4_METHOD_DECLARATION__TYPE_VARS;default :return -1;}}if (baseClass == TypedElement.class) {switch (baseFeatureID) {case N4JSPackage.TYPED_ELEMENT__DECLARED_TYPE_REF:return N4JSPackage.N4_METHOD_DECLARATION__DECLARED_TYPE_REF;case N4JSPackage.TYPED_ELEMENT__BOGUS_TYPE_REF:return N4JSPackage.N4_METHOD_DECLARATION__BOGUS_TYPE_REF;default :return -1;}}if (baseClass == PropertyNameOwner.class) {switch (baseFeatureID) {case N4JSPackage.PROPERTY_NAME_OWNER__DECLARED_NAME:return N4JSPackage.N4_METHOD_DECLARATION__DECLARED_NAME;default :return -1;}}if (baseClass == MethodDeclaration.class) {switch (baseFeatureID) {default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public boolean isLeftButton(){  return leftButton;}  }
class C{  public static Color processColour(String colourDef,Color defaultColour){  String colourDefBack=new String(colourDef);  Color retC=defaultColour;  if (colourDef.indexOf(",") >= 0) {    try {      int index=colourDef.indexOf(",");      int R=Integer.parseInt(colourDef.substring(0,index));      colourDef=colourDef.substring(index + 1,colourDef.length());      index=colourDef.indexOf(",");      int G=Integer.parseInt(colourDef.substring(0,index));      colourDef=colourDef.substring(index + 1,colourDef.length());      int B=Integer.parseInt(colourDef);      retC=new Color(R,G,B);    } catch (    Exception ex) {      System.err.println("VisualizeUtils: Problem parsing colour property " + "value (" + colourDefBack + ").");    }  } else {    if (colourDef.compareTo("black") == 0) {      retC=Color.black;    } else     if (colourDef.compareTo("blue") == 0) {      retC=Color.blue;    } else     if (colourDef.compareTo("cyan") == 0) {      retC=Color.cyan;    } else     if (colourDef.compareTo("darkGray") == 0) {      retC=Color.darkGray;    } else     if (colourDef.compareTo("gray") == 0) {      retC=Color.gray;    } else     if (colourDef.compareTo("green") == 0) {      retC=Color.green;    } else     if (colourDef.compareTo("lightGray") == 0) {      retC=Color.lightGray;    } else     if (colourDef.compareTo("magenta") == 0) {      retC=Color.magenta;    } else     if (colourDef.compareTo("orange") == 0) {      retC=Color.orange;    } else     if (colourDef.compareTo("pink") == 0) {      retC=Color.pink;    } else     if (colourDef.compareTo("red") == 0) {      retC=Color.red;    } else     if (colourDef.compareTo("white") == 0) {      retC=Color.white;    } else     if (colourDef.compareTo("yellow") == 0) {      retC=Color.yellow;    } else {      System.err.println("VisualizeUtils: colour property name not recognized " + "(" + colourDefBack + ").");    }  }  return retC;}  }
class C{  public int compareTypeSave(Value a,Value b){  return a.compareTypeSave(b,compareMode);}  }
class C{  private void reverseBlock(int from,int to){  while (from < to) {    T old=data[from];    data[from++]=data[to];    data[to--]=old;  }}  }
class C{  public void arrayLoad(final Type type){  mv.visitInsn(type.getOpcode(Opcodes.IALOAD));}  }
class C{  private void updateAttributeInMap(StringSetMap attributes,String attributeName,StringSet attributeValue){  if (attributes.containsKey(attributeName)) {    attributes.get(attributeName).replace(attributeValue);  } else {    attributes.put(attributeName,attributeValue);  }}  }
class C{  protected void handleEvent(AWTEvent event){  if ((framePeer != null) && (event.getID() != PaintEvent.PAINT)) {    if (framePeer.isModalBlocked()) {      return;    }  }switch (event.getID()) {case MouseEvent.MOUSE_PRESSED:case MouseEvent.MOUSE_RELEASED:case MouseEvent.MOUSE_CLICKED:case MouseEvent.MOUSE_MOVED:case MouseEvent.MOUSE_ENTERED:case MouseEvent.MOUSE_EXITED:case MouseEvent.MOUSE_DRAGGED:    if (isFramePeerEnabled()) {      doHandleJavaMouseEvent((MouseEvent)event);    }  break;case KeyEvent.KEY_PRESSED:case KeyEvent.KEY_RELEASED:if (isFramePeerEnabled()) {  doHandleJavaKeyEvent((KeyEvent)event);}break;default :super.handleEvent(event);break;}}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:45.513 -0500",hash_original_method="4B2DA37312785E9B10734C6846FECD1E",hash_generated_method="50A1AD970DEFC6048EA99E78FE6BABC6") private NameValue phone_context() throws ParseException {  lexer.match('=');  char la=lexer.lookAhead(0);  Object value;  if (la == '+') {    lexer.consume(1);    value="+" + base_phone_number();  } else   if (Lexer.isAlphaDigit(la)) {    Token t=lexer.match(Lexer.ID);    value=t.getTokenValue();  } else {    throw new ParseException("Invalid phone-context:" + la,-1);  }  return new NameValue("phone-context",value,false);}  }
class C{  @PostConstruct public void customInit(){  log.debug("Looking for Spring active profiles...");  if (environment.getActiveProfiles().length == 0) {    log.info("No Spring profile configured, running with default configuration.");  } else {    log.info("Detected Spring profile: {}",Arrays.asList(environment.getActiveProfiles()));  }}  }
class C{  public BubbleTransition(int duration){  this.duration=duration;}  }
class C{  private static void sendBugReportWithVector(Context context,String password){  Bitmap screenShot=takeScreenshot();  if (null != screenShot) {    try {      ArrayList<File> logFiles=new ArrayList<>();      File screenFile=new File(LogUtilities.ensureLogDirectoryExists(),"screenshot.jpg");      if (screenFile.exists()) {        screenFile.delete();      }      FileOutputStream screenOutputStream=new FileOutputStream(screenFile);      screenShot.compress(Bitmap.CompressFormat.PNG,50,screenOutputStream);      screenOutputStream.close();      logFiles.add(screenFile);{        File configLogFile=new File(LogUtilities.ensureLogDirectoryExists(),"config.txt");        ByteArrayOutputStream configOutputStream=new ByteArrayOutputStream();        configOutputStream.write(buildBugReportMessage(context).getBytes());        if (configLogFile.exists()) {          configLogFile.delete();        }        FileOutputStream fos=new FileOutputStream(configLogFile);        configOutputStream.writeTo(fos);        configOutputStream.flush();        configOutputStream.close();        logFiles.add(configLogFile);      }{        String message="";        String errorCatLog=LogUtilities.getLogCatError();        String debugCatLog=LogUtilities.getLogCatDebug();        message+="\n\n\n\n\n\n\n\n\n\n------------------ Error logs ------------------\n\n\n\n\n\n\n\n";        message+=errorCatLog;        message+="\n\n\n\n\n\n\n\n\n\n------------------ Debug logs ------------------\n\n\n\n\n\n\n\n";        message+=debugCatLog;        ByteArrayOutputStream logOutputStream=new ByteArrayOutputStream();        logOutputStream.write(message.getBytes());        File debugLogFile=new File(LogUtilities.ensureLogDirectoryExists(),"logcat.txt");        if (debugLogFile.exists()) {          debugLogFile.delete();        }        FileOutputStream fos=new FileOutputStream(debugLogFile);        logOutputStream.writeTo(fos);        logOutputStream.flush();        logOutputStream.close();        logFiles.add(debugLogFile);      }      logFiles.addAll(LogUtilities.getLogsFileList());      MXSession session=Matrix.getInstance(VectorApp.getInstance()).getDefaultSession();      String userName=session.getMyUser().user_id.replace("@","").replace(":","_");      File compressedFile=new File(LogUtilities.ensureLogDirectoryExists(),"VectorBugReport-" + System.currentTimeMillis() + "-"+ userName+ ".zip");      if (compressedFile.exists()) {        compressedFile.delete();      }      ZipFile zipFile=new ZipFile(compressedFile);      ZipParameters parameters=new ZipParameters();      parameters.setCompressionMethod(Zip4jConstants.COMP_DEFLATE);      parameters.setCompressionLevel(Zip4jConstants.DEFLATE_LEVEL_FASTEST);      if (!TextUtils.isEmpty(password)) {        parameters.setEncryptFiles(true);        parameters.setEncryptionMethod(Zip4jConstants.ENC_METHOD_AES);        parameters.setAesKeyStrength(Zip4jConstants.AES_STRENGTH_256);        parameters.setPassword(password);      }      zipFile.addFiles(logFiles,parameters);      final Intent sendIntent=new Intent();      sendIntent.setAction(Intent.ACTION_SEND);      sendIntent.setType("application/zip");      sendIntent.putExtra(Intent.EXTRA_STREAM,Uri.fromFile(compressedFile));      CommonActivityUtils.sendFilesTo(VectorApp.getCurrentActivity(),sendIntent);    } catch (    Exception e) {      Log.e(LOG_TAG,"" + e);    }  }}  }
class C{  private void addNewLine(){  if (addLineDialog == null) {    addLineDialog=new AddParallelLineDialog();  }  addLineDialog.setChartEngine(engine);  addLineDialog.showDialog();  if (horizontalLineRadiobutton.isSelected()) {    setHorizontalLineSelected();  } else   if (verticalLineRadiobutton.isSelected()) {    setVerticalLineSelected();  }}  }
class C{  @Override public String toString(){  StringBuilder result=new StringBuilder();  if (stored()) {    result.append("stored");  }  if (indexOptions != IndexOptions.NONE) {    if (result.length() > 0)     result.append(",");    result.append("indexed");    if (tokenized()) {      result.append(",tokenized");    }    if (storeTermVectors()) {      result.append(",termVector");    }    if (storeTermVectorOffsets()) {      result.append(",termVectorOffsets");    }    if (storeTermVectorPositions()) {      result.append(",termVectorPosition");    }    if (storeTermVectorPayloads()) {      result.append(",termVectorPayloads");    }    if (omitNorms()) {      result.append(",omitNorms");    }    if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {      result.append(",indexOptions=");      result.append(indexOptions);    }  }  if (dimensionCount != 0) {    if (result.length() > 0) {      result.append(",");    }    result.append("pointDimensionCount=");    result.append(dimensionCount);    result.append(",pointNumBytes=");    result.append(dimensionNumBytes);  }  if (docValuesType != DocValuesType.NONE) {    if (result.length() > 0) {      result.append(",");    }    result.append("docValuesType=");    result.append(docValuesType);  }  return result.toString();}  }
class C{  public void removeChannelLimit(){  setMode("-l");}  }
class C{  public void testSuggestions() throws Exception {  CommandTestTools.initFileType();  CommandTestTools.createFileByText(myFixture,"command positional_ar --a");  ensureSuggestions("command","command");  ensureSuggestions("positional_ar","positional_argument","--option-no-argument","--available-option");  ensureSuggestions("--a","--option-no-argument","--available-option");}  }
class C{  public static InputStream newInputStream(String fileName) throws IOException {  return FilePath.get(fileName).newInputStream();}  }
class C{  public static <K extends Comparable<K>,V extends Comparable<V>>Map<K,V> createByValueSortedMap(Map<K,V> map,Comparator<V> comparator){  return new ByValueSortingTreeMap<>(ByValueComparator.create(map,comparator));}  }
class C{  public int compareTo(TypeReference<T> o){  return 0;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public String toPattern(){  return ndf.toPattern();}  }
class C{  public static String toString(final Object object,final ToStringStyle style,final boolean outputTransients,final boolean outputStatics){  return toString(object,style,outputTransients,outputStatics,null);}  }
class C{  private Object readResolve() throws ObjectStreamException {  return RECORDS;}  }
class C{  public static byte[] decode(String s){  return decode(s.toCharArray());}  }
class C{  @AfterClass public static void tearDownClass() throws Exception {}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void testAddEqualScaleNegNeg(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=-10;  String b="747233429293018787918347987234564568";  int bScale=-10;  String c="1.231212478987483735663238072829245553129371991359555E+61";  int cScale=-10;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.add(bNumber);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  public TIntIterator(TIntHash hash){  super(hash);  _hash=hash;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:25.297 -0500",hash_original_method="2D0E3EA51658F535A9A5BDBE5AE078D8",hash_generated_method="CE89804102EE885972F99614C40A8362") public ColorMatrixColorFilter(float[] array){  if (array.length < 20) {    throw new ArrayIndexOutOfBoundsException();  }  native_instance=nativeColorMatrixFilter(array);  nativeColorFilter=nColorMatrixFilter(native_instance,array);}  }
class C{  private double[] findAndEvaluateThreshold(DoubleDynamicHistogram histogram){  int n=histogram.getNumBins();  double[] p1=new double[n];  double[] p2=new double[n];  double[] mu1=new double[n];  double[] mu2=new double[n];  double[] sigma1=new double[n];  double[] sigma2=new double[n];  double[] jt=new double[n];{    MeanVariance mv=new MeanVariance();    DoubleHistogram.Iter forward=histogram.iter();    for (int i=0; forward.valid(); i++, forward.advance()) {      p1[i]=forward.getValue() + ((i > 0) ? p1[i - 1] : 0);      mv.put(i,forward.getValue());      mu1[i]=mv.getMean();      sigma1[i]=mv.getNaiveStddev();    }  }{    MeanVariance mv=new MeanVariance();    DoubleHistogram.Iter backwards=histogram.iter();    backwards.seek(histogram.getNumBins() - 1);    for (int j=n - 1; backwards.valid(); j--, backwards.retract()) {      p2[j]=backwards.getValue() + ((j + 1 < n) ? p2[j + 1] : 0);      mv.put(j,backwards.getValue());      mu2[j]=mv.getMean();      sigma2[j]=mv.getNaiveStddev();    }  }  for (int i=0; i < n; i++) {    jt[i]=1.0 + 2 * (p1[i] * (Math.log(sigma1[i]) - Math.log(p1[i])) + p2[i] * (Math.log(sigma2[i]) - Math.log(p2[i])));  }  int bestpos=-1;  double bestgoodness=Double.NEGATIVE_INFINITY;  double devPrev=jt[1] - jt[0];  for (int i=1; i < jt.length - 1; i++) {    double devCur=jt[i + 1] - jt[i];    if (devCur >= 0 && devPrev <= 0) {      double lowestMaxima=Double.POSITIVE_INFINITY;      for (int j=i - 1; j > 0; j--) {        if (jt[j - 1] < jt[j]) {          lowestMaxima=Math.min(lowestMaxima,jt[j]);          break;        }      }      for (int j=i + 1; j < n - 2; j++) {        if (jt[j + 1] < jt[j]) {          lowestMaxima=Math.min(lowestMaxima,jt[j]);          break;        }      }      double localDepth=lowestMaxima - jt[i];      final double mud=mu1[i] - mu2[i];      double discriminability=mud * mud / (sigma1[i] * sigma1[i] + sigma2[i] * sigma2[i]);      if (Double.isNaN(discriminability)) {        discriminability=-1;      }      double goodness=localDepth * discriminability;      if (goodness > bestgoodness) {        bestgoodness=goodness;        bestpos=i;      }    }    devPrev=devCur;  }  Iter iter=histogram.iter();  iter.seek(bestpos);  return new double[]{iter.getRight(),bestgoodness};}  }
class C{  public void addLast(E e){  Node<E> newNode=new Node<>(e);  if (tail == null) {    head=tail=newNode;  } else {    tail.next=newNode;    tail=tail.next;  }  size++;}  }
class C{  public void resetHandler(final ActionHandler formsActionHandler,final float dpi,final Javascript javascript){  this.formsActionHandler=formsActionHandler;  this.dpi=dpi;  this.javascript=javascript;  if (formFactory != null) {    formFactory.reset(this.getFormResources(),formsActionHandler,pageData,currentPdfFile);  }}  }
class C{  private String decodeTitleWikistyle(String pTitle){  String encodedTitle=pTitle.replace('_',' ');  return encodedTitle;}  }
class C{  public static byte[] decodeWebSafe(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,WEBSAFE_DECODABET);}  }
class C{  public DtlsConnectorConfig build(){  if (config.getSupportedCipherSuites().length == 0) {    determineCipherSuitesFromConfig();  }  if (config.getSupportedCipherSuites().length == 0) {    throw new IllegalStateException("Supported cipher suites must be set either " + "explicitly or implicitly by means of setting the identity or PSK store");  }  for (  CipherSuite suite : config.getSupportedCipherSuites()) {switch (suite) {case TLS_PSK_WITH_AES_128_CCM_8:case TLS_PSK_WITH_AES_128_CBC_SHA256:      verifyPskBasedCipherConfig();    break;case TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8:case TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256:  verifyEcBasedCipherConfig();break;default :break;}}return config;}  }
class C{  public static IBookManager asInterface(IBinder obj){  if ((obj == null)) {    return null;  }  android.os.IInterface iin=obj.queryLocalInterface(DESCRIPTOR);  if (((iin != null) && (iin instanceof IBookManager))) {    return ((IBookManager)iin);  }  return new BookManagerImpl.Proxy(obj);}  }
class C{  public void addPair(Object proxyUserDataA,Object proxyUserDataB){  FixtureProxy proxyA=(FixtureProxy)proxyUserDataA;  FixtureProxy proxyB=(FixtureProxy)proxyUserDataB;  Fixture fixtureA=proxyA.fixture;  Fixture fixtureB=proxyB.fixture;  int indexA=proxyA.childIndex;  int indexB=proxyB.childIndex;  Body bodyA=fixtureA.getBody();  Body bodyB=fixtureB.getBody();  if (bodyA == bodyB) {    return;  }  ContactEdge edge=bodyB.getContactList();  while (edge != null) {    if (edge.other == bodyA) {      Fixture fA=edge.contact.getFixtureA();      Fixture fB=edge.contact.getFixtureB();      int iA=edge.contact.getChildIndexA();      int iB=edge.contact.getChildIndexB();      if (fA == fixtureA && iA == indexA && fB == fixtureB && iB == indexB) {        return;      }      if (fA == fixtureB && iA == indexB && fB == fixtureA && iB == indexA) {        return;      }    }    edge=edge.next;  }  if (bodyB.shouldCollide(bodyA) == false) {    return;  }  if (m_contactFilter != null && m_contactFilter.shouldCollide(fixtureA,fixtureB) == false) {    return;  }  Contact c=pool.popContact(fixtureA,indexA,fixtureB,indexB);  if (c == null) {    return;  }  fixtureA=c.getFixtureA();  fixtureB=c.getFixtureB();  indexA=c.getChildIndexA();  indexB=c.getChildIndexB();  bodyA=fixtureA.getBody();  bodyB=fixtureB.getBody();  c.m_prev=null;  c.m_next=m_contactList;  if (m_contactList != null) {    m_contactList.m_prev=c;  }  m_contactList=c;  c.m_nodeA.contact=c;  c.m_nodeA.other=bodyB;  c.m_nodeA.prev=null;  c.m_nodeA.next=bodyA.m_contactList;  if (bodyA.m_contactList != null) {    bodyA.m_contactList.prev=c.m_nodeA;  }  bodyA.m_contactList=c.m_nodeA;  c.m_nodeB.contact=c;  c.m_nodeB.other=bodyA;  c.m_nodeB.prev=null;  c.m_nodeB.next=bodyB.m_contactList;  if (bodyB.m_contactList != null) {    bodyB.m_contactList.prev=c.m_nodeB;  }  bodyB.m_contactList=c.m_nodeB;  if (!fixtureA.isSensor() && !fixtureB.isSensor()) {    bodyA.setAwake(true);    bodyB.setAwake(true);  }  ++m_contactCount;}  }
class C{  @Override public String toString(){  return super.toString();}  }
class C{  @Override public void onDead(final Killer killer,final boolean remove){  cleanUpSheep();  super.onDead(killer,remove);}  }
class C{  public void sendData(SerialProperties props,String data) throws SerialPortException {  port.setParams(props.getBaudRate(),props.getDataBits(),props.getStopBits(),props.getParity());  port.setFlowControlMode(props.getFlowControl());  log.debug("Sending data over [{}]",portName);  port.writeBytes(SerialUtilities.characterBytes(data));}  }
class C{  private void chooseImage(){  final String[] info=getInfoString().split(";");  put("subclass",imageNames[Math.abs((info[0].hashCode() + info[1].hashCode()) % imageNames.length)]);}  }
class C{  public SocketTimeoutException(){}  }
class C{  public void applyAngularImpulse(float impulse,boolean wake){  body.applyAngularImpulse(impulse);}  }
class C{  public ColumnSelectionMenu(LimeJTable table){  _table=table;  DataLineModel<?,?> model=(DataLineModel<?,?>)_table.getModel();  ActionListener reverter=new ReverterListener();  JMenuItem revert=new SkinMenuItem(REVERT_DEFAULT);  ColumnPreferenceHandler cph=_table.getColumnPreferenceHandler();  TableSettings settings=_table.getTableSettings();  if ((cph == null || cph.isDefault()) && (settings == null || settings.isDefault()))   revert.setEnabled(false); else   revert.addActionListener(reverter);  _menu.add(revert);  if (settings != null) {    JMenu options=createMoreOptions(settings);    _menu.add(options);  }  _menu.addSeparator();  addTableColumnChoices(new SelectionActionListener(),model,table);}  }
class C{  public boolean exceptionOccurred(){  return EXCEPTION_OCCURRED.equals(this.result);}  }
class C{  public static void end(){  hold=false;  while (!list.isEmpty()) {    LoggingEvent evt=list.remove(0);    instance().superappend(evt);  }}  }
class C{  private static void uaRowSumGtLe(MatrixBlock in,MatrixBlock out,double[] bv,BinaryOperator bOp) throws DMLRuntimeException {  int agg0=sumRowSumGtLeColSumLtGe(0.0,bv,bOp);  int m=in.rlen;  for (int i=0; i < m; i++) {    double ai=in.quickGetValue(i,0);    int cnt=(ai == 0) ? agg0 : sumRowSumGtLeColSumLtGe(ai,bv,bOp);    out.quickSetValue(i,0,cnt);  }}  }
class C{  public boolean isEnableSQLDatabaseOutput(){  return enableSQLDatabaseOutput;}  }
class C{  public void stopVibration(){  checkConnection();  final List<BLEAction> list=new ArrayList<>();  list.add(new WriteAction(Profile.UUID_CHAR_CONTROL_POINT,Protocol.STOP_VIBRATION));  queue(list);}  }
class C{  public void vetoableChange(PropertyChangeEvent e){  if (table == null)   return;  log.fine(e.getPropertyName() + "=" + e.getNewValue());  if (e.getOldValue() != e.getNewValue()) {    GridField gridField=table.browserRows.getValue(row,col);    gridField.setValue(e.getNewValue(),true);    if (gridField.getCallout() != null) {      table.processCallOut(gridField,e.getNewValue(),e.getOldValue(),row,col);    }  }}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","ypc");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public static String readFully(final Reader reader) throws IOException {  try {    final StringWriter writer=new StringWriter();    final char[] buffer=new char[1024];    int count;    while ((count=reader.read(buffer)) != -1) {      writer.write(buffer,0,count);    }    return writer.toString();  }  finally {    reader.close();  }}  }
class C{  public NSString(byte[] bytes,final int startIndex,final int endIndex,String encoding) throws UnsupportedEncodingException {  content=new String(bytes,startIndex,endIndex - startIndex,encoding);}  }
class C{  public static ThreadSafeASTBuilder wrap(Object syncObj,IASTBuilder astBuilder){  if (astBuilder != null)   return new ThreadSafeASTBuilder(syncObj,astBuilder); else   return null;}  }
class C{  public void onMissed(){  resolution=Resolution.MISSED;  combatIconTime=System.currentTimeMillis();}  }
class C{  protected int validateRange(int startIndex,int endIndex){  if (startIndex < 0) {    throw new StringIndexOutOfBoundsException(startIndex);  }  if (endIndex > size) {    endIndex=size;  }  if (startIndex > endIndex) {    throw new StringIndexOutOfBoundsException("end < start");  }  return endIndex;}  }
class C{  public void write(int b) throws IOException {  _file.write(b);}  }
class C{  public void removeUpdate(DocumentEvent e){  if (!dirty) {    setDirty(true);  }}  }
class C{  public FilterTest(String name){  super(name);}  }
class C{  public Url(){}  }
class C{  public static List<Volume> findExistingJournalsForCopy(DbClient dbClient,URI cgURI,String rpCopyName){  List<Volume> matchingJournals=new ArrayList<Volume>();  if (dbClient == null || cgURI == null || rpCopyName == null) {    return matchingJournals;  }  Map<Long,Volume> matchingJournalsSortedBySize=new TreeMap<Long,Volume>(Collections.reverseOrder());  List<Volume> cgJournalVolumes=getCgVolumes(dbClient,cgURI,Volume.PersonalityTypes.METADATA.name());  if (cgJournalVolumes != null && !cgJournalVolumes.isEmpty()) {    for (    Volume cgJournalVolume : cgJournalVolumes) {      boolean copyNamesMatch=(NullColumnValueGetter.isNotNullValue(cgJournalVolume.getRpCopyName()) && cgJournalVolume.getRpCopyName().equals(rpCopyName));      if (copyNamesMatch) {        matchingJournalsSortedBySize.put(cgJournalVolume.getProvisionedCapacity(),cgJournalVolume);      }    }  }  if (!matchingJournalsSortedBySize.isEmpty()) {    matchingJournals.addAll(matchingJournalsSortedBySize.values());  }  return matchingJournals;}  }
class C{  public static byte[] decodeBase64(String base64Str){  return DatatypeConverter.parseBase64Binary(base64Str);}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public ImmutableSet<V> removeAll(Object key){  throw new UnsupportedOperationException();}  }
class C{  public static long twoIntsToLong(int highOrder,int lowOrder){  return (((long)highOrder) << 32) | (((long)lowOrder) & 0xFFFFFFFFL);}  }
class C{  protected static Pair<Viewable,List<View>> matchExistingViews(Viewable rootViewable,List<ViewFactory> viewFactories){  Viewable currentParent=rootViewable;  List<View> matchedViewList=new LinkedList<View>();  boolean foundMatch;  if (viewFactories.isEmpty()) {    return new Pair<Viewable,List<View>>(rootViewable,Collections.<View>emptyList());  }  do {    foundMatch=false;    for (    View childView : currentParent.getViews()) {      ViewFactory currentFactory=viewFactories.get(0);      if (!(currentFactory.canReuse(childView))) {        continue;      }      viewFactories.remove(0);      currentParent=childView;      foundMatch=true;      matchedViewList.add(childView);      break;    }  } while ((foundMatch) && (!viewFactories.isEmpty()));  return new Pair<Viewable,List<View>>(currentParent,matchedViewList);}  }
class C{  public CharArrayList copy(){  return (CharArrayList)clone();}  }
class C{  @Override public boolean equals(Object obj){  if ((obj == null) || !(obj.getClass().equals(this.getClass()))) {    return false;  }  AssociatorEvaluation cmp=(AssociatorEvaluation)obj;  String associatingResults1=m_Result.toString().replaceAll("Elapsed time.*","");  String associatingResults2=cmp.m_Result.toString().replaceAll("Elapsed time.*","");  if (!associatingResults1.equals(associatingResults2)) {    return false;  }  return true;}  }
class C{  private AklToussaint(){}  }
class C{  @Override protected void onUnload(){  DOM.setEventListener(inputElem,null);  setValue(getValue());}  }
class C{  public void send(byte[] theBytes,InetAddress theAddress,int thePort){  if (isSocket) {    try {      DatagramPacket myPacket=new DatagramPacket(theBytes,theBytes.length,theAddress,thePort);      send(myPacket);    } catch (    NullPointerException npe) {      Logger.printError("UdpServer.send","a nullpointer exception occured." + npe);    }  } else {    Logger.printWarning("UdpServer.send","DatagramSocket is not running. Packet has not been sent.");  }}  }
class C{  private void doSignal(Node first){  do {    if ((firstWaiter=first.nextWaiter) == null)     lastWaiter=null;    first.nextWaiter=null;  } while (!transferForSignal(first) && (first=firstWaiter) != null);}  }
class C{  public static final void drawCircleFromStartToEnd(GL2 gl,double sx,double sy,double ex,double ey,boolean points,boolean line){  double w=Math.abs(sx - ex);  double h=Math.abs(sy - ey);  RenderUtilities.drawCircleFromTopLeft(gl,sx,sy,w,h,points,line);}  }
class C{  protected int secondChoiceHeuristic(int i2){  for (int i=0; i < 59; i++) {    int i1=m_random.nextInt(m_nInstances);    if ((i1 != i2) && (m_alpha[i1] > 0 && m_alpha[i1] < m_C) || (m_alphaStar[i1] > 0 && m_alphaStar[i1] < m_C)) {      return i1;    }  }  return -1;}  }
class C{  @Deprecated public void insertData(Object[] values,boolean isnew){  Vector<Object> v=new Vector<Object>();  for (int i=0; i < values.length; i++) {    v.add(values[i]);  }  insertData(v,isnew);}  }
class C{  public boolean isSorted(){  return sortByName;}  }
class C{  public T userIp(String value){  setString(GoogleAnalyticsParameter.USER_IP,value);  return (T)this;}  }
class C{  public Setting findSetting(String name){  return settings.get(name);}  }
class C{  public static void checkFieldMinimum(final long value,final long minimum,final String units,final String fieldName){  if (value < minimum) {    throw APIException.badRequests.invalidParameterBelowMinimum(fieldName,value,minimum,units);  }}  }
class C{  @Override public SnmpInformRequest snmpInformRequest(SnmpPeer peer,SnmpInformHandler cb,SnmpOid trapOid,SnmpVarBindList varBindList) throws IllegalStateException, IOException, SnmpStatusException {  SnmpParameters p=(SnmpParameters)peer.getParams();  return snmpInformRequest(peer.getDestAddr(),peer.getDestPort(),p.getInformCommunity(),cb,trapOid,varBindList);}  }
class C{  @NotNull @ObjectiveCName("shareHistoryWithGid:") public Promise<Void> shareHistory(int gid){  return modules.getGroupsModule().shareHistory(gid);}  }
class C{  public BrowserLauncher2WebBrowser(){  try {    browserLauncher=new BrowserLauncher();  } catch (  BrowserLaunchingInitializingException e) {    e.printStackTrace();  }catch (  UnsupportedOperatingSystemException e) {    e.printStackTrace();  }}  }
class C{  protected void createJarFromDirectory(File root,File directory,JarOutputStream jarStream) throws IOException {  byte[] buffer=new byte[40960];  int bytesRead;  File[] filesToAdd=directory.listFiles();  for (  File fileToAdd : filesToAdd) {    if (fileToAdd.isDirectory()) {      createJarFromDirectory(root,fileToAdd,jarStream);    } else {      FileInputStream addFile=new FileInputStream(fileToAdd);      try {        String entryName=fileToAdd.getPath().substring(root.getPath().length() + 1);        entryName=entryName.replace('\\','/');        JarEntry entry=new JarEntry(entryName);        jarStream.putNextEntry(entry);        while ((bytesRead=addFile.read(buffer)) != -1) {          jarStream.write(buffer,0,bytesRead);        }        jarStream.closeEntry();      }  finally {        addFile.close();      }    }  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL__AST_STRUCTURAL_MEMBERS:    getAstStructuralMembers().clear();  return;case TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL__STRUCTURAL_TYPE:setStructuralType((TStructuralType)null);return;case TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL__GEN_STRUCTURAL_MEMBERS:getGenStructuralMembers().clear();return;case TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL__POSTPONED_SUBSTITUTIONS:getPostponedSubstitutions().clear();return;case TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL__DEFINED_TYPING_STRATEGY:setDefinedTypingStrategy(DEFINED_TYPING_STRATEGY_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public LabeledLineConnectionFigure(){}  }
class C{  public static Object castToType(Object object,Class type) throws Throwable {  return DefaultTypeTransformation.castToType(object,type);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public RegressionGenerator(){  super();  setNumExamples(defaultNumExamples());}  }
class C{  public boolean awaitAllNodes(TimeValue timeout) throws InterruptedException {  boolean success=latch.await(timeout.millis(),TimeUnit.MILLISECONDS);  assert !success || pendingNodes.isEmpty() : "response count reached 0 but still waiting for some nodes";  return success;}  }
class C{  private void itemLogInsertName(final DBTransaction transaction,final RPObject item) throws SQLException {  itemLogWriteEntry(transaction,item,null,"register",getAttribute(item,"name"),getAttribute(item,"quantity"),getAttribute(item,"infostring"),getAttribute(item,"bound"));}  }
class C{  public IterationAttachObject(){  super();}  }
class C{  public final void testUnknownBadTransformation(){  final String bad1="ROJCS[\"WGS_1984_UTM_Zone_35S\",GEOGCS[\"GCS_WGS_1984\",DATUM[\"D_WGS_1984\",SPHEROID[\"WGS_1984\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"Degree\",0.017453292519943295]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",27],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",10000000],UNIT[\"Meter\",1]]";  try {    TransformationFactory.getCoordinateTransformation(bad1,TransformationFactory.WGS84);    fail("expected Exception.");  } catch (  IllegalArgumentException expected) {    log.info("Catched expected Exception: " + expected.getMessage());  }  final String bad2="WGS84_UTM1234";  try {    TransformationFactory.getCoordinateTransformation(bad2,TransformationFactory.WGS84);    fail("expected Exception.");  } catch (  IllegalArgumentException expected) {    log.info("Catched expected Exception: " + expected.getMessage());  }}  }
class C{  public void testIntOptions() throws Exception {  DatabaseMetaData dbmd=con.getMetaData();  assertTrue("getDatabaseMajorVersion",dbmd.getDatabaseMajorVersion() >= 0);  assertTrue("getDatabaseMinorVersion",dbmd.getDatabaseMinorVersion() >= 0);  Assert.assertEquals("getResultSetHoldability",ResultSet.HOLD_CURSORS_OVER_COMMIT,dbmd.getResultSetHoldability());  Assert.assertEquals("getSQLStateType",1,dbmd.getSQLStateType());  Assert.assertEquals("getJDBCMajorVersion",3,dbmd.getJDBCMajorVersion());  Assert.assertEquals("getJDBCMinorVersion",0,dbmd.getJDBCMinorVersion());}  }
class C{  public static <E extends Comparable<E>>DoubleLinkedList<E> clone(DoubleLinkedList<E> list){  DoubleLinkedNode<E> firstNode=list.getNode(0);  DoubleLinkedNode<E> curr=firstNode;  while (curr != null) {    DoubleLinkedNode<E> newNode=new DoubleLinkedNode<>(null,curr.item,curr.next);    curr.next=newNode;    curr=curr.next.next;  }  curr=firstNode;  while (curr != null && curr.next != null) {    curr.next.prev=(curr.prev != null) ? curr.prev.next : null;    curr=curr.next.next;  }  curr=firstNode;  DoubleLinkedNode<E> cloneHead=firstNode.next;  DoubleLinkedNode<E> dupNode;  while (curr != null && curr.next != null) {    dupNode=curr.next;    curr.next=(dupNode != null) ? dupNode.next : null;    dupNode.next=(curr.next != null) ? curr.next.next : null;    curr=curr.next;  }  return DoubleLinkedList.getLinkedList(cloneHead);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public void drawScreen(int par1,int par2,float par3){  drawDefaultBackground();  drawBackground(0);  Block block=Block.getBlockFromName(nameBox.getText());  int x=width / 2 - 9;  int y=height / 2 - 32;  ItemStack itemStack=new ItemStack(Item.getItemFromBlock(block));  GlStateManager.enableRescaleNormal();  GlStateManager.enableBlend();  RenderHelper.enableGUIStandardItemLighting();  GlStateManager.tryBlendFuncSeparate(770,771,1,0);  if (itemStack.getItem() != null)   try {    Minecraft.getMinecraft().getRenderItem().renderItemAndEffectIntoGUI(itemStack,x,y);  } catch (  Exception e) {    e.printStackTrace();  } else   mc.fontRendererObj.drawString("?",x + 6,y + 5,10526880);  Minecraft.getMinecraft().getRenderItem().func_175030_a(Minecraft.getMinecraft().fontRendererObj,itemStack,x + 4,y + 4);  RenderHelper.disableStandardItemLighting();  GlStateManager.disableRescaleNormal();  GlStateManager.disableBlend();  try {    drawCenteredString(fontRendererObj,"Name: " + (itemStack.getItem() == null ? block.getLocalizedName() : itemStack.getDisplayName()),width / 2,y + 24,10526880);    drawCenteredString(fontRendererObj,"ID: " + Block.getIdFromBlock(block),width / 2,y + 36,10526880);    drawCenteredString(fontRendererObj,"Block exists: " + (block != null),width / 2,y + 48,10526880);  } catch (  Exception e) {    mc.fontRendererObj.drawString("?",x + 6,y + 5,10526880);    drawCenteredString(fontRendererObj,"Name: unknown",width / 2,y + 24,10526880);    drawCenteredString(fontRendererObj,"ID: unknown",width / 2,y + 36,10526880);    drawCenteredString(fontRendererObj,"Block exists: " + (block != null),width / 2,y + 48,10526880);  }  drawCenteredString(fontRendererObj,"Add a Block",width / 2,20,16777215);  drawString(fontRendererObj,"Name or ID",width / 2 - 100,67,10526880);  nameBox.drawTextBox();  super.drawScreen(par1,par2,par3);}  }
class C{  public void init() throws ServletException {}  }
class C{  public void lockFileSet(String fileSet,FileSetInfo fileSetInfo) throws Exception {  lockFileSet(fileSet,fileSetInfo,CreateMode.EPHEMERAL);}  }
class C{  public static void awaitFileClose(IgfsSecondaryFileSystem igfs,IgfsPath file){  try {    igfs.update(file,Collections.singletonMap("prop","val"));  } catch (  IgniteException ignore) {  }}  }
class C{  private static Step createPredefinedStep() throws Exception {  DataflowPipelineOptions options=buildPipelineOptions();  DataflowPipelineTranslator translator=DataflowPipelineTranslator.fromOptions(options);  Pipeline pipeline=Pipeline.create(options);  String stepName="DoFn1";  pipeline.apply("ReadMyFile",TextIO.Read.from("gs://bucket/in")).apply(stepName,ParDo.of(new NoOpFn())).apply("WriteMyFile",TextIO.Write.to("gs://bucket/out"));  Job job=translator.translate(pipeline,(DataflowRunner)pipeline.getRunner(),Collections.<DataflowPackage>emptyList()).getJob();  assertEquals(13,job.getSteps().size());  Step step=job.getSteps().get(1);  assertEquals(stepName,getString(step.getProperties(),PropertyNames.USER_NAME));  assertAllStepOutputsHaveUniqueIds(job);  return step;}  }
class C{  public void append(String str){  ensureCapacity(count + str.length());  str.getChars(0,str.length(),buf,count);  count+=str.length();}  }
class C{  public static Vector3D midpoint(Vector3D a,Vector3D b){  return a.add(b).scalarMultiply(0.5);}  }
class C{  public ReadInputRegistersResponse(InputRegister[] registers){  super();  setFunctionCode(Modbus.READ_INPUT_REGISTERS);  setDataLength(registers.length * 2 + 1);  byteCount=registers.length * 2;  this.registers=registers;}  }
class C{  static int databaseCheck(String stmt,int offset){  int length=offset + _DATABASE.length;  if (stmt.length() >= length && ParseUtil.compare(stmt,offset,_DATABASE)) {    if (stmt.length() > length && stmt.charAt(length) != ' ') {      return OTHER;    } else {      return DATABASE;    }  }  return OTHER;}  }
class C{  public static boolean canDockEast(List constraints){  for (Iterator iter=constraints.iterator(); iter.hasNext(); ) {    DockConstraint dc=(DockConstraint)iter.next();    if (!dc.canDockEast())     return false;  }  return true;}  }
class C{  public HttpService(final HttpProcessor proc,final ConnectionReuseStrategy connStrategy,final HttpResponseFactory responseFactory){  super();  setHttpProcessor(proc);  setConnReuseStrategy(connStrategy);  setResponseFactory(responseFactory);}  }
class C{  public boolean containsExtensionElementURI(String uri){  if (null == m_ExtensionElementURIs)   return false;  return m_ExtensionElementURIs.contains(uri);}  }
class C{  public void close(){  if (_isFree)   TempCharBuffer.freeAll(_head);  _head=null;  _buffer=null;  _offset=0;  _length=0;}  }
class C{  public void deleteTag(int tagId,int ifdId){  mData.removeTag(getTrueTagKey(tagId),ifdId);}  }
class C{  private static Collection<InetSocketAddress> addresses(String ipStr,String regexDelim,String errMsg) throws IgniteSpiException {  String[] tokens=ipStr.split(regexDelim);  if (tokens.length == 2) {    String addrStr=tokens[0];    String portStr=tokens[1];    if (portStr.contains("..")) {      try {        int port1=Integer.parseInt(portStr.substring(0,portStr.indexOf("..")));        int port2=Integer.parseInt(portStr.substring(portStr.indexOf("..") + 2,portStr.length()));        if (port2 < port1 || port1 == port2 || port1 <= 0 || port2 <= 0)         throw new IgniteSpiException(errMsg);        Collection<InetSocketAddress> res=new ArrayList<>(port2 - port1);        for (int i=port1; i <= port2; i++)         res.add(new InetSocketAddress(addrStr,i));        return res;      } catch (      IllegalArgumentException e) {        throw new IgniteSpiException(errMsg,e);      }    } else {      try {        int port=Integer.parseInt(portStr);        return Collections.singleton(new InetSocketAddress(addrStr,port));      } catch (      IllegalArgumentException e) {        throw new IgniteSpiException(errMsg,e);      }    }  } else   throw new IgniteSpiException(errMsg);}  }
class C{  public GamaShape(final IShape source,final Geometry geom,final Double rotation,final GamaPoint vector,final ILocation newLocation){  this(source,geom);  if (!isPoint() && rotation != null) {    if (vector == null) {      final Coordinate c=geometry.getCentroid().getCoordinate();      geometry.apply(AffineTransform3D.createRotationOz(FastMath.toRadians(rotation),c.x,c.y));    } else {      final Vector3D v3D=new Vector3D(vector.getX(),vector.getY(),vector.getZ());      final Rotation rot=new Rotation(v3D,FastMath.toRadians(rotation));      for (      final Coordinate c : this.getInnerGeometry().getCoordinates()) {        final Vector3D result=rot.applyTo(new Vector3D(c.x,c.y,c.z));        c.x=result.getX();        c.y=result.getY();        c.z=result.getZ();      }    }  }  if (newLocation != null) {    setLocation(newLocation);  }}  }
class C{  public static boolean isFlowedTextMessage(Message m) throws MessagingException {  ContentType ct=new ContentType(m.getContentType());  String format=ct.getParameter("format");  return ct.getBaseType().equals("text/plain") && format != null && format.equalsIgnoreCase("flowed");}  }
class C{  public long timetag(){  return timetag;}  }
class C{  public ByteArrayList(){  this(DEFAULT_CAPACITY);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SexecPackage.STATE_CASE__STATE:    return state != null;case SexecPackage.STATE_CASE__STEP:  return step != null;}return super.eIsSet(featureID);}  }
class C{  @Override protected FlatRStarTreeNode createNewDirectoryNode(){  return new FlatRStarTreeNode(dirCapacity,false);}  }
class C{  @Override public void open(HTraceConfiguration conf) throws IOException, IllegalStateException {  if (!isOpen()) {    topic=conf.get(TOPIC_KEY,DEFAULT_TOPIC);    producer=newProducer(conf);    isOpen=true;  } else {    LOG.warn("Attempted to open an already opened transport");  }}  }
class C{  private static void createLoadFile(String inputFileDef,String outPutFileName){  FileReader fileReader=null;  BufferedReader bufferedReader=null;  try {    if ((inputFileDef == null) || inputFileDef.equals("")) {      return;    }    fileReader=new FileReader(inputFileDef);    bufferedReader=new BufferedReader(fileReader);    String csvLine="";    LinkedList<String> contracts=new LinkedList<String>();    ZonedDateTime startDate=null;    ZonedDateTime endDate=null;    String des=null;    String secType=null;    String exchange=null;    while ((csvLine=bufferedReader.readLine()) != null) {      Scanner scanLine=new Scanner(csvLine);      scanLine.useDelimiter("\\,");      int tokenNumber=0;      while (scanLine.hasNext()) {        tokenNumber++;        String token=scanLine.next().trim();        if (token.length() == 0)         continue;switch (tokenNumber) {case 1:{            if (token.length() == 10) {              startDate=TradingCalendar.getZonedDateTimeFromDateTimeString(token,"MM/dd/yyyy");            }            break;          }case 2:{          if (token.length() == 10) {            endDate=TradingCalendar.getZonedDateTimeFromDateTimeString(token,"MM/dd/yyyy");          }          break;        }case 3:{        des=token.toUpperCase();        break;      }case 4:{      secType=token.toUpperCase();      break;    }case 5:{    exchange=token.toUpperCase();    break;  }default :{  contracts.add(token.toUpperCase());}}}scanLine.close();}StringBuffer outPutFile=new StringBuffer();while (startDate.isBefore(TradingCalendar.addTradingDays(endDate,1))) {if (TradingCalendar.isTradingDay(startDate)) {for (String symbol : contracts) {outPutFile.append(des + "," + symbol+ ","+ secType+ ","+ exchange+ ",,,,,,||"+ TradingCalendar.getFormattedDate(startDate,"MM/dd/yyyy")+ "|\n");}}startDate=TradingCalendar.getNextTradingDay(startDate);}if (null != outPutFileName) {OutputStream out=new FileOutputStream(outPutFileName);out.write(outPutFile.toString().getBytes());out.flush();out.close();}} catch (Exception ex) {ex.printStackTrace();} finally {if (null != fileReader) try {fileReader.close();if (null != bufferedReader) bufferedReader.close();} catch (IOException e) {e.printStackTrace();}}}  }
class C{  public byte[] engineCanonicalizeXPathNodeSet(Set<Node> xpathNodeSet,String inclusiveNamespaces) throws CanonicalizationException {  throw new CanonicalizationException("c14n.Canonicalizer.UnsupportedOperation");}  }
class C{  public void pushTreeChangedEvent(TreeChangedEvent event){  if (inEdit) {    treeChangedEvents.add(event);  } else {    listenerHelper.fireModelChanged(this,event);  }}  }
class C{  private void leave(CompletableFuture<Void> future){  leaveTimeout=context.getThreadContext().schedule(context.getElectionTimeout(),null);  context.getAbstractState().leave(LeaveRequest.builder().withMember(member()).build()).whenComplete(null);}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_create_widget_clock_day_week);}  }
class C{  private void verifyImageAttributes(StandardCard card){  Image image=card.getImage();  if (image != null) {    verifyImageUrl("smallImageUrl",image.getSmallImageUrl());    verifyImageUrl("largeImageUrl",image.getLargeImageUrl());  }}  }
class C{  DhcpDeclinePacket(int transId,InetAddress clientIp,InetAddress yourIp,InetAddress nextIp,InetAddress relayIp,byte[] clientMac){  super(transId,clientIp,yourIp,nextIp,relayIp,clientMac,false);}  }
class C{  @Override public <T extends DataObject>Iterator<T> find(Class<T> clazz,Collection<URI> ids) throws DatabaseException {  return getDbClient().queryIterativeObjects(clazz,ids,true);}  }
class C{  CrowdJob retrieveJob(String jobid) throws HttpServerErrorException {  RestTemplate restTemplate=new RestTemplate();  restTemplate.getMessageConverters().add(new MappingJackson2HttpMessageConverter());  JsonNode result=restTemplate.getForObject(baseJobURL,JsonNode.class,jobid,apiKey);  return new CrowdJob(result);}  }
class C{  synchronized void onTangoFrameAvailable(){  mUpdatePending=true;}  }
class C{  public AbInnerListView(Context context,AttributeSet attrs){  super(context,attrs);}  }
class C{  public static Object toVoid(Object o) throws ExpressionException {  if (o == null)   return null; else   if (o instanceof String && o.toString().length() == 0)   return null; else   if (o instanceof Number && ((Number)o).intValue() == 0)   return null; else   if (o instanceof Boolean && ((Boolean)o).booleanValue() == false)   return null; else   if (o instanceof ObjectWrap)   return toVoid(((ObjectWrap)o).getEmbededObject(null));  throw new CasterException(o,"void");}  }
class C{  public void addBlock(IBlobHandler handler,BlockPosition pos){  AreaBlob blob=blobs.get(handler);  blob.addBlock(pos);}  }
class C{  public Entry(final long h,final byte[] b){  this.h=h;  this.b=b;}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public String[] processOptions(String args[]){  targetPackage="";  compilerEnv.setGenerateDebugInfo(false);  for (int i=0; i < args.length; i++) {    String arg=args[i];    if (!arg.startsWith("-")) {      int tail=args.length - i;      if (targetName != null && tail > 1) {        addError("msg.multiple.js.to.file",targetName);        return null;      }      String[] result=new String[tail];      for (int j=0; j != tail; ++j) {        result[j]=args[i + j];      }      return result;    }    if (arg.equals("-help") || arg.equals("-h") || arg.equals("--help")) {      printHelp=true;      return null;    }    try {      if (arg.equals("-version") && ++i < args.length) {        int version=Integer.parseInt(args[i]);        compilerEnv.setLanguageVersion(version);        continue;      }      if ((arg.equals("-opt") || arg.equals("-O")) && ++i < args.length) {        int optLevel=Integer.parseInt(args[i]);        compilerEnv.setOptimizationLevel(optLevel);        continue;      }    } catch (    NumberFormatException e) {      badUsage(args[i]);      return null;    }    if (arg.equals("-nosource")) {      compilerEnv.setGeneratingSource(false);      continue;    }    if (arg.equals("-debug") || arg.equals("-g")) {      compilerEnv.setGenerateDebugInfo(true);      continue;    }    if (arg.equals("-main-method-class") && ++i < args.length) {      compiler.setMainMethodClass(args[i]);      continue;    }    if (arg.equals("-encoding") && ++i < args.length) {      characterEncoding=args[i];      continue;    }    if (arg.equals("-o") && ++i < args.length) {      String name=args[i];      int end=name.length();      if (end == 0 || !Character.isJavaIdentifierStart(name.charAt(0))) {        addError("msg.invalid.classfile.name",name);        continue;      }      for (int j=1; j < end; j++) {        char c=name.charAt(j);        if (!Character.isJavaIdentifierPart(c)) {          if (c == '.') {            if (j == end - 6 && name.endsWith(".class")) {              name=name.substring(0,j);              break;            }          }          addError("msg.invalid.classfile.name",name);          break;        }      }      targetName=name;      continue;    }    if (arg.equals("-observe-instruction-count")) {      compilerEnv.setGenerateObserverCount(true);    }    if (arg.equals("-package") && ++i < args.length) {      String pkg=args[i];      int end=pkg.length();      for (int j=0; j != end; ++j) {        char c=pkg.charAt(j);        if (Character.isJavaIdentifierStart(c)) {          for (++j; j != end; ++j) {            c=pkg.charAt(j);            if (!Character.isJavaIdentifierPart(c)) {              break;            }          }          if (j == end) {            break;          }          if (c == '.' && j != end - 1) {            continue;          }        }        addError("msg.package.name",targetPackage);        return null;      }      targetPackage=pkg;      continue;    }    if (arg.equals("-extends") && ++i < args.length) {      String targetExtends=args[i];      Class<?> superClass;      try {        superClass=Class.forName(targetExtends);      } catch (      ClassNotFoundException e) {        throw new Error(e.toString());      }      compiler.setTargetExtends(superClass);      continue;    }    if (arg.equals("-implements") && ++i < args.length) {      String targetImplements=args[i];      StringTokenizer st=new StringTokenizer(targetImplements,",");      List<Class<?>> list=new ArrayList<Class<?>>();      while (st.hasMoreTokens()) {        String className=st.nextToken();        try {          list.add(Class.forName(className));        } catch (        ClassNotFoundException e) {          throw new Error(e.toString());        }      }      Class<?>[] implementsClasses=list.toArray(new Class<?>[list.size()]);      compiler.setTargetImplements(implementsClasses);      continue;    }    if (arg.equals("-d") && ++i < args.length) {      destinationDir=args[i];      continue;    }    badUsage(arg);    return null;  }  p(ToolErrorReporter.getMessage("msg.no.file"));  return null;}  }
class C{  protected StringBytesType(SqlType sqlType,Class<?>[] classes){  super(sqlType,classes);}  }
class C{  public Token(int length,byte id){  this.length=length;  this.id=id;}  }
class C{  protected void responseException(Throwable t){  if (syncProtocol != null)   syncProtocol.responseException(t);}  }
class C{  private Region insert(Region x,Region t){  if (t == NULL_NODE) {    t=x;  } else   if (x.orderRelativeTo(t) < 0) {    t.left(insert(x,t.left));  } else   if (x.orderRelativeTo(t) > 0) {    t.right(insert(x,t.right));  } else {    throw new AssertionError("Cannot insert " + x + " into "+ this);  }  t=skew(t);  t=split(t);  return t;}  }
class C{  public void mousePressed(java.awt.event.MouseEvent e){  for (int i=0; i < dndCatchers.size(); i++) {    if (((DefaultDnDCatcher)dndCatchers.get(i)).consume(e))     break;  }}  }
class C{  public void postOrder(){  postOrder(root);}  }
class C{  public void testCqOnAccessorServerWithUpdatesResultingInDestroyedCQEvents() throws Exception {  final Host host=Host.getHost(0);  VM server1=host.getVM(0);  VM server2=host.getVM(1);  VM client=host.getVM(2);  createServer(server1,true);  createServer(server2);  final int port=server1.invoke(null);  final String host0=NetworkUtils.getServerHostName(server1.getHost());  String poolName="testPartitionedCqOnAccessorBridgeServer";  createPool(client,poolName,host0,port);  createCQ(client,poolName,"testCQEvents_0",cqs[0]);  cqHelper.executeCQ(client,"testCQEvents_0",false,null);  final int size=10;  createValues(server1,regions[0],size);  updateValuesToGenerateDestroyCQEvent(server1,regions[0],size);  cqHelper.validateCQ(client,"testCQEvents_0",CqQueryUsingPoolDUnitTest.noTest,size,size,0,size,0,size,(size + size));  createValues(server1,regions[0],size);  cqHelper.validateCQ(client,"testCQEvents_0",CqQueryUsingPoolDUnitTest.noTest,size,size * 2,0,size * 2,0,size,CqQueryUsingPoolDUnitTest.noTest);  cqHelper.closeClient(client);  cqHelper.closeServer(server2);  cqHelper.closeServer(server1);}  }
class C{  private void doDelete(ScriptStep step){  if (aggregatorEditor.isAggregator(step)) {    ScriptStep stepPair=aggregatorEditor.getAggregatorPair(step);    steps.remove(stepPair);    searchBean.removeFromSearchMatch(stepPair);  }  steps.remove(step);  searchBean.removeFromSearchMatch(step);  reindexScriptSteps();}  }
class C{  public void log(String message){  log(INFO,message);}  }
class C{  public double abs(){  return Math.sqrt(Math.pow(a,2) + Math.pow(b,2));}  }
class C{  private boolean addLifeline(Lifeline lifeline) throws SemanticError {  if (lifeline.getDiagram() != this) {    throw new IllegalArgumentException("cannot add a lifeline of another diagram");  }  if (lifelineMap.get(lifeline.getName()) != null) {    throw new SemanticError(provider,lifeline.getName() + " already exists");  }  if (lifeline.hasThread()) {    if (!threaded) {      throw new SemanticError(provider,lifeline.getName() + " cannot have its own thread when multithreading is not enabled");    }    int thread=spawnThread();    first.set(thread,lifeline);    lifeline.setThread(thread);  }  if (!lifeline.isVariable()) {    positionMap.put(lifeline.getName(),add(lifeline));  }  lifelineMap.put(lifeline.getName(),lifeline);  return true;}  }
class C{  public boolean isDepreciated(){  Object oo=get_Value(COLUMNNAME_IsDepreciated);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void cancelCancellable(){  if (timeoutMessageCancellable != null) {    timeoutMessageCancellable.cancel();  }  if (getResponseFuture() != null && !getResponseFuture().isDone()) {    getResponseFuture().cancel(true);  }}  }
class C{  public FastAdapterDialog<Item> withOnPreLongClickListener(FastAdapter.OnLongClickListener<Item> onPreLongClickListener){  this.mFastItemAdapter.withOnPreLongClickListener(onPreLongClickListener);  return this;}  }
class C{  public ColorModel coerceData(WritableRaster raster,boolean isAlphaPremultiplied){  if ((supportsAlpha == false) || (this.isAlphaPremultiplied == isAlphaPremultiplied)) {    return this;  }  int w=raster.getWidth();  int h=raster.getHeight();  int aIdx=raster.getNumBands() - 1;  float normAlpha;  int rminX=raster.getMinX();  int rY=raster.getMinY();  int rX;  if (isAlphaPremultiplied) {switch (transferType) {case DataBuffer.TYPE_BYTE:{        byte pixel[]=null;        byte zpixel[]=null;        float alphaScale=1.0f / ((float)((1 << nBits[aIdx]) - 1));        for (int y=0; y < h; y++, rY++) {          rX=rminX;          for (int x=0; x < w; x++, rX++) {            pixel=(byte[])raster.getDataElements(rX,rY,pixel);            normAlpha=(pixel[aIdx] & 0xff) * alphaScale;            if (normAlpha != 0.0f) {              for (int c=0; c < aIdx; c++) {                pixel[c]=(byte)((pixel[c] & 0xff) * normAlpha + 0.5f);              }              raster.setDataElements(rX,rY,pixel);            } else {              if (zpixel == null) {                zpixel=new byte[numComponents];                java.util.Arrays.fill(zpixel,(byte)0);              }              raster.setDataElements(rX,rY,zpixel);            }          }        }      }    break;case DataBuffer.TYPE_USHORT:{    short pixel[]=null;    short zpixel[]=null;    float alphaScale=1.0f / ((float)((1 << nBits[aIdx]) - 1));    for (int y=0; y < h; y++, rY++) {      rX=rminX;      for (int x=0; x < w; x++, rX++) {        pixel=(short[])raster.getDataElements(rX,rY,pixel);        normAlpha=(pixel[aIdx] & 0xffff) * alphaScale;        if (normAlpha != 0.0f) {          for (int c=0; c < aIdx; c++) {            pixel[c]=(short)((pixel[c] & 0xffff) * normAlpha + 0.5f);          }          raster.setDataElements(rX,rY,pixel);        } else {          if (zpixel == null) {            zpixel=new short[numComponents];            java.util.Arrays.fill(zpixel,(short)0);          }          raster.setDataElements(rX,rY,zpixel);        }      }    }  }break;case DataBuffer.TYPE_INT:{int pixel[]=null;int zpixel[]=null;float alphaScale=1.0f / ((float)((1 << nBits[aIdx]) - 1));for (int y=0; y < h; y++, rY++) {  rX=rminX;  for (int x=0; x < w; x++, rX++) {    pixel=(int[])raster.getDataElements(rX,rY,pixel);    normAlpha=pixel[aIdx] * alphaScale;    if (normAlpha != 0.0f) {      for (int c=0; c < aIdx; c++) {        pixel[c]=(int)(pixel[c] * normAlpha + 0.5f);      }      raster.setDataElements(rX,rY,pixel);    } else {      if (zpixel == null) {        zpixel=new int[numComponents];        java.util.Arrays.fill(zpixel,0);      }      raster.setDataElements(rX,rY,zpixel);    }  }}}break;case DataBuffer.TYPE_SHORT:{short pixel[]=null;short zpixel[]=null;float alphaScale=1.0f / 32767.0f;for (int y=0; y < h; y++, rY++) {rX=rminX;for (int x=0; x < w; x++, rX++) {pixel=(short[])raster.getDataElements(rX,rY,pixel);normAlpha=pixel[aIdx] * alphaScale;if (normAlpha != 0.0f) {  for (int c=0; c < aIdx; c++) {    pixel[c]=(short)(pixel[c] * normAlpha + 0.5f);  }  raster.setDataElements(rX,rY,pixel);} else {  if (zpixel == null) {    zpixel=new short[numComponents];    java.util.Arrays.fill(zpixel,(short)0);  }  raster.setDataElements(rX,rY,zpixel);}}}}break;case DataBuffer.TYPE_FLOAT:{float pixel[]=null;float zpixel[]=null;for (int y=0; y < h; y++, rY++) {rX=rminX;for (int x=0; x < w; x++, rX++) {pixel=(float[])raster.getDataElements(rX,rY,pixel);normAlpha=pixel[aIdx];if (normAlpha != 0.0f) {for (int c=0; c < aIdx; c++) {pixel[c]*=normAlpha;}raster.setDataElements(rX,rY,pixel);} else {if (zpixel == null) {zpixel=new float[numComponents];java.util.Arrays.fill(zpixel,0.0f);}raster.setDataElements(rX,rY,zpixel);}}}}break;case DataBuffer.TYPE_DOUBLE:{double pixel[]=null;double zpixel[]=null;for (int y=0; y < h; y++, rY++) {rX=rminX;for (int x=0; x < w; x++, rX++) {pixel=(double[])raster.getDataElements(rX,rY,pixel);double dnormAlpha=pixel[aIdx];if (dnormAlpha != 0.0) {for (int c=0; c < aIdx; c++) {pixel[c]*=dnormAlpha;}raster.setDataElements(rX,rY,pixel);} else {if (zpixel == null) {zpixel=new double[numComponents];java.util.Arrays.fill(zpixel,0.0);}raster.setDataElements(rX,rY,zpixel);}}}}break;default :throw new UnsupportedOperationException("This method has not been " + "implemented for transferType " + transferType);}} else {switch (transferType) {case DataBuffer.TYPE_BYTE:{byte pixel[]=null;float alphaScale=1.0f / ((float)((1 << nBits[aIdx]) - 1));for (int y=0; y < h; y++, rY++) {rX=rminX;for (int x=0; x < w; x++, rX++) {pixel=(byte[])raster.getDataElements(rX,rY,pixel);normAlpha=(pixel[aIdx] & 0xff) * alphaScale;if (normAlpha != 0.0f) {float invAlpha=1.0f / normAlpha;for (int c=0; c < aIdx; c++) {pixel[c]=(byte)((pixel[c] & 0xff) * invAlpha + 0.5f);}raster.setDataElements(rX,rY,pixel);}}}}break;case DataBuffer.TYPE_USHORT:{short pixel[]=null;float alphaScale=1.0f / ((float)((1 << nBits[aIdx]) - 1));for (int y=0; y < h; y++, rY++) {rX=rminX;for (int x=0; x < w; x++, rX++) {pixel=(short[])raster.getDataElements(rX,rY,pixel);normAlpha=(pixel[aIdx] & 0xffff) * alphaScale;if (normAlpha != 0.0f) {float invAlpha=1.0f / normAlpha;for (int c=0; c < aIdx; c++) {pixel[c]=(short)((pixel[c] & 0xffff) * invAlpha + 0.5f);}raster.setDataElements(rX,rY,pixel);}}}}break;case DataBuffer.TYPE_INT:{int pixel[]=null;float alphaScale=1.0f / ((float)((1 << nBits[aIdx]) - 1));for (int y=0; y < h; y++, rY++) {rX=rminX;for (int x=0; x < w; x++, rX++) {pixel=(int[])raster.getDataElements(rX,rY,pixel);normAlpha=pixel[aIdx] * alphaScale;if (normAlpha != 0.0f) {float invAlpha=1.0f / normAlpha;for (int c=0; c < aIdx; c++) {pixel[c]=(int)(pixel[c] * invAlpha + 0.5f);}raster.setDataElements(rX,rY,pixel);}}}}break;case DataBuffer.TYPE_SHORT:{short pixel[]=null;float alphaScale=1.0f / 32767.0f;for (int y=0; y < h; y++, rY++) {rX=rminX;for (int x=0; x < w; x++, rX++) {pixel=(short[])raster.getDataElements(rX,rY,pixel);normAlpha=pixel[aIdx] * alphaScale;if (normAlpha != 0.0f) {float invAlpha=1.0f / normAlpha;for (int c=0; c < aIdx; c++) {pixel[c]=(short)(pixel[c] * invAlpha + 0.5f);}raster.setDataElements(rX,rY,pixel);}}}}break;case DataBuffer.TYPE_FLOAT:{float pixel[]=null;for (int y=0; y < h; y++, rY++) {rX=rminX;for (int x=0; x < w; x++, rX++) {pixel=(float[])raster.getDataElements(rX,rY,pixel);normAlpha=pixel[aIdx];if (normAlpha != 0.0f) {float invAlpha=1.0f / normAlpha;for (int c=0; c < aIdx; c++) {pixel[c]*=invAlpha;}raster.setDataElements(rX,rY,pixel);}}}}break;case DataBuffer.TYPE_DOUBLE:{double pixel[]=null;for (int y=0; y < h; y++, rY++) {rX=rminX;for (int x=0; x < w; x++, rX++) {pixel=(double[])raster.getDataElements(rX,rY,pixel);double dnormAlpha=pixel[aIdx];if (dnormAlpha != 0.0) {double invAlpha=1.0 / dnormAlpha;for (int c=0; c < aIdx; c++) {pixel[c]*=invAlpha;}raster.setDataElements(rX,rY,pixel);}}}}break;default :throw new UnsupportedOperationException("This method has not been " + "implemented for transferType " + transferType);}}if (!signed) {return new ComponentColorModel(colorSpace,nBits,supportsAlpha,isAlphaPremultiplied,transparency,transferType);} else {return new ComponentColorModel(colorSpace,supportsAlpha,isAlphaPremultiplied,transparency,transferType);}}  }
