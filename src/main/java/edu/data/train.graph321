class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.legendLine=SerialUtilities.readShape(stream);}  }
class C{  public JSONArray(Object array) throws JSONException {  this();  if (array.getClass().isArray()) {    int length=Array.getLength(array);    for (int i=0; i < length; i+=1) {      this.put(JSONObject.wrap(Array.get(array,i)));    }  } else {    throw new JSONException("JSONArray initial value should be a string or collection or array.");  }}  }
class C{  protected void updateInfo(YouTubeVideo youTubeVideo,Context context,MainActivityListener listener,boolean showChannelInfo){  this.youTubeVideo=youTubeVideo;  this.context=context;  this.listener=listener;  updateViewsData(this.youTubeVideo,showChannelInfo);}  }
class C{  public void insertUpdate(DocumentEvent e,Shape a,ViewFactory f){  super.insertUpdate(e,a,f);}  }
class C{  protected void emit_PrimaryTypeExpression_LeftParenthesisKeyword_3_0_p(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  public static boolean isNotPoBox(String s){  if (isEmpty(s))   return defaultEmptyOK;  String sl=s.toLowerCase();  if (sl.indexOf("p.o. b") != -1)   return false;  if (sl.indexOf("p.o.b") != -1)   return false;  if (sl.indexOf("p.o b") != -1)   return false;  if (sl.indexOf("p o b") != -1)   return false;  if (sl.indexOf("po b") != -1)   return false;  if (sl.indexOf("pobox") != -1)   return false;  if (sl.indexOf("po#") != -1)   return false;  if (sl.indexOf("po #") != -1)   return false;  if (sl.indexOf("p.0. b") != -1)   return false;  if (sl.indexOf("p.0.b") != -1)   return false;  if (sl.indexOf("p.0 b") != -1)   return false;  if (sl.indexOf("p 0 b") != -1)   return false;  if (sl.indexOf("p0 b") != -1)   return false;  if (sl.indexOf("p0box") != -1)   return false;  if (sl.indexOf("p0#") != -1)   return false;  if (sl.indexOf("p0 #") != -1)   return false;  return true;}  }
class C{  public void close() throws IOException {  mInputOpen=false;  mPrivateInputOpen=false;  mPrivateOutputOpen=false;  mParent.setRequestInactive();}  }
class C{  protected Timer(final Player player){  timerPlayer=new WeakReference<Player>(player);  playername=player.getName();}  }
class C{  public boolean isCentrallyMaintained(){  Object oo=get_Value(COLUMNNAME_IsCentrallyMaintained);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Option(){}  }
class C{  public boolean isSurroundedByBlock(IBlockState checkBlock,int checkDistance,SurroundCheckType checkType,Random rand,int x,int y,int z){switch (checkType) {case FULL:    for (int ix=-checkDistance; ix <= checkDistance; ix++) {      for (int iz=-checkDistance; iz <= checkDistance; iz++) {        if (x == ix && z == iz) {          continue;        }        if (this.world.getBlockState(new BlockPos(x + ix,y,z + iz)) != checkBlock) {          return false;        }      }    }  break;case CARDINAL:for (int i=checkDistance; i > 0; i--) {  if (this.world.getBlockState(new BlockPos(x,y,z + i)) != checkBlock) {    return false;  }  if (this.world.getBlockState(new BlockPos(x,y,z - i)) != checkBlock) {    return false;  }  if (this.world.getBlockState(new BlockPos(x + i,y,z)) != checkBlock) {    return false;  }  if (this.world.getBlockState(new BlockPos(x - i,y,z)) != checkBlock) {    return false;  }}break;case ORDINAL:for (int i=checkDistance; i > 0; i--) {if (this.world.getBlockState(new BlockPos(x + i,y,z + i)) != checkBlock) {return false;}if (this.world.getBlockState(new BlockPos(x + i,y,z - i)) != checkBlock) {return false;}if (this.world.getBlockState(new BlockPos(x - i,y,z + i)) != checkBlock) {return false;}if (this.world.getBlockState(new BlockPos(x - i,y,z - i)) != checkBlock) {return false;}}break;default :break;}return true;}  }
class C{  public void writeUint32(long n){  check(4);  buffer[write_pos++]=(byte)((n & 0x00ff000000) >> 24);  buffer[write_pos++]=(byte)((n & 0x00ff0000) >> 16);  buffer[write_pos++]=(byte)((n & 0x00ff00) >> 8);  buffer[write_pos++]=(byte)(n & 0x00ff);}  }
class C{  public void emitDirect(int taskId,String streamId,Tuple anchor,List<Object> tuple){  emitDirect(taskId,streamId,Arrays.asList(anchor),tuple);}  }
class C{  public void executeCallback(SceKernelThreadInfo thread,int address,IAction afterAction,boolean returnVoid,boolean preserverCpuState,int registerA0,int registerA1,int registerA2){  if (log.isDebugEnabled()) {    log.debug(String.format("Execute callback 0x%08X($a0=0x%08X, $a1=0x%08X, $a2=0x%08X), afterAction=%s, returnVoid=%b, preserverCpuState=%b",address,registerA0,registerA1,registerA2,afterAction,returnVoid,preserverCpuState));  }  callAddress(thread,address,afterAction,returnVoid,preserverCpuState,new int[]{registerA0,registerA1,registerA2});}  }
class C{  protected Object toType(Calendar value){  return value.getTime();}  }
class C{  public static String relPath(Path parent,Path child){  return parent.relativize(child).toString();}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  gse=createGroovyScriptEngine();  servletContext.log("Groovy servlet initialized on " + gse + ".");}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.ABSTRACT_CATCH_BLOCK__BLOCK:    setBlock((Block)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  private static Stream<?> all(Iterator<Object> i){  requireNonNull(i);  final Iterable<Object> it=null;  return StreamSupport.stream(it.spliterator(),false);}  }
class C{  private static double CallStaticDoubleMethod(JNIEnvironment env,int classJREF,int methodID) throws Exception {  if (VM.VerifyAssertions) {    VM._assert(VM.BuildForPowerPC,ERROR_MSG_WRONG_IMPLEMENTATION);  }  if (traceJNI)   VM.sysWrite("JNI called: CallStaticDoubleMethod  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object returnObj=JNIHelpers.invokeWithDotDotVarArg(methodID,TypeReference.Double);    return Reflection.unwrapDouble(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public AppletApplication(JApplet applet){  this.applet=applet;}  }
class C{  public NewActivityGeneratorAction(final NetworkPanel networkPanel){  super("Add Activity Generator");  if (networkPanel == null) {    throw new IllegalArgumentException("networkPanel must not be null");  }  this.networkPanel=networkPanel;  putValue(SMALL_ICON,ResourceManager.getImageIcon("AddNeuron.png"));}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_inlineStateMachine_1_();}  }
class C{  public void show(){  LinearLayout.LayoutParams lp=(LinearLayout.LayoutParams)mContentView.getLayoutParams();  lp.height=LayoutParams.WRAP_CONTENT;  mContentView.setLayoutParams(lp);}  }
class C{  public static Optional<Path> findCommonDirectory(HiveObjectSpec srcTableSpec,Map<HiveObjectSpec,Partition> specToPartition){  for (  HiveObjectSpec spec : specToPartition.keySet()) {    if (!srcTableSpec.equals(spec.getTableSpec())) {      throw new RuntimeException("Spec " + spec + " does not "+ "match the source table spec "+ srcTableSpec);    }    if (!spec.isPartition()) {      throw new RuntimeException("Partition not specified: " + spec);    }  }  Set<Path> partitionLocations=new HashSet<>();  for (  Map.Entry<HiveObjectSpec,Partition> entry : specToPartition.entrySet()) {    partitionLocations.add(new Path(entry.getValue().getSd().getLocation()));  }  Optional<Path> commonDirectory=ReplicationUtils.getCommonDirectory(partitionLocations);  LOG.debug("Common directory of partitions is " + commonDirectory);  return commonDirectory;}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter three sides for a triangle: ");  double side1=input.nextDouble();  double side2=input.nextDouble();  double side3=input.nextDouble();  System.out.println(isValid(side1,side2,side3) ? "The area of the triangle is " + area(side1,side2,side3) : "Input is invalid");}  }
class C{  public void trustAllSSLHosts(boolean trustAllHosts){  mailSender.trustAllHosts(trustAllHosts);}  }
class C{  public SpringForce(float springCoeff,float defaultLength){  params=new float[]{springCoeff,defaultLength};  minValues=new float[]{DEFAULT_MIN_SPRING_COEFF,DEFAULT_MIN_SPRING_LENGTH};  maxValues=new float[]{DEFAULT_MAX_SPRING_COEFF,DEFAULT_MAX_SPRING_LENGTH};}  }
class C{  protected void drawRhombus(int x,int y,int w,int h,Color fillColor,Paint fillPaint,Color penColor,boolean shadow){  int halfWidth=w / 2;  int halfHeight=h / 2;  Polygon rhombus=new Polygon();  rhombus.addPoint(x + halfWidth,y);  rhombus.addPoint(x + w,y + halfHeight);  rhombus.addPoint(x + halfWidth,y + h);  rhombus.addPoint(x,y + halfHeight);  drawPolygon(rhombus,fillColor,fillPaint,penColor,shadow);}  }
class C{  public void actionPerformed(ActionEvent ae){  if (ae.getSource().equals(this)) {    if (!timer.isRunning()) {      animStartTime=System.nanoTime() / 1000000;      this.setText("Stop Animation");      timer.start();    } else {      timer.stop();      this.setText("Start Animation");      translateY=0;    }  } else {    long currentTime=System.nanoTime() / 1000000;    long totalTime=currentTime - animStartTime;    if (totalTime > animationDuration) {      animStartTime=currentTime;    }    float fraction=(float)totalTime / animationDuration;    fraction=Math.min(1.0f,fraction);    if (fraction < .5f) {      translateY=(int)(MAX_Y * (2 * fraction));    } else {      translateY=(int)(MAX_Y * (2 * (1 - fraction)));    }    repaint();  }}  }
class C{  protected void mergeStyleSelectors(KMLAbstractFeature sourceFeature){  List<KMLAbstractStyleSelector> styleSelectorsCopy=new ArrayList<KMLAbstractStyleSelector>(this.getStyleSelectors().size());  styleSelectorsCopy.addAll(this.getStyleSelectors());  for (  KMLAbstractStyleSelector sourceSelector : sourceFeature.getStyleSelectors()) {    String id=sourceSelector.getId();    if (!WWUtil.isEmpty(id)) {      for (      KMLAbstractStyleSelector existingSelector : styleSelectorsCopy) {        String currentId=existingSelector.getId();        if (!WWUtil.isEmpty(currentId) && currentId.equals(id)) {          this.getStyleSelectors().remove(existingSelector);        }      }    }    this.getStyleSelectors().add(sourceSelector);  }}  }
class C{  public void close() throws IOException {  if (!closed) {    super.close();    closed=true;  }}  }
class C{  private Object _evaluateLeftEqualsRight(Object element,String lvalue,String rvalue){  if (element instanceof List) {    return evaluateLeftEqualsRight((List)element,lvalue,rvalue);  } else {    return evaluateLeftEqualsRight((StructuredContent)element,lvalue,rvalue);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:56.203 -0500",hash_original_method="C4FA8622C3713DE17EDD96169B7EDA22",hash_generated_method="AD64F3275ECFC1471BF78525F8BEF3BD") public AppWidgetProviderInfo(Parcel in){  if (0 != in.readInt()) {    this.provider=new ComponentName(in);  }  this.minWidth=in.readInt();  this.minHeight=in.readInt();  this.minResizeWidth=in.readInt();  this.minResizeHeight=in.readInt();  this.updatePeriodMillis=in.readInt();  this.initialLayout=in.readInt();  if (0 != in.readInt()) {    this.configure=new ComponentName(in);  }  this.label=in.readString();  this.icon=in.readInt();  this.previewImage=in.readInt();  this.autoAdvanceViewId=in.readInt();  this.resizeMode=in.readInt();}  }
class C{  static void printHelpMessage(boolean printToStderr){  initOutput(printToStderr);  outBuf=outBuf.append(getLocalizedMessage("java.launcher.opt.footer",File.pathSeparator));  ostream.println(outBuf.toString());}  }
class C{  public GridCacheQueryMetricsAdapter copy(){  GridCacheQueryMetricsAdapter m=new GridCacheQueryMetricsAdapter();  m.fails.add(fails.sum());  m.minTime.set(minTime.get());  m.maxTime.set(maxTime.get());  m.execs.add(execs.sum());  m.completed.add(completed.sum());  m.sumTime.add(sumTime.sum());  m.avgTime=avgTime;  return m;}  }
class C{  public void testConverterInheritance(UIViewRoot root) throws ConverterException, InstantiationException, IllegalAccessException, ClassNotFoundException {  System.out.println("Testing ConverterInheritance");  Converter converter;  UIInput text=new UIInput();  text.setId("my_date_converter");  root.getChildren().add(text);  application.addConverter(java.lang.Number.class,"javax.faces.convert.NumberConverter");  converter=application.createConverter(java.lang.Integer.class);  assertTrue(converter != null);  assertTrue(converter instanceof javax.faces.convert.IntegerConverter);  application.addConverter(java.util.Date.class,"javax.faces.convert.DateTimeConverter");  converter=null;  converter=application.createConverter(java.sql.Date.class);  assertTrue(converter != null);  application.addConverter(java.util.AbstractCollection.class,"javax.faces.convert.DateTimeConverter");  converter=null;  try {    converter=application.createConverter(java.util.HashSet.class);  } catch (  javax.faces.FacesException fe) {  }  assertTrue(converter != null);  application.addConverter(java.text.CharacterIterator.class,"javax.faces.convert.CharacterConverter");  converter=null;  converter=application.createConverter(java.text.StringCharacterIterator.class);  assertTrue(converter != null);  application.addConverter(java.lang.Cloneable.class,"javax.faces.convert.CharacterConverter");  converter=null;  converter=application.createConverter(java.text.StringCharacterIterator.class);  assertTrue(converter != null);}  }
class C{  public boolean isUseAttrName(){  return !attrNamePatterns.isEmpty();}  }
class C{  public FastCharBuffer append(char[] array){  return append(array,0,array.length);}  }
class C{  public static Date computeEndTimeToAllowParticularNumberOfFirings(OperableTrigger trigg,org.quartz.Calendar cal,int numTimes){  OperableTrigger t=(OperableTrigger)trigg.clone();  if (t.getNextFireTime() == null) {    t.computeFirstFireTime(cal);  }  int c=0;  Date endTime=null;  for (int i=0; i < numTimes; i++) {    Date d=t.getNextFireTime();    if (d != null) {      c++;      t.triggered(cal);      if (c == numTimes)       endTime=d;    } else {      break;    }  }  if (endTime == null)   return null;  endTime=new Date(endTime.getTime() + 1000L);  return endTime;}  }
class C{  public void fillRect(int x,int y,int w,int h,byte alpha){  impl.fillRect(nativeGraphics,x,y,w,h,alpha);}  }
class C{  @Override public synchronized void updateString(int columnIndex,String x) throws SQLException {  checkClosed();  if (!this.onInsertRow) {    if (!this.doingUpdates) {      this.doingUpdates=true;      syncUpdate();    }    this.updater.setString(columnIndex,x);  } else {    this.inserter.setString(columnIndex,x);    if (x == null) {      this.thisRow.setColumnValue(columnIndex - 1,null);    } else {      if (getCharConverter() != null) {        this.thisRow.setColumnValue(columnIndex - 1,StringUtils.getBytes(x,this.charConverter,this.charEncoding,this.connection.getServerCharset(),this.connection.parserKnowsUnicode(),getExceptionInterceptor()));      } else {        this.thisRow.setColumnValue(columnIndex - 1,StringUtils.getBytes(x));      }    }  }}  }
class C{  private void clearDictionaryCache(){  Map<String,Dictionary> dictionaryCaches=surrogateKeyGen.getDictionaryCaches();  List<Dictionary> reverseDictionaries=new ArrayList<>(dictionaryCaches.values());  for (int i=0; i < reverseDictionaries.size(); i++) {    Dictionary dictionary=reverseDictionaries.get(i);    dictionary.clear();  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase test=TestBase.createCaller().init();  test.config.traceTest=true;  test.test();}  }
class C{  public static String replaceEscapedRightAngle(String s){  StringBuilder buf=new StringBuilder();  int i=0;  while (i < s.length()) {    char c=s.charAt(i);    if (c == '<' && s.substring(i).startsWith("<\\\\>")) {      buf.append("<\\\\>");      i+="<\\\\>".length();      continue;    }    if (c == '>' && s.substring(i).startsWith(">\\>")) {      buf.append(">>");      i+=">\\>".length();      continue;    }    if (c == '\\' && s.substring(i).startsWith("\\>>") && !s.substring(i).startsWith("\\>>>")) {      buf.append(">>");      i+="\\>>".length();      continue;    }    buf.append(c);    i++;  }  return buf.toString();}  }
class C{  protected void toggleNodeSelection(TreeNode node){  boolean selected=!node.isSelected();  node.setSelected(selected);  if (!node.isLeaf())   this.setDescendantsSelected(node,selected);  TreeNode parent=node.getParent();  while (parent != null) {    boolean prevSelected=parent.isSelected();    parent.setSelected(selected);    if (!selected && !TreeNode.NOT_SELECTED.equals(parent.isTreeSelected())) {      parent.setSelected(prevSelected);      break;    }    parent=parent.getParent();  }}  }
class C{  private static final String allocateKey(String base,Set<String> allocated){  base=Strings.lower(base);  int counter=0;  String candidate=base;  while (!allocated.add(candidate)) {    candidate=base + "#" + counter;    ++counter;  }  return candidate;}  }
class C{  public void goToNextColor(){  mColorIndex=(mColorIndex + 1) % (mColors.length);}  }
class C{  public final ClassifierSplitModel selectModel(Instances train,Instances test){  return null;}  }
class C{  public void stopEditing(){  if (isEditing()) {    Display.getInstance().stopEditing(this);  }}  }
class C{  public VariableBinding createVariableBinding(){  VariableBindingImpl variableBinding=new VariableBindingImpl();  return variableBinding;}  }
class C{  private void registerAttribute(Model model,Expression path) throws Exception {  String name=path.getFirst();  if (name != null) {    model.registerAttribute(name);  }}  }
class C{  @Override protected void removeAt(int index){  _values[index]=0;  super.removeAt(index);}  }
class C{  public static int minus(Date self,Date then){  Calendar a=(Calendar)Calendar.getInstance().clone();  a.setTime(self);  Calendar b=(Calendar)Calendar.getInstance().clone();  b.setTime(then);  return minus(a,b);}  }
class C{  public static void main(String[] args){  int point=rollTwoDice();  int result=getresult(point);  if (isNaturalOrCraps(result))   printResult(result); else {    rollTillWinOrLose(result);  }}  }
class C{  @Override public void paint(GC gc,Canvas canvas,Rectangle rectangle){  if (!isCollapsed()) {    FontMetrics metrics=gc.getFontMetrics();    if (metrics != null) {      if ((rectangle.height / metrics.getHeight()) <= 1) {        visible=false;        return;      }    }  }  visible=true;  super.paint(gc,canvas,rectangle);}  }
class C{  public static X509Certificate[] loadCertificates(InputStream is) throws CryptoException {  byte[] certsBytes=null;  try {    certsBytes=ReadUtil.readFully(is);    certsBytes=fixCommonInputCertProblems(certsBytes);    is=new ByteArrayInputStream(certsBytes);    CertificateFactory cf=CertificateFactory.getInstance(X509_CERT_TYPE,BOUNCY_CASTLE.jce());    Collection<? extends Certificate> certs=cf.generateCertificates(is);    ArrayList<X509Certificate> loadedCerts=new ArrayList<X509Certificate>();    for (Iterator<? extends Certificate> itr=certs.iterator(); itr.hasNext(); ) {      X509Certificate cert=(X509Certificate)itr.next();      if (cert != null) {        loadedCerts.add(cert);      }    }    return loadedCerts.toArray(new X509Certificate[loadedCerts.size()]);  } catch (  IOException ex) {    throw new CryptoException(res.getString("NoLoadCertificate.exception.message"),ex);  }catch (  NoSuchProviderException e) {    throw new CryptoException(res.getString("NoLoadCertificate.exception.message"),e);  }catch (  CertificateException ex) {    try {      return loadCertificatesPkiPath(new ByteArrayInputStream(certsBytes));    } catch (    CryptoException ex2) {      throw new CryptoException(res.getString("NoLoadCertificate.exception.message"),ex);    }  } finally {    IOUtils.closeQuietly(is);  }}  }
class C{  @NonNull private List<MethodSpec> generateSubtypeValidationMethods(@NonNull RaveIR raveIR){  MethodSpec.Builder builder=MethodSpec.methodBuilder(VALIDATE_METHOD_NAME).addException(RAVE_INVALID_MODEL_EXCEPTION_CLASS).addModifiers(Modifier.PROTECTED).returns(void.class).addAnnotation(Override.class).addParameter(ParameterSpec.builder(Object.class,VALIDATE_METHOD_ARG_NAME).addAnnotation(NonNull.class).build()).addParameter(ParameterSpec.builder(CLASS_PARAMETERIZED_TYPE_NAME,VALIDATE_METHOD_CLAZZ_ARG_NAME).addAnnotation(NonNull.class).build()).addParameter(ParameterSpec.builder(ExclusionStrategy.class,EXCLUSION_STRATEGY_MAP_ARG_NAME).addAnnotation(NonNull.class).build());  builder.beginControlFlow("if (!$L.isInstance($L))",VALIDATE_METHOD_CLAZZ_ARG_NAME,VALIDATE_METHOD_ARG_NAME);  builder.addStatement("throw new $T($L.getClass().getCanonicalName() + $S + $L.getCanonicalName())",IllegalArgumentException.class,VALIDATE_METHOD_ARG_NAME,"is not of type",VALIDATE_METHOD_CLAZZ_ARG_NAME);  builder.endControlFlow();  List<MethodSpec> concreteSpecs=new ArrayList<>(raveIR.getNumClasses());  for (  ClassIR classIR : raveIR.getClassIRs()) {    MethodSpec specificSpec=generateConcreteMethodSpec(classIR);    concreteSpecs.add(specificSpec);    builder.beginControlFlow("if ($L.equals($T.class))",VALIDATE_METHOD_CLAZZ_ARG_NAME,classIR.getTypeMirror());    builder.addStatement("$L(($T) $L, $L)",VALIDATE_METHOD_NAME,classIR.getTypeMirror(),VALIDATE_METHOD_ARG_NAME,EXCLUSION_STRATEGY_MAP_ARG_NAME);    builder.addStatement("return");    builder.endControlFlow();  }  builder.addStatement(" throw new $T($L.getClass().getCanonicalName() + $S + " + "this.getClass().getCanonicalName())",IllegalArgumentException.class,VALIDATE_METHOD_ARG_NAME," is not supported by validator ");  List<MethodSpec> allSpecs=new ArrayList<>();  allSpecs.add(builder.build());  allSpecs.addAll(concreteSpecs);  return allSpecs;}  }
class C{  public void handleRightMouseClick(MouseEvent e){}  }
class C{  void resetVolatileDoubleBuffer(GraphicsConfiguration gc){  Image image=volatileMap.remove(gc);  if (image != null) {    image.flush();  }}  }
class C{  private void drawUnit(final Graphics2D graphics,final Image image,final Point placementPoint2,final Rectangle bounds){  graphics.drawImage(image,placementPoint.x - bounds.x,placementPoint.y - bounds.y,null);}  }
class C{  public void println(boolean x){  out.println(x);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void main(String[] args){  try {    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());  } catch (  Exception e) {  }  Vector<Example> examples=new Vector<Example>();  examples.add(new Example(resourceBundle.getString("introduction.name"),resourceBundle.getString("introduction.description"),null));  examples.add(new TerminalExample(resourceBundle.getString("example1.name"),resourceBundle.getString("example1.description"),Example1.class,"examples/Example1.java"));  examples.add(new TerminalExample(resourceBundle.getString("example2.name"),resourceBundle.getString("example2.description"),Example2.class,"examples/Example2.java"));  examples.add(new TerminalExample(resourceBundle.getString("example3.name"),resourceBundle.getString("example3.description"),Example3.class,"examples/Example3.java"));  examples.add(new TerminalExample(resourceBundle.getString("example4.name"),resourceBundle.getString("example4.description"),Example4.class,"examples/Example4.java"));  examples.add(new Example(resourceBundle.getString("regression1.name"),resourceBundle.getString("regression1.description"),QuarticExample.class,"examples/org/moeaframework/examples/gp/regression/QuarticExample.java","examples/org/moeaframework/examples/gp/regression/SymbolicRegression.java","examples/org/moeaframework/examples/gp/regression/SymbolicRegressionGUI.java"));  examples.add(new Example(resourceBundle.getString("regression2.name"),resourceBundle.getString("regression2.description"),QuinticExample.class,"examples/org/moeaframework/examples/gp/regression/QuinticExample.java","examples/org/moeaframework/examples/gp/regression/SymbolicRegression.java","examples/org/moeaframework/examples/gp/regression/SymbolicRegressionGUI.java"));  examples.add(new Example(resourceBundle.getString("regression3.name"),resourceBundle.getString("regression3.description"),SexticExample.class,"examples/org/moeaframework/examples/gp/regression/SexticExample.java","examples/org/moeaframework/examples/gp/regression/SymbolicRegression.java","examples/org/moeaframework/examples/gp/regression/SymbolicRegressionGUI.java"));  examples.add(new TerminalExample(resourceBundle.getString("lotz.name"),resourceBundle.getString("lotz.description"),LOTZExample.class,"examples/org/moeaframework/examples/ga/LOTZ/LOTZExample.java","examples/org/moeaframework/examples/ga/LOTZ/LOTZ.java"));  examples.add(new TerminalExample(resourceBundle.getString("onemax.name"),resourceBundle.getString("onemax.description"),OneMaxExample.class,"examples/org/moeaframework/examples/ga/onemax/OneMaxExample.java","examples/org/moeaframework/examples/ga/onemax/OneMax.java"));  examples.add(new TerminalExample(resourceBundle.getString("knapsack.name"),resourceBundle.getString("knapsack.description"),KnapsackExample.class,"examples/org/moeaframework/examples/ga/knapsack/KnapsackExample.java","examples/org/moeaframework/examples/ga/knapsack/Knapsack.java","examples/org/moeaframework/examples/ga/knapsack/knapsack.100.2"));  examples.add(new TerminalExample(resourceBundle.getString("ant1.name"),resourceBundle.getString("ant1.description"),SantaFeExample.class,"examples/org/moeaframework/examples/gp/ant/SantaFeExample.java","examples/org/moeaframework/examples/gp/ant/AntProblem.java","examples/org/moeaframework/examples/gp/ant/santafe.trail"));  examples.add(new TerminalExample(resourceBundle.getString("ant2.name"),resourceBundle.getString("ant2.description"),LosAltosExample.class,"examples/org/moeaframework/examples/gp/ant/SantaFeExample.java","examples/org/moeaframework/examples/gp/ant/AntProblem.java","examples/org/moeaframework/examples/gp/ant/losaltos.trail"));  examples.add(new Example(resourceBundle.getString("tsp1.name"),resourceBundle.getString("tsp1.description"),PR76Example.class,"examples/org/moeaframework/examples/ga/tsplib/PR76Example.java","examples/org/moeaframework/examples/ga/tsplib/TSPExample.java","examples/org/moeaframework/examples/ga/tsplib/pr76.tsp"));  examples.add(new Example(resourceBundle.getString("tsp2.name"),resourceBundle.getString("tsp2.description"),A280Example.class,"examples/org/moeaframework/examples/ga/tsplib/A280Example.java","examples/org/moeaframework/examples/ga/tsplib/TSPExample.java","examples/org/moeaframework/examples/ga/tsplib/a280.tsp"));  examples.add(new Example(resourceBundle.getString("diagnostic.name"),resourceBundle.getString("diagnostic.description"),LaunchDiagnosticTool.class));  examples.add(new Example(resourceBundle.getString("conclusion.name"),resourceBundle.getString("conclusion.description"),null));  new ExamplesGUI(examples);}  }
class C{  private boolean isIndexExists(String tableName,String columnName,boolean isTargetOnly){  if (!isTargetOnly) {    Vector<String> v=new Vector<String>(m_source.getIndexes().keySet());    for (Iterator<String> it=v.iterator(); it.hasNext(); ) {      String key=it.next();      DBObject index=m_source.getIndexes().get(key);      HashMap<Integer,DBObjectDefinition> contents=index.getContents();      if (contents.size() == 1) {        Vector<Integer> vc=new Vector<Integer>(contents.keySet());        for (Iterator<Integer> ic=vc.iterator(); ic.hasNext(); ) {          int kc=ic.next();          DBObject_Index_Column indexDetail=(DBObject_Index_Column)contents.get(kc);          String indexTable=indexDetail.getTable();          String indexColumn=indexDetail.getColumn();          if (indexTable.equalsIgnoreCase(tableName) && indexColumn.equalsIgnoreCase(columnName))           return true;        }      }    }    v=new Vector<String>(m_target.getIndexes().keySet());    for (Iterator<String> it=v.iterator(); it.hasNext(); ) {      String key=it.next();      DBObject index=m_target.getIndexes().get(key);      if (index.getCustomizationLevel() > s_parameters.CUSTOMNONE) {        HashMap<Integer,DBObjectDefinition> contents=index.getContents();        if (contents.size() == 1) {          Vector<Integer> vc=new Vector<Integer>(contents.keySet());          for (Iterator<Integer> ic=vc.iterator(); ic.hasNext(); ) {            int kc=ic.next();            DBObject_Index_Column indexDetail=(DBObject_Index_Column)contents.get(kc);            String indexTable=indexDetail.getTable();            String indexColumn=indexDetail.getColumn();            if (indexTable.equalsIgnoreCase(tableName) && indexColumn.equalsIgnoreCase(columnName))             return true;          }        }      }    }    v=new Vector<String>(m_source.getPrimaryKeys().keySet());    for (Iterator<String> it=v.iterator(); it.hasNext(); ) {      String key=it.next();      DBObject pk=m_source.getPrimaryKeys().get(key);      HashMap<Integer,DBObjectDefinition> contents=pk.getContents();      if (contents.size() == 1) {        Vector<Integer> vc=new Vector<Integer>(contents.keySet());        for (Iterator<Integer> ic=vc.iterator(); ic.hasNext(); ) {          int kc=ic.next();          DBObject_PrimaryKey_Column pkDetail=(DBObject_PrimaryKey_Column)contents.get(kc);          String pkTable=pkDetail.getTable();          String pkColumn=pkDetail.getColumn();          if (pkTable.equalsIgnoreCase(tableName) && pkColumn.equalsIgnoreCase(columnName))           return true;        }      }    }    v=new Vector<String>(m_target.getPrimaryKeys().keySet());    for (Iterator<String> it=v.iterator(); it.hasNext(); ) {      String key=it.next();      DBObject pk=m_target.getPrimaryKeys().get(key);      if (pk.getCustomizationLevel() > s_parameters.CUSTOMNONE) {        HashMap<Integer,DBObjectDefinition> contents=pk.getContents();        if (contents.size() == 1) {          Vector<Integer> vc=new Vector<Integer>(contents.keySet());          for (Iterator<Integer> ic=vc.iterator(); ic.hasNext(); ) {            int kc=ic.next();            DBObject_PrimaryKey_Column pkDetail=(DBObject_PrimaryKey_Column)contents.get(kc);            String pkTable=pkDetail.getTable();            String pkColumn=pkDetail.getColumn();            if (pkTable.equalsIgnoreCase(tableName) && pkColumn.equalsIgnoreCase(columnName))             return true;          }        }      }    }  } else {    Vector<String> v=new Vector<String>(m_target.getIndexes().keySet());    for (Iterator<String> it=v.iterator(); it.hasNext(); ) {      String key=it.next();      DBObject index=m_target.getIndexes().get(key);      HashMap<Integer,DBObjectDefinition> contents=index.getContents();      if (contents.size() == 1) {        Vector<Integer> vc=new Vector<Integer>(contents.keySet());        for (Iterator<Integer> ic=vc.iterator(); ic.hasNext(); ) {          int kc=ic.next();          DBObject_Index_Column indexDetail=(DBObject_Index_Column)contents.get(kc);          String indexTable=indexDetail.getTable();          String indexColumn=indexDetail.getColumn();          if (indexTable.equalsIgnoreCase(tableName) && indexColumn.equalsIgnoreCase(columnName))           return true;        }      }    }    v=new Vector<String>(m_target.getPrimaryKeys().keySet());    for (Iterator<String> it=v.iterator(); it.hasNext(); ) {      String key=it.next();      DBObject pk=m_target.getPrimaryKeys().get(key);      HashMap<Integer,DBObjectDefinition> contents=pk.getContents();      if (contents.size() == 1) {        Vector<Integer> vc=new Vector<Integer>(contents.keySet());        for (Iterator<Integer> ic=vc.iterator(); ic.hasNext(); ) {          int kc=ic.next();          DBObject_PrimaryKey_Column pkDetail=(DBObject_PrimaryKey_Column)contents.get(kc);          String pkTable=pkDetail.getTable();          String pkColumn=pkDetail.getColumn();          if (pkTable.equalsIgnoreCase(tableName) && pkColumn.equalsIgnoreCase(columnName))           return true;        }      }    }  }  if (m_tempIndexes == null)   m_tempIndexes=new HashMap<String,DBObject>();  Vector<String> v=new Vector<String>(m_tempIndexes.keySet());  for (Iterator<String> it=v.iterator(); it.hasNext(); ) {    String key=it.next();    DBObject index=m_tempIndexes.get(key);    DBObject_Index_Column indexDetail=(DBObject_Index_Column)index.getContents().get(0);    String indexTable=indexDetail.getTable();    String indexColumn=indexDetail.getColumn();    if (indexTable.equalsIgnoreCase(tableName) && indexColumn.equalsIgnoreCase(columnName))     return true;  }  return false;}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length > 0 && args[0].equals("-Xjdb")) {    String[] newargs=new String[args.length + 2];    Class<?> c=Class.forName("com.sun.tools.example.debug.tty.TTY");    Method method=c.getDeclaredMethod("main",new Class[]{args.getClass()});    method.setAccessible(true);    System.arraycopy(args,1,newargs,3,args.length - 1);    newargs[0]="-connect";    newargs[1]="com.sun.jdi.CommandLineLaunch:options=-esa -ea:com.sun.tools...";    newargs[2]="com.sun.tools.javac.Main";    method.invoke(null,new Object[]{newargs});  } else {    int code=compile(args);    System.exit(code);  }}  }
class C{  private static int checkTypeArguments(final String signature,int pos){  pos=checkChar('<',signature,pos);  pos=checkTypeArgument(signature,pos);  while (getChar(signature,pos) != '>') {    pos=checkTypeArgument(signature,pos);  }  return pos + 1;}  }
class C{  private boolean askToSave(){  if (mainFrame.isProjectChanged()) {    int response=JOptionPane.showConfirmDialog(mainFrame,L10N.getLocalString("dlg.save_current_changes","The current project has been changed, Save current changes?"),L10N.getLocalString("dlg.save_changes","Save Changes?"),JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.WARNING_MESSAGE);    if (response == JOptionPane.YES_OPTION) {      if (mainFrame.getSaveFile() != null) {        save();      } else {        saveAs();      }    } else     if (response == JOptionPane.CANCEL_OPTION) {      return true;    }  }  return false;}  }
class C{  @Deprecated public static WorkflowAnnotations lookupOperatorAnnotations(Operator operator){  return AnnotationProcessXMLFilter.lookupOperatorAnnotations(operator);}  }
class C{  public void bindPhoto(Bitmap photoBitmap){  boolean currentDrawableIsBitmapDrawable=mDrawable instanceof BitmapDrawable;  boolean changed=!(currentDrawableIsBitmapDrawable);  if (mDrawable != null && currentDrawableIsBitmapDrawable) {    final Bitmap drawableBitmap=((BitmapDrawable)mDrawable).getBitmap();    if (photoBitmap == drawableBitmap) {      return;    }    changed=photoBitmap != null && (mDrawable.getIntrinsicWidth() != photoBitmap.getWidth() || mDrawable.getIntrinsicHeight() != photoBitmap.getHeight());    mMinScale=0f;    mDrawable=null;  }  if (mDrawable == null && photoBitmap != null) {    mDrawable=new BitmapDrawable(getResources(),photoBitmap);  }  configureBounds(changed);  invalidate();}  }
class C{  public void updateDrivesCache(){  if (hasWorldObj() && worldObj.isRemote)   return;  drives.clear();  prototypes.clear();  for (  TileEntityDriveBay tedb : driveBays) {    if (tedb.isInvalid())     continue;    for (    ItemStack is : tedb) {      drives.add(is);      ItemDrive id=(ItemDrive)is.getItem();      prototypes.addAll(id.getPrototypes(is));    }  }  Collections.sort(drives,new DriveComparator());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:53.371 -0500",hash_original_method="0A539B1C4B2E8E617EDD9C83DE1E1B83",hash_generated_method="7ED872B6528BD6FE362BF16B9729A4E5") public Drawable loadIcon(PackageManager pm){  return mReceiver.loadIcon(pm);}  }
class C{  public void removeTitlePrefix(String prfx){  titlePrefix.remove(prfx);  firePropertyChange(TITLE_PREFIX,null,titlePrefix);}  }
class C{  @Override public void unbindDisappearEvent(WXComponent component){  setWatch(AppearanceHelper.DISAPPEAR,component,false);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col;  float progress=0;  double z, z2, zMin;  int x, y, a, b, i;  double h=0;  int whichCell;  double infVal=9999999;  int[] dX=new int[]{-1,-1,0,1,1,1,0,-1};  int[] dY=new int[]{0,-1,-1,-1,0,1,1,1};  int[] Gx=new int[]{1,1,0,1,1,1,0,1};  int[] Gy=new int[]{0,1,1,1,0,1,1,1};  double gridRes;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    double noData=image.getNoDataValue();    gridRes=(image.getCellSizeX() + image.getCellSizeY()) / 2;    WhiteboxRaster outputImage=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,infVal);    outputImage.setPreferredPalette("spectrum.pal");    WhiteboxRaster Rx=new WhiteboxRaster(outputHeader.replace(".dep","_temp1.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    Rx.isTemporaryFile=true;    WhiteboxRaster Ry=new WhiteboxRaster(outputHeader.replace(".dep","_temp2.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    Ry.isTemporaryFile=true;    double[] data;    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != 0) {          outputImage.setValue(row,col,0);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=outputImage.getValue(row,col);        if (z != 0) {          zMin=infVal;          whichCell=-1;          for (i=0; i <= 3; i++) {            x=col + dX[i];            y=row + dY[i];            z2=outputImage.getValue(y,x);            if (z2 != noData) {switch (i) {case 0:                h=2 * Rx.getValue(y,x) + 1;              break;case 1:            h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);          break;case 2:        h=2 * Ry.getValue(y,x) + 1;      break;case 3:    h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);  break;}z2+=h;if (z2 < zMin) {zMin=z2;whichCell=i;}}}if (zMin < z) {outputImage.setValue(row,col,zMin);x=col + dX[whichCell];y=row + dY[whichCell];Rx.setValue(row,col,Rx.getValue(y,x) + Gx[whichCell]);Ry.setValue(row,col,Ry.getValue(y,x) + Gy[whichCell]);}}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (rows - 1));updateProgress((int)progress);}for (row=rows - 1; row >= 0; row--) {for (col=cols - 1; col >= 0; col--) {z=outputImage.getValue(row,col);if (z != 0) {zMin=infVal;whichCell=-1;for (i=4; i <= 7; i++) {x=col + dX[i];y=row + dY[i];z2=outputImage.getValue(y,x);if (z2 != noData) {switch (i) {case 5:h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);break;case 4:h=2 * Rx.getValue(y,x) + 1;break;case 6:h=2 * Ry.getValue(y,x) + 1;break;case 7:h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);break;}z2+=h;if (z2 < zMin) {zMin=z2;whichCell=i;}}}if (zMin < z) {outputImage.setValue(row,col,zMin);x=col + dX[whichCell];y=row + dY[whichCell];Rx.setValue(row,col,Rx.getValue(y,x) + Gx[whichCell]);Ry.setValue(row,col,Ry.getValue(y,x) + Gy[whichCell]);}}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * (rows - 1 - row) / (rows - 1));updateProgress((int)progress);}for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {z=image.getValue(row,col);if (z != noData) {z=outputImage.getValue(row,col);outputImage.setValue(row,col,Math.sqrt(z) * gridRes);} else {outputImage.setValue(row,col,noData);}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (rows - 1));updateProgress((int)progress);}outputImage.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");outputImage.addMetadataEntry("Created on " + new Date());image.close();outputImage.close();Rx.close();Ry.close();returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public void addDescription(String description){  String desc=getDescription();  if (desc == null)   setDescription(description); else   setDescription(desc + " | " + description);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getComplexAttribute_();}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case GamlPackage.ARGUMENT_DEFINITION__TYPE:    setType((Expression)newValue);  return;case GamlPackage.ARGUMENT_DEFINITION__DEFAULT:setDefault((Expression)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private static void restoreFromBackup(final File backupDir) throws SQLException {  final String url="jdbc:derby:ta_users;restoreFrom=" + backupDir.getAbsolutePath();  final Properties props=getDbProps();  final Connection con=DriverManager.getConnection(url,props);  con.close();}  }
class C{  @SuppressWarnings("unchecked") private int insertFromSelect(String sql,Insert insert,String index,int maxRequestsPerBulk) throws SQLException {  queryState.buildRequest(sql,insert.getQuery().getQueryBody(),index);  String[] indexAndType=this.getIndexAndType(insert.getTarget().toString(),sql,"into\\s+","\\s+select",index);  index=indexAndType[0];  String type=indexAndType[1];  ResultSet rs=queryState.execute(false);  Heading headingToInsert=headingFromResultSet(rs.getMetaData());  HashMap<String,Object> fieldValues=new HashMap<String,Object>();  List<IndexRequestBuilder> indexReqs=new ArrayList<IndexRequestBuilder>();  int indexCount=0;  while (rs != null) {    while (rs.next()) {      for (      Column col : headingToInsert.columns()) {        String label=col.getLabel();        Object value=rs.getObject(label);        if (value == null)         continue;        Map<String,Object> nested=fieldValues;        if (label.contains(".")) {          String[] parts=label.split("\\.");          for (int i=0; i < parts.length - 1; i++) {            String part=parts[i];            if (!nested.containsKey(part))             nested.put(part,new HashMap<String,Object>());            nested=(Map<String,Object>)nested.get(part);          }          label=parts[parts.length - 1];        }        if (value instanceof ResultSet) {          value=buildSource((ResultSet)value);        } else         if (value instanceof Array) {          Object[] arrayVal=(Object[])((Array)value).getArray();          if (arrayVal.length > 0 && arrayVal[0] instanceof ResultSet) {            for (int i=0; i < arrayVal.length; i++) {              arrayVal[i]=buildSource((ResultSet)arrayVal[i]);            }          }          value=arrayVal;        }        nested.put(label,value);      }      IndexRequestBuilder indexReq=client.prepareIndex().setIndex(index).setType(type).setSource(fieldValues);      indexReqs.add(indexReq);      if (indexReqs.size() >= maxRequestsPerBulk) {        indexCount+=this.execute(indexReqs,maxRequestsPerBulk);        indexReqs.clear();      }      fieldValues=new HashMap<String,Object>();    }    rs.close();    rs=queryState.moreResults(false);  }  if (indexReqs.size() > 0)   indexCount+=this.execute(indexReqs,maxRequestsPerBulk);  return indexCount;}  }
class C{  public static <T>void write(BufferedWriter writer,DatabaseTableConfig<T> config) throws SQLException {  try {    writeConfig(writer,config);  } catch (  IOException e) {    throw SqlExceptionUtil.create("Could not write config to writer",e);  }}  }
class C{  public static byte[] intTo2bytes(int num){  byte[] array=new byte[2];  array[0]=(byte)((num & 0xff00) >> 8);  array[1]=(byte)(num & 0xff);  return array;}  }
class C{  public boolean isIncludeExternalDTDDeclarations(){  return includeExternalDTDDeclarations;}  }
class C{  public ParsedBooleanQuery(TupleExpr tupleExpr){  super(tupleExpr);}  }
class C{  public IllegalFormatConversionCategoryException(ConversionCategory expected,ConversionCategory found){  super(expected.chars.length() == 0 ? '-' : expected.chars.charAt(0),found.types == null ? Object.class : found.types[0]);  this.expected=expected;  this.found=found;}  }
class C{  public GeolocSharingDeleteTask(GeolocSharingServiceImpl geolocSharingService,RichcallService richcallService,LocalContentResolver contentResolver,String transferId){  super(contentResolver,GeolocSharingData.CONTENT_URI,GeolocSharingData.KEY_SHARING_ID,GeolocSharingData.KEY_CONTACT,null,transferId);  mGeolocSharingService=geolocSharingService;  mRichcallService=richcallService;}  }
class C{  protected boolean haveSharedCellsRaw(ObjectMatrix3D other){  if (other instanceof SelectedDenseObjectMatrix3D) {    SelectedDenseObjectMatrix3D otherMatrix=(SelectedDenseObjectMatrix3D)other;    return this.elements == otherMatrix.elements;  } else   if (other instanceof DenseObjectMatrix3D) {    DenseObjectMatrix3D otherMatrix=(DenseObjectMatrix3D)other;    return this.elements == otherMatrix.elements;  }  return false;}  }
class C{  public void writeAnnotation(AnnotatedOutput out){  out.annotate(toHuman());}  }
class C{  private void updateSecondaryIndices(Entity entity,IEntityClass entityClass,Long deviceKey){  for (  DeviceIndex index : secondaryIndexMap.values()) {    index.updateIndex(entity,deviceKey);  }  ClassState state=getClassState(entityClass);  for (  DeviceIndex index : state.secondaryIndexMap.values()) {    index.updateIndex(entity,deviceKey);  }}  }
class C{  public DiskCacheStore(String cacheDirectory){  if (TextUtils.isEmpty(cacheDirectory))   throw new IllegalArgumentException("The cacheDirectory can't be null.");  mLock=new ReentrantLock();  mEncryption=new Encryption(encryptionKey);  mCacheDirectory=cacheDirectory;}  }
class C{  public void printString(String v,int offset,int length) throws IOException {  for (int i=0; i < length; i++) {    char ch=v.charAt(i + offset);    if (ch < 0x80)     os.write(ch); else     if (ch < 0x800) {      os.write(0xc0 + ((ch >> 6) & 0x1f));      os.write(0x80 + (ch & 0x3f));    } else {      os.write(0xe0 + ((ch >> 12) & 0xf));      os.write(0x80 + ((ch >> 6) & 0x3f));      os.write(0x80 + (ch & 0x3f));    }  }}  }
class C{  public boolean isIncludeFilterActive(){  return incFilterGroups != null;}  }
class C{  public void initialize(){  mImdnManager.start();}  }
class C{  public static boolean openUrlPrompt(Component parent,String url,boolean forcePrompt){  if (url == null) {    return false;  }  List<String> list=new ArrayList<>();  list.add(url);  return openUrlsPrompt(parent,list,forcePrompt);}  }
class C{  public JSONArray put(int value){  put(new Integer(value));  return this;}  }
class C{  @RpcMethod public CreateImageFromVmResponse createImageFromVm(String vmId,String imageId,String datastore,String tmpImagePath) throws InterruptedException, RpcException {  SyncHandler<CreateImageFromVmResponse,Host.AsyncClient.create_image_from_vm_call> syncHandler=new SyncHandler<>();  createImageFromVm(vmId,imageId,datastore,tmpImagePath,syncHandler);  syncHandler.await();  return ResponseValidator.checkCreateImageResponse(syncHandler.getResponse());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:41.460 -0500",hash_original_method="F58589DCA46C15E931642ACA6B53E7A5",hash_generated_method="1DECEA3C69BD75930A2202322039D60A") public static char gsmExtendedToChar(int gsmChar){  if (gsmChar == GSM_EXTENDED_ESCAPE) {    return ' ';  } else   if (gsmChar >= 0 && gsmChar < 128) {    char c=sLanguageShiftTables[0].charAt(gsmChar);    if (c == ' ') {      return sLanguageTables[0].charAt(gsmChar);    } else {      return c;    }  } else {    return ' ';  }}  }
class C{  private String makeClassName(String className){  String[] tokens=className.split("[.]",8);  if (tokens.length > 1)   return className;  if (className.equals("View")) {    return "android.view.View";  }  className=String.format("%s%s",className.substring(0,1).toUpperCase(),className.substring(1));  String[] basePackages=new String[]{"android.widget","android.app","android.view","android.support.v4.app"};  for (  String packageName : basePackages) {    StringBuilder builder=new StringBuilder(packageName);    builder.append(".");    builder.append(className.charAt(0));    if (className.length() > 1)     builder.append(className.substring(1));    String fullName=builder.toString();    logger.info("Trying to locatate {} class ",fullName);    if (Scene.v().containsClass(fullName)) {      logger.info("Found class {} ",fullName);      return fullName;    }    logger.info("class {} NOT Found ",fullName);    logger.info("Trying to match class {} NOT Found ",className);    List<SootClass> classes=SootUtils.matchShortName(className);    for (    SootClass sootClass : classes) {      logger.info("matching {} ",sootClass);      for (      SootClass baseClass : mBaseClassList) {        try {          if (SootUtils.checkAncestor(sootClass,baseClass)) {            logger.info("soot class {} is a UI component",sootClass);            return sootClass.toString();          }        } catch (        Exception ex) {        }      }    }  }  return null;}  }
class C{  public GenreGrouperMediaFileNode(BasicMediaSource inSource,BasicMediaNode inParent,String inGroupLabel,java.util.Vector inDescendants,boolean groupKidsByArtist){  super(inSource,inParent,inGroupLabel,DATATYPE_VIRTUAL,null,inDescendants);  this.groupKidsByArtist=groupKidsByArtist;}  }
class C{  @Override public ActionRequestValidationException validate(){  ActionRequestValidationException validationException=super.validate();  if (termsEncoding != null && termsEncoding.equals(TermsEncoding.BYTES)) {    if (maxTermsPerShard == null) {      validationException=ValidateActions.addValidationError("maxTermsPerShard not specified for terms encoding [bytes]",validationException);    }  }  return validationException;}  }
class C{  public long readLong() throws SQLException {  Long attrib=(Long)getNextAttribute();  return (attrib == null) ? 0 : attrib.longValue();}  }
class C{  private String computeDefaultConfigurationLocation(){  URL install=getInstallLocation();  if (protectBase) {    return computeDefaultUserAreaLocation(CONFIG_DIR);  }  if (install.getProtocol().equals("file")) {    File installDir=new File(install.getFile());    if (canWrite(installDir))     return installDir.getAbsolutePath() + File.separator + CONFIG_DIR;  }  return computeDefaultUserAreaLocation(CONFIG_DIR);}  }
class C{  public void addProperty(Property property){  getProperties().add(property);}  }
class C{  private boolean checkUserAlreadyStored(Long userIdToAdd,List<?> usersStored) throws Exception {  for (Iterator<?> it2=usersStored.iterator(); it2.hasNext(); ) {    Users us=(Users)it2.next();    if (us.getUser_id().equals(userIdToAdd)) {      log.debug("userIdToAdd found: " + userIdToAdd);      return true;    }  }  return false;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  private FileStatus toPrimary(FileStatus status){  return status != null ? new FileStatus(status.getLen(),status.isDirectory(),status.getReplication(),status.getBlockSize(),status.getModificationTime(),status.getAccessTime(),status.getPermission(),status.getOwner(),status.getGroup(),toPrimary(status.getPath())) : null;}  }
class C{  public void interpolatePathDataNode(PathDataNode nodeFrom,PathDataNode nodeTo,float fraction){  for (int i=0; i < nodeFrom.mParams.length; i++) {    mParams[i]=nodeFrom.mParams[i] * (1 - fraction) + nodeTo.mParams[i] * fraction;  }}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public SparseByteVector(byte[] values) throws IllegalArgumentException {  this.dimensionality=values.length;  int size=0;{    for (int i=0; i < values.length; i++) {      if (values[i] != 0) {        size++;      }    }  }  this.indexes=new int[size];  this.values=new byte[size];{    int pos=0;    for (int i=0; i < values.length; i++) {      byte value=values[i];      if (value != 0) {        this.indexes[pos]=i;        this.values[pos]=value;        pos++;      }    }  }}  }
class C{  @SuppressWarnings("unchecked") public static Set<Long> toSet(long[] array){  return toSet(DefaultTypeTransformation.primitiveArrayToList(array));}  }
class C{  @LargeTest public void testMountTwoEncryptedObb(){  File file3=null;  File file1=null;  try {    file3=createObbFile(OBB_FILE_3_ENCRYPTED,R.raw.obb_enc_file100_orig3);    String filePath3=file3.getAbsolutePath();    mountObb(filePath3,OBB_FILE_3_PASSWORD,OnObbStateChangeListener.MOUNTED);    verifyObb3Contents(filePath3);    file1=createObbFile(OBB_FILE_1_ENCRYPTED,R.raw.obb_enc_file100_orig1);    String filePath1=file1.getAbsolutePath();    mountObb(filePath1,OBB_FILE_1_PASSWORD,OnObbStateChangeListener.MOUNTED);    verifyObb1Contents(filePath1);    unmountObb(filePath3,DONT_FORCE);    unmountObb(filePath1,DONT_FORCE);  }  finally {    if (file3 != null) {      file3.delete();    }    if (file1 != null) {      file1.delete();    }  }}  }
class C{  public IOContainer append(IOObject object){  return append(new IOObject[]{object});}  }
class C{  public String globalInfo(){  return "An instance filter that assumes instances form time-series data and " + "replaces attribute values in the current instance with the equivalent " + "attribute values of some previous (or future) instance. For "+ "instances where the desired value is unknown either the instance may "+ "be dropped, or missing values used. Skips the class attribute if it is set.";}  }
class C{  private void updateFromDebuggerOptions(final DebuggerOptions options){  m_toolBar.updateFromDebuggerOptions(options);  m_threadPanel.setVisible(options.canMultithread());}  }
class C{  public boolean contains(IRectangle r){  double rl=r.getLeft();  double rr=r.getRight();  if (FloatingPoint.lesserEquals(left,rl) && FloatingPoint.lesserEquals(rl,rr) && FloatingPoint.lesserEquals(rr,right)) {    double rb=r.getBottom();    double rt=r.getTop();    if (FloatingPoint.lesserEquals(bottom,rb) && FloatingPoint.lesserEquals(rb,rt) && FloatingPoint.lesserEquals(rt,top)) {      return true;    }  }  return false;}  }
class C{  private Response<BitmapDrawable> doContentParse(){  if (mContentResolver == null) {    return Response.error(new ParseError("Content Resolver instance is null"));  }  final String requestUrl=getUrl();  final Uri imageUri=Uri.parse(requestUrl);  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();  decodeOptions.inInputShareable=true;  decodeOptions.inPurgeable=true;  decodeOptions.inPreferredConfig=mDecodeConfig;  Bitmap bitmap;  if (mMaxWidth == 0 && mMaxHeight == 0) {    bitmap=ImageUtils.decodeStream(mContentResolver,imageUri,decodeOptions);    addMarker("read-full-size-image-from-resource");  } else {    decodeOptions.inJustDecodeBounds=true;    ImageUtils.decodeStream(mContentResolver,imageUri,decodeOptions);    int actualWidth=decodeOptions.outWidth;    int actualHeight=decodeOptions.outHeight;    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight);    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth);    decodeOptions.inJustDecodeBounds=false;    decodeOptions.inSampleSize=ImageUtils.findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);    Bitmap tempBitmap=ImageUtils.decodeStream(mContentResolver,imageUri,decodeOptions);    addMarker(String.format("read-from-resource-scaled-times-%d",decodeOptions.inSampleSize));    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);      tempBitmap.recycle();      addMarker("scaling-read-from-resource-bitmap");    } else {      bitmap=tempBitmap;    }  }  if (bitmap == null) {    return Response.error(new ParseError());  } else {    BitmapDrawable drawable;    if (Utils.hasHoneycomb()) {      drawable=new BitmapDrawable(mResources,bitmap);    } else {      drawable=new RecyclingBitmapDrawable(mResources,bitmap);    }    return Response.success(drawable,HttpHeaderParser.parseBitmapCacheHeaders(bitmap));  }}  }
class C{  public java.lang.Object lookupLink(String name) throws NamingException {  return lookupLink(new CompositeName(name));}  }
class C{  public static final Village createVillage(int level,int label,Village back,int seed){  if (level == 0) {    return null;  } else {    Village village=new Village(level,label,back,seed);    for (int i=3; i >= 0; i--) {      Village child=createVillage(level - 1,(label * 4) + i + 1,village,seed);      village.addVillage(i,child);    }    return village;  }}  }
class C{  public int recycleItems(LinearLayout layout,int firstItem,ItemsRange range){  int index=firstItem;  for (int i=0; i < layout.getChildCount(); ) {    if (!range.contains(index)) {      recycleView(layout.getChildAt(i),index);      layout.removeViewAt(i);      if (i == 0) {        firstItem++;      }    } else {      i++;    }    index++;  }  return firstItem;}  }
class C{  protected void destroy(){  if (LogService.MAIN_LOGGER_NAME.equals(this.logWriterLoggerName) && LogService.isUsingGemFireDefaultConfig()) {    LogService.restoreConsoleAppender();  }  for (  AppenderContext context : this.appenderContexts) {    context.getLoggerContext().removePropertyChangeListener(this);    context.getLoggerConfig().removeAppender(appenderName);  }  for (  AppenderContext context : this.appenderContexts) {    context.getLoggerContext().updateLoggers();  }  stop();  cleanUp();  if (logger.isDebugEnabled()) {    logger.debug("A LogWriterAppender has been destroyed and cleanup is finished.");  }}  }
class C{  protected void close(){  log.fine("M_Product_ID=" + m_M_Product_ID);  if (m_M_Product_ID > 0) {    p_posPanel.f_curLine.setM_Product_ID(m_M_Product_ID);    p_posPanel.f_curLine.setPrice(m_Price);  } else {    p_posPanel.f_curLine.setM_Product_ID(0);    p_posPanel.f_curLine.setPrice(Env.ZERO);  }  dispose();}  }
class C{  private void writeFeed(Collection<?> entities,Object enclosingEntity,NavigationProperty property,Map<String,Object> meta) throws XMLStreamException, ODataRenderException, NoSuchFieldException, IllegalAccessException, ODataEdmException {  final boolean isInlineFeed=(enclosingEntity != null);  startFeed(isInlineFeed);  if (ODataUriUtil.hasCountOption(oDataUri) && meta != null && meta.containsKey("count")) {    metadataWriter.writeCount(meta.get("count"));  }  metadataWriter.writeFeedId(enclosingEntity,property);  metadataWriter.writeTitle();  metadataWriter.writeUpdate(dateTime);  metadataWriter.writeFeedLink(enclosingEntity,property);  for (  Object entity : entities) {    writeEntry(entity,true);  }  endFeed();}  }
class C{  public void renderEndingBoundaryComment(Appendable writer,String widgetType,ModelWidget modelWidget) throws IOException {  if (this.widgetCommentsEnabled) {    writer.append(this.buildBoundaryComment("End",widgetType,modelWidget.getBoundaryCommentName()));  }}  }
class C{  public void removeConditioningVariable(String variable){  Node node=dataSet.getVariable(variable);  if (!(continuousIntervals.containsKey(node))) {    throw new IllegalArgumentException("Not a conditioning node: " + variable);  }  continuousIntervals.remove(node);}  }
class C{  public void begin(String namespace,String name,Attributes attributes) throws Exception {  assert digester.peek() instanceof FacesConfigBean : "Assertion Error: Expected FacesConfigBean to be at the top of the stack";  if (digester.getLogger().isDebugEnabled()) {    digester.getLogger().debug("[ManagedBeanRule]{" + digester.getMatch() + "} Push "+ CLASS_NAME);  }  Class clazz=digester.getClassLoader().loadClass(CLASS_NAME);  ManagedBeanBean mbb=(ManagedBeanBean)clazz.newInstance();  digester.push(mbb);}  }
class C{  public boolean addSlot(){  return addSlots(1) == 1;}  }
class C{  public static Class<?> loadClass(String className) throws ClassNotFoundException {  return javax.management.loading.DefaultLoaderRepository.loadClass(className);}  }
class C{  private synchronized int read(int index){  int value=data[index];  if (isWatched(index)) {    Clock.stop();    Trace.printf("%4d  load %s = %08x%n",Thread.currentThread().getId(),cellAddress(index),value);    Clock.start();  }  return value;}  }
class C{  protected void sequence_TAnonymousFormalParameterList_TStructMethod(ISerializationContext context,TStructMethod semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public SpacingBuilder(@NotNull CodeStyleSettings codeStyleSettings,@NotNull Language language){  myCodeStyleSettings=codeStyleSettings.getCommonSettings(language);}  }
class C{  protected void registerReceiver(){  if (mBluetoothListener == null || mContext == null) {    return;  }  IntentFilter filter=new IntentFilter();  filter.addAction(BluetoothAdapter.ACTION_STATE_CHANGED);  filter.addAction(BluetoothAdapter.ACTION_DISCOVERY_STARTED);  filter.addAction(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);  filter.addAction(BluetoothDevice.ACTION_FOUND);  filter.addAction(BluetoothAdapter.ACTION_SCAN_MODE_CHANGED);  mReceiver=new BlueToothReceiver(mBluetoothListener);  mContext.registerReceiver(mReceiver,filter);}  }
class C{  private <T>T submit(final long ts,final byte[] key,final ISimpleIndexProcedure<T> proc){  final PartitionLocator locator=fed.getMetadataIndex(name,ts).find(key);  try {    if (log.isInfoEnabled()) {      log.info("Submitting " + proc.getClass() + " to partition"+ locator);    }    final IResultHandler<T,T> resultHandler=new IdentityHandler<T>();    final SimpleDataServiceProcedureTask task=new SimpleDataServiceProcedureTask(this,key,ts,new Split(locator,0,0),proc,resultHandler);    getThreadPool().submit(task).get(taskTimeout,TimeUnit.MILLISECONDS);    final T result=resultHandler.getResult();    return result;  } catch (  Exception ex) {    throw new RuntimeException(ex);  }}  }
class C{  private void loadSystemProperties(){  Enumeration elem=properties.keys();  List lp=Collections.list(elem);  Collections.sort(lp);  Iterator iter=lp.iterator();  fine("Overriding loaded configuration from System properties.");  int cnt=0;  while (iter.hasNext()) {    String key=(String)iter.next();    if (!key.startsWith("xr.")) {      continue;    }    try {      String val=System.getProperty(key);      if (val != null) {        properties.setProperty(key,val);        finer("  Overrode value for " + key);        cnt++;      }    } catch (    SecurityException e) {    }  }  fine("Configuration: " + cnt + " properties overridden from System properties.");  try {    final Properties sysProps=System.getProperties();    final Enumeration keys=sysProps.keys();    cnt=0;    while (keys.hasMoreElements()) {      String key=(String)keys.nextElement();      if (key.startsWith("xr.") && !this.properties.containsKey(key)) {        final Object val=sysProps.get(key);        this.properties.put(key,val);        finer("  (+) " + key);        cnt++;      }    }  } catch (  SecurityException e) {  }  fine("Configuration: " + cnt + " FS properties added from System properties.");}  }
class C{  public VcfRecord removeInfo(final String key){  mInfo.remove(key);  return this;}  }
class C{  public void cancel(){synchronized (queue) {    thread.newTasksMayBeScheduled=false;    queue.clear();    queue.notify();  }}  }
class C{  public boolean isContentFormat(int format){  return content_format != null && content_format == format;}  }
class C{  public static Coords scatterAltitudeBombs(Coords coords,int facing){  int dir=0;  int scatterDirection=Compute.d6(1);switch (scatterDirection) {case 1:case 2:    dir=(facing - 1) % 6;  break;case 3:case 4:dir=facing;break;case 5:case 6:dir=(facing + 1) % 6;break;}int dist=Compute.d6(1);return coords.translated(dir,dist);}  }
class C{  @VisibleForTesting public void verify(){  verifyAllocator();}  }
class C{  @Deprecated static public AcelaTrafficController instance(){  log.error("Deprecated method instance called");  return null;}  }
class C{  @Override public void updateStatus(JobContext jobContext) throws Exception {  DbClient dbClient=jobContext.getDbClient();  try {    if (_status == JobStatus.IN_PROGRESS) {      return;    }    String opId=getTaskCompleter().getOpId();    StringBuilder logMsgBuilder=new StringBuilder(String.format("Updating status of job %s to %s",opId,_status.name()));    URI quotaId=getTaskCompleter().getId();    QuotaDirectory quotaObj=dbClient.queryObject(QuotaDirectory.class,quotaId);    URI fsUri=quotaObj.getParent().getURI();    FileShare fsObj=dbClient.queryObject(FileShare.class,fsUri);    String event=null;    if (_status == JobStatus.SUCCESS && quotaObj != null) {      event=String.format("update file system quota directory successfully for URI: %s",getTaskCompleter().getId());    } else     if (_status == JobStatus.FAILED && quotaObj != null) {      if (!quotaObj.getInactive()) {        quotaObj.setInactive(true);        dbClient.updateObject(quotaObj);      }      event=String.format("Task %s failed to update file system quota directory: %s",opId,quotaObj.getName());      logMsgBuilder.append("\n");      logMsgBuilder.append(event);    } else {      logMsgBuilder.append(String.format("Could not find the quota directory:%s",quotaId.toString()));    }    _logger.info(logMsgBuilder.toString());    FileDeviceController.recordFileDeviceOperation(dbClient,OperationTypeEnum.UPDATE_FILE_SYSTEM_QUOTA_DIR,_isSuccess,event,"",quotaObj,fsObj);  } catch (  Exception e) {    _logger.error("Caught an exception while trying to updateStatus for VNXUnityUpdateFileSystemQuotaDirectoryJob",e);    setErrorStatus("Encountered an internal error during file system quota update job status processing : " + e.getMessage());  } finally {    super.updateStatus(jobContext);  }}  }
class C{  public Splitter(boolean vertical){  this(vertical,.5f);}  }
class C{  public static boolean contains(DataFlavor[] array,DataFlavor flavor){  for (int i=0; i < array.length; i++) {    if (flavor.equals(array[i])) {      return true;    }  }  return false;}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  private void createLDAPSchemaFiles() throws FileOperationFailedException, DirectoryOrFileNotFoundException, IOException {  createLdifFilesDirectory();  if (CollectionUtils.isEmpty(_schemaLdifList)) {    _log.info("Using default schema ldif files");    InputStream schemaExportStream=LDAPServer.class.getResourceAsStream(DEFAULT_LDAP_SCHEMA_EXPORT);    BufferedReader schemaExportReader=new BufferedReader(new InputStreamReader(schemaExportStream));    String ldapSchemaExportFileName="%s" + DEFAULT_LDAP_SCHEMA_EXPORT;    ldapSchemaExportFileName=String.format(ldapSchemaExportFileName,getSchemaFilesDirectory());    _log.debug("Schema export file name {}",ldapSchemaExportFileName);    createLdifFile(schemaExportReader,ldapSchemaExportFileName);  } else {    _log.info("Using configured schema ldif files");    for (    String file : _schemaLdifList) {      File fileObject=new File(file);      if (!fileObject.exists()) {        throw new DirectoryOrFileNotFoundException("File",file);      }      InputStream schemaExportStream=new FileInputStream(file);      BufferedReader schemaExportReader=new BufferedReader(new InputStreamReader(schemaExportStream));      String ldapSchemaExportFileName="%s/" + fileObject.getName();      ldapSchemaExportFileName=String.format(ldapSchemaExportFileName,getSchemaFilesDirectory());      _log.debug("Schema export file name {}",ldapSchemaExportFileName);      createLdifFile(schemaExportReader,ldapSchemaExportFileName);    }  }}  }
class C{  public static Paint newCornerPaint(Context context){  final float lineThicknessPx=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,DEFAULT_CORNER_THICKNESS_DP,context.getResources().getDisplayMetrics());  final Paint cornerPaint=new Paint();  cornerPaint.setColor(DEFAULT_CORNER_COLOR);  cornerPaint.setStrokeWidth(lineThicknessPx);  cornerPaint.setStyle(Paint.Style.STROKE);  return cornerPaint;}  }
class C{  public boolean contains(double element){  this.sort();  return buffer.binarySearch(element) >= 0;}  }
class C{  public static String toString(final GUID value){  return value.toString();}  }
class C{  public void resetChangeset(){  changesetId=-1;}  }
class C{  public DOMAttrModifiedEventListener(){}  }
class C{  public Light createNewLight(String systemName,String userName){  Light lgt=null;  if (SerialAddress.validSystemNameFormat(systemName,'L')) {    lgt=new SerialLight(systemName,userName);    if (!SerialAddress.validSystemNameConfig(systemName,'L')) {      log.warn("Light system Name does not refer to configured hardware: " + systemName);    }  } else {    log.error("Invalid Light system Name format: " + systemName);  }  return lgt;}  }
class C{  public boolean isSecondsVisible(){  return null == secondsVisible ? _secondsVisible : secondsVisible.get();}  }
class C{  public void reply(List<String> responseHeaders,boolean out) throws IOException {  assert (!Thread.holdsLock(SpdyStream.this));  int flags=0;synchronized (this) {    if (responseHeaders == null) {      throw new NullPointerException("responseHeaders == null");    }    if (isLocallyInitiated()) {      throw new IllegalStateException("cannot reply to a locally initiated stream");    }    if (this.responseHeaders != null) {      throw new IllegalStateException("reply already sent");    }    this.responseHeaders=responseHeaders;    if (!out) {      this.out.finished=true;      flags|=SpdyConnection.FLAG_FIN;    }  }  connection.writeSynReply(id,flags,responseHeaders);}  }
class C{  public void storePath(@NotNull ExternalSystemSourceType type,@NotNull String path,@Nullable String packagePrefix) throws IllegalArgumentException {  if (FileUtil.isAncestor(new File(getRootPath()),new File(path),false)) {    Collection<SourceRoot> paths=myData.get(type);    if (paths == null) {      myData.put(type,paths=new TreeSet<SourceRoot>(SourceRootComparator.INSTANCE));    }    paths.add(new SourceRoot(ExternalSystemApiUtil.toCanonicalPath(path),StringUtil.nullize(packagePrefix,true)));    return;  }  if (!ExternalSystemSourceType.EXCLUDED.equals(type)) {    throw new IllegalArgumentException(String.format("Can't register given path of type '%s' because it's out of content root.%nContent root: '%s'%nGiven path: '%s'",type,getRootPath(),new File(path).getAbsolutePath()));  }}  }
class C{  public void clearErrors(){  if (errorHandler != null) {    errorHandler.clearErrors();  }}  }
class C{  public NSObject remove(String key){  return dict.remove(key);}  }
class C{  protected EnumPropertySourceImpl(){  super();}  }
class C{  public void error(Element e,String msg){  messager.printMessage(Diagnostic.Kind.ERROR,msg,e);}  }
class C{  public static void main(String[] args) throws IOException, TraceException {  printTitle();  Arguments arguments=new Arguments(new Arguments.Option[]{new Arguments.IntegerOption("thin","thin"),new Arguments.IntegerOption("skip","skip"),new Arguments.Option("help","option to print this message")});  try {    arguments.parseArguments(args);  } catch (  Arguments.ArgumentException ae) {    System.out.println(ae);    printUsage(arguments);    System.exit(1);  }  if (arguments.hasOption("help")) {    printUsage(arguments);    System.exit(0);  }  int skip=-1;  if (arguments.hasOption("skip")) {    skip=arguments.getIntegerOption("skip");  }  int thin=-1;  if (arguments.hasOption("thin")) {    thin=arguments.getIntegerOption("thin");  }  String outInputFileName=null;  String fastasInputFileName=null;  String treesInputfileName=null;  String outputFileName=null;  String[] args2=arguments.getLeftoverArguments();  if (args2.length > 4) {    System.err.println("Unknown option: " + args2[2]);    System.err.println();    printUsage(arguments);    System.exit(1);  }  if (args2.length > 0) {    outInputFileName=args2[0];  }  if (args2.length > 0) {    fastasInputFileName=args2[1];  }  if (args2.length > 0) {    treesInputfileName=args2[2];  }  if (args2.length > 3) {    outputFileName=args2[3];  }  if (outInputFileName == null) {    outInputFileName=Utils.getLoadFileName("MakeAncestralSequenceAnnotatedTree " + version.getVersionString() + " - Select *.out file to analyse");  }  if (fastasInputFileName == null) {    fastasInputFileName=Utils.getLoadFileName("MakeAncestralSequenceAnnotatedTree " + version.getVersionString() + " - Select *.fastas file to analyse");  }  if (treesInputfileName == null) {    treesInputfileName=Utils.getLoadFileName("MakeAncestralSequenceAnnotatedTree " + version.getVersionString() + " - Select *.trees file to analyse");  }  if (skip == -1) {    System.out.println("Enter skip: ");    BufferedReader br=new BufferedReader(new InputStreamReader(System.in));    skip=Integer.parseInt(br.readLine());  }  if (thin == -1) {    System.out.println("Enter thin: ");    BufferedReader br=new BufferedReader(new InputStreamReader(System.in));    thin=Integer.parseInt(br.readLine());  }  new MakeAncestralSequenceAnnotatedTree(thin,skip,outInputFileName,fastasInputFileName,treesInputfileName,outputFileName);  System.exit(0);}  }
class C{  Entry(K k,V v,Entry n){  key=k;  val=v;  next=n;}  }
class C{  static public boolean isAllowedToAbortVideoSharingSession(VideoSharing videoSharing) throws RcsPersistentStorageException, RcsGenericException {switch (videoSharing.getState()) {case STARTED:case INITIATING:case ACCEPTING:case RINGING:    return true;default :  return false;}}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(1);  newVector.addElement(new Option("\ttreat missing values as a seperate " + "value.","M",0,"-M"));  return newVector.elements();}  }
class C{  public void write(final IRawStore store){  if (addrMetadata != 0L) {    throw new IllegalStateException("Already written.");  }  if (indexUUID == null) {    throw new IllegalStateException("No indexUUID : wrong constructor?");  }  this.addrMetadata=store.write(ByteBuffer.wrap(SerializerUtil.serialize(this)));}  }
class C{  public synchronized boolean isValid(){  if (!updateSucceeded || getUpdatedDelay() > expiresAfter * 2) {    return false;  }  return true;}  }
class C{  public T caseExtendedRuntimeEnvironment(ExtendedRuntimeEnvironment object){  return null;}  }
class C{  public void testHashCode() throws ChessParseError {  Position pos=TextIO.readFEN(TextIO.startPosFEN);  long h1=pos.zobristHash();  assertEquals(h1,pos.computeZobristHash());  UndoInfo ui=new UndoInfo();  Move move=TextIO.stringToMove(pos,"e4");  pos.makeMove(move,ui);  assertTrue(h1 != pos.zobristHash());  pos.unMakeMove(move,ui);  assertTrue(h1 == pos.zobristHash());  pos.setWhiteMove(!pos.whiteMove);  long h4=pos.zobristHash();  assertEquals(h4,pos.computeZobristHash());  assertTrue(h1 != pos.zobristHash());  pos.setWhiteMove(!pos.whiteMove);  assertTrue(h1 == pos.zobristHash());  pos.setCastleMask(0);  assertTrue(h1 != pos.zobristHash());  pos=TextIO.readFEN("rnbqkbnr/pppp1ppp/8/2P1p3/8/8/PP1PPPPP/RNBQKBNR b KQkq - 0 1");  h1=pos.zobristHash();  assertEquals(h1,pos.computeZobristHash());  String[] moves={"b5","Nc3","Nf6","Nb1","Ng8","Nc3","Nf6","Nb1","Ng8","Nc3","d5","cxd6","Qxd6","h4","Be6","h5","Nc6","h6","o-o-o","hxg7","Nf6","gxh8Q","Be7"};  List<UndoInfo> uiList=new ArrayList<UndoInfo>();  List<Long> hashList=new ArrayList<Long>();  List<Move> moveList=new ArrayList<Move>();  for (int i=0; i < moves.length; i++) {    uiList.add(new UndoInfo());    Move m=TextIO.stringToMove(pos,moves[i]);    moveList.add(m);    pos.makeMove(m,uiList.get(i));    long h=pos.zobristHash();    assertEquals(h,pos.computeZobristHash());    hashList.add(h);  }  assertTrue(!hashList.get(0).equals(hashList.get(4)));  assertTrue(hashList.get(4).equals(hashList.get(8)));  for (int i=moves.length - 1; i >= 0; i--) {    pos.unMakeMove(moveList.get(i),uiList.get(i));    long h=pos.zobristHash();    assertEquals(h,pos.computeZobristHash());    assertEquals(h,i > 0 ? hashList.get(i - 1) : h1);  }}  }
class C{  void deschedule(){  if (descheduled.compareAndSet(false,true)) {    sched.deschedule(id);    ((IgniteScheduleProcessor)ctx.schedule()).onDescheduled(this);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(textsplittextthree.class,args);}  }
class C{  public static void textToClipboard(Display display,String text){  Assert.isNotNull(display);  if (null == text) {    return;  }  TextTransfer textTransfer=TextTransfer.getInstance();  Clipboard cb=new Clipboard(display);  cb.setContents(new Object[]{text},new Transfer[]{textTransfer});}  }
class C{  private static void assertNotEmpty(String string){  assertNotEmpty(null,string);}  }
class C{  public SafeCalendar(int year,int month,int day){  this(year,month);  set(DAY_OF_MONTH,day);}  }
class C{  private static SortedSet<String> findApplicationPackageNames(ClassLoader cl){  SortedSet<String> packages=new TreeSet<>();  while (cl != null) {    if (cl instanceof URLClassLoader) {      for (      URL url : ((URLClassLoader)cl).getURLs()) {        String path=url.getPath();        if (!path.startsWith(JAVA_HOME) && !path.startsWith(MACOS_JAVA_EXTENSIONS_DIR) && path.endsWith(JAR_FILE_SUFFIX)) {          try {            try (ZipInputStream zip=new ZipInputStream(url.openStream())){              for (ZipEntry entry=zip.getNextEntry(); entry != null; entry=zip.getNextEntry()) {                if (!entry.isDirectory() && entry.getName().endsWith(CLASS_FILE_SUFFIX)) {                  String className=entry.getName().replace('/','.');                  className=className.substring(0,className.length() - CLASS_FILE_SUFFIX.length());                  if (className.contains(".") && !className.startsWith(STREAMSETS_PACKAGE)) {                    packages.add(className.substring(0,className.lastIndexOf('.')) + ".");                  }                }              }            }           } catch (          IOException unlikely) {            if (SDCClassLoader.isDebug()) {              System.err.println("Error opening '" + url + "' : "+ unlikely);              unlikely.printStackTrace();            }          }        }      }    }    cl=cl.getParent();  }  SystemPackage systemPackage=new SystemPackage(SDCClassLoader.SYSTEM_API_CHILDREN_CLASSES);  Iterator<String> iterator=packages.iterator();  while (iterator.hasNext()) {    String packageName=iterator.next();    if (systemPackage.isSystem(packageName)) {      iterator.remove();    }  }  removeLogicalDuplicates(packages);  return packages;}  }
class C{  private boolean toState(LifecycleState newState){  LifecycleState state;synchronized (this) {    state=_state;    _state=newState;    _lastChangeTime=CurrentTime.currentTime();  }  if (_log != null && _log.isLoggable(_lowLevel)) {    _log.log(_lowLevel,newState + " " + _name);  }  notifyListeners(state,newState);  return true;}  }
class C{  public void removeInvitationRejectionListener(InvitationRejectionListener listener){synchronized (invitationRejectionListeners) {    invitationRejectionListeners.remove(listener);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public synchronized Node performAddNode(Double lonD,Double latD){  Log.d("Logic","performAddNode");  createCheckpoint(R.string.undo_action_add);  int lon=(int)(lonD * 1E7D);  int lat=(int)(latD * 1E7D);  Node newNode=getDelegator().getFactory().createNodeWithNewId(lat,lon);  getDelegator().insertElementSafe(newNode);  if (!getDelegator().isInDownload(lat,lon)) {    Log.d("Logic","Outside of download");    Toast.makeText(Application.mainActivity,R.string.toast_outside_of_download,Toast.LENGTH_SHORT).show();  }  setSelectedNode(newNode);  return newNode;}  }
class C{  public IndefiniteTimingSpecifier(TimedElement owner,boolean isBegin){  super(owner,isBegin);}  }
class C{  public void waitForFrame(String jumpLabel) throws IOException {  print("waitForFrame",new String[]{"\"" + jumpLabel + "\""});}  }
class C{  public boolean isUnindexSupported(){  return false;}  }
class C{  public String sendRoster(){  List<RosterEntry> rosterList;  rosterList=Roster.getDefault().getEntriesInGroup(manager.getSelectedRosterGroup());  StringBuilder rosterString=new StringBuilder(rosterList.size() * 25);  for (  RosterEntry entry : rosterList) {    StringBuilder entryInfo=new StringBuilder(entry.getId());    entryInfo.append("}|{");    entryInfo.append(entry.getDccAddress());    if (entry.isLongAddress()) {      entryInfo.append("}|{L");    } else {      entryInfo.append("}|{S");    }    rosterString.append("]\\[");    rosterString.append(entryInfo);  }  rosterString.trimToSize();  return ("RL" + rosterList.size() + rosterString);}  }
class C{  public int vectorLength(){  return vectorLength;}  }
class C{  protected PrintQuality(int value){  super(value);}  }
class C{  public String toString(){  return "TAG_Byte(\"" + name + "\"): dec="+ (int)value;}  }
class C{  public void load() throws CouldntLoadDataException {  if (isLoaded()) {    return;  }  try {    m_addressSpace.load();  } catch (  com.google.security.zynamics.binnavi.Database.Exceptions.CouldntLoadDataException|LoadCancelledException e) {    throw new CouldntLoadDataException(e);  }}  }
class C{  boolean isWheelFocused(){  return isSet(FLAGS_FOCUSED_WHEEL);}  }
class C{  private double calculateControllability(){  double[][] attainmentVolume=threshold(metric,threshold);  return FractalDimension.computeDimension(normalize(attainmentVolume)) / FractalDimension.computeDimension(parameters);}  }
class C{  static String dsElement(String name){  return PREFIX_DS + name;}  }
class C{  void addSelectCommand(){  if (!menu) {    getMenuBar().addSelectCommand(getSelectCommandText());  }}  }
class C{  public static float[][] calc(int[] xpoints,int[] ypoints,boolean geometryClosed){  return calc(xpoints,ypoints,geometryClosed,12);}  }
class C{  @Override public final String format(final Date date){  if (date == null)   return "";  if (Math.abs(date.getTime() - last_time) < 1000)   return last_format;synchronized (FORMAT_ISO8601) {    last_format=FORMAT_ISO8601.format(date);    last_time=date.getTime();  }  return last_format;}  }
class C{  public boolean removeDataSet(T d){  if (d == null)   return false;  boolean removed=mDataSets.remove(d);  if (removed) {    mYValCount-=d.getEntryCount();    mYValueSum-=d.getYValueSum();    calcMinMax(mDataSets);  }  return removed;}  }
class C{  public void sendData(byte[][] data,String targetHostName,int targetPort,long interval){  sendData(data,0,data.length,targetHostName,targetPort,interval);}  }
class C{  public static Map<String,Object> returnSuccess(String successMessage){  return returnMessage(ModelService.RESPOND_SUCCESS,successMessage);}  }
class C{  public int run(String[] argv) throws Exception {  Args args=new Args();  CmdLineParser parser=new CmdLineParser(args,ParserProperties.defaults().withUsageWidth(100));  try {    parser.parseArgument(argv);  } catch (  CmdLineException e) {    System.err.println(e.getMessage());    parser.printUsage(System.err);    return -1;  }  LOG.info("Tool name: " + ComputeBigramRelativeFrequencyStripes.class.getSimpleName());  LOG.info(" - input path: " + args.input);  LOG.info(" - output path: " + args.output);  LOG.info(" - num reducers: " + args.numReducers);  LOG.info(" - text output: " + args.textOutput);  Job job=Job.getInstance(getConf());  job.setJobName(ComputeBigramRelativeFrequencyStripes.class.getSimpleName());  job.setJarByClass(ComputeBigramRelativeFrequencyStripes.class);  job.setNumReduceTasks(args.numReducers);  FileInputFormat.setInputPaths(job,new Path(args.input));  FileOutputFormat.setOutputPath(job,new Path(args.output));  job.setMapOutputKeyClass(Text.class);  job.setMapOutputValueClass(HMapStFW.class);  job.setOutputKeyClass(Text.class);  job.setOutputValueClass(HMapStFW.class);  if (args.textOutput) {    job.setOutputFormatClass(TextOutputFormat.class);  } else {    job.setOutputFormatClass(SequenceFileOutputFormat.class);  }  job.setMapperClass(MyMapper.class);  job.setCombinerClass(MyCombiner.class);  job.setReducerClass(MyReducer.class);  Path outputDir=new Path(args.output);  FileSystem.get(getConf()).delete(outputDir,true);  long startTime=System.currentTimeMillis();  job.waitForCompletion(true);  System.out.println("Job Finished in " + (System.currentTimeMillis() - startTime) / 1000.0 + " seconds");  return 0;}  }
class C{  private static void sbrQmfAnalysis(FFT mdct,float in[],float x[],float z[],float W[][][][],int bufIdx){  System.arraycopy(x,1024,x,0,320 - 32);  System.arraycopy(in,0,x,288,1024);  int xOffset=0;  for (int i=0; i < 32; i++) {    FloatDSP.vectorFmulReverse(z,0,AacSbrData.sbr_qmf_window_ds,0,x,xOffset,320);    SBRDSP.sum64x5(z,0);    SBRDSP.qmfPreShuffle(z,0);    mdct.imdctHalf(z,0,z,64);    SBRDSP.qmfPostShuffle(W[bufIdx][i],z,0);    xOffset+=32;  }}  }
class C{  public T caseWildcard(Wildcard object){  return null;}  }
class C{  private Workflow.Method createAttachMirrorMethod(URI vplexURI,URI vplexVolumeURI,URI mirrorVolumeURI,URI cgURI,String detachStepId){  return new Workflow.Method(ATTACH_MIRROR_METHOD_NAME,vplexURI,vplexVolumeURI,mirrorVolumeURI,cgURI,detachStepId);}  }
class C{  public void visitBaseType(char descriptor){}  }
class C{  public static String tab(){  return tab;}  }
class C{  public static <T>int copy(final List<T> from,int first,int last,List<T> to){  int i=first;  for (; i < last; i++) {    to.add(from.get(i));  }  return i;}  }
class C{  @Override public int size(){  return this._map.size();}  }
class C{  public void addDTEDDirectoryHandler(DTEDDirectoryHandler handler){  directories.add(handler);}  }
class C{  public FieldDeclarationMatch(IJavaElement element,int accuracy,int offset,int length,SearchParticipant participant,IResource resource){  super(element,accuracy,offset,length,participant,resource);}  }
class C{  public void startPeepHoleAnimation(){  float x=mWidth / 2;  float y=mHeight / 2;  startPeepHoleAnimation(x,y);}  }
class C{  private static void applyForView(View view,TypefaceCollection typefaceCollection){  if (view instanceof TextView) {    TextView textView=(TextView)view;    Typeface oldTypeface=textView.getTypeface();    final int style=oldTypeface == null ? Typeface.NORMAL : oldTypeface.getStyle();    textView.setTypeface(typefaceCollection.getTypeface(style));    textView.setPaintFlags(textView.getPaintFlags() | Paint.SUBPIXEL_TEXT_FLAG);  }}  }
class C{  private DimensionService(){  myKey2Location=new LinkedHashMap<String,Point>();  myKey2Size=new LinkedHashMap<String,Dimension>();  myKey2ExtendedState=new TObjectIntHashMap<String>();}  }
class C{  @Override public void executeCommitChecks(){  commitCheckQueue.forEach(null);  commitCheckQueue.clear();}  }
class C{  public void testCreateLoggerWhenLogElementNotSpecified(){  Logger logger=this.mojo.createLogger();  assertEquals(MavenLogger.class.getName(),logger.getClass().getName());}  }
class C{  static Object convertBytesAndBitsIntoObject(BytesAndBits bb){  byte[] bytes=bb.getBytes();  Object value;  if (EntryBits.isInvalid(bb.getBits())) {    value=Token.INVALID;  } else   if (EntryBits.isSerialized(bb.getBits())) {    value=DiskEntry.Helper.readSerializedValue(bytes,bb.getVersion(),null,true);  } else   if (EntryBits.isLocalInvalid(bb.getBits())) {    value=Token.LOCAL_INVALID;  } else   if (EntryBits.isTombstone(bb.getBits())) {    value=Token.TOMBSTONE;  } else {    value=DiskEntry.Helper.readRawValue(bytes,bb.getVersion(),null);  }  return value;}  }
class C{  public void doTest(final Tradestrategy tradestrategy){  if (tradestrategy.isDirty()) {    this.setStatusBarMessage("Please save before running strategy ...\n",BasePanel.WARNING);  } else {    contractPanel.doClose(tradestrategy);    Tradingdays tradingdays=new Tradingdays();    Tradingday tradingday=Tradingday.newInstance(tradestrategy.getTradingday().getOpen());    tradingday.setIdTradingDay(Integer.MAX_VALUE);    tradingday.addTradestrategy(tradestrategy);    tradingdays.add(tradingday);    runStrategy(tradingdays,false);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.768 -0400",hash_original_method="033B4CFD391086531B126612D5903ED1",hash_generated_method="B63CBE398DCC52E4B4FCA4043EAD4654") public ProxyWriter(Writer proxy){  super(proxy);}  }
class C{  public static int toIPv4Address(String ipAddress){  if (ipAddress == null)   throw new IllegalArgumentException("Specified IPv4 address must" + "contain 4 sets of numerical digits separated by periods");  String[] octets=ipAddress.split("\\.");  if (octets.length != 4)   throw new IllegalArgumentException("Specified IPv4 address must" + "contain 4 sets of numerical digits separated by periods");  int result=0;  for (int i=0; i < 4; ++i) {    int oct=Integer.valueOf(octets[i]);    if (oct > 255 || oct < 0)     throw new IllegalArgumentException("Octet values in specified" + " IPv4 address must be 0 <= value <= 255");    result|=oct << ((3 - i) * 8);  }  return result;}  }
class C{  protected void saveInitialFilterState(){  initialFilterEntity=metadata.create(FilterEntity.class);  initialFilterEntity.setName(filterEntity.getName());  initialFilterEntity.setCode(filterEntity.getCode());  initialFilterEntity.setUser(filterEntity.getUser());  initialFilterEntity.setXml(filterEntity.getXml());}  }
class C{  public static byte[] decode(final byte[] compressed) throws IOException {  ByteArrayInputStream byteIn=new ByteArrayInputStream(compressed);  ByteArrayOutputStream byteOut=new ByteArrayOutputStream();  InflaterInputStream inflaterIn=null;  try {    inflaterIn=new InflaterInputStream(byteIn);    int read;    byte[] buffer=new byte[BUFFER_SIZE];    do {      read=inflaterIn.read(buffer);      if (read > 0) {        byteOut.write(buffer,0,read);      }    } while (read >= 0);    return byteOut.toByteArray();  }  finally {    inflaterIn.close();    byteOut.close();  }}  }
class C{  public PseudoRandom(final int range,final int next){  this(range);  if (next < 0 || next >= range)   throw new IllegalArgumentException();  m_next=next + 1;}  }
class C{  protected final String startInfo(){  return "SPI started ok [startMs=" + getUpTime() + ", spiMBean="+ spiMBean+ ']';}  }
class C{  public long tryWriteLock(){  long s, next;  return ((((s=state) & ABITS) == 0L && U.compareAndSwapLong(this,STATE,s,next=s + WBIT)) ? next : 0L);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static double trigamma(double x){  if (!(x > 0)) {    return Double.NaN;  }  if (x <= 1e-5) {    return 1. / (x * x);  } else   if (x > 49.) {    final double ix2=1. / (x * x);    return 1 / x - ix2 / 2. + ix2 / x * (1.0 / 6. - ix2 * (1.0 / 30. + ix2 / 42.));  } else {    return trigamma(x + 1.) - 1. / (x * x);  }}  }
class C{  private boolean matchesWifi(NetworkIdentity ident){switch (ident.mType) {case TYPE_WIFI:    return Objects.equal(mNetworkId,ident.mNetworkId);default :  return false;}}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void resize(int maxSize){  if (maxSize <= 0) {    throw new IllegalArgumentException("maxSize <= 0");  }synchronized (this) {    this.maxSize=maxSize;  }  trimToSize(maxSize);}  }
class C{  protected static void render(List<DotExpressionItem> chain,StringWriter writer,boolean prefixDot){  String delimiterOuter=prefixDot ? "." : "";  for (  DotExpressionItem item : chain) {    writer.write(delimiterOuter);    writer.write(item.name);    if (!item.isProperty() || !item.parameters.isEmpty()) {      writer.write("(");      if (!item.parameters.isEmpty()) {        String delimiter="";        for (        Expression param : item.parameters) {          writer.write(delimiter);          delimiter=",";          param.toEPL(writer,ExpressionPrecedenceEnum.MINIMUM);        }      }      writer.write(")");    }    delimiterOuter=".";  }}  }
class C{  public void postSipRequest(SipRequest request){  mBuffer.addObject(request);}  }
class C{  private static void loadRows(ImpFormat format,int ID){  String sql="SELECT f.SeqNo,c.ColumnName,f.StartNo,f.EndNo,f.DataType,c.FieldLength," + "f.DataFormat,f.DecimalPoint,f.DivideBy100,f.ConstantValue,f.Callout, f.DefaultValue " + "FROM AD_ImpFormat_Row f,AD_Column c "+ "WHERE f.AD_ImpFormat_ID=? AND f.AD_Column_ID=c.AD_Column_ID AND f.IsActive='Y'"+ "ORDER BY f.SeqNo";  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,ID);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      ImpFormatRow row=new ImpFormatRow(rs.getInt(1),rs.getString(2),rs.getInt(3),rs.getInt(4),rs.getString(5),rs.getInt(6));      row.setFormatInfo(rs.getString(7),rs.getString(8),rs.getString(9).equals("Y"),rs.getString(10),rs.getString(11),rs.getString(12));      format.addRow(row);    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }}  }
class C{  private double restore(int d,double val){  return (val / imadsigma[d]) + median[d];}  }
class C{  protected void peekLong(GPR reg1,GPR reg2,int idx){  if (VM.BuildFor64Addr) {    asm.emitLD(reg2,spTopOffset + 2 * BYTES_IN_STACKSLOT - BYTES_IN_LONG + (idx << LOG_BYTES_IN_STACKSLOT),FP);  } else {    asm.emitLWZ(reg1,spTopOffset + (idx << LOG_BYTES_IN_STACKSLOT),FP);    asm.emitLWZ(reg2,spTopOffset + BYTES_IN_STACKSLOT + (idx << LOG_BYTES_IN_STACKSLOT),FP);  }}  }
class C{  public CouchbaseManifestComparator(String key,DistributedMap connection){  this.key=key;  this.versionedKey=newKey(1L).toJson();  this.connection=connection;}  }
class C{  public String fewer(){  return "again";}  }
class C{  private void updateUi(){  mTitleView.setText(mTitle);  mCompliedProgressView.setBackgroundColor(mCompliedColor);  mTotalView.setBackgroundColor(mTotalColor);  DecimalFormatSymbols decimalFormatSymbols=new DecimalFormatSymbols();  decimalFormatSymbols.setDecimalSeparator('.');  decimalFormatSymbols.setGroupingSeparator(',');  DecimalFormat decimalFormat=new DecimalFormat("#,###.##",decimalFormatSymbols);  mCompliedAmountView.setText("$ " + decimalFormat.format(mCompliedAmount));  mTotalAmountView.setText("$ " + decimalFormat.format(mTotalAmount));  if (mCompliedAmount == 0 && mTotalAmount == 0)   mCompliedPercentage=0;  if (mCompliedAmount > 0 && mTotalAmount == 0)   mCompliedPercentage=100;  if (mCompliedAmount > 0 && mTotalAmount > 0) {    mCompliedPercentage=(mCompliedAmount / mTotalAmount * 100);  }  decimalFormat=new DecimalFormat("#",decimalFormatSymbols);  mCompliedPercentageView.setText(decimalFormat.format(mCompliedPercentage) + "%");  if (mCompliedPercentage > 100) {    mTotalView.setVisibility(View.GONE);  } else {    float compliedProgressViewWeight=(float)mCompliedPercentage;    float totalViewWeight=100 - compliedProgressViewWeight;    LayoutParams compliedProgressViewLayoutParams=new LinearLayout.LayoutParams(0,LayoutParams.MATCH_PARENT,compliedProgressViewWeight);    mCompliedProgressView.setLayoutParams(compliedProgressViewLayoutParams);    LayoutParams totalViewLayoutParams=new LinearLayout.LayoutParams(0,LayoutParams.MATCH_PARENT,totalViewWeight);    mTotalView.setLayoutParams(totalViewLayoutParams);  }}  }
class C{  public JAMonArrayBufferListener(String name){  super(name);}  }
class C{  static DoFnSignatures.ErrorReporter errors(){  return new DoFnSignatures.ErrorReporter(null,"[test]");}  }
class C{  @DSComment("input is file object") @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:00.135 -0500",hash_original_method="69C6A757CEF52150252713CD9ECC25FB",hash_generated_method="854C7AC00FFB6637A4C3AEB25C9A248D") public StreamResult(File f){  setSystemId(f);}  }
class C{  public static String normalizeNegativeInteger(String value){  return normalizeIntegerValue(value,null,"-1");}  }
class C{  @SuppressWarnings("unused") public StreamingViewAsIterable(FlinkRunner runner,View.AsIterable<T> transform){}  }
class C{  public void testIntJavaSerialization() throws Exception {  HadoopSerialization ser=new HadoopSerializationWrapper(new JavaSerialization(),Integer.class);  ByteArrayOutputStream buf=new ByteArrayOutputStream();  DataOutput out=new DataOutputStream(buf);  ser.write(out,3);  ser.write(out,-5);  ser.close();  DataInput in=new DataInputStream(new ByteArrayInputStream(buf.toByteArray()));  assertEquals(3,((Integer)ser.read(in,null)).intValue());  assertEquals(-5,((Integer)ser.read(in,null)).intValue());}  }
class C{  protected long calculateResolution(){  final int LOOPS=5;  long totalResolution=0;  long time=this.getTimeMicros(), prevTime=time;  for (int i=0; i < LOOPS; i++) {    while (time == prevTime)     time=this.getTimeMicros();    totalResolution+=(time - prevTime);    prevTime=time;  }  return totalResolution / LOOPS;}  }
class C{  public static void main(String[] args){  KmlNetworkVisualizer.convertNetwork2Kml("F:/convert/counts_network_merged.xml_cl.xml","F:/convert/net.kml",new GK4toWGS84());}  }
class C{  public double loadDouble(){  return 0;}  }
class C{  public static boolean isMACAddress(String macAddress){  String[] macBytes=macAddress.split(":");  if (macBytes.length != 6)   return false;  for (int i=0; i < 6; ++i) {    if (HEXES.indexOf(macBytes[i].toUpperCase().charAt(0)) == -1 || HEXES.indexOf(macBytes[i].toUpperCase().charAt(1)) == -1) {      return false;    }  }  return true;}  }
class C{  public long create_sync_sample_atom(MP4DataStream bitstream) throws IOException {  log.trace("Sync sample atom contains keyframe info");  create_full_atom(bitstream);  syncSamples=new Vector<Integer>();  entryCount=(int)bitstream.readBytes(4);  log.trace("Sync entries: {}",entryCount);  readed+=4;  for (int i=0; i < entryCount; i++) {    int sample=(int)bitstream.readBytes(4);    syncSamples.addElement(Integer.valueOf(sample));    readed+=4;  }  return readed;}  }
class C{  public static void main(String[] args){  TestBadPackageFileInJar tester=new TestBadPackageFileInJar();  run(tester,ARGS,TEST,NO_TEST);  tester.printSummary();}  }
class C{  public boolean isField(final String fieldName){  if (fieldName != null) {    return (KEYWORD_LIST.contains(fieldName.toUpperCase(Locale.US)) || fieldName.toUpperCase().startsWith(PROP_FIELD));  }  return false;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public boolean userCanCreateGroup(int connectedUserId,String entidad) throws Exception {  boolean can=false;  try {    can=hasUserGroupAuth(connectedUserId,USER_ACTION_ID_CREATE,Defs.NULL_ID,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  }  return can;}  }
class C{  public void inset(int dx,int dy){  left+=dx;  top+=dy;  right-=dx;  bottom-=dy;}  }
class C{  @Override public int size(){  return this._map.size();}  }
class C{  protected boolean identityEquals(Identity identity){  if (!name.equalsIgnoreCase(identity.name))   return false;  if ((publicKey == null) ^ (identity.publicKey == null))   return false;  if (publicKey != null && identity.publicKey != null)   if (!publicKey.equals(identity.publicKey))   return false;  return true;}  }
class C{  public Flag registerRequired(final Class<?> type,final String usage,final String description){  final Flag flag=new AnonymousFlag(description,type,usage);  register(flag);  return flag;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:01.792 -0500",hash_original_method="D2E0FD9FD256FCE483409E8A0B1A737B",hash_generated_method="D3F1E1CC2C1AFF2CBF00F1155854E280") private int nativeQueryRights(DrmRawContent content,DrmRights rights){  addTaint(content.getTaint());  addTaint(rights.getTaint());  return getTaintInt();}  }
class C{  private String doubleQuotesHandling(String resource){  return resource.replaceAll("\"",Matcher.quoteReplacement("\\\""));}  }
class C{  public void addPart(String name,String hashMethod,byte[] data){  builder.addPart(new MessagePart(name,hashMethod,data));}  }
class C{  public AlignVerticalAction(final NetworkPanel networkPanel){  super(networkPanel,"Align Vertical",EnablingCondition.NEURONS);  putValue(SMALL_ICON,ResourceManager.getImageIcon("AlignVertical.png"));  putValue(SHORT_DESCRIPTION,"Align selected neurons vertically");}  }
class C{  private void collapse(boolean erase){  GraphNode master=selectedNodes.getChosenNode();  Collection<GraphNode> objects=selectedNodes.getSelectionNodes();  getEditor().collapse(master,objects,erase,null);}  }
class C{  private static int checkFormalTypeParameters(final String signature,int pos){  pos=checkChar('<',signature,pos);  pos=checkFormalTypeParameter(signature,pos);  while (getChar(signature,pos) != '>') {    pos=checkFormalTypeParameter(signature,pos);  }  return pos + 1;}  }
class C{  public static void checkState(boolean expression,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (!expression) {    throw new IllegalStateException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  private ClusterUID buildLocalClusterUID(){  ClusterUID localClusterUID=new ClusterUID();  localClusterUID.setId(LOCAL_SITE_ID);  return localClusterUID;}  }
class C{  private ConnectorInfo toConnectorInfo(AbstractHttp11JsseProtocol<?> protocol) throws IllegalAccessException, InvocationTargetException {  ConnectorInfo info=new ConnectorInfo();  BeanUtils.copyProperties(info,protocol);  info.setName(ObjectName.unquote(info.getName()));  return info;}  }
class C{  public void search(){  performSearch();}  }
class C{  public StoryObject(int id){  this.id=id;}  }
class C{  @Transactional(readOnly=true) public void populateProteinMatches(Protein nonPersistedProtein,List<BerkeleyMatch> berkeleyMatches,Map<String,SignatureLibraryRelease> analysisJobMap){  populateProteinMatches(Collections.singleton(nonPersistedProtein),berkeleyMatches,analysisJobMap);}  }
class C{  protected void displayImageFromFile(String imageUri,ImageView imageView) throws IOException {  String filePath=Scheme.FILE.crop(imageUri);  File file=new File(filePath);  if (!file.exists()) {    return;  }  Bitmap bitmap;  try {    bitmap=BitmapFactory.decodeFile(filePath);  } catch (  Exception e) {    e.printStackTrace();    return;  }  if (imageView != null) {    imageView.setImageBitmap(bitmap);  }}  }
class C{  public s removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public static int compare(Object left,double right) throws PageException {  if (left instanceof Number)   return compare(((Number)left).doubleValue(),right); else   if (left instanceof String)   return compare((String)left,right); else   if (left instanceof Boolean)   return compare(((Boolean)left).booleanValue() ? 1D : 0D,right); else   if (left instanceof Date)   return compare(((Date)left),right); else   if (left instanceof Castable) {    if (isComparableComponent((Castable)left))     return compareComponent((Castable)left,right);    return ((Castable)left).compareTo(right);  } else   if (left instanceof Locale)   return compare(((Locale)left),Caster.toString(right)); else   if (left == null)   return -1; else   if (left instanceof Character)   return compare(((Character)left).toString(),right); else   if (left instanceof Calendar)   return compare(((Calendar)left).getTime(),right); else   if (left instanceof TimeZone)   return compare(((TimeZone)left),Caster.toString(right)); else {    return error(false,true);  }}  }
class C{  private void checkRootBlock(final IRootBlockView rbv){  final long nxtOffset=rbv.getNextOffset();  final int nxtalloc=-(int)(nxtOffset >> 32);  final int metaBitsAddr=-(int)nxtOffset;  final long metaAddr=rbv.getMetaStartAddr();  final long rawMetaBitsAddr=rbv.getMetaBitsAddr();  if (metaAddr == 0 || rawMetaBitsAddr == 0) {    log.warn("No meta allocation data included in root block for RWStore");  }  if (m_quorum == null && log.isTraceEnabled()) {    final int commitRecordAddr=(int)(rbv.getCommitRecordAddr() >> 32);    log.trace("CommitRecord " + rbv.getCommitRecordAddr() + " at physical address: "+ physicalAddress(commitRecordAddr));  }  final long commitCounter=rbv.getCommitCounter();  if (log.isTraceEnabled())   log.trace("m_allocation: " + nxtalloc + ", m_metaBitsAddr: "+ metaBitsAddr+ ", m_commitCounter: "+ commitCounter);}  }
class C{  @NotNull @ObjectiveCName("joinGroupWithGid:") public Promise<Void> joinGroup(int gid){  return modules.getGroupsModule().joinGroup(gid);}  }
class C{  public static MemFileChannel newChannel(ReadableByteChannel in) throws IOException {  return newChannel(in,DatabaseImpl.RW_CHANNEL_MODE);}  }
class C{  public void addAnimation(ViewAnimation viewAnimation){  viewAnimations.add(viewAnimation);}  }
class C{  public void fromData(DataInput in) throws IOException, ClassNotFoundException {  this.regionPath=DataSerializer.readString(in);  this.callbackArgument=DataSerializer.readObject(in);  this.op=Operation.fromOrdinal(in.readByte());  this.originRemote=in.readBoolean();  this.distributedMember=DSFIDFactory.readInternalDistributedMember(in);}  }
class C{  public static void main(String[] args){  new LoginFrame(new SpreadsheetService("SpreadsheetApiDemo-1"),"(username)","");}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiInternalFrameUI();  return MultiLookAndFeel.createUIs(mui,((MultiInternalFrameUI)mui).uis,a);}  }
class C{  public void testQuickFix_noAnnotation(){  Project myProject=myFixture.getProject();  PsiParameter parameter=JavaPsiFacade.getInstance(myProject).getElementFactory().createParameter("param",PsiType.BOOLEAN);  runQuickFixTest(parameter,"boolean param");}  }
class C{  public static GetResourceParams create(@NotNull String container,@NotNull String sourcePath){  return new GetResourceParams().withContainer(container).withSourcePath(sourcePath);}  }
class C{  public void testInvokeAny1() throws Throwable {  ExecutorService e=new ForkJoinPool(1);  PoolCleaner cleaner=null;  try {    cleaner=cleaner(e);    try {      e.invokeAny(null);      shouldThrow();    } catch (    NullPointerException success) {    }  }  finally {    if (cleaner != null) {      cleaner.close();    }  }}  }
class C{  public static boolean isSameInstant(final Calendar cal1,final Calendar cal2){  if (cal1 == null || cal2 == null) {    throw new IllegalArgumentException("The date must not be null");  }  return cal1.getTime().getTime() == cal2.getTime().getTime();}  }
class C{  public static String padLeft(String inString,int length){  return fixStringLength(inString,length,false);}  }
class C{  public void customReplaceRegex(String name,String regex,String replacement){  customLazy(name,null);}  }
class C{  public void decorateAtTimeWriteToDisk(final ExifInterface exifInterface){  mExifInterface=exifInterface;}  }
class C{  public void createDatabaseEntitiesForBusinessObjectFormatDdlTesting(){  createDatabaseEntitiesForBusinessObjectFormatDdlTesting(FileTypeEntity.TXT_FILE_TYPE,AbstractServiceTest.FIRST_PARTITION_COLUMN_NAME,AbstractServiceTest.SCHEMA_DELIMITER_PIPE,AbstractServiceTest.SCHEMA_ESCAPE_CHARACTER_BACKSLASH,AbstractServiceTest.SCHEMA_NULL_VALUE_BACKSLASH_N,schemaColumnDaoTestHelper.getTestSchemaColumns(),schemaColumnDaoTestHelper.getTestPartitionColumns(),AbstractServiceTest.CUSTOM_DDL_NAME);}  }
class C{  public boolean equals(Object p_test){  if (p_test instanceof URI) {    URI testURI=(URI)p_test;    if (((m_scheme == null && testURI.m_scheme == null) || (m_scheme != null && testURI.m_scheme != null && m_scheme.equals(testURI.m_scheme))) && ((m_userinfo == null && testURI.m_userinfo == null) || (m_userinfo != null && testURI.m_userinfo != null && m_userinfo.equals(testURI.m_userinfo))) && ((m_host == null && testURI.m_host == null) || (m_host != null && testURI.m_host != null && m_host.equals(testURI.m_host)))&& m_port == testURI.m_port && ((m_path == null && testURI.m_path == null) || (m_path != null && testURI.m_path != null && m_path.equals(testURI.m_path))) && ((m_queryString == null && testURI.m_queryString == null) || (m_queryString != null && testURI.m_queryString != null && m_queryString.equals(testURI.m_queryString))) && ((m_fragment == null && testURI.m_fragment == null) || (m_fragment != null && testURI.m_fragment != null && m_fragment.equals(testURI.m_fragment)))) {      return true;    }  }  return false;}  }
class C{  protected int bytesPerLine(){  return (72);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String whiteboxHeaderFile=null;  String whiteboxDataFile=null;  WhiteboxRaster output=null;  int i=0;  String[] imageFiles;  int numImages=0;  double noData=-32768;  int progress=0;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    String returnedHeader="";    for (i=0; i < numImages; i++) {      if (numImages > 1) {        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      GeoTiff gt=new GeoTiff(imageFiles[i]);      gt.read();      int compressionType=gt.getCompressionType();      if (compressionType != 1) {        showFeedback("GeoTiff import does not currently support compressed files.");        return;      }      boolean hasNoDataValue=gt.hasNoDataTag();      double nodata;      if (hasNoDataValue) {        nodata=gt.getNoData();      } else {        nodata=-32768;      }      int nRows=gt.getNumberRows();      int nCols=gt.getNumberColumns();      int dot=imageFiles[i].lastIndexOf(".");      String tiffExtension=imageFiles[i].substring(dot + 1);      whiteboxHeaderFile=imageFiles[i].replace(tiffExtension,"dep");      if (i == 0) {        returnedHeader=whiteboxHeaderFile;      }      whiteboxDataFile=imageFiles[i].replace(tiffExtension,"tas");      (new File(whiteboxHeaderFile)).delete();      (new File(whiteboxDataFile)).delete();      ByteOrder byteOrder=gt.getByteOrder();      WhiteboxRasterBase.DataScale myDataScale=WhiteboxRasterBase.DataScale.CONTINUOUS;      if (gt.getPhotometricInterpretation() == 2) {        myDataScale=WhiteboxRasterBase.DataScale.RGB;      }      final WhiteboxRaster wbr=new WhiteboxRaster(whiteboxHeaderFile,gt.getNorth(),gt.getSouth(),gt.getEast(),gt.getWest(),nRows,nCols,myDataScale,WhiteboxRasterBase.DataType.FLOAT,nodata,nodata);      wbr.setByteOrder(byteOrder.toString());      double z;      int oldProgress=-1;      for (int row=0; row < nRows; row++) {        for (int col=0; col < nCols; col++) {          z=gt.getValue(row,col);          if (!hasNoDataValue && (z == -32768 || z == -Float.MAX_VALUE)) {            nodata=z;            hasNoDataValue=true;            wbr.setNoDataValue(nodata);          }          wbr.setValue(row,col,z);        }        progress=(int)(100f * row / (nRows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress("Exporting GeoTiff file...",progress);        }      }      wbr.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      wbr.addMetadataEntry("Created on " + new Date());      String[] metaData=gt.showInfo();      for (int a=0; a < metaData.length; a++) {        wbr.addMetadataEntry(metaData[a]);      }      wbr.close();      gt.close();    }    if (!returnedHeader.isEmpty()) {      returnData(returnedHeader);    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void activeNavigator(){  LatLong startPoint=Destination.getDestination().getStartPoint();  LatLong endPoint=Destination.getDestination().getEndPoint();  if (startPoint != null && endPoint != null) {    navSettingsVP.setVisibility(View.INVISIBLE);    View pathfinding=activity.findViewById(R.id.map_nav_settings_path_finding);    pathfinding.setVisibility(View.VISIBLE);    pathfinding.bringToFront();    MapHandler mapHandler=MapHandler.getMapHandler();    mapHandler.calcPath(startPoint.latitude,startPoint.longitude,endPoint.latitude,endPoint.longitude);    if (Variable.getVariable().isDirectionsON()) {      mapHandler.setNeedPathCal(true);    }  }}  }
class C{  public CommentProvider id(int id){  mCommentId=id;  return this;}  }
class C{  public String confidenceFactorTipText(){  return "The confidence factor used for pruning (smaller values incur " + "more pruning).";}  }
class C{  private static boolean needsExplicitBoxing(Expression expression){  StructuralPropertyDescriptor locationInParent=expression.getLocationInParent();  if (locationInParent == ParenthesizedExpression.EXPRESSION_PROPERTY)   return needsExplicitBoxing((ParenthesizedExpression)expression.getParent());  if (locationInParent == ClassInstanceCreation.EXPRESSION_PROPERTY || locationInParent == FieldAccess.EXPRESSION_PROPERTY || locationInParent == MethodInvocation.EXPRESSION_PROPERTY)   return true;  return false;}  }
class C{  public static boolean uploadMarker(String mapId,String title,String description,String iconUrl,Location location,MapsClient mapsClient,String authToken,MapsGDataConverter mapsGDataConverter) throws ParseException, HttpException, IOException {  String featuresFeed=MapsClient.getFeaturesFeed(mapId);  MapsFeature mapsFeature=buildMapsMarkerFeature(title,description,iconUrl,location);  Entry entry=mapsGDataConverter.getEntryForFeature(mapsFeature);  try {    mapsClient.createEntry(featuresFeed,authToken,entry);  } catch (  IOException e) {    Log.d(TAG,"Retry upload marker",e);    mapsClient.createEntry(featuresFeed,authToken,entry);  }  return true;}  }
class C{  public static void redoLastSelection(final CSelectionHistory history){  if (history.canRedo()) {    history.redo();  }}  }
class C{  @Override public synchronized void updateByte(String columnName,byte x) throws SQLException {  updateByte(findColumn(columnName),x);}  }
class C{  public boolean isWrapperFor(Class<?> iface) throws SQLException {  boolean isInstance=iface.isInstance(this);  if (isInstance) {    return true;  }  String interfaceClassName=iface.getName();  return (interfaceClassName.equals("com.mysql.jdbc.Statement") || interfaceClassName.equals("java.sql.Statement") || interfaceClassName.equals("java.sql.PreparedStatement")|| interfaceClassName.equals("java.sql.Wrapper"));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:44.780 -0500",hash_original_method="9BD985D9D137F9E87CC0C75657FC57B8",hash_generated_method="32FF19C454094FA2C68CBFDFC4AA27D0") public Element next(){  return theNext;}  }
class C{  boolean isInterruptibleLockRequest(){  final ThreadRequestState requestState=(ThreadRequestState)threadRequestState.get();  if (requestState == null) {    return false;  }  return requestState.interruptible;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  Attr newAttribute;  Attr districtAttr;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testEmployee=(Element)elementList.item(2);  newAttribute=doc.createAttribute("district");  districtAttr=testEmployee.setAttributeNode(newAttribute);  assertNull("elementSetAttributeNodeNullAssert",districtAttr);}  }
class C{  @PUT @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) @Path("/{namespaceId}") @Description("Update the namespace.") public NamespaceDto updateNamespace(@Context HttpServletRequest req,@PathParam("namespaceId") final BigInteger namespaceId,NamespaceDto newNamespace){  PrincipalUser remoteUser=getRemoteUser(req);  if (namespaceId == null || namespaceId.compareTo(BigInteger.ZERO) < 1) {    throw new WebApplicationException("Namespace Id cannot be null and must be a positive non-zero number.",Status.BAD_REQUEST);  }  if (newNamespace == null) {    throw new WebApplicationException("Cannot update null namespace.",Status.BAD_REQUEST);  }  Namespace oldNamespace=_namespaceService.findNamespaceByPrimaryKey(namespaceId);  if (oldNamespace == null) {    throw new WebApplicationException("The namespace with id " + namespaceId + " does not exist",Response.Status.NOT_FOUND);  }  if (!oldNamespace.getQualifier().equals(newNamespace.getQualifier())) {    throw new WebApplicationException("The qualifier can not be updated.",Response.Status.NOT_FOUND);  }  validateResourceAuthorization(req,oldNamespace.getCreatedBy(),remoteUser);  Set<PrincipalUser> users=_getPrincipalUserByUserName(newNamespace.getUsernames());  if (!users.contains(oldNamespace.getOwner())) {    users.add(oldNamespace.getOwner());  }  oldNamespace.setUsers(users);  return NamespaceDto.transformToDto(_namespaceService.updateNamespace(oldNamespace));}  }
class C{  @Override public String evaluatorTipText(){  return "The evaluator to use.";}  }
class C{  public static void main(String[] args) throws IOException, IllegalAccessException, InstantiationException, ClassNotFoundException {  String[] pathes={"D:\\Datasets\\Fashion10000RunItemImproved\\"};  for (int r=0; r < pathes.length; r++) {    double informationGainThreshold=0.22;    int numberOfCombinations=12;    int numberOfNeighbours=16;    double precisionThreshold=1.0;    String pathName=pathes[r];    boolean useIndexSearch=true;    String locationSaveResultsFile=pathName + System.currentTimeMillis() + "_IG"+ informationGainThreshold+ "_NC"+ numberOfCombinations+ "_NN"+ numberOfNeighbours+ "_"+ "run.txt";    String locationOfIndex=pathName + "idx\\index";    String testIndexLocation="D:\\Datasets\\FashionTestItemDataSet\\" + "idx\\index";    String testImageLocation="D:\\Datasets\\FashionTestItemDataSet\\";    String locationOfImages=pathName;    String locationOfTrainSet=pathName + "train.txt";    String locationExtracorFile=pathName + "indexall.data";    String locationOfTestset=pathName + "test.txt";    String[] fieldsArray={"CEDD","EdgeHistogram","FCTH","ColorLayout","PHOG","JCD","Gabor","JpegCoeffs","Tamura","Luminance_Layout","Opponent_Histogram","ScalableColor"};    String[] classArray={"CEDD","EdgeHistogram","FCTH","ColorLayout","PHOG","JCD","Gabor","JpegCoefficientHistogram","Tamura","LuminanceLayout","OpponentHistogram","ScalableColor"};    int[] featureSpace=new int[classArray.length];    double[] featuresInformationGain={0,0,0,0,0,0,0,0,0,0,0,0};    InputStream inf=new FileInputStream(locationExtracorFile);    byte[] tempIntf=new byte[4];    int tmpf, tmpFeaturef;    byte[] tempf=new byte[100 * 1024];    while ((tmpf=inf.read(tempIntf,0,4)) > 0) {      tmpf=SerializationUtils.toInt(tempIntf);      inf.read(tempf,0,tmpf);      while (inf.read(tempIntf,0,1) > 0) {        if (tempIntf[0] == -1)         break;        tmpFeaturef=tempIntf[0];        GlobalFeature f=(GlobalFeature)Class.forName(Extractor.features[tmpFeaturef]).newInstance();        inf.read(tempIntf,0,4);        tmpf=SerializationUtils.toInt(tempIntf);        inf.read(tempf,0,tmpf);        f.setByteArrayRepresentation(tempf,0,tmpf);        for (int z=0; z < classArray.length; z++) {          if (f.getClass().getSimpleName().equals(classArray[z]))           featureSpace[z]=f.getFeatureVector().length;        }      }      break;    }    HashMap<String,Integer> featureSpaceHashMap=new HashMap<String,Integer>(classArray.length);    for (int d=0; d < classArray.length; d++)     featureSpaceHashMap.put(classArray[d],featureSpace[d]);    HashMap<String,Double> featureInformationGainHashMap=new HashMap<String,Double>(classArray.length);    for (int d=0; d < classArray.length; d++)     featureInformationGainHashMap.put(classArray[d],0.0);    String class1="yes";    String class2="no";    ArrayList<String> reducedFieldsArray=new ArrayList<String>();    ArrayList<String> reducedClassArray=new ArrayList<String>();    double maxInfoGain=0.0;    double minInfoGain=1000.0;    for (int i=0; i < classArray.length; i++) {      if (featureInformationGainHashMap.get(classArray[i]) > maxInfoGain)       maxInfoGain=featureInformationGainHashMap.get(classArray[i]);      if (featureInformationGainHashMap.get(classArray[i]) < minInfoGain)       minInfoGain=featureInformationGainHashMap.get(classArray[i]);    }    double infoGainAvg=0.0;    for (int i=0; i < classArray.length; i++) {      infoGainAvg=infoGainAvg + (featureInformationGainHashMap.get(classArray[i]) - minInfoGain) / (maxInfoGain - minInfoGain);    }    infoGainAvg=(infoGainAvg / classArray.length) / 2;    for (int i=0; i < classArray.length; i++) {      reducedFieldsArray.add(fieldsArray[i]);      reducedClassArray.add(classArray[i]);    }    if (numberOfCombinations > reducedClassArray.size())     numberOfCombinations=reducedClassArray.size();    System.out.println("Features reduced! Starting with classification. Reduced Feature Set: " + reducedClassArray.toString());    try {      if (useIndexSearch)       testClassifyNCombinedFeaturesMulti(0,220,locationSaveResultsFile,numberOfNeighbours,locationOfIndex,testIndexLocation,locationOfImages,locationOfTestset,0,reducedFieldsArray,reducedClassArray,numberOfCombinations,class1,class2,informationGainThreshold,"TestSet",precisionThreshold,classArray,testImageLocation);    } catch (    NoSuchFieldException e) {      e.printStackTrace();    }catch (    IllegalAccessException e) {      e.printStackTrace();    }catch (    ClassNotFoundException e) {      e.printStackTrace();    }catch (    InstantiationException e) {      e.printStackTrace();    }  }}  }
class C{  @Override public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){  if (buttonView == mShowAllDisplaysCheckbox) {    mDisplayListAdapter.updateContents();  } else {    final Display display=(Display)buttonView.getTag();    if (isChecked) {      PresentationContents contents=new PresentationContents(getNextPhoto());      showPresentation(display,contents);    } else {      hidePresentation(display);    }  }}  }
class C{  public static boolean isExtension(String filename,String[] extensions){  if (filename == null) {    return false;  }  if (extensions == null || extensions.length == 0) {    return indexOfExtension(filename) == -1;  }  String fileExt=getExtension(filename);  for (  String extension : extensions) {    if (fileExt.equals(extension)) {      return true;    }  }  return false;}  }
class C{  private void clearParserNoticeHighlights(Parser parser){  RSyntaxTextAreaHighlighter h=(RSyntaxTextAreaHighlighter)textArea.getHighlighter();  if (h != null) {    h.clearParserHighlights(parser);  }  if (noticesToHighlights != null) {    for (Iterator i=noticesToHighlights.entrySet().iterator(); i.hasNext(); ) {      Map.Entry entry=(Map.Entry)i.next();      ParserNotice notice=(ParserNotice)entry.getKey();      if (notice.getParser() == parser) {        i.remove();      }    }  }}  }
class C{  @Override public boolean onOptionsItemSelected(MenuItem item){  if (item.getItemId() == android.R.id.home) {    NavUtils.navigateUpFromSameTask(this);    return true;  }  return super.onOptionsItemSelected(item);}  }
class C{  public SQLInvalidAuthorizationSpecException(String reason){  super(reason,null,0);}  }
class C{  @Override public void openPdfFile(final String filename,final Certificate certificate,final PrivateKey key) throws PdfException {  fileAccess.setUserEncryption(certificate,key);  openPdfFile(filename);}  }
class C{  public void receiveResultqueryAssociatedProcessorsForArray(com.emc.storageos.vasa.VasaServiceStub.QueryAssociatedProcessorsForArrayResponse result){}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private static void renderNeededHiddenFields(FacesContext context,UIComponent component) throws IOException {  ResponseWriter writer=context.getResponseWriter();  Map map=getHiddenFieldMap(context,false);  if (map != null) {    Iterator entries=map.entrySet().iterator();    while (entries.hasNext()) {      Map.Entry entry=(Map.Entry)entries.next();      if (Boolean.TRUE.equals(entry.getValue())) {        writer.startElement("input",component);        writer.writeAttribute("type","hidden",null);        writer.writeAttribute("name",entry.getKey(),null);        writer.endElement("input");      }    }    Map requestMap=context.getExternalContext().getRequestMap();    requestMap.put(HIDDEN_FIELD_KEY,null);  }  String formTarget=(String)component.getAttributes().get("target");  renderClearHiddenParamsJavaScript(context,writer,map,formTarget,component.getClientId(context));}  }
class C{  public BreitWigner(double mean,double gamma,double cut,RandomEngine randomGenerator){  setRandomGenerator(randomGenerator);  setState(mean,gamma,cut);}  }
class C{  private boolean isBranchExists(String ref) throws IOException {  return (repo.getRef(ref) != null);}  }
class C{  public static int pairHash(int i,int j,int k,int l,int m){  int t=pairHash(i,j);  t=pairHash(t,k);  t=pairHash(t,l);  return pairHash(t,m);}  }
class C{  void startHttpServer() throws IOException {  httpServer=com.sun.net.httpserver.HttpServer.create(new InetSocketAddress(0),0);  HttpContext ctx=httpServer.createContext("/test/",new MyHandler());  httpServer.start();}  }
class C{  boolean hasMoreReferrals(){  if (debug)   System.out.println("LdapReferralException.hasMoreReferrals");  return (!foundEntry) && (referralIndex < referralCount);}  }
class C{  public SimpleLedgerAllocator(String allocatePath,Versioned<byte[]> allocationData,QuorumConfigProvider quorumConfigProvider,ZooKeeperClient zkc,BookKeeperClient bkc){  this.zkc=zkc;  this.bkc=bkc;  this.allocatePath=allocatePath;  this.quorumConfigProvider=quorumConfigProvider;  initialize(allocationData);}  }
class C{  public DiskCache(File cacheDir){  this.cacheDir=cacheDir;}  }
class C{  public void addProperty(ClassProperty prop,boolean failOnDuplicate){  String name=prop.fullName();  if (props.put(name,prop) != null && failOnDuplicate)   throw new CacheException("Property with name '" + name + "' already exists.");  fields.put(name,prop.type());}  }
class C{  public final int indexOf(Object element){  for (int i=0; i < m_Size; i++) {    if (element.equals(m_Objects[i])) {      return i;    }  }  return -1;}  }
class C{  public void focusLost(FocusEvent e){  uninstall();}  }
class C{  public final static byte[] toByteArray(char[] carr,String charset) throws UnsupportedEncodingException {  return new String(carr).getBytes(charset);}  }
class C{  public CompilerException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void checkFieldMapping(){  boolean bStockOK=!jCheckAddStockLevels.isSelected();  if (!bStockOK) {    if (jComboSecurity.getSelectedItem() != "" && jComboMaximum.getSelectedItem() != "") {      bStockOK=true;    }  }  if (bStockOK && jComboReference.getSelectedItem() != "" && jComboName.getSelectedItem() != "" && jComboBarcode.getSelectedItem() != "" && jComboBuy.getSelectedItem() != "" && jComboSell.getSelectedItem() != "" && jComboCategory.getSelectedItem() != "" && m_CategoryModel.getSelectedText() != null) {    jImport.setEnabled(true);  } else {    jImport.setEnabled(false);  }}  }
class C{  protected boolean isEqualKey(Object key1,Object key2){  return (key1 == key2 || ((key1 != null) && key1.equals(key2)));}  }
class C{  public void paintCircle(Point2D pt1,Point2D pt2,Graphics graphics){  if (displayCircle && theMap != null) {    Graphics2D g=(Graphics2D)graphics;    if (pt1 != null && pt2 != null) {      double radphi1=ProjMath.degToRad(pt1.getY());      double radlambda0=ProjMath.degToRad(pt1.getX());      double radphi=ProjMath.degToRad(pt2.getY());      double radlambda=ProjMath.degToRad(pt2.getX());      double dRad=GreatCircle.sphericalDistance(radphi1,radlambda0,radphi,radlambda);      double rad=ProjMath.radToDeg(dRad);      OMCircle circle=new OMCircle(pt1.getY(),pt1.getX(),rad);      renderAttributes.setTo(circle);      Projection proj=theMap.getRotatedProjection();      circle.generate(proj);      circle.render(g);    }  }}  }
class C{  public ArrayList<TrackSegment> findTrackSegmentByBlock(String name){  if (name.length() <= 0) {    return null;  }  ArrayList<TrackSegment> ts=new ArrayList<TrackSegment>();  for (int i=0; i < layoutEditor.trackList.size(); i++) {    TrackSegment t=layoutEditor.trackList.get(i);    if (t.getBlockName().equals(name)) {      ts.add(t);    }  }  return ts;}  }
class C{  private void initTrees(ActivityFacilities facilities){  TreesBuilder treesBuilder=new TreesBuilder(this.scenario.getNetwork(),(DestinationChoiceConfigGroup)this.scenario.getConfig().getModule("locationchoice"));  treesBuilder.createTrees(facilities);  this.facilitiesOfType=treesBuilder.getFacilitiesOfType();  this.quadTreesOfType=treesBuilder.getQuadTreesOfType();}  }
class C{  public S2Point ortho(){  int k=largestAbsComponent();  S2Point temp;  if (k == 1) {    temp=new S2Point(1,0,0);  } else   if (k == 2) {    temp=new S2Point(0,1,0);  } else {    temp=new S2Point(0,0,1);  }  return S2Point.normalize(crossProd(this,temp));}  }
class C{  public double area(){  if (isEmpty()) {    return 0;  }  return lng().getLength() * Math.abs(Math.sin(latHi().radians()) - Math.sin(latLo().radians()));}  }
class C{  public ReceiveWorker(final ClientReader inputStream,final LinkedBlockingQueue<DebuggerReply> eventQueue){  workerInputStream=Preconditions.checkNotNull(inputStream,"IE00743: Input stream can not be null");  this.eventQueue=Preconditions.checkNotNull(eventQueue,"IE00744: Event queue can't be null");  parserFactory=new ParserFactory(inputStream);}  }
class C{  public static IllegalStateException newIllegalStateException(int errorCode,String message,Object... arguments){  return initCause(new IllegalStateException(formatMessage(errorCode,message,arguments)),arguments);}  }
class C{  public static String parseCharset(Map<String,String> headers,String defaultCharset){  String contentType=headers.get(HTTP.CONTENT_TYPE);  if (contentType != null) {    String[] params=contentType.split(";");    for (int i=1; i < params.length; i++) {      String[] pair=params[i].trim().split("=");      if (pair.length == 2) {        if (pair[0].equals("charset")) {          return pair[1];        }      }    }  }  return defaultCharset;}  }
class C{  public GPUImageFilterGroup(){  this(null);}  }
class C{  protected void rePrepare() throws SQLException {synchronized (checkClosed().getConnectionMutex()) {    this.invalidationException=null;    try {      serverPrepare(this.originalSql);    } catch (    SQLException sqlEx) {      this.invalidationException=sqlEx;    }catch (    Exception ex) {      this.invalidationException=SQLError.createSQLException(ex.toString(),SQLError.SQL_STATE_GENERAL_ERROR,getExceptionInterceptor());      this.invalidationException.initCause(ex);    }    if (this.invalidationException != null) {      this.invalid=true;      this.parameterBindings=null;      this.parameterFields=null;      this.resultFields=null;      if (this.results != null) {        try {          this.results.close();        } catch (        Exception ex) {        }      }      if (this.generatedKeysResults != null) {        try {          this.generatedKeysResults.close();        } catch (        Exception ex) {        }      }      try {        closeAllOpenResults();      } catch (      Exception e) {      }      if (this.connection != null) {        if (!this.connection.getDontTrackOpenResources()) {          this.connection.unregisterStatement(this);        }      }    }  }}  }
class C{  public void fatal(String trace,Throwable e){  printTrace(trace,FATAL_LEVEL);  printTrace(ExceptionUtil.getFullStackTrace(e),FATAL_LEVEL);}  }
class C{  @Override public void writeImage(BufferedImage img,TranscoderOutput output) throws TranscoderException {  lastimg=img;}  }
class C{  public static String md5(String key){  String cacheKey;  try {    final MessageDigest mDigest=MessageDigest.getInstance("MD5");    mDigest.update(key.getBytes());    cacheKey=bytesToHexString(mDigest.digest());  } catch (  NoSuchAlgorithmException e) {    cacheKey=String.valueOf(key.hashCode());  }  return cacheKey;}  }
class C{  public NSSet(boolean ordered,NSObject... objects){  this.ordered=ordered;  if (!ordered)   set=new LinkedHashSet<NSObject>(); else   set=new TreeSet<NSObject>();  set.addAll(Arrays.asList(objects));}  }
class C{  public int size(){  return count;}  }
class C{  public static final double azimuth(Tuple3d a,Tuple3d b){  double dx=b.x - a.x;  double dy=b.y - a.y;  return Math.atan2(dy,dx);}  }
class C{  boolean canPaste(){  return false;}  }
class C{  public void multiplyMatrix4x4ByMatrix(Matrixf4x4 matrixf){  if (matrixValid && matrixf.isMatrixValid()) {    float[] bufferMatrix={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};    float[] matrix=matrixf.getMatrix();    multiplyMatrix(matrix,0,bufferMatrix,0);    matrixf.setMatrix(bufferMatrix);  } else   Log.e("matrix","Matrix is invalid, internal is " + matrix.length + " long"+ " , input matrix is "+ matrixf.getMatrix().length+ " long");}  }
class C{  public void addColorAt(float p,ReadonlyTColor c){  gradient.add(new GradPoint(p,c));}  }
class C{  private static void pp(GoogleService service,BaseEntry entry,Writer w) throws IOException {  XmlWriter xw=new XmlWriter(w,XML_PP,null);  ExtensionProfile extProfile=service.getExtensionProfile();  entry.generateAtom(xw,extProfile);  xw.flush();  w.write("\n");  w.flush();}  }
class C{  public static long copy(File source,File destination) throws FileNotFoundException, IOException {  FileInputStream in=null;  FileOutputStream out=null;  try {    in=new FileInputStream(source);    out=new FileOutputStream(destination);    return copy(in,out);  }  finally {    CloseableUtils.close(in);    CloseableUtils.close(out);  }}  }
class C{  int compile(List<String> opts,File... files){  List<String> args=new ArrayList<String>();  args.addAll(opts);  for (  File f : files)   args.add(f.getPath());  StringWriter sw=new StringWriter();  PrintWriter pw=new PrintWriter(sw);  int rc=com.sun.tools.javac.Main.compile(args.toArray(new String[args.size()]),pw);  pw.close();  String out=sw.toString();  if (out.length() > 0)   System.err.println(out);  return rc;}  }
class C{  public boolean isThereTLevel(final String signatureId){  SignatureWrapper signatureWrapper=getSignatureByIdNullSafe(signatureId);  return signatureWrapper.isThereTLevel();}  }
class C{  public static String formatDateTrazabilidad(Date fecha){  String cadena=null;  if (fecha != null) {    cadena=SDF_TRAZABILIDAD.format(fecha);  }  return cadena;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static InlineQueryResultDocumentBuilder builder(){  return new InlineQueryResultDocumentBuilder();}  }
class C{  private void populateCertIssuerNames(){  if (certificates == null)   return;  certIssuerNames=new Principal[certificates.length];  for (int i=0; i < certificates.length; i++) {    X509Certificate cert=certificates[i];    Principal certIssuerName=cert.getIssuerDN();    if (!(certIssuerName instanceof X500Name)) {      try {        X509CertInfo tbsCert=new X509CertInfo(cert.getTBSCertificate());        certIssuerName=(Principal)tbsCert.get(X509CertInfo.ISSUER + "." + X509CertInfo.DN_NAME);      } catch (      Exception e) {      }    }    certIssuerNames[i]=certIssuerName;  }}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {  if (documentHandler != null)   documentHandler.ignorableWhitespace(ch,start,length);}  }
class C{  public CF7(){  this(10);}  }
class C{  public Set<PersonUser> findPersonUsersInGroup(String tenantName,PrincipalId groupId,String searchString,int limit) throws Exception {  return getService().findPersonUsersInGroup(tenantName,groupId,searchString,limit,this.getServiceContext());}  }
class C{  private Instruction scheduleScalarDefsEarly(Enumeration<Operand> e,Instruction earlyPos,Instruction inst){  while (e.hasMoreElements()) {    Operand op=e.nextElement();    Instruction def=definingInstruction(op);    scheduleEarly(def);    if (def.isBranch())     def=dominanceSuccessor(def,inst);    earlyPos=maxDominatorDepth(def,earlyPos);  }  return earlyPos;}  }
class C{  public static void writeBitmapToUri(Context context,Bitmap bitmap,Uri uri,Bitmap.CompressFormat compressFormat,int compressQuality) throws FileNotFoundException {  OutputStream outputStream=null;  try {    outputStream=context.getContentResolver().openOutputStream(uri);    bitmap.compress(compressFormat,compressQuality,outputStream);  }  finally {    closeSafe(outputStream);  }}  }
class C{  void recomposeNamespaceAliases(NamespaceAlias nsAlias){  m_namespaceAliasComposed.put(nsAlias.getStylesheetNamespace(),nsAlias);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void removeRule(Rule rule){  ruleManager.removeRule(rule);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.N4_INTERFACE_DECLARATION__SUPER_INTERFACE_REFS:    getSuperInterfaceRefs().clear();  getSuperInterfaceRefs().addAll((Collection<? extends ParameterizedTypeRef>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object o=stack.pop();  if (o instanceof sage.vfs.MediaNode)   o=((sage.vfs.MediaNode)o).getDataObject();  return Boolean.valueOf(o instanceof Album);}  }
class C{  public final double quantile(double y){  return distribution.quantile(y) + offset;}  }
class C{  public final CC shrinkX(float w){  hor.setShrink(new Float(w));  return this;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.CONDITIONAL_EXPRESSION__EXPRESSION:    return getExpression();case N4JSPackage.CONDITIONAL_EXPRESSION__TRUE_EXPRESSION:  return getTrueExpression();case N4JSPackage.CONDITIONAL_EXPRESSION__FALSE_EXPRESSION:return getFalseExpression();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public LinkedList<Hypothesis> generate(LinkedList<Hypothesis> oldHypothesis){  LinkedList<Hypothesis> newHypothesis=new LinkedList<Hypothesis>();  while (!oldHypothesis.isEmpty()) {    Hypothesis hypo=oldHypothesis.removeFirst();    if (hypo.canBeRefined()) {      newHypothesis.addAll(hypo.refine());    }  }  return newHypothesis;}  }
class C{  public final static void writeSecurityBuffer(short length,short allocated,int bufferOffset,byte[] b,int offset){  ByteUtilities.writeShort(length,b,offset);  ByteUtilities.writeShort(allocated,b,offset + 2);  ByteUtilities.writeInt(bufferOffset,b,offset + 4);}  }
class C{  public double num(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return (m_left.num(xctxt) - m_right.num(xctxt));}  }
class C{  public static void declareGMExtensions(ExtensionProfile extProfile){  extProfile.declareEntryExtension(Stats.class);  extProfile.declareEntryExtension(AttributeHistogram.class);  extProfile.declareEntryExtension(GmAttributes.class);  extProfile.declareEntryExtension(GmItemType.class);  extProfile.declare(PubControl.class,GmDisapproved.getDefaultDescription());  extProfile.declare(PubControl.class,GmPublishingPriority.getDefaultDescription());}  }
class C{  public MinEngagementFilter(int minEngagement,BipartiteGraph bipartiteGraph,StatsReceiver statsReceiver){  super(statsReceiver);  this.minEngagement=minEngagement;  this.bipartiteGraph=bipartiteGraph;}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressWarnings(value="ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD",justification="This is only a style warning.") public ObjectName connectToSystem() throws AdminException, MalformedObjectNameException {synchronized (CONN_SYNC) {    try {      if (isConnected()) {        return ((AdminDistributedSystemJmxImpl)this.system).getObjectName();      }      DistributionManager.isDedicatedAdminVM=true;      AdminDistributedSystemJmxImpl systemJmx=(AdminDistributedSystemJmxImpl)this.system;      if (systemJmx == null) {        systemJmx=(AdminDistributedSystemJmxImpl)createDistributedSystem(this.agentConfig);        this.system=systemJmx;      }      systemJmx.connect(this.logWriter);      return new ObjectName(systemJmx.getMBeanName());    } catch (    AdminException e) {      logger.warn(e.getMessage(),e);      throw e;    }catch (    RuntimeException e) {      logger.warn(e.getMessage(),e);      throw e;    }catch (    VirtualMachineError err) {      SystemFailure.initiateFailure(err);      throw err;    }catch (    Error e) {      SystemFailure.checkFailure();      logger.error(e.getMessage(),e);      throw e;    }  }}  }
class C{  public void createExportGroupRollbackStep(URI exportGroupURI,String opId) throws ControllerException {  try {    _log.info(String.format("rollbackCreateRPExportGroup start - Export Group: [%s]",exportGroupURI));    WorkflowStepCompleter.stepExecuting(opId);    ExportGroup exportGroup=_dbClient.queryObject(ExportGroup.class,exportGroupURI);    exportGroup.setInactive(true);    _dbClient.updateObject(exportGroup);    _log.info(String.format("Rollback complete for Export Group: [%s]",exportGroupURI));    WorkflowStepCompleter.stepSucceded(opId);    _log.info(String.format("rollbackCreateRPExportGroup end - Export Group: [%s]",exportGroupURI));  } catch (  InternalException e) {    _log.error(String.format("rollbackCreateRPExportGroup Failed - Export Group: [%s]",exportGroupURI));    WorkflowStepCompleter.stepFailed(opId,e);  }catch (  Exception e) {    _log.error(String.format("rollbackCreateRPExportGroup Failed - Export Group: [%s]",exportGroupURI));    WorkflowStepCompleter.stepFailed(opId,DeviceControllerException.errors.jobFailed(e));  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:51.405 -0500",hash_original_method="33C298706B9DEBE0D1CFE9C3A9D89C98",hash_generated_method="F9E2A45108A053FA859BFA6D8FC9CA82") public ObjectIdentifier(String strOid){  this.oid=toIntArray(strOid);  this.soid=strOid;}  }
class C{  private static int toDigit(final char ch,final int index){  final int digit=Character.digit(ch,16);  if (digit == -1) {    throw new RuntimeException("Illegal hexadecimal character " + ch + " at index "+ index);  }  return digit;}  }
class C{  void processOFMessage(OFMessage m) throws IOException {  if (!state.channelHandshakeComplete) {switch (m.getType()) {case HELLO:      processOFHello((OFHello)m);    break;case ERROR:  processOFError((OFErrorMsg)m);break;case FEATURES_REPLY:processOFFeaturesReply((OFFeaturesReply)m);break;case EXPERIMENTER:processOFExperimenter((OFExperimenter)m);break;default :illegalMessageReceived(m);break;}} else {switch (m.getType()) {case ECHO_REPLY:processOFEchoReply((OFEchoReply)m);break;case ECHO_REQUEST:processOFEchoRequest((OFEchoRequest)m);break;default :sendMessageToConnection(m);break;}}}  }
class C{  public String[] readNext(){  String[] temp=nextLine;  try {    nextLine=super.readNext();  } catch (  IOException e) {    e.printStackTrace();    nextLine=null;  }  return temp;}  }
class C{  public void addPattern(int[] pattern){  addPattern(pattern,1.0);}  }
class C{  public int readRawVarint32() throws IOException {  byte tmp=readRawByte();  if (tmp >= 0) {    return tmp;  }  int result=tmp & 0x7f;  if ((tmp=readRawByte()) >= 0) {    result|=tmp << 7;  } else {    result|=(tmp & 0x7f) << 7;    if ((tmp=readRawByte()) >= 0) {      result|=tmp << 14;    } else {      result|=(tmp & 0x7f) << 14;      if ((tmp=readRawByte()) >= 0) {        result|=tmp << 21;      } else {        result|=(tmp & 0x7f) << 21;        result|=(tmp=readRawByte()) << 28;        if (tmp < 0) {          for (int i=0; i < 5; i++) {            if (readRawByte() >= 0) {              return result;            }          }          throw InvalidProtocolBufferException.malformedVarint();        }      }    }  }  return result;}  }
class C{  public WriteException(WriteRequest request,String message,Throwable cause){  super(message);  initCause(cause);  this.requests=asRequestList(request);}  }
class C{  public static boolean cs_print(Scs A,boolean brief){  int p, j, m, n, nzmax, nz, Ap[], Ai[];  float Ax[];  if (A == null) {    System.out.print("(null)\n");    return (false);  }  m=A.m;  n=A.n;  Ap=A.p;  Ai=A.i;  Ax=A.x;  nzmax=A.nzmax;  nz=A.nz;  System.out.print(String.format("CSparseJ Version %d.%d.%d, %s.  %s\n",Scs_common.CS_VER,Scs_common.CS_SUBVER,Scs_common.CS_SUBSUB,Scs_common.CS_SATE,Scs_common.CS_COPYRIGHT));  if (nz < 0) {    System.out.print(String.format("%d-by-%d, nzmax: %d nnz: %d, 1-norm: %g\n",m,n,nzmax,Ap[n],Scs_norm.cs_norm(A)));    for (j=0; j < n; j++) {      System.out.print(String.format("    col %d : locations %d to %d\n",j,Ap[j],Ap[j + 1] - 1));      for (p=Ap[j]; p < Ap[j + 1]; p++) {        System.out.print(String.format("      %d : %g\n",Ai[p],Ax != null ? Ax[p] : 1));        if (brief && p > 20) {          System.out.print("  ...\n");          return (true);        }      }    }  } else {    System.out.print(String.format("triplet: %d-by-%d, nzmax: %d nnz: %d\n",m,n,nzmax,nz));    for (p=0; p < nz; p++) {      System.out.print(String.format("    %d %d : %g\n",Ai[p],Ap[p],Ax != null ? Ax[p] : 1));      if (brief && p > 20) {        System.out.print("  ...\n");        return (true);      }    }  }  return (true);}  }
class C{  protected Polygon newPolygon(){  return new Polygon();}  }
class C{  public static Process spawn(final String className,final String... args) throws IOException {  return spawn(64 * 1025 * 1024L,className,args);}  }
class C{  private void readLayerSetElement(IXMLElement elem,HashMap<String,Style> styles) throws IOException {  if (DEBUG) {    System.out.println("ODGStylesReader unsupported <" + elem.getName() + "> element.");  }}  }
class C{  public void render(ShaderProgram program){  quad.render(program,GL20.GL_TRIANGLE_FAN,0,4);}  }
class C{  private void handleDisallow(ParseState state,RobotToken token){  if (state.isSkipAgents()) {    return;  }  state.setFinishedAgentFields(true);  if (!state.isAddingRules()) {    return;  }  String path=token.getData();  try {    path=URLDecoder.decode(path,"UTF-8");    if (path.length() == 0) {      state.clearRules();    } else {      state.addRule(path,false);    }  } catch (  Exception e) {    reportWarning("Error parsing robots rules - can't decode path: " + path,state.getUrl());  }}  }
class C{  public CallSpec<Void,HttpError> revokeContactRequest(String recipientId,String senderId){  return Resource.<Void,HttpError>newDeleteSpec(api,"/v1/users/{user_id}/contact_requests/{sender_id}",false).pathParam("user_id",recipientId).pathParam("sender_id",senderId).responseAs(Void.class).build();}  }
class C{  public Symbol resolveBinaryNameOrIdent(String name){  try {    Name flatname=names.fromString(name.replace("/","."));    return reader.loadClass(flatname);  } catch (  CompletionFailure ignore) {    return resolveIdent(name);  }}  }
class C{  public static void toast(String message,int displayTime,int severity){  toast(GBApplication.getContext(),message,displayTime,severity,null);}  }
class C{  public static boolean isReplaceMenuDefault(){  return replaceMenuDefault;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();}  }
class C{  @Override protected void onDraw(Canvas canvas){  setClickable(true);  float cx=getWidth() / 2;  float cy=getHeight() / 2;  float radius=getWidth() / 2.6f;  float left=(float)(cx - (0.5 * mBitmap.getWidth()));  float top=(getHeight() - mBitmap.getHeight()) / 2;  canvas.drawCircle(cx,cy,radius,mButtonPaint);  canvas.drawBitmap(mBitmap,left,top,mDrawablePaint);}  }
class C{  @NoInline @NoOptCompile @BaselineSaveLSRegisters @Unpreemptible public static int writeByte(int fd,int b){  RVMThread.saveThreadState();  RVMThread.enterNative();  int result=sysCall.sysWriteByte(fd,b);  RVMThread.leaveNative();  return result;}  }
class C{  private void connectToEditor(){  if (mEditorConnection != null && mEditorConnection.isValid()) {    if (SensorsDataAPI.ENABLE_LOG) {      Log.d(LOGTAG,"The VTrack server has been connected.");    }    return;  }  if (mVTrackServer != null) {    if (SensorsDataAPI.ENABLE_LOG) {      Log.d(LOGTAG,"Connecting to the VTrack server with " + mVTrackServer);    }    try {      mEditorConnection=new EditorConnection(new URI(mVTrackServer),new Editor());    } catch (    final URISyntaxException e) {      Log.e(LOGTAG,"Error parsing URI " + mVTrackServer + " for VTrack websocket",e);    }catch (    final EditorConnection.EditorConnectionException e) {      Log.e(LOGTAG,"Error connecting to URI " + mVTrackServer,e);    }  }}  }
class C{  public DividerItemDecoration(Context context){  final TypedArray styledAttributes=context.obtainStyledAttributes(ATTRS);  mDivider=styledAttributes.getDrawable(0);  styledAttributes.recycle();}  }
class C{  private boolean isIntTblMultCreated(){  boolean isMInt=false;  if (_flds.getMultFldsCount() > 0) {    for (int i=0; i < _flds.count(); i++) {      ArchiveFldImpl fld=(ArchiveFldImpl)_flds.get(i);      if (fld.isMult()) {        int type=fld.getType();        if (type == ArchiveFldType.SHORT_INTEGER || type == ArchiveFldType.LONG_INTEGER)         isMInt=true;      }    }  }  return isMInt;}  }
class C{  public int decrementDepth(){  return this.depth++;}  }
class C{  public static String birthdateToAge(LocalDate birthdate,Resources resources){  Period age=new Period(birthdate,LocalDate.now());  int years=age.getYears(), months=age.getMonths();  return years >= 5 ? resources.getString(R.string.abbrev_n_years,years) : resources.getString(R.string.abbrev_n_months,months + years * 12);}  }
class C{  public GeoBaseBBox(final PlanetModel planetModel){  super(planetModel);}  }
class C{  public String toString(){  if (index == 0) {    return StringPool.EMPTY;  }  char[] destination=new char[length];  int start=0;  for (int i=0; i < index; i++) {    String s=array[i];    int len=s.length();    s.getChars(0,len,destination,start);    start+=len;  }  return new String(destination);}  }
class C{  static <S>S applyRange(final S start,final long low,final long high){  if (start instanceof Map) {    return (S)applyRangeMap((Map)start,low,high);  } else   if (start instanceof Iterable) {    return (S)applyRangeIterable((Iterable)start,low,high);  }  return start;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case STRINGS:    return isSetStrings();case HELLO:  return isSetHello();}throw new IllegalStateException();}  }
class C{  public static String classPackageAsResourcePath(Class<?> clazz){  if (clazz == null) {    return "";  }  String className=clazz.getName();  int packageEndIndex=className.lastIndexOf('.');  if (packageEndIndex == -1) {    return "";  }  String packageName=className.substring(0,packageEndIndex);  return packageName.replace('.','/');}  }
class C{  public static void waitForProvisioningToComplete(List<String> instanceIds,VerificationHost host,AmazonEC2AsyncClient client,int errorRate) throws Throwable {  host.waitFor("Error waiting for EC2 client provisioning in test ",null);}  }
class C{  void createVao(){  vao=glGenVertexArrays();  int vbo=glGenBuffers();  glBindVertexArray(vao);  glBindBuffer(GL_ARRAY_BUFFER,vbo);  ByteBuffer bb=BufferUtils.createByteBuffer(boxes.length * 4 * (3 + 3)* 6* 6);  FloatBuffer fv=bb.asFloatBuffer();  for (int i=0; i < boxes.length; i+=2) {    DemoUtils.triangulateBox(boxes[i],boxes[i + 1],fv);  }  glBufferData(GL_ARRAY_BUFFER,bb,GL_STATIC_DRAW);  glEnableVertexAttribArray(0);  glVertexAttribPointer(0,3,GL_FLOAT,false,4 * (3 + 3),0L);  glEnableVertexAttribArray(1);  glVertexAttribPointer(1,3,GL_FLOAT,false,4 * (3 + 3),4 * 3);  glBindBuffer(GL_ARRAY_BUFFER,0);  glBindVertexArray(0);}  }
class C{  public FloatVector decode(FloatVector inputInstance){  Preconditions.checkArgument(inputInstance.getDimension() == model.getLayerSize(1) - 1,String.format("The dimension of input instance is %d, but the model requires dimension %d.",inputInstance.getDimension(),model.getLayerSize(1) - 1));  return this.transform(inputInstance,1);}  }
class C{  public void visited(IAutomatonVisitor visitor){  visitor.visit(this);}  }
class C{  public static String buildSdpOfferWithOrientation(VideoCodec[] supportedCodecs,int localRtpPort){  StringBuilder sdp=new StringBuilder(buildSdpOfferWithoutOrientation(supportedCodecs,localRtpPort)).append("a=").append(ATTRIBUTE_EXTENSION).append(':').append(RtpUtils.RTP_DEFAULT_EXTENSION_ID).append(" ").append(SdpOrientationExtension.VIDEO_ORIENTATION_URI).append(SipUtils.CRLF);  return sdp.toString();}  }
class C{  public ClientSubnetOption(int sourceNetmask,int scopeNetmask,InetAddress address){  super(EDNSOption.Code.CLIENT_SUBNET);  this.family=Address.familyOf(address);  this.sourceNetmask=checkMaskLength("source netmask",this.family,sourceNetmask);  this.scopeNetmask=checkMaskLength("scope netmask",this.family,scopeNetmask);  this.address=Address.truncate(address,sourceNetmask);  if (!address.equals(this.address))   throw new IllegalArgumentException("source netmask is not " + "valid for address");}  }
class C{  public void mouseClicked(MouseEvent e){  if (SwingUtilities.isRightMouseButton(e))   adaptee.popupMenu.show((Component)e.getSource(),e.getX(),e.getY());}  }
class C{  @RequestMapping(value={"","/"},method=RequestMethod.GET) @ResponseBody public RestWrapper list(@RequestParam(value="page",defaultValue="0") int startPage,@RequestParam(value="size",defaultValue="10") int pageSize,Principal principal){  RestWrapper restWrapper=null;  try {    Integer counter=batchStatusDAO.totalRecordCount().intValue();    List<com.wipro.ats.bdre.md.dao.jpa.BatchStatus> jpaBatchStatuses=batchStatusDAO.list(startPage,pageSize);    List<BatchStatus> batchStatuses=new ArrayList<BatchStatus>();    for (    com.wipro.ats.bdre.md.dao.jpa.BatchStatus batchStatus : jpaBatchStatuses) {      BatchStatus returnBatchStatus=new BatchStatus();      returnBatchStatus.setBatchStateId(batchStatus.getBatchStateId());      returnBatchStatus.setDescription(batchStatus.getDescription());      returnBatchStatus.setCounter(counter);      batchStatuses.add(returnBatchStatus);    }    restWrapper=new RestWrapper(batchStatuses,RestWrapper.OK);    LOGGER.info("All records listed from BatchStatus by User:" + principal.getName());  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public boolean isAnyLocTo(){  Object oo=get_Value(COLUMNNAME_AnyLocTo);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementhasattributens01.class,args);}  }
class C{  public static void i(String tag,String msg,Throwable thr){  log(LEVEL.INFO,tag,msg,thr);}  }
class C{  public String toRFC2253String(Map<String,String> oidMap){  StringBuilder typeAndValue=new StringBuilder(100);  typeAndValue.append(toKeyword(RFC2253,oidMap));  typeAndValue.append('=');  if ((typeAndValue.charAt(0) >= '0' && typeAndValue.charAt(0) <= '9') || !isDerString(value,false)) {    byte[] data=null;    try {      data=value.toByteArray();    } catch (    IOException ie) {      throw new IllegalArgumentException("DER Value conversion");    }    typeAndValue.append('#');    for (int j=0; j < data.length; j++) {      byte b=data[j];      typeAndValue.append(Character.forDigit(0xF & (b >>> 4),16));      typeAndValue.append(Character.forDigit(0xF & b,16));    }  } else {    String valStr=null;    try {      valStr=new String(value.getDataBytes(),"UTF8");    } catch (    IOException ie) {      throw new IllegalArgumentException("DER Value conversion");    }    final String escapees=",=+<>#;\"\\";    StringBuilder sbuffer=new StringBuilder();    for (int i=0; i < valStr.length(); i++) {      char c=valStr.charAt(i);      if (DerValue.isPrintableStringChar(c) || escapees.indexOf(c) >= 0) {        if (escapees.indexOf(c) >= 0) {          sbuffer.append('\\');        }        sbuffer.append(c);      } else       if (c == '\u0000') {        sbuffer.append("\\00");      } else       if (debug != null && Debug.isOn("ava")) {        byte[] valueBytes=null;        try {          valueBytes=Character.toString(c).getBytes("UTF8");        } catch (        IOException ie) {          throw new IllegalArgumentException("DER Value conversion");        }        for (int j=0; j < valueBytes.length; j++) {          sbuffer.append('\\');          char hexChar=Character.forDigit(0xF & (valueBytes[j] >>> 4),16);          sbuffer.append(Character.toUpperCase(hexChar));          hexChar=Character.forDigit(0xF & (valueBytes[j]),16);          sbuffer.append(Character.toUpperCase(hexChar));        }      } else {        sbuffer.append(c);      }    }    char[] chars=sbuffer.toString().toCharArray();    sbuffer=new StringBuilder();    int lead;    for (lead=0; lead < chars.length; lead++) {      if (chars[lead] != ' ' && chars[lead] != '\r') {        break;      }    }    int trail;    for (trail=chars.length - 1; trail >= 0; trail--) {      if (chars[trail] != ' ' && chars[trail] != '\r') {        break;      }    }    for (int i=0; i < chars.length; i++) {      char c=chars[i];      if (i < lead || i > trail) {        sbuffer.append('\\');      }      sbuffer.append(c);    }    typeAndValue.append(sbuffer.toString());  }  return typeAndValue.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:52.687 -0500",hash_original_method="23A835CF05C7A5BCBD423FD3E5C1A622",hash_generated_method="D469B2833BA2D077E5FD498CA9DE392F") public boolean hasGrantedPolicy(ComponentName admin,int usesPolicy){  if (mService != null) {    try {      return mService.hasGrantedPolicy(admin,usesPolicy);    } catch (    RemoteException e) {      Log.w(TAG,"Failed talking with device policy service",e);    }  }  return false;}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:40.379 -0500",hash_original_method="FB1CB9CE36DAC72C8A293B50C548452A",hash_generated_method="22BB318C5D3CC33996B2FEA75757D0E6") public void dump(Printer pw,String prefix){  crashInfo.dump(pw,prefix);  pw.println(prefix + "policy: " + policy);  if (durationMillis != -1) {    pw.println(prefix + "durationMillis: " + durationMillis);  }  if (numInstances != -1) {    pw.println(prefix + "numInstances: " + numInstances);  }  if (violationNumThisLoop != 0) {    pw.println(prefix + "violationNumThisLoop: " + violationNumThisLoop);  }  if (numAnimationsRunning != 0) {    pw.println(prefix + "numAnimationsRunning: " + numAnimationsRunning);  }  pw.println(prefix + "violationUptimeMillis: " + violationUptimeMillis);  if (broadcastIntentAction != null) {    pw.println(prefix + "broadcastIntentAction: " + broadcastIntentAction);  }  if (tags != null) {    int index=0;    for (    String tag : tags) {      pw.println(prefix + "tag[" + (index++)+ "]: "+ tag);    }  }}  }
class C{  public DefaultMapEntry(final K key,final V value){  super(key,value);}  }
class C{  protected SVGOMFEFuncGElement(){}  }
class C{  public void releaseInput() throws CacheException {  updateReleaseLocks();  if (!isAllocated)   throw new CacheException("Attempting to release an input before allocating it");}  }
class C{  private void removeFromPath(File file){  for (Iterator<File> i=deselected.iterator(); i.hasNext(); ) {    File f=i.next();    if (FileUtils.isAncestor(file,f)) {      i.remove();    }  }  while (file != null && !roots.contains(file)) {    File parent=file.getParentFile();    if (ancestorIsExcluded(parent)) {      deselected.remove(parent);      int childCount=directoryTreeModel.getChildCount(parent);      for (int j=0; j < childCount; j++) {        File sibling=(File)directoryTreeModel.getChild(parent,j);        if (sibling != null && !sibling.equals(file)) {          deselected.add(sibling);        }      }    }    file=parent;  }}  }
class C{  public void removeLayoutComponent(final Component child){  final String name=child.getName();  if (name != null) {    childMap.remove(name);  }}  }
class C{  public FileResolver(String dir){  rootPath=dir;}  }
class C{  protected void validateState(State currentState){  ValidationUtils.validateState(currentState);  ValidationUtils.validateTaskStage(currentState.taskState);}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public static Object[] ensureCapacity(Object[] array,int minCapacity){  int oldCapacity=array.length;  Object[] newArray;  if (minCapacity > oldCapacity) {    int newCapacity=(oldCapacity * 3) / 2 + 1;    if (newCapacity < minCapacity) {      newCapacity=minCapacity;    }    newArray=new Object[newCapacity];    System.arraycopy(array,0,newArray,0,oldCapacity);  } else {    newArray=array;  }  return newArray;}  }
class C{  public synchronized Integer size(){  if (closed)   return null;  return indexMap.size();}  }
class C{  @Override public void validate() throws SchedulerException {  super.validate();  if (repeatCount != 0 && repeatInterval < 1) {    throw new SchedulerException("Repeat Interval cannot be zero.");  }}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public void writeActorImages(){  if (!MovieModuleManager.MOVIE_SETTINGS.isWriteActorImages() || isMultiMovieDir()) {    return;  }  MovieActorImageFetcher task=new MovieActorImageFetcher(this);  TmmTaskManager.getInstance().addImageDownloadTask(task);}  }
class C{  protected void startBrowserProcessSync() throws ProcessInitException {  ((ChromeApplication)getApplication()).startBrowserProcessesAndLoadLibrariesSync(true);}  }
class C{  public void cloneSprite() throws IOException {  writeCode(CLONE_SPRITE);}  }
class C{  protected static MessageResponse selectMissingVarResponse(String var){  if (var.startsWith("ESU Function Row"))   return MessageResponse.IGNORE;  return MessageResponse.REPORT;}  }
class C{  public static String formatPrice(double price){  return priceDecimalFormat.format(price);}  }
class C{  public List<Vertex> findAllLike(String filter){  Pattern pattern=Pattern.compile(filter.replace("*",".*"));  List<Vertex> results=new ArrayList<Vertex>();  for (  Vertex vertex : findAll()) {    if (vertex.hasData()) {      if (pattern.matcher(vertex.getDataValue()).matches()) {        results.add(vertex);      }    }  }  return results;}  }
class C{  private float nullValue(float totalValue){  return (float)(totalValue * 0.002 * Math.PI);}  }
class C{  public static void fail(String msg){  throw new IllegalArgumentException(msg);}  }
class C{  public AbstractDCCppSerialConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  @Override public void onPropertiesChanged(Bundle properties){  super.onPropertiesChanged(properties);  mLowBitAmbient=properties.getBoolean(PROPERTY_LOW_BIT_AMBIENT,false);  mBurnInProtection=properties.getBoolean(PROPERTY_BURN_IN_PROTECTION,false);  if (Log.isLoggable(TAG,Log.DEBUG)) {    Log.d(TAG,"onPropertiesChanged: low-bit ambient = " + mLowBitAmbient + ", "+ "burn-in protection = "+ mBurnInProtection);  }}  }
class C{  private float calcAngle(float value){  return value / mData.getYValueSum() * 360f;}  }
class C{  public static void addExtensionFactory(Class clazz) throws MessageException {  try {    MessageExtensionFactory extensionFactory=(MessageExtensionFactory)clazz.newInstance();    if (DEBUG)     _log.debug("Adding extension factory for " + extensionFactory.getTypeUri());    _extensionFactories.put(extensionFactory.getTypeUri(),clazz);  } catch (  Exception e) {    throw new MessageException("Cannot instantiante message extension factory class: " + clazz.getName());  }}  }
class C{  public void truncate() throws GondolaException {  logger.info("[{}-{}] Deleting all records in the log",gondola.getHostId(),cmember.memberId);  LogEntry entry=storage.getLastLogEntry(cmember.memberId);  if (entry != null) {    deleteFrom(1,entry.index);  }  Rid rid=new Rid();  lastTerm=0;  savedIndex=0;  settle(rid);  assert rid.index == 0 && rid.term == 0 : "Slave mode did not successfully clear the log";}  }
class C{  double biCubicInterpolation(double xCoord,double yCoord){  try {    return interpolatingFunction.value(transform(yCoord,this.sg.getYmin(),this.sg.getResolution()),transform(xCoord,this.sg.getXmin(),this.sg.getResolution()));  } catch (  FunctionEvaluationException e) {    e.printStackTrace();  }  return Double.NaN;}  }
class C{  public OverpassQuery boundingBox(double southernLat,double westernLon,double northernLat,double easternLon){  builder.append(String.format(Locale.US,"[bbox:%s,%s,%s,%s]",southernLat,westernLon,northernLat,easternLon));  return this;}  }
class C{  public static Map<Unit,Collection<Unit>> transporting(final Collection<Unit> transports,final Collection<Unit> transportedUnits){  final Map<Unit,Collection<Unit>> returnVal=new HashMap<>();  for (  final Unit transported : transportedUnits) {    final Unit transport=transportedBy(transported);    Collection<Unit> transporting=null;    if (transport != null) {      transporting=transporting(transport,transportedUnits);    }    if (transporting != null) {      returnVal.put(transport,transporting);    }  }  return returnVal;}  }
class C{  protected ExportDeclarationImpl(){  super();}  }
class C{  public static IJavaSearchScope create(IJavaElement javaElement,boolean considerVisibility) throws JavaModelException {  return RefactoringScopeFactory.create(javaElement,considerVisibility,true);}  }
class C{  protected String paramString(){  String kitString=(kit != null ? kit.toString() : "");  String typeHandlersString=(typeHandlers != null ? typeHandlers.toString() : "");  return super.paramString() + ",kit=" + kitString+ ",typeHandlers="+ typeHandlersString;}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  private void deleteGroups(List<String> batchList,List<Group> groupsToDelete){  String deleteStatement="DELETE FROM " + GROUPS_TABLE + " WHERE GROUP_INTERNAL_ID=%d";  for (  Group group : groupsToDelete) {    batchList.add(String.format(deleteStatement,group.getUid()));  }}  }
class C{  void perform(ContentHandler handler,SectionState state){  state.attachPlaceholder(getModeUsage(),handler);}  }
class C{  public AllHttpScopesHashModel(ObjectWrapper wrapper,ServletContext context,HttpServletRequest request){  setObjectWrapper(wrapper);  this.context=context;  this.request=request;}  }
class C{  public Map<String,Object> sourceAsMap() throws IOException {  Map<String,Object> mapping=XContentHelper.convertToMap(source.compressedReference(),true).v2();  if (mapping.size() == 1 && mapping.containsKey(type())) {    mapping=(Map<String,Object>)mapping.get(type());  }  return mapping;}  }
class C{  protected BufferedImage fixColorModel(BufferedImage imgToPrint){  if (SystemUtilities.isMac()) {    if (MAC_BAD_IMAGE_TYPES.contains(imgToPrint.getType())) {      BufferedImage sanitizedImage;      ColorModel cm=imgToPrint.getColorModel();      if (cm instanceof IndexColorModel) {        log.info("Image converted to 256 colors for OSX 10.10 Workaround");        sanitizedImage=new BufferedImage(imgToPrint.getWidth(),imgToPrint.getHeight(),BufferedImage.TYPE_BYTE_INDEXED,(IndexColorModel)cm);      } else {        log.info("Image converted to ARGB for OSX 10.10 Workaround");        sanitizedImage=new BufferedImage(imgToPrint.getWidth(),imgToPrint.getHeight(),BufferedImage.TYPE_INT_ARGB);      }      sanitizedImage.createGraphics().drawImage(imgToPrint,0,0,null);      imgToPrint=sanitizedImage;    }  }  return imgToPrint;}  }
class C{  public LocalDate(int year,int monthOfYear,int dayOfMonth,Chronology chronology){  super();  chronology=DateTimeUtils.getChronology(chronology).withUTC();  long instant=chronology.getDateTimeMillis(year,monthOfYear,dayOfMonth,0);  iChronology=chronology;  iLocalMillis=instant;}  }
class C{  private ArrayUtils(){}  }
class C{  protected void initComponent(){}  }
class C{  private TimestampType createTimestamp(){  org.oasis_open.docs.wss._2004._01.oasis_200401_wss_wssecurity_utility_1_0.ObjectFactory wssuObjFactory=new org.oasis_open.docs.wss._2004._01.oasis_200401_wss_wssecurity_utility_1_0.ObjectFactory();  TimestampType timestamp=wssuObjFactory.createTimestampType();  final long now=System.currentTimeMillis();  Date createDate=new Date(now);  Date expirationDate=new Date(now + TimeUnit.SECONDS.toMillis(getRequestValidityInSeconds()));  DateFormat wssDateFormat=createDateFormatter();  AttributedDateTime createTime=wssuObjFactory.createAttributedDateTime();  createTime.setValue(wssDateFormat.format(createDate));  AttributedDateTime expirationTime=wssuObjFactory.createAttributedDateTime();  expirationTime.setValue(wssDateFormat.format(expirationDate));  timestamp.setCreated(createTime);  timestamp.setExpires(expirationTime);  if (log.isDebugEnabled()) {    log.debug("Timestamp created with following values -- Create date: " + createTime.getValue() + " Expire date: "+ expirationTime.getValue());  }  return timestamp;}  }
class C{  public static SynchronizerStatus makeErrorStatus(String message){  return new SynchronizerStatus(Status.ERROR,new Date(),message);}  }
class C{  public Worker(String name,ThreadGroup group){  super(group,name);  this.random=new Random();}  }
class C{  public static TimeSeriesPlotComponent open(final InputStream input,final String name,final String format){  TimeSeriesModel dataModel=(TimeSeriesModel)TimeSeriesModel.getXStream().fromXML(input);  return new TimeSeriesPlotComponent(name,dataModel);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.442 -0400",hash_original_method="DA70D8E8EFCF4CE896E4E17AB2D27792",hash_generated_method="808C5618E8DCBABF47C90F606652224D") @Override public synchronized void reset() throws IOException {  if (!markSupported) {    throw new UnsupportedOperationException("Mark not supported");  }  if (mark < 0) {    throw new IOException("No position has been marked");  }  if (position > mark + readlimit) {    throw new IOException("Marked position [" + mark + "] is no longer valid - passed the read limit ["+ readlimit+ "]");  }  position=mark;  eof=false;}  }
class C{  public ProteinXref addCrossReference(ProteinXref ProteinXref) throws IllegalArgumentException {  if (ProteinXref == null) {    throw new IllegalArgumentException("'ProteinXref' must not be null");  }  crossReferences.add(ProteinXref);  ProteinXref.setProtein(this);  return ProteinXref;}  }
class C{  public IdentityArrayList(Collection<? extends E> c){  elementData=c.toArray();  size=elementData.length;  if (elementData.getClass() != Object[].class)   elementData=Arrays.copyOf(elementData,size,Object[].class);}  }
class C{  public boolean isPsuedoVar(){  java.lang.String ns=m_qname.getNamespaceURI();  if ((null != ns) && ns.equals(RedundentExprEliminator.PSUEDOVARNAMESPACE)) {    if (m_qname.getLocalName().startsWith("#"))     return true;  }  return false;}  }
class C{  DTD parse(InputStream in,DTDBuilder dtd){  try {    this.dtd=dtd;    this.in=new DTDInputStream(in,dtd);    long tm=System.currentTimeMillis();    ch=this.in.read();    parseSection();    if (ch != -1) {      error("premature");    }    tm=System.currentTimeMillis() - tm;    System.err.println("[Parsed DTD " + dtd + " in "+ tm+ "ms]");  } catch (  IOException e) {    error("ioexception");  }catch (  Exception e) {    error("exception",e.getClass().getName(),e.getMessage());    e.printStackTrace();  }catch (  ThreadDeath e) {    error("terminated");  }  return (nerrors > 0) ? null : dtd;}  }
class C{  public double distance(IntVector v){  double deltaX=v.x - x, deltaY=v.y - y, deltaZ=v.z - z;  return Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ);}  }
class C{  public float textDescent(){  if (textFont == null) {    defaultFontOrDeath("textDescent");  }  return textFont.descent() * textSize;}  }
class C{  public boolean isOpen(){  return open;}  }
class C{  public CartPaymentInfo addPaymentAmount(String id,BigDecimal amount,boolean isSingleUse){  return this.addPaymentAmount(id,amount,null,null,isSingleUse,false,true);}  }
class C{  public String identifier(String identifier){  identifier=dbSettings.databaseToUpper ? StringUtils.toUpperEnglish(identifier) : identifier;  return identifier;}  }
class C{  public void updateModules(PlatformType[] types){  final List<PlatformType> platformTypes=Arrays.asList(types);  for (Iterator<AbstractModuleType<?>> iter=modules.keySet().iterator(); iter.hasNext(); ) {    final AbstractModuleType<?> next=iter.next();    if (!platformTypes.contains(next.getPlatformType())) {      iter.remove();    }  }  for (  PlatformType type : types) {    if (!modules.keySet().contains(type.getType())) {      modules.put(type.getType(),type.getType().generateModule(module));    }  }  ProjectView.getInstance(module.getProject()).refresh();}  }
class C{  public void checkboxToggleAllSetSelectedNoTrigger(boolean allSelected){  ItemListener[] itemListeners=_checkBoxToggleAll.getItemListeners();  for (  ItemListener l : itemListeners) {    _checkBoxToggleAll.removeItemListener(l);  }  _checkBoxToggleAll.setSelected(allSelected);  for (  ItemListener l : itemListeners) {    _checkBoxToggleAll.addItemListener(l);  }}  }
class C{  @Override public long fileSize(){  return _fileSize;}  }
class C{  private TaskList resumeMirrors(URI id,URI copyID){  ArgValidator.checkFieldUriType(id,Volume.class,"id");  Volume sourceVolume=queryVolumeResource(id);  ArgValidator.checkEntity(sourceVolume,id,true);  StringSet mirrors=sourceVolume.getMirrors();  if (mirrors == null || mirrors.isEmpty()) {    throw APIException.badRequests.invalidParameterVolumeHasNoContinuousCopies(sourceVolume.getId());  }  ArrayList<BlockMirror> mirrorList=null;  if (copyID != null) {    ArgValidator.checkFieldUriType(copyID,BlockMirror.class,"copyID");    BlockMirror mirror=queryMirror(copyID);    ArgValidator.checkEntity(mirror,copyID,true);    if (!mirror.getSource().getURI().equals(id)) {      throw APIException.badRequests.invalidParameterBlockCopyDoesNotBelongToVolume(copyID,id);    } else {      mirrorList=new ArrayList();      mirrorList.add(mirror);    }  }  String task=UUID.randomUUID().toString();  StorageSystem device=_dbClient.queryObject(StorageSystem.class,sourceVolume.getStorageController());  BlockServiceApi blockServiceApi=getBlockServiceImpl("mirror");  auditOp(OperationTypeEnum.RESUME_VOLUME_MIRROR,true,AuditLogManager.AUDITOP_BEGIN,mirrors);  return blockServiceApi.resumeNativeContinuousCopies(device,sourceVolume,mirrorList,task);}  }
class C{  protected State_Impl(){  super();}  }
class C{  synchronized private void updateLabel(String str,boolean opaque,Color fgColor,Color bgColor){  assert str != null;  assert fgColor != null;  assert bgColor != null;  statusLabel.setText(str);  statusLabel.setOpaque(opaque);  statusLabel.setForeground(fgColor);  statusLabel.setBackground(bgColor);  updateTimeStamp();  notifyAll();}  }
class C{  public static double pdf(double x,double dof){  if (x <= 0) {    return 0.0;  }  if (dof <= 0) {    return Double.NaN;  }  final double k=dof * .5;  if (Math.abs(k - 1.0) < Double.MIN_NORMAL) {    return Math.exp(-x * 2.0) * 2.0;  }  return Math.exp((k - 1.0) * Math.log(x * 2.0) - x * 2.0 - logGamma(k)) * 2.0;}  }
class C{  public final boolean isRequiredByGroups(String var1,String var2){  KnowledgeEdge edge=new KnowledgeEdge(var1,var2);  for (  KnowledgeGroup group : this.knowledgeGroups) {    if (group.getType() == KnowledgeGroup.REQUIRED && group.containsEdge(edge)) {      return true;    }  }  return false;}  }
class C{  @Override public void showLoadingBackProgress(){  if (null != mProgressView) {    mProgressView.setVisibility(View.VISIBLE);  }}  }
class C{  protected <T extends AbstractOptionValue<?,?>>AbstractOptions(Function<T,T> valueFilter,AbstractOptions baseOptions,Iterable<T> values){  requireNonNull(baseOptions,"baseOptions");  requireNonNull(valueFilter,"valueFilter");  requireNonNull(values,"values");  valueMap=new IdentityHashMap<>(baseOptions.valueMap);  putAll(valueFilter,StreamSupport.stream(values.spliterator(),false));}  }
class C{  protected void clearColumnVisibilityActions(){  if (columnVisibilityActions == null)   return;  for (  ColumnVisibilityAction action : columnVisibilityActions) {    action.releaseColumn();  }  columnVisibilityActions.clear();}  }
class C{  public void add(double value,double weight){  if (valueMap.containsKey(value)) {    valueMap.put(value,valueMap.get(value) + weight);  } else {    valueMap.put(value,weight);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:46.429 -0500",hash_original_method="3180F1E37BC19852F53F68E8E13D968F",hash_generated_method="142D116AA6B903156CA8D0D1CDF95D3B") public void updateGeoDescription(Context context,String fallbackNumber){  String number=TextUtils.isEmpty(phoneNumber) ? fallbackNumber : phoneNumber;  geoDescription=getGeoDescription(context,number);}  }
class C{  protected XMLSignatureInput enginePerformTransform(XMLSignatureInput input,OutputStream os,Transform transformObject) throws TransformationException {  try {    List<NodeList> unionNodes=new ArrayList<NodeList>();    List<NodeList> subtractNodes=new ArrayList<NodeList>();    List<NodeList> intersectNodes=new ArrayList<NodeList>();    Element[] xpathElements=XMLUtils.selectNodes(transformObject.getElement().getFirstChild(),XPath2FilterContainer.XPathFilter2NS,XPath2FilterContainer._TAG_XPATH2);    if (xpathElements.length == 0) {      Object exArgs[]={Transforms.TRANSFORM_XPATH2FILTER,"XPath"};      throw new TransformationException("xml.WrongContent",exArgs);    }    Document inputDoc=null;    if (input.getSubNode() != null) {      inputDoc=XMLUtils.getOwnerDocument(input.getSubNode());    } else {      inputDoc=XMLUtils.getOwnerDocument(input.getNodeSet());    }    for (int i=0; i < xpathElements.length; i++) {      Element xpathElement=xpathElements[i];      XPath2FilterContainer xpathContainer=XPath2FilterContainer.newInstance(xpathElement,input.getSourceURI());      String str=XMLUtils.getStrFromNode(xpathContainer.getXPathFilterTextNode());      XPathFactory xpathFactory=XPathFactory.newInstance();      XPathAPI xpathAPIInstance=xpathFactory.newXPathAPI();      NodeList subtreeRoots=xpathAPIInstance.selectNodeList(inputDoc,xpathContainer.getXPathFilterTextNode(),str,xpathContainer.getElement());      if (xpathContainer.isIntersect()) {        intersectNodes.add(subtreeRoots);      } else       if (xpathContainer.isSubtract()) {        subtractNodes.add(subtreeRoots);      } else       if (xpathContainer.isUnion()) {        unionNodes.add(subtreeRoots);      }    }    input.addNodeFilter(new XPath2NodeFilter(unionNodes,subtractNodes,intersectNodes));    input.setNodeSet(true);    return input;  } catch (  TransformerException ex) {    throw new TransformationException("empty",ex);  }catch (  DOMException ex) {    throw new TransformationException("empty",ex);  }catch (  CanonicalizationException ex) {    throw new TransformationException("empty",ex);  }catch (  InvalidCanonicalizerException ex) {    throw new TransformationException("empty",ex);  }catch (  XMLSecurityException ex) {    throw new TransformationException("empty",ex);  }catch (  SAXException ex) {    throw new TransformationException("empty",ex);  }catch (  IOException ex) {    throw new TransformationException("empty",ex);  }catch (  ParserConfigurationException ex) {    throw new TransformationException("empty",ex);  }}  }
class C{  private void determineAdditionalResultMeasures() throws Exception {  m_AdditionalMeasures=null;  ArrayList<String> measureNames=new ArrayList<String>();  if (m_ResultProducer instanceof AdditionalMeasureProducer) {    Enumeration<String> am=((AdditionalMeasureProducer)m_ResultProducer).enumerateMeasures();    while (am.hasMoreElements()) {      String mname=am.nextElement();      if (mname.startsWith("measure")) {        if (measureNames.indexOf(mname) == -1) {          measureNames.add(mname);        }      } else {        throw new Exception("Additional measures in " + m_ResultProducer.getClass().getName() + " must obey the naming convention"+ " of starting with \"measure\"");      }    }  }  if (m_UsePropertyIterator && (m_PropertyArray != null)) {    for (int i=0; i < Array.getLength(m_PropertyArray); i++) {      Object current=Array.get(m_PropertyArray,i);      if (current instanceof AdditionalMeasureProducer) {        Enumeration<String> am=((AdditionalMeasureProducer)current).enumerateMeasures();        while (am.hasMoreElements()) {          String mname=am.nextElement();          if (mname.startsWith("measure")) {            if (measureNames.indexOf(mname) == -1) {              measureNames.add(mname);            }          } else {            throw new Exception("Additional measures in " + current.getClass().getName() + " must obey the naming convention"+ " of starting with \"measure\"");          }        }      }    }  }  if (measureNames.size() > 0) {    m_AdditionalMeasures=new String[measureNames.size()];    for (int i=0; i < measureNames.size(); i++) {      m_AdditionalMeasures[i]=measureNames.get(i);    }  }}  }
class C{  public static double isLeftOfLine(double x0,double y0,double x1,double y1,double x2,double y2){  return (x2 - x1) * (y0 - y1) - (x0 - x1) * (y2 - y1);}  }
class C{  public BufferedDataOutputStream(){  super(null);  this.initFields();}  }
class C{  public void addArgument(char data){  arguments.add(new byte[]{(byte)data});}  }
class C{  protected VisorQueryJob(VisorQueryArg arg,boolean debug){  super(arg,debug);}  }
class C{  <T>InjectScope<T> scope(Class<? extends Annotation> scopeType){  Supplier<InjectScope<T>> scopeGen=(Supplier)_scopeMap.get(scopeType);  if (scopeGen == null) {    throw error("{0} is an unknown scope",scopeType.getSimpleName());  }  return scopeGen.get();}  }
class C{  @Override public boolean isEndElement(){  return eventType == XMLStreamConstants.END_ELEMENT;}  }
class C{  public CPanel(LayoutManager layout){  super(layout);  init();}  }
class C{  @Override protected void initData(){  this.enableJavascript();  this.enableCaching();  this.enableCustomClients();  this.enableAdjust();  this.zoomedOut();  this.webview.loadUrl(this.getUrl());  this.showBack();  this.setTitle(this.getUrlTitle());  if (this.getGankType() == null)   return;  if (GankTypeDict.urlType2TypeDict.get(this.getGankType()) == GankType.video) {    this.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE);  }}  }
class C{  private SSLConfig configureLegacyHttpServiceSSL(SSLConfig sslConfig){  sslConfig.setCiphers(getDistributionConfig().getHttpServiceSSLCiphers());  sslConfig.setEnabled(getDistributionConfig().getHttpServiceSSLEnabled());  sslConfig.setKeystore(getDistributionConfig().getHttpServiceSSLKeyStore());  sslConfig.setKeystorePassword(getDistributionConfig().getHttpServiceSSLKeyStorePassword());  sslConfig.setKeystoreType(getDistributionConfig().getHttpServiceSSLKeyStoreType());  sslConfig.setTruststore(getDistributionConfig().getHttpServiceSSLTrustStore());  sslConfig.setTruststorePassword(getDistributionConfig().getHttpServiceSSLTrustStorePassword());  sslConfig.setProtocols(getDistributionConfig().getHttpServiceSSLProtocols());  sslConfig.setRequireAuth(getDistributionConfig().getHttpServiceSSLRequireAuthentication());  return sslConfig;}  }
class C{  public boolean isGroupActive(int group){  assert 0 <= group && group < active.length;  boolean value=active[group];  for (  XYDatasetWithGroups dataset : datasets) {    assert dataset.isGroupActive(group) == value;  }  return value;}  }
class C{  public String encodeBuffer(byte aBuffer[]){  ByteArrayOutputStream outStream=new ByteArrayOutputStream();  ByteArrayInputStream inStream=new ByteArrayInputStream(aBuffer);  try {    encodeBuffer(inStream,outStream);  } catch (  Exception IOException) {    throw new Error("CharacterEncoder.encodeBuffer internal error");  }  return (outStream.toString());}  }
class C{  @Override public void unregisterListener(INotificationListener listener,int userid){synchronized (mNotificationList) {    final int N=mListeners.size();    for (int i=N - 1; i >= 0; i--) {      final NotificationListenerInfo info=mListeners.get(i);      if (info.listener.asBinder() == listener.asBinder() && info.userid == userid) {        mListeners.remove(i);        if (info.connection != null) {          mContext.unbindService(info.connection);        }      }    }  }}  }
class C{  protected static void removeIndexAccess(IndexAccess access,String indexPath) throws SQLException {synchronized (INDEX_ACCESS) {    try {      INDEX_ACCESS.remove(indexPath);      access.searcher.close();      access.reader.close();      access.writer.close();    } catch (    Exception e) {      throw convertException(e);    }  }}  }
class C{  public Document parseText(String text) throws SAXException, IOException, ParserConfigurationException {  return parse(new StringReader(text));}  }
class C{  public static void waitReady(JMXConnectorServerMBean server,int maxTimeInSeconds) throws Exception {  int elapsed=0;  while (!server.isActive() && elapsed < maxTimeInSeconds) {    Thread.sleep(1000);    elapsed++;  }  if (server.isActive()) {    String message="Utils::waitReady: JMX connector server came up";    if (elapsed == 0) {      message+=" immediately";    } else {      message+=" after " + elapsed + " seconds";    }    message+=" [" + server.getAddress() + "]";    Utils.debug(DEBUG_STANDARD,message);  } else {    String message="Utils::waitReady: (ERROR) JMX connector" + " server didn't come up after " + elapsed + " seconds ["+ server.getAddress()+ "]";    System.out.println(message);    throw new RuntimeException(message);  }}  }
class C{  @Override public void notifyHeartbeatStart(){  _isHeartbeatActive=true;  clearRecycle();  wake();}  }
class C{  protected void applyStretchTransform(boolean stretchGlyphs){  if ((xScale == 1) && (yScale == 1))   return;  AffineTransform scaleAT=AffineTransform.getScaleInstance(xScale,yScale);  int numGlyphs=gv.getNumGlyphs();  float[] gp=gv.getGlyphPositions(0,numGlyphs + 1,null);  float initX=gp[0];  float initY=gp[1];  Point2D.Float pos=new Point2D.Float();  for (int i=0; i <= numGlyphs; i++) {    float dx=gp[2 * i] - initX;    float dy=gp[2 * i + 1] - initY;    pos.x=initX + dx * xScale;    pos.y=initY + dy * yScale;    gv.setGlyphPosition(i,pos);    if ((stretchGlyphs) && (i != numGlyphs)) {      AffineTransform glyphTransform=gv.getGlyphTransform(i);      if (glyphTransform != null) {        glyphTransform.preConcatenate(scaleAT);        gv.setGlyphTransform(i,glyphTransform);      } else {        gv.setGlyphTransform(i,scaleAT);      }    }  }  advance=new Point2D.Float((float)(advance.getX() * xScale),(float)(advance.getY() * yScale));  layoutApplied=false;}  }
class C{  public JCheckBoxMenuItem(String text,Icon icon,boolean b){  super(text,icon);  setModel(new JToggleButton.ToggleButtonModel());  setSelected(b);  setFocusable(false);}  }
class C{  public void removeRepositoryConnectionListener(RepositoryConnectionListener listener){  listeners.remove(listener);  activated=!listeners.isEmpty();}  }
class C{  public void addItemToShoppingCart(ShoppingCartItem item){  if (item == null) {    throw new InvalidParameterException("Error adding ShoppingCartItem, it may not be null");  }  shoppingCartItems.add(item);}  }
class C{  private void cancelCherryPick(@NotNull GitRepository repository){  if (isAutoCommit()) {    removeCherryPickHead(repository);  }}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == SyntaxRelatedTElement.class) {switch (derivedFeatureID) {case TypesPackage.MODULE_NAMESPACE_VIRTUAL_TYPE__AST_ELEMENT:      return TypesPackage.SYNTAX_RELATED_TELEMENT__AST_ELEMENT;default :    return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public static List<String> sanitizeTopicName(String topicName){  if (StringUtils.isEmpty(topicName))   throw new IllegalArgumentException("Empty topic name");  if (topicName.contains("+"))   throw new IllegalArgumentException("Topic name contains wildcard");  if (topicName.contains("#"))   throw new IllegalArgumentException("Topic name contains wildcard");  List<String> levels=new ArrayList<>();  if (topicName.startsWith("/"))   topicName=EMPTY + topicName;  if (topicName.endsWith("/"))   topicName=topicName + EMPTY;  String[] tokens=StringUtils.splitByWholeSeparatorPreserveAllTokens(topicName,"/");  for (  String token : tokens) {    levels.add(StringUtils.isNotEmpty(token) ? token : EMPTY);  }  if (!topicName.endsWith(END))   levels.add(END);  return levels;}  }
class C{  public static void sort(short[] array){  DualPivotQuicksort.sort(array);}  }
class C{  public NinePatchBgPanel(){  this.setOpaque(false);}  }
class C{  private void onAttack(final IEntity target){  attacking=target.getID();}  }
class C{  public void testIntegration4(){  boolean res;  int originalAppIdValue=mAppIdValue;  int originalContentTypeValue=mContentTypeValue;  String originalAppIdName=mAppIdName;  String originalContentTypeName=mContentTypeName;  String originalClassName=mClassName;  byte[] originalMessageBody=mMessageBody;  Random rd=new Random();  IWapPushManager iwapman=getInterface();  IDataVerify dataverify=getVerifyInterface();  mClassName="com.android.smspush.unitTests.ReceiverService";  for (int i=0; i < OMA_APPLICATION_ID_NAMES.length + OMA_CONTENT_TYPE_NAMES.length; i++) {    mAppIdName=OMA_APPLICATION_ID_NAMES[rd.nextInt(OMA_APPLICATION_ID_NAMES.length)];    int contIndex=rd.nextInt(OMA_CONTENT_TYPE_NAMES.length);    mContentTypeName=OMA_CONTENT_TYPE_NAMES[contIndex];    mMessageBody=new byte[100 + rd.nextInt(100)];    rd.nextBytes(mMessageBody);    byte[] pdu=createPDU(8);    byte[] wappushPdu=retrieveWspBody();    try {      dataverify.resetData();      iwapman.addPackage(mAppIdName,mContentTypeName,mPackageName,mClassName,WapPushManagerParams.APP_TYPE_SERVICE,false,false);      dispatchWapPdu(wappushPdu,iwapman);      iwapman.deletePackage(mAppIdName,mContentTypeName,mPackageName,mClassName);      if (mContentTypeName.equals(WspTypeDecoder.CONTENT_TYPE_B_PUSH_CO)) {        assertTrue(dataverify.verifyData(wappushPdu));      } else {        assertTrue(dataverify.verifyData(mMessageBody));      }    } catch (    RemoteException e) {    }  }  mClassName=originalClassName;  mAppIdName=originalAppIdName;  mContentTypeName=originalContentTypeName;  mAppIdValue=originalAppIdValue;  mContentTypeValue=originalContentTypeValue;  mMessageBody=originalMessageBody;}  }
class C{  public T caseLabelledStatement(LabelledStatement object){  return null;}  }
class C{  public static _QueuePriority fromString(final String value) throws SOAPSerializationException {  return (_QueuePriority)Enumeration.fromString(value,_QueuePriority.VALUES_TO_INSTANCES);}  }
class C{  public static PolarPoint fromDegrees(double latitude,double longitude,double radius){  return new PolarPoint(Angle.fromDegrees(latitude),Angle.fromDegrees(longitude),radius);}  }
class C{  private static boolean hasSameDiskInfo(String name,String size){  Map<String,String> localDiskCap=ServerProbe.getInstance().getDiskCapacity();  if (name != null && size != null && size.equals(localDiskCap.get(name))) {    return true;  }  log.warn("Local disk(s) {} are not the same as selected cluster {}",localDiskCap,name + "=" + size);  return false;}  }
class C{  protected void drawRangeMarkers(Graphics2D g2,Rectangle2D dataArea,int index,Layer layer){  XYItemRenderer r=getRenderer(index);  if (r == null) {    return;  }  if (index >= getDatasetCount()) {    return;  }  Collection markers=getRangeMarkers(index,layer);  ValueAxis axis=getRangeAxisForDataset(index);  if (markers != null && axis != null) {    Iterator iterator=markers.iterator();    while (iterator.hasNext()) {      Marker marker=(Marker)iterator.next();      r.drawRangeMarker(g2,this,axis,marker,dataArea);    }  }}  }
class C{  private void positionChildren(int menuWidth,int menuHeight){  if (mHorizontalDivider != null)   mHorizontalDividerRects.clear();  if (mVerticalDivider != null)   mVerticalDividerRects.clear();  final int numRows=mLayoutNumRows;  final int numRowsMinus1=numRows - 1;  final int numItemsForRow[]=mLayout;  int itemPos=0;  View child;  IconMenuView.LayoutParams childLayoutParams=null;  float itemLeft;  float itemTop=0;  float itemWidth;  final float itemHeight=(menuHeight - mHorizontalDividerHeight * (numRows - 1)) / (float)numRows;  for (int row=0; row < numRows; row++) {    itemLeft=0;    itemWidth=(menuWidth - mVerticalDividerWidth * (numItemsForRow[row] - 1)) / (float)numItemsForRow[row];    for (int itemPosOnRow=0; itemPosOnRow < numItemsForRow[row]; itemPosOnRow++) {      child=getChildAt(itemPos);      child.measure(MeasureSpec.makeMeasureSpec((int)itemWidth,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec((int)itemHeight,MeasureSpec.EXACTLY));      childLayoutParams=(IconMenuView.LayoutParams)child.getLayoutParams();      childLayoutParams.left=(int)itemLeft;      childLayoutParams.right=(int)(itemLeft + itemWidth);      childLayoutParams.top=(int)itemTop;      childLayoutParams.bottom=(int)(itemTop + itemHeight);      itemLeft+=itemWidth;      itemPos++;      if (mVerticalDivider != null) {        mVerticalDividerRects.add(new Rect((int)itemLeft,(int)itemTop,(int)(itemLeft + mVerticalDividerWidth),(int)(itemTop + itemHeight)));      }      itemLeft+=mVerticalDividerWidth;    }    if (childLayoutParams != null) {      childLayoutParams.right=menuWidth;    }    itemTop+=itemHeight;    if ((mHorizontalDivider != null) && (row < numRowsMinus1)) {      mHorizontalDividerRects.add(new Rect(0,(int)itemTop,menuWidth,(int)(itemTop + mHorizontalDividerHeight)));      itemTop+=mHorizontalDividerHeight;    }  }}  }
class C{  public static byte[] toByteArray(URL url) throws IOException {  return asByteSource(url).read();}  }
class C{  public ModelComparator(String databaseName,DatabaseInfo platformInfo,boolean caseSensitive){  this.databaseName=databaseName;  this.platformInfo=platformInfo;  this.caseSensitive=caseSensitive;}  }
class C{  public static String array2hex(final byte[] array){  return byteArray2String(array,"0x",", ",true,16);}  }
class C{  public final void yyreset(java.io.Reader reader){  zzReader=reader;  zzAtBOL=true;  zzAtEOF=false;  zzEndRead=zzStartRead=0;  zzCurrentPos=zzMarkedPos=0;  yyline=yychar=yycolumn=0;  zzLexicalState=YYINITIAL;}  }
class C{  protected void debugCode(String text){  if (trace.isDebugEnabled()) {    trace.debugCode(getTraceObjectName() + "." + text);  }}  }
class C{  @SuppressWarnings("unchecked") public Iterator<InputEvent> iterator(){  return events.iterator();}  }
class C{  public static String encodeBody(final String str){  return encode(str,"+");}  }
class C{  @DSComment("callback needs to be called") @DSSpec(DSCat.TO_MODEL) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:29.192 -0500",hash_original_method="5346126CCA7833D0BFEF2BABD1293D7B",hash_generated_method="834C458F3EDB574F1E7D5FF6A1B3C05A") public void scheduleAtFixedRate(TimerTask task,long delay,long period){  if (delay < 0 || period <= 0) {    throw new IllegalArgumentException();  }  scheduleImpl(task,delay,period,true);}  }
class C{  final Node<K,V> findLast(){  Index<K,V> q=head;  for (; ; ) {    Index<K,V> d, r;    if ((r=q.right) != null) {      if (r.indexesDeletedNode()) {        q.unlink(r);        q=head;      } else       q=r;    } else     if ((d=q.down) != null) {      q=d;    } else {      for (Node<K,V> b=q.node, n=b.next; ; ) {        if (n == null)         return b.isBaseHeader() ? null : b;        Node<K,V> f=n.next;        if (n != b.next)         break;        Object v=n.value;        if (v == null) {          n.helpDelete(b,f);          break;        }        if (b.value == null || v == n)         break;        b=n;        n=f;      }      q=head;    }  }}  }
class C{  private static ASN1Primitive convertValueToObject(Extension ext) throws IllegalArgumentException {  try {    return ASN1Primitive.fromByteArray(ext.getExtnValue().getOctets());  } catch (  IOException e) {    throw new IllegalArgumentException("can't convert extension: " + e);  }}  }
class C{  public void markRemoteFilesCached(Map<String,Long> remoteFiles){  if (!isDBAvailable())   return;  SQLiteDatabase db=getOpenHelper().getWritableDatabase();  write.lock();  try {    db.beginTransaction();    for (    String url : remoteFiles.keySet()) {      ContentValues cv=new ContentValues(2);      Long size=remoteFiles.get(url);      if (size <= 0) {        cv.put("cached",false);        cv.put("length",-size);      } else {        cv.put("cached",true);        cv.put("length",size);      }      db.update(TABLE_REMOTEFILES,cv,"url=?",new String[]{url});    }    db.setTransactionSuccessful();  }  finally {    try {      db.endTransaction();    }  finally {      write.unlock();    }  }}  }
class C{  public synchronized int reassign(final int index){  if (index < 0 || index >= this.fpSets.size()) {    throw new IllegalArgumentException("index not within bounds");  }  if (managerIsBroken) {    return -1;  }  final FPSets broken=this.fpSets.get(index);  broken.setUnavailable();  int next=(index + 1) % this.fpSets.size();  while (next != index) {    final FPSets replacement=this.fpSets.get(next);    if (replacement.isAvailable()) {      for (int j=index; j < next; j++) {        this.fpSets.set(j,replacement);      }      return next;    }    next=(next + 1) % this.fpSets.size();  }  managerIsBroken=true;  return -1;}  }
class C{  public int hashCode(){  return name.hashCode();}  }
class C{  static public void clear(){  instance_.langlist.clear();  instance_.wordLangProbMap.clear();}  }
class C{  private void balanceSegment(String elementType){  if (m_lines.size() == 0)   return;  log.fine("(" + elementType + ") - "+ toString());  if (elementType.equals(MAcctSchemaElement.ELEMENTTYPE_Organization)) {    HashMap<Integer,Balance> map=new HashMap<Integer,Balance>();    for (int i=0; i < m_lines.size(); i++) {      FactLine line=(FactLine)m_lines.get(i);      Integer key=new Integer(line.getAD_Org_ID());      Balance oldBalance=(Balance)map.get(key);      if (oldBalance == null) {        oldBalance=new Balance(line.getAmtSourceDr(),line.getAmtSourceCr());        map.put(key,oldBalance);      } else       oldBalance.add(line.getAmtSourceDr(),line.getAmtSourceCr());    }    Iterator<Integer> keys=map.keySet().iterator();    while (keys.hasNext()) {      Integer key=keys.next();      Balance difference=map.get(key);      log.info(elementType + "=" + key+ ", "+ difference);      if (!difference.isZeroBalance()) {        FactLine line=new FactLine(m_doc.getCtx(),m_doc.get_Table_ID(),m_doc.get_ID(),0,m_trxName);        line.setDocumentInfo(m_doc,null);        line.setPostingType(m_postingType);        if (difference.getBalance().signum() < 0) {          if (difference.isReversal()) {            line.setAccount(m_acctSchema,m_acctSchema.getDueTo_Acct(elementType));            line.setAmtSource(m_doc.getC_Currency_ID(),Env.ZERO,difference.getPostBalance());          } else {            line.setAccount(m_acctSchema,m_acctSchema.getDueFrom_Acct(elementType));            line.setAmtSource(m_doc.getC_Currency_ID(),difference.getPostBalance(),Env.ZERO);          }        } else {          if (difference.isReversal()) {            line.setAccount(m_acctSchema,m_acctSchema.getDueFrom_Acct(elementType));            line.setAmtSource(m_doc.getC_Currency_ID(),difference.getPostBalance(),Env.ZERO);          } else {            line.setAccount(m_acctSchema,m_acctSchema.getDueTo_Acct(elementType));            line.setAmtSource(m_doc.getC_Currency_ID(),Env.ZERO,difference.getPostBalance());          }        }        line.convert();        line.setAD_Org_ID(key.intValue());        m_lines.add(line);        log.fine("(" + elementType + ") - "+ line);      }    }    map.clear();  }}  }
class C{  protected void addImageTileToList(ImageTile tile){  ((DefaultListModel)getListModel()).addElement(tile);}  }
class C{  public void stop(){  try {    myServerSocket.close();    myThread.join();  } catch (  IOException ioe) {  }catch (  InterruptedException e) {  }}  }
class C{  public void addExpressionSignature(ExpressionSignature signature){  expression.grabFocus();  int start=positionsListener.start;  int end=positionsListener.end;  int caret=positionsListener.caretPosition;  if (start < end) {    selections.add(new Selection(start,end));  }  String sig=signature.getSignature();  String text=this.expression.getText();  Selection selection=this.selections.isEmpty() ? null : this.selections.remove(0);  if (selection == null || !caretInSelection(selection)) {    String newText=text.substring(0,caret) + signature.getSignature() + text.substring(caret,text.length());    this.expression.setText(newText);    addSelections(signature,newText,false);    this.highlightNextSelection();    return;  }  String replacedText=text.substring(0,selection.x) + sig + text.substring(selection.y);  this.expression.setText(replacedText);  this.adjustSelections(selection,sig);  addSelections(signature,replacedText,true);  this.highlightNextSelection();  positionsListener.start=0;  positionsListener.end=0;  positionsListener.caretPosition=0;}  }
class C{  public byte[] asn1Encode() throws Asn1Exception, IOException {  DerOutputStream temp, bytes, out;  temp=new DerOutputStream();  temp.putInteger(BigInteger.valueOf(pvno));  out=new DerOutputStream();  out.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x00),temp);  temp=new DerOutputStream();  temp.putInteger(BigInteger.valueOf(msgType));  out.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x01),temp);  temp=new DerOutputStream();  for (int i=0; i < tickets.length; i++) {    temp.write(tickets[i].asn1Encode());  }  bytes=new DerOutputStream();  bytes.write(DerValue.tag_SequenceOf,temp);  out.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x02),bytes);  out.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x03),encPart.asn1Encode());  bytes=new DerOutputStream();  bytes.write(DerValue.tag_Sequence,out);  out=new DerOutputStream();  out.write(DerValue.createTag(DerValue.TAG_APPLICATION,true,(byte)0x16),bytes);  return out.toByteArray();}  }
class C{  public String permutedvectorfile(){  return permutedvectorfile;}  }
class C{  protected void createDefaultAxisRenderers(){}  }
class C{  private void init(Context context,AttributeSet attrs){  if (attrs != null) {    TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.CollapsibleTextLayout,0,0);    msText=a.getString(R.styleable.CollapsibleTextLayout_textToShow);    msDisplayText=new SpannableStringBuilder(msText);    mExpandedTextColor=a.getColor(R.styleable.CollapsibleTextLayout_expandedTextColor,ContextCompat.getColor(context,android.R.color.white));    mCollapsedTextColor=a.getColor(R.styleable.CollapsibleTextLayout_collapsedTextColor,ContextCompat.getColor(context,android.R.color.white));    String typeFace=a.getString(R.styleable.CollapsibleTextLayout_typefaceFamilyPrimary);    mPrimaryTypeface=Typeface.create(((typeFace == null) ? "sans-serif-medium" : typeFace),Typeface.NORMAL);    typeFace=a.getString(R.styleable.CollapsibleTextLayout_typefaceFamilySecondary);    mSecondaryTypeface=Typeface.create(((typeFace == null) ? "sans-serif-medium" : typeFace),Typeface.NORMAL);    mfCollapsedTextSize=a.getDimension(R.styleable.CollapsibleTextLayout_collapsedTextSize,d2x(COLLAPSED_TEXT_SIZE));    mfMaxExpandedTextSize=a.getDimension(R.styleable.CollapsibleTextLayout_maxExpandedTextSize,d2x(EXPANDED_TEXT_SIZE));    mfExpandedTextSize=a.getDimension(R.styleable.CollapsibleTextLayout_expandedTextSize,d2x(EXPANDED_TEXT_SIZE));    mbIsMultifacetedString=a.getBoolean(R.styleable.CollapsibleTextLayout_isMultiFaceted,false);    mnSplitStringAtPosition=a.getInteger(R.styleable.CollapsibleTextLayout_typefaceSplitPosition,0);    mTextPaint=new TextPaint(Paint.ANTI_ALIAS_FLAG);    mTextPaint.setColor(mExpandedTextColor);    mTextPaint.setTypeface(mPrimaryTypeface);    mTextPaint.setTextSize(mfCollapsedTextSize);    mbDrawSpannable=false;    a.recycle();  }}  }
class C{  @Override public boolean equals(Object o){  if (this == o) {    return true;  }  if (o == null || getClass() != o.getClass()) {    return false;  }  if (!super.equals(o)) {    return false;  }  final RdKNNDirectoryEntry that=(RdKNNDirectoryEntry)o;  return knnDistance == that.knnDistance;}  }
class C{  public synchronized void removeObject(NSObject obj){  set.remove(obj);}  }
class C{  @DSComment("Package priviledge") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:12.358 -0500",hash_original_method="538B7B8EC3794D6F6E22215297E953DA",hash_generated_method="538B7B8EC3794D6F6E22215297E953DA") String toString(Class<?>[] types){  StringBuilder result=new StringBuilder();  if (types.length != 0) {    result.append(types[0].getName());    for (int i=1; i < types.length; i++) {      result.append(',');      result.append(types[i].getName());    }  }  return result.toString();}  }
class C{  public LocalTime roundHalfFloorCopy(){  return iInstant.withLocalMillis(iField.roundHalfFloor(iInstant.getLocalMillis()));}  }
class C{  void writeData(int streamId,Buffer buffer,int flags) throws IOException {  WriteStream os=_os;  if (os == null) {    return;  }  if (false) {  } else {    int length=buffer.length();    os.write((byte)(length >> 16));    os.write((byte)(length >> 8));    os.write((byte)(length));    os.write(Http2Constants.FRAME_DATA);    os.write(flags);    BitsUtil.writeInt(os,streamId);    buffer.read(os);  }  if ((flags & Http2Constants.END_STREAM) != 0) {    closeWrite(streamId);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentimportnode20.class,args);}  }
class C{  public static ICommand unwrapCommand(ICommand command){  for (int i=0; i < MAX_RECURSION_DEPTH && command instanceof CommandWrapper; i++) {    final ICommand wrappedCommand=((CommandWrapper)command).getWrappedCommand();    if (wrappedCommand == null) {      log.error(MessageFormat.format("Command {0} wraps null command",command.getClass().getCanonicalName()));      break;    }    command=wrappedCommand;  }  return command;}  }
class C{  private Object indexOfHelper(Context cx,Scriptable thisObj,Object[] args,boolean isLast){  Object compareTo=args.length > 0 ? args[0] : Undefined.instance;  long length=getLengthProperty(cx,thisObj);  long start;  if (isLast) {    if (args.length < 2) {      start=length - 1;    } else {      start=ScriptRuntime.toInt32(ScriptRuntime.toNumber(args[1]));      if (start >= length)       start=length - 1; else       if (start < 0)       start+=length;    }  } else {    if (args.length < 2) {      start=0;    } else {      start=ScriptRuntime.toInt32(ScriptRuntime.toNumber(args[1]));      if (start < 0) {        start+=length;        if (start < 0)         start=0;      }    }  }  if (thisObj instanceof NativeArray) {    NativeArray na=(NativeArray)thisObj;    if (na.denseOnly) {      if (isLast) {        for (int i=(int)start; i >= 0; i--) {          if (na.dense[i] != Scriptable.NOT_FOUND && ScriptRuntime.shallowEq(na.dense[i],compareTo)) {            return Long.valueOf(i);          }        }      } else {        for (int i=(int)start; i < length; i++) {          if (na.dense[i] != Scriptable.NOT_FOUND && ScriptRuntime.shallowEq(na.dense[i],compareTo)) {            return Long.valueOf(i);          }        }      }      return NEGATIVE_ONE;    }  }  if (isLast) {    for (long i=start; i >= 0; i--) {      if (ScriptRuntime.shallowEq(getElem(cx,thisObj,i),compareTo)) {        return Long.valueOf(i);      }    }  } else {    for (long i=start; i < length; i++) {      if (ScriptRuntime.shallowEq(getElem(cx,thisObj,i),compareTo)) {        return Long.valueOf(i);      }    }  }  return NEGATIVE_ONE;}  }
class C{  public void add_transition(symbol on_sym,lalr_state to_st) throws internal_error {  lalr_transition trans;  trans=new lalr_transition(on_sym,to_st,_transitions);  _transitions=trans;}  }
class C{  public GroovyBugError(Exception exception){  this(null,exception);}  }
class C{  public void addMessageEventRequestListener(MessageEventRequestListener messageEventRequestListener){synchronized (messageEventRequestListeners) {    if (!messageEventRequestListeners.contains(messageEventRequestListener)) {      messageEventRequestListeners.add(messageEventRequestListener);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:10.015 -0500",hash_original_method="A3A1BFF318009D261F31253190C9BB1C",hash_generated_method="471E923A5B67253BC389AD639B81DCDC") public static void perspectiveM(float[] m,int offset,float fovy,float aspect,float zNear,float zFar){  float f=1.0f / (float)Math.tan(fovy * (Math.PI / 360.0));  float rangeReciprocal=1.0f / (zNear - zFar);  m[offset + 0]=f / aspect;  m[offset + 1]=0.0f;  m[offset + 2]=0.0f;  m[offset + 3]=0.0f;  m[offset + 4]=0.0f;  m[offset + 5]=f;  m[offset + 6]=0.0f;  m[offset + 7]=0.0f;  m[offset + 8]=0.0f;  m[offset + 9]=0.0f;  m[offset + 10]=(zFar + zNear) * rangeReciprocal;  m[offset + 11]=-1.0f;  m[offset + 12]=0.0f;  m[offset + 13]=0.0f;  m[offset + 14]=2.0f * zFar * zNear* rangeReciprocal;  m[offset + 15]=0.0f;}  }
class C{  public AllConnectionsInUseException(String message){  super(message);}  }
class C{  public FadingButtonTF(String label){  super(label);  setOpaque(false);  animator=new Animator(animationDuration / 2,Animator.INFINITE,RepeatBehavior.REVERSE,this);  animator.setStartFraction(1.0f);  animator.setStartDirection(Direction.BACKWARD);  addActionListener(this);}  }
class C{  public static void main(String[] args){  JFrame frame=new TicTacToeApp().constructApplicationFrame();  frame.setSize(400,400);  frame.setVisible(true);}  }
class C{  protected void registerImageAttributes(){  addAttributeProcessor(new ImageAlignmentLmlAttribute(),"imageAlign");  addAttributeProcessor(new ScalingLmlAttribute(),"scaling","imageScaling");}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  protected static void isId(String member,String value,boolean flag,int length) throws ValidationException {  maxLength(member,value,length,flag);  if (!ADMValidator.containsOnlyValidIdChars(value)) {    ValidationException vf=new ValidationException(ReasonEnum.ID_CHAR,member,new Object[]{value});    logValidationFailure(vf);    throw vf;  }  if (value != null) {    String trimmedStr=value.trim();    if (!trimmedStr.equals(value)) {      ValidationException vf=new ValidationException(ReasonEnum.ID_CHAR,member,new Object[]{value});      logValidationFailure(vf);      throw vf;    }  }}  }
class C{  public static X509Certificate readCertificate(String filename) throws CertificateException, IOException {  CertificateFactory fact=CertificateFactory.getInstance("X.509");  try (FileInputStream is=new FileInputStream(filename)){    X509Certificate cer=(X509Certificate)fact.generateCertificate(is);    return cer;  } }  }
class C{  public ExistsRequest source(byte[] querySource){  return source(querySource,0,querySource.length);}  }
class C{  private void signalNotEmpty(){  final ReentrantLock takeLock=this.takeLock;  takeLock.lock();  try {    notEmpty.signal();  }  finally {    takeLock.unlock();  }}  }
class C{  private double errorsForTree() throws Exception {  if (m_isLeaf) {    return errorsForLeaf();  } else {    double error=0;    for (int i=0; i < m_sons.length; i++) {      if (Utils.eq(son(i).localModel().distribution().total(),0)) {        error+=m_test.perBag(i) - m_test.perClassPerBag(i,localModel().distribution().maxClass());      } else {        error+=((PruneableDecList)son(i)).errorsForTree();      }    }    return error;  }}  }
class C{  public static final double[] rotate90Equals(final double[] v1){  assert (v1.length == 2) : "rotate90Equals is only valid for 2d vectors.";  double temp=v1[0];  v1[0]=v1[1];  v1[1]=-temp;  return v1;}  }
class C{  @Override public void addAttribute(String name,String value){  if (name.equals("name")) {    this.name=value;  } else {    super.addAttribute(name,value);  }}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAutoTransitionBlock_();}  }
class C{  public String numIterationsTipText(){  return "The number of iterations to be performed.";}  }
class C{  @Deprecated public void expungeNote(String guid,OnClientCallback<Integer> callback){  AsyncReflector.execute(mClient,callback,"expungeNote",mAuthenticationToken,guid);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  @NoInline public static void sysFail(String message){  handlePossibleRecursiveCallToSysFail(message);  if (!RVMThread.getCurrentThread().isCollectorThread()) {    RVMThread.traceback(message);  } else {    VM.sysWriteln("Died in GC:");    RVMThread.traceback(message);    VM.sysWriteln("Virtual machine state:");    RVMThread.dumpVirtualMachine();  }  bugReportMessage();  if (VM.runningVM) {    VM.shutdown(EXIT_STATUS_SYSFAIL);  } else {    VM.sysExit(EXIT_STATUS_SYSFAIL);  }  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  public CanvasComponentBuilder construct(Consumer<CanvasComponent> consumer){  constructors.add(consumer);  return this;}  }
class C{  public final boolean isUsed(){  return (this.modifiers & ExtraCompilerModifiers.AccLocallyUsed) != 0;}  }
class C{  public void substituteIn(WordAlignmentState child){  int substitutionIndex=0;  int sourcePosition=MAX_VALUE;  for (final ListIterator<AlignedSourceTokens> trgPointsIterator=trgPoints.listIterator(); trgPointsIterator.hasNext(); ) {    final AlignedSourceTokens trgPoint=trgPointsIterator.next();    trgPoint.shiftBy(child.srcStart,child.srcLength - 1);    if (trgPoint.isNonTerminal() && trgPoint.get(0) < sourcePosition) {      sourcePosition=trgPoint.get(0);      substitutionIndex=trgPointsIterator.previousIndex();    }  }  final ListIterator<AlignedSourceTokens> insertionIterator=trgPoints.listIterator(substitutionIndex);  insertionIterator.next();  insertionIterator.remove();  for (  AlignedSourceTokens childElement : child.trgPoints) {    childElement.setFinal();    insertionIterator.add(childElement);  }  this.srcLength+=child.srcLength - 1;  this.numNT--;}  }
class C{  @Override public String toString(){  StringBuilder buff=new StringBuilder("media stream:").append(getName());  buff.append(" (component count=").append(getComponentCount()).append(")");  for (  Component cmp : getComponents())   buff.append("\n").append(cmp);  return buff.toString();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case EipPackage.RESEQUENCER__STREAM_SEQUENCES:    setStreamSequences(STREAM_SEQUENCES_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public String name(){  return name;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:03.671 -0500",hash_original_method="247BE4E7D133B432CB20B5679BCB76D6",hash_generated_method="CE13AD9BB58BCCE8B1D2A97E213F8E5F") public TFTP(){  setDefaultTimeout(DEFAULT_TIMEOUT);  __receiveBuffer=null;  __receiveDatagram=null;}  }
class C{  public void recordRenameOrTransferHistoryIfLastChangePassed24HoursFrom(@Nonnull Project project){  if (isRenamedOrTransferredIn24Hours(project)) {    this.previousNameChangedTime=DateTime.now().getMillis();    this.previousName=project.name;    this.previousOwnerLoginId=project.owner;  }}  }
class C{  public void afterQuadrantMove(Quadrant newQuadrant){  RaptorAction[] scripts=ActionScriptService.getInstance().getActions(RaptorActionContainer.BugButtons);  if (!isHorizontalLayout(newQuadrant)) {    composite.setLayout(SWTUtils.createMarginlessGridLayout(2,false));  } else {    composite.setLayout(SWTUtils.createMarginlessGridLayout(scripts.length / 2,false));  }  removeButtons();  addButtons(scripts);  updateFromPrefs();  composite.layout(true,true);}  }
class C{  public final void makeMove(Move move,UndoInfo ui){  ui.capturedPiece=squares[move.to];  ui.castleMask=castleMask;  ui.epSquare=epSquare;  ui.halfMoveClock=halfMoveClock;  boolean wtm=whiteMove;  final int p=squares[move.from];  int capP=squares[move.to];  long fromMask=1L << move.from;  int prevEpSquare=epSquare;  setEpSquare(-1);  if ((capP != Piece.EMPTY) || (((pieceTypeBB[Piece.WPAWN] | pieceTypeBB[Piece.BPAWN]) & fromMask) != 0)) {    halfMoveClock=0;    if (p == Piece.WPAWN) {      if (move.to - move.from == 2 * 8) {        int x=Position.getX(move.to);        if (((x > 0) && (squares[move.to - 1] == Piece.BPAWN)) || ((x < 7) && (squares[move.to + 1] == Piece.BPAWN))) {          setEpSquare(move.from + 8);        }      } else       if (move.to == prevEpSquare) {        setPiece(move.to - 8,Piece.EMPTY);      }    } else     if (p == Piece.BPAWN) {      if (move.to - move.from == -2 * 8) {        int x=Position.getX(move.to);        if (((x > 0) && (squares[move.to - 1] == Piece.WPAWN)) || ((x < 7) && (squares[move.to + 1] == Piece.WPAWN))) {          setEpSquare(move.from - 8);        }      } else       if (move.to == prevEpSquare) {        setPiece(move.to + 8,Piece.EMPTY);      }    }    if (((pieceTypeBB[Piece.WKING] | pieceTypeBB[Piece.BKING]) & fromMask) != 0) {      if (wtm) {        setCastleMask(castleMask & ~(1 << Position.A1_CASTLE));        setCastleMask(castleMask & ~(1 << Position.H1_CASTLE));      } else {        setCastleMask(castleMask & ~(1 << Position.A8_CASTLE));        setCastleMask(castleMask & ~(1 << Position.H8_CASTLE));      }    }    setPiece(move.from,Piece.EMPTY);    if (move.promoteTo != Piece.EMPTY) {      setPiece(move.to,move.promoteTo);    } else {      setPiece(move.to,p);    }  } else {    halfMoveClock++;    if (((pieceTypeBB[Piece.WKING] | pieceTypeBB[Piece.BKING]) & fromMask) != 0) {      int k0=move.from;      if (move.to == k0 + 2) {        movePieceNotPawn(k0 + 3,k0 + 1);      } else       if (move.to == k0 - 2) {        movePieceNotPawn(k0 - 4,k0 - 1);      }      if (wtm) {        setCastleMask(castleMask & ~(1 << Position.A1_CASTLE));        setCastleMask(castleMask & ~(1 << Position.H1_CASTLE));      } else {        setCastleMask(castleMask & ~(1 << Position.A8_CASTLE));        setCastleMask(castleMask & ~(1 << Position.H8_CASTLE));      }    }    movePieceNotPawn(move.from,move.to);  }  if (wtm) {    if ((BitBoard.maskCorners & fromMask) != 0) {      if (p == Piece.WROOK)       removeCastleRights(move.from);    }    if ((BitBoard.maskCorners & (1L << move.to)) != 0) {      if (capP == Piece.BROOK)       removeCastleRights(move.to);    }  } else {    fullMoveCounter++;    if ((BitBoard.maskCorners & fromMask) != 0) {      if (p == Piece.BROOK)       removeCastleRights(move.from);    }    if ((BitBoard.maskCorners & (1L << move.to)) != 0) {      if (capP == Piece.WROOK)       removeCastleRights(move.to);    }  }  hashKey^=whiteHashKey;  whiteMove=!wtm;}  }
class C{  public int compareToVisibleTimeRange(Time time){  int savedHour=mBaseDate.hour;  int savedMinute=mBaseDate.minute;  int savedSec=mBaseDate.second;  mBaseDate.hour=0;  mBaseDate.minute=0;  mBaseDate.second=0;  if (DEBUG) {    Log.d(TAG,"Begin " + mBaseDate.toString());    Log.d(TAG,"Diff  " + time.toString());  }  int diff=Time.compare(time,mBaseDate);  if (diff > 0) {    mBaseDate.monthDay+=mNumDays;    mBaseDate.normalize(true);    diff=Time.compare(time,mBaseDate);    if (DEBUG)     Log.d(TAG,"End   " + mBaseDate.toString());    mBaseDate.monthDay-=mNumDays;    mBaseDate.normalize(true);    if (diff < 0) {      diff=0;    } else     if (diff == 0) {      diff=1;    }  }  if (DEBUG)   Log.d(TAG,"Diff: " + diff);  mBaseDate.hour=savedHour;  mBaseDate.minute=savedMinute;  mBaseDate.second=savedSec;  return diff;}  }
class C{  @Override public void close(){  this.delegate.close();  this.sender.close();}  }
class C{  public Key(int privateKey){  super(privateKey);}  }
class C{  public void addTimeBoundsProvider(TimeBoundsProvider tbp){  if (!timeBoundsProviders.contains(tbp)) {    timeBoundsProviders.add(tbp);    resetTimeBounds();  }}  }
class C{  public boolean match(MemberRef node,Object other){  if (!(other instanceof MemberRef)) {    return false;  }  MemberRef o=(MemberRef)other;  return (safeSubtreeMatch(node.getQualifier(),o.getQualifier()) && safeSubtreeMatch(node.getName(),o.getName()));}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return ERROR;case 3:return TYPE;default :return null;}}  }
class C{  public CreateSensorMatrixAction(final VisionWorld visionWorld){  super("Create sensor matrix...");  if (visionWorld == null) {    throw new IllegalArgumentException("visionWorld must not be null");  }  putValue(SMALL_ICON,ResourceManager.getImageIcon("grid.png"));  this.visionWorld=visionWorld;}  }
class C{  public synchronized Vertex findByData(Object data){  if (data == null) {    return null;  }  Vertex vertex=(Vertex)getVerticiesByData().get(data);  if ((vertex == null) && (getParent() != null)) {    Vertex originalVertex=getParent().findByData(data);    if (originalVertex != null) {      vertex=new BasicVertex(originalVertex);      addVertex(vertex);      vertex.incrementAccessCount();    }  }  return vertex;}  }
class C{  private void build(Subroutine subroutine) throws CFGBuilderException {  subroutine.addEdgeAndExplore(subroutine.getEntry(),subroutine.getStartInstruction(),START_EDGE);  while (subroutine.hasMoreWork()) {    WorkListItem item=subroutine.nextItem();    InstructionHandle handle=item.getStartInstruction();    BasicBlock basicBlock=item.getBasicBlock();    if (isPEI(handle)) {      if (DEBUG) {        System.out.println("ETB block " + basicBlock.getLabel() + " for "+ handle);      }      handleExceptions(subroutine,handle,basicBlock);      BasicBlock body=subroutine.allocateBasicBlock();      subroutine.addEdge(basicBlock,body,FALL_THROUGH_EDGE);      basicBlock=body;    }    if (DEBUG) {      System.out.println("BODY block " + basicBlock.getLabel() + " for "+ handle);    }    if (!basicBlock.isEmpty()) {      throw new IllegalStateException("Block isn't empty!");    }    boolean endOfBasicBlock=false;    do {      Instruction ins=handle.getInstruction();      if (DEBUG) {        System.out.println("BB " + basicBlock.getLabel() + ": adding"+ handle);      }      basicBlock.addInstruction(handle);      subroutine.addInstruction(handle);      short opcode=ins.getOpcode();      if (opcode == Constants.JSR || opcode == Constants.JSR_W) {        JsrInstruction jsr=(JsrInstruction)ins;        InstructionHandle jsrTarget=jsr.getTarget();        Subroutine jsrSubroutine=jsrSubroutineMap.get(jsrTarget);        if (jsrSubroutine == null) {          jsrSubroutine=new Subroutine(jsrTarget);          jsrSubroutineMap.put(jsrTarget,jsrSubroutine);          subroutineWorkList.add(jsrSubroutine);        }        subroutine.addEdgeAndExplore(basicBlock,handle.getNext(),JSR_EDGE);        endOfBasicBlock=true;      } else       if (opcode == Constants.RET) {        subroutine.addEdge(basicBlock,subroutine.getExit(),RET_EDGE);        endOfBasicBlock=true;      } else {        TargetEnumeratingVisitor visitor=new TargetEnumeratingVisitor(handle,cpg);        if (visitor.isEndOfBasicBlock()) {          endOfBasicBlock=true;          if (visitor.instructionIsThrow()) {            handleExceptions(subroutine,handle,basicBlock);          } else           if (visitor.instructionIsExit()) {            subroutine.setExitBlock(basicBlock);          } else           if (visitor.instructionIsReturn()) {            subroutine.setReturnBlock(basicBlock);          } else {            Iterator<Target> i=visitor.targetIterator();            while (i.hasNext()) {              Target target=i.next();              subroutine.addEdgeAndExplore(basicBlock,target.getTargetInstruction(),target.getEdgeType());            }          }        }      }      if (!endOfBasicBlock) {        InstructionHandle next=handle.getNext();        if (next == null) {          throw new CFGBuilderException("Control falls off end of method: " + handle);        }        if (isMerge(next) || isPEI(next)) {          subroutine.addEdgeAndExplore(basicBlock,next,FALL_THROUGH_EDGE);          endOfBasicBlock=true;        } else {          handle=next;        }      }    } while (!endOfBasicBlock);  }}  }
class C{  protected MutableCoord calculatePointOnLine(MutableCoord P1,MutableCoord P2,MutableCoord P3){  double rel=calculateRelation(P1,P2,P3);  double dx=Math.abs(P1.getX() - P2.getX()), dy=Math.abs(P1.getY() - P2.getY());  double nx=P1.getX() + dx * rel, ny=P1.getY() + dy * rel;  if (P1.getX() > P2.getX())   nx=P1.getX() - dx * rel;  if (P1.getY() > P2.getY())   ny=P1.getY() - dy * rel;  MutableCoord result=new MutableCoord(nx,ny);  return result;}  }
class C{  public final boolean isSkipAllExisting(){  return fSkipAllExisting;}  }
class C{  public ResultSet executeQuery(String query) throws SQLException, NoConnectionException {  if (connection != null) {    Statement st=connection.createStatement();    return st.executeQuery(query);  }  throw new NoConnectionException();}  }
class C{  public static DocSet toChildren(DocSet parentInput,BitDocSet parentList,DocSet acceptDocs,QueryContext qcontext) throws IOException {  FixedBitSet parentBits=parentList.getBits();  DocSetCollector collector=new DocSetCollector(qcontext.searcher().maxDoc());  DocIterator iter=parentInput.iterator();  while (iter.hasNext()) {    int parentDoc=iter.nextDoc();    if (!parentList.exists(parentDoc) || parentDoc == 0) {      continue;    }    int prevParent=parentBits.prevSetBit(parentDoc - 1);    for (int childDoc=prevParent + 1; childDoc < parentDoc; childDoc++) {      if (acceptDocs != null && !acceptDocs.exists(childDoc))       continue;      collector.collect(childDoc);    }  }  return collector.getDocSet();}  }
class C{  public CardFlipAnimation(View fromView,View toView){  this.fromView=fromView;  this.toView=toView;  setDuration(400);  setFillAfter(false);  setInterpolator(new AccelerateDecelerateInterpolator());}  }
class C{  private boolean doAcquireSharedNanos(long arg,long nanosTimeout) throws InterruptedException {  if (nanosTimeout <= 0L)   return false;  final long deadline=System.nanoTime() + nanosTimeout;  final Node node=addWaiter(Node.SHARED);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head) {        long r=tryAcquireShared(arg);        if (r >= 0) {          setHeadAndPropagate(node,r);          p.next=null;          failed=false;          return true;        }      }      nanosTimeout=deadline - System.nanoTime();      if (nanosTimeout <= 0L)       return false;      if (shouldParkAfterFailedAcquire(p,node) && nanosTimeout > spinForTimeoutThreshold)       LockSupport.parkNanos(this,nanosTimeout);      if (Thread.interrupted())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public Object top(){  if (numObjs <= 0)   return null; else   return objs[numObjs - 1];}  }
class C{  public void testAuthenticateSpringOpenLdapNotFound(){  LdapManager mgr=getLdapOpenLdap();  LdapAuthenticationUserNameVO authenticationInfo=new LdapAuthenticationUserNameVO();  authenticationInfo.setUserName("ngomila2");  authenticationInfo.setUserCredentials("ldap");  String ret=null;  try {    ret=mgr.authenticate(authenticationInfo);  } catch (  Exception e) {    assertEquals(LdapErrorCodes.ERR_10011_NODE_NOT_FOUND_ERROR,((LdapException)e).getErrCode());  }  assertNull(ret);}  }
class C{  public boolean canEditFolder(AcsAccessObject acs,ArchiveObject arch,int fdrId,String entidad) throws Exception {  boolean can=false;  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    can=FolderMdoFdr.canEditFolder(dbConn,acs.getAccessToken(),arch.getArchiveToken(),fdrId);  } catch (  Exception e) {    throw e;  } finally {    dbConn.close();  }  return can;}  }
class C{  public void start(Context context) throws NetworkErrorException {  ConnectivityManager connMgr=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo networkInfo=connMgr.getActiveNetworkInfo();  if (networkInfo != null && networkInfo.isConnected()) {    new DownloadManager().execute(QUOTES_URL);  } else {    throw new NetworkErrorException("Network not found.");  }}  }
class C{  public void toggleSelection(int position){  if (ExpensesManager.getInstance().getSelectedExpensesItems().get(position,false)) {    ExpensesManager.getInstance().getSelectedExpensesItems().delete(position);  } else {    ExpensesManager.getInstance().getSelectedExpensesItems().put(position,true);  }  notifyItemChanged(position);}  }
class C{  @LogMessageDoc(level="WARN",message="Reasserting master role on switch {SWITCH}, " + "likely a configruation error with multiple masters",explanation="The controller keeps getting permission error " + "from switch, likely due to switch connected to another " + "controller also in master mode",recommendation=LogMessageDoc.CHECK_SWITCH) synchronized void sendRoleRequestIfNotPending(OFControllerRole role) throws IOException {  long now=System.nanoTime();  if (now - lastAssertTimeNs < assertTimeIntervalNs) {    return;  }  lastAssertTimeNs=now;  if (assertTimeIntervalNs < MAX_ASSERT_TIME_INTERVAL_NS) {    assertTimeIntervalNs<<=1;  } else   if (role == OFControllerRole.ROLE_MASTER) {    log.warn("Reasserting master role on switch {}, " + "likely a switch config error with multiple masters",role,sw);  }  if (!requestPending)   sendRoleRequest(role); else   switchManagerCounters.roleNotResentBecauseRolePending.increment();}  }
class C{  private CBookmarkTableHelpers(){}  }
class C{  public void copyInts(int[] otherInts,int otherOffset,int otherLength){  grow(otherLength);  System.arraycopy(otherInts,otherOffset,ref.ints,0,otherLength);  ref.length=otherLength;}  }
class C{  public final SecretKey translateKey(SecretKey key) throws InvalidKeyException {  return spiImpl.engineTranslateKey(key);}  }
class C{  protected void updateMatrix(double[][] mat,final double[] evec,double eval){  final int size=mat.length;  for (int i=0; i < size; i++) {    final double[] mati=mat[i];    final double eveci=evec[i];    for (int j=0; j < size; j++) {      mati[j]-=eval * eveci * evec[j];    }  }}  }
class C{  public boolean process() throws InterruptedException, ReplicatorException {  jobService=new SimpleJobService<ScriptExecutorTaskStatus>(threadPrefix,scriptExecutors.size(),maxRequests,10);  List<Future<ScriptExecutorTaskStatus>> taskFutures=new ArrayList<Future<ScriptExecutorTaskStatus>>();  for (  ScriptExecutor exec : scriptExecutors) {    ScriptExecutorTask execTask=new ScriptExecutorTask(exec,requests,responses);    taskFutures.add(jobService.submit(execTask));  }  for (  Future<ScriptExecutorTaskStatus> future : taskFutures) {    ScriptExecutorTaskStatus status;    try {      status=future.get();      this.taskStatusList.add(status);    } catch (    ExecutionException e) {      jobService.shutdownNow();      throw new ReplicatorException("Failure when checking status of script executor: message=" + e.getMessage(),e);    }    if (status.isSuccessful()) {      invocationCount.addAndGet(status.getCount());      if (logger.isDebugEnabled()) {        logger.debug("Executor task completed successfully: count=" + status.getCount());      }    } else {      jobService.shutdownNow();      return false;    }  }  return true;}  }
class C{  public ConvexHullOutlineHandle(SVGPathFigure owner,AttributeKey<Stroke> stroke1Enabled,AttributeKey<Color> strokeColor1Enabled,AttributeKey<Stroke> stroke2Enabled,AttributeKey<Color> strokeColor2Enabled,AttributeKey<Stroke> stroke1Disabled,AttributeKey<Color> strokeColor1Disabled,AttributeKey<Stroke> stroke2Disabled,AttributeKey<Color> strokeColor2Disabled){  super(owner);  this.stroke1Enabled=stroke1Enabled;  this.strokeColor1Enabled=strokeColor1Enabled;  this.stroke2Enabled=stroke2Enabled;  this.strokeColor2Enabled=strokeColor2Enabled;  this.stroke1Disabled=stroke1Disabled;  this.strokeColor1Disabled=strokeColor1Disabled;  this.stroke2Disabled=stroke2Disabled;  this.strokeColor2Disabled=strokeColor2Disabled;}  }
class C{  public void joinGroup(SocketAddress groupAddress,NetworkInterface netInterface) throws IOException {  checkJoinOrLeave(groupAddress,netInterface);  impl.joinGroup(groupAddress,netInterface);}  }
class C{  private static void parserManifestAttribute(XmlResourceParser xmlResourceParser,PackageLite mPackageLite){  for (int i=0; i < ((AttributeSet)xmlResourceParser).getAttributeCount(); i++) {    String value=((AttributeSet)xmlResourceParser).getAttributeName(i);    if (value.equalsIgnoreCase("package")) {      mPackageLite.packageName=((AttributeSet)xmlResourceParser).getAttributeValue(i);    }    if (value.equals("versionCode")) {      mPackageLite.versionCode=((AttributeSet)xmlResourceParser).getAttributeIntValue(i,0);    } else     if (value.equals("versionName")) {      mPackageLite.versionName=((AttributeSet)xmlResourceParser).getAttributeValue(i);    }  }}  }
class C{  public static <T>LazyFutureStream<T> futureStream(Adapter<T> adapter,LazyReact react){  return react.fromStream(adapter.stream());}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.776 -0400",hash_original_method="A242DFA5F52516C95D0F167B92B745B6",hash_generated_method="1891156C8FEFAA68CD85CC13506CC1D3") protected void handleIOException(IOException e) throws IOException {  throw e;}  }
class C{  public void start(){  startGemFire();  try {    startMemcachedServer();  } catch (  IOException e) {    throw new RuntimeException("Could not start Server",e);  }catch (  InterruptedException e) {    throw new RuntimeException("Could not start Server",e);  }}  }
class C{  public void dispose(){}  }
class C{  protected void onTrackEnd(){  flushLocations(trackData);  if (name != null) {    trackData.track.setName(name);  }  if (description != null) {    trackData.track.setDescription(description);  }  if (category != null) {    trackData.track.setCategory(category);    trackData.track.setIcon(TrackIconUtils.getIconValue(context,category));  }  if (trackData.tripStatisticsUpdater == null) {    trackData.tripStatisticsUpdater=new TripStatisticsUpdater(trackData.importTime);    trackData.tripStatisticsUpdater.updateTime(trackData.importTime);  }  trackData.track.setTripStatistics(trackData.tripStatisticsUpdater.getTripStatistics());  trackData.track.setNumberOfPoints(trackData.numberOfLocations);  myTracksProviderUtils.updateTrack(trackData.track);  insertFirstWaypoint(trackData.track);}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer();  buf.append(getClass().getName());  buf.append(", status: capacity=");  buf.append(capacity());  buf.append(" position=");  buf.append(position());  buf.append(" limit=");  buf.append(limit());  return buf.toString();}  }
class C{  public boolean optBoolean(String key,boolean defaultValue){  try {    return this.getBoolean(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  private TestRunStatus runErrorTests(TestEnvironment environment,RandoopOptions options,ExpectedTests expectedError,RandoopRunStatus runStatus,String packageName){  TestRunStatus errorRunDesc=null;switch (expectedError) {case SOME:    assertThat("...has error tests",runStatus.errorTestCount,is(greaterThan(0)));  String errorBasename=options.getErrorBasename();try {  errorRunDesc=TestRunStatus.runTests(environment,packageName,errorBasename);} catch (IOException e) {  fail("Exception collecting coverage from error tests: " + e.getMessage());}assert errorRunDesc.processStatus.exitStatus != 0 : "JUnit should exit with error";if (errorRunDesc.testsFail != errorRunDesc.testsRun) {for (String line : errorRunDesc.processStatus.outputLines) {System.err.println(line);}fail("all error tests should fail, but " + errorRunDesc.testsSucceed + " passed");}break;case NONE:assertThat("...has no error tests",runStatus.errorTestCount,is(equalTo(0)));break;case DONT_CARE:break;}return errorRunDesc;}  }
class C{  public boolean isEMailWhenOverdue(){  Object oo=get_Value(COLUMNNAME_IsEMailWhenOverdue);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean decodeContentType(int startIndex){  int mediaPrefixLength;  mContentParameters=new HashMap<String,String>();  try {    if (decodeValueLength(startIndex) == false) {      boolean found=decodeConstrainedEncoding(startIndex);      if (found) {        expandWellKnownMimeType();      }      return found;    }    int headersLength=(int)mUnsigned32bit;    mediaPrefixLength=getDecodedDataLength();    if (decodeIntegerValue(startIndex + mediaPrefixLength) == true) {      mDataLength+=mediaPrefixLength;      int readLength=mDataLength;      mStringValue=null;      expandWellKnownMimeType();      long wellKnownValue=mUnsigned32bit;      String mimeType=mStringValue;      if (readContentParameters(startIndex + mDataLength,(headersLength - (mDataLength - mediaPrefixLength)),0)) {        mDataLength+=readLength;        mUnsigned32bit=wellKnownValue;        mStringValue=mimeType;        return true;      }      return false;    }    if (decodeExtensionMedia(startIndex + mediaPrefixLength) == true) {      mDataLength+=mediaPrefixLength;      int readLength=mDataLength;      expandWellKnownMimeType();      long wellKnownValue=mUnsigned32bit;      String mimeType=mStringValue;      if (readContentParameters(startIndex + mDataLength,(headersLength - (mDataLength - mediaPrefixLength)),0)) {        mDataLength+=readLength;        mUnsigned32bit=wellKnownValue;        mStringValue=mimeType;        return true;      }    }  } catch (  ArrayIndexOutOfBoundsException e) {    return false;  }  return false;}  }
class C{  protected void continueWrite(){  if (log.isDebugEnabled()) {    log.debug("Start continueWrite");  }  Iterator<VariableValue> i=variables.iterator();  while (i.hasNext()) {    VariableValue v=i.next();    if (v.isToWrite() && (!writingChanges || v.isChanged())) {      amWriting=true;      setBusy(true);      log.debug("request write of " + v.label() + " writing changes "+ writingChanges);      if (writingChanges) {        v.writeChanges();      } else {        v.writeAll();      }      log.debug("return from starting write request");      return;    }  }  amWriting=false;  super.setState(STORED);  setBusy(false);  log.debug("End continueWrite, nothing to do");}  }
class C{  public static void append(String message){  log.add(message);}  }
class C{  public GeofenceCircle addSavedPoint(LatLng savedPoint,Integer radius,long geofenceCircleId,int fillColor){  GeofenceCircle circle=new GeofenceCircle.Builder(context).map(googleMap).enabled(isEnabled).radius(radius).circleId(circleId).circleId(circleId).strokeWidth(strokeWidth).strokeColor(strokeColor).fillColor(fillColor).minRadius(minRadius).maxRadius(maxRadius).centerIcon(centerIcon).centerBitmap(centerBitmap).resizerIcon(resizerIcon).centerOffsetHorizontal(centerOffsetHorizontal).centerOffsetVertical(centerOffsetVertical).center(savedPoint).build();  savedPoints.add(circle);  return circle;}  }
class C{  private static boolean accessibleForLevel(String agentName,int level){  String[] splitted=getSplittedAgentName(agentName);  if (splitted.length > (level + 1)) {    for (    String string : splitted) {      if (StringUtils.isEmpty(string)) {        return false;      }    }    return true;  } else {    return false;  }}  }
class C{  public T caseExtendedStateMachine_(ExtendedStateMachine_ object){  return null;}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  private void uncheckItems(final ChangeItem[] changeItems){  Check.notNull(changeItems,"changeItems");  for (int i=0; i < changeItems.length; i++) {    ((CheckboxTableViewer)getViewer()).setChecked(changeItems[i],false);  }  computeCheckedElements(true);}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  private Integer computeNumPaths(Map<URI,List<StoragePort>> initiatorPortMap,URI varray,StorageSystem array){  StoragePortsAssigner assigner=StoragePortsAssignerFactory.getAssigner(array.getSystemType());  int portsPerPath=assigner.getNumberOfPortsPerPath();  Map<URI,List<StoragePort>> arrayTargetMap=ConnectivityUtil.getStoragePortsOfTypeAndVArray(_dbClient,array.getId(),StoragePort.PortType.frontend,varray);  int numPaths=0;  for (  URI networkURI : initiatorPortMap.keySet()) {    if (arrayTargetMap.get(networkURI) != null) {      int pathsInNetwork=arrayTargetMap.get(networkURI).size() / portsPerPath;      int initiatorsInNetwork=initiatorPortMap.get(networkURI).size();      if (pathsInNetwork > initiatorsInNetwork) {        pathsInNetwork=initiatorsInNetwork;      }      _log.info(String.format("Network %s has %s paths",networkURI,pathsInNetwork));      numPaths+=pathsInNetwork;    } else {      _log.info(String.format("Storage Array %s has no ports in Network %s",array.getNativeGuid(),networkURI));    }  }  return numPaths;}  }
class C{  public boolean canBeLongAddress(int address){  return ((address >= 0) && (address <= 10239));}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private int hash(int hashCode){  return supplementalHash(hashCode) & (capacity - 1);}  }
class C{  public static boolean check_download_service(Context ctx){  if (_DOWNLOAD_SERVICE_AVAILABLE != null) {    return _DOWNLOAD_SERVICE_AVAILABLE;  }  _DOWNLOAD_SERVICE_AVAILABLE=ctx.getSystemService(Context.DOWNLOAD_SERVICE) != null;  return _DOWNLOAD_SERVICE_AVAILABLE;}  }
class C{  public DeterministicKey(ImmutableList<ChildNumber> childNumberPath,byte[] chainCode,BigInteger priv,@Nullable DeterministicKey parent){  super(priv,compressPoint(ECKey.publicPointFromPrivate(priv)));  checkArgument(chainCode.length == 32);  this.parent=parent;  this.childNumberPath=checkNotNull(childNumberPath);  this.chainCode=Arrays.copyOf(chainCode,chainCode.length);  this.depth=parent == null ? 0 : parent.depth + 1;  this.parentFingerprint=(parent != null) ? parent.getFingerprint() : 0;}  }
class C{  private void markBlockForRegeneration(BasicBlockLE p){  if (DBG_REGEN)   db("marking " + p + " for regeneration");  if (p.fallThrough != null && p.fallThrough instanceof InliningBlockLE) {    InliningBlockLE imbb=(InliningBlockLE)p.fallThrough;    imbb.deleteAllOutEdges();  }  if (!p.block.isEmpty()) {    p.block.discardInstructions();  }  p.setSelfRegen();  p.clearGenerated();  p.fallThrough=null;  if (p.stackState != null) {    int i=p.stackState.getSize();    while (i-- > 0) {      Operand op=p.stackState.getFromTop(i);      p.stackState.replaceFromTop(i,op.copy());    }  }}  }
class C{  public static void f(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_FATAL) {    return;  }  Log.wtf(tag,msg,throwable);}  }
class C{  public void enableZoom(boolean enable){  isZoom=enable;}  }
class C{  public Address __rshift__(final Object rhs){  return new Address(m_value.shiftRight(getBigInteger(rhs).intValue()));}  }
class C{  @Override protected boolean isZoneLevelResource(){  return false;}  }
class C{  static Map<? extends Attribute,?> addInputMethodAttrs(Map<? extends Attribute,?> oldStyles){  Object value=oldStyles.get(TextAttribute.INPUT_METHOD_HIGHLIGHT);  try {    if (value != null) {      if (value instanceof Annotation) {        value=((Annotation)value).getValue();      }      InputMethodHighlight hl;      hl=(InputMethodHighlight)value;      Map<? extends Attribute,?> imStyles=null;      try {        imStyles=hl.getStyle();      } catch (      NoSuchMethodError e) {      }      if (imStyles == null) {        Toolkit tk=Toolkit.getDefaultToolkit();        imStyles=tk.mapInputMethodHighlight(hl);      }      if (imStyles != null) {        HashMap<Attribute,Object> newStyles=new HashMap<>(5,(float)0.9);        newStyles.putAll(oldStyles);        newStyles.putAll(imStyles);        return newStyles;      }    }  } catch (  ClassCastException e) {  }  return oldStyles;}  }
class C{  protected static byte[] encodeDHPublicKey(DHPublicKeyParameters pubkey){  return pubkey.getY().toByteArray();}  }
class C{  public String write(URL target) throws Exception {  return target.toString();}  }
class C{  private IgniteTask checkOffer(Protos.Offer offer){  if (clusterProps.instances() <= tasks.size())   return null;  double cpus=-1;  double mem=-1;  double disk=-1;  if (clusterProps.hostnameConstraint() != null && clusterProps.hostnameConstraint().matcher(offer.getHostname()).matches())   return null;  for (  Protos.Resource resource : offer.getResourcesList()) {    if (resource.getName().equals(CPU)) {      if (resource.getType().equals(Protos.Value.Type.SCALAR))       cpus=resource.getScalar().getValue(); else       log.log(Level.FINE,"Cpus resource was not a scalar: {0}" + resource.getType());    } else     if (resource.getName().equals(MEM)) {      if (resource.getType().equals(Protos.Value.Type.SCALAR))       mem=resource.getScalar().getValue(); else       log.log(Level.FINE,"Mem resource was not a scalar: {0}",resource.getType());    } else     if (resource.getName().equals(DISK))     if (resource.getType().equals(Protos.Value.Type.SCALAR))     disk=resource.getScalar().getValue(); else     log.log(Level.FINE,"Disk resource was not a scalar: {0}",resource.getType());  }  if (cpus < clusterProps.minCpuPerNode() || mem < clusterProps.minMemoryPerNode()) {    log.log(Level.FINE,"Offer not sufficient for slave request: {0}",offer.getResourcesList());    return null;  }  double totalCpus=0;  double totalMem=0;  double totalDisk=0;  for (  IgniteTask task : tasks.values()) {    totalCpus+=task.cpuCores();    totalMem+=task.mem();    totalDisk+=task.disk();  }  cpus=Math.min(clusterProps.cpus() - totalCpus,Math.min(cpus,clusterProps.cpusPerNode()));  mem=Math.min(clusterProps.memory() - totalMem,Math.min(mem,clusterProps.memoryPerNode()));  disk=Math.min(clusterProps.disk() - totalDisk,Math.min(disk,clusterProps.diskPerNode()));  if ((clusterProps.cpusPerNode() != ClusterProperties.UNLIMITED && clusterProps.cpusPerNode() != cpus) || (clusterProps.memoryPerNode() != ClusterProperties.UNLIMITED && clusterProps.memoryPerNode() != mem)) {    log.log(Level.FINE,"Offer not sufficient for slave request: {0}",offer.getResourcesList());    return null;  }  if (cpus > 0 && mem > 0)   return new IgniteTask(offer.getHostname(),cpus,mem,disk); else {    log.log(Level.FINE,"Offer not sufficient for slave request: {0}",offer.getResourcesList());    return null;  }}  }
class C{  public FgsMb2(Score score){  if (score == null)   throw new NullPointerException();  setFgsScore(score);  this.graph=new EdgeListGraphSingleConnections(getVariables());}  }
class C{  public CorsServiceBuilder preflightResponseHeader(final String name,final Object... values){  requireNonNull(name,"name");  return preflightResponseHeader(HttpHeaderNames.of(name),values);}  }
class C{  public RegisterServerResponse RegisterServer(RequestHeader RequestHeader,RegisteredServer Server) throws ServiceFaultException, ServiceResultException {  RegisterServerRequest req=new RegisterServerRequest(RequestHeader,Server);  return (RegisterServerResponse)channel.serviceRequest(req);}  }
class C{  private void writeElement(OutputNode node,Object value,Label label) throws Exception {  if (value != null) {    Class real=value.getClass();    Label match=label.getLabel(real);    String name=match.getName();    Type type=label.getType(real);    OutputNode next=node.getChild(name);    if (!match.isInline()) {      writeNamespaces(next,type,match);    }    if (match.isInline() || !isOverridden(next,value,type)) {      Converter convert=match.getConverter(context);      boolean data=match.isData();      next.setData(data);      writeElement(next,value,convert);    }  }}  }
class C{  public int[] fieldIds(){  return ids;}  }
class C{  protected int[] generateWorkingKey(boolean encrypting,byte[] key,int off){  int[] newKey=new int[32];  boolean[] pc1m=new boolean[56], pcr=new boolean[56];  for (int j=0; j < 56; j++) {    int l=pc1[j];    pc1m[j]=((key[off + (l >>> 3)] & bytebit[l & 07]) != 0);  }  for (int i=0; i < 16; i++) {    int l, m, n;    if (encrypting) {      m=i << 1;    } else {      m=(15 - i) << 1;    }    n=m + 1;    newKey[m]=newKey[n]=0;    for (int j=0; j < 28; j++) {      l=j + totrot[i];      if (l < 28) {        pcr[j]=pc1m[l];      } else {        pcr[j]=pc1m[l - 28];      }    }    for (int j=28; j < 56; j++) {      l=j + totrot[i];      if (l < 56) {        pcr[j]=pc1m[l];      } else {        pcr[j]=pc1m[l - 28];      }    }    for (int j=0; j < 24; j++) {      if (pcr[pc2[j]]) {        newKey[m]|=bigbyte[j];      }      if (pcr[pc2[j + 24]]) {        newKey[n]|=bigbyte[j];      }    }  }  for (int i=0; i != 32; i+=2) {    int i1, i2;    i1=newKey[i];    i2=newKey[i + 1];    newKey[i]=((i1 & 0x00fc0000) << 6) | ((i1 & 0x00000fc0) << 10) | ((i2 & 0x00fc0000) >>> 10)| ((i2 & 0x00000fc0) >>> 6);    newKey[i + 1]=((i1 & 0x0003f000) << 12) | ((i1 & 0x0000003f) << 16) | ((i2 & 0x0003f000) >>> 4)| (i2 & 0x0000003f);  }  return newKey;}  }
class C{  private void addGlyphStartStates(List<Tuple2<TransitionState,Double>> result,int nextLmChar,int[] nextContext,TransitionStateType nextType,int nextLanguage,double transitionScore){  if (!allowGlyphSubstitution)   addState(result,nextContext,nextType,nextLanguage,new GlyphChar(nextLmChar,GlyphType.NORMAL_CHAR),transitionScore); else {    Set<GlyphChar> potentialNextGlyphChars=new HashSet<GlyphChar>();    potentialNextGlyphChars.add(new GlyphChar(nextLmChar,GlyphType.NORMAL_CHAR));    if (canBeReplaced.contains(nextLmChar)) {      for (      int nextGlyphCharIndex : lm.get(nextLanguage).getActiveCharacters()) {        if (validSubstitutionChars.contains(nextGlyphCharIndex)) {          potentialNextGlyphChars.add(new GlyphChar(nextGlyphCharIndex,GlyphType.NORMAL_CHAR));        }      }    }    if (nextLmChar == sCharIndex)     potentialNextGlyphChars.add(new GlyphChar(longsCharIndex,GlyphType.NORMAL_CHAR));    Integer tildeDecorated=addTilde.get(nextLmChar);    if (tildeDecorated != null) {      potentialNextGlyphChars.add(new GlyphChar(tildeDecorated,GlyphType.ELISION_TILDE));    }    Integer baseChar=diacriticDisregardMap.get(nextLmChar);    if (baseChar != null) {      potentialNextGlyphChars.add(new GlyphChar(baseChar,GlyphType.NORMAL_CHAR));    }    if (!elideAnything) {      if (nextType == TransitionStateType.TMPL) {        if (canBeElided.contains(nextLmChar)) {          potentialNextGlyphChars.add(new GlyphChar(spaceCharIndex,GlyphType.FIRST_ELIDED));        }      }    }    if (validDoublableSet.contains(nextLmChar)) {      potentialNextGlyphChars.add(new GlyphChar(nextLmChar,GlyphType.DOUBLED));      if (nextLmChar == sCharIndex)       potentialNextGlyphChars.add(new GlyphChar(longsCharIndex,GlyphType.DOUBLED));    }    if (elideAnything) {      if (nextType == TransitionStateType.TMPL) {        if (canBeElided.contains(nextLmChar)) {          potentialNextGlyphChars.add(new GlyphChar(spaceCharIndex,GlyphType.ELIDED));        }      }    }    for (    GlyphChar nextGlyphChar : potentialNextGlyphChars) {      double glyphLogProb=calculateGlyphLogProb(nextType,nextLanguage,nextLmChar,nextGlyphChar);      addState(result,nextContext,nextType,nextLanguage,nextGlyphChar,transitionScore + glyphLogProb);    }  }}  }
class C{  protected void addOpaqueAttr(WbXmlAttributeDef attr,OpaqueAttributePlugin plugin){  this.opaqueAttrByName.put(attr.getNameWithPrefix(),plugin);  this.opaqueAttrByToken.put(attr.getToken(),plugin);}  }
class C{  public final boolean areChildRoundedCornersEnabled(){  return mRoundedCornersEnabled;}  }
class C{  public JToggleButton(Action a){  this();  setAction(a);}  }
class C{  protected static int triangleSize(int x){  return (x * (x - 1)) >>> 1;}  }
class C{  private boolean checkDisposed(){  return composite.isDisposed();}  }
class C{  public ConcurrentWeakValueCacheWithBatchedUpdates(final int queueCapacity,final float loadFactor,final int concurrencyLevel){  this(queueCapacity,loadFactor,concurrencyLevel,true);}  }
class C{  public <T extends Event>void waitFor(Class<T> eventClass,long time) throws InterruptedException {  waitFor(null,time);}  }
class C{  public VisionWorldModelListenerSupport(final VisionWorldModel source){  this();  setSource(source);}  }
class C{  public static boolean isXML11ValidNmtoken(String nmtoken){  int length=nmtoken.length();  if (length == 0)   return false;  for (int i=0; i < length; ++i) {    char ch=nmtoken.charAt(i);    if (!isXML11Name(ch)) {      if (++i < length && isXML11NameHighSurrogate(ch)) {        char ch2=nmtoken.charAt(i);        if (!XMLChar.isLowSurrogate(ch2) || !isXML11Name(XMLChar.supplemental(ch,ch2))) {          return false;        }      } else {        return false;      }    }  }  return true;}  }
class C{  private void shrink(){  long maxMem=this.maxMemSize;  if (maxMem > 0) {    long startMemSize=memSize.longValue();    if (startMemSize >= maxMem)     for (long i=maxMem; i < startMemSize && memSize.longValue() > maxMem; ) {      int size=shrink0();      if (size == -1)       break;      i+=size;    }  }  int max=this.max;  if (max > 0) {    int startSize=queue.sizex();    if (startSize >= max + (maxMem > 0 ? 1 : this.batchSize))     for (int i=max; i < startSize && queue.sizex() > max; i++)     if (shrink0() == -1)     break;  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (timer_1: ");  result.append(timer_1);  result.append(')');  return result.toString();}  }
class C{  WebSession createNewSession(String hostAddr){  String newId;  do {    newId=generateSessionId();  } while (sessions.get(newId) != null);  WebSession session=new WebSession(this);  session.lastAccess=System.currentTimeMillis();  session.put("sessionId",newId);  session.put("ip",hostAddr);  session.put("language",DEFAULT_LANGUAGE);  session.put("frame-border","0");  session.put("frameset-border","4");  sessions.put(newId,session);  readTranslations(session,DEFAULT_LANGUAGE);  return getSession(newId);}  }
class C{  public static final String extractInterpretedIplSlaveDevice(LocoNetMessage m){  if (!isIplIdentityReportMessage(m)) {    return null;  }  return interpretSlaveManufacturerDevice(extractIplIdentitySlaveManufacturer(m),extractIplIdentitySlaveDevice(m));}  }
class C{  public DocumentListEntry createNew(String title,String type) throws MalformedURLException, IOException, ServiceException, DocumentListException {  if (title == null || type == null) {    throw new DocumentListException("null title or type");  }  DocumentListEntry newEntry=null;  if (type.equals("document")) {    newEntry=new DocumentEntry();  } else   if (type.equals("presentation")) {    newEntry=new PresentationEntry();  } else   if (type.equals("spreadsheet")) {    newEntry=new SpreadsheetEntry();  } else   if (type.equals("folder")) {    newEntry=new FolderEntry();  }  newEntry.setTitle(new PlainTextConstruct(title));  return service.insert(buildUrl(URL_DEFAULT + URL_DOCLIST_FEED),newEntry);}  }
class C{  public void addData(final int dataSourceIndex,final double time,final double value){  getDataset().getSeries(dataSourceIndex).add(time,value);}  }
class C{  public static float[] toFloatArray(Character[] array){  float[] result=new float[array.length];  for (int i=0; i < array.length; i++) {    result[i]=((float)array[i].charValue());  }  return result;}  }
class C{  private double sineInQuadrant(int angleDegree,int quadrant){  double correctedSine=Math.sin(Math.toRadians(angleDegree)) * getQuadrantSinMultiplier(quadrant);  if (SHOW_LOGS)   Log.v(TAG,String.format("sineInQuadrant, correctedSine %f",correctedSine));  return correctedSine;}  }
class C{  public static void extract(File file,File destination) throws IOException {  ZipInputStream in=null;  OutputStream out=null;  try {    in=new ZipInputStream(new FileInputStream(file));    ZipEntry entry=null;    while ((entry=in.getNextEntry()) != null) {      String outFilename=entry.getName();      File extracted=new File(destination,outFilename);      if (entry.isDirectory()) {        extracted.mkdirs();      } else {        File baseDir=extracted.getParentFile();        if (!baseDir.exists()) {          baseDir.mkdirs();        }        out=new FileOutputStream(extracted);        byte[] buf=new byte[1024];        int len;        while ((len=in.read(buf)) > 0) {          out.write(buf,0,len);        }        out.close();        if (extracted.getParent().contains(BIN_FOLDER)) {          extracted.setExecutable(true);        }      }    }  }  finally {    if (in != null) {      in.close();    }    if (out != null) {      out.close();    }  }}  }
class C{  public RestResponse delete() throws RestException {  if (urlString == null) {    throw new RestException("No URL is set");  }  try {    if (!parameters.isEmpty()) {      if (urlString.indexOf('?') == -1) {        urlString=urlString + "?" + parametersToQueryString();      } else {        urlString=urlString + "&" + parametersToQueryString();      }    }    final URLConnection connection=initURLConnection(urlString,"DELETE");    for (    final Map.Entry<String,String> header : headers.entrySet()) {      connection.setRequestProperty(header.getKey(),header.getValue());    }    final int statusCode=connectionStatus(connection);    final String mimeType=connection.getContentType();    final byte[] body=responseBodyBytes(connection);    return new RestResponse(statusCode,mimeType,body);  } catch (  Exception e) {    throw new RestException(e);  }}  }
class C{  @Override protected void writeBlobToHDFS(String fname,String ofmt,int rep,FileFormatProperties fprop) throws IOException, DMLRuntimeException {  long begin=0;  if (LOG.isTraceEnabled()) {    LOG.trace(" Writing matrix to HDFS...  " + getVarName() + "  Path: "+ fname+ ", Format: "+ (ofmt != null ? ofmt : "inferred from metadata"));    begin=System.currentTimeMillis();  }  MatrixFormatMetaData iimd=(MatrixFormatMetaData)_metaData;  if (_data != null) {    MatrixCharacteristics mc=iimd.getMatrixCharacteristics();    OutputInfo oinfo=(ofmt != null ? OutputInfo.stringToOutputInfo(ofmt) : InputInfo.getMatchingOutputInfo(iimd.getInputInfo()));    if (oinfo == OutputInfo.BinaryBlockOutputInfo && DMLScript.rtplatform == RUNTIME_PLATFORM.SINGLE_NODE && (mc.getRowsPerBlock() != ConfigurationManager.getBlocksize() || mc.getColsPerBlock() != ConfigurationManager.getBlocksize())) {      DataConverter.writeMatrixToHDFS(_data,fname,oinfo,new MatrixCharacteristics(mc.getRows(),mc.getCols(),ConfigurationManager.getBlocksize(),ConfigurationManager.getBlocksize(),mc.getNonZeros()),rep,fprop);    } else {      DataConverter.writeMatrixToHDFS(_data,fname,oinfo,mc,rep,fprop);    }    if (LOG.isTraceEnabled())     LOG.trace("Writing matrix to HDFS (" + fname + ") - COMPLETED... "+ (System.currentTimeMillis() - begin)+ " msec.");  } else   if (LOG.isTraceEnabled()) {    LOG.trace("Writing matrix to HDFS (" + fname + ") - NOTHING TO WRITE (_data == null).");  }  if (DMLScript.STATISTICS)   CacheStatistics.incrementHDFSWrites();}  }
class C{  @Override public void onInit(List<? extends IndexCommit> list) throws IOException {  List<IndexCommitWrapper> wrapperList=wrap(list);  deletionPolicy.onInit(wrapperList);  updateCommitPoints(wrapperList);  cleanReserves();}  }
class C{  public void killAllLoadsOf(@CheckForNull ValueNumber v){  if (!REDUNDANT_LOAD_ELIMINATION) {    return;  }  FieldSummary fieldSummary=AnalysisContext.currentAnalysisContext().getFieldSummary();  HashSet<AvailableLoad> killMe=new HashSet<AvailableLoad>();  for (  AvailableLoad availableLoad : getAvailableLoadMap().keySet()) {    if (availableLoad.getReference() != v) {      continue;    }    XField field=availableLoad.getField();    if (!field.isFinal() && (!USE_WRITTEN_OUTSIDE_OF_CONSTRUCTOR || fieldSummary.isWrittenOutsideOfConstructor(field))) {      if (RLE_DEBUG) {        System.out.println("Killing load of " + availableLoad + " in "+ this);      }      killMe.add(availableLoad);    }  }  killAvailableLoads(killMe);}  }
class C{  static public final float cos(float radians){  return Sin.table[(int)((radians + PI / 2) * radToIndex) & SIN_MASK];}  }
class C{  public Stage previousRun(int pipelineCounter,String stageName,int stageCounter){  LOG.debug(String.format("Looking for stage before %d/%s/%d",pipelineCounter,stageName,stageCounter));  for (int i=0; i < pipelines.length; i++) {    Pipeline pipeline=pipelines[i];    for (int j=0; j < pipeline.stages.length; j++) {      Stage stage=pipeline.stages[j];      LOG.debug(String.format("Checking %d/%s/%d",pipeline.counter,stage.name,stage.counter));      if (stage.name.equals(stageName)) {        if (pipeline.counter == pipelineCounter && stage.counter < stageCounter)         return stage;        if (pipeline.counter < pipelineCounter)         return stage;      }    }  }  return null;}  }
class C{  public void load(byte[] value,int token,byte[] substitute,boolean escape){  ByteTrie bt=head;  for (int i=0; i < value.length; i++) {    int index=value[i] & 0xFF;    ByteTrie existing=bt.links[index];    if (i == value.length - 1) {      if (existing == null) {        if (escape) {          bt.links[index]=new ByteTrie(value[i],ByteState.BUFFERING,token,substitute,escape);        } else {          bt.links[index]=new ByteTrie(value[i],ByteState.ACCEPTED,token,substitute,escape);        }      } else {        throw new UnsupportedOperationException("Byte string would result in an ambiguous byte state machine: " + new String(value));      }    } else {      if (existing == null) {        bt.links[index]=new ByteTrie(value[i]);      }    }    bt=bt.links[index];  }}  }
class C{  public String datasetsTipText(){  return "The datasets to load.";}  }
class C{  public void testPolygon() throws Exception {  EsriLayer layer=new EsriLayer("Polygon Layer",SHAPE_TYPE_POLYGON,2);  DbfTableModel model=layer.getModel();  model.setDecimalCount(0,(byte)0);  model.setLength(0,(byte)20);  model.setColumnName(0,"Column1");  model.setType(0,(byte)DbfTableModel.TYPE_CHARACTER);  model.setDecimalCount(1,(byte)3);  model.setLength(1,(byte)20);  model.setColumnName(1,"Column2");  model.setType(1,(byte)DbfTableModel.TYPE_NUMERIC);  addPolygonRecord1(layer);  EsriGraphicList list=layer.getEsriGraphicList();  ShpOutputStream pos=new ShpOutputStream(new FileOutputStream("polygontest5.shp"));  int[][] indexData=pos.writeGeometry(list);  ShxOutputStream xos=new ShxOutputStream(new FileOutputStream("polygontest5.shx"));  xos.writeIndex(indexData,list.getType(),list.getExtents());  DbfOutputStream dos=new DbfOutputStream(new FileOutputStream("polygontest5.dbf"));  dos.writeModel(model);}  }
class C{  private static void removeTestMethodName(){  System.setProperty(getKey(),NO_NAME);}  }
class C{  private static void checkArguments(final JFrame parent,final IDebugger debugger){  Preconditions.checkNotNull(parent,"IE01552: Parent argument can not be null");  Preconditions.checkNotNull(debugger,"IE01553: Debugger argument can not be null");}  }
class C{  public boolean isCallLike(){  return isCallLike;}  }
class C{  private static void parseHolidayIntegerCSVString(HashMap<Integer,int[]> HOLIDAYS,Integer year,String csvString){  StringTokenizer st=new StringTokenizer(csvString,",");  if (st.countTokens() > 0) {    int[] dates=new int[(st.countTokens())];    int i=0;    while (st.hasMoreTokens()) {      dates[(i)]=Integer.parseInt(st.nextToken());      i++;    }    HOLIDAYS.put(year,dates);  }}  }
class C{  public static String qualifiedFieldName(Class cls,String fieldName){  return cls.getName() + "." + fieldName;}  }
class C{  public boolean isDelta(){  return !(getDeltaAmt().signum() == 0 && getDeltaQty().signum() == 0);}  }
class C{  public static long size(File self){  return self.length();}  }
class C{  @Override public boolean equals(Object other){  if (this == other)   return true;  if (other == null || getClass() != other.getClass())   return false;  LocalizedAuditLogEntryParameters localizedAuditLogEntryParameters=(LocalizedAuditLogEntryParameters)other;  if (!description.equals(localizedAuditLogEntryParameters.description))   return false;  if (!shortDescription.equals(localizedAuditLogEntryParameters.shortDescription))   return false;  if (!license.equals(localizedAuditLogEntryParameters.license))   return false;  return true;}  }
class C{  public static CSRPointer denseToSparse(cusparseHandle cusparseHandle,int rows,int cols,Pointer densePtr) throws DMLRuntimeException {  cusparseMatDescr matDescr=CSRPointer.getDefaultCuSparseMatrixDescriptor();  Pointer nnzPerRowPtr=new Pointer();  Pointer nnzTotalDevHostPtr=new Pointer();  ensureFreeSpace((rows + 1) * Sizeof.INT);  long t1=System.nanoTime();  cudaMalloc(nnzPerRowPtr,cols * Sizeof.INT);  cudaMalloc(nnzTotalDevHostPtr,Sizeof.INT);  Statistics.cudaAllocTime.addAndGet(System.nanoTime() - t1);  Statistics.cudaAllocCount.addAndGet(2);  cusparseDnnz(cusparseHandle,cusparseDirection.CUSPARSE_DIRECTION_ROW,rows,cols,matDescr,densePtr,rows,nnzPerRowPtr,nnzTotalDevHostPtr);  int[] nnzC={-1};  long t2=System.nanoTime();  cudaMemcpy(Pointer.to(nnzC),nnzTotalDevHostPtr,Sizeof.INT,cudaMemcpyDeviceToHost);  Statistics.cudaFromDevTime.addAndGet(System.nanoTime() - t2);  Statistics.cudaFromDevCount.addAndGet(2);  if (nnzC[0] == -1) {    throw new DMLRuntimeException("cusparseDnnz did not calculate the correct number of nnz from the sparse-matrix vector mulitply on the GPU");  }  CSRPointer C=CSRPointer.allocateEmpty(nnzC[0],rows);  cusparseDdense2csr(cusparseHandle,rows,cols,matDescr,densePtr,rows,nnzPerRowPtr,C.val,C.rowPtr,C.colInd);  cudaFree(nnzPerRowPtr);  cudaFree(nnzTotalDevHostPtr);  return C;}  }
class C{  protected boolean checkOriginalModelFields(CalendarEventModel originalModel){  if (mAllDay != originalModel.mAllDay) {    return false;  }  if (mAttendeesList == null) {    if (originalModel.mAttendeesList != null) {      return false;    }  } else   if (!mAttendeesList.equals(originalModel.mAttendeesList)) {    return false;  }  if (mCalendarId != originalModel.mCalendarId) {    return false;  }  if (mCalendarColor != originalModel.mCalendarColor) {    return false;  }  if (mCalendarColorInitialized != originalModel.mCalendarColorInitialized) {    return false;  }  if (mGuestsCanInviteOthers != originalModel.mGuestsCanInviteOthers) {    return false;  }  if (mGuestsCanModify != originalModel.mGuestsCanModify) {    return false;  }  if (mGuestsCanSeeGuests != originalModel.mGuestsCanSeeGuests) {    return false;  }  if (mOrganizerCanRespond != originalModel.mOrganizerCanRespond) {    return false;  }  if (mCalendarAccessLevel != originalModel.mCalendarAccessLevel) {    return false;  }  if (mModelUpdatedWithEventCursor != originalModel.mModelUpdatedWithEventCursor) {    return false;  }  if (mHasAlarm != originalModel.mHasAlarm) {    return false;  }  if (mHasAttendeeData != originalModel.mHasAttendeeData) {    return false;  }  if (mId != originalModel.mId) {    return false;  }  if (mIsOrganizer != originalModel.mIsOrganizer) {    return false;  }  if (mOrganizer == null) {    if (originalModel.mOrganizer != null) {      return false;    }  } else   if (!mOrganizer.equals(originalModel.mOrganizer)) {    return false;  }  if (mOriginalAllDay == null) {    if (originalModel.mOriginalAllDay != null) {      return false;    }  } else   if (!mOriginalAllDay.equals(originalModel.mOriginalAllDay)) {    return false;  }  if (mOriginalTime == null) {    if (originalModel.mOriginalTime != null) {      return false;    }  } else   if (!mOriginalTime.equals(originalModel.mOriginalTime)) {    return false;  }  if (mOwnerAccount == null) {    if (originalModel.mOwnerAccount != null) {      return false;    }  } else   if (!mOwnerAccount.equals(originalModel.mOwnerAccount)) {    return false;  }  if (mReminders == null) {    if (originalModel.mReminders != null) {      return false;    }  } else   if (!mReminders.equals(originalModel.mReminders)) {    return false;  }  if (mSelfAttendeeStatus != originalModel.mSelfAttendeeStatus) {    return false;  }  if (mOwnerAttendeeId != originalModel.mOwnerAttendeeId) {    return false;  }  if (mSyncAccount == null) {    if (originalModel.mSyncAccount != null) {      return false;    }  } else   if (!mSyncAccount.equals(originalModel.mSyncAccount)) {    return false;  }  if (mSyncAccountType == null) {    if (originalModel.mSyncAccountType != null) {      return false;    }  } else   if (!mSyncAccountType.equals(originalModel.mSyncAccountType)) {    return false;  }  if (mSyncId == null) {    if (originalModel.mSyncId != null) {      return false;    }  } else   if (!mSyncId.equals(originalModel.mSyncId)) {    return false;  }  if (mTimezone == null) {    if (originalModel.mTimezone != null) {      return false;    }  } else   if (!mTimezone.equals(originalModel.mTimezone)) {    return false;  }  if (mTimezone2 == null) {    if (originalModel.mTimezone2 != null) {      return false;    }  } else   if (!mTimezone2.equals(originalModel.mTimezone2)) {    return false;  }  if (mAvailability != originalModel.mAvailability) {    return false;  }  if (mUri == null) {    if (originalModel.mUri != null) {      return false;    }  } else   if (!mUri.equals(originalModel.mUri)) {    return false;  }  if (mAccessLevel != originalModel.mAccessLevel) {    return false;  }  if (mEventStatus != originalModel.mEventStatus) {    return false;  }  if (mEventColor != originalModel.mEventColor) {    return false;  }  if (mEventColorInitialized != originalModel.mEventColorInitialized) {    return false;  }  return true;}  }
class C{  public SQLInvalidAuthorizationSpecException(String reason,String sqlState,int vendorCode,Throwable cause){  super(reason,sqlState,vendorCode,cause);}  }
class C{  private void animateLocked(){  if (!mInitialized) {    return;  }  mCurrentTime=SystemClock.uptimeMillis();  mBulkUpdateParams=SET_ORIENTATION_CHANGE_COMPLETE;  boolean wasAnimating=mAnimating;  mAnimating=false;  if (WindowManagerService.DEBUG_WINDOW_TRACE) {    Slog.i(TAG,"!!! animate: entry time=" + mCurrentTime);  }  if (WindowManagerService.SHOW_TRANSACTIONS)   Slog.i(TAG,">>> OPEN TRANSACTION animateLocked");  SurfaceControl.openTransaction();  SurfaceControl.setAnimationTransaction();  try {    updateAppWindowsLocked();    final int numDisplays=mDisplayContentsAnimators.size();    for (int i=0; i < numDisplays; i++) {      final int displayId=mDisplayContentsAnimators.keyAt(i);      DisplayContentsAnimator displayAnimator=mDisplayContentsAnimators.valueAt(i);      final ScreenRotationAnimation screenRotationAnimation=displayAnimator.mScreenRotationAnimation;      if (screenRotationAnimation != null && screenRotationAnimation.isAnimating()) {        if (screenRotationAnimation.stepAnimationLocked(mCurrentTime)) {          mAnimating=true;        } else {          mBulkUpdateParams|=SET_UPDATE_ROTATION;          screenRotationAnimation.kill();          displayAnimator.mScreenRotationAnimation=null;        }      }      performAnimationsLocked(displayId);      final WindowList windows=mService.getWindowListLocked(displayId);      final int N=windows.size();      for (int j=0; j < N; j++) {        windows.get(j).mWinAnimator.prepareSurfaceLocked(true);      }    }    testTokenMayBeDrawnLocked();    for (int i=0; i < numDisplays; i++) {      final int displayId=mDisplayContentsAnimators.keyAt(i);      DisplayContentsAnimator displayAnimator=mDisplayContentsAnimators.valueAt(i);      final ScreenRotationAnimation screenRotationAnimation=displayAnimator.mScreenRotationAnimation;      if (screenRotationAnimation != null) {        screenRotationAnimation.updateSurfacesInTransaction();      }      final DimLayer dimAnimator=displayAnimator.mDimAnimator;      final WindowStateAnimator winAnimator=displayAnimator.mDimWinAnimator;      final int dimLayer;      final float dimAmount;      if (winAnimator == null) {        dimLayer=dimAnimator.getLayer();        dimAmount=0;      } else {        dimLayer=winAnimator.mAnimLayer - WindowManagerService.LAYER_OFFSET_DIM;        dimAmount=winAnimator.mWin.mAttrs.dimAmount;      }      final float targetAlpha=dimAnimator.getTargetAlpha();      if (targetAlpha != dimAmount) {        if (winAnimator == null) {          dimAnimator.hide(DEFAULT_DIM_DURATION);        } else {          long duration=(winAnimator.mAnimating && winAnimator.mAnimation != null) ? winAnimator.mAnimation.computeDurationHint() : DEFAULT_DIM_DURATION;          if (targetAlpha > dimAmount) {            duration=getDimBehindFadeDuration(duration);          }          dimAnimator.show(dimLayer,dimAmount,duration);        }      } else       if (dimAnimator.getLayer() != dimLayer) {        dimAnimator.setLayer(dimLayer);      }      if (dimAnimator.isAnimating()) {        if (!mService.okToDisplay()) {          dimAnimator.show();        } else {          mAnimating|=dimAnimator.stepAnimation();        }      }      if (mService.mDisplayMagnifier != null && displayId == Display.DEFAULT_DISPLAY) {        mService.mDisplayMagnifier.drawMagnifiedRegionBorderIfNeededLocked();      }    }    if (mService.mWatermark != null) {      mService.mWatermark.drawIfNeeded();    }  } catch (  RuntimeException e) {    Log.wtf(TAG,"Unhandled exception in Window Manager",e);  } finally {    SurfaceControl.closeTransaction();    if (WindowManagerService.SHOW_TRANSACTIONS)     Slog.i(TAG,"<<< CLOSE TRANSACTION animateLocked");  }  boolean hasPendingLayoutChanges=false;  final int numDisplays=mService.mDisplayContents.size();  for (int displayNdx=0; displayNdx < numDisplays; ++displayNdx) {    final DisplayContent displayContent=mService.mDisplayContents.valueAt(displayNdx);    final int pendingChanges=getPendingLayoutChanges(displayContent.getDisplayId());    if ((pendingChanges & WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER) != 0) {      mBulkUpdateParams|=SET_WALLPAPER_ACTION_PENDING;    }    if (pendingChanges != 0) {      hasPendingLayoutChanges=true;    }  }  boolean doRequest=false;  if (mBulkUpdateParams != 0) {    doRequest=mService.copyAnimToLayoutParamsLocked();  }  if (hasPendingLayoutChanges || doRequest) {    mService.requestTraversalLocked();  }  if (mAnimating) {    mService.scheduleAnimationLocked();  } else {    mPolicy.windowAnimationFinished();    if (wasAnimating) {      mService.requestTraversalLocked();    }  }  if (WindowManagerService.DEBUG_WINDOW_TRACE) {    Slog.i(TAG,"!!! animate: exit mAnimating=" + mAnimating + " mBulkUpdateParams="+ Integer.toHexString(mBulkUpdateParams)+ " mPendingLayoutChanges(DEFAULT_DISPLAY)="+ Integer.toHexString(getPendingLayoutChanges(Display.DEFAULT_DISPLAY)));  }}  }
class C{  public void dumpTags(XTIFFField[] gtfFields){  StringBuffer buf=new StringBuffer();  for (int i=0; i < gtfFields.length; i++) {    XTIFFField xtff=gtfFields[i];    int type=xtff.getType();    int tag=xtff.getTag();    buf.append("\n\tfield (").append(i).append(") - ").append(tag).append(" (").append(KeyRegistry.getKey(KeyRegistry.GEOKEY,tag)).append("): [");switch (type) {case XTIFFField.TIFF_ASCII:      String[] fieldStrings=xtff.getAsStrings();    for (int j=0; j < fieldStrings.length; j++) {      buf.append(fieldStrings[j]);      if (j < fieldStrings.length - 1) {        buf.append(", ");      }    }  buf.append("]");break;case XTIFFField.TIFF_DOUBLE:double[] fieldDoubles=xtff.getAsDoubles();for (int j=0; j < fieldDoubles.length; j++) {buf.append(fieldDoubles[j]);if (j < fieldDoubles.length - 1) {buf.append(", ");}}buf.append("]");break;case XTIFFField.TIFF_FLOAT:double[] fieldFloats=xtff.getAsDoubles();for (int j=0; j < fieldFloats.length; j++) {buf.append(fieldFloats[j]);if (j < fieldFloats.length - 1) {buf.append(", ");}}buf.append("]");break;case XTIFFField.TIFF_BYTE:case XTIFFField.TIFF_SBYTE:byte[] fieldBytes=xtff.getAsBytes();for (int j=0; j < fieldBytes.length; j++) {buf.append(fieldBytes[j]);if (j < fieldBytes.length - 1) {buf.append(", ");}}buf.append("]");break;case XTIFFField.TIFF_SSHORT:short[] fieldShorts=xtff.getAsShorts();for (int j=0; j < fieldShorts.length; j++) {buf.append(fieldShorts[j]);if (j < fieldShorts.length - 1) {buf.append(", ");}}buf.append("]");break;case XTIFFField.TIFF_LONG:case XTIFFField.TIFF_SHORT:long[] fieldLongs=xtff.getAsLongs();for (int j=0; j < fieldLongs.length; j++) {buf.append(fieldLongs[j]);if (j < fieldLongs.length - 1) {buf.append(", ");}}buf.append("]");break;case XTIFFField.TIFF_SLONG:int[] fieldInts=xtff.getAsInts();for (int j=0; j < fieldInts.length; j++) {buf.append(fieldInts[j]);if (j < fieldInts.length - 1) {buf.append(", ");}}buf.append("]");break;case XTIFFField.TIFF_RATIONAL:long[][] fieldRationals=xtff.getAsRationals();for (int k=0; k < fieldRationals.length; k++) {buf.append("\n\t");for (int j=0; j < fieldRationals[0].length; j++) {buf.append(fieldRationals[k][j]);if (j < fieldRationals[k].length - 1) {buf.append(", ");}}}buf.append("\n]");break;case XTIFFField.TIFF_SRATIONAL:int[][] fieldSRationals=xtff.getAsSRationals();for (int k=0; k < fieldSRationals.length; k++) {buf.append("\n\t");for (int j=0; j < fieldSRationals[0].length; j++) {buf.append(fieldSRationals[k][j]);if (j < fieldSRationals[k].length - 1) {buf.append(", ");}}}buf.append("\n]");break;default :buf.append("Can't handle ").append(type).append(" type.]");}}logger.info(buf.toString());}  }
class C{  public final int readInt() throws java.io.IOException {  return 0;}  }
class C{  public static void writeLines(File file,String encoding,Collection<?> lines,String lineEnding,boolean append) throws IOException {  FileOutputStream out=null;  try {    out=openOutputStream(file,append);    final BufferedOutputStream buffer=new BufferedOutputStream(out);    IOUtils.writeLines(lines,lineEnding,buffer,encoding);    buffer.flush();    out.close();  }  finally {    IOUtils.closeQuietly(out);  }}  }
class C{  private boolean isLabelExistsInStorage(AbstractStorageLabel<?> label,Set<AbstractStorageLabel<?>> labelsInStorages){  for (  AbstractStorageLabel<?> labelInStorage : labelsInStorages) {    if (ObjectUtils.equals(label,labelInStorage)) {      return true;    }  }  return false;}  }
class C{  public static void generateListOfModules(StringBuilder builder){  Iterator<String> entryIterator=EXTENSIONS_FQN.iterator();  while (entryIterator.hasNext()) {    String ginModuleFQN=entryIterator.next();    String hasComma=entryIterator.hasNext() ? "," : "";    builder.append(GeneratorUtils.TAB).append(ginModuleFQN).append(".class ").append(hasComma).append("\n");  }}  }
class C{  public WalletData addWalletFromFilename(String walletFilename) throws IOException {  WalletData perWalletModelDataToReturn=null;  if (multiBitService != null) {    perWalletModelDataToReturn=multiBitService.addWalletFromFilename(walletFilename);  }  return perWalletModelDataToReturn;}  }
class C{  public static String padOrTrim(String str,int num){  if (str == null)   str="null";  int leng=str.length();  if (leng < num) {    StringBuffer sb=new StringBuffer(str);    for (int i=0; i < num - leng; i++) {      sb.append(" ");    }    return sb.toString();  } else   if (leng > num) {    return str.substring(0,num);  } else {    return str;  }}  }
class C{  @Override public RuntimeAnnotationHandler scan(Class<?> clazz){  if (delegate != null) {    return delegate.scan(clazz);  }  return null;}  }
class C{  public void write(final String s) throws IOException {  final int length=s.length();  int lengthx3=3 * length;  if (lengthx3 >= BYTES_MAX - count) {    flushBuffer();    if (lengthx3 > BYTES_MAX) {      final int start=0;      int split=length / CHARS_MAX;      final int chunks;      if (length % CHARS_MAX > 0)       chunks=split + 1; else       chunks=split;      int end_chunk=0;      for (int chunk=1; chunk <= chunks; chunk++) {        int start_chunk=end_chunk;        end_chunk=start + (int)((((long)length) * chunk) / chunks);        s.getChars(start_chunk,end_chunk,m_inputChars,0);        int len_chunk=(end_chunk - start_chunk);        final char c=m_inputChars[len_chunk - 1];        if (c >= 0xD800 && c <= 0xDBFF) {          end_chunk--;          len_chunk--;          if (chunk == chunks) {          }        }        this.write(m_inputChars,0,len_chunk);      }      return;    }  }  s.getChars(0,length,m_inputChars,0);  final char[] chars=m_inputChars;  final int n=length;  final byte[] buf_loc=m_outputBytes;  int count_loc=count;  int i=0;{    char c;    for (; i < n && (c=chars[i]) < 0x80; i++)     buf_loc[count_loc++]=(byte)c;  }  for (; i < n; i++) {    final char c=chars[i];    if (c < 0x80)     buf_loc[count_loc++]=(byte)(c); else     if (c < 0x800) {      buf_loc[count_loc++]=(byte)(0xc0 + (c >> 6));      buf_loc[count_loc++]=(byte)(0x80 + (c & 0x3f));    } else     if (c >= 0xD800 && c <= 0xDBFF) {      char high, low;      high=c;      i++;      low=chars[i];      buf_loc[count_loc++]=(byte)(0xF0 | (((high + 0x40) >> 8) & 0xf0));      buf_loc[count_loc++]=(byte)(0x80 | (((high + 0x40) >> 2) & 0x3f));      buf_loc[count_loc++]=(byte)(0x80 | ((low >> 6) & 0x0f) + ((high << 4) & 0x30));      buf_loc[count_loc++]=(byte)(0x80 | (low & 0x3f));    } else {      buf_loc[count_loc++]=(byte)(0xe0 + (c >> 12));      buf_loc[count_loc++]=(byte)(0x80 + ((c >> 6) & 0x3f));      buf_loc[count_loc++]=(byte)(0x80 + (c & 0x3f));    }  }  count=count_loc;}  }
class C{  public void uninstallApp(){  appiumDriver.removeApp(appPackage);}  }
class C{  public CreateSessionResponse clone(){  CreateSessionResponse result=new CreateSessionResponse();  result.ResponseHeader=ResponseHeader == null ? null : ResponseHeader.clone();  result.SessionId=SessionId;  result.AuthenticationToken=AuthenticationToken;  result.RevisedSessionTimeout=RevisedSessionTimeout;  result.ServerNonce=ServerNonce;  result.ServerCertificate=ServerCertificate;  if (ServerEndpoints != null) {    result.ServerEndpoints=new EndpointDescription[ServerEndpoints.length];    for (int i=0; i < ServerEndpoints.length; i++)     result.ServerEndpoints[i]=ServerEndpoints[i].clone();  }  if (ServerSoftwareCertificates != null) {    result.ServerSoftwareCertificates=new SignedSoftwareCertificate[ServerSoftwareCertificates.length];    for (int i=0; i < ServerSoftwareCertificates.length; i++)     result.ServerSoftwareCertificates[i]=ServerSoftwareCertificates[i].clone();  }  result.ServerSignature=ServerSignature == null ? null : ServerSignature.clone();  result.MaxRequestMessageSize=MaxRequestMessageSize;  return result;}  }
class C{  public static void drawDebugInfo(Mat output,SceneAnalysis sceneAnalysis){  Transform.flip(output,Transform.FlipType.FLIP_ACROSS_Y);  Drawing.drawText(output,"Keypoints: " + sceneAnalysis.keypoints.rows(),new Point(0,8),1.0f,new ColorRGBA(255,255,255),Drawing.Anchor.BOTTOMLEFT_UNFLIPPED_Y);  Transform.flip(output,Transform.FlipType.FLIP_ACROSS_Y);}  }
class C{  protected AxisState drawCategoryLabels(Graphics2D g2,Rectangle2D dataArea,RectangleEdge edge,AxisState state,PlotRenderingInfo plotState){  return drawCategoryLabels(g2,dataArea,dataArea,edge,state,plotState);}  }
class C{  @RequestProcessing(value="/login",method=HTTPRequestMethod.POST) public void login(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws ServletException, IOException {  context.renderJSON().renderMsg(langPropsService.get("loginFailLabel"));  final JSONObject requestJSONObject=Requests.parseRequestJSONObject(request,response);  final String nameOrEmail=requestJSONObject.optString("nameOrEmail");  try {    JSONObject user=userQueryService.getUserByName(nameOrEmail);    if (null == user) {      user=userQueryService.getUserByEmail(nameOrEmail);    }    if (null == user) {      context.renderMsg(langPropsService.get("notFoundUserLabel"));      return;    }    if (UserExt.USER_STATUS_C_INVALID == user.optInt(UserExt.USER_STATUS)) {      userMgmtService.updateOnlineStatus(user.optString(Keys.OBJECT_ID),"",false);      context.renderMsg(langPropsService.get("userBlockLabel"));      return;    }    if (UserExt.USER_STATUS_C_NOT_VERIFIED == user.optInt(UserExt.USER_STATUS)) {      userMgmtService.updateOnlineStatus(user.optString(Keys.OBJECT_ID),"",false);      context.renderMsg(langPropsService.get("notVerifiedLabel"));      return;    }    if (UserExt.USER_STATUS_C_INVALID_LOGIN == user.optInt(UserExt.USER_STATUS)) {      userMgmtService.updateOnlineStatus(user.optString(Keys.OBJECT_ID),"",false);      context.renderMsg(langPropsService.get("invalidLoginLabel"));      return;    }    final String userPassword=user.optString(User.USER_PASSWORD);    if (userPassword.equals(requestJSONObject.optString(User.USER_PASSWORD))) {      Sessions.login(request,response,user);      final String ip=Requests.getRemoteAddr(request);      userMgmtService.updateOnlineStatus(user.optString(Keys.OBJECT_ID),ip,true);      context.renderMsg("").renderTrueResult();      return;    }    context.renderMsg(langPropsService.get("wrongPwdLabel"));  } catch (  final ServiceException e) {    context.renderMsg(langPropsService.get("loginFailLabel"));  }}  }
class C{  public static void writeBinaryFile(final File file,final byte[] data) throws IOException {  try (FileOutputStream fos=new FileOutputStream(file)){    fos.write(data);  } }  }
class C{  public CCachedIndegreeCriterium(final String operator,final int indegree){  m_operator=operator;  m_indegree=indegree;}  }
class C{  protected void updateEnvStateView(Environment env){}  }
class C{  @Override public void incomingObject(IAnalyzedInterval analyzedInterval) throws AdeException {  for (  IAnalyzedMessageSummary ams : analyzedInterval.getAnalyzedMessages()) {    final String id=ams.getMessageId();    MsgData data=m_msgData.get(id);    if (data == null) {      data=new MsgData();      m_msgData.put(id,data);    }    if (!isClustered(ams)) {      data.m_totalLogCounts+=Math.log(ams.getNumberOfAppearances());      data.m_intervalCount++;    }    data.m_allCount+=ams.getNumberOfAppearances();    data.m_intervalAllCount++;    if (data.m_maxNumAppearance < ams.getNumberOfAppearances()) {      data.m_maxNumAppearance=ams.getNumberOfAppearances();    }  }  ++m_totalIntervalCount;}  }
class C{  public SearchParser(final ClientReader clientReader){  super(clientReader,DebugCommandType.RESP_SEARCH_SUCCESS);}  }
class C{  @SuppressWarnings("unchecked") public static void clear(IgniteFileSystem igfs) throws Exception {  Field workerMapFld=IgfsImpl.class.getDeclaredField("workerMap");  workerMapFld.setAccessible(true);  Map<IgfsPath,IgfsFileWorkerBatch> workerMap=(Map<IgfsPath,IgfsFileWorkerBatch>)workerMapFld.get(igfs);  for (  Map.Entry<IgfsPath,IgfsFileWorkerBatch> entry : workerMap.entrySet()) {    entry.getValue().cancel();    try {      entry.getValue().await();    } catch (    IgniteCheckedException e) {      if (!(e instanceof IgfsFileWorkerBatchCancelledException))       throw e;    }  }  igfs.format();  int prevDifferentSize=Integer.MAX_VALUE;  int constCnt=0, totalCnt=0;  final int constThreshold=20;  final long sleepPeriod=500L;  final long totalThreshold=CACHE_EMPTY_TIMEOUT / sleepPeriod;  while (true) {    int metaSize=0;    for (    IgniteUuid metaId : getMetaCache(igfs).keySet()) {      if (!IgfsUtils.isRootOrTrashId(metaId))       metaSize++;    }    int dataSize=getDataCache(igfs).size();    int size=metaSize + dataSize;    if (size <= 2)     return;    X.println("Sum size: " + size);    if (size > prevDifferentSize) {      X.println("Summary cache size has grown unexpectedly: size=" + size + ", prevSize="+ prevDifferentSize);      break;    }    if (totalCnt > totalThreshold) {      X.println("Timeout exceeded.");      break;    }    if (size == prevDifferentSize) {      constCnt++;      if (constCnt == constThreshold) {        X.println("Summary cache size stays unchanged for too long: size=" + size);        break;      }    } else {      constCnt=0;      prevDifferentSize=size;    }    Thread.sleep(sleepPeriod);    totalCnt++;  }  dumpCache("MetaCache",getMetaCache(igfs));  dumpCache("DataCache",getDataCache(igfs));  fail("Caches are not empty.");}  }
class C{  public void clearUsuariosRol(String[] roles){  StringBuffer qual=new StringBuffer("WHERE ").append(DBUtils.generateInTokenField(CAMPO_ID_ROL,roles));  deleteVO(qual.toString(),TABLE_NAME);}  }
class C{  public void testQuotedIdRecognition() throws Exception {  if (!this.versionMeetsMinimum(4,1)) {    try {      this.stmt.executeUpdate("DROP TABLE IF EXISTS testQuotedId");      this.stmt.executeUpdate("CREATE TABLE testQuotedId (col1 VARCHAR(32))");      PreparedStatement pStmt=this.conn.prepareStatement("SELECT * FROM testQuotedId WHERE col1='ABC`DEF' or col1=?");      pStmt.setString(1,"foo");      pStmt.execute();      this.stmt.executeUpdate("DROP TABLE IF EXISTS testQuotedId2");      this.stmt.executeUpdate("CREATE TABLE testQuotedId2 (`Works?` INT)");      pStmt=this.conn.prepareStatement("INSERT INTO testQuotedId2 (`Works?`) VALUES (?)");      pStmt.setInt(1,1);      pStmt.executeUpdate();    }  finally {      this.stmt.executeUpdate("DROP TABLE IF EXISTS testQuotedId");      this.stmt.executeUpdate("DROP TABLE IF EXISTS testQuotedId2");    }  }}  }
class C{  public static TagLib combineTLDs(TagLib[] tlds){  TagLib tl=new TagLib();  if (ArrayUtil.isEmpty(tlds))   return tl;  setAttributes(tlds[0],tl);  for (int i=0; i < tlds.length; i++) {    copyTags(tlds[i],tl);  }  return tl;}  }
class C{  public static void cancel(Iterable<? extends GridWorker> ws){  if (ws != null)   for (  GridWorker w : ws)   w.cancel();}  }
class C{  public T show(Dialog dialog){  try {    if (dialog != null) {      dialog.show();      dialogs.put(dialog,null);    }  } catch (  Exception e) {  }  return self();}  }
class C{  public boolean equals(Object other){  if (!(other instanceof TDoubleFloatHashMap)) {    return false;  }  TDoubleFloatHashMap that=(TDoubleFloatHashMap)other;  if (that.size() != this.size()) {    return false;  }  return forEachEntry(new EqProcedure(that));}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  Node fcNode;  Node psNode;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(2);  fcNode=employeeNode.getFirstChild();  psNode=fcNode.getPreviousSibling();  assertNull("nodeGetPreviousSiblingNullAssert1",psNode);}  }
class C{  public void testExclude(){  AnnualCalendar annualCalendar=new AnnualCalendar();  Calendar day=Calendar.getInstance();  day.set(Calendar.MONTH,9);  day.set(Calendar.DAY_OF_MONTH,15);  annualCalendar.setDayExcluded(day,false);  assertTrue("The day 15 October is not expected to be excluded but it is",!annualCalendar.isDayExcluded(day));  day.set(Calendar.MONTH,9);  day.set(Calendar.DAY_OF_MONTH,15);  annualCalendar.setDayExcluded((Calendar)day.clone(),true);  day.set(Calendar.MONTH,10);  day.set(Calendar.DAY_OF_MONTH,12);  annualCalendar.setDayExcluded((Calendar)day.clone(),true);  day.set(Calendar.MONTH,8);  day.set(Calendar.DAY_OF_MONTH,1);  annualCalendar.setDayExcluded((Calendar)day.clone(),true);  assertTrue("The day 15 October is expected to be excluded but it is not",annualCalendar.isDayExcluded(day));  day.set(Calendar.MONTH,9);  day.set(Calendar.DAY_OF_MONTH,15);  annualCalendar.setDayExcluded((Calendar)day.clone(),false);  assertTrue("The day 15 October is not expected to be excluded but it is",!annualCalendar.isDayExcluded(day));}  }
class C{  private void append(String action,double... ds){  if (lastaction != action) {    buf.append(action);    lastaction=action;  }  for (  double d : ds) {    buf.append(SVGUtil.FMT.format(d));    buf.append(' ');  }}  }
class C{  public static double mercX(double lon){  return R_MAJOR * Math.toRadians(lon);}  }
class C{  public static void validateConcurrentAsyncEventQueueAttributes(String asyncChannelId,int maxQueueMemory,int batchSize,int batchTimeInterval,boolean isPersistent,String diskStoreName,boolean isDiskSynchronous,boolean batchConflationEnabled,int dispatcherThreads,OrderPolicy policy){  AsyncEventQueue theChannel=null;  Set<AsyncEventQueue> asyncEventChannels=cache.getAsyncEventQueues();  for (  AsyncEventQueue asyncChannel : asyncEventChannels) {    if (asyncChannelId.equals(asyncChannel.getId())) {      theChannel=asyncChannel;    }  }  GatewaySender theSender=((AsyncEventQueueImpl)theChannel).getSender();  assertEquals("maxQueueMemory",maxQueueMemory,theSender.getMaximumQueueMemory());  assertEquals("batchSize",batchSize,theSender.getBatchSize());  assertEquals("batchTimeInterval",batchTimeInterval,theSender.getBatchTimeInterval());  assertEquals("isPersistent",isPersistent,theSender.isPersistenceEnabled());  assertEquals("diskStoreName",diskStoreName,theSender.getDiskStoreName());  assertEquals("isDiskSynchronous",isDiskSynchronous,theSender.isDiskSynchronous());  assertEquals("batchConflation",batchConflationEnabled,theSender.isBatchConflationEnabled());  assertEquals("dispatcherThreads",dispatcherThreads,theSender.getDispatcherThreads());  assertEquals("orderPolicy",policy,theSender.getOrderPolicy());}  }
class C{  public boolean seek(long position){  try {    _file.seek(position);    return true;  } catch (  IOException e) {    return false;  }}  }
class C{  public void evictAll(){  List<RealConnection> evictedConnections=new ArrayList<>();synchronized (this) {    for (Iterator<RealConnection> i=connections.iterator(); i.hasNext(); ) {      RealConnection connection=i.next();      if (connection.allocations.isEmpty()) {        connection.noNewStreams=true;        evictedConnections.add(connection);        i.remove();      }    }  }  for (  RealConnection connection : evictedConnections) {    closeQuietly(connection.socket());  }}  }
class C{  public SimpleScheduleBuilder withIntervalInSeconds(int intervalInSeconds){  this.interval=intervalInSeconds * 1000L;  return this;}  }
class C{  protected double generateClassValue(Instances data) throws Exception {  double result=Double.NaN;switch (m_ClassType) {case Attribute.NUMERIC:    result=m_Random.nextFloat() * 0.25 + Math.abs(m_Random.nextInt()) % Math.max(2,m_NumNominal);  break;case Attribute.NOMINAL:result=Math.abs(m_Random.nextInt()) % data.numClasses();break;case Attribute.STRING:String str="";for (int n=0; n < m_Words.length; n++) {if ((n > 0) && (m_WordSeparators.length() != 0)) {str+=m_WordSeparators.charAt(m_Random.nextInt(m_WordSeparators.length()));}str+=m_Words[m_Random.nextInt(m_Words.length)];}result=data.classAttribute().addStringValue(str);break;case Attribute.DATE:result=data.classAttribute().parseDate((2000 + m_Random.nextInt(100)) + "-01-01");break;case Attribute.RELATIONAL:if (getRelationalClassFormat() != null) {result=data.classAttribute().addRelation(getRelationalClassFormat());} else {TestInstances dataset=new TestInstances();dataset.setNumNominal(getNumRelationalNominal());dataset.setNumNominalValues(getNumRelationalNominalValues());dataset.setNumNumeric(getNumRelationalNumeric());dataset.setNumString(getNumRelationalString());dataset.setNumDate(getNumRelationalDate());dataset.setNumInstances(getNumInstancesRelational());dataset.setClassType(Attribute.NOMINAL);Instances rel=new Instances(dataset.generate());int clsIndex=rel.classIndex();rel.setClassIndex(-1);rel.deleteAttributeAt(clsIndex);result=data.classAttribute().addRelation(rel);}break;}return result;}  }
class C{  public static String formatDate(Date date){  return formatDate(date,PATTERN_RFC1123);}  }
class C{  protected String validateProjection(AVList params){  Object proj=params.getValue(AVKey.PROJECTION_NAME);  if (AVKey.PROJECTION_UTM.equals(proj)) {    StringBuilder sb=new StringBuilder();    Object o=params.getValue(AVKey.PROJECTION_ZONE);    if (o == null)     sb.append(Logging.getMessage("generic.ZoneIsMissing")); else     if (!(o instanceof Integer) || ((Integer)o) < 1 || ((Integer)o) > 60)     sb.append(Logging.getMessage("generic.ZoneIsInvalid",o));    o=params.getValue(AVKey.PROJECTION_HEMISPHERE);    if (o == null)     sb.append(sb.length() > 0 ? ", " : "").append(Logging.getMessage("generic.HemisphereIsMissing")); else     if (!o.equals(AVKey.NORTH) && !o.equals(AVKey.SOUTH))     sb.append(sb.length() > 0 ? ", " : "").append(Logging.getMessage("generic.HemisphereIsInvalid",o));    return sb.length() > 0 ? sb.toString() : null;  } else {    return Logging.getMessage("generic.UnsupportedProjection",proj);  }}  }
class C{  public boolean isMarkedDeleted(){  return markedAsDeleted;}  }
class C{  public List<URI> filterReplicasAlreadyPartOfReplicationGroup(StorageSystem storage,String replicationGroupName,List<URI> replicas) throws Exception {  List<URI> replicasToAdd=new ArrayList<URI>();  replicasToAdd.addAll(replicas);  CIMObjectPath replicationGroupPath=_cimPath.getReplicationGroupPath(storage,ControllerUtils.extractGroupName(replicationGroupName));  List<URI> volumesInRG=findVolumesInReplicationGroup(storage,replicationGroupPath,replicas);  replicasToAdd.removeAll(volumesInRG);  return replicasToAdd;}  }
class C{  public static DeviceListDialogFragment newInstance(){  DeviceListDialogFragment fragment=new DeviceListDialogFragment();  return fragment;}  }
class C{  private String transformSessionId(final String sesId){  if (sesIdTransformer != null)   return sesIdTransformer.apply(sesId);  return sesId;}  }
class C{  @Override public void clear(){  Arrays.fill(elements,null);  size=0;}  }
class C{  public static void loadData() throws Exception {  logger.debug("IdmDataCreator.loadData called");  InputStream is=getInputStream(CONFIG_FILE);  Validate.notNull(is);  try {    ServerConfig.initialize(is);  }  finally {    is.close();  }}  }
class C{  public static StatisticalMoments[] newArray(int dimensionality){  StatisticalMoments[] arr=new StatisticalMoments[dimensionality];  for (int i=0; i < dimensionality; i++) {    arr[i]=new StatisticalMoments();  }  return arr;}  }
class C{  @Override protected EClass eStaticClass(){  return ExpressionsPackage.Literals.BITWISE_OR_EXPRESSION;}  }
class C{  public void testDelete() throws Exception {  create(igfs,paths(DIR,SUBDIR,SUBSUBDIR),paths(FILE));  igfs.delete(SUBDIR,true);  checkNotExist(igfs,igfsSecondary,SUBDIR,SUBSUBDIR,FILE);}  }
class C{  public static boolean isInCircleNormalized(Coordinate a,Coordinate b,Coordinate c,Coordinate p){  double adx=a.x - p.x;  double ady=a.y - p.y;  double bdx=b.x - p.x;  double bdy=b.y - p.y;  double cdx=c.x - p.x;  double cdy=c.y - p.y;  double abdet=adx * bdy - bdx * ady;  double bcdet=bdx * cdy - cdx * bdy;  double cadet=cdx * ady - adx * cdy;  double alift=adx * adx + ady * ady;  double blift=bdx * bdx + bdy * bdy;  double clift=cdx * cdx + cdy * cdy;  double disc=alift * bcdet + blift * cadet + clift * abdet;  return disc > 0;}  }
class C{  public void test_write$BII_6() throws Exception {  MessageDigest md=new MyMessageDigest1();  byte[] bytes=new byte[]{1,2};  DigestOutputStream dig=new DigestOutputStream(new ByteArrayOutputStream(),md);  try {    dig.write(null,-1,0);    fail("No expected IllegalArgumentException");  } catch (  IllegalArgumentException e) {  }  try {    dig.write(bytes,0,bytes.length + 1);    fail("No expected IllegalArgumentException");  } catch (  IllegalArgumentException e) {  }  try {    dig.write(bytes,-1,1);    fail("No expected IndexOutOfBoundsException");  } catch (  IndexOutOfBoundsException e) {  }  try {    dig.write(bytes,0,-1);    fail("No expected IndexOutOfBoundsException");  } catch (  IndexOutOfBoundsException e) {  }}  }
class C{  @Override public boolean matches(Object user){  if (!(user instanceof JsonUser)) {    return false;  }  return ((JsonUser)user).fullName.equals(mFullName);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.NUMERIC_LITERAL__VALUE:    setValue(VALUE_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  protected String createFactoryProject(UserProjectReference projectReference){  Project projectDescription=projectReference.getCodenvy().project().getProject(projectReference.getInnerReference().workspaceId(),projectReference.getInnerReference()).execute();  if (projectDescription == null) {    Ansi buffer=Ansi.ansi();    buffer.fg(RED);    buffer.a("No matching project for identifier '").a(parameter).a("'.");    buffer.reset();    System.out.println(buffer.toString());    return null;  }  List<String> vcsList=projectDescription.attributes().get(VCS_PROVIDER_NAME);  if (vcsList == null || vcsList.isEmpty()) {    projectReference.getCodenvy().git().init(projectReference.getInnerReference()).execute();  }  String content=projectReference.getCodenvy().factory().export(projectReference.getInnerReference()).execute();  return getEncodedFactory(content,projectReference.getCodenvy());}  }
class C{  public BaseEditPlugin(){  super(new ResourceLocator[]{});}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener l){  this.pcs.addPropertyChangeListener(l);}  }
class C{  public ClusterConfig readClusterConfigFromMinimesosFile(){  InputStream clusterConfigFile=MesosCluster.getInputStream(getClusterConfigPath());  if (clusterConfigFile != null) {    ConfigParser configParser=new ConfigParser();    try {      return configParser.parse(IOUtils.toString(clusterConfigFile));    } catch (    Exception e) {      String msg=String.format("Failed to load cluster configuration from %s: %s",getClusterConfigPath(),e.getMessage());      throw new MinimesosException(msg,e);    }  }  throw new MinimesosException("No minimesosFile found in current directory. Please generate one with 'minimesos init'");}  }
class C{  public static String extractEmailAddress(String args,int offset){  String address=args.substring(offset).trim();  if (address.indexOf('<') == 0) {    address=address.substring(1,address.indexOf('>'));    return address.trim();  }  int nextarg=address.indexOf(" ");  if (nextarg > -1) {    address=address.substring(0,nextarg).trim();  }  return address;}  }
class C{  public void init(){  numLabels=model.data.numLabels();  numFeatures=model.feaGen.numFeatures();  if (numLabels <= 0 || numFeatures <= 0) {    System.out.println("Invalid number of labels or features");    return;  }  lambda=model.lambda;  tempLambda=new double[numFeatures];  gradLogLi=new double[numFeatures];  diag=new double[numFeatures];  temp=new double[numLabels];  int wsSize=numFeatures * (2 * model.option.mForHessian + 1) + 2 * model.option.mForHessian;  ws=new double[wsSize];  iprint=new int[2];  iflag=new int[1];}  }
class C{  public SipTransactionContext sendSipMessageAndWait(SipMessage message,INotifySipProvisionalResponse callbackSipProvisionalResponse) throws PayloadException, NetworkException {  try {    if (message instanceof SipRequest) {      SipRequest req=(SipRequest)message;      ClientTransaction transaction=(ClientTransaction)req.getStackTransaction();      if (transaction == null) {        transaction=createNewTransaction(req);        req.setStackTransaction(transaction);      }      SipTransactionContext ctx=new SipTransactionContext(transaction,callbackSipProvisionalResponse);      String id=SipTransactionContext.getTransactionContextId(req);      mTransactions.put(id,ctx);      if (sLogger.isActivated()) {        sLogger.debug("Create a transaction context ".concat(id));      }      if (sLogger.isActivated()) {        sLogger.debug(">>> Send SIP ".concat(req.getMethod()));      }      if (mSipTraceEnabled) {        System.out.println(">>> " + req.getStackMessage().toString());        System.out.println(TRACE_SEPARATOR);      }      transaction.sendRequest();      return ctx;    }    SipResponse resp=(SipResponse)message;    ServerTransaction transaction=(ServerTransaction)resp.getStackTransaction();    if (transaction == null) {      throw new NetworkException("No transaction exist for " + resp.getCallId() + ": the response can't be sent!");    }    SipTransactionContext ctx=new SipTransactionContext(transaction);    String id=SipTransactionContext.getTransactionContextId(resp);    mTransactions.put(id,ctx);    if (sLogger.isActivated()) {      sLogger.debug("Create a transaction context ".concat(id));    }    if (sLogger.isActivated()) {      sLogger.debug(">>> Send SIP " + resp.getStatusCode() + " response");    }    if (mSipTraceEnabled) {      System.out.println(">>> " + resp.getStackMessage().toString());      System.out.println(TRACE_SEPARATOR);    }    transaction.sendResponse(resp.getStackMessage());    return ctx;  } catch (  ParseException e) {    throw new PayloadException("Unable to instantiate SIP transaction!",e);  }catch (  SipException e) {    throw new NetworkException("Can't send SIP message!",e);  }}  }
class C{  public static int truncate(int tc){switch (tc) {case BYTEcode:case SHORTcode:case CHARcode:    return INTcode;default :  return tc;}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:37.047 -0500",hash_original_method="0F3E63187E008FDE1692E75AF7E8484F",hash_generated_method="1BDE1F94F0E2664277F773022732A7F6") @Override protected void dispatchSaveInstanceState(SparseArray<Parcelable> container){  dispatchFreezeSelfOnly(container);}  }
class C{  public Matrix4x3f invert(){  return invert(this);}  }
class C{  private void resetTextAnimation(View v){  ViewHelper.setAlpha(v,!mIsMenuOpen ? 0 : 1);  ViewHelper.setTranslationX(v,!mIsMenuOpen ? mMenuItemSize : 0);}  }
class C{  public ClassNotFound(Identifier nm){  super(nm.toString());  name=nm;}  }
class C{  public void run(){  try {    while (datagramConnection != null) {      byte[] data=datagramConnection.receive();      Packet packet=new Packet();      packet.data=data;      packet.length=data.length;      packet.offset=0;      packet.receivedAt=System.currentTimeMillis();      handlePacket(packet);    }  } catch (  SocketTimeoutException ex) {    notifyRtcpListenersOfTimeout();  }catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  private boolean verifyDS() throws LoggingException {  if (this.ds == null)   ds=TransactionManagerFactory.getTransactionManager();  return true;}  }
class C{  String skeletonClassName(){  return skeletonClassName;}  }
class C{  public static byte[] decodeFromFile(String filename) throws java.io.IOException {  byte[] decodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=null;    int length=0;    int numBytes=0;    if (file.length() > Integer.MAX_VALUE) {      throw new java.io.IOException("File is too big for this convenience method (" + file.length() + " bytes).");    }    buffer=new byte[(int)file.length()];    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.DECODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    decodedData=new byte[length];    System.arraycopy(buffer,0,decodedData,0,length);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return decodedData;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:36.579 -0500",hash_original_method="DB86120AE2172E8F10EBF4BE032C0B65",hash_generated_method="EC6E53241FB95C4510E2107EBE0789CC") public Object clone(){  SIPResponse retval=(SIPResponse)super.clone();  if (this.statusLine != null)   retval.statusLine=(StatusLine)this.statusLine.clone();  return retval;}  }
class C{  private void shutdown(){  try {    if (!runningFlag.get()) {      while (!hold.isEmpty()) {        PartitionReader p=hold.pollFirst();        if (p == null) {          break;        } else {          finish(p);        }      }      while (!m_queue.isEmpty()) {        PartitionReader p=m_queue.poll();        if (p == null) {          break;        } else {          finish(p);        }      }      if (LOGGER.isInfoEnabled())       LOGGER.info(taskId + " is gracefully shutdown!");    } else {      LOGGER.error(taskId + " try to gracefully shutdown but runningFlag is true.");    }  } catch (  Throwable e) {    LOGGER.error("Error occurs when gracefully shutdown kafkaConsumer thread " + taskId,e);  }}  }
class C{  public static boolean equal(Object a,Object b){  return a == b || (a != null && a.equals(b));}  }
class C{  public void goToNextColor(){  mColorIndex=(mColorIndex + 1) % (mColors.length);}  }
class C{  private boolean[] ancestorsOfEvidence(Evidence evidence){  List<Node> variablesInEvidence=evidence.getVariablesInEvidence();  List<Node> nodesInEvidence=new LinkedList<>();  for (  Node _node : variablesInEvidence) {    String nodeName=_node.getName();    nodesInEvidence.add(bayesIm.getBayesPm().getNode(nodeName));  }  List<Node> nodesInGraph=getBayesIm().getDag().getNodes();  boolean[] ancestorsOfEvidence=new boolean[getBayesIm().getNumNodes()];  for (int i=0; i < nodesInGraph.size(); i++) {    for (    Node node2 : nodesInEvidence) {      Node node1=nodesInGraph.get(i);      if (getBayesIm().getDag().isAncestorOf(node1,node2) || getBayesIm().getDag().isChildOf(node1,node2)) {        ancestorsOfEvidence[i]=true;      }    }  }  return ancestorsOfEvidence;}  }
class C{  private Map createLibrariesMap(ServletContext context){  HashMap library_map=new HashMap();  for (Enumeration en=context.getInitParameterNames(); en.hasMoreElements(); ) {    String s=(String)en.nextElement();    if (s.startsWith(LIBRARY_PREFIX)) {      String libname=s.substring(LIBRARY_PREFIX.length());      String path=getPath(context,context.getInitParameter(s));      if (path != null) {        library_map.put(libname,path);      } else {        context.log("Excluding " + libname + " from database list, can't resolve path");      }    }  }  return Collections.unmodifiableMap(library_map);}  }
class C{  public DocIndexingStrategy docindexing(){  return docindexing;}  }
class C{  public INode copy(){  return new OnePuzzle(s);}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(suite());}  }
class C{  public static boolean isStateCode(String s){  if (isEmpty(s))   return defaultEmptyOK;  return ((USStateCodes.indexOf(s) != -1) && (s.indexOf(USStateCodeDelimiter) == -1));}  }
class C{  private RealMatrix newRotationMatrix(int i,int j,double theta){  RealMatrix rotation=newIdentityMatrix();  rotation.setEntry(i,i,Math.cos(theta));  rotation.setEntry(i,j,-Math.sin(theta));  rotation.setEntry(j,i,Math.sin(theta));  rotation.setEntry(j,j,Math.cos(theta));  return rotation;}  }
class C{  public DebugExceptionWrapper(final Exception exception){  super(exception);  this.exception=exception;}  }
class C{  @Override public void connectionNotification(String eventName,Object source){  if (connectionAllowed(eventName)) {    m_listenee=source;  }}  }
class C{  public void addSegment(short startCode,short endCode,char[] map){  if (map.length != (endCode - startCode) + 1) {    throw new IllegalArgumentException("Wrong number of entries in map");  }  Segment s=new Segment(startCode,endCode,true);  segments.remove(s);  segments.put(s,map);}  }
class C{  public void testMoveFileSourceParentRootDestinationMissingPartially() throws Exception {  IgfsPath file=new IgfsPath("/" + FILE.name());  create(igfsSecondary,paths(DIR_NEW,SUBDIR_NEW),paths(file));  create(igfs,paths(DIR_NEW),null);  igfs.rename(file,SUBDIR_NEW);  checkExist(igfs,SUBDIR_NEW);  checkExist(igfs,igfsSecondary,new IgfsPath(SUBDIR_NEW,FILE.name()));  checkNotExist(igfs,igfsSecondary,file);}  }
class C{  public void timerPing(){  reloadData();  if (isVisible()) {    doPrepare();  }}  }
class C{  public void removeDataStoreListener(DataStoreListener l){  listenerList.remove(l);}  }
class C{  public static String buildCpimMessageWithImdn(String from,String to,String messageId,String content,String contentType,long timestampSent){  return CpimMessage.HEADER_FROM + ": " + formatCpimSipUri(from)+ CRLF+ CpimMessage.HEADER_TO+ ": "+ formatCpimSipUri(to)+ CRLF+ CpimMessage.HEADER_NS+ ": "+ ImdnDocument.IMDN_NAMESPACE+ CRLF+ ImdnUtils.HEADER_IMDN_MSG_ID+ ": "+ messageId+ CRLF+ CpimMessage.HEADER_DATETIME+ ": "+ DateUtils.encodeDate(timestampSent)+ CRLF+ ImdnUtils.HEADER_IMDN_DISPO_NOTIF+ ": "+ ImdnDocument.POSITIVE_DELIVERY+ ", "+ ImdnDocument.DISPLAY+ CRLF+ CRLF+ CpimMessage.HEADER_CONTENT_TYPE+ ": "+ contentType+ ";charset="+ UTF8_STR+ CRLF+ CpimMessage.HEADER_CONTENT_LENGTH+ ": "+ content.getBytes(UTF8).length+ CRLF+ CRLF+ content;}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  public static String uNibble(int v){  char[] result=new char[1];  result[0]=Character.forDigit(v & 0x0f,16);  return new String(result);}  }
class C{  public void begin(String namespace,String name,Attributes attributes) throws Exception {  assert digester.peek() instanceof FacesConfigBean : "Assertion Error: Expected FacesConfigBean to be at the top of the stack";  if (digester.getLogger().isDebugEnabled()) {    digester.getLogger().debug("[ConverterRule]{" + digester.getMatch() + "} Push "+ CLASS_NAME);  }  Class clazz=digester.getClassLoader().loadClass(CLASS_NAME);  ConverterBean cb=(ConverterBean)clazz.newInstance();  digester.push(cb);}  }
class C{  void seenJSR(){  noJSR=false;}  }
class C{  public Tile(int x,int y,int zoom){  loaded=false;  this.zoom=zoom;  this.x=x;  this.y=y;}  }
class C{  @Override public void acceptResult(ResultProducer rp,Object[] key,Object[] result) throws Exception {  if (m_ResultProducer != rp) {    throw new Error("Unrecognized ResultProducer sending results!!");  }  boolean isRequiredByListener=m_ResultListener.isResultRequired(this,key);  boolean isRequiredByDatabase=super.isResultRequired(rp,key);  if (isRequiredByDatabase) {    if (result != null) {      super.acceptResult(rp,key,result);    }  }  if (isRequiredByListener) {    m_ResultListener.acceptResult(this,key,result);  }}  }
class C{  public int last(){  return getPosition() + size() - 1;}  }
class C{  public String copy(){  assert textMarkPos >= 0 && textPos > textMarkPos : "copy(): negative length copy textMarkPos =" + textMarkPos + " textPos = "+ textPos+ "text.length = "+ text.length();  return text.substring(textMarkPos,textPos);}  }
class C{  public static String decode(String string){  CharacterReferenceEx key;  int amp;  int index;  int length;  StringBuffer buffer;  char character;  int number;  int radix;  int i;  int semi;  boolean done;  CharacterReference item;  String ret;  if (-1 == (amp=string.indexOf('&')))   ret=string; else {    key=null;    index=0;    length=string.length();    buffer=new StringBuffer(length);    do {      while (index < amp)       buffer.append(string.charAt(index++));      index++;      if (index < length) {        character=string.charAt(index);        if ('#' == character) {          index++;          number=0;          radix=0;          i=index;          done=false;          while ((i < length) && !done) {            character=string.charAt(i);switch (character) {case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':              if (0 == radix)               radix=10;            number=number * radix + (character - '0');          break;case 'A':case 'B':case 'C':case 'D':case 'E':case 'F':        if (16 == radix)         number=number * radix + (character - 'A' + 10); else         done=true;      break;case 'a':case 'b':case 'c':case 'd':case 'e':case 'f':    if (16 == radix)     number=number * radix + (character - 'a' + 10); else     done=true;  break;case 'x':case 'X':if (0 == radix) radix=16; else done=true;break;case ';':done=true;i++;break;default :done=true;break;}if (!done) i++;}if (0 != number) {buffer.append((char)number);index=i;amp=index;}} else if (Character.isLetter(character)) {i=index + 1;done=false;semi=length;while ((i < length) && !done) {character=string.charAt(i);if (';' == character) {done=true;semi=i;i++;} else if (Character.isLetterOrDigit(character)) i++; else {done=true;semi=i;}}if (null == key) key=new CharacterReferenceEx();key.setKernel(string);key.setStart(index);key.setEnd(semi);item=lookup(key);if (null != item) {buffer.append((char)item.getCharacter());index+=item.getKernel().length();if ((index < length) && (';' == string.charAt(index))) index++;amp=index;}} else {}}while (amp < index) buffer.append(string.charAt(amp++));} while ((index < length) && (-1 != (amp=string.indexOf('&',index))));while (index < length) buffer.append(string.charAt(index++));ret=buffer.toString();}return (ret);}  }
class C{  protected void appendNullText(final StringBuffer buffer,final String fieldName){  buffer.append(nullText);}  }
class C{  public BehaviorHandlerFactory(String behaviorId){  this.behaviorId=behaviorId;}  }
class C{  public AbTask(){  super();}  }
class C{  public boolean isOrdered(){  return ordered;}  }
class C{  @DELETE @Path("/{groupName}/members") @RequiresRole(role=Role.ADMINISTRATOR) public void removeMembers(@PathParam("groupName") String groupName,@QueryParam("members") List<String> members,@QueryParam("type") String memberType){  PrincipalId id=PrincipalUtil.fromName(groupName);  MemberType type=getPrincipalType(memberType);  Collection<PrincipalId> memberPrincipals=PrincipalUtil.fromNames(members);  Validate.notNull(type,sm.getString("valid.invalid.type","type",Arrays.toString(MemberType.values())));  Validate.notEqual(type,MemberType.ALL,sm.getString("valid.not.equal","type",MemberType.ALL,EnumSet.of(MemberType.USER,MemberType.GROUP,MemberType.SOLUTIONUSER)));  if (type == MemberType.SOLUTIONUSER) {    throw new NotImplementedError("Removing solution users from a group is not yet implemented");  }  try {    for (    PrincipalId memberId : memberPrincipals) {      getIDMClient().removeFromLocalGroup(tenant,memberId,id.getName());    }  } catch (  InvalidPrincipalException|NoSuchTenantException e) {    log.debug("Failed to add groups to group '{}' in tenant '{}'",groupName,tenant,e);    throw new NotFoundException(sm.getString("ec.404"),e);  }catch (  InvalidArgumentException e) {    log.warn("Failed to add groups to group '{}' in tenant '{}' due to a client side error",groupName,tenant,e);    throw new BadRequestException(sm.getString("res.group.add.groups.failed",groupName,tenant),e);  }catch (  Exception e) {    log.error("Failed to add groups to group '{}' in tenant '{}' due to a server side error",groupName,tenant,e);    throw new InternalServerErrorException(sm.getString("ec.500"),e);  }}  }
class C{  public void invalidate(){  size=-1;}  }
class C{  public Builder httpProvider(final IHttpProvider httpProvider){  mClient.setHttpProvider(httpProvider);  return this;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_CONSTANT_DECLARATION_1__LIST_1:    return list_1 != LIST_1_EDEFAULT;case UmplePackage.ANONYMOUS_CONSTANT_DECLARATION_1__NAME_1:  return NAME_1_EDEFAULT == null ? name_1 != null : !NAME_1_EDEFAULT.equals(name_1);case UmplePackage.ANONYMOUS_CONSTANT_DECLARATION_1__TYPE_1:return TYPE_1_EDEFAULT == null ? type_1 != null : !TYPE_1_EDEFAULT.equals(type_1);}return super.eIsSet(featureID);}  }
class C{  public SafeAsyncTask(){  this.executor=DEFAULT_EXECUTOR;}  }
class C{  void replaceNode(Node existing,Node newNode){  int idx;  while ((idx=nodes.indexOf(existing)) != -1) {    nodes.set(idx,newNode);    if (idx > 0 && nodes.get(idx - 1).equals(newNode)) {      Log.i(DEBUG_TAG,"replaceNode node would duplicate preceeding node");      nodes.remove(idx);    }    if (idx >= 0 && idx < nodes.size() - 1 && nodes.get(idx + 1).equals(newNode)) {      Log.i(DEBUG_TAG,"replaceNode node would duplicate following node");      nodes.remove(idx);    }  }}  }
class C{  public static boolean addScrapboxDrop(float aChance,ItemStack aOutput){  aOutput=GT_OreDictUnificator.get(true,aOutput);  if (aOutput == null || aChance <= 0)   return false;  aOutput.stackSize=1;  if (GT_Config.troll && !GT_Utility.areStacksEqual(aOutput,new ItemStack(Items.wooden_hoe,1,0)))   return false;  aChance=(float)GregTech_API.sRecipeFile.get(ConfigCategories.Machines.scrapboxdrops,aOutput,aChance);  if (aChance <= 0)   return false;  try {    GT_Utility.callMethod(GT_Utility.getFieldContent("ic2.api.recipe.Recipes","scrapboxDrops",true,true),"addDrop",true,false,true,GT_Utility.copy(aOutput),aChance);    GT_Utility.callMethod(GT_Utility.getFieldContent("ic2.api.recipe.Recipes","scrapboxDrops",true,true),"addRecipe",true,true,false,GT_Utility.copy(aOutput),aChance);  } catch (  Throwable e) {  }  return true;}  }
class C{  public void testValueChangeActionListener() throws Exception {  HtmlPage page=getPage("/faces/composite/valueChangeListenerSetPropertyActionListener01.xhtml");  HtmlInput input=getInputContainingGivenId(page,"form:composite:value");  input.setValueAttribute("Cause A ValueChangeEvent");  HtmlSubmitInput button=(HtmlSubmitInput)getInputContainingGivenId(page,"form:composite:submit");  page=button.click();  String pageText=page.asText();  assertTrue(-1 != pageText.indexOf("ValueChangeSetPropertyActionListenerBean.processValueChange called"));  String searchString="Property set by setPropertyActionListener:";  int searchStringLength=searchString.length(), i=0, j=0;  long lesser, greater;  assertTrue(-1 != (i=pageText.indexOf(searchString)));  i+=searchStringLength;  assertTrue(-1 != (j=pageText.indexOf(";",i)));  lesser=Long.valueOf(pageText.substring(i,j));  searchString="System.currentTimeMillis():";  searchStringLength=searchString.length();  assertTrue(-1 != (i=pageText.indexOf(searchString)));  i+=searchStringLength;  assertTrue(-1 != (j=pageText.indexOf(";",i)));  greater=Long.valueOf(pageText.substring(i,j));  assertTrue(lesser < greater);}  }
class C{  private Node<Key> insert(Node<Key> x,Node<Key> head){  if (head == null) {    x.prev=x;    x.next=x;  } else {    head.prev.next=x;    x.next=head;    x.prev=head.prev;    head.prev=x;  }  return x;}  }
class C{  public UserSipData openSIPgUserCreateUser(String first_name,String middle_i,String last_name,String email,String login,String password){  try {    Configuration sip_openxg_enable=cfgManagement.getConfKey(3L,"sip.openxg.enable");    if (sip_openxg_enable == null || !sip_openxg_enable.getConf_value().equals("yes")) {      log.debug("SIP is disabled");      return null;    }    Configuration openxg_client_id=cfgManagement.getConfKey(3L,"openxg.client.id");    Configuration openxg_client_secret=cfgManagement.getConfKey(3L,"openxg.client.secret");    if (openxg_client_id == null || openxg_client_secret == null) {      throw new Exception("openxg.client.id or openxg.client.secret missing in Configuration table");    }    String client_id=openxg_client_id.getConf_value();    String client_secret=openxg_client_secret.getConf_value();    Configuration openxg_client_domain=cfgManagement.getConfKey(3L,"openxg.client.domain");    if (openxg_client_domain == null) {      throw new Exception("openxg.client.domain missing in Configuration table");    }    String domain=openxg_client_domain.getConf_value();    Configuration openxg_community_code=cfgManagement.getConfKey(3L,"openxg.community.code");    if (openxg_community_code == null) {      throw new Exception("openxg.community.code missing in Configuration table");    }    String community_code=openxg_community_code.getConf_value();    Configuration openxg_language_code=cfgManagement.getConfKey(3L,"openxg.language.code");    if (openxg_language_code == null) {      throw new Exception("openxg.language.code missing in Configuration table");    }    String language_code=openxg_language_code.getConf_value();    Configuration openxg_adminid=cfgManagement.getConfKey(3L,"openxg.adminid");    if (openxg_adminid == null) {      throw new Exception("openxg.adminid missing in Configuration table");    }    String adminid=openxg_adminid.getConf_value();    Configuration sip_language_phonecode=cfgManagement.getConfKey(3L,"sip.language.phonecode");    if (sip_language_phonecode == null) {      throw new Exception("No sip.language.phonecode set in Configuration");    }    Configuration sip_phonerange_start=cfgManagement.getConfKey(3L,"sip.phonerange.start");    Configuration sip_phonerange=cfgManagement.getConfKey(3L,"sip.phonerange");    Configuration sip_phonerange_currentindex=cfgManagement.getConfKey(3L,"sip.phonerange.currentindex");    if (sip_phonerange_start == null || sip_phonerange == null || sip_phonerange_currentindex == null) {      throw new Exception("sip.phonerange.start, sip.phonerange or sip.phonerange.currentindex missing in Configuration table");    }    String userid=login;    String digest=this.digest_calculate(new Object[]{client_id,userid,domain,first_name,middle_i,last_name,password,community_code,language_code,email,adminid,client_secret});    String stringToPost=OpenXGCustomXMLMarshall.getInstance().openSIPgUserCreate(client_id,digest,userid,domain,first_name,middle_i,last_name,password,community_code,language_code,email,adminid);    OpenXGReturnObject openXGReturnObject=this.openSIPgPost(stringToPost);    openXGReturnObject.setMethodName("OpenSIPg.UserCreate");    openXGReturnObjectDao.addOpenXGReturnObject(openXGReturnObject);    log.debug(" Status_code " + openXGReturnObject.getStatus_code());    log.debug(" Status_string " + openXGReturnObject.getStatus_string());    if (openXGReturnObject.getStatus_code().equals("200")) {      String digestURI=this.digest_calculate(new Object[]{client_id,userid,domain,adminid,client_secret});      String stringToPostURI=OpenXGCustomXMLMarshall.getInstance().openSIPgURIUserIDAdd(client_id,digestURI,userid,domain,adminid);      OpenXGReturnObject openXGReturnObjectURI=this.openSIPgPost(stringToPostURI);      openXGReturnObjectURI.setMethodName("OpenSIPg.URIUserIDAdd");      openXGReturnObjectDao.addOpenXGReturnObject(openXGReturnObjectURI);      log.debug(" openXGReturnObjectURI Status Code " + openXGReturnObjectURI.getStatus_code());      log.debug(" openXGReturnObjectURI Status String " + openXGReturnObjectURI.getStatus_string());      UserSipData userSipData=new UserSipData();      userSipData.setUsername(userid);      userSipData.setUserpass(password);      userSipData.setAuthId(userid);      return userSipData;    } else {      throw new Exception("Could not add SIP User - Gateway response Error Code: " + openXGReturnObject.getStatus_code() + " Message: "+ openXGReturnObject.getStatus_string());    }  } catch (  Exception err) {    log.error("[openSIPgUserCreateTest]",err);  }  return null;}  }
class C{  private SnmpVarBind findVarBind(SnmpVarBind element,SnmpVarBind result){  if (element == null)   return null;  if (result.oid == null) {    return element;  }  if (element.value == SnmpVarBind.endOfMibView)   return result;  if (result.value == SnmpVarBind.endOfMibView)   return element;  final SnmpValue val=result.value;  int comp=element.oid.compareTo(result.oid);  if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {    SNMP_ADAPTOR_LOGGER.logp(Level.FINER,SnmpSubRequestHandler.class.getName(),"findVarBind","Comparing OID element : " + element.oid + " with result : "+ result.oid);    SNMP_ADAPTOR_LOGGER.logp(Level.FINER,SnmpSubRequestHandler.class.getName(),"findVarBind","Values element : " + element.value + " result : "+ result.value);  }  if (comp < 0) {    return element;  } else {    if (comp == 0) {      if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {        SNMP_ADAPTOR_LOGGER.logp(Level.FINER,SnmpSubRequestHandler.class.getName(),"findVarBind"," oid overlapping. Oid : " + element.oid + "value :"+ element.value);        SNMP_ADAPTOR_LOGGER.logp(Level.FINER,SnmpSubRequestHandler.class.getName(),"findVarBind","Already present varBind : " + result);      }      SnmpOid oid=result.oid;      SnmpMibAgent deeperAgent=server.getAgentMib(oid);      if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {        SNMP_ADAPTOR_LOGGER.logp(Level.FINER,SnmpSubRequestHandler.class.getName(),"findVarBind","Deeper agent : " + deeperAgent);      }      if (deeperAgent == agent) {        if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {          SNMP_ADAPTOR_LOGGER.logp(Level.FINER,SnmpSubRequestHandler.class.getName(),"findVarBind","The current agent is the deeper one. Update the value with the current one");        }        return element;      } else {        if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {          SNMP_ADAPTOR_LOGGER.logp(Level.FINER,SnmpSubRequestHandler.class.getName(),"findVarBind","The current agent is not the deeper one. return the previous one.");        }        return result;      }    } else {      if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {        SNMP_ADAPTOR_LOGGER.logp(Level.FINER,SnmpSubRequestHandler.class.getName(),"findVarBind","The right varBind is the already present one");      }      return result;    }  }}  }
class C{  public String globalInfo(){  return "Generates the matrix in CSV ('comma-separated values') format.";}  }
class C{  @Override public String format(DateTimeFormatter formatter){  Objects.requireNonNull(formatter,"formatter");  return formatter.format(this);}  }
class C{  private Vision(){  table=NetworkTable.getTable("GRIP/Courtyard");}  }
class C{  public void copyTracksLocation(Location location){  for (  Track track : getTrackList()) {    if (location.getTrackByName(track.getName(),null) != null) {      continue;    }    track.copyTrack(track.getName(),location);  }}  }
class C{  public void close(){  Connection[] connections=this.connections;  for (int i=0; i < connections.length; i++)   connections[i].removeListener(invokeListener);synchronized (instancesLock) {    ArrayList<Connection> temp=new ArrayList(Arrays.asList(instances));    temp.remove(this);    instances=temp.toArray(new ObjectSpace[temp.size()]);  }  if (TRACE)   trace("kryonet","Closed ObjectSpace.");}  }
class C{  private void processAnOperator(Stack<Integer> operandStack,Stack<Character> operatorStack){  char op=operatorStack.pop();  int op1=operandStack.pop();  int op2=operandStack.pop();  if (op == '+')   operandStack.push(op2 + op1); else   if (op == '-')   operandStack.push(op2 - op1); else   if (op == '*')   operandStack.push(op2 * op1); else   if (op == '/')   operandStack.push(op2 / op1);}  }
class C{  public LiteralElementAttributes(){}  }
class C{  public boolean useDaylightTime(){  return useDaylight;}  }
class C{  public static void main(String[] args){  int port=0;  if (args.length == 1) {    try {      port=Integer.parseInt(args[0]);    } catch (    NumberFormatException e) {      port=0;    }  }  try {    HttpServer server=new HttpServer(port);    server.addHttpRequestListener(new SeparatorListener());    server.addHttpRequestListener(new SieveListener());    server.addHttpRequestListener(new SeparatorListener());    server.addHttpRequestListener(new ReverseListener());    server.addHttpRequestListener(new SeparatorListener());    server.start();    System.out.println("Server listening on port " + server.getPort());  } catch (  IOException e) {    System.err.println("Unable to start http server:");    e.printStackTrace();  }}  }
class C{  public int difference(String s1,String s2) throws EncoderException {  return SoundexUtils.difference(this,s1,s2);}  }
class C{  public static String overlayString(String text,String overlay,int start,int end){  return new StringBuilder(start + overlay.length() + text.length() - end + 1).append(text.substring(0,start)).append(overlay).append(text.substring(end)).toString();}  }
class C{  public NetworkBuilder<N,E> expectedEdgeCount(int expectedEdgeCount){  checkArgument(expectedEdgeCount >= 0,"The expected number of edges can't be negative: %s",expectedEdgeCount);  this.expectedEdgeCount=Optional.of(expectedEdgeCount);  return this;}  }
class C{  private void tryScrollBackToTopAbortRefresh(){  tryScrollBackToTop();}  }
class C{  public void addCertificateAuthorities(Certificate[] certificateAuthorities){  if (certificateAuthorities != null) {    for (    Certificate certificate : certificateAuthorities) {      byte[] ca=((X509Certificate)certificate).getSubjectX500Principal().getEncoded();      addCertificateAuthority(new DistinguishedName(ca));    }  }}  }
class C{  protected void shiftGapEndUp(int newGapEnd){  int adjustIndex=findMarkAdjustIndex(getGapEnd());  int n=marks.size();  for (int i=adjustIndex; i < n; i++) {    MarkData mark=marks.elementAt(i);    if (mark.index >= newGapEnd) {      break;    }    mark.index=newGapEnd;  }  super.shiftGapEndUp(newGapEnd);  resetMarksAtZero();}  }
class C{  @Override protected void clear(){  super.clear();  mEventType=0;  mMovementGranularity=0;  mAction=0;  mPackageName=null;  mEventTime=0;  while (!mRecords.isEmpty()) {    AccessibilityRecord record=mRecords.remove(0);    record.recycle();  }}  }
class C{  public static float[] toFloatArray(Long[] array){  float[] result=new float[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].floatValue();  }  return result;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public InvertColorsEffect(){}  }
class C{  public void handleSetTemperatureClick(int idx){  listener.onSetTemperatureClick(idx);}  }
class C{  public RequestCreator error(Drawable errorDrawable){  if (errorDrawable == null) {    throw new IllegalArgumentException("Error image may not be null.");  }  if (errorResId != 0) {    throw new IllegalStateException("Error image already set.");  }  this.errorDrawable=errorDrawable;  return this;}  }
class C{  private JSONWriter end(char mode,char c) throws JSONException {  if (this.mode != mode) {    throw new JSONException(mode == 'a' ? "Misplaced endArray." : "Misplaced endObject.");  }  this.pop(mode);  try {    this.writer.write(c);  } catch (  IOException e) {    throw new JSONException(e);  }  this.comma=true;  return this;}  }
class C{  public void treeNodesChanged(TreeModelEvent e){}  }
class C{  public BurstFacadeImpl(Context appContext,OrientationLockController orientationLockController,BurstReadyStateChangeListener readyStateListener){  mOrientationLockController=orientationLockController;  mBurstController=new BurstControllerImpl(appContext);  mReadyStateListener=readyStateListener;}  }
class C{  public StateRoot createStateRoot(){  StateRootImpl stateRoot=new StateRootImpl();  return stateRoot;}  }
class C{  public int updateCalendar(Connection conn,String calendarName,Calendar calendar) throws IOException, SQLException {  ByteArrayOutputStream baos=serializeObject(calendar);  PreparedStatement ps=null;  try {    ps=conn.prepareStatement(rtp(UPDATE_CALENDAR));    setBytes(ps,1,baos);    ps.setString(2,calendarName);    return ps.executeUpdate();  }  finally {    closeStatement(ps);  }}  }
class C{  @Deprecated public static String classNameWOPackage(Class<?> c){  return c.getSimpleName();}  }
class C{  public static boolean createTableSequence(Properties ctx,String TableName,String trxName){  boolean SYSTEM_NATIVE_SEQUENCE=MSysConfig.getBooleanValue("SYSTEM_NATIVE_SEQUENCE",false);  if (SYSTEM_NATIVE_SEQUENCE) {    int next_id=MSequence.getNextID(Env.getAD_Client_ID(ctx),TableName,trxName);    if (next_id == -1) {      MSequence seq=new MSequence(ctx,0,trxName);      seq.setClientOrg(0,0);      seq.setName(TableName);      seq.setDescription("Table " + TableName);      seq.setIsTableID(true);      seq.saveEx();      next_id=1000000;    }    if (CConnection.get().getDatabase().createSequence(TableName + "_SEQ",1,0,99999999,next_id,trxName))     return true;    return false;  }  MSequence seq=new MSequence(ctx,0,trxName);  seq.setClientOrg(0,0);  seq.setName(TableName);  seq.setDescription("Table " + TableName);  seq.setIsTableID(true);  return seq.save();}  }
class C{  public ListNode removeElements(ListNode head,int val){  ListNode dummy=new ListNode(-1);  dummy.next=head;  ListNode cur=dummy, next=head;  while (next != null) {    if (next.val == val) {      cur.next=next.next;    } else {      cur=cur.next;    }    next=next.next;  }  return dummy.next;}  }
class C{  public RecipeFilter(){  initComponents();}  }
class C{  public static int listIDsSize(final String hostport,final int depth,final State state){switch (state) {case INVENTORY:    return inventory.listIDsSize(hostport,depth);case ARCHIVE:  return archive.listIDsSize(hostport,depth);default :return inventory.listIDsSize(hostport,depth) + archive.listIDsSize(hostport,depth);}}  }
class C{  boolean resyncSelected(){  boolean result=false;  if (selectedNodesCount() > 0) {    for (    Node n : new ArrayList<Node>(selectedNodes)) {      if (!getDelegator().getCurrentStorage().contains(n)) {        selectedNodes.remove(n);        result=true;      }    }  }  if (selectedWaysCount() > 0) {    for (    Way w : new ArrayList<Way>(selectedWays)) {      if (!getDelegator().getCurrentStorage().contains(w)) {        selectedWays.remove(w);        result=true;      }    }  }  if (selectedRelationsCount() > 0) {    for (    Relation r : new ArrayList<Relation>(selectedRelations)) {      if (!getDelegator().getCurrentStorage().contains(r)) {        selectedRelations.remove(r);        result=true;      }    }  }  return result;}  }
class C{  public EventEntry addRecurrenceException(RecurrenceException recurrenceException){  super.addElement(RecurrenceException.KEY,recurrenceException);  return this;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector result=new Vector();  OptionUtils.add(result,super.listOptions());  OptionUtils.addOption(result,incrementalDisabledTipText(),"no","incremental-disabled");  return OptionUtils.toEnumeration(result);}  }
class C{  public void trackChanges(){  _changed=new HashSet<String>();}  }
class C{  public float curvePoint(float a,float b,float c,float d,float t){  curveInitCheck();  float tt=t * t;  float ttt=t * tt;  PMatrix3D cb=curveBasisMatrix;  return (a * (ttt * cb.m00 + tt * cb.m10 + t * cb.m20 + cb.m30) + b * (ttt * cb.m01 + tt * cb.m11 + t * cb.m21 + cb.m31) + c * (ttt * cb.m02 + tt * cb.m12 + t * cb.m22 + cb.m32) + d * (ttt * cb.m03 + tt * cb.m13 + t * cb.m23 + cb.m33));}  }
class C{  public void clear(){  this.size=0;  this.root=new Element(null);  this.last=null;}  }
class C{  public SessionEditorEdge(SessionEditorNode node1,Point mouseTrackPoint){  super(node1,mouseTrackPoint,DisplayEdge.DIRECTED);}  }
class C{  public void delayParseGameData(){  gameData=null;  final AtomicReference<String> gameName=new AtomicReference<>();  final Optional<InputStream> inputStream=UrlStreams.openStream(url);  if (!inputStream.isPresent()) {    return;  }  try (InputStream input=inputStream.get()){    gameData=new GameParser(url.toString()).parse(input,gameName,true);    gameDataFullyLoaded=false;  } catch (  final EngineVersionException e) {    System.out.println(e.getMessage());  }catch (  final SAXParseException e) {    System.err.println("Could not parse:" + url + " error at line:"+ e.getLineNumber()+ " column:"+ e.getColumnNumber());    ClientLogger.logQuietly(e);  }catch (  final Exception e) {    System.err.println("Could not parse:" + url);    ClientLogger.logQuietly(e);  }}  }
class C{  @Override public final void startElement(final String ns,final String lName,final String qName,final Attributes list) throws SAXException {  String name=lName == null || lName.length() == 0 ? qName : lName;  StringBuffer sb=new StringBuffer(match);  if (match.length() > 0) {    sb.append('/');  }  sb.append(name);  match=sb.toString();  Rule r=(Rule)RULES.match(match);  if (r != null) {    r.begin(name,list);  }}  }
class C{  public boolean isInputCard(int cardNum){  if (cardNum > 63) {    warn("C/MRI - isInputCard - cardNum out of range");    return (false);  }  if (nodeType == SMINI) {    if (cardNum == 2) {      return (true);    } else {      return (false);    }  }  return (cardTypeLocation[cardNum] == INPUT_CARD);}  }
class C{  public ImageIcon loadImage(String imageName){  try {    ClassLoader classloader=getClass().getClassLoader();    java.net.URL url=classloader.getResource(imageName);    if (url != null) {      ImageIcon icon=new ImageIcon(url);      return icon;    }  } catch (  Exception e) {    e.printStackTrace();  }  throw new IllegalArgumentException("Unable to load image: " + imageName);}  }
class C{  private static NetDatacenterBroker createBroker(){  NetDatacenterBroker broker=null;  try {    broker=new NetDatacenterBroker("Broker");  } catch (  Exception e) {    e.printStackTrace();    return null;  }  return broker;}  }
class C{  public Runnable wrap(Runnable runnable,String description){  TraceScope parentScope=threadLocalScope.get();  if (parentScope == null) {    return runnable;  }  return new TraceRunnable(this,parentScope,runnable,description);}  }
class C{  public static JMenuItem makeExportPrintMenu(Component component,String componentName){  JMenuItem menuItem=new JMenuItem(new ShowPrintAndExportDialogAction(new SimplePrintableComponent(component,componentName),true));  return menuItem;}  }
class C{  public void testStartWithOneEarWithOneWarDeployed() throws Exception {  Deployable ear=new DefaultDeployableFactory().createDeployable(getContainer().getId(),getTestData().getTestDataFileFor("simple-ear"),DeployableType.EAR);  getLocalContainer().getConfiguration().addDeployable(ear);  URL earPingURL=new URL("http://localhost:" + getTestData().port + "/simpleweb/index.jsp");  getLocalContainer().start();  PingUtils.assertPingTrue("simple ear not started",earPingURL,getLogger());  getLocalContainer().stop();  PingUtils.assertPingFalse("simple ear not stopped",earPingURL,getLogger());}  }
class C{  private void addressSetButtonActionPerformed(java.awt.event.ActionEvent evt){  if ((profileComboBox.getSelectedIndex() != -1) && (!(profileComboBox.getSelectedItem() instanceof NullProfileBoxItem))) {    closeButton.setEnabled(true);  }}  }
class C{  public IndexNotFoundException(String msg){  super(msg);}  }
class C{  public BloomFilterIndex(int order,BloomFilter<E> sampleFilter,boolean splitFull){  root=null;  this.order=order;  this.idMap=new Hashtable<Integer,BFINode<E>>();  this.bfList=new ArrayList<BloomFilter<E>>();  this.splitFull=splitFull;  BloomFilter<E> zeroFilter=createZeroBloomFilter(sampleFilter);  this.root=new BFINode<E>(zeroFilter,this.order,this.splitFull);}  }
class C{  public boolean isCaseSensitive(final int column) throws SQLException {  return (getColumnInformation(column).getFlags() & ColumnFlags.BINARY_COLLATION) != 0;}  }
class C{  public List<RelatedResourceRep> listByProtectionSystem(URI protectionSystemId){  UnManagedCGList response=client.get(UnManagedCGList.class,PathConstants.UNMANAGED_CG_BY_PROTECTION_SYSTEM_URL,protectionSystemId);  return ResourceUtils.defaultList(response.getUnManagedCGs());}  }
class C{  public static boolean isBase64(final byte[] arrayOctet){  for (int i=0; i < arrayOctet.length; i++) {    if (!isBase64(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i])) {      return false;    }  }  return true;}  }
class C{  public static boolean verify(PublicKey publicKey,String signedData,String signature){  Signature sig;  try {    sig=Signature.getInstance(SIGNATURE_ALGORITHM);    sig.initVerify(publicKey);    sig.update(signedData.getBytes());    if (!sig.verify(Base64.decode(signature))) {      Log.e(TAG,"Signature verification failed.");      return false;    }    return true;  } catch (  NoSuchAlgorithmException e) {    Log.e(TAG,"NoSuchAlgorithmException.");  }catch (  InvalidKeyException e) {    Log.e(TAG,"Invalid key specification.");  }catch (  SignatureException e) {    Log.e(TAG,"Signature exception.");  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");  }  return false;}  }
class C{  public PvTable(){  setRowSelectionAllowed(true);  setDefaultRenderer(Object.class,renderer);  setModel(new javax.swing.table.DefaultTableModel(new Object[][]{{null,null,null,null},{null,null,null,null},{null,null,null,null},{null,null,null,null}},new String[]{"Title 1","Title 2","Title 3","Title 4"}));}  }
class C{  public static void declareGExtensions(ExtensionProfile extProfile){  extProfile.declareEntryExtension(GoogleBaseAttributesExtension.DESCRIPTION);  extProfile.declareFeedExtension(GoogleBaseAttributesExtension.DESCRIPTION);  ExtensionDescription feedLinkExtDesc=ExtensionDescription.getDefaultDescription(FeedLink.class);  feedLinkExtDesc.setRepeatable(true);  extProfile.declare(GoogleBaseEntry.class,feedLinkExtDesc);}  }
class C{  public static float[][] toMatrix(AffineTransform xform){  return new float[][]{{(float)xform.getScaleX(),(float)xform.getShearX(),0},{(float)xform.getShearY(),(float)xform.getScaleY(),0},{(float)xform.getTranslateX(),(float)xform.getTranslateY(),1}};}  }
class C{  public SVGDescElementBridge(){}  }
class C{  protected synchronized void clear(){  m_TextArea.setText("");}  }
class C{  public AdviceAttribute(String name,List<String> value){  this(name,null,value);}  }
class C{  public void updateDate(int columnIndex,java.sql.Date x) throws SQLException {  throw new NotUpdatable();}  }
class C{  public FluentFunction<T,R> log(final Consumer<String> logger,final Consumer<Throwable> error){  return FluentFunctions.of(null);}  }
class C{  public Cylindrical(LatLonPoint center,float scale,int width,int height){  super(center,scale,width,height);}  }
class C{  public RepositoryModule(){  String mapRepository=Cardinal.getInstance().getConfig().getString("mapRepository");  File mapRepositoryRoot=new File(Paths.get(mapRepository).isAbsolute() ? mapRepository : Cardinal.getInstance().getDataFolder().getAbsolutePath() + File.separator + mapRepository);  loadRepository(mapRepositoryRoot);}  }
class C{  protected void testAUC(Database db,String positive,OutlierResult result,double expected){  ListParameterization params=new ListParameterization();  params.addParameter(OutlierROCCurve.Parameterizer.POSITIVE_CLASS_NAME_ID,positive);  OutlierROCCurve rocCurve=ClassGenericsUtil.parameterizeOrAbort(OutlierROCCurve.class,params);  ResultHierarchy hier=db.getHierarchy();  if (hier.numParents(result) < 1) {    hier.add(db,result);  }  rocCurve.processNewResult(hier,result);  Collection<OutlierROCCurve.ROCResult> rocs=ResultUtil.filterResults(hier,result,OutlierROCCurve.ROCResult.class);  assertTrue("No ROC result found.",!rocs.isEmpty());  double auc=rocs.iterator().next().getAUC();  assertFalse("More than one ROC result found.",rocs.size() > 1);  assertEquals("ROC value does not match.",expected,auc,0.0001);}  }
class C{  public static boolean isSubclass(Type superclass,Type subclass){  List<Class<?>> superclasses=ClassUtils.getAllSuperclasses((Class<?>)subclass);  List<Class<?>> interfaces=ClassUtils.getAllInterfaces((Class<?>)subclass);  if (superclasses.contains(superclass) || interfaces.contains(superclass)) {    return true;  }  return false;}  }
class C{  public static void init(Properties p) throws Exception {  RuntimeSingleton.init(p);}  }
class C{  public ServerItemPath combine(final String relative){  return new ServerItemPath(ServerPath.combine(fullPath,relative));}  }
class C{  public RelocatedAddress(final IAddress address){  m_address=address;}  }
class C{  public static void invokeV(String signature,boolean isNative,Object caller){  MethodListener i=sMethods.get(signature);  if (i != null) {    i.onInvokeV(signature,isNative,caller);  } else   if (sDefaultListener != null) {    sDefaultListener.onInvokeV(signature,isNative,caller);  }}  }
class C{  public static boolean exists(final String filePath){  if (!TextUtils.isEmpty(filePath)) {    return new File(filePath).exists();  }  return false;}  }
class C{  public FixedCliConfig parse(String[] args) throws ParseException, java.text.ParseException {  CommandLine commandLine=getParser().parse(fixedOptions,args);  FixedCliConfig config=new FixedCliConfig();  super.parse(commandLine,config);  config.putFixedField(Constants.Fields.SRC_ADDR,commandLine.getOptionValue("ip_src_addr"));  config.putFixedField(Constants.Fields.DST_ADDR,commandLine.getOptionValue("ip_dst_addr"));  config.putFixedField(Constants.Fields.SRC_PORT,commandLine.getOptionValue("ip_src_port"));  config.putFixedField(Constants.Fields.DST_PORT,commandLine.getOptionValue("ip_dst_port"));  config.putFixedField(Constants.Fields.PROTOCOL,commandLine.getOptionValue("protocol"));  config.putFixedField(Constants.Fields.INCLUDES_REVERSE_TRAFFIC,Boolean.toString(commandLine.hasOption("include_reverse")));  return config;}  }
class C{  public CheckBoxTextFieldSmartTableCell(int flowLayoutOrientation,boolean isSelected){  this(flowLayoutOrientation,isSelected,null);}  }
class C{  public static StorageCenterAPI openConnection(String host,int port,String user,String password) throws StorageCenterAPIException {  return new StorageCenterAPI(host,port,user,password);}  }
class C{  public static boolean shouldBeMocked(String originalClass) throws IllegalArgumentException {  return getMockClass(originalClass) != null;}  }
class C{  public AboutPanel(){  initComponents();}  }
class C{  public void endElement(String uri,String localName,String qName) throws SAXException {}  }
class C{  public final Angle divide(double divisor){  return Angle.fromDegrees(this.degrees / divisor);}  }
class C{  public void updateInventory(UpdateInventoryInput input) throws Exception {  int sleep=ran.nextInt(1000);  Thread.sleep(sleep);  System.out.println("Inventory " + input.getPartId() + " updated");}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(isSupported01.class,args);}  }
class C{  public static synchronized void removeProvider(int providerNumber){  Provider p=providers.remove(providerNumber - 1);  providersNames.remove(p.getName());  setNeedRefresh();}  }
class C{  public boolean hasPurchase(String sku){  return mPurchaseMap.containsKey(sku);}  }
class C{  public CompiledST defineTemplate(String templateName,String template){  if (templateName.charAt(0) != '/')   templateName="/" + templateName;  try {    CompiledST impl=defineTemplate(templateName,new CommonToken(GroupParser.ID,templateName),null,template,null);    return impl;  } catch (  STException se) {  }  return null;}  }
class C{  protected VmHostData(){  _hostName="";  _isDomainController=false;}  }
class C{  public void error(TransformerException exception) throws TransformerException {  if (m_throwExceptionOnError)   throw exception; else {    PrintWriter pw=getErrorWriter();    printLocation(pw,exception);    pw.println(exception.getMessage());  }}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  TimeLockInfoDao.createTable(db,ifNotExists);}  }
class C{  static String encode(final byte[] binaryData){  final int n=binaryData.length;  final char[] buffer=new char[n * 2];  for (int i=0; i < n; i++) {    final int low=(binaryData[i] & 0x0f);    final int high=((binaryData[i] & 0xf0) >> 4);    buffer[i * 2]=HEXADECIMAL[high];    buffer[(i * 2) + 1]=HEXADECIMAL[low];  }  return new String(buffer);}  }
class C{  public void testKeyPairGenerator10() throws NoSuchAlgorithmException, NoSuchProviderException, IllegalArgumentException {  if (!DSASupported) {    fail(NotSupportMsg);    return;  }  KeyPairGenerator[] kpg=createKPGen();  assertNotNull("KeyPairGenerator objects were not created",kpg);  KeyPair kp, kp1;  for (int i=0; i < kpg.length; i++) {    kpg[i].initialize(512);    kp=kpg[i].generateKeyPair();    kp1=kpg[i].genKeyPair();    assertFalse("Incorrect private key",kp.getPrivate().equals(kp1.getPrivate()));    assertFalse("Incorrect public key",kp.getPublic().equals(kp1.getPublic()));  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:45.191 -0500",hash_original_method="977413F84EEA9D9E0B7BBB5D674FC9E7",hash_generated_method="C193B708AD165A660F76A53E245457E1") private boolean ignoreCallbacks(){  return (mCancelled || mAuthHeader != null || (mStatusCode > 300 && mStatusCode < 400 && mStatusCode != 305));}  }
class C{  @Override public Map<String,Double> score(List<Feature> features) throws CleartkProcessingException {  TreeFeatureVector featureVector=this.featuresEncoder.encodeAll(features);  Map<String,Double> results=Maps.newHashMap();  for (  int i : models.keySet()) {    double score=predict(featureVector,i);    String name=outcomeEncoder.decode(i);    results.put(name,score);  }  return results;}  }
class C{  public void close(){  closeParent();  System.exit(0);}  }
class C{  public void add_return(MessageCatalog param){  if (local_return == null) {    local_return=new MessageCatalog[]{};  }  local_returnTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(local_return);  list.add(param);  this.local_return=(MessageCatalog[])list.toArray(new MessageCatalog[list.size()]);}  }
class C{  @Bean @ConditionalOnMissingBean public ConfigurationUpdateStrategy configurationUpdateStrategy(ConfigReloadProperties properties,ConfigurableApplicationContext ctx,RestartEndpoint restarter,ContextRefresher refresher){switch (properties.getStrategy()) {case RESTART_CONTEXT:    return new ConfigurationUpdateStrategy(properties.getStrategy().name(),null);case REFRESH:  return new ConfigurationUpdateStrategy(properties.getStrategy().name(),null);case SHUTDOWN:return new ConfigurationUpdateStrategy(properties.getStrategy().name(),null);}throw new IllegalStateException("Unsupported configuration update strategy: " + properties.getStrategy());}  }
class C{  public Callback compose(){  if (isEmpty())   return DefaultCallback.getInstance();  if (size() == 1)   return callbacks.get(0);  return new ComposedCallback(callbacks);}  }
class C{  public RenameTrustedCertificateAction(KseFrame kseFrame){  super(kseFrame);  putValue(LONG_DESCRIPTION,res.getString("RenameTrustedCertificateAction.statusbar"));  putValue(NAME,res.getString("RenameTrustedCertificateAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("RenameTrustedCertificateAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("RenameTrustedCertificateAction.image")))));}  }
class C{  private boolean isDataHandler(Class<?> type){  return type != null && (Object.class != type) && (("javax.activation.DataHandler".equals(type.getName()) || isDataHandler(type.getSuperclass())));}  }
class C{  public static <T>void forEach(T[] objectArray,int from,int to,Procedure<? super T> procedure){  if (objectArray == null) {    throw new IllegalArgumentException("Cannot perform a forEach on null");  }  ListIterate.rangeCheck(from,to,objectArray.length);  InternalArrayIterate.forEachWithoutChecks(objectArray,from,to,procedure);}  }
class C{  public static int findAbiScore(String[] supportedAbis,String abi){  for (int i=0; i < supportedAbis.length; ++i) {    if (supportedAbis[i] != null && abi.equals(supportedAbis[i])) {      return i;    }  }  return -1;}  }
class C{  protected void commitTransactionAfterReturning(TransactionInfo txInfo){  if (txInfo != null && txInfo.hasTransaction()) {    if (logger.isTraceEnabled()) {      logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() + "]");    }    txInfo.getTransactionManager().commit(txInfo.getTransactionStatus());  }}  }
class C{  public Vertex decompileState(Vertex state,Network network){  if (state.getData() instanceof BinaryData) {    try {      return parseStateByteCode(state,(BinaryData)state.getData(),network);    } catch (    Exception exception) {      throw new SelfExecutionException(state,exception);    }  }  return state;}  }
class C{  @SuppressWarnings("unchecked") public SearchSourceBuilder query(Map query){  try {    XContentBuilder builder=XContentFactory.contentBuilder(Requests.CONTENT_TYPE);    builder.map(query);    return query(builder);  } catch (  IOException e) {    throw new ElasticsearchGenerationException("Failed to generate [" + query + "]",e);  }}  }
class C{  public boolean logSensitiveData(){  return logSensitiveData;}  }
class C{  public CGAffineTransform(){  type=TYPE_IDENTITY;  m00=m11=1.0;  m10=m01=m02=m12=0.0;}  }
class C{  public boolean removeServer(String host,int port){  String serverName=getServerName(host,port);  lock.writeLock().lock();  try {    if (!serverTrackerMap.containsKey(serverName)) {      LOG.warn(String.format("Server %s does not exist in health check list. Ignore.",serverName));      return false;    }    if (scheduledFutureMap.containsKey(serverName)) {      scheduledFutureMap.get(serverName).cancel(true);      scheduledFutureMap.remove(serverName);    }    serverTrackerMap.remove(serverName);  }  finally {    lock.writeLock().unlock();  }  return true;}  }
class C{  public static XMLTree from(String xml){  return new XMLTree(xml.getBytes(UTF_8));}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.artifactPaint,stream);}  }
class C{  public boolean rewriteExif(String filename,Collection<ExifTag> tags) throws FileNotFoundException, IOException {  RandomAccessFile file=null;  InputStream is=null;  boolean ret;  try {    File temp=new File(filename);    is=new BufferedInputStream(new FileInputStream(temp));    ExifParser parser=null;    try {      parser=ExifParser.parse(is,this);    } catch (    ExifInvalidFormatException e) {      throw new IOException("Invalid exif format : ",e);    }    long exifSize=parser.getOffsetToExifEndFromSOF();    is.close();    is=null;    file=new RandomAccessFile(temp,"rw");    long fileLength=file.length();    if (fileLength < exifSize) {      throw new IOException("Filesize changed during operation");    }    ByteBuffer buf=file.getChannel().map(MapMode.READ_WRITE,0,exifSize);    ret=rewriteExif(buf,tags);  } catch (  IOException e) {    closeSilently(file);    throw e;  } finally {    closeSilently(is);  }  file.close();  return ret;}  }
class C{  public void appendLine(CharSequence line){  lines.add(line);}  }
class C{  @Override public SurfaceBuilder<T> dividerSize(double size){  dividerSize=size;  return this;}  }
class C{  public String checkDependencies(URI uri,Class<? extends DataObject> type,boolean onlyActive){  return checkDependencies(uri,type,onlyActive,null);}  }
class C{  public static boolean isStringArrayType(PsiType type){  if (isPrimitiveType(type))   return false;  return type.getCanonicalText().indexOf("String[]") > 0;}  }
class C{  public CrashInfo(){}  }
class C{  public static void generateMarkersForSecuritySpecification(IProject project){  if (project != null) {    String projectRootPath=project.getLocation().toOSString();    SecuritySpecModel spec=SecuritySpecModel.deserializeSpecFromFile(projectRootPath);    if (spec != null) {      generateMarkersForSecuritySpecification(spec,project);    }  }}  }
class C{  public static Map<String,Element> parse(String content){  Map<String,Element> map=new HashMap<String,Element>();  String[] lines=content.split("\n");  for (int i=0; i < lines.length; i++) {    String item=lines[i];    if (!TextUtils.isEmpty(item) && item.contains(CHAR_DEFINE)) {      String[] sp=item.split(CHAR_DEFINE);      String key=sp[0].trim();      String value=sp[1].trim();      map.put(key,new Element(key,value));    }  }  sMap=map;  return map;}  }
class C{  void scrapActiveViews(){  final View[] activeViews=this.activeViews;  final int[] activeViewTypes=this.activeViewTypes;  final boolean multipleScraps=viewTypeCount > 1;  SparseArray<View> scrapViews=currentScrapViews;  final int count=activeViews.length;  for (int i=count - 1; i >= 0; i--) {    final View victim=activeViews[i];    if (victim != null) {      int whichScrap=activeViewTypes[i];      activeViews[i]=null;      activeViewTypes[i]=-1;      if (!shouldRecycleViewType(whichScrap)) {        continue;      }      if (multipleScraps) {        scrapViews=this.scrapViews[whichScrap];      }      scrapViews.put(i,victim);      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {        victim.setAccessibilityDelegate(null);      }    }  }  pruneScrapViews();}  }
class C{  static void runTasksManually(Type type) throws Exception {  Project project=createProject(null);  project.getTasks().stream().filter(null).map(null).filter(null).forEach(null);}  }
class C{  void startShutdown(long period){  _isShutdown=true;  _period=period;  wake();}  }
class C{  public SQLRecoverableException(){}  }
class C{  private static byte[] readClass(final InputStream is,boolean close) throws IOException {  if (is == null) {    throw new IOException("Class not found");  }  try {    byte[] b=new byte[is.available()];    int len=0;    while (true) {      int n=is.read(b,len,b.length - len);      if (n == -1) {        if (len < b.length) {          byte[] c=new byte[len];          System.arraycopy(b,0,c,0,len);          b=c;        }        return b;      }      len+=n;      if (len == b.length) {        int last=is.read();        if (last < 0) {          return b;        }        byte[] c=new byte[b.length + 1000];        System.arraycopy(b,0,c,0,len);        c[len++]=(byte)last;        b=c;      }    }  }  finally {    if (close) {      is.close();    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public OAEPParameterSpec(String mdName,String mgfName,AlgorithmParameterSpec mgfSpec,PSource pSrc){  if (mdName == null) {    throw new NullPointerException("mdName == null");  } else   if (mgfName == null) {    throw new NullPointerException("mgfName == null");  } else   if (pSrc == null) {    throw new NullPointerException("pSrc == null");  }  this.mdName=mdName;  this.mgfName=mgfName;  this.mgfSpec=mgfSpec;  this.pSrc=pSrc;}  }
class C{  public Matrix arrayTimes(Matrix B){  checkMatrixDimensions(B);  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=A[i][j] * B.A[i][j];    }  }  return X;}  }
class C{  public void startEntity(String name) throws org.xml.sax.SAXException {}  }
class C{  public static File createTempFile(String data) throws IOException {  File file=createTempFile();  Writer writer=null;  try {    writer=new BufferedWriter(new FileWriter(file));    writer.write(data);  }  finally {    if (writer != null) {      writer.close();    }  }  return file;}  }
class C{  private boolean testLicense(){synchronized (licenseLock) {    if (licenseTested == false) {      licenseValid=TFSEclipseClientLicenseManager.isLicensed();      licenseTested=true;    }    if (!licenseValid) {      LicenseManager.getInstance().addListener(new ProjectManagerLicenseListener());      return false;    }  }  return true;}  }
class C{  public boolean usesMethod(String className,String methodName,String descriptor){  int classIndex=findClass(className);  if (classIndex == NOT_FOUND)   return false;  int nameAndTypeIndex=findNameAndType(methodName,descriptor);  if (nameAndTypeIndex == NOT_FOUND)   return false;  for (int i=1; i < maxPoolSize; i++) {    if (isMethod(i) && readValue(offsets[i]) == classIndex && readValue(offsets[i] + 2) == nameAndTypeIndex)     return true;  }  return false;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case RegularExpressionPackage.UNICODE_ESCAPE_SEQUENCE__CHARACTER:    setCharacter((String)newValue);  return;case RegularExpressionPackage.UNICODE_ESCAPE_SEQUENCE__SEQUENCE:setSequence((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  protected SelectedSparseObjectMatrix2D(AbstractIntObjectMap elements,int[] rowOffsets,int[] columnOffsets,int offset){  this(rowOffsets.length,columnOffsets.length,elements,0,0,1,1,rowOffsets,columnOffsets,offset);}  }
class C{  @Deprecated public static void liftingFromBottom(View view,float baseRotation,float fromY,int duration,int startDelay){  view.setRotationX(baseRotation);  view.setTranslationY(fromY);  view.animate().setInterpolator(new AccelerateDecelerateInterpolator()).setDuration(duration).setStartDelay(startDelay).rotationX(0).translationY(0).start();}  }
class C{  public SwfInfo swfForFile(SourceFile f,int isolateId){  int id=f.getId();  SwfInfo info=null;  SwfInfo[] swfs=getSwfs(isolateId);  for (int i=0; (i < swfs.length && (info == null)); i++) {    if (swfs[i] != null && swfs[i].containsSource(f))     info=swfs[i];  }  return info;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object val=stack.pop();  String name=getString(stack);  if (stack.getUIMgr() == null)   return null;  PseudoMenu ui=stack.getUIMgr().getCurrUI();  if (ui != null) {    ZPseudoComp uiComp=ui.getCompForVariable(name,val,stack.getUIComponent());    return (uiComp != null && uiComp.passesUpwardConditional() && uiComp.getNumKids() > 0) ? Boolean.TRUE : Boolean.FALSE;  }  return Boolean.FALSE;}  }
class C{  public final static Point[] bresenham_line(Point pt1,Point pt2){  return bresenham_line(pt1.x,pt1.y,pt2.x,pt2.y);}  }
class C{  public Loan(double annualInterestRate,int numberOfYears,double loanAmount){  this.annualInterestRate=annualInterestRate;  this.numberOfYears=numberOfYears;  this.loanAmount=loanAmount;  loanDate=new java.util.Date();}  }
class C{  @Override public void mark(int readLimit){  defaultMark=savePosition(readLimit);}  }
class C{  private void replace(){  if (name.length() > 0) {    replace(name);  }  name.clear();}  }
class C{  public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {  return encodeObject(serializableObject,NO_OPTIONS);}  }
class C{  private static Locale createConstant(String lang,String country){  BaseLocale base=BaseLocale.createInstance(lang,country);  return getInstance(base,null);}  }
class C{  public static int color(ColorHolder colorHolder,Context ctx,@AttrRes int colorStyle,@ColorRes int colorDefault){  if (colorHolder == null) {    return UIUtils.getThemeColorFromAttrOrRes(ctx,colorStyle,colorDefault);  } else {    return colorHolder.color(ctx,colorStyle,colorDefault);  }}  }
class C{  public OutputFinisher(DexOptions dexOptions,int initialCapacity,int regCount){  this.dexOptions=dexOptions;  this.unreservedRegCount=regCount;  this.insns=new ArrayList<DalvInsn>(initialCapacity);  this.reservedCount=-1;  this.hasAnyPositionInfo=false;  this.hasAnyLocalInfo=false;}  }
class C{  private String _serializeMap(Map map,Set<Object> done) throws ConverterException {  StringBuilder sb=new StringBuilder(goIn() + "<struct>");  Iterator it=map.keySet().iterator();  deep++;  while (it.hasNext()) {    Object key=it.next();    sb.append(goIn() + "<var name=" + del+ XMLUtil.escapeXMLString(key.toString())+ del+ ">");    sb.append(_serialize(map.get(key),done));    sb.append(goIn() + "</var>");  }  deep--;  sb.append(goIn() + "</struct>");  return sb.toString();}  }
class C{  protected int calculateTabWidth(int tabPlacement,int tabIndex,FontMetrics metrics){  final Font font=metrics.getFont();  final FontMetrics plainMetrics=font.isPlain() ? metrics : tabPane.getFontMetrics(font.deriveFont(Font.PLAIN));  final int widthPlain=super.calculateTabWidth(tabPlacement,tabIndex,plainMetrics);  final FontMetrics boldMetrics=font.isBold() ? metrics : tabPane.getFontMetrics(font.deriveFont(Font.BOLD));  final int widthBold=super.calculateTabWidth(tabPlacement,tabIndex,boldMetrics);  final int width=Math.max(widthPlain,widthBold);  myLayoutMetrics=(width == widthPlain) ? plainMetrics : boldMetrics;  return width;}  }
class C{  public String toString(String pattern,Locale locale) throws IllegalArgumentException {  if (pattern == null) {    return toString();  }  return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);}  }
class C{  protected ThisLiteralImpl(){  super();}  }
class C{  private static void deleteEvents(CalendarService service,List<CalendarEventEntry> eventsToDelete) throws ServiceException, IOException {  CalendarEventFeed batchRequest=new CalendarEventFeed();  for (int i=0; i < eventsToDelete.size(); i++) {    CalendarEventEntry toDelete=eventsToDelete.get(i);    BatchUtils.setBatchId(toDelete,String.valueOf(i));    BatchUtils.setBatchOperationType(toDelete,BatchOperationType.DELETE);    batchRequest.getEntries().add(toDelete);  }  CalendarEventFeed feed=service.getFeed(eventFeedUrl,CalendarEventFeed.class);  Link batchLink=feed.getLink(Link.Rel.FEED_BATCH,Link.Type.ATOM);  URL batchUrl=new URL(batchLink.getHref());  CalendarEventFeed batchResponse=service.batch(batchUrl,batchRequest);  boolean isSuccess=true;  for (  CalendarEventEntry entry : batchResponse.getEntries()) {    String batchId=BatchUtils.getBatchId(entry);    if (!BatchUtils.isSuccess(entry)) {      isSuccess=false;      BatchStatus status=BatchUtils.getBatchStatus(entry);      System.out.println("\n" + batchId + " failed ("+ status.getReason()+ ") "+ status.getContent());    }  }  if (isSuccess) {    System.out.println("Successfully deleted all events via batch request.");  }}  }
class C{  public static <T>List<T> rest(List<T> l){  return l.subList(1,l.size());}  }
class C{  private boolean isSafe(char[][] board,int N,int row,int col){  for (int i=0; i < N; i++) {    if (board[i][col] != '.')     return false;    if (board[row][i] != '.')     return false;  }  int step=1;  while (row - step >= 0 && col - step >= 0)   if (board[row - step][col - step++] != '.')   return false;  step=1;  while (row + step < N && col - step >= 0)   if (board[row + step][col - step++] != '.')   return false;  return true;}  }
class C{  private boolean hasAnyParticipant(SharedDeployment dep,Map<UUID,IgniteUuid> participants){  assert Thread.holdsLock(mux);  for (  Map.Entry<UUID,IgniteUuid> entry : participants.entrySet()) {    if (dep.hasParticipant(entry.getKey(),entry.getValue()))     return true;  }  return false;}  }
class C{  private BigtableIO(){}  }
class C{  public static Put toPut(Subscription subscription){  Put put=new Put(Bytes.toBytes(subscription.getUser()));  put.add(SUBSCRIPTION_CF,Bytes.toBytes(subscription.getMailbox()),MARKER_PRESENT);  return put;}  }
class C{  private static List<InlineQueryResult> convertRaeResults(List<RaeService.RaeResult> raeResults){  List<InlineQueryResult> results=new ArrayList<>();  for (int i=0; i < raeResults.size(); i++) {    RaeService.RaeResult raeResult=raeResults.get(i);    InputTextMessageContent messageContent=new InputTextMessageContent();    messageContent.disableWebPagePreview();    messageContent.enableMarkdown(true);    messageContent.setMessageText(raeResult.getDefinition());    InlineQueryResultArticle article=new InlineQueryResultArticle();    article.setInputMessageContent(messageContent);    article.setId(Integer.toString(i));    article.setTitle(raeResult.getTitle());    article.setDescription(raeResult.getDescription());    article.setThumbUrl(THUMBNAILBLUE);    results.add(article);  }  return results;}  }
class C{  public boolean mouseClicked(MouseEvent e){  if (wantsEvents()) {    if (omdtmm != null) {      omdtmm.mouseClicked(e);      return consumeEvents;    } else {      return false;    }  } else {    return super.mouseClicked(e);  }}  }
class C{  public static void partition(int[] list,int from,int to,int[] splitters,int splitFrom,int splitTo,int[] splitIndexes){  int element, splitter;  if (splitFrom > splitTo)   return;  if (from > to) {    from--;    for (int i=splitFrom; i <= splitTo; )     splitIndexes[i++]=from;    return;  }  int medianIndex;  if (splitFrom == splitTo) {    medianIndex=splitFrom;  } else {    int m=(from + to) / 2;    int len=to - from + 1;    if (len > SMALL) {      int l=from;      int n=to;      if (len > MEDIUM) {        int s=len / 8;        l=med3(list,l,l + s,l + 2 * s);        m=med3(list,m - s,m,m + s);        n=med3(list,n - 2 * s,n - s,n);      }      m=med3(list,l,m,n);    }    medianIndex=Sorting.binarySearchFromTo(splitters,list[m],splitFrom,splitTo);    if (medianIndex < 0)     medianIndex=-medianIndex - 1;    if (medianIndex > splitTo)     medianIndex=splitTo;  }  splitter=splitters[medianIndex];  int splitIndex=partition(list,from,to,splitter);  splitIndexes[medianIndex]=splitIndex;  if (splitIndex < from) {    int i=medianIndex - 1;    while (i >= splitFrom && (!(splitter < splitters[i])))     splitIndexes[i--]=splitIndex;    splitFrom=medianIndex + 1;  } else   if (splitIndex >= to) {    int i=medianIndex + 1;    while (i <= splitTo && (!(splitter > splitters[i])))     splitIndexes[i++]=splitIndex;    splitTo=medianIndex - 1;  }  if (splitFrom <= medianIndex - 1) {    partition(list,from,splitIndex,splitters,splitFrom,medianIndex - 1,splitIndexes);  }  if (medianIndex + 1 <= splitTo) {    partition(list,splitIndex + 1,to,splitters,medianIndex + 1,splitTo,splitIndexes);  }}  }
class C{  public void testXYLineChartDemo() throws IOException {  String imageFilename=getOutputDirectory() + "xylinechart.png";  Demo demo=new Demo();  demo.createXYLineChart(imageFilename);  File imagefile=new File(imageFilename);  assertTrue(imagefile.exists());  BufferedImage image=ImageIO.read(imagefile);  assertEquals(800,image.getWidth(null));  assertEquals(600,image.getHeight(null));}  }
class C{  private void printMemberAnnotations(List<AnnotationExpr> annotations,Object arg){  if (annotations != null) {    for (    AnnotationExpr a : annotations) {      a.accept(this,arg);      printer.printLn();    }  }}  }
class C{  public JSONTokener(InputStream inputStream) throws JSONException {  this(new InputStreamReader(inputStream));}  }
class C{  public ADialogDialog(Frame frame,String title,String message,int messageType){  super(frame,title,frame != null);  common(message,messageType);  AEnv.showCenterWindow(frame,this);}  }
class C{  public void markForBackupCheck(){  needCheckBackup=true;}  }
class C{  private void replaceStaleEntry(ThreadLocal<?> key,Object value,int staleSlot){  Entry[] tab=table;  int len=tab.length;  Entry e;  int slotToExpunge=staleSlot;  for (int i=prevIndex(staleSlot,len); (e=tab[i]) != null; i=prevIndex(i,len))   if (e.get() == null)   slotToExpunge=i;  for (int i=nextIndex(staleSlot,len); (e=tab[i]) != null; i=nextIndex(i,len)) {    ThreadLocal<?> k=e.get();    if (k == key) {      e.value=value;      tab[i]=tab[staleSlot];      tab[staleSlot]=e;      if (slotToExpunge == staleSlot)       slotToExpunge=i;      cleanSomeSlots(expungeStaleEntry(slotToExpunge),len);      return;    }    if (k == null && slotToExpunge == staleSlot)     slotToExpunge=i;  }  tab[staleSlot].value=null;  tab[staleSlot]=new Entry(key,value);  if (slotToExpunge != staleSlot)   cleanSomeSlots(expungeStaleEntry(slotToExpunge),len);}  }
class C{  public static boolean hasGroup(Matcher matcher){  return matcher.groupCount() > 0;}  }
class C{  public void addLayoutSlip(int type){  double rot=0.0;  String s=rotationField.getText().trim();  if (s.length() < 1) {    rot=0.0;  } else {    try {      rot=Double.parseDouble(s);    } catch (    Exception e) {      JOptionPane.showMessageDialog(this,rb.getString("Error3") + " " + e,Bundle.getMessage("ErrorTitle"),JOptionPane.ERROR_MESSAGE);      return;    }  }  numLayoutSlips++;  String name="";  boolean duplicate=true;  while (duplicate) {    name="SL" + numLayoutSlips;    if (finder.findLayoutSlipByName(name) == null) {      duplicate=false;    }    if (duplicate) {      numLayoutSlips++;    }  }  LayoutSlip o=new LayoutSlip(name,currentPoint,rot,this,type);  slipList.add(o);  setDirty(true);  LayoutBlock b=provideLayoutBlock(blockIDField.getText().trim());  if (b != null) {    o.setLayoutBlock(b);    String sensorName=(blockSensor.getText().trim());    if (sensorName.length() > 0) {      if (!validateSensor(sensorName,b,this)) {        b.setOccupancySensorName("");      } else {        blockSensor.setText(b.getOccupancySensorName());      }    }  }  String turnoutName=nextTurnout.getText().trim();  if (validatePhysicalTurnout(turnoutName,this)) {    o.setTurnout(turnoutName);    if (o.getTurnout().getSystemName().equals(turnoutName.toUpperCase())) {      nextTurnout.setText(turnoutName.toUpperCase());    }  } else {    o.setTurnout("");    nextTurnout.setText("");  }  turnoutName=extraTurnout.getText().trim();  if (validatePhysicalTurnout(turnoutName,this)) {    o.setTurnoutB(turnoutName);    if (o.getTurnoutB().getSystemName().equals(turnoutName.toUpperCase())) {      extraTurnout.setText(turnoutName.toUpperCase());    }  } else {    o.setTurnoutB("");    extraTurnout.setText("");  }}  }
class C{  public static Object assertThreadIdToSequenceIdMapHasEntryId(){  Map map=pool.getThreadIdToSequenceIdMap();  assertNotNull(map);  assertTrue(map.size() != 0);  Map.Entry entry=null;  for (Iterator threadIdToSequenceIdMapIterator=map.entrySet().iterator(); threadIdToSequenceIdMapIterator.hasNext(); ) {    entry=(Map.Entry)threadIdToSequenceIdMapIterator.next();  }  ThreadIdentifier tid=(ThreadIdentifier)entry.getKey();  SequenceIdAndExpirationObject seo=(SequenceIdAndExpirationObject)entry.getValue();  long sequenceId=seo.getSequenceId();  EventID evId=new EventID(tid.getMembershipID(),tid.getThreadID(),sequenceId);synchronized (map) {    map.clear();  }  return evId;}  }
class C{  public static void main(final String[] args) throws Exception {  final KeyFactory kf=KeyFactory.getInstance("RSA");  final Object[] sizeModExp=loadKey(RsaConsts.PATH_PRIVATE_KEY);  final int keySize=(Integer)sizeModExp[0];  final PrivateKey privKey=kf.generatePrivate(new RSAPrivateKeySpec((BigInteger)sizeModExp[1],(BigInteger)sizeModExp[2]));  final int blockSize=keySize / 8 - 11;  final Cipher cipher=Cipher.getInstance("RSA/ECB/PKCS1Padding");  cipher.init(Cipher.ENCRYPT_MODE,privKey);  if (!Files.exists(RsaConsts.PATH_ENCRYPT_INPUT))   createTestInput();  System.out.println("Encrypting...");  final long start=System.nanoTime();  final byte[] inData=Files.readAllBytes(RsaConsts.PATH_ENCRYPT_INPUT);  final ByteArrayOutputStream baOut=new ByteArrayOutputStream();  try (final OutputStream out=new DeflaterOutputStream(baOut)){    out.write(inData);  }   try (final InputStream in=new ByteArrayInputStream(baOut.toByteArray());final OutputStream out=Files.newOutputStream(RsaConsts.PATH_ENCRYPT_OUTPUT)){    out.write(RsaConsts.REG_FILE_MAGIC);    out.write(RsaConsts.REG_FILE_VERSION);    out.write(RsaConsts.KEY_SELECTOR);    final byte[] buffer=new byte[blockSize];    int bytesRead;    byte[] result;    while ((bytesRead=in.read(buffer)) > 0) {      result=cipher.doFinal(buffer,0,bytesRead);      if (result != null)       out.write(result);    }  }   final long end=System.nanoTime();  System.out.println("Done. (" + ((end - start) / 1_000_000) + " ms)");  Files.deleteIfExists(RsaConsts.PATH_DECRYPT_OUTPUT);}  }
class C{  public Plane(final Plane basePlane,final boolean above){  this(basePlane.x,basePlane.y,basePlane.z,above ? Math.nextUp(basePlane.D + MINIMUM_RESOLUTION) : Math.nextDown(basePlane.D - MINIMUM_RESOLUTION));}  }
class C{  public String[] parseLineMulti(String nextLine) throws IOException {  return parseLine(nextLine,true);}  }
class C{  public void clearSnapshot(String tag,String... keyspaces) throws IOException {  ssProxy.clearSnapshot(tag,keyspaces);}  }
class C{  public static void serialize(Message message,ByteBuf bb){  Schema<Message> schema=RuntimeSchema.getSchema(Message.class);  try (RecyclableLinkedBuffer rlb=recyclableLinkedBuffer.get()){    try {      ProtostuffIOUtil.writeTo(new ByteBufOutputStream(bb),message,schema,rlb.buffer());    } catch (    Exception e) {      throw new EncoderException(e.getMessage(),e);    }  } }  }
class C{  private static void renderNeededHiddenFields(FacesContext context,UIComponent component) throws IOException {  ResponseWriter writer=context.getResponseWriter();  Map map=getHiddenFieldMap(context,false);  if (map != null) {    Iterator entries=map.entrySet().iterator();    while (entries.hasNext()) {      Map.Entry entry=(Map.Entry)entries.next();      if (Boolean.TRUE.equals(entry.getValue())) {        writer.startElement("input",component);        writer.writeAttribute("type","hidden",null);        writer.writeAttribute("name",entry.getKey(),null);        writer.endElement("input");      }    }    Map requestMap=context.getExternalContext().getRequestMap();    requestMap.put(HIDDEN_FIELD_KEY,null);  }  String formTarget=(String)component.getAttributes().get("target");  renderClearHiddenParamsJavaScript(context,writer,map,formTarget,component.getClientId(context));}  }
class C{  public void testResponseMessageOnUnmarshallingFailed() throws Exception {  readCnt.set(1);  failAtomicPut(++key);  readCnt.set(Integer.MAX_VALUE);  assert jcache(0).get(new TestKey(String.valueOf(key))) == null;  readCnt.set(2);  failAtomicPut(++key);  readCnt.set(Integer.MAX_VALUE);  assert jcache(0).get(new TestKey(String.valueOf(key))) != null;  readCnt.set(1);  failGetAll(++key);  readCnt.set(Integer.MAX_VALUE);  jcache(0).put(new TestKey(String.valueOf(++key)),"");  readCnt.set(2);  failGetAll(key);  readCnt.set(Integer.MAX_VALUE);  valReadCnt.set(Integer.MAX_VALUE);  jcache(0).put(new TestKey(String.valueOf(++key)),new TestValue());  assertNotNull(new TestKey(String.valueOf(key)));  readCnt.set(1);  failGet(key);  valReadCnt.set(1);  readCnt.set(2);  failGet(key);}  }
class C{  public TableViewerBuilder(Composite parent){  this(parent,SWT.MULTI | SWT.V_SCROLL | SWT.BORDER| SWT.FULL_SELECTION);}  }
class C{  @NonNull public Builder fromResponseJson(@NonNull JSONObject json) throws JSONException {  try {    setTokenType(JsonUtil.getString(json,KEY_TOKEN_TYPE));    setAccessToken(JsonUtil.getStringIfDefined(json,KEY_ACCESS_TOKEN));    if (json.has(KEY_EXPIRES_AT)) {      setAccessTokenExpirationTime(json.getLong(KEY_EXPIRES_AT));    }    if (json.has(KEY_EXPIRES_IN)) {      setAccessTokenExpiresIn(json.getLong(KEY_EXPIRES_IN));    }    setRefreshToken(JsonUtil.getStringIfDefined(json,KEY_REFRESH_TOKEN));    setIdToken(JsonUtil.getStringIfDefined(json,KEY_ID_TOKEN));    setAdditionalParameters(extractAdditionalParams(json,BUILT_IN_PARAMS));    return this;  } catch (  JSONException ex) {    throw new IllegalStateException("JSONException thrown in violation of contract",ex);  }}  }
class C{  @Override public T apply(byte[] bytes){  return fromBytes(bytes,clazz);}  }
class C{  GridClientConnectionResetException(String msg){  super(msg);}  }
class C{  public boolean execute(INode staten){  if (!(staten instanceof FifteenPuzzleNode)) {    throw new IllegalArgumentException("SlideMove expects state objects of class EightPuzzleNode");  }  FifteenPuzzleNode state=(FifteenPuzzleNode)staten;  if (state.isAdjacentAndEmpty(fromC,fromR,toC,toR)) {    return state.swap(fromC,fromR,toC,toR);  }  return false;}  }
class C{  Object processEXPR(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  try {    XPath expr=handler.createXPath(value,owner);    return expr;  } catch (  TransformerException te) {    throw new org.xml.sax.SAXException(te);  }}  }
class C{  public EmptyBlock(double width,double height){  setWidth(width);  setHeight(height);}  }
class C{  public static Unsigned min(Unsigned x,Unsigned y){  return (x.belowOrEqual(y)) ? x : y;}  }
class C{  public int size(){  return size;}  }
class C{  @Override public int hashCode(){  int hc=13 * sort;  if (sort >= ARRAY) {    for (int i=off, end=i + len; i < end; i++) {      hc=17 * (hc + buf[i]);    }  }  return hc;}  }
class C{  private void registerOperations(){  Class<?> type=getClass();  for (  Method method : type.getMethods()) {    if (isOperationMethod(method)) {      registerMethod(method);    }  }}  }
class C{  @Deprecated public static int fromDouble(double d){  if (d == 0.0)   return 0; else {    double d2=Math.signum(d) * Math.abs(d) / (1.0 + Math.abs(d));    int d3=(int)Math.round(Integer.MAX_VALUE * d2);    return d3;  }}  }
class C{  public static double roundDownX(final double startValue){  return startValue - xStep;}  }
class C{  private void removeSegment(Segment segment){  final int lengthBefore=xml.length;  xml=insertBetween(xml,segment.left,segment.right,"");  shiftSegments(segment.left,xml.length - lengthBefore);}  }
class C{  public boolean hasReserved(){  if (reservId == NOT_FOUND) {    return false;  }  return true;}  }
class C{  public static BigDecimal toBigDecimal(CharSequence self){  return new BigDecimal(self.toString().trim());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:24.644 -0500",hash_original_method="1F3D49C208A22CE80DD0C39318B7FB91",hash_generated_method="5C463F0E1A8DAA99D6E8FB66BDCEF58E") public void switchToHeader(String fragmentName,Bundle args){  setSelectedHeader(null);  switchToHeaderInner(fragmentName,args,0);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:16.042 -0500",hash_original_method="15AFC792EAFAB8847ABF7F7AA1CDCAAC",hash_generated_method="98D5DA14F077B7BB106076B3A41BFB2D") public ScheduledThreadPoolExecutor(int corePoolSize,RejectedExecutionHandler handler){  super(corePoolSize,Integer.MAX_VALUE,0,TimeUnit.NANOSECONDS,new DelayedWorkQueue(),handler);}  }
class C{  public T caseTStructGetter(TStructGetter object){  return null;}  }
class C{  public void doRefresh(){  try {    this.addReferenceTablePanel(((ReferenceTable)refTableEditorComboBox.getSelectedItem()).getCode());  } catch (  Exception ex) {    this.setErrorMessage("Error finding item.",ex.getMessage(),ex);  } finally {    clearStatusBarMessage();  }}  }
class C{  @CliAvailabilityIndicator({LIST_INSTANCES_CMD,INSTALL_CMD}) public boolean areStorageCommandsAvailable(){switch (state.getShellState().getConnectionState()) {case CONNECTED_TO_STORAGE:case CONNECTED_TO_INSTANCE:    return true;default :  return false;}}  }
class C{  public static File storeVideoInExternalDirectory(Context context,Response response,String videoName){  final File file=getVideoStorageDir(videoName);  if (file != null) {    try {      final InputStream inputStream=response.getBody().in();      final OutputStream outputStream=new FileOutputStream(file);      IOUtils.copy(inputStream,outputStream);      outputStream.close();      inputStream.close();      notifyMediaScanners(context,file);      return file;    } catch (    FileNotFoundException e) {      e.printStackTrace();    }catch (    IOException e) {      e.printStackTrace();    }  }  return null;}  }
class C{  public void reset(int index){  setIndex(index);}  }
class C{  public boolean isLcdVisible(){  return null == lcdVisible ? _lcdVisible : lcdVisible.get();}  }
class C{  public void update(byte[] buffer){  update(buffer,0,buffer.length);}  }
class C{  public Matrix4f translationRotate(float tx,float ty,float tz,Quaternionfc quat){  return translationRotate(tx,ty,tz,quat.x(),quat.y(),quat.z(),quat.w());}  }
class C{  public Map<String,Long> readLockColumns() throws Exception {  return readLockColumns(false);}  }
class C{  public void removeAll(){  root=null;}  }
class C{  public boolean isDaemon(){  return daemon;}  }
class C{  public <T>T asClass(Class<T> clazz,T defaultValue){  if (value == null)   return defaultValue;  try {    return clazz.cast(value);  } catch (  ClassCastException e) {    return defaultValue;  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  private void resetNetworkVisited(Map<Id<Node>,DijkstraNodeData> nodeData){  for (  Node node : this.network.getNodes().values()) {    DijkstraNodeData data=getData(node,nodeData);    data.resetVisited();  }}  }
class C{  public UdpMatcher(final NetworkConfig config){  super(config);  useStrictResponseMatching=config.getBoolean(NetworkConfig.Keys.USE_STRICT_RESPONSE_MATCHING);  if (LOGGER.isLoggable(Level.CONFIG)) {    String msg=new StringBuilder("UdpMatcher uses ").append(NetworkConfig.Keys.USE_STRICT_RESPONSE_MATCHING).append("=").append(useStrictResponseMatching).toString();    LOGGER.config(msg);  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SGraphPackage.CHOICE__KIND:    return kind != KIND_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public boolean isExtant(){  return (flags & EXTANT) != 0;}  }
class C{  @Override protected void deinitialize(){  if (value == null) {    value=signaturePanel.getImage();  }  super.deinitialize();}  }
class C{  private void put112(final int b1,final int b2,final int s){  pool.put11(b1,b2).putShort(s);}  }
class C{  public void testDoConfigureSetsDefaultDomainVersion() throws Exception {  configuration.doConfigure(container);  String config=configuration.getFileHandler().readTextFile(DOMAIN_HOME + "/config/config.xml","UTF-8");  XMLAssert.assertXpathExists("//weblogic:domain-version",config);  XMLAssert.assertXpathExists("//weblogic:configuration-version",config);  XMLAssert.assertXpathExists("//weblogic:server",config);  XMLAssert.assertXpathExists("//weblogic:server/weblogic:name",config);  XMLAssert.assertXpathExists("//weblogic:security-configuration",config);  XMLAssert.assertXpathExists("//weblogic:security-configuration/weblogic:credential-encrypted",config);  XMLAssert.assertXpathExists("//weblogic:embedded-ldap",config);  XMLAssert.assertXpathExists("//weblogic:embedded-ldap/weblogic:credential-encrypted",config);  XMLAssert.assertXpathExists("//weblogic:admin-server-name",config);}  }
class C{  public void rejectedExecution(Runnable r,java.util.concurrent.ThreadPoolExecutor e){  if (!e.isShutdown()) {    r.run();  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public final Vec2 addLocal(float x,float y){  this.x+=x;  this.y+=y;  return this;}  }
class C{  public final boolean isFillX(){  return fillX;}  }
