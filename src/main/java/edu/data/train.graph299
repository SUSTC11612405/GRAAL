class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:44.112 -0500",hash_original_method="9B7D3F2F980E3EB6087A253589224152",hash_generated_method="241DB74A7C1A3F403B28B3142CB5207F") private static ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException(int index,int size){  throw new ArrayIndexOutOfBoundsException(size,index);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Agent a=(Agent)stack.pop();  return (a == null) ? "" : a.getCause();}  }
class C{  public static boolean findText(final String... text){  for (  Map.Entry<String,ExtLogRecord> entry : messages.entrySet()) {    String key=entry.getKey();    boolean found=true;    for (    String txtCheck : text) {      found=key.contains(txtCheck);      if (!found) {        Throwable throwable=entry.getValue().getThrown();        if (throwable != null && throwable.getMessage() != null) {          found=throwable.getMessage().contains(txtCheck);          if (!found) {            break;          }        } else {          break;        }      }    }    if (found) {      return true;    }  }  return false;}  }
class C{  public void AddColumn(Column column){  columns.add(column);}  }
class C{  public synchronized int capacity(){  return elementData.length;}  }
class C{  private void validateXmlFieldPresent(String message,String xmlTagName,Object value){  assertTrue(xmlTagName + " \"" + value+ "\" expected, but not found.",message.contains("<" + xmlTagName + ">"+ (value == null ? null : value.toString())+ "</"+ xmlTagName+ ">"));}  }
class C{  public void close() throws IOException {  raf.close();  raf=null;}  }
class C{  public static List<String> findSchemeMatch(String schemeToFind,boolean matchAnywhere){  return findSchemeMatch(null,schemeToFind,matchAnywhere,false);}  }
class C{  public static Border createLoweredBevelBorder(){  return createSharedBevel(BevelBorder.LOWERED);}  }
class C{  public void columnRemoved(TableColumnModelEvent e){  LimeTableColumn ltc;  TableColumnModel tcm=table.getColumnModel();  for (int i=0; i < tcm.getColumnCount(); i++) {    ltc=(LimeTableColumn)tcm.getColumn(i);    setOrder(ltc,i);  }  LimeTableColumn removedColumn=table.getLastRemovedColumn();  ltc=removedColumn;  setVisibility(ltc,false);  int order=getOrder(ltc);  for (Iterator<LimeTableColumn> i=table.getHiddenColumns(); i.hasNext(); ) {    ltc=i.next();    int current=getOrder(ltc);    if (current > order)     setOrder(ltc,current - 1);  }  if (listener != null)   listener.columnRemoved(removedColumn,table);  save();}  }
class C{  public static Expression createTriggerExpression(final String text){  Expression expr=triggerExpressionsCache.get(text);  if (expr == null) {    expr=createTriggerExpression(text,null);    triggerExpressionsCache.put(text,expr);  }  return expr;}  }
class C{  public static String repeat(String sourceString,int factor){  if (factor < 1) {    return "";  }  if (factor == 1) {    return sourceString;  }  StringBuilder sb=new StringBuilder(factor * sourceString.length());  while (factor > 0) {    sb.append(sourceString);    factor--;  }  return sb.toString();}  }
class C{  private String cronCMDSpliter(String text){  StringBuilder bldcomponent=new StringBuilder("");  final Matcher matcher=m_cronEXECSPattern.matcher(text);  if (matcher.find()) {    for (int i=1; i <= matcher.groupCount() && matcher.group(i) != null; i=i + 7) {      bldcomponent.append(" " + matcher.group(i + 2).trim());      bldcomponent.append(" " + matcher.group(i + 3).trim());    }  }  String component=bldcomponent.toString();  return component.trim();}  }
class C{  public static TypeOfExpression typeOf(Expression expression){  return new TypeOfExpression(expression);}  }
class C{  public static Object instantiate(ClassLoader cls,String beanName) throws IOException, ClassNotFoundException {  return Beans.instantiate(cls,beanName,null,null);}  }
class C{  public String format(int number,int decimalPlaces){  StringBuilder sb=new StringBuilder();  int paddingRequired=decimalPlaces - (String.valueOf(number).length());  for (int x=0; x < paddingRequired; x++) {    sb.append("0");  }  sb.append(number);  return sb.toString();}  }
class C{  public Confirmation(X509Certificate certificate){  Validate.notNull(certificate);  this.type=ConfirmationType.HOLDER_OF_KEY;  this.inResponseTo=null;  this.recipient=null;  this.certificate=certificate;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void defaultInit(){  addDataSources(INITIAL_DATA_SOURCES);}  }
class C{  @Override public Object[] next(){  return parseData();}  }
class C{  private String constructRemoveLUNsQuery(String systemId,List<Path> pathList,String model){  Map<String,Object> attributeMap=new HashMap<String,Object>();  StorageArray array=new StorageArray(systemId);  Delete deleteOp=new Delete(HDSConstants.LUN_TARGET);  attributeMap.put(HDSConstants.STORAGEARRAY,array);  attributeMap.put(HDSConstants.DELETE,deleteOp);  attributeMap.put(HDSConstants.MODEL,model);  attributeMap.put(HDSConstants.PATH_LIST,pathList);  return InputXMLGenerationClient.getInputXMLString(HDSConstants.DELETE_PATH_FROM_HSD_OP,attributeMap,HDSConstants.HITACHI_INPUT_XML_CONTEXT_FILE,HDSConstants.HITACHI_SMOOKS_CONFIG_FILE);}  }
class C{  public static void checkForRemainingOptions(String[] options) throws Exception {  int illegalOptionsFound=0;  StringBuffer text=new StringBuffer();  if (options == null) {    return;  }  for (int i=0; i < options.length; i++) {    if (options[i].length() > 0) {      illegalOptionsFound++;      text.append(options[i] + ' ');    }  }  if (illegalOptionsFound > 0) {    throw new Exception("Illegal options: " + text);  }}  }
class C{  public void close() throws CqClosedException, CqException {  close(true);}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  protected int expectedMissesPerPut(boolean isPrimary){  return 1;}  }
class C{  public void removeMigrations(List<String> migrationNames) throws VPlexApiException {  s_logger.info("Request to remove migrations on VPlex at {}",_baseURI);  _migrationMgr.removeMigrations(migrationNames);}  }
class C{  @Override protected void onRestart(){  super.onRestart();  Log.d(TAG,"onRestart() - the activity is about to be restarted()");}  }
class C{  public int optInt(String key){  return this.optInt(key,0);}  }
class C{  public void before(PropertyInfoRestRep oldProps,PropertyInfoRestRep newProps){  if (!isPropertyChanged(oldProps,newProps,_propertyName)) {    return;  }  String newValue=newProps.getProperty(_propertyName);  ArgumentValidator.checkRange(Integer.parseInt(newValue),Constants.MIN_TOKEN_IDLE_TIME,Constants.MAX_TOKEN_IDLE_TIME,_propertyName);}  }
class C{  protected GenExpr_Impl(){  super();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  java.io.File f=getFile(stack);  Agent a=(Agent)stack.pop();  if (Permissions.hasPermission(Permissions.PERMISSION_RECORDINGSCHEDULE,stack.getUIMgr()) && Permissions.hasPermission(Permissions.PERMISSION_CONVERSION,stack.getUIMgr()))   a.setAutoConvertDest(f);  return null;}  }
class C{  public boolean hasCycles(){  boolean[] bDone=new boolean[m_nNodes];  for (int iNode=0; iNode < m_nNodes; iNode++) {    boolean bFound=false;    for (int iNode2=0; !bFound && iNode2 < m_nNodes; iNode2++) {      if (!bDone[iNode2]) {        boolean bHasNoParents=true;        for (int iParent=0; iParent < m_nNodes; iParent++) {          if (m_bits[iParent + iNode2 * m_nNodes] && !bDone[iParent]) {            bHasNoParents=false;          }        }        if (bHasNoParents) {          bDone[iNode2]=true;          bFound=true;        }      }    }    if (!bFound) {      return true;    }  }  return false;}  }
class C{  public CacheRuntimeException(String msg){  super(msg);}  }
class C{  public void reportSimUnlocked(){  reportSimUnlocked(MSimTelephonyManager.getDefault().getDefaultSubscription());}  }
class C{  public static String toJvmName(CtClass clazz){  if (clazz.isArray())   return of(clazz); else   return toJvmName(clazz.getName());}  }
class C{  private void handleRegisterCustomer(TriggerProcess process,LocalizerFacade facade) throws IOException, WSDLException, ParserConfigurationException {  INotificationServiceAdapter serviceClient=getServiceClient(process.getTriggerDefinition());  VOTriggerProcess vo=TriggerProcessAssembler.toVOTriggerProcess(process,facade);  VOOrganization organization=getParamValue(process.getParamValueForName(TriggerProcessParameterName.ORGANIZATION),VOOrganization.class);  VOUserDetails user=getParamValue(process.getParamValueForName(TriggerProcessParameterName.USER),VOUserDetails.class);  Properties organizationProperties=getParamValue(process.getParamValueForName(TriggerProcessParameterName.ORGANIZATION_PROPERTIES),Properties.class);  serviceClient.onRegisterCustomer(VOConverter.convertToApi(vo),VOConverter.convertToApi(organization),VOConverter.convertToApi(user),organizationProperties);  updateProcessState(process);}  }
class C{  private void addDelegateFields(){  visitField(ACC_PRIVATE + ACC_FINAL,CLOSURES_MAP_FIELD,"Ljava/util/Map;",null,null);  if (generateDelegateField) {    visitField(ACC_PRIVATE + ACC_FINAL,DELEGATE_OBJECT_FIELD,BytecodeHelper.getTypeDescription(delegateClass),null,null);  }}  }
class C{  public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (!(obj instanceof SimpleTimeZone)) {    return false;  }  SimpleTimeZone that=(SimpleTimeZone)obj;  return getID().equals(that.getID()) && hasSameRules(that);}  }
class C{  static int gTypeMeasureDim(int gType){  return (gType % 1000) / 100;}  }
class C{  public Object remove(String key){  return this.map.remove(key);}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  @Ignore("TODO: test is disabled") @Test public void test1AllCommit() throws Exception {  VM vm0=Host.getHost(0).getVM(0);  AsyncInvocation asyncObj1=vm0.invokeAsync(null);  ThreadUtils.join(asyncObj1,30 * 1000);  if (asyncObj1.exceptionOccurred()) {    Assert.fail("asyncObj1 failed",asyncObj1.getException());  }  vm0.invoke(null);}  }
class C{  public boolean hasLabel(){  return super.hasAttribute(LABEL);}  }
class C{  protected synchronized void log(AbstractExplorerTab tab,String msg){  m_TextArea.append("[" + m_Formatter.format(new Date()) + "] ");  if (tab != null)   m_TextArea.append(tab.getTitle() + ": " + msg); else   m_TextArea.append(msg);  m_TextArea.append("\n");  m_TextArea.setCaretPosition(m_TextArea.getDocument().getLength());}  }
class C{  public synchronized static void clearWeakReferencesNow(){  LAYOUTS.clear();}  }
class C{  public ContextClassLoaderLocal(){  super();}  }
class C{  protected final void nioWriteFully(SocketChannel channel,ByteBuffer buffer,boolean forceAsync,DistributionMessage msg) throws IOException, ConnectionException {  final DMStats stats=this.owner.getConduit().stats;  if (!this.sharedResource) {    stats.incTOSentMsg();  }  if (useSyncWrites(forceAsync)) {    if (this.asyncQueuingInProgress) {      if (addToQueue(buffer,msg,false)) {        return;      }    }    long startLock=stats.startSocketLock();synchronized (this.outLock) {      stats.endSocketLock(startLock);      if (this.asyncQueuingInProgress) {        if (addToQueue(buffer,msg,false)) {          return;        }      }      do {        int amtWritten=0;        long start=stats.startSocketWrite(true);        try {          amtWritten=channel.write(buffer);        }  finally {          stats.endSocketWrite(true,start,amtWritten,0);        }      } while (buffer.remaining() > 0);    }  } else {    writeAsync(channel,buffer,forceAsync,msg,stats);  }}  }
class C{  public void logEvent(String eventName,double valueToSum){  logEvent(eventName,valueToSum,null);}  }
class C{  public boolean isRunning(){  return run;}  }
class C{  private void cancelDuplicateResultEdges(){  for (Iterator it=graph.getEdgeEnds().iterator(); it.hasNext(); ) {    DirectedEdge de=(DirectedEdge)it.next();    DirectedEdge sym=de.getSym();    if (de.isInResult() && sym.isInResult()) {      de.setInResult(false);      sym.setInResult(false);    }  }}  }
class C{  public CircularQueue(){  this(DEFAULT_CAPACITY);}  }
class C{  public void buildEmailandSms(final PropertyImpl property,final String applicationType){  for (  PropertyOwnerInfo ownerInfo : property.getBasicProperty().getPropertyOwnerInfo()) {    buildEmailAndSms(property,ownerInfo.getOwner(),applicationType);  }}  }
class C{  public int darkenColor(int color){  int amount=30;  int r=Color.red(color);  int g=Color.green(color);  int b=Color.blue(color);  int a=Color.alpha(color);  if (r - amount >= 0) {    r-=amount;  } else {    r=0;  }  if (g - amount >= 0) {    g-=amount;  } else {    g=0;  }  if (b - amount >= 0) {    b-=amount;  } else {    b=0;  }  return Color.argb(a,r,g,b);}  }
class C{  public void addViewToFadeList(View view){  if (mFadeViewList == null) {    mFadeViewList=new LinkedList<View>();  }  if (view != null) {    mFadeViewList.add(view);  }}  }
class C{  public void addSubInterface(InterfaceType type){  addSubInterfaceNoBidirectionalUpdate(type);  type.addSuperInterfaceNoBidirectionalUpdate(this);}  }
class C{  public boolean approveIt(){  log.info("approveIt - " + toString());  setIsApproved(true);  return true;}  }
class C{  private boolean isStandalone(){  return true;}  }
class C{  public AbstractMRMessage encodeForHardware(CanMessage m){  MergMessage ret=new MergMessage(m);  return ret;}  }
class C{  private void testSessionExpire(int nodes) throws Throwable {  createServers(nodes);  CopycatClient client1=createClient();  CopycatClient client2=createClient();  client1.onEvent("expired",null);  client1.submit(new TestExpire()).thenRun(null);  ((DefaultCopycatClient)client2).kill().thenRun(null);  await(Duration.ofSeconds(10).toMillis(),3);}  }
class C{  private int handleR(String value,DoubleMetaphoneResult result,int index,boolean slavoGermanic){  if (index == value.length() - 1 && !slavoGermanic && contains(value,index - 2,2,"IE") && !contains(value,index - 4,2,"ME","MA")) {    result.appendAlternate('R');  } else {    result.append('R');  }  return charAt(value,index + 1) == 'R' ? index + 2 : index + 1;}  }
class C{  public void backgroundTasks(){  if (!USE_MINIMAL_LOGGING)   log.info("Background Tasks Started");  if (isAppInForeground()) {    cancelUnreadMessagesNotification();  }  PeerManager peerManager=PeerManager.getInstance(getApplicationContext());  peerManager.tasks();  if (!mBluetoothSpeaker.tasks())   return;  if (!mWifiDirectSpeaker.tasks())   return;  List<Peer> peers=peerManager.getPeers();  if (peers.size() > 0 && readyToConnect()) {    log.info(String.format("Can connect with %d peers",peers.size()));    if (SecurityManager.getCurrentProfile(this).isRandomExchange()) {      log.info("Current security profile state that we should pick one random peer to interact with");      Peer selectedPeer=pickBestPeer(peers);      peers.clear();      peers.add(selectedPeer);      ExchangeHistoryTracker.ExchangeHistoryItem historyItem=ExchangeHistoryTracker.getInstance().getHistoryItem(selectedPeer.address);      if (historyItem != null) {        ExchangeHistoryTracker.getInstance().updatePickHistory(selectedPeer.address);      } else {        ExchangeHistoryTracker.getInstance().updateHistory(this,selectedPeer.address);      }    }    log.info(String.format("Checking %d peers",peers.size()));    for (    Peer peer : peers) {      log.debug("Checking peer:" + peer);      try {        if (peerManager.thisDeviceSpeaksTo(peer)) {          log.debug("This device is in charge of starting conversation");          if (USE_BACKOFF) {            ExchangeHistoryTracker.ExchangeHistoryItem historyItem=ExchangeHistoryTracker.getInstance().getHistoryItem(peer.address);            boolean hasHistory=historyItem != null;            boolean storeVersionChanged=false;            boolean waitedMuch=false;            if (hasHistory) {              storeVersionChanged=!historyItem.storeVersion.equals(MessageStore.getInstance(MurmurService.this).getStoreVersion());              waitedMuch=historyItem.lastExchangeTime + Math.min(Math.pow(2,historyItem.attempts) * BACKOFF_FOR_ATTEMPT_MILLIS,BACKOFF_MAX) < System.currentTimeMillis();            }            if (!hasHistory || storeVersionChanged || waitedMuch) {              log.debug("Can connect with peer: " + peer);              connectTo(peer);            } else {              log.debug("Backoff from peer: " + peer + " [previously interacted:"+ hasHistory+ ", store ready:"+ storeVersionChanged+ " ,backoff timeout:"+ waitedMuch+ "]");            }          } else {            connectTo(peer);          }        } else {          log.debug("Other device is in charge of starting conversation");        }      } catch (      NoSuchAlgorithmException e) {        log.error("No such algorithm for hashing in thisDeviceSpeaksTo!? ",e);        return;      }catch (      UnsupportedEncodingException e) {        log.error("Unsupported encoding exception in thisDeviceSpeaksTo!?",e);        return;      }    }  } else {    log.info(String.format("Not connecting (%d peers, ready to connect is %s)",peers.size(),readyToConnect()));  }  mBackgroundTaskRunCount++;}  }
class C{  public static InputStream post(URL url,Map parameters) throws IOException {  return new ClientHttpRequest(url).post(parameters);}  }
class C{  private int parseVersion(final byte[] b,final int off) throws ParseException {  version_=PrimitivesParser.parseByte(b,off);  return 1;}  }
class C{  public void testResultSetAccessors() throws Exception {  if (Util.getJVMVersion() == 6 && System.getProperty("os.name").toUpperCase().indexOf("WINDOWS") != -1) {    return;  }  createTable("marktest","(intField INT, floatField DOUBLE, timeField TIME, datetimeField DATETIME, stringField VARCHAR(64))");  this.stmt.executeUpdate("INSERT INTO marktest VALUES (123456789, 12345.6789, NOW(), NOW(), 'abcdefghijklmnopqrstuvABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@')");  this.rs=this.stmt.executeQuery("SELECT intField, floatField, timeField, datetimeField, stringField FROM marktest");  this.rs.next();  int numLoops=100000;  long start=currentTimeMillis();  for (int i=0; i < numLoops; i++) {    this.rs.getInt(1);  }  double getIntAvgMs=(double)(currentTimeMillis() - start) / numLoops;  checkTime("ResultSet.getInt()",getIntAvgMs);  start=currentTimeMillis();  for (int i=0; i < numLoops; i++) {    this.rs.getDouble(2);  }  double getDoubleAvgMs=(double)(currentTimeMillis() - start) / numLoops;  checkTime("ResultSet.getDouble()",getDoubleAvgMs);  start=currentTimeMillis();  for (int i=0; i < numLoops; i++) {    this.rs.getTime(3);  }  double getTimeAvgMs=(double)(currentTimeMillis() - start) / numLoops;  checkTime("ResultSet.getTime()",getTimeAvgMs);  start=currentTimeMillis();  for (int i=0; i < numLoops; i++) {    this.rs.getTimestamp(4);  }  double getTimestampAvgMs=(double)(currentTimeMillis() - start) / numLoops;  checkTime("ResultSet.getTimestamp()",getTimestampAvgMs);  start=currentTimeMillis();  for (int i=0; i < numLoops; i++) {    this.rs.getDate(4);  }  double getDateAvgMs=(double)(currentTimeMillis() - start) / numLoops;  checkTime("ResultSet.getDate()",getDateAvgMs);  start=currentTimeMillis();  for (int i=0; i < numLoops; i++) {    this.rs.getString(5);  }  double getStringAvgMs=(double)(currentTimeMillis() - start) / numLoops;  checkTime("ResultSet.getString()",getStringAvgMs);  start=currentTimeMillis();  for (int i=0; i < numLoops; i++) {    this.rs.getObject(5);  }  double getStringObjAvgMs=(double)(currentTimeMillis() - start) / numLoops;  checkTime("ResultSet.getObject() on a string",getStringObjAvgMs);}  }
class C{  public void increment(){  count++;}  }
class C{  public List<DelaunayTriangle> surroundingTriangles(DelaunayVertex site,DelaunayTriangle triangle){  if (!triangle.contains(site)) {    throw new IllegalArgumentException("Site not in triangle");  }  List<DelaunayTriangle> list=new ArrayList<DelaunayTriangle>();  DelaunayTriangle start=triangle;  DelaunayVertex guide=triangle.getVertexButNot(site);  while (true) {    list.add(triangle);    DelaunayTriangle previous=triangle;    triangle=this.neighborOpposite(guide,triangle);    guide=previous.getVertexButNot(site,guide);    if (triangle == start) {      break;    }  }  return list;}  }
class C{  @Override protected void sendFunctionGroup3(){  int data=0x00 | (f9 ? 0x01 : 0) | (f10 ? 0x02 : 0)| (f11 ? 0x04 : 0)| (f12 ? 0x08 : 0);  data=data + 0xA0;  MrcMessage m=MrcMessage.getSendFunction(3,addressLo,addressHi,data);  if (m != null) {    tc.sendMrcMessage(m);  }}  }
class C{  protected Map<String,Object> internalBind(String name,Object value) throws NamingException {  assert name != null && name.length() > 0;  assert !frozen;  Map<String,Object> newBindings=new HashMap<>();  int pos=name.indexOf('/');  if (pos == -1) {    if (treeBindings.put(name,value) != null) {      throw new NamingException("Something already bound at " + name);    }    bindings.put(name,value);    newBindings.put(name,value);  } else {    String segment=name.substring(0,pos);    assert segment != null;    assert !segment.equals("");    Object o=treeBindings.get(segment);    if (o == null) {      o=newContext();      treeBindings.put(segment,o);      bindings.put(segment,o);      newBindings.put(segment,o);    } else     if (!(o instanceof ReadOnlyContext)) {      throw new NamingException("Something already bound where a subcontext should go");    }    ReadOnlyContext readOnlyContext=(ReadOnlyContext)o;    String remainder=name.substring(pos + 1);    Map<String,Object> subBindings=readOnlyContext.internalBind(remainder,value);    for (    Map.Entry<String,Object> entry : subBindings.entrySet()) {      String subName=segment + "/" + entry.getKey();      Object bound=entry.getValue();      treeBindings.put(subName,bound);      newBindings.put(subName,bound);    }  }  return newBindings;}  }
class C{  @Override public synchronized void updateBytes(String columnName,byte[] x) throws SQLException {  updateBytes(findColumn(columnName),x);}  }
class C{  public SimpleScalar(String value){  this.value=value;}  }
class C{  public MappedBusReader(String fileName,long fileSize,int recordSize){  this.fileName=fileName;  this.fileSize=fileSize;  this.recordSize=recordSize;}  }
class C{  public HessianSerializerOutput(){  super(null);}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public em addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  private void verifyAllVolumesBelongToSameVpool(List<Volume> volumes){  URI vPool=null;  for (  Volume volume : volumes) {    if (vPool != null && !vPool.toString().equalsIgnoreCase(volume.getVirtualPool().toString())) {      throw APIException.badRequests.volumesShouldBelongToSameVpool();    }    vPool=volume.getVirtualPool();  }}  }
class C{  protected static Boolean lock(String serviceName,Object name){  DistributedLockService service=DistributedLockService.getServiceNamed(serviceName);  boolean locked=service.lock(name,1000,-1);  return Boolean.valueOf(locked);}  }
class C{  public ExtraProvider overrideSubject(String subject){  this.overriddenSubject=subject;  return this;}  }
class C{  public void testDoCheckWithNotDetectionResultOverridenByConstructorAndNoMessageThrown(){  LOGGER.debug("doCheckWithNotDetectionResultOverridenByConstructorAndNoMessageThrown");  elements.add(element);  mockTestSolutionHandler.addTestSolution(TestSolution.PASSED);  expectLastCall().once();  AttributePresenceChecker instance=new AttributePresenceChecker(AttributeStore.CLASS_ATTR,TestSolution.FAILED,TestSolution.PASSED,ATTR_PRESENT_MSG,null);  instance.setProcessRemarkService(mockProcessRemarkService);  replay(mockSSPHandler,mockTestSolutionHandler,mockProcessRemarkService);  instance.doCheck(mockSSPHandler,elements,mockTestSolutionHandler);  verify(mockSSPHandler,mockTestSolutionHandler,mockProcessRemarkService);}  }
class C{  public static <T>FutureW<T> fromIterable(final Iterable<T> iterable,final Executor ex){  return FutureW.ofSupplier(null).map(null);}  }
class C{  private void validateAnnotationMethods(Method[] memberMethods){  boolean valid=true;  for (  Method method : memberMethods) {    if (method.getModifiers() != (Modifier.PUBLIC | Modifier.ABSTRACT) || method.isDefault() || method.getParameterCount() != 0 || method.getExceptionTypes().length != 0) {      valid=false;      break;    }    Class<?> returnType=method.getReturnType();    if (returnType.isArray()) {      returnType=returnType.getComponentType();      if (returnType.isArray()) {        valid=false;        break;      }    }    if (!((returnType.isPrimitive() && returnType != void.class) || returnType == java.lang.String.class || returnType == java.lang.Class.class || returnType.isEnum() || returnType.isAnnotation())) {      valid=false;      break;    }    String methodName=method.getName();    if ((methodName.equals("toString") && returnType == java.lang.String.class) || (methodName.equals("hashCode") && returnType == int.class) || (methodName.equals("annotationType") && returnType == java.lang.Class.class)) {      valid=false;      break;    }  }  if (valid)   return; else   throw new AnnotationFormatError("Malformed method on an annotation type");}  }
class C{  @Override public String toString(){  StringBuffer sb=new StringBuffer("MPaymentTerm[");  sb.append(get_ID()).append("-").append(getName()).append(",Valid=").append(isValid()).append("]");  return sb.toString();}  }
class C{  public void findAndInit(Object someObj){  if (someObj instanceof MapBean) {    setMap((MapBean)someObj);  }}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  void showException(){  createTextException();  this.parent.pack();}  }
class C{  public static boolean isKeyspaceAbsenceError(Throwable e){  while (e != null) {    if (e instanceof InvalidQueryException && (KEYSPACE_EXIST_ERROR1.matcher(e.getMessage()).matches() || KEYSPACE_EXIST_ERROR2.matcher(e.getMessage()).matches()))     return true;    e=e.getCause();  }  return false;}  }
class C{  private Module addModule(final INaviModule module){  Module apiModule=null;  apiModule=ObjectFinders.getObject(module,m_database.getModules());  if (apiModule == null) {    NaviLogger.severe("Error: Could not determine API module for native module '%s'",module.getConfiguration().getName());  } else {    m_modules.add(apiModule);  }  return apiModule;}  }
class C{  protected long determineNextBatchSize(long R,int P){  int x=2;  long K=(long)Math.ceil((double)R / (x * P));  if (K < 1)   K=1;  return K;}  }
class C{  public void addUserListener(UserListener listener){  if (listener != null) {    userListener.add(listener);  }}  }
class C{  protected void writeSetterBody(JavaFileWriter writer,MethodDeclarationParameters params) throws IOException {  writeSetterBody(writer,params.getArgumentNames().get(0));}  }
class C{  protected void startDocument() throws XMLStreamException, IOException {  this.zipStream.putNextEntry(new ZipEntry(this.getMainFileName()));  this.writer=XMLOutputFactory.newInstance().createXMLStreamWriter(this.zipStream);  this.writer.writeStartDocument();  this.writer.writeStartElement("kml");  this.writer.writeDefaultNamespace(KMLConstants.KML_NAMESPACE);  this.writer.setPrefix("gx",GXConstants.GX_NAMESPACE);  this.writer.writeNamespace("gx",GXConstants.GX_NAMESPACE);  this.writer.writeStartElement("Document");}  }
class C{  public void run(){  ActivationLibrary.deactivate(this,getID());}  }
class C{  double zeta(long n,double theta){  countforzeta=n;  return zetastatic(n,theta);}  }
class C{  public static List<VisorLogFile> fileTree(File file,int maxDepth,@Nullable FileFilter filter){  if (file.isDirectory()) {    File[] files=(filter == null) ? file.listFiles() : file.listFiles(filter);    if (files == null)     return Collections.emptyList();    List<VisorLogFile> res=new ArrayList<>(files.length);    for (    File f : files) {      if (f.isFile() && f.length() > 0)       res.add(new VisorLogFile(f)); else       if (maxDepth > 1)       res.addAll(fileTree(f,maxDepth - 1,filter));    }    return res;  }  return F.asList(new VisorLogFile(file));}  }
class C{  public static int uninstallSilent(Context context,String packageName){  return uninstallSilent(context,packageName,true);}  }
class C{  public UniformQuadBatch(GL20 gl){  this(gl,new Source());}  }
class C{  public boolean canScrollUp(){  return mScroll < mMaxScroll;}  }
class C{  @Override public StringBuffer format(double value,StringBuffer buffer,FieldPosition field){  for (int i=choiceLimits.length - 1; i >= 0; i--) {    if (choiceLimits[i] <= value) {      return buffer.append(choiceFormats[i]);    }  }  return choiceFormats.length == 0 ? buffer : buffer.append(choiceFormats[0]);}  }
class C{  Feedlet(TraceEngine engine,int feedletIndex){  this.engine=engine;  this.feedletIndex=feedletIndex;  this.sequenceNumber=0;  this.events=null;  this.enabled=true;}  }
class C{  protected void commitHelper(boolean losingFocus){  if (editorNode == null)   return;  try {    builder.validateValue();    commitEdit(((T)builder.getValue()));  } catch (  Exception ex) {    if (losingFocus) {      cancelEdit();    }  }}  }
class C{  private OrderedCollection<PortChangeEvent> handlePortStatusDelete(ImmutablePort delPort){  lock.writeLock().lock();  OrderedCollection<PortChangeEvent> events=new LinkedHashSetWrapper<PortChangeEvent>();  try {    Map<Short,ImmutablePort> newPortByNumber=new HashMap<Short,ImmutablePort>(portsByNumber);    ImmutablePort prevPort=portsByNumber.get(delPort.getPortNumber());    if (prevPort == null) {      prevPort=portsByName.get(delPort.getName());      if (prevPort != null) {        newPortByNumber.remove(prevPort.getPortNumber());        events.add(new PortChangeEvent(prevPort,PortChangeType.DELETE));      }    } else     if (prevPort.getName().equals(delPort.getName())) {      newPortByNumber.remove(delPort.getPortNumber());      events.add(new PortChangeEvent(delPort,PortChangeType.DELETE));    } else {      newPortByNumber.remove(delPort.getPortNumber());      events.add(new PortChangeEvent(prevPort,PortChangeType.DELETE));      prevPort=portsByName.get(delPort.getName().toLowerCase());      if (prevPort != null) {        newPortByNumber.remove(prevPort.getPortNumber());        events.add(new PortChangeEvent(prevPort,PortChangeType.DELETE));      }    }    updatePortsWithNewPortsByNumber(newPortByNumber);    return events;  }  finally {    lock.writeLock().unlock();  }}  }
class C{  private boolean isJUnit3Test(Class scriptClass){  boolean isUnitTestCase=false;  try {    try {      Class testCaseClass=this.loader.loadClass("junit.framework.TestCase");      if (testCaseClass.isAssignableFrom(scriptClass)) {        isUnitTestCase=true;      }    } catch (    ClassNotFoundException e) {    }  } catch (  Throwable e) {  }  return isUnitTestCase;}  }
class C{  public static int randomInt(int maxValue){  return random.randomInt(maxValue);}  }
class C{  public void testParseArgs(){  assertEquals(Arrays.<String>asList(),LaunchConfigurationProcessorUtilities.parseArgs(null));  assertEquals(Arrays.<String>asList(),LaunchConfigurationProcessorUtilities.parseArgs(""));  assertEquals(Arrays.<String>asList(),LaunchConfigurationProcessorUtilities.parseArgs("   "));  assertEquals(Arrays.asList("-one"),LaunchConfigurationProcessorUtilities.parseArgs("-one"));  assertEquals(Arrays.asList("-one","-two"),LaunchConfigurationProcessorUtilities.parseArgs("-one -two"));  assertEquals(Arrays.asList("-one","value"),LaunchConfigurationProcessorUtilities.parseArgs("-one value"));  assertEquals(Arrays.asList("-one","value with spaces"),LaunchConfigurationProcessorUtilities.parseArgs("-one \"value with spaces\""));  assertEquals(Arrays.asList("-one","test InnerQuotes"),LaunchConfigurationProcessorUtilities.parseArgs("-one test\" InnerQuotes\""));  assertEquals(Arrays.asList("\""),LaunchConfigurationProcessorUtilities.parseArgs("\\\""));}  }
class C{  void showBox(String message,Node content,Button... buttons){  for (  Button btn : buttons) {    EventHandler<ActionEvent> handler=btn.getOnAction();    btn.setOnAction(null);  }  Text text=createMessage(message);  HBox hbox=new HBox(buttons);  hbox.setAlignment(Pos.CENTER);  VBox vbox=new VBox(50,text,content,hbox);  vbox.setAlignment(Pos.CENTER);  vbox.setUserData(new Point2D(Math.max(text.getLayoutBounds().getWidth(),200),text.getLayoutBounds().getHeight() * 3 + 50 * 2 + content.getLayoutBounds().getHeight()));  setContent("Dialog",vbox);  show();}  }
class C{  protected Anonymous_activity_1_Impl(){  super();}  }
class C{  public void refreshCrl(String tenantName){  IdmCrlCache crlCache=tenantCrlCache.get(tenantName);  if (null == crlCache) {    return;  }  try {    if (logger.isDebugEnabled()) {      logger.debug(String.format("TenantCrlCache.refreshCrl(): Start refreshing for tenant %s ... ",tenantName));    }    crlCache.refresh();  } catch (  CrlDownloadException e) {    logger.error("TenantCrlCache fails to refresh some cache for tenant " + tenantName,e.getMessage());  }}  }
class C{  public boolean containsValue(double val){  for (  NSObject o : dict.values()) {    if (o.getClass().equals(NSNumber.class)) {      NSNumber num=(NSNumber)o;      if (num.isReal() && num.doubleValue() == val)       return true;    }  }  return false;}  }
class C{  public Name typaramName(int i){  return names.fromString("A" + i);}  }
class C{  public CacheHeader(String key,Entry entry){  this.key=key;  this.size=entry.data.length;  this.etag=entry.etag;  this.serverDate=entry.serverDate;  this.lastModified=entry.lastModified;  this.ttl=entry.ttl;  this.softTtl=entry.softTtl;  this.responseHeaders=entry.responseHeaders;}  }
class C{  public CompositeGraphicsNode buildCompositeGraphicsNode(BridgeContext ctx,Element e,CompositeGraphicsNode gn){  BindableElement be=(BindableElement)e;  Element shadowTree=be.getXblShadowTree();  UpdateManager um=ctx.getUpdateManager();  ScriptingEnvironment se=um == null ? null : um.getScriptingEnvironment();  if (se != null && shadowTree != null) {    se.addScriptingListeners(shadowTree);  }  if (gn == null) {    gn=new CompositeGraphicsNode();    associateSVGContext(ctx,e,gn);  } else {    int s=gn.size();    for (int i=0; i < s; i++) {      gn.remove(0);    }  }  GVTBuilder builder=ctx.getGVTBuilder();  if (shadowTree != null) {    GraphicsNode shadowNode=builder.build(ctx,shadowTree);    if (shadowNode != null) {      gn.add(shadowNode);    }  } else {    for (Node m=e.getFirstChild(); m != null; m=m.getNextSibling()) {      if (m.getNodeType() == Node.ELEMENT_NODE) {        GraphicsNode n=builder.build(ctx,(Element)m);        if (n != null) {          gn.add(n);        }      }    }  }  return gn;}  }
class C{  public FastByteArrayOutputStream(){  buf=new byte[DEFAULT_INIT_SIZE];  bumpLen=DEFAULT_BUMP_SIZE;}  }
class C{  public CSVReader(Reader reader,char separator,char quotechar,int line){  this(reader,separator,quotechar,CSVParser.DEFAULT_ESCAPE_CHARACTER,line,CSVParser.DEFAULT_STRICT_QUOTES);}  }
class C{  public SwapValues take() throws InterruptedException {  lock.lock();  try {    while (size < minTakeSize)     mayTake.await();    int size=0;    int cnt=0;    for (    SwapValue val : deq) {      size+=val.len;      cnt++;      if (size >= minTakeSize)       break;    }    SwapValue[] vals=new SwapValue[cnt];    for (int i=0; i < cnt; i++) {      SwapValue val=deq.pollFirst();      vals[i]=val;    }    if ((this.size-=size) < maxSize)     mayAdd.signalAll();    return new SwapValues(vals,size);  }  finally {    lock.unlock();  }}  }
class C{  @SuppressWarnings("rawtypes") private static AbstractLiteralIV inlineIvFrom(int signum,String localName){  int firstDash=localName.indexOf('-');  long entity=Long.valueOf(localName.substring(1,firstDash),10);  try {    UUID u=UUID.fromString(localName.substring(firstDash + 1));    BigInteger i=BigInteger.valueOf(signum * entity);    i=i.shiftLeft(Long.SIZE).or(unsigned(u.getMostSignificantBits()));    i=i.shiftLeft(Long.SIZE).or(unsigned(u.getLeastSignificantBits()));    return new XSDIntegerIV(i);  } catch (  IllegalArgumentException e) {    Logger.getLogger(WikibaseStyleStatementInlineUriHandler.class).warn("tmp",e);    return null;  }}  }
class C{  private void readObject(){}  }
class C{  @Override public void playDismissAnimation(){  dismissAnimation.play();}  }
class C{  public int testPrepGeomNotCached(Geometry g,List lines){  System.out.println("Using NON-CACHED Prepared Geometry");  PreparedGeometryFactory pgFact=new PreparedGeometryFactory();  int count=0;  for (Iterator i=lines.iterator(); i.hasNext(); ) {    LineString line=(LineString)i.next();    PreparedGeometry prepGeom=pgFact.create(g);    if (prepGeom.intersects(line))     count++;  }  return count;}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.461 -0500",hash_original_method="C6C3CAC58AEE8EB92E7D233D1233B510",hash_generated_method="69802445E72FE1E207C3697FD4610E2E") public void putChar(String key,char value){  unparcel();  mMap.put(key,value);}  }
class C{  public void defineFillStyle(Color color2){  Color color=color2;  if (color == null) {    color=new Color(255,255,255);  }  ColorFill fill=new ColorFill(color);  if (color instanceof AlphaColor) {    hasAlpha=true;  }  elements.add(fill);}  }
class C{  public ReactiveRequest(int readTimeoutMillis,int connectTimeoutMillis){  this.client=initClient(readTimeoutMillis,connectTimeoutMillis);  contentType=MediaType.APPLICATION_JSON;  accept=MediaType.APPLICATION_JSON;  stringFormat="UTF-8";}  }
class C{  public void write(char cbuf[],int off,int len) throws IOException {  if (_outputStream == null)   throw new IOException("Writer closed");  final int off_plus_len=off + len;  for (int i=off; i < off_plus_len; ) {    char c=cbuf[i++];    if (c < 0x80) {      _bytes[_index]=(byte)c;      if (++_index >= _bytes.length) {        flushBuffer();      }    } else {      write(c);    }  }}  }
class C{  static boolean isSimpleName(String s){  for (  char c : s.toCharArray()) {    if (c != '.' && c != '_' && c != '-' && !Character.isLetterOrDigit(c)) {      return false;    }  }  return true;}  }
class C{  public FBMaintenanceManager(){  super();}  }
class C{  public String semanticvectorfile(){  return semanticvectorfile;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.FORMAL_PARAMETER__DECLARED_TYPE_REF:    return declaredTypeRef != null;case N4JSPackage.FORMAL_PARAMETER__BOGUS_TYPE_REF:  return bogusTypeRef != null;case N4JSPackage.FORMAL_PARAMETER__NAME:return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);case N4JSPackage.FORMAL_PARAMETER__ANNOTATIONS:return annotations != null && !annotations.isEmpty();case N4JSPackage.FORMAL_PARAMETER__VARIADIC:return variadic != VARIADIC_EDEFAULT;case N4JSPackage.FORMAL_PARAMETER__DEFINED_TYPE_ELEMENT:return definedTypeElement != null;case N4JSPackage.FORMAL_PARAMETER__INITIALIZER:return initializer != null;case N4JSPackage.FORMAL_PARAMETER__BINDING_PATTERN:return bindingPattern != null;}return super.eIsSet(featureID);}  }
class C{  public static void buildFacesResolver(FacesCompositeELResolver composite,ApplicationAssociate associate){  if (associate == null) {    String message=MessageUtils.getExceptionMessageString(MessageUtils.NULL_PARAMETERS_ERROR_MESSAGE_ID,"associate");    throw new NullPointerException(message);  }  if (composite == null) {    String message=MessageUtils.getExceptionMessageString(MessageUtils.NULL_PARAMETERS_ERROR_MESSAGE_ID,"composite");    throw new NullPointerException(message);  }  FacesContext facesContext=FacesContext.getCurrentInstance();  if (Util.getFacesConfigXmlVersion(facesContext).equals("2.3") || Util.getWebXmlVersion(facesContext).equals("4.0")) {    javax.enterprise.inject.spi.BeanManager beanManager=Util.getCdiBeanManager(facesContext);    if (beanManager != null) {      composite.add(beanManager.getELResolver());    } else {      throw new FacesException("Unable to find CDI BeanManager");    }    composite.add(FLASH_RESOLVER);    composite.addPropertyELResolver(COMPOSITE_COMPONENT_ATTRIBUTES_EL_RESOLVER);    addELResolvers(composite,associate.getELResolversFromFacesConfig());    addVariableResolvers(composite,FacesCompositeELResolver.ELResolverChainType.Faces,associate);    addPropertyResolvers(composite,associate);    composite.add(associate.getApplicationELResolvers());    composite.addRootELResolver(MANAGED_BEAN_RESOLVER);    composite.addPropertyELResolver(RESOURCE_RESOLVER);    composite.addPropertyELResolver(BUNDLE_RESOLVER);    composite.addRootELResolver(FACES_BUNDLE_RESOLVER);    addEL3_0_Resolvers(composite,associate);    composite.addPropertyELResolver(MAP_RESOLVER);    composite.addPropertyELResolver(LIST_RESOLVER);    composite.addPropertyELResolver(ARRAY_RESOLVER);    composite.addPropertyELResolver(BEAN_RESOLVER);    composite.addRootELResolver(SCOPED_RESOLVER);  } else {    composite.addRootELResolver(IMPLICIT_RESOLVER);    composite.add(FLASH_RESOLVER);    composite.addPropertyELResolver(COMPOSITE_COMPONENT_ATTRIBUTES_EL_RESOLVER);    addELResolvers(composite,associate.getELResolversFromFacesConfig());    addVariableResolvers(composite,FacesCompositeELResolver.ELResolverChainType.Faces,associate);    addPropertyResolvers(composite,associate);    composite.add(associate.getApplicationELResolvers());    composite.addRootELResolver(MANAGED_BEAN_RESOLVER);    composite.addPropertyELResolver(RESOURCE_RESOLVER);    composite.addPropertyELResolver(BUNDLE_RESOLVER);    composite.addRootELResolver(FACES_BUNDLE_RESOLVER);    addEL3_0_Resolvers(composite,associate);    composite.addPropertyELResolver(MAP_RESOLVER);    composite.addPropertyELResolver(LIST_RESOLVER);    composite.addPropertyELResolver(ARRAY_RESOLVER);    composite.addPropertyELResolver(BEAN_RESOLVER);    composite.addRootELResolver(SCOPED_RESOLVER);  }}  }
class C{  @Override public int isNullable(int column) throws SQLException {  try {    debugCodeCall("isNullable",column);    checkColumnIndex(column);    return result.getNullable(--column);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public String prepareIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_PREPARE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  if (!MPeriod.isOpen(getCtx(),getDateAcct(),MDocType.DOCBASETYPE_CashJournal,getAD_Org_ID())) {    m_processMsg="@PeriodClosed@";    return DocAction.STATUS_Invalid;  }  MCashLine[] lines=getLines(false);  if (lines.length == 0) {    m_processMsg="@NoLines@";    return DocAction.STATUS_Invalid;  }  BigDecimal difference=Env.ZERO;  int C_Currency_ID=getC_Currency_ID();  for (int i=0; i < lines.length; i++) {    MCashLine line=lines[i];    if (!line.isActive())     continue;    if (C_Currency_ID == line.getC_Currency_ID())     difference=difference.add(line.getAmount()); else {      BigDecimal amt=MConversionRate.convert(getCtx(),line.getAmount(),line.getC_Currency_ID(),C_Currency_ID,getDateAcct(),0,getAD_Client_ID(),getAD_Org_ID());      if (amt == null) {        m_processMsg="No Conversion Rate found - @C_CashLine_ID@= " + line.getLine();        return DocAction.STATUS_Invalid;      }      difference=difference.add(amt);    }  }  setStatementDifference(difference);  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_PREPARE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  m_justPrepared=true;  if (!DOCACTION_Complete.equals(getDocAction()))   setDocAction(DOCACTION_Complete);  return DocAction.STATUS_InProgress;}  }
class C{  java.sql.Timestamp toSqlTimestamp(Calendar calendar){  return new java.sql.Timestamp(getTimeInMillis(calendar));}  }
class C{  public TypeScriptSearchActionGroup(Page page){  this(page.getSite());}  }
class C{  protected void generateLargeNode(ICubePrimer cube,long seed,CubePos generatedCubePos,double x,double y,double z){  float baseHorizSize=1.0F + this.rand.nextFloat() * 6.0F;  float horizDirAngle=0;  float vertDirAngle=0;  int startWalkedDistance=-1;  int maxWalkedDistance=-1;  double vertCaveSizeMod=0.5;  this.generateNode(cube,seed,generatedCubePos,x,y,z,baseHorizSize,horizDirAngle,vertDirAngle,startWalkedDistance,maxWalkedDistance,vertCaveSizeMod);}  }
class C{  public static void unregisterDownloadFileChangeListener(OnDownloadFileChangeListener onDownloadFileChangeListener){  getFileDownloadManager().unregisterDownloadFileChangeListener(onDownloadFileChangeListener);}  }
class C{  public ConsumerManager(){  this(new RealmVerifierFactory(new YadisResolver(new HttpFetcherFactory())),new Discovery(),new HttpFetcherFactory());}  }
class C{  public static int UTF16toUTF8(final char[] source,final int offset,final int length,byte[] out){  int upto=0;  int i=offset;  final int end=offset + length;  while (i < end) {    final int code=(int)source[i++];    if (code < 0x80)     out[upto++]=(byte)code; else     if (code < 0x800) {      out[upto++]=(byte)(0xC0 | (code >> 6));      out[upto++]=(byte)(0x80 | (code & 0x3F));    } else     if (code < 0xD800 || code > 0xDFFF) {      out[upto++]=(byte)(0xE0 | (code >> 12));      out[upto++]=(byte)(0x80 | ((code >> 6) & 0x3F));      out[upto++]=(byte)(0x80 | (code & 0x3F));    } else {      if (code < 0xDC00 && i < end) {        int utf32=(int)source[i];        if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) {          utf32=(code << 10) + utf32 + SURROGATE_OFFSET;          i++;          out[upto++]=(byte)(0xF0 | (utf32 >> 18));          out[upto++]=(byte)(0x80 | ((utf32 >> 12) & 0x3F));          out[upto++]=(byte)(0x80 | ((utf32 >> 6) & 0x3F));          out[upto++]=(byte)(0x80 | (utf32 & 0x3F));          continue;        }      }      out[upto++]=(byte)0xEF;      out[upto++]=(byte)0xBF;      out[upto++]=(byte)0xBD;    }  }  return upto;}  }
class C{  public void autoCommitIfCluster(){  if (autoCommit && cluster) {    for (int i=0, count=0; i < transferList.size(); i++) {      Transfer transfer=transferList.get(i);      try {        traceOperation("COMMAND_COMMIT",0);        transfer.writeInt(SessionRemote.COMMAND_COMMIT);        done(transfer);      } catch (      IOException e) {        removeServer(e,i--,++count);      }    }  }}  }
class C{  private ProviderList(ProviderConfig[] configs,boolean allLoaded){  this.configs=configs;  this.allLoaded=allLoaded;}  }
class C{  private void finishInstall(File tmpFile,Extension extension) throws IOException {  Preconditions.checkNotNull(tmpFile);  Preconditions.checkNotNull(extension);  Preconditions.checkNotNull(extension.getRowType());  try {    File installedFile=getExtensionFile(extension.getRowType());    FileUtils.moveFile(tmpFile,installedFile);    extensionsByRowtype.put(extension.getRowType(),extension);  } catch (  IOException e) {    log.error("Installing extension failed, while trying to move and rename extension file: " + e.getMessage(),e);    throw e;  }}  }
class C{  private int parseReservedField(final byte[] b,final int off) throws ParseException {  reservedField_=PrimitivesParser.parseInt(b,off);  if (reservedField_ != 0) {    throw new BadCiphertextException("Invalid value for reserved field in ciphertext");  }  return Integer.SIZE / Byte.SIZE;}  }
class C{  public long create_composition_time_to_sample_atom(MP4DataStream bitstream) throws IOException {  log.trace("Composition time to sample atom");  create_full_atom(bitstream);  comptimeToSamplesRecords=new Vector<CompositionTimeSampleRecord>();  entryCount=(int)bitstream.readBytes(4);  log.trace("Composition time to sample entries: {}",entryCount);  readed+=4;  for (int i=0; i < entryCount; i++) {    int sampleCount=(int)bitstream.readBytes(4);    int sampleOffset=(int)bitstream.readBytes(4);    comptimeToSamplesRecords.addElement(new CompositionTimeSampleRecord(sampleCount,sampleOffset));    readed+=8;  }  return readed;}  }
class C{  @Override public synchronized void load(InputStream inStream) throws IOException {  check("putProviderProperty." + name);  if (debug != null) {    debug.println("Load " + name + " provider properties");  }  Properties tempProperties=new Properties();  tempProperties.load(inStream);  implPutAll(tempProperties);}  }
class C{  public double timeToHitHorizontalWall(){  if (vy > 0)   return (1.0 - ry - radius) / vy; else   if (vy < 0)   return (radius - ry) / vy; else   return INFINITY;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:58.393 -0500",hash_original_method="F3233AD918CF97E4872803E9BFDDE6E6",hash_generated_method="7BABBE41588CBA97ACA235C2C2414F90") public void loadPoster(String url){  if (url == null) {    Message message=obtainMessage(LOAD_DEFAULT_POSTER);    sendMessage(message);    return;  }  if (mPosterDownloader != null) {    mPosterDownloader.cancelAndReleaseQueue();  }  mPosterDownloader=new PosterDownloader(url,this);  mPosterDownloader.start();}  }
class C{  protected void performIntersection(Position gridPosition) throws InterruptedException {  Intersection[] intersections=this.terrain.intersect(this.referencePosition,gridPosition);  if (intersections == null || intersections.length == 0) {    this.sightLines.add(new Position[]{this.referencePosition,gridPosition});    return;  }  Vec4 iPoint=intersections[0].getIntersectionPoint();  Vec4 gPoint=terrain.getSurfacePoint(gridPosition.getLatitude(),gridPosition.getLongitude(),gridPosition.getAltitude());  if (iPoint.distanceTo3(this.referencePoint) >= gPoint.distanceTo3(this.referencePoint)) {    this.addSightLine(this.referencePosition,gridPosition);    return;  }  Position iPosition=this.terrain.getGlobe().computePositionFromPoint(iPoint);  this.addSightLine(this.referencePosition,new Position(iPosition,0));  this.addIntersectionPosition(iPosition);  this.updateProgress();}  }
class C{  private boolean isCompatibleCurrency(PriceModel referencePriceModel,VOPriceModel compatiblePriceModel){  if (referencePriceModel != null && compatiblePriceModel != null && referencePriceModel.isChargeable() && compatiblePriceModel.isChargeable()) {    if (!referencePriceModel.getCurrency().getCurrencyISOCode().equals(compatiblePriceModel.getCurrencyISOCode())) {      return false;    }  }  return true;}  }
class C{  private void resetProperties(){  this.popupContainer.getChildren().remove(this);  this.setVisible(false);  scaleTransform.setX(0);  scaleTransform.setY(0);}  }
class C{  public static void assertThrows(Class<?> throwable,CheckedRunnable runnable,Consumer<Throwable> exceptionConsumer){  boolean fail=false;  try {    runnable.run();    fail=true;  } catch (  Throwable t) {    if (!throwable.isInstance(t))     throw new AssertionError("Bad exception type",t);    exceptionConsumer.accept(t);  }  if (fail)   Assert.fail("No exception was thrown");}  }
class C{  public void run(){  while (!threadDone) {    threadSleep();    try {      checkCompile();    } catch (    Throwable t) {      t.printStackTrace();      log.log(Level.SEVERE,Localizer.getMessage("jsp.error.recompile"),t);    }  }}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getCompoundExpr_();}  }
class C{  public Address __rsub__(final Object rhs){  return new Address(getBigInteger(rhs).subtract(m_value));}  }
class C{  private DiyBakedBezierInterpolator(){  super();}  }
class C{  private void handleBlindsClick(int idx,int action){  listener.onBlindClick(idx,action);}  }
class C{  public static int toRealPosition(int position,int count){  position=position - 1;  if (position < 0) {    position+=count;  } else {    position=position % count;  }  return position;}  }
class C{  public LimitTokenPositionFilterFactory(Map<String,String> args){  super(args);  maxTokenPosition=requireInt(args,MAX_TOKEN_POSITION_KEY);  consumeAllTokens=getBoolean(args,CONSUME_ALL_TOKENS_KEY,false);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public BasicEditorError(Editor<?> editor,Object value,String message){  this.editor=editor;  this.value=value;  this.message=message;}  }
class C{  public static float toPixelFromDIP(double value){  return toPixelFromDIP((float)value);}  }
class C{  protected void addToPortMap(IOFSwitch sw,MacAddress mac,VlanVid vlan,OFPort portVal){  Map<MacVlanPair,OFPort> swMap=macVlanToSwitchPortMap.get(sw);  if (vlan == VlanVid.FULL_MASK) {    vlan=VlanVid.ofVlan(0);  }  if (swMap == null) {    swMap=Collections.synchronizedMap(new LRULinkedHashMap<MacVlanPair,OFPort>(MAX_MACS_PER_SWITCH));    macVlanToSwitchPortMap.put(sw,swMap);  }  swMap.put(new MacVlanPair(mac,vlan),portVal);}  }
class C{  public int viewToModel(float fx,float fy,Shape a,Position.Bias[] bias){  bias[0]=Position.Bias.Forward;  Rectangle alloc=(Rectangle)a;  RSyntaxDocument doc=(RSyntaxDocument)getDocument();  int x=(int)fx;  int y=(int)fy;  if (y < alloc.y) {    return getStartOffset();  } else   if (y > alloc.y + alloc.height) {    return getEndOffset() - 1;  } else {    RSyntaxTextArea textArea=(RSyntaxTextArea)getContainer();    alloc.height=textArea.getLineHeight();    int p1=getEndOffset();    Element map=doc.getDefaultRootElement();    int p0=getStartOffset();    int line=map.getElementIndex(p0);    Token tlist=doc.getTokenListForLine(line);    while (p0 < p1) {      RSyntaxUtilities.makeTokenListStartAt(tlist,p0,WrappedSyntaxView.this,textArea,alloc.x);      int p=calculateBreakPosition(p0,tlist,alloc.x);      if ((y >= alloc.y) && (y < (alloc.y + alloc.height))) {        if (x < alloc.x) {          return p0;        } else         if (x > alloc.x + alloc.width) {          return p - 1;        } else {          int n=tlist.getListOffset(textArea,WrappedSyntaxView.this,alloc.x,x);          return Math.max(Math.min(n,p1 - 1),p0);        }      }      p0=(p == p0) ? p1 : p;      alloc.y+=alloc.height;    }    return getEndOffset() - 1;  }}  }
class C{  public Namespace_ createNamespace_(){  Namespace_Impl namespace_=new Namespace_Impl();  return namespace_;}  }
class C{  public static void sendEvents(GridKernalContext kernalCtx,IgfsPath path,int type){  sendEvents(kernalCtx,path,null,type);}  }
class C{  @Deprecated public DCCppMessage(String s){  setBinary(false);  setRetries(_nRetries);  setTimeout(DCCppMessageTimeout);  myMessage=new StringBuilder(s);  _nDataChars=myMessage.length();  _dataChars=new int[_nDataChars];}  }
class C{  public void writeLong(long v) throws IOException {  _os.write((int)(v >> 56));  _os.write((int)(v >> 48));  _os.write((int)(v >> 40));  _os.write((int)(v >> 32));  _os.write((int)(v >> 24));  _os.write((int)(v >> 16));  _os.write((int)(v >> 8));  _os.write((int)v);}  }
class C{  public static String serializeToJson(TextAnnotation ta){  return serializeToJson(ta,false);}  }
class C{  public byte[] asn1Encode() throws Asn1Exception, IOException {  DerOutputStream bytes=new DerOutputStream();  DerOutputStream temp=new DerOutputStream();  DerValue der[]=new DerValue[4];  temp.putInteger(BigInteger.valueOf(tkt_vno));  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x00),temp);  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x01),sname.getRealm().asn1Encode());  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x02),sname.asn1Encode());  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x03),encPart.asn1Encode());  temp=new DerOutputStream();  temp.write(DerValue.tag_Sequence,bytes);  DerOutputStream ticket=new DerOutputStream();  ticket.write(DerValue.createTag(DerValue.TAG_APPLICATION,true,(byte)0x01),temp);  return ticket.toByteArray();}  }
class C{  public static final double[] rowPackedCopy(final double[][] m1){  final int columndimension=m1[0].length;  double[] vals=new double[m1.length * columndimension];  for (int i=0; i < m1.length; i++) {    System.arraycopy(m1[i],0,vals,i * columndimension,columndimension);  }  return vals;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(')');  return result.toString();}  }
class C{  public Instance instance(int index){  return m_Instances.get(index);}  }
class C{  @Override public void update(AppContext ctx,State newInstance){  throw new UnsupportedOperationException();}  }
class C{  public void writeMap(OutputStreamWriter writer,OsmMap map,BoundingBox bb){  try {    StringBuffer text=new StringBuffer();    text.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");    text.append("<osm version=\"0.6\" generator=\"aimax-osm-writer\">\n");    text.append("<bound box=\"");    text.append(bb.getLatMin() + ",");    text.append(bb.getLonMin() + ",");    text.append(bb.getLatMax() + ",");    text.append(bb.getLonMax());    text.append("\" origin=\"?\"/>\n");    writer.write(text.toString());    HashSet<MapNode> nodeHash=new HashSet<MapNode>();    Collection<MapWay> ways=map.getWays(bb);    for (    MapWay way : ways)     for (    MapNode node : way.getNodes())     if (!nodeHash.contains(node)) {      writeNode(writer,node);      nodeHash.add(node);    }    for (    MapNode poi : map.getPois(bb))     if (!nodeHash.contains(poi)) {      writeNode(writer,poi);      nodeHash.add(poi);    }    for (    MapWay way : ways)     writeWay(writer,way);    writer.write("</osm>\n");  } catch (  IOException e) {    throw new OsmRuntimeException("Unable to write XML output to file.",e);  } finally {    if (writer != null) {      try {        writer.close();      } catch (      IOException e) {        LOG.log(Level.SEVERE,"Unable to close output stream.",e);      }    }  }}  }
class C{  public boolean isInternalLevelXingBD(LevelXing x,Block block){  LayoutBlock lBlock=layoutBlockManager.getByUserName(block.getUserName());  if ((((TrackSegment)x.getConnectB()).getLayoutBlock() == lBlock) && (((TrackSegment)x.getConnectD()).getLayoutBlock() == lBlock)) {    if (x.getLayoutBlockBD() == lBlock) {      return true;    } else {      log.error("Panel blocking error at BD of Level Crossing in Block " + block.getUserName());      return false;    }  }  return false;}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  super.reset(mapping,request);  idsSeleccionados=new String[0];}  }
class C{  void writeClassfile(String classname,OutputStream out) throws NotFoundException, IOException, CannotCompileException {  InputStream fin=openClassfile(classname);  if (fin == null)   throw new NotFoundException(classname);  try {    copyStream(fin,out);  }  finally {    fin.close();  }}  }
class C{  public static void createImageToFileSystem(String url,List targetList,int targetOffset,String targetKey,String destFile,Dimension toScale){  createImageToFileSystem(url,targetList,targetOffset,targetKey,destFile,toScale,PRIORITY_NORMAL);}  }
class C{  public boolean isAppendStatics(){  return this.appendStatics;}  }
class C{  public boolean hasFeatures(){  return hasRepeatingExtension(Feature.class);}  }
class C{  public CustomAttachmentWriter(PipedOutputStream os,byte[] soapBytes,InputStream attachmentInputStream) throws IOException {  super(os,soapBytes);  this.attachmentInputStream=attachmentInputStream;}  }
class C{  public void initialize() throws IOException {  System.out.println("Randomly initializing topic assignments ...");  topicAssignments=new ArrayList<List<Integer>>();  for (int i=0; i < numDocuments; i++) {    List<Integer> topics=new ArrayList<Integer>();    int docSize=corpus.get(i).size();    for (int j=0; j < docSize; j++) {      int topic=FuncUtils.nextDiscrete(multiPros);      docTopicCount[i][topic]+=1;      topicWordCount[topic][corpus.get(i).get(j)]+=1;      sumDocTopicCount[i]+=1;      sumTopicWordCount[topic]+=1;      topics.add(topic);    }    topicAssignments.add(topics);  }}  }
class C{  private int compileUnit(PhasedUnit pu,JsIdentifierNames names) throws IOException {  if (opts.isVerbose()) {    logger.debug("Compiling " + pu.getUnitFile().getPath() + " to JS");  }  JsOutput jsout=getOutput(pu);  MissingNativeVisitor mnv=new JsMissingNativeVisitor(opts.getCwd());  pu.getCompilationUnit().visit(mnv);  GenerateJsVisitor jsv=new GenerateJsVisitor(this,jsout,opts,names,pu.getTokens());  pu.getCompilationUnit().visit(jsv);  pu.getCompilationUnit().visit(errorVisitor);  return jsv.getExitCode();}  }
class C{  public JavaNumberFormatter(double min,double max,double multiplier){  this(min,max,multiplier,false,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:32:01.536 -0400",hash_original_method="32B0ACF05078B72AA19A5AA94D1E2C78",hash_generated_method="812531FFAD32DE977D2C79B04FA6D4E8") static private int findChar(char ch,String input,int fromIndex){  for (int i=fromIndex; i < input.length(); i++) {    char c=input.charAt(i);    if (c == '"') {      i=input.indexOf('"',i + 1);      if (i == -1) {        return input.length();      }    } else     if (c == ch) {      return i;    }  }  return input.length();}  }
class C{  public static void deoptimize(){}  }
class C{  public RequestParams(Object... keysAndValues){  init();  int len=keysAndValues.length;  if (len % 2 != 0)   throw new IllegalArgumentException("Supplied arguments must be even");  for (int i=0; i < len; i+=2) {    String key=String.valueOf(keysAndValues[i]);    String val=String.valueOf(keysAndValues[i + 1]);    put(key,val);  }}  }
class C{  @SuppressWarnings("unchecked") public static <C>C parameterizeOrAbort(Class<?> c,Parameterization config){  try {    C ret=tryInstantiate((Class<C>)c,c,config);    if (ret == null) {      throw new AbortException("Could not instantiate class. Check parameters.");    }    return ret;  } catch (  Exception e) {    if (config.hasErrors()) {      for (      ParameterException err : config.getErrors()) {        LOG.warning(err.toString());      }    }    if (e instanceof AbortException) {      throw (AbortException)e;    } else {      throw new AbortException("Instantiation failed",e);    }  }}  }
class C{  @Override protected boolean isAnimating(){  return !entity.stopped();}  }
class C{  public TopicObject(int id){  this.id=id;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:14.936 -0500",hash_original_method="5974D900C8CF23409F32E47268086AF9",hash_generated_method="217ABE8AEB5449B572546775659A5A95") public String toASCIIString(){  StringBuilder result=new StringBuilder();  ASCII_ONLY.appendEncoded(result,toString());  return result.toString();}  }
class C{  public T addHighlightedField(String name,int fragmentSize,int numberOfFragments,int fragmentOffset){  highlightBuilder().field(name,fragmentSize,numberOfFragments,fragmentOffset);  return (T)this;}  }
class C{  public static int translateScriptProtect(String strScriptProtect){  strScriptProtect=strScriptProtect.toLowerCase().trim();  if ("none".equals(strScriptProtect))   return ApplicationContext.SCRIPT_PROTECT_NONE;  if ("no".equals(strScriptProtect))   return ApplicationContext.SCRIPT_PROTECT_NONE;  if ("false".equals(strScriptProtect))   return ApplicationContext.SCRIPT_PROTECT_NONE;  if ("all".equals(strScriptProtect))   return ApplicationContext.SCRIPT_PROTECT_ALL;  if ("true".equals(strScriptProtect))   return ApplicationContext.SCRIPT_PROTECT_ALL;  if ("yes".equals(strScriptProtect))   return ApplicationContext.SCRIPT_PROTECT_ALL;  String[] arr=ListUtil.listToStringArray(strScriptProtect,',');  String item;  int scriptProtect=0;  for (int i=0; i < arr.length; i++) {    item=arr[i].trim();    if ("cgi".equals(item) && (scriptProtect & ApplicationContext.SCRIPT_PROTECT_CGI) == 0)     scriptProtect+=ApplicationContext.SCRIPT_PROTECT_CGI; else     if ("cookie".equals(item) && (scriptProtect & ApplicationContext.SCRIPT_PROTECT_COOKIE) == 0)     scriptProtect+=ApplicationContext.SCRIPT_PROTECT_COOKIE; else     if ("form".equals(item) && (scriptProtect & ApplicationContext.SCRIPT_PROTECT_FORM) == 0)     scriptProtect+=ApplicationContext.SCRIPT_PROTECT_FORM; else     if ("url".equals(item) && (scriptProtect & ApplicationContext.SCRIPT_PROTECT_URL) == 0)     scriptProtect+=ApplicationContext.SCRIPT_PROTECT_URL;  }  return scriptProtect;}  }
class C{  @SuppressWarnings("unchecked") public Object clone() throws CloneNotSupportedException {  VwapDataset clone=(VwapDataset)super.clone();  clone.data=(List<IndicatorSeries>)ObjectUtilities.deepClone(this.data);  return clone;}  }
class C{  public IntHashMap(int initialCapacity){  this(initialCapacity,0.75f);}  }
class C{  public OMGrid(double lat,double lon,int x,int y,double vResolution,double hResolution,GridData data){  setRenderType(RENDERTYPE_OFFSET);  set(lat,lon,x,y,vResolution,hResolution,data);}  }
class C{  public ClosestShapePickSupport(VisualizationServer<V,E> vv,float pickSize){  this.vv=vv;  this.pickSize=pickSize;}  }
class C{  public static void encodeFileToFile(String infile,String outfile) throws java.io.IOException {  String encoded=Base64.encodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(encoded.getBytes("US-ASCII"));  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  @DSComment("Bluetooth subsystem") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:30.663 -0500",hash_original_method="83CCB2B87AD744C98E63B0BB2187BAC7",hash_generated_method="710794DFEA4563F61213BB68AAAF0AAA") public void close() throws IOException {  mLock.readLock().lock();  try {    if (mSocketState == SocketState.CLOSED)     return;    if (mSdp != null) {      mSdp.cancel();    }    abortNative();  }  finally {    mLock.readLock().unlock();  }  mLock.writeLock().lock();  try {    mSocketState=SocketState.CLOSED;    destroyNative();  }  finally {    mLock.writeLock().unlock();  }}  }
class C{  public static AuthenticationInfo loadAuthenticationInformation(String propertiesFileLocation) throws ConfigurationException {  return loadAuthenticationInformation(propertiesFileLocation,true,TUNGSTEN_APPLICATION_NAME.ANY);}  }
class C{  public List<String> updateDeletionStatus(String loadDate,LoadMetadataDetails[] listOfLoadFolderDetailsArray,List<String> invalidLoadTimestamps,Long loadStartTime){  boolean loadFound=false;  String loadStartTimeString="Load Start Time: ";  for (  LoadMetadataDetails loadMetadata : listOfLoadFolderDetailsArray) {    Integer result=compareDateValues(loadMetadata.getLoadStartTimeAsLong(),loadStartTime);    if (result < 0) {      if (!CarbonCommonConstants.MARKED_FOR_DELETE.equals(loadMetadata.getLoadStatus())) {        loadFound=true;        loadMetadata.setLoadStatus(CarbonCommonConstants.MARKED_FOR_DELETE);        loadMetadata.setModificationOrdeletionTimesStamp(readCurrentTime());        LOG.info("Info: " + loadStartTimeString + loadMetadata.getLoadStartTime()+ " Marked for Delete");      }    }  }  if (!loadFound) {    invalidLoadTimestamps.add(loadDate);    LOG.audit("Delete load by date is failed. No matching load found.");    return invalidLoadTimestamps;  }  return invalidLoadTimestamps;}  }
class C{  public boolean isLeftToRight(){  return (getDirection() == Bidi.DIRECTION_LEFT_TO_RIGHT && (paraLevel & 1) == 0);}  }
class C{  public byte[] addCryptedBlocks(byte[] block1,byte[] block2) throws InvalidCipherTextException {  if (forEncryption) {    if ((block1.length > getOutputBlockSize()) || (block2.length > getOutputBlockSize())) {      throw new InvalidCipherTextException("BlockLength too large for simple addition.\n");    }  } else {    if ((block1.length > getInputBlockSize()) || (block2.length > getInputBlockSize())) {      throw new InvalidCipherTextException("BlockLength too large for simple addition.\n");    }  }  BigInteger m1Crypt=new BigInteger(1,block1);  BigInteger m2Crypt=new BigInteger(1,block2);  BigInteger m1m2Crypt=m1Crypt.multiply(m2Crypt);  m1m2Crypt=m1m2Crypt.mod(key.getModulus());  if (debug) {    System.out.println("c(m1) as BigInteger:....... " + m1Crypt);    System.out.println("c(m2) as BigInteger:....... " + m2Crypt);    System.out.println("c(m1)*c(m2)%n = c(m1+m2)%n: " + m1m2Crypt);  }  byte[] output=key.getModulus().toByteArray();  Arrays.fill(output,(byte)0);  System.arraycopy(m1m2Crypt.toByteArray(),0,output,output.length - m1m2Crypt.toByteArray().length,m1m2Crypt.toByteArray().length);  return output;}  }
class C{  public static Pair<List<SecurityGroup>,List<String>> mergeParentSecurityGroups(List<SecurityGroup> existingSecurityGroups,List<String> parentSecurityGroups){  checkNotNull(existingSecurityGroups,"Provided value for existingSecurityGroups is unacceptably null");  checkNotNull(parentSecurityGroups,"Provided value for parentSecurityGroups is unacceptably null");  List<SecurityGroup> mergedSecurityGroups=new ArrayList<>();  List<String> selfSecurityGroupsRemoved=new ArrayList<>();  Set<String> inheritedSecurityGroupsNames=new HashSet<>();  parentSecurityGroups.forEach(null);  existingSecurityGroups.stream().filter(null).forEach(null);  return Pair.of(mergedSecurityGroups,selfSecurityGroupsRemoved);}  }
class C{  private static void performBinOuterOperation(MatrixBlock mbLeft,MatrixBlock mbRight,MatrixBlock mbOut,BinaryOperator bOp) throws DMLRuntimeException {  int rlen=mbLeft.rlen;  double bv[]=DataConverter.convertToDoubleVector(mbRight);  if (!mbOut.isAllocated())   mbOut.allocateDenseBlock();  long lNNZ=0;  for (int r=0; r < rlen; r++) {    double value=mbLeft.quickGetValue(r,0);    int ixPos1=Arrays.binarySearch(bv,value);    int ixPos2=ixPos1;    if (ixPos1 >= 0) {      if (bOp.fn instanceof LessThan || bOp.fn instanceof GreaterThanEquals || bOp.fn instanceof Equals|| bOp.fn instanceof NotEquals)       while (ixPos1 < bv.length && value == bv[ixPos1])       ixPos1++;      if (bOp.fn instanceof GreaterThan || bOp.fn instanceof LessThanEquals || bOp.fn instanceof Equals|| bOp.fn instanceof NotEquals)       while (ixPos2 > 0 && value == bv[ixPos2 - 1])       --ixPos2;    } else {      ixPos2=ixPos1=Math.abs(ixPos1) - 1;    }    int iStartPos=0, iEndPos=bv.length;    if (bOp.fn instanceof LessThan)     iStartPos=ixPos1; else     if (bOp.fn instanceof LessThanEquals)     iStartPos=ixPos2; else     if (bOp.fn instanceof GreaterThan)     iEndPos=ixPos2; else     if (bOp.fn instanceof GreaterThanEquals)     iEndPos=ixPos1; else     if (bOp.fn instanceof Equals || bOp.fn instanceof NotEquals) {      iStartPos=ixPos2;      iEndPos=ixPos1;    }    if (iStartPos < iEndPos || bOp.fn instanceof NotEquals) {      int iOffSet=r * mbRight.getNumColumns();      if (bOp.fn instanceof LessThan || bOp.fn instanceof GreaterThanEquals || bOp.fn instanceof GreaterThan|| bOp.fn instanceof LessThanEquals|| bOp.fn instanceof Equals) {        Arrays.fill(mbOut.getDenseBlock(),iOffSet + iStartPos,iOffSet + iEndPos,1.0);        lNNZ+=(iEndPos - iStartPos);      } else       if (bOp.fn instanceof NotEquals) {        Arrays.fill(mbOut.getDenseBlock(),iOffSet,iOffSet + iStartPos,1.0);        Arrays.fill(mbOut.getDenseBlock(),iOffSet + iEndPos,iOffSet + bv.length,1.0);        lNNZ+=(iStartPos + (bv.length - iEndPos));      }    }  }  mbOut.setNonZeros(lNNZ);  mbOut.examSparsity();}  }
class C{  public static <T extends Errors>T parseError(ObjectMapper mapper,JsonNode errorResponse,Class<T> cls) throws JsonProcessingException {  return mapper.treeToValue(errorResponse,cls);}  }
class C{  public boolean startsWith(XMLString prefix){  return startsWith(prefix,0);}  }
class C{  public static void cleanupTenant() throws Exception {  CasIdmClient idmClient=new CasIdmClient(getIdmHostName());  int i=0;  String tenantName=ServerConfig.getTenant(i);  while (tenantName != null) {    IdmDataRemover.addTenant(tenantName);    i++;    tenantName=ServerConfig.getTenant(i);  }  try {    IdmDataRemover.removeData(idmClient);  } catch (  Exception e) {    logger.debug("Caught exception while removing data " + e.toString());  }}  }
class C{  public int doStartTag() throws JspException {  HttpSession session=pageContext.getSession();  HttpServletRequest request=(HttpServletRequest)pageContext.getRequest();  WebBasket wb=(WebBasket)session.getAttribute(WebBasket.NAME);  if (wb != null && wb.getLineCount() > 0) {    log.fine("WebBasket exists");    JspWriter out=pageContext.getOut();    HtmlCode html=new HtmlCode();    if (!m_oneLine)     html.addElement(new hr("90%","left"));    img img=new img("basket.gif");    img.setBorder(0);    a a=new a("basket.jsp");    a.setClass("menuMain");    if (m_oneLine) {      a.addElement(img);      a.addElement("Basket");      html.addElement(a);      html.addElement("&nbsp;- ");    } else {      a.addElement("Basket");      a.addElement(img);      html.addElement(a);      p p=new p();      p.setClass("Cbasket");      ArrayList<WebBasketLine> lines=wb.getLines();      for (int i=0; i < lines.size(); i++) {        p.addElement("<br>");        Object line=lines.get(i);        p.addElement(line.toString());      }      p.addElement("<br><br>");      html.addElement(p);    }    img=new img("checkout.gif");    img.setBorder(0);    String url=CheckOutServlet.NAME;    if (!request.isSecure())     url="./" + CheckOutServlet.NAME;    a=new a(url);    a.setClass("menuMain");    a.addElement("Create Order");    a.addElement(img);    html.addElement(a);    html.output(out);  }  return (SKIP_BODY);}  }
class C{  protected void performChecks(BufferedImage srcImage,BufferedImage destImage){  if (srcImage == null || destImage == null) {    throw new NullPointerException("The source and/or destination image is null.");  }}  }
class C{  public ResAllocsBuilder withDisk(double disk){  this.disk=disk;  return this;}  }
class C{  public SimpleTrigger(SimpleTrigger other){  issetBitfield=other.issetBitfield;  this.triggerId=other.triggerId;  if (other.isSetTriggerName()) {    this.triggerName=other.triggerName;  }  this.createTime=other.createTime;  this.operatorId=other.operatorId;  if (other.isSetTriggerType()) {    this.triggerType=other.triggerType;  }  this.beginTime=other.beginTime;  this.endTime=other.endTime;  this.times=other.times;  this.executeInterval=other.executeInterval;  if (other.isSetIntervalUnit()) {    this.intervalUnit=other.intervalUnit;  }}  }
class C{  public IterateNetworkAction(final NetworkPanel networkPanel){  super();  if (networkPanel == null) {    throw new IllegalArgumentException("networkPanel must not be null");  }  this.networkPanel=networkPanel;  putValue(SMALL_ICON,ResourceManager.getImageIcon("Step.png"));  putValue(SHORT_DESCRIPTION,"Step network update algorithm (\"spacebar\")");  networkPanel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(' '),this);  networkPanel.getActionMap().put(this,this);}  }
class C{  public static void createAllTables(Database db,boolean ifNotExists){  TestDataDao.createTable(db,ifNotExists);  TestData2Dao.createTable(db,ifNotExists);  TestData3Dao.createTable(db,ifNotExists);}  }
class C{  public static String samReadName(String name,boolean isPaired){  if (isPaired && name != null && name.length() > 2 && name.charAt(name.length() - 2) == '/' && (name.endsWith("/1") || name.endsWith("/2"))) {    return name.substring(0,name.length() - 2);  }  return name;}  }
class C{  private void notifyChanged(){  for (  final IDataChangedListener listener : m_listeners) {    try {      listener.dataChanged();    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }}  }
class C{  public IOTask<SaveFile> loadLastModifiedSaveFileTask(){  log.debug(null);  return loadSaveFilesTask().then(null);}  }
class C{  public boolean matches(String expr){  return Pattern.matches(expr,this);}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public JSONObject(Object object,String names[]){  this();  Class c=object.getClass();  for (int i=0; i < names.length; i+=1) {    String name=names[i];    try {      this.putOpt(name,c.getField(name).get(object));    } catch (    Exception ignore) {    }  }}  }
class C{  public String toStringRep(){  StringBuffer sb=new StringBuffer();  sb.append(formatNumber(x));  sb.append(',');  sb.append(formatNumber(y));  sb.append(',');  sb.append(formatNumber(angle));  sb.append("rad");  return sb.toString();}  }
class C{  public void generateSync(final long countToGenerate){  log.info("Starting to generate {} key pairs using the single stream approach",countToGenerate);  final Runnable fullGeneration=null;  executorService.submit(fullGeneration).join();  flushWriter();  logDurationStatistics();}  }
class C{  public Builder addPhoto(@Nullable final SharePhoto photo){  if (photo != null) {    this.photos.add(new SharePhoto.Builder().readFrom(photo).build());  }  return this;}  }
class C{  public static MlBayesIm serializableInstance(){  return new MlBayesIm(BayesPm.serializableInstance());}  }
class C{  private int clusterForFeature(Histogram f){  double distance=clusters[0].getDistance(f);  double tmp;  int result=0;  for (int i=1; i < clusters.length; i++) {    tmp=clusters[i].getDistance(f);    if (tmp < distance) {      distance=tmp;      result=i;    }  }  return result;}  }
class C{  @Override public float nextFloat(){  return next(24) / ((float)(1 << 24));}  }
class C{  private void drawPointer(Canvas canvas){  int index=-1;  for (int i=0; i < series.length; i++) {    ChartValueSeries chartValueSeries=series[i];    if (chartValueSeries.isEnabled() && chartValueSeries.hasData()) {      index=i;      break;    }  }  if (index != -1 && chartData.size() > 0) {    int dx=getX(maxX) - pointer.getIntrinsicWidth() / 2;    int dy=getY(series[index],chartData.get(chartData.size() - 1)[index + 1]) - pointer.getIntrinsicHeight();    canvas.translate(dx,dy);    pointer.draw(canvas);  }}  }
class C{  private void displayVisitCard(String contact){  try {    Uri contactUri=Uri.withAppendedPath(ContactsContract.PhoneLookup.CONTENT_FILTER_URI,Uri.encode(contact));    Uri vcard=ContactUtil.getInstance(this).getVCard(contactUri);    TextView vcardView=(TextView)findViewById(R.id.vcard);    vcardView.setText(vcard.getPath());  } catch (  RcsGenericException e) {    showExceptionThenExit(e);  }}  }
class C{  public static Long[] transformLongArray(long[] source){  Long[] destin=new Long[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  public void exportDevice(String networkName,String name,String primaryAddress,HashMap<String,String> detailMap,NodeType nodeType,HashMap<String,String> connectionMap,ByteTreeItem byteTreeItem){  HashMap<String,ConnectionType> connectionIpToConnectionObjectMap=new HashMap<>();  DeviceType deviceType=this.dataExportObjectFactory.createDeviceType();  deviceType.setName(name);  deviceType.setType(nodeType);  deviceType.setPrimaryAddress(primaryAddress);  detailMap.keySet().stream().forEach(null);  connectionMap.keySet().stream().forEach(null);  boolean[] isNewNetwork={true};  this.dataExport.getData().getNetwork().stream().filter(null).forEach(null);  if (isNewNetwork[0]) {    NetworkType network=this.dataExportObjectFactory.createNetworkType();    network.setName(networkName);    network.getDevice().add(deviceType);    this.dataExport.getData().getNetwork().add(network);  }  pupulateConnectionTypesWithByteData(connectionIpToConnectionObjectMap,byteTreeItem);}  }
class C{  private void pushAddr(GPR reg){  if (VM.VerifyAssertions)   validateStackPush(BYTES_IN_ADDRESS);  asm.emitSTAddr(reg,spTopOffset - BYTES_IN_ADDRESS,FP);  spTopOffset-=BYTES_IN_STACKSLOT;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.N4_SETTER_DECLARATION__DECLARED_MODIFIERS:    getDeclaredModifiers().clear();  getDeclaredModifiers().addAll((Collection<? extends N4Modifier>)newValue);return;case N4JSPackage.N4_SETTER_DECLARATION__OWNER:setOwner((N4ClassifierDefinition)newValue);return;case N4JSPackage.N4_SETTER_DECLARATION__ANNOTATION_LIST:setAnnotationList((N4MemberAnnotationList)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private List addNodeToList(int startIndexForNode,int endIndexForNode){  List localvmList=new ArrayList();  for (int i=startIndexForNode; i < endIndexForNode; i++) {    localvmList.add(vm[i]);  }  return localvmList;}  }
class C{  public PassivationException(Collection<Exception> exceptions){  super("Passivation Exception - [has " + exceptions.size() + " cause(s)]");  exceptions.forEach(null);  this.causes=new ArrayList<>(exceptions);}  }
class C{  protected SetOfIntegerSyntax(int member){  if (member < 0) {    throw new IllegalArgumentException();  }  members=new int[][]{{member,member}};}  }
class C{  protected void testDocument(Branch branch,Document doc){  for (int i=0, size=branch.nodeCount(); i < size; i++) {    Node node=branch.node(i);    assertTrue("Node has correct document",node.getDocument() == doc);  }}  }
class C{  public final JIPList reverse(){  return new JIPList(new List(((ConsCell)getTerm()).reverse()));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:29.531 -0500",hash_original_method="3E873AF3736F468DF3025CAE14D73D95",hash_generated_method="FB0DA0EFD62D15BC45D1CEFC69F4214A") public void onRegistrationFailed(SipSession session,int errorCode,String errorMessage){}  }
class C{  public ModbusTCPTransaction(){}  }
class C{  protected boolean builtInMetricIsMaximisable(int metricIndex) throws Exception {switch (metricIndex) {case 0:    return true;case 1:  return false;case 2:return true;case 3:return false;case 4:return false;case 5:return false;case 6:return false;case 7:return true;case 8:return false;case 9:return false;case 10:return true;case 11:return false;case 12:return false;case 13:return false;case 14:return false;case 15:return true;case 16:return false;case 17:return true;case 18:return false;case 19:return true;case 20:return true;case 21:return true;case 22:return true;case 23:return true;case 24:return true;}throw new Exception("Unknown built-in metric");}  }
class C{  public static boolean isBlockOrSF(String s){  if (s.endsWith(".SF") || s.endsWith(".DSA") || s.endsWith(".RSA")|| s.endsWith(".EC")) {    return true;  }  return false;}  }
class C{  public static Object findResult(Object self,Closure closure){  for (Iterator iter=InvokerHelper.asIterator(self); iter.hasNext(); ) {    Object value=iter.next();    Object result=closure.call(value);    if (result != null) {      return result;    }  }  return null;}  }
class C{  void onDragEnter(){  mDragging=true;}  }
class C{  private GitNoteWriter(String reviewHash,final Repository repo,String ref,PersonIdent author){  this.ref=ref;  this.repo=repo;  this.author=author;  revWalk=new RevWalk(repo);  inserter=repo.newObjectInserter();  reader=repo.newObjectReader();  try {    ObjectId reviewRefObjId=repo.resolve(reviewHash);    this.reviewCommit=revWalk.parseCommit(reviewRefObjId);  } catch (  Exception e) {    logger.log(Level.SEVERE,"Failed to init note writer for commit " + reviewHash,e);    throw new RuntimeException(e);  }}  }
class C{  public ISPO[] nextChunk(){  if (!hasNext()) {    throw new NoSuchElementException();  }  final ISPO[] ret;  if (i == 0 && numStmts == stmts.length) {    ret=stmts;  } else {    final int remaining=numStmts - i;    ret=new ISPO[remaining];    System.arraycopy(stmts,i,ret,0,remaining);  }  i=numStmts;  return ret;}  }
class C{  public static JSONObject JsonReadOnly(String url,String bssid,int serial,HeaderPair... headers){  return JsonReadOnly(url,bssid,serial,0,headers);}  }
class C{  protected FilterImpl(){  super();}  }
class C{  public void testStopPositons() throws IOException {  StringBuilder sb=new StringBuilder();  ArrayList<String> a=new ArrayList<>();  for (int i=0; i < 20; i++) {    String w=English.intToEnglish(i).trim();    sb.append(w).append(" ");    if (i % 3 != 0)     a.add(w);  }  log(sb.toString());  String stopWords[]=a.toArray(new String[0]);  for (int i=0; i < a.size(); i++)   log("Stop: " + stopWords[i]);  CharArraySet stopSet=StopFilter.makeStopSet(stopWords);  StringReader reader=new StringReader(sb.toString());  final MockTokenizer in=new MockTokenizer(MockTokenizer.WHITESPACE,false);  in.setReader(reader);  StopFilter stpf=new StopFilter(in,stopSet);  doTestStopPositons(stpf);  ArrayList<String> a0=new ArrayList<>();  ArrayList<String> a1=new ArrayList<>();  for (int i=0; i < a.size(); i++) {    if (i % 2 == 0) {      a0.add(a.get(i));    } else {      a1.add(a.get(i));    }  }  String stopWords0[]=a0.toArray(new String[0]);  for (int i=0; i < a0.size(); i++)   log("Stop0: " + stopWords0[i]);  String stopWords1[]=a1.toArray(new String[0]);  for (int i=0; i < a1.size(); i++)   log("Stop1: " + stopWords1[i]);  CharArraySet stopSet0=StopFilter.makeStopSet(stopWords0);  CharArraySet stopSet1=StopFilter.makeStopSet(stopWords1);  reader=new StringReader(sb.toString());  final MockTokenizer in1=new MockTokenizer(MockTokenizer.WHITESPACE,false);  in1.setReader(reader);  StopFilter stpf0=new StopFilter(in1,stopSet0);  StopFilter stpf01=new StopFilter(stpf0,stopSet1);  doTestStopPositons(stpf01);}  }
class C{  private void proposeMove(){  Integer action;  int time=(timeCombo.getSelectedIndex() + 1) * 5;  AdversarialSearch<ConnectFourState,Integer> search;switch (strategyCombo.getSelectedIndex()) {case 0:    search=MinimaxSearch.createFor(game);  break;case 1:search=AlphaBetaSearch.createFor(game);break;case 2:search=IterativeDeepeningAlphaBetaSearch.createFor(game,0.0,1.0,time);break;case 3:search=new ConnectFourAIPlayer(game,time);break;default :search=new ConnectFourAIPlayer(game,time);((ConnectFourAIPlayer)search).setLogEnabled(true);}action=search.makeDecision(currState);searchMetrics=search.getMetrics();currState=game.getResult(currState,action);}  }
class C{  public List<T> run(){  return resources.getByRefs(resources.performSearch(parameters),filter);}  }
class C{  private Read(){}  }
class C{  public void add(E newObject){  list.add(newObject);  int currentIndex=list.size() - 1;  while (currentIndex > 0) {    int parentIndex=(currentIndex - 1) / 2;    if (list.get(currentIndex).compareTo(list.get(parentIndex)) > 0) {      E temp=list.get(currentIndex);      list.set(currentIndex,list.get(parentIndex));      list.set(parentIndex,temp);    } else     break;    currentIndex=parentIndex;  }}  }
class C{  public Period(ReadableDuration duration,ReadableInstant endInstant){  super(duration,endInstant,null);}  }
class C{  @Override public void logLevelChange(Level level){  Level debugLevel=bot.getDebugLevel();  int logLevel=SessionLog.INFO;  if (debugLevel == Level.ALL) {    logLevel=SessionLog.FINEST;  } else   if (debugLevel == Level.FINEST) {    logLevel=SessionLog.FINE;  } else   if (debugLevel == Level.FINE) {    logLevel=SessionLog.INFO;  } else   if (debugLevel == Level.SEVERE) {    logLevel=SessionLog.SEVERE;  } else   if (debugLevel == Level.WARNING) {    logLevel=SessionLog.WARNING;  } else   if (debugLevel == Level.OFF) {    logLevel=SessionLog.OFF;  }  entityManager.unwrap(JpaEntityManager.class).getServerSession().setLogLevel(logLevel);}  }
class C{  static void check(String u,String f,boolean r,boolean k) throws Exception {  try (PrintStream ps=new PrintStream(new FileOutputStream("dnsfallback.conf"))){    ps.println("[libdefaults]\n");    if (u != null) {      ps.println("dns_lookup_realm=" + u);      ps.println("dns_lookup_kdc=" + u);    }    if (f != null) {      ps.println("dns_fallback=" + f);    }  }   System.setProperty("java.security.krb5.conf","dnsfallback.conf");  Config.refresh();  System.out.println("Testing " + u + ", "+ f+ ", "+ r+ ", "+ k);  if (!useDNS_Realm.invoke(Config.getInstance()).equals(r)) {    throw new Exception("useDNS_Realm Fail");  }  if (!useDNS_KDC.invoke(Config.getInstance()).equals(k)) {    throw new Exception("useDNS_KDC Fail");  }}  }
class C{  public void testLoadGZip() throws Exception {  final URL url=this.getClass().getClassLoader().getResource("com/bigdata/rdf/rio/small.rdf.gz");  final String update="LOAD <" + url.toExternalForm() + ">";  final String ns="http://bigdata.com/test/data#";  con.prepareUpdate(QueryLanguage.SPARQL,update).execute();  assertTrue(con.hasStatement(f.createURI(ns,"mike"),RDFS.LABEL,f.createLiteral("Michael Personick"),true));}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  @Override public boolean dispatchTouchEvent(MotionEvent ev){  int action=MotionEventCompat.getActionMasked(ev);  if (stopScrollWhenTouch) {    if ((action == MotionEvent.ACTION_DOWN) && isAutoScroll) {      isStopByTouch=true;      stopAutoScroll();    } else     if (ev.getAction() == MotionEvent.ACTION_UP && isStopByTouch) {      startAutoScroll();    }  }  if (slideBorderMode == SLIDE_BORDER_MODE_TO_PARENT || slideBorderMode == SLIDE_BORDER_MODE_CYCLE) {    touchX=ev.getX();    if (ev.getAction() == MotionEvent.ACTION_DOWN) {      downX=touchX;    }    int currentItem=getCurrentItem();    PagerAdapter adapter=getAdapter();    int pageCount=adapter == null ? 0 : adapter.getCount();    if ((currentItem == 0 && downX <= touchX) || (currentItem == pageCount - 1 && downX >= touchX)) {      if (slideBorderMode == SLIDE_BORDER_MODE_TO_PARENT) {        getParent().requestDisallowInterceptTouchEvent(false);      } else {        if (pageCount > 1) {          setCurrentItem(pageCount - currentItem - 1,isBorderAnimation);        }        getParent().requestDisallowInterceptTouchEvent(true);      }      return super.dispatchTouchEvent(ev);    }  }  getParent().requestDisallowInterceptTouchEvent(true);  return super.dispatchTouchEvent(ev);}  }
class C{  public void dispose(){  ((ViewReferencesTableModel)getModel()).dispose();}  }
class C{  public ModelKeyMap findKeyMapByRelated(String relFieldName){  for (  ModelKeyMap keyMap : keyMaps) {    if (keyMap.getRelFieldName().equals(relFieldName))     return keyMap;  }  return null;}  }
class C{  @Override public Thread newThread(final Runnable r){  final Thread t=getWrappedFactory().newThread(r);  initializeThread(t);  return t;}  }
class C{  public static int testLoop6Snippet(int a,int b,MemoryScheduleTest obj){  int ret=0;  int bb=b;  for (int i=0; i < a; i++) {    ret=obj.hash;    if (a > 10) {      bb++;    } else {      bb--;      for (int j=0; j < b; ++j) {        obj.hash=3;      }    }    ret=ret / 10;  }  return ret + bb;}  }
class C{  @Deprecated public static void liftingFromBottom(View view,float baseRotation,int duration){  ViewHelper.setRotationX(view,baseRotation);  ViewHelper.setTranslationY(view,view.getHeight() / 3);  ViewPropertyAnimator.animate(view).setInterpolator(new AccelerateDecelerateInterpolator()).setDuration(duration).rotationX(0).translationY(0).start();}  }
class C{  public boolean isItalic(){  return isItalic;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String arcHeaderFile=null;  String arcDataFile=null;  String whiteboxHeaderFile=null;  String whiteboxDataFile=null;  WhiteboxRaster output=null;  int i=0;  int row, col, rows, cols;  String[] imageFiles;  int numImages=0;  double noData=-32768;  int progress=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    for (i=0; i < numImages; i++) {      if (numImages > 1) {        progress=(int)(100f * i / (numImages - 1));        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      whiteboxHeaderFile=imageFiles[i];      if (!((new File(whiteboxHeaderFile)).exists())) {        showFeedback("Whitebox raster file does not exist.");        break;      }      WhiteboxRaster wbr=new WhiteboxRaster(whiteboxHeaderFile,"r");      rows=wbr.getNumberRows();      cols=wbr.getNumberColumns();      noData=wbr.getNoDataValue();      arcHeaderFile=whiteboxHeaderFile.replace(".dep",".hdr");      arcDataFile=whiteboxHeaderFile.replace(".dep",".flt");      (new File(arcHeaderFile)).delete();      (new File(arcDataFile)).delete();      output=new WhiteboxRaster(whiteboxHeaderFile.replace(".dep","_temp.dep"),"rw",whiteboxHeaderFile,WhiteboxRaster.DataType.FLOAT,-9999);      output.setNoDataValue(-9999);      whiteboxDataFile=whiteboxHeaderFile.replace(".dep","_temp.tas");      double[] data=null;      for (row=0; row < rows; row++) {        data=wbr.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            output.setValue(row,col,data[col]);          } else {            output.setValue(row,col,-9999);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }      output.close();      File dataFile=new File(whiteboxDataFile);      File arcFile=new File(arcDataFile);      dataFile.renameTo(arcFile);      boolean success=createHeaderFile(wbr,arcHeaderFile);      if (!success) {        showFeedback("ArcGIS header file was not written properly. " + "Tool failed to export");        return;      }      wbr.close();      (new File(whiteboxHeaderFile.replace(".dep","_temp.dep"))).delete();    }    showFeedback("Operation complete!");  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  IfdData(int ifdId){  mIfdId=ifdId;}  }
class C{  public long[] fetchOid() throws BerException {  return fetchOid(OidTag);}  }
class C{  public Writer write(Writer writer,int indentFactor,int indent) throws JSONException {  try {    boolean commanate=false;    int length=this.length();    writer.write('[');    if (length == 1) {      JSONObject.writeValue(writer,this.list.get(0),indentFactor,indent);    } else     if (length != 0) {      final int newindent=indent + indentFactor;      for (int i=0; i < length; i+=1) {        if (commanate) {          writer.write(',');        }        if (indentFactor > 0) {          writer.write('\n');        }        JSONObject.indent(writer,newindent);        JSONObject.writeValue(writer,this.list.get(i),indentFactor,newindent);        commanate=true;      }      if (indentFactor > 0) {        writer.write('\n');      }      JSONObject.indent(writer,indent);    }    writer.write(']');    return writer;  } catch (  IOException e) {    throw new JSONException(e);  }}  }
class C{  public void stop(){  timer.update(clock.tick() - startTime,TimeUnit.NANOSECONDS);}  }
class C{  @GwtIncompatible public static <T>T[] toArray(Iterable<? extends T> iterable,Class<T> type){  return toArray(iterable,ObjectArrays.newArray(type,0));}  }
class C{  public void save(String key,Object data,boolean isEncrypted,String encryptKey){  key=safetyKey(key);  String wrapperJSONSerialized;  if (data instanceof Record) {    Type type=jolyglot.newParameterizedType(data.getClass(),Object.class);    wrapperJSONSerialized=jolyglot.toJson(data,type);  } else {    wrapperJSONSerialized=jolyglot.toJson(data);  }  FileWriter fileWriter=null;  try {    File file=new File(cacheDirectory,key);    fileWriter=new FileWriter(file,false);    fileWriter.write(wrapperJSONSerialized);    fileWriter.flush();    fileWriter.close();    fileWriter=null;    if (isEncrypted) {      fileEncryptor.encrypt(encryptKey,new File(cacheDirectory,key));    }  } catch (  Exception e) {    throw new RuntimeException(e);  } finally {    try {      if (fileWriter != null) {        fileWriter.flush();        fileWriter.close();      }    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  public boolean isSupported(DurationFieldType type){  if (type == null) {    return false;  }  DurationField field=type.getField(getChronology());  if (DATE_DURATION_TYPES.contains(type) || field.getUnitMillis() >= getChronology().days().getUnitMillis()) {    return field.isSupported();  }  return false;}  }
class C{  protected IJavaElement createPackageDeclarationHandle(CompilationUnitDeclaration unit){  if (unit.isPackageInfo()) {    char[] packName=CharOperation.concatWith(unit.currentPackage.getImportName(),'.');    Openable openable=this.currentPossibleMatch.openable;    if (openable instanceof CompilationUnit) {      return ((CompilationUnit)openable).getPackageDeclaration(new String(packName));    }  }  return createTypeHandle(new String(unit.getMainTypeName()));}  }
class C{  public float[] generateTransformedValuesBubble(List<? extends Entry> entries,float phaseX,float phaseY,int from,int to){  final int count=(int)Math.ceil(to - from) * 2;  float[] valuePoints=new float[count];  for (int j=0; j < count; j+=2) {    Entry e=entries.get(j / 2 + from);    if (e != null) {      valuePoints[j]=(float)(e.getXIndex() - from) * phaseX + from;      valuePoints[j + 1]=e.getVal() * phaseY;    }  }  pointValuesToPixel(valuePoints);  return valuePoints;}  }
class C{  @Override public byte[] firstToken(){  return oneToken;}  }
class C{  public Class componentType(){  return null;}  }
class C{  @Override public void committed(long window){  try {    fileSystemWALWriter.finalizeFiles(window);  } catch (  IOException e) {    throw new RuntimeException("during committed",e);  }}  }
class C{  public boolean isHasCombination(){  Object oo=get_Value(COLUMNNAME_HasCombination);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void adjustAlignment(int align,int curAlign){  if ((!FIXED_WIDTH) && (align != curAlign)) {    if (curLine.getComponentCount() == 0) {      curLine.setLayout(new FlowLayout(curAlign));    }  }}  }
class C{  public final byte[] doFinal(byte[] input) throws IllegalBlockSizeException, BadPaddingException {  checkCipherState();  if (input == null) {    throw new IllegalArgumentException("Null input buffer");  }  chooseFirstProvider();  return spi.engineDoFinal(input,0,input.length);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL__AST_STRUCTURAL_MEMBERS:    return getAstStructuralMembers();case TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL__STRUCTURAL_TYPE:  if (resolve)   return getStructuralType();return basicGetStructuralType();case TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL__GEN_STRUCTURAL_MEMBERS:return getGenStructuralMembers();case TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL__POSTPONED_SUBSTITUTIONS:return getPostponedSubstitutions();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public InvalidPropetiesException(String message,Throwable cause){  super(message,cause);}  }
class C{  private void checkMatrix(){  int numVars=variables.size();  for (  Node variable : variables) {    if (variable == null) {      throw new NullPointerException();    }  }  if (sampleSize < 1) {    throw new IllegalArgumentException("Sample size must be at least 1.");  }  if (numVars != matrix.rows() || numVars != matrix.columns()) {    throw new IllegalArgumentException("Number of variables does not " + "equal the dimension of the matrix.");  }}  }
class C{  private static boolean isDescendantOrSelf(CategoryDef category,String ancestorId,Map<String,CategoryDef> catalog){  if ((category == null) || (ancestorId == null)) {    return false;  }  if (StringUtils.equals(category.id,ancestorId)) {    return true;  }  CategoryDef parent=catalog.get(category.parentId);  return isDescendantOrSelf(parent,ancestorId,catalog);}  }
class C{  public boolean hasNumEntries(){  return hasExtension(EntriesNumber.class);}  }
class C{  public final long alignToTimeFrame(long time){  return m_alignmentOffset + m_framingFlow.getDuration() * ((time - m_alignmentOffset) / m_framingFlow.getDuration());}  }
class C{  public RoundBorder shadowY(float shadowY){  this.shadowY=shadowY;  return this;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("From " + request.getRemoteHost() + " - "+ request.getRemoteAddr());  Properties ctx=JSPEnv.getCtx(request);  HttpSession session=request.getSession(true);  int AD_Issue_ID=WebUtil.getParameterAsInt(request,"RECORDID");  String DBAddress=WebUtil.getParameter(request,"DBADDRESS");  String Comments=WebUtil.getParameter(request,"COMMENTS");  String IssueString=WebUtil.getParameter(request,"ISSUE");  StringBuffer responseText=new StringBuffer("Adempiere Support - ").append(new Date().toString()).append("\n");  MIssue issue=null;  if (AD_Issue_ID != 0) {    issue=new MIssue(ctx,AD_Issue_ID,null);    if (issue.get_ID() != AD_Issue_ID)     responseText.append("Issue Unknown - Request Ignored"); else     if (!issue.getDBAddress().equals(DBAddress))     responseText.append("Not Issue Owner - Request Ignored"); else {      issue.addComments(Comments);      responseText.append(issue.createAnswer());    }  } else   if (IssueString == null || IssueString.length() == 0) {    responseText.append("Unknown Request");  } else {    issue=MIssue.create(ctx,IssueString);    if (issue == null || !issue.save())     responseText.append("Could not save Issue"); else     responseText.append(issue.process());  }  StringBuffer answer=new StringBuffer();  if (issue != null && issue.get_ID() != 0) {    answer.append("RECORDID=").append(issue.get_ID()).append(MIssue.DELIMITER);  }  answer.append("RESPONSE=").append(responseText);  response.setHeader("Cache-Control","no-cache");  response.setContentType("text/html; charset=UTF-8");  PrintWriter out=response.getWriter();  out.write(URLEncoder.encode(answer.toString(),"UTF-8"));  out.flush();  if (out.checkError())   log.log(Level.SEVERE,"error writing");  out.close();}  }
class C{  public void init() throws MessagingException {  isDebug=(getInitParameter("debug") == null) ? false : Boolean.valueOf(getInitParameter("debug"));  logAdapter=new MailetContextLog(getMailetContext(),isDebug);  ArrayList<Delay> delayTimesList=new ArrayList<Delay>();  try {    if (getInitParameter("delayTime") != null) {      String delayTimesParm=getInitParameter("delayTime");      StringTokenizer st=new StringTokenizer(delayTimesParm,",");      while (st.hasMoreTokens()) {        String delayTime=st.nextToken();        delayTimesList.add(new Delay(delayTime));      }    } else {      delayTimesList.add(new Delay());    }  } catch (  Exception e) {    log("Invalid delayTime setting: " + getInitParameter("delayTime"));  }  try {    if (getInitParameter("maxRetries") != null) {      maxRetries=Integer.parseInt(getInitParameter("maxRetries"));    }    int totalAttempts=calcTotalAttempts(delayTimesList);    if (totalAttempts > maxRetries) {      log("Total number of delayTime attempts exceeds maxRetries specified. " + " Increasing maxRetries from " + maxRetries + " to "+ totalAttempts);      maxRetries=totalAttempts;    } else {      int extra=maxRetries - totalAttempts;      if (extra != 0) {        log("maxRetries is larger than total number of attempts specified.  " + "Increasing last delayTime with " + extra + " attempts ");        if (delayTimesList.size() != 0) {          Delay delay=delayTimesList.get(delayTimesList.size() - 1);          delay.setAttempts(delay.getAttempts() + extra);          log("Delay of " + delay.getDelayTime() + " msecs is now attempted: "+ delay.getAttempts()+ " times");        } else {          throw new MessagingException("No delaytimes, cannot continue");        }      }    }    delayTimes=expandDelays(delayTimesList);  } catch (  Exception e) {    log("Invalid maxRetries setting: " + getInitParameter("maxRetries"));  }  String outgoing=getInitParameter("outgoing");  if (outgoing == null) {    outgoing="outgoing";  }  queue=queueFactory.getQueue(outgoing);  try {    if (getInitParameter("timeout") != null) {      smtpTimeout=Integer.parseInt(getInitParameter("timeout"));    }  } catch (  Exception e) {    log("Invalid timeout setting: " + getInitParameter("timeout"));  }  try {    if (getInitParameter("connectiontimeout") != null) {      connectionTimeout=Integer.parseInt(getInitParameter("connectiontimeout"));    }  } catch (  Exception e) {    log("Invalid timeout setting: " + getInitParameter("timeout"));  }  sendPartial=(getInitParameter("sendpartial") == null) ? false : Boolean.valueOf(getInitParameter("sendpartial"));  bounceProcessor=getInitParameter("bounceProcessor");  String sTLS=getInitParameter("startTLS");  if (sTLS != null) {    startTLS=Boolean.valueOf(sTLS);  }  isSSLEnable=(getInitParameter("sslEnable") == null) ? false : Boolean.valueOf(getInitParameter("sslEnable"));  String gateway=getInitParameter("gateway");  String gatewayPort=getInitParameter("gatewayPort");  if (gateway != null) {    gatewayServer=new ArrayList<String>();    StringTokenizer st=new StringTokenizer(gateway,",");    while (st.hasMoreTokens()) {      String server=st.nextToken().trim();      if (server.indexOf(':') < 0 && gatewayPort != null) {        server+=":";        server+=gatewayPort;      }      if (isDebug)       log("Adding SMTP gateway: " + server);      gatewayServer.add(server);    }    authUser=getInitParameter("gatewayUsername");    if (authUser == null) {      authUser=getInitParameter("gatewayusername");    }    authPass=getInitParameter("gatewayPassword");  }  String bindAddress=getInitParameter("bind");  isBindUsed=bindAddress != null;  try {    if (isBindUsed)     RemoteDeliverySocketFactory.setBindAdress(bindAddress);  } catch (  UnknownHostException e) {    log("Invalid bind setting (" + bindAddress + "): "+ e.toString());  }  Iterator<String> i=getInitParameterNames();  while (i.hasNext()) {    String name=i.next();    if (name.startsWith("mail.")) {      defprops.put(name,getInitParameter(name));    }  }  String dnsRetry=getInitParameter("maxDnsProblemRetries");  if (dnsRetry != null && !dnsRetry.equals("")) {    dnsProblemRetry=Integer.parseInt(dnsRetry);  }  heloName=getInitParameter("heloName");  String prio=getInitParameter("usePriority");  if (prio != null) {    usePriority=Boolean.valueOf(prio);  }  workersThreadCount=Integer.parseInt(getInitParameter("deliveryThreads"));  initDeliveryThreads();}  }
class C{  public boolean isStandardModule(String moduleName){  File file=this.resolve(moduleName,true);  if (file == null) {    return false;  }  String path=file.getAbsolutePath();  if (path == null) {    return false;  }  return path.startsWith(this.libraryPaths[this.libraryPaths.length - 1]);}  }
class C{  public static long size(String fileName){  return FilePath.get(fileName).size();}  }
class C{  static String toFormedString(int ms){  StringBuilder s=new StringBuilder();  boolean minus=false;  if (ms < 0) {    s.append("-");    minus=true;    ms=-ms;  } else   if (ms == 0) {    return "0";  }  int hour=ms / (60 * 60 * 1000);  ms%=(60 * 60 * 1000);  int minute=ms / (60 * 1000);  if (hour != 0) {    if (minus && minute != 0) {      s.append("(");    }    s.append(Integer.toString(hour) + "*ONE_HOUR");  }  if (minute != 0) {    if (hour != 0) {      s.append("+");    }    s.append(Integer.toString(minute) + "*ONE_MINUTE");    if (minus && hour != 0) {      s.append(")");    }  }  return s.toString();}  }
class C{  public static Sampler MIRRORED_REPEAT_LINEAR_MIP_LINEAR(RenderScript rs){  if (rs.mSampler_MIRRORED_REPEAT_LINEAR_MIP_LINEAR == null) {    Builder b=new Builder(rs);    b.setMinification(Value.LINEAR_MIP_LINEAR);    b.setMagnification(Value.LINEAR);    b.setWrapS(Value.MIRRORED_REPEAT);    b.setWrapT(Value.MIRRORED_REPEAT);    rs.mSampler_MIRRORED_REPEAT_LINEAR_MIP_LINEAR=b.create();  }  return rs.mSampler_MIRRORED_REPEAT_LINEAR_MIP_LINEAR;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  NamedNodeMap attributes;  Attr domesticAttr;  String attrName;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("address");  testEmployee=elementList.item(1);  attributes=testEmployee.getAttributes();  domesticAttr=(Attr)attributes.getNamedItemNS("http://www.usa.com","domestic");  attrName=domesticAttr.getNodeName();  assertEquals("attrName","dmstc:domestic",attrName);}  }
class C{  public boolean isColumnMajor(){  return colMaj;}  }
class C{  public Peek with(PeekViewOptions options){  this.options=options;  return this;}  }
class C{  public static IKnowledge serializableInstance(){  return new Knowledge2();}  }
class C{  private static void processEvent(SimEvent e){  int dest, src;  SimEntity dest_ent;  if (e.eventTime() < clock) {    throw new IllegalArgumentException("Past event detected.");  }  clock=e.eventTime();switch (e.getType()) {case SimEvent.ENULL:    throw new IllegalArgumentException("Event has a null type.");case SimEvent.CREATE:  SimEntity newe=(SimEntity)e.getData();addEntityDynamically(newe);break;case SimEvent.SEND:dest=e.getDestination();if (dest < 0) {throw new IllegalArgumentException("Attempt to send to a null entity detected.");} else {int tag=e.getTag();dest_ent=entities.get(dest);if (dest_ent.getState() == SimEntity.WAITING) {Integer destObj=Integer.valueOf(dest);Predicate p=waitPredicates.get(destObj);if ((p == null) || (tag == 9999) || (p.match(e))) {dest_ent.setEventBuffer((SimEvent)e.clone());dest_ent.setState(SimEntity.RUNNABLE);waitPredicates.remove(destObj);} else {deferred.addEvent(e);}} else {deferred.addEvent(e);}}break;case SimEvent.HOLD_DONE:src=e.getSource();if (src < 0) {throw new IllegalArgumentException("Null entity holding.");} else {entities.get(src).setState(SimEntity.RUNNABLE);}break;default :break;}}  }
class C{  @Util public static List<BreadCrumb> createBreadCrumbs(String tenantId,CatalogServiceRestRep service){  RelatedResourceRep categoryId=service.getCatalogCategory();  String parentId=getParentId(categoryId);  List<BreadCrumb> breadcrumbs=createBreadCrumbs(parentId,getCatalog(tenantId));  String id=service.getId() != null ? service.getId().toString() : "";  addBreadCrumb(breadcrumbs,id,service.getName(),service.getTitle());  return breadcrumbs;}  }
class C{  public static int gcd(int p,int q){  int a, b, c;  a=p;  b=q;  while (b != 0) {    c=remainder(a,b);    a=b;    b=c;  }  return a;}  }
class C{  protected void testsPerClassType(int classType,boolean updateable,boolean weighted,boolean multiInstance){  boolean PNom=canPredict(true,false,false,false,false,multiInstance,classType)[0];  boolean PNum=canPredict(false,true,false,false,false,multiInstance,classType)[0];  boolean PStr=canPredict(false,false,true,false,false,multiInstance,classType)[0];  boolean PDat=canPredict(false,false,false,true,false,multiInstance,classType)[0];  boolean PRel;  if (!multiInstance) {    PRel=canPredict(false,false,false,false,true,multiInstance,classType)[0];  } else {    PRel=false;  }  if (PNom || PNum || PStr|| PDat|| PRel) {    if (weighted) {      instanceWeights(PNom,PNum,PStr,PDat,PRel,multiInstance,classType);    }    canHandleOnlyClass(PNom,PNum,PStr,PDat,PRel,classType);    if (classType == Attribute.NOMINAL) {      canHandleNClasses(PNom,PNum,PStr,PDat,PRel,multiInstance,4);    }    if (!multiInstance) {      canHandleClassAsNthAttribute(PNom,PNum,PStr,PDat,PRel,multiInstance,classType,0);      canHandleClassAsNthAttribute(PNom,PNum,PStr,PDat,PRel,multiInstance,classType,1);    }    canHandleZeroTraining(PNom,PNum,PStr,PDat,PRel,multiInstance,classType);    boolean handleMissingPredictors=canHandleMissing(PNom,PNum,PStr,PDat,PRel,multiInstance,classType,true,false,20)[0];    if (handleMissingPredictors) {      canHandleMissing(PNom,PNum,PStr,PDat,PRel,multiInstance,classType,true,false,100);    }    boolean handleMissingClass=canHandleMissing(PNom,PNum,PStr,PDat,PRel,multiInstance,classType,false,true,20)[0];    if (handleMissingClass) {      canHandleMissing(PNom,PNum,PStr,PDat,PRel,multiInstance,classType,false,true,100);    }    correctBuildInitialisation(PNom,PNum,PStr,PDat,PRel,multiInstance,classType);    datasetIntegrity(PNom,PNum,PStr,PDat,PRel,multiInstance,classType,handleMissingPredictors,handleMissingClass);    doesntUseTestClassVal(PNom,PNum,PStr,PDat,PRel,multiInstance,classType);    if (updateable) {      updatingEquality(PNom,PNum,PStr,PDat,PRel,multiInstance,classType);    }  }}  }
class C{  public final void flush() throws IOException {  flushBuffer();  if (writer != null) {    writer.flush();  }}  }
class C{  private void fireObjectChanged(Binding newBd,long changeID){  if (namingListeners == null || namingListeners.size() == 0)   return;  Binding oldBd=new Binding(newBd.getName(),null,newBd.isRelative());  NamingEvent e=new NamingEvent(eventSrc,NamingEvent.OBJECT_CHANGED,newBd,oldBd,new Long(changeID));  support.queueEvent(e,namingListeners);}  }
class C{  public DefaultRequest txShipping(Double value){  setDouble(TRANSACTION_SHIPPING,value);  return this;}  }
class C{  @Override public void drawRect(int x,int y,int width,int height){  setStateToLocal();  m_printstream.println(xTransform(xScale(x)) + " " + yTransform(yScale(y))+ " "+ xScale(width)+ " "+ yScale(height)+ " false Rect");}  }
class C{  public BiosCommandResult doStopReplicationPolicy(StorageSystem system,String policyName){  try {    IsilonApi isi=getIsilonDevice(system);    IsilonSyncPolicy policy=isi.getReplicationPolicy(policyName);    if (policy.getEnabled()) {      IsilonSyncPolicy modifiedPolicy=new IsilonSyncPolicy();      modifiedPolicy.setName(policyName);      modifiedPolicy.setEnabled(false);      isi.modifyReplicationPolicy(policyName,modifiedPolicy);      return BiosCommandResult.createSuccessfulResult();    } else {      _log.error("Replication Policy - {} can't be STOPPED because policy is already DISABLED",policy.toString());      ServiceError error=DeviceControllerErrors.isilon.jobFailed("doStopReplicationPolicy as : Replication Policy can't be STOPPED because policy is already DISABLED");      return BiosCommandResult.createErrorResult(error);    }  } catch (  IsilonException e) {    return BiosCommandResult.createErrorResult(e);  }}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMPolygonElement(prefix,(AbstractDocument)doc);}  }
class C{  public void misses(int misses){  this.misses=misses;}  }
class C{  public boolean isMandatory(){  Object oo=get_Value(COLUMNNAME_IsMandatory);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public GridBoundedConcurrentLinkedHashSet(int max,int initCap,float loadFactor,int concurLvl){  this(max,initCap,loadFactor,concurLvl,SINGLE_Q);}  }
class C{  void recomposeOutput(OutputProperties oprops) throws TransformerException {  m_outputProperties.copyFrom(oprops);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:10.468 -0500",hash_original_method="F79252569D56DBC251BCABE120CFDF67",hash_generated_method="27F535B0484E36F77F11DB98C117FE82") protected synchronized WebHistoryItem clone(){  return new WebHistoryItem(this);}  }
class C{  public final boolean isNominal(){  return (m_Type == NOMINAL);}  }
class C{  public List<RepositoryMetaData> repositories(){  return this.repositories;}  }
class C{  public final void writeShort(int v){  tempBuffer[0]=(byte)((v >>> 8) & 0xFF);  tempBuffer[1]=(byte)((v >>> 0) & 0xFF);  write(tempBuffer,0,2);}  }
class C{  public void deleteSelectedEntry(){  try {    KeyStoreHistory history=kseFrame.getActiveKeyStoreHistory();    KeyStoreState currentState=history.getCurrentState();    KeyStoreState newState=currentState.createBasisForNextState(this);    KeyStore keyStore=newState.getKeyStore();    String alias=kseFrame.getSelectedEntryAlias();    String message=MessageFormat.format(res.getString("DeleteKeyAction.ConfirmDelete.message"),alias);    int selected=JOptionPane.showConfirmDialog(frame,message,res.getString("DeleteKeyAction.DeleteEntry.Title"),JOptionPane.YES_NO_OPTION);    if (selected != JOptionPane.YES_OPTION) {      return;    }    keyStore.deleteEntry(alias);    currentState.append(newState);    kseFrame.updateControls(true);  } catch (  Exception ex) {    DError.displayError(frame,ex);  }}  }
class C{  public void toggleFavorite(){  if (mFavoritesCache != null) {synchronized (this) {      mFavoritesCache.toggleSong(getAudioId(),getTrackName(),getAlbumName(),getArtistName());    }  }}  }
class C{  public static String stripXSS(String value){  if (value == null) {    return null;  }  value=ESAPI.encoder().canonicalize(value,false,false);  value=value.replaceAll("\0","");  value=Jsoup.clean(value,"",Whitelist.none(),new Document.OutputSettings().prettyPrint(false));  return value;}  }
class C{  public Map<String,Integer> call() throws Exception {  try {    checkForInterruption();    setState(STATE.STARTED);    addMessage(Level.INFO,"Archive generation started for version #" + String.valueOf(resource.getEmlVersion()));    dwcaFolder=dataDir.tmpDir();    archive=new Archive();    createDataFiles();    addEmlFile();    createMetaFile();    validate();    bundleArchive();    addMessage(Level.INFO,"Archive version #" + String.valueOf(resource.getEmlVersion()) + " generated successfully!");    setState(STATE.COMPLETED);    return recordsByExtension;  } catch (  GeneratorException e) {    setState(e);    if (cfg.debug()) {      writeFailureToPublicationLog(e);    } else {      log.error("Exception occurred trying to generate Darwin Core Archive for resource " + resource.getTitleAndShortname() + ": "+ e.getMessage(),e);    }    throw e;  }catch (  InterruptedException e) {    setState(e);    writeFailureToPublicationLog(e);    throw e;  }catch (  Exception e) {    setState(e);    writeFailureToPublicationLog(e);    throw new GeneratorException(e);  } finally {    if (dwcaFolder != null && dwcaFolder.exists()) {      FileUtils.deleteQuietly(dwcaFolder);    }    closePublicationLogWriter();  }}  }
class C{  public boolean isReadonly(){  return readonly;}  }
class C{  public EllipticalOrbitAnimation3D(Vector3 focalPoint,Vector3 periapsis,double eccentricity,OrbitDirection direction){  this(focalPoint,periapsis,Vector3.getAxisVector(Axis.Y),eccentricity,direction);}  }
class C{  public void pushNull() throws IOException {  pushValues.add(new Object());  if (flashVersion < 5) {    flushPushValues();  }}  }
class C{  protected BaseTypeRefImpl(){  super();}  }
class C{  public Bits diffSet(Bits xs){  Assert.check(currentState != BitsState.UNKNOWN);  for (int i=0; i < bits.length; i++) {    if (i < xs.bits.length) {      bits[i]=bits[i] & ~xs.bits[i];    }  }  currentState=BitsState.NORMAL;  return this;}  }
class C{  static public IValueExpressionNode toConjunctiveValueExpression(final List<IValueExpressionNode> conjuncts){  if (conjuncts == null || conjuncts.isEmpty()) {    return null;  }  if (conjuncts.size() == 1) {    return conjuncts.get(0);  } else {    IValueExpressionNode tmp=FunctionNode.AND((ValueExpressionNode)conjuncts.get(0),(ValueExpressionNode)conjuncts.get(1));    for (int i=2; i < conjuncts.size(); i++) {      tmp=FunctionNode.AND((ValueExpressionNode)tmp,(ValueExpressionNode)conjuncts.get(i));    }    return tmp;  }}  }
class C{  public synchronized boolean shouldInterruptTask(){  return shouldInterruptTask;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ANONYMOUS_CONCRETE_METHOD_DECLARATION_2__MORE_CODE_1:    return ((InternalEList<?>)getMoreCode_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public boolean match(Element e,String pseudoE){  String s=e.getAttribute("lang").toLowerCase();  if (s.equals(lang) || s.startsWith(langHyphen)) {    return true;  }  s=e.getAttributeNS(XMLConstants.XML_NAMESPACE_URI,XMLConstants.XML_LANG_ATTRIBUTE).toLowerCase();  return s.equals(lang) || s.startsWith(langHyphen);}  }
class C{  public static PcMaxLocalRunner serializableInstance(){  return new PcMaxLocalRunner(Dag.serializableInstance(),new Parameters());}  }
class C{  public boolean isSelected(){  return (emblem instanceof RadioButton || emblem instanceof CheckBox) && emblem.isSelected();}  }
class C{  public String toString(){  return typeString("",false,true);}  }
class C{  public static byte[] append(byte[] pck1,byte[] pck2){  byte packet[]=new byte[pck1.length + pck2.length];  for (int i=0; i < pck1.length; i++)   packet[i]=pck1[i];  for (int i=0; i < pck2.length; i++)   packet[i + pck1.length]=pck2[i];  return packet;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  int progress;  int i, n;  int numFeatures;  int oneHundredthTotal;  int startingPointInPart, endingPointInPart;  double[][] vertices;  ShapeType shapeType, outputShapeType;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    if (shapeType.getBaseType() != ShapeType.POLYGON) {      showFeedback("This tool only works with shapefiles of a polygon base shape type.");      return;    }    outputShapeType=shapeType;    ShapeFile output=new ShapeFile(outputFile,outputShapeType);    output.setProjectionStringFromOtherShapefile(input);    FileUtilities.copyFile(new File(input.getDatabaseFile()),new File(output.getDatabaseFile()));    numFeatures=input.getNumberOfRecords();    oneHundredthTotal=numFeatures / 100;    n=0;    progress=0;    for (    ShapeFileRecord record : input.records) {switch (shapeType) {case POLYGON:        whitebox.geospatialfiles.shapefile.Polygon recPoly=(whitebox.geospatialfiles.shapefile.Polygon)(record.getGeometry());      vertices=recPoly.getPoints();    if (recPoly.getNumberOfHoles() == 0) {      output.addRecord(recPoly);    } else {      whitebox.geospatialfiles.shapefile.Polygon recPolygonOutput=(whitebox.geospatialfiles.shapefile.Polygon)(record.getGeometry());      ArrayList<ShapefilePoint> pnts=new ArrayList<>();      int numParts=recPoly.getNumParts() - recPoly.getNumberOfHoles();      int[] outParts=new int[numParts];      int[] inParts=recPoly.getParts();      int numPoints=recPoly.getNumPoints();      int numPartsIn=recPoly.getNumParts();      boolean[] isHole=recPoly.getPartHoleData();      int outPartNum=0;      for (int part=0; part < inParts.length; part++) {        if (!isHole[part]) {          outParts[outPartNum]=pnts.size();          startingPointInPart=inParts[part];          if (part < numPartsIn - 1) {            endingPointInPart=inParts[part + 1];          } else {            endingPointInPart=numPoints;          }          for (int p=startingPointInPart; p < endingPointInPart; p++) {            pnts.add(new ShapefilePoint(vertices[p][0],vertices[p][1]));          }          outPartNum++;        }      }      PointsList pl=new PointsList(pnts);      whitebox.geospatialfiles.shapefile.Polygon wbPoly=new whitebox.geospatialfiles.shapefile.Polygon(outParts,pl.getPointsArray());      output.addRecord(wbPoly);    }  break;case POLYGONZ:PolygonZ recPolyZ=(PolygonZ)(record.getGeometry());vertices=recPolyZ.getPoints();if (recPolyZ.getNumberOfHoles() == 0) {output.addRecord(recPolyZ);} else {ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();int numParts=recPolyZ.getNumParts() - recPolyZ.getNumberOfHoles();int[] outParts=new int[numParts];int[] inParts=recPolyZ.getParts();int numPoints=recPolyZ.getNumPoints();int numPartsIn=recPolyZ.getNumParts();boolean[] isHole=recPolyZ.getPartHoleData();int outPartNum=0;for (int part=0; part < inParts.length; part++) {if (!isHole[part]) {  outParts[outPartNum]=pnts.size();  startingPointInPart=inParts[part];  if (part < numPartsIn - 1) {    endingPointInPart=inParts[part + 1];  } else {    endingPointInPart=numPoints;  }  for (int p=startingPointInPart; p < endingPointInPart; p++) {    pnts.add(new ShapefilePoint(vertices[p][0],vertices[p][1]));  }  outPartNum++;}}PointsList pl=new PointsList(pnts);double[] zArray=recPolyZ.getzArray();double[] zArrayOut=new double[pnts.size()];int j=0;for (int part=0; part < inParts.length; part++) {if (!isHole[part]) {  startingPointInPart=inParts[part];  if (part < numPartsIn - 1) {    endingPointInPart=inParts[part + 1];  } else {    endingPointInPart=numPoints;  }  for (int p=startingPointInPart; p < endingPointInPart; p++) {    zArrayOut[j]=zArray[p];    j++;  }}}double[] mArray=recPolyZ.getmArray();double[] mArrayOut=new double[pnts.size()];j=0;for (int part=0; part < inParts.length; part++) {if (!isHole[part]) {  startingPointInPart=inParts[part];  if (part < numPartsIn - 1) {    endingPointInPart=inParts[part + 1];  } else {    endingPointInPart=numPoints;  }  for (int p=startingPointInPart; p < endingPointInPart; p++) {    mArrayOut[j]=mArray[p];    j++;  }}}PolygonZ wbPoly=new PolygonZ(outParts,pl.getPointsArray(),zArrayOut,mArrayOut);output.addRecord(wbPoly);}break;case POLYGONM:PolygonM recPolyM=(PolygonM)(record.getGeometry());vertices=recPolyM.getPoints();if (recPolyM.getNumberOfHoles() == 0) {output.addRecord(recPolyM);} else {ArrayList<ShapefilePoint> pnts=new ArrayList<>();int numParts=recPolyM.getNumParts() - recPolyM.getNumberOfHoles();int[] outParts=new int[numParts];int[] inParts=recPolyM.getParts();int numPoints=recPolyM.getNumPoints();int numPartsIn=recPolyM.getNumParts();boolean[] isHole=recPolyM.getPartHoleData();int outPartNum=0;for (int part=0; part < inParts.length; part++) {if (!isHole[part]) {outParts[outPartNum]=pnts.size();startingPointInPart=inParts[part];if (part < numPartsIn - 1) {endingPointInPart=inParts[part + 1];} else {endingPointInPart=numPoints;}for (int p=startingPointInPart; p < endingPointInPart; p++) {pnts.add(new ShapefilePoint(vertices[p][0],vertices[p][1]));}outPartNum++;}}PointsList pl=new PointsList(pnts);double[] mArray=recPolyM.getmArray();double[] mArrayOut=new double[pnts.size()];int j=0;for (int part=0; part < inParts.length; part++) {if (!isHole[part]) {startingPointInPart=inParts[part];if (part < numPartsIn - 1) {endingPointInPart=inParts[part + 1];} else {endingPointInPart=numPoints;}for (int p=startingPointInPart; p < endingPointInPart; p++) {mArrayOut[j]=mArray[p];j++;}}}PolygonM wbPoly=new PolygonM(outParts,pl.getPointsArray(),mArrayOut);output.addRecord(wbPoly);}break;}n++;if (n >= oneHundredthTotal) {n=0;if (cancelOp) {cancelOperation();return;}progress++;updateProgress(progress);}}output.write();updateProgress("Displaying vector: ",0);returnData(outputFile);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public EObject basicGetAstElement(){  return astElement;}  }
class C{  public static PtMatrix createPtMatrix(PlansCalcRouteConfigGroup plansCalcRoute,BoundingBox bb,MatrixBasedPtRouterConfigGroup ippcm){  String ptStopInputFile=ippcm.getPtStopsInputFile();  QuadTree<PtStop> ptStops=FileUtils.readPtStops(ptStopInputFile,bb);  if (ippcm.isUsingTravelTimesAndDistances()) {    Matrix originDestinationTravelTimeMatrix=new Matrix("PtStopTravelTimeMatrix","Stop to stop origin destination travel time matrix");    Matrix originDestinationTravelDistanceMatrix=new Matrix("PtStopTravelDistanceMatrix","Stop to stop origin destination travel distance matrix");    String ptTravelTimeInputFile=ippcm.getPtTravelTimesInputFile();    String ptTravelDistanceInputFile=ippcm.getPtTravelDistancesInputFile();    BufferedReader brTravelTimes=IOUtils.getBufferedReader(ptTravelTimeInputFile);    log.info("Creating travel time OD matrix from VISUM pt stop 2 pt stop travel times file: " + ptTravelTimeInputFile);    final Map<Id<PtStop>,PtStop> ptStopsMap=PtMatrix.convertQuadTree2HashMap(ptStops);    FileUtils.fillODMatrix(originDestinationTravelTimeMatrix,ptStopsMap,brTravelTimes,true);    log.info("Done creating travel time OD matrix. " + originDestinationTravelTimeMatrix.toString());    log.info("Creating travel distance OD matrix from VISUM pt stop 2 pt stop travel distance file: " + ptTravelDistanceInputFile);    BufferedReader brTravelDistances=IOUtils.getBufferedReader(ptTravelDistanceInputFile);    FileUtils.fillODMatrix(originDestinationTravelDistanceMatrix,ptStopsMap,brTravelDistances,false);    log.info("Done creating travel distance OD matrix. " + originDestinationTravelDistanceMatrix.toString());    log.info("Done creating OD matrices with pt stop to pt stop travel times and distances.");    return new PtMatrix(plansCalcRoute,ptStops,originDestinationTravelTimeMatrix,originDestinationTravelDistanceMatrix);  } else {    Matrix originDestinationTravelTimeMatrix=new Matrix("PtStopTravelTimeMatrix","Stop to stop origin destination travel time matrix");    Matrix originDestinationTravelDistanceMatrix=new Matrix("PtStopTravelDistanceMatrix","Stop to stop origin destination travel distance matrix");    PtStop ptStopIds[]=ptStops.values().toArray(new PtStop[0]);    for (int origin=0; origin < ptStopIds.length; origin++) {      PtStop originStop=ptStopIds[origin];      Coord originCoord=originStop.getCoord();      for (int destination=0; destination < ptStopIds.length; destination++) {        PtStop destinationStop=ptStopIds[destination];        Coord destinationCoord=destinationStop.getCoord();        double distance=CoordUtils.calcEuclideanDistance(originCoord,destinationCoord) * plansCalcRoute.getModeRoutingParams().get(TransportMode.walk).getBeelineDistanceFactor();        double travelTime=distance / plansCalcRoute.getTeleportedModeSpeeds().get(TransportMode.pt);        originDestinationTravelTimeMatrix.createEntry(originStop.getId().toString(),destinationStop.getId().toString(),travelTime);        originDestinationTravelDistanceMatrix.createEntry(originStop.getId().toString(),destinationStop.getId().toString(),distance);      }    }    log.info("Done creating OD matrices with pt stop to pt stop travel times and distances.");    return new PtMatrix(plansCalcRoute,ptStops,originDestinationTravelTimeMatrix,originDestinationTravelDistanceMatrix);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.155 -0500",hash_original_method="0CB560808F252622C176039BC6E86FF7",hash_generated_method="60C55E1F0F57974C53272E8EC79F9AE8") public CallIdHeader createCallIdHeader(String callId) throws ParseException {  if (callId == null)   throw new NullPointerException("null arg callId");  CallID c=new CallID();  c.setCallId(callId);  return c;}  }
class C{  public static double subsetDL(double t,double k,double p){  double rt=Utils.gr(p,0.0) ? (-k * Utils.log2(p)) : 0.0;  rt-=(t - k) * Utils.log2(1 - p);  return rt;}  }
class C{  public byte[] extractData(byte[] stegoData,String stegoFileName,byte[] origSigData) throws OpenStegoException {  int bytesRead=0;  byte[] data=null;  LSBDataHeader header=null;  LSBInputStream lsbIS=null;  try {    lsbIS=new LSBInputStream(ImageUtil.byteArrayToImage(stegoData,stegoFileName),this.config);    header=lsbIS.getDataHeader();    data=new byte[header.getDataLength()];    bytesRead=lsbIS.read(data,0,data.length);    if (bytesRead != data.length) {      throw new OpenStegoException(null,NAMESPACE,LSBErrors.ERR_IMAGE_DATA_READ);    }    lsbIS.close();    return data;  } catch (  OpenStegoException osEx) {    throw osEx;  }catch (  Exception ex) {    throw new OpenStegoException(ex);  }}  }
class C{  static MyFragment newInstance(CharSequence label){  MyFragment f=new MyFragment();  Bundle b=new Bundle();  b.putCharSequence("label",label);  f.setArguments(b);  return f;}  }
class C{  protected ConnectionStateTLS(SSLSessionImpl session){  try {    CipherSuite cipherSuite=session.cipherSuite;    hash_size=cipherSuite.getMACLength();    boolean is_exportabe=cipherSuite.isExportable();    int key_size=(is_exportabe) ? cipherSuite.keyMaterial : cipherSuite.expandedKeyMaterial;    int iv_size=cipherSuite.ivSize;    block_size=cipherSuite.getBlockSize();    String algName=cipherSuite.getBulkEncryptionAlgorithm();    String macName=cipherSuite.getHmacName();    if (logger != null) {      logger.println("ConnectionStateTLS.create:");      logger.println("  cipher suite name: " + cipherSuite.getName());      logger.println("  encryption alg name: " + algName);      logger.println("  mac alg name: " + macName);      logger.println("  hash size: " + hash_size);      logger.println("  block size: " + block_size);      logger.println("  IV size:" + iv_size);      logger.println("  key size: " + key_size);    }    byte[] clientRandom=session.clientRandom;    byte[] serverRandom=session.serverRandom;    byte[] key_block=new byte[2 * hash_size + 2 * key_size + 2 * iv_size];    byte[] seed=new byte[clientRandom.length + serverRandom.length];    System.arraycopy(serverRandom,0,seed,0,serverRandom.length);    System.arraycopy(clientRandom,0,seed,serverRandom.length,clientRandom.length);    PRF.computePRF(key_block,session.master_secret,KEY_EXPANSION_LABEL,seed);    byte[] client_mac_secret=new byte[hash_size];    byte[] server_mac_secret=new byte[hash_size];    byte[] client_key=new byte[key_size];    byte[] server_key=new byte[key_size];    boolean is_client=!session.isServer;    System.arraycopy(key_block,0,client_mac_secret,0,hash_size);    System.arraycopy(key_block,hash_size,server_mac_secret,0,hash_size);    System.arraycopy(key_block,2 * hash_size,client_key,0,key_size);    System.arraycopy(key_block,2 * hash_size + key_size,server_key,0,key_size);    IvParameterSpec clientIV=null;    IvParameterSpec serverIV=null;    if (is_exportabe) {      System.arraycopy(clientRandom,0,seed,0,clientRandom.length);      System.arraycopy(serverRandom,0,seed,clientRandom.length,serverRandom.length);      byte[] final_client_key=new byte[cipherSuite.expandedKeyMaterial];      byte[] final_server_key=new byte[cipherSuite.expandedKeyMaterial];      PRF.computePRF(final_client_key,client_key,CLIENT_WRITE_KEY_LABEL,seed);      PRF.computePRF(final_server_key,server_key,SERVER_WRITE_KEY_LABEL,seed);      client_key=final_client_key;      server_key=final_server_key;      if (block_size != 0) {        byte[] iv_block=new byte[2 * iv_size];        PRF.computePRF(iv_block,null,IV_BLOCK_LABEL,seed);        clientIV=new IvParameterSpec(iv_block,0,iv_size);        serverIV=new IvParameterSpec(iv_block,iv_size,iv_size);      }    } else     if (block_size != 0) {      clientIV=new IvParameterSpec(key_block,2 * (hash_size + key_size),iv_size);      serverIV=new IvParameterSpec(key_block,2 * (hash_size + key_size) + iv_size,iv_size);    }    if (logger != null) {      logger.println("is exportable: " + is_exportabe);      logger.println("master_secret");      logger.print(session.master_secret);      logger.println("client_random");      logger.print(clientRandom);      logger.println("server_random");      logger.print(serverRandom);      logger.println("client_mac_secret");      logger.print(client_mac_secret);      logger.println("server_mac_secret");      logger.print(server_mac_secret);      logger.println("client_key");      logger.print(client_key);      logger.println("server_key");      logger.print(server_key);      if (clientIV == null) {        logger.println("no IV.");      } else {        logger.println("client_iv");        logger.print(clientIV.getIV());        logger.println("server_iv");        logger.print(serverIV.getIV());      }    }    if (algName == null) {      encCipher=new NullCipher();      decCipher=new NullCipher();    } else {      encCipher=Cipher.getInstance(algName);      decCipher=Cipher.getInstance(algName);      if (is_client) {        encCipher.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(client_key,algName),clientIV);        decCipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(server_key,algName),serverIV);      } else {        encCipher.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(server_key,algName),serverIV);        decCipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(client_key,algName),clientIV);      }    }    encMac=Mac.getInstance(macName);    decMac=Mac.getInstance(macName);    if (is_client) {      encMac.init(new SecretKeySpec(client_mac_secret,macName));      decMac.init(new SecretKeySpec(server_mac_secret,macName));    } else {      encMac.init(new SecretKeySpec(server_mac_secret,macName));      decMac.init(new SecretKeySpec(client_mac_secret,macName));    }  } catch (  Exception e) {    e.printStackTrace();    throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLProtocolException("Error during computation of security parameters"));  }}  }
class C{  public State(){  this.root=Value.createRootValue();}  }
class C{  public InspectNetworkParams withNetworkId(@NotNull String netId){  requireNonNull(netId);  this.netId=netId;  return this;}  }
class C{  public static Instruction create(final Module module,final Address address,final String mnemonic,final List<Operand> operands,final byte[] data,final String architecture){  Preconditions.checkNotNull(address,"Error: Address argument can not be null");  Preconditions.checkNotNull(mnemonic,"Error: Mnemonic argument can not be null");  for (  final Operand operand : operands) {    Preconditions.checkNotNull(operand,"Error: Operands list contains a null-argument");  }  Preconditions.checkNotNull(data,"Error: Data argument can not be null");  return new Instruction(module.getNative().createInstruction(new CAddress(address.toLong()),mnemonic,convert(module.getNative(),operands),data,architecture));}  }
class C{  public T caseCodeLangs_(CodeLangs_ object){  return null;}  }
class C{  public BooleanList1(){  cList=new LegacyList();  cList.add("false");  cList.add("0");  cList.add(TemplateBooleanModel.FALSE);  cList.add(TemplateBooleanModel.TRUE);  cList.add(TemplateBooleanModel.TRUE);  cList.add(TemplateBooleanModel.TRUE);  cList.add(TemplateBooleanModel.FALSE);}  }
class C{  public boolean resyncPrepMirrorFilePair(URI primarysystemURI,URI targetSystemURI,URI fileshareURI,String policyName,String opId){  TaskCompleter completer=null;  try {    StorageSystem primarySystem=dbClient.queryObject(StorageSystem.class,primarysystemURI);    StorageSystem secondarySystem=dbClient.queryObject(StorageSystem.class,targetSystemURI);    FileShare targetFileShare=dbClient.queryObject(FileShare.class,fileshareURI);    List<URI> combined=new ArrayList<URI>();    combined.add(fileshareURI);    if (targetFileShare.getParentFileShare() != null) {      combined.add(targetFileShare.getParentFileShare().getURI());    } else {      for (      String fsId : targetFileShare.getMirrorfsTargets()) {        combined.add(URI.create(fsId));      }    }    completer=new MirrorFileResyncTaskCompleter(FileShare.class,combined,opId,primarysystemURI);    WorkflowStepCompleter.stepExecuting(opId);    completer.setNotifyWorkflow(true);    getRemoteMirrorDevice(primarySystem).doResyncLink(primarySystem,secondarySystem,targetFileShare,completer,policyName);  } catch (  Exception e) {    ServiceError error=DeviceControllerException.errors.jobFailed(e);    if (null != completer) {      completer.error(dbClient,error);    }    WorkflowStepCompleter.stepFailed(opId,error);    return false;  }  return true;}  }
class C{  void jimpleTargetFixup(){  BasicBlock b;  BBQ bbq=new BBQ();  Code_attribute c=method.locate_code_attribute();  if (c == null)   return;{    BasicBlock bb=cfg;    while (bb != null) {      bb.done=true;      bb=bb.next;    }  }  bbq.push(cfg);  processTargetFixup(bbq);  if (bbq.isEmpty()) {    int i;    for (i=0; i < c.exception_table_length; i++) {      b=c.exception_table[i].b;      if (b != null && b.done) {        bbq.push(b);        processTargetFixup(bbq);        if (!bbq.isEmpty()) {          G.v().out.println("Error 2nd processing exception block.");          break;        }      }    }  }}  }
class C{  public void write(char cbuf[],int off,int len) throws IOException {  out.write(cbuf,off,len);}  }
class C{  public ApiClient addDefaultHeader(String key,String value){  defaultHeaderMap.put(key,value);  return this;}  }
class C{  public MoreLikeThisQueryBuilder addLikeItem(Item... likeItems){  Collections.addAll(this.likeItems,likeItems);  return this;}  }
class C{  private void stopEmbeddedCassandra(){  if (log != null) {    log.info("-------------------------------");    log.info("| Stopping embedded Cassandra |");    log.info("-------------------------------");  }  if (embeddedCassandraDaemon != null) {    try {      embeddedCassandraDaemon.deactivate();    } catch (    Throwable e) {      throw new RuntimeException("Failed to stop embedded Cassandra",e);    }  }  if (log != null) {    log.info("------------------------------");    log.info("| Embedded Cassandra stopped |");    log.info("------------------------------");  }}  }
class C{  public void fillPrimitiveProperty(Object entity,Set<String> keySet,StructuralProperty property,Field field,String node,Map<String,Object> map) throws ODataException {  for (  String target : keySet) {    if (node.equalsIgnoreCase(target)) {      Object value=getFieldValueByType(property.getTypeName(),target,map,false);      if (value != null) {        setFieldValue(field,entity,value);        break;      } else {        LOG.warn("There is no element with name '{}'",node);      }    }  }}  }
class C{  public static ChangeMethodSignatureParticipant[] loadChangeMethodSignatureParticipants(RefactoringStatus status,RefactoringProcessor processor,IMethod method,ChangeMethodSignatureArguments arguments,IParticipantDescriptorFilter filter,String[] affectedNatures,SharableParticipants shared){  RefactoringParticipant[] participants=fgMethodSignatureInstance.getParticipants(status,processor,method,arguments,filter,affectedNatures,shared);  ChangeMethodSignatureParticipant[] result=new ChangeMethodSignatureParticipant[participants.length];  System.arraycopy(participants,0,result,0,participants.length);  return result;}  }
class C{  private void populateEnvMap(Configuration configuration){  addToList(ES_HEAP,getHeapSpaceString(configuration));  if (configuration.isFrameworkUseDocker()) {    addToList(native_mesos_library_key,native_mesos_library_path);  }}  }
class C{  public final int numValues(){  if (!isNominal() && !isString()) {    return 0;  } else {    return m_Values.size();  }}  }
class C{  @Override public boolean hasCancelSaveButtons(){  return false;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public void clean(){  setCurrentPoints(0);  checkState();}  }
class C{  public final int nPieces(){  int ret=0;  for (int sq=0; sq < 64; sq++)   if (squares[sq] != Piece.EMPTY)   ret++;  return ret;}  }
class C{  public static SamFilterParams.SamFilterParamsBuilder makeFilterParamsBuilder(final CFlags flags){  final SamFilterParams.SamFilterParamsBuilder builder=SamFilterParams.builder();  if (flags.isSet(MAX_HITS_FLAG)) {    builder.maxAlignmentCount((Integer)flags.getValue(MAX_HITS_FLAG));  }  if (flags.isSet(MIN_MAPQ_FLAG)) {    builder.minMapQ((Integer)flags.getValue(MIN_MAPQ_FLAG));  }  if (flags.isSet(MAX_AS_MATED_FLAG)) {    final IntegerOrPercentage matedAS=(IntegerOrPercentage)flags.getValue(MAX_AS_MATED_FLAG);    builder.maxMatedAlignmentScore(matedAS);    if (flags.isSet(MAX_AS_UNMATED_FLAG)) {      final IntegerOrPercentage unmatedAS=(IntegerOrPercentage)flags.getValue(MAX_AS_UNMATED_FLAG);      if (unmatedAS.compareTo(matedAS) > 0) {        Diagnostic.warning("--" + MAX_AS_UNMATED_FLAG + " should not be greater than --"+ MAX_AS_MATED_FLAG);      }    }  }  if (flags.isSet(MAX_AS_UNMATED_FLAG)) {    builder.maxUnmatedAlignmentScore((IntegerOrPercentage)flags.getValue(MAX_AS_UNMATED_FLAG));  }  builder.excludeMated(flags.isSet(EXCLUDE_MATED_FLAG));  builder.excludeUnmated(flags.isSet(EXCLUDE_UNMATED_FLAG));  builder.excludeUnmapped(flags.isSet(SamFilterOptions.EXCLUDE_UNMAPPED_FLAG));  builder.excludeUnplaced(flags.isSet(SamFilterOptions.EXCLUDE_UNPLACED_FLAG));  if (flags.isSet(FILTER_FLAGS)) {    builder.requireUnsetFlags((Integer)flags.getValue(FILTER_FLAGS));  }  if (flags.isSet(REQUIRE_FLAGS)) {    builder.requireSetFlags((Integer)flags.getValue(REQUIRE_FLAGS));  }  if (flags.getFlag(KEEP_DUPLICATES_FLAG) != null) {    builder.findAndRemoveDuplicates(!flags.isSet(KEEP_DUPLICATES_FLAG));    builder.excludeDuplicates(!flags.isSet(KEEP_DUPLICATES_FLAG));  } else   if (flags.getFlag(EXCLUDE_DUPLICATES_FLAG) != null) {    builder.excludeDuplicates(flags.isSet(EXCLUDE_DUPLICATES_FLAG));  }  if (flags.isSet(CommonFlags.RESTRICTION_FLAG)) {    builder.restriction((String)flags.getValue(CommonFlags.RESTRICTION_FLAG));  }  if (flags.isSet(CommonFlags.BED_REGIONS_FLAG)) {    builder.bedRegionsFile((File)flags.getValue(CommonFlags.BED_REGIONS_FLAG));  }  return builder;}  }
class C{  public static IndexedImage pack(int[] rgb,int width,int height){  int arrayLength=width * height;  int[] tempPalette=new int[256];  int paletteLocation=0;  for (int iter=0; iter < arrayLength; iter++) {    int current=rgb[iter];    if (!contains(tempPalette,paletteLocation,current)) {      if (paletteLocation > 255) {        return null;      }      tempPalette[paletteLocation]=current;      paletteLocation++;    }  }  if (paletteLocation != tempPalette.length) {    int[] newArray=new int[paletteLocation];    System.arraycopy(tempPalette,0,newArray,0,paletteLocation);    tempPalette=newArray;  }  IndexedImage i=new IndexedImage(width,height,tempPalette,rgb);  return i;}  }
class C{  public String delimitersTipText(){  return "Set of delimiter characters to use in tokenizing (\\r, \\n and \\t can be used for carriage-return, line-feed and tab)";}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (!success)   return success;  if (!newRecord && is_ValueChanged("C_Tax_ID")) {    if (!updateInvoiceTax(true))     return false;  }  return updateHeaderTax();}  }
class C{  public static String cleanStackingMarkers(String filename){  if (!StringUtils.isEmpty(filename)) {    Matcher m=stackingPattern1.matcher(filename);    if (m.matches()) {      return m.group(1) + m.group(3);    }    m=stackingPattern2.matcher(filename);    if (m.matches()) {      return m.group(1) + m.group(3);    }    m=stackingPattern3.matcher(filename);    if (m.matches()) {      return m.group(1) + m.group(3);    }    m=stackingPattern4.matcher(filename);    if (m.matches()) {      return m.group(1) + m.group(3);    }  }  return filename;}  }
class C{  public void testMergeOneServletIntoDocumentWithSameServletAndParam() throws Exception {  String srcXml="<web-app>" + "  <servlet>" + "    <servlet-name>s1</servlet-name>"+ "    <servlet-class>sclass1</servlet-class>"+ "  </servlet>"+ "</web-app>";  WebXml srcWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(srcXml.getBytes("UTF-8")),null);  String mergeXml="<web-app>" + "  <servlet>" + "    <servlet-name>s1</servlet-name>"+ "    <servlet-class>sclass1</servlet-class>"+ "    <init-param>"+ "      <param-name>s1param1</param-name>"+ "      <param-value>s1param1value</param-value>"+ "    </init-param>"+ "  </servlet>"+ "</web-app>";  WebXml mergeWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(mergeXml.getBytes("UTF-8")),null);  WebXmlMerger merger=new WebXmlMerger(srcWebXml);  merger.merge(mergeWebXml);  assertTrue(WebXmlUtils.hasServlet(srcWebXml,"s1"));  List<String> initParams=WebXmlUtils.getServletInitParamNames(srcWebXml,"s1");  assertEquals(1,initParams.size());  assertEquals("s1param1",initParams.get(0));  assertEquals("s1param1value",WebXmlUtils.getServletInitParam(srcWebXml,"s1","s1param1"));}  }
class C{  protected final void postInsertHook(boolean usedFreeSlot){  if (usedFreeSlot) {    hashIndexSetProperties.free--;  } else {    hashIndexSetProperties.removedTokens--;  }  hashIndexSetProperties.size++;}  }
class C{  public CPluginCriterium(final View2D view2D,final com.google.security.zynamics.binnavi.API.plugins.ICriteriaSelectionPlugin.ICriterium plugin){  m_view2D=view2D;  m_plugin=plugin;}  }
class C{  public NetMatcher(String[] nets,DNSService dnsServer){  this.dnsServer=dnsServer;  initInetNetworks(nets);}  }
class C{  @Override public ListIterator<E> listIterator(){  return this.listIterator(0);}  }
class C{  public static void write(OMPoly poly,Link link,LinkProperties props) throws IOException {switch (poly.getRenderType()) {case OMPoly.RENDERTYPE_LATLON:    write(poly.getLatLonArray(),OMPoly.RADIANS,poly.getLineType(),poly.getNumSegs(),props,link.dos);  break;case OMPoly.RENDERTYPE_XY:write(poly.getXs(),poly.getYs(),props,link.dos);break;case OMPoly.RENDERTYPE_OFFSET:write((float)poly.getLat(),(float)poly.getLon(),poly.getXs(),poly.getYs(),poly.getCoordMode(),props,link.dos);break;default :Debug.error("LinkPoly.write: poly rendertype unknown.");}}  }
class C{  public BrowserBlacklist(BrowserMatcher... matchers){  mBrowserMatchers=Arrays.asList(matchers);}  }
class C{  public AnimatableValue interpolate(AnimatableValue result,AnimatableValue to,float interpolation,AnimatableValue accumulation,int multiplier){  AnimatableStringValue res;  if (result == null) {    res=new AnimatableStringValue(target);  } else {    res=(AnimatableStringValue)result;  }  String newString;  if (to != null && interpolation >= 0.5) {    AnimatableStringValue toValue=(AnimatableStringValue)to;    newString=toValue.string;  } else {    newString=string;  }  if (res.string == null || !res.string.equals(newString)) {    res.string=newString;    res.hasChanged=true;  }  return res;}  }
class C{  public static double log2_c11(double x){  if (x < 0)   return Double.NaN;  long rawBits=doubleToLongBits(x);  long mantissa=getMantissa(rawBits);  int e=Math.getExponent(x);  return log2Cache11[(int)(mantissa >>> (52 - 11))] + e;}  }
class C{  public boolean isAccepted(){  return is(ACCEPTED);}  }
class C{  private void generateFieldInfos(IType type,IBinaryType typeInfo,HashMap newElements,ArrayList childrenHandles){  IBinaryField[] fields=typeInfo.getFields();  if (fields == null) {    return;  }  JavaModelManager manager=((JavaElement)type).manager;  for (int i=0, fieldCount=fields.length; i < fieldCount; i++) {    IBinaryField fieldInfo=fields[i];    BinaryField field=new BinaryField((JavaElement)type,manager,manager.intern(new String(fieldInfo.getName())));    newElements.put(field,fieldInfo);    childrenHandles.add(field);    generateAnnotationsInfos(field,fieldInfo.getAnnotations(),fieldInfo.getTagBits(),newElements);  }}  }
class C{  protected Node deepCopyInto(Node n){  super.deepCopyInto(n);  AbstractCharacterData cd=(AbstractCharacterData)n;  cd.nodeValue=nodeValue;  return n;}  }
class C{  public void searchFinish(){  m_NumQueries++;  m_SumP+=m_PointCount;  m_SumSqP+=m_PointCount * m_PointCount;  if (m_PointCount < m_MinP)   m_MinP=m_PointCount;  if (m_PointCount > m_MaxP)   m_MaxP=m_PointCount;  double coordsPerPt=m_CoordCount / m_PointCount;  ;  m_SumC+=coordsPerPt;  m_SumSqC+=coordsPerPt * coordsPerPt;  if (coordsPerPt < m_MinC)   m_MinC=coordsPerPt;  if (coordsPerPt > m_MaxC)   m_MaxC=coordsPerPt;}  }
class C{  DominatorCell(BasicBlock bb,IR ir){  super(CAPACITY);  block=bb;  dominators=new BitVector(ir.getMaxBasicBlockNumber() + 1);  this.ir=ir;}  }
class C{  protected void onMvpViewCreated(){}  }
class C{  public static RoundingParams asCircle(){  return (new RoundingParams()).setRoundAsCircle(true);}  }
class C{  static int[] outputConversionFromTranslationTable(char[] table){  int[] conversion=new int[2 * table.length];  int index;  for (index=0; index < table.length; index++) {    conversion[index * 2]=table[index];    conversion[(index * 2) + 1]=index;  }  return conversion;}  }
class C{  private static boolean legalize(DTSweepContext tcx,DelaunayTriangle t){  int oi;  boolean inside;  TriangulationPoint p, op;  DelaunayTriangle ot;  for (int i=0; i < 3; i++) {    if (t.dEdge[i]) {      continue;    }    ot=t.neighbors[i];    if (ot != null) {      p=t.points[i];      op=ot.oppositePoint(t,p);      oi=ot.index(op);      if (ot.cEdge[oi] || ot.dEdge[oi]) {        t.cEdge[i]=ot.cEdge[oi];        continue;      }      inside=smartIncircle(p,t.pointCCW(p),t.pointCW(p),op);      if (inside) {        boolean notLegalized;        t.dEdge[i]=true;        ot.dEdge[oi]=true;        rotateTrianglePair(t,p,ot,op);        notLegalized=!legalize(tcx,t);        if (notLegalized) {          tcx.mapTriangleToNodes(t);        }        notLegalized=!legalize(tcx,ot);        if (notLegalized) {          tcx.mapTriangleToNodes(ot);        }        t.dEdge[i]=false;        ot.dEdge[oi]=false;        return true;      }    }  }  return false;}  }
class C{  public boolean isContextualType(){  String type=getLitteral(TYPE);  int provider=GamaIntegerType.staticCast(null,type,null,false);  if (provider < 0)   return true;  type=getLitteral(OF);  provider=GamaIntegerType.staticCast(null,type,null,false);  return provider < 0;}  }
class C{  public boolean isDataSource(){  return m_ds != null;}  }
class C{  public Matrix2f(float[] dataArray){  mMat=new float[4];  System.arraycopy(dataArray,0,mMat,0,mMat.length);}  }
class C{  Guid(){}  }
class C{  public Request(String template,ClientId client,ServiceId service,String id,List<RequestTag> content,boolean async,String boundary){  this(template,client,service,id,content,async);  this.boundary=boundary;}  }
class C{  public ActivityMonitor(String cls,ActivityResult result,boolean block){  mWhich=null;  mClass=cls;  mResult=result;  mBlock=block;}  }
class C{  public static BufferedImage loadCompatibleImage(URL resource) throws IOException {  BufferedImage image=ImageIO.read(resource);  return toCompatibleImage(image);}  }
class C{  void put(final ByteVector out){  final int FACTOR=ClassWriter.TO_ACC_SYNTHETIC;  int mask=Opcodes.ACC_DEPRECATED | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE | ((access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / FACTOR);  out.putShort(access & ~mask).putShort(name).putShort(desc);  int attributeCount=0;  if (value != 0) {    ++attributeCount;  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      ++attributeCount;    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;  }  if (ClassReader.SIGNATURES && signature != 0) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && tanns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && itanns != null) {    ++attributeCount;  }  if (attrs != null) {    attributeCount+=attrs.getCount();  }  out.putShort(attributeCount);  if (value != 0) {    out.putShort(cw.newUTF8("ConstantValue"));    out.putInt(2).putShort(value);  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      out.putShort(cw.newUTF8("Synthetic")).putInt(0);    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(cw.newUTF8("Deprecated")).putInt(0);  }  if (ClassReader.SIGNATURES && signature != 0) {    out.putShort(cw.newUTF8("Signature"));    out.putInt(2).putShort(signature);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (ClassReader.ANNOTATIONS && tanns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"));    tanns.put(out);  }  if (ClassReader.ANNOTATIONS && itanns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"));    itanns.put(out);  }  if (attrs != null) {    attrs.put(cw,null,0,-1,-1,out);  }}  }
class C{  public void readData(DataInput din) throws IOException {  function=din.readUnsignedShort();  data=(short)(din.readShort() & 0xFFFF);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public CategoryListItem(String name,String fullName,String key,CategoryListItem[] subItems){  this.name=name;  this.fullName=fullName == null ? name : fullName;  this.key=key;  this.subItems=subItems == null ? new CategoryListItem[0] : subItems;}  }
class C{  public int entrySize(Object key,Object value) throws IllegalArgumentException {  if (value == Token.TOMBSTONE) {    return 0;  }  int size=0;  int keySize=0;  if (!MemLRUCapacityController.this.isOffHeap) {    size+=MemLRUCapacityController.this.getPerEntryOverhead();    keySize=sizeof(key);  }  int valueSize=sizeof(value);  size+=keySize;  size+=valueSize;  return size;}  }
class C{  public StateMachineState(S id,StateMachine<S,E> submachine,Collection<E> deferred,Collection<? extends Action<S,E>> entryActions,Collection<? extends Action<S,E>> exitActions){  super(id,deferred,entryActions,exitActions,null,submachine);  this.ids=new ArrayList<S>();  this.ids.add(id);}  }
class C{  public boolean equivalent(INode state){  return equals(state);}  }
class C{  public static boolean isEqual(Type t1,Type t2){  return TypeCompareLogic.compare(null,t1,t2) == 0;}  }
class C{  Entry removeEntryForKey(Object key){  Object k=maskNull(key);  int hash=hash(k);  int i=indexFor(hash,table.length);  Entry prev=table[i];  Entry e=prev;  while (e != null) {    Entry next=e.next;    if (e.hash == hash && eq(k,e.key)) {      modCount++;      size--;      if (prev == e)       table[i]=next; else       prev.next=next;      e.recordRemoval(this);      return e;    }    prev=e;    e=next;  }  return e;}  }
class C{  public static NetworkSystemBartender createAndAddSystem(SystemManager systemManager,ServerBartender selfServer,Config config){  NetworkSystemBartender clusterSystem=new NetworkSystemBartender(systemManager,selfServer,config);  createAndAddSystem(clusterSystem);  return clusterSystem;}  }
class C{  public void dismiss(){  ReconnectableMap.INSTANCE.dismiss(key);  out.remove("restore");  out.remove("arg");}  }
class C{  public static boolean pathOkay(String rootpath,String pathInfo,HttpServletResponse response) throws IOException {  if (rootpath == null) {    response.sendError(HttpServletResponse.SC_BAD_REQUEST,pathInfo + " (invalid path)");    return false;  } else   if (!new File(rootpath).canRead()) {    response.sendError(HttpServletResponse.SC_NOT_FOUND,rootpath.toString() + " not found");    return false;  }  return true;}  }
class C{  public static Bitmap changeTintColor(Bitmap bitmap,int originalColor,int destinationColor){  int[] o=new int[]{Color.red(originalColor),Color.green(originalColor),Color.blue(originalColor)};  int[] d=new int[]{Color.red(destinationColor),Color.green(destinationColor),Color.blue(destinationColor)};  int width=bitmap.getWidth();  int height=bitmap.getHeight();  int[] pixels=new int[width * height];  bitmap.getPixels(pixels,0,width,0,0,width,height);  int maxIndex=getMaxIndex(o);  int mintIndex=getMinIndex(o);  for (int i=0; i < pixels.length; i++) {    int color=pixels[i];    int[] p=new int[]{Color.red(color),Color.green(color),Color.blue(color)};    int alpha=Color.alpha(color);    float[] transformation=calculateTransformation(o[maxIndex],o[mintIndex],p[maxIndex],p[mintIndex]);    pixels[i]=applyTransformation(d,alpha,transformation);  }  return Bitmap.createBitmap(pixels,width,height,Bitmap.Config.ARGB_8888);}  }
class C{  public static void configureBugCollection(IFindBugsEngine findBugs){  BugCollection bugs=findBugs.getBugReporter().getBugCollection();  if (bugs != null) {    bugs.setReleaseName(findBugs.getReleaseName());    Project project=findBugs.getProject();    String projectName=project.getProjectName();    if (projectName == null) {      projectName=findBugs.getProjectName();      project.setProjectName(projectName);    }    long timestamp=project.getTimestamp();    if (FindBugs.validTimestamp(timestamp)) {      bugs.setTimestamp(timestamp);      bugs.getProjectStats().setTimestamp(timestamp);    }  }}  }
class C{  public SpherePortrayal3D(){  this(1f);}  }
class C{  public boolean isTerminated(){  return threadPool.isTerminated();}  }
class C{  public byte readRawByte() throws IOException {  if (bufferPos == bufferSize) {    refillBuffer(true);  }  return buffer[bufferPos++];}  }
class C{  public void markAsSynthetic(){  fIsSynthetic=true;}  }
class C{  public static Expression mergeCompoundNoun(final Expression word1,Expression word2){  if ((word1.getMainWord().equals("ice") && word2.getMainWord().equals("cream")) || (word1.getMainWord().equals("teddy") && word2.getMainWord().equals("bear"))) {    if (word1.getMainWord().equals("ice")) {      word1.setNormalized("icecream");    }    return word1;  } else {    word2.mergeLeft(word1,true);    return word2;  }}  }
class C{  @Override protected void validate(){  failIf(this.value <= 0,"Must provide at least one bit");  failIf(this.value > MarkSweepSpace.MAX_MARKCOUNT_BITS,"Only " + MarkSweepSpace.MAX_MARKCOUNT_BITS + " bits are reserved in MarkSweepSpace");}  }
class C{  private void createConnectionQualityPanel(){  updateTheme();  _connectionQualityMeter=new JLabel();  _connectionQualityMeter.setOpaque(false);  _connectionQualityMeter.setMinimumSize(new Dimension(34,20));  _connectionQualityMeter.setMaximumSize(new Dimension(90,30));  _connectionQualityMeter.addMouseListener(STATUS_BAR_LISTENER);}  }
class C{  public void endVisit(PrimitiveType node){}  }
class C{  public List<VirtualArrayRestRep> findByInitiators(Collection<InitiatorRestRep> initiators){  return findByInitiators(initiators,null);}  }
class C{  public static void testRandomize() throws AssertFailException {  byte[] seed=BaseEncoding.base16().lowerCase().decode("A441B15FE9A3CF56661190A0B93B9DEC7D04127288CC87250967CF3B52894D11".toLowerCase());  boolean result=NativeSecp256k1.randomize(seed);  assertEquals(result,true,"testRandomize");}  }
class C{  public static SAMReadGroupRecord validateAndCreateSamRG(String value,ReadGroupStrictness strict) throws InvalidParamsException, IOException {  final File rgFile=new File(value);  final boolean fileMode=rgFile.exists();  final BufferedInputStream bis;  final String errorSubString;  if (fileMode) {    errorSubString="file \"" + rgFile.getPath() + "\", please provide a file";    bis=FileUtils.createInputStream(rgFile,false);  } else {    errorSubString="string \"" + value + "\", please provide a string";    final String convertedValue=value.replaceAll("\\\\t","\t");    bis=new BufferedInputStream(new ByteArrayInputStream(convertedValue.getBytes()));  }  try {    final SamReader sfr=SamUtils.makeSamReader(bis);    final List<SAMReadGroupRecord> readGroups=sfr.getFileHeader().getReadGroups();    final int readGroupCount=readGroups.size();    if (readGroupCount == 0) {      if (strict == ReadGroupStrictness.REQUIRED) {        throw new InvalidParamsException("No read group information present in the input " + errorSubString + ". A single read group is required");      } else {        return null;      }    }    if (readGroupCount > 1) {      if (strict == ReadGroupStrictness.REQUIRED || strict == ReadGroupStrictness.AT_MOST_ONE) {        throw new InvalidParamsException("Multiple read groups present in the input " + errorSubString + ". A single read group is required");      } else {        return null;      }    }    final SAMReadGroupRecord samReadGroupRecord=readGroups.get(0);    if (samReadGroupRecord.getSample() == null) {      Diagnostic.warning("Sample not specified in read group, it is recommended that the sample be set.");    }    return samReadGroupRecord;  }  finally {    bis.close();  }}  }
class C{  public synchronized void close(){  store.commit();}  }
class C{  public static JsonObject unmodifiableObject(JsonObject object){  return new JsonObject(object,true);}  }
class C{  @DSSource({DSSourceKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:41.468 -0500",hash_original_method="4B8A35C111D653EE4FB3175AA95E287D",hash_generated_method="60D0EAA4AAAF6E66518CDCAD0A181CD4") public static byte[] stringToGsm7BitPacked(String data) throws EncodeException {  return stringToGsm7BitPacked(data,0,true,0,0);}  }
class C{  public static String format(double[][] m,NumberFormat nf){  return formatTo(new StringBuilder().append("[\n"),m," [","]\n",", ",nf).append("]").toString();}  }
class C{  protected Size2D arrangeRN(BlockContainer container,Graphics2D g2,RectangleConstraint constraint){  Size2D s1=arrangeNN(container,g2);  if (constraint.getWidthRange().contains(s1.width)) {    return s1;  } else {    RectangleConstraint c=constraint.toFixedWidth(constraint.getWidthRange().getUpperBound());    return arrangeFN(container,g2,c);  }}  }
class C{  public void onDestroy(){  TSLog.notice("CDVBackgroundGeolocation#onDestoy");  BackgroundGeolocation adapter=getAdapter();  getAdapter().onActivityDestroy();  super.onDestroy();}  }
class C{  public String missingMergeTipText(){  return "Distribute counts for missing values. Counts are distributed " + "across other values in proportion to their frequency. Otherwise, " + "missing is treated as a separate value.";}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void loadHomeScreen(){  Intent i=new Intent();  i.setAction(Intent.ACTION_MAIN);  i.addCategory(Intent.CATEGORY_HOME);  this.startActivity(i);  super.onBackPressed();}  }
class C{  @Override public ChangeLog readChangeLogFile() throws Exception {  ChangeLog chg=null;  try {    InputStream is=mContext.getResources().openRawResource(mChangeLogFileResourceId);    if (is != null) {      XmlPullParser parser=Xml.newPullParser();      parser.setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES,false);      parser.setInput(is,null);      parser.nextTag();      chg=new ChangeLog();      readChangeLogNode(parser,chg);      is.close();    } else {      Log.d(TAG,"Changelog.xml not found");      throw new ChangeLogException("Changelog.xml not found");    }  } catch (  XmlPullParserException xpe) {    Log.d(TAG,"XmlPullParseException while parsing changelog file",xpe);    throw xpe;  }catch (  IOException ioe) {    Log.d(TAG,"Error i/o with changelog.xml",ioe);    throw ioe;  }  if (chg != null)   Log.d(TAG,"Process ended. ChangeLog:" + chg.toString());  return chg;}  }
class C{  public static String selectEntry(RepositoryLocation resolveRelativeTo,Component c,boolean enforceValidRepositoryEntryName){  return selectLocation(resolveRelativeTo,null,c,true,false,false,enforceValidRepositoryEntryName);}  }
class C{  @Override protected void doAction(){  File exportFile=null;  try {    String alias=kseFrame.getSelectedEntryAlias();    DExportCertificates dExportCertificates=new DExportCertificates(frame,alias,true);    dExportCertificates.setLocationRelativeTo(frame);    dExportCertificates.setVisible(true);    if (!dExportCertificates.exportSelected()) {      return;    }    exportFile=dExportCertificates.getExportFile();    boolean pemEncode=dExportCertificates.pemEncode();    boolean exportChain=dExportCertificates.exportChain();    byte[] encoded=null;    if (exportChain) {      X509Certificate[] certChain=getCertificateChain(alias);      if (dExportCertificates.exportFormatPkcs7()) {        if (pemEncode) {          encoded=X509CertUtil.getCertsEncodedPkcs7Pem(certChain).getBytes();        } else {          encoded=X509CertUtil.getCertsEncodedPkcs7(certChain);        }      } else       if (dExportCertificates.exportFormatPkiPath()) {        encoded=X509CertUtil.getCertsEncodedPkiPath(certChain);      } else       if (dExportCertificates.exportFormatSpc()) {        encoded=X509CertUtil.getCertsEncodedPkcs7(certChain);      }    } else {      X509Certificate cert=getHeadCertificate(alias);      if (dExportCertificates.exportFormatX509()) {        if (pemEncode) {          encoded=X509CertUtil.getCertEncodedX509Pem(cert).getBytes();        } else {          encoded=X509CertUtil.getCertEncodedX509(cert);        }      } else       if (dExportCertificates.exportFormatPkcs7()) {        if (pemEncode) {          encoded=X509CertUtil.getCertEncodedPkcs7Pem(cert).getBytes();        } else {          encoded=X509CertUtil.getCertEncodedPkcs7(cert);        }      } else       if (dExportCertificates.exportFormatPkiPath()) {        encoded=X509CertUtil.getCertEncodedPkiPath(cert);      } else       if (dExportCertificates.exportFormatSpc()) {        encoded=X509CertUtil.getCertEncodedPkcs7(cert);      }    }    exportEncodedCertificates(encoded,exportFile);    JOptionPane.showMessageDialog(frame,res.getString("ExportKeyPairCertificateChainAction.ExportCertificateChainSuccessful.message"),res.getString("ExportKeyPairCertificateChainAction.ExportCertificateChain.Title"),JOptionPane.INFORMATION_MESSAGE);  } catch (  FileNotFoundException ex) {    String message=MessageFormat.format(res.getString("ExportKeyPairCertificateChainAction.NoWriteFile.message"),exportFile);    JOptionPane.showMessageDialog(frame,message,res.getString("ExportKeyPairCertificateChainAction.ExportCertificateChain.Title"),JOptionPane.WARNING_MESSAGE);  }catch (  Exception ex) {    DError.displayError(frame,ex);  }}  }
class C{  public Timer reset(){  elapsedTime=0;  baseTime=0;  return this;}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/networks") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public NetworkRestRep createNetwork(@PathParam("id") URI id,NetworkCreate param){  _log.debug("createNetwork: started for varray {}",id);  ArgValidator.checkFieldUriType(id,VirtualArray.class,"id");  VirtualArray varray=_dbClient.queryObject(VirtualArray.class,id);  ArgValidator.checkEntity(varray,id,isIdEmbeddedInURL(id));  if (param.getVarrays() != null && !param.getVarrays().isEmpty()) {    throw APIException.badRequests.invalidParameterForVarrayNetwork(id.toString());  }  param.setVarrays(Collections.singletonList(id));  return _networkService.createNetwork(param);}  }
class C{  public int mapOutParamIndexToPosition(int index) throws SQLException {  return mapOutParamIndexToPosition(index,OLD_CALLABLE_STATEMENT_COMPATIBILITY);}  }
class C{  public ServiceHost startFactory(Supplier<FactoryService> factoryCreator,String servicePath){  Operation post=Operation.createPost(UriUtils.buildUri(this,servicePath));  FactoryService factoryService=factoryCreator.get();  return startService(post,factoryService);}  }
class C{  public static X509Certificate generateIssuerCert(PublicKey publicKey,PrivateKey privateKey,KeyPair issuerKeys,String commonName,BigInteger serialNr,Date startDate,Date expiryDate) throws GeneralSecurityException, IOException {  JcaX509v3CertificateBuilder certBldr;  JcaX509ExtensionUtils extUtils=new JcaX509ExtensionUtils();  AuthorityKeyIdentifier authorityKeyIdentifier;  if (issuerKeys == null) {    X500Name dn=new X500Name(commonName);    certBldr=new JcaX509v3CertificateBuilder(dn,serialNr,startDate,expiryDate,dn,publicKey);    authorityKeyIdentifier=extUtils.createAuthorityKeyIdentifier(publicKey);  } else {    X509Certificate caCert=issuerKeys.getCertificate().getCertificate();    certBldr=new JcaX509v3CertificateBuilder(caCert,serialNr,startDate,expiryDate,new X500Principal(commonName),publicKey);    authorityKeyIdentifier=extUtils.createAuthorityKeyIdentifier(caCert);  }  certBldr.addExtension(Extension.authorityKeyIdentifier,false,authorityKeyIdentifier).addExtension(Extension.subjectKeyIdentifier,false,extUtils.createSubjectKeyIdentifier(publicKey)).addExtension(Extension.basicConstraints,true,new BasicConstraints(0)).addExtension(Extension.keyUsage,true,new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyCertSign | KeyUsage.cRLSign));  ContentSigner signer;  try {    signer=new JcaContentSignerBuilder(CertificateUtils.getCertificateSignatureAlgorithm()).setProvider("SC").build(privateKey);  } catch (  OperatorCreationException e) {    throw new GeneralSecurityException("Failed to sign the certificate",e);  }  return new JcaX509CertificateConverter().setProvider("SC").getCertificate(certBldr.build(signer));}  }
class C{  @Override public void draw(final Graphics2D g2d){  applyChanges();}  }
class C{  public static void registerFunctions(Model model){  Resource shaclFunctionClass=SH.Function.inModel(model);  for (  Resource resource : JenaUtil.getAllInstances(shaclFunctionClass)) {    if (resource.isURIResource()) {      registerFunction(resource);    }  }  Resource ccClass=SH.ConstraintComponent.inModel(model);  for (  Resource resource : JenaUtil.getAllInstances(ccClass)) {    perhapsRegisterFunction(resource.as(SHConstraintComponent.class),SH.validator);  }}  }
class C{  public FunctionLibFunctionArg(){}  }
class C{  public String classOrderTipText(){  return "Specify the class order after the filtering";}  }
class C{  @Activate protected void activate(){  if (logger.isInfoEnabled()) {    logger.info("Metrics Component is activated");  }}  }
class C{  public static void app_launched(Context mContext){  SharedPreferences prefs=mContext.getSharedPreferences("apprater",0);  if (prefs.getBoolean("dontshowagain",false)) {    return;  }  SharedPreferences.Editor editor=prefs.edit();  long launch_count=prefs.getLong("launch_count",0) + 1;  editor.putLong("launch_count",launch_count);  Long date_firstLaunch=prefs.getLong("date_firstlaunch",0);  if (date_firstLaunch == 0) {    date_firstLaunch=System.currentTimeMillis();    editor.putLong("date_firstlaunch",date_firstLaunch);  }  if (launch_count >= LAUNCHES_UNTIL_PROMPT) {    if (System.currentTimeMillis() >= date_firstLaunch + (DAYS_UNTIL_PROMPT * 24 * 60* 60* 1000)) {      showRateDialog(mContext,editor);    }  }  editor.apply();}  }
class C{  private boolean isVersionZeroRegister(int ssaReg){  return ssaReg < ropRegCount;}  }
class C{  MyDate(int year,int month,int day){  this.year=year;  this.month=month;  this.day=day;}  }
class C{  private double calculateBest(){  double best=0.0;  for (int i=0; i < metrics.length; i++) {    best=Math.max(metrics[i][metric],best);  }  return best;}  }
class C{  public void handlePassengers(ResultSet resultSet) throws SQLException {  CepasTransaction previoustransaction=null;  Random random=MatsimRandom.getRandom();  while (resultSet.next()) {    CepasTransaction boardingTransaction;    CepasTransaction alightingTransaction;    CepasVehiclePassenger passenger;    int boardingTime=resultSet.getInt("boarding_time");    Id boardingStop=cepasStoptoMatsimStopLookup.get(resultSet.getString("boarding_stop_stn"));    if (boardingStop == null) {      System.err.println(this.vehicleId.toString() + " has a stop id = " + resultSet.getString("boarding_stop_stn")+ " not appearing in matsim stops lookup table, ignoring transaction.");      errorTracker.stopIdNotInRoute(this.vehicleId);      continue;    }    Id alightingStop=cepasStoptoMatsimStopLookup.get(resultSet.getString("alighting_stop_stn"));    if (alightingStop == null) {      boardingTransaction=new CepasTransaction(null,CepasTransactionType.boarding,boardingTime + random.nextDouble(),boardingStop);      this.cepasTransactions.add(boardingTransaction);      errorTracker.transactionCount(this.vehicleId);      continue;    }    int alightingTime=resultSet.getInt("alighting_time");    Id personId=Id.createPersonId(resultSet.getLong("card_id"));    passenger=new CepasVehiclePassenger(personId);    boardingTransaction=new CepasTransaction(passenger,CepasTransactionType.boarding,boardingTime + random.nextDouble(),boardingStop);    this.cepasTransactions.add(boardingTransaction);    errorTracker.transactionCount(this.vehicleId);    alightingTransaction=new CepasTransaction(passenger,CepasTransactionType.alighting,alightingTime + random.nextDouble(),alightingStop);    this.cepasTransactions.add(alightingTransaction);    errorTracker.transactionCount(this.vehicleId);  }}  }
class C{  public static long[] hashToLongs(double datum,long seed){  double d=(datum == 0.0) ? 0.0 : datum;  long[] data={Double.doubleToLongBits(d)};  return hash(data,seed);}  }
class C{  public void handleMouseDoubleClick(MouseEvent e){}  }
class C{  public <T extends Provider>T createProvider(Class<T> cls){  DTraceProvider jsdt=new DTraceProvider(cls);  T proxy=jsdt.newProxyInstance();  jsdt.setProxy(proxy);  jsdt.init();  new Activation(jsdt.getModuleName(),new DTraceProvider[]{jsdt});  return proxy;}  }
class C{  public EncodedArrayItem(CstArray array){  super(ALIGNMENT,-1);  if (array == null) {    throw new NullPointerException("array == null");  }  this.array=array;  this.encodedForm=null;}  }
class C{  public boolean isThumbRollover(){  return thumbActive;}  }
class C{  protected Vector checkPathForJars(String cp,String[] jars){  if ((null == cp) || (null == jars) || (0 == cp.length())|| (0 == jars.length))   return null;  Vector v=new Vector();  StringTokenizer st=new StringTokenizer(cp,File.pathSeparator);  while (st.hasMoreTokens()) {    String filename=st.nextToken();    for (int i=0; i < jars.length; i++) {      if (filename.indexOf(jars[i]) > -1) {        File f=new File(filename);        if (f.exists()) {          try {            Hashtable h=new Hashtable(2);            h.put(jars[i] + "-path",f.getAbsolutePath());            if (!("xalan.jar".equalsIgnoreCase(jars[i]))) {              h.put(jars[i] + "-apparent.version",getApparentVersion(jars[i],f.length()));            }            v.addElement(h);          } catch (          Exception e) {          }        } else {          Hashtable h=new Hashtable(2);          h.put(jars[i] + "-path",WARNING + " Classpath entry: " + filename+ " does not exist");          h.put(jars[i] + "-apparent.version",CLASS_NOTPRESENT);          v.addElement(h);        }      }    }  }  return v;}  }
class C{  public void logListDirectory(IgfsPath path,IgfsMode mode,String[] files){  addEntry(new Entry(TYPE_DIR_LIST,path.toString(),mode,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,files));}  }
class C{  public void removeInterface(AbstractInterfaceType type){  if (null == realizedInterfaces) {    return;  }  realizedInterfaces.remove(type);}  }
class C{  public static View createHTMLView(JComponent c,String html){  BasicEditorKit kit=getFactory();  Document doc=kit.createDefaultDocument(c.getFont(),c.getForeground());  Object base=c.getClientProperty(documentBaseKey);  if (base instanceof URL) {    ((HTMLDocument)doc).setBase((URL)base);  }  Reader r=new StringReader(html);  try {    kit.read(r,doc,0);  } catch (  Throwable e) {  }  ViewFactory f=kit.getViewFactory();  View hview=f.create(doc.getDefaultRootElement());  View v=new Renderer(c,f,hview);  return v;}  }
class C{  public Boolean isAfterResume(){  return afterResume;}  }
class C{  private static Version readVersion(BitMatrix bitMatrix) throws FormatException {  int numRows=bitMatrix.getHeight();  int numColumns=bitMatrix.getWidth();  return Version.getVersionForDimensions(numRows,numColumns);}  }
class C{  public void destroyParticle(int index,boolean callDestructionListener){  m_particleSystem.destroyParticle(index,callDestructionListener);}  }
class C{  public static <K,V>HashBagMultimap<V,K> flip(ListMultimap<K,V> listMultimap){  HashBagMultimap<V,K> result=new HashBagMultimap<>();  listMultimap.forEachKeyMultiValues(null);  return result;}  }
class C{  private void createDirectory(){  String dirName=getDirectoryName();  if (!FileUtils.exists(dirName)) {    FileUtils.mkdirs(dirName);  }}  }
class C{  private static int readTiffHeader(InputStream is,int length,TiffHeader tiffHeader) throws IOException {  if (length <= 8) {    return 0;  }  tiffHeader.byteOrder=StreamProcessor.readPackedInt(is,4,false);  length-=4;  if (tiffHeader.byteOrder != TIFF_BYTE_ORDER_LITTLE_END && tiffHeader.byteOrder != TIFF_BYTE_ORDER_BIG_END) {    FLog.e(TAG,"Invalid TIFF header");    return 0;  }  tiffHeader.isLittleEndian=(tiffHeader.byteOrder == TIFF_BYTE_ORDER_LITTLE_END);  tiffHeader.firstIfdOffset=StreamProcessor.readPackedInt(is,4,tiffHeader.isLittleEndian);  length-=4;  if (tiffHeader.firstIfdOffset < 8 || tiffHeader.firstIfdOffset - 8 > length) {    FLog.e(TAG,"Invalid offset");    return 0;  }  return length;}  }
class C{  @Override public boolean contains(Object value){  if (value == null) {    return false;  }  final Iterator it=new StepIterator(this,stepSize);  while (it.hasNext()) {    if (compareEqual(value,it.next())) {      return true;    }  }  return false;}  }
class C{  public void cleanup(){  mvccMgr=null;  mgrs.clear();}  }
class C{  public boolean isAllDenied(){  int count=0;  for (int i=0; i < mPerms.size(); i++) {    if (mPerms.get(mUserPermission.get(i)) == PackageManager.PERMISSION_DENIED)     count++;  }  return count == mPerms.size();}  }
class C{  public static byte[] decodeWebSafe(byte[] source) throws Base64DecoderException {  return decodeWebSafe(source,0,source.length);}  }
class C{  public NotImplementedException(final Throwable cause){  this(cause,null);}  }
class C{  public static <T extends BipartiteGraph & DynamicBipartiteGraph>void testConcurrentReadWriteThreads(T graph,List<Pair<Long,Long>> edgesToAdd){  int numReaders=edgesToAdd.size();  ExecutorService executor=Executors.newFixedThreadPool(2 * (2 * numReaders) + 1);  List<CountDownLatch> readerStartLatches=Lists.newArrayListWithCapacity(numReaders);  List<CountDownLatch> readerDoneLatches=Lists.newArrayListWithCapacity(numReaders);  List<BipartiteGraphReader> leftReaders=Lists.newArrayListWithCapacity(numReaders);  List<BipartiteGraphReader> rightReaders=Lists.newArrayListWithCapacity(numReaders);  for (  Pair<Long,Long> edge : edgesToAdd) {    CountDownLatch startLatch=new CountDownLatch(1);    CountDownLatch doneLatch=new CountDownLatch(2);    BipartiteGraphReader leftReader=new BipartiteGraphReader(graph,startLatch,doneLatch,edge.getLeft(),true,0);    BipartiteGraphReader rightReader=new BipartiteGraphReader(graph,startLatch,doneLatch,edge.getRight(),false,0);    leftReaders.add(leftReader);    executor.submit(leftReader);    rightReaders.add(rightReader);    executor.submit(rightReader);    readerStartLatches.add(startLatch);    readerDoneLatches.add(doneLatch);  }  List<WriterInfo> writerInfo=Lists.newArrayListWithCapacity(numReaders);  for (int i=0; i < numReaders; i++) {    CountDownLatch startLatch=(i > 0) ? readerDoneLatches.get(i - 1) : new CountDownLatch(0);    CountDownLatch doneLatch=readerStartLatches.get(i);    writerInfo.add(new WriterInfo(edgesToAdd.get(i).getLeft(),edgesToAdd.get(i).getRight(),startLatch,doneLatch));  }  executor.submit(new BipartiteGraphWriter(graph,writerInfo));  try {    readerDoneLatches.get(numReaders - 1).await();  } catch (  InterruptedException e) {    throw new RuntimeException("Execution for last reader was interrupted: ",e);  }  Long2ObjectMap<LongArrayList> leftSideGraph=new Long2ObjectOpenHashMap<LongArrayList>(numReaders);  Long2ObjectMap<LongArrayList> rightSideGraph=new Long2ObjectOpenHashMap<LongArrayList>(numReaders);  for (int i=0; i < numReaders; i++) {    long leftNode=edgesToAdd.get(i).getLeft();    long rightNode=edgesToAdd.get(i).getRight();    if (!leftSideGraph.containsKey(leftNode)) {      leftSideGraph.put(leftNode,new LongArrayList(new long[]{rightNode}));    } else {      leftSideGraph.get(leftNode).add(rightNode);    }    if (!rightSideGraph.containsKey(rightNode)) {      rightSideGraph.put(rightNode,new LongArrayList(new long[]{leftNode}));    } else {      rightSideGraph.get(rightNode).add(leftNode);    }    assertEquals(leftSideGraph.get(leftNode).size(),leftReaders.get(i).getQueryNodeDegree());    assertEquals(leftSideGraph.get(leftNode),leftReaders.get(i).getQueryNodeEdges());    assertEquals(rightSideGraph.get(rightNode).size(),rightReaders.get(i).getQueryNodeDegree());    assertEquals(rightSideGraph.get(rightNode),rightReaders.get(i).getQueryNodeEdges());  }}  }
class C{  public static void writeShort(byte[] memory,int index,short value){  memory[index + 0]=(byte)((value >> (8 * 1)) & 0xFF);  memory[index + 1]=(byte)(value & 0xFF);}  }
class C{  public static String computeUniqueName(String[] existingNames,String baseName){  Set<String> nameSet=new HashSet<String>(Arrays.asList(existingNames));  String proposedName=baseName;  int i=2;  while (nameSet.contains(proposedName)) {    proposedName=baseName + i++;  }  return proposedName;}  }
class C{  protected AbstractRed(List srcs,Rectangle bounds,Map props){  init(srcs,bounds,null,null,bounds.x,bounds.y,props);}  }
class C{  public static void assertTasksEnqueued(String queueName,TaskMatcher... taskMatchers) throws Exception {  assertTasksEnqueued(queueName,Arrays.asList(taskMatchers));}  }
class C{  public LoggingSessionOutputBuffer(final SessionOutputBuffer out,final Wire wire){  super();  this.out=out;  this.wire=wire;}  }
class C{  private static void writeChildrenXml(Attr attr,IndentWriter out,boolean escaped) throws IOException {  char[] data=attr.getValue().toCharArray();  if (data == null)   return;  int length=data.length;  int start=0, last=0;  while (last < length) {    char c=data[last];switch (c) {case '<':      out.write(data,start,last - start);    start=last + 1;  out.write("&lt;");break;case '>':out.write(data,start,last - start);start=last + 1;out.write("&gt;");break;case '&':out.write(data,start,last - start);start=last + 1;out.write("&amp;");break;case '\'':out.write(data,start,last - start);start=last + 1;out.write("&apos;");break;case '"':out.write(data,start,last - start);start=last + 1;out.write("&quot;");break;default :if (escaped && (c > 0x007F)) {out.write(data,start,last - start);String hex="0000" + Integer.toHexString(c);out.write("&#x" + hex.substring(hex.length() - 4) + ";");start=last + 1;}break;}last++;}out.write(data,start,last - start);}  }
class C{  private RecordingBinder(RecordingBinder parent,PrivateElementsImpl privateElements){  this.stage=parent.stage;  this.modules=Sets.newHashSet();  this.elements=privateElements.getElementsMutable();  this.source=parent.source;  this.sourceProvider=parent.sourceProvider;  this.parent=parent;  this.privateElements=privateElements;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public static void writeHexString(ByteBuffer buffer,String hexStr) throws IOException {  char[] hexChars=hexStr.toCharArray();  if ((hexChars.length % 2) != 0) {    throw new IOException("Hex string length must be even");  }  for (int i=0; i < hexChars.length; i+=2) {    String tmpStr=new String(hexChars,i,2);    buffer.put((byte)Integer.parseInt(tmpStr,16));  }}  }
class C{  public DERSet(){}  }
class C{  public final int peekNextOpcode(){  if (VM.VerifyAssertions)   VM._assert(bcIndex < bcLength);  return getUnsignedByte(bcIndex);}  }
class C{  private void print(String amt){  try {    System.out.println(amt + " = " + getAmtInWords(amt));  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  @Override protected void onStop(){  super.onStop();  Log.d(TAG,"onStop() - the activity is no longer visible (it is now \"stopped\")");}  }
class C{  private void handleIntent(Intent intent){  if (intent == null || intent.getAction() == null)   return;  String action=intent.getAction();  if (action.equalsIgnoreCase(ACTION_PLAY)) {    handleMedia(intent);    mController.getTransportControls().play();  } else   if (action.equalsIgnoreCase(ACTION_PAUSE)) {    mController.getTransportControls().pause();  } else   if (action.equalsIgnoreCase(ACTION_PREVIOUS)) {    mController.getTransportControls().skipToPrevious();  } else   if (action.equalsIgnoreCase(ACTION_NEXT)) {    mController.getTransportControls().skipToNext();  } else   if (action.equalsIgnoreCase(ACTION_STOP)) {    mController.getTransportControls().stop();  }}  }
class C{  public static synchronized void addToWorkspace(){  if (INSTANCE == null) {    INSTANCE=new ClientBundleResourceChangeListener();    ResourcesPlugin.getWorkspace().addResourceChangeListener(INSTANCE,IResourceChangeEvent.POST_CHANGE);  }}  }
class C{  public static String pi(String[] params) throws FBSQLParseException {  if (params.length != 0)   throw new FBSQLParseException("Incorrect number of " + "parameters of function pi : " + params.length);  return "pi()";}  }
class C{  public static double impulse(double k,double t){  double h=k * t;  return h * Math.exp(1.0 - h);}  }
class C{  static int findBestSampleSize(int actualWidth,int actualHeight,int desiredWidth,int desiredHeight){  double wr=(double)actualWidth / desiredWidth;  double hr=(double)actualHeight / desiredHeight;  double ratio=Math.min(wr,hr);  float n=1.0f;  while ((n * 2) <= ratio) {    n*=2;  }  return (int)n;}  }
class C{  private void visitRegularDot(ExpressionTree enclosingExpression,List<ExpressionTree> items,boolean needDot){  boolean trailingDereferences=items.size() > 1;  boolean needDot0=needDot;  if (!needDot0) {    builder.open(plusFour);  }  int minLength=indentMultiplier * 4;  int length=needDot0 ? minLength : 0;  for (  ExpressionTree e : items) {    if (needDot) {      if (length > minLength) {        builder.breakOp(FillMode.UNIFIED,"",ZERO);      }      token(".");      length++;    }    if (!fillFirstArgument(enclosingExpression,e,items,trailingDereferences ? ZERO : minusFour)) {      BreakTag tyargTag=genSym();      dotExpressionUpToArgs(e,Optional.of(tyargTag));      Indent tyargIndent=Indent.If.make(tyargTag,plusFour,ZERO);      dotExpressionArgsAndParen(e,tyargIndent,(trailingDereferences || needDot) ? plusFour : ZERO);    }    length+=getLength(e,getCurrentPath());    needDot=true;  }  if (!needDot0) {    builder.close();  }}  }
class C{  private static long insertProviderRow(ContentResolver cr,String providerName,String providerFullName,String signUpUrl){  ContentValues values=new ContentValues(3);  values.put(Imps.Provider.NAME,providerName);  values.put(Imps.Provider.FULLNAME,providerFullName);  values.put(Imps.Provider.CATEGORY,ImApp.IMPS_CATEGORY);  values.put(Imps.Provider.SIGNUP_URL,signUpUrl);  Uri result=cr.insert(Imps.Provider.CONTENT_URI,values);  return ContentUris.parseId(result);}  }
class C{  public void clear(){  buffer.clear();}  }
class C{  public boolean isCompilationUnit(){  return this.compilationUnit != null;}  }
class C{  public Camp(){  super();}  }
class C{  public List<String> steps(){  return steps;}  }
class C{  public static void populateContextThen(Service service,ProvisionContext ctx,Consumer<ProvisionContext> onSuccess){  if (ctx.child == null) {    URI computeUri=UriUtils.extendUriWithQuery(ctx.computeReference,UriUtils.URI_PARAM_ODATA_EXPAND,Boolean.TRUE.toString());    AdapterUtils.getServiceState(service,computeUri,null,ctx.errorHandler);    return;  }  String templateLink=VimUtils.<String>firstNonNull(CustomProperties.of(ctx.child).getString(CustomProperties.TEMPLATE_LINK),CustomProperties.of(ctx.child.description).getString(CustomProperties.TEMPLATE_LINK));  if (templateLink != null && ctx.templateMoRef == null && ctx.instanceRequestType == InstanceRequestType.CREATE) {    URI computeUri=UriUtils.buildUri(service.getHost(),templateLink);    AdapterUtils.getServiceState(service,computeUri,null,ctx.errorHandler);    return;  }  if (ctx.resourcePool == null) {    if (ctx.child.resourcePoolLink == null) {      ctx.fail(new IllegalStateException("resourcePoolLink is not defined for resource " + ctx.child.documentSelfLink));      return;    }    URI rpUri=UriUtils.buildUri(service.getHost(),ctx.child.resourcePoolLink);    AdapterUtils.getServiceState(service,rpUri,null,ctx.errorHandler);    return;  }  if (ctx.parent == null && ctx.child.parentLink != null) {    URI computeUri=UriUtils.extendUriWithQuery(UriUtils.buildUri(service.getHost(),ctx.child.parentLink),UriUtils.URI_PARAM_ODATA_EXPAND,Boolean.TRUE.toString());    AdapterUtils.getServiceState(service,computeUri,null,ctx.errorHandler);    return;  }  if (ctx.vSphereCredentials == null) {    if (ctx.parent.description.authCredentialsLink == null) {      ctx.fail(new IllegalStateException("authCredentialsLink is not defined in resource " + ctx.parent.description.documentSelfLink));      return;    }    URI credUri=UriUtils.buildUri(service.getHost(),ctx.parent.description.authCredentialsLink);    AdapterUtils.getServiceState(service,credUri,null,ctx.errorHandler);    return;  }  if (ctx.task == null) {    AdapterUtils.getServiceState(service,ctx.provisioningTaskReference,null,ctx.errorHandler);    return;  }  if (ctx.nics == null) {    if (ctx.child.networkInterfaceLinks == null || ctx.child.networkInterfaceLinks.isEmpty()) {      ctx.nics=Collections.emptyList();      populateContextThen(service,ctx,onSuccess);      return;    }    ctx.nics=new ArrayList<>();    Query query=Query.Builder.create().addInClause(ServiceDocument.FIELD_NAME_SELF_LINK,ctx.child.networkInterfaceLinks).build();    QueryTask qt=QueryTask.Builder.createDirectTask().setQuery(query).addOption(QueryOption.EXPAND_CONTENT).addOption(QueryOption.EXPAND_LINKS).addOption(QueryOption.SELECT_LINKS).addLinkTerm(NetworkInterfaceState.FIELD_NAME_NETWORK_LINK).build();    Operation.createPost(service,ServiceUriPaths.CORE_QUERY_TASKS).setBody(qt).setCompletion(null).sendWith(service);    return;  }  if (ctx.disks == null) {    if (ctx.child.diskLinks == null || ctx.child.diskLinks.isEmpty()) {      ctx.disks=Collections.emptyList();      populateContextThen(service,ctx,onSuccess);      return;    }    ctx.disks=new ArrayList<>(ctx.child.diskLinks.size());    Stream<Operation> opsGetDisk=ctx.child.diskLinks.stream().map(null);    OperationJoin join=OperationJoin.create(opsGetDisk).setCompletion(null);    join.sendWith(service);    return;  }  onSuccess.accept(ctx);}  }
class C{  private static Point2D.Double computeCenterTangent(ArrayList<Point2D.Double> d,int center){  Point2D.Double V1, V2, tHatCenter=new Point2D.Double();  V1=v2SubII(d.get(center - 1),d.get(center));  V2=v2SubII(d.get(center),d.get(center + 1));  tHatCenter.x=(V1.x + V2.x) / 2.0;  tHatCenter.y=(V1.y + V2.y) / 2.0;  tHatCenter=v2Normalize(tHatCenter);  return tHatCenter;}  }
class C{  public final double SFSchemeEntropy(){  if (!m_ComplexityStatisticsAvailable) {    return Double.NaN;  }  return m_SumSchemeEntropy;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  double x, y;  int progress;  int i, n;  double[][] vertices=null;  int numFeatures;  int oneHundredthTotal;  ShapeType shapeType, outputShapeType;  GeometryFactory factory=new GeometryFactory();  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    if (shapeType.getBaseType() != ShapeType.POLYGON && shapeType.getBaseType() != ShapeType.POLYLINE) {      showFeedback("This tool only works with shapefiles of a polygon or line base shape type.");      return;    }    outputShapeType=ShapeType.POLYGON;    DBFField fields[]=new DBFField[1];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    ShapeFile output=new ShapeFile(outputFile,outputShapeType,fields);    output.setProjectionStringFromOtherShapefile(input);    numFeatures=input.getNumberOfRecords();    oneHundredthTotal=numFeatures / 100;    n=0;    progress=0;    ArrayList<com.vividsolutions.jts.geom.Geometry> pointList=new ArrayList<com.vividsolutions.jts.geom.Geometry>();    com.vividsolutions.jts.geom.Geometry[] recJTS=null;    for (    ShapeFileRecord record : input.records) {      recJTS=record.getGeometry().getJTSGeometries();switch (shapeType) {case POLYGON:        whitebox.geospatialfiles.shapefile.Polygon recPolygon=(whitebox.geospatialfiles.shapefile.Polygon)(record.getGeometry());      vertices=recPolygon.getPoints();    break;case POLYGONZ:  PolygonZ recPolygonZ=(PolygonZ)(record.getGeometry());vertices=recPolygonZ.getPoints();break;case POLYGONM:PolygonM recPolygonM=(PolygonM)(record.getGeometry());vertices=recPolygonM.getPoints();break;case POLYLINE:PolyLine recPolyline=(PolyLine)(record.getGeometry());vertices=recPolyline.getPoints();break;case POLYLINEZ:PolyLineZ recPolylineZ=(PolyLineZ)(record.getGeometry());vertices=recPolylineZ.getPoints();break;case POLYLINEM:PolyLineM recPolylineM=(PolyLineM)(record.getGeometry());vertices=recPolylineM.getPoints();break;}double minX=Double.MAX_VALUE;double maxX=Double.MIN_VALUE;double minY=Double.MAX_VALUE;double maxY=Double.MIN_VALUE;for (i=0; i < vertices.length; i++) {Coordinate coordinate=new Coordinate();coordinate.x=vertices[i][0];coordinate.y=vertices[i][1];pointList.add(factory.createPoint(coordinate));if (vertices[i][0] < minX) {minX=vertices[i][0];}if (vertices[i][0] > maxX) {maxX=vertices[i][0];}if (vertices[i][1] < minY) {minY=vertices[i][1];}if (vertices[i][1] > maxY) {maxY=vertices[i][1];}}Envelope env=new Envelope(minX,maxX,minY,maxY);com.vividsolutions.jts.geom.Geometry geom=factory.buildGeometry(pointList);DelaunayTriangulationBuilder vdb=new DelaunayTriangulationBuilder();vdb.setSites(geom);com.vividsolutions.jts.geom.Geometry vd=vdb.getTriangles(factory);for (int a=0; a < vd.getNumGeometries(); a++) {com.vividsolutions.jts.geom.Geometry g=vd.getGeometryN(a);if (g instanceof com.vividsolutions.jts.geom.Polygon) {com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)g;ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();int[] parts=new int[p.getNumInteriorRing() + 1];Coordinate[] buffCoords=p.getExteriorRing().getCoordinates();if (!Topology.isLineClosed(buffCoords)) {System.out.println("Exterior ring not closed.");}if (Topology.isClockwisePolygon(buffCoords)) {for (i=0; i < buffCoords.length; i++) {pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));}} else {for (i=buffCoords.length - 1; i >= 0; i--) {pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));}}for (int b=0; b < p.getNumInteriorRing(); b++) {parts[b + 1]=pnts.size();buffCoords=p.getInteriorRingN(b).getCoordinates();if (!Topology.isLineClosed(buffCoords)) {System.out.println("Interior ring not closed.");}if (Topology.isClockwisePolygon(buffCoords)) {for (i=buffCoords.length - 1; i >= 0; i--) {pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));}} else {for (i=0; i < buffCoords.length; i++) {pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));}}}PointsList pl=new PointsList(pnts);whitebox.geospatialfiles.shapefile.Polygon wbPoly=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());Object[] rowData=new Object[1];rowData[0]=new Double(record.getRecordNumber());output.addRecord(wbPoly);}}n++;if (n >= oneHundredthTotal) {n=0;if (cancelOp) {cancelOperation();return;}progress++;updateProgress(progress);}}output.write();returnData(outputFile);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case DomPackage.DOCLET_ELEMENT__BEGIN:    return begin != BEGIN_EDEFAULT;case DomPackage.DOCLET_ELEMENT__END:  return end != END_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public static JmhIdeBenchmarkRunner create(){  return new JmhIdeBenchmarkRunner();}  }
class C{  private void populateLastCollectionTimeForMetricsInStatsRequest(SingleResourceStatsCollectionTaskState currentState,ComputeStatsRequest computeStatsRequest,URI patchUri,List<String> tenantLinks){  URI computeStatsUri=UriUtils.buildStatsUri(UriUtils.buildUri(getHost(),currentState.computeLink));  Operation.createGet(computeStatsUri).setCompletion(null).sendWith(this);}  }
class C{  @Pure @CausesError({IncorrectPure4JImmutableCallException.class,PureMethodParameterNotImmutableException.class}) public String testParam1Bad(Object in1,Object in2){  Object in3=in2;  Pure4J.immutable(in1,in2);  return in3.toString();}  }
class C{  protected void searchUpdate(){  String query=m_queryF.getText();synchronized (m_lock) {    m_searcher.search(query);    if (m_searcher.getQuery().length() == 0)     m_resultL.setText(null); else {      int r=m_searcher.getTupleCount();      m_resultL.setText(r + " match" + (r == 1 ? "" : "es"));    }  }}  }
class C{  public static Set<Definition> retrieveRegisteredDefinitions(){  Set<Definition> r=new HashSet<Definition>();  for (  Integer defId : registeredDefs.values()) {    r.add(getDefinitionByDefId(defId));  }  return r;}  }
class C{  public boolean equals(Object o){  if (o == null)   return false;  if (!(o instanceof ContinuousVariable)) {    return false;  }  if (NodeEqualityMode.getEqualityType() == NodeEqualityMode.Type.OBJECT) {    return o == this;  } else   if (NodeEqualityMode.getEqualityType() == NodeEqualityMode.Type.NAME) {    return getName().equals(((Node)o).getName());  }  throw new IllegalStateException();}  }
class C{  @Override public void contextDestroyed(ServletContextEvent event){  log("contextDestroyed()");  this.context=null;}  }
class C{  public RefundProcessedOrderEventHandlerImpl(final PaymentProcessorFactory paymentProcessorFactory){  this.paymentProcessorFactory=paymentProcessorFactory;}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String() throws Exception {  Provider[] providers=Security.getProviders("CertificateFactory.X.509");  if (providers != null) {    for (int i=0; i < providers.length; i++) {      CertificateFactory fact=CertificateFactory.getInstance("X.509",providers[i].getName());      assertNotNull("factory is null",fact);    }  } else {    fail("No providers support CertificateFactory.X.509");  }  try {    CertificateFactory.getInstance("X.509","IHaventBeenConfigured");    fail("Should have thrown NoSuchProviderException");  } catch (  NoSuchProviderException e) {  }}  }
class C{  public EmpiricalDistribution(){  this.samples=new ArrayList<Assignment>();  this.variables=new HashSet<String>();  sampler=new Random();}  }
class C{  static boolean handleHotseatButtonKeyEvent(View v,int keyCode,KeyEvent e,int orientation){  ShortcutAndWidgetContainer parent=(ShortcutAndWidgetContainer)v.getParent();  final CellLayout layout=(CellLayout)parent.getParent();  final int action=e.getAction();  final boolean handleKeyEvent=(action != KeyEvent.ACTION_UP);  boolean wasHandled=false;switch (keyCode) {case KeyEvent.KEYCODE_DPAD_LEFT:    if (handleKeyEvent) {      ArrayList<View> views=getCellLayoutChildrenSortedSpatially(layout,parent);      int myIndex=views.indexOf(v);      if (myIndex > 0) {        views.get(myIndex - 1).requestFocus();        v.playSoundEffect(SoundEffectConstants.NAVIGATION_LEFT);      }    }  wasHandled=true;break;case KeyEvent.KEYCODE_DPAD_RIGHT:if (handleKeyEvent) {ArrayList<View> views=getCellLayoutChildrenSortedSpatially(layout,parent);int myIndex=views.indexOf(v);if (myIndex < views.size() - 1) {  views.get(myIndex + 1).requestFocus();  v.playSoundEffect(SoundEffectConstants.NAVIGATION_RIGHT);}}wasHandled=true;break;case KeyEvent.KEYCODE_DPAD_UP:if (handleKeyEvent) {final Workspace workspace=(Workspace)v.getRootView().findViewById(R.id.workspace);if (workspace != null) {int pageIndex=workspace.getCurrentPage();CellLayout topLayout=(CellLayout)workspace.getChildAt(pageIndex);ShortcutAndWidgetContainer children=topLayout.getShortcutsAndWidgets();final View newIcon=getIconInDirection(layout,children,-1,1);if (newIcon != null) {newIcon.requestFocus();v.playSoundEffect(SoundEffectConstants.NAVIGATION_UP);} else {workspace.requestFocus();}}}wasHandled=true;break;case KeyEvent.KEYCODE_DPAD_DOWN:wasHandled=true;break;default :break;}return wasHandled;}  }
class C{  public void addSetting(Setting setting){  this.settings.put(setting.getId(),setting.getValue());}  }
class C{  public LongSparseArray(int initialCapacity){  initialCapacity=ArrayUtils.idealLongArraySize(initialCapacity);  mKeys=new long[initialCapacity];  mValues=new Object[initialCapacity];  mSize=0;}  }
class C{  public void callHandler(String handlerName,String data,CallBackFunction callBack){  doSend(handlerName,data,callBack);}  }
class C{  public void removeColumn(Column c){  int idx=m_columns.indexOf(c);  if (idx < 0) {    throw new IllegalArgumentException("No such column.");  }  removeColumn(idx);}  }
class C{  public void actionPerformed(ActionEvent e){  String action=e.getActionCommand();  if (action == null || action.length() == 0)   return;  log.info("PosCashSubFunctions - actionPerformed: " + action);  if (action.equals("displayInitialChange")) {    cmd_displayInitialChange();  } else   if (action.equals("CashClosing")) {    Timestamp today=TimeUtil.getDay(System.currentTimeMillis());    MCash cash=MCash.get(p_pos.getCtx(),p_pos.getC_CashBook_ID(),today,null);    MQuery query=new MQuery(MCash.Table_Name);    query.addRestriction("C_Cash_ID",MQuery.EQUAL,cash.getC_Cash_ID());    AEnv.zoom(query);  } else   if (action.equals("InputsOutputs")) {    Timestamp today=TimeUtil.getDay(System.currentTimeMillis());    MCash cash=MCash.get(p_pos.getCtx(),p_pos.getC_CashBook_ID(),today,null);    AEnv.zoom(MCash.Table_ID,cash.getC_Cash_ID());  } else   if (action.equals("Tickets")) {    MQuery query=new MQuery(MOrder.Table_Name);    query.addRestriction("C_DocTypeTarget_ID",MQuery.EQUAL,p_pos.getC_DocType_ID());    AEnv.zoom(query);  } else   if (action.equals("displayCashScrutiny")) {    cmd_displayCashScrutiny();  } else   if (action.equals("End")) {    super.dispose();  } else   if (action.equals("saveChange")) {    cmd_saveChange();  } else   if (action.equals("AnnotateDifference")) {    cmd_calculateDifference();    cmd_annotateDifference();  } else   if (e.getSource() == v_ActualBalance)   cmd_calculateDifference();}  }
class C{  public PatchSetAttribute asPatchSetAttribute(ReviewDb db,RevWalk revWalk,Change change,PatchSet patchSet){  PatchSetAttribute p=new PatchSetAttribute();  p.revision=patchSet.getRevision().get();  p.number=Integer.toString(patchSet.getPatchSetId());  p.ref=patchSet.getRefName();  p.uploader=asAccountAttribute(patchSet.getUploader());  p.createdOn=patchSet.getCreatedOn().getTime() / 1000L;  p.isDraft=patchSet.isDraft();  PatchSet.Id pId=patchSet.getId();  try {    p.parents=new ArrayList<>();    RevCommit c=revWalk.parseCommit(ObjectId.fromString(p.revision));    for (    RevCommit parent : c.getParents()) {      p.parents.add(parent.name());    }    UserIdentity author=toUserIdentity(c.getAuthorIdent());    if (author.getAccount() == null) {      p.author=new AccountAttribute();      p.author.email=author.getEmail();      p.author.name=author.getName();      p.author.username="";    } else {      p.author=asAccountAttribute(author.getAccount());    }    List<Patch> list=patchListCache.get(change,patchSet).toPatchList(pId);    for (    Patch pe : list) {      if (!Patch.isMagic(pe.getFileName())) {        p.sizeDeletions-=pe.getDeletions();        p.sizeInsertions+=pe.getInsertions();      }    }    p.kind=changeKindCache.getChangeKind(db,change,patchSet);  } catch (  IOException e) {    log.error("Cannot load patch set data for " + patchSet.getId(),e);  }catch (  PatchListNotAvailableException e) {    log.error(String.format("Cannot get size information for %s.",pId),e);  }  return p;}  }
class C{  public ExtendedBufferedReader(Reader r){  super(r);}  }
class C{  public String toString(){  final long t=stop - start + 1;  if (t <= 0)   return "Illegal progress logger state";  return "Elapsed: " + millis2hms(t) + (count != 0 ? " [" + Util.format(count) + " "+ itemsName+ ", "+ Util.format(count / (t / 1000.0))+ " "+ itemsName+ "/s]" : "");}  }
class C{  public ListMultimap<String,String> asObject(){  if (values.isEmpty()) {    return new ListMultimap<String,String>(0);  }  Map<String,JsonValue> map=values.get(0).getObject();  if (map == null) {    return new ListMultimap<String,String>(0);  }  ListMultimap<String,String> values=new ListMultimap<String,String>();  for (  Map.Entry<String,JsonValue> entry : map.entrySet()) {    String key=entry.getKey();    JsonValue value=entry.getValue();    if (value.isNull()) {      values.put(key,"");      continue;    }    Object obj=value.getValue();    if (obj != null) {      values.put(key,obj.toString());      continue;    }    List<JsonValue> array=value.getArray();    if (array != null) {      for (      JsonValue element : array) {        if (element.isNull()) {          values.put(key,"");          continue;        }        obj=element.getValue();        if (obj != null) {          values.put(key,obj.toString());        }      }    }  }  return values;}  }
class C{  public Store(Store other){  __isset_bitfield=other.__isset_bitfield;  if (other.isSetStoreName()) {    this.storeName=other.storeName;  }  if (other.isSetScope()) {    this.scope=other.scope;  }  this.persist=other.persist;}  }
class C{  public void remove(XYPlot subplot){  ParamChecks.nullNotPermitted(subplot,"subplot");  int position=-1;  int size=this.subplots.size();  int i=0;  while (position == -1 && i < size) {    if (this.subplots.get(i) == subplot) {      position=i;    }    i++;  }  if (position != -1) {    this.subplots.remove(position);    subplot.setParent(null);    subplot.removeChangeListener(this);    configureRangeAxes();    fireChangeEvent();  }}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'VIDEO_CACHE' ("+ "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ,"+ "'RESULT' TEXT,"+ "'PAGE' INTEGER,"+ "'TIME' INTEGER);");}  }
class C{  protected Object sremove(Object key,int hash){  Entry[] tab=table;  int index=hash & (tab.length - 1);  Entry first=tab[index];  for (Entry e=first; e != null; e=e.next) {    if (e.hash == hash && eq(key,e.key)) {      Object oldValue=e.value;      e.value=null;      count--;      Entry head=e.next;      for (Entry p=first; p != e; p=p.next)       head=new Entry(p.hash,p.key,p.value,head);      tab[index]=head;      recordModification(head);      return oldValue;    }  }  return null;}  }
class C{  public static void checkFieldValueFromEnum(final String value,final String fieldName,Class<? extends Enum> enumType){  if (value != null) {    checkFieldValueFromEnum(value,fieldName,EnumSet.allOf(enumType));  }}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public GenericProxyFactory listener(JListener listener){  if (invokeType != CALLBACK) {    throw new UnsupportedOperationException("InvokeType should first be set to CALLBACK");  }  this.listener=listener;  return this;}  }
class C{  public boolean existTradestrategyById(final Integer id){  Tradestrategy instance=m_tradestrategyHome.findById(id);  if (null == instance)   return false;  return true;}  }
class C{  private OrderedCollection<PortChangeEvent> compareAndUpdatePorts(Collection<ImmutablePort> newPorts,boolean doUpdate){  if (newPorts == null) {    throw new NullPointerException("newPortsList must not be null");  }  lock.writeLock().lock();  try {    OrderedCollection<PortChangeEvent> events=new LinkedHashSetWrapper<PortChangeEvent>();    Map<Short,ImmutablePort> newPortsByNumber=new HashMap<Short,ImmutablePort>();    Map<String,ImmutablePort> newPortsByName=new HashMap<String,ImmutablePort>();    List<ImmutablePort> newEnabledPortList=new ArrayList<ImmutablePort>();    List<Short> newEnabledPortNumbers=new ArrayList<Short>();    List<ImmutablePort> newPortsList=new ArrayList<ImmutablePort>(newPorts);    for (    ImmutablePort p : newPortsList) {      if (p == null) {        throw new NullPointerException("portList must not " + "contain null values");      }      ImmutablePort duplicatePort;      duplicatePort=newPortsByNumber.put(p.getPortNumber(),p);      if (duplicatePort != null) {        String msg=String.format("Cannot have two ports " + "with the same number: %s <-> %s",p.toBriefString(),duplicatePort.toBriefString());        throw new IllegalArgumentException(msg);      }      duplicatePort=newPortsByName.put(p.getName().toLowerCase(),p);      if (duplicatePort != null) {        String msg=String.format("Cannot have two ports " + "with the same name: %s <-> %s",p.toBriefString(),duplicatePort.toBriefString());        throw new IllegalArgumentException(msg);      }      if (p.isEnabled()) {        newEnabledPortList.add(p);        newEnabledPortNumbers.add(p.getPortNumber());      }      events.addAll(getSinglePortChanges(p));    }    for (    ImmutablePort oldPort : this.portList) {      if (!newPortsByNumber.containsKey(oldPort.getPortNumber())) {        PortChangeEvent ev=new PortChangeEvent(oldPort,PortChangeType.DELETE);        events.add(ev);      }    }    if (doUpdate) {      portsByName=Collections.unmodifiableMap(newPortsByName);      portsByNumber=Collections.unmodifiableMap(newPortsByNumber);      enabledPortList=Collections.unmodifiableList(newEnabledPortList);      enabledPortNumbers=Collections.unmodifiableList(newEnabledPortNumbers);      portList=Collections.unmodifiableList(newPortsList);    }    return events;  }  finally {    lock.writeLock().unlock();  }}  }
class C{  @Override public Boolean visitError(ErrorType t,Void p){  if (typeParameters.isEmpty()) {    String simpleName=t.toString();    return equal(simpleName,superclass.getSimpleName());  }  return true;}  }
class C{  protected void pickupEngines(PrintWriter file,List<Engine> engineList,RouteLocation rl,boolean isManifest){  boolean printHeader=Setup.isPrintHeadersEnabled();  for (  Engine engine : engineList) {    if (engine.getRouteLocation() == rl && !engine.getTrackName().equals(Engine.NONE)) {      if (printHeader) {        printPickupEngineHeader(file,isManifest);        printHeader=false;      }      pickupEngine(file,engine,isManifest);    }  }}  }
class C{  public SAXException(String message,Exception e){  super(message);  this.exception=e;}  }
class C{  @Override public void plotChanged(PlotChangeEvent e){  this.event=e;}  }
class C{  public CSVParserBuilder withFieldAsNull(final CSVReaderNullFieldIndicator fieldIndicator){  this.nullFieldIndicator=fieldIndicator;  return this;}  }
class C{  public String numExamplesTipText(){  return "The number of examples to generate.";}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public void update(){  final SharedPreferences settings=getSharedPreferencesForCurrentUser();  if (settings.getBoolean(BLUE_BUTTON,false)) {    blueSwatch.setBackgroundDrawable(getResources().getDrawable(R.drawable.swatchblue));  } else {    blueSwatch.setBackgroundDrawable(getResources().getDrawable(R.drawable.swatchbluelocked));  }  if (settings.getBoolean(PURPLE_BUTTON,false)) {    purpleSwatch.setBackgroundDrawable(getResources().getDrawable(R.drawable.swatchpurple));  } else {    purpleSwatch.setBackgroundDrawable(getResources().getDrawable(R.drawable.swatchpurplelocked));  }  if (settings.getBoolean(GREEN_BUTTON,false)) {    greenSwatch.setBackgroundDrawable(getResources().getDrawable(R.drawable.swatchgreen));  } else {    greenSwatch.setBackgroundDrawable(getResources().getDrawable(R.drawable.swatchgreenlocked));  }  numClicks=settings.getInt(NUM_CLICKS,5);  clicksLeft.setText("" + numClicks);}  }
class C{  public void beforeSaveProperties(){  int AD_Client_ID=Env.getAD_Client_ID(Env.getCtx());  for (int i=0; i < m_validators.size(); i++) {    ModelValidator validator=(ModelValidator)m_validators.get(i);    if (AD_Client_ID == validator.getAD_Client_ID() || m_globalValidators.contains(validator)) {      java.lang.reflect.Method m=null;      try {        m=validator.getClass().getMethod("beforeSaveProperties");      } catch (      NoSuchMethodException e) {      }      try {        if (m != null)         m.invoke(validator);      } catch (      Exception e) {        log.warning("" + validator + ": "+ e.getLocalizedMessage());      }    }  }}  }
class C{  public HighlightBuilder requireFieldMatch(boolean requireFieldMatch){  this.requireFieldMatch=requireFieldMatch;  return this;}  }
class C{  public ContinuousSigmoidalRulePanel(){  super();  this.add(tabbedPane);  tfTimeConstant=createTextField(null,null);  tfLeakConstant=createTextField(null,null);  mainTab.addItem("Implementation",cbImplementation);  mainTab.addItem("Time Constant",tfTimeConstant);  mainTab.addItem("Leak Constant",tfLeakConstant);  mainTab.addItem("Bias",tfBias);  mainTab.addItem("Slope",tfSlope);  mainTab.addItem("Add Noise",getAddNoise());  tabbedPane.add(mainTab,"Main");  tabbedPane.add(getNoisePanel(),"Noise");}  }
class C{  public static final String encode(String[] src){  if (src == null || src.length == 0) {    return "";  }  StringBuilder buffer=new StringBuilder();  for (  String str : src) {    buffer.append(str).append(SEPARATOR);  }  if (buffer.length() > 0) {    buffer.setLength(buffer.length() - 1);  }  return buffer.toString();}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:28.125 -0500",hash_original_method="6FAEC3D93E1C94116A1DCC64CCDF43BD",hash_generated_method="9677B7DCA56FC9B0977C3DDB70FB4B9B") public ConnectionPoolTimeoutException(String message){  super(message);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:43.438 -0500",hash_original_method="2180FC72509B511C247A77608998B3E2",hash_generated_method="193C2A5F2CCEEBF10DEAD42BE7FAD8A5") public SIPMessage parseSIPMessage(String msgString) throws ParseException {  if (msgString == null || msgString.length() == 0)   return null;  rawStringMessage=msgString;  int i=0;  try {    while (msgString.charAt(i) < 0x20)     i++;  } catch (  ArrayIndexOutOfBoundsException e) {    return null;  }catch (  StringIndexOutOfBoundsException ex) {    return null;  }  String currentLine=null;  String currentHeader=null;  boolean isFirstLine=true;  SIPMessage message=null;  do {    int lineStart=i;    try {      char c=msgString.charAt(i);      while (c != '\r' && c != '\n')       c=msgString.charAt(++i);    } catch (    ArrayIndexOutOfBoundsException e) {      break;    }catch (    StringIndexOutOfBoundsException ex) {      break;    }    currentLine=msgString.substring(lineStart,i);    currentLine=trimEndOfLine(currentLine);    if (currentLine.length() == 0) {      if (currentHeader != null) {        processHeader(currentHeader,message);      }    } else {      if (isFirstLine) {        message=processFirstLine(currentLine);      } else {        char firstChar=currentLine.charAt(0);        if (firstChar == '\t' || firstChar == ' ') {          if (currentHeader == null)           throw new ParseException("Bad header continuation.",0);          currentHeader+=currentLine.substring(1);        } else {          if (currentHeader != null) {            processHeader(currentHeader,message);          }          currentHeader=currentLine;        }      }    }    if (msgString.charAt(i) == '\r' && msgString.length() > i + 1 && msgString.charAt(i + 1) == '\n')     i++;    i++;    isFirstLine=false;  } while (currentLine.length() > 0);  message.setSize(i);  if (readBody && message.getContentLength() != null) {    if (message.getContentLength().getContentLength() != 0) {      String body=msgString.substring(i);      message.setMessageContent(body,this.strict,computeContentLengthFromMessage,message.getContentLength().getContentLength());    } else     if (!computeContentLengthFromMessage && message.getContentLength().getContentLength() == 0 && !msgString.endsWith("\r\n\r\n")) {      if (strict) {        throw new ParseException("Extraneous characters at the end of the message ",i);      }    }  }  return message;}  }
class C{  public MutablePeriod(ReadableInstant startInstant,ReadableDuration duration){  super(startInstant,duration,null);}  }
class C{  public static boolean isBluetoothEnabled(){  BluetoothAdapter mBluetoothAdapter=BluetoothAdapter.getDefaultAdapter();  return (mBluetoothAdapter != null && mBluetoothAdapter.isEnabled());}  }
class C{  public void prepare(){  if (COMPILE_THRESHOLD == 0 && !isCompiled) {    compileToBytecode();  }  if (this.vmentry != null) {    return;  }  LambdaForm prep=getPreparedForm(basicTypeSignature());  this.vmentry=prep.vmentry;}  }
class C{  public boolean replanFutureCarLegRoute(Plan plan,int legPlanElementIndex){  if (plan == null)   return false;  if (planAlgorithm == null)   return false;  DebugLib.traceAgent(plan.getPerson().getId(),2);  Leg leg;  PlanElement planElement=plan.getPlanElements().get(legPlanElementIndex);  if (planElement instanceof Leg) {    leg=(Leg)planElement;  } else   return false;  Activity fromActivity=(Activity)plan.getPlanElements().get(legPlanElementIndex - 1);  Activity toActivity=(Activity)plan.getPlanElements().get(legPlanElementIndex + 1);  NetworkRoute oldRoute=(NetworkRoute)leg.getRoute();  Route newRoute=null;  double distanceOldNewDestination=0;  if (oldRoute != null && getRouteSize(oldRoute) != 0) {    Link oldOriginLink=getLink(oldRoute.getStartLinkId());    Link newOriginLink=getLink(fromActivity.getLinkId());    oldRoute.getLinkIds();    if (!oldOriginLink.getId().equals(newOriginLink.getId())) {      double distanceOldNewOriginal=GeneralLib.getDistance(oldOriginLink.getCoord(),newOriginLink.getCoord());      truncateRouteStart(oldRoute,distanceOldNewOriginal * 2);    }    if (getRouteSize(oldRoute) == 0) {      Plan newPlan=PopulationUtils.createPlan(plan.getPerson());      newPlan.addActivity(fromActivity);      newPlan.addLeg(leg);      newPlan.addActivity(toActivity);      planAlgorithm.run(newPlan);      return true;    }    Link oldDestinationLink=getLink(oldRoute.getEndLinkId());    Link newDestinationLink=getLink(toActivity.getLinkId());    if (!oldDestinationLink.getId().equals(newDestinationLink.getId())) {      double distanceOldNewOriginal=GeneralLib.getDistance(oldDestinationLink.getCoord(),newDestinationLink.getCoord());      truncateRouteEnd(oldRoute,distanceOldNewOriginal * 2);    }    if (getRouteSize(oldRoute) == 0) {      Plan newPlan=PopulationUtils.createPlan(plan.getPerson());      newPlan.addActivity(fromActivity);      newPlan.addLeg(leg);      newPlan.addActivity(toActivity);      planAlgorithm.run(newPlan);    } else {      if (!oldRoute.getStartLinkId().equals(newOriginLink.getId())) {        NetworkRoute startRoute=getRoute(newOriginLink,getLink(oldRoute.getStartLinkId()));        joinRoutes(startRoute,oldRoute,oldRoute);      }      if (!oldRoute.getEndLinkId().equals(newDestinationLink.getId())) {        NetworkRoute endRoute=getRoute(getLink(oldRoute.getEndLinkId()),newDestinationLink);        joinRoutes(oldRoute,endRoute,oldRoute);      }    }  } else {    Plan newPlan=PopulationUtils.createPlan(plan.getPerson());    newPlan.addActivity(fromActivity);    newPlan.addLeg(leg);    newPlan.addActivity(toActivity);    planAlgorithm.run(newPlan);  }  newRoute=leg.getRoute();  if (oldRoute != null && oldRoute != newRoute) {    if (oldRoute instanceof NetworkRoute && newRoute instanceof NetworkRoute) {      List<Id<Link>> linkIds=((NetworkRoute)newRoute).getLinkIds();      oldRoute.setLinkIds(newRoute.getStartLinkId(),linkIds,newRoute.getEndLinkId());      leg.setRoute(oldRoute);    }  }  return true;}  }
class C{  private int shiftForReplace(int start,int limit,int charsLen){  final int replacementLength=limit - start;  final int newLength=length - replacementLength + charsLen;  if (newLength > length)   buffer=token.resizeBuffer(newLength);  if (replacementLength != charsLen && limit < length)   System.arraycopy(buffer,limit,buffer,start + charsLen,length - limit);  return newLength;}  }
class C{  public synchronized void loadFromFile(){  entries.clear();  Path file=Paths.get(fileName);  try (BufferedReader reader=Files.newBufferedReader(file,CHARSET)){    String line;    do {      line=reader.readLine();      AddressbookEntry parsedEntry=parseLine(line);      if (parsedEntry != null) {        entries.put(parsedEntry.getName(),parsedEntry);      }    } while (line != null);  } catch (  IOException ex) {    LOGGER.warning("Error reading addressbook: " + ex.getLocalizedMessage());  }  LOGGER.info("Read " + entries.size() + " addressbook entries from "+ fileName);  scanCategories();}  }
class C{  public void repaint(int x,int y,int w,int h){  Rectangle rect;synchronized (dirtyRegionLock) {    if (dirtyRegion == null) {      if (repaintPending) {        return;      }      rect=new Rectangle(x,y,w,h);      setDirtyRegion(rect);    } else     if (dirtyRegion.getX() != x || dirtyRegion.getY() != y || dirtyRegion.getSize().getWidth() != w || dirtyRegion.getSize().getHeight() != h) {      rect=new Rectangle(dirtyRegion);      Dimension size=rect.getSize();      int x1=Math.min(rect.getX(),x);      int y1=Math.min(rect.getY(),y);      int x2=Math.max(x + w,rect.getX() + size.getWidth());      int y2=Math.max(y + h,rect.getY() + size.getHeight());      rect.setX(x1);      rect.setY(y1);      size.setWidth(x2 - x1);      size.setHeight(y2 - y1);      setDirtyRegion(rect);    }  }  repaint(this);}  }
class C{  private void readAutomaticStylesElement(IXMLElement elem) throws IOException {  readStylesChildren(elem,automaticStyles);}  }
class C{  protected boolean isDragging(){  return isDragging;}  }
class C{  public Spider addUrl(String... urls){  for (  String url : urls) {    addRequest(new Request(url));  }  signalNewUrl();  return this;}  }
class C{  public static SecuritySpecModel initializeSecuritySpec(IProject project){  String projectRootPath=project.getLocation().toOSString();  SecuritySpecModel securitySpec=SecuritySpecModel.deserializeSpecFromFile(projectRootPath);  if (securitySpec != null) {    ProjectMarkerProcessor.get(project).init(securitySpec);    specMap.put(project,securitySpec);  }  return securitySpec;}  }
class C{  private Rectangle integerise(Rectangle2D rect){  int x0=(int)Math.ceil(rect.getMinX());  int y0=(int)Math.ceil(rect.getMinY());  int x1=(int)Math.floor(rect.getMaxX());  int y1=(int)Math.floor(rect.getMaxY());  return new Rectangle(x0,y0,(x1 - x0),(y1 - y0));}  }
class C{  public void info(CharSequence message){  log(Level.INFO,message);}  }
class C{  public JDateTime(String title){  this.title=title;  initComponents();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:22.968 -0400",hash_original_method="C309EEC3E8488BFF25AD77ED1252E8B0",hash_generated_method="CBE65790B9A76DEB27BFD0984F5DE88A") private String stateToString(long s){  return super.toString() + "[phase = " + phaseOf(s)+ " parties = "+ partiesOf(s)+ " arrived = "+ arrivedOf(s)+ "]";}  }
class C{  public void addHeaderView(View view){  if (null == view) {    throw new IllegalArgumentException("the view to add must not be null!");  }  final FixedViewInfo info=new FixedViewInfo();  info.view=view;  info.viewType=BASE_HEADER_VIEW_TYPE + mHeaderViewInfos.size();  mHeaderViewInfos.add(info);  notifyDataSetChanged();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaNode node=getMediaNode(stack);  if (node != null) {    String rv="";    node=node.getParent();    while (node != null) {      rv=node.getPrimaryLabel() + (rv.length() == 0 ? "" : "/") + rv;      node=node.getParent();    }    return rv;  }  return "";}  }
class C{  public DirectoryOrFileNotFoundException(String entity,String name,Throwable cause){  super(String.format(_errorMessage,entity,name),cause);}  }
class C{  private static int spinsFor(Node pred,boolean haveData){  if (MP && pred != null) {    if (pred.isData != haveData)     return FRONT_SPINS + CHAINED_SPINS;    if (pred.isMatched())     return FRONT_SPINS;    if (pred.waiter == null)     return CHAINED_SPINS;  }  return 0;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:19.278 -0500",hash_original_method="B7894A7F3E04E8F81CBF1F61E6B8AB40",hash_generated_method="EA548961B2D594DB52CFED05B98ABA05") private boolean matchesMobile4g(NetworkIdentity ident){  if (ident.mType == TYPE_WIMAX) {    return true;  } else   if (matchesMobile(ident)) {switch (getNetworkClass(ident.mSubType)) {case NETWORK_CLASS_4_G:      return true;  }}return false;}  }
class C{  public boolean isBorderOpaque(){  return color != null;}  }
class C{  public ImageTransformerDouble(final GraphicsState currentGS,final BufferedImage new_image,final boolean scaleImage,final float scaling,final int pageRotation){  this.current_image=new_image;  this.scaleImage=scaleImage;  this.scaling=scaling;  this.pageRotation=pageRotation;  CTM=currentGS.CTM;  createMatrices();  if (currentGS.getClippingShape() != null) {    clip=(Area)currentGS.getClippingShape().clone();  }  calcCoordinates();}  }
class C{  private void catchError(final boolean isDownload,final String errorMessage){  SpeedTestUtils.dispatchError(mForceCloseSocket,mListenerList,isDownload,errorMessage);  mTimeEnd=System.currentTimeMillis();  closeSocket();  closeExecutors();}  }
class C{  public static double mean(long[] values){  double total=0.0;  for (int i=0; i < values.length; i++)   total+=values[i];  return total / values.length;}  }
class C{  public final void testGetPrimeP(){  RSAMultiPrimePrivateCrtKeySpec ks=new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,opi);  assertTrue(BigInteger.ONE.equals(ks.getPrimeP()));}  }
class C{  private static MessageConsole findConsole(String name){  if (name == null) {    throw new IllegalArgumentException("Console name must be not null");  }  IConsoleManager consoleManager=ConsolePlugin.getDefault().getConsoleManager();  IConsole[] existing=consoleManager.getConsoles();  for (int i=0; i < existing.length; i++) {    if (name.equals(existing[i].getName())) {      return (MessageConsole)existing[i];    }  }  MessageConsole myConsole=new MessageConsole(name,null);  consoleManager.addConsoles(new IConsole[]{myConsole});  return myConsole;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:02:38.402 -0400",hash_original_method="B55FC7CF4E0F303FAA191B93D3A00366",hash_generated_method="B55FC7CF4E0F303FAA191B93D3A00366") DirectiveList(byte[] directives){  m_curPos=0;  m_state=STATE_LOOKING_FOR_FIRST_DIRECTIVE;  m_directiveList=new ArrayList(10);  m_scanStart=0;  m_errorPos=-1;  try {    m_directives=new String(directives,"UTF-8");  } catch (  UnsupportedEncodingException e) {    m_state=STATE_NO_UTF8_SUPPORT;  }}  }
class C{  private void prefixSearch(String query){  m_curNode=m_trie.find(query);  if (m_curNode != null) {    Iterator iter=trieIterator();    while (iter.hasNext())     addInternal((Tuple)iter.next());  }}  }
class C{  public boolean checkPassword(CharSequence password){  lock.lock();  try {    return keyCrypter != null && checkAESKey(keyCrypter.deriveKey(checkNotNull(password)));  }  finally {    lock.unlock();  }}  }
class C{  private void fixBackgroundPositionDefaults(int attrId){  if ((attrId == CSS_BACKGROUND_POSITION_X) && (!isAttributeAssigned(CSS_BACKGROUND_POSITION_Y))) {    addAttribute(CSS_BACKGROUND_POSITION_Y,CENTER_STR);  } else   if ((attrId == CSS_BACKGROUND_POSITION_Y) && (!isAttributeAssigned(CSS_BACKGROUND_POSITION_X))) {    addAttribute(CSS_BACKGROUND_POSITION_X,CENTER_STR);  }}  }
class C{  @Override public boolean isClosed() throws SQLException {  try {    debugCodeCall("isClosed");    return session == null || session.isClosed();  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void clear(){  logger.info("Removing all items from vote cache");  CachedVote.clear(database.value());}  }
class C{  public void handleEvent(Event evt){  EventTarget target=evt.getTarget();  if (target instanceof XBLOMDefinitionElement) {    XBLOMDefinitionElement def=(XBLOMDefinitionElement)target;    addDefinition(def.getElementNamespaceURI(),def.getElementLocalName(),def,importElement);  }}  }
class C{  private void resetReportingIterator(){  rowError=false;  exception=null;  errorMessage=null;}  }
class C{  private static boolean isValidStartEndForLength(int start,int end,int length){  if (start > length || end > length) {    return false;  }  return true;}  }
class C{  public DirectGainControl(float gain,float minimum,float maximum,float increment){  assert (minimum > 0);  mDefaultGain=gain;  mGain=gain;  mMinimum=minimum;  mMaximum=maximum;  mIncrement=increment;}  }
class C{  public void addDistance(int increment){  distance+=increment;}  }
class C{  public boolean addBound(boolean b){  if (DEBUG) {    log(">>> ADD bound: " + Boolean.toString(b).toUpperCase());  }  if (b == false && !haveBoundFALSE) {    haveBoundFALSE=true;    return true;  }  return false;}  }
class C{  public XML addAttributes(Class<?> aClass,Attribute[] attributes){  checksAttributesExistence(aClass,attributes);  for (  Attribute attribute : attributes) {    if (attributeExists(aClass,attribute))     Error.xmlAttributeExistent(this.xmlPath,attribute,aClass);    findXmlClass(aClass).attributes.add(Converter.toXmlAttribute(attribute));  }  return this;}  }
class C{  @Inline(value=Inline.When.AssertionsDisabled) protected final void uncheckedTailInsert(Address value){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(bufferOffset(tail).sGE(Offset.fromIntZeroExtend(BYTES_IN_ADDRESS)));  tail=tail.minus(BYTES_IN_ADDRESS);  tail.store(value);}  }
class C{  public static String encodeString(String str){  if (str == null) {    return "";  }  String encodedStr="";  for (int i=0; i < str.length(); i++) {    char c=str.charAt(i);    if (((c >= 'a') && (c <= 'z')) || ((c >= 'A') && (c <= 'Z')) || ((c >= '0') && (c <= '9'))|| (c == '-')|| (c == '.')|| (c == '_')|| (c == '~')) {      encodedStr+=c;    } else     if ((c >= 0x80) && (c <= 0xffff)) {      int firstLiteral=c / 256;      int secLiteral=c % 256;      if (c <= 0x07ff) {        firstLiteral=192 + (firstLiteral << 2) + (secLiteral >> 6);        secLiteral=128 + (secLiteral & 63);        encodedStr+="%" + Integer.toHexString(firstLiteral).toUpperCase() + "%"+ Integer.toHexString(secLiteral).toUpperCase();      } else {        int thirdLiteral=128 + (secLiteral & 63);        secLiteral=128 + ((firstLiteral % 16) << 2) + (secLiteral >> 6);        firstLiteral=224 + (firstLiteral >> 4);        encodedStr+="%" + Integer.toHexString(firstLiteral).toUpperCase() + "%"+ Integer.toHexString(secLiteral).toUpperCase()+ "%"+ Integer.toHexString(thirdLiteral).toUpperCase();      }    } else {      String prefix="%";      if (c < 16) {        prefix+="0";      }      encodedStr+=prefix + Integer.toHexString((int)c).toUpperCase();    }  }  return encodedStr;}  }
class C{  protected void initCustomStyle(Style s){  s.addStyleListener(this);  if (s.getBgPainter() == null) {    s.setBgPainter(new BGPainter());  }}  }
class C{  private Multimap<Class<?>,Subscriber> findAllSubscribers(Object listener){  Multimap<Class<?>,Subscriber> methodsInListener=HashMultimap.create();  Class<?> clazz=listener.getClass();  for (  Method method : getAnnotatedMethods(clazz)) {    Class<?>[] parameterTypes=method.getParameterTypes();    Class<?> eventType=parameterTypes[0];    methodsInListener.put(eventType,Subscriber.create(bus,listener,method));  }  return methodsInListener;}  }
class C{  private void updateBodiesToArmature(){  capsuleTransform.set(modelTransform);  for (Iterator<ObjectMap.Entry<btRigidBody,RigidBodyNodeConnection>> iterator=bodyPartMap.iterator(); iterator.hasNext(); ) {    ObjectMap.Entry<btRigidBody,RigidBodyNodeConnection> entry=iterator.next();    RigidBodyNodeConnection data=entry.value;    btRigidBody body=entry.key;    Node followNode=data.followNode;    Vector3 offset=data.bodyNodeOffsets.get(followNode);    body.proceedToTransform(tmpMatrix.set(capsuleTransform).mul(followNode.globalTransform).translate(offset));  }}  }
class C{  public Builder state(){  this.state=true;  return this;}  }
class C{  public ObjectName constructObjectName(){  if (MapUtils.isNotEmpty(objectNameParameters)) {    StringBuilder nameString=new StringBuilder(domain);    nameString.append(':');    Iterator<Entry<String,String>> it=objectNameParameters.entrySet().iterator();    while (it.hasNext()) {      Entry<String,String> next=it.next();      nameString.append(next.getKey());      nameString.append('=');      nameString.append(next.getValue());      if (it.hasNext()) {        nameString.append(',');      }    }    try {      return new ObjectName(nameString.toString());    } catch (    MalformedObjectNameException e) {      return null;    }  }  return null;}  }
class C{  private AudioDevice(){  clipStreams=new Hashtable();  infos=new Vector();}  }
class C{  public StatechartScope createStatechartScope(){  StatechartScopeImpl statechartScope=new StatechartScopeImpl();  return statechartScope;}  }
class C{  public int size(){  if (mGarbage) {    gc();  }  return mSize;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Attr newAttribute;  Node testAddress;  NamedNodeMap attributes;  Attr districtNode;  String attrValue;  Node setNode;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testAddress=elementList.item(1);  newAttribute=doc.createAttribute("street");  attributes=testAddress.getAttributes();  setNode=attributes.setNamedItem(newAttribute);  districtNode=(Attr)attributes.getNamedItem("street");  attrValue=districtNode.getNodeValue();  assertEquals("streetValue","",attrValue);}  }
class C{  @Override public synchronized void stateUpdate(){  CdcrUpdateLog ulog=(CdcrUpdateLog)core.getUpdateHandler().getUpdateLog();  if (!leaderStateManager.amILeader()) {    ulog.enableBuffer();    return;  } else   if (bufferStateManager.getState().equals(CdcrParams.BufferState.ENABLED)) {    ulog.enableBuffer();    return;  }  ulog.disableBuffer();}  }
class C{  @GET @Path("null") @View("hello.jsp") public String nullController(){  return null;}  }
class C{  public synchronized void clear(){  head=0;  tail=0;  count=0;}  }
class C{  public static boolean cs_utsolve(Dcs U,double[] x){  int p, j, n, Up[], Ui[];  double Ux[];  if (!Dcs_util.CS_CSC(U) || x == null)   return (false);  n=U.n;  Up=U.p;  Ui=U.i;  Ux=U.x;  for (j=0; j < n; j++) {    for (p=Up[j]; p < Up[j + 1] - 1; p++) {      x[j]-=Ux[p] * x[Ui[p]];    }    x[j]/=Ux[Up[j + 1] - 1];  }  return (true);}  }
class C{  @Override public boolean equals(final Object o){  if (this == o) {    return true;  }  if (!(o instanceof Type)) {    return false;  }  Type t=(Type)o;  if (sort != t.sort) {    return false;  }  if (sort >= ARRAY) {    if (len != t.len) {      return false;    }    for (int i=off, j=t.off, end=i + len; i < end; i++, j++) {      if (buf[i] != t.buf[j]) {        return false;      }    }  }  return true;}  }
class C{  public boolean hasPublicKey(){  return null != this.keyPair;}  }
class C{  public Note makeNewBug(final float x,final float y){  int lat=yToLatE7(y);  int lon=xToLonE7(x);  return new Note(lat,lon);}  }
class C{  void showMessageBox(String message,Runnable callback){  Text text=createMessage(message);  FXGLButton btnOK=new FXGLButton("OK");  btnOK.setOnAction(null);  VBox vbox=new VBox(50,text,btnOK);  vbox.setAlignment(Pos.CENTER);  vbox.setUserData(new Point2D(Math.max(text.getLayoutBounds().getWidth(),200),text.getLayoutBounds().getHeight() * 2 + 50));  setContent("Message",vbox);  show();}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("From " + request.getRemoteHost() + " - "+ request.getRemoteAddr());  doPost(request,response);}  }
class C{  @RequestMapping(value={"/clone/{id}","/clone/{id}/"},method=RequestMethod.PUT) @ResponseBody public RestWrapper insertClone(@PathVariable("id") Integer processId,Principal principal){  RestWrapper restWrapper=null;  try {    com.wipro.ats.bdre.md.dao.jpa.Process clonedDaoProcess=processDAO.cloneProcess(processId);    Process processes=new Process();    processes.setProcessId(clonedDaoProcess.getProcessId());    processes.setBusDomainId(clonedDaoProcess.getBusDomain().getBusDomainId());    if (clonedDaoProcess.getWorkflowType() != null) {      processes.setWorkflowId(clonedDaoProcess.getWorkflowType().getWorkflowId());    }    processes.setDescription(clonedDaoProcess.getDescription());    processes.setProcessName(clonedDaoProcess.getProcessName());    processes.setProcessTypeId(clonedDaoProcess.getProcessType().getProcessTypeId());    if (clonedDaoProcess.getProcess() != null) {      processes.setParentProcessId(clonedDaoProcess.getProcess().getProcessId());    }    processes.setCanRecover(clonedDaoProcess.getCanRecover());    if (clonedDaoProcess.getProcessTemplate() != null) {      processes.setProcessTemplateId(clonedDaoProcess.getProcessTemplate().getProcessTemplateId());    }    processes.setEnqProcessId(clonedDaoProcess.getEnqueuingProcessId());    processes.setNextProcessIds(clonedDaoProcess.getNextProcessId());    if (clonedDaoProcess.getBatchCutPattern() != null) {      processes.setBatchPattern(clonedDaoProcess.getBatchCutPattern());    }    processes.setTableAddTS(DateConverter.dateToString(clonedDaoProcess.getAddTs()));    processes.setTableEditTS(DateConverter.dateToString(clonedDaoProcess.getEditTs()));    processes.setDeleteFlag(clonedDaoProcess.getDeleteFlag());    restWrapper=new RestWrapper(processes,RestWrapper.OK);    LOGGER.info("Record with ID:" + processes.getProcessId() + " inserted in Process by User:"+ principal.getName()+ processes);  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  private int fndMetabit(){  final int blocks=m_metaBits.length / cDefaultMetaBitsSize;  for (int b=0; b < blocks; b++) {    final int ret=fndBit(m_metaTransientBits,(b * cDefaultMetaBitsSize) + 1,cDefaultMetaBitsSize - 1);    if (ret != -1) {      assert !tstBit(m_metaBits,ret);      return ret;    }  }  return -1;}  }
class C{  public void write(Object[] values,EventBean theEvent){  ObjectArrayBackedEventBean arrayEvent=(ObjectArrayBackedEventBean)theEvent;  Object[] array=arrayEvent.getProperties();  for (int i=0; i < indexes.length; i++) {    array[indexes[i]]=values[i];  }}  }
class C{  @Override protected void onWindowVisibilityChanged(int visibility){  super.onWindowVisibilityChanged(visibility);  adapter.notifyDataSetChanged();}  }
class C{  public Axis(){  this(50);}  }
class C{  protected static Map<String,String> loadStream(InputStream input) throws IOException {  Properties props=new Properties();  props.load(input);  return new HashMap(props);}  }
class C{  public boolean shouldUrlDecode(){  return this.urlDecode;}  }
class C{  protected void validate_return(VasaAssociationObject[] param){}  }
class C{  @Override protected boolean isZoneLevelResource(){  return false;}  }
class C{  public Response onCommand(SMTPSession session,Request request){  if (session.isStartTLSSupported()) {    if (session.isTLSStarted()) {      return TLS_ALREADY_ACTIVE;    } else {      String parameters=request.getArgument();      if ((parameters == null) || (parameters.length() == 0)) {        return READY_FOR_STARTTLS;      } else {        return SYNTAX_ERROR;      }    }  } else {    return NOT_SUPPORTED;  }}  }
class C{  protected static int normaliseIndex(int i,int size){  int temp=i;  if (i < 0) {    i+=size;  }  if (i < 0) {    throw new ArrayIndexOutOfBoundsException("Negative array index [" + temp + "] too large for array size "+ size);  }  return i;}  }
class C{  protected Node newNode(){  return new SVGOMPolygonElement();}  }
class C{  public void loadJarFile(String name){  try {    JarInputStream zin=new JarInputStream(new FileInputStream(JarName));    JarEntry entry;    fileText.setText("");    while ((entry=zin.getNextJarEntry()) != null) {      if (entry.getName().equals(name)) {        BufferedReader in=new BufferedReader(new InputStreamReader(zin));        String line;        while ((line=in.readLine()) != null) {          fileText.append(line);          fileText.append("\n");        }      }      zin.closeEntry();    }    zin.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public void showPalette(){  Debug.message("drawingtool","OMDrawingTool.showPalette()");  resetGUIWhenDeactivated=true;  getGUI();  repaint();  boolean shouldBeVisible=!getUseAsTool() || (isMask(SHOW_GUI_BEHAVIOR_MASK) && getUseAsTool());  setVisible(shouldBeVisible);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case ImPackage.REFERENCING_ELEMENT_IM___GET_ORIGINAL_TARGET_OF_REWIRED_TARGET:    return getOriginalTargetOfRewiredTarget();}return super.eInvoke(operationID,arguments);}  }
class C{  public boolean addPartiallyOrientedEdge(Node node1,Node node2){  return addEdge(Edges.partiallyOrientedEdge(node1,node2));}  }
class C{  private void sendStageProgressPatch(State current,TaskState.TaskStage stage,TaskState.SubStage subStage){  if (current.isSelfProgressionDisabled) {    return;  }  sendSelfPatch(buildPatch(stage,subStage,null));}  }
class C{  private String findFirstCameraIdFacing(int facing){  try {    String[] cameraIds=mCameraManager.getCameraIdList();    for (    String cameraId : cameraIds) {      CameraCharacteristics characteristics=mCameraManager.getCameraCharacteristics(cameraId);      if (characteristics.get(CameraCharacteristics.LENS_FACING) == facing) {        return cameraId;      }    }  } catch (  CameraAccessException ex) {    Log.w(TAG,"Unable to get camera ID",ex);  }  return null;}  }
class C{  public static DAOAccount newInstance(String displayName){  final DAOAccount returnInstance=new DAOAccount();  returnInstance.setDisplayName(displayName);  return returnInstance;}  }
class C{  public final static byte[] decode(byte[] sArr){  int sLen=sArr.length;  int sepCnt=0;  for (int i=0; i < sLen; i++)   if (IA[sArr[i] & 0xff] < 0)   sepCnt++;  if ((sLen - sepCnt) % 4 != 0)   return null;  int pad=0;  for (int i=sLen; i > 1 && IA[sArr[--i] & 0xff] <= 0; )   if (sArr[i] == '=')   pad++;  int len=((sLen - sepCnt) * 6 >> 3) - pad;  byte[] dArr=new byte[len];  for (int s=0, d=0; d < len; ) {    int i=0;    for (int j=0; j < 4; j++) {      int c=IA[sArr[s++] & 0xff];      if (c >= 0)       i|=c << (18 - j * 6); else       j--;    }    dArr[d++]=(byte)(i >> 16);    if (d < len) {      dArr[d++]=(byte)(i >> 8);      if (d < len)       dArr[d++]=(byte)i;    }  }  return dArr;}  }
class C{  public boolean containsValue(boolean val){  for (  NSObject o : dict.values()) {    if (o.getClass().equals(NSNumber.class)) {      NSNumber num=(NSNumber)o;      if (num.isBoolean() && num.boolValue() == val)       return true;    }  }  return false;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr streetAttr;  boolean state;  doc=(Document)load("staff",true);  addressList=doc.getElementsByTagName("address");  testNode=addressList.item(2);  ((Element)testNode).setAttribute("street","Yes");  attributes=testNode.getAttributes();  streetAttr=(Attr)attributes.getNamedItem("street");  state=streetAttr.getSpecified();  assertTrue("streetSpecified",state);}  }
class C{  protected void reportInvalidBounds(final AnnotatedTypeMirror type,final Tree tree){  final String label;  final AnnotatedTypeMirror upperBound;  final AnnotatedTypeMirror lowerBound;switch (type.getKind()) {case TYPEVAR:    label="type parameter";  upperBound=((AnnotatedTypeVariable)type).getUpperBound();lowerBound=((AnnotatedTypeVariable)type).getLowerBound();break;case WILDCARD:label="wildcard";upperBound=((AnnotatedWildcardType)type).getExtendsBound();lowerBound=((AnnotatedWildcardType)type).getSuperBound();break;default :ErrorReporter.errorAbort("Type is not bounded.\n" + "type=" + type + "\n"+ "tree="+ tree);label=null;upperBound=null;lowerBound=null;}checker.report(Result.failure("bound.type.incompatible",label,type.toString(),upperBound.toString(true),lowerBound.toString(true)),tree);isValid=false;}  }
class C{  @Override protected boolean operateOnPartitionedRegion(DistributionManager dm,PartitionedRegion r,long startTime){  if (logger.isTraceEnabled(LogMarker.DM)) {    logger.trace(LogMarker.DM,"PartitionedRegionFunctionResultStreamerMessage operateOnRegion: {}",r.getFullPath());  }  if (this.context.getFunction() == null) {    sendReply(getSender(),getProcessorId(),dm,new ReplyException(new FunctionException(LocalizedStrings.ExecuteFunction_FUNCTION_NAMED_0_IS_NOT_REGISTERED.toLocalizedString(this.context.getFunctionId()))),r,startTime);    return false;  }  PartitionedRegionDataStore ds=r.getDataStore();  if (ds != null) {    ds.executeOnDataStore(context.getFilter(),context.getFunction(),context.getArgs(),getProcessorId(),context.getBucketSet(),context.isReExecute(),this,startTime,null,0);    if (!this.replyLastMsg && context.getFunction().hasResult()) {      sendReply(getSender(),getProcessorId(),dm,new ReplyException(new FunctionException(LocalizedStrings.ExecuteFunction_THE_FUNCTION_0_DID_NOT_SENT_LAST_RESULT.toString(context.getFunction().getId()))),r,startTime);      return false;    }  } else {    throw new InternalError("PartitionedRegionFunctionResultStreamerMessage sent to an accessor vm :" + dm.getId().getId());  }  return false;}  }
class C{  public void test_notSoSimpleIsolatedReset(){  Journal store=(Journal)getStore();  try {    RWStrategy bs=(RWStrategy)store.getBufferStrategy();    final IAllocationContext isolated=bs.newAllocationContext(true);    final long addr=bs.write(randomData(78));    final long addr2=bs.write(randomData(78));    final long addr5=bs.write(randomData(78));    assertTrue(bs.inWriteCache(addr));    store.commit();    bs.delete(addr);    final long addr3=bs.write(randomData(78));    assertTrue(bs.inWriteCache(addr3));    bs.delete(addr2,isolated);    final long addr4=bs.write(randomData(78),isolated);    assertTrue(bs.inWriteCache(addr4));    bs.delete(addr5);    final long addr6=bs.write(randomData(78));    assertTrue(bs.inWriteCache(addr6));    bs.abort();    assertTrue(bs.inWriteCache(addr));    assertFalse(bs.inWriteCache(addr3));    assertFalse(bs.inWriteCache(addr6));    assertTrue(bs.inWriteCache(addr4));    try {      bs.read(addr3);      fail("Exception expected");    } catch (    IllegalArgumentException e) {    }    try {      bs.read(addr6);      fail("Exception expected");    } catch (    IllegalArgumentException e) {    }    bs.detachContext(isolated);    store.commit();    assertTrue(bs.isCommitted(addr));    assertTrue(bs.isCommitted(addr4));    assertTrue(bs.isCommitted(addr5));    assertFalse(bs.isCommitted(addr2));  }  finally {    store.destroy();  }}  }
class C{  public final long bytesLoaded(){  return dataSourceStream.getLoadPosition();}  }
class C{  public synchronized void close(){  flush();  Enumeration e=logs.elements();  while (e.hasMoreElements()) {    Log log=(Log)e.nextElement();    if (!log.isLoggingToSystemOut)     log.writer.close();  }}  }
class C{  public JGeneralNames(String title){  this.title=title;  initComponents();}  }
class C{  public boolean isVisible(){  return visible;}  }
class C{  @Override public BufferedImage dataToRGB(final byte[] data,final int w,final int h){  return createImage(w,h,data);}  }
class C{  public ConcurrentIndexMap(int initialCapacity){  this.array=new Object[initialCapacity];}  }
class C{  private Composite createComposite(Composite parent,int numColumns){  Composite composite=new Composite(parent,SWT.NULL);  GridLayout layout=new GridLayout();  layout.numColumns=numColumns;  layout.makeColumnsEqualWidth=false;  layout.marginHeight=0;  layout.marginWidth=0;  composite.setLayout(layout);  GridData data=new GridData(SWT.FILL,SWT.FILL,true,false);  composite.setLayoutData(data);  return composite;}  }
class C{  public static URI createUriFromServerSet(ServerSet serverSet,String path,String protocol) throws URISyntaxException {  return createUriFromServerSet(serverSet.getServers(),path,protocol);}  }
class C{  public boolean isConstant(){  return value != null;}  }
class C{  public static double distanceToNearestSolution(Problem problem,Solution solution,NondominatedPopulation population){  double minimum=Double.POSITIVE_INFINITY;  for (int i=0; i < population.size(); i++) {    minimum=Math.min(minimum,euclideanDistance(problem,solution,population.get(i)));  }  return minimum;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document docImp;  Node ownerElement;  Element element;  Attr attr;  Attr attrImp;  NodeList addresses;  doc=(Document)load("staffNS",false);  docImp=(Document)load("staff",false);  addresses=doc.getElementsByTagNameNS("http://www.nist.gov","address");  element=(Element)addresses.item(1);  assertNotNull("empAddressNotNull",element);  attr=element.getAttributeNodeNS("http://www.nist.gov","zone");  attrImp=(Attr)docImp.importNode(attr,true);  ownerElement=attrImp.getOwnerElement();  assertNull("attrgetownerelement04",ownerElement);}  }
class C{  public E peek(){  return elements.get(elements.size() - 1);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static byte[] readFileToBytes(File file){  if (null == file) {    return null;  }  FileInputStream fileInput=null;  ByteArrayBuffer content=new ByteArrayBuffer(BUF_SIZE);  try {    fileInput=new FileInputStream(file);    byte[] buf=new byte[BUF_SIZE];    while (fileInput.read(buf) != -1) {      content.append(buf,0,BUF_SIZE);      buf=new byte[BUF_SIZE];    }  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  SecurityException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  } finally {    if (fileInput != null) {      try {        fileInput.close();      } catch (      IOException e) {        e.printStackTrace();      }    }  }  return content.toByteArray();}  }
class C{  protected boolean intersects(final double x,final double y,final double z){  if (isNull()) {    return false;  }  return intersects(x,y) && !(z < minz || z > maxz);}  }
class C{  protected Request(URI uri) throws URISyntaxException {  this(uri,null);}  }
class C{  public TextEditProcessor(Document document,TextEdit root,int style){  this(document,root,style,false);}  }
class C{  public void init() throws ServletException {}  }
class C{  public void addImageSharingInvitationRejected(ContactId contact,MmContent content,ReasonCode reasonCode,long timestamp){  String sessionId=SessionIdGenerator.getNewId();  mRichCallLog.addImageSharing(sessionId,contact,Direction.INCOMING,content,ImageSharing.State.REJECTED,reasonCode,timestamp);  mBroadcaster.broadcastInvitation(sessionId);}  }
class C{  public void load(URL url,String baseURI,RDFFormat dataFormat,RDFHandler rdfHandler) throws IOException, RDFParseException, RDFHandlerException {  if (baseURI == null) {    baseURI=url.toExternalForm();  }  URLConnection con=url.openConnection();  if (dataFormat != null) {    for (    String mimeType : dataFormat.getMIMETypes()) {      con.addRequestProperty("Accept",mimeType);    }  } else {    Set<RDFFormat> rdfFormats=RDFParserRegistry.getInstance().getKeys();    List<String> acceptParams=RDFFormat.getAcceptParams(rdfFormats,true,null);    for (    String acceptParam : acceptParams) {      con.addRequestProperty("Accept",acceptParam);    }  }  try (InputStream in=con.getInputStream()){    if (dataFormat == null) {      String mimeType=con.getContentType();      int semiColonIdx=mimeType.indexOf(';');      if (semiColonIdx >= 0) {        mimeType=mimeType.substring(0,semiColonIdx);      }      dataFormat=Rio.getParserFormatForMIMEType(mimeType).orElseGet(null);    }    load(in,baseURI,dataFormat,rdfHandler);  } }  }
class C{  public void processServerResponse(int response,com.google.android.vending.licensing.ResponseData rawData){  if (response != Policy.RETRY) {    setRetryCount(0);  } else {    setRetryCount(mRetryCount + 1);  }  if (response == Policy.LICENSED) {    Map<String,String> extras=decodeExtras(rawData.extra);    mLastResponse=response;    setValidityTimestamp(Long.toString(System.currentTimeMillis() + MILLIS_PER_MINUTE));    Set<String> keys=extras.keySet();    for (    String key : keys) {      if (key.equals("VT")) {        setValidityTimestamp(extras.get(key));      } else       if (key.equals("GT")) {        setRetryUntil(extras.get(key));      } else       if (key.equals("GR")) {        setMaxRetries(extras.get(key));      } else       if (key.startsWith("FILE_URL")) {        int index=Integer.parseInt(key.substring("FILE_URL".length())) - 1;        setExpansionURL(index,extras.get(key));      } else       if (key.startsWith("FILE_NAME")) {        int index=Integer.parseInt(key.substring("FILE_NAME".length())) - 1;        setExpansionFileName(index,extras.get(key));      } else       if (key.startsWith("FILE_SIZE")) {        int index=Integer.parseInt(key.substring("FILE_SIZE".length())) - 1;        setExpansionFileSize(index,Long.parseLong(extras.get(key)));      }    }  } else   if (response == Policy.NOT_LICENSED) {    setValidityTimestamp(DEFAULT_VALIDITY_TIMESTAMP);    setRetryUntil(DEFAULT_RETRY_UNTIL);    setMaxRetries(DEFAULT_MAX_RETRIES);  }  setLastResponse(response);  mPreferences.commit();}  }
class C{  public synchronized void leave() throws Exception {  leave(-1,null);}  }
class C{  public MultiProgressMonitor(final OutputStream out,final String taskName,long maxIntervalTime,TimeUnit maxIntervalUnit){  this.out=out;  this.taskName=taskName;  maxIntervalNanos=NANOSECONDS.convert(maxIntervalTime,maxIntervalUnit);}  }
class C{  public static boolean hasExtension(String extension){  if (extension == null || extension.isEmpty()) {    return false;  }  return extensionToMimeTypeMap.containsKey(extension);}  }
class C{  private Token<HtmlTokenType> parseTagAttributes(FilePosition start,List<? super AttrStub> attrs,OpenElementStack out) throws ParseException {  Token<HtmlTokenType> last;  tokloop:   while (true) {    if (tokens.isEmpty()) {      throw new ParseException(new Message(DomParserMessageType.UNCLOSED_TAG,start));    }    last=tokens.peek();switch (last.type) {case TAGEND:      tokens.advance();    break tokloop;case ATTRNAME:  AttrStub a=parseAttrib(out);if (a != null) {  attrs.add(a);}break;default :throw new ParseException(new Message(MessageType.MALFORMED_XHTML,FilePosition.span(start,last.pos),MessagePart.Factory.valueOf(last.text)));}}return last;}  }
class C{  private void processNewLedgerEntry(final LedgerReadPosition readPosition,final LedgerEntry ledgerEntry,final String reason,boolean envelopeEntries,long startSequenceId){  try {    Entry.Reader reader=Entry.newBuilder().setLogSegmentInfo(readPosition.getLogSegmentSequenceNumber(),startSequenceId).setEntryId(ledgerEntry.getEntryId()).setEnvelopeEntry(envelopeEntries).deserializeRecordSet(deserializeRecordSet).setInputStream(ledgerEntry.getEntryInputStream()).buildReader();    while (true) {      LogRecordWithDLSN record=reader.nextRecord();      if (null == record) {        break;      }      if (lastReadAheadDLSN.compareTo(record.getDlsn()) >= 0) {        LOG.error("Out of order reads last {} : curr {}",lastReadAheadDLSN,record.getDlsn());        throw new LogReadException("Out of order reads");      }      lastReadAheadDLSN=record.getDlsn();      if (record.isControl()) {        continue;      }      lastReadAheadUserDLSN=lastReadAheadDLSN;      if (minActiveDLSN.get().compareTo(record.getDlsn()) > 0) {        continue;      }      if (traceDeliveryLatencyEnabled && !suppressDeliveryLatency) {        long currentMs=System.currentTimeMillis();        long deliveryMs=currentMs - record.getTransactionId();        if (deliveryMs >= 0) {          readAheadDeliveryLatencyStat.registerSuccessfulEvent(deliveryMs);        } else {          negativeReadAheadDeliveryLatencyStat.registerSuccessfulEvent(-deliveryMs);        }        if (deliveryMs > deliveryLatencyWarnThresholdMillis) {          LOG.warn("Record {} for stream {} took long time to deliver : publish time = {}, available time = {}, delivery time = {}, reason = {}.",new Object[]{record.getDlsn(),streamName,record.getTransactionId(),currentMs,deliveryMs,reason});        }      }      readAheadRecords.add(record);      cacheBytes.addAndGet(record.getPayload().length);    }  } catch (  InvalidEnvelopedEntryException ieee) {    alertStatsLogger.raise("Found invalid enveloped entry on stream {} : ",streamName,ieee);    setLastException(ieee);  }catch (  IOException exc) {    setLastException(exc);  }}  }
class C{  static int[] buildDoesImplement(RVMClass t){  if (t.isJavaLangObjectType()) {    return MemoryManager.newNonMovingIntArray(MIN_DOES_IMPLEMENT_SIZE);  }  RVMClass[] superInterfaces=t.getDeclaredInterfaces();  if (!t.isInterface() && superInterfaces.length == 0) {    return t.getSuperClass().getDoesImplement();  }  int size;  if (t.isInterface()) {    size=Math.max(MIN_DOES_IMPLEMENT_SIZE,t.getDoesImplementIndex() + 1);  } else {    size=t.getSuperClass().getDoesImplement().length;  }  for (  RVMClass superInterface : superInterfaces) {    size=Math.max(size,superInterface.getDoesImplement().length);  }  int[] mine=MemoryManager.newNonMovingIntArray(size);  if (t.isInterface()) {    mine[t.getDoesImplementIndex()]=t.getDoesImplementBitMask();  } else {    int[] parent=t.getSuperClass().getDoesImplement();    for (int j=0; j < parent.length; j++) {      mine[j]|=parent[j];    }  }  for (  RVMClass superInterface : superInterfaces) {    int[] parent=superInterface.getDoesImplement();    for (int j=0; j < parent.length; j++) {      mine[j]|=parent[j];    }  }  return mine;}  }
class C{  public static HashMap<LabelSet,Integer> countCombinationsSparseSubset(Instances D,int indices[]){  HashMap<LabelSet,Integer> map=new HashMap<LabelSet,Integer>();  for (int i=0; i < D.numInstances(); i++) {    LabelSet m=new LabelSet(MLUtils.toSubIndicesSet(D.instance(i),indices));    map.put(m,map.containsKey(m) ? map.get(m) + 1 : 1);  }  return map;}  }
class C{  @Override public void writeEdge(final OutputStream outputStream,final Edge e) throws IOException {  throw Io.Exceptions.writerFormatIsForFullGraphSerializationOnly(this.getClass());}  }
class C{  public ExtensionFileFilterWithClass(String[] extensions,String description,String classname){  super(extensions,description);  m_Classname=classname;}  }
class C{  public byte[] createImage(Projection proj,int scaledWidth,int scaledHeight){  return createImage(proj,scaledWidth,scaledHeight,0xFFFFFFFF);}  }
class C{  public NbtTagFloat(String name){  super(name);}  }
class C{  private void prepareRpJournals(RPProtectionRecommendation rpProtectionRec,Project project,BlockConsistencyGroup consistencyGroup,VirtualPool vpool,VirtualPool originalVpool,VolumeCreate param,Integer numberOfVolumesInRequest,String newVolumeLabel,boolean isChangeVpoolForProtectedVolume,VirtualPoolCapabilityValuesWrapper capabilities,URI protectionSystemURI,TaskList taskList,String task,List<VolumeDescriptor> descriptors,List<URI> volumeURIs,StringBuffer volumeInfoBuffer,String sourceCopyName,String standbySourceCopyName) throws Exception {  Volume sourceJournal=null;  Volume standbyJournal=null;  List<Volume> cgSourceVolumes=new ArrayList<Volume>();  List<Volume> cgTargetVolumes=new ArrayList<Volume>();  boolean journalOnlyCreate=capabilities.getAddJournalCapacity();  if (!journalOnlyCreate) {    cgSourceVolumes=RPHelper.getCgVolumes(_dbClient,consistencyGroup.getId(),Volume.PersonalityTypes.SOURCE.toString());    cgTargetVolumes=RPHelper.getCgVolumes(_dbClient,consistencyGroup.getId(),Volume.PersonalityTypes.TARGET.toString());    if (!cgSourceVolumes.isEmpty()) {      boolean isAdditionalSourceJournalRequired=_rpHelper.isAdditionalJournalRequiredForRPCopy(vpool.getJournalSize(),consistencyGroup,param.getSize(),numberOfVolumesInRequest,sourceCopyName);      if (!isAdditionalSourceJournalRequired) {        _log.info(String.format("Re-use existing Source Journal for copy [%s]",sourceCopyName));        List<Volume> existingSourceJournals=RPHelper.findExistingJournalsForCopy(_dbClient,consistencyGroup.getId(),sourceCopyName);        sourceJournal=existingSourceJournals.get(0);        _log.info(String.format("Existing Primary Source Journal: [%s] (%s)",sourceJournal.getLabel(),sourceJournal.getId()));        if (VirtualPool.vPoolSpecifiesMetroPoint(vpool) && !isChangeVpoolForProtectedVolume) {          _log.info(String.format("Re-use existing Standby Journal for copy [%s]",standbySourceCopyName));          List<Volume> existingStandbyJournals=RPHelper.findExistingJournalsForCopy(_dbClient,consistencyGroup.getId(),standbySourceCopyName);          standbyJournal=existingStandbyJournals.get(0);          _log.info(String.format("Existing Standby Source Journal: [%s] (%s)",standbyJournal.getLabel(),standbyJournal.getId()));        }      }    }  }  if (!isChangeVpoolForProtectedVolume && (sourceJournal == null) && rpProtectionRec.getSourceJournalRecommendation() != null) {    _log.info("Create Active Source Journal...");    VirtualArray varray=_dbClient.queryObject(VirtualArray.class,rpProtectionRec.getSourceJournalRecommendation().getVirtualArray());    int numberOfJournalVolumesInRequest=rpProtectionRec.getSourceJournalRecommendation().getResourceCount();    rpProtectionRec.getSourceJournalRecommendation().setResourceCount(1);    for (int volumeCount=0; volumeCount < numberOfJournalVolumesInRequest; volumeCount++) {      String lockKey=new StringBuilder(consistencyGroup.getLabel()).append("-").append(varray.getLabel()).toString();      InterProcessLockHolder lock=null;      try {        _log.info("Attempting to acquire lock: " + lockKey);        lock=InterProcessLockHolder.acquire(_coordinator,lockKey,_log,LOCK_WAIT_MILLISECONDS);        String journalName=_rpHelper.createJournalVolumeName(varray,consistencyGroup);        sourceJournal=createRecoverPointVolume(rpProtectionRec.getSourceJournalRecommendation(),journalName,project,capabilities,consistencyGroup,param,protectionSystemURI,Volume.PersonalityTypes.METADATA,JOURNAL_RSET,null,null,taskList,task,sourceCopyName,descriptors,null,false,false,true);      }  finally {        if (lock != null) {          lock.close();        }      }      volumeURIs.add(sourceJournal.getId());      volumeInfoBuffer.append(logVolumeInfo(sourceJournal));    }  }  if (standbyJournal == null && rpProtectionRec.getStandbyJournalRecommendation() != null) {    _log.info("Create Standby Source Journal...");    VirtualArray varray=_dbClient.queryObject(VirtualArray.class,rpProtectionRec.getStandbyJournalRecommendation().getVirtualArray());    int numberOfJournalVolumesInRequest=rpProtectionRec.getStandbyJournalRecommendation().getResourceCount();    rpProtectionRec.getStandbyJournalRecommendation().setResourceCount(1);    for (int volumeCount=0; volumeCount < numberOfJournalVolumesInRequest; volumeCount++) {      String lockKey=new StringBuilder(consistencyGroup.getLabel()).append("-").append(varray.getLabel()).toString();      InterProcessLockHolder lock=null;      try {        _log.info("Attempting to acquire lock: " + lockKey);        lock=InterProcessLockHolder.acquire(_coordinator,lockKey,_log,LOCK_WAIT_MILLISECONDS);        String journalName=_rpHelper.createJournalVolumeName(varray,consistencyGroup);        standbyJournal=createRecoverPointVolume(rpProtectionRec.getStandbyJournalRecommendation(),journalName,project,capabilities,consistencyGroup,param,protectionSystemURI,Volume.PersonalityTypes.METADATA,JOURNAL_RSET,null,null,taskList,task,standbySourceCopyName,descriptors,null,false,false,true);      }  finally {        if (lock != null) {          lock.close();        }      }      volumeURIs.add(standbyJournal.getId());      volumeInfoBuffer.append(logVolumeInfo(standbyJournal));    }  }  if (!isChangeVpoolForProtectedVolume && rpProtectionRec.getTargetJournalRecommendations() != null && !rpProtectionRec.getTargetJournalRecommendations().isEmpty()) {    for (    RPRecommendation targetJournalRec : rpProtectionRec.getTargetJournalRecommendations()) {      VirtualArray targetJournalVarray=_dbClient.queryObject(VirtualArray.class,targetJournalRec.getVirtualArray());      VirtualArray targetCopyVarray=getProtectionVarray(rpProtectionRec,targetJournalRec.getInternalSiteName());      if (targetCopyVarray == null) {        targetCopyVarray=targetJournalVarray;      }      if (!cgTargetVolumes.isEmpty() && !capabilities.getAddJournalCapacity()) {        VpoolProtectionVarraySettings protectionSettings=_rpHelper.getProtectionSettings(originalVpool,targetCopyVarray);        String targetCopyName=targetJournalRec.getRpCopyName();        if (targetCopyName == null) {          targetCopyName=RPHelper.getCgCopyName(_dbClient,consistencyGroup,targetCopyVarray.getId(),false);        }        boolean isAdditionalTargetJournalRequired=_rpHelper.isAdditionalJournalRequiredForRPCopy(protectionSettings.getJournalSize(),consistencyGroup,param.getSize(),numberOfVolumesInRequest,targetCopyName);        if (!isAdditionalTargetJournalRequired) {          _log.info(String.format("Re-use existing Target Journal for copy [%s]",targetCopyName));          List<Volume> existingTargetJournals=RPHelper.findExistingJournalsForCopy(_dbClient,consistencyGroup.getId(),targetCopyName);          Volume existingTargetJournalVolume=existingTargetJournals.get(0);          _log.info(String.format("Existing Target Journal: [%s] (%s)",existingTargetJournalVolume.getLabel(),existingTargetJournalVolume.getId()));          continue;        }      }      _log.info(String.format("Create Target Journal (%s)...",targetJournalVarray.getLabel()));      int numberOfJournalVolumesInRequest=targetJournalRec.getResourceCount();      targetJournalRec.setResourceCount(1);      for (int volumeCount=0; volumeCount < numberOfJournalVolumesInRequest; volumeCount++) {        String lockKey=new StringBuilder(consistencyGroup.getLabel()).append("-").append(targetCopyVarray.getLabel()).toString();        InterProcessLockHolder lock=null;        try {          _log.info("Attempting to acquire lock: " + lockKey);          lock=InterProcessLockHolder.acquire(_coordinator,lockKey,_log,LOCK_WAIT_MILLISECONDS);          String journalName=_rpHelper.createJournalVolumeName(targetCopyVarray,consistencyGroup);          Volume targetJournalVolume=createRecoverPointVolume(targetJournalRec,journalName,project,capabilities,consistencyGroup,param,protectionSystemURI,Volume.PersonalityTypes.METADATA,JOURNAL_RSET,null,null,taskList,task,targetJournalRec.getRpCopyName(),descriptors,null,false,false,false);          volumeURIs.add(targetJournalVolume.getId());          volumeInfoBuffer.append(logVolumeInfo(targetJournalVolume));        }  finally {          if (lock != null) {            lock.close();          }        }      }    }  }}  }
class C{  private void raster(){  updateRasterUbo();  glEnable(GL_DEPTH_TEST);  glUseProgram(rasterProgram);  glBindBufferBase(GL_UNIFORM_BUFFER,rasterUboBinding,ubo);  glBindFramebuffer(GL_FRAMEBUFFER,fbo);  glClear(GL_DEPTH_BUFFER_BIT);  glBindVertexArray(vaoScene);  glDrawArraysInstanced(GL_TRIANGLES,0,6 * 6,boxes.length / 2);  glBindVertexArray(0);  glBindFramebuffer(GL_FRAMEBUFFER,0);  glBindBufferBase(GL_UNIFORM_BUFFER,rasterUboBinding,0);  glUseProgram(0);}  }
class C{  public static boolean isXML11NCNameStart(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_NCNAME_START) != 0) || (0x10000 <= c && c < 0xF0000);}  }
class C{  private static void stringbufferSubstitute() throws Exception {  String blah="zzzblahzzz";  Pattern p=Pattern.compile("blah");  Matcher m=p.matcher(blah);  StringBuffer result=new StringBuffer();  try {    m.appendReplacement(result,"blech");    failCount++;  } catch (  IllegalStateException e) {  }  m.find();  m.appendReplacement(result,"blech");  if (!result.toString().equals("zzzblech"))   failCount++;  m.appendTail(result);  if (!result.toString().equals("zzzblechzzz"))   failCount++;  blah="zzzabcdzzz";  p=Pattern.compile("(ab)(cd)*");  m=p.matcher(blah);  result=new StringBuffer();  try {    m.appendReplacement(result,"$1");    failCount++;  } catch (  IllegalStateException e) {  }  m.find();  m.appendReplacement(result,"$1");  if (!result.toString().equals("zzzab"))   failCount++;  m.appendTail(result);  if (!result.toString().equals("zzzabzzz"))   failCount++;  blah="zzzabcdcdefzzz";  p=Pattern.compile("(ab)(cd)*(ef)");  m=p.matcher(blah);  result=new StringBuffer();  try {    m.appendReplacement(result,"$1w$2w$3");    failCount++;  } catch (  IllegalStateException e) {  }  m.find();  m.appendReplacement(result,"$1w$2w$3");  if (!result.toString().equals("zzzabwcdwef"))   failCount++;  m.appendTail(result);  if (!result.toString().equals("zzzabwcdwefzzz"))   failCount++;  blah="zzzabcdzzzabcddzzzabcdzzz";  p=Pattern.compile("(ab)(cd*)");  m=p.matcher(blah);  result=new StringBuffer();  try {    m.appendReplacement(result,"$1");    failCount++;  } catch (  IllegalStateException e) {  }  m.find();  m.appendReplacement(result,"$1");  if (!result.toString().equals("zzzab"))   failCount++;  m.find();  m.find();  m.appendReplacement(result,"$2");  if (!result.toString().equals("zzzabzzzabcddzzzcd"))   failCount++;  m.appendTail(result);  if (!result.toString().equals("zzzabzzzabcddzzzcdzzz"))   failCount++;  blah="zzzabcdcdefzzz";  p=Pattern.compile("(ab)(cd)*(ef)");  m=p.matcher(blah);  result=new StringBuffer();  m.find();  m.appendReplacement(result,"$1w\\$2w$3");  if (!result.toString().equals("zzzabw$2wef"))   failCount++;  m.appendTail(result);  if (!result.toString().equals("zzzabw$2wefzzz"))   failCount++;  blah="zzzabcdcdefzzz";  p=Pattern.compile("(ab)(cd)*(ef)");  m=p.matcher(blah);  result=new StringBuffer();  m.find();  try {    m.appendReplacement(result,"$1w$5w$3");    failCount++;  } catch (  IndexOutOfBoundsException ioobe) {  }  blah="zzz123456789101112zzz";  p=Pattern.compile("(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)");  m=p.matcher(blah);  result=new StringBuffer();  m.find();  m.appendReplacement(result,"$1w$11w$3");  if (!result.toString().equals("zzz1w11w3"))   failCount++;  blah="zzzabcdcdefzzz";  p=Pattern.compile("(ab)(cd)*(ef)");  m=p.matcher(blah);  result=new StringBuffer();  m.find();  m.appendReplacement(result,"$1w$15w$3");  if (!result.toString().equals("zzzabwab5wef"))   failCount++;  blah=toSupplementaries("zzzblahzzz");  p=Pattern.compile(toSupplementaries("blah"));  m=p.matcher(blah);  result=new StringBuffer();  try {    m.appendReplacement(result,toSupplementaries("blech"));    failCount++;  } catch (  IllegalStateException e) {  }  m.find();  m.appendReplacement(result,toSupplementaries("blech"));  if (!result.toString().equals(toSupplementaries("zzzblech")))   failCount++;  m.appendTail(result);  if (!result.toString().equals(toSupplementaries("zzzblechzzz")))   failCount++;  blah=toSupplementaries("zzzabcdzzz");  p=Pattern.compile(toSupplementaries("(ab)(cd)*"));  m=p.matcher(blah);  result=new StringBuffer();  try {    m.appendReplacement(result,"$1");    failCount++;  } catch (  IllegalStateException e) {  }  m.find();  m.appendReplacement(result,"$1");  if (!result.toString().equals(toSupplementaries("zzzab")))   failCount++;  m.appendTail(result);  if (!result.toString().equals(toSupplementaries("zzzabzzz")))   failCount++;  blah=toSupplementaries("zzzabcdcdefzzz");  p=Pattern.compile(toSupplementaries("(ab)(cd)*(ef)"));  m=p.matcher(blah);  result=new StringBuffer();  try {    m.appendReplacement(result,toSupplementaries("$1w$2w$3"));    failCount++;  } catch (  IllegalStateException e) {  }  m.find();  m.appendReplacement(result,toSupplementaries("$1w$2w$3"));  if (!result.toString().equals(toSupplementaries("zzzabwcdwef")))   failCount++;  m.appendTail(result);  if (!result.toString().equals(toSupplementaries("zzzabwcdwefzzz")))   failCount++;  blah=toSupplementaries("zzzabcdzzzabcddzzzabcdzzz");  p=Pattern.compile(toSupplementaries("(ab)(cd*)"));  m=p.matcher(blah);  result=new StringBuffer();  try {    m.appendReplacement(result,"$1");    failCount++;  } catch (  IllegalStateException e) {  }  m.find();  m.appendReplacement(result,"$1");  if (!result.toString().equals(toSupplementaries("zzzab")))   failCount++;  m.find();  m.find();  m.appendReplacement(result,"$2");  if (!result.toString().equals(toSupplementaries("zzzabzzzabcddzzzcd")))   failCount++;  m.appendTail(result);  if (!result.toString().equals(toSupplementaries("zzzabzzzabcddzzzcdzzz")))   failCount++;  blah=toSupplementaries("zzzabcdcdefzzz");  p=Pattern.compile(toSupplementaries("(ab)(cd)*(ef)"));  m=p.matcher(blah);  result=new StringBuffer();  m.find();  m.appendReplacement(result,toSupplementaries("$1w\\$2w$3"));  if (!result.toString().equals(toSupplementaries("zzzabw$2wef")))   failCount++;  m.appendTail(result);  if (!result.toString().equals(toSupplementaries("zzzabw$2wefzzz")))   failCount++;  blah=toSupplementaries("zzzabcdcdefzzz");  p=Pattern.compile(toSupplementaries("(ab)(cd)*(ef)"));  m=p.matcher(blah);  result=new StringBuffer();  m.find();  try {    m.appendReplacement(result,toSupplementaries("$1w$5w$3"));    failCount++;  } catch (  IndexOutOfBoundsException ioobe) {  }  blah=toSupplementaries("zzz123456789101112zzz");  p=Pattern.compile("(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)");  m=p.matcher(blah);  result=new StringBuffer();  m.find();  m.appendReplacement(result,toSupplementaries("$1w$11w$3"));  if (!result.toString().equals(toSupplementaries("zzz1w11w3")))   failCount++;  blah=toSupplementaries("zzzabcdcdefzzz");  p=Pattern.compile(toSupplementaries("(ab)(cd)*(ef)"));  m=p.matcher(blah);  result=new StringBuffer();  m.find();  m.appendReplacement(result,toSupplementaries("$1w$15w$3"));  if (!result.toString().equals(toSupplementaries("zzzabwab5wef")))   failCount++;  p=Pattern.compile("(abc)");  m=p.matcher("abcd");  result=new StringBuffer();  m.find();  try {    m.appendReplacement(result,("xyz$g"));    failCount++;  } catch (  IllegalArgumentException iae) {    if (result.length() != 0)     failCount++;  }  report("SB Substitution");}  }
class C{  public static int toChars(int codePoint,char[] dst,int dstIndex){  if (!isValidCodePoint(codePoint)) {    throw new IllegalArgumentException();  }  if (dst == null) {    throw new NullPointerException();  }  if (dstIndex < 0 || dstIndex >= dst.length) {    throw new IndexOutOfBoundsException();  }  if (isSupplementaryCodePoint(codePoint)) {    if (dstIndex == dst.length - 1) {      throw new IndexOutOfBoundsException();    }    int cpPrime=codePoint - 0x10000;    int high=0xD800 | ((cpPrime >> 10) & 0x3FF);    int low=0xDC00 | (cpPrime & 0x3FF);    dst[dstIndex]=(char)high;    dst[dstIndex + 1]=(char)low;    return 2;  }  dst[dstIndex]=(char)codePoint;  return 1;}  }
class C{  public ExecutorDelivery(Executor executor){  mResponsePoster=executor;}  }
class C{  public Builder addQueryStage(QueryTask queryTask){  this.task.stages.add(queryTask);  return this;}  }
class C{  public void focusSelectedRow(int selectedRow){  if (impl.getModel().getRowCount() > 0) {    focusTo(selectedRow,0);  } else {    moveFocusToNextControl();  }}  }
class C{  public Builder widthRes(int drawerWidthRes){  return this;}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public static void checkEquals(String message,BigDecimal expected,BigDecimal actual,int scale){  checkEqualsWithGivenScale(message,expected,actual,scale);}  }
class C{  public TIntStack(){  this(DEFAULT_CAPACITY);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case ExpressionsPackage.PRIMITIVE_VALUE_EXPRESSION__VALUE:    setValue((Literal)null);  return;}super.eUnset(featureID);}  }
class C{  public void addExtraInput(){  BinderAnchor arg=new BinderAnchor(this,getWrapper(),new Binder("a_" + arguments.size()));  arguments.add(arg);  argSpace.getChildren().add(arg);}  }
class C{  public static Test suite(){  return new TestSuite(RemoveByNameTest.class);}  }
class C{  private boolean moveIntoNextBlock(int position){  if (_runMode != Warrant.MODE_RUN || _idxCurrentOrder == _orders.size() - 1) {    return true;  }  if (_engineer == null) {    controlRunTrain(ABORT);    return false;  }  BlockOrder blkOrder=getBlockOrderAt(_idxCurrentOrder);  OBlock curBlock=blkOrder.getBlock();  if ((curBlock.getState() & (OBlock.OCCUPIED | OBlock.DARK)) == 0 && !_tempRunBlind) {    _engineer.setHalt(true);    log.error("checkCurrentBlock, block \"" + curBlock.getDisplayName() + "\" not occupied! warrant "+ getDisplayName(),new Exception("traceback"));    return true;  }  float availDist;  float curLen=getLength(blkOrder);  BlockSpeedInfo blkSpeedInfo=_speedTimeMap.get(curBlock.getDisplayName());  float maxSpeed=blkSpeedInfo.getMaxSpeed();switch (position) {case BEG:    availDist=curLen;  break;case MID:availDist=curLen / 2;break;case END:availDist=curLen / 20;break;default :availDist=0.0f;}String nextSpeedType=getPermissibleSpeedAt(blkOrder);blkOrder=getBlockOrderAt(_idxCurrentOrder + 1);nextSpeedType=getMinSpeedType(blkOrder,nextSpeedType);if (log.isDebugEnabled()) log.debug("moveIntoNextBlock(" + position + "): \""+ curBlock.getDisplayName()+ "\" availDist= "+ availDist+ " _curSpeedType= "+ _curSpeedType+ ". Change to speedType= "+ nextSpeedType);if (!_curSpeedType.equals(nextSpeedType)) {if (_engineer.secondGreaterThanFirst(_curSpeedType,nextSpeedType) || position == END) {if (log.isDebugEnabled()) log.debug("Immediate Speed change from " + _curSpeedType + " to "+ nextSpeedType+ "in \""+ curBlock.getDisplayName()+ "\"");_engineer.rampSpeedTo(nextSpeedType);_idxSpeedChange=_idxCurrentOrder;return true;} else if (_idxSpeedChange < _idxCurrentOrder) {float distAdj=blkOrder.getEntranceSpace();float lookAheadLen=_engineer.rampLengthForSpeedChange(maxSpeed,_curSpeedType,nextSpeedType) + distAdj;if (log.isDebugEnabled()) log.debug("Change speed for \"" + blkOrder.getBlock().getDisplayName() + "\" with maxSpeed= "+ maxSpeed+ ",  available distance= "+ availDist+ ", lookAheadLen= "+ lookAheadLen);float speed=blkSpeedInfo.getEntranceSpeed();float waitSpeed=_engineer.modifySpeed(speed,_curSpeedType);float timeRatio;if (!_curSpeedType.equals(Normal)) {timeRatio=speed / waitSpeed;} else {timeRatio=1.0f;}long waitTime=0;long speedTime=0;boolean hasSpeed=(speed > 0.0001f);float dist=availDist;float rampLen=0.0f;int startIdx=blkSpeedInfo.getFirstIndex();int endIdx=blkSpeedInfo.getLastIndex();for (int i=startIdx; i < endIdx; i++) {ThrottleSetting ts=_commands.get(i);String cmd=ts.getCommand().toUpperCase();if (hasSpeed) {speedTime+=ts.getTime() * timeRatio;} else if (dist >= rampLen && !cmd.equals("NOOP")) {waitTime+=ts.getTime() * timeRatio;}if (cmd.equals("SPEED")) {float nextSpeed=Float.parseFloat(ts.getValue());if (hasSpeed) {dist-=_engineer.getDistanceTraveled(speed,_curSpeedType,speedTime);rampLen=_engineer.rampLengthForSpeedChange(speed,_curSpeedType,nextSpeedType) + distAdj;if (dist >= rampLen) {lookAheadLen=rampLen;availDist=dist;waitSpeed=_engineer.modifySpeed(speed,_curSpeedType);waitTime+=speedTime;}}speed=_engineer.modifySpeed(nextSpeed,_curSpeedType);if (!_curSpeedType.equals(Normal)) {timeRatio=nextSpeed / speed;} else {timeRatio=1.0f;}speed=nextSpeed;hasSpeed=(speed > 0.0001f);speedTime=0;}}waitTime+=_engineer.getTimeForDistance(waitSpeed,availDist - lookAheadLen);if (log.isDebugEnabled()) log.debug("waitSpeed= " + waitSpeed + ", waitTime= "+ waitTime+ ",  available distance= "+ availDist+ ",lookAheadLen= "+ lookAheadLen);if (availDist <= lookAheadLen) {if (log.isDebugEnabled()) log.debug("!!Immediate Speed decrease!! from " + _curSpeedType + " to "+ nextSpeedType+ " in \""+ curBlock.getDisplayName()+ "\"");_engineer.rampSpeedTo(nextSpeedType);_engineer.setCurrentCommandIndex(blkSpeedInfo.getLastIndex());_idxSpeedChange=_idxCurrentOrder;return true;}CommandDelay thread=new CommandDelay(nextSpeedType,waitTime,blkSpeedInfo.getLastIndex());new Thread(thread).start();_idxSpeedChange=_idxCurrentOrder;return true;}} else {int index=_idxCurrentOrder + 1;float len=getLength(blkOrder);blkSpeedInfo=_speedTimeMap.get(blkOrder.getBlock().getDisplayName());maxSpeed=blkSpeedInfo.getMaxSpeed();nextSpeedType=getPermissibleSpeedAt(blkOrder);BlockOrder nextBlkOrder=getBlockOrderAt(index + 1);if (nextBlkOrder != null) {nextSpeedType=getMinSpeedType(nextBlkOrder,nextSpeedType);float distAdj=nextBlkOrder.getEntranceSpace();float lookAheadLen=_engineer.rampLengthForSpeedChange(maxSpeed,_curSpeedType,nextSpeedType) + distAdj;if (len < lookAheadLen && !_curSpeedType.equals(nextSpeedType)) {availDist+=len;if (_engineer.secondGreaterThanFirst(_curSpeedType,nextSpeedType)) {if (log.isDebugEnabled()) log.debug("Speed increase noted ahead from " + _curSpeedType + " to "+ nextSpeedType+ " in \""+ blkOrder.getBlock().getDisplayName()+ "\" from "+ curBlock.getDisplayName());return false;} else if (_idxSpeedChange < _idxCurrentOrder) {if (log.isDebugEnabled()) log.debug("Change speed for \"" + nextBlkOrder.getBlock().getDisplayName() + "\" with maxSpeed= "+ maxSpeed+ ",  available distance= "+ availDist+ ", lookAheadLen= "+ lookAheadLen);BlockSpeedInfo nextBlkSpeedInfo=_speedTimeMap.get(blkOrder.getBlock().getDisplayName());float speed=blkSpeedInfo.getEntranceSpeed();float waitSpeed=_engineer.modifySpeed(speed,_curSpeedType);float timeRatio;if (!_curSpeedType.equals(Normal)) {timeRatio=speed / waitSpeed;} else {timeRatio=1.0f;}long waitTime=0;long speedTime=0;boolean hasSpeed=(speed > 0.0001f);float dist=availDist;float rampLen=0.0f;int startIdx=blkSpeedInfo.getFirstIndex();int endIdx=blkSpeedInfo.getLastIndex();for (int i=startIdx; i < endIdx; i++) {ThrottleSetting ts=_commands.get(i);String cmd=ts.getCommand().toUpperCase();if (hasSpeed) {speedTime+=ts.getTime() * timeRatio;} else if (dist >= rampLen && !cmd.equals("NOOP")) {waitTime+=ts.getTime() * timeRatio;}if (cmd.equals("SPEED")) {float nextSpeed=Float.parseFloat(ts.getValue());if (hasSpeed) {  dist-=_engineer.getDistanceTraveled(speed,_curSpeedType,speedTime);  rampLen=_engineer.rampLengthForSpeedChange(speed,_curSpeedType,nextSpeedType) + distAdj;  if (dist >= rampLen) {    lookAheadLen=rampLen;    availDist=dist;    waitSpeed=_engineer.modifySpeed(speed,_curSpeedType);    waitTime+=speedTime;  }}speed=_engineer.modifySpeed(nextSpeed,_curSpeedType);if (!_curSpeedType.equals(Normal)) {  timeRatio=nextSpeed / speed;} else {  timeRatio=1.0f;}speed=nextSpeed;hasSpeed=(speed > 0.0001f);speedTime=0;}}waitTime+=_engineer.getTimeForDistance(waitSpeed,availDist - lookAheadLen);if (log.isDebugEnabled()) log.debug("waitSpeed= " + waitSpeed + ", waitTime= "+ waitTime+ ",  available distance= "+ availDist+ ",lookAheadLen= "+ lookAheadLen);if (availDist <= lookAheadLen) {if (log.isDebugEnabled()) log.debug("!!Immediate Speed decrease!! from " + _curSpeedType + " to "+ nextSpeedType+ " in \""+ curBlock.getDisplayName()+ "\"");_engineer.rampSpeedTo(nextSpeedType);_engineer.setCurrentCommandIndex(nextBlkSpeedInfo.getLastIndex());_idxSpeedChange=index;return true;}CommandDelay thread=new CommandDelay(nextSpeedType,waitTime,nextBlkSpeedInfo.getLastIndex());new Thread(thread).start();_idxSpeedChange=index;return true;}}}}if (log.isDebugEnabled()) log.debug("moveIntoNextBlock with no speed change from block \"" + curBlock.getDisplayName() + "\" - Warrant "+ getDisplayName());return false;}  }
class C{  protected int defaultNumCentroids(){  return 50;}  }
class C{  @Override public void addPropertyChangeListener(PropertyChangeListener l){  m_Support.addPropertyChangeListener(l);}  }
class C{  public RequestHandle put(Context context,String url,HttpEntity entity,String contentType,ResponseHandlerInterface responseHandler){  return sendRequest(httpClient,httpContext,addEntityToRequestBase(new HttpPut(getURI(url)),entity),contentType,responseHandler,context);}  }
class C{  final static void assertArgs(final Schema schema,final Object primaryKey,final long fromTime,final long toTime){  if (schema == null)   throw new IllegalArgumentException("schema");  if (primaryKey == null)   throw new IllegalArgumentException("primaryKey");  if (fromTime == CURRENT_ROW) {    throw new IllegalArgumentException("fromTime MAY NOT be 'CURRENT_ROW'");  }  if (fromTime < MIN_TIMESTAMP) {    throw new IllegalArgumentException("fromTime less than MIN_TIMESTAMP");  }  if (toTime != CURRENT_ROW) {    if (fromTime >= toTime) {      throw new IllegalArgumentException("from/to time out of order");    }  }}  }
class C{  @Override protected void onSaveInstanceState(@NonNull Bundle outState){  super.onSaveInstanceState(outState);  mExpandableAdapter.onSaveInstanceState(outState);  outState.putSerializable(SAVED_TEST_DATA_ITEM_LIST,mTestDataItemList);}  }
class C{  public void save(){  status=null;  dirty=true;  try {    settings.saveTargetVCenter(selectedVCenter);    dirty=false;  } catch (  Exception e) {    status=Messages.get(getDefaultLanguage(),"ui.config.status.save.failed",new Object[]{e.getMessage()});    logger.error("Failed to save load balancer settings to VMware controller database.",e);  }}  }
class C{  public static int[] mergeSort(int[] list){  return null;}  }
class C{  public int length(){  return isLeap() ? 366 : 365;}  }
class C{  private static Log4jRollingFileAppender createAppender() throws Exception {  Log4jRollingFileAppender appender=new Log4jRollingFileAppender();  appender.setLayout(new PatternLayout("[%d{ABSOLUTE}][%-5p][%t][%c{1}] %m%n"));  appender.setFile("work/log/ignite.log");  appender.setName(Log4jRollingFileAppender.class.getSimpleName());  LevelRangeFilter lvlFilter=new LevelRangeFilter();  lvlFilter.setLevelMin(Level.DEBUG);  lvlFilter.setLevelMax(Level.INFO);  appender.addFilter(lvlFilter);  return appender;}  }
class C{  public boolean equals(int C_Country_ID,int C_Region_ID,String Postal,String Postal_Add,String City,String Address1,String Address2){  if (C_Country_ID != 0 && getC_Country_ID() != C_Country_ID)   return false;  if (C_Region_ID != 0 && getC_Region_ID() != C_Region_ID)   return false;  if (!equalsNull(Postal,getPostal()))   return false;  if (!equalsNull(Postal_Add,getPostal_Add()))   return false;  if (!equalsNull(City,getCity()))   return false;  if (!equalsNull(Address1,getAddress1()))   return false;  if (!equalsNull(Address2,getAddress2()))   return false;  return true;}  }
class C{  public long length(){  return file != null ? file.length() : zipEntry.getSize();}  }
class C{  public Class<? extends DirectoryService> shardDirectory(){  return FsDirectoryService.class;}  }
class C{  public static Object unwrapSplit(HadoopSplitWrapper o){  try {    Writable w=(Writable)HadoopUtils.class.getClassLoader().loadClass(o.className()).newInstance();    w.readFields(new ObjectInputStream(new ByteArrayInputStream(o.bytes())));    return w;  } catch (  Exception e) {    throw new IllegalStateException(e);  }}  }
class C{  public String toString(){  if (keyUsages == null)   return "";  String usage="  ";  boolean first=true;  for (  ObjectIdentifier oid : keyUsages) {    if (!first) {      usage+="\n  ";    }    String result=map.get(oid);    if (result != null) {      usage+=result;    } else {      usage+=oid.toString();    }    first=false;  }  return super.toString() + "ExtendedKeyUsages [\n" + usage+ "\n]\n";}  }
class C{  protected TObjectPrototypeImpl(){  super();}  }
class C{  public ArrayIntCompressed(int[] ints){  this(ints,0,ints.length);}  }
class C{  public T caseExecutionVariable(ExecutionVariable object){  return null;}  }
class C{  void rescheduleActivityEnd(final MobsimAgent agent){  double newActivityEndTime=agent.getActivityEndTime();  AgentEntry oldEntry=removeAgentFromQueue(agent);  if (oldEntry == null) {    if (newActivityEndTime == Double.POSITIVE_INFINITY) {    } else {      activityEndsList.add(new AgentEntry(agent,newActivityEndTime));      internalInterface.registerAdditionalAgentOnLink(agent);      ((org.matsim.core.mobsim.qsim.AgentCounter)internalInterface.getMobsim().getAgentCounter()).incLiving();    }  } else   if (newActivityEndTime == Double.POSITIVE_INFINITY) {    unregisterAgentAtActivityLocation(agent);    internalInterface.getMobsim().getAgentCounter().decLiving();  } else {    activityEndsList.add(new AgentEntry(agent,newActivityEndTime));  }}  }
class C{  public static void addModule(final AbstractSQLProvider provider,final INaviAddressSpace addressSpace,final INaviModule module) throws CouldntSaveDataException {  checkArguments(provider,addressSpace);  Preconditions.checkNotNull(module,"IE01859: Module argument can not be null");  Preconditions.checkArgument(module.inSameDatabase(provider),"IE01860: Module is not part of this database");  final CConnection connection=provider.getConnection();  final int addressSpaceId=addressSpace.getConfiguration().getId();  final int moduleId=module.getConfiguration().getId();  NaviLogger.info("Adding module %s (%d) to address space %s (%d)",addressSpace.getConfiguration().getName(),addressSpaceId,module.getConfiguration().getName(),moduleId);  final String query="INSERT INTO " + CTableNames.SPACE_MODULES_TABLE + " VALUES("+ moduleId+ ", "+ addressSpaceId+ ", 0)";  try {    connection.executeUpdate(query,true);  } catch (  final SQLException e) {    throw new CouldntSaveDataException(e);  }  PostgreSQLHelpers.updateModificationDate(connection,CTableNames.ADDRESS_SPACES_TABLE,addressSpace.getConfiguration().getId());}  }
class C{  protected Node deepExport(Node n,AbstractDocument d){  super.deepExport(n,d);  AbstractEntityReference ae=(AbstractEntityReference)n;  ae.nodeName=nodeName;  return n;}  }
class C{  public ParameterPanel(){  this(0,0);}  }
class C{  public DigitalSignature(String algorithm){  try {    sha=MessageDigest.getInstance("SHA-1");    if ("RSA".equals(algorithm)) {      md5=MessageDigest.getInstance("MD5");      cipher=Cipher.getInstance("RSA/ECB/PKCS1Padding");      signature=null;    } else     if ("DSA".equals(algorithm)) {      signature=Signature.getInstance("NONEwithDSA");      cipher=null;      md5=null;    } else {      cipher=null;      signature=null;      md5=null;    }  } catch (  NoSuchAlgorithmException e) {    throw new AssertionError(e);  }catch (  NoSuchPaddingException e) {    throw new AssertionError(e);  }}  }
class C{  public void addAttribute(String uri,String localName,String rawName,String type,String value,boolean XSLAttribute) throws SAXException {  if (m_firstTagNotEmitted) {    flush();  }  m_handler.addAttribute(uri,localName,rawName,type,value,XSLAttribute);}  }
class C{  @Override protected int sizeOf(String key,Bitmap bitmap){  return getBitmapSize(bitmap);}  }
class C{  public WeakHashMap(Map t){  this(Math.max((int)(t.size() / DEFAULT_LOAD_FACTOR) + 1,16),DEFAULT_LOAD_FACTOR);  putAll(t);}  }
class C{  public void drawResultBitmap(Bitmap barcode){  resultBitmap=barcode;  invalidate();}  }
class C{  public void addPassThroughCondition(PassThroughOrGenerateRuleCondition condition){  passThroughConditions.add(condition);}  }
class C{  public AltFormat lookupName(String name){  AltFormat format=nameMap.get(name);  if (format == null && delegate != null) {    format=delegate.lookupName(name);  }  return format;}  }
class C{  public static SecretKeys generateKeyFromPassword(String password,String salt) throws GeneralSecurityException {  return generateKeyFromPassword(password,Base64.decode(salt,BASE64_FLAGS));}  }
class C{  public AverageVector average(){  try {    AverageVector output=(AverageVector)getVector(0).clone();    for (int i=1; i < size(); i++) {      AverageVector av=getVector(i);      for (int j=0; j < av.size(); j++) {        output.getAveragable(j).buildAverage(av.getAveragable(j));      }    }    return output;  } catch (  CloneNotSupportedException e) {    throw new RuntimeException("Clone of average vector is not supported: " + e.getMessage(),e);  }}  }
class C{  private Object read(InputNode node,Class expect) throws Exception {  Object item=root.read(node,expect);  Class result=item.getClass();  Class actual=entry.getType();  if (!actual.isAssignableFrom(result)) {    throw new PersistenceException("Entry %s does not match %s for %s",result,entry,type);  }  return item;}  }
class C{  public static void encodeToFile(byte[] dataToEncode,String filename) throws java.io.IOException {  if (dataToEncode == null) {    throw new NullPointerException("Data to encode was null.");  }  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.ENCODE);    bos.write(dataToEncode);  }  finally {    try {      if (bos != null) {        bos.close();      }    } catch (    Exception ignored) {    }  }}  }
class C{  protected String generateResumenConfiguracion(AccionMultientidadVO accionMultientidadVO,HttpServletRequest request) throws Exception {  ServicioAdministracion oServicio=LocalizadorServicios.getServicioAdministracion();  AccionMultientidad accionMultientidad=oServicio.getAccionMultientidad(accionMultientidadVO.getIdAccion());  ResourceBundle rb=ResourceBundle.getBundle("ieci/tecdoc/sgm/admsistema/resources/AdministracionMessage",request.getLocale());  StringBuffer resumen=new StringBuffer();  resumen.append(ABRIR_NEGRITA).append(rb.getString("acciones.multientidad.nombre")).append(SEPARADOR_CLAVE_VALOR).append(CERRAR_NEGRITA).append(accionMultientidad.getNombre()).append(SEPARADOR_LINEA);  if (!ArrayUtils.isEmpty(accionMultientidadVO.getEntidades())) {    resumen.append(ABRIR_NEGRITA).append(rb.getString("acciones.multientidad.entidades")).append(SEPARADOR_CLAVE_VALOR).append(CERRAR_NEGRITA).append(getEntidadesString(accionMultientidadVO.getEntidades(),request)).append(SEPARADOR_LINEA);  }  if (!ArrayUtils.isEmpty(accionMultientidadVO.getEntidadesOrigen())) {    resumen.append(ABRIR_NEGRITA).append(rb.getString("acciones.multientidad.entidades.origen")).append(SEPARADOR_CLAVE_VALOR).append(CERRAR_NEGRITA).append(getEntidadesString(accionMultientidadVO.getEntidadesOrigen(),request)).append(SEPARADOR_LINEA);  }  if (!ArrayUtils.isEmpty(accionMultientidadVO.getEntidadesDestino())) {    resumen.append(ABRIR_NEGRITA).append(rb.getString("acciones.multientidad.entidades.destino")).append(SEPARADOR_CLAVE_VALOR).append(CERRAR_NEGRITA).append(getEntidadesString(accionMultientidadVO.getEntidadesDestino(),request)).append(SEPARADOR_LINEA);  }  if (StringUtils.isNotEmpty(accionMultientidadVO.getFicheroTemporal())) {    resumen.append(ABRIR_NEGRITA).append(rb.getString("acciones.multientidad.fichero")).append(SEPARADOR_CLAVE_VALOR).append(CERRAR_NEGRITA).append(accionMultientidadVO.getNombreFicheroTemporal()).append(SEPARADOR_LINEA);  }  if (StringUtils.isNotEmpty(accionMultientidadVO.getOpcion())) {    resumen.append(ABRIR_NEGRITA).append(rb.getString("acciones.multientidad.opcion")).append(SEPARADOR_CLAVE_VALOR).append(CERRAR_NEGRITA).append(getOpcionString(accionMultientidadVO.getOpcion(),accionMultientidadVO.getOpcionesConfiguracion())).append(SEPARADOR_LINEA);  }  return resumen.toString();}  }
class C{  public IElementType advance() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  CharSequence zzBufferL=zzBuffer;  char[] zzBufferArrayL=zzBufferArray;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++)); else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 81:{        return RegExpTT.UNICODE_CHAR;      }case 82:    break;case 7:{    if (yystate() != CLASS2)     yypushstate(EMBRACED);    return RegExpTT.LBRACE;  }case 83:break;case 24:{return RegExpTT.COMMA;}case 84:break;case 67:{return RegExpTT.POS_LOOKAHEAD;}case 85:break;case 65:{yybegin(QUOTED_NAMED_GROUP);capturingGroupCount++;return RegExpTT.RUBY_QUOTED_NAMED_GROUP;}case 86:break;case 80:{return RegExpTT.COMMENT;}case 87:break;case 14:{return RegExpTT.STAR;}case 88:break;case 63:{yybegin(PY_COND_REF);return RegExpTT.PYTHON_COND_REF;}case 89:break;case 50:{return RegExpTT.CHAR_CLASS;}case 90:break;case 36:{handleOptions();return RegExpTT.OPTIONS_OFF;}case 91:break;case 57:{yypopstate();return RegExpTT.QUOTE_END;}case 92:break;case 35:{yybegin(YYINITIAL);return RegExpTT.GROUP_END;}case 93:break;case 42:zzMarkedPos=zzStartRead + 1;{if (allowEmptyCharacterClass) yypushstate(CLASS2); else yypushstate(CLASS1);return RegExpTT.CLASS_BEGIN;}case 94:break;case 37:{yybegin(YYINITIAL);return RegExpTT.COLON;}case 95:break;case 6:{return RegExpTT.GROUP_END;}case 96:break;case 25:{assert false : yytext();}case 97:break;case 18:{return commentMode ? com.intellij.psi.TokenType.WHITE_SPACE : RegExpTT.CHARACTER;}case 98:break;case 47:{return commentMode ? RegExpTT.CHARACTER : RegExpTT.REDUNDANT_ESCAPE;}case 99:break;case 23:{return RegExpTT.NAME;}case 100:break;case 29:{yypopstate();return RegExpTT.CLASS_END;}case 101:break;case 72:{yybegin(NAMED_GROUP);return RegExpTT.RUBY_NAMED_GROUP_REF;}case 102:break;case 34:{yybegin(YYINITIAL);return RegExpTT.BAD_CHARACTER;}case 103:break;case 53:{yypushstate(QUOTED);return RegExpTT.QUOTE_BEGIN;}case 104:break;case 40:{return RegExpTT.BAD_CHARACTER;}case 105:break;case 21:{return RegExpTT.NUMBER;}case 106:break;case 4:{return RegExpTT.DOT;}case 107:break;case 77:{return RegExpTT.NEG_LOOKBEHIND;}case 108:break;case 33:{yypopstate();if (allowCategoryShorthand) return RegExpTT.CATEGORY_SHORT_HAND; else yypushback(1);}case 109:break;case 45:{return (allowOctalNoLeadingZero ? RegExpTT.OCT_CHAR : RegExpTT.BAD_OCT_VALUE);}case 110:break;case 68:{return RegExpTT.NEG_LOOKAHEAD;}case 111:break;case 10:{return commentMode ? com.intellij.psi.TokenType.WHITE_SPACE : RegExpTT.CTRL_CHARACTER;}case 112:break;case 66:{return RegExpTT.NON_CAPT_GROUP;}case 113:break;case 73:{yybegin(QUOTED_NAMED_GROUP);return RegExpTT.RUBY_QUOTED_NAMED_GROUP_REF;}case 114:break;case 28:{if (allowNestedCharacterClasses) {yypushstate(CLASS2);return RegExpTT.CLASS_BEGIN;}return RegExpTT.CHARACTER;}case 115:break;case 19:{if (commentMode) {yypushstate(COMMENT);return RegExpTT.COMMENT;} else return RegExpTT.CHARACTER;}case 116:break;case 52:{yypushstate(PROP);return RegExpTT.PROPERTY;}case 117:break;case 8:{yypushstate(CLASS2);return RegExpTT.CLASS_BEGIN;}case 118:break;case 76:{return RegExpTT.POS_LOOKBEHIND;}case 119:break;case 20:{if (allowDanglingMetacharacters) {yypopstate();yypushback(1);} else {return RegExpTT.BAD_CHARACTER;}}case 120:break;case 78:{return RegExpTT.HEX_CHAR;}case 121:break;case 1:{handleOptions();return RegExpTT.OPTIONS_ON;}case 122:break;case 44:{if (yystate() == CLASS2) return RegExpTT.ESC_CHARACTER;while (yylength() > 2 && Integer.parseInt(yytext().toString().substring(1)) > capturingGroupCount) {yypushback(1);}return RegExpTT.BACKREF;}case 123:break;case 62:{yybegin(CLASS2);return RegExpTT.BRACKET_EXPRESSION_END;}case 124:break;case 2:{yypopstate();return RegExpTT.COMMENT;}case 125:break;case 17:{return RegExpTT.MINUS;}case 126:break;case 48:{return RegExpTT.ESC_CTRL_CHARACTER;}case 127:break;case 32:{yypopstate();yypushstate(EMBRACED);return RegExpTT.LBRACE;}case 128:break;case 13:{return RegExpTT.QUEST;}case 129:break;case 74:{yybegin(NAMED_GROUP);capturingGroupCount++;return RegExpTT.PYTHON_NAMED_GROUP;}case 130:break;case 5:{capturingGroupCount++;return RegExpTT.GROUP_BEGIN;}case 131:break;case 15:{return RegExpTT.PLUS;}case 132:break;case 70:{return RegExpTT.OCT_CHAR;}case 133:break;case 39:{yybegin(YYINITIAL);return RegExpTT.QUOTE;}case 134:break;case 31:{yypopstate();yypushback(1);}case 135:break;case 27:{yybegin(CLASS1);return RegExpTT.CARET;}case 136:break;case 58:zzMarkedPos=zzStartRead + 1;{if (allowNestedCharacterClasses) {yypushstate(CLASS1);return RegExpTT.CLASS_BEGIN;}return RegExpTT.CHARACTER;}case 137:break;case 59:{if (allowPosixBracketExpressions) {yybegin(BRACKET_EXPRESSION);return RegExpTT.BRACKET_EXPRESSION_BEGIN;} else {yypushback(1);return RegExpTT.CHARACTER;}}case 138:break;case 60:{if (!allowNestedCharacterClasses) return RegExpTT.CHARACTER;return RegExpTT.REDUNDANT_ESCAPE;}case 139:break;case 38:{yybegin(YYINITIAL);return RegExpTT.GT;}case 140:break;case 75:{yybegin(PY_NAMED_GROUP_REF);return RegExpTT.PYTHON_NAMED_GROUP_REF;}case 141:break;case 16:{return RegExpTT.UNION;}case 142:break;case 3:{return RegExpTT.CHARACTER;}case 143:break;case 41:{yybegin(OPTIONS);return RegExpTT.SET_OPTIONS;}case 144:break;case 26:{yybegin(CLASS2);return RegExpTT.CHARACTER;}case 145:break;case 71:{if (xmlSchemaMode) {yypushback(1);return RegExpTT.CHAR_CLASS;} else return RegExpTT.CTRL;}case 146:break;case 30:{return commentMode ? com.intellij.psi.TokenType.WHITE_SPACE : RegExpTT.ESC_CHARACTER;}case 147:break;case 12:{return RegExpTT.DOLLAR;}case 148:break;case 61:{if (allowNestedCharacterClasses) return RegExpTT.ANDAND; else yypushback(1);return RegExpTT.CHARACTER;}case 149:break;case 51:{if (xmlSchemaMode) return RegExpTT.CHAR_CLASS; else return StringEscapesTokenTypes.INVALID_CHARACTER_ESCAPE_TOKEN;}case 150:break;case 43:{return RegExpTT.REDUNDANT_ESCAPE;}case 151:break;case 56:{return (allowHexDigitClass || allowHorizontalWhitespaceClass ? RegExpTT.CHAR_CLASS : StringEscapesTokenTypes.INVALID_CHARACTER_ESCAPE_TOKEN);}case 152:break;case 49:{return yystate() != CLASS2 ? RegExpTT.BOUNDARY : RegExpTT.ESC_CHARACTER;}case 153:break;case 22:{yypopstate();return RegExpTT.RBRACE;}case 154:break;case 69:zzMarkedPos=zzStartRead + 1;{if (allowEmptyCharacterClass) yypushstate(CLASS2); else yypushstate(NEGATE_CLASS1);return RegExpTT.CLASS_BEGIN;}case 155:break;case 64:{yybegin(NAMED_GROUP);capturingGroupCount++;return RegExpTT.RUBY_NAMED_GROUP;}case 156:break;case 55:{return StringEscapesTokenTypes.INVALID_UNICODE_ESCAPE_TOKEN;}case 157:break;case 54:{return RegExpTT.BAD_HEX_VALUE;}case 158:break;case 9:{return StringEscapesTokenTypes.INVALID_CHARACTER_ESCAPE_TOKEN;}case 159:break;case 11:{return RegExpTT.CARET;}case 160:break;case 46:{return RegExpTT.ESC_CHARACTER;}case 161:break;case 79:{if (allowOctalNoLeadingZero) return RegExpTT.OCT_CHAR;if (yystate() == CLASS2) return RegExpTT.ESC_CHARACTER;while (yylength() > 2 && Integer.parseInt(yytext().toString().substring(1)) > capturingGroupCount) {yypushback(1);}return RegExpTT.BACKREF;}case 162:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;zzDoEOF();return null;} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public static void revealInEditor(IProject project,String className,int lineNumber,boolean activate){  IEditorPart openedEditor=openEditor(project,className,activate);  if (openedEditor != null && openedEditor instanceof ITextEditor) {    ITextEditor textEditor=(ITextEditor)openedEditor;    IDocument document=textEditor.getDocumentProvider().getDocument(textEditor.getEditorInput());    try {      textEditor.selectAndReveal(document.getLineOffset(lineNumber - 1),document.getLineLength(lineNumber - 1));    } catch (    BadLocationException e) {      error("Bad source location: line " + lineNumber + " for class "+ className);      e.printStackTrace();    }  }}  }
class C{  private String[] alphaMixedSpecial(){  return combineStringArrays(alphaMixed(),JexlStringFunctions.special);}  }
class C{  private void nextToken(){  nextToken(position);}  }
class C{  @Override public void printStackTrace(){  printStackTrace(System.err);}  }
class C{  public CDeleteAddressSpaceAction(final JFrame parent,final INaviProject project,final INaviAddressSpace[] spaces,final ITreeUpdater updater){  super("Delete Address Space");  m_parent=Preconditions.checkNotNull(parent,"IE01867: Parent argument can't be null");  m_project=Preconditions.checkNotNull(project,"IE01868: Project argument can't be null");  m_addressSpace=Preconditions.checkNotNull(spaces,"IE01869: Addres spaces argument can't be null").clone();  m_updater=Preconditions.checkNotNull(updater,"IE02338: Updater argument can not be null");  putValue(ACCELERATOR_KEY,HotKeys.DELETE_HK.getKeyStroke());  putValue(MNEMONIC_KEY,(int)"HK_MENU_DELETE_ADDRESS_SPACE".charAt(0));}  }
class C{  public CannotInvokeException(InvocationTargetException e){  super("by " + e.getTargetException().toString());  err=e.getTargetException();}  }
class C{  private void createPoints(){  int count=viewPager.getAdapter().getCount();  if (viewPager.getAdapter() instanceof InfinitePagerAdapter) {    count=((InfinitePagerAdapter)viewPager.getAdapter()).getRealCount();  }  View view=tabs.get(viewPager.getCurrentItem() % count);  springView.getHeadPoint().setX(view.getX() + view.getWidth() / 2);  springView.getHeadPoint().setY(view.getY() + view.getHeight() / 2);  springView.getFootPoint().setX(view.getX() + view.getWidth() / 2);  springView.getFootPoint().setY(view.getY() + view.getHeight() / 2);  springView.animCreate();}  }
class C{  private String signHelper(final String keyId,final String signatureAlgorithmId,final byte[] data) throws Exception {  String digestAlgorithmId=getDigestAlgorithmId(signatureAlgorithmId);  byte[] digest=calculateDigest(digestAlgorithmId,data);  SignResponse response=SignerClient.execute(new Sign(keyId,digestAlgorithmId,digest));  return encodeBase64(response.getSignature());}  }
class C{  public PickedObjectList pickShapesInRect(float x,float y,float width,float height){  PickedObjectList pickedObjects=new PickedObjectList();  if (this.isPaused) {    return pickedObjects;  }  int px=(int)Math.floor(x);  int py=(int)Math.floor(this.getHeight() - (y + height));  int pw=(int)Math.ceil(width);  int ph=(int)Math.ceil(height);  if (!this.viewport.intersects(px,py,pw,ph)) {    return pickedObjects;  }  Frame frame=Frame.obtain(this.framePool);  frame.pickedObjects=pickedObjects;  frame.pickViewport=new Viewport(px,py,pw,ph);  frame.pickViewport.intersect(this.viewport);  frame.pickMode=true;  this.renderFrame(frame);  frame.awaitDone();  return pickedObjects;}  }
class C{  protected Singleton_Impl(){  super();}  }
class C{  public void write16bit(int offset,int value){  write(offset,value >> 8);  write(offset + 1,value);}  }
class C{  public String elementName(){  return elementName;}  }
class C{  public static void sort(Comparable[] a){  int n=a.length;  Comparable[] aux=new Comparable[n];  for (int len=1; len < n; len*=2) {    for (int lo=0; lo < n - len; lo+=len + len) {      int mid=lo + len - 1;      int hi=Math.min(lo + len + len - 1,n - 1);      merge(a,aux,lo,mid,hi);    }  }  assert isSorted(a);}  }
class C{  public MarketplaceAccessTypeUneligibleForOperationException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public void writeObjectToFile(Object object,String fileString) throws IOException {  if (fileString == null) {    throw new FileNotFoundException("No file specified (fileString = null)");  }  if (!silent) {    log.info("Writing " + object.getClass().getSimpleName() + " to XML: "+ fileString);  }  String xmlString=convertObjectToXmlString(object);  BufferedWriter xmlOutput;  xmlOutput=IOUtils.getBufferedWriter(fileString);  try {    xmlOutput.write(xmlString);  }  finally {    xmlOutput.close();  }  if (!silent) {    log.info("XML written.");  }}  }
class C{  public SelectionChangeEvent(final Event e){  super(e);}  }
class C{  public static void main(String a[]){  readFile(a[0]);  System.exit(0);}  }
class C{  protected double[] calculateIntercepts(){  Solution[] extremePoints=extremePoints();  boolean degenerate=false;  double[] intercepts=new double[numberOfObjectives];  try {    double[] b=new double[numberOfObjectives];    double[][] A=new double[numberOfObjectives][numberOfObjectives];    for (int i=0; i < numberOfObjectives; i++) {      double[] objectives=(double[])extremePoints[i].getAttribute(NORMALIZED_OBJECTIVES);      b[i]=1.0;      for (int j=0; j < numberOfObjectives; j++) {        A[i][j]=objectives[j];      }    }    double[] result=lsolve(A,b);    for (int i=0; i < numberOfObjectives; i++) {      intercepts[i]=1.0 / result[i];    }  } catch (  RuntimeException e) {    degenerate=true;  }  if (!degenerate) {    for (int i=0; i < numberOfObjectives; i++) {      if (intercepts[i] < 0.001) {        degenerate=true;        break;      }    }  }  if (degenerate) {    Arrays.fill(intercepts,Double.NEGATIVE_INFINITY);    for (    Solution solution : this) {      for (int i=0; i < numberOfObjectives; i++) {        intercepts[i]=Math.max(Math.max(intercepts[i],Settings.EPS),solution.getObjective(i));      }    }  }  return intercepts;}  }
class C{  public SQLTransientException(String reason,String sqlState,int vendorCode,Throwable cause){  super(reason,sqlState,vendorCode,cause);}  }
class C{  public GitInvalidRefNameException(String message){  super(message);}  }
class C{  protected void checkMissing(Instances instances) throws Exception {  for (int i=0; i < instances.numInstances(); i++) {    Instance ins=instances.instance(i);    for (int j=0; j < ins.numValues(); j++) {      if (ins.index(j) != ins.classIndex()) {        if (ins.isMissingSparse(j)) {          throw new Exception("ERROR: KDTree can not deal with missing " + "values. Please run ReplaceMissingValues filter " + "on the dataset before passing it on to the KDTree.");        }      }    }  }}  }
class C{  void addToSubroutine(final long id,final int nbSubroutines){  if ((status & VISITED) == 0) {    status|=VISITED;    srcAndRefPositions=new int[nbSubroutines / 32 + 1];  }  srcAndRefPositions[(int)(id >>> 32)]|=(int)id;}  }
class C{  public Throwable disconnectReason(){  return disconnectReason;}  }
class C{  public int decode(String data,OutputStream out) throws IOException {  byte b1, b2;  int length=0;  int end=data.length();  while (end > 0) {    if (!ignore(data.charAt(end - 1))) {      break;    }    end--;  }  int i=0;  while (i < end) {    while (i < end && ignore(data.charAt(i))) {      i++;    }    b1=decodingTable[data.charAt(i++)];    while (i < end && ignore(data.charAt(i))) {      i++;    }    b2=decodingTable[data.charAt(i++)];    if ((b1 | b2) < 0) {      throw new IOException("invalid characters encountered in Hex string");    }    out.write((b1 << 4) | b2);    length++;  }  return length;}  }
class C{  public void removeFromParent(){  Objects.requireNonNull(parent);  parent.children.remove(this);  parent=null;}  }
class C{  public void testBottomUpSemanticsExplainHint02() throws Exception {  final ASTContainer container=new TestHelper("explainHints-bottomup02","explainHints-bottomup02.rq","explainHints.trig","explainHints-bottomup12345.srx").runTest();  assertCarriesExactlyOneExplainHintOfType(container.getOptimizedAST(),BottomUpSemanticsExplainHint.class);}  }
class C{  public ConvertLocalVariableDescriptor(String project,String description,String comment,Map arguments,int flags){  super(IJavaRefactorings.CONVERT_LOCAL_VARIABLE,project,description,comment,arguments,flags);}  }
class C{  synchronized protected void replyTimeout(){  targetSpeed=0;  avClr();  oldSpeed=0;  showSpeed();}  }
class C{  public XMLDocument(File file) throws Exception {  this();  read(file);}  }
class C{  private void startDraining(boolean overflow){  byteBuffer.flip();  if (overflow && byteBuffer.remaining() == 0) {    byteBuffer=ByteBuffer.allocate(byteBuffer.capacity() * 2);  } else {    draining=true;  }}  }
class C{  public int totalShards(){  return shardCounts.total;}  }
class C{  private void contextualShape(char[] text,int start,int count,int contextIndex){  char maxDigit=(char)0x0039;  char minDigit=(char)0x0030;  int currIndex;  if (((1 << contextIndex) & fRanges) == 0) {    currIndex=INDEX_EUROPEAN;  } else {    currIndex=contextIndex;  }  for (int ind=start; ind < start + count; ind++) {    if (minDigit <= text[ind] && text[ind] <= maxDigit) {      if (currIndex != INDEX_ETHIOPIC || text[ind] != '0') {        text[ind]=(char)(digitsLowRanges[currIndex] + text[ind]);      }    } else {      if (isCharStrong(text[ind])) {        int index=getCharIndex(text[ind]);        if (currIndex != index) {          if (((1 << index) & fRanges) != 0) {            currIndex=index;          } else {            currIndex=INDEX_EUROPEAN;          }        }      }    }  }}  }
class C{  public static void jsonArraysEquals(JSONArray a1,JSONArray a2) throws JSONException {  if (a1 != a2) {    if (a1.length() != a2.length()) {      fail("JSONArrays length differ: " + a1.length() + " / "+ a2.length());    }    for (int idx=0; idx < a1.length(); idx++) {      Object a1Value=a1.get(idx);      Object a2Value=a2.get(idx);      if (!jsonValueEquals(a1Value,a2Value)) {        fail("JSONArray '" + idx + "' values differ: "+ a1Value+ " / "+ a2Value);      }    }  }}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String whiteboxHeaderFile=null;  String whiteboxDataFile=null;  WhiteboxRaster output=null;  int i=0;  String[] imageFiles;  int numImages=0;  double noData=-32768;  int progress=0;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    String returnedHeader="";    for (i=0; i < numImages; i++) {      if (numImages > 1) {        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      GeoTiff gt=new GeoTiff(imageFiles[i]);      gt.read();      int compressionType=gt.getCompressionType();      if (compressionType != 1) {        showFeedback("GeoTiff import does not currently support compressed files.");        return;      }      boolean hasNoDataValue=gt.hasNoDataTag();      double nodata;      if (hasNoDataValue) {        nodata=gt.getNoData();      } else {        nodata=-32768;      }      int nRows=gt.getNumberRows();      int nCols=gt.getNumberColumns();      int dot=imageFiles[i].lastIndexOf(".");      String tiffExtension=imageFiles[i].substring(dot + 1);      whiteboxHeaderFile=imageFiles[i].replace(tiffExtension,"dep");      if (i == 0) {        returnedHeader=whiteboxHeaderFile;      }      whiteboxDataFile=imageFiles[i].replace(tiffExtension,"tas");      (new File(whiteboxHeaderFile)).delete();      (new File(whiteboxDataFile)).delete();      ByteOrder byteOrder=gt.getByteOrder();      WhiteboxRasterBase.DataScale myDataScale=WhiteboxRasterBase.DataScale.CONTINUOUS;      if (gt.getPhotometricInterpretation() == 2) {        myDataScale=WhiteboxRasterBase.DataScale.RGB;      }      final WhiteboxRaster wbr=new WhiteboxRaster(whiteboxHeaderFile,gt.getNorth(),gt.getSouth(),gt.getEast(),gt.getWest(),nRows,nCols,myDataScale,WhiteboxRasterBase.DataType.FLOAT,nodata,nodata);      wbr.setByteOrder(byteOrder.toString());      double z;      int oldProgress=-1;      for (int row=0; row < nRows; row++) {        for (int col=0; col < nCols; col++) {          z=gt.getValue(row,col);          if (!hasNoDataValue && (z == -32768 || z == -Float.MAX_VALUE)) {            nodata=z;            hasNoDataValue=true;            wbr.setNoDataValue(nodata);          }          wbr.setValue(row,col,z);        }        progress=(int)(100f * row / (nRows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress("Importing GeoTiff file...",progress);        }      }      wbr.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      wbr.addMetadataEntry("Created on " + new Date());      String[] metaData=gt.showInfo();      for (int a=0; a < metaData.length; a++) {        wbr.addMetadataEntry(metaData[a]);      }      wbr.close();      gt.close();    }    if (!returnedHeader.isEmpty()) {      returnData(returnedHeader);    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void init() throws Exception {  fResource.setMold("select");  fResource.addEventListener(Events.ON_SELECT,this);  delete.addEventListener(Events.ON_CLICK,this);  confirmPanel.addComponentsLeft(delete);  confirmPanel.addActionListener(Events.ON_CLICK,this);  this.appendChild(mainPanel);  mainPanel.makeNoStrip();  mainPanel.setStyle("background-color: transparent");  Rows rows=new Rows();  mainPanel.appendChild(rows);  Row row=new Row();  row.appendChild(LayoutUtils.makeRightAlign(lResource));  row.appendChild(fResource);  row.appendChild(new Label(" "));  rows.appendChild(row);  row=new Row();  row.setSpans("1, 2");  row.appendChild(LayoutUtils.makeRightAlign(lDate));  Div div=new Div();  div.appendChild(fDateFrom);  div.appendChild(fTimeFrom);  fTimeFrom.setStyle("margin-left: 1px");  row.appendChild(div);  rows.appendChild(row);  row=new Row();  row.appendChild(LayoutUtils.makeRightAlign(lQty));  row.appendChild(fQty);  row.appendChild(lUOM);  rows.appendChild(row);  row=new Row();  row.setSpans("1, 2");  row.appendChild(LayoutUtils.makeRightAlign(lName));  row.appendChild(fName);  fName.setStyle("width: 100%");  rows.appendChild(row);  row=new Row();  row.setSpans("1, 2");  row.appendChild(LayoutUtils.makeRightAlign(lDescription));  row.appendChild(fDescription);  fDescription.setMultiline(true);  fDescription.setRows(3);  fDescription.setStyle("width: 100%");  rows.appendChild(row);  row=new Row();  row.setSpans("3");  row.appendChild(new Label(" "));  rows.appendChild(row);  row=new Row();  row.setSpans("3");  row.appendChild(confirmPanel);  rows.appendChild(row);}  }
class C{  public DPrivateKeyUsagePeriod(JDialog parent){  super(parent);  setTitle(res.getString("DPrivateKeyUsagePeriod.Title"));  initComponents();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(!((Agent)stack.pop()).isFirstRunsOnly());}  }
class C{  @Override protected void dispatchDraw(Canvas canvas){  canvas.clipRect(mBackgroundPadding.left,mBackgroundPadding.top,getWidth() - mBackgroundPadding.right,getHeight() - mBackgroundPadding.bottom);  super.dispatchDraw(canvas);}  }
class C{  private void sendBluetoothServiceDownCallback(){  if (!mConnection.isGetNameAddressOnly()) {    if (DBG)     Log.d(TAG,"Calling onBluetoothServiceDown callbacks");    int n=mCallbacks.beginBroadcast();    Log.d(TAG,"Broadcasting onBluetoothServiceDown() to " + n + " receivers.");    for (int i=0; i < n; i++) {      try {        mCallbacks.getBroadcastItem(i).onBluetoothServiceDown();      } catch (      RemoteException e) {        Log.e(TAG,"Unable to call onBluetoothServiceDown() on callback #" + i,e);      }    }    mCallbacks.finishBroadcast();  }}  }
class C{  public void testIncompleteRequest() throws IOException {  String resdata="Response Data";  Request request=Request.newBuilder().buildPartial();  Response response=Response.newBuilder().setStrData(resdata).build();  FakeSocket socket=new FakeSocket(false).withResponseProto(response);  SocketRpcChannel rpcChannel=new SocketRpcChannel("host",-1,new FakeSocketFactory().returnsSocket(socket));  callAsync(rpcChannel,request,ErrorReason.INVALID_REQUEST_PROTO);  assertNull(callSync(rpcChannel,request,ErrorReason.INVALID_REQUEST_PROTO));}  }
class C{  public Builder pooledConnectionTTL(final int pooledConnectionTTL){  clientConfig.setConnectionTTL(pooledConnectionTTL);  return this;}  }
class C{  public static int parseInt(String text){  return parseInt(text,0);}  }
class C{  private static void registerAllPluginDescriptions(){  Iterator<Plugin> i=ALL_PLUGINS.iterator();  while (i.hasNext()) {    Plugin plugin=i.next();    if (!plugin.checkDependencies(plugin,ALL_PLUGINS)) {      plugin.disabled=true;      i.remove();      INCOMPATIBLE_PLUGINS.add(plugin);    }  }  if (ALL_PLUGINS.size() > 0) {    i=ALL_PLUGINS.iterator();    while (i.hasNext()) {      Plugin plugin=i.next();      try {        long start=System.currentTimeMillis();        plugin.registerDescriptions();        recordLoadingTime(plugin.getExtensionId(),start);      } catch (      Exception e) {        LogService.getRoot().log(Level.WARNING,I18N.getMessage(LogService.getRoot().getResourceBundle(),"com.rapidminer.tools.plugin.Plugin.plugin_initializing_error",e),e);        i.remove();        plugin.disabled=true;        INCOMPATIBLE_PLUGINS.add(plugin);      }    }  }}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  public void clearForces(){  for (Body body=m_bodyList; body != null; body=body.getNext()) {    body.m_force.setZero();    body.m_torque=0.0f;  }}  }
class C{  public Object decode(final Object object) throws IllegalArgumentException {  try {    final char[] charArray=object instanceof String ? ((String)object).toCharArray() : (char[])object;    return decodeHex(charArray);  } catch (  final ClassCastException e) {    throw new IllegalArgumentException(e.getMessage(),e);  }}  }
class C{  public MyLinkedList(){}  }
class C{  @Override public final int hashCode(){  long firsthash=Double.doubleToLongBits(first);  firsthash=firsthash ^ (firsthash >> 32);  return (int)(firsthash * 2654435761L + second);}  }
class C{  public IoBuffer encode(ProtocolState state,Object message) throws Exception {  try {    final RTMP rtmp=(RTMP)state;    if (message instanceof IoBuffer) {      return (IoBuffer)message;    } else {      return encodePacket(rtmp,(Packet)message);    }  } catch (  RuntimeException e) {    log.error("Error encoding object: ",e);  }  return null;}  }
class C{  public IntegerMapper boost(Float boost){  this.boost=boost;  return this;}  }
class C{  public static Map<String,Object> createPartyNote(DispatchContext dctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  GenericValue userLogin=(GenericValue)context.get("userLogin");  String noteString=(String)context.get("note");  String partyId=(String)context.get("partyId");  String noteId=(String)context.get("noteId");  String noteName=(String)context.get("noteName");  Locale locale=(Locale)context.get("locale");  if (noteId != null) {    try {      GenericValue value=EntityQuery.use(delegator).from("NoteData").where("noteId",noteId).queryOne();      if (value == null) {        Debug.logError("ERROR: Note id does not exist for : " + noteId + ", autogenerating.",module);        noteId=null;      }    } catch (    GenericEntityException e) {      Debug.logError(e,"ERROR: Note id does not exist for : " + noteId + ", autogenerating.",module);      noteId=null;    }  }  if (noteId == null) {    Map<String,Object> noteRes=null;    try {      noteRes=dispatcher.runSync("createNote",UtilMisc.toMap("partyId",userLogin.getString("partyId"),"note",noteString,"userLogin",userLogin,"locale",locale,"noteName",noteName));    } catch (    GenericServiceException e) {      Debug.logError(e,e.getMessage(),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"PartyNoteCreationError",UtilMisc.toMap("errorString",e.getMessage()),locale));    }    if (noteRes.get(ModelService.RESPONSE_MESSAGE).equals(ModelService.RESPOND_ERROR))     return noteRes;    noteId=(String)noteRes.get("noteId");    if (UtilValidate.isEmpty(noteId)) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.problem_creating_note_no_noteId_returned",locale));    }  }  result.put("noteId",noteId);  try {    Map<String,String> fields=UtilMisc.toMap("partyId",partyId,"noteId",noteId);    GenericValue v=delegator.makeValue("PartyNote",fields);    delegator.create(v);  } catch (  GenericEntityException ee) {    Debug.logError(ee,module);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);    result.put(ModelService.ERROR_MESSAGE,UtilProperties.getMessage(resourceError,"partyservices.problem_associating_note_with_party",UtilMisc.toMap("errMessage",ee.getMessage()),locale));  }  return result;}  }
class C{  public static String formatDuration(final Context context,long seconds){  long h=seconds / 3600;  long m=(seconds - h * 3600) / 60;  long s=seconds - (h * 3600 + m * 60);  String durationValue;  if (h == 0) {    durationValue=String.format(context.getString(R.string.details_ms),m,s);  } else {    durationValue=String.format(context.getString(R.string.details_hms),h,m,s);  }  return durationValue;}  }
class C{  public static FilePathReorderWrites register(){  FilePath.register(INSTANCE);  return INSTANCE;}  }
class C{  public void testBug5235() throws Exception {  Properties props=new Properties();  props.setProperty("zeroDateTimeBehavior","convertToNull");  if (versionMeetsMinimum(5,7,4)) {    props.put("jdbcCompliantTruncation","false");  }  if (versionMeetsMinimum(5,7,5)) {    String sqlMode=getMysqlVariable("sql_mode");    if (sqlMode.contains("STRICT_TRANS_TABLES")) {      sqlMode=removeSqlMode("STRICT_TRANS_TABLES",sqlMode);      props.put("sessionVariables","sql_mode='" + sqlMode + "'");    }  }  Connection convertToNullConn=getConnectionWithProps(props);  Statement convertToNullStmt=convertToNullConn.createStatement();  try {    convertToNullStmt.executeUpdate("DROP TABLE IF EXISTS testBug5235");    convertToNullStmt.executeUpdate("CREATE TABLE testBug5235(field1 DATE)");    convertToNullStmt.executeUpdate("INSERT INTO testBug5235 (field1) VALUES ('0000-00-00')");    PreparedStatement ps=convertToNullConn.prepareStatement("SELECT field1 FROM testBug5235");    this.rs=ps.executeQuery();    if (this.rs.next()) {      assertNull(this.rs.getObject("field1"));    }  }  finally {    convertToNullStmt.executeUpdate("DROP TABLE IF EXISTS testBug5235");  }}  }
class C{  @DSComment("Backup subsystem") @DSSpec(DSCat.BACKUP_SUBSYSTEM) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:46.135 -0500",hash_original_method="6BB48EA11B41145F61B4C8931E48479C",hash_generated_method="2F398251A4B4BA69F0D269FB2F029880") public void addHelper(String keyPrefix,BackupHelper helper){  mDispatcher.addHelper(keyPrefix,helper);}  }
class C{  public static void checkFieldRange(final long value,final long minimum,final long maximum,final String units,final String fieldName){  if (value < minimum || value > maximum) {    throw APIException.badRequests.parameterNotWithinRange(fieldName,value,minimum,maximum,units);  }}  }
class C{  public DelegateTree(){  this(DirectedSparseMultigraph.<V,E>getFactory());}  }
class C{  public EntryFile(File file,int blockSize){  this.file=file;  this.blocks=(int)((this.file.length() + blockSize - 1) / blockSize);  String name=file.getName();  int at=name.lastIndexOf('@');  if (at < 0) {    this.tag=null;    this.timestampMillis=0;    this.flags=DropBoxManager.IS_EMPTY;    return;  }  int flags=0;  this.tag=Uri.decode(name.substring(0,at));  if (name.endsWith(".gz")) {    flags|=DropBoxManager.IS_GZIPPED;    name=name.substring(0,name.length() - 3);  }  if (name.endsWith(".lost")) {    flags|=DropBoxManager.IS_EMPTY;    name=name.substring(at + 1,name.length() - 5);  } else   if (name.endsWith(".txt")) {    flags|=DropBoxManager.IS_TEXT;    name=name.substring(at + 1,name.length() - 4);  } else   if (name.endsWith(".dat")) {    name=name.substring(at + 1,name.length() - 4);  } else {    this.flags=DropBoxManager.IS_EMPTY;    this.timestampMillis=0;    return;  }  this.flags=flags;  long millis;  try {    millis=Long.valueOf(name);  } catch (  NumberFormatException e) {    millis=0;  }  this.timestampMillis=millis;}  }
class C{  public void startUpBase(FloodlightModuleContext context) throws FloodlightModuleException {  role=floodlightProvider.getRole().getOFRole();  floodlightProvider.addHAListener(this);  loadLogicalCategories();  registerDebugEvents();}  }
class C{  protected void resetFileLists(){  compileList=new File[0];  scriptExtensions=new LinkedHashSet<String>();}  }
class C{  public UniformDelayStrategy(final int delay,final int maxDelays){  super(maxDelays);  this.delay=delay;}  }
class C{  public Object clone() throws CloneNotSupportedException {  WalkingIterator clone=(WalkingIterator)super.clone();  if (null != m_firstWalker) {    clone.m_firstWalker=m_firstWalker.cloneDeep(clone,null);  }  return clone;}  }
class C{  protected final V unwrapKey(Object key){  return (V)key;}  }
class C{  @Override public void propertyChange(java.beans.PropertyChangeEvent e){  log.debug("LocationManager sees property change: ({}) old: ({}) new: ({})",e.getPropertyName(),e.getOldValue(),e.getNewValue());}  }
class C{  @Override protected void initData(){}  }
class C{  void startAlarm(){  if (timer == null) {    handleAlarm();  }}  }
class C{  public double doOperation() throws OperatorFailedException {  double logq;  final double delta=getDelta();  final NodeRef root=tree.getRoot();  NodeRef node;  do {    node=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));  } while (node == root);  final NodeRef parent=tree.getParent(node);  final NodeRef sibling=getOtherChild(tree,parent,node);  final NodeRef grandParent=tree.getParent(parent);  final Map<NodeRef,Double> destinations=getDestinations(node,parent,sibling,delta);  final List<NodeRef> destinationNodes=new ArrayList<NodeRef>(destinations.keySet());  int r=MathUtils.nextInt(destinations.size());  double forwardProbability=1.0 / destinations.size();  final NodeRef j=destinationNodes.get(r);  final double newHeight=destinations.get(j);  final NodeRef jParent=tree.getParent(j);  if (jParent != null && newHeight > tree.getNodeHeight(jParent)) {    throw new IllegalArgumentException("height error");  }  if (newHeight < tree.getNodeHeight(j)) {    throw new IllegalArgumentException("height error");  }  tree.beginTreeEdit();  if (j == parent || jParent == parent) {  } else {    if (grandParent == null) {      tree.removeChild(parent,sibling);      tree.setRoot(sibling);    } else {      tree.removeChild(parent,sibling);      tree.removeChild(grandParent,parent);      tree.addChild(grandParent,sibling);    }    if (jParent == null) {      tree.addChild(parent,j);      tree.setRoot(parent);    } else {      tree.removeChild(jParent,j);      tree.addChild(parent,j);      tree.addChild(jParent,parent);    }  }  tree.endTreeEdit();  tree.setNodeHeight(parent,newHeight);  if (tree.getParent(parent) != null && newHeight > tree.getNodeHeight(tree.getParent(parent))) {    throw new IllegalArgumentException("height error");  }  if (newHeight < tree.getNodeHeight(node)) {    throw new IllegalArgumentException("height error");  }  if (newHeight < tree.getNodeHeight(getOtherChild(tree,parent,node))) {    throw new IllegalArgumentException("height error");  }  final Map<NodeRef,Double> reverseDestinations=getDestinations(node,parent,getOtherChild(tree,parent,node),delta);  double reverseProbability=1.0 / reverseDestinations.size();  logq=Math.log(reverseProbability) - Math.log(forwardProbability);  return logq;}  }
class C{  public static boolean executeRegScript(String keyPath,String function,String name,String data){  if (!SystemUtilities.isWindows()) {    log.error("Reg commands can only be invoked from Windows");    return false;  }  String reg=System.getenv("windir") + "\\system32\\reg.exe";  if ("delete".equals(function)) {    return execute(new String[]{reg,function,keyPath,"/v",name,"/f"});  } else   if ("add".equals(function)) {    return execute(new String[]{reg,function,keyPath,"/v",name,"/d",data,"/f"});  } else   if ("query".equals(function)) {    return execute(new String[]{reg,function,keyPath,"/v",name});  } else {    log.error("Reg operation {} not supported.",function);    return false;  }}  }
class C{  public void removeChannel(Channel channel){  channels.remove(channel.getId());}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:13.112 -0500",hash_original_method="1C1564A7BC8E1B5AD415E60E6B0CBA09",hash_generated_method="55B98DA843890C785D4B1641D65B5257") synchronized void clear(){  mSslPrefTable.clear();}  }
class C{  public BusinessObjectDataEntity createBusinessObjectDataEntity(String namespaceCode,String businessObjectDefinitionName,String businessObjectFormatUsage,String businessObjectFormatFileType,Integer businessObjectFormatVersion,String businessObjectDataPartitionValue,List<String> businessObjectDataSubPartitionValues,Integer businessObjectDataVersion,Boolean businessObjectDataLatestVersion,String businessObjectDataStatusCode){  BusinessObjectFormatEntity businessObjectFormatEntity=businessObjectFormatDao.getBusinessObjectFormatByAltKey(new BusinessObjectFormatKey(namespaceCode,businessObjectDefinitionName,businessObjectFormatUsage,businessObjectFormatFileType,businessObjectFormatVersion));  if (businessObjectFormatEntity == null) {    businessObjectFormatEntity=businessObjectFormatDaoTestHelper.createBusinessObjectFormatEntity(namespaceCode,businessObjectDefinitionName,businessObjectFormatUsage,businessObjectFormatFileType,businessObjectFormatVersion,AbstractDaoTest.FORMAT_DESCRIPTION,true,AbstractDaoTest.PARTITION_KEY);  }  BusinessObjectDataStatusEntity businessObjectDataStatusEntity=businessObjectDataStatusDao.getBusinessObjectDataStatusByCode(businessObjectDataStatusCode);  if (businessObjectDataStatusEntity == null) {    businessObjectDataStatusEntity=businessObjectDataStatusDaoTestHelper.createBusinessObjectDataStatusEntity(businessObjectDataStatusCode);  }  return createBusinessObjectDataEntity(businessObjectFormatEntity,businessObjectDataPartitionValue,businessObjectDataSubPartitionValues,businessObjectDataVersion,businessObjectDataLatestVersion,businessObjectDataStatusEntity);}  }
class C{  @SuppressWarnings("unchecked") public final E remove(){  Thread thread=Thread.currentThread();  ClassLoader loader=thread.getContextClassLoader();  for (; loader != null; loader=loader.getParent()) {    if (loader instanceof EnvironmentClassLoader) {      EnvironmentClassLoader envLoader=(EnvironmentClassLoader)loader;      return (E)envLoader.removeAttribute(_varName);    }  }  return setGlobal(null);}  }
class C{  public boolean isAddressedModePossible(){  return tc.getCommandStation().isOpsModePossible();}  }
class C{  public void removeExternalIdpConfig(String tenantName,String configEntityId) throws Exception {  getService().removeExternalIdpForTenant(tenantName,configEntityId,this.getServiceContext());}  }
class C{  public CassandraProtos.Location toProto(){  return CassandraProtos.Location.newBuilder().setRack(rack).setDataCenter(dataCenter).build();}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof ReservationTokenAttribute))   return false;  if (obj == this)   return true;  ReservationTokenAttribute att=(ReservationTokenAttribute)obj;  if (att.getAttributeType() != getAttributeType() || att.getDataLength() != getDataLength() || !Arrays.equals(att.reservationToken,reservationToken))   return false;  return true;}  }
class C{  @DSComment("no action when removing callback") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:53.016 -0500",hash_original_method="C9A0C02866BC64B5017A48A301526982",hash_generated_method="66E71156F28D2F602815D9F161A4681D") @DSVerified public void unregisterListener(SensorEventListener listener){  unregisterListener((Object)listener);}  }
class C{  @Override public void updateDataCycle(Cycle cycle){  planAdapter.setDataCycle(cycle);}  }
class C{  public void onReceive(Context context,Intent intent){  String action=intent.getAction();  if (!initialized) {    Log.d("peerDebug","received action:" + action + ", but speaker not yet initialized, ignoring transmission");    log.warn("received action:" + action + ", but speaker not yet initialized, ignoring transmission");    return;  }  if (WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION.equals(action)) {    onWifiP2pStateChanged(context,intent);  } else   if (WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION.equals(action)) {    onWifiP2pPeersChanged(context,intent);  } else   if (WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION.equals(action)) {    onWifiP2pConnectionChanged(context,intent);  } else   if (WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION.equals(action)) {    onWifiP2pThisDeviceChanged(context,intent);  } else   if (WifiP2pManager.WIFI_P2P_DISCOVERY_CHANGED_ACTION.equals(action)) {    onWifiP2pDiscoveryChanged(context,intent);  } else {    log.error("Received an event we weren't expecting: " + action);    Log.d("peerDebug","Received an event we weren't expecting: " + action);  }}  }
class C{  public static short unsignedByteToShort(byte b){  if ((b & 0x80) == 0x80)   return (short)(128 + (b & 0x7f)); else   return (short)b;}  }
class C{  public PrivateKeyPbeNotSupportedException(String unsupportedPbe,String message){  super(message);  this.unsupportedPbe=unsupportedPbe;}  }
class C{  public CBreakpointStatusRenderer(){  setOpaque(true);}  }
class C{  private void unparkSuccessor(Node node){  int ws=node.waitStatus;  if (ws < 0)   compareAndSetWaitStatus(node,ws,0);  Node s=node.next;  if (s == null || s.waitStatus > 0) {    s=null;    for (Node t=tail; t != null && t != node; t=t.prev)     if (t.waitStatus <= 0)     s=t;  }  if (s != null)   LockSupport.unpark(s.thread);}  }
class C{  public ReflectiveProperty(Class<T> propertyHolder,Class<V> valueType,String name){  super(valueType,name);  char firstLetter=Character.toUpperCase(name.charAt(0));  String theRest=name.substring(1);  String capitalizedName=firstLetter + theRest;  String getterName=PREFIX_GET + capitalizedName;  try {    mGetter=propertyHolder.getMethod(getterName,(Class<?>[])null);  } catch (  NoSuchMethodException e) {    try {      mGetter=propertyHolder.getDeclaredMethod(getterName,(Class<?>[])null);      mGetter.setAccessible(true);    } catch (    NoSuchMethodException e2) {      getterName=PREFIX_IS + capitalizedName;      try {        mGetter=propertyHolder.getMethod(getterName,(Class<?>[])null);      } catch (      NoSuchMethodException e3) {        try {          mGetter=propertyHolder.getDeclaredMethod(getterName,(Class<?>[])null);          mGetter.setAccessible(true);        } catch (        NoSuchMethodException e4) {          try {            mField=propertyHolder.getField(name);            Class fieldType=mField.getType();            if (!typesMatch(valueType,fieldType)) {              throw new NoSuchPropertyException("Underlying type (" + fieldType + ") "+ "does not match Property type ("+ valueType+ ")");            }            return;          } catch (          NoSuchFieldException e5) {            throw new NoSuchPropertyException("No accessor method or field found for" + " property with name " + name);          }        }      }    }  }  Class getterType=mGetter.getReturnType();  if (!typesMatch(valueType,getterType)) {    throw new NoSuchPropertyException("Underlying type (" + getterType + ") "+ "does not match Property type ("+ valueType+ ")");  }  String setterName=PREFIX_SET + capitalizedName;  try {    mSetter=propertyHolder.getDeclaredMethod(setterName,getterType);    mSetter.setAccessible(true);  } catch (  NoSuchMethodException ignored) {  }}  }
class C{  public void expandObject(Object elementOrTreePath,int level){  if (checkBusy()) {    return;  }  Object parent=getParentElement(elementOrTreePath);  if (!(((parent != null) && getExpandedState(parent)) || isRootElement(elementOrTreePath))) {    List<Object> objectsToExpand=createObjectList(parent,new ArrayList<>());    if (!objectsToExpand.isEmpty()) {      objectsToBeExpanded.addAll(objectsToExpand);    }  }  objectsToBeExpanded.add(elementOrTreePath);  Widget w=internalExpand(elementOrTreePath,true);  if (w != null) {    internalExpandToLevel(w,level);  }}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FEED_ITEM'";  db.execSQL(sql);}  }
class C{  public void testBug32101() throws Exception {  MysqlConnectionPoolDataSource ds=new MysqlConnectionPoolDataSource();  ds.setURL(BaseTestCase.dbUrl);  PooledConnection pc=ds.getPooledConnection();  assertNotNull(pc.getConnection().prepareStatement("SELECT 1"));  assertNotNull(pc.getConnection().prepareStatement("SELECT 1",Statement.RETURN_GENERATED_KEYS));  assertNotNull(pc.getConnection().prepareStatement("SELECT 1",new int[0]));  assertNotNull(pc.getConnection().prepareStatement("SELECT 1",new String[0]));  assertNotNull(pc.getConnection().prepareStatement("SELECT 1",ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY));  assertNotNull(pc.getConnection().prepareStatement("SELECT 1",ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY,ResultSet.HOLD_CURSORS_OVER_COMMIT));}  }
class C{  public String expressionTipText(){  return "Specify the expression to apply. The 'A' letter" + "refers to the value of the attribute being processed. " + "MIN,MAX,MEAN,SD"+ "refer respectively to minimum, maximum, mean and"+ "standard deviation of the attribute being processed. "+ "Other attribute values (numeric only) can be accessed "+ "through the variables A1, A2, A3, ..."+ "\n\tSupported operators are +, -, *, /, pow, log,"+ "abs, cos, exp, sqrt, tan, sin, ceil, floor, rint, (, ),"+ "A,MEAN, MAX, MIN, SD, COUNT, SUM, SUMSQUARED, ifelse"+ "\n\tEg. pow(A,6)/(MEAN+MAX)*ifelse(A<0,0,sqrt(A))+ifelse(![A>9 && A<15])";}  }
class C{  @Override public BytesRef next() throws IOException {  BytesRef term=termsEnum.next();  if (term == null && this.flushBuffer != 0) {    flush();  } else {    this.flushBuffer+=estimator.bytesPerValue(term);    if (this.flushBuffer >= FLUSH_BUFFER_SIZE) {      flush();    }  }  return term;}  }
class C{  public Ifgt4(){  super("ifgt4",4);}  }
class C{  void addFillComponents(Container panel,int[] cols,int[] rows){  Dimension filler=new Dimension(10,10);  boolean filled_cell_11=false;  CellConstraints cc=new CellConstraints();  if (cols.length > 0 && rows.length > 0) {    if (cols[0] == 1 && rows[0] == 1) {      panel.add(Box.createRigidArea(filler),cc.xy(1,1));      filled_cell_11=true;    }  }  for (int index=0; index < cols.length; index++) {    if (cols[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));  }  for (int index=0; index < rows.length; index++) {    if (rows[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));  }}  }
class C{  public void assertArrayEqual(short[] expected,short[] actual){  TestUtils.assertArrayEqual(expected,actual);}  }
class C{  private double piHat2(int indices[],int v[],SemIm semIm){  SemGraph graph=semIm.getSemPm().getGraph();  graph.setShowErrorTerms(true);  Node etaNode1=graph.getNode("eta1");  double varEta1=semIm.getParamValue(etaNode1,etaNode1);  double stdEta1=Math.sqrt(semIm.getParamValue(etaNode1,etaNode1));  Node etaNode2=graph.getNode("eta2");  double coeffEta=semIm.getParamValue(etaNode1,etaNode2);  Node errorEta2;  if (graph.getParents(etaNode2).get(0) == etaNode1) {    errorEta2=graph.getParents(etaNode2).get(1);  } else {    errorEta2=graph.getParents(etaNode2).get(0);  }  double varEta2=coeffEta * coeffEta * varEta1 + semIm.getParamValue(errorEta2,errorEta2);  double stdEtaError2=Math.sqrt(semIm.getParamValue(errorEta2,errorEta2));  double stdE[]=new double[indices.length];  double varEta[]=new double[indices.length];  double stdU[]=new double[indices.length];  double coeff[]=new double[indices.length];  for (int i=0; i < indices.length; i++) {    Node uNode=graph.getNode("xi" + i);    Node uParent=null, uError=null;    for (    Node node : graph.getParents(uNode)) {      Node parent=node;      if (parent.getNodeType() == NodeType.LATENT) {        uParent=parent;      } else {        uError=parent;      }    }    if (i == 0 || (i == 2 && indices.length == 4) || (i == 3 && indices.length > 4)) {      coeff[i]=1.;    } else {      coeff[i]=semIm.getParamValue(uParent,uNode);    }    if (uParent == etaNode1) {      varEta[i]=varEta1;    } else {      varEta[i]=varEta2;    }    stdE[i]=Math.sqrt(semIm.getParamValue(uError,uError));    stdU[i]=Math.sqrt(coeff[i] * coeff[i] * varEta[i] + semIm.getParamValue(uError,uError));  }  double l=0.;  for (int t1=0; t1 < GHY.length; t1++) {    for (int t2=0; t2 < GHY.length; t2++) {      double tValue=GHW[t1] * GHW[t2];      double eta1=GHY[t1] * stdEta1;      double eta2=eta1 * coeffEta + GHY[t2] * stdEtaError2;      for (int i=0; i < indices.length; i++) {        double eta;        if (indices.length == 4) {          if (i < 2) {            eta=eta1;          } else {            eta=eta2;          }        } else {          if (i < 3) {            eta=eta1;          } else {            eta=eta2;          }        }        int numValues=this.values[indices[i]].length;        if (v[i] == 0) {          tValue*=ProbUtils.normalCdf((this.thresholds[indices[i]][0] * stdU[i] - coeff[i] * eta) / stdE[i]);        } else         if (v[i] == numValues - 1) {          tValue*=(1. - ProbUtils.normalCdf((this.thresholds[indices[i]][numValues - 2] * stdU[i] - coeff[i] * eta) / stdE[i]));        } else {          tValue*=ProbUtils.normalCdf((this.thresholds[indices[i]][v[i]] * stdU[i] - coeff[i] * eta) / stdE[i]) - ProbUtils.normalCdf((this.thresholds[indices[i]][v[i] - 1] * stdU[i] - coeff[i] * eta) / stdE[i]);        }      }      l+=tValue;    }  }  return l;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:14.061 -0500",hash_original_method="B0ECE654E14AB45AF60FAFEB349CC4AF",hash_generated_method="FBBFE33036216904AA78E9E00D413B8F") public ASN1InputStream(byte[] input,boolean lazyEvaluate){  this(new ByteArrayInputStream(input),input.length,lazyEvaluate);}  }
class C{  public void testIntAndFloatAssocation() throws Exception {  FacetsCollector fc=new FacetsCollector();  IndexSearcher searcher=newSearcher(reader);  searcher.search(new MatchAllDocsQuery(),fc);  Facets facets=new TaxonomyFacetSumFloatAssociations("$facets.float",taxoReader,config,fc);  assertEquals("Wrong count for category 'a'!",50f,facets.getSpecificValue("float","a").floatValue(),0.00001);  assertEquals("Wrong count for category 'b'!",10f,facets.getSpecificValue("float","b").floatValue(),0.00001);  facets=new TaxonomyFacetSumIntAssociations("$facets.int",taxoReader,config,fc);  assertEquals("Wrong count for category 'a'!",200,facets.getSpecificValue("int","a").intValue());  assertEquals("Wrong count for category 'b'!",150,facets.getSpecificValue("int","b").intValue());}  }
class C{  protected Call enqueue(Request request){  return enqueue(request,null);}  }
class C{  public void triangulate(List<Triangulatable> list){  _triangulations.clear();  _triangulations.addAll(list);  start();}  }
class C{  public static byte[] toByteArray(InputStream input) throws IOException {  ByteArrayOutputStream output=new ByteArrayOutputStream();  copy(input,output);  return output.toByteArray();}  }
class C{  protected void appendSummary(final StringBuffer buffer,final String fieldName,final boolean[] array){  appendSummarySize(buffer,fieldName,array.length);}  }
class C{  private void acknowledgeModChecked(){  checkedModsCount++;  publishModCounts();}  }
class C{  public void addMemberValue(String name,MemberValue value){  Pair p=new Pair();  p.name=pool.addUtf8Info(name);  p.value=value;  if (members == null)   members=new LinkedHashMap();  members.put(name,p);}  }
class C{  public AnnihilateLogic copy(){  if (_copy == null) {    _copy=new AnnihilateLogic();  }  return _copy;}  }
class C{  public StoreMessageAction(){  validation.add(new ActionAttributesExist(TARGET));  validation.add(StandardActionValidations.CHAT);}  }
class C{  @DSSource({DSSourceKind.IO}) @DSComment("Activity on IO class") @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:45.563 -0500",hash_original_method="146BBECA823F7801A366293B4A5C7497",hash_generated_method="ABC96A72A8ADD58AE2E0786F9FC8E24B") @Override public int read() throws IOException {  if (buf == null) {    throw new IOException();  }  if (pos < buf.length) {    return (buf[pos++] & 0xFF);  }  return in.read();}  }
class C{  public void writeToParcel(Parcel out,int flags){  out.writeInt(left);  out.writeInt(top);  out.writeInt(right);  out.writeInt(bottom);}  }
class C{  public DiskAccessException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public void clearAllBreakpoints(){  dim.clearAllBreakpoints();}  }
class C{  public void restoreProgress(final ProgressDialog progressDialog){  progressDialog.setTitle(mTitle);  progressDialog.setMessage(mMessage);  progressDialog.setProgress(mProgress);}  }
class C{  public String toString(){  String s=provider.toString() + ": " + id;  if (displayName != id) {    s+=" " + displayName;  }  return s;}  }
class C{  public final AC sizeGroup(){  return sizeGroup("",curIx);}  }
class C{  public ActionForward viewInventoryDocumentPDF(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws ApplicationException, OperationException, DocumentException, IOException, SQLException, ParseException {  ActionForward fwd=init(mapping,form,request,response);  if (fwd != null)   return fwd;  Properties ctx=TmkJSPEnv.getCtx(request);  InventoryForm If=(InventoryForm)form;  InventoryBean bean=(InventoryBean)If.getBean();  ArrayList<Object[]> reportData=InventoryManager.getInventoryReportData(ctx,bean.getInventoryId(),null);  String title="";  MInventory inv=MInventory.get(ctx,bean.getInventoryId());  if (inv.getDescription() == null) {    title="Inventory Adjustment Report";  } else {    title=inv.getDescription();  }  String subtitle=null;  String sql="Select Name from AD_Org where AD_org_ID=?";  PreparedStatement pstmt=null;  ResultSet rs=null;  pstmt=DB.prepareStatement(sql.toString(),null);  pstmt.setInt(1,Env.getAD_Org_ID(ctx));  try {    rs=pstmt.executeQuery();    if (rs.next()) {      subtitle=rs.getString(1);    }  } catch (  SQLException e) {    throw new OperationException(e);  } finally {    DB.close(rs);    DB.close(pstmt);  }  TabularReport tReport=new TabularReport(reportData);  tReport.setSortable(false);  tReport.setStyle("display");  tReport.setTitle(title);  tReport.setSubtitle(subtitle);  tReport.createReport();  response.setContentType("x-application/pdf");  response.setHeader("Content-Disposition","inline;filename=Inventory" + System.currentTimeMillis() + ".pdf");  response.getOutputStream().write(tReport.getPDFData());  return null;}  }
class C{  public static final HalfEllipse scale(HalfEllipse halfEllipse,double scale){  if (halfEllipse == null)   throw new NullPointerException(Messages.getString("geometry.nullShape"));  if (scale <= 0)   throw new IllegalArgumentException(Messages.getString("geometry.invalidScale"));  return new HalfEllipse(halfEllipse.getWidth() * scale,halfEllipse.getHeight() * scale);}  }
class C{  protected ComponentImpl(){  super();}  }
class C{  public final int numColumns(){  return m_Matrix.getColumnDimension();}  }
class C{  public void removeFileIdRange(int startingId,int endingId){  Iterator<Location> i=iterator();  while (i.hasNext()) {    Location l=i.next();    int id=(l.getFile() == null) ? -1 : l.getFile().getId();    if (id >= startingId && id <= endingId)     i.remove();  }}  }
class C{  @Nullable public static PsiClass findPsiClass(@NotNull PsiManager manager,@NotNull String name){  return findPsiClass(manager,name,null,false);}  }
class C{  public boolean isAlwaysExpanded(){  return mAlwaysExpanded;}  }
class C{  private void colorThresh(Mat src,int threshold){  Size srcSize=src.size();  int size=(int)(srcSize.height * srcSize.width) * 3;  byte[] d=new byte[size];  src.get(0,0,d);  for (int i=0; i < size; i+=3) {    if ((double)(d[i] & 0xff) == 255) {      continue;    }    double max=Math.max(Math.max((double)(d[i] & 0xff),(double)(d[i + 1] & 0xff)),(double)(d[i + 2] & 0xff));    double mean=((double)(d[i] & 0xff) + (double)(d[i + 1] & 0xff) + (double)(d[i + 2] & 0xff)) / 3;    if (max > threshold && mean < max * 0.8) {      d[i]=(byte)((double)(d[i] & 0xff) * 255 / max);      d[i + 1]=(byte)((double)(d[i + 1] & 0xff) * 255 / max);      d[i + 2]=(byte)((double)(d[i + 2] & 0xff) * 255 / max);    } else {      d[i]=d[i + 1]=d[i + 2]=0;    }  }  src.put(0,0,d);}  }
class C{  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {  SCHEMES.get(iprot.getScheme()).getScheme().read(iprot,this);}  }
class C{  public GenericDtoToEntityConverter(final GenericDAO<T,Long> genericDAO){  this.genericDAO=genericDAO;}  }
class C{  public boolean isCompleted(){  return STATUS_Completed.equals(m_status);}  }
class C{  public static void backSubstituteLU(int dim,double[] matrix1,int[] row_perm,double[] matrix2){  int i, ii, ip, j, k;  int rp;  int cv, rv, ri;  double tt;  rp=0;  for (k=0; k < dim; k++) {    cv=k;    ii=-1;    for (i=0; i < dim; i++) {      double sum;      ip=row_perm[rp + i];      sum=matrix2[cv + dim * ip];      matrix2[cv + dim * ip]=matrix2[cv + dim * i];      if (ii >= 0) {        rv=i * dim;        for (j=ii; j <= i - 1; j++) {          sum-=matrix1[rv + j] * matrix2[cv + dim * j];        }      } else       if (sum != 0.0) {        ii=i;      }      matrix2[cv + dim * i]=sum;    }    for (i=0; i < dim; i++) {      ri=(dim - 1 - i);      rv=dim * (ri);      tt=0.0;      for (j=1; j <= i; j++) {        tt+=matrix1[rv + dim - j] * matrix2[cv + dim * (dim - j)];      }      matrix2[cv + dim * ri]=(matrix2[cv + dim * ri] - tt) / matrix1[rv + ri];    }  }}  }
class C{  public SuggestRequest(String... indices){  super(indices);}  }
class C{  protected boolean isSamePlant(Block block){  return block == this;}  }
class C{  public boolean isValid(){  Object oo=get_Value(COLUMNNAME_IsValid);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void addEmojis(Context context,Spannable text,int emojiSize,int emojiAlignment,int textSize,int index,int length,boolean useSystemDefault){  if (useSystemDefault) {    return;  }  int textLength=text.length();  int textLengthToProcessMax=textLength - index;  int textLengthToProcess=length < 0 || length >= textLengthToProcessMax ? textLength : (length + index);  EmojiSpan[] oldSpans=text.getSpans(0,textLength,EmojiSpan.class);  for (int i=0; i < oldSpans.length; i++) {    text.removeSpan(oldSpans[i]);  }  int skip;  for (int i=index; i < textLengthToProcess; i+=skip) {    skip=0;    int icon=0;    char c=text.charAt(i);    if (isSoftBankEmoji(c)) {      icon=getSoftbankEmojiResource(c);      skip=icon == 0 ? 0 : 1;    }    if (icon == 0) {      int unicode=Character.codePointAt(text,i);      skip=Character.charCount(unicode);      if (unicode > 0xff) {        icon=getEmojiResource(context,unicode);      }      if (i + skip < textLengthToProcess) {        int followUnicode=Character.codePointAt(text,i + skip);        if (followUnicode == 0xfe0f) {          int followSkip=Character.charCount(followUnicode);          if (i + skip + followSkip < textLengthToProcess) {            int nextFollowUnicode=Character.codePointAt(text,i + skip + followSkip);            if (nextFollowUnicode == 0x20e3) {              int nextFollowSkip=Character.charCount(nextFollowUnicode);              int tempIcon=getKeyCapEmoji(unicode);              if (tempIcon == 0) {                followSkip=0;                nextFollowSkip=0;              } else {                icon=tempIcon;              }              skip+=(followSkip + nextFollowSkip);            }          }        } else         if (followUnicode == 0x20e3) {          int followSkip=Character.charCount(followUnicode);          int tempIcon=getKeyCapEmoji(unicode);          if (tempIcon == 0) {            followSkip=0;          } else {            icon=tempIcon;          }          skip+=followSkip;        } else {          int followSkip=Character.charCount(followUnicode);          String hexUnicode=Integer.toHexString(unicode);          String hexFollowUnicode=Integer.toHexString(followUnicode);          String resourceName="emoji_" + hexUnicode + "_"+ hexFollowUnicode;          int resourceId=0;          if (sEmojisModifiedMap.containsKey(resourceName)) {            resourceId=sEmojisModifiedMap.get(resourceName);          } else {            resourceId=context.getResources().getIdentifier(resourceName,"drawable",context.getApplicationContext().getPackageName());            if (resourceId != 0) {              sEmojisModifiedMap.put(resourceName,resourceId);            }          }          if (resourceId == 0) {            followSkip=0;          } else {            icon=resourceId;          }          skip+=followSkip;        }      }    }    if (icon > 0) {      text.setSpan(new EmojiSpan(context,icon,emojiSize,emojiAlignment,textSize),i,i + skip,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);    }  }}  }
class C{  public boolean isValidName(){  String _name=this.getName();  boolean _equals=Objects.equal("prototype",_name);  if (_equals) {    return false;  }  boolean _and=false;  String _name_1=this.getName();  boolean _equals_1=Objects.equal("constructor",_name_1);  if (!_equals_1) {    _and=false;  } else {    LiteralOrComputedPropertyName _declaredName=this.getDeclaredName();    PropertyNameKind _kind=null;    if (_declaredName != null) {      _kind=_declaredName.getKind();    }    boolean _tripleNotEquals=(_kind != PropertyNameKind.COMPUTED);    _and=_tripleNotEquals;  }  if (_and) {    return false;  }  return true;}  }
class C{  public static Object asType(Object object,Class type) throws Throwable {  if (object == null)   object=NullObject.getNullObject();  return invokeMethodN(object.getClass(),object,"asType",new Object[]{type});}  }
class C{  public void addParameter(final String parameterName,final String fileName,final File parameterFile) throws FileNotFoundException {  LOG.trace("enter MultipartPostMethod.addParameter(String parameterName, " + "String fileName, File parameterFile)");  final Part param=new FilePart(parameterName,fileName,parameterFile);  parameters.add(param);}  }
class C{  public void visitAttribute(Attribute attr){  if (mv != null) {    mv.visitAttribute(attr);  }}  }
class C{  private static String doGetFullPath(String filename,boolean includeSeparator){  if (filename == null) {    return null;  }  int prefix=getPrefixLength(filename);  if (prefix < 0) {    return null;  }  if (prefix >= filename.length()) {    if (includeSeparator) {      return getPrefix(filename);    } else {      return filename;    }  }  int index=indexOfLastSeparator(filename);  if (index < 0) {    return filename.substring(0,prefix);  }  int end=index + (includeSeparator ? 1 : 0);  if (end == 0) {    end++;  }  return filename.substring(0,end);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node genderNode;  Node entElement;  Node entElementContent;  Node entReference;  int nodeType;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  genderNode=genderList.item(2);  entReference=genderNode.getFirstChild();  assertNotNull("entReferenceNotNull",entReference);  nodeType=(int)entReference.getNodeType();  if (equals(1,nodeType)) {    entReference=doc.createEntityReference("ent4");    assertNotNull("createdEntRefNotNull",entReference);  }  entElement=entReference.getFirstChild();  assertNotNull("entElementNotNull",entElement);  entElementContent=entElement.getFirstChild();  assertNotNull("entElementContentNotNull",entElementContent);{    boolean success=false;    try {      ((CharacterData)entElementContent).setData("newData");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public static RadioButton createToggle(String text,Image icon,ButtonGroup bg){  RadioButton rb=new RadioButton(text,icon);  bg.add(rb);  rb.setToggle(true);  return rb;}  }
class C{  public LambdaAggregatingForwarder(){  this.aggregator=new RecordAggregator();  AWSCredentialsProvider provider=new DefaultAWSCredentialsProviderChain();  ClientConfiguration kinesisConfig=new ClientConfiguration();  kinesisConfig.setMaxConnections(1);  kinesisConfig.setProtocol(Protocol.HTTPS);  kinesisConfig.setConnectionTimeout(DESTINATION_CONNECTION_TIMEOUT);  kinesisConfig.setSocketTimeout(DESTINATION_SOCKET_TIMEOUT);  this.kinesisForwarder=new AmazonKinesisClient(provider,kinesisConfig);  this.kinesisForwarder.setRegion(Region.getRegion(DESTINATION_STREAM_REGION));}  }
class C{  public boolean secure(){  return this.secure;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case GamlPackage.BLOCK__STATEMENTS:    getStatements().clear();  return;case GamlPackage.BLOCK__FUNCTION:setFunction((Expression)null);return;}super.eUnset(featureID);}  }
class C{  public String toString(){  return attr;}  }
class C{  public Key floor(Key key){  if (key == null)   throw new NullPointerException("called floor() with null key");  if (st.containsKey(key))   return key;  SortedMap<Key,Value> head=st.headMap(key);  if (head.isEmpty())   throw new NoSuchElementException();  return head.lastKey();}  }
class C{  public static int count(final String string,final char c){  return (int)string.chars().filter(null).count();}  }
class C{  private static boolean execModPoll(int register,int type,Integer outValue,String expectedOutput,int numberOfRegisters){  try {    String output=TestUtils.execToString(String.format("%s -m tcp -p %d -a %d -r %d -t %d -c %d -1 %s %s",modPollTool.toString(),port,UNIT_ID,register,type,numberOfRegisters,LOCALHOST,outValue == null ? "" : outValue));    boolean returnValue=output != null && output.replaceAll("[\r]","").contains(expectedOutput);    if (!returnValue) {      logger.error(output);    }    return returnValue;  } catch (  Exception e) {    logger.error(e.getMessage());    return false;  }}  }
class C{  public void forceCheck(){  statusChecker.run();}  }
class C{  public String toString(){  return "B(" + alpha + ", "+ beta+ ")";}  }
class C{  private static TokenSpec checkIfStepName(String line,TokenSpec leftTok,TokenSpec rightTok){  if (leftTok == null || rightTok == null) {    return null;  }  if (IsNumber(leftTok.token) && (line.charAt(leftTok.leftPos - 1) == '<') && (line.charAt(leftTok.leftPos - 2) != '<')) {    return new TokenSpec(line.substring(leftTok.leftPos - 1,rightTok.rightPos),leftTok.leftPos - 1,rightTok.rightPos);  } else {    return null;  }}  }
class C{  private void startSocketDownloadTask(){  mDownloadTemporaryPacketSize=0;  try {    final HttpFrame httpFrame=new HttpFrame();    mTimeStart=System.currentTimeMillis();    mTimeEnd=0;    if (mRepeatWrapper.isFirstDownload()) {      mRepeatWrapper.setFirstDownloadRepeat(false);      mRepeatWrapper.setStartDate(mTimeStart);    }    final HttpStates httFrameState=httpFrame.decodeFrame(mSocket.getInputStream());    SpeedTestUtils.checkHttpFrameError(mForceCloseSocket,mListenerList,httFrameState);    final HttpStates httpHeaderState=httpFrame.parseHeader(mSocket.getInputStream());    SpeedTestUtils.checkHttpHeaderError(mForceCloseSocket,mListenerList,httpHeaderState);    SpeedTestUtils.checkHttpContentLengthError(mForceCloseSocket,mListenerList,httpFrame);    if (httpFrame.getStatusCode() == SpeedTestConst.HTTP_OK && httpFrame.getReasonPhrase().equalsIgnoreCase("ok")) {      mDownloadPckSize=new BigDecimal(httpFrame.getContentLength());      if (mRepeatWrapper.isRepeatDownload()) {        mRepeatWrapper.updatePacketSize(mDownloadPckSize);      }      downloadReadingLoop();      mTimeEnd=System.currentTimeMillis();      closeSocket();      mReportInterval=false;      if (!mRepeatWrapper.isRepeatDownload()) {        closeExecutors();      }      final SpeedTestReport report=mSocketInterface.getLiveDownloadReport();      for (int i=0; i < mListenerList.size(); i++) {        mListenerList.get(i).onDownloadFinished(report);      }    } else {      mReportInterval=false;      for (int i=0; i < mListenerList.size(); i++) {        mListenerList.get(i).onDownloadError(SpeedTestError.INVALID_HTTP_RESPONSE,"Error status code " + httpFrame.getStatusCode());      }      closeSocket();      if (!mRepeatWrapper.isRepeatDownload()) {        closeExecutors();      }    }  } catch (  SocketTimeoutException e) {    mReportInterval=false;    SpeedTestUtils.dispatchSocketTimeout(mForceCloseSocket,mListenerList,true,e.getMessage());    mTimeEnd=System.currentTimeMillis();    closeSocket();    closeExecutors();  }catch (  IOException|InterruptedException e) {    mReportInterval=false;    catchError(true,e.getMessage());  }  mErrorDispatched=false;}  }
class C{  @Inline public static void booleanBulkCopy(boolean[] src,Offset srcOffset,boolean[] dst,Offset dstOffset,int bytes){  if (VM.VerifyAssertions)   VM._assert(BOOLEAN_BULK_COPY_SUPPORTED);  if (!Selected.Mutator.get().booleanBulkCopy(ObjectReference.fromObject(src),srcOffset,ObjectReference.fromObject(dst),dstOffset,bytes)) {    Memory.aligned8Copy(Magic.objectAsAddress(dst).plus(dstOffset),Magic.objectAsAddress(src).plus(srcOffset),bytes);  }}  }
class C{  protected Node removeNode(Node node){  node.previous.next=node.next;  node.next.previous=node.previous;  node.removed=true;  return node;}  }
class C{  public CUCorrectionProposal(String name,ICompilationUnit cu,TextChange change,int relevance,Image image){  super(name,change,relevance,image);  if (cu == null) {    throw new IllegalArgumentException("Compilation unit must not be null");  }  fCompilationUnit=cu;}  }
class C{  private void testWrite1(File f,int convToType,boolean forceRgb,int tolerance){  try {    File dest=TestSupport.absFile("test/__test.tmp.png");    delOnExit(dest);    BufferedImage bi1=ImageIoUtils.readPng(f);    if (verbose)     PngHelperInternal.debug(f + " type=" + ImageIoUtils.imageTypeName(bi1.getType())+ " conv to "+ (convToType > -1 ? ImageIoUtils.imageTypeName(convToType) : "-")+ " force RGB="+ forceRgb);    BufferedImage bi2=null;    if (convToType > 0 && convToType != bi1.getType()) {      bi2=new BufferedImage(bi1.getWidth(),bi1.getHeight(),convToType);      bi2.getGraphics().drawImage(bi1,0,0,null);    }    BufferedImage2PngAdapter adap=new BufferedImage2PngAdapter(bi2 != null ? bi2 : bi1);    adap.forceresortToGetRGB=forceRgb;    PngWriterBI pngw=PngWriterBI.createInstance(adap,dest);    pngw.writeAll();    TestSupport.testSameValues(f,dest,tolerance);  } catch (  AssertionFailedError e) {    System.err.println("Error with " + f + " typeconv="+ ImageIoUtils.imageTypeNameShort(convToType)+ " forceRgb="+ forceRgb);    throw e;  }}  }
class C{  public boolean removeAll(AbstractIntList other){  if (!(other instanceof IntArrayList))   return super.removeAll(other);  if (other.size() == 0) {    return false;  }  int limit=other.size() - 1;  int j=0;  int[] theElements=elements;  int mySize=size();  double N=(double)other.size();  double M=(double)mySize;  if ((N + M) * cern.jet.math.Arithmetic.log2(N) < M * N) {    IntArrayList sortedList=(IntArrayList)other.clone();    sortedList.quickSort();    for (int i=0; i < mySize; i++) {      if (sortedList.binarySearchFromTo(theElements[i],0,limit) < 0)       theElements[j++]=theElements[i];    }  } else {    for (int i=0; i < mySize; i++) {      if (other.indexOfFromTo(theElements[i],0,limit) < 0)       theElements[j++]=theElements[i];    }  }  boolean modified=(j != mySize);  setSize(j);  return modified;}  }
class C{  public PerTestClassLoaderRunner(Class<?> klass) throws InitializationError {  super(klass);}  }
class C{  protected BusinessObjectDataAvailability checkBusinessObjectDataAvailabilityImpl(BusinessObjectDataAvailabilityRequest request,boolean skipRequestValidation){  if (!skipRequestValidation) {    validateBusinessObjectDataAvailabilityRequest(request);  }  BusinessObjectFormatKey businessObjectFormatKey=getBusinessObjectFormatKey(request);  BusinessObjectFormatEntity businessObjectFormatEntity=businessObjectFormatDaoHelper.getBusinessObjectFormatEntity(businessObjectFormatKey);  List<String> storageNames=getStorageNames(request);  storageDaoHelper.validateStorageExistence(storageNames);  List<List<String>> partitionFilters=businessObjectDataDaoHelper.buildPartitionFilters(request.getPartitionValueFilters(),request.getPartitionValueFilter(),businessObjectFormatKey,request.getBusinessObjectDataVersion(),storageNames,null,StoragePlatformEntity.GLACIER,businessObjectFormatEntity);  List<StorageUnitEntity> availableStorageUnitEntities=storageUnitDao.getStorageUnitsByPartitionFiltersAndStorages(businessObjectFormatKey,partitionFilters,request.getBusinessObjectDataVersion(),BusinessObjectDataStatusEntity.VALID,storageNames,null,StoragePlatformEntity.GLACIER,true);  BusinessObjectDataAvailability businessObjectDataAvailability=createBusinessObjectDataAvailability(request);  List<BusinessObjectDataStatus> availableStatuses=new ArrayList<>();  businessObjectDataAvailability.setAvailableStatuses(availableStatuses);  List<BusinessObjectDataStatus> notAvailableStatuses=new ArrayList<>();  businessObjectDataAvailability.setNotAvailableStatuses(notAvailableStatuses);  List<List<String>> matchedAvailablePartitionFilters=new ArrayList<>();  List<List<String>> availablePartitions=new ArrayList<>();  Map<BusinessObjectDataEntity,StorageUnitEntity> businessObjectDataToStorageUnitMap=new HashMap<>();  for (  StorageUnitEntity storageUnitEntity : availableStorageUnitEntities) {    BusinessObjectDataEntity businessObjectDataEntity=storageUnitEntity.getBusinessObjectData();    if (businessObjectDataToStorageUnitMap.containsKey(businessObjectDataEntity)) {      if (CollectionUtils.isEmpty(storageNames)) {        throw new IllegalArgumentException(String.format("Found business object data registered in more than one storage. " + "Please specify storage(s) in the request to resolve this. Business object data {%s}",businessObjectDataHelper.businessObjectDataEntityAltKeyToString(businessObjectDataEntity)));      }    } else {      BusinessObjectDataKey businessObjectDataKey=businessObjectDataHelper.getBusinessObjectDataKey(businessObjectDataEntity);      matchedAvailablePartitionFilters.add(businessObjectDataHelper.getPartitionFilter(businessObjectDataKey,partitionFilters.get(0)));      availablePartitions.add(businessObjectDataHelper.getPrimaryAndSubPartitionValues(businessObjectDataKey));      if (StoragePlatformEntity.GLACIER.equals(storageUnitEntity.getStorage().getStoragePlatform().getName())) {        BusinessObjectDataStatus businessObjectDataStatus=createAvailableBusinessObjectDataStatus(businessObjectDataEntity);        businessObjectDataStatus.setReason(REASON_ARCHIVED);        notAvailableStatuses.add(businessObjectDataStatus);      } else {        availableStatuses.add(createAvailableBusinessObjectDataStatus(businessObjectDataEntity));      }      businessObjectDataToStorageUnitMap.put(businessObjectDataEntity,storageUnitEntity);    }  }  boolean includeAllRegisteredSubPartitions=request.getBusinessObjectDataVersion() == null && BooleanUtils.isTrue(request.isIncludeAllRegisteredSubPartitions());  if (includeAllRegisteredSubPartitions && !CollectionUtils.isEmpty(matchedAvailablePartitionFilters)) {    addNotAvailableBusinessObjectDataStatuses(notAvailableStatuses,businessObjectFormatKey,matchedAvailablePartitionFilters,availablePartitions,storageNames);  }  List<List<String>> unmatchedPartitionFilters=new ArrayList<>(partitionFilters);  unmatchedPartitionFilters.removeAll(matchedAvailablePartitionFilters);  List<StorageUnitEntity> notAvailableStorageUnitEntities=storageUnitDao.getStorageUnitsByPartitionFiltersAndStorages(businessObjectFormatKey,unmatchedPartitionFilters,request.getBusinessObjectDataVersion(),null,storageNames,null,StoragePlatformEntity.GLACIER,false);  List<StorageUnitEntity> archivedStorageUnitEntities=storageUnitDao.getStorageUnitsByPartitionFiltersAndStorages(businessObjectFormatKey,unmatchedPartitionFilters,request.getBusinessObjectDataVersion(),null,null,StoragePlatformEntity.GLACIER,null,true);  Set<BusinessObjectDataEntity> archivedBusinessObjectDataEntities=storageUnitHelper.getBusinessObjectDataEntitiesSet(archivedStorageUnitEntities);  addNotAvailableBusinessObjectDataStatuses(notAvailableStatuses,notAvailableStorageUnitEntities,archivedBusinessObjectDataEntities);  List<List<String>> matchedNotAvailablePartitionFilters=getPartitionFilters(notAvailableStorageUnitEntities,partitionFilters.get(0));  unmatchedPartitionFilters.removeAll(matchedNotAvailablePartitionFilters);  for (  List<String> unmatchedPartitionFilter : unmatchedPartitionFilters) {    notAvailableStatuses.add(createNotAvailableBusinessObjectDataStatus(request,unmatchedPartitionFilter,REASON_NOT_REGISTERED));  }  return businessObjectDataAvailability;}  }
class C{  public boolean isRegTrue(){  return (flags & REG_TRUE) != 0;}  }
class C{  public Item doc(XContentBuilder doc){  return this.doc(doc.bytes());}  }
class C{  public EaseOut(){  this(DEFAULT_OVERSHOOT_AMOUNT);}  }
class C{  public SerialProperties(JSONObject serialProps){  if (serialProps == null) {    return;  }  if (!serialProps.isNull("baudRate")) {    try {      baudRate=SerialUtilities.parseBaudRate(serialProps.getString("baudRate"));    } catch (    JSONException e) {      log.warn("Cannot read {} as a value for baud rate, using default",serialProps.opt("baudRate"));    }  }  if (!serialProps.isNull("dataBits")) {    try {      dataBits=SerialUtilities.parseDataBits(serialProps.getString("dataBits"));    } catch (    JSONException e) {      log.warn("Cannot read {} as a value for data bits, using default",serialProps.opt("dataBits"));    }  }  if (!serialProps.isNull("stopBits")) {    try {      stopBits=SerialUtilities.parseStopBits(serialProps.getString("stopBits"));    } catch (    JSONException e) {      log.warn("Cannot read {} as a value for stop bits, using default",serialProps.opt("stopBits"));    }  }  if (!serialProps.isNull("parity")) {    try {      parity=SerialUtilities.parseParity(serialProps.getString("parity"));    } catch (    JSONException e) {      log.warn("Cannot read {} as a value for parity, using default",serialProps.opt("parity"));    }  }  if (!serialProps.isNull("flowControl")) {    try {      flowControl=SerialUtilities.parseFlowControl(serialProps.getString("flowControl"));    } catch (    JSONException e) {      log.warn("Cannot read {} as a value for flow control, using default",serialProps.opt("flowControl"));    }  }}  }
class C{  public void addPair(String name,int seqId,int readerIndex){  assert mCount < mHashes.length();  mHashes.setInt(mCount,name.hashCode());  mIndexIds.set(mCount,(((long)readerIndex) << 32) | (((long)seqId) & 0xFFFFFFFFL));  mCount++;}  }
class C{  public static void inheritGwtModule(Path path,String inheritableModuleLogicalName) throws IOException {  final String inheritsString="    <inherits name='" + inheritableModuleLogicalName + "'/>";  List<String> content=Files.readAllLines(path,UTF_8);  int i=0, lastInheritsLine=0;  for (  String str : content) {    i++;    if (str.contains("<inherits")) {      lastInheritsLine=i;    }  }  content.add(lastInheritsLine,inheritsString);  Files.write(path,content,UTF_8);}  }
class C{  public Configuration configure(String resource) throws EPException {  if (log.isDebugEnabled()) {    log.debug("Configuring from resource: " + resource);  }  InputStream stream=getConfigurationInputStream(resource);  ConfigurationParser.doConfigure(this,stream,resource);  return this;}  }
class C{  @Override public int posintext(){  return this.posintext;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap attrList;  doc=(Document)load("hc_staff",false);  attrList=doc.getAttributes();  assertNull("doc_attributes_is_null",attrList);}  }
class C{  public List<JsonObject> executeParametrizedStatement(String statement,List<String> parameterNames,List<Object> parameterValues){  JsonObject namedParams=JsonObject.create();  for (int param=0; param < parameterNames.size(); param++) {    namedParams.put(parameterNames.get(param),parameterValues.get(param));  }  ParameterizedN1qlQuery query=N1qlQuery.parameterized(statement,namedParams);  return executeQuery(query);}  }
class C{  @Transactional public void voteCancel(final String userId,final String dataId,final int dataType){  try {    final int oldType=voteRepository.removeIfExists(userId,dataId);    if (Vote.DATA_TYPE_C_ARTICLE == dataType) {      final JSONObject article=articleRepository.get(dataId);      if (null == article) {        LOGGER.log(Level.ERROR,"Not found article [id={0}] to vote cancel",dataId);        return;      }      if (Vote.TYPE_C_UP == oldType) {        article.put(Article.ARTICLE_GOOD_CNT,article.optInt(Article.ARTICLE_GOOD_CNT) - 1);      } else       if (Vote.TYPE_C_DOWN == oldType) {        article.put(Article.ARTICLE_BAD_CNT,article.optInt(Article.ARTICLE_BAD_CNT) - 1);      }      final int ups=article.optInt(Article.ARTICLE_GOOD_CNT);      final int downs=article.optInt(Article.ARTICLE_BAD_CNT);      final long t=article.optLong(Keys.OBJECT_ID) / 1000;      final double redditScore=redditScore(ups,downs,t);      article.put(Article.REDDIT_SCORE,redditScore);      articleRepository.update(dataId,article);    }  } catch (  final RepositoryException e) {    LOGGER.log(Level.ERROR,e.getMessage());  }}  }
class C{  public final boolean containsKey(String name){  return mMap.containsKey(name);}  }
class C{  @TsLoggedIn public String save(){  String retVal=null;  if (validate()) {    UploadedFile item=getFile();    try {      Script script=new Script();      script.setName(getName());      script.setCreator(identityManager.lookupById(User.class,identity.getAccount().getId()).getLoginName());      script.setProductName(productName);      if (getCreationMode().equals("Upload Script")) {        UploadedFileIterator uploadedFileIterator=new UploadedFileIterator(item,"xml");        FileInputStreamWrapper w=uploadedFileIterator.getNext();        if (w == null) {          messages.error("Zip archive did not contain any xml files.");          return null;        }        scriptProcessor.setScript(script);        List<ScriptStep> steps=parseScript(new InputStreamReader(w.getInputStream()),getSelectedFilters());        while ((w=uploadedFileIterator.getNext()) != null) {          messages.error("Uploaded zip file contained more than one xml file. Script creation only supports one file upload.");          return null;        }        if (steps != null) {          setScriptSteps(script,steps);        }      }      new ScriptDao().saveOrUpdate(script);      scriptEvent.fire(new ModifiedScriptMessage(script,null));      retVal="success";      conversation.end();    } catch (    Exception e) {      LOG.error("Failed to create Script " + e,e);      messages.error(e.getMessage());    }  }  return retVal;}  }
class C{  public void testStopwordsCasing() throws IOException {  FrenchAnalyzer a=new FrenchAnalyzer();  assertAnalyzesTo(a,"Votre",new String[]{});  a.close();}  }
class C{  public static String toOpenSshPublicKey(final String keyStr){  try {    final StringBuilder strBuf=new StringBuilder();    final BufferedReader br=new BufferedReader(new StringReader(keyStr));    String line=br.readLine();    if (line == null || !line.equals("---- BEGIN SSH2 PUBLIC KEY ----")) {      return keyStr;    }    while ((line=br.readLine()) != null) {      if (line.indexOf(':') == -1) {        strBuf.append(line);        break;      }    }    while ((line=br.readLine()) != null) {      if (line.startsWith("---- ")) {        break;      }      strBuf.append(line);    }    final PublicKey key=new ByteArrayBuffer(Base64.decodeBase64(Constants.encodeASCII(strBuf.toString()))).getRawPublicKey();    if (key instanceof RSAPublicKey) {      strBuf.insert(0,KeyPairProvider.SSH_RSA + " ");    } else     if (key instanceof DSAPublicKey) {      strBuf.insert(0,KeyPairProvider.SSH_DSS + " ");    } else {      return keyStr;    }    strBuf.append(' ');    strBuf.append("converted-key");    return strBuf.toString();  } catch (  IOException e) {    return keyStr;  }catch (  RuntimeException re) {    return keyStr;  }}  }
class C{  public void incrIndent(){  currentIndent+=deltaIndent;}  }
class C{  public String save(){  UploadedFile item=getFile();  try {    String fileName=item.getFileName();    fileName=FilenameUtils.getBaseName(fileName) + "-" + UUID.randomUUID().toString()+ "."+ FilenameUtils.getExtension(fileName);    File parent=new File("uploads");    parent.mkdirs();    File f=new File(parent,fileName);    LOG.info("Writing file to " + f.getAbsolutePath());    FileUtils.writeByteArrayToFile(f,item.getContents());    messages.info("Wrote file to " + f.getAbsolutePath());  } catch (  Exception e) {    messages.error(e.getMessage());  }  return null;}  }
class C{  public static String formatDateTime(Date date){  return getSimplDateFormat(DF_TIME).format(date);}  }
class C{  protected CompilationUnitContext(TemplateContextType type,IDocument document,Position completionPosition,ISourceFile compilationUnit){  super(type,document,completionPosition);  fCompilationUnit=compilationUnit;  fIsManaged=true;}  }
class C{  private static HashMap<String,Object> readAmfObject(ParsableByteArray data){  HashMap<String,Object> array=new HashMap<>();  while (true) {    String key=readAmfString(data);    int type=readAmfType(data);    if (type == AMF_TYPE_END_MARKER) {      break;    }    array.put(key,readAmfData(data,type));  }  return array;}  }
class C{  public WrapLayout(){  super();}  }
class C{  public var addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  @Override public boolean equals(Object obj){  return (compareTo((SortContainer)obj) == 0);}  }
class C{  public static void main(String[] args){  runFileSaver(new C45Saver(),args);}  }
class C{  public LocalVarEntry(int startOffset,int endOffset,String name,String sig,int slot){  starto=startOffset;  endo=endOffset;  this.name=new AsciiCP(name);  this.sig=new AsciiCP(sig);  this.slot=slot;}  }
class C{  public static final QuadTree<PersonPrimaryActivity> createPersonFixedActivityQuadTree(MatsimServices controler){  double minx=(1.0D / 0.0D);  double miny=(1.0D / 0.0D);  double maxx=(-1.0D / 0.0D);  double maxy=(-1.0D / 0.0D);  for (  ActivityFacility f : controler.getScenario().getActivityFacilities().getFacilities().values()) {    if (f.getCoord().getX() < minx)     minx=f.getCoord().getX();    if (f.getCoord().getY() < miny)     miny=f.getCoord().getY();    if (f.getCoord().getX() > maxx)     maxx=f.getCoord().getX();    if (f.getCoord().getY() <= maxy)     continue;    maxy=f.getCoord().getY();  }  minx-=1.0D;  miny-=1.0D;  maxx+=1.0D;  maxy+=1.0D;  QuadTree<PersonPrimaryActivity> personPrimaryActivityQuadTree=new QuadTree<PersonPrimaryActivity>(minx,miny,maxx,maxy);  Activity previousActivity=null;  for (  Person p : controler.getScenario().getPopulation().getPersons().values()) {    int primaryActivityCount=0;    if (p.getSelectedPlan().getPlanElements().toString().contains("type=shopgrocery")) {      for (      PlanElement pe : p.getSelectedPlan().getPlanElements()) {        if (pe instanceof Activity) {          Coord c;          Id<Link> activityLink;          int ppaId;          PersonPrimaryActivity ppa;          Activity act=(Activity)pe;          if (((Activity)pe).getType().equals("shopgrocery")) {            if (!previousActivity.getType().startsWith("shopgrocery")) {              c=((ActivityFacility)controler.getScenario().getActivityFacilities().getFacilities().get(act.getFacilityId())).getCoord();              activityLink=(NetworkUtils.getNearestLink(((Network)controler.getScenario().getNetwork()),act.getCoord())).getId();              ppaId=Integer.parseInt(p.getId().toString()) * 10 + primaryActivityCount;              ppa=new PersonPrimaryActivity(act.getType(),ppaId,p.getId(),activityLink);              personPrimaryActivityQuadTree.put(c.getX(),c.getY(),ppa);              ++primaryActivityCount;            }          } else           if (previousActivity != null && previousActivity.getType().equals("shopgrocery")) {            c=((ActivityFacility)controler.getScenario().getActivityFacilities().getFacilities().get(act.getFacilityId())).getCoord();            activityLink=(NetworkUtils.getNearestLink(((Network)controler.getScenario().getNetwork()),act.getCoord())).getId();            ppaId=Integer.parseInt(p.getId().toString()) * 10 + primaryActivityCount;            ppa=new PersonPrimaryActivity(act.getType(),ppaId,p.getId(),activityLink);            personPrimaryActivityQuadTree.put(c.getX(),c.getY(),ppa);            ++primaryActivityCount;          }          previousActivity=(Activity)pe;        }      }    }  }  return personPrimaryActivityQuadTree;}  }
class C{  private boolean parseUrl(String url,Properties props){  if (url == null)   return false;  if (url.startsWith(URL_PREFIX) && url.length() > URL_PREFIX.length())   return parseJdbcUrl(url,props); else   if (url.startsWith(CFG_URL_PREFIX) && url.length() >= CFG_URL_PREFIX.length())   return parseJdbcConfigUrl(url,props);  return false;}  }
class C{  static public void validateDirectory(TestSuite suite,String name){  TestSuite subsuite=new TestSuite("Directory " + name + " validation");  suite.addTest(subsuite);  if (System.getProperty("jmri.skipschematests","false").equals("true"))   return;  java.io.File dir=new java.io.File(name);  java.io.File[] files=dir.listFiles();  if (files == null) {    return;  }  for (int i=0; i < files.length; i++) {    if (files[i].getName().endsWith(".xml")) {      subsuite.addTest(new CheckOneFilePasses(files[i]));    }  }}  }
class C{  public static void resetOnOperatorError(){  log.info("Reset to factory defaults : onOperatorError");  onOperatorErrorHook=null;}  }
class C{  int metaAlloc(){  int bit=fndMetabit();  if (bit < 0) {    final int nsize=m_metaBits.length + cDefaultMetaBitsSize;    final int[] nbits=new int[nsize];    final int[] ntransients=new int[nsize];    for (int i=0; i < m_metaBits.length; i++) {      nbits[i]=m_metaBits[i];      ntransients[i]=m_metaTransientBits[i];    }    m_metaBits=nbits;    m_metaTransientBits=ntransients;    m_metaBits[m_metaBitsSize]=m_nextAllocation;    m_nextAllocation-=META_ALLOCATION;    m_metaBitsSize=nsize;    bit=fndMetabit();    assert bit >= 0;  }  setBit(m_metaTransientBits,bit);  setBit(m_metaBits,bit);  if (m_nextAllocation <= m_fileSize) {    if (log.isInfoEnabled())     log.info("ExtendFile called from metaAlloc");    extendFile();  }  checkCoreAllocations();  return bit;}  }
class C{  public byte[] wrap(byte[] outgoing,int offset,int len) throws SaslException {  if (completed) {    throw new IllegalStateException("CRAM-MD5 supports neither integrity nor privacy");  } else {    throw new IllegalStateException("CRAM-MD5 authentication not completed");  }}  }
class C{  private void commandMonitor(StringTokenizer t) throws NoSessionException {  if (!t.hasMoreTokens()) {    env.error("Argument required");  } else {    env.getMonitorListModel().add(t.nextToken(""));  }}  }
class C{  EndParagraphAction(String nm,boolean select){  super(nm);  this.select=select;}  }
class C{  protected void addResource(String resource){  if (!StringUtils.isEmpty(resource)) {    resources.add(resource);  }}  }
class C{  protected void addNodePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_TraceNodeExecuted_node_feature"),getString("_UI_PropertyDescriptor_description","_UI_TraceNodeExecuted_node_feature","_UI_TraceNodeExecuted_type"),SexecPackage.Literals.TRACE_NODE_EXECUTED__NODE,true,false,true,null,null,null));}  }
class C{  public Matrix4x3d rotation(double angle,double x,double y,double z){  double cos=Math.cos(angle);  double sin=Math.sin(angle);  double C=1.0 - cos;  double xy=x * y, xz=x * z, yz=y * z;  m00=cos + x * x * C;  m10=xy * C - z * sin;  m20=xz * C + y * sin;  m30=0.0;  m01=xy * C + z * sin;  m11=cos + y * y * C;  m21=yz * C - x * sin;  m31=0.0;  m02=xz * C - y * sin;  m12=yz * C + x * sin;  m22=cos + z * z * C;  m32=0.0;  properties=0;  return this;}  }
class C{  public final void testValidateLowercaseNotAllowingSpacesSucceeds(){  char[] allowedCharacters=new char[]{'-'};  LetterOrNumberValidator characterOrNumberValidator=new LetterOrNumberValidator("foo",Case.LOWERCASE,false,allowedCharacters);  assertTrue(characterOrNumberValidator.validate("ab1-"));}  }
class C{  public VersionException(String message,Throwable causeThrowable){  super(message,causeThrowable);}  }
class C{  public static void waitFor(SystemProcess process) throws InterruptedException {  log.info("Waiting for {} to finish.",process);  waitFor(process,Stopwatch.createStarted(),"{} finished");}  }
class C{  private static boolean memberValueEquals(Object v1,Object v2){  Class<?> type=v1.getClass();  if (!type.isArray())   return v1.equals(v2);  if (v1 instanceof Object[] && v2 instanceof Object[])   return Arrays.equals((Object[])v1,(Object[])v2);  if (v2.getClass() != type)   return false;  if (type == byte[].class)   return Arrays.equals((byte[])v1,(byte[])v2);  if (type == char[].class)   return Arrays.equals((char[])v1,(char[])v2);  if (type == double[].class)   return Arrays.equals((double[])v1,(double[])v2);  if (type == float[].class)   return Arrays.equals((float[])v1,(float[])v2);  if (type == int[].class)   return Arrays.equals((int[])v1,(int[])v2);  if (type == long[].class)   return Arrays.equals((long[])v1,(long[])v2);  if (type == short[].class)   return Arrays.equals((short[])v1,(short[])v2);  assert type == boolean[].class;  return Arrays.equals((boolean[])v1,(boolean[])v2);}  }
class C{  public static DisconnectContainerFromNetworkParams create(@NotNull String netId,@NotNull DisconnectContainer disconnectContainer){  return new DisconnectContainerFromNetworkParams().withNetworkId(netId).withDisconnectContainer(disconnectContainer);}  }
class C{  public boolean extractOnlyOutgoingBatch(String nodeId,long batchId,Writer writer){  boolean extracted=false;  Node targetNode=null;  if (Constants.UNROUTED_NODE_ID.equals(nodeId)) {    targetNode=new Node(nodeId,parameterService.getNodeGroupId());  } else {    targetNode=nodeService.findNode(nodeId);  }  if (targetNode != null) {    OutgoingBatch batch=outgoingBatchService.findOutgoingBatch(batchId,nodeId);    if (batch != null) {      IDataWriter dataWriter=new ProtocolDataWriter(nodeService.findIdentityNodeId(),writer,targetNode.requires13Compatiblity());      List<OutgoingBatch> batches=new ArrayList<OutgoingBatch>(1);      batches.add(batch);      batches=extract(new ProcessInfo(),targetNode,batches,dataWriter,null,ExtractMode.EXTRACT_ONLY);      extracted=batches.size() > 0;    }  }  return extracted;}  }
class C{  @Override public void command(){  try {    createSchemaWatcher();    updateSchema(null,-1);  } catch (  Exception exc) {    log.error("Failed to update managed-schema watcher after session expiration due to: " + exc,exc);  }}  }
class C{  @Deprecated public boolean isManagingFocus(){  return false;}  }
class C{  public Boolean isMessageBusProxySupported(){  return messageBusProxySupported;}  }
class C{  public void elementType(String name,int model,int memberOf,int flags){  ElementType e=new ElementType(name,model,memberOf,flags,this);  theElementTypes.put(name.toLowerCase(),e);  if (memberOf == M_ROOT)   theRoot=e;}  }
class C{  private static int Dist(PCalLocation locA,PCalLocation locB){  return 9999 * Math.abs(locA.getLine() - locB.getLine()) + Math.abs(locA.getColumn() - locB.getColumn());}  }
class C{  public String globalInfo(){  return "Produces a random subsample of a dataset using either sampling " + "with replacement or without replacement.\n" + "The original dataset must "+ "fit entirely in memory. The number of instances in the generated "+ "dataset may be specified. The dataset must have a nominal class "+ "attribute. If not, use the unsupervised version. The filter can be "+ "made to maintain the class distribution in the subsample, or to bias "+ "the class distribution toward a uniform distribution. When used in batch "+ "mode (i.e. in the FilteredClassifier), subsequent batches are NOT resampled.";}  }
class C{  private File selectExportFile(final String title,FileNameExtensionFilter fileNameExtensionFilter){  if (Boolean.parseBoolean(System.getProperty("use.native.choosers",Boolean.toString(OSType.isMac())))) {    FileDialog exportDialog=fileDialogs.get(title);    if (exportDialog == null) {      exportDialog=new FileDialog(this,title,FileDialog.SAVE);      fileDialogs.put(title,exportDialog);    }    exportDialog.setFile(options.fileNameStem + ".xml");    exportDialog.setVisible(true);    if (exportDialog.getFile() != null) {      return new File(exportDialog.getDirectory(),exportDialog.getFile());    }  } else {    JFileChooser exportChooser=fileChoosers.get(title);    if (exportChooser == null) {      exportChooser=new JFileChooser(Utils.getCWD());      exportChooser=new JFileChooser(Utils.getCWD());      exportChooser.setFileFilter(fileNameExtensionFilter);      exportChooser.setDialogTitle(title);      fileChoosers.put(title,exportChooser);    }    exportChooser.setSelectedFile(new File(options.fileNameStem + ".xml"));    final int returnVal=exportChooser.showSaveDialog(this);    if (returnVal == JFileChooser.APPROVE_OPTION) {      File file=exportChooser.getSelectedFile();      int n=JOptionPane.YES_OPTION;      if (file.exists()) {        n=JOptionPane.showConfirmDialog(this,file.getName(),"Overwrite the existing file?",JOptionPane.YES_NO_OPTION);      }      if (n == JOptionPane.YES_OPTION) {        return file;      }    }  }  return null;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public int hashCode(){  int retval=0;  for (int i=1; i < this.key.length; i++) {    retval+=this.key[i] * i;  }  return (retval^=getAlgorithm().toLowerCase(Locale.ENGLISH).hashCode());}  }
class C{  private void rule_OptimizeMMChains(Hop hop) throws HopsException {  if (hop.getVisited() == Hop.VisitStatus.DONE)   return;  if (hop instanceof AggBinaryOp && ((AggBinaryOp)hop).isMatrixMultiply() && !((AggBinaryOp)hop).hasLeftPMInput()&& hop.getVisited() != Hop.VisitStatus.DONE) {    optimizeMMChain(hop);  }  for (  Hop hi : hop.getInput())   rule_OptimizeMMChains(hi);  hop.setVisited(Hop.VisitStatus.DONE);}  }
class C{  public void testGetDataLength(){  char expectedReturn=8;  unknownAttributesAttribute.addAttributeID((char)20);  unknownAttributesAttribute.addAttributeID((char)21);  unknownAttributesAttribute.addAttributeID((char)22);  char actualReturn=unknownAttributesAttribute.getDataLength();  assertEquals("Incorrect testGetDataLength() return value",expectedReturn,actualReturn);  unknownAttributesAttribute.addAttributeID((char)23);  actualReturn=unknownAttributesAttribute.getDataLength();  assertEquals("Incorrect testGetDataLength() return value",expectedReturn,actualReturn);}  }
class C{  public final AlertDialog shareText(CharSequence text,CharSequence type){  Intent intent=new Intent();  intent.addCategory(Intent.CATEGORY_DEFAULT);  intent.setAction(BS_PACKAGE + ".ENCODE");  intent.putExtra("ENCODE_TYPE",type);  intent.putExtra("ENCODE_DATA",text);  String targetAppPackage=findTargetAppPackage(intent);  if (targetAppPackage == null) {    return showDownloadDialog();  }  intent.setPackage(targetAppPackage);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);  attachMoreExtras(intent);  activity.startActivity(intent);  return null;}  }
class C{  public int timePassed(){  final long time=AnimationUtils.currentAnimationTimeMillis();  final long startTime=Math.min(mScrollerX.mStartTime,mScrollerY.mStartTime);  return (int)(time - startTime);}  }
class C{  private void rehash(){  int oldCapacity=m_capacity;  HashEntry[] oldTable=m_table;  int newCapacity=2 * oldCapacity + 1;  m_capacity=newCapacity;  m_threshold=(int)(newCapacity * m_loadFactor);  m_table=new HashEntry[newCapacity];  for (int i=oldCapacity - 1; i >= 0; i--) {    for (HashEntry old=oldTable[i]; old != null; ) {      HashEntry e=old;      old=old.next;      int newIndex=e.hash % newCapacity;      if (newIndex < 0)       newIndex=-newIndex;      e.next=m_table[newIndex];      m_table[newIndex]=e;    }  }}  }
class C{  public static boolean checkAncestor(SootClass me,SootClass posAncestor){  SootClass parent=me.getSuperclass();  SootClass objClass=Scene.v().getSootClass("java.lang.Object");  while (parent != null) {    if (parent.equals(posAncestor))     return true;    if (parent.equals(objClass))     return false;    parent=parent.getSuperclass();  }  return false;}  }
class C{  protected void binary(String main,String ceylon){  String providerPreSrc="provider/" + ceylon + "_pre.ceylon";  String providerPostSrc="provider/" + ceylon + "_post.ceylon";  String clientSrc="client/" + ceylon + "_client.ceylon";  compile(providerPreSrc,providerModuleSrc,providerPackageSrc);  compile(clientSrc,clientModuleSrc);  compile(providerPostSrc,providerModuleSrc,providerPackageSrc);  ModuleWithArtifact clientModule=new ModuleWithArtifact(clientModuleName,"0.1");  ModuleWithArtifact providerModule=new ModuleWithArtifact(providerModuleName,"0.1");  run(clientModuleName + "." + main,clientModule,providerModule);}  }
class C{  private Object populate(InputNode node,Object result) throws Exception {  Collection list=(Collection)result;  while (true) {    InputNode next=node.getNext();    Class expect=entry.getType();    if (next == null) {      return list;    }    list.add(root.read(next,expect));  }}  }
class C{  public URLLabel(final String url,final String text){  this.url=url;  setText(text);  setToolTipText(url);  installListener(GUIUtils.getURLInputListener(url));}  }
class C{  public static int[] indexSort(Comparable[] a){  int n=a.length;  int[] index=new int[n];  for (int i=0; i < n; i++)   index[i]=i;  int[] aux=new int[n];  sort(a,index,aux,0,n - 1);  return index;}  }
class C{  public StandardizedSemIm(SemIm im){  this(im,Initialization.CALCULATE_FROM_SEM);}  }
class C{  public SearchSourceBuilder field(String name){  if (fieldNames == null) {    fieldNames=new ArrayList<>();  }  fieldNames.add(name);  return this;}  }
class C{  private static String[] preProcessArgs(String[] unprocessedArgs){  List<String> args=new LinkedList<>();  Collections.addAll(args,unprocessedArgs);  args.remove(0);  Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");  Pattern quotesPattern=Pattern.compile("^['\"](.*)['\"]$");  List<String> processedArgs=new ArrayList<>(args.size());  for (  String arg : args) {    Matcher matcher=argPattern.matcher(arg);    if (matcher.matches()) {      processedArgs.add(matcher.group(1));      String value=matcher.group(2);      Matcher quotesMatcher=quotesPattern.matcher(value);      if (quotesMatcher.matches()) {        processedArgs.add(quotesMatcher.group(1));      } else {        processedArgs.add(value);      }    } else {      processedArgs.add(arg);    }  }  return processedArgs.toArray(new String[args.size()]);}  }
class C{  private JsonUtil(){}  }
class C{  public String toString(){  int iMax=array.length - 1;  if (iMax == -1)   return "[]";  StringBuilder b=new StringBuilder();  b.append('[');  for (int i=0; ; i++) {    b.append(getRaw(byteOffset(i)));    if (i == iMax)     return b.append(']').toString();    b.append(',').append(' ');  }}  }
class C{  public List<Vertex> orderedRelations(Primitive primitive){  return orderedRelations(this.network.createVertex(primitive));}  }
class C{  public static TypeReference newExceptionReference(int exceptionIndex){  return new TypeReference((THROWS << 24) | (exceptionIndex << 8));}  }
class C{  @Override public void onBindViewHolder(ListBaseViewHolder holder,int position){  if (holder == null)   return;  holder.setComponentUsing(true);  WXComponent component=getChild(position);  if (component == null || (component instanceof WXRefresh) || (component instanceof WXLoading) || (component.getDomObject() != null && component.getDomObject().isFixed())) {    if (WXEnvironment.isApkDebugable()) {      WXLogUtils.d(TAG,"Bind WXRefresh & WXLoading " + holder);    }    return;  }  if (component != null && holder.getComponent() != null && holder.getComponent() instanceof WXCell) {    holder.getComponent().bindData(component);  }}  }
class C{  public Object parse(Reader in,ContainerFactory containerFactory) throws IOException, ParseException {  reset(in);  LinkedList statusStack=new LinkedList();  LinkedList valueStack=new LinkedList();  try {    do {      nextToken();switch (status) {case S_INIT:switch (token.type) {case Yytoken.TYPE_VALUE:          status=S_IN_FINISHED_VALUE;        statusStack.addFirst(new Integer(status));      valueStack.addFirst(token.value);    break;case Yytoken.TYPE_LEFT_BRACE:  status=S_IN_OBJECT;statusStack.addFirst(new Integer(status));valueStack.addFirst(createObjectContainer(containerFactory));break;case Yytoken.TYPE_LEFT_SQUARE:status=S_IN_ARRAY;statusStack.addFirst(new Integer(status));valueStack.addFirst(createArrayContainer(containerFactory));break;default :status=S_IN_ERROR;}break;case S_IN_FINISHED_VALUE:if (token.type == Yytoken.TYPE_EOF) return valueStack.removeFirst(); else throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);case S_IN_OBJECT:switch (token.type) {case Yytoken.TYPE_COMMA:break;case Yytoken.TYPE_VALUE:if (token.value instanceof String) {String key=(String)token.value;valueStack.addFirst(key);status=S_PASSED_PAIR_KEY;statusStack.addFirst(new Integer(status));} else {status=S_IN_ERROR;}break;case Yytoken.TYPE_RIGHT_BRACE:if (valueStack.size() > 1) {statusStack.removeFirst();valueStack.removeFirst();status=peekStatus(statusStack);} else {status=S_IN_FINISHED_VALUE;}break;default :status=S_IN_ERROR;break;}break;case S_PASSED_PAIR_KEY:switch (token.type) {case Yytoken.TYPE_COLON:break;case Yytoken.TYPE_VALUE:statusStack.removeFirst();String key=(String)valueStack.removeFirst();Map parent=(Map)valueStack.getFirst();parent.put(key,token.value);status=peekStatus(statusStack);break;case Yytoken.TYPE_LEFT_SQUARE:statusStack.removeFirst();key=(String)valueStack.removeFirst();parent=(Map)valueStack.getFirst();List newArray=createArrayContainer(containerFactory);parent.put(key,newArray);status=S_IN_ARRAY;statusStack.addFirst(new Integer(status));valueStack.addFirst(newArray);break;case Yytoken.TYPE_LEFT_BRACE:statusStack.removeFirst();key=(String)valueStack.removeFirst();parent=(Map)valueStack.getFirst();Map newObject=createObjectContainer(containerFactory);parent.put(key,newObject);status=S_IN_OBJECT;statusStack.addFirst(new Integer(status));valueStack.addFirst(newObject);break;default :status=S_IN_ERROR;}break;case S_IN_ARRAY:switch (token.type) {case Yytoken.TYPE_COMMA:break;case Yytoken.TYPE_VALUE:List val=(List)valueStack.getFirst();val.add(token.value);break;case Yytoken.TYPE_RIGHT_SQUARE:if (valueStack.size() > 1) {statusStack.removeFirst();valueStack.removeFirst();status=peekStatus(statusStack);} else {status=S_IN_FINISHED_VALUE;}break;case Yytoken.TYPE_LEFT_BRACE:val=(List)valueStack.getFirst();Map newObject=createObjectContainer(containerFactory);val.add(newObject);status=S_IN_OBJECT;statusStack.addFirst(new Integer(status));valueStack.addFirst(newObject);break;case Yytoken.TYPE_LEFT_SQUARE:val=(List)valueStack.getFirst();List newArray=createArrayContainer(containerFactory);val.add(newArray);status=S_IN_ARRAY;statusStack.addFirst(new Integer(status));valueStack.addFirst(newArray);break;default :status=S_IN_ERROR;}break;case S_IN_ERROR:throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}if (status == S_IN_ERROR) {throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}} while (token.type != Yytoken.TYPE_EOF);} catch (IOException ie) {throw ie;}throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}  }
class C{  public EnumLiteral basicGetProperty(){  return property;}  }
class C{  private boolean updateBatch(){  if (getGL_JournalBatch_ID() != 0) {    StringBuilder sql=new StringBuilder("UPDATE GL_JournalBatch jb").append(" SET (TotalDr, TotalCr) = (SELECT COALESCE(SUM(TotalDr),0), COALESCE(SUM(TotalCr),0)").append(" FROM GL_Journal j WHERE j.IsActive='Y' AND jb.GL_JournalBatch_ID=j.GL_JournalBatch_ID) ").append("WHERE GL_JournalBatch_ID=").append(getGL_JournalBatch_ID());    int no=DB.executeUpdate(sql.toString(),get_TrxName());    if (no != 1)     log.warning("afterSave - Update Batch #" + no);    return no == 1;  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:35.897 -0500",hash_original_method="2000A91F89DD442E06AD762821BFEEA3",hash_generated_method="6580BADA867DF5458EDFF68BF25A56B3") public boolean isComplete(){  return this.complete;}  }
class C{  public final void testGetAlgParameters04() throws IOException {  boolean performed=false;  for (int i=0; i < EncryptedPrivateKeyInfoData.algName0.length; i++) {    try {      AlgorithmParameters ap=AlgorithmParameters.getInstance(EncryptedPrivateKeyInfoData.algName0[i][0]);      ap.init(EncryptedPrivateKeyInfoData.getParametersEncoding(EncryptedPrivateKeyInfoData.algName0[i][0]));      EncryptedPrivateKeyInfo epki=new EncryptedPrivateKeyInfo(ap,EncryptedPrivateKeyInfoData.encryptedData);      assertSame(ap,epki.getAlgParameters());      performed=true;    } catch (    NoSuchAlgorithmException allowedFailure) {    }  }  assertTrue("Test not performed",performed);}  }
class C{  @Override public boolean equals(Object o){  if (this == o)   return true;  if (!(o instanceof ExpressionToken))   return false;  ExpressionToken that=(ExpressionToken)o;  if (!field.equals(that.field))   return false;  if (op != that.op)   return false;  if (!value.equals(that.value))   return false;  return tokenExtInfo.equals(that.tokenExtInfo);}  }
class C{  public SendableTextMessage build(){  return new SendableTextMessage(message,replyTo,disableWebPagePreview,replyMarkup,parseMode,disableNotification);}  }
class C{  public CDebuggerChooserPanel(final INaviAddressSpace addressSpace,final INaviModule module,final IDebuggerContainer container){  super(new BorderLayout());  m_addressSpace=addressSpace;  m_module=module;  final JPanel debuggerChooserPanel=new JPanel(new GridLayout(3,1,5,5));  debuggerChooserPanel.setBorder(new EmptyBorder(0,0,5,0));  final JPanel debuggerPanel=new JPanel(new BorderLayout());  if (addressSpace == null) {    final JLabel debuggerNameLabel=new JLabel("Debugger" + ":");    debuggerNameLabel.setPreferredSize(new Dimension(170,25));    m_debuggerCombo=new CDebuggerComboBox(new CDebuggerComboModel(container));    m_debuggerCombo.setBorder(new EmptyBorder(0,5,0,0));    updateDebuggersComboBox();    debuggerPanel.add(debuggerNameLabel,BorderLayout.WEST);    debuggerPanel.add(m_debuggerCombo,BorderLayout.CENTER);    m_imageBaseAddr.setText(module.getConfiguration().getImageBase().toHexString());  } else {    m_debuggerCombo=null;    final JLabel debuggerNameLabel=new JLabel("Name");    debuggerNameLabel.setPreferredSize(new Dimension(170,25));    m_debuggerName.setBorder(new EmptyBorder(0,5,0,0));    updateDebuggerLabel();    debuggerPanel.add(debuggerNameLabel,BorderLayout.WEST);    debuggerPanel.add(m_debuggerName,BorderLayout.CENTER);    m_imageBaseAddr.setText(addressSpace.getContent().getImageBase(module).toHexString());  }  m_fileBaseAddr.setText(module.getConfiguration().getFileBase().toHexString());  debuggerChooserPanel.add(debuggerPanel);  debuggerChooserPanel.add(new CLabeledComponent("Original Base Address" + ":",new COriginalAddressHelp(),m_fileBaseAddr),BorderLayout.SOUTH);  debuggerChooserPanel.add(new CLabeledComponent("Relocated Base Address" + ":",new CRelocatedAddressHelp(),m_imageBaseAddr),BorderLayout.SOUTH);  setBorder(new TitledBorder((addressSpace == null ? "Module" : "Address Space") + " " + "Debugger"));  add(debuggerChooserPanel,BorderLayout.CENTER);  final UpdateListener updateListener=new UpdateListener();  m_fileBaseAddr.getDocument().addDocumentListener(updateListener);  m_imageBaseAddr.getDocument().addDocumentListener(updateListener);  if (m_debuggerCombo != null) {    m_debuggerCombo.addActionListener(updateListener);  }  m_module.addListener(m_listener);  if (m_addressSpace != null) {    m_addressSpace.addListener(m_addressSpaceListener);    m_addressSpace.getConfiguration().addListener(m_addressSpaceConfigurationListener);  }}  }
class C{  @Override public void startActivityForResult(Intent intent,int requestCode){  super.startActivityForResult(intent,requestCode);  mIsStartingActivity=true;  overridePendingTransition(R.anim.abc_fade_in,0);}  }
class C{  protected static final Map<Integer,Set<CTag>> loadTags(final CConnection connection,final INaviModule module,final CTagManager viewTagManager) throws SQLException {  return PostgreSQLViewTagLoader.loadViewTags(connection,CTableNames.MODULE_VIEWS_TABLE,"module_id",module.getConfiguration().getId(),viewTagManager);}  }
class C{  public void disconnectAll(){  List<ServerConnection> list=new ArrayList<ServerConnection>();  getConnections(list);  for (  ServerConnection connection : list) {    OpcTcpServerConnection c=(OpcTcpServerConnection)connection;    c.close();  }}  }
class C{  public static <T>LazyListX<T> fromPublisher(Publisher<? extends T> publisher){  return fromStreamS(ReactiveSeq.fromPublisher((Publisher<T>)publisher));}  }
class C{  public SetRegisterParser(final ClientReader clientReader){  super(clientReader,DebugCommandType.RESP_SET_REGISTER_SUCCESS);}  }
class C{  public void listen(int port) throws IOException {  _connection_listener=new ConnectionListener(port,this);  _connection_listener.start();}  }
class C{  protected void checkConfigurationConsistency0(IgniteSpiContext spiCtx,ClusterNode node,boolean starting) throws IgniteSpiException {}  }
class C{  protected SnmpSubRequestHandler(SnmpMibAgent agent,SnmpPdu req){  if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {    SNMP_ADAPTOR_LOGGER.logp(Level.FINER,SnmpSubRequestHandler.class.getName(),"constructor","creating instance for request " + String.valueOf(req.requestId));  }  version=req.version;  type=req.type;  this.agent=agent;  reqPdu=req;  int length=req.varBindList.length;  translation=new int[length];  varBind=new NonSyncVector<SnmpVarBind>(length);}  }
class C{  public static short toShort(byte[] bytes,int index){  return (short)((bytes[index + 1] << 8) | (bytes[index] & 0xff));}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();}throw new IllegalStateException();}  }
class C{  public List<GraphNode> topoSort(Collection<GraphNode> universe){  for (  GraphNode node : universe) {    if (isUnvisited(node)) {      visitNode(node);    }  }  return topoOrder;}  }
class C{  public void load(File file,String baseURI,RDFFormat dataFormat,RDFHandler rdfHandler) throws IOException, RDFParseException, RDFHandlerException {  if (baseURI == null) {    baseURI=file.toURI().toString();  }  if (dataFormat == null) {    dataFormat=Rio.getParserFormatForFileName(file.getName()).orElseThrow(null);  }  try (InputStream in=new FileInputStream(file)){    load(in,baseURI,dataFormat,rdfHandler);  } }  }
class C{  public boolean createBlockSnapshotRollbackStep(String stepId){  WorkflowStepCompleter.stepExecuting(stepId);  _log.info(String.format("rollbackCreateBlockSnapshotStep : Nothing to rollback for step id [%s]",stepId));  WorkflowStepCompleter.stepSucceded(stepId);  return true;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddress;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  testAddress=(Element)elementList.item(0);{    boolean success=false;    try {      testAddress.setAttribute("","value");    } catch (    DOMException ex) {      success=(ex.code == DOMException.INVALID_CHARACTER_ERR);    }    assertTrue("throw_INVALID_CHARACTER_ERR",success);  }}  }
class C{  static public FunctionNode MAX(final ValueExpressionNode v1,final ValueExpressionNode v2){  return new FunctionNode(FunctionRegistry.MAX,null,new ValueExpressionNode[]{v1,v2});}  }
class C{  public void testPositionCheck() throws Exception {  RelayLogPosition rlp=new RelayLogPosition();  rlp.setPosition(new File("/var/lib/mysql/mysql-bin.000077"),2333308);  assertFalse("File lower, offset lower",rlp.hasReached("mysql-bin.000078",0));  assertFalse("File lower, offset match",rlp.hasReached("mysql-bin.000078",2333308));  assertFalse("File lower, offset higher",rlp.hasReached("mysql-bin.000078",2333309));  assertTrue("File and offset match",rlp.hasReached("mysql-bin.000077",2333308));  assertTrue("File equal, offset higher",rlp.hasReached("mysql-bin.000077",2333307));  assertTrue("File higher, offset lower",rlp.hasReached("mysql-bin.000076",0));  assertTrue("File higher, offset higher",rlp.hasReached("mysql-bin.000076",2333309));}  }
class C{  public XObject execute(XPathContext xctxt,int context,DTM dtm,int expType) throws javax.xml.transform.TransformerException {  if (m_whatToShow == DTMFilter.SHOW_ALL)   return m_score;  int nodeBit=(m_whatToShow & (0x00000001 << ((dtm.getNodeType(context)) - 1)));switch (nodeBit) {case DTMFilter.SHOW_DOCUMENT_FRAGMENT:case DTMFilter.SHOW_DOCUMENT:    return SCORE_OTHER;case DTMFilter.SHOW_COMMENT:  return m_score;case DTMFilter.SHOW_CDATA_SECTION:case DTMFilter.SHOW_TEXT:return m_score;case DTMFilter.SHOW_PROCESSING_INSTRUCTION:return subPartMatch(dtm.getNodeName(context),m_name) ? m_score : SCORE_NONE;case DTMFilter.SHOW_NAMESPACE:{String ns=dtm.getLocalName(context);return (subPartMatch(ns,m_name)) ? m_score : SCORE_NONE;}case DTMFilter.SHOW_ATTRIBUTE:case DTMFilter.SHOW_ELEMENT:{return (m_isTotallyWild || (subPartMatchNS(dtm.getNamespaceURI(context),m_namespace) && subPartMatch(dtm.getLocalName(context),m_name))) ? m_score : SCORE_NONE;}default :return SCORE_NONE;}}  }
class C{  public MethodIdsSection(DexFile file){  super("method_ids",file);  methodIds=new TreeMap<CstBaseMethodRef,MethodIdItem>();}  }
class C{  public FastStringBuffer insert(int offset,String str){  int len=str.length();  int newCount=count + len;  if (newCount > value.length) {    resizeForMinimum(newCount);  }  System.arraycopy(value,offset,value,offset + len,count - offset);  str.getChars(0,len,value,offset);  count=newCount;  return this;}  }
class C{  protected void callChildVisitors(XSLTVisitor visitor,boolean callAttrs){  if (null != m_selectPattern)   m_selectPattern.getExpression().callVisitors(m_selectPattern,visitor);  super.callChildVisitors(visitor,callAttrs);}  }
class C{  private boolean checkExceptionIsRetriable(SQLException e,String shardName,String methodName){  if (MySQLBackendUtils.isExceptionIndicativeOfOverload(e)) {    LOG.debug("MySQL shard {} seems overloaded:",shardName,e);    Stats.incr("mysql-overload-" + methodName);    return true;  } else   if (MySQLBackendUtils.isDeadlockException(e)) {    Stats.incr("mysql-deadlock-" + methodName);    return true;  } else   if (MySQLBackendUtils.isDatabaseDoesNotExistException(e)) {    Stats.incr("mysql-queue-not-found-" + methodName);    return false;  }  return false;}  }
class C{  protected void mergePairs(KMLStyleMap sourceMap){  List<KMLPair> pairsCopy=new ArrayList<KMLPair>(this.getPairs().size());  Collections.copy(pairsCopy,this.getPairs());  for (  KMLPair sourcePair : sourceMap.getPairs()) {    String id=sourcePair.getId();    if (!WWUtil.isEmpty(id)) {      for (      KMLPair existingPair : pairsCopy) {        String currentId=existingPair.getId();        if (!WWUtil.isEmpty(currentId) && currentId.equals(id)) {          this.getPairs().remove(existingPair);        }      }    }    this.getPairs().add(sourcePair);  }}  }
class C{  public String print(ReadablePartial partial){  StringBuffer buf=new StringBuffer(requirePrinter().estimatePrintedLength());  printTo(buf,partial);  return buf.toString();}  }
class C{  private void createNotification(final int messageResId,final int defaults){  final Intent parentIntent=new Intent(this,FeaturesActivity.class);  parentIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  final Intent targetIntent=new Intent(this,TemplateActivity.class);  final Intent disconnect=new Intent(ACTION_DISCONNECT);  final PendingIntent disconnectAction=PendingIntent.getBroadcast(this,DISCONNECT_REQ,disconnect,PendingIntent.FLAG_UPDATE_CURRENT);  final PendingIntent pendingIntent=PendingIntent.getActivities(this,OPEN_ACTIVITY_REQ,new Intent[]{parentIntent,targetIntent},PendingIntent.FLAG_UPDATE_CURRENT);  final NotificationCompat.Builder builder=new NotificationCompat.Builder(this);  builder.setContentIntent(pendingIntent);  builder.setContentTitle(getString(R.string.app_name)).setContentText(getString(messageResId,getDeviceName()));  builder.setSmallIcon(R.drawable.ic_stat_notify_template);  builder.setShowWhen(defaults != 0).setDefaults(defaults).setAutoCancel(true).setOngoing(true);  builder.addAction(new NotificationCompat.Action(R.drawable.ic_action_bluetooth,getString(R.string.template_notification_action_disconnect),disconnectAction));  final Notification notification=builder.build();  final NotificationManager nm=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);  nm.notify(NOTIFICATION_ID,notification);}  }
class C{  @Override public String toString(){  return "RBF kernel: K(x,y) = e^-(" + getGamma() + "* <x-y,x-y>^2)";}  }
class C{  public ToolBarBorder(Color shadow,Color highlight,Insets insets){  this.highlight=highlight;  this.shadow=shadow;  this.insets=insets;}  }
class C{  public String toString(){  StringBuilder buf=new StringBuilder();  buf.append("\nUpdate graph:\n");  Collection<String> factors=connectivity.keySet();  for (  String factor : factors) {    buf.append("\n");    buf.append(factor);    buf.append("\t<-- ");    Collection<LaggedFactor> edges=connectivity.get(factor);    for (    LaggedFactor edge : edges) {      buf.append("\t");      buf.append(edge);    }  }  buf.append("\n");  return buf.toString();}  }
class C{  public static NumberArrayAdapter<Double,double[]> doubleArrayAdapter(){  return DOUBLEARRAYADAPTER;}  }
class C{  public boolean isSelectable(OMGraphic omg){  return false;}  }
class C{  public void addStartPaths(FST.Arc<T> node,T startOutput,boolean allowEmptyString,IntsRefBuilder input,float boost,CharSequence context) throws IOException {  if (startOutput.equals(fst.outputs.getNoOutput())) {    startOutput=fst.outputs.getNoOutput();  }  FSTPath<T> path=new FSTPath<>(startOutput,node,input,boost,context);  fst.readFirstTargetArc(node,path.arc,bytesReader);  while (true) {    if (allowEmptyString || path.arc.label != FST.END_LABEL) {      addIfCompetitive(path);    }    if (path.arc.isLast()) {      break;    }    fst.readNextArc(path.arc,bytesReader);  }}  }
class C{  public static float svgVerticalCoordinateToUserSpace(String s,String attr,Context ctx){  return svgToUserSpace(s,attr,VERTICAL_LENGTH,ctx);}  }
class C{  public long toImaginary(){  return _imag;}  }
class C{  @Override public void selectionChanged(CalendarSelectionEvent event){  LocalDate oldDate=event.getOldDate();  LocalDate newDate=event.getNewDate();  String oldDateString=PickerUtilities.localDateToString(oldDate,"(null)");  String newDateString=PickerUtilities.localDateToString(newDate,"(null)");  String messageStart="\nIndependent Calendar Panel: The selected date has changed from '";  String fullMessage=messageStart + oldDateString + "' to '"+ newDateString+ "'. ";  fullMessage+=(event.isDuplicate()) ? "(Event marked as duplicate.)" : "";  if (!panel.messageTextArea.getText().startsWith(messageStart)) {    panel.messageTextArea.setText("");  }  panel.messageTextArea.append(fullMessage);}  }
class C{  public String part(int idx){  assert idx < parts.length;  return parts[idx];}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  private Map<String,List<StoragePort>> discoverPorts(StorageSystem storageSystem,List<StorageVirtualMachineInfo> svms,List<StorageHADomain> haDomains) throws NetAppCException {  URI storageSystemId=storageSystem.getId();  HashMap<String,List<StoragePort>> storagePorts=new HashMap<String,List<StoragePort>>();  List<StoragePort> newStoragePorts=new ArrayList<StoragePort>();  List<StoragePort> existingStoragePorts=new ArrayList<StoragePort>();  try {    _logger.info("discoverPorts for storage system {} - start",storageSystemId);    StoragePort storagePort=null;    if (svms != null && !svms.isEmpty()) {      for (      StorageVirtualMachineInfo svm : svms) {        for (        SVMNetInfo intf : svm.getInterfaces()) {          if (intf.getRole().contains(MANAGEMENT_INTERFACE)) {            continue;          }          URIQueryResultList results=new URIQueryResultList();          String portNativeGuid=NativeGUIDGenerator.generateNativeGuid(storageSystem,intf.getIpAddress(),NativeGUIDGenerator.PORT);          _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getStoragePortByNativeGuidConstraint(portNativeGuid),results);          storagePort=null;          if (results.iterator().hasNext()) {            StoragePort tmpPort=_dbClient.queryObject(StoragePort.class,results.iterator().next());            if (tmpPort.getStorageDevice().equals(storageSystem.getId()) && tmpPort.getPortGroup().equals(svm.getName())) {              storagePort=tmpPort;              _logger.debug("found duplicate intf {}",intf.getIpAddress());            }          }          if (storagePort == null) {            storagePort=new StoragePort();            storagePort.setId(URIUtil.createId(StoragePort.class));            storagePort.setTransportType("IP");            storagePort.setNativeGuid(portNativeGuid);            storagePort.setLabel(portNativeGuid);            storagePort.setStorageDevice(storageSystemId);            storagePort.setPortName(intf.getIpAddress());            storagePort.setPortNetworkId(intf.getIpAddress());            storagePort.setPortGroup(svm.getName());            storagePort.setStorageHADomain(findMatchingHADomain(svm.getName(),haDomains));            storagePort.setRegistrationStatus(RegistrationStatus.REGISTERED.toString());            _logger.info("Creating new storage port using NativeGuid : {}",portNativeGuid);            newStoragePorts.add(storagePort);          } else {            existingStoragePorts.add(storagePort);          }          storagePort.setDiscoveryStatus(DiscoveryStatus.VISIBLE.name());          storagePort.setCompatibilityStatus(DiscoveredDataObject.CompatibilityStatus.COMPATIBLE.name());        }      }    } else {      URIQueryResultList results=new URIQueryResultList();      String portNativeGuid=NativeGUIDGenerator.generateNativeGuid(storageSystem,storageSystem.getIpAddress(),NativeGUIDGenerator.PORT);      _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getStoragePortByNativeGuidConstraint(portNativeGuid),results);      if (results.iterator().hasNext()) {        StoragePort tmpPort=_dbClient.queryObject(StoragePort.class,results.iterator().next());        if (tmpPort.getStorageDevice().equals(storageSystem.getId()) && tmpPort.getPortGroup().equals(storageSystem.getSerialNumber())) {          storagePort=tmpPort;          _logger.debug("found duplicate dm intf {}",storageSystem.getSerialNumber());        }      }      if (storagePort == null) {        storagePort=new StoragePort();        storagePort.setId(URIUtil.createId(StoragePort.class));        storagePort.setTransportType("IP");        storagePort.setNativeGuid(portNativeGuid);        storagePort.setLabel(portNativeGuid);        storagePort.setStorageDevice(storageSystemId);        storagePort.setPortName(storageSystem.getIpAddress());        storagePort.setPortNetworkId(storageSystem.getIpAddress());        storagePort.setPortGroup(storageSystem.getSerialNumber());        storagePort.setRegistrationStatus(RegistrationStatus.REGISTERED.toString());        _logger.info("Creating new storage port using NativeGuid : {}",portNativeGuid);        newStoragePorts.add(storagePort);      } else {        existingStoragePorts.add(storagePort);      }      storagePort.setCompatibilityStatus(DiscoveredDataObject.CompatibilityStatus.COMPATIBLE.name());    }    _logger.info("discoverPorts for storage system {} - complete",storageSystemId);    storagePorts.put(NEW,newStoragePorts);    storagePorts.put(EXISTING,existingStoragePorts);    return storagePorts;  } catch (  Exception e) {    _logger.error("discoverPorts failed. Storage system: " + storageSystemId,e);    throw new NetAppCException("discoverPorts failed. Storage system: " + storageSystemId,e);  }}  }
class C{  public <T extends Status>void removeAll(Class<T> statusClass){  List<T> interestingStatuses=getAllStatusByClass(statusClass);  for (  Status status : interestingStatuses) {    remove(status);  }}  }
class C{  public LoggingFraction customFormatter(String name,String module,String className,Properties properties){  Map<Object,Object> formatterProperties=new HashMap<>();  final Enumeration<?> names=properties.propertyNames();  while (names.hasMoreElements()) {    final String nextElement=(String)names.nextElement();    formatterProperties.put(nextElement,properties.getProperty(nextElement));  }  customFormatter(new CustomFormatter(name).module(module).attributeClass(className).properties(formatterProperties));  return this;}  }
class C{  protected void addVisiblePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Type_visible_feature"),getString("_UI_PropertyDescriptor_description","_UI_Type_visible_feature","_UI_Type_type"),TypesPackage.Literals.TYPE__VISIBLE,true,false,false,ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,null,null));}  }
class C{  public static Map<PsiClass,Collection<PsiMethod>> filterAnnotations(String parameter,Set<String> values,Collection<PsiClass> classes){  Map<PsiClass,Collection<PsiMethod>> results=new HashMap<PsiClass,Collection<PsiMethod>>();  Set<String> test=new HashSet<String>(1);  test.add(TEST_ANNOTATION_FQN);  ContainerUtil.addAll(test,CONFIG_ANNOTATIONS_FQN);  for (  PsiClass psiClass : classes) {    if (isBrokenPsiClass(psiClass))     continue;    PsiAnnotation annotation;    try {      annotation=AnnotationUtil.findAnnotation(psiClass,test);    } catch (    Exception e) {      LOGGER.error("Exception trying to findAnnotation on " + psiClass.getClass().getName() + ".\n\n"+ e.getMessage());      annotation=null;    }    if (annotation != null) {      if (isAnnotatedWithParameter(annotation,parameter,values)) {        results.put(psiClass,new LinkedHashSet<PsiMethod>());      }    } else {      Collection<String> matches=extractAnnotationValuesFromJavaDoc(getTextJavaDoc(psiClass),parameter);      for (      String s : matches) {        if (values.contains(s)) {          results.put(psiClass,new LinkedHashSet<PsiMethod>());          break;        }      }    }    PsiMethod[] methods=psiClass.getMethods();    for (    PsiMethod method : methods) {      if (method != null) {        annotation=AnnotationUtil.findAnnotation(method,test);        if (annotation != null) {          if (isAnnotatedWithParameter(annotation,parameter,values)) {            if (results.get(psiClass) == null)             results.put(psiClass,new LinkedHashSet<PsiMethod>());            results.get(psiClass).add(method);          }        } else {          Collection<String> matches=extractAnnotationValuesFromJavaDoc(getTextJavaDoc(psiClass),parameter);          for (          String s : matches) {            if (values.contains(s)) {              results.get(psiClass).add(method);            }          }        }      }    }  }  return results;}  }
class C{  private static DataStream<String> sourceStream(BenchmarkConfig config,StreamExecutionEnvironment env){  RichParallelSourceFunction<String> source;  String sourceName;  if (config.useLocalEventGenerator) {    EventGeneratorSource eventGenerator=new EventGeneratorSource(config);    source=eventGenerator;    sourceName="EventGenerator";    prepareRedis(config,eventGenerator);  } else {    source=kafkaSource(config);    sourceName="Kafka";  }  return env.addSource(source,sourceName);}  }
class C{  public DocumentCharacterIterator(Document document,int first,int last) throws BadLocationException {  if (document == null)   throw new NullPointerException();  if (first < 0 || first > last)   throw new BadLocationException();  if (last > document.getLength()) {    throw new BadLocationException();  }  fDocument=document;  fFirst=first;  fLast=last;  fIndex=first;  invariant();}  }
class C{  public double volume(){  return size().getX() * size().getY() * size().getZ();}  }
class C{  public void logVelocityMessage(int level,String message){  logString=message;}  }
class C{  protected void enqueue(Runnable runnable){synchronized (LOCK) {    if (this.handler == null) {      if (openCount <= 0) {        throw new IllegalStateException("CameraThread is not open");      }      this.thread=new HandlerThread("CameraThread");      this.thread.start();      this.handler=new Handler(thread.getLooper());    }    this.handler.post(runnable);  }}  }
class C{  public boolean isAutomaticExposureCompensation(){  return autoExpoComp;}  }
class C{  public boolean containsKey(EObject elementInIntermediateModel){  return im2ast.containsKey(elementInIntermediateModel);}  }
class C{  @Override public boolean job(){  boolean ret=true;  if (esc != null && colcfg != null && !querylist.isEmpty()) {    if (sem.tryAcquire()) {      try {        currentquery=querylist.keys(true).next();        SolrDocumentList xdocs=esc.getDocumentListByQuery(currentquery,null,start,chunksize);        if (xdocs.size() == 0) {          if (start > 0) {            esc.commit(true);            start=0;          } else {            querylist.delete(currentquery);          }          if (chunksize < 100) {            chunksize=chunksize + 10;          }        } else {          docstoreindex=(int)xdocs.getNumFound();          ConcurrentLog.info("MIGRATION-REINDEX","reindex docs with query=" + currentquery + " found="+ docstoreindex+ " start="+ start);          start=start + chunksize;          querylist.set(currentquery,docstoreindex);          for (          SolrDocument doc : xdocs) {            SolrInputDocument idoc=colcfg.toSolrInputDocument(doc);            Switchboard.getSwitchboard().index.putDocument(idoc);            processed++;          }        }      } catch (      final IOException ex) {        ConcurrentLog.warn("MIGRATION-REINDEX","remove following query from list due to error, q=" + currentquery);        querylist.delete(currentquery);        ConcurrentLog.logException(ex);      } finally {        sem.release();      }    }  } else {    ret=false;  }  if (querylist.isEmpty()) {    Switchboard.getSwitchboard().terminateThread(ReindexSolrBusyThread.THREAD_NAME,false);    ret=false;  }  return ret;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:26.939 -0500",hash_original_method="329F096E2383A78FF3370B422D55028D",hash_generated_method="ADD1FDEA2659698689B0866898AF2F6A") public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  journalWriter.flush();}  }
class C{  @Override public <K extends ValueKind<K>>K toRegisterKind(K kind){switch ((SPARCKind)kind.getPlatformKind()) {case BYTE:case HWORD:    return kind.changeType(SPARCKind.WORD);default :  return kind;}}  }
class C{  public boolean toData(Object obj,PdxWriter writer){  return manager.writeData(writer,obj);}  }
class C{  private boolean verifyFeedRequest(String cookie,String feed,String token,String timestamp,String method){  int url_i;  for (url_i=0; url_i < acceptedFeedPrefixList.length; url_i++) {    if (feed.toLowerCase().startsWith(acceptedFeedPrefixList[url_i].toLowerCase())) {      break;    }  }  if (url_i == acceptedFeedPrefixList.length) {    return false;  }  return SecureUrl.isTokenValid(token,cookie,feed,method,timestamp);}  }
class C{  public ToolBarLayout(){  this(X_AXIS);}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public OptionSet removeUriHost(){  this.uri_host=null;  return this;}  }
class C{  void markDeleted(){  this.versionDeleted=true;  this.versionTimestamp=0L;  if (vbuf != null)   this.vbuf.reset();  this.isNull=true;}  }
class C{  @Override public void onError(Throwable throwable){  Iterator<SpdyStream> i=activeStreams.iterator();  while (i.hasNext()) {    SpdyStream stream=i.next();    i.remove();    stream.close(throwable);  }  closeFuture.fail(throwable);}  }
class C{  public String toString(){  String precisionStr=new DecimalFormat("0.#E0").format(Math.pow(2,precision));  return "Leap indicator: " + leapIndicator + "\n"+ "Version: "+ version+ "\n"+ "Mode: "+ mode+ "\n"+ "Stratum: "+ stratum+ "\n"+ "Poll: "+ pollInterval+ "\n"+ "Precision: "+ precision+ " ("+ precisionStr+ " seconds)\n"+ "Root delay: "+ new DecimalFormat("0.00").format(rootDelay * 1000)+ " ms\n"+ "Root dispersion: "+ new DecimalFormat("0.00").format(rootDispersion * 1000)+ " ms\n"+ "Reference identifier: "+ referenceIdentifierToString(referenceIdentifier,stratum,version)+ "\n"+ "Reference timestamp: "+ timestampToString(referenceTimestamp)+ "\n"+ "Originate timestamp: "+ timestampToString(originateTimestamp)+ "\n"+ "Receive timestamp:   "+ timestampToString(receiveTimestamp)+ "\n"+ "Transmit timestamp:  "+ timestampToString(transmitTimestamp);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Node(Animator animation){  this.animation=animation;}  }
class C{  @Override public void onSuccess(IMqttToken asyncActionToken){switch (action) {case CONNECT:    connect();  break;case DISCONNECT:disconnect();break;case SUBSCRIBE:subscribe();break;case PUBLISH:publish();break;}}  }
class C{  private List<UnManagedFileExportRule> applyAllSecurityRules(ExportsRuleInfo export,String storagePortAddress,URI fileSystemId){  List<UnManagedFileExportRule> expRules=new ArrayList<UnManagedFileExportRule>();  for (  SecurityRuleInfo deviceSecurityRule : export.getSecurityRuleInfos()) {    UnManagedFileExportRule expRule=new UnManagedFileExportRule();    expRule.setFileSystemId(fileSystemId);    expRule.setExportPath(export.getPathname());    expRule.setSecFlavor(deviceSecurityRule.getSecFlavor());    expRule.setMountPoint(storagePortAddress + ":" + export.getPathname());    String anon=deviceSecurityRule.getAnon();    if ((null != anon) && (anon.equals(ROOT_UID))) {      anon=ROOT_USER_ACCESS;    } else {      anon=DEFAULT_ANONMOUS_ACCESS;    }    expRule.setAnon(anon);    if ((null != deviceSecurityRule.getReadOnly()) && !deviceSecurityRule.getReadOnly().isEmpty()) {      StringSet readOnlyHosts=new StringSet();      for (      ExportsHostnameInfo exportHost : deviceSecurityRule.getReadOnly()) {        if (null != exportHost.getName()) {          readOnlyHosts.add(exportHost.getName());        }      }      expRule.setReadOnlyHosts(readOnlyHosts);    }    if ((null != deviceSecurityRule.getReadWrite()) && !deviceSecurityRule.getReadWrite().isEmpty()) {      StringSet readWriteHosts=new StringSet();      for (      ExportsHostnameInfo exportHost : deviceSecurityRule.getReadWrite()) {        if (null != exportHost.getName()) {          readWriteHosts.add(exportHost.getName());        }      }      expRule.setReadWriteHosts(readWriteHosts);    }    if ((null != deviceSecurityRule.getRoot()) && !deviceSecurityRule.getRoot().isEmpty()) {      StringSet rootHosts=new StringSet();      for (      ExportsHostnameInfo exportHost : deviceSecurityRule.getRoot()) {        if (null != exportHost.getName()) {          rootHosts.add(exportHost.getName());        }      }      expRule.setRootHosts(rootHosts);    }    expRules.add(expRule);  }  return expRules;}  }
class C{  public int countAccept(byte[] value){  return count(acceptSetted,accept,value);}  }
class C{  public boolean canAccessDirectly(){  for (  DBInstanceInfo inst : instances) {    if (!inst.isConnectionVerified())     return false;  }  return true;}  }
class C{  private void drawVline(WritableRaster raster,int x,int y,int width,Color color){  for (int i=0; i < width; i++)   putPixel(raster,x,y + i,color);}  }
class C{  @Override protected final Object clone(){  return this;}  }
class C{  public void registerClient(Socket socket,boolean isPrimary,long acceptorId,boolean notifyBySubscription) throws IOException {  long startTime=this._statistics.startTime();  DataInputStream dis=new DataInputStream(socket.getInputStream());  DataOutputStream dos=new DataOutputStream(socket.getOutputStream());  short clientVersionOrdinal=Version.readOrdinal(dis);  Version clientVersion=null;  try {    clientVersion=Version.fromOrdinal(clientVersionOrdinal,true);    if (logger.isDebugEnabled()) {      logger.debug("{}: Registering client with version: {}",this,clientVersion);    }  } catch (  UnsupportedVersionException e) {    SocketAddress sa=socket.getRemoteSocketAddress();    UnsupportedVersionException uve=e;    if (sa != null) {      String sInfo=" Client: " + sa.toString() + ".";      uve=new UnsupportedVersionException(e.getMessage() + sInfo);    }    logger.warn(LocalizedMessage.create(LocalizedStrings.CacheClientNotifier_CACHECLIENTNOTIFIER_CAUGHT_EXCEPTION_ATTEMPTING_TO_CLIENT),uve);    writeException(dos,Acceptor.UNSUCCESSFUL_SERVER_TO_CLIENT,uve,clientVersion);    return;  }  dis.readByte();  if (Version.GFE_57.compareTo(clientVersion) <= 0) {    if (Version.CURRENT.compareTo(clientVersion) > 0) {      dis=new VersionedDataInputStream(dis,clientVersion);      dos=new VersionedDataOutputStream(dos,clientVersion);    }    registerGFEClient(dis,dos,socket,isPrimary,startTime,clientVersion,acceptorId,notifyBySubscription);  } else {    Exception e=new UnsupportedVersionException(clientVersionOrdinal);    throw new IOException(e.toString());  }}  }
class C{  public comment(String element){  addElement(element);}  }
class C{  public double gaussianTopPercentile(double percentile){  return gaussianPercentile(1.0 - percentile);}  }
class C{  public List<N> nodes(@Nullable Object key,int cnt,@Nullable IgnitePredicate<N>... p){  A.ensure(cnt >= 0,"cnt >= 0");  if (cnt == 0)   return Collections.emptyList();  if (cnt == 1)   return F.asList(node(key,p));  int hash=hash(key);  Collection<N> failed=new GridLeanSet<>();  rw.readLock().lock();  try {    if (circle.isEmpty())     return Collections.emptyList();    int size=nodes.size();    List<N> ret=new ArrayList<>(Math.min(cnt,size));    for (    SortedSet<N> set : circle.tailMap(hash,true).values()) {      for (      N n : set) {        if (ret.contains(n) || failed.contains(n))         continue;        if (apply(p,n))         ret.add(n); else         failed.add(n);        if (cnt == ret.size() || size == ret.size() + failed.size())         return ret;      }    }    for (    SortedSet<N> set : circle.headMap(hash,false).values()) {      for (      N n : set) {        if (ret.contains(n) || failed.contains(n))         continue;        if (apply(p,n))         ret.add(n); else         failed.add(n);        if (cnt == ret.size() || size == ret.size() + failed.size())         return ret;      }    }    return ret;  }  finally {    rw.readLock().unlock();  }}  }
class C{  private OptionFormat optionStmt() throws ParserException, IOException {  match(OPTION);  String optionName=lookahead.sval;  matchID();  match(OPENBLOCK);  OptionFormat of=new OptionFormat(optionName);  optionList(of);  match(CLOSEBLOCK);  return of;}  }
class C{  public static Spec createNewSpec(String name,String rootFilename,boolean importExisting,IProgressMonitor monitor) throws CoreException {  IProject project=ResourceHelper.getProject(name,rootFilename,true,importExisting,monitor);  PreferenceStoreHelper.storeRootFilename(project,rootFilename);  Spec spec=new Spec(project);  spec.setLastModified();  return spec;}  }
class C{  public void addDataModificationId(long value){  long m=maxDataModificationId[0];  if (value > m) {    maxDataModificationId[0]=value;  }}  }
class C{  public static List fromCommaDelimitedString(String s){  ArrayList result=new ArrayList();  StringTokenizer tokenizer=new StringTokenizer(s,",");  while (tokenizer.hasMoreTokens()) {    result.add(tokenizer.nextToken().toString().trim());  }  return result;}  }
class C{  public NoSuchElementException(String s){  super(s);}  }
class C{  public void addRow(TradelogDetail element){  getData().getTradelogDetail().add(element);  final Vector<Object> newRow=new Vector<Object>();  getNewRow(newRow,element);  rows.add(newRow);  this.fireTableRowsInserted(rows.size() - 1,rows.size() - 1);}  }
