class C{  public static void removeAll(String namespace){  if (namespace != null) {    removeAll(ByteString.copyFromUtf8(namespace));  }}  }
class C{  @Deprecated public void write(int b){  if (b == '\n') {synchronized (this) {synchronized (logOut) {        buffer.setLength(0);        ;        buffer.append((new Date()).toString());        buffer.append(':');        buffer.append(name);        buffer.append(':');        buffer.append(Thread.currentThread().getName());        buffer.append(':');        try {          logWriter.write(buffer.toString());          logWriter.flush();          bufOut.writeTo(logOut);          logOut.write(b);          logOut.flush();        } catch (        IOException e) {          setError();        } finally {          bufOut.reset();        }      }    }  } else   super.write(b);}  }
class C{  public boolean isOptimizedDrawingEnabled(){  return false;}  }
class C{  public void mergeWith(Core o){  o.num=this.num=(num < o.num ? num : o.num);}  }
class C{  public final void expectAtMostOneResult(ResultSet rs) throws AdeInternalException, SQLException {  if (rs.next()) {    throw new AdeInternalException("Expecting at most one row from " + m_sql);  }}  }
class C{  public void visit(int version,int access,String name,String signature,String superName,String[] interfaces){  if (cv != null) {    cv.visit(version,access,name,signature,superName,interfaces);  }}  }
class C{  public void clear(){  text.setLength(0);}  }
class C{  public static void checkAndCorrect(BinaryMessage message,int startIndex){  int value=message.getInt(startIndex,startIndex + 17);  BinaryMessage temp=new BinaryMessage(24);  temp.load(6,18,value);  BinaryMessage corrected=Golay24.checkAndCorrect(temp,0);  int correctedValue=corrected.getInt(6,23);  message.load(startIndex,18,correctedValue);}  }
class C{  public static DynamicMessage parseFrom(Descriptor type,CodedInputStream input) throws IOException {  return newBuilder(type).mergeFrom(input).buildParsed();}  }
class C{  public boolean isDeclineDefaultList(){  return declineDefaultList;}  }
class C{  void scheduleTransmissionSoon(){  this.nextTransmission=new Date(System.currentTimeMillis() + SOON_TRANSMISSION_INTERVAL);  if (!RapidMiner.getExecutionMode().isHeadless()) {    UsageStatsTransmissionDialog.startTimer();  }}  }
class C{  public boolean equals(Object o){  if (o == this) {    return true;  }  if (!(o instanceof X509IssuerSerial)) {    return false;  }  X509IssuerSerial other=(X509IssuerSerial)o;  if (serial.equals(other.getSerial()) && issuer.equals(other.getIssuer())) {    return true;  }  return false;}  }
class C{  public void remove(Value key){  checkSizeRemove();  int index=getIndex(key);  int plus=1;  do {    Value k=keys[index];    if (k == null) {      return;    } else     if (k == ValueNull.DELETED) {    } else     if (k.equals(key)) {      keys[index]=ValueNull.DELETED;      values[index]=null;      deletedCount++;      size--;      return;    }    index=(index + plus++) & mask;  } while (plus <= len);}  }
class C{  private double incompleteGammaFunctionSeriesRepr(final double a,final double x,final double accuracy,final int maxIteration){  if (x == 0.0)   return 0.0;  final double gln=new GammaFunction().logValue(a);  double ap=a;  double del=1.0 / a;  double sum=del;  for (int n=1; n <= maxIteration; n++) {    ++ap;    del*=x / ap;    sum+=del;    if (Math.abs(del) < Math.abs(sum) * accuracy)     return sum * Math.exp(-x + a * Math.log(x) - gln);  }  throw new ArithmeticException(ACCURACY_NOT_REACHED);}  }
class C{  public static Class primitiveToWrapper(Class cls){  Class convertedClass=cls;  if (cls != null && cls.isPrimitive()) {    convertedClass=(Class)primitiveWrapperMap.get(cls);  }  return convertedClass;}  }
class C{  private static void print(String msg,Iterable<?> col){  print(msg);  print(col);}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) private static Object parseEnumValue(Class<? extends Enum> enumType,ByteBuffer buf,ConstantPool constPool,Class<?> container){  int typeNameIndex=buf.getShort() & 0xFFFF;  String typeName=constPool.getUTF8At(typeNameIndex);  int constNameIndex=buf.getShort() & 0xFFFF;  String constName=constPool.getUTF8At(constNameIndex);  if (!typeName.endsWith(";")) {    if (!enumType.getName().equals(typeName))     return new AnnotationTypeMismatchExceptionProxy(typeName + "." + constName);  } else   if (enumType != parseSig(typeName,container)) {    return new AnnotationTypeMismatchExceptionProxy(typeName + "." + constName);  }  try {    return Enum.valueOf(enumType,constName);  } catch (  IllegalArgumentException e) {    return new EnumConstantNotPresentExceptionProxy((Class<? extends Enum<?>>)enumType,constName);  }}  }
class C{  KDRangeQuery(Model<SelectableMultiPoint> model) throws IllegalArgumentException {  this.model=model;  if (model instanceof IRetrieveKDTree) {    this.tree=((IRetrieveKDTree)model).getTree();  }}  }
class C{  public ReplyException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public void clearChatNotifications(){  NotificationManagerCompat notificationManager=NotificationManagerCompat.from(getActivity());  notificationManager.cancel(AppConstants.MESSAGE_NOTIFICATION_ID);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:50.943 -0500",hash_original_method="E63C8DBFE6FAFFBE522AAC8B0CA2CC77",hash_generated_method="661E5E37D12B645292144BB68339A415") public LexerCore(String lexerName,String buffer){  super(buffer);  this.currentLexerName=lexerName;}  }
class C{  private void loadSelectData(AttributeSet attr,StringBuilder buffer){  String name=(String)attr.getAttribute(HTML.Attribute.NAME);  if (name == null) {    return;  }  Object m=attr.getAttribute(StyleConstants.ModelAttribute);  if (m instanceof OptionListModel) {    OptionListModel<Option> model=(OptionListModel<Option>)m;    for (int i=0; i < model.getSize(); i++) {      if (model.isSelectedIndex(i)) {        Option option=model.getElementAt(i);        appendBuffer(buffer,name,option.getValue());      }    }  } else   if (m instanceof ComboBoxModel) {    ComboBoxModel model=(ComboBoxModel)m;    Option option=(Option)model.getSelectedItem();    if (option != null) {      appendBuffer(buffer,name,option.getValue());    }  }}  }
class C{  public String globalInfo(){  return "An instance filter that discretizes a range of numeric" + " attributes in the dataset into nominal attributes." + " Discretization is by simple binning. Skips the class"+ " attribute if set.";}  }
class C{  private void resize(int newCapacity){  int newLength=newCapacity * 2;  Object[] oldTable=table;  int oldLength=oldTable.length;  if (oldLength == 2 * MAXIMUM_CAPACITY) {    if (threshold == MAXIMUM_CAPACITY - 1)     throw new IllegalStateException("Capacity exhausted.");    threshold=MAXIMUM_CAPACITY - 1;    return;  }  if (oldLength >= newLength) {    return;  }  Object[] newTable=new Object[newLength];  threshold=newLength / 3;  for (int j=0; j < oldLength; j+=2) {    Object key=oldTable[j];    if (key != null) {      Object value=oldTable[j + 1];      oldTable[j]=null;      oldTable[j + 1]=null;      int i=hash(key,newLength);      while (newTable[i] != null)       i=nextKeyIndex(i,newLength);      newTable[i]=key;      newTable[i + 1]=value;    }  }  table=newTable;}  }
class C{  public Edge(String label,String source,String target){  m_label=label;  m_rsource=source;  m_rtarget=target;  m_lines=new Vector<String>(3,2);  breakupLabel();}  }
class C{  protected ContentAssistInvocationContext(){  fDocument=null;  fViewer=null;  fOffset=-1;}  }
class C{  public Outfit(final Integer detail,final Integer hair,final Integer head,final Integer dress,final Integer body){  this.detail=detail;  this.hair=hair;  this.head=head;  this.dress=dress;  this.body=body;  this.mouth=0;  this.eyes=0;}  }
class C{  public void clear(){  _size=0;}  }
class C{  public final void testRSAMultiPrimePrivateCrtKeySpec12(){  KeySpec ks=new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,opi);  assertTrue(ks instanceof RSAPrivateKeySpec);}  }
class C{  public int numJobs(){synchronized (jobs) {    return jobs.size();  }}  }
class C{  private double gridOptimizer(){  double minValue=Double.MAX_VALUE;  double bestRho=-1.;  for (int i=0; i < this.rhoGrid.length; i++) {    this.currentRho=this.rhoGrid[i];    computeFiBuffer();    computeCurrentPi();    double score=currentScoreFunction();    if (score < minValue) {      minValue=score;      bestRho=this.currentRho;    }  }  return bestRho;}  }
class C{  public int size(){  return _pos;}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public static Map<String,Object> convertDocumentByteBuffer(DispatchContext dctx,Map<String,? extends Object> context){  Map results=ServiceUtil.returnSuccess();  Delegator delegator=dctx.getDelegator();  XMultiComponentFactory xmulticomponentfactory=null;  Timestamp ts=UtilDateTime.nowTimestamp();  Random random=new Random(ts.getTime());  String uniqueSeqNum=Integer.toString(Math.abs(random.nextInt()));  String fileInName="OOIN_" + uniqueSeqNum;  String fileOutName="OOOUT_" + uniqueSeqNum;  File fileIn=null;  File fileOut=null;  ByteBuffer inByteBuffer=(ByteBuffer)context.get("inByteBuffer");  String inputMimeType=(String)context.get("inputMimeType");  String outputMimeType=(String)context.get("outputMimeType");  String extName=OpenOfficeWorker.getExtensionFromMimeType(outputMimeType);  fileOutName+="." + extName;  String oooHost=(String)context.get("oooHost");  String oooPort=(String)context.get("oooPort");  try {    xmulticomponentfactory=OpenOfficeWorker.getRemoteServer(oooHost,oooPort);    byte[] inByteArray=inByteBuffer.array();    String tempDir=EntityUtilProperties.getPropertyValue("content","content.temp.dir",delegator);    fileIn=new File(tempDir + fileInName);    FileOutputStream fos=new FileOutputStream(fileIn);    fos.write(inByteArray);    fos.close();    Debug.logInfo("fileIn:" + tempDir + fileInName,module);    OpenOfficeWorker.convertOODocToFile(xmulticomponentfactory,tempDir + fileInName,tempDir + fileOutName,outputMimeType);    fileOut=new File(tempDir + fileOutName);    FileInputStream fis=new FileInputStream(fileOut);    int c;    ByteArrayOutputStream baos=new ByteArrayOutputStream();    while ((c=fis.read()) > -1) {      baos.write(c);    }    fis.close();    results.put("outByteBuffer",ByteBuffer.wrap(baos.toByteArray()));    baos.close();  } catch (  MalformedURLException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.toString());  }catch (  FileNotFoundException e) {    Debug.logError(e,"Error in OpenOffice operation: ",module);    return ServiceUtil.returnError(e.toString());  }catch (  IOException e) {    Debug.logError(e,"Error in OpenOffice operation: ",module);    return ServiceUtil.returnError(e.toString());  }catch (  Exception e) {    Debug.logError(e,"Error in OpenOffice operation: ",module);    return ServiceUtil.returnError(e.toString());  } finally {    if (fileIn != null)     fileIn.delete();    if (fileOut != null)     fileOut.delete();  }  return results;}  }
class C{  public void addSetting(final int index,final String setting){  Assert.isTrue(index >= 0);  Assert.isNotNull(setting);  Assert.isTrue(!"".equals(setting));  fSettings.add(index,setting);}  }
class C{  public void testFiniteVersusInfinite() throws Exception {  for (int i=0; i < numIterations; i++) {    String reg=AutomatonTestUtil.randomRegexp(random());    Automaton automaton=Operations.determinize(new RegExp(reg,RegExp.NONE).toAutomaton(),DEFAULT_MAX_DETERMINIZED_STATES);    final List<BytesRef> matchedTerms=new ArrayList<>();    for (    BytesRef t : terms) {      if (Operations.run(automaton,t.utf8ToString())) {        matchedTerms.add(t);      }    }    Automaton alternate=Automata.makeStringUnion(matchedTerms);    AutomatonQuery a1=new AutomatonQuery(new Term("field",""),automaton);    AutomatonQuery a2=new AutomatonQuery(new Term("field",""),alternate,Integer.MAX_VALUE);    ScoreDoc[] origHits=searcher.search(a1,25).scoreDocs;    ScoreDoc[] newHits=searcher.search(a2,25).scoreDocs;    CheckHits.checkEqual(a1,origHits,newHits);  }}  }
class C{  public static int countGsmSeptets(char c){  try {    return countGsmSeptets(c,false);  } catch (  EncodeException ex) {    return 0;  }}  }
class C{  private static String encodeStartingVowels(String s){  String result=s;  result=replaceAll(s," a","!~b");  result=replaceAll(s," e","!~f");  result=replaceAll(s," i","!~j");  result=replaceAll(s," o","!~p");  result=replaceAll(s," u","!~v");  result=replaceAll(s," A","!~B");  result=replaceAll(s," E","!~F");  result=replaceAll(s," I","!~J");  result=replaceAll(s," O","!~P");  result=replaceAll(s," U","!~V");  return result;}  }
class C{  protected void notifyHideContextualSearch(){  for (  ContextualSearchObserver observer : mObservers) {    observer.onHideContextualSearch();  }}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getConstantDeclaration_();}  }
class C{  private boolean isTargetOrGroupCopyMode(StorageSystem system,CIMObjectPath syncObjPath) throws Exception {  boolean isCopyMode=false;  String[] props=new String[]{SmisConstants.CP_SYNC_TYPE};  CIMInstance syncObj=_helper.getInstance(system,syncObjPath,false,false,props);  String syncType=syncObj.getProperty(SmisConstants.CP_SYNC_TYPE).getValue().toString();  if (String.valueOf(SYNC_TYPE.CLONE.getValue()).equals(syncType)) {    isCopyMode=true;  }  return isCopyMode;}  }
class C{  private Object deserializeValue(@Nullable CacheObjectContext coCtx){  BinaryReaderExImpl reader=reader(null,coCtx != null ? coCtx.kernalContext().config().getClassLoader() : ctx.configuration().getClassLoader(),true);  Object obj0=reader.deserialize();  BinaryClassDescriptor desc=reader.descriptor();  assert desc != null;  if (coCtx != null && coCtx.storeValue())   obj=obj0;  return obj0;}  }
class C{  public boolean isMuted(){  return mMuted;}  }
class C{  public String prettyPrint(){  StringBuilder sb=new StringBuilder(shortSummary());  sb.append('\n');  if (!this.keepTaskList) {    sb.append("No task info kept");  } else {    sb.append("-----------------------------------------\n");    sb.append("ms     %     Task name\n");    sb.append("-----------------------------------------\n");    NumberFormat nf=NumberFormat.getNumberInstance(Locale.ROOT);    nf.setMinimumIntegerDigits(5);    nf.setGroupingUsed(false);    NumberFormat pf=NumberFormat.getPercentInstance(Locale.ROOT);    pf.setMinimumIntegerDigits(3);    pf.setGroupingUsed(false);    for (    TaskInfo task : taskInfo()) {      sb.append(nf.format(task.getTime().millis())).append("  ");      sb.append(pf.format(task.getTime().secondsFrac() / totalTime().secondsFrac())).append("  ");      sb.append(task.getTaskName()).append("\n");    }  }  return sb.toString();}  }
class C{  @Override public void perfEventRead(int x,long[] y){  throw new UnsupportedOperationException("Statistics#perfEventRead(): Not Implemented");}  }
class C{  protected DistributedSystemConfigImpl(Properties props){  this(props,false);}  }
class C{  public void testOverlappingMultiPointsRoundTrip() throws SQLException {  GridGenerator grid=new GridGenerator();  grid.setGeometryFactory(geometryFactory);  grid.setBoundingBox(new Envelope(0,10,0,10));  grid.setNumberColumns(2);  grid.setNumberRows(2);  MultiPoint[] pt=new MultiPoint[4];  STRUCT[] st=new STRUCT[8];  PointGenerator pgc=new PointGenerator();  pgc.setGeometryFactory(geometryFactory);  MultiGenerator pg=new MultiGenerator(pgc);  pg.setBoundingBox(new Envelope(0,10,0,10));  pg.setNumberGeometries(3);  pg.setGeometryFactory(geometryFactory);  OraWriter ow=new OraWriter();  int i=0;  while (grid.canCreate() && i < 8) {    pg.setBoundingBox(grid.createEnv());    pt[i]=(MultiPoint)pg.create();    st[i]=ow.write(pt[i],getConnection());    i++;  }  for (int j=0; j < 4; j++) {    if (pt[j] != null)     st[i++]=ow.write(pt[j],getConnection());  }  OraReader or=new OraReader();  i=0;  while (i < 8 && pt[i % 4] != null) {    MultiPoint pt2=(MultiPoint)or.read(st[i]);    assertTrue("The input MultiPoint is not the same as the output MultiPoint",pt[i % 4].equals(pt2));    i++;  }}  }
class C{  public CSVFile(URL url) throws MalformedURLException {  infoUrl=url;}  }
class C{  public static JournalStore createNoMmap(Path path) throws IOException {  return create(path,false);}  }
class C{  public boolean isUsingTLS(){  return usingTLS;}  }
class C{  public long _vlong(){  long data, value=0;  for (int shift=0; ; shift+=7) {    data=read_bits_int(8);    value|=(data & 0x7f) << shift;    if ((data & 0x80) == 0)     return (value & 0x01) > 0 ? -(value >> 1) : value >> 1;  }}  }
class C{  public void install(JTextComponent c){  component=c;  removeAllHighlights();}  }
class C{  void addExcludedPackageName(String packageName){  mExcludedPackageNames.add(packageName);}  }
class C{  protected void bcsPreDeserializationHook(ObjectInputStream ois) throws IOException, ClassNotFoundException {}  }
class C{  public ConcurrentModificationException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public void resumeEncoding(){  this.suspendEncoding=false;}  }
class C{  public void shape(char[] text,int start,int count,int context){  checkParams(text,start,count);  if (isContextual()) {    int ctxKey=getKeyFromMask(context);    if (rangeSet == null) {      shapeContextually(text,start,count,ctxKey);    } else {      shapeContextually(text,start,count,Range.values()[ctxKey]);    }  } else {    shapeNonContextually(text,start,count);  }}  }
class C{  public TimedExpirySupport(long minExpiryTime,long maxExpiryTime){  this.minExpiryTime=Math.max(minExpiryTime,0);  this.maxExpiryTime=Math.max(maxExpiryTime,0);}  }
class C{  public int size(){  return identical.size() + different.size() + missing.size();}  }
class C{  private Vector linearCombination(int baseIndex,double f1,double f2,double f3,double f4){  final Vector r1=retrieve(baseIndex - 1).multiply(f1);  final Vector r2=retrieve(baseIndex).multiply(f2);  final Vector r3=retrieve(baseIndex + 1).multiply(f3);  final Vector r4=retrieve(baseIndex + 2).multiply(f4);  return r1.add(r2).add(r3).add(r4);}  }
class C{  protected boolean internalNext() throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  public View findViewById(int id){  View v;  if (mSlidingMenu != null) {    v=mSlidingMenu.findViewById(id);    if (v != null)     return v;  }  return null;}  }
class C{  public void writeByteArray(byte[] bytes,boolean append){  try {    DataOutputStream dos=new DataOutputStream(stream);    dos.write(bytes);    stream.close();  } catch (  IOException e) {    throw new IllegalArgumentException("InputStream is unwritable : " + e.toString());  }}  }
class C{  @Override public Iterator<RepositoryMetaData> iterator(){  return repositories.iterator();}  }
class C{  public void manualTestFailover() throws Exception {  Statement s=this.conn.createStatement();  ResultSet rs=s.executeQuery("show variables like 'port'");  rs.next();  System.err.println("Starting master Port: " + rs.getString(2));  rs.close();  int secs=15000;  System.err.println("Sleeping " + (secs / 1000.0) + " seconds.... Please perform manual failover");  Thread.sleep(secs);  System.err.println("Continuing");  try {    rs=s.executeQuery("show variables like 'port'");    rs.close();    fail("Master should be unavailable");  } catch (  SQLException ex) {    rs=s.executeQuery("show variables like 'port'");    rs.next();    System.err.println("New master Port: " + rs.getString(2));    rs.close();    s.close();  }}  }
class C{  public int size(){synchronized (lock) {    return count;  }}  }
class C{  protected boolean canDeleteConsistencyGroup(final BlockConsistencyGroup consistencyGroup){  return (!consistencyGroup.getInactive() && !consistencyGroup.created());}  }
class C{  public long leafCellsCovered(){  long numLeaves=0;  for (  S2CellId cellId : cellIds) {    int invertedLevel=S2CellId.MAX_LEVEL - cellId.level();    numLeaves+=(1L << (invertedLevel << 1));  }  return numLeaves;}  }
class C{  @Override public void onWebSocketText(String message){  log.info("Received unsupported text message from peer {}",peerID);  Session session=getSession();  if (session != null && session.isOpen()) {    session.close(StatusCode.BAD_DATA,"This endpoint only accepts binary messages");  }}  }
class C{  private void updateChallengePaceText(int progress){  float minutesPerMile=calculateChallengePaceFromProgress(progress);  String formattedText=String.format(getActivity().getString(R.string.challenge_speed_display),minutesPerMile);  mChallengePaceText.setText(formattedText);}  }
class C{  public AttributeCertificate toASN1Structure(){  return attrCert;}  }
class C{  public boolean isSingleKey(){  String[] keys=getKeyColumns();  return keys.length == 1;}  }
class C{  @GET @Path("table/{tableName}/outputs/graph") @Consumes(Servlets.JSON_MEDIA_TYPE) @Produces(Servlets.JSON_MEDIA_TYPE) public Response outputsGraph(@Context HttpServletRequest request,@PathParam("tableName") String tableName){  LOG.info("Fetching lineage outputs graph for tableName={}",tableName);  AtlasPerfTracer perf=null;  try {    if (AtlasPerfTracer.isPerfTraceEnabled(PERF_LOG)) {      perf=AtlasPerfTracer.getPerfTracer(PERF_LOG,"DataSetLineageResource.outputsGraph(" + tableName + ")");    }    final String jsonResult=lineageService.getOutputsGraph(tableName);    JSONObject response=new JSONObject();    response.put(AtlasClient.REQUEST_ID,Servlets.getRequestId());    response.put("tableName",tableName);    response.put(AtlasClient.RESULTS,new JSONObject(jsonResult));    return Response.ok(response).build();  } catch (  EntityNotFoundException e) {    LOG.error("table entity not found for {}",tableName);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.NOT_FOUND));  }catch (  DiscoveryException|IllegalArgumentException e) {    LOG.error("Unable to get lineage outputs graph for table {}",tableName,e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.BAD_REQUEST));  }catch (  Throwable e) {    LOG.error("Unable to get lineage outputs graph for table {}",tableName,e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.INTERNAL_SERVER_ERROR));  } finally {    AtlasPerfTracer.log(perf);  }}  }
class C{  public boolean hasVisibility(){  return super.hasElement(Visibility.KEY);}  }
class C{  public Boolean isDigestValuePresent(){  return digestValuePresent;}  }
class C{  public void configure(InputStream is) throws IOException {  BufferedReader reader=new BufferedReader(new InputStreamReader(is));  int lineNumber=0;  while (true) {    String line=reader.readLine();    if (line == null)     break;    line=line.trim();    lineNumber++;    if (line.startsWith("#") || line.length() == 0)     continue;    if (line.startsWith(LOAD_PREFIX)) {      String loadPath=line.substring(LOAD_PREFIX.length()).trim();      loadPath=assignProperties(loadPath);      loadFilteredPath(loadPath);    } else     if (line.startsWith(GRAB_PREFIX)) {      String grabParams=line.substring(GRAB_PREFIX.length()).trim();      grabList.add(assignProperties(grabParams));    } else     if (line.startsWith(MAIN_PREFIX)) {      if (main != null)       throw new IOException("duplicate definition of main in line " + lineNumber + " : "+ line);      main=line.substring(MAIN_PREFIX.length()).trim();    } else     if (line.startsWith(PROP_PREFIX)) {      String params=line.substring(PROP_PREFIX.length()).trim();      int index=params.indexOf('=');      if (index == -1) {        throw new IOException("unexpected property format - expecting name=value" + lineNumber + " : "+ line);      }      String propName=params.substring(0,index);      String propValue=assignProperties(params.substring(index + 1));      System.setProperty(propName,propValue);    } else {      throw new IOException("unexpected line in " + lineNumber + " : "+ line);    }  }  if (requireMain && main == null)   throw new IOException("missing main class definition in config file");}  }
class C{  public FormBasedXmlQueryDemo(){}  }
class C{  private boolean correctlyClassifies(Instance inst){  return maxIndex(model.getVotesForInstance(inst)) == (int)inst.classValue();}  }
class C{  public void addWeeks(final int weeks){  setMillis(getChronology().weeks().add(getMillis(),weeks));}  }
class C{  public Builder rootView(int rootViewRes){  return this;}  }
class C{  private boolean parseLine(){  cureid=null;  curpoly=null;  curlbl=null;  polys.clear();  coords.clear();  labels.clear();  Matcher m=COORD.matcher(reader.getBuffer());  for (; tokenizer.valid(); tokenizer.advance()) {    m.region(tokenizer.getStart(),tokenizer.getEnd());    if (m.find()) {      try {        double c1=ParseUtil.parseDouble(m.group(1));        double c2=ParseUtil.parseDouble(m.group(2));        if (m.group(3) != null) {          double c3=ParseUtil.parseDouble(m.group(3));          coords.add(new double[]{c1,c2,c3});        } else {          coords.add(new double[]{c1,c2});        }        continue;      } catch (      NumberFormatException e) {        LOG.warning("Looked like a coordinate pair but didn't parse: " + tokenizer.getSubstring());      }    }    final int len=tokenizer.getEnd() - tokenizer.getStart();    if (POLYGON_SEPARATOR.length() == len && reader.getBuffer().subSequence(tokenizer.getStart(),tokenizer.getEnd()).equals(POLYGON_SEPARATOR)) {      if (!coords.isEmpty()) {        polys.add(new Polygon(new ArrayList<>(coords)));      }      continue;    }    String cur=tokenizer.getSubstring();    if (cureid == null) {      cureid=new ExternalID(cur);    } else {      labels.add(cur);    }  }  if (!coords.isEmpty()) {    polys.add(new Polygon(coords));  }  curpoly=new PolygonsObject(polys);  curlbl=(haslabels || !labels.isEmpty()) ? LabelList.make(labels) : null;  return true;}  }
class C{  @Override protected Node removeFromFrontier(){  cleanUpFrontier();  Node result=frontier.remove();  explored.add(result.getState());  updateMetrics(frontier.size());  return result;}  }
class C{  public boolean addAll(Collection c){  if (m.size() == 0 && c.size() > 0 && c instanceof SortedSet && m instanceof TreeMap) {    SortedSet set=(SortedSet)c;    TreeMap map=(TreeMap)m;    Comparator cc=set.comparator();    Comparator mc=map.comparator();    if (cc == mc || (cc != null && cc.equals(mc))) {      map.addAllForTreeSet(set,PRESENT);      return true;    }  }  return super.addAll(c);}  }
class C{  private void initUI(){  this.setLayout(new BoxLayout(this,BoxLayout.Y_AXIS));  Force[] forces=fsim.getForces();  for (int i=0; i < forces.length; i++) {    Force f=forces[i];    Box v=new Box(BoxLayout.Y_AXIS);    for (int j=0; j < f.getParameterCount(); j++) {      JValueSlider field=createField(f,j);      field.addChangeListener(lstnr);      v.add(field);    }    String name=f.getClass().getName();    name=name.substring(name.lastIndexOf(".") + 1);    v.setBorder(BorderFactory.createTitledBorder(name));    this.add(v);  }}  }
class C{  public void ivrAbort() throws NetworkDeviceControllerException {  SSHPrompt[] prompts={SSHPrompt.MDS_CONFIG,SSHPrompt.MDS_CONFIG_IVR_ZONE,SSHPrompt.MDS_CONFIG_IVR_ZONESET};  if (!inConfigMode) {    throw NetworkDeviceControllerException.exceptions.mdsDeviceNotInConfigMode();  }  if (!Arrays.asList(prompts).contains(lastPrompt)) {    String message=Arrays.asList(prompts).toString();    throw NetworkDeviceControllerException.exceptions.mdsUnexpectedLastPrompt(lastPrompt.toString(),message);  }  StringBuilder buf=new StringBuilder();  String payload=MDSDialogProperties.getString("MDSDialog.ivr.abort.cmd");  lastPrompt=sendWaitFor(payload,defaultTimeout,prompts,buf);  inSession=false;}  }
class C{  public boolean isRunning(){  boolean response=false;  try {    String command=dhcpStatusPath + " dnsmasq.service";    Process p=Runtime.getRuntime().exec(command);    int exitVal=p.waitFor();    if (exitVal == 0) {      response=true;    }  } catch (  IOException e) {    return response;  } finally {    return response;  }}  }
class C{  @Deprecated protected PerformanceVector computeCurrentPerformeance(){  try {    return computeCurrentPerformance();  } catch (  OperatorException e) {    return null;  }}  }
class C{  @Override public boolean canLoad(Entity unit){  boolean result=false;  return result;}  }
class C{  public void initRestAssured(){  super.initRestAssured();  RestAssured.requestSpecification.basePath(SERVER_ROOT);  requestUrlBase="/tests/gateleen/routesource";  targetUrlBase="http://localhost:" + MAIN_PORT + SERVER_ROOT+ "/tests/gateleen/routetarget";}  }
class C{  public static <T,V>ObjectAnimator ofObject(T target,Property<T,V> property,TypeEvaluator<V> evaluator,V... values){  ObjectAnimator anim=new ObjectAnimator(target,property);  anim.setObjectValues(values);  anim.setEvaluator(evaluator);  return anim;}  }
class C{  public static <K,V>ConcurrentHashMap<K,V> newConcurrentHashMap(){  return new ConcurrentHashMap<K,V>(DEFAULT_INITIAL_CAPACITY,0.75f,DEFAULT_CONCURRENCY_LEVEL);}  }
class C{  public Set<Property> allProperties(){  Set<Property> properties=new HashSet<Property>();  for (  Node n : nodes) {    n.includeProperties(properties);  }  return Collections.unmodifiableSet(properties);}  }
class C{  private void rebuild(boolean clearSelection){  Object rootObject;  treePathMapping.clear();  if (treeModel != null && (rootObject=treeModel.getRoot()) != null) {    root=createNodeForValue(rootObject);    root.path=new TreePath(rootObject);    addMapping(root);    root.updatePreferredSize(0);    visibleNodes.removeAllElements();    if (isRootVisible())     visibleNodes.addElement(root);    if (!root.isExpanded())     root.expand(); else {      Enumeration cursor=root.children();      while (cursor.hasMoreElements()) {        visibleNodes.addElement(cursor.nextElement());      }      if (!isFixedRowHeight())       updateYLocationsFrom(0);    }  } else {    visibleNodes.removeAllElements();    root=null;  }  if (clearSelection && treeSelectionModel != null) {    treeSelectionModel.clearSelection();  }  this.visibleNodesChanged();}  }
class C{  public boolean isAcceptingRepaints(){  return acceptRepaintRequests;}  }
class C{  public static String toBinaryString(long v){  return IntegralToString.longToBinaryString(v);}  }
class C{  public static QualifiedName fromAccessor(AccessibleObject method){  NullArgumentException.validateNotNull("method",method);  return fromClass(((Member)method).getDeclaringClass(),((Member)method).getName());}  }
class C{  public boolean isStartAtZeroEnabled(){  return mStartAtZero;}  }
class C{  public void addAnswers(JmDNSImpl jmDNSImpl,Set<DNSRecord> answers){}  }
class C{  public Object clone() throws CloneNotSupportedException {  CommodityChannelIndexSeries clone=(CommodityChannelIndexSeries)super.clone();  clone.typicalPriceValues=new LinkedList<Double>();  return clone;}  }
class C{  public static Map<String,Properties> readExcel(Workbook wb,Iterator<Locale> supportedLocales,String sheetName,Set<Object> defaultKeySet) throws ValidationException, TranslationImportException {  Sheet sheet=null;  try {    sheet=wb.getSheet(getDefaultResourceBundle().getString(sheetName));    if (sheet == null) {      throw new TranslationImportException();    }  } catch (  Exception e) {    throw new TranslationImportException(TranslationImportException.Reason.SHEET_NAME_NOT_FOUND);  }  return readSheet(sheet,supportedLocales,sheetName,defaultKeySet);}  }
class C{  protected final void clearAuthenticationAttributes(HttpServletRequest request){  HttpSession session=request.getSession(false);  if (session == null) {    return;  }  session.removeAttribute(WebAttributes.AUTHENTICATION_EXCEPTION);}  }
class C{  @Override public void register(EValidatorRegistrar registrar){}  }
class C{  protected int engineGetOutputSize(int inputLen){  int result=0;  if (decrypting) {    result=inputLen - 16;  } else {    result=inputLen + 16;  }  return (result < 0 ? 0 : result);}  }
class C{  public void mark(int readAheadLimit){  mark=position;}  }
class C{  public String toString(){  return getUserName();}  }
class C{  public void checkValid(FactoryDto factory) throws ConflictException {  checkValid(factory,false);}  }
class C{  private void unlockFocus(){  try {    mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_TRIGGER,CameraMetadata.CONTROL_AF_TRIGGER_CANCEL);    mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AE_MODE,CaptureRequest.CONTROL_AE_MODE_ON_AUTO_FLASH);    mCaptureSession.capture(mPreviewRequestBuilder.build(),mCaptureCallback,mBackgroundHandler);    mState=STATE_PREVIEW;    mCaptureSession.setRepeatingRequest(mPreviewRequest,mCaptureCallback,mBackgroundHandler);  } catch (  CameraAccessException e) {    e.printStackTrace();  }}  }
class C{  public static String extractId(String url){{    Pattern u=Pattern.compile("youtube.com/watch?.*v=([^&]*)");    Matcher um=u.matcher(url.toString());    if (um.find()) {      return um.group(1);    }  }{    Pattern u=Pattern.compile("youtube.com/v/([^&]*)");    Matcher um=u.matcher(url.toString());    if (um.find()) {      return um.group(1);    }  }  return "";}  }
class C{  public ExpressionParserBuilder withScope(Resolver resolver){  scopeResolvers.add(resolver);  return this;}  }
class C{  public void destroy(){  log.info("destroy");  super.destroy();}  }
class C{  @Override public int updateJobData(Connection conn,JobDetail job) throws IOException, SQLException {  ByteArrayOutputStream baos=serializeJobData(job.getJobDataMap());  int len=baos.toByteArray().length;  ByteArrayInputStream bais=new ByteArrayInputStream(baos.toByteArray());  PreparedStatement ps=null;  try {    ps=conn.prepareStatement(rtp(UPDATE_JOB_DATA));    ps.setBinaryStream(1,bais,len);    ps.setString(2,job.getKey().getName());    ps.setString(3,job.getKey().getGroup());    return ps.executeUpdate();  }  finally {    closeStatement(ps);  }}  }
class C{  public static Operator toOperator(String token){  return (Operator)CODES.get(token);}  }
class C{  private void nodeHeightsToLengths(ReRootedNode node,double height){  final double h=node.getHeight();  node.setLength(h >= 0 ? height - h : 1);  for (  Node child : node.getChildren()) {    nodeHeightsToLengths((ReRootedNode)child,node.getHeight());  }}  }
class C{  public LocalDateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,int secondOfMinute){  this(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,0,ISOChronology.getInstanceUTC());}  }
class C{  public void addRectangle(int x1,int y1,int x2,int y2,LinkProperties properties) throws IOException {  LinkRectangle.write(x1,y1,x2,y2,properties,link.dos);}  }
class C{  public Label(){}  }
class C{  public GrapplBuilder login(String username,char[] password,JFrame jFrame) throws AuthenticationException {  try {    Authentication authentication=Authenticator.login(username,password);    grappl.useAuthentication(authentication);  } catch (  AuthenticationException auth) {    if (jFrame != null) {      JOptionPane.showMessageDialog(jFrame,"Login failed, incorrect username or password or broken connection.\nError message: " + auth.getMessage());    } else {      auth.printStackTrace();    }  }  return this;}  }
class C{  public static void assertJDelete(String request,String... tests) throws Exception {  assertJDelete(request,JSONTestUtil.DEFAULT_DELTA,tests);}  }
class C{  private Map<String,Token> convertTokens(JCas aJCas,TextCorpus aCorpusData){  if (aCorpusData.getTokensLayer() == null) {    return new HashMap<String,Token>();  }  String text=aJCas.getDocumentText();  Token outToken;  int tokenBeginPosition=0;  int tokenEndPosition;  Map<String,Token> tokens=new HashMap<String,Token>();  for (int i=0; i < aCorpusData.getTokensLayer().size(); i++) {    eu.clarin.weblicht.wlfxb.tc.api.Token token=aCorpusData.getTokensLayer().getToken(i);    tokenBeginPosition=text.indexOf(token.getString(),tokenBeginPosition);    tokenEndPosition=text.indexOf(token.getString(),tokenBeginPosition) + token.getString().length();    outToken=new Token(aJCas,tokenBeginPosition,tokenEndPosition);    outToken.addToIndexes();    tokens.put(token.getID(),outToken);    tokenBeginPosition=tokenEndPosition;  }  return tokens;}  }
class C{  public void paintSliderTrackBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBackground(context,g,x,y,w,h,orientation);}  }
class C{  private static void adjustToIntervalLowerBound(Calendar now,ScheduleInterval interval,int multiple){  now.set(Calendar.SECOND,0);  now.set(Calendar.MILLISECOND,0);switch (interval) {case MINUTE:    now.set(Calendar.MINUTE,alignDown(now.get(Calendar.MINUTE),multiple,0));  break;case HOUR:now.set(Calendar.HOUR_OF_DAY,alignDown(now.get(Calendar.HOUR_OF_DAY),multiple,0));now.set(Calendar.MINUTE,0);break;case DAY:now.set(Calendar.DAY_OF_MONTH,alignDown(now.get(Calendar.DAY_OF_MONTH),multiple,1));now.set(Calendar.HOUR_OF_DAY,0);now.set(Calendar.MINUTE,0);break;case WEEK:now.set(Calendar.WEEK_OF_YEAR,alignDown(now.get(Calendar.WEEK_OF_YEAR),multiple,1));now.set(Calendar.DAY_OF_WEEK,Calendar.SUNDAY);now.set(Calendar.HOUR_OF_DAY,0);now.set(Calendar.MINUTE,0);break;case MONTH:now.set(Calendar.MONTH,alignDown(now.get(Calendar.MONTH),multiple,Calendar.JANUARY));now.set(Calendar.DAY_OF_MONTH,1);now.set(Calendar.HOUR_OF_DAY,0);now.set(Calendar.MINUTE,0);break;case YEAR:now.set(Calendar.YEAR,alignDown(now.get(Calendar.YEAR),multiple,1970));now.set(Calendar.MONTH,Calendar.JANUARY);now.set(Calendar.DAY_OF_MONTH,1);now.set(Calendar.HOUR_OF_DAY,0);now.set(Calendar.MINUTE,0);break;default :throw new IllegalArgumentException(String.format("Invalid interval: %s",interval.toString()));}}  }
class C{  private static Set<String> loadVerbStemSet(String[] verbStems){  HashSet<String> set=new HashSet<String>(verbStems.length);  for (int i=0; i < verbStems.length; i++) {    set.add(verbStems[i]);  }  return set;}  }
class C{  public boolean removeVertex(V vertex,boolean remove_subtrees){  if (!delegate.containsVertex(vertex))   return false;  if (remove_subtrees)   for (  V v : new ArrayList<V>(delegate.getSuccessors(vertex)))   removeVertex(v,true);  return delegate.removeVertex(vertex);}  }
class C{  public boolean isPersonalizationOptIn(){  return personalizationOptIn;}  }
class C{  public CompletableFuture<Void> expire(){  return manager.expire();}  }
class C{  private Rectangle2D createShadow(RectangularShape bar,double xOffset,double yOffset,RectangleEdge base,boolean pegShadow){  double x0=bar.getMinX();  double x1=bar.getMaxX();  double y0=bar.getMinY();  double y1=bar.getMaxY();  if (base == RectangleEdge.TOP) {    x0+=xOffset;    x1+=xOffset;    if (!pegShadow) {      y0+=yOffset;    }    y1+=yOffset;  } else   if (base == RectangleEdge.BOTTOM) {    x0+=xOffset;    x1+=xOffset;    y0+=yOffset;    if (!pegShadow) {      y1+=yOffset;    }  } else   if (base == RectangleEdge.LEFT) {    if (!pegShadow) {      x0+=xOffset;    }    x1+=xOffset;    y0+=yOffset;    y1+=yOffset;  } else   if (base == RectangleEdge.RIGHT) {    x0+=xOffset;    if (!pegShadow) {      x1+=xOffset;    }    y0+=yOffset;    y1+=yOffset;  }  return new Rectangle2D.Double(x0,y0,(x1 - x0),(y1 - y0));}  }
class C{  public Parameter(String name,double lowerBound,double upperBound){  super();  this.name=name;  this.lowerBound=lowerBound;  this.upperBound=upperBound;}  }
class C{  public boolean hasFieldUpdates(){  return fieldInfosGen != -1;}  }
class C{  public boolean matchesNormalized(final ConversationStates state,final Expression trigger){  if (state == this.state) {    for (    Expression triggerExpr : this.triggers) {      if (trigger.matchesNormalized(triggerExpr)) {        return true;      }    }  }  return false;}  }
class C{  public void updateStateAndSendEvent(long bytesUsed){  this.stats.changeTenuredHeapUsed(bytesUsed);synchronized (this) {    MemoryState oldState=this.mostRecentEvent.getState();    MemoryState newState=this.thresholds.computeNextState(oldState,bytesUsed);    if (oldState != newState) {      setUsageThresholdOnMXBean(bytesUsed);      if (!skipEventDueToToleranceLimits(oldState,newState)) {        this.currentState=newState;        MemoryEvent event=new MemoryEvent(ResourceType.HEAP_MEMORY,oldState,newState,this.cache.getMyId(),bytesUsed,true,this.thresholds);        this.upcomingEvent.set(event);        processLocalEvent(event);        updateStatsFromEvent(event);      }    } else     if (!oldState.isNormal() && bytesUsed != this.mostRecentEvent.getBytesUsed()) {      MemoryEvent event=new MemoryEvent(ResourceType.HEAP_MEMORY,oldState,newState,this.cache.getMyId(),bytesUsed,true,this.thresholds);      this.upcomingEvent.set(event);      processLocalEvent(event);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:53.126 -0500",hash_original_method="E77AF8452BCCF2463D33B3FB98136CBC",hash_generated_method="7FB4C87EAC575769303E942AFBF1366E") public boolean isHostname(){  return addressType == HOSTNAME;}  }
class C{  void show(Rectangle bounds){  if (!isCreated()) {    return;  }  if (log.isLoggable(PlatformLogger.Level.FINER)) {    log.finer("showing menu window + " + getWindow() + " at "+ bounds);  }  XToolkit.awtLock();  try {    reshape(bounds.x,bounds.y,bounds.width,bounds.height);    xSetVisible(true);    toFront();    selectItem(getFirstSelectableItem(),false);  }  finally {    XToolkit.awtUnlock();  }}  }
class C{  public static void bitVectorToEquation(final BitVector bv,final long seed,final int numVariables,final int e[]){  if (numVariables == 0) {    e[0]=e[1]=e[2]=e[3] - 1;    return;  }  final long[] hash=new long[4];  Hashes.spooky4(bv,seed,hash);  e[0]=(int)((hash[0] & 0x7FFFFFFFFFFFFFFFL) % numVariables);  e[1]=(int)((hash[1] & 0x7FFFFFFFFFFFFFFFL) % numVariables);  e[2]=(int)((hash[2] & 0x7FFFFFFFFFFFFFFFL) % numVariables);  e[3]=(int)((hash[3] & 0x7FFFFFFFFFFFFFFFL) % numVariables);}  }
class C{  private void disconnect(){  Connection c=Connections.getInstance(context).getConnection(clientHandle);  c.changeConnectionStatus(ConnectionStatus.DISCONNECTED);  String actionTaken=context.getString(R.string.toast_disconnected);  c.addAction(actionTaken);}  }
class C{  public void writeFacilityAttributes(String file){  ObjectAttributesXmlWriter ow=new ObjectAttributesXmlWriter(this.shopAttributes);  ow.writeFile(file);}  }
class C{  private void rowInsert(RowUpgrade row,TableUpgrade upgradeTable,byte[] buffer,int offset){  Cursor10 cursor=new Cursor10(row,buffer,offset);  upgradeTable.row(cursor);}  }
class C{  public boolean containsUnboundTypeVariables(){  return false;}  }
class C{  public boolean hasNext(){  if (bufferOffset < bufferFillSize) {    return true;  } else {    return this.fillBuffer();  }}  }
class C{  public void checkAutoPost(){  if (!getAutoPost()) {    return;  }  log("Autoposting",Level.FINE);  try {    Network memory=getBot().memory().newMemory();    Vertex facebook=memory.createVertex(getPrimitive());    Vertex vertex=facebook.getRelationship(Primitive.LASTPOST);    long last=0;    if (vertex != null) {      last=((Timestamp)vertex.getData()).getTime();    }    long millis=getAutoPostHours() * 60 * 60* 1000;    if ((System.currentTimeMillis() - last) < millis) {      log("Autoposting hours not reached",Level.FINE,getAutoPostHours());      return;    }    List<Vertex> autoposts=getAutoPosts(memory);    if (autoposts != null && !autoposts.isEmpty()) {      int index=Utils.random().nextInt(autoposts.size());      Vertex post=autoposts.get(index);      String text=null;      if (post.instanceOf(Primitive.LABEL)) {        post=post.mostConscious(Primitive.RESPONSE);      }      if (post.instanceOf(Primitive.FORMULA)) {        Map<Vertex,Vertex> variables=new HashMap<Vertex,Vertex>();        SelfCompiler.addGlobalVariables(memory.createInstance(Primitive.INPUT),null,memory,variables);        Vertex result=getBot().mind().getThought(Language.class).evaluateFormula(post,variables,memory);        if (result != null) {          text=getBot().mind().getThought(Language.class).getWord(result,memory).getDataValue();        } else {          log("Invalid autopost template formula",Level.WARNING,post);          text=null;        }      } else {        text=post.printString();      }      if (text != null) {        log("Autoposting",Level.INFO,post);        post(text,null);        Utils.sleep(100);        facebook.setRelationship(Primitive.LASTPOST,memory.createTimestamp());        memory.save();      }    }  } catch (  Exception exception) {    log(exception);  }}  }
class C{  @Interruptible private void addSpillLocation(int spill){  if (VM.VerifyAssertions && ((spill < 0) || (spill > 32767))) {    String msg="Unexpected spill passed:" + spill;    VM._assert(VM.NOT_REACHED,msg);  }  int entry=getNextMapEntry();  gcMapInformation[entry]=spill | NEXT_BIT;}  }
class C{  public void open() throws IOException {  if (mLocalRtpPort != -1) {    mRtpReceiver=new RtpPacketReceiver(mLocalRtpPort,mRtcpSession);    mRtpReceiver.start();    mRtcpReceiver=new RtcpPacketReceiver(mLocalRtpPort + 1,mRtcpSession,mRtcpSocketTimeout);    mRtcpReceiver.addRtcpListener(this);    mRtcpReceiver.start();    mRtpTransmitter=new RtpPacketTransmitter(mRemoteAddress,mRemotePort,mRtcpSession,mRtpReceiver.getConnection());    mRtcpTransmitter=new RtcpPacketTransmitter(mRemoteAddress,mRemotePort + 1,mRtcpSession,mRtcpReceiver.getConnection());    mRtcpTransmitter.start();  } else   if (mRtpInputStream != null) {    mRtpTransmitter=new RtpPacketTransmitter(mRemoteAddress,mRemotePort,mRtcpSession,mRtpInputStream.getRtpReceiver().getConnection());    mRtcpTransmitter=new RtcpPacketTransmitter(mRemoteAddress,mRemotePort + 1,mRtcpSession,mRtpInputStream.getRtcpReceiver().getConnection());  } else {    mRtpTransmitter=new RtpPacketTransmitter(mRemoteAddress,mRemotePort,mRtcpSession);    mRtcpTransmitter=new RtcpPacketTransmitter(mRemoteAddress,mRemotePort + 1,mRtcpSession);  }}  }
class C{  protected Node deepCopyInto(Node n){  super.deepCopyInto(n);  AbstractAttrNS aa=(AbstractAttrNS)n;  aa.namespaceURI=namespaceURI;  return n;}  }
class C{  public void startUp() throws PluginRuntimeException {}  }
class C{  public boolean visit(ConditionalExpression node){  return true;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean add(CharSequence text){  return map.put(text,PLACEHOLDER) == null;}  }
class C{  public boolean isInstanceAttribute(){  Object oo=get_Value(COLUMNNAME_IsInstanceAttribute);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_ACTION_2__MORE_CODE_1:    getMoreCode_1().clear();  getMoreCode_1().addAll((Collection<? extends MoreCode_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public long run() throws EntityException, SerializationException, SQLException, UnknownHostException {  final String query=String.format("INSERT INTO %s (" + "query_id, " + "command_type, "+ "command, "+ "inputs, "+ "outputs, "+ "username, "+ "ip) "+ "VALUES (?, ?, ?, ?, ?, ?, ?)",tableName);  int psIndex=1;  PreparedStatement ps=connection.prepareStatement(query,Statement.RETURN_GENERATED_KEYS);  ps.setString(psIndex++,sessionStateLite.getQueryId());  ps.setString(psIndex++,sessionStateLite.getCommandType());  ps.setString(psIndex++,sessionStateLite.getCmd());  ps.setString(psIndex++,toJson(readEntities,true));  ps.setString(psIndex++,toJson(writeEntities,true));  ps.setString(psIndex++,userGroupInformation == null ? null : userGroupInformation.getUserName());  ps.setString(psIndex++,InetAddress.getLocalHost().getHostAddress());  ps.executeUpdate();  ResultSet rs=ps.getGeneratedKeys();  rs.next();  return rs.getLong(1);}  }
class C{  private void quitApp(){  Intent broadcastIntent=new Intent();  broadcastIntent.setAction("ACTION_QUIT");  LocalBroadcastManager.getInstance(this).sendBroadcast(broadcastIntent);  finish();  System.exit(0);}  }
class C{  private static void registerKnownMobileHandlers(){  if (registered)   return;  registerHandler(FXGVersion.v1_0,new FXG_v1_0_Mobile_Handler());  registerHandler(FXGVersion.v2_0,new FXG_v2_0_Mobile_Handler());  registered=true;}  }
class C{  protected void buildBTree(){  if (plan.nentries == 0) {    leaf.reset(plan.numInNode[leaf.level][0]);    flushNodeOrLeaf(leaf);    return;  }  for (int i=0; i < plan.nleaves && entryIterator.hasNext(); i++) {    leaf.reset(plan.numInNode[leaf.level][i]);    final int limit=leaf.max;    for (int j=0; j < limit && entryIterator.hasNext(); j++) {      copyTuple(j,entryIterator.next());      if (i > 0 && j == 0) {        addSeparatorKey(leaf);      }    }    flushNodeOrLeaf(leaf);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:18.259 -0500",hash_original_method="9A2E566018459C8A4F9FE2F49DBB98B8",hash_generated_method="8E840BFE7E6405298EC13CA3DE52B347") @android.view.RemotableViewMethod public void smoothScrollByOffset(int offset){  super.smoothScrollByOffset(offset);}  }
class C{  @Override protected boolean isBehaviorSource(FacesContext ctx,String behaviorSourceId,String componentClientId){  if (behaviorSourceId == null) {    return false;  }  char sepChar=UINamingContainer.getSeparatorChar(ctx);  String actualBehaviorId;  if (behaviorSourceId.lastIndexOf(sepChar) != -1) {    actualBehaviorId=behaviorSourceId.substring(0,behaviorSourceId.lastIndexOf(sepChar));  } else {    actualBehaviorId=behaviorSourceId;  }  return (actualBehaviorId.equals(componentClientId));}  }
class C{  private void initAdvanced(){  ToolBarButton btnNew=new ToolBarButton();  btnNew.setImage("/images/New24.png");  btnNew.setAttribute("name","btnNewAdv");  btnNew.addEventListener(Events.ON_CLICK,this);  ToolBarButton btnDelete=new ToolBarButton();  btnDelete.setAttribute("name","btnDeleteAdv");  btnDelete.setImage("/images/Delete24.png");  btnDelete.addEventListener(Events.ON_CLICK,this);  ToolBarButton btnSave=new ToolBarButton();  btnSave.setAttribute("name","btnSaveAdv");  btnSave.setImage("/images/Save24.png");  btnSave.addEventListener(Events.ON_CLICK,this);  fQueryName=new Combobox();  fQueryName.setTooltiptext(m_sToolTipText);  fQueryName.setReadonly(false);  fQueryName.addEventListener(Events.ON_FOCUS,this);  fQueryName.addEventListener(Events.ON_BLUR,this);  fQueryName.addEventListener(Events.ON_SELECT,this);  Button btnOk=new Button();  btnOk.setName("btnOkAdv");  btnOk.setImage("/images/Ok24.png");  btnOk.addEventListener(Events.ON_CLICK,this);  LayoutUtils.addSclass("action-button",btnOk);  Button btnCancel=new Button();  btnCancel.setName("btnCancel");  btnCancel.setImage("/images/Cancel24.png");  btnCancel.addEventListener(Events.ON_CLICK,this);  LayoutUtils.addSclass("action-button",btnCancel);  Panel pnlButtonRight=new Panel();  pnlButtonRight.appendChild(btnOk);  pnlButtonRight.appendChild(btnCancel);  pnlButtonRight.setAlign("right");  ToolBar toolBar=new ToolBar();  toolBar.appendChild(btnNew);  toolBar.appendChild(btnDelete);  toolBar.appendChild(fQueryName);  toolBar.appendChild(btnSave);  toolBar.setWidth("100%");  fQueryName.setStyle("margin-left: 3px; margin-right: 3px; position: relative; top: 5px;");  btnSave.setDisabled(m_AD_Tab_ID <= 0);  Hbox confirmPanel=new Hbox();  confirmPanel.appendChild(pnlButtonRight);  confirmPanel.setWidth("100%");  advancedPanel=new Listbox();  ListHead listhead=new ListHead();  listhead.setSizable(true);  ListHeader lstHAndOr=new ListHeader();  lstHAndOr.setLabel(Msg.getMsg(Env.getCtx(),"And/Or"));  lstHAndOr.setWidth("40px");  ListHeader lstHLeftBracket=new ListHeader();  lstHLeftBracket.setLabel("(");  lstHLeftBracket.setWidth("20px");  ListHeader lstHColumn=new ListHeader();  lstHColumn.setLabel(Msg.translate(Env.getCtx(),"AD_Column_ID"));  lstHColumn.setWidth("100px");  ListHeader lstHOperator=new ListHeader();  lstHOperator.setLabel(Msg.getMsg(Env.getCtx(),"Operator"));  ListHeader lstHQueryValue=new ListHeader();  lstHQueryValue.setLabel(Msg.getMsg(Env.getCtx(),"QueryValue"));  lstHQueryValue.setWidth("170px");  ListHeader lstHQueryTo=new ListHeader();  lstHQueryTo.setLabel(Msg.getMsg(Env.getCtx(),"QueryValue2"));  lstHQueryTo.setWidth("170px");  ListHeader lstHRightBracket=new ListHeader();  lstHRightBracket.setLabel(")");  lstHRightBracket.setWidth("20px");  listhead.appendChild(lstHAndOr);  listhead.appendChild(lstHLeftBracket);  listhead.appendChild(lstHColumn);  listhead.appendChild(lstHOperator);  listhead.appendChild(lstHQueryValue);  listhead.appendChild(lstHQueryTo);  listhead.appendChild(lstHRightBracket);  advancedPanel.appendChild(listhead);  advancedPanel.setVflex(true);  Borderlayout layout=new Borderlayout();  layout.setStyle("height: 100%; width: 99%; position: relative;");  winAdvanced.appendChild(layout);  North north=new North();  layout.appendChild(north);  north.appendChild(toolBar);  Center center=new Center();  layout.appendChild(center);  center.appendChild(advancedPanel);  center.setFlex(true);  South south=new South();  layout.appendChild(south);  south.appendChild(confirmPanel);  winAdvanced.setHeight("100%");  winAdvanced.setWidth("100%");  winAdvanced.addEventListener(Events.ON_OK,this);}  }
class C{  @Path("{clientId}") @Timed @ExceptionMetered @DELETE public Response deleteClient(@Auth User user,@PathParam("clientId") LongParam clientId){  logger.info("User '{}' deleting client id={}.",user,clientId);  Optional<Client> client=clientDAO.getClientById(clientId.get());  if (!client.isPresent()) {    throw new NotFoundException("Client not found.");  }  clientDAO.deleteClient(client.get());  auditLog.recordEvent(new Event(Instant.now(),EventTag.CLIENT_DELETE,user.getName(),client.get().getName()));  return Response.noContent().build();}  }
class C{  public boolean isSetValue(){  return this.value != null;}  }
class C{  public JSONArray put(double value) throws JSONException {  Double d=new Double(value);  JSONObject.testValidity(d);  this.put(d);  return this;}  }
class C{  private BakedBezierInterpolator(){  super();}  }
class C{  public static byte[] serializeToBytes(final SerializableEntity entity){  return StringEncoder.getBytes(serializeToJson(entity).toJSONString());}  }
class C{  public Box find(int x,int y){  Point p=convertFromScaled(x,y);  Layer l=getRootLayer();  if (l != null) {    return l.find(getLayoutContext(),p.x,p.y,false);  }  return null;}  }
class C{  long size(String fileName) throws IOException {  send("SIZE " + fileName);  readCode(250);  long size=Long.parseLong(message);  return size;}  }
class C{  public float lengthSquared(){  return x * x + y * y;}  }
class C{  public NotificationChain basicSetLeftOperand(Expression newLeftOperand,NotificationChain msgs){  Expression oldLeftOperand=leftOperand;  leftOperand=newLeftOperand;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,ExpressionsPackage.BITWISE_AND_EXPRESSION__LEFT_OPERAND,oldLeftOperand,newLeftOperand);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  protected void printAttlist() throws TranscoderException, XMLException, IOException {  type=scanner.next();  if (type != LexicalUnits.S) {    throw fatalError("space",null);  }  char[] space=getCurrentValue();  type=scanner.next();  if (type != LexicalUnits.NAME) {    throw fatalError("name",null);  }  char[] name=getCurrentValue();  type=scanner.next();  output.printAttlistStart(space,name);  while (type == LexicalUnits.S) {    space=getCurrentValue();    type=scanner.next();    if (type != LexicalUnits.NAME) {      break;    }    name=getCurrentValue();    type=scanner.next();    if (type != LexicalUnits.S) {      throw fatalError("space",null);    }    char[] space2=getCurrentValue();    type=scanner.next();    output.printAttName(space,name,space2);switch (type) {case LexicalUnits.CDATA_IDENTIFIER:case LexicalUnits.ID_IDENTIFIER:case LexicalUnits.IDREF_IDENTIFIER:case LexicalUnits.IDREFS_IDENTIFIER:case LexicalUnits.ENTITY_IDENTIFIER:case LexicalUnits.ENTITIES_IDENTIFIER:case LexicalUnits.NMTOKEN_IDENTIFIER:case LexicalUnits.NMTOKENS_IDENTIFIER:      output.printCharacters(getCurrentValue());    type=scanner.next();  break;case LexicalUnits.NOTATION_IDENTIFIER:output.printCharacters(getCurrentValue());type=scanner.next();if (type != LexicalUnits.S) {throw fatalError("space",null);}output.printSpaces(getCurrentValue(),false);type=scanner.next();if (type != LexicalUnits.LEFT_BRACE) {throw fatalError("left.brace",null);}type=scanner.next();List names=new LinkedList();space=null;if (type == LexicalUnits.S) {space=getCurrentValue();type=scanner.next();}if (type != LexicalUnits.NAME) {throw fatalError("name",null);}name=getCurrentValue();type=scanner.next();space2=null;if (type == LexicalUnits.S) {space2=getCurrentValue();type=scanner.next();}names.add(new OutputManager.NameInfo(space,name,space2));loop: for (; ; ) {switch (type) {default :break loop;case LexicalUnits.PIPE:type=scanner.next();space=null;if (type == LexicalUnits.S) {space=getCurrentValue();type=scanner.next();}if (type != LexicalUnits.NAME) {throw fatalError("name",null);}name=getCurrentValue();type=scanner.next();space2=null;if (type == LexicalUnits.S) {space2=getCurrentValue();type=scanner.next();}names.add(new OutputManager.NameInfo(space,name,space2));}}if (type != LexicalUnits.RIGHT_BRACE) {throw fatalError("right.brace",null);}output.printEnumeration(names);type=scanner.next();break;case LexicalUnits.LEFT_BRACE:type=scanner.next();names=new LinkedList();space=null;if (type == LexicalUnits.S) {space=getCurrentValue();type=scanner.next();}if (type != LexicalUnits.NMTOKEN) {throw fatalError("nmtoken",null);}name=getCurrentValue();type=scanner.next();space2=null;if (type == LexicalUnits.S) {space2=getCurrentValue();type=scanner.next();}names.add(new OutputManager.NameInfo(space,name,space2));loop: for (; ; ) {switch (type) {default :break loop;case LexicalUnits.PIPE:type=scanner.next();space=null;if (type == LexicalUnits.S) {space=getCurrentValue();type=scanner.next();}if (type != LexicalUnits.NMTOKEN) {throw fatalError("nmtoken",null);}name=getCurrentValue();type=scanner.next();space2=null;if (type == LexicalUnits.S) {space2=getCurrentValue();type=scanner.next();}names.add(new OutputManager.NameInfo(space,name,space2));}}if (type != LexicalUnits.RIGHT_BRACE) {throw fatalError("right.brace",null);}output.printEnumeration(names);type=scanner.next();}if (type == LexicalUnits.S) {output.printSpaces(getCurrentValue(),true);type=scanner.next();}switch (type) {default :throw fatalError("default.decl",null);case LexicalUnits.REQUIRED_IDENTIFIER:case LexicalUnits.IMPLIED_IDENTIFIER:output.printCharacters(getCurrentValue());type=scanner.next();break;case LexicalUnits.FIXED_IDENTIFIER:output.printCharacters(getCurrentValue());type=scanner.next();if (type != LexicalUnits.S) {throw fatalError("space",null);}output.printSpaces(getCurrentValue(),false);type=scanner.next();if (type != LexicalUnits.STRING && type != LexicalUnits.FIRST_ATTRIBUTE_FRAGMENT) {throw fatalError("space",null);}case LexicalUnits.STRING:case LexicalUnits.FIRST_ATTRIBUTE_FRAGMENT:output.printCharacter(scanner.getStringDelimiter());output.printCharacters(getCurrentValue());loop: for (; ; ) {type=scanner.next();switch (type) {case LexicalUnits.STRING:case LexicalUnits.ATTRIBUTE_FRAGMENT:case LexicalUnits.FIRST_ATTRIBUTE_FRAGMENT:case LexicalUnits.LAST_ATTRIBUTE_FRAGMENT:output.printCharacters(getCurrentValue());break;case LexicalUnits.CHARACTER_REFERENCE:output.printString("&#");output.printCharacters(getCurrentValue());output.printCharacter(';');break;case LexicalUnits.ENTITY_REFERENCE:output.printCharacter('&');output.printCharacters(getCurrentValue());output.printCharacter(';');break;default :break loop;}}output.printCharacter(scanner.getStringDelimiter());}space=null;}if (type != LexicalUnits.END_CHAR) {throw fatalError("end",null);}output.printAttlistEnd(space);type=scanner.next();}  }
class C{  public CipherParameters encrypt(byte[] out,int keyLen){  return encrypt(out,0,keyLen);}  }
class C{  public BlowfishCipher(){  core=new CipherCore(new BlowfishCrypt(),BlowfishConstants.BLOWFISH_BLOCK_SIZE);}  }
class C{  public void test_putLjava_lang_ObjectLjava_lang_Object(){  hm.put("KEY","VALUE");  assertEquals("Failed to install key/value pair","VALUE",hm.get("KEY"));  IdentityHashMap m=new IdentityHashMap();  Short s0=new Short((short)0);  m.put(s0,"short");  m.put(null,"test");  Integer i0=new Integer(0);  m.put(i0,"int");  assertEquals("Failed adding to bucket containing null","short",m.get(s0));  assertEquals("Failed adding to bucket containing null2","int",m.get(i0));}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return NEW_NODE_ID;case 3:return NODE_STORE;default :return null;}}  }
class C{  @Override public boolean equals(Object other){  if (other == this) {    return true;  }  if (other instanceof ZoneOffsetTransition) {    ZoneOffsetTransition d=(ZoneOffsetTransition)other;    return transition.equals(d.transition) && offsetBefore.equals(d.offsetBefore) && offsetAfter.equals(d.offsetAfter);  }  return false;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_SINGLE_IS_A1__EXTENDS_NAME_1:    return getExtendsName_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void run() throws IOException, InterruptedException {  for (int i=0; i < connCnt; i++)   exec.submit(new ClientThread());  Thread.sleep(5 * 60 * 1000);  exec.shutdownNow();}  }
class C{  public static IStatus validateImportDeclaration(String name){  return validateImportDeclaration(name,CompilerOptions.VERSION_1_3,CompilerOptions.VERSION_1_3);}  }
class C{  public static int indexOf(float[] array,float value,int startIndex){  for (int i=startIndex; i < array.length; i++) {    if (Float.compare(array[i],value) == 0) {      return i;    }  }  return -1;}  }
class C{  public void actionPerformed(ActionEvent e){  if (log.isDebugEnabled()) {    log.debug("CV " + getCvName() + ","+ getSecondCvNum()+ " actionPerformed");  }  int newVal=((Integer.valueOf(_value.getText()).intValue()) - mOffset) / mFactor;  updatedTextField();  prop.firePropertyChange("Value",null,Integer.valueOf(newVal));}  }
class C{  public void init(){  createRequiredComponents();  buildLayout();  setImmediate(true);  setCompositionRoot(mainLayout);}  }
class C{  public void registerContainerCapability(String containerId,String containerCapabilityClassName){  registerImplementation(new RegistrationKey(new SimpleContainerIdentity(containerId),"default"),containerCapabilityClassName);}  }
class C{  private void findLargeItemSets() throws Exception {  ArrayList<Object> kMinusOneSets, kSets;  Hashtable<ItemSet,Integer> hashtable;  int necSupport, i=0;  necSupport=(int)(m_minSupport * m_instances.numInstances() + 0.5);  kSets=AprioriItemSet.singletons(m_instances,m_treatZeroAsMissing);  if (m_treatZeroAsMissing) {    AprioriItemSet.upDateCountersTreatZeroAsMissing(kSets,m_instances);  } else {    AprioriItemSet.upDateCounters(kSets,m_instances);  }  kSets=AprioriItemSet.deleteItemSets(kSets,necSupport,m_instances.numInstances());  if (kSets.size() == 0) {    return;  }  do {    m_Ls.add(kSets);    kMinusOneSets=kSets;    kSets=AprioriItemSet.mergeAllItemSets(kMinusOneSets,i,m_instances.numInstances());    hashtable=AprioriItemSet.getHashtable(kMinusOneSets,kMinusOneSets.size());    m_hashtables.add(hashtable);    kSets=AprioriItemSet.pruneItemSets(kSets,hashtable);    if (m_treatZeroAsMissing) {      AprioriItemSet.upDateCountersTreatZeroAsMissing(kSets,m_instances);    } else {      AprioriItemSet.upDateCounters(kSets,m_instances);    }    kSets=AprioriItemSet.deleteItemSets(kSets,necSupport,m_instances.numInstances());    i++;  } while (kSets.size() > 0);}  }
class C{  protected static InternalEventPropDescriptor makeMethodDesc(Method method,String name){  EventPropertyType propertyType;  if (method.getParameterTypes().length == 1) {    Class parameterType=method.getParameterTypes()[0];    if (parameterType == String.class) {      propertyType=EventPropertyType.MAPPED;    } else {      propertyType=EventPropertyType.INDEXED;    }  } else {    propertyType=EventPropertyType.SIMPLE;  }  return new InternalEventPropDescriptor(name,method,propertyType);}  }
class C{  public synchronized SpanReceiver loadReceiverType(String className,HTraceConfiguration conf,ClassLoader classLoader){  String receiverClass=className.contains(".") ? className : SpanReceiver.Builder.DEFAULT_PACKAGE + "." + className;  SpanReceiver[] receivers=curReceivers;  for (  SpanReceiver receiver : receivers) {    if (receiver.getClass().getName().equals(receiverClass)) {      LOG.trace(toString() + ": returning a reference to receiver " + receiver.toString());      return receiver;    }  }  LOG.trace(toString() + ": creating a new SpanReceiver of type " + className);  SpanReceiver receiver=new SpanReceiver.Builder(conf).className(className).classLoader(classLoader).build();  addReceiver(receiver);  return receiver;}  }
class C{  public void commence(HttpServletRequest request,HttpServletResponse response,AuthenticationException arg2) throws IOException, ServletException {  log.debug("Pre-authenticated entry point called. Rejecting access");  response.sendError(HttpServletResponse.SC_UNAUTHORIZED,"Access Denied");}  }
class C{  @Override public void close(){  bot.getConfiguration().getListenerManager().removeListener(listener);  eventQueue.clear();}  }
class C{  final public SyntaxTreeNode LetIn() throws ParseException {  SyntaxTreeNode zn[]=new SyntaxTreeNode[4];  SyntaxTreeNode tn;  Token t;  bpa("Case Other Arm");  t=jj_consume_token(LET);  zn[0]=new SyntaxTreeNode(mn,t);  zn[1]=LetDefinitions();  t=jj_consume_token(LETIN);  zn[2]=new SyntaxTreeNode(mn,t);  zn[3]=Expression();  epa();{    if (true)     return new SyntaxTreeNode(mn,N_LetIn,zn);  }  throw new Error("Missing return statement in function");}  }
class C{  private void finalizeRePattern(String name,String rePattern){  rePattern=rePattern.replaceFirst("\\|","");  rePattern=rePattern.replaceAll("\\(([^\\?])","(?:$1");  rePattern="(" + rePattern + ")";  rePattern=rePattern.replaceAll("\\\\","\\\\\\\\");  hmAllRePattern.put(name,rePattern);}  }
class C{  public FunctionButton(){  popup=new JPopupMenu();  JMenuItem propertiesItem=new JMenuItem(Bundle.getMessage("MenuItemProperties"));  propertiesItem.addActionListener(this);  popup.add(propertiesItem);  MouseListener popupListener=new PopupListener();  addMouseListener(popupListener);  setFont(new Font("Monospaced",Font.PLAIN,12));  setMargin(new Insets(2,2,2,2));  setRolloverEnabled(false);  updateLnF();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getElementsByTagNameNS14.class,args);}  }
class C{  public static void init(Object m){  if (!INSTANCE.codenameOneRunning) {    INSTANCE.codenameOneRunning=true;    INSTANCE.displayInitTime=System.currentTimeMillis();    int commandBehaviour=COMMAND_BEHAVIOR_DEFAULT;    if (INSTANCE.impl != null) {      commandBehaviour=INSTANCE.impl.getCommandBehavior();    }    INSTANCE.impl=(CodenameOneImplementation)ImplementationFactory.getInstance().createImplementation();    INSTANCE.impl.setDisplayLock(lock);    INSTANCE.impl.initImpl(m);    INSTANCE.codenameOneGraphics=new Graphics(INSTANCE.impl.getNativeGraphics());    INSTANCE.impl.setCodenameOneGraphics(INSTANCE.codenameOneGraphics);    if (INSTANCE.impl.isThirdSoftButton()) {      INSTANCE.thirdSoftButton=true;    }    if (INSTANCE.impl.getSoftkeyCount() > 0) {      MenuBar.leftSK=INSTANCE.impl.getSoftkeyCode(0)[0];      if (INSTANCE.impl.getSoftkeyCount() > 1) {        MenuBar.rightSK=INSTANCE.impl.getSoftkeyCode(1)[0];        if (INSTANCE.impl.getSoftkeyCode(1).length > 1) {          MenuBar.rightSK2=INSTANCE.impl.getSoftkeyCode(1)[1];        }      }    }    MenuBar.backSK=INSTANCE.impl.getBackKeyCode();    MenuBar.backspaceSK=INSTANCE.impl.getBackspaceKeyCode();    MenuBar.clearSK=INSTANCE.impl.getClearKeyCode();    INSTANCE.PATHLENGTH=INSTANCE.impl.getDragPathLength();    INSTANCE.dragPathX=new float[INSTANCE.PATHLENGTH];    INSTANCE.dragPathY=new float[INSTANCE.PATHLENGTH];    INSTANCE.dragPathTime=new long[INSTANCE.PATHLENGTH];    com.codename1.util.StringUtil.setImplementation(INSTANCE.impl);    com.codename1.io.Util.setImplementation(INSTANCE.impl);    if (INSTANCE.edt == null) {      INSTANCE.touchScreen=INSTANCE.impl.isTouchDevice();      INSTANCE.edt=new CodenameOneThread(new RunnableWrapper(null,3),"EDT");      INSTANCE.impl.setThreadPriority(INSTANCE.edt,INSTANCE.impl.getEDTThreadPriority());      INSTANCE.edt.start();    }    INSTANCE.impl.postInit();    INSTANCE.setCommandBehavior(commandBehaviour);  } else {    INSTANCE.impl.confirmControlView();  }}  }
class C{  public final boolean isMarked(){  return marked;}  }
class C{  public boolean isStocked(){  return m_isStocked;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MPrintFont[");  sb.append("ID=").append(get_ID()).append(",Name=").append(getName()).append("PSName=").append(getFont().getPSName()).append(getFont()).append("]");  return sb.toString();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.943 -0500",hash_original_method="5098FC46543D7D1A735E08AA962F8003",hash_generated_method="88F17216AA2E98FA881DE372CE6364E6") public boolean regionMatches(boolean ignoreCase,int thisStart,String string,int start,int length){  this.addTaint(string.getTaintInt());  return getTaintBoolean();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:27.191 -0500",hash_original_method="23592451CB50AFA841274AC3732C91A0",hash_generated_method="CBC4E30F7778F15DECD755991AE421F6") public E valueAt(int index){  if (mGarbage) {    gc();  }  return (E)mValues[index];}  }
class C{  public Iterator<T> iterator(){  return inorder();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean testPoint(float x,float y){  tmp.set(x,y);  return fixture.testPoint(tmp);}  }
class C{  public Class<T> rawClass(){  Type type=type();  if (type instanceof Class) {    return (Class)type;  } else   if (type instanceof ParameterizedType) {    ParameterizedType pType=(ParameterizedType)type;    return (Class)pType.getRawType();  } else {    throw new UnsupportedOperationException(type + " " + type.getClass().getName());  }}  }
class C{  public int depth(){  return depth.get();}  }
class C{  void notifyOnProvisioningAbortion(ServiceInstance currentSI,InstanceResult instanceResult,APPlatformException cause) throws BESNotificationException {  ProvisioningStatus provisioningStatus=currentSI.getProvisioningStatus();switch (provisioningStatus) {case WAITING_FOR_SYSTEM_CREATION:    besDAO.notifyAsyncSubscription(currentSI,instanceResult,false,cause);  break;case WAITING_FOR_SYSTEM_MODIFICATION:besDAO.notifyAsyncModifySubscription(currentSI,instanceResult,false,cause);break;case WAITING_FOR_SYSTEM_UPGRADE:besDAO.notifyAsyncUpgradeSubscription(currentSI,instanceResult,false,cause);break;case WAITING_FOR_SYSTEM_OPERATION:Operation operation=operationDAO.getOperationByInstanceId(currentSI.getInstanceId());if (operation != null) {besDAO.notifyAsyncOperationStatus(currentSI,operation.getTransactionId(),OperationStatus.ERROR,cause == null ? null : cause.getLocalizedMessages());em.remove(operation);}break;default :return;}if (currentSI.isDeleted()) {logger.info("Processing of service instance '{}' failed with return code '{}' and description '{}'. OSCM subscription is already terminated.",new Object[]{Long.valueOf(currentSI.getTkey()),Long.valueOf(instanceResult.getRc()),instanceResult.getDesc()});} else {logger.info("Processing of service instance '{}' failed with return code '{}' and description '{}'. OSCM was informed on the abortion.",new Object[]{Long.valueOf(currentSI.getTkey()),Long.valueOf(instanceResult.getRc()),instanceResult.getDesc()});}}  }
class C{  @SuppressWarnings({"unchecked"}) @Nullable public <V>V meta(int key){synchronized (this) {    return data != null && data.length > key ? (V)data[key] : null;  }}  }
class C{  protected String translate(final String name){  if (name == null) {    return null;  }  final StringBuffer buffer=new StringBuffer();  translate(false,name,buffer,0,name.length());  return buffer.toString();}  }
class C{  public static IStatus validateIdentifier(String id){  return validateIdentifier(id,CompilerOptions.VERSION_1_3,CompilerOptions.VERSION_1_3);}  }
class C{  private void executeTrash(String[] args) throws IOException, ServiceException, DocumentListException {  if (args.length == 3) {    documentList.trashObject(args[1],true);  } else   if (args.length == 2) {    documentList.trashObject(args[1],false);  } else {    printMessage(COMMAND_HELP_TRASH);  }}  }
class C{  public TimeoutException(){}  }
class C{  public boolean removeFirstOccurrence(Object o){  if (o == null)   return false;  int mask=elements.length - 1;  int i=head;  Object x;  while ((x=elements[i]) != null) {    if (o.equals(x)) {      delete(i);      return true;    }    i=(i + 1) & mask;  }  return false;}  }
class C{  public boolean accept(File dir,String name){  return (name.toLowerCase().matches(this.filter));}  }
class C{  public boolean directoryExists(String dir){  boolean result=false;  StringBuilder buf=new StringBuilder();  String command=String.format(ImageServerDialogProperties.getString("cmd.directoryExists"),dir);  sendWaitFor(command,defaultTimeout,prompts,buf);  log.debug(buf.toString());  String[] lines=getLines(buf);  for (  String line : lines) {    if (line.trim().equals("1")) {      result=true;      break;    }    if (line.trim().equals("0")) {      result=false;      break;    }  }  return result;}  }
class C{  public static boolean isComponentCentredLTR(Panel p){  double borderLeft;  double borderRight;  double borderTop;  double borderBottom;  Rectangle firstRec=p.getComponent(0).getBounds();  Rectangle lastRec=p.getComponent(compCount - 1).getBounds();  System.out.println("bounds of the first rectangle in " + p.getName() + " = "+ firstRec);  System.out.println("bounds of the last rectangle in " + p.getName() + " = "+ lastRec);  borderLeft=firstRec.getX();  borderRight=p.getWidth() - lastRec.getWidth() - lastRec.getX();  borderTop=firstRec.getY();  borderBottom=p.getHeight() - lastRec.getHeight() - lastRec.getY();  return areBordersEqual(borderLeft,borderRight) && areBordersEqual(borderTop,borderBottom);}  }
class C{  public void testBug73163() throws Exception {  try {    stmt=conn.prepareStatement("LOAD DATA INFILE ? INTO TABLE testBug73163");  } catch (  SQLException e) {    if (e.getCause() instanceof IndexOutOfBoundsException && Util.isJdbc4()) {      fail("IOOBE thrown in Java6+ while preparing a LOAD DATA statement with placeholders.");    } else {      throw e;    }  }}  }
class C{  public long[] values(){  int found=0;  long[] result=new long[m_size];  for (int i=0; i < m_data.length; i++) {    long v=m_data[i];    if (v != FREE_KEY) {      result[found]=v;      found++;      if (found >= m_size) {        break;      }    }  }  return result;}  }
class C{  static public String showTable(final Path[] a,final Path[] pruned,final Map<PathIds,EdgeSample> edgeSamples){  final StringBuilder sb=new StringBuilder(128 * a.length);  final List<Path> underflowPaths=new LinkedList<Path>();  final Formatter f=new Formatter(sb);  f.format("%-4s %10s%1s * %10s (%8s %8s %8s %8s %8s %8s) = %10s %10s%1s : %10s %10s %10s %10s","path","srcCard","","f","in","sumRgCt","tplsRead","out","limit","adjCard","estRead","estCard","","sumEstRead","sumEstCard","sumEstCost","joinPath\n");  for (int i=0; i < a.length; i++) {    final Path x=a[i];    Boolean prune=null;    if (pruned != null) {      prune=Boolean.TRUE;      for (      Path y : pruned) {        if (y == x) {          prune=Boolean.FALSE;          break;        }      }    }    final EdgeSample edgeSample=x.edgeSample;    if (edgeSample == null) {      f.format("%4d %10s%1s * %10s (%8s %8s %8s %8s %8s %8s) = %10s %10s%1s : %10s %10s %10s",i,NA,"",NA,NA,NA,NA,NA,NA,NA,NA,NA,"",NA,NA,NA);    } else {      f.format("%4d %10d%1s * % 10.2f (%8d %8d %8d %8d %8d %8d) = %10d % 10d%1s : % 10d % 10d % 10d",i,edgeSample.sourceSample.estCard,edgeSample.sourceSample.estimateEnum.getCode(),edgeSample.f,edgeSample.inputCount,edgeSample.sumRangeCount,edgeSample.tuplesRead,edgeSample.outputCount,edgeSample.limit,edgeSample.adjCard,edgeSample.estRead,edgeSample.estCard,edgeSample.estimateEnum.getCode(),x.sumEstRead,x.sumEstCard,x.sumEstCost);    }    sb.append("  [");    for (    Vertex v : x.getVertices()) {      f.format("%2d ",v.pred.getId());    }    sb.append("]");    if (pruned != null) {      if (prune)       sb.append(" pruned");    }    sb.append("\n");    if (x.edgeSample.isUnderflow()) {      underflowPaths.add(x);    }  }  if (edgeSamples != null && !underflowPaths.isEmpty()) {    sb.append("\nPaths with cardinality estimate underflow::\n");    for (    Path p : underflowPaths) {      sb.append(showPath(p,edgeSamples));      sb.append("----\n");    }  }  return sb.toString();}  }
class C{  public CipherParameters generateDerivedParameters(int keySize){  keySize=keySize / 8;  byte[] dKey=generateDerivedKey(KEY_MATERIAL,keySize);  return new KeyParameter(dKey,0,keySize);}  }
class C{  public ConversionHandler to(MappedField destinationMappedField){  this.destinationField=destinationMappedField.getValue();  placeholders.put(destinationTypePattern,destinationField.getType().getName());  placeholders.put(destinationNamePattern,destinationField.getName());  placeholders.put(destinationGetPattern,destinationMappedField.getMethod());  placeholders.put(destinationSetPattern,destinationMappedField.setMethod());  return this;}  }
class C{  public static String right(String str,int len){  if (len < 0) {    throw new IllegalArgumentException("Requested String length " + len + " is less than zero");  }  if ((str == null) || (str.length() <= len)) {    return str;  } else {    return str.substring(str.length() - len);  }}  }
class C{  public int eval0(INode state){  JumpingSolitaireState node=(JumpingSolitaireState)state;  DoubleLinkedList<IMove> mv=node.validMoves();  int hn=(mv.size()) * 2;  int nf=0;  for (int i=0; i < node.filled.length; i++) {    if (node.filled[i])     nf++;  }  int ni=numIsolated(node);  if (ni == 1) {    hn+=(int)Math.sqrt(nf);  } else {    hn+=nf - ni * ni;  }  int gn=0;  DepthTransition t=(DepthTransition)state.storedData();  if (t != null) {    gn=t.depth;  }  return gn + hn;}  }
class C{  final private Object successor(final IKeyBuilder keyBuilder,final Object v){  final KeyType keyType=getPrimaryKeyType();switch (keyType) {case Integer:    return SuccessorUtil.successor(((Number)v).intValue());case Long:  return SuccessorUtil.successor(((Number)v).longValue());case Float:return SuccessorUtil.successor(((Number)v).floatValue());case Double:return SuccessorUtil.successor(((Number)v).doubleValue());case Unicode:case ASCII:throw new UnsupportedOperationException();case Date:return SuccessorUtil.successor(((Date)v).getTime());default :throw new UnsupportedOperationException();}}  }
class C{  private void validateCurrencyCompatibility(Product referenceProduct,Product compatibleProduct) throws ServiceCompatibilityException {  PriceModel referencePriceModel=referenceProduct.getPriceModel();  PriceModel comaptiblePriceModel=compatibleProduct.getPriceModel();  if (!isCompatibleCurrency(referencePriceModel,comaptiblePriceModel)) {    ServiceCompatibilityException ipc=new ServiceCompatibilityException("Definition of product compatibility failed,the price models have different currencies",ServiceCompatibilityException.Reason.CURRENCY);    logger.logWarn(Log4jLogger.SYSTEM_LOG | Log4jLogger.AUDIT_LOG,ipc,LogMessageIdentifier.WARN_DEFINE_COMPATIBILITY_FOR_PRODUCTS_FAILED_NOT_SAME_CURRENCY,dm.getCurrentUser().getUserId(),Long.toString(referencePriceModel.getKey()),Long.toString(comaptiblePriceModel.getKey()));    throw ipc;  }}  }
class C{  public void endPrefixMapping(String prefix) throws SAXException {  if (delayedPrefixes != null) {    if ("".equals(prefix)) {      prefix=XMLConstants.XMLNS_ATTRIBUTE;    } else {      prefix=XMLConstants.XMLNS_ATTRIBUTE + ":" + prefix;    }    delayedPrefixes.remove(prefix);  }}  }
class C{  public ChartPanel(JFreeChart chart,int width,int height,int minimumDrawWidth,int minimumDrawHeight,int maximumDrawWidth,int maximumDrawHeight,boolean useBuffer,boolean properties,boolean copy,boolean save,boolean print,boolean zoom,boolean tooltips){  setChart(chart);  this.chartMouseListeners=new EventListenerList();  this.info=new ChartRenderingInfo();  setPreferredSize(new Dimension(width,height));  this.useBuffer=useBuffer;  this.refreshBuffer=false;  this.minimumDrawWidth=minimumDrawWidth;  this.minimumDrawHeight=minimumDrawHeight;  this.maximumDrawWidth=maximumDrawWidth;  this.maximumDrawHeight=maximumDrawHeight;  this.zoomTriggerDistance=DEFAULT_ZOOM_TRIGGER_DISTANCE;  this.popup=null;  if (properties || copy || save|| print|| zoom) {    this.popup=createPopupMenu(properties,copy,save,print,zoom);  }  enableEvents(AWTEvent.MOUSE_EVENT_MASK);  enableEvents(AWTEvent.MOUSE_MOTION_EVENT_MASK);  setDisplayToolTips(tooltips);  addMouseListener(this);  addMouseMotionListener(this);  this.defaultDirectoryForSaveAs=null;  this.enforceFileExtensions=true;  ToolTipManager ttm=ToolTipManager.sharedInstance();  this.ownToolTipInitialDelay=ttm.getInitialDelay();  this.ownToolTipDismissDelay=ttm.getDismissDelay();  this.ownToolTipReshowDelay=ttm.getReshowDelay();  this.zoomAroundAnchor=false;  this.zoomOutlinePaint=Color.blue;  this.zoomFillPaint=new Color(0,0,255,63);  this.panMask=InputEvent.CTRL_MASK;  String osName=System.getProperty("os.name").toLowerCase();  if (osName.startsWith("mac os x")) {    this.panMask=InputEvent.ALT_MASK;  }  this.overlays=new java.util.ArrayList();}  }
class C{  public Interval toInterval(DateTimeZone zone){  zone=DateTimeUtils.getZone(zone);  DateTime start=toLocalDate(1).toDateTimeAtStartOfDay(zone);  DateTime end=plusMonths(1).toLocalDate(1).toDateTimeAtStartOfDay(zone);  return new Interval(start,end);}  }
class C{  private static void runRandomTest(final int wordLength,final int bytePadding,final int wordCount){  final long seed=randomLong();  final Random random=new Random(seed);  final Random verificationRandom=new Random(seed);  final long wordMask;  if (wordLength == 64) {    wordMask=~0L;  } else {    wordMask=(1L << wordLength) - 1L;  }  final BigEndianAscendingWordSerializer serializer=new BigEndianAscendingWordSerializer(wordLength,wordCount,bytePadding);  for (int i=0; i < wordCount; i++) {    final long value=random.nextLong() & wordMask;    serializer.writeWord(value);  }  final byte[] bytes=serializer.getBytes();  final BigEndianAscendingWordDeserializer deserializer=new BigEndianAscendingWordDeserializer(wordLength,bytePadding,bytes);  assertEquals(deserializer.totalWordCount(),wordCount);  for (int i=0; i < wordCount; i++) {    assertEquals(deserializer.readWord(),(verificationRandom.nextLong() & wordMask));  }}  }
class C{  public void add(PropertyMapBuilder builder){  builder.put(this,Flag.PRESENT);}  }
class C{  public boolean isPrimary(){  Object oo=get_Value(COLUMNNAME_IsPrimary);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void assertLev(String s,int maxDistance){  LevenshteinAutomata builder=new LevenshteinAutomata(s,false);  LevenshteinAutomata tbuilder=new LevenshteinAutomata(s,true);  Automaton automata[]=new Automaton[maxDistance + 1];  Automaton tautomata[]=new Automaton[maxDistance + 1];  for (int n=0; n < automata.length; n++) {    automata[n]=builder.toAutomaton(n);    tautomata[n]=tbuilder.toAutomaton(n);    assertNotNull(automata[n]);    assertNotNull(tautomata[n]);    assertTrue(automata[n].isDeterministic());    assertTrue(tautomata[n].isDeterministic());    assertTrue(Operations.isFinite(automata[n]));    assertTrue(Operations.isFinite(tautomata[n]));    assertFalse(Operations.hasDeadStatesFromInitial(automata[n]));    assertFalse(Operations.hasDeadStatesFromInitial(tautomata[n]));    if (n > 0) {      assertTrue(Operations.subsetOf(Operations.removeDeadStates(automata[n - 1]),Operations.removeDeadStates(automata[n])));      assertTrue(Operations.subsetOf(Operations.removeDeadStates(automata[n - 1]),Operations.removeDeadStates(tautomata[n])));      assertTrue(Operations.subsetOf(Operations.removeDeadStates(tautomata[n - 1]),Operations.removeDeadStates(automata[n])));      assertTrue(Operations.subsetOf(Operations.removeDeadStates(tautomata[n - 1]),Operations.removeDeadStates(tautomata[n])));      assertNotSame(automata[n - 1],automata[n]);    }    assertTrue(Operations.subsetOf(Operations.removeDeadStates(automata[n]),Operations.removeDeadStates(tautomata[n])));switch (n) {case 0:      assertTrue(Operations.sameLanguage(Automata.makeString(s),Operations.removeDeadStates(automata[0])));    assertTrue(Operations.sameLanguage(Automata.makeString(s),Operations.removeDeadStates(tautomata[0])));  break;case 1:assertTrue(Operations.sameLanguage(naiveLev1(s),Operations.removeDeadStates(automata[1])));assertTrue(Operations.sameLanguage(naiveLev1T(s),Operations.removeDeadStates(tautomata[1])));break;default :assertBruteForce(s,automata[n],n);assertBruteForceT(s,tautomata[n],n);break;}}}  }
class C{  private static long periodEnd(long now,long period,QDate cal){  if (period < 0)   return Long.MAX_VALUE; else   if (period == 0)   return now;  if (period < 30 * DAY) {    cal.setGMTTime(now);    long localTime=cal.getLocalTime();    localTime=localTime + (period - (localTime + 4 * DAY) % period);    cal.setLocalTime(localTime);    return cal.getGMTTime();  }  if (period % (30 * DAY) == 0) {    int months=(int)(period / (30 * DAY));    cal.setGMTTime(now);    long year=cal.getYear();    int month=cal.getMonth();    cal.setLocalTime(0);    cal.setDate(year,month + months,1);    return cal.getGMTTime();  }  if (period % (365 * DAY) == 0) {    long years=(period / (365 * DAY));    cal.setGMTTime(now);    long year=cal.getYear();    cal.setLocalTime(0);    long newYear=year + (years - year % years);    cal.setDate(newYear,0,1);    return cal.getGMTTime();  }  cal.setGMTTime(now);  long localTime=cal.getLocalTime();  localTime=localTime + (period - (localTime + 4 * DAY) % period);  cal.setLocalTime(localTime);  return cal.getGMTTime();}  }
class C{  public LayoutSelection(Graph layoutGraph){  if (layoutGraph == null) {    throw new NullPointerException("Layout graph must not be null.");  }  Object result;  try {    result=new MarshalledObject(layoutGraph).get();  } catch (  Exception e1) {    e1.printStackTrace();    throw new IllegalStateException("Could not clone.");  }  this.layoutGraph=(Graph)result;}  }
class C{  @android.view.RemotableViewMethod public void showNext(){  setDisplayedChild(mWhichChild + 1);}  }
class C{  @Specialization protected Object lazyLoadDBFetch(VirtualFrame frame,RIntVector key,RStringVector datafile,int compressed,RFunction envhook){  return lazyLoadDBFetchInternal(frame.materialize(),key,datafile,compressed,envhook);}  }
class C{  public void blend(PImage src,int sx,int sy,int sw,int sh,int dx,int dy,int dw,int dh,int mode){  int sx2=sx + sw;  int sy2=sy + sh;  int dx2=dx + dw;  int dy2=dy + dh;  loadPixels();  if (src == this) {    if (intersect(sx,sy,sx2,sy2,dx,dy,dx2,dy2)) {      blit_resize(get(sx,sy,sx2 - sx,sy2 - sy),0,0,sx2 - sx - 1,sy2 - sy - 1,pixels,width,height,dx,dy,dx2,dy2,mode);    } else {      blit_resize(src,sx,sy,sx2,sy2,pixels,width,height,dx,dy,dx2,dy2,mode);    }  } else {    src.loadPixels();    blit_resize(src,sx,sy,sx2,sy2,pixels,width,height,dx,dy,dx2,dy2,mode);  }  updatePixels();}  }
class C{  @Override protected void doAction(){  showPreferences();}  }
class C{  public void onCustomTilePosted(StatusBarPanelCustomTile sbc){}  }
class C{  protected void init() throws ValueStorageException {  try {    this.containsJavaFiles=hasJavaFilesInFolder(rootFolder);  } catch (  IllegalStateException e) {    throw new ValueStorageException(String.format("Unable to get files from ''%s''",rootFolder.getName()) + e.getMessage());  }  this.initialized=true;}  }
class C{  public String snapshot(){  return this.snapshot;}  }
class C{  private void appendStartTag(String qName,Attributes attributes){  charBuf.append("<" + qName);  for (  Map.Entry<String,String> entry : newNamespaceMappings.entrySet()) {    String prefix=entry.getKey();    String namespace=entry.getValue();    appendNamespaceDecl(charBuf,prefix,namespace);  }  int attCount=attributes.getLength();  for (int i=0; i < attCount; i++) {    appendAttribute(charBuf,attributes.getQName(i),attributes.getValue(i));  }  charBuf.append(">");  int colonIdx=qName.indexOf(':');  String prefix=(colonIdx > 0) ? qName.substring(0,colonIdx) : "";  if (!xmlLiteralPrefixes.contains(prefix) && !unknownPrefixesInXMLLiteral.contains(prefix)) {    unknownPrefixesInXMLLiteral.add(prefix);  }}  }
class C{  public byte[] recordAPICall(final serverObjects post,final String servletName,final String type,final String comment,int time,String unit){  if (post.containsKey(TABLE_API_COL_APICALL_PK)) {    return recordAPICall(post,servletName,type,comment);  }  if (time < 0 || unit == null || unit.isEmpty() || "minutes,hours,days".indexOf(unit) < 0) {    time=0;    unit="";  } else {    if (unit.equals("minutes") && time < 10)     time=10;  }  final String apiurl="/" + servletName + "?"+ post.toString();  byte[] pk=null;  try {    Data data=new Data();    data.put(TABLE_API_COL_TYPE,UTF8.getBytes(type));    data.put(TABLE_API_COL_COMMENT,UTF8.getBytes(comment));    byte[] date=ASCII.getBytes(GenericFormatter.SHORT_MILSEC_FORMATTER.format());    data.put(TABLE_API_COL_DATE_RECORDING,date);    data.put(TABLE_API_COL_DATE_LAST_EXEC,date);    data.put(TABLE_API_COL_URL,UTF8.getBytes(apiurl));    data.put(TABLE_API_COL_APICALL_COUNT,UTF8.getBytes("1"));    data.put(TABLE_API_COL_APICALL_SCHEDULE_TIME,ASCII.getBytes(Integer.toString(time)));    data.put(TABLE_API_COL_APICALL_SCHEDULE_UNIT,UTF8.getBytes(unit));    calculateAPIScheduler(data,false);    pk=super.insert(TABLE_API_NAME,data);  } catch (  final IOException e) {    ConcurrentLog.logException(e);  }catch (  final SpaceExceededException e) {    ConcurrentLog.logException(e);  }  ConcurrentLog.info("APICALL",apiurl);  return pk;}  }
class C{  public static TextureData newTextureData(GLProfile glp,URL url,boolean useMipMaps) throws IOException {  InputStream stream=new BufferedInputStream(url.openStream());  try {    return newTextureData(glp,stream,useMipMaps);  }  finally {    stream.close();  }}  }
class C{  public boolean isRedirect(){switch (code) {case HTTP_PERM_REDIRECT:case HTTP_TEMP_REDIRECT:case HTTP_MULT_CHOICE:case HTTP_MOVED_PERM:case HTTP_MOVED_TEMP:case HTTP_SEE_OTHER:    return true;default :  return false;}}  }
class C{  public WaitingThread nextThread(){  return this.waitingThreads.peek();}  }
class C{  public void invokeTalkback(){  if (mTalkback) {    Talkback.postTalkback(getCause() == null ? this : getCause());  }}  }
class C{  public boolean isSetHello(){  return this.hello != null;}  }
class C{  void closeSilently(Socket socket){  try {    socket.close();  } catch (  Exception e) {  }}  }
class C{  public static Talon talon(int pwmPort){  return pwmRegistrar.fetch(pwmPort,Talon.class,null);}  }
class C{  @Override protected void onNfcStateEnabled(){  toast(getString(R.string.nfcAvailableEnabled));}  }
class C{  protected void fixupSkips(byte[] bytes2){  byte[] bytes=bytes2;  for (Iterator enumerator=skips.iterator(); enumerator.hasNext(); ) {    Object[] obja=(Object[])enumerator.next();    String label=(String)obja[0];    int[] skipInfo=(int[])obja[1];    int skipIndex=skipInfo[0];    int skipLoc=skipInfo[1];    int[] labelInfo=(int[])labels.get(label);    if (labelInfo == null) {      System.out.println("Missing label '" + label + "' in action code");      continue;    }    int labelIndex=labelInfo[1];    int skip=labelIndex - skipIndex - 1;    byte val=OutStream.uintToByte(skip);    bytes[skipLoc]=val;  }}  }
class C{  public DBSCANClusterer(final double eps,final int minPts,final DistanceMeasure measure) throws NotPositiveException {  super(measure);  if (eps < 0.0d) {    throw new NotPositiveException(eps);  }  if (minPts < 0) {    throw new NotPositiveException(minPts);  }  this.eps=eps;  this.minPts=minPts;}  }
class C{  private boolean isRemoveEmptyBcSP(){  boolean ret=false;  Hop input=getInput().get(0);  double size=input.dimsKnown() ? OptimizerUtils.estimateSize(input.getDim1(),1) : input.getOutputMemEstimate();  if (OptimizerUtils.checkSparkBroadcastMemoryBudget(size)) {    ret=true;  }  return ret;}  }
class C{  public int successfulShards(){  return shardCounts.successful;}  }
class C{  void cancelStatement(String sessionId,int statementId){  for (  TcpServerThread c : New.arrayList(running)) {    if (c != null) {      c.cancelStatement(sessionId,statementId);    }  }}  }
class C{  protected void generateAdapter(){  PsiClass holderClass=getPsiClass().findInnerClassByName(Utils.getViewHolderClassName(),true);  if (holderClass != null) {    holderClass.delete();  }  StringBuilder holderBuilder=new StringBuilder();  holderBuilder.append(Utils.getViewHolderClassName());  holderBuilder.append("(android.view.View rootView) {");  holderBuilder.append(Definitions.Other_InitViewMethodInvoked);  holderBuilder.append("}");  PsiClass viewHolder=mFactory.createClassFromText(holderBuilder.toString(),getPsiClass());  viewHolder.setName(Utils.getViewHolderClassName());  StringBuilder injection=new StringBuilder();  for (  Element element : mElements) {    if (mContext.getFieldNameList().contains(element.fieldName)) {      continue;    }    injection.delete(0,injection.length());    injection.append("protected ");    injection.append(getFieldTypeName(element));    injection.append(" ");    injection.append(element.fieldName);    injection.append(";");    viewHolder.add(mFactory.createFieldFromText(injection.toString(),getPsiClass()));  }  generateInitMethods(viewHolder);  getPsiClass().add(viewHolder);  getPsiClass().addBefore(mFactory.createKeyword("static",getPsiClass()),getPsiClass().findInnerClassByName(Utils.getViewHolderClassName(),true));  processAdapterGetViewMethod();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected void updateComponents(){  Component comp;  comp=splitPane.getLeftComponent();  if (components[0] != comp) {    components[0]=comp;    if (comp == null) {      sizes[0]=0;    } else {      sizes[0]=-1;    }  }  comp=splitPane.getRightComponent();  if (components[1] != comp) {    components[1]=comp;    if (comp == null) {      sizes[1]=0;    } else {      sizes[1]=-1;    }  }  Component[] children=splitPane.getComponents();  Component oldDivider=components[2];  components[2]=null;  for (int counter=children.length - 1; counter >= 0; counter--) {    if (children[counter] != components[0] && children[counter] != components[1] && children[counter] != nonContinuousLayoutDivider) {      if (oldDivider != children[counter]) {        components[2]=children[counter];      } else {        components[2]=oldDivider;      }      break;    }  }  if (components[2] == null) {    sizes[2]=0;  } else {    sizes[2]=getSizeForPrimaryAxis(components[2].getPreferredSize());  }}  }
class C{  public synchronized NativeTcp registerIncomingTcpConnection(String originAddr,int originPort,String destAddr,int destPort){  EndPointInfo origin=new EndPointInfo(originAddr,originPort,ConnectionType.TCP);  EndPointInfo dest=new EndPointInfo(destAddr,destPort,ConnectionType.TCP);  Queue<NativeTcp> queue=incomingConnections.get(dest);  if (queue == null) {    queue=new ConcurrentLinkedQueue<>();    incomingConnections.put(dest,queue);  }  NativeTcp connection=new NativeTcp(dest,origin);  queue.add(connection);  return connection;}  }
class C{  void updateAllowedCountries(CrowdJob job) throws HttpServerErrorException {  RestTemplate restTemplate=new RestTemplate();  restTemplate.getMessageConverters().add(new FormHttpMessageConverter());  if (job.getExcludedCountries().size() > 0) {    restTemplate.put(baseJobURL,job.getExcludedCountriesMap(),job.getId(),apiKey);  }  if (job.getIncludedCountries().size() > 0) {    restTemplate.put(baseJobURL,job.getIncludedCountriesMap(),job.getId(),apiKey);  }}  }
class C{  @Override public Object createValue() throws BasicException {  Object[] customer=new Object[26];  customer[0]=m_oId == null ? UUID.randomUUID().toString() : m_oId;  customer[1]=m_jTaxID.getText();  customer[2]=m_jSearchkey.getText();  customer[3]=m_jName.getText();  customer[4]=m_jNotes.getText();  customer[5]=m_jVisible.isSelected();  customer[6]=Formats.STRING.parseValue(jcard.getText());  customer[7]=Formats.CURRENCY.parseValue(txtMaxdebt.getText(),0.0);  customer[8]=Formats.TIMESTAMP.parseValue(txtCurdate.getText());  customer[9]=Formats.CURRENCY.parseValue(txtCurdebt.getText());  customer[10]=Formats.STRING.parseValue(txtFirstName.getText());  customer[11]=Formats.STRING.parseValue(txtLastName.getText());  customer[12]=Formats.STRING.parseValue(txtEmail.getText());  customer[13]=Formats.STRING.parseValue(txtPhone.getText());  customer[14]=Formats.STRING.parseValue(txtPhone2.getText());  customer[15]=Formats.STRING.parseValue(txtFax.getText());  customer[16]=Formats.STRING.parseValue(txtAddress.getText());  customer[17]=Formats.STRING.parseValue(txtAddress2.getText());  customer[18]=Formats.STRING.parseValue(txtPostal.getText());  customer[19]=Formats.STRING.parseValue(txtCity.getText());  customer[20]=Formats.STRING.parseValue(txtRegion.getText());  customer[21]=Formats.STRING.parseValue(txtCountry.getText());  customer[22]=m_CategoryModel.getSelectedKey();  customer[23]=m_jImage.getImage();  customer[24]=Formats.TIMESTAMP.parseValue(j_mDOB.getText());  customer[25]=Formats.PERCENT.parseValue(txtDiscount.getText());  return customer;}  }
class C{  public ByteArrayAnnotatedOutput(byte[] data){  this(data,false);}  }
class C{  public void mergeShard(String fromShardId,String toShardId) throws AdminException, InterruptedException {  Range<Integer> range=lookupMergeRange(fromShardId,toShardId);  assignBuckets(range.lowerEndpoint(),range.upperEndpoint(),fromShardId,toShardId);}  }
class C{  public static Specification<JpaAction> hasTargetAssignedArtifact(final Target target,final Artifact localArtifact){  return null;}  }
class C{  public static int level(Element element){  int level=0;  while (element.hasParent()) {    element=element.getParent();    level++;  }  return level;}  }
class C{  public InputSource resolveEntity(String publicId,String systemId) throws SAXException {  if (publicId != null) {    publicId=publicId.toUpperCase(Locale.ENGLISH);  }  if (systemId != null) {    systemId=systemId.toUpperCase(Locale.ENGLISH);  }  InputSource source=null;  try {    String path=doctypeMap.get(publicId);    source=getInputSource(path);    if (source == null) {      path=doctypeMap.get(systemId);      source=getInputSource(path);    }  } catch (  Exception e) {    throw new SAXException(e.toString());  }  return source;}  }
class C{  public IndentAction(ResourceBundle bundle,String prefix,ITextEditor editor,boolean isTabAction){  super(bundle,prefix,editor);  fIsTabAction=isTabAction;}  }
class C{  public boolean writeStatisticsForAnalysis(){  logger.info("Writing statistics");  if (backend == null) {    LoggingUtils.getEvoLogger().info("Backend is null");    return false;  }  outputVariables.put(RuntimeVariable.Total_Time.name(),new OutputVariable<Object>(RuntimeVariable.Total_Time.name(),System.currentTimeMillis() - startTime));  TestSuiteChromosome individual=new TestSuiteChromosome();  Map<String,OutputVariable<?>> map=getOutputVariables(individual);  if (map == null) {    logger.error("Not going to write down statistics data, as some are missing");    return false;  }  boolean valid=RuntimeVariable.validateRuntimeVariables(map);  if (!valid) {    logger.error("Not going to write down statistics data, as some data is invalid");    return false;  } else {    backend.writeData(individual,map);    return true;  }}  }
class C{  protected ArrayList<KeyNamePair> loadShipmentData(int C_BPartner_ID){  ArrayList<KeyNamePair> list=new ArrayList<KeyNamePair>();  StringBuffer display=new StringBuffer("s.DocumentNo||' - '||").append(DB.TO_CHAR("s.MovementDate",DisplayType.Date,Env.getAD_Language(Env.getCtx())));  StringBuffer sql=new StringBuffer("SELECT s.M_InOut_ID,").append(display).append(" FROM M_InOut s " + "WHERE s.C_BPartner_ID=? AND s.IsSOTrx='N' AND s.DocStatus IN ('CL','CO')" + " AND s.M_InOut_ID IN "+ "(SELECT sl.M_InOut_ID FROM M_InOutLine sl"+ " LEFT OUTER JOIN M_MatchInv mi ON (sl.M_InOutLine_ID=mi.M_InOutLine_ID) "+ " JOIN M_InOut s2 ON (sl.M_InOut_ID=s2.M_InOut_ID) "+ " WHERE s2.C_BPartner_ID=? AND s2.IsSOTrx='N' AND s2.DocStatus IN ('CL','CO') "+ "GROUP BY sl.M_InOut_ID,mi.M_InOutLine_ID,sl.MovementQty "+ "HAVING (sl.MovementQty<>SUM(mi.Qty) AND mi.M_InOutLine_ID IS NOT NULL)"+ " OR mi.M_InOutLine_ID IS NULL) "+ "ORDER BY s.MovementDate");  try {    PreparedStatement pstmt=DB.prepareStatement(sql.toString(),null);    pstmt.setInt(1,C_BPartner_ID);    pstmt.setInt(2,C_BPartner_ID);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      list.add(new KeyNamePair(rs.getInt(1),rs.getString(2)));    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql.toString(),e);  }  return list;}  }
class C{  @Override protected void ensureNumberOfColumns(int numberOfColumns){  if (data.length >= numberOfColumns) {    return;  }  short[] newData=new short[numberOfColumns];  System.arraycopy(data,0,newData,0,data.length);  data=newData;}  }
class C{  public void putDoubleArray(String key,double[] value){  unparcel();  mMap.put(key,value);}  }
class C{  public static boolean checkPermission(String permissionName){  if (context == null) {    throw new RuntimeException("Before comparing permissions you need to call Nammu.initCatchException(context)");  }  return PackageManager.PERMISSION_GRANTED == context.checkSelfPermission(permissionName);}  }
class C{  private JSONStringer end(char m,char c) throws JSONException {  if (this.mode != m) {    throw new JSONException(m == 'o' ? "Misplaced endObject." : "Misplaced endArray.");  }  pop(m);  this.sb.append(c);  this.comma=true;  return this;}  }
class C{  public static InlineMenuBuilder builder(TelegramBot bot,Chat forWhom){  return new InlineMenuBuilder(bot).forWhom(forWhom);}  }
class C{  public static int computeArrayHeaderSize(RVMArray type){  return ARRAY_HEADER_SIZE;}  }
class C{  public void enableLogging(){  getStackLogger().enableLogging();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:02.335 -0500",hash_original_method="F6BA7163C74D6BF39003C6333C2CFD6D",hash_generated_method="5BE759E173072751C08E54289964369D") public boolean isSpeedRequired(){  return mSpeedRequired;}  }
class C{  private void initBoost(){  boost=usually() ? 1F : random().nextFloat() * 10000;}  }
class C{  public void openNativeNavigationApp(double latitude,double longitude){  impl.openNativeNavigationApp(latitude,longitude);}  }
class C{  @Override public List<Course> findAll(){  return this.courseRepository.findAll();}  }
class C{  public static <T>T checkNotNull(T reference,Object errorMessage){  if (reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  private XStringForFSB(String val){  super(val);  throw new IllegalArgumentException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_FSB_CANNOT_TAKE_STRING,null));}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case StextPackage.IMPORT_SCOPE__IMPORTS:    return getImports();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void evaluateCommunicationSummarySeverity(Collection<CommunicationSummaryStatistics> nodes){  long max=0;  Map<String,CommunicationSummaryStatistics> nodeMap=new HashMap<String,CommunicationSummaryStatistics>();  for (  CommunicationSummaryStatistics css : nodes) {    if (css.getAverageDuration() > max) {      max=css.getAverageDuration();    }    nodeMap.put(css.getId(),css);  }  for (  CommunicationSummaryStatistics css : nodes) {    deriveSeverity(css,max,nodeMap);  }}  }
class C{  public boolean equals(TransportAddress transportAddress){  return equalsTransportAddress(transportAddress);}  }
class C{  public JSONObject optJSONObject(int index){  Object o=this.opt(index);  return o instanceof JSONObject ? (JSONObject)o : null;}  }
class C{  private void tearDown(){  pendingMessages.add("*************************Tear Down*************************");  ExamplePubsubTopicAndSubscriptionOptions pubsubOptions=options.as(ExamplePubsubTopicAndSubscriptionOptions.class);  if (!pubsubOptions.getPubsubTopic().isEmpty()) {    try {      deletePubsubTopic(pubsubOptions.getPubsubTopic());      pendingMessages.add("The Pub/Sub topic has been deleted: " + pubsubOptions.getPubsubTopic());    } catch (    IOException e) {      pendingMessages.add("Failed to delete the Pub/Sub topic : " + pubsubOptions.getPubsubTopic());    }    if (!pubsubOptions.getPubsubSubscription().isEmpty()) {      try {        deletePubsubSubscription(pubsubOptions.getPubsubSubscription());        pendingMessages.add("The Pub/Sub subscription has been deleted: " + pubsubOptions.getPubsubSubscription());      } catch (      IOException e) {        pendingMessages.add("Failed to delete the Pub/Sub subscription : " + pubsubOptions.getPubsubSubscription());      }    }  }  ExampleBigQueryTableOptions bigQueryTableOptions=options.as(ExampleBigQueryTableOptions.class);  if (bigQueryTableOptions.getBigQueryDataset() != null && bigQueryTableOptions.getBigQueryTable() != null && bigQueryTableOptions.getBigQuerySchema() != null) {    pendingMessages.add("The BigQuery table might contain the example's output, " + "and it is not deleted automatically: " + bigQueryTableOptions.getProject() + ":"+ bigQueryTableOptions.getBigQueryDataset()+ "."+ bigQueryTableOptions.getBigQueryTable());    pendingMessages.add("Please go to the Developers Console to delete it manually." + " Otherwise, you may be charged for its usage.");  }}  }
class C{  public boolean isDeletable(){  final SubscriptionStatus status=getStatus();  return status == SubscriptionStatus.DEACTIVATED || status == SubscriptionStatus.EXPIRED || status == SubscriptionStatus.INVALID;}  }
class C{  public WritableRaster createCompatibleDestRaster(Raster src){  return src.createCompatibleWritableRaster(src.getWidth(),src.getHeight());}  }
class C{  private void init(){  l=new char[]{'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','#'};  paint=new Paint();  paint.setColor(Color.parseColor("#949494"));  paint.setTypeface(Typeface.DEFAULT_BOLD);  paint.setTextSize(22);  paint.setAntiAlias(true);  paint.setTextAlign(Paint.Align.CENTER);  gradientDrawable=new GradientDrawable(Orientation.BOTTOM_TOP,new int[]{0x99B0B0B0,0x99B0B0B0});  gradientDrawable.setCornerRadius(30);}  }
class C{  @DELETE @Produces(MediaType.APPLICATION_JSON) @Path("/{alertId}") @Description("Deletes the alert having the given ID along with all its triggers and notifications.") public Response deleteAlert(@Context HttpServletRequest req,@PathParam("alertId") BigInteger alertId){  if (alertId == null || alertId.compareTo(BigInteger.ZERO) < 1) {    throw new WebApplicationException("Alert Id cannot be null and must be a positive non-zero number.",Status.BAD_REQUEST);  }  Alert alert=alertService.findAlertByPrimaryKey(alertId);  if (alert != null) {    validateResourceAuthorization(req,alert.getOwner(),getRemoteUser(req));    alertService.markAlertForDeletion(alert);    return Response.status(Status.OK).build();  }  throw new WebApplicationException(Response.Status.NOT_FOUND.getReasonPhrase(),Response.Status.NOT_FOUND);}  }
class C{  public void removeLayoutComponent(Component comp){synchronized (comp.getTreeLock()) {    for (int i=0; i < vector.size(); i++) {      if (((Card)vector.get(i)).comp == comp) {        if (comp.isVisible() && (comp.getParent() != null)) {          next(comp.getParent());        }        vector.remove(i);        if (currentCard > i) {          currentCard--;        }        break;      }    }  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.PARAMETER___ANONYMOUS_PARAMETER_11:    return getAnonymous_parameter_1_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public TreePath(TreePath p,Tree t){  if (t.getKind() == Tree.Kind.COMPILATION_UNIT) {    compilationUnit=(CompilationUnitTree)t;    parent=null;  } else {    compilationUnit=p.compilationUnit;    parent=p;  }  leaf=t;}  }
class C{  public boolean isTileAvailable(final MapTile aTile){  return mTileCache.containsTile(aTile);}  }
class C{  @Override public void addValue(final IScope scope,final V v){  if (v instanceof GamaPair) {    setValueAtIndex(scope,(K)((GamaPair)v).key,(V)((GamaPair)v).value);  } else {    setValueAtIndex(scope,v,v);  }}  }
class C{  protected void calcYValueSum(){  mYValueSum=0;  if (mDataSets == null)   return;  for (int i=0; i < mDataSets.size(); i++) {    mYValueSum+=Math.abs(mDataSets.get(i).getYValueSum());  }}  }
class C{  protected void printInfo(final String message,final Object... args){  getGfsh().printAsInfo(String.format(message,args));}  }
class C{  public void addItem(File directory){  if (directory == null) {    return;  }  boolean useShellFolder=FilePane.usesShellFolder(chooser);  int oldSize=directories.size();  directories.clear();  if (oldSize > 0) {    fireIntervalRemoved(this,0,oldSize);  }  File[] baseFolders=(useShellFolder) ? (File[])ShellFolder.get("fileChooserComboBoxFolders") : fsv.getRoots();  directories.addAll(Arrays.asList(baseFolders));  File canonical;  try {    canonical=ShellFolder.getNormalizedFile(directory);  } catch (  IOException e) {    canonical=directory;  }  try {    File sf=useShellFolder ? ShellFolder.getShellFolder(canonical) : canonical;    File f=sf;    Vector<File> path=new Vector<File>(10);    do {      path.addElement(f);    } while ((f=f.getParentFile()) != null);    int pathCount=path.size();    for (int i=0; i < pathCount; i++) {      f=path.get(i);      if (directories.contains(f)) {        int topIndex=directories.indexOf(f);        for (int j=i - 1; j >= 0; j--) {          directories.insertElementAt(path.get(j),topIndex + i - j);        }        break;      }    }    calculateDepths();    setSelectedItem(sf);  } catch (  FileNotFoundException ex) {    calculateDepths();  }}  }
class C{  private void cleanup() throws Exception {  if (sesFactory1 != null)   sesFactory1.close();  sesFactory1=null;  if (sesFactory2 != null)   sesFactory2.close();  sesFactory2=null;  for (  IgniteCacheProxy<?,?> cache : ((IgniteKernal)grid(0)).caches())   cache.clear();}  }
class C{  public final void removeColumn(int index){  if (index < 0 || index >= variables.size()) {    throw new IllegalArgumentException("Not a column in this data set: " + index);  }  variables.remove(index);  int[] rows=new int[dataBox.numRows()];  for (int i=0; i < dataBox.numRows(); i++) {    rows[i]=i;  }  int[] cols=new int[dataBox.numCols() - 1];  int m=-1;  for (int i=0; i < dataBox.numCols(); i++) {    if (i != index) {      cols[++m]=i;    }  }  dataBox=viewSelection(rows,cols);}  }
class C{  public CategorylinksParser(InputStream inputStream) throws IOException {  init(inputStream);}  }
class C{  public static short parseShort(String string) throws NumberFormatException {  return parseShort(string,10);}  }
class C{  public static <V>List<V> invertList(List<V> sourceList){  if (isEmpty(sourceList)) {    return sourceList;  }  List<V> invertList=new ArrayList<V>(sourceList.size());  for (int i=sourceList.size() - 1; i >= 0; i--) {    invertList.add(sourceList.get(i));  }  return invertList;}  }
class C{  void removeEQ(Object o){  final ReentrantLock lock=this.lock;  lock.lock();  try {    Object[] array=queue;    for (int i=0, n=size; i < n; i++) {      if (o == array[i]) {        removeAt(i);        break;      }    }  }  finally {    lock.unlock();  }}  }
class C{  public static String genRandomString(int len){  return UUID.randomUUID().toString().replaceAll("-","").toUpperCase().substring(0,len);}  }
class C{  private boolean isRepresentingTab(String text){  if (text == null)   return false;  if (isInsertingSpacesForTab()) {    if (text.length() == 0 || text.length() > getVisualTabLengthPreference())     return false;    for (int i=0; i < text.length(); i++) {      if (text.charAt(i) != ' ')       return false;    }    return true;  } else   return text.length() == 1 && text.charAt(0) == '\t';}  }
class C{  protected Highlighter createHighlighter(){  return new RSyntaxTextAreaHighlighter();}  }
class C{  public static Date parseDate(final String dateValue) throws DateParseException {  return parseDate(dateValue,null,null);}  }
class C{  public static <E extends Comparable<E>>void breadthFirstTraversalUsingQueue(BinaryNode<E> node){  Queue<BinaryNode<E>> queue=new LinkedQueue<>();  breadthFirstTraversalUsingQueue(node,queue);}  }
class C{  private void findTvEpisodes(TvShow tvShow,File dir){  LOGGER.debug("parsing " + dir.getPath());  File[] content=dir.listFiles();  if (content == null) {    LOGGER.error("Whops. Cannot access directory: " + dir.getName());    return;  }synchronized (filesFound) {    filesFound.addAll(Arrays.asList(content));  }  Arrays.sort(content);  for (  File file : content) {    MediaFile mf=new MediaFile(file);    if (mf.isDiscFile()) {      findTvEpisodesAsDisc(tvShow,file.getParentFile());      break;    } else     if (file.isFile()) {      if (!file.getName().startsWith(skipFilesStartingWith)) {        if (!mf.getType().equals(MediaFileType.VIDEO)) {          continue;        }        List<TvShowEpisode> episodes=tvShowList.getTvEpisodesByFile(tvShow,file);        if (episodes.size() == 0) {          String relativePath=new File(tvShow.getPath()).toURI().relativize(file.toURI()).getPath();          EpisodeMatchingResult result=TvShowEpisodeAndSeasonParser.detectEpisodeFromFilenameAlternative(relativePath,tvShow.getTitle());          if (result.episodes.size() == 1 && result.season > -1 && result.stackingMarkerFound) {            TvShowEpisode ep=tvShow.getEpisode(result.season,result.episodes.get(0));            if (ep != null) {              ep.setNewlyAdded(true);              ep.addToMediaFiles(mf);              continue;            }          }          if (result.episodes.size() == 0) {            result=TvShowEpisodeAndSeasonParser.detectEpisodeFromDirectory(dir,tvShow.getPath());          }          if (result.season == -1) {            result.season=TvShowEpisodeAndSeasonParser.detectSeason(relativePath);          }          List<TvShowEpisode> episodesInNfo=TvShowEpisode.parseNFO(file);          if (episodesInNfo.size() > 0) {            for (            TvShowEpisode e : episodesInNfo) {              e.setPath(dir.getPath());              e.setTvShow(tvShow);              e.addToMediaFiles(mf);              e.setDateAddedFromMediaFile(mf);              if (e.getMediaSource() == MediaSource.UNKNOWN) {                e.setMediaSource(MediaSource.parseMediaSource(mf.getFile().getAbsolutePath()));              }              findAdditionalEpisodeFiles(e,file,content);              e.setNewlyAdded(true);              e.saveToDb();              tvShow.addEpisode(e);            }          } else           if (result.episodes.size() > 0) {            for (            int ep : result.episodes) {              TvShowEpisode episode=new TvShowEpisode();              episode.setDvdOrder(TvShowModuleManager.SETTINGS.isDvdOrder());              episode.setEpisode(ep);              episode.setSeason(result.season);              episode.setFirstAired(result.date);              if (result.name.isEmpty()) {                result.name=FilenameUtils.getBaseName(file.getName());              }              episode.setTitle(result.name);              episode.setPath(dir.getPath());              episode.setTvShow(tvShow);              episode.addToMediaFiles(mf);              episode.setDateAddedFromMediaFile(mf);              if (episode.getMediaSource() == MediaSource.UNKNOWN) {                episode.setMediaSource(MediaSource.parseMediaSource(mf.getFile().getAbsolutePath()));              }              findAdditionalEpisodeFiles(episode,file,content);              episode.setNewlyAdded(true);              episode.saveToDb();              tvShow.addEpisode(episode);            }          } else {            TvShowEpisode episode=new TvShowEpisode();            episode.setDvdOrder(TvShowModuleManager.SETTINGS.isDvdOrder());            episode.setEpisode(-1);            episode.setSeason(-1);            episode.setPath(dir.getPath());            episode.setTitle(FilenameUtils.getBaseName(file.getName()));            episode.setTvShow(tvShow);            episode.setFirstAired(result.date);            episode.addToMediaFiles(mf);            episode.setDateAddedFromMediaFile(mf);            if (episode.getMediaSource() == MediaSource.UNKNOWN) {              episode.setMediaSource(MediaSource.parseMediaSource(mf.getFile().getAbsolutePath()));            }            findAdditionalEpisodeFiles(episode,file,content);            episode.setNewlyAdded(true);            episode.saveToDb();            tvShow.addEpisode(episode);          }        } else {          for (          TvShowEpisode episode : episodes) {            if (findAdditionalEpisodeFiles(episode,file,content)) {              episode.saveToDb();            }          }        }      }    }    if (file.isDirectory() && !skipFolders.contains(file.getName().toUpperCase()) && !file.getName().matches(skipFoldersRegex)&& !TvShowModuleManager.SETTINGS.getTvShowSkipFolders().contains(file.getAbsolutePath())) {      File tmmIgnore=new File(file,".tmmignore");      File tmmIgnore2=new File(file,"tmmignore");      if (!tmmIgnore.exists() && !tmmIgnore2.exists()) {        if (file.getName().toUpperCase().equals("VIDEO_TS")) {          findTvEpisodesAsDisc(tvShow,file);        } else         if (file.getName().toUpperCase().equals("BDMV")) {          findTvEpisodesAsDisc(tvShow,file);        } else {          findTvEpisodes(tvShow,file);        }      }    }  }}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public static XContentBuilder contentBuilder(XContentType type,OutputStream outputStream) throws IOException {  if (type == XContentType.JSON) {    return jsonBuilder(outputStream);  } else   if (type == XContentType.SMILE) {    return smileBuilder(outputStream);  } else   if (type == XContentType.YAML) {    return yamlBuilder(outputStream);  } else   if (type == XContentType.CBOR) {    return cborBuilder(outputStream);  }  throw new IllegalArgumentException("No matching content type for " + type);}  }
class C{  public void rollback() throws ResourceException {  internalRollback();}  }
class C{  public void removeGenre(MediaGenres genre){  if (genresForAccess.contains(genre)) {    genresForAccess.remove(genre);    genres.remove(genre.name());    firePropertyChange(GENRE,null,genre);    firePropertyChange(GENRES_AS_STRING,null,genre);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public ParseException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  public void addBreak(TagPos closedPos,TagPos breakPos){  closedByChildBreak.add(closedPos);  breakingTags.add(breakPos);}  }
class C{  public boolean isOpeningCharacter(char c,boolean searchForward){  for (int i=0; i < fPairs.length; i+=2) {    if (searchForward && getStartChar(i) == c)     return true; else     if (!searchForward && getEndChar(i) == c)     return true;  }  return false;}  }
class C{  public TransformerFactoryConfigurationError(Exception e,String msg){  super(msg);  this.exception=e;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  TransformerImpl transformer=(TransformerImpl)xctxt.getOwnerObject();  XNodeSet nodes=null;  int context=xctxt.getCurrentNode();  DTM dtm=xctxt.getDTM(context);  int docContext=dtm.getDocumentRoot(context);  if (DTM.NULL == docContext) {  }  String xkeyname=getArg0().execute(xctxt).str();  QName keyname=new QName(xkeyname,xctxt.getNamespaceContext());  XObject arg=getArg1().execute(xctxt);  boolean argIsNodeSetDTM=(XObject.CLASS_NODESET == arg.getType());  KeyManager kmgr=transformer.getKeyManager();  if (argIsNodeSetDTM) {    XNodeSet ns=(XNodeSet)arg;    ns.setShouldCacheNodes(true);    int len=ns.getLength();    if (len <= 1)     argIsNodeSetDTM=false;  }  if (argIsNodeSetDTM) {    Hashtable usedrefs=null;    DTMIterator ni=arg.iter();    int pos;    UnionPathIterator upi=new UnionPathIterator();    upi.exprSetParent(this);    while (DTM.NULL != (pos=ni.nextNode())) {      dtm=xctxt.getDTM(pos);      XMLString ref=dtm.getStringValue(pos);      if (null == ref)       continue;      if (null == usedrefs)       usedrefs=new Hashtable();      if (usedrefs.get(ref) != null) {        continue;      } else {        usedrefs.put(ref,ISTRUE);      }      XNodeSet nl=kmgr.getNodeSetDTMByKey(xctxt,docContext,keyname,ref,xctxt.getNamespaceContext());      nl.setRoot(xctxt.getCurrentNode(),xctxt);      upi.addIterator(nl);    }    int current=xctxt.getCurrentNode();    upi.setRoot(current,xctxt);    nodes=new XNodeSet(upi);  } else {    XMLString ref=arg.xstr();    nodes=kmgr.getNodeSetDTMByKey(xctxt,docContext,keyname,ref,xctxt.getNamespaceContext());    nodes.setRoot(xctxt.getCurrentNode(),xctxt);  }  return nodes;}  }
class C{  public boolean isModal(){  return modal;}  }
class C{  public int sizeActiveSince(final long limitMinutes){  int c=this.seedActiveDB.size();  Seed seed;  Iterator<Seed> i=seedsSortedDisconnected(false,Seed.LASTSEEN);  while (i.hasNext()) {    seed=i.next();    if (seed != null) {      if (Math.abs((System.currentTimeMillis() - seed.getLastSeenUTC()) / 1000 / 60) > limitMinutes)       break;      c++;    }  }  i=seedsSortedPotential(false,Seed.LASTSEEN);  while (i.hasNext()) {    seed=i.next();    if (seed != null) {      if (Math.abs((System.currentTimeMillis() - seed.getLastSeenUTC()) / 1000 / 60) > limitMinutes)       break;      c++;    }  }  return c;}  }
class C{  public static void main(String[] args){  Properties streamsConfig=new Properties();  streamsConfig.put(StreamsConfig.APPLICATION_ID_CONFIG,"window-delay");  streamsConfig.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG,"localhost:9092");  streamsConfig.put(StreamsConfig.ZOOKEEPER_CONNECT_CONFIG,"localhost:2181");  streamsConfig.put(StreamsConfig.KEY_SERDE_CLASS_CONFIG,Serdes.String().getClass().getName());  streamsConfig.put(StreamsConfig.VALUE_SERDE_CLASS_CONFIG,Serdes.Long().getClass().getName());  Properties producerConfig=new Properties();  producerConfig.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,"localhost:9092");  producerConfig.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,Serdes.String().serializer().getClass().getName());  producerConfig.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,Serdes.Long().serializer().getClass().getName());  KStreamBuilder builder=new KStreamBuilder();  KStream<String,Long> longs=builder.stream("timed-longs");  KTable<Windowed<String>,Long> longSums=longs.groupByKey().reduce(null,TimeWindows.of(10000L).until(60000L),"longSums");  longSums.toStream().map(null).to(Serdes.String(),Serdes.String(),"summed-longs");  KafkaStreams streams=new KafkaStreams(builder,streamsConfig);  streams.start();  Random rng=new Random(12345L);  String[] keys={"A"};  KafkaProducer<String,Long> producer=new KafkaProducer<String,Long>(producerConfig);  try {    while (true) {      String key=keys[rng.nextInt(keys.length)];      Long value=1L;      Long time=System.currentTimeMillis();      if (Math.abs(rng.nextLong()) % 10 == 1) {        time-=(Math.abs(rng.nextLong()) % 60) * 1000;      }      System.out.println("key: " + key);      System.out.println("time: " + time.toString());      System.out.println();      producer.send(new ProducerRecord<String,Long>("timed-longs",null,time,key,value));      Thread.sleep(1000L);    }  } catch (  InterruptedException e) {    System.err.println("Execution interrupted, closing producer.");    producer.close();  }}  }
class C{  public boolean removeAll(Iterable<? extends Solution> iterable){  boolean changed=false;  for (  Solution solution : iterable) {    changed|=remove(solution);  }  return changed;}  }
class C{  public static boolean isLiteral(String in){  ELText txt=parse(in);  return txt == null || txt.isLiteral();}  }
class C{  private List<SwiftBaseListener> createListeners(Set<Rules> enabledRules,Printer printer,CommonTokenStream tokenStream,ConstructLengths constructLengths,CommentExtractor commentExtractor) throws CLIArgumentParserException {  List<SwiftBaseListener> listeners=new LinkedList<>();  Set<String> classNames=enabledRules.stream().map(null).collect(Collectors.toSet());  for (  String className : classNames) {    try {      if (className.equals(FileListener.class.getName())) {        continue;      }      if (className.equals(CommentWhitespaceListener.class.getName())) {        CommentWhitespaceListener commentWhitespaceListener=new CommentWhitespaceListener(printer,commentExtractor.getSingleLineComments(),commentExtractor.getMultilineComments());        commentWhitespaceListener.analyze();      } else       if (className.equals(TodoCommentListener.class.getName())) {        TodoCommentListener todoCommentListener=new TodoCommentListener(printer,commentExtractor.getSingleLineComments(),commentExtractor.getMultilineComments());        todoCommentListener.analyze();      } else       if (className.equals(BraceStyleListener.class.getName())) {        listeners.add(new BraceStyleListener(printer,tokenStream));      } else       if (className.equals(BlankLineListener.class.getName())) {        listeners.add(new BlankLineListener(printer,tokenStream));      } else {        Constructor listenerConstructor=Class.forName(className).getConstructor(Printer.class);        listeners.add((SwiftBaseListener)listenerConstructor.newInstance(printer));      }    } catch (    ReflectiveOperationException e) {      throw new CLIArgumentParserException("Listeners were not successfully created: " + e);    }  }  listeners.add(new MinLengthListener(printer,constructLengths,enabledRules));  listeners.add(new MaxLengthListener(printer,constructLengths,enabledRules));  return listeners;}  }
class C{  public ConcurrentIndexMap(){  this.array=new Object[10];}  }
class C{  public static Spannable filterAsyncFromResource(Context context,final Spannable spannable,int fontSize,String headName,final EmojiAsyncLoadTextView emojiAsyncLoadTextView){  if (spannable == null) {    return null;  }  Matcher m=getMatcher(spannable.toString());  if (m != null) {    while (m.find()) {      String emojiHex=Integer.toHexString(Character.codePointAt(m.group(),0));      int resID=context.getResources().getIdentifier(headName + emojiHex,"mipmap",context.getPackageName());      if (resID <= 0) {        resID=context.getResources().getIdentifier(headName + emojiHex,"drawable",context.getPackageName());      }      if (resID > 0) {        EmojiDrawable emojiDrawable=new EmojiDrawable();        emojiDrawable.setBounds(0,0,fontSize,fontSize);        final EmojiSpan emojiSpan=new EmojiSpan(emojiDrawable,emojiAsyncLoadTextView);        spannable.setSpan(emojiSpan,m.start(),m.end(),Spannable.SPAN_INCLUSIVE_EXCLUSIVE);        emojiAsyncLoadTextView.addAsyncLoadTask(emojiDrawable,context.getResources(),resID,null);      }    }  }  return spannable;}  }
class C{  public void write(char cbuf[],int off,int len) throws IOException {  if (_output == null)   throw new IOException("Writer closed");  _tmpBuffer=cbuf;  _output.append(_tmpBufferAsCharSequence,off,off + len);  _tmpBuffer=null;}  }
class C{  long subtractBillingOffset(long billingInvocationTime,long billingOffset){  Calendar cal=getCalendar();  cal.setTimeInMillis(billingInvocationTime - billingOffset);  cal.set(Calendar.HOUR_OF_DAY,0);  cal.set(Calendar.MINUTE,0);  cal.set(Calendar.SECOND,0);  cal.set(Calendar.MILLISECOND,0);  return cal.getTimeInMillis();}  }
class C{  @Override public boolean isResetted(){  return (red == 0.0f && green == 0.0f && blue == 0.0f && alpha == 1.0f);}  }
class C{  public MLDouble(String name,double[] vals,int m){  this(name,castToDouble(vals),m);}  }
class C{  @Override protected void initListeners(){}  }
class C{  public void write(OutStream out,boolean hasAlpha) throws IOException {  out.writeUI8(fillType);  if (fillType == SWFConstants.FILL_SOLID) {    if (hasAlpha) {      color.writeWithAlpha(out);    } else {      color.writeRGB(out);    }  } else   if (fillType == SWFConstants.FILL_LINEAR_GRADIENT || fillType == SWFConstants.FILL_RADIAL_GRADIENT) {    matrix.write(out);    int numRatios=ratios.length;    out.writeUI8(numRatios);    for (int i=0; i < numRatios; i++) {      if (colors[i] == null) {        continue;      }      out.writeUI8(ratios[i]);      if (hasAlpha) {        colors[i].writeWithAlpha(out);      } else {        colors[i].writeRGB(out);      }    }  } else   if (fillType == SWFConstants.FILL_TILED_BITMAP || fillType == SWFConstants.FILL_CLIPPED_BITMAP) {    out.writeUI16(bitmapId);    matrix.write(out);  }}  }
class C{  public static boolean isFileURL(URL url){  String protocol=url.getProtocol();  return (URL_PROTOCOL_FILE.equals(protocol) || URL_PROTOCOL_VFSFILE.equals(protocol) || URL_PROTOCOL_VFS.equals(protocol));}  }
class C{  public static String normalize(final CharSequence self){  final String s=self.toString();  int nx=s.indexOf('\r');  if (nx < 0) {    return s;  }  final int len=s.length();  final StringBuilder sb=new StringBuilder(len);  int i=0;  do {    sb.append(s,i,nx);    sb.append('\n');    if ((i=nx + 1) >= len)     break;    if (s.charAt(i) == '\n') {      if (++i >= len)       break;    }    nx=s.indexOf('\r',i);  } while (nx > 0);  sb.append(s,i,len);  return sb.toString();}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == TypeArgument.class) {switch (baseOperationID) {case TypeRefsPackage.TYPE_ARGUMENT___GET_TYPE_REF_AS_STRING:      return TypeRefsPackage.FUNCTION_TYPE_REF___GET_TYPE_REF_AS_STRING;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == TypeRef.class) {switch (baseOperationID) {case TypeRefsPackage.TYPE_REF___IS_GENERIC:  return TypeRefsPackage.FUNCTION_TYPE_REF___IS_GENERIC;case TypeRefsPackage.TYPE_REF___IS_RAW:return TypeRefsPackage.FUNCTION_TYPE_REF___IS_RAW;case TypeRefsPackage.TYPE_REF___GET_TYPE_REF_AS_STRING:return TypeRefsPackage.FUNCTION_TYPE_REF___GET_TYPE_REF_AS_STRING;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == ParameterizedTypeRef.class) {switch (baseOperationID) {case TypeRefsPackage.PARAMETERIZED_TYPE_REF___GET_TYPE_REF_AS_STRING:return TypeRefsPackage.FUNCTION_TYPE_REF___GET_TYPE_REF_AS_STRING;case TypeRefsPackage.PARAMETERIZED_TYPE_REF___IS_GENERIC:return TypeRefsPackage.FUNCTION_TYPE_REF___IS_GENERIC;case TypeRefsPackage.PARAMETERIZED_TYPE_REF___IS_RAW:return TypeRefsPackage.FUNCTION_TYPE_REF___IS_RAW;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == FunctionTypeExprOrRef.class) {switch (baseOperationID) {case TypeRefsPackage.FUNCTION_TYPE_EXPR_OR_REF___GET_DECLARED_THIS_TYPE:return TypeRefsPackage.FUNCTION_TYPE_REF___GET_DECLARED_THIS_TYPE;case TypeRefsPackage.FUNCTION_TYPE_EXPR_OR_REF___GET_FUNCTION_TYPE:return TypeRefsPackage.FUNCTION_TYPE_REF___GET_FUNCTION_TYPE;case TypeRefsPackage.FUNCTION_TYPE_EXPR_OR_REF___GET_TYPE_VARS:return TypeRefsPackage.FUNCTION_TYPE_REF___GET_TYPE_VARS;case TypeRefsPackage.FUNCTION_TYPE_EXPR_OR_REF___GET_TYPE_VAR_UPPER_BOUND__TYPEVARIABLE:return TypeRefsPackage.FUNCTION_TYPE_REF___GET_TYPE_VAR_UPPER_BOUND__TYPEVARIABLE;case TypeRefsPackage.FUNCTION_TYPE_EXPR_OR_REF___GET_FPARS:return TypeRefsPackage.FUNCTION_TYPE_REF___GET_FPARS;case TypeRefsPackage.FUNCTION_TYPE_EXPR_OR_REF___GET_RETURN_TYPE_REF:return TypeRefsPackage.FUNCTION_TYPE_REF___GET_RETURN_TYPE_REF;case TypeRefsPackage.FUNCTION_TYPE_EXPR_OR_REF___IS_GENERIC:return TypeRefsPackage.FUNCTION_TYPE_REF___IS_GENERIC;case TypeRefsPackage.FUNCTION_TYPE_EXPR_OR_REF___IS_RAW:return TypeRefsPackage.FUNCTION_TYPE_REF___IS_RAW;case TypeRefsPackage.FUNCTION_TYPE_EXPR_OR_REF___GET_FPAR_FOR_ARG_IDX__INT:return TypeRefsPackage.FUNCTION_TYPE_REF___GET_FPAR_FOR_ARG_IDX__INT;case TypeRefsPackage.FUNCTION_TYPE_EXPR_OR_REF___GET_TYPE_REF_AS_STRING:return TypeRefsPackage.FUNCTION_TYPE_REF___GET_TYPE_REF_AS_STRING;default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  @Override public int compareTo(final MutableLong other){  return NumberUtils.compare(this.value,other.value);}  }
class C{  public Blob readBlob() throws SQLException {  return (Blob)getNextAttribute();}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public static final String convertToText(final String input,final boolean isXMLExtraction){  final StringBuffer output_data;  if (isXMLExtraction) {    final byte[] rawData=StringUtils.toBytes(input);    final int length=rawData.length;    int ptr=0;    boolean inToken=false;    for (int i=0; i < length; i++) {      if (rawData[i] == '<') {        inToken=true;        if (rawData[i + 1] == 'S' && rawData[i + 2] == 'p' && rawData[i + 3] == 'a' && rawData[i + 4] == 'c' && rawData[i + 5] == 'e') {          rawData[ptr]='\t';          ptr++;        }      } else       if (rawData[i] == '>') {        inToken=false;      } else       if (!inToken) {        rawData[ptr]=rawData[i];        ptr++;      }    }    final byte[] cleanedString=new byte[ptr];    System.arraycopy(rawData,0,cleanedString,0,ptr);    output_data=new StringBuffer(new String(cleanedString));  } else {    output_data=new StringBuffer(input);  }  return output_data.toString();}  }
class C{  @ObjectiveCName("onProfileOpenWithUid:") public void onProfileOpen(int uid){  modules.getEvents().post(new PeerInfoOpened(Peer.user(uid)));}  }
class C{  private void validateSchemaColumns(List<SchemaColumn> schemaColumns,LinkedHashMap<String,SchemaColumn> schemaEqualityValidationMap){  if (!CollectionUtils.isEmpty(schemaColumns)) {    LinkedHashMap<String,SchemaColumn> schemaColumnNameValidationMap=new LinkedHashMap<>();    for (    SchemaColumn schemaColumn : schemaColumns) {      Assert.hasText(schemaColumn.getName(),"A schema column name must be specified.");      Assert.hasText(schemaColumn.getType(),"A schema column data type must be specified.");      schemaColumn.setName(schemaColumn.getName().trim());      schemaColumn.setType(schemaColumn.getType().trim());      schemaColumn.setSize(schemaColumn.getSize() == null ? null : schemaColumn.getSize().trim());      schemaColumn.setDefaultValue(schemaColumn.getDefaultValue() == null ? null : schemaColumn.getDefaultValue().trim());      String lowercaseSchemaColumnName=schemaColumn.getName().toLowerCase();      if (schemaColumnNameValidationMap.containsKey(lowercaseSchemaColumnName)) {        throw new IllegalArgumentException(String.format("Duplicate schema column name \"%s\" found.",schemaColumn.getName()));      }      schemaColumnNameValidationMap.put(lowercaseSchemaColumnName,schemaColumn);      SchemaColumn existingSchemaColumn=schemaEqualityValidationMap.get(lowercaseSchemaColumnName);      if ((existingSchemaColumn != null) && !schemaColumn.equals(existingSchemaColumn)) {        throw new IllegalArgumentException("Schema data and partition column configurations with name \"" + schemaColumn.getName() + "\" have conflicting values. All column values are case sensitive and must be identical.");      }      schemaEqualityValidationMap.put(lowercaseSchemaColumnName,schemaColumn);    }  }}  }
class C{  private @Nullable RemoteViews buildExpandedView(final List<StatusBarNotificationEvo> sbns,final PendingIntent click_pending_intent){  if (sbns.isEmpty())   return null;  final RemoteViews expanded=new RemoteViews(getPackageName(),R.layout.bundle_expanded_notification);  expanded.removeAllViews(R.id.bundle_expanded_container);  for (  final StatusBarNotificationEvo sbn : sbns)   try {    expanded.addView(R.id.bundle_expanded_container,sbn.notification().getContentView());  } catch (  final RemoteException ignored) {  }  expanded.setOnClickPendingIntent(R.id.bundle_expanded_container,click_pending_intent);  return expanded;}  }
class C{  private void initializeField(){  log.info("Updating block snapshot replication group instance.");  DbClient dbClient=this.getDbClient();  List<URI> snapURIs=dbClient.queryByType(BlockSnapshot.class,false);  Iterator<BlockSnapshot> snaps=dbClient.queryIterativeObjects(BlockSnapshot.class,snapURIs);  while (snaps.hasNext()) {    BlockSnapshot snapshot=snaps.next();    log.info("Examining block snapshot (id={}) for upgrade",snapshot.getId().toString());    String groupInstance=snapshot.getSnapshotGroupInstance();    if (NullColumnValueGetter.isNotNullValue(groupInstance)) {      log.info("Setting replicationGroupInstance",groupInstance);      snapshot.setReplicationGroupInstance(groupInstance);      dbClient.persistObject(snapshot);    }  }}  }
class C{  private HashMapEntry<K,V>[] makeTable(int newCapacity){  @SuppressWarnings("unchecked") HashMapEntry<K,V>[] newTable=(HashMapEntry<K,V>[])new HashMapEntry[newCapacity];  table=newTable;  threshold=(newCapacity >> 1) + (newCapacity >> 2);  return newTable;}  }
class C{  @SuppressWarnings("rawtypes") static public <FV>TranslationModel<IString,FV> factory(String filename,String... options) throws IOException {  String featurePrefix=null;  boolean setSystemIndex=true;  int dynamicSampleSize=DynamicTranslationModel.DEFAULT_SAMPLE_SIZE;  FeatureTemplate dynamicTemplate=FeatureTemplate.DENSE_EXT;  int dynamicPhraseLength=DynamicTranslationModel.DEFAULT_MAX_PHRASE_LEN;  String reorderingType=null;  for (  final String option : options) {    final String[] fields=option.split(SEPARATOR);    final String key=fields[0];    final String value=fields[1];    if (key.equals(FEATURE_PREFIX_OPTION)) {      featurePrefix=value;    } else     if (key.equals(DYNAMIC_INDEX)) {      setSystemIndex=Boolean.valueOf(value);    } else     if (key.equals(DYNAMIC_SAMPLE_SIZE)) {      dynamicSampleSize=Integer.valueOf(value);    } else     if (key.equals(DYNAMIC_FEATURE_TEMPLATE)) {      dynamicTemplate=FeatureTemplate.valueOf(value);    } else     if (key.equals(DYNAMIC_PHRASE_LENGTH)) {      dynamicPhraseLength=Integer.valueOf(value);    } else     if (key.equalsIgnoreCase(DYNAMIC_REORDERING)) {      reorderingType=value;    } else {      logger.warn("Unknown key/value pair: {}",option);    }  }  TranslationModel<IString,FV> translationModel;  if (filename.startsWith(DTU_TAG)) {    final String file=filename.substring(DTU_TAG.length());    translationModel=new DTUTable<FV>(file);  } else   if (filename.startsWith(DYNAMIC_TAG)) {    final String file=filename.substring(DYNAMIC_TAG.length());    translationModel=DynamicTranslationModel.load(file,setSystemIndex,DynamicTranslationModel.DEFAULT_NAME);    ((DynamicTranslationModel)translationModel).setSampleSize(dynamicSampleSize);    ((DynamicTranslationModel)translationModel).setMaxSourcePhrase(dynamicPhraseLength);    ((DynamicTranslationModel)translationModel).setMaxTargetPhrase(dynamicPhraseLength);    ((DynamicTranslationModel)translationModel).createQueryCache(dynamicTemplate);    if (reorderingType != null) {      boolean doHierarchical=reorderingType.equals("hier");      ((DynamicTranslationModel)translationModel).setReorderingScores(doHierarchical);    }  } else {    translationModel=featurePrefix == null ? new CompiledPhraseTable<FV>(filename) : new CompiledPhraseTable<FV>(featurePrefix,filename);  }  return translationModel;}  }
class C{  public Name operatorName(JCTree.Tag tag){  return opname[tag.operatorIndex()];}  }
class C{  NetworkUpdateResult saveNetwork(WifiConfiguration config){  if (config == null || (config.networkId == INVALID_NETWORK_ID && config.SSID == null)) {    return new NetworkUpdateResult(INVALID_NETWORK_ID);  }  boolean newNetwork=(config.networkId == INVALID_NETWORK_ID);  NetworkUpdateResult result=addOrUpdateNetworkNative(config);  int netId=result.getNetworkId();  if (newNetwork && netId != INVALID_NETWORK_ID) {    mWifiNative.enableNetwork(netId,false);    mConfiguredNetworks.get(netId).status=Status.ENABLED;  }  mWifiNative.saveConfig();  sendConfiguredNetworksChangedBroadcast(config,result.isNewNetwork() ? WifiManager.CHANGE_REASON_ADDED : WifiManager.CHANGE_REASON_CONFIG_CHANGE);  return result;}  }
class C{  public String toString(){  return "(" + x + " "+ y+ ")";}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void showView(View view){  if (view != null) {    view.setVisibility(View.VISIBLE);  }}  }
class C{  public OsmElement remove(final long key){  int ptr=(int)(Tools.phiMix(key) & m_mask);  OsmElement e=m_data[ptr];  if (e == FREE_KEY) {    return null;  } else   if (e.getOsmId() == key) {    --m_size;    if (m_data[(int)((ptr + 1) & m_mask)] == FREE_KEY) {      m_data[ptr]=FREE_KEY;    } else {      m_data[ptr]=removedKey;    }    return e;  }  while (true) {    ptr=(int)((ptr + 1) & m_mask);    e=m_data[ptr];    if (e == FREE_KEY) {      return null;    } else     if (e.getOsmId() == key) {      --m_size;      if (m_data[(int)((ptr + 1) & m_mask)] == FREE_KEY) {        m_data[ptr]=FREE_KEY;      } else {        m_data[ptr]=removedKey;      }      return e;    }  }}  }
class C{  public void incrementJspReloadCount(){  jspReloadCount.incrementAndGet();}  }
class C{  public static void assertTextNotEmpty(String text,String message){  if (text == null) {    throw new NullPointerException("assertion failed: " + message);  }  if (text.trim().length() == 0) {    throw new IllegalArgumentException("assertion failed: " + message);  }}  }
class C{  public CredentialException(String msg){  super(msg);}  }
class C{  public static FreeBusyType find(String value){  return enums.find(value);}  }
class C{  public JobMessageFromOperator(String message,Locale locale){  super(message,locale);}  }
class C{  public static void showErrorDialog(String message,@NotNull @Nls(capitalization=Nls.Capitalization.Title) String title){  try {    if (canShowMacSheetPanel()) {      MacMessages.getInstance().showErrorDialog(title,message,OK_BUTTON,null);      return;    }  } catch (  MessageException ignored) {  }catch (  Exception reportThis) {    LOG.error(reportThis);  }  showDialog(message,title,new String[]{OK_BUTTON},0,getErrorIcon());}  }
class C{  public void clear(){  corpus.clear();  tokenCountsClear();  hamMessageCount=0;  spamMessageCount=0;}  }
class C{  public SpeechClickListener(Activity activity){  this.activity=activity;}  }
class C{  @DELETE @Path("/{id}") @CheckPermission(roles={Role.TENANT_ADMIN}) public Response deleteSchedulePolicy(@PathParam("id") URI policyId){  ArgValidator.checkFieldUriType(policyId,SchedulePolicy.class,"policyId");  SchedulePolicy schedulePolicy=getPolicyById(policyId,true);  ArgValidator.checkReference(SchedulePolicy.class,policyId,checkForDelete(schedulePolicy));  StringSet resources=schedulePolicy.getAssignedResources();  if (resources != null && !resources.isEmpty()) {    _log.error("Unable to delete schedule policy {} as it is already associated with resources",schedulePolicy.getPolicyName());    throw APIException.badRequests.unableToDeleteSchedulePolicy(schedulePolicy.getPolicyName());  }  _dbClient.markForDeletion(schedulePolicy);  _log.info("Schedule policy {} deleted successfully",schedulePolicy.getPolicyName());  return Response.ok().build();}  }
class C{  public void notifyChangedSlot(LocoNetSlot s){  DccThrottle throttle=createThrottle((LocoNetSystemConnectionMemo)adapterMemo,s);  notifyThrottleKnown(throttle,new DccLocoAddress(s.locoAddr(),isLongAddress(s.locoAddr())));  if (waitingForNotification.containsKey(s.locoAddr())) {    waitingForNotification.get(s.locoAddr()).interrupt();    waitingForNotification.remove(s.locoAddr());  }}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.writeInt(size());  Enumeration<String> comps=getAll();  while (comps.hasMoreElements()) {    s.writeObject(comps.nextElement());  }}  }
class C{  public int minIndex(){  if (isEmpty())   throw new NoSuchElementException("Priority queue is empty");  return pq[d];}  }
class C{  public final int indexOf(int elem,int index){  for (int i=index; i < m_firstFree; i++) {    if (m_map[i] == elem)     return i;  }  return java.lang.Integer.MIN_VALUE;}  }
class C{  public void transform(CoordinateSequence seq,int i){  double xp=m00 * seq.getOrdinate(i,0) + m01 * seq.getOrdinate(i,1) + m02;  double yp=m10 * seq.getOrdinate(i,0) + m11 * seq.getOrdinate(i,1) + m12;  seq.setOrdinate(i,0,xp);  seq.setOrdinate(i,1,yp);}  }
class C{  public String marshalLenient(JAXBElement<?> element){  try {    return internalMarshal(element,false);  } catch (  MarshalException e) {    throw new RuntimeException("MarshalException shouldn't be thrown in lenient mode",e);  }}  }
class C{  public boolean isStandardCosting(){  String cm=getCostingMethod();  return cm != null && cm.equals(COSTINGMETHOD_StandardCosting) && COSTELEMENTTYPE_Material.equals(getCostElementType());}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  private void convertPasswords(){  char[] password=removePassword();  boolean passwordHash=removeProperty("PASSWORD_HASH",false);  if (getProperty("CIPHER",null) != null) {    int space=-1;    for (int i=0, len=password.length; i < len; i++) {      if (password[i] == ' ') {        space=i;        break;      }    }    if (space < 0) {      throw DbException.get(ErrorCode.WRONG_PASSWORD_FORMAT);    }    char[] np=new char[password.length - space - 1];    char[] filePassword=new char[space];    System.arraycopy(password,space + 1,np,0,np.length);    System.arraycopy(password,0,filePassword,0,space);    Arrays.fill(password,(char)0);    password=np;    fileEncryptionKey=FilePathEncrypt.getPasswordBytes(filePassword);    filePasswordHash=hashPassword(passwordHash,"file",filePassword);  }  userPasswordHash=hashPassword(passwordHash,user,password);}  }
class C{  public ParseTreeNode build() throws ParseException, IllegalStateException, IOException {  is=guessInputSource(is);  cp=guessCharProducer(cp,content,sourceMap,meta,is,inputStream,charset);  cacheInSourceMap(sourceMap,is,cp,content);  cacheInMessageContext(mc,is);  type=guessContentType(cp,is,type);  ParseTreeNode node=parse();  return node;}  }
class C{  public ClientConnection reset(Address leader,Collection<Address> servers){  selector.reset(leader,servers);  return this;}  }
class C{  public void simplify(Collection taggedLines){  for (Iterator i=taggedLines.iterator(); i.hasNext(); ) {    inputIndex.add((TaggedLineString)i.next());  }  for (Iterator i=taggedLines.iterator(); i.hasNext(); ) {    TaggedLineStringSimplifier tlss=new TaggedLineStringSimplifier(inputIndex,outputIndex);    tlss.setDistanceTolerance(distanceTolerance);    tlss.simplify((TaggedLineString)i.next());  }}  }
class C{  protected void updateIntensityIntermediate(double intensity){  throw new IllegalArgumentException("intensity value " + intensity + " between min "+ mMinIntensity+ " and max "+ mMaxIntensity);}  }
class C{  public void onHostManualConfigurationNext(HostInfo hostInfo){  HostManager hostManager=HostManager.getInstance(this);  HostInfo newHostInfo=hostManager.addHost(hostInfo);  hostManager.switchHost(newHostInfo);  switchToFragment(new AddHostFragmentFinish());}  }
class C{  public boolean isSigned(){  if (signed == null)   return true; else   return signed;}  }
class C{  private void handleVplexVolumeErrors(DbClient dbClient){  List<String> finalMessages=new ArrayList<String>();  for (  URI id : getIds()) {    Volume volume=dbClient.queryObject(Volume.class,id);    if (volume.getAssociatedVolumes() != null && !volume.getAssociatedVolumes().isEmpty()) {      _log.info("Looking at VPLEX virtual volume {}",volume.getLabel());      boolean deactivateVirtualVolume=true;      List<String> livingVolumeNames=new ArrayList<String>();      _log.info("Its associated volumes are: " + volume.getAssociatedVolumes());      for (      String associatedVolumeUri : volume.getAssociatedVolumes()) {        Volume associatedVolume=dbClient.queryObject(Volume.class,URI.create(associatedVolumeUri));        if (associatedVolume != null && !associatedVolume.getInactive()) {          _log.warn("VPLEX virtual volume {} has active associated volume {}",volume.getLabel(),associatedVolume.getLabel());          livingVolumeNames.add(associatedVolume.getLabel());          deactivateVirtualVolume=false;        }      }      if (deactivateVirtualVolume) {        _log.info("VPLEX virtual volume {} has no active associated volumes, marking for deletion",volume.getLabel());        dbClient.markForDeletion(volume);      } else {        String message="VPLEX virtual volume " + volume.getLabel() + " will not be marked for deletion "+ "because it still has active associated volumes (";        message+=Joiner.on(",").join(livingVolumeNames) + ")";        finalMessages.add(message);        _log.warn(message);      }    }  }  if (!finalMessages.isEmpty()) {    String finalMessage=Joiner.on("; ").join(finalMessages) + ".";    _log.error(finalMessage);  }}  }
class C{  public void updateStatus(JobContext jobContext) throws Exception {  CloseableIterator<CIMObjectPath> iterator=null;  DbClient dbClient=jobContext.getDbClient();  JobStatus jobStatus=getJobStatus();  try {    if (jobStatus == JobStatus.IN_PROGRESS) {      return;    }    String opId=getTaskCompleter().getOpId();    StringBuilder logMsgBuilder=new StringBuilder(String.format("Updating status of job %s to %s, task: %s",this.getJobName(),jobStatus.name(),opId));    CIMConnectionFactory cimConnectionFactory=jobContext.getCimConnectionFactory();    WBEMClient client=getWBEMClient(dbClient,cimConnectionFactory);    iterator=client.associatorNames(getCimJob(),null,SmisConstants.CIM_STORAGE_VOLUME,null,null);    if (jobStatus == JobStatus.SUCCESS) {      List<CIMObjectPath> volumePaths=new ArrayList<CIMObjectPath>();      while (iterator.hasNext()) {        volumePaths.add(iterator.next());      }      if (volumePaths.size() != _count) {        logMsgBuilder.append("\n");        logMsgBuilder.append(String.format("   Failed to create required number %s of meta members for meta head %s caused by %s: , task: %s.",_count,_metaHead.getLabel(),_errorDescription,opId));        _log.error(logMsgBuilder.toString());        setFailedStatus(logMsgBuilder.toString());      } else {        logMsgBuilder.append("\n");        logMsgBuilder.append(String.format("   Created required number %s of meta members for meta head %s, task: %s .",_count,_metaHead.getLabel(),opId));        Iterator<CIMObjectPath> volumePathsIterator=volumePaths.iterator();        while (volumePathsIterator.hasNext()) {          CIMObjectPath volumePath=volumePathsIterator.next();          CIMProperty<String> deviceID=(CIMProperty<String>)volumePath.getKey(SmisConstants.CP_DEVICE_ID);          String nativeID=deviceID.getValue();          _metaMembers.add(nativeID);          logMsgBuilder.append(String.format("%n   Meta member device ID: %s",nativeID));        }        _log.info(logMsgBuilder.toString());      }    } else     if (jobStatus == JobStatus.FAILED || jobStatus == JobStatus.FATAL_ERROR) {      logMsgBuilder.append("\n");      logMsgBuilder.append(String.format("Task %s failed to create meta members for meta head volume: %s caused by: %s",opId,_metaHead.getLabel(),_errorDescription));      _log.error(logMsgBuilder.toString());      setFailedStatus(logMsgBuilder.toString());    }  } catch (  Exception e) {    _log.error("Caught an exception while trying to updateStatus for " + this.getJobName(),e);    setPostProcessingErrorStatus("Encountered an internal error during " + this.getJobName() + " job status processing : "+ e.getMessage());  } finally {    if (iterator != null) {      iterator.close();    }    _metaVolumeTaskCompleter.setLastStepStatus(jobStatus);    if (jobStatus != JobStatus.IN_PROGRESS) {      String opId=_metaVolumeTaskCompleter.getVolumeTaskCompleter().getOpId();      WorkflowService.getInstance().storeStepData(opId,_metaMembers);      _log.debug("Set meta members for meta volume in WF. Members: {}",_metaMembers);      StringSet metaMembersSet=new StringSet(_metaMembers);      _metaHead.setMetaVolumeMembers(metaMembersSet);      dbClient.persistObject(_metaHead);      _log.info("Set meta members for meta volume in metaHead. Members: {}",_metaMembers);    }    if (isJobInTerminalFailedState()) {      super.updateStatus(jobContext);    }  }}  }
class C{  public void unregisterCallback(IProviderCallback cb){synchronized (mCallbacks) {    mCallbacks.remove(cb);  }}  }
class C{  public static void commit(){  getEntityManager().getTransaction().commit();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(isSupported13.class,args);}  }
class C{  public static boolean isOracle(){  if (s_cc != null)   return s_cc.isOracle();  log.severe("No Database Connection");  return false;}  }
class C{  public void targetplatform(Action<TargetPlatform> targetplatform){  targetplatform("targetplatform",targetplatform);}  }
class C{  public String toString(){  StringBuffer sbuf=new StringBuffer();  sbuf.append("Schema[");  for (int i=0; i < m_size; ++i) {    if (i > 0)     sbuf.append(' ');    sbuf.append('(').append(m_names[i]).append(", ");    sbuf.append(m_types[i].getName()).append(", ");    sbuf.append(m_dflts[i]).append(')');  }  sbuf.append(']');  return sbuf.toString();}  }
class C{  private void updateOptimisticLocks(Long optimisticLockTime,OperationGroup createGroup,OperationGroup updateGroup){  logStep("Updating optimistic locks");  updateOptimisticLocks(optimisticLockTime,createGroup.getEntities());  updateOptimisticLocks(optimisticLockTime,updateGroup.getEntities());}  }
class C{  public static ComponentUI createUI(JComponent x){  return new BEMenuUI();}  }
class C{  public static void main(String[] args) throws IOException {  PubSubServer server=PubSub.startServer();  try {    server.join();  } catch (  InterruptedException e) {    server.shutdown();  }}  }
class C{  UpdateAction createUpdateAction(final Workspace workspace,final WorkspaceComponentDeserializer componentDeserializer,final ArchivedUpdateAction archivedAction){  UpdateAction retAction=null;  if (archivedAction.getUpdateAction() instanceof UpdateComponent) {    try {      WorkspaceComponent comp=componentDeserializer.getComponent(archivedAction.getComponentId());      retAction=archivedAction.getUpdateAction().getClass().getConstructor(new Class[]{WorkspaceUpdater.class,WorkspaceComponent.class}).newInstance(workspace.getUpdater(),comp);    } catch (    Exception e) {      e.printStackTrace();    }  } else   if (archivedAction.getUpdateAction() instanceof UpdateAllBuffered) {    try {      retAction=archivedAction.getUpdateAction().getClass().getConstructor(new Class[]{WorkspaceUpdater.class}).newInstance(workspace.getUpdater());    } catch (    Exception e) {      e.printStackTrace();    }  } else   if (archivedAction.getUpdateAction() instanceof UpdateActionCustom) {    try {      String script=((UpdateActionCustom)archivedAction.getUpdateAction()).getScriptString();      retAction=archivedAction.getUpdateAction().getClass().getConstructor(new Class[]{WorkspaceUpdater.class,String.class}).newInstance(workspace.getUpdater(),script);    } catch (    Exception e) {      e.printStackTrace();    }  } else   if (archivedAction.getUpdateAction() instanceof UpdateCoupling) {    try {      String id=archivedAction.getCouplingId();      Coupling<?> coupling=workspace.getCoupling(id);      retAction=archivedAction.getUpdateAction().getClass().getConstructor(new Class[]{Coupling.class}).newInstance(coupling);    } catch (    Exception e) {      e.printStackTrace();    }  }  return retAction;}  }
class C{  @Override public boolean hasNotWorsened(T chromosome){  throw new UnsupportedOperationException("Not implemented for default objective");}  }
class C{  protected void messageSent() throws Exception {}  }
class C{  public static void paintSelectionDecoration(@NotNull RadComponent component,Graphics g,boolean focused){  if (component.isSelected()) {    if (focused) {      g.setColor(PlatformColors.BLUE);    } else {      g.setColor(Color.GRAY);    }    final Point[] points=getPoints(component.getWidth(),component.getHeight());    for (    final Point point : points) {      g.fillRect(point.x - R,point.y - R,2 * R + 1,2 * R + 1);    }  } else   if (component.getWidth() < FormEditingUtil.EMPTY_COMPONENT_SIZE || component.getHeight() < FormEditingUtil.EMPTY_COMPONENT_SIZE) {    Graphics2D g2d=(Graphics2D)g;    Composite oldComposite=g2d.getComposite();    Stroke oldStroke=g2d.getStroke();    Color oldColor=g2d.getColor();    g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_ATOP,0.5f));    g2d.setStroke(new BasicStroke(0.7f));    g2d.setColor(Color.black);    g2d.drawRect(0,0,Math.max(component.getWidth(),FormEditingUtil.EMPTY_COMPONENT_SIZE),Math.max(component.getHeight(),FormEditingUtil.EMPTY_COMPONENT_SIZE));    g2d.setComposite(oldComposite);    g2d.setStroke(oldStroke);    g2d.setColor(oldColor);  }}  }
class C{  public static boolean parseListExpression(PsiBuilder b,int l){  PerlTokenData prevTokenData=((PerlBuilder)b).lookupToken(-1);  if (prevTokenData != null && prevTokenData.getTokenType() == OPERATOR_DEREFERENCE) {    return false;  }  IElementType tokenType=b.getTokenType();  IElementType nextTokenType=b.lookAhead(1);  if (CONVERTABLE_TOKENS.contains(tokenType) && nextTokenType != LEFT_PAREN && !PACKAGE_TOKENS.contains(nextTokenType) && !(nextTokenType == IDENTIFIER && ((PerlBuilder)b).isKnownPackage(((PerlBuilder)b).lookupToken(1).getTokenText()))) {    String tokenText=b.getTokenText();    if (!PerlSubUtil.BUILT_IN_UNARY.contains(tokenText)) {      boolean r=PerlParserImpl.method(b,l);      if (r && !PerlSubUtil.BUILT_IN_ARGUMENTLESS.contains(tokenText)) {        PerlParserImpl.call_arguments(b,l);      }      return r;    }  } else   if (PACKAGE_TOKENS.contains(tokenType) && CONVERTABLE_TOKENS.contains(nextTokenType) && b.lookAhead(2) != LEFT_PAREN) {    String packageName=b.getTokenText();    String subName=((PerlBuilder)b).lookupToken(1).getTokenText();    if (!PerlSubUtil.isUnary(packageName,subName)) {      boolean r=PerlParserImpl.method(b,l);      if (r && !PerlSubUtil.isArgumentless(packageName,subName)) {        PerlParserImpl.call_arguments(b,l);      }      return r;    }  }  return false;}  }
class C{  static public void run(Class<? extends TestCase> testClass){  run(new TestSuite(testClass));}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Node findTag(Set<String> tags,String value,Node node){  if (node == null) {    return null;  }  Node nextNode=node;  while (!tags.contains(nextNode.getNodeName()) || ((value != null) && (nextNode.getTextContent().indexOf(value) == -1))) {    NodeList nodes=nextNode.getChildNodes();    if (nodes.getLength() > 0) {      Node child=findTag(tags,value,nodes.item(0));      if (child != null) {        return child;      }    }    nextNode=nextNode.getNextSibling();    if (nextNode == null) {      return null;    }  }  return nextNode;}  }
class C{  public SetTriggeringResponse clone(){  SetTriggeringResponse result=new SetTriggeringResponse();  result.ResponseHeader=ResponseHeader == null ? null : ResponseHeader.clone();  result.AddResults=AddResults == null ? null : AddResults.clone();  result.AddDiagnosticInfos=AddDiagnosticInfos == null ? null : AddDiagnosticInfos.clone();  result.RemoveResults=RemoveResults == null ? null : RemoveResults.clone();  result.RemoveDiagnosticInfos=RemoveDiagnosticInfos == null ? null : RemoveDiagnosticInfos.clone();  return result;}  }
class C{  public void onRestoreInstanceState(@Nullable final Parcelable parcelable){  if (parcelable instanceof Bundle) {    Bundle bundle=(Bundle)parcelable;    mFirstAnimatedPosition=bundle.getInt(SAVEDINSTANCESTATE_FIRSTANIMATEDPOSITION);    mLastAnimatedPosition=bundle.getInt(SAVEDINSTANCESTATE_LASTANIMATEDPOSITION);    mShouldAnimate=bundle.getBoolean(SAVEDINSTANCESTATE_SHOULDANIMATE);  }}  }
class C{  public static void writeSlope(InputStream in,PrintStream out) throws IOException {  new RocSlope(in,out);}  }
class C{  public static ZKLogMetadataForReader of(URI uri,String logName,String logIdentifier){  return new ZKLogMetadataForReader(uri,logName,logIdentifier);}  }
class C{  public int updateConfiguration(final String name,final String configuration){  mSingleArg[0]=name;  final ContentValues values=mValues;  values.clear();  values.put(ConfigurationContract.Configuration.XML,configuration);  values.put(ConfigurationContract.Configuration.DELETED,0);  return mDatabase.update(Tables.CONFIGURATIONS,values,NAME_SELECTION,mSingleArg);}  }
class C{  void checkEntry(ZipEntry ze,int count,int dataLength){  byte[] extraData=ze.getExtra();  byte[] data=getField(TEST_HEADER,extraData);  if (!check(data != null,"unexpected null data for TEST_HEADER")) {    return;  }  if (dataLength == 0) {    check(data.length == 0,"unexpected non-zero data length for TEST_HEADER");  } else {    check(Arrays.equals(extra[count],data),"failed to get entry " + ze.getName() + ", expected "+ new String(extra[count])+ ", got '"+ new String(data)+ "'");  }}  }
class C{  public static ModifierKeyword fromFlagValue(int flagValue){  for (Iterator it=KEYWORDS.values().iterator(); it.hasNext(); ) {    ModifierKeyword k=(ModifierKeyword)it.next();    if (k.toFlagValue() == flagValue) {      return k;    }  }  return null;}  }
class C{  @Override public String generateDeviceSpecificExportGroupRemoveVolumesCleanup(Workflow workflow,String previousStep,StorageSystem storage,ExportGroup exportGroup,List<URI> volumeURIs,List<URI> initiatorURIs){  return generateExportGroupRemoveVolumesCleanup(workflow,previousStep,storage,exportGroup,volumeURIs,initiatorURIs);}  }
class C{  @SuppressWarnings({"SynchronizationOnLocalVariableOrMethodParameter","BusyWait"}) private void sendSessionAttributes(Map<?,?> attrs,GridTaskSessionImpl ses) throws IgniteCheckedException {  assert attrs != null;  assert ses != null;  Collection<ComputeJobSibling> siblings=ses.getJobSiblings();  GridIoManager commMgr=ctx.io();  long timeout=ses.getEndTime() - U.currentTimeMillis();  if (timeout <= 0) {    U.warn(log,"Session attributes won't be set due to task timeout: " + attrs);    return;  }  Set<UUID> rcvrs=new HashSet<>();  UUID locNodeId=ctx.localNodeId();synchronized (ses) {    if (ses.isClosed()) {      if (log.isDebugEnabled())       log.debug("Setting session attributes on closed session (will ignore): " + ses);      return;    }    ses.setInternal(attrs);    for (    ComputeJobSibling s : siblings) {      GridJobSiblingImpl sib=(GridJobSiblingImpl)s;      UUID nodeId=sib.nodeId();      if (!nodeId.equals(locNodeId) && !sib.isJobDone() && !rcvrs.contains(nodeId))       rcvrs.add(nodeId);    }  }  if (ctx.event().isRecordable(EVT_TASK_SESSION_ATTR_SET)) {    Event evt=new TaskEvent(ctx.discovery().localNode(),"Changed attributes: " + attrs,EVT_TASK_SESSION_ATTR_SET,ses.getId(),ses.getTaskName(),ses.getTaskClassName(),false,null);    ctx.event().record(evt);  }  IgniteCheckedException ex=null;  for (  ComputeJobSibling s : ses.getJobSiblings()) {    GridJobSiblingImpl sib=(GridJobSiblingImpl)s;    UUID nodeId=sib.nodeId();    if (rcvrs.remove(nodeId)) {      ClusterNode node=ctx.discovery().node(nodeId);      if (node != null) {        boolean loc=node.id().equals(ctx.localNodeId()) && !ctx.config().isMarshalLocalJobs();        GridTaskSessionRequest req=new GridTaskSessionRequest(ses.getId(),null,loc ? null : marsh.marshal(attrs),attrs);        try {          commMgr.sendOrderedMessage(node,sib.jobTopic(),req,SYSTEM_POOL,timeout,false);        } catch (        IgniteCheckedException e) {          node=ctx.discovery().node(nodeId);          if (node != null) {            try {              Thread.sleep(DISCO_TIMEOUT);            } catch (            InterruptedException ignore) {              U.warn(log,"Got interrupted while sending session attributes.");            }            node=ctx.discovery().node(nodeId);          }          String err="Failed to send session attribute request message to node " + "(normal case if node left grid) [node=" + node + ", req="+ req+ ']';          if (node != null)           U.warn(log,err); else           if (log.isDebugEnabled())           log.debug(err);          if (ex == null)           ex=e;        }      }    }  }  if (ex != null)   throw ex;}  }
class C{  public boolean attempt(Word old,Word value,Offset offset){  return false;}  }
class C{  protected void addAttribute(){  attributes.put(attribute,builder.toString().trim());  attribute=null;  Strings.clearBuilder(builder);}  }
class C{  public PeerAddress(NetworkParameters params,byte[] payload,int offset,int protocolVersion,Message parent,MessageSerializer serializer) throws ProtocolException {  super(params,payload,offset,protocolVersion,parent,serializer,UNKNOWN_LENGTH);}  }
class C{  private void updateIdealPoint(Solution solution){  for (int i=0; i < solution.getNumberOfObjectives(); i++) {    idealPoint[i]=Math.min(idealPoint[i],solution.getObjective(i));  }}  }
class C{  private void pushLongestPathFrom(final IOperandTreeNode node){  IOperandTreeNode current=node;  do {    m_traversalStack.push(new Pair<IOperandTreeNode,Integer>(current,0));    if ((current.getChildren().size() <= 1) || (current.getType() == ExpressionType.EXPRESSION_LIST)) {      break;    }    current=current.getChildren().get(0);  } while (true);}  }
class C{  private static Path2D createTopTabShape(int x,int y,int w,int h,double rTop,boolean addBottom){  Path2D path=new Path2D.Double();  path.append(new Line2D.Double(x,y + h - 1,x,y + rTop),true);  QuadCurve2D curve=new QuadCurve2D.Double(x,y + rTop,x,y,x + rTop,y);  path.append(curve,true);  path.append(new Line2D.Double(x + rTop,y,x + w - rTop,y),true);  curve=new QuadCurve2D.Double(x + w - rTop,y,x + w,y,x + w,y + rTop);  path.append(curve,true);  path.append(new Line2D.Double(x + w,y + rTop,x + w,y + h),true);  if (addBottom) {    path.append(new Line2D.Double(x + w,y + h - 1,x,y + h - 1),true);  }  return path;}  }
class C{  public float[] keys(){  float[] keys=new float[size()];  float[] k=_set;  byte[] states=_states;  for (int i=k.length, j=0; i-- > 0; ) {    if (states[i] == FULL) {      keys[j++]=k[i];    }  }  return keys;}  }
class C{  public static void timesEquals(double[] y,double f){  for (int i=0; i < y.length; i++)   y[i]*=f;}  }
class C{  @ObjectiveCName("changeSendByEnterWithValue:") public void changeSendByEnter(boolean val){  modules.getSettingsModule().changeSendByEnter(val);}  }
class C{  @Override protected boolean calcProblem(){  String highway=getTagWithKey(Tags.KEY_HIGHWAY);  if (Tags.VALUE_ROAD.equalsIgnoreCase(highway)) {    return true;  }  if ((getTagWithKey(Tags.KEY_NAME) == null) && (getTagWithKey(Tags.KEY_REF) == null) && !(hasTagWithValue(Tags.KEY_NONAME,Tags.VALUE_YES) || hasTagWithValue(Tags.KEY_VALIDATE_NO_NAME,Tags.VALUE_YES))) {    for (    String h : importantHighways) {      if (h.equalsIgnoreCase(highway)) {        return true;      }    }  }  return super.calcProblem();}  }
class C{  public static void validateQos(int qos){  if ((qos < 0) || (qos > 2)) {    throw new IllegalArgumentException();  }}  }
class C{  private void mergeChild(CharsToNameCanonicalizer child){  if (child.size() > MAX_ENTRIES_FOR_REUSE || child._longestCollisionList > MAX_COLL_CHAIN_FOR_REUSE) {synchronized (this) {      initTables(DEFAULT_TABLE_SIZE);      _dirty=false;    }  } else {    if (child.size() <= size()) {      return;    }synchronized (this) {      _symbols=child._symbols;      _buckets=child._buckets;      _size=child._size;      _sizeThreshold=child._sizeThreshold;      _indexMask=child._indexMask;      _longestCollisionList=child._longestCollisionList;      _dirty=false;    }  }}  }
class C{  public DHGenParameterSpec(int primeSize,int exponentSize){  this.primeSize=primeSize;  this.exponentSize=exponentSize;}  }
class C{  protected boolean haveSharedCellsRaw(DoubleMatrix1D other){  if (other instanceof SelectedDenseDoubleMatrix1D) {    SelectedDenseDoubleMatrix1D otherMatrix=(SelectedDenseDoubleMatrix1D)other;    return this.elements == otherMatrix.elements;  } else   if (other instanceof DenseDoubleMatrix1D) {    DenseDoubleMatrix1D otherMatrix=(DenseDoubleMatrix1D)other;    return this.elements == otherMatrix.elements;  }  return false;}  }
class C{  public static IMethod findMethod(IMethod method,IMethod[] methods) throws JavaModelException {  return findMethod(method.getElementName(),method.getParameterTypes().length,method.isConstructor(),methods);}  }
class C{  public static boolean load(String prefix){  Properties prop=getEnv(prefix);  if (prop == null)   return false;  Object[] pp=prop.keySet().toArray();  for (int i=0; i < pp.length; i++) {    String key=pp[i].toString();    String value=prop.getProperty(key);    System.setProperty(key,value);  }  CLogMgt.printProperties(System.getProperties(),"System with Environment",false);  return true;}  }
class C{  public GsmCellLocation(Bundle bundle){  mLac=bundle.getInt("lac",mLac);  mCid=bundle.getInt("cid",mCid);  mPsc=bundle.getInt("psc",mPsc);}  }
class C{  private void createWorkflowStepForVirtualVolumeExpansion(Workflow workflow,StorageSystem vplexSystem,URI vplexVolumeURI,Long newSize,List<String> systemNativeGuids,String waitFor) throws WorkflowException {  URI vplexURI=vplexSystem.getId();  Workflow.Method vplexExecuteMethod=new Workflow.Method(EXPAND_VIRTUAL_VOLUME_METHOD_NAME,vplexURI,vplexVolumeURI,newSize,systemNativeGuids);  workflow.createStep(VIRTUAL_VOLUME_EXPAND_STEP,String.format("Expanding volume %s on VPlex system %s",vplexVolumeURI,vplexURI),waitFor,vplexURI,vplexSystem.getSystemType(),getClass(),vplexExecuteMethod,null,null);  _log.info("Created step for virtual volume expansion");}  }
class C{  private TByteArrayOutputStream readJSONString(boolean skipContext) throws TException {  TByteArrayOutputStream arr=new TByteArrayOutputStream(DEF_STRING_SIZE);  if (!skipContext) {    context_.read();  }  readJSONSyntaxChar(QUOTE);  while (true) {    byte ch=reader_.read();    if (ch == QUOTE[0]) {      break;    }    if (ch == ESCSEQ[0]) {      ch=reader_.read();      if (ch == ESCSEQ[1]) {        readJSONSyntaxChar(ZERO);        readJSONSyntaxChar(ZERO);        trans_.readAll(tmpbuf_,0,2);        ch=(byte)((hexVal((byte)tmpbuf_[0]) << 4) + hexVal(tmpbuf_[1]));      } else {        int off=ESCAPE_CHARS.indexOf(ch);        if (off == -1) {          throw new TProtocolException(TProtocolException.INVALID_DATA,"Expected control char");        }        ch=ESCAPE_CHAR_VALS[off];      }    }    arr.write(ch);  }  return arr;}  }
class C{  private void sort(Data<Resource> data,List<String> sortFields){  List<Comparator<Resource>> comparisonFunctions=buildComparisonFunctions(sortFields);  data.sort(null);}  }
class C{  void unsubscribe(final String topic,String invocationContext,String activityToken){  service.traceDebug(TAG,"unsubscribe({" + topic + "},{"+ invocationContext+ "}, {"+ activityToken+ "})");  final Bundle resultBundle=new Bundle();  resultBundle.putString(MqttServiceConstants.CALLBACK_ACTION,MqttServiceConstants.UNSUBSCRIBE_ACTION);  resultBundle.putString(MqttServiceConstants.CALLBACK_ACTIVITY_TOKEN,activityToken);  resultBundle.putString(MqttServiceConstants.CALLBACK_INVOCATION_CONTEXT,invocationContext);  if ((myClient != null) && (myClient.isConnected())) {    IMqttActionListener listener=new MqttConnectionListener(resultBundle);    try {      myClient.unsubscribe(topic,invocationContext,listener);    } catch (    Exception e) {      handleException(resultBundle,e);    }  } else {    resultBundle.putString(MqttServiceConstants.CALLBACK_ERROR_MESSAGE,NOT_CONNECTED);    service.traceError("subscribe",NOT_CONNECTED);    service.callbackToActivity(clientHandle,Status.ERROR,resultBundle);  }}  }
class C{  private boolean hasMultipleVisibleTopLevelElement(PsiFile file){  int visibleChildren=0;  for (  PsiElement psiElement : file.getChildren()) {    if (psiElement instanceof PsiWhiteSpace || psiElement instanceof PsiComment) {      continue;    }    visibleChildren++;    if (visibleChildren > 1) {      return true;    }  }  return false;}  }
class C{  public SpringImporterAssembler(ApplicationContext context){  this(context,Visibility.module);}  }
class C{  private void sincronizarBase(){  listaEstratigrafia=ControleDAO.getBanco().getEstratigrafiaDAO().listar();}  }
class C{  public void displayApng(String uri,ImageView imageView,DisplayImageOptions options,ApngConfig config,ApngListener apngListener){  super.displayImage(uri,imageView,options,new ApngImageLoadingListener(context,Uri.parse(uri),getAutoPlayHandler(config,apngListener)));}  }
class C{  private static long speedTest(){  BufferedImage buf=new BufferedImage(32,32,BufferedImage.TYPE_INT_ARGB);  Graphics2D g=buf.createGraphics();  g.setColor(new Color(255,232,12,128));  long start=System.nanoTime();  for (int i=0; i < 1000; i++) {    g.fillRect(0,0,32,32);  }  return System.nanoTime() - start;}  }
class C{  public static String flattenToClasspathString(List<IRuntimeClasspathEntry> classpathEntries){  StringBuilder sb=new StringBuilder();  boolean needsSeparator=false;  for (  IRuntimeClasspathEntry r : classpathEntries) {    if (needsSeparator) {      sb.append(File.pathSeparatorChar);    }    needsSeparator=true;    sb.append(r.getLocation());  }  return sb.toString();}  }
class C{  public int addPadding(byte[] in,int inOff){  byte code=(byte)(in.length - inOff);  while (inOff < (in.length - 1)) {    in[inOff]=(byte)random.nextInt();    inOff++;  }  in[inOff]=code;  return code;}  }
class C{  public File callsFile(){  return mCallsFile;}  }
class C{  public boolean empty(){  return equals(EMPTY);}  }
class C{  final boolean isRunningOrShutdown(boolean shutdownOK){  int rs=runStateOf(ctl.get());  return rs == RUNNING || (rs == SHUTDOWN && shutdownOK);}  }
class C{  public static boolean isCurrentYear(DateTime date){  return date.getYear() == DateTime.now().getYear();}  }
class C{  public static void assertNothingIsEqual(Iterable<Object> objects){  for (  Object object1 : objects) {    for (    Object object2 : objects) {      if (object1 != object2) {        assertNotEquals("Objects should not be equal:\n" + object1 + "\n"+ object2,object1,object2);      }    }  }}  }
class C{  protected int readInt() throws IOException, ReplicatorException, InterruptedException {  assertReadMode();  return dataInput.readInt();}  }
class C{  public void loadArgs(){  loadArgs(0,argumentTypes.length);}  }
class C{  public MutableString copy(){  return new MutableString(this);}  }
class C{  public static MemoryNotificationInfo from(CompositeData cd){  if (cd == null) {    return null;  }  if (cd instanceof MemoryNotifInfoCompositeData) {    return ((MemoryNotifInfoCompositeData)cd).getMemoryNotifInfo();  } else {    return new MemoryNotificationInfo(cd);  }}  }
class C{  private int min(int index1,int index2){  Node node1=getNode(index1);  Node node2=getNode(index2);  if (node1 == null) {    return index2;  } else   if (node2 == null) {    return index1;  } else   if (node1.myPriority < node2.myPriority) {    return index1;  } else {    return index2;  }}  }
class C{  @Override public URLConnection openConnection(URL url) throws IOException {  return openConnection(url,null);}  }
class C{  void drawBall(){  Ball ball=mBall;  float savedX=ball.getXPosition();  float savedY=ball.getYPosition();  float radius=ball.getRadius();  float xpos=BORDER_WIDTH * 2 + radius;  float ypos=BORDER_WIDTH + radius;  int lives=mLivesRemaining;  boolean ballIsLive=(mGamePlayState != GAME_INITIALIZING && mGamePlayState != GAME_READY);  if (ballIsLive) {    lives--;  }  for (int i=0; i < lives; i++) {    float jitterX=0.0f;    float jitterY=0.0f;    if (mLiveBrickCount > 0 && mLiveBrickCount < 4) {      jitterX=(float)((4 - mLiveBrickCount) * (Math.random() - 0.5) * 2);      jitterY=(float)((4 - mLiveBrickCount) * (Math.random() - 0.5) * 2);    }    ball.setPosition(xpos + jitterX,ypos + jitterY);    ball.draw();    xpos+=radius * 3;  }  ball.setPosition(savedX,savedY);  if (ballIsLive) {    ball.draw();  }}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public TestHiveServer(String serverAddress){  this.serverAddress=serverAddress;}  }
class C{  long timestamp(){  return timestamp;}  }
class C{  public static void applyClusterPropertiesConfiguration(Cache cache,ConfigurationResponse response,DistributionConfig config){  if (response == null || response.getRequestedConfiguration().isEmpty())   return;  List<String> groups=getGroups(config);  Map<String,Configuration> requestedConfiguration=response.getRequestedConfiguration();  final Properties runtimeProps=new Properties();  Configuration clusterConfiguration=requestedConfiguration.get(SharedConfiguration.CLUSTER_CONFIG);  if (clusterConfiguration != null) {    runtimeProps.putAll(clusterConfiguration.getGemfireProperties());  }  for (  String group : groups) {    Configuration groupConfiguration=requestedConfiguration.get(group);    if (groupConfiguration != null) {      runtimeProps.putAll(groupConfiguration.getGemfireProperties());    }  }  Set<Object> attNames=runtimeProps.keySet();  for (  Object attNameObj : attNames) {    String attName=(String)attNameObj;    String attValue=runtimeProps.getProperty(attName);    try {      config.setAttribute(attName,attValue,ConfigSource.runtime());    } catch (    IllegalArgumentException e) {      logger.info(e.getMessage());    }catch (    UnmodifiableException e) {      logger.info(e.getMessage());    }  }}  }
class C{  public final boolean treeCallback(int proxyId){  if (proxyId == m_queryProxyId) {    return true;  }  if (m_pairCount == m_pairCapacity) {    Pair[] oldBuffer=m_pairBuffer;    m_pairCapacity*=2;    m_pairBuffer=new Pair[m_pairCapacity];    System.arraycopy(oldBuffer,0,m_pairBuffer,0,oldBuffer.length);    for (int i=oldBuffer.length; i < m_pairCapacity; i++) {      m_pairBuffer[i]=new Pair();    }  }  if (proxyId < m_queryProxyId) {    m_pairBuffer[m_pairCount].proxyIdA=proxyId;    m_pairBuffer[m_pairCount].proxyIdB=m_queryProxyId;  } else {    m_pairBuffer[m_pairCount].proxyIdA=m_queryProxyId;    m_pairBuffer[m_pairCount].proxyIdB=proxyId;  }  ++m_pairCount;  return true;}  }
class C{  public IntIterator rows(){  return m_rows.rows();}  }
class C{  public Log4jBufferListener(String name){  super(name);}  }
class C{  @Override public boolean okPressed(){  double val=fdText.getValue();  if (Double.isNaN(val)) {    return (false);  }  World.getInstance().stereoFocalDistance=val;  val=esText.getValue();  if (Double.isNaN(val)) {    return (false);  }  World.getInstance().stereoEyeSeparation=val;  WorldScenePanel wsp=Dert.getWorldView().getScenePanel();  wsp.setStereo(stereoCheck.isSelected(),World.getInstance().stereoFocalDistance,World.getInstance().stereoEyeSeparation);  return (true);}  }
class C{  public void addQuestionMatches(Vertex sentence,Network network,long startTime,long processTime,List<Relationship> wordRelations,Map<Vertex,Integer> matches,Map<Vertex,Set<Vertex>> processed,Primitive key,boolean keywords){  List<Vertex> deferred=new ArrayList<Vertex>();  for (  Relationship wordRelation : wordRelations) {    Vertex word=wordRelation.getTarget();    Vertex lowercase=invertWordCase(word,network);    Vertex uppercase=network.findByData(((String)word.getData()).toUpperCase());    if (keywords && (!word.instanceOf(Primitive.KEYWORD) && (lowercase == null || !lowercase.instanceOf(Primitive.KEYWORD)) && (uppercase == null || !uppercase.instanceOf(Primitive.KEYWORD)))) {      continue;    }    long currentTime=System.currentTimeMillis();    if ((currentTime - startTime) > processTime) {      log("Search time limit reached (time, matches)",Level.INFO,processTime,matches.size());      break;    }    int value=computeWordValue(word);    if ((lowercase != null) && (lowercase != word)) {      value=Math.max(value,computeWordValue(lowercase));    }    if ((uppercase != null) && (uppercase != word)) {      value=Math.max(value,computeWordValue(uppercase));    }    if (key.equals(Primitive.KEYQUESTION)) {      value=value + 4;    }    Collection<Relationship> questions=word.getRelationships(key);    if (questions != null) {      log("Finding similar questions for word (word, value, questions, keyword)",Level.FINER,word.getData(),value,questions.size(),keywords);      recordSetenceValues(word,word,questions,value,sentence,matches,processed,network,deferred);    }    if ((lowercase != null) && (lowercase != word)) {      questions=lowercase.getRelationships(key);      if (questions != null) {        log("Finding similar questions for word lowercase (word, value, questions, keyword)",Level.FINER,lowercase.getData(),value,questions.size(),keywords);        recordSetenceValues(lowercase,word,questions,value,sentence,matches,processed,network,deferred);      }    }    if ((uppercase != null) && (uppercase != word)) {      questions=uppercase.getRelationships(key);      if (questions != null) {        log("Finding similar questions for word uppercase (word, value, questions, keyword)",Level.FINER,uppercase.getData(),value,questions.size(),keywords);        recordSetenceValues(uppercase,word,questions,value,sentence,matches,processed,network,deferred);      }    }  }  for (  Vertex word : deferred) {    long currentTime=System.currentTimeMillis();    if ((currentTime - startTime) > processTime) {      log("Search time limit reached (time, matches)",Level.INFO,processTime,matches.size());      break;    }    int value=computeWordValue(word);    Vertex lowercase=invertWordCase(word,network);    if ((lowercase != null) && (lowercase != word)) {      value=Math.max(value,computeWordValue(lowercase));    }    Vertex uppercase=network.findByData(((String)word.getData()).toUpperCase());    if ((uppercase != null) && (uppercase != word)) {      value=Math.max(value,computeWordValue(uppercase));    }    Collection<Relationship> questions=word.getRelationships(key);    if (questions != null) {      log("Checking deferred word (word, value, questions)",Level.FINER,word.getData(),value,questions.size());      recordSetenceValues(word,word,questions,value,sentence,matches,processed,network,null);    }  }}  }
class C{  private static String replaceChars(String str){  StringBuffer buf=new StringBuffer(str);  int length=buf.length();  for (int i=0; i < length; i++) {    char currentChar=buf.charAt(i);    if (currentChar == ' ') {      buf.setCharAt(i,'%');      buf.insert(i + 1,"20");      length=length + 2;      i=i + 2;    } else     if (currentChar == '\\') {      buf.setCharAt(i,'/');    }  }  return buf.toString();}  }
class C{  public GameAttributes(final WorkspaceComponent parent,final GameModel model){  this.parent=parent;  this.model=model;}  }
class C{  @HLEFunction(nid=0x93EF3843,version=150) public int sceNetAdhocMatchingStart(@CheckArgument("checkMatchingId") int matchingId,int evthPri,int evthStack,int inthPri,int inthStack,int optLen,@CanBeNull TPointer optData){  if (log.isTraceEnabled()) {    log.trace(String.format("Matching opt data: %s",Utilities.getMemoryDump(optData.getAddress(),optLen)));  }  return matchingObjects.get(matchingId).start(evthPri,evthStack,inthPri,inthStack,optLen,optData.getAddress());}  }
class C{  public FollowerInfo(Follower.Type type,String stream,String error){  this.type=type;  this.followers=null;  this.total=-1;  this.time=System.currentTimeMillis();  this.stream=stream;  this.requestError=true;  this.requestErrorDescription=error;}  }
class C{  public ComponentAnimation createAnimateLayout(final int duration){  return animateLayout(duration,false,255,false);}  }
class C{  public boolean isStopping(){  return m_Stopping;}  }
class C{  public void closeListener(String serverKey) throws GenericServiceException {  GenericMessageListener listener=listeners.get(serverKey);  if (listener == null)   throw new GenericServiceException("No listener found with that serverKey.");  listener.close();}  }
class C{  public static boolean isStop(int opcode){  return (flagsArray[opcode & 0xff] & STOP) != 0;}  }
class C{  public int hashCode(){  int hash=0;  for (int i=0; i < rdns.size(); i++) {    Rdn rdn=rdns.get(i);    hash+=rdn.hashCode();  }  return hash;}  }
class C{  private void startSecondary(){  FileSystemConfiguration igfsCfg=new FileSystemConfiguration();  igfsCfg.setDataCacheName("partitioned");  igfsCfg.setMetaCacheName("replicated");  igfsCfg.setName("igfs_secondary");  igfsCfg.setIpcEndpointConfiguration(SECONDARY_ENDPOINT_CFG);  igfsCfg.setBlockSize(512 * 1024);  igfsCfg.setPrefetchBlocks(1);  CacheConfiguration cacheCfg=defaultCacheConfiguration();  cacheCfg.setName("partitioned");  cacheCfg.setCacheMode(PARTITIONED);  cacheCfg.setNearConfiguration(null);  cacheCfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);  cacheCfg.setAffinityMapper(new IgfsGroupDataBlocksKeyMapper(GRP_SIZE));  cacheCfg.setBackups(0);  cacheCfg.setAtomicityMode(TRANSACTIONAL);  CacheConfiguration metaCacheCfg=defaultCacheConfiguration();  metaCacheCfg.setName("replicated");  metaCacheCfg.setCacheMode(REPLICATED);  metaCacheCfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);  metaCacheCfg.setAtomicityMode(TRANSACTIONAL);  IgniteConfiguration cfg=new IgniteConfiguration();  cfg.setGridName("grid_secondary");  TcpDiscoverySpi discoSpi=new TcpDiscoverySpi();  discoSpi.setIpFinder(new TcpDiscoveryVmIpFinder(true));  cfg.setDiscoverySpi(discoSpi);  cfg.setCacheConfiguration(metaCacheCfg,cacheCfg);  cfg.setFileSystemConfiguration(igfsCfg);  cfg.setIncludeEventTypes(EVT_TASK_FAILED,EVT_TASK_FINISHED,EVT_JOB_MAPPED);  cfg.setCommunicationSpi(communicationSpi());  G.start(cfg);}  }
class C{  public ReferenceDescription clone(){  ReferenceDescription result=new ReferenceDescription();  result.ReferenceTypeId=ReferenceTypeId;  result.IsForward=IsForward;  result.NodeId=NodeId;  result.BrowseName=BrowseName;  result.DisplayName=DisplayName;  result.NodeClass=NodeClass;  result.TypeDefinition=TypeDefinition;  return result;}  }
class C{  protected DestinationWrapper<Destination> lookupDestinationFromJNDI(String uri) throws NamingException {  return new DestinationWrapper<Destination>(uri,(Destination)getInitialContext().lookup(uri));}  }
class C{  private String makeContent(StreamInfo info,String content){  content=content.replace("%title",info.getTitle());  content=content.replace("%game",info.getGame());  content=content.replace("%viewersf",Helper.formatViewerCount(info.getViewers()));  content=content.replace("%followersf",Helper.formatViewerCount(info.getFollowerCount()));  content=content.replace("%subscribersf",Helper.formatViewerCount(info.getSubscriberCount()));  content=content.replace("%viewers",String.valueOf(info.getViewers()));  content=content.replace("%followers",String.valueOf(info.getFollowerCount()));  content=content.replace("%subscribers",String.valueOf(info.getSubscriberCount()));  return content;}  }
class C{  private SootMethod isMethodLine(String line,soot.Hierarchy h){  Pattern sigRE=Pattern.compile("<\\S+: \\S+ \\S+\\(.*\\)>");  Matcher matcher=sigRE.matcher(line);  boolean b=matcher.find();  if (!b)   return null;  String sig=matcher.group();  if (Scene.v().containsMethod(sig)) {    return Scene.v().getMethod(sig);  } else {    try {      return SootUtils.resolveMethod(Scene.v().getSootClass(SootUtils.grabClass(sig)),sig);    } catch (    Exception e) {    }  }  return null;}  }
class C{  public static void main(String[] args){  JFrame frame=new JFrame(ToolTipDemo.class.getAnnotation(DemoProperties.class).value());  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  frame.getContentPane().add(new ToolTipDemo());  frame.setPreferredSize(new Dimension(800,600));  frame.pack();  frame.setLocationRelativeTo(null);  frame.setVisible(true);}  }
class C{  boolean removedAt(int removedIndex){  if (isDetached())   return true;  final int cycles=itrs.cycles;  final int takeIndex=ArrayBlockingQueue.this.takeIndex;  final int prevCycles=this.prevCycles;  final int prevTakeIndex=this.prevTakeIndex;  final int len=items.length;  int cycleDiff=cycles - prevCycles;  if (removedIndex < takeIndex)   cycleDiff++;  final int removedDistance=(cycleDiff * len) + (removedIndex - prevTakeIndex);  int cursor=this.cursor;  if (cursor >= 0) {    int x=distance(cursor,prevTakeIndex,len);    if (x == removedDistance) {      if (cursor == putIndex)       this.cursor=cursor=NONE;    } else     if (x > removedDistance) {      this.cursor=cursor=dec(cursor);    }  }  int lastRet=this.lastRet;  if (lastRet >= 0) {    int x=distance(lastRet,prevTakeIndex,len);    if (x == removedDistance)     this.lastRet=lastRet=REMOVED; else     if (x > removedDistance)     this.lastRet=lastRet=dec(lastRet);  }  int nextIndex=this.nextIndex;  if (nextIndex >= 0) {    int x=distance(nextIndex,prevTakeIndex,len);    if (x == removedDistance)     this.nextIndex=nextIndex=REMOVED; else     if (x > removedDistance)     this.nextIndex=nextIndex=dec(nextIndex);  } else   if (cursor < 0 && nextIndex < 0 && lastRet < 0) {    this.prevTakeIndex=DETACHED;    return true;  }  return false;}  }
class C{  public Clob createClob() throws SQLException {  return new MariaDbClob();}  }
class C{  private JLabel addKeybindCategoryLabel(JPanel panel,String categoryName){  GridBagConstraints gbc=new GridBagConstraints();  gbc.anchor=GridBagConstraints.WEST;  gbc.gridx=0;  if (keybindLabelGridYCounter == 0)   gbc.insets=new Insets(0,0,0,0); else   gbc.insets=new Insets(7,0,0,0);  gbc.gridy=keybindLabelGridYCounter++;  keybindButtonGridYCounter++;  gbc.weightx=20;  gbc.gridwidth=2;  JLabel jlbl=new JLabel(categoryName);  panel.add(jlbl,gbc);  return jlbl;}  }
class C{  public boolean isClosed(){  return sync.isClosed();}  }
class C{  public void removePropertyChangeListener(String propertyName,PropertyChangeListener in_pcl){  pcSupport.removePropertyChangeListener(propertyName,in_pcl);}  }
class C{  public DefaultHttpProvider(final ISerializer serializer,final IRequestInterceptor requestInterceptor,final IExecutors executors,final ILogger logger){  mSerializer=serializer;  mRequestInterceptor=requestInterceptor;  mExecutors=executors;  mLogger=logger;  mConnectionFactory=new DefaultConnectionFactory();}  }
class C{  private String buildRandomString(int size){  Random generator=new Random();  ByteArrayOutputStream byteString=new ByteArrayOutputStream();  for (int i=0; i < size; i++) {    byteString.write(' ' + (byte)generator.nextInt('~' - ' '));  }  return byteString.toString();}  }
class C{  public void changeKey(int i,Key key){  if (i < 0 || i >= n)   throw new IndexOutOfBoundsException();  if (!contains(i))   throw new IllegalArgumentException("Specified index is not in the queue");  if (greater(nodes[i].key,key))   decreaseKey(i,key); else   increaseKey(i,key);}  }
class C{  protected SimState(MersenneTwisterFast random){  this(0,random,new Schedule());}  }
class C{  public boolean isNull(){  for (int i=0; i < 2; i++) {    for (int j=0; j < 3; j++) {      if (depth[i][j] != NULL_VALUE)       return false;    }  }  return true;}  }
class C{  private boolean isAssigned(){  return mContactUri != null || mContactEmail != null || mContactPhone != null;}  }
class C{  public synchronized void augmentData(int cmid,double addVal){  if (addVal == 0)   return;  int index=findOrCreateHeapIdx(cmid);  counts[index]+=addVal;  if (addVal > 0) {    heapifyUp(index);  } else {    heapifyDown(index);  }  if (DEBUG)   validityCheck();}  }
class C{  public void removeTreeModelListener(TreeModelListener l){  listenerList.remove(TreeModelListener.class,l);}  }
class C{  public boolean isDeprecated(){  return deprecated;}  }
class C{  public static String command(String input){  if (input == null || input.isEmpty()) {    return "Invalid input.";  }  String[] split=input.split(" ",2);  String command=split[0];  String parameter=null;  if (split.length == 2) {    parameter=split[1];  }  if (command.equals("exec")) {    execute(parameter,"Custom");    return "Trying to start process.";  } else   if (command.equals("kill")) {    try {      if (kill(Integer.parseInt(parameter))) {        return "Trying to kill process.";      }      return "No process with this id.";    } catch (    NumberFormatException ex) {      return "Invalid parameter.";    }  } else   if (command.equals("list")) {    Collection<String> list=getList();    StringBuilder result=new StringBuilder("Currently " + list.size() + " processes.");    for (    String p : list) {      result.append("\n");      result.append(p);    }    return result.toString();  }  return "Invalid input.";}  }
class C{  private static void add(BooleanQuery.Builder q,String name,String value){  q.add(new BooleanClause(new TermQuery(new Term(name,value)),BooleanClause.Occur.SHOULD));}  }
class C{  public Grammar(int[] codon){  super();  fromArray(codon);}  }
class C{  public boolean isPrimitiveInitialization(){  return operation.isNonreceivingValue();}  }
class C{  public static VectorStoreRAM createRedistributedVectorStore(VectorStore source,FlagConfig flagConfig,int sampleSize){  if (flagConfig.vectortype() != VectorType.REAL) {    throw new IllegalArgumentException("Vector store redistribution only works with VectorType.REAL vectors.");  }  if (source.getNumVectors() < sampleSize) {    logger.info(String.format("Source vector store only has %d elements, using all in sample.",source.getNumVectors()));    sampleSize=source.getNumVectors();  }  float[][] sampleCoordinates=new float[sampleSize][flagConfig.dimension()];  Enumeration<ObjectVector> vectorEnumeration=source.getAllVectors();  for (int i=0; i < sampleSize; ++i) {    sampleCoordinates[i]=((RealVector)vectorEnumeration.nextElement().getVector()).getCoordinates();  }  Distribution[] distributions=new Distribution[flagConfig.dimension()];  for (int dim=0; dim < flagConfig.dimension(); ++dim) {    float[] coords=new float[sampleSize];    for (int i=0; i < sampleSize; ++i) {      coords[i]=sampleCoordinates[i][dim];    }    distributions[dim]=new Distribution(coords);  }  VectorStoreRAM rescaledStore=new VectorStoreRAM(flagConfig);  Enumeration<ObjectVector> vecEnum=source.getAllVectors();  while (vecEnum.hasMoreElements()) {    ObjectVector objectVector=vecEnum.nextElement();    RealVector oldVector=(RealVector)objectVector.getVector();    float[] oldCoords=oldVector.getCoordinates();    float[] newCoords=new float[flagConfig.dimension()];    for (int i=0; i < flagConfig.dimension(); ++i) {      newCoords[i]=(2 * distributions[i].getCumulativePosition(oldCoords[i])) - 1;    }    rescaledStore.putVector(objectVector.getObject(),new RealVector(newCoords));  }  VerbatimLogger.info("Created new vector store with redistributed coordinates.\n");  return rescaledStore;}  }
class C{  @Override public void addButtonActionPerformed(){  jmri.util.JmriJFrame addFrame=new AddNodeFrame(xtc,this);  try {    addFrame.initComponents();  } catch (  Exception ex) {    log.error("Exception initializing Frame: {}",ex.toString());    return;  }  addFrame.setVisible(true);}  }
class C{  public VNXeCommandResult createConsistencyGroup(String name){  ConsistencyGroupCreateParam param=new ConsistencyGroupCreateParam();  param.setName(name);  ReplicationParam replicaparm=new ReplicationParam();  replicaparm.setIsReplicationDestination(false);  param.setReplicationParameters(replicaparm);  ConsistencyGroupRequests req=new ConsistencyGroupRequests(_khClient);  return req.createConsistencyGroup(param);}  }
class C{  public void calculateSize(){  Element container=createContainer();  container.getStyle().setOverflow(CSSStyleDeclaration.Overflow.HIDDEN);  int noScrollbarClientHeight=container.getClientHeight();  int noScrollbarClientWidth=container.getClientWidth();  container.getStyle().setOverflow(CSSStyleDeclaration.Overflow.SCROLL);  heightOfHorizontalScrollbar=noScrollbarClientHeight - container.getClientHeight();  widthOfVerticalScrollbar=noScrollbarClientWidth - container.getClientWidth();  DomUtils.removeFromParent(container);}  }
class C{  public void addToQueue(ConnectionRequest request){  addToQueue(request,false);}  }
class C{  public String name(){  return name;}  }
class C{  public void processPrevTimeLine(String messageID,IAnalyzedInterval contextElement,StatisticsChart sc,Set<Long> timeLineSet) throws AdeInternalException {  final TreeSet<Long> prevTimeLine=m_prevIntervalTimelineMap.get(messageID);  if (prevTimeLine == null) {    m_mainStat=MainStatVal.NEW;    m_deltasInSeconds.add((m_firstMsgTime - contextElement.getIntervalStartTime()) / DateTimeUtils.MILLIS_IN_SECOND);  } else {    final Long prevLastTime=prevTimeLine.lower(m_firstMsgTime);    if (prevLastTime != null) {      m_gc.setTimeInMillis(prevLastTime);      sc.setStat("LastTime",String.valueOf(m_dataTypeFactory.newXMLGregorianCalendar(m_gc)));      final long delta=(m_firstMsgTime - prevLastTime) / DateTimeUtils.MILLIS_IN_SECOND;      m_deltasInSeconds.add(delta);      timeLineSet.add(prevLastTime);    }  }}  }
class C{  public PacketTypeFilter(Class<? extends Packet> packetType){  if (!Packet.class.isAssignableFrom(packetType)) {    throw new IllegalArgumentException("Packet type must be a sub-class of Packet.");  }  this.packetType=packetType;}  }
class C{  @Nullable public String requestSyncCall(){  connectToApi();  return response;}  }
class C{  public final static <T>T foldLeftMapToType(final Stream<T> stream,final Reducer<T> reducer){  return reducer.mapReduce(stream);}  }
class C{  private float checkSaturationValid(final float val){  float tempval=val;  if (val > 1) {    tempval=1;  }  if (val < 0) {    tempval=0;  }  return tempval;}  }
class C{  public void wakeEveryDay(AlarmListener al){}  }
class C{  public LineMerger(){}  }
class C{  protected void computeFieldPolynomial2(){  if (testTrinomials()) {    return;  }  if (testPentanomials()) {    return;  }  testRandom();}  }
class C{  public void systemMessage(String message){  cb.systemMessage(message);  cb2.addChatMessage("Megamek: " + message);}  }
class C{  @Override public void warn(String msg){  if (logger.isLoggable(Level.WARNING)) {    log(SELF,Level.WARNING,msg,null);  }}  }
class C{  public boolean equals(Object object){  if (object instanceof Location) {    Location loc=(Location)object;    return loc.bLine == bLine && loc.bColumn == bColumn && loc.eLine == eLine && loc.eColumn == eColumn && loc.source().equals(source());  }  return false;}  }
class C{  public String displayMessage(LocoNetMessage l){  forceHex=false;  String s=format(l);  if (forceHex) {    s+="contents: " + l.toString() + "\n";  }  if (showOpCode) {    s=LnConstants.OPC_NAME(l.getOpCode()) + ": " + s;  }  return s;}  }
class C{  public DrawerBuilder withToolbar(@NonNull Toolbar toolbar){  this.mToolbar=toolbar;  return this;}  }
class C{  public static Group createGroup(Composite parent,String text,int columns,int hspan,int fill){  Group g=new Group(parent,SWT.NONE);  g.setLayout(new GridLayout(columns,false));  g.setText(text);  g.setFont(parent.getFont());  GridData gd=new GridData(fill);  gd.horizontalSpan=hspan;  g.setLayoutData(gd);  return g;}  }
class C{  @Lazy @Autowired ZipkinMessageListener(StorageComponent storage,CollectorSampler sampler,CollectorMetrics metrics){  this.collector=Collector.builder(getClass()).storage(storage).sampler(sampler).metrics(metrics.forTransport("stream")).build();}  }
class C{  public void downloadPresentation(String resourceId,String filepath,String format) throws IOException, MalformedURLException, ServiceException, DocumentListException {  if (resourceId == null || filepath == null || format == null) {    throw new DocumentListException("null passed in for required parameters");  }  String[] parameters={"docID=" + resourceId,"exportFormat=" + format};  URL url=buildUrl(URL_DOWNLOAD + "/presentations" + URL_CATEGORY_EXPORT,parameters);  downloadFile(url,filepath);}  }
class C{  public StylesheetRoot(ErrorListener errorListener) throws TransformerConfigurationException {  super(null);  setStylesheetRoot(this);  try {    m_selectDefault=new XPath("node()",this,this,XPath.SELECT,errorListener);    initDefaultRule(errorListener);  } catch (  TransformerException se) {    throw new TransformerConfigurationException(XSLMessages.createMessage(XSLTErrorResources.ER_CANNOT_INIT_DEFAULT_TEMPLATES,null),se);  }}  }
class C{  public boolean isColumnAccess(int AD_Table_ID,int AD_Column_ID,boolean ro){  if (!isTableAccess(AD_Table_ID,ro))   return false;  loadColumnAccess(false);  boolean retValue=true;  for (int i=0; i < m_columnAccess.length; i++) {    if (m_columnAccess[i].isExclude()) {      if (m_columnAccess[i].getAD_Table_ID() == AD_Table_ID && m_columnAccess[i].getAD_Column_ID() == AD_Column_ID) {        if (ro)         retValue=m_columnAccess[i].isReadOnly(); else         retValue=false;        if (!retValue)         log.fine("Exclude AD_Table_ID=" + AD_Table_ID + ", AD_Column_ID="+ AD_Column_ID+ " (ro="+ ro+ ",ColumnAccessRO="+ m_columnAccess[i].isReadOnly()+ ") = "+ retValue);        return retValue;      }    } else {      if (m_columnAccess[i].getAD_Table_ID() == AD_Table_ID) {        retValue=false;        if (m_columnAccess[i].getAD_Column_ID() == AD_Column_ID) {          if (!ro)           retValue=!m_columnAccess[i].isReadOnly(); else           retValue=true;          if (!retValue)           log.fine("Include AD_Table_ID=" + AD_Table_ID + ", AD_Column_ID="+ AD_Column_ID+ " (ro="+ ro+ ",ColumnAccessRO="+ m_columnAccess[i].isReadOnly()+ ") = "+ retValue);          return retValue;        }      }    }  }  if (!retValue)   log.fine("AD_Table_ID=" + AD_Table_ID + ", AD_Column_ID="+ AD_Column_ID+ " (ro="+ ro+ ") = "+ retValue);  return retValue;}  }
class C{  public Vset checkAssignOp(Environment env,Context ctx,Vset vset,Hashtable exp,Expression outside){  if (!bind(env,ctx))   return vset;  vset=assign(env,ctx,get(env,ctx,vset));  if (implementation != null)   vset=implementation.checkValue(env,ctx,vset,exp);  return vset;}  }
class C{  public static String extractAccessURL(String publicURL) throws IOException {  try {    String hostName=new URI(publicURL).getAuthority();    int start=publicURL.indexOf("//") + 2 + hostName.length()+ 1;    for (int i=0; i < 2; i++) {      start=publicURL.indexOf("/",start) + 1;    }    String authURL=publicURL.substring(0,start);    if (authURL.endsWith("/")) {      authURL=authURL.substring(0,authURL.length() - 1);    }    return authURL;  } catch (  URISyntaxException e) {    throw new IOException("Public URL: " + publicURL + " is not valid");  }}  }
class C{  @Override protected List refreshTicksHorizontal(Graphics2D g2,Rectangle2D dataArea,RectangleEdge edge){  List ticks=new java.util.ArrayList();  Font tickLabelFont=getTickLabelFont();  g2.setFont(tickLabelFont);  double size=getTickUnit().getSize();  int count=calculateVisibleTickCount();  double lowestTickValue=calculateLowestVisibleTickValue();  double previousDrawnTickLabelPos=0.0;  double previousDrawnTickLabelLength=0.0;  if (count <= ValueAxis.MAXIMUM_TICK_COUNT) {    for (int i=0; i < count; i++) {      double currentTickValue=lowestTickValue + (i * size);      double xx=valueToJava2D(currentTickValue,dataArea,edge);      String tickLabel;      NumberFormat formatter=getNumberFormatOverride();      if (formatter != null) {        tickLabel=formatter.format(currentTickValue);      } else {        tickLabel=valueToString(currentTickValue);      }      Rectangle2D bounds=TextUtilities.getTextBounds(tickLabel,g2,g2.getFontMetrics());      double tickLabelLength=isVerticalTickLabels() ? bounds.getHeight() : bounds.getWidth();      boolean tickLabelsOverlapping=false;      if (i > 0) {        double avgTickLabelLength=(previousDrawnTickLabelLength + tickLabelLength) / 2.0;        if (Math.abs(xx - previousDrawnTickLabelPos) < avgTickLabelLength) {          tickLabelsOverlapping=true;        }      }      if (tickLabelsOverlapping) {        tickLabel="";      } else {        previousDrawnTickLabelPos=xx;        previousDrawnTickLabelLength=tickLabelLength;      }      TextAnchor anchor;      TextAnchor rotationAnchor;      double angle=0.0;      if (isVerticalTickLabels()) {        anchor=TextAnchor.CENTER_RIGHT;        rotationAnchor=TextAnchor.CENTER_RIGHT;        if (edge == RectangleEdge.TOP) {          angle=Math.PI / 2.0;        } else {          angle=-Math.PI / 2.0;        }      } else {        if (edge == RectangleEdge.TOP) {          anchor=TextAnchor.BOTTOM_CENTER;          rotationAnchor=TextAnchor.BOTTOM_CENTER;        } else {          anchor=TextAnchor.TOP_CENTER;          rotationAnchor=TextAnchor.TOP_CENTER;        }      }      Tick tick=new NumberTick(new Double(currentTickValue),tickLabel,anchor,rotationAnchor,angle);      ticks.add(tick);    }  }  return ticks;}  }
class C{  public boolean isEmpty(){  return mSoundCloudPlaylist.getTracks().size() == 0;}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN}) public TaskResourceRep registerSMISProvider(SMISProviderCreateParam param) throws ControllerException {  String providerKey=param.getIpAddress() + "-" + param.getPortNumber();  List<StorageProvider> providers=CustomQueryUtility.getActiveStorageProvidersByProviderId(_dbClient,providerKey);  if (providers != null && !providers.isEmpty()) {    throw APIException.badRequests.invalidParameterSMISProviderAlreadyRegistered(providerKey);  }  ArgValidator.checkFieldNotEmpty(param.getName(),"name");  checkForDuplicateName(param.getName(),StorageProvider.class);  ArgValidator.checkFieldNotEmpty(param.getIpAddress(),"ip_address");  ArgValidator.checkFieldNotNull(param.getPortNumber(),"port_number");  ArgValidator.checkFieldNotEmpty(param.getUserName(),"user_name");  ArgValidator.checkFieldNotEmpty(param.getPassword(),"password");  ArgValidator.checkFieldNotNull(param.getUseSSL(),"use_ssl");  ArgValidator.checkFieldRange(param.getPortNumber(),1,65535,"port_number");  StorageProvider smisProvider=new StorageProvider();  smisProvider.setInterfaceType(StorageProvider.InterfaceType.smis.name());  smisProvider.setId(URIUtil.createId(StorageProvider.class));  smisProvider.setLabel(param.getName());  smisProvider.setIPAddress(param.getIpAddress());  smisProvider.setPortNumber(param.getPortNumber());  smisProvider.setUserName(param.getUserName());  smisProvider.setPassword(param.getPassword());  smisProvider.setUseSSL(param.getUseSSL());  smisProvider.setRegistrationStatus(RegistrationStatus.REGISTERED.toString());  _dbClient.createObject(smisProvider);  auditOp(OperationTypeEnum.REGISTER_SMISPROVIDER,true,null,smisProvider.getLabel(),smisProvider.getId().toString(),smisProvider.getIPAddress(),smisProvider.getPortNumber(),smisProvider.getUserName());  ArrayList<AsyncTask> tasks=new ArrayList<AsyncTask>(1);  String taskId=UUID.randomUUID().toString();  tasks.add(new AsyncTask(StorageProvider.class,smisProvider.getId(),taskId));  BlockController controller=getController(BlockController.class,"vnxblock");  controller.startMonitoring(new AsyncTask(StorageProvider.class,smisProvider.getId(),taskId),StorageSystem.Type.vnxblock);  DiscoveredObjectTaskScheduler scheduler=new DiscoveredObjectTaskScheduler(_dbClient,new ScanJobExec(controller));  TaskList taskList=scheduler.scheduleAsyncTasks(tasks);  return taskList.getTaskList().listIterator().next();}  }
class C{  public SymbolTableEntryInternal steFor_$n4promisifyMethod(){  return getSymbolTableEntryInternal("$n4promisifyMethod",true);}  }
class C{  public static TableSchema loadSchema(final Reader schemaSource){  TableSchema sourceSchema=new TableSchema();  List<TableFieldSchema> fields=(new Gson()).<List<TableFieldSchema>>fromJson(schemaSource,(new ArrayList<TableFieldSchema>()).getClass());  sourceSchema.setFields(fields);  return sourceSchema;}  }
class C{  public static <T1,T2,T3,R>Function<T3,R> partial3(final T1 t1,final T2 t2,final TriFunction<T1,T2,T3,R> triFunc){  return null;}  }
class C{  public ClusterControl connectToNode(TransportConfiguration transportConfiguration) throws Exception {  ClientSessionFactoryInternal sessionFactory=(ClientSessionFactoryInternal)defaultLocator.createSessionFactory(transportConfiguration,0,false);  return connectToNodeInCluster(sessionFactory);}  }
class C{  public void endData(){  if (false) {    Log.v(LOGTAG,"TestEventHandler: endData() called");  }  eventsReceived[TEST_ENDDATA]=true;  if (notExpecting[TEST_ENDDATA]) {    expectDetails.append("End data event received but not expected");    expectDetails.append("\r\n");  }  expects[TEST_ENDDATA]=false;  if (useLowLevel) {    if (delayResponse) {synchronized (syncObj) {        syncObj.notifyAll();      }    } else {      if (netRunner != null) {        System.out.println("TestEventHandler: endData() stopping " + netRunner);        netRunner.decrementRunCount();      }    }  }}  }
class C{  public static final String concat(String[] strs,String delim){  if (strs != null) {    final StringBuilder buf=new StringBuilder();    final int n=strs.length;    for (int i=0; i < n; i++) {      final String str=strs[i];      if (str != null) {        buf.append(str).append(delim);      }    }    final int length=buf.length();    if (length > 0) {      buf.setLength(length - 1);    }    return buf.toString();  } else {    return "";  }}  }
class C{  public ANNIndex(final int dimension,final String filename,IndexType indexType) throws IOException {  DIMENSION=dimension;  INDEX_TYPE=indexType;  INDEX_TYPE_OFFSET=(INDEX_TYPE == IndexType.ANGULAR) ? 4 : 8;  K_NODE_HEADER_STYLE=(INDEX_TYPE == IndexType.ANGULAR) ? 12 : 16;  this.MIN_LEAF_SIZE=DIMENSION + 2;  this.NODE_SIZE=K_NODE_HEADER_STYLE + FLOAT_SIZE * DIMENSION;  roots=new ArrayList<Integer>();  load(filename);}  }
class C{  public synchronized void runTask(Runnable task){  if (!isAlive) {    throw new IllegalStateException();  }  if (task != null) {    taskQueue.add(task);    notify();  }}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("{");  boolean firstTime=true;  for (  Entry<Integer,String> entry : mCapabilities.entrySet()) {    if (firstTime) {      firstTime=false;    } else {      sb.append(",");    }    sb.append(entry.getKey());    sb.append(":\"");    sb.append(entry.getValue());    sb.append("\"");    return mCapabilities.toString();  }  return sb.toString();}  }
class C{  public int readFixed(int index){  return this.readLong(index);}  }
class C{  private boolean checkRuleMatch(ACLRule newRule){  Iterator<ACLRule> iter=ruleSet.iterator();  while (iter.hasNext()) {    ACLRule existingRule=iter.next();    if (newRule.match(existingRule)) {      logger.error("existing rule: " + existingRule);      return true;    }  }  return false;}  }
class C{  @SuppressWarnings("unchecked") public <T>Source<T> pick(T... ts){  return pick(java.util.Arrays.asList(ts));}  }
class C{  public TypeRefsAdapterFactory(){  if (modelPackage == null) {    modelPackage=TypeRefsPackage.eINSTANCE;  }}  }
class C{  public static RequestCacheConfig buildDefaultCacheConfig(){  RequestCacheConfig cacheConfig=new RequestCacheConfig();  cacheConfig.setShouldCache(true);  cacheConfig.setUseCacheDataAnyway(false);  cacheConfig.setUseCacheDataWhenRequestFailed(true);  cacheConfig.setUseCacheDataWhenTimeout(false);  cacheConfig.setUseCacheDataWhenUnexpired(true);  cacheConfig.setRetryWhenRequestFailed(true);  cacheConfig.setNeverExpired(false);  TimeController timeController=new TimeController();  timeController.setExpirationTime(DEFAULT_EXPIRATION_TIME);  timeController.setTimeout(DEFAULT_TIMEOUT);  cacheConfig.setTimeController(timeController);  return cacheConfig;}  }
class C{  protected void handlePreviouslyDeletedCompositionItems(Entity entity,final DatasourceImplementation parentDs){  for (  MetaProperty property : metadata.getClassNN(entity.getClass()).getProperties()) {    if (!PersistenceHelper.isLoaded(entity,property.getName()))     return;    if (property.getType() == MetaProperty.Type.COMPOSITION) {      for (      Datasource datasource : parentDs.getDsContext().getAll()) {        if (datasource instanceof NestedDatasource && ((NestedDatasource)datasource).getMaster().equals(parentDs)) {          Object value=entity.getValue(property.getName());          if (value instanceof Collection) {            Collection collection=(Collection)value;            collection.removeAll(((DatasourceImplementation)datasource).getItemsToDelete());          }        }      }    }  }}  }
class C{  public Object clone(){  SIPResponse retval=(SIPResponse)super.clone();  if (this.statusLine != null)   retval.statusLine=(StatusLine)this.statusLine.clone();  return retval;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(2);  newVector.addElement(new Option("\tIf set, classifier is run in debug mode and\n" + "\tmay output additional info to the console","output-debug-info",0,"-output-debug-info"));  newVector.addElement(new Option("\tIf set, classifier capabilities are not checked before classifier is built\n" + "\t(use with caution).","-do-not-check-capabilities",0,"-do-not-check-capabilities"));  return newVector.elements();}  }
class C{  public static <A,E extends A>A[] toArray(Enumeration<E> enumeration,A[] array){  ArrayList<A> elements=new ArrayList<A>();  while (enumeration.hasMoreElements()) {    elements.add(enumeration.nextElement());  }  return elements.toArray(array);}  }
class C{  private void appendCauses(StringBuilder buf,Throwable thrown){  buf.append(thrown.toString()).append(OutputStreamLogger.NEWLINE);  StackTraceElement[] stack=thrown.getStackTrace();  int end=stack.length - 1;  prune:   for (; end >= 0; end--) {    String cn=stack[end].getClassName();    for (    String pat : PRUNE) {      if (cn.startsWith(pat)) {        continue prune;      }    }    break;  }  if (end <= 0) {    end=stack.length - 1;  }  for (int i=0; i <= end; i++) {    buf.append("\tat ").append(stack[i]).append(OutputStreamLogger.NEWLINE);  }  if (end < stack.length - 1) {    buf.append("\tat [...]").append(OutputStreamLogger.NEWLINE);  }  if (thrown.getCause() != null) {    buf.append("Caused by: ");    appendCauses(buf,thrown.getCause());  }}  }
class C{  public int nextNode(){  if (m_foundLast)   return DTM.NULL;  int next;  if (null != m_exprObj) {    m_lastFetched=next=m_exprObj.nextNode();  } else   m_lastFetched=next=DTM.NULL;  if (DTM.NULL != next) {    m_pos++;    return next;  } else {    m_foundLast=true;    return DTM.NULL;  }}  }
class C{  private void truncate() throws Exception {  if (off - 1 >= data.length) {    off--;  } else   if (data[off - 1] == '/') {    off--;  }}  }
class C{  public String toIdentifier(String string){  StringBuilder result=new StringBuilder();  int index=0;  char c=string.charAt(index);  if (Character.isJavaIdentifierStart(c)) {    result.append(c);    index++;  } else   if (Character.isJavaIdentifierPart(c)) {    result.append(ESCAPE_TOKEN);  }  while (index < string.length()) {    c=string.charAt(index++);    result.append(Character.isJavaIdentifierPart(c) ? c : ESCAPE_TOKEN);  }  return result.toString();}  }
class C{  public ElkanKernelKMeans(KernelTrick kernel){  super(kernel);}  }
class C{  private void recomputeSeperation(double[][] means,double[][] cdist,LongStatistic diststat){  final int k=means.length;  for (int i=1; i < k; i++) {    DoubleVector mi=DoubleVector.wrap(means[i]);    for (int j=0; j < i; j++) {      cdist[i][j]=cdist[j][i]=distanceFunction.distance(mi,DoubleVector.wrap(means[j]));    }  }  if (diststat != null) {    diststat.increment((k * (k - 1)) >> 1);  }}  }
class C{  public static org.oscm.internal.vo.VOPaymentInfo convertToUp(org.oscm.vo.VOPaymentInfo oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOPaymentInfo newVO=new org.oscm.internal.vo.VOPaymentInfo();  newVO.setAccountNumber(oldVO.getAccountNumber());  newVO.setId(oldVO.getId());  newVO.setKey(oldVO.getKey());  newVO.setPaymentType(convertToUp(oldVO.getPaymentType()));  newVO.setProviderName(oldVO.getProviderName());  newVO.setVersion(oldVO.getVersion());  return newVO;}  }
class C{  public static Complex multiply(Complex c1,Complex c2){  return new Complex(c1.real * c2.real - c1.imag * c2.imag,c1.real * c2.imag + c1.imag * c2.real);}  }
class C{  public static boolean isEmptyString(String text){  return (text == null || text.trim().length() == 0);}  }
class C{  public boolean isLoaded(){  return m_function.isLoaded();}  }
class C{  public String toString(){  if (rrs == null)   return ("{empty}");  StringBuffer sb=new StringBuffer();  sb.append("{ ");  sb.append(getName() + " ");  sb.append(getTTL() + " ");  sb.append(DClass.string(getDClass()) + " ");  sb.append(Type.string(getType()) + " ");  sb.append(iteratorToString(iterator(true,false)));  if (nsigs > 0) {    sb.append(" sigs: ");    sb.append(iteratorToString(iterator(false,false)));  }  sb.append(" }");  return sb.toString();}  }
class C{  protected AddressOption(OptionSet set,String name,String desc,Address defaultValue){  super(set,ADDRESS_OPTION,name,desc);  this.value=this.defaultValue=defaultValue;}  }
class C{  public static Properties loadProperties(String fileName){  if (fileName == null) {    return null;  }  return loadProperties(new File(fileName));}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  double x, y;  int progress;  int n;  int featureNum, numFeatures;  int oneHundredthTotal;  ShapeType shapeType, outputShapeType;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    if (shapeType.getBaseType() != ShapeType.POLYGON) {      showFeedback("This tool only works with shapefiles of a polygon base shape type.");      return;    }    outputShapeType=ShapeType.POLYLINE;    if (shapeType == ShapeType.POLYGONZ) {      outputShapeType=ShapeType.POLYLINEZ;    } else     if (shapeType == ShapeType.POLYGONM) {      outputShapeType=ShapeType.POLYLINEM;    }    ShapeFile output=new ShapeFile(outputFile,outputShapeType);    output.setProjectionStringFromOtherShapefile(input);    FileUtilities.copyFile(new File(input.getDatabaseFile()),new File(output.getDatabaseFile()));    numFeatures=input.getNumberOfRecords();    oneHundredthTotal=numFeatures / 100;    n=0;    progress=0;    byte[] rawData;    whitebox.geospatialfiles.shapefile.Geometry recGeometry;    for (    ShapeFileRecord record : input.records) {      rawData=record.getGeometry().toByteBuffer().array();switch (outputShapeType) {case POLYLINE:        recGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(rawData);      break;case POLYLINEZ:    recGeometry=new PolyLineZ(rawData);  break;default :recGeometry=new PolyLineM(rawData);break;}output.addRecord(recGeometry);n++;if (n >= oneHundredthTotal) {n=0;if (cancelOp) {cancelOperation();return;}progress++;updateProgress(progress);}}output.write();updateProgress("Displaying vector: ",0);returnData(outputFile);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public SimpleGuacamoleTunnel(GuacamoleSocket socket){  this.socket=socket;}  }
class C{  public static OMBitmap read(DataInputStream dis,LinkProperties propertiesBuffer) throws IOException {  OMBitmap bitmap=null;  float lat=0;  float lon=0;  int x=0;  int y=0;  int w=0;  int h=0;  int length;  int renderType=dis.readByte();switch (renderType) {case RENDERTYPE_OFFSET:    lat=dis.readFloat();  lon=dis.readFloat();case RENDERTYPE_XY:x=dis.readInt();y=dis.readInt();break;case RENDERTYPE_LATLON:default :lat=dis.readFloat();lon=dis.readFloat();}w=dis.readInt();h=dis.readInt();length=dis.readInt();byte[] bytes=new byte[length];dis.readFully(bytes);switch (renderType) {case RENDERTYPE_OFFSET:bitmap=new OMBitmap(lat,lon,x,y,w,h,bytes);break;case RENDERTYPE_XY:bitmap=new OMBitmap(x,y,w,h,bytes);break;case RENDERTYPE_LATLON:default :bitmap=new OMBitmap(lat,lon,w,h,bytes);}if (bitmap != null) {LinkProperties properties=LinkProperties.loadPropertiesIntoOMGraphic(dis,bitmap,propertiesBuffer);bitmap.setRotationAngle((double)ProjMath.degToRad(PropUtils.floatFromProperties(properties,LPC_LINKROTATION,0.0f)));}return bitmap;}  }
class C{  public void putEnumerated(int i) throws IOException {  write(DerValue.tag_Enumerated);  putIntegerContents(i);}  }
class C{  private JarLoader(){}  }
class C{  public static ConstantNode forFloatingStamp(Stamp stamp,double value,StructuredGraph graph){  return forFloatingKind(stamp.getStackKind(),value,graph);}  }
class C{  protected String createMessage(String msg){  String result;  result="";  if (getOwner() != null) {    result=getOwner().getClass().getName();  } else {    result="<anonymous>";  }  result+=": " + msg;  return result;}  }
class C{  public boolean isReversal(){  return m_reversal;}  }
class C{  protected void addSourceElementPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_MappedElement_sourceElement_feature"),getString("_UI_PropertyDescriptor_description","_UI_MappedElement_sourceElement_feature","_UI_MappedElement_type"),SexecPackage.Literals.MAPPED_ELEMENT__SOURCE_ELEMENT,true,false,true,null,null,null));}  }
class C{  protected <T extends Enum<?>>void cancelAnimation(Animatable<T> object,T prop){  if (mLayoutAnimations != null) {    mLayoutAnimations.cancel(object,prop);  }}  }
class C{  public void write(String path,OffsetInfo offsetInfo) throws ZkException {  try {    String data=MAPPER.writeValueAsString(offsetInfo);    LOGGER.debug("Writing to Zookeeper Path {} OffsetInfo {}",path,data);    writeInternal(path,data.getBytes(Charset.forName(DEFAULT_CHARSET)));  } catch (  Exception ex) {    LOGGER.error("Error writing to Zookeeper..Path {} Payload {}",path,offsetInfo);    throw new ZkException("Error writing to Zookeeper..Path: " + path + " OffsetInfo: "+ offsetInfo,ex);  }}  }
class C{  @Override protected void onHandleIntent(Intent intent){  startNotification();  mVideoMediator=new VideoDataMediator(getApplicationContext());  finishNotification(mVideoMediator.uploadVideo(getApplicationContext(),intent.getData()));  sendBroadcast();}  }
class C{  public ExponentialExponentialModel(String name,Parameter N0Parameter,Parameter growthRateParameter,Parameter ancestralGrowthRateParameter,Parameter transitionTimeParameter,Type units){  super(name);  exponentialExponential=new ExponentialExponential(units);  this.N0Parameter=N0Parameter;  addVariable(N0Parameter);  N0Parameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));  this.growthRateParameter=growthRateParameter;  addVariable(growthRateParameter);  growthRateParameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY,1));  this.ancestralGrowthRateParameter=ancestralGrowthRateParameter;  addVariable(ancestralGrowthRateParameter);  ancestralGrowthRateParameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY,1));  this.transitionTimeParameter=transitionTimeParameter;  addVariable(transitionTimeParameter);  transitionTimeParameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY,1));  setUnits(units);}  }
class C{  public List<Versioned<V>> remove(K key){  while (true) {    List<Versioned<V>> items=map.get(key);synchronized (items) {      if (map.remove(key,items))       return items;    }  }}  }
class C{  public void addGeoKey(XTIFFField geoKey){  geoKeyIndex.put(new Integer(geoKey.getTag()),geoKey);  hasGeoKeys=true;}  }
class C{  public ViewToolBar(){  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.samples.svg.Labels");  setName(labels.getString(getID() + ".toolbar"));  setDisclosureStateCount(3);}  }
class C{  public void reset(){  mBuffer=new StringBuffer();}  }
class C{  public double localScore(int i,int parent){  return localScore(i,new int[]{parent});}  }
class C{  public LowMemoryException(){  this.critMems=Collections.emptySet();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:22.743 -0500",hash_original_method="8D15548F78BDFDD752295E5C53E86F2F",hash_generated_method="FD0E59B07B790EDC107374FEA112EB18") public SparseBooleanArray(){  this(10);}  }
class C{  @Override public long skip(final long n) throws IOException {  long length=Math.min(n,contentLength - pos);  length=wrappedStream.skip(length);  if (length > 0) {    pos+=length;  }  return length;}  }
class C{  public void onCorruption(SQLiteDatabase dbObj){  Log.e(TAG,"Corruption reported by sqlite on database: " + dbObj.getPath());  if (!dbObj.isOpen()) {    deleteDatabaseFile(dbObj.getPath());    return;  }  List<Pair<String,String>> attachedDbs=null;  try {    try {      attachedDbs=dbObj.getAttachedDbs();    } catch (    SQLiteException e) {    }    try {      dbObj.close();    } catch (    SQLiteException e) {    }  }  finally {    if (attachedDbs != null) {      for (      Pair<String,String> p : attachedDbs) {        deleteDatabaseFile(p.second);      }    } else {      deleteDatabaseFile(dbObj.getPath());    }  }}  }
class C{  protected ArrayLiteralImpl(){  super();}  }
class C{  public static boolean requestManaExactForTool(ItemStack stack,EntityPlayer player,int manaToGet,boolean remove){  float multiplier=Math.max(0F,1F - getFullDiscountForTools(player));  int cost=(int)(manaToGet * multiplier);  return requestManaExact(stack,player,cost,remove);}  }
class C{  public Iterator<? extends T> iterator(){  return iterator;}  }
class C{  public static void main(String[] argv){  ArgParser ap=new ArgParser("Wanderer");  if (argv.length == 0) {    ap.bail("",true);  }  String[] dirs=argv;  Wanderer wanderer=new Wanderer(new TestWandererCallback());  for (int i=0; i < dirs.length; i++) {    wanderer.handleEntry(new File(dirs[i]));  }}  }
class C{  public Huff(int domain){  this.domain=domain;  int length=domain * 2 - 1;  this.symbols=new Symbol[length];  for (int i=0; i < domain; i+=1) {    symbols[i]=new Symbol(i);  }  for (int i=domain; i < length; i+=1) {    symbols[i]=new Symbol(none);  }}  }
class C{  private double variance(double p,double totalWeight){  return (p * (1 - p)) / totalWeight;}  }
class C{  public JarEntry(ZipEntry ze){  super(ze);}  }
class C{  public boolean isClosed(){  return atomicSeq.removed();}  }
class C{  static String preparePtxFile(String cuFileName){  return invokeNvcc(cuFileName,"ptx",true);}  }
class C{  public Object clone(){  MersenneTwister clone=(MersenneTwister)super.clone();  clone.mt=(int[])this.mt.clone();  return clone;}  }
class C{  @Override public synchronized void publish(LogRecord record){  if (!isLoggable(record)) {    return;  }  String msg;  try {    msg=getFormatter().format(record);  } catch (  Exception ex) {    reportError(null,ex,ErrorManager.FORMAT_FAILURE);    return;  }  try {    if (!doneHeader) {      writer.write(getFormatter().getHead(this));      doneHeader=true;    }    writer.write(msg);  } catch (  Exception ex) {    reportError(null,ex,ErrorManager.WRITE_FAILURE);  }}  }
class C{  protected void parseDefineSprite(InStream in) throws IOException {  int id=in.readUI16();  SWFTagTypes sstt=tagtypes.tagDefineSprite(id);  if (sstt == null) {    return;  }  TagParser parser=new TagParser(sstt);  SWFReader reader=new SWFReader(parser,in);  reader.readTags();}  }
class C{  public WhitenedZCA(DataSet dataSet,double regularization){  super(dataSet,regularization);}  }
class C{  public boolean isExternal(){  EList<N4Modifier> _declaredModifiers=this.getDeclaredModifiers();  return _declaredModifiers.contains(N4Modifier.EXTERNAL);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case MappingPackage.STEREO_TYPE_TARGET__NAME:    return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);case MappingPackage.STEREO_TYPE_TARGET__ATTRIBUTES:  return attributes != null && !attributes.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public static MappedAddressAttribute createMappedAddressAttribute(TransportAddress address){  MappedAddressAttribute attribute=new MappedAddressAttribute();  attribute.setAddress(address);  return attribute;}  }
class C{  public boolean isLeaveMaxMessageSizeExceeded(){  return fieldLeaveMaxMessageSizeExceeded;}  }
class C{  public void focusLost(FocusEvent e){  if (e.isTemporary() || m_lookup == null || !m_button.isEnabled())   return;  if (e.getSource() == m_text) {    String text=m_text.getText();    log.config(m_columnName + " (Text) " + m_columnName+ " = "+ m_value+ " - "+ text);    m_haveFocus=false;    if ((m_value == null && m_text.getText().length() == 0))     return;    if (m_lastDisplay.equals(text))     return;    actionText();    return;  }  if (e.getSource() != m_combo && e.getSource() != m_combo.getEditor().getEditorComponent())   return;  ActionEvent evt=new ActionEvent(this,0,"vlookup-update");  processEvent(evt);  if (m_lookup.isValidated() && !m_lookup.hasInactive()) {    m_haveFocus=false;    return;  }  m_settingFocus=true;  log.config(m_columnName + " = " + m_combo.getSelectedItem());  Object obj=m_combo.getSelectedItem();  if (obj != null) {    m_combo.setSelectedItem(obj);    if (!m_combo.getSelectedItem().equals(obj)) {      log.fine(m_columnName + " - added to combo - " + obj);      m_combo.addItem(obj);      m_combo.setSelectedItem(obj);    }  }  m_settingFocus=false;  m_haveFocus=false;}  }
class C{  public void appendPathList(String pathlist) throws NotFoundException {  char sep=File.pathSeparatorChar;  int i=0;  for (; ; ) {    int j=pathlist.indexOf(sep,i);    if (j < 0) {      appendClassPath(pathlist.substring(i));      break;    } else {      appendClassPath(pathlist.substring(i,j));      i=j + 1;    }  }}  }
class C{  public void tryVibrate(){  if (mVibrator != null && mIsGloballyEnabled) {    long now=SystemClock.uptimeMillis();    if (now - mLastVibrate >= VIBRATE_DELAY_MS) {      mVibrator.vibrate(VIBRATE_LENGTH_MS);      mLastVibrate=now;    }  }}  }
class C{  public void startRecording(){  if (!isPaused) {    inputSpeech=new SpeechData(audioLine.getFormat());    Runnable stateUpdate=null;    if (voiceActivityDetection) {      new Thread(null).start();    } else {      stateUpdate.run();    }  } else {    log.info("Audio recorder is currently paused");  }}  }
class C{  public void match(final Element element,final CharSequence content){  if (models.isEmpty())   return;  ClusteredScoreMap<String> newScores, oldScores;  for (  final Model pattern : models) {    newScores=pattern.match(element,content);    oldScores=getScores(pattern.getName());    if (oldScores == null) {      oldScores=new ClusteredScoreMap<String>(false);      this.modelMap.put(pattern.getName(),oldScores);    }    oldScores.inc(newScores);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static float[] scaleBounds(float[] target,float scale,float x,float y,float z,float x2,float y2,float z2){  assert target.length == 6;  target[0]=x * scale;  target[1]=y * scale;  target[2]=z * scale;  target[3]=x2 * scale;  target[4]=y2 * scale;  target[5]=z2 * scale;  return target;}  }
class C{  protected String encodeDiff(final Task<Diff> task,final Diff diff) throws ConfigurationException, UnsupportedEncodingException, DecodingException, EncodingException, SQLConsumerException {  RevisionCodecData codecData=diff.getCodecData();  String encoding=encoder.encodeDiff(codecData,diff);  return encoding;}  }
class C{  public boolean isReplaceable(World world,int x,int y,int z,int offsetX,int offsetY,int offsetZ,int rotation){  x-=width / 2;  z-=depth / 2;  BlockPos pos;switch (rotation) {case 0:    pos=this.getCheckPos(x + offsetX,y + offsetY,z + offsetZ);  return world.getBlockState(pos).getBlock().isReplaceable(world,pos) || (replaceable != null && arrayContainsBlock(replaceable,world.getBlockState(pos)));case 1:pos=this.getCheckPos(offsetZ,offsetY,depth - offsetX - 1);return world.getBlockState(pos).getBlock().isReplaceable(world,pos) || (replaceable != null && arrayContainsBlock(replaceable,world.getBlockState(pos)));case 2:pos=this.getCheckPos(width - offsetX - 1,offsetY,depth - offsetZ - 1);return world.getBlockState(pos).getBlock().isReplaceable(world,pos) || (replaceable != null && arrayContainsBlock(replaceable,world.getBlockState(pos)));case 3:pos=this.getCheckPos(width - offsetZ - 1,offsetY,offsetX);return world.getBlockState(pos).getBlock().isReplaceable(world,pos) || (replaceable != null && arrayContainsBlock(replaceable,world.getBlockState(pos)));}return false;}  }
class C{  public double pdf(double x){  return this.TERM * Math.pow((1 + x * x / freedom),-(freedom + 1) * 0.5);}  }
class C{  public int squaredDistanceFrom(int x,int y){  int xDist=this.x + width / 2 - x;  int yDist=this.y + height / 2 - y;  return xDist * xDist + yDist * yDist;}  }
class C{  public boolean isBackgroundPainter(){  return type == TYPE_ROUNDED || type == TYPE_ROUNDED_PRESSED || type == TYPE_IMAGE || type == TYPE_IMAGE_HORIZONTAL || type == TYPE_IMAGE_VERTICAL || type == TYPE_IMAGE_SCALED;}  }
class C{  private void testDataSource(HikariDataSource dataSourcePool) throws SQLException {  try {    Connection conn=null;    try {      conn=dataSourcePool.getConnection();      testConnection(conn);    }  finally {      if (conn != null) {        conn.close();      }    }  } catch (  SQLException e) {    logConnectionFailure();    throw e;  }}  }
class C{  public static HashMap<String,List<String>> splitURLParams(String completeURL,String andSign){  int i;  HashMap<String,List<String>> searchparms=new HashMap<String,List<String>>();  ;  logger.debug("Complete URL: " + completeURL);  i=completeURL.indexOf("?");  if (i > -1) {    String searchURL=completeURL.substring(completeURL.indexOf("?") + 1);    logger.debug("Search URL: " + searchURL);    String[] paramArray=searchURL.split(andSign);    for (int c=0; c < paramArray.length; c++) {      String[] paramSplited=paramArray[c].split("=");      try {        if (!searchparms.containsKey(paramSplited[0])) {          searchparms.put(paramSplited[0],new ArrayList<String>());        }        searchparms.get(paramSplited[0]).add(java.net.URLDecoder.decode(paramSplited[1],Constants.CHARSET));      } catch (      UnsupportedEncodingException e) {        return new HashMap<String,List<String>>();      }    }    java.util.Iterator<String> keys=searchparms.keySet().iterator();    logger.debug("--------");    while (keys.hasNext()) {      String s=(String)keys.next();      logger.debug(s + " : " + searchparms.get(s));    }    logger.debug("--------");  }  return searchparms;}  }
class C{  public void commit(){  attributes.setJvmOwnerId(manager.getJvmId());  attributes.flush();}  }
class C{  @SuppressWarnings("unchecked") public static <K,V>ImmutableSortedMap<K,V> of(){  return (ImmutableSortedMap<K,V>)NATURAL_EMPTY_MAP;}  }
class C{  public Currency(final String id,final IModel<?> model){  super(id,model);}  }
class C{  public static double mean(long[] values){  double total=0.0;  for (int i=0; i < values.length; i++)   total+=values[i];  return total / values.length;}  }
class C{  private ConfigurationDirectory download() throws Exception {  Files.createDirectories(Paths.get(conf.getConfigurationDownloadPath()));  return ConfProxyHelper.downloadConfiguration(conf.getConfigurationDownloadPath(),conf.getProxyAnchorPath());}  }
class C{  public boolean isConstructor(){  return false;}  }
class C{  public IssuerNotMatchException(String message){  super(message);}  }
class C{  public <T extends ICalComponent>List<T> removeComponents(Class<T> clazz){  List<ICalComponent> removed=components.removeAll(clazz);  return castList(removed,clazz);}  }
class C{  public List<String> collectionTextFilterQuery(boolean noimages){  final ArrayList<String> fqs=new ArrayList<>();  fqs.add(CollectionSchema.httpstatus_i.getSolrFieldName() + ":200");  if (noimages) {    fqs.add("-" + CollectionSchema.content_type.getSolrFieldName() + ":(image/*)");    fqs.add("-" + CollectionSchema.url_file_ext_s.getSolrFieldName() + ":(jpg OR png OR gif)");  }  return fqs;}  }
class C{  private void detectSortDirection(IColumn currentColumn){  if (this.currentColumn == currentColumn) {    inverseDirection();  } else {    direction=SWT.UP;  }}  }
class C{  public Observable<String> textChanges(){  return RxTextView.afterTextChangeEvents(commentTextView).map(null);}  }
class C{  static Varargs match(Varargs args){  return str_find_aux(args,false);}  }
class C{  public void showStats(final StringBuilder str){  str.append("\n-------------------------\n");  str.append("RWStore Allocator Summary\n");  str.append("-------------------------\n");  str.append(String.format("%-16s %16s %16s %16s %16s %16s %16s %16s %16s %16s %16s %16s %16s %16s %16s %16s %16s %16s \n","AllocatorSize","AllocatorCount","SlotsAllocated","%SlotsAllocated","SlotsRecycled","SlotChurn","SlotsInUse","%SlotsInUse","MeanAllocation","SlotsReserved","%SlotsUnused","BytesReserved","BytesAppData","%SlotWaste","%AppData","%StoreFile","%TotalWaste","%FileWaste"));  long totalAppData=0;  long totalFileStore=0;  long totalAllocations=0;  long totalInuse=0;  for (  Bucket b : m_buckets) {    totalAppData+=b.usedStore();    totalFileStore+=b.reservedStore();    totalAllocations+=b.m_slotAllocations;    totalInuse+=b.usedSlots();  }  final long totalWaste=totalFileStore - totalAppData;  for (  Bucket b : m_buckets) {    str.append(String.format("%-16d %16d %16d %16.2f %16d %16.2f %16d %16.2f %16d %16d %16.2f %16d %16d %16.2f %16.2f %16.2f %16.2f  %16.2f \n",b.m_size,b.m_allocators,b.m_slotAllocations,b.percentAllocations(totalAllocations),b.m_slotDeletes,b.slotChurn(),b.usedSlots(),b.percentSlotsInuse(totalInuse),b.meanAllocation(),b.m_totalSlots,b.slotsUnused(),b.reservedStore(),b.usedStore(),b.slotWaste(),dataPercent(b.usedStore(),totalAppData),dataPercent(b.reservedStore(),totalFileStore),b.totalWaste(totalWaste),b.totalWaste(totalFileStore)));  }  str.append("\n-------------------------\n");  str.append("BLOBS\n");  str.append("-------------------------\n");  str.append(String.format("%-10s %12s %12s %12s %12s %12s\n","Bucket(K)","Allocations","Allocated","Deletes","Current","Mean"));  for (  BlobBucket b : m_blobBuckets) {    str.append(String.format("%-10d %12d %12d %12d %12d %12d\n",b.m_size / 1024,b.m_allocations,b.m_allocationSize,b.m_deletes,(b.m_allocations - b.m_deletes),b.meanAllocation()));  }}  }
class C{  @Override public void updateFloat(String columnLabel,float x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateFloat(" + quote(columnLabel) + ", "+ x+ "f);");    }    update(columnLabel,ValueFloat.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @Override public IndexRequest routing(String routing){  if (routing != null && routing.length() == 0) {    this.routing=null;  } else {    this.routing=routing;  }  return this;}  }
class C{  private void actionAcctSchema(){  Listitem listitem=selAcctSchema.getSelectedItem();  KeyNamePair kp=null;  if (listitem != null)   kp=(KeyNamePair)listitem.getValue();  if (kp == null)   return;  m_data.C_AcctSchema_ID=kp.getKey();  m_data.ASchema=MAcctSchema.get(Env.getCtx(),m_data.C_AcctSchema_ID);  log.info(m_data.ASchema.toString());  sortBy1.getChildren().clear();  sortBy2.getChildren().clear();  sortBy3.getChildren().clear();  sortBy4.getChildren().clear();  sortAddItem(new ValueNamePair("",""));  sortAddItem(new ValueNamePair("DateAcct",Msg.translate(Env.getCtx(),"DateAcct")));  sortAddItem(new ValueNamePair("DateTrx",Msg.translate(Env.getCtx(),"DateTrx")));  sortAddItem(new ValueNamePair("C_Period_ID",Msg.translate(Env.getCtx(),"C_Period_ID")));  Label[] labels=new Label[]{lsel1,lsel2,lsel3,lsel4,lsel5,lsel6,lsel7,lsel8};  Button[] buttons=new Button[]{sel1,sel2,sel3,sel4,sel5,sel6,sel7,sel8};  int selectionIndex=0;  MAcctSchemaElement[] elements=m_data.ASchema.getAcctSchemaElements();  for (int i=0; i < elements.length && selectionIndex < labels.length; i++) {    MAcctSchemaElement acctSchemaElement=elements[i];    String columnName=acctSchemaElement.getColumnName();    String displayColumnName;    if (columnName.equals("User1_ID") || columnName.equals("User2_ID"))     displayColumnName=acctSchemaElement.getName(); else     displayColumnName=acctSchemaElement.getDisplayColumnName();    sortAddItem(new ValueNamePair(columnName,Msg.translate(Env.getCtx(),displayColumnName)));    if (!acctSchemaElement.isElementType(X_C_AcctSchema_Element.ELEMENTTYPE_Organization) && !acctSchemaElement.isElementType(X_C_AcctSchema_Element.ELEMENTTYPE_Account)) {      labels[selectionIndex].setValue(Msg.translate(Env.getCtx(),displayColumnName));      labels[selectionIndex].setVisible(true);      buttons[selectionIndex].setName(columnName);      buttons[selectionIndex].addEventListener(Events.ON_CLICK,this);      buttons[selectionIndex].setImage("/images/Find16.png");      buttons[selectionIndex].setLabel("");      buttons[selectionIndex].setVisible(true);      selectionIndex++;    }  }  while (selectionIndex < labels.length) {    labels[selectionIndex].setVisible(false);    buttons[selectionIndex++].setVisible(false);  }}  }
class C{  private void rebuildNode(){  m_realizer.regenerate();  m_graph.updateViews();}  }
class C{  public void testMergeAll(){  ((MergeManyValues)m_Filter).setMergeValueRange("first-last");  Instances result=useFilter();  assertEquals(m_Instances.numAttributes(),result.numAttributes());  assertEquals(m_Instances.numInstances(),result.numInstances());  assertEquals(1,result.attribute(1).numValues());}  }
class C{  public void addMarker(IntervalMarker marker){  this.markers.add(marker);}  }
class C{  public static Values createValues(Model model,Table data,boolean untyped){  Resource blank=untyped ? model.createResource() : model.createResource(SP.Values);  Values values=blank.as(Values.class);  List<RDFNode> vars=new ArrayList<RDFNode>(data.getVarNames().size());  for (  String varName : data.getVarNames()) {    vars.add(model.createTypedLiteral(varName));  }  RDFList varList=model.createList(vars.iterator());  values.addProperty(SP.varNames,varList);  Iterator<Binding> bindings=data.rows();  if (bindings.hasNext()) {    List<RDFNode> lists=new LinkedList<RDFNode>();    while (bindings.hasNext()) {      List<RDFNode> nodes=new ArrayList<RDFNode>(data.getVarNames().size());      Binding binding=bindings.next();      for (      String varName : data.getVarNames()) {        Node value=binding.get(Var.alloc(varName));        if (value == null) {          nodes.add(SP.undef);        } else {          nodes.add(model.asRDFNode(value));        }      }      lists.add(model.createList(nodes.iterator()));    }    values.addProperty(SP.bindings,model.createList(lists.iterator()));  }  return values;}  }
class C{  public boolean equals(Object other){  if (other instanceof LocalUnitPair && ((LocalUnitPair)other).local == this.local && ((LocalUnitPair)other).unit == this.unit) {    return true;  } else   return false;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.PAREN_EXPRESSION__EXPRESSION:    return getExpression();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public Person(String name){  if (name == null)   throw new NullPointerException("Name must have a value");  this.name=name;}  }
class C{  private boolean removeBrowserTab(BrowserTab browserTab){  boolean wasRemoved=false;synchronized (privateInstanceLock) {    wasRemoved=browserTabs.remove(browserTab);  }  if (wasRemoved) {    WebAppDebugModelEvent<BrowserTab> removedEvent=new WebAppDebugModelEvent<BrowserTab>(browserTab);    fireBrowserTabRemoved(removedEvent);  }  return wasRemoved;}  }
class C{  public void stopAndReset(){  if (triggerBinder != null) {    triggerBinder.stopAndReset();  } else {    stopAndResetPending=true;  }}  }
class C{  public void serviceExecute(long svcPtr,long memPtr) throws IgniteCheckedException {  enter();  try {    PlatformCallbackUtils.serviceExecute(envPtr,svcPtr,memPtr);  }  finally {    leave();  }}  }
class C{  public void rowSetPopulated(RowSetEvent event,int numRows) throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  @Interruptible public static void addWeakCandidate(WeakReference<?> ref,ObjectReference referent){  weakReferenceProcessor.addCandidate(ref,referent);}  }
class C{  public void testRefinementStringEncodingBlockBoxRoundTrip(){  final int numIters=atLeast(100);  for (int i=0; i < numIters; i++) {    final int numStrs=atLeast(1);    List<String> data=new ArrayList<String>(numStrs);    for (int j=0; j < numStrs; j++) {      data.add(TestUtil.randomUnicodeString(random()));    }    String encoded=PivotFacetHelper.encodeRefinementValuePath(data);    List<String> decoded=PivotFacetHelper.decodeRefinementValuePath(encoded);    assertEquals(data,decoded);  }}  }
class C{  private Object executePlus(PageContext pc,SQL sql,Query qr,Operation2 expression,int row) throws PageException {  Object left=executeExp(pc,sql,qr,expression.getLeft(),row);  Object right=executeExp(pc,sql,qr,expression.getRight(),row);  try {    return new Double(Caster.toDoubleValue(left) + Caster.toDoubleValue(right));  } catch (  PageException e) {    return Caster.toString(left) + Caster.toString(right);  }}  }
class C{  public Category(String scheme,String term,String label){  this();  setScheme(scheme);  if (term == null) {    throw new NullPointerException("Invalid term. Cannot be null");  }  setTerm(term);  setLabel(label);}  }
class C{  public void qsort(final int left,final int right){  qsort2(left,right);  while (helpersWorking > 0) {  }}  }
class C{  public RenameLocalVariableProcessor(ILocalVariable localVariable){  fLocalVariable=localVariable;  fUpdateReferences=true;  if (localVariable != null)   fCu=(ICompilationUnit)localVariable.getAncestor(IJavaElement.COMPILATION_UNIT);  fNewName="";  fIsComposite=false;}  }
class C{  public static void main(String[] args){  runCLIApplication(CacheDoubleDistanceKNNLists.class,args);}  }
class C{  private void createCardAnchor(Address card,Address start,int bytes){  if (VM.VERIFY_ASSERTIONS) {    VM.assertions._assert(allowScanning);    VM.assertions._assert(card.EQ(getCard(card)));    VM.assertions._assert(start.diff(card).sLE(MAX_DATA_START_OFFSET));    VM.assertions._assert(start.diff(card).toInt() >= -CARD_MASK);  }  while (bytes > 0) {    int offset=start.diff(card).toInt();    getCardMetaData(card).store(offset);    card=card.plus(1 << LOG_CARD_BYTES);    bytes-=(1 << LOG_CARD_BYTES);  }}  }
class C{  private static int[] yy_unpack(){  int[] trans=new int[616];  int offset=0;  offset=yy_unpack(yy_packed0,offset,trans);  return trans;}  }
class C{  @SuppressWarnings("null") public byte[] toByteArray(final ArrayOfItemsSerDe<T> serDe){  final int preLongs;  final int outBytes;  final boolean empty=isEmpty();  final int activeItems=getNumActiveItems();  byte[] bytes=null;  if (empty) {    preLongs=1;    outBytes=8;  } else {    preLongs=Family.FREQUENCY.getMaxPreLongs();    bytes=serDe.serializeToByteArray(hashMap.getActiveKeys());    outBytes=((preLongs + activeItems) << 3) + bytes.length;  }  final byte[] outArr=new byte[outBytes];  final Memory mem=new NativeMemory(outArr);  long pre0=0L;  pre0=insertPreLongs(preLongs,pre0);  pre0=insertSerVer(SER_VER,pre0);  pre0=insertFamilyID(Family.FREQUENCY.getID(),pre0);  pre0=insertLgMaxMapSize(lgMaxMapSize,pre0);  pre0=insertLgCurMapSize(hashMap.getLgLength(),pre0);  pre0=empty ? insertFlags(EMPTY_FLAG_MASK,pre0) : insertFlags(0,pre0);  pre0=insertSerDeId(serDe.getId(),pre0);  if (empty) {    mem.putLong(0,pre0);  } else {    final long pre=0;    final long[] preArr=new long[preLongs];    preArr[0]=pre0;    preArr[1]=insertActiveItems(activeItems,pre);    preArr[2]=this.streamLength;    preArr[3]=this.offset;    mem.putLongArray(0,preArr,0,preLongs);    final int preBytes=preLongs << 3;    mem.putLongArray(preBytes,hashMap.getActiveValues(),0,activeItems);    mem.putByteArray(preBytes + (this.getNumActiveItems() << 3),bytes,0,bytes.length);  }  return outArr;}  }
class C{  private ResourcePoolState createRp() throws Throwable {  ResourcePoolState rp=ResourcePoolServiceTest.buildValidStartState();  return postServiceSynchronously(ResourcePoolService.FACTORY_LINK,rp,ResourcePoolState.class);}  }
class C{  private static long readBytes(int len,RandomAccessFile file,BufferedInputStream stream,long pos,MessageDigest sha256Digest,MessageDigest md5Digest) throws IOException, InsufficientDataException {  byte[] buf=new byte[16384];  int bytesToRead=buf.length;  int bytesRead;  int totalBytesRead=0;  int length=len;  if (file != null) {    pos=file.getFilePointer();  } else {    stream.mark(len);  }  do {    if ((length - totalBytesRead) < bytesToRead) {      bytesToRead=length - totalBytesRead;    }    if (file != null) {      bytesRead=file.read(buf,0,bytesToRead);    } else {      bytesRead=stream.read(buf,0,bytesToRead);    }    if (bytesRead < 0) {      throw new InsufficientDataException("Insufficient data.  bytes read " + totalBytesRead + " expected "+ length);    } else     if (bytesRead == 0) {      continue;    }    if (sha256Digest != null) {      sha256Digest.update(buf,0,bytesRead);    }    if (md5Digest != null) {      md5Digest.update(buf,0,bytesRead);    }    totalBytesRead+=bytesRead;  } while (totalBytesRead < length);  return pos;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(6);  newVector.addElement(new Option("\tThe lower run number to start the experiment from.\n" + "\t(default 1)","L",1,"-L <num>"));  newVector.addElement(new Option("\tThe upper run number to end the experiment at (inclusive).\n" + "\t(default 10)","U",1,"-U <num>"));  newVector.addElement(new Option("\tThe dataset to run the experiment on.\n" + "\t(required, may be specified multiple times)","T",1,"-T <arff file>"));  newVector.addElement(new Option("\tThe full class name of a ResultProducer (required).\n" + "\teg: weka.experiment.RandomSplitResultProducer","P",1,"-P <class name>"));  newVector.addElement(new Option("\tThe full class name of a ResultListener (required).\n" + "\teg: weka.experiment.CSVResultListener","D",1,"-D <class name>"));  newVector.addElement(new Option("\tA string containing any notes about the experiment.\n" + "\t(default none)","N",1,"-N <string>"));  if ((m_ResultProducer != null) && (m_ResultProducer instanceof OptionHandler)) {    newVector.addElement(new Option("","",0,"\nOptions specific to result producer " + m_ResultProducer.getClass().getName() + ":"));    newVector.addAll(Collections.list(((OptionHandler)m_ResultProducer).listOptions()));  }  return newVector.elements();}  }
class C{  public static Table read(ResultSet resultSet,String tableName) throws SQLException {  ResultSetMetaData metaData=resultSet.getMetaData();  Table table=Table.create(tableName);  for (int i=1; i <= metaData.getColumnCount(); i++) {    String name=metaData.getColumnName(i);    ColumnType type=SQL_TYPE_TO_TABLESAW_TYPE.get(metaData.getColumnType(i));    Preconditions.checkState(type != null,"No column type found for %s as specified for column %s",metaData.getColumnType(i),name);    Column newColumn=TypeUtils.newColumn(name,type);    table.addColumn(newColumn);  }  while (resultSet.next()) {    for (int i=1; i <= metaData.getColumnCount(); i++) {      Column column=table.column(i - 1);      column.addCell(resultSet.getString(i));    }  }  return table;}  }
class C{  public static synchronized void addCert(String keyId,byte[] certBytes){  log.trace("addCert({})",keyId);  Key key=findKey(keyId);  Cert cert=new Cert(SignerUtil.randomId());  cert.setCertificate(certBytes);  key.addCert(cert);}  }
class C{  public static boolean matches(int actualDimensionValue,char requiredDimensionSymbol){  if (requiredDimensionSymbol == Dimension.SYM_DONTCARE) {    return true;  }  if (requiredDimensionSymbol == Dimension.SYM_TRUE && (actualDimensionValue >= 0 || actualDimensionValue == Dimension.TRUE)) {    return true;  }  if (requiredDimensionSymbol == Dimension.SYM_FALSE && actualDimensionValue == Dimension.FALSE) {    return true;  }  if (requiredDimensionSymbol == Dimension.SYM_P && actualDimensionValue == Dimension.P) {    return true;  }  if (requiredDimensionSymbol == Dimension.SYM_L && actualDimensionValue == Dimension.L) {    return true;  }  if (requiredDimensionSymbol == Dimension.SYM_A && actualDimensionValue == Dimension.A) {    return true;  }  return false;}  }
class C{  public JSONObject append(String key,Object value) throws JSONException {  testValidity(value);  Object object=this.opt(key);  if (object == null) {    this.put(key,new JSONArray().put(value));  } else   if (object instanceof JSONArray) {    this.put(key,((JSONArray)object).put(value));  } else {    throw new JSONException("JSONObject[" + key + "] is not a JSONArray.");  }  return this;}  }
class C{  private void doneLoadBitmap(Bitmap bitmap,RectF bounds,int orientation){  final View loading=findViewById(R.id.loading);  loading.setVisibility(View.GONE);  mOriginalBitmap=bitmap;  mOriginalBounds=bounds;  mOriginalRotation=orientation;  if (bitmap != null && bitmap.getWidth() != 0 && bitmap.getHeight() != 0) {    RectF imgBounds=new RectF(0,0,bitmap.getWidth(),bitmap.getHeight());    mCropView.initialize(bitmap,imgBounds,imgBounds,orientation);    if (mCropExtras != null) {      int aspectX=mCropExtras.getAspectX();      int aspectY=mCropExtras.getAspectY();      mOutputX=mCropExtras.getOutputX();      mOutputY=mCropExtras.getOutputY();      if (mOutputX > 0 && mOutputY > 0) {        mCropView.applyAspect(mOutputX,mOutputY);      }      float spotX=mCropExtras.getSpotlightX();      float spotY=mCropExtras.getSpotlightY();      if (spotX > 0 && spotY > 0) {        mCropView.setWallpaperSpotlight(spotX,spotY);      }      if (aspectX > 0 && aspectY > 0) {        mCropView.applyAspect(aspectX,aspectY);      }    }    enableSave(true);  } else {    Log.w(LOGTAG,"could not load image for cropping");    cannotLoadImage();    setResult(RESULT_CANCELED,new Intent());    done();  }}  }
class C{  public void java_lang_Class_getProtectionDomain0(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  ReferenceVariable protdmn=helper.tempField("<java.lang.Class ProtDmn>");  helper.assign(returnVar,protdmn);}  }
class C{  private static boolean isAlignToken(String str){  return null != alignTokenHashTable.get(str);}  }
class C{  public Builder keepOriginalIds(final boolean keepOriginalIds){  configuration.setProperty(KEEP_ORIGINAL_IDS_CFG_KEY,keepOriginalIds);  return this;}  }
class C{  public Manipulation(VariableSource variableSource){  if (variableSource == null) {    throw new NullPointerException();  }  this.variableSource=variableSource;  this.manipulated=new boolean[getNumNodes()];}  }
class C{  public PersistentCookieStore(Context context){  cookiePrefs=context.getSharedPreferences(COOKIE_PREFS,0);  cookies=new HashMap<String,ConcurrentHashMap<String,HttpCookie>>();  Map<String,?> prefsMap=cookiePrefs.getAll();  for (  Map.Entry<String,?> entry : prefsMap.entrySet()) {    if (((String)entry.getValue()) != null && !((String)entry.getValue()).startsWith(COOKIE_NAME_PREFIX)) {      String[] cookieNames=TextUtils.split((String)entry.getValue(),",");      for (      String name : cookieNames) {        String encodedCookie=cookiePrefs.getString(COOKIE_NAME_PREFIX + name,null);        if (encodedCookie != null) {          HttpCookie decodedCookie=decodeCookie(encodedCookie);          if (decodedCookie != null) {            if (!cookies.containsKey(entry.getKey())) {              cookies.put(entry.getKey(),new ConcurrentHashMap<String,HttpCookie>());            }            cookies.get(entry.getKey()).put(name,decodedCookie);          }        }      }    }  }}  }
class C{  public PreRenderComponentEvent(UIComponent component){  super(component);}  }
class C{  public MessageMismatchException(String message){  super(message);}  }
class C{  public String nodeLabel(){  return "prune search";}  }
class C{  public TableColumnManager(JTable table,boolean menuPopup){  this.table=table;  setMenuPopup(menuPopup);  table.addPropertyChangeListener(this);  reset();}  }
class C{  @Override public boolean execute(String[] params,String remainder){  final RPAction stop=new RPAction();  stop.put(TYPE,WALK);  stop.put(TARGET,StringHelper.unquote(remainder));  stop.put(MODE,"stop");  ClientSingletonRepository.getClientFramework().send(stop);  return true;}  }
class C{  protected CacheDistributionAdvisor createDistributionAdvisor(InternalRegionArguments internalRegionArgs){  return CacheDistributionAdvisor.createCacheDistributionAdvisor(this);}  }
class C{  public void moveElement(String ref,String parentRef,Integer index){  if (TextUtils.isEmpty(ref) || TextUtils.isEmpty(parentRef)) {    return;  }  Message msg=Message.obtain();  WXDomTask task=new WXDomTask();  task.instanceId=mWXSDKInstance.getInstanceId();  task.args=new ArrayList<>();  task.args.add(ref);  task.args.add(parentRef);  task.args.add(index);  msg.what=WXDomHandler.MsgType.WX_DOM_MOVE_DOM;  msg.obj=task;  WXSDKManager.getInstance().getWXDomManager().sendMessage(msg);}  }
class C{  public boolean thisDeviceSpeaksTo(BluetoothDevice other) throws NoSuchAlgorithmException, UnsupportedEncodingException {  if (MurmurService.USE_BACKOFF)   return true;  if (other == null) {    log.info("This device not speaking to peer, peer is null");    return false;  }  String otherAddr=other.getAddress();  if (otherAddr == null) {    log.info("This device not speaking to peer :" + other + ", peer address is null");    return false;  }  String myAddr=mBluetoothSpeaker.getAddress();  if (myAddr.equals(whichInitiates(myAddr,otherAddr))) {    return true;  } else {    return false;  }}  }
class C{  public void flush(){  FileStore s=store.getFileStore();  if (s == null || s.isReadOnly()) {    return;  }  if (!store.compact(50,4 * 1024 * 1024)) {    store.commit();  }}  }
class C{  public void testRadix2Neg(){  String value="-101001100010010001001010101110000101010110001010010101010101010101010101010101010101010101010010101";  int radix=2;  BigInteger aNumber=new BigInteger(value,radix);  String result=aNumber.toString(radix);  assertTrue(result.equals(value));}  }
class C{  public synchronized void registerNativeSymbol(Address symbolAddress){  if (VM.BuildForPower64ELF_ABI) {    nativeIP=symbolAddress.loadAddress();    nativeTOC=symbolAddress.loadAddress(Offset.fromIntSignExtend(BYTES_IN_ADDRESS));  } else {    nativeIP=symbolAddress;  }  replaceCompiledMethod(null);}  }
class C{  private table fillTable_Lookup_Rows(MobileSessionCtx wsc,String columnName,int fieldRefId,table table1,String targetBase,boolean mandatory,boolean onlyValidated,boolean onlyActive,boolean temporary,int page,String where){  StringBuffer sqlSelect=null;  StringBuffer sqlCount=null;  String sql=null;  String colKey=null;  String colDisplay=null;  if (fieldRefId > 0) {    sql="SELECT AD_Table_ID, AD_Key, AD_Display, WhereClause, OrderByClause FROM AD_Ref_Table WHERE AD_Reference_ID = " + fieldRefId;    int tableID=0;    String whereClause=null;    String orderBy=null;    try {      PreparedStatement pstmt=DB.prepareStatement(sql.toString(),null);      ResultSet rs=pstmt.executeQuery();      if (rs.next()) {        tableID=rs.getInt(1);        whereClause=whereClause + rs.getString(4);        orderBy=rs.getString(5);        sql="Select ColumnName FROM AD_Column Where AD_Column_ID = ? AND AD_Table_ID = " + tableID;        colKey=DB.getSQLValueString(null,sql,rs.getInt(2));        colDisplay=DB.getSQLValueString(null,sql,rs.getInt(3));      }      rs.close();      pstmt.close();    } catch (    SQLException e) {      log.log(Level.SEVERE,sql.toString(),e);    }    sql="Select TableName FROM AD_Table Where AD_Table_ID = ?";    String tableName=DB.getSQLValueString(null,sql,tableID);    sqlSelect=new StringBuffer("SELECT " + m_HeaderSelect + " FROM "+ tableName+ " WHERE AD_Client_ID=?");    sqlCount=new StringBuffer("SELECT count(*) FROM " + tableName + " WHERE AD_Client_ID=?");    if (whereClause != null) {      sqlSelect.append(" AND " + whereClause).append(where);      sqlCount.append(" AND " + whereClause).append(where);    }    if (orderBy != null)     sqlSelect.append(" ORDER BY " + orderBy);  } else {    sqlSelect=new StringBuffer("SELECT " + m_HeaderSelect + " FROM "+ columnName.replace("_ID","")+ " WHERE AD_Client_ID=?");    sqlCount=new StringBuffer("SELECT count(*) FROM " + columnName.replace("_ID","") + " WHERE AD_Client_ID=?");    sqlSelect.append(where);    sqlCount.append(where);    colKey=columnName;    if (m_HeaderSelect.toString().contains("Name"))     colDisplay="Name"; else     colDisplay="Description";  }  try {    PreparedStatement pstmt=DB.prepareStatement(sqlSelect.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY,null);    pstmt.setInt(1,Env.getAD_Client_ID(wsc.ctx));    ResultSet rs=pstmt.executeQuery();    log.info("This is the page number " + page);    log.info("This is the MAX_LINES " + MAX_LINES);    while (rs.next()) {      button button=new button();      button.addElement("&gt;");      StringBuffer script=new StringBuffer();      script.append("startLookUpdate(").append(targetBase).append("D',").append(targetBase).append("F','").append(rs.getString(colKey)).append("',").append(targetBase).append("D','").append(rs.getString(colDisplay)).append("');startUpdate(").append(targetBase).append("');return false;");      button.setOnClick(script.toString());      tr line=new tr();      line.addElement(new td(button));      for (int i=1; i <= m_colCount; i++) {        line.addElement(new td(rs.getString(i)));      }      table1.addElement(line);    }    m_recordCount=DB.getSQLValue(null,sqlCount.toString(),Env.getAD_Client_ID(wsc.ctx));    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql.toString(),e);  }  return table1;}  }
class C{  private void copyAction(File srcFile,File destFile) throws FileNotFoundException, IOException {  FileInputStream istream=new FileInputStream(srcFile);  FileOutputStream ostream=new FileOutputStream(destFile);  FileChannel input=istream.getChannel();  FileChannel output=ostream.getChannel();  try {    input.transferTo(0,input.size(),output);  }  finally {    istream.close();    ostream.close();    input.close();    output.close();  }}  }
class C{  public void postInitializationStatistics(final EvolutionState state){  for (int x=0; x < children.length; x++)   children[x].postInitializationStatistics(state);}  }
class C{  protected boolean isOnlyIssue(){  super.setIsOnlyIssue(pickcombo.getSelectedIndex() == 1);  return super.isOnlyIssue();}  }
class C{  public void addProperty(Property property){  getProperties().add(property);}  }
class C{  @Override public void activateSingleVolumeSnapshot(StorageSystem storage,URI snapshot,TaskCompleter taskCompleter) throws DeviceControllerException {  try {    BlockSnapshot snapshotObj=_dbClient.queryObject(BlockSnapshot.class,snapshot);    if (snapshotObj.getIsSyncActive()) {      _log.warn("Trying to activate snapshot, which is already active",snapshotObj.getId().toString());      return;    }    _log.info("activateSingleVolumeSnapshot operation START");    CIMArgument[] inArgs=_helper.getActivateSnapshotInputArguments(storage,snapshotObj);    CIMArgument[] outArgs=new CIMArgument[5];    _helper.callModifyReplica(storage,inArgs,outArgs);    setIsSyncActive(snapshotObj,true);    snapshotObj.setRefreshRequired(true);    _dbClient.persistObject(snapshotObj);    taskCompleter.ready(_dbClient);  } catch (  Exception e) {    _log.info("Problem making SMI-S call: ",e);    ServiceError error=DeviceControllerErrors.smis.unableToCallStorageProvider(e.getMessage());    taskCompleter.error(_dbClient,error);  } finally {    _log.info("activateSingleVolumeSnapshot operation END");  }}  }
class C{  private BigDecimal calculateParameterPeriodCosts(CostCalculator calculator,XParameterPeriodValue periodValue,BigDecimal valueMultplier){  ParameterValueType type=periodValue.getValueType();  BigDecimal costs=ZERO_NORMALIZED;  BigDecimal valueForStepEvaluation=ZERO_NORMALIZED;  if (type.equals(ParameterValueType.INTEGER) || type.equals(ParameterValueType.LONG)) {    if (!periodValue.isParameterOption()) {      valueForStepEvaluation=new BigDecimal(periodValue.getValue());    }  }  SteppedPriceDetail steppedPricesDetail=periodValue.getSteppedPricesForParameter();  if (steppedPricesDetail.areSteppedPricesDefined()) {    SteppedPriceDetail stepData=calculator.calculateStepCost(steppedPricesDetail,valueForStepEvaluation);    costs=stepData.getNormalizedCost();  } else {    BigDecimal price=periodValue.getPricePerSubscription();    costs=price.multiply(valueMultplier);  }  costs=BigDecimals.multiply(costs,periodValue.getPeriodFactor());  return costs;}  }
class C{  public void swap() throws IOException {  print("swap",null);}  }
class C{  public static GeoTimeSerie integrate(GeoTimeSerie gts,double initialValue){  GeoTimeSerie integrated=gts.cloneEmpty();  GTSHelper.sort(gts);  double value=initialValue;  GTSHelper.setValue(integrated,GTSHelper.tickAtIndex(gts,0),GTSHelper.locationAtIndex(gts,0),GTSHelper.elevationAtIndex(gts,0),value,false);  for (int i=1; i < gts.values; i++) {    double deltaT=(double)(gts.ticks[i] - gts.ticks[i - 1]) / (double)Constants.TIME_UNITS_PER_S;    double rateOfChange=((Number)GTSHelper.valueAtIndex(gts,i - 1)).doubleValue();    value=value + rateOfChange * deltaT;    GTSHelper.setValue(integrated,GTSHelper.tickAtIndex(gts,i),GTSHelper.locationAtIndex(gts,i),GTSHelper.elevationAtIndex(gts,i),value,false);  }  return integrated;}  }
class C{  public boolean removeTrace(Trace trace){  return traceList.remove(trace);}  }
class C{  public MatrixStackd popMatrix(){  if (curr == 0) {    throw new IllegalStateException("already at the buttom of the stack");  }  set(mats[--curr]);  return this;}  }
class C{  public BrazilianStemFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  final Vector processQNAMESRNU(StylesheetHandler handler,String uri,String name,String rawName,String value) throws org.xml.sax.SAXException {  StringTokenizer tokenizer=new StringTokenizer(value," \t\n\r\f");  int nQNames=tokenizer.countTokens();  Vector qnames=new Vector(nQNames);  String defaultURI=handler.getNamespaceForPrefix("");  for (int i=0; i < nQNames; i++) {    String tok=tokenizer.nextToken();    if (tok.indexOf(':') == -1) {      qnames.addElement(new QName(defaultURI,tok));    } else {      qnames.addElement(new QName(tok,handler));    }  }  return qnames;}  }
class C{  public EvaluationMetricHelper(Evaluation eval){  for (int i=0; i < Evaluation.BUILT_IN_EVAL_METRICS.length; i++) {    m_builtin.put(Evaluation.BUILT_IN_EVAL_METRICS[i].toLowerCase(),i);  }  setEvaluation(eval);}  }
class C{  @NotNull @ObjectiveCName("makeAdminCommandWithGid:withUid:") public Command<Void> makeAdmin(final int gid,final int uid){  return null;}  }
class C{  public NumberIsTooSmallException(Localizable specific,Number wrong,Number min,boolean boundIsAllowed){  super(specific,wrong,min);  this.min=min;  this.boundIsAllowed=boundIsAllowed;}  }
class C{  private void drainAllWaiting(){  while (!waiting.isEmpty()) {    tryDrainNextWaiting(true);  }}  }
class C{  private Map<URI,UserMapping> mapUserToTenant(StringSet domains,StorageOSUserDAO storageOSUser,Map<String,List<String>> attributeKeyValuesMap,Map<URI,List<UserMapping>> tenantToMappingMap,ValidationFailureReason[] failureReason){  Map<URI,UserMapping> tenants=new HashMap<URI,UserMapping>();  if (CollectionUtils.isEmpty(domains)) {    return tenants;  }  List<UserMappingAttribute> userMappingAttributes=new ArrayList<UserMappingAttribute>();  for (  Entry<String,List<String>> attributeKeyValues : attributeKeyValuesMap.entrySet()) {    UserMappingAttribute userMappingAttribute=new UserMappingAttribute();    userMappingAttribute.setKey(attributeKeyValues.getKey());    userMappingAttribute.setValues(attributeKeyValues.getValue());    userMappingAttributes.add(userMappingAttribute);  }  List<String> userMappingGroups=new ArrayList<String>();  if (null != storageOSUser.getGroups()) {    for (    String group : storageOSUser.getGroups()) {      userMappingGroups.add((group.split("@")[0]).toUpperCase());      _log.debug("Adding user's group {} to usermapping group ",(group.split("@")[0]).toUpperCase());    }  }  for (  Entry<URI,List<UserMapping>> tenantToMappingMapEntry : tenantToMappingMap.entrySet()) {    if (tenantToMappingMapEntry == null || tenantToMappingMapEntry.getValue() == null) {      continue;    }    for (    String domain : domains) {      for (      UserMapping userMapping : tenantToMappingMapEntry.getValue()) {        if (userMapping.isMatch(domain,userMappingAttributes,userMappingGroups)) {          tenants.put(tenantToMappingMapEntry.getKey(),userMapping);        }      }    }  }  if (tenants.isEmpty()) {    BasePermissionsHelper permissionsHelper=new BasePermissionsHelper(_dbClient,false);    TenantOrg rootTenant=permissionsHelper.getRootTenant();    if (tenantToMappingMap.containsKey(rootTenant.getId())) {      List<UserMapping> rootUserMapping=tenantToMappingMap.get(rootTenant.getId());      if (CollectionUtils.isEmpty(rootUserMapping)) {        _log.debug("User {} did not match a tenant.  Assigning to root tenant since root does not have any attribute mappings",storageOSUser.getUserName());        tenants.put(rootTenant.getId(),null);      }    } else     if (rootTenant.getUserMappings() == null || rootTenant.getUserMappings().isEmpty()) {      _log.debug("User {} did not match a tenant.  Assigning to root tenant since root does not have any attribute mappings",storageOSUser.getUserName());      tenants.put(rootTenant.getId(),null);    }  }  return tenants;}  }
class C{  public JRadioButtonMenuItem(Action a){  this();  setAction(a);}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request,GestionDescripcionBI descripcionBI){  ActionErrors errors=new ActionErrors();  if (StringUtils.isBlank(valor)) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(ArchivoDetails.DESCRIPCION_CAMPO_VALOR,request.getLocale())));  }  if (descripcionBI != null) {    TextoTablaValidacionVO textoTblvld=descripcionBI.getValorTablaValidacionByValor(valor,idTblVld);    if (textoTblvld != null && (StringUtils.isBlank(id) || !textoTblvld.getId().equals(id))) {      errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_CREAR_ELEMENTO_YA_EXISTE));    }  }  return errors;}  }
class C{  private CViewHelpers(){}  }
class C{  private ChartRendererFactory(){}  }
class C{  public boolean run() throws IOException {  createTheUserForSingleUserMode();  int numThreads=8;  if (httpsPort != null) {    numThreads+=3;  }  final int idleTimeout=60000;  final BlockingQueue<Runnable> queue=new BlockingArrayQueue<>(10000);  final Server server=new Server(new QueuedThreadPool(numThreads,numThreads,idleTimeout,queue));  final HttpConfiguration http_config=new HttpConfiguration();  http_config.setSecureScheme("https");  if (httpsPort != null) {    http_config.setSecurePort(httpsPort);  }  http_config.setOutputBufferSize(32768);  final ServerConnector http=new ServerConnector(server,new HttpConnectionFactory(http_config));  http.setPort(httpPort);  http.setIdleTimeout(30000);  final ArrayList<Connector> connectors=new ArrayList<Connector>();  connectors.add(http);  if (keyStorePath != null) {    final SslContextFactory sslContextFactory=new SslContextFactory();    sslContextFactory.setKeyStorePath(keyStorePath.getAbsolutePath());    if (keyStorePassword != null) {      sslContextFactory.setKeyStorePassword(keyStorePassword);    }    if (keyManagerPassword != null) {      sslContextFactory.setKeyManagerPassword(keyManagerPassword);    }    final HttpConfiguration https_config=new HttpConfiguration(http_config);    https_config.addCustomizer(new SecureRequestCustomizer());    final ServerConnector https=new ServerConnector(server,new SslConnectionFactory(sslContextFactory,HttpVersion.HTTP_1_1.asString()),new HttpConnectionFactory(https_config));    https.setPort(httpsPort);    https.setIdleTimeout(500000);    connectors.add(https);  }  server.setConnectors(connectors.toArray(new Connector[connectors.size()]));  final ContextHandlerCollection contexts=createContexts(temporaryDirectory,sessionStoreDirectory);  if (logDirectory == null) {    server.setHandler(contexts);  } else {    logDirectory.mkdirs();    final HandlerCollection handlers=new HandlerCollection();    final RequestLogHandler requestLogHandler=new RequestLogHandler();    handlers.setHandlers(new Handler[]{contexts,requestLogHandler});    server.setHandler(handlers);    final NCSARequestLog requestLog=new NCSARequestLog(new File(logDirectory,"jetty-yyyy_mm_dd.request.log").getAbsolutePath());    requestLog.setRetainDays(90);    requestLog.setAppend(true);    requestLog.setExtended(false);    requestLog.setLogTimeZone("GMT");    requestLog.setLogLatency(true);    requestLogHandler.setRequestLog(requestLog);  }  try {    server.start();    server.join();  } catch (  final Throwable t) {    logger.log(Level.SEVERE,t.getStackTrace().toString());  }  return true;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public void removePropertyChangeListener(PropertyChangeListener pcl){  m_pcSupport.removePropertyChangeListener(pcl);}  }
class C{  public void overrideBackbutton(boolean override){  LOG.i("App","WARNING: Back Button Default Behavior will be overridden.  The backbutton event will be fired!");  webView.setButtonPlumbedToJs(KeyEvent.KEYCODE_BACK,override);}  }
class C{  public boolean supportsEAc3(){  return Util.SDK_INT >= 21;}  }
class C{  @SuppressWarnings("unused") private String checkForWellKnownNamespacePrefix(final String prefix){  final String namespace;  if (prefix.equals("bd")) {    prefixMap.put("bd",namespace=BD.NAMESPACE);  } else   if (prefix.equals("bds")) {    prefixMap.put("bds",namespace=BDS.NAMESPACE);  } else   if (prefix.equals("hint")) {    prefixMap.put("hint",namespace=QueryHints.NAMESPACE);  } else   if (prefix.equals("rdf")) {    prefixMap.put("rdf",namespace=RDF.NAMESPACE);  } else   if (prefix.equals("rdfs")) {    prefixMap.put("rdfs",namespace=RDFS.NAMESPACE);  } else   if (prefix.equals("xsd")) {    prefixMap.put("xsd",namespace=XSD.NAMESPACE);  } else   if (prefix.equals("foaf")) {    prefixMap.put("foaf",namespace=FOAFVocabularyDecl.NAMESPACE);  } else   if (prefix.equals("fn")) {    prefixMap.put("fn",namespace=FN.NAMESPACE);  } else   if (prefix.equals("owl")) {    prefixMap.put("owl",namespace=OWL.NAMESPACE);  } else   if (prefix.equals("sesame")) {    prefixMap.put("sesame",namespace=SESAME.NAMESPACE);  } else   if (prefix.equals("gas")) {    prefixMap.put("gas",namespace=GASService.Options.NAMESPACE);  } else {    namespace=null;  }  return namespace;}  }
class C{  static MethodHandle bindCaller(MethodHandle mh,Class<?> hostClass){  return BindCaller.bindCaller(mh,hostClass);}  }
class C{  void put(final MethodWriter owner,final ByteVector out,final int source,final boolean wideOffset){  if ((status & RESOLVED) == 0) {    if (wideOffset) {      addReference(-1 - source,out.length);      out.putInt(-1);    } else {      addReference(source,out.length);      out.putShort(-1);    }  } else {    if (wideOffset) {      out.putInt(position - source);    } else {      out.putShort(position - source);    }  }}  }
class C{  private void saveToDatabase(){  StendhalRPZone zone=this.getZone();  if (zone != null) {    zone.storeToDatabase();  }}  }
class C{  public Import(String importUri,String absoluteUri,String contents) throws URISyntaxException {  this(importUri,absoluteUri,contents,null);}  }
class C{  public JCardValue(JsonValue... values){  this.values=Arrays.asList(values);}  }
class C{  @SuppressWarnings("unused") private LayoutImpl(){}  }
class C{  public boolean generate(Projection proj){  if (getNeedToRegenerate() == true) {    if (interval > 0) {      subCircles=createCircles();    } else {      subCircles=null;    }  }  centerPoint=createCenterPoint();  centerPoint.generate(proj);  setRenderType(RENDERTYPE_LATLON);  int i;  if (subCircles != null) {    for (i=0; i < subCircles.length; i++) {      subCircles[i].generate(proj);      labels[i].generate(proj);    }    if (labels.length > i) {      labels[i].generate(proj);    }  }  return super.generate(proj);}  }
class C{  public OrganizationAuthorityException(String message,Object[] params){  super(message,params);}  }
class C{  @EventHandler public void onPlayerQuit(PlayerQuitEvent event){  event.setQuitMessage(null);  playerDeathWorlds.remove(event.getPlayer().getUniqueId());  core.getReconnectionHandler().removeHost(event.getPlayer());  final World world=event.getPlayer().getWorld();  core.getOriginObject().getServer().getScheduler().runTaskLater(core.getOriginObject(),null,10L);  core.getOriginObject().getServer().getScheduler().runTaskAsynchronously(core.getOriginObject(),null);}  }
class C{  public StepsChain then(Step step){  steps.add(step);  return this;}  }
class C{  public boolean isStretchAllColumns(){  return mStretchAllColumns;}  }
class C{  private void calculateBackgroundColor(final INaviViewNode node){  final List<SearchResult> results=m_searcher.getResults();  for (  final SearchResult result : results) {    if ((result.getObject() instanceof NaviNode) && ((NaviNode)result.getObject()).getRawNode().equals(node)) {      setBackground(SEARCH_HIT_BACKGROUND);      return;    }  }}  }
class C{  public static String randomNumeric(final int count){  return random(count,false,true);}  }
class C{  public boolean isRss(){  return isRss;}  }
class C{  public final java_cup.runtime.symbol CUP$do_action(int CUP$act_num,java_cup.runtime.lr_parser CUP$parser,java.util.Stack CUP$stack,int CUP$top) throws java.lang.Exception {  java_cup.runtime.symbol CUP$result;switch (CUP$act_num) {case 64:{      CUP$result=new java_cup.runtime.symbol(27);    }  return CUP$result;case 63:{  CUP$result=new java_cup.runtime.str_token(30);  ((java_cup.runtime.str_token)CUP$result).str_val=((java_cup.runtime.str_token)CUP$stack.elementAt(CUP$top - 0)).str_val;}return CUP$result;case 62:{CUP$result=new java_cup.runtime.str_token(29);((java_cup.runtime.str_token)CUP$result).str_val=((java_cup.runtime.str_token)CUP$stack.elementAt(CUP$top - 0)).str_val;}return CUP$result;case 61:{CUP$result=new java_cup.runtime.str_token(28);((java_cup.runtime.str_token)CUP$result).str_val=((java_cup.runtime.str_token)CUP$stack.elementAt(CUP$top - 0)).str_val;}return CUP$result;case 60:{CUP$result=new java_cup.runtime.symbol(24);if (symbols.get(((java_cup.runtime.str_token)CUP$stack.elementAt(CUP$top - 0)).str_val) != null) {lexer.emit_error("Symbol \"" + ((java_cup.runtime.str_token)CUP$stack.elementAt(CUP$top - 0)).str_val + "\" has already been declared");} else {non_terminal this_nt=new non_terminal(((java_cup.runtime.str_token)CUP$stack.elementAt(CUP$top - 0)).str_val,multipart_name);non_terms.put(((java_cup.runtime.str_token)CUP$stack.elementAt(CUP$top - 0)).str_val,this_nt);symbols.put(((java_cup.runtime.str_token)CUP$stack.elementAt(CUP$top - 0)).str_val,new symbol_part(this_nt));}}return CUP$result;case 59:{CUP$result=new java_cup.runtime.symbol(23);if (symbols.get(((java_cup.runtime.str_token)CUP$stack.elementAt(CUP$top - 0)).str_val) != null) {lexer.emit_error("Symbol \"" + ((java_cup.runtime.str_token)CUP$stack.elementAt(CUP$top - 0)).str_val + "\" has already been declared");} else {symbols.put(((java_cup.runtime.str_token)CUP$stack.elementAt(CUP$top - 0)).str_val,new symbol_part(new terminal(((java_cup.runtime.str_token)CUP$stack.elementAt(CUP$top - 0)).str_val,multipart_name)));}}return CUP$result;case 58:{CUP$result=new java_cup.runtime.symbol(17);}return CUP$result;case 57:{CUP$result=new java_cup.runtime.symbol(12);}return CUP$result;case 56:{CUP$result=new java_cup.runtime.symbol(12);append_multipart("*");}return CUP$result;case 55:{CUP$result=new java_cup.runtime.symbol(10);append_multipart(((java_cup.runtime.str_token)CUP$stack.elementAt(CUP$top - 0)).str_val);}return CUP$result;case 54:{CUP$result=new java_cup.runtime.symbol(10);append_multipart(((java_cup.runtime.str_token)CUP$stack.elementAt(CUP$top - 0)).str_val);}return CUP$result;case 53:{CUP$result=new java_cup.runtime.str_token(31);((java_cup.runtime.str_token)CUP$result).str_val=null;}return CUP$result;case 52:{CUP$result=new java_cup.runtime.str_token(31);((java_cup.runtime.str_token)CUP$result).str_val=((java_cup.runtime.str_token)CUP$stack.elementAt(CUP$top - 0)).str_val;}return CUP$result;case 51:{CUP$result=new java_cup.runtime.symbol(22);add_rhs_part(new action_part(((java_cup.runtime.str_token)CUP$stack.elementAt(CUP$top - 0)).str_val));}return CUP$result;case 50:{CUP$result=new java_cup.runtime.symbol(22);production_part symb=(production_part)symbols.get(((java_cup.runtime.str_token)CUP$stack.elementAt(CUP$top - 1)).str_val);if (symb == null) {if (lexer.error_count == 0) lexer.emit_error("Symbol \"" + ((java_cup.runtime.str_token)CUP$stack.elementAt(CUP$top - 1)).str_val + "\" has not been declared");} else {add_rhs_part(add_lab(symb,((java_cup.runtime.str_token)CUP$stack.elementAt(CUP$top - 0)).str_val));}}return CUP$result;case 49:{CUP$result=new java_cup.runtime.symbol(21);}return CUP$result;case 48:{CUP$result=new java_cup.runtime.symbol(21);}return CUP$result;case 47:{CUP$result=new java_cup.runtime.symbol(26);if (lhs_nt != null) {production p=new production(lhs_nt,rhs_parts,rhs_pos);if (start_nt == null) {start_nt=lhs_nt;new_rhs();add_rhs_part(new symbol_part(start_nt));add_rhs_part(new symbol_part(terminal.EOF));emit.start_production=new production(non_terminal.START_nt,rhs_parts,rhs_pos);new_rhs();}}new_rhs();}return CUP$result;case 46:{CUP$result=new java_cup.runtime.symbol(25);}return CUP$result;case 45:{CUP$result=new java_cup.runtime.symbol(25);}return CUP$result;case 44:{CUP$result=new java_cup.runtime.symbol(20);}return CUP$result;case 43:{CUP$result=new java_cup.runtime.token(41);lexer.emit_error("Syntax Error");}return CUP$result;case 42:{CUP$result=new java_cup.runtime.symbol(20);}return CUP$result;case 41:{CUP$result=new java_cup.runtime.token(40);lhs_nt=(non_terminal)non_terms.get(((java_cup.runtime.str_token)CUP$stack.elementAt(CUP$top - 0)).str_val);if (lhs_nt == null) {if (lexer.error_count == 0) lexer.emit_error("LHS non terminal \"" + ((java_cup.runtime.str_token)CUP$stack.elementAt(CUP$top - 0)).str_val + "\" has not been declared");}new_rhs();}return CUP$result;case 40:{CUP$result=new java_cup.runtime.symbol(9);}return CUP$result;case 39:{CUP$result=new java_cup.runtime.symbol(9);}return CUP$result;case 38:{CUP$result=new java_cup.runtime.symbol(8);}return CUP$result;case 37:{CUP$result=new java_cup.runtime.symbol(8);}return CUP$result;case 36:{CUP$result=new java_cup.runtime.token(39);non_terminal nt=(non_terminal)non_terms.get(((java_cup.runtime.str_token)CUP$stack.elementAt(CUP$top - 0)).str_val);if (nt == null) {lexer.emit_error("Start non terminal \"" + ((java_cup.runtime.str_token)CUP$stack.elementAt(CUP$top - 0)).str_val + "\" has not been declared");} else {start_nt=nt;new_rhs();add_rhs_part(new symbol_part(start_nt));add_rhs_part(new symbol_part(terminal.EOF));emit.start_production=new production(non_terminal.START_nt,rhs_parts,rhs_pos);new_rhs();}}return CUP$result;case 35:{CUP$result=new java_cup.runtime.symbol(19);}return CUP$result;case 34:{CUP$result=new java_cup.runtime.symbol(19);}return CUP$result;case 33:{CUP$result=new java_cup.runtime.symbol(18);}return CUP$result;case 32:{CUP$result=new java_cup.runtime.symbol(18);}return CUP$result;case 31:{CUP$result=new java_cup.runtime.symbol(15);}return CUP$result;case 30:{CUP$result=new java_cup.runtime.token(38);multipart_name=new String();}return CUP$result;case 29:{CUP$result=new java_cup.runtime.symbol(15);}return CUP$result;case 28:{CUP$result=new java_cup.runtime.token(37);multipart_name=new String();}return CUP$result;case 27:{CUP$result=new java_cup.runtime.symbol(15);}return CUP$result;case 26:{CUP$result=new java_cup.runtime.token(36);multipart_name=new String();}return CUP$result;case 25:{CUP$result=new java_cup.runtime.symbol(15);}return CUP$result;case 24:{CUP$result=new java_cup.runtime.token(35);multipart_name=new String();}return CUP$result;case 23:{CUP$result=new java_cup.runtime.symbol(7);}return CUP$result;case 22:{CUP$result=new java_cup.runtime.symbol(7);}return CUP$result;case 21:{CUP$result=new java_cup.runtime.symbol(16);}return CUP$result;case 20:{CUP$result=new java_cup.runtime.symbol(16);emit.debug_grammar=multipart_name;multipart_name=new String();}return CUP$result;case 19:{CUP$result=new java_cup.runtime.symbol(14);}return CUP$result;case 18:{CUP$result=new java_cup.runtime.symbol(14);emit.scan_code=((java_cup.runtime.str_token)CUP$stack.elementAt(CUP$top - 1)).str_val;}return CUP$result;case 17:{CUP$result=new java_cup.runtime.symbol(13);}return CUP$result;case 16:{CUP$result=new java_cup.runtime.symbol(13);emit.init_code=((java_cup.runtime.str_token)CUP$stack.elementAt(CUP$top - 1)).str_val;}return CUP$result;case 15:{CUP$result=new java_cup.runtime.symbol(6);}return CUP$result;case 14:{CUP$result=new java_cup.runtime.symbol(6);emit.parser_code=((java_cup.runtime.str_token)CUP$stack.elementAt(CUP$top - 1)).str_val;}return CUP$result;case 13:{CUP$result=new java_cup.runtime.symbol(5);}return CUP$result;case 12:{CUP$result=new java_cup.runtime.symbol(5);emit.action_code=((java_cup.runtime.str_token)CUP$stack.elementAt(CUP$top - 1)).str_val;}return CUP$result;case 11:{CUP$result=new java_cup.runtime.symbol(4);}return CUP$result;case 10:{CUP$result=new java_cup.runtime.symbol(11);}return CUP$result;case 9:{CUP$result=new java_cup.runtime.token(34);emit.import_list.push(multipart_name);multipart_name=new String();}return CUP$result;case 8:{CUP$result=new java_cup.runtime.symbol(3);}return CUP$result;case 7:{CUP$result=new java_cup.runtime.symbol(3);}return CUP$result;case 6:{CUP$result=new java_cup.runtime.symbol(2);}return CUP$result;case 5:{CUP$result=new java_cup.runtime.symbol(2);}return CUP$result;case 4:{CUP$result=new java_cup.runtime.token(33);emit.package_name=multipart_name;multipart_name=new String();}return CUP$result;case 3:{CUP$result=new java_cup.runtime.symbol(1);}return CUP$result;case 2:{CUP$result=new java_cup.runtime.symbol(1);}return CUP$result;case 1:{CUP$result=new java_cup.runtime.token(32);symbols.put("error",new symbol_part(terminal.error));non_terms.put("$START",non_terminal.START_nt);}return CUP$result;case 0:{CUP$result=new java_cup.runtime.token(0);}CUP$parser.done_parsing();return CUP$result;default :throw new Exception("Invalid action number found in internal parse table");}}  }
class C{  private void expungeStaleEntries(){  Entry[] tab=table;  int len=tab.length;  for (int j=0; j < len; j++) {    Entry e=tab[j];    if (e != null && e.get() == null)     expungeStaleEntry(j);  }}  }
class C{  private void tryParseUrnImport(IDOMAttr attr){  if (!UiBinderXmlModelUtilities.isUiBinderElement(attr.getOwnerElement()) || !UiBinderConstants.XMLNS_NAMESPACE.equals(attr.getNamespaceURI()) || attr.getNodeValue() == null || !attr.getNodeValue().startsWith(UiBinderConstants.URN_IMPORT_NAMESPACE_BEGINNING)) {    return;  }  int urnImportLength=UiBinderConstants.URN_IMPORT_NAMESPACE_BEGINNING.length();  String packageName=attr.getNodeValue().substring(urnImportLength);  addReference(xmlReferenceLocation,new LogicalJavaElementReferenceLocation(new LogicalPackage(packageName)));  IPackageFragmentRoot[] packageFragmentRoots;  try {    packageFragmentRoots=javaProject.getAllPackageFragmentRoots();  } catch (  JavaModelException e) {    GWTPluginLog.logError(e,"Could not parse UiBinder urn:import attribute");    return;  }  for (  IPackageFragmentRoot packageFragmentRoot : packageFragmentRoots) {    IPackageFragment packageFragment=packageFragmentRoot.getPackageFragment(packageName);    if (JavaModelSearch.isValidElement(packageFragment)) {      return;    }  }  IRegion attrValueRegion=XmlUtilities.getAttributeValueRegion(attr);  if (attrValueRegion == null) {    return;  }  int offset=attrValueRegion.getOffset() + urnImportLength;  int length=attrValueRegion.getLength() - urnImportLength;  problemMarkerManager.setPackageUndefinedError(new Region(offset,length),packageName);}  }
class C{  private boolean startSymbolicCarry(final char[] ca,final int cLast,final int cFirst){  boolean carry=true;  for (int i=cLast; carry && i >= cFirst; i--) {    carry=false;switch (ca[i]) {case '0':      ca[i]='1';    break;case '1':  ca[i]='2';break;case '2':ca[i]='3';break;case '3':ca[i]='4';break;case '4':ca[i]='5';break;case '5':ca[i]='6';break;case '6':ca[i]='7';break;case '7':ca[i]='8';break;case '8':ca[i]='9';break;case '9':ca[i]='0';carry=true;break;}}return carry;}  }
class C{  protected void sequence_BitwiseANDExpression(ISerializationContext context,BinaryBitwiseExpression semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.BINARY_BITWISE_EXPRESSION__LHS) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.BINARY_BITWISE_EXPRESSION__LHS));    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.BINARY_BITWISE_EXPRESSION__OP) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.BINARY_BITWISE_EXPRESSION__OP));    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.BINARY_BITWISE_EXPRESSION__RHS) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.BINARY_BITWISE_EXPRESSION__RHS));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getBitwiseANDExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),semanticObject.getLhs());  feeder.accept(grammarAccess.getBitwiseANDExpressionAccess().getOpBitwiseANDOperatorParserRuleCall_1_0_0_1_0(),semanticObject.getOp());  feeder.accept(grammarAccess.getBitwiseANDExpressionAccess().getRhsEqualityExpressionParserRuleCall_1_1_0(),semanticObject.getRhs());  feeder.finish();}  }
class C{  public void reset(){  position=0;  limit=0;}  }
class C{  public ParseResult parseModule(IResource parseResource,IProgressMonitor monitor){  return parseModule(parseResource,monitor,true,true);}  }
class C{  public DImportKeyPairPkcs8(JFrame parent){  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);  initComponents();}  }
class C{  public static R1Interval fromPoint(double p){  return new R1Interval(p,p);}  }
class C{  public VideoStream(String streamStr){  String[] args=streamStr.split("&");  Map<String,String> argMap=new HashMap<String,String>();  for (  String arg : args) {    String[] argsValues=arg.split("=");    if (argsValues != null) {      if (argsValues.length >= 2) {        argMap.put(argsValues[0],argsValues[1]);      }    }  }  mUrl=argMap.get("url");}  }
class C{  public static void checkState(boolean expression){  if (!expression) {    throw new IllegalStateException();  }}  }
class C{  private Boolean visitTupleDiscardingOperator(ILogicalOperator op) throws AlgebricksException {  return visitTupleDiscardingOrCardinalityReduceOperator(op);}  }
class C{  protected JvmMemMgrPoolRelEntryMeta createJvmMemMgrPoolRelEntryMetaNode(String snmpEntryName,String tableName,SnmpMib mib,MBeanServer server){  return new JvmMemMgrPoolRelEntryMeta(mib,objectserver);}  }
class C{  public void indexLibrary(IPath path,IProject requestingProject,URL indexURL,final boolean updateIndex){  IndexLocation indexFile=null;  if (indexURL != null) {    if (IS_MANAGING_PRODUCT_INDEXES_PROPERTY) {      indexFile=computeIndexLocation(path,indexURL);    } else {      indexFile=IndexLocation.createIndexLocation(indexURL);    }  }  IndexRequest request=null;  boolean forceIndexUpdate=IS_MANAGING_PRODUCT_INDEXES_PROPERTY && updateIndex;  request=new AddJarFileToIndex(path,indexFile,this,forceIndexUpdate);  if (!isJobWaiting(request))   request(request);}  }
class C{  private boolean isNetworkConnected(String serialNumber,RPSiteArray siteArray){  URI foundStorageSystemURI=ConnectivityUtil.findStorageSystemBySerialNumber(serialNumber,_dbClient,StorageSystemType.BLOCK);  if (foundStorageSystemURI == null) {    _log.info(String.format("Could not find a registered storage system associated with serial number %s",serialNumber));    _log.info(String.format("No registered network connectivity found between storage system %s and RP site %s",serialNumber,siteArray.getRpInternalSiteName()));    return false;  }  ProtectionSystem rpSystem=_dbClient.queryObject(ProtectionSystem.class,siteArray.getRpProtectionSystem());  if (rpSystem == null) {    _log.error(String.format("Could not find a registered protection system associated with URI %s",siteArray.getRpProtectionSystem()));    _log.info(String.format("No registered network connectivity found between storage system %s and RP site %s",serialNumber,siteArray.getRpInternalSiteName()));    return false;  }  if (rpSystem.getSiteInitiators() == null) {    _log.error(String.format("Could not find initiators associated with protection system %s",rpSystem.getLabel()));    _log.info(String.format("No registered network connectivity found between storage system %s and RP site %s",serialNumber,siteArray.getRpInternalSiteName()));    return false;  }  if (rpSystem.getSiteInitiators().get(siteArray.getRpInternalSiteName()) == null) {    _log.error(String.format("Could not find initiators associated with protection system %s on RP cluster %s",rpSystem.getLabel(),siteArray.getRpInternalSiteName()));    _log.info(String.format("No registered network connectivity found between storage system %s and RP site %s",serialNumber,siteArray.getRpInternalSiteName()));    return false;  }  for (  String portWwn : rpSystem.getSiteInitiators().get(siteArray.getRpInternalSiteName())) {    Initiator initiator=ExportUtils.getInitiator(portWwn,_dbClient);    if (initiator == null) {      _log.error(String.format("Could not find initiator %s in the database, even though ProtectionSystem %s references it.",portWwn,rpSystem.getLabel()));    }    StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,foundStorageSystemURI);    if (storageSystem == null) {      _log.error(String.format("Could not find storage system %s in the database, even though ProtectionSystem %s references it.",foundStorageSystemURI,rpSystem.getLabel()));    }    if (ConnectivityUtil.isInitiatorConnectedToStorageSystem(initiator,storageSystem,null,_dbClient)) {      _log.info(String.format("Found initiator %s can be connected to storage system %s",initiator.getInitiatorPort(),serialNumber));      return true;    }  }  return false;}  }
class C{  private RequestTimeoutException(){}  }
class C{  public String formatMatch(Node root){  String result=String.format("%s",root);  if (patterns.length == 0) {    return result;  } else {    StringBuilder sb=new StringBuilder();    sb.append("(");    sb.append(result);    for (int input=0; input < patterns.length; input++) {      sb.append(" ");      sb.append(patterns[input].formatMatch(getInput(input,root)));    }    sb.append(")");    return sb.toString();  }}  }
class C{  private static Collection<IgniteRemoteStartSpecification> processHost(Map<String,Object> props,IgniteRemoteStartSpecification dfltSpec) throws IgniteCheckedException {  assert props != null;  assert dfltSpec != null;  if (props.get(HOST) == null)   throw new IgniteCheckedException("Host must be specified.");  Set<String> hosts=expandHost((String)props.get(HOST));  int port=props.get(PORT) != null ? (Integer)props.get(PORT) : dfltSpec.port();  String uname=props.get(UNAME) != null ? (String)props.get(UNAME) : dfltSpec.username();  String passwd=props.get(PASSWD) != null ? (String)props.get(PASSWD) : dfltSpec.password();  File key=props.get(KEY) != null ? (File)props.get(KEY) : dfltSpec.key();  int nodes=props.get(NODES) != null ? (Integer)props.get(NODES) : dfltSpec.nodes();  String igniteHome=props.get(IGNITE_HOME) != null ? (String)props.get(IGNITE_HOME) : dfltSpec.igniteHome();  String cfg=props.get(CFG) != null ? (String)props.get(CFG) : dfltSpec.configuration();  String script=props.get(SCRIPT) != null ? (String)props.get(SCRIPT) : dfltSpec.script();  if (port <= 0)   throw new IgniteCheckedException("Invalid port number: " + port);  if (nodes <= 0)   throw new IgniteCheckedException("Invalid number of nodes: " + nodes);  if (passwd == null && key == null)   throw new IgniteCheckedException("Password or private key file must be specified.");  if (passwd != null && key != null)   passwd=null;  Collection<IgniteRemoteStartSpecification> specs=new ArrayList<>(hosts.size());  for (  String host : hosts)   specs.add(new IgniteRemoteStartSpecification(host,port,uname,passwd,key,nodes,igniteHome,cfg,script,dfltSpec.logger()));  return specs;}  }
class C{  public Period toPeriod(PeriodType type){  return new Period(getStartMillis(),getEndMillis(),type,getChronology());}  }
class C{  public boolean isFragmentationUnit(){  return decodeNalUnitType == NalUnitType.FU_A || decodeNalUnitType == NalUnitType.FU_B;}  }
class C{  public CSVReader(Reader reader,char separator,char quotechar,int line){  this.br=new BufferedReader(reader);  this.separator=separator;  this.quotechar=quotechar;  this.skipLines=line;}  }
class C{  public void centerOnPointRel(double xrel,double yrel){  xrel=Math.max(0,xrel);  xrel=Math.min(1,xrel);  yrel=Math.max(0,yrel);  yrel=Math.min(1,yrel);  Point p=new Point((int)((double)boardSize.getWidth() * xrel) + HEX_W,(int)((double)boardSize.getHeight() * yrel) + HEX_H);  JScrollBar vscroll=scrollpane.getVerticalScrollBar();  vscroll.setValue(p.y - (vscroll.getVisibleAmount() / 2));  JScrollBar hscroll=scrollpane.getHorizontalScrollBar();  hscroll.setValue(p.x - (hscroll.getVisibleAmount() / 2));  repaint();}  }
class C{  public String toString(){  return mObj.toStringSimple();}  }
class C{  public static void stopRcsService(Context context){  if (sLogger.isActivated()) {    sLogger.debug("Stop RCS service");  }  context.stopService(new Intent(context,StartService.class));  context.stopService(new Intent(context,HttpsProvisioningService.class));  context.stopService(new Intent(context,RcsCoreService.class));}  }
class C{  public static boolean isHttpMethodAvailable(Method method){  return method.isAnnotationPresent(GET.class) || method.isAnnotationPresent(PUT.class) || method.isAnnotationPresent(POST.class)|| method.isAnnotationPresent(DELETE.class)|| method.isAnnotationPresent(HEAD.class)|| method.isAnnotationPresent(OPTIONS.class);}  }
class C{  protected EventListener remove(EventListener oldl){  if (oldl == a)   return b;  if (oldl == b)   return a;  EventListener a2=removeInternal(a,oldl);  EventListener b2=removeInternal(b,oldl);  if (a2 == a && b2 == b) {    return this;  }  return addInternal(a2,b2);}  }
class C{  private void useTitle(){  closeAction=CloseAction.TITLE;  setVisible(false);}  }
class C{  public TextSelection(IDocument document,int offset,int length){  if (ASSERT_INVLID_SELECTION_NULL) {    org.eclipse.jface.text.Assert.isLegal(offset >= 0);    org.eclipse.jface.text.Assert.isLegal(length >= 0);  }  fDocument=document;  fOffset=offset;  fLength=length;}  }
class C{  public static void storeImage(Bitmap image,File pictureFile){  if (pictureFile == null) {    Log.d(TAG,"Error creating media file, check storage permissions: ");    return;  }  try {    FileOutputStream fos=new FileOutputStream(pictureFile);    image.compress(Bitmap.CompressFormat.PNG,90,fos);    fos.close();  } catch (  FileNotFoundException e) {    Log.d(TAG,"File not found: " + e.getMessage());  }catch (  IOException e) {    Log.d(TAG,"Error accessing file: " + e.getMessage());  }}  }
class C{  @LogMessageDoc(level="ERROR",message="Could not decode action {action}",explanation="A static flow entry contained an invalid action",recommendation=LogMessageDoc.REPORT_CONTROLLER_BUG) public static String actionsToString(List<OFAction> actions,Logger log){  StringBuilder sb=new StringBuilder();  for (  OFAction a : actions) {    if (sb.length() > 0) {      sb.append(',');    }switch (a.getType()) {case OUTPUT:      sb.append(STR_OUTPUT + "=" + Integer.toString(((OFActionOutput)a).getPort().getPortNumber()));    break;case ENQUEUE:  long queue=((OFActionEnqueue)a).getQueueId();OFPort port=((OFActionEnqueue)a).getPort();sb.append(STR_ENQUEUE + "=" + Integer.toString(port.getPortNumber())+ ":0x"+ String.format("%02x",queue));break;case STRIP_VLAN:sb.append(STR_VLAN_STRIP);break;case POP_VLAN:sb.append(STR_VLAN_POP);break;case PUSH_VLAN:sb.append(STR_VLAN_PUSH + "=" + Integer.toString(((OFActionPushVlan)a).getEthertype().getValue()));break;case SET_VLAN_VID:sb.append(STR_VLAN_SET_VID + "=" + Short.toString(((OFActionSetVlanVid)a).getVlanVid().getVlan()));break;case SET_VLAN_PCP:sb.append(STR_VLAN_SET_PCP + "=" + Byte.toString(((OFActionSetVlanPcp)a).getVlanPcp().getValue()));break;case SET_QUEUE:sb.append(STR_QUEUE_SET + "=" + Long.toString(((OFActionSetQueue)a).getQueueId()));case SET_DL_SRC:sb.append(STR_DL_SRC_SET + "=" + ((OFActionSetDlSrc)a).getDlAddr().toString());break;case SET_DL_DST:sb.append(STR_DL_DST_SET + "=" + ((OFActionSetDlDst)a).getDlAddr().toString());break;case SET_NW_ECN:sb.append(STR_NW_ECN_SET + "=" + Byte.toString(((OFActionSetNwEcn)a).getNwEcn().getEcnValue()));break;case SET_NW_TOS:sb.append(STR_NW_TOS_SET + "=" + Short.toString(((OFActionSetNwTos)a).getNwTos()));break;case SET_NW_TTL:sb.append(STR_NW_TTL_SET + "=" + Short.toString(((OFActionSetNwTtl)a).getNwTtl()));break;case DEC_NW_TTL:sb.append(STR_NW_TTL_DEC);break;case SET_MPLS_LABEL:sb.append(STR_MPLS_LABEL_SET + "=" + Long.toString(((OFActionSetMplsLabel)a).getMplsLabel()));break;case SET_MPLS_TC:sb.append(STR_MPLS_TC_SET + "=" + Short.toString(((OFActionSetMplsTc)a).getMplsTc()));break;case SET_MPLS_TTL:sb.append(STR_MPLS_TTL_SET + "=" + Short.toString(((OFActionSetMplsTtl)a).getMplsTtl()));break;case DEC_MPLS_TTL:sb.append(STR_MPLS_TTL_DEC);break;case PUSH_MPLS:sb.append(STR_MPLS_PUSH + "=" + Integer.toString(((OFActionPushMpls)a).getEthertype().getValue()));break;case POP_MPLS:sb.append(STR_MPLS_POP + "=" + Integer.toString(((OFActionPopMpls)a).getEthertype().getValue()));break;case SET_NW_SRC:sb.append(STR_NW_SRC_SET + "=" + ((OFActionSetNwSrc)a).getNwAddr().toString());break;case SET_NW_DST:sb.append(STR_NW_DST_SET + "=" + ((OFActionSetNwDst)a).getNwAddr().toString());break;case SET_TP_SRC:sb.append(STR_TP_SRC_SET + "=" + ((OFActionSetTpSrc)a).getTpPort().toString());break;case SET_TP_DST:sb.append(STR_TP_DST_SET + "=" + ((OFActionSetTpDst)a).getTpPort().toString());break;case COPY_TTL_IN:sb.append(STR_TTL_IN_COPY);break;case COPY_TTL_OUT:sb.append(STR_TTL_OUT_COPY);break;case PUSH_PBB:sb.append(STR_PBB_PUSH + "=" + Integer.toString(((OFActionPushPbb)a).getEthertype().getValue()));break;case POP_PBB:sb.append(STR_PBB_POP);break;case EXPERIMENTER:sb.append(STR_EXPERIMENTER + "=" + Long.toString(((OFActionExperimenter)a).getExperimenter()));break;case GROUP:sb.append(STR_GROUP + "=" + Integer.toString(((OFActionGroup)a).getGroup().getGroupNumber()));break;case SET_FIELD:log.debug("Got Set-Field action. Setting " + ((OFActionSetField)a));if (((OFActionSetField)a).getField() instanceof OFOxmArpOp) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_ARP_OPCODE+ MatchUtils.SET_FIELD_DELIM+ Integer.toString(((OFOxmArpOp)((OFActionSetField)a).getField()).getValue().getOpcode()));} else if (((OFActionSetField)a).getField() instanceof OFOxmArpSha) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_ARP_SHA+ MatchUtils.SET_FIELD_DELIM+ ((OFOxmArpSha)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmArpTha) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_ARP_DHA+ MatchUtils.SET_FIELD_DELIM+ ((OFOxmArpTha)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmArpSpa) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_ARP_SPA+ MatchUtils.SET_FIELD_DELIM+ ((OFOxmArpSpa)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmArpTpa) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_ARP_DPA+ MatchUtils.SET_FIELD_DELIM+ ((OFOxmArpTpa)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv6NdSll) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_IPV6_ND_SSL+ MatchUtils.SET_FIELD_DELIM+ ((OFOxmIpv6NdSll)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv6NdTll) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_IPV6_ND_TTL+ MatchUtils.SET_FIELD_DELIM+ ((OFOxmIpv6NdTll)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv6NdTarget) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_IPV6_ND_TARGET+ MatchUtils.SET_FIELD_DELIM+ ((OFOxmIpv6NdTarget)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmEthType) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_DL_TYPE+ MatchUtils.SET_FIELD_DELIM+ Integer.toString(((OFOxmEthType)((OFActionSetField)a).getField()).getValue().getValue()));} else if (((OFActionSetField)a).getField() instanceof OFOxmEthSrc) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_DL_SRC+ MatchUtils.SET_FIELD_DELIM+ ((OFOxmEthSrc)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmEthDst) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_DL_DST+ MatchUtils.SET_FIELD_DELIM+ ((OFOxmEthDst)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmVlanVid) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_DL_VLAN+ MatchUtils.SET_FIELD_DELIM+ Short.toString(((OFOxmVlanVid)((OFActionSetField)a).getField()).getValue().getVlan()));} else if (((OFActionSetField)a).getField() instanceof OFOxmVlanPcp) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_DL_VLAN_PCP+ MatchUtils.SET_FIELD_DELIM+ Byte.toString(((OFOxmVlanPcp)((OFActionSetField)a).getField()).getValue().getValue()));} else if (((OFActionSetField)a).getField() instanceof OFOxmIcmpv4Code) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_ICMP_CODE+ MatchUtils.SET_FIELD_DELIM+ Short.toString(((OFOxmIcmpv4Code)((OFActionSetField)a).getField()).getValue().getCode()));} else if (((OFActionSetField)a).getField() instanceof OFOxmIcmpv4Type) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_ICMP_TYPE+ MatchUtils.SET_FIELD_DELIM+ Short.toString(((OFOxmIcmpv4Type)((OFActionSetField)a).getField()).getValue().getType()));} else if (((OFActionSetField)a).getField() instanceof OFOxmIcmpv6Code) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_ICMPV6_CODE+ MatchUtils.SET_FIELD_DELIM+ Short.toString(((OFOxmIcmpv6Code)((OFActionSetField)a).getField()).getValue().getRaw()));} else if (((OFActionSetField)a).getField() instanceof OFOxmIcmpv6Type) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_ICMPV6_TYPE+ MatchUtils.SET_FIELD_DELIM+ Short.toString(((OFOxmIcmpv6Type)((OFActionSetField)a).getField()).getValue().getRaw()));} else if (((OFActionSetField)a).getField() instanceof OFOxmIpProto) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_NW_PROTO+ MatchUtils.SET_FIELD_DELIM+ Short.toString(((OFOxmIpProto)((OFActionSetField)a).getField()).getValue().getIpProtocolNumber()));} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv4Src) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_NW_SRC+ MatchUtils.SET_FIELD_DELIM+ ((OFOxmIpv4Src)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv4Dst) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_NW_DST+ MatchUtils.SET_FIELD_DELIM+ ((OFOxmIpv4Dst)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv6Src) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_IPV6_SRC+ MatchUtils.SET_FIELD_DELIM+ ((OFOxmIpv6Src)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv6Dst) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_IPV6_DST+ MatchUtils.SET_FIELD_DELIM+ ((OFOxmIpv6Dst)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv6Flabel) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_IPV6_FLOW_LABEL+ MatchUtils.SET_FIELD_DELIM+ ((OFOxmIpv6Flabel)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpEcn) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_NW_ECN+ MatchUtils.SET_FIELD_DELIM+ Byte.toString(((OFOxmIpEcn)((OFActionSetField)a).getField()).getValue().getEcnValue()));} else if (((OFActionSetField)a).getField() instanceof OFOxmIpDscp) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_NW_DSCP+ MatchUtils.SET_FIELD_DELIM+ Byte.toString(((OFOxmIpDscp)((OFActionSetField)a).getField()).getValue().getDscpValue()));} else if (((OFActionSetField)a).getField() instanceof OFOxmTcpSrc) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_TCP_SRC+ MatchUtils.SET_FIELD_DELIM+ Integer.toString(((OFOxmTcpSrc)((OFActionSetField)a).getField()).getValue().getPort()));} else if (((OFActionSetField)a).getField() instanceof OFOxmTcpDst) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_TCP_DST+ MatchUtils.SET_FIELD_DELIM+ Integer.toString(((OFOxmTcpDst)((OFActionSetField)a).getField()).getValue().getPort()));} else if (((OFActionSetField)a).getField() instanceof OFOxmUdpSrc) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_UDP_SRC+ MatchUtils.SET_FIELD_DELIM+ Integer.toString(((OFOxmUdpSrc)((OFActionSetField)a).getField()).getValue().getPort()));} else if (((OFActionSetField)a).getField() instanceof OFOxmUdpDst) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_UDP_DST+ MatchUtils.SET_FIELD_DELIM+ Integer.toString(((OFOxmUdpDst)((OFActionSetField)a).getField()).getValue().getPort()));} else if (((OFActionSetField)a).getField() instanceof OFOxmSctpSrc) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_SCTP_SRC+ MatchUtils.SET_FIELD_DELIM+ Integer.toString(((OFOxmSctpSrc)((OFActionSetField)a).getField()).getValue().getPort()));} else if (((OFActionSetField)a).getField() instanceof OFOxmSctpDst) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_SCTP_DST+ MatchUtils.SET_FIELD_DELIM+ Integer.toString(((OFOxmSctpDst)((OFActionSetField)a).getField()).getValue().getPort()));} else if (((OFActionSetField)a).getField() instanceof OFOxmMplsLabel) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_MPLS_LABEL+ MatchUtils.SET_FIELD_DELIM+ Long.toString(((OFOxmMplsLabel)((OFActionSetField)a).getField()).getValue().getValue()));} else if (((OFActionSetField)a).getField() instanceof OFOxmMplsTc) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_MPLS_TC+ MatchUtils.SET_FIELD_DELIM+ Short.toString(((OFOxmMplsTc)((OFActionSetField)a).getField()).getValue().getValue()));} else if (((OFActionSetField)a).getField() instanceof OFOxmMetadata) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_METADATA+ MatchUtils.SET_FIELD_DELIM+ Long.toString(((OFOxmMetadata)((OFActionSetField)a).getField()).getValue().getValue().getValue()));} else {log.error("Could not decode Set-Field action field: {}",((OFActionSetField)a));}break;default :log.error("Could not decode action: {}",a);break;}}return sb.toString();}  }
class C{  @Override public boolean equals(Object o){  if (this == o) {    return true;  }  if (!(o instanceof Address)) {    return false;  }  final Address address1=(Address)o;  return this.hashCode() == address1.hashCode();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.CATCH_VARIABLE__BINDING_PATTERN:    setBindingPattern((BindingPattern)null);  return;}super.eUnset(featureID);}  }
class C{  public static double normalizeBearing(double bearing){  if (Double.isNaN(bearing) || Double.isInfinite(bearing))   return Double.NaN;  double bearingResult=bearing % 360;  if (bearingResult < 0)   bearingResult+=360;  return bearingResult;}  }
class C{  public void debug(String s){  if (DEBUG) {    System.out.println((debugCounter++) + ": " + s);  }}  }
class C{  public byte[] generate64BitHashId() throws CryptoException {  try {    DERBitString publicKeyBitString=encodePublicKeyAsBitString(publicKey);    byte[] hash=DigestUtil.getMessageDigest(publicKeyBitString.getBytes(),DigestType.SHA1);    byte[] subHash=Arrays.copyOfRange(hash,12,20);    subHash[0]&=0x0F;    subHash[0]|=0x40;    return subHash;  } catch (  IOException ex) {    throw new CryptoException(res.getString("NoGenerateKeyIdentifier.exception.message"),ex);  }}  }
class C{  public MediaConfig createChannelImageAttachment(String file,MediaConfig config){  config.addCredentials(this);  String xml=POSTIMAGE(this.url + "/create-channel-attachment",file,config.name,config.toXML());  Element root=parse(xml);  if (root == null) {    return null;  }  try {    MediaConfig media=new MediaConfig();    media.parseXML(root);    return media;  } catch (  Exception exception) {    this.exception=SDKException.parseFailure(exception);    throw this.exception;  }}  }
class C{  public void restartGame(){}  }
class C{  public void removePanListener(PanListener listener){  if (mPan != null) {    mPan.removePanListener(listener);  }}  }
class C{  public MemoryNotificationInfo(String poolName,MemoryUsage usage,long count){  if (poolName == null) {    throw new NullPointerException("Null poolName");  }  if (usage == null) {    throw new NullPointerException("Null usage");  }  this.poolName=poolName;  this.usage=usage;  this.count=count;}  }
class C{  private void readObject(){}  }
class C{  public boolean isNoSuchObjectValue(){  return (tag == SnmpDataTypeEnums.errNoSuchObjectTag);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:20.139 -0400",hash_original_method="A039A94973265D95AF9C2DFD00E2C3B5",hash_generated_method="6C9EE81C7AF2B1F55666053A7C3BDC7D") public long nextLong(long n){  if (n <= 0)   throw new IllegalArgumentException("n must be positive");  long offset=0;  while (n >= Integer.MAX_VALUE) {    int bits=next(2);    long half=n >>> 1;    long nextn=((bits & 2) == 0) ? half : n - half;    if ((bits & 1) == 0)     offset+=n - nextn;    n=nextn;  }  return offset + nextInt((int)n);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static String unescapeXml(String s){  initializeEscapeMap();  if (!initializeUnescapePattern()) {    return s;  }  if (s == null || s.length() == 0) {    return s;  }  if (s.contains("\\u")) {    StringBuffer sUnescaped=new StringBuffer();    Matcher m=unescapePattern.matcher(s);    while (m.find() == true) {      String slashes=m.group(1);      String digits=m.group(3);      int escapeCode;      try {        escapeCode=Integer.parseInt(digits,16);      } catch (      NumberFormatException nfe) {        System.err.println("Impossible error: escape sequence '" + digits + "' is not a valid hex number!  "+ "Exception: "+ nfe.toString());        return s;      }      if (slashes != null && slashes.length() % 2 == 0 && isInvalidXMLCharacter(escapeCode)) {        Character escapedSequence=Character.valueOf((char)escapeCode);        m.appendReplacement(sUnescaped,slashes + slashes + escapedSequence.toString());      }    }    m.appendTail(sUnescaped);    s=sUnescaped.toString();  }  return StringEscapeUtils.unescapeXml(s);}  }
class C{  public MemLRUEvictionControllerDUnitTest(){  super();}  }
class C{  private int[] generateColors(int from,int to,int count){  int[] palette=new int[count];  float[] hsvFrom=new float[3];  float[] hsvTo=new float[3];  Color.colorToHSV(from,hsvFrom);  Color.colorToHSV(to,hsvTo);  float step=(hsvTo[0] - hsvFrom[0]) / count;  for (int i=0; i < count; i++) {    palette[i]=Color.HSVToColor(hsvFrom);    hsvFrom[0]+=step;  }  return palette;}  }
class C{  @RequestProcessing(value="/admin/order/{orderId}/refund",method=HTTPRequestMethod.POST) @Before(adviceClass={StopwatchStartAdvice.class,MallAdminCheck.class,CSRFCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void refundOrder(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response,final String orderId) throws Exception {  context.renderJSON().renderFalseResult();  final JSONObject order=orderQueryService.getOrder(orderId);  if (null == order) {    context.renderMsg("Order not found");    return;  }  if (Order.ORDER_STATUS_C_INIT != order.optInt(Order.ORDER_STATUS)) {    context.renderMsg("Order has been handled");    return;  }  final JSONObject handler=(JSONObject)request.getAttribute(User.USER);  order.put(Order.ORDER_CONFIRM_TIME,System.currentTimeMillis());  order.put(Order.ORDER_HANDLER_ID,handler.optString(Keys.OBJECT_ID));  order.put(Order.ORDER_STATUS,Order.ORDER_STATUS_C_REFUNDED);  orderMgmtService.updateOrder(order);  final String buyerId=order.optString(Order.ORDER_BUYER_ID);  final int point=order.optInt(Order.ORDER_POINT);  pointtransferMgmtService.transfer("sys",buyerId,Pointtransfer.TRANSFER_TYPE_C_REFUND_PRODUCT,point,orderId);  context.renderTrueResult().renderMsg(langPropsService.get("refundSuccLabel"));}  }
class C{  @Override public void respond(String response){  getChannel().send().message(getUser(),response);}  }
class C{  public void invalidateLayout(Container c){}  }
class C{  public static void w(String msg,Throwable thr){  if (BuildConfig.DEBUG)   android.util.Log.w(TAG,buildMessage(msg),thr);}  }
class C{  public void removeMapElementState(MapElementState[] state){  for (int i=0; i < state.length; ++i) {    removeMapElementState(state[i]);  }}  }
class C{  public void forward(int length){  if (this.pointer + length + 1 >= this.buffer.length()) {    update();  }  char ch=0;  for (int i=0; i < length; i++) {    ch=this.buffer.charAt(this.pointer);    this.pointer++;    this.index++;    if (Constant.LINEBR.has(ch) || (ch == '\r' && buffer.charAt(pointer) != '\n')) {      this.line++;      this.column=0;    } else     if (ch != '\uFEFF') {      this.column++;    }  }}  }
class C{  public ObjectBuffer(ObjectBufferConsumer target,int capacity){  this.target=target;  this.capacity=capacity;  this.elements=new Object[capacity];  this.list=new ObjectArrayList(elements);  this.size=0;}  }
class C{  public void readMemory(final Address address,final int size) throws DebugException {  try {    m_debugger.readMemory(new CAddress(address.toLong()),size);  } catch (  final DebugExceptionWrapper e) {    throw new DebugException(e);  }}  }
class C{  public static Test suite(){  return (new TestSuite(LinkTypeAttributeITCase.class));}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void forceRewriteExif(String filename,Collection<ExifTag> tags) throws FileNotFoundException, IOException {  if (!rewriteExif(filename,tags)) {    ExifData tempData=mData;    mData=new ExifData(DEFAULT_BYTE_ORDER);    FileInputStream is=null;    ByteArrayOutputStream bytes=null;    try {      is=new FileInputStream(filename);      bytes=new ByteArrayOutputStream();      doExifStreamIO(is,bytes);      byte[] imageBytes=bytes.toByteArray();      readExif(imageBytes);      setTags(tags);      writeExif(imageBytes,filename);    } catch (    IOException e) {      closeSilently(is);      throw e;    } finally {      is.close();      mData=tempData;    }  }}  }
class C{  public static PrintRequestAttributeSet synchronizedView(PrintRequestAttributeSet attributeSet){  if (attributeSet == null) {    throw new NullPointerException();  }  return new SynchronizedPrintRequestAttributeSet(attributeSet);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  private void syncSetting(WebSettings settings){  settings.setGeolocationEnabled(enableGeolocation());  settings.setJavaScriptEnabled(enableJavascript());  settings.setLightTouchEnabled(enableLightTouch());  settings.setNavDump(enableNavDump());  settings.setDefaultTextEncodingName(getDefaultTextEncoding());  settings.setMinimumFontSize(getMinimumFontSize());  settings.setMinimumLogicalFontSize(getMinimumFontSize());  settings.setTextZoom(getTextZoom());  settings.setLayoutAlgorithm(getLayoutAlgorithm());  settings.setJavaScriptCanOpenWindowsAutomatically(!blockPopupWindows());  settings.setLoadsImagesAutomatically(loadImages());  settings.setLoadWithOverviewMode(loadPageInOverviewMode());  settings.setSavePassword(rememberPasswords());  settings.setUseWideViewPort(isWideViewport());  settings.setDoNotTrack(doNotTrack());  settings.setNightModeEnabled(isNightModeEnabled());  settings.setMediaPlaybackRequiresUserGesture(false);  WebSettings settingsClassic=(WebSettings)settings;  settingsClassic.setHardwareAccelSkiaEnabled(isSkiaHardwareAccelerated());  settingsClassic.setShowVisualIndicator(enableVisualIndicator());  settingsClassic.setForceUserScalable(forceEnableUserScalable());  settingsClassic.setDoubleTapZoom(getDoubleTapZoom());  settingsClassic.setAutoFillEnabled(isAutofillEnabled());  boolean useInverted=useInvertedRendering();  settingsClassic.setProperty(WebViewProperties.gfxInvertedScreen,useInverted ? "true" : "false");  if (useInverted) {    settingsClassic.setProperty(WebViewProperties.gfxInvertedScreenContrast,Float.toString(getInvertedContrast()));  }  if (isDebugEnabled()) {    settingsClassic.setProperty(WebViewProperties.gfxEnableCpuUploadPath,enableCpuUploadPath() ? "true" : "false");  }  settingsClassic.setLinkPrefetchEnabled(mLinkPrefetchAllowed);}  }
class C{  void validateOustandingInjections(Errors errors){  for (  InjectableReference<?> reference : pendingInjection.values()) {    try {      reference.validate(errors);    } catch (    ErrorsException e) {      errors.merge(e.getErrors());    }  }}  }
class C{  public MemcacheClientBuilder<V> withAddress(final String hostname){  return withAddress(HostAndPort.fromParts(hostname,DEFAULT_PORT));}  }
class C{  public boolean write(Type type,Object value,NodeMap node,Map map){  Class actual=value.getClass();  Class expect=type.getType();  Class real=actual;  if (actual.isArray()) {    real=writeArray(expect,value,node);  }  if (actual != expect) {    node.put(label,real.getName());  }  return false;}  }
class C{  void pushInt(int i){switch (i) {case -1:    mv.visitInsn(ICONST_M1);  return;case 0:mv.visitInsn(ICONST_0);return;case 1:mv.visitInsn(ICONST_1);return;case 2:mv.visitInsn(ICONST_2);return;case 3:mv.visitInsn(ICONST_3);return;case 4:mv.visitInsn(ICONST_4);return;case 5:mv.visitInsn(ICONST_5);return;}if (i >= Byte.MIN_VALUE && i <= Byte.MAX_VALUE) {mv.visitIntInsn(BIPUSH,i);return;}if (i >= Short.MIN_VALUE && i <= Short.MAX_VALUE) {mv.visitIntInsn(SIPUSH,i);return;}mv.visitLdcInsn(Integer.valueOf(i));}  }
class C{  public void putBlockHeightRelative(int i,boolean b){  if (b)   masks[i]|=BLOCK_HEIGHT_RELATIVE_MASK; else   masks[i]&=~BLOCK_HEIGHT_RELATIVE_MASK;}  }
class C{  public KeyManagerImpl(KeyStore keyStore,char[] pwd){  this.hash=new Hashtable<String,PrivateKeyEntry>();  final Enumeration<String> aliases;  try {    aliases=keyStore.aliases();  } catch (  KeyStoreException e) {    return;  }  for (; aliases.hasMoreElements(); ) {    final String alias=aliases.nextElement();    try {      if (keyStore.entryInstanceOf(alias,KeyStore.PrivateKeyEntry.class)) {        final KeyStore.PrivateKeyEntry entry=(KeyStore.PrivateKeyEntry)keyStore.getEntry(alias,new KeyStore.PasswordProtection(pwd));        hash.put(alias,entry);      }    } catch (    KeyStoreException e) {      continue;    }catch (    UnrecoverableEntryException e) {      continue;    }catch (    NoSuchAlgorithmException e) {      continue;    }  }}  }
class C{  public static float floor(float fValue){  return (float)Math.floor(fValue);}  }
class C{  public List<ManagedResource> cleanupBridgeClientResources(String clientId){  List<ManagedResource> returnedResources=new ArrayList<ManagedResource>();  String compatibleId="id_" + MBeanUtil.makeCompliantMBeanNameProperty(clientId);synchronized (this.managedStatisticsResourcesMap) {    Set<Entry<StatResource,StatisticResourceJmxImpl>> entrySet=this.managedStatisticsResourcesMap.entrySet();    for (Iterator<Entry<StatResource,StatisticResourceJmxImpl>> it=entrySet.iterator(); it.hasNext(); ) {      Entry<StatResource,StatisticResourceJmxImpl> entry=it.next();      StatisticResourceJmxImpl resource=entry.getValue();      if (resource.getMBeanName().contains(compatibleId)) {        it.remove();        returnedResources.add(resource);      }    }  }  return returnedResources;}  }
class C{  @Override public double sum(){  return convertFromNS(histogram.sum());}  }
class C{  public void remove(Layer child){  int index=findChild(child,child.depth());  if (index < 0) {    throw new UnsupportedOperationException("Could not remove Layer because it is not a child of the GroupLayer " + "[group=" + this + ", layer="+ child+ "]");  }  remove(index);}  }
class C{  public static BigDecimal byteToBigDecimal(byte[] raw){  int scale=(raw[0] & 0xFF);  byte[] unscale=new byte[raw.length - 1];  System.arraycopy(raw,1,unscale,0,unscale.length);  BigInteger sig=new BigInteger(unscale);  return new BigDecimal(sig,scale);}  }
class C{  protected boolean isTV(){  final Context context=mContext.getApplicationContext();  UiModeManager manager=(UiModeManager)context.getSystemService(Context.UI_MODE_SERVICE);  return manager.getCurrentModeType() == Configuration.UI_MODE_TYPE_TELEVISION;}  }
class C{  public boolean isImplicitResponseType(){  return authorizationRequest.getResponseTypes().contains(OIDCConstants.TOKEN);}  }
class C{  private <T>void concurrentIncrement(T key){  ConcurrentMap<T,Integer> nodeLoc=ignite.cluster().nodeLocalMap();  Integer cntr=nodeLoc.get(key);  if (cntr == null)   cntr=nodeLoc.putIfAbsent(key,1);  if (cntr != null) {    while (!nodeLoc.replace(key,cntr,cntr + 1)) {      cntr=nodeLoc.get(key);      assert cntr != null;    }  }}  }
class C{  public static Simulation fromXml(InputStream stream) throws ParserConfigurationException, SAXException, IOException {  return XmlReader.fromXml(new InputSource(stream));}  }
class C{  protected String paramString(){  String paintBorderString=(paintBorder ? "true" : "false");  String marginString=(margin != null ? margin.toString() : "");  String floatableString=(floatable ? "true" : "false");  String orientationString=(orientation == HORIZONTAL ? "HORIZONTAL" : "VERTICAL");  return super.paramString() + ",floatable=" + floatableString+ ",margin="+ marginString+ ",orientation="+ orientationString+ ",paintBorder="+ paintBorderString;}  }
class C{  private Ignite startGridNoOptimize(int idx) throws Exception {  return startGridNoOptimize(getTestGridName(idx));}  }
class C{  public Builder delayBeforeLoading(int delayInMillis){  this.delayBeforeLoading=delayInMillis;  return this;}  }
class C{  public static void downloadFile(Context context,String url,String path,String filename){  Log.i("Slicer","Downloading " + filename);  DownloadManager.Request request=new DownloadManager.Request(Uri.parse("http:/" + url + filename));  request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_HIDDEN);  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {    request.allowScanningByMediaScanner();  }  File extra=new File(path + filename);  if (extra.exists()) {    extra.delete();  }  request.setDestinationUri(Uri.parse("file://" + path + filename));  DownloadManager manager=(DownloadManager)context.getSystemService(Context.DOWNLOAD_SERVICE);  manager.enqueue(request);}  }
class C{  public long upperBound(){  return (Long)super.getRequiredProperty(Annotations.UPPER_BOUND);}  }
class C{  public void visitVarInsn(int opcode,int var){  if (mv != null) {    mv.visitVarInsn(opcode,var);  }}  }
class C{  private Router createRoutes(){  final Router hystrixRouter=Router.router(vertx);  hystrixRouter.get("/proxy.stream").handler(HystrixDashboardProxyConnectionHandler.create());  hystrixRouter.get("/eureka").handler(HystrixDashboardProxyEurekaAppsListingHandler.create(vertx));  hystrixRouter.route("/*").handler(StaticHandler.create().setCachingEnabled(true).setCacheEntryTimeout(1000L * 60 * 60* 24));  final Router mainRouter=Router.router(vertx);  mainRouter.route("/hystrix-dashboard").handler(null);  mainRouter.mountSubRouter("/hystrix-dashboard",hystrixRouter);  return mainRouter;}  }
class C{  public void performMouseClicked(java.awt.event.MouseEvent e){  if (e.isMetaDown() || e.isAltDown()) {    return;  }  if (getSignalHead() == null) {    log.error("No turnout connection, can't process click");    return;  }switch (clickMode) {case 0:switch (getSignalHead().getAppearance()) {case jmri.SignalHead.RED:case jmri.SignalHead.FLASHRED:      getSignalHead().setAppearance(jmri.SignalHead.YELLOW);    break;case jmri.SignalHead.YELLOW:case jmri.SignalHead.FLASHYELLOW:  getSignalHead().setAppearance(jmri.SignalHead.GREEN);break;case jmri.SignalHead.GREEN:case jmri.SignalHead.FLASHGREEN:getSignalHead().setAppearance(jmri.SignalHead.RED);break;default :getSignalHead().setAppearance(jmri.SignalHead.RED);break;}return;case 1:getSignalHead().setLit(!getSignalHead().getLit());return;case 2:getSignalHead().setHeld(!getSignalHead().getHeld());return;case 3:SignalHead sh=getSignalHead();int[] states=sh.getValidStates();int state=sh.getAppearance();for (int i=0; i < states.length; i++) {if (state == states[i]) {i++;if (i >= states.length) {i=0;}state=states[i];break;}}sh.setAppearance(state);if (log.isDebugEnabled()) {log.debug("Set state= " + state);}return;default :log.error("Click in mode " + clickMode);}}  }
class C{  public static final double[][] transposeTimesTranspose(final double[][] m1,final double[][] m2){  assert (m1.length == getColumnDimensionality(m2)) : ERR_MATRIX_INNERDIM;  final double[][] re=new double[getColumnDimensionality(m1)][m2.length];  final double[] Acolj=new double[m1.length];  for (int j=0; j < re.length; j++) {    for (int k=0; k < m1.length; k++) {      Acolj[k]=m1[k][j];    }    final double[] Xrow=re[j];    for (int i=0; i < m2.length; i++) {      final double[] Browi=m2[i];      double s=0;      for (int k=0; k < m1.length; k++) {        s+=Browi[k] * Acolj[k];      }      Xrow[i]=s;    }  }  return re;}  }
class C{  @SafeVarargs public static <E>Vector<E> vectort(final E... elements){  final Vector<E> v=new Vector<>(elements.length);  Collections.addAll(v,elements);  return v;}  }
class C{  public void ecef2enu(double ecefVector[],double latitude,double longitude,double enuVector[]){  double temp[][]=new double[3][3];  double slat=Math.sin(latitude);  double clat=Math.cos(latitude);  double slon=Math.sin(longitude);  double clon=Math.cos(longitude);  temp[0][0]=-slon;  temp[0][1]=clon;  temp[0][2]=0.0;  temp[1][0]=-clon * slat;  temp[1][1]=-slon * slat;  temp[1][2]=clat;  temp[2][0]=clon * clat;  temp[2][1]=slon * clat;  temp[2][2]=slat;  for (int j=0; j < 3; ++j) {    enuVector[j]=0.0;    for (int i=0; i < 3; i++) {      enuVector[j]+=temp[j][i] * ecefVector[i];    }  }}  }
class C{  public ReadRequest(String path){  this(null,new LwM2mPath(path));}  }
class C{  public static double log(final double x){  assert x >= 0 && !Double.isInfinite(x) && !Double.isNaN(x);  if (x == 0.0) {    return Double.NEGATIVE_INFINITY;  }  final long t=Double.doubleToRawLongBits(x);  final long lg=(t >>> EXPONENT_OFFSET) - EXPONENT_BIAS;  final int mantissa=(int)(t >> (EXPONENT_OFFSET - BITS));  final double mlg=LOG_TABLE[mantissa & MASK];  return mlg + lg * LN2;}  }
class C{  private void processElementUniform(GeneratorSingleCluster cluster,Node cur){  double min=0.0;  double max=1.0;  String minstr=((Element)cur).getAttribute(ATTR_MIN);  if (minstr != null && minstr.length() > 0) {    min=ParseUtil.parseDouble(minstr);  }  String maxstr=((Element)cur).getAttribute(ATTR_MAX);  if (maxstr != null && maxstr.length() > 0) {    max=ParseUtil.parseDouble(maxstr);  }  Random random=cluster.getNewRandomGenerator();  Distribution generator=new UniformDistribution(min,max,random);  cluster.addGenerator(generator);  XMLNodeIterator iter=new XMLNodeIterator(cur.getFirstChild());  while (iter.hasNext()) {    Node child=iter.next();    if (child.getNodeType() == Node.ELEMENT_NODE) {      LOG.warning("Unknown element in XML specification file: " + child.getNodeName());    }  }}  }
class C{  public static String unescapeStep(String step){  if (step == null)   return ("");  int nchars=step.length();  if (nchars < 2) {    return (step);  }  char[] stepchars=step.toCharArray();  if ((stepchars[0] != SQL_DELIMITER) || (stepchars[nchars - 1] != SQL_DELIMITER))   return (step);  int srcpos=1;  int destpos=0;  while (srcpos < (nchars - 1)) {    char ch=stepchars[srcpos++];    if (ch == ESCAPE_CHAR) {      ch=stepchars[srcpos];switch (ch) {case '\\':        stepchars[destpos++]='\\';      ++srcpos;    break;case '"':  stepchars[destpos++]='"';++srcpos;break;case 'n':stepchars[destpos++]='\n';++srcpos;break;case 'r':stepchars[destpos++]='\r';++srcpos;break;case 't':stepchars[destpos++]='\t';++srcpos;break;case 'u':String hexDigits="0123456789ABCDEFabcdef";int xpos;int hexchar=0;int offset=srcpos;for (xpos=0; xpos < 4; ++xpos) {if (++offset >= nchars) break;int dig=hexDigits.indexOf(stepchars[offset]);if (dig < 0) break;if (dig >= 16) dig-=6;hexchar=(hexchar << 4) | dig;}if (xpos == 4) {stepchars[destpos++]=(char)hexchar;srcpos+=(xpos + 1);break;}default :stepchars[destpos++]=ESCAPE_CHAR;continue;}} else if (ch == '\'') {ch=stepchars[srcpos];if (ch == '\'') ++srcpos;stepchars[destpos++]='\'';} else {stepchars[destpos++]=ch;}}return (new String(stepchars,0,destpos));}  }
class C{  @VisibleForTesting OffsetRangeTracker copy(){  OffsetRangeTracker res=new OffsetRangeTracker(startOffset,stopOffset);  res.offsetOfLastSplitPoint=this.offsetOfLastSplitPoint;  res.lastRecordStart=this.lastRecordStart;  res.done=this.done;  res.splitPointsSeen=this.splitPointsSeen;  return res;}  }
class C{  public void onFailedAttempt(R result,Throwable failure){}  }
class C{  private static String visibleWhitespaceLineEndings(String input,boolean whitespace,boolean lineEndings){  if (whitespace) {    input=input.replace(' ',MIDDLE_DOT).replace("\t","\\t");  }  if (lineEndings) {    input=input.replace("\n","\\n\n").replace("\r","\\r");  } else {    input=input.replace("\r","");  }  return input;}  }
class C{  public final boolean removeElement(int s){  for (int i=0; i < m_firstFree; i++) {    if (m_map[i] == s) {      if ((i + 1) < m_firstFree)       System.arraycopy(m_map,i + 1,m_map,i - 1,m_firstFree - i); else       m_map[i]=java.lang.Integer.MIN_VALUE;      m_firstFree--;      return true;    }  }  return false;}  }
class C{  @Override public void fromData(PdxReader in){  throw new UnsupportedOperationException();}  }
class C{  private void throwISEwhenClosed(){  if (tcache.isClosed())   throw new IllegalStateException("Cache already closed: " + tcache.id());}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public ThaiBuddhistDate dateYearDay(int prolepticYear,int dayOfYear){  return new ThaiBuddhistDate(LocalDate.ofYearDay(prolepticYear - YEARS_DIFFERENCE,dayOfYear));}  }
class C{  public static <T>T checkNotNull(T reference,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (reference == null) {    throw new NullPointerException(format(errorMessageTemplate,errorMessageArgs));  }  return reference;}  }
class C{  public void receiveResultqueryStorageCapabilities(com.emc.storageos.vasa.VasaServiceStub.QueryStorageCapabilitiesResponse result){}  }
class C{  private static AlgorithmParameterSpec algorithmParameterSpec(){  final SecureRandom random=new SecureRandom();  final byte[] bytes=new byte[CcAes.BLOCK];  random.nextBytes(bytes);  return new IvParameterSpec(bytes);}  }
class C{  public static void writeGraphic(TripHistogram tripHistogram,final String filename,final String legMode){  try {    ChartUtilities.saveChartAsPNG(new File(filename),getGraphic(tripHistogram.getDataForMode(legMode),legMode,tripHistogram.getIteration()),1024,768);  } catch (  IOException e) {    throw new UncheckedIOException(e);  }}  }
class C{  @Override public void trigger(DialogueState state,Collection<String> updatedVars){  if (updatedVars.contains("a_m") && state.hasChanceNode("a_m") && !paused) {    String actionValue=state.queryProb("a_m").getBest().toString();    if (actionValue.startsWith("Move(")) {      String direction=actionValue.substring(5,actionValue.length() - 1);      changePosition(direction);    }  }}  }
class C{  public boolean isLowProfile(){  return getSystemUiVisibilityFlagValue(View.SYSTEM_UI_FLAG_LOW_PROFILE,mLowProfile);}  }
class C{  public Word loadWord(){  return null;}  }
class C{  public final void translateY(double dy){  position.translateY(dy);}  }
class C{  @Override protected long overallEndTime(){  long ret=super.overallEndTime();  for (  Node child : nodes) {    long childEndTime=child.overallEndTime();    if (childEndTime > ret) {      ret=childEndTime;    }  }  return ret;}  }
class C{  public boolean isErroneous(){  return erroneous;}  }
class C{  @Inline public void initializeHeader(ObjectReference object){}  }
class C{  public static String[] charArrayToStringArray(char[][] charArrays){  if (charArrays == null)   return null;  int length=charArrays.length;  if (length == 0)   return NO_STRINGS;  String[] strings=new String[length];  for (int i=0; i < length; i++)   strings[i]=new String(charArrays[i]);  return strings;}  }
class C{  public JavaContext(TemplateContextType type,IDocument document,Position completionPosition,ICompilationUnit compilationUnit){  super(type,document,completionPosition,compilationUnit);}  }
class C{  private void fillResource(){  KeyNamePair pp=(KeyNamePair)fieldResourceType.getSelectedItem();  if (pp == null)   return;  int S_ResourceType_ID=pp.getKey();  KeyNamePair defaultValue=null;  m_loading=true;  fieldResource.removeAllItems();  String sql="SELECT S_Resource_ID, Name FROM S_Resource WHERE IsActive='Y' AND S_ResourceType_ID=? ORDER BY 2";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,S_ResourceType_ID);    rs=pstmt.executeQuery();    while (rs.next()) {      pp=new KeyNamePair(rs.getInt(1),rs.getString(2));      if (m_mAssignment.getS_Resource_ID() == pp.getKey())       defaultValue=pp;      fieldResource.addItem(pp);    }  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (defaultValue != null)   fieldResource.setSelectedItem(defaultValue);  m_loading=false;}  }
class C{  public void addAttribute(String uri,String localName,String qName,String type,String value){  ensureCapacity(length + 1);  data[length * 5]=uri;  data[length * 5 + 1]=localName;  data[length * 5 + 2]=qName;  data[length * 5 + 3]=type;  data[length * 5 + 4]=value;  length++;}  }
class C{  private double sin(double angle){  while (angle >= 180.0f) {    angle-=180.0;  }  double value=angle / 180.0f * Math.PI;  return Math.sin(value);}  }
class C{  public boolean hasHref(){  return getHref() != null;}  }
class C{  public int appendBytes(InputStream in,int max) throws IOException {  max=Math.min(max,buf.length - (pos + 2 + 1));  int read=0, got;  while (read < max && (got=in.read(buf,pos + 2 + read,max - read)) > -1) {    read+=got;  }  if (read > 0) {    appendInt(read);    pos+=read;    appendByte(0);  }  return read;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:41.457 -0500",hash_original_method="33A72088F866CE60A95FDCD7FA3E1376",hash_generated_method="F2BE5F72D37C4478F4171512DE2BF5FE") public static char gsmToChar(int gsmChar){  if (gsmChar >= 0 && gsmChar < 128) {    return sLanguageTables[0].charAt(gsmChar);  } else {    return ' ';  }}  }
class C{  public DrawerBuilder withDrawerWidthRes(@DimenRes int drawerWidthRes){  if (mActivity == null) {    throw new RuntimeException("please pass an activity first to use this call");  }  this.mDrawerWidth=mActivity.getResources().getDimensionPixelSize(drawerWidthRes);  return this;}  }
class C{  public T caseTypeConstraint(TypeConstraint object){  return null;}  }
class C{  public void updateRow() throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  private static boolean isTokenChar(char c){  return ((c > 040) && (c < 0177)) && (TSPECIALS.indexOf(c) < 0);}  }
class C{  public ServerExecutionException(){  super();}  }
class C{  private boolean tableExists(String table) throws SQLException {  PreparedStatement statement=null;  ResultSet result=null;  try {    statement=this.connection.prepareStatement("SHOW TABLES;");    result=statement.executeQuery();    if (result == null) {      return false;    }    boolean found=false;    while (result.next()) {      if (table.equalsIgnoreCase(result.getString(1))) {        found=true;      }    }    return found;  }  finally {    if (statement != null) {      statement.close();    }    if (result != null) {      result.close();    }  }}  }
class C{  private boolean primitiveEquals(Object switchVal,Object targetVal,CallStack callstack,SimpleNode switchExp) throws EvalError {  if (switchVal instanceof Primitive || targetVal instanceof Primitive)   try {    Object result=Primitive.binaryOperation(switchVal,targetVal,ParserConstants.EQ);    result=Primitive.unwrap(result);    return result.equals(Boolean.TRUE);  } catch (  UtilEvalError e) {    throw e.toEvalError("Switch value: " + switchExp.getText() + ": ",this,callstack);  } else   return switchVal.equals(targetVal);}  }
class C{  public JSONArray put(int index,double value) throws JSONException {  this.put(index,new Double(value));  return this;}  }
class C{  protected void selectButtonState(){  if (sco == null || sco.pickType == null) {    setSelectText(PickType.SELECT);    canSelect();    return;  }  if (openedCards.size() == 0) {    setSelectText(sco.pickType);    if (sco.pickType == SelectCardOptions.PickType.SELECT_WITH_ALL) {      canSelect();    } else     if (sco.pickType == SelectCardOptions.PickType.PLAY && maxOpened == 1 && sco.allowedCards.size() == 1) {      canSelect();    } else     if (sco.pickType == SelectCardOptions.PickType.PLAY_IN_ORDER && maxOpened == 1) {      canSelect();    } else {      cannotSelect();    }    if (sco.defaultCardSelected != -1 && sco.fromHand) {      int pos=hand.getPos(sco.defaultCardSelected);      if (pos != -1) {        CardView cv=(CardView)hand.getView(pos,null,null);        cv.setChecked(true,sco.getPickType().indicator());        CardInfo ci=new CardInfo(cv.getState(),hand,pos);        openedCards.add(ci);        hand.updateState(pos,cv.getState());      }    } else {      return;    }  }  if (sco.pickType == SelectCardOptions.PickType.SELECT_WITH_ALL) {    setSelectText(PickType.SELECT);  } else   if (sco.getPickType() == SelectCardOptions.PickType.PLAY_IN_ORDER) {    setSelectText(SelectCardOptions.PickType.PLAY);  } else {    setSelectText(sco.pickType);  }  if (exactOpened && (openedCards.size() != maxOpened)) {    cannotSelect();  } else {    canSelect();  }}  }
class C{  public DefaultVertexLabelRenderer(Color pickedVertexLabelColor){  this.pickedVertexLabelColor=pickedVertexLabelColor;  setOpaque(true);  setBorder(noFocusBorder);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public void queryDuplexGroupIdentity(){  awaitingGroupReadReport=true;  gotQueryReply=false;  memo.getLnTrafficController().sendLocoNetMessage(createUr92GroupIdentityQueryPacket());  invalidateDuplexGroupIdentityInfo();  if (swingTmrDuplexInfoQuery != null) {    if (swingTmrDuplexInfoQuery.isRunning()) {      swingTmrDuplexInfoQuery.restart();    } else {      swingTmrDuplexInfoQuery.start();    }  }}  }
class C{  private static int decodeDigit(int[] counters) throws NotFoundException {  float bestVariance=MAX_AVG_VARIANCE;  int bestMatch=-1;  int max=PATTERNS.length;  for (int i=0; i < max; i++) {    int[] pattern=PATTERNS[i];    float variance=patternMatchVariance(counters,pattern,MAX_INDIVIDUAL_VARIANCE);    if (variance < bestVariance) {      bestVariance=variance;      bestMatch=i;    }  }  if (bestMatch >= 0) {    return bestMatch;  } else {    throw NotFoundException.getNotFoundInstance();  }}  }
class C{  public static boolean isExtension(String filename,String extension){  if (filename == null) {    return false;  }  if (extension == null || extension.length() == 0) {    return indexOfExtension(filename) == -1;  }  String fileExt=getExtension(filename);  return fileExt.equals(extension);}  }
class C{  protected AbstractMRMessage pollMessage(){  if (disablePoll) {    return null;  }  if (!pollQueue.isEmpty()) {    PollMessage pm=pollQueue.peek();    if (pm != null) {      return pm.getMessage();    }  }  return null;}  }
class C{  public void textLeading(float leading){  textLeading=leading;}  }
class C{  public NamedList(){  nvPairs=new ArrayList<>();}  }
class C{  public DuplicateFormatFlagsException(String f){  if (f == null)   throw new NullPointerException();  this.flags=f;}  }
class C{  private void applyKitKatTranslucency(){  if (Build.VERSION.SDK_INT == Build.VERSION_CODES.KITKAT) {    TypedValue tv=new TypedValue();    int actionBarHeight=0;    if (getActivity().getTheme().resolveAttribute(android.R.attr.actionBarSize,tv,true)) {      actionBarHeight=TypedValue.complexToDimensionPixelSize(tv.data,getResources().getDisplayMetrics());    }    mListView.setBackgroundColor(0xFFEEEEEE);    mRootView.setPadding(0,actionBarHeight + mApp.getStatusBarHeight(mContext),0,0);    mListView.setPadding(10,0,10,mApp.getNavigationBarHeight(mContext));    mListView.setClipToPadding(false);    getActivity().getWindow().setBackgroundDrawable(UIElementsHelper.getGeneralActionBarBackground(mContext));  }}  }
class C{  public PanEvent(Object source,int direction){  this(source,dir2Az(direction),Float.NaN);}  }
class C{  private void removeFromIncidenceSet(HGPersistentHandle targetAtom,HGPersistentHandle incidentLink){  store.removeIncidenceLink(targetAtom,incidentLink);  IncidenceSet targetIncidenceSet=cache.getIncidenceCache().getIfLoaded(targetAtom);  if (targetIncidenceSet != null)   targetIncidenceSet.remove(incidentLink);}  }
class C{  public ShareCollectionPage(final BaseShareCollectionResponse response,final IShareCollectionRequestBuilder builder){  super(response,builder);}  }
class C{  public DANN(int kn,int k){  this(kn,k,DEFAULT_EPS);}  }
class C{  @Override public boolean isLeapYear(long prolepticYear){  return ((prolepticYear & 3) == 0) && ((prolepticYear % 100) != 0 || (prolepticYear % 400) == 0);}  }
class C{  @Override public void run(){  amIActive=true;  String outputHeader="";  int row, col;  double rowYCoord, value, z;  int progress=0;  double cellSizeX, cellSizeY;  int rows, topRow, bottomRow;  int cols;  int inputRow, inputCol;  double inputX, inputY;  double east;  double west;  double north;  double south;  BoundingBox box;  double[][] geometry;  int numPoints, numParts, i, part, numEdges;  int stCol, endCol;  int startingPointInPart, endingPointInPart;  double x1, y1, x2, y2, xPrime;  boolean foundIntersection;  ArrayList<Integer> edgeList=new ArrayList<>();  DecimalFormat df=new DecimalFormat("###,###,###,###");  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputFilesString=args[0];  String[] inputFiles=inputFilesString.split(";");  int numFiles=inputFiles.length;  String clipFile=args[1];  if (inputFilesString.isEmpty() || numFiles < 1) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    long heapSize=Runtime.getRuntime().totalMemory();    int flushSize=(int)(heapSize / 32);    int j, numCellsToWrite;    PriorityQueue<RowPriorityGridCell> pq=new PriorityQueue<>(flushSize);    ShapeFile clip=new ShapeFile(clipFile);    BoundingBox clipBox=new BoundingBox();    clipBox.setMaxX(clip.getxMax());    clipBox.setMaxY(clip.getyMax());    clipBox.setMinX(clip.getxMin());    clipBox.setMinY(clip.getyMin());    if (clip.getShapeType().getBaseType() != ShapeType.POLYGON) {      showFeedback("The input shapefile must be of a 'polygon' data type.");      return;    }    ArrayList<RecordInfo> myList=new ArrayList<>();    for (    ShapeFileRecord record : clip.records) {      i=record.getRecordNumber();      box=getBoundingBoxFromShapefileRecord(record);      myList.add(new RecordInfo(box.getMaxY(),i));    }    Collections.sort(myList);    for (int k=0; k < numFiles; k++) {      WhiteboxRaster input=new WhiteboxRaster(inputFiles[k],"r");      outputHeader=inputFiles[k].replace(".dep","_erased.dep");      double noData=input.getNoDataValue();      DataType dataType=input.getDataType();      WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputFiles[k],dataType,noData);      rows=input.getNumberRows();      cols=input.getNumberColumns();      double[] data;      for (row=0; row < rows; row++) {        data=input.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            output.setValue(row,col,data[col]);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }      pq.clear();      RowPriorityGridCell cell;      int numRecords=clip.getNumberOfRecords();      int count=0;      int progressCount=(int)(numRecords / 100.0);      if (progressCount <= 0) {        progressCount=1;      }      ShapeFileRecord record;      for (      RecordInfo ri : myList) {        record=clip.getRecord(ri.recNumber - 1);        geometry=getXYFromShapefileRecord(record);        numPoints=geometry.length;        numParts=partData.length;        for (part=0; part < numParts; part++) {          if (!partHoleData[part]) {            box=new BoundingBox();            startingPointInPart=partData[part];            if (part < numParts - 1) {              endingPointInPart=partData[part + 1];            } else {              endingPointInPart=numPoints;            }            for (i=startingPointInPart; i < endingPointInPart; i++) {              if (geometry[i][1] < box.getMinY()) {                box.setMinY(geometry[i][1]);              }              if (geometry[i][1] > box.getMaxY()) {                box.setMaxY(geometry[i][1]);              }            }            topRow=output.getRowFromYCoordinate(box.getMaxY());            bottomRow=output.getRowFromYCoordinate(box.getMinY());            for (row=topRow; row <= bottomRow; row++) {              edgeList.clear();              foundIntersection=false;              rowYCoord=output.getYCoordinateFromRow(row);              for (i=startingPointInPart; i < endingPointInPart - 1; i++) {                if (isBetween(rowYCoord,geometry[i][1],geometry[i + 1][1])) {                  y1=geometry[i][1];                  y2=geometry[i + 1][1];                  if (y2 != y1) {                    x1=geometry[i][0];                    x2=geometry[i + 1][0];                    xPrime=(x1 + (rowYCoord - y1) / (y2 - y1) * (x2 - x1));                    edgeList.add(output.getColumnFromXCoordinate(xPrime));                    foundIntersection=true;                  }                }              }              if (foundIntersection) {                numEdges=edgeList.size();                if (numEdges == 2) {                  stCol=Math.min(edgeList.get(0),edgeList.get(1));                  endCol=Math.max(edgeList.get(0),edgeList.get(1));                  for (col=stCol; col <= endCol; col++) {                    pq.add(new RowPriorityGridCell(row,col,noData));                  }                } else {                  Integer[] edgeArray=new Integer[numEdges];                  edgeList.toArray(edgeArray);                  Arrays.sort(edgeArray);                  boolean fillFlag=true;                  for (i=0; i < numEdges - 1; i++) {                    stCol=edgeArray[i];                    endCol=edgeArray[i + 1];                    if (fillFlag) {                      for (col=stCol; col <= endCol; col++) {                        pq.add(new RowPriorityGridCell(row,col,noData));                      }                    }                    fillFlag=!fillFlag;                  }                }              }            }          }        }        for (part=0; part < numParts; part++) {          if (partHoleData[part]) {            box=new BoundingBox();            startingPointInPart=partData[part];            if (part < numParts - 1) {              endingPointInPart=partData[part + 1];            } else {              endingPointInPart=numPoints;            }            for (i=startingPointInPart; i < endingPointInPart; i++) {              if (geometry[i][1] < box.getMinY()) {                box.setMinY(geometry[i][1]);              }              if (geometry[i][1] > box.getMaxY()) {                box.setMaxY(geometry[i][1]);              }            }            topRow=output.getRowFromYCoordinate(box.getMaxY());            bottomRow=output.getRowFromYCoordinate(box.getMinY());            for (row=topRow; row <= bottomRow; row++) {              edgeList.clear();              foundIntersection=false;              rowYCoord=output.getYCoordinateFromRow(row);              for (i=startingPointInPart; i < endingPointInPart - 1; i++) {                if (isBetween(rowYCoord,geometry[i][1],geometry[i + 1][1])) {                  y1=geometry[i][1];                  y2=geometry[i + 1][1];                  if (y2 != y1) {                    x1=geometry[i][0];                    x2=geometry[i + 1][0];                    xPrime=(x1 + (rowYCoord - y1) / (y2 - y1) * (x2 - x1));                    edgeList.add(output.getColumnFromXCoordinate(xPrime));                    foundIntersection=true;                  }                }              }              if (foundIntersection) {                numEdges=edgeList.size();                if (numEdges == 2) {                  stCol=Math.min(edgeList.get(0),edgeList.get(1));                  endCol=Math.max(edgeList.get(0),edgeList.get(1));                  for (col=stCol; col <= endCol; col++) {                    pq.add(new RowPriorityGridCell(row,col,input.getValue(row,col)));                  }                } else {                  Integer[] edgeArray=new Integer[numEdges];                  edgeList.toArray(edgeArray);                  Arrays.sort(edgeArray);                  boolean fillFlag=true;                  for (i=0; i < numEdges - 1; i++) {                    stCol=edgeArray[i];                    endCol=edgeArray[i + 1];                    if (fillFlag) {                      for (col=stCol; col <= endCol; col++) {                        pq.add(new RowPriorityGridCell(row,col,input.getValue(row,col)));                      }                    }                    fillFlag=!fillFlag;                  }                }              }            }          }        }        if (pq.size() >= flushSize) {          j=0;          numCellsToWrite=pq.size();          do {            cell=pq.poll();            output.setValue(cell.row,cell.col,cell.z);            j++;            if (j % 1000 == 0) {              if (cancelOp) {                cancelOperation();                return;              }              updateProgress("Writing to Output (" + df.format(j) + " of "+ df.format(numCellsToWrite)+ "):",(int)(j * 100.0 / numCellsToWrite));            }          } while (pq.size() > 0);        }        if (cancelOp) {          cancelOperation();          return;        }        count++;        if (count % progressCount == 0) {          progress++;          updateProgress(progress);        }      }      j=0;      numCellsToWrite=pq.size();      if (numCellsToWrite > 0) {        do {          cell=pq.poll();          output.setValue(cell.row,cell.col,cell.z);          j++;          if (j % 1000 == 0) {            if (cancelOp) {              cancelOperation();              return;            }            updateProgress("Writing to Output (" + df.format(j) + " of "+ df.format(numCellsToWrite)+ "):",(int)(j * 100.0 / numCellsToWrite));          }        } while (pq.size() > 0);      }      output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      output.addMetadataEntry("Created on " + new Date());      output.flush();      output.close();    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public CustomizedDistributedRowLock<K> failOnStaleLock(boolean failOnStaleLock){  this.failOnStaleLock=failOnStaleLock;  return this;}  }
class C{  private PDFObject findPage(PDFObject pagedict,int start,int getPage,Map<String,PDFObject> resources) throws IOException {  PDFObject rsrcObj=pagedict.getDictRef("Resources");  if (rsrcObj != null) {    resources.putAll(rsrcObj.getDictionary());  }  PDFObject typeObj=pagedict.getDictRef("Type");  if (typeObj != null && typeObj.getStringValue().equals("Page")) {    return pagedict;  }  PDFObject kidsObj=pagedict.getDictRef("Kids");  if (kidsObj != null) {    PDFObject[] kids=kidsObj.getArray();    for (int i=0; i < kids.length; i++) {      int count=1;      PDFObject countItem=kids[i].getDictRef("Count");      if (countItem != null) {        count=countItem.getIntValue();      }      if (start + count >= getPage) {        return findPage(kids[i],start,getPage,resources);      }      start+=count;    }  }  return null;}  }
class C{  private synchronized void tag(final JSONObject user) throws RepositoryException {  final List<Filter> filters=new ArrayList<Filter>();  filters.add(new PropertyFilter(User.USER + '_' + Keys.OBJECT_ID,FilterOperator.EQUAL,user.optString(Keys.OBJECT_ID)));  filters.add(new PropertyFilter(Common.TYPE,FilterOperator.EQUAL,Tag.TAG_TYPE_C_USER_SELF));  final Query query=new Query();  query.setFilter(new CompositeFilter(CompositeFilterOperator.AND,filters));  final JSONArray results=userTagRepository.get(query).optJSONArray(Keys.RESULTS);  for (int i=0; i < results.length(); i++) {    final JSONObject rel=results.optJSONObject(i);    final String id=rel.optString(Keys.OBJECT_ID);    userTagRepository.remove(id);  }  String tagTitleStr=user.optString(UserExt.USER_TAGS);  final String[] tagTitles=tagTitleStr.split(",");  for (  final String title : tagTitles) {    final String tagTitle=title.trim();    JSONObject tag=tagRepository.getByTitle(tagTitle);    String tagId;    if (null == tag) {      LOGGER.log(Level.TRACE,"Found a new tag[title={0}] in user [name={1}]",new Object[]{tagTitle,user.optString(User.USER_NAME)});      tag=new JSONObject();      tag.put(Tag.TAG_TITLE,tagTitle);      tag.put(Tag.TAG_REFERENCE_CNT,0);      tag.put(Tag.TAG_COMMENT_CNT,0);      tag.put(Tag.TAG_FOLLOWER_CNT,0);      tag.put(Tag.TAG_DESCRIPTION,"");      tag.put(Tag.TAG_ICON_PATH,"");      tag.put(Tag.TAG_STATUS,0);      tag.put(Tag.TAG_GOOD_CNT,0);      tag.put(Tag.TAG_BAD_CNT,0);      tagId=tagRepository.add(tag);      final JSONObject tagCntOption=optionRepository.get(Option.ID_C_STATISTIC_TAG_COUNT);      final int tagCnt=tagCntOption.optInt(Option.OPTION_VALUE);      tagCntOption.put(Option.OPTION_VALUE,tagCnt + 1);      optionRepository.update(Option.ID_C_STATISTIC_TAG_COUNT,tagCntOption);      final JSONObject userTagRelation=new JSONObject();      userTagRelation.put(Tag.TAG + '_' + Keys.OBJECT_ID,tagId);      userTagRelation.put(User.USER + '_' + Keys.OBJECT_ID,user.optString(Keys.OBJECT_ID));      userTagRelation.put(Common.TYPE,Tag.TAG_TYPE_C_CREATOR);      userTagRepository.add(userTagRelation);    } else {      tagId=tag.optString(Keys.OBJECT_ID);      LOGGER.log(Level.TRACE,"Found a existing tag[title={0}, id={1}] in user[name={2}]",new Object[]{tag.optString(Tag.TAG_TITLE),tag.optString(Keys.OBJECT_ID),user.optString(User.USER_NAME)});      tagTitleStr=tagTitleStr.replaceAll("(?i)" + Pattern.quote(tagTitle),tag.optString(Tag.TAG_TITLE));    }    final JSONObject userTagRelation=new JSONObject();    userTagRelation.put(Tag.TAG + '_' + Keys.OBJECT_ID,tagId);    userTagRelation.put(User.USER + '_' + Keys.OBJECT_ID,user.optString(Keys.OBJECT_ID));    userTagRelation.put(Common.TYPE,Tag.TAG_TYPE_C_USER_SELF);    userTagRepository.add(userTagRelation);  }  user.put(UserExt.USER_TAGS,tagTitleStr);}  }
class C{  public SVGOMAltGlyphElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  @Override public void onNotificationRemoved(StatusBarNotification sbn){  Intent intent=new Intent(NOTIFICATION_UPDATE);  intent.putExtra(NotificationKey.ACTION,NotificationAction.NOTIFICATION_REMOVED);  intent.putExtra(NotificationKey.APPLICATION_PACKAGE_NAME,sbn.getPackageName());  StatusBarNotification[] activeNotifications=NotificationService.this.getActiveNotifications();  String packages[]=new String[activeNotifications.length];  int i=0;  for (  StatusBarNotification nf : activeNotifications) {    packages[i++]=nf.getPackageName();  }  intent.putExtra(NotificationKey.APPLICATION_PACKAGES,packages);  sendBroadcast(intent);  numNotifications=packages.length;}  }
class C{  public long addWrapField(long instant,int amount){  int thisValue=get(instant);  int wrappedValue=FieldUtils.getWrappedValue(thisValue,amount,getMinimumValue(),getMaximumValue());  return instant + (wrappedValue - thisValue) * getUnitMillis();}  }
class C{  public void delete(URI id){  client.delete(String.class,getIdUrl(),id);}  }
class C{  @Deprecated public static File createTempDirectory(File parent,String prefix) throws IOException {  if (parent == null) {    parent=new File(System.getProperty("java.io.tmpdir"));  }  return Files.createTempDirectory(parent.toPath(),prefix).toFile();}  }
class C{  static Object valueOf(final Class<?> type,final String str){  if (!isValidEnum(type)) {    return null;  }  try {    final String valueOfMethod="valueOf";    final Method m=type.getMethod(valueOfMethod,String.class);    if (!Modifier.isStatic(m.getModifiers())) {      return null;    }    final Class<?> returnType=m.getReturnType();    if (!type.isAssignableFrom(returnType)) {      return null;    }    return m.invoke(null,str);  } catch (  final NoSuchMethodException|InvocationTargetException|IllegalAccessException e) {    throw new RuntimeException(e);  }}  }
class C{  public static boolean displayURL(String url){  if (displayUrlWithDesktopApi(url)) {    return true;  }  if (displayUrlWithJnlpApi(url)) {    return true;  }  Platforms platform=getPlatform();switch (platform) {case WINDOWS:    return runCmdLine(replaceToken(WIN_CMDLINE,URLTOKEN,url));case MAC:  return runCmdLine(replaceToken(MAC_CMDLINE,URLTOKEN,url));case LINUX:if (runCmdLine(replaceToken(LINUX_CMDLINE,URLTOKEN,url))) {  return true;}}assert OTHER_CMDLINES.length == OTHER_FALLBACKS.length;for (int i=0; i < OTHER_CMDLINES.length; i++) {if (runCmdLine(replaceToken(OTHER_CMDLINES[i],URLTOKEN,url),replaceToken(OTHER_FALLBACKS[i],URLTOKEN,url))) {return true;}}return false;}  }
class C{  public JSONArray put(long value){  put(new Long(value));  return this;}  }
class C{  public CModuleLoaderReporter(final ListenerProvider<IModuleListener> listeners){  m_listeners=listeners;}  }
class C{  public static int GetId(int otherId){  Thread th=Thread.currentThread();  return (th instanceof IdThread) ? ((IdThread)th).id : otherId;}  }
class C{  public void newMapElement(MapElementState.Type type,MapElement mapElement){}  }
class C{  LogoPanel(){  super(BoxPanel.X_AXIS);  setupUI();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.ANNOTABLE_PROPERTY_ASSIGNMENT__ANNOTATION_LIST:    setAnnotationList((PropertyAssignmentAnnotationList)null);  return;}super.eUnset(featureID);}  }
class C{  public boolean isNewNull(){  String value=getNewValue();  return value == null || value.equals(NULL);}  }
class C{  public void saveOrUpdateNote(@Nullable MenuItem menu){  spannable=editText.getText();  String title=noteTitle.getText().toString();  if (noteID == -1) {    Note note=new Note(dbHandler.getNoteCount(),title,spannable,drawingView.getCanvasBitmap(),new Date());    new SaveOrUpdateNoteTask(this,dbHandler,false).execute(note);  } else {    Note note=new Note(noteID,title,spannable,drawingView.getCanvasBitmap(),new Date());    new SaveOrUpdateNoteTask(this,dbHandler,true).execute(note);  }  hideSoftKeyboard();  finish();}  }
class C{  private void rebuild(){  this.removeAll();  this.add(buildComponent());  revalidate();  repaint();}  }
class C{  protected FocusListener createFocusListener(){  return new AquaTreeUI.FocusHandler();}  }
class C{  public boolean isRemoveComments(){  return removeComments;}  }
class C{  public void load(@NonNull Activity activity,@NonNull View succeedView){  if (null != mSucceedView) {    removeView(mSucceedView);  }  mSucceedView=succeedView;  addView(mSucceedView,0);  activity.setContentView(this);}  }
class C{  public CacheDataPage findCacheDataPage(Entry e) throws IOException {  DataPageMain curPage=_rootPage;  while (true) {    if (curPage._leaf) {      return new CacheDataPage(curPage);    }    DataPageExtra extra=curPage.getExtra();    int idx=extra._entryView.find(e);    if (idx < 0) {      idx=missingIndexToInsertionPoint(idx);      if (idx == extra._entryView.size()) {        --idx;      }    }    Entry nodeEntry=extra._entryView.get(idx);    curPage=curPage.getChildPage(nodeEntry);  }}  }
class C{  public static StreamError parseStreamError(XmlPullParser parser) throws IOException, XmlPullParserException {  final int depth=parser.getDepth();  boolean done=false;  String code=null;  String text=null;  while (!done) {    int eventType=parser.next();    if (eventType == XmlPullParser.START_TAG) {      String namespace=parser.getNamespace();      if (StreamError.NAMESPACE.equals(namespace)) {        String name=parser.getName();        if (name.equals("text") && !parser.isEmptyElementTag()) {          parser.next();          text=parser.getText();        } else {          code=name;        }      }    } else     if (eventType == XmlPullParser.END_TAG && depth == parser.getDepth()) {      done=true;    }  }  return new StreamError(code,text);}  }
class C{  public GatewaySenderEventImpl makeHeapCopyIfOffHeap(){  if (this.value != null || this.substituteValue != null) {    return this;  } else {    Object v=this.valueObj;    if (v == null) {      if (this.valueObjReleased) {        return null;      } else {        return this;      }    }    if (v instanceof StoredObject && ((StoredObject)v).hasRefCount()) {      try {        return makeCopy();      } catch (      IllegalStateException ex) {        return null;      }    } else {      return this;    }  }}  }
class C{  public void addLocation(Where location){  getLocations().add(location);}  }
class C{  public void acceptPair(BluetoothAdapter adapter,BluetoothDevice device,int passkey,byte[] pin){  pairOrAcceptPair(adapter,device,passkey,pin,false);}  }
class C{  public static boolean fromSameTable(Collection<Partition> partitions){  if (partitions.size() == 0) {    return false;  }  String dbName=null;  String tableName=null;  for (  Partition p : partitions) {    if (dbName == null) {      dbName=p.getDbName();    } else     if (!dbName.equals(p.getDbName())) {      return false;    }    if (tableName == null) {      tableName=p.getTableName();    } else     if (!tableName.equals(p.getTableName())) {      return false;    }  }  return true;}  }
class C{  public void resolve(Chain chain,int target){  boolean changed=false;  State newState=state;  for (; chain != null; chain=chain.next) {    Assert.check(state != chain.state && (target > chain.pc || state.stacksize == chain.state.stacksize));    if (target >= cp) {      target=cp;    } else     if (get1(target) == goto_) {      if (fatcode)       target=target + get4(target + 1); else       target=target + get2(target + 1);    }    if (get1(chain.pc) == goto_ && chain.pc + 3 == target && target == cp && !fixedPc) {      if (varDebugInfo) {        adjustAliveRanges(cp,-3);      }      cp=cp - 3;      target=target - 3;      if (chain.next == null) {        alive=true;        break;      }    } else {      if (fatcode)       put4(chain.pc + 1,target - chain.pc); else       if (target - chain.pc < Short.MIN_VALUE || target - chain.pc > Short.MAX_VALUE)       fatcode=true; else       put2(chain.pc + 1,target - chain.pc);      Assert.check(!alive || chain.state.stacksize == newState.stacksize && chain.state.nlocks == newState.nlocks);    }    fixedPc=true;    if (cp == target) {      changed=true;      if (debugCode)       System.err.println("resolving chain state=" + chain.state);      if (alive) {        newState=chain.state.join(newState);      } else {        newState=chain.state;        alive=true;      }    }  }  Assert.check(!changed || state != newState);  if (state != newState) {    setDefined(newState.defined);    state=newState;    pendingStackMap=needStackMap;  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static Map<String,Object> testXmlRpcClientAdd(DispatchContext dctx,Map<String,?> context){  Locale locale=(Locale)context.get("locale");  Map<String,Object> result=null;  Integer num1=125;  Integer num2=365;  try {    Map<String,Object> localMap=dctx.makeValidContext("testXmlRpcLocalEngine","IN",context);    localMap.put("num1",num1);    localMap.put("num2",num2);    result=dctx.getDispatcher().runSync("testXmlRpcLocalEngine",localMap);  } catch (  GenericServiceException e) {    return ServiceUtil.returnError(e.getLocalizedMessage());  }  if (ServiceUtil.isError(result))   return result;  Integer res=(Integer)result.get("resulting");  if (res == (num1 + num2)) {    result=ServiceUtil.returnSuccess(UtilProperties.getMessage(resource,"ServiceTestXmlRpcCalculationOK",locale) + res);  } else {    result=ServiceUtil.returnError(UtilProperties.getMessage(resource,"ServiceTestXmlRpcCalculationKO",locale));  }  return result;}  }
class C{  public short[][] action_table(){  return _action_table;}  }
class C{  public Vertex applyFOR(List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network){  List<List<Relationship>> sequences=new ArrayList<List<Relationship>>();  List<Vertex> forVariables=new ArrayList<Vertex>();  int maxSequenceSize=0;  for (int index=0; index < arguments.size(); index=index + 3) {    Vertex source=arguments.get(index + 1).getTarget().applyQuotient(variables,network);    Vertex relationship=arguments.get(index).getTarget().applyQuotient(variables,network);    List<Relationship> sequence=source.orderedRelationships(relationship);    if (sequence == null) {      sequence=new ArrayList<Relationship>(0);    }    if (sequence.size() > maxSequenceSize) {      maxSequenceSize=sequence.size();    }    sequences.add(sequence);    Vertex variable=null;    if (arguments.size() > 2) {      variable=arguments.get(index + 2).getTarget();    }    forVariables.add(variable);  }  List<Relationship> doEquations=orderedRelationships(Primitive.DO);  Vertex result;  for (int index=0; index < maxSequenceSize; index++) {    for (int variableIndex=0; variableIndex < forVariables.size(); variableIndex++) {      Vertex variable=forVariables.get(variableIndex);      if (variable != null) {        List<Relationship> sequence=sequences.get(variableIndex);        Vertex value=null;        if (index >= sequence.size()) {          value=network.createVertex(Primitive.NULL);        } else {          value=sequence.get(index).getTarget();        }        variables.put(variable,value);      }    }    for (    Relationship doEquation : doEquations) {      result=doEquation.getTarget().applyQuotient(variables,network);      if (variables.containsKey(network.createVertex(Primitive.RETURN))) {        return result;      }    }  }  return network.createVertex(Primitive.NULL);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap notations;  NamedNodeMap attributes;  Notation notation;  Element element;  NodeList elementList;  Node newNode;  String nullNS=null;  doc=(Document)load("staffNS",true);  docType=doc.getDoctype();  notations=docType.getNotations();  assertNotNull("notationsNotNull",notations);  notation=(Notation)notations.getNamedItem("notation1");  elementList=doc.getElementsByTagNameNS("http://www.nist.gov","address");  element=(Element)elementList.item(0);  attributes=element.getAttributes();{    boolean success=false;    try {      newNode=attributes.setNamedItemNS(notation);    } catch (    DOMException ex) {      success=(ex.code == DOMException.HIERARCHY_REQUEST_ERR);    }    assertTrue("throw_HIERARCHY_REQUEST_ERR",success);  }}  }
class C{  public ObjectNotFoundException(String message,DomainObjectExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void debug(String s){  if (isEnabled(TraceSystem.DEBUG)) {    traceWriter.write(TraceSystem.DEBUG,module,s,null);  }}  }
class C{  public ShallowStackTest(String name){  super(name);}  }
class C{  void sendNextItem(){  if (!mRunButton.isSelected()) {    return;  }  if (mNextSequenceElement >= MAXSEQUENCE) {    mNextSequenceElement=0;  }  if (mUseField[mNextSequenceElement].isSelected()) {    CanMessage m=createPacket(mPacketField[mNextSequenceElement].getText());    tc.sendCanMessage(m,this);    startSequenceDelay();  } else {    mNextSequenceElement++;    sendNextItem();  }}  }
class C{  public synchronized void deleteObservers(){  observers.clear();}  }
class C{  private boolean canDouble(){  return this.blockId != 130;}  }
class C{  public static boolean isSingleton(Types typeUtils,TypeElement el){  List<? extends Element> enclosedElements=el.getEnclosedElements();  for (  Element e : enclosedElements) {    Set<Modifier> modifiers=e.getModifiers();    if (e instanceof VariableElement && modifiers.contains(STATIC) && modifiers.contains(PUBLIC)&& modifiers.contains(FINAL)) {      VariableElement variableElement=(VariableElement)e;      if (variableElement.getSimpleName().contentEquals("INSTANCE")) {        return typeUtils.isAssignable(el.asType(),e.asType());      }    }  }  return false;}  }
class C{  @Override public double driftDiscretization(final StochasticProcess1D sp,final double t0,final double x0,final double dt){  return sp.drift(t0,x0) * dt;}  }
class C{  public static final void checkCoreVersusJdbcVersions(String jdbcVersion){  logVersionWarnings("core",coreVersion,"jdbc",jdbcVersion);}  }
class C{  public String readText() throws IOException {  closeBinaryStream(true);  int size=0;  int sep;  int newSize;  int numBuffered;  int consumed=0;  while (!isStreamEnded()) {    sep=findSep(0);    newSize=size + sep;    if (newSize > textBuffer.length) {      textBuffer=Arrays.copyOf(textBuffer,Math.max(textBuffer.length << 1,newSize));    }    if (sep > 0) {      System.arraycopy(buffer,0,textBuffer,size,sep);    }    size=newSize;    numBuffered=buffered;    if (sep == numBuffered) {      use(numBuffered);      consumed+=numBuffered;    } else {      use(sep + 1);      consumed+=sep + 1;      break;    }    reload();  }  if (consumed == 0)   return null;  if (size == 0)   return EMPTY_TEXT;  return new String(textBuffer,0,size,textEncoding);}  }
class C{  protected Exception(String message,Throwable cause,boolean enableSuppression,boolean writableStackTrace){  super(message,cause,enableSuppression,writableStackTrace);}  }
class C{  public void draw(Graphics2D g2,Rectangle2D plotArea,Rectangle2D dataArea,double x,double y){  double h=getHeight(g2);  Iterator iterator=this.markers.iterator();  while (iterator.hasNext()) {    IntervalMarker marker=(IntervalMarker)iterator.next();    double start=Math.max(marker.getStartValue(),this.axis.getRange().getLowerBound());    double end=Math.min(marker.getEndValue(),this.axis.getRange().getUpperBound());    double s=this.axis.valueToJava2D(start,dataArea,RectangleEdge.BOTTOM);    double e=this.axis.valueToJava2D(end,dataArea,RectangleEdge.BOTTOM);    Rectangle2D r=new Rectangle2D.Double(s,y + this.topOuterGap,e - s,h - this.topOuterGap - this.bottomOuterGap);    Composite originalComposite=g2.getComposite();    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,marker.getAlpha()));    g2.setPaint(marker.getPaint());    g2.fill(r);    g2.setPaint(marker.getOutlinePaint());    g2.draw(r);    g2.setComposite(originalComposite);    g2.setPaint(Color.black);    drawStringInRect(g2,r,this.font,marker.getLabel());  }}  }
class C{  int medianLoadTimeMicros(){  if (mlt != -1) {    return mlt;  }  return mlt=calculateMedian(loads);}  }
class C{  public static void kill(String gridName){  IgniteProcessProxy proxy=gridProxies.get(gridName);  A.notNull(gridName,"gridName");  try {    proxy.getProcess().kill();  } catch (  Exception e) {    U.error(proxy.log,"Exception while killing " + gridName,e);  }  gridProxies.remove(gridName,proxy);}  }
class C{  private Date doConvertToDate(Object value) throws ParseException {  Date result=null;  if (value instanceof String) {    result=DateUtils.parseDate((String)value,new String[]{DATE_PATTERN,DATETIME_PATTERN,DATETIME_PATTERN_NO_SECOND,MONTH_PATTERN});    if (result == null && StringUtils.isNotEmpty((String)value)) {      try {        result=new Date(new Long((String)value).longValue());      } catch (      Exception e) {        logger.error("Converting from milliseconds to Date fails!");        e.printStackTrace();      }    }  } else   if (value instanceof Object[]) {    Object[] array=(Object[])value;    if (array.length >= 1) {      value=array[0];      result=doConvertToDate(value);    }  } else   if (Date.class.isAssignableFrom(value.getClass())) {    result=(Date)value;  }  return result;}  }
class C{  @SuppressWarnings("unchecked") public ListBuffer<JCTree> transformAfterTypeChecking(Tree.CompilationUnit t){  disableAnnotations=0;  GetterSetterPairingVisitor gspv=new GetterSetterPairingVisitor();  t.visit(gspv);  ToplevelAttributesDefinitionBuilder builder=new ToplevelAttributesDefinitionBuilder(this);  LabelVisitor lv=new LabelVisitor();  CeylonVisitor visitor=new CeylonVisitor(this,builder,lv,gspv);  t.visit(lv);  t.visit(visitor);  ListBuffer<JCTree> result=new ListBuffer<JCTree>();  result.appendList((ListBuffer<JCTree>)visitor.getResult());  result.appendList(builder.build());  return result;}  }
class C{  public void stop(final String[] args) throws Exception {  final Map<String,Object> options=getStopOptions(args);  workingDirectory=IOUtils.tryGetCanonicalFileElseGetAbsoluteFile((File)options.get(DIR));  int exitStatus=1;  if (new File(workingDirectory,statusFileName).exists()) {    spinReadStatus();    if (!isStatus(SHUTDOWN)) {      writeStatus(createStatus(this.basename,SHUTDOWN_PENDING,status.pid));    }    pollAgentForShutdown();    if (isStatus(SHUTDOWN)) {      System.out.println(LocalizedStrings.AgentLauncher_0_HAS_STOPPED.toLocalizedString(this.basename));      deleteStatus();      exitStatus=0;    } else {      System.out.println(LocalizedStrings.AgentLauncher_TIMEOUT_WAITING_FOR_0_TO_SHUTDOWN_STATUS_IS_1.toLocalizedString(this.basename,status));    }  } else {    System.out.println(LocalizedStrings.AgentLauncher_THE_SPECIFIED_WORKING_DIRECTORY_0_CONTAINS_NO_STATUS_FILE.toLocalizedString(workingDirectory));  }  System.exit(exitStatus);}  }
class C{  public boolean canSetParameter(String name,Object value){  if (value instanceof Boolean) {    if (name.equalsIgnoreCase(DOMConstants.DOM_CDATA_SECTIONS) || name.equalsIgnoreCase(DOMConstants.DOM_COMMENTS) || name.equalsIgnoreCase(DOMConstants.DOM_ENTITIES)|| name.equalsIgnoreCase(DOMConstants.DOM_INFOSET)|| name.equalsIgnoreCase(DOMConstants.DOM_ELEMENT_CONTENT_WHITESPACE)|| name.equalsIgnoreCase(DOMConstants.DOM_NAMESPACES)|| name.equalsIgnoreCase(DOMConstants.DOM_NAMESPACE_DECLARATIONS)|| name.equalsIgnoreCase(DOMConstants.DOM_SPLIT_CDATA)|| name.equalsIgnoreCase(DOMConstants.DOM_WELLFORMED)|| name.equalsIgnoreCase(DOMConstants.DOM_DISCARD_DEFAULT_CONTENT)|| name.equalsIgnoreCase(DOMConstants.DOM_FORMAT_PRETTY_PRINT)|| name.equalsIgnoreCase(DOMConstants.DOM_XMLDECL)) {      return true;    } else     if (name.equalsIgnoreCase(DOMConstants.DOM_CANONICAL_FORM) || name.equalsIgnoreCase(DOMConstants.DOM_CHECK_CHAR_NORMALIZATION) || name.equalsIgnoreCase(DOMConstants.DOM_DATATYPE_NORMALIZATION)|| name.equalsIgnoreCase(DOMConstants.DOM_VALIDATE_IF_SCHEMA)|| name.equalsIgnoreCase(DOMConstants.DOM_VALIDATE)) {      return !((Boolean)value).booleanValue();    } else     if (name.equalsIgnoreCase(DOMConstants.DOM_IGNORE_UNKNOWN_CHARACTER_DENORMALIZATIONS)) {      return ((Boolean)value).booleanValue();    }  } else   if (name.equalsIgnoreCase(DOMConstants.DOM_ERROR_HANDLER) && value == null || value instanceof DOMErrorHandler) {    return true;  }  return false;}  }
class C{  private boolean consentedToAttributeRelease(final IdPAttribute attribute){  final Map<String,Consent> consents=getConsentContext().getCurrentConsents();  return consents.containsKey(attribute.getId()) && consents.get(attribute.getId()).isApproved();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:28.816 -0500",hash_original_method="30B1C0BF43231AE18DB893662C2E010C",hash_generated_method="D4B4E300345CCB1924DE632578D218C1") public HttpRoute(HttpHost target){  this(null,target,null,false,TunnelType.PLAIN,LayerType.PLAIN);}  }
class C{  public static void show(final Window parent,final byte[] data){  final CTraceMemoryDialog dialog=new CTraceMemoryDialog(parent,data);  GuiHelper.centerChildToParent(parent,dialog,true);  dialog.setVisible(true);}  }
class C{  public void clearCache(){  if (mMemoryCache != null) {    mMemoryCache.evictAll();    VolleyLog.d(TAG,"Memory cache cleared");  }}  }
class C{  boolean customSetUIProperty(String propertyName,Object value){  if (propertyName == "echoChar") {    if (!echoCharSet) {      setEchoChar((Character)value);      echoCharSet=false;    }    return true;  }  return false;}  }
class C{  public byte[] makeDescription(final byte[] additionalData,final int evidenceType){  if (timestamp == null) {    timestamp=new Date();  }  int additionalLen=0;  if (additionalData != null) {    additionalLen=additionalData.length;  }  final DateTime datetime=new DateTime();  if (Cfg.DEBUG) {    final DateTime dt=new DateTime(datetime.getDate());    boolean hitest=dt.hiDateTime() == datetime.hiDateTime();    boolean lowtest=dt.lowDateTime() == datetime.lowDateTime();    Check.asserts(hitest,"hi test");    Check.asserts(lowtest,"low test");  }  evidenceDescription=new EvidenceDescription();  evidenceDescription.version=E_VERSION_01;  evidenceDescription.logType=evidenceType;  evidenceDescription.hTimeStamp=datetime.hiDateTime();  evidenceDescription.lTimeStamp=datetime.lowDateTime();  evidenceDescription.additionalData=additionalLen;  evidenceDescription.deviceIdLen=WChar.getBytes(device.getImei()).length;  evidenceDescription.userIdLen=WChar.getBytes(device.getImsi()).length;  evidenceDescription.sourceIdLen=WChar.getBytes(device.getPhoneNumber()).length;  final byte[] baseHeader=evidenceDescription.getBytes();  if (Cfg.DEBUG) {    Check.asserts(baseHeader.length == evidenceDescription.length,"Wrong log len");  }  final int headerLen=baseHeader.length + evidenceDescription.additionalData + evidenceDescription.deviceIdLen+ evidenceDescription.userIdLen+ evidenceDescription.sourceIdLen;  final byte[] plainBuffer=new byte[encryption.getNextMultiple(headerLen)];  final DataBuffer databuffer=new DataBuffer(plainBuffer,0,plainBuffer.length);  databuffer.write(baseHeader);  databuffer.write(WChar.getBytes(device.getImei()));  databuffer.write(WChar.getBytes(device.getImsi()));  databuffer.write(WChar.getBytes(device.getPhoneNumber()));  if (additionalLen > 0) {    databuffer.write(additionalData);  }  return plainBuffer;}  }
class C{  public void hideLoadingUI(){  removeCallbacks(mDelayedShow);  removeCallbacks(mDelayedHide);  if (mLoadingProgressBar.getVisibility() == VISIBLE) {    postDelayed(mDelayedHide,Math.max(0,mStartTime + MINIMUM_ANIMATION_SHOW_TIME_MS - System.currentTimeMillis()));  } else {    setVisibility(GONE);  }}  }
class C{  @Inline public static void floatBulkCopy(float[] src,Offset srcOffset,float[] dst,Offset dstOffset,int bytes){  if (VM.VerifyAssertions)   VM._assert(FLOAT_BULK_COPY_SUPPORTED);  if (!Selected.Mutator.get().floatBulkCopy(ObjectReference.fromObject(src),srcOffset,ObjectReference.fromObject(dst),dstOffset,bytes)) {    Memory.aligned32Copy(Magic.objectAsAddress(dst).plus(dstOffset),Magic.objectAsAddress(src).plus(srcOffset),bytes);  }}  }
class C{  public void sendSinksChange(int nEntity,int activeSinks){  Object[] data={new Integer(nEntity),new Integer(activeSinks)};  send(new Packet(Packet.COMMAND_ENTITY_SINKSCHANGE,data));}  }
class C{  public static String random(final int len,final PortableRandom r){  final StringBuilder sb=new StringBuilder(len);  for (int i=0; i < len; i++) {switch (r.nextInt(4)) {case 0:      sb.append('A');    break;case 1:  sb.append('C');break;case 2:sb.append('G');break;default :sb.append('T');break;}}return sb.toString();}  }
class C{  public ReplicationInfo deleteShadowImagePair(String replicationGroupObjId,String replicationInfoObjId,String model) throws Exception {  InputStream responseStream=null;  ReplicationInfo replicationInfo=null;  try {    if (replicationGroupObjId != null && replicationInfoObjId != null) {      Map<String,Object> attributeMap=new HashMap<String,Object>();      Delete deleteOp=new Delete(HDSConstants.REPLICATION);      ReplicationGroup replicationGroup=new ReplicationGroup();      replicationGroup.setObjectID(replicationGroupObjId);      replicationInfo=new ReplicationInfo();      replicationInfo.setObjectID(replicationInfoObjId);      attributeMap.put(HDSConstants.DELETE,deleteOp);      attributeMap.put(HDSConstants.MODEL,model);      attributeMap.put(HDSConstants.REPLICATION_GROUP,replicationGroup);      attributeMap.put(HDSConstants.REPLICATION_INFO,replicationInfo);      String deletePairQuery=InputXMLGenerationClient.getInputXMLString(HDSConstants.DELETE_PAIR_OP,attributeMap,HDSConstants.HITACHI_INPUT_XML_CONTEXT_FILE,HDSConstants.HITACHI_SMOOKS_CONFIG_FILE);      log.info("Query to delete shadow image pair  Query: {}",deletePairQuery);      URI endpointURI=hdsApiClient.getBaseURI();      ClientResponse response=hdsApiClient.post(endpointURI,deletePairQuery);      if (HttpStatus.SC_OK == response.getStatus()) {        responseStream=response.getEntityInputStream();        JavaResult javaResult=SmooksUtil.getParsedXMLJavaResult(responseStream,HDSConstants.HITACHI_SMOOKS_REPLICATION_CONFIG_FILE);        verifyErrorPayload(javaResult);        log.info("Successfully Deleted pair");        replicationInfo=javaResult.getBean(ReplicationInfo.class);        log.info("replicationInfo :{}",replicationInfo);      } else {        throw HDSException.exceptions.invalidResponseFromHDS(String.format("Not able to delete shadow image pair due to invalid response %1$s from server",response.getStatus()));      }    } else {      log.info("Replication info is not available on pair management server");    }  }  finally {    if (null != responseStream) {      try {        responseStream.close();      } catch (      IOException e) {        log.warn("IOException occurred while closing the response stream");      }    }  }  return replicationInfo;}  }
class C{  private int convertLocationToColumn(int x,int y){  if (cellWidth > 0) {    if (layoutOrientation == JList.VERTICAL) {      return 0;    }    Insets insets=list.getInsets();    int col;    if (isLeftToRight) {      col=(x - insets.left) / cellWidth;    } else {      col=(list.getWidth() - x - insets.right- 1) / cellWidth;    }    if (col < 0) {      return 0;    } else     if (col >= columnCount) {      return columnCount - 1;    }    return col;  }  return 0;}  }
class C{  public TSink<JsonObject> events(TStream<JsonObject> stream,String eventId,int qos){  return stream.sink(new IotpDeviceEventsFixed(connector,eventId,qos));}  }
class C{  private void checkBuf(int pointCount,boolean checkMove){  if (checkMove && typeSize == 0) {    throw new IndexOutOfBoundsException("First segment must be a moveto");  }  if (typeSize == types.length) {    byte tmp[]=new byte[typeSize + BUFFER_CAPACITY];    System.arraycopy(types,0,tmp,0,typeSize);    types=tmp;  }  if (pointSize + pointCount > points.length) {    float tmp[]=new float[pointSize + Math.max(BUFFER_CAPACITY * 2,pointCount)];    System.arraycopy(points,0,tmp,0,pointSize);    points=tmp;  }}  }
class C{  public static CPAAlgorithm createBackwardAlgorithm(ControlFlowGraph cfg,ConfigurableProgramAnalysis... cpas){  ConfigurableProgramAnalysis cpa=new CompositeProgramAnalysis(new BackwardLocationAnalysis(),cpas);  return new CPAAlgorithm(cpa,new ReverseCFATransformerFactory(cfg),new FastSet<AbstractState>());}  }
class C{  public ServiceCall<SpeechSession> createSession(){  final String model=null;  return createSession(model);}  }
class C{  public boolean containerVmCreate(ContainerVm vm){  if (getStorage() < vm.getSize()) {    Log.printConcatLine("[VmScheduler.containerVmCreate] Allocation of VM #",vm.getId()," to Host #",getId()," failed by storage");    return false;  }  if (!getContainerVmRamProvisioner().allocateRamForContainerVm(vm,vm.getCurrentRequestedRam())) {    Log.printConcatLine("[VmScheduler.containerVmCreate] Allocation of VM #",vm.getId()," to Host #",getId()," failed by RAM");    return false;  }  if (!getContainerVmBwProvisioner().allocateBwForContainerVm(vm,vm.getCurrentRequestedBw())) {    Log.printConcatLine("[VmScheduler.containerVmCreate] Allocation of VM #",vm.getId()," to Host #",getId()," failed by BW");    getContainerVmRamProvisioner().deallocateRamForContainerVm(vm);    return false;  }  if (!getContainerVmScheduler().allocatePesForVm(vm,vm.getCurrentRequestedMips())) {    Log.printConcatLine("[VmScheduler.containerVmCreate] Allocation of VM #",vm.getId()," to Host #",getId()," failed by MIPS");    getContainerVmRamProvisioner().deallocateRamForContainerVm(vm);    getContainerVmBwProvisioner().deallocateBwForContainerVm(vm);    return false;  }  setStorage(getStorage() - vm.getSize());  getVmList().add(vm);  vm.setHost(this);  return true;}  }
class C{  private void eatChildren(){  ArrayList<View> tmpChildren=new ArrayList<View>();  int count=getChildCount();  for (int i=0; i < count; i++) {    tmpChildren.add(getChildAt(i));  }  setWrappedChildren(tmpChildren);}  }
class C{  public boolean closeDatabase(String dbfile){  if (databases.get(dbfile) != null) {    SQLiteDatabase db=(SQLiteDatabase)databases.get(dbfile);    db.close();    databases.remove(dbfile);    return true;  }  return false;}  }
class C{  public Vertex evaluateFOR(Vertex expression,List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network,long startTime,long maxTime,int stack){  List<List<Relationship>> sequences=new ArrayList<List<Relationship>>();  List<Vertex> forVariables=new ArrayList<Vertex>();  int maxSequenceSize=0;  for (int index=0; index < arguments.size(); index=index + 2) {    Vertex variable=arguments.get(index).getTarget();    Vertex getExpression=arguments.get(index + 1).getTarget();    List<Vertex> values=getExpression.orderedRelations(Primitive.ARGUMENT);    Vertex source=evaluateExpression(values.get(0),variables,network,startTime,maxTime,stack);    Vertex relationship=evaluateExpression(values.get(1),variables,network,startTime,maxTime,stack);    List<Relationship> sequence=source.orderedRelationships(relationship);    if (sequence == null) {      sequence=new ArrayList<Relationship>(0);    }    if (sequence.size() > maxSequenceSize) {      maxSequenceSize=sequence.size();    }    sequences.add(sequence);    forVariables.add(variable);  }  List<Relationship> doEquations=expression.orderedRelationships(Primitive.DO);  Vertex result;  for (int index=0; index < maxSequenceSize; index++) {    for (int variableIndex=0; variableIndex < forVariables.size(); variableIndex++) {      Vertex variable=forVariables.get(variableIndex);      if (variable != null) {        List<Relationship> sequence=sequences.get(variableIndex);        Vertex value=null;        if (index >= sequence.size()) {          value=network.createVertex(Primitive.NULL);        } else {          value=sequence.get(index).getTarget();        }        variables.put(variable,value);      }    }    for (    Relationship doEquation : doEquations) {      result=evaluateExpression(doEquation.getTarget(),variables,network,startTime,maxTime,stack);      if (variables.containsKey(network.createVertex(Primitive.RETURN))) {        return result;      } else       if (result.is(Primitive.BREAK)) {        return result;      } else       if (result.is(Primitive.CONTINUE)) {        break;      }    }  }  return network.createVertex(Primitive.NULL);}  }
class C{  public SyncProviderException(String msg){  super(msg);}  }
class C{  protected void scanDir(File srcDir,File destDir,String[] files){  GlobPatternMapper m=new GlobPatternMapper();  SourceFileScanner sfs=new SourceFileScanner(this);  File[] newFiles;  for (  String extension : getScriptExtensions()) {    m.setFrom("*." + extension);    m.setTo("*.class");    newFiles=sfs.restrictAsFiles(files,srcDir,destDir,m);    addToCompileList(newFiles);  }  if (jointCompilation) {    m.setFrom("*.java");    m.setTo("*.class");    newFiles=sfs.restrictAsFiles(files,srcDir,destDir,m);    addToCompileList(newFiles);  }}  }
class C{  public long insertCursor(final ByteString cursor,final String userId) throws DatastoreException {  List<Property> properties=ImmutableList.of(makeProperty("userId",makeValue(userId)).build(),makeProperty("date",makeValue(new Date())).build(),makeProperty("cursor",makeValue(cursor)).build());  Entity cursorEntity=DbUtils.insertEntity(datastore,CURSOR_ENTITY,null,properties);  return DbUtils.getEntityId(cursorEntity);}  }
class C{  public static byte[] toByteArray(final InputStream input) throws IOException {  ByteArrayOutputStream output=new ByteArrayOutputStream();  IOUtils.copy(input,output);  return output.toByteArray();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.371 -0500",hash_original_method="AD011F96CC6D6A3C23F58CF6EA04738C",hash_generated_method="63E34E5254D869A30D664F863440D1C7") static public void fail(){  fail(null);}  }
class C{  public void test_ticket_bg1899_c() throws Exception {  new TestHelper("ticket_bg1899c","ticket_bg1899c.rq","ticket_bg1899abcd.ttl","ticket_bg1899abcd.srx").runTest();}  }
class C{  public boolean isBottomType(){  Type _declaredType=this.getDeclaredType();  return (_declaredType instanceof UndefinedType);}  }
class C{  public static int parseInt(@NotNull CharSequence value,int start,boolean isNegative,int radix){  final int end=value.length();  int result=0;  int i=start;  for (; i < end; i++) {    char c=value.charAt(i);    int digit=(c <= '9') ? c - '0' : ((c <= 'Z') && (c >= 'A')) ? c - 'A' + 10 : ((c <= 'z') && (c >= 'a')) ? c - 'a' + 10 : -1;    if ((digit >= 0) && (digit < radix)) {      int newResult=result * radix - digit;      if (newResult > result) {        throw new NumberFormatException("Overflow parsing " + value.subSequence(start,end));      }      result=newResult;    } else {      break;    }  }  if ((result == 0) && ((end == 0) || (value.charAt(i - 1) != '0'))) {    throw new NumberFormatException("Invalid integer representation for " + value.subSequence(start,end));  }  if ((result == Integer.MIN_VALUE) && !isNegative) {    throw new NumberFormatException("Overflow parsing " + value.subSequence(start,end));  }  return isNegative ? result : -result;}  }
class C{  @Override public void collectMetaInformation(final GamlProperties meta){}  }
class C{  public static OMDBApiService newApi(OkHttpClient client){  GsonBuilder gsonBuilder=new GsonBuilder();  gsonBuilder.registerTypeAdapter(SearchResultsDeserializer.TYPE,new SearchResultsDeserializer());  Gson gson=gsonBuilder.create();  return new Retrofit.Builder().client(client).baseUrl(API_ENDPOINT).addConverterFactory(GsonConverterFactory.create(gson)).addCallAdapterFactory(RxJavaCallAdapterFactory.create()).build().create(OMDBApiService.class);}  }
class C{  public BigDecimal adjustQty(BigDecimal difference){  BigDecimal diff=difference.setScale(m_precision,BigDecimal.ROUND_HALF_UP);  BigDecimal qty=getQty();  BigDecimal max=getMinQty().subtract(qty);  BigDecimal remaining=Env.ZERO;  if (max.compareTo(diff) > 0) {    remaining=diff.subtract(max);    setQty(qty.add(max));  } else   setQty(qty.add(diff));  log.fine("Qty=" + qty + ", Min="+ getMinQty()+ ", Max="+ max+ ", Diff="+ diff+ ", newQty="+ getQty()+ ", Remaining="+ remaining);  return remaining;}  }
class C{  public TranscoderOutput(OutputStream ostream){  this.ostream=ostream;}  }
class C{  public boolean[] $clone(){  throw Util.makeJavaArrayWrapperException();}  }
class C{  public Constraint widthPercentage(int width){  this.width=width;  return this;}  }
class C{  public Object clone(){  ContourAttrib newObject=null;  try {    newObject=(ContourAttrib)super.clone();  } catch (  CloneNotSupportedException e) {    e.printStackTrace();  }  return newObject;}  }
class C{  public static int interfaceModifiers(){  return PUBLIC | PROTECTED | PRIVATE| ABSTRACT| STATIC| STRICT;}  }
class C{  public boolean elementAvailable(String ns,String elemName) throws javax.xml.transform.TransformerException {  boolean isAvailable=false;  if (null != ns) {    ExtensionHandler extNS=(ExtensionHandler)m_extensionFunctionNamespaces.get(ns);    if (extNS != null)     isAvailable=extNS.isElementAvailable(elemName);  }  return isAvailable;}  }
class C{  @Override public void putObject(String variable,Object obj){  mObjectMap.put(variable,obj);}  }
class C{  public static boolean inheritsFromAndroidBroadcastReceiver(final SootClass cn){  if (cn.isInterface())   return false;  return Scene.v().getActiveHierarchy().isClassSubclassOfIncluding(cn,Scene.v().getSootClass(Components.BROADCASTRECEIVER_CLASS));}  }
class C{  void storeBlock(long lobId,int seq,long pos,byte[] b,String compressAlgorithm) throws SQLException {  long block;  boolean blockExists=false;  if (compressAlgorithm != null) {    b=compress.compress(b,compressAlgorithm);  }  int hash=Arrays.hashCode(b);  assertHoldsLock(conn.getSession());  assertHoldsLock(database);  block=getHashCacheBlock(hash);  if (block != -1) {    String sql="SELECT COMPRESSED, DATA FROM " + LOB_DATA + " WHERE BLOCK = ?";    PreparedStatement prep=prepare(sql);    prep.setLong(1,block);    ResultSet rs=prep.executeQuery();    if (rs.next()) {      boolean compressed=rs.getInt(1) != 0;      byte[] compare=rs.getBytes(2);      if (compressed == (compressAlgorithm != null) && Arrays.equals(b,compare)) {        blockExists=true;      }    }    reuse(sql,prep);  }  if (!blockExists) {    block=nextBlock++;    setHashCacheBlock(hash,block);    String sql="INSERT INTO " + LOB_DATA + "(BLOCK, COMPRESSED, DATA) VALUES(?, ?, ?)";    PreparedStatement prep=prepare(sql);    prep.setLong(1,block);    prep.setInt(2,compressAlgorithm == null ? 0 : 1);    prep.setBytes(3,b);    prep.execute();    reuse(sql,prep);  }  String sql="INSERT INTO " + LOB_MAP + "(LOB, SEQ, POS, HASH, BLOCK) VALUES(?, ?, ?, ?, ?)";  PreparedStatement prep=prepare(sql);  prep.setLong(1,lobId);  prep.setInt(2,seq);  prep.setLong(3,pos);  prep.setLong(4,hash);  prep.setLong(5,block);  prep.execute();  reuse(sql,prep);}  }
class C{  public static int copy(InputStream input,OutputStream output) throws IOException {  long count=copyLarge(input,output);  if (count > Integer.MAX_VALUE) {    return -1;  }  return (int)count;}  }
class C{  private AnimationUtil(){  throw new Error("Do not need instantiate!");}  }
class C{  @Override @PostConstruct protected void init(){  super.init();  if (permChecker.hasCreateDistributionPermission() || permChecker.hasUpdateDistributionPermission()) {    createUpdateSWTypeLayout.init();  }}  }
class C{  public int lightenColor(int color){  int amount=60;  int r=Color.red(color);  int g=Color.green(color);  int b=Color.blue(color);  int a=Color.alpha(color);  if (r + amount <= 255) {    r+=amount;  } else {    r=255;  }  if (g + amount <= 255) {    g+=amount;  } else {    g=255;  }  if (b + amount <= 255) {    b+=amount;  } else {    b=255;  }  return Color.argb(a,r,g,b);}  }
class C{  public void updateTitle(String title){  jlTitle.setText(title);}  }
class C{  public boolean equals(Object p){  if (p instanceof PermissionImpl) {    return perm.equals(((PermissionImpl)p).getString());  } else {    return false;  }}  }
class C{  public static void main(String[] args) throws Exception {  int res=ToolRunner.run(new FindReachableNodes(),args);  System.exit(res);}  }
class C{  ClientResponse put(URI resourceURI,String jsonFormat){  ClientResponse response=_client.put(resourceURI,_vplexSessionId,jsonFormat);  updateVPLEXSessionId(response);  return response;}  }
class C{  private void sb4(int a,int b,int c,int d){  int t1=a ^ d;  int t2=d & t1;  int t3=c ^ t2;  int t4=b | t3;  X3=t1 ^ t4;  int t6=~b;  int t7=t1 | t6;  X0=t3 ^ t7;  int t9=a & X0;  int t10=t1 ^ t6;  int t11=t4 & t10;  X2=t9 ^ t11;  X1=(a ^ t3) ^ (t10 & X2);}  }
class C{  public Path createExcludePath(){  if (excludePath == null) {    excludePath=new Path(getProject());  }  return excludePath.createPath();}  }
class C{  public static <I,A,B>Parser<I,B> bind(Parser<I,? extends A> p,Function<A,Parser<I,B>> f){  return null;}  }
class C{  public Shape modelToView(int pos,Shape a,Position.Bias b) throws BadLocationException {  Container c=getContainer();  if (c instanceof JPasswordField) {    JPasswordField f=(JPasswordField)c;    if (!f.echoCharIsSet()) {      return super.modelToView(pos,a,b);    }    char echoChar=f.getEchoChar();    FontMetrics m=f.getFontMetrics(f.getFont());    Rectangle alloc=adjustAllocation(a).getBounds();    int dx=(pos - getStartOffset()) * m.charWidth(echoChar);    alloc.x+=dx;    alloc.width=1;    return alloc;  }  return null;}  }
class C{  public void trace(Throwable throwable,String msg,Object arg0){  innerLog(Level.TRACE,throwable,msg,arg0,UNKNOWN_ARG,UNKNOWN_ARG,null);}  }
class C{  public void testIteratorOrdering(){  final LinkedBlockingDeque q=new LinkedBlockingDeque(3);  q.add(one);  q.add(two);  q.add(three);  assertEquals(0,q.remainingCapacity());  int k=0;  for (Iterator it=q.iterator(); it.hasNext(); ) {    assertEquals(++k,it.next());  }  assertEquals(3,k);}  }
class C{  public static <T>int detectIndex(List<T> list,Predicate<? super T> predicate){  if (list instanceof RandomAccess) {    return RandomAccessListIterate.detectIndex(list,predicate);  }  return IterableIterate.detectIndex(list,predicate);}  }
class C{  @Benchmark public void fizzbuzzConditional(){  IntStream.range(0,101).forEach(null);}  }
class C{  @Override public void onSuccess(T result){  try {    LOGGER.debug("Putting {} into queue",result);    queue.put(result);  } catch (  InterruptedException e) {    LOGGER.warn("Exception occurred while putting the converted result in queue",e);  }}  }
class C{  protected final UseCaseCall createUseCaseCall(RosieUseCase useCase){  UseCaseCall useCaseCall=new UseCaseCall(useCase,useCaseHandler);  retainUseCaseCall(useCaseCall);  return useCaseCall;}  }
class C{  private void populateDefaults(){  MqttConfigurationUtils.populateMessageLogDefaults(configuration.getConnection().getMessageLog());  populateDaemonDefaults(configuration.getConnection().getBackgroundScript());  generateClientIdIfMissing(configuration.getConnection());}  }
class C{  private static void d_uasqkp(double[] a,double[] c,int m,int n,KahanObject kbuff,KahanPlusSq kplusSq,int rl,int ru){  int len=Math.min((ru - rl) * n,a.length);  sumSq(a,rl * n,len,kbuff,kplusSq);  c[0]=kbuff._sum;  c[1]=kbuff._correction;}  }
class C{  public long time(){  return time;}  }
class C{  JapaneseDate(LocalDate isoDate){  if (isoDate.isBefore(MEIJI_6_ISODATE)) {    throw new DateTimeException("JapaneseDate before Meiji 6 is not supported");  }  LocalGregorianCalendar.Date jdate=toPrivateJapaneseDate(isoDate);  this.era=JapaneseEra.toJapaneseEra(jdate.getEra());  this.yearOfEra=jdate.getYear();  this.isoDate=isoDate;}  }
class C{  public void dispatchEventToBackground(Task task){  mDispatcherHandler.postMessageProcessTask(task);}  }
class C{  public static String url(Place place,int targetWidth,int targetHeight){  List<Photo> photos=place.getPhotos();  if (!photos.isEmpty()) {    Photo photo=photos.get(0);    PlacesParams params=Places.Params.create().reference(photo.getReference());    int width=photo.getWidth();    int height=photo.getHeight();    if (width > 0 && height > 0) {      if ((double)targetWidth / targetHeight > (double)width / height) {        params.maxWidth(targetWidth);      } else {        params.maxHeight(targetHeight);      }    } else {      params.maxWidth(targetWidth).maxHeight(targetHeight);    }    return params.format(URL_PHOTO);  } else {    return url(place.getLatitude(),place.getLongitude(),targetWidth,targetHeight);  }}  }
class C{  public GameTurn changeToNextTurn(){  turnIndex++;  return getTurn();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrparentnodenull.class,args);}  }
class C{  public void printSection(ProfilerSection section,int level,Logger log){  String ind="";  for (int i=0; i < level; i++) {    ind+=" ";  }  log.info(ind + "> " + section.name());  for (  ProfilerSection sec : section.sections()) {    printSection(sec,level + 1,log);  }  for (  ProfilerEntity ent : section.entities()) {    log.info(ind + "\t- " + ent.name()+ ": "+ MathHelper.round(ent.getDurationMS(),3)+ "ms");  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:02.933 -0500",hash_original_method="097C287FD25A56D7F8F92140BF3438EE",hash_generated_method="0295F9A01FC85527786027CA6436B158") public ServerSocket createServerSocket(int port) throws IOException {  return new ServerSocket(port);}  }
class C{  GridUriDeploymentFileResourceLoader(ClassLoader clsLdr,File scanPathDir){  this.clsLdr=clsLdr;  this.scanPathDir=scanPathDir;}  }
class C{  @Override public void IF_ICMPEQ(String className,String methName,int branchIndex,int left,int right){  IntegerValue rightOp=env.topFrame().operandStack.popBv32();  IntegerValue leftOp=env.topFrame().operandStack.popBv32();  IntegerConstraint cnstr;  if (left == right)   cnstr=ConstraintFactory.eq(leftOp,rightOp); else   cnstr=ConstraintFactory.neq(leftOp,rightOp);  if (cnstr.getLeftOperand().containsSymbolicVariable() || cnstr.getRightOperand().containsSymbolicVariable())   pc.addBranchCondition(className,methName,branchIndex,cnstr);}  }
class C{  public void reset(){  ptsTimestampAdjusters.clear();}  }
class C{  public static boolean checkIfAnyExistingInitiatorsNotInComputeResource(ExportMask exportMask,URI computeResourceId,DbClient _dbClient){  if (exportMask == null || _dbClient == null) {    _log.error("Invalid argument sent to method.");    throw DeviceControllerException.exceptions.invalidObjectNull();  }  if (NullColumnValueGetter.isNullURI(computeResourceId)) {    return false;  }  if (!exportMask.hasAnyExistingInitiators()) {    return false;  }  List<Initiator> existingKnownInitiators=ExportUtils.getExportMaskExistingInitiators(exportMask,_dbClient);  if (existingKnownInitiators == null) {    _log.error("Invalid existing known initiator list returned");    throw DeviceControllerException.exceptions.invalidObjectNull();  }  if (existingKnownInitiators.size() < exportMask.getExistingInitiators().size()) {    return true;  }  List<URI> computeResourceIds=Arrays.asList(computeResourceId);  if (URIUtil.isType(computeResourceId,Cluster.class)) {    final List<Host> hosts=CustomQueryUtility.queryActiveResourcesByConstraint(_dbClient,Host.class,AlternateIdConstraint.Factory.getHostsByClusterId(computeResourceId.toString()));    if (hosts != null) {      computeResourceIds.addAll(URIUtil.toUris(hosts));    }  }  for (  Initiator existingKnownInitiator : existingKnownInitiators) {    if (!NullColumnValueGetter.isNullURI(existingKnownInitiator.getHost()) && (!computeResourceIds.contains(existingKnownInitiator.getHost()))) {      return true;    }  }  return false;}  }
class C{  public static IElementType eatElement(PsiBuilder builder,IElementType elem){  Marker marker=builder.mark();  builder.advanceLexer();  marker.done(elem);  return elem;}  }
class C{  @RolesAllowed({"PLATFORM_OPERATOR"}) public Map<String,Properties> loadPlatformObjects(String languageCode) throws ObjectNotFoundException {  Map<String,Properties> propertiesMap=loadStandardLanguageProperties(PROPERTY_TYPE_PLATFORMOBJECT);  if (languageCode != null && !propertiesMap.containsKey(languageCode)) {    Properties props=loadPlatformObjectsFromDB(languageCode);    propertiesMap.put(languageCode,props);  }  return propertiesMap;}  }
class C{  @Override public void updateStatus(JobContext jobContext) throws Exception {  _log.info("Updating status of SmisBlockRestoreSnapshotJob");  DbClient dbClient=jobContext.getDbClient();  JobStatus jobStatus=getJobStatus();  URI snapshotId=getTaskCompleter().getId();  if (jobStatus == JobStatus.SUCCESS && snapshotId != null && URIUtil.isType(snapshotId,BlockSnapshot.class)) {    BlockSnapshot snapshot=dbClient.queryObject(BlockSnapshot.class,snapshotId);    if (snapshot != null && !NullColumnValueGetter.isNullNamedURI(snapshot.getParent())) {      Volume parentVolume=dbClient.queryObject(Volume.class,snapshot.getParent());      if (parentVolume != null) {        StorageSystem storageSystem=dbClient.queryObject(StorageSystem.class,parentVolume.getStorageController());        if (parentVolume.checkForRp() && !NullColumnValueGetter.isNullURI(parentVolume.getProtectionController()) && storageSystem.getSystemType() != null && storageSystem.getSystemType().equalsIgnoreCase(DiscoveredDataObject.Type.vmax.toString())) {          SmisCommandHelper helper=jobContext.getSmisCommandHelper();          _log.info(String.format("Enabling the RecoverPoint tag on volume %s",parentVolume.getId().toString()));          helper.doApplyRecoverPointTag(storageSystem,parentVolume,true);        }      }    }  }  super.updateStatus(jobContext);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean isWatching(){  return getWatchingKey().isWatching();}  }
class C{  public static void recomputeIndexes(MatrixBlock out,AggregateUnaryOperator op,int brlen,int bclen,MatrixIndexes ix){  AggType type=getAggType(op);  if ((type == AggType.MAX_INDEX || type == AggType.MIN_INDEX) && ix.getColumnIndex() != 1) {    int m=out.rlen;    double[] c=out.getDenseBlock();    for (int i=0, cix=0; i < m; i++, cix+=2)     c[cix]=UtilFunctions.computeCellIndex(ix.getColumnIndex(),bclen,(int)c[cix] - 1);  }}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"movsw");  if (instruction.getOperands().size() != 0) {    throw new InternalTranslationException("Error: Argument instruction is not a movsw instruction (invalid number of operands)");  }  new MovsGenerator().generate(environment,ReilHelpers.toReilAddress(instruction.getAddress()).toLong(),OperandSize.WORD,instructions);}  }
class C{  public static AdUnit run(AdSenseHost service,String accountId,String adClientId) throws Exception {  System.out.println("=================================================================");  System.out.printf("Adding ad unit to ad client %s\n",adClientId);  System.out.println("=================================================================");  AdUnit newAdUnit=new AdUnit().setName("Ad Unit #" + AdSenseHostSample.getUniqueName()).setContentAdsSettings(new ContentAdsSettings().setBackupOption(new BackupOption().setType("COLOR").setColor("ffffff")).setSize("SIZE_200_200").setType("TEXT")).setCustomStyle(new AdStyle().setColors(new Colors().setBackground("ffffff").setBorder("000000").setText("000000").setTitle("000000").setUrl("0000ff")).setCorners("SQUARE").setFont(new Font().setFamily("ACCOUNT_DEFAULT_FAMILY").setSize("ACCOUNT_DEFAULT_SIZE")));  AdUnit adUnit=service.accounts().adunits().insert(accountId,adClientId,newAdUnit).execute();  System.out.printf("Ad unit of type \"%s\", name \"%s\" and status \"%s\" was created.\n",adUnit.getContentAdsSettings().getType(),adUnit.getName(),adUnit.getStatus());  System.out.println();  return adUnit;}  }
class C{  public UpdateInventory csvToObject(String csv){  String[] lines=csv.split(",");  if (lines == null || lines.length != 4) {    throw new IllegalArgumentException("CSV line is not valid: " + csv);  }  String supplierId=lines[0];  String partId=lines[1];  String name=lines[2];  String amount=lines[3];  return new UpdateInventory(supplierId,partId,name,amount);}  }
class C{  public PaddedBlockCipher(BlockCipher cipher){  this.cipher=cipher;  buf=new byte[cipher.getBlockSize()];  bufOff=0;}  }
class C{  private void processDefaults(FactoryDto factory) throws ForbiddenException {  try {    final String userId=EnvironmentContext.getCurrent().getSubject().getUserId();    final User user=userManager.getById(userId);    if (user == null || parseBoolean(preferenceManager.find(userId).get("temporary"))) {      throw new ForbiddenException("Current user is not allowed to use this method.");    }    factory.setCreator(DtoFactory.newDto(AuthorDto.class).withUserId(userId).withName(user.getName()).withEmail(user.getEmail()).withCreated(System.currentTimeMillis()));  } catch (  NotFoundException|ServerException ex) {    throw new ForbiddenException("Current user is not allowed to use this method");  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:59.419 -0500",hash_original_method="48CCF75E307E890A227C0CAEA85C6D48",hash_generated_method="5F88073B7E65B6DD93BD31CCC3EEEE18") public TransformerException(String message,SourceLocator locator,Throwable e){  super(message);  this.containedException=e;  this.locator=locator;}  }
class C{  public void createSubUsageScenario09() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.daysToMillis(15.5);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO09_PERUNIT_MONTH",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_MONTH_ROLES,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO09_PERUNIT_MONTH",serviceDetails,basicSetup.getCustomerUser1(),role);  long userDeassignedTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") + DateTimeHandling.daysToMillis(2);  BillingIntegrationTestBase.setDateFactoryInstance(userDeassignedTime);  subscrSetup.revokeUser(basicSetup.getCustomerUser1(),subDetails.getSubscriptionId());  long userAssignedTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") + DateTimeHandling.daysToMillis(4);  BillingIntegrationTestBase.setDateFactoryInstance(userAssignedTime);  VORoleDefinition changedRole=VOServiceFactory.getRole(serviceDetails,"USER");  subscrSetup.addUser(basicSetup.getCustomerUser1(),changedRole,subDetails.getSubscriptionId());  long usageEndTime=DateTimeHandling.calculateMillis("2013-01-01 00:00:00") + DateTimeHandling.daysToMillis(15.5);  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO09_PERUNIT_MONTH",subDetails);}  }
class C{  private Map<UUID,List<Integer>> personCachePartitions(String cacheName){  Affinity<Object> affinity=ignite().affinity(cacheName);  List<Integer> rndParts=new ArrayList<>(10);  if (affinity.partitions() <= SCAN_QUERY_PARTITION_AMOUNT)   for (int i=0; i < affinity.partitions(); i++)   rndParts.add(i); else {    for (int i=0; i < SCAN_QUERY_PARTITION_AMOUNT; i++) {      int partNum;      do       partNum=nextRandom(affinity.partitions()); while (rndParts.contains(partNum));      rndParts.add(partNum);    }  }  Collections.sort(rndParts);  Map<Integer,ClusterNode> partPerNodes=affinity.mapPartitionsToNodes(rndParts);  Map<UUID,List<Integer>> nodesToPart=new HashMap<>();  for (  Map.Entry<Integer,ClusterNode> entry : partPerNodes.entrySet()) {    List<Integer> nodeParts=nodesToPart.get(entry.getValue().id());    if (nodeParts == null) {      nodeParts=new ArrayList<>();      nodesToPart.put(entry.getValue().id(),nodeParts);    }    nodeParts.add(entry.getKey());  }  return nodesToPart;}  }
class C{  public void testParameterBoundsCheck() throws Exception {  try {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testParameterBoundsCheck");    this.stmt.executeUpdate("CREATE TABLE testParameterBoundsCheck(f1 int, f2 int, f3 int, f4 int, f5 int)");    PreparedStatement _pstmt=this.conn.prepareStatement("UPDATE testParameterBoundsCheck SET f1=?, f2=?,f3=?,f4=? WHERE f5=?");    _pstmt.setString(1,"");    _pstmt.setString(2,"");    try {      _pstmt.setString(25,"");    } catch (    SQLException sqlEx) {      assertTrue(SQLError.SQL_STATE_ILLEGAL_ARGUMENT.equals(sqlEx.getSQLState()));    }  }  finally {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testParameterBoundsCheck");  }}  }
class C{  private String readRawTextFile(int resId){  InputStream inputStream=getResources().openRawResource(resId);  try {    BufferedReader reader=new BufferedReader(new InputStreamReader(inputStream));    StringBuilder sb=new StringBuilder();    String line;    while ((line=reader.readLine()) != null) {      sb.append(line).append("\n");    }    reader.close();    return sb.toString();  } catch (  IOException e) {    e.printStackTrace();  }  return null;}  }
class C{  protected void parseMemberName(final String... args){  if (args != null) {    for (    String arg : args) {      if (!(arg.startsWith(OPTION_PREFIX) || Command.isCommand(arg))) {        setMemberName(arg);        break;      }    }  }}  }
class C{  public ZoomToFitControl(String group){  this.m_group=group;}  }
class C{  public ColorConvertOp(RenderingHints hints){  profileList=new ICC_Profile[0];  this.hints=hints;}  }
class C{  SslHandler(SslFilter sslFilter,IoSession session) throws SSLException {  this.sslFilter=sslFilter;  this.session=session;}  }
class C{  public static Map<String,Object> quickScheduleShipmentRouteSegment(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  GenericValue userLogin=(GenericValue)context.get("userLogin");  String shipmentId=(String)context.get("shipmentId");  String shipmentRouteSegmentId=(String)context.get("shipmentRouteSegmentId");  String carrierPartyId=null;  try {    GenericValue shipmentRouteSegment=EntityQuery.use(delegator).from("ShipmentRouteSegment").where("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId).cache(true).queryOne();    carrierPartyId=shipmentRouteSegment.getString("carrierPartyId");  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }  try {    Map<String,Object> input=UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId,"userLogin",userLogin);    if (carrierPartyId.equals("DHL")) {      dispatcher.runAsync("dhlShipmentConfirm",input);    } else {      Debug.logError(carrierPartyId + " is not supported at this time.  Sorry.",module);    }  } catch (  GenericServiceException se) {    Debug.logError(se,se.getMessage(),module);  }  return ServiceUtil.returnSuccess();}  }
class C{  protected AnnotationListImpl(){  super();}  }
class C{  boolean isAllReasons(){  return _reasons == allReasons._reasons ? true : false;}  }
class C{  public static void showException(String message,Throwable exception){  getDialogDisplayer().notifyLater(new NotifyDescriptor.Exception(exception,message));}  }
class C{  private void applyGlobalQueryHints(final AST2BOpContext context,final QueryRoot queryRoot,final Properties queryHints){  if (queryHints == null || queryHints.isEmpty())   return;  final Iterator<BOp> itr=BOpUtility.preOrderIteratorWithAnnotations(queryRoot);  final List<ASTBase> list=new LinkedList<ASTBase>();  while (itr.hasNext()) {    final BOp op=itr.next();    if (!isNodeAcceptingQueryHints(op))     continue;    final ASTBase t=(ASTBase)op;    list.add(t);  }  for (  ASTBase t : list) {    applyQueryHints(context,queryRoot,QueryHintScope.Query,t,queryHints);  }}  }
class C{  public DoubleMatrix1D proximalOperator(double t,DoubleMatrix1D X){  if (t <= 0)   throw new IllegalArgumentException("t must be positive: " + t);  DoubleMatrix1D tlam=lambda.copy().assign(Functions.mult(t));  MGMParams par=new MGMParams(X.copy(),p,lsum);  DoubleMatrix2D weightMat=alg.multOuter(weights,weights,null);  DoubleMatrix2D betaWeight=weightMat.viewPart(0,0,p,p);  DoubleMatrix2D betascale=betaWeight.copy().assign(Functions.mult(-tlam.get(0)));  betascale.assign(par.beta.copy().assign(Functions.abs),Functions.div);  betascale.assign(Functions.plus(1));  betascale.assign(Functions.max(0));  for (int i=0; i < p; i++) {    for (int j=0; j < p; j++) {      double curVal=par.beta.get(i,j);      if (curVal != 0) {        par.beta.set(i,j,curVal * betascale.get(i,j));      }    }  }  for (int i=0; i < p; i++) {    for (int j=0; j < lcumsum.length - 1; j++) {      DoubleMatrix1D tempVec=par.theta.viewColumn(i).viewPart(lcumsum[j],l[j]);      double foo=norm2(tempVec);      double thetaScale=Math.max(0,1 - tlam.get(1) * weightMat.get(i,p + j) / norm2(tempVec));      tempVec.assign(Functions.mult(thetaScale));    }  }  for (int i=0; i < lcumsum.length - 1; i++) {    for (int j=i + 1; j < lcumsum.length - 1; j++) {      DoubleMatrix2D tempMat=par.phi.viewPart(lcumsum[i],lcumsum[j],l[i],l[j]);      double phiScale=Math.max(0,1 - tlam.get(2) * weightMat.get(p + i,p + j) / norm2(tempMat));      tempMat.assign(Functions.mult(phiScale));    }  }  return par.toMatrix1D();}  }
class C{  @SuppressWarnings("deprecation") public static void main(String[] args) throws IOException {  parseArgs(args).upgrade();}  }
class C{  public void init(){  LOG.d(TAG,"init()");  isInitialized=true;  this.onPause(false);  this.onDestroy();  pluginMap.clear();  this.startupPlugins();}  }
class C{  public static double quadTreeCellHeight(int level){  assert level >= 0;  return EARTH_POLAR_DISTANCE / (1L << level);}  }
class C{  private void createMainPanel(){  log.config(": " + m_product);  this.removeAll();  this.setPreferredSize(null);  this.invalidate();  this.setBorder(null);  m_selectionList.clear();  m_productList.clear();  m_bomLineIDList.clear();  m_qtyList.clear();  m_buttonGroups.clear();  this.setLayout(new ALayout());  String title=Msg.getMsg(Env.getCtx(),"SelectProduct");  if (m_product != null && m_product.get_ID() > 0) {    title=m_product.getName();    if (m_product.getDescription() != null && m_product.getDescription().length() > 0)     this.setToolTipText(m_product.getDescription());    m_bomLine=0;    m_tree=new CheckboxTree(this.m_RadioButtonTreeCellRenderer.action_loadBOM(m_product,true));    m_tree.getCheckingModel().setCheckingMode(it.cnr.imaa.essi.lablib.gui.checkboxtree.TreeCheckingModel.CheckingMode.SIMPLE);    m_tree.getCheckingModel().clearChecking();    m_tree.setCellRenderer(this.m_RadioButtonTreeCellRenderer);    m_tree.setScrollsOnExpand(true);    JScrollPane treeView=new JScrollPane(m_tree);    this.add(treeView);  } else {    DefaultMutableTreeNode nodeHolder=new DefaultMutableTreeNode(Msg.translate(Env.getCtx(),"No Product Chosen"));    m_tree=new CheckboxTree(nodeHolder);    JScrollPane treeView=new JScrollPane(m_tree);    this.add(treeView);  }  this.setBorder(new TitledBorder(title));}  }
class C{  public ServerSocket bind() throws IOException, GeneralSecurityException, ConfigurationException {  if (useSSL) {    SSLSocketFactoryGenerator sslFactoryGenerator=new SSLSocketFactoryGenerator(this.keystoreAlias,this.securityInfo);    SSLServerSocketFactory sslserverSocketFactory=sslFactoryGenerator.getSSLServerSocketFactory();    serverSocket=(SSLServerSocket)sslserverSocketFactory.createServerSocket();  } else {    ServerSocketChannel serverChannel=ServerSocketChannel.open();    serverSocket=serverChannel.socket();  }  serverSocket.setReuseAddress(true);  serverSocket.bind(address);  serverSocket.setSoTimeout(acceptTimeout);  return serverSocket;}  }
class C{  public void addGeoKey(int key,int type,int count,Object data){  XTIFFField geoKey=createField(key,type,count,data);  addGeoKey(geoKey);}  }
class C{  public HtmlUnitFacesITCase(String name){  super(name);  this.testName=name;}  }
class C{  protected void init(){}  }
class C{  public boolean isSetPutRequest(){  return this.putRequest != null;}  }
class C{  public void send(String message){}  }
class C{  public void flyViewpoints(int numInbetweens,int millis,boolean loop,boolean grab,String seqPath){  if (numInbetweens <= 1)   return;  flyParams.numInbetweens=numInbetweens;  flyParams.millisPerFrame=millis;  flyParams.loop=loop;  flyParams.grab=grab;  flyParams.imageSequencePath=seqPath;  flyList=new Vector<ViewpointStore>();  int vpCount=viewpointList.size();  double delta=1.0 / numInbetweens;  ViewpointStore vps=viewpointList.get(0);  for (int i=1; i < vpCount; ++i) {    for (float t=0; t < 1.0; t+=delta) {      flyList.add(vps.getInbetween(viewpointList.get(i),t));    }    vps=viewpointList.get(i);  }  flyList.add(viewpointList.get(viewpointList.size() - 1));}  }
