class C{  ProcessedData(byte[] data,String accountId,String subscriptionId){  mData=data;  mAccountId=accountId;  mSubscriptionId=subscriptionId;}  }
class C{  public void addNewEntry(String nameValuePairs) throws IOException, ServiceException {  RecordEntry newEntry=new RecordEntry();  setEntryContentsFromString(newEntry,nameValuePairs);  service.insert(recordsFeedUrl,newEntry);  out.println("Added!");}  }
class C{  public static String preambleToString(byte[] byteArr){  Memory mem=new NativeMemory(byteArr);  return preambleToString(mem);}  }
class C{  public static String seconds2HH_mm_ss(long seconds){  long h=0;  long m=0;  long s=0;  long temp=seconds % 3600;  if (seconds > 3600) {    h=seconds / 3600;    if (temp != 0) {      if (temp > 60) {        m=temp / 60;        if (temp % 60 != 0) {          s=temp % 60;        }      } else {        s=temp;      }    }  } else {    m=seconds / 60;    if (seconds % 60 != 0) {      s=seconds % 60;    }  }  String dh=h < 10 ? "0" + h : h + "";  String dm=m < 10 ? "0" + m : m + "";  String ds=s < 10 ? "0" + s : s + "";  return dh + ":" + dm+ ":"+ ds;}  }
class C{  @Override public void removeNotify(){  super.removeNotify();  if (m_PD != null) {    m_PD.dispose();    m_PD=null;  }}  }
class C{  public boolean isEmpty(){  return values.isEmpty();}  }
class C{  public void startNonText(StylesheetHandler handler) throws org.xml.sax.SAXException {}  }
class C{  private static float computeModuleWidth(ResultPoint[] vertices){  float pixels1=ResultPoint.distance(vertices[0],vertices[4]);  float pixels2=ResultPoint.distance(vertices[1],vertices[5]);  float moduleWidth1=(pixels1 + pixels2) / (17 * 2.0f);  float pixels3=ResultPoint.distance(vertices[6],vertices[2]);  float pixels4=ResultPoint.distance(vertices[7],vertices[3]);  float moduleWidth2=(pixels3 + pixels4) / (18 * 2.0f);  return (moduleWidth1 + moduleWidth2) / 2.0f;}  }
class C{  public String globalInfo(){  return "Class for bagging a classifier to reduce variance. Can do classification " + "and regression depending on the base learner. \n\n" + "For more information, see\n\n"+ getTechnicalInformation().toString();}  }
class C{  @After public void tearDown() throws Exception {  service.shutdownNow();  verifier.teardown();  setLogLevel(Level.INFO);}  }
class C{  public static void copy(File src,File dst) throws IOException {  if (src.isDirectory()) {    ensureDirectoryExists(dst);    String[] filesList=src.list();    for (    String file : filesList) {      File srcFile=new File(src,file);      File destFile=new File(dst,file);      copy(srcFile,destFile);    }  } else {    copyFile(src,dst);  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof XYTaskDataset)) {    return false;  }  XYTaskDataset that=(XYTaskDataset)obj;  if (this.seriesWidth != that.seriesWidth) {    return false;  }  if (this.transposed != that.transposed) {    return false;  }  if (!this.underlying.equals(that.underlying)) {    return false;  }  return true;}  }
class C{  public static <K,V>ImmutableSetMultimap<K,V> of(K k1,V v1){  ImmutableSetMultimap.Builder<K,V> builder=ImmutableSetMultimap.builder();  builder.put(k1,v1);  return builder.build();}  }
class C{  public final void voice(String channel,String nick){  this.setMode(channel,"+v " + nick);}  }
class C{  private ServerPod[] buildClusterServers(ClusterHeartbeat cluster,int serverCount){  ArrayList<ServerPod> serversPod=new ArrayList<>();  for (  ServerHeartbeat server : cluster.getServers()) {    ServerPod serverPod=new ServerPod(serversPod.size());    serversPod.add(serverPod);  }  while (serversPod.size() < serverCount) {    serversPod.add(new ServerPod(serversPod.size()));  }  ServerPod[] serverArray=new ServerPod[serverCount];  for (int i=0; i < serverCount; i++) {    serverArray[i]=serversPod.get(i);  }  return serverArray;}  }
class C{  public boolean isVmSearch(){  return vmSearch;}  }
class C{  public void captivePortalCheckComplete(NetworkInfo info){  try {    mService.captivePortalCheckComplete(info);  } catch (  RemoteException e) {  }}  }
class C{  void sleep(long millis){  try {    Thread.sleep(millis);  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();    throw new RuntimeException("Got interrupted.",e);  }}  }
class C{  private void ensureVisibility(){  if (!isVisible()) {    return;  }  setLocation(getFinalLocation());}  }
class C{  public Injected(Class<?> klass) throws Throwable {  super(klass,fanout(klass));}  }
class C{  protected synchronized void notifyListenersSpiderProgress(int percentageComplete,int numberCrawled,int numberToCrawl){  for (  SpiderListener l : listeners) {    l.spiderProgress(percentageComplete,numberCrawled,numberToCrawl);  }}  }
class C{  private HistoryEntry buildApplicationHistory(DomainApplication application){  return new HistoryEntry.Builder().setType(HistoryEntry.Type.DOMAIN_APPLICATION_STATUS_UPDATE).setParent(application).setModificationTime(now).setClientId(application.getCurrentSponsorClientId()).setBySuperuser(true).build();}  }
class C{  private void notifySubstitutionsChanged(final Set<BaseType> baseTypes){  final Set<TypeSubstitution> changedSubstitutions=typesContainer.getAffectedTypeSubstitutions(baseTypes);  for (  final TypeSubstitutionChangedListener listener : substitutionListeners) {    listener.substitutionsChanged(changedSubstitutions);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:29.524 -0500",hash_original_method="98747504BDA403336DDC3899112D7C4E",hash_generated_method="9BC2F438A4576A57E774AE431E7F4F80") public void onCallChangeFailed(SipSession session,int errorCode,String errorMessage){}  }
class C{  public boolean isFull(){  return counter.get() == qSize;}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1;    int progress, oldProgress=-1;    double[] data1;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData=inputFile1.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile1.getPreferredPalette());    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        if (z1 != noData) {          outputFile.setValue(row,col,(double)Math.round(z1));        } else {          outputFile.setValue(row,col,noData);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static int hashCode(Object o){  return o != null ? o.hashCode() : 0;}  }
class C{  public static void addFunction(String name,Class type){  if (!Function.class.isAssignableFrom(type)) {    throw new IllegalArgumentException("Type argument must be a subclass of FunctionExpression.");  }  if (hasFunction(name)) {    throw new IllegalArgumentException("Function with that name already exists");  }  String lo=name.toLowerCase();  String hi=name.toUpperCase();  if (!name.equals(lo) && !name.equals(hi))   throw new IllegalArgumentException("Name can't have mixed case, try \"" + hi + "\" instead.");  s_functionTable.put(lo,type);  s_functionTable.put(hi,type);}  }
class C{  public boolean isCustomColumn(String name){  return false;}  }
class C{  public DefaultTreeCheckingModel(TreeModel model){  this.model=model;  this.checkedPathsSet=new HashSet<TreePath>();  this.greyedPathsSet=new HashSet<TreePath>();  this.disabledPathsSet=new HashSet<TreePath>();  this.checkBoxPathsSet=new HashSet<TreePath>();  this.propagateCheckingListener=new PropagateCheckingListener();  this.setCheckingMode(CheckingMode.PROPAGATE);}  }
class C{  private void pop(char c) throws JSONException {  if (this.top <= 0 || this.stack[this.top - 1] != c) {    throw new JSONException("Nesting error.");  }  this.top-=1;  this.mode=this.top == 0 ? 'd' : this.stack[this.top - 1];}  }
class C{  public static Days daysIn(ReadableInterval interval){  if (interval == null) {    return Days.ZERO;  }  int amount=BaseSingleFieldPeriod.between(interval.getStart(),interval.getEnd(),DurationFieldType.days());  return Days.days(amount);}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.wallPaint,stream);}  }
class C{  public ILineSegment[] generate(int size){  ILineSegment[] lines=new ILineSegment[size];  double deg=2 * Math.PI / size;  int idx=0;  double angle=0;  for (int i=0; i < lines.length; i++) {    lines[idx++]=new TwoDLineSegment(x,y,x + max * Math.cos(Math.PI + angle),y + max * Math.sin(Math.PI + angle));    angle+=deg;  }  return lines;}  }
class C{  public GuacamoleUpstreamTimeoutException(String message,Throwable cause){  super(message,cause);}  }
class C{  public static void initMunicipalities(Scenario scenario){  Municipalities.addEntry("09180112",(int)(446),1559,526);  Municipalities.addEntry("09180113",(int)(169),772,223);  Municipalities.addEntry("09180114",(int)(269),908,368);  Municipalities.addEntry("09180115",(int)(103),534,368);  Municipalities.addEntry("09180116",(int)(636),2288,759);  Municipalities.addEntry("09180117",(int)(3744),15016,7308);  Municipalities.addEntry("09180118",(int)(501),2193,841);  Municipalities.addEntry("09180119",(int)(281),895,280);  Municipalities.addEntry("09180122",(int)(283),1193,446);  Municipalities.addEntry("09180123",(int)(978),4622,1834);  Municipalities.addEntry("09180124",(int)(2003),7508,2751);  Municipalities.addEntry("09180125",(int)(890),3085,1253);  Municipalities.addEntry("09180126",(int)(528),1787,691);  Municipalities.addEntry("09180127",(int)(596),1982,632);  Municipalities.addEntry("09180128",(int)(206),683,266);  Municipalities.addEntry("09180129",(int)(313),1034,301);  Municipalities.addEntry("09180131",(int)(111),335,155);  Municipalities.addEntry("09180132",(int)(486),1415,600);  Municipalities.addEntry("09180133",(int)(151),491,123);  Municipalities.addEntry("09180134",(int)(582),1813,583);  Municipalities.addEntry("09180135",(int)(294),857,315);  Municipalities.addEntry("09180136",(int)(265),823,306);  setBuiltAreaQT(new QuadTree<Geometry>(4070000,5190000,4730000,6106925));  Collection<SimpleFeature> builtAreas=new ShapeFileReader().readFileAndInitialize(Global.adminBordersDir + "Gebietsstand_2007/gemeinden_2007_bebaut.shp");  log.info("Processing built areas...");  for (  SimpleFeature f : builtAreas) {    Geometry geometry=(Geometry)f.getDefaultGeometry();    Long identifier=(Long)f.getAttribute("GEM_KENNZ");    String id="0" + Long.toString(identifier);    getMunId2Geometry().put(id,geometry);    Coord c=MGC.point2Coord(geometry.getCentroid());    getBuiltAreaQT().put(c.getX(),c.getY(),geometry);  }  log.info("Processing administrative boundaries...");  Collection<SimpleFeature> counties=new ShapeFileReader().readFileAndInitialize(Global.adminBordersDir + "Gebietsstand_2007/kreise_2007_12.shp");  for (  SimpleFeature f : counties) {    Geometry geometry=(Geometry)f.getDefaultGeometry();    String identifier=(String)f.getAttribute("KENNZAHL");    getMunId2Geometry().put(identifier,geometry);  }  Collection<SimpleFeature> regBez=new ShapeFileReader().readFileAndInitialize("/home/dhosse/Downloads/boundaries/Lower Bavaria_AL5.shp");  for (  SimpleFeature f : regBez) {    Geometry geometry=(Geometry)f.getDefaultGeometry();    String identifier=(String)f.getAttribute("REGION_KEY");    getMunId2Geometry().put(identifier,geometry);  }  Collection<SimpleFeature> rp=new ShapeFileReader().readFileAndInitialize("/home/dhosse/Downloads/boundaries/Rhineland-Palatinate_AL4.shp");  for (  SimpleFeature f : rp) {    Geometry geometry=(Geometry)f.getDefaultGeometry();    String identifier=(String)f.getAttribute("NOTE");    getMunId2Geometry().put(identifier,geometry);  }  Collection<SimpleFeature> c=new ShapeFileReader().readFileAndInitialize(Global.adminBordersDir + "bundeslaender.shp");  for (  SimpleFeature f : c) {    Geometry geometry=(Geometry)f.getDefaultGeometry();    Long identifier=(Long)f.getAttribute("LAND");    getMunId2Geometry().put("0" + Long.toString(identifier),geometry);  }  Collection<SimpleFeature> austria=new ShapeFileReader().readFileAndInitialize("/home/dhosse/Downloads/austria/austria.shp");  Geometry result=null;  for (  SimpleFeature f : austria) {    Geometry geometry=(Geometry)f.getDefaultGeometry();    if (result == null) {      result=geometry;    } else {      result=result.union(geometry);    }  }  getMunId2Geometry().put("0AT",result);}  }
class C{  public static void writeSlot(ByteBuf buf,ItemStack stack){  if (stack == null || stack.getTypeId() == 0) {    buf.writeShort(-1);  } else {    buf.writeShort(stack.getTypeId());    buf.writeByte(stack.getAmount());    buf.writeShort(stack.getDurability());    if (stack.hasItemMeta()) {      CompoundTag tag=GlowItemFactory.instance().writeNbt(stack.getItemMeta());      writeCompound(buf,tag);    } else {      writeCompound(buf,null);    }  }}  }
class C{  public SolrQuery addOrUpdateSort(SortClause sortClause){  if (sortClauses != null) {    for (int index=0; index < sortClauses.size(); index++) {      SortClause existing=sortClauses.get(index);      if (existing.getItem().equals(sortClause.getItem())) {        sortClauses.set(index,sortClause);        serializeSorts();        return this;      }    }  }  return addSort(sortClause);}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  @DSSink({DSSinkKind.NETWORK}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:05.963 -0500",hash_original_method="222E87E258845BFD571D8B5E946AF980",hash_generated_method="ECA3BB9D25CCF5656E5278F6B4A24661") public void write(String string) throws IOException {  write(string.toCharArray());}  }
class C{  public void clearTextEdits(){  fEdits.clear();}  }
class C{  public void printEngineHeader(PrintWriter file,boolean isManifest){  int lineLength=getLineLength(isManifest);  printHorizontalLine(file,0,lineLength);  if (!Setup.isPrintHeadersEnabled()) {    return;  }  String s=padAndTruncateString(getPickupEngineHeader(),lineLength / 2,true);  s=padAndTruncateString(s + VERTICAL_LINE_CHAR + getDropEngineHeader(),lineLength,true);  addLine(file,s);  printHorizontalLine(file,0,lineLength);}  }
class C{  private void synchronizeDebugger(final IDebugger oldDebugger,final IDebugger newDebugger){  if (oldDebugger != null) {    oldDebugger.getProcessManager().removeListener(m_debuggerListener);    final TargetProcessThread activeThread=oldDebugger.getProcessManager().getActiveThread();    if (activeThread != null) {      synchronizeThreads(activeThread,null);    }  }  if (newDebugger != null) {    newDebugger.getProcessManager().addListener(m_debuggerListener);    m_provider.setDebugger(newDebugger);    final TargetProcessThread activeThread=newDebugger.getProcessManager().getActiveThread();    if (activeThread != null) {      synchronizeThreads(null,activeThread);    }  }  updateGui();}  }
class C{  public CStringBuilder reverse(){  reverse0();  return this;}  }
class C{  public OMText(int px1,int py1,String stuff,int just){  this(px1,py1,stuff,DEFAULT_FONT,just);}  }
class C{  public html addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public void testListSize(){  int maxListSize=100;  AbsentResourceList list=new AbsentResourceList(maxListSize,2,250,60000);  this.markResourcesAbsent(list,maxListSize + 1);  assertTrue("Oldest resource not considered absent ",!list.isResourceAbsent(0));}  }
class C{  public SampleTreeModel(TreeNode newRoot){  super(newRoot);}  }
class C{  public static void gc(){  return;}  }
class C{  public Task<StorageSystemRestRep> create(StorageSystemRequestParam input){  return postTask(input,baseUrl);}  }
class C{  protected static void removeIndexAccess(IndexAccess access,String indexPath) throws SQLException {synchronized (INDEX_ACCESS) {    try {      INDEX_ACCESS.remove(indexPath);      access.searcher.close();      access.reader.close();      access.writer.close();    } catch (    Exception e) {      throw convertException(e);    }  }}  }
class C{  public void add(E newObject){  list.add(newObject);  int currentIndex=list.size() - 1;  while (currentIndex > 0) {    int parentIndex=(currentIndex - 1) / 2;    if (list.get(currentIndex).compareTo(list.get(parentIndex)) > 0) {      E temp=list.get(currentIndex);      list.set(currentIndex,list.get(parentIndex));      list.set(parentIndex,temp);    } else     break;    currentIndex=parentIndex;  }}  }
class C{  public void messageArrived(DMessage msg,DProtocol which){  int type=msg.getType();  int inIsolateId=getInIsolate() != null ? getInIsolate().getId() : Isolate.DEFAULT_ID;  if (inIsolateId != Isolate.DEFAULT_ID) {    msg.setTargetIsolate(inIsolateId);  }switch (type) {case DMessage.InVersion:{      long ver=msg.getDWord();      m_playerVersion=(int)ver;      int pointerSize;      if (msg.getRemaining() >= 1)       pointerSize=msg.getByte(); else       pointerSize=4;      DMessage.setSizeofPtr(pointerSize);      break;    }case DMessage.InErrorExecLimit:{    handleFaultEvent(new RecursionLimitFault(msg.getTargetIsolate()));    break;  }case DMessage.InErrorWith:{  handleFaultEvent(new InvalidWithFault(msg.getTargetIsolate()));  break;}case DMessage.InErrorProtoLimit:{handleFaultEvent(new ProtoLimitFault(msg.getTargetIsolate()));break;}case DMessage.InErrorURLOpen:{break;}case DMessage.InErrorTarget:{break;}case DMessage.InErrorException:{long offset=msg.getDWord();String exceptionMessage;boolean willExceptionBeCaught=false;Value thrown=null;if (msg.getRemaining() > 0) {exceptionMessage=msg.getString();if (msg.getRemaining() > 0) {if (msg.getByte() != 0) {willExceptionBeCaught=(msg.getByte() != 0 ? true : false);msg.getPtr();DVariable thrownVar=extractVariable(msg);thrown=thrownVar.getValue();}}} else {exceptionMessage="";}ExceptionFault exceptionFault=new ExceptionFault(exceptionMessage,willExceptionBeCaught,thrown,msg.getTargetIsolate());exceptionFault.isolateId=msg.getTargetIsolate();handleFaultEvent(exceptionFault);break;}case DMessage.InErrorStackUnderflow:{handleFaultEvent(new StackUnderFlowFault(msg.getTargetIsolate()));break;}case DMessage.InErrorZeroDivide:{handleFaultEvent(new DivideByZeroFault(msg.getTargetIsolate()));break;}case DMessage.InErrorScriptStuck:{handleFaultEvent(new ScriptTimeoutFault(msg.getTargetIsolate()));break;}case DMessage.InErrorConsole:{String s=msg.getString();handleFaultEvent(new ConsoleErrorFault(s,msg.getTargetIsolate()));break;}case DMessage.InTrace:{String text=msg.getString();addEvent(new TraceEvent(text));break;}case DMessage.InSquelch:{long state=msg.getDWord();m_squelchEnabled=(state != 0) ? true : false;break;}case DMessage.InParam:{String name=msg.getString();String value=msg.getString();m_parms.put(name,value);if (name.startsWith("movie")) m_uri=convertToURI(value);break;}case DMessage.InPlaceObject:{long objId=msg.getPtr();String path=msg.getString();break;}case DMessage.InSetProperty:{long objId=msg.getPtr();int item=msg.getWord();String value=msg.getString();break;}case DMessage.InNewObject:{long objId=msg.getPtr();break;}case DMessage.InRemoveObject:{long objId=msg.getPtr();break;}case DMessage.InSetVariable:{long objId=msg.getPtr();String name=msg.getString();int dType=msg.getWord();int flags=(int)msg.getDWord();String value=msg.getString();break;}case DMessage.InDeleteVariable:{long objId=msg.getPtr();String name=msg.getString();break;}case DMessage.InScript:{int module=(int)msg.getDWord();int bitmap=(int)msg.getDWord();String name=msg.getString();String text=msg.getString();int swfIndex=-1;int isolateIndex=-1;if (msg.getRemaining() >= 4) swfIndex=(int)msg.getDWord();isolateIndex=msg.getTargetIsolate();getOrCreateIsolate(isolateIndex);if (putSource(swfIndex,module,bitmap,name,text,isolateIndex)) {if (!m_sourceListModified) addEvent(new FileListModifiedEvent());m_sourceListModified=true;}break;}case DMessage.InRemoveScript:{long module=msg.getDWord();int isolateId=msg.getTargetIsolate();Map<Integer,DModule> source=getIsolateState(isolateId).m_source;synchronized (source) {if (removeSource((int)module,isolateId)) {if (!m_sourceListModified) addEvent(new FileListModifiedEvent());m_sourceListModified=true;}}break;}case DMessage.InAskBreakpoints:{int targetIsolate=msg.getTargetIsolate();DSuspendInfo iSusInfo=getIsolateState(targetIsolate).m_suspendInfo;if (iSusInfo == null) {iSusInfo=new DSuspendInfo(SuspendReason.ScriptLoaded,0,0,0,0);}break;}case DMessage.InBreakAt:{long bp=0, wideLine=0, wideModule=0;if (!m_wideLines) {bp=msg.getDWord();} else {wideModule=msg.getDWord();wideLine=msg.getDWord();}long id=msg.getPtr();String stack=msg.getString();int targetIsolate=msg.getTargetIsolate();int module=DLocation.decodeFile(bp);int line=DLocation.decodeLine(bp);if (m_wideLines) {module=(int)wideModule;line=(int)wideLine;}addEvent(new BreakEvent(module,line,targetIsolate));break;}case DMessage.InContinue:{continuing(msg.getTargetIsolate());break;}case DMessage.InSetLocalVariables:{break;}case DMessage.InSetBreakpoint:{long count=msg.getDWord();int targetIsolate=msg.getTargetIsolate();while (count-- > 0) {long bp=0, moduleNumber=0, lineNumber=0;if (!m_wideLines) {bp=msg.getDWord();} else {moduleNumber=msg.getDWord();lineNumber=msg.getDWord();}int fileId=DLocation.decodeFile(bp);int line=DLocation.decodeLine(bp);if (m_wideLines) {fileId=(int)moduleNumber;line=(int)lineNumber;}DModule file=null;file=getSource(fileId,targetIsolate);DLocation l=new DLocation(file,line,targetIsolate);if (file != null) {addBreakpoint((int)bp,l,targetIsolate);}}break;}case DMessage.InNumScript:{int num=(int)msg.getDWord();int targetIsolate=msg.getTargetIsolate();DSwfInfo swf;if (msg.getRemaining() >= 4) {int swfIndex=(int)msg.getDWord();swf=getOrCreateSwfInfo(swfIndex,targetIsolate);getIsolateState(targetIsolate).m_lastSwfInfo=swf;} else {swf=getActiveSwfInfo(targetIsolate);}swf.setSourceExpectedCount(num);break;}case DMessage.InRemoveBreakpoint:{long count=msg.getDWord();int isolateId=msg.getTargetIsolate();while (count-- > 0) {long bp=msg.getDWord();removeBreakpoint((int)bp,isolateId);}break;}case DMessage.InBreakAtExt:{long bp=0, wideLine=0, wideModule=0;if (!m_wideLines) {bp=msg.getDWord();} else {wideModule=msg.getDWord();wideLine=msg.getDWord();}long num=msg.getDWord();int targetIsolate=msg.getTargetIsolate();clearFrames(targetIsolate);int depth=0;while (num-- > 0) {long bpi=0, wideLinei=0, wideModulei=0;if (!m_wideLines) {bpi=msg.getDWord();} else {wideModulei=msg.getDWord();wideLinei=msg.getDWord();}long id=msg.getPtr();String stack=msg.getString();int module=DLocation.decodeFile(bpi);int line=DLocation.decodeLine(bpi);if (m_wideLines) {module=(int)wideModulei;line=(int)wideLinei;}DModule m=null;m=getSource(module,targetIsolate);DStackContext c=new DStackContext(module,line,m,id,stack,depth,targetIsolate);if (addFrame(c,targetIsolate)) ++depth;}mapOldFramesToNew(targetIsolate);if (targetIsolate != Isolate.DEFAULT_ID) {appendIsolateInfoToFrame(targetIsolate);}break;}case DMessage.InFrame:{DValue frame=null;DVariable child=null;ArrayList<DVariable> v=new ArrayList<DVariable>();ArrayList<DVariable> registers=new ArrayList<DVariable>();int targetIsolate=msg.getTargetIsolate();int depth=(int)msg.getDWord();if (depth > -1) {int num=(int)msg.getDWord();for (int i=0; i < num; i++) registers.add(extractRegister(msg,i + 1));}int currentArg=-1;boolean gettingScopeChain=false;while (msg.getRemaining() > 0) {long frameId=msg.getPtr();if (frame == null) {frame=getOrCreateValue(frameId,targetIsolate);extractVariable(msg);} else {child=extractVariable(msg);if (currentArg == -1 && child.getName().equals(ARGUMENTS_MARKER)) {currentArg=0;gettingScopeChain=false;} else if (child.getName().equals(SCOPE_CHAIN_MARKER)) {currentArg=-1;gettingScopeChain=true;} else if (currentArg >= 0) {++currentArg;if (child.getName().equals("undefined")) child.setName("_arg" + currentArg);}if (!gettingScopeChain) addVariableMember(frameId,child,targetIsolate);v.add(child);}}if (depth == 0) populateRootNode(frame,v,targetIsolate); else populateFrame(depth,v,targetIsolate);break;}case DMessage.InOption:{String s=msg.getString();String v=msg.getString();m_options.put(s,v);break;}case DMessage.InGetVariable:{DValue parent=null;DVariable child=null;String definingClass=null;int level=0;int targetIsolate=msg.getTargetIsolate();int highestLevelWithMembers=-1;List<String> classes=new ArrayList<String>();while (msg.getRemaining() > 0) {long parentId=msg.getPtr();if (parent == null) {String name=msg.getString();getIsolateState(targetIsolate).m_lastInGetVariable=extractVariable(msg,name);parent=getOrCreateValue(parentId,targetIsolate);} else {child=extractVariable(msg);if (showMember(child)) {if (child.isAttributeSet(VariableAttribute.IS_DYNAMIC)) {if (classes.size() > 0) {child.setDefiningClass(0,classes.get(0));highestLevelWithMembers=Math.max(highestLevelWithMembers,0);}} else {child.setDefiningClass(level,definingClass);if (definingClass != null) {highestLevelWithMembers=Math.max(highestLevelWithMembers,level);}}addVariableMember(parent.getId(),child,targetIsolate);} else {if (isTraits(child)) {definingClass=child.getQualifiedName();level=classes.size();if (definingClass.endsWith("$")) {String classWithoutDollar=definingClass.substring(0,definingClass.length() - 1);int indexOfClass=classes.indexOf(classWithoutDollar);if (indexOfClass != -1) {level=indexOfClass;definingClass=classWithoutDollar;}}if (level == classes.size()) {classes.add(definingClass);}}}}}if (parent != null && parent.getClassHierarchy(true) == null) {parent.setClassHierarchy(classes.toArray(new String[classes.size()]),highestLevelWithMembers + 1);}break;}case DMessage.InWatch:case DMessage.InWatch2:{int success=msg.getWord();int oldFlags=msg.getWord();int oldTag=msg.getWord();int flags=msg.getWord();int tag=msg.getWord();long id=((type == DMessage.InWatch2) ? msg.getPtr() : msg.getWord());String name=msg.getString();int targetIsolate=msg.getTargetIsolate();if (success != 0) {if (flags == 0) {removeWatchpoint(oldTag,targetIsolate);} else {removeWatchpoint(oldTag,targetIsolate);DWatch w=new DWatch(id,name,flags,tag,targetIsolate);addWatchpoint(w,targetIsolate);}}break;}case DMessage.InGetSwf:{m_swf=msg.getData();break;}case DMessage.InGetSwd:{m_swd=msg.getData();break;}case DMessage.InBreakReason:{int suspendReason=msg.getWord();int suspendPlayer=msg.getWord();int breakOffset=(int)msg.getDWord();int prevBreakOffset=(int)msg.getDWord();int nextBreakOffset=(int)msg.getDWord();int targetIsolate=msg.getTargetIsolate();getIsolateState(targetIsolate).m_suspendInfo=new DSuspendInfo(suspendReason,suspendPlayer,breakOffset,prevBreakOffset,nextBreakOffset);try {DStackContext c=getFrame(0,targetIsolate);c.setOffset(breakOffset);c.setSwfIndex(suspendPlayer);} catch (Exception e) {if (Trace.error) {Trace.trace("Oh my god, gag me with a spoon...getFrame(0) call failed");e.printStackTrace();}}break;}case DMessage.InGetActions:{int item=msg.getWord();int rsvd=msg.getWord();int at=(int)msg.getDWord();int len=(int)msg.getDWord();int i=0;m_actions=(len <= 0) ? null : new byte[len];while (len-- > 0) m_actions[i++]=(byte)msg.getByte();break;}case DMessage.InSwfInfo:{int count=msg.getWord();int targetIsolate=msg.getTargetIsolate();for (int i=0; i < count; i++) {long index=msg.getDWord();long id=msg.getPtr();DSwfInfo info=null;info=getOrCreateSwfInfo((int)index,targetIsolate);getIsolateState(targetIsolate).m_lastSwfInfo=info;if (id != 0) {boolean debugComing=(msg.getByte() == 0) ? false : true;byte vmVersion=(byte)msg.getByte();int rsvd1=msg.getWord();long swfSize=msg.getDWord();long swdSize=msg.getDWord();long scriptCount=msg.getDWord();long offsetCount=msg.getDWord();long breakpointCount=msg.getDWord();long port=msg.getDWord();String path=msg.getString();String url=msg.getString();String host=msg.getString();Map<Long,Integer> local2global=new HashMap<Long,Integer>();int minId=Integer.MAX_VALUE;int maxId=Integer.MIN_VALUE;if (swdSize > 0) {long num=msg.getDWord();for (int j=0; j < num; j++) {if (msg.getRemaining() < DMessage.getSizeofPtr()) {break;}long local=msg.getPtr();int global=(int)msg.getDWord();local2global.put(local,global);minId=(global < minId) ? global : minId;maxId=(global > maxId) ? global : maxId;}}boolean justCreated=(info.getSwfSize() == 0);if (vmVersion > 0) {debugComing=false;info.setVmVersion(vmVersion);info.setPopulated();}info.freshen(id,path,url,host,port,debugComing,swfSize,swdSize,breakpointCount,offsetCount,scriptCount,local2global,minId,maxId);tieScriptsToSwf(info,targetIsolate);if (justCreated) addEvent(new SwfLoadedEvent(id,(int)index,path,url,host,port,swfSize));} else {boolean alreadyUnloaded=info.isUnloaded();info.setUnloaded();if (!alreadyUnloaded) addEvent(new SwfUnloadedEvent(info.getId(),info.getPath(),(int)index));}}break;}case DMessage.InConstantPool:{int item=msg.getWord();int count=(int)msg.getDWord();String[] pool=new String[count];for (int i=0; i < count; i++) {long id=msg.getPtr();DVariable var=extractVariable(msg);pool[i]=var.getValue().getValueAsString();}m_lastConstantPool=pool;break;}case DMessage.InGetFncNames:{long id=msg.getDWord();long count=msg.getDWord();DModule m=getSource((int)id,msg.getTargetIsolate());if (m != null) {for (int i=0; i < count; i++) {int offset=(int)msg.getDWord();int firstLine=(int)msg.getDWord();int lastLine=(int)msg.getDWord();String name=msg.getString();m.addLineFunctionInfo(offset,firstLine,lastLine,name);}}break;}case DMessage.InCallFunction:case DMessage.InBinaryOp:{DValue parent=null;int targetIsolate=msg.getTargetIsolate();DVariable child=null;String definingClass=null;int level=0;int highestLevelWithMembers=-1;List<String> classes=new ArrayList<String>();if (type == DMessage.InBinaryOp) msg.getDWord();while (msg.getRemaining() > 0) {long parentId=msg.getPtr();if (parent == null) {String name=msg.getString();DVariable var=extractVariable(msg,name);if (type == DMessage.InCallFunction) {getIsolateState(targetIsolate).m_lastInCallFunction=var;} else {getIsolateState(targetIsolate).m_lastInBinaryOp=var;}parent=getOrCreateValue(parentId,targetIsolate);} else {child=extractVariable(msg);if (showMember(child)) {if (child.isAttributeSet(VariableAttribute.IS_DYNAMIC)) {if (classes.size() > 0) {child.setDefiningClass(0,classes.get(0));highestLevelWithMembers=Math.max(highestLevelWithMembers,0);}} else {child.setDefiningClass(level,definingClass);if (definingClass != null) {highestLevelWithMembers=Math.max(highestLevelWithMembers,level);}}addVariableMember(parent.getId(),child,targetIsolate);} else {if (isTraits(child)) {definingClass=child.getQualifiedName();level=classes.size();if (definingClass.endsWith("$")) {String classWithoutDollar=definingClass.substring(0,definingClass.length() - 1);int indexOfClass=classes.indexOf(classWithoutDollar);if (indexOfClass != -1) {level=indexOfClass;definingClass=classWithoutDollar;}}if (level == classes.size()) {classes.add(definingClass);}}}}}if (parent != null && parent.getClassHierarchy(true) == null) {parent.setClassHierarchy(classes.toArray(new String[classes.size()]),highestLevelWithMembers + 1);}break;}case DMessage.InIsolateCreate:{long id=msg.getDWord();isolateCreate((int)id);break;}case DMessage.InIsolateExit:{long id=msg.getDWord();DIsolate isolate=removeIsolate((int)id);addEvent(new IsolateExitEvent(isolate));break;}case DMessage.InIsolateEnumerate:{break;}case DMessage.InSetActiveIsolate:{long id=msg.getDWord();boolean success=msg.getByte() != 0 ? true : false;break;}case DMessage.InIsolate:{long id=msg.getDWord();synchronized (m_inIsolateLock) {int at=findIsolate((int)id);if (at != -1) setInIsolate(getIsolate(at)); else {if (id != Isolate.DEFAULT_ID) {setInIsolate(isolateCreate((int)id));} else setInIsolate(null);}}break;}case DMessage.InSetExceptionBreakpoint:{int result=msg.getWord();String exceptionBP=msg.getString();int remaining=msg.getRemaining();break;}case DMessage.InRemoveExceptionBreakpoint:{int result=msg.getWord();String exceptionBP=msg.getString();int remaining=msg.getRemaining();break;}default :{break;}}}  }
class C{  public OverpassFilterQuery prepareNext(){  separateNext=true;  return this;}  }
class C{  private int difference(MutableBigInteger b){  MutableBigInteger a=this;  int sign=a.compare(b);  if (sign == 0)   return 0;  if (sign < 0) {    MutableBigInteger tmp=a;    a=b;    b=tmp;  }  long diff=0;  int x=a.intLen;  int y=b.intLen;  while (y > 0) {    x--;    y--;    diff=(a.value[a.offset + x] & LONG_MASK) - (b.value[b.offset + y] & LONG_MASK) - ((int)-(diff >> 32));    a.value[a.offset + x]=(int)diff;  }  while (x > 0) {    x--;    diff=(a.value[a.offset + x] & LONG_MASK) - ((int)-(diff >> 32));    a.value[a.offset + x]=(int)diff;  }  a.normalize();  return sign;}  }
class C{  protected void generateRows() throws JspException, BadElementException {  final RowIterator rowIterator=this.model.getRowIterator(this.exportFull);  while (rowIterator.hasNext()) {    final Row row=rowIterator.next();    final ColumnIterator columnIterator=row.getColumnIterator(this.model.getHeaderCellList());    while (columnIterator.hasNext()) {      final Column column=columnIterator.nextColumn();      final Object value=column.getValue(this.decorated);      final Cell cell=getCell(ObjectUtils.toString(value));      if (value instanceof BigDecimal) {        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);      }      this.tablePDF.addCell(cell);    }  }}  }
class C{  public void sendAdditionalData(EvolutionState state,DataOutputStream dataOut){}  }
class C{  public int parseToNode(Source source,SourceLocator locator,XPathContext xctxt) throws TransformerException {  try {    Object xowner=xctxt.getOwnerObject();    DTM dtm;    if (null != xowner && xowner instanceof org.apache.xml.dtm.DTMWSFilter) {      dtm=xctxt.getDTM(source,false,(org.apache.xml.dtm.DTMWSFilter)xowner,false,true);    } else {      dtm=xctxt.getDTM(source,false,null,false,true);    }    return dtm.getDocument();  } catch (  Exception e) {    throw new TransformerException(e.getMessage(),locator,e);  }}  }
class C{  public TriggerIsProducedItemOfClassCondition(final String clazz){  this.clazz=checkNotNull(clazz);}  }
class C{  public static CCFollow action(CCNode followedNode,CGRect rect){  return new CCFollow(followedNode,rect);}  }
class C{  public String metaClassifierTipText(){  return "The meta classifiers to be used.";}  }
class C{  protected void registerOtherEntity(){}  }
class C{  public StatementBuilder append(String s){  builder.append(s);  return this;}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:13.906 -0500",hash_original_method="BAB205076FF7DD8DB52E2A3E48EC287C",hash_generated_method="FFE39D199E88D962B97D134A047A6004") public void put(String hostname,InetAddress[] addresses){  put(hostname,addresses,true);}  }
class C{  private static String decode(final String txt){  try {    return URLDecoder.decode(txt,Charset.defaultCharset().name());  } catch (  final UnsupportedEncodingException ex) {    throw new IllegalStateException(ex);  }}  }
class C{  protected boolean isOverCloseButton(int x,int y){  if (tabCloseButtonPlacement != CENTER) {    int tabCount=tabPane.getTabCount();    for (int i=0; i < tabCount; i++) {      if (getCloseButtonBounds(i).contains(x,y)) {        closeButtonHoverIndex=i;        return true;      }    }  }  closeButtonHoverIndex=-1;  return false;}  }
class C{  @Override public void validate(){}  }
class C{  public void writeNBT(NBTTagCompound nbt){  nbt.setInteger("decayLevel",this.decayLevel);  nbt.setFloat("decaySaturationLevel",this.decaySaturationLevel);  nbt.setFloat("decayExhaustionLevel",this.decayAccelerationLevel);}  }
class C{  private void addSQLWhere(StringBuffer sql,int index,String value){  if (isValidSQLText(value) && index < m_queryColumns.size()) {    sql.append(" AND UPPER(").append(m_queryColumnsSql.get(index).toString()).append(") LIKE ?");  }}  }
class C{  public void infoCode(String java){  if (isEnabled(TraceSystem.INFO)) {    traceWriter.write(TraceSystem.INFO,module,lineSeparator + "/**/" + java,null);  }}  }
class C{  public void testExchangeFutures() throws Exception {  GridCachePartitionExchangeManager mgr=((IgniteKernal)grid(0)).internalCache().context().shared().exchange();  for (int i=1; i <= 10; i++) {    startGrid(i);    List<GridDhtPartitionsExchangeFuture> futs=mgr.exchangeFutures();    List<GridDhtPartitionsExchangeFuture> sortedFuts=new ArrayList<>(futs);    Collections.sort(sortedFuts,Collections.reverseOrder());    for (int j=0; j < futs.size(); j++)     assertEquals(futs.get(j),sortedFuts.get(j));  }}  }
class C{  public LineChart(XYMultipleSeriesDataset dataset,XYMultipleSeriesRenderer renderer){  super(dataset,renderer);  pointsChart=new ScatterChart(dataset,renderer);}  }
class C{  public boolean isServerRestartRequired(){  if (isValid()) {    for (    SingleProperty<?> property : correctUpdateMap.keySet()) {      if (property.isServerRestartRequired()) {        return true;      }    }    return false;  } else {    return false;  }}  }
class C{  public static void compact(MVStore source,MVStore target){  MVMap<String,String> sourceMeta=source.getMetaMap();  MVMap<String,String> targetMeta=target.getMetaMap();  for (  Entry<String,String> m : sourceMeta.entrySet()) {    String key=m.getKey();    if (key.startsWith("chunk.")) {    } else     if (key.startsWith("map.")) {    } else     if (key.startsWith("name.")) {    } else     if (key.startsWith("root.")) {    } else {      targetMeta.put(key,m.getValue());    }  }  for (  String mapName : source.getMapNames()) {    MVMap.Builder<Object,Object> mp=new MVMap.Builder<Object,Object>().keyType(new GenericDataType()).valueType(new GenericDataType());    MVMap<Object,Object> sourceMap=source.openMap(mapName,mp);    MVMap<Object,Object> targetMap=target.openMap(mapName,mp);    targetMap.copyFrom(sourceMap);  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:03.223 -0500",hash_original_method="9BDF8CEEC650CFF21B203033378C7411",hash_generated_method="D2B5FC2E1D0298403E6F489A411CC0EB") public void addAttributes(Map<? extends AttributedCharacterIterator.Attribute,?> attributes,int start,int end){  Iterator<?> it=attributes.entrySet().iterator();  while (it.hasNext()) {    Map.Entry<?,?> entry=(Map.Entry<?,?>)it.next();    addAttribute((AttributedCharacterIterator.Attribute)entry.getKey(),entry.getValue(),start,end);  }}  }
class C{  @Override public boolean nullsAreSortedLow(){  debugCodeCall("nullsAreSortedLow");  return !SysProperties.SORT_NULLS_HIGH;}  }
class C{  protected SelectedSparseDoubleMatrix1D(int size,AbstractIntDoubleMap elements,int zero,int stride,int[] offsets,int offset){  setUp(size,zero,stride);  this.elements=elements;  this.offsets=offsets;  this.offset=offset;  this.isNoView=false;}  }
class C{  public void ensureExceptionThrownIfOptionIsUnsupportedOnOS(int option){  if (!getOptionIsSupported(option)) {    fail("Failed to throw exception for unsupported socket option: " + getSocketOptionString(option));  }}  }
class C{  private void processRequest(final HttpServletRequest request,final HttpServletResponse response) throws ServletException, IOException {  setResponseHeaders(response);  wroManagerFactory.create().process();}  }
class C{  public boolean isSound(){  if (transformerFactory instanceof ResolvingTransformerFactory) {    return ((ResolvingTransformerFactory)transformerFactory).isSound();  } else {    return true;  }}  }
class C{  public RequestParams(final String key,final String value){  this(new HashMap<String,String>(){{      put(key,value);    }  });}  }
class C{  @Transactional(readOnly=false,propagation=Propagation.REQUIRED) @CacheEvict(value={"product_count","product","products"},allEntries=true) public void processUnprocessed(boolean recover){  long start=new Date().getTime();  if (!recover) {    Iterator<Product> products=getUnprocessedProducts();    while (products.hasNext()) {      products.next();      products.remove();    }    logger.debug("Cleanup incomplete processed products in " + (new Date().getTime() - start) + "ms");  } else {    Iterator<Product> products=getUnprocessedProducts();    while (products.hasNext()) {      Product product=products.next();      if (product.getPath().toString().equals(product.getOrigin())) {        products.remove();      } else {        try {          String path=product.getPath().getPath();          logger.info("Recovering product from " + path);          if (!new File(path).exists()) {            throw new DataStoreException("Product " + path + " not present locally.");          }          User owner=productDao.getOwnerOfProduct(product);          List<Collection> collections=collectionDao.getCollectionsOfProduct(product.getId());          processProduct(product,owner,collections,null,null);        } catch (        Exception e) {          logger.error("Error while processing: " + e.getMessage() + "- abort reprocessing.");          products.remove();        }      }    }  }}  }
class C{  public <T extends Expression>Optional<T> positionalOrKeyword(final String key,Class<T> expected){  if (!args.isEmpty()) {    return Optional.of(args.removeFirst().cast(expected));  }  return Optional.ofNullable(kw.remove(key)).map(null);}  }
class C{  public void trackPageViewFromReferrer(String argPageURL,String argPageTitle,String argHostName,String argReferrerSite,String argReferrerPage){  if (argPageURL == null)   throw new IllegalArgumentException("Page URL cannot be null, Google will not track the data.");  AnalyticsRequestData data=new AnalyticsRequestData();  data.setHostName(argHostName);  data.setPageTitle(argPageTitle);  data.setPageURL(argPageURL);  data.setReferrer(argReferrerSite,argReferrerPage);  makeCustomRequest(data);}  }
class C{  public static ReadableByteChannel newChannel(InputStream inputStream){  return new InputStreamChannel(inputStream);}  }
class C{  public static void main(String argv[]){  runClassifier(new LinearRegression(),argv);}  }
class C{  public <E extends Layout,AE extends VLArray<E>,EE extends Layout>Class<AE> genVLAImpl(final Class<E> elementInterfaceClass,final Class<AE> userDefinedArrayClass,final Class<EE> enclosingClass){  try {    Class<AE> implCls=implClassloader.loadVLAClass(elementInterfaceClass,userDefinedArrayClass,enclosingClass);    unsafe.ensureClassInitialized(implCls);    Field f=implCls.getDeclaredField("unsafe");    unsafe.putObject(unsafe.staticFieldBase(f),unsafe.staticFieldOffset(f),unsafe);    return implCls;  } catch (  Exception e) {    e.printStackTrace();  }  return null;}  }
class C{  public String toString(){  return text;}  }
class C{  public boolean wpsDisplaySupported(){  return (wpsConfigMethodsSupported & WPS_CONFIG_DISPLAY) != 0;}  }
class C{  protected Instances process(Instances data){  return data;}  }
class C{  @Override public void addAttribute(String name,String value){  if (name.equals("idref")) {    this.value=ValueObjectImpl.create(getVariable(value));  } else {    super.addAttribute(name,value);  }}  }
class C{  StringBuffer generateToken(String[] urlParam) throws UnsupportedEncodingException {  StringBuffer token=new StringBuffer();  token.append(URLEncoder.encode(ParameterEncoder.encodeParameters(urlParam),"UTF-8"));  return token;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public CommitParams withRepository(String repository){  this.repository=repository;  return this;}  }
class C{  public static MethodHandle cast(){  return CAST_REFERENCE;}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public static ExportGroup createRPExportGroup(String exportGroupGeneratedName,VirtualArray virtualArray,Project project,Integer numPaths,boolean isJournalExport){  ExportGroup exportGroup;  exportGroup=new ExportGroup();  exportGroup.setId(URIUtil.createId(ExportGroup.class));  exportGroup.addInternalFlags(Flag.INTERNAL_OBJECT,Flag.SUPPORTS_FORCE,Flag.RECOVERPOINT);  exportGroup.setProject(new NamedURI(project.getId(),project.getLabel()));  exportGroup.setVirtualArray(virtualArray.getId());  exportGroup.setTenant(new NamedURI(project.getTenantOrg().getURI(),project.getTenantOrg().getName()));  exportGroup.setGeneratedName(exportGroupGeneratedName);  exportGroup.setLabel(exportGroupGeneratedName);  exportGroup.setVolumes(new StringMap());  exportGroup.setOpStatus(new OpStatusMap());  exportGroup.setNumPaths(numPaths);  exportGroup.setType(ExportGroupType.Cluster.name());  exportGroup.setZoneAllInitiators(true);  if (isJournalExport) {    exportGroup.addInternalFlags(Flag.RECOVERPOINT_JOURNAL);  }  return exportGroup;}  }
class C{  public Object clone(){  GenericObjectList retval=(GenericObjectList)super.clone();  for (ListIterator<GenericObject> iter=retval.listIterator(); iter.hasNext(); ) {    GenericObject obj=(GenericObject)((GenericObject)iter.next()).clone();    iter.set(obj);  }  return retval;}  }
class C{  @Override public String toString(){  StringBuilder b=new StringBuilder();  b.append("initial state: 0\n");  for (int i=0; i < size; i++) {    b.append("state " + i);    if (accept[i])     b.append(" [accept]:\n"); else     b.append(" [reject]:\n");    for (int j=0; j < points.length; j++) {      int k=transitions[i * points.length + j];      if (k != -1) {        int min=points[j];        int max;        if (j + 1 < points.length)         max=(points[j + 1] - 1); else         max=maxInterval;        b.append(" ");        Automaton.appendCharString(min,b);        if (min != max) {          b.append("-");          Automaton.appendCharString(max,b);        }        b.append(" -> ").append(k).append("\n");      }    }  }  return b.toString();}  }
class C{  public DebuggerTemplate createDebugger(final String name,final String host,final int port) throws CouldntSaveDataException {  Preconditions.checkNotNull(name,"IE00809: Name argument can not be null");  Preconditions.checkNotNull(host,"IE00810: Host argument can not be null");  Preconditions.checkArgument(NetHelpers.isValidPort(port),"IE00811: Invalid port");  final DebuggerTemplate debugger=sqlProvider.createDebuggerTemplate(name,host,port);  addDebugger(debugger);  return debugger;}  }
class C{  public Implementation(){  super();  plugin=this;}  }
class C{  public static void oldannotate(Data data,Gazetteers gaz) throws Exception {  if (ParametersForLbjCode.currentParameters.featuresToUse != null) {    if (ParametersForLbjCode.currentParameters.featuresToUse.containsKey("GazetteersFeatures")) {      for (int docid=0; docid < data.documents.size(); docid++) {        ArrayList<LinkedVector> sentences=data.documents.get(docid).sentences;        for (        LinkedVector sentence : sentences) {          for (int j=0; j < sentence.size(); j++) {            NEWord ww=(NEWord)sentence.get(j);            if (ww.gazetteers == null)             ww.gazetteers=new ArrayList<>();          }        }      }      for (int docid=0; docid < data.documents.size(); docid++) {        ArrayList<LinkedVector> sentences=data.documents.get(docid).sentences;        for (        LinkedVector sentence : sentences) {          for (int j=0; j < sentence.size(); j++)           gaz.annotate((NEWord)sentence.get(j));        }      }    }  }}  }
class C{  public MimeBodyPart(byte[] body,String contentType){  this();  setContent(body,contentType);}  }
class C{  public boolean isTaskInTerminalState(DriverTask.TaskStatus taskStatus){  if (DriverTask.TaskStatus.PROVISIONING == taskStatus || DriverTask.TaskStatus.QUEUED == taskStatus) {    return false;  } else {    return true;  }}  }
class C{  public LogisticRegressionParamsEditor(){}  }
class C{  @Override public void validate(final IDescription description){  if (!Assert.nameIsValid(description)) {    return;  }  final SpeciesDescription species=description.getSpeciesContext();  final SkillDescription control=species.getControl();  if (!WeightedTasksArchitecture.class.isAssignableFrom(control.getJavaBase())) {    description.error("A " + description.getKeyword() + " can only be defined in a task-controlled species  (one of"+ AllowedArchitectures+ ")",IGamlIssue.WRONG_CONTEXT);    return;  }}  }
class C{  public ConvertMIRtoMC(){  super("Generate Machine Code",new OptimizationPlanElement[]{new OptimizationPlanAtomicElement(new FinalMIRExpansionDriver()),new OptimizationPlanAtomicElement(new AssemblerDriver())});}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:12.922 -0500",hash_original_method="120A166126F4C5B7FB727570FC11E1A2",hash_generated_method="1FCE8CF5074ED18EE92E21216C97AD3C") @Override public boolean isOutboundDone(){  return isOutboundDone;}  }
class C{  private void swap(int i,int j){  long tmp=_data[i];  _data[i]=_data[j];  _data[j]=tmp;}  }
class C{  public void paintRect(Graphics g,JComponent c,int x,int y,int w,int h){  Rectangle bounds=c.getBounds();  check(bounds);  g.drawImage(m_backImage,x,y,x + w,h + y,x,y,x + w,y + h,c);}  }
class C{  public DateOrTimeProperty(Date date){  this(date,false);}  }
class C{  public void paintScrollBarTrackBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBorder(context,g,x,y,w,h,orientation);}  }
class C{  private Map<URI,Integer> createVolumeMapForExportMask(ExportMask exportMask){  Map<URI,Integer> map=new HashMap<>();  for (  URI uri : ExportMaskUtils.getVolumeURIs(exportMask)) {    map.put(uri,ExportGroup.LUN_UNASSIGNED);  }  return map;}  }
class C{  public boolean isSupported(String sql){  return true;}  }
class C{  public ServiceCall<Void> deleteCustomization(String customizationId){  Validator.notNull(customizationId,"customizationId cannot be null");  RequestBuilder requestBuilder=RequestBuilder.delete(String.format(PATH_CUSTOMIZATION,customizationId));  return createServiceCall(requestBuilder.build(),ResponseConverterUtils.getVoid());}  }
class C{  public void testConstructionAndUtilities(){  final StatementPatternNode spn=(StatementPatternNode)new Helper(){{      tmp=statementPatternNode(varNode("x"),constantNode(b),constantNode(c));    }  }.getTmp();  final StatementPatternNode spnOpt=(StatementPatternNode)new Helper(){{      tmp=statementPatternNode(varNode("y"),constantNode(b),constantNode(c));    }  }.getTmp();  spnOpt.setOptional(true);  final UnionNode unionNode=(UnionNode)new Helper(){{      tmp=unionNode(joinGroupNode(statementPatternNode(varNode("w"),constantNode(c),varNode("z"))),joinGroupNode(bind(varNode("req"),varNode("z"))));    }  }.getTmp();  final FilterNode fn=(FilterNode)new Helper(){{      tmp=filter(FunctionNode.EQ(constantNode(w),varNode("filterVar")));    }  }.getTmp();  final JoinGroupNode jgn=(JoinGroupNode)new Helper(){{      tmp=joinGroupNode(spn,spnOpt,unionNode,fn);    }  }.getTmp();  final QueryRoot query=(QueryRoot)new Helper(){{      tmp=select(varNodes(x,y,z),jgn);    }  }.getTmp();  final AST2BOpContext context=new AST2BOpContext(new ASTContainer(query),store);  final StaticAnalysis sa=new StaticAnalysis(query,context);  final GlobalAnnotations globals=new GlobalAnnotations(context.getLexiconNamespace(),context.getTimestamp());  AST2BOpUtility.toVE(getBOpContext(),globals,fn.getValueExpressionNode());  final GroupNodeVarBindingInfo biSpn=new GroupNodeVarBindingInfo(spn,sa,null);  assertEquals(varSet("x"),biSpn.getDefinitelyProduced());  assertEquals(varSet("x"),biSpn.getDesiredBound());  assertEquals(varSet(),biSpn.getRequiredBound());  assertEquals(varSet("x"),biSpn.getMaybeProduced());  assertEquals(varSet(),biSpn.leftToBeBound(varSet()));  assertEquals(varSet(),biSpn.leftToBeBound(varSet("x")));  assertEquals(spn,biSpn.getNode());  final GroupNodeVarBindingInfo biSpnOpt=new GroupNodeVarBindingInfo(spnOpt,sa,null);  assertEquals(varSet(),biSpnOpt.getDefinitelyProduced());  assertEquals(varSet("y"),biSpnOpt.getDesiredBound());  assertEquals(varSet(),biSpnOpt.getRequiredBound());  assertEquals(varSet("y"),biSpnOpt.getMaybeProduced());  assertEquals(varSet(),biSpnOpt.leftToBeBound(varSet()));  assertEquals(varSet(),biSpnOpt.leftToBeBound(varSet("x")));  assertEquals(spnOpt,biSpnOpt.getNode());  final GroupNodeVarBindingInfo biUnionNode=new GroupNodeVarBindingInfo(unionNode,sa,null);  assertEquals(varSet(),biUnionNode.getDefinitelyProduced());  assertEquals(varSet("w","z"),biUnionNode.getDesiredBound());  assertEquals(varSet("req"),biUnionNode.getRequiredBound());  assertEquals(varSet("w","z"),biUnionNode.getMaybeProduced());  assertEquals(varSet("req"),biUnionNode.leftToBeBound(varSet()));  assertEquals(varSet(),biUnionNode.leftToBeBound(varSet("req")));  assertEquals(unionNode,biUnionNode.getNode());  final GroupNodeVarBindingInfo biFn=new GroupNodeVarBindingInfo(fn,sa,null);  assertEquals(varSet(),biFn.getDefinitelyProduced());  assertEquals(varSet(),biFn.getDesiredBound());  assertEquals(varSet("filterVar"),biFn.getRequiredBound());  assertEquals(varSet(),biFn.getMaybeProduced());  assertEquals(varSet("filterVar"),biFn.leftToBeBound(varSet()));  assertEquals(varSet("filterVar"),biFn.leftToBeBound(varSet("x")));  assertEquals(varSet(),biFn.leftToBeBound(varSet("y","filterVar")));  assertEquals(fn,biFn.getNode());  final GroupNodeVarBindingInfo biJgn=new GroupNodeVarBindingInfo(jgn,sa,null);  assertEquals(varSet("x"),biJgn.getDefinitelyProduced());  assertEquals(varSet("x","y","z","w"),biJgn.getDesiredBound());  assertEquals(varSet("filterVar","req"),biJgn.getRequiredBound());  assertEquals(varSet("x","y","z","w"),biJgn.getMaybeProduced());  assertEquals(varSet("filterVar","req"),biJgn.leftToBeBound(varSet()));  assertEquals(varSet("filterVar"),biJgn.leftToBeBound(varSet("x","req")));  assertEquals(jgn,biJgn.getNode());}  }
class C{  protected int addHeaderToOutput(byte[] msg,jmri.jmrix.AbstractMRMessage m){  if (log.isDebugEnabled()) {    log.debug("Appending 0xFF 0xFE to start of outgoing message");  }  msg[0]=(byte)0xFF;  msg[1]=(byte)0xFE;  return 2;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col;  double noData;  int progress;  int i;  int numReclassRanges;  int numReclassRangesMinusOne;  String[] reclassRangeStr=null;  double[][] reclassRange;  boolean blnAssignMode=false;  String delimiter="\t";  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  reclassRangeStr=args[2].split(delimiter);  if (reclassRangeStr.length == 1) {    delimiter=";";    reclassRangeStr=args[2].split(delimiter);    if (reclassRangeStr.length == 1) {      delimiter=",";      reclassRangeStr=args[2].split(delimiter);      if (reclassRangeStr.length == 1) {        showFeedback("Unrecognized relcass string delimiter. Please use " + "a tab, semicolon, or comma to delimite relcass values.");        return;      }    }  }  if (reclassRangeStr[2].toLowerCase().equals("not specified")) {    blnAssignMode=true;  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    double[] data;    noData=image.getNoDataValue();    numReclassRanges=reclassRangeStr.length / 3;    numReclassRangesMinusOne=numReclassRanges - 1;    reclassRange=new double[3][numReclassRanges];    i=0;    for (int b=0; b < reclassRangeStr.length; b++) {      if (!reclassRangeStr[b].toLowerCase().equals("not specified")) {        if (!reclassRangeStr[b].toLowerCase().equals("nodata")) {          reclassRange[i][b / 3]=Double.parseDouble(reclassRangeStr[b]);        } else {          reclassRange[i][b / 3]=noData;        }      } else {        reclassRange[i][b / 3]=0;      }      i++;      if (i == 3) {        i=0;      }    }    if (numReclassRanges == 0) {      showFeedback("There is an error with the reclass ranges.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette(image.getPreferredPalette());    if (blnAssignMode) {      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          for (i=0; i < numReclassRanges; i++) {            if (data[col] == reclassRange[1][i]) {              output.setValue(row,col,reclassRange[0][i]);              break;            }            if (i == numReclassRangesMinusOne) {              output.setValue(row,col,data[col]);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    } else {      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          for (i=0; i < numReclassRanges; i++) {            if (data[col] >= reclassRange[1][i] && data[col] < reclassRange[2][i]) {              output.setValue(row,col,reclassRange[0][i]);              break;            }            if (i == numReclassRangesMinusOne) {              output.setValue(row,col,data[col]);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    }    image.close();    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void removeValue(Value value){  actionValues.remove(value);  actionValuesAsArray=null;}  }
class C{  public static void start(Service service,TaskService.State taskServiceState,Operation.CompletionHandler handler){  Date now=DateTime.now().toDate();  taskServiceState.state=TaskService.State.TaskState.STARTED;  taskServiceState.startedTime=now;  TaskService.State.Step firstStep=taskServiceState.steps.get(0);  firstStep.state=TaskService.State.StepState.STARTED;  firstStep.startedTime=now;  ServiceHostUtils.getCloudStoreHelper(service.getHost()).createPatch(taskServiceState.documentSelfLink).setBody(taskServiceState).setCompletion(handler).sendWith(service);}  }
class C{  public static boolean isRepeatChar(char ch){  return null != repeatCharHashTable.get("" + ch);}  }
class C{  public static boolean validateUint32(String value){  try {    return Integer.parseInt(value) >= 0;  } catch (  Exception e) {    return false;  }}  }
class C{  public void addUsername(String username){  this.usernames.add(username);}  }
class C{  public void testGetWebModuleContextRootMultipleWebModules() throws Exception {  String xml="<application>" + "  <module>" + "    <web>"+ "      <web-uri>webmodule1.jar</web-uri>"+ "      <context-root>/webmodule1</context-root>"+ "    </web>"+ "  </module>"+ "  <module>"+ "    <web>"+ "      <web-uri>webmodule2.jar</web-uri>"+ "      <context-root>/webmodule2</context-root>"+ "    </web>"+ "  </module>"+ "  <module>"+ "    <web>"+ "      <web-uri>webmodule3.jar</web-uri>"+ "      <context-root>/webmodule3</context-root>"+ "    </web>"+ "  </module>"+ "</application>";  ApplicationXml applicationXml=ApplicationXmlIo.parseApplicationXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),null);  assertEquals("/webmodule1",applicationXml.getWebModuleContextRoot("webmodule1.jar"));  assertEquals("/webmodule2",applicationXml.getWebModuleContextRoot("webmodule2.jar"));  assertEquals("/webmodule3",applicationXml.getWebModuleContextRoot("webmodule3.jar"));}  }
class C{  public void addHeaderView(View v){  AdapterWithHeader adapter=(AdapterWithHeader)super.getAdapter();  if (null != adapter) {    adapter.addHeaderView(v);  }}  }
class C{  public boolean removeDataSet(int index){  if (index >= mDataSets.size() || index < 0)   return false;  T set=mDataSets.get(index);  return removeDataSet(set);}  }
class C{  private void walk(Node node){  if (node instanceof Element) {    findLicenseUrl((Element)node);  }  if (node instanceof Comment) {    findRdf(((Comment)node).getData());  }  NodeList children=node.getChildNodes();  for (int i=0; children != null && i < children.getLength(); i++) {    walk(children.item(i));  }}  }
class C{  public double findMinimum(double x,UnivariateFunction f){  double tol=MachineAccuracy.EPSILON;  return optimize(x,f,tol);}  }
class C{  public void hide(boolean animate){  hide(animate,fadeOut);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Hash(String hashString){  if (hashString == null) {    throw new IllegalArgumentException("hashString must not be null");  }  int idx=hashString.indexOf(SEPARATOR);  if (idx == -1) {    throw new IllegalArgumentException("hash string must be in the " + "form of '<algorithm id>" + SEPARATOR + "<value>'");  }  algoId=hashString.substring(0,idx);  hashValue=hashString.substring(idx + 1);  verifyFields();}  }
class C{  @Override public void buildClassifier(Instances data) throws Exception {  initModel();  getCapabilities().testWithFail(data);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_CONCRETE_METHOD_DECLARATION_2__MORE_CODE_1:    getMoreCode_1().clear();  return;}super.eUnset(featureID);}  }
class C{  protected ExecModuleImpl(){  super();}  }
class C{  protected Element createNewTextElement(String text){  HTMLElement elem=new HTMLElement(text,true);  return elem;}  }
class C{  void remove(final HGPersistentHandle typeHandle,final HGAtomType type){  List<HGHandle> subsumesLinks=hg.findAll(graph,hg.and(hg.incident(typeHandle),hg.type(HGSubsumes.class)));  for (  HGHandle h : subsumesLinks)   graph.remove(h);  HGHandle typeStruct=hg.findOne(graph,hg.and(hg.type(HGTypeStructuralInfo.class),hg.eq("typeHandle",typeHandle)));  if (typeStruct != null)   graph.remove(typeStruct);  HGBidirectionalIndex<String,HGPersistentHandle> aliases=getAliases();  HGSearchResult<String> rs=aliases.findByValue(typeHandle);  try {    while (rs.hasNext()) {      aliases.removeEntry((String)rs.next(),typeHandle);    }  }  finally {    rs.close();  }  try {    HGBidirectionalIndex<String,HGPersistentHandle> idx=getUriDB();    Set<URI> uris=this.getIdentifiersForHandle(typeHandle);    for (    URI u : uris) {      idx.removeEntry(u.toString(),typeHandle);      HGTypeSchema<?> schema=config.getSchema(u.getScheme());      if (schema != null)       schema.removeType(u);    }  } catch (  Throwable t) {    throw new HGException(t);  } finally {    if (rs != null)     try {      rs.close();    } catch (    Throwable _) {    }  }}  }
class C{  public BaleenJobManager(){  super("Job","jobs");}  }
class C{  public void addInterface(NetworkInterface ni){  this.interfaces.add(ni);}  }
class C{  public Restartable(ValueMap.Builder out){  this.out=out;  key="id:" + ++id + " /time:"+ System.nanoTime()+ " /random:"+ (int)(Math.random() * Long.MAX_VALUE);  restore=false;  arg=null;  out.put("key",key);}  }
class C{  void canUseDiamond(boolean canUseDiamond){  fCanUseDiamond=canUseDiamond;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.586 -0500",hash_original_method="CB79FF72E5AA03B786B465A966D1C6DF",hash_generated_method="81C80B715F622ABB2CBDA87FD4BB7C6D") private static boolean isEmergencyNumberInternal(String number,String defaultCountryIso,boolean useExactMatch){  PhoneNumberUtil util=PhoneNumberUtil.getInstance();  try {    PhoneNumber pn=util.parse(number,defaultCountryIso);    if (util.isValidNumber(pn)) {      return false;    } else     if ("BR".equalsIgnoreCase(defaultCountryIso) && number.length() >= 8) {      return false;    }  } catch (  NumberParseException e) {  }  return isEmergencyNumberInternal(number,useExactMatch);}  }
class C{  public ImageRequest(String url,Response.Listener<Bitmap> listener,int maxWidth,int maxHeight,Config decodeConfig,Response.ErrorListener errorListener){  super(Method.GET,url,errorListener);  setRetryPolicy(new DefaultRetryPolicy(IMAGE_TIMEOUT_MS,IMAGE_MAX_RETRIES,IMAGE_BACKOFF_MULT));  mListener=listener;  mDecodeConfig=decodeConfig;  mMaxWidth=maxWidth;  mMaxHeight=maxHeight;}  }
class C{  public final boolean isKeepChildForeground(){  return mKeepChildForeground;}  }
class C{  @Override public ServerSocket createServerSocket() throws IOException {  return new SSLServerSocketImpl(context);}  }
class C{  public static void delObject(String cacheName){  SharedPreferences s=context.getSharedPreferences(APP_ID,Context.MODE_PRIVATE);  s.edit().remove(cacheName).apply();}  }
class C{  public Message fromPdu(Pdu pdu){  try (ByteArrayInputStream in=new ByteArrayInputStream(pdu.getPayload())){    return fromStream(pdu.getType(),in);  } catch (  TypeException|IOException e) {    throw new PduException(e);  }}  }
class C{  public Option(String opt,String longOpt,boolean hasArg,String description) throws IllegalArgumentException {  OptionValidator.validateOption(opt);  this.opt=opt;  this.longOpt=longOpt;  if (hasArg) {    this.numberOfArgs=1;  }  this.description=description;}  }
class C{  public final String toString(){  if (this == nullLoc) {    return UNKNOWN_LOCATION;  } else   if (this.name == null) {    return (LINE + bLine + COL+ bColumn+ TO_LINE+ eLine+ COL+ eColumn+ OF_MODULE+ "null");  } else   if (!this.name.equals(unknown) && this.bColumn == 0 && this.eColumn == 0 && this.bLine == 0 && this.eLine == 0) {    return IN_MODULE + name;  } else {    return (LINE + bLine + COL+ bColumn+ TO_LINE+ eLine+ COL+ eColumn+ OF_MODULE+ name);  }}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getOrdinalOp_();}  }
class C{  private void endScript(){  tag.setScript(script);  insideScript=false;}  }
class C{  public static void writeMultiKtab(String tab,KDC... kdcs) throws IOException, KrbException {  KeyTab.create(tab).save();  appendMultiKtab(tab,kdcs);}  }
class C{  public void insertAfter(Unit toInsert,Unit point){  if (point == mTail)   mTail=toInsert;  Chain<Unit> methodBody=mBody.getUnits();  methodBody.insertAfter(toInsert,point);}  }
class C{  private PostgreSQLGroupNodeLoader(){}  }
class C{  public void testNewTrackWithMarker(){  EndToEndTestUtils.startRecording();  checkRecording();  EndToEndTestUtils.sendGps(2);  EndToEndTestUtils.createWaypoint(0);  EndToEndTestUtils.sendGps(2,2);  EndToEndTestUtils.createWaypoint(1);  EndToEndTestUtils.SOLO.goBack();  instrumentation.waitForIdleSync();  EndToEndTestUtils.rotateCurrentActivity();  EndToEndTestUtils.stopRecording(false);  String trackName=EndToEndTestUtils.TRACK_NAME_PREFIX + System.currentTimeMillis();  EndToEndTestUtils.SOLO.enterText(0,trackName);  EndToEndTestUtils.SOLO.enterText(1,EndToEndTestUtils.activityType);  EndToEndTestUtils.SOLO.clickOnButton(trackListActivity.getString(R.string.generic_save));  instrumentation.waitForIdleSync();  EndToEndTestUtils.SOLO.scrollUp();  assertTrue(EndToEndTestUtils.SOLO.waitForText(trackName,1,EndToEndTestUtils.NORMAL_WAIT_TIME,true,false));  EndToEndTestUtils.SOLO.clickOnText(trackName);  instrumentation.waitForIdleSync();  EndToEndTestUtils.findMenuItem(trackListActivity.getString(R.string.menu_markers),true);  instrumentation.waitForIdleSync();  assertTrue(EndToEndTestUtils.SOLO.getCurrentViews(ListView.class).get(0).getCount() == 2);}  }
class C{  protected void processBDDPLists(){  int count=0;  Set<NodePortTuple> nptList=new HashSet<NodePortTuple>();  while (count < BDDP_TASK_SIZE && quarantineQueue.peek() != null) {    NodePortTuple npt;    npt=quarantineQueue.remove();    if (!toRemoveFromQuarantineQueue.remove(npt)) {      sendDiscoveryMessage(npt.getNodeId(),npt.getPortId(),false,false);    }    nptList.add(npt);    count++;  }  count=0;  while (count < BDDP_TASK_SIZE && maintenanceQueue.peek() != null) {    NodePortTuple npt;    npt=maintenanceQueue.remove();    if (!toRemoveFromMaintenanceQueue.remove(npt)) {      sendDiscoveryMessage(npt.getNodeId(),npt.getPortId(),false,false);    }    count++;  }  for (  NodePortTuple npt : nptList) {    generateSwitchPortStatusUpdate(npt.getNodeId(),npt.getPortId());  }}  }
class C{  private void clickPressedItem(final View child,final int position){  final long id=getItemIdAtPosition(position);  performItemClick(child,position,id);}  }
class C{  public ClassPath appendClassPath(String pathname) throws NotFoundException {  return source.appendClassPath(pathname);}  }
class C{  public Object clone(){  WeightedRandomSampler copy=(WeightedRandomSampler)super.clone();  copy.generator=(Uniform)this.generator.clone();  return copy;}  }
class C{  public void addEntriesForCategory(List<POLandingpageEntry> entries,VOCategory category){  if (category0 == null) {    category0=category;    entriesOfCateogry0=entries;  } else   if (category1 == null) {    category1=category;    entriesOfCateogry1=entries;  } else   if (category2 == null) {    category2=category;    entriesOfCateogry2=entries;  } else {    throw new IllegalStateException();  }}  }
class C{  private static String computeSdkRegistrantsKeyV3(){  return SDK_REGISTRANTS_KEY_PREFIX + "_" + getInstallationId();}  }
class C{  private void checkRecycledViewPool(int viewType){  try {    if (mViewTypes.size() > MAX_VIEWTYPE_ALLOW_CACHE)     mAllowCacheViewHolder=false;    if (mDownForBidCacheViewHolder)     if (getHostView() != null && getHostView().getInnerView() != null)     getHostView().getInnerView().getRecycledViewPool().setMaxRecycledViews(viewType,0);    if (!mDownForBidCacheViewHolder) {      if (!mAllowCacheViewHolder) {        if (getHostView() != null && getHostView().getInnerView() != null) {          for (int i=0; i < mViewTypes.size(); i++) {            getHostView().getInnerView().getRecycledViewPool().setMaxRecycledViews(mViewTypes.keyAt(i),0);          }          mDownForBidCacheViewHolder=true;        }      }    }  } catch (  Exception e) {    WXLogUtils.e(TAG,"Clear recycledViewPool error!");  }}  }
class C{  public boolean isTopic(){  if (ActiveMQActivation.trace) {    ActiveMQRALogger.LOGGER.trace("isTopic()");  }  return isTopic;}  }
class C{  public boolean hasDurableClient(String durableClientId){  DurableClientInfoResponse resp=(DurableClientInfoResponse)sendAndWait(DurableClientInfoRequest.create(durableClientId,DurableClientInfoRequest.HAS_DURABLE_CLIENT_REQUEST));  boolean result=resp.getResultBoolean();  return result;}  }
class C{  public boolean isSpecial(){  return special;}  }
class C{  public void removePropertyChangeListener(PropertyChangeListener listener){  if (listener == null) {    return;  }  if (listener instanceof PropertyChangeListenerProxy) {    PropertyChangeListenerProxy proxy=(PropertyChangeListenerProxy)listener;    removePropertyChangeListener(proxy.getPropertyName(),proxy.getListener());  } else {    this.map.remove(null,listener);  }}  }
class C{  public final void addMethod2(MethodInfo minfo){  methods.add(minfo);}  }
class C{  public void testNextLongBadBounds(){  long[][] badBoundss={{17L,2L},{-42L,-42L},{Long.MAX_VALUE,Long.MIN_VALUE}};  ThreadLocalRandom rnd=ThreadLocalRandom.current();  for (  long[] badBounds : badBoundss) {    try {      rnd.nextLong(badBounds[0],badBounds[1]);      shouldThrow();    } catch (    IllegalArgumentException success) {    }  }}  }
class C{  private void processStartedState(final State currentState) throws Throwable {switch (currentState.taskState.subStage) {case REMOVE_FROM_API_FE:    removeFromAPIFE(currentState);  break;case DEPROVISION_HOSTS:queryAndDeprovisionHosts(currentState);break;}}  }
class C{  @Override protected int calcnCluster(){  return 5;}  }
class C{  public boolean isEmail(String email){  return EMAIL_VALIDATOR.isValid(email);}  }
class C{  @Override public List<NamedRelatedResourceRep> list(){  return getList(baseUrl);}  }
class C{  @Override protected void copyRow(final Key key,final Value value,final Context context) throws IOException, InterruptedException {  final Mutation mutation=new Mutation(key.getRow().getBytes());  mutation.put(key.getColumnFamily(),key.getColumnQualifier(),key.getColumnVisibilityParsed(),key.getTimestamp(),value);  context.write(childTableNameText,mutation);}  }
class C{  public Squared(double[] priors,int large){  super(priors,large);}  }
class C{  @Ignore @Test public void testNotFirstLineNoLeadingSpaces(){  doReturn("").when(document).getLineContent(0);  doReturn("/*").when(document).getLineContent(1);  doReturn(" *").when(document).getLineContent(2);  final TextChange input=new TextChange.Builder().from(new TextPosition(1,2)).to(new TextPosition(2,2)).insert("\n *").build();  final TextChange output=interceptor.processChange(input,document);  assertNotNull(output);  final TextChange expected=new TextChange.Builder().from(new TextPosition(1,2)).to(new TextPosition(3,3)).insert("\n * \n */").build();  Assert.assertEquals(expected,output);}  }
class C{  public String maxNumberOfItemsTipText(){  return "The maximum number of items to include in frequent item sets. -1 " + "means no limit.";}  }
class C{  protected DBMSEvent extractEventRowLevel(String firstData) throws InterruptedException, ExtractorException {  DBMSEvent dbmsEvent=null;  RowChangeData rowChangeData=new RowChangeData();  OneRowChange oneRowChange=null;  boolean first=true;  if (!initialized)   throw new ExtractorException("Extractor not initialized");  ArrayList<DBMSData> trx=new ArrayList<DBMSData>(128);  while (true) {    String data;    if (first)     data=firstData; else     data=getNextOp();    first=false;    oneRowChange=parser.parse(data,lastSCN);    if (oneRowChange == null) {      trx.add(rowChangeData);      dbmsEvent=new DBMSEvent(lastEventID,trx,new Timestamp(System.currentTimeMillis()));      break;    } else {      rowChangeData.appendOneRowChange(oneRowChange);    }  }  return dbmsEvent;}  }
class C{  void part2(IndexWriter writer,RangeMergePolicy fsmp) throws Exception {  for (int x=20; x < 25; x++) {    writer.addDocument(DocHelper.createDocument(x,"5",2));  }  writer.flush(false,false);  for (int x=25; x < 30; x++) {    writer.addDocument(DocHelper.createDocument(x,"5",2));  }  writer.flush(false,false);  Term delterm=new Term("id","8");  writer.deleteDocuments(delterm);  fsmp.doMerge=true;  fsmp.start=1;  fsmp.length=2;  writer.maybeMerge();}  }
class C{  public void connectFailed(Connection connection,IOException failure){  Route failedRoute=connection.getRoute();  if (failedRoute.getProxy().type() != Proxy.Type.DIRECT && proxySelector != null) {    proxySelector.connectFailed(uri,failedRoute.getProxy().address(),failure);  }  routeDatabase.failed(failedRoute,failure);}  }
class C{  public void downloadImageToStorage(String storageFile,SuccessCallback<Image> onSuccess,boolean useCache){  downloadImageToStorage(storageFile,onSuccess,new CallbackAdapter<Image>(),useCache);}  }
class C{  public void updateContent(byte[] content) throws ForbiddenException, ServerException {  updateContent(content,getMediaType());}  }
class C{  @Override protected void removeRange(int start,int end){  if (start < 0) {    throw new IndexOutOfBoundsException("" + start);  } else   if (end > size) {    throw new IndexOutOfBoundsException("" + end + " out of: "+ size);  } else   if (start > end) {    throw new IndexOutOfBoundsException("" + start + " out of: "+ end);  }  if (start == end) {    return;  }  if (end == size) {    Arrays.fill(array,firstIndex + start,firstIndex + size,null);  } else   if (start == 0) {    Arrays.fill(array,firstIndex,firstIndex + end,null);    firstIndex+=end;  } else {    System.arraycopy(array,firstIndex + end,array,firstIndex + start,size - end);    int lastIndex=firstIndex + size;    int newLast=lastIndex + start - end;    Arrays.fill(array,newLast,lastIndex,null);  }  size-=end - start;  modCount++;}  }
class C{  public static boolean isUrlLocalMachine(final String urlString) throws UnknownHostException, MalformedURLException {  final String localAddress=InetAddress.getLocalHost().getHostAddress();  final String requestAddress=InetAddress.getByName(new URL(urlString).getHost()).getHostAddress();  return localAddress != null && requestAddress != null && localAddress.equals(requestAddress);}  }
class C{  public OpenIntObjectHashMap(int initialCapacity){  this(initialCapacity,defaultMinLoadFactor,defaultMaxLoadFactor);}  }
class C{  public static boolean isZero(long[] v){  for (int i=0; i < v.length; i++) {    if (v[i] != 0) {      return false;    }  }  return true;}  }
class C{  @Deprecated public static String[] mergeQuotedSplits(String line,String[] splittedTokens,String quoteString) throws IOException {  int[] tokenStarts=new int[splittedTokens.length];  int currentCounter=0;  int currentIndex=0;  for (  String currentToken : splittedTokens) {    tokenStarts[currentIndex]=line.indexOf(currentToken,currentCounter);    currentCounter=tokenStarts[currentIndex] + currentToken.length() + 1;    currentIndex++;  }  List<String> tokens=new LinkedList<>();  int start=-1;  int end=-1;  for (int i=0; i < splittedTokens.length; i++) {    if (splittedTokens[i].trim().startsWith(quoteString)) {      start=i;    }    if (start >= 0) {      StringBuffer current=new StringBuffer();      while (end < 0 && i < splittedTokens.length) {        if (splittedTokens[i].endsWith(quoteString)) {          end=i;          break;        }        i++;      }      if (end < 0) {        throw new IOException("Error during reading: open quote \" is not ended!");      }      String lastToken=null;      for (int a=start; a <= end; a++) {        String nextToken=splittedTokens[a];        if (nextToken.length() == 0) {          continue;        }        if (a == start) {          nextToken=nextToken.substring(quoteString.length());        }        if (a == end) {          nextToken=nextToken.substring(0,nextToken.length() - quoteString.length());        }        if (lastToken != null) {          int lastIndex=tokenStarts[a - 1] + lastToken.length();          int thisIndex=tokenStarts[a];          if (lastIndex >= 0 && thisIndex >= lastIndex) {            String separator=line.substring(lastIndex,thisIndex);            current.append(separator);          }        }        current.append(nextToken);        lastToken=splittedTokens[a];      }      tokens.add(current.toString());      start=-1;      end=-1;    } else {      tokens.add(splittedTokens[i]);    }  }  String[] quoted=new String[tokens.size()];  tokens.toArray(quoted);  return quoted;}  }
class C{  private int insertDetailsDistributionDemand(){  String sql="UPDATE M_DistributionRunLine SET MinQty = 0 WHERE MinQty IS NULL";  int no=DB.executeUpdate(sql,get_TrxName());  sql="UPDATE M_DistributionListLine SET MinQty = 0 WHERE MinQty IS NULL";  no=DB.executeUpdate(sql,get_TrxName());  sql="DELETE FROM T_DistributionRunDetail WHERE M_DistributionRun_ID=" + p_M_DistributionRun_ID;  no=DB.executeUpdate(sql,get_TrxName());  log.fine("insertDetails - deleted #" + no);  sql="INSERT INTO T_DistributionRunDetail " + "(M_DistributionRun_ID, M_DistributionRunLine_ID, M_DistributionList_ID, M_DistributionListLine_ID," + "AD_Client_ID,AD_Org_ID, IsActive, Created,CreatedBy, Updated,UpdatedBy,"+ "C_BPartner_ID, C_BPartner_Location_ID, M_Product_ID,"+ "Ratio, MinQty, Qty) "+ "SELECT MAX(rl.M_DistributionRun_ID), MAX(rl.M_DistributionRunLine_ID),MAX(ll.M_DistributionList_ID), MAX(ll.M_DistributionListLine_ID), "+ "MAX(rl.AD_Client_ID),MAX(rl.AD_Org_ID), MAX(rl.IsActive), MAX(rl.Created),MAX(rl.CreatedBy), MAX(rl.Updated),MAX(rl.UpdatedBy), "+ "MAX(ll.C_BPartner_ID), MAX(ll.C_BPartner_Location_ID), MAX(rl.M_Product_ID),"+ "COALESCE (SUM(ol.QtyOrdered-ol.QtyDelivered-TargetQty), 0) , "+ " 0 , 0 FROM M_DistributionRunLine rl "+ "INNER JOIN M_DistributionList l ON (rl.M_DistributionList_ID=l.M_DistributionList_ID) "+ "INNER JOIN M_DistributionListLine ll ON (rl.M_DistributionList_ID=ll.M_DistributionList_ID) "+ "INNER JOIN DD_Order o ON (o.C_BPartner_ID=ll.C_BPartner_ID AND o.DocStatus IN ('DR','IN')) "+ "INNER JOIN DD_OrderLine ol ON (ol.DD_Order_ID=o.DD_Order_ID AND ol.M_Product_ID=rl.M_Product_ID) "+ "INNER JOIN M_Locator loc ON (loc.M_Locator_ID=ol.M_Locator_ID AND loc.M_Warehouse_ID=" + p_M_Warehouse_ID + ") "+ "WHERE rl.M_DistributionRun_ID="+ p_M_DistributionRun_ID+ " AND rl.IsActive='Y' AND ll.IsActive='Y' AND ol.DatePromised <= "+ DB.TO_DATE(p_DatePromised)+ " GROUP BY o.M_Shipper_ID , ll.C_BPartner_ID, ol.M_Product_ID";  no=DB.executeUpdate(sql,get_TrxName());  List<MDistributionRunDetail> records=new Query(getCtx(),MDistributionRunDetail.Table_Name,MDistributionRunDetail.COLUMNNAME_M_DistributionRun_ID + "=?",get_TrxName()).setParameters(new Object[]{p_M_DistributionRun_ID}).list();  for (  MDistributionRunDetail record : records) {    MDistributionRunLine drl=(MDistributionRunLine)MTable.get(getCtx(),MDistributionRunLine.Table_ID).getPO(record.getM_DistributionRunLine_ID(),get_TrxName());    MProduct product=MProduct.get(getCtx(),record.getM_Product_ID());    BigDecimal ration=record.getRatio();    BigDecimal totalration=getQtyDemand(record.getM_Product_ID());    log.info("Value:" + product.getValue());    log.info("Product:" + product.getName());    log.info("Qty To Deliver:" + record.getRatio());    log.info("Qty Target:" + record.getMinQty());    log.info("Qty Total Available:" + drl.getTotalQty());    log.info("Qty Total Demand:" + totalration);    BigDecimal factor=ration.divide(totalration,12,BigDecimal.ROUND_HALF_UP);    record.setQty(drl.getTotalQty().multiply(factor));    record.saveEx();  }  log.fine("inserted #" + no);  return no;}  }
class C{  public boolean equals(Object obj){  if (obj == null)   return false;  if (!(obj instanceof ParsePosition))   return false;  ParsePosition other=(ParsePosition)obj;  return (index == other.index && errorIndex == other.errorIndex);}  }
class C{  public static BigInteger findLCM(final List<BigInteger> numbers){  BigInteger result=numbers.get(0);  for (int i=1; i < numbers.size(); i++) {    result=findLCM(result,numbers.get(i));  }  return result;}  }
class C{  @Override protected SubCategory iniCustomChildHolder(View childview){  return new SubCategory(childview);}  }
class C{  public void reload(final Runnable actionOnReload){  this.actionOnReload=actionOnReload;  reload();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:00.391 -0500",hash_original_method="36CAA565E766988B673C74F846171C19",hash_generated_method="92D0B4BBA24621AE273B53B31014859B") private static void renumProviders(){  Provider[] p=Services.getProviders();  for (int i=0; i < p.length; i++) {    p[i].setProviderNumber(i + 1);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public ChartTransferable(JFreeChart chart,int width,int height){  this(chart,width,height,true);}  }
class C{  public T caseCatchBlock(CatchBlock object){  return null;}  }
class C{  void loadProtoIds() throws IOException {  int count=mHeaderItem.protoIdsSize;  mProtoIds=new ProtoIdItem[count];  seek(mHeaderItem.protoIdsOff);  for (int i=0; i < count; i++) {    mProtoIds[i]=new ProtoIdItem();    mProtoIds[i].shortyIdx=readInt();    mProtoIds[i].returnTypeIdx=readInt();    mProtoIds[i].parametersOff=readInt();  }  for (int i=0; i < count; i++) {    ProtoIdItem protoId=mProtoIds[i];    int offset=protoId.parametersOff;    if (offset == 0) {      protoId.types=new int[0];      continue;    } else {      seek(offset);      int size=readInt();      protoId.types=new int[size];      for (int j=0; j < size; j++) {        protoId.types[j]=readShort() & 0xffff;      }    }  }}  }
class C{  public static List findDirEdgesInRing(PolygonizeDirectedEdge startDE){  PolygonizeDirectedEdge de=startDE;  List edges=new ArrayList();  do {    edges.add(de);    de=de.getNext();    Assert.isTrue(de != null,"found null DE in ring");    Assert.isTrue(de == startDE || !de.isInRing(),"found DE already in ring");  } while (de != startDE);  return edges;}  }
class C{  @SuppressWarnings("unused") @Test public void testFinalState(){  Statechart sc=_createStatechart("sc");{    InterfaceScope s_scope=_createInterfaceScope("Interface",sc);    VariableDefinition v1=_createVariableDefinition("v1",TYPE_INTEGER,s_scope);    EventDefinition e1=_createEventDefinition("e1",s_scope);    Region r=_createRegion("r",sc);{      State s1=_createState("s1",r);{        LocalReaction lr1=_createLocalReaction(s1,null);        _createRegularEventSpec(e1,(ReactionTrigger)lr1.getTrigger());        ReactionEffect lr1_eff=_createReactionEffect(lr1);        AssignmentExpression assign1=_createVariableAssignment(v1,AssignmentOperator.ASSIGN,_createValue(42),lr1_eff);        Region r_s1=_createRegion("r",s1);{          State s3=_createState("s3",r_s1);{            _createEntryAssignment(v1,s3,2);            Region r_s3=_createRegion("r",s3);{              State s4=_createState("s4",r_s3);              FinalState fs=_createFinalState(r_s3);              Transition t_s4_fs=_createTransition(findState(sc,"s4"),fs);              _createReactionTrigger(t_s4_fs);              _createRegularEventSpec(e1,(ReactionTrigger)t_s4_fs.getTrigger());            }          }        }      }      State s2=_createState("s2",r);{        Region r_s1=_createRegion("r",s2);{          _createState("s6",r_s1);        }      }    }    Transition t_s3_s6=_createTransition(findState(sc,"s3"),findState(sc,"s6"));    _createReactionTrigger(t_s3_s6);    _createRegularEventSpec(e1,(ReactionTrigger)t_s3_s6.getTrigger());  }  ExecutionFlow flow=sequencer.transform(sc);  ExecutionState _s1=flow.getStates().get(0);  assertEquals("sc.r.s1",_s1.getName());  ExecutionState _s3=flow.getStates().get(1);  assertEquals("sc.r.s1.r.s3",_s3.getName());  ExecutionState _s4=flow.getStates().get(2);  assertEquals("sc.r.s1.r.s3.r.s4",_s4.getName());  ExecutionState _fs=flow.getStates().get(3);  assertEquals("sc.r.s1.r.s3.r._final_",_fs.getName());  ExecutionState _s6=flow.getStates().get(5);  assertEquals("sc.r.s2.r.s6",_s6.getName());  assertNull(_fs.getEntryAction());  assertNull(_fs.getExitAction());  Sequence cycle=_fs.getReactSequence();  Sequence _seq=(Sequence)cycle.getSteps().get(0);  List<Step> steps=SCTTestUtil.flattenSequenceStepsAsList(_seq);  If _if=(If)steps.get(0);  assertCall(_if.getThenStep(),_s1.getReactions().get(0).getEffect());  _if=(If)steps.get(1);  assertCall(_if.getThenStep(),_s3.getReactions().get(0).getEffect());  assertTrue(_s3.getReactions().get(0).isTransition());  assertNotNull(_if.getElseStep());}  }
class C{  public void logp(Level logLevel,String sourceClass,String sourceMethod,String msg,Object param){  if (!internalIsLoggable(logLevel)) {    return;  }  LogRecord record=new LogRecord(logLevel,msg);  record.setLoggerName(this.name);  record.setSourceClassName(sourceClass);  record.setSourceMethodName(sourceMethod);  record.setParameters(new Object[]{param});  setResourceBundle(record);  log(record);}  }
class C{  private boolean processParameter(HttpServletRequest request){  HttpSession session=request.getSession(true);  session.removeAttribute(WebSessionCtx.HDR_MESSAGE);  Properties ctx=JSPEnv.getCtx(request);  String mode=WebUtil.getParameter(request,"mode");  if (mode == null)   return false;  boolean subscribe=!mode.startsWith("un");  int R_InterestArea_ID=WebUtil.getParameterAsInt(request,"area");  MInterestArea ia=MInterestArea.get(ctx,R_InterestArea_ID);  int AD_User_ID=WebUtil.getParameterAsInt(request,"contact");  log.fine("Subscribe=" + subscribe + ",R_InterestArea_ID="+ R_InterestArea_ID+ ",AD_User_ID="+ AD_User_ID);  if (R_InterestArea_ID == 0 || AD_User_ID == 0)   return false;  MContactInterest ci=MContactInterest.get(ctx,R_InterestArea_ID,AD_User_ID,false,null);  ci.subscribe(subscribe);  boolean ok=ci.save();  if (ok)   log.fine("success"); else   log.log(Level.SEVERE,"subscribe failed");  WebUser wu=(WebUser)session.getAttribute(WebUser.NAME);  if (wu == null) {    wu=WebUser.get(ctx,AD_User_ID);    session.setAttribute(WebUser.NAME,wu);  }  sendEMail(request,wu,ia.getName(),subscribe);  return ok;}  }
class C{  public OMCircle(double latPoint,double lonPoint,double radius){  this(latPoint,lonPoint,radius,Length.DECIMAL_DEGREE,-1);}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  stream.writeInt(this.store.size());  Set keys=this.store.keySet();  Iterator iterator=keys.iterator();  while (iterator.hasNext()) {    Comparable key=(Comparable)iterator.next();    stream.writeObject(key);    Stroke stroke=getStroke(key);    SerialUtilities.writeStroke(stroke,stream);  }}  }
class C{  public static ByteRange fixed(int num){  return new ByteRange(num,num);}  }
class C{  public static int canSeeFocus(SearchPattern pattern,IPath projectOrJarPath){  try {    IJavaModel model=JavaModelManager.getJavaModelManager().getJavaModel();    IJavaProject project=getJavaProject(projectOrJarPath,model);    IJavaElement[] focuses=getFocusedElementsAndTypes(pattern,project,null);    if (focuses.length == 0)     return PROJECT_CAN_NOT_SEE_FOCUS;    if (project != null) {      return canSeeFocus(focuses,(JavaProject)project,null);    }    int result=PROJECT_CAN_NOT_SEE_FOCUS;    IJavaProject[] allProjects=model.getJavaProjects();    for (int i=0, length=allProjects.length; i < length; i++) {      JavaProject otherProject=(JavaProject)allProjects[i];      IClasspathEntry entry=otherProject.getClasspathEntryFor(projectOrJarPath);      if (entry != null && entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY) {        int canSeeFocus=canSeeFocus(focuses,otherProject,null);        if (canSeeFocus == PROJECT_CAN_SEE_FOCUS)         return PROJECT_CAN_SEE_FOCUS;        if (canSeeFocus == PROJECT_SOURCE_CAN_NOT_SEE_FOCUS)         result=PROJECT_SOURCE_CAN_NOT_SEE_FOCUS;      }    }    return result;  } catch (  JavaModelException e) {    return PROJECT_CAN_NOT_SEE_FOCUS;  }}  }
class C{  public JHarmonicColorWheel(){  super(HSLPhysiologicColorSpace.getInstance());  initComponents();  setRadialComponentIndex(2);  setVerticalComponentIndex(1);  getModel().setComponent(1,1f);  setWheelInsets(new Insets(5,5,5,5));  modelHandler=new ModelHandler();  DefaultHarmonicColorModel p=new DefaultHarmonicColorModel();  setHarmonicColorModel(p);  setToolTipText("");}  }
class C{  public ArrayCheckTag(boolean lower,boolean upper){  lowerCheck=lower;  upperCheck=upper;}  }
class C{  public Object nextContent() throws JSONException {  char c;  StringBuffer sb;  do {    c=next();  } while (Character.isWhitespace(c));  if (c == 0) {    return null;  }  if (c == '<') {    return XML.LT;  }  sb=new StringBuffer();  for (; ; ) {    if (c == '<' || c == 0) {      back();      return sb.toString().trim();    }    if (c == '&') {      sb.append(nextEntity(c));    } else {      sb.append(c);    }    c=next();  }}  }
class C{  private void drawCaret(final Graphics g){  if (hasFocus() && (m_editedRegister != -1)) {    final Rectangle r=getRegisterBounds(m_editedRegister);    final int characterHeight=m_font.getSize();    final int x=(r.x + (m_caretPosition * m_charWidth) + (m_longestRegisterName * m_charWidth)+ 5) - 1;    final int y=r.y;    m_caret.draw(g,x,y,characterHeight);  }}  }
class C{  public void generate(OutputStream contentStream,OutputProperties request,MediaMultipart source) throws IOException {  OutputProperties prevProperties=null;  try {    prevProperties=GDataContentHandler.setThreadOutputProperties(request);    source.writeTo(contentStream);  } catch (  MessagingException me) {    Throwable t=me.getCause();    if (t instanceof IOException) {      throw (IOException)t;    }    IOException ioe=new IOException("Invalid multipart content");    ioe.initCause(new InvalidEntryException("Invalid media entry",me));    throw ioe;  } finally {    GDataContentHandler.setThreadOutputProperties(prevProperties);  }}  }
class C{  public static String chop(String s,int i,String eol){  if (i == 0 || s == null || eol == null) {    return s;  }  int length=s.length();  if (eol.length() == 2 && s.endsWith(eol)) {    length-=2;    i-=1;  }  if (i > 0) {    length-=i;  }  if (length < 0) {    length=0;  }  return s.substring(0,length);}  }
class C{  public boolean isSetExtras(){  return this.extras != null;}  }
class C{  private void checkRepeatVarsDuringUpload(final RepeatVars repeatVars){  try {    mWaiter.assertEquals(repeatVars.isRepeatUpload(),true);    mWaiter.assertEquals(repeatVars.isRepeatDownload(),false);    mWaiter.assertEquals(repeatVars.isRepeatFinished(),false);    mWaiter.assertTrue(repeatVars.getStartDateRepeat() > 0);  } catch (  IllegalAccessException e) {    mWaiter.fail(e.getMessage());  }}  }
class C{  public String toString(){  return getCssText();}  }
class C{  public ExtraClasspathOnStandaloneConfigurationTest(String testName,EnvironmentTestData testData) throws Exception {  super(testName,testData);}  }
class C{  public ConnectException(String msg){  super(msg);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrinsertbefore6.class,args);}  }
class C{  boolean respondedNoSync(){  return this.responded;}  }
class C{  public PromoteTempToFieldRefactoring(VariableDeclaration declaration,Document document){  Assert.isTrue(declaration != null);  this.document=document;  fTempDeclarationNode=declaration;  IVariableBinding resolveBinding=declaration.resolveBinding();  Assert.isTrue(resolveBinding != null && !resolveBinding.isParameter() && !resolveBinding.isField());  ASTNode root=declaration.getRoot();  Assert.isTrue(root instanceof CompilationUnit);  fCompilationUnitNode=(CompilationUnit)root;  fSelectionStart=declaration.getStartPosition();  fSelectionLength=declaration.getLength();  fFieldName="";  fVisibility=Modifier.PRIVATE;  fDeclareStatic=false;  fDeclareFinal=false;  fInitializeIn=INITIALIZE_IN_METHOD;}  }
class C{  public void startEntity(String name) throws org.xml.sax.SAXException {  if (name.equals("[dtd]"))   m_inExternalDTD=true;  if (!m_expandDTDEntities && !m_inExternalDTD) {    startNonEscaping();    characters("&" + name + ';');    endNonEscaping();  }  m_inEntityRef=true;}  }
class C{  protected Object execute(IgniteCompute compute,Class<?> cls,GridifyRangeArgument arg,GridifyNodeFilter nodeFilter,int threshold,int splitSize,long timeout) throws IgniteCheckedException {  long now=U.currentTimeMillis();  long end=timeout == 0 ? Long.MAX_VALUE : timeout + now;  if (end < 0)   end=Long.MAX_VALUE;  if (now > end)   throw new ComputeTaskTimeoutCheckedException("Timeout occurred while waiting for completion.");  Collection<?> res=compute.withTimeout(timeout == 0 ? 0L : (end - now)).execute(new GridifyDefaultRangeTask(cls,nodeFilter,threshold,splitSize,false),arg);  return result(arg.getMethodReturnType(),res);}  }
class C{  static int geomType(Geometry geom){  if (geom == null) {    return OraGeom.GEOM_TYPE.UNKNOWN_GEOMETRY;  } else   if (geom instanceof Point) {    return OraGeom.GEOM_TYPE.POINT;  } else   if (geom instanceof LineString) {    return OraGeom.GEOM_TYPE.LINE;  } else   if (geom instanceof Polygon) {    return OraGeom.GEOM_TYPE.POLYGON;  } else   if (geom instanceof MultiPoint) {    return OraGeom.GEOM_TYPE.MULTIPOINT;  } else   if (geom instanceof MultiLineString) {    return OraGeom.GEOM_TYPE.MULTILINE;  } else   if (geom instanceof MultiPolygon) {    return OraGeom.GEOM_TYPE.MULTIPOLYGON;  } else   if (geom instanceof GeometryCollection) {    return OraGeom.GEOM_TYPE.COLLECTION;  }  return OraGeom.GEOM_TYPE.UNKNOWN_GEOMETRY;}  }
class C{  public final void addAll(int[] elements){  int free=(length & 0x3FF);  int bite=free == 0 ? 0 : Math.min(elements.length,0x400 - free);  if (bite > 0) {    System.arraycopy(elements,0,pages.get(length >> 10),length & 0x3FF,bite);    length+=bite;  }  int copied=bite;  while (copied < elements.length) {    pages.add(page=new int[0x400]);    bite=Math.min(elements.length - copied,0x400);    System.arraycopy(elements,copied,page,0,bite);    copied+=bite;    length+=bite;  }}  }
class C{  public BasicDirImpl(){  _id=ISicresAdminDefsKeys.NULL_ID;  _name="";}  }
class C{  private void updateEncryptionPassword(String password){  DevicePolicyManager dpm=getDevicePolicyManager();  if (dpm.getStorageEncryptionStatus(getCurrentOrCallingUserId()) != DevicePolicyManager.ENCRYPTION_STATUS_ACTIVE) {    return;  }  IBinder service=ServiceManager.getService("mount");  if (service == null) {    Log.e(TAG,"Could not find the mount service to update the encryption password");    return;  }  IMountService mountService=IMountService.Stub.asInterface(service);  try {    mountService.changeEncryptionPassword(password);  } catch (  RemoteException e) {    Log.e(TAG,"Error changing encryption password",e);  }}  }
class C{  public FieldVisitor visitField(int access,String name,String desc,String signature,Object value){  if (cv != null) {    return cv.visitField(access,name,desc,signature,value);  }  return null;}  }
class C{  public static boolean isConfiguredWithOtherProvider(final IResource resource,final String providerId){  return isConfigured(resource) && (getRepositoryProvider(resource,providerId,false) == null);}  }
class C{  @Override public void destroy(){}  }
class C{  protected void cancelTimer(){  vertx.cancelTimer(timerId);}  }
class C{  public synchronized void checkAccess(LicenseCheckerCallback callback){  if (mPolicy.allowAccess()) {    Log.i(TAG,"Using cached license response");    callback.allow(Policy.LICENSED);  } else {    LicenseValidator validator=new LicenseValidator(mPolicy,new NullDeviceLimiter(),callback,generateNonce(),mPackageName,mVersionCode);    if (mService == null) {      Log.i(TAG,"Binding to licensing service.");      try {        boolean bindResult=mContext.bindService(new Intent(new String(Base64.decode("Y29tLmFuZHJvaWQudmVuZGluZy5saWNlbnNpbmcuSUxpY2Vuc2luZ1NlcnZpY2U="))),this,Context.BIND_AUTO_CREATE);        if (bindResult) {          mPendingChecks.offer(validator);        } else {          Log.e(TAG,"Could not bind to service.");          handleServiceConnectionError(validator);        }      } catch (      SecurityException e) {        callback.applicationError(LicenseCheckerCallback.ERROR_MISSING_PERMISSION);      }catch (      Base64DecoderException e) {        e.printStackTrace();      }    } else {      mPendingChecks.offer(validator);      runChecks();    }  }}  }
class C{  private static OFActionSetVlanPcp decode_set_vlan_priority(String actionToDecode,OFVersion version,Logger log){  Matcher n=Pattern.compile("((?:0x)?\\d+)").matcher(actionToDecode);  if (n.matches()) {    if (n.group(1) != null) {      try {        VlanPcp prior=VlanPcp.of(get_byte(n.group(1)));        OFActionSetVlanPcp.Builder ab=OFFactories.getFactory(version).actions().buildSetVlanPcp();        ab.setVlanPcp(prior);        log.debug("action {}",ab.build());        return ab.build();      } catch (      NumberFormatException e) {        log.debug("Invalid VLAN priority in: {} (error ignored)",actionToDecode);        return null;      }    }  } else {    log.debug("Invalid action: '{}'",actionToDecode);    return null;  }  return null;}  }
class C{  protected boolean isIndexSelected(IStructuredSelection selection,int index){  if (selection.isEmpty()) {    return false;  }  Iterator<?> entries=selection.iterator();  List<IRuntimeClasspathEntry> list=getCustomEntriesAsList();  while (entries.hasNext()) {    Object next=entries.next();    if (list.indexOf(next) == index) {      return true;    }  }  return false;}  }
class C{  public PLInternalCameraListener(PLManager view){  super();  mView=view;}  }
class C{  private void bootstrap(){  List<String> keysToProcess=new LinkedList<>();  keysToProcess.add(SERVER_URL_OPT);  processConfigMessages(keysToProcess);  if (coordinatorServerURL == null) {    throw new IllegalStateException("coordinator server url is null, while the bootstrap has finished ");  }  log.info("Config manager bootstrapped");}  }
class C{  @Override public void printStackTrace(PrintStream s){  if (s != null) {    super.printStackTrace(s);    SQLException next=getNextException();    for (int i=0; i < 100 && next != null; i++) {      s.println(next.toString());      next=next.getNextException();    }    if (next != null) {      s.println("(truncated)");    }  }}  }
class C{  static boolean hasTimber(){  try {    Class.forName("timber.log.Timber");    return true;  } catch (  ClassNotFoundException e) {    return false;  }}  }
class C{  public static UserProfileList list(Dfareporting reporting) throws Exception {  System.out.println("=================================================================");  System.out.println("Listing all DFA user profiles");  System.out.println("=================================================================");  UserProfileList profiles=reporting.userProfiles().list().execute();  Preconditions.checkArgument(profiles.getItems() != null && !profiles.getItems().isEmpty(),"No profiles found");  for (  UserProfile userProfile : profiles.getItems()) {    System.out.printf("User profile with ID \"%s\" and name \"%s\" was found.%n",userProfile.getProfileId(),userProfile.getUserName());  }  System.out.println();  return profiles;}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/nodecheck") public VdcNodeCheckResponse checkNodeConnections(VdcNodeCheckParam checkParam,@HeaderParam("X-Forwarded-For") String clientIp){  List<VdcConfig> vdcList=checkParam.getVirtualDataCenters();  log.info("checking nodes for vdcs {} ...",getVdcIds(vdcList));  if (service.getId().endsWith("standalone")) {    throw GeoException.fatals.remoteVDCWrongStandaloneInstall();  }  ArgValidator.checkFieldNotEmpty(vdcList,"vdc");  VirtualDataCenter localVdc=VdcUtil.getLocalVdc();  if (localVdc == null) {    throw GeoException.fatals.failedToFindLocalVDC();  }  return toVdcNodeCheckResponse(localVdc,helper.areNodesReachable(vdcList,false));}  }
class C{  private Cache createCache() throws CacheException {  final Properties props=new Properties();  props.setProperty(LOCATORS,"");  props.setProperty(MCAST_PORT,"0");  return CacheFactory.create(DistributedSystem.connect(props));}  }
class C{  public static String composeOtpUrl(OTPUserRecord otp){  String ident=otp.getIdentifier();  String secret=otp.getSecret();  String otptype=otp.getType().toString();  String otpInfo=String.format("otpauth://%s/%s?secret=%s",otptype.toLowerCase(),ident,secret);  return otpInfo;}  }
class C{  public void addExcludeGlob(final String pattern){  excludeGlobs.add("glob:" + pattern);}  }
class C{  StartupEvent(DistributionMessage d){  this.kind=MESSAGE;  this.dmsg=d;}  }
class C{  public boolean containsRegExItem(Connector connector,String pattern){  boolean result=false;  for (  RaptorTabFolder folder : folders) {    for (int i=0; i < folder.getItemCount(); i++) {      if (folder.getRaptorTabItemAt(i).raptorItem instanceof ChatConsoleWindowItem) {        ChatConsoleWindowItem item=(ChatConsoleWindowItem)folder.getRaptorTabItemAt(i).raptorItem;        if (item.getController().getConnector() == connector && item.getController() instanceof RegExController) {          RegExController controller=(RegExController)item.getController();          if (StringUtils.equals(controller.getPattern(),pattern)) {            result=true;            break;          }        }      }    }  }  return result;}  }
class C{  void recordAccess(MyIdentityHashMap<K,V> m){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 15:47:29.111 -0500",hash_original_method="595FB122BE687C917ADE2E9A2DC3AEA8",hash_generated_method="8B068CE3B77028BCE3825E6279217FDE") @DSSpec(DSCat.IO) public static String shaHex(InputStream data) throws IOException {  return Hex.encodeHexString(sha(data));}  }
class C{  public static ServiceSpec serviceSpec(final String name,final String url,final ServiceType type,final Expectations expectations){  return new ServiceSpec(name,url,type,expectations);}  }
class C{  public void initInsertRow(){  for (int i=0; i < cols; i++) {    colsInserted.clear(i);  }}  }
class C{  public ServiceHelper conf(String key,String value){  conf=conf.withValue(key,ConfigValueFactory.fromAnyRef(value,"Overridden var in ServiceHelper: " + key));  return this;}  }
class C{  public static Validator<CharSequence> beginsWithUppercaseLetter(@NonNull final Context context){  return new BeginsWithUppercaseLetterValidator(context,R.string.default_error_message);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:33.537 -0500",hash_original_method="AFF3FB19470EAA9A5BE239431B6A906A",hash_generated_method="9614F1989B30184E7DCC8B780A34FCCC") protected HttpEngine newHttpEngine(String method,RawHeaders requestHeaders,HttpConnection connection,RetryableOutputStream requestBody) throws IOException {  return new HttpEngine(this,method,requestHeaders,connection,requestBody);}  }
class C{  public static Jerry jerry(String content){  return jerry().parse(content);}  }
class C{  protected boolean containsInOutputIgnoreCase(String find){  return containsInOutput(find,false);}  }
class C{  protected void parsePreserveAspectRatio() throws ParseException, IOException {  preserveAspectRatioHandler.startPreserveAspectRatio();  align: switch (current) {case 'n':    current=reader.read();  if (current != 'o') {    reportCharacterExpectedError('o',current);    skipIdentifier();    break align;  }current=reader.read();if (current != 'n') {reportCharacterExpectedError('o',current);skipIdentifier();break align;}current=reader.read();if (current != 'e') {reportCharacterExpectedError('e',current);skipIdentifier();break align;}current=reader.read();skipSpaces();preserveAspectRatioHandler.none();break;case 'x':current=reader.read();if (current != 'M') {reportCharacterExpectedError('M',current);skipIdentifier();break;}current=reader.read();switch (current) {case 'a':current=reader.read();if (current != 'x') {reportCharacterExpectedError('x',current);skipIdentifier();break align;}current=reader.read();if (current != 'Y') {reportCharacterExpectedError('Y',current);skipIdentifier();break align;}current=reader.read();if (current != 'M') {reportCharacterExpectedError('M',current);skipIdentifier();break align;}current=reader.read();switch (current) {case 'a':current=reader.read();if (current != 'x') {reportCharacterExpectedError('x',current);skipIdentifier();break align;}preserveAspectRatioHandler.xMaxYMax();current=reader.read();break;case 'i':current=reader.read();switch (current) {case 'd':preserveAspectRatioHandler.xMaxYMid();current=reader.read();break;case 'n':preserveAspectRatioHandler.xMaxYMin();current=reader.read();break;default :reportUnexpectedCharacterError(current);skipIdentifier();break align;}}break;case 'i':current=reader.read();switch (current) {case 'd':current=reader.read();if (current != 'Y') {reportCharacterExpectedError('Y',current);skipIdentifier();break align;}current=reader.read();if (current != 'M') {reportCharacterExpectedError('M',current);skipIdentifier();break align;}current=reader.read();switch (current) {case 'a':current=reader.read();if (current != 'x') {reportCharacterExpectedError('x',current);skipIdentifier();break align;}preserveAspectRatioHandler.xMidYMax();current=reader.read();break;case 'i':current=reader.read();switch (current) {case 'd':preserveAspectRatioHandler.xMidYMid();current=reader.read();break;case 'n':preserveAspectRatioHandler.xMidYMin();current=reader.read();break;default :reportUnexpectedCharacterError(current);skipIdentifier();break align;}}break;case 'n':current=reader.read();if (current != 'Y') {reportCharacterExpectedError('Y',current);skipIdentifier();break align;}current=reader.read();if (current != 'M') {reportCharacterExpectedError('M',current);skipIdentifier();break align;}current=reader.read();switch (current) {case 'a':current=reader.read();if (current != 'x') {reportCharacterExpectedError('x',current);skipIdentifier();break align;}preserveAspectRatioHandler.xMinYMax();current=reader.read();break;case 'i':current=reader.read();switch (current) {case 'd':preserveAspectRatioHandler.xMinYMid();current=reader.read();break;case 'n':preserveAspectRatioHandler.xMinYMin();current=reader.read();break;default :reportUnexpectedCharacterError(current);skipIdentifier();break align;}}break;default :reportUnexpectedCharacterError(current);skipIdentifier();break align;}break;default :reportUnexpectedCharacterError(current);skipIdentifier();}break;default :if (current != -1) {reportUnexpectedCharacterError(current);skipIdentifier();}}skipCommaSpaces();switch (current) {case 'm':current=reader.read();if (current != 'e') {reportCharacterExpectedError('e',current);skipIdentifier();break;}current=reader.read();if (current != 'e') {reportCharacterExpectedError('e',current);skipIdentifier();break;}current=reader.read();if (current != 't') {reportCharacterExpectedError('t',current);skipIdentifier();break;}preserveAspectRatioHandler.meet();current=reader.read();break;case 's':current=reader.read();if (current != 'l') {reportCharacterExpectedError('l',current);skipIdentifier();break;}current=reader.read();if (current != 'i') {reportCharacterExpectedError('i',current);skipIdentifier();break;}current=reader.read();if (current != 'c') {reportCharacterExpectedError('c',current);skipIdentifier();break;}current=reader.read();if (current != 'e') {reportCharacterExpectedError('e',current);skipIdentifier();break;}preserveAspectRatioHandler.slice();current=reader.read();break;default :if (current != -1) {reportUnexpectedCharacterError(current);skipIdentifier();}}skipSpaces();if (current != -1) {reportError("end.of.stream.expected",new Object[]{new Integer(current)});}preserveAspectRatioHandler.endPreserveAspectRatio();}  }
class C{  private void outputToFile(){  FileChannel destinationChannel=null;  try {    destinationChannel=new FileOutputStream(gobblerFileHandle).getChannel();    ByteBuffer buffer=ByteBuffer.allocate(BUFFER_SIZE);    byte[] bufferArray=buffer.array();    while (true) {      buffer.clear();      int lim=inputStream.read(bufferArray);      if (lim == -1)       break;      buffer.flip();      buffer.limit(lim);      while (buffer.hasRemaining()) {        destinationChannel.write(buffer);      }    }  } catch (  IOException ioe) {    LOGGER.error("IOException thrown when attempting to read InputStream from external process.",ioe);    exceptionThrownByGobbler=ioe;  } finally {    try {      if (destinationChannel != null) {        destinationChannel.close();      }      inputStream.close();    } catch (    IOException ioe) {      LOGGER.error("IOException thrown when attempting to close " + "BufferedReader from external process.",ioe);      exceptionThrownByGobbler=ioe;    }  }}  }
class C{  public <E extends GenericEvent>E waitFor(@NonNull Class<E> eventClass) throws InterruptedException {  return waitFor(eventClass,Integer.MAX_VALUE,TimeUnit.MILLISECONDS);}  }
class C{  public void createSubUsageScenario06() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2013-01-01 00:00:00") + DateTimeHandling.daysToMillis(5);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO06_PERUNIT_DAY",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_DAY_ROLES,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO06_PERUNIT_DAY",serviceDetails,basicSetup.getCustomerUser2(),role);  long usageEndTime=DateTimeHandling.calculateMillis("2013-01-01 00:00:00") + DateTimeHandling.daysToMillis(15);  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO06_PERUNIT_DAY",subDetails);}  }
class C{  public int hashCode(){  return value.hashCode();}  }
class C{  public static <T>void enrichList(List<T> aListToEnrich,T[] anArrayToAdd){  if (anArrayToAdd != null)   aListToEnrich.addAll(Arrays.asList(anArrayToAdd));}  }
class C{  public void sendSerialMessage(SerialMessage m,SerialListener reply){  sendMessage(m,reply);}  }
class C{  public HtmlPolicyBuilder withPreprocessor(HtmlStreamEventProcessor pp){  this.preprocessor=HtmlStreamEventProcessor.Processors.compose(this.preprocessor,pp);  return this;}  }
class C{  public void stopRing(){  Log.d(TAG,"==> stopRing() called...");  vibrator.cancel();}  }
class C{  public static String millisecondsToHumanTime(long period){  final long MILLIS_IN_SECOND=1000L;  final long HALF_MILLIS_IN_SECOND=500L;  final long SECONDS_IN_MINUTE=60L;  final long MINUTES_IN_HOUR=60L;  if (period % MILLIS_IN_SECOND >= HALF_MILLIS_IN_SECOND) {    period+=MILLIS_IN_SECOND;  }  period/=MILLIS_IN_SECOND;  long secs=period % SECONDS_IN_MINUTE;  period/=SECONDS_IN_MINUTE;  long mins=period % MINUTES_IN_HOUR;  period/=MINUTES_IN_HOUR;  long hours=period;  return String.format("%02d:%02d:%02d (hh:mm:ss)",hours,mins,secs);}  }
class C{  private void updateMemberClient(ObjectName mbeanName) throws IOException {  try {    String memberName=mbeanName.getKeyProperty(PulseConstants.MBEAN_KEY_PROPERTY_MEMBER);    if (cluster.getMembersHMap().containsKey(memberName)) {      Cluster.Member existingMember=cluster.getMembersHMap().get(memberName);      HashMap<String,Cluster.Client> memberClientsHM=new HashMap<String,Cluster.Client>();      existingMember.setMemberPort("" + this.mbs.getAttribute(mbeanName,PulseConstants.MBEAN_ATTRIBUTE_PORT));      this.mbs.getAttribute(mbeanName,PulseConstants.MBEAN_ATTRIBUTE_HOSTNAMEFORCLIENTS_ALT);      existingMember.setHostnameForClients((String)this.mbs.getAttribute(mbeanName,PulseConstants.MBEAN_ATTRIBUTE_HOSTNAMEFORCLIENTS_ALT));      existingMember.setBindAddress((String)this.mbs.getAttribute(mbeanName,PulseConstants.MBEAN_ATTRIBUTE_BINDADDRESS));      CompositeData[] compositeData=(CompositeData[])(this.mbs.invoke(mbeanName,PulseConstants.MBEAN_OPERATION_SHOWALLCLIENTS,null,null));      for (      CompositeData cmd : compositeData) {        Cluster.Client client=new Cluster.Client();        if (cmd.containsKey(PulseConstants.COMPOSITE_DATA_KEY_CLIENTID)) {          client.setId((String)cmd.get(PulseConstants.COMPOSITE_DATA_KEY_CLIENTID));        }        if (cmd.containsKey(PulseConstants.COMPOSITE_DATA_KEY_NAME)) {          client.setName((String)cmd.get(PulseConstants.COMPOSITE_DATA_KEY_NAME));        }        if (cmd.containsKey(PulseConstants.COMPOSITE_DATA_KEY_HOSTNAME)) {          client.setHost((String)cmd.get(PulseConstants.COMPOSITE_DATA_KEY_HOSTNAME));        }        if (cmd.containsKey(PulseConstants.COMPOSITE_DATA_KEY_QUEUESIZE)) {          client.setQueueSize((Integer)cmd.get(PulseConstants.COMPOSITE_DATA_KEY_QUEUESIZE));        }        if (cmd.containsKey(PulseConstants.COMPOSITE_DATA_KEY_PROCESSCPUTIME)) {          client.setProcessCpuTime((Long)cmd.get(PulseConstants.COMPOSITE_DATA_KEY_PROCESSCPUTIME));        }        if (cmd.containsKey(PulseConstants.COMPOSITE_DATA_KEY_UPTIME)) {          client.setUptime((Long)cmd.get(PulseConstants.COMPOSITE_DATA_KEY_UPTIME));        }        if (cmd.containsKey(PulseConstants.COMPOSITE_DATA_KEY_NUMOFTHREADS)) {          client.setThreads((Integer)cmd.get(PulseConstants.COMPOSITE_DATA_KEY_NUMOFTHREADS));        }        if (cmd.containsKey(PulseConstants.COMPOSITE_DATA_KEY_NUMOFGETS)) {          client.setGets((Integer)cmd.get(PulseConstants.COMPOSITE_DATA_KEY_NUMOFGETS));        }        if (cmd.containsKey(PulseConstants.COMPOSITE_DATA_KEY_NUMOFPUTS)) {          client.setPuts((Integer)cmd.get(PulseConstants.COMPOSITE_DATA_KEY_NUMOFPUTS));        }        if (cmd.containsKey(PulseConstants.COMPOSITE_DATA_KEY_CPUS)) {          client.setCpus((Integer)cmd.get(PulseConstants.COMPOSITE_DATA_KEY_CPUS));        }        if (cmd.containsKey(PulseConstants.COMPOSITE_DATA_KEY_CPUS)) {          client.setCpuUsage(0);        }        if (cmd.containsKey(PulseConstants.COMPOSITE_DATA_KEY_CONNECTED)) {          client.setConnected((Boolean)cmd.get(PulseConstants.COMPOSITE_DATA_KEY_CONNECTED));        }        if (cmd.containsKey(PulseConstants.COMPOSITE_DATA_KEY_CLIENTCQCOUNT)) {          client.setClientCQCount((Integer)cmd.get(PulseConstants.COMPOSITE_DATA_KEY_CLIENTCQCOUNT));        }        if (cmd.containsKey(PulseConstants.COMPOSITE_DATA_KEY_SUBSCRIPTIONENABLED)) {          client.setSubscriptionEnabled((Boolean)cmd.get(PulseConstants.COMPOSITE_DATA_KEY_SUBSCRIPTIONENABLED));        }        memberClientsHM.put(client.getId(),client);      }      existingMember.updateMemberClientsHMap(memberClientsHM);    }  } catch (  InstanceNotFoundException infe) {    LOGGER.warning(infe);  }catch (  ReflectionException re) {    LOGGER.warning(re);  }catch (  MBeanException me) {    LOGGER.warning(me);  }catch (  AttributeNotFoundException anfe) {    LOGGER.warning(anfe);  }}  }
class C{  String fieldName(int i){  return fields[i].toName(constant_pool);}  }
class C{  public String createMethod(Workflow workflow,String stepGroup,String waitFor,String methodName,String stepId,String stepDescription,URI storage,Object[] args){  StorageSystem system=this.dbClient.queryObject(StorageSystem.class,storage);  Workflow.Method method=new Workflow.Method(methodName,args);  String waitForStep=workflow.createStep(stepGroup,stepDescription,waitFor,storage,system.getSystemType(),getClass(),method,null,stepId);  return waitForStep;}  }
class C{  private boolean handleActionEditName(){  EditTextDialogFragment.newInstance(0,R.string.activity_palette_detail_edit_palette_name_dialog_title,R.string.activity_palette_detail_edit_palette_name_dialog_positive_action,android.R.string.cancel,getString(R.string.activity_palette_detail_edit_palette_name_dialog_hint),mPalette.getName()).show(getSupportFragmentManager(),null);  return true;}  }
class C{  public Element writeCostMatrixOld(Element parent,Object o,String name) throws Exception {  if (DEBUG) {    trace(new Throwable(),name);  }  m_CurrentNode=parent;  return writeMatrixOld(parent,o,name);}  }
class C{  @Override public byte[] asBytes(int rowNumber){  return ByteBuffer.allocate(4).putInt(get(rowNumber)).array();}  }
class C{  public boolean isEscapeAttributes(){  return escapeAttributes;}  }
class C{  private static void loadMappings(ConfigServerImpl configServer,ConfigImpl config,Document doc,int mode) throws IOException {  boolean hasAccess=ConfigWebUtil.hasAccess(config,SecurityManager.TYPE_MAPPING);  Element el=getChildByName(doc.getDocumentElement(),"mappings");  Element[] _mappings=getChildren(el,"mapping");  Map<String,Mapping> mappings=MapFactory.<String,Mapping>getConcurrentMap();  Mapping tmp;  if (configServer != null && config instanceof ConfigWeb) {    Mapping[] sm=configServer.getMappings();    for (int i=0; i < sm.length; i++) {      if (!sm[i].isHidden()) {        if (sm[i] instanceof MappingImpl) {          tmp=((MappingImpl)sm[i]).cloneReadOnly(config);          mappings.put(tmp.getVirtualLowerCase(),tmp);        } else {          tmp=sm[i];          mappings.put(tmp.getVirtualLowerCase(),tmp);        }      }    }  }  boolean finished=false;  if (hasAccess) {    boolean hasServerContext=false;    for (int i=0; i < _mappings.length; i++) {      el=_mappings[i];      String physical=el.getAttribute("physical");      String archive=el.getAttribute("archive");      String virtual=getAttr(el,"virtual");      String listType=getAttr(el,"listener-type");      String listMode=getAttr(el,"listener-mode");      boolean readonly=toBoolean(getAttr(el,"readonly"),false);      boolean hidden=toBoolean(getAttr(el,"hidden"),false);      boolean toplevel=toBoolean(getAttr(el,"toplevel"),true);      if (config instanceof ConfigServer && (virtual.equalsIgnoreCase("/lucee-server/") || virtual.equalsIgnoreCase("/lucee-server-context/"))) {        hasServerContext=true;      }      if (virtual.equalsIgnoreCase("/lucee/")) {        if (StringUtil.isEmpty(listType,true))         listType="modern";        if (StringUtil.isEmpty(listMode,true))         listMode="curr2root";        toplevel=true;      }      int listenerMode=ConfigWebUtil.toListenerMode(listMode,-1);      int listenerType=ConfigWebUtil.toListenerType(listType,-1);      ApplicationListener listener=ConfigWebUtil.loadListener(listenerType,null);      if (listener != null || listenerMode != -1) {        if (mode == ConfigImpl.MODE_STRICT)         listener=new ModernAppListener(); else         if (listener == null)         listener=ConfigWebUtil.loadListener(ConfigWebUtil.toListenerType(config.getApplicationListener().getType(),-1),null);        if (listener == null)         listener=new ModernAppListener();        if (listenerMode == -1) {          listenerMode=config.getApplicationListener().getMode();        }        listener.setMode(listenerMode);      }      if ((physical != null || archive != null)) {        short insTemp=inspectTemplate(el);        if ("/lucee/".equalsIgnoreCase(virtual) || "/lucee".equalsIgnoreCase(virtual) || "/lucee-server/".equalsIgnoreCase(virtual)|| "/lucee-server-context".equalsIgnoreCase(virtual))         insTemp=ConfigImpl.INSPECT_ONCE;        String primary=getAttr(el,"primary");        boolean physicalFirst=primary == null || !primary.equalsIgnoreCase("archive");        tmp=new MappingImpl(config,virtual,physical,archive,insTemp,physicalFirst,hidden,readonly,toplevel,false,false,listener,listenerMode,listenerType);        mappings.put(tmp.getVirtualLowerCase(),tmp);        if (virtual.equals("/")) {          finished=true;        }      }    }    if (config instanceof ConfigServer && !hasServerContext) {      ApplicationListener listener=ConfigWebUtil.loadListener(ApplicationListener.TYPE_MODERN,null);      listener.setMode(ApplicationListener.MODE_CURRENT2ROOT);      tmp=new MappingImpl(config,"/lucee-server","{lucee-server}/context/",null,ConfigImpl.INSPECT_ONCE,true,false,true,true,false,false,listener,ApplicationListener.MODE_CURRENT2ROOT,ApplicationListener.TYPE_MODERN);      mappings.put(tmp.getVirtualLowerCase(),tmp);    }  }  if (!finished) {    if ((config instanceof ConfigWebImpl) && ResourceUtil.isUNCPath(config.getRootDirectory().getPath())) {      tmp=new MappingImpl(config,"/",config.getRootDirectory().getPath(),null,ConfigImpl.INSPECT_UNDEFINED,true,true,true,true,false,false,null,-1,-1);    } else {      tmp=new MappingImpl(config,"/","/",null,ConfigImpl.INSPECT_UNDEFINED,true,true,true,true,false,false,null,-1,-1);    }    mappings.put("/",tmp);  }  Mapping[] arrMapping=new Mapping[mappings.size()];  int index=0;  Iterator it=mappings.keySet().iterator();  while (it.hasNext()) {    arrMapping[index++]=mappings.get(it.next());  }  config.setMappings(arrMapping);}  }
class C{  public static RecyclerViewAttacher with(final RecyclerView recyclerView,final MugenCallbacks callbacks){  return new RecyclerViewAttacher(recyclerView,callbacks);}  }
class C{  public void testPowNegativeNumToEvenExp(){  byte aBytes[]={50,-26,90,69,120,32,63,-103,-14,35};  int aSign=-1;  int exp=4;  byte rBytes[]={102,107,-122,-43,-52,-20,-27,25,-9,88,-13,75,78,81,-33,-77,39,27,-37,106,121,-73,108,-47,-101,80,-25,71,13,94,-7,-33,1,-17,-65,-70,-61,-3,-47};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.pow(exp);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public char[] elements(){  return elements;}  }
class C{  private void rangeCheckForAdd(int index){  if (index > size || index < 0)   throw new IndexOutOfBoundsException(outOfBoundsMsg(index));}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.ARGUMENT__EXPRESSION:    return basicSetExpression(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public InputDescription(Class<?> inputType,boolean keepDefault,boolean parameter,String parameterName){  this.inputType=inputType;  this.keepDefault=keepDefault;  this.parameter=parameter;  this.parameterName=parameterName;}  }
class C{  public MimeMultipartReport(String subtype){  super(subtype);}  }
class C{  @Override public Reader readerValue(){  return fieldsData instanceof Reader ? (Reader)fieldsData : null;}  }
class C{  public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,BlockingQueue<Runnable> workQueue,ThreadFactory threadFactory,RejectedExecutionHandler handler){  super(corePoolSize,maximumPoolSize,keepAliveTime,unit,workQueue,threadFactory,handler);  if (corePoolSize < 0 || maximumPoolSize <= 0 || maximumPoolSize < corePoolSize || keepAliveTime < 0)   throw new IllegalArgumentException();  if (workQueue == null || threadFactory == null || handler == null)   throw new NullPointerException();  this.corePoolSize=corePoolSize;  this.maximumPoolSize=maximumPoolSize;  this.workQueue=workQueue;  this.keepAliveTime=unit.toNanos(keepAliveTime);  this.threadFactory=threadFactory;  this.handler=handler;}  }
class C{  public static void addGzipHeader(final HttpServletResponse response){  response.setHeader("Content-Encoding","gzip");}  }
class C{  public static String encode(ArrayList<GeoPoint> polyline,int precision){  StringBuilder encodedPoints=new StringBuilder();  int prev_lat=0, prev_lng=0;  for (  GeoPoint trackpoint : polyline) {    int lat=trackpoint.getLatitudeE6() / precision;    int lng=trackpoint.getLongitudeE6() / precision;    encodedPoints.append(encodeSignedNumber(lat - prev_lat));    encodedPoints.append(encodeSignedNumber(lng - prev_lng));    prev_lat=lat;    prev_lng=lng;  }  return encodedPoints.toString();}  }
class C{  public GsonBuilder serializeNulls(){  this.serializeNulls=true;  return this;}  }
class C{  public void visitTypeArgument(){}  }
class C{  public static String findCeylonScript(File defaultValue,Project project){  String scriptName=getScriptName("ceylon");  if (defaultValue != null) {    if (!defaultValue.exists())     throw new BuildException("Failed to find '" + scriptName + "' executable in "+ defaultValue.getPath());    if (!defaultValue.canExecute())     throw new BuildException("Cannot execute '" + scriptName + "' executable in "+ defaultValue.getPath()+ " (not executable)");    return defaultValue.getAbsolutePath();  }  File ceylonHome=null;  try {    ceylonHome=LauncherUtil.determineHome();  } catch (  URISyntaxException e) {    throw new BuildException("Failed to determine Ceylon home",e);  }  if (ceylonHome == null)   throw new BuildException("Failed to find Ceylon home, specify the ceylon.home property or set the CEYLON_HOME environment variable");  File script=new File(new File(ceylonHome,"bin"),scriptName);  if (!script.exists())   throw new BuildException("Failed to find '" + scriptName + "' executable in "+ ceylonHome);  if (!script.canExecute())   throw new BuildException("Cannot execute '" + scriptName + "' executable in "+ ceylonHome+ " (not executable)");  return script.getAbsolutePath();}  }
class C{  public void stopProcess(String workspaceId,String machineId,int pid) throws NotFoundException, MachineException, ForbiddenException {  final InstanceProcess process=environmentEngine.getMachine(workspaceId,machineId).getProcess(pid);  if (!process.isAlive()) {    throw new ForbiddenException("Process finished already");  }  process.kill();  eventService.publish(newDto(MachineProcessEvent.class).withEventType(MachineProcessEvent.EventType.STOPPED).withMachineId(machineId).withProcessId(pid));}  }
class C{  public Select<Model> exclude(String... columns){  Collections.addAll(excludedColumns,columns);  return this;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean equals(Object o){  if (!(o instanceof Vector3f)) {    return false;  }  if (this == o) {    return true;  }  Vector3f comp=(Vector3f)o;  if (Float.compare(x,comp.x) != 0)   return false;  if (Float.compare(y,comp.y) != 0)   return false;  if (Float.compare(z,comp.z) != 0)   return false;  return true;}  }
class C{  private static boolean dateByMonth(DateTimeFormatterBuilder bld,Collection<DateTimeFieldType> fields,boolean extended,boolean strictISO){  boolean reducedPrec=false;  if (fields.remove(DateTimeFieldType.year())) {    bld.append(yearElement());    if (fields.remove(DateTimeFieldType.monthOfYear())) {      if (fields.remove(DateTimeFieldType.dayOfMonth())) {        appendSeparator(bld,extended);        bld.appendMonthOfYear(2);        appendSeparator(bld,extended);        bld.appendDayOfMonth(2);      } else {        bld.appendLiteral('-');        bld.appendMonthOfYear(2);        reducedPrec=true;      }    } else {      if (fields.remove(DateTimeFieldType.dayOfMonth())) {        checkNotStrictISO(fields,strictISO);        bld.appendLiteral('-');        bld.appendLiteral('-');        bld.appendDayOfMonth(2);      } else {        reducedPrec=true;      }    }  } else   if (fields.remove(DateTimeFieldType.monthOfYear())) {    bld.appendLiteral('-');    bld.appendLiteral('-');    bld.appendMonthOfYear(2);    if (fields.remove(DateTimeFieldType.dayOfMonth())) {      appendSeparator(bld,extended);      bld.appendDayOfMonth(2);    } else {      reducedPrec=true;    }  } else   if (fields.remove(DateTimeFieldType.dayOfMonth())) {    bld.appendLiteral('-');    bld.appendLiteral('-');    bld.appendLiteral('-');    bld.appendDayOfMonth(2);  }  return reducedPrec;}  }
class C{  private void cancelAnimation(){  if (mCurrentAnimation != null) {    mCurrentAnimation.setDuration(0);    mCurrentAnimation.cancel();    mCurrentAnimation=null;  }}  }
class C{  public void testSinglePartitionWithOneStatementPattern(){  final StatementPatternNode spn=stmtPatternWithVar("x");  final List<IGroupMemberNode> nodes=new ArrayList<IGroupMemberNode>();  nodes.add(spn);  final GroupNodeVarBindingInfoMap bindingInfo=new GroupNodeVarBindingInfoMap(nodes,statisAnalysisForNodes(nodes),null);  final Set<IVariable<?>> external=new HashSet<IVariable<?>>();  external.add(Var.var("y"));  external.add(Var.var("z"));  final ASTJoinGroupPartitions partitions=new ASTJoinGroupPartitions(nodes,bindingInfo,external);  assertEquals(1,partitions.getPartitionList().size());  assertEquals(1,partitions.extractNodeList(true).size());  assertTrue(partitions.extractNodeList(true).contains(spn));  ASTJoinGroupPartition partition=partitions.getPartitionList().get(0);  assertEquals(1,partition.extractNodeList(true).size());  assertTrue(partition.extractNodeList(true).contains(spn));  assertTrue(partition.externallyBound.equals(external));  assertEquals(1,partition.nonOptionalNonMinusNodes.size());  assertTrue(partition.nonOptionalNonMinusNodes.contains(spn));  assertTrue(partition.optionalOrMinus == null);  assertEquals(3,partition.definitelyProduced.size());  assertTrue(partition.definitelyProduced.contains(Var.var("x")));  assertTrue(partition.definitelyProduced.contains(Var.var("y")));  assertTrue(partition.definitelyProduced.contains(Var.var("z")));}  }
class C{  public boolean isRepeatDownload(){  return mRepeatDownload;}  }
class C{  public CCTimer(Object t,String s,float seconds){  target=t;  selector=s;  interval=seconds;  elapsed=-1;  try {    Class<?> cls=target.getClass();    invocation=cls.getMethod(s,Float.TYPE);  } catch (  NoSuchMethodException e) {    e.printStackTrace();  }}  }
class C{  private Object parseString(GridField field,String in){  log.log(Level.FINE,"Parse: " + field + ":"+ in);  if (in == null)   return null;  int dt=field.getDisplayType();  try {    if (dt == DisplayType.Integer || (DisplayType.isID(dt) && field.getColumnName().endsWith("_ID"))) {      int i=Integer.parseInt(in);      return new Integer(i);    } else     if (DisplayType.isNumeric(dt)) {      return DisplayType.getNumberFormat(dt).parse(in);    } else     if (DisplayType.isDate(dt)) {      long time=0;      try {        time=DisplayType.getDateFormat_JDBC().parse(in).getTime();        return new Timestamp(time);      } catch (      Exception e) {        log.log(Level.SEVERE,in + "(" + in.getClass()+ ")"+ e);        time=DisplayType.getDateFormat(dt).parse(in).getTime();      }      return new Timestamp(time);    } else     if (dt == DisplayType.YesNo)     return in.equals("Y"); else     return in;  } catch (  Exception ex) {    log.log(Level.SEVERE,"Object=" + in,ex);    return null;  }}  }
class C{  public void execDetails(int reqId,Contract contractIB,TradeOrderfill execution){  try {    BackTestBrokerModel.logExecution(execution);    TradeOrder transientInstance=m_tradePersistentModel.findTradeOrderByKey(execution.getTradeOrder().getOrderKey());    if (null == transientInstance) {      error(execution.getTradeOrder().getOrderKey(),3170,"Warning Order not found for Order Key: " + execution.getTradeOrder().getOrderKey() + " make sure Client ID: "+ 0+ " is not the master in TWS. On execDetails update.");      return;    }    if (transientInstance.existTradeOrderfill(execution.getExecId()))     return;    TradeOrderfill tradeOrderfill=new TradeOrderfill();    BackTestBrokerModel.populateTradeOrderfill(execution,tradeOrderfill);    tradeOrderfill.setTradeOrder(transientInstance);    transientInstance.addTradeOrderfill(tradeOrderfill);    transientInstance.setAverageFilledPrice(tradeOrderfill.getAveragePrice());    transientInstance.setFilledQuantity(tradeOrderfill.getCumulativeQuantity());    transientInstance.setFilledDate(tradeOrderfill.getTime());    boolean isFilled=transientInstance.getIsFilled();    TradeOrder updatedOrder=m_tradePersistentModel.persistTradeOrderfill(transientInstance);    if (updatedOrder.getIsFilled() && !isFilled)     this.fireTradeOrderFilled(updatedOrder);  } catch (  Exception ex) {    error(reqId,3160,"Errors saving execution: " + ex.getMessage());  }}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return STORE;case 3:return VALUES;case 4:return RESPONSE_TO;default :return null;}}  }
class C{  private static void varAgg(double[] a,double[] c,int ai,int ci,final int len,CM_COV_Object cbuff,CM cm) throws DMLRuntimeException {  for (int i=0; i < len; i++, ai++, ci++) {    cbuff.w=c[ci + 2 * len];    cbuff.m2._sum=c[ci] * (cbuff.w - 1);    cbuff.mean._sum=c[ci + len];    cbuff.m2._correction=c[ci + 3 * len];    cbuff.mean._correction=c[ci + 4 * len];    cbuff=(CM_COV_Object)cm.execute(cbuff,a[ai]);    c[ci]=cbuff.getRequiredResult(AggregateOperationTypes.VARIANCE);    c[ci + len]=cbuff.mean._sum;    c[ci + 2 * len]=cbuff.w;    c[ci + 3 * len]=cbuff.m2._correction;    c[ci + 4 * len]=cbuff.mean._correction;  }}  }
class C{  private void updateVideoControls(){  VideoApi videoApi=(VideoApi)getPlaylistManager().getVideoPlayer();  if (videoApi == null) {    return;  }  EMVideoView videoView=videoApi.getVideoView();  if (videoView == null) {    return;  }  VideoControls videoControls=videoView.getVideoControls();  if (videoControls != null) {    updateVideoControlsText(videoControls);    updateVideoControlsButtons(videoControls);  }}  }
class C{  private static void initTestFile(File blah) throws Exception {  FileOutputStream fos=new FileOutputStream(blah);  BufferedWriter awriter=new BufferedWriter(new OutputStreamWriter(fos,"8859_1"));  for (int i=0; i < 4000; i++) {    String number=new Integer(i).toString();    for (int h=0; h < 4 - number.length(); h++)     awriter.write("0");    awriter.write("" + i);    awriter.newLine();  }  awriter.flush();  awriter.close();}  }
class C{  public void removeAllRenderers(){  mRenderers.clear();}  }
class C{  @Override protected void doStart(JvmLauncher java) throws Exception {  String spawn=getConfiguration().getPropertyValue(GeneralPropertySet.SPAWN_PROCESS);  String command="run";  if ("true".equals(spawn)) {    command="start";  }  String jvmArgs=getConfiguration().getPropertyValue(GeneralPropertySet.START_JVMARGS);  runCommand(new LibertyInstall(this),command,env(jvmArgs));}  }
class C{  public Object visit(ASTAssignment node,Object data){  return showNode(node,data);}  }
class C{  @Override protected void keyTyped(char par1,int par2){  commandBox.textboxKeyTyped(par1,par2);}  }
class C{  public void addProperty(String property,String value){  add(property,createJsonElement(value));}  }
class C{  public boolean hasName(){  return getName() != null;}  }
class C{  public static TableMetadata readTableMetadata(String fileName) throws IOException {  byte[] encoded=Files.readAllBytes(Paths.get(fileName));  return TableMetadata.fromJson(new String(encoded,StandardCharsets.UTF_8));}  }
class C{  @SuppressWarnings("unchecked") private void mergeLo(int base1,int len1,int base2,int len2){  if (DEBUG)   assert len1 > 0 && len2 > 0 && base1 + len1 == base2;  Object[] a=this.a;  Object[] tmp=ensureCapacity(len1);  System.arraycopy(a,base1,tmp,0,len1);  int cursor1=0;  int cursor2=base2;  int dest=base1;  a[dest++]=a[cursor2++];  if (--len2 == 0) {    System.arraycopy(tmp,cursor1,a,dest,len1);    return;  }  if (len1 == 1) {    System.arraycopy(a,cursor2,a,dest,len2);    a[dest + len2]=tmp[cursor1];    return;  }  int minGallop=this.minGallop;  outer:   while (true) {    int count1=0;    int count2=0;    do {      if (DEBUG)       assert len1 > 1 && len2 > 0;      if (((Comparable)a[cursor2]).compareTo(tmp[cursor1]) < 0) {        a[dest++]=a[cursor2++];        count2++;        count1=0;        if (--len2 == 0)         break outer;      } else {        a[dest++]=tmp[cursor1++];        count1++;        count2=0;        if (--len1 == 1)         break outer;      }    } while ((count1 | count2) < minGallop);    do {      if (DEBUG)       assert len1 > 1 && len2 > 0;      count1=gallopRight((Comparable)a[cursor2],tmp,cursor1,len1,0);      if (count1 != 0) {        System.arraycopy(tmp,cursor1,a,dest,count1);        dest+=count1;        cursor1+=count1;        len1-=count1;        if (len1 <= 1)         break outer;      }      a[dest++]=a[cursor2++];      if (--len2 == 0)       break outer;      count2=gallopLeft((Comparable)tmp[cursor1],a,cursor2,len2,0);      if (count2 != 0) {        System.arraycopy(a,cursor2,a,dest,count2);        dest+=count2;        cursor2+=count2;        len2-=count2;        if (len2 == 0)         break outer;      }      a[dest++]=tmp[cursor1++];      if (--len1 == 1)       break outer;      minGallop--;    } while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);    if (minGallop < 0)     minGallop=0;    minGallop+=2;  }  this.minGallop=minGallop < 1 ? 1 : minGallop;  if (len1 == 1) {    if (DEBUG)     assert len2 > 0;    System.arraycopy(a,cursor2,a,dest,len2);    a[dest + len2]=tmp[cursor1];  } else   if (len1 == 0) {    throw new IllegalArgumentException("Comparison method violates its general contract!");  } else {    if (DEBUG)     assert len2 == 0;    if (DEBUG)     assert len1 > 1;    System.arraycopy(tmp,cursor1,a,dest,len1);  }}  }
class C{  private static int med3(Object x[],int a,int b,int c,java.util.Comparator comp){  int ab=comp.compare(x[a],x[b]);  int ac=comp.compare(x[a],x[c]);  int bc=comp.compare(x[b],x[c]);  return (ab < 0 ? (bc < 0 ? b : ac < 0 ? c : a) : (bc > 0 ? b : ac > 0 ? c : a));}  }
class C{  @Override public void editingCanceled(ChangeEvent e){  getModel().setValueAt(getCellEditor().getCellEditorValue(),getEditingRow(),getEditingColumn());}  }
class C{  protected void addOperatorPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_LogicalRelationExpression_operator_feature"),getString("_UI_PropertyDescriptor_description","_UI_LogicalRelationExpression_operator_feature","_UI_LogicalRelationExpression_type"),ExpressionsPackage.Literals.LOGICAL_RELATION_EXPRESSION__OPERATOR,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public static boolean[] toBooleanArray(long[] array){  boolean[] result=new boolean[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i] > 0;  }  return result;}  }
class C{  private static int limitedLevenshtein(final String str1,final String str2,int idx1,int idx2,final int limit){  while (true) {    if (idx1 == str1.length()) {      return str2.length() - idx2;    } else     if (idx2 == str2.length()) {      return str1.length() - idx1;    } else     if (str1.charAt(idx1) != str2.charAt(idx2)) {      if (limit < 1) {        return 1;      } else {        return 1 + bestLimLev(str1,str2,idx1,idx2,limit - 1);      }    }    ++idx1;    ++idx2;  }}  }
class C{  public String createExport(IsilonExport exp,String zoneName) throws IsilonException {  String baseUrl=getURIWithZoneName(_baseUrl.resolve(URI_NFS_EXPORTS).toString(),zoneName);  URI uri=URI.create(baseUrl);  return create(uri,"Export",exp);}  }
class C{  private void initView(GLSurfaceView glSurfaceView,@ColorInt int backgroundColor){  Context context=glSurfaceView.getContext();  final ActivityManager activityManager=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  final ConfigurationInfo configurationInfo=activityManager.getDeviceConfigurationInfo();  final boolean supportsEs2=configurationInfo.reqGlEsVersion >= 0x20000;  if (supportsEs2) {    glSurfaceView.setEGLContextClientVersion(2);    mRenderer=new BezierRenderer(glSurfaceView,backgroundColor);    glSurfaceView.setRenderer(mRenderer);    glSurfaceView.setRenderMode(GLSurfaceView.RENDERMODE_CONTINUOUSLY);  } else {    throw new UnsupportedOperationException();  }}  }
class C{  void assignLocalToField(Local right,Local left,String field){  Iterator itLeft=locals.get(left).iterator();  while (itLeft.hasNext()) {    PurityNode nodeLeft=(PurityNode)itLeft.next();    Iterator itRight=locals.get(right).iterator();    while (itRight.hasNext()) {      PurityNode nodeRight=(PurityNode)itRight.next();      PurityEdge edge=cacheEdge(new PurityEdge(nodeLeft,field,nodeRight,true));      if (edges.put(nodeLeft,edge))       backEdges.put(nodeRight,edge);    }    if (!nodeLeft.isInside())     mutated.put(nodeLeft,field);  }  if (doCheck)   sanityCheck();}  }
class C{  public static BigDecimal roundOffTwo(final BigDecimal amount){  return amount.setScale(DECIMALS2,ROUNDING_MODE);}  }
class C{  @Override public void cancelTask(){  for (  Future<?> future : future_map.values()) {    if (!future.isDone()) {      future.cancel(true);    }  }}  }
class C{  public static HgTestRepository create(HgTest test) throws Exception {  final TempDirTestFixture dirFixture=createFixtureDir();  final File repo=new File(dirFixture.getTempDirPath());  final ProcessOutput processOutput=test.runHg(repo,"init");  AbstractVcsTestCase.verify(processOutput);  return new HgTestRepository(test,dirFixture);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:10.181 -0500",hash_original_method="4EB08FDCAC2586A4FA6B09EB3F8E173D",hash_generated_method="71297A08305F3A63904ABFBBCA6DDC5C") public BitmapShader(Bitmap bitmap,TileMode tileX,TileMode tileY){  mBitmap=bitmap;  final int b=bitmap.ni();  native_instance=nativeCreate(b,tileX.nativeInt,tileY.nativeInt);  native_shader=nativePostCreate(native_instance,b,tileX.nativeInt,tileY.nativeInt);}  }
class C{  public void testStoreFailure() throws Exception {  delegate.setShouldFail(true);  initStore(2);  Set<Integer> exp;  try {    exp=runPutGetRemoveMultithreaded(10,10);    U.sleep(FLUSH_FREQUENCY);    info(">>> There are " + store.getWriteBehindErrorRetryCount() + " entries in RETRY state");    delegate.setShouldFail(false);    U.sleep(1000);  }  finally {    shutdownStore();  }  Map<Integer,String> map=delegate.getMap();  Collection<Integer> extra=new HashSet<>(map.keySet());  extra.removeAll(exp);  assertTrue("The underlying store contains extra keys: " + extra,extra.isEmpty());  Collection<Integer> missing=new HashSet<>(exp);  missing.removeAll(map.keySet());  assertTrue("Missing keys in the underlying store: " + missing,missing.isEmpty());  for (  Integer key : exp)   assertEquals("Invalid value for key " + key,"val" + key,map.get(key));}  }
class C{  public synchronized void close() throws IOException {  isClosed=true;  localAddress=Inet4Address.ANY;  impl.close();}  }
class C{  static Proplabel fromString(String lblTxt){  String[] columns=lblTxt.split("-");  if (columns.length < 1) {    throw new PropbankFormatException(String.format("Missing label: %s",lblTxt));  }  if (!Proplabel.labels.contains(columns[1])) {    throw new PropbankFormatException(String.format("Invalid label: %s",columns[1]));  }  Proplabel proplabel=new Proplabel();  proplabel.setPropTxt(lblTxt);  proplabel.setRelation(PropbankRelation.fromString(columns[0]));  proplabel.setLabel(columns[1]);  int expectedLength=2;  if (columns.length > 2) {    if (Proplabel.features.contains(columns[2])) {      proplabel.setFeature(columns[2]);      if (columns.length > 3) {        if (Proplabel.hyphenTags.contains(columns[3])) {          proplabel.setHyphenTag(columns[3]);        }        expectedLength=4;      } else {        expectedLength=3;      }    } else     if (Proplabel.hyphenTags.contains(columns[2])) {      proplabel.setHyphenTag(columns[2]);      expectedLength=3;    } else {      proplabel.setPreposition(columns[2]);      expectedLength=3;    }  }  if (columns.length != expectedLength) {    throw new PropbankFormatException(String.format("Expected %d items, found %d",expectedLength,columns.length));  }  if (Proplabel.labelsRequiringFeatures.contains(columns[1])) {    if (proplabel.getFeature() == null) {      throw new PropbankFormatException(String.format("Label %s requires a feature",proplabel.getLabel()));    }  }  return proplabel;}  }
class C{  public SPARQLRepository(String endpointUrl){  this(endpointUrl,endpointUrl);}  }
class C{  public static <U,R>Function<FluxTSeq<U>,FluxTSeq<R>> lift(Function<? super U,? extends R> fn){  return null;}  }
class C{  public CCMotionStreak(float fade,float seg,String path,float width,float length,ccColor4B color){  segThreshold_=seg;  width_=width;  lastLocation_=CGPoint.make(0,0);  ribbon_=new CCRibbon(width_,path,length,color,fade);  addChild(ribbon_);  scheduleUpdate();}  }
class C{  public void resetComponents(){  nameTextField.clear();  nameTextField.removeStyleName(SPUIStyleDefinitions.SP_TEXTFIELD_ERROR);  controllerIDTextField.setEnabled(Boolean.TRUE);  controllerIDTextField.removeStyleName(SPUIStyleDefinitions.SP_TEXTFIELD_ERROR);  controllerIDTextField.clear();  descTextArea.clear();  editTarget=Boolean.FALSE;}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  protected String doIt() throws Exception {  MRfQResponse response=new MRfQResponse(getCtx(),p_C_RfQResponse_ID,get_TrxName());  log.info("doIt - " + response);  String error=response.getRfQ().checkQuoteTotalAmtOnly();  if (error != null && error.length() > 0)   throw new Exception(error);  if (response.sendRfQ())   return "OK";  return "@Error@";}  }
class C{  private void goToSplash(){  Log.d(LOG_TAG,"## gotoSplash(): Go to splash.");  Intent intent=new Intent(this,SplashActivity.class);  if (null != mUniversalLinkUri) {    intent.putExtra(VectorUniversalLinkReceiver.EXTRA_UNIVERSAL_LINK_URI,mUniversalLinkUri);  }  startActivity(intent);}  }
class C{  ProblemBuilder withReferenceSet(File referenceSetFile){  this.referenceSetFile=referenceSetFile;  return this;}  }
class C{  public boolean isStateActive(State state){synchronized (statemachine) {    return statemachine.isStateActive(state);  }}  }
class C{  @NonNull public IntroductionBuilder withPageTransformer(@NonNull ViewPager.PageTransformer pageTransformer){  IntroductionConfiguration.getInstance().setPageTransformer(pageTransformer);  return this;}  }
class C{  public void add(final ConversationStates state,final String triggerString,final ChatCondition condition,boolean secondary,final ConversationStates nextState,final String reply,final ChatAction action,final String label){  Collection<Expression> triggerExpressions=createUniqueTriggerExpressions(state,Arrays.asList(triggerString),null,condition,reply,action);  add(triggerExpressions,state,condition,secondary,nextState,reply,action,label);}  }
class C{  @DSSink({DSSinkKind.PHONE_CONNECTION}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:24.558 -0500",hash_original_method="D4180B029AFCA66C11673889FF654292",hash_generated_method="0CFCD8979FEB552E8BECCD6E367673FE") @Override protected void onDisconnectDone(int connId,AsyncResult ar){  ApnContext apnContext=null;  if (DBG)   log("onDisconnectDone: EVENT_DISCONNECT_DONE connId=" + connId);  if (ar.userObj instanceof ApnContext) {    apnContext=(ApnContext)ar.userObj;  } else {    loge("Invalid ar in onDisconnectDone");    return;  }  apnContext.setState(State.IDLE);  mPhone.notifyDataConnection(apnContext.getReason(),apnContext.getApnType());  if (isDisconnected()) {    if (mPhone.getServiceStateTracker().processPendingRadioPowerOffAfterDataOff()) {      apnContext.setApnSetting(null);      apnContext.setDataConnection(null);      apnContext.setDataConnectionAc(null);      return;    }  }  if (apnContext.isReady() && retryAfterDisconnected(apnContext.getReason())) {    SystemProperties.set("gsm.defaultpdpcontext.active","false");    startAlarmForReconnect(APN_DELAY_MILLIS,apnContext);  } else {    apnContext.setApnSetting(null);    apnContext.setDataConnection(null);    apnContext.setDataConnectionAc(null);  }}  }
class C{  private void importRecords(){  for (  X_I_ProductPlanning ipp : getRecords(false,p_IsImportOnlyNoErrors)) {    isImported=false;    MPPProductPlanning pp=importProductPlanning(ipp);    if (pp == null)     isImported=false;    if (isImported) {      ipp.setPP_Product_Planning_ID(pp.getPP_Product_Planning_ID());      ipp.setI_IsImported(true);      ipp.setProcessed(true);      ipp.setI_ErrorMsg("");      ipp.saveEx();      imported++;    } else {      ipp.setI_IsImported(false);      ipp.setProcessed(true);      ipp.saveEx();      notimported++;    }  }}  }
class C{  private static double calculateShiftedGammaApproximationWithRIG(double z,double m,double shape){  double a=(3 * shape + 8 * m) / (4 * shape * (shape + 2 * m));  double b=(shape + 3 * m) / (m * (3 * shape + 8 * m));  double nu=(8 * Math.pow((shape + 2 * m),3)) / (m * Math.pow((8 * m + 3 * shape),2));  double y_hat=a * ChiSquareDistribution.quantile(z,nu) + b;  return 1 / y_hat;}  }
class C{  @ToString public String toString(){  return "P" + String.valueOf(getValue()) + "Y";}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  ComboBoxEditor newEditor=comboBox.getEditor();  if (editor != newEditor) {    if (editorComponent != null) {      editorComponent.removeFocusListener(this);    }    editor=newEditor;    if (editor != null) {      editorComponent=editor.getEditorComponent();      if (editorComponent != null) {        editorComponent.addFocusListener(this);      }    }  }}  }
class C{  @Override public int hashCode(){  if (ActiveMQRAManagedConnectionFactory.trace) {    ActiveMQRALogger.LOGGER.trace("hashCode()");  }  int hash=mcfProperties.hashCode();  hash+=31 * ra.hashCode();  return hash;}  }
class C{  public static int[] cs_etree(Dcs A,boolean ata){  int i, k, p, m, n, inext, Ap[], Ai[], w[], parent[], ancestor[], prev[];  if (!Dcs_util.CS_CSC(A))   return (null);  m=A.m;  n=A.n;  Ap=A.p;  Ai=A.i;  parent=new int[n];  w=new int[n + (ata ? m : 0)];  ancestor=w;  prev=w;  int prev_offset=n;  if (ata)   for (i=0; i < m; i++)   prev[prev_offset + i]=-1;  for (k=0; k < n; k++) {    parent[k]=-1;    ancestor[k]=-1;    for (p=Ap[k]; p < Ap[k + 1]; p++) {      i=ata ? (prev[prev_offset + Ai[p]]) : (Ai[p]);      for (; i != -1 && i < k; i=inext) {        inext=ancestor[i];        ancestor[i]=k;        if (inext == -1)         parent[i]=k;      }      if (ata)       prev[prev_offset + Ai[p]]=k;    }  }  return parent;}  }
class C{  public static String chooseType(String type,Class<?> klass){  if (type == null || type.isEmpty()) {    type=klass.getSimpleName().replaceAll("\\$$","");  }  return type;}  }
class C{  public TilesetManager(BoardView1 bv) throws IOException {  boardview=bv;  tracker=new MediaTracker(boardview);  try {    camos=new DirectoryItems(Configuration.camoDir(),"",ImageFileFactory.getInstance());  } catch (  Exception e) {    camos=null;  }  mechTileset.loadFromFile("mechset.txt");  wreckTileset.loadFromFile("wreckset.txt");  try {    hexTileset.incDepth=0;    hexTileset.loadFromFile(PreferenceManager.getClientPreferences().getMapTileset());  } catch (  Exception FileNotFoundException) {    System.out.println("Error loading tileset, " + "reverting to default hexset! " + "Could not find file: "+ PreferenceManager.getClientPreferences().getMapTileset());    if (!new File(Configuration.hexesDir(),FILENAME_DEFAULT_HEX_SET).exists()) {      createDefaultHexSet();    }    hexTileset.loadFromFile(FILENAME_DEFAULT_HEX_SET);  }  PreferenceManager.getClientPreferences().addPreferenceChangeListener(this);}  }
class C{  public ECPair encrypt(ECPoint point){  if (key == null) {    throw new IllegalStateException("ECElGamalEncryptor not initialised");  }  ECDomainParameters ec=key.getParameters();  BigInteger k=ECUtil.generateK(ec.getN(),random);  ECMultiplier basePointMultiplier=createBasePointMultiplier();  ECPoint[] gamma_phi=new ECPoint[]{basePointMultiplier.multiply(ec.getG(),k),key.getQ().multiply(k).add(point)};  ec.getCurve().normalizeAll(gamma_phi);  return new ECPair(gamma_phi[0],gamma_phi[1]);}  }
class C{  protected void localDeallocate(long ptr){  HadoopOffheapBuffer b=out.buffer();  if (b.isInside(ptr))   b.pointer(ptr); else   b.reset();}  }
class C{  protected TraceBeginRunCycleImpl(){  super();}  }
class C{  public void updateSeries(CandleSeries source,int skip,boolean newBar){  if (source == null) {    throw new IllegalArgumentException("Null source (CandleSeries).");  }  if (source.getItemCount() > skip) {    CandleItem candleItem=(CandleItem)source.getDataItem(skip);    if (newBar) {      VolumeItem dataItem=new VolumeItem(candleItem.getPeriod(),new Long(candleItem.getVolume()),candleItem.getSide());      this.add(dataItem,true);    } else {      VolumeItem dataItem=(VolumeItem)this.getDataItem(this.getItemCount() - 1);      dataItem.setVolume(candleItem.getVolume());      dataItem.setSide(candleItem.getSide());    }  }}  }
class C{  public void testResourcesAvailable(){  new CzechAnalyzer().close();}  }
class C{  public void init(boolean encrypting,CipherParameters params){  if (params instanceof KeyParameter) {    if (((KeyParameter)params).getKey().length > 8) {      throw new IllegalArgumentException("DES key too long - should be 8 bytes");    }    workingKey=generateWorkingKey(encrypting,((KeyParameter)params).getKey());    return;  }  throw new IllegalArgumentException("invalid parameter passed to DES init - " + params.getClass().getName());}  }
class C{  public boolean isToOne(){  return relationshipType.isToOne();}  }
class C{  private synchronized void decodePageForMarkedContent(int pageNumber,PdfObject pdfObject,final Object pageStream) throws Exception {  if (isDecoding) {    LogWriter.writeLog("[PDF]WARNING - this file is being decoded already");  } else {    if (pdfObject == null) {      final String currentPageOffset=currentPdfFile.getReferenceforPage(pageNumber);      pdfObject=new PageObject(currentPageOffset);      currentPdfFile.readObject(pdfObject);    } else {      pageNumber=currentPdfFile.convertObjectToPageNumber(new String(pdfObject.getUnresolvedData()));      currentPdfFile.checkResolved(pdfObject);    }    try {      isDecoding=true;      final ObjectStore objectStoreRef=new ObjectStore();      final PdfStreamDecoder current=new PdfStreamDecoder(currentPdfFile,layers);      current.setParameters(true,false,0,PdfDecoderInt.TEXT + PdfDecoderInt.RAWIMAGES + PdfDecoderInt.FINALIMAGES,false,false);      current.setXMLExtraction(false);      current.setObjectValue(ValueTypes.Name,"markedContent");      current.setObjectValue(ValueTypes.ObjectStore,objectStoreRef);      current.setObjectValue(ValueTypes.StatusBar,null);      current.setObjectValue(ValueTypes.PDFPageData,pdfPageData);      current.setIntValue(ValueTypes.PageNum,pageNumber);      current.setRenderer(new SwingDisplay(pageNumber,objectStoreRef,false));      res.setupResources(current,false,pdfObject.getDictionary(PdfDictionary.Resources),pageNumber,currentPdfFile);      current.setObjectValue(ValueTypes.MarkedContent,pageStream);      if (debug) {        System.out.println(indent + " about to decode page " + pdfObject.getObjectRefAsString());      }      current.decodePageContent(pdfObject);      objectStoreRef.flush();    } catch (    final Exception e) {      LogWriter.writeLog("Exception: " + e.getMessage());    } finally {      isDecoding=false;    }  }}  }
class C{  public MigrationInfo[] future(){  List<MigrationInfo> futureMigrations=new ArrayList<MigrationInfo>();  for (  MigrationInfo migrationInfo : migrationInfos) {    if ((migrationInfo.getState() == MigrationState.FUTURE_SUCCESS) || (migrationInfo.getState() == MigrationState.FUTURE_FAILED)) {      futureMigrations.add(migrationInfo);    }  }  return futureMigrations.toArray(new MigrationInfo[futureMigrations.size()]);}  }
class C{  public Bindings add(String property,JRadioButton[] cs){  registerPropertyChangeListener(cs);  return add(new JRadioButtonBinding(property,cs,0));}  }
class C{  public void visitInvokeDynamicInsn(String name,String desc,Handle bsm,Object... bsmArgs){  if (mv != null) {    mv.visitInvokeDynamicInsn(name,desc,bsm,bsmArgs);  }}  }
class C{  private void checkCursor() throws SQLException {  if (isAfterLast() == true || isBeforeFirst() == true) {    throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.invalidcp").toString());  }}  }
class C{  Type newMethodTemplate(Type restype,List<Type> argtypes,List<Type> typeargtypes){  MethodType mt=new MethodType(argtypes,restype,List.<Type>nil(),syms.methodClass);  return (typeargtypes == null) ? mt : (Type)new ForAll(typeargtypes,mt);}  }
class C{  public static void main(String[] args) throws Exception {  LDAPServer ldap=new LDAPServer();}  }
class C{  public static void write(float latPoint,float lonPoint,float radius,float s,float e,LinkProperties properties,DataOutputStream dos) throws IOException {  LinkArc.write(latPoint,lonPoint,radius,-1,-1,s,e,properties,dos);}  }
class C{  public Ping(long nonce){  this.nonce=nonce;  this.hasNonce=true;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.deleteData(30,5);  childData=child.getData();  assertEquals("characterdataDeleteDataEndAssert","1230 North Ave. Dallas, Texas ",childData);}  }
class C{  public void testTimerMomentConstruction(){  String xml="";  xml+=createStartMissionXml("start","Name");  xml+=createTimerMomentXml("start","start",0.5);  xml+=createEndMissionXml();  InputStream momentInputStream=new ByteArrayInputStream(xml.getBytes());  mMission=new Mission(mMissionData);  try {    mMission.readMoments(momentInputStream);  } catch (  MissionParseException e) {    e.printStackTrace();  }  Assert.assertEquals("Mission 1",mMissionData.getMissionId());  Assert.assertEquals(1,mMissionData.getNumMoments());  Assert.assertEquals(true,mMissionData.getMomentFromId("start") instanceof TimerMoment);  Assert.assertEquals("start",mMissionData.getMomentFromId("start").getNextMomentId());}  }
class C{  private void sortClassDeclarations(ClassDeclaration[] decl){  for (int i=1; i < decl.length; i++) {    ClassDeclaration curr=decl[i];    String name=Names.mangleClass(curr.getName()).toString();    int j;    for (j=i; j > 0; j--) {      if (name.compareTo(Names.mangleClass(decl[j - 1].getName()).toString()) >= 0) {        break;      }      decl[j]=decl[j - 1];    }    decl[j]=curr;  }}  }
class C{  public boolean hasAttributeNS(String namespaceURI,String localName){  return DTM.NULL != dtm.getAttributeNode(node,namespaceURI,localName);}  }
class C{  public void tearDownInstances() throws Exception {  parentAccumuloInstanceDriver.tearDownInstance();  childAccumuloInstanceDriver.tearDownInstance();}  }
class C{  public static String indent(final int depth){  if (depth < 0) {    return "";  }  return ws.substring(0,Math.min(ws.length(),depth * 2));}  }
class C{  public void release(){  FileDownloader.unregisterDownloadFileChangeListener(this);}  }
class C{  Calendar toCalendar(String value,String pattern,Locale locale){  Calendar calendar=null;  try {    DateFormat format=(locale == null) ? new SimpleDateFormat(pattern) : new SimpleDateFormat(pattern,locale);    format.setLenient(false);    format.parse(value);    calendar=format.getCalendar();  } catch (  Exception e) {    fail("Error creating Calendar value ='" + value + ", pattern='"+ pattern+ "' "+ e.toString());  }  return calendar;}  }
class C{  public boolean isStatic(){  return Modifier.isStatic(modifier);}  }
class C{  public CharBuffer append(long i){  if (i == 0x8000000000000000L) {    return append("-9223372036854775808");  }  int length=length();  ensureCapacity(length + 32);  char[] buffer=buffer();  if (i < 0) {    buffer[length++]='-';    i=-i;  } else   if (i == 0) {    buffer[length]='0';    length(length + 1);    return this;  }  int start=length;  while (i > 0) {    buffer[length++]=(char)((i % 10) + '0');    i/=10;  }  for (int j=(length - start) / 2; j > 0; j--) {    char temp=buffer[length - j];    buffer[length - j]=buffer[start + j - 1];    buffer[start + j - 1]=temp;  }  length(length);  return this;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  int i=0;  int rows, cols;  double imageTotal=0;  long imageN=0;  double imageAverage=0;  double imageTotalDeviation=0;  double crispness=0;  double z=0;  float progress=0;  int col, row;  int a;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    }  }  if (inputHeader == null) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    rows=image.getNumberRows();    cols=image.getNumberColumns();    double noData=image.getNoDataValue();    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=image.getValue(row,col);        if (z != noData) {          if (z < 0 || z > 1) {            showFeedback("This tool should only be used with " + "membership probability images containing " + "values that range from 0 to 1.");            break;          }          imageTotal+=z;          imageN++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Calculating image average:",(int)progress);    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=image.getValue(row,col);        if (z != noData) {          imageTotalDeviation+=(z - imageAverage) * (z - imageAverage);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Calculating the image total squared deviation:",(int)progress);    }    image.close();    double denominator;    denominator=Math.pow(imageTotal * (1 - imageAverage),2) + Math.pow(imageAverage,2) * (imageN - imageTotal);    crispness=imageTotalDeviation / denominator;    DecimalFormat df;    df=new DecimalFormat("0.000");    String retstr="CRISPNESS INDEX";    retstr=retstr + "\nInput image:\t" + inputHeader;    retstr=retstr + "\nCrispness (C):\t" + df.format(crispness);    returnData(retstr);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void warning(String msg){  if (logLevel.intValue() <= Level.WARNING.intValue()) {    println(Level.WARNING,msg);  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case VALUES:  return isSetValues();case ERROR:return isSetError();}throw new IllegalStateException();}  }
class C{  public boolean configure(Object nd,JScrollPane tv,JList list,int row){  setLastRendereredObject(nd);  setLastRenderedScrollPane(tv);  Component renderer=null;  bg=list.getBackground();  boolean sel=list.isSelectionEmpty() ? false : list.getSelectionModel().isSelectedIndex(row);  renderer=list.getCellRenderer().getListCellRendererComponent(list,nd,row,sel,false);  if (renderer != null) {    setComponent(renderer);  }  return true;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void dispose(){  m_searchPanel.dispose();}  }
class C{  protected CommaExpressionImpl(){  super();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:30.984 -0500",hash_original_method="C4ABF2148AD4585DF588E0AB365097FF",hash_generated_method="1847CE9A4775F30DB6446D2F571CBAB6") private void sendBadRequestResponse(SIPRequest sipRequest,SIPServerTransaction transaction,String reasonPhrase){  SIPResponse sipResponse=sipRequest.createResponse(Response.BAD_REQUEST);  if (reasonPhrase != null)   sipResponse.setReasonPhrase(reasonPhrase);  ServerHeader serverHeader=MessageFactoryImpl.getDefaultServerHeader();  if (serverHeader != null) {    sipResponse.setHeader(serverHeader);  }  try {    if (sipRequest.getMethod().equals(Request.INVITE)) {      sipStack.addTransactionPendingAck(transaction);    }    transaction.sendResponse(sipResponse);    transaction.releaseSem();  } catch (  Exception ex) {    sipStack.getStackLogger().logError("Problem sending error response",ex);    transaction.releaseSem();    sipStack.removeTransaction(transaction);  }}  }
class C{  public DictionaryMap(DictionaryMap original){  for (  Int2ObjectMap.Entry<String> entry : original.keyToValue.int2ObjectEntrySet()) {    keyToValue.put(entry.getIntKey(),entry.getValue());    valueToKey.put(entry.getValue(),entry.getIntKey());  }  valueToKey.defaultReturnValue(-1);}  }
class C{  @Override public void unregisterForEvents(){  if (subscriptions.hasSubscriptions() && subscriptions != null) {    subscriptions.unsubscribe();  }}  }
class C{  private void resize(int newSize){  Object[] keys=_keys;  int values[]=_values;  _keys=new Object[newSize];  _values=new int[newSize];  _size=0;  _prime=getBiggestPrime(_keys.length);  for (int i=keys.length - 1; i >= 0; i--) {    Object key=keys[i];    int value=values[i];    if (key != null && value != NULL) {      put(key,value,true);    }  }}  }
class C{  public void write(byte buf[],int off,int len){  printHeader();  for (int i=0; i < size(); i++)   ((PrintStream)m_Streams.get(i)).write(buf,off,len);  flush();}  }
class C{  public PubsubFuture<List<String>> publish(final List<Message> messages,final String canonicalTopic){  Topic.validateCanonicalTopic(canonicalTopic);  return publish0(messages,canonicalTopic);}  }
class C{  public GF2Polynomial shiftLeft(int k){  GF2Polynomial result=new GF2Polynomial(len + k,value);  if (k >= 32) {    result.doShiftBlocksLeft(k >>> 5);  }  final int remaining=k & 0x1f;  if (remaining != 0) {    for (int i=result.blocks - 1; i >= 1; i--) {      result.value[i]<<=remaining;      result.value[i]|=result.value[i - 1] >>> (32 - remaining);    }    result.value[0]<<=remaining;  }  return result;}  }
class C{  public void removeSuit(){  for (  ArmorSlot armorSlot : ArmorSlot.values()) {    removeSuit(armorSlot);  }}  }
class C{  private static Pair<MediaFormat,TrackEncryptionBox> parseAvcFromParent(ParsableByteArray parent,int position,int size){  parent.setPosition(position + Mp4Util.ATOM_HEADER_SIZE);  parent.skip(24);  int width=parent.readUnsignedShort();  int height=parent.readUnsignedShort();  float pixelWidthHeightRatio=1;  parent.skip(50);  List<byte[]> initializationData=null;  TrackEncryptionBox trackEncryptionBox=null;  int childPosition=parent.getPosition();  while (childPosition - position < size) {    parent.setPosition(childPosition);    int childStartPosition=parent.getPosition();    int childAtomSize=parent.readInt();    if (childAtomSize == 0 && parent.getPosition() - position == size) {      break;    }    Assertions.checkArgument(childAtomSize > 0,"childAtomSize should be positive");    int childAtomType=parent.readInt();    if (childAtomType == Atom.TYPE_avcC) {      initializationData=parseAvcCFromParent(parent,childStartPosition);    } else     if (childAtomType == Atom.TYPE_sinf) {      trackEncryptionBox=parseSinfFromParent(parent,childStartPosition,childAtomSize);    } else     if (childAtomType == Atom.TYPE_pasp) {      pixelWidthHeightRatio=parsePaspFromParent(parent,childStartPosition);    }    childPosition+=childAtomSize;  }  MediaFormat format=MediaFormat.createVideoFormat(MimeTypes.VIDEO_H264,MediaFormat.NO_VALUE,width,height,pixelWidthHeightRatio,initializationData);  return Pair.create(format,trackEncryptionBox);}  }
class C{  public void detach(){  if (m_allowDetach) {    m_traverser=null;    super.detach();  }}  }
class C{  public void clearParameters(){  parameters=new ParameterHolder[prepareResult.getParamCount()];}  }
class C{  private static boolean isValidCharCode(int code){  return (0x0020 <= code && code <= 0xD7FF) || (0x000A == code) || (0x0009 == code)|| (0x000D == code)|| (0xE000 <= code && code <= 0xFFFD)|| (0x10000 <= code && code <= 0x10ffff);}  }
class C{  protected Anonymous_numExpr_4_Impl(){  super();}  }
class C{  public static void fillErrorMessages(Component.Validatable component,ValidationException e,ValidationErrors errors){  if (e instanceof FieldGroup.FieldsValidationException && component instanceof FieldGroup) {    FieldGroup fieldGroup=(FieldGroup)component;    Map<FieldGroup.FieldConfig,Exception> fields=((FieldGroup.FieldsValidationException)e).getProblemFields();    for (    Map.Entry<FieldGroup.FieldConfig,Exception> problem : fields.entrySet()) {      Component fieldComponent=fieldGroup.getFieldComponent(problem.getKey());      errors.add(fieldComponent,problem.getValue().getMessage());    }  } else   if (e instanceof RequiredValueMissingException) {    errors.add(((RequiredValueMissingException)e).getComponent(),e.getMessage());  } else {    errors.add((Component)component,e.getMessage());  }}  }
class C{  public boolean isDocOrdered(){  return true;}  }
class C{  public static void testArraySampling(int n,int N){  int[] elements=new int[N];  for (int i=0; i < N; i++)   elements[i]=i;  cern.colt.Timer timer=new cern.colt.Timer().start();  int[] sample=sampleArray(n,elements);  timer.stop().display();  System.out.println("Good bye.\n");}  }
class C{  public AsyncLogTarget(final LogTarget logTarget,final boolean closeTarget){  this(logTarget,15,closeTarget);}  }
class C{  public static <T>Iterator<T> toIterator(Collection<T> col){  if (col == null)   return null; else   return col.iterator();}  }
class C{  public static boolean isDoLog(){  return doLog;}  }
class C{  public ReadWriteLockedOffHeapClockCacheFactory(PageSource tableSource,Factory<? extends StorageEngine<? super K,? super V>> storageEngineFactory,int tableSize){  this(tableSource,storageEngineFactory,null,tableSize);}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.TEMPLATE_SEGMENT;}  }
class C{  @Override public void paintCurrentValue(Graphics g,Rectangle bounds,boolean hasFocus){  ListCellRenderer renderer=comboBox.getRenderer();  Component c;  c=renderer.getListCellRendererComponent(listBox,comboBox.getSelectedItem(),-1,false,false);  boolean shouldValidate=false;  if (c instanceof JPanel) {    shouldValidate=true;  }  if (c instanceof UIResource) {    c.setName("ComboBox.renderer");  }  boolean force=forceOpaque && c instanceof JComponent;  if (force) {    ((JComponent)c).setOpaque(false);  }  int x=bounds.x, y=bounds.y, w=bounds.width, h=bounds.height;  if (padding != null) {    x=bounds.x + padding.left;    y=bounds.y + padding.top;    w=bounds.width - (padding.left + padding.right);    h=bounds.height - (padding.top + padding.bottom);  }  currentValuePane.paintComponent(g,c,comboBox,x,y,w,h,shouldValidate);  if (force) {    ((JComponent)c).setOpaque(true);  }}  }
class C{  public String replaceTokens(String template){  return TemplateUpdateProcessorFactory.replaceTokens(template,cache,fun);}  }
class C{  public boolean remove(Object e){  if (e == null)   return false;  Class<?> eClass=e.getClass();  if (eClass != elementType && eClass.getSuperclass() != elementType)   return false;  int eOrdinal=((Enum<?>)e).ordinal();  int eWordNum=eOrdinal >>> 6;  long oldElements=elements[eWordNum];  elements[eWordNum]&=~(1L << eOrdinal);  boolean result=(elements[eWordNum] != oldElements);  if (result)   size--;  return result;}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public InvalidJobException(String msg,Throwable nested){  super(msg,nested);}  }
class C{  public boolean isEqualNode(Node arg){  if (arg == this) {    return true;  }  if (arg.getNodeType() != getNodeType()) {    return false;  }  if (getNodeName() == null) {    if (arg.getNodeName() != null) {      return false;    }  } else   if (!getNodeName().equals(arg.getNodeName())) {    return false;  }  if (getLocalName() == null) {    if (arg.getLocalName() != null) {      return false;    }  } else   if (!getLocalName().equals(arg.getLocalName())) {    return false;  }  if (getNamespaceURI() == null) {    if (arg.getNamespaceURI() != null) {      return false;    }  } else   if (!getNamespaceURI().equals(arg.getNamespaceURI())) {    return false;  }  if (getPrefix() == null) {    if (arg.getPrefix() != null) {      return false;    }  } else   if (!getPrefix().equals(arg.getPrefix())) {    return false;  }  if (getNodeValue() == null) {    if (arg.getNodeValue() != null) {      return false;    }  } else   if (!getNodeValue().equals(arg.getNodeValue())) {    return false;  }  return true;}  }
class C{  @Override public void cleanUp(){  super.cleanUp();  m_Classifier=null;  m_PlotShapes=null;  m_PlotSizes=null;  m_Evaluation=null;}  }
class C{  public void addLayoutCallback(LayoutCallback callback){  if (callback == null)   throw new NullPointerException();  if (callbackList == null)   callbackList=new ArrayList<LayoutCallback>(1);  callbackList.add(callback);}  }
class C{  protected boolean adjustSortsForDistinct(List<OrderByExpression> sorts,Project project) throws StandardException {  List<ExpressionNode> exprs=project.getFields();  BitSet used=new BitSet(exprs.size());  int nSorts=sorts.size();  ExpressionNode[] adjustedOrderBys=new ExpressionNode[nSorts];  for (int i=0; i < nSorts; i++) {    OrderByExpression orderBy=sorts.get(i);    ExpressionNode expr=orderBy.getExpression();    int idx=exprs.indexOf(expr);    if (idx < 0) {      if (isDistinctSortNotSelectGroupBy())       return false;      throw new UnsupportedSQLException("SELECT DISTINCT requires that ORDER BY expressions be in the select list",expr.getSQLsource());    }    adjustedOrderBys[i]=new ColumnExpression(project,idx,expr.getSQLtype(),expr.getSQLsource(),expr.getType());    used.set(idx);  }  for (int i=0; i < exprs.size(); i++) {    if (i < nSorts)     sorts.get(i).setExpression(adjustedOrderBys[i]);    if (!used.get(i)) {      ExpressionNode expr=exprs.get(i);      ExpressionNode cexpr=new ColumnExpression(project,i,expr.getSQLtype(),expr.getSQLsource(),expr.getType());      OrderByExpression orderBy=new OrderByExpression(cexpr,sorts.get(0).isAscending());      sorts.add(orderBy);    }  }  return true;}  }
class C{  public int compareTo(MethodModel m){  int result=this.getSignature().compareTo(m.getSignature());  if (result == 0) {    result=this.receiverValue.compareTo(m.getReceiverValue());  }  if (result == 0) {    if (this.getDeclSourceLocation() != null && m.getDeclSourceLocation() != null) {      result=this.getDeclSourceLocation().compareTo(m.getDeclSourceLocation());    }  }  if (result == 0) {    result=Integer.compare(this.getLines().size(),m.getLines().size());  }  if (result == 0) {    for (int i=0; i < this.getLines().size(); i++) {      result=this.lines.get(i).compareTo(m.lines.get(i));      if (result != 0) {        return result;      }    }  }  if (result == 0)   if (methodArgumentValues == null) {    if (m.methodArgumentValues != null)     result=1;  } else {    if (m.methodArgumentValues == null) {      result=-1;    } else {      result=methodArgumentValues.toString().compareTo(m.methodArgumentValues.toString());    }  }  return result;}  }
class C{  public void addUIBlock(UIBlock block){  mUIImplementation.addUIBlock(block);}  }
class C{  public static void decodeToFile(String dataToDecode,String filename) throws java.io.IOException {  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.DECODE);    bos.write(dataToDecode.getBytes(PREFERRED_ENCODING));  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }}  }
class C{  public int readFUnit(int index){  throw new UnsupportedOperationException();}  }
class C{  public static byte[] rsa(byte[] msg,RSAPublicKey key) throws BadPaddingException {  return crypt(msg,key.getModulus(),key.getPublicExponent());}  }
class C{  public static int positionFor(final Symbol sym,final JCTree tree){  JCTree decl=declarationFor(sym,tree);  return ((decl != null) ? decl : tree).pos;}  }
class C{  public Middleware<AsyncHandler<Response<ByteString>>,AsyncHandler<Response<ByteString>>> responsePayloadSizeHistogram(String endpointName){  final MetricId histogramId=MetricId.build().tagged("service",serviceName).tagged("endpoint",endpointName).tagged("what","endpoint-response-size");  final Histogram histogram=registry.histogram(histogramId);  return null;}  }
class C{  public static int computeMessageSize(final int fieldNumber,final MessageLite value){  return computeTagSize(fieldNumber) + computeMessageSizeNoTag(value);}  }
class C{  public boolean isIdentifier(){  return (type == TokenType.ID || isUnreservedKeyword);}  }
class C{  public Creature(final Creature copy){  this();  this.baseSpeed=copy.baseSpeed;  setSize((int)copy.getWidth(),(int)copy.getHeight());  setCorpse(copy.getCorpseName(),copy.getHarmlessCorpseName(),copy.getCorpseWidth(),copy.getCorpseHeight());  setBlood(copy.getBloodClass());  if (copy.dropsItems != null) {    this.dropsItems=copy.dropsItems;  }  this.setAIProfiles(copy.getAIProfiles(),false);  this.statusAttackers=copy.statusAttackers;  this.noises=copy.noises;  this.respawnTime=copy.respawnTime;  susceptibilities=copy.susceptibilities;  setDamageTypes(copy.damageType,copy.rangedDamageType);  setEntityClass(copy.get("class"));  setEntitySubclass(copy.get("subclass"));  setDescription(copy.getDescription());  setAtk(copy.getAtk());  setDef(copy.getDef());  setXP(copy.getXP());  initHP(copy.getBaseHP());  setName(copy.getName());  setLevel(copy.getLevel());  setSounds(copy.getSounds());  setDeathSound(copy.deathSound);  setMovementSound(copy.movementSound);  for (  RPSlot slot : copy.slots()) {    this.addSlot((RPSlot)slot.clone());  }  update();  updateModifiedAttributes();  stop();  if (LOGGER.isDebugEnabled()) {    LOGGER.debug(getID() + " Created " + get("class")+ ":"+ this);  }}  }
class C{  public static boolean isUSPhoneAreaCode(String s){  if (isEmpty(s))   return defaultEmptyOK;  String normalizedPhone=stripCharsInBag(s,phoneNumberDelimiters);  return (isInteger(normalizedPhone) && normalizedPhone.length() == digitsInUSPhoneAreaCode);}  }
class C{  @Override public String toString(){  return new String(b,0,i);}  }
class C{  public void disableStyle(){  style=false;  for (int i=0; i < childCount; i++) {    children[i].disableStyle();  }}  }
class C{  public NbtLimiter(int maxBytes,int maxComplexity,int maxElements){  this.maxBytes=maxBytes;  this.maxComplexity=maxComplexity;  this.maxElements=maxElements;}  }
class C{  public void run(){  logInfo("Starting stage task thread",null);  taskProgress.begin();  context=stage.getPluginContext();  try {    runTask();  } catch (  Throwable t) {    String msg="Stage task error recovery failed: stage=" + stage.getName() + " message="+ t.getMessage();    logger.error(msg,t);    dispatchErrorNotification(msg,null,t);  }  logInfo("Terminating processing for stage task thread",null);  ReplDBMSHeader lastEvent=stage.getProgressTracker().getDirtyLastProcessedEvent(taskId);  if (lastEvent != null) {    String msg="Last successfully processed event prior to termination: seqno=" + lastEvent.getSeqno() + " eventid="+ lastEvent.getEventId();    logInfo(msg,null);  }  logInfo("Task event count: " + taskProgress.getEventCount(),null);  schedule.taskEnd();}  }
class C{  protected PartStack findPartStackByPart(PartPresenter part){  for (  PartStackType partStackType : PartStackType.values()) {    if (partStacks.get(partStackType.toString()).containsPart(part)) {      return partStacks.get(partStackType.toString());    }  }  return null;}  }
class C{  public PointPlacemarkAttributes(){}  }
class C{  private String buildPermanentPresenceInfoDocument(PresenceInfo info){  String document=new StringBuilder("<?xml version=\"1.0\" encoding=\"").append(UTF8_STR).append("\"?>").append(SipUtils.CRLF).append("<presence xmlns=\"urn:ietf:params:xml:ns:pidf\"").append(" xmlns:op=\"urn:oma:xml:prs:pidf:oma-pres\"").append(" xmlns:opd=\"urn:oma:xml:pde:pidf:ext\"").append(" xmlns:pdm=\"urn:ietf:params:xml:ns:pidf:data-model\"").append(" xmlns:ci=\"urn:ietf:params:xml:ns:pidf:cipid\"").append(" xmlns:rpid=\"urn:ietf:params:xml:ns:pidf:rpid\"").append(" entity=\"").append(ImsModule.getImsUserProfile().getPublicUri()).append("\">").append(SipUtils.CRLF).toString();  String timestamp=DateUtils.encodeDate(info.getTimestamp());  document+="<pdm:person id=\"p1\">" + SipUtils.CRLF + buildPersonInfo(info)+ "  <pdm:timestamp>"+ timestamp+ "</pdm:timestamp>"+ SipUtils.CRLF+ "</pdm:person>"+ SipUtils.CRLF;  document+="</presence>" + SipUtils.CRLF;  return document;}  }
class C{  private void updateServerListProperties(){  String serverNameList="";  for (int i=0; i < currServerList.size(); i++) {    MgrServerInfo msi=(MgrServerInfo)currServerList.get(i);    if (msi.serverType != LOCAL_SERVER) {      serverNameList+=msi.serverName + ";";      MiniClient.myProperties.setProperty("servers/" + msi.serverName + "/type",Integer.toString(msi.serverType));      if (msi.serverDirectAddress != null && msi.serverDirectAddress.length() > 0)       MiniClient.myProperties.setProperty("servers/" + msi.serverName + "/address",msi.serverDirectAddress);      if (msi.serverLookupID != null && msi.serverLookupID.length() > 0)       MiniClient.myProperties.setProperty("servers/" + msi.serverName + "/locator_id",msi.serverLookupID);      MiniClient.myProperties.setProperty("servers/" + msi.serverName + "/last_connect_time",Long.toString(msi.lastConnectTime));    }  }  MiniClient.myProperties.setProperty("server_names",serverNameList);}  }
class C{  public void writeText(char text[]) throws IOException {  if (text == null) {    throw new NullPointerException(MessageUtils.getExceptionMessageString(MessageUtils.NULL_PARAMETERS_ERROR_MESSAGE_ID,"text"));  }  closeStartIfNecessary();  if (dontEscape) {    writer.write(text);  } else {    HtmlUtils.writeText(writer,true,true,buffer,text);  }}  }
class C{  public static double[] convert2Dto1DDoubleArray(double[][] array){  double[] ret=new double[array.length * array[0].length];  int c=0;  for (int i=0; i < array.length; i++) {    for (int j=0; j < array[0].length; j++) {      ret[c++]=array[i][j];    }  }  return ret;}  }
class C{  public void log(String message,Level level,Object... arguments){  this.bot.log(this,message,level,arguments);}  }
class C{  public void clear(){  getEntryMap().clear();}  }
class C{  public String list(String dir) throws IOException {  passive();  send("LIST " + dir);  readCode(150);  ByteArrayOutputStream out=new ByteArrayOutputStream();  IOUtils.copyAndClose(inData,out);  readCode(226);  byte[] data=out.toByteArray();  return new String(data);}  }
class C{  public static long safeSubtract(long val1,long val2){  long diff=val1 - val2;  if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {    throw new ArithmeticException("The calculation caused an overflow: " + val1 + " - "+ val2);  }  return diff;}  }
class C{  public boolean isEmptyKey(){  return "".equals(key);}  }
class C{  public static File createDirectory(final String dirName){  File tmpDir=new File(dirName);  if (!tmpDir.mkdir() && !tmpDir.exists()) {    throw new RuntimeException("The tmp directory " + dirName + " could not be created.");  }  return tmpDir;}  }
class C{  public double[] raw(){  return new double[]{x,y};}  }
class C{  public MapIterator mapIterator(){  return new ReferenceMapIterator(this);}  }
class C{  public String normalizeAccountName(String name,String prefix) throws ServerException {  String normalized=ILLEGAL_ACCOUNT_NAME_CHARACTERS.matcher(name).replaceAll("");  String candidate=normalized.isEmpty() ? NameGenerator.generate(prefix,4) : normalized;  int i=1;  try {    while (accountExists(candidate)) {      candidate=normalized.isEmpty() ? NameGenerator.generate(prefix,4) : normalized + String.valueOf(i++);    }  } catch (  ServerException e) {    LOG.warn("Error occurred during account name normalization",e);    throw e;  }  return candidate;}  }
class C{  public void clear(){  super.clear();  LEFT_PARENTHESES="[";  RIGHT_PARENTHESES="]";}  }
class C{  public BufferedImage createCompatibleImage(int width,int height){  WritableRaster wr=raster.createCompatibleWritableRaster(width,height);  return new BufferedImage(model,wr,model.isAlphaPremultiplied(),null);}  }
class C{  public static void writeCurrentCSStations(){  BufferedWriter writer=IOUtils.getBufferedWriter(Global.matsimInputDir + "Carsharing/stations2015.txt");  try {    writer.write(HEADER);    writer.newLine();    writer.write(GP_HBF);    writer.newLine();    writer.write(GP_KSK);    writer.newLine();    writer.write(GP_RAT);    writer.newLine();    writer.write(GP_MAR);    writer.flush();    writer.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public <T>T reverse(T t){  return t;}  }
class C{  public IndTestTimeSeries(TetradMatrix data,List<Node> vars){  if (data == null) {    throw new NullPointerException("Data must not be null.");  }  if (vars == null) {    throw new NullPointerException("Variables must not be a null list.");  }  for (int i=0; i < vars.size(); i++) {    if (vars.get(i) == null) {      throw new NullPointerException("Variable at index " + i + " must not be null.");    }  }  this.data=data;  this.numTimeSteps=this.data.rows();  this.numVars=this.data.columns();  this.vars=Collections.unmodifiableList(vars);  this.setNumLags(1);  this.setAlpha(0.05);}  }
class C{  private void writeEnd(OutputNode node) throws Exception {  String name=node.getName();  String prefix=node.getPrefix(verbose);  String value=node.getValue();  if (value != null) {    writeValue(node);  }  if (name != null) {    writer.writeEnd(name,prefix);    writer.flush();  }}  }
class C{  protected boolean notDeleted(){  if (fOffset < fPosition.offset && (fPosition.offset + fPosition.length < fOffset + fLength)) {    fPosition.delete();    try {      fDocument.removePosition(fCategory,fPosition);    } catch (    BadPositionCategoryException x) {    }    return false;  }  return true;}  }
class C{  public static String safeCreateUUID(){synchronized (EventProcessorHost.uuidSynchronizer) {    final UUID newUuid=UUID.randomUUID();    return new String(newUuid.toString());  }}  }
class C{  private void createCenterPanel(){  STATUS_COMPONENT=new StatusComponent();  _centerComponent=new JLabel();  _centerPanel=new JPanel(new GridBagLayout());  _centerPanel.setOpaque(false);  STATUS_COMPONENT.setProgressPreferredSize(new Dimension(250,20));  GridBagConstraints gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.gridy=0;  gbc.weightx=1;  gbc.fill=GridBagConstraints.NONE;  gbc.anchor=GridBagConstraints.CENTER;  _centerPanel.add(STATUS_COMPONENT,gbc);  _centerPanel.addMouseListener(STATUS_BAR_LISTENER);  STATUS_COMPONENT.addMouseListener(STATUS_BAR_LISTENER);}  }
class C{  @Override protected void packageClassifier(File dir,JarOutputStream modelStream) throws IOException {  super.packageClassifier(dir,modelStream);  JarStreams.putNextJarEntry(modelStream,"model.svmlight",getModelFile(dir));}  }
class C{  public E putDoubleArray(final String key,@Nullable final double[] value){  this.bundle.putDoubleArray(key,value);  return (E)this;}  }
class C{  public void schedule(TimerTask task,Date time){  sched(task,time.getTime(),0);}  }
class C{  public Set entrySet(){  return map.entrySet();}  }
class C{  public AttributeList(String name){  this.name=name;}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  public static <K,V>ImmutableSetMultimap<K,V> of(K k1,V v1){  ImmutableSetMultimap.Builder<K,V> builder=ImmutableSetMultimap.builder();  builder.put(k1,v1);  return builder.build();}  }
class C{  public NegateConstraint(@NonNull final Constraint<Type> constraint){  setConstraint(constraint);}  }
class C{  public ProcessBuilder redirectErrorStream(boolean redirectErrorStream){  this.redirectErrorStream=redirectErrorStream;  return this;}  }
class C{  public int size(){  return content.size();}  }
class C{  public synchronized void add(String name,long threadId){  if (mFinished) {    throw new IllegalStateException("Marker added to finished log");  }  mMarkers.add(new Marker(name,threadId,SystemClock.elapsedRealtime()));}  }
class C{  private Point addPoint(Polygon arrow,Rectangle rect,int pos,boolean from){  int x=rect.x;  int y=rect.y;  Point point=null;  if (pos == SwingConstants.TOP) {    x+=rect.width / 2;    if (from) {      arrow.addPoint(x - 2,y);      arrow.addPoint(x + 2,y);    } else     arrow.addPoint(x,y);    point=new Point(x,y - 2);  } else   if (pos == SwingConstants.RIGHT) {    x+=rect.width;    y+=rect.height / 2;    if (from) {      arrow.addPoint(x,y - 2);      arrow.addPoint(x,y + 2);    } else     arrow.addPoint(x,y);    point=new Point(x + 2,y);  } else   if (pos == SwingConstants.LEFT) {    y+=rect.height / 2;    if (from) {      arrow.addPoint(x,y - 2);      arrow.addPoint(x,y + 2);    } else     arrow.addPoint(x,y);    point=new Point(x - 2,y);  } else {    x+=rect.width / 2;    y+=rect.height;    if (from) {      arrow.addPoint(x - 2,y);      arrow.addPoint(x + 2,y);    } else     arrow.addPoint(x,y);    point=new Point(x,y + 2);  }  return point;}  }
class C{  static void checkMethodDesc(final String desc){  if (desc == null || desc.length() == 0) {    throw new IllegalArgumentException("Invalid method descriptor (must not be null or empty)");  }  if (desc.charAt(0) != '(' || desc.length() < 3) {    throw new IllegalArgumentException("Invalid descriptor: " + desc);  }  int start=1;  if (desc.charAt(start) != ')') {    do {      if (desc.charAt(start) == 'V') {        throw new IllegalArgumentException("Invalid descriptor: " + desc);      }      start=checkDesc(desc,start,false);    } while (start < desc.length() && desc.charAt(start) != ')');  }  start=checkDesc(desc,start + 1,true);  if (start != desc.length()) {    throw new IllegalArgumentException("Invalid descriptor: " + desc);  }}  }
class C{  public ProjectDependency createProjectDependency(){  ProjectDependencyImpl projectDependency=new ProjectDependencyImpl();  return projectDependency;}  }
class C{  public static InlineQueryResultCachedPhotoBuilder builder(){  return new InlineQueryResultCachedPhotoBuilder();}  }
class C{  public BoxAndWhiskerItem(Number mean,Number median,Number q1,Number q3,Number minRegularValue,Number maxRegularValue,Number minOutlier,Number maxOutlier,List outliers){  this.mean=mean;  this.median=median;  this.q1=q1;  this.q3=q3;  this.minRegularValue=minRegularValue;  this.maxRegularValue=maxRegularValue;  this.minOutlier=minOutlier;  this.maxOutlier=maxOutlier;  this.outliers=outliers;}  }
class C{  public void validate(Class type) throws Exception {  validateExpressions(type);  validateAttributes(type);  validateElements(type);  validateModels(type);  validateText(type);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("OMAction (").append(value).append(") [ ");  if (value == 0) {    sb.append("add ");  } else {    if (isMask(RAISE_TO_TOP_GRAPHIC_MASK))     sb.append("raise_to_top ");    if (isMask(LOWER_TO_BOTTOM_GRAPHIC_MASK))     sb.append("lower_to_bottom ");    if (isMask(DELETE_GRAPHIC_MASK))     sb.append("delete ");    if (isMask(SELECT_GRAPHIC_MASK))     sb.append("select ");    if (isMask(DESELECT_GRAPHIC_MASK))     sb.append("deselect ");    if (isMask(DESELECTALL_GRAPHIC_MASK))     sb.append("deselect_all ");    if (isMask(ADD_GRAPHIC_MASK))     sb.append("add ");    if (isMask(UPDATE_GRAPHIC_MASK))     sb.append("update ");    if (isMask(RAISE_GRAPHIC_MASK))     sb.append("raise ");    if (isMask(LOWER_GRAPHIC_MASK))     sb.append("lower ");    if (isMask(SORT_GRAPHICS_MASK))     sb.append("sort ");  }  sb.append("]");  return sb.toString();}  }
class C{  public CompositeType deriveSubType(String desc){  return new CompositeType(this,desc);}  }
class C{  private static ByteBuffer generateWavHeader(int sampleCount){  final int numDataBytes=sampleCount * NUM_CHANNELS * BITS_PER_SAMPLE / 8;  ByteBuffer buf=ByteBuffer.allocate(44);  buf.order(ByteOrder.LITTLE_ENDIAN);  buf.putInt(0x46464952);  buf.putInt(36 + numDataBytes);  buf.putInt(0x45564157);  buf.putInt(0x20746d66);  buf.putInt(16);  buf.putShort((short)1);  buf.putShort((short)NUM_CHANNELS);  buf.putInt(SAMPLE_RATE);  buf.putInt(SAMPLE_RATE * NUM_CHANNELS * BITS_PER_SAMPLE / 8);  buf.putShort((short)(NUM_CHANNELS * BITS_PER_SAMPLE / 8));  buf.putShort((short)BITS_PER_SAMPLE);  buf.putInt(0x61746164);  buf.putInt(numDataBytes);  buf.position(0);  return buf;}  }
class C{  public CActionShowDataflow(final CGraphWindow parent,final IViewContainer container,final INaviView view){  super("Show Dataflow graph");  m_parent=Preconditions.checkNotNull(parent,"IE01647: Parent can not be null");  m_container=Preconditions.checkNotNull(container,"IE01649: Container argument can not be null");  m_view=Preconditions.checkNotNull(view,"IE02298: View argument can not be null");}  }
class C{  public static LastEverProjectionExpression lastEver(Expression expression){  return new LastEverProjectionExpression(expression,false);}  }
class C{  public void downloadConfigDir(URI backupLoc,String backupId,String configName) throws IOException {  URI dest=repository.resolve(backupLoc,backupId,ZK_STATE_DIR,CONFIG_STATE_DIR,configName);  repository.createDirectory(repository.resolve(backupLoc,backupId,ZK_STATE_DIR));  repository.createDirectory(repository.resolve(backupLoc,backupId,ZK_STATE_DIR,CONFIG_STATE_DIR));  repository.createDirectory(dest);  downloadFromZK(zkStateReader.getZkClient(),ZkConfigManager.CONFIGS_ZKNODE + "/" + configName,dest);}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  super.reset(mapping,request);  relacionesSeleccionadas=new String[0];}  }
class C{  public MessageSaver(MessageFactory messageFactory,File saveDir,Type... types) throws FileNotFoundException {  if (!saveDir.exists()) {    throw new FileNotFoundException(saveDir.getName());  }  this.messageFactory=messageFactory;  this.saveDir=saveDir;  this.types=new HashSet<>(Arrays.asList(types));}  }
class C{  AsMavenGroupImpl run(Project project,File p2asmaven) throws Exception {  AsMavenGroupImpl impl=new AsMavenGroupImpl(project,p2asmaven,this);  impl.run();  return impl;}  }
class C{  public InetUnixAddress(byte[] path){  super(AF_UNIX,path,null);}  }
class C{  public static int calculateDarkerColor(final int color,final float factor){  final int a=Color.alpha(color);  final int r=Color.red(color);  final int g=Color.green(color);  final int b=Color.blue(color);  final int lightnessLevel=Math.round(RGB_TOTAL_COLORS * factor);  return Color.argb(a,Math.max(r - lightnessLevel,0),Math.max(g - lightnessLevel,0),Math.max(b - lightnessLevel,0));}  }
class C{  public static InterestLevel find(String value){  return enums.find(value);}  }
class C{  public void printNotation(char[] space1,char[] name,char[] space2,String externalId,char[] space3,char[] string1,char string1Delim,char[] space4,char[] string2,char string2Delim,char[] space5) throws IOException {  writer.write("<!NOTATION");  printSpaces(space1,false);  writer.write(name);  printSpaces(space2,false);  writer.write(externalId);  printSpaces(space3,false);  writer.write(string1Delim);  writer.write(string1);  writer.write(string1Delim);  if (space4 != null) {    printSpaces(space4,false);    if (string2 != null) {      writer.write(string2Delim);      writer.write(string2);      writer.write(string2Delim);    }  }  if (space5 != null) {    printSpaces(space5,true);  }  writer.write('>');}  }
class C{  public Entry updateOrCreateSource(User user,String id,String url,String title,Long modTime,Long createTime,boolean isAdmin,Errors errors){  if (user == null) {    Errors.add(errors,errorMessages.errorUserIsNull());    return null;  }  if (url == null) {    Errors.add(errors,errorMessages.errorUrlIsNull());    return null;  }  Entry source=getEntryByUserIdAndUrl(user.getId(),url);  if (source == null) {    if (url.isEmpty()) {      Errors.add(errors,errorMessages.errorUrlIsEmpty());      return null;    }    if (title == null) {      Errors.add(errors,errorMessages.errorTitleIsNull());      return null;    }    if (title.isEmpty()) {      Errors.add(errors,errorMessages.errorTitleIsEmpty());      return null;    }    if (modTime == null) {      Errors.add(errors,errorMessages.errorModTimeIsNull());      return null;    }    if (createTime == null) {      Errors.add(errors,errorMessages.errorCreateTimeIsNull());      return null;    }    if (id != null && !idGenerator.isIdWellFormed(id)) {      Errors.add(errors,errorMessages.errorIdIsInvalid());      return null;    }    if (createTime.longValue() > modTime.longValue()) {      modTime=createTime;    }    if (url != null) {      url=cleanUpText(url);    }    if (title != null) {      title=cleanUpText(title);    }    source=new Entry();    source.setDb(db);    if (id == null) {      id=idGenerator.getAnotherId();    }    source.setId(id);    source.setSourceUrl(url);    source.setSourceTitle(title);    source.setCreateTime(createTime);    source.setType(Constants.source);    source.setUserId(user.getId());    db.persistEntry(source);  } else   if (!canUserModifyEntry(user,source,isAdmin)) {    Errors.add(errors,errorMessages.errorUserIsNotEntitledToModifyTheSource());    return null;  }  source.setModTime(modTime);  return source;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:59.589 -0500",hash_original_method="110E01A7854D6A7CF0C047806FCA3437",hash_generated_method="F6E9C644430F59BB04DB8C2BD0F0560C") public void disableCompatibilityMode(){  flags|=(FLAG_SUPPORTS_LARGE_SCREENS | FLAG_SUPPORTS_NORMAL_SCREENS | FLAG_SUPPORTS_SMALL_SCREENS| FLAG_RESIZEABLE_FOR_SCREENS| FLAG_SUPPORTS_SCREEN_DENSITIES| FLAG_SUPPORTS_XLARGE_SCREENS);}  }
class C{  public Builder noCache(){  this.noCache=true;  return this;}  }
class C{  public Attendee(String name,String email,String uri){  this.name=name;  this.email=email;  this.uri=uri;}  }
class C{  @Override public void pauseController(){}  }
class C{  public void authorize(Activity activity,Callback<TwitterSession> callback){  if (activity == null) {    throw new IllegalArgumentException("Activity must not be null.");  }  if (callback == null) {    throw new IllegalArgumentException("Callback must not be null.");  }  if (activity.isFinishing()) {    Fabric.getLogger().e(TwitterCore.TAG,"Cannot authorize, activity is finishing.",null);  } else {    handleAuthorize(activity,callback);  }}  }
class C{  private int parseHeaderNonce(final byte[] b,final int off) throws ParseException {  final int len=b.length - off;  if (len >= nonceLen_) {    headerNonce_=Arrays.copyOfRange(b,off,off + nonceLen_);    return nonceLen_;  } else {    throw new ParseException("Not enough bytes to parse header nonce");  }}  }
class C{  public static void displayHelp(){  System.out.println("Usage:");  System.out.println("\tTrainer -all/-trn/-tst -d <model directory> -o <optionFile>");}  }
class C{  public SuperClassComponent create(N4JSClassWizardModel model,WizardComponentContainer container){  return new SuperClassComponent(model,container);}  }
class C{  boolean isInitValueValid(int v){  if ((v < 0) || (v > SnmpUnsignedInt.MAX_VALUE)) {    return false;  }  return true;}  }
class C{  private static void drawOutlineString(final Image image,final Color textColor,final Color outlineColor,final String text,final int x,final int y){  Graphics g=image.getGraphics();  g.setColor(outlineColor);  g.drawString(text,x - 1,y - 1);  g.drawString(text,x + 1,y + 1);  g.drawString(text,x - 1,y + 1);  g.drawString(text,x,y - 1);  g.drawString(text,x + 1,y);  g.drawString(text,x - 1,y);  g.drawString(text,x,y + 1);  g.drawString(text,x + 1,y - 1);  g.setColor(textColor);  g.drawString(text,x,y);}  }
class C{  public double[][] generateRandomSamples(EvolutionState state,double min,double max,int numPoints,int threadnum){  return generateRandomSamples(state,new double[]{min},new double[]{max},numPoints,threadnum);}  }
class C{  private static PackingPlan doScalingTest(TopologyAPI.Topology topology,Map<String,Integer> componentChanges,long boltRam,int boltParallelism,long spoutRam,int spoutParallelism,int numContainersBeforeRepack,int totalInstancesExpected){  PackingPlan packingPlan=getResourceCompliantRRPackingPlan(topology);  Assert.assertEquals(numContainersBeforeRepack,packingPlan.getContainers().size());  Assert.assertEquals(totalInstancesExpected,(int)packingPlan.getInstanceCount());  AssertPacking.assertContainers(packingPlan.getContainers(),BOLT_NAME,SPOUT_NAME,boltRam,spoutRam,null);  AssertPacking.assertNumInstances(packingPlan.getContainers(),BOLT_NAME,boltParallelism);  AssertPacking.assertNumInstances(packingPlan.getContainers(),SPOUT_NAME,spoutParallelism);  PackingPlan newPackingPlan=getResourceCompliantRRPackingPlanRepack(topology,packingPlan,componentChanges);  AssertPacking.assertContainerRam(newPackingPlan.getContainers(),packingPlan.getMaxContainerResources().getRam());  return newPackingPlan;}  }
class C{  public Script parse(CharSequence text,JavaScriptVariant variant) throws Exception {  try {switch (variant) {case external:{        setFileExtension("n4jsd");        Script script=parse(text);        return script;      }case n4js:{      setFileExtension("n4js");      Script script=parse(text);      return script;    }case strict:{    setFileExtension("js");    Script script=parse("\"scrict mode\"\n" + text);    return script;  }case unrestricted:default :{  setFileExtension("js");  Script script=parse(text);  return script;}}}  finally {resourceHelper.setFileExtensionProvider(fileExtensionProvider);}}  }
class C{  @Override public void onEntryAdded(Entry entry){  Log.i(Chart.LOG_TAG,entry.toString());}  }
class C{  @Override public String globalInfo(){  return "BR stacked with feature outputs.\nFor more information see:\n" + getTechnicalInformation().toString();}  }
class C{  public SendableLocationMessage.SendableLocationMessageBuilder replyTo(Message replyTo){  this.replyTo=replyTo != null ? replyTo.getMessageId() : 0;  return this;}  }
class C{  @Override public Boolean isMBInApprovalPendingForWO(final String woNumber){  Boolean result=false;  final Map<String,Object> criteriaMap=new HashMap<String,Object>();  criteriaMap.put(WORKORDER_NO,woNumber);  criteriaMap.put(ACTION_FLAG,"searchWOForMB");  if (searchWO(criteriaMap).isEmpty())   result=true;  return result;}  }
class C{  public Observation(double value,int group){  super();  this.value=value;  this.group=group;}  }
class C{  public static JSONArray toJSONArray(String string) throws JSONException {  return toJSONArray(new XMLTokener(string));}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public static JobReturn runJob(MRJobInstruction inst,String[] inputs,InputInfo[] inputInfos,long[] rlens,long[] clens,int[] brlens,int[] bclens,boolean[] partitioned,PDataPartitionFormat[] pformats,int[] psizes,String recordReaderInstruction,String instructionsInMapper,String aggInstructionsInReducer,String otherInstructionsInReducer,int numReducers,int replication,boolean jvmReuse,byte[] resultIndexes,String dimsUnknownFilePrefix,String[] outputs,OutputInfo[] outputInfos) throws Exception {  JobConf job=new JobConf(GMR.class);  job.setJobName("G-MR");  boolean inBlockRepresentation=MRJobConfiguration.deriveRepresentation(inputInfos);  MRJobConfiguration.setMatrixValueClass(job,inBlockRepresentation);  String[] realinputs=inputs;  InputInfo[] realinputInfos=inputInfos;  long[] realrlens=rlens;  long[] realclens=clens;  int[] realbrlens=brlens;  int[] realbclens=bclens;  byte[] realIndexes=new byte[inputs.length];  for (byte b=0; b < realIndexes.length; b++)   realIndexes[b]=b;  if (recordReaderInstruction != null && !recordReaderInstruction.isEmpty()) {    assert (inputs.length <= 2);    PickByCountInstruction ins=(PickByCountInstruction)PickByCountInstruction.parseInstruction(recordReaderInstruction);    PickFromCompactInputFormat.setKeyValueClasses(job,(Class<? extends WritableComparable>)inputInfos[ins.input1].inputKeyClass,inputInfos[ins.input1].inputValueClass);    job.setInputFormat(PickFromCompactInputFormat.class);    PickFromCompactInputFormat.setZeroValues(job,(NumItemsByEachReducerMetaData)inputInfos[ins.input1].metadata);    if (ins.isValuePick) {      double[] probs=MapReduceTool.readColumnVectorFromHDFS(inputs[ins.input2],inputInfos[ins.input2],rlens[ins.input2],clens[ins.input2],brlens[ins.input2],bclens[ins.input2]);      PickFromCompactInputFormat.setPickRecordsInEachPartFile(job,(NumItemsByEachReducerMetaData)inputInfos[ins.input1].metadata,probs);      realinputs=new String[inputs.length - 1];      realinputInfos=new InputInfo[inputs.length - 1];      realrlens=new long[inputs.length - 1];      realclens=new long[inputs.length - 1];      realbrlens=new int[inputs.length - 1];      realbclens=new int[inputs.length - 1];      realIndexes=new byte[inputs.length - 1];      byte realIndex=0;      for (byte i=0; i < inputs.length; i++) {        if (i == ins.input2)         continue;        realinputs[realIndex]=inputs[i];        realinputInfos[realIndex]=inputInfos[i];        if (i == ins.input1) {          realrlens[realIndex]=rlens[ins.input2];          realclens[realIndex]=clens[ins.input2];          realbrlens[realIndex]=1;          realbclens[realIndex]=1;          realIndexes[realIndex]=ins.output;        } else {          realrlens[realIndex]=rlens[i];          realclens[realIndex]=clens[i];          realbrlens[realIndex]=brlens[i];          realbclens[realIndex]=bclens[i];          realIndexes[realIndex]=i;        }        realIndex++;      }    } else {      PickFromCompactInputFormat.setRangePickPartFiles(job,(NumItemsByEachReducerMetaData)inputInfos[ins.input1].metadata,ins.cst,1 - ins.cst);      realrlens[ins.input1]=UtilFunctions.getLengthForInterQuantile((NumItemsByEachReducerMetaData)inputInfos[ins.input1].metadata,ins.cst);      realclens[ins.input1]=clens[ins.input1];      realbrlens[ins.input1]=1;      realbclens[ins.input1]=1;      realIndexes[ins.input1]=ins.output;    }  }  setupDistributedCache(job,instructionsInMapper,otherInstructionsInReducer,realinputs,realrlens,realclens);  boolean[] distCacheOnly=getDistCacheOnlyInputs(realIndexes,recordReaderInstruction,instructionsInMapper,aggInstructionsInReducer,otherInstructionsInReducer);  MRJobConfiguration.setUpMultipleInputs(job,realIndexes,realinputs,realinputInfos,realbrlens,realbclens,distCacheOnly,true,inBlockRepresentation ? ConvertTarget.BLOCK : ConvertTarget.CELL);  MRJobConfiguration.setInputPartitioningInfo(job,pformats);  MRJobConfiguration.setMatricesDimensions(job,realIndexes,realrlens,realclens);  MRJobConfiguration.setDimsUnknownFilePrefix(job,dimsUnknownFilePrefix);  MRJobConfiguration.setBlocksSizes(job,realIndexes,realbrlens,realbclens);  MRJobConfiguration.setInstructionsInMapper(job,instructionsInMapper);  MRJobConfiguration.setAggregateInstructions(job,aggInstructionsInReducer);  MRJobConfiguration.setInstructionsInReducer(job,otherInstructionsInReducer);  job.setInt(MRConfigurationNames.DFS_REPLICATION,replication);  if (MRJobConfiguration.USE_BINARYBLOCK_SERIALIZATION)   MRJobConfiguration.addBinaryBlockSerializationFramework(job);  DMLConfig config=ConfigurationManager.getDMLConfig();  DMLAppMasterUtils.setupMRJobRemoteMaxMemory(job,config);  MRJobConfiguration.setupCustomMRConfigurations(job,config);  if (jvmReuse)   job.setNumTasksToExecutePerJvm(-1);  HashSet<Byte> mapoutputIndexes=MRJobConfiguration.setUpOutputIndexesForMapper(job,realIndexes,instructionsInMapper,aggInstructionsInReducer,otherInstructionsInReducer,resultIndexes);  MatrixChar_N_ReducerGroups ret=MRJobConfiguration.computeMatrixCharacteristics(job,realIndexes,instructionsInMapper,aggInstructionsInReducer,null,otherInstructionsInReducer,resultIndexes,mapoutputIndexes,false);  MatrixCharacteristics[] stats=ret.stats;  MRJobConfiguration.setNumReducers(job,ret.numReducerGroups,numReducers);  if (LOG.isTraceEnabled())   inst.printCompleteMRJobInstruction(stats);  byte[] dimsUnknown=new byte[resultIndexes.length];  for (int i=0; i < resultIndexes.length; i++) {    if (stats[i].getRows() == -1 || stats[i].getCols() == -1) {      dimsUnknown[i]=(byte)1;    } else {      dimsUnknown[i]=(byte)0;    }  }  MRJobConfiguration.setUpMultipleOutputs(job,resultIndexes,dimsUnknown,outputs,outputInfos,inBlockRepresentation,true);  job.setMapperClass(GMRMapper.class);  if (numReducers == 0) {    job.setMapOutputKeyClass(Writable.class);    job.setMapOutputValueClass(Writable.class);  } else {    job.setMapOutputKeyClass(MatrixIndexes.class);    if (inBlockRepresentation)     job.setMapOutputValueClass(TaggedMatrixBlock.class); else     job.setMapOutputValueClass(TaggedMatrixPackedCell.class);  }  if (numReducers != 0 && aggInstructionsInReducer != null && !aggInstructionsInReducer.isEmpty()) {    job.setCombinerClass(GMRCombiner.class);  }  job.setReducerClass(GMRReducer.class);  MatrixCharacteristics[] inputStats=new MatrixCharacteristics[inputs.length];  for (int i=0; i < inputs.length; i++) {    inputStats[i]=new MatrixCharacteristics(rlens[i],clens[i],brlens[i],bclens[i]);  }  MRJobConfiguration.setUniqueWorkingDir(job);  RunningJob runjob=JobClient.runJob(job);  Group group=runjob.getCounters().getGroup(MRJobConfiguration.NUM_NONZERO_CELLS);  for (int i=0; i < resultIndexes.length; i++) {    stats[i].setNonZeros(group.getCounter(Integer.toString(i)));  }  String dir=dimsUnknownFilePrefix + "/" + runjob.getID().toString()+ "_dimsFile";  stats=MapReduceTool.processDimsFiles(dir,stats);  MapReduceTool.deleteFileIfExistOnHDFS(dir);  return new JobReturn(stats,outputInfos,runjob.isSuccessful());}  }
class C{  public void add(final long timestamp,final T value){  if (log.isInfoEnabled())   log.info("timestamp=" + timestamp + ", value="+ value);  minutes.add(timestamp,value);}  }
class C{  @DELETE @Path("{noteId}") @ZeppelinApi public Response deleteNote(@PathParam("noteId") String noteId) throws IOException {  LOG.info("Delete note {} ",noteId);  AuthenticationInfo subject=new AuthenticationInfo(SecurityUtils.getPrincipal());  if (!(noteId.isEmpty())) {    Note note=notebook.getNote(noteId);    if (note != null) {      notebook.removeNote(noteId,subject);    }  }  notebookServer.broadcastNoteList(subject,SecurityUtils.getRoles());  return new JsonResponse<>(Status.OK,"").build();}  }
class C{  public IMouseState createEdgeLabelHoverState(final EdgeLabel l,final MouseEvent event){  final CEdgeLabelHoverState state=new CEdgeLabelHoverState(this,m_graph,l);  m_factory.createEdgeLabelHoverAction().execute(state,event);  return state;}  }
class C{  public void actionPerformed(ActionEvent e){  if (m_timer == null)   return;  while (m_fifo.size() > 0) {    KeyEvent event=(KeyEvent)m_fifo.removeFirst();    super.dispatchKeyEvent(event);  }}  }
class C{  public NameAndTypeConstant(ConstantPool pool,int index,int nameIndex,int descriptorIndex){  super(pool,index);  _nameIndex=nameIndex;  _descriptorIndex=descriptorIndex;}  }
class C{  public void onStart(){  if (bottomSheetLayout != null) {    viewDestroyed=false;    bottomSheetLayout.showWithSheetView(fragment.getView(),sheetFragmentInterface.getViewTransformer());    bottomSheetLayout.addOnSheetDismissedListener(this);  }}  }
class C{  public static void filterLine(URL self,Writer writer,String charset,@ClosureParams(value=SimpleType.class,options="java.lang.String") Closure predicate) throws IOException {  IOGroovyMethods.filterLine(newReader(self,charset),writer,predicate);}  }
class C{  public ASTNode findNode(CompilationUnit ast){  DOMFinder finder=new DOMFinder(ast,this,false);  try {    return finder.search();  } catch (  JavaModelException e) {    return null;  }}  }
class C{  @Override protected SubCategory iniCustomChildHolder(View childview){  return new SubCategory(childview);}  }
class C{  public void add(double value){  if (Double.isNaN(value)) {    return;  }  int index=findInsertIndex(value);  if (index == -1) {    values.add(value);  } else {    values.add(index,value);  }}  }
class C{  public static boolean isFolderExist(String directoryPath){  if (Handler_String.isBlank(directoryPath)) {    return false;  }  File dire=new File(directoryPath);  return (dire.exists() && dire.isDirectory());}  }
class C{  public static SearchInformation createKeywordSearch(String query,String xml,MediaType media){  return new SearchInformation(KEYWORD,query,xml,media);}  }
class C{  @Override public <C extends Collection<T>>CompletableFuture<C> toCollection(final Supplier<C> collectionFactory){  return CompletableFuture.supplyAsync(null,exec);}  }
class C{  public void inset(float dx,float dy){  left+=dx;  top+=dy;  right-=dx;  bottom-=dy;}  }
class C{  public void testExtraClasspathNotNull() throws Exception {  AbstractInstalledLocalContainer container=new AbstractInstalledLocalContainerStub(configuration);  assertNotNull(container.getExtraClasspath());  assertEquals(0,container.getExtraClasspath().length);}  }
class C{  public EllipticalOrbitAnimation3D(Vector3 focalPoint,Vector3 periapsis,double eccentricity,double angle,OrbitDirection direction){  this(focalPoint,periapsis,Vector3.getAxisVector(Axis.Y),eccentricity,angle,direction);}  }
class C{  public void reset(){  super.reset();  H1=0x6a09e667f3bcc908L;  H2=0xbb67ae8584caa73bL;  H3=0x3c6ef372fe94f82bL;  H4=0xa54ff53a5f1d36f1L;  H5=0x510e527fade682d1L;  H6=0x9b05688c2b3e6c1fL;  H7=0x1f83d9abfb41bd6bL;  H8=0x5be0cd19137e2179L;}  }
class C{  public static MemberExpressionNode generateResolvedGetterSelector(NodeFactory nodeFactory,String namespace,String name){  assert name.intern() == name;  IdentifierNode identifier=generateResolvedIdentifier(nodeFactory,namespace,name);  GetExpressionNode getExpression=nodeFactory.getExpression(identifier);  return nodeFactory.memberExpression(null,getExpression);}  }
class C{  public static String cat(final String[] lines){  final StringBuilder sb=new StringBuilder();  for (  String line : lines) {    sb.append(line).append(StringUtils.LS);  }  return sb.toString();}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case STRING_FIELD:    return isSetString_field();case SET_FIELD:  return isSetSet_field();case LIST_FIELD:return isSetList_field();case BINARY_FIELD:return isSetBinary_field();}throw new IllegalStateException();}  }
class C{  public int nextInt(){  return org.evosuite.runtime.Random.nextInt();}  }
class C{  @Override protected void computeExtremesFromChildren(){  if (!this.childrenCrossDateline()) {    super.computeExtremesFromChildren();    return;  }  this.minx=180f;  this.maxx=-180f;  this.miny=Float.MAX_VALUE;  this.maxy=-Float.MAX_VALUE;  this.crossesDateline=true;  for (  Cell t : this.children) {    if (((GeographicCell)t).isCrossesDateline()) {      if (this.minx > t.minx)       this.minx=t.minx;      if (this.maxx < t.maxx)       this.maxx=t.maxx;    } else {      if (this.minx > t.minx && t.minx > 0f)       this.minx=t.minx;      if (this.maxx < t.maxx && t.maxx < 0f)       this.maxx=t.maxx;      if (t.minx <= 0f && t.maxx >= 0f)       this.minx=this.maxx=0f;    }    if (this.miny > t.miny)     this.miny=t.miny;    if (this.maxy < t.maxy)     this.maxy=t.maxy;  }}  }
class C{  public synchronized void processTicket(Context c,@NonNull SmsMessage m) throws ParseException {  String displayMessageBody=m.getDisplayMessageBody();  if (displayMessageBody == null) {    return;  }  final String message=displayMessageBody.replaceAll("[\n\r]"," ");  DebugLog.i("receiving sms from " + m.getOriginatingAddress() + " with text "+ message);  final List<City> cities=CityManager.get(c).resolveCity(c,m.getOriginatingAddress(),message);  if (cities == null || cities.isEmpty()) {    DebugLog.w("no city recognized");    return;  }  for (  City city : cities) {    final Ticket t;    try {      t=city.parseMessage(message);    } catch (    CannotParseException e) {      Crashlytics.log("Cannot parse message: " + message);      continue;    }    if (!alreadyProcessed(c,t)) {      SmsReceiverService.call(c,t);      if (!Preferences.getBoolean(c,Preferences.KEEP_IN_MESSAGING,false)) {        abortBroadcast();      }      return;    }    DebugLog.i("New sms ticket received but already present in the database. Not doing anything. Ticket " + t);  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case OrientedPackage.PORT__ID:    return getId();case OrientedPackage.PORT__TYPE:  return getType();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public Boolean isFullDuplex(){  return fullDuplex;}  }
class C{  private boolean isMultipleTokenAnnotation(int aBegin,int aEnd){  for (  AnnotationUnit unit : units) {    if (unit.begin > aBegin && unit.begin < aEnd && !unit.isSubtoken) {      return true;    }  }  return false;}  }
class C{  public static SipRequest createBye(SipDialogPath dialog) throws PayloadException {  try {    Request bye=dialog.getStackDialog().createRequest(Request.BYE);    int reasonCode=dialog.getSessionTerminationReasonCode();    if (reasonCode != -1) {      ReasonHeader reasonHeader=SipUtils.HEADER_FACTORY.createReasonHeader("SIP",reasonCode,dialog.getSessionTerminationReasonPhrase());      bye.addHeader(reasonHeader);    }    ViaHeader viaHeader=(ViaHeader)bye.getHeader(ViaHeader.NAME);    viaHeader.setRPort();    return new SipRequest(bye);  } catch (  ParseException|SipException e) {    throw new PayloadException("Can't create SIP message!",e);  }}  }
class C{  public static LatLonPoint MGRStoLL(MGRSPoint mgrsp,Ellipsoid ellip,LatLonPoint llp){  return UTMtoLL(ellip,mgrsp.northing,mgrsp.easting,mgrsp.zone_number,MGRSPoint.MGRSZoneToUTMZone(mgrsp.zone_letter),llp);}  }
class C{  public boolean allowMultipleAdditions(String systemName){  return true;}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  void importFileSystemObjects(List filesToImport) throws CoreException {  Iterator filesEnum=filesToImport.iterator();  while (filesEnum.hasNext()) {    Object fileSystemObject=filesEnum.next();    if (source == null) {      IPath sourcePath=new Path(provider.getFullPath(fileSystemObject)).removeLastSegments(1);      if (provider.isFolder(fileSystemObject) && sourcePath.isEmpty()) {        errorTable.add(new Status(IStatus.INFO,PlatformUI.PLUGIN_ID,0,"DataTransferMessages.ImportOperation_cannotCopy",null));        continue;      }      source=sourcePath.toFile();    }    importRecursivelyFrom(fileSystemObject,POLICY_DEFAULT);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:22.859 -0500",hash_original_method="F09D942FEC4FE9E75A7F8BD6FD9F7E4F",hash_generated_method="27D2FD1D6305D649E1E762CC9C8D67B4") private void checkPixelAccess(int x,int y){  checkXYSign(x,y);  if (x >= getWidth()) {    throw new IllegalArgumentException("x must be < bitmap.width()");  }  if (y >= getHeight()) {    throw new IllegalArgumentException("y must be < bitmap.height()");  }}  }
class C{  public Matrix4d rotation(double angle,Vector3fc axis){  return rotation(angle,axis.x(),axis.y(),axis.z());}  }
class C{  protected Query simplify(BooleanQuery bq){  if (bq.clauses().isEmpty()) {    return null;  } else   if (bq.clauses().size() == 1) {    return bq.clauses().iterator().next().getQuery();  } else {    return bq;  }}  }
class C{  private void removeRollbackSteps(Workflow workflow){  Set<String> rollbackStepIds=new HashSet<String>();  Map<String,Step> stepMap=workflow.getStepMap();  for (  Step step : stepMap.values()) {    if (step.isRollbackStep) {      rollbackStepIds.add(step.stepId);      if (!NullColumnValueGetter.isNullURI(step.workflowStepURI)) {        com.emc.storageos.db.client.model.WorkflowStep dbStep=_dbClient.queryObject(com.emc.storageos.db.client.model.WorkflowStep.class,step.workflowStepURI);        if (dbStep != null)         _dbClient.markForDeletion(dbStep);      }    }  }  for (  String stepId : rollbackStepIds) {    workflow.getStepMap().remove(stepId);    workflow.getStepStatusMap().remove(stepId);    for (    String stepGroup : workflow.getStepGroupMap().keySet()) {      workflow.getStepGroupMap().get(stepGroup).remove(stepId);    }  }}  }
class C{  public void addRequiredImports(Set<DeclaredTypeName> imports){}  }
class C{  public static boolean isBoolean(String str){  if (str.length() < 2)   return false;switch (str.charAt(0)) {case 't':case 'T':    return str.equalsIgnoreCase("true");case 'f':case 'F':  return str.equalsIgnoreCase("false");case 'y':case 'Y':return str.equalsIgnoreCase("yes");case 'n':case 'N':return str.equalsIgnoreCase("no");}return false;}  }
class C{  public NotificationChain basicSetCallee(Expression newCallee,NotificationChain msgs){  Expression oldCallee=callee;  callee=newCallee;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.NEW_EXPRESSION__CALLEE,oldCallee,newCallee);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  protected void saveResultSelection(){  if (m_keyColumnIndex == -1) {    return;  }  if (p_multiSelection) {    int rows=detail.getRowCount();    WBrowserRows browserRows=detail.getData();    m_values=new LinkedHashMap<Integer,LinkedHashMap<String,Object>>();    for (int row=0; row < rows; row++) {      Object data=detail.getModel().getValueAt(row,m_keyColumnIndex);      if (data instanceof IDColumn) {        IDColumn dataColumn=(IDColumn)data;        if (dataColumn.isSelected()) {          LinkedHashMap<String,Object> values=new LinkedHashMap<String,Object>();          for (int col=0; col < browserRows.getColumnCount(); col++) {            MBrowseField bField=browserRows.getBrowserField(col);            if (!bField.isReadOnly() || bField.isIdentifier()) {              GridField gField=(GridField)detail.getData().getValue(row,col);              Object value=gField.getValue();              values.put(bField.getAD_View_Column().getColumnName(),value);            }          }          if (values.size() > 0)           m_values.put(dataColumn.getRecord_ID(),values);        }      }    }  }}  }
class C{  public static <K,V>ConcurrentMap<K,V> newConcurrentMapWithAggressiveConcurrency(){  return new ConcurrentHashMap<>(16,0.75f,aggressiveConcurrencyLevel);}  }
class C{  @Override public Thread newThread(Runnable r){  Thread t=defaultThreadFactory.newThread(r);  if (t != null) {    t.setName(String.format("%s-%s",NAME_PREFIX,t.getName()));  }  return t;}  }
class C{  public int[] variables(){  IntArrayList variables=new IntArrayList();  for (int i=0; i < bitVector.length(); i++)   if (bitVector.getBoolean(i))   variables.add(i);  return variables.toIntArray();}  }
class C{  protected void isEntityReferneceWellFormed(EntityReference node){  if (!isXMLName(node.getNodeName(),fIsXMLVersion11)) {    String msg=Utils.messages.createMessage(MsgKey.ER_WF_INVALID_CHARACTER_IN_NODE_NAME,new Object[]{"EntityReference",node.getNodeName()});    if (fErrorHandler != null) {      fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER_IN_NODE_NAME,null,null,null));    }  }  Node parent=node.getParentNode();  DocumentType docType=node.getOwnerDocument().getDoctype();  if (docType != null) {    NamedNodeMap entities=docType.getEntities();    for (int i=0; i < entities.getLength(); i++) {      Entity ent=(Entity)entities.item(i);      String nodeName=node.getNodeName() == null ? "" : node.getNodeName();      String nodeNamespaceURI=node.getNamespaceURI() == null ? "" : node.getNamespaceURI();      String entName=ent.getNodeName() == null ? "" : ent.getNodeName();      String entNamespaceURI=ent.getNamespaceURI() == null ? "" : ent.getNamespaceURI();      if (parent.getNodeType() == Node.ELEMENT_NODE) {        if (entNamespaceURI.equals(nodeNamespaceURI) && entName.equals(nodeName)) {          if (ent.getNotationName() != null) {            String msg=Utils.messages.createMessage(MsgKey.ER_WF_REF_TO_UNPARSED_ENT,new Object[]{node.getNodeName()});            if (fErrorHandler != null) {              fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_REF_TO_UNPARSED_ENT,null,null,null));            }          }        }      }      if (parent.getNodeType() == Node.ATTRIBUTE_NODE) {        if (entNamespaceURI.equals(nodeNamespaceURI) && entName.equals(nodeName)) {          if (ent.getPublicId() != null || ent.getSystemId() != null || ent.getNotationName() != null) {            String msg=Utils.messages.createMessage(MsgKey.ER_WF_REF_TO_EXTERNAL_ENT,new Object[]{node.getNodeName()});            if (fErrorHandler != null) {              fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_REF_TO_EXTERNAL_ENT,null,null,null));            }          }        }      }    }  }}  }
class C{  protected String generateStandaloneConfigurationText(String containerId,ContainerType type){  StringBuilder output=new StringBuilder();  if (this.configurationFactory.isConfigurationRegistered(containerId,type,ConfigurationType.STANDALONE)) {    output.append("| [Standalone Local Configuration for " + type.getType() + " container|Standalone Local Configuration] | ");    output.append("(/) {{" + computedFQCN(this.configurationFactory.getConfigurationClass(containerId,type,ConfigurationType.STANDALONE).getName()) + "}} | (/) | (/) | |");  } else {    output.append("| [Standalone Local Configuration for " + type.getType() + " container|Standalone Local Configuration] | (x) | (x) | (x) | |");  }  return output.toString();}  }
class C{  public int compare(IWorkingSet w1,IWorkingSet w2){  if (fIsOtherWorkingSetOnTop && IWorkingSetIDs.OTHERS.equals(w1.getId()))   return -1;  if (fIsOtherWorkingSetOnTop && IWorkingSetIDs.OTHERS.equals(w2.getId()))   return 1;  return fCollator.compare(w1.getLabel(),w2.getLabel());}  }
class C{  int processZoneinfo(Timezone tz){  try {    int size;    int index;    String outputDir=Main.getOutputDir();    String zonename=tz.getName();    String zonefile=ZoneInfoFile.getFileName(zonename) + ".html";    List<RuleRec> stz=tz.getLastRules();    timezoneList.put(zonename,zonefile);    displayNameList.put(transform(zonename),zonename);    int lastKnownOffset=tz.getRawOffset();    Set<String> set=zonesByOffset.get(lastKnownOffset);    if (set == null) {      set=new TreeSet<String>();      zonesByOffset.put(lastKnownOffset,set);    }    set.add(zonename);    if (!outputDir.endsWith(File.separator)) {      outputDir+=File.separatorChar;    }    outputDir+=docDir + File.separatorChar;    index=zonename.indexOf('/');    if (index != -1) {      regionList.put(zonename.substring(0,index),zonename.substring(0,index) + ".html");    }    index=zonefile.lastIndexOf('/');    if (index != -1) {      zonefile.replace('/',File.separatorChar);      outputDir+=zonefile.substring(0,index + 1);    }    File outD=new File(outputDir);    outD.mkdirs();    if ((mapList == null) && (Main.getMapFile() != null)) {      FileReader fr=new FileReader(Main.getMapFile());      BufferedReader in=new BufferedReader(fr);      mapList=new HashMap<String,LatitudeAndLongitude>();      String line;      while ((line=in.readLine()) != null) {        if (line.length() == 0 || line.charAt(0) == '#') {          continue;        }        StringTokenizer tokens=new StringTokenizer(line);        String token=tokens.nextToken();        token=tokens.nextToken();        LatitudeAndLongitude location=new LatitudeAndLongitude(token);        token=tokens.nextToken();        mapList.put(token,location);      }      in.close();    }    FileWriter fw=new FileWriter(outputDir + zonefile.substring(index + 1));    BufferedWriter out=new BufferedWriter(fw);    out.write(header1 + new Date() + header3+ zonename+ header4);    out.write(body1 + "<FONT size=\"+2\"><B>" + zonename+ "</B></FONT>");    LatitudeAndLongitude location=mapList.get(zonename);    if (location != null) {      int deg, min, sec;      deg=location.getLatDeg();      min=location.getLatMin();      sec=location.getLatSec();      if (deg < 0) {        min=-min;        sec=-sec;      } else       if (min < 0) {        sec=-sec;      }      out.write("&nbsp;&nbsp;&nbsp;" + "<A HREF=\"http://www.mapquest.com/maps/map.adp?" + "latlongtype=degrees"+ "&latdeg=" + deg + "&latmin="+ min+ "&latsec="+ sec);      deg=location.getLongDeg();      min=location.getLongMin();      sec=location.getLongSec();      if (deg < 0) {        min=-min;        sec=-sec;      } else       if (min < 0) {        sec=-sec;      }      out.write("&longdeg=" + deg + "&longmin="+ min+ "&longsec="+ sec+ "\" target=\"_blank\">[map]</A>");    }    out.write("\n<P>\n");    List<ZoneRec> zone=tz.getZones();    List<RuleRec> rule=tz.getRules();    if (rule != null && zone != null) {      out.write("<TABLE BORDER=\"0\" WIDTH=\"100%\" CELLPADDING=\"1\" CELLSPACING=\"0\">\n" + "<TR>\n" + "<TD BGCOLOR=\"#EEEEFF\" WIDTH=\"50%\" ALIGN=\"CENTER\"><BR>"+ "<A HREF=\"#Rules\">Rules</A><BR></TD>\n"+ "<TD BGCOLOR=\"#EEEEFF\" WIDTH=\"50%\" ALIGN=\"CENTER\">"+ "<A HREF=\"#Zone\"><BR>Zone<BR></A></TD>\n"+ "</TR>\n</TABLE>\n");    }    if (rule != null) {      size=rule.size();      out.write("<P>\n<A NAME=\"Rules\">" + "<FONT SIZE=\"+1\"><B>Rules</B></FONT></A>\n" + "<TABLE BORDER=\"1\" WIDTH=\"100%\" CELLPADDING=\"3\" CELLSPACING=\"0\">\n"+ "<TR BGCOLOR=\"#CCCCFF\">\n"+ "<TD>NAME</TD><TD>FROM</TD><TD>TO</TD><TD>TYPE</TD>"+ "<TD>IN</TD><TD>ON</TD><TD>AT</TD><TD>SAVE</TD>"+ "<TD>LETTER/S</TD><TD>NOTES</TD>\n</TR>\n");      for (int i=0; i < size; i++) {        out.write("<TR BGCOLOR=\"#FFFFFF\">\n");        StringTokenizer st=new StringTokenizer(rule.get(i).getLine());        String s;        if (st.hasMoreTokens()) {          st.nextToken();        }        if (st.hasMoreTokens()) {          out.write("<TD>" + st.nextToken() + "</TD>");        }        if (st.hasMoreTokens()) {          out.write("<TD>" + st.nextToken() + "</TD>");        }        if (st.hasMoreTokens()) {          s=st.nextToken();          if (s.equals("min") || s.equals("max")) {            out.write("<TD><FONT COLOR=\"red\">" + s + "</FONT></TD>");          } else {            out.write("<TD>" + s + "</TD>");          }        }        if (st.hasMoreTokens()) {          out.write("<TD>" + st.nextToken() + "</TD>");        }        if (st.hasMoreTokens()) {          out.write("<TD>" + st.nextToken() + "</TD>");        }        if (st.hasMoreTokens()) {          out.write("<TD>" + st.nextToken() + "</TD>");        }        if (st.hasMoreTokens()) {          out.write("<TD>" + st.nextToken() + "</TD>");        }        if (st.hasMoreTokens()) {          out.write("<TD>" + st.nextToken() + "</TD>");        }        if (st.hasMoreTokens()) {          out.write("<TD>" + st.nextToken() + "</TD>");        }        if (st.hasMoreTokens()) {          s=st.nextToken();          while (st.hasMoreTokens()) {            s+=" " + st.nextToken();          }          index=s.indexOf('#');          out.write("<TD>" + s.substring(index + 1) + "</TD>\n");        } else {          out.write("<TD>&nbsp;</TD>\n");        }        out.write("</TR>\n");      }      out.write("</TABLE>\n<P>&nbsp;<P>\n");    }    if (zone != null) {      size=zone.size();      out.write("<P>\n<A NAME=\"Zone\">" + "<FONT SIZE=\"+1\"><B>Zone</B></FONT></A>\n" + "<TABLE BORDER=\"1\" WIDTH=\"100%\" CELLPADDING=\"3\" CELLSPACING=\"0\">\n"+ "<TR BGCOLOR=\"#CCCCFF\">\n<TD>GMTOFF</TD>"+ "<TD>RULES</TD><TD>FORMAT</TD><TD>UNTIL</TD>"+ "<TD>NOTES</TD>\n</TR>\n");      for (int i=0; i < size; i++) {        out.write("<TR>\n");        StringTokenizer st=new StringTokenizer(zone.get(i).getLine());        String s=st.nextToken();        if (s.equals("Zone")) {          s=st.nextToken();          s=st.nextToken();        }        out.write("<TD>" + s + "</TD>");        if (st.hasMoreTokens()) {          out.write("<TD>" + st.nextToken() + "</TD>");        }        if (st.hasMoreTokens()) {          s=st.nextToken();          index=s.indexOf('#');          if (index != -1) {            if (index != 0) {              out.write("<TD>" + s.substring(0,index - 1) + "</TD>");              s=s.substring(index + 1);            } else {              out.write("<TD>&nbsp;</TD>");            }            while (st.hasMoreTokens()) {              s+=" " + st.nextToken();            }            out.write("<TD>&nbsp;</TD>");            out.write("<TD>" + s + "</TD>\n</TR>\n");            continue;          } else {            out.write("<TD>" + s + "</TD>");          }        }        if (st.hasMoreTokens()) {          s=st.nextToken();          while (st.hasMoreTokens()) {            s+=" " + st.nextToken();          }          index=s.indexOf('#');          if (index != -1) {            if (index != 0) {              out.write("<TD>" + s.substring(0,index - 1) + "</TD>");            } else {              out.write("<TD>&nbsp;</TD>");            }            out.write("<TD>" + s.substring(index + 1) + "</TD>\n");          } else {            out.write("<TD>" + s + "</TD>");            out.write("<TD>&nbsp;</TD>\n");          }        } else {          out.write("<TD>&nbsp;</TD>");          out.write("<TD>&nbsp;</TD>\n");        }        out.write("</TR>\n");      }      out.write("</TABLE>\n");    }    out.write(body2 + footer);    out.close();    fw.close();  } catch (  IOException e) {    Main.panic("IO error: " + e.getMessage());    return 1;  }  return 0;}  }
class C{  public String serialize(Object object) throws ConverterException {  deep=0;  StringBuilder sb=new StringBuilder();  deep++;  sb.append(_serialize(object,new HashMap<Object,String>()));  deep--;  return sb.toString();}  }
class C{  public FrameBuffer(int width,int height){  if (((EGL10)EGLContext.getEGL()).eglGetCurrentContext().equals(EGL10.EGL_NO_CONTEXT)) {    throw new IllegalStateException("There is no EGLContext");  }  mWidth=width;  mHeight=height;  mFBOIds=new int[1];  mColorTextureIds=new int[1];  mDepthTextureIds=new int[1];  GLES20.glGenFramebuffers(1,mFBOIds,0);  GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER,mFBOIds[0]);  GLES20.glGenTextures(1,mColorTextureIds,0);  GLES20.glBindTexture(GLES20.GL_TEXTURE_2D,mColorTextureIds[0]);  GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_MIN_FILTER,GLES20.GL_NEAREST);  GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_MAG_FILTER,GLES20.GL_NEAREST);  GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_WRAP_S,GLES20.GL_CLAMP_TO_EDGE);  GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_WRAP_T,GLES20.GL_CLAMP_TO_EDGE);  GLES20.glTexImage2D(GLES20.GL_TEXTURE_2D,0,GLES20.GL_RGBA,width,height,0,GLES20.GL_RGBA,GLES20.GL_UNSIGNED_BYTE,null);  GLES20.glBindTexture(GLES20.GL_TEXTURE_2D,0);  GLES20.glGenTextures(1,mDepthTextureIds,0);  GLES20.glBindTexture(GLES20.GL_TEXTURE_2D,mDepthTextureIds[0]);  GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_MIN_FILTER,GLES20.GL_NEAREST);  GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_MAG_FILTER,GLES20.GL_NEAREST);  GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_WRAP_S,GLES20.GL_CLAMP_TO_EDGE);  GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_WRAP_T,GLES20.GL_CLAMP_TO_EDGE);  GLES20.glTexImage2D(GLES20.GL_TEXTURE_2D,0,GLES20.GL_DEPTH_COMPONENT,width,height,0,GLES20.GL_DEPTH_COMPONENT,GLES20.GL_UNSIGNED_SHORT,null);  GLES20.glBindTexture(GLES20.GL_TEXTURE_2D,0);  GLES20.glFramebufferTexture2D(GLES20.GL_FRAMEBUFFER,GLES20.GL_COLOR_ATTACHMENT0,GLES20.GL_TEXTURE_2D,mColorTextureIds[0],0);  GLES20.glFramebufferTexture2D(GLES20.GL_FRAMEBUFFER,GLES20.GL_DEPTH_ATTACHMENT,GLES20.GL_TEXTURE_2D,mDepthTextureIds[0],0);  if (GLES20.glCheckFramebufferStatus(GLES20.GL_FRAMEBUFFER) != GLES20.GL_FRAMEBUFFER_COMPLETE) {    throw new RuntimeException("Create GL Framebuffer of shadow failed.");  }  GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER,0);}  }
class C{  public static void drawSplitString(FontRenderer fontRenderer,String string,int x,int y,int width,int colour){  fontRenderer.resetStyles();  fontRenderer.textColor=colour;  List<String> list=fontRenderer.listFormattedStringToWidth(string,width);  FloatBuffer currentGLColor=BufferUtils.createFloatBuffer(16);  int line=0;  for (Iterator<String> iterator=list.iterator(); iterator.hasNext(); y+=fontRenderer.FONT_HEIGHT) {    String next=iterator.next();    if (line > 0) {      int currentColour=fontRenderer.textColor;      GL11.glGetFloat(GL11.GL_CURRENT_COLOR,currentGLColor);      int glColourRGBA=((int)(currentGLColor.get(0) * 255) << 16) + ((int)(currentGLColor.get(1) * 255) << 8) + ((int)(currentGLColor.get(2) * 255));      if (glColourRGBA != currentColour) {        int j=0;        for (; j < fontRenderer.colorCode.length; j++)         if (fontRenderer.colorCode[j] == glColourRGBA) {          String code=Integer.toHexString(j % 16);          next='\u00a7' + code + next;          break;        }      }    }    fontRenderer.drawString(next,x,y,colour,false);  }}  }
class C{  public int diff_commonSuffix(String text1,String text2){  int text1_length=text1.length();  int text2_length=text2.length();  int n=Math.min(text1_length,text2_length);  for (int i=1; i <= n; i++) {    if (text1.charAt(text1_length - i) != text2.charAt(text2_length - i)) {      return i - 1;    }  }  return n;}  }
class C{  void unlaunch(){  if (server != null) {    server.die();    server=null;  }  frame.setVisible(true);  client=null;  System.gc();  System.runFinalization();}  }
class C{  private void sumOfAttendees(){  List<Integer> attendees=Arrays.asList(22,10,13,9);  Optional<Integer> totalAttendees=attendees.stream().reduce(null);  int total=totalAttendees.isPresent() ? totalAttendees.get() : 0;  System.out.println("Total attendees: " + total);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof StackedBarRenderer3D)) {    return false;  }  StackedBarRenderer3D that=(StackedBarRenderer3D)obj;  if (this.renderAsPercentages != that.getRenderAsPercentages()) {    return false;  }  if (this.ignoreZeroValues != that.ignoreZeroValues) {    return false;  }  return super.equals(obj);}  }
class C{  final boolean load(int offset,boolean changeEntity) throws IOException {  int length=fCurrentEntity.mayReadChunks ? (fCurrentEntity.ch.length - offset) : (DEFAULT_XMLDECL_BUFFER_SIZE);  int count=fCurrentEntity.reader.read(fCurrentEntity.ch,offset,length);  boolean entityChanged=false;  if (count != -1) {    if (count != 0) {      fCurrentEntity.count=count + offset;      fCurrentEntity.position=offset;    }  } else {    fCurrentEntity.count=offset;    fCurrentEntity.position=offset;    entityChanged=true;    if (changeEntity) {      endEntity();      if (fCurrentEntity == null) {        throw new EOFException();      }      if (fCurrentEntity.position == fCurrentEntity.count) {        load(0,false);      }    }  }  return entityChanged;}  }
class C{  private static HttpHost[] toChain(HttpHost[] proxies){  if ((proxies == null) || (proxies.length < 1))   return null;  for (  HttpHost proxy : proxies) {    if (proxy == null)     throw new IllegalArgumentException("Proxy chain may not contain null elements.");  }  HttpHost[] result=new HttpHost[proxies.length];  System.arraycopy(proxies,0,result,0,proxies.length);  return result;}  }
class C{  public static ContestDetailFragment newInstance(Uri contestUri){  ContestDetailFragment fragment=new ContestDetailFragment();  Bundle args=new Bundle();  args.putParcelable(CONTEST_DETAIL_URI,contestUri);  fragment.setArguments(args);  return fragment;}  }
class C{  @Override public void clear(){  prepare(null);}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public static Position fromDegrees(double latitudeDegrees,double longitudeDegrees,double altitude){  Position pos=new Position();  pos.latitude=latitudeDegrees;  pos.longitude=longitudeDegrees;  pos.altitude=altitude;  return pos;}  }
class C{  public boolean canDecreaseTimer(){  return timer > 0;}  }
class C{  @Override public void addWithPackedColor(final ITextureRegion pTextureRegion,final float pX1,final float pY1,final float pX2,final float pY2,final float pX3,final float pY3,final float pX4,final float pY4,final float pColorABGRPackedInt){  final float[] bufferData=this.getBufferData();  final int bufferDataOffset=this.mBufferDataOffset;  final float x1=pX1;  final float y1=pY1;  final float x2=pX2;  final float y2=pY2;  final float x3=pX3;  final float y3=pY3;  final float x4=pX4;  final float y4=pY4;  final float u=pTextureRegion.getU();  final float v=pTextureRegion.getV();  final float u2=pTextureRegion.getU2();  final float v2=pTextureRegion.getV2();  if (pTextureRegion.isRotated()) {    bufferData[bufferDataOffset + 0 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X]=x1;    bufferData[bufferDataOffset + 0 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y]=y1;    bufferData[bufferDataOffset + 0 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX]=pColorABGRPackedInt;    bufferData[bufferDataOffset + 0 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U]=u;    bufferData[bufferDataOffset + 0 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V]=v;    bufferData[bufferDataOffset + 1 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X]=x2;    bufferData[bufferDataOffset + 1 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y]=y2;    bufferData[bufferDataOffset + 1 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX]=pColorABGRPackedInt;    bufferData[bufferDataOffset + 1 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U]=u2;    bufferData[bufferDataOffset + 1 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V]=v;    bufferData[bufferDataOffset + 2 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X]=x3;    bufferData[bufferDataOffset + 2 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y]=y3;    bufferData[bufferDataOffset + 2 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX]=pColorABGRPackedInt;    bufferData[bufferDataOffset + 2 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U]=u;    bufferData[bufferDataOffset + 2 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V]=v2;    bufferData[bufferDataOffset + 3 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X]=x3;    bufferData[bufferDataOffset + 3 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y]=y3;    bufferData[bufferDataOffset + 3 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX]=pColorABGRPackedInt;    bufferData[bufferDataOffset + 3 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U]=u;    bufferData[bufferDataOffset + 3 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V]=v2;    bufferData[bufferDataOffset + 4 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X]=x2;    bufferData[bufferDataOffset + 4 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y]=y2;    bufferData[bufferDataOffset + 4 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX]=pColorABGRPackedInt;    bufferData[bufferDataOffset + 4 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U]=u2;    bufferData[bufferDataOffset + 4 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V]=v;    bufferData[bufferDataOffset + 5 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X]=x4;    bufferData[bufferDataOffset + 5 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y]=y4;    bufferData[bufferDataOffset + 5 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX]=pColorABGRPackedInt;    bufferData[bufferDataOffset + 5 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U]=u2;    bufferData[bufferDataOffset + 5 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V]=v2;  } else {    bufferData[bufferDataOffset + 0 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X]=x1;    bufferData[bufferDataOffset + 0 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y]=y1;    bufferData[bufferDataOffset + 0 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX]=pColorABGRPackedInt;    bufferData[bufferDataOffset + 0 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U]=u;    bufferData[bufferDataOffset + 0 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V]=v2;    bufferData[bufferDataOffset + 1 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X]=x2;    bufferData[bufferDataOffset + 1 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y]=y2;    bufferData[bufferDataOffset + 1 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX]=pColorABGRPackedInt;    bufferData[bufferDataOffset + 1 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U]=u;    bufferData[bufferDataOffset + 1 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V]=v;    bufferData[bufferDataOffset + 2 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X]=x3;    bufferData[bufferDataOffset + 2 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y]=y3;    bufferData[bufferDataOffset + 2 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX]=pColorABGRPackedInt;    bufferData[bufferDataOffset + 2 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U]=u2;    bufferData[bufferDataOffset + 2 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V]=v2;    bufferData[bufferDataOffset + 3 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X]=x3;    bufferData[bufferDataOffset + 3 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y]=y3;    bufferData[bufferDataOffset + 3 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX]=pColorABGRPackedInt;    bufferData[bufferDataOffset + 3 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U]=u2;    bufferData[bufferDataOffset + 3 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V]=v2;    bufferData[bufferDataOffset + 4 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X]=x2;    bufferData[bufferDataOffset + 4 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y]=y2;    bufferData[bufferDataOffset + 4 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX]=pColorABGRPackedInt;    bufferData[bufferDataOffset + 4 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U]=u;    bufferData[bufferDataOffset + 4 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V]=v;    bufferData[bufferDataOffset + 5 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X]=x4;    bufferData[bufferDataOffset + 5 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y]=y4;    bufferData[bufferDataOffset + 5 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX]=pColorABGRPackedInt;    bufferData[bufferDataOffset + 5 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U]=u2;    bufferData[bufferDataOffset + 5 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V]=v;  }  this.mBufferDataOffset+=SpriteBatch.SPRITE_SIZE;}  }
class C{  protected String encode(final String value){  return UriUtils.encode(value);}  }
class C{  public void dispose(){  Landscape.getInstance().dispose();  lighting.dispose();  if (ruler != null)   CoordAction.listenerList.remove(ruler);}  }
class C{  public void playSequentially(Animator... items){  if (items != null) {    mNeedsSort=true;    if (items.length == 1) {      play(items[0]);    } else {      for (int i=0; i < items.length - 1; ++i) {        play(items[i]).before(items[i + 1]);      }    }  }}  }
class C{  private void prepareRPVplexConsistencyGroupData() throws Exception {  String cg1Name="rpVplexCg";  BlockConsistencyGroup rpVplexCg=createBlockConsistencyGroup(cg1Name,null,Types.RP.name(),true);  rpVplexPrimaryConsistencyGroupURI=rpVplexCg.getId();  ProtectionSet rpVplexProtectionSet=createProtectionSet(cg1Name,projectURI);  List<Volume> rpVplexVolumes=createRpVolumes("rpVplexCgVolume1",1,rpVplexProtectionSet,true);  rpVplexVolumes.addAll(createRpVolumes("rpVplexCgVolume2",1,rpVplexProtectionSet,true));  addVolumesToBlockConsistencyGroup(rpVplexCg.getId(),rpVplexVolumes);  addVolumesToProtectionSet(rpVplexProtectionSet.getId(),rpVplexVolumes);}  }
class C{  public static @CheckForNull BugCollection redoAnalysisKeepComments(@Nonnull Project p){  requireNonNull(p,"null project");  BugCollection current=MainFrame.getInstance().getBugCollection();  Update update=new Update();  RedoAnalysisCallback ac=new RedoAnalysisCallback();  AnalyzingDialog.show(p,ac,true);  if (!ac.finished) {    return null;  }  if (current == null) {    current=ac.getBugCollection();  } else {    current=update.mergeCollections(current,ac.getBugCollection(),true,false);    if (current.hasDeadBugs()) {      addDeadBugMatcher(current);    }  }  return current;}  }
class C{  public ResolveUrls(String urlsFile,int numThreads){  this.urlsFile=urlsFile;  this.numThreads=numThreads;}  }
class C{  public synchronized boolean markTaskCompleted(int taskId){  Job job=getJobForTask(taskId);  if (job == null) {    LOG.error("Could not find a job containing task {}, and therefore could not mark the task as completed.",taskId);    return false;  }  job.completedTasks.add(taskId);  return true;}  }
class C{  public static void main(String args[]) throws Exception {  String expression=args[0];  BufferedReader reader=new BufferedReader(new FileReader(args[1]));  Instances input=new Instances(reader);  reader.close();  if (args[2].equals("first"))   input.setClassIndex(0); else   if (args[2].equals("last"))   input.setClassIndex(input.numAttributes() - 1); else   input.setClassIndex(Integer.parseInt(args[2]) - 1);  Instances output=filter(expression,input);  BufferedWriter writer=new BufferedWriter(new FileWriter(args[3]));  writer.write(new Instances(output,0).toString());  writer.newLine();  for (int i=0; i < output.numInstances(); i++) {    writer.write(output.instance(i).toString());    writer.newLine();  }  writer.flush();  writer.close();}  }
class C{  public AclImpl(PrincipalImpl owner,String name){  super(owner);  entryList=new Vector<>();  aclName=name;}  }
class C{  public void readListEnd() throws IOException {  int code=_offset < _length ? (_buffer[_offset++] & 0xff) : read();  if (code != 'Z')   throw error("expected end of list ('Z') at '" + codeName(code) + "'");}  }
class C{  public int next(final int prev){  if (prev < 0 || prev >= m_max)   throw new IllegalArgumentException();  m_next=prev + 1;  return next();}  }
class C{  private void ruleR6R7(){  List<Node> nodes=graph.getNodes();  for (  Node b : nodes) {    List<Node> adjacents=graph.getAdjacentNodes(b);    if (adjacents.size() < 2)     continue;    ChoiceGenerator cg=new ChoiceGenerator(adjacents.size(),2);    for (int[] choice=cg.next(); choice != null; choice=cg.next()) {      Node a=adjacents.get(choice[0]);      Node c=adjacents.get(choice[1]);      if (graph.isAdjacentTo(a,c))       continue;      if (!(graph.getEndpoint(b,a) == Endpoint.TAIL))       continue;      if (!(graph.getEndpoint(c,b) == Endpoint.CIRCLE))       continue;      if (graph.getEndpoint(a,b) == Endpoint.TAIL) {        graph.setEndpoint(c,b,Endpoint.TAIL);        logger.log("impliedOrientations",SearchLogUtils.edgeOrientedMsg("Single tails (tail)",graph.getEdge(c,b)));        changeFlag=true;      }      if (graph.getEndpoint(a,b) == Endpoint.CIRCLE) {        logger.log("impliedOrientations",SearchLogUtils.edgeOrientedMsg("Single tails (tail)",graph.getEdge(c,b)));        graph.setEndpoint(c,b,Endpoint.TAIL);        changeFlag=true;      }    }  }}  }
class C{  public static void main(String[] a){  PrintStream out=System.out;  FastMathCalc.printarray(out,"EXP_INT_TABLE_A",EXP_INT_TABLE_LEN,ExpIntTable.EXP_INT_TABLE_A);  FastMathCalc.printarray(out,"EXP_INT_TABLE_B",EXP_INT_TABLE_LEN,ExpIntTable.EXP_INT_TABLE_B);  FastMathCalc.printarray(out,"EXP_FRAC_TABLE_A",EXP_FRAC_TABLE_LEN,ExpFracTable.EXP_FRAC_TABLE_A);  FastMathCalc.printarray(out,"EXP_FRAC_TABLE_B",EXP_FRAC_TABLE_LEN,ExpFracTable.EXP_FRAC_TABLE_B);  FastMathCalc.printarray(out,"LN_MANT",LN_MANT_LEN,lnMant.LN_MANT);  FastMathCalc.printarray(out,"SINE_TABLE_A",SINE_TABLE_LEN,SINE_TABLE_A);  FastMathCalc.printarray(out,"SINE_TABLE_B",SINE_TABLE_LEN,SINE_TABLE_B);  FastMathCalc.printarray(out,"COSINE_TABLE_A",SINE_TABLE_LEN,COSINE_TABLE_A);  FastMathCalc.printarray(out,"COSINE_TABLE_B",SINE_TABLE_LEN,COSINE_TABLE_B);  FastMathCalc.printarray(out,"TANGENT_TABLE_A",SINE_TABLE_LEN,TANGENT_TABLE_A);  FastMathCalc.printarray(out,"TANGENT_TABLE_B",SINE_TABLE_LEN,TANGENT_TABLE_B);}  }
class C{  public static String encodeBase64URLSafeString(final byte[] binaryData){  return newStringUtf8(encodeBase64(binaryData,false,true));}  }
class C{  final public int compareTo(final CharSequence s){  final int l1=length();  final int l2=s.length();  final int n=l1 < l2 ? l1 : l2;  final char[] a=array;  for (int i=0; i < n; i++)   if (a[i] != s.charAt(i))   return a[i] - s.charAt(i);  return l1 - l2;}  }
class C{  GridClientComputeImpl(GridClientImpl client,Collection<GridClientNode> nodes,GridClientPredicate<? super GridClientNode> nodeFilter,GridClientLoadBalancer balancer){  super(client,nodes,nodeFilter,balancer);}  }
class C{  static BitArray interleaveWithECBytes(BitArray bits,int numTotalBytes,int numDataBytes,int numRSBlocks) throws WriterException {  if (bits.getSizeInBytes() != numDataBytes) {    throw new WriterException("Number of bits and data bytes does not match");  }  int dataBytesOffset=0;  int maxNumDataBytes=0;  int maxNumEcBytes=0;  Collection<BlockPair> blocks=new ArrayList<BlockPair>(numRSBlocks);  for (int i=0; i < numRSBlocks; ++i) {    int[] numDataBytesInBlock=new int[1];    int[] numEcBytesInBlock=new int[1];    getNumDataBytesAndNumECBytesForBlockID(numTotalBytes,numDataBytes,numRSBlocks,i,numDataBytesInBlock,numEcBytesInBlock);    int size=numDataBytesInBlock[0];    byte[] dataBytes=new byte[size];    bits.toBytes(8 * dataBytesOffset,dataBytes,0,size);    byte[] ecBytes=generateECBytes(dataBytes,numEcBytesInBlock[0]);    blocks.add(new BlockPair(dataBytes,ecBytes));    maxNumDataBytes=Math.max(maxNumDataBytes,size);    maxNumEcBytes=Math.max(maxNumEcBytes,ecBytes.length);    dataBytesOffset+=numDataBytesInBlock[0];  }  if (numDataBytes != dataBytesOffset) {    throw new WriterException("Data bytes does not match offset");  }  BitArray result=new BitArray();  for (int i=0; i < maxNumDataBytes; ++i) {    for (    BlockPair block : blocks) {      byte[] dataBytes=block.getDataBytes();      if (i < dataBytes.length) {        result.appendBits(dataBytes[i],8);      }    }  }  for (int i=0; i < maxNumEcBytes; ++i) {    for (    BlockPair block : blocks) {      byte[] ecBytes=block.getErrorCorrectionBytes();      if (i < ecBytes.length) {        result.appendBits(ecBytes[i],8);      }    }  }  if (numTotalBytes != result.getSizeInBytes()) {    throw new WriterException("Interleaving error: " + numTotalBytes + " and "+ result.getSizeInBytes()+ " differ.");  }  return result;}  }
class C{  public void paintLabelBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public static CharSequence stripIllegalOperators(CharSequence s){  String temp=CONSECUTIVE_OP_PATTERN.matcher(s).replaceAll(" ");  return DANGLING_OP_PATTERN.matcher(temp).replaceAll("");}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void main(String[] args){  weka.core.logging.Logger.log(weka.core.logging.Logger.Level.INFO,"Logging started");  LookAndFeel.setLookAndFeel();  JFrame jf=new JFrame("Bayes Network Editor");  final GUI g=new GUI();  JMenuBar menuBar=g.getMenuBar();  if (args.length > 0) {    try {      g.readBIFFromFile(args[0]);    } catch (    IOException ex) {      ex.printStackTrace();    }catch (    BIFFormatException bf) {      bf.printStackTrace();      System.exit(-1);    }  }  jf.setJMenuBar(menuBar);  jf.getContentPane().add(g);  jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  jf.setSize(800,600);  jf.setVisible(true);  g.m_Selection.updateGUI();  GenericObjectEditor.registerEditors();}  }
class C{  protected synchronized boolean add(T obj,Comparator<? super T> comp){  if (size() == 0) {    return super.add(obj);  }  int index;  index=comp == null ? Collections.binarySearch(this,obj) : Collections.binarySearch(this,obj,comp);  if (index < 0) {    int insertionPoint=-index - 1;    if (insertionPoint >= size()) {      super.add(obj);    } else {      super.add(insertionPoint,obj);    }  }  return index < 0;}  }
class C{  public TimeOffset subtract(final TimeOffset offset){  return new TimeOffset(this.getRaw() - offset.getRaw());}  }
class C{  public MultiThreadQuickSort(E ar[]){  this.ar=ar;  threshold=ar.length / ratio;  helpersWorking=0;}  }
class C{  public Href path(final Object suffix){  return new Href(URI.create(new StringBuilder(Href.TRAILING_SLASH.matcher(this.uri.toString()).replaceAll("")).append('/').append(Href.encode(suffix.toString())).toString()),this.params);}  }
class C{  public String calculateFromBytes(byte[] data) throws Exception {  String algoId=getAlgorithmId(algoURI);  byte[] hashBytes=calculateDigest(algoId,data);  return encodeBase64(hashBytes);}  }
class C{  @Inject RevisionsImporterImpl(EntryUpdater entryUpdater,EntryUploader entryUploader,PageParser pageParser,RelativeLinkConverter linkConverter){  this.entryUpdater=checkNotNull(entryUpdater);  this.entryUploader=checkNotNull(entryUploader);  this.pageParser=checkNotNull(pageParser);  this.linkConverter=checkNotNull(linkConverter);}  }
class C{  public int decode(String data,OutputStream out) throws IOException {  byte b1, b2, b3, b4;  int length=0;  int end=data.length();  while (end > 0) {    if (!ignore(data.charAt(end - 1))) {      break;    }    end--;  }  int i=0;  int finish=end - 4;  i=nextI(data,i,finish);  while (i < finish) {    b1=decodingTable[data.charAt(i++)];    i=nextI(data,i,finish);    b2=decodingTable[data.charAt(i++)];    i=nextI(data,i,finish);    b3=decodingTable[data.charAt(i++)];    i=nextI(data,i,finish);    b4=decodingTable[data.charAt(i++)];    if ((b1 | b2 | b3| b4) < 0) {      throw new IOException("invalid characters encountered in base64 data");    }    out.write((b1 << 2) | (b2 >> 4));    out.write((b2 << 4) | (b3 >> 2));    out.write((b3 << 6) | b4);    length+=3;    i=nextI(data,i,finish);  }  length+=decodeLastBlock(out,data.charAt(end - 4),data.charAt(end - 3),data.charAt(end - 2),data.charAt(end - 1));  return length;}  }
class C{  public T caseInlineAssociation_(InlineAssociation_ object){  return null;}  }
class C{  public List makeListTipoNivelesIsaar(){  List listaTiposNivelesIsaar=new ArrayList();  PropertyBean propertyBean=new PropertyBean();  propertyBean.setValue(String.valueOf(TipoNiveles.AUTORIDAD_VALUE));  propertyBean.setLabel(TipoNiveles.AUTORIDAD_LABEL);  listaTiposNivelesIsaar.add(propertyBean);  return listaTiposNivelesIsaar;}  }
class C{  public void onLoad(ClassPool pool,String classname) throws CannotCompileException, NotFoundException {  CtClass clazz=pool.get(classname);  clazz.instrument(converter);}  }
class C{  public static byte[] decodeWebSafe(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,WEBSAFE_DECODABET);}  }
class C{  public void SwitchTo(int lexState){  if (lexState >= 1 || lexState < 0)   throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",TokenMgrError.INVALID_LEXICAL_STATE); else   curLexState=lexState;}  }
class C{  public DataServerStatus(String type,String name,String state,String host,String role,int precedence,String service,String url,String driver,String vendor){  super(type,name,state,null);  TungstenProperties datasourceProperties=new TungstenProperties();  datasourceProperties.setString(PROPERTY_KEY_SERVICE,service);  datasourceProperties.setString(PROPERTY_KEY_HOST,host);  datasourceProperties.setString(PROPERTY_KEY_ROLE,role);  datasourceProperties.setInt(PROPERTY_KEY_PRECEDENCE,precedence);  datasourceProperties.setString(PROPERTY_KEY_URL,url);  datasourceProperties.setString(PROPERTY_KEY_DRIVER,driver);  datasourceProperties.setString(PROPERTY_KEY_VENDOR,vendor);  setProperties(datasourceProperties.map());}  }
class C{  private boolean isValidActivityClass(TypeElement classElement){  if (!isInheritsActivity(classElement)) {    error(classElement,"%s can only be used on activities, but %s is not a subclass of activity.",ActivityScreen.class.getSimpleName(),classElement.getQualifiedName());    return false;  }  if (!classElement.getModifiers().contains(Modifier.PUBLIC)) {    error(classElement,"The class %s is not public.",classElement.getQualifiedName().toString());    return false;  }  if (classElement.getModifiers().contains(Modifier.ABSTRACT)) {    error(classElement,"The class %s is abstract. You can't annotate abstract classes with @%s.",classElement.getQualifiedName().toString(),ActivityScreen.class.getSimpleName());    return false;  }  if (classElement.getKind().isInterface()) {    error(classElement,"%s is interface. You can't annotate interfaces with @%s.",classElement.getQualifiedName().toString(),ActivityScreen.class.getSimpleName());    return false;  }  return true;}  }
class C{  public MultiMatchQueryBuilder cutoffFrequency(float cutoff){  this.cutoffFrequency=cutoff;  return this;}  }
class C{  public void complexArrayResponseWithExample() throws Exception {  Map<String,String> queryParams=new HashMap<String,String>();  String str=client.invokeAPI("/mockResponses/complexArrayResponseWithExample","GET",queryParams,null,new HashMap<String,String>(),null,"application/json",null,new String[0]);  ObjectMapper mapper=Json.mapper().configure(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS,true);  JsonNode n1=mapper.readTree(str);  JsonNode n2=mapper.readTree("[{\"foo\":\"bar\"}]");  assertEquals(Json.pretty(n1),Json.pretty(n2));}  }
class C{  public Graph graph(){  return graph;}  }
class C{  protected <T extends DataObject>List<NamedElementQueryResultList.NamedElement> listDataObjects(Class<T> clazz,String nameField){  List<T> dataObjects=getDataObjects(clazz);  if (!CollectionUtils.isEmpty(dataObjects)) {    return getNamedElementsList(clazz,nameField,dataObjects);  } else {    return new ArrayList<NamedElementQueryResultList.NamedElement>();  }}  }
class C{  private void removeCriticalEdges(Body b){  Chain unitChain=b.getUnits();  int size=unitChain.size();  Map<Unit,List> predecessors=new HashMap<Unit,List>(2 * size + 1,0.7f);{    Iterator unitIt=unitChain.snapshotIterator();    while (unitIt.hasNext()) {      Unit currentUnit=(Unit)unitIt.next();      Iterator succsIt=currentUnit.getUnitBoxes().iterator();      while (succsIt.hasNext()) {        Unit target=((UnitBox)succsIt.next()).getUnit();        List<Unit> predList=predecessors.get(target);        if (predList == null) {          predList=new ArrayList<Unit>();          predList.add(currentUnit);          predecessors.put(target,predList);        } else         predList.add(currentUnit);      }    }  }{    Iterator unitIt=unitChain.snapshotIterator();    Unit currentUnit=null;    Unit directPredecessor;    while (unitIt.hasNext()) {      directPredecessor=currentUnit;      currentUnit=(Unit)unitIt.next();      List predList=predecessors.get(currentUnit);      int nbPreds=(predList == null) ? 0 : predList.size();      if (directPredecessor != null && directPredecessor.fallsThrough())       nbPreds++;      if (nbPreds >= 2) {        if (directPredecessor != null && directPredecessor.fallsThrough()) {          directPredecessor=insertGotoAfter(unitChain,directPredecessor,currentUnit);        }        Iterator predIt=predList.iterator();        while (predIt.hasNext()) {          Unit predecessor=(Unit)predIt.next();          int nbSuccs=predecessor.getUnitBoxes().size();          nbSuccs+=predecessor.fallsThrough() ? 1 : 0;          if (nbSuccs >= 2) {            if (directPredecessor == null)             directPredecessor=insertGotoBefore(unitChain,currentUnit,currentUnit); else             directPredecessor=insertGotoAfter(unitChain,directPredecessor,currentUnit);            redirectBranch(predecessor,currentUnit,directPredecessor);          }        }      }    }  }}  }
class C{  public void updateVirtualArrayTags(){  if (_taggedVirtualArrays == null) {    _taggedVirtualArrays=new StringSet();  }  s_logger.info("entering updateVirtualArrayTags: assigned: {}, " + " connected: {} , tagged: {}",new Object[]{_assignedVirtualArrays == null ? "[]" : _assignedVirtualArrays.toArray(),_connectedVirtualArrays == null ? "[]" : _connectedVirtualArrays.toArray(),_taggedVirtualArrays == null ? "[]" : _taggedVirtualArrays.toArray()});  if ((_assignedVirtualArrays != null) && (!_assignedVirtualArrays.isEmpty())) {    s_logger.debug("updateVirtualArrayTags: replacing with assigned {}",_assignedVirtualArrays.size());    _taggedVirtualArrays.replace(_assignedVirtualArrays);    s_logger.debug("updateVirtualArrayTags is taking assigned varrays: added {} removed {}",(_taggedVirtualArrays.getAddedSet() != null) ? _taggedVirtualArrays.getAddedSet().size() : "0",(_taggedVirtualArrays.getRemovedSet() != null) ? _taggedVirtualArrays.getRemovedSet().size() : "0");  } else   if ((_connectedVirtualArrays != null) && (!_connectedVirtualArrays.isEmpty())) {    s_logger.debug("updateVirtualArrayTags: replacing with connected {}",_connectedVirtualArrays.size());    _taggedVirtualArrays.replace(_connectedVirtualArrays);    s_logger.debug("updateVirtualArrayTags is taking connected varrays: added {} removed {}",(_taggedVirtualArrays.getAddedSet() != null) ? _taggedVirtualArrays.getAddedSet().size() : "0",(_taggedVirtualArrays.getRemovedSet() != null) ? _taggedVirtualArrays.getRemovedSet().size() : "0");  } else {    _taggedVirtualArrays.clear();  }  s_logger.info("leaving updateVirtualArrayTags: tagged: {}",_taggedVirtualArrays == null ? "[]" : _taggedVirtualArrays.toArray());}  }
class C{  public boolean prepareForSave(){  if (mModel == null || (mCalendarsCursor == null && mModel.mUri == null)) {    return false;  }  return fillModelFromUI();}  }
class C{  public void eventbase(float offset,String eventbaseID,String eventType){  TimingSpecifier ts=new EventbaseTimingSpecifier(owner,isBegin,offset,eventbaseID,eventType);  timingSpecifiers.add(ts);}  }
class C{  private void generateRequest(HttpServletRequest httpRequest,org.compiere.cm.cache.XML thisXML,Properties ctx){  HttpSession thisSession=httpRequest.getSession(false);  WebInfo wi=null;  if (thisSession != null) {    if (thisSession.getAttribute(WebInfo.NAME) != null)     wi=(WebInfo)thisSession.getAttribute(WebInfo.NAME);    xmlCode.append("<requestTables>\n");    int l_nClientID=Integer.parseInt(ctx.getProperty("#AD_Client_ID"));    if (wi != null) {      if (wi.getC_BPartner_ID() != -1) {        genTable("AD_User","(AD_User.IsActive='Y' AND AD_User.AD_Client_ID=" + l_nClientID + "  AND AD_User.C_BPartner_ID=@C_BPartner_ID@) ORDER BY AD_User.AD_User_ID",false,ctx,wi);        genTable("C_BPartner","(C_BPartner.IsActive='Y' AND C_BPartner.AD_Client_ID=" + l_nClientID + "  AND C_BPartner.C_BPartner_ID=@C_BPartner_ID@)ORDER BY C_BPartner.C_BPartner_ID",false,ctx,wi);        genTable("C_Invoice","(C_Invoice.IsActive='Y' AND C_Invoice.AD_Client_ID=" + l_nClientID + "  AND C_Invoice.C_BPartner_ID=@C_BPartner_ID@) ORDER BY C_Invoice.C_Invoice_ID",false,ctx,wi);        genTable("C_Order","(C_Order.IsActive='Y' AND C_Order.AD_Client_ID=" + l_nClientID + "  AND C_Order.C_BPartner_ID=@C_BPartner_ID@) ORDER BY C_Order.C_Order_ID",false,ctx,wi);        genTable("C_Payment","(C_Payment.IsActive='Y' AND C_Payment.AD_Client_ID=" + l_nClientID + "  AND C_Payment.C_BPartner_ID=@C_BPartner_ID@) ORDER BY C_Payment.C_Payment_ID",false,ctx,wi);        genTable("C_Project","(C_Project.IsActive='Y' AND C_Project.AD_Client_ID=" + l_nClientID + "  AND C_Project.C_BPartner_ID=@C_BPartner_ID@) ORDER BY C_Project.C_Project_ID",false,ctx,wi);        genTable("M_InOut","(M_InOut.IsActive='Y' AND M_InOut.AD_Client_ID=" + l_nClientID + "  AND M_InOut.C_BPartner_ID=@C_BPartner_ID@) ORDER BY M_InOut.M_InOut_ID",false,ctx,wi);        genTable("R_Request","(R_Request.IsActive='Y' AND R_Request.AD_Client_ID=" + l_nClientID + "  AND R_Request.C_BPartner_ID=@C_BPartner_ID@) ORDER BY R_Request.R_Request_ID",true,ctx,wi);        genTable("R_RequestUpdate","(R_RequestUpdate.IsActive='Y' AND R_RequestUpdate.AD_Client_ID=" + l_nClientID + "  AND R_RequestUpdate.R_Request_ID IN (SELECT R_Request.R_Request_ID FROM R_Request WHERE R_Request.IsActive='Y' AND R_Request.AD_Client_ID="+ l_nClientID+ "  AND R_Request.C_BPartner_ID=@C_BPartner_ID@)) ORDER BY R_RequestUpdate.R_RequestUpdate_ID",true,ctx,wi);      }      genTable("A_Asset","A_Asset.IsActive='Y' AND A_Asset.AD_Client_ID=" + l_nClientID + "  ORDER BY A_Asset.A_Asset_ID",false,ctx,wi);      genTable("C_Activity","C_Activity.IsActive='Y' AND C_Activity.AD_Client_ID=" + l_nClientID + "  ORDER BY C_Activity.C_Activity_ID",false,ctx,wi);      genTable("C_Campaign","C_Campaign.IsActive='Y' AND C_Campaign.AD_Client_ID=" + l_nClientID + "  ORDER BY C_Campaign.C_Campaign_ID",false,ctx,wi);      genTable("M_Product","M_Product.IsActive='Y' AND M_Product.AD_Client_ID=" + l_nClientID + " AND M_Product.Value like 'cd_%' ORDER BY M_Product.M_Product_ID",false,ctx,wi);      genTable("M_RMA","M_RMA.IsActive='Y' AND M_RMA.AD_Client_ID=" + l_nClientID + "  ORDER BY M_RMA.M_RMA_ID",false,ctx,wi);      genTable("R_Category","R_Category.IsActive='Y' AND R_Category.AD_Client_ID=" + l_nClientID + "  ORDER BY R_Category.R_Category_ID",false,ctx,wi);      genTable("R_Group","R_Group.IsActive='Y' AND R_Group.AD_Client_ID=" + l_nClientID + "  ORDER BY R_Group.R_Group_ID",false,ctx,wi);      genTable("R_MailText","R_MailText.IsActive='Y' AND R_MailText.AD_Client_ID=" + l_nClientID + "  ORDER BY R_MailText.R_MailText_ID",true,ctx,wi);      genTable("R_RequestType","R_RequestType.IsActive='Y' AND R_RequestType.AD_Client_ID=" + l_nClientID + "  ORDER BY R_RequestType.R_RequestType_ID",false,ctx,wi);      genTable("R_Resolution","R_Resolution.IsActive='Y' AND R_Resolution.AD_Client_ID=" + l_nClientID + "  ORDER BY R_Resolution.R_Resolution_ID",false,ctx,wi);      genTable("R_StandardResponse","R_StandardResponse.IsActive='Y' AND R_StandardResponse.AD_Client_ID=" + l_nClientID + "  ORDER BY R_StandardResponse.R_StandardResponse_ID",false,ctx,wi);      genTable("R_Status","R_Status.IsActive='Y' AND R_Status.AD_Client_ID=" + l_nClientID + "  ORDER BY R_Status.R_Status_ID",false,ctx,wi);      genTable("_PriorityRule","(AD_Ref_List.IsActive='Y' AND AD_Ref_List.AD_Reference_ID=154) ORDER BY AD_Ref_List.AD_Ref_List_ID",false,ctx,wi);      genTable("R_Request_Confidential","(AD_Ref_List.IsActive='Y' AND AD_Ref_List.AD_Reference_ID=340) ORDER BY AD_Ref_List.AD_Ref_List_ID",false,ctx,wi);      genTable("R_Request_Due_Typ","(AD_Ref_List.IsActive='Y' AND AD_Ref_List.AD_Reference_ID=222) ORDER BY AD_Ref_List.AD_Ref_List_ID",false,ctx,wi);      genTable("R_Request_Next_Action","(AD_Ref_List.IsActive='Y' AND AD_Ref_List.AD_Reference_ID=219) ORDER BY AD_Ref_List.AD_Ref_List_ID",false,ctx,wi);      genTable("R_Request_TaskStatus","(AD_Ref_List.IsActive='Y' AND AD_Ref_List.AD_Reference_ID=366) ORDER BY AD_Ref_List.AD_Ref_List_ID",false,ctx,wi);    }    xmlCode.append("</requestTables>\n");  }}  }
class C{  public InstancesTest(String name){  super(name);}  }
class C{  public static String formatDouble(double x){  return formatDouble(x,true);}  }
class C{  public static String now(){  final StringBuilder sb=new StringBuilder();  final Calendar cal=new GregorianCalendar();  sb.append(cal.get(Calendar.YEAR)).append('-');  final int month=1 + cal.get(Calendar.MONTH);  if (month < 10) {    sb.append('0');  }  sb.append(month).append('-');  final int date=cal.get(Calendar.DATE);  if (date < 10) {    sb.append('0');  }  sb.append(date).append(' ');  final int hour=cal.get(Calendar.HOUR_OF_DAY);  if (hour < 10) {    sb.append('0');  }  sb.append(hour).append(':');  final int min=cal.get(Calendar.MINUTE);  if (min < 10) {    sb.append('0');  }  sb.append(min).append(':');  final int sec=cal.get(Calendar.SECOND);  if (sec < 10) {    sb.append('0');  }  sb.append(sec).append(' ');  return sb.toString();}  }
class C{  public void testGridMultiPointsRoundTrip() throws SQLException {  GridGenerator grid=new GridGenerator();  grid.setGeometryFactory(geometryFactory);  grid.setBoundingBox(new Envelope(0,10,0,10));  grid.setNumberColumns(10);  grid.setNumberRows(10);  MultiPoint[] pt=new MultiPoint[100];  STRUCT[] st=new STRUCT[100];  PointGenerator pgc=new PointGenerator();  pgc.setGeometryFactory(geometryFactory);  MultiGenerator pg=new MultiGenerator(pgc);  pg.setBoundingBox(new Envelope(0,10,0,10));  pg.setNumberGeometries(3);  pg.setGeometryFactory(geometryFactory);  OraWriter ow=new OraWriter();  int i=0;  while (grid.canCreate() && i < 100) {    pg.setBoundingBox(grid.createEnv());    pt[i]=(MultiPoint)pg.create();    st[i]=ow.write(pt[i],getConnection());    i++;  }  OraReader or=new OraReader();  i=0;  while (i < 100 && pt[i] != null) {    MultiPoint pt2=(MultiPoint)or.read(st[i]);    assertTrue("The input MultiPoint is not the same as the output MultiPoint",pt[i].equals(pt2));    i++;  }}  }
class C{  public void writeToParcel(Parcel dest,int flags){  dest.writeInt(usagePercent);  dest.writeLong(durationMicros);  dest.writeString(usageDetails);  dest.writeString(checkinDetails);}  }
class C{  public Rational(ByteProvider byteProvider) throws IOException {  MXFPropertyPopulator.populateField(byteProvider,this,"numerator");  MXFPropertyPopulator.populateField(byteProvider,this,"denominator");}  }
class C{  public String toString(){  return detail.toString();}  }
class C{  public void testSetSpeedSetting(){  float speed=1.0F;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setSpeedSetting(speed);  assertEquals(speed,instance.getSpeedSetting(),0.0);}  }
class C{  public void markNextPacket(){  mBuffers[mBufferIn][1]|=0x80;}  }
class C{  public mxPoint(Point2D point){  this(point.getX(),point.getY());}  }
class C{  public void testXmlRpcRequest() throws Exception {  XmlRpcClient client=this.getRpcClient(url,"admin","ofbiz");  Object[] params=new Object[]{55.00,"message from xml-rpc client"};  Map<String,Object> result=UtilGenerics.cast(client.execute("testScv",params));  assertEquals("XML-RPC Service result success","service done",result.get("resp"));}  }
class C{  private void updateLastRefreshTime(){  this.lastRefreshTime=System.currentTimeMillis();  LOGGER.debug("Updated last refresh time. lastPropertiesRefreshTime={}",lastRefreshTime);}  }
class C{  public void destroy(){  log.fine("");}  }
class C{  public void sendUserMessage(Severity severity,String message,Throwable exception){}  }
class C{  public boolean empty(){  return isEmpty();}  }
class C{  public boolean isUniqueContentOnly(){  return uniqueContentOnly;}  }
class C{  private double[][] makeJointVectorForPastSource(double[] destination,double[] source){  double[][] destPastSourceVectors=new double[destination.length - k][k + 1];  for (int t=k; t < destination.length; t++) {    for (int i=0; i < k; i++) {      destPastSourceVectors[t - k][i]=destination[t - i - 1];    }    destPastSourceVectors[t - k][k]=source[t - 1];  }  return destPastSourceVectors;}  }
class C{  public SeparatorDecoration build(){  return new SeparatorDecoration(mColor,mWidth,mMarginLeft,mMarginRight);}  }
class C{  public static MedianProjectionExpression medianDistinct(String propertyName){  return new MedianProjectionExpression(getPropExpr(propertyName),true);}  }
class C{  public KleinbergSmallWorldGenerator(Supplier<? extends Graph<V,E>> graphFactory,Supplier<V> vertexFactory,Supplier<E> edgeFactory,int row_count,int col_count,double clusteringExponent){  super(graphFactory,vertexFactory,edgeFactory,row_count,col_count,true);  clustering_exponent=clusteringExponent;  initialize();}  }
class C{  @Override public int compare(Map.Entry<List<String>,List<Double>> e1,Map.Entry<List<String>,List<Double>> e2){  int r=0;  List<String> keyList1=e1.getKey();  List<Double> valueList1=e1.getValue();  List<String> keyList2=e2.getKey();  List<Double> valueList2=e2.getValue();  for (  SortOption so : sortOptions) {    int index=so.getIndex();    if (index == -1) {      continue;    }    if (!so.isInGroupby()) {      Double value1=valueList1.get(index);      Double value2=valueList2.get(index);      r=value1.compareTo(value2);    } else {      String key1=keyList1.get(index);      String key2=keyList2.get(index);      r=key1.compareTo(key2);    }    if (r == 0)     continue;    if (!so.isAscendant()) {      r=-r;    }    return r;  }  if (r == 0) {    return new GroupbyFieldsComparator().compare(keyList1,keyList2);  }  return r;}  }
class C{  public static <K,V,E>Map<K,V> collectEntries(E[] self,Map<K,V> collector){  return collectEntries(self,collector,Closure.IDENTITY);}  }
class C{  protected void onChoiceStarted(){  if (swipeListViewListener != null) {    swipeListViewListener.onChoiceStarted();  }}  }
class C{  public static String pathFor(final ItemStack stack){  if (API.manualAPI != null)   return API.manualAPI.pathFor(stack);  return null;}  }
class C{  public AuthnRequestStateCookieWrapper(AuthnRequestStateExternalAuthenticationFilter extAuthenticator){  this.externalAuthenticator=extAuthenticator;}  }
class C{  public String invertSelectionTipText(){  return "Inverts the selection (only if instances are drawn WITHOUT replacement).";}  }
class C{  public FederationCallable(){}  }
class C{  public Drawable colorDrawable(Context context,@Nullable Drawable drawable,int color){  if (!(drawable instanceof BitmapDrawable)) {    Log.w(LOG_TAG,"Original drawable is not a bitmap! Trying with constant state cloning.");    return colorUnknownDrawable(drawable,color);  }  Bitmap original=((BitmapDrawable)drawable).getBitmap();  Bitmap copy=Bitmap.createBitmap(original.getWidth(),original.getHeight(),original.getConfig());  Paint paint=new Paint();  Canvas c=new Canvas(copy);  paint.setColorFilter(new PorterDuffColorFilter(color,SRC_ATOP));  c.drawBitmap(original,0,0,paint);  return new BitmapDrawable(context.getResources(),copy);}  }
class C{  public ViewPropertyAnimator y(float value){  animateProperty(Y,value);  return this;}  }
class C{  public static <T>Class<T> nativeClassFor(Class<T> valueType){  return ValueModel.acquire(valueType).nativeClass();}  }
class C{  @SuppressWarnings("deprecation") @Deprecated public final void suspend(){  if (suspendHelper()) {    Thread.currentThread().suspend();  }}  }
class C{  @Override public void send(HandshakeIODataStream out){  int total_length=0;  if (encoded_certs == null) {    encoded_certs=new byte[certs.length][];    for (int i=0; i < certs.length; i++) {      try {        encoded_certs[i]=certs[i].getEncoded();      } catch (      CertificateEncodingException e) {        fatalAlert(AlertProtocol.INTERNAL_ERROR,"INTERNAL ERROR",e);      }    }  }  total_length=3 * encoded_certs.length;  for (int i=0; i < encoded_certs.length; i++) {    total_length+=encoded_certs[i].length;  }  out.writeUint24(total_length);  for (int i=0; i < encoded_certs.length; i++) {    out.writeUint24(encoded_certs[i].length);    out.write(encoded_certs[i]);  }}  }
class C{  protected FullMemberReferenceImpl(){  super();}  }
class C{  public void testBaselineParameters() throws Exception {  SweetSpotSimilarity sim=getSimilarity("text_baseline",SweetSpotSimilarity.class);  DefaultSimilarity d=new DefaultSimilarity();  for (int i=1; i <= 6; i++) {    assertEquals("tf i=" + i,1.5F,sim.tf(i),0.0F);  }  for (int i=6; i <= 1000; i++) {    assertTrue("tf: i=" + i + " : s="+ sim.tf(i)+ " < d="+ d.tf(i),sim.tf(i) < d.tf(i));  }  assertEquals("norm 1 == 7",sim.computeLengthNorm(1),sim.computeLengthNorm(7),0.0F);  assertEquals("norm 2 == 6",sim.computeLengthNorm(1),sim.computeLengthNorm(7),0.0F);  assertEquals("norm 3",1.00F,sim.computeLengthNorm(3),0.0F);  assertEquals("norm 4",1.00F,sim.computeLengthNorm(4),0.0F);  assertEquals("norm 5",1.00F,sim.computeLengthNorm(5),0.0F);  assertTrue("norm 6 too high: " + sim.computeLengthNorm(6),sim.computeLengthNorm(6) < 1.0F);  assertTrue("norm 7 higher then norm 6",sim.computeLengthNorm(7) < sim.computeLengthNorm(6));  assertEquals("norm 20",0.25F,sim.computeLengthNorm(20),0.0F);}  }
class C{  @Override public void updateAsciiStream(String columnLabel,InputStream x) throws SQLException {  updateAsciiStream(columnLabel,x,-1);}  }
class C{  public void load(InputStream in,String baseURI,RDFFormat dataFormat,RDFHandler rdfHandler) throws IOException, RDFParseException, RDFHandlerException {  if (!in.markSupported()) {    in=new BufferedInputStream(in,1024);  }  if (ZipUtil.isZipStream(in)) {    loadZip(in,baseURI,dataFormat,rdfHandler);  } else   if (GZipUtil.isGZipStream(in)) {    load(new GZIPInputStream(in),baseURI,dataFormat,rdfHandler);  } else {    loadInputStreamOrReader(in,baseURI,dataFormat,rdfHandler);  }}  }
class C{  public String putPageContent(int counter,String ReplaceString,String payload,String authStringEnc) throws IOException {  String result=null;  try {    HttpURLConnection connection=(HttpURLConnection)fURL.openConnection();    connection.setDoOutput(true);    connection.setRequestMethod("PUT");    connection.setRequestProperty("Authorization","Basic " + authStringEnc);    connection.setRequestProperty("Content-Type","application/json");    connection.setRequestProperty("Accept","application/json");    connection.connect();    if (ReplaceString != null) {      payload=payload.replace(ReplaceString,Integer.toString(counter));    }    OutputStreamWriter out=new OutputStreamWriter(connection.getOutputStream());    out.write(payload);    out.flush();    out.close();    connection.getInputStream();  } catch (  IOException ex) {    Log.logger.log(Level.SEVERE,"Cannot open connection to " + fURL.toString());    throw ex;  }  return result;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Airing air=getAir(stack);  if (Permissions.hasPermission(Permissions.PERMISSION_RECORDINGSCHEDULE,stack.getUIMgr()))   Carny.getInstance().addDontLike(air,true);  return null;}  }
class C{  private TelnetProtocol(){}  }
class C{  public void endIngestion(){  endCounter++;  logger.info("End of product ingestion: processed=" + endCounter + ", error="+ errorCounter+ ", inbox="+ (totalProcessed - (endCounter + errorCounter))+ ", total="+ totalProcessed+ ".");  if ((endCounter + errorCounter) >= getTotalProcessed()) {    this.scannerStatus=FileScanner.STATUS_OK;    processingsDone(null);  }}  }
class C{  private void spectralToSample(){  for (int type=3; type >= 0; type--) {    for (int i=0; i < MAX_ELEM_ID; i++) {      ChannelElement che=ac.che[type][i];      if (che != null) {        if (type <= TYPE_CPE) {          applyChannelCoupling(che,type,i,BEFORE_TNS,true);        }        if (ac.oc[1].m4ac.objectType == AOT_AAC_LTP) {          if (che.ch[0].ics.predictorPresent) {            if (che.ch[0].ics.ltp.present) {              applyLtp(che.ch[0]);            }            if (che.ch[1].ics.ltp.present && type == TYPE_CPE) {              applyLtp(che.ch[1]);            }          }        }        if (che.ch[0].tns.present) {          applyTns(che.ch[0].coeffs,che.ch[0].tns,che.ch[0].ics,true);        }        if (che.ch[1].tns.present) {          applyTns(che.ch[1].coeffs,che.ch[1].tns,che.ch[1].ics,true);        }        if (type <= TYPE_CPE) {          applyChannelCoupling(che,type,i,BETWEEN_TNS_AND_IMDCT,true);        }        if (type != TYPE_CCE || che.coup.couplingPoint == AFTER_IMDCT) {          imdctAndWindow(che.ch[0]);          if (ac.oc[1].m4ac.objectType == AOT_AAC_LTP) {            updateLtp(che.ch[0]);          }          if (type == TYPE_CPE) {            imdctAndWindow(che.ch[1]);            if (ac.oc[1].m4ac.objectType == AOT_AAC_LTP) {              updateLtp(che.ch[1]);            }          }          if (ac.oc[1].m4ac.sbr > 0) {            AacSbr.sbrApply(ac,che.sbr,type,che.ch[0].ret,che.ch[1].ret);          }        }        if (type <= TYPE_CCE) {          applyChannelCoupling(che,type,i,AFTER_IMDCT,false);        }      }    }  }}  }
class C{  protected Text createTextNode(String text){  return getOwnerDocument().createTextNode(text);}  }
class C{  public static int ENOTBLK(){  return Errno.ENOTBLK.intValue();}  }
class C{  public int askControlType(String systemName){  int i=matchTentative(systemName);  if (i >= 0) {    return ((TurnoutManager)getMgr(i)).askControlType(systemName);  }  return ((TurnoutManager)getMgr(0)).askControlType(systemName);}  }
class C{  public ParsePhraseType(String parseViewname){  this.parseViewname=parseViewname;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case RegularExpressionPackage.PATTERN_CHARACTER__VALUE:    setValue(VALUE_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public IntsRef(int capacity){  ints=new int[capacity];}  }
class C{  public int addMissingColumns(MPrintFormat pf){  log.config(pf.toString());  String sql="SELECT c.AD_Column_ID, c.ColumnName " + "FROM AD_Column c " + "WHERE NOT EXISTS "+ "(SELECT * "+ "FROM AD_PrintFormatItem pfi"+ " INNER JOIN AD_PrintFormat pf ON (pfi.AD_PrintFormat_ID=pf.AD_PrintFormat_ID) "+ "WHERE pf.AD_Table_ID=c.AD_Table_ID"+ " AND pfi.AD_Column_ID=c.AD_Column_ID"+ " AND pfi.AD_PrintFormat_ID=?)"+ " AND c.AD_Table_ID=? "+ "ORDER BY c.AD_Column_ID";  PreparedStatement pstmt=null;  ResultSet rs=null;  int counter=0;  try {    pstmt=DB.prepareStatement(sql,pf.get_TrxName());    pstmt.setInt(1,pf.getAD_PrintFormat_ID());    pstmt.setInt(2,pf.getAD_Table_ID());    rs=pstmt.executeQuery();    while (rs.next()) {      int AD_Column_ID=rs.getInt(1);      String ColumnName=rs.getString(2);      MPrintFormatItem pfi=MPrintFormatItem.createFromColumn(pf,AD_Column_ID,0);      if (pfi.get_ID() != 0)       log.fine("#" + ++counter + " - added "+ ColumnName); else       log.warning("Not added: " + ColumnName);    }  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (counter == 0)   log.fine("None"); else   log.fine("Added=" + counter);  return counter;}  }
class C{  public Out(){  this(System.out);}  }
class C{  public byte[] toByteArray(){  if (index > 0xFFFF) {    throw new RuntimeException("Class file too large!");  }  int size=24 + 2 * interfaceCount;  int nbFields=0;  FieldWriter fb=firstField;  while (fb != null) {    ++nbFields;    size+=fb.getSize();    fb=(FieldWriter)fb.fv;  }  int nbMethods=0;  MethodWriter mb=firstMethod;  while (mb != null) {    ++nbMethods;    size+=mb.getSize();    mb=(MethodWriter)mb.mv;  }  int attributeCount=0;  if (bootstrapMethods != null) {    ++attributeCount;    size+=8 + bootstrapMethods.length;    newUTF8("BootstrapMethods");  }  if (ClassReader.SIGNATURES && signature != 0) {    ++attributeCount;    size+=8;    newUTF8("Signature");  }  if (sourceFile != 0) {    ++attributeCount;    size+=8;    newUTF8("SourceFile");  }  if (sourceDebug != null) {    ++attributeCount;    size+=sourceDebug.length + 6;    newUTF8("SourceDebugExtension");  }  if (enclosingMethodOwner != 0) {    ++attributeCount;    size+=10;    newUTF8("EnclosingMethod");  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;    size+=6;    newUTF8("Deprecated");  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((version & 0xFFFF) < Opcodes.V1_5 || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {      ++attributeCount;      size+=6;      newUTF8("Synthetic");    }  }  if (innerClasses != null) {    ++attributeCount;    size+=8 + innerClasses.length;    newUTF8("InnerClasses");  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;    size+=8 + anns.getSize();    newUTF8("RuntimeVisibleAnnotations");  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;    size+=8 + ianns.getSize();    newUTF8("RuntimeInvisibleAnnotations");  }  if (ClassReader.ANNOTATIONS && tanns != null) {    ++attributeCount;    size+=8 + tanns.getSize();    newUTF8("RuntimeVisibleTypeAnnotations");  }  if (ClassReader.ANNOTATIONS && itanns != null) {    ++attributeCount;    size+=8 + itanns.getSize();    newUTF8("RuntimeInvisibleTypeAnnotations");  }  if (attrs != null) {    attributeCount+=attrs.getCount();    size+=attrs.getSize(this,null,0,-1,-1);  }  size+=pool.length;  ByteVector out=new ByteVector(size);  out.putInt(0xCAFEBABE).putInt(version);  out.putShort(index).putByteArray(pool.data,0,pool.length);  int mask=Opcodes.ACC_DEPRECATED | ACC_SYNTHETIC_ATTRIBUTE | ((access & ACC_SYNTHETIC_ATTRIBUTE) / TO_ACC_SYNTHETIC);  out.putShort(access & ~mask).putShort(name).putShort(superName);  out.putShort(interfaceCount);  for (int i=0; i < interfaceCount; ++i) {    out.putShort(interfaces[i]);  }  out.putShort(nbFields);  fb=firstField;  while (fb != null) {    fb.put(out);    fb=(FieldWriter)fb.fv;  }  out.putShort(nbMethods);  mb=firstMethod;  while (mb != null) {    mb.put(out);    mb=(MethodWriter)mb.mv;  }  out.putShort(attributeCount);  if (bootstrapMethods != null) {    out.putShort(newUTF8("BootstrapMethods"));    out.putInt(bootstrapMethods.length + 2).putShort(bootstrapMethodsCount);    out.putByteArray(bootstrapMethods.data,0,bootstrapMethods.length);  }  if (ClassReader.SIGNATURES && signature != 0) {    out.putShort(newUTF8("Signature")).putInt(2).putShort(signature);  }  if (sourceFile != 0) {    out.putShort(newUTF8("SourceFile")).putInt(2).putShort(sourceFile);  }  if (sourceDebug != null) {    int len=sourceDebug.length;    out.putShort(newUTF8("SourceDebugExtension")).putInt(len);    out.putByteArray(sourceDebug.data,0,len);  }  if (enclosingMethodOwner != 0) {    out.putShort(newUTF8("EnclosingMethod")).putInt(4);    out.putShort(enclosingMethodOwner).putShort(enclosingMethod);  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(newUTF8("Deprecated")).putInt(0);  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((version & 0xFFFF) < Opcodes.V1_5 || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {      out.putShort(newUTF8("Synthetic")).putInt(0);    }  }  if (innerClasses != null) {    out.putShort(newUTF8("InnerClasses"));    out.putInt(innerClasses.length + 2).putShort(innerClassesCount);    out.putByteArray(innerClasses.data,0,innerClasses.length);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (ClassReader.ANNOTATIONS && tanns != null) {    out.putShort(newUTF8("RuntimeVisibleTypeAnnotations"));    tanns.put(out);  }  if (ClassReader.ANNOTATIONS && itanns != null) {    out.putShort(newUTF8("RuntimeInvisibleTypeAnnotations"));    itanns.put(out);  }  if (attrs != null) {    attrs.put(this,null,0,-1,-1,out);  }  if (invalidFrames) {    anns=null;    ianns=null;    attrs=null;    innerClassesCount=0;    innerClasses=null;    bootstrapMethodsCount=0;    bootstrapMethods=null;    firstField=null;    lastField=null;    firstMethod=null;    lastMethod=null;    computeMaxs=false;    computeFrames=true;    invalidFrames=false;    new ClassReader(out.data).accept(this,ClassReader.SKIP_FRAMES);    return toByteArray();  }  return out.data;}  }
class C{  void createVerScrollbar(){  vsb=new XVerticalScrollbar(this);  vsb.setValues(0,0,0,0,1,1);}  }
class C{  public Transmission.Chunk transferDocumentIndex(final Transmission.Chunk chunk){  while (Protocol.metadataRetrievalRunning.get() > 0)   try {    Thread.sleep(1000);  } catch (  InterruptedException e) {    break;  }  while (Memory.load() > Switchboard.getSwitchboard().getConfigFloat(SwitchboardConstants.INDEX_DIST_LOADPREREQ,2.0f))   try {    Thread.sleep(10000);  } catch (  InterruptedException e) {    break;  }  final boolean success=chunk.transmit();  if (success)   return chunk;  this.log.info("STORE: Chunk " + chunk.dhtTarget().getName() + " does not respond or accept the dht index, putting back index to backend");  chunk.restore();  return null;}  }
class C{  protected String createErrorMessage(final String message,final String... args){  final String formattedMessage=String.format(message,(Object[])args);  return "Error in nodes " + getClass().getSimpleName() + " : "+ formattedMessage;}  }
class C{  public int length(){  if (wordsInUse == 0)   return 0;  return BITS_PER_WORD * (wordsInUse - 1) + (BITS_PER_WORD - Long.numberOfLeadingZeros(words[wordsInUse - 1]));}  }
class C{  public ShareCollectionRequest(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  public static float[] pairwiseMultiply(float[] a,float[] b){  if (a.length != b.length) {    throw new RuntimeException();  }  float[] result=new float[a.length];  for (int i=0; i < result.length; i++) {    result[i]=a[i] * b[i];  }  return result;}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  int previewFormat=configManager.getPreviewFormat();  String previewFormatString=configManager.getPreviewFormatString();switch (previewFormat) {case PixelFormat.YCbCr_420_SP:case PixelFormat.YCbCr_422_SP:    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());default :  if ("yuv420p".equals(previewFormatString)) {    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());  }}throw new IllegalArgumentException("Unsupported picture format: " + previewFormat + '/'+ previewFormatString);}  }
class C{  public static <T>T parseValue(final AnnotationDefinition annotation,final String value,final Class<T> type){  if (!annotation.getAnnotationValueType().equals(type)) {    return null;  }  @SuppressWarnings("unchecked") final T return_value;  try {    if (Long.class.equals(type)) {      Long long_value;      if (value.matches(value_regex)) {        final String[] vals=value.split(" ");        long_value=Long.valueOf(vals[0]) * AnnotationUtil.getMultiplier(vals[1]);      } else {        long_value=Long.valueOf(value);      }      return_value=(T)long_value;    } else     if (Integer.class.equals(type)) {      Integer integer_value;      if (value.matches(value_regex)) {        final String[] vals=value.split(" ");        integer_value=Integer.valueOf(vals[0]) * AnnotationUtil.getMultiplier(vals[1]);      } else {        integer_value=Integer.valueOf(value);      }      return_value=(T)integer_value;    } else     if (Boolean.class.equals(type)) {      return_value=(T)Boolean.valueOf(value);    } else     if (String.class.equals(type)) {      return_value=(T)value;    } else {      throw new IllegalArgumentException();    }  } catch (  Exception e) {    return null;  }  return return_value;}  }
class C{  protected void flush(){  stream.flush();}  }
class C{  public boolean equals(Object other){  if (!(other instanceof EDIPartyName))   return false;  String otherAssigner=((EDIPartyName)other).assigner;  if (this.assigner == null) {    if (otherAssigner != null)     return false;  } else {    if (!(this.assigner.equals(otherAssigner)))     return false;  }  String otherParty=((EDIPartyName)other).party;  if (this.party == null) {    if (otherParty != null)     return false;  } else {    if (!(this.party.equals(otherParty)))     return false;  }  return true;}  }
class C{  public boolean isAncestorOf(Node node1,Node node2){  throw new UnsupportedOperationException();}  }
class C{  protected LiteralOrComputedPropertyNameImpl(){  super();}  }
class C{  public static void writeCurve(String f,Estimator est,Estimator classEst,double classIndex,double min,double max,int numPoints) throws Exception {  PrintWriter output=null;  StringBuffer text=new StringBuffer("");  if (f.length() != 0) {    String name=f + ".curv";    output=new PrintWriter(new FileOutputStream(name));  } else {    return;  }  double diff=(max - min) / (numPoints - 1.0);  try {    text.append("" + min + " "+ est.getProbability(min) * classEst.getProbability(classIndex) + " \n");    for (double value=min + diff; value < max; value+=diff) {      text.append("" + value + " "+ est.getProbability(value) * classEst.getProbability(classIndex) + " \n");    }    text.append("" + max + " "+ est.getProbability(max) * classEst.getProbability(classIndex) + " \n");  } catch (  Exception ex) {    ex.printStackTrace();    System.out.println(ex.getMessage());  }  output.println(text.toString());  if (output != null) {    output.close();  }}  }
class C{  public <UO>GenericRawResults<UO> queryRaw(ConnectionSource connectionSource,String query,RawRowMapper<UO> rowMapper,String[] arguments,ObjectCache objectCache) throws SQLException {  logger.debug("executing raw query for: {}",query);  if (arguments.length > 0) {    logger.trace("query arguments: {}",(Object)arguments);  }  DatabaseConnection connection=connectionSource.getReadOnlyConnection();  CompiledStatement compiledStatement=null;  try {    compiledStatement=connection.compileStatement(query,StatementType.SELECT,noFieldTypes,DatabaseConnection.DEFAULT_RESULT_FLAGS);    assignStatementArguments(compiledStatement,arguments);    RawResultsImpl<UO> rawResults=new RawResultsImpl<UO>(connectionSource,connection,query,String[].class,compiledStatement,new UserRawRowMapper<UO>(rowMapper,this),objectCache);    compiledStatement=null;    connection=null;    return rawResults;  }  finally {    if (compiledStatement != null) {      compiledStatement.close();    }    if (connection != null) {      connectionSource.releaseConnection(connection);    }  }}  }
class C{  public boolean start(){  if (DEBUG)   Log.d(TAG,"start()");  if (mHandler.getLooper() != Looper.myLooper()) {    Log.e(TAG,"start() called off of the UI thread");  }  if (mIsRunning) {    Log.w(TAG,"start() called when already running");  }  if (!mBoundToService) {    Log.d(TAG,"Binding to Face Unlock service for user=" + mLockPatternUtils.getCurrentUser());    mContext.bindServiceAsUser(new Intent(IFaceLockInterface.class.getName()),mConnection,Context.BIND_AUTO_CREATE,new UserHandle(mLockPatternUtils.getCurrentUser()));    mBoundToService=true;  } else {    Log.w(TAG,"Attempt to bind to Face Unlock when already bound");  }  mIsRunning=true;  return true;}  }
class C{  public void loadArg(final int arg){  loadInsn(argumentTypes[arg],getArgIndex(arg));}  }
class C{  public SP800SecureRandom buildDualEC(DualECPoints[] pointSet,Digest digest,byte[] nonce,boolean predictionResistant){  return new SP800SecureRandom(random,entropySourceProvider.get(entropyBitsRequired),new ConfigurableDualECDRBGProvider(pointSet,digest,nonce,personalizationString,securityStrength),predictionResistant);}  }
class C{  @Override public void drawSeries(Canvas canvas,Paint paint,List<Float> points,XYSeriesRenderer seriesRenderer,float yAxisValue,int seriesIndex,int startIndex){  int seriesNr=mDataset.getSeriesCount();  int length=points.size();  paint.setColor(seriesRenderer.getColor());  paint.setStyle(Style.FILL);  float halfDiffX=getHalfDiffX(points,length,seriesNr);  for (int i=0; i < length; i+=2) {    float x=points.get(i);    float y=points.get(i + 1);    drawBar(canvas,x,yAxisValue,x,y,halfDiffX,seriesNr,seriesIndex,paint);  }  paint.setColor(seriesRenderer.getColor());}  }
class C{  private static void configureIntentIntegrator(IntentIntegrator intentIntegrator,String promptString){  if (null == intentIntegrator) {    return;  }  intentIntegrator.setPrompt(promptString);  intentIntegrator.setDesiredBarcodeFormats(IntentIntegrator.QR_CODE_TYPES);  intentIntegrator.setCaptureActivity(QRCodeScannerActivity.class);  intentIntegrator.setBarcodeImageEnabled(true);  intentIntegrator.setOrientationLocked(false);  intentIntegrator.initiateScan();}  }
class C{  public boolean isSigEstablished(){  return mSigEstablished;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public int readChar(int index){  return this.readUByte(index);}  }
class C{  public NewPropertyDetails createPropertyMutation(String assessmentNumber,String mutationReasonCode,String saleDetails,String deedNo,String deedDate,List<OwnerDetails> ownerDetailsList) throws ParseException {  PropertyMutation propertyMutation=new PropertyMutation();  NewPropertyDetails newPropertyDetails=null;  BasicProperty basicProperty=getBasicPropertyByUpicNo(assessmentNumber);  PropertyMutationMaster mutationMaster=getPropertyTransferReasonsByCode(mutationReasonCode);  propertyMutation.setDeedNo(deedNo);  propertyMutation.setDeedDate(propertyService.convertStringToDate(deedDate));  propertyMutation.setSaleDetail(saleDetails);  propertyMutation.setMutationReason(mutationMaster);  propertyMutation.setBasicProperty(basicProperty);  propertyMutation.setProperty(basicProperty.getActiveProperty());  transitionWorkFlow(propertyMutation);  basicPropertyService.applyAuditing(propertyMutation);  basicProperty.getPropertyMutations().add(propertyMutation);  basicPropertyService.applyAuditing(propertyMutation.getState());  basicProperty.setUnderWorkflow(true);  propertyMutation.setTransfereeInfosProxy(getTransfereesInfoList(propertyMutation,ownerDetailsList));  createUserIfNotExist(propertyMutation,propertyMutation.getTransfereeInfosProxy());  for (  final PropertyOwnerInfo ownerInfo : basicProperty.getPropertyOwnerInfo())   propertyMutation.getTransferorInfos().add(ownerInfo.getOwner());  propertyMutation.setMutationDate(new Date());  if (propertyMutation.getApplicationNo() == null)   propertyMutation.setApplicationNo(applicationNumberGenerator.generate());  propertyMutation=propertyMutationService.persist(propertyMutation);  basicProperty=basicPropertyService.persist(basicProperty);  if (null != propertyMutation) {    newPropertyDetails=new NewPropertyDetails();    newPropertyDetails.setApplicationNo(basicProperty.getUpicNo());    final ErrorDetails errorDetails=new ErrorDetails();    errorDetails.setErrorCode(PropertyTaxConstants.THIRD_PARTY_ERR_CODE_SUCCESS);    errorDetails.setErrorMessage(PropertyTaxConstants.THIRD_PARTY_ERR_MSG_SUCCESS);    newPropertyDetails.setErrorDetails(errorDetails);  }  return newPropertyDetails;}  }
class C{  public ResultSet executeQuery(String sql) throws SQLException {  if (executeInternal(sql,fetchSize)) {    return executionResult.getResultSet();  }  return MariaSelectResultSet.EMPTY;}  }
class C{  protected ThisTargetImpl(){  super();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void main(String[] argv){  runFilter(new TimeSeriesTranslate(),argv);}  }
class C{  public String convertConstraintIntervalTypeToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  private ZonedDateTime createTime(int time,ZonedDateTime fromTimeDateZD){  LocalDateTime localDateTime=LocalDateTime.of(fromTimeDateZD.getYear(),fromTimeDateZD.getMonth(),fromTimeDateZD.getDayOfMonth(),0,0);  return localDateTime.plusSeconds(time).atZone(fromTimeDateZD.getZone());}  }
class C{  public boolean isLoginSet(){  return (username != null && (password != null && !username.equals("") && !password.equals(""))) || oauth;}  }
class C{  public boolean isDownloading(Account account,OCFile file){  return !(account == null || file == null) && (mPendingDownloads.contains(account,file.getRemotePath()));}  }
class C{  public static void clearScreen(){  Gdx.gl.glClearColor(0f,0f,0f,1f);  Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);}  }
class C{  public boolean isNonsingular(){  for (int j=0; j < n; j++) {    if (LU[j][j] == 0)     return false;  }  return true;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.448 -0500",hash_original_method="F30E47B42E381C2413B1100E1A47D1F8",hash_generated_method="C674B3B3DD0691391001B45F0CE3A9E5") public void putAll(Bundle map){  unparcel();  map.unparcel();  mMap.putAll(map.mMap);  mHasFds|=map.mHasFds;  mFdsKnown=mFdsKnown && map.mFdsKnown;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:16.632 -0500",hash_original_method="B431463E1C39FBF9835A224B363A2DCD",hash_generated_method="88C4D72F6317DC1B05F9A8117880A962") public static boolean allowFileSchemeCookies(){  if (JniUtil.useChromiumHttpStack()) {    return nativeAcceptFileSchemeCookies();  } else {    return true;  }}  }
class C{  protected void copy_cover_sets(CoverTreeNode query_chi,MyHeap new_upper_k,Stack<Stack<d_node>> cover_sets,Stack<Stack<d_node>> new_cover_sets,int current_scale,int max_scale) throws Exception {  new_cover_sets.clear();  for (; current_scale <= max_scale; current_scale++) {    d_node ele;    Stack<d_node> cover_set_currentscale=getCoverSet(current_scale,cover_sets);    for (int i=0; i < cover_set_currentscale.length; i++) {      ele=cover_set_currentscale.element(i);      double upper_dist=new_upper_k.peek().distance + query_chi.max_dist + ele.n.max_dist;      if (shell(ele.dist,query_chi.parent_dist,upper_dist)) {        double d=Math.sqrt(m_DistanceFunction.distance(query_chi.p(),ele.n.p(),upper_dist * upper_dist));        if (m_TreeStats != null) {          m_TreeStats.incrPointCount();        }        if (d <= upper_dist) {          if (d < new_upper_k.peek().distance) {            update(new_upper_k,d);          }          d_node temp=new d_node(d,ele.n);          new_cover_sets.element(current_scale).push(temp);          if (m_TreeStats != null) {            m_TreeStats.incrIntNodeCount();          }        }      }    }  }}  }
class C{  public static void generateRPClass(){  final RPClass rpclass=new RPClass(Events.PRIVATE_TEXT);  rpclass.add(DefinitionClass.ATTRIBUTE,TEXT_TYPE,Type.STRING);  rpclass.add(DefinitionClass.ATTRIBUTE,CHANNEL,Type.STRING);  rpclass.add(DefinitionClass.ATTRIBUTE,TEXT,Type.LONG_STRING);}  }
class C{  @Override public final int compareTo(Term other){  if (field.equals(other.field)) {    return bytes.compareTo(other.bytes);  } else {    return field.compareTo(other.field);  }}  }
class C{  private void auditTruststorePatialSuccess(OperationTypeEnum auditType,Object... descparams){  URI username=URI.create(getUserFromContext().getName());  auditMgr.recordAuditLog(null,username,EVENT_SERVICE_TYPE,auditType,System.currentTimeMillis(),"PARTIAL_SUCCESS",null,descparams);}  }
class C{  void reset(){  i=0;}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public synchronized void parse(InputSource inputSource) throws SAXException, IOException {  xmlReader.setContentHandler(new SimpleSAXDefaultHandler());  xmlReader.parse(inputSource);}  }
class C{  public SlimException(final Throwable t,final ErrorType type,final String... args){  this(true,t,type,args);}  }
class C{  private static void analyzeLocalMachine(){  _localPar=Runtime.getRuntime().availableProcessors();  _localJVMMaxMem=Runtime.getRuntime().maxMemory();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.285 -0500",hash_original_method="16007B10D324732000F0755E804F2C6B",hash_generated_method="862D3F90B941C9EBECA4941BD16C4649") public void drawBitmap(int[] colors,int offset,int stride,float x,float y,int width,int height,boolean hasAlpha,Paint paint){  if (width < 0) {    throw new IllegalArgumentException("width must be >= 0");  }  if (height < 0) {    throw new IllegalArgumentException("height must be >= 0");  }  if (Math.abs(stride) < width) {    throw new IllegalArgumentException("abs(stride) must be >= width");  }  int lastScanline=offset + (height - 1) * stride;  int length=colors.length;  if (offset < 0 || (offset + width > length) || lastScanline < 0 || (lastScanline + width > length)) {    throw new ArrayIndexOutOfBoundsException();  }  if (width == 0 || height == 0) {    return;  }  addTaint(colors[0] + offset + stride+ x+ y+ width+ height+ paint.getTaintInt());  addTaint(hasAlpha);}  }
class C{  public void reset(){  mBuffer=new StringBuffer();}  }
class C{  public void keyTyped(final KeyEvent arg0){}  }
class C{  public DefaultStateMachineExecutor(StateMachine<S,E> stateMachine,StateMachine<S,E> relayStateMachine,Collection<Transition<S,E>> transitions,Map<Trigger<S,E>,Transition<S,E>> triggerToTransitionMap,List<Transition<S,E>> triggerlessTransitions,Transition<S,E> initialTransition,Message<E> initialEvent){  this.stateMachine=stateMachine;  this.relayStateMachine=relayStateMachine;  this.triggerToTransitionMap=triggerToTransitionMap;  this.triggerlessTransitions=triggerlessTransitions;  this.transitions=transitions;  this.initialTransition=initialTransition;  this.initialEvent=initialEvent;  registerTriggerListener();}  }
class C{  public static DiffObject parse(Change.Id changeId,String str){  if (str == null || str.isEmpty()) {    return new DiffObject(false);  }  if (AUTO_MERGE.equals(str)) {    return new DiffObject(true);  }  try {    return new DiffObject(new PatchSet.Id(changeId,Integer.parseInt(str)));  } catch (  NumberFormatException e) {    return null;  }}  }
class C{  public SweepLineEvent(double x,SweepLineEvent insertEvent){  eventType=DELETE;  xValue=x;  this.insertEvent=insertEvent;}  }
class C{  private void sendAfterConnect(Channel ch,NettyChannelContext contextFinal,Operation request,NettyChannelGroup group){  if (request.getStatusCode() < Operation.STATUS_CODE_FAILURE_THRESHOLD) {    request.complete();  } else {    request.fail(request.getStatusCode());  }}  }
class C{  public synchronized boolean isStopped(){  return stopped;}  }
class C{  public UrlValidator(long options){  this(null,null,options);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public LogoutRequestData(String initiator,String initiatorRequestId){  this.initiator=initiator;  this.initiatorRequestId=initiatorRequestId;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  private static Object[] doReadBinaryEnumArray(BinaryInputStream in,BinaryContext ctx){  int len=in.readInt();  Object[] arr=(Object[])Array.newInstance(BinaryObject.class,len);  for (int i=0; i < len; i++) {    byte flag=in.readByte();    if (flag == GridBinaryMarshaller.NULL)     arr[i]=null; else     arr[i]=doReadBinaryEnum(in,ctx,doReadEnumType(in));  }  return arr;}  }
class C{  private void createTunnel(int readTimeout,int writeTimeout) throws IOException {  Request tunnelRequest=createTunnelRequest();  HttpUrl url=tunnelRequest.url();  String requestLine="CONNECT " + url.host() + ":"+ url.port()+ " HTTP/1.1";  while (true) {    Http1xStream tunnelConnection=new Http1xStream(null,source,sink);    source.timeout().timeout(readTimeout,MILLISECONDS);    sink.timeout().timeout(writeTimeout,MILLISECONDS);    tunnelConnection.writeRequest(tunnelRequest.headers(),requestLine);    tunnelConnection.finishRequest();    Response response=tunnelConnection.readResponse().request(tunnelRequest).build();    long contentLength=OkHeaders.contentLength(response);    if (contentLength == -1L) {      contentLength=0L;    }    Source body=tunnelConnection.newFixedLengthSource(contentLength);    Util.skipAll(body,Integer.MAX_VALUE,TimeUnit.MILLISECONDS);    body.close();switch (response.code()) {case HTTP_OK:      if (!source.buffer().exhausted() || !sink.buffer().exhausted()) {        throw new IOException("TLS tunnel buffered too many bytes!");      }    return;case HTTP_PROXY_AUTH:  tunnelRequest=route.address().proxyAuthenticator().authenticate(route,response);if (tunnelRequest != null) continue;throw new IOException("Failed to authenticate with proxy");default :throw new IOException("Unexpected response code for CONNECT: " + response.code());}}}  }
class C{  private static void copyStream(InputStream source,OutputStream dest) throws IOException {  int bytes;  byte[] buffer;  int BUFFER_SIZE=1024;  buffer=new byte[BUFFER_SIZE];  while ((bytes=source.read(buffer)) > 0) {    dest.write(buffer,0,bytes);  }}  }
class C{  protected List<String> parseRobotsTxt(InputStream is) throws IOException {  List<String> disallows=new ArrayList<>();  BufferedReader r=new BufferedReader(new InputStreamReader(is,StandardCharsets.UTF_8));  String l;  while ((l=r.readLine()) != null) {    String[] arr=l.split("#");    if (arr.length == 0)     continue;    l=arr[0].trim();    if (l.startsWith(DISALLOW)) {      l=l.substring(DISALLOW.length()).trim();      if (l.length() == 0)       continue;      disallows.add(l);    }  }  is.close();  return disallows;}  }
class C{  public SnapshotSchema(String schemaJSON,Map<String,String> schemaKeys){  this(schemaJSON);  setSchemaKeys(schemaKeys);}  }
class C{  public static ObjectAnimator ofObject(Object target,String propertyName,TypeEvaluator evaluator,Object... values){  ObjectAnimator anim=new ObjectAnimator(target,propertyName);  anim.setObjectValues(values);  anim.setEvaluator(evaluator);  return anim;}  }
class C{  public boolean equals(Object o){  return (compareTo(o) == 0);}  }
class C{  public void end(String namespace,String name) throws Exception {  AttributeBean top=null;  try {    top=(AttributeBean)digester.pop();  } catch (  Exception e) {    throw new IllegalStateException("Popped object is not a " + CLASS_NAME + " instance");  }  AttributeHolder ah=(AttributeHolder)digester.peek();  AttributeBean old=ah.getAttribute(top.getAttributeName());  if (old == null) {    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("[AttributeRule]{" + digester.getMatch() + "} New("+ top.getAttributeName()+ ")");    }    ah.addAttribute(top);  } else {    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("[AttributeRule]{" + digester.getMatch() + "} Merge("+ top.getAttributeName()+ ")");    }    mergeAttribute(top,old);  }}  }
class C{  public String number(){  StringBuilder sb=new StringBuilder();  sb.append(major).append('.').append(minor).append('.').append(revision);  if (isBeta()) {    if (major >= 2) {      sb.append("-beta");    } else {      sb.append(".Beta");    }    sb.append(build);  } else   if (build < 99) {    if (major >= 2) {      sb.append("-rc");    } else {      sb.append(".RC");    }    sb.append(build - 50);  }  return sb.toString();}  }
class C{  public Object visit(ExcludeFilter filter,Object extraData){  filterBuilder=QueryBuilders.boolQuery().mustNot(QueryBuilders.matchAllQuery());  return extraData;}  }
class C{  @RequestMapping(value="/bars/{id}",method=RequestMethod.DELETE,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Void> deleteBar(@PathVariable Long id){  log.debug("REST request to delete Bar : {}",id);  barRepository.delete(id);  return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert("bar",id.toString())).build();}  }
class C{  @Override protected boolean useScroll(final Player player){  final StendhalRPZone zone=player.getZone();  if (zone.isInProtectionArea(player)) {    player.sendPrivateText("The aura of protection in this area prevents the scroll from working!");    return false;  }  if (zone.getNPCList().size() >= MAX_ZONE_NPCS) {    player.sendPrivateText("Mysteriously, the scroll does not function! Perhaps this area is too crowded...");    logger.info("Too many npcs to summon another creature");    return false;  }  final int x=player.getInt("x");  final int y=player.getInt("y");  final EntityManager manager=SingletonRepository.getEntityManager();  Creature pickedCreature=null;  final String type=getInfoString();  if (type != null) {    pickedCreature=manager.getCreature(type);  } else {    final Collection<Creature> creatures=manager.getCreatures();    final int magiclevel=4;    final List<Creature> possibleCreatures=new ArrayList<Creature>();    for (    final Creature creature : creatures) {      if (creature.getLevel() <= magiclevel && !creature.isRare()) {        possibleCreatures.add(creature);      }    }    final int pickedIdx=(int)(Math.random() * possibleCreatures.size());    pickedCreature=possibleCreatures.get(pickedIdx);  }  if (pickedCreature == null) {    player.sendPrivateText("This scroll does not seem to work. You should talk to the magician who created it.");    return false;  }  final AttackableCreature creature=new AttackableCreature(pickedCreature);  Map<String,String> profiles=new HashMap<String,String>(creature.getAIProfiles());  if (profiles.containsKey("coward")) {    profiles.remove("coward");    creature.setAIProfiles(profiles);  }  if (profiles.containsKey("stupid coward")) {    profiles.remove("stupid coward");    creature.setAIProfiles(profiles);  }  StendhalRPAction.placeat(zone,creature,x,y);  creature.init();  creature.setMaster(player.getTitle());  creature.clearDropItemList();  creature.put("title_type","friend");  return true;}  }
class C{  public static final void turnOnDebugBBox(Color color){  showBBox=true;  showBBoxColor=color;}  }
class C{  private void addToPeersBefore(CacheDataPage newDataPage,CacheDataPage origDataPage) throws IOException {  DataPageMain origMain=origDataPage._main;  DataPageMain newMain=newDataPage._main;  DataPageMain prevMain=origMain.getPrevPage();  newMain._nextPageNumber=origMain._pageNumber;  newMain._prevPageNumber=origMain._prevPageNumber;  origMain._prevPageNumber=newMain._pageNumber;  if (prevMain != null) {    setModified(new CacheDataPage(prevMain));    prevMain._nextPageNumber=newMain._pageNumber;  }}  }
class C{  public FloatMatrix max(FloatMatrix other){  return maxi(other,new FloatMatrix(rows,columns));}  }
class C{  public void traverse(int pos,int top) throws org.xml.sax.SAXException {  while (DTM.NULL != pos) {    startNode(pos);    int nextNode=m_dtm.getFirstChild(pos);    while (DTM.NULL == nextNode) {      endNode(pos);      if ((DTM.NULL != top) && top == pos)       break;      nextNode=m_dtm.getNextSibling(pos);      if (DTM.NULL == nextNode) {        pos=m_dtm.getParent(pos);        if ((DTM.NULL == pos) || ((DTM.NULL != top) && (top == pos))) {          nextNode=DTM.NULL;          break;        }      }    }    pos=nextNode;  }}  }
class C{  protected Coord parsePoint() throws IOException {  String coords=readNestedContents(reader);  Scanner s=new Scanner(coords);  double x, y;  try {    x=s.nextDouble();    y=s.nextDouble();  } catch (  RuntimeException e) {    throw new IOException("Bad coordinate values: '" + coords + "'");  }  return new Coord(x,y);}  }
class C{  @Override public void drawBackground(Graphics2D g2,CategoryPlot plot,Rectangle2D dataArea){  float x0=(float)dataArea.getX();  float x1=x0 + (float)Math.abs(this.xOffset);  float x3=(float)dataArea.getMaxX();  float x2=x3 - (float)Math.abs(this.xOffset);  float y0=(float)dataArea.getMaxY();  float y1=y0 - (float)Math.abs(this.yOffset);  float y3=(float)dataArea.getMinY();  float y2=y3 + (float)Math.abs(this.yOffset);  GeneralPath clip=new GeneralPath();  clip.moveTo(x0,y0);  clip.lineTo(x0,y2);  clip.lineTo(x1,y3);  clip.lineTo(x3,y3);  clip.lineTo(x3,y1);  clip.lineTo(x2,y0);  clip.closePath();  Composite originalComposite=g2.getComposite();  g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,plot.getBackgroundAlpha()));  Paint backgroundPaint=plot.getBackgroundPaint();  if (backgroundPaint != null) {    g2.setPaint(backgroundPaint);    g2.fill(clip);  }  GeneralPath leftWall=new GeneralPath();  leftWall.moveTo(x0,y0);  leftWall.lineTo(x0,y2);  leftWall.lineTo(x1,y3);  leftWall.lineTo(x1,y1);  leftWall.closePath();  g2.setPaint(getWallPaint());  g2.fill(leftWall);  GeneralPath bottomWall=new GeneralPath();  bottomWall.moveTo(x0,y0);  bottomWall.lineTo(x1,y1);  bottomWall.lineTo(x3,y1);  bottomWall.lineTo(x2,y0);  bottomWall.closePath();  g2.setPaint(getWallPaint());  g2.fill(bottomWall);  g2.setPaint(Color.lightGray);  Line2D corner=new Line2D.Double(x0,y0,x1,y1);  g2.draw(corner);  corner.setLine(x1,y1,x1,y3);  g2.draw(corner);  corner.setLine(x1,y1,x3,y1);  g2.draw(corner);  Image backgroundImage=plot.getBackgroundImage();  if (backgroundImage != null) {    Rectangle2D adjusted=new Rectangle2D.Double(dataArea.getX() + getXOffset(),dataArea.getY(),dataArea.getWidth() - getXOffset(),dataArea.getHeight() - getYOffset());    plot.drawBackgroundImage(g2,adjusted);  }  g2.setComposite(originalComposite);}  }
class C{  private boolean doProcessEvent(XEvent ev){  assert XToolkit.isAWTLockHeldByCurrentThread();  if (processProxyModeEvent(ev)) {    return true;  }  if (!dndInProgress) {    return false;  }switch (ev.get_type()) {case XConstants.ClientMessage:{      XClientMessageEvent xclient=ev.get_xclient();      return processClientMessage(xclient);    }case XConstants.DestroyNotify:{    XDestroyWindowEvent xde=ev.get_xdestroywindow();    if (!dragInProgress && dragProtocol != null && xde.get_window() == dragProtocol.getTargetWindow()) {      cleanup(XConstants.CurrentTime);      return true;    }    return false;  }}if (!dragInProgress) {return false;}switch (ev.get_type()) {case XConstants.KeyRelease:case XConstants.KeyPress:{  XKeyEvent xkey=ev.get_xkey();  long keysym=XlibWrapper.XKeycodeToKeysym(XToolkit.getDisplay(),xkey.get_keycode(),0);switch ((int)keysym) {case (int)XKeySymConstants.XK_Escape:{      if (ev.get_type() == (int)XConstants.KeyRelease) {        cleanup(xkey.get_time());      }      break;    }case (int)XKeySymConstants.XK_Control_R:case (int)XKeySymConstants.XK_Control_L:case (int)XKeySymConstants.XK_Shift_R:case (int)XKeySymConstants.XK_Shift_L:{    XlibWrapper.XQueryPointer(XToolkit.getDisplay(),xkey.get_root(),XlibWrapper.larg1,XlibWrapper.larg2,XlibWrapper.larg3,XlibWrapper.larg4,XlibWrapper.larg5,XlibWrapper.larg6,XlibWrapper.larg7);    XMotionEvent xmotion=new XMotionEvent();    try {      xmotion.set_type(XConstants.MotionNotify);      xmotion.set_serial(xkey.get_serial());      xmotion.set_send_event(xkey.get_send_event());      xmotion.set_display(xkey.get_display());      xmotion.set_window(xkey.get_window());      xmotion.set_root(xkey.get_root());      xmotion.set_subwindow(xkey.get_subwindow());      xmotion.set_time(xkey.get_time());      xmotion.set_x(xkey.get_x());      xmotion.set_y(xkey.get_y());      xmotion.set_x_root(xkey.get_x_root());      xmotion.set_y_root(xkey.get_y_root());      xmotion.set_state((int)Native.getLong(XlibWrapper.larg7));      xmotion.set_same_screen(xkey.get_same_screen());      processMouseMove(xmotion);    }  finally {      xmotion.dispose();    }    break;  }}return true;}case XConstants.ButtonPress:return true;case XConstants.MotionNotify:processMouseMove(ev.get_xmotion());return true;case XConstants.ButtonRelease:{XButtonEvent xbutton=ev.get_xbutton();if (xbutton.get_button() > SunToolkit.MAX_BUTTONS_SUPPORTED) {return true;}XMotionEvent xmotion=new XMotionEvent();try {xmotion.set_type(XConstants.MotionNotify);xmotion.set_serial(xbutton.get_serial());xmotion.set_send_event(xbutton.get_send_event());xmotion.set_display(xbutton.get_display());xmotion.set_window(xbutton.get_window());xmotion.set_root(xbutton.get_root());xmotion.set_subwindow(xbutton.get_subwindow());xmotion.set_time(xbutton.get_time());xmotion.set_x(xbutton.get_x());xmotion.set_y(xbutton.get_y());xmotion.set_x_root(xbutton.get_x_root());xmotion.set_y_root(xbutton.get_y_root());xmotion.set_state(xbutton.get_state());xmotion.set_same_screen(xbutton.get_same_screen());processMouseMove(xmotion);}  finally {xmotion.dispose();}if (xbutton.get_button() == XConstants.buttons[0] || xbutton.get_button() == XConstants.buttons[1]) {removeDnDGrab(xbutton.get_time());dragInProgress=false;if (dragProtocol != null && targetAction != DnDConstants.ACTION_NONE) {processDrop(xbutton);} else {cleanup(xbutton.get_time());}}return true;}}return false;}  }
class C{  public void generateSkeleton(@NotNull String modname,@Nullable String modfilename,@Nullable List<String> assemblyRefs,Consumer<Boolean> resultConsumer) throws InvalidSdkException {  mySkeletonsGenerator.generateSkeleton(modname,modfilename,assemblyRefs,getExtraSyspath(),mySdk.getHomePath(),resultConsumer);}  }
class C{  protected double defaultNoiseRate(){  return 0.0;}  }
class C{  public void draw(float[] mvpMatrix,float[] mvMatrix){  GLES20.glUseProgram(mProgram);  GLES20.glBlendFunc(GLES20.GL_SRC_ALPHA,GLES20.GL_ONE_MINUS_SRC_ALPHA);  mTextureCoordHandle=GLES20.glGetAttribLocation(mProgram,"a_TexCoordinate");  ViewerRenderer.checkGlError("glGetAttribLocation Texture Coord Handle");  GLES20.glVertexAttribPointer(mTextureCoordHandle,COORDS_PER_TEXTURE,GLES20.GL_FLOAT,false,0,mTextureBuffer);  GLES20.glEnableVertexAttribArray(mTextureCoordHandle);  ViewerRenderer.checkGlError("glGetAttribLocation Texture Coord Handle");  mTextureUniformHandle=GLES20.glGetUniformLocation(mProgram,"u_Texture");  ViewerRenderer.checkGlError("glGetUniformLocation Texture Uniform Handle");  GLES20.glActiveTexture(GLES20.GL_TEXTURE0);  GLES20.glBindTexture(GLES20.GL_TEXTURE_2D,mTextureDataHandle);  GLES20.glUniform1i(mTextureUniformHandle,0);  mPositionHandle=GLES20.glGetAttribLocation(mProgram,"a_Position");  ViewerRenderer.checkGlError("glGetAttribLocation Position Handle");  GLES20.glEnableVertexAttribArray(mPositionHandle);  GLES20.glVertexAttribPointer(mPositionHandle,COORDS_PER_VERTEX,GLES20.GL_FLOAT,false,0,mVertexBuffer);  mColorHandle=GLES20.glGetUniformLocation(mProgram,"a_Color");  GLES20.glUniform4fv(mColorHandle,1,mColor,0);  mNormalHandle=GLES20.glGetAttribLocation(mProgram,"a_Normal");  ViewerRenderer.checkGlError("glGetAttribLocation Normal Handle");  GLES20.glVertexAttribPointer(mNormalHandle,COORDS_PER_NORMAL,GLES20.GL_FLOAT,false,0,mNormalBuffer);  GLES20.glEnableVertexAttribArray(mNormalHandle);  mMVPMatrixHandle=GLES20.glGetUniformLocation(mProgram,"u_MVPMatrix");  try {    ViewerRenderer.checkGlError("glGetUniformLocation");  } catch (  RuntimeException e) {  }  GLES20.glUniformMatrix4fv(mMVPMatrixHandle,1,false,mvpMatrix,0);  ViewerRenderer.checkGlError("glUniformMatrix4fv");  mMVMatrixHandle=GLES20.glGetUniformLocation(mProgram,"u_MVMatrix");  ViewerRenderer.checkGlError("glGetUniformLocation");  GLES20.glUniformMatrix4fv(mMVMatrixHandle,1,false,mvMatrix,0);  ViewerRenderer.checkGlError("glUniformMatrix4fv");  GLES20.glDrawElements(GLES20.GL_TRIANGLES,mDrawOrder.length,GLES20.GL_UNSIGNED_SHORT,mOrderListBuffer);  GLES20.glDisableVertexAttribArray(mPositionHandle);}  }
class C{  public void resolveChainedTargets(){  final Map<TypeVariable,InferredValue> inferredTypes=new LinkedHashMap<>(this.size());  boolean grew=true;  while (grew == true) {    grew=false;    for (    final Entry<TypeVariable,InferredValue> inferred : this.entrySet()) {      final TypeVariable target=inferred.getKey();      final InferredValue value=inferred.getValue();      if (value instanceof InferredType) {        inferredTypes.put(target,value);      } else {        final InferredTarget currentTarget=(InferredTarget)value;        final InferredType equivalentType=(InferredType)inferredTypes.get(((InferredTarget)value).target);        if (equivalentType != null) {          grew=true;          final AnnotatedTypeMirror type=equivalentType.type.deepCopy();          type.replaceAnnotations(currentTarget.additionalAnnotations);          final InferredType newConstraint=new InferredType(type);          inferredTypes.put(currentTarget.target,newConstraint);        }      }    }  }  this.putAll(inferredTypes);}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  public Bundler putDoubleArray(String key,double[] value){  bundle.putDoubleArray(key,value);  return this;}  }
class C{  private long incrementAndGet(IgniteAtomicSequence seq) throws Exception {  long locSeqVal=seq.get();  assertEquals(locSeqVal + 1,seq.incrementAndGet());  assertEquals(locSeqVal + 1,seq.get());  return seq.get();}  }
class C{  public static SourceLineAnnotation fromVisitedInstruction(ClassContext classContext,Method method,Location loc){  return fromVisitedInstruction(classContext,method,loc.getHandle());}  }
class C{  public List<StateRO> viewAddressCountryStateOptions(final ShoppingCart cart,final Shop shop,final String countryCode){  final List<State> states=addressBookFacade.getStatesByCountry(countryCode);  return map(states,StateRO.class,State.class);}  }
class C{  protected void update(IInterval interval){}  }
class C{  public boolean isConcrete(String className) throws IllegalArgumentException {  checkClass(className);  return !isInterface(className) && !isAbstract(className);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.349 -0500",hash_original_method="E56C1DBFA6D115BECC52B4F023195FFE",hash_generated_method="98D37AC4AE7F45F8ACA53A1010D4A644") public final static boolean isStartsPostDial(char c){  return c == PAUSE || c == WAIT;}  }
class C{  @TargetApi(Build.VERSION_CODES.LOLLIPOP) private static boolean moveToFront(AppTask task){  try {    task.moveToFront();    return true;  } catch (  SecurityException e) {    sMoveToFrontExceptionHistogram.recordHit();  }  return false;}  }
class C{  public RosterEntryComboBox(){  this(Roster.getDefault(),Roster.getDefault().getDefaultRosterGroup(),null,null,null,null,null,null,null);}  }
class C{  public int findCarByRoadNumber(String roadNumber){  if (sysList != null) {    if (!roadNumber.equals(_roadNumber)) {      return getIndex(0,roadNumber);    }    int index=getIndex(_index,roadNumber);    if (index > 0) {      return index;    }    return getIndex(0,roadNumber);  }  return -1;}  }
class C{  Method[] remoteMethods(){  return remoteMethods.clone();}  }
class C{  @DSComment("No op default handler") @DSSafe(DSCat.XML) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:49.168 -0500",hash_original_method="3C476190220BFC4330D41CB0A7E5D96B",hash_generated_method="CACE9FD48F5BBAC46481DE007E53B3CB") public void error(SAXParseException e) throws SAXException {}  }
class C{  void internalSend(MqttWireMessage message,MqttToken token) throws MqttException {  final String methodName="internalSend";  log.fine(CLASS_NAME,methodName,"200",new Object[]{message.getKey(),message,token});  if (token.getClient() == null) {    token.internalTok.setClient(getClient());  } else {    log.fine(CLASS_NAME,methodName,"213",new Object[]{message.getKey(),message,token});    throw new MqttException(MqttException.REASON_CODE_TOKEN_INUSE);  }  try {    this.clientState.send(message,token);  } catch (  MqttException e) {    if (message instanceof MqttPublish) {      this.clientState.undo((MqttPublish)message);    }    throw e;  }}  }
class C{  public void encodeInfo(OutputStream out) throws CRLException {  try {    DerOutputStream tmp=new DerOutputStream();    DerOutputStream rCerts=new DerOutputStream();    DerOutputStream seq=new DerOutputStream();    if (version != 0)     tmp.putInteger(version);    infoSigAlgId.encode(tmp);    if ((version == 0) && (issuer.toString() == null))     throw new CRLException("Null Issuer DN not allowed in v1 CRL");    issuer.encode(tmp);    if (thisUpdate.getTime() < YR_2050)     tmp.putUTCTime(thisUpdate); else     tmp.putGeneralizedTime(thisUpdate);    if (nextUpdate != null) {      if (nextUpdate.getTime() < YR_2050)       tmp.putUTCTime(nextUpdate); else       tmp.putGeneralizedTime(nextUpdate);    }    if (!revokedList.isEmpty()) {      for (      X509CRLEntry entry : revokedList) {        ((X509CRLEntryImpl)entry).encode(rCerts);      }      tmp.write(DerValue.tag_Sequence,rCerts);    }    if (extensions != null)     extensions.encode(tmp,isExplicit);    seq.write(DerValue.tag_Sequence,tmp);    tbsCertList=seq.toByteArray();    out.write(tbsCertList);  } catch (  IOException e) {    throw new CRLException("Encoding error: " + e.getMessage());  }}  }
class C{  protected final long buildTookInMillis(){  return Math.max(1,System.currentTimeMillis() - startTime);}  }
class C{  private int read() throws IOException {  int data;  if (unread.size() > 0) {    data=((Integer)unread.lastElement()).intValue();    unread.removeElementAt(unread.size() - 1);  } else {    data=reader.read();  }  if (data != -1) {    readpos++;  }  return data;}  }
class C{  public int findFirstVisibleItemPosition(){  if (getItemCount() == 0) {    return RecyclerView.NO_POSITION;  } else {    return mFirstVisiblePosition;  }}  }
class C{  static UserCredentials fromJson(Map<String,Object> json,HttpTransportFactory transportFactory) throws IOException {  String clientId=(String)json.get("client_id");  String clientSecret=(String)json.get("client_secret");  String refreshToken=(String)json.get("refresh_token");  if (clientId == null || clientSecret == null || refreshToken == null) {    throw new IOException("Error reading user credential from JSON, " + " expecting 'client_id', 'client_secret' and 'refresh_token'.");  }  return new UserCredentials(clientId,clientSecret,refreshToken,null,transportFactory,null);}  }
class C{  public final String equalsMsg(Object other){  if (other == null) {    return "Comparing with null object";  }  if (!(other.getClass().equals(this.getClass()))) {    return "Object has wrong class";  }  Attribute att=(Attribute)other;  if (!m_Name.equals(att.m_Name)) {    return "Names differ: " + m_Name + " != "+ att.m_Name;  }  if (isNominal() && att.isNominal()) {    if (((NominalAttributeInfo)m_AttributeInfo).m_Values.size() != ((NominalAttributeInfo)att.m_AttributeInfo).m_Values.size()) {      return "Different number of labels: " + ((NominalAttributeInfo)m_AttributeInfo).m_Values.size() + " != "+ ((NominalAttributeInfo)att.m_AttributeInfo).m_Values.size();    }    for (int i=0; i < ((NominalAttributeInfo)m_AttributeInfo).m_Values.size(); i++) {      if (!((NominalAttributeInfo)m_AttributeInfo).m_Values.get(i).equals(((NominalAttributeInfo)att.m_AttributeInfo).m_Values.get(i))) {        return "Labels differ at position " + (i + 1) + ": "+ ((NominalAttributeInfo)m_AttributeInfo).m_Values.get(i)+ " != "+ ((NominalAttributeInfo)att.m_AttributeInfo).m_Values.get(i);      }    }    return null;  }  if (isRelationValued() && att.isRelationValued()) {    return ((RelationalAttributeInfo)m_AttributeInfo).m_Header.equalHeadersMsg(((RelationalAttributeInfo)att.m_AttributeInfo).m_Header);  }  if ((type() != att.type())) {    return "Types differ: " + typeToString(this) + " != "+ typeToString(att);  }  return null;}  }
class C{  public void widgetDefaultSelected(SelectionEvent e){  widgetSelected(e);}  }
class C{  public String voteFlagTipText(){  return "Whether to use voting or not.";}  }
class C{  public static double median(final List<Double> list){  return getStatistics(list).getPercentile(50);}  }
class C{  public static boolean isGuiThread(){  return (Looper.myLooper() == Looper.getMainLooper());}  }
class C{  public static GetDeletedImagesResponse checkGetDeletedImagesResponse(GetDeletedImagesResponse response) throws RpcException {  logger.info("Checking {}",response);switch (response.getResult()) {case OK:    break;case SYSTEM_ERROR:  throw new SystemErrorException(response.getError());case DATASTORE_NOT_FOUND:throw new DatastoreNotFoundException(response.getError());case OPERATION_IN_PROGRESS:throw new OperationInProgressException(response.getError());default :throw new RpcException(String.format("Unexpected return code: %s",response.getResult()));}return response;}  }
class C{  public boolean equals(Object objectToCompare){  if (super.equals(objectToCompare))   return true;  if (objectToCompare instanceof Percent) {    if (CoreUtils.nullSafeComparator(((Percent)objectToCompare).getBigDecimalValue(),this.getBigDecimalValue()) == 0)     return true;  }  return false;}  }
class C{  private static void notifyDeveloperError(String message){  Logger.log(LoggingBehavior.DEVELOPER_ERRORS,"AppEvents",message);}  }
class C{  @DSComment("Activity on IO class") @DSSpec(DSCat.IO) @DSSink({DSSinkKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:51.604 -0500",hash_original_method="CF32CDDE2940A658D82FD10746BC6D29",hash_generated_method="FFEB530BBD04B1626761EF212111F721") @Override public void write(String str){  addTaint(str.getTaint());}  }
class C{  public VMRPDetailed(){  initComponents();}  }
class C{  public static float[] RGBtoHSL(int r,int g,int b){  return RGBtoHSL(r,g,b,null);}  }
class C{  private MarkupContainer createShippmentFragment(){  return new Fragment(CONTENT_VIEW,SHIPMENT_FRAGMENT,this).add(new ShippingView(SHIPMENT_VIEW));}  }
class C{  private void checkRep(){  if (!GenInputsAbstract.debug_checks) {    return;  }  if (statements == null) {    throw new RuntimeException("statements == null");  }  for (int si=0; si < this.statements.size(); si++) {    Statement statementWithInputs=this.statements.get(si);    if (statementWithInputs == null) {      throw new IllegalStateException("Null statement in sequence:" + Globals.lineSep + this.toString());    }    if (statementWithInputs.inputs == null) {      throw new IllegalArgumentException("parameters cannot be null.");    }    if (statementWithInputs.getInputTypes().size() != statementWithInputs.inputs.size()) {      throw new IllegalArgumentException("statement.getInputConstraints().size()=" + statementWithInputs.getInputTypes().size() + " is different from inputIndices.length="+ statementWithInputs.inputs.size()+ ", sequence: "+ this.toString());    }    for (int i=0; i < statementWithInputs.inputs.size(); i++) {      int index=statementWithInputs.inputs.get(i).index;      if (index >= 0)       throw new IllegalStateException();      Type newRefConstraint=statements.get(si + statementWithInputs.inputs.get(i).index).getOutputType();      if (newRefConstraint == null)       throw new IllegalStateException();      if (!(statementWithInputs.getInputTypes().get(i).isAssignableFrom(newRefConstraint))) {        throw new IllegalArgumentException(i + "th input constraint " + newRefConstraint+ " does not imply "+ "statement's "+ i+ "th input constraint "+ statementWithInputs.getInputTypes().get(i)+ Globals.lineSep+ ".Sequence:"+ Globals.lineSep+ this.toString());      }    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createElementNS04.class,args);}  }
class C{  public BitMatrix part(int column,int row,int width,int height){  if (column < 0 || column + width > columns || row < 0 || row + height > rows)   throw new IndexOutOfBoundsException("column:" + column + ", row:"+ row+ " ,width:"+ width+ ", height:"+ height);  if (width <= 0 || height <= 0)   return new BitMatrix(0,0);  BitMatrix subMatrix=new BitMatrix(width,height);  subMatrix.replaceBoxWith(0,0,width,height,this,column,row);  return subMatrix;}  }
class C{  private void initializeNode(int nodeIndex){  Node node=nodes[nodeIndex];  Graph graph=getBayesPm().getDag();  List<Node> parentList=new ArrayList<>(graph.getParents(node));  int[] parentArray=new int[parentList.size()];  for (int i=0; i < parentList.size(); i++) {    parentArray[i]=getNodeIndex(parentList.get(i));  }  Arrays.sort(parentArray);  parents[nodeIndex]=parentArray;  int[] dims=new int[parentArray.length];  for (int i=0; i < dims.length; i++) {    Node parNode=nodes[parentArray[i]];    dims[i]=getBayesPm().getNumCategories(parNode);  }  parentDims[nodeIndex]=dims;}  }
class C{  private static VkInstance createInstance(PointerBuffer requiredExtensions){  VkApplicationInfo appInfo=VkApplicationInfo.calloc().sType(VK_STRUCTURE_TYPE_APPLICATION_INFO).pApplicationName(memUTF8("GLFW Vulkan Demo")).pEngineName(memUTF8("")).apiVersion(VK_MAKE_VERSION(1,0,2));  PointerBuffer ppEnabledExtensionNames=memAllocPointer(requiredExtensions.remaining() + 1);  ppEnabledExtensionNames.put(requiredExtensions);  ByteBuffer VK_EXT_DEBUG_REPORT_EXTENSION=memUTF8(VK_EXT_DEBUG_REPORT_EXTENSION_NAME);  ppEnabledExtensionNames.put(VK_EXT_DEBUG_REPORT_EXTENSION);  ppEnabledExtensionNames.flip();  PointerBuffer ppEnabledLayerNames=memAllocPointer(layers.length);  for (int i=0; validation && i < layers.length; i++)   ppEnabledLayerNames.put(layers[i]);  ppEnabledLayerNames.flip();  VkInstanceCreateInfo pCreateInfo=VkInstanceCreateInfo.calloc().sType(VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO).pNext(NULL).pApplicationInfo(appInfo).ppEnabledExtensionNames(ppEnabledExtensionNames).ppEnabledLayerNames(ppEnabledLayerNames);  PointerBuffer pInstance=memAllocPointer(1);  int err=vkCreateInstance(pCreateInfo,null,pInstance);  long instance=pInstance.get(0);  memFree(pInstance);  if (err != VK_SUCCESS) {    throw new AssertionError("Failed to create VkInstance: " + translateVulkanResult(err));  }  VkInstance ret=new VkInstance(instance,pCreateInfo);  pCreateInfo.free();  memFree(ppEnabledLayerNames);  memFree(VK_EXT_DEBUG_REPORT_EXTENSION);  memFree(ppEnabledExtensionNames);  memFree(appInfo.pApplicationName());  memFree(appInfo.pEngineName());  appInfo.free();  return ret;}  }
class C{  public boolean shouldExecuteAction(){  if (delay <= 0) {    return true;  }  long timePassed=System.currentTimeMillis() - lastActionExecuted;  if (timePassed > delay * 100) {    lastActionExecuted=System.currentTimeMillis();    return true;  }  return false;}  }
class C{  public static BranchCoverageTestFitness createBranchCoverageTestFitness(Branch b,boolean branchExpressionValue){  return new BranchCoverageTestFitness(new BranchCoverageGoal(b,branchExpressionValue,b.getClassName(),b.getMethodName()));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:34.371 -0500",hash_original_method="A2AC90B935B0F7A3AA49E791BAFD5249",hash_generated_method="419F6F98DEC40FCD1FCFEC54581578B9") public static void sort(long[] a){  doSort(a,0,a.length - 1);}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/volumes/ingest") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public TaskList ingestVolumes(VolumeIngest param) throws InternalException {  if (param.getUnManagedVolumes().size() > getMaxBulkSize()) {    throw APIException.badRequests.exceedingLimit("unmanaged volumes",getMaxBulkSize());  }  TaskList taskList=new TaskList();  Map<String,String> taskMap=new HashMap<String,String>();  BaseIngestionRequestContext requestContext=null;  try {    Project project=_permissionsHelper.getObjectById(param.getProject(),Project.class);    ArgValidator.checkEntity(project,param.getProject(),false);    VirtualArray varray=VolumeIngestionUtil.getVirtualArrayForVolumeCreateRequest(project,param.getVarray(),_permissionsHelper,_dbClient);    VirtualPool vpool=VolumeIngestionUtil.getVirtualPoolForVolumeCreateRequest(project,param.getVpool(),_permissionsHelper,_dbClient);    if (null != vpool.getVirtualArrays() && !vpool.getVirtualArrays().isEmpty() && !vpool.getVirtualArrays().contains(param.getVarray().toString())) {      throw APIException.internalServerErrors.virtualPoolNotMatchingVArray(param.getVarray());    }    long unManagedVolumesCapacity=VolumeIngestionUtil.getTotalUnManagedVolumeCapacity(_dbClient,param.getUnManagedVolumes());    TenantOrg tenant=_dbClient.queryObject(TenantOrg.class,project.getTenantOrg().getURI());    CapacityUtils.validateQuotasForProvisioning(_dbClient,vpool,project,tenant,unManagedVolumesCapacity,"volume");    _logger.info("UnManagedVolume provisioning quota validation successful for {}",unManagedVolumesCapacity);    requestContext=new BaseIngestionRequestContext(_dbClient,param.getUnManagedVolumes(),vpool,varray,project,tenant,param.getVplexIngestionMethod());    while (requestContext.hasNext()) {      UnManagedVolume unManagedVolume=requestContext.next();      if (null == unManagedVolume) {        _logger.info("No Unmanaged Volume with URI {} found in database. Continuing...",requestContext.getCurrentUnManagedVolumeUri());        continue;      }      String taskId=UUID.randomUUID().toString();      Operation operation=_dbClient.createTaskOpStatus(UnManagedVolume.class,unManagedVolume.getId(),taskId,ResourceOperationTypeEnum.INGEST_VOLUMES);      TaskResourceRep task=toTask(unManagedVolume,taskId,operation);      taskList.getTaskList().add(task);      taskMap.put(unManagedVolume.getId().toString(),taskId);    }    IngestVolumesUnexportedSchedulingThread.executeApiTask(_asyncTaskService.getExecutorService(),requestContext,ingestStrategyFactory,this,_dbClient,taskMap,taskList);  } catch (  InternalException e) {    throw e;  }catch (  Exception e) {    _logger.debug("Unexpected ingestion exception:",e);    throw APIException.internalServerErrors.genericApisvcError(ExceptionUtils.getExceptionMessage(e),e);  }  return taskList;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:32.882 -0500",hash_original_method="648343BC3C2ABC6FA7BF932A2F48012C",hash_generated_method="6162AA3C31C04BACE391181FBC2BC931") public final void release(boolean reusable){  if (responseBodyIn == cachedResponseBody) {    IoUtils.closeQuietly(responseBodyIn);  }  if (!connectionReleased && connection != null) {    connectionReleased=true;    if (requestBodyOut != null && !requestBodyOut.closed) {      reusable=false;    }    if (hasConnectionCloseHeader()) {      reusable=false;    }    if (responseBodyIn instanceof UnknownLengthHttpInputStream) {      reusable=false;    }    if (reusable && responseBodyIn != null) {      try {        Streams.skipAll(responseBodyIn);      } catch (      IOException e) {        reusable=false;      }    }    if (!reusable) {      connection.closeSocketAndStreams();      connection=null;    } else     if (automaticallyReleaseConnectionToPool) {      HttpConnectionPool.INSTANCE.recycle(connection);      connection=null;    }  }}  }
class C{  public double computeAverageLocalOfObservations() throws Exception {  if (L_1c == null) {    lastAverage=0;  } else {    det1cCovariance=MatrixUtils.determinantViaCholeskyResult(L_1c);    if (L_2c == null) {      lastAverage=0;    } else {      det2cCovariance=MatrixUtils.determinantViaCholeskyResult(L_2c);      if (L == null) {        lastAverage=Double.POSITIVE_INFINITY;      } else {        detCovariance=MatrixUtils.determinantViaCholeskyResult(L);        if (L_cc == null) {          lastAverage=0.5 * Math.log(Math.abs(det1cCovariance * det2cCovariance / detCovariance));        } else {          detccCovariance=MatrixUtils.determinantViaCholeskyResult(L_cc);          lastAverage=0.5 * Math.log(Math.abs(det1cCovariance * det2cCovariance / (detCovariance * detccCovariance)));        }      }    }  }  condMiComputed=true;  return lastAverage;}  }
class C{  public void expandAll(){  int row=0;  while (row < getRowCount()) {    expandRow(row);    row++;  }}  }
class C{  @Override public final boolean incrementToken() throws IOException {  if (cache == null) {    cache=new ArrayList<>(64);    fillCache();    iterator=cache.iterator();  }  if (!iterator.hasNext()) {    return false;  }  restoreState(iterator.next());  return true;}  }
class C{  @Override public void onMessageReceived(RemoteMessage remoteMessage){  Log.d(TAG,"From: " + remoteMessage.getFrom());  Log.d(TAG,"Notification Message Body: " + remoteMessage.getNotification().getBody());  sendNotification(remoteMessage.getNotification().getBody());}  }
class C{  public Object init(InternalContextAdapter context,Object data) throws Exception {  super.init(context,data);  if (uberInfo == null) {    uberInfo=new Info(context.getCurrentTemplateName(),getLine(),getColumn());  }  return data;}  }
class C{  public DGetNewPassword(JDialog parent,String title,Dialog.ModalityType modality,PasswordQualityConfig passwordQualityConfig){  super(parent,title,modality);  this.passwordQualityConfig=passwordQualityConfig;  initComponents();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static FlightStick microsoftSideWinder(int port){  Joystick joystick=new Joystick(port);  return FlightStick.create(null,null,null,null,null,null,null,null,null);}  }
class C{  public void addToIndependentRuntimeItrMapForIndexCreation(CompiledIteratorDef itrDef) throws AmbiguousNameException, TypeMismatchException, NameResolutionException {  Set set=new HashSet();  this.computeUtlimateDependencies(itrDef,set);  RuntimeIterator itr=null;  if (set.isEmpty()) {    itr=itrDef.getRuntimeIterator(this);    set.add(itr);  }  this.itrDefToIndpndtRuntimeItrMap.put(itrDef,set);}  }
class C{  public synchronized final boolean isSilentFlagChanges(){  return silentFlagChanges;}  }
class C{  public PubsubFuture<Void> deleteSubscription(final String project,final String subscription){  return deleteSubscription(canonicalSubscription(project,subscription));}  }
class C{  public void flattenSymbolTable(boolean flattenAllTables){  if (!flattenAllTables) {    List<Symbol> newSymbols=new ArrayList<Symbol>();    if (this.symbolTable != null) {      for (int i=0; i < symbols.size(); i++) {        Symbol symbol=symbols.get(i);        if (symbol.getContainingTable() == this) {          newSymbols.add(symbol);        }      }    }    symbols=newSymbols;  }  variableNames=new String[symbols.size()];  isConsts=new boolean[symbols.size()];  for (int i=0; i < symbols.size(); i++) {    Symbol symbol=symbols.get(i);    variableNames[i]=symbol.getName();    isConsts[i]=symbol.getDeclType() == Token.CONST;    symbol.setIndex(i);  }}  }
class C{  @Override public Boolean exists(final String key){  checkIsInMultiOrPipeline();  client.exists(key);  return client.getIntegerReply() == 1;}  }
class C{  public BusyGlass(){  setLayout(new BorderLayout());  setVisible(false);  setOpaque(false);  setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));}  }
class C{  public static boolean isValidTagAndAlias(String s){  Pattern p=Pattern.compile("^[\u4E00-\u9FA50-9a-zA-Z_-]{0,}$");  Matcher m=p.matcher(s);  return m.matches();}  }
class C{  public SourceBuilder<T> emit(T record){  builder.emit(record);  return this;}  }
class C{  protected void handleModelChangedEvent(Model model,Object object,int index){  resample();}  }
class C{  public void createModel(){  URI resourceURI=EditUIUtil.getURI(getEditorInput());  Exception exception=null;  Resource resource=null;  try {    resource=editingDomain.getResourceSet().getResource(resourceURI,true);  } catch (  Exception e) {    exception=e;    resource=editingDomain.getResourceSet().getResource(resourceURI,false);  }  Diagnostic diagnostic=analyzeResourceProblems(resource,exception);  if (diagnostic.getSeverity() != Diagnostic.OK) {    resourceToDiagnosticMap.put(resource,analyzeResourceProblems(resource,exception));  }  editingDomain.getResourceSet().eAdapters().add(problemIndicationAdapter);}  }
class C{  public IShareRequest buildRequest(){  return buildRequest(getOptions());}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4,E e5,E e6,E e7,E e8,E e9,E e10,E e11){  return construct(e1,e2,e3,e4,e5,e6,e7,e8,e9,e10,e11);}  }
class C{  protected Node deepExport(Node n,AbstractDocument d){  super.deepExport(n,d);  for (Node p=getFirstChild(); p != null; p=p.getNextSibling()) {    Node t=((AbstractNode)p).deepExport(p.cloneNode(false),d);    n.appendChild(t);  }  return n;}  }
class C{  public void expire(long threshold){synchronized (map) {    Iterator<ConnectionsRef> iter=map.values().iterator();    Connections conns;    while (iter.hasNext()) {      conns=iter.next().getConnections();      if (conns.expire(threshold)) {        d("expire(): removing ",conns);        iter.remove();      }    }  }  expungeStaleConnections();}  }
class C{  public static byte[] readAll(InputStream in,long maxLen) throws IOException {  ByteArrayOutputStream out=new ByteArrayOutputStream(Math.max(8192,in.available()));  byte[] buf=new byte[8192];  int read=0;  long totalRead=0;  while ((read=in.read(buf)) > 0) {    out.write(buf,0,read);    totalRead+=read;    if (totalRead > maxLen) {      throw new IOException("Too much data to read into memory. Got already " + totalRead + buf);    }  }  return out.toByteArray();}  }
class C{  public boolean checkValidFormatInMR(){  boolean ret=true;  ExecType CLUSTER=OptimizerUtils.isSparkExecutionMode() ? ExecType.SPARK : ExecType.MR;  if (_conf.getExecType() == CLUSTER) {    if (_childs != null)     for (    Plan c : _childs)     ret&=_node.isValidInputFormatForOperation(c._conf.getFormat());  }  return ret;}  }
class C{  public String previous(){  append("previous()");  int first=data.getFirst();  scroll(first - data.getRows());  return (null);}  }
class C{  public final String toString(int attIndex){  StringBuffer text=new StringBuffer();  if (isMissing(attIndex)) {    text.append("?");  } else {    if (m_Dataset == null) {      text.append(Utils.doubleToString(m_AttValues[attIndex],6));    } else {      if (m_Dataset.attribute(attIndex).isNominal() || m_Dataset.attribute(attIndex).isString()) {        text.append(Utils.quote(stringValue(attIndex)));      } else {        text.append(Utils.doubleToString(value(attIndex),6));      }    }  }  return text.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 15:34:30.634 -0500",hash_original_method="92DAD7D47899A96696ADABA34E37CA07",hash_generated_method="3B64DE5E179374FD8BC81DB74FCC2684") @DSVerified @DSSafe(DSCat.UTIL_FUNCTION) public static byte[] fromAscii(byte[] ascii){  if (ascii == null || ascii.length == 0) {    return EMPTY_BYTE_ARRAY;  }  byte[] l_raw=new byte[ascii.length >> 3];  l_raw.addTaint(ascii.getTaint());  return l_raw;}  }
class C{  public boolean hasControlDependenciesSet(){  return controlDependencies != null;}  }
class C{  @Override public void populateFrame(Audio a){  if (!(a instanceof AudioListener)) {    throw new IllegalArgumentException(a.getSystemName() + " is not an AudioListener object");  }  super.populateFrame(a);  AudioListener l=(AudioListener)a;  position.setValue(l.getPosition());  velocity.setValue(l.getVelocity());  oriAt.setValue(l.getOrientation(Audio.AT));  oriUp.setValue(l.getOrientation(Audio.UP));  gain.setValue(l.getGain());  metersPerUnit.setValue(l.getMetersPerUnit());}  }
class C{  public boolean isPermanentStateModeActivated(){  return readBoolean(RcsSettingsData.PERMANENT_STATE_MODE);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void onDestroy(){  if (mAdapter != null) {    mAdapter.onDestroy();  }}  }
class C{  public void startFitDataSession(FitDataTypeSetting[] dataTypeSettings,String sessionDescription,OnDataPointListener listener){  for (  FitDataTypeSetting dataTypeSetting : dataTypeSettings) {    registerFitDataListener(dataTypeSetting,listener);    startRecordingFitData(dataTypeSetting);  }  Session session=new Session.Builder().setName(SESSION_NAME).setDescription(sessionDescription).setActivity(FitnessActivities.RUNNING_JOGGING).setStartTime(System.currentTimeMillis(),TimeUnit.MILLISECONDS).build();  PendingResult<Status> pendingResult=Fitness.SessionsApi.startSession(mGoogleApiClient,session);  pendingResult.setResultCallback(new FitResultCallback<Status>(this,FitResultCallback.RegisterType.SESSION,null,true));}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (operator: ");  result.append(operator);  result.append(')');  return result.toString();}  }
class C{  public CRightTitle(final String string){  Preconditions.checkNotNull(string,"IE01818: String argument can not be null");  m_string=string;}  }
class C{  @Override public void emitDirect(int taskId,List<Object> tuple){  List<Object> t=_callback.apply(tuple,_context.cloneContext().with(EmitContext.Type.TASK_ID,new Integer(taskId)));  _delegate.emitDirect(taskId,t);}  }
class C{  @Override public Object onClockTick() throws Exception {  if (active) {    if (currentValue == 0) {      isInUnderflowCondition=true;      if (isTmcsrInteSet()) {        requestInterrupt();      }      if (isTmcsrReldSet()) {        currentValue=tmrlra;      } else {        enabled=false;        unRegister();      }    } else {      currentValue--;    }  }  return null;}  }
class C{  public void prev(DoubleNode<E> p){  prev=p;}  }
class C{  public double predict(int uidx,IdxPref pref){  return fm.predict(new FMInstance(pref.v2,new int[]{uidx,pref.v1 + numUsers()},UI_VALUES));}  }
class C{  public void endBucketCreation(PersistentMemberID newId){synchronized (lock) {    if (!atomicCreation) {      if (logger.isDebugEnabled(LogMarker.PERSIST_ADVISOR)) {        logger.debug(LogMarker.PERSIST_ADVISOR,"{}-{}: {} In endBucketCreation - already online, skipping (possible concurrent endBucketCreation)",shortDiskStoreId(),regionPath,regionPath);      }      return;    }    if (logger.isDebugEnabled(LogMarker.PERSIST_ADVISOR)) {      logger.debug(LogMarker.PERSIST_ADVISOR,"{}-{}: {} In endBucketCreation - now persisting the id {}",shortDiskStoreId(),regionPath,regionPath,newId);    }    atomicCreation=false;  }  super.setOnline(false,true,newId);}  }
class C{  @SuppressWarnings("unchecked") public V putCommitted(K key,V value){  DataUtils.checkArgument(value != null,"The value may not be null");  VersionedValue newValue=new VersionedValue();  newValue.value=value;  VersionedValue oldValue=map.put(key,newValue);  return (V)(oldValue == null ? null : oldValue.value);}  }
class C{  public Decompressor(BitReader bitreader){  super();  this.bitreader=bitreader;}  }
class C{  private void rangeCheck(int index){  if (index >= size)   throw new IndexOutOfBoundsException(outOfBoundsMsg(index));}  }
class C{  protected boolean checkElements(){  X_CM_Template thisTemplate=new X_CM_Template(getCtx(),this.getCM_Template_ID(),get_TrxName());  StringBuffer thisElementList=new StringBuffer(thisTemplate.getElements());  while (thisElementList.indexOf("\n") >= 0) {    String thisElement=thisElementList.substring(0,thisElementList.indexOf("\n"));    thisElementList.delete(0,thisElementList.indexOf("\n") + 1);    checkElement(thisElement);  }  String thisElement=thisElementList.toString();  checkElement(thisElement);  return true;}  }
class C{  public <T>String validateBeanFastFail(T bean,String errIfBeanNull){  if (bean == null) {    return errIfBeanNull;  }  Set<ConstraintViolation<T>> violations=validator.validate(bean);  for (  ConstraintViolation<T> violation : violations) {    return violation.getMessage();  }  return null;}  }
class C{  private void encipher(int lr[],int off){  int i, n, l=lr[off], r=lr[off + 1];  l^=P[0];  for (i=0; i <= BLOWFISH_NUM_ROUNDS - 2; ) {    n=S[(l >> 24) & 0xff];    n+=S[0x100 | ((l >> 16) & 0xff)];    n^=S[0x200 | ((l >> 8) & 0xff)];    n+=S[0x300 | (l & 0xff)];    r^=n ^ P[++i];    n=S[(r >> 24) & 0xff];    n+=S[0x100 | ((r >> 16) & 0xff)];    n^=S[0x200 | ((r >> 8) & 0xff)];    n+=S[0x300 | (r & 0xff)];    l^=n ^ P[++i];  }  lr[off]=r ^ P[BLOWFISH_NUM_ROUNDS + 1];  lr[off + 1]=l;}  }
class C{  public void put(Layout<V,E> layout,Point2D center){  layouts.put(layout,center);}  }
class C{  public void formatSource(CharSource input,CharSink output) throws FormatterException, IOException {  output.write(formatSource(input.read()));}  }
class C{  public void reqHistoricalData(int reqId,Tradestrategy tradestrategy,String endDateTime,String durationStr,String barSizeSetting,String whatToShow,int useRTH,int formatDateInteger) throws BrokerModelException {  try {    if (null != endDateTime) {      YahooBroker yahooBroker=new YahooBroker(reqId,tradestrategy.getContract(),endDateTime,durationStr,barSizeSetting,m_client);      m_backTestBroker.put(reqId,yahooBroker);      yahooBroker.execute();    } else {      if (tradestrategy.getTrade()) {        DBBroker backTestBroker=new DBBroker(tradestrategy.getStrategyData(),tradestrategy.getIdTradeStrategy(),m_client);        m_backTestBroker.put(reqId,backTestBroker);        backTestBroker.execute();      }      m_client.historicalData(reqId,"finished- at yyyyMMdd HH:mm:ss",0,0,0,0,0,0,0,false);    }  } catch (  Exception ex) {    throw new BrokerModelException(0,6000,"Error initializing BackTestBroker Msg: " + ex.getMessage());  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void teleportVehicleTo(QVehicle vehicle,Id<Link> linkId){  if (vehicle.getCurrentLink() != null) {    if (cntTeleportVehicle < 9) {      cntTeleportVehicle++;      log.info("teleport vehicle " + vehicle.getId() + " from link "+ vehicle.getCurrentLink().getId()+ " to link "+ linkId);      if (cntTeleportVehicle == 9) {        log.info("No more occurrences of teleported vehicles will be reported.");      }    }    PTQLink qlinkOld=(PTQLink)qNetsimEngine.getNetsimNetwork().getNetsimLink(vehicle.getCurrentLink().getId());    qlinkOld.removeParkedVehicle(vehicle.getId());  }}  }
class C{  public SVGOMAnimatedMarkerOrientValue(AbstractElement elt,String ns,String ln){  super(elt,ns,ln);}  }
class C{  private void miss(){  if (hotSize < maximumHotSize) {    warmupMiss();  } else {    fullMiss();  }  size++;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:39.280 -0500",hash_original_method="5F71AEAFC7DD0E06D31189B8E9285CCC",hash_generated_method="8CCB824803E59AD7B5D63B6370F27795") public static int fork(){  preFork();  int pid=nativeFork();  postFork();  return pid;}  }
class C{  static void ensureHostnamePatternMatchesDefaultHostname(String hostnamePattern,String defaultHostname){  if ("*".equals(hostnamePattern)) {    return;  }  final DomainNameMapping<Boolean> mapping=new DomainNameMappingBuilder<>(Boolean.FALSE).add(hostnamePattern,Boolean.TRUE).build();  if (!mapping.map(defaultHostname)) {    throw new IllegalArgumentException("defaultHostname: " + defaultHostname + " (must be matched by hostnamePattern: "+ hostnamePattern+ ')');  }}  }
class C{  public Observable<State> statusChanged(){  return stateController.statusObservable();}  }
class C{  @Override public boolean contains(Object x){  List<A> l=this;  while (l.tail != null) {    if (x == null) {      if (l.head == null)       return true;    } else {      if (l.head.equals(x))       return true;    }    l=l.tail;  }  return false;}  }
class C{  public boolean isLazy(){  JsonApiIncludeByDefault includeByDefaultAnnotation=null;  JsonApiToMany toManyAnnotation=null;  for (  Annotation annotation : annotations) {    if (annotation.annotationType().equals(JsonApiIncludeByDefault.class)) {      includeByDefaultAnnotation=(JsonApiIncludeByDefault)annotation;    }    if (annotation.annotationType().equals(JsonApiToMany.class)) {      toManyAnnotation=(JsonApiToMany)annotation;    }  }  if (includeByDefaultAnnotation != null) {    return false;  } else   if (toManyAnnotation != null) {    return toManyAnnotation.lazy();  }  return false;}  }
class C{  public PieData findDueData(){  DueChallengeLogic dueChallengeLogic=mUserLogicFactory.createDueChallengeLogic(mUser);  int dueNumber=dueChallengeLogic.getDueChallenges(mCategoryId).size();  int notDueNumber=mChallengeDataSource.getByCategoryId(mCategoryId).size() - dueNumber;  if (dueNumber + notDueNumber > 0) {    ArrayList<Entry> entries=new ArrayList<>();    ArrayList<String> labels=new ArrayList<>();    labels.add(mApplication.getString(R.string.challenge_due_text));    entries.add(new Entry(dueNumber > 0 ? dueNumber : nullValue(notDueNumber),0));    labels.add(mApplication.getString(R.string.challeng_not_due_text));    entries.add(new Entry(notDueNumber > 0 ? notDueNumber : nullValue(dueNumber),1));    PieDataSet dataset=new PieDataSet(entries,"");    mSettings.applyDataSetSettings(dataset,StatisticType.TYPE_DUE);    PieData data=new PieData(labels,dataset);    mSettings.applyDataSettings(data);    return data;  } else   return null;}  }
class C{  public void addExcludedElement(final String elementName){  if ((elementName == null) || (elementName.trim().equals(""))) {    return;  }  _excludedElementsSet.add(elementName);}  }
class C{  private void verifyInitiatorResults() throws Exception {  log.info("Verifying migration of Initiators for Flag.RECOVERPOINT.");  List<URI> initiatorURIs=_dbClient.queryByType(Initiator.class,false);  int count=0;  Iterator<Initiator> initiatorsIter=_dbClient.queryIterativeObjects(Initiator.class,initiatorURIs);  while (initiatorsIter.hasNext()) {    Initiator initiator=initiatorsIter.next();    count++;    if (initiator.getHostName().contains("RP")) {      Assert.assertTrue("RECOVERPOINT flag should be set on rp initiator",initiator.checkInternalFlags(Flag.RECOVERPOINT));    } else     if (initiator.getHostName().contains("null")) {      Assert.assertFalse("RECOVERPOINT flag should not be set on regular initiator",initiator.checkInternalFlags(Flag.RECOVERPOINT));    }  }  Assert.assertTrue("Should still have 4 initiators after migration, not " + count,count == 4);}  }
class C{  public static byte[] decode(byte[] source,int off,int len,byte[] decodabet) throws Base64DecoderException {  int len34=len * 3 / 4;  byte[] outBuff=new byte[2 + len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=0; i < len; i++) {    sbiCrop=(byte)(source[i + off] & 0x7f);    sbiDecode=decodabet[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        if (sbiCrop == EQUALS_SIGN) {          int bytesLeft=len - i;          byte lastByte=(byte)(source[len - 1 + off] & 0x7f);          if (b4Posn == 0 || b4Posn == 1) {            throw new Base64DecoderException("invalid padding byte '=' at byte offset " + i);          } else           if ((b4Posn == 3 && bytesLeft > 2) || (b4Posn == 4 && bytesLeft > 1)) {            throw new Base64DecoderException("padding byte '=' falsely signals end of encoded value " + "at offset " + i);          } else           if (lastByte != EQUALS_SIGN && lastByte != NEW_LINE) {            throw new Base64DecoderException("encoded value has invalid trailing byte");          }          break;        }        b4[b4Posn++]=sbiCrop;        if (b4Posn == 4) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);          b4Posn=0;        }      }    } else {      throw new Base64DecoderException("Bad Base64 input character at " + i + ": "+ source[i + off]+ "(decimal)");    }  }  if (b4Posn != 0) {    if (b4Posn == 1) {      throw new Base64DecoderException("single trailing character at offset " + (len - 1));    }    b4[b4Posn++]=EQUALS_SIGN;    outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SGenPackage.FEATURE_PARAMETER_VALUE__PARAMETER:    return parameter != null;case SGenPackage.FEATURE_PARAMETER_VALUE__FEATURE_CONFIGURATION:  return getFeatureConfiguration() != null;case SGenPackage.FEATURE_PARAMETER_VALUE__EXPRESSION:return expression != null;}return super.eIsSet(featureID);}  }
class C{  public void replaceRow(IndicatorSeries newElement,int selectedRow){  getData().getIndicatorSeries().set(selectedRow,newElement);  final Vector<Object> newRow=new Vector<Object>();  getNewRow(newRow,newElement);  rows.set(selectedRow,newRow);  fireTableChanged(new TableModelEvent(this));}  }
class C{  public StringTokenizer(String str,String delim,boolean returnTokens){  currentPosition=0;  this.str=str;  maxPosition=str.length();  delimiters=delim;  retTokens=returnTokens;}  }
class C{  private Point scalePoint(Point point){  return point == null ? null : new Point((int)(point.x / drawingManager.getZoomLevel()),(int)(point.y / drawingManager.getZoomLevel()));}  }
class C{  default LazyFutureStream<T> toFutureStream(final LazyReact reactor){  return reactor.ofAsync(this);}  }
class C{  public LazyListX<T> with(int i,T element){  return stream(Fluxes.insertAt(Fluxes.deleteBetween(flux(),i,i + 1),i,element));}  }
class C{  public static Collection<CTag> findTags(final ITreeNode<CTag> rootTag,final Collection<Integer> tagIds){  Preconditions.checkNotNull(tagIds,"IE00866: List argument can't be null");  final HashSet<CTag> tags=new HashSet<CTag>();  for (  final ITreeNode<CTag> c : BreadthFirstSorter.getSortedList(rootTag)) {    if (tagIds.contains(c.getObject().getId())) {      tags.add(c.getObject());    }  }  return tags;}  }
class C{  protected LatLon greatCircleIntersectionAtLongitude(LatLon p1,LatLon p2,Angle longitude){  if (p1.getLongitude().degrees == longitude.degrees)   return p1;  if (p2.getLongitude().degrees == longitude.degrees)   return p2;  LatLon pos=null;  Double deltaLon=getDeltaLongitude(p1,p2.getLongitude()).degrees;  if (getDeltaLongitude(p1,longitude).degrees < deltaLon && getDeltaLongitude(p2,longitude).degrees < deltaLon) {    int count=0;    double precision=1d / 6378137d;    LatLon a=p1;    LatLon b=p2;    LatLon midPoint=greatCircleMidPoint(a,b);    while (getDeltaLongitude(midPoint,longitude).radians > precision && count <= 20) {      count++;      if (getDeltaLongitude(a,longitude).degrees < getDeltaLongitude(b,longitude).degrees)       b=midPoint; else       a=midPoint;      midPoint=greatCircleMidPoint(a,b);    }    pos=midPoint;  }  if (pos != null)   pos=new LatLon(pos.getLatitude(),longitude);  return pos;}  }
class C{  private void hideOverlay(boolean fromUser){  if (mShowing) {    mHandler.removeMessages(FADE_OUT);    mHandler.removeMessages(SHOW_PROGRESS);    if (!fromUser && !mIsLocked) {      mOverlayProgress.startAnimation(AnimationUtils.loadAnimation(this,android.R.anim.fade_out));      mPlayPause.startAnimation(AnimationUtils.loadAnimation(this,android.R.anim.fade_out));      mLock.startAnimation(AnimationUtils.loadAnimation(this,android.R.anim.fade_out));      mEdit.startAnimation(AnimationUtils.loadAnimation(this,android.R.anim.fade_out));    } else     mSize.setVisibility(View.INVISIBLE);    mOverlayProgress.setVisibility(View.INVISIBLE);    mPlayPause.setVisibility(View.INVISIBLE);    mLock.setVisibility(View.INVISIBLE);    mEdit.setVisibility(View.INVISIBLE);    mShowing=false;    dimStatusBar(true);  } else   if (!fromUser) {    dimStatusBar(true);  }}  }
class C{  private void pushPacket(IOFSwitch sw,OFMatch match,OFPacketIn pi,short outport){  if (pi == null) {    return;  }  if (pi.getInPort() == outport) {    if (log.isDebugEnabled()) {      log.debug("Attempting to do packet-out to the same " + "interface as packet-in. Dropping packet. " + " SrcSwitch={}, match = {}, pi={}",new Object[]{sw,match,pi});      return;    }  }  if (log.isTraceEnabled()) {    log.trace("PacketOut srcSwitch={} match={} pi={}",new Object[]{sw,match,pi});  }  OFPacketOut po=(OFPacketOut)floodlightProvider.getOFMessageFactory().getMessage(OFType.PACKET_OUT);  List<OFAction> actions=new ArrayList<OFAction>();  actions.add(new OFActionOutput(outport,(short)0xffff));  po.setActions(actions).setActionsLength((short)OFActionOutput.MINIMUM_LENGTH);  short poLength=(short)(po.getActionsLength() + OFPacketOut.MINIMUM_LENGTH);  if (sw.getBuffers() == 0) {    pi.setBufferId(OFPacketOut.BUFFER_ID_NONE);    po.setBufferId(OFPacketOut.BUFFER_ID_NONE);  } else {    po.setBufferId(pi.getBufferId());  }  po.setInPort(pi.getInPort());  if (pi.getBufferId() == OFPacketOut.BUFFER_ID_NONE) {    byte[] packetData=pi.getPacketData();    poLength+=packetData.length;    po.setPacketData(packetData);  }  po.setLength(poLength);  try {    counterStore.updatePktOutFMCounterStoreLocal(sw,po);    sw.write(po,null);  } catch (  IOException e) {    log.error("Failure writing packet out",e);  }}  }
class C{  public void startElement(String elementNamespaceURI,String elementLocalName,String elementName) throws SAXException {  if (m_needToCallStartDocument)   startDocumentInternal();  if (m_tracer != null) {    super.fireStartElem(elementName);    this.firePseudoAttributes();  }  return;}  }
class C{  public void testConstrStringWithExponentWithoutPoint2(){  String a="-238768787678287e-214";  int aScale=214;  BigInteger bA=new BigInteger("-238768787678287");  BigDecimal aNumber=new BigDecimal(a);  assertEquals("incorrect value",bA,aNumber.unscaledValue());  assertEquals("incorrect scale",aScale,aNumber.scale());}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ELEMENT_POSITION___X1:    return X1_EDEFAULT == null ? x_1 != null : !X1_EDEFAULT.equals(x_1);case UmplePackage.ELEMENT_POSITION___Y1:  return Y1_EDEFAULT == null ? y_1 != null : !Y1_EDEFAULT.equals(y_1);case UmplePackage.ELEMENT_POSITION___WIDTH_1:return WIDTH_1_EDEFAULT == null ? width_1 != null : !WIDTH_1_EDEFAULT.equals(width_1);case UmplePackage.ELEMENT_POSITION___HEIGHT_1:return HEIGHT_1_EDEFAULT == null ? height_1 != null : !HEIGHT_1_EDEFAULT.equals(height_1);}return super.eIsSet(featureID);}  }
class C{  public synchronized void clearDamage(){  if (m_damageRedraw) {    m_clip.reset();  }}  }
class C{  public boolean isAllGraphs(){  return getProperty(Annotations.ALL_GRAPHS,Annotations.DEFAULT_ALL_GRAPHS);}  }
class C{  public static void removeInvitationListener(Connection conn,InvitationListener listener){  InvitationsMonitor.getInvitationsMonitor(conn).removeInvitationListener(listener);}  }
class C{  public static boolean substringMatch(CharSequence str,int index,CharSequence substring){  for (int j=0; j < substring.length(); j++) {    int i=index + j;    if (i >= str.length() || str.charAt(i) != substring.charAt(j)) {      return false;    }  }  return true;}  }
class C{  public byte[] makeKey(final IKeyBuilder keyBuilder,final byte[] baseKey,final int counter){  final byte[] key=keyBuilder.append(baseKey).append((short)counter).getKey();  assert key.length == TERMS_INDEX_KEY_SIZE;  return key;}  }
class C{  public void resetItems(){  if (swipeListView.getAdapter() != null) {    int count=swipeListView.getAdapter().getItemCount();    for (int i=opened.size(); i <= count; i++) {      opened.add(false);      openedRight.add(false);      checked.add(false);    }  }}  }
class C{  public void info(String msg,Object... params){  log(Level.INFO,msg,params);}  }
class C{  private static void collectAllTimes(Tree tree,NodeRef top,NodeRef[] excludeBelow,ArrayList<ComparableDouble> times,ArrayList<Integer> childs){  times.add(new ComparableDouble(tree.getNodeHeight(top)));  childs.add(tree.getChildCount(top));  for (int i=0; i < tree.getChildCount(top); i++) {    NodeRef child=tree.getChild(top,i);    if (excludeBelow == null) {      collectAllTimes(tree,child,excludeBelow,times,childs);    } else {      boolean include=true;      for (      NodeRef anExcludeBelow : excludeBelow) {        if (anExcludeBelow.getNumber() == child.getNumber()) {          include=false;          break;        }      }      if (include)       collectAllTimes(tree,child,excludeBelow,times,childs);    }  }}  }
class C{  public int loadGLShader(int type,int resId){  String code=readRawTextFile(resId);  int shader=GLES20.glCreateShader(type);  GLES20.glShaderSource(shader,code);  GLES20.glCompileShader(shader);  final int[] compileStatus=new int[1];  GLES20.glGetShaderiv(shader,GLES20.GL_COMPILE_STATUS,compileStatus,0);  if (compileStatus[0] == 0) {    Log.e(TAG,"Error compiling shader: " + GLES20.glGetShaderInfoLog(shader));    GLES20.glDeleteShader(shader);    shader=0;  }  if (shader == 0) {    throw new RuntimeException("Error creating shader.");  }  return shader;}  }
class C{  private StandAlone(){}  }
class C{  public static boolean isUserModule(String name){  if (name == null || name.length() == 0) {    return false;  }  return Activator.getModuleDependencyStorage().hasModule(name);}  }
class C{  public static void start(String flowName){  Flow flow=sFlowMap.get(flowName);  if (flow != null) {    flow.start();  }}  }
class C{  @Override public void onModuleUnpack(IStorageChunk chunk){  if (DimensionManager.isDimensionRegistered(Configuration.spaceDimId) && DimensionManager.getWorld(Configuration.spaceDimId) == null)   DimensionManager.initDimension(Configuration.spaceDimId);  World worldObj=DimensionManager.getWorld(Configuration.spaceDimId);  if (!created) {    chunk.pasteInWorld(worldObj,spawnLocation.x - chunk.getSizeX() / 2,spawnLocation.y - chunk.getSizeY() / 2,spawnLocation.z - chunk.getSizeZ() / 2);    created=true;  } else {    List<TileEntity> tiles=chunk.getTileEntityList();    List<String> targetIds=new LinkedList<String>();    List<TileEntity> myPoss=new LinkedList<TileEntity>();    BlockPosition pos=null;    TileDockingPort destTile=null;    TileDockingPort srcTile=null;    for (    TileEntity tile : tiles) {      if (tile instanceof TileDockingPort) {        targetIds.add(((TileDockingPort)tile).getTargetId());        myPoss.add(tile);      }    }    for (    Entry<BlockPosition,String> map : dockingPoints.entrySet()) {      if (targetIds.contains(map.getValue())) {        int loc=targetIds.indexOf(map.getValue());        pos=map.getKey();        TileEntity tile;        if ((tile=worldObj.getTileEntity(pos.x,pos.y,pos.z)) instanceof TileDockingPort) {          destTile=(TileDockingPort)tile;          srcTile=(TileDockingPort)myPoss.get(loc);          break;        }      }    }    if (destTile != null) {      ForgeDirection stationFacing=BlockFullyRotatable.getFront(destTile.getBlockMetadata());      ForgeDirection moduleFacing=BlockFullyRotatable.getFront(srcTile.getBlockMetadata());      ForgeDirection cross=moduleFacing.getRotation(stationFacing);      if (cross == moduleFacing) {        if (moduleFacing == stationFacing) {          if (cross == ForgeDirection.DOWN || cross == ForgeDirection.UP) {            chunk.rotateBy(ForgeDirection.NORTH);            chunk.rotateBy(ForgeDirection.NORTH);          } else {            chunk.rotateBy(ForgeDirection.UP);            chunk.rotateBy(ForgeDirection.UP);          }        }      } else       chunk.rotateBy(stationFacing.offsetZ == 0 ? cross.getOpposite() : cross);      int xCoord=(stationFacing.offsetX == 0 ? -srcTile.xCoord : srcTile.xCoord * stationFacing.offsetX) + stationFacing.offsetX + destTile.xCoord;      int yCoord=(stationFacing.offsetY == 0 ? -srcTile.yCoord : srcTile.yCoord * stationFacing.offsetY) + stationFacing.offsetY + destTile.yCoord;      int zCoord=(stationFacing.offsetZ == 0 ? -srcTile.zCoord : srcTile.zCoord * stationFacing.offsetZ) + stationFacing.offsetZ + destTile.zCoord;      chunk.pasteInWorld(worldObj,xCoord,yCoord,zCoord);      worldObj.setBlockToAir(destTile.xCoord + stationFacing.offsetX,destTile.yCoord + stationFacing.offsetY,destTile.zCoord + stationFacing.offsetZ);      worldObj.setBlockToAir(destTile.xCoord,destTile.yCoord,destTile.zCoord);    }  }}  }
class C{  public static POServiceFeedback toPOServiceFeedback(Product product,PlatformUser currentUser,boolean isUsageSubscriptionExist){  Product template=product.getTemplateOrSelf();  ProductFeedback domainObject=template.getProductFeedback();  POServiceFeedback presentationObject=createEmptyPresentationObject();  mapProductKey(product,presentationObject);  if (domainObject != null) {    mapAverageRating(domainObject,presentationObject);    mapReviews(domainObject,presentationObject);  }  mapAuthorities(template,presentationObject,currentUser,isUsageSubscriptionExist);  return presentationObject;}  }
class C{  protected void addBasicDefaults(LookAndFeelAddons addon,List defaults){}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static Boolean isTopActivity(Context context,String packageName){  if (context == null || StringUtils.isEmpty(packageName)) {    return null;  }  ActivityManager activityManager=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  List<RunningTaskInfo> tasksInfo=activityManager.getRunningTasks(1);  if (ListUtils.isEmpty(tasksInfo)) {    return null;  }  try {    return packageName.equals(tasksInfo.get(0).topActivity.getPackageName());  } catch (  Exception e) {    e.printStackTrace();    return false;  }}  }
class C{  static public boolean isValid(String[] values){  try {    if (values[2].equalsIgnoreCase("randompositivewhole") || values[2].equalsIgnoreCase("randomnegativewhole")) {      if (NumberUtils.isDigits(values[3])) {        return true;      }    }    if (values[2].equalsIgnoreCase("randompositivefloat") || values[2].equalsIgnoreCase("randomnegativefloat") || values[2].equalsIgnoreCase("mod")) {      if (NumberUtils.isDigits(values[3]) && NumberUtils.isDigits(values[4])) {        return true;      }    }    if (values[2].equalsIgnoreCase("add") || values[2].equalsIgnoreCase("subtract")) {      if (NumberUtils.isNumber(values[3]) && NumberUtils.isNumber(values[4])) {        for (int i=5; i < values.length; i++) {          if (values[i] != null) {            if (!NumberUtils.isNumber(values[i])) {              return false;            }          } else {            return true;          }        }      }    }    return false;  } catch (  Exception ex) {    return false;  }}  }
class C{  public int pic_num_extract(int pic_num,int[] structure){  structure[0]=s.picture_structure;  if ((s.picture_structure != MpegEncContext.PICT_FRAME)) {    if (0 == (pic_num & 1))     structure[0]^=MpegEncContext.PICT_FRAME;    pic_num>>=1;  }  return pic_num;}  }
class C{  protected void updateArrowControlPoints(){  Arrow arrow=(Arrow)this.getShape();  LatLon[] locations=arrow.getLocations();  Iterable<Marker> markers=this.getControlPointLayer().getMarkers();  if (markers == null) {    java.util.List<Marker> markerList=new ArrayList<Marker>(1);    double altitude=this.getControlPointAltitude(locations[1]);    Position cpPosition=new Position(locations[1],altitude);    markerList.add(this.makeControlPoint(cpPosition,this.getAngleControlPointAttributes(),0,ROTATION));    this.getControlPointLayer().setMarkers(markerList);  } else {    Iterator<Marker> markerIterator=markers.iterator();    double altitude=this.getControlPointAltitude(locations[1]);    markerIterator.next().setPosition(new Position(locations[1],altitude));  }  Angle arrowHeading=LatLon.greatCircleAzimuth(locations[0],locations[1]);  Iterator<Marker> markerIterator=this.getControlPointLayer().getMarkers().iterator();  ((ControlPointMarker)markerIterator.next()).setRotation(this.normalizedHeading(arrowHeading,Angle.ZERO));}  }
class C{  public static org.oscm.internal.vo.VOParameterDefinition convertToUp(org.oscm.vo.VOParameterDefinition oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOParameterDefinition newVO=new org.oscm.internal.vo.VOParameterDefinition();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setParameterOptions(convertToUpVOParameterOption(oldVO.getParameterOptions()));  newVO.setDefaultValue(oldVO.getDefaultValue());  newVO.setMinValue(oldVO.getMinValue());  newVO.setMaxValue(oldVO.getMaxValue());  newVO.setMandatory(oldVO.isMandatory());  newVO.setConfigurable(oldVO.isConfigurable());  newVO.setParameterType(EnumConverter.convert(oldVO.getParameterType(),org.oscm.internal.types.enumtypes.ParameterType.class));  newVO.setParameterId(oldVO.getParameterId());  newVO.setValueType(EnumConverter.convert(oldVO.getValueType(),org.oscm.internal.types.enumtypes.ParameterValueType.class));  newVO.setModificationType(EnumConverter.convert(oldVO.getModificationType(),org.oscm.internal.types.enumtypes.ParameterModificationType.class));  newVO.setDescription(oldVO.getDescription());  return newVO;}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof PrinterResolution);}  }
class C{  public final AssertSubscriber<T> assertNoError(){  int s=errors.size();  if (s == 1) {    Throwable e=errors.get(0);    String valueAndClass=e == null ? null : e + " (" + e.getClass().getSimpleName()+ ")";    throw new AssertionError("Error present: " + valueAndClass,null);  }  if (s > 1) {    throw new AssertionError("Multiple errors: " + s,null);  }  return this;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR__BODY:    return getBody();case N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR__LOK:  return get_lok();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static void addSentencePoseMeta(Vertex question,Vertex answer,String poses,Network network){  if (poses == null || poses.trim().isEmpty()) {    clearSentenceMeta(question,answer,Primitive.POSE,network);  } else {    Relationship relationship=question.getRelationship(Primitive.RESPONSE,answer);    if (relationship != null) {      Vertex meta=network.createMeta(relationship);      meta.internalRemoveRelationships(Primitive.POSE);      List<String> words=Utils.getWords(poses);      for (      String pose : words) {        if (!pose.equals("none")) {          meta.addRelationship(Primitive.POSE,new Primitive(pose));        }      }    }    network.checkReduction(question);    Collection<Relationship> synonyms=question.getRelationships(Primitive.SYNONYM);    if (synonyms != null) {      for (      Relationship synonym : synonyms) {        relationship=synonym.getTarget().getRelationship(Primitive.RESPONSE,answer);        if (relationship != null) {          Vertex meta=network.createMeta(relationship);          meta.internalRemoveRelationships(Primitive.POSE);          List<String> words=Utils.getWords(poses);          for (          String pose : words) {            if (!pose.equals("none")) {              meta.addRelationship(Primitive.POSE,new Primitive(pose));            }          }        }      }    }  }}  }
class C{  public static final double previousDouble(double value){  if (value == Double.NEGATIVE_INFINITY) {    return value;  }  long bits;  if (value == 0) {    bits=0x8000000000000000L;  } else {    bits=Double.doubleToLongBits(value);  }  return Double.longBitsToDouble(value <= 0 ? bits + 1 : bits - 1);}  }
class C{  protected S_EquationsImpl(){  super();}  }
class C{  protected boolean drawBottomBorder(Component c,Graphics g,int x,int y,int width,int height){  Rectangle borderRect;  int marginHeight, startY;  borderRect=new Rectangle(0,height - getBorderInsets(c).bottom,width,getBorderInsets(c).bottom);  if (!g.getClipBounds().intersects(borderRect)) {    return false;  }  startY=height - getBorderInsets(c).bottom;  g.setColor(frameShadow);  g.drawLine(x + 1,height - 1,width - 1,height - 1);  g.drawLine(x + 2,height - 2,width - 2,height - 2);  g.setColor(frameColor);  g.fillRect(x + 2,startY + 1,width - 4,2);  g.setColor(frameHighlight);  g.drawLine(x + 5,startY,width - 5,startY);  return true;}  }
class C{  private void unlinkCancelledWaiters(){  Node t=firstWaiter;  Node trail=null;  while (t != null) {    Node next=t.nextWaiter;    if (t.waitStatus != Node.CONDITION) {      t.nextWaiter=null;      if (trail == null)       firstWaiter=next; else       trail.nextWaiter=next;      if (next == null)       lastWaiter=trail;    } else     trail=t;    t=next;  }}  }
class C{  public void initToolTip(){  if (ttmanager == null) {    ttmanager=ToolTipManager.sharedInstance();    ttmanager.registerComponent(map);    ttmanager.setEnabled(true);    return;  }  if (map != null) {    map.setToolTipText(null);  }}  }
class C{  @Pure public TypeReference parseForReturnType(ClassLoader cl){  if (VM.VerifyAssertions) {    VM._assert(val.length > 0);    VM._assert(val[0] == '(',"Method descriptors start with `(`");  }  int i=0;  while (val[i++] != ')') {    if (VM.VerifyAssertions) {      VM._assert(i < val.length,"Method descriptor missing closing ')'");    }  }  if (VM.VerifyAssertions) {    VM._assert(i < val.length,"Method descriptor missing type after closing ')'");  }switch (val[i]) {case VoidTypeCode:    return TypeReference.Void;case BooleanTypeCode:  return TypeReference.Boolean;case ByteTypeCode:return TypeReference.Byte;case ShortTypeCode:return TypeReference.Short;case IntTypeCode:return TypeReference.Int;case LongTypeCode:return TypeReference.Long;case FloatTypeCode:return TypeReference.Float;case DoubleTypeCode:return TypeReference.Double;case CharTypeCode:return TypeReference.Char;case ClassTypeCode:case ArrayTypeCode:return TypeReference.findOrCreate(cl,findOrCreate(val,i,val.length - i,toUnicodeStringInternal()));default :if (VM.VerifyAssertions) {String msg="Need a valid method descriptor; got \"" + this + "\"; can't parse the character '"+ ((char)val[i])+ "'";VM._assert(VM.NOT_REACHED,msg);}return null;}}  }
class C{  public void run(){  if (iamroot) {    setup(this,null);    floodWithIslands();    waitForIslands();    output.message("Everyone finished, shutting down");    suicide();    System.exit(0);  } else   super.run();}  }
class C{  public RollingAverage(int capacity){  list=new LinkedList<>();  this.capacity=capacity;  total=0;}  }
class C{  public T addNoExpand(T item){  if (size < maxSize) {    items[(start + size) % maxSize]=item;    size++;    return null;  } else {    T removedItem=items[start];    items[start]=item;    start=(start + 1) % maxSize;    return removedItem;  }}  }
class C{  public int kind(){  String s=soot.PhaseOptions.getString(options,"kind");  if (s.equalsIgnoreCase("optimistic"))   return kind_optimistic;  if (s.equalsIgnoreCase("pessimistic"))   return kind_pessimistic;  throw new RuntimeException("Invalid value " + s + " of phase option kind");}  }
class C{  public CrawlDatum distributeScoreToOutlinks(Text fromUrl,ParseData parseData,Collection<Entry<Text,CrawlDatum>> targets,CrawlDatum adjust,int allCount) throws ScoringFilterException {  if (urlMetaTags == null || targets == null || parseData == null)   return adjust;  Iterator<Entry<Text,CrawlDatum>> targetIterator=targets.iterator();  while (targetIterator.hasNext()) {    Entry<Text,CrawlDatum> nextTarget=targetIterator.next();    for (    String metatag : urlMetaTags) {      String metaFromParse=parseData.getMeta(metatag);      if (metaFromParse == null)       continue;      nextTarget.getValue().getMetaData().put(new Text(metatag),new Text(metaFromParse));    }  }  return adjust;}  }
class C{  public void completeLine(){  int count=HeaderCard.FITS_HEADER_CARD_SIZE - this.charCount % HeaderCard.FITS_HEADER_CARD_SIZE;  if (count < HeaderCard.FITS_HEADER_CARD_SIZE) {    this.buffer.append(FitsLineAppender.FULL_CARD_AS_SPACES,0,count);  }  this.charCount=0;}  }
class C{  @SuppressWarnings("unchecked") public RhythmOverlay inflateOverlay(String configString){  List<String> configStrings=Arrays.asList(configString.split("\\r?\\n"));  return inflateOverlayInternal(configStrings,Collections.EMPTY_MAP,0);}  }
class C{  public void postComment(String postId,String message,ActionListener callback) throws IOException {  checkAuthentication();  FacebookRESTService con=new FacebookRESTService(token,postId,FacebookRESTService.COMMENTS,true);  con.addResponseListener(new Listener(con,callback));  con.addArgument("message","" + message);  if (slider != null) {    SliderBridge.bindProgress(con,slider);  }  for (int i=0; i < responseCodeListeners.size(); i++) {    con.addResponseCodeListener((ActionListener)responseCodeListeners.elementAt(i));  }  current=con;  NetworkManager.getInstance().addToQueueAndWait(con);}  }
class C{  public LinkedHashMap(int initialCapacity,float loadFactor,boolean accessOrder){  super(initialCapacity,loadFactor);  this.accessOrder=accessOrder;}  }
class C{  public sun.net.ftp.FtpClient reInit() throws sun.net.ftp.FtpProtocolException, IOException {  issueCommandCheck("REIN");  loggedIn=false;  if (useCrypto) {    if (server instanceof SSLSocket) {      javax.net.ssl.SSLSession session=((SSLSocket)server).getSession();      session.invalidate();      server=oldSocket;      oldSocket=null;      try {        out=new PrintStream(new BufferedOutputStream(server.getOutputStream()),true,encoding);      } catch (      UnsupportedEncodingException e) {        throw new InternalError(encoding + "encoding not found",e);      }      in=new BufferedInputStream(server.getInputStream());    }  }  useCrypto=false;  return this;}  }
class C{  public static Classifier forName(String classifierName,String[] options) throws Exception {  return ((AbstractClassifier)Utils.forName(Classifier.class,classifierName,options));}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case TRUE_AS_OF_SECS:    return is_set_true_as_of_secs();case SOURCE:  return is_set_source();case SYSTEM:return is_set_system();}throw new IllegalStateException();}  }
class C{  static void writeShort(final byte[] b,final int index,final int s){  b[index]=(byte)(s >>> 8);  b[index + 1]=(byte)s;}  }
class C{  public static void closeResultSet(ResultSet rs){  if (rs != null) {    try {      rs.close();    } catch (    SQLException ex) {      LOG.debug("Could not close JDBC ResultSet",ex);    }catch (    Throwable ex) {      LOG.info("Unexpected exception on closing JDBC ResultSet",ex);    }  }}  }
class C{  public boolean isFieldIncluded(Field f,Class<?> clazz){  return this.manager.defaultIsFieldIncluded(f,clazz);}  }
class C{  private synchronized void releaseMessageId(int msgId){  inUseMsgIds.remove(new Integer(msgId));}  }
class C{  public static boolean mkdirsWithRetry(final File f){  if (f.exists()) {    return f.isDirectory();  }  for (int i=0; i < 10 && !f.isDirectory(); ++i) {    f.mkdirs();  }  return f.isDirectory();}  }
class C{  public void onUpdateFromPeerCluster(String clusterId,UpdatePodSystem updatePodSystem){}  }
class C{  public CollectionMetaData(){}  }
class C{  public Builder withSucceeded(boolean succeeded){  response.succeeded=succeeded;  return this;}  }
class C{  public SpeedRenderer(){  super();}  }
class C{  public static void enableTotalKeySizeTracking(){  factory.enableTotalKeySizeTracking();}  }
class C{  @Override public double minExtent(){  if (isNull()) {    return 0.0;  }  return FastMath.min(getWidth(),FastMath.min(getHeight(),getDepth()));}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == NamedElement.class) {switch (derivedFeatureID) {case TypesPackage.TYPE_ALIAS__NAME:      return BasePackage.NAMED_ELEMENT__NAME;default :    return -1;}}if (baseClass == AnnotatableElement.class) {switch (derivedFeatureID) {case TypesPackage.TYPE_ALIAS__ANNOTATIONS:  return TypesPackage.ANNOTATABLE_ELEMENT__ANNOTATIONS;default :return -1;}}if (baseClass == PackageMember.class) {switch (derivedFeatureID) {case TypesPackage.TYPE_ALIAS__ID:return TypesPackage.PACKAGE_MEMBER__ID;default :return -1;}}if (baseClass == Type.class) {switch (derivedFeatureID) {case TypesPackage.TYPE_ALIAS__CONSTRAINT:return TypesPackage.TYPE__CONSTRAINT;case TypesPackage.TYPE_ALIAS__ABSTRACT:return TypesPackage.TYPE__ABSTRACT;case TypesPackage.TYPE_ALIAS__VISIBLE:return TypesPackage.TYPE__VISIBLE;default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public static void main(String... args){  for (int i=0; i < args.length; i++) {    if ("-dump".equals(args[i])) {      String fileName=args[++i];      dump(fileName,new PrintWriter(System.out),true);    } else     if ("-info".equals(args[i])) {      String fileName=args[++i];      info(fileName,new PrintWriter(System.out));    } else     if ("-compact".equals(args[i])) {      String fileName=args[++i];      compact(fileName,false);    } else     if ("-compress".equals(args[i])) {      String fileName=args[++i];      compact(fileName,true);    } else     if ("-rollback".equals(args[i])) {      String fileName=args[++i];      long targetVersion=Long.decode(args[++i]);      rollback(fileName,targetVersion,new PrintWriter(System.out));    } else     if ("-repair".equals(args[i])) {      String fileName=args[++i];      repair(fileName);    }  }}  }
class C{  protected void diagnoseMultistepList(int matchCount,int lengthToTest,boolean isGlobal){  if (matchCount > 0) {    System.err.print("Found multistep matches: " + matchCount + ", "+ lengthToTest+ " length");    if (isGlobal)     System.err.println(" (global)"); else     System.err.println();  }}  }
class C{  public void disconnect(final String address){  if (mBluetoothAdapter == null || mBluetoothGattMap.get(address) == null) {    Log.e(TAG,"BluetoothAdapter not initialized.");    return;  }  mBluetoothGattMap.get(address).disconnect();}  }
class C{  public void loadPaySelectInfo(int C_PaySelection_ID){  m_C_BankAccount_ID=-1;  String sql="SELECT ps.C_BankAccount_ID, b.Name || ' ' || ba.AccountNo," + " c.ISO_Code, CurrentBalance, ba.PaymentExportClass " + "FROM C_PaySelection ps"+ " INNER JOIN C_BankAccount ba ON (ps.C_BankAccount_ID=ba.C_BankAccount_ID)"+ " INNER JOIN C_Bank b ON (ba.C_Bank_ID=b.C_Bank_ID)"+ " INNER JOIN C_Currency c ON (ba.C_Currency_ID=c.C_Currency_ID) "+ "WHERE ps.C_PaySelection_ID=? AND ps.Processed='Y' AND ba.IsActive='Y'";  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,C_PaySelection_ID);    ResultSet rs=pstmt.executeQuery();    if (rs.next()) {      m_C_BankAccount_ID=rs.getInt(1);      bank=rs.getString(2);      currency=rs.getString(3);      balance=rs.getBigDecimal(4);      m_PaymentExportClass=rs.getString(5);    } else {      m_C_BankAccount_ID=-1;      bank="";      currency="";      balance=Env.ZERO;      m_PaymentExportClass=null;      log.log(Level.SEVERE,"No active BankAccount for C_PaySelection_ID=" + C_PaySelection_ID);    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }}  }
class C{  public LargeObjectArray(RawByteCache byteCache,int bufferSize){  this.byteCache=byteCache;  this.key=keyBase + "-" + nextKey.getAndIncrement();  this.byteCache.allocate(this.key);  if (bufferSize > 0) {    this.bufferSize=bufferSize;    this.buffer=new ArrayList<T>();  }}  }
class C{  public int add(T dl){  return add(dl,0);}  }
class C{  public boolean startedFromJar(){  String className=getClass().getName().replace('.','/');  String classJar=getClass().getResource("/" + className + ".class").toString();  return classJar.startsWith("jar:");}  }
class C{  public DelegatingDatagramSocket(SocketAddress bindaddr) throws SocketException {  this(null,bindaddr);}  }
class C{  public MetaData modifyMetaData(MetaData unmodifiedMetaData){  return unmodifiedMetaData;}  }
class C{  public static long generate(long hash,final CharSequence value){  final long m=0xc6a4a7935bd1e995L;  final int r=47;  int strlen=value.length();  int length=2 * strlen;  hash^=length * m;  int len4=strlen / 4;  int offset=0;  for (int i=0; i < len4; i++) {    final int index=i * 4 + offset;    long k=(value.charAt(index + 0) | ((long)value.charAt(index + 1) << 16) | ((long)value.charAt(index + 2) << 32)| ((long)value.charAt(index + 3) << 48));    k*=m;    k^=k >>> r;    k*=m;    hash^=k;    hash*=m;  }  final int off=offset + (strlen & ~0x3);switch (strlen % 4) {case 3:    hash^=(long)value.charAt(off + 2) << 48;case 2:  hash^=(long)value.charAt(off + 1) << 32;case 1:hash^=(long)value.charAt(off + 0) << 16;hash*=m;}hash^=hash >>> r;hash*=m;hash^=hash >>> r;return hash;}  }
class C{  public static DocumentBuilder createDocumentBuilder(boolean isNamespaceAware){  DocumentBuilderFactory docBuilderFactory=DocumentBuilderFactory.newInstance();  docBuilderFactory.setNamespaceAware(isNamespaceAware);  if (Configuration.getJavaVersion() >= 1.6) {    try {      docBuilderFactory.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd",false);    } catch (    ParserConfigurationException e) {      String message=Logging.getMessage("XML.NonvalidatingNotSupported");      Logging.logger().finest(message);    }  }  try {    return docBuilderFactory.newDocumentBuilder();  } catch (  ParserConfigurationException e) {    String message=Logging.getMessage("XML.ParserConfigurationException");    Logging.logger().finest(message);    throw new WWRuntimeException(e);  }}  }
class C{  public Builder precision(int level){  this.precisions.add(level);  return this;}  }
class C{  private Boolean executeIn(PageContext pc,SQL sql,Query qr,OperationN expression,int row,boolean isNot) throws PageException {  Expression[] operators=expression.getOperants();  Object left=executeExp(pc,sql,qr,operators[0],row);  for (int i=1; i < operators.length; i++) {    if (Operator.compare(left,executeExp(pc,sql,qr,operators[i],row)) == 0)     return isNot ? Boolean.FALSE : Boolean.TRUE;  }  return isNot ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public void requestAfterExplanation(@NonNull String[] permissions){  ArrayList<String> permissionsToRequest=new ArrayList<>();  for (  String permissionName : permissions) {    if (isPermissionDeclined(permissionName)) {      permissionsToRequest.add(permissionName);    } else {      permissionCallback.onPermissionPreGranted(permissionName);    }  }  if (permissionsToRequest.isEmpty())   return;  permissions=permissionsToRequest.toArray(new String[permissionsToRequest.size()]);  ActivityCompat.requestPermissions(context,permissions,REQUEST_PERMISSIONS);}  }
class C{  public JHexView(){  for (int i=0; i < m_coloredRanges.length; i++) {    m_coloredRanges[i]=new ColoredRangeManager();  }  setFocusable(true);  setLayout(new BorderLayout());  setFont(m_font);  initListeners();  initHotkeys();  initScrollbar();  img=new BufferedImage((getWidth() + 1) - m_scrollbar.getWidth(),(getHeight() + 1) - m_horizontalScrollbar.getHeight(),BufferedImage.TYPE_INT_RGB);  bufferGraphics=img.getGraphics();  updateOffsetViewWidth();  setEnabled(false);}  }
class C{  protected boolean beforeDelete(){  if (isProcessed())   return false;  for (  MWMInOutBoundLine line : getLines(true,null)) {    line.deleteEx(true);  }  return true;}  }
class C{  public ServerAuthenticationException(){}  }
class C{  public boolean isSetMessage(){  return this.message != null;}  }
class C{  public void addCone(float x,float y,float z,float radius,float length,int segments,float baseScale,int baseDirection){  addCone(x,y,z,radius,length,segments,baseScale,baseDirection,(int)Math.floor(radius * 2F),(int)Math.floor(radius * 2F));}  }
class C{  public void registerSynchronization(Synchronization synchronisation) throws SystemException, IllegalStateException, RollbackException {{    LogWriterI18n writer=TransactionUtils.getLogWriterI18n();    if (writer.fineEnabled()) {      writer.fine("registering JTA synchronization: " + synchronisation);    }  }  if (synchronisation == null)   throw new SystemException(LocalizedStrings.TransactionImpl_TRANSACTIONIMPLREGISTERSYNCHRONIZATIONSYNCHRONIZATION_IS_NULL.toLocalizedString());  gtx=tm.getGlobalTransaction();  if (gtx == null) {    throw new SystemException(LocalizedStrings.TransactionManagerImpl_NO_TRANSACTION_PRESENT.toLocalizedString());  }synchronized (gtx) {    int status=-1;    if ((status=gtx.getStatus()) == Status.STATUS_MARKED_ROLLBACK) {      String exception=LocalizedStrings.TransactionImpl_TRANSACTIONIMPL_REGISTERSYNCHRONIZATION_SYNCHRONIZATION_CANNOT_BE_REGISTERED_BECAUSE_THE_TRANSACTION_HAS_BEEN_MARKED_FOR_ROLLBACK.toLocalizedString();      LogWriterI18n writer=TransactionUtils.getLogWriterI18n();      if (writer.fineEnabled())       writer.fine(exception);      throw new RollbackException(exception);    } else     if (status != Status.STATUS_ACTIVE) {      String exception=LocalizedStrings.TransactionImpl_TRANSACTIONIMPL_REGISTERSYNCHRONIZATION_SYNCHRONIZATION_CANNOT_BE_REGISTERED_ON_A_TRANSACTION_WHICH_IS_NOT_ACTIVE.toLocalizedString();      LogWriterI18n writer=TransactionUtils.getLogWriterI18n();      if (writer.fineEnabled())       writer.fine(exception);      throw new IllegalStateException(exception);    }    syncList.add(synchronisation);  }}  }
class C{  public static boolean isSameDay(final Calendar cal1,final Calendar cal2){  if (cal1 == null || cal2 == null) {    throw new IllegalArgumentException("The date must not be null");  }  return (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR));}  }
class C{  void updateCountersForOpen(){  mPreferenceManager.setContextualSearchTapCount(0);  if (isPromoAvailable()) {    getPromoTapCounter().disable();    int count=mPreferenceManager.getContextualSearchPromoOpenCount();    mPreferenceManager.setContextualSearchPromoOpenCount(++count);    ContextualSearchUma.logPromoOpenCount(count);  }}  }
class C{  private void editBodyAction(){  TreePath path=this.tree.getSelectionPath();  if (path != null) {    DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();    if (node.getUserObject() instanceof SandboxBody) {      SandboxBody body=(SandboxBody)node.getUserObject();synchronized (Simulation.LOCK) {        EditBodyDialog.show(ControlUtilities.getParentWindow(this),body);      }    }  }}  }
class C{  public NoMissingLabelsCondition(ExampleSet exampleSet,String parameterString){}  }
class C{  protected boolean isIgnorable(final Expression expr){  return context.getIgnoreIgnorable() && expr.isIgnore();}  }
class C{  public void testFixedTemporalOverPartitioned(){  EPServiceProvider epService=allocateEngine(false);  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.startTest(epService,this.getClass(),getName());  }  EPServiceProviderSPI spi=(EPServiceProviderSPI)epService;  FilterServiceSPI filterSPI=(FilterServiceSPI)spi.getFilterService();  sendTimeEvent(epService,"2002-05-1T07:00:00.000");  EPStatement stmtCtx=epService.getEPAdministrator().createEPL("create context NestedContext " + "context EightToNine as start (0, 8, *, *, *) end (0, 9, *, *, *), " + "context SegmentedByAString partition by theString from SupportBean");  assertEquals(0,spi.getSchedulingService().getScheduleHandleCount());  SupportUpdateListener listener=new SupportUpdateListener();  String[] fields="c1".split(",");  EPStatementSPI statement=(EPStatementSPI)epService.getEPAdministrator().createEPL("context NestedContext select count(*) as c1 from SupportBean");  statement.addListener(listener);  epService.getEPRuntime().sendEvent(new SupportBean());  assertFalse(listener.isInvoked());  assertEquals(0,filterSPI.getFilterCountApprox());  assertEquals(1,spi.getSchedulingService().getScheduleHandleCount());  sendTimeEvent(epService,"2002-05-1T08:00:00.000");  assertEquals(1,filterSPI.getFilterCountApprox());  epService.getEPRuntime().sendEvent(new SupportBean("E1",0));  EPAssertionUtil.assertProps(listener.assertOneGetNewAndReset(),fields,new Object[]{1L});  assertEquals(2,filterSPI.getFilterCountApprox());  epService.getEPRuntime().sendEvent(new SupportBean("E2",0));  EPAssertionUtil.assertProps(listener.assertOneGetNewAndReset(),fields,new Object[]{1L});  assertEquals(3,filterSPI.getFilterCountApprox());  epService.getEPRuntime().sendEvent(new SupportBean("E1",0));  EPAssertionUtil.assertProps(listener.assertOneGetNewAndReset(),fields,new Object[]{2L});  assertEquals(3,filterSPI.getFilterCountApprox());  assertEquals(1,spi.getSchedulingService().getScheduleHandleCount());  sendTimeEvent(epService,"2002-05-1T09:00:00.000");  assertEquals(0,filterSPI.getFilterCountApprox());  epService.getEPRuntime().sendEvent(new SupportBean("E1",0));  epService.getEPRuntime().sendEvent(new SupportBean("E2",0));  assertFalse(listener.isInvoked());  sendTimeEvent(epService,"2002-05-2T08:00:00.000");  assertEquals(1,filterSPI.getFilterCountApprox());  epService.getEPRuntime().sendEvent(new SupportBean("E1",0));  EPAssertionUtil.assertProps(listener.assertOneGetNewAndReset(),fields,new Object[]{1L});  epService.getEPRuntime().sendEvent(new SupportBean("E1",0));  EPAssertionUtil.assertProps(listener.assertOneGetNewAndReset(),fields,new Object[]{2L});  epService.getEPRuntime().sendEvent(new SupportBean("E2",0));  EPAssertionUtil.assertProps(listener.assertOneGetNewAndReset(),fields,new Object[]{1L});  AgentInstanceAssertionUtil.assertInstanceCounts(statement.getStatementContext(),2,0,0,0);  stmtCtx.destroy();  epService.getEPRuntime().sendEvent(new SupportBean("E2",0));  EPAssertionUtil.assertProps(listener.assertOneGetNewAndReset(),fields,new Object[]{2L});  statement.destroy();  epService.getEPRuntime().sendEvent(new SupportBean("E1",0));  epService.getEPRuntime().sendEvent(new SupportBean("E2",0));  assertFalse(listener.isInvoked());  assertEquals(0,filterSPI.getFilterCountApprox());  assertEquals(0,spi.getSchedulingService().getScheduleHandleCount());  AgentInstanceAssertionUtil.assertInstanceCounts(statement.getStatementContext(),0,0,0,0);  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.endTest();  }}  }
class C{  public void writeJCModel(int num,XMLWriter writer,PartitionSubstitutionModel model){  String prefix=model.getPrefix(num);  writer.writeComment("The JC substitution model (Jukes & Cantor, 1969)");  writer.writeOpenTag(NucModelType.HKY.getXMLName(),new Attribute[]{new Attribute.Default<String>(XMLParser.ID,prefix + "jc")});  writer.writeOpenTag(HKYParser.FREQUENCIES);  writeFrequencyModelDNA(writer,model,num);  writer.writeCloseTag(HKYParser.FREQUENCIES);  writer.writeOpenTag(HKYParser.KAPPA);  writeParameter("",1,1.0,Double.NaN,Double.NaN,writer);  writer.writeCloseTag(HKYParser.KAPPA);  writer.writeCloseTag(NucModelType.HKY.getXMLName());}  }
class C{  public TransportAddress(byte[] ipAddress,int port,Transport transport) throws UnknownHostException {  this(InetAddress.getByAddress(ipAddress),port,transport);}  }
class C{  public DriverTask restoreVolumeMirror(List<VolumeMirror> mirrors){  LOG.info("Restoring volume mirror not supported");  DriverTask task=new DellSCDriverTask("restoreVolumeMirror");  task.setStatus(TaskStatus.FAILED);  return null;}  }
class C{  void removeMigrations(List<String> migrationNames) throws VPlexApiException {  s_logger.info("Removing records for migrations {}",migrationNames);  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();  List<VPlexMigrationInfo> migrationInfoList=null;  try {    migrationInfoList=discoveryMgr.findMigrations(migrationNames);  } catch (  VPlexApiException vae) {    s_logger.info("No migration found in the VPLEX",vae);    return;  }  StringBuilder migrationArgBuilder=new StringBuilder();  for (  VPlexMigrationInfo migrationInfo : migrationInfoList) {    String migrationStatus=migrationInfo.getStatus();    if ((!VPlexApiConstants.MIGRATION_COMMITTED.equals(migrationStatus)) && (!VPlexApiConstants.MIGRATION_CANCELED.equals(migrationStatus)) && (!VPlexApiConstants.MIGRATION_ERROR.equals(migrationStatus))) {      throw VPlexApiException.exceptions.cantRemoveMigrationInvalidState(migrationInfo.getName());    }    if (migrationArgBuilder.length() != 0) {      migrationArgBuilder.append(",");    }    migrationArgBuilder.append(migrationInfo.getPath());  }  removeCommittedOrCanceledMigrations(migrationArgBuilder.toString());}  }
class C{  public void removeFromComponentLists(){  getSubject().removeSubjectStatement(this);  getPredicate().removePredicateStatement(this);  getObject().removeObjectStatement(this);  MemResource context=getContext();  if (context != null) {    context.removeContextStatement(this);  }}  }
class C{  public static double determinantSymmPosDefMatrix(double[][] A) throws Exception {  double[][] L=CholeskyDecomposition(A);  return determinantViaCholeskyResult(L);}  }
class C{  protected Node copyInto(Node n){  super.copyInto(n);  AbstractNotation an=(AbstractNotation)n;  an.nodeName=nodeName;  an.publicId=publicId;  an.systemId=systemId;  return n;}  }
class C{  public XYTitleAnnotation(double x,double y,Title title,RectangleAnchor anchor){  super();  ParamChecks.nullNotPermitted(title,"title");  ParamChecks.nullNotPermitted(anchor,"anchor");  this.coordinateType=XYCoordinateType.RELATIVE;  this.x=x;  this.y=y;  this.maxWidth=0.0;  this.maxHeight=0.0;  this.title=title;  this.anchor=anchor;}  }
class C{  @Override public boolean addSensorToRoute(String sensorName,int mode){  if (_controlSensorList.size() >= MAX_CONTROL_SENSORS) {    log.warn("Reached maximum number of control Sensors for Route: {}",getSystemName());  }  ControlSensor sensor=new ControlSensor(sensorName);  log.debug("addSensorToRoute {} {}",getSystemName(),sensorName);  if (!sensor.setState(mode)) {    return false;  }  if (isControlSensorIncluded(sensor)) {    log.debug("Not adding duplicate control sensor {} to route {}",sensorName,getSystemName());  } else {    _controlSensorList.add(sensor);  }  return true;}  }
class C{  boolean isRunning(){  return running;}  }
class C{  @Override public MessageConsumer createConsumer(final Destination destination,final String messageSelector) throws JMSException {  lock();  try {    Session session=getSessionInternal();    if (ActiveMQRASession.trace) {      ActiveMQRALogger.LOGGER.trace("createConsumer " + session + " dest="+ destination+ " messageSelector="+ messageSelector);    }    MessageConsumer result=session.createConsumer(destination,messageSelector);    result=new ActiveMQRAMessageConsumer(result,this);    if (ActiveMQRASession.trace) {      ActiveMQRALogger.LOGGER.trace("createdConsumer " + session + " consumer="+ result);    }    addConsumer(result);    return result;  }  finally {    unlock();  }}  }
class C{  public static void putString2bytes(byte[] destbytes,String srcString,int destOffset,int srcOffset,int count){  for (int i=0; i < count; i++) {    destbytes[count + i]=srcString.getBytes()[i];  }}  }
class C{  @Override public boolean dataDefinitionIgnoredInTransactions(){  debugCodeCall("dataDefinitionIgnoredInTransactions");  return false;}  }
class C{  private int searchForward(Body body,Iterator<Unit> trapUnits,Set<StmtAndException> findTestVisiting,Map<StmtAndException,Integer> findTestvisited,Set<SootMethod> visitedBackwardMethods,Set<Body> processThrownVisiting,int depth,Stack<StmtEdge<SootMethod>> stack,boolean debug){  logger.debug("processThrownExceptions: depth {} method {}",depth,body.getMethod());  if (API.v().isSystemMethod(body.getMethod())) {    logger.debug("Not traversing into system call.");    return 1;  }  if (depth > DEPTH_LIMIT) {    logger.debug("Reached recursion depth.");    return 0;  }  if (processThrownVisiting.contains(body))   return 1;  processThrownVisiting.add(body);  while (trapUnits.hasNext()) {    Unit currentU=trapUnits.next();    Stmt current=(Stmt)currentU;    logger.debug("Reachable statement: {}",current);    if (current.containsInvokeExpr()) {      try {        Set<StmtEdge<SootMethod>> targetEdges=CHACallGraph.v(false).getTargetEdgesForStmt(current);        for (        StmtEdge<SootMethod> stmtEdge : targetEdges) {          SootMethod target=stmtEdge.getV2();          if (uiMethods.containsPoly(target) && !CHACallGraph.v(false).isReflectedEdge(stmtEdge)) {            logger.debug("Found ui method call in handler {}: {}\n",body.getMethod(),current);            return -1;          } else           if (target.isConcrete()) {            Body targetBody=null;            try {              targetBody=target.retrieveActiveBody();            } catch (            Exception e) {              continue;            }            Stack<StmtEdge<SootMethod>> newStack=new Stack<StmtEdge<SootMethod>>();            newStack.addAll(stack);            newStack.push(stmtEdge);            int recurseVal=searchForward(targetBody,targetBody.getUnits().snapshotIterator(),findTestVisiting,findTestvisited,visitedBackwardMethods,processThrownVisiting,depth + 1,newStack,debug);            if (recurseVal < 1)             return recurseVal;          } else           if (target.isNative() || NativeMethodBuilder.v().wasNativeAppMethod(target)) {            for (            SootClass throwsEx : target.getExceptions()) {              logger.debug("Found call to native method {} that throws exception: {}",current.getInvokeExpr(),throwsEx);              int recurseVal=findAndTestAllHandlers(body,throwsEx,current,findTestVisiting,findTestvisited,visitedBackwardMethods,depth + 1,stack,debug);              if (recurseVal < 1)               return recurseVal;            }          }        }      } catch (      Exception e) {        logger.debug("Exception: ",e);      }    } else     if (current instanceof ThrowStmt) {      ThrowStmt throwStmt=(ThrowStmt)current;      logger.debug("Found throw: {} in {}",throwStmt,body.getMethod());      Stmt lastDefOfThrownOp=SootUtils.getPrevDef(body,throwStmt,throwStmt.getOp());      logger.debug("lastDefOfThrownOp: {}",lastDefOfThrownOp);      Collection<SootClass> reThrownTypes=null;      if (lastDefOfThrownOp == null) {        logger.debug("Unknown last def of thrown exception: {}",lastDefOfThrownOp);        return 0;      } else       if (lastDefOfThrownOp instanceof IdentityStmt && ((IdentityStmt)lastDefOfThrownOp).getRightOp() instanceof CaughtExceptionRef) {        reThrownTypes=getPossibleThrownExceptions(body,getTryBlockForFirstTrapUnit(body,(IdentityStmt)lastDefOfThrownOp));      } else       if (lastDefOfThrownOp instanceof AssignStmt && ((AssignStmt)lastDefOfThrownOp).getRightOp() instanceof NewExpr) {        Type type=((NewExpr)((AssignStmt)lastDefOfThrownOp).getRightOp()).getType();        reThrownTypes=new LinkedHashSet<SootClass>();        if (type instanceof RefType) {          reThrownTypes.add(((RefType)type).getSootClass());        }      } else {        logger.debug("Unknown last def of thrown exception: {}",lastDefOfThrownOp);      }      if (reThrownTypes == null) {        logger.debug("Don't know type of re-thrown exception");        return 0;      }      for (      SootClass reThrownType : reThrownTypes) {        if (!Scene.v().getActiveHierarchy().isClassSubclassOfIncluding(reThrownType,throwableClass)) {          logger.debug("Class of rethrown exception is not an exception type: {}",reThrownType);        }        int recurseVal=findAndTestAllHandlers(body,reThrownType,throwStmt,findTestVisiting,findTestvisited,visitedBackwardMethods,depth + 1,stack,debug);        if (recurseVal < 1)         return recurseVal;      }    }  }  return 1;}  }
class C{  @Override public boolean addAll(int index,Collection<? extends Line1D> c){  throw new UnsupportedOperationException();}  }
class C{  public void addIload(int n){  if (n < 4)   addOpcode(26 + n); else   if (n < 0x100) {    addOpcode(ILOAD);    add(n);  } else {    addOpcode(WIDE);    addOpcode(ILOAD);    addIndex(n);  }}  }
class C{  public SIPHeader parse() throws ParseException {  dbg_enter("parse");  try {    headerName(TokenTypes.AUTHORIZATION);    Authorization auth=new Authorization();    super.parse(auth);    return auth;  }  finally {    dbg_leave("parse");  }}  }
class C{  public static boolean valuesConflict(boolean strictChecking,FlowValue forward,FlowValue backward){  if (forward == TOP || backward == TOP || backward == UNKNOWN || forward == backward) {    return false;  }  if (strictChecking) {    return true;  }  return (forward == ALWAYS && backward == NEVER) || (forward == NEVER && backward == ALWAYS);}  }
class C{  public int put(Object key,int value){  if (key == null)   return putForNullKey(value);  int hash=hash(hashingStrategy.hashCode(key));  int i=indexFor(hash,table.length);  for (Entry e=table[i]; e != null; e=e.next) {    Object k;    if (e.hash == hash && ((k=e.key) == key || hashingStrategy.equals(k,key))) {      int oldValue=e.value;      e.value=value;      e.recordAccess(this);      return oldValue;    }  }  modCount++;  addEntry(hash,key,value,i);  return 0;}  }
class C{  private boolean isParentIconifiable(){  if (rootParent instanceof JFrame) {    return ((JFrame)rootParent).isResizable();  }  return false;}  }
class C{  void flush() throws IOException {  WriteStream os=_os;  if (os != null) {    os.flush();  }}  }
class C{  @Override public void open(){  throw new RuntimeException("User context required to open");}  }
class C{  static boolean isOSNameMatch(final String osName,final String osNamePrefix){  if (osName == null) {    return false;  }  return osName.startsWith(osNamePrefix);}  }
class C{  public boolean hasBrokenAST(){  return hasBrokenAST;}  }
class C{  private boolean isFreshnessLifetimeHeuristic(){  return cacheResponse.cacheControl().maxAgeSeconds() == -1 && expires == null;}  }
class C{  public static int encodeZigZag32(final int n){  return (n << 1) ^ (n >> 31);}  }
class C{  public boolean isInProduction(){  Object oo=get_Value(COLUMNNAME_IsInProduction);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public boolean containsValue(Object val){  return _map.containsValue(unwrapValue(val));}  }
class C{  public static void main(String[] args) throws Exception {  System.err.println("Running Jetty 8.1.8.v20121106");  Configs configs=new Configs();  configs.validation();  server=new Server();  initConnnector(server,configs);  initWebappContext(server,configs);  if (configs.getJettyXML() != null && !"".equals(configs.getJettyXML().trim())) {    System.err.println("Loading Jetty.xml:" + configs.getJettyXML());    try {      XmlConfiguration configuration=new XmlConfiguration(new File(configs.getJettyXML()).toURI().toURL());      configuration.configure(server);    } catch (    Exception ex) {      System.err.println("Exception happened when loading Jetty.xml:");      ex.printStackTrace();    }  }  if (configs.getEnablescanner())   initScanner(web,configs);  initEclipseListener(configs);  initCommandListener(configs);  try {    server.start();    server.join();  } catch (  Exception e) {    e.printStackTrace();    System.exit(100);  }  return;}  }
class C{  public void correctBounds(ComponentWrapper comp){}  }
class C{  @Override public void startElement(String namespace,String localName,String prefix,Attributes attributes,DeserializationContext context) throws SAXException {  if (value == null) {    try {      value=javaType.newInstance();    } catch (    Exception e) {      Constructor[] constructors=javaType.getConstructors();      if (constructors.length > 0) {        constructorToUse=constructors[0];      }      if (constructorToUse == null) {        throw new SAXException(Messages.getMessage("cantCreateBean00",javaType.getName(),e.toString()));      }    }  }  super.startElement(namespace,localName,prefix,attributes,context);}  }
class C{  public boolean isFavorite(Emoticon emote){  return favoritesNotFound.containsKey(emote.code) || favorites.containsValue(emote);}  }
class C{  public ReferenceRegions(){  this(new LinkedHashMap<>());}  }
class C{  void checkProjectName(String name) throws BadRequestException {  if (Strings.isNullOrEmpty(name)) {    throw new BadRequestException("Project name required");  }  if (!Pattern.compile("[a-zA-Z0-9]+[\\.\\w-]*").matcher(name).matches()) {    throw new BadRequestException("Project name " + name + " is invalid");  }}  }
class C{  public synchronized IndexLocation computeIndexLocation(IPath containerPath,final URL newIndexURL){  IndexLocation indexLocation=(IndexLocation)this.indexLocations.get(containerPath);  if (indexLocation == null) {    if (newIndexURL != null) {      indexLocation=IndexLocation.createIndexLocation(newIndexURL);      indexLocation=(IndexLocation)getIndexStates().getKey(indexLocation);      this.indexLocations.put(containerPath,indexLocation);    }  } else {    URL existingURL=indexLocation.getUrl();    if (newIndexURL != null) {      if (!newIndexURL.equals(existingURL)) {        this.removeIndex(containerPath);        indexLocation=IndexLocation.createIndexLocation(newIndexURL);        indexLocation=(IndexLocation)getIndexStates().getKey(indexLocation);        this.indexLocations.put(containerPath,indexLocation);      }    }  }  return indexLocation;}  }
class C{  public DefaultKeyTypedAction(){  super(defaultKeyTypedAction);}  }
class C{  public static int ENOEXEC(){  return Errno.ENOEXEC.intValue();}  }
class C{  public final void sendCTCPCommand(String target,String command){  _outQueue.add("PRIVMSG " + target + " :\u0001"+ command+ "\u0001");}  }
class C{  public static byte[] decodeFromFile(String filename) throws java.io.IOException {  byte[] decodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=null;    int length=0;    int numBytes=0;    if (file.length() > Integer.MAX_VALUE) {      throw new java.io.IOException("File is too big for this convenience method (" + file.length() + " bytes).");    }    buffer=new byte[(int)file.length()];    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.DECODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    decodedData=new byte[length];    System.arraycopy(buffer,0,decodedData,0,length);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return decodedData;}  }
class C{  public void trigger(Block b,Player p){  if (this.action != null) {    this.action.fire(p,null,null);  }  if (puzzleBuildingBlock != null) {    puzzleBuildingBlock.put("active",true);  }}  }
class C{  public ScannerException(File file,ErrorMessages message){  this(file,ErrorMessages.get(message),message,-1,-1);}  }
class C{  public static DateTimeFormatter basicOrdinalDate(){  if (bod == null) {    bod=new DateTimeFormatterBuilder().appendYear(4,4).appendFixedDecimal(DateTimeFieldType.dayOfYear(),3).toFormatter();  }  return bod;}  }
class C{  public void makePath(String path,boolean retryOnConnLoss) throws KeeperException, InterruptedException {  makePath(path,null,CreateMode.PERSISTENT,retryOnConnLoss);}  }
class C{  public boolean isRemainedAboveThreshold(){  return remainedAboveThreshold;}  }
class C{  private Entry checkOldName(String baseName){  Entry e=name2entry.get(baseName);  if (e == null) {    throw new IllegalArgumentException("Unknown filter name:" + baseName);  }  return e;}  }
class C{  public byte[] asn1Encode(int msgType) throws Asn1Exception, IOException {  Vector<DerValue> v=new Vector<>();  v.addElement(new DerValue(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x00),kdcOptions.asn1Encode()));  if (msgType == Krb5.KRB_AS_REQ) {    if (cname != null) {      v.addElement(new DerValue(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x01),cname.asn1Encode()));    }  }  if (sname != null) {    v.addElement(new DerValue(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x02),sname.getRealm().asn1Encode()));    v.addElement(new DerValue(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x03),sname.asn1Encode()));  } else   if (cname != null) {    v.addElement(new DerValue(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x02),cname.getRealm().asn1Encode()));  }  if (from != null) {    v.addElement(new DerValue(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x04),from.asn1Encode()));  }  v.addElement(new DerValue(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x05),till.asn1Encode()));  if (rtime != null) {    v.addElement(new DerValue(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x06),rtime.asn1Encode()));  }  DerOutputStream temp=new DerOutputStream();  temp.putInteger(BigInteger.valueOf(nonce));  v.addElement(new DerValue(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x07),temp.toByteArray()));  temp=new DerOutputStream();  for (int i=0; i < eType.length; i++) {    temp.putInteger(BigInteger.valueOf(eType[i]));  }  DerOutputStream eTypetemp=new DerOutputStream();  eTypetemp.write(DerValue.tag_SequenceOf,temp);  v.addElement(new DerValue(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x08),eTypetemp.toByteArray()));  if (addresses != null) {    v.addElement(new DerValue(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x09),addresses.asn1Encode()));  }  if (encAuthorizationData != null) {    v.addElement(new DerValue(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x0A),encAuthorizationData.asn1Encode()));  }  if (additionalTickets != null && additionalTickets.length > 0) {    temp=new DerOutputStream();    for (int i=0; i < additionalTickets.length; i++) {      temp.write(additionalTickets[i].asn1Encode());    }    DerOutputStream ticketsTemp=new DerOutputStream();    ticketsTemp.write(DerValue.tag_SequenceOf,temp);    v.addElement(new DerValue(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x0B),ticketsTemp.toByteArray()));  }  DerValue der[]=new DerValue[v.size()];  v.copyInto(der);  temp=new DerOutputStream();  temp.putSequence(der);  return temp.toByteArray();}  }
class C{  public void writeTo(StreamOutput out) throws IOException {  out.writeByte(id);}  }
class C{  public void addMetadataOption(String name,String value){  metadata.add(new ReplOption(name,value));}  }
class C{  private IConfigurationElement selectConfigurationElement(Set set){  if (set != null && !set.isEmpty()) {    Iterator e=set.iterator();    return (IConfigurationElement)e.next();  }  return null;}  }
class C{  SortedSet<String> typesToImport(){  SortedSet<String> typesToImport=new TreeSet<String>();  for (  Map.Entry<String,Spelling> entry : imports.entrySet()) {    if (entry.getValue().importIt) {      typesToImport.add(entry.getKey());    }  }  return typesToImport;}  }
class C{  private static void sumSq(double[] a,int ai,final int len,KahanObject kbuff,KahanPlusSq kplusSq){  sumWithFn(a,ai,len,kbuff,kplusSq);}  }
class C{  public static <E>Set<E> synchronizedSet(Set<E> set){  if (set == null) {    throw new NullPointerException("set == null");  }  return new SynchronizedSet<E>(set);}  }
class C{  protected byte type(){  return TYPE;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected String createFileName(File dwcaFolder,String extensionName){  String wildcard=extensionName + WILDCARD_CHARACTER + TEXT_FILE_EXTENSION;  FileFilter fileFilter=new WildcardFileFilter(wildcard,IOCase.INSENSITIVE);  File[] files=dwcaFolder.listFiles(fileFilter);  if (files.length > 0) {    int max=1;    String fileName=null;    for (    File file : files) {      try {        fileName=file.getName();        int suffixEndIndex=fileName.indexOf(TEXT_FILE_EXTENSION);        String suffix=file.getName().substring(extensionName.length(),suffixEndIndex);        int suffixInt=Integer.valueOf(suffix);        if (suffixInt >= max) {          max=suffixInt;        }      } catch (      NumberFormatException e) {        log.debug("No numerical suffix could be parsed from file name: " + Strings.nullToEmpty(fileName));      }    }    return extensionName + String.valueOf(max + 1) + TEXT_FILE_EXTENSION;  }  return extensionName + TEXT_FILE_EXTENSION;}  }
class C{  public void init(){  NamedIcon icon=(NamedIcon)getIcon();  String name=icon.getURL();  if (name.endsWith("loco-white.gif")) {    _locoColor=Color.WHITE;  } else   if (name.endsWith("loco-green.gif")) {    _locoColor=Color.GREEN;  } else   if (name.endsWith("loco-gray.gif")) {    _locoColor=Color.GRAY;  } else   if (name.endsWith("loco-red.gif")) {    _locoColor=Color.RED;  } else   if (name.endsWith("loco-blue.gif")) {    _locoColor=COLOR_BLUE;  } else   if (name.endsWith("loco-yellow.gif")) {    _locoColor=Color.YELLOW;  }}  }
class C{  public static QueryBuilder<ParsedGraphQuery> describe(String[] theVars,Resource... theValues){  QueryBuilder<ParsedGraphQuery> aBuilder=new AbstractQueryBuilder<ParsedGraphQuery>(new ParsedDescribeQuery());  aBuilder.reduced();  aBuilder.addProjectionVar("descr_subj","descr_pred","descr_obj");  GroupBuilder<?,?> aGroup=aBuilder.group();  if (theVars != null) {    for (    String aVar : theVars) {      Var aVarObj=new Var(aVar);      aVarObj.setAnonymous(true);      aGroup.filter().or(new SameTerm(aVarObj,new Var("descr_subj")),new SameTerm(aVarObj,new Var("descr_obj")));    }  }  if (theValues != null) {    for (    Resource aVar : theValues) {      Var aSubjVar=new Var("descr_subj");      aSubjVar.setAnonymous(true);      Var aObjVar=new Var("descr_obj");      aObjVar.setAnonymous(true);      aGroup.filter().or(new SameTerm(new ValueConstant(aVar),aSubjVar),new SameTerm(new ValueConstant(aVar),aObjVar));    }  }  aGroup.atom("descr_subj","descr_pred","descr_obj");  return aBuilder;}  }
class C{  public static <W>ArrayEncodedCachingLmWrapper<W> wrapWithCacheThreadSafe(final ArrayEncodedNgramLanguageModel<W> lm){  return wrapWithCacheThreadSafe(lm,16);}  }
class C{  void verifyAssertionExpirationDate(Node nodeAssertion,Node nodeConfirmationData) throws AssertionValidationException {  Calendar expirationDate=DatatypeConverter.parseDateTime(XMLConverter.getStringAttValue(nodeConfirmationData,SamlXmlTags.ATTRIBUTE_NOT_ON_OR_AFTER));  if (now.equals(expirationDate) || now.after(expirationDate)) {    String assertionId=XMLConverter.getStringAttValue(nodeAssertion,SamlXmlTags.ATTRIBUTE_ID);    AssertionValidationException exception=new AssertionValidationException(String.format("Assertion (id=%s) expired",assertionId),AssertionValidationException.ReasonEnum.ASSERTION_EXPIRED,new String[]{assertionId});    throw exception;  }}  }
class C{  public ScriptGroup create(){  if (mNodes.size() == 0) {    throw new RSInvalidStateException("Empty script groups are not allowed");  }  for (int ct=0; ct < mNodes.size(); ct++) {    mNodes.get(ct).dagNumber=0;  }  validateDAG();  ArrayList<IO> inputs=new ArrayList<IO>();  ArrayList<IO> outputs=new ArrayList<IO>();  int[] kernels=new int[mKernelCount];  int idx=0;  for (int ct=0; ct < mNodes.size(); ct++) {    Node n=mNodes.get(ct);    for (int ct2=0; ct2 < n.mKernels.size(); ct2++) {      final Script.KernelID kid=n.mKernels.get(ct2);      kernels[idx++]=kid.getID(mRS);      boolean hasInput=false;      boolean hasOutput=false;      for (int ct3=0; ct3 < n.mInputs.size(); ct3++) {        if (n.mInputs.get(ct3).mToK == kid) {          hasInput=true;        }      }      for (int ct3=0; ct3 < n.mOutputs.size(); ct3++) {        if (n.mOutputs.get(ct3).mFrom == kid) {          hasOutput=true;        }      }      if (!hasInput) {        inputs.add(new IO(kid));      }      if (!hasOutput) {        outputs.add(new IO(kid));      }    }  }  if (idx != mKernelCount) {    throw new RSRuntimeException("Count mismatch, should not happen.");  }  int[] src=new int[mLines.size()];  int[] dstk=new int[mLines.size()];  int[] dstf=new int[mLines.size()];  int[] types=new int[mLines.size()];  for (int ct=0; ct < mLines.size(); ct++) {    ConnectLine cl=mLines.get(ct);    src[ct]=cl.mFrom.getID(mRS);    if (cl.mToK != null) {      dstk[ct]=cl.mToK.getID(mRS);    }    if (cl.mToF != null) {      dstf[ct]=cl.mToF.getID(mRS);    }    types[ct]=cl.mAllocationType.getID(mRS);  }  int id=mRS.nScriptGroupCreate(kernels,src,dstk,dstf,types);  if (id == 0) {    throw new RSRuntimeException("Object creation error, should not happen.");  }  ScriptGroup sg=new ScriptGroup(id,mRS);  sg.mOutputs=new IO[outputs.size()];  for (int ct=0; ct < outputs.size(); ct++) {    sg.mOutputs[ct]=outputs.get(ct);  }  sg.mInputs=new IO[inputs.size()];  for (int ct=0; ct < inputs.size(); ct++) {    sg.mInputs[ct]=inputs.get(ct);  }  return sg;}  }
class C{  public String invertSelectionTipText(){  return "If set to true, the selection will be inverted; eg: the attribute " + "indices '2-4' then mean everything apart from '2-4'.";}  }
class C{  public boolean hasForeignColumn(Column column){  for (int idx=0; idx < getReferenceCount(); idx++) {    if (column.equals(getReference(idx).getForeignColumn())) {      return true;    }  }  return false;}  }
class C{  public static <T,K,L extends List<T>>BiConsumer<Partition<T,K,L>,T> processOnInsert(){  return null;}  }
class C{  public boolean parse(){  BStack=new BracketStack();  BStack.newClass();  BStack.registerInCurrentClass(AND);  BStack.newClass();  BStack.registerInCurrentClass(OR);  BStack.newClass();  BStack.registerInCurrentClass(PROOF);  BStack.newClass();  BStack.registerInCurrentClass(LBR);  BStack.newClass();  BStack.registerInCurrentClass(ASSUME);  try {    ParseTree=CompilationUnit();  } catch (  ParseException e) {    PErrors.push(new ParseError(msgStackToString(e)));  }catch (  TokenMgrError tme) {    String msg=tme.getMessage();    int bl=jj_input_stream.getBeginLine() + 1;    int el=jj_input_stream.getEndLine() + 1;    if ((msg.indexOf("EOF") != -1) && (bl != el)) {      PErrors.push(new ParseError("Lexical {error: EOF reached, " + "possibly open comment starting around line " + (bl - 1)));    } else     PErrors.push(new ParseError(msg));  }  if (PErrors.empty())   Assert.check(heirsIndex == 0,EC.SANY_PARSER_CHECK_1); else {    tla2sany.st.ParseError list[]=PErrors.errors();    for (int i=0; i < list.length; i++) {      ToolIO.out.println(list[i].reportedError());    }  }  return PErrors.empty();}  }
class C{  private static String prettyPrintHex(byte[] bArray,int len,int maxSize,boolean isAscii){  StringBuilder result=new StringBuilder(len * 4 + (isAscii ? len * 3 : 0));  StringBuilder asciiBuf=isAscii ? new StringBuilder(maxSize) : null;  for (int i=0; i < len; i++) {    result.append(printHex(bArray[i])).append(' ');    if (isAscii) {      asciiBuf.append(printAscii(bArray[i]));    }    if (i % maxSize == maxSize - 1) {      if (isAscii) {        result.append('\t').append(asciiBuf);        asciiBuf.setLength(0);      }      result.append('\n');    }  }  if (isAscii) {    if (asciiBuf != null && asciiBuf.length() > 0) {      for (int i=asciiBuf.length(); i < maxSize; i++) {        result.append("   ");      }      result.append('\t').append(asciiBuf);    }  }  return result.toString();}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return execute(xctxt,xctxt.getCurrentNode());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void remove(final CCriteriumTree tree,final ICriteriumTreeNode node){  node.getCriterium().dispose();  tree.remove(node);}  }
class C{  private static int CallStaticIntMethod(JNIEnvironment env,int classJREF,int methodID) throws Exception {  if (VM.VerifyAssertions) {    VM._assert(VM.BuildForPowerPC,ERROR_MSG_WRONG_IMPLEMENTATION);  }  if (traceJNI)   VM.sysWrite("JNI called: CallStaticIntMethod  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object returnObj=JNIHelpers.invokeWithDotDotVarArg(methodID,TypeReference.Int);    return Reflection.unwrapInt(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public static BufferedImage toBufferedImage(Image img){  if (img instanceof BufferedImage) {    return (BufferedImage)img;  }  BufferedImage bimage=new BufferedImage(img.getWidth(null),img.getHeight(null),BufferedImage.TYPE_INT_ARGB);  Graphics2D bGr=bimage.createGraphics();  bGr.drawImage(img,0,0,null);  bGr.dispose();  return bimage;}  }
class C{  private long checkMinPage(Collection<PageSubscription> cursorList){  long minPage=Long.MAX_VALUE;  for (  PageSubscription cursor : cursorList) {    long firstPage=cursor.getFirstPage();    if (logger.isDebugEnabled()) {      logger.debug(this.pagingStore.getAddress() + " has a cursor " + cursor+ " with first page="+ firstPage);    }    if (firstPage >= 0 && firstPage < minPage) {      minPage=firstPage;    }  }  if (logger.isDebugEnabled()) {    logger.debug(this.pagingStore.getAddress() + " has minPage=" + minPage);  }  return minPage;}  }
class C{  public DefaultOHLCDataset(Comparable key,OHLCDataItem[] data){  this.key=key;  this.data=data;}  }
class C{  public SubjectInfoAccess(List<AccessDescription> accessDescriptions){  this.accessDescriptions=accessDescriptions;}  }
class C{  public static int OS2IP(byte[] input){  return ((input[0] & 0xff)) | ((input[1] & 0xff) << 8) | ((input[2] & 0xff) << 16)| ((input[3] & 0xff)) << 24;}  }
class C{  public void activity(){  cancelCallback();  if (onBattery) {    handler.postDelayed(callback,INACTIVITY_DELAY_MS);  }}  }
class C{  public void defaultCrossover2(EvolutionState state,int thread,VectorIndividual ind){  FloatVectorIndividual i=(FloatVectorIndividual)ind;  FloatVectorSpecies s=(FloatVectorSpecies)species;  float tmp;  for (int x=0; x < genome.length; x++)   if (state.random[thread].nextBoolean(s.crossoverProbability))   for (int y=x; y < (x + 1); y++) {    tmp=i.genome[y];    i.genome[y]=genome[y];    genome[y]=tmp;  }}  }
